
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	200043d8 	.word	0x200043d8

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	0000577d 	.word	0x0000577d
   8:	0001f435 	.word	0x0001f435
		if (fdtable[fd].obj == NULL) {
   c:	0000560d 	.word	0x0000560d
  10:	0000560d 	.word	0x0000560d
  14:	0000560d 	.word	0x0000560d
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	0000560d 	.word	0x0000560d

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	0000560d 	.word	0x0000560d
	errno = ENFILE;
  20:	0000560d 	.word	0x0000560d
	return -1;
  24:	0000560d 	.word	0x0000560d

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	0000560d 	.word	0x0000560d
  2c:	0000522d 	.word	0x0000522d
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	0000560d 	.word	0x0000560d
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	0000560d 	.word	0x0000560d
  38:	000051d9 	.word	0x000051d9
  3c:	0001f41b 	.word	0x0001f41b

00000040 <_irq_vector_table>:
  40:	0000573d 0002223f 0000573d 0000573d     =W..?"..=W..=W..
		sys_pm_notify_lps_exit(pm_state);
		sys_power_state_post_ops(pm_state);
	}

	return pm_state;
}
  50:	0000573d 0000573d 0000573d 0000573d     =W..=W..=W..=W..
  60:	0000573d 0000573d 0000573d 0000573d     =W..=W..=W..=W..
  70:	0000573d 0000573d 0000573d 0000573d     =W..=W..=W..=W..
  80:	0000573d 0000573d 0000573d 0000573d     =W..=W..=W..=W..
  90:	0000573d 0000573d 0000573d 0000573d     =W..=W..=W..=W..
  a0:	0000573d 0000573d 0000573d 0000573d     =W..=W..=W..=W..
  b0:	0000573d 0000573d 0000573d 0000573d     =W..=W..=W..=W..
  c0:	0000573d 0000573d 0000573d 0000573d     =W..=W..=W..=W..
  d0:	0000573d 0000573d 0000573d              =W..=W..=W..

Disassembly of section _TEXT_SECTION_NAME_2:

000000e0 <__aeabi_ldivmod>:
      e0:	b97b      	cbnz	r3, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e2:	b972      	cbnz	r2, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e4:	2900      	cmp	r1, #0
      e6:	bfbe      	ittt	lt
      e8:	2000      	movlt	r0, #0
      ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ee:	e006      	blt.n	fe <__aeabi_ldivmod+0x1e>
      f0:	bf08      	it	eq
      f2:	2800      	cmpeq	r0, #0
      f4:	bf1c      	itt	ne
      f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
      fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      fe:	f000 b857 	b.w	1b0 <__aeabi_idiv0>
     102:	f1ad 0c08 	sub.w	ip, sp, #8
     106:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     10a:	2900      	cmp	r1, #0
     10c:	db09      	blt.n	122 <CONFIG_KOBJECT_TEXT_AREA+0x22>
     10e:	2b00      	cmp	r3, #0
     110:	db1a      	blt.n	148 <CONFIG_IDLE_STACK_SIZE+0x8>
     112:	f000 f862 	bl	1da <__udivmoddi4>
     116:	f8dd e004 	ldr.w	lr, [sp, #4]
     11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11e:	b004      	add	sp, #16
     120:	4770      	bx	lr
     122:	4240      	negs	r0, r0
     124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     128:	2b00      	cmp	r3, #0
     12a:	db1b      	blt.n	164 <CONFIG_IDLE_STACK_SIZE+0x24>
     12c:	f000 f855 	bl	1da <__udivmoddi4>
     130:	f8dd e004 	ldr.w	lr, [sp, #4]
     134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     138:	b004      	add	sp, #16
     13a:	4240      	negs	r0, r0
     13c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     140:	4252      	negs	r2, r2
     142:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     146:	4770      	bx	lr
     148:	4252      	negs	r2, r2
     14a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14e:	f000 f844 	bl	1da <__udivmoddi4>
     152:	f8dd e004 	ldr.w	lr, [sp, #4]
     156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     15a:	b004      	add	sp, #16
     15c:	4240      	negs	r0, r0
     15e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     162:	4770      	bx	lr
     164:	4252      	negs	r2, r2
     166:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16a:	f000 f836 	bl	1da <__udivmoddi4>
     16e:	f8dd e004 	ldr.w	lr, [sp, #4]
     172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     176:	b004      	add	sp, #16
     178:	4252      	negs	r2, r2
     17a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     17e:	4770      	bx	lr

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <__aeabi_uldivmod+0x18>
     182:	b94a      	cbnz	r2, 198 <__aeabi_uldivmod+0x18>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     194:	f000 b80c 	b.w	1b0 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f81b 	bl	1da <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__aeabi_idiv0>:
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop

000001b4 <__popcountsi2>:
     1b4:	0843      	lsrs	r3, r0, #1
     1b6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     1ba:	1ac0      	subs	r0, r0, r3
     1bc:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
     1c0:	0880      	lsrs	r0, r0, #2
     1c2:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     1c6:	4418      	add	r0, r3
     1c8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     1cc:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
     1d0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     1d4:	4358      	muls	r0, r3
     1d6:	0e00      	lsrs	r0, r0, #24
     1d8:	4770      	bx	lr

000001da <__udivmoddi4>:
     1da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1de:	9f09      	ldr	r7, [sp, #36]	; 0x24
     1e0:	4615      	mov	r5, r2
     1e2:	4604      	mov	r4, r0
     1e4:	468e      	mov	lr, r1
     1e6:	461e      	mov	r6, r3
     1e8:	2b00      	cmp	r3, #0
     1ea:	f040 80cc 	bne.w	386 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x86>
     1ee:	428a      	cmp	r2, r1
     1f0:	fab2 fc82 	clz	ip, r2
     1f4:	d94c      	bls.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     1f6:	f1bc 0f00 	cmp.w	ip, #0
     1fa:	d00b      	beq.n	214 <CONFIG_FLASH_SIZE+0x14>
     1fc:	f1cc 0820 	rsb	r8, ip, #32
     200:	fa01 fe0c 	lsl.w	lr, r1, ip
     204:	fa20 f808 	lsr.w	r8, r0, r8
     208:	fa02 f50c 	lsl.w	r5, r2, ip
     20c:	ea48 0e0e 	orr.w	lr, r8, lr
     210:	fa00 f40c 	lsl.w	r4, r0, ip
     214:	ea4f 4915 	mov.w	r9, r5, lsr #16
     218:	fa1f f885 	uxth.w	r8, r5
     21c:	fbbe faf9 	udiv	sl, lr, r9
     220:	0c21      	lsrs	r1, r4, #16
     222:	fb09 e31a 	mls	r3, r9, sl, lr
     226:	fb0a fb08 	mul.w	fp, sl, r8
     22a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     22e:	459b      	cmp	fp, r3
     230:	d92a      	bls.n	288 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     232:	18eb      	adds	r3, r5, r3
     234:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     238:	d204      	bcs.n	244 <CONFIG_FLASH_SIZE+0x44>
     23a:	459b      	cmp	fp, r3
     23c:	d902      	bls.n	244 <CONFIG_FLASH_SIZE+0x44>
     23e:	f1aa 0002 	sub.w	r0, sl, #2
     242:	442b      	add	r3, r5
     244:	eba3 030b 	sub.w	r3, r3, fp
     248:	b2a4      	uxth	r4, r4
     24a:	fbb3 f2f9 	udiv	r2, r3, r9
     24e:	fb09 3312 	mls	r3, r9, r2, r3
     252:	fb02 f808 	mul.w	r8, r2, r8
     256:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     25a:	45a0      	cmp	r8, r4
     25c:	d916      	bls.n	28c <CONFIG_BT_HCI_TX_STACK_SIZE+0xc>
     25e:	192c      	adds	r4, r5, r4
     260:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     264:	d203      	bcs.n	26e <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x16>
     266:	45a0      	cmp	r8, r4
     268:	d901      	bls.n	26e <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x16>
     26a:	1e93      	subs	r3, r2, #2
     26c:	442c      	add	r4, r5
     26e:	eba4 0408 	sub.w	r4, r4, r8
     272:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     276:	b127      	cbz	r7, 282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     278:	fa24 f40c 	lsr.w	r4, r4, ip
     27c:	2300      	movs	r3, #0
     27e:	603c      	str	r4, [r7, #0]
     280:	607b      	str	r3, [r7, #4]
     282:	4631      	mov	r1, r6
     284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     288:	4650      	mov	r0, sl
     28a:	e7db      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     28c:	4613      	mov	r3, r2
     28e:	e7ee      	b.n	26e <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x16>
     290:	b902      	cbnz	r2, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     292:	deff      	udf	#255	; 0xff
     294:	f1bc 0f00 	cmp.w	ip, #0
     298:	d12e      	bne.n	2f8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     29a:	1a8b      	subs	r3, r1, r2
     29c:	2601      	movs	r6, #1
     29e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a2:	b2aa      	uxth	r2, r5
     2a4:	fbb3 f8fe 	udiv	r8, r3, lr
     2a8:	0c21      	lsrs	r1, r4, #16
     2aa:	fb0e 3318 	mls	r3, lr, r8, r3
     2ae:	fb08 f902 	mul.w	r9, r8, r2
     2b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     2b6:	4599      	cmp	r9, r3
     2b8:	d961      	bls.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     2ba:	18eb      	adds	r3, r5, r3
     2bc:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     2c0:	d204      	bcs.n	2cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     2c2:	4599      	cmp	r9, r3
     2c4:	d902      	bls.n	2cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     2c6:	f1a8 0002 	sub.w	r0, r8, #2
     2ca:	442b      	add	r3, r5
     2cc:	eba3 0309 	sub.w	r3, r3, r9
     2d0:	b2a4      	uxth	r4, r4
     2d2:	fbb3 f1fe 	udiv	r1, r3, lr
     2d6:	fb0e 3311 	mls	r3, lr, r1, r3
     2da:	434a      	muls	r2, r1
     2dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2e0:	42a2      	cmp	r2, r4
     2e2:	d94e      	bls.n	382 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x82>
     2e4:	192c      	adds	r4, r5, r4
     2e6:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     2ea:	d203      	bcs.n	2f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x74>
     2ec:	42a2      	cmp	r2, r4
     2ee:	d901      	bls.n	2f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x74>
     2f0:	1e8b      	subs	r3, r1, #2
     2f2:	442c      	add	r4, r5
     2f4:	1aa4      	subs	r4, r4, r2
     2f6:	e7bc      	b.n	272 <CONFIG_BT_MESH_RPL_STORE_TIMEOUT+0x1a>
     2f8:	f1cc 0e20 	rsb	lr, ip, #32
     2fc:	fa02 f50c 	lsl.w	r5, r2, ip
     300:	fa21 f90e 	lsr.w	r9, r1, lr
     304:	fa01 f30c 	lsl.w	r3, r1, ip
     308:	fa20 fe0e 	lsr.w	lr, r0, lr
     30c:	ea4e 0303 	orr.w	r3, lr, r3
     310:	ea4f 4815 	mov.w	r8, r5, lsr #16
     314:	fa00 f40c 	lsl.w	r4, r0, ip
     318:	fbb9 f1f8 	udiv	r1, r9, r8
     31c:	fa1f fe85 	uxth.w	lr, r5
     320:	fb08 9211 	mls	r2, r8, r1, r9
     324:	0c18      	lsrs	r0, r3, #16
     326:	fb01 f60e 	mul.w	r6, r1, lr
     32a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     32e:	4296      	cmp	r6, r2
     330:	d921      	bls.n	376 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x76>
     332:	18aa      	adds	r2, r5, r2
     334:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     338:	d203      	bcs.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33a:	4296      	cmp	r6, r2
     33c:	d901      	bls.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33e:	1e88      	subs	r0, r1, #2
     340:	442a      	add	r2, r5
     342:	1b92      	subs	r2, r2, r6
     344:	b29b      	uxth	r3, r3
     346:	fbb2 f9f8 	udiv	r9, r2, r8
     34a:	fb08 2219 	mls	r2, r8, r9, r2
     34e:	fb09 fe0e 	mul.w	lr, r9, lr
     352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     356:	459e      	cmp	lr, r3
     358:	d90f      	bls.n	37a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7a>
     35a:	18eb      	adds	r3, r5, r3
     35c:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     360:	d204      	bcs.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     362:	459e      	cmp	lr, r3
     364:	d902      	bls.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     366:	f1a9 0602 	sub.w	r6, r9, #2
     36a:	442b      	add	r3, r5
     36c:	eba3 030e 	sub.w	r3, r3, lr
     370:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     374:	e793      	b.n	29e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     376:	4608      	mov	r0, r1
     378:	e7e3      	b.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     37a:	464e      	mov	r6, r9
     37c:	e7f6      	b.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     37e:	4640      	mov	r0, r8
     380:	e7a4      	b.n	2cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     382:	460b      	mov	r3, r1
     384:	e7b6      	b.n	2f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x74>
     386:	428b      	cmp	r3, r1
     388:	d905      	bls.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     38a:	b10f      	cbz	r7, 390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     38c:	e9c7 0100 	strd	r0, r1, [r7]
     390:	2600      	movs	r6, #0
     392:	4630      	mov	r0, r6
     394:	e775      	b.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     396:	fab3 fc83 	clz	ip, r3
     39a:	f1bc 0f00 	cmp.w	ip, #0
     39e:	d10f      	bne.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     3a0:	428b      	cmp	r3, r1
     3a2:	d301      	bcc.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     3a4:	4282      	cmp	r2, r0
     3a6:	d809      	bhi.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     3a8:	1a84      	subs	r4, r0, r2
     3aa:	eb61 0e03 	sbc.w	lr, r1, r3
     3ae:	2001      	movs	r0, #1
     3b0:	2f00      	cmp	r7, #0
     3b2:	d06a      	beq.n	48a <CONFIG_LOG_BUFFER_SIZE+0x8a>
     3b4:	e9c7 4e00 	strd	r4, lr, [r7]
     3b8:	2600      	movs	r6, #0
     3ba:	e762      	b.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     3bc:	4660      	mov	r0, ip
     3be:	e7f7      	b.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     3c0:	f1cc 0e20 	rsb	lr, ip, #32
     3c4:	fa03 f30c 	lsl.w	r3, r3, ip
     3c8:	fa22 f50e 	lsr.w	r5, r2, lr
     3cc:	fa21 f40e 	lsr.w	r4, r1, lr
     3d0:	431d      	orrs	r5, r3
     3d2:	fa01 f30c 	lsl.w	r3, r1, ip
     3d6:	fa20 f10e 	lsr.w	r1, r0, lr
     3da:	430b      	orrs	r3, r1
     3dc:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     3e0:	fa00 f60c 	lsl.w	r6, r0, ip
     3e4:	fbb4 f9fa 	udiv	r9, r4, sl
     3e8:	fa1f f885 	uxth.w	r8, r5
     3ec:	fb0a 4019 	mls	r0, sl, r9, r4
     3f0:	0c1c      	lsrs	r4, r3, #16
     3f2:	fb09 f108 	mul.w	r1, r9, r8
     3f6:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     3fa:	42a1      	cmp	r1, r4
     3fc:	fa02 f20c 	lsl.w	r2, r2, ip
     400:	d93f      	bls.n	482 <CONFIG_LOG_BUFFER_SIZE+0x82>
     402:	192c      	adds	r4, r5, r4
     404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     408:	d204      	bcs.n	414 <CONFIG_LOG_BUFFER_SIZE+0x14>
     40a:	42a1      	cmp	r1, r4
     40c:	d902      	bls.n	414 <CONFIG_LOG_BUFFER_SIZE+0x14>
     40e:	f1a9 0002 	sub.w	r0, r9, #2
     412:	442c      	add	r4, r5
     414:	1a64      	subs	r4, r4, r1
     416:	b29b      	uxth	r3, r3
     418:	fbb4 f9fa 	udiv	r9, r4, sl
     41c:	fb0a 4419 	mls	r4, sl, r9, r4
     420:	fb09 f808 	mul.w	r8, r9, r8
     424:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     428:	4588      	cmp	r8, r1
     42a:	d92c      	bls.n	486 <CONFIG_LOG_BUFFER_SIZE+0x86>
     42c:	1869      	adds	r1, r5, r1
     42e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     432:	d204      	bcs.n	43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     434:	4588      	cmp	r8, r1
     436:	d902      	bls.n	43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     438:	f1a9 0302 	sub.w	r3, r9, #2
     43c:	4429      	add	r1, r5
     43e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     442:	eba1 0108 	sub.w	r1, r1, r8
     446:	fba0 8902 	umull	r8, r9, r0, r2
     44a:	4549      	cmp	r1, r9
     44c:	46c2      	mov	sl, r8
     44e:	464c      	mov	r4, r9
     450:	d302      	bcc.n	458 <CONFIG_LOG_BUFFER_SIZE+0x58>
     452:	d106      	bne.n	462 <CONFIG_LOG_BUFFER_SIZE+0x62>
     454:	4546      	cmp	r6, r8
     456:	d204      	bcs.n	462 <CONFIG_LOG_BUFFER_SIZE+0x62>
     458:	ebb8 0a02 	subs.w	sl, r8, r2
     45c:	eb69 0405 	sbc.w	r4, r9, r5
     460:	3801      	subs	r0, #1
     462:	b197      	cbz	r7, 48a <CONFIG_LOG_BUFFER_SIZE+0x8a>
     464:	ebb6 030a 	subs.w	r3, r6, sl
     468:	eb61 0604 	sbc.w	r6, r1, r4
     46c:	fa06 fe0e 	lsl.w	lr, r6, lr
     470:	fa23 f30c 	lsr.w	r3, r3, ip
     474:	ea4e 0303 	orr.w	r3, lr, r3
     478:	fa26 f60c 	lsr.w	r6, r6, ip
     47c:	e9c7 3600 	strd	r3, r6, [r7]
     480:	e79a      	b.n	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     482:	4648      	mov	r0, r9
     484:	e7c6      	b.n	414 <CONFIG_LOG_BUFFER_SIZE+0x14>
     486:	464b      	mov	r3, r9
     488:	e7d9      	b.n	43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     48a:	463e      	mov	r6, r7
     48c:	e6f9      	b.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
	...

00000490 <event_slave_prepare>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static void event_slave_prepare(u32_t ticks_at_expire, u32_t remainder,
				u16_t lazy, void *context)
{
     490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
     494:	4dc4      	ldr	r5, [pc, #784]	; (7a8 <CONFIG_BT_CTLR_COMPANY_ID+0x1b7>)
{
     496:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
     498:	7c2b      	ldrb	r3, [r5, #16]
{
     49a:	b08f      	sub	sp, #60	; 0x3c
     49c:	4606      	mov	r6, r0
     49e:	4688      	mov	r8, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
     4a0:	b19b      	cbz	r3, 4ca <event_slave_prepare+0x3a>
     4a2:	2301      	movs	r3, #1
     4a4:	f04f 0100 	mov.w	r1, #0
     4a8:	f363 0107 	bfi	r1, r3, #0, #8
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     4ac:	4abf      	ldr	r2, [pc, #764]	; (7ac <CONFIG_BT_CTLR_COMPANY_ID+0x1bb>)
     4ae:	4bc0      	ldr	r3, [pc, #768]	; (7b0 <CONFIG_BT_CTLR_COMPANY_ID+0x1bf>)
     4b0:	48c0      	ldr	r0, [pc, #768]	; (7b4 <CONFIG_BT_CTLR_COMPANY_ID+0x1c3>)
     4b2:	1a9b      	subs	r3, r3, r2
     4b4:	08db      	lsrs	r3, r3, #3
     4b6:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(0);
     4ba:	f01d ffc2 	bl	1e442 <log_0>
     4be:	4040      	eors	r0, r0
     4c0:	f380 8811 	msr	BASEPRI, r0
     4c4:	f04f 0004 	mov.w	r0, #4
     4c8:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
     4ca:	f894 3020 	ldrb.w	r3, [r4, #32]
     4ce:	3307      	adds	r3, #7
     4d0:	b2db      	uxtb	r3, r3
     4d2:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
     4d4:	f994 301d 	ldrsb.w	r3, [r4, #29]
     4d8:	2b00      	cmp	r3, #0
     4da:	da09      	bge.n	4f0 <event_slave_prepare+0x60>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
     4dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
     4de:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
     4e0:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
     4e4:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
     4e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
			conn->slave.window_widening_prepare_us =
     4e8:	4299      	cmp	r1, r3
     4ea:	bf94      	ite	ls
     4ec:	6461      	strls	r1, [r4, #68]	; 0x44
     4ee:	6463      	strhi	r3, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
     4f0:	8d27      	ldrh	r7, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
     4f2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
     4f6:	443a      	add	r2, r7
	event_counter = conn->event_counter + conn->latency_prepare;
     4f8:	8c67      	ldrh	r7, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
     4fa:	b292      	uxth	r2, r2
     4fc:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
     4fe:	443a      	add	r2, r7
     500:	b297      	uxth	r7, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
     502:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
     506:	429a      	cmp	r2, r3
     508:	d159      	bne.n	5be <event_slave_prepare+0x12e>
     50a:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
     50e:	075a      	lsls	r2, r3, #29
     510:	d455      	bmi.n	5be <event_slave_prepare+0x12e>
		} else if (conn->llcp_conn_param.ack !=
     512:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
     516:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
     51a:	429a      	cmp	r2, r3
     51c:	d04f      	beq.n	5be <event_slave_prepare+0x12e>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
     51e:	2005      	movs	r0, #5
     520:	f018 fd1e 	bl	18f60 <event_stop.constprop.46>
	conn_upd = _radio.conn_upd;
     524:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
	if (conn_upd && (conn_upd != conn)) {
     528:	b10b      	cbz	r3, 52e <event_slave_prepare+0x9e>
     52a:	429c      	cmp	r4, r3
     52c:	d147      	bne.n	5be <event_slave_prepare+0x12e>
	switch (conn->llcp_conn_param.state) {
     52e:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
     532:	f003 0307 	and.w	r3, r3, #7
     536:	2b05      	cmp	r3, #5
     538:	f200 8128 	bhi.w	78c <CONFIG_BT_CTLR_COMPANY_ID+0x19b>
     53c:	e8df f013 	tbh	[pc, r3, lsl #1]
     540:	00550006 	.word	0x00550006
     544:	003f00fa 	.word	0x003f00fa
     548:	003f003f 	.word	0x003f003f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     54c:	489a      	ldr	r0, [pc, #616]	; (7b8 <CONFIG_BT_CTLR_COMPANY_ID+0x1c7>)
     54e:	f021 faea 	bl	21b26 <mem_acquire>
	if (!node_tx) {
     552:	4601      	mov	r1, r0
     554:	b398      	cbz	r0, 5be <event_slave_prepare+0x12e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
     556:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
     55a:	2204      	movs	r2, #4
     55c:	f362 0302 	bfi	r3, r2, #0, #3
     560:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     564:	7903      	ldrb	r3, [r0, #4]
     566:	f043 0303 	orr.w	r3, r3, #3
     56a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     56c:	2318      	movs	r3, #24
     56e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     570:	230f      	movs	r3, #15
     572:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval_min;
     574:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
     578:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval_max;
     57a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
     57e:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
     580:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
     584:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
     586:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
     58a:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
     58c:	2300      	movs	r3, #0
     58e:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
     590:	74c3      	strb	r3, [r0, #19]
     592:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
     594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     598:	7543      	strb	r3, [r0, #21]
     59a:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
     59c:	75c3      	strb	r3, [r0, #23]
     59e:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
     5a0:	7643      	strb	r3, [r0, #25]
     5a2:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
     5a4:	76c3      	strb	r3, [r0, #27]
     5a6:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
     5a8:	7743      	strb	r3, [r0, #29]
     5aa:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
     5ac:	f8a0 7011 	strh.w	r7, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
     5b0:	4620      	mov	r0, r4
     5b2:	f021 fd1e 	bl	21ff2 <ctrl_tx_enqueue>
	conn->procedure_expire = conn->procedure_reload;
     5b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	_radio.conn_upd = conn;
     5b8:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	conn->procedure_expire = conn->procedure_reload;
     5bc:	86a3      	strh	r3, [r4, #52]	; 0x34
	if (conn->llcp_ack != conn->llcp_req) {
     5be:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
     5c2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     5c6:	429a      	cmp	r2, r3
     5c8:	f000 8138 	beq.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
     5cc:	2005      	movs	r0, #5
     5ce:	f018 fcc7 	bl	18f60 <event_stop.constprop.46>
		switch (conn->llcp_type) {
     5d2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
     5d6:	3b01      	subs	r3, #1
     5d8:	2b03      	cmp	r3, #3
     5da:	f200 80d7 	bhi.w	78c <CONFIG_BT_CTLR_COMPANY_ID+0x19b>
     5de:	e8df f013 	tbh	[pc, r3, lsl #1]
     5e2:	00ef      	.short	0x00ef
     5e4:	03450302 	.word	0x03450302
     5e8:	039e      	.short	0x039e
	if (conn->llcp_conn_param.status) {
     5ea:	f894 90ab 	ldrb.w	r9, [r4, #171]	; 0xab
     5ee:	f1b9 0f00 	cmp.w	r9, #0
     5f2:	d01d      	beq.n	630 <CONFIG_BT_CTLR_COMPANY_ID+0x3f>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     5f4:	4870      	ldr	r0, [pc, #448]	; (7b8 <CONFIG_BT_CTLR_COMPANY_ID+0x1c7>)
     5f6:	f021 fa96 	bl	21b26 <mem_acquire>
		if (!node_tx) {
     5fa:	4601      	mov	r1, r0
     5fc:	2800      	cmp	r0, #0
     5fe:	d0de      	beq.n	5be <event_slave_prepare+0x12e>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     600:	7903      	ldrb	r3, [r0, #4]
     602:	f043 0303 	orr.w	r3, r3, #3
     606:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     608:	2311      	movs	r3, #17
     60a:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
     60c:	2303      	movs	r3, #3
     60e:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     610:	230f      	movs	r3, #15
     612:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
     614:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
     618:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
     61a:	4620      	mov	r0, r4
     61c:	f021 fce9 	bl	21ff2 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     620:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
     624:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
		_radio.conn_upd = NULL;
     628:	2300      	movs	r3, #0
     62a:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
		return;
     62e:	e7c6      	b.n	5be <event_slave_prepare+0x12e>
	if (!conn->role) {
     630:	f994 301d 	ldrsb.w	r3, [r4, #29]
     634:	2b00      	cmp	r3, #0
     636:	db3a      	blt.n	6ae <CONFIG_BT_CTLR_COMPANY_ID+0xbd>
		if (conn->llcp_req != conn->llcp_ack) {
     638:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
     63c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     640:	428b      	cmp	r3, r1
     642:	d1bc      	bne.n	5be <event_slave_prepare+0x12e>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     644:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		conn->llcp.conn_upd.win_offset_us = 0U;
     648:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     64c:	2205      	movs	r2, #5
     64e:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
     652:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     656:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		conn->llcp.conn_upd.win_size = 1U;
     65a:	2301      	movs	r3, #1
     65c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
		if (conn->llcp_conn_param.preferred_periodicity) {
     660:	b312      	cbz	r2, 6a8 <CONFIG_BT_CTLR_COMPANY_ID+0xb7>
				((conn->llcp_conn_param.interval_min /
     662:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
     666:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
     66a:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
     66c:	fb13 f302 	smulbb	r3, r3, r2
     670:	b29b      	uxth	r3, r3
     672:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
     676:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
     67a:	6663      	str	r3, [r4, #100]	; 0x64
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
     67c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
     680:	2202      	movs	r2, #2
     682:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
     686:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
     68a:	f082 0208 	eor.w	r2, r2, #8
     68e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
     692:	f362 0382 	bfi	r3, r2, #2, #1
     696:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_ack--;
     69a:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
     69c:	2301      	movs	r3, #1
     69e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		conn->llcp_ack--;
     6a2:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
		return;
     6a6:	e78a      	b.n	5be <event_slave_prepare+0x12e>
				conn->llcp_conn_param.interval_max;
     6a8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
     6ac:	e7e1      	b.n	672 <CONFIG_BT_CTLR_COMPANY_ID+0x81>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     6ae:	4842      	ldr	r0, [pc, #264]	; (7b8 <CONFIG_BT_CTLR_COMPANY_ID+0x1c7>)
     6b0:	f021 fa39 	bl	21b26 <mem_acquire>
	if (!node_tx) {
     6b4:	4601      	mov	r1, r0
     6b6:	2800      	cmp	r0, #0
     6b8:	d081      	beq.n	5be <event_slave_prepare+0x12e>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     6ba:	7903      	ldrb	r3, [r0, #4]
     6bc:	f043 0303 	orr.w	r3, r3, #3
     6c0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
     6c2:	2318      	movs	r3, #24
     6c4:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
     6c6:	2310      	movs	r3, #16
     6c8:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval_min;
     6ca:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
     6ce:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval_max;
     6d0:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
     6d4:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
     6d6:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
     6da:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
     6dc:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
     6e0:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
     6e2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
     6e6:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
     6e8:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
     6ec:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
     6f0:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
     6f4:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
     6f8:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
     6fc:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
     700:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
     704:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
     708:	f8b4 30be 	ldrh.w	r3, [r4, #190]	; 0xbe
     70c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
     710:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
     714:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
     718:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
     71c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
     720:	4620      	mov	r0, r4
     722:	f021 fc66 	bl	21ff2 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     726:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
     72a:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	_radio.conn_upd = NULL;
     72e:	f8c5 9180 	str.w	r9, [r5, #384]	; 0x180
     732:	e744      	b.n	5be <event_slave_prepare+0x12e>
	if (conn->pause_tx) {
     734:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
     738:	071b      	lsls	r3, r3, #28
     73a:	f53f af40 	bmi.w	5be <event_slave_prepare+0x12e>
	node_rx = packet_rx_reserve_get(2);
     73e:	2002      	movs	r0, #2
     740:	f017 f902 	bl	17948 <packet_rx_reserve_get>
	if (!node_rx) {
     744:	2800      	cmp	r0, #0
     746:	f43f af3a 	beq.w	5be <event_slave_prepare+0x12e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
     74a:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
     74e:	2203      	movs	r2, #3
     750:	f362 0302 	bfi	r3, r2, #0, #3
     754:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	node_rx->hdr.handle = conn->handle;
     758:	8c23      	ldrh	r3, [r4, #32]
     75a:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     75c:	2302      	movs	r3, #2
     75e:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     760:	7a03      	ldrb	r3, [r0, #8]
     762:	4313      	orrs	r3, r2
     764:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     766:	2318      	movs	r3, #24
     768:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     76a:	230f      	movs	r3, #15
     76c:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval_min;
     76e:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
     772:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval_max;
     774:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
     778:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
     77a:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
     77e:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
     780:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
     784:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
     786:	f017 f99d 	bl	17ac4 <packet_rx_enqueue>
     78a:	e718      	b.n	5be <event_slave_prepare+0x12e>
		LL_ASSERT(0);
     78c:	2301      	movs	r3, #1
     78e:	f04f 0100 	mov.w	r1, #0
     792:	f363 0107 	bfi	r1, r3, #0, #8
     796:	4a05      	ldr	r2, [pc, #20]	; (7ac <CONFIG_BT_CTLR_COMPANY_ID+0x1bb>)
     798:	4b05      	ldr	r3, [pc, #20]	; (7b0 <CONFIG_BT_CTLR_COMPANY_ID+0x1bf>)
     79a:	4808      	ldr	r0, [pc, #32]	; (7bc <CONFIG_BT_CTLR_COMPANY_ID+0x1cb>)
     79c:	1a9b      	subs	r3, r3, r2
     79e:	08db      	lsrs	r3, r3, #3
     7a0:	f363 118f 	bfi	r1, r3, #6, #10
     7a4:	e689      	b.n	4ba <event_slave_prepare+0x2a>
     7a6:	bf00      	nop
     7a8:	20000d68 	.word	0x20000d68
     7ac:	000233ec 	.word	0x000233ec
     7b0:	0002341c 	.word	0x0002341c
     7b4:	00028921 	.word	0x00028921
     7b8:	20000ebc 	.word	0x20000ebc
     7bc:	0002822a 	.word	0x0002822a
	if (!conn_upd) {
     7c0:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
     7c4:	b90b      	cbnz	r3, 7ca <CONFIG_BT_CTLR_COMPANY_ID+0x1d9>
		_radio.conn_upd = conn;
     7c6:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
     7ca:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
     7ce:	f013 0303 	ands.w	r3, r3, #3
     7d2:	d06c      	beq.n	8ae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xae>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     7d4:	48cc      	ldr	r0, [pc, #816]	; (b08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x308>)
     7d6:	f021 f9a6 	bl	21b26 <mem_acquire>
		if (!node_tx) {
     7da:	4601      	mov	r1, r0
     7dc:	b370      	cbz	r0, 83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
     7de:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     7e2:	7902      	ldrb	r2, [r0, #4]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
     7e4:	f36f 0301 	bfc	r3, #0, #2
     7e8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
     7ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     7ee:	443b      	add	r3, r7
     7f0:	3306      	adds	r3, #6
     7f2:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     7f4:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp.conn_upd.instant =
     7f8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     7fc:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     7fe:	220c      	movs	r2, #12
     800:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     802:	2200      	movs	r2, #0
     804:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
     806:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
     80a:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
     80c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
     80e:	f240 40e2 	movw	r0, #1250	; 0x4e2
     812:	fbb2 f2f0 	udiv	r2, r2, r0
     816:	f8a1 2009 	strh.w	r2, [r1, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     81a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
     81e:	f8a1 200b 	strh.w	r2, [r1, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     822:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
     826:	f8a1 200d 	strh.w	r2, [r1, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     82a:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
     82e:	f8a1 200f 	strh.w	r2, [r1, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     832:	f8a1 3011 	strh.w	r3, [r1, #17]
			ctrl_tx_enqueue(conn, node_tx);
     836:	4620      	mov	r0, r4
     838:	f021 fbdb 	bl	21ff2 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
     83c:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
     840:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
     844:	429a      	cmp	r2, r3
     846:	d01d      	beq.n	884 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x84>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
     848:	2005      	movs	r0, #5
     84a:	f018 fb89 	bl	18f60 <event_stop.constprop.46>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     84e:	48ae      	ldr	r0, [pc, #696]	; (b08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x308>)
     850:	f021 f969 	bl	21b26 <mem_acquire>
		if (node_tx) {
     854:	4601      	mov	r1, r0
     856:	b1a8      	cbz	r0, 884 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x84>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
     858:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
     85c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     860:	7903      	ldrb	r3, [r0, #4]
     862:	f043 0303 	orr.w	r3, r3, #3
     866:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     868:	2302      	movs	r3, #2
     86a:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
     86c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
     86e:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
     872:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
     874:	4620      	mov	r0, r4
     876:	f021 fbbc 	bl	21ff2 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
     87a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
     87c:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
     87e:	bf98      	it	ls
     880:	3301      	addls	r3, #1
     882:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
     884:	4ba1      	ldr	r3, [pc, #644]	; (b0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30c>)
     886:	9403      	str	r4, [sp, #12]
     888:	9302      	str	r3, [sp, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
     88a:	f894 3020 	ldrb.w	r3, [r4, #32]
     88e:	3307      	adds	r3, #7
	event_common_prepare(ticks_at_expire, remainder,
     890:	b2db      	uxtb	r3, r3
     892:	9301      	str	r3, [sp, #4]
     894:	68a3      	ldr	r3, [r4, #8]
     896:	9300      	str	r3, [sp, #0]
     898:	4622      	mov	r2, r4
     89a:	1d23      	adds	r3, r4, #4
     89c:	4641      	mov	r1, r8
     89e:	4630      	mov	r0, r6
	conn->event_counter = event_counter + 1;
     8a0:	3701      	adds	r7, #1
	event_common_prepare(ticks_at_expire, remainder,
     8a2:	f018 fb6b 	bl	18f7c <event_common_prepare>
	conn->event_counter = event_counter + 1;
     8a6:	8467      	strh	r7, [r4, #34]	; 0x22
	DEBUG_RADIO_PREPARE_S(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);

	DEBUG_RADIO_PREPARE_S(0);
}
     8a8:	b00f      	add	sp, #60	; 0x3c
     8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     8ae:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
     8b2:	eba7 0209 	sub.w	r2, r7, r9
     8b6:	b292      	uxth	r2, r2
	} else if (instant_latency <= 0x7FFF) {
     8b8:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     8ba:	920b      	str	r2, [sp, #44]	; 0x2c
	} else if (instant_latency <= 0x7FFF) {
     8bc:	d4be      	bmi.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
		conn->llcp_ack = conn->llcp_req;
     8be:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
     8c2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     8c6:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
     8ca:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
     8ce:	428a      	cmp	r2, r1
     8d0:	d008      	beq.n	8e4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe4>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     8d2:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     8d6:	f002 0207 	and.w	r2, r2, #7
     8da:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     8dc:	bf04      	itt	eq
     8de:	f884 10a9 	strbeq.w	r1, [r4, #169]	; 0xa9
			conn->procedure_expire = 0U;
     8e2:	86a3      	strheq	r3, [r4, #52]	; 0x34
		if (_radio.conn_upd == conn) {
     8e4:	f8d5 2180 	ldr.w	r2, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0U;
     8e8:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
     8ea:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
     8ec:	bf08      	it	eq
     8ee:	f8c5 3180 	streq.w	r3, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0U;
     8f2:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
     8f4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
		     conn->conn_interval) ||
     8f8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
     8fa:	429a      	cmp	r2, r3
     8fc:	d114      	bne.n	928 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x128>
		     conn->conn_interval) ||
     8fe:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
     902:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     904:	4299      	cmp	r1, r3
     906:	d10f      	bne.n	928 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x128>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
     908:	f240 43e2 	movw	r3, #1250	; 0x4e2
     90c:	435a      	muls	r2, r3
     90e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
     912:	f242 7110 	movw	r1, #10000	; 0x2710
     916:	fb01 2303 	mla	r3, r1, r3, r2
     91a:	3b01      	subs	r3, #1
     91c:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
     920:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     922:	b29b      	uxth	r3, r3
     924:	429a      	cmp	r2, r3
     926:	d021      	beq.n	96c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16c>
			node_rx = packet_rx_reserve_get(2);
     928:	2002      	movs	r0, #2
     92a:	f017 f80d 	bl	17948 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
     92e:	b960      	cbnz	r0, 94a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14a>
		LL_ASSERT(node_rx);
     930:	2301      	movs	r3, #1
     932:	f04f 0100 	mov.w	r1, #0
     936:	f363 0107 	bfi	r1, r3, #0, #8
     93a:	4a75      	ldr	r2, [pc, #468]	; (b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>)
     93c:	4b75      	ldr	r3, [pc, #468]	; (b14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x314>)
     93e:	4876      	ldr	r0, [pc, #472]	; (b18 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x318>)
     940:	1a9b      	subs	r3, r3, r2
     942:	08db      	lsrs	r3, r3, #3
     944:	f363 118f 	bfi	r1, r3, #6, #10
     948:	e5b7      	b.n	4ba <event_slave_prepare+0x2a>
			node_rx->hdr.handle = conn->handle;
     94a:	8c23      	ldrh	r3, [r4, #32]
     94c:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     94e:	230a      	movs	r3, #10
     950:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status = 0x00;
     952:	2300      	movs	r3, #0
     954:	7203      	strb	r3, [r0, #8]
			radio_le_conn_update_cmplt->interval =
     956:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
     95a:	8143      	strh	r3, [r0, #10]
			radio_le_conn_update_cmplt->latency =
     95c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
     960:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->timeout =
     962:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
     966:	81c3      	strh	r3, [r0, #14]
			packet_rx_enqueue();
     968:	f017 f8ac 	bl	17ac4 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
     96c:	e9d4 0b00 	ldrd	r0, fp, [r4]
     970:	2800      	cmp	r0, #0
     972:	da08      	bge.n	986 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x186>
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
     974:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
			u32_t ticks_prepare_to_start =
     978:	68a3      	ldr	r3, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
     97a:	6020      	str	r0, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
     97c:	1a36      	subs	r6, r6, r0
     97e:	459b      	cmp	fp, r3
     980:	bf2c      	ite	cs
     982:	445e      	addcs	r6, fp
     984:	18f6      	addcc	r6, r6, r3
		conn_interval_old = instant_latency * conn->conn_interval;
     986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     988:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
     98a:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
     98e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x330>
		conn_interval_old = instant_latency * conn->conn_interval;
     992:	fb13 f302 	smulbb	r3, r3, r2
     996:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
     998:	fbb3 f1fa 	udiv	r1, r3, sl
     99c:	b28a      	uxth	r2, r1
     99e:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_new = latency *
     9a0:	fb1a f202 	smulbb	r2, sl, r2
     9a4:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     9a6:	4293      	cmp	r3, r2
     9a8:	f240 40e2 	movw	r0, #1250	; 0x4e2
     9ac:	f080 80c2 	bcs.w	b34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x334>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     9b0:	1ad3      	subs	r3, r2, r3
     9b2:	4358      	muls	r0, r3
     9b4:	fb80 0108 	smull	r0, r1, r0, r8
     9b8:	a351      	add	r3, pc, #324	; (adr r3, b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>)
     9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
     9be:	f7ff fbdf 	bl	180 <__aeabi_uldivmod>
     9c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9c6:	4406      	add	r6, r0
		conn->latency_prepare -= (instant_latency - latency);
     9c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     9ca:	eba9 0707 	sub.w	r7, r9, r7
     9ce:	441f      	add	r7, r3
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
     9d0:	6823      	ldr	r3, [r4, #0]
		conn->latency_prepare -= (instant_latency - latency);
     9d2:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
     9d6:	459b      	cmp	fp, r3
     9d8:	bf38      	it	cc
     9da:	469b      	movcc	fp, r3
		if (conn->role) {
     9dc:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
     9e0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
		conn->latency_prepare -= (instant_latency - latency);
     9e4:	444f      	add	r7, r9
		if (conn->role) {
     9e6:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
     9e8:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->latency_prepare -= (instant_latency - latency);
     9ec:	8527      	strh	r7, [r4, #40]	; 0x28
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
     9ee:	f8d4 b06c 	ldr.w	fp, [r4, #108]	; 0x6c
     9f2:	fb09 f70a 	mul.w	r7, r9, sl
		if (conn->role) {
     9f6:	f280 80aa 	bge.w	b4e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x34e>
			conn->slave.window_widening_prepare_us -=
     9fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
     9fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
				conn->slave.window_widening_periodic_us *
     9fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				conn->slave.window_widening_periodic_us *
     a00:	980c      	ldr	r0, [sp, #48]	; 0x30
			conn->slave.window_widening_prepare_us -=
     a02:	fb03 2311 	mls	r3, r3, r1, r2
				(((gc_lookup_ppm[_radio.sca] +
     a06:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
     a0a:	4944      	ldr	r1, [pc, #272]	; (b1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x31c>)
     a0c:	f831 5012 	ldrh.w	r5, [r1, r2, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
     a10:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
     a14:	f3c2 0282 	ubfx	r2, r2, #2, #3
     a18:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
     a1c:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
     a20:	4415      	add	r5, r2
				   gc_lookup_ppm[conn->slave.sca]) *
     a22:	437d      	muls	r5, r7
				  conn_interval_us) + (1000000 - 1)) / 1000000;
     a24:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
     a28:	4a3d      	ldr	r2, [pc, #244]	; (b20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x320>)
				conn->llcp.conn_upd.win_size * 1250;
     a2a:	fb09 f101 	mul.w	r1, r9, r1
				  conn_interval_us) + (1000000 - 1)) / 1000000;
     a2e:	f205 253f 	addw	r5, r5, #575	; 0x23f
     a32:	fbb5 f5f2 	udiv	r5, r5, r2
				(conn_interval_us >> 1) - RADIO_TIFS;
     a36:	087a      	lsrs	r2, r7, #1
				conn->slave.window_widening_periodic_us *
     a38:	4368      	muls	r0, r5
				(conn_interval_us >> 1) - RADIO_TIFS;
     a3a:	3a96      	subs	r2, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
     a3c:	4403      	add	r3, r0
			conn->slave.window_size_prepare_us =
     a3e:	64e1      	str	r1, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0U;
     a40:	2100      	movs	r1, #0
			conn->slave.window_widening_periodic_us =
     a42:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
     a44:	6422      	str	r2, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0U;
     a46:	65a1      	str	r1, [r4, #88]	; 0x58
			conn->slave.window_widening_prepare_us +=
     a48:	4293      	cmp	r3, r2
     a4a:	bf94      	ite	ls
     a4c:	6463      	strls	r3, [r4, #68]	; 0x44
     a4e:	6462      	strhi	r2, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     a50:	fba0 0108 	umull	r0, r1, r0, r8
     a54:	a32a      	add	r3, pc, #168	; (adr r3, b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>)
     a56:	e9d3 2300 	ldrd	r2, r3, [r3]
     a5a:	f7ff fb91 	bl	180 <__aeabi_uldivmod>
     a5e:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     a60:	fbbb f0f9 	udiv	r0, fp, r9
     a64:	fb09 f000 	mul.w	r0, r9, r0
     a68:	a325      	add	r3, pc, #148	; (adr r3, b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>)
     a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
     a6e:	fba0 0108 	umull	r0, r1, r0, r8
     a72:	f7ff fb85 	bl	180 <__aeabi_uldivmod>
     a76:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
     a7a:	930b      	str	r3, [sp, #44]	; 0x2c
			periodic_us -= conn->slave.window_widening_periodic_us;
     a7c:	1b7d      	subs	r5, r7, r5
		conn->latency = conn->llcp.conn_upd.latency;
     a7e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
     a82:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
     a84:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
     a88:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
     a8c:	f242 7210 	movw	r2, #10000	; 0x2710
     a90:	fb02 7303 	mla	r3, r2, r3, r7
     a94:	3b01      	subs	r3, #1
     a96:	fbb3 f3f7 	udiv	r3, r3, r7
     a9a:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     a9c:	4b21      	ldr	r3, [pc, #132]	; (b24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x324>)
     a9e:	443b      	add	r3, r7
     aa0:	fbb3 f7f7 	udiv	r7, r3, r7
		if (!conn->llcp.conn_upd.is_internal) {
     aa4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     aa8:	8667      	strh	r7, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
     aaa:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0U;
     aae:	bf08      	it	eq
     ab0:	8623      	strheq	r3, [r4, #48]	; 0x30
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
     ab2:	2101      	movs	r1, #1
     ab4:	2000      	movs	r0, #0
     ab6:	f019 ff4f 	bl	1a958 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
     aba:	2200      	movs	r2, #0
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
     abc:	900c      	str	r0, [sp, #48]	; 0x30
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
     abe:	2101      	movs	r1, #1
     ac0:	4610      	mov	r0, r2
     ac2:	f015 f865 	bl	15b90 <mayfly_enable>
		ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;
     ac6:	f894 7020 	ldrb.w	r7, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
     aca:	4b17      	ldr	r3, [pc, #92]	; (b28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x328>)
		ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;
     acc:	3707      	adds	r7, #7
     ace:	b2ff      	uxtb	r7, r7
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
     ad0:	2100      	movs	r1, #0
				    (void *)(u32_t)ticker_id);
     ad2:	9700      	str	r7, [sp, #0]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
     ad4:	463a      	mov	r2, r7
     ad6:	4608      	mov	r0, r1
     ad8:	f015 fe32 	bl	16740 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     adc:	f030 0a02 	bics.w	sl, r0, #2
     ae0:	d042      	beq.n	b68 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x368>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     ae2:	2301      	movs	r3, #1
     ae4:	f04f 0100 	mov.w	r1, #0
     ae8:	f363 0107 	bfi	r1, r3, #0, #8
     aec:	4a08      	ldr	r2, [pc, #32]	; (b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>)
     aee:	4b09      	ldr	r3, [pc, #36]	; (b14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x314>)
     af0:	480e      	ldr	r0, [pc, #56]	; (b2c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x32c>)
     af2:	1a9b      	subs	r3, r3, r2
     af4:	08db      	lsrs	r3, r3, #3
     af6:	f363 118f 	bfi	r1, r3, #6, #10
     afa:	e4de      	b.n	4ba <event_slave_prepare+0x2a>
     afc:	f3af 8000 	nop.w
     b00:	1afd498d 	.word	0x1afd498d
     b04:	00000007 	.word	0x00000007
     b08:	20000ebc 	.word	0x20000ebc
     b0c:	000186b1 	.word	0x000186b1
     b10:	000233ec 	.word	0x000233ec
     b14:	0002341c 	.word	0x0002341c
     b18:	00028795 	.word	0x00028795
     b1c:	00023fd8 	.word	0x00023fd8
     b20:	000f4240 	.word	0x000f4240
     b24:	026259ff 	.word	0x026259ff
     b28:	00017be9 	.word	0x00017be9
     b2c:	00028388 	.word	0x00028388
     b30:	3b9aca00 	.word	0x3b9aca00
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     b34:	fb0a 3111 	mls	r1, sl, r1, r3
     b38:	b289      	uxth	r1, r1
     b3a:	4348      	muls	r0, r1
     b3c:	a3a4      	add	r3, pc, #656	; (adr r3, dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>)
     b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
     b42:	fb80 0108 	smull	r0, r1, r0, r8
     b46:	f7ff fb1b 	bl	180 <__aeabi_uldivmod>
     b4a:	1a36      	subs	r6, r6, r0
     b4c:	e73c      	b.n	9c8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c8>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     b4e:	a3a0      	add	r3, pc, #640	; (adr r3, dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>)
     b50:	e9d3 2300 	ldrd	r2, r3, [r3]
     b54:	fbab 0108 	umull	r0, r1, fp, r8
     b58:	f7ff fb12 	bl	180 <__aeabi_uldivmod>
     b5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
     b60:	1c43      	adds	r3, r0, #1
     b62:	930b      	str	r3, [sp, #44]	; 0x2c
		periodic_us = conn_interval_us;
     b64:	463d      	mov	r5, r7
     b66:	e78a      	b.n	a7e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x27e>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     b68:	fba5 8908 	umull	r8, r9, r5, r8
     b6c:	a398      	add	r3, pc, #608	; (adr r3, dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>)
     b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
     b72:	4640      	mov	r0, r8
     b74:	4649      	mov	r1, r9
     b76:	f7ff fb03 	bl	180 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
     b7a:	f641 4352 	movw	r3, #7250	; 0x1c52
     b7e:	9308      	str	r3, [sp, #32]
     b80:	4b8f      	ldr	r3, [pc, #572]	; (dc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c0>)
     b82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b84:	e9cd 4306 	strd	r4, r3, [sp, #24]
     b88:	4b8e      	ldr	r3, [pc, #568]	; (dc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c4>)
     b8a:	9305      	str	r3, [sp, #20]
     b8c:	68e3      	ldr	r3, [r4, #12]
     b8e:	441a      	add	r2, r3
				     HAL_TICKER_REMAINDER(periodic_us),
     b90:	4b8d      	ldr	r3, [pc, #564]	; (dc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c8>)
     b92:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b96:	fba4 bc03 	umull	fp, ip, r4, r3
     b9a:	2307      	movs	r3, #7
     b9c:	fb03 cc04 	mla	ip, r3, r4, ip
     ba0:	ebb8 000b 	subs.w	r0, r8, fp
     ba4:	eb69 010c 	sbc.w	r1, r9, ip
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
     ba8:	e9cd a203 	strd	sl, r2, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
     bac:	2300      	movs	r3, #0
     bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     bb2:	f7ff fae5 	bl	180 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
     bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     bb8:	9300      	str	r3, [sp, #0]
     bba:	e9cd 4001 	strd	r4, r0, [sp, #4]
     bbe:	4633      	mov	r3, r6
     bc0:	463a      	mov	r2, r7
     bc2:	4651      	mov	r1, sl
     bc4:	4650      	mov	r0, sl
     bc6:	f015 fd29 	bl	1661c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     bca:	f030 0002 	bics.w	r0, r0, #2
     bce:	d188      	bne.n	ae2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e2>
		if (mayfly_was_enabled) {
     bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     bd2:	2b00      	cmp	r3, #0
     bd4:	f43f ae68 	beq.w	8a8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa8>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
     bd8:	2201      	movs	r2, #1
     bda:	4611      	mov	r1, r2
}
     bdc:	b00f      	add	sp, #60	; 0x3c
     bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
     be2:	f014 bfd5 	b.w	15b90 <mayfly_enable>
	if (conn->llcp.chan_map.initiate) {
     be6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
     bea:	b313      	cbz	r3, c32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x432>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     bec:	4877      	ldr	r0, [pc, #476]	; (dcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5cc>)
     bee:	f020 ff9a 	bl	21b26 <mem_acquire>
		if (node_tx) {
     bf2:	4605      	mov	r5, r0
     bf4:	2800      	cmp	r0, #0
     bf6:	f43f ae21 	beq.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
			conn->llcp.chan_map.initiate = 0U;
     bfa:	2300      	movs	r3, #0
     bfc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
     c00:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c02:	443b      	add	r3, r7
     c04:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
     c06:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     c0a:	7903      	ldrb	r3, [r0, #4]
     c0c:	f043 0303 	orr.w	r3, r3, #3
     c10:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     c12:	2308      	movs	r3, #8
     c14:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
     c16:	2301      	movs	r3, #1
     c18:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
     c1a:	f104 0161 	add.w	r1, r4, #97	; 0x61
     c1e:	2205      	movs	r2, #5
     c20:	3008      	adds	r0, #8
     c22:	f01e fcf1 	bl	1f608 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
     c26:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
     c2a:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
     c2e:	4629      	mov	r1, r5
     c30:	e601      	b.n	836 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x36>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
     c32:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
     c36:	1afb      	subs	r3, r7, r3
     c38:	0419      	lsls	r1, r3, #16
     c3a:	f53f adff 	bmi.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
		conn->llcp_ack = conn->llcp_req;
     c3e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     c42:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
     c46:	f104 0517 	add.w	r5, r4, #23
     c4a:	2205      	movs	r2, #5
     c4c:	f104 0161 	add.w	r1, r4, #97	; 0x61
     c50:	4628      	mov	r0, r5
     c52:	f01e fcd9 	bl	1f608 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
     c56:	2105      	movs	r1, #5
     c58:	4628      	mov	r0, r5
     c5a:	f020 ffca 	bl	21bf2 <util_ones_count_get>
		conn->data_chan_count =
     c5e:	7f63      	ldrb	r3, [r4, #29]
     c60:	f360 0305 	bfi	r3, r0, #0, #6
     c64:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1U;
     c66:	2301      	movs	r3, #1
     c68:	7723      	strb	r3, [r4, #28]
     c6a:	e5e7      	b.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
	if (conn->common.fex_valid) {
     c6c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
     c70:	f011 0920 	ands.w	r9, r1, #32
     c74:	d024      	beq.n	cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>
		conn->llcp_ack = conn->llcp_req;
     c76:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     c7a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
     c7e:	2002      	movs	r0, #2
     c80:	f016 fe62 	bl	17948 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
     c84:	4605      	mov	r5, r0
     c86:	2800      	cmp	r0, #0
     c88:	f43f ae52 	beq.w	930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
		node_rx->hdr.handle = conn->handle;
     c8c:	8c23      	ldrh	r3, [r4, #32]
     c8e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     c90:	2302      	movs	r3, #2
     c92:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
     c94:	7a03      	ldrb	r3, [r0, #8]
     c96:	f043 0303 	orr.w	r3, r3, #3
     c9a:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
     c9c:	2309      	movs	r3, #9
     c9e:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     ca0:	72c3      	strb	r3, [r0, #11]
		(void)memset(&pdu_ctrl_rx->llctrl.feature_rsp.features[0], 0x00,
     ca2:	2208      	movs	r2, #8
     ca4:	2100      	movs	r1, #0
     ca6:	300c      	adds	r0, #12
     ca8:	f01e fcd8 	bl	1f65c <memset>
			conn->llcp_features & 0xFF;
     cac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_rx->llctrl.feature_req.features[0] =
     cb0:	732b      	strb	r3, [r5, #12]
			(conn->llcp_features >> 8) & 0xFF;
     cb2:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
     cb4:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_rx->llctrl.feature_req.features[1] =
     cb6:	736a      	strb	r2, [r5, #13]
		pdu_ctrl_rx->llctrl.feature_req.features[2] =
     cb8:	73ab      	strb	r3, [r5, #14]
		packet_rx_enqueue();
     cba:	f016 ff03 	bl	17ac4 <packet_rx_enqueue>
     cbe:	e5bd      	b.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     cc0:	4842      	ldr	r0, [pc, #264]	; (dcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5cc>)
     cc2:	f020 ff30 	bl	21b26 <mem_acquire>
	if (node_tx) {
     cc6:	4605      	mov	r5, r0
     cc8:	2800      	cmp	r0, #0
     cca:	f43f adb7 	beq.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
		conn->llcp_ack = conn->llcp_req;
     cce:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     cd2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = LL_FEAT;
     cd6:	f44f 73c7 	mov.w	r3, #398	; 0x18e
     cda:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     cde:	7903      	ldrb	r3, [r0, #4]
     ce0:	f043 0303 	orr.w	r3, r3, #3
     ce4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
     ce6:	2309      	movs	r3, #9
     ce8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
     cea:	f994 301d 	ldrsb.w	r3, [r4, #29]
     cee:	2b00      	cmp	r3, #0
     cf0:	bfac      	ite	ge
     cf2:	2308      	movge	r3, #8
     cf4:	230e      	movlt	r3, #14
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
     cf6:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
     cf8:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
     cfa:	4649      	mov	r1, r9
     cfc:	4410      	add	r0, r2
     cfe:	f01e fcad 	bl	1f65c <memset>
			conn->llcp_features & 0xFF;
     d02:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
     d06:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
     d08:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
     d0a:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
     d0c:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
     d0e:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
     d10:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
     d12:	4620      	mov	r0, r4
     d14:	f021 f96d 	bl	21ff2 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
     d18:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     d1a:	86a3      	strh	r3, [r4, #52]	; 0x34
     d1c:	e58e      	b.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
	if (conn->llcp_version.tx == 0) {
     d1e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
     d22:	07da      	lsls	r2, r3, #31
     d24:	d424      	bmi.n	d70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x570>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     d26:	4829      	ldr	r0, [pc, #164]	; (dcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5cc>)
     d28:	f020 fefd 	bl	21b26 <mem_acquire>
		if (node_tx) {
     d2c:	4601      	mov	r1, r0
     d2e:	2800      	cmp	r0, #0
     d30:	f43f ad84 	beq.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
			conn->llcp_ack = conn->llcp_req;
     d34:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     d38:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1U;
     d3c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
     d40:	f043 0301 	orr.w	r3, r3, #1
     d44:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     d48:	7903      	ldrb	r3, [r0, #4]
     d4a:	f043 0303 	orr.w	r3, r3, #3
     d4e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
     d50:	2306      	movs	r3, #6
     d52:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
     d54:	230c      	movs	r3, #12
     d56:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
     d58:	2309      	movs	r3, #9
     d5a:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
     d5c:	f06f 030e 	mvn.w	r3, #14
     d60:	7243      	strb	r3, [r0, #9]
     d62:	2305      	movs	r3, #5
     d64:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
     d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     d6a:	72c3      	strb	r3, [r0, #11]
     d6c:	7303      	strb	r3, [r0, #12]
     d6e:	e7d0      	b.n	d12 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x512>
	} else if (conn->llcp_version.rx != 0) {
     d70:	079b      	lsls	r3, r3, #30
     d72:	f57f ad0b 	bpl.w	78c <CONFIG_BT_CTLR_COMPANY_ID+0x19b>
		conn->llcp_ack = conn->llcp_req;
     d76:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     d7a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
     d7e:	2002      	movs	r0, #2
     d80:	f016 fde2 	bl	17948 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
     d84:	2800      	cmp	r0, #0
     d86:	f43f add3 	beq.w	930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
		node_rx->hdr.handle = conn->handle;
     d8a:	8c23      	ldrh	r3, [r4, #32]
     d8c:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     d8e:	2302      	movs	r3, #2
     d90:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
     d92:	7a03      	ldrb	r3, [r0, #8]
     d94:	f043 0303 	orr.w	r3, r3, #3
     d98:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
     d9a:	2306      	movs	r3, #6
     d9c:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
     d9e:	230c      	movs	r3, #12
     da0:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
     da2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
     da6:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
     da8:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
     dac:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
     db0:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
     db4:	f8a0 300f 	strh.w	r3, [r0, #15]
     db8:	e77f      	b.n	cba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ba>
     dba:	bf00      	nop
     dbc:	f3af 8000 	nop.w
     dc0:	00017bd5 	.word	0x00017bd5
     dc4:	00000491 	.word	0x00000491
     dc8:	1afd498d 	.word	0x1afd498d
     dcc:	20000ebc 	.word	0x20000ebc
     dd0:	1afd498d 	.word	0x1afd498d
     dd4:	00000007 	.word	0x00000007

00000dd8 <isr>:
{
     dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ddc:	b091      	sub	sp, #68	; 0x44
	trx_done = radio_is_done();
     dde:	f019 fb49 	bl	1a474 <radio_is_done>
     de2:	b2c6      	uxtb	r6, r0
	if (trx_done) {
     de4:	b33e      	cbz	r6, e36 <isr+0x5e>
		crc_ok = radio_crc_is_valid();
     de6:	f019 fb65 	bl	1a4b4 <radio_crc_is_valid>
     dea:	b2c3      	uxtb	r3, r0
     dec:	930a      	str	r3, [sp, #40]	; 0x28
		devmatch_ok = radio_filter_has_match();
     dee:	f019 fbe7 	bl	1a5c0 <radio_filter_has_match>
     df2:	b2c5      	uxtb	r5, r0
		devmatch_id = radio_filter_match_get();
     df4:	f019 fbee 	bl	1a5d4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
     df8:	f019 fd72 	bl	1a8e0 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
     dfc:	f019 fd5e 	bl	1a8bc <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
     e00:	f019 fba6 	bl	1a550 <radio_rssi_is_ready>
     e04:	fa5f f880 	uxtb.w	r8, r0
	switch (_radio.state) {
     e08:	4c75      	ldr	r4, [pc, #468]	; (fe0 <isr+0x208>)
	radio_status_reset();
     e0a:	f019 fb1d 	bl	1a448 <radio_status_reset>
	radio_tmr_status_reset();
     e0e:	f019 fbe7 	bl	1a5e0 <radio_tmr_status_reset>
	radio_filter_status_reset();
     e12:	f019 fbcd 	bl	1a5b0 <radio_filter_status_reset>
	radio_ar_status_reset();
     e16:	f019 fd57 	bl	1a8c8 <radio_ar_status_reset>
	radio_rssi_status_reset();
     e1a:	f019 fb91 	bl	1a540 <radio_rssi_status_reset>
	switch (_radio.state) {
     e1e:	7d67      	ldrb	r7, [r4, #21]
     e20:	2f05      	cmp	r7, #5
     e22:	f201 8400 	bhi.w	2626 <CONFIG_BT_RX_STACK_SIZE+0x1626>
     e26:	e8df f017 	tbh	[pc, r7, lsl #1]
     e2a:	0066      	.short	0x0066
     e2c:	000a008e 	.word	0x000a008e
     e30:	0a300a30 	.word	0x0a300a30
     e34:	0a30      	.short	0x0a30
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
     e36:	46b0      	mov	r8, r6
     e38:	4635      	mov	r5, r6
     e3a:	960a      	str	r6, [sp, #40]	; 0x28
     e3c:	e7e4      	b.n	e08 <isr+0x30>
	_radio.state = STATE_RX;
     e3e:	2301      	movs	r3, #1
     e40:	7563      	strb	r3, [r4, #21]
	hcto = radio_tmr_tifs_base_get() + RADIO_TIFS + 4 +
     e42:	f019 fcb3 	bl	1a7ac <radio_tmr_tifs_base_get>
     e46:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
     e48:	2096      	movs	r0, #150	; 0x96
     e4a:	f019 fbd9 	bl	1a600 <radio_tmr_tifs_set>
	switch (_radio.role) {
     e4e:	7d23      	ldrb	r3, [r4, #20]
     e50:	3b01      	subs	r3, #1
     e52:	35cb      	adds	r5, #203	; 0xcb
     e54:	2b03      	cmp	r3, #3
     e56:	f201 83e6 	bhi.w	2626 <CONFIG_BT_RX_STACK_SIZE+0x1626>
     e5a:	e8df f003 	tbb	[pc, r3]
     e5e:	2b02      	.short	0x2b02
     e60:	4f4f      	.short	0x4f4f
		radio_switch_complete_and_tx(0, 0, 0, 0);
     e62:	2300      	movs	r3, #0
     e64:	461a      	mov	r2, r3
     e66:	4619      	mov	r1, r3
     e68:	4618      	mov	r0, r3
     e6a:	f019 fb41 	bl	1a4f0 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
     e6e:	f019 fb2f 	bl	1a4d0 <radio_pkt_scratch_get>
     e72:	f019 fabf 	bl	1a3f4 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
     e76:	f019 faf3 	bl	1a460 <radio_is_ready>
     e7a:	4604      	mov	r4, r0
     e7c:	b160      	cbz	r0, e98 <isr+0xc0>
	LL_ASSERT(!radio_is_ready());
     e7e:	2301      	movs	r3, #1
     e80:	f04f 0100 	mov.w	r1, #0
     e84:	f363 0107 	bfi	r1, r3, #0, #8
     e88:	4a56      	ldr	r2, [pc, #344]	; (fe4 <isr+0x20c>)
     e8a:	4b57      	ldr	r3, [pc, #348]	; (fe8 <isr+0x210>)
     e8c:	4857      	ldr	r0, [pc, #348]	; (fec <isr+0x214>)
     e8e:	1a9b      	subs	r3, r3, r2
     e90:	08db      	lsrs	r3, r3, #3
     e92:	f363 118f 	bfi	r1, r3, #6, #10
     e96:	e23d      	b.n	1314 <CONFIG_BT_RX_STACK_SIZE+0x314>
		hcto += radio_rx_chain_delay_get(0, 0);
     e98:	4601      	mov	r1, r0
     e9a:	f021 fad7 	bl	2244c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
     e9e:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
     ea0:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
     ea2:	4620      	mov	r0, r4
     ea4:	f021 face 	bl	22444 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
     ea8:	1a28      	subs	r0, r5, r0
     eaa:	f019 fc39 	bl	1a720 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
     eae:	f019 fc6f 	bl	1a790 <radio_tmr_end_capture>
	if (dont_close) {
     eb2:	e020      	b.n	ef6 <isr+0x11e>
		radio_switch_complete_and_tx(0, 0, 0, 0);
     eb4:	2300      	movs	r3, #0
     eb6:	4619      	mov	r1, r3
     eb8:	461a      	mov	r2, r3
     eba:	4618      	mov	r0, r3
     ebc:	f019 fb18 	bl	1a4f0 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
     ec0:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
     ec4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
     ec8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
		radio_pkt_rx_set(_radio.packet_rx
     ecc:	3008      	adds	r0, #8
     ece:	f019 fa91 	bl	1a3f4 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
     ed2:	f019 fac5 	bl	1a460 <radio_is_ready>
     ed6:	4604      	mov	r4, r0
     ed8:	2800      	cmp	r0, #0
     eda:	d1d0      	bne.n	e7e <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
     edc:	4601      	mov	r1, r0
     ede:	f021 fab5 	bl	2244c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
     ee2:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
     ee4:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
     ee6:	4620      	mov	r0, r4
     ee8:	f021 faac 	bl	22444 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
     eec:	1a28      	subs	r0, r5, r0
     eee:	f019 fc17 	bl	1a720 <radio_tmr_hcto_configure>
		radio_rssi_measure();
     ef2:	f019 fb15 	bl	1a520 <radio_rssi_measure>
}
     ef6:	b011      	add	sp, #68	; 0x44
     ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
     efc:	2300      	movs	r3, #0
     efe:	461a      	mov	r2, r3
     f00:	4619      	mov	r1, r3
     f02:	4618      	mov	r0, r3
     f04:	f019 faf4 	bl	1a4f0 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
     f08:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
     f0c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
		rx_packet_set(_radio.conn_curr,	(void *)
     f10:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
     f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
     f18:	3108      	adds	r1, #8
     f1a:	f020 ffe8 	bl	21eee <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
     f1e:	f019 fa9f 	bl	1a460 <radio_is_ready>
     f22:	4604      	mov	r4, r0
     f24:	2800      	cmp	r0, #0
     f26:	d1aa      	bne.n	e7e <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
     f28:	4601      	mov	r1, r0
     f2a:	f021 fa8f 	bl	2244c <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
     f2e:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
     f30:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
     f32:	4620      	mov	r0, r4
     f34:	f021 fa86 	bl	22444 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
     f38:	1a28      	subs	r0, r5, r0
     f3a:	f019 fbf1 	bl	1a720 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
     f3e:	2001      	movs	r0, #1
     f40:	f017 f9da 	bl	182f8 <packet_tx_enqueue>
		break;
     f44:	e7d7      	b.n	ef6 <isr+0x11e>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
     f46:	b926      	cbnz	r6, f52 <isr+0x17a>
		_radio.state = STATE_CLOSE;
     f48:	2303      	movs	r3, #3
     f4a:	7563      	strb	r3, [r4, #21]
		radio_disable();
     f4c:	f019 fa6a 	bl	1a424 <radio_disable>
		return;
     f50:	e7d1      	b.n	ef6 <isr+0x11e>
	switch (_radio.role) {
     f52:	7d23      	ldrb	r3, [r4, #20]
     f54:	b2db      	uxtb	r3, r3
     f56:	2b02      	cmp	r3, #2
     f58:	f000 81f6 	beq.w	1348 <CONFIG_BT_RX_STACK_SIZE+0x348>
     f5c:	2b03      	cmp	r3, #3
     f5e:	f000 82c7 	beq.w	14f0 <CONFIG_BT_RX_STACK_SIZE+0x4f0>
     f62:	2b01      	cmp	r3, #1
     f64:	f041 835f 	bne.w	2626 <CONFIG_BT_RX_STACK_SIZE+0x1626>
		if (crc_ok) {
     f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     f6a:	2b00      	cmp	r3, #0
     f6c:	d0ec      	beq.n	f48 <isr+0x170>
	pdu_adv = (void *)radio_pkt_scratch_get();
     f6e:	f019 faaf 	bl	1a4d0 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
     f72:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
     f76:	232a      	movs	r3, #42	; 0x2a
     f78:	f04f 0a27 	mov.w	sl, #39	; 0x27
     f7c:	fb1a 3a02 	smlabb	sl, sl, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
     f80:	7802      	ldrb	r2, [r0, #0]
     f82:	f002 030f 	and.w	r3, r2, #15
     f86:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
     f88:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
     f8a:	eb04 070a 	add.w	r7, r4, sl
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
     f8e:	d12f      	bne.n	ff0 <isr+0x218>
     f90:	7843      	ldrb	r3, [r0, #1]
     f92:	2b0c      	cmp	r3, #12
     f94:	d1d8      	bne.n	f48 <isr+0x170>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
     f96:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		(devmatch_ok)) &&
     f9a:	0719      	lsls	r1, r3, #28
     f9c:	d501      	bpl.n	fa2 <isr+0x1ca>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
     f9e:	2d00      	cmp	r5, #0
     fa0:	d0d2      	beq.n	f48 <isr+0x170>
	return (adv->tx_addr == sr->rx_addr) &&
     fa2:	f814 300a 	ldrb.w	r3, [r4, sl]
     fa6:	f3c3 1380 	ubfx	r3, r3, #6, #1
     faa:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
     fae:	d1cb      	bne.n	f48 <isr+0x170>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
     fb0:	2206      	movs	r2, #6
     fb2:	f106 0108 	add.w	r1, r6, #8
     fb6:	1cb8      	adds	r0, r7, #2
     fb8:	f01e faff 	bl	1f5ba <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
     fbc:	b9c0      	cbnz	r0, ff0 <isr+0x218>
		_radio.state = STATE_CLOSE;
     fbe:	2303      	movs	r3, #3
     fc0:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
     fc2:	f019 fa9f 	bl	1a504 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
     fc6:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
     fca:	2327      	movs	r3, #39	; 0x27
     fcc:	fb03 4000 	mla	r0, r3, r0, r4
     fd0:	307a      	adds	r0, #122	; 0x7a
     fd2:	f019 fa15 	bl	1a400 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
     fd6:	f019 fa43 	bl	1a460 <radio_is_ready>
     fda:	2800      	cmp	r0, #0
     fdc:	d08b      	beq.n	ef6 <isr+0x11e>
     fde:	e74e      	b.n	e7e <isr+0xa6>
     fe0:	20000d68 	.word	0x20000d68
     fe4:	000233ec 	.word	0x000233ec
     fe8:	0002341c 	.word	0x0002341c
     fec:	00028489 	.word	0x00028489
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
     ff0:	7833      	ldrb	r3, [r6, #0]
     ff2:	f003 030f 	and.w	r3, r3, #15
     ff6:	2b05      	cmp	r3, #5
     ff8:	d1a6      	bne.n	f48 <isr+0x170>
     ffa:	7873      	ldrb	r3, [r6, #1]
     ffc:	2b22      	cmp	r3, #34	; 0x22
     ffe:	d1a3      	bne.n	f48 <isr+0x170>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    1000:	f814 300a 	ldrb.w	r3, [r4, sl]
    1004:	f003 030f 	and.w	r3, r3, #15
    1008:	2b01      	cmp	r3, #1
    100a:	f040 818d 	bne.w	1328 <CONFIG_BT_RX_STACK_SIZE+0x328>
		       isr_adv_ci_adva_check(adv, ci) &&
    100e:	4631      	mov	r1, r6
    1010:	4638      	mov	r0, r7
    1012:	f020 ff40 	bl	21e96 <isr_adv_ci_adva_check>
    1016:	b188      	cbz	r0, 103c <CONFIG_BT_RX_STACK_SIZE+0x3c>
	return (adv->rx_addr == ci->tx_addr) &&
    1018:	7833      	ldrb	r3, [r6, #0]
    101a:	f814 200a 	ldrb.w	r2, [r4, sl]
    101e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    1022:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    1026:	f040 817d 	bne.w	1324 <CONFIG_BT_RX_STACK_SIZE+0x324>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    102a:	2206      	movs	r2, #6
    102c:	1cb1      	adds	r1, r6, #2
    102e:	f107 0008 	add.w	r0, r7, #8
    1032:	f01e fac2 	bl	1f5ba <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    1036:	fab0 f080 	clz	r0, r0
    103a:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    103c:	2800      	cmp	r0, #0
    103e:	d083      	beq.n	f48 <isr+0x170>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    1040:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    1044:	b133      	cbz	r3, 1054 <CONFIG_BT_RX_STACK_SIZE+0x54>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    1046:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    104a:	f894 2179 	ldrb.w	r2, [r4, #377]	; 0x179
    104e:	429a      	cmp	r2, r3
    1050:	f47f af7a 	bne.w	f48 <isr+0x170>
    1054:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    1058:	2b00      	cmp	r3, #0
    105a:	f43f af75 	beq.w	f48 <isr+0x170>
			node_rx = packet_rx_reserve_get(3);
    105e:	2003      	movs	r0, #3
    1060:	f016 fc72 	bl	17948 <packet_rx_reserve_get>
		if (!node_rx) {
    1064:	4681      	mov	r9, r0
    1066:	2800      	cmp	r0, #0
    1068:	f43f af6e 	beq.w	f48 <isr+0x170>
		_radio.state = STATE_STOP;
    106c:	f04f 0b04 	mov.w	fp, #4
    1070:	f884 b015 	strb.w	fp, [r4, #21]
		radio_disable();
    1074:	f019 f9d6 	bl	1a424 <radio_disable>
		conn = _radio.advertiser.conn;
    1078:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    107c:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    1080:	2700      	movs	r7, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    1082:	f44f 7296 	mov.w	r2, #300	; 0x12c
    1086:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    1088:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    108c:	f020 fd7c 	bl	21b88 <mem_index_get>
		memcpy(&conn->crc_init[0],
    1090:	f106 0112 	add.w	r1, r6, #18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    1094:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    1096:	2203      	movs	r2, #3
    1098:	f105 0014 	add.w	r0, r5, #20
    109c:	f01e fab4 	bl	1f608 <memcpy>
		memcpy(&conn->access_addr[0],
    10a0:	f105 0310 	add.w	r3, r5, #16
    10a4:	4618      	mov	r0, r3
    10a6:	465a      	mov	r2, fp
    10a8:	f106 010e 	add.w	r1, r6, #14
		memcpy(&conn->data_chan_map[0],
    10ac:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    10b0:	930a      	str	r3, [sp, #40]	; 0x28
    10b2:	f01e faa9 	bl	1f608 <memcpy>
		memcpy(&conn->data_chan_map[0],
    10b6:	2205      	movs	r2, #5
    10b8:	f106 011e 	add.w	r1, r6, #30
    10bc:	4640      	mov	r0, r8
    10be:	f01e faa3 	bl	1f608 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    10c2:	2105      	movs	r1, #5
    10c4:	4640      	mov	r0, r8
    10c6:	f020 fd94 	bl	21bf2 <util_ones_count_get>
		conn->data_chan_count =
    10ca:	7f6a      	ldrb	r2, [r5, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    10cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    10ce:	f360 0205 	bfi	r2, r0, #0, #6
    10d2:	776a      	strb	r2, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    10d4:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    10d8:	f3c2 0204 	ubfx	r2, r2, #0, #5
    10dc:	77aa      	strb	r2, [r5, #30]
			pdu_adv->connect_ind.interval;
    10de:	f8b6 8018 	ldrh.w	r8, [r6, #24]
		conn->conn_interval =
    10e2:	f8a5 8024 	strh.w	r8, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    10e6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    10ea:	fb02 f808 	mul.w	r8, r2, r8
		conn->latency = pdu_adv->connect_ind.latency;
    10ee:	7ef1      	ldrb	r1, [r6, #27]
    10f0:	7eb2      	ldrb	r2, [r6, #26]
    10f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    10f6:	84ea      	strh	r2, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    10f8:	4619      	mov	r1, r3
    10fa:	465a      	mov	r2, fp
    10fc:	f105 0054 	add.w	r0, r5, #84	; 0x54
    1100:	f01e fa82 	bl	1f608 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    1104:	8bb3      	ldrh	r3, [r6, #28]
    1106:	f242 7210 	movw	r2, #10000	; 0x2710
    110a:	fb02 8303 	mla	r3, r2, r3, r8
    110e:	3b01      	subs	r3, #1
    1110:	fbb3 f3f8 	udiv	r3, r3, r8
    1114:	85eb      	strh	r3, [r5, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    1116:	4bc4      	ldr	r3, [pc, #784]	; (1428 <CONFIG_BT_RX_STACK_SIZE+0x428>)
    1118:	4443      	add	r3, r8
    111a:	fbb3 f3f8 	udiv	r3, r3, r8
    111e:	866b      	strh	r3, [r5, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    1120:	8c2b      	ldrh	r3, [r5, #32]
    1122:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    1126:	2308      	movs	r3, #8
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    1128:	4631      	mov	r1, r6
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    112a:	f889 3004 	strb.w	r3, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
    112e:	f44f 7380 	mov.w	r3, #256	; 0x100
    1132:	f8a9 3008 	strh.w	r3, [r9, #8]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    1136:	f811 3b02 	ldrb.w	r3, [r1], #2
    113a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    113e:	f889 300a 	strb.w	r3, [r9, #10]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    1142:	2206      	movs	r2, #6
    1144:	f109 000b 	add.w	r0, r9, #11
    1148:	f01e fa5e 	bl	1f608 <memcpy>
			pdu_adv->connect_ind.interval;
    114c:	7e72      	ldrb	r2, [r6, #25]
    114e:	7e33      	ldrb	r3, [r6, #24]
    1150:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->interval =
    1154:	f8a9 3012 	strh.w	r3, [r9, #18]
			pdu_adv->connect_ind.latency;
    1158:	7ef2      	ldrb	r2, [r6, #27]
    115a:	7eb3      	ldrb	r3, [r6, #26]
    115c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->latency =
    1160:	f8a9 3014 	strh.w	r3, [r9, #20]
			pdu_adv->connect_ind.timeout;
    1164:	7f72      	ldrb	r2, [r6, #29]
    1166:	7f33      	ldrb	r3, [r6, #28]
    1168:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->timeout =
    116c:	f8a9 3016 	strh.w	r3, [r9, #22]
			pdu_adv->connect_ind.sca;
    1170:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    1174:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    1178:	f889 3018 	strb.w	r3, [r9, #24]
		rx_fc_lock(conn->handle);
    117c:	8c28      	ldrh	r0, [r5, #32]
    117e:	f016 fcf3 	bl	17b68 <rx_fc_lock>
		packet_rx_enqueue();
    1182:	f016 fc9f 	bl	17ac4 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    1186:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    118a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    118e:	49a7      	ldr	r1, [pc, #668]	; (142c <CONFIG_BT_RX_STACK_SIZE+0x42c>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    1190:	0952      	lsrs	r2, r2, #5
    1192:	f362 0384 	bfi	r3, r2, #2, #3
    1196:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    119a:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    119e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    11a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    11a6:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    11a8:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    11ac:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    11b0:	4a9f      	ldr	r2, [pc, #636]	; (1430 <CONFIG_BT_RX_STACK_SIZE+0x430>)
    11b2:	f203 233f 	addw	r3, r3, #575	; 0x23f
    11b6:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    11ba:	63eb      	str	r3, [r5, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    11bc:	ea4f 0358 	mov.w	r3, r8, lsr #1
    11c0:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    11c2:	642b      	str	r3, [r5, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    11c4:	7d73      	ldrb	r3, [r6, #21]
    11c6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    11ca:	4353      	muls	r3, r2
		conn->slave.window_size_prepare_us = 0;
    11cc:	e9c5 7313 	strd	r7, r3, [r5, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    11d0:	4639      	mov	r1, r7
    11d2:	4638      	mov	r0, r7
    11d4:	f021 f938 	bl	22448 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    11d8:	4996      	ldr	r1, [pc, #600]	; (1434 <CONFIG_BT_RX_STACK_SIZE+0x434>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    11da:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    11dc:	f200 4052 	addw	r0, r0, #1106	; 0x452
    11e0:	a38f      	add	r3, pc, #572	; (adr r3, 1420 <CONFIG_BT_RX_STACK_SIZE+0x420>)
    11e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    11e6:	fba0 0101 	umull	r0, r1, r0, r1
    11ea:	f7fe ffc9 	bl	180 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    11ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    11f2:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    11f4:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    11f6:	4293      	cmp	r3, r2
    11f8:	bf38      	it	cc
    11fa:	4613      	movcc	r3, r2
    11fc:	4699      	mov	r9, r3
		conn_interval_us -=
    11fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		conn->hdr.ticks_xtal_to_start =
    1200:	602a      	str	r2, [r5, #0]
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    1202:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn_interval_us -=
    1206:	eba8 0303 	sub.w	r3, r8, r3
		conn->hdr.ticks_slot =
    120a:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    120c:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    120e:	930a      	str	r3, [sp, #40]	; 0x28
		conn_offset_us = radio_tmr_end_get();
    1210:	f019 fac6 	bl	1a7a0 <radio_tmr_end_get>
			((u64_t)pdu_adv->connect_ind.win_offset +
    1214:	8af6      	ldrh	r6, [r6, #22]
		conn_offset_us +=
    1216:	f240 42e2 	movw	r2, #1250	; 0x4e2
		conn_offset_us = radio_tmr_end_get();
    121a:	4680      	mov	r8, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    121c:	4639      	mov	r1, r7
    121e:	4638      	mov	r0, r7
		conn_offset_us +=
    1220:	fb02 2606 	mla	r6, r2, r6, r2
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    1224:	f021 f90e 	bl	22444 <radio_tx_chain_delay_get>
    1228:	3e30      	subs	r6, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    122a:	f240 43ad 	movw	r3, #1197	; 0x4ad
    122e:	44b0      	add	r8, r6
    1230:	eba8 0800 	sub.w	r8, r8, r0
    1234:	9300      	str	r3, [sp, #0]
    1236:	2205      	movs	r2, #5
    1238:	4b7f      	ldr	r3, [pc, #508]	; (1438 <CONFIG_BT_RX_STACK_SIZE+0x438>)
    123a:	4639      	mov	r1, r7
    123c:	4638      	mov	r0, r7
    123e:	f015 fa7f 	bl	16740 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    1242:	f240 41ae 	movw	r1, #1198	; 0x4ae
    1246:	f016 fcf5 	bl	17c34 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    124a:	f814 300a 	ldrb.w	r3, [r4, sl]
    124e:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 1434 <CONFIG_BT_RX_STACK_SIZE+0x434>
    1252:	f003 030f 	and.w	r3, r3, #15
    1256:	2b01      	cmp	r3, #1
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    1258:	eba8 080b 	sub.w	r8, r8, fp
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    125c:	d106      	bne.n	126c <CONFIG_BT_RX_STACK_SIZE+0x26c>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    125e:	9700      	str	r7, [sp, #0]
    1260:	463b      	mov	r3, r7
    1262:	2203      	movs	r2, #3
    1264:	4639      	mov	r1, r7
    1266:	4638      	mov	r0, r7
    1268:	f015 fa6a 	bl	16740 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    126c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    126e:	fba3 670a 	umull	r6, r7, r3, sl
    1272:	4630      	mov	r0, r6
    1274:	a36a      	add	r3, pc, #424	; (adr r3, 1420 <CONFIG_BT_RX_STACK_SIZE+0x420>)
    1276:	e9d3 2300 	ldrd	r2, r3, [r3]
    127a:	4639      	mov	r1, r7
    127c:	f7fe ff80 	bl	180 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1280:	68a3      	ldr	r3, [r4, #8]
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
    1282:	f895 4020 	ldrb.w	r4, [r5, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1286:	eba3 0309 	sub.w	r3, r3, r9
    128a:	930a      	str	r3, [sp, #40]	; 0x28
    128c:	f240 43c5 	movw	r3, #1221	; 0x4c5
    1290:	9308      	str	r3, [sp, #32]
    1292:	4b6a      	ldr	r3, [pc, #424]	; (143c <CONFIG_BT_RX_STACK_SIZE+0x43c>)
    1294:	e9cd 5306 	strd	r5, r3, [sp, #24]
    1298:	4b69      	ldr	r3, [pc, #420]	; (1440 <CONFIG_BT_RX_STACK_SIZE+0x440>)
    129a:	9305      	str	r3, [sp, #20]
    129c:	68eb      	ldr	r3, [r5, #12]
    129e:	444b      	add	r3, r9
    12a0:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    12a2:	4b68      	ldr	r3, [pc, #416]	; (1444 <CONFIG_BT_RX_STACK_SIZE+0x444>)
    12a4:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    12a8:	fba5 bc03 	umull	fp, ip, r5, r3
    12ac:	2307      	movs	r3, #7
    12ae:	fb03 cc05 	mla	ip, r3, r5, ip
    12b2:	ebb6 000b 	subs.w	r0, r6, fp
    12b6:	eb67 010c 	sbc.w	r1, r7, ip
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    12ba:	f04f 0900 	mov.w	r9, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    12be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    12c2:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    12c4:	f8cd 900c 	str.w	r9, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    12c8:	f7fe ff5a 	bl	180 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    12cc:	a354      	add	r3, pc, #336	; (adr r3, 1420 <CONFIG_BT_RX_STACK_SIZE+0x420>)
    12ce:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    12d2:	e9cd 5001 	strd	r5, r0, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    12d6:	fba8 010a 	umull	r0, r1, r8, sl
    12da:	f7fe ff51 	bl	180 <__aeabi_uldivmod>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
    12de:	3407      	adds	r4, #7
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    12e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    12e4:	b2e4      	uxtb	r4, r4
    12e6:	9000      	str	r0, [sp, #0]
    12e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12ea:	4622      	mov	r2, r4
    12ec:	4649      	mov	r1, r9
    12ee:	4648      	mov	r0, r9
    12f0:	f015 f994 	bl	1661c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    12f4:	f030 0302 	bics.w	r3, r0, #2
    12f8:	f43f adfd 	beq.w	ef6 <isr+0x11e>
    12fc:	2301      	movs	r3, #1
    12fe:	f04f 0100 	mov.w	r1, #0
    1302:	f363 0107 	bfi	r1, r3, #0, #8
    1306:	4a50      	ldr	r2, [pc, #320]	; (1448 <CONFIG_BT_RX_STACK_SIZE+0x448>)
    1308:	4b50      	ldr	r3, [pc, #320]	; (144c <CONFIG_BT_RX_STACK_SIZE+0x44c>)
    130a:	4851      	ldr	r0, [pc, #324]	; (1450 <CONFIG_BT_RX_STACK_SIZE+0x450>)
    130c:	1a9b      	subs	r3, r3, r2
    130e:	08db      	lsrs	r3, r3, #3
    1310:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(0);
    1314:	f01d f895 	bl	1e442 <log_0>
    1318:	4040      	eors	r0, r0
    131a:	f380 8811 	msr	BASEPRI, r0
    131e:	f04f 0004 	mov.w	r0, #4
    1322:	df02      	svc	2
	return (adv->rx_addr == ci->tx_addr) &&
    1324:	2000      	movs	r0, #0
    1326:	e689      	b.n	103c <CONFIG_BT_RX_STACK_SIZE+0x3c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    1328:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    132c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
		(devmatch_ok)) &&
    1330:	079a      	lsls	r2, r3, #30
    1332:	d500      	bpl.n	1336 <CONFIG_BT_RX_STACK_SIZE+0x336>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    1334:	b135      	cbz	r5, 1344 <CONFIG_BT_RX_STACK_SIZE+0x344>
	       isr_adv_ci_adva_check(adv, ci);
    1336:	4631      	mov	r1, r6
    1338:	4638      	mov	r0, r7
    133a:	f020 fdac 	bl	21e96 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    133e:	f000 0001 	and.w	r0, r0, #1
    1342:	e67b      	b.n	103c <CONFIG_BT_RX_STACK_SIZE+0x3c>
    1344:	4628      	mov	r0, r5
    1346:	e7fa      	b.n	133e <CONFIG_BT_RX_STACK_SIZE+0x33e>
		if (crc_ok &&
    1348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    134a:	2b00      	cmp	r3, #0
    134c:	f000 80a4 	beq.w	1498 <CONFIG_BT_RX_STACK_SIZE+0x498>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    1350:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    1354:	079b      	lsls	r3, r3, #30
    1356:	d502      	bpl.n	135e <CONFIG_BT_RX_STACK_SIZE+0x35e>
		if (crc_ok &&
    1358:	2d00      	cmp	r5, #0
    135a:	f000 809d 	beq.w	1498 <CONFIG_BT_RX_STACK_SIZE+0x498>
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    135e:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    1362:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    1366:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    136a:	7a2a      	ldrb	r2, [r5, #8]
    136c:	f012 030f 	ands.w	r3, r2, #15
    1370:	d001      	beq.n	1376 <CONFIG_BT_RX_STACK_SIZE+0x376>
    1372:	2b06      	cmp	r3, #6
    1374:	d170      	bne.n	1458 <CONFIG_BT_RX_STACK_SIZE+0x458>
		 (_radio.scanner.type != 0) &&
    1376:	f894 10e1 	ldrb.w	r1, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    137a:	07cf      	lsls	r7, r1, #31
    137c:	d541      	bpl.n	1402 <CONFIG_BT_RX_STACK_SIZE+0x402>
		 (_radio.scanner.type != 0) &&
    137e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    1382:	2900      	cmp	r1, #0
    1384:	d13d      	bne.n	1402 <CONFIG_BT_RX_STACK_SIZE+0x402>
		err = isr_rx_scan_report(rssi_ready,
    1386:	4640      	mov	r0, r8
    1388:	f020 fdf1 	bl	21f6e <isr_rx_scan_report.isra.35>
		if (err) {
    138c:	4607      	mov	r7, r0
    138e:	2800      	cmp	r0, #0
    1390:	f040 8082 	bne.w	1498 <CONFIG_BT_RX_STACK_SIZE+0x498>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    1394:	f019 f89c 	bl	1a4d0 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    1398:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    139a:	492e      	ldr	r1, [pc, #184]	; (1454 <CONFIG_BT_RX_STACK_SIZE+0x454>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    139c:	2203      	movs	r2, #3
    139e:	f362 0303 	bfi	r3, r2, #0, #4
    13a2:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    13a4:	7a2a      	ldrb	r2, [r5, #8]
    13a6:	b2db      	uxtb	r3, r3
    13a8:	f3c2 1280 	ubfx	r2, r2, #6, #1
    13ac:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    13b0:	220c      	movs	r2, #12
    13b2:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    13b4:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    13b8:	f3c2 1200 	ubfx	r2, r2, #4, #1
    13bc:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    13c0:	4606      	mov	r6, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    13c2:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    13c4:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    13c8:	f01e f91e 	bl	1f608 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    13cc:	2206      	movs	r2, #6
    13ce:	f105 010a 	add.w	r1, r5, #10
    13d2:	f106 0008 	add.w	r0, r6, #8
    13d6:	f01e f917 	bl	1f608 <memcpy>
		_radio.scanner.state = 1;
    13da:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    13de:	f043 0302 	orr.w	r3, r3, #2
    13e2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    13e6:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    13e8:	2302      	movs	r3, #2
    13ea:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    13ec:	f019 f908 	bl	1a600 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    13f0:	4638      	mov	r0, r7
    13f2:	f019 f871 	bl	1a4d8 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    13f6:	4630      	mov	r0, r6
    13f8:	f019 f802 	bl	1a400 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    13fc:	f019 f9c8 	bl	1a790 <radio_tmr_end_capture>
    1400:	e5e9      	b.n	fd6 <isr+0x1fe>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    1402:	bb4b      	cbnz	r3, 1458 <CONFIG_BT_RX_STACK_SIZE+0x458>
	bool dir_report = false;
    1404:	2100      	movs	r1, #0
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    1406:	7a6b      	ldrb	r3, [r5, #9]
    1408:	2b00      	cmp	r3, #0
    140a:	d045      	beq.n	1498 <CONFIG_BT_RX_STACK_SIZE+0x498>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    140c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    1410:	2b00      	cmp	r3, #0
    1412:	d141      	bne.n	1498 <CONFIG_BT_RX_STACK_SIZE+0x498>
		err = isr_rx_scan_report(rssi_ready,
    1414:	4640      	mov	r0, r8
    1416:	f020 fdaa 	bl	21f6e <isr_rx_scan_report.isra.35>
		if (err) {
    141a:	e03d      	b.n	1498 <CONFIG_BT_RX_STACK_SIZE+0x498>
    141c:	f3af 8000 	nop.w
    1420:	1afd498d 	.word	0x1afd498d
    1424:	00000007 	.word	0x00000007
    1428:	026259ff 	.word	0x026259ff
    142c:	00023fd8 	.word	0x00023fd8
    1430:	000f4240 	.word	0x000f4240
    1434:	3b9aca00 	.word	0x3b9aca00
    1438:	00017c35 	.word	0x00017c35
    143c:	00021edf 	.word	0x00021edf
    1440:	00000491 	.word	0x00000491
    1444:	1afd498d 	.word	0x1afd498d
    1448:	000233ec 	.word	0x000233ec
    144c:	0002341c 	.word	0x0002341c
    1450:	00028388 	.word	0x00028388
    1454:	20000e4a 	.word	0x20000e4a
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    1458:	2b01      	cmp	r3, #1
    145a:	d028      	beq.n	14ae <CONFIG_BT_RX_STACK_SIZE+0x4ae>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    145c:	7a2b      	ldrb	r3, [r5, #8]
					&dir_report))) ||
    145e:	f003 020b 	and.w	r2, r3, #11
    1462:	2a02      	cmp	r2, #2
    1464:	d0ce      	beq.n	1404 <CONFIG_BT_RX_STACK_SIZE+0x404>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    1466:	f003 030f 	and.w	r3, r3, #15
    146a:	2b04      	cmp	r3, #4
    146c:	d114      	bne.n	1498 <CONFIG_BT_RX_STACK_SIZE+0x498>
		   (_radio.scanner.state != 0) &&
    146e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    1472:	0798      	lsls	r0, r3, #30
    1474:	d510      	bpl.n	1498 <CONFIG_BT_RX_STACK_SIZE+0x498>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    1476:	f019 f82b 	bl	1a4d0 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    147a:	7a2b      	ldrb	r3, [r5, #8]
    147c:	7802      	ldrb	r2, [r0, #0]
    147e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    1482:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    1486:	d107      	bne.n	1498 <CONFIG_BT_RX_STACK_SIZE+0x498>
		(memcmp(&sreq->scan_req.adv_addr[0],
    1488:	2206      	movs	r2, #6
    148a:	f105 010a 	add.w	r1, r5, #10
    148e:	3008      	adds	r0, #8
    1490:	f01e f893 	bl	1f5ba <memcmp>
		   (_radio.scanner.state != 0) &&
    1494:	2800      	cmp	r0, #0
    1496:	d0b5      	beq.n	1404 <CONFIG_BT_RX_STACK_SIZE+0x404>
			_radio.state = STATE_CLOSE;
    1498:	2303      	movs	r3, #3
    149a:	7563      	strb	r3, [r4, #21]
			radio_disable();
    149c:	f018 ffc2 	bl	1a424 <radio_disable>
			_radio.scanner.state = 0U;
    14a0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    14a4:	f36f 0341 	bfc	r3, #1, #1
    14a8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    14ac:	e523      	b.n	ef6 <isr+0x11e>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    14ae:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    14b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
    14b6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    14ba:	d010      	beq.n	14de <CONFIG_BT_RX_STACK_SIZE+0x4de>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    14bc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    14c0:	f3c3 0341 	ubfx	r3, r3, #1, #2
    14c4:	079e      	lsls	r6, r3, #30
    14c6:	d5c9      	bpl.n	145c <CONFIG_BT_RX_STACK_SIZE+0x45c>
    14c8:	f995 3008 	ldrsb.w	r3, [r5, #8]
    14cc:	2b00      	cmp	r3, #0
    14ce:	dac5      	bge.n	145c <CONFIG_BT_RX_STACK_SIZE+0x45c>
	    (pdu->rx_addr != 0) &&
    14d0:	7d6b      	ldrb	r3, [r5, #21]
    14d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    14d6:	2b40      	cmp	r3, #64	; 0x40
    14d8:	d1c0      	bne.n	145c <CONFIG_BT_RX_STACK_SIZE+0x45c>
		return true;
    14da:	2101      	movs	r1, #1
    14dc:	e793      	b.n	1406 <CONFIG_BT_RX_STACK_SIZE+0x406>
		(memcmp(&_radio.scanner.init_addr[0],
    14de:	2206      	movs	r2, #6
    14e0:	f105 0110 	add.w	r1, r5, #16
    14e4:	48bf      	ldr	r0, [pc, #764]	; (17e4 <CONFIG_BT_RX_STACK_SIZE+0x7e4>)
    14e6:	f01e f868 	bl	1f5ba <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    14ea:	2800      	cmp	r0, #0
    14ec:	d08a      	beq.n	1404 <CONFIG_BT_RX_STACK_SIZE+0x404>
    14ee:	e7e5      	b.n	14bc <CONFIG_BT_RX_STACK_SIZE+0x4bc>
	_radio.packet_counter++;
    14f0:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    14f4:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
	if (crc_ok) {
    14f8:	990a      	ldr	r1, [sp, #40]	; 0x28
	_radio.packet_counter++;
    14fa:	3301      	adds	r3, #1
    14fc:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    1500:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    1504:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1508:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    150c:	2202      	movs	r2, #2
    150e:	7132      	strb	r2, [r6, #4]
	if (crc_ok) {
    1510:	2900      	cmp	r1, #0
    1512:	f000 85d5 	beq.w	20c0 <CONFIG_BT_RX_STACK_SIZE+0x10c0>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    1516:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    151a:	7a30      	ldrb	r0, [r6, #8]
    151c:	f002 0101 	and.w	r1, r2, #1
    1520:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1524:	4288      	cmp	r0, r1
    1526:	f000 80b1 	beq.w	168c <CONFIG_BT_RX_STACK_SIZE+0x68c>
		_radio.conn_curr->sn++;
    152a:	f081 0101 	eor.w	r1, r1, #1
    152e:	f361 0200 	bfi	r2, r1, #0, #1
    1532:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		if (_radio.role == ROLE_SLAVE) {
    1536:	7d22      	ldrb	r2, [r4, #20]
    1538:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1U;
    153a:	bf02      	ittt	eq
    153c:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    1540:	f042 0201 	orreq.w	r2, r2, #1
    1544:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    1548:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    154c:	0611      	lsls	r1, r2, #24
    154e:	f100 8099 	bmi.w	1684 <CONFIG_BT_RX_STACK_SIZE+0x684>
			node_tx = _radio.conn_curr->pkt_tx_head;
    1552:	f8d3 8114 	ldr.w	r8, [r3, #276]	; 0x114
				_radio.conn_curr->packet_tx_head_offset);
    1556:	f893 0129 	ldrb.w	r0, [r3, #297]	; 0x129
			pdu_data_tx = (void *)(node_tx->pdu_data +
    155a:	f108 0c04 	add.w	ip, r8, #4
    155e:	eb0c 0900 	add.w	r9, ip, r0
			pdu_data_tx_len = pdu_data_tx->len;
    1562:	f899 5001 	ldrb.w	r5, [r9, #1]
			if (pdu_data_tx_len != 0) {
    1566:	2d00      	cmp	r5, #0
    1568:	d13c      	bne.n	15e4 <CONFIG_BT_RX_STACK_SIZE+0x5e4>
	u32_t ret = 0U;
    156a:	f04f 0900 	mov.w	r9, #0
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    156e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    1572:	f892 3129 	ldrb.w	r3, [r2, #297]	; 0x129
			if (_radio.conn_curr->packet_tx_head_offset ==
    1576:	f892 1128 	ldrb.w	r1, [r2, #296]	; 0x128
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    157a:	442b      	add	r3, r5
    157c:	b2db      	uxtb	r3, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    157e:	4299      	cmp	r1, r3
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    1580:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
			if (_radio.conn_curr->packet_tx_head_offset ==
    1584:	d059      	beq.n	163a <CONFIG_BT_RX_STACK_SIZE+0x63a>
	return NULL;
    1586:	f04f 0800 	mov.w	r8, #0
	if (ret == ERR_TERMINATE) {
    158a:	f1b9 0f00 	cmp.w	r9, #0
    158e:	d07f      	beq.n	1690 <CONFIG_BT_RX_STACK_SIZE+0x690>
		connection_release(_radio.conn_curr);
    1590:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    1594:	f016 ff00 	bl	18398 <connection_release>
		_radio.conn_curr = NULL;
    1598:	2700      	movs	r7, #0
				_radio.conn_curr = NULL;
    159a:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    159e:	f019 f8eb 	bl	1a778 <radio_tmr_aa_restore>
    15a2:	b918      	cbnz	r0, 15ac <CONFIG_BT_RX_STACK_SIZE+0x5ac>
		radio_tmr_aa_save(radio_tmr_aa_get());
    15a4:	f019 f8dc 	bl	1a760 <radio_tmr_aa_get>
    15a8:	f019 f8e0 	bl	1a76c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    15ac:	4c8e      	ldr	r4, [pc, #568]	; (17e8 <CONFIG_BT_RX_STACK_SIZE+0x7e8>)
    15ae:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    15b2:	2b00      	cmp	r3, #0
    15b4:	f43f ac9f 	beq.w	ef6 <isr+0x11e>
	if (tx_release) {
    15b8:	f1b8 0f00 	cmp.w	r8, #0
    15bc:	d003      	beq.n	15c6 <CONFIG_BT_RX_STACK_SIZE+0x5c6>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    15be:	4641      	mov	r1, r8
    15c0:	8c18      	ldrh	r0, [r3, #32]
    15c2:	f016 fe5d 	bl	18280 <pdu_node_tx_release>
	if (rx_enqueue) {
    15c6:	2f00      	cmp	r7, #0
    15c8:	f43f ac95 	beq.w	ef6 <isr+0x11e>
		rx_fc_lock(_radio.conn_curr->handle);
    15cc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    15d0:	8c18      	ldrh	r0, [r3, #32]
    15d2:	f016 fac9 	bl	17b68 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    15d6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    15da:	8c1b      	ldrh	r3, [r3, #32]
    15dc:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    15de:	f016 fa71 	bl	17ac4 <packet_rx_enqueue>
    15e2:	e488      	b.n	ef6 <isr+0x11e>
				if (_radio.conn_curr->enc_tx) {
    15e4:	0692      	lsls	r2, r2, #26
    15e6:	d50a      	bpl.n	15fe <CONFIG_BT_RX_STACK_SIZE+0x5fe>
					_radio.conn_curr->ccm_tx.counter++;
    15e8:	f8d3 2102 	ldr.w	r2, [r3, #258]	; 0x102
    15ec:	f8d3 1106 	ldr.w	r1, [r3, #262]	; 0x106
    15f0:	3201      	adds	r2, #1
    15f2:	f141 0100 	adc.w	r1, r1, #0
    15f6:	f8c3 2102 	str.w	r2, [r3, #258]	; 0x102
    15fa:	f8c3 1106 	str.w	r1, [r3, #262]	; 0x106
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    15fe:	f81c 3000 	ldrb.w	r3, [ip, r0]
    1602:	f003 0303 	and.w	r3, r3, #3
    1606:	2b03      	cmp	r3, #3
    1608:	d1af      	bne.n	156a <CONFIG_BT_RX_STACK_SIZE+0x56a>
	switch (pdu_data_tx->llctrl.opcode) {
    160a:	f899 2003 	ldrb.w	r2, [r9, #3]
    160e:	2a02      	cmp	r2, #2
    1610:	d1ab      	bne.n	156a <CONFIG_BT_RX_STACK_SIZE+0x56a>
		_radio.state = STATE_CLOSE;
    1612:	7563      	strb	r3, [r4, #21]
		radio_disable();
    1614:	f018 ff06 	bl	1a424 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    1618:	f018 ff22 	bl	1a460 <radio_is_ready>
    161c:	2800      	cmp	r0, #0
    161e:	f47f ac2e 	bne.w	e7e <isr+0xa6>
		     (pdu_data_tx->llctrl.terminate_ind.error_code ==
    1622:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    1626:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    162a:	2913      	cmp	r1, #19
    162c:	bf08      	it	eq
    162e:	2116      	moveq	r1, #22
    1630:	f016 ffd0 	bl	185d4 <terminate_ind_rx_enqueue>
		ret = ERR_TERMINATE;
    1634:	f04f 0901 	mov.w	r9, #1
    1638:	e799      	b.n	156e <CONFIG_BT_RX_STACK_SIZE+0x56e>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    163a:	e9d2 1345 	ldrd	r1, r3, [r2, #276]	; 0x114
	conn->packet_tx_head_len = 0U;
    163e:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    1640:	4299      	cmp	r1, r3
	conn->packet_tx_head_len = 0U;
    1642:	f8a2 0128 	strh.w	r0, [r2, #296]	; 0x128
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    1646:	d112      	bne.n	166e <CONFIG_BT_RX_STACK_SIZE+0x66e>
		if (node_tx) {
    1648:	f1b8 0f00 	cmp.w	r8, #0
    164c:	d09b      	beq.n	1586 <CONFIG_BT_RX_STACK_SIZE+0x586>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    164e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    1652:	680d      	ldr	r5, [r1, #0]
    1654:	f8c2 5114 	str.w	r5, [r2, #276]	; 0x114
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    1658:	4299      	cmp	r1, r3
				conn->pkt_tx_ctrl_last = NULL;
    165a:	bf0c      	ite	eq
    165c:	e9c2 0046 	strdeq	r0, r0, [r2, #280]	; 0x118
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    1660:	f8c2 5118 	strne.w	r5, [r2, #280]	; 0x118
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    1664:	4961      	ldr	r1, [pc, #388]	; (17ec <CONFIG_BT_RX_STACK_SIZE+0x7ec>)
    1666:	4640      	mov	r0, r8
    1668:	f020 fa76 	bl	21b58 <mem_release>
    166c:	e78b      	b.n	1586 <CONFIG_BT_RX_STACK_SIZE+0x586>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    166e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    1672:	4299      	cmp	r1, r3
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    1674:	bf04      	itt	eq
    1676:	680b      	ldreq	r3, [r1, #0]
    1678:	f8c2 3120 	streq.w	r3, [r2, #288]	; 0x120
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    167c:	680b      	ldr	r3, [r1, #0]
    167e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		return node_tx;
    1682:	e782      	b.n	158a <CONFIG_BT_RX_STACK_SIZE+0x58a>
			_radio.conn_curr->empty = 0U;
    1684:	f36f 12c7 	bfc	r2, #7, #1
    1688:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	struct radio_pdu_node_tx *tx_release = NULL;
    168c:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    1690:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    1694:	7a32      	ldrb	r2, [r6, #8]
    1696:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    169a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    169e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    16a2:	429a      	cmp	r2, r3
    16a4:	f040 81b3 	bne.w	1a0e <CONFIG_BT_RX_STACK_SIZE+0xa0e>
	    (packet_rx_reserve_get(3) != 0) &&
    16a8:	2003      	movs	r0, #3
    16aa:	f016 f94d 	bl	17948 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    16ae:	2800      	cmp	r0, #0
    16b0:	f000 81ad 	beq.w	1a0e <CONFIG_BT_RX_STACK_SIZE+0xa0e>
	    (packet_rx_reserve_get(3) != 0) &&
    16b4:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    16b8:	b383      	cbz	r3, 171c <CONFIG_BT_RX_STACK_SIZE+0x71c>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    16ba:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    16be:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
	    ((_radio.fc_ena == 0) ||
    16c2:	4293      	cmp	r3, r2
    16c4:	d105      	bne.n	16d2 <CONFIG_BT_RX_STACK_SIZE+0x6d2>
	      (_radio.fc_req == _radio.fc_ack)) ||
    16c6:	f894 2178 	ldrb.w	r2, [r4, #376]	; 0x178
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    16ca:	f894 1179 	ldrb.w	r1, [r4, #377]	; 0x179
    16ce:	4291      	cmp	r1, r2
    16d0:	d024      	beq.n	171c <CONFIG_BT_RX_STACK_SIZE+0x71c>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    16d2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
	      (_radio.fc_req == _radio.fc_ack)) ||
    16d6:	4293      	cmp	r3, r2
    16d8:	f000 8199 	beq.w	1a0e <CONFIG_BT_RX_STACK_SIZE+0xa0e>
	      (_radio.fc_req != _radio.fc_ack) &&
    16dc:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    16e0:	f894 2179 	ldrb.w	r2, [r4, #377]	; 0x179
    16e4:	429a      	cmp	r2, r3
    16e6:	f000 8192 	beq.w	1a0e <CONFIG_BT_RX_STACK_SIZE+0xa0e>
		(((_radio.fc_req == 0) &&
    16ea:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    16ee:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	      (_radio.fc_req != _radio.fc_ack) &&
    16f2:	b923      	cbnz	r3, 16fe <CONFIG_BT_RX_STACK_SIZE+0x6fe>
		(((_radio.fc_req == 0) &&
    16f4:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
    16f8:	8c13      	ldrh	r3, [r2, #32]
    16fa:	4299      	cmp	r1, r3
    16fc:	d00e      	beq.n	171c <CONFIG_BT_RX_STACK_SIZE+0x71c>
		 ((_radio.fc_req != 0) &&
    16fe:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
		   _radio.conn_curr->handle)) ||
    1702:	2b00      	cmp	r3, #0
    1704:	f000 8183 	beq.w	1a0e <CONFIG_BT_RX_STACK_SIZE+0xa0e>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    1708:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    170c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    1710:	f8b3 1170 	ldrh.w	r1, [r3, #368]	; 0x170
    1714:	8c13      	ldrh	r3, [r2, #32]
    1716:	4299      	cmp	r1, r3
    1718:	f040 8179 	bne.w	1a0e <CONFIG_BT_RX_STACK_SIZE+0xa0e>
		if (pdu_data_rx->len != 0) {
    171c:	f896 9009 	ldrb.w	r9, [r6, #9]
    1720:	f1b9 0f00 	cmp.w	r9, #0
    1724:	f000 8153 	beq.w	19ce <CONFIG_BT_RX_STACK_SIZE+0x9ce>
			if (_radio.conn_curr->enc_rx) {
    1728:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    172c:	f893 90d0 	ldrb.w	r9, [r3, #208]	; 0xd0
    1730:	f019 0910 	ands.w	r9, r9, #16
    1734:	d016      	beq.n	1764 <CONFIG_BT_RX_STACK_SIZE+0x764>
				done = radio_ccm_is_done();
    1736:	f019 f899 	bl	1a86c <radio_ccm_is_done>
				LL_ASSERT(done);
    173a:	b960      	cbnz	r0, 1756 <CONFIG_BT_RX_STACK_SIZE+0x756>
    173c:	2301      	movs	r3, #1
    173e:	f04f 0100 	mov.w	r1, #0
    1742:	f363 0107 	bfi	r1, r3, #0, #8
    1746:	4a2a      	ldr	r2, [pc, #168]	; (17f0 <CONFIG_BT_RX_STACK_SIZE+0x7f0>)
    1748:	4b2a      	ldr	r3, [pc, #168]	; (17f4 <CONFIG_BT_RX_STACK_SIZE+0x7f4>)
    174a:	482b      	ldr	r0, [pc, #172]	; (17f8 <CONFIG_BT_RX_STACK_SIZE+0x7f8>)
    174c:	1a9b      	subs	r3, r3, r2
    174e:	08db      	lsrs	r3, r3, #3
    1750:	f363 118f 	bfi	r1, r3, #6, #10
    1754:	e5de      	b.n	1314 <CONFIG_BT_RX_STACK_SIZE+0x314>
			if ((_radio.conn_curr->enc_rx &&
    1756:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    175a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    175e:	06dd      	lsls	r5, r3, #27
    1760:	d44c      	bmi.n	17fc <CONFIG_BT_RX_STACK_SIZE+0x7fc>
				ccm_rx_increment = 1U;
    1762:	46b9      	mov	r9, r7
			    (_radio.conn_curr->pause_rx &&
    1764:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    1768:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    176c:	930c      	str	r3, [sp, #48]	; 0x30
			     !radio_ccm_mic_is_valid()) ||
    176e:	f013 0f04 	tst.w	r3, #4
    1772:	7a33      	ldrb	r3, [r6, #8]
    1774:	d010      	beq.n	1798 <CONFIG_BT_RX_STACK_SIZE+0x798>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    1776:	f003 0103 	and.w	r1, r3, #3
    177a:	2903      	cmp	r1, #3
    177c:	d142      	bne.n	1804 <CONFIG_BT_RX_STACK_SIZE+0x804>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    177e:	f995 c01d 	ldrsb.w	ip, [r5, #29]
    1782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	u8_t opcode = pdu_data->llctrl.opcode;
    1784:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    1786:	f1bc 0f00 	cmp.w	ip, #0
    178a:	f002 0040 	and.w	r0, r2, #64	; 0x40
    178e:	db60      	blt.n	1852 <CONFIG_BT_RX_STACK_SIZE+0x852>
	       (!conn->role &&
    1790:	2800      	cmp	r0, #0
    1792:	d14b      	bne.n	182c <CONFIG_BT_RX_STACK_SIZE+0x82c>
		((!conn->refresh &&
    1794:	2902      	cmp	r1, #2
    1796:	d159      	bne.n	184c <CONFIG_BT_RX_STACK_SIZE+0x84c>
			switch (pdu_data_rx->ll_id) {
    1798:	f3c3 0301 	ubfx	r3, r3, #0, #2
    179c:	b2d9      	uxtb	r1, r3
    179e:	b25b      	sxtb	r3, r3
    17a0:	2b00      	cmp	r3, #0
    17a2:	f000 847f 	beq.w	20a4 <CONFIG_BT_RX_STACK_SIZE+0x10a4>
    17a6:	2902      	cmp	r1, #2
    17a8:	f240 80bc 	bls.w	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
	switch (pdu_data_rx->llctrl.opcode) {
    17ac:	f896 a00b 	ldrb.w	sl, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    17b0:	f106 0b08 	add.w	fp, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    17b4:	f1ba 0f11 	cmp.w	sl, #17
    17b8:	f200 845f 	bhi.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
    17bc:	e8df f01a 	tbh	[pc, sl, lsl #1]
    17c0:	00d30057 	.word	0x00d30057
    17c4:	045d010b 	.word	0x045d010b
    17c8:	045d045d 	.word	0x045d045d
    17cc:	0401045d 	.word	0x0401045d
    17d0:	01310114 	.word	0x01310114
    17d4:	045d045d 	.word	0x045d045d
    17d8:	045d0157 	.word	0x045d0157
    17dc:	01b90129 	.word	0x01b90129
    17e0:	039d031a 	.word	0x039d031a
    17e4:	20000e4a 	.word	0x20000e4a
    17e8:	20000d68 	.word	0x20000d68
    17ec:	20000ebc 	.word	0x20000ebc
    17f0:	000233ec 	.word	0x000233ec
    17f4:	0002341c 	.word	0x0002341c
    17f8:	000284ac 	.word	0x000284ac
			     !radio_ccm_mic_is_valid()) ||
    17fc:	f019 f854 	bl	1a8a8 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    1800:	2800      	cmp	r0, #0
    1802:	d1ae      	bne.n	1762 <CONFIG_BT_RX_STACK_SIZE+0x762>
				_radio.state = STATE_CLOSE;
    1804:	2303      	movs	r3, #3
    1806:	7563      	strb	r3, [r4, #21]
				radio_disable();
    1808:	f018 fe0c 	bl	1a424 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    180c:	f018 fe28 	bl	1a460 <radio_is_ready>
    1810:	4607      	mov	r7, r0
    1812:	2800      	cmp	r0, #0
    1814:	f47f ab33 	bne.w	e7e <isr+0xa6>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    1818:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    181c:	213d      	movs	r1, #61	; 0x3d
    181e:	f016 fed9 	bl	185d4 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    1822:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    1826:	f016 fdb7 	bl	18398 <connection_release>
    182a:	e6b6      	b.n	159a <CONFIG_BT_RX_STACK_SIZE+0x59a>
		 (conn->refresh &&
    182c:	1e88      	subs	r0, r1, #2
    182e:	b2c0      	uxtb	r0, r0
    1830:	2809      	cmp	r0, #9
    1832:	d80b      	bhi.n	184c <CONFIG_BT_RX_STACK_SIZE+0x84c>
    1834:	f240 2c05 	movw	ip, #517	; 0x205
    1838:	fa2c f000 	lsr.w	r0, ip, r0
    183c:	07c0      	lsls	r0, r0, #31
    183e:	d4ab      	bmi.n	1798 <CONFIG_BT_RX_STACK_SIZE+0x798>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    1840:	48c5      	ldr	r0, [pc, #788]	; (1b58 <CONFIG_BT_RX_STACK_SIZE+0xb58>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    1842:	fa20 f101 	lsr.w	r1, r0, r1
    1846:	07ca      	lsls	r2, r1, #31
    1848:	d4a6      	bmi.n	1798 <CONFIG_BT_RX_STACK_SIZE+0x798>
    184a:	e7db      	b.n	1804 <CONFIG_BT_RX_STACK_SIZE+0x804>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    184c:	2911      	cmp	r1, #17
    184e:	d8d9      	bhi.n	1804 <CONFIG_BT_RX_STACK_SIZE+0x804>
    1850:	e7f6      	b.n	1840 <CONFIG_BT_RX_STACK_SIZE+0x840>
	       (conn->role &&
    1852:	b938      	cbnz	r0, 1864 <CONFIG_BT_RX_STACK_SIZE+0x864>
		((!conn->refresh &&
    1854:	2907      	cmp	r1, #7
    1856:	d09f      	beq.n	1798 <CONFIG_BT_RX_STACK_SIZE+0x798>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    1858:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    185a:	d09d      	beq.n	1798 <CONFIG_BT_RX_STACK_SIZE+0x798>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    185c:	2911      	cmp	r1, #17
    185e:	d8d1      	bhi.n	1804 <CONFIG_BT_RX_STACK_SIZE+0x804>
    1860:	48be      	ldr	r0, [pc, #760]	; (1b5c <CONFIG_BT_RX_STACK_SIZE+0xb5c>)
    1862:	e7ee      	b.n	1842 <CONFIG_BT_RX_STACK_SIZE+0x842>
		 (conn->refresh &&
    1864:	1e88      	subs	r0, r1, #2
    1866:	2801      	cmp	r0, #1
    1868:	d996      	bls.n	1798 <CONFIG_BT_RX_STACK_SIZE+0x798>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    186a:	290b      	cmp	r1, #11
    186c:	e7f5      	b.n	185a <CONFIG_BT_RX_STACK_SIZE+0x85a>
		if (!_radio.conn_curr->role ||
    186e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1872:	2b00      	cmp	r3, #0
    1874:	f280 8401 	bge.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    1878:	7a71      	ldrb	r1, [r6, #9]
    187a:	2000      	movs	r0, #0
    187c:	f016 f83e 	bl	178fc <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    1880:	2800      	cmp	r0, #0
    1882:	f000 83fa 	beq.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
	packet_rx_callback();
}

static u8_t conn_update(struct connection *conn, struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    1886:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    188a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    188c:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    188e:	041f      	lsls	r7, r3, #16
    1890:	d444      	bmi.n	191c <CONFIG_BT_RX_STACK_SIZE+0x91c>
		return BT_HCI_ERR_INSTANT_PASSED;
	}

	/* different transaction collision */
	if (conn->llcp_req != conn->llcp_ack) {
    1892:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1896:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
    189a:	429a      	cmp	r2, r3
    189c:	d161      	bne.n	1962 <CONFIG_BT_RX_STACK_SIZE+0x962>
	}

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
    189e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    18a2:	b90a      	cbnz	r2, 18a8 <CONFIG_BT_RX_STACK_SIZE+0x8a8>
		LL_ASSERT(conn->role);

		_radio.conn_upd = conn;
    18a4:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
	}

	conn->llcp.conn_upd.win_size =
    18a8:	7b32      	ldrb	r2, [r6, #12]
    18aa:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_size;
	conn->llcp.conn_upd.win_offset_us =
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    18ae:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    18b2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    18b6:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    18b8:	66ea      	str	r2, [r5, #108]	; 0x6c
	conn->llcp.conn_upd.interval =
		pdu_data_rx->llctrl.conn_update_ind.interval;
    18ba:	7c30      	ldrb	r0, [r6, #16]
    18bc:	7bf2      	ldrb	r2, [r6, #15]
    18be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    18c2:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
	conn->llcp.conn_upd.latency =
		pdu_data_rx->llctrl.conn_update_ind.latency;
    18c6:	7cb0      	ldrb	r0, [r6, #18]
    18c8:	7c72      	ldrb	r2, [r6, #17]
    18ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    18ce:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
	conn->llcp.conn_upd.timeout =
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    18d2:	7cf2      	ldrb	r2, [r6, #19]
    18d4:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    18d6:	f8a5 1068 	strh.w	r1, [r5, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    18da:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    18de:	f8a5 2066 	strh.w	r2, [r5, #102]	; 0x66
		pdu_data_rx->llctrl.conn_update_ind.instant;
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    18e2:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
    18e6:	f022 0207 	bic.w	r2, r2, #7
	conn->llcp.conn_upd.is_internal = 0U;

	conn->llcp_type = LLCP_CONN_UPD;
	conn->llcp_ack--;
    18ea:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    18ec:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
	conn->llcp_type = LLCP_CONN_UPD;
    18f0:	2201      	movs	r2, #1
    18f2:	f885 205e 	strb.w	r2, [r5, #94]	; 0x5e
	conn->llcp_ack--;
    18f6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    18fa:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
    18fe:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    1902:	4293      	cmp	r3, r2
    1904:	d007      	beq.n	1916 <CONFIG_BT_RX_STACK_SIZE+0x916>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    1906:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    190a:	f003 0307 	and.w	r3, r3, #7
    190e:	2b04      	cmp	r3, #4
    1910:	d101      	bne.n	1916 <CONFIG_BT_RX_STACK_SIZE+0x916>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1912:	f885 20a9 	strb.w	r2, [r5, #169]	; 0xa9
			_radio.conn_curr->procedure_expire = 0U;
    1916:	2300      	movs	r3, #0
    1918:	86ab      	strh	r3, [r5, #52]	; 0x34
    191a:	e002      	b.n	1922 <CONFIG_BT_RX_STACK_SIZE+0x922>
		return BT_HCI_ERR_INSTANT_PASSED;
    191c:	2328      	movs	r3, #40	; 0x28
			_radio.conn_curr->llcp_terminate.reason_peer = err;
    191e:	f885 309b 	strb.w	r3, [r5, #155]	; 0x9b
	u8_t rx_enqueue = 0U;
    1922:	4657      	mov	r7, sl
			_radio.conn_curr->nesn++;
    1924:	4b8e      	ldr	r3, [pc, #568]	; (1b60 <CONFIG_BT_RX_STACK_SIZE+0xb60>)
    1926:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    192a:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    192e:	f082 0202 	eor.w	r2, r2, #2
    1932:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			if (ccm_rx_increment) {
    1936:	f1b9 0f00 	cmp.w	r9, #0
    193a:	d00a      	beq.n	1952 <CONFIG_BT_RX_STACK_SIZE+0x952>
				_radio.conn_curr->ccm_rx.counter++;
    193c:	f8d3 20e1 	ldr.w	r2, [r3, #225]	; 0xe1
    1940:	f8d3 10e5 	ldr.w	r1, [r3, #229]	; 0xe5
    1944:	3201      	adds	r2, #1
    1946:	f141 0100 	adc.w	r1, r1, #0
    194a:	f8c3 20e1 	str.w	r2, [r3, #225]	; 0xe1
    194e:	f8c3 10e5 	str.w	r1, [r3, #229]	; 0xe5
		_radio.crc_expire = 0U;
    1952:	4b83      	ldr	r3, [pc, #524]	; (1b60 <CONFIG_BT_RX_STACK_SIZE+0xb60>)
    1954:	2500      	movs	r5, #0
    1956:	f883 5119 	strb.w	r5, [r3, #281]	; 0x119
		_radio.conn_curr->supervision_expire = 0U;
    195a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    195e:	861d      	strh	r5, [r3, #48]	; 0x30
    1960:	e3c2      	b.n	20e8 <CONFIG_BT_RX_STACK_SIZE+0x10e8>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    1962:	232a      	movs	r3, #42	; 0x2a
    1964:	e7db      	b.n	191e <CONFIG_BT_RX_STACK_SIZE+0x91e>
		if (!_radio.conn_curr->role ||
    1966:	f995 301d 	ldrsb.w	r3, [r5, #29]
    196a:	2b00      	cmp	r3, #0
    196c:	f280 8385 	bge.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    1970:	7a71      	ldrb	r1, [r6, #9]
    1972:	2001      	movs	r0, #1
    1974:	f015 ffc2 	bl	178fc <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    1978:	2800      	cmp	r0, #0
    197a:	f000 837e 	beq.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED && CONFIG_BT_CTLR_SCHED_ADVANCED */

static u8_t chan_map_update(struct connection *conn,
			    struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    197e:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    1982:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    1984:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    1986:	041c      	lsls	r4, r3, #16
    1988:	d41e      	bmi.n	19c8 <CONFIG_BT_RX_STACK_SIZE+0x9c8>
		return BT_HCI_ERR_INSTANT_PASSED;
	}

	/* different transaction collision */
	if (conn->llcp_req != conn->llcp_ack) {
    198a:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
    198e:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1992:	429a      	cmp	r2, r3
    1994:	d11d      	bne.n	19d2 <CONFIG_BT_RX_STACK_SIZE+0x9d2>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
	}


	memcpy(&conn->llcp.chan_map.chm[0],
    1996:	2205      	movs	r2, #5
    1998:	f106 010c 	add.w	r1, r6, #12
    199c:	f105 0061 	add.w	r0, r5, #97	; 0x61
    19a0:	f01d fe32 	bl	1f608 <memcpy>
	       &pdu_data_rx->llctrl.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->llctrl.chan_map_ind.instant;
    19a4:	7c73      	ldrb	r3, [r6, #17]
    19a6:	7cb2      	ldrb	r2, [r6, #18]
    19a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    19ac:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->llcp.chan_map.initiate = 0U;

	conn->llcp_type = LLCP_CHAN_MAP;
    19b0:	2302      	movs	r3, #2
    19b2:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
	conn->llcp_ack--;
    19b6:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0U;
    19ba:	2700      	movs	r7, #0
	conn->llcp_ack--;
    19bc:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0U;
    19be:	f885 7060 	strb.w	r7, [r5, #96]	; 0x60
	conn->llcp_ack--;
    19c2:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		if (!nack) {
    19c6:	e7ad      	b.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
		return BT_HCI_ERR_INSTANT_PASSED;
    19c8:	2328      	movs	r3, #40	; 0x28
		_radio.conn_curr->llcp_terminate.reason_peer =
    19ca:	f885 309b 	strb.w	r3, [r5, #155]	; 0x9b
	u8_t rx_enqueue = 0U;
    19ce:	2700      	movs	r7, #0
    19d0:	e7a8      	b.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    19d2:	232a      	movs	r3, #42	; 0x2a
			_radio.conn_curr->llcp_terminate.reason_peer = err;
    19d4:	e7f9      	b.n	19ca <CONFIG_BT_RX_STACK_SIZE+0x9ca>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    19d6:	7a71      	ldrb	r1, [r6, #9]
    19d8:	2002      	movs	r0, #2
    19da:	f015 ff8f 	bl	178fc <pdu_len_cmp>
    19de:	2800      	cmp	r0, #0
    19e0:	f000 834b 	beq.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		_radio.conn_curr->llcp_terminate.reason_peer =
    19e4:	7b33      	ldrb	r3, [r6, #12]
    19e6:	e7f0      	b.n	19ca <CONFIG_BT_RX_STACK_SIZE+0x9ca>
		if (!_radio.conn_curr->role ||
    19e8:	f995 301d 	ldrsb.w	r3, [r5, #29]
    19ec:	2b00      	cmp	r3, #0
    19ee:	f280 8344 	bge.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    19f2:	7a71      	ldrb	r1, [r6, #9]
    19f4:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    19f6:	f015 ff81 	bl	178fc <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    19fa:	2800      	cmp	r0, #0
    19fc:	f000 833d 	beq.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    1a00:	4659      	mov	r1, fp
    1a02:	4628      	mov	r0, r5
    1a04:	f017 fce2 	bl	193cc <feature_rsp_send>
				nack = reject_ext_ind_send(conn,
    1a08:	4607      	mov	r7, r0
		if (!nack) {
    1a0a:	2800      	cmp	r0, #0
    1a0c:	d08a      	beq.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
	u8_t rx_enqueue = 0U;
    1a0e:	2700      	movs	r7, #0
    1a10:	e79f      	b.n	1952 <CONFIG_BT_RX_STACK_SIZE+0x952>
		if (_radio.conn_curr->role ||
    1a12:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1a16:	2b00      	cmp	r3, #0
    1a18:	f2c0 832f 	blt.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    1a1c:	7a71      	ldrb	r1, [r6, #9]
    1a1e:	200e      	movs	r0, #14
    1a20:	e7e9      	b.n	19f6 <CONFIG_BT_RX_STACK_SIZE+0x9f6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    1a22:	7a71      	ldrb	r1, [r6, #9]
    1a24:	2009      	movs	r0, #9
    1a26:	f015 ff69 	bl	178fc <pdu_len_cmp>
    1a2a:	2800      	cmp	r0, #0
    1a2c:	f000 8325 	beq.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
	       (features[1] << 8) | (features[2] << 16);
    1a30:	7bb3      	ldrb	r3, [r6, #14]
    1a32:	7b72      	ldrb	r2, [r6, #13]
    1a34:	041b      	lsls	r3, r3, #16
    1a36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    1a3a:	7b32      	ldrb	r2, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    1a3c:	4313      	orrs	r3, r2
    1a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    1a42:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    1a46:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	       (features[1] << 8) | (features[2] << 16);
    1a4a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    1a4e:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    1a52:	4013      	ands	r3, r2
    1a54:	f3c3 0310 	ubfx	r3, r3, #0, #17
    1a58:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1U;
    1a5c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    1a60:	f043 0320 	orr.w	r3, r3, #32
    1a64:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0U;
    1a68:	2300      	movs	r3, #0
    1a6a:	86ab      	strh	r3, [r5, #52]	; 0x34
		if (!nack) {
    1a6c:	e75a      	b.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    1a6e:	7a71      	ldrb	r1, [r6, #9]
    1a70:	200c      	movs	r0, #12
    1a72:	f015 ff43 	bl	178fc <pdu_len_cmp>
    1a76:	2800      	cmp	r0, #0
    1a78:	f000 82ff 	beq.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
{
	struct pdu_data_llctrl_version_ind *v;
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	if (!conn->llcp_version.tx) {
    1a7c:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    1a80:	f013 0701 	ands.w	r7, r3, #1
    1a84:	d14f      	bne.n	1b26 <CONFIG_BT_RX_STACK_SIZE+0xb26>
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1a86:	4837      	ldr	r0, [pc, #220]	; (1b64 <CONFIG_BT_RX_STACK_SIZE+0xb64>)
    1a88:	f020 f84d 	bl	21b26 <mem_acquire>
		if (!node_tx) {
    1a8c:	4601      	mov	r1, r0
    1a8e:	2800      	cmp	r0, #0
    1a90:	d0bd      	beq.n	1a0e <CONFIG_BT_RX_STACK_SIZE+0xa0e>
			return 1;
		}
		conn->llcp_version.tx = 1U;
    1a92:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    1a96:	f043 0301 	orr.w	r3, r3, #1
    1a9a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90

		pdu_ctrl_tx = (void *)node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a9e:	7903      	ldrb	r3, [r0, #4]
    1aa0:	f043 0303 	orr.w	r3, r3, #3
    1aa4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    1aa6:	2306      	movs	r3, #6
    1aa8:	7143      	strb	r3, [r0, #5]
			offsetof(struct pdu_data_llctrl, version_ind) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1aaa:	230c      	movs	r3, #12
    1aac:	71c3      	strb	r3, [r0, #7]
		v = &pdu_ctrl_tx->llctrl.version_ind;
		v->version_number = LL_VERSION_NUMBER;
    1aae:	2309      	movs	r3, #9
    1ab0:	7203      	strb	r3, [r0, #8]
		v->company_id =	CONFIG_BT_CTLR_COMPANY_ID;
    1ab2:	f06f 030e 	mvn.w	r3, #14
    1ab6:	7243      	strb	r3, [r0, #9]
    1ab8:	2305      	movs	r3, #5
    1aba:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	CONFIG_BT_CTLR_SUBVERSION_NUMBER;
    1abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ac0:	72c3      	strb	r3, [r0, #11]
    1ac2:	7303      	strb	r3, [r0, #12]

		ctrl_tx_sec_enqueue(conn, node_tx);
    1ac4:	4628      	mov	r0, r5
    1ac6:	f020 fac2 	bl	2204e <ctrl_tx_sec_enqueue>
	conn->empty = 1U;
    1aca:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    1ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1ad2:	f885 30d0 	strb.w	r3, [r5, #208]	; 0xd0
	pdu_data_tx = (void *)radio_pkt_empty_get();
    1ad6:	f018 fcf7 	bl	1a4c8 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    1ada:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0U;
    1adc:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    1ade:	2201      	movs	r2, #1
    1ae0:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    1ae4:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    1ae8:	7003      	strb	r3, [r0, #0]
	if (conn->pkt_tx_head) {
    1aea:	b2db      	uxtb	r3, r3
    1aec:	b1c2      	cbz	r2, 1b20 <CONFIG_BT_RX_STACK_SIZE+0xb20>
		pdu_data_tx->md = 1U;
    1aee:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0U;
    1af2:	7003      	strb	r3, [r0, #0]
		/* Tx-ed and Rx-ed before, ignore this invalid Rx. */
		return 0;
	}

	v = &pdu_data_rx->llctrl.version_ind;
	conn->llcp_version.version_number = v->version_number;
    1af4:	7b33      	ldrb	r3, [r6, #12]
    1af6:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    1afa:	7bb2      	ldrb	r2, [r6, #14]
    1afc:	7b73      	ldrb	r3, [r6, #13]
    1afe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1b02:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    1b06:	7bf3      	ldrb	r3, [r6, #15]
    1b08:	7c32      	ldrb	r2, [r6, #16]
    1b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1b0e:	f8a5 3094 	strh.w	r3, [r5, #148]	; 0x94
	conn->llcp_version.rx = 1U;
    1b12:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    1b16:	f043 0302 	orr.w	r3, r3, #2
    1b1a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
		if (!nack) {
    1b1e:	e701      	b.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
		pdu_data_tx->md = 0U;
    1b20:	f367 1304 	bfi	r3, r7, #4, #1
    1b24:	e7e5      	b.n	1af2 <CONFIG_BT_RX_STACK_SIZE+0xaf2>
	} else if (!conn->llcp_version.rx) {
    1b26:	f013 0302 	ands.w	r3, r3, #2
    1b2a:	f47f af50 	bne.w	19ce <CONFIG_BT_RX_STACK_SIZE+0x9ce>
		conn->procedure_expire = 0U;
    1b2e:	86ab      	strh	r3, [r5, #52]	; 0x34
		*rx_enqueue = 1U;
    1b30:	e7e0      	b.n	1af4 <CONFIG_BT_RX_STACK_SIZE+0xaf4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    1b32:	7a71      	ldrb	r1, [r6, #9]
    1b34:	200f      	movs	r0, #15
    1b36:	f015 fee1 	bl	178fc <pdu_len_cmp>
    1b3a:	2800      	cmp	r0, #0
    1b3c:	f000 829d 	beq.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    1b40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    1b44:	930b      	str	r3, [sp, #44]	; 0x2c
    1b46:	b17b      	cbz	r3, 1b68 <CONFIG_BT_RX_STACK_SIZE+0xb68>
    1b48:	429d      	cmp	r5, r3
    1b4a:	d00d      	beq.n	1b68 <CONFIG_BT_RX_STACK_SIZE+0xb68>
			nack = reject_ext_ind_send(_radio.conn_curr,
    1b4c:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn,
    1b4e:	210f      	movs	r1, #15
				nack = reject_ext_ind_send(conn,
    1b50:	4628      	mov	r0, r5
    1b52:	f017 fc7d 	bl	19450 <reject_ext_ind_send>
    1b56:	e757      	b.n	1a08 <CONFIG_BT_RX_STACK_SIZE+0xa08>
    1b58:	00022060 	.word	0x00022060
    1b5c:	00022040 	.word	0x00022040
    1b60:	20000d68 	.word	0x20000d68
    1b64:	20000ebc 	.word	0x20000ebc
		if (!_radio.conn_curr->role) {
    1b68:	f995 101d 	ldrsb.w	r1, [r5, #29]
    1b6c:	f895 b0a9 	ldrb.w	fp, [r5, #169]	; 0xa9
    1b70:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    1b74:	2900      	cmp	r1, #0
    1b76:	f2c0 80a0 	blt.w	1cba <CONFIG_BT_RX_STACK_SIZE+0xcba>
			if ((conn->llcp_conn_param.req !=
    1b7a:	459b      	cmp	fp, r3
    1b7c:	d009      	beq.n	1b92 <CONFIG_BT_RX_STACK_SIZE+0xb92>
			    ((conn->llcp_conn_param.state ==
    1b7e:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
					conn->llcp_conn_param.ack) &&
    1b82:	f013 0307 	ands.w	r3, r3, #7
    1b86:	d002      	beq.n	1b8e <CONFIG_BT_RX_STACK_SIZE+0xb8e>
			      LLCP_CPR_STATE_REQ) ||
    1b88:	3b04      	subs	r3, #4
    1b8a:	2b01      	cmp	r3, #1
    1b8c:	d801      	bhi.n	1b92 <CONFIG_BT_RX_STACK_SIZE+0xb92>
				nack = reject_ext_ind_send(_radio.conn_curr,
    1b8e:	2223      	movs	r2, #35	; 0x23
    1b90:	e7dd      	b.n	1b4e <CONFIG_BT_RX_STACK_SIZE+0xb4e>
			} else if (conn->llcp_req != conn->llcp_ack) {
    1b92:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
    1b96:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1b9a:	4299      	cmp	r1, r3
    1b9c:	d001      	beq.n	1ba2 <CONFIG_BT_RX_STACK_SIZE+0xba2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    1b9e:	222a      	movs	r2, #42	; 0x2a
    1ba0:	e7d5      	b.n	1b4e <CONFIG_BT_RX_STACK_SIZE+0xb4e>
				if ((cpr->interval_min < 6) ||
    1ba2:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
    1ba6:	fa1f f38a 	uxth.w	r3, sl
    1baa:	2b05      	cmp	r3, #5
    1bac:	d922      	bls.n	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
				    (cpr->interval_max > 3200) ||
    1bae:	f8b6 e00e 	ldrh.w	lr, [r6, #14]
    1bb2:	fa1f f18e 	uxth.w	r1, lr
				if ((cpr->interval_min < 6) ||
    1bb6:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
    1bba:	d81b      	bhi.n	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
				    (cpr->interval_max > 3200) ||
    1bbc:	428b      	cmp	r3, r1
    1bbe:	d819      	bhi.n	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
				    (cpr->latency > 499) ||
    1bc0:	f8b6 c010 	ldrh.w	ip, [r6, #16]
    1bc4:	fa1f f08c 	uxth.w	r0, ip
				    (cpr->interval_min > cpr->interval_max) ||
    1bc8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    1bcc:	d212      	bcs.n	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
				    (cpr->timeout < 10) ||
    1bce:	8a73      	ldrh	r3, [r6, #18]
    1bd0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1bd4:	b29b      	uxth	r3, r3
				    (cpr->latency > 499) ||
    1bd6:	f1a3 040a 	sub.w	r4, r3, #10
    1bda:	b2a4      	uxth	r4, r4
    1bdc:	f640 4276 	movw	r2, #3190	; 0xc76
    1be0:	4294      	cmp	r4, r2
    1be2:	d807      	bhi.n	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
				     ((cpr->latency + 1) *
    1be4:	fb00 1401 	mla	r4, r0, r1, r1
				    (cpr->timeout > 3200) ||
    1be8:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
    1bec:	da02      	bge.n	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
				    (cpr->preferred_periodicity >
    1bee:	7d34      	ldrb	r4, [r6, #20]
				      cpr->interval_max)) ||
    1bf0:	42a1      	cmp	r1, r4
    1bf2:	d201      	bcs.n	1bf8 <CONFIG_BT_RX_STACK_SIZE+0xbf8>
				nack = reject_ext_ind_send(conn,
    1bf4:	221e      	movs	r2, #30
    1bf6:	e7aa      	b.n	1b4e <CONFIG_BT_RX_STACK_SIZE+0xb4e>
				conn->llcp_conn_param.timeout =	cpr->timeout;
    1bf8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
				conn->llcp_conn_param.interval_min =
    1bfc:	f8a5 a0ac 	strh.w	sl, [r5, #172]	; 0xac
				conn->llcp_conn_param.interval_max =
    1c00:	f8a5 e0ae 	strh.w	lr, [r5, #174]	; 0xae
				conn->llcp_conn_param.latency =	cpr->latency;
    1c04:	f8a5 c0b0 	strh.w	ip, [r5, #176]	; 0xb0
				conn->llcp_conn_param.timeout =	cpr->timeout;
    1c08:	f8a5 20b2 	strh.w	r2, [r5, #178]	; 0xb2
				conn->llcp_conn_param.preferred_periodicity =
    1c0c:	f885 40b4 	strb.w	r4, [r5, #180]	; 0xb4
					cpr->reference_conn_event_count;
    1c10:	f896 c016 	ldrb.w	ip, [r6, #22]
    1c14:	7d74      	ldrb	r4, [r6, #21]
    1c16:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    1c1a:	f8a5 40b6 	strh.w	r4, [r5, #182]	; 0xb6
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    1c1e:	f896 c018 	ldrb.w	ip, [r6, #24]
    1c22:	7df4      	ldrb	r4, [r6, #23]
    1c24:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c28:	f8a5 40b8 	strh.w	r4, [r5, #184]	; 0xb8
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    1c2c:	f896 c01a 	ldrb.w	ip, [r6, #26]
    1c30:	7e74      	ldrb	r4, [r6, #25]
    1c32:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c36:	f8a5 40ba 	strh.w	r4, [r5, #186]	; 0xba
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    1c3a:	f896 c01c 	ldrb.w	ip, [r6, #28]
    1c3e:	7ef4      	ldrb	r4, [r6, #27]
    1c40:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c44:	f8a5 40bc 	strh.w	r4, [r5, #188]	; 0xbc
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    1c48:	f896 c01e 	ldrb.w	ip, [r6, #30]
    1c4c:	7f74      	ldrb	r4, [r6, #29]
    1c4e:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c52:	f8a5 40be 	strh.w	r4, [r5, #190]	; 0xbe
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    1c56:	f896 c020 	ldrb.w	ip, [r6, #32]
    1c5a:	7ff4      	ldrb	r4, [r6, #31]
    1c5c:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c60:	f8a5 40c0 	strh.w	r4, [r5, #192]	; 0xc0
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    1c64:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
    1c68:	f896 c022 	ldrb.w	ip, [r6, #34]	; 0x22
    1c6c:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c70:	f8a5 40c2 	strh.w	r4, [r5, #194]	; 0xc2
				     conn->conn_interval) ||
    1c74:	8cac      	ldrh	r4, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval_max !=
    1c76:	42a1      	cmp	r1, r4
    1c78:	d111      	bne.n	1c9e <CONFIG_BT_RX_STACK_SIZE+0xc9e>
				     conn->conn_interval) ||
    1c7a:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
    1c7c:	4281      	cmp	r1, r0
    1c7e:	d10e      	bne.n	1c9e <CONFIG_BT_RX_STACK_SIZE+0xc9e>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    1c80:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1c84:	4361      	muls	r1, r4
    1c86:	1e48      	subs	r0, r1, #1
    1c88:	f242 7410 	movw	r4, #10000	; 0x2710
    1c8c:	fb04 0303 	mla	r3, r4, r3, r0
    1c90:	fbb3 f3f1 	udiv	r3, r3, r1
				     conn->latency) ||
    1c94:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
    1c96:	b29b      	uxth	r3, r3
    1c98:	4299      	cmp	r1, r3
    1c9a:	f000 80a2 	beq.w	1de2 <CONFIG_BT_RX_STACK_SIZE+0xde2>
					if (conn->pause_tx) {
    1c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ca0:	f013 0f08 	tst.w	r3, #8
    1ca4:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1ca8:	f000 808a 	beq.w	1dc0 <CONFIG_BT_RX_STACK_SIZE+0xdc0>
						conn->llcp_conn_param.state =
    1cac:	2202      	movs	r2, #2
    1cae:	f362 0302 	bfi	r3, r2, #0, #3
    1cb2:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
	u8_t rx_enqueue = 0U;
    1cb6:	2700      	movs	r7, #0
    1cb8:	e087      	b.n	1dca <CONFIG_BT_RX_STACK_SIZE+0xdca>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    1cba:	459b      	cmp	fp, r3
    1cbc:	d004      	beq.n	1cc8 <CONFIG_BT_RX_STACK_SIZE+0xcc8>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    1cbe:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1cc2:	0798      	lsls	r0, r3, #30
    1cc4:	f040 84af 	bne.w	2626 <CONFIG_BT_RX_STACK_SIZE+0x1626>
			if ((cpr->interval_min < 6) ||
    1cc8:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
    1ccc:	fa1f f38a 	uxth.w	r3, sl
    1cd0:	2b05      	cmp	r3, #5
    1cd2:	d98f      	bls.n	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
			    (cpr->interval_max > 3200) ||
    1cd4:	f8b6 e00e 	ldrh.w	lr, [r6, #14]
    1cd8:	fa1f f28e 	uxth.w	r2, lr
			if ((cpr->interval_min < 6) ||
    1cdc:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
    1ce0:	d888      	bhi.n	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
			    (cpr->interval_max > 3200) ||
    1ce2:	4293      	cmp	r3, r2
    1ce4:	d886      	bhi.n	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
			    (cpr->latency > 499) ||
    1ce6:	f8b6 c010 	ldrh.w	ip, [r6, #16]
    1cea:	fa1f f18c 	uxth.w	r1, ip
			    (cpr->interval_min > cpr->interval_max) ||
    1cee:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    1cf2:	f4bf af7f 	bcs.w	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    1cf6:	8a73      	ldrh	r3, [r6, #18]
    1cf8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    1cfc:	b29b      	uxth	r3, r3
			    (cpr->latency > 499) ||
    1cfe:	f1a3 000a 	sub.w	r0, r3, #10
    1d02:	b280      	uxth	r0, r0
    1d04:	f640 4476 	movw	r4, #3190	; 0xc76
    1d08:	42a0      	cmp	r0, r4
    1d0a:	f63f af73 	bhi.w	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    1d0e:	fb01 2002 	mla	r0, r1, r2, r2
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    1d12:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
    1d16:	f6bf af6d 	bge.w	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    1d1a:	7d30      	ldrb	r0, [r6, #20]
						    cpr->interval_max)) ||
    1d1c:	4282      	cmp	r2, r0
    1d1e:	f4ff af69 	bcc.w	1bf4 <CONFIG_BT_RX_STACK_SIZE+0xbf4>
			conn->llcp_conn_param.timeout =	cpr->timeout;
    1d22:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
			conn->llcp_conn_param.interval_min = cpr->interval_min;
    1d26:	f8a5 a0ac 	strh.w	sl, [r5, #172]	; 0xac
			conn->llcp_conn_param.interval_max = cpr->interval_max;
    1d2a:	f8a5 e0ae 	strh.w	lr, [r5, #174]	; 0xae
			conn->llcp_conn_param.latency =	cpr->latency;
    1d2e:	f8a5 c0b0 	strh.w	ip, [r5, #176]	; 0xb0
			conn->llcp_conn_param.timeout =	cpr->timeout;
    1d32:	f8a5 40b2 	strh.w	r4, [r5, #178]	; 0xb2
			conn->llcp_conn_param.preferred_periodicity =
    1d36:	f885 00b4 	strb.w	r0, [r5, #180]	; 0xb4
				cpr->reference_conn_event_count;
    1d3a:	7db4      	ldrb	r4, [r6, #22]
    1d3c:	7d70      	ldrb	r0, [r6, #21]
    1d3e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    1d42:	f8a5 00b6 	strh.w	r0, [r5, #182]	; 0xb6
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    1d46:	7e34      	ldrb	r4, [r6, #24]
    1d48:	7df0      	ldrb	r0, [r6, #23]
    1d4a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d4e:	f8a5 00b8 	strh.w	r0, [r5, #184]	; 0xb8
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    1d52:	7eb4      	ldrb	r4, [r6, #26]
    1d54:	7e70      	ldrb	r0, [r6, #25]
    1d56:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d5a:	f8a5 00ba 	strh.w	r0, [r5, #186]	; 0xba
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    1d5e:	7f34      	ldrb	r4, [r6, #28]
    1d60:	7ef0      	ldrb	r0, [r6, #27]
    1d62:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d66:	f8a5 00bc 	strh.w	r0, [r5, #188]	; 0xbc
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    1d6a:	7fb4      	ldrb	r4, [r6, #30]
    1d6c:	7f70      	ldrb	r0, [r6, #29]
    1d6e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d72:	f8a5 00be 	strh.w	r0, [r5, #190]	; 0xbe
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    1d76:	f896 4020 	ldrb.w	r4, [r6, #32]
    1d7a:	7ff0      	ldrb	r0, [r6, #31]
    1d7c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d80:	f8a5 00c0 	strh.w	r0, [r5, #192]	; 0xc0
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    1d84:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
    1d88:	f896 4022 	ldrb.w	r4, [r6, #34]	; 0x22
    1d8c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d90:	f8a5 00c2 	strh.w	r0, [r5, #194]	; 0xc2
			     conn->conn_interval) ||
    1d94:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval_max !=
    1d96:	4282      	cmp	r2, r0
    1d98:	d110      	bne.n	1dbc <CONFIG_BT_RX_STACK_SIZE+0xdbc>
			     conn->conn_interval) ||
    1d9a:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
    1d9c:	4288      	cmp	r0, r1
    1d9e:	d10d      	bne.n	1dbc <CONFIG_BT_RX_STACK_SIZE+0xdbc>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    1da0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1da4:	434a      	muls	r2, r1
    1da6:	1e51      	subs	r1, r2, #1
    1da8:	f242 7010 	movw	r0, #10000	; 0x2710
    1dac:	fb00 1303 	mla	r3, r0, r3, r1
    1db0:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != conn->latency) ||
    1db4:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    1db6:	b29b      	uxth	r3, r3
    1db8:	429a      	cmp	r2, r3
    1dba:	d012      	beq.n	1de2 <CONFIG_BT_RX_STACK_SIZE+0xde2>
				conn->llcp_conn_param.state =
    1dbc:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1dc0:	2203      	movs	r2, #3
    1dc2:	f362 0302 	bfi	r3, r2, #0, #3
    1dc6:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
			conn->llcp_conn_param.ack--;
    1dca:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    1dce:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
			if (_radio.conn_upd == 0) {
    1dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	f47f ada5 	bne.w	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
				_radio.conn_upd = conn;
    1dda:	4bb3      	ldr	r3, [pc, #716]	; (20a8 <CONFIG_BT_RX_STACK_SIZE+0x10a8>)
    1ddc:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
		if (!nack) {
    1de0:	e5a0      	b.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
				conn->llcp_conn_param.state =
    1de2:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
    1de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1dea:	f043 0301 	orr.w	r3, r3, #1
    1dee:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
    1df2:	e760      	b.n	1cb6 <CONFIG_BT_RX_STACK_SIZE+0xcb6>
		if (_radio.conn_curr->role ||
    1df4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	f2c0 813e 	blt.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    1dfe:	7a71      	ldrb	r1, [r6, #9]
    1e00:	2010      	movs	r0, #16
    1e02:	f015 fd7b 	bl	178fc <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    1e06:	2800      	cmp	r0, #0
    1e08:	f000 8137 	beq.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		if (!_radio.conn_curr->role &&
    1e0c:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
    1e10:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    1e14:	429a      	cmp	r2, r3
    1e16:	f43f adda 	beq.w	19ce <CONFIG_BT_RX_STACK_SIZE+0x9ce>
		    (_radio.conn_curr->llcp_conn_param.state ==
    1e1a:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
		     _radio.conn_curr->llcp_conn_param.ack) &&
    1e1e:	f003 0307 	and.w	r3, r3, #7
    1e22:	2b04      	cmp	r3, #4
    1e24:	f47f add3 	bne.w	19ce <CONFIG_BT_RX_STACK_SIZE+0x9ce>
			if ((cpr->interval_min < 6) ||
    1e28:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
    1e2c:	fa1f f38e 	uxth.w	r3, lr
    1e30:	2b05      	cmp	r3, #5
    1e32:	d91e      	bls.n	1e72 <CONFIG_BT_RX_STACK_SIZE+0xe72>
			    (cpr->interval_max > 3200) ||
    1e34:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
    1e38:	fa1f f28c 	uxth.w	r2, ip
			if ((cpr->interval_min < 6) ||
    1e3c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
    1e40:	d817      	bhi.n	1e72 <CONFIG_BT_RX_STACK_SIZE+0xe72>
			    (cpr->interval_max > 3200) ||
    1e42:	4293      	cmp	r3, r2
    1e44:	d815      	bhi.n	1e72 <CONFIG_BT_RX_STACK_SIZE+0xe72>
			    (cpr->latency > 499) ||
    1e46:	8a34      	ldrh	r4, [r6, #16]
    1e48:	b2a3      	uxth	r3, r4
			    (cpr->interval_min > cpr->interval_max) ||
    1e4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    1e4e:	d210      	bcs.n	1e72 <CONFIG_BT_RX_STACK_SIZE+0xe72>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    1e50:	8a70      	ldrh	r0, [r6, #18]
    1e52:	b287      	uxth	r7, r0
			    (cpr->latency > 499) ||
    1e54:	f1a7 010a 	sub.w	r1, r7, #10
    1e58:	b289      	uxth	r1, r1
    1e5a:	f640 4a76 	movw	sl, #3190	; 0xc76
    1e5e:	4551      	cmp	r1, sl
    1e60:	d807      	bhi.n	1e72 <CONFIG_BT_RX_STACK_SIZE+0xe72>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    1e62:	fb03 2302 	mla	r3, r3, r2, r2
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    1e66:	ebb3 0f87 	cmp.w	r3, r7, lsl #2
    1e6a:	da02      	bge.n	1e72 <CONFIG_BT_RX_STACK_SIZE+0xe72>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    1e6c:	7d33      	ldrb	r3, [r6, #20]
						    cpr->interval_max)) ||
    1e6e:	429a      	cmp	r2, r3
    1e70:	d202      	bcs.n	1e78 <CONFIG_BT_RX_STACK_SIZE+0xe78>
				nack = reject_ext_ind_send(conn,
    1e72:	221e      	movs	r2, #30
    1e74:	2110      	movs	r1, #16
    1e76:	e66b      	b.n	1b50 <CONFIG_BT_RX_STACK_SIZE+0xb50>
			_radio.conn_curr->procedure_expire = 0U;
    1e78:	2700      	movs	r7, #0
    1e7a:	86af      	strh	r7, [r5, #52]	; 0x34
			conn->llcp_conn_param.interval_min = cpr->interval_min;
    1e7c:	f8a5 e0ac 	strh.w	lr, [r5, #172]	; 0xac
			conn->llcp_conn_param.interval_max = cpr->interval_max;
    1e80:	f8a5 c0ae 	strh.w	ip, [r5, #174]	; 0xae
			conn->llcp_conn_param.latency =	cpr->latency;
    1e84:	f8a5 40b0 	strh.w	r4, [r5, #176]	; 0xb0
			conn->llcp_conn_param.timeout =	cpr->timeout;
    1e88:	f8a5 00b2 	strh.w	r0, [r5, #178]	; 0xb2
			conn->llcp_conn_param.preferred_periodicity =
    1e8c:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
				cpr->reference_conn_event_count;
    1e90:	7db2      	ldrb	r2, [r6, #22]
    1e92:	7d73      	ldrb	r3, [r6, #21]
    1e94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    1e98:	f8a5 30b6 	strh.w	r3, [r5, #182]	; 0xb6
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    1e9c:	7e32      	ldrb	r2, [r6, #24]
    1e9e:	7df3      	ldrb	r3, [r6, #23]
    1ea0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ea4:	f8a5 30b8 	strh.w	r3, [r5, #184]	; 0xb8
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    1ea8:	7eb2      	ldrb	r2, [r6, #26]
    1eaa:	7e73      	ldrb	r3, [r6, #25]
    1eac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1eb0:	f8a5 30ba 	strh.w	r3, [r5, #186]	; 0xba
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    1eb4:	7f32      	ldrb	r2, [r6, #28]
    1eb6:	7ef3      	ldrb	r3, [r6, #27]
    1eb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ebc:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    1ec0:	7fb2      	ldrb	r2, [r6, #30]
    1ec2:	7f73      	ldrb	r3, [r6, #29]
    1ec4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ec8:	f8a5 30be 	strh.w	r3, [r5, #190]	; 0xbe
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    1ecc:	f896 2020 	ldrb.w	r2, [r6, #32]
    1ed0:	7ff3      	ldrb	r3, [r6, #31]
    1ed2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ed6:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    1eda:	f896 2022 	ldrb.w	r2, [r6, #34]	; 0x22
    1ede:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    1ee2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ee6:	f8a5 30c2 	strh.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    1eea:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1eee:	2201      	movs	r2, #1
    1ef0:	f362 0302 	bfi	r3, r2, #0, #3
    1ef4:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
		if (!nack) {
    1ef8:	e514      	b.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    1efa:	7a71      	ldrb	r1, [r6, #9]
    1efc:	2011      	movs	r0, #17
    1efe:	f015 fcfd 	bl	178fc <pdu_len_cmp>
    1f02:	2800      	cmp	r0, #0
    1f04:	f000 80b9 	beq.w	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
		   _radio.conn_curr->llcp_conn_param.req) {
    1f08:	f895 00a8 	ldrb.w	r0, [r5, #168]	; 0xa8
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    1f0c:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    1f10:	4283      	cmp	r3, r0
    1f12:	f43f ad5c 	beq.w	19ce <CONFIG_BT_RX_STACK_SIZE+0x9ce>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    1f16:	7b33      	ldrb	r3, [r6, #12]
    1f18:	2b0f      	cmp	r3, #15
    1f1a:	f47f ad58 	bne.w	19ce <CONFIG_BT_RX_STACK_SIZE+0x9ce>
	if (!conn->role && (rej_ext_ind->error_code ==
    1f1e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1f22:	7b72      	ldrb	r2, [r6, #13]
    1f24:	2b00      	cmp	r3, #0
    1f26:	db15      	blt.n	1f54 <CONFIG_BT_RX_STACK_SIZE+0xf54>
    1f28:	2a1a      	cmp	r2, #26
    1f2a:	d113      	bne.n	1f54 <CONFIG_BT_RX_STACK_SIZE+0xf54>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    1f2c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1f30:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
    1f34:	4299      	cmp	r1, r3
    1f36:	d07b      	beq.n	2030 <CONFIG_BT_RX_STACK_SIZE+0x1030>
    1f38:	2301      	movs	r3, #1
    1f3a:	f04f 0100 	mov.w	r1, #0
    1f3e:	f363 0107 	bfi	r1, r3, #0, #8
    1f42:	4a5a      	ldr	r2, [pc, #360]	; (20ac <CONFIG_BT_RX_STACK_SIZE+0x10ac>)
    1f44:	4b5a      	ldr	r3, [pc, #360]	; (20b0 <CONFIG_BT_RX_STACK_SIZE+0x10b0>)
    1f46:	485b      	ldr	r0, [pc, #364]	; (20b4 <CONFIG_BT_RX_STACK_SIZE+0x10b4>)
    1f48:	1a9b      	subs	r3, r3, r2
    1f4a:	08db      	lsrs	r3, r3, #3
    1f4c:	f363 118f 	bfi	r1, r3, #6, #10
    1f50:	f7ff b9e0 	b.w	1314 <CONFIG_BT_RX_STACK_SIZE+0x314>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    1f54:	2a23      	cmp	r2, #35	; 0x23
    1f56:	d01d      	beq.n	1f94 <CONFIG_BT_RX_STACK_SIZE+0xf94>
		LL_ASSERT(_radio.conn_upd == conn);
    1f58:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    1f5c:	428d      	cmp	r5, r1
    1f5e:	d00d      	beq.n	1f7c <CONFIG_BT_RX_STACK_SIZE+0xf7c>
			LL_ASSERT(_radio.conn_upd == conn);
    1f60:	2301      	movs	r3, #1
    1f62:	f04f 0100 	mov.w	r1, #0
    1f66:	f363 0107 	bfi	r1, r3, #0, #8
    1f6a:	4a50      	ldr	r2, [pc, #320]	; (20ac <CONFIG_BT_RX_STACK_SIZE+0x10ac>)
    1f6c:	4b50      	ldr	r3, [pc, #320]	; (20b0 <CONFIG_BT_RX_STACK_SIZE+0x10b0>)
    1f6e:	4852      	ldr	r0, [pc, #328]	; (20b8 <CONFIG_BT_RX_STACK_SIZE+0x10b8>)
    1f70:	1a9b      	subs	r3, r3, r2
    1f72:	08db      	lsrs	r3, r3, #3
    1f74:	f363 118f 	bfi	r1, r3, #6, #10
    1f78:	f7ff b9cc 	b.w	1314 <CONFIG_BT_RX_STACK_SIZE+0x314>
		_radio.conn_upd = NULL;
    1f7c:	2100      	movs	r1, #0
		if (conn->role) {
    1f7e:	428b      	cmp	r3, r1
			conn->slave.ticks_to_offset =
    1f80:	bfb8      	it	lt
    1f82:	f8d5 30cc 	ldrlt.w	r3, [r5, #204]	; 0xcc
		_radio.conn_upd = NULL;
    1f86:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
		conn->llcp_conn_param.ack =
    1f8a:	f885 00a9 	strb.w	r0, [r5, #169]	; 0xa9
		conn->procedure_expire = 0U;
    1f8e:	86a9      	strh	r1, [r5, #52]	; 0x34
			conn->slave.ticks_to_offset =
    1f90:	bfb8      	it	lt
    1f92:	65ab      	strlt	r3, [r5, #88]	; 0x58
	if (!conn->llcp_conn_param.cmd) {
    1f94:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1f98:	f013 0308 	ands.w	r3, r3, #8
    1f9c:	f43f ad17 	beq.w	19ce <CONFIG_BT_RX_STACK_SIZE+0x9ce>
	cp->status = rej_ext_ind->error_code;
    1fa0:	7232      	strb	r2, [r6, #8]
	cp->latency = conn->latency;
    1fa2:	8cea      	ldrh	r2, [r5, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1fa4:	230a      	movs	r3, #10
    1fa6:	7133      	strb	r3, [r6, #4]
	cp->interval = conn->conn_interval;
    1fa8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	cp->latency = conn->latency;
    1faa:	81b2      	strh	r2, [r6, #12]
	cp->timeout = conn->supervision_reload *
    1fac:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
	cp->interval = conn->conn_interval;
    1fae:	8173      	strh	r3, [r6, #10]
	cp->timeout = conn->supervision_reload *
    1fb0:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    1fb2:	237d      	movs	r3, #125	; 0x7d
    1fb4:	4353      	muls	r3, r2
    1fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1fba:	fb93 f3f2 	sdiv	r3, r3, r2
	cp->timeout = conn->supervision_reload *
    1fbe:	81f3      	strh	r3, [r6, #14]
		if (!nack) {
    1fc0:	e4b0      	b.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    1fc2:	7a71      	ldrb	r1, [r6, #9]
    1fc4:	2007      	movs	r0, #7
    1fc6:	f015 fc99 	bl	178fc <pdu_len_cmp>
    1fca:	2800      	cmp	r0, #0
    1fcc:	d055      	beq.n	207a <CONFIG_BT_RX_STACK_SIZE+0x107a>
			   _radio.conn_curr->llcp_conn_param.req) {
    1fce:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    1fd2:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    1fd6:	4293      	cmp	r3, r2
    1fd8:	f43f ad46 	beq.w	1a68 <CONFIG_BT_RX_STACK_SIZE+0xa68>
			conn->llcp_conn_param.disabled = 1U;
    1fdc:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1fe0:	f043 0310 	orr.w	r3, r3, #16
    1fe4:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
			if (!conn->role) {
    1fe8:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1fec:	2b00      	cmp	r3, #0
    1fee:	da9d      	bge.n	1f2c <CONFIG_BT_RX_STACK_SIZE+0xf2c>
			LL_ASSERT(_radio.conn_upd == conn);
    1ff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    1ff4:	429d      	cmp	r5, r3
    1ff6:	d1b3      	bne.n	1f60 <CONFIG_BT_RX_STACK_SIZE+0xf60>
			_radio.conn_upd = NULL;
    1ff8:	2300      	movs	r3, #0
    1ffa:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
			if (!conn->llcp_conn_param.cmd) {
    1ffe:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2002:	f885 20a9 	strb.w	r2, [r5, #169]	; 0xa9
			if (!conn->llcp_conn_param.cmd) {
    2006:	f013 0308 	ands.w	r3, r3, #8
    200a:	d04b      	beq.n	20a4 <CONFIG_BT_RX_STACK_SIZE+0x10a4>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    200c:	230a      	movs	r3, #10
    200e:	7133      	strb	r3, [r6, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    2010:	231a      	movs	r3, #26
    2012:	7233      	strb	r3, [r6, #8]
			cp->latency = conn->latency;
    2014:	8cea      	ldrh	r2, [r5, #38]	; 0x26
			cp->interval = conn->conn_interval;
    2016:	8cab      	ldrh	r3, [r5, #36]	; 0x24
			cp->latency = conn->latency;
    2018:	81b2      	strh	r2, [r6, #12]
			cp->timeout = conn->supervision_reload *
    201a:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
			cp->interval = conn->conn_interval;
    201c:	8173      	strh	r3, [r6, #10]
			cp->timeout = conn->supervision_reload *
    201e:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    2020:	237d      	movs	r3, #125	; 0x7d
    2022:	4353      	muls	r3, r2
    2024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2028:	fb93 f3f2 	sdiv	r3, r3, r2
			cp->timeout = conn->supervision_reload *
    202c:	81f3      	strh	r3, [r6, #14]
			*rx_enqueue = 1U;
    202e:	e51b      	b.n	1a68 <CONFIG_BT_RX_STACK_SIZE+0xa68>
				conn->llcp_conn_param.state =
    2030:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    2034:	2205      	movs	r2, #5
    2036:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp.conn_upd.interval =
    203a:	f8b5 20ae 	ldrh.w	r2, [r5, #174]	; 0xae
    203e:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
				conn->llcp.conn_upd.latency =
    2042:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
    2046:	666a      	str	r2, [r5, #100]	; 0x64
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    2048:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
				conn->llcp_conn_param.state =
    204c:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
				conn->llcp.conn_upd.win_size = 1U;
    2050:	2001      	movs	r0, #1
					!conn->llcp_conn_param.cmd;
    2052:	f083 0308 	eor.w	r3, r3, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    2056:	f360 0201 	bfi	r2, r0, #0, #2
					!conn->llcp_conn_param.cmd;
    205a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0U;
    205e:	2700      	movs	r7, #0
				conn->llcp.conn_upd.is_internal =
    2060:	f363 0282 	bfi	r2, r3, #2, #1
				conn->llcp_ack--;
    2064:	3901      	subs	r1, #1
				conn->llcp.conn_upd.win_size = 1U;
    2066:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
				conn->llcp.conn_upd.win_offset_us = 0U;
    206a:	66ef      	str	r7, [r5, #108]	; 0x6c
				conn->llcp.conn_upd.is_internal =
    206c:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
				conn->llcp_type = LLCP_CONN_UPD;
    2070:	f885 005e 	strb.w	r0, [r5, #94]	; 0x5e
				conn->llcp_ack--;
    2074:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
		if (!nack) {
    2078:	e454      	b.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    207a:	4810      	ldr	r0, [pc, #64]	; (20bc <CONFIG_BT_RX_STACK_SIZE+0x10bc>)
    207c:	f01f fd53 	bl	21b26 <mem_acquire>
	if (!node_tx) {
    2080:	4601      	mov	r1, r0
    2082:	2800      	cmp	r0, #0
    2084:	f43f acc3 	beq.w	1a0e <CONFIG_BT_RX_STACK_SIZE+0xa0e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2088:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    208a:	f880 a008 	strb.w	sl, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    208e:	f043 0303 	orr.w	r3, r3, #3
    2092:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    2094:	2302      	movs	r3, #2
    2096:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    2098:	2307      	movs	r3, #7
    209a:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    209c:	4628      	mov	r0, r5
    209e:	f01f ffa8 	bl	21ff2 <ctrl_tx_enqueue>
		if (!nack) {
    20a2:	e494      	b.n	19ce <CONFIG_BT_RX_STACK_SIZE+0x9ce>
	u8_t rx_enqueue = 0U;
    20a4:	461f      	mov	r7, r3
    20a6:	e43d      	b.n	1924 <CONFIG_BT_RX_STACK_SIZE+0x924>
    20a8:	20000d68 	.word	0x20000d68
    20ac:	000233ec 	.word	0x000233ec
    20b0:	0002341c 	.word	0x0002341c
    20b4:	000284c2 	.word	0x000284c2
    20b8:	000284f4 	.word	0x000284f4
    20bc:	20000ebc 	.word	0x20000ebc
		if (_radio.crc_expire == 0) {
    20c0:	f894 1119 	ldrb.w	r1, [r4, #281]	; 0x119
    20c4:	b909      	cbnz	r1, 20ca <CONFIG_BT_RX_STACK_SIZE+0x10ca>
			_radio.crc_expire = 2U;
    20c6:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		_radio.crc_expire--;
    20ca:	f894 5119 	ldrb.w	r5, [r4, #281]	; 0x119
    20ce:	3d01      	subs	r5, #1
    20d0:	b2ed      	uxtb	r5, r5
    20d2:	f884 5119 	strb.w	r5, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    20d6:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    20d8:	fab5 f585 	clz	r5, r5
    20dc:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    20de:	2f00      	cmp	r7, #0
    20e0:	d17f      	bne.n	21e2 <CONFIG_BT_RX_STACK_SIZE+0x11e2>
			_radio.conn_curr->supervision_expire =
    20e2:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    20e4:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    20e6:	46b8      	mov	r8, r7
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    20e8:	4ac2      	ldr	r2, [pc, #776]	; (23f4 <CONFIG_BT_RX_STACK_SIZE+0x13f4>)
    20ea:	f8d2 9114 	ldr.w	r9, [r2, #276]	; 0x114
    20ee:	f899 30d0 	ldrb.w	r3, [r9, #208]	; 0xd0
	if (/* empty packet */
    20f2:	f013 0f80 	tst.w	r3, #128	; 0x80
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    20f6:	ea4f 1bd3 	mov.w	fp, r3, lsr #7
	if (/* empty packet */
    20fa:	4692      	mov	sl, r2
    20fc:	d108      	bne.n	2110 <CONFIG_BT_RX_STACK_SIZE+0x1110>
	    !conn->pkt_tx_head ||
    20fe:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	    conn->empty ||
    2102:	b128      	cbz	r0, 2110 <CONFIG_BT_RX_STACK_SIZE+0x1110>
	    !conn->pkt_tx_head ||
    2104:	0719      	lsls	r1, r3, #28
    2106:	f8d9 c118 	ldr.w	ip, [r9, #280]	; 0x118
    210a:	d56f      	bpl.n	21ec <CONFIG_BT_RX_STACK_SIZE+0x11ec>
	      0) && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    210c:	4584      	cmp	ip, r0
    210e:	d06d      	beq.n	21ec <CONFIG_BT_RX_STACK_SIZE+0x11ec>
	conn->empty = 1U;
    2110:	f899 30d0 	ldrb.w	r3, [r9, #208]	; 0xd0
    2114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2118:	f889 30d0 	strb.w	r3, [r9, #208]	; 0xd0
	pdu_data_tx = (void *)radio_pkt_empty_get();
    211c:	f018 f9d4 	bl	1a4c8 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2120:	7803      	ldrb	r3, [r0, #0]
    2122:	2201      	movs	r2, #1
    2124:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0U;
    2128:	2200      	movs	r2, #0
    212a:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    212c:	f8d9 2114 	ldr.w	r2, [r9, #276]	; 0x114
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2130:	7003      	strb	r3, [r0, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    2132:	4604      	mov	r4, r0
	if (conn->pkt_tx_head) {
    2134:	b2db      	uxtb	r3, r3
    2136:	2a00      	cmp	r2, #0
    2138:	d055      	beq.n	21e6 <CONFIG_BT_RX_STACK_SIZE+0x11e6>
		pdu_data_tx->md = 1U;
    213a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0U;
    213e:	7023      	strb	r3, [r4, #0]
	_pdu_data_tx->rfu = 0U;
    2140:	7823      	ldrb	r3, [r4, #0]
    2142:	f36f 1347 	bfc	r3, #5, #3
    2146:	7023      	strb	r3, [r4, #0]
	_pdu_data_tx->resv = 0U;
    2148:	2300      	movs	r3, #0
    214a:	70a3      	strb	r3, [r4, #2]
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    214c:	4ba9      	ldr	r3, [pc, #676]	; (23f4 <CONFIG_BT_RX_STACK_SIZE+0x13f4>)
			STATE_CLOSE : STATE_TX;
    214e:	7d5a      	ldrb	r2, [r3, #21]
    2150:	2a03      	cmp	r2, #3
    2152:	f000 8082 	beq.w	225a <CONFIG_BT_RX_STACK_SIZE+0x125a>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2156:	2d00      	cmp	r5, #0
    2158:	d17d      	bne.n	2256 <CONFIG_BT_RX_STACK_SIZE+0x1256>
    215a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    215c:	b12a      	cbz	r2, 216a <CONFIG_BT_RX_STACK_SIZE+0x116a>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    215e:	7a32      	ldrb	r2, [r6, #8]
    2160:	06d2      	lsls	r2, r2, #27
    2162:	d402      	bmi.n	216a <CONFIG_BT_RX_STACK_SIZE+0x116a>
    2164:	7862      	ldrb	r2, [r4, #1]
    2166:	2a00      	cmp	r2, #0
    2168:	d075      	beq.n	2256 <CONFIG_BT_RX_STACK_SIZE+0x1256>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    216a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
			  (0))) ||
    216e:	f892 509b 	ldrb.w	r5, [r2, #155]	; 0x9b
    2172:	2d00      	cmp	r5, #0
    2174:	d16f      	bne.n	2256 <CONFIG_BT_RX_STACK_SIZE+0x1256>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2176:	2202      	movs	r2, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    2178:	2096      	movs	r0, #150	; 0x96
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    217a:	755a      	strb	r2, [r3, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    217c:	f018 fa40 	bl	1a600 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    2180:	4628      	mov	r0, r5
    2182:	f018 f9a9 	bl	1a4d8 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    2186:	f018 fb03 	bl	1a790 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    218a:	f8da 5114 	ldr.w	r5, [sl, #276]	; 0x114
    218e:	7823      	ldrb	r3, [r4, #0]
    2190:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
    2194:	f3c2 0200 	ubfx	r2, r2, #0, #1
    2198:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    219c:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
    21a0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    21a4:	f362 0382 	bfi	r3, r2, #2, #1
	radio_phy_set(phy, flags);
    21a8:	2100      	movs	r1, #0
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    21aa:	7023      	strb	r3, [r4, #0]
	radio_phy_set(phy, flags);
    21ac:	4608      	mov	r0, r1
    21ae:	f018 f8af 	bl	1a310 <radio_phy_set>
	if (conn->enc_tx) {
    21b2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    21b6:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    21b8:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    21bc:	d55f      	bpl.n	227e <CONFIG_BT_RX_STACK_SIZE+0x127e>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    21be:	211f      	movs	r1, #31
    21c0:	2008      	movs	r0, #8
    21c2:	f018 f8eb 	bl	1a39c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    21c6:	4621      	mov	r1, r4
    21c8:	f105 00f2 	add.w	r0, r5, #242	; 0xf2
    21cc:	f018 fb28 	bl	1a820 <radio_ccm_tx_pkt_set>
		radio_pkt_tx_set(pdu_data_tx);
    21d0:	f018 f916 	bl	1a400 <radio_pkt_tx_set>
	LL_ASSERT(!radio_is_ready());
    21d4:	f018 f944 	bl	1a460 <radio_is_ready>
    21d8:	2800      	cmp	r0, #0
    21da:	f43f a9e0 	beq.w	159e <CONFIG_BT_RX_STACK_SIZE+0x59e>
    21de:	f7fe be4e 	b.w	e7e <isr+0xa6>
	u8_t rx_enqueue = 0U;
    21e2:	2700      	movs	r7, #0
    21e4:	e77f      	b.n	20e6 <CONFIG_BT_RX_STACK_SIZE+0x10e6>
		pdu_data_tx->md = 0U;
    21e6:	f362 1304 	bfi	r3, r2, #4, #1
    21ea:	e7a8      	b.n	213e <CONFIG_BT_RX_STACK_SIZE+0x113e>
					conn->packet_tx_head_offset);
    21ec:	f899 2129 	ldrb.w	r2, [r9, #297]	; 0x129
		if (!conn->packet_tx_head_len) {
    21f0:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    21f4:	1d01      	adds	r1, r0, #4
    21f6:	188c      	adds	r4, r1, r2
		if (!conn->packet_tx_head_len) {
    21f8:	b913      	cbnz	r3, 2200 <CONFIG_BT_RX_STACK_SIZE+0x1200>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    21fa:	7863      	ldrb	r3, [r4, #1]
    21fc:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
		if (conn->packet_tx_head_offset) {
    2200:	b12a      	cbz	r2, 220e <CONFIG_BT_RX_STACK_SIZE+0x120e>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2202:	5c8b      	ldrb	r3, [r1, r2]
    2204:	f04f 0e01 	mov.w	lr, #1
    2208:	f36e 0301 	bfi	r3, lr, #0, #2
    220c:	548b      	strb	r3, [r1, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    220e:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
    2212:	1a9b      	subs	r3, r3, r2
    2214:	b2db      	uxtb	r3, r3
    2216:	7063      	strb	r3, [r4, #1]
		_pdu_data_tx->md = 0U;
    2218:	f811 e002 	ldrb.w	lr, [r1, r2]
		if (_pdu_data_tx->len > max_tx_octets) {
    221c:	2b1b      	cmp	r3, #27
		_pdu_data_tx->md = 0U;
    221e:	f36f 1e04 	bfc	lr, #4, #1
    2222:	f801 e002 	strb.w	lr, [r1, r2]
		if (_pdu_data_tx->len > max_tx_octets) {
    2226:	d905      	bls.n	2234 <CONFIG_BT_RX_STACK_SIZE+0x1234>
			_pdu_data_tx->len = max_tx_octets;
    2228:	231b      	movs	r3, #27
    222a:	7063      	strb	r3, [r4, #1]
			_pdu_data_tx->md = 1U;
    222c:	5c8b      	ldrb	r3, [r1, r2]
    222e:	f043 0310 	orr.w	r3, r3, #16
    2232:	548b      	strb	r3, [r1, r2]
		if (conn->pkt_tx_head->next) {
    2234:	6803      	ldr	r3, [r0, #0]
    2236:	b11b      	cbz	r3, 2240 <CONFIG_BT_RX_STACK_SIZE+0x1240>
			_pdu_data_tx->md = 1U;
    2238:	5c8b      	ldrb	r3, [r1, r2]
    223a:	f043 0310 	orr.w	r3, r3, #16
    223e:	548b      	strb	r3, [r1, r2]
		if (!conn->pkt_tx_ctrl &&
    2240:	f1bc 0f00 	cmp.w	ip, #0
    2244:	f47f af7c 	bne.w	2140 <CONFIG_BT_RX_STACK_SIZE+0x1140>
    2248:	f8d9 3120 	ldr.w	r3, [r9, #288]	; 0x120
    224c:	4298      	cmp	r0, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    224e:	bf18      	it	ne
    2250:	e9c9 0046 	strdne	r0, r0, [r9, #280]	; 0x118
    2254:	e774      	b.n	2140 <CONFIG_BT_RX_STACK_SIZE+0x1140>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2256:	2203      	movs	r2, #3
    2258:	755a      	strb	r2, [r3, #21]
		if ((_radio.role == ROLE_MASTER) ||
    225a:	7d1a      	ldrb	r2, [r3, #20]
    225c:	2a04      	cmp	r2, #4
    225e:	d10b      	bne.n	2278 <CONFIG_BT_RX_STACK_SIZE+0x1278>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    2260:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    2264:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    2268:	f36b 12c7 	bfi	r2, fp, #7, #1
    226c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			radio_disable();
    2270:	f018 f8d8 	bl	1a424 <radio_disable>
			goto isr_rx_conn_exit;
    2274:	f7ff b993 	b.w	159e <CONFIG_BT_RX_STACK_SIZE+0x59e>
			radio_switch_complete_and_disable();
    2278:	f018 f944 	bl	1a504 <radio_switch_complete_and_disable>
    227c:	e785      	b.n	218a <CONFIG_BT_RX_STACK_SIZE+0x118a>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    227e:	2008      	movs	r0, #8
    2280:	211b      	movs	r1, #27
    2282:	f018 f88b 	bl	1a39c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    2286:	4620      	mov	r0, r4
    2288:	e7a2      	b.n	21d0 <CONFIG_BT_RX_STACK_SIZE+0x11d0>
	switch (_radio.role) {
    228a:	7d23      	ldrb	r3, [r4, #20]
    228c:	2b03      	cmp	r3, #3
    228e:	f200 81ca 	bhi.w	2626 <CONFIG_BT_RX_STACK_SIZE+0x1626>
    2292:	e8df f013 	tbh	[pc, r3, lsl #1]
    2296:	01a6      	.short	0x01a6
    2298:	00510004 	.word	0x00510004
    229c:	0097      	.short	0x0097
	if ((_radio.state == STATE_CLOSE) &&
    229e:	2f03      	cmp	r7, #3
    22a0:	d109      	bne.n	22b6 <CONFIG_BT_RX_STACK_SIZE+0x12b6>
	    (_radio.advertiser.chan_map_current != 0)) {
    22a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    22a6:	075e      	lsls	r6, r3, #29
    22a8:	d005      	beq.n	22b6 <CONFIG_BT_RX_STACK_SIZE+0x12b6>
		adv_setup();
    22aa:	f016 f90d 	bl	184c8 <adv_setup>
		radio_tx_enable();
    22ae:	f018 f8b3 	bl	1a418 <radio_tx_enable>
		radio_tmr_end_capture();
    22b2:	f7fe bdfc 	b.w	eae <isr+0xd6>
		radio_filter_disable();
    22b6:	f018 f971 	bl	1a59c <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    22ba:	7d63      	ldrb	r3, [r4, #21]
    22bc:	2b03      	cmp	r3, #3
    22be:	d163      	bne.n	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
		    (!_radio.advertiser.is_hdcd)) {
    22c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    22c4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    22c8:	d15e      	bne.n	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
			entropy_get_entropy_isr(_radio.entropy,
    22ca:	6860      	ldr	r0, [r4, #4]
					  u16_t length,
					  u32_t flags)
{
	const struct entropy_driver_api *api = dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    22cc:	6842      	ldr	r2, [r0, #4]
    22ce:	6855      	ldr	r5, [r2, #4]
    22d0:	b11d      	cbz	r5, 22da <CONFIG_BT_RX_STACK_SIZE+0x12da>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    22d2:	2202      	movs	r2, #2
    22d4:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
    22d8:	47a8      	blx	r5
			random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    22da:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    22de:	f240 1247 	movw	r2, #327	; 0x147
    22e2:	fbb1 f3f2 	udiv	r3, r1, r2
    22e6:	fb02 1313 	mls	r3, r2, r3, r1
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    22ea:	f241 025f 	movw	r2, #4191	; 0x105f
    22ee:	2100      	movs	r1, #0
    22f0:	9206      	str	r2, [sp, #24]
			random_delay += 1;
    22f2:	3301      	adds	r3, #1
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    22f4:	4a40      	ldr	r2, [pc, #256]	; (23f8 <CONFIG_BT_RX_STACK_SIZE+0x13f8>)
    22f6:	9205      	str	r2, [sp, #20]
			random_delay += 1;
    22f8:	b21b      	sxth	r3, r3
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    22fa:	e9cd 1103 	strd	r1, r1, [sp, #12]
    22fe:	e9cd 1101 	strd	r1, r1, [sp, #4]
    2302:	9100      	str	r1, [sp, #0]
    2304:	2205      	movs	r2, #5
    2306:	4608      	mov	r0, r1
			random_delay += 1;
    2308:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    230c:	f014 f9d0 	bl	166b0 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2310:	f030 0302 	bics.w	r3, r0, #2
    2314:	d038      	beq.n	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
    2316:	7ca3      	ldrb	r3, [r4, #18]
    2318:	2b05      	cmp	r3, #5
    231a:	d035      	beq.n	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
    231c:	2301      	movs	r3, #1
    231e:	f04f 0100 	mov.w	r1, #0
    2322:	f363 0107 	bfi	r1, r3, #0, #8
    2326:	4a35      	ldr	r2, [pc, #212]	; (23fc <CONFIG_BT_RX_STACK_SIZE+0x13fc>)
    2328:	4b35      	ldr	r3, [pc, #212]	; (2400 <CONFIG_BT_RX_STACK_SIZE+0x1400>)
    232a:	4836      	ldr	r0, [pc, #216]	; (2404 <CONFIG_BT_RX_STACK_SIZE+0x1404>)
    232c:	1a9b      	subs	r3, r3, r2
    232e:	08db      	lsrs	r3, r3, #3
    2330:	f363 118f 	bfi	r1, r3, #6, #10
    2334:	f7fe bfee 	b.w	1314 <CONFIG_BT_RX_STACK_SIZE+0x314>
	if (_radio.state == STATE_CLOSE) {
    2338:	2f03      	cmp	r7, #3
    233a:	d119      	bne.n	2370 <CONFIG_BT_RX_STACK_SIZE+0x1370>
		radio_tmr_tifs_set(RADIO_TIFS);
    233c:	2096      	movs	r0, #150	; 0x96
    233e:	f018 f95f 	bl	1a600 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    2342:	2300      	movs	r3, #0
    2344:	4619      	mov	r1, r3
    2346:	461a      	mov	r2, r3
    2348:	4618      	mov	r0, r3
    234a:	f018 f8d1 	bl	1a4f0 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    234e:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    2352:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    2356:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
		radio_pkt_rx_set(_radio.packet_rx
    235a:	3008      	adds	r0, #8
    235c:	f018 f84a 	bl	1a3f4 <radio_pkt_rx_set>
		radio_rssi_measure();
    2360:	f018 f8de 	bl	1a520 <radio_rssi_measure>
		_radio.state = STATE_RX;
    2364:	2301      	movs	r3, #1
    2366:	7563      	strb	r3, [r4, #21]
		radio_rx_enable();
    2368:	f018 f850 	bl	1a40c <radio_rx_enable>
    236c:	f7fe bd9f 	b.w	eae <isr+0xd6>
		radio_filter_disable();
    2370:	f018 f914 	bl	1a59c <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    2374:	7d63      	ldrb	r3, [r4, #21]
    2376:	2b05      	cmp	r3, #5
    2378:	d106      	bne.n	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    237a:	2300      	movs	r3, #0
    237c:	9300      	str	r3, [sp, #0]
    237e:	2204      	movs	r2, #4
    2380:	4619      	mov	r1, r3
    2382:	4618      	mov	r0, r3
    2384:	f014 f9dc 	bl	16740 <ticker_stop>
	_radio.role = ROLE_NONE;
    2388:	2500      	movs	r5, #0
    238a:	7525      	strb	r5, [r4, #20]
	_radio.state = STATE_NONE;
    238c:	7565      	strb	r5, [r4, #21]
	_radio.ticker_id_event = 0U;
    238e:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    2390:	f018 f9ba 	bl	1a708 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    2394:	462a      	mov	r2, r5
    2396:	4629      	mov	r1, r5
    2398:	4628      	mov	r0, r5
    239a:	4b1b      	ldr	r3, [pc, #108]	; (2408 <CONFIG_BT_RX_STACK_SIZE+0x1408>)
    239c:	f013 fc20 	bl	15be0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    23a0:	4605      	mov	r5, r0
    23a2:	2800      	cmp	r0, #0
    23a4:	f000 8133 	beq.w	260e <CONFIG_BT_RX_STACK_SIZE+0x160e>
    23a8:	2301      	movs	r3, #1
    23aa:	f04f 0100 	mov.w	r1, #0
    23ae:	f363 0107 	bfi	r1, r3, #0, #8
    23b2:	4a12      	ldr	r2, [pc, #72]	; (23fc <CONFIG_BT_RX_STACK_SIZE+0x13fc>)
    23b4:	4b12      	ldr	r3, [pc, #72]	; (2400 <CONFIG_BT_RX_STACK_SIZE+0x1400>)
    23b6:	4815      	ldr	r0, [pc, #84]	; (240c <CONFIG_BT_RX_STACK_SIZE+0x140c>)
    23b8:	1a9b      	subs	r3, r3, r2
    23ba:	08db      	lsrs	r3, r3, #3
    23bc:	f363 118f 	bfi	r1, r3, #6, #10
    23c0:	f7fe bfa8 	b.w	1314 <CONFIG_BT_RX_STACK_SIZE+0x314>
	if (_radio.conn_curr == 0) {
    23c4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    23c8:	2800      	cmp	r0, #0
    23ca:	d0dd      	beq.n	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    23cc:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    23d0:	b1f1      	cbz	r1, 2410 <CONFIG_BT_RX_STACK_SIZE+0x1410>
    23d2:	7d23      	ldrb	r3, [r4, #20]
    23d4:	2b03      	cmp	r3, #3
    23d6:	d003      	beq.n	23e0 <CONFIG_BT_RX_STACK_SIZE+0x13e0>
    23d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    23dc:	07dd      	lsls	r5, r3, #31
    23de:	d517      	bpl.n	2410 <CONFIG_BT_RX_STACK_SIZE+0x1410>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    23e0:	f016 f8f8 	bl	185d4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    23e4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    23e8:	f015 ffd6 	bl	18398 <connection_release>
			_radio.conn_curr = NULL;
    23ec:	2300      	movs	r3, #0
    23ee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
			return;
    23f2:	e7c9      	b.n	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
    23f4:	20000d68 	.word	0x20000d68
    23f8:	00017c8d 	.word	0x00017c8d
    23fc:	000233ec 	.word	0x000233ec
    2400:	0002341c 	.word	0x0002341c
    2404:	0002851d 	.word	0x0002851d
    2408:	20007da0 	.word	0x20007da0
    240c:	00028829 	.word	0x00028829
	latency_event = _radio.conn_curr->latency_event;
    2410:	f8b0 902a 	ldrh.w	r9, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    2414:	f894 5118 	ldrb.w	r5, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    2418:	f109 0701 	add.w	r7, r9, #1
    241c:	b2bf      	uxth	r7, r7
	if (_radio.packet_counter &&
    241e:	2d00      	cmp	r5, #0
    2420:	d072      	beq.n	2508 <CONFIG_BT_RX_STACK_SIZE+0x1508>
		if (_radio.role == ROLE_SLAVE) {
    2422:	7d23      	ldrb	r3, [r4, #20]
    2424:	2b03      	cmp	r3, #3
    2426:	d163      	bne.n	24f0 <CONFIG_BT_RX_STACK_SIZE+0x14f0>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    2428:	f018 f9a6 	bl	1a778 <radio_tmr_aa_restore>
    242c:	4683      	mov	fp, r0
						     radio_tmr_ready_get();
    242e:	f018 f9a9 	bl	1a784 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    2432:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    2436:	f8df a230 	ldr.w	sl, [pc, #560]	; 2668 <CONFIG_BT_RX_STACK_SIZE+0x1668>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    243a:	ebab 0100 	sub.w	r1, fp, r0
						     radio_tmr_ready_get();
    243e:	4680      	mov	r8, r0
			window_widening_event_us =
    2440:	6ca8      	ldr	r0, [r5, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    2442:	f100 0358 	add.w	r3, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    2446:	4299      	cmp	r1, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    2448:	930a      	str	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    244a:	a385      	add	r3, pc, #532	; (adr r3, 2660 <CONFIG_BT_RX_STACK_SIZE+0x1660>)
    244c:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    2450:	d840      	bhi.n	24d4 <CONFIG_BT_RX_STACK_SIZE+0x14d4>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    2452:	fba0 010a 	umull	r0, r1, r0, sl
    2456:	f7fd fe93 	bl	180 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    245a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    245c:	4498      	add	r8, r3
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    245e:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    2462:	eba8 000b 	sub.w	r0, r8, fp
    2466:	a37e      	add	r3, pc, #504	; (adr r3, 2660 <CONFIG_BT_RX_STACK_SIZE+0x1660>)
    2468:	e9d3 2300 	ldrd	r2, r3, [r3]
    246c:	fba0 010a 	umull	r0, r1, r0, sl
    2470:	f7fd fe86 	bl	180 <__aeabi_uldivmod>
    2474:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			if (_radio.conn_curr->pkt_tx_head) {
    2478:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
			_radio.conn_curr->slave.window_widening_event_us = 0U;
    247c:	2200      	movs	r2, #0
    247e:	64aa      	str	r2, [r5, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0U;
    2480:	652a      	str	r2, [r5, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    2482:	b379      	cbz	r1, 24e4 <CONFIG_BT_RX_STACK_SIZE+0x14e4>
				if (pdu_data_tx->len ||
    2484:	7949      	ldrb	r1, [r1, #5]
    2486:	b911      	cbnz	r1, 248e <CONFIG_BT_RX_STACK_SIZE+0x148e>
    2488:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
    248c:	b101      	cbz	r1, 2490 <CONFIG_BT_RX_STACK_SIZE+0x1490>
				_radio.conn_curr->latency_event =
    248e:	856a      	strh	r2, [r5, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0U;
    2490:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    2494:	2100      	movs	r1, #0
    2496:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    2498:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    249c:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    249e:	b1ba      	cbz	r2, 24d0 <CONFIG_BT_RX_STACK_SIZE+0x14d0>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    24a0:	4297      	cmp	r7, r2
    24a2:	f080 8096 	bcs.w	25d2 <CONFIG_BT_RX_STACK_SIZE+0x15d2>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    24a6:	1bd2      	subs	r2, r2, r7
    24a8:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0U;
    24aa:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    24ac:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    24ae:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0U;
    24b0:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    24b2:	f240 8090 	bls.w	25d6 <CONFIG_BT_RX_STACK_SIZE+0x15d6>
			else if (_radio.role == ROLE_SLAVE) {
    24b6:	7d22      	ldrb	r2, [r4, #20]
    24b8:	2a03      	cmp	r2, #3
    24ba:	d109      	bne.n	24d0 <CONFIG_BT_RX_STACK_SIZE+0x14d0>
				if (latency_event != 0) {
    24bc:	f1b9 0f00 	cmp.w	r9, #0
    24c0:	f040 8089 	bne.w	25d6 <CONFIG_BT_RX_STACK_SIZE+0x15d6>
					force = _radio.conn_curr->slave.force & 0x01;
    24c4:	6d41      	ldr	r1, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    24c6:	084a      	lsrs	r2, r1, #1
					if (force) {
    24c8:	f011 0101 	ands.w	r1, r1, #1
    24cc:	d136      	bne.n	253c <CONFIG_BT_RX_STACK_SIZE+0x153c>
					_radio.conn_curr->slave.force >>= 1;
    24ce:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0U;
    24d0:	2100      	movs	r1, #0
    24d2:	e036      	b.n	2542 <CONFIG_BT_RX_STACK_SIZE+0x1542>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    24d4:	fba1 010a 	umull	r0, r1, r1, sl
    24d8:	f7fd fe52 	bl	180 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    24dc:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    24de:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    24e2:	e7c9      	b.n	2478 <CONFIG_BT_RX_STACK_SIZE+0x1478>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    24e4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    24e8:	07d2      	lsls	r2, r2, #31
    24ea:	d5d1      	bpl.n	2490 <CONFIG_BT_RX_STACK_SIZE+0x1490>
				_radio.conn_curr->latency_event =
    24ec:	8cea      	ldrh	r2, [r5, #38]	; 0x26
    24ee:	e7ce      	b.n	248e <CONFIG_BT_RX_STACK_SIZE+0x148e>
		} else if (reason_peer) {
    24f0:	b141      	cbz	r1, 2504 <CONFIG_BT_RX_STACK_SIZE+0x1504>
			_radio.conn_curr->master.terminate_ack = 1U;
    24f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    24f6:	f043 0301 	orr.w	r3, r3, #1
    24fa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0U;
    24fe:	2300      	movs	r3, #0
	ticks_drift_plus = 0U;
    2500:	461e      	mov	r6, r3
    2502:	e7c5      	b.n	2490 <CONFIG_BT_RX_STACK_SIZE+0x1490>
	ticks_drift_minus = 0U;
    2504:	460b      	mov	r3, r1
    2506:	e7fb      	b.n	2500 <CONFIG_BT_RX_STACK_SIZE+0x1500>
	else if (_radio.conn_curr->connect_expire) {
    2508:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    250a:	b183      	cbz	r3, 252e <CONFIG_BT_RX_STACK_SIZE+0x152e>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    250c:	429f      	cmp	r7, r3
    250e:	d204      	bcs.n	251a <CONFIG_BT_RX_STACK_SIZE+0x151a>
			_radio.conn_curr->connect_expire -= elapsed_event;
    2510:	1bdb      	subs	r3, r3, r7
    2512:	8583      	strh	r3, [r0, #44]	; 0x2c
	ticks_drift_minus = 0U;
    2514:	462b      	mov	r3, r5
	ticks_drift_plus = 0U;
    2516:	461e      	mov	r6, r3
    2518:	e7be      	b.n	2498 <CONFIG_BT_RX_STACK_SIZE+0x1498>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    251a:	213e      	movs	r1, #62	; 0x3e
    251c:	f016 f85a 	bl	185d4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    2520:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2524:	f015 ff38 	bl	18398 <connection_release>
			_radio.conn_curr = NULL;
    2528:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
			return;
    252c:	e72c      	b.n	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
		if (!_radio.conn_curr->supervision_expire) {
    252e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    2530:	2900      	cmp	r1, #0
    2532:	d1f0      	bne.n	2516 <CONFIG_BT_RX_STACK_SIZE+0x1516>
			_radio.conn_curr->supervision_expire =
    2534:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    2536:	8603      	strh	r3, [r0, #48]	; 0x30
	ticks_drift_minus = 0U;
    2538:	460b      	mov	r3, r1
    253a:	e7ec      	b.n	2516 <CONFIG_BT_RX_STACK_SIZE+0x1516>
						_radio.conn_curr->slave.force |=
    253c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    2540:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    2542:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    2544:	b11a      	cbz	r2, 254e <CONFIG_BT_RX_STACK_SIZE+0x154e>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    2546:	4297      	cmp	r7, r2
    2548:	d247      	bcs.n	25da <CONFIG_BT_RX_STACK_SIZE+0x15da>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    254a:	1bd7      	subs	r7, r2, r7
    254c:	8687      	strh	r7, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    254e:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
    2552:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    2556:	4295      	cmp	r5, r2
    2558:	d006      	beq.n	2568 <CONFIG_BT_RX_STACK_SIZE+0x1568>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    255a:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    255e:	3a01      	subs	r2, #1
    2560:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0U;
    2562:	bf9c      	itt	ls
    2564:	2200      	movls	r2, #0
    2566:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    2568:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
    256a:	b909      	cbnz	r1, 2570 <CONFIG_BT_RX_STACK_SIZE+0x1570>
    256c:	454d      	cmp	r5, r9
    256e:	d036      	beq.n	25de <CONFIG_BT_RX_STACK_SIZE+0x15de>
		lazy = _radio.conn_curr->latency_event + 1;
    2570:	3501      	adds	r5, #1
    2572:	b2ad      	uxth	r5, r5
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    2574:	ea56 0203 	orrs.w	r2, r6, r3
    2578:	d103      	bne.n	2582 <CONFIG_BT_RX_STACK_SIZE+0x1582>
    257a:	b915      	cbnz	r5, 2582 <CONFIG_BT_RX_STACK_SIZE+0x1582>
	    (lazy != 0) || (force != 0)) {
    257c:	2900      	cmp	r1, #0
    257e:	f43f af03 	beq.w	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    2582:	f890 2020 	ldrb.w	r2, [r0, #32]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2586:	9300      	str	r3, [sp, #0]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    2588:	3207      	adds	r2, #7
    258a:	b2d7      	uxtb	r7, r2
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    258c:	4a2e      	ldr	r2, [pc, #184]	; (2648 <CONFIG_BT_RX_STACK_SIZE+0x1648>)
				      (void *)(u32_t)ticker_id);
    258e:	9706      	str	r7, [sp, #24]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2590:	e9cd 1204 	strd	r1, r2, [sp, #16]
    2594:	2100      	movs	r1, #0
    2596:	4633      	mov	r3, r6
    2598:	9503      	str	r5, [sp, #12]
    259a:	e9cd 1101 	strd	r1, r1, [sp, #4]
    259e:	463a      	mov	r2, r7
    25a0:	4608      	mov	r0, r1
    25a2:	f014 f885 	bl	166b0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    25a6:	f030 0302 	bics.w	r3, r0, #2
    25aa:	f43f aeed 	beq.w	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
    25ae:	7ca3      	ldrb	r3, [r4, #18]
    25b0:	429f      	cmp	r7, r3
    25b2:	f43f aee9 	beq.w	2388 <CONFIG_BT_RX_STACK_SIZE+0x1388>
    25b6:	2301      	movs	r3, #1
    25b8:	f04f 0100 	mov.w	r1, #0
    25bc:	f363 0107 	bfi	r1, r3, #0, #8
    25c0:	4a22      	ldr	r2, [pc, #136]	; (264c <CONFIG_BT_RX_STACK_SIZE+0x164c>)
    25c2:	4b23      	ldr	r3, [pc, #140]	; (2650 <CONFIG_BT_RX_STACK_SIZE+0x1650>)
    25c4:	4823      	ldr	r0, [pc, #140]	; (2654 <CONFIG_BT_RX_STACK_SIZE+0x1654>)
    25c6:	1a9b      	subs	r3, r3, r2
    25c8:	08db      	lsrs	r3, r3, #3
    25ca:	f363 118f 	bfi	r1, r3, #6, #10
    25ce:	f7fe bea1 	b.w	1314 <CONFIG_BT_RX_STACK_SIZE+0x314>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    25d2:	2108      	movs	r1, #8
    25d4:	e704      	b.n	23e0 <CONFIG_BT_RX_STACK_SIZE+0x13e0>
				force = 1U;
    25d6:	2101      	movs	r1, #1
    25d8:	e7b3      	b.n	2542 <CONFIG_BT_RX_STACK_SIZE+0x1542>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    25da:	2122      	movs	r1, #34	; 0x22
    25dc:	e700      	b.n	23e0 <CONFIG_BT_RX_STACK_SIZE+0x13e0>
	lazy = 0U;
    25de:	460d      	mov	r5, r1
    25e0:	e7c8      	b.n	2574 <CONFIG_BT_RX_STACK_SIZE+0x1574>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    25e2:	3f04      	subs	r7, #4
    25e4:	b2ff      	uxtb	r7, r7
    25e6:	2f01      	cmp	r7, #1
    25e8:	d90d      	bls.n	2606 <CONFIG_BT_RX_STACK_SIZE+0x1606>
    25ea:	2301      	movs	r3, #1
    25ec:	f04f 0100 	mov.w	r1, #0
    25f0:	f363 0107 	bfi	r1, r3, #0, #8
    25f4:	4a15      	ldr	r2, [pc, #84]	; (264c <CONFIG_BT_RX_STACK_SIZE+0x164c>)
    25f6:	4b16      	ldr	r3, [pc, #88]	; (2650 <CONFIG_BT_RX_STACK_SIZE+0x1650>)
    25f8:	4817      	ldr	r0, [pc, #92]	; (2658 <CONFIG_BT_RX_STACK_SIZE+0x1658>)
    25fa:	1a9b      	subs	r3, r3, r2
    25fc:	08db      	lsrs	r3, r3, #3
    25fe:	f363 118f 	bfi	r1, r3, #6, #10
    2602:	f7fe be87 	b.w	1314 <CONFIG_BT_RX_STACK_SIZE+0x314>
		_radio.state = STATE_NONE;
    2606:	2300      	movs	r3, #0
    2608:	7563      	strb	r3, [r4, #21]
		return;
    260a:	f7fe bc74 	b.w	ef6 <isr+0x11e>
	clock_control_off(_radio.hf_clock, NULL);
    260e:	6820      	ldr	r0, [r4, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    2610:	6843      	ldr	r3, [r0, #4]
    2612:	4629      	mov	r1, r5
    2614:	685b      	ldr	r3, [r3, #4]
    2616:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    2618:	2201      	movs	r2, #1
    261a:	4611      	mov	r1, r2
    261c:	4628      	mov	r0, r5
    261e:	f013 fab7 	bl	15b90 <mayfly_enable>
    2622:	f7fe bc68 	b.w	ef6 <isr+0x11e>
		LL_ASSERT(0);
    2626:	2301      	movs	r3, #1
    2628:	f04f 0100 	mov.w	r1, #0
    262c:	f363 0107 	bfi	r1, r3, #0, #8
    2630:	4a06      	ldr	r2, [pc, #24]	; (264c <CONFIG_BT_RX_STACK_SIZE+0x164c>)
    2632:	4b07      	ldr	r3, [pc, #28]	; (2650 <CONFIG_BT_RX_STACK_SIZE+0x1650>)
    2634:	4809      	ldr	r0, [pc, #36]	; (265c <CONFIG_BT_RX_STACK_SIZE+0x165c>)
    2636:	1a9b      	subs	r3, r3, r2
    2638:	08db      	lsrs	r3, r3, #3
    263a:	f363 118f 	bfi	r1, r3, #6, #10
    263e:	f7fe be69 	b.w	1314 <CONFIG_BT_RX_STACK_SIZE+0x314>
    2642:	bf00      	nop
    2644:	f3af 8000 	nop.w
    2648:	00017cd5 	.word	0x00017cd5
    264c:	000233ec 	.word	0x000233ec
    2650:	0002341c 	.word	0x0002341c
    2654:	0002857b 	.word	0x0002857b
    2658:	000285e1 	.word	0x000285e1
    265c:	0002822a 	.word	0x0002822a
    2660:	1afd498d 	.word	0x1afd498d
    2664:	00000007 	.word	0x00000007
    2668:	3b9aca00 	.word	0x3b9aca00
    266c:	00000000 	.word	0x00000000

00002670 <radio_adv_enable>:
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    2670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_adv *pdu_adv;
	u32_t slot_us;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    2674:	4fa0      	ldr	r7, [pc, #640]	; (28f8 <radio_adv_enable+0x288>)
{
    2676:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    2678:	2302      	movs	r3, #2
    267a:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    267c:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
{
    2680:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    2684:	2b00      	cmp	r3, #0
{
    2686:	4680      	mov	r8, r0
    2688:	4692      	mov	sl, r2
    268a:	463e      	mov	r6, r7
	if (_radio.advertiser.is_enabled) {
    268c:	da01      	bge.n	2692 <radio_adv_enable+0x22>
			    &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
    268e:	250c      	movs	r5, #12
    2690:	e023      	b.n	26da <radio_adv_enable+0x6a>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    2692:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
    2696:	232a      	movs	r3, #42	; 0x2a
    2698:	f04f 0927 	mov.w	r9, #39	; 0x27
    269c:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    26a0:	f817 3009 	ldrb.w	r3, [r7, r9]
    26a4:	f013 0f0e 	tst.w	r3, #14
    26a8:	f040 80e2 	bne.w	2870 <radio_adv_enable+0x200>
		if (_radio.advertiser.conn) {
    26ac:	f8d7 50cc 	ldr.w	r5, [r7, #204]	; 0xcc
    26b0:	2d00      	cmp	r5, #0
    26b2:	d1ec      	bne.n	268e <radio_adv_enable+0x1e>
		conn = mem_acquire(&_radio.conn_free);
    26b4:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    26b8:	f01f fa35 	bl	21b26 <mem_acquire>
		if (!conn) {
    26bc:	4604      	mov	r4, r0
    26be:	2800      	cmp	r0, #0
    26c0:	f000 8114 	beq.w	28ec <radio_adv_enable+0x27c>
		link = mem_acquire(&_radio.link_rx_free);
    26c4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
    26c8:	f01f fa2d 	bl	21b26 <mem_acquire>
		if (!link) {
    26cc:	b948      	cbnz	r0, 26e2 <radio_adv_enable+0x72>
			mem_release(conn, &_radio.conn_free);
    26ce:	f507 7186 	add.w	r1, r7, #268	; 0x10c
    26d2:	4620      	mov	r0, r4
    26d4:	f01f fa40 	bl	21b58 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    26d8:	2507      	movs	r5, #7
}
    26da:	4628      	mov	r0, r5
    26dc:	b00f      	add	sp, #60	; 0x3c
    26de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->handle = 0xFFFF;
    26e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    26e6:	6223      	str	r3, [r4, #32]
		conn->data_chan_sel = 0U;
    26e8:	7f63      	ldrb	r3, [r4, #29]
		conn->data_chan_use = 0U;
    26ea:	77e5      	strb	r5, [r4, #31]
		conn->data_chan_sel = 0U;
    26ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    26f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    26f4:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6U;
    26f6:	2306      	movs	r3, #6
    26f8:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->slave.latency_enabled = 0U;
    26fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		conn->latency_prepare = 0U;
    26fe:	62a5      	str	r5, [r4, #40]	; 0x28
		conn->slave.latency_enabled = 0U;
    2700:	f023 0323 	bic.w	r3, r3, #35	; 0x23
    2704:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		conn->llcp_features = LL_FEAT;
    2708:	f44f 73c7 	mov.w	r3, #398	; 0x18e
    270c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		conn->llcp_version.tx = 0U;
    2710:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
		conn->supervision_expire = 0U;
    2714:	8625      	strh	r5, [r4, #48]	; 0x30
		conn->llcp_version.tx = 0U;
    2716:	f023 0303 	bic.w	r3, r3, #3
    271a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		conn->llcp_conn_param.disabled = 0U;
    271e:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		conn->procedure_expire = 0U;
    2722:	86a5      	strh	r5, [r4, #52]	; 0x34
		conn->llcp_conn_param.disabled = 0U;
    2724:	f365 1304 	bfi	r3, r5, #4, #1
		conn->slave.window_widening_event_us = 0U;
    2728:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
		conn->slave.ticks_to_offset = 0U;
    272c:	65a5      	str	r5, [r4, #88]	; 0x58
		conn->llcp_req = 0U;
    272e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
		conn->llcp_terminate.req = 0U;
    2732:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
		conn->llcp_terminate.reason_peer = 0U;
    2736:	f884 509b 	strb.w	r5, [r4, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.link = link;
    273a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
		conn->llcp_conn_param.req = 0U;
    273e:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0U;
    2742:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		conn->sn = 0U;
    2746:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
		conn->pkt_tx_ctrl = NULL;
    274a:	e9c4 5545 	strd	r5, r5, [r4, #276]	; 0x114
		conn->pkt_tx_data = NULL;
    274e:	e9c4 5547 	strd	r5, r5, [r4, #284]	; 0x11c
		conn->pkt_tx_last = NULL;
    2752:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
		conn->packet_tx_head_len = 0U;
    2756:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128
		k32src_wait();
    275a:	f016 fdfb 	bl	19354 <k32src_wait>
		_radio.advertiser.conn = conn;
    275e:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    2762:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    2766:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    276a:	f362 0302 	bfi	r3, r2, #0, #3
	_radio.advertiser.filter_policy = filter_policy;
    276e:	f36a 03c4 	bfi	r3, sl, #3, #2
    2772:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    2776:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    277a:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    277c:	2327      	movs	r3, #39	; 0x27
    277e:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    2780:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    2782:	2300      	movs	r3, #0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    2784:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
	_radio.advertiser.hdr.ticks_preempt_to_start =
    2788:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    278a:	f01f fa32 	bl	21bf2 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    278e:	f817 3009 	ldrb.w	r3, [r7, r9]
    2792:	f003 030f 	and.w	r3, r3, #15
    2796:	2b01      	cmp	r3, #1
    2798:	d16c      	bne.n	2874 <radio_adv_enable+0x204>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    279a:	f44f 7327 	mov.w	r3, #668	; 0x29c
    279e:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    27a0:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    27a4:	4955      	ldr	r1, [pc, #340]	; (28fc <radio_adv_enable+0x28c>)
    27a6:	a352      	add	r3, pc, #328	; (adr r3, 28f0 <radio_adv_enable+0x280>)
    27a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    27ac:	fba0 0101 	umull	r0, r1, r0, r1
    27b0:	f7fd fce6 	bl	180 <__aeabi_uldivmod>
	ticks_slot_offset =
    27b4:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
    27b8:	429a      	cmp	r2, r3
    27ba:	bf38      	it	cc
    27bc:	461a      	movcc	r2, r3
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    27be:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    27c0:	4693      	mov	fp, r2
	ticks_anchor = ticker_ticks_now_get();
    27c2:	f01f fad0 	bl	21d66 <ticker_ticks_now_get>
    27c6:	4682      	mov	sl, r0
	_radio.advertiser.is_hdcd = !interval &&
    27c8:	f1b8 0f00 	cmp.w	r8, #0
    27cc:	d15a      	bne.n	2884 <radio_adv_enable+0x214>
				    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    27ce:	f817 3009 	ldrb.w	r3, [r7, r9]
	_radio.advertiser.is_hdcd = !interval &&
    27d2:	f003 030f 	and.w	r3, r3, #15
    27d6:	1e5a      	subs	r2, r3, #1
    27d8:	4253      	negs	r3, r2
    27da:	4153      	adcs	r3, r2
    27dc:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
    27e0:	4f47      	ldr	r7, [pc, #284]	; (2900 <radio_adv_enable+0x290>)
    27e2:	4a48      	ldr	r2, [pc, #288]	; (2904 <radio_adv_enable+0x294>)
    27e4:	f363 1586 	bfi	r5, r3, #6, #1
    27e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    27ea:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    27ee:	f10d 0934 	add.w	r9, sp, #52	; 0x34
    27f2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    27f6:	445b      	add	r3, fp
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    27f8:	e9cd 7907 	strd	r7, r9, [sp, #28]
	if (_radio.advertiser.is_hdcd) {
    27fc:	d04a      	beq.n	2894 <radio_adv_enable+0x224>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    27fe:	2000      	movs	r0, #0
    2800:	e9cd 2005 	strd	r2, r0, [sp, #20]
    2804:	e9cd 0303 	strd	r0, r3, [sp, #12]
    2808:	e9cd 3001 	strd	r3, r0, [sp, #4]
    280c:	9000      	str	r0, [sp, #0]
    280e:	4653      	mov	r3, sl
    2810:	2205      	movs	r2, #5
    2812:	2103      	movs	r1, #3
    2814:	f013 ff02 	bl	1661c <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    2818:	2802      	cmp	r0, #2
    281a:	d037      	beq.n	288c <radio_adv_enable+0x21c>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    281c:	980d      	ldr	r0, [sp, #52]	; 0x34
    281e:	2800      	cmp	r0, #0
    2820:	d157      	bne.n	28d2 <radio_adv_enable+0x262>
		ret_cb = TICKER_STATUS_BUSY;
    2822:	2302      	movs	r3, #2
    2824:	930d      	str	r3, [sp, #52]	; 0x34
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2826:	4b38      	ldr	r3, [pc, #224]	; (2908 <radio_adv_enable+0x298>)
    2828:	9006      	str	r0, [sp, #24]
    282a:	e9cd 7907 	strd	r7, r9, [sp, #28]
    282e:	e9cd 0002 	strd	r0, r0, [sp, #8]
    2832:	e9cd 0304 	strd	r0, r3, [sp, #16]
    2836:	2203      	movs	r2, #3
    2838:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    283c:	9300      	str	r3, [sp, #0]
    283e:	9001      	str	r0, [sp, #4]
    2840:	4653      	mov	r3, sl
    2842:	4611      	mov	r1, r2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2844:	f013 feea 	bl	1661c <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    2848:	2802      	cmp	r0, #2
    284a:	d03e      	beq.n	28ca <radio_adv_enable+0x25a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    284c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    284e:	2d00      	cmp	r5, #0
    2850:	d13f      	bne.n	28d2 <radio_adv_enable+0x262>
		_radio.advertiser.is_enabled = 1U;
    2852:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    2856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    285a:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    285e:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    2862:	07db      	lsls	r3, r3, #31
    2864:	f53f af39 	bmi.w	26da <radio_adv_enable+0x6a>
			ll_adv_scan_state_cb(BIT(0));
    2868:	2001      	movs	r0, #1
    286a:	f01f fce4 	bl	22236 <ll_adv_scan_state_cb>
    286e:	e734      	b.n	26da <radio_adv_enable+0x6a>
		conn = NULL;
    2870:	2400      	movs	r4, #0
    2872:	e776      	b.n	2762 <radio_adv_enable+0xf2>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    2874:	2b02      	cmp	r3, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    2876:	bf0c      	ite	eq
    2878:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    287c:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    2880:	4358      	muls	r0, r3
    2882:	e78f      	b.n	27a4 <radio_adv_enable+0x134>
	_radio.advertiser.is_hdcd = !interval &&
    2884:	2300      	movs	r3, #0
    2886:	e7a9      	b.n	27dc <radio_adv_enable+0x16c>
				cpu_sleep();
    2888:	f01f faf3 	bl	21e72 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    288c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    288e:	2b02      	cmp	r3, #2
    2890:	d0fa      	beq.n	2888 <radio_adv_enable+0x218>
    2892:	e7c3      	b.n	281c <radio_adv_enable+0x1ac>
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    2894:	481d      	ldr	r0, [pc, #116]	; (290c <radio_adv_enable+0x29c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2896:	9502      	str	r5, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    2898:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    289c:	e9cd 5303 	strd	r5, r3, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    28a0:	fba8 0100 	umull	r0, r1, r8, r0
    28a4:	2391      	movs	r3, #145	; 0x91
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    28a6:	e9cd 2505 	strd	r2, r5, [sp, #20]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    28aa:	fb03 1108 	mla	r1, r3, r8, r1
    28ae:	a310      	add	r3, pc, #64	; (adr r3, 28f0 <radio_adv_enable+0x280>)
    28b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    28b4:	f7fd fc64 	bl	180 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    28b8:	4653      	mov	r3, sl
    28ba:	e9cd 5000 	strd	r5, r0, [sp]
    28be:	2205      	movs	r2, #5
    28c0:	2103      	movs	r1, #3
    28c2:	4628      	mov	r0, r5
    28c4:	e7be      	b.n	2844 <radio_adv_enable+0x1d4>
			cpu_sleep();
    28c6:	f01f fad4 	bl	21e72 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    28ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    28cc:	2b02      	cmp	r3, #2
    28ce:	d0fa      	beq.n	28c6 <radio_adv_enable+0x256>
    28d0:	e7bc      	b.n	284c <radio_adv_enable+0x1dc>
	if (conn) {
    28d2:	2c00      	cmp	r4, #0
    28d4:	f43f aedb 	beq.w	268e <radio_adv_enable+0x1e>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.link,
    28d8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    28dc:	490c      	ldr	r1, [pc, #48]	; (2910 <radio_adv_enable+0x2a0>)
    28de:	f01f f93b 	bl	21b58 <mem_release>
		mem_release(conn, &_radio.conn_free);
    28e2:	490c      	ldr	r1, [pc, #48]	; (2914 <radio_adv_enable+0x2a4>)
    28e4:	4620      	mov	r0, r4
    28e6:	f01f f937 	bl	21b58 <mem_release>
    28ea:	e6d0      	b.n	268e <radio_adv_enable+0x1e>
			return BT_HCI_ERR_CONN_LIMIT_EXCEEDED;
    28ec:	2509      	movs	r5, #9
    28ee:	e6f4      	b.n	26da <radio_adv_enable+0x6a>
    28f0:	1afd498d 	.word	0x1afd498d
    28f4:	00000007 	.word	0x00000007
    28f8:	20000d68 	.word	0x20000d68
    28fc:	3b9aca00 	.word	0x3b9aca00
    2900:	00021e7b 	.word	0x00021e7b
    2904:	00019135 	.word	0x00019135
    2908:	000191a5 	.word	0x000191a5
    290c:	84e72a00 	.word	0x84e72a00
    2910:	20000ea8 	.word	0x20000ea8
    2914:	20000e74 	.word	0x20000e74

00002918 <radio_scan_enable>:
}

u32_t radio_scan_enable(u8_t type, u8_t init_addr_type, u8_t *init_addr,
			u16_t interval, u16_t window, u8_t filter_policy,
			u8_t rpa_gen, u8_t rl_idx)
{
    2918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ticks_interval;
	u32_t ticks_anchor;
	u32_t us_offset;
	u32_t ret;

	if (_radio.scanner.is_enabled) {
    291c:	4c50      	ldr	r4, [pc, #320]	; (2a60 <radio_scan_enable+0x148>)
    291e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
    2922:	b08c      	sub	sp, #48	; 0x30
    2924:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
    2926:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    292a:	f04f 0302 	mov.w	r3, #2
{
    292e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    2930:	930b      	str	r3, [sp, #44]	; 0x2c
{
    2932:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    2934:	d004      	beq.n	2940 <radio_scan_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
    2936:	250c      	movs	r5, #12
	if (!_radio.advertiser.is_enabled) {
		ll_adv_scan_state_cb(BIT(1));
	}

	return 0;
}
    2938:	4628      	mov	r0, r5
    293a:	b00c      	add	sp, #48	; 0x30
    293c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    2940:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    2944:	f360 0300 	bfi	r3, r0, #0, #1
	_radio.scanner.init_addr_type = init_addr_type;
    2948:	f366 1304 	bfi	r3, r6, #4, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    294c:	2206      	movs	r2, #6
    294e:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
	_radio.scanner.init_addr_type = init_addr_type;
    2952:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    2956:	4e43      	ldr	r6, [pc, #268]	; (2a64 <radio_scan_enable+0x14c>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    2958:	f01c fe56 	bl	1f608 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    295c:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
    2960:	f04f 0a91 	mov.w	sl, #145	; 0x91
    2964:	fba2 0106 	umull	r0, r1, r2, r6
    2968:	fb0a 1102 	mla	r1, sl, r2, r1
    296c:	a33a      	add	r3, pc, #232	; (adr r3, 2a58 <radio_scan_enable+0x140>)
    296e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2972:	f7fd fc05 	bl	180 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    2976:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    297a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
		_radio.ticks_active_to_start;
    297e:	f8d4 917c 	ldr.w	r9, [r4, #380]	; 0x17c
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    2982:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
    2986:	f362 0342 	bfi	r3, r2, #1, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    298a:	b2ba      	uxth	r2, r7
    298c:	fba2 6706 	umull	r6, r7, r2, r6
    2990:	fb0a 7702 	mla	r7, sl, r2, r7
	_radio.scanner.filter_policy = filter_policy;
    2994:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
    2998:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
    299a:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_xtal_to_start =
    299e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_active_to_start =
    29a2:	f8c4 90d4 	str.w	r9, [r4, #212]	; 0xd4
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    29a6:	a32c      	add	r3, pc, #176	; (adr r3, 2a58 <radio_scan_enable+0x140>)
    29a8:	e9d3 2300 	ldrd	r2, r3, [r3]
	_radio.scanner.hdr.ticks_preempt_to_start =
    29ac:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    29b0:	4630      	mov	r0, r6
    29b2:	4639      	mov	r1, r7
    29b4:	f7fd fbe4 	bl	180 <__aeabi_uldivmod>
	    (ticks_interval -
    29b8:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
    29bc:	4598      	cmp	r8, r3
    29be:	bf94      	ite	ls
    29c0:	f8c4 80dc 	strls.w	r8, [r4, #220]	; 0xdc
    29c4:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    29c8:	4682      	mov	sl, r0
	ticks_anchor = ticker_ticks_now_get();
    29ca:	f01f f9cc 	bl	21d66 <ticker_ticks_now_get>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    29ce:	ab0b      	add	r3, sp, #44	; 0x2c
    29d0:	9308      	str	r3, [sp, #32]
    29d2:	4b25      	ldr	r3, [pc, #148]	; (2a68 <radio_scan_enable+0x150>)
    29d4:	e9cd 5306 	strd	r5, r3, [sp, #24]
    29d8:	4b24      	ldr	r3, [pc, #144]	; (2a6c <radio_scan_enable+0x154>)
    29da:	9305      	str	r3, [sp, #20]
    29dc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    29e0:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    29e4:	bf2c      	ite	cs
    29e6:	444b      	addcs	r3, r9
    29e8:	3327      	addcc	r3, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
    29ea:	4680      	mov	r8, r0
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    29ec:	e9cd 5303 	strd	r5, r3, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    29f0:	4630      	mov	r0, r6
    29f2:	a319      	add	r3, pc, #100	; (adr r3, 2a58 <radio_scan_enable+0x140>)
    29f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    29f8:	4639      	mov	r1, r7
    29fa:	f7fd fbc1 	bl	180 <__aeabi_uldivmod>
    29fe:	4610      	mov	r0, r2
    2a00:	4619      	mov	r1, r3
    2a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a06:	2300      	movs	r3, #0
    2a08:	f7fd fbba 	bl	180 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2a0c:	9500      	str	r5, [sp, #0]
    2a0e:	e9cd a001 	strd	sl, r0, [sp, #4]
    2a12:	4643      	mov	r3, r8
    2a14:	2206      	movs	r2, #6
    2a16:	2103      	movs	r1, #3
    2a18:	4628      	mov	r0, r5
    2a1a:	f013 fdff 	bl	1661c <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    2a1e:	2802      	cmp	r0, #2
    2a20:	d013      	beq.n	2a4a <radio_scan_enable+0x132>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    2a22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2a24:	2d00      	cmp	r5, #0
    2a26:	d186      	bne.n	2936 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1U;
    2a28:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    2a2c:	f043 0301 	orr.w	r3, r3, #1
    2a30:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
    2a34:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    2a38:	2b00      	cmp	r3, #0
    2a3a:	f6ff af7d 	blt.w	2938 <radio_scan_enable+0x20>
		ll_adv_scan_state_cb(BIT(1));
    2a3e:	2002      	movs	r0, #2
    2a40:	f01f fbf9 	bl	22236 <ll_adv_scan_state_cb>
    2a44:	e778      	b.n	2938 <radio_scan_enable+0x20>
			cpu_sleep();
    2a46:	f01f fa14 	bl	21e72 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    2a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a4c:	2b02      	cmp	r3, #2
    2a4e:	d0fa      	beq.n	2a46 <radio_scan_enable+0x12e>
    2a50:	e7e7      	b.n	2a22 <radio_scan_enable+0x10a>
    2a52:	bf00      	nop
    2a54:	f3af 8000 	nop.w
    2a58:	1afd498d 	.word	0x1afd498d
    2a5c:	00000007 	.word	0x00000007
    2a60:	20000d68 	.word	0x20000d68
    2a64:	84e72a00 	.word	0x84e72a00
    2a68:	00021e7b 	.word	0x00021e7b
    2a6c:	0001916d 	.word	0x0001916d

00002a70 <erase_op>:
}

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
    2a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    2a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
    2a78:	4e25      	ldr	r6, [pc, #148]	; (2b10 <erase_op+0xa0>)
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 0U;

	if (e_ctx->enable_time_limit) {
    2a7a:	7b05      	ldrb	r5, [r0, #12]
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
    2a7c:	f8d6 9504 	ldr.w	r9, [r6, #1284]	; 0x504
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    2a80:	f8d2 8010 	ldr.w	r8, [r2, #16]
{
    2a84:	4604      	mov	r4, r0
	if (e_ctx->enable_time_limit) {
    2a86:	b115      	cbz	r5, 2a8e <erase_op+0x1e>
		ticks_begin = ticker_ticks_now_get();
    2a88:	f01f f96d 	bl	21d66 <ticker_ticks_now_get>
    2a8c:	4605      	mov	r5, r0
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* Erase uses a specific configuration register */
	NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een << NVMC_CONFIG_WEN_Pos;
    2a8e:	2302      	movs	r3, #2
    2a90:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504
	nvmc_wait_ready();
    2a94:	f018 fa5a 	bl	1af4c <nvmc_wait_ready>
		return FLASH_OP_DONE;
	}
#endif

	do {
		NRF_NVMC->ERASEPAGE = e_ctx->flash_addr;
    2a98:	f8df b074 	ldr.w	fp, [pc, #116]	; 2b10 <erase_op+0xa0>
		if (e_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    2a9c:	f8df a074 	ldr.w	sl, [pc, #116]	; 2b14 <erase_op+0xa4>
	u32_t i = 0U;
    2aa0:	2700      	movs	r7, #0
		NRF_NVMC->ERASEPAGE = e_ctx->flash_addr;
    2aa2:	6863      	ldr	r3, [r4, #4]
    2aa4:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
		nvmc_wait_ready();
    2aa8:	f018 fa50 	bl	1af4c <nvmc_wait_ready>
		e_ctx->len -= pg_size;
    2aac:	68a3      	ldr	r3, [r4, #8]
    2aae:	eba3 0308 	sub.w	r3, r3, r8
    2ab2:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    2ab4:	6863      	ldr	r3, [r4, #4]
    2ab6:	4443      	add	r3, r8
    2ab8:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
    2aba:	7b23      	ldrb	r3, [r4, #12]
		i++;
    2abc:	3701      	adds	r7, #1
		if (e_ctx->enable_time_limit) {
    2abe:	b973      	cbnz	r3, 2ade <erase_op+0x6e>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    2ac0:	68a3      	ldr	r3, [r4, #8]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d1ed      	bne.n	2aa2 <erase_op+0x32>

	NRF_NVMC->CONFIG = prev_nvmc_cfg;
    2ac6:	4b12      	ldr	r3, [pc, #72]	; (2b10 <erase_op+0xa0>)
    2ac8:	f8c3 9504 	str.w	r9, [r3, #1284]	; 0x504
	nvmc_wait_ready();
    2acc:	f018 fa3e 	bl	1af4c <nvmc_wait_ready>

	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    2ad0:	68a0      	ldr	r0, [r4, #8]
    2ad2:	3000      	adds	r0, #0
    2ad4:	bf18      	it	ne
    2ad6:	2001      	movne	r0, #1
}
    2ad8:	4240      	negs	r0, r0
    2ada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    2ade:	f01f f942 	bl	21d66 <ticker_ticks_now_get>
    2ae2:	4629      	mov	r1, r5
    2ae4:	f01f f941 	bl	21d6a <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    2ae8:	fbb0 f6f7 	udiv	r6, r0, r7
    2aec:	4406      	add	r6, r0
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    2aee:	6960      	ldr	r0, [r4, #20]
    2af0:	a305      	add	r3, pc, #20	; (adr r3, 2b08 <erase_op+0x98>)
    2af2:	e9d3 2300 	ldrd	r2, r3, [r3]
    2af6:	fba0 010a 	umull	r0, r1, r0, sl
    2afa:	f7fd fb41 	bl	180 <__aeabi_uldivmod>
    2afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    2b02:	4286      	cmp	r6, r0
    2b04:	d9dc      	bls.n	2ac0 <erase_op+0x50>
    2b06:	e7de      	b.n	2ac6 <erase_op+0x56>
    2b08:	1afd498d 	.word	0x1afd498d
    2b0c:	00000007 	.word	0x00000007
    2b10:	4001e000 	.word	0x4001e000
    2b14:	3b9aca00 	.word	0x3b9aca00

00002b18 <work_in_time_slice>:
{
    2b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b1c:	b08f      	sub	sp, #60	; 0x3c
	struct flash_context *context = p_flash_op_desc->context;
    2b1e:	f8d0 a004 	ldr.w	sl, [r0, #4]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2b22:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2bfc <work_in_time_slice+0xe4>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2b26:	f10d 0137 	add.w	r1, sp, #55	; 0x37
{
    2b2a:	4680      	mov	r8, r0
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2b2c:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    2b30:	f01f fb97 	bl	22262 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    2b34:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    2b38:	930a      	str	r3, [sp, #40]	; 0x28
    2b3a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    2b3e:	930b      	str	r3, [sp, #44]	; 0x2c
    2b40:	f01f f911 	bl	21d66 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2b44:	f8da 4010 	ldr.w	r4, [sl, #16]
    2b48:	fba4 4509 	umull	r4, r5, r4, r9
    2b4c:	a326      	add	r3, pc, #152	; (adr r3, 2be8 <work_in_time_slice+0xd0>)
    2b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    2b52:	2700      	movs	r7, #0
    2b54:	4683      	mov	fp, r0
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2b56:	4629      	mov	r1, r5
    2b58:	4620      	mov	r0, r4
    2b5a:	f7fd fb11 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2b5e:	e9cd 7707 	strd	r7, r7, [sp, #28]
    2b62:	4b23      	ldr	r3, [pc, #140]	; (2bf0 <work_in_time_slice+0xd8>)
    2b64:	9305      	str	r3, [sp, #20]
    2b66:	f8cd 8018 	str.w	r8, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2b6a:	4606      	mov	r6, r0
			   HAL_TICKER_US_TO_TICKS(context->slot),
    2b6c:	f8da 0014 	ldr.w	r0, [sl, #20]
    2b70:	a31d      	add	r3, pc, #116	; (adr r3, 2be8 <work_in_time_slice+0xd0>)
    2b72:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b76:	fba0 0109 	umull	r0, r1, r0, r9
    2b7a:	f7fd fb01 	bl	180 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(context->interval),
    2b7e:	4b1d      	ldr	r3, [pc, #116]	; (2bf4 <work_in_time_slice+0xdc>)
    2b80:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    2b84:	fba6 9a03 	umull	r9, sl, r6, r3
	err = ticker_start(instance_index,
    2b88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(context->interval),
    2b8c:	2307      	movs	r3, #7
	err = ticker_start(instance_index,
    2b8e:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(context->interval),
    2b92:	fb03 aa06 	mla	sl, r3, r6, sl
    2b96:	ebb4 0009 	subs.w	r0, r4, r9
    2b9a:	eb65 010a 	sbc.w	r1, r5, sl
    2b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ba2:	2300      	movs	r3, #0
    2ba4:	f7fd faec 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2ba8:	465b      	mov	r3, fp
    2baa:	e9cd 6001 	strd	r6, r0, [sp, #4]
    2bae:	9700      	str	r7, [sp, #0]
    2bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2bb2:	980a      	ldr	r0, [sp, #40]	; 0x28
    2bb4:	2103      	movs	r1, #3
    2bb6:	f013 fd31 	bl	1661c <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    2bba:	f030 0302 	bics.w	r3, r0, #2
    2bbe:	d10a      	bne.n	2bd6 <work_in_time_slice+0xbe>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    2bc0:	f645 11b3 	movw	r1, #22963	; 0x59b3
    2bc4:	480c      	ldr	r0, [pc, #48]	; (2bf8 <work_in_time_slice+0xe0>)
    2bc6:	f019 fb79 	bl	1c2bc <z_impl_k_sem_take>
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    2bca:	b938      	cbnz	r0, 2bdc <work_in_time_slice+0xc4>
		result = p_flash_op_desc->result;
    2bcc:	f8d8 0008 	ldr.w	r0, [r8, #8]
}
    2bd0:	b00f      	add	sp, #60	; 0x3c
    2bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = -ECANCELED;
    2bd6:	f06f 0047 	mvn.w	r0, #71	; 0x47
    2bda:	e7f9      	b.n	2bd0 <work_in_time_slice+0xb8>
		result = -ETIMEDOUT;
    2bdc:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	return result;
    2be0:	e7f6      	b.n	2bd0 <work_in_time_slice+0xb8>
    2be2:	bf00      	nop
    2be4:	f3af 8000 	nop.w
    2be8:	1afd498d 	.word	0x1afd498d
    2bec:	00000007 	.word	0x00000007
    2bf0:	0001afa1 	.word	0x0001afa1
    2bf4:	1afd498d 	.word	0x1afd498d
    2bf8:	20001af4 	.word	0x20001af4
    2bfc:	3b9aca00 	.word	0x3b9aca00

00002c00 <write_op>:
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
{
    2c00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 1U;

	if (w_ctx->enable_time_limit) {
    2c04:	7b05      	ldrb	r5, [r0, #12]
{
    2c06:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
    2c08:	b115      	cbz	r5, 2c10 <write_op+0x10>
		ticks_begin = ticker_ticks_now_get();
    2c0a:	f01f f8ac 	bl	21d66 <ticker_ticks_now_get>
    2c0e:	4605      	mov	r5, r0
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* Start with a word-aligned address and handle the offset */
	addr_word = (u32_t)w_ctx->flash_addr & ~0x3;
    2c10:	6867      	ldr	r7, [r4, #4]

	/* If not aligned, read first word, update and write it back */
	if (!is_aligned_32(w_ctx->flash_addr)) {
    2c12:	f017 0003 	ands.w	r0, r7, #3
    2c16:	d07c      	beq.n	2d12 <write_op+0x112>
    2c18:	68a2      	ldr	r2, [r4, #8]
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
		if (count > w_ctx->len) {
			count = w_ctx->len;
		}

		memcpy((u8_t *)&tmp_word + (w_ctx->flash_addr & 0x3),
    2c1a:	6821      	ldr	r1, [r4, #0]
	addr_word = (u32_t)w_ctx->flash_addr & ~0x3;
    2c1c:	f027 0703 	bic.w	r7, r7, #3
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    2c20:	f1c0 0604 	rsb	r6, r0, #4
    2c24:	4296      	cmp	r6, r2
		tmp_word = *(u32_t *)(addr_word);
    2c26:	683b      	ldr	r3, [r7, #0]
    2c28:	9301      	str	r3, [sp, #4]
		if (count > w_ctx->len) {
    2c2a:	bf28      	it	cs
    2c2c:	4616      	movcs	r6, r2
		memcpy((u8_t *)&tmp_word + (w_ctx->flash_addr & 0x3),
    2c2e:	ab01      	add	r3, sp, #4
    2c30:	4632      	mov	r2, r6
    2c32:	4418      	add	r0, r3
    2c34:	f01c fce8 	bl	1f608 <memcpy>
		       (void *)w_ctx->data_addr,
		       count);
		nvmc_wait_ready();
    2c38:	f018 f988 	bl	1af4c <nvmc_wait_ready>
		*(u32_t *)addr_word = tmp_word;
    2c3c:	9b01      	ldr	r3, [sp, #4]
    2c3e:	603b      	str	r3, [r7, #0]
	w_ctx->flash_addr += shift;
    2c40:	6863      	ldr	r3, [r4, #4]
    2c42:	4433      	add	r3, r6
    2c44:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    2c46:	6823      	ldr	r3, [r4, #0]
    2c48:	4433      	add	r3, r6
    2c4a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    2c4c:	68a3      	ldr	r3, [r4, #8]
    2c4e:	1b9e      	subs	r6, r3, r6

		shift_write_context(count, w_ctx);

#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		if (w_ctx->enable_time_limit) {
    2c50:	7b23      	ldrb	r3, [r4, #12]
	w_ctx->len -= shift;
    2c52:	60a6      	str	r6, [r4, #8]
		if (w_ctx->enable_time_limit) {
    2c54:	2b00      	cmp	r3, #0
    2c56:	d05c      	beq.n	2d12 <write_op+0x112>
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    2c58:	f01f f885 	bl	21d66 <ticker_ticks_now_get>
    2c5c:	4629      	mov	r1, r5
    2c5e:	f01f f884 	bl	21d6a <ticker_ticks_diff_get>
						      ticks_begin);
			if (2 * ticks_diff >
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2c62:	4933      	ldr	r1, [pc, #204]	; (2d30 <write_op+0x130>)
			if (2 * ticks_diff >
    2c64:	0046      	lsls	r6, r0, #1
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2c66:	6960      	ldr	r0, [r4, #20]
    2c68:	a32f      	add	r3, pc, #188	; (adr r3, 2d28 <write_op+0x128>)
    2c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c6e:	fba0 0101 	umull	r0, r1, r0, r1
    2c72:	f7fd fa85 	bl	180 <__aeabi_uldivmod>
    2c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (2 * ticks_diff >
    2c7a:	4286      	cmp	r6, r0
    2c7c:	d949      	bls.n	2d12 <write_op+0x112>
				nvmc_wait_ready();
    2c7e:	f018 f965 	bl	1af4c <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
    2c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	nvmc_wait_ready();

	return FLASH_OP_DONE;
}
    2c86:	b002      	add	sp, #8
    2c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nvmc_wait_ready();
    2c8c:	f018 f95e 	bl	1af4c <nvmc_wait_ready>
				UNALIGNED_GET((u32_t *)w_ctx->data_addr);
    2c90:	6823      	ldr	r3, [r4, #0]
    2c92:	681a      	ldr	r2, [r3, #0]
		*(u32_t *)w_ctx->flash_addr =
    2c94:	6863      	ldr	r3, [r4, #4]
    2c96:	601a      	str	r2, [r3, #0]
	w_ctx->flash_addr += shift;
    2c98:	6863      	ldr	r3, [r4, #4]
    2c9a:	3304      	adds	r3, #4
    2c9c:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    2c9e:	6823      	ldr	r3, [r4, #0]
    2ca0:	3304      	adds	r3, #4
    2ca2:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    2ca4:	68a3      	ldr	r3, [r4, #8]
    2ca6:	3b04      	subs	r3, #4
    2ca8:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
    2caa:	7b23      	ldrb	r3, [r4, #12]
		i++;
    2cac:	f108 0801 	add.w	r8, r8, #1
		if (w_ctx->enable_time_limit) {
    2cb0:	b193      	cbz	r3, 2cd8 <write_op+0xd8>
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    2cb2:	f01f f858 	bl	21d66 <ticker_ticks_now_get>
    2cb6:	4629      	mov	r1, r5
    2cb8:	f01f f857 	bl	21d6a <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    2cbc:	fbb0 f9f8 	udiv	r9, r0, r8
    2cc0:	4481      	add	r9, r0
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2cc2:	6960      	ldr	r0, [r4, #20]
    2cc4:	4632      	mov	r2, r6
    2cc6:	463b      	mov	r3, r7
    2cc8:	fba0 010a 	umull	r0, r1, r0, sl
    2ccc:	f7fd fa58 	bl	180 <__aeabi_uldivmod>
    2cd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    2cd4:	4581      	cmp	r9, r0
    2cd6:	d8d2      	bhi.n	2c7e <write_op+0x7e>
	while (w_ctx->len >= sizeof(u32_t)) {
    2cd8:	68a2      	ldr	r2, [r4, #8]
    2cda:	2a03      	cmp	r2, #3
    2cdc:	d8d6      	bhi.n	2c8c <write_op+0x8c>
	if (w_ctx->len) {
    2cde:	b1a2      	cbz	r2, 2d0a <write_op+0x10a>
		tmp_word = *(u32_t *)(w_ctx->flash_addr);
    2ce0:	6863      	ldr	r3, [r4, #4]
		memcpy((u8_t *)&tmp_word, (void *)w_ctx->data_addr, w_ctx->len);
    2ce2:	6821      	ldr	r1, [r4, #0]
		tmp_word = *(u32_t *)(w_ctx->flash_addr);
    2ce4:	681b      	ldr	r3, [r3, #0]
    2ce6:	9301      	str	r3, [sp, #4]
		memcpy((u8_t *)&tmp_word, (void *)w_ctx->data_addr, w_ctx->len);
    2ce8:	a801      	add	r0, sp, #4
    2cea:	f01c fc8d 	bl	1f608 <memcpy>
		nvmc_wait_ready();
    2cee:	f018 f92d 	bl	1af4c <nvmc_wait_ready>
		*(u32_t *)w_ctx->flash_addr = tmp_word;
    2cf2:	6863      	ldr	r3, [r4, #4]
    2cf4:	9a01      	ldr	r2, [sp, #4]
    2cf6:	601a      	str	r2, [r3, #0]
	w_ctx->flash_addr += shift;
    2cf8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
	w_ctx->data_addr += shift;
    2cfc:	6823      	ldr	r3, [r4, #0]
    2cfe:	440b      	add	r3, r1
	w_ctx->flash_addr += shift;
    2d00:	440a      	add	r2, r1
	w_ctx->data_addr += shift;
    2d02:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    2d04:	2300      	movs	r3, #0
	w_ctx->flash_addr += shift;
    2d06:	6062      	str	r2, [r4, #4]
	w_ctx->len -= shift;
    2d08:	60a3      	str	r3, [r4, #8]
	nvmc_wait_ready();
    2d0a:	f018 f91f 	bl	1af4c <nvmc_wait_ready>
	return FLASH_OP_DONE;
    2d0e:	2000      	movs	r0, #0
    2d10:	e7b9      	b.n	2c86 <write_op+0x86>
	u32_t ticks_begin = 0U;
    2d12:	f04f 0801 	mov.w	r8, #1
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2d16:	f8df a018 	ldr.w	sl, [pc, #24]	; 2d30 <write_op+0x130>
    2d1a:	a703      	add	r7, pc, #12	; (adr r7, 2d28 <write_op+0x128>)
    2d1c:	e9d7 6700 	ldrd	r6, r7, [r7]
    2d20:	e7da      	b.n	2cd8 <write_op+0xd8>
    2d22:	bf00      	nop
    2d24:	f3af 8000 	nop.w
    2d28:	1afd498d 	.word	0x1afd498d
    2d2c:	00000007 	.word	0x00000007
    2d30:	3b9aca00 	.word	0x3b9aca00

00002d34 <gen_onoff_status>:
	gen_onoff_set_unack(model, ctx, buf);
	gen_onoff_get(model, ctx, buf);
}

static void gen_onoff_status(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx, struct net_buf_simple *buf)
{
    2d34:	b570      	push	{r4, r5, r6, lr}
    2d36:	4606      	mov	r6, r0
	u8_t	state = net_buf_simple_pull_u8(buf);
    2d38:	4610      	mov	r0, r2
{
    2d3a:	460c      	mov	r4, r1
	u8_t	state = net_buf_simple_pull_u8(buf);
    2d3c:	f01f fca2 	bl	22684 <net_buf_simple_pull_u8>
    2d40:	4605      	mov	r5, r0

	printk("Node 0x%04x OnOff status from 0x%04x with state 0x%02x\n",
	       bt_mesh_model_elem(model)->addr, ctx->addr, state);
    2d42:	4630      	mov	r0, r6
    2d44:	f00b fc60 	bl	e608 <bt_mesh_model_elem>
	printk("Node 0x%04x OnOff status from 0x%04x with state 0x%02x\n",
    2d48:	462b      	mov	r3, r5
    2d4a:	88a2      	ldrh	r2, [r4, #4]
    2d4c:	8801      	ldrh	r1, [r0, #0]
    2d4e:	4802      	ldr	r0, [pc, #8]	; (2d58 <gen_onoff_status+0x24>)
}
    2d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("Node 0x%04x OnOff status from 0x%04x with state 0x%02x\n",
    2d54:	f01a ba2e 	b.w	1d1b4 <printk>
    2d58:	000241ab 	.word	0x000241ab

00002d5c <prov_complete>:
	printk("OOB String %s\n", str);
	return 0;
}

static void prov_complete(u16_t net_idx, u16_t addr)
{
    2d5c:	b510      	push	{r4, lr}
	printk("provisioning complete for net_idx 0x%04x addr 0x%04x\n", net_idx, addr);
    2d5e:	460a      	mov	r2, r1
{
    2d60:	460c      	mov	r4, r1
	printk("provisioning complete for net_idx 0x%04x addr 0x%04x\n", net_idx, addr);
    2d62:	4601      	mov	r1, r0
    2d64:	4802      	ldr	r0, [pc, #8]	; (2d70 <prov_complete+0x14>)
    2d66:	f01a fa25 	bl	1d1b4 <printk>
	primary_addr = addr;
    2d6a:	4b02      	ldr	r3, [pc, #8]	; (2d74 <prov_complete+0x18>)
    2d6c:	801c      	strh	r4, [r3, #0]
	primary_net_idx = net_idx;
}
    2d6e:	bd10      	pop	{r4, pc}
    2d70:	0002421b 	.word	0x0002421b
    2d74:	20001cf4 	.word	0x20001cf4

00002d78 <output_string>:
{
    2d78:	b508      	push	{r3, lr}
	printk("OOB String %s\n", str);
    2d7a:	4601      	mov	r1, r0
    2d7c:	4802      	ldr	r0, [pc, #8]	; (2d88 <output_string+0x10>)
    2d7e:	f01a fa19 	bl	1d1b4 <printk>
}
    2d82:	2000      	movs	r0, #0
    2d84:	bd08      	pop	{r3, pc}
    2d86:	bf00      	nop
    2d88:	0002420c 	.word	0x0002420c

00002d8c <output_number>:
{
    2d8c:	b508      	push	{r3, lr}
	printk("OOB Number %06u\n", number);
    2d8e:	4802      	ldr	r0, [pc, #8]	; (2d98 <output_number+0xc>)
    2d90:	f01a fa10 	bl	1d1b4 <printk>
}
    2d94:	2000      	movs	r0, #0
    2d96:	bd08      	pop	{r3, pc}
    2d98:	000241fb 	.word	0x000241fb

00002d9c <gen_onoff_get>:
{
    2d9c:	b570      	push	{r4, r5, r6, lr}
    2d9e:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
    2da0:	ab03      	add	r3, sp, #12
    2da2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
    2da6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2daa:	9305      	str	r3, [sp, #20]
{
    2dac:	460e      	mov	r6, r1
	struct onoff_state *onoff_state = model->user_data;
    2dae:	6985      	ldr	r5, [r0, #24]
{
    2db0:	4604      	mov	r4, r0
	       bt_mesh_model_elem(model)->addr, onoff_state->current);
    2db2:	f00b fc29 	bl	e608 <bt_mesh_model_elem>
	printk("addr 0x%04x onoff 0x%02x\n",
    2db6:	782a      	ldrb	r2, [r5, #0]
    2db8:	8801      	ldrh	r1, [r0, #0]
    2dba:	480c      	ldr	r0, [pc, #48]	; (2dec <gen_onoff_get+0x50>)
    2dbc:	f01a f9fa 	bl	1d1b4 <printk>
	bt_mesh_model_msg_init(&msg, BT_MESH_MODEL_OP_GEN_ONOFF_STATUS);
    2dc0:	f248 2104 	movw	r1, #33284	; 0x8204
    2dc4:	a805      	add	r0, sp, #20
    2dc6:	f01e fa08 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, onoff_state->current);
    2dca:	7829      	ldrb	r1, [r5, #0]
    2dcc:	a805      	add	r0, sp, #20
    2dce:	f01f fbeb 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    2dd2:	2300      	movs	r3, #0
    2dd4:	9300      	str	r3, [sp, #0]
    2dd6:	aa05      	add	r2, sp, #20
    2dd8:	4631      	mov	r1, r6
    2dda:	4620      	mov	r0, r4
    2ddc:	f01e fa26 	bl	2122c <bt_mesh_model_send>
    2de0:	b110      	cbz	r0, 2de8 <gen_onoff_get+0x4c>
		printk("Unable to send On Off Status response\n");
    2de2:	4803      	ldr	r0, [pc, #12]	; (2df0 <gen_onoff_get+0x54>)
    2de4:	f01a f9e6 	bl	1d1b4 <printk>
}
    2de8:	b008      	add	sp, #32
    2dea:	bd70      	pop	{r4, r5, r6, pc}
    2dec:	00024103 	.word	0x00024103
    2df0:	0002411d 	.word	0x0002411d

00002df4 <bt_ready>:
/*
 * Bluetooth Ready Callback
 */

static void bt_ready(int err)
{
    2df4:	b513      	push	{r0, r1, r4, lr}
	struct bt_le_oob oob;

	if (err) 
    2df6:	4601      	mov	r1, r0
    2df8:	b120      	cbz	r0, 2e04 <bt_ready+0x10>
	{
		printk("Bluetooth init failed (err %d)\n", err);
    2dfa:	4814      	ldr	r0, [pc, #80]	; (2e4c <bt_ready+0x58>)
	printk("Bluetooth initialized\n");

	err = bt_mesh_init(&prov, &comp);
	if (err) 
	{
		printk("Initializing mesh failed (err %d)\n", err);
    2dfc:	f01a f9da 	bl	1d1b4 <printk>
	}

	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);

	printk("Mesh initialized\n");
}
    2e00:	b002      	add	sp, #8
    2e02:	bd10      	pop	{r4, pc}
	printk("Bluetooth initialized\n");
    2e04:	4812      	ldr	r0, [pc, #72]	; (2e50 <bt_ready+0x5c>)
    2e06:	f01a f9d5 	bl	1d1b4 <printk>
	err = bt_mesh_init(&prov, &comp);
    2e0a:	4912      	ldr	r1, [pc, #72]	; (2e54 <bt_ready+0x60>)
    2e0c:	4812      	ldr	r0, [pc, #72]	; (2e58 <bt_ready+0x64>)
    2e0e:	f01d fcbd 	bl	2078c <bt_mesh_init>
	if (err) 
    2e12:	4604      	mov	r4, r0
    2e14:	b110      	cbz	r0, 2e1c <bt_ready+0x28>
		printk("Initializing mesh failed (err %d)\n", err);
    2e16:	4601      	mov	r1, r0
    2e18:	4810      	ldr	r0, [pc, #64]	; (2e5c <bt_ready+0x68>)
    2e1a:	e7ef      	b.n	2dfc <bt_ready+0x8>
		settings_load();
    2e1c:	f001 fc22 	bl	4664 <settings_load>
	if (bt_le_oob_get_local(BT_ID_DEFAULT, &oob)) {
    2e20:	4669      	mov	r1, sp
    2e22:	4620      	mov	r0, r4
    2e24:	f005 fd3c 	bl	88a0 <bt_le_oob_get_local>
    2e28:	b148      	cbz	r0, 2e3e <bt_ready+0x4a>
		printk("Identity Address unavailable\n");
    2e2a:	480d      	ldr	r0, [pc, #52]	; (2e60 <bt_ready+0x6c>)
    2e2c:	f01a f9c2 	bl	1d1b4 <printk>
	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);
    2e30:	2003      	movs	r0, #3
    2e32:	f008 fad9 	bl	b3e8 <bt_mesh_prov_enable>
	printk("Mesh initialized\n");
    2e36:	480b      	ldr	r0, [pc, #44]	; (2e64 <bt_ready+0x70>)
    2e38:	f01a f9bc 	bl	1d1b4 <printk>
    2e3c:	e7e0      	b.n	2e00 <bt_ready+0xc>
		memcpy(dev_uuid, oob.addr.a.val, 6);
    2e3e:	2206      	movs	r2, #6
    2e40:	f10d 0101 	add.w	r1, sp, #1
    2e44:	4808      	ldr	r0, [pc, #32]	; (2e68 <bt_ready+0x74>)
    2e46:	f01c fbdf 	bl	1f608 <memcpy>
    2e4a:	e7f1      	b.n	2e30 <bt_ready+0x3c>
    2e4c:	00023fe8 	.word	0x00023fe8
    2e50:	00024008 	.word	0x00024008
    2e54:	000235f8 	.word	0x000235f8
    2e58:	00023650 	.word	0x00023650
    2e5c:	0002401f 	.word	0x0002401f
    2e60:	00024042 	.word	0x00024042
    2e64:	00024060 	.word	0x00024060
    2e68:	20007f74 	.word	0x20007f74

00002e6c <button_pressed>:
{
    2e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e6e:	4615      	mov	r5, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    2e70:	f020 f8e4 	bl	2303c <z_impl_k_uptime_get_32>
	if (time < last_time + BUTTON_DEBOUNCE_DELAY_MS) {
    2e74:	4b1b      	ldr	r3, [pc, #108]	; (2ee4 <button_pressed+0x78>)
	time = k_uptime_get_32();
    2e76:	4e1c      	ldr	r6, [pc, #112]	; (2ee8 <button_pressed+0x7c>)
	if (time < last_time + BUTTON_DEBOUNCE_DELAY_MS) {
    2e78:	681a      	ldr	r2, [r3, #0]
	time = k_uptime_get_32();
    2e7a:	6030      	str	r0, [r6, #0]
	if (time < last_time + BUTTON_DEBOUNCE_DELAY_MS) {
    2e7c:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    2e80:	4282      	cmp	r2, r0
    2e82:	461f      	mov	r7, r3
    2e84:	d901      	bls.n	2e8a <button_pressed+0x1e>
		last_time = time;
    2e86:	6018      	str	r0, [r3, #0]
}
    2e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (button_press_cnt == 0) {
    2e8a:	4c18      	ldr	r4, [pc, #96]	; (2eec <button_pressed+0x80>)
    2e8c:	7822      	ldrb	r2, [r4, #0]
    2e8e:	b922      	cbnz	r2, 2e9a <button_pressed+0x2e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
    2e90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2e94:	4816      	ldr	r0, [pc, #88]	; (2ef0 <button_pressed+0x84>)
    2e96:	f019 fcd1 	bl	1c83c <z_impl_k_timer_start>
	printk("button_press_cnt 0x%02x\n", button_press_cnt);
    2e9a:	7821      	ldrb	r1, [r4, #0]
    2e9c:	4815      	ldr	r0, [pc, #84]	; (2ef4 <button_pressed+0x88>)
    2e9e:	f01a f989 	bl	1d1b4 <printk>
	button_press_cnt++;
    2ea2:	7823      	ldrb	r3, [r4, #0]
	switch (pin_pos) {
    2ea4:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
	button_press_cnt++;
    2ea8:	f103 0301 	add.w	r3, r3, #1
    2eac:	7023      	strb	r3, [r4, #0]
	switch (pin_pos) {
    2eae:	d011      	beq.n	2ed4 <button_pressed+0x68>
    2eb0:	d808      	bhi.n	2ec4 <button_pressed+0x58>
    2eb2:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    2eb6:	d003      	beq.n	2ec0 <button_pressed+0x54>
	printk("No match for GPIO pin 0x%08x\n", pin_pos);
    2eb8:	4629      	mov	r1, r5
    2eba:	480f      	ldr	r0, [pc, #60]	; (2ef8 <button_pressed+0x8c>)
    2ebc:	f01a f97a 	bl	1d1b4 <printk>
	case BIT(SW0_GPIO_PIN): return 0;
    2ec0:	2300      	movs	r3, #0
    2ec2:	e008      	b.n	2ed6 <button_pressed+0x6a>
	switch (pin_pos) {
    2ec4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    2ec8:	d00a      	beq.n	2ee0 <button_pressed+0x74>
    2eca:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    2ece:	d1f3      	bne.n	2eb8 <button_pressed+0x4c>
	case BIT(SW3_GPIO_PIN): return 3;
    2ed0:	2303      	movs	r3, #3
    2ed2:	e000      	b.n	2ed6 <button_pressed+0x6a>
	case BIT(SW1_GPIO_PIN): return 1;
    2ed4:	2301      	movs	r3, #1
	sw.sw_num = pin_to_sw(pin_pos);
    2ed6:	4a09      	ldr	r2, [pc, #36]	; (2efc <button_pressed+0x90>)
    2ed8:	7013      	strb	r3, [r2, #0]
	last_time = time;
    2eda:	6833      	ldr	r3, [r6, #0]
    2edc:	603b      	str	r3, [r7, #0]
    2ede:	e7d3      	b.n	2e88 <button_pressed+0x1c>
	case BIT(SW2_GPIO_PIN): return 2;
    2ee0:	2302      	movs	r3, #2
    2ee2:	e7f8      	b.n	2ed6 <button_pressed+0x6a>
    2ee4:	20000270 	.word	0x20000270
    2ee8:	200002b4 	.word	0x200002b4
    2eec:	20001d4c 	.word	0x20001d4c
    2ef0:	20000284 	.word	0x20000284
    2ef4:	0002409e 	.word	0x0002409e
    2ef8:	000240b7 	.word	0x000240b7
    2efc:	20000274 	.word	0x20000274

00002f00 <button_cnt_timer>:
{
    2f00:	b510      	push	{r4, lr}
	button_sw->onoff_state = button_press_cnt == 1 ? 1 : 0;
    2f02:	4c12      	ldr	r4, [pc, #72]	; (2f4c <button_cnt_timer+0x4c>)
    2f04:	7821      	ldrb	r1, [r4, #0]
    2f06:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    2f0a:	f1dc 0200 	rsbs	r2, ip, #0
    2f0e:	eb42 020c 	adc.w	r2, r2, ip
    2f12:	f800 2c0f 	strb.w	r2, [r0, #-15]
	printk("button_press_cnt 0x%02x onoff_state 0x%02x\n", button_press_cnt, button_sw->onoff_state);
    2f16:	480e      	ldr	r0, [pc, #56]	; (2f50 <button_cnt_timer+0x50>)
    2f18:	f01a f94c 	bl	1d1b4 <printk>
	button_press_cnt = 0U;
    2f1c:	2300      	movs	r3, #0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2f1e:	490d      	ldr	r1, [pc, #52]	; (2f54 <button_cnt_timer+0x54>)
    2f20:	7023      	strb	r3, [r4, #0]
    2f22:	f3bf 8f5b 	dmb	ish
    2f26:	e851 3f00 	ldrex	r3, [r1]
    2f2a:	f043 0201 	orr.w	r2, r3, #1
    2f2e:	e841 2000 	strex	r0, r2, [r1]
    2f32:	2800      	cmp	r0, #0
    2f34:	d1f7      	bne.n	2f26 <button_cnt_timer+0x26>
    2f36:	f3bf 8f5b 	dmb	ish
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    2f3a:	07db      	lsls	r3, r3, #31
    2f3c:	d405      	bmi.n	2f4a <button_cnt_timer+0x4a>
		k_queue_append(&work_q->queue, work);
    2f3e:	3908      	subs	r1, #8
    2f40:	4805      	ldr	r0, [pc, #20]	; (2f58 <button_cnt_timer+0x58>)
}
    2f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f46:	f01f be1e 	b.w	22b86 <k_queue_append>
    2f4a:	bd10      	pop	{r4, pc}
    2f4c:	20001d4c 	.word	0x20001d4c
    2f50:	00024072 	.word	0x00024072
    2f54:	20000280 	.word	0x20000280
    2f58:	20001c74 	.word	0x20001c74

00002f5c <gen_onoff_set_unack>:
{
    2f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf_simple *msg = model->pub->msg;
    2f5e:	6883      	ldr	r3, [r0, #8]
	struct onoff_state *onoff_state = model->user_data;
    2f60:	6984      	ldr	r4, [r0, #24]
	struct net_buf_simple *msg = model->pub->msg;
    2f62:	691e      	ldr	r6, [r3, #16]
{
    2f64:	4605      	mov	r5, r0
	onoff_state->current = net_buf_simple_pull_u8(buf);
    2f66:	4610      	mov	r0, r2
    2f68:	f01f fb8c 	bl	22684 <net_buf_simple_pull_u8>
    2f6c:	7020      	strb	r0, [r4, #0]
	       bt_mesh_model_elem(model)->addr, onoff_state->current);
    2f6e:	4628      	mov	r0, r5
    2f70:	f00b fb4a 	bl	e608 <bt_mesh_model_elem>
	printk("addr 0x%02x state 0x%02x\n",
    2f74:	7822      	ldrb	r2, [r4, #0]
    2f76:	8801      	ldrh	r1, [r0, #0]
    2f78:	4816      	ldr	r0, [pc, #88]	; (2fd4 <gen_onoff_set_unack+0x78>)
    2f7a:	f01a f91b 	bl	1d1b4 <printk>
	gpio_pin_write(onoff_state->led_device,
    2f7e:	6860      	ldr	r0, [r4, #4]
    2f80:	7823      	ldrb	r3, [r4, #0]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
    2f82:	6842      	ldr	r2, [r0, #4]
    2f84:	fab3 f383 	clz	r3, r3
    2f88:	6857      	ldr	r7, [r2, #4]
    2f8a:	78a2      	ldrb	r2, [r4, #2]
    2f8c:	2100      	movs	r1, #0
    2f8e:	095b      	lsrs	r3, r3, #5
    2f90:	47b8      	blx	r7
	if (onoff_state->previous != onoff_state->current && model->pub->addr != BT_MESH_ADDR_UNASSIGNED)
    2f92:	7861      	ldrb	r1, [r4, #1]
    2f94:	7822      	ldrb	r2, [r4, #0]
    2f96:	4291      	cmp	r1, r2
    2f98:	d01a      	beq.n	2fd0 <gen_onoff_set_unack+0x74>
    2f9a:	68ab      	ldr	r3, [r5, #8]
    2f9c:	889b      	ldrh	r3, [r3, #4]
    2f9e:	b1bb      	cbz	r3, 2fd0 <gen_onoff_set_unack+0x74>
		printk("publish last 0x%02x cur 0x%02x\n",
    2fa0:	480d      	ldr	r0, [pc, #52]	; (2fd8 <gen_onoff_set_unack+0x7c>)
    2fa2:	f01a f907 	bl	1d1b4 <printk>
		onoff_state->previous = onoff_state->current;
    2fa6:	7823      	ldrb	r3, [r4, #0]
    2fa8:	7063      	strb	r3, [r4, #1]
		bt_mesh_model_msg_init(msg,
    2faa:	f248 2104 	movw	r1, #33284	; 0x8204
    2fae:	4630      	mov	r0, r6
    2fb0:	f01e f913 	bl	211da <bt_mesh_model_msg_init>
		net_buf_simple_add_u8(msg, onoff_state->current);
    2fb4:	7821      	ldrb	r1, [r4, #0]
    2fb6:	4630      	mov	r0, r6
    2fb8:	f01f faf6 	bl	225a8 <net_buf_simple_add_u8>
		err = bt_mesh_model_publish(model);
    2fbc:	4628      	mov	r0, r5
    2fbe:	f00b fce3 	bl	e988 <bt_mesh_model_publish>
		if (err) {
    2fc2:	4601      	mov	r1, r0
    2fc4:	b120      	cbz	r0, 2fd0 <gen_onoff_set_unack+0x74>
			printk("bt_mesh_model_publish err %d\n", err);
    2fc6:	4805      	ldr	r0, [pc, #20]	; (2fdc <gen_onoff_set_unack+0x80>)
}
    2fc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printk("bt_mesh_model_publish err %d\n", err);
    2fcc:	f01a b8f2 	b.w	1d1b4 <printk>
}
    2fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fd2:	bf00      	nop
    2fd4:	00024153 	.word	0x00024153
    2fd8:	0002416d 	.word	0x0002416d
    2fdc:	0002418d 	.word	0x0002418d

00002fe0 <button_pressed_worker>:
{
    2fe0:	b570      	push	{r4, r5, r6, lr}
	if (primary_addr == BT_MESH_ADDR_UNASSIGNED) 
    2fe2:	4a24      	ldr	r2, [pc, #144]	; (3074 <button_pressed_worker+0x94>)
	u8_t sw_idx = sw->sw_num;
    2fe4:	f810 3c04 	ldrb.w	r3, [r0, #-4]
	if (primary_addr == BT_MESH_ADDR_UNASSIGNED) 
    2fe8:	8812      	ldrh	r2, [r2, #0]
{
    2fea:	b088      	sub	sp, #32
    2fec:	4605      	mov	r5, r0
	if (primary_addr == BT_MESH_ADDR_UNASSIGNED) 
    2fee:	b9d2      	cbnz	r2, 3026 <button_pressed_worker+0x46>
	mod_srv = mod_srv_sw[sw_idx];
    2ff0:	4921      	ldr	r1, [pc, #132]	; (3078 <button_pressed_worker+0x98>)
		struct bt_mesh_msg_ctx ctx = {.addr = sw_idx + primary_addr,};
    2ff2:	f8ad 2010 	strh.w	r2, [sp, #16]
	mod_srv = mod_srv_sw[sw_idx];
    2ff6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
		NET_BUF_SIMPLE_DEFINE(msg, 1);
    2ffa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2ffe:	a901      	add	r1, sp, #4
    3000:	e9cd 0106 	strd	r0, r1, [sp, #24]
    3004:	9105      	str	r1, [sp, #20]
		net_buf_simple_add_u8(&msg, sw->onoff_state);
    3006:	a805      	add	r0, sp, #20
    3008:	f815 1c03 	ldrb.w	r1, [r5, #-3]
		struct bt_mesh_msg_ctx ctx = {.addr = sw_idx + primary_addr,};
    300c:	e9cd 2202 	strd	r2, r2, [sp, #8]
    3010:	f8ad 300c 	strh.w	r3, [sp, #12]
		net_buf_simple_add_u8(&msg, sw->onoff_state);
    3014:	f01f fac8 	bl	225a8 <net_buf_simple_add_u8>
		gen_onoff_set_unack(mod_srv, &ctx, &msg);
    3018:	aa05      	add	r2, sp, #20
    301a:	a902      	add	r1, sp, #8
    301c:	4620      	mov	r0, r4
    301e:	f7ff ff9d 	bl	2f5c <gen_onoff_set_unack>
}
    3022:	b008      	add	sp, #32
    3024:	bd70      	pop	{r4, r5, r6, pc}
	mod_cli = mod_cli_sw[sw_idx];
    3026:	4a15      	ldr	r2, [pc, #84]	; (307c <button_pressed_worker+0x9c>)
    3028:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
	pub_cli = mod_cli->pub;
    302c:	68b4      	ldr	r4, [r6, #8]
	if (pub_cli->addr == BT_MESH_ADDR_UNASSIGNED) { return; }
    302e:	88a1      	ldrh	r1, [r4, #4]
    3030:	2900      	cmp	r1, #0
    3032:	d0f6      	beq.n	3022 <button_pressed_worker+0x42>
	printk("publish to 0x%04x onoff 0x%04x sw_idx 0x%04x\n", pub_cli->addr, sw->onoff_state, sw_idx);
    3034:	f810 2c03 	ldrb.w	r2, [r0, #-3]
    3038:	4811      	ldr	r0, [pc, #68]	; (3080 <button_pressed_worker+0xa0>)
    303a:	f01a f8bb 	bl	1d1b4 <printk>
	bt_mesh_model_msg_init(pub_cli->msg, BT_MESH_MODEL_OP_GEN_ONOFF_SET);
    303e:	f248 2102 	movw	r1, #33282	; 0x8202
    3042:	6920      	ldr	r0, [r4, #16]
    3044:	f01e f8c9 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(pub_cli->msg, sw->onoff_state);
    3048:	f815 1c03 	ldrb.w	r1, [r5, #-3]
    304c:	6920      	ldr	r0, [r4, #16]
    304e:	f01f faab 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(pub_cli->msg, trans_id++);
    3052:	4b0c      	ldr	r3, [pc, #48]	; (3084 <button_pressed_worker+0xa4>)
    3054:	6920      	ldr	r0, [r4, #16]
    3056:	7819      	ldrb	r1, [r3, #0]
    3058:	1c4a      	adds	r2, r1, #1
    305a:	701a      	strb	r2, [r3, #0]
    305c:	f01f faa4 	bl	225a8 <net_buf_simple_add_u8>
	err = bt_mesh_model_publish(mod_cli);
    3060:	4630      	mov	r0, r6
    3062:	f00b fc91 	bl	e988 <bt_mesh_model_publish>
	if (err) { printk("bt_mesh_model_publish err %d\n", err);}
    3066:	4601      	mov	r1, r0
    3068:	2800      	cmp	r0, #0
    306a:	d0da      	beq.n	3022 <button_pressed_worker+0x42>
    306c:	4806      	ldr	r0, [pc, #24]	; (3088 <button_pressed_worker+0xa8>)
    306e:	f01a f8a1 	bl	1d1b4 <printk>
    3072:	e7d6      	b.n	3022 <button_pressed_worker+0x42>
    3074:	20001cf4 	.word	0x20001cf4
    3078:	200074e4 	.word	0x200074e4
    307c:	200074d4 	.word	0x200074d4
    3080:	000240d5 	.word	0x000240d5
    3084:	20001d4d 	.word	0x20001d4d
    3088:	0002418d 	.word	0x0002418d

0000308c <gen_onoff_set>:
{
    308c:	b570      	push	{r4, r5, r6, lr}
    308e:	4604      	mov	r4, r0
    3090:	460d      	mov	r5, r1
    3092:	4616      	mov	r6, r2
	printk("gen_onoff_set\n");
    3094:	4807      	ldr	r0, [pc, #28]	; (30b4 <gen_onoff_set+0x28>)
    3096:	f01a f88d 	bl	1d1b4 <printk>
	gen_onoff_set_unack(model, ctx, buf);
    309a:	4632      	mov	r2, r6
    309c:	4629      	mov	r1, r5
    309e:	4620      	mov	r0, r4
    30a0:	f7ff ff5c 	bl	2f5c <gen_onoff_set_unack>
	gen_onoff_get(model, ctx, buf);
    30a4:	4632      	mov	r2, r6
    30a6:	4629      	mov	r1, r5
    30a8:	4620      	mov	r0, r4
}
    30aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gen_onoff_get(model, ctx, buf);
    30ae:	f7ff be75 	b.w	2d9c <gen_onoff_get>
    30b2:	bf00      	nop
    30b4:	00024144 	.word	0x00024144

000030b8 <init_led>:

void init_led(u8_t dev, const char *port, u32_t pin_num)
{
    30b8:	b570      	push	{r4, r5, r6, lr}
    30ba:	4606      	mov	r6, r0
	onoff_state[dev].led_device = device_get_binding(port);
    30bc:	4c0b      	ldr	r4, [pc, #44]	; (30ec <init_led+0x34>)

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
    30be:	4608      	mov	r0, r1
{
    30c0:	4615      	mov	r5, r2
    30c2:	f018 faf9 	bl	1b6b8 <z_impl_device_get_binding>
	onoff_state[dev].led_device = device_get_binding(port);
    30c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
	gpio_pin_configure(onoff_state[dev].led_device, pin_num, GPIO_DIR_OUT | GPIO_PUD_PULL_UP);
    30ca:	4629      	mov	r1, r5
	onoff_state[dev].led_device = device_get_binding(port);
    30cc:	6060      	str	r0, [r4, #4]
	gpio_pin_configure(onoff_state[dev].led_device, pin_num, GPIO_DIR_OUT | GPIO_PUD_PULL_UP);
    30ce:	f240 1201 	movw	r2, #257	; 0x101
    30d2:	f019 fcbf 	bl	1ca54 <gpio_pin_configure>
	gpio_pin_write(onoff_state[dev].led_device, pin_num, 1);
    30d6:	6860      	ldr	r0, [r4, #4]
    30d8:	6843      	ldr	r3, [r0, #4]
    30da:	685c      	ldr	r4, [r3, #4]
    30dc:	462a      	mov	r2, r5
    30de:	46a4      	mov	ip, r4
    30e0:	2301      	movs	r3, #1
    30e2:	2100      	movs	r1, #0
}
    30e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    30e8:	4760      	bx	ip
    30ea:	bf00      	nop
    30ec:	200074f4 	.word	0x200074f4

000030f0 <main>:

void main(void)
{
    30f0:	b510      	push	{r4, lr}
	int err;

	printk("Initializing...\n");
    30f2:	4834      	ldr	r0, [pc, #208]	; (31c4 <main+0xd4>)
	k_work_init(&sw.button_work, button_pressed_worker);

	/* Initialize button count timer */
	k_timer_init(&sw.button_timer, button_cnt_timer, NULL);

	sw_device = device_get_binding(SW0_GPIO_CONTROLLER);
    30f4:	4c34      	ldr	r4, [pc, #208]	; (31c8 <main+0xd8>)
	printk("Initializing...\n");
    30f6:	f01a f85d 	bl	1d1b4 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    30fa:	f01f ff9f 	bl	2303c <z_impl_k_uptime_get_32>
	last_time = k_uptime_get_32();
    30fe:	4b33      	ldr	r3, [pc, #204]	; (31cc <main+0xdc>)
	k_timer_init(&sw.button_timer, button_cnt_timer, NULL);
    3100:	4933      	ldr	r1, [pc, #204]	; (31d0 <main+0xe0>)
	last_time = k_uptime_get_32();
    3102:	6018      	str	r0, [r3, #0]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    3104:	4b33      	ldr	r3, [pc, #204]	; (31d4 <main+0xe4>)
    3106:	4834      	ldr	r0, [pc, #208]	; (31d8 <main+0xe8>)
    3108:	2200      	movs	r2, #0
    310a:	e9c0 3202 	strd	r3, r2, [r0, #8]
    310e:	6042      	str	r2, [r0, #4]
	k_timer_init(&sw.button_timer, button_cnt_timer, NULL);
    3110:	3010      	adds	r0, #16
    3112:	f01f ffaf 	bl	23074 <k_timer_init>
    3116:	4831      	ldr	r0, [pc, #196]	; (31dc <main+0xec>)
    3118:	f018 face 	bl	1b6b8 <z_impl_device_get_binding>
	gpio_pin_configure(sw_device, SW0_GPIO_PIN,
    311c:	f44f 7291 	mov.w	r2, #290	; 0x122
    3120:	210d      	movs	r1, #13
	sw_device = device_get_binding(SW0_GPIO_CONTROLLER);
    3122:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(sw_device, SW0_GPIO_PIN,
    3124:	f019 fc96 	bl	1ca54 <gpio_pin_configure>
			  (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE |
			   GPIO_INT_ACTIVE_LOW | GPIO_PUD_PULL_UP));
	gpio_pin_configure(sw_device, SW1_GPIO_PIN,
    3128:	f44f 7291 	mov.w	r2, #290	; 0x122
    312c:	210e      	movs	r1, #14
    312e:	6820      	ldr	r0, [r4, #0]
    3130:	f019 fc90 	bl	1ca54 <gpio_pin_configure>
			  (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE |
			   GPIO_INT_ACTIVE_LOW | GPIO_PUD_PULL_UP));
	gpio_pin_configure(sw_device, SW2_GPIO_PIN,
    3134:	f44f 7291 	mov.w	r2, #290	; 0x122
    3138:	210f      	movs	r1, #15
    313a:	6820      	ldr	r0, [r4, #0]
    313c:	f019 fc8a 	bl	1ca54 <gpio_pin_configure>
			  (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE |
			   GPIO_INT_ACTIVE_LOW | GPIO_PUD_PULL_UP));
	gpio_pin_configure(sw_device, SW3_GPIO_PIN,
    3140:	2110      	movs	r1, #16
    3142:	f44f 7291 	mov.w	r2, #290	; 0x122
    3146:	6820      	ldr	r0, [r4, #0]
    3148:	f019 fc84 	bl	1ca54 <gpio_pin_configure>
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    314c:	4924      	ldr	r1, [pc, #144]	; (31e0 <main+0xf0>)
    314e:	4b25      	ldr	r3, [pc, #148]	; (31e4 <main+0xf4>)
			  (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE |
			   GPIO_INT_ACTIVE_LOW | GPIO_PUD_PULL_UP));
	gpio_init_callback(&button_cb, button_pressed,
			   BIT(SW0_GPIO_PIN) | BIT(SW1_GPIO_PIN) |
			   BIT(SW2_GPIO_PIN) | BIT(SW3_GPIO_PIN));
	gpio_add_callback(sw_device, &button_cb);
    3150:	6820      	ldr	r0, [r4, #0]
    3152:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    3154:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
    3158:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (!api->manage_callback) {
    315a:	6843      	ldr	r3, [r0, #4]
    315c:	68db      	ldr	r3, [r3, #12]
    315e:	b10b      	cbz	r3, 3164 <main+0x74>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    3160:	2201      	movs	r2, #1
    3162:	4798      	blx	r3
	gpio_pin_enable_callback(sw_device, SW0_GPIO_PIN);
    3164:	210d      	movs	r1, #13
    3166:	6820      	ldr	r0, [r4, #0]
    3168:	f019 fc6b 	bl	1ca42 <gpio_pin_enable_callback>
	gpio_pin_enable_callback(sw_device, SW1_GPIO_PIN);
    316c:	210e      	movs	r1, #14
    316e:	6820      	ldr	r0, [r4, #0]
    3170:	f019 fc67 	bl	1ca42 <gpio_pin_enable_callback>
	gpio_pin_enable_callback(sw_device, SW2_GPIO_PIN);
    3174:	210f      	movs	r1, #15
    3176:	6820      	ldr	r0, [r4, #0]
    3178:	f019 fc63 	bl	1ca42 <gpio_pin_enable_callback>
	gpio_pin_enable_callback(sw_device, SW3_GPIO_PIN);
    317c:	2110      	movs	r1, #16
    317e:	6820      	ldr	r0, [r4, #0]
    3180:	f019 fc5f 	bl	1ca42 <gpio_pin_enable_callback>

	/* Initialize LED's */
	init_led(0, LED0_GPIO_CONTROLLER, LED0_GPIO_PIN);
    3184:	2211      	movs	r2, #17
    3186:	4915      	ldr	r1, [pc, #84]	; (31dc <main+0xec>)
    3188:	2000      	movs	r0, #0
    318a:	f7ff ff95 	bl	30b8 <init_led>
	init_led(1, LED1_GPIO_CONTROLLER, LED1_GPIO_PIN);
    318e:	2212      	movs	r2, #18
    3190:	4912      	ldr	r1, [pc, #72]	; (31dc <main+0xec>)
    3192:	2001      	movs	r0, #1
    3194:	f7ff ff90 	bl	30b8 <init_led>
	init_led(2, LED2_GPIO_CONTROLLER, LED2_GPIO_PIN);
    3198:	2213      	movs	r2, #19
    319a:	4910      	ldr	r1, [pc, #64]	; (31dc <main+0xec>)
    319c:	2002      	movs	r0, #2
    319e:	f7ff ff8b 	bl	30b8 <init_led>
	init_led(3, LED3_GPIO_CONTROLLER, LED3_GPIO_PIN);
    31a2:	490e      	ldr	r1, [pc, #56]	; (31dc <main+0xec>)
    31a4:	2214      	movs	r2, #20
    31a6:	2003      	movs	r0, #3
    31a8:	f7ff ff86 	bl	30b8 <init_led>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
    31ac:	480e      	ldr	r0, [pc, #56]	; (31e8 <main+0xf8>)
    31ae:	f004 ff59 	bl	8064 <bt_enable>
	if (err) {
    31b2:	4601      	mov	r1, r0
    31b4:	b120      	cbz	r0, 31c0 <main+0xd0>
		printk("Bluetooth init failed (err %d)\n", err);
    31b6:	480d      	ldr	r0, [pc, #52]	; (31ec <main+0xfc>)
	}
}
    31b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    31bc:	f019 bffa 	b.w	1d1b4 <printk>
}
    31c0:	bd10      	pop	{r4, pc}
    31c2:	bf00      	nop
    31c4:	000241e3 	.word	0x000241e3
    31c8:	200002b0 	.word	0x200002b0
    31cc:	20000270 	.word	0x20000270
    31d0:	00002f01 	.word	0x00002f01
    31d4:	00002fe1 	.word	0x00002fe1
    31d8:	20000274 	.word	0x20000274
    31dc:	000241f4 	.word	0x000241f4
    31e0:	20000218 	.word	0x20000218
    31e4:	00002e6d 	.word	0x00002e6d
    31e8:	00002df5 	.word	0x00002df5
    31ec:	00023fe8 	.word	0x00023fe8

000031f0 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
    31f0:	b510      	push	{r4, lr}
	int i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    31f2:	4c09      	ldr	r4, [pc, #36]	; (3218 <crc8_ccitt+0x28>)
    31f4:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    31f6:	4291      	cmp	r1, r2
    31f8:	d100      	bne.n	31fc <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    31fa:	bd10      	pop	{r4, pc}
		val ^= p[i];
    31fc:	f811 3b01 	ldrb.w	r3, [r1], #1
    3200:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    3202:	0918      	lsrs	r0, r3, #4
    3204:	5c20      	ldrb	r0, [r4, r0]
    3206:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    320a:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    320c:	0918      	lsrs	r0, r3, #4
    320e:	5c20      	ldrb	r0, [r4, r0]
    3210:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    3214:	b2c0      	uxtb	r0, r0
    3216:	e7ee      	b.n	31f6 <crc8_ccitt+0x6>
    3218:	00024251 	.word	0x00024251

0000321c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    321c:	680b      	ldr	r3, [r1, #0]
    321e:	3301      	adds	r3, #1
    3220:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3222:	4b01      	ldr	r3, [pc, #4]	; (3228 <char_out+0xc>)
    3224:	681b      	ldr	r3, [r3, #0]
    3226:	4718      	bx	r3
    3228:	20007648 	.word	0x20007648

0000322c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3230:	b085      	sub	sp, #20
    3232:	469b      	mov	fp, r3
    3234:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3236:	f8df a090 	ldr.w	sl, [pc, #144]	; 32c8 <_printk_dec_ulong+0x9c>
    323a:	2c01      	cmp	r4, #1
    323c:	bfb8      	it	lt
    323e:	2401      	movlt	r4, #1
    3240:	2b01      	cmp	r3, #1
    3242:	bf0c      	ite	eq
    3244:	2330      	moveq	r3, #48	; 0x30
    3246:	2320      	movne	r3, #32
    3248:	4615      	mov	r5, r2
    324a:	4680      	mov	r8, r0
    324c:	4689      	mov	r9, r1
    324e:	9401      	str	r4, [sp, #4]
    3250:	9302      	str	r3, [sp, #8]
    3252:	2601      	movs	r6, #1
    3254:	270a      	movs	r7, #10
    3256:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    3258:	f10a 0401 	add.w	r4, sl, #1
    325c:	b90a      	cbnz	r2, 3262 <_printk_dec_ulong+0x36>
    325e:	45aa      	cmp	sl, r5
    3260:	d21f      	bcs.n	32a2 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    3262:	fbb5 f0f4 	udiv	r0, r5, r4
    3266:	4649      	mov	r1, r9
    3268:	3030      	adds	r0, #48	; 0x30
    326a:	47c0      	blx	r8
			digits++;
    326c:	3601      	adds	r6, #1
			found_largest_digit = 1;
    326e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    3270:	3f01      	subs	r7, #1
	while (pos >= 9) {
    3272:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    3274:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    3278:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    327c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    3280:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    3284:	d1e8      	bne.n	3258 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    3286:	4649      	mov	r1, r9
    3288:	f105 0030 	add.w	r0, r5, #48	; 0x30
    328c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    328e:	f1bb 0f03 	cmp.w	fp, #3
    3292:	d103      	bne.n	329c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    3294:	9b01      	ldr	r3, [sp, #4]
    3296:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    3298:	2c00      	cmp	r4, #0
    329a:	dc0f      	bgt.n	32bc <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    329c:	b005      	add	sp, #20
    329e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    32a2:	9b01      	ldr	r3, [sp, #4]
    32a4:	42bb      	cmp	r3, r7
    32a6:	dbe3      	blt.n	3270 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    32a8:	f1bb 0f02 	cmp.w	fp, #2
    32ac:	d8e0      	bhi.n	3270 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    32ae:	4649      	mov	r1, r9
    32b0:	9802      	ldr	r0, [sp, #8]
    32b2:	9203      	str	r2, [sp, #12]
			digits++;
    32b4:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    32b6:	47c0      	blx	r8
			digits++;
    32b8:	9a03      	ldr	r2, [sp, #12]
    32ba:	e7d9      	b.n	3270 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    32bc:	4649      	mov	r1, r9
    32be:	2020      	movs	r0, #32
    32c0:	47c0      	blx	r8
    32c2:	3c01      	subs	r4, #1
    32c4:	e7e8      	b.n	3298 <_printk_dec_ulong+0x6c>
    32c6:	bf00      	nop
    32c8:	3b9ac9ff 	.word	0x3b9ac9ff

000032cc <__printk_hook_install>:
	_char_out = fn;
    32cc:	4b01      	ldr	r3, [pc, #4]	; (32d4 <__printk_hook_install+0x8>)
    32ce:	6018      	str	r0, [r3, #0]
}
    32d0:	4770      	bx	lr
    32d2:	bf00      	nop
    32d4:	20007648 	.word	0x20007648

000032d8 <vprintk>:
{
    32d8:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    32da:	2300      	movs	r3, #0
    32dc:	9301      	str	r3, [sp, #4]
	_vprintk(char_out, &ctx, fmt, ap);
    32de:	4602      	mov	r2, r0
    32e0:	460b      	mov	r3, r1
    32e2:	4803      	ldr	r0, [pc, #12]	; (32f0 <vprintk+0x18>)
    32e4:	a901      	add	r1, sp, #4
    32e6:	f019 fe14 	bl	1cf12 <_vprintk>
}
    32ea:	b003      	add	sp, #12
    32ec:	f85d fb04 	ldr.w	pc, [sp], #4
    32f0:	0000321d 	.word	0x0000321d

000032f4 <snprintk>:

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    32f4:	b40c      	push	{r2, r3}
    32f6:	b530      	push	{r4, r5, lr}
    32f8:	b085      	sub	sp, #20
    32fa:	ab08      	add	r3, sp, #32
	struct str_context ctx = { str, size, 0 };
    32fc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3300:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;

	va_start(ap, fmt);
    3304:	9300      	str	r3, [sp, #0]
{
    3306:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3308:	2500      	movs	r5, #0
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    330a:	a901      	add	r1, sp, #4
    330c:	4806      	ldr	r0, [pc, #24]	; (3328 <snprintk+0x34>)
	struct str_context ctx = { str, size, 0 };
    330e:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    3310:	f019 fdff 	bl	1cf12 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    3314:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    3318:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    331a:	bfb8      	it	lt
    331c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    331e:	b005      	add	sp, #20
    3320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3324:	b002      	add	sp, #8
    3326:	4770      	bx	lr
    3328:	0001ceed 	.word	0x0001ceed

0000332c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set((uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(struct device *arg)
{
    332c:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    332e:	f04f 0320 	mov.w	r3, #32
    3332:	f3ef 8411 	mrs	r4, BASEPRI
    3336:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
    333a:	f000 f9f1 	bl	3720 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    333e:	4a09      	ldr	r2, [pc, #36]	; (3364 <nordicsemi_nrf52_init+0x38>)
    3340:	2301      	movs	r3, #1
    3342:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
    3346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    334a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    334e:	4b06      	ldr	r3, [pc, #24]	; (3368 <nordicsemi_nrf52_init+0x3c>)
    3350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3354:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3356:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3358:	f384 8811 	msr	BASEPRI, r4
    335c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3360:	2000      	movs	r0, #0
    3362:	bd10      	pop	{r4, pc}
    3364:	4001e000 	.word	0x4001e000
    3368:	e000ed00 	.word	0xe000ed00

0000336c <z_arch_busy_wait>:
#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)


__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    336c:	b120      	cbz	r0, 3378 <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    336e:	4b03      	ldr	r3, [pc, #12]	; (337c <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3370:	0180      	lsls	r0, r0, #6
    3372:	f043 0301 	orr.w	r3, r3, #1
    3376:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3378:	4770      	bx	lr
    337a:	bf00      	nop
    337c:	000235f0 	.word	0x000235f0

00003380 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    3380:	4b01      	ldr	r3, [pc, #4]	; (3388 <uECC_get_rng+0x8>)
    3382:	6818      	ldr	r0, [r3, #0]
    3384:	4770      	bx	lr
    3386:	bf00      	nop
    3388:	2000764c 	.word	0x2000764c

0000338c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    338c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    338e:	2208      	movs	r2, #8
{
    3390:	b089      	sub	sp, #36	; 0x24
    3392:	460c      	mov	r4, r1
    3394:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    3396:	f01a f8d9 	bl	1d54c <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    339a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    339c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    339e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    33a0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    33a2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    33a4:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    33a6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    33a8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    33aa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    33ac:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    33ae:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    33b0:	2308      	movs	r3, #8
    33b2:	466a      	mov	r2, sp
    33b4:	4669      	mov	r1, sp
    33b6:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    33b8:	e9cd 7701 	strd	r7, r7, [sp, #4]
    33bc:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    33be:	f019 ffca 	bl	1d356 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    33c2:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    33c4:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    33c6:	466a      	mov	r2, sp
    33c8:	4631      	mov	r1, r6
    33ca:	4630      	mov	r0, r6
    33cc:	f019 ffc3 	bl	1d356 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    33d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    33d2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    33d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    33d6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    33d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    33da:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    33dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    33de:	4405      	add	r5, r0
	tmp[7] = 0;
    33e0:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    33e4:	466a      	mov	r2, sp
    33e6:	2308      	movs	r3, #8
    33e8:	4669      	mov	r1, sp
    33ea:	4668      	mov	r0, sp
    33ec:	f019 ffb3 	bl	1d356 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    33f0:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    33f2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    33f4:	2308      	movs	r3, #8
    33f6:	466a      	mov	r2, sp
    33f8:	4630      	mov	r0, r6
    33fa:	f019 ffac 	bl	1d356 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    33fe:	6a23      	ldr	r3, [r4, #32]
    3400:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    3402:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3404:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    3406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3408:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    340a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    340c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    340e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3410:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3412:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3414:	2308      	movs	r3, #8
    3416:	466a      	mov	r2, sp
    3418:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    341a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    341e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3420:	f019 ff99 	bl	1d356 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    3424:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3426:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    3428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    342a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    342c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    342e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3430:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    3432:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    3434:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    3436:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    3438:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    343a:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    343e:	6a23      	ldr	r3, [r4, #32]
    3440:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3442:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3444:	2308      	movs	r3, #8
    3446:	466a      	mov	r2, sp
    3448:	4630      	mov	r0, r6
    344a:	f019 ff84 	bl	1d356 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    344e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3450:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    3452:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3454:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    3456:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3458:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    345a:	6a23      	ldr	r3, [r4, #32]
    345c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    345e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3460:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3462:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3464:	2308      	movs	r3, #8
    3466:	466a      	mov	r2, sp
    3468:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    346a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    346e:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3470:	f01a f8a2 	bl	1d5b8 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    3474:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3476:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    3478:	6b63      	ldr	r3, [r4, #52]	; 0x34
    347a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    347c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    347e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    3480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3482:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    3484:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3486:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    3488:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    348a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    348c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    348e:	2308      	movs	r3, #8
    3490:	466a      	mov	r2, sp
    3492:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    3494:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3498:	f01a f88e 	bl	1d5b8 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    349c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    349e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    34a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    34a2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    34a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    34a6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    34a8:	6a23      	ldr	r3, [r4, #32]
    34aa:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    34ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    34ae:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    34b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    34b2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    34b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    34b8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    34ba:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    34bc:	2308      	movs	r3, #8
    34be:	466a      	mov	r2, sp
    34c0:	4630      	mov	r0, r6
    34c2:	f01a f879 	bl	1d5b8 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    34c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    34c8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    34ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    34cc:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    34d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    34d2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    34d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    34d6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    34d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    34da:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    34de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    34e0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    34e2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    34e4:	2308      	movs	r3, #8
    34e6:	466a      	mov	r2, sp
    34e8:	4630      	mov	r0, r6
    34ea:	f01a f865 	bl	1d5b8 <uECC_vli_sub>

	if (carry < 0) {
    34ee:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    34f0:	4c0d      	ldr	r4, [pc, #52]	; (3528 <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
    34f2:	d40f      	bmi.n	3514 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    34f4:	b935      	cbnz	r5, 3504 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    34f6:	2208      	movs	r2, #8
    34f8:	4631      	mov	r1, r6
    34fa:	4620      	mov	r0, r4
    34fc:	f01a f832 	bl	1d564 <uECC_vli_cmp_unsafe>
		while (carry || 
    3500:	2801      	cmp	r0, #1
    3502:	d00f      	beq.n	3524 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    3504:	2308      	movs	r3, #8
    3506:	4622      	mov	r2, r4
    3508:	4631      	mov	r1, r6
    350a:	4630      	mov	r0, r6
    350c:	f01a f854 	bl	1d5b8 <uECC_vli_sub>
    3510:	1a2d      	subs	r5, r5, r0
    3512:	e7ef      	b.n	34f4 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    3514:	2308      	movs	r3, #8
    3516:	4622      	mov	r2, r4
    3518:	4631      	mov	r1, r6
    351a:	4630      	mov	r0, r6
    351c:	f019 ff1b 	bl	1d356 <uECC_vli_add>
		while (carry < 0);
    3520:	182d      	adds	r5, r5, r0
    3522:	d4f7      	bmi.n	3514 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
    3524:	b009      	add	sp, #36	; 0x24
    3526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3528:	000236a8 	.word	0x000236a8

0000352c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    352c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    352e:	4e28      	ldr	r6, [pc, #160]	; (35d0 <tc_aes128_set_encrypt_key+0xa4>)
{
    3530:	4607      	mov	r7, r0
    3532:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    3534:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    3536:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3538:	ad01      	add	r5, sp, #4
    353a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    353c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    353e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3540:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3544:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3548:	2f00      	cmp	r7, #0
    354a:	d03c      	beq.n	35c6 <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    354c:	2c00      	cmp	r4, #0
    354e:	d03c      	beq.n	35ca <tc_aes128_set_encrypt_key+0x9e>
    3550:	1f38      	subs	r0, r7, #4
    3552:	4621      	mov	r1, r4
    3554:	4602      	mov	r2, r0
    3556:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3558:	784b      	ldrb	r3, [r1, #1]
    355a:	780d      	ldrb	r5, [r1, #0]
    355c:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    355e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3562:	78cd      	ldrb	r5, [r1, #3]
    3564:	432b      	orrs	r3, r5
    3566:	788d      	ldrb	r5, [r1, #2]
    3568:	3104      	adds	r1, #4
    356a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    356e:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3570:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3574:	d1f0      	bne.n	3558 <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3576:	4c17      	ldr	r4, [pc, #92]	; (35d4 <tc_aes128_set_encrypt_key+0xa8>)
    3578:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    357a:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    357c:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    357e:	d118      	bne.n	35b2 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    3580:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3584:	0e1a      	lsrs	r2, r3, #24
    3586:	5ca5      	ldrb	r5, [r4, r2]
    3588:	b2da      	uxtb	r2, r3
    358a:	5ca2      	ldrb	r2, [r4, r2]
    358c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3590:	f3c3 4507 	ubfx	r5, r3, #16, #8
    3594:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3598:	5d65      	ldrb	r5, [r4, r5]
    359a:	5ce3      	ldrb	r3, [r4, r3]
    359c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    35a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    35a4:	ad0c      	add	r5, sp, #48	; 0x30
    35a6:	f021 0303 	bic.w	r3, r1, #3
    35aa:	442b      	add	r3, r5
    35ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    35b0:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    35b2:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    35b6:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    35b8:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    35ba:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    35bc:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    35be:	d1dc      	bne.n	357a <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    35c0:	2001      	movs	r0, #1
}
    35c2:	b00d      	add	sp, #52	; 0x34
    35c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    35c6:	4638      	mov	r0, r7
    35c8:	e7fb      	b.n	35c2 <tc_aes128_set_encrypt_key+0x96>
    35ca:	4620      	mov	r0, r4
    35cc:	e7f9      	b.n	35c2 <tc_aes128_set_encrypt_key+0x96>
    35ce:	bf00      	nop
    35d0:	00023540 	.word	0x00023540
    35d4:	00024274 	.word	0x00024274

000035d8 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    35d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    35dc:	4615      	mov	r5, r2
    35de:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    35e0:	4607      	mov	r7, r0
    35e2:	2800      	cmp	r0, #0
    35e4:	d059      	beq.n	369a <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    35e6:	2900      	cmp	r1, #0
    35e8:	d05a      	beq.n	36a0 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    35ea:	2a00      	cmp	r2, #0
    35ec:	d05a      	beq.n	36a4 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    35ee:	2310      	movs	r3, #16
    35f0:	460a      	mov	r2, r1
    35f2:	4668      	mov	r0, sp
    35f4:	4619      	mov	r1, r3
    35f6:	f019 fdeb 	bl	1d1d0 <_copy>
	add_round_key(state, s->words);
    35fa:	4629      	mov	r1, r5
    35fc:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    35fe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 36a8 <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
    3602:	f01a fcf0 	bl	1dfe6 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    3606:	f105 0610 	add.w	r6, r5, #16
    360a:	46c8      	mov	r8, r9
    360c:	35a0      	adds	r5, #160	; 0xa0
    360e:	466c      	mov	r4, sp
{
    3610:	466a      	mov	r2, sp
    3612:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    3614:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3616:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    3618:	f819 1001 	ldrb.w	r1, [r9, r1]
    361c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3620:	d1f8      	bne.n	3614 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
    3622:	4668      	mov	r0, sp
    3624:	f01a fd24 	bl	1e070 <shift_rows>
	mult_row_column(t, s);
    3628:	4669      	mov	r1, sp
    362a:	a804      	add	r0, sp, #16
    362c:	f01a fd59 	bl	1e0e2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    3630:	a901      	add	r1, sp, #4
    3632:	a805      	add	r0, sp, #20
    3634:	f01a fd55 	bl	1e0e2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    3638:	a902      	add	r1, sp, #8
    363a:	a806      	add	r0, sp, #24
    363c:	f01a fd51 	bl	1e0e2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    3640:	a903      	add	r1, sp, #12
    3642:	a807      	add	r0, sp, #28
    3644:	f01a fd4d 	bl	1e0e2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3648:	2310      	movs	r3, #16
    364a:	4619      	mov	r1, r3
    364c:	eb0d 0203 	add.w	r2, sp, r3
    3650:	4668      	mov	r0, sp
    3652:	f019 fdbd 	bl	1d1d0 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    3656:	4631      	mov	r1, r6
    3658:	4668      	mov	r0, sp
    365a:	3610      	adds	r6, #16
    365c:	f01a fcc3 	bl	1dfe6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    3660:	42ae      	cmp	r6, r5
    3662:	d1d4      	bne.n	360e <tc_aes_encrypt+0x36>
    3664:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
    3666:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    3668:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
    366a:	f818 3003 	ldrb.w	r3, [r8, r3]
    366e:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3672:	d1f8      	bne.n	3666 <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
    3674:	4668      	mov	r0, sp
    3676:	f01a fcfb 	bl	1e070 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    367a:	4629      	mov	r1, r5
    367c:	4668      	mov	r0, sp
    367e:	f01a fcb2 	bl	1dfe6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    3682:	2310      	movs	r3, #16
    3684:	4619      	mov	r1, r3
    3686:	466a      	mov	r2, sp
    3688:	4638      	mov	r0, r7
    368a:	f019 fda1 	bl	1d1d0 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    368e:	4668      	mov	r0, sp
    3690:	2210      	movs	r2, #16
    3692:	4631      	mov	r1, r6
    3694:	f019 fda9 	bl	1d1ea <_set>

	return TC_CRYPTO_SUCCESS;
    3698:	2001      	movs	r0, #1
}
    369a:	b009      	add	sp, #36	; 0x24
    369c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    36a0:	4608      	mov	r0, r1
    36a2:	e7fa      	b.n	369a <tc_aes_encrypt+0xc2>
    36a4:	4610      	mov	r0, r2
    36a6:	e7f8      	b.n	369a <tc_aes_encrypt+0xc2>
    36a8:	00024274 	.word	0x00024274

000036ac <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    36ac:	4b0c      	ldr	r3, [pc, #48]	; (36e0 <errata_108+0x34>)
    36ae:	781b      	ldrb	r3, [r3, #0]
    36b0:	2b06      	cmp	r3, #6
    36b2:	d110      	bne.n	36d6 <errata_108+0x2a>
    36b4:	4b0b      	ldr	r3, [pc, #44]	; (36e4 <errata_108+0x38>)
    36b6:	681b      	ldr	r3, [r3, #0]
    36b8:	071a      	lsls	r2, r3, #28
    36ba:	d10c      	bne.n	36d6 <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    36bc:	4b0a      	ldr	r3, [pc, #40]	; (36e8 <errata_108+0x3c>)
    36be:	6818      	ldr	r0, [r3, #0]
    36c0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    36c4:	2b30      	cmp	r3, #48	; 0x30
    36c6:	d008      	beq.n	36da <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    36c8:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    36cc:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    36d0:	4258      	negs	r0, r3
    36d2:	4158      	adcs	r0, r3
    36d4:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    36d6:	2000      	movs	r0, #0
    36d8:	4770      	bx	lr
            return true;
    36da:	2001      	movs	r0, #1
}
    36dc:	4770      	bx	lr
    36de:	bf00      	nop
    36e0:	f0000fe0 	.word	0xf0000fe0
    36e4:	f0000fe4 	.word	0xf0000fe4
    36e8:	f0000fe8 	.word	0xf0000fe8

000036ec <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    36ec:	4b09      	ldr	r3, [pc, #36]	; (3714 <errata_16+0x28>)
    36ee:	781b      	ldrb	r3, [r3, #0]
    36f0:	2b06      	cmp	r3, #6
    36f2:	d10c      	bne.n	370e <errata_16+0x22>
    36f4:	4b08      	ldr	r3, [pc, #32]	; (3718 <errata_16+0x2c>)
    36f6:	681b      	ldr	r3, [r3, #0]
    36f8:	071a      	lsls	r2, r3, #28
    36fa:	d108      	bne.n	370e <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    36fc:	4b07      	ldr	r3, [pc, #28]	; (371c <errata_16+0x30>)
    36fe:	6818      	ldr	r0, [r3, #0]
    3700:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    3704:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3708:	4258      	negs	r0, r3
    370a:	4158      	adcs	r0, r3
    370c:	4770      	bx	lr
            return true;
        }
    }

    return false;
    370e:	2000      	movs	r0, #0
}
    3710:	4770      	bx	lr
    3712:	bf00      	nop
    3714:	f0000fe0 	.word	0xf0000fe0
    3718:	f0000fe4 	.word	0xf0000fe4
    371c:	f0000fe8 	.word	0xf0000fe8

00003720 <SystemInit>:
{
    3720:	b508      	push	{r3, lr}
    if (errata_12()){
    3722:	f7ff ffc3 	bl	36ac <errata_108>
    3726:	b128      	cbz	r0, 3734 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3728:	4b78      	ldr	r3, [pc, #480]	; (390c <SystemInit+0x1ec>)
    372a:	4a79      	ldr	r2, [pc, #484]	; (3910 <SystemInit+0x1f0>)
    372c:	681b      	ldr	r3, [r3, #0]
    372e:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3732:	6013      	str	r3, [r2, #0]
    if (errata_16()){
    3734:	f7ff ffda 	bl	36ec <errata_16>
    3738:	b110      	cbz	r0, 3740 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    373a:	4b76      	ldr	r3, [pc, #472]	; (3914 <SystemInit+0x1f4>)
    373c:	4a76      	ldr	r2, [pc, #472]	; (3918 <SystemInit+0x1f8>)
    373e:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    3740:	f7ff ffb4 	bl	36ac <errata_108>
    3744:	b128      	cbz	r0, 3752 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3746:	4b75      	ldr	r3, [pc, #468]	; (391c <SystemInit+0x1fc>)
    3748:	4a75      	ldr	r2, [pc, #468]	; (3920 <SystemInit+0x200>)
    374a:	681b      	ldr	r3, [r3, #0]
    374c:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3750:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    3752:	f7ff ffcb 	bl	36ec <errata_16>
    3756:	b120      	cbz	r0, 3762 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    3758:	4a72      	ldr	r2, [pc, #456]	; (3924 <SystemInit+0x204>)
    375a:	68d3      	ldr	r3, [r2, #12]
    375c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3760:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    3762:	f7ff ffa3 	bl	36ac <errata_108>
    3766:	b140      	cbz	r0, 377a <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    3768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    376c:	2200      	movs	r2, #0
    376e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    3772:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    3776:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    377a:	f7ff ffb7 	bl	36ec <errata_16>
    377e:	b110      	cbz	r0, 3786 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    3780:	4b69      	ldr	r3, [pc, #420]	; (3928 <SystemInit+0x208>)
    3782:	2203      	movs	r2, #3
    3784:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    3786:	f7ff ffb1 	bl	36ec <errata_16>
    378a:	b140      	cbz	r0, 379e <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    378c:	4b67      	ldr	r3, [pc, #412]	; (392c <SystemInit+0x20c>)
    378e:	2205      	movs	r2, #5
    3790:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    3792:	2201      	movs	r2, #1
    3794:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    3796:	2200      	movs	r2, #0
    3798:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    379a:	223f      	movs	r2, #63	; 0x3f
    379c:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    379e:	4b64      	ldr	r3, [pc, #400]	; (3930 <SystemInit+0x210>)
    37a0:	781b      	ldrb	r3, [r3, #0]
    37a2:	2b06      	cmp	r3, #6
    37a4:	d150      	bne.n	3848 <SystemInit+0x128>
    37a6:	4b63      	ldr	r3, [pc, #396]	; (3934 <SystemInit+0x214>)
    37a8:	681b      	ldr	r3, [r3, #0]
    37aa:	0719      	lsls	r1, r3, #28
    37ac:	d14c      	bne.n	3848 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    37ae:	4b62      	ldr	r3, [pc, #392]	; (3938 <SystemInit+0x218>)
    37b0:	681b      	ldr	r3, [r3, #0]
    37b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    37b6:	2b50      	cmp	r3, #80	; 0x50
    37b8:	d146      	bne.n	3848 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    37ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    37be:	4b5f      	ldr	r3, [pc, #380]	; (393c <SystemInit+0x21c>)
    37c0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    37c4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    37c8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    37cc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    37d0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    37d4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    37d8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    37dc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    37e0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    37e4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    37e8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    37ec:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    37f0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    37f4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    37f8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    37fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3800:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3804:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3808:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    380c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3810:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3814:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3818:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    381c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3820:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3824:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3828:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    382c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3830:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3834:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3838:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    383c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3840:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3844:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    3848:	f7ff ff30 	bl	36ac <errata_108>
    384c:	b128      	cbz	r0, 385a <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    384e:	4b3c      	ldr	r3, [pc, #240]	; (3940 <SystemInit+0x220>)
    3850:	4a3c      	ldr	r2, [pc, #240]	; (3944 <SystemInit+0x224>)
    3852:	681b      	ldr	r3, [r3, #0]
    3854:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    3858:	6013      	str	r3, [r2, #0]
    if (errata_136()){
    385a:	f7ff ff27 	bl	36ac <errata_108>
    385e:	b148      	cbz	r0, 3874 <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3864:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3868:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    386a:	bf44      	itt	mi
    386c:	f06f 0201 	mvnmi.w	r2, #1
    3870:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
    3874:	4b34      	ldr	r3, [pc, #208]	; (3948 <SystemInit+0x228>)
    3876:	681b      	ldr	r3, [r3, #0]
    3878:	2b06      	cmp	r3, #6
    387a:	d108      	bne.n	388e <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
    387c:	4b33      	ldr	r3, [pc, #204]	; (394c <SystemInit+0x22c>)
    387e:	681b      	ldr	r3, [r3, #0]
    3880:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    3882:	bf01      	itttt	eq
    3884:	4a32      	ldreq	r2, [pc, #200]	; (3950 <SystemInit+0x230>)
    3886:	6813      	ldreq	r3, [r2, #0]
    3888:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
    388c:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    388e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3892:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3896:	2a00      	cmp	r2, #0
    3898:	db03      	blt.n	38a2 <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    389a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    389e:	2b00      	cmp	r3, #0
    38a0:	da2f      	bge.n	3902 <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    38a2:	4b2c      	ldr	r3, [pc, #176]	; (3954 <SystemInit+0x234>)
    38a4:	2201      	movs	r2, #1
    38a6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    38aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    38ae:	2a00      	cmp	r2, #0
    38b0:	d0fb      	beq.n	38aa <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
    38b2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    38b6:	2115      	movs	r1, #21
    38b8:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    38bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    38c0:	2a00      	cmp	r2, #0
    38c2:	d0fb      	beq.n	38bc <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
    38c4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    38c8:	2215      	movs	r2, #21
    38ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    38ce:	4b21      	ldr	r3, [pc, #132]	; (3954 <SystemInit+0x234>)
    38d0:	461a      	mov	r2, r3
    38d2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    38d6:	2900      	cmp	r1, #0
    38d8:	d0fb      	beq.n	38d2 <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    38da:	2100      	movs	r1, #0
    38dc:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    38e0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    38e4:	2b00      	cmp	r3, #0
    38e6:	d0fb      	beq.n	38e0 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    38e8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    38ec:	491a      	ldr	r1, [pc, #104]	; (3958 <SystemInit+0x238>)
    38ee:	4b1b      	ldr	r3, [pc, #108]	; (395c <SystemInit+0x23c>)
    38f0:	68ca      	ldr	r2, [r1, #12]
    38f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    38f6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    38f8:	60cb      	str	r3, [r1, #12]
    38fa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    38fe:	bf00      	nop
    3900:	e7fd      	b.n	38fe <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3902:	4b17      	ldr	r3, [pc, #92]	; (3960 <SystemInit+0x240>)
    3904:	4a17      	ldr	r2, [pc, #92]	; (3964 <SystemInit+0x244>)
    3906:	601a      	str	r2, [r3, #0]
}
    3908:	bd08      	pop	{r3, pc}
    390a:	bf00      	nop
    390c:	10000324 	.word	0x10000324
    3910:	40013540 	.word	0x40013540
    3914:	4007c074 	.word	0x4007c074
    3918:	baadf00d 	.word	0xbaadf00d
    391c:	10000244 	.word	0x10000244
    3920:	4000053c 	.word	0x4000053c
    3924:	e000edf0 	.word	0xe000edf0
    3928:	400005a0 	.word	0x400005a0
    392c:	40005610 	.word	0x40005610
    3930:	f0000fe0 	.word	0xf0000fe0
    3934:	f0000fe4 	.word	0xf0000fe4
    3938:	f0000fe8 	.word	0xf0000fe8
    393c:	4000c000 	.word	0x4000c000
    3940:	10000258 	.word	0x10000258
    3944:	40000ee4 	.word	0x40000ee4
    3948:	10000130 	.word	0x10000130
    394c:	10000134 	.word	0x10000134
    3950:	4000173c 	.word	0x4000173c
    3954:	4001e000 	.word	0x4001e000
    3958:	e000ed00 	.word	0xe000ed00
    395c:	05fa0004 	.word	0x05fa0004
    3960:	20007650 	.word	0x20007650
    3964:	03d09000 	.word	0x03d09000

00003968 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    3968:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    396a:	4c11      	ldr	r4, [pc, #68]	; (39b0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    396c:	4a11      	ldr	r2, [pc, #68]	; (39b4 <_DoInit+0x4c>)
    396e:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3970:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3972:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3976:	4b10      	ldr	r3, [pc, #64]	; (39b8 <_DoInit+0x50>)
    3978:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    397a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    397c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    3980:	4a0e      	ldr	r2, [pc, #56]	; (39bc <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    3982:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    3984:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    3986:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    3988:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    398a:	490d      	ldr	r1, [pc, #52]	; (39c0 <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
    398c:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
    398e:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    3990:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3992:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    3994:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3996:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3998:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    399a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    399c:	f01b fdcf 	bl	1f53e <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    39a0:	4908      	ldr	r1, [pc, #32]	; (39c4 <_DoInit+0x5c>)
    39a2:	4620      	mov	r0, r4
    39a4:	f01b fdcb 	bl	1f53e <strcpy>
  p->acID[6] = ' ';
    39a8:	2320      	movs	r3, #32
    39aa:	71a3      	strb	r3, [r4, #6]
}
    39ac:	bd10      	pop	{r4, pc}
    39ae:	bf00      	nop
    39b0:	200002b8 	.word	0x200002b8
    39b4:	00024374 	.word	0x00024374
    39b8:	20001d5e 	.word	0x20001d5e
    39bc:	20001d4e 	.word	0x20001d4e
    39c0:	0002437d 	.word	0x0002437d
    39c4:	00024381 	.word	0x00024381

000039c8 <SEGGER_RTT_WriteSkipNoLock>:
  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    39c8:	f8df c088 	ldr.w	ip, [pc, #136]	; 3a54 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    39cc:	2318      	movs	r3, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    39ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  RdOff = pRing->RdOff;
    39d2:	fb03 c700 	mla	r7, r3, r0, ip
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    39d6:	468a      	mov	sl, r1
  RdOff = pRing->RdOff;
    39d8:	6abe      	ldr	r6, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
    39da:	6a7c      	ldr	r4, [r7, #36]	; 0x24
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
    39dc:	42a6      	cmp	r6, r4
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    39de:	4615      	mov	r5, r2
  if (RdOff <= WrOff) {
    39e0:	d82d      	bhi.n	3a3e <SEGGER_RTT_WriteSkipNoLock+0x76>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
    39e2:	f8d7 9020 	ldr.w	r9, [r7, #32]
    39e6:	eba9 0804 	sub.w	r8, r9, r4
    39ea:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {
    39ee:	4596      	cmp	lr, r2
    39f0:	d309      	bcc.n	3a06 <SEGGER_RTT_WriteSkipNoLock+0x3e>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    39f2:	fb00 3303 	mla	r3, r0, r3, r3
    39f6:	449c      	add	ip, r3
    39f8:	f8dc 0004 	ldr.w	r0, [ip, #4]
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    39fc:	4420      	add	r0, r4
    39fe:	f01b fe03 	bl	1f608 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    3a02:	442c      	add	r4, r5
    3a04:	e00d      	b.n	3a22 <SEGGER_RTT_WriteSkipNoLock+0x5a>
    Avail += RdOff;
    3a06:	4476      	add	r6, lr
    if (Avail >= NumBytes) {
    3a08:	42b2      	cmp	r2, r6
    3a0a:	d821      	bhi.n	3a50 <SEGGER_RTT_WriteSkipNoLock+0x88>
      if (Rem > NumBytes) {
    3a0c:	fb00 3303 	mla	r3, r0, r3, r3
    3a10:	eb0c 0603 	add.w	r6, ip, r3
    3a14:	4590      	cmp	r8, r2
    3a16:	6870      	ldr	r0, [r6, #4]
    3a18:	4420      	add	r0, r4
    3a1a:	4414      	add	r4, r2
    3a1c:	d905      	bls.n	3a2a <SEGGER_RTT_WriteSkipNoLock+0x62>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    3a1e:	f01b fdf3 	bl	1f608 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    3a22:	627c      	str	r4, [r7, #36]	; 0x24
#endif
      return 1;
    3a24:	2001      	movs	r0, #1
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
}
    3a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    3a2a:	4642      	mov	r2, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    3a2c:	eba4 0409 	sub.w	r4, r4, r9
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    3a30:	f01b fdea 	bl	1f608 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    3a34:	4622      	mov	r2, r4
    3a36:	eb0a 0108 	add.w	r1, sl, r8
    3a3a:	6870      	ldr	r0, [r6, #4]
    3a3c:	e7ef      	b.n	3a1e <SEGGER_RTT_WriteSkipNoLock+0x56>
    Avail = RdOff - WrOff - 1u;
    3a3e:	3e01      	subs	r6, #1
    3a40:	1b36      	subs	r6, r6, r4
    if (Avail >= NumBytes) {
    3a42:	42b2      	cmp	r2, r6
    3a44:	d804      	bhi.n	3a50 <SEGGER_RTT_WriteSkipNoLock+0x88>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    3a46:	fb00 3303 	mla	r3, r0, r3, r3
    3a4a:	4463      	add	r3, ip
    3a4c:	6858      	ldr	r0, [r3, #4]
    3a4e:	e7d5      	b.n	39fc <SEGGER_RTT_WriteSkipNoLock+0x34>
  return 0;
    3a50:	2000      	movs	r0, #0
    3a52:	e7e8      	b.n	3a26 <SEGGER_RTT_WriteSkipNoLock+0x5e>
    3a54:	200002b8 	.word	0x200002b8

00003a58 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    3a5a:	4c18      	ldr	r4, [pc, #96]	; (3abc <SEGGER_RTT_WriteNoLock+0x64>)
    3a5c:	2318      	movs	r3, #24
    3a5e:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    3a62:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    3a66:	4425      	add	r5, r4
  switch (pRing->Flags) {
    3a68:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    3a6a:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3a6c:	460f      	mov	r7, r1
    3a6e:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    3a70:	d011      	beq.n	3a96 <SEGGER_RTT_WriteNoLock+0x3e>
    3a72:	b124      	cbz	r4, 3a7e <SEGGER_RTT_WriteNoLock+0x26>
    3a74:	2c02      	cmp	r4, #2
    3a76:	d01b      	beq.n	3ab0 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    3a78:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    3a7a:	4620      	mov	r0, r4
    3a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    3a7e:	4628      	mov	r0, r5
    3a80:	f01a fc6d 	bl	1e35e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    3a84:	42b0      	cmp	r0, r6
    3a86:	d3f8      	bcc.n	3a7a <SEGGER_RTT_WriteNoLock+0x22>
      _WriteNoCheck(pRing, pData, NumBytes);
    3a88:	4632      	mov	r2, r6
    3a8a:	4639      	mov	r1, r7
    3a8c:	4628      	mov	r0, r5
    3a8e:	f01a fc74 	bl	1e37a <_WriteNoCheck>
    3a92:	4634      	mov	r4, r6
    3a94:	e7f1      	b.n	3a7a <SEGGER_RTT_WriteNoLock+0x22>
    Avail = _GetAvailWriteSpace(pRing);
    3a96:	4628      	mov	r0, r5
    3a98:	f01a fc61 	bl	1e35e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    3a9c:	4286      	cmp	r6, r0
    3a9e:	4634      	mov	r4, r6
    3aa0:	bf28      	it	cs
    3aa2:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    3aa4:	4622      	mov	r2, r4
    3aa6:	4639      	mov	r1, r7
    3aa8:	4628      	mov	r0, r5
    3aaa:	f01a fc66 	bl	1e37a <_WriteNoCheck>
    break;
    3aae:	e7e4      	b.n	3a7a <SEGGER_RTT_WriteNoLock+0x22>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    3ab0:	4628      	mov	r0, r5
}
    3ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    3ab6:	f01a bc7a 	b.w	1e3ae <_WriteBlocking>
    3aba:	bf00      	nop
    3abc:	200002b8 	.word	0x200002b8

00003ac0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    3ac0:	4a03      	ldr	r2, [pc, #12]	; (3ad0 <SEGGER_RTT_HasDataUp+0x10>)
    3ac2:	2318      	movs	r3, #24
    3ac4:	fb03 2300 	mla	r3, r3, r0, r2
    3ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    3aca:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    3acc:	1a80      	subs	r0, r0, r2
    3ace:	4770      	bx	lr
    3ad0:	200002b8 	.word	0x200002b8

00003ad4 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    3ad4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    3ad6:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    3ad8:	a901      	add	r1, sp, #4
    3ada:	4808      	ldr	r0, [pc, #32]	; (3afc <z_log_msg_std_alloc+0x28>)
	union log_msg_chunk *msg = NULL;
    3adc:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    3ade:	f017 ff1f 	bl	1b920 <k_mem_slab_alloc>
	if (err != 0) {
    3ae2:	b110      	cbz	r0, 3aea <z_log_msg_std_alloc+0x16>
		msg = log_msg_no_space_handle();
    3ae4:	f000 f9fc 	bl	3ee0 <log_msg_no_space_handle>
    3ae8:	9001      	str	r0, [sp, #4]
	return msg;
    3aea:	9801      	ldr	r0, [sp, #4]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
    3aec:	b118      	cbz	r0, 3af6 <z_log_msg_std_alloc+0x22>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    3aee:	2301      	movs	r3, #1
    3af0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0;
    3af2:	2300      	movs	r3, #0
    3af4:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    3af6:	b003      	add	sp, #12
    3af8:	f85d fb04 	ldr.w	pc, [sp], #4
    3afc:	20000400 	.word	0x20000400

00003b00 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    3b00:	b530      	push	{r4, r5, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    3b02:	4d0c      	ldr	r5, [pc, #48]	; (3b34 <enable_logger+0x34>)
    3b04:	490c      	ldr	r1, [pc, #48]	; (3b38 <enable_logger+0x38>)
    3b06:	b087      	sub	sp, #28
    3b08:	2400      	movs	r4, #0
    3b0a:	230e      	movs	r3, #14
    3b0c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3b10:	f44f 7240 	mov.w	r2, #768	; 0x300
    3b14:	4b09      	ldr	r3, [pc, #36]	; (3b3c <enable_logger+0x3c>)
    3b16:	e9cd 4404 	strd	r4, r4, [sp, #16]
    3b1a:	e9cd 4400 	strd	r4, r4, [sp]
    3b1e:	4628      	mov	r0, r5
    3b20:	f018 fc58 	bl	1c3d4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    3b24:	4628      	mov	r0, r5
    3b26:	4906      	ldr	r1, [pc, #24]	; (3b40 <enable_logger+0x40>)
    3b28:	f01f f9a8 	bl	22e7c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    3b2c:	4620      	mov	r0, r4
    3b2e:	b007      	add	sp, #28
    3b30:	bd30      	pop	{r4, r5, pc}
    3b32:	bf00      	nop
    3b34:	20000390 	.word	0x20000390
    3b38:	20002348 	.word	0x20002348
    3b3c:	00003df1 	.word	0x00003df1
    3b40:	00024388 	.word	0x00024388

00003b44 <log_core_init>:
{
    3b44:	b508      	push	{r3, lr}
		log_msg_pool_init();
    3b46:	f000 f9c1 	bl	3ecc <log_msg_pool_init>
		log_list_init(&list);
    3b4a:	4809      	ldr	r0, [pc, #36]	; (3b70 <log_core_init+0x2c>)
    3b4c:	f01a fc5f 	bl	1e40e <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    3b50:	2304      	movs	r3, #4
    3b52:	2228      	movs	r2, #40	; 0x28
    3b54:	4807      	ldr	r0, [pc, #28]	; (3b74 <log_core_init+0x30>)
    3b56:	4908      	ldr	r1, [pc, #32]	; (3b78 <log_core_init+0x34>)
    3b58:	f01e ff6e 	bl	22a38 <k_mem_slab_init>
	timestamp_func = timestamp_get;
    3b5c:	4b07      	ldr	r3, [pc, #28]	; (3b7c <log_core_init+0x38>)
    3b5e:	4a08      	ldr	r2, [pc, #32]	; (3b80 <log_core_init+0x3c>)
    3b60:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3b62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    3b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    3b6a:	f000 bbcb 	b.w	4304 <log_output_timestamp_freq_set>
    3b6e:	bf00      	nop
    3b70:	2000036c 	.word	0x2000036c
    3b74:	20000374 	.word	0x20000374
    3b78:	20005518 	.word	0x20005518
    3b7c:	20007654 	.word	0x20007654
    3b80:	0001e43f 	.word	0x0001e43f

00003b84 <dropped_notify>:
{
    3b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3b86:	4b0f      	ldr	r3, [pc, #60]	; (3bc4 <dropped_notify+0x40>)
    3b88:	f3bf 8f5b 	dmb	ish
    3b8c:	2500      	movs	r5, #0
    3b8e:	e853 7f00 	ldrex	r7, [r3]
    3b92:	e843 5200 	strex	r2, r5, [r3]
    3b96:	2a00      	cmp	r2, #0
    3b98:	d1f9      	bne.n	3b8e <dropped_notify+0xa>
    3b9a:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    3b9e:	4c0a      	ldr	r4, [pc, #40]	; (3bc8 <dropped_notify+0x44>)
    3ba0:	4e0a      	ldr	r6, [pc, #40]	; (3bcc <dropped_notify+0x48>)
    3ba2:	1b36      	subs	r6, r6, r4
    3ba4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3ba6:	42b5      	cmp	r5, r6
    3ba8:	db00      	blt.n	3bac <dropped_notify+0x28>
}
    3baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend);
	return backend->cb->active;
    3bac:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3bae:	795b      	ldrb	r3, [r3, #5]
    3bb0:	b12b      	cbz	r3, 3bbe <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    3bb2:	6823      	ldr	r3, [r4, #0]
    3bb4:	68db      	ldr	r3, [r3, #12]
    3bb6:	b113      	cbz	r3, 3bbe <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    3bb8:	4639      	mov	r1, r7
    3bba:	4620      	mov	r0, r4
    3bbc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3bbe:	3501      	adds	r5, #1
    3bc0:	3410      	adds	r4, #16
    3bc2:	e7f0      	b.n	3ba6 <dropped_notify+0x22>
    3bc4:	20000364 	.word	0x20000364
    3bc8:	0002351c 	.word	0x0002351c
    3bcc:	0002353c 	.word	0x0002353c

00003bd0 <log_process>:
	if (!backend_attached && !bypass) {
    3bd0:	4b23      	ldr	r3, [pc, #140]	; (3c60 <log_process+0x90>)
    3bd2:	781b      	ldrb	r3, [r3, #0]
{
    3bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bd8:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    3bda:	b903      	cbnz	r3, 3bde <log_process+0xe>
    3bdc:	b350      	cbz	r0, 3c34 <log_process+0x64>
	__asm__ volatile(
    3bde:	f04f 0320 	mov.w	r3, #32
    3be2:	f3ef 8411 	mrs	r4, BASEPRI
    3be6:	f383 8811 	msr	BASEPRI, r3
	msg = log_list_head_get(&list);
    3bea:	481e      	ldr	r0, [pc, #120]	; (3c64 <log_process+0x94>)
    3bec:	f01a fc1f 	bl	1e42e <log_list_head_get>
    3bf0:	4607      	mov	r7, r0
	__asm__ volatile(
    3bf2:	f384 8811 	msr	BASEPRI, r4
    3bf6:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    3bfa:	b178      	cbz	r0, 3c1c <log_process+0x4c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3bfc:	f3bf 8f5b 	dmb	ish
    3c00:	4b19      	ldr	r3, [pc, #100]	; (3c68 <log_process+0x98>)
    3c02:	e853 2f00 	ldrex	r2, [r3]
    3c06:	3a01      	subs	r2, #1
    3c08:	e843 2100 	strex	r1, r2, [r3]
    3c0c:	2900      	cmp	r1, #0
    3c0e:	d1f8      	bne.n	3c02 <log_process+0x32>
    3c10:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    3c14:	b18d      	cbz	r5, 3c3a <log_process+0x6a>
	log_msg_put(msg);
    3c16:	4638      	mov	r0, r7
    3c18:	f01a fcf1 	bl	1e5fe <log_msg_put>
	if (!bypass && dropped_cnt) {
    3c1c:	b925      	cbnz	r5, 3c28 <log_process+0x58>
    3c1e:	4b13      	ldr	r3, [pc, #76]	; (3c6c <log_process+0x9c>)
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	b10b      	cbz	r3, 3c28 <log_process+0x58>
		dropped_notify();
    3c24:	f7ff ffae 	bl	3b84 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    3c28:	480e      	ldr	r0, [pc, #56]	; (3c64 <log_process+0x94>)
    3c2a:	f01a fbfe 	bl	1e42a <log_list_head_peek>
    3c2e:	1c05      	adds	r5, r0, #0
    3c30:	bf18      	it	ne
    3c32:	2501      	movne	r5, #1
}
    3c34:	4628      	mov	r0, r5
    3c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __log_backends_end - __log_backends_start;
    3c3a:	4c0d      	ldr	r4, [pc, #52]	; (3c70 <log_process+0xa0>)
    3c3c:	4e0d      	ldr	r6, [pc, #52]	; (3c74 <log_process+0xa4>)
    3c3e:	1b36      	subs	r6, r6, r4
    3c40:	1136      	asrs	r6, r6, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    3c42:	46a8      	mov	r8, r5
    3c44:	45b0      	cmp	r8, r6
    3c46:	dae6      	bge.n	3c16 <log_process+0x46>
	return backend->cb->active;
    3c48:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    3c4a:	795b      	ldrb	r3, [r3, #5]
    3c4c:	b123      	cbz	r3, 3c58 <log_process+0x88>
	backend->api->put(backend, msg);
    3c4e:	6823      	ldr	r3, [r4, #0]
    3c50:	4639      	mov	r1, r7
    3c52:	681b      	ldr	r3, [r3, #0]
    3c54:	4620      	mov	r0, r4
    3c56:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    3c58:	f108 0801 	add.w	r8, r8, #1
    3c5c:	3410      	adds	r4, #16
    3c5e:	e7f1      	b.n	3c44 <log_process+0x74>
    3c60:	2000215e 	.word	0x2000215e
    3c64:	2000036c 	.word	0x2000036c
    3c68:	20000360 	.word	0x20000360
    3c6c:	20000364 	.word	0x20000364
    3c70:	0002351c 	.word	0x0002351c
    3c74:	0002353c 	.word	0x0002353c

00003c78 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    3c78:	4b19      	ldr	r3, [pc, #100]	; (3ce0 <msg_finalize+0x68>)
{
    3c7a:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    3c7c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    3c7e:	8141      	strh	r1, [r0, #10]
{
    3c80:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    3c82:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3c84:	4c17      	ldr	r4, [pc, #92]	; (3ce4 <msg_finalize+0x6c>)
    3c86:	60e8      	str	r0, [r5, #12]
    3c88:	f3bf 8f5b 	dmb	ish
    3c8c:	e854 3f00 	ldrex	r3, [r4]
    3c90:	3301      	adds	r3, #1
    3c92:	e844 3200 	strex	r2, r3, [r4]
    3c96:	2a00      	cmp	r2, #0
    3c98:	d1f8      	bne.n	3c8c <msg_finalize+0x14>
    3c9a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    3c9e:	f04f 0320 	mov.w	r3, #32
    3ca2:	f3ef 8611 	mrs	r6, BASEPRI
    3ca6:	f383 8811 	msr	BASEPRI, r3
	log_list_add_tail(&list, msg);
    3caa:	480f      	ldr	r0, [pc, #60]	; (3ce8 <msg_finalize+0x70>)
    3cac:	4629      	mov	r1, r5
    3cae:	f01a fbb2 	bl	1e416 <log_list_add_tail>
	__asm__ volatile(
    3cb2:	f386 8811 	msr	BASEPRI, r6
    3cb6:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    3cba:	4b0c      	ldr	r3, [pc, #48]	; (3cec <msg_finalize+0x74>)
    3cbc:	781b      	ldrb	r3, [r3, #0]
    3cbe:	b123      	cbz	r3, 3cca <msg_finalize+0x52>
		(void)log_process(false);
    3cc0:	2000      	movs	r0, #0
}
    3cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)log_process(false);
    3cc6:	f7ff bf83 	b.w	3bd0 <log_process>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    3cca:	6823      	ldr	r3, [r4, #0]
    3ccc:	2b0a      	cmp	r3, #10
    3cce:	d106      	bne.n	3cde <msg_finalize+0x66>
		    (proc_tid != NULL)) {
    3cd0:	4b07      	ldr	r3, [pc, #28]	; (3cf0 <msg_finalize+0x78>)
    3cd2:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    3cd4:	b118      	cbz	r0, 3cde <msg_finalize+0x66>
}
    3cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    3cda:	f018 ba9d 	b.w	1c218 <z_impl_k_wakeup>
    3cde:	bd70      	pop	{r4, r5, r6, pc}
    3ce0:	20007654 	.word	0x20007654
    3ce4:	20000360 	.word	0x20000360
    3ce8:	2000036c 	.word	0x2000036c
    3cec:	2000215f 	.word	0x2000215f
    3cf0:	200003fc 	.word	0x200003fc

00003cf4 <log_dropped>:
    3cf4:	4b06      	ldr	r3, [pc, #24]	; (3d10 <log_dropped+0x1c>)
    3cf6:	f3bf 8f5b 	dmb	ish
    3cfa:	e853 2f00 	ldrex	r2, [r3]
    3cfe:	3201      	adds	r2, #1
    3d00:	e843 2100 	strex	r1, r2, [r3]
    3d04:	2900      	cmp	r1, #0
    3d06:	d1f8      	bne.n	3cfa <log_dropped+0x6>
    3d08:	f3bf 8f5b 	dmb	ish
}
    3d0c:	4770      	bx	lr
    3d0e:	bf00      	nop
    3d10:	20000364 	.word	0x20000364

00003d14 <log_source_name_get>:
    3d14:	4a04      	ldr	r2, [pc, #16]	; (3d28 <log_source_name_get+0x14>)
    3d16:	4b05      	ldr	r3, [pc, #20]	; (3d2c <log_source_name_get+0x18>)
    3d18:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3d1a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    3d1e:	bf34      	ite	cc
    3d20:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    3d24:	2000      	movcs	r0, #0
}
    3d26:	4770      	bx	lr
    3d28:	000233ec 	.word	0x000233ec
    3d2c:	0002351c 	.word	0x0002351c

00003d30 <log_backend_enable>:
	id += backend - log_backend_get(0);
    3d30:	4b06      	ldr	r3, [pc, #24]	; (3d4c <log_backend_enable+0x1c>)
	log_backend_id_set(backend, id);
    3d32:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    3d34:	1ac3      	subs	r3, r0, r3
    3d36:	111b      	asrs	r3, r3, #4
    3d38:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
    3d3a:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    3d3c:	6842      	ldr	r2, [r0, #4]
	backend->cb->active = true;
    3d3e:	2301      	movs	r3, #1
	backend->cb->ctx = ctx;
    3d40:	6011      	str	r1, [r2, #0]
	backend->cb->active = true;
    3d42:	7153      	strb	r3, [r2, #5]
	backend_attached = true;
    3d44:	4a02      	ldr	r2, [pc, #8]	; (3d50 <log_backend_enable+0x20>)
    3d46:	7013      	strb	r3, [r2, #0]
}
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop
    3d4c:	0002351c 	.word	0x0002351c
    3d50:	2000215e 	.word	0x2000215e

00003d54 <log_init>:
{
    3d54:	b570      	push	{r4, r5, r6, lr}
    3d56:	4b11      	ldr	r3, [pc, #68]	; (3d9c <log_init+0x48>)
    3d58:	f3bf 8f5b 	dmb	ish
    3d5c:	e853 5f00 	ldrex	r5, [r3]
    3d60:	1c6a      	adds	r2, r5, #1
    3d62:	e843 2100 	strex	r1, r2, [r3]
    3d66:	2900      	cmp	r1, #0
    3d68:	d1f8      	bne.n	3d5c <log_init+0x8>
    3d6a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3d6e:	b92d      	cbnz	r5, 3d7c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    3d70:	4c0b      	ldr	r4, [pc, #44]	; (3da0 <log_init+0x4c>)
    3d72:	4e0c      	ldr	r6, [pc, #48]	; (3da4 <log_init+0x50>)
    3d74:	1b36      	subs	r6, r6, r4
    3d76:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    3d78:	42b5      	cmp	r5, r6
    3d7a:	db00      	blt.n	3d7e <log_init+0x2a>
}
    3d7c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3d7e:	7b23      	ldrb	r3, [r4, #12]
    3d80:	b143      	cbz	r3, 3d94 <log_init+0x40>
			if (backend->api->init != NULL) {
    3d82:	6823      	ldr	r3, [r4, #0]
    3d84:	695b      	ldr	r3, [r3, #20]
    3d86:	b103      	cbz	r3, 3d8a <log_init+0x36>
				backend->api->init();
    3d88:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    3d8a:	2204      	movs	r2, #4
    3d8c:	2100      	movs	r1, #0
    3d8e:	4620      	mov	r0, r4
    3d90:	f7ff ffce 	bl	3d30 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3d94:	3501      	adds	r5, #1
    3d96:	3410      	adds	r4, #16
    3d98:	e7ee      	b.n	3d78 <log_init+0x24>
    3d9a:	bf00      	nop
    3d9c:	20000368 	.word	0x20000368
    3da0:	0002351c 	.word	0x0002351c
    3da4:	0002353c 	.word	0x0002353c

00003da8 <log_panic>:
{
    3da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    3daa:	4f0e      	ldr	r7, [pc, #56]	; (3de4 <log_panic+0x3c>)
    3dac:	783d      	ldrb	r5, [r7, #0]
    3dae:	b975      	cbnz	r5, 3dce <log_panic+0x26>
    3db0:	4c0d      	ldr	r4, [pc, #52]	; (3de8 <log_panic+0x40>)
    3db2:	4e0e      	ldr	r6, [pc, #56]	; (3dec <log_panic+0x44>)
	log_init();
    3db4:	f7ff ffce 	bl	3d54 <log_init>
    3db8:	1b36      	subs	r6, r6, r4
    3dba:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3dbc:	42b5      	cmp	r5, r6
    3dbe:	db07      	blt.n	3dd0 <log_panic+0x28>
		while (log_process(false) == true) {
    3dc0:	2000      	movs	r0, #0
    3dc2:	f7ff ff05 	bl	3bd0 <log_process>
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d1fa      	bne.n	3dc0 <log_panic+0x18>
	panic_mode = true;
    3dca:	2301      	movs	r3, #1
    3dcc:	703b      	strb	r3, [r7, #0]
}
    3dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    3dd0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3dd2:	795b      	ldrb	r3, [r3, #5]
    3dd4:	b11b      	cbz	r3, 3dde <log_panic+0x36>
	backend->api->panic(backend);
    3dd6:	6823      	ldr	r3, [r4, #0]
    3dd8:	4620      	mov	r0, r4
    3dda:	691b      	ldr	r3, [r3, #16]
    3ddc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3dde:	3501      	adds	r5, #1
    3de0:	3410      	adds	r4, #16
    3de2:	e7eb      	b.n	3dbc <log_panic+0x14>
    3de4:	2000215f 	.word	0x2000215f
    3de8:	0002351c 	.word	0x0002351c
    3dec:	0002353c 	.word	0x0002353c

00003df0 <log_process_thread_func>:
{
    3df0:	b508      	push	{r3, lr}
	log_init();
    3df2:	f7ff ffaf 	bl	3d54 <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    3df6:	f018 fa31 	bl	1c25c <z_impl_k_current_get>
	proc_tid = process_tid;
    3dfa:	4a09      	ldr	r2, [pc, #36]	; (3e20 <log_process_thread_func+0x30>)
    3dfc:	6010      	str	r0, [r2, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3dfe:	b128      	cbz	r0, 3e0c <log_process_thread_func+0x1c>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    3e00:	4b08      	ldr	r3, [pc, #32]	; (3e24 <log_process_thread_func+0x34>)
	    process_tid &&
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	2b09      	cmp	r3, #9
    3e06:	dd01      	ble.n	3e0c <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    3e08:	f018 fa06 	bl	1c218 <z_impl_k_wakeup>
		if (log_process(false) == false) {
    3e0c:	2000      	movs	r0, #0
    3e0e:	f7ff fedf 	bl	3bd0 <log_process>
    3e12:	2800      	cmp	r0, #0
    3e14:	d1fa      	bne.n	3e0c <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    3e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3e1a:	f018 f9b9 	bl	1c190 <z_impl_k_sleep>
    3e1e:	e7f5      	b.n	3e0c <log_process_thread_func+0x1c>
    3e20:	200003fc 	.word	0x200003fc
    3e24:	20000360 	.word	0x20000360

00003e28 <log_strdup>:
{
    3e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3e2a:	4605      	mov	r5, r0
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    3e2c:	2200      	movs	r2, #0
    3e2e:	a901      	add	r1, sp, #4
    3e30:	4810      	ldr	r0, [pc, #64]	; (3e74 <log_strdup+0x4c>)
    3e32:	f017 fd75 	bl	1b920 <k_mem_slab_alloc>
	if (err != 0) {
    3e36:	4604      	mov	r4, r0
    3e38:	b9d0      	cbnz	r0, 3e70 <log_strdup+0x48>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3e3a:	2201      	movs	r2, #1
    3e3c:	9b01      	ldr	r3, [sp, #4]
    3e3e:	f3bf 8f5b 	dmb	ish
    3e42:	e853 1f00 	ldrex	r1, [r3]
    3e46:	e843 2000 	strex	r0, r2, [r3]
    3e4a:	2800      	cmp	r0, #0
    3e4c:	d1f9      	bne.n	3e42 <log_strdup+0x1a>
    3e4e:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    3e52:	9801      	ldr	r0, [sp, #4]
    3e54:	221f      	movs	r2, #31
    3e56:	4629      	mov	r1, r5
    3e58:	3004      	adds	r0, #4
    3e5a:	f01b fb7a 	bl	1f552 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    3e5e:	9801      	ldr	r0, [sp, #4]
    3e60:	237e      	movs	r3, #126	; 0x7e
    3e62:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    3e66:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	return dup->buf;
    3e6a:	3004      	adds	r0, #4
}
    3e6c:	b003      	add	sp, #12
    3e6e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    3e70:	4801      	ldr	r0, [pc, #4]	; (3e78 <log_strdup+0x50>)
    3e72:	e7fb      	b.n	3e6c <log_strdup+0x44>
    3e74:	20000374 	.word	0x20000374
    3e78:	00024390 	.word	0x00024390

00003e7c <log_is_strdup>:
	return ((char *)buf >= pool_first->buf) &&
    3e7c:	4b05      	ldr	r3, [pc, #20]	; (3e94 <log_is_strdup+0x18>)
    3e7e:	4298      	cmp	r0, r3
    3e80:	d305      	bcc.n	3e8e <log_is_strdup+0x12>
    3e82:	3378      	adds	r3, #120	; 0x78
    3e84:	4298      	cmp	r0, r3
    3e86:	bf8c      	ite	hi
    3e88:	2000      	movhi	r0, #0
    3e8a:	2001      	movls	r0, #1
    3e8c:	4770      	bx	lr
    3e8e:	2000      	movs	r0, #0
}
    3e90:	4770      	bx	lr
    3e92:	bf00      	nop
    3e94:	2000551c 	.word	0x2000551c

00003e98 <log_free>:
{
    3e98:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    3e9a:	3804      	subs	r0, #4
    3e9c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3e9e:	f3bf 8f5b 	dmb	ish
    3ea2:	e850 3f00 	ldrex	r3, [r0]
    3ea6:	1e5a      	subs	r2, r3, #1
    3ea8:	e840 2100 	strex	r1, r2, [r0]
    3eac:	2900      	cmp	r1, #0
    3eae:	d1f8      	bne.n	3ea2 <log_free+0xa>
    3eb0:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    3eb4:	2b01      	cmp	r3, #1
    3eb6:	d103      	bne.n	3ec0 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    3eb8:	a901      	add	r1, sp, #4
    3eba:	4803      	ldr	r0, [pc, #12]	; (3ec8 <log_free+0x30>)
    3ebc:	f017 fd5a 	bl	1b974 <k_mem_slab_free>
}
    3ec0:	b003      	add	sp, #12
    3ec2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ec6:	bf00      	nop
    3ec8:	20000374 	.word	0x20000374

00003ecc <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(u32_t))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    3ecc:	2320      	movs	r3, #32
    3ece:	461a      	mov	r2, r3
    3ed0:	4901      	ldr	r1, [pc, #4]	; (3ed8 <log_msg_pool_init+0xc>)
    3ed2:	4802      	ldr	r0, [pc, #8]	; (3edc <log_msg_pool_init+0x10>)
    3ed4:	f01e bdb0 	b.w	22a38 <k_mem_slab_init>
    3ed8:	200055b8 	.word	0x200055b8
    3edc:	20000400 	.word	0x20000400

00003ee0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    3ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    3ee2:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    3ee4:	4d09      	ldr	r5, [pc, #36]	; (3f0c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    3ee6:	9301      	str	r3, [sp, #4]
			more = log_process(true);
    3ee8:	2001      	movs	r0, #1
    3eea:	f7ff fe71 	bl	3bd0 <log_process>
    3eee:	4604      	mov	r4, r0
			log_dropped();
    3ef0:	f7ff ff00 	bl	3cf4 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    3ef4:	2200      	movs	r2, #0
    3ef6:	a901      	add	r1, sp, #4
    3ef8:	4628      	mov	r0, r5
    3efa:	f017 fd11 	bl	1b920 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    3efe:	b108      	cbz	r0, 3f04 <log_msg_no_space_handle+0x24>
    3f00:	2c00      	cmp	r4, #0
    3f02:	d1f1      	bne.n	3ee8 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    3f04:	9801      	ldr	r0, [sp, #4]
    3f06:	b003      	add	sp, #12
    3f08:	bd30      	pop	{r4, r5, pc}
    3f0a:	bf00      	nop
    3f0c:	20000400 	.word	0x20000400

00003f10 <log_msg_chunk_alloc>:
{
    3f10:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    3f12:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    3f14:	a901      	add	r1, sp, #4
    3f16:	4806      	ldr	r0, [pc, #24]	; (3f30 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    3f18:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    3f1a:	f017 fd01 	bl	1b920 <k_mem_slab_alloc>
	if (err != 0) {
    3f1e:	b110      	cbz	r0, 3f26 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    3f20:	f7ff ffde 	bl	3ee0 <log_msg_no_space_handle>
    3f24:	9001      	str	r0, [sp, #4]
}
    3f26:	9801      	ldr	r0, [sp, #4]
    3f28:	b003      	add	sp, #12
    3f2a:	f85d fb04 	ldr.w	pc, [sp], #4
    3f2e:	bf00      	nop
    3f30:	20000400 	.word	0x20000400

00003f34 <msg_free>:
{
    3f34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3f36:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    3f38:	7a45      	ldrb	r5, [r0, #9]
{
    3f3a:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    3f3c:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
    3f40:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    3f44:	d00e      	beq.n	3f64 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    3f46:	9b01      	ldr	r3, [sp, #4]
    3f48:	7a1a      	ldrb	r2, [r3, #8]
    3f4a:	0792      	lsls	r2, r2, #30
    3f4c:	d504      	bpl.n	3f58 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    3f4e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3f50:	4c10      	ldr	r4, [pc, #64]	; (3f94 <msg_free+0x60>)
    3f52:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    3f54:	9b03      	ldr	r3, [sp, #12]
    3f56:	b9b3      	cbnz	r3, 3f86 <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    3f58:	a901      	add	r1, sp, #4
    3f5a:	480e      	ldr	r0, [pc, #56]	; (3f94 <msg_free+0x60>)
    3f5c:	f017 fd0a 	bl	1b974 <k_mem_slab_free>
}
    3f60:	b004      	add	sp, #16
    3f62:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    3f64:	2d00      	cmp	r5, #0
    3f66:	d0ee      	beq.n	3f46 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    3f68:	42a5      	cmp	r5, r4
    3f6a:	9801      	ldr	r0, [sp, #4]
    3f6c:	d9eb      	bls.n	3f46 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    3f6e:	4621      	mov	r1, r4
    3f70:	f01a fb28 	bl	1e5c4 <log_msg_arg_get>
    3f74:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    3f76:	f7ff ff81 	bl	3e7c <log_is_strdup>
    3f7a:	b110      	cbz	r0, 3f82 <msg_free+0x4e>
				log_free(buf);
    3f7c:	4630      	mov	r0, r6
    3f7e:	f7ff ff8b 	bl	3e98 <log_free>
		for (i = 0; i < nargs; i++) {
    3f82:	3401      	adds	r4, #1
    3f84:	e7f0      	b.n	3f68 <msg_free+0x34>
		next = cont->next;
    3f86:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3f88:	a903      	add	r1, sp, #12
    3f8a:	4620      	mov	r0, r4
    3f8c:	f017 fcf2 	bl	1b974 <k_mem_slab_free>
		cont = next;
    3f90:	9503      	str	r5, [sp, #12]
    3f92:	e7df      	b.n	3f54 <msg_free+0x20>
    3f94:	20000400 	.word	0x20000400

00003f98 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    3f98:	b40e      	push	{r1, r2, r3}
    3f9a:	b503      	push	{r0, r1, lr}
    3f9c:	ab03      	add	r3, sp, #12
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	_vprintk(out_func, (void *)log_output, fmt, args);
    3f9e:	4601      	mov	r1, r0
{
    3fa0:	f853 2b04 	ldr.w	r2, [r3], #4
	_vprintk(out_func, (void *)log_output, fmt, args);
    3fa4:	4804      	ldr	r0, [pc, #16]	; (3fb8 <print_formatted+0x20>)
	va_start(args, fmt);
    3fa6:	9301      	str	r3, [sp, #4]
	_vprintk(out_func, (void *)log_output, fmt, args);
    3fa8:	f018 ffb3 	bl	1cf12 <_vprintk>
#endif
	va_end(args);

	return length;
}
    3fac:	2000      	movs	r0, #0
    3fae:	b002      	add	sp, #8
    3fb0:	f85d eb04 	ldr.w	lr, [sp], #4
    3fb4:	b003      	add	sp, #12
    3fb6:	4770      	bx	lr
    3fb8:	0001e9cd 	.word	0x0001e9cd

00003fbc <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    3fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fc0:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    3fc2:	f011 0402 	ands.w	r4, r1, #2
{
    3fc6:	4606      	mov	r6, r0
    3fc8:	4690      	mov	r8, r2
    3fca:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3fce:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3fd2:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    3fd6:	d007      	beq.n	3fe8 <prefix_print+0x2c>
	if (!format) {
    3fd8:	f011 0f44 	tst.w	r1, #68	; 0x44
    3fdc:	d134      	bne.n	4048 <prefix_print+0x8c>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    3fde:	461a      	mov	r2, r3
    3fe0:	4930      	ldr	r1, [pc, #192]	; (40a4 <prefix_print+0xe8>)
    3fe2:	f7ff ffd9 	bl	3f98 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    3fe6:	4604      	mov	r4, r0
	if (color) {
    3fe8:	f1b9 0f00 	cmp.w	r9, #0
    3fec:	d00a      	beq.n	4004 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    3fee:	4b2e      	ldr	r3, [pc, #184]	; (40a8 <prefix_print+0xec>)
		print_formatted(log_output, "%s", color);
    3ff0:	492e      	ldr	r1, [pc, #184]	; (40ac <prefix_print+0xf0>)
		const char *color = start && (colors[level] != NULL) ?
    3ff2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    3ff6:	4b2e      	ldr	r3, [pc, #184]	; (40b0 <prefix_print+0xf4>)
    3ff8:	4630      	mov	r0, r6
    3ffa:	2a00      	cmp	r2, #0
    3ffc:	bf08      	it	eq
    3ffe:	461a      	moveq	r2, r3
    4000:	f7ff ffca 	bl	3f98 <print_formatted>
	if (level_on) {
    4004:	b13d      	cbz	r5, 4016 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    4006:	4b2b      	ldr	r3, [pc, #172]	; (40b4 <prefix_print+0xf8>)
    4008:	492b      	ldr	r1, [pc, #172]	; (40b8 <prefix_print+0xfc>)
    400a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    400e:	4630      	mov	r0, r6
    4010:	f7ff ffc2 	bl	3f98 <print_formatted>
    4014:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    4016:	f1b8 0f00 	cmp.w	r8, #0
    401a:	d041      	beq.n	40a0 <prefix_print+0xe4>
    401c:	4b27      	ldr	r3, [pc, #156]	; (40bc <prefix_print+0x100>)
    401e:	4a28      	ldr	r2, [pc, #160]	; (40c0 <prefix_print+0x104>)
    4020:	2f04      	cmp	r7, #4
    4022:	bf14      	ite	ne
    4024:	461f      	movne	r7, r3
    4026:	4617      	moveq	r7, r2
    4028:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    402c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    4030:	f7ff fe70 	bl	3d14 <log_source_name_get>
    4034:	4639      	mov	r1, r7
    4036:	4602      	mov	r2, r0
    4038:	4630      	mov	r0, r6
    403a:	f7ff ffad 	bl	3f98 <print_formatted>
    403e:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    4040:	4420      	add	r0, r4
    4042:	b005      	add	sp, #20
    4044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0) {
    4048:	4a1e      	ldr	r2, [pc, #120]	; (40c4 <prefix_print+0x108>)
    404a:	6814      	ldr	r4, [r2, #0]
    404c:	b334      	cbz	r4, 409c <prefix_print+0xe0>
		timestamp /= timestamp_div;
    404e:	4a1e      	ldr	r2, [pc, #120]	; (40c8 <prefix_print+0x10c>)
    4050:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    4054:	6811      	ldr	r1, [r2, #0]
    4056:	fbb3 f3f1 	udiv	r3, r3, r1
		ms = (remainder * 1000) / freq;
    405a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    405e:	fbb3 f1f4 	udiv	r1, r3, r4
		seconds -= hours * 3600;
    4062:	fbb1 f2fe 	udiv	r2, r1, lr
    4066:	fb0e 1e12 	mls	lr, lr, r2, r1
		remainder = timestamp % freq;
    406a:	fb04 3111 	mls	r1, r4, r1, r3
		ms = (remainder * 1000) / freq;
    406e:	fb0c f101 	mul.w	r1, ip, r1
		mins = seconds / 60;
    4072:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    4076:	fbb1 fbf4 	udiv	fp, r1, r4
    407a:	fb04 111b 	mls	r1, r4, fp, r1
    407e:	fb0c f101 	mul.w	r1, ip, r1
		mins = seconds / 60;
    4082:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    4086:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(log_output,
    408a:	fb0a e113 	mls	r1, sl, r3, lr
    408e:	9100      	str	r1, [sp, #0]
    4090:	e9cd b401 	strd	fp, r4, [sp, #4]
    4094:	490d      	ldr	r1, [pc, #52]	; (40cc <prefix_print+0x110>)
    4096:	f7ff ff7f 	bl	3f98 <print_formatted>
    409a:	e7a4      	b.n	3fe6 <prefix_print+0x2a>
		length = 0;
    409c:	4620      	mov	r0, r4
    409e:	e7a2      	b.n	3fe6 <prefix_print+0x2a>
	total += print_formatted(log_output,
    40a0:	4f06      	ldr	r7, [pc, #24]	; (40bc <prefix_print+0x100>)
    40a2:	e7c1      	b.n	4028 <prefix_print+0x6c>
    40a4:	000243f4 	.word	0x000243f4
    40a8:	00023754 	.word	0x00023754
    40ac:	00025869 	.word	0x00025869
    40b0:	000243e6 	.word	0x000243e6
    40b4:	00023768 	.word	0x00023768
    40b8:	00024419 	.word	0x00024419
    40bc:	000243eb 	.word	0x000243eb
    40c0:	000243f0 	.word	0x000243f0
    40c4:	2000041c 	.word	0x2000041c
    40c8:	20000420 	.word	0x20000420
    40cc:	000243fd 	.word	0x000243fd

000040d0 <hexdump_line_print>:
{
    40d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    40d4:	4698      	mov	r8, r3
    40d6:	9b08      	ldr	r3, [sp, #32]
    40d8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0) {
    40da:	06da      	lsls	r2, r3, #27
{
    40dc:	4604      	mov	r4, r0
    40de:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0) {
    40e0:	d405      	bmi.n	40ee <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0) {
    40e2:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
    40e4:	bf4c      	ite	mi
    40e6:	4921      	ldrmi	r1, [pc, #132]	; (416c <hexdump_line_print+0x9c>)
		print_formatted(ctx, "\r\n");
    40e8:	4921      	ldrpl	r1, [pc, #132]	; (4170 <hexdump_line_print+0xa0>)
    40ea:	f7ff ff55 	bl	3f98 <print_formatted>
		print_formatted(log_output, " ");
    40ee:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4178 <hexdump_line_print+0xa8>
{
    40f2:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
    40f4:	4545      	cmp	r5, r8
    40f6:	db28      	blt.n	414a <hexdump_line_print+0x7a>
			print_formatted(log_output, "   ");
    40f8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 417c <hexdump_line_print+0xac>
			print_formatted(log_output, "%02x ", data[i]);
    40fc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4180 <hexdump_line_print+0xb0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4100:	2500      	movs	r5, #0
		if (i < length) {
    4102:	42af      	cmp	r7, r5
    4104:	d927      	bls.n	4156 <hexdump_line_print+0x86>
			print_formatted(log_output, "%02x ", data[i]);
    4106:	5d72      	ldrb	r2, [r6, r5]
    4108:	4649      	mov	r1, r9
    410a:	4620      	mov	r0, r4
    410c:	f7ff ff44 	bl	3f98 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4110:	3501      	adds	r5, #1
    4112:	2d08      	cmp	r5, #8
    4114:	d1f5      	bne.n	4102 <hexdump_line_print+0x32>
	print_formatted(log_output, "|");
    4116:	4917      	ldr	r1, [pc, #92]	; (4174 <hexdump_line_print+0xa4>)
			print_formatted(log_output, " ");
    4118:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4178 <hexdump_line_print+0xa8>
			print_formatted(log_output, "%c",
    411c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4184 <hexdump_line_print+0xb4>
	print_formatted(log_output, "|");
    4120:	4620      	mov	r0, r4
    4122:	f7ff ff39 	bl	3f98 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4126:	2500      	movs	r5, #0
		if (i < length) {
    4128:	42af      	cmp	r7, r5
    412a:	d919      	bls.n	4160 <hexdump_line_print+0x90>
			      isprint((int)c) ? c : '.');
    412c:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    412e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    4132:	2b5f      	cmp	r3, #95	; 0x5f
    4134:	bf28      	it	cs
    4136:	222e      	movcs	r2, #46	; 0x2e
    4138:	4649      	mov	r1, r9
    413a:	4620      	mov	r0, r4
    413c:	f7ff ff2c 	bl	3f98 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4140:	3501      	adds	r5, #1
    4142:	2d08      	cmp	r5, #8
    4144:	d1f0      	bne.n	4128 <hexdump_line_print+0x58>
}
    4146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		print_formatted(log_output, " ");
    414a:	4649      	mov	r1, r9
    414c:	4620      	mov	r0, r4
    414e:	f7ff ff23 	bl	3f98 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    4152:	3501      	adds	r5, #1
    4154:	e7ce      	b.n	40f4 <hexdump_line_print+0x24>
			print_formatted(log_output, "   ");
    4156:	4641      	mov	r1, r8
    4158:	4620      	mov	r0, r4
    415a:	f7ff ff1d 	bl	3f98 <print_formatted>
    415e:	e7d7      	b.n	4110 <hexdump_line_print+0x40>
			print_formatted(log_output, " ");
    4160:	4641      	mov	r1, r8
    4162:	4620      	mov	r0, r4
    4164:	f7ff ff18 	bl	3f98 <print_formatted>
    4168:	e7ea      	b.n	4140 <hexdump_line_print+0x70>
    416a:	bf00      	nop
    416c:	000243ab 	.word	0x000243ab
    4170:	000243aa 	.word	0x000243aa
    4174:	000243b7 	.word	0x000243b7
    4178:	000243b5 	.word	0x000243b5
    417c:	000243b3 	.word	0x000243b3
    4180:	000243ad 	.word	0x000243ad
    4184:	000243b9 	.word	0x000243b9

00004188 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    4188:	b538      	push	{r3, r4, r5, lr}
    418a:	460c      	mov	r4, r1
	if (color) {
    418c:	07e1      	lsls	r1, r4, #31
{
    418e:	4605      	mov	r5, r0
	if (color) {
    4190:	d503      	bpl.n	419a <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    4192:	4a08      	ldr	r2, [pc, #32]	; (41b4 <postfix_print+0x2c>)
    4194:	4908      	ldr	r1, [pc, #32]	; (41b8 <postfix_print+0x30>)
    4196:	f7ff feff 	bl	3f98 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0) {
    419a:	06e2      	lsls	r2, r4, #27
    419c:	d408      	bmi.n	41b0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0) {
    419e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    41a0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    41a2:	bf4c      	ite	mi
    41a4:	4905      	ldrmi	r1, [pc, #20]	; (41bc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    41a6:	4906      	ldrpl	r1, [pc, #24]	; (41c0 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    41a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    41ac:	f7ff bef4 	b.w	3f98 <print_formatted>
}
    41b0:	bd38      	pop	{r3, r4, r5, pc}
    41b2:	bf00      	nop
    41b4:	000243e6 	.word	0x000243e6
    41b8:	00025869 	.word	0x00025869
    41bc:	000243ab 	.word	0x000243ab
    41c0:	000243aa 	.word	0x000243aa

000041c4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    41c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    41c8:	7a8b      	ldrb	r3, [r1, #10]
	u16_t source_id = (u16_t)log_msg_source_id_get(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	int prefix_offset;

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    41ca:	f013 0407 	ands.w	r4, r3, #7
{
    41ce:	4617      	mov	r7, r2
    41d0:	b088      	sub	sp, #32
    41d2:	4605      	mov	r5, r0
    41d4:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    41d6:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    41d8:	d01c      	beq.n	4214 <log_output_msg_process+0x50>
	return msg->hdr.ids.source_id;
    41da:	8949      	ldrh	r1, [r1, #10]
    41dc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    41e0:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    41e2:	43d2      	mvns	r2, r2
    41e4:	9102      	str	r1, [sp, #8]
    41e6:	e9cd 4300 	strd	r4, r3, [sp]
    41ea:	f002 0201 	and.w	r2, r2, #1
    41ee:	68f3      	ldr	r3, [r6, #12]
    41f0:	4639      	mov	r1, r7
    41f2:	f7ff fee3 	bl	3fbc <prefix_print>
    41f6:	4681      	mov	r9, r0
    41f8:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    41fa:	07da      	lsls	r2, r3, #31
    41fc:	d40c      	bmi.n	4218 <log_output_msg_process+0x54>
		std_print(msg, log_output);
    41fe:	4629      	mov	r1, r5
    4200:	4630      	mov	r0, r6
    4202:	f01a fa79 	bl	1e6f8 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    4206:	b34c      	cbz	r4, 425c <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    4208:	4622      	mov	r2, r4
    420a:	4639      	mov	r1, r7
    420c:	4628      	mov	r0, r5
    420e:	f7ff ffbb 	bl	4188 <postfix_print>
    4212:	e023      	b.n	425c <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    4214:	46a1      	mov	r9, r4
    4216:	e7ef      	b.n	41f8 <log_output_msg_process+0x34>
	} else if (raw_string) {
    4218:	bb34      	cbnz	r4, 4268 <log_output_msg_process+0xa4>
	size_t offset = 0;
    421a:	4627      	mov	r7, r4
		length = log_output->size;
    421c:	68eb      	ldr	r3, [r5, #12]
    421e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    4220:	aa06      	add	r2, sp, #24
    4222:	463b      	mov	r3, r7
    4224:	68a9      	ldr	r1, [r5, #8]
    4226:	4630      	mov	r0, r6
    4228:	f01a fa52 	bl	1e6d0 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    422c:	9a06      	ldr	r2, [sp, #24]
    422e:	686b      	ldr	r3, [r5, #4]
    4230:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    4232:	b13a      	cbz	r2, 4244 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    4234:	68ab      	ldr	r3, [r5, #8]
    4236:	4413      	add	r3, r2
    4238:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    423c:	f1a4 030a 	sub.w	r3, r4, #10
    4240:	425c      	negs	r4, r3
    4242:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    4244:	4628      	mov	r0, r5
    4246:	f01a fbb4 	bl	1e9b2 <log_output_flush>
		offset += length;
    424a:	9b06      	ldr	r3, [sp, #24]
    424c:	441f      	add	r7, r3
	} while (length > 0);
    424e:	2b00      	cmp	r3, #0
    4250:	d1e4      	bne.n	421c <log_output_msg_process+0x58>
	if (eol) {
    4252:	b11c      	cbz	r4, 425c <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    4254:	4914      	ldr	r1, [pc, #80]	; (42a8 <log_output_msg_process+0xe4>)
    4256:	4628      	mov	r0, r5
    4258:	f7ff fe9e 	bl	3f98 <print_formatted>
	}

	log_output_flush(log_output);
    425c:	4628      	mov	r0, r5
    425e:	f01a fba8 	bl	1e9b2 <log_output_flush>
}
    4262:	b008      	add	sp, #32
    4264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    4268:	4630      	mov	r0, r6
    426a:	f01a f9db 	bl	1e624 <log_msg_str_get>
    426e:	490f      	ldr	r1, [pc, #60]	; (42ac <log_output_msg_process+0xe8>)
    4270:	4602      	mov	r2, r0
    4272:	4628      	mov	r0, r5
    4274:	f7ff fe90 	bl	3f98 <print_formatted>
	u32_t offset = 0U;
    4278:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    427c:	f04f 0a08 	mov.w	sl, #8
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4280:	aa05      	add	r2, sp, #20
    4282:	4643      	mov	r3, r8
    4284:	a906      	add	r1, sp, #24
    4286:	4630      	mov	r0, r6
		length = sizeof(buf);
    4288:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    428c:	f01a fa20 	bl	1e6d0 <log_msg_hexdump_data_get>
		if (length) {
    4290:	9a05      	ldr	r2, [sp, #20]
    4292:	2a00      	cmp	r2, #0
    4294:	d0b8      	beq.n	4208 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    4296:	464b      	mov	r3, r9
    4298:	9700      	str	r7, [sp, #0]
    429a:	a906      	add	r1, sp, #24
    429c:	4628      	mov	r0, r5
    429e:	f7ff ff17 	bl	40d0 <hexdump_line_print>
			offset += length;
    42a2:	9b05      	ldr	r3, [sp, #20]
    42a4:	4498      	add	r8, r3
    42a6:	e7eb      	b.n	4280 <log_output_msg_process+0xbc>
    42a8:	000243bc 	.word	0x000243bc
    42ac:	00025869 	.word	0x00025869

000042b0 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    42b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    42b2:	e9d0 4300 	ldrd	r4, r3, [r0]
    42b6:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    42b8:	4a0f      	ldr	r2, [pc, #60]	; (42f8 <log_output_dropped_process+0x48>)
    42ba:	f242 730f 	movw	r3, #9999	; 0x270f
    42be:	428b      	cmp	r3, r1
    42c0:	bf28      	it	cs
    42c2:	460b      	movcs	r3, r1
    42c4:	4668      	mov	r0, sp
    42c6:	2105      	movs	r1, #5
    42c8:	f001 ff12 	bl	60f0 <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    42cc:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    42ce:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    42d0:	220b      	movs	r2, #11
    42d2:	4620      	mov	r0, r4
    42d4:	4909      	ldr	r1, [pc, #36]	; (42fc <log_output_dropped_process+0x4c>)
    42d6:	f01a fa02 	bl	1e6de <buffer_write>
	buffer_write(outf, buf, len, dev);
    42da:	462b      	mov	r3, r5
    42dc:	4632      	mov	r2, r6
    42de:	4669      	mov	r1, sp
    42e0:	4620      	mov	r0, r4
    42e2:	f01a f9fc 	bl	1e6de <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    42e6:	462b      	mov	r3, r5
    42e8:	221b      	movs	r2, #27
    42ea:	4905      	ldr	r1, [pc, #20]	; (4300 <log_output_dropped_process+0x50>)
    42ec:	4620      	mov	r0, r4
    42ee:	f01a f9f6 	bl	1e6de <buffer_write>
}
    42f2:	b002      	add	sp, #8
    42f4:	bd70      	pop	{r4, r5, r6, pc}
    42f6:	bf00      	nop
    42f8:	000257c9 	.word	0x000257c9
    42fc:	000243da 	.word	0x000243da
    4300:	000243be 	.word	0x000243be

00004304 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    4304:	4a08      	ldr	r2, [pc, #32]	; (4328 <log_output_timestamp_freq_set+0x24>)
{
    4306:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    4308:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    430a:	4c08      	ldr	r4, [pc, #32]	; (432c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    430c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    430e:	2100      	movs	r1, #0
    4310:	42a0      	cmp	r0, r4
    4312:	d804      	bhi.n	431e <log_output_timestamp_freq_set+0x1a>
    4314:	b101      	cbz	r1, 4318 <log_output_timestamp_freq_set+0x14>
    4316:	6013      	str	r3, [r2, #0]
		frequency /= 2;
		timestamp_div *= 2;
	}

	freq = frequency;
    4318:	4b05      	ldr	r3, [pc, #20]	; (4330 <log_output_timestamp_freq_set+0x2c>)
    431a:	6018      	str	r0, [r3, #0]
}
    431c:	bd10      	pop	{r4, pc}
		frequency /= 2;
    431e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2;
    4320:	005b      	lsls	r3, r3, #1
    4322:	2101      	movs	r1, #1
    4324:	e7f4      	b.n	4310 <log_output_timestamp_freq_set+0xc>
    4326:	bf00      	nop
    4328:	20000420 	.word	0x20000420
    432c:	000f4240 	.word	0x000f4240
    4330:	2000041c 	.word	0x2000041c

00004334 <log_backend_uart_init>:
	log_msg_put(msg);

}

static void log_backend_uart_init(void)
{
    4334:	b508      	push	{r3, lr}
    4336:	4803      	ldr	r0, [pc, #12]	; (4344 <log_backend_uart_init+0x10>)
    4338:	f017 f9be 	bl	1b6b8 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    433c:	4b02      	ldr	r3, [pc, #8]	; (4348 <log_backend_uart_init+0x14>)
    433e:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    4340:	bd08      	pop	{r3, pc}
    4342:	bf00      	nop
    4344:	0002443f 	.word	0x0002443f
    4348:	2000042c 	.word	0x2000042c

0000434c <panic>:

static void panic(struct log_backend const *const backend)
{
	log_output_flush(&log_output);
    434c:	4801      	ldr	r0, [pc, #4]	; (4354 <panic+0x8>)
    434e:	f01a bb30 	b.w	1e9b2 <log_output_flush>
    4352:	bf00      	nop
    4354:	00023794 	.word	0x00023794

00004358 <dropped>:

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	ARG_UNUSED(backend);

	log_output_dropped_process(&log_output, cnt);
    4358:	4801      	ldr	r0, [pc, #4]	; (4360 <dropped+0x8>)
    435a:	f7ff bfa9 	b.w	42b0 <log_output_dropped_process>
    435e:	bf00      	nop
    4360:	00023794 	.word	0x00023794

00004364 <put>:
{
    4364:	b510      	push	{r4, lr}
	log_msg_get(msg);
    4366:	4608      	mov	r0, r1
{
    4368:	460c      	mov	r4, r1
	log_msg_get(msg);
    436a:	f01a f91b 	bl	1e5a4 <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    436e:	4621      	mov	r1, r4
    4370:	4804      	ldr	r0, [pc, #16]	; (4384 <put+0x20>)
    4372:	220f      	movs	r2, #15
    4374:	f7ff ff26 	bl	41c4 <log_output_msg_process>
	log_msg_put(msg);
    4378:	4620      	mov	r0, r4
}
    437a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    437e:	f01a b93e 	b.w	1e5fe <log_msg_put>
    4382:	bf00      	nop
    4384:	00023794 	.word	0x00023794

00004388 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    4388:	4b03      	ldr	r3, [pc, #12]	; (4398 <log_backend_rtt_init+0x10>)
    438a:	2201      	movs	r2, #1
    438c:	701a      	strb	r2, [r3, #0]
	panic_mode = 0;
    438e:	4b03      	ldr	r3, [pc, #12]	; (439c <log_backend_rtt_init+0x14>)
    4390:	2200      	movs	r2, #0
    4392:	601a      	str	r2, [r3, #0]
	line_pos = line_buf;
}
    4394:	4770      	bx	lr
    4396:	bf00      	nop
    4398:	20002171 	.word	0x20002171
    439c:	2000044c 	.word	0x2000044c

000043a0 <panic>:

static void panic(struct log_backend const *const backend)
{
    43a0:	b508      	push	{r3, lr}
	log_output_flush(&log_output);
    43a2:	4803      	ldr	r0, [pc, #12]	; (43b0 <panic+0x10>)
    43a4:	f01a fb05 	bl	1e9b2 <log_output_flush>
	panic_mode = 1;
    43a8:	4b02      	ldr	r3, [pc, #8]	; (43b4 <panic+0x14>)
    43aa:	2201      	movs	r2, #1
    43ac:	601a      	str	r2, [r3, #0]
}
    43ae:	bd08      	pop	{r3, pc}
    43b0:	000237bc 	.word	0x000237bc
    43b4:	2000044c 	.word	0x2000044c

000043b8 <dropped>:

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	ARG_UNUSED(backend);

	log_output_dropped_process(&log_output, cnt);
    43b8:	4801      	ldr	r0, [pc, #4]	; (43c0 <dropped+0x8>)
    43ba:	f7ff bf79 	b.w	42b0 <log_output_dropped_process>
    43be:	bf00      	nop
    43c0:	000237bc 	.word	0x000237bc

000043c4 <put>:
{
    43c4:	b510      	push	{r4, lr}
	log_msg_get(msg);
    43c6:	4608      	mov	r0, r1
{
    43c8:	460c      	mov	r4, r1
	log_msg_get(msg);
    43ca:	f01a f8eb 	bl	1e5a4 <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    43ce:	4621      	mov	r1, r4
    43d0:	4804      	ldr	r0, [pc, #16]	; (43e4 <put+0x20>)
    43d2:	220f      	movs	r2, #15
    43d4:	f7ff fef6 	bl	41c4 <log_output_msg_process>
	log_msg_put(msg);
    43d8:	4620      	mov	r0, r4
}
    43da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    43de:	f01a b90e 	b.w	1e5fe <log_msg_put>
    43e2:	bf00      	nop
    43e4:	000237bc 	.word	0x000237bc

000043e8 <on_failed_write.part.0>:
	} else if (panic_mode) {
    43e8:	4b04      	ldr	r3, [pc, #16]	; (43fc <on_failed_write.part.0+0x14>)
    43ea:	681b      	ldr	r3, [r3, #0]
    43ec:	b11b      	cbz	r3, 43f6 <on_failed_write.part.0+0xe>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
    43ee:	f241 3088 	movw	r0, #5000	; 0x1388
    43f2:	f01e bd41 	b.w	22e78 <z_impl_k_busy_wait>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    43f6:	2005      	movs	r0, #5
    43f8:	f017 beca 	b.w	1c190 <z_impl_k_sleep>
    43fc:	2000044c 	.word	0x2000044c

00004400 <data_out_block_mode>:
{
    4400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (!panic_mode) {
    4404:	4f21      	ldr	r7, [pc, #132]	; (448c <data_out_block_mode+0x8c>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    4406:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4494 <data_out_block_mode+0x94>
{
    440a:	4682      	mov	sl, r0
    440c:	460e      	mov	r6, r1
	int retry_cnt = RETRY_CNT;
    440e:	2404      	movs	r4, #4
    4410:	46b8      	mov	r8, r7
		if (!panic_mode) {
    4412:	683b      	ldr	r3, [r7, #0]
    4414:	b923      	cbnz	r3, 4420 <data_out_block_mode+0x20>
    4416:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    441a:	4648      	mov	r0, r9
    441c:	f017 fb80 	bl	1bb20 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4420:	4632      	mov	r2, r6
    4422:	4651      	mov	r1, sl
    4424:	2000      	movs	r0, #0
    4426:	f7ff facf 	bl	39c8 <SEGGER_RTT_WriteSkipNoLock>
		if (!panic_mode) {
    442a:	f8d8 3000 	ldr.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    442e:	4683      	mov	fp, r0
		if (!panic_mode) {
    4430:	b913      	cbnz	r3, 4438 <data_out_block_mode+0x38>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    4432:	4648      	mov	r0, r9
    4434:	f017 fbe0 	bl	1bbf8 <z_impl_k_mutex_unlock>
		if (ret) {
    4438:	4d15      	ldr	r5, [pc, #84]	; (4490 <data_out_block_mode+0x90>)
    443a:	f1bb 0f00 	cmp.w	fp, #0
    443e:	d018      	beq.n	4472 <data_out_block_mode+0x72>
	host_present = true;
    4440:	2301      	movs	r3, #1
    4442:	702b      	strb	r3, [r5, #0]
	if (panic_mode) {
    4444:	f8d8 3000 	ldr.w	r3, [r8]
    4448:	b933      	cbnz	r3, 4458 <data_out_block_mode+0x58>
}
    444a:	4630      	mov	r0, r6
    444c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    4450:	b95c      	cbnz	r4, 446a <data_out_block_mode+0x6a>
		host_present = false;
    4452:	702c      	strb	r4, [r5, #0]
    4454:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    4458:	2000      	movs	r0, #0
    445a:	f7ff fb31 	bl	3ac0 <SEGGER_RTT_HasDataUp>
    445e:	2800      	cmp	r0, #0
    4460:	d0f3      	beq.n	444a <data_out_block_mode+0x4a>
    4462:	782b      	ldrb	r3, [r5, #0]
    4464:	2b00      	cmp	r3, #0
    4466:	d1f3      	bne.n	4450 <data_out_block_mode+0x50>
    4468:	e7ef      	b.n	444a <data_out_block_mode+0x4a>
			on_failed_write(retry_cnt--);
    446a:	3c01      	subs	r4, #1
    446c:	f7ff ffbc 	bl	43e8 <on_failed_write.part.0>
    4470:	e7f2      	b.n	4458 <data_out_block_mode+0x58>
		} else if (host_present) {
    4472:	782b      	ldrb	r3, [r5, #0]
    4474:	b113      	cbz	r3, 447c <data_out_block_mode+0x7c>
	if (retry_cnt == 0) {
    4476:	3c01      	subs	r4, #1
    4478:	d104      	bne.n	4484 <data_out_block_mode+0x84>
		host_present = false;
    447a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    447c:	782b      	ldrb	r3, [r5, #0]
    447e:	2b00      	cmp	r3, #0
    4480:	d1c7      	bne.n	4412 <data_out_block_mode+0x12>
    4482:	e7e2      	b.n	444a <data_out_block_mode+0x4a>
    4484:	f7ff ffb0 	bl	43e8 <on_failed_write.part.0>
    4488:	e7f8      	b.n	447c <data_out_block_mode+0x7c>
    448a:	bf00      	nop
    448c:	2000044c 	.word	0x2000044c
    4490:	20002171 	.word	0x20002171
    4494:	200080c8 	.word	0x200080c8

00004498 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    4498:	b513      	push	{r0, r1, r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    449a:	4c11      	ldr	r4, [pc, #68]	; (44e0 <sys_rand32_get+0x48>)
    449c:	f3bf 8f5b 	dmb	ish
    44a0:	6820      	ldr	r0, [r4, #0]
    44a2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    44a6:	b960      	cbnz	r0, 44c2 <sys_rand32_get+0x2a>
    44a8:	480e      	ldr	r0, [pc, #56]	; (44e4 <sys_rand32_get+0x4c>)
    44aa:	f017 f905 	bl	1b6b8 <z_impl_device_get_binding>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    44ae:	f3bf 8f5b 	dmb	ish
    44b2:	e854 3f00 	ldrex	r3, [r4]
    44b6:	e844 0200 	strex	r2, r0, [r4]
    44ba:	2a00      	cmp	r2, #0
    44bc:	d1f9      	bne.n	44b2 <sys_rand32_get+0x1a>
    44be:	f3bf 8f5b 	dmb	ish
	return api->get_entropy(dev, buffer, length);
    44c2:	6843      	ldr	r3, [r0, #4]
    44c4:	2204      	movs	r2, #4
    44c6:	681b      	ldr	r3, [r3, #0]
    44c8:	eb0d 0102 	add.w	r1, sp, r2
    44cc:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    44ce:	2800      	cmp	r0, #0
    44d0:	da02      	bge.n	44d8 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    44d2:	f000 fe35 	bl	5140 <z_timer_cycle_get_32>
    44d6:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    44d8:	9801      	ldr	r0, [sp, #4]
    44da:	b002      	add	sp, #8
    44dc:	bd10      	pop	{r4, pc}
    44de:	bf00      	nop
    44e0:	20000450 	.word	0x20000450
    44e4:	00024467 	.word	0x00024467

000044e8 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    44e8:	4b08      	ldr	r3, [pc, #32]	; (450c <get_flash_area_from_id+0x24>)
{
    44ea:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    44ec:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    44ee:	4b08      	ldr	r3, [pc, #32]	; (4510 <get_flash_area_from_id+0x28>)
    44f0:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    44f2:	2300      	movs	r3, #0
    44f4:	429d      	cmp	r5, r3
    44f6:	dc02      	bgt.n	44fe <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    44f8:	2200      	movs	r2, #0
}
    44fa:	4610      	mov	r0, r2
    44fc:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    44fe:	011c      	lsls	r4, r3, #4
    4500:	190a      	adds	r2, r1, r4
    4502:	5d0c      	ldrb	r4, [r1, r4]
    4504:	4284      	cmp	r4, r0
    4506:	d0f8      	beq.n	44fa <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
    4508:	3301      	adds	r3, #1
    450a:	e7f3      	b.n	44f4 <get_flash_area_from_id+0xc>
    450c:	0002381c 	.word	0x0002381c
    4510:	20007658 	.word	0x20007658

00004514 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    4514:	4b08      	ldr	r3, [pc, #32]	; (4538 <flash_area_open+0x24>)
    4516:	681b      	ldr	r3, [r3, #0]
{
    4518:	b510      	push	{r4, lr}
    451a:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    451c:	b12b      	cbz	r3, 452a <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    451e:	f7ff ffe3 	bl	44e8 <get_flash_area_from_id>
	if (area == NULL) {
    4522:	b128      	cbz	r0, 4530 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    4524:	6020      	str	r0, [r4, #0]
	return 0;
    4526:	2000      	movs	r0, #0
}
    4528:	bd10      	pop	{r4, pc}
		return -EACCES;
    452a:	f06f 000c 	mvn.w	r0, #12
    452e:	e7fb      	b.n	4528 <flash_area_open+0x14>
		return -ENOENT;
    4530:	f06f 0001 	mvn.w	r0, #1
    4534:	e7f8      	b.n	4528 <flash_area_open+0x14>
    4536:	bf00      	nop
    4538:	20007658 	.word	0x20007658

0000453c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    453c:	b530      	push	{r4, r5, lr}
    453e:	b089      	sub	sp, #36	; 0x24
    4540:	460c      	mov	r4, r1
    4542:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    4544:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    4546:	f7ff ffcf 	bl	44e8 <get_flash_area_from_id>
	if (fa == NULL) {
    454a:	b1b0      	cbz	r0, 457a <flash_area_get_sectors+0x3e>
	cb_data->area_off = fa->fa_off;
    454c:	6843      	ldr	r3, [r0, #4]
    454e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    4550:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    4552:	6822      	ldr	r2, [r4, #0]
    4554:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    4556:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    455a:	2300      	movs	r3, #0
	cb_data->status = 0;
    455c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    4560:	9305      	str	r3, [sp, #20]
    4562:	f017 f8a9 	bl	1b6b8 <z_impl_device_get_binding>
	flash_page_foreach(flash_dev, cb, cb_data);
    4566:	aa01      	add	r2, sp, #4
    4568:	4905      	ldr	r1, [pc, #20]	; (4580 <flash_area_get_sectors+0x44>)
    456a:	f01e fa2f 	bl	229cc <flash_page_foreach>
	if (cb_data->status == 0) {
    456e:	9807      	ldr	r0, [sp, #28]
    4570:	b908      	cbnz	r0, 4576 <flash_area_get_sectors+0x3a>
		*cnt = cb_data->ret_idx;
    4572:	9b05      	ldr	r3, [sp, #20]
    4574:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    4576:	b009      	add	sp, #36	; 0x24
    4578:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    457a:	f06f 0015 	mvn.w	r0, #21
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    457e:	e7fa      	b.n	4576 <flash_area_get_sectors+0x3a>
    4580:	0001f0c9 	.word	0x0001f0c9

00004584 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, void *value, size_t val_len)
{
    4584:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct settings_store *cs;
	struct settings_dup_check_arg cdca;

	cs = settings_save_dst;
    4588:	4b11      	ldr	r3, [pc, #68]	; (45d0 <settings_save_one+0x4c>)
    458a:	681d      	ldr	r5, [r3, #0]
{
    458c:	4606      	mov	r6, r0
    458e:	460f      	mov	r7, r1
    4590:	4690      	mov	r8, r2
	if (!cs) {
    4592:	b1bd      	cbz	r5, 45c4 <settings_save_one+0x40>
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
	cdca.val_len = val_len;
	cs->cs_itf->csi_load(cs, settings_dup_check_cb, &cdca);
    4594:	686b      	ldr	r3, [r5, #4]
	cdca.is_dup = 0;
    4596:	2400      	movs	r4, #0
	cdca.val = (char *)value;
    4598:	e9cd 0100 	strd	r0, r1, [sp]
	cdca.val_len = val_len;
    459c:	e9cd 2402 	strd	r2, r4, [sp, #8]
	cs->cs_itf->csi_load(cs, settings_dup_check_cb, &cdca);
    45a0:	681b      	ldr	r3, [r3, #0]
    45a2:	490c      	ldr	r1, [pc, #48]	; (45d4 <settings_save_one+0x50>)
    45a4:	466a      	mov	r2, sp
    45a6:	4628      	mov	r0, r5
    45a8:	4798      	blx	r3
	if (cdca.is_dup == 1) {
    45aa:	9b03      	ldr	r3, [sp, #12]
    45ac:	2b01      	cmp	r3, #1
    45ae:	d00c      	beq.n	45ca <settings_save_one+0x46>
		return 0;
	}
	return cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    45b0:	686b      	ldr	r3, [r5, #4]
    45b2:	463a      	mov	r2, r7
    45b4:	689c      	ldr	r4, [r3, #8]
    45b6:	4631      	mov	r1, r6
    45b8:	4643      	mov	r3, r8
    45ba:	4628      	mov	r0, r5
    45bc:	47a0      	blx	r4
}
    45be:	b004      	add	sp, #16
    45c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    45c4:	f06f 0001 	mvn.w	r0, #1
    45c8:	e7f9      	b.n	45be <settings_save_one+0x3a>
		return 0;
    45ca:	4620      	mov	r0, r4
    45cc:	e7f7      	b.n	45be <settings_save_one+0x3a>
    45ce:	bf00      	nop
    45d0:	2000045c 	.word	0x2000045c
    45d4:	0001f1ed 	.word	0x0001f1ed

000045d8 <settings_load_cb>:
{
    45d8:	b510      	push	{r4, lr}
	int rc = settings_set_value_priv(name, val_read_cb_ctx, off, 0);
    45da:	2300      	movs	r3, #0
{
    45dc:	4604      	mov	r4, r0
	int rc = settings_set_value_priv(name, val_read_cb_ctx, off, 0);
    45de:	f01a fe6b 	bl	1f2b8 <settings_set_value_priv>
	if (rc != 0) {
    45e2:	4602      	mov	r2, r0
    45e4:	b180      	cbz	r0, 4608 <settings_load_cb+0x30>
		LOG_ERR("set-value failure. key: %s error(%d)",
    45e6:	2101      	movs	r1, #1
    45e8:	f04f 0300 	mov.w	r3, #0
    45ec:	f361 0307 	bfi	r3, r1, #0, #8
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    45f0:	4806      	ldr	r0, [pc, #24]	; (460c <settings_load_cb+0x34>)
    45f2:	4907      	ldr	r1, [pc, #28]	; (4610 <settings_load_cb+0x38>)
    45f4:	1a09      	subs	r1, r1, r0
    45f6:	08c9      	lsrs	r1, r1, #3
    45f8:	f361 138f 	bfi	r3, r1, #6, #10
    45fc:	4805      	ldr	r0, [pc, #20]	; (4614 <settings_load_cb+0x3c>)
    45fe:	4621      	mov	r1, r4
}
    4600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("set-value failure. key: %s error(%d)",
    4604:	f019 bf3e 	b.w	1e484 <log_2>
}
    4608:	bd10      	pop	{r4, pc}
    460a:	bf00      	nop
    460c:	000233ec 	.word	0x000233ec
    4610:	0002350c 	.word	0x0002350c
    4614:	00024484 	.word	0x00024484

00004618 <settings_src_register>:
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    4618:	4b0e      	ldr	r3, [pc, #56]	; (4654 <settings_src_register+0x3c>)
{
    461a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    461c:	681c      	ldr	r4, [r3, #0]
	prev = NULL;
    461e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    4620:	4622      	mov	r2, r4
    4622:	b932      	cbnz	r2, 4632 <settings_src_register+0x1a>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node);

Z_GENLIST_INSERT(slist, snode)
    4624:	b941      	cbnz	r1, 4638 <settings_src_register+0x20>
	parent->next = child;
    4626:	6004      	str	r4, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
    4628:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    462a:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    462c:	b95a      	cbnz	r2, 4646 <settings_src_register+0x2e>
	list->tail = node;
    462e:	6058      	str	r0, [r3, #4]
    4630:	e009      	b.n	4646 <settings_src_register+0x2e>
    4632:	4611      	mov	r1, r2
    4634:	6812      	ldr	r2, [r2, #0]
    4636:	e7f4      	b.n	4622 <settings_src_register+0xa>
Z_GENLIST_INSERT(slist, snode)
    4638:	680c      	ldr	r4, [r1, #0]
    463a:	b93c      	cbnz	r4, 464c <settings_src_register+0x34>
	parent->next = child;
    463c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    463e:	685a      	ldr	r2, [r3, #4]
    4640:	b912      	cbnz	r2, 4648 <settings_src_register+0x30>
	list->head = node;
    4642:	e9c3 0000 	strd	r0, r0, [r3]
}
    4646:	bd10      	pop	{r4, pc}
	parent->next = child;
    4648:	6010      	str	r0, [r2, #0]
    464a:	e7f0      	b.n	462e <settings_src_register+0x16>
    464c:	6004      	str	r4, [r0, #0]
    464e:	6008      	str	r0, [r1, #0]
    4650:	e7f9      	b.n	4646 <settings_src_register+0x2e>
    4652:	bf00      	nop
    4654:	20000454 	.word	0x20000454

00004658 <settings_dst_register>:
	settings_save_dst = cs;
    4658:	4b01      	ldr	r3, [pc, #4]	; (4660 <settings_dst_register+0x8>)
    465a:	6018      	str	r0, [r3, #0]
}
    465c:	4770      	bx	lr
    465e:	bf00      	nop
    4660:	2000045c 	.word	0x2000045c

00004664 <settings_load>:
{
    4664:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    4666:	4b09      	ldr	r3, [pc, #36]	; (468c <settings_load+0x28>)
    4668:	681c      	ldr	r4, [r3, #0]
    466a:	b14c      	cbz	r4, 4680 <settings_load+0x1c>
		cs->cs_itf->csi_load(cs, settings_load_cb, NULL);
    466c:	4d08      	ldr	r5, [pc, #32]	; (4690 <settings_load+0x2c>)
    466e:	6863      	ldr	r3, [r4, #4]
    4670:	4620      	mov	r0, r4
    4672:	681b      	ldr	r3, [r3, #0]
    4674:	2200      	movs	r2, #0
    4676:	4629      	mov	r1, r5
    4678:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    467a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    467c:	2c00      	cmp	r4, #0
    467e:	d1f6      	bne.n	466e <settings_load+0xa>
	return settings_commit(NULL);
    4680:	2000      	movs	r0, #0
}
    4682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return settings_commit(NULL);
    4686:	f000 b843 	b.w	4710 <settings_commit>
    468a:	bf00      	nop
    468c:	20000454 	.word	0x20000454
    4690:	000045d9 	.word	0x000045d9

00004694 <settings_store_init>:
	list->head = NULL;
    4694:	4b02      	ldr	r3, [pc, #8]	; (46a0 <settings_store_init+0xc>)
    4696:	2200      	movs	r2, #0
	list->tail = NULL;
    4698:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    469c:	4770      	bx	lr
    469e:	bf00      	nop
    46a0:	20000454 	.word	0x20000454

000046a4 <settings_handler_lookup>:

/*
 * Find settings_handler based on name.
 */
static struct settings_handler *settings_handler_lookup(char *name)
{
    46a4:	b538      	push	{r3, r4, r5, lr}
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    46a6:	4b07      	ldr	r3, [pc, #28]	; (46c4 <settings_handler_lookup+0x20>)
    46a8:	681c      	ldr	r4, [r3, #0]
{
    46aa:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    46ac:	b914      	cbnz	r4, 46b4 <settings_handler_lookup+0x10>
		if (!strcmp(name, ch->name)) {
			return ch;
		}
	}
	return NULL;
    46ae:	2400      	movs	r4, #0
}
    46b0:	4620      	mov	r0, r4
    46b2:	bd38      	pop	{r3, r4, r5, pc}
		if (!strcmp(name, ch->name)) {
    46b4:	6861      	ldr	r1, [r4, #4]
    46b6:	4628      	mov	r0, r5
    46b8:	f01a ff73 	bl	1f5a2 <strcmp>
    46bc:	2800      	cmp	r0, #0
    46be:	d0f7      	beq.n	46b0 <settings_handler_lookup+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    46c0:	6824      	ldr	r4, [r4, #0]
	return node->next;
    46c2:	e7f3      	b.n	46ac <settings_handler_lookup+0x8>
    46c4:	20000460 	.word	0x20000460

000046c8 <settings_init>:
{
    46c8:	b510      	push	{r4, lr}
	if (!settings_cmd_inited) {
    46ca:	4c05      	ldr	r4, [pc, #20]	; (46e0 <settings_init+0x18>)
    46cc:	7823      	ldrb	r3, [r4, #0]
    46ce:	b933      	cbnz	r3, 46de <settings_init+0x16>
	list->head = NULL;
    46d0:	4a04      	ldr	r2, [pc, #16]	; (46e4 <settings_init+0x1c>)
	list->tail = NULL;
    46d2:	e9c2 3300 	strd	r3, r3, [r2]
		settings_store_init();
    46d6:	f7ff ffdd 	bl	4694 <settings_store_init>
		settings_cmd_inited = 1U;
    46da:	2301      	movs	r3, #1
    46dc:	7023      	strb	r3, [r4, #0]
}
    46de:	bd10      	pop	{r4, pc}
    46e0:	20002172 	.word	0x20002172
    46e4:	20000460 	.word	0x20000460

000046e8 <settings_register>:
{
    46e8:	b510      	push	{r4, lr}
    46ea:	4604      	mov	r4, r0
	if (settings_handler_lookup(handler->name)) {
    46ec:	6840      	ldr	r0, [r0, #4]
    46ee:	f7ff ffd9 	bl	46a4 <settings_handler_lookup>
    46f2:	b940      	cbnz	r0, 4706 <settings_register+0x1e>
Z_GENLIST_PREPEND(slist, snode)
    46f4:	4b05      	ldr	r3, [pc, #20]	; (470c <settings_register+0x24>)
    46f6:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    46f8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    46fa:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    46fc:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    46fe:	b90a      	cbnz	r2, 4704 <settings_register+0x1c>
	list->tail = node;
    4700:	605c      	str	r4, [r3, #4]
	return 0;
    4702:	4610      	mov	r0, r2
}
    4704:	bd10      	pop	{r4, pc}
		return -EEXIST;
    4706:	f06f 0010 	mvn.w	r0, #16
    470a:	e7fb      	b.n	4704 <settings_register+0x1c>
    470c:	20000460 	.word	0x20000460

00004710 <settings_commit>:
	}
	return ch->h_get(name_argc - 1, &name_argv[1], buf, buf_len);
}

int settings_commit(char *name)
{
    4710:	b530      	push	{r4, r5, lr}
	char *name_argv[SETTINGS_MAX_DIR_DEPTH];
	struct settings_handler *ch;
	int rc;
	int rc2;

	if (name) {
    4712:	4604      	mov	r4, r0
{
    4714:	b08b      	sub	sp, #44	; 0x2c
	if (name) {
    4716:	b168      	cbz	r0, 4734 <settings_commit+0x24>
		ch = settings_parse_and_lookup(name, &name_argc, name_argv);
    4718:	aa02      	add	r2, sp, #8
    471a:	a901      	add	r1, sp, #4
    471c:	f01a fdc1 	bl	1f2a2 <settings_parse_and_lookup>
		if (!ch) {
    4720:	b1b0      	cbz	r0, 4750 <settings_commit+0x40>
			return -EINVAL;
		}
		if (ch->h_commit) {
    4722:	6903      	ldr	r3, [r0, #16]
    4724:	b91b      	cbnz	r3, 472e <settings_commit+0x1e>
			return ch->h_commit();
		} else {
			return 0;
    4726:	2400      	movs	r4, #0
				}
			}
		}
		return rc;
	}
}
    4728:	4620      	mov	r0, r4
    472a:	b00b      	add	sp, #44	; 0x2c
    472c:	bd30      	pop	{r4, r5, pc}
			return ch->h_commit();
    472e:	4798      	blx	r3
    4730:	4604      	mov	r4, r0
    4732:	e7f9      	b.n	4728 <settings_commit+0x18>
		SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    4734:	4b08      	ldr	r3, [pc, #32]	; (4758 <settings_commit+0x48>)
    4736:	681d      	ldr	r5, [r3, #0]
    4738:	2d00      	cmp	r5, #0
    473a:	d0f4      	beq.n	4726 <settings_commit+0x16>
			if (ch->h_commit) {
    473c:	692b      	ldr	r3, [r5, #16]
    473e:	b11b      	cbz	r3, 4748 <settings_commit+0x38>
				rc2 = ch->h_commit();
    4740:	4798      	blx	r3
					rc = rc2;
    4742:	2c00      	cmp	r4, #0
    4744:	bf08      	it	eq
    4746:	4604      	moveq	r4, r0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4748:	682d      	ldr	r5, [r5, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    474a:	2d00      	cmp	r5, #0
    474c:	d1f6      	bne.n	473c <settings_commit+0x2c>
    474e:	e7eb      	b.n	4728 <settings_commit+0x18>
			return -EINVAL;
    4750:	f06f 0415 	mvn.w	r4, #21
    4754:	e7e8      	b.n	4728 <settings_commit+0x18>
    4756:	bf00      	nop
    4758:	20000460 	.word	0x20000460

0000475c <settings_subsys_init>:
}

#endif

int settings_subsys_init(void)
{
    475c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static bool settings_initialized;
	int err;

	if (settings_initialized) {
    475e:	4d20      	ldr	r5, [pc, #128]	; (47e0 <settings_subsys_init+0x84>)
    4760:	782a      	ldrb	r2, [r5, #0]
    4762:	2a00      	cmp	r2, #0
    4764:	d138      	bne.n	47d8 <settings_subsys_init+0x7c>
		return 0;
	}

	settings_init();
    4766:	f7ff ffaf 	bl	46c8 <settings_init>
	u32_t cnt = CONFIG_SETTINGS_FCB_NUM_AREAS + 1;
    476a:	2309      	movs	r3, #9
	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &cnt,
    476c:	4a1d      	ldr	r2, [pc, #116]	; (47e4 <settings_subsys_init+0x88>)
	u32_t cnt = CONFIG_SETTINGS_FCB_NUM_AREAS + 1;
    476e:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &cnt,
    4770:	4669      	mov	r1, sp
    4772:	2003      	movs	r0, #3
    4774:	f7ff fee2 	bl	453c <flash_area_get_sectors>
	if (rc != 0 && rc != -ENOMEM) {
    4778:	b138      	cbz	r0, 478a <settings_subsys_init+0x2e>
    477a:	300c      	adds	r0, #12
    477c:	d005      	beq.n	478a <settings_subsys_init+0x2e>
		k_panic();
    477e:	4040      	eors	r0, r0
    4780:	f380 8811 	msr	BASEPRI, r0
    4784:	f04f 0005 	mov.w	r0, #5
    4788:	df02      	svc	2
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
    478a:	4c17      	ldr	r4, [pc, #92]	; (47e8 <settings_subsys_init+0x8c>)
    478c:	9b00      	ldr	r3, [sp, #0]
    478e:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
    4790:	4620      	mov	r0, r4
    4792:	f000 fa03 	bl	4b9c <settings_fcb_src>
	if (rc != 0) {
    4796:	b1a8      	cbz	r0, 47c4 <settings_subsys_init+0x68>
		rc = flash_area_open(DT_FLASH_AREA_STORAGE_ID, &fap);
    4798:	a901      	add	r1, sp, #4
    479a:	2003      	movs	r0, #3
    479c:	f7ff feba 	bl	4514 <flash_area_open>
		if (rc == 0) {
    47a0:	4601      	mov	r1, r0
    47a2:	2800      	cmp	r0, #0
    47a4:	d1eb      	bne.n	477e <settings_subsys_init+0x22>
			rc = flash_area_erase(fap, 0, fap->fa_size);
    47a6:	9801      	ldr	r0, [sp, #4]
    47a8:	6882      	ldr	r2, [r0, #8]
    47aa:	f01a fcf2 	bl	1f192 <flash_area_erase>
    47ae:	4606      	mov	r6, r0
			flash_area_close(fap);
    47b0:	9801      	ldr	r0, [sp, #4]
    47b2:	f01a fca7 	bl	1f104 <flash_area_close>
		if (rc != 0) {
    47b6:	2e00      	cmp	r6, #0
    47b8:	d1e1      	bne.n	477e <settings_subsys_init+0x22>
			rc = settings_fcb_src(&config_init_settings_fcb);
    47ba:	4620      	mov	r0, r4
    47bc:	f000 f9ee 	bl	4b9c <settings_fcb_src>
	if (rc != 0) {
    47c0:	2800      	cmp	r0, #0
    47c2:	d1dc      	bne.n	477e <settings_subsys_init+0x22>
	rc = settings_fcb_dst(&config_init_settings_fcb);
    47c4:	4808      	ldr	r0, [pc, #32]	; (47e8 <settings_subsys_init+0x8c>)
    47c6:	f000 fa13 	bl	4bf0 <settings_fcb_dst>
	if (rc != 0) {
    47ca:	2800      	cmp	r0, #0
    47cc:	d1d7      	bne.n	477e <settings_subsys_init+0x22>
	settings_mount_fcb_backend(&config_init_settings_fcb);
    47ce:	4806      	ldr	r0, [pc, #24]	; (47e8 <settings_subsys_init+0x8c>)
    47d0:	f000 fa18 	bl	4c04 <settings_mount_fcb_backend>
	settings_init_fcb(); /* func rises kernel panic once error */
	err = 0;
#endif

	if (!err) {
		settings_initialized = true;
    47d4:	2301      	movs	r3, #1
    47d6:	702b      	strb	r3, [r5, #0]
	}

	return err;
}
    47d8:	2000      	movs	r0, #0
    47da:	b002      	add	sp, #8
    47dc:	bd70      	pop	{r4, r5, r6, pc}
    47de:	bf00      	nop
    47e0:	20002173 	.word	0x20002173
    47e4:	20000468 	.word	0x20000468
    47e8:	2000765c 	.word	0x2000765c

000047ec <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
    47ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47f0:	b089      	sub	sp, #36	; 0x24
    47f2:	e9cd 2300 	strd	r2, r3, [sp]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	u8_t rbs = settings_io_cb.rwbs;
    47f6:	4b26      	ldr	r3, [pc, #152]	; (4890 <settings_line_raw_read_until+0xa4>)
    47f8:	f893 a00c 	ldrb.w	sl, [r3, #12]
{
    47fc:	4607      	mov	r7, r0
    47fe:	4689      	mov	r9, r1
	off_t off;
	int rc;

	rem_size = len_req;
    4800:	4615      	mov	r5, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
    4802:	4698      	mov	r8, r3
	while (rem_size) {
    4804:	b965      	cbnz	r5, 4820 <settings_line_raw_read_until+0x34>
    4806:	462e      	mov	r6, r5

		out += len;
		seek += len;
	}

	*len_read = len_req - rem_size;
    4808:	9b00      	ldr	r3, [sp, #0]
    480a:	1b5d      	subs	r5, r3, r5
    480c:	9b01      	ldr	r3, [sp, #4]
    480e:	601d      	str	r5, [r3, #0]

	if (until_char != NULL) {
    4810:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4812:	2b00      	cmp	r3, #0
    4814:	d03a      	beq.n	488c <settings_line_raw_read_until+0xa0>
		return (rc) ? 0 : 1;
    4816:	f086 0001 	eor.w	r0, r6, #1
	}

	return 0;
}
    481a:	b009      	add	sp, #36	; 0x24
    481c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		read_size = sizeof(temp_buf);
    4820:	2310      	movs	r3, #16
		off = seek / rbs * rbs;
    4822:	fb97 fbfa 	sdiv	fp, r7, sl
    4826:	fb0a fb0b 	mul.w	fp, sl, fp
		read_size = sizeof(temp_buf);
    482a:	9303      	str	r3, [sp, #12]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
    482c:	f8d8 4000 	ldr.w	r4, [r8]
    4830:	9813      	ldr	r0, [sp, #76]	; 0x4c
    4832:	ab03      	add	r3, sp, #12
    4834:	aa04      	add	r2, sp, #16
    4836:	4659      	mov	r1, fp
    4838:	47a0      	blx	r4
		if (rc) {
    483a:	4606      	mov	r6, r0
    483c:	bb18      	cbnz	r0, 4886 <settings_line_raw_read_until+0x9a>
		len = read_size - off;
    483e:	9c03      	ldr	r4, [sp, #12]
    4840:	eba7 0b0b 	sub.w	fp, r7, fp
    4844:	ab04      	add	r3, sp, #16
    4846:	eba4 040b 	sub.w	r4, r4, fp
		len = MIN(rem_size, len);
    484a:	449b      	add	fp, r3
		if (until_char != NULL) {
    484c:	9b12      	ldr	r3, [sp, #72]	; 0x48
		len = MIN(rem_size, len);
    484e:	42ac      	cmp	r4, r5
    4850:	bf28      	it	cs
    4852:	462c      	movcs	r4, r5
		if (until_char != NULL) {
    4854:	b143      	cbz	r3, 4868 <settings_line_raw_read_until+0x7c>
			pend = memchr(&temp_buf[off], *until_char, len);
    4856:	4622      	mov	r2, r4
    4858:	7819      	ldrb	r1, [r3, #0]
    485a:	4658      	mov	r0, fp
    485c:	f01a ff20 	bl	1f6a0 <memchr>
			if (pend != NULL) {
    4860:	b110      	cbz	r0, 4868 <settings_line_raw_read_until+0x7c>
				len = pend - &temp_buf[off];
    4862:	eba0 040b 	sub.w	r4, r0, fp
				rc = 1; /* will cause loop expiration */
    4866:	2601      	movs	r6, #1
		memcpy(out, &temp_buf[off], len);
    4868:	4622      	mov	r2, r4
    486a:	4659      	mov	r1, fp
    486c:	4648      	mov	r0, r9
    486e:	f01a fecb 	bl	1f608 <memcpy>
		if (exp_size > read_size || rc) {
    4872:	9a03      	ldr	r2, [sp, #12]
    4874:	2a0f      	cmp	r2, #15
		rem_size -= len;
    4876:	eba5 0504 	sub.w	r5, r5, r4
		if (exp_size > read_size || rc) {
    487a:	d9c5      	bls.n	4808 <settings_line_raw_read_until+0x1c>
    487c:	2e00      	cmp	r6, #0
    487e:	d1c3      	bne.n	4808 <settings_line_raw_read_until+0x1c>
		out += len;
    4880:	44a1      	add	r9, r4
		seek += len;
    4882:	4427      	add	r7, r4
    4884:	e7be      	b.n	4804 <settings_line_raw_read_until+0x18>
			return -EIO;
    4886:	f06f 0004 	mvn.w	r0, #4
    488a:	e7c6      	b.n	481a <settings_line_raw_read_until+0x2e>
	return 0;
    488c:	9812      	ldr	r0, [sp, #72]	; 0x48
    488e:	e7c4      	b.n	481a <settings_line_raw_read_until+0x2e>
    4890:	200004b0 	.word	0x200004b0

00004894 <settings_line_write>:
{
    4894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t wbs = settings_io_cb.rwbs;
    4898:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 4954 <settings_line_write+0xc0>
{
    489c:	b087      	sub	sp, #28
	u8_t wbs = settings_io_cb.rwbs;
    489e:	f89a 700c 	ldrb.w	r7, [sl, #12]
{
    48a2:	9301      	str	r3, [sp, #4]
    48a4:	4683      	mov	fp, r0
    48a6:	4689      	mov	r9, r1
    48a8:	4690      	mov	r8, r2
	rem = strlen(name);
    48aa:	f01a fe73 	bl	1f594 <strlen>
	w_size = rem - rem % wbs;
    48ae:	fbb0 f4f7 	udiv	r4, r0, r7
    48b2:	fb07 0414 	mls	r4, r7, r4, r0
    48b6:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
    48b8:	462b      	mov	r3, r5
    48ba:	465a      	mov	r2, fp
    48bc:	9901      	ldr	r1, [sp, #4]
    48be:	9810      	ldr	r0, [sp, #64]	; 0x40
    48c0:	f8da 6004 	ldr.w	r6, [sl, #4]
    48c4:	47b0      	blx	r6
	w_loc += w_size;
    48c6:	9b01      	ldr	r3, [sp, #4]
    48c8:	442b      	add	r3, r5
    48ca:	9301      	str	r3, [sp, #4]
	if (rem) {
    48cc:	b12c      	cbz	r4, 48da <settings_line_write+0x46>
		memcpy(w_buf, name, rem);
    48ce:	4622      	mov	r2, r4
    48d0:	eb0b 0105 	add.w	r1, fp, r5
    48d4:	a802      	add	r0, sp, #8
    48d6:	f01a fe97 	bl	1f608 <memcpy>
	w_buf[rem] = '=';
    48da:	ab06      	add	r3, sp, #24
    48dc:	4423      	add	r3, r4
    48de:	223d      	movs	r2, #61	; 0x3d
    48e0:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
    48e4:	3401      	adds	r4, #1
		while (w_size < sizeof(w_buf)) {
    48e6:	2c0f      	cmp	r4, #15
    48e8:	d90d      	bls.n	4906 <settings_line_write+0x72>
    48ea:	2500      	movs	r5, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
    48ec:	4623      	mov	r3, r4
    48ee:	aa02      	add	r2, sp, #8
    48f0:	9901      	ldr	r1, [sp, #4]
    48f2:	9810      	ldr	r0, [sp, #64]	; 0x40
    48f4:	f8da 6004 	ldr.w	r6, [sl, #4]
    48f8:	47b0      	blx	r6
		if (rc) {
    48fa:	bb30      	cbnz	r0, 494a <settings_line_write+0xb6>
		if (done) {
    48fc:	bb3d      	cbnz	r5, 494e <settings_line_write+0xba>
		w_loc += w_size;
    48fe:	9b01      	ldr	r3, [sp, #4]
    4900:	4423      	add	r3, r4
    4902:	9301      	str	r3, [sp, #4]
		w_size = 0;
    4904:	462c      	mov	r4, r5
				if (rem) {
    4906:	f1b8 0f00 	cmp.w	r8, #0
    490a:	d00f      	beq.n	492c <settings_line_write+0x98>
					add = MIN(rem, sizeof(w_buf) - w_size);
    490c:	f1c4 0510 	rsb	r5, r4, #16
    4910:	4545      	cmp	r5, r8
    4912:	bf28      	it	cs
    4914:	4645      	movcs	r5, r8
					memcpy(&w_buf[w_size], value, add);
    4916:	ab02      	add	r3, sp, #8
    4918:	4649      	mov	r1, r9
    491a:	1918      	adds	r0, r3, r4
    491c:	462a      	mov	r2, r5
    491e:	f01a fe73 	bl	1f608 <memcpy>
					value += add;
    4922:	44a9      	add	r9, r5
					rem -= add;
    4924:	eba8 0805 	sub.w	r8, r8, r5
					w_size += add;
    4928:	442c      	add	r4, r5
    492a:	e7dc      	b.n	48e6 <settings_line_write+0x52>
					add = (w_size) % wbs;
    492c:	fbb4 f5f7 	udiv	r5, r4, r7
    4930:	fb07 4515 	mls	r5, r7, r5, r4
					if (add) {
    4934:	b13d      	cbz	r5, 4946 <settings_line_write+0xb2>
						add = wbs - add;
    4936:	1b7d      	subs	r5, r7, r5
						memset(&w_buf[w_size], '\0',
    4938:	ab02      	add	r3, sp, #8
    493a:	1918      	adds	r0, r3, r4
    493c:	462a      	mov	r2, r5
    493e:	4641      	mov	r1, r8
    4940:	f01a fe8c 	bl	1f65c <memset>
						w_size += add;
    4944:	442c      	add	r4, r5
					done = true;
    4946:	2501      	movs	r5, #1
    4948:	e7d0      	b.n	48ec <settings_line_write+0x58>
			return -EIO;
    494a:	f06f 0004 	mvn.w	r0, #4
}
    494e:	b007      	add	sp, #28
    4950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4954:	200004b0 	.word	0x200004b0

00004958 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
    4958:	4b03      	ldr	r3, [pc, #12]	; (4968 <settings_line_val_get_len+0x10>)
{
    495a:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
    495c:	689b      	ldr	r3, [r3, #8]
{
    495e:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
    4960:	4608      	mov	r0, r1
    4962:	4798      	blx	r3
		return 0;
	}
#else
	return len - val_off;
#endif
}
    4964:	1b00      	subs	r0, r0, r4
    4966:	bd10      	pop	{r4, pc}
    4968:	200004b0 	.word	0x200004b0

0000496c <settings_entry_copy>:
}


int settings_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			off_t src_off, size_t len)
{
    496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4970:	b086      	sub	sp, #24
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
    4972:	4f12      	ldr	r7, [pc, #72]	; (49bc <settings_entry_copy+0x50>)
{
    4974:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4976:	4681      	mov	r9, r0
    4978:	4688      	mov	r8, r1
    497a:	4692      	mov	sl, r2
    497c:	461e      	mov	r6, r3
	while (len) {
    497e:	b91c      	cbnz	r4, 4988 <settings_entry_copy+0x1c>
    4980:	4620      	mov	r0, r4
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
    4982:	b006      	add	sp, #24
    4984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
    4988:	2c10      	cmp	r4, #16
    498a:	4623      	mov	r3, r4
    498c:	bf28      	it	cs
    498e:	2310      	movcs	r3, #16
    4990:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
    4992:	aa02      	add	r2, sp, #8
    4994:	ab01      	add	r3, sp, #4
    4996:	4631      	mov	r1, r6
    4998:	4650      	mov	r0, sl
    499a:	683d      	ldr	r5, [r7, #0]
    499c:	47a8      	blx	r5
		if (rc) {
    499e:	2800      	cmp	r0, #0
    49a0:	d1ef      	bne.n	4982 <settings_entry_copy+0x16>
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, chunk_size);
    49a2:	9b01      	ldr	r3, [sp, #4]
    49a4:	687d      	ldr	r5, [r7, #4]
    49a6:	aa02      	add	r2, sp, #8
    49a8:	4641      	mov	r1, r8
    49aa:	4648      	mov	r0, r9
    49ac:	47a8      	blx	r5
		if (rc) {
    49ae:	2800      	cmp	r0, #0
    49b0:	d1e7      	bne.n	4982 <settings_entry_copy+0x16>
		src_off += chunk_size;
    49b2:	9b01      	ldr	r3, [sp, #4]
    49b4:	441e      	add	r6, r3
		dst_off += chunk_size;
    49b6:	4498      	add	r8, r3
		len -= chunk_size;
    49b8:	1ae4      	subs	r4, r4, r3
    49ba:	e7e0      	b.n	497e <settings_entry_copy+0x12>
    49bc:	200004b0 	.word	0x200004b0

000049c0 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  u8_t io_rwbs)
{
    49c0:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
    49c2:	4c03      	ldr	r4, [pc, #12]	; (49d0 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
    49c4:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
    49c8:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
    49ca:	7323      	strb	r3, [r4, #12]
}
    49cc:	bd10      	pop	{r4, pc}
    49ce:	bf00      	nop
    49d0:	200004b0 	.word	0x200004b0

000049d4 <settings_fcb_save>:
}

/* ::csi_save implementation */
static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
    49d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49d8:	b0bf      	sub	sp, #252	; 0xfc
    49da:	4605      	mov	r5, r0
    49dc:	9205      	str	r2, [sp, #20]
    49de:	469b      	mov	fp, r3
	int len;
	int rc;
	int i;
	u8_t wbs;

	if (!name) {
    49e0:	460f      	mov	r7, r1
    49e2:	b929      	cbnz	r1, 49f0 <settings_fcb_save+0x1c>
		return -EINVAL;
    49e4:	f06f 0515 	mvn.w	r5, #21
		if (!rc) {
			rc = i;
		}
	}
	return rc;
}
    49e8:	4628      	mov	r0, r5
    49ea:	b03f      	add	sp, #252	; 0xfc
    49ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	len = settings_line_len_calc(name, val_len);
    49f0:	4619      	mov	r1, r3
    49f2:	4638      	mov	r0, r7
    49f4:	f01a fc9e 	bl	1f334 <settings_line_len_calc>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    49f8:	4b5b      	ldr	r3, [pc, #364]	; (4b68 <settings_fcb_save+0x194>)
    49fa:	4a5c      	ldr	r2, [pc, #368]	; (4b6c <settings_fcb_save+0x198>)
	len = settings_line_len_calc(name, val_len);
    49fc:	9004      	str	r0, [sp, #16]
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    49fe:	1a9b      	subs	r3, r3, r2
    4a00:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    4a04:	9303      	str	r3, [sp, #12]
	for (i = 0; i < cf->cf_fcb.f_sector_cnt - 1; i++) {
    4a06:	f04f 0800 	mov.w	r8, #0
    4a0a:	7b6b      	ldrb	r3, [r5, #13]
    4a0c:	3b01      	subs	r3, #1
    4a0e:	4543      	cmp	r3, r8
    4a10:	dde8      	ble.n	49e4 <settings_fcb_save+0x10>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
    4a12:	f105 0408 	add.w	r4, r5, #8
    4a16:	ae09      	add	r6, sp, #36	; 0x24
    4a18:	4632      	mov	r2, r6
    4a1a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    4a1e:	4620      	mov	r0, r4
    4a20:	f01a f811 	bl	1ea46 <fcb_append>
		if (rc != FCB_ERR_NOSPACE) {
    4a24:	1d02      	adds	r2, r0, #4
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
    4a26:	4603      	mov	r3, r0
		if (rc != FCB_ERR_NOSPACE) {
    4a28:	f040 8087 	bne.w	4b3a <settings_fcb_save+0x166>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
    4a2c:	4620      	mov	r0, r4
    4a2e:	f019 ffee 	bl	1ea0e <fcb_append_to_scratch>
	if (rc) {
    4a32:	4606      	mov	r6, r0
    4a34:	b110      	cbz	r0, 4a3c <settings_fcb_save+0x68>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt - 1; i++) {
    4a36:	f108 0801 	add.w	r8, r8, #1
    4a3a:	e7e6      	b.n	4a0a <settings_fcb_save+0x36>
	rbs = flash_area_align(cf->cf_fcb.fap);
    4a3c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    4a3e:	f01a fbce 	bl	1f1de <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
    4a42:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    4a44:	9312      	str	r3, [sp, #72]	; 0x48
	loc1.loc.fe_elem_off = 0;
    4a46:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    4a4a:	4e49      	ldr	r6, [pc, #292]	; (4b70 <settings_fcb_save+0x19c>)
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
    4a4c:	a90e      	add	r1, sp, #56	; 0x38
    4a4e:	4620      	mov	r0, r4
    4a50:	f01a fab7 	bl	1efc2 <fcb_getnext>
    4a54:	b198      	cbz	r0, 4a7e <settings_fcb_save+0xaa>
	rc = fcb_rotate(&cf->cf_fcb);
    4a56:	4620      	mov	r0, r4
    4a58:	f01a facb 	bl	1eff2 <fcb_rotate>
	if (rc != 0) {
    4a5c:	4601      	mov	r1, r0
    4a5e:	2800      	cmp	r0, #0
    4a60:	d0e9      	beq.n	4a36 <settings_fcb_save+0x62>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
    4a62:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    4a66:	f043 0301 	orr.w	r3, r3, #1
    4a6a:	f363 0a07 	bfi	sl, r3, #0, #8
    4a6e:	9b03      	ldr	r3, [sp, #12]
    4a70:	4840      	ldr	r0, [pc, #256]	; (4b74 <settings_fcb_save+0x1a0>)
    4a72:	f363 1a8f 	bfi	sl, r3, #6, #10
    4a76:	4652      	mov	r2, sl
    4a78:	f019 fcf0 	bl	1e45c <log_1>
    4a7c:	e7db      	b.n	4a36 <settings_fcb_save+0x62>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
    4a7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4a82:	429a      	cmp	r2, r3
    4a84:	d1e7      	bne.n	4a56 <settings_fcb_save+0x82>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
    4a86:	ab0e      	add	r3, sp, #56	; 0x38
    4a88:	aa07      	add	r2, sp, #28
    4a8a:	2149      	movs	r1, #73	; 0x49
    4a8c:	a818      	add	r0, sp, #96	; 0x60
    4a8e:	f01a fc6c 	bl	1f36a <settings_line_name_read>
		if (rc) {
    4a92:	2800      	cmp	r0, #0
    4a94:	d1da      	bne.n	4a4c <settings_fcb_save+0x78>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
    4a96:	9b07      	ldr	r3, [sp, #28]
    4a98:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    4a9c:	3301      	adds	r3, #1
    4a9e:	4293      	cmp	r3, r2
    4aa0:	d0d4      	beq.n	4a4c <settings_fcb_save+0x78>
		loc2 = loc1;
    4aa2:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
    4aa6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4aaa:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
    4aae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4ab2:	f8de 3000 	ldr.w	r3, [lr]
    4ab6:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
    4aba:	a913      	add	r1, sp, #76	; 0x4c
    4abc:	4620      	mov	r0, r4
    4abe:	f01a fa80 	bl	1efc2 <fcb_getnext>
    4ac2:	b338      	cbz	r0, 4b14 <settings_fcb_save+0x140>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
    4ac4:	aa13      	add	r2, sp, #76	; 0x4c
    4ac6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    4aca:	4620      	mov	r0, r4
    4acc:	f019 ffbb 	bl	1ea46 <fcb_append>
		if (rc) {
    4ad0:	4603      	mov	r3, r0
    4ad2:	2800      	cmp	r0, #0
    4ad4:	d1ba      	bne.n	4a4c <settings_fcb_save+0x78>
		rc = settings_entry_copy(&loc2, 0, &loc1, 0,
    4ad6:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    4ada:	9200      	str	r2, [sp, #0]
    4adc:	4601      	mov	r1, r0
    4ade:	aa0e      	add	r2, sp, #56	; 0x38
    4ae0:	a813      	add	r0, sp, #76	; 0x4c
    4ae2:	f7ff ff43 	bl	496c <settings_entry_copy>
		if (rc) {
    4ae6:	2800      	cmp	r0, #0
    4ae8:	d1b0      	bne.n	4a4c <settings_fcb_save+0x78>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
    4aea:	a913      	add	r1, sp, #76	; 0x4c
    4aec:	4620      	mov	r0, r4
    4aee:	f01a f82d 	bl	1eb4c <fcb_append_finish>
		if (rc != 0) {
    4af2:	4601      	mov	r1, r0
    4af4:	2800      	cmp	r0, #0
    4af6:	d0a9      	beq.n	4a4c <settings_fcb_save+0x78>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    4af8:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    4afc:	f043 0301 	orr.w	r3, r3, #1
    4b00:	f363 0907 	bfi	r9, r3, #0, #8
    4b04:	9b03      	ldr	r3, [sp, #12]
    4b06:	f363 198f 	bfi	r9, r3, #6, #10
    4b0a:	464a      	mov	r2, r9
    4b0c:	4630      	mov	r0, r6
    4b0e:	f019 fca5 	bl	1e45c <log_1>
    4b12:	e79b      	b.n	4a4c <settings_fcb_save+0x78>
			rc = settings_line_name_read(name2, sizeof(name2),
    4b14:	ab13      	add	r3, sp, #76	; 0x4c
    4b16:	aa08      	add	r2, sp, #32
    4b18:	2149      	movs	r1, #73	; 0x49
    4b1a:	a82b      	add	r0, sp, #172	; 0xac
    4b1c:	f01a fc25 	bl	1f36a <settings_line_name_read>
			if (rc) {
    4b20:	2800      	cmp	r0, #0
    4b22:	d1ca      	bne.n	4aba <settings_fcb_save+0xe6>
			if ((val1_off == val2_off) &&
    4b24:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
    4b28:	429a      	cmp	r2, r3
    4b2a:	d1c6      	bne.n	4aba <settings_fcb_save+0xe6>
			    !memcmp(name1, name2, val1_off)) {
    4b2c:	a92b      	add	r1, sp, #172	; 0xac
    4b2e:	a818      	add	r0, sp, #96	; 0x60
    4b30:	f01a fd43 	bl	1f5ba <memcmp>
			if ((val1_off == val2_off) &&
    4b34:	2800      	cmp	r0, #0
    4b36:	d1c0      	bne.n	4aba <settings_fcb_save+0xe6>
    4b38:	e788      	b.n	4a4c <settings_fcb_save+0x78>
	if (rc) {
    4b3a:	2800      	cmp	r0, #0
    4b3c:	f47f af52 	bne.w	49e4 <settings_fcb_save+0x10>
	loc.fap = cf->cf_fcb.fap;
    4b40:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    4b42:	920d      	str	r2, [sp, #52]	; 0x34
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
    4b44:	9600      	str	r6, [sp, #0]
    4b46:	465a      	mov	r2, fp
    4b48:	9905      	ldr	r1, [sp, #20]
    4b4a:	4638      	mov	r0, r7
    4b4c:	f7ff fea2 	bl	4894 <settings_line_write>
	if (rc != -EIO) {
    4b50:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
    4b52:	4605      	mov	r5, r0
	if (rc != -EIO) {
    4b54:	f43f af48 	beq.w	49e8 <settings_fcb_save+0x14>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
    4b58:	4631      	mov	r1, r6
    4b5a:	4620      	mov	r0, r4
    4b5c:	f019 fff6 	bl	1eb4c <fcb_append_finish>
			rc = i;
    4b60:	2d00      	cmp	r5, #0
    4b62:	bf08      	it	eq
    4b64:	4605      	moveq	r5, r0
    4b66:	e73f      	b.n	49e8 <settings_fcb_save+0x14>
    4b68:	0002350c 	.word	0x0002350c
    4b6c:	000233ec 	.word	0x000233ec
    4b70:	000244a9 	.word	0x000244a9
    4b74:	000244ca 	.word	0x000244ca

00004b78 <settings_fcb_load>:
{
    4b78:	b507      	push	{r0, r1, r2, lr}
	rc = fcb_walk(&cf->cf_fcb, 0, settings_fcb_load_cb, &arg);
    4b7a:	3008      	adds	r0, #8
	arg.cb_arg = cb_arg;
    4b7c:	e9cd 1200 	strd	r1, r2, [sp]
	rc = fcb_walk(&cf->cf_fcb, 0, settings_fcb_load_cb, &arg);
    4b80:	466b      	mov	r3, sp
    4b82:	4a05      	ldr	r2, [pc, #20]	; (4b98 <settings_fcb_load+0x20>)
    4b84:	2100      	movs	r1, #0
    4b86:	f01a fa6b 	bl	1f060 <fcb_walk>
	if (rc) {
    4b8a:	2800      	cmp	r0, #0
}
    4b8c:	bf18      	it	ne
    4b8e:	f06f 0015 	mvnne.w	r0, #21
    4b92:	b003      	add	sp, #12
    4b94:	f85d fb04 	ldr.w	pc, [sp], #4
    4b98:	0001f38f 	.word	0x0001f38f

00004b9c <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
    4b9c:	2301      	movs	r3, #1
{
    4b9e:	b570      	push	{r4, r5, r6, lr}
    4ba0:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
    4ba2:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
    4ba4:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(DT_FLASH_AREA_STORAGE_ID, &cf->cf_fcb);
    4ba6:	f100 0608 	add.w	r6, r0, #8
    4baa:	4631      	mov	r1, r6
    4bac:	2003      	movs	r0, #3
    4bae:	f01a f8a4 	bl	1ecfa <fcb_init>
		if (rc) {
    4bb2:	4605      	mov	r5, r0
    4bb4:	b9b0      	cbnz	r0, 4be4 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
    4bb6:	4630      	mov	r0, r6
    4bb8:	f01a f832 	bl	1ec20 <fcb_free_sector_cnt>
    4bbc:	2800      	cmp	r0, #0
    4bbe:	dc0a      	bgt.n	4bd6 <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
    4bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
    4bc2:	6c20      	ldr	r0, [r4, #64]	; 0x40
    4bc4:	e9d3 1200 	ldrd	r1, r2, [r3]
    4bc8:	f01a fae3 	bl	1f192 <flash_area_erase>
			if (rc) {
    4bcc:	2800      	cmp	r0, #0
    4bce:	d0ec      	beq.n	4baa <settings_fcb_src+0xe>
				return -EIO;
    4bd0:	f06f 0504 	mvn.w	r5, #4
    4bd4:	e004      	b.n	4be0 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
    4bd6:	4b05      	ldr	r3, [pc, #20]	; (4bec <settings_fcb_src+0x50>)
    4bd8:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
    4bda:	4620      	mov	r0, r4
    4bdc:	f7ff fd1c 	bl	4618 <settings_src_register>
}
    4be0:	4628      	mov	r0, r5
    4be2:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    4be4:	f06f 0515 	mvn.w	r5, #21
    4be8:	e7fa      	b.n	4be0 <settings_fcb_src+0x44>
    4bea:	bf00      	nop
    4bec:	200076a0 	.word	0x200076a0

00004bf0 <settings_fcb_dst>:
{
    4bf0:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_fcb_itf;
    4bf2:	4b03      	ldr	r3, [pc, #12]	; (4c00 <settings_fcb_dst+0x10>)
    4bf4:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
    4bf6:	f7ff fd2f 	bl	4658 <settings_dst_register>
}
    4bfa:	2000      	movs	r0, #0
    4bfc:	bd08      	pop	{r3, pc}
    4bfe:	bf00      	nop
    4c00:	200076a0 	.word	0x200076a0

00004c04 <settings_mount_fcb_backend>:
{
	u8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
    4c04:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    4c08:	4a02      	ldr	r2, [pc, #8]	; (4c14 <settings_mount_fcb_backend+0x10>)
    4c0a:	4903      	ldr	r1, [pc, #12]	; (4c18 <settings_mount_fcb_backend+0x14>)
    4c0c:	4803      	ldr	r0, [pc, #12]	; (4c1c <settings_mount_fcb_backend+0x18>)
    4c0e:	f7ff bed7 	b.w	49c0 <settings_line_io_init>
    4c12:	bf00      	nop
    4c14:	0001f38b 	.word	0x0001f38b
    4c18:	0001f3c1 	.word	0x0001f3c1
    4c1c:	0001f3d5 	.word	0x0001f3d5

00004c20 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4c20:	280a      	cmp	r0, #10
{
    4c22:	b538      	push	{r3, r4, r5, lr}
    4c24:	4604      	mov	r4, r0
    4c26:	4d07      	ldr	r5, [pc, #28]	; (4c44 <console_out+0x24>)
	if ('\n' == c) {
    4c28:	d104      	bne.n	4c34 <console_out+0x14>
    4c2a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    4c2c:	6843      	ldr	r3, [r0, #4]
    4c2e:	210d      	movs	r1, #13
    4c30:	685b      	ldr	r3, [r3, #4]
    4c32:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4c34:	6828      	ldr	r0, [r5, #0]
    4c36:	6843      	ldr	r3, [r0, #4]
    4c38:	b2e1      	uxtb	r1, r4
    4c3a:	685b      	ldr	r3, [r3, #4]
    4c3c:	4798      	blx	r3

	return c;
}
    4c3e:	4620      	mov	r0, r4
    4c40:	bd38      	pop	{r3, r4, r5, pc}
    4c42:	bf00      	nop
    4c44:	200004c0 	.word	0x200004c0

00004c48 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    4c48:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    4c4a:	4c04      	ldr	r4, [pc, #16]	; (4c5c <uart_console_hook_install+0x14>)
    4c4c:	4620      	mov	r0, r4
    4c4e:	f001 fa49 	bl	60e4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4c52:	4620      	mov	r0, r4
}
    4c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    4c58:	f7fe bb38 	b.w	32cc <__printk_hook_install>
    4c5c:	00004c21 	.word	0x00004c21

00004c60 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    4c60:	b508      	push	{r3, lr}
    4c62:	4804      	ldr	r0, [pc, #16]	; (4c74 <uart_console_init+0x14>)
    4c64:	f016 fd28 	bl	1b6b8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    4c68:	4b03      	ldr	r3, [pc, #12]	; (4c78 <uart_console_init+0x18>)
    4c6a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    4c6c:	f7ff ffec 	bl	4c48 <uart_console_hook_install>

	return 0;
}
    4c70:	2000      	movs	r0, #0
    4c72:	bd08      	pop	{r3, pc}
    4c74:	0002443f 	.word	0x0002443f
    4c78:	200004c0 	.word	0x200004c0

00004c7c <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    4c7c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    4c7e:	4c04      	ldr	r4, [pc, #16]	; (4c90 <rtt_console_init+0x14>)
    4c80:	4620      	mov	r0, r4
    4c82:	f7fe fb23 	bl	32cc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    4c86:	4620      	mov	r0, r4
    4c88:	f001 fa2c 	bl	60e4 <__stdout_hook_install>

	return 0;
}
    4c8c:	2000      	movs	r0, #0
    4c8e:	bd10      	pop	{r4, pc}
    4c90:	00004c95 	.word	0x00004c95

00004c94 <rtt_console_out>:
{
    4c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    4c98:	4f16      	ldr	r7, [pc, #88]	; (4cf4 <rtt_console_out+0x60>)
    4c9a:	4d17      	ldr	r5, [pc, #92]	; (4cf8 <rtt_console_out+0x64>)
	char c = (char)character;
    4c9c:	f88d 0007 	strb.w	r0, [sp, #7]
{
    4ca0:	4606      	mov	r6, r0
	char c = (char)character;
    4ca2:	2403      	movs	r4, #3
    4ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4ca8:	4638      	mov	r0, r7
    4caa:	f016 ff39 	bl	1bb20 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    4cae:	2201      	movs	r2, #1
    4cb0:	f10d 0107 	add.w	r1, sp, #7
    4cb4:	2000      	movs	r0, #0
    4cb6:	f7fe fecf 	bl	3a58 <SEGGER_RTT_WriteNoLock>
    4cba:	4680      	mov	r8, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    4cbc:	4638      	mov	r0, r7
    4cbe:	f016 ff9b 	bl	1bbf8 <z_impl_k_mutex_unlock>
		if (cnt) {
    4cc2:	f1b8 0f00 	cmp.w	r8, #0
    4cc6:	d005      	beq.n	4cd4 <rtt_console_out+0x40>
			host_present = true;
    4cc8:	2301      	movs	r3, #1
    4cca:	702b      	strb	r3, [r5, #0]
}
    4ccc:	4630      	mov	r0, r6
    4cce:	b002      	add	sp, #8
    4cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    4cd4:	782b      	ldrb	r3, [r5, #0]
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d0f8      	beq.n	4ccc <rtt_console_out+0x38>
			if (max_cnt) {
    4cda:	3c01      	subs	r4, #1
    4cdc:	d007      	beq.n	4cee <rtt_console_out+0x5a>
	if (k_is_in_isr()) {
    4cde:	f017 fb27 	bl	1c330 <k_is_in_isr>
    4ce2:	2800      	cmp	r0, #0
    4ce4:	d1de      	bne.n	4ca4 <rtt_console_out+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    4ce6:	2002      	movs	r0, #2
    4ce8:	f017 fa52 	bl	1c190 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    4cec:	e7da      	b.n	4ca4 <rtt_console_out+0x10>
				host_present = false;
    4cee:	702c      	strb	r4, [r5, #0]
    4cf0:	e7ec      	b.n	4ccc <rtt_console_out+0x38>
    4cf2:	bf00      	nop
    4cf4:	200080c8 	.word	0x200080c8
    4cf8:	20002174 	.word	0x20002174

00004cfc <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    4cfc:	b510      	push	{r4, lr}
	__asm__ volatile(
    4cfe:	f04f 0320 	mov.w	r3, #32
    4d02:	f3ef 8211 	mrs	r2, BASEPRI
    4d06:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    4d0a:	4c15      	ldr	r4, [pc, #84]	; (4d60 <_m16src_stop+0x64>)
    4d0c:	7823      	ldrb	r3, [r4, #0]
    4d0e:	b933      	cbnz	r3, 4d1e <_m16src_stop+0x22>
	__asm__ volatile(
    4d10:	f382 8811 	msr	BASEPRI, r2
    4d14:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    4d18:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    4d1c:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    4d1e:	3b01      	subs	r3, #1
    4d20:	b2db      	uxtb	r3, r3
    4d22:	7023      	strb	r3, [r4, #0]
    4d24:	b133      	cbz	r3, 4d34 <_m16src_stop+0x38>
    4d26:	f382 8811 	msr	BASEPRI, r2
    4d2a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4d2e:	f06f 000f 	mvn.w	r0, #15
    4d32:	e7f3      	b.n	4d1c <_m16src_stop+0x20>
	if (m16src_grd) {
    4d34:	4b0b      	ldr	r3, [pc, #44]	; (4d64 <_m16src_stop+0x68>)
    4d36:	7818      	ldrb	r0, [r3, #0]
    4d38:	2101      	movs	r1, #1
    4d3a:	b138      	cbz	r0, 4d4c <_m16src_stop+0x50>
		m16src_ref++;
    4d3c:	7021      	strb	r1, [r4, #0]
    4d3e:	f382 8811 	msr	BASEPRI, r2
    4d42:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    4d46:	f06f 000a 	mvn.w	r0, #10
    4d4a:	e7e7      	b.n	4d1c <_m16src_stop+0x20>
	m16src_grd = 1U;
    4d4c:	7019      	strb	r1, [r3, #0]
    4d4e:	f382 8811 	msr	BASEPRI, r2
    4d52:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    4d56:	4a04      	ldr	r2, [pc, #16]	; (4d68 <_m16src_stop+0x6c>)
    4d58:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
    4d5a:	7018      	strb	r0, [r3, #0]
	return 0;
    4d5c:	e7de      	b.n	4d1c <_m16src_stop+0x20>
    4d5e:	bf00      	nop
    4d60:	20002177 	.word	0x20002177
    4d64:	20002176 	.word	0x20002176
    4d68:	40000004 	.word	0x40000004

00004d6c <_m16src_start>:
{
    4d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4d6e:	f04f 0220 	mov.w	r2, #32
    4d72:	f3ef 8311 	mrs	r3, BASEPRI
    4d76:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    4d7a:	4a29      	ldr	r2, [pc, #164]	; (4e20 <_m16src_start+0xb4>)
    4d7c:	7810      	ldrb	r0, [r2, #0]
    4d7e:	1c44      	adds	r4, r0, #1
    4d80:	7014      	strb	r4, [r2, #0]
    4d82:	b180      	cbz	r0, 4da6 <_m16src_start+0x3a>
	__asm__ volatile(
    4d84:	f383 8811 	msr	BASEPRI, r3
    4d88:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    4d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d90:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4d94:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    4d98:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    4d9c:	bf0c      	ite	eq
    4d9e:	2000      	moveq	r0, #0
    4da0:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    4da4:	e009      	b.n	4dba <_m16src_start+0x4e>
	if (m16src_grd) {
    4da6:	4d1f      	ldr	r5, [pc, #124]	; (4e24 <_m16src_start+0xb8>)
    4da8:	782f      	ldrb	r7, [r5, #0]
    4daa:	b13f      	cbz	r7, 4dbc <_m16src_start+0x50>
		m16src_ref--;
    4dac:	7010      	strb	r0, [r2, #0]
    4dae:	f383 8811 	msr	BASEPRI, r3
    4db2:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    4db6:	f06f 000a 	mvn.w	r0, #10
}
    4dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    4dbc:	2601      	movs	r6, #1
    4dbe:	702e      	strb	r6, [r5, #0]
    4dc0:	f383 8811 	msr	BASEPRI, r3
    4dc4:	f3bf 8f6f 	isb	sy
	if (blocking) {
    4dc8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4dcc:	b319      	cbz	r1, 4e16 <_m16src_start+0xaa>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    4dce:	4638      	mov	r0, r7
    4dd0:	f000 fb9e 	bl	5510 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4dd4:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    4dd8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    4ddc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    4de0:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    4de2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    4de6:	b192      	cbz	r2, 4e0e <_m16src_start+0xa2>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4de8:	2200      	movs	r2, #0
    4dea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4dee:	4a0e      	ldr	r2, [pc, #56]	; (4e28 <_m16src_start+0xbc>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    4df0:	f013 0f01 	tst.w	r3, #1
    4df4:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    4df8:	bf08      	it	eq
    4dfa:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    4dfe:	2000      	movs	r0, #0
    4e00:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    4e04:	f000 fb74 	bl	54f0 <z_arch_irq_enable>
	m16src_grd = 0U;
    4e08:	2300      	movs	r3, #0
    4e0a:	702b      	strb	r3, [r5, #0]
    4e0c:	e7be      	b.n	4d8c <_m16src_start+0x20>
			__WFE();
    4e0e:	bf20      	wfe
			__SEV();
    4e10:	bf40      	sev
			__WFE();
    4e12:	bf20      	wfe
    4e14:	e7e5      	b.n	4de2 <_m16src_start+0x76>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4e16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    4e1a:	6026      	str	r6, [r4, #0]
    4e1c:	e7f4      	b.n	4e08 <_m16src_start+0x9c>
    4e1e:	bf00      	nop
    4e20:	20002177 	.word	0x20002177
    4e24:	20002176 	.word	0x20002176
    4e28:	e000e100 	.word	0xe000e100

00004e2c <_k32src_start>:

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    4e2c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    4e2e:	f04f 0220 	mov.w	r2, #32
    4e32:	f3ef 8311 	mrs	r3, BASEPRI
    4e36:	f382 8811 	msr	BASEPRI, r2
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    4e3a:	4d24      	ldr	r5, [pc, #144]	; (4ecc <_k32src_start+0xa0>)
    4e3c:	782a      	ldrb	r2, [r5, #0]
    4e3e:	b19a      	cbz	r2, 4e68 <_k32src_start+0x3c>
	__asm__ volatile(
    4e40:	f383 8811 	msr	BASEPRI, r3
    4e44:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    4e48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4e4c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    4e50:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    4e54:	f003 0303 	and.w	r3, r3, #3
    4e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    4e5c:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    4e5e:	bf14      	ite	ne
    4e60:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    4e64:	2000      	moveq	r0, #0
    4e66:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    4e68:	2401      	movs	r4, #1
    4e6a:	702c      	strb	r4, [r5, #0]
    4e6c:	f383 8811 	msr	BASEPRI, r3
    4e70:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    4e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e78:	4e15      	ldr	r6, [pc, #84]	; (4ed0 <_k32src_start+0xa4>)
    4e7a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    4e7e:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    4e80:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    4e84:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    4e88:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    4e8c:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    4e8e:	f04f 0618 	mov.w	r6, #24
    4e92:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    4e96:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    4e9a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    4e9e:	d1d3      	bne.n	4e48 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    4ea0:	2210      	movs	r2, #16
    4ea2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    4ea6:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    4eaa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    4eae:	03d2      	lsls	r2, r2, #15
    4eb0:	d402      	bmi.n	4eb8 <_k32src_start+0x8c>
    4eb2:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			goto lf_already_started;
    4eb6:	e7c7      	b.n	4e48 <_k32src_start+0x1c>
    4eb8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    4ebc:	f7ff ff56 	bl	4d6c <_m16src_start>
		if (!err) {
    4ec0:	2800      	cmp	r0, #0
    4ec2:	d1c1      	bne.n	4e48 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ec4:	4b03      	ldr	r3, [pc, #12]	; (4ed4 <_k32src_start+0xa8>)
    4ec6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    4eca:	e7bd      	b.n	4e48 <_k32src_start+0x1c>
    4ecc:	20002175 	.word	0x20002175
    4ed0:	40000008 	.word	0x40000008
    4ed4:	e000e100 	.word	0xe000e100

00004ed8 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    4ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    4eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    4ede:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    4ee0:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    4ee4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    4ee8:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100

	lf_intenset = ((NRF_CLOCK->INTENSET &
    4eec:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    4ef0:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    4ef4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    4ef8:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    4efc:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    4efe:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    4f02:	bf18      	it	ne
    4f04:	2401      	movne	r4, #1
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    4f06:	f1bc 0f00 	cmp.w	ip, #0
    4f0a:	d003      	beq.n	4f14 <nrf_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    4f0c:	f04f 0c00 	mov.w	ip, #0
    4f10:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	}

	if (hf) {
    4f14:	2f00      	cmp	r7, #0
    4f16:	d041      	beq.n	4f9c <nrf_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f1c:	2700      	movs	r7, #0
    4f1e:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    4f22:	b152      	cbz	r2, 4f3a <nrf_power_clock_isr+0x62>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    4f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    4f28:	4f22      	ldr	r7, [pc, #136]	; (4fb4 <nrf_power_clock_isr+0xdc>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    4f2a:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    4f2c:	f04f 0c02 	mov.w	ip, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    4f30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    4f34:	f8c7 c000 	str.w	ip, [r7]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    4f38:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    4f3a:	b9ee      	cbnz	r6, 4f78 <nrf_power_clock_isr+0xa0>
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    4f3c:	b159      	cbz	r1, 4f56 <nrf_power_clock_isr+0x7e>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    4f3e:	4b1d      	ldr	r3, [pc, #116]	; (4fb4 <nrf_power_clock_isr+0xdc>)
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
    4f40:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    4f44:	2100      	movs	r1, #0
    4f46:	6019      	str	r1, [r3, #0]

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    4f48:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    4f4a:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    4f4e:	f7ff fed5 	bl	4cfc <_m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    4f52:	2301      	movs	r3, #1
    4f54:	6173      	str	r3, [r6, #20]
	}

	if (ctto) {
    4f56:	b174      	cbz	r4, 4f76 <nrf_power_clock_isr+0x9e>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    4f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f5c:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    4f5e:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    4f60:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

		err = _m16src_start(dev, false);
    4f64:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    4f66:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    4f6a:	f7ff feff 	bl	4d6c <_m16src_start>
		if (!err) {
    4f6e:	b910      	cbnz	r0, 4f76 <nrf_power_clock_isr+0x9e>
    4f70:	4b11      	ldr	r3, [pc, #68]	; (4fb8 <nrf_power_clock_isr+0xe0>)
    4f72:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    4f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    4f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f7c:	2200      	movs	r2, #0
    4f7e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    4f82:	0782      	lsls	r2, r0, #30
    4f84:	d5da      	bpl.n	4f3c <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    4f86:	2202      	movs	r2, #2
    4f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    4f8c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4f90:	079b      	lsls	r3, r3, #30
    4f92:	d1d3      	bne.n	4f3c <nrf_power_clock_isr+0x64>
	if (done) {
    4f94:	2900      	cmp	r1, #0
    4f96:	d0df      	beq.n	4f58 <nrf_power_clock_isr+0x80>
				ctto = 1U;
    4f98:	2401      	movs	r4, #1
    4f9a:	e7d0      	b.n	4f3e <nrf_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    4f9c:	2a00      	cmp	r2, #0
    4f9e:	d0cc      	beq.n	4f3a <nrf_power_clock_isr+0x62>
    4fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4fa4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4fa8:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    4fac:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    4fb0:	d1c3      	bne.n	4f3a <nrf_power_clock_isr+0x62>
    4fb2:	e7b7      	b.n	4f24 <nrf_power_clock_isr+0x4c>
    4fb4:	40000c34 	.word	0x40000c34
    4fb8:	e000e100 	.word	0xe000e100

00004fbc <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    4fbc:	4b0f      	ldr	r3, [pc, #60]	; (4ffc <rtc1_nrf_isr+0x40>)
    4fbe:	2200      	movs	r2, #0
{
    4fc0:	b410      	push	{r4}
	RTC->EVENTS_COMPARE[0] = 0;
    4fc2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    4fc6:	f04f 0220 	mov.w	r2, #32
    4fca:	f3ef 8411 	mrs	r4, BASEPRI
    4fce:	f382 8811 	msr	BASEPRI, r2

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    4fd2:	4a0b      	ldr	r2, [pc, #44]	; (5000 <rtc1_nrf_isr+0x44>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    4fd4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    4fd8:	6811      	ldr	r1, [r2, #0]
    4fda:	f240 1347 	movw	r3, #327	; 0x147
	return (a - b) & COUNTER_MAX;
    4fde:	1a40      	subs	r0, r0, r1
    4fe0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    4fe4:	fbb0 f0f3 	udiv	r0, r0, r3

	last_count += dticks * CYC_PER_TICK;
    4fe8:	fb03 1300 	mla	r3, r3, r0, r1
    4fec:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4fee:	f384 8811 	msr	BASEPRI, r4
    4ff2:	f3bf 8f6f 	isb	sy
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    4ff6:	bc10      	pop	{r4}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    4ff8:	f017 bb8e 	b.w	1c718 <z_clock_announce>
    4ffc:	40011000 	.word	0x40011000
    5000:	200004c4 	.word	0x200004c4

00005004 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    5004:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5006:	481f      	ldr	r0, [pc, #124]	; (5084 <z_clock_driver_init+0x80>)
    5008:	f016 fb56 	bl	1b6b8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
    500c:	2800      	cmp	r0, #0
    500e:	d035      	beq.n	507c <z_clock_driver_init+0x78>
	return api->on(dev, sys);
    5010:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    5012:	4d1d      	ldr	r5, [pc, #116]	; (5088 <z_clock_driver_init+0x84>)
    5014:	681b      	ldr	r3, [r3, #0]
    5016:	2101      	movs	r1, #1
    5018:	4798      	blx	r3
    501a:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    501c:	f240 1347 	movw	r3, #327	; 0x147
    p_reg->PRESCALER = val;
    5020:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    5024:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    502c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
    5030:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5034:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5038:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    503c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5040:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    5042:	681b      	ldr	r3, [r3, #0]
    5044:	9301      	str	r3, [sp, #4]
    (void)dummy;
    5046:	9b01      	ldr	r3, [sp, #4]
    5048:	4b10      	ldr	r3, [pc, #64]	; (508c <z_clock_driver_init+0x88>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    504a:	2101      	movs	r1, #1
    504c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5050:	2011      	movs	r0, #17
    5052:	4622      	mov	r2, r4
    5054:	f000 fa7e 	bl	5554 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    5058:	2011      	movs	r0, #17
    505a:	f000 fa49 	bl	54f0 <z_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    505e:	4a0c      	ldr	r2, [pc, #48]	; (5090 <z_clock_driver_init+0x8c>)
    5060:	2301      	movs	r3, #1
    5062:	6013      	str	r3, [r2, #0]
    5064:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
    5066:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    506a:	f203 1347 	addw	r3, r3, #327	; 0x147
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    506e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5072:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    5076:	4620      	mov	r0, r4
}
    5078:	b003      	add	sp, #12
    507a:	bd30      	pop	{r4, r5, pc}
		return -1;
    507c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5080:	e7fa      	b.n	5078 <z_clock_driver_init+0x74>
    5082:	bf00      	nop
    5084:	000244ea 	.word	0x000244ea
    5088:	40011000 	.word	0x40011000
    508c:	e000e100 	.word	0xe000e100
    5090:	40011008 	.word	0x40011008

00005094 <z_clock_set_timeout>:
void z_clock_set_timeout(s32_t ticks, bool idle)
{
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    5094:	f64c 0269 	movw	r2, #51305	; 0xc869
{
    5098:	b570      	push	{r4, r5, r6, lr}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    509a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    509e:	bf08      	it	eq
    50a0:	4610      	moveq	r0, r2
	__asm__ volatile(
    50a2:	f04f 0320 	mov.w	r3, #32
    50a6:	f3ef 8411 	mrs	r4, BASEPRI
    50aa:	f383 8811 	msr	BASEPRI, r3

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    50ae:	4d14      	ldr	r5, [pc, #80]	; (5100 <z_clock_set_timeout+0x6c>)
     return p_reg->COUNTER;
    50b0:	4914      	ldr	r1, [pc, #80]	; (5104 <z_clock_set_timeout+0x70>)
    50b2:	682e      	ldr	r6, [r5, #0]
    50b4:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    50b8:	3801      	subs	r0, #1
    50ba:	4290      	cmp	r0, r2
    50bc:	bfa8      	it	ge
    50be:	4610      	movge	r0, r2
	return (a - b) & COUNTER_MAX;
    50c0:	1b9a      	subs	r2, r3, r6
    50c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    50c6:	f240 1547 	movw	r5, #327	; 0x147
    50ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += (CYC_PER_TICK - 1);
    50ce:	f502 72a3 	add.w	r2, r2, #326	; 0x146
    50d2:	fb05 2000 	mla	r0, r5, r0, r2
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    50d6:	fbb0 f0f5 	udiv	r0, r0, r5
	cyc += last_count;
    50da:	fb05 6000 	mla	r0, r5, r0, r6
	return (a - b) & COUNTER_MAX;
    50de:	1ac3      	subs	r3, r0, r3

	if (counter_sub(cyc, t) < MIN_DELAY) {
    50e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    50e4:	f023 031f 	bic.w	r3, r3, #31
    50e8:	b903      	cbnz	r3, 50ec <z_clock_set_timeout+0x58>
		cyc += CYC_PER_TICK;
    50ea:	4428      	add	r0, r5
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    50ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    50f0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
	__asm__ volatile(
    50f4:	f384 8811 	msr	BASEPRI, r4
    50f8:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
    50fc:	bd70      	pop	{r4, r5, r6, pc}
    50fe:	bf00      	nop
    5100:	200004c4 	.word	0x200004c4
    5104:	40011000 	.word	0x40011000

00005108 <z_clock_elapsed>:
	__asm__ volatile(
    5108:	f04f 0220 	mov.w	r2, #32
    510c:	f3ef 8311 	mrs	r3, BASEPRI
    5110:	f382 8811 	msr	BASEPRI, r2
     return p_reg->COUNTER;
    5114:	4a08      	ldr	r2, [pc, #32]	; (5138 <z_clock_elapsed+0x30>)
    5116:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    511a:	4a08      	ldr	r2, [pc, #32]	; (513c <z_clock_elapsed+0x34>)
	return (a - b) & COUNTER_MAX;
    511c:	6812      	ldr	r2, [r2, #0]
    511e:	1a80      	subs	r0, r0, r2
    5120:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    5124:	f240 1247 	movw	r2, #327	; 0x147
    5128:	fbb0 f0f2 	udiv	r0, r0, r2
	__asm__ volatile(
    512c:	f383 8811 	msr	BASEPRI, r3
    5130:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    5134:	4770      	bx	lr
    5136:	bf00      	nop
    5138:	40011000 	.word	0x40011000
    513c:	200004c4 	.word	0x200004c4

00005140 <z_timer_cycle_get_32>:
	__asm__ volatile(
    5140:	f04f 0320 	mov.w	r3, #32
    5144:	f3ef 8211 	mrs	r2, BASEPRI
    5148:	f383 8811 	msr	BASEPRI, r3

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    514c:	4906      	ldr	r1, [pc, #24]	; (5168 <z_timer_cycle_get_32+0x28>)
    514e:	4b07      	ldr	r3, [pc, #28]	; (516c <z_timer_cycle_get_32+0x2c>)
    5150:	6808      	ldr	r0, [r1, #0]
    5152:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    5156:	f382 8811 	msr	BASEPRI, r2
    515a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    515e:	1a1b      	subs	r3, r3, r0
    5160:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    5164:	4418      	add	r0, r3
    5166:	4770      	bx	lr
    5168:	200004c4 	.word	0x200004c4
    516c:	40011000 	.word	0x40011000

00005170 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    5170:	4804      	ldr	r0, [pc, #16]	; (5184 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    5172:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    5174:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    5176:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    5178:	d003      	beq.n	5182 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    517a:	4903      	ldr	r1, [pc, #12]	; (5188 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    517c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    5180:	600a      	str	r2, [r1, #0]

00005182 <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    5182:	4770      	bx	lr
    ldr r0, =_kernel
    5184:	20001c38 	.word	0x20001c38
    ldr r1, =_SCS_ICSR
    5188:	e000ed04 	.word	0xe000ed04

0000518c <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    518c:	4804      	ldr	r0, [pc, #16]	; (51a0 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    518e:	2300      	movs	r3, #0
    5190:	2120      	movs	r1, #32
    5192:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5194:	3301      	adds	r3, #1
    5196:	2b27      	cmp	r3, #39	; 0x27
    5198:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    519c:	d1f9      	bne.n	5192 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    519e:	4770      	bx	lr
    51a0:	e000e100 	.word	0xe000e100

000051a4 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    51a4:	4a09      	ldr	r2, [pc, #36]	; (51cc <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    51a6:	490a      	ldr	r1, [pc, #40]	; (51d0 <__swap+0x2c>)
	_current->arch.basepri = key;
    51a8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    51aa:	6809      	ldr	r1, [r1, #0]
    51ac:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    51ae:	4909      	ldr	r1, [pc, #36]	; (51d4 <__swap+0x30>)
	_current->arch.basepri = key;
    51b0:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    51b2:	684b      	ldr	r3, [r1, #4]
    51b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    51b8:	604b      	str	r3, [r1, #4]
    51ba:	2300      	movs	r3, #0
    51bc:	f383 8811 	msr	BASEPRI, r3
    51c0:	f3bf 8f6f 	isb	sy

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    51c4:	6893      	ldr	r3, [r2, #8]
}
    51c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
    51c8:	4770      	bx	lr
    51ca:	bf00      	nop
    51cc:	20001c38 	.word	0x20001c38
    51d0:	00023fc4 	.word	0x00023fc4
    51d4:	e000ed00 	.word	0xe000ed00

000051d8 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    51d8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    51da:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    51de:	4911      	ldr	r1, [pc, #68]	; (5224 <__pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    51e0:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    51e2:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    51e6:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    51e8:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    51ec:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    51f0:	4f0d      	ldr	r7, [pc, #52]	; (5228 <__pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    51f2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    51f6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    51f8:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    51fa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    51fc:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    51fe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5200:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5202:	f380 8811 	msr	BASEPRI, r0
    vldmia r0, {s16-s31}
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    5206:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    5208:	4806      	ldr	r0, [pc, #24]	; (5224 <__pendsv+0x4c>)
    ldr r0, [r0, #_kernel_offset_to_current]
    520a:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    520c:	f01a f919 	bl	1f442 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    5210:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5214:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    5218:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    521c:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    5220:	4770      	bx	lr
    5222:	0000      	.short	0x0000
    ldr r1, =_kernel
    5224:	20001c38 	.word	0x20001c38
    ldr v4, =_SCS_ICSR
    5228:	e000ed04 	.word	0xe000ed04

0000522c <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    522c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5230:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5232:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5236:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    523a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    523c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    5240:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    5244:	2902      	cmp	r1, #2
    beq _oops
    5246:	d0ff      	beq.n	5248 <_oops>

00005248 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    5248:	b501      	push	{r0, lr}
    bl _do_kernel_oops
    524a:	f01a f8eb 	bl	1f424 <_do_kernel_oops>
    pop {r0, pc}
    524e:	bd01      	pop	{r0, pc}

00005250 <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    5250:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5252:	4c1c      	ldr	r4, [pc, #112]	; (52c4 <_MpuFault.isra.2+0x74>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    5254:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    5256:	481c      	ldr	r0, [pc, #112]	; (52c8 <_MpuFault.isra.2+0x78>)
    5258:	f017 ffac 	bl	1d1b4 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    525c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    525e:	06d1      	lsls	r1, r2, #27
    5260:	d502      	bpl.n	5268 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5262:	481a      	ldr	r0, [pc, #104]	; (52cc <_MpuFault.isra.2+0x7c>)
    5264:	f017 ffa6 	bl	1d1b4 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    526a:	071a      	lsls	r2, r3, #28
    526c:	d502      	bpl.n	5274 <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    526e:	4818      	ldr	r0, [pc, #96]	; (52d0 <_MpuFault.isra.2+0x80>)
    5270:	f017 ffa0 	bl	1d1b4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5274:	4c13      	ldr	r4, [pc, #76]	; (52c4 <_MpuFault.isra.2+0x74>)
    5276:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5278:	079b      	lsls	r3, r3, #30
    527a:	d50e      	bpl.n	529a <_MpuFault.isra.2+0x4a>
		PR_FAULT_INFO("  Data Access Violation\n");
    527c:	4815      	ldr	r0, [pc, #84]	; (52d4 <_MpuFault.isra.2+0x84>)
    527e:	f017 ff99 	bl	1d1b4 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    5282:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5286:	0618      	lsls	r0, r3, #24
    5288:	d507      	bpl.n	529a <_MpuFault.isra.2+0x4a>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    528a:	4813      	ldr	r0, [pc, #76]	; (52d8 <_MpuFault.isra.2+0x88>)
    528c:	f017 ff92 	bl	1d1b4 <printk>
			if (fromHardFault) {
    5290:	b11d      	cbz	r5, 529a <_MpuFault.isra.2+0x4a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5298:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    529a:	4c0a      	ldr	r4, [pc, #40]	; (52c4 <_MpuFault.isra.2+0x74>)
    529c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    529e:	07d2      	lsls	r2, r2, #31
    52a0:	d502      	bpl.n	52a8 <_MpuFault.isra.2+0x58>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    52a2:	480e      	ldr	r0, [pc, #56]	; (52dc <_MpuFault.isra.2+0x8c>)
    52a4:	f017 ff86 	bl	1d1b4 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    52a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    52aa:	069b      	lsls	r3, r3, #26
    52ac:	d502      	bpl.n	52b4 <_MpuFault.isra.2+0x64>
		PR_FAULT_INFO(
    52ae:	480c      	ldr	r0, [pc, #48]	; (52e0 <_MpuFault.isra.2+0x90>)
    52b0:	f017 ff80 	bl	1d1b4 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    52b4:	4b03      	ldr	r3, [pc, #12]	; (52c4 <_MpuFault.isra.2+0x74>)
    52b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    52b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    52ba:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    52be:	629a      	str	r2, [r3, #40]	; 0x28
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    52c0:	2000      	movs	r0, #0
    52c2:	bd38      	pop	{r3, r4, r5, pc}
    52c4:	e000ed00 	.word	0xe000ed00
    52c8:	00024669 	.word	0x00024669
    52cc:	00024680 	.word	0x00024680
    52d0:	000246b4 	.word	0x000246b4
    52d4:	000246c8 	.word	0x000246c8
    52d8:	000246e1 	.word	0x000246e1
    52dc:	000246f8 	.word	0x000246f8
    52e0:	00024718 	.word	0x00024718

000052e4 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    52e4:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    52e6:	4c1e      	ldr	r4, [pc, #120]	; (5360 <_BusFault.isra.3+0x7c>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    52e8:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    52ea:	481e      	ldr	r0, [pc, #120]	; (5364 <_BusFault.isra.3+0x80>)
    52ec:	f017 ff62 	bl	1d1b4 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    52f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    52f2:	04d1      	lsls	r1, r2, #19
    52f4:	d502      	bpl.n	52fc <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    52f6:	481c      	ldr	r0, [pc, #112]	; (5368 <_BusFault.isra.3+0x84>)
    52f8:	f017 ff5c 	bl	1d1b4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    52fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    52fe:	051a      	lsls	r2, r3, #20
    5300:	d502      	bpl.n	5308 <_BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    5302:	481a      	ldr	r0, [pc, #104]	; (536c <_BusFault.isra.3+0x88>)
    5304:	f017 ff56 	bl	1d1b4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5308:	4c15      	ldr	r4, [pc, #84]	; (5360 <_BusFault.isra.3+0x7c>)
    530a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    530c:	059b      	lsls	r3, r3, #22
    530e:	d50e      	bpl.n	532e <_BusFault.isra.3+0x4a>
		PR_FAULT_INFO("  Precise data bus error\n");
    5310:	4817      	ldr	r0, [pc, #92]	; (5370 <_BusFault.isra.3+0x8c>)
    5312:	f017 ff4f 	bl	1d1b4 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    5316:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5318:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    531a:	0418      	lsls	r0, r3, #16
    531c:	d507      	bpl.n	532e <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    531e:	4815      	ldr	r0, [pc, #84]	; (5374 <_BusFault.isra.3+0x90>)
    5320:	f017 ff48 	bl	1d1b4 <printk>
			if (fromHardFault) {
    5324:	b11d      	cbz	r5, 532e <_BusFault.isra.3+0x4a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5326:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5328:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    532c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    532e:	4c0c      	ldr	r4, [pc, #48]	; (5360 <_BusFault.isra.3+0x7c>)
    5330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5332:	0559      	lsls	r1, r3, #21
    5334:	d502      	bpl.n	533c <_BusFault.isra.3+0x58>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    5336:	4810      	ldr	r0, [pc, #64]	; (5378 <_BusFault.isra.3+0x94>)
    5338:	f017 ff3c 	bl	1d1b4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    533c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    533e:	05da      	lsls	r2, r3, #23
    5340:	d509      	bpl.n	5356 <_BusFault.isra.3+0x72>
		PR_FAULT_INFO("  Instruction bus error\n");
    5342:	480e      	ldr	r0, [pc, #56]	; (537c <_BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    5344:	f017 ff36 	bl	1d1b4 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5348:	4a05      	ldr	r2, [pc, #20]	; (5360 <_BusFault.isra.3+0x7c>)
    534a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    534c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5350:	6293      	str	r3, [r2, #40]	; 0x28
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    5352:	2000      	movs	r0, #0
    5354:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5356:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5358:	049b      	lsls	r3, r3, #18
    535a:	d5f5      	bpl.n	5348 <_BusFault.isra.3+0x64>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    535c:	4808      	ldr	r0, [pc, #32]	; (5380 <_BusFault.isra.3+0x9c>)
    535e:	e7f1      	b.n	5344 <_BusFault.isra.3+0x60>
    5360:	e000ed00 	.word	0xe000ed00
    5364:	00024508 	.word	0x00024508
    5368:	0002451f 	.word	0x0002451f
    536c:	000246b4 	.word	0x000246b4
    5370:	00024531 	.word	0x00024531
    5374:	0002454b 	.word	0x0002454b
    5378:	00024561 	.word	0x00024561
    537c:	0002457d 	.word	0x0002457d
    5380:	00024718 	.word	0x00024718

00005384 <_UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    5384:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5386:	4c19      	ldr	r4, [pc, #100]	; (53ec <_UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    5388:	4819      	ldr	r0, [pc, #100]	; (53f0 <_UsageFault.isra.4+0x6c>)
    538a:	f017 ff13 	bl	1d1b4 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    538e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5390:	0193      	lsls	r3, r2, #6
    5392:	d502      	bpl.n	539a <_UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    5394:	4817      	ldr	r0, [pc, #92]	; (53f4 <_UsageFault.isra.4+0x70>)
    5396:	f017 ff0d 	bl	1d1b4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    539a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    539c:	01dc      	lsls	r4, r3, #7
    539e:	d502      	bpl.n	53a6 <_UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    53a0:	4815      	ldr	r0, [pc, #84]	; (53f8 <_UsageFault.isra.4+0x74>)
    53a2:	f017 ff07 	bl	1d1b4 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    53a6:	4c11      	ldr	r4, [pc, #68]	; (53ec <_UsageFault.isra.4+0x68>)
    53a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    53aa:	0310      	lsls	r0, r2, #12
    53ac:	d502      	bpl.n	53b4 <_UsageFault.isra.4+0x30>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    53ae:	4813      	ldr	r0, [pc, #76]	; (53fc <_UsageFault.isra.4+0x78>)
    53b0:	f017 ff00 	bl	1d1b4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    53b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    53b6:	0359      	lsls	r1, r3, #13
    53b8:	d502      	bpl.n	53c0 <_UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    53ba:	4811      	ldr	r0, [pc, #68]	; (5400 <_UsageFault.isra.4+0x7c>)
    53bc:	f017 fefa 	bl	1d1b4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    53c0:	4c0a      	ldr	r4, [pc, #40]	; (53ec <_UsageFault.isra.4+0x68>)
    53c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    53c4:	0392      	lsls	r2, r2, #14
    53c6:	d502      	bpl.n	53ce <_UsageFault.isra.4+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    53c8:	480e      	ldr	r0, [pc, #56]	; (5404 <_UsageFault.isra.4+0x80>)
    53ca:	f017 fef3 	bl	1d1b4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    53ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    53d0:	03db      	lsls	r3, r3, #15
    53d2:	d502      	bpl.n	53da <_UsageFault.isra.4+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    53d4:	480c      	ldr	r0, [pc, #48]	; (5408 <_UsageFault.isra.4+0x84>)
    53d6:	f017 feed 	bl	1d1b4 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    53da:	4a04      	ldr	r2, [pc, #16]	; (53ec <_UsageFault.isra.4+0x68>)
    53dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    53de:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    53e2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    53e6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    53e8:	2000      	movs	r0, #0
    53ea:	bd10      	pop	{r4, pc}
    53ec:	e000ed00 	.word	0xe000ed00
    53f0:	00024748 	.word	0x00024748
    53f4:	00024761 	.word	0x00024761
    53f8:	00024775 	.word	0x00024775
    53fc:	00024790 	.word	0x00024790
    5400:	000247af 	.word	0x000247af
    5404:	000247d5 	.word	0x000247d5
    5408:	000247f0 	.word	0x000247f0

0000540c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    540e:	4d29      	ldr	r5, [pc, #164]	; (54b4 <_Fault+0xa8>)
    5410:	686e      	ldr	r6, [r5, #4]
    5412:	f3c6 0408 	ubfx	r4, r6, #0, #9
{
    5416:	4607      	mov	r7, r0

	LOG_PANIC();
    5418:	f7fe fcc6 	bl	3da8 <log_panic>
	switch (fault) {
    541c:	1ee3      	subs	r3, r4, #3
    541e:	2b09      	cmp	r3, #9
    5420:	d83b      	bhi.n	549a <_Fault+0x8e>
    5422:	e8df f003 	tbb	[pc, r3]
    5426:	3405      	.short	0x3405
    5428:	3a3a2936 	.word	0x3a3a2936
    542c:	383a3a3a 	.word	0x383a3a3a
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    5430:	4821      	ldr	r0, [pc, #132]	; (54b8 <_Fault+0xac>)
    5432:	f017 febf 	bl	1d1b4 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5436:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    5438:	f014 0402 	ands.w	r4, r4, #2
    543c:	d004      	beq.n	5448 <_Fault+0x3c>
		PR_EXC("  Bus fault on vector table read\n");
    543e:	481f      	ldr	r0, [pc, #124]	; (54bc <_Fault+0xb0>)
	PR_FAULT_INFO(
    5440:	f017 feb8 	bl	1d1b4 <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    5444:	2400      	movs	r4, #0
    5446:	e01c      	b.n	5482 <_Fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5448:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    544a:	005b      	lsls	r3, r3, #1
    544c:	d519      	bpl.n	5482 <_Fault+0x76>
		PR_EXC("  Fault escalation (see below)\n");
    544e:	481c      	ldr	r0, [pc, #112]	; (54c0 <_Fault+0xb4>)
    5450:	f017 feb0 	bl	1d1b4 <printk>
		if (SCB_MMFSR != 0) {
    5454:	4b1b      	ldr	r3, [pc, #108]	; (54c4 <_Fault+0xb8>)
    5456:	781b      	ldrb	r3, [r3, #0]
    5458:	b11b      	cbz	r3, 5462 <_Fault+0x56>
			reason = _MpuFault(esf, 1);
    545a:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    545c:	f7ff fef8 	bl	5250 <_MpuFault.isra.2>
    5460:	e00c      	b.n	547c <_Fault+0x70>
		} else if (SCB_BFSR != 0) {
    5462:	4b19      	ldr	r3, [pc, #100]	; (54c8 <_Fault+0xbc>)
    5464:	781b      	ldrb	r3, [r3, #0]
    5466:	b11b      	cbz	r3, 5470 <_Fault+0x64>
			reason = _BusFault(esf, 1);
    5468:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    546a:	f7ff ff3b 	bl	52e4 <_BusFault.isra.3>
    546e:	e005      	b.n	547c <_Fault+0x70>
		} else if (SCB_UFSR != 0) {
    5470:	4b16      	ldr	r3, [pc, #88]	; (54cc <_Fault+0xc0>)
    5472:	881b      	ldrh	r3, [r3, #0]
    5474:	b29b      	uxth	r3, r3
    5476:	b123      	cbz	r3, 5482 <_Fault+0x76>
			reason = _UsageFault(esf);
    5478:	f7ff ff84 	bl	5384 <_UsageFault.isra.4>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = _FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
    547c:	2806      	cmp	r0, #6
			reason = _UsageFault(esf);
    547e:	4604      	mov	r4, r0
	if (reason == _NANO_ERR_RECOVERABLE) {
    5480:	d017      	beq.n	54b2 <_Fault+0xa6>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    5482:	4639      	mov	r1, r7
    5484:	4620      	mov	r0, r4
}
    5486:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_NanoFatalErrorHandler(reason, esf);
    548a:	f000 b8d3 	b.w	5634 <z_NanoFatalErrorHandler>
		reason = _MpuFault(esf, 0);
    548e:	2000      	movs	r0, #0
    5490:	e7e4      	b.n	545c <_Fault+0x50>
		reason = _BusFault(esf, 0);
    5492:	2000      	movs	r0, #0
    5494:	e7e9      	b.n	546a <_Fault+0x5e>
	PR_FAULT_INFO(
    5496:	480e      	ldr	r0, [pc, #56]	; (54d0 <_Fault+0xc4>)
    5498:	e7d2      	b.n	5440 <_Fault+0x34>
	PR_FAULT_INFO("***** %s %d) *****\n",
    549a:	4b0e      	ldr	r3, [pc, #56]	; (54d4 <_Fault+0xc8>)
    549c:	490e      	ldr	r1, [pc, #56]	; (54d8 <_Fault+0xcc>)
    549e:	480f      	ldr	r0, [pc, #60]	; (54dc <_Fault+0xd0>)
    54a0:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    54a4:	f1a4 0210 	sub.w	r2, r4, #16
    54a8:	bf18      	it	ne
    54aa:	4619      	movne	r1, r3
    54ac:	f017 fe82 	bl	1d1b4 <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
    54b0:	e7c8      	b.n	5444 <_Fault+0x38>
}
    54b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54b4:	e000ed00 	.word	0xe000ed00
    54b8:	000245c4 	.word	0x000245c4
    54bc:	000245dc 	.word	0x000245dc
    54c0:	000245fe 	.word	0x000245fe
    54c4:	e000ed28 	.word	0xe000ed28
    54c8:	e000ed29 	.word	0xe000ed29
    54cc:	e000ed2a 	.word	0xe000ed2a
    54d0:	0002461e 	.word	0x0002461e
    54d4:	000245ab 	.word	0x000245ab
    54d8:	00024596 	.word	0x00024596
    54dc:	00024655 	.word	0x00024655

000054e0 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    54e0:	4a02      	ldr	r2, [pc, #8]	; (54ec <_FaultInit+0xc>)
    54e2:	6953      	ldr	r3, [r2, #20]
    54e4:	f043 0310 	orr.w	r3, r3, #16
    54e8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    54ea:	4770      	bx	lr
    54ec:	e000ed00 	.word	0xe000ed00

000054f0 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    54f0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    54f2:	2b00      	cmp	r3, #0
    54f4:	db08      	blt.n	5508 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    54f6:	2201      	movs	r2, #1
    54f8:	f000 001f 	and.w	r0, r0, #31
    54fc:	fa02 f000 	lsl.w	r0, r2, r0
    5500:	095b      	lsrs	r3, r3, #5
    5502:	4a02      	ldr	r2, [pc, #8]	; (550c <z_arch_irq_enable+0x1c>)
    5504:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5508:	4770      	bx	lr
    550a:	bf00      	nop
    550c:	e000e100 	.word	0xe000e100

00005510 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5510:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5512:	2b00      	cmp	r3, #0
    5514:	db0d      	blt.n	5532 <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5516:	2201      	movs	r2, #1
    5518:	095b      	lsrs	r3, r3, #5
    551a:	f000 001f 	and.w	r0, r0, #31
    551e:	fa02 f000 	lsl.w	r0, r2, r0
    5522:	3320      	adds	r3, #32
    5524:	4a03      	ldr	r2, [pc, #12]	; (5534 <z_arch_irq_disable+0x24>)
    5526:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    552a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    552e:	f3bf 8f6f 	isb	sy
}
    5532:	4770      	bx	lr
    5534:	e000e100 	.word	0xe000e100

00005538 <z_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int z_arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    5538:	0942      	lsrs	r2, r0, #5
    553a:	4b05      	ldr	r3, [pc, #20]	; (5550 <z_arch_irq_is_enabled+0x18>)
    553c:	f000 001f 	and.w	r0, r0, #31
    5540:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5544:	2301      	movs	r3, #1
    5546:	fa03 f000 	lsl.w	r0, r3, r0
}
    554a:	4010      	ands	r0, r2
    554c:	4770      	bx	lr
    554e:	bf00      	nop
    5550:	e000e100 	.word	0xe000e100

00005554 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5554:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5556:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5558:	bfa8      	it	ge
    555a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    555e:	f101 0101 	add.w	r1, r1, #1
    5562:	ea4f 1141 	mov.w	r1, r1, lsl #5
    5566:	bfae      	itee	ge
    5568:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    556c:	f000 000f 	andlt.w	r0, r0, #15
    5570:	4b03      	ldrlt	r3, [pc, #12]	; (5580 <z_irq_priority_set+0x2c>)
    5572:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5574:	bfac      	ite	ge
    5576:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    557a:	5419      	strblt	r1, [r3, r0]
}
    557c:	4770      	bx	lr
    557e:	bf00      	nop
    5580:	e000ed14 	.word	0xe000ed14

00005584 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    5584:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    5586:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    5588:	4b04      	ldr	r3, [pc, #16]	; (559c <_arch_isr_direct_pm+0x18>)
    558a:	6a18      	ldr	r0, [r3, #32]
    558c:	b118      	cbz	r0, 5596 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    558e:	2200      	movs	r2, #0
    5590:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    5592:	f01d fa4f 	bl	22a34 <z_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    5596:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    5598:	bd08      	pop	{r3, pc}
    559a:	bf00      	nop
    559c:	20001c38 	.word	0x20001c38

000055a0 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    55a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackEnd = pStackMem + stackSize - MPU_GUARD_ALIGN_AND_SIZE;
#else
	stackEnd = pStackMem + stackSize;
    55a4:	188c      	adds	r4, r1, r2
{
    55a6:	4688      	mov	r8, r1
    55a8:	4617      	mov	r7, r2
    55aa:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    55ac:	2204      	movs	r2, #4
    55ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    55b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    55b2:	4605      	mov	r5, r0
    55b4:	f01d fc82 	bl	22ebc <z_init_thread_base>

	_new_thread_init(thread, pStackMem, stackSize, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    55b8:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    55bc:	490c      	ldr	r1, [pc, #48]	; (55f0 <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    55be:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    55c2:	2200      	movs	r2, #0
	pInitCtx->pc &= 0xfffffffe;
    55c4:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    55c8:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    55cc:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    55d0:	6199      	str	r1, [r3, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    55d2:	9906      	ldr	r1, [sp, #24]
    55d4:	6059      	str	r1, [r3, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    55d6:	9907      	ldr	r1, [sp, #28]
    55d8:	6099      	str	r1, [r3, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    55da:	9908      	ldr	r1, [sp, #32]
    55dc:	60d9      	str	r1, [r3, #12]
	pInitCtx->xpsr =
    55de:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    55e2:	601e      	str	r6, [r3, #0]
	pInitCtx->xpsr =
    55e4:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    55e6:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    55e8:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    55ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55ee:	bf00      	nop
    55f0:	0001ce7b 	.word	0x0001ce7b

000055f4 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    55f4:	4901      	ldr	r1, [pc, #4]	; (55fc <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    55f6:	2210      	movs	r2, #16
	str r2, [r1]
    55f8:	600a      	str	r2, [r1, #0]
	bx lr
    55fa:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    55fc:	e000ed10 	.word	0xe000ed10

00005600 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    5600:	4040      	eors	r0, r0
	msr BASEPRI, r0
    5602:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    5606:	bf30      	wfi

	bx lr
    5608:	4770      	bx	lr
    560a:	bf00      	nop

0000560c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    560c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    560e:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    5612:	f8df c01c 	ldr.w	ip, [pc, #28]	; 5630 <__bus_fault+0x24>
	ldr ip, [ip]
    5616:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    561a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    561e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    5620:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    5624:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    5628:	b501      	push	{r0, lr}
	bl _Fault
    562a:	f7ff feef 	bl	540c <_Fault>

	pop {r0, pc}
    562e:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    5630:	e000ed04 	.word	0xe000ed04

00005634 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    5634:	b538      	push	{r3, r4, r5, lr}
    5636:	4604      	mov	r4, r0
    5638:	460d      	mov	r5, r1
	LOG_PANIC();
    563a:	f7fe fbb5 	bl	3da8 <log_panic>

	switch (reason) {
    563e:	2c05      	cmp	r4, #5
    5640:	d81a      	bhi.n	5678 <z_NanoFatalErrorHandler+0x44>
    5642:	e8df f004 	tbb	[pc, r4]
    5646:	1903      	.short	0x1903
    5648:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    564c:	480d      	ldr	r0, [pc, #52]	; (5684 <z_NanoFatalErrorHandler+0x50>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    564e:	f017 fdb1 	bl	1d1b4 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    5652:	f016 fe03 	bl	1c25c <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    5656:	69aa      	ldr	r2, [r5, #24]
    5658:	4601      	mov	r1, r0
    565a:	480b      	ldr	r0, [pc, #44]	; (5688 <z_NanoFatalErrorHandler+0x54>)
    565c:	f017 fdaa 	bl	1d1b4 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    5660:	4629      	mov	r1, r5
    5662:	4620      	mov	r0, r4
}
    5664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
    5668:	f000 b818 	b.w	569c <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    566c:	4807      	ldr	r0, [pc, #28]	; (568c <z_NanoFatalErrorHandler+0x58>)
    566e:	e7ee      	b.n	564e <z_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel OOPS! *****\n");
    5670:	4807      	ldr	r0, [pc, #28]	; (5690 <z_NanoFatalErrorHandler+0x5c>)
    5672:	e7ec      	b.n	564e <z_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel Panic! *****\n");
    5674:	4807      	ldr	r0, [pc, #28]	; (5694 <z_NanoFatalErrorHandler+0x60>)
    5676:	e7ea      	b.n	564e <z_NanoFatalErrorHandler+0x1a>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    5678:	4621      	mov	r1, r4
    567a:	4807      	ldr	r0, [pc, #28]	; (5698 <z_NanoFatalErrorHandler+0x64>)
    567c:	f017 fd9a 	bl	1d1b4 <printk>
		break;
    5680:	e7e7      	b.n	5652 <z_NanoFatalErrorHandler+0x1e>
    5682:	bf00      	nop
    5684:	0002481c 	.word	0x0002481c
    5688:	000248ba 	.word	0x000248ba
    568c:	0002483c 	.word	0x0002483c
    5690:	00024862 	.word	0x00024862
    5694:	0002487c 	.word	0x0002487c
    5698:	00024897 	.word	0x00024897

0000569c <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    569c:	2805      	cmp	r0, #5
{
    569e:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    56a0:	d00c      	beq.n	56bc <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    56a2:	f016 fe45 	bl	1c330 <k_is_in_isr>
    56a6:	b160      	cbz	r0, 56c2 <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    56a8:	f016 fe42 	bl	1c330 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    56ac:	490c      	ldr	r1, [pc, #48]	; (56e0 <z_SysFatalErrorHandler+0x44>)
    56ae:	4b0d      	ldr	r3, [pc, #52]	; (56e4 <z_SysFatalErrorHandler+0x48>)
    56b0:	2800      	cmp	r0, #0
    56b2:	bf08      	it	eq
    56b4:	4619      	moveq	r1, r3
    56b6:	480c      	ldr	r0, [pc, #48]	; (56e8 <z_SysFatalErrorHandler+0x4c>)
    56b8:	f017 fd7c 	bl	1d1b4 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    56bc:	f7ff ffa0 	bl	5600 <k_cpu_idle>
    56c0:	e7fc      	b.n	56bc <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
    56c2:	f016 fe45 	bl	1c350 <z_is_thread_essential>
    56c6:	2800      	cmp	r0, #0
    56c8:	d1ee      	bne.n	56a8 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    56ca:	4c08      	ldr	r4, [pc, #32]	; (56ec <z_SysFatalErrorHandler+0x50>)
    56cc:	4808      	ldr	r0, [pc, #32]	; (56f0 <z_SysFatalErrorHandler+0x54>)
    56ce:	68a1      	ldr	r1, [r4, #8]
    56d0:	f017 fd70 	bl	1d1b4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    56d4:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    56d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56da:	f000 b80b 	b.w	56f4 <z_impl_k_thread_abort>
    56de:	bf00      	nop
    56e0:	000248f6 	.word	0x000248f6
    56e4:	000248fa 	.word	0x000248fa
    56e8:	0002490b 	.word	0x0002490b
    56ec:	20001c38 	.word	0x20001c38
    56f0:	0002492b 	.word	0x0002492b

000056f4 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    56f4:	b538      	push	{r3, r4, r5, lr}
    56f6:	4605      	mov	r5, r0
	__asm__ volatile(
    56f8:	f04f 0320 	mov.w	r3, #32
    56fc:	f3ef 8411 	mrs	r4, BASEPRI
    5700:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    5704:	f01d fbbb 	bl	22e7e <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    5708:	4b0a      	ldr	r3, [pc, #40]	; (5734 <z_impl_k_thread_abort+0x40>)
    570a:	689b      	ldr	r3, [r3, #8]
    570c:	42ab      	cmp	r3, r5
    570e:	d10b      	bne.n	5728 <z_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    5710:	4b09      	ldr	r3, [pc, #36]	; (5738 <z_impl_k_thread_abort+0x44>)
    5712:	685a      	ldr	r2, [r3, #4]
    5714:	f3c2 0208 	ubfx	r2, r2, #0, #9
    5718:	b912      	cbnz	r2, 5720 <z_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    571a:	4620      	mov	r0, r4
    571c:	f7ff fd42 	bl	51a4 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5720:	685a      	ldr	r2, [r3, #4]
    5722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5726:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    5728:	4620      	mov	r0, r4
}
    572a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    572e:	f01d bae9 	b.w	22d04 <z_reschedule_irqlock>
    5732:	bf00      	nop
    5734:	20001c38 	.word	0x20001c38
    5738:	e000ed00 	.word	0xe000ed00

0000573c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    573c:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    573e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5740:	4a0b      	ldr	r2, [pc, #44]	; (5770 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5742:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    5744:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5746:	bf1e      	ittt	ne
	movne	r1, #0
    5748:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    574a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    574c:	f01d f972 	blne	22a34 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5750:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    5752:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5756:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    575a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    575e:	4905      	ldr	r1, [pc, #20]	; (5774 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5760:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5762:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    5764:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5766:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    576a:	4803      	ldr	r0, [pc, #12]	; (5778 <_isr_wrapper+0x3c>)
	bx r0
    576c:	4700      	bx	r0
    576e:	0000      	.short	0x0000
	ldr r2, =_kernel
    5770:	20001c38 	.word	0x20001c38
	ldr r1, =_sw_isr_table
    5774:	000231b8 	.word	0x000231b8
	ldr r0, =_IntExit
    5778:	00005171 	.word	0x00005171

0000577c <__reset>:
#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl _PlatformInit
#endif

    /* lock interrupts: will get unlocked when switch to main task */
    bl	lock_interrupts
    577c:	f019 fe56 	bl	1f42c <lock_interrupts>
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    5780:	f000 f804 	bl	578c <_PrepC>

00005784 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    5784:	bf30      	wfi
    b _SysNmiOnReset
    5786:	f7ff bffd 	b.w	5784 <_SysNmiOnReset>
    578a:	bf00      	nop

0000578c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    578c:	b508      	push	{r3, lr}
	process_sp = (u32_t)&_interrupt_stack + CONFIG_ISR_STACK_SIZE;
    578e:	4b0e      	ldr	r3, [pc, #56]	; (57c8 <_PrepC+0x3c>)
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    5790:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5794:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() | CONTROL_SPSEL_Msk);
    5798:	f043 0302 	orr.w	r3, r3, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    579c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    57a0:	f3bf 8f6f 	isb	sy
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    57a4:	4b09      	ldr	r3, [pc, #36]	; (57cc <_PrepC+0x40>)
    57a6:	4a0a      	ldr	r2, [pc, #40]	; (57d0 <_PrepC+0x44>)
    57a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    57ac:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    57ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    57b2:	f3bf 8f6f 	isb	sy
	 * gets set to _interrupt_stack during initialization.
	 */
	set_and_switch_to_psp();
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    57b6:	f015 ffc3 	bl	1b740 <z_bss_zero>
	z_data_copy();
    57ba:	f015 ffcb 	bl	1b754 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	_IntLibInit();
    57be:	f7ff fce5 	bl	518c <_IntLibInit>
	z_cstart();
    57c2:	f015 fff9 	bl	1b7b8 <z_cstart>
    57c6:	bf00      	nop
    57c8:	20004d18 	.word	0x20004d18
    57cc:	00000000 	.word	0x00000000
    57d0:	e000ed00 	.word	0xe000ed00

000057d4 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    57d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    57d6:	4b08      	ldr	r3, [pc, #32]	; (57f8 <z_arch_configure_static_mpu_regions+0x24>)
    57d8:	9301      	str	r3, [sp, #4]
    57da:	4b08      	ldr	r3, [pc, #32]	; (57fc <z_arch_configure_static_mpu_regions+0x28>)
    57dc:	9302      	str	r3, [sp, #8]
    57de:	4b08      	ldr	r3, [pc, #32]	; (5800 <z_arch_configure_static_mpu_regions+0x2c>)
    57e0:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    57e2:	ab01      	add	r3, sp, #4
    57e4:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    57e6:	4a07      	ldr	r2, [pc, #28]	; (5804 <z_arch_configure_static_mpu_regions+0x30>)
    57e8:	4b07      	ldr	r3, [pc, #28]	; (5808 <z_arch_configure_static_mpu_regions+0x34>)
    57ea:	2101      	movs	r1, #1
    57ec:	4668      	mov	r0, sp
    57ee:	f000 f8b5 	bl	595c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    57f2:	b005      	add	sp, #20
    57f4:	f85d fb04 	ldr.w	pc, [sp], #4
    57f8:	20000000 	.word	0x20000000
    57fc:	00000000 	.word	0x00000000
    5800:	060b0000 	.word	0x060b0000
    5804:	20000000 	.word	0x20000000
    5808:	20010000 	.word	0x20010000

0000580c <_mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int _mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MPU->RNR = index;
    580e:	4f2e      	ldr	r7, [pc, #184]	; (58c8 <_mpu_configure_regions+0xbc>)
{
    5810:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    5812:	2100      	movs	r1, #0
    5814:	42b1      	cmp	r1, r6
    5816:	da22      	bge.n	585e <_mpu_configure_regions+0x52>
		if (regions[i]->size == 0) {
    5818:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    581c:	f8dc 4004 	ldr.w	r4, [ip, #4]
    5820:	2c00      	cmp	r4, #0
    5822:	d04f      	beq.n	58c4 <_mpu_configure_regions+0xb8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    5824:	b1eb      	cbz	r3, 5862 <_mpu_configure_regions+0x56>
		((part->size & (part->size - 1)) == 0)
    5826:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
    582a:	ea14 0f0e 	tst.w	r4, lr
    582e:	d106      	bne.n	583e <_mpu_configure_regions+0x32>
		&&
    5830:	2c1f      	cmp	r4, #31
    5832:	d904      	bls.n	583e <_mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0);
    5834:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    5838:	ea1e 0f05 	tst.w	lr, r5
    583c:	d011      	beq.n	5862 <_mpu_configure_regions+0x56>
				(!_mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    583e:	2301      	movs	r3, #1
    5840:	f04f 0200 	mov.w	r2, #0
    5844:	f363 0207 	bfi	r2, r3, #0, #8
    5848:	4820      	ldr	r0, [pc, #128]	; (58cc <_mpu_configure_regions+0xc0>)
    584a:	4b21      	ldr	r3, [pc, #132]	; (58d0 <_mpu_configure_regions+0xc4>)
    584c:	1a1b      	subs	r3, r3, r0
    584e:	08db      	lsrs	r3, r3, #3
    5850:	4820      	ldr	r0, [pc, #128]	; (58d4 <_mpu_configure_regions+0xc8>)
    5852:	f363 128f 	bfi	r2, r3, #6, #10
{
	/* Attempt to allocate new region index. */
	if (index > (_get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5856:	f018 fe01 	bl	1e45c <log_1>
			return -EINVAL;
		}

		reg_index = _mpu_configure_region(reg_index, regions[i]);
    585a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    585e:	4610      	mov	r0, r2
    5860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (size <= 32) {
    5862:	2c20      	cmp	r4, #32
		reg_index = _mpu_configure_region(reg_index, regions[i]);
    5864:	b2d5      	uxtb	r5, r2
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    5866:	f8dc 2000 	ldr.w	r2, [ip]
	_get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    586a:	f8dc c008 	ldr.w	ip, [ip, #8]
	if (size <= 32) {
    586e:	d91a      	bls.n	58a6 <_mpu_configure_regions+0x9a>
	if (size > (1UL << 31)) {
    5870:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5874:	d819      	bhi.n	58aa <_mpu_configure_regions+0x9e>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5876:	3c01      	subs	r4, #1
    5878:	fab4 f484 	clz	r4, r4
    587c:	f1c4 041f 	rsb	r4, r4, #31
    5880:	0064      	lsls	r4, r4, #1
	if (index > (_get_num_regions() - 1)) {
    5882:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | _size_to_mpu_rasr_size(size);
    5884:	ea4c 0404 	orr.w	r4, ip, r4
    5888:	d911      	bls.n	58ae <_mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    588a:	2301      	movs	r3, #1
    588c:	f04f 0200 	mov.w	r2, #0
    5890:	f363 0207 	bfi	r2, r3, #0, #8
    5894:	490d      	ldr	r1, [pc, #52]	; (58cc <_mpu_configure_regions+0xc0>)
    5896:	4b0e      	ldr	r3, [pc, #56]	; (58d0 <_mpu_configure_regions+0xc4>)
    5898:	480f      	ldr	r0, [pc, #60]	; (58d8 <_mpu_configure_regions+0xcc>)
    589a:	1a5b      	subs	r3, r3, r1
    589c:	08db      	lsrs	r3, r3, #3
    589e:	f363 128f 	bfi	r2, r3, #6, #10
    58a2:	4629      	mov	r1, r5
    58a4:	e7d7      	b.n	5856 <_mpu_configure_regions+0x4a>
		return REGION_32B;
    58a6:	2408      	movs	r4, #8
    58a8:	e7eb      	b.n	5882 <_mpu_configure_regions+0x76>
		return REGION_4G;
    58aa:	243e      	movs	r4, #62	; 0x3e
    58ac:	e7e9      	b.n	5882 <_mpu_configure_regions+0x76>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    58ae:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    58b2:	432a      	orrs	r2, r5
    58b4:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    58b8:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    58bc:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    58be:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    58c0:	613c      	str	r4, [r7, #16]
		reg_index++;
    58c2:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    58c4:	3101      	adds	r1, #1
    58c6:	e7a5      	b.n	5814 <_mpu_configure_regions+0x8>
    58c8:	e000ed90 	.word	0xe000ed90
    58cc:	000233ec 	.word	0x000233ec
    58d0:	000234f4 	.word	0x000234f4
    58d4:	00024954 	.word	0x00024954
    58d8:	00024977 	.word	0x00024977

000058dc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    58dc:	4b03      	ldr	r3, [pc, #12]	; (58ec <arm_core_mpu_enable+0x10>)
    58de:	2205      	movs	r2, #5
    58e0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    58e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    58e6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    58ea:	4770      	bx	lr
    58ec:	e000ed90 	.word	0xe000ed90

000058f0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    58f0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    58f4:	4b01      	ldr	r3, [pc, #4]	; (58fc <arm_core_mpu_disable+0xc>)
    58f6:	2200      	movs	r2, #0
    58f8:	605a      	str	r2, [r3, #4]
}
    58fa:	4770      	bx	lr
    58fc:	e000ed90 	.word	0xe000ed90

00005900 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    5900:	4913      	ldr	r1, [pc, #76]	; (5950 <arm_mpu_init+0x50>)
    5902:	6808      	ldr	r0, [r1, #0]
    5904:	2808      	cmp	r0, #8
{
    5906:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    5908:	d81e      	bhi.n	5948 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();
    590a:	f7ff fff1 	bl	58f0 <arm_core_mpu_disable>
	MPU->RNR = index;
    590e:	4c11      	ldr	r4, [pc, #68]	; (5954 <arm_mpu_init+0x54>)
    5910:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5912:	2200      	movs	r2, #0
    5914:	4290      	cmp	r0, r2
    5916:	f101 010c 	add.w	r1, r1, #12
    591a:	d105      	bne.n	5928 <arm_mpu_init+0x28>
		_region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    591c:	4b0e      	ldr	r3, [pc, #56]	; (5958 <arm_mpu_init+0x58>)
    591e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    5920:	f7ff ffdc 	bl	58dc <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    5924:	2000      	movs	r0, #0
}
    5926:	bd10      	pop	{r4, pc}
    5928:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    592a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    592e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5932:	4313      	orrs	r3, r2
    5934:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5938:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    593a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    593e:	f043 0301 	orr.w	r3, r3, #1
    5942:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5944:	3201      	adds	r2, #1
    5946:	e7e5      	b.n	5914 <arm_mpu_init+0x14>
		return -1;
    5948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    594c:	e7eb      	b.n	5926 <arm_mpu_init+0x26>
    594e:	bf00      	nop
    5950:	00023684 	.word	0x00023684
    5954:	e000ed90 	.word	0xe000ed90
    5958:	20002178 	.word	0x20002178

0000595c <arm_core_mpu_configure_static_mpu_regions>:
{
    595c:	b510      	push	{r4, lr}
static int _mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    595e:	4c03      	ldr	r4, [pc, #12]	; (596c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = _mpu_configure_regions(static_regions,
    5960:	2301      	movs	r3, #1
    5962:	7822      	ldrb	r2, [r4, #0]
    5964:	f7ff ff52 	bl	580c <_mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5968:	7020      	strb	r0, [r4, #0]
}
    596a:	bd10      	pop	{r4, pc}
    596c:	20002178 	.word	0x20002178

00005970 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    5970:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = _mpu_configure_regions(dynamic_regions,
    5972:	4a08      	ldr	r2, [pc, #32]	; (5994 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    5974:	2300      	movs	r3, #0
    5976:	7812      	ldrb	r2, [r2, #0]
    5978:	f7ff ff48 	bl	580c <_mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    597c:	f110 0f16 	cmn.w	r0, #22
    5980:	d003      	beq.n	598a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    5982:	4b05      	ldr	r3, [pc, #20]	; (5998 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    5984:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < _get_num_regions(); i++) {
    5986:	2807      	cmp	r0, #7
    5988:	dd00      	ble.n	598c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    598a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    598c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    598e:	611a      	str	r2, [r3, #16]
    5990:	3001      	adds	r0, #1
    5992:	e7f8      	b.n	5986 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    5994:	20002178 	.word	0x20002178
    5998:	e000ed90 	.word	0xe000ed90

0000599c <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59a0:	b0cd      	sub	sp, #308	; 0x134
    59a2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    59a6:	469a      	mov	sl, r3
    59a8:	9201      	str	r2, [sp, #4]
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    59aa:	2300      	movs	r3, #0
			case '%':
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
    59ac:	9304      	str	r3, [sp, #16]
				break;
    59ae:	e003      	b.n	59b8 <_prf+0x1c>
			count++;
    59b0:	9b04      	ldr	r3, [sp, #16]
	while ((c = *format++)) {
    59b2:	9501      	str	r5, [sp, #4]
			count++;
    59b4:	3301      	adds	r3, #1
    59b6:	9304      	str	r3, [sp, #16]
	while ((c = *format++)) {
    59b8:	9d01      	ldr	r5, [sp, #4]
    59ba:	f815 0b01 	ldrb.w	r0, [r5], #1
    59be:	b148      	cbz	r0, 59d4 <_prf+0x38>
		if (c != '%') {
    59c0:	2825      	cmp	r0, #37	; 0x25
    59c2:	d074      	beq.n	5aae <_prf+0x112>
			if ((*func) (c, dest) == EOF) {
    59c4:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
    59c8:	4798      	blx	r3
    59ca:	3001      	adds	r0, #1
    59cc:	d1f0      	bne.n	59b0 <_prf+0x14>
				return EOF;
    59ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    59d2:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
    59d4:	9804      	ldr	r0, [sp, #16]
    59d6:	b04d      	add	sp, #308	; 0x134
    59d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    59dc:	2c23      	cmp	r4, #35	; 0x23
    59de:	d05e      	beq.n	5a9e <_prf+0x102>
    59e0:	d853      	bhi.n	5a8a <_prf+0xee>
    59e2:	2c00      	cmp	r4, #0
    59e4:	d0f6      	beq.n	59d4 <_prf+0x38>
					fspace = true;
    59e6:	2c20      	cmp	r4, #32
    59e8:	9b05      	ldr	r3, [sp, #20]
    59ea:	bf08      	it	eq
    59ec:	2301      	moveq	r3, #1
    59ee:	9305      	str	r3, [sp, #20]
					fminus = true;
    59f0:	9d01      	ldr	r5, [sp, #4]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    59f2:	48b6      	ldr	r0, [pc, #728]	; (5ccc <_prf+0x330>)
    59f4:	462b      	mov	r3, r5
    59f6:	f813 4b01 	ldrb.w	r4, [r3], #1
    59fa:	9301      	str	r3, [sp, #4]
    59fc:	4621      	mov	r1, r4
    59fe:	f019 fdbb 	bl	1f578 <strchr>
    5a02:	2800      	cmp	r0, #0
    5a04:	d1ea      	bne.n	59dc <_prf+0x40>
			if (c == '*') {
    5a06:	2c2a      	cmp	r4, #42	; 0x2a
    5a08:	d159      	bne.n	5abe <_prf+0x122>
				width = (int32_t) va_arg(vargs, int32_t);
    5a0a:	f85a 3b04 	ldr.w	r3, [sl], #4
    5a0e:	9303      	str	r3, [sp, #12]
				if (width < 0) {
    5a10:	2b00      	cmp	r3, #0
					width = -width;
    5a12:	bfbf      	itttt	lt
    5a14:	425b      	neglt	r3, r3
    5a16:	9303      	strlt	r3, [sp, #12]
					fminus = true;
    5a18:	2301      	movlt	r3, #1
    5a1a:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    5a1c:	9b01      	ldr	r3, [sp, #4]
    5a1e:	781c      	ldrb	r4, [r3, #0]
    5a20:	1cab      	adds	r3, r5, #2
    5a22:	9301      	str	r3, [sp, #4]
				width = MAXFLD;
    5a24:	9b03      	ldr	r3, [sp, #12]
    5a26:	2bc9      	cmp	r3, #201	; 0xc9
    5a28:	bf28      	it	cs
    5a2a:	23c8      	movcs	r3, #200	; 0xc8
    5a2c:	9303      	str	r3, [sp, #12]
			if (c == '.') {
    5a2e:	2c2e      	cmp	r4, #46	; 0x2e
    5a30:	d16b      	bne.n	5b0a <_prf+0x16e>
				if (c == '*') {
    5a32:	9b01      	ldr	r3, [sp, #4]
    5a34:	781b      	ldrb	r3, [r3, #0]
    5a36:	2b2a      	cmp	r3, #42	; 0x2a
    5a38:	d164      	bne.n	5b04 <_prf+0x168>
				c = *format++;
    5a3a:	9b01      	ldr	r3, [sp, #4]
					precision = (int32_t)
    5a3c:	f85a 5b04 	ldr.w	r5, [sl], #4
				c = *format++;
    5a40:	3301      	adds	r3, #1
    5a42:	9301      	str	r3, [sp, #4]
				c = *format++;
    5a44:	9b01      	ldr	r3, [sp, #4]
					precision = -1;
    5a46:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
    5a48:	f813 4b01 	ldrb.w	r4, [r3], #1
    5a4c:	9301      	str	r3, [sp, #4]
					precision = -1;
    5a4e:	bfa8      	it	ge
    5a50:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
			if (strchr("hlLz", c) != NULL) {
    5a54:	4621      	mov	r1, r4
    5a56:	489e      	ldr	r0, [pc, #632]	; (5cd0 <_prf+0x334>)
    5a58:	f019 fd8e 	bl	1f578 <strchr>
    5a5c:	b118      	cbz	r0, 5a66 <_prf+0xca>
				c = *format++;
    5a5e:	9b01      	ldr	r3, [sp, #4]
    5a60:	f813 4b01 	ldrb.w	r4, [r3], #1
    5a64:	9301      	str	r3, [sp, #4]
			switch (c) {
    5a66:	2c67      	cmp	r4, #103	; 0x67
    5a68:	dc7b      	bgt.n	5b62 <_prf+0x1c6>
    5a6a:	2c65      	cmp	r4, #101	; 0x65
    5a6c:	f280 80db 	bge.w	5c26 <_prf+0x28a>
    5a70:	2c47      	cmp	r4, #71	; 0x47
    5a72:	dc4d      	bgt.n	5b10 <_prf+0x174>
    5a74:	2c45      	cmp	r4, #69	; 0x45
    5a76:	f280 80d6 	bge.w	5c26 <_prf+0x28a>
    5a7a:	2c00      	cmp	r4, #0
    5a7c:	d0aa      	beq.n	59d4 <_prf+0x38>
    5a7e:	2c25      	cmp	r4, #37	; 0x25
    5a80:	f000 82fd 	beq.w	607e <_prf+0x6e2>
			if (c >= MAXFLD + 1) {
    5a84:	2cc8      	cmp	r4, #200	; 0xc8
    5a86:	dd97      	ble.n	59b8 <_prf+0x1c>
    5a88:	e7a1      	b.n	59ce <_prf+0x32>
				switch (c) {
    5a8a:	2c2d      	cmp	r4, #45	; 0x2d
    5a8c:	d00a      	beq.n	5aa4 <_prf+0x108>
    5a8e:	2c30      	cmp	r4, #48	; 0x30
    5a90:	d00b      	beq.n	5aaa <_prf+0x10e>
					fplus = true;
    5a92:	2c2b      	cmp	r4, #43	; 0x2b
    5a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5a96:	bf08      	it	eq
    5a98:	2301      	moveq	r3, #1
    5a9a:	930a      	str	r3, [sp, #40]	; 0x28
    5a9c:	e7a8      	b.n	59f0 <_prf+0x54>
					falt = true;
    5a9e:	f04f 0901 	mov.w	r9, #1
    5aa2:	e7a5      	b.n	59f0 <_prf+0x54>
					fminus = true;
    5aa4:	2301      	movs	r3, #1
    5aa6:	930b      	str	r3, [sp, #44]	; 0x2c
    5aa8:	e7a2      	b.n	59f0 <_prf+0x54>
					pad = '0';
    5aaa:	9402      	str	r4, [sp, #8]
    5aac:	e7a0      	b.n	59f0 <_prf+0x54>
			pad = ' ';		/* Default pad character    */
    5aae:	2320      	movs	r3, #32
    5ab0:	9302      	str	r3, [sp, #8]
			fminus = fplus = fspace = falt = false;
    5ab2:	2300      	movs	r3, #0
    5ab4:	9305      	str	r3, [sp, #20]
    5ab6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    5aba:	4699      	mov	r9, r3
    5abc:	e799      	b.n	59f2 <_prf+0x56>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5abe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    5ac2:	2b09      	cmp	r3, #9
				width = 0;
    5ac4:	9003      	str	r0, [sp, #12]
			} else if (!isdigit(c)) {
    5ac6:	d8b2      	bhi.n	5a2e <_prf+0x92>
		i = 10 * i + *p++ - '0';
    5ac8:	220a      	movs	r2, #10
	while (isdigit(((int) *p))) {
    5aca:	462b      	mov	r3, r5
    5acc:	f813 0b01 	ldrb.w	r0, [r3], #1
    5ad0:	9301      	str	r3, [sp, #4]
    5ad2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    5ad6:	2b09      	cmp	r3, #9
    5ad8:	4604      	mov	r4, r0
    5ada:	d8a3      	bhi.n	5a24 <_prf+0x88>
		i = 10 * i + *p++ - '0';
    5adc:	9b03      	ldr	r3, [sp, #12]
    5ade:	9d01      	ldr	r5, [sp, #4]
    5ae0:	fb02 0003 	mla	r0, r2, r3, r0
    5ae4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    5ae8:	9303      	str	r3, [sp, #12]
    5aea:	e7ee      	b.n	5aca <_prf+0x12e>
    5aec:	fb00 3505 	mla	r5, r0, r5, r3
    5af0:	3d30      	subs	r5, #48	; 0x30
    5af2:	9201      	str	r2, [sp, #4]
	while (isdigit(((int) *p))) {
    5af4:	9a01      	ldr	r2, [sp, #4]
    5af6:	f812 3b01 	ldrb.w	r3, [r2], #1
    5afa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5afe:	2909      	cmp	r1, #9
    5b00:	d9f4      	bls.n	5aec <_prf+0x150>
    5b02:	e79f      	b.n	5a44 <_prf+0xa8>
	i = 0;
    5b04:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    5b06:	200a      	movs	r0, #10
    5b08:	e7f4      	b.n	5af4 <_prf+0x158>
			precision = -1;	/* No precision specified   */
    5b0a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5b0e:	e7a1      	b.n	5a54 <_prf+0xb8>
			switch (c) {
    5b10:	2c63      	cmp	r4, #99	; 0x63
    5b12:	d06e      	beq.n	5bf2 <_prf+0x256>
    5b14:	dc30      	bgt.n	5b78 <_prf+0x1dc>
    5b16:	2c58      	cmp	r4, #88	; 0x58
    5b18:	d1b4      	bne.n	5a84 <_prf+0xe8>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    5b1a:	f85a 1b04 	ldr.w	r1, [sl], #4
	if (alt_form) {
    5b1e:	f1b9 0f00 	cmp.w	r9, #0
    5b22:	f000 82a2 	beq.w	606a <_prf+0x6ce>
		*buf++ = '0';
    5b26:	f647 0330 	movw	r3, #30768	; 0x7830
    5b2a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
		*buf++ = 'x';
    5b2e:	f10d 0666 	add.w	r6, sp, #102	; 0x66
	len = _to_x(buf, value, 16, precision);
    5b32:	462b      	mov	r3, r5
    5b34:	2210      	movs	r2, #16
    5b36:	4630      	mov	r0, r6
    5b38:	f019 fdc1 	bl	1f6be <_to_x>
	if (prefix == 'X') {
    5b3c:	2c58      	cmp	r4, #88	; 0x58
    5b3e:	d105      	bne.n	5b4c <_prf+0x1b0>
    5b40:	aa19      	add	r2, sp, #100	; 0x64
	for (/**/; *buf; buf++) {
    5b42:	f812 3b01 	ldrb.w	r3, [r2], #1
    5b46:	2b00      	cmp	r3, #0
    5b48:	f040 8291 	bne.w	606e <_prf+0x6d2>
	return len + (buf - buf0);
    5b4c:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
			prefix = 0;
    5b50:	f1b9 0f00 	cmp.w	r9, #0
	return len + (buf - buf0);
    5b54:	eba6 0b0b 	sub.w	fp, r6, fp
    5b58:	4458      	add	r0, fp
			prefix = 0;
    5b5a:	bf14      	ite	ne
    5b5c:	2702      	movne	r7, #2
    5b5e:	2700      	moveq	r7, #0
				if (precision != -1) {
    5b60:	e027      	b.n	5bb2 <_prf+0x216>
			switch (c) {
    5b62:	2c70      	cmp	r4, #112	; 0x70
    5b64:	f000 825d 	beq.w	6022 <_prf+0x686>
    5b68:	dc29      	bgt.n	5bbe <_prf+0x222>
    5b6a:	2c6e      	cmp	r4, #110	; 0x6e
    5b6c:	f000 821e 	beq.w	5fac <_prf+0x610>
    5b70:	f300 8221 	bgt.w	5fb6 <_prf+0x61a>
    5b74:	2c69      	cmp	r4, #105	; 0x69
    5b76:	d185      	bne.n	5a84 <_prf+0xe8>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    5b78:	f85a 4b04 	ldr.w	r4, [sl], #4
	if (value < 0) {
    5b7c:	2c00      	cmp	r4, #0
    5b7e:	da43      	bge.n	5c08 <_prf+0x26c>
		*buf++ = '-';
    5b80:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000) {
    5b82:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
    5b86:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (value != 0x80000000) {
    5b8a:	d042      	beq.n	5c12 <_prf+0x276>
			value = -value;
    5b8c:	4261      	negs	r1, r4
		*buf++ = '-';
    5b8e:	f10d 0b65 	add.w	fp, sp, #101	; 0x65
	return _to_x(buf, value, 10, precision);
    5b92:	462b      	mov	r3, r5
    5b94:	220a      	movs	r2, #10
    5b96:	4658      	mov	r0, fp
    5b98:	f019 fd91 	bl	1f6be <_to_x>
				if (fplus || fspace || (int32_temp < 0)) {
    5b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b9e:	9a05      	ldr	r2, [sp, #20]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    5ba0:	4458      	add	r0, fp
				if (fplus || fspace || (int32_temp < 0)) {
    5ba2:	ea53 0702 	orrs.w	r7, r3, r2
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    5ba6:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
    5baa:	eba0 000b 	sub.w	r0, r0, fp
				if (fplus || fspace || (int32_temp < 0)) {
    5bae:	d100      	bne.n	5bb2 <_prf+0x216>
    5bb0:	0fe7      	lsrs	r7, r4, #31
			prefix = 0;
    5bb2:	3501      	adds	r5, #1
    5bb4:	9b02      	ldr	r3, [sp, #8]
    5bb6:	bf18      	it	ne
    5bb8:	2320      	movne	r3, #32
    5bba:	9302      	str	r3, [sp, #8]
    5bbc:	e07a      	b.n	5cb4 <_prf+0x318>
			switch (c) {
    5bbe:	2c75      	cmp	r4, #117	; 0x75
    5bc0:	f000 824b 	beq.w	605a <_prf+0x6be>
    5bc4:	2c78      	cmp	r4, #120	; 0x78
    5bc6:	d0a8      	beq.n	5b1a <_prf+0x17e>
    5bc8:	2c73      	cmp	r4, #115	; 0x73
    5bca:	f47f af5b 	bne.w	5a84 <_prf+0xe8>
				cptr_temp = (char *) va_arg(vargs, char *);
    5bce:	f85a 1b04 	ldr.w	r1, [sl], #4
				for (c = 0; c < MAXFLD; c++) {
    5bd2:	f04f 0900 	mov.w	r9, #0
					if (cptr_temp[c] == '\0') {
    5bd6:	f811 3009 	ldrb.w	r3, [r1, r9]
    5bda:	2b00      	cmp	r3, #0
    5bdc:	f000 822f 	beq.w	603e <_prf+0x6a2>
				for (c = 0; c < MAXFLD; c++) {
    5be0:	f109 0901 	add.w	r9, r9, #1
    5be4:	f1b9 0fc8 	cmp.w	r9, #200	; 0xc8
    5be8:	d1f5      	bne.n	5bd6 <_prf+0x23a>
				if ((precision >= 0) && (precision < c)) {
    5bea:	2d00      	cmp	r5, #0
    5bec:	f280 8229 	bge.w	6042 <_prf+0x6a6>
    5bf0:	e22e      	b.n	6050 <_prf+0x6b4>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    5bf2:	f85a 3b04 	ldr.w	r3, [sl], #4
    5bf6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				buf[1] = '\0';
    5bfa:	2300      	movs	r3, #0
    5bfc:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
				c = 1;
    5c00:	f04f 0901 	mov.w	r9, #1
					prefix = 2;
    5c04:	2700      	movs	r7, #0
    5c06:	e1e7      	b.n	5fd8 <_prf+0x63c>
	} else if (fplus) {
    5c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c0a:	b123      	cbz	r3, 5c16 <_prf+0x27a>
		*buf++ = '+';
    5c0c:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    5c0e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (value != 0x80000000) {
    5c12:	4621      	mov	r1, r4
    5c14:	e7bb      	b.n	5b8e <_prf+0x1f2>
	} else if (fspace) {
    5c16:	9b05      	ldr	r3, [sp, #20]
    5c18:	b10b      	cbz	r3, 5c1e <_prf+0x282>
		*buf++ = ' ';
    5c1a:	2320      	movs	r3, #32
    5c1c:	e7f7      	b.n	5c0e <_prf+0x272>
	} else if (fspace) {
    5c1e:	4621      	mov	r1, r4
    5c20:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
    5c24:	e7b5      	b.n	5b92 <_prf+0x1f6>
				u.d = (double) va_arg(vargs, double);
    5c26:	f10a 0a07 	add.w	sl, sl, #7
    5c2a:	f02a 0307 	bic.w	r3, sl, #7
    5c2e:	469a      	mov	sl, r3
    5c30:	6859      	ldr	r1, [r3, #4]
    5c32:	f85a 0b08 	ldr.w	r0, [sl], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    5c36:	02cb      	lsls	r3, r1, #11
    5c38:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    5c3c:	02c2      	lsls	r2, r0, #11
    5c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5c42:	9206      	str	r2, [sp, #24]
    5c44:	9307      	str	r3, [sp, #28]
    5c46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	exp = double_temp >> 52 & 0x7ff;
    5c4a:	f3c1 580a 	ubfx	r8, r1, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    5c4e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	sign = !!(double_temp & HIGHBIT64);
    5c52:	460b      	mov	r3, r1
	if (exp == 0x7ff) {
    5c54:	f240 71ff 	movw	r1, #2047	; 0x7ff
    5c58:	4588      	cmp	r8, r1
	sign = !!(double_temp & HIGHBIT64);
    5c5a:	4602      	mov	r2, r0
	if (exp == 0x7ff) {
    5c5c:	d145      	bne.n	5cea <_prf+0x34e>
		if (sign) {
    5c5e:	2800      	cmp	r0, #0
		if (!fract) {
    5c60:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
		if (sign) {
    5c64:	f173 0300 	sbcs.w	r3, r3, #0
			*buf++ = '-';
    5c68:	bfbb      	ittet	lt
    5c6a:	232d      	movlt	r3, #45	; 0x2d
    5c6c:	f88d 3064 	strblt.w	r3, [sp, #100]	; 0x64
		if (sign) {
    5c70:	ab19      	addge	r3, sp, #100	; 0x64
			*buf++ = '-';
    5c72:	f10d 0365 	addlt.w	r3, sp, #101	; 0x65
		if (!fract) {
    5c76:	430a      	orrs	r2, r1
    5c78:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    5c7c:	f103 0003 	add.w	r0, r3, #3
    5c80:	d128      	bne.n	5cd4 <_prf+0x338>
			if (isupper(c)) {
    5c82:	2c19      	cmp	r4, #25
    5c84:	d81b      	bhi.n	5cbe <_prf+0x322>
				*buf++ = 'I';
    5c86:	2249      	movs	r2, #73	; 0x49
    5c88:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
    5c8a:	224e      	movs	r2, #78	; 0x4e
    5c8c:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
    5c8e:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
    5c90:	709a      	strb	r2, [r3, #2]
		return buf - start;
    5c92:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
		*buf = 0;
    5c96:	2200      	movs	r2, #0
    5c98:	70da      	strb	r2, [r3, #3]
		return buf - start;
    5c9a:	eba0 000b 	sub.w	r0, r0, fp
				if (fplus || fspace || (buf[0] == '-')) {
    5c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ca0:	9a05      	ldr	r2, [sp, #20]
    5ca2:	ea53 0702 	orrs.w	r7, r3, r2
    5ca6:	d105      	bne.n	5cb4 <_prf+0x318>
    5ca8:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
    5cac:	f1a7 032d 	sub.w	r3, r7, #45	; 0x2d
    5cb0:	425f      	negs	r7, r3
    5cb2:	415f      	adcs	r7, r3
			if (c >= MAXFLD + 1) {
    5cb4:	28c8      	cmp	r0, #200	; 0xc8
    5cb6:	f73f ae8a 	bgt.w	59ce <_prf+0x32>
    5cba:	4681      	mov	r9, r0
    5cbc:	e18c      	b.n	5fd8 <_prf+0x63c>
				*buf++ = 'i';
    5cbe:	2269      	movs	r2, #105	; 0x69
    5cc0:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
    5cc2:	226e      	movs	r2, #110	; 0x6e
    5cc4:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
    5cc6:	2266      	movs	r2, #102	; 0x66
    5cc8:	e7e2      	b.n	5c90 <_prf+0x2f4>
    5cca:	bf00      	nop
    5ccc:	0002499d 	.word	0x0002499d
    5cd0:	000249a3 	.word	0x000249a3
			if (isupper(c)) {
    5cd4:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    5cd6:	bf99      	ittee	ls
    5cd8:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    5cda:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    5cdc:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    5cde:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    5ce0:	bf94      	ite	ls
    5ce2:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
    5ce4:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
    5ce6:	7059      	strb	r1, [r3, #1]
    5ce8:	e7d2      	b.n	5c90 <_prf+0x2f4>
	if ((exp | fract) != 0) {
    5cea:	9906      	ldr	r1, [sp, #24]
    5cec:	9e07      	ldr	r6, [sp, #28]
    5cee:	ea48 0101 	orr.w	r1, r8, r1
    5cf2:	4640      	mov	r0, r8
    5cf4:	910e      	str	r1, [sp, #56]	; 0x38
    5cf6:	17c1      	asrs	r1, r0, #31
    5cf8:	4331      	orrs	r1, r6
    5cfa:	910f      	str	r1, [sp, #60]	; 0x3c
    5cfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
		c = 'f';
    5d00:	2c46      	cmp	r4, #70	; 0x46
    5d02:	bf08      	it	eq
    5d04:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    5d06:	4301      	orrs	r1, r0
    5d08:	d03e      	beq.n	5d88 <_prf+0x3ec>
		fract |= HIGHBIT64;
    5d0a:	9806      	ldr	r0, [sp, #24]
	if (decexp && sign) {
    5d0c:	2a00      	cmp	r2, #0
		fract |= HIGHBIT64;
    5d0e:	f046 4100 	orr.w	r1, r6, #2147483648	; 0x80000000
	if (decexp && sign) {
    5d12:	f173 0300 	sbcs.w	r3, r3, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    5d16:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
		fract |= HIGHBIT64;
    5d1a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	if (decexp && sign) {
    5d1e:	da35      	bge.n	5d8c <_prf+0x3f0>
		*buf++ = '-';
    5d20:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    5d22:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    5d26:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	decexp = 0;
    5d2a:	2600      	movs	r6, #0
	while (exp <= -3) {
    5d2c:	f118 0f02 	cmn.w	r8, #2
    5d30:	db39      	blt.n	5da6 <_prf+0x40a>
	while (exp > 0) {
    5d32:	f1b8 0f00 	cmp.w	r8, #0
    5d36:	dc66      	bgt.n	5e06 <_prf+0x46a>
		_rlrshift(&fract);
    5d38:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    5d3a:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    5d3e:	f019 fce5 	bl	1f70c <_rlrshift>
	while (exp < (0 + 4)) {
    5d42:	f1b8 0f04 	cmp.w	r8, #4
    5d46:	d1f7      	bne.n	5d38 <_prf+0x39c>
		precision = 6;		/* Default precision if none given */
    5d48:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    5d4a:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
    5d4e:	bfb8      	it	lt
    5d50:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    5d52:	2b47      	cmp	r3, #71	; 0x47
    5d54:	d17b      	bne.n	5e4e <_prf+0x4b2>
		if (!falt && (precision > 0)) {
    5d56:	f1b9 0f00 	cmp.w	r9, #0
    5d5a:	d175      	bne.n	5e48 <_prf+0x4ac>
    5d5c:	f115 0800 	adds.w	r8, r5, #0
    5d60:	bf18      	it	ne
    5d62:	f04f 0801 	movne.w	r8, #1
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    5d66:	1cf2      	adds	r2, r6, #3
    5d68:	db02      	blt.n	5d70 <_prf+0x3d4>
    5d6a:	1c6b      	adds	r3, r5, #1
    5d6c:	429e      	cmp	r6, r3
    5d6e:	dd72      	ble.n	5e56 <_prf+0x4ba>
				c = 'E';
    5d70:	2c67      	cmp	r4, #103	; 0x67
    5d72:	bf0c      	ite	eq
    5d74:	2465      	moveq	r4, #101	; 0x65
    5d76:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
    5d78:	f105 0b01 	add.w	fp, r5, #1
	digit_count = 16;
    5d7c:	2310      	movs	r3, #16
    5d7e:	459b      	cmp	fp, r3
    5d80:	9313      	str	r3, [sp, #76]	; 0x4c
	if (exp > 16) {
    5d82:	bfa8      	it	ge
    5d84:	469b      	movge	fp, r3
    5d86:	e06e      	b.n	5e66 <_prf+0x4ca>
	exp = double_temp >> 52 & 0x7ff;
    5d88:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
    5d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5d8e:	b10b      	cbz	r3, 5d94 <_prf+0x3f8>
		*buf++ = '+';
    5d90:	232b      	movs	r3, #43	; 0x2b
    5d92:	e7c6      	b.n	5d22 <_prf+0x386>
	} else if (fspace) {
    5d94:	9b05      	ldr	r3, [sp, #20]
    5d96:	b10b      	cbz	r3, 5d9c <_prf+0x400>
		*buf++ = ' ';
    5d98:	2320      	movs	r3, #32
    5d9a:	e7c2      	b.n	5d22 <_prf+0x386>
	} else if (fspace) {
    5d9c:	af19      	add	r7, sp, #100	; 0x64
    5d9e:	e7c4      	b.n	5d2a <_prf+0x38e>
			_rlrshift(&fract);
    5da0:	a814      	add	r0, sp, #80	; 0x50
    5da2:	f019 fcb3 	bl	1f70c <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    5da6:	e9dd ec14 	ldrd	lr, ip, [sp, #80]	; 0x50
    5daa:	2300      	movs	r3, #0
    5dac:	f8cd c020 	str.w	ip, [sp, #32]
    5db0:	9309      	str	r3, [sp, #36]	; 0x24
    5db2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    5db6:	48b7      	ldr	r0, [pc, #732]	; (6094 <_prf+0x6f8>)
    5db8:	2100      	movs	r1, #0
    5dba:	4299      	cmp	r1, r3
    5dbc:	bf08      	it	eq
    5dbe:	4290      	cmpeq	r0, r2
    5dc0:	f108 0801 	add.w	r8, r8, #1
    5dc4:	d3ec      	bcc.n	5da0 <_prf+0x404>
		fract *= 5;
    5dc6:	2005      	movs	r0, #5
    5dc8:	fbae 2300 	umull	r2, r3, lr, r0
    5dcc:	fb00 330c 	mla	r3, r0, ip, r3
    5dd0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    5dd4:	3e01      	subs	r6, #1
    5dd6:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    5dda:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    5dde:	f04f 0c00 	mov.w	ip, #0
    5de2:	2100      	movs	r1, #0
    5de4:	458c      	cmp	ip, r1
    5de6:	bf08      	it	eq
    5de8:	459b      	cmpeq	fp, r3
    5dea:	d205      	bcs.n	5df8 <_prf+0x45c>
    5dec:	f1be 0f00 	cmp.w	lr, #0
    5df0:	d09c      	beq.n	5d2c <_prf+0x390>
    5df2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    5df6:	e799      	b.n	5d2c <_prf+0x390>
			fract <<= 1;
    5df8:	1892      	adds	r2, r2, r2
    5dfa:	415b      	adcs	r3, r3
			exp--;
    5dfc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5e00:	f04f 0e01 	mov.w	lr, #1
    5e04:	e7ed      	b.n	5de2 <_prf+0x446>
		_ldiv5(&fract);
    5e06:	a814      	add	r0, sp, #80	; 0x50
    5e08:	f019 fc92 	bl	1f730 <_ldiv5>
		exp--;
    5e0c:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    5e10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    5e14:	3601      	adds	r6, #1
    5e16:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    5e1a:	2300      	movs	r3, #0
    5e1c:	f04f 0c00 	mov.w	ip, #0
    5e20:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    5e24:	459c      	cmp	ip, r3
    5e26:	bf08      	it	eq
    5e28:	4583      	cmpeq	fp, r0
    5e2a:	d206      	bcs.n	5e3a <_prf+0x49e>
    5e2c:	f1be 0f00 	cmp.w	lr, #0
    5e30:	f43f af7f 	beq.w	5d32 <_prf+0x396>
    5e34:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    5e38:	e77b      	b.n	5d32 <_prf+0x396>
			fract <<= 1;
    5e3a:	1849      	adds	r1, r1, r1
    5e3c:	4140      	adcs	r0, r0
			exp--;
    5e3e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5e42:	f04f 0e01 	mov.w	lr, #1
    5e46:	e7e8      	b.n	5e1a <_prf+0x47e>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    5e48:	f04f 0800 	mov.w	r8, #0
    5e4c:	e78b      	b.n	5d66 <_prf+0x3ca>
	if (c == 'f') {
    5e4e:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
    5e50:	f04f 0800 	mov.w	r8, #0
	if (c == 'f') {
    5e54:	d190      	bne.n	5d78 <_prf+0x3dc>
		if (exp < 0) {
    5e56:	eb16 0b05 	adds.w	fp, r6, r5
    5e5a:	d540      	bpl.n	5ede <_prf+0x542>
	digit_count = 16;
    5e5c:	2310      	movs	r3, #16
    5e5e:	9313      	str	r3, [sp, #76]	; 0x4c
    5e60:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    5e62:	f04f 0b00 	mov.w	fp, #0
	ltemp = 0x0800000000000000;
    5e66:	2200      	movs	r2, #0
    5e68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    5e6c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    5e70:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    5e74:	d235      	bcs.n	5ee2 <_prf+0x546>
	fract += ltemp;
    5e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5e78:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5e7a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5e7c:	189b      	adds	r3, r3, r2
    5e7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5e80:	eb41 0202 	adc.w	r2, r1, r2
    5e84:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    5e88:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    5e8c:	9310      	str	r3, [sp, #64]	; 0x40
    5e8e:	2300      	movs	r3, #0
    5e90:	9311      	str	r3, [sp, #68]	; 0x44
    5e92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    5e96:	4313      	orrs	r3, r2
    5e98:	d006      	beq.n	5ea8 <_prf+0x50c>
		_ldiv5(&fract);
    5e9a:	a814      	add	r0, sp, #80	; 0x50
    5e9c:	f019 fc48 	bl	1f730 <_ldiv5>
		_rlrshift(&fract);
    5ea0:	a814      	add	r0, sp, #80	; 0x50
    5ea2:	f019 fc33 	bl	1f70c <_rlrshift>
		decexp++;
    5ea6:	3601      	adds	r6, #1
	if (c == 'f') {
    5ea8:	2c66      	cmp	r4, #102	; 0x66
    5eaa:	f107 0b01 	add.w	fp, r7, #1
    5eae:	d135      	bne.n	5f1c <_prf+0x580>
		if (decexp > 0) {
    5eb0:	2e00      	cmp	r6, #0
    5eb2:	dd1d      	ble.n	5ef0 <_prf+0x554>
    5eb4:	eb07 0b06 	add.w	fp, r7, r6
				*buf++ = _get_digit(&fract, &digit_count);
    5eb8:	a913      	add	r1, sp, #76	; 0x4c
    5eba:	a814      	add	r0, sp, #80	; 0x50
    5ebc:	f019 fc64 	bl	1f788 <_get_digit>
    5ec0:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0) {
    5ec4:	45bb      	cmp	fp, r7
    5ec6:	d1f7      	bne.n	5eb8 <_prf+0x51c>
    5ec8:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    5eca:	ea59 0905 	orrs.w	r9, r9, r5
    5ece:	d003      	beq.n	5ed8 <_prf+0x53c>
			*buf++ = '.';
    5ed0:	232e      	movs	r3, #46	; 0x2e
    5ed2:	f80b 3b01 	strb.w	r3, [fp], #1
    5ed6:	46a9      	mov	r9, r5
    5ed8:	44d9      	add	r9, fp
				*buf++ = '0';
    5eda:	2530      	movs	r5, #48	; 0x30
    5edc:	e011      	b.n	5f02 <_prf+0x566>
		if (exp < 0) {
    5ede:	2466      	movs	r4, #102	; 0x66
    5ee0:	e74c      	b.n	5d7c <_prf+0x3e0>
		_ldiv5(&ltemp);
    5ee2:	a816      	add	r0, sp, #88	; 0x58
    5ee4:	f019 fc24 	bl	1f730 <_ldiv5>
		_rlrshift(&ltemp);
    5ee8:	a816      	add	r0, sp, #88	; 0x58
    5eea:	f019 fc0f 	bl	1f70c <_rlrshift>
    5eee:	e7bf      	b.n	5e70 <_prf+0x4d4>
			*buf++ = '0';
    5ef0:	2330      	movs	r3, #48	; 0x30
    5ef2:	703b      	strb	r3, [r7, #0]
    5ef4:	e7e9      	b.n	5eca <_prf+0x52e>
			if (decexp < 0) {
    5ef6:	f10b 0b01 	add.w	fp, fp, #1
    5efa:	b146      	cbz	r6, 5f0e <_prf+0x572>
				*buf++ = '0';
    5efc:	f80b 5c01 	strb.w	r5, [fp, #-1]
				decexp++;
    5f00:	3601      	adds	r6, #1
		while (precision-- > 0) {
    5f02:	45d9      	cmp	r9, fp
    5f04:	d1f7      	bne.n	5ef6 <_prf+0x55a>
	if (prune_zero) {
    5f06:	f1b8 0f00 	cmp.w	r8, #0
    5f0a:	d048      	beq.n	5f9e <_prf+0x602>
    5f0c:	e024      	b.n	5f58 <_prf+0x5bc>
				*buf++ = _get_digit(&fract, &digit_count);
    5f0e:	a913      	add	r1, sp, #76	; 0x4c
    5f10:	a814      	add	r0, sp, #80	; 0x50
    5f12:	f019 fc39 	bl	1f788 <_get_digit>
    5f16:	f80b 0c01 	strb.w	r0, [fp, #-1]
    5f1a:	e7f2      	b.n	5f02 <_prf+0x566>
		*buf = _get_digit(&fract, &digit_count);
    5f1c:	a913      	add	r1, sp, #76	; 0x4c
    5f1e:	a814      	add	r0, sp, #80	; 0x50
    5f20:	f019 fc32 	bl	1f788 <_get_digit>
		if (*buf++ != '0') {
    5f24:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    5f26:	bf18      	it	ne
    5f28:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    5f2c:	ea59 0905 	orrs.w	r9, r9, r5
		*buf = _get_digit(&fract, &digit_count);
    5f30:	7038      	strb	r0, [r7, #0]
		if (falt || (precision > 0)) {
    5f32:	d004      	beq.n	5f3e <_prf+0x5a2>
			*buf++ = '.';
    5f34:	232e      	movs	r3, #46	; 0x2e
    5f36:	f107 0b02 	add.w	fp, r7, #2
    5f3a:	707b      	strb	r3, [r7, #1]
    5f3c:	46a9      	mov	r9, r5
    5f3e:	44d9      	add	r9, fp
    5f40:	e005      	b.n	5f4e <_prf+0x5b2>
			*buf++ = _get_digit(&fract, &digit_count);
    5f42:	a913      	add	r1, sp, #76	; 0x4c
    5f44:	a814      	add	r0, sp, #80	; 0x50
    5f46:	f019 fc1f 	bl	1f788 <_get_digit>
    5f4a:	f80b 0b01 	strb.w	r0, [fp], #1
		while (precision-- > 0) {
    5f4e:	45d9      	cmp	r9, fp
    5f50:	d1f7      	bne.n	5f42 <_prf+0x5a6>
	if (prune_zero) {
    5f52:	f1b8 0f00 	cmp.w	r8, #0
    5f56:	d007      	beq.n	5f68 <_prf+0x5cc>
		while (*--buf == '0')
    5f58:	465b      	mov	r3, fp
    5f5a:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    5f5e:	2a30      	cmp	r2, #48	; 0x30
    5f60:	d0fa      	beq.n	5f58 <_prf+0x5bc>
		if (*buf != '.') {
    5f62:	2a2e      	cmp	r2, #46	; 0x2e
    5f64:	bf18      	it	ne
    5f66:	469b      	movne	fp, r3
	if ((c == 'e') || (c == 'E')) {
    5f68:	f024 0320 	bic.w	r3, r4, #32
    5f6c:	2b45      	cmp	r3, #69	; 0x45
    5f6e:	d116      	bne.n	5f9e <_prf+0x602>
		if (decexp < 0) {
    5f70:	2e00      	cmp	r6, #0
			decexp = -decexp;
    5f72:	bfba      	itte	lt
    5f74:	4276      	neglt	r6, r6
			*buf++ = '-';
    5f76:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    5f78:	232b      	movge	r3, #43	; 0x2b
		*buf++ = (char) ((decexp / 10) + '0');
    5f7a:	220a      	movs	r2, #10
    5f7c:	f88b 3001 	strb.w	r3, [fp, #1]
    5f80:	fb96 f3f2 	sdiv	r3, r6, r2
		decexp %= 10;
    5f84:	fb02 6613 	mls	r6, r2, r3, r6
		*buf++ = (char) ((decexp / 10) + '0');
    5f88:	f103 0130 	add.w	r1, r3, #48	; 0x30
		*buf++ = (char) (decexp + '0');
    5f8c:	3630      	adds	r6, #48	; 0x30
		*buf++ = (char) c;
    5f8e:	f88b 4000 	strb.w	r4, [fp]
		*buf++ = (char) ((decexp / 10) + '0');
    5f92:	f88b 1002 	strb.w	r1, [fp, #2]
		*buf++ = (char) (decexp + '0');
    5f96:	f88b 6003 	strb.w	r6, [fp, #3]
    5f9a:	f10b 0b04 	add.w	fp, fp, #4
	*buf = 0;
    5f9e:	2300      	movs	r3, #0
	return buf - start;
    5fa0:	a819      	add	r0, sp, #100	; 0x64
	*buf = 0;
    5fa2:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    5fa6:	ebab 0000 	sub.w	r0, fp, r0
    5faa:	e678      	b.n	5c9e <_prf+0x302>
				*int32ptr_temp = count;
    5fac:	f85a 3b04 	ldr.w	r3, [sl], #4
    5fb0:	9a04      	ldr	r2, [sp, #16]
    5fb2:	601a      	str	r2, [r3, #0]
				break;
    5fb4:	e500      	b.n	59b8 <_prf+0x1c>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    5fb6:	f85a 1b04 	ldr.w	r1, [sl], #4
	if (alt_form) {
    5fba:	f1b9 0f00 	cmp.w	r9, #0
    5fbe:	d020      	beq.n	6002 <_prf+0x666>
		*buf++ = '0';
    5fc0:	2330      	movs	r3, #48	; 0x30
    5fc2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    5fc6:	bb49      	cbnz	r1, 601c <_prf+0x680>
			prefix = 0;
    5fc8:	3501      	adds	r5, #1
    5fca:	9b02      	ldr	r3, [sp, #8]
			*buf++ = 0;
    5fcc:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			prefix = 0;
    5fd0:	bf18      	it	ne
    5fd2:	2320      	movne	r3, #32
    5fd4:	460f      	mov	r7, r1
    5fd6:	9302      	str	r3, [sp, #8]
				if (c < width) {
    5fd8:	9b03      	ldr	r3, [sp, #12]
    5fda:	454b      	cmp	r3, r9
    5fdc:	dd7f      	ble.n	60de <_prf+0x742>
					if (fminus) {
    5fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5fe0:	ac19      	add	r4, sp, #100	; 0x64
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d058      	beq.n	6098 <_prf+0x6fc>
							buf[i] = ' ';
    5fe6:	2320      	movs	r3, #32
						for (i = c; i < width; i++)
    5fe8:	9a03      	ldr	r2, [sp, #12]
							buf[i] = ' ';
    5fea:	f804 3009 	strb.w	r3, [r4, r9]
						for (i = c; i < width; i++)
    5fee:	f109 0901 	add.w	r9, r9, #1
    5ff2:	454a      	cmp	r2, r9
    5ff4:	d1f8      	bne.n	5fe8 <_prf+0x64c>
    5ff6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    5ffa:	4413      	add	r3, r2
    5ffc:	ac19      	add	r4, sp, #100	; 0x64
    5ffe:	461d      	mov	r5, r3
    6000:	e069      	b.n	60d6 <_prf+0x73a>
	if (alt_form) {
    6002:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    6006:	4658      	mov	r0, fp
    6008:	462b      	mov	r3, r5
    600a:	2208      	movs	r2, #8
    600c:	f019 fb57 	bl	1f6be <_to_x>
    6010:	ae19      	add	r6, sp, #100	; 0x64
    6012:	ebab 0b06 	sub.w	fp, fp, r6
    6016:	4458      	add	r0, fp
			prefix = 0;
    6018:	2700      	movs	r7, #0
    601a:	e5ca      	b.n	5bb2 <_prf+0x216>
		*buf++ = '0';
    601c:	f10d 0b65 	add.w	fp, sp, #101	; 0x65
    6020:	e7f1      	b.n	6006 <_prf+0x66a>
		*buf++ = '0';
    6022:	f647 0330 	movw	r3, #30768	; 0x7830
    6026:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16, precision);
    602a:	2210      	movs	r2, #16
    602c:	2308      	movs	r3, #8
    602e:	f85a 1b04 	ldr.w	r1, [sl], #4
    6032:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    6036:	f019 fb42 	bl	1f6be <_to_x>
	return len + (buf - buf0);
    603a:	3002      	adds	r0, #2
    603c:	e7ec      	b.n	6018 <_prf+0x67c>
				if ((precision >= 0) && (precision < c)) {
    603e:	2d00      	cmp	r5, #0
    6040:	db02      	blt.n	6048 <_prf+0x6ac>
    6042:	45a9      	cmp	r9, r5
    6044:	bfa8      	it	ge
    6046:	46a9      	movge	r9, r5
				if (c > 0) {
    6048:	f1b9 0f00 	cmp.w	r9, #0
    604c:	f43f acb4 	beq.w	59b8 <_prf+0x1c>
					memcpy(buf, cptr_temp, (size_t) c);
    6050:	464a      	mov	r2, r9
    6052:	a819      	add	r0, sp, #100	; 0x64
    6054:	f019 fad8 	bl	1f608 <memcpy>
					need_justifying = true;
    6058:	e5d4      	b.n	5c04 <_prf+0x268>
	return _to_x(buf, value, 10, precision);
    605a:	462b      	mov	r3, r5
    605c:	220a      	movs	r2, #10
    605e:	f85a 1b04 	ldr.w	r1, [sl], #4
    6062:	a819      	add	r0, sp, #100	; 0x64
    6064:	f019 fb2b 	bl	1f6be <_to_x>
				if (precision != -1) {
    6068:	e7d6      	b.n	6018 <_prf+0x67c>
	if (alt_form) {
    606a:	ae19      	add	r6, sp, #100	; 0x64
    606c:	e561      	b.n	5b32 <_prf+0x196>
		if (*buf >= 'a' && *buf <= 'z') {
    606e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    6072:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    6074:	bf9c      	itt	ls
    6076:	3b20      	subls	r3, #32
    6078:	f802 3c01 	strbls.w	r3, [r2, #-1]
    607c:	e561      	b.n	5b42 <_prf+0x1a6>
				if ((*func)('%', dest) == EOF) {
    607e:	990d      	ldr	r1, [sp, #52]	; 0x34
    6080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6082:	4620      	mov	r0, r4
    6084:	4798      	blx	r3
    6086:	3001      	adds	r0, #1
    6088:	f43f aca1 	beq.w	59ce <_prf+0x32>
				count++;
    608c:	9b04      	ldr	r3, [sp, #16]
    608e:	3301      	adds	r3, #1
    6090:	e48c      	b.n	59ac <_prf+0x10>
    6092:	bf00      	nop
    6094:	33333332 	.word	0x33333332
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    6098:	9b03      	ldr	r3, [sp, #12]
    609a:	eba3 0509 	sub.w	r5, r3, r9
    609e:	1960      	adds	r0, r4, r5
    60a0:	f109 0201 	add.w	r2, r9, #1
    60a4:	4621      	mov	r1, r4
    60a6:	f019 fa98 	bl	1f5da <memmove>
							prefix = 0;
    60aa:	9b02      	ldr	r3, [sp, #8]
    60ac:	2b20      	cmp	r3, #32
    60ae:	bf08      	it	eq
    60b0:	2700      	moveq	r7, #0
						c = width - c + prefix;
    60b2:	443d      	add	r5, r7
						for (i = prefix; i < c; i++)
    60b4:	42af      	cmp	r7, r5
    60b6:	da9e      	bge.n	5ff6 <_prf+0x65a>
							buf[i] = pad;
    60b8:	9b02      	ldr	r3, [sp, #8]
    60ba:	553b      	strb	r3, [r7, r4]
						for (i = prefix; i < c; i++)
    60bc:	3701      	adds	r7, #1
    60be:	e7f9      	b.n	60b4 <_prf+0x718>
					if ((*func)(*cptr, dest) == EOF) {
    60c0:	990d      	ldr	r1, [sp, #52]	; 0x34
    60c2:	f814 0b01 	ldrb.w	r0, [r4], #1
    60c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60c8:	4798      	blx	r3
    60ca:	3001      	adds	r0, #1
    60cc:	f43f ac7f 	beq.w	59ce <_prf+0x32>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    60d0:	9b04      	ldr	r3, [sp, #16]
    60d2:	3301      	adds	r3, #1
    60d4:	9304      	str	r3, [sp, #16]
    60d6:	9b04      	ldr	r3, [sp, #16]
    60d8:	42ab      	cmp	r3, r5
    60da:	d1f1      	bne.n	60c0 <_prf+0x724>
    60dc:	e46c      	b.n	59b8 <_prf+0x1c>
    60de:	f8cd 900c 	str.w	r9, [sp, #12]
    60e2:	e788      	b.n	5ff6 <_prf+0x65a>

000060e4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    60e4:	4b01      	ldr	r3, [pc, #4]	; (60ec <__stdout_hook_install+0x8>)
    60e6:	6018      	str	r0, [r3, #0]
}
    60e8:	4770      	bx	lr
    60ea:	bf00      	nop
    60ec:	200076b0 	.word	0x200076b0

000060f0 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    60f0:	b40c      	push	{r2, r3}
    60f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    60f4:	b909      	cbnz	r1, 60fa <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    60f6:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    60fa:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    60fe:	ab07      	add	r3, sp, #28
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    6100:	9a06      	ldr	r2, [sp, #24]
    6102:	4806      	ldr	r0, [pc, #24]	; (611c <snprintf+0x2c>)
	va_start(vargs, format);
    6104:	9301      	str	r3, [sp, #4]
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    6106:	a902      	add	r1, sp, #8
    6108:	f7ff fc48 	bl	599c <_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    610c:	9b02      	ldr	r3, [sp, #8]
    610e:	2200      	movs	r2, #0
    6110:	701a      	strb	r2, [r3, #0]
	return r;
}
    6112:	b005      	add	sp, #20
    6114:	f85d eb04 	ldr.w	lr, [sp], #4
    6118:	b002      	add	sp, #8
    611a:	4770      	bx	lr
    611c:	0001f7bd 	.word	0x0001f7bd

00006120 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    6120:	2940      	cmp	r1, #64	; 0x40
    6122:	4b0e      	ldr	r3, [pc, #56]	; (615c <bt_hex_real+0x3c>)
{
    6124:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    6126:	bf28      	it	cs
    6128:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    612a:	4c0d      	ldr	r4, [pc, #52]	; (6160 <bt_hex_real+0x40>)
    612c:	1846      	adds	r6, r0, r1
    612e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    6130:	42b0      	cmp	r0, r6
    6132:	f103 0302 	add.w	r3, r3, #2
    6136:	d104      	bne.n	6142 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    6138:	2300      	movs	r3, #0
    613a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    613e:	4807      	ldr	r0, [pc, #28]	; (615c <bt_hex_real+0x3c>)
    6140:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    6142:	7802      	ldrb	r2, [r0, #0]
    6144:	0912      	lsrs	r2, r2, #4
    6146:	5ca2      	ldrb	r2, [r4, r2]
    6148:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    614c:	f810 2b01 	ldrb.w	r2, [r0], #1
    6150:	f002 020f 	and.w	r2, r2, #15
    6154:	5ca2      	ldrb	r2, [r4, r2]
    6156:	f803 2c01 	strb.w	r2, [r3, #-1]
    615a:	e7e9      	b.n	6130 <bt_hex_real+0x10>
    615c:	20002179 	.word	0x20002179
    6160:	000249ed 	.word	0x000249ed

00006164 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    6164:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    6166:	7803      	ldrb	r3, [r0, #0]
    6168:	b08b      	sub	sp, #44	; 0x2c
    616a:	4604      	mov	r4, r0
    616c:	ad07      	add	r5, sp, #28
    616e:	2b03      	cmp	r3, #3
    6170:	d821      	bhi.n	61b6 <bt_addr_le_str_real+0x52>
    6172:	e8df f003 	tbb	[pc, r3]
    6176:	1a02      	.short	0x1a02
    6178:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    617a:	4912      	ldr	r1, [pc, #72]	; (61c4 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    617c:	4628      	mov	r0, r5
    617e:	f019 f9de 	bl	1f53e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    6182:	7863      	ldrb	r3, [r4, #1]
    6184:	9304      	str	r3, [sp, #16]
    6186:	78a3      	ldrb	r3, [r4, #2]
    6188:	9303      	str	r3, [sp, #12]
    618a:	78e3      	ldrb	r3, [r4, #3]
    618c:	9302      	str	r3, [sp, #8]
    618e:	7923      	ldrb	r3, [r4, #4]
    6190:	9301      	str	r3, [sp, #4]
    6192:	7963      	ldrb	r3, [r4, #5]
    6194:	9300      	str	r3, [sp, #0]
    6196:	9505      	str	r5, [sp, #20]
    6198:	79a3      	ldrb	r3, [r4, #6]
    619a:	4a0b      	ldr	r2, [pc, #44]	; (61c8 <bt_addr_le_str_real+0x64>)
    619c:	480b      	ldr	r0, [pc, #44]	; (61cc <bt_addr_le_str_real+0x68>)
    619e:	211b      	movs	r1, #27
    61a0:	f7fd f8a8 	bl	32f4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    61a4:	4809      	ldr	r0, [pc, #36]	; (61cc <bt_addr_le_str_real+0x68>)
    61a6:	b00b      	add	sp, #44	; 0x2c
    61a8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    61aa:	4909      	ldr	r1, [pc, #36]	; (61d0 <bt_addr_le_str_real+0x6c>)
    61ac:	e7e6      	b.n	617c <bt_addr_le_str_real+0x18>
		strcpy(type, "public id");
    61ae:	4909      	ldr	r1, [pc, #36]	; (61d4 <bt_addr_le_str_real+0x70>)
    61b0:	e7e4      	b.n	617c <bt_addr_le_str_real+0x18>
		strcpy(type, "random id");
    61b2:	4909      	ldr	r1, [pc, #36]	; (61d8 <bt_addr_le_str_real+0x74>)
    61b4:	e7e2      	b.n	617c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    61b6:	4a09      	ldr	r2, [pc, #36]	; (61dc <bt_addr_le_str_real+0x78>)
    61b8:	210a      	movs	r1, #10
    61ba:	4628      	mov	r0, r5
    61bc:	f7fd f89a 	bl	32f4 <snprintk>
		break;
    61c0:	e7df      	b.n	6182 <bt_addr_le_str_real+0x1e>
    61c2:	bf00      	nop
    61c4:	000249a8 	.word	0x000249a8
    61c8:	000249ca 	.word	0x000249ca
    61cc:	200021fa 	.word	0x200021fa
    61d0:	000249af 	.word	0x000249af
    61d4:	000249b6 	.word	0x000249b6
    61d8:	000249c0 	.word	0x000249c0
    61dc:	00027687 	.word	0x00027687

000061e0 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    61e0:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
    61e4:	4c69      	ldr	r4, [pc, #420]	; (638c <ecc_thread+0x1ac>)
		BT_ERR("public key is not valid (ret %d)", ret);
    61e6:	4b6a      	ldr	r3, [pc, #424]	; (6390 <ecc_thread+0x1b0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    61e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 63ac <ecc_thread+0x1cc>
    61ec:	1ae4      	subs	r4, r4, r3
    61ee:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    61f2:	4645      	mov	r5, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    61f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    61f8:	4866      	ldr	r0, [pc, #408]	; (6394 <ecc_thread+0x1b4>)
    61fa:	f016 f85f 	bl	1c2bc <z_impl_k_sem_take>
    61fe:	f3bf 8f5b 	dmb	ish
    6202:	f8d8 3000 	ldr.w	r3, [r8]
    6206:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    620a:	f013 0901 	ands.w	r9, r3, #1
    620e:	d061      	beq.n	62d4 <ecc_thread+0xf4>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    6210:	f8df b190 	ldr.w	fp, [pc, #400]	; 63a4 <ecc_thread+0x1c4>
    6214:	f8df 9198 	ldr.w	r9, [pc, #408]	; 63b0 <ecc_thread+0x1d0>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    6218:	f8df a198 	ldr.w	sl, [pc, #408]	; 63b4 <ecc_thread+0x1d4>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    621c:	485e      	ldr	r0, [pc, #376]	; (6398 <ecc_thread+0x1b8>)
    621e:	465a      	mov	r2, fp
    6220:	4649      	mov	r1, r9
    6222:	f016 ffed 	bl	1d200 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    6226:	2800      	cmp	r0, #0
    6228:	d141      	bne.n	62ae <ecc_thread+0xce>
			BT_ERR("Failed to create ECC public/private pair");
    622a:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    622e:	f043 0301 	orr.w	r3, r3, #1
    6232:	f363 0707 	bfi	r7, r3, #0, #8
    6236:	f364 178f 	bfi	r7, r4, #6, #10
    623a:	4639      	mov	r1, r7
    623c:	4857      	ldr	r0, [pc, #348]	; (639c <ecc_thread+0x1bc>)
    623e:	f018 f900 	bl	1e442 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    6242:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6246:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    624a:	2001      	movs	r0, #1
    624c:	f002 fa46 	bl	86dc <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6250:	f100 0b08 	add.w	fp, r0, #8
    6254:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6256:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6258:	4658      	mov	r0, fp
    625a:	f01c f996 	bl	2258a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    625e:	233e      	movs	r3, #62	; 0x3e
    6260:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6262:	2342      	movs	r3, #66	; 0x42
    6264:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    6266:	2101      	movs	r1, #1
    6268:	4658      	mov	r0, fp
    626a:	f01c f98e 	bl	2258a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    626e:	2308      	movs	r3, #8
    6270:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    6272:	2141      	movs	r1, #65	; 0x41
    6274:	4658      	mov	r0, fp
    6276:	f01c f988 	bl	2258a <net_buf_simple_add>
    627a:	4683      	mov	fp, r0
	evt->status = status;
    627c:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    6280:	f1ba 0f00 	cmp.w	sl, #0
    6284:	d01d      	beq.n	62c2 <ecc_thread+0xe2>
		(void)memset(evt->key, 0, sizeof(evt->key));
    6286:	2240      	movs	r2, #64	; 0x40
    6288:	2100      	movs	r1, #0
    628a:	f019 f9e7 	bl	1f65c <memset>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    628e:	f3bf 8f5b 	dmb	ish
    6292:	e855 3f00 	ldrex	r3, [r5]
    6296:	f023 0301 	bic.w	r3, r3, #1
    629a:	e845 3200 	strex	r2, r3, [r5]
    629e:	2a00      	cmp	r2, #0
    62a0:	d1f7      	bne.n	6292 <ecc_thread+0xb2>
    62a2:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    62a6:	4648      	mov	r0, r9
	bt_recv(buf);
    62a8:	f001 fdca 	bl	7e40 <bt_recv>
    62ac:	e7a2      	b.n	61f4 <ecc_thread+0x14>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    62ae:	2220      	movs	r2, #32
    62b0:	4651      	mov	r1, sl
    62b2:	4648      	mov	r0, r9
    62b4:	f019 f981 	bl	1f5ba <memcmp>
    62b8:	2800      	cmp	r0, #0
    62ba:	d0af      	beq.n	621c <ecc_thread+0x3c>
	return 0;
    62bc:	f04f 0a00 	mov.w	sl, #0
    62c0:	e7c1      	b.n	6246 <ecc_thread+0x66>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    62c2:	4935      	ldr	r1, [pc, #212]	; (6398 <ecc_thread+0x1b8>)
    62c4:	f019 faa8 	bl	1f818 <sys_memcpy_swap.constprop.2>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    62c8:	4935      	ldr	r1, [pc, #212]	; (63a0 <ecc_thread+0x1c0>)
    62ca:	f10b 0021 	add.w	r0, fp, #33	; 0x21
    62ce:	f019 faa3 	bl	1f818 <sys_memcpy_swap.constprop.2>
    62d2:	e7dc      	b.n	628e <ecc_thread+0xae>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    62d4:	f3bf 8f5b 	dmb	ish
    62d8:	f8d8 3000 	ldr.w	r3, [r8]
    62dc:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    62e0:	079b      	lsls	r3, r3, #30
    62e2:	d587      	bpl.n	61f4 <ecc_thread+0x14>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    62e4:	492f      	ldr	r1, [pc, #188]	; (63a4 <ecc_thread+0x1c4>)
    62e6:	482c      	ldr	r0, [pc, #176]	; (6398 <ecc_thread+0x1b8>)
    62e8:	f017 fe5a 	bl	1dfa0 <uECC_valid_public_key>
	if (ret < 0) {
    62ec:	1e01      	subs	r1, r0, #0
    62ee:	da3e      	bge.n	636e <ecc_thread+0x18e>
		BT_ERR("public key is not valid (ret %d)", ret);
    62f0:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    62f4:	f043 0301 	orr.w	r3, r3, #1
    62f8:	f363 0607 	bfi	r6, r3, #0, #8
    62fc:	f364 168f 	bfi	r6, r4, #6, #10
    6300:	4632      	mov	r2, r6
    6302:	4829      	ldr	r0, [pc, #164]	; (63a8 <ecc_thread+0x1c8>)
    6304:	f018 f8aa 	bl	1e45c <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    630c:	2001      	movs	r0, #1
    630e:	f002 f9e5 	bl	86dc <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6312:	f100 0b08 	add.w	fp, r0, #8
    6316:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6318:	4682      	mov	sl, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    631a:	4658      	mov	r0, fp
    631c:	f01c f935 	bl	2258a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    6320:	233e      	movs	r3, #62	; 0x3e
    6322:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6324:	2322      	movs	r3, #34	; 0x22
    6326:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    6328:	2101      	movs	r1, #1
    632a:	4658      	mov	r0, fp
    632c:	f01c f92d 	bl	2258a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    6330:	2309      	movs	r3, #9
    6332:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    6334:	2121      	movs	r1, #33	; 0x21
    6336:	4658      	mov	r0, fp
    6338:	f01c f927 	bl	2258a <net_buf_simple_add>
    633c:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    633e:	3001      	adds	r0, #1
    6340:	f1b9 0f00 	cmp.w	r9, #0
    6344:	d11c      	bne.n	6380 <ecc_thread+0x1a0>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    6346:	221f      	movs	r2, #31
    6348:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    634a:	4649      	mov	r1, r9
    634c:	2220      	movs	r2, #32
    634e:	f019 f985 	bl	1f65c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6352:	f3bf 8f5b 	dmb	ish
    6356:	e855 3f00 	ldrex	r3, [r5]
    635a:	f023 0302 	bic.w	r3, r3, #2
    635e:	e845 3200 	strex	r2, r3, [r5]
    6362:	2a00      	cmp	r2, #0
    6364:	d1f7      	bne.n	6356 <ecc_thread+0x176>
    6366:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    636a:	4650      	mov	r0, sl
    636c:	e79c      	b.n	62a8 <ecc_thread+0xc8>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    636e:	4a0a      	ldr	r2, [pc, #40]	; (6398 <ecc_thread+0x1b8>)
    6370:	4b0c      	ldr	r3, [pc, #48]	; (63a4 <ecc_thread+0x1c4>)
    6372:	f1a2 0120 	sub.w	r1, r2, #32
    6376:	4610      	mov	r0, r2
    6378:	f016 ff90 	bl	1d29c <uECC_shared_secret>
    637c:	4681      	mov	r9, r0
    637e:	e7c3      	b.n	6308 <ecc_thread+0x128>
		evt->status = 0;
    6380:	2200      	movs	r2, #0
    6382:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    6384:	4904      	ldr	r1, [pc, #16]	; (6398 <ecc_thread+0x1b8>)
    6386:	f019 fa47 	bl	1f818 <sys_memcpy_swap.constprop.2>
    638a:	e7e2      	b.n	6352 <ecc_thread+0x172>
    638c:	00023464 	.word	0x00023464
    6390:	000233ec 	.word	0x000233ec
    6394:	20008084 	.word	0x20008084
    6398:	20002235 	.word	0x20002235
    639c:	00024a05 	.word	0x00024a05
    63a0:	20002255 	.word	0x20002255
    63a4:	00023838 	.word	0x00023838
    63a8:	00024a2e 	.word	0x00024a2e
    63ac:	20000534 	.word	0x20000534
    63b0:	20002215 	.word	0x20002215
    63b4:	000238e8 	.word	0x000238e8

000063b8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    63b8:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    63ba:	7d05      	ldrb	r5, [r0, #20]
    63bc:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    63be:	b9ad      	cbnz	r5, 63ec <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    63c0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    63c2:	881a      	ldrh	r2, [r3, #0]
    63c4:	f242 0125 	movw	r1, #8229	; 0x2025
    63c8:	428a      	cmp	r2, r1
    63ca:	d017      	beq.n	63fc <bt_hci_ecc_send+0x44>
    63cc:	f242 0126 	movw	r1, #8230	; 0x2026
    63d0:	428a      	cmp	r2, r1
    63d2:	d03c      	beq.n	644e <bt_hci_ecc_send+0x96>
    63d4:	f242 0101 	movw	r1, #8193	; 0x2001
    63d8:	428a      	cmp	r2, r1
    63da:	d107      	bne.n	63ec <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    63dc:	78da      	ldrb	r2, [r3, #3]
    63de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    63e2:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    63e4:	791a      	ldrb	r2, [r3, #4]
    63e6:	f022 0201 	bic.w	r2, r2, #1
    63ea:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    63ec:	4b32      	ldr	r3, [pc, #200]	; (64b8 <bt_hci_ecc_send+0x100>)
    63ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    63f2:	4620      	mov	r0, r4
    63f4:	691b      	ldr	r3, [r3, #16]
}
    63f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    63fa:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    63fc:	2103      	movs	r1, #3
    63fe:	3008      	adds	r0, #8
    6400:	f01c f930 	bl	22664 <net_buf_simple_pull>
	net_buf_unref(buf);
    6404:	4620      	mov	r0, r4
    6406:	f014 fc15 	bl	1ac34 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    640a:	f3bf 8f5b 	dmb	ish
    640e:	4b2b      	ldr	r3, [pc, #172]	; (64bc <bt_hci_ecc_send+0x104>)
    6410:	681a      	ldr	r2, [r3, #0]
    6412:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    6416:	0790      	lsls	r0, r2, #30
    6418:	d507      	bpl.n	642a <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    641a:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    641c:	4629      	mov	r1, r5
    641e:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    6422:	f019 f9d8 	bl	1f7d6 <send_cmd_status>
}
    6426:	2000      	movs	r0, #0
    6428:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    642a:	f3bf 8f5b 	dmb	ish
    642e:	e853 2f00 	ldrex	r2, [r3]
    6432:	f042 0101 	orr.w	r1, r2, #1
    6436:	e843 1000 	strex	r0, r1, [r3]
    643a:	2800      	cmp	r0, #0
    643c:	d1f7      	bne.n	642e <bt_hci_ecc_send+0x76>
    643e:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    6442:	07d1      	lsls	r1, r2, #31
    6444:	d4e9      	bmi.n	641a <bt_hci_ecc_send+0x62>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    6446:	481e      	ldr	r0, [pc, #120]	; (64c0 <bt_hci_ecc_send+0x108>)
    6448:	f015 ff0e 	bl	1c268 <z_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
    644c:	e7e6      	b.n	641c <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    644e:	2103      	movs	r1, #3
    6450:	3008      	adds	r0, #8
    6452:	f01c f907 	bl	22664 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6456:	f3bf 8f5b 	dmb	ish
    645a:	4b18      	ldr	r3, [pc, #96]	; (64bc <bt_hci_ecc_send+0x104>)
    645c:	681a      	ldr	r2, [r3, #0]
    645e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    6462:	07d2      	lsls	r2, r2, #31
    6464:	d507      	bpl.n	6476 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6466:	250c      	movs	r5, #12
	net_buf_unref(buf);
    6468:	4620      	mov	r0, r4
    646a:	f014 fbe3 	bl	1ac34 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    646e:	4629      	mov	r1, r5
    6470:	f242 0026 	movw	r0, #8230	; 0x2026
    6474:	e7d5      	b.n	6422 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    6476:	89a2      	ldrh	r2, [r4, #12]
    6478:	2a3f      	cmp	r2, #63	; 0x3f
    647a:	d91b      	bls.n	64b4 <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    647c:	f3bf 8f5b 	dmb	ish
    6480:	e853 2f00 	ldrex	r2, [r3]
    6484:	f042 0102 	orr.w	r1, r2, #2
    6488:	e843 1000 	strex	r0, r1, [r3]
    648c:	2800      	cmp	r0, #0
    648e:	d1f7      	bne.n	6480 <bt_hci_ecc_send+0xc8>
    6490:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    6494:	0793      	lsls	r3, r2, #30
    6496:	d4e6      	bmi.n	6466 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    6498:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    649a:	480a      	ldr	r0, [pc, #40]	; (64c4 <bt_hci_ecc_send+0x10c>)
    649c:	4631      	mov	r1, r6
    649e:	f019 f9bb 	bl	1f818 <sys_memcpy_swap.constprop.2>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    64a2:	f106 0120 	add.w	r1, r6, #32
    64a6:	4808      	ldr	r0, [pc, #32]	; (64c8 <bt_hci_ecc_send+0x110>)
    64a8:	f019 f9b6 	bl	1f818 <sys_memcpy_swap.constprop.2>
    64ac:	4804      	ldr	r0, [pc, #16]	; (64c0 <bt_hci_ecc_send+0x108>)
    64ae:	f015 fedb 	bl	1c268 <z_impl_k_sem_give>
	status = BT_HCI_ERR_SUCCESS;
    64b2:	e7d9      	b.n	6468 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    64b4:	2512      	movs	r5, #18
    64b6:	e7d7      	b.n	6468 <bt_hci_ecc_send+0xb0>
    64b8:	200070f8 	.word	0x200070f8
    64bc:	20000534 	.word	0x20000534
    64c0:	20008084 	.word	0x20008084
    64c4:	20002235 	.word	0x20002235
    64c8:	20002255 	.word	0x20002255

000064cc <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    64cc:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    64ce:	4c0c      	ldr	r4, [pc, #48]	; (6500 <bt_hci_ecc_init+0x34>)
    64d0:	490c      	ldr	r1, [pc, #48]	; (6504 <bt_hci_ecc_init+0x38>)
    64d2:	b086      	sub	sp, #24
    64d4:	2300      	movs	r3, #0
    64d6:	220a      	movs	r2, #10
    64d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
    64dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
    64e0:	e9cd 3300 	strd	r3, r3, [sp]
    64e4:	f240 424c 	movw	r2, #1100	; 0x44c
    64e8:	4b07      	ldr	r3, [pc, #28]	; (6508 <bt_hci_ecc_init+0x3c>)
    64ea:	4620      	mov	r0, r4
    64ec:	f015 ff72 	bl	1c3d4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    64f0:	4906      	ldr	r1, [pc, #24]	; (650c <bt_hci_ecc_init+0x40>)
    64f2:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    64f4:	b006      	add	sp, #24
    64f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    64fa:	f01c bcbf 	b.w	22e7c <z_impl_k_thread_name_set>
    64fe:	bf00      	nop
    6500:	200004c8 	.word	0x200004c8
    6504:	20002648 	.word	0x20002648
    6508:	000061e1 	.word	0x000061e1
    650c:	000249fe 	.word	0x000249fe

00006510 <export>:
}

static int export(int (*export_func)(const char *name, void *val,
				     size_t val_len))

{
    6510:	b570      	push	{r4, r5, r6, lr}
	const struct bt_settings_handler *h;

	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    6512:	4c06      	ldr	r4, [pc, #24]	; (652c <export+0x1c>)
    6514:	4d06      	ldr	r5, [pc, #24]	; (6530 <export+0x20>)
{
    6516:	4606      	mov	r6, r0
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    6518:	42ac      	cmp	r4, r5
    651a:	d301      	bcc.n	6520 <export+0x10>
			h->export(export_func);
		}
	}

	return 0;
}
    651c:	2000      	movs	r0, #0
    651e:	bd70      	pop	{r4, r5, r6, pc}
		if (h->export) {
    6520:	68e3      	ldr	r3, [r4, #12]
    6522:	b10b      	cbz	r3, 6528 <export+0x18>
			h->export(export_func);
    6524:	4630      	mov	r0, r6
    6526:	4798      	blx	r3
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    6528:	3410      	adds	r4, #16
    652a:	e7f5      	b.n	6518 <export+0x8>
    652c:	000233bc 	.word	0x000233bc
    6530:	000233ec 	.word	0x000233ec

00006534 <save_id>:
			  ID_DATA_LEN(bt_dev.id_addr));
    6534:	4903      	ldr	r1, [pc, #12]	; (6544 <save_id+0x10>)
	settings_save_one("bt/id", &bt_dev.id_addr,
    6536:	4804      	ldr	r0, [pc, #16]	; (6548 <save_id+0x14>)
    6538:	79ca      	ldrb	r2, [r1, #7]
    653a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    653e:	f7fe b821 	b.w	4584 <settings_save_one>
    6542:	bf00      	nop
    6544:	200070f8 	.word	0x200070f8
    6548:	00024b0a 	.word	0x00024b0a

0000654c <commit>:
{
    654c:	b538      	push	{r3, r4, r5, lr}
	if (!bt_dev.id_count) {
    654e:	4b12      	ldr	r3, [pc, #72]	; (6598 <commit+0x4c>)
    6550:	79db      	ldrb	r3, [r3, #7]
    6552:	b13b      	cbz	r3, 6564 <commit+0x18>
{
    6554:	4c11      	ldr	r4, [pc, #68]	; (659c <commit+0x50>)
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    6556:	4d12      	ldr	r5, [pc, #72]	; (65a0 <commit+0x54>)
    6558:	42ac      	cmp	r4, r5
    655a:	d318      	bcc.n	658e <commit+0x42>
	bt_dev_show_info();
    655c:	f001 fbf2 	bl	7d44 <bt_dev_show_info>
	return 0;
    6560:	2400      	movs	r4, #0
    6562:	e012      	b.n	658a <commit+0x3e>
		err = bt_setup_id_addr();
    6564:	f001 fe58 	bl	8218 <bt_setup_id_addr>
		if (err) {
    6568:	4604      	mov	r4, r0
    656a:	2800      	cmp	r0, #0
    656c:	d0f2      	beq.n	6554 <commit+0x8>
			BT_ERR("Unable to setup an identity address");
    656e:	2301      	movs	r3, #1
    6570:	f04f 0100 	mov.w	r1, #0
    6574:	f363 0107 	bfi	r1, r3, #0, #8
    6578:	4a0a      	ldr	r2, [pc, #40]	; (65a4 <commit+0x58>)
    657a:	4b0b      	ldr	r3, [pc, #44]	; (65a8 <commit+0x5c>)
    657c:	480b      	ldr	r0, [pc, #44]	; (65ac <commit+0x60>)
    657e:	1a9b      	subs	r3, r3, r2
    6580:	08db      	lsrs	r3, r3, #3
    6582:	f363 118f 	bfi	r1, r3, #6, #10
    6586:	f017 ff5c 	bl	1e442 <log_0>
}
    658a:	4620      	mov	r0, r4
    658c:	bd38      	pop	{r3, r4, r5, pc}
		if (h->commit) {
    658e:	68a3      	ldr	r3, [r4, #8]
    6590:	b103      	cbz	r3, 6594 <commit+0x48>
			h->commit();
    6592:	4798      	blx	r3
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    6594:	3410      	adds	r4, #16
    6596:	e7df      	b.n	6558 <commit+0xc>
    6598:	200070f8 	.word	0x200070f8
    659c:	000233bc 	.word	0x000233bc
    65a0:	000233ec 	.word	0x000233ec
    65a4:	000233ec 	.word	0x000233ec
    65a8:	000234dc 	.word	0x000234dc
    65ac:	00024ae6 	.word	0x00024ae6

000065b0 <set>:
	if (argc > 1) {
    65b0:	2801      	cmp	r0, #1
{
    65b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65b6:	4607      	mov	r7, r0
    65b8:	460d      	mov	r5, r1
    65ba:	4616      	mov	r6, r2
	if (argc > 1) {
    65bc:	dc31      	bgt.n	6622 <set+0x72>
	if (!strcmp(argv[0], "id")) {
    65be:	492c      	ldr	r1, [pc, #176]	; (6670 <set+0xc0>)
    65c0:	6828      	ldr	r0, [r5, #0]
    65c2:	f018 ffee 	bl	1f5a2 <strcmp>
    65c6:	b9b0      	cbnz	r0, 65f6 <set+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65c8:	f3bf 8f5b 	dmb	ish
    65cc:	4d29      	ldr	r5, [pc, #164]	; (6674 <set+0xc4>)
    65ce:	682c      	ldr	r4, [r5, #0]
    65d0:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    65d4:	f3c4 0480 	ubfx	r4, r4, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    65d8:	b33c      	cbz	r4, 662a <set+0x7a>
			BT_WARN("Ignoring identities stored in flash");
    65da:	2302      	movs	r3, #2
    65dc:	f04f 0100 	mov.w	r1, #0
    65e0:	f363 0107 	bfi	r1, r3, #0, #8
    65e4:	4a24      	ldr	r2, [pc, #144]	; (6678 <set+0xc8>)
    65e6:	4b25      	ldr	r3, [pc, #148]	; (667c <set+0xcc>)
    65e8:	4825      	ldr	r0, [pc, #148]	; (6680 <set+0xd0>)
    65ea:	1a9b      	subs	r3, r3, r2
    65ec:	08db      	lsrs	r3, r3, #3
    65ee:	f363 118f 	bfi	r1, r3, #6, #10
    65f2:	f017 ff26 	bl	1e442 <log_0>
	return 0;
    65f6:	2400      	movs	r4, #0
    65f8:	e010      	b.n	661c <set+0x6c>
			if (!strcmp(argv[0], h->name)) {
    65fa:	6821      	ldr	r1, [r4, #0]
    65fc:	6828      	ldr	r0, [r5, #0]
    65fe:	f018 ffd0 	bl	1f5a2 <strcmp>
    6602:	b930      	cbnz	r0, 6612 <set+0x62>
				return h->set(argc, argv, value_ctx);
    6604:	6863      	ldr	r3, [r4, #4]
    6606:	4632      	mov	r2, r6
    6608:	1d29      	adds	r1, r5, #4
    660a:	1e78      	subs	r0, r7, #1
}
    660c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return h->set(argc, argv, value_ctx);
    6610:	4718      	bx	r3
		for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    6612:	3410      	adds	r4, #16
    6614:	4544      	cmp	r4, r8
    6616:	d3f0      	bcc.n	65fa <set+0x4a>
		return -ENOENT;
    6618:	f06f 0401 	mvn.w	r4, #1
}
    661c:	4620      	mov	r0, r4
    661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    6622:	4c18      	ldr	r4, [pc, #96]	; (6684 <set+0xd4>)
    6624:	f8df 8064 	ldr.w	r8, [pc, #100]	; 668c <set+0xdc>
    6628:	e7f4      	b.n	6614 <set+0x64>
		len = settings_val_read_cb(value_ctx, &bt_dev.id_addr, len);
    662a:	3d70      	subs	r5, #112	; 0x70
    662c:	2207      	movs	r2, #7
    662e:	4629      	mov	r1, r5
    6630:	4630      	mov	r0, r6
    6632:	f018 fe5a 	bl	1f2ea <settings_val_read_cb>
		if (len < sizeof(bt_dev.id_addr[0])) {
    6636:	2806      	cmp	r0, #6
    6638:	d814      	bhi.n	6664 <set+0xb4>
				BT_ERR("Invalid length ID address in storage");
    663a:	2301      	movs	r3, #1
    663c:	f04f 0100 	mov.w	r1, #0
    6640:	4a0d      	ldr	r2, [pc, #52]	; (6678 <set+0xc8>)
    6642:	4811      	ldr	r0, [pc, #68]	; (6688 <set+0xd8>)
    6644:	f363 0107 	bfi	r1, r3, #0, #8
    6648:	4b0c      	ldr	r3, [pc, #48]	; (667c <set+0xcc>)
    664a:	1a9b      	subs	r3, r3, r2
    664c:	08db      	lsrs	r3, r3, #3
    664e:	f363 118f 	bfi	r1, r3, #6, #10
    6652:	f017 fef6 	bl	1e442 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    6656:	2207      	movs	r2, #7
    6658:	4621      	mov	r1, r4
    665a:	4628      	mov	r0, r5
    665c:	f018 fffe 	bl	1f65c <memset>
			bt_dev.id_count = 0U;
    6660:	71ec      	strb	r4, [r5, #7]
    6662:	e7db      	b.n	661c <set+0x6c>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    6664:	2307      	movs	r3, #7
    6666:	fbb0 f0f3 	udiv	r0, r0, r3
    666a:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    666c:	e7d6      	b.n	661c <set+0x6c>
    666e:	bf00      	nop
    6670:	000249bd 	.word	0x000249bd
    6674:	20007168 	.word	0x20007168
    6678:	000233ec 	.word	0x000233ec
    667c:	000234dc 	.word	0x000234dc
    6680:	00024b10 	.word	0x00024b10
    6684:	000233bc 	.word	0x000233bc
    6688:	00024b34 	.word	0x00024b34
    668c:	000233ec 	.word	0x000233ec

00006690 <bt_settings_encode_key>:
{
    6690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6694:	b088      	sub	sp, #32
    6696:	799c      	ldrb	r4, [r3, #6]
    6698:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    669c:	795d      	ldrb	r5, [r3, #5]
    669e:	791e      	ldrb	r6, [r3, #4]
    66a0:	78df      	ldrb	r7, [r3, #3]
    66a2:	f893 c002 	ldrb.w	ip, [r3, #2]
    66a6:	f893 e001 	ldrb.w	lr, [r3, #1]
    66aa:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    66ac:	f1b8 0f00 	cmp.w	r8, #0
    66b0:	d00e      	beq.n	66d0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    66b2:	e9cd 3806 	strd	r3, r8, [sp, #24]
    66b6:	e9cd ce04 	strd	ip, lr, [sp, #16]
    66ba:	4613      	mov	r3, r2
    66bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    66c0:	e9cd 4500 	strd	r4, r5, [sp]
    66c4:	4a08      	ldr	r2, [pc, #32]	; (66e8 <bt_settings_encode_key+0x58>)
    66c6:	f7fc fe15 	bl	32f4 <snprintk>
}
    66ca:	b008      	add	sp, #32
    66cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    66d0:	e9cd e305 	strd	lr, r3, [sp, #20]
    66d4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    66d8:	4613      	mov	r3, r2
    66da:	e9cd 5601 	strd	r5, r6, [sp, #4]
    66de:	9400      	str	r4, [sp, #0]
    66e0:	4a02      	ldr	r2, [pc, #8]	; (66ec <bt_settings_encode_key+0x5c>)
    66e2:	f7fc fe07 	bl	32f4 <snprintk>
}
    66e6:	e7f0      	b.n	66ca <bt_settings_encode_key+0x3a>
    66e8:	00024a5a 	.word	0x00024a5a
    66ec:	00024a7e 	.word	0x00024a7e

000066f0 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    66f0:	4909      	ldr	r1, [pc, #36]	; (6718 <bt_settings_save_id+0x28>)
    66f2:	f3bf 8f5b 	dmb	ish
    66f6:	e851 3f00 	ldrex	r3, [r1]
    66fa:	f043 0201 	orr.w	r2, r3, #1
    66fe:	e841 2000 	strex	r0, r2, [r1]
    6702:	2800      	cmp	r0, #0
    6704:	d1f7      	bne.n	66f6 <bt_settings_save_id+0x6>
    6706:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    670a:	07db      	lsls	r3, r3, #31
    670c:	d403      	bmi.n	6716 <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    670e:	3908      	subs	r1, #8
    6710:	4802      	ldr	r0, [pc, #8]	; (671c <bt_settings_save_id+0x2c>)
    6712:	f01c ba38 	b.w	22b86 <k_queue_append>
}
    6716:	4770      	bx	lr
    6718:	200076d4 	.word	0x200076d4
    671c:	20001c74 	.word	0x20001c74

00006720 <bt_settings_init>:
	.h_commit = commit,
	.h_export = export,
};

int bt_settings_init(void)
{
    6720:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    6722:	f7fe f81b 	bl	475c <settings_subsys_init>
	if (err) {
    6726:	4604      	mov	r4, r0
    6728:	b180      	cbz	r0, 674c <bt_settings_init+0x2c>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    672a:	2301      	movs	r3, #1
    672c:	f04f 0200 	mov.w	r2, #0
    6730:	f363 0207 	bfi	r2, r3, #0, #8
    6734:	490f      	ldr	r1, [pc, #60]	; (6774 <bt_settings_init+0x54>)
    6736:	4b10      	ldr	r3, [pc, #64]	; (6778 <bt_settings_init+0x58>)
    6738:	1a5b      	subs	r3, r3, r1
    673a:	08db      	lsrs	r3, r3, #3
    673c:	4601      	mov	r1, r0
    673e:	480f      	ldr	r0, [pc, #60]	; (677c <bt_settings_init+0x5c>)
    6740:	f363 128f 	bfi	r2, r3, #6, #10
		return err;
	}

	err = settings_register(&bt_settings);
	if (err) {
		BT_ERR("settings_register failed (err %d)", err);
    6744:	f017 fe8a 	bl	1e45c <log_1>
		return err;
	}

	return 0;
}
    6748:	4620      	mov	r0, r4
    674a:	bd10      	pop	{r4, pc}
	err = settings_register(&bt_settings);
    674c:	480c      	ldr	r0, [pc, #48]	; (6780 <bt_settings_init+0x60>)
    674e:	f7fd ffcb 	bl	46e8 <settings_register>
	if (err) {
    6752:	4604      	mov	r4, r0
    6754:	2800      	cmp	r0, #0
    6756:	d0f7      	beq.n	6748 <bt_settings_init+0x28>
		BT_ERR("settings_register failed (err %d)", err);
    6758:	2301      	movs	r3, #1
    675a:	f04f 0200 	mov.w	r2, #0
    675e:	f363 0207 	bfi	r2, r3, #0, #8
    6762:	4904      	ldr	r1, [pc, #16]	; (6774 <bt_settings_init+0x54>)
    6764:	4b04      	ldr	r3, [pc, #16]	; (6778 <bt_settings_init+0x58>)
    6766:	1a5b      	subs	r3, r3, r1
    6768:	08db      	lsrs	r3, r3, #3
    676a:	4601      	mov	r1, r0
    676c:	f363 128f 	bfi	r2, r3, #6, #10
    6770:	4804      	ldr	r0, [pc, #16]	; (6784 <bt_settings_init+0x64>)
    6772:	e7e7      	b.n	6744 <bt_settings_init+0x24>
    6774:	000233ec 	.word	0x000233ec
    6778:	000234dc 	.word	0x000234dc
    677c:	00024a9f 	.word	0x00024a9f
    6780:	200076b4 	.word	0x200076b4
    6784:	00024ac4 	.word	0x00024ac4

00006788 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    6788:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    678a:	7802      	ldrb	r2, [r0, #0]
    678c:	2a01      	cmp	r2, #1
{
    678e:	4604      	mov	r4, r0
    6790:	460b      	mov	r3, r1
	switch (src->type) {
    6792:	d017      	beq.n	67c4 <uuid_to_uuid128+0x3c>
    6794:	b11a      	cbz	r2, 679e <uuid_to_uuid128+0x16>
    6796:	2a02      	cmp	r2, #2
    6798:	d02c      	beq.n	67f4 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    679a:	bcf0      	pop	{r4, r5, r6, r7}
    679c:	4770      	bx	lr
		*dst = uuid128_base;
    679e:	4a18      	ldr	r2, [pc, #96]	; (6800 <uuid_to_uuid128+0x78>)
    67a0:	460d      	mov	r5, r1
    67a2:	f102 0710 	add.w	r7, r2, #16
    67a6:	6810      	ldr	r0, [r2, #0]
    67a8:	6851      	ldr	r1, [r2, #4]
    67aa:	462e      	mov	r6, r5
    67ac:	c603      	stmia	r6!, {r0, r1}
    67ae:	3208      	adds	r2, #8
    67b0:	42ba      	cmp	r2, r7
    67b2:	4635      	mov	r5, r6
    67b4:	d1f7      	bne.n	67a6 <uuid_to_uuid128+0x1e>
    67b6:	7812      	ldrb	r2, [r2, #0]
    67b8:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    67ba:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    67bc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    67be:	0a12      	lsrs	r2, r2, #8
    67c0:	739a      	strb	r2, [r3, #14]
    67c2:	e7ea      	b.n	679a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    67c4:	4a0e      	ldr	r2, [pc, #56]	; (6800 <uuid_to_uuid128+0x78>)
    67c6:	460d      	mov	r5, r1
    67c8:	f102 0710 	add.w	r7, r2, #16
    67cc:	6810      	ldr	r0, [r2, #0]
    67ce:	6851      	ldr	r1, [r2, #4]
    67d0:	462e      	mov	r6, r5
    67d2:	c603      	stmia	r6!, {r0, r1}
    67d4:	3208      	adds	r2, #8
    67d6:	42ba      	cmp	r2, r7
    67d8:	4635      	mov	r5, r6
    67da:	d1f7      	bne.n	67cc <uuid_to_uuid128+0x44>
    67dc:	7812      	ldrb	r2, [r2, #0]
    67de:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    67e0:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    67e2:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    67e4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    67e8:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    67ea:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    67ec:	0a12      	lsrs	r2, r2, #8
    67ee:	7399      	strb	r1, [r3, #14]
    67f0:	741a      	strb	r2, [r3, #16]
    67f2:	e7d2      	b.n	679a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    67f4:	4601      	mov	r1, r0
    67f6:	2211      	movs	r2, #17
    67f8:	4618      	mov	r0, r3
}
    67fa:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    67fc:	f018 bf04 	b.w	1f608 <memcpy>
    6800:	00024b85 	.word	0x00024b85

00006804 <bt_uuid_to_str>:
	return -EINVAL;
}

#if defined(CONFIG_BT_DEBUG)
void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
    6804:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t tmp1, tmp5;
	u16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
    6806:	7805      	ldrb	r5, [r0, #0]
    6808:	2d01      	cmp	r5, #1
{
    680a:	b08b      	sub	sp, #44	; 0x2c
    680c:	4604      	mov	r4, r0
    680e:	460e      	mov	r6, r1
    6810:	4617      	mov	r7, r2
	switch (uuid->type) {
    6812:	d00f      	beq.n	6834 <bt_uuid_to_str+0x30>
    6814:	b135      	cbz	r5, 6824 <bt_uuid_to_str+0x20>
    6816:	2d02      	cmp	r5, #2
    6818:	d00e      	beq.n	6838 <bt_uuid_to_str+0x34>

		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
			 tmp5, tmp4, tmp3, tmp2, tmp1, tmp0);
		break;
	default:
		(void)memset(str, 0, len);
    681a:	2100      	movs	r1, #0
    681c:	4630      	mov	r0, r6
    681e:	f018 ff1d 	bl	1f65c <memset>
		return;
    6822:	e005      	b.n	6830 <bt_uuid_to_str+0x2c>
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
    6824:	8843      	ldrh	r3, [r0, #2]
		snprintk(str, len, "%04x", BT_UUID_32(uuid)->val);
    6826:	4a20      	ldr	r2, [pc, #128]	; (68a8 <bt_uuid_to_str+0xa4>)
    6828:	4639      	mov	r1, r7
    682a:	4630      	mov	r0, r6
    682c:	f7fc fd62 	bl	32f4 <snprintk>
	}
}
    6830:	b00b      	add	sp, #44	; 0x2c
    6832:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintk(str, len, "%04x", BT_UUID_32(uuid)->val);
    6834:	6843      	ldr	r3, [r0, #4]
    6836:	e7f6      	b.n	6826 <bt_uuid_to_str+0x22>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
    6838:	462a      	mov	r2, r5
    683a:	1c41      	adds	r1, r0, #1
    683c:	a806      	add	r0, sp, #24
    683e:	f018 fee3 	bl	1f608 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
    6842:	1ce1      	adds	r1, r4, #3
    6844:	2204      	movs	r2, #4
    6846:	a808      	add	r0, sp, #32
    6848:	f018 fede 	bl	1f608 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
    684c:	462a      	mov	r2, r5
    684e:	1de1      	adds	r1, r4, #7
    6850:	f10d 001a 	add.w	r0, sp, #26
    6854:	f018 fed8 	bl	1f608 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
    6858:	462a      	mov	r2, r5
    685a:	f104 0109 	add.w	r1, r4, #9
    685e:	a807      	add	r0, sp, #28
    6860:	f018 fed2 	bl	1f608 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
    6864:	462a      	mov	r2, r5
    6866:	f104 010b 	add.w	r1, r4, #11
    686a:	f10d 001e 	add.w	r0, sp, #30
    686e:	f018 fecb 	bl	1f608 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
    6872:	f104 010d 	add.w	r1, r4, #13
    6876:	2204      	movs	r2, #4
    6878:	a809      	add	r0, sp, #36	; 0x24
    687a:	f018 fec5 	bl	1f608 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
    687e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    6882:	9304      	str	r3, [sp, #16]
    6884:	9b08      	ldr	r3, [sp, #32]
    6886:	9303      	str	r3, [sp, #12]
    6888:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    688c:	9302      	str	r3, [sp, #8]
    688e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    6892:	9301      	str	r3, [sp, #4]
    6894:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    6898:	9300      	str	r3, [sp, #0]
    689a:	4a04      	ldr	r2, [pc, #16]	; (68ac <bt_uuid_to_str+0xa8>)
    689c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    689e:	4639      	mov	r1, r7
    68a0:	4630      	mov	r0, r6
    68a2:	f7fc fd27 	bl	32f4 <snprintk>
		break;
    68a6:	e7c3      	b.n	6830 <bt_uuid_to_str+0x2c>
    68a8:	0002587f 	.word	0x0002587f
    68ac:	00024b68 	.word	0x00024b68

000068b0 <bt_uuid_str>:

const char *bt_uuid_str(const struct bt_uuid *uuid)
{
    68b0:	b510      	push	{r4, lr}
	static char str[37];

	bt_uuid_to_str(uuid, str, sizeof(str));
    68b2:	4c03      	ldr	r4, [pc, #12]	; (68c0 <bt_uuid_str+0x10>)
    68b4:	2225      	movs	r2, #37	; 0x25
    68b6:	4621      	mov	r1, r4
    68b8:	f7ff ffa4 	bl	6804 <bt_uuid_to_str>

	return str;
}
    68bc:	4620      	mov	r0, r4
    68be:	bd10      	pop	{r4, pc}
    68c0:	20002275 	.word	0x20002275

000068c4 <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    68c4:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    68c6:	4c06      	ldr	r4, [pc, #24]	; (68e0 <le_dhkey_complete+0x1c>)
    68c8:	6822      	ldr	r2, [r4, #0]
    68ca:	b132      	cbz	r2, 68da <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    68cc:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    68ce:	7803      	ldrb	r3, [r0, #0]
    68d0:	b923      	cbnz	r3, 68dc <le_dhkey_complete+0x18>
    68d2:	3001      	adds	r0, #1
    68d4:	4790      	blx	r2
		dh_key_cb = NULL;
    68d6:	2300      	movs	r3, #0
    68d8:	6023      	str	r3, [r4, #0]
	}
}
    68da:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    68dc:	2000      	movs	r0, #0
    68de:	e7f9      	b.n	68d4 <le_dhkey_complete+0x10>
    68e0:	20000558 	.word	0x20000558

000068e4 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    68e4:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    68e6:	4d0b      	ldr	r5, [pc, #44]	; (6914 <ver_str+0x30>)
{
    68e8:	4606      	mov	r6, r0
	const char * const str[] = {
    68ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    68ec:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    68ee:	ac01      	add	r4, sp, #4
    68f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    68f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    68f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    68f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1",
	};

	if (ver < ARRAY_SIZE(str)) {
    68fa:	2e0a      	cmp	r6, #10
	const char * const str[] = {
    68fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		return str[ver];
    6900:	bf9b      	ittet	ls
    6902:	ab0c      	addls	r3, sp, #48	; 0x30
    6904:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    6908:	4803      	ldrhi	r0, [pc, #12]	; (6918 <ver_str+0x34>)
		return str[ver];
    690a:	f856 0c2c 	ldrls.w	r0, [r6, #-44]
}
    690e:	b00c      	add	sp, #48	; 0x30
    6910:	bd70      	pop	{r4, r5, r6, pc}
    6912:	bf00      	nop
    6914:	0002356c 	.word	0x0002356c
    6918:	000252b1 	.word	0x000252b1

0000691c <le_pkey_complete>:
{
    691c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    691e:	6885      	ldr	r5, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6920:	480e      	ldr	r0, [pc, #56]	; (695c <le_pkey_complete+0x40>)
    6922:	f06f 0120 	mvn.w	r1, #32
    6926:	f018 fff8 	bl	1f91a <atomic_and>
	if (!evt->status) {
    692a:	782b      	ldrb	r3, [r5, #0]
    692c:	b943      	cbnz	r3, 6940 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    692e:	1c69      	adds	r1, r5, #1
    6930:	2240      	movs	r2, #64	; 0x40
    6932:	480b      	ldr	r0, [pc, #44]	; (6960 <le_pkey_complete+0x44>)
    6934:	f018 fe68 	bl	1f608 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6938:	2110      	movs	r1, #16
    693a:	4808      	ldr	r0, [pc, #32]	; (695c <le_pkey_complete+0x40>)
    693c:	f018 ffde 	bl	1f8fc <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6940:	4b08      	ldr	r3, [pc, #32]	; (6964 <le_pkey_complete+0x48>)
    6942:	681c      	ldr	r4, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    6944:	1c6e      	adds	r6, r5, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6946:	b904      	cbnz	r4, 694a <le_pkey_complete+0x2e>
}
    6948:	bd70      	pop	{r4, r5, r6, pc}
		cb->func(evt->status ? NULL : evt->key);
    694a:	782a      	ldrb	r2, [r5, #0]
    694c:	6823      	ldr	r3, [r4, #0]
    694e:	2a00      	cmp	r2, #0
    6950:	bf0c      	ite	eq
    6952:	4630      	moveq	r0, r6
    6954:	2000      	movne	r0, #0
    6956:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6958:	6864      	ldr	r4, [r4, #4]
    695a:	e7f4      	b.n	6946 <le_pkey_complete+0x2a>
    695c:	20007168 	.word	0x20007168
    6960:	2000229a 	.word	0x2000229a
    6964:	2000055c 	.word	0x2000055c

00006968 <le_conn_update_complete>:
{
    6968:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    696a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    696c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6970:	4630      	mov	r0, r6
    6972:	f002 fae9 	bl	8f48 <bt_conn_lookup_handle>
	if (!conn) {
    6976:	4604      	mov	r4, r0
    6978:	b980      	cbnz	r0, 699c <le_conn_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    697a:	2301      	movs	r3, #1
    697c:	f04f 0200 	mov.w	r2, #0
    6980:	f363 0207 	bfi	r2, r3, #0, #8
    6984:	491d      	ldr	r1, [pc, #116]	; (69fc <le_conn_update_complete+0x94>)
    6986:	4b1e      	ldr	r3, [pc, #120]	; (6a00 <le_conn_update_complete+0x98>)
    6988:	481e      	ldr	r0, [pc, #120]	; (6a04 <le_conn_update_complete+0x9c>)
    698a:	1a5b      	subs	r3, r3, r1
    698c:	08db      	lsrs	r3, r3, #3
    698e:	f363 128f 	bfi	r2, r3, #6, #10
    6992:	4631      	mov	r1, r6
    6994:	f017 fd62 	bl	1e45c <log_1>
}
    6998:	b002      	add	sp, #8
    699a:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    699c:	782b      	ldrb	r3, [r5, #0]
    699e:	b9bb      	cbnz	r3, 69d0 <le_conn_update_complete+0x68>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    69a0:	792a      	ldrb	r2, [r5, #4]
    69a2:	78eb      	ldrb	r3, [r5, #3]
    69a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    69a8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    69ac:	79aa      	ldrb	r2, [r5, #6]
    69ae:	796b      	ldrb	r3, [r5, #5]
    69b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    69b4:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    69b8:	79eb      	ldrb	r3, [r5, #7]
    69ba:	7a2a      	ldrb	r2, [r5, #8]
    69bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    69c0:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    69c4:	f001 ff94 	bl	88f0 <notify_le_param_updated>
	bt_conn_unref(conn);
    69c8:	4620      	mov	r0, r4
    69ca:	f019 f8bb 	bl	1fb44 <bt_conn_unref>
    69ce:	e7e3      	b.n	6998 <le_conn_update_complete+0x30>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    69d0:	2b1a      	cmp	r3, #26
    69d2:	d1f9      	bne.n	69c8 <le_conn_update_complete+0x60>
    69d4:	78c3      	ldrb	r3, [r0, #3]
    69d6:	2b01      	cmp	r3, #1
    69d8:	d1f6      	bne.n	69c8 <le_conn_update_complete+0x60>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    69da:	f44f 6180 	mov.w	r1, #1024	; 0x400
    69de:	3004      	adds	r0, #4
    69e0:	f018 ff8c 	bl	1f8fc <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    69e4:	0543      	lsls	r3, r0, #21
    69e6:	d4ef      	bmi.n	69c8 <le_conn_update_complete+0x60>
		param.interval_min = conn->le.interval_min;
    69e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    69ea:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    69ec:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    69ee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    69f0:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    69f2:	4620      	mov	r0, r4
    69f4:	f002 fdae 	bl	9554 <bt_l2cap_update_conn_param>
    69f8:	e7e6      	b.n	69c8 <le_conn_update_complete+0x60>
    69fa:	bf00      	nop
    69fc:	000233ec 	.word	0x000233ec
    6a00:	0002345c 	.word	0x0002345c
    6a04:	00025194 	.word	0x00025194

00006a08 <le_adv_report>:
{
    6a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t num_reports = net_buf_pull_u8(buf);
    6a0c:	f100 0808 	add.w	r8, r0, #8
{
    6a10:	b085      	sub	sp, #20
    6a12:	4604      	mov	r4, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    6a14:	4640      	mov	r0, r8
    6a16:	f01b fe35 	bl	22684 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    6a1a:	4f29      	ldr	r7, [pc, #164]	; (6ac0 <le_adv_report+0xb8>)
	u8_t num_reports = net_buf_pull_u8(buf);
    6a1c:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    6a1e:	9b01      	ldr	r3, [sp, #4]
    6a20:	b183      	cbz	r3, 6a44 <le_adv_report+0x3c>
		if (buf->len < sizeof(*info)) {
    6a22:	89a3      	ldrh	r3, [r4, #12]
    6a24:	2b08      	cmp	r3, #8
    6a26:	d810      	bhi.n	6a4a <le_adv_report+0x42>
			BT_ERR("Unexpected end of buffer");
    6a28:	2301      	movs	r3, #1
    6a2a:	f04f 0100 	mov.w	r1, #0
    6a2e:	f363 0107 	bfi	r1, r3, #0, #8
    6a32:	4a24      	ldr	r2, [pc, #144]	; (6ac4 <le_adv_report+0xbc>)
    6a34:	4b24      	ldr	r3, [pc, #144]	; (6ac8 <le_adv_report+0xc0>)
    6a36:	4825      	ldr	r0, [pc, #148]	; (6acc <le_adv_report+0xc4>)
    6a38:	1a9b      	subs	r3, r3, r2
    6a3a:	08db      	lsrs	r3, r3, #3
    6a3c:	f363 118f 	bfi	r1, r3, #6, #10
    6a40:	f017 fcff 	bl	1e442 <log_0>
}
    6a44:	b005      	add	sp, #20
    6a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		info = net_buf_pull_mem(buf, sizeof(*info));
    6a4a:	2109      	movs	r1, #9
    6a4c:	4640      	mov	r0, r8
    6a4e:	f01b fe11 	bl	22674 <net_buf_simple_pull_mem>
		rssi = info->data[info->length];
    6a52:	7a03      	ldrb	r3, [r0, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6a54:	4601      	mov	r1, r0
		rssi = info->data[info->length];
    6a56:	4403      	add	r3, r0
		info = net_buf_pull_mem(buf, sizeof(*info));
    6a58:	4605      	mov	r5, r0
		rssi = info->data[info->length];
    6a5a:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6a5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    6a62:	3b02      	subs	r3, #2
    6a64:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    6a66:	a802      	add	r0, sp, #8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6a68:	d827      	bhi.n	6aba <le_adv_report+0xb2>
			bt_addr_le_copy(&id_addr, &info->addr);
    6a6a:	f018 ff44 	bl	1f8f6 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6a6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6a72:	3b02      	subs	r3, #2
    6a74:	f88d 3008 	strb.w	r3, [sp, #8]
		if (scan_dev_found_cb) {
    6a78:	683b      	ldr	r3, [r7, #0]
    6a7a:	b1a3      	cbz	r3, 6aa6 <le_adv_report+0x9e>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    6a7c:	4640      	mov	r0, r8
    6a7e:	f01b fe25 	bl	226cc <net_buf_simple_headroom>
			buf->len = info->length;
    6a82:	7a2b      	ldrb	r3, [r5, #8]
	state->len = buf->len;
    6a84:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    6a88:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    6a8a:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    6a8c:	4643      	mov	r3, r8
    6a8e:	782a      	ldrb	r2, [r5, #0]
    6a90:	683e      	ldr	r6, [r7, #0]
    6a92:	fa4f f18b 	sxtb.w	r1, fp
    6a96:	a802      	add	r0, sp, #8
    6a98:	47b0      	blx	r6
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    6a9a:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    6a9c:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6aa0:	fa13 f389 	uxtah	r3, r3, r9
    6aa4:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    6aa6:	7a29      	ldrb	r1, [r5, #8]
    6aa8:	4640      	mov	r0, r8
    6aaa:	3101      	adds	r1, #1
    6aac:	f01b fdda 	bl	22664 <net_buf_simple_pull>
    6ab0:	9b01      	ldr	r3, [sp, #4]
    6ab2:	1e5e      	subs	r6, r3, #1
    6ab4:	b2f3      	uxtb	r3, r6
    6ab6:	9301      	str	r3, [sp, #4]
    6ab8:	e7b1      	b.n	6a1e <le_adv_report+0x16>
			bt_addr_le_copy(&id_addr,
    6aba:	f018 ff1c 	bl	1f8f6 <bt_addr_le_copy>
    6abe:	e7db      	b.n	6a78 <le_adv_report+0x70>
    6ac0:	20000564 	.word	0x20000564
    6ac4:	000233ec 	.word	0x000233ec
    6ac8:	0002345c 	.word	0x0002345c
    6acc:	0002515a 	.word	0x0002515a

00006ad0 <hci_num_completed_packets>:
{
    6ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ad4:	4d36      	ldr	r5, [pc, #216]	; (6bb0 <hci_num_completed_packets+0xe0>)
				BT_ERR("packets count mismatch");
    6ad6:	4a37      	ldr	r2, [pc, #220]	; (6bb4 <hci_num_completed_packets+0xe4>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    6ad8:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    6adc:	1aad      	subs	r5, r5, r2
    6ade:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	for (i = 0; i < evt->num_handles; i++) {
    6ae2:	2600      	movs	r6, #0
    6ae4:	f898 2000 	ldrb.w	r2, [r8]
    6ae8:	4296      	cmp	r6, r2
    6aea:	db02      	blt.n	6af2 <hci_num_completed_packets+0x22>
}
    6aec:	b003      	add	sp, #12
    6aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    6af2:	eb08 0286 	add.w	r2, r8, r6, lsl #2
    6af6:	f8b2 1001 	ldrh.w	r1, [r2, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    6afa:	f8b2 b003 	ldrh.w	fp, [r2, #3]
    6afe:	f04f 0020 	mov.w	r0, #32
    6b02:	f3ef 8911 	mrs	r9, BASEPRI
    6b06:	f380 8811 	msr	BASEPRI, r0
		conn = bt_conn_lookup_handle(handle);
    6b0a:	4608      	mov	r0, r1
    6b0c:	9101      	str	r1, [sp, #4]
    6b0e:	f002 fa1b 	bl	8f48 <bt_conn_lookup_handle>
		if (!conn) {
    6b12:	9901      	ldr	r1, [sp, #4]
    6b14:	4604      	mov	r4, r0
    6b16:	b988      	cbnz	r0, 6b3c <hci_num_completed_packets+0x6c>
			BT_ERR("No connection for handle %u", handle);
    6b18:	f027 023f 	bic.w	r2, r7, #63	; 0x3f
    6b1c:	f042 0201 	orr.w	r2, r2, #1
    6b20:	f362 0707 	bfi	r7, r2, #0, #8
    6b24:	f365 178f 	bfi	r7, r5, #6, #10
    6b28:	463a      	mov	r2, r7
    6b2a:	4823      	ldr	r0, [pc, #140]	; (6bb8 <hci_num_completed_packets+0xe8>)
    6b2c:	f017 fc96 	bl	1e45c <log_1>
	__asm__ volatile(
    6b30:	f389 8811 	msr	BASEPRI, r9
    6b34:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
    6b38:	3601      	adds	r6, #1
    6b3a:	e7d3      	b.n	6ae4 <hci_num_completed_packets+0x14>
    6b3c:	f389 8811 	msr	BASEPRI, r9
    6b40:	f3bf 8f6f 	isb	sy
			k_fifo_put(&conn->tx_notify, node);
    6b44:	f100 091c 	add.w	r9, r0, #28
		while (count--) {
    6b48:	f1bb 0f00 	cmp.w	fp, #0
    6b4c:	d022      	beq.n	6b94 <hci_num_completed_packets+0xc4>
	__asm__ volatile(
    6b4e:	f04f 0120 	mov.w	r1, #32
    6b52:	f3ef 8e11 	mrs	lr, BASEPRI
    6b56:	f381 8811 	msr	BASEPRI, r1
Z_GENLIST_IS_EMPTY(slist)
    6b5a:	6961      	ldr	r1, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6b5c:	b129      	cbz	r1, 6b6a <hci_num_completed_packets+0x9a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6b5e:	69a0      	ldr	r0, [r4, #24]
    6b60:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    6b62:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6b64:	4281      	cmp	r1, r0
	list->tail = node;
    6b66:	bf08      	it	eq
    6b68:	61a3      	streq	r3, [r4, #24]
	__asm__ volatile(
    6b6a:	f38e 8811 	msr	BASEPRI, lr
    6b6e:	f3bf 8f6f 	isb	sy
			if (!node) {
    6b72:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    6b76:	fa1f fb82 	uxth.w	fp, r2
    6b7a:	b979      	cbnz	r1, 6b9c <hci_num_completed_packets+0xcc>
				BT_ERR("packets count mismatch");
    6b7c:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
    6b80:	f042 0201 	orr.w	r2, r2, #1
    6b84:	f362 0a07 	bfi	sl, r2, #0, #8
    6b88:	f365 1a8f 	bfi	sl, r5, #6, #10
    6b8c:	4651      	mov	r1, sl
    6b8e:	480b      	ldr	r0, [pc, #44]	; (6bbc <hci_num_completed_packets+0xec>)
    6b90:	f017 fc57 	bl	1e442 <log_0>
		bt_conn_unref(conn);
    6b94:	4620      	mov	r0, r4
    6b96:	f018 ffd5 	bl	1fb44 <bt_conn_unref>
    6b9a:	e7cd      	b.n	6b38 <hci_num_completed_packets+0x68>
			k_fifo_put(&conn->tx_notify, node);
    6b9c:	4648      	mov	r0, r9
    6b9e:	f01b fff2 	bl	22b86 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    6ba2:	4620      	mov	r0, r4
    6ba4:	f001 fea0 	bl	88e8 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    6ba8:	f015 fb5e 	bl	1c268 <z_impl_k_sem_give>
    6bac:	e7cc      	b.n	6b48 <hci_num_completed_packets+0x78>
    6bae:	bf00      	nop
    6bb0:	0002345c 	.word	0x0002345c
    6bb4:	000233ec 	.word	0x000233ec
    6bb8:	0002509a 	.word	0x0002509a
    6bbc:	000250b6 	.word	0x000250b6

00006bc0 <handle_event>:
{
    6bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6bc2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6bc6:	4604      	mov	r4, r0
    6bc8:	4608      	mov	r0, r1
		if (handler->event != event) {
    6bca:	7811      	ldrb	r1, [r2, #0]
    6bcc:	42a1      	cmp	r1, r4
    6bce:	d01e      	beq.n	6c0e <handle_event+0x4e>
			continue;
    6bd0:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    6bd2:	429a      	cmp	r2, r3
    6bd4:	d1f9      	bne.n	6bca <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    6bd6:	2302      	movs	r3, #2
    6bd8:	f04f 0500 	mov.w	r5, #0
    6bdc:	4a19      	ldr	r2, [pc, #100]	; (6c44 <handle_event+0x84>)
    6bde:	8986      	ldrh	r6, [r0, #12]
    6be0:	6880      	ldr	r0, [r0, #8]
    6be2:	f363 0507 	bfi	r5, r3, #0, #8
    6be6:	4b18      	ldr	r3, [pc, #96]	; (6c48 <handle_event+0x88>)
    6be8:	1a9b      	subs	r3, r3, r2
    6bea:	08db      	lsrs	r3, r3, #3
    6bec:	4631      	mov	r1, r6
    6bee:	f363 158f 	bfi	r5, r3, #6, #10
    6bf2:	f7ff fa95 	bl	6120 <bt_hex_real>
    6bf6:	f7fd f917 	bl	3e28 <log_strdup>
    6bfa:	f8ad 5000 	strh.w	r5, [sp]
    6bfe:	4603      	mov	r3, r0
    6c00:	4632      	mov	r2, r6
    6c02:	4621      	mov	r1, r4
    6c04:	4811      	ldr	r0, [pc, #68]	; (6c4c <handle_event+0x8c>)
    6c06:	f017 fc55 	bl	1e4b4 <log_3>
}
    6c0a:	b002      	add	sp, #8
    6c0c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    6c0e:	8981      	ldrh	r1, [r0, #12]
    6c10:	7853      	ldrb	r3, [r2, #1]
    6c12:	428b      	cmp	r3, r1
    6c14:	d911      	bls.n	6c3a <handle_event+0x7a>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    6c16:	2201      	movs	r2, #1
    6c18:	f04f 0300 	mov.w	r3, #0
    6c1c:	f362 0307 	bfi	r3, r2, #0, #8
    6c20:	4808      	ldr	r0, [pc, #32]	; (6c44 <handle_event+0x84>)
    6c22:	4a09      	ldr	r2, [pc, #36]	; (6c48 <handle_event+0x88>)
    6c24:	1a12      	subs	r2, r2, r0
    6c26:	08d2      	lsrs	r2, r2, #3
    6c28:	4809      	ldr	r0, [pc, #36]	; (6c50 <handle_event+0x90>)
    6c2a:	f362 138f 	bfi	r3, r2, #6, #10
    6c2e:	4622      	mov	r2, r4
}
    6c30:	b002      	add	sp, #8
    6c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    6c36:	f017 bc25 	b.w	1e484 <log_2>
		handler->handler(buf);
    6c3a:	6853      	ldr	r3, [r2, #4]
}
    6c3c:	b002      	add	sp, #8
    6c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    6c42:	4718      	bx	r3
    6c44:	000233ec 	.word	0x000233ec
    6c48:	0002345c 	.word	0x0002345c
    6c4c:	00024fe6 	.word	0x00024fe6
    6c50:	00024fc4 	.word	0x00024fc4

00006c54 <hci_le_meta_event>:
{
    6c54:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6c56:	2101      	movs	r1, #1
{
    6c58:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6c5a:	3008      	adds	r0, #8
    6c5c:	f01b fd0a 	bl	22674 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6c60:	4621      	mov	r1, r4
    6c62:	2308      	movs	r3, #8
    6c64:	4a02      	ldr	r2, [pc, #8]	; (6c70 <hci_le_meta_event+0x1c>)
    6c66:	7800      	ldrb	r0, [r0, #0]
}
    6c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6c6c:	f7ff bfa8 	b.w	6bc0 <handle_event>
    6c70:	00023908 	.word	0x00023908

00006c74 <hci_cmd_done>:
{
    6c74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6c78:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6c7a:	7990      	ldrb	r0, [r2, #6]
    6c7c:	4f2b      	ldr	r7, [pc, #172]	; (6d2c <hci_cmd_done+0xb8>)
{
    6c7e:	4688      	mov	r8, r1
    6c80:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6c82:	f013 ff3d 	bl	1ab00 <net_buf_pool_get>
    6c86:	4287      	cmp	r7, r0
    6c88:	d01a      	beq.n	6cc0 <hci_cmd_done+0x4c>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    6c8a:	2302      	movs	r3, #2
    6c8c:	f04f 0400 	mov.w	r4, #0
    6c90:	f363 0407 	bfi	r4, r3, #0, #8
    6c94:	4a26      	ldr	r2, [pc, #152]	; (6d30 <hci_cmd_done+0xbc>)
    6c96:	4b27      	ldr	r3, [pc, #156]	; (6d34 <hci_cmd_done+0xc0>)
    6c98:	79a8      	ldrb	r0, [r5, #6]
    6c9a:	9600      	str	r6, [sp, #0]
    6c9c:	1ad2      	subs	r2, r2, r3
    6c9e:	08d2      	lsrs	r2, r2, #3
    6ca0:	f362 148f 	bfi	r4, r2, #6, #10
    6ca4:	9001      	str	r0, [sp, #4]
    6ca6:	f013 ff2b 	bl	1ab00 <net_buf_pool_get>
    6caa:	4623      	mov	r3, r4
    6cac:	e9cd 0702 	strd	r0, r7, [sp, #8]
    6cb0:	2204      	movs	r2, #4
    6cb2:	4669      	mov	r1, sp
    6cb4:	4820      	ldr	r0, [pc, #128]	; (6d38 <hci_cmd_done+0xc4>)
    6cb6:	f017 fc18 	bl	1e4ea <log_n>
}
    6cba:	b004      	add	sp, #16
    6cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    6cc0:	4628      	mov	r0, r5
    6cc2:	f013 ff23 	bl	1ab0c <net_buf_id>
    6cc6:	4c1d      	ldr	r4, [pc, #116]	; (6d3c <hci_cmd_done+0xc8>)
    6cc8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6ccc:	8843      	ldrh	r3, [r0, #2]
    6cce:	42b3      	cmp	r3, r6
    6cd0:	d015      	beq.n	6cfe <hci_cmd_done+0x8a>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    6cd2:	2302      	movs	r3, #2
    6cd4:	f04f 0700 	mov.w	r7, #0
    6cd8:	f363 0707 	bfi	r7, r3, #0, #8
    6cdc:	4a14      	ldr	r2, [pc, #80]	; (6d30 <hci_cmd_done+0xbc>)
    6cde:	4b15      	ldr	r3, [pc, #84]	; (6d34 <hci_cmd_done+0xc0>)
    6ce0:	1ad2      	subs	r2, r2, r3
    6ce2:	08d2      	lsrs	r2, r2, #3
    6ce4:	4628      	mov	r0, r5
    6ce6:	f362 178f 	bfi	r7, r2, #6, #10
    6cea:	f013 ff0f 	bl	1ab0c <net_buf_id>
    6cee:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6cf2:	463b      	mov	r3, r7
    6cf4:	8842      	ldrh	r2, [r0, #2]
    6cf6:	4812      	ldr	r0, [pc, #72]	; (6d40 <hci_cmd_done+0xcc>)
    6cf8:	4631      	mov	r1, r6
    6cfa:	f017 fbc3 	bl	1e484 <log_2>
	if (cmd(buf)->sync) {
    6cfe:	4628      	mov	r0, r5
    6d00:	f013 ff04 	bl	1ab0c <net_buf_id>
    6d04:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6d08:	6843      	ldr	r3, [r0, #4]
    6d0a:	2b00      	cmp	r3, #0
    6d0c:	d0d5      	beq.n	6cba <hci_cmd_done+0x46>
		cmd(buf)->status = status;
    6d0e:	4628      	mov	r0, r5
    6d10:	f013 fefc 	bl	1ab0c <net_buf_id>
    6d14:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    6d18:	4628      	mov	r0, r5
    6d1a:	f013 fef7 	bl	1ab0c <net_buf_id>
    6d1e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6d22:	6840      	ldr	r0, [r0, #4]
    6d24:	f015 faa0 	bl	1c268 <z_impl_k_sem_give>
    6d28:	e7c7      	b.n	6cba <hci_cmd_done+0x46>
    6d2a:	bf00      	nop
    6d2c:	2000815c 	.word	0x2000815c
    6d30:	0002345c 	.word	0x0002345c
    6d34:	000233ec 	.word	0x000233ec
    6d38:	00025008 	.word	0x00025008
    6d3c:	20000538 	.word	0x20000538
    6d40:	0002503d 	.word	0x0002503d

00006d44 <hci_cmd_status>:
{
    6d44:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6d46:	2104      	movs	r1, #4
{
    6d48:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6d4a:	3008      	adds	r0, #8
    6d4c:	f01b fc92 	bl	22674 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    6d50:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    6d52:	7801      	ldrb	r1, [r0, #0]
    6d54:	8840      	ldrh	r0, [r0, #2]
    6d56:	4622      	mov	r2, r4
    6d58:	f7ff ff8c 	bl	6c74 <hci_cmd_done>
	if (ncmd) {
    6d5c:	b125      	cbz	r5, 6d68 <hci_cmd_status+0x24>
    6d5e:	4803      	ldr	r0, [pc, #12]	; (6d6c <hci_cmd_status+0x28>)
}
    6d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6d64:	f015 ba80 	b.w	1c268 <z_impl_k_sem_give>
    6d68:	bd38      	pop	{r3, r4, r5, pc}
    6d6a:	bf00      	nop
    6d6c:	200071a0 	.word	0x200071a0

00006d70 <hci_cmd_complete>:
{
    6d70:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6d72:	2103      	movs	r1, #3
{
    6d74:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6d76:	3008      	adds	r0, #8
    6d78:	f01b fc7c 	bl	22674 <net_buf_simple_pull_mem>
	status = buf->data[0];
    6d7c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    6d7e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    6d80:	7819      	ldrb	r1, [r3, #0]
    6d82:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    6d86:	4622      	mov	r2, r4
    6d88:	f7ff ff74 	bl	6c74 <hci_cmd_done>
	if (ncmd) {
    6d8c:	b125      	cbz	r5, 6d98 <hci_cmd_complete+0x28>
    6d8e:	4803      	ldr	r0, [pc, #12]	; (6d9c <hci_cmd_complete+0x2c>)
}
    6d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6d94:	f015 ba68 	b.w	1c268 <z_impl_k_sem_give>
    6d98:	bd38      	pop	{r3, r4, r5, pc}
    6d9a:	bf00      	nop
    6d9c:	200071a0 	.word	0x200071a0

00006da0 <hci_tx_thread>:
{
    6da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Uncleared pending sent_cmd");
    6da4:	4b5a      	ldr	r3, [pc, #360]	; (6f10 <hci_tx_thread+0x170>)
    6da6:	4c5b      	ldr	r4, [pc, #364]	; (6f14 <hci_tx_thread+0x174>)
    6da8:	1ae4      	subs	r4, r4, r3
    6daa:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		events[0].state = K_POLL_STATE_NOT_READY;
    6dae:	4a5a      	ldr	r2, [pc, #360]	; (6f18 <hci_tx_thread+0x178>)
    6db0:	68d3      	ldr	r3, [r2, #12]
    6db2:	f36f 3310 	bfc	r3, #12, #5
    6db6:	60d3      	str	r3, [r2, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6db8:	f102 0014 	add.w	r0, r2, #20
    6dbc:	f001 ff8a 	bl	8cd4 <bt_conn_prepare_events>
    6dc0:	1c43      	adds	r3, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    6dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6dc6:	4619      	mov	r1, r3
    6dc8:	4853      	ldr	r0, [pc, #332]	; (6f18 <hci_tx_thread+0x178>)
    6dca:	9301      	str	r3, [sp, #4]
    6dcc:	f015 fd7a 	bl	1c8c4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    6dd0:	2800      	cmp	r0, #0
    6dd2:	f000 809a 	beq.w	6f0a <hci_tx_thread+0x16a>
    6dd6:	f04f 0100 	mov.w	r1, #0
    6dda:	2301      	movs	r3, #1
    6ddc:	f363 0107 	bfi	r1, r3, #0, #8
    6de0:	484e      	ldr	r0, [pc, #312]	; (6f1c <hci_tx_thread+0x17c>)
    6de2:	f364 118f 	bfi	r1, r4, #6, #10
	BT_ASSERT(buf);
    6de6:	f017 fb2c 	bl	1e442 <log_0>
    6dea:	4040      	eors	r0, r0
    6dec:	f380 8811 	msr	BASEPRI, r0
    6df0:	f04f 0004 	mov.w	r0, #4
    6df4:	df02      	svc	2
		switch (ev->state) {
    6df6:	68f1      	ldr	r1, [r6, #12]
    6df8:	f3c1 3104 	ubfx	r1, r1, #12, #5
    6dfc:	2901      	cmp	r1, #1
    6dfe:	d95d      	bls.n	6ebc <hci_tx_thread+0x11c>
    6e00:	2904      	cmp	r1, #4
    6e02:	d175      	bne.n	6ef0 <hci_tx_thread+0x150>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6e04:	f896 800c 	ldrb.w	r8, [r6, #12]
    6e08:	f1b8 0f00 	cmp.w	r8, #0
    6e0c:	d160      	bne.n	6ed0 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6e0e:	4641      	mov	r1, r8
    6e10:	4843      	ldr	r0, [pc, #268]	; (6f20 <hci_tx_thread+0x180>)
    6e12:	f01b fb3c 	bl	2248e <net_buf_get>
	BT_ASSERT(buf);
    6e16:	4607      	mov	r7, r0
    6e18:	b940      	cbnz	r0, 6e2c <hci_tx_thread+0x8c>
    6e1a:	f04f 0100 	mov.w	r1, #0
    6e1e:	2301      	movs	r3, #1
    6e20:	f363 0107 	bfi	r1, r3, #0, #8
    6e24:	f364 118f 	bfi	r1, r4, #6, #10
    6e28:	483e      	ldr	r0, [pc, #248]	; (6f24 <hci_tx_thread+0x184>)
    6e2a:	e7dc      	b.n	6de6 <hci_tx_thread+0x46>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    6e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6e30:	483d      	ldr	r0, [pc, #244]	; (6f28 <hci_tx_thread+0x188>)
    6e32:	f015 fa43 	bl	1c2bc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6e36:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
    6e3a:	b18a      	cbz	r2, 6e60 <hci_tx_thread+0xc0>
		BT_ERR("Uncleared pending sent_cmd");
    6e3c:	f029 023f 	bic.w	r2, r9, #63	; 0x3f
    6e40:	f042 0201 	orr.w	r2, r2, #1
    6e44:	f362 0907 	bfi	r9, r2, #0, #8
    6e48:	f364 198f 	bfi	r9, r4, #6, #10
    6e4c:	4649      	mov	r1, r9
    6e4e:	4837      	ldr	r0, [pc, #220]	; (6f2c <hci_tx_thread+0x18c>)
    6e50:	f017 faf7 	bl	1e442 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6e54:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6e58:	f013 feec 	bl	1ac34 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6e5c:	f8c5 80c0 	str.w	r8, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    6e60:	4638      	mov	r0, r7
    6e62:	f01b fb8e 	bl	22582 <net_buf_ref>
    6e66:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    6e6a:	4638      	mov	r0, r7
    6e6c:	f7ff faa4 	bl	63b8 <bt_hci_ecc_send>
	if (err) {
    6e70:	4601      	mov	r1, r0
    6e72:	b318      	cbz	r0, 6ebc <hci_tx_thread+0x11c>
		BT_ERR("Unable to send to driver (err %d)", err);
    6e74:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    6e78:	f043 0301 	orr.w	r3, r3, #1
    6e7c:	f363 0a07 	bfi	sl, r3, #0, #8
    6e80:	f364 1a8f 	bfi	sl, r4, #6, #10
    6e84:	4652      	mov	r2, sl
    6e86:	482a      	ldr	r0, [pc, #168]	; (6f30 <hci_tx_thread+0x190>)
    6e88:	f017 fae8 	bl	1e45c <log_1>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    6e8c:	4826      	ldr	r0, [pc, #152]	; (6f28 <hci_tx_thread+0x188>)
    6e8e:	f015 f9eb 	bl	1c268 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    6e92:	4638      	mov	r0, r7
    6e94:	f013 fe3a 	bl	1ab0c <net_buf_id>
    6e98:	4b26      	ldr	r3, [pc, #152]	; (6f34 <hci_tx_thread+0x194>)
    6e9a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6e9e:	2200      	movs	r2, #0
    6ea0:	211f      	movs	r1, #31
    6ea2:	8840      	ldrh	r0, [r0, #2]
    6ea4:	f7ff fee6 	bl	6c74 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6ea8:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6eac:	f013 fec2 	bl	1ac34 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6eb0:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6eb2:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    6eb4:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    6eb8:	f013 febc 	bl	1ac34 <net_buf_unref>
	for (; count; ev++, count--) {
    6ebc:	9b01      	ldr	r3, [sp, #4]
    6ebe:	3b01      	subs	r3, #1
    6ec0:	3614      	adds	r6, #20
    6ec2:	9301      	str	r3, [sp, #4]
    6ec4:	9b01      	ldr	r3, [sp, #4]
    6ec6:	2b00      	cmp	r3, #0
    6ec8:	d195      	bne.n	6df6 <hci_tx_thread+0x56>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    6eca:	f015 f91b 	bl	1c104 <z_impl_k_yield>
    6ece:	e76e      	b.n	6dae <hci_tx_thread+0xe>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    6ed0:	f1b8 0f01 	cmp.w	r8, #1
    6ed4:	d104      	bne.n	6ee0 <hci_tx_thread+0x140>
					conn = CONTAINER_OF(ev->fifo,
    6ed6:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    6ed8:	381c      	subs	r0, #28
    6eda:	f001 fe3b 	bl	8b54 <bt_conn_notify_tx>
    6ede:	e7ed      	b.n	6ebc <hci_tx_thread+0x11c>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6ee0:	f1b8 0f02 	cmp.w	r8, #2
    6ee4:	d1ea      	bne.n	6ebc <hci_tx_thread+0x11c>
					conn = CONTAINER_OF(ev->fifo,
    6ee6:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    6ee8:	382c      	subs	r0, #44	; 0x2c
    6eea:	f002 f92f 	bl	914c <bt_conn_process_tx>
    6eee:	e7e5      	b.n	6ebc <hci_tx_thread+0x11c>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    6ef0:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
    6ef4:	f043 0302 	orr.w	r3, r3, #2
    6ef8:	f363 0b07 	bfi	fp, r3, #0, #8
    6efc:	f364 1b8f 	bfi	fp, r4, #6, #10
    6f00:	465a      	mov	r2, fp
    6f02:	480d      	ldr	r0, [pc, #52]	; (6f38 <hci_tx_thread+0x198>)
    6f04:	f017 faaa 	bl	1e45c <log_1>
    6f08:	e7d8      	b.n	6ebc <hci_tx_thread+0x11c>
    6f0a:	4e03      	ldr	r6, [pc, #12]	; (6f18 <hci_tx_thread+0x178>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6f0c:	4d0b      	ldr	r5, [pc, #44]	; (6f3c <hci_tx_thread+0x19c>)
    6f0e:	e7d9      	b.n	6ec4 <hci_tx_thread+0x124>
    6f10:	000233ec 	.word	0x000233ec
    6f14:	0002345c 	.word	0x0002345c
    6f18:	200076d8 	.word	0x200076d8
    6f1c:	000250cd 	.word	0x000250cd
    6f20:	200071bc 	.word	0x200071bc
    6f24:	000250e7 	.word	0x000250e7
    6f28:	200071a0 	.word	0x200071a0
    6f2c:	000250fc 	.word	0x000250fc
    6f30:	00025117 	.word	0x00025117
    6f34:	20000538 	.word	0x20000538
    6f38:	00025139 	.word	0x00025139
    6f3c:	200070f8 	.word	0x200070f8

00006f40 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    6f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    6f42:	4e0b      	ldr	r6, [pc, #44]	; (6f70 <id_find+0x30>)
{
    6f44:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    6f46:	2500      	movs	r5, #0
    6f48:	79f3      	ldrb	r3, [r6, #7]
    6f4a:	b2ec      	uxtb	r4, r5
    6f4c:	42a3      	cmp	r3, r4
    6f4e:	d802      	bhi.n	6f56 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    6f50:	f06f 0401 	mvn.w	r4, #1
    6f54:	e009      	b.n	6f6a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    6f56:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    6f5a:	2207      	movs	r2, #7
    6f5c:	4431      	add	r1, r6
    6f5e:	4638      	mov	r0, r7
    6f60:	f018 fb2b 	bl	1f5ba <memcmp>
    6f64:	3501      	adds	r5, #1
    6f66:	2800      	cmp	r0, #0
    6f68:	d1ee      	bne.n	6f48 <id_find+0x8>
}
    6f6a:	4620      	mov	r0, r4
    6f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f6e:	bf00      	nop
    6f70:	200070f8 	.word	0x200070f8

00006f74 <slave_update_conn_param>:
{
    6f74:	b508      	push	{r3, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    6f76:	2108      	movs	r1, #8
{
    6f78:	4603      	mov	r3, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    6f7a:	3004      	adds	r0, #4
    6f7c:	f018 fce9 	bl	1f952 <atomic_test_bit>
    6f80:	b940      	cbnz	r0, 6f94 <slave_update_conn_param+0x20>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6f82:	f103 0178 	add.w	r1, r3, #120	; 0x78
    6f86:	f241 3288 	movw	r2, #5000	; 0x1388
    6f8a:	4803      	ldr	r0, [pc, #12]	; (6f98 <slave_update_conn_param+0x24>)
}
    6f8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6f90:	f015 bad2 	b.w	1c538 <k_delayed_work_submit_to_queue>
    6f94:	bd08      	pop	{r3, pc}
    6f96:	bf00      	nop
    6f98:	20001c74 	.word	0x20001c74

00006f9c <le_remote_feat_complete>:
{
    6f9c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    6f9e:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    6fa0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6fa4:	4630      	mov	r0, r6
    6fa6:	f001 ffcf 	bl	8f48 <bt_conn_lookup_handle>
	if (!conn) {
    6faa:	4604      	mov	r4, r0
    6fac:	b980      	cbnz	r0, 6fd0 <le_remote_feat_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6fae:	2301      	movs	r3, #1
    6fb0:	f04f 0200 	mov.w	r2, #0
    6fb4:	f363 0207 	bfi	r2, r3, #0, #8
    6fb8:	490e      	ldr	r1, [pc, #56]	; (6ff4 <le_remote_feat_complete+0x58>)
    6fba:	4b0f      	ldr	r3, [pc, #60]	; (6ff8 <le_remote_feat_complete+0x5c>)
    6fbc:	480f      	ldr	r0, [pc, #60]	; (6ffc <le_remote_feat_complete+0x60>)
    6fbe:	1a5b      	subs	r3, r3, r1
    6fc0:	08db      	lsrs	r3, r3, #3
    6fc2:	4631      	mov	r1, r6
    6fc4:	f363 128f 	bfi	r2, r3, #6, #10
}
    6fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6fcc:	f017 ba46 	b.w	1e45c <log_1>
	if (!evt->status) {
    6fd0:	782b      	ldrb	r3, [r5, #0]
    6fd2:	b923      	cbnz	r3, 6fde <le_remote_feat_complete+0x42>
		memcpy(conn->le.features, evt->features,
    6fd4:	2208      	movs	r2, #8
    6fd6:	1ce9      	adds	r1, r5, #3
    6fd8:	306c      	adds	r0, #108	; 0x6c
    6fda:	f018 fb15 	bl	1f608 <memcpy>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6fde:	78e3      	ldrb	r3, [r4, #3]
    6fe0:	2b01      	cmp	r3, #1
    6fe2:	d102      	bne.n	6fea <le_remote_feat_complete+0x4e>
		slave_update_conn_param(conn);
    6fe4:	4620      	mov	r0, r4
    6fe6:	f7ff ffc5 	bl	6f74 <slave_update_conn_param>
	bt_conn_unref(conn);
    6fea:	4620      	mov	r0, r4
}
    6fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    6ff0:	f018 bda8 	b.w	1fb44 <bt_conn_unref>
    6ff4:	000233ec 	.word	0x000233ec
    6ff8:	0002345c 	.word	0x0002345c
    6ffc:	00025194 	.word	0x00025194

00007000 <bt_hci_cmd_create>:
{
    7000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7004:	4680      	mov	r8, r0
    7006:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7008:	4813      	ldr	r0, [pc, #76]	; (7058 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    700a:	4d14      	ldr	r5, [pc, #80]	; (705c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    700c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7010:	f01b fa37 	bl	22482 <net_buf_alloc_fixed>
    7014:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    7016:	f100 0608 	add.w	r6, r0, #8
    701a:	2100      	movs	r1, #0
    701c:	4630      	mov	r0, r6
	*(u8_t *)net_buf_user_data(buf) = type;
    701e:	2700      	movs	r7, #0
    7020:	f01b fa4e 	bl	224c0 <net_buf_simple_reserve>
    7024:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    7026:	4620      	mov	r0, r4
    7028:	f013 fd70 	bl	1ab0c <net_buf_id>
    702c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    7030:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    7034:	4620      	mov	r0, r4
    7036:	f013 fd69 	bl	1ab0c <net_buf_id>
    703a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    703e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    7040:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    7042:	4630      	mov	r0, r6
    7044:	f01b faa1 	bl	2258a <net_buf_simple_add>
	hdr->param_len = param_len;
    7048:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    704c:	f8a0 8000 	strh.w	r8, [r0]
}
    7050:	4620      	mov	r0, r4
    7052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7056:	bf00      	nop
    7058:	2000815c 	.word	0x2000815c
    705c:	20000538 	.word	0x20000538

00007060 <bt_hci_cmd_send>:
{
    7060:	b538      	push	{r3, r4, r5, lr}
    7062:	4604      	mov	r4, r0
	if (!buf) {
    7064:	460d      	mov	r5, r1
    7066:	b919      	cbnz	r1, 7070 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    7068:	f7ff ffca 	bl	7000 <bt_hci_cmd_create>
		if (!buf) {
    706c:	4605      	mov	r5, r0
    706e:	b310      	cbz	r0, 70b6 <bt_hci_cmd_send+0x56>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    7070:	f640 4335 	movw	r3, #3125	; 0xc35
    7074:	429c      	cmp	r4, r3
    7076:	d118      	bne.n	70aa <bt_hci_cmd_send+0x4a>
		return bt_hci_ecc_send(buf);
    7078:	4628      	mov	r0, r5
    707a:	f7ff f99d 	bl	63b8 <bt_hci_ecc_send>
		if (err) {
    707e:	4604      	mov	r4, r0
    7080:	b188      	cbz	r0, 70a6 <bt_hci_cmd_send+0x46>
			BT_ERR("Unable to send to driver (err %d)", err);
    7082:	2301      	movs	r3, #1
    7084:	f04f 0200 	mov.w	r2, #0
    7088:	f363 0207 	bfi	r2, r3, #0, #8
    708c:	490b      	ldr	r1, [pc, #44]	; (70bc <bt_hci_cmd_send+0x5c>)
    708e:	4b0c      	ldr	r3, [pc, #48]	; (70c0 <bt_hci_cmd_send+0x60>)
    7090:	1a5b      	subs	r3, r3, r1
    7092:	08db      	lsrs	r3, r3, #3
    7094:	4601      	mov	r1, r0
    7096:	f363 128f 	bfi	r2, r3, #6, #10
    709a:	480a      	ldr	r0, [pc, #40]	; (70c4 <bt_hci_cmd_send+0x64>)
    709c:	f017 f9de 	bl	1e45c <log_1>
			net_buf_unref(buf);
    70a0:	4628      	mov	r0, r5
    70a2:	f013 fdc7 	bl	1ac34 <net_buf_unref>
}
    70a6:	4620      	mov	r0, r4
    70a8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    70aa:	4629      	mov	r1, r5
    70ac:	4806      	ldr	r0, [pc, #24]	; (70c8 <bt_hci_cmd_send+0x68>)
    70ae:	f01b fa5b 	bl	22568 <net_buf_put>
	return 0;
    70b2:	2400      	movs	r4, #0
    70b4:	e7f7      	b.n	70a6 <bt_hci_cmd_send+0x46>
			return -ENOBUFS;
    70b6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    70ba:	e7f4      	b.n	70a6 <bt_hci_cmd_send+0x46>
    70bc:	000233ec 	.word	0x000233ec
    70c0:	0002345c 	.word	0x0002345c
    70c4:	00025117 	.word	0x00025117
    70c8:	200071bc 	.word	0x200071bc

000070cc <le_conn_param_neg_reply>:
{
    70cc:	b570      	push	{r4, r5, r6, lr}
    70ce:	4606      	mov	r6, r0
    70d0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    70d2:	f242 0021 	movw	r0, #8225	; 0x2021
    70d6:	2103      	movs	r1, #3
    70d8:	f7ff ff92 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    70dc:	4604      	mov	r4, r0
    70de:	b978      	cbnz	r0, 7100 <le_conn_param_neg_reply+0x34>
		BT_ERR("Unable to allocate buffer");
    70e0:	2301      	movs	r3, #1
    70e2:	f04f 0100 	mov.w	r1, #0
    70e6:	f363 0107 	bfi	r1, r3, #0, #8
    70ea:	4a0c      	ldr	r2, [pc, #48]	; (711c <le_conn_param_neg_reply+0x50>)
    70ec:	4b0c      	ldr	r3, [pc, #48]	; (7120 <le_conn_param_neg_reply+0x54>)
    70ee:	480d      	ldr	r0, [pc, #52]	; (7124 <le_conn_param_neg_reply+0x58>)
    70f0:	1a9b      	subs	r3, r3, r2
    70f2:	08db      	lsrs	r3, r3, #3
    70f4:	f363 118f 	bfi	r1, r3, #6, #10
}
    70f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    70fc:	f017 b9a1 	b.w	1e442 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    7100:	2103      	movs	r1, #3
    7102:	3008      	adds	r0, #8
    7104:	f01b fa41 	bl	2258a <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    7108:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    710a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    710c:	4621      	mov	r1, r4
    710e:	f242 0021 	movw	r0, #8225	; 0x2021
}
    7112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    7116:	f7ff bfa3 	b.w	7060 <bt_hci_cmd_send>
    711a:	bf00      	nop
    711c:	000233ec 	.word	0x000233ec
    7120:	0002345c 	.word	0x0002345c
    7124:	0002517a 	.word	0x0002517a

00007128 <le_conn_param_req>:
{
    7128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    712a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    712c:	78d9      	ldrb	r1, [r3, #3]
    712e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    7130:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    7132:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7136:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    713a:	7959      	ldrb	r1, [r3, #5]
    713c:	791a      	ldrb	r2, [r3, #4]
    713e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7142:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    7146:	799a      	ldrb	r2, [r3, #6]
    7148:	79d9      	ldrb	r1, [r3, #7]
    714a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    714e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7152:	7a1a      	ldrb	r2, [r3, #8]
    7154:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    7156:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7158:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    715c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    715e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    7162:	f001 fef1 	bl	8f48 <bt_conn_lookup_handle>
	if (!conn) {
    7166:	4605      	mov	r5, r0
    7168:	b990      	cbnz	r0, 7190 <le_conn_param_req+0x68>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    716a:	2301      	movs	r3, #1
    716c:	f04f 0200 	mov.w	r2, #0
    7170:	f363 0207 	bfi	r2, r3, #0, #8
    7174:	491f      	ldr	r1, [pc, #124]	; (71f4 <le_conn_param_req+0xcc>)
    7176:	4b20      	ldr	r3, [pc, #128]	; (71f8 <le_conn_param_req+0xd0>)
    7178:	4820      	ldr	r0, [pc, #128]	; (71fc <le_conn_param_req+0xd4>)
    717a:	1a5b      	subs	r3, r3, r1
    717c:	08db      	lsrs	r3, r3, #3
    717e:	4621      	mov	r1, r4
    7180:	f363 128f 	bfi	r2, r3, #6, #10
    7184:	f017 f96a 	bl	1e45c <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    7188:	2102      	movs	r1, #2
    718a:	4620      	mov	r0, r4
    718c:	f7ff ff9e 	bl	70cc <le_conn_param_neg_reply>
	if (!le_param_req(conn, &param)) {
    7190:	4669      	mov	r1, sp
    7192:	4628      	mov	r0, r5
    7194:	f001 fbe0 	bl	8958 <le_param_req>
    7198:	b940      	cbnz	r0, 71ac <le_conn_param_req+0x84>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    719a:	211e      	movs	r1, #30
    719c:	4620      	mov	r0, r4
    719e:	f7ff ff95 	bl	70cc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    71a2:	4628      	mov	r0, r5
    71a4:	f018 fcce 	bl	1fb44 <bt_conn_unref>
}
    71a8:	b003      	add	sp, #12
    71aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    71ac:	210e      	movs	r1, #14
    71ae:	f242 0020 	movw	r0, #8224	; 0x2020
    71b2:	f7ff ff25 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    71b6:	4607      	mov	r7, r0
    71b8:	2800      	cmp	r0, #0
    71ba:	d0f2      	beq.n	71a2 <le_conn_param_req+0x7a>
	cp = net_buf_add(buf, sizeof(*cp));
    71bc:	210e      	movs	r1, #14
    71be:	3008      	adds	r0, #8
    71c0:	f01b f9e3 	bl	2258a <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    71c4:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    71c6:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    71c8:	2100      	movs	r1, #0
    71ca:	f018 fa47 	bl	1f65c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    71ce:	f8bd 3000 	ldrh.w	r3, [sp]
    71d2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    71d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    71d8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    71da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    71de:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    71e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    71e4:	8026      	strh	r6, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    71e6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    71e8:	4639      	mov	r1, r7
    71ea:	f242 0020 	movw	r0, #8224	; 0x2020
    71ee:	f7ff ff37 	bl	7060 <bt_hci_cmd_send>
    71f2:	e7d6      	b.n	71a2 <le_conn_param_req+0x7a>
    71f4:	000233ec 	.word	0x000233ec
    71f8:	0002345c 	.word	0x0002345c
    71fc:	00025194 	.word	0x00025194

00007200 <bt_hci_cmd_send_sync>:
{
    7200:	b570      	push	{r4, r5, r6, lr}
    7202:	4615      	mov	r5, r2
    7204:	b086      	sub	sp, #24
	if (!buf) {
    7206:	460c      	mov	r4, r1
    7208:	b919      	cbnz	r1, 7212 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    720a:	f7ff fef9 	bl	7000 <bt_hci_cmd_create>
		if (!buf) {
    720e:	4604      	mov	r4, r0
    7210:	b3a0      	cbz	r0, 727c <bt_hci_cmd_send_sync+0x7c>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    7212:	2201      	movs	r2, #1
    7214:	2100      	movs	r1, #0
    7216:	4668      	mov	r0, sp
    7218:	f01b fe1b 	bl	22e52 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    721c:	4620      	mov	r0, r4
    721e:	f013 fc75 	bl	1ab0c <net_buf_id>
    7222:	4e18      	ldr	r6, [pc, #96]	; (7284 <bt_hci_cmd_send_sync+0x84>)
    7224:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    7228:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    722c:	4620      	mov	r0, r4
    722e:	f01b f9a8 	bl	22582 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7232:	4621      	mov	r1, r4
    7234:	4814      	ldr	r0, [pc, #80]	; (7288 <bt_hci_cmd_send_sync+0x88>)
    7236:	f01b f997 	bl	22568 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    723a:	f242 7110 	movw	r1, #10000	; 0x2710
    723e:	4668      	mov	r0, sp
    7240:	f015 f83c 	bl	1c2bc <z_impl_k_sem_take>
	if (cmd(buf)->status) {
    7244:	4620      	mov	r0, r4
    7246:	f013 fc61 	bl	1ab0c <net_buf_id>
    724a:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    724e:	b173      	cbz	r3, 726e <bt_hci_cmd_send_sync+0x6e>
		switch (cmd(buf)->status) {
    7250:	4620      	mov	r0, r4
    7252:	f013 fc5b 	bl	1ab0c <net_buf_id>
    7256:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    725a:	2b09      	cmp	r3, #9
			err = -EIO;
    725c:	bf0c      	ite	eq
    725e:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    7262:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    7266:	4620      	mov	r0, r4
    7268:	f013 fce4 	bl	1ac34 <net_buf_unref>
    726c:	e003      	b.n	7276 <bt_hci_cmd_send_sync+0x76>
		if (rsp) {
    726e:	2d00      	cmp	r5, #0
    7270:	d0f9      	beq.n	7266 <bt_hci_cmd_send_sync+0x66>
			*rsp = buf;
    7272:	602c      	str	r4, [r5, #0]
		err = 0;
    7274:	461d      	mov	r5, r3
}
    7276:	4628      	mov	r0, r5
    7278:	b006      	add	sp, #24
    727a:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOBUFS;
    727c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    7280:	e7f9      	b.n	7276 <bt_hci_cmd_send_sync+0x76>
    7282:	bf00      	nop
    7284:	20000538 	.word	0x20000538
    7288:	200071bc 	.word	0x200071bc

0000728c <set_le_scan_enable>:
{
    728c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    728e:	2102      	movs	r1, #2
{
    7290:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7292:	f242 000c 	movw	r0, #8204	; 0x200c
    7296:	f7ff feb3 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    729a:	4604      	mov	r4, r0
    729c:	b330      	cbz	r0, 72ec <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    729e:	2102      	movs	r1, #2
    72a0:	3008      	adds	r0, #8
    72a2:	f01b f972 	bl	2258a <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    72a6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    72a8:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    72aa:	d116      	bne.n	72da <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    72ac:	210d      	movs	r1, #13
    72ae:	4811      	ldr	r0, [pc, #68]	; (72f4 <set_le_scan_enable+0x68>)
    72b0:	f018 fb4f 	bl	1f952 <atomic_test_bit>
    72b4:	7058      	strb	r0, [r3, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    72b6:	4621      	mov	r1, r4
	cp->enable = enable;
    72b8:	701d      	strb	r5, [r3, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    72ba:	2200      	movs	r2, #0
    72bc:	f242 000c 	movw	r0, #8204	; 0x200c
    72c0:	f7ff ff9e 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    72c4:	4604      	mov	r4, r0
    72c6:	b930      	cbnz	r0, 72d6 <set_le_scan_enable+0x4a>
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    72c8:	2d01      	cmp	r5, #1
    72ca:	d109      	bne.n	72e0 <set_le_scan_enable+0x54>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    72cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    72d0:	4808      	ldr	r0, [pc, #32]	; (72f4 <set_le_scan_enable+0x68>)
    72d2:	f018 fb13 	bl	1f8fc <atomic_or>
}
    72d6:	4620      	mov	r0, r4
    72d8:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    72da:	2200      	movs	r2, #0
    72dc:	7042      	strb	r2, [r0, #1]
    72de:	e7ea      	b.n	72b6 <set_le_scan_enable+0x2a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    72e0:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    72e4:	4803      	ldr	r0, [pc, #12]	; (72f4 <set_le_scan_enable+0x68>)
    72e6:	f018 fb18 	bl	1f91a <atomic_and>
    72ea:	e7f4      	b.n	72d6 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    72ec:	f06f 0436 	mvn.w	r4, #54	; 0x36
    72f0:	e7f1      	b.n	72d6 <set_le_scan_enable+0x4a>
    72f2:	bf00      	nop
    72f4:	20007168 	.word	0x20007168

000072f8 <set_advertise_enable>:
{
    72f8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    72fa:	2101      	movs	r1, #1
{
    72fc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    72fe:	f242 000a 	movw	r0, #8202	; 0x200a
    7302:	f7ff fe7d 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    7306:	4604      	mov	r4, r0
    7308:	b1d8      	cbz	r0, 7342 <set_advertise_enable+0x4a>
	if (enable) {
    730a:	3008      	adds	r0, #8
    730c:	b18d      	cbz	r5, 7332 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    730e:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7310:	f01b f94a 	bl	225a8 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    7314:	4621      	mov	r1, r4
    7316:	2200      	movs	r2, #0
    7318:	f242 000a 	movw	r0, #8202	; 0x200a
    731c:	f7ff ff70 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7320:	4604      	mov	r4, r0
    7322:	b920      	cbnz	r0, 732e <set_advertise_enable+0x36>
	if (val) {
    7324:	b13d      	cbz	r5, 7336 <set_advertise_enable+0x3e>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7326:	2140      	movs	r1, #64	; 0x40
    7328:	4807      	ldr	r0, [pc, #28]	; (7348 <set_advertise_enable+0x50>)
    732a:	f018 fae7 	bl	1f8fc <atomic_or>
}
    732e:	4620      	mov	r0, r4
    7330:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7332:	4629      	mov	r1, r5
    7334:	e7ec      	b.n	7310 <set_advertise_enable+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7336:	f06f 0140 	mvn.w	r1, #64	; 0x40
    733a:	4803      	ldr	r0, [pc, #12]	; (7348 <set_advertise_enable+0x50>)
    733c:	f018 faed 	bl	1f91a <atomic_and>
    7340:	e7f5      	b.n	732e <set_advertise_enable+0x36>
		return -ENOBUFS;
    7342:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7346:	e7f2      	b.n	732e <set_advertise_enable+0x36>
    7348:	20007168 	.word	0x20007168

0000734c <hci_disconn_complete>:
{
    734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    734e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    7350:	7835      	ldrb	r5, [r6, #0]
    7352:	2d00      	cmp	r5, #0
    7354:	d139      	bne.n	73ca <hci_disconn_complete+0x7e>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    7356:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    735a:	4638      	mov	r0, r7
    735c:	f001 fdf4 	bl	8f48 <bt_conn_lookup_handle>
	if (!conn) {
    7360:	4604      	mov	r4, r0
    7362:	b9e8      	cbnz	r0, 73a0 <hci_disconn_complete+0x54>
		BT_ERR("Unable to look up conn with handle %u", handle);
    7364:	2301      	movs	r3, #1
    7366:	f04f 0200 	mov.w	r2, #0
    736a:	f363 0207 	bfi	r2, r3, #0, #8
    736e:	4917      	ldr	r1, [pc, #92]	; (73cc <hci_disconn_complete+0x80>)
    7370:	4b17      	ldr	r3, [pc, #92]	; (73d0 <hci_disconn_complete+0x84>)
    7372:	4818      	ldr	r0, [pc, #96]	; (73d4 <hci_disconn_complete+0x88>)
    7374:	1a5b      	subs	r3, r3, r1
    7376:	08db      	lsrs	r3, r3, #3
    7378:	f363 128f 	bfi	r2, r3, #6, #10
    737c:	4639      	mov	r1, r7
    737e:	f017 f86d 	bl	1e45c <log_1>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    7382:	2109      	movs	r1, #9
    7384:	4814      	ldr	r0, [pc, #80]	; (73d8 <hci_disconn_complete+0x8c>)
    7386:	f018 fae4 	bl	1f952 <atomic_test_bit>
    738a:	b1f0      	cbz	r0, 73ca <hci_disconn_complete+0x7e>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    738c:	2106      	movs	r1, #6
    738e:	4812      	ldr	r0, [pc, #72]	; (73d8 <hci_disconn_complete+0x8c>)
    7390:	f018 fadf 	bl	1f952 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    7394:	b9c8      	cbnz	r0, 73ca <hci_disconn_complete+0x7e>
		set_advertise_enable(true);
    7396:	2001      	movs	r0, #1
}
    7398:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		set_advertise_enable(true);
    739c:	f7ff bfac 	b.w	72f8 <set_advertise_enable>
	conn->err = evt->reason;
    73a0:	78f3      	ldrb	r3, [r6, #3]
    73a2:	7243      	strb	r3, [r0, #9]
	k_thread_foreach(hci_stack_dump, "HCI");
    73a4:	490d      	ldr	r1, [pc, #52]	; (73dc <hci_disconn_complete+0x90>)
    73a6:	480e      	ldr	r0, [pc, #56]	; (73e0 <hci_disconn_complete+0x94>)
    73a8:	f01b fd65 	bl	22e76 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    73ac:	4620      	mov	r0, r4
    73ae:	4629      	mov	r1, r5
    73b0:	f001 fd0a 	bl	8dc8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    73b4:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    73b6:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    73b8:	4620      	mov	r0, r4
	if (conn->type != BT_CONN_TYPE_LE) {
    73ba:	b11b      	cbz	r3, 73c4 <hci_disconn_complete+0x78>
}
    73bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    73c0:	f018 bbc0 	b.w	1fb44 <bt_conn_unref>
	bt_conn_unref(conn);
    73c4:	f018 fbbe 	bl	1fb44 <bt_conn_unref>
    73c8:	e7db      	b.n	7382 <hci_disconn_complete+0x36>
}
    73ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73cc:	000233ec 	.word	0x000233ec
    73d0:	0002345c 	.word	0x0002345c
    73d4:	00025070 	.word	0x00025070
    73d8:	20007168 	.word	0x20007168
    73dc:	00025096 	.word	0x00025096
    73e0:	0001f8f5 	.word	0x0001f8f5

000073e4 <enh_conn_complete>:
{
    73e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    73e8:	7803      	ldrb	r3, [r0, #0]
{
    73ea:	4605      	mov	r5, r0
	if (evt->status) {
    73ec:	b32b      	cbz	r3, 743a <enh_conn_complete+0x56>
		conn = find_pending_connect(NULL);
    73ee:	2000      	movs	r0, #0
    73f0:	f018 faa2 	bl	1f938 <find_pending_connect>
		if (!conn) {
    73f4:	4604      	mov	r4, r0
    73f6:	2800      	cmp	r0, #0
    73f8:	d05a      	beq.n	74b0 <enh_conn_complete+0xcc>
		conn->err = evt->status;
    73fa:	7829      	ldrb	r1, [r5, #0]
    73fc:	7241      	strb	r1, [r0, #9]
			if (conn->err == BT_HCI_ERR_ADV_TIMEOUT) {
    73fe:	293c      	cmp	r1, #60	; 0x3c
    7400:	d10c      	bne.n	741c <enh_conn_complete+0x38>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7402:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7406:	4863      	ldr	r0, [pc, #396]	; (7594 <enh_conn_complete+0x1b0>)
    7408:	f018 fa87 	bl	1f91a <atomic_and>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    740c:	2100      	movs	r1, #0
    740e:	4620      	mov	r0, r4
    7410:	f001 fcda 	bl	8dc8 <bt_conn_set_state>
	bt_conn_unref(conn);
    7414:	4620      	mov	r0, r4
    7416:	f018 fb95 	bl	1fb44 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
    741a:	e049      	b.n	74b0 <enh_conn_complete+0xcc>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    741c:	2302      	movs	r3, #2
    741e:	f04f 0200 	mov.w	r2, #0
    7422:	f363 0207 	bfi	r2, r3, #0, #8
    7426:	485c      	ldr	r0, [pc, #368]	; (7598 <enh_conn_complete+0x1b4>)
    7428:	4b5c      	ldr	r3, [pc, #368]	; (759c <enh_conn_complete+0x1b8>)
    742a:	1a1b      	subs	r3, r3, r0
    742c:	08db      	lsrs	r3, r3, #3
    742e:	f363 128f 	bfi	r2, r3, #6, #10
    7432:	485b      	ldr	r0, [pc, #364]	; (75a0 <enh_conn_complete+0x1bc>)
    7434:	f017 f812 	bl	1e45c <log_1>
		bt_conn_unref(conn);
    7438:	e7ec      	b.n	7414 <enh_conn_complete+0x30>
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    743a:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    743c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    7440:	4621      	mov	r1, r4
    7442:	a802      	add	r0, sp, #8
    7444:	f018 fa57 	bl	1f8f6 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7448:	f89d 3008 	ldrb.w	r3, [sp, #8]
    744c:	3b02      	subs	r3, #2
    744e:	b2db      	uxtb	r3, r3
    7450:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    7452:	b2be      	uxth	r6, r7
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7454:	d82f      	bhi.n	74b6 <enh_conn_complete+0xd2>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    7456:	2206      	movs	r2, #6
    7458:	f105 0111 	add.w	r1, r5, #17
    745c:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7460:	f88d 3008 	strb.w	r3, [sp, #8]
    7464:	f018 f8d0 	bl	1f608 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    7468:	2301      	movs	r3, #1
    746a:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(&id_addr);
    746e:	a802      	add	r0, sp, #8
    7470:	f018 fa62 	bl	1f938 <find_pending_connect>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    7474:	78eb      	ldrb	r3, [r5, #3]
    7476:	2b01      	cmp	r3, #1
	conn = find_pending_connect(&id_addr);
    7478:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    747a:	d109      	bne.n	7490 <enh_conn_complete+0xac>
    747c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7480:	4844      	ldr	r0, [pc, #272]	; (7594 <enh_conn_complete+0x1b0>)
    7482:	f018 fa4a 	bl	1f91a <atomic_and>
		if (!conn) {
    7486:	b9dc      	cbnz	r4, 74c0 <enh_conn_complete+0xdc>
			conn = bt_conn_add_le(&id_addr);
    7488:	a802      	add	r0, sp, #8
    748a:	f001 fc6b 	bl	8d64 <bt_conn_add_le>
    748e:	4604      	mov	r4, r0
	if (!conn) {
    7490:	b9b4      	cbnz	r4, 74c0 <enh_conn_complete+0xdc>
		BT_ERR("Unable to add new conn for handle %u", handle);
    7492:	2301      	movs	r3, #1
    7494:	f04f 0200 	mov.w	r2, #0
    7498:	f363 0207 	bfi	r2, r3, #0, #8
    749c:	493e      	ldr	r1, [pc, #248]	; (7598 <enh_conn_complete+0x1b4>)
    749e:	4b3f      	ldr	r3, [pc, #252]	; (759c <enh_conn_complete+0x1b8>)
    74a0:	4840      	ldr	r0, [pc, #256]	; (75a4 <enh_conn_complete+0x1c0>)
    74a2:	1a5b      	subs	r3, r3, r1
    74a4:	08db      	lsrs	r3, r3, #3
    74a6:	f363 128f 	bfi	r2, r3, #6, #10
    74aa:	4631      	mov	r1, r6
    74ac:	f016 ffd6 	bl	1e45c <log_1>
}
    74b0:	b004      	add	sp, #16
    74b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    74b6:	4621      	mov	r1, r4
    74b8:	4668      	mov	r0, sp
    74ba:	f018 fa1c 	bl	1f8f6 <bt_addr_le_copy>
    74be:	e7d6      	b.n	746e <enh_conn_complete+0x8a>
	conn->handle = handle;
    74c0:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    74c2:	a902      	add	r1, sp, #8
	conn->handle = handle;
    74c4:	f820 7b48 	strh.w	r7, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    74c8:	f018 fa15 	bl	1f8f6 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    74cc:	7e2a      	ldrb	r2, [r5, #24]
    74ce:	7deb      	ldrb	r3, [r5, #23]
    74d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    74d4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    74d8:	7eaa      	ldrb	r2, [r5, #26]
    74da:	7e6b      	ldrb	r3, [r5, #25]
    74dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    74e0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    74e4:	7eeb      	ldrb	r3, [r5, #27]
    74e6:	7f2a      	ldrb	r2, [r5, #28]
    74e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    74ec:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    74f0:	78ef      	ldrb	r7, [r5, #3]
    74f2:	70e7      	strb	r7, [r4, #3]
	conn->err = 0U;
    74f4:	f04f 0800 	mov.w	r8, #0
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    74f8:	2f01      	cmp	r7, #1
	conn->err = 0U;
    74fa:	f884 8009 	strb.w	r8, [r4, #9]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    74fe:	d11f      	bne.n	7540 <enh_conn_complete+0x15c>
		conn->id = bt_dev.adv_id;
    7500:	4e29      	ldr	r6, [pc, #164]	; (75a8 <enh_conn_complete+0x1c4>)
    7502:	7a33      	ldrb	r3, [r6, #8]
    7504:	7223      	strb	r3, [r4, #8]
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    7506:	4669      	mov	r1, sp
    7508:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    750c:	f018 f9f3 	bl	1f8f6 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    7510:	7a21      	ldrb	r1, [r4, #8]
    7512:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    7516:	4431      	add	r1, r6
    7518:	f104 0056 	add.w	r0, r4, #86	; 0x56
    751c:	f018 f9eb 	bl	1f8f6 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    7520:	2109      	movs	r1, #9
    7522:	f106 0070 	add.w	r0, r6, #112	; 0x70
    7526:	f018 fa14 	bl	1f952 <atomic_test_bit>
    752a:	b148      	cbz	r0, 7540 <enh_conn_complete+0x15c>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    752c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
    7530:	4642      	mov	r2, r8
    7532:	f001 0340 	and.w	r3, r1, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    7536:	4313      	orrs	r3, r2
    7538:	d002      	beq.n	7540 <enh_conn_complete+0x15c>
			set_advertise_enable(true);
    753a:	4638      	mov	r0, r7
    753c:	f7ff fedc 	bl	72f8 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    7540:	2104      	movs	r1, #4
    7542:	4620      	mov	r0, r4
    7544:	f001 fc40 	bl	8dc8 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    7548:	7aa3      	ldrb	r3, [r4, #10]
    754a:	2b04      	cmp	r3, #4
    754c:	f47f af62 	bne.w	7414 <enh_conn_complete+0x30>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    7550:	78eb      	ldrb	r3, [r5, #3]
    7552:	b123      	cbz	r3, 755e <enh_conn_complete+0x17a>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    7554:	4b14      	ldr	r3, [pc, #80]	; (75a8 <enh_conn_complete+0x1c4>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    7556:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    755a:	071b      	lsls	r3, r3, #28
    755c:	d512      	bpl.n	7584 <enh_conn_complete+0x1a0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    755e:	2102      	movs	r1, #2
    7560:	f242 0016 	movw	r0, #8214	; 0x2016
    7564:	f7ff fd4c 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    7568:	4605      	mov	r5, r0
    756a:	b158      	cbz	r0, 7584 <enh_conn_complete+0x1a0>
	cp = net_buf_add(buf, sizeof(*cp));
    756c:	2102      	movs	r1, #2
    756e:	3008      	adds	r0, #8
    7570:	f01b f80b 	bl	2258a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7574:	8823      	ldrh	r3, [r4, #0]
    7576:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    7578:	4629      	mov	r1, r5
    757a:	f242 0016 	movw	r0, #8214	; 0x2016
    757e:	f7ff fd6f 	bl	7060 <bt_hci_cmd_send>
		if (!err) {
    7582:	e747      	b.n	7414 <enh_conn_complete+0x30>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7584:	78e3      	ldrb	r3, [r4, #3]
    7586:	2b01      	cmp	r3, #1
    7588:	f47f af44 	bne.w	7414 <enh_conn_complete+0x30>
		slave_update_conn_param(conn);
    758c:	4620      	mov	r0, r4
    758e:	f7ff fcf1 	bl	6f74 <slave_update_conn_param>
    7592:	e73f      	b.n	7414 <enh_conn_complete+0x30>
    7594:	20007168 	.word	0x20007168
    7598:	000233ec 	.word	0x000233ec
    759c:	0002345c 	.word	0x0002345c
    75a0:	00024f86 	.word	0x00024f86
    75a4:	00024f9f 	.word	0x00024f9f
    75a8:	200070f8 	.word	0x200070f8

000075ac <set_random_address>:
{
    75ac:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    75ae:	4d15      	ldr	r5, [pc, #84]	; (7604 <set_random_address+0x58>)
    75b0:	2206      	movs	r2, #6
    75b2:	f105 010a 	add.w	r1, r5, #10
    75b6:	4606      	mov	r6, r0
    75b8:	f017 ffff 	bl	1f5ba <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    75bc:	4604      	mov	r4, r0
    75be:	b1d8      	cbz	r0, 75f8 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    75c0:	2106      	movs	r1, #6
    75c2:	f242 0005 	movw	r0, #8197	; 0x2005
    75c6:	f7ff fd1b 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    75ca:	4604      	mov	r4, r0
    75cc:	b1b0      	cbz	r0, 75fc <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    75ce:	2206      	movs	r2, #6
    75d0:	4631      	mov	r1, r6
    75d2:	3008      	adds	r0, #8
    75d4:	f01a ffdf 	bl	22596 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    75d8:	4621      	mov	r1, r4
    75da:	2200      	movs	r2, #0
    75dc:	f242 0005 	movw	r0, #8197	; 0x2005
    75e0:	f7ff fe0e 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    75e4:	4604      	mov	r4, r0
    75e6:	b938      	cbnz	r0, 75f8 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    75e8:	2206      	movs	r2, #6
    75ea:	4631      	mov	r1, r6
    75ec:	f105 000a 	add.w	r0, r5, #10
    75f0:	f018 f80a 	bl	1f608 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    75f4:	2301      	movs	r3, #1
    75f6:	726b      	strb	r3, [r5, #9]
}
    75f8:	4620      	mov	r0, r4
    75fa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    75fc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7600:	e7fa      	b.n	75f8 <set_random_address+0x4c>
    7602:	bf00      	nop
    7604:	200070f8 	.word	0x200070f8

00007608 <set_ad>:
{
    7608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    760c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    760e:	2120      	movs	r1, #32
{
    7610:	4682      	mov	sl, r0
    7612:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7614:	f7ff fcf4 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    7618:	4607      	mov	r7, r0
    761a:	2800      	cmp	r0, #0
    761c:	d05a      	beq.n	76d4 <set_ad+0xcc>
	set_data = net_buf_add(buf, sizeof(*set_data));
    761e:	2120      	movs	r1, #32
    7620:	3008      	adds	r0, #8
    7622:	f01a ffb2 	bl	2258a <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    7626:	2220      	movs	r2, #32
    7628:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    762a:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    762c:	f018 f816 	bl	1f65c <memset>
	for (c = 0; c < ad_len; c++) {
    7630:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    7634:	454c      	cmp	r4, r9
    7636:	d106      	bne.n	7646 <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7638:	4639      	mov	r1, r7
    763a:	4650      	mov	r0, sl
    763c:	2200      	movs	r2, #0
}
    763e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7642:	f7ff bddd 	b.w	7200 <bt_hci_cmd_send_sync>
		for (i = 0; i < ad[c].len; i++) {
    7646:	6826      	ldr	r6, [r4, #0]
    7648:	f04f 0b00 	mov.w	fp, #0
    764c:	6863      	ldr	r3, [r4, #4]
    764e:	459b      	cmp	fp, r3
    7650:	d301      	bcc.n	7656 <set_ad+0x4e>
    7652:	3408      	adds	r4, #8
    7654:	e7ee      	b.n	7634 <set_ad+0x2c>
			if (set_data->len + len + 2 > 31) {
    7656:	782b      	ldrb	r3, [r5, #0]
			int len = data[i].data_len;
    7658:	7872      	ldrb	r2, [r6, #1]
			u8_t type = data[i].type;
    765a:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
    765c:	1c98      	adds	r0, r3, #2
    765e:	eb00 0c02 	add.w	ip, r0, r2
    7662:	f1bc 0f1f 	cmp.w	ip, #31
    7666:	dd1a      	ble.n	769e <set_ad+0x96>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7668:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
    766a:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    766e:	d100      	bne.n	7672 <set_ad+0x6a>
    7670:	b9a2      	cbnz	r2, 769c <set_ad+0x94>
					net_buf_unref(buf);
    7672:	4638      	mov	r0, r7
    7674:	f013 fade 	bl	1ac34 <net_buf_unref>
					BT_ERR("Too big advertising data");
    7678:	2301      	movs	r3, #1
    767a:	f04f 0100 	mov.w	r1, #0
    767e:	f363 0107 	bfi	r1, r3, #0, #8
    7682:	4a16      	ldr	r2, [pc, #88]	; (76dc <set_ad+0xd4>)
    7684:	4b16      	ldr	r3, [pc, #88]	; (76e0 <set_ad+0xd8>)
    7686:	4817      	ldr	r0, [pc, #92]	; (76e4 <set_ad+0xdc>)
    7688:	1a9b      	subs	r3, r3, r2
    768a:	08db      	lsrs	r3, r3, #3
    768c:	f363 118f 	bfi	r1, r3, #6, #10
    7690:	f016 fed7 	bl	1e442 <log_0>
					return -EINVAL;
    7694:	f06f 0015 	mvn.w	r0, #21
}
    7698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    769c:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
    769e:	eb05 0c03 	add.w	ip, r5, r3
    76a2:	3301      	adds	r3, #1
    76a4:	fa4f f882 	sxtb.w	r8, r2
			set_data->data[set_data->len++] = type;
    76a8:	fa55 f383 	uxtab	r3, r5, r3
			set_data->data[set_data->len++] = len + 1;
    76ac:	f108 0e01 	add.w	lr, r8, #1
			set_data->data[set_data->len++] = type;
    76b0:	b2c0      	uxtb	r0, r0
			set_data->data[set_data->len++] = len + 1;
    76b2:	f88c e001 	strb.w	lr, [ip, #1]
			set_data->data[set_data->len++] = type;
    76b6:	7028      	strb	r0, [r5, #0]
    76b8:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
    76ba:	3001      	adds	r0, #1
    76bc:	6871      	ldr	r1, [r6, #4]
    76be:	4428      	add	r0, r5
    76c0:	f017 ffa2 	bl	1f608 <memcpy>
			set_data->len += len;
    76c4:	782b      	ldrb	r3, [r5, #0]
    76c6:	4498      	add	r8, r3
    76c8:	f885 8000 	strb.w	r8, [r5]
		for (i = 0; i < ad[c].len; i++) {
    76cc:	f10b 0b01 	add.w	fp, fp, #1
    76d0:	3608      	adds	r6, #8
    76d2:	e7bb      	b.n	764c <set_ad+0x44>
		return -ENOBUFS;
    76d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    76d8:	e7de      	b.n	7698 <set_ad+0x90>
    76da:	bf00      	nop
    76dc:	000233ec 	.word	0x000233ec
    76e0:	0002345c 	.word	0x0002345c
    76e4:	000251b8 	.word	0x000251b8

000076e8 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    76e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76ec:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    76ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    76f2:	4615      	mov	r5, r2
    76f4:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    76f6:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    76f8:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    76fa:	a902      	add	r1, sp, #8
    76fc:	f242 0008 	movw	r0, #8200	; 0x2008
{
    7700:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    7704:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    7708:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    770c:	f7ff ff7c 	bl	7608 <set_ad>
	if (err) {
    7710:	4604      	mov	r4, r0
    7712:	bb10      	cbnz	r0, 775a <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    7714:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    7718:	f1b8 0f00 	cmp.w	r8, #0
    771c:	d011      	beq.n	7742 <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    771e:	b115      	cbz	r5, 7726 <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    7720:	4602      	mov	r2, r0
    7722:	42b2      	cmp	r2, r6
    7724:	d11d      	bne.n	7762 <le_adv_update+0x7a>
			}
		}

		name = bt_get_name();

		d[1].data = (&(struct bt_data)BT_DATA(
    7726:	4d14      	ldr	r5, [pc, #80]	; (7778 <le_adv_update+0x90>)
    7728:	2309      	movs	r3, #9
    772a:	4628      	mov	r0, r5
    772c:	f88d 3000 	strb.w	r3, [sp]
    7730:	f017 ff30 	bl	1f594 <strlen>
					BT_DATA_NAME_COMPLETE,
					name, strlen(name)));
		d[1].len = 1;
    7734:	2301      	movs	r3, #1
		d[1].data = (&(struct bt_data)BT_DATA(
    7736:	f88d 0001 	strb.w	r0, [sp, #1]
    773a:	9501      	str	r5, [sp, #4]
    773c:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    7740:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    7742:	9b02      	ldr	r3, [sp, #8]
    7744:	b913      	cbnz	r3, 774c <le_adv_update+0x64>
    7746:	9b04      	ldr	r3, [sp, #16]
    7748:	b903      	cbnz	r3, 774c <le_adv_update+0x64>
    774a:	b137      	cbz	r7, 775a <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    774c:	2202      	movs	r2, #2
    774e:	a902      	add	r1, sp, #8
    7750:	f242 0009 	movw	r0, #8201	; 0x2009
    7754:	f7ff ff58 	bl	7608 <set_ad>
    7758:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    775a:	4620      	mov	r0, r4
    775c:	b006      	add	sp, #24
    775e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    7762:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    7766:	3908      	subs	r1, #8
    7768:	2901      	cmp	r1, #1
    776a:	d901      	bls.n	7770 <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    776c:	3201      	adds	r2, #1
    776e:	e7d8      	b.n	7722 <le_adv_update+0x3a>
				return -EINVAL;
    7770:	f06f 0415 	mvn.w	r4, #21
    7774:	e7f1      	b.n	775a <le_adv_update+0x72>
    7776:	bf00      	nop
    7778:	00025173 	.word	0x00025173

0000777c <bt_le_scan_update>:
{
    777c:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    777e:	210b      	movs	r1, #11
    7780:	4808      	ldr	r0, [pc, #32]	; (77a4 <bt_le_scan_update+0x28>)
    7782:	f018 f8e6 	bl	1f952 <atomic_test_bit>
    7786:	4603      	mov	r3, r0
    7788:	b948      	cbnz	r0, 779e <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    778a:	210a      	movs	r1, #10
    778c:	4805      	ldr	r0, [pc, #20]	; (77a4 <bt_le_scan_update+0x28>)
    778e:	f018 f8e0 	bl	1f952 <atomic_test_bit>
    7792:	b120      	cbz	r0, 779e <bt_le_scan_update+0x22>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    7794:	4618      	mov	r0, r3
}
    7796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    779a:	f7ff bd77 	b.w	728c <set_le_scan_enable>
}
    779e:	2000      	movs	r0, #0
    77a0:	bd08      	pop	{r3, pc}
    77a2:	bf00      	nop
    77a4:	20007168 	.word	0x20007168

000077a8 <bt_init>:
{
    77a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    77aa:	4d5f      	ldr	r5, [pc, #380]	; (7928 <bt_init+0x180>)
    77ac:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    77b0:	6899      	ldr	r1, [r3, #8]
    77b2:	f011 0101 	ands.w	r1, r1, #1
{
    77b6:	b08b      	sub	sp, #44	; 0x2c
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    77b8:	d124      	bne.n	7804 <bt_init+0x5c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    77ba:	aa05      	add	r2, sp, #20
    77bc:	f640 4003 	movw	r0, #3075	; 0xc03
    77c0:	f7ff fd1e 	bl	7200 <bt_hci_cmd_send_sync>
		if (err) {
    77c4:	4604      	mov	r4, r0
    77c6:	2800      	cmp	r0, #0
    77c8:	f040 80ab 	bne.w	7922 <bt_init+0x17a>
		hci_reset_complete(rsp);
    77cc:	9b05      	ldr	r3, [sp, #20]
	u8_t status = buf->data[0];
    77ce:	689b      	ldr	r3, [r3, #8]
	if (status) {
    77d0:	781b      	ldrb	r3, [r3, #0]
    77d2:	b9a3      	cbnz	r3, 77fe <bt_init+0x56>
	scan_dev_found_cb = NULL;
    77d4:	4a55      	ldr	r2, [pc, #340]	; (792c <bt_init+0x184>)
    77d6:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    77d8:	462b      	mov	r3, r5
    77da:	f3bf 8f5b 	dmb	ish
    77de:	f853 2f70 	ldr.w	r2, [r3, #112]!
    77e2:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    77e6:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    77ea:	f3bf 8f5b 	dmb	ish
    77ee:	e853 1f00 	ldrex	r1, [r3]
    77f2:	e843 2000 	strex	r0, r2, [r3]
    77f6:	2800      	cmp	r0, #0
    77f8:	d1f9      	bne.n	77ee <bt_init+0x46>
    77fa:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    77fe:	9805      	ldr	r0, [sp, #20]
    7800:	f013 fa18 	bl	1ac34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    7804:	aa05      	add	r2, sp, #20
    7806:	2100      	movs	r1, #0
    7808:	f241 0003 	movw	r0, #4099	; 0x1003
    780c:	f7ff fcf8 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7810:	4604      	mov	r4, r0
    7812:	2800      	cmp	r0, #0
    7814:	f040 8085 	bne.w	7922 <bt_init+0x17a>
	read_local_features_complete(rsp);
    7818:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    781a:	4845      	ldr	r0, [pc, #276]	; (7930 <bt_init+0x188>)
    781c:	6899      	ldr	r1, [r3, #8]
    781e:	2208      	movs	r2, #8
    7820:	3101      	adds	r1, #1
    7822:	f017 fef1 	bl	1f608 <memcpy>
	net_buf_unref(rsp);
    7826:	9805      	ldr	r0, [sp, #20]
    7828:	f013 fa04 	bl	1ac34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    782c:	4621      	mov	r1, r4
    782e:	aa05      	add	r2, sp, #20
    7830:	f241 0001 	movw	r0, #4097	; 0x1001
    7834:	f7ff fce4 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7838:	4604      	mov	r4, r0
    783a:	2800      	cmp	r0, #0
    783c:	d171      	bne.n	7922 <bt_init+0x17a>
	read_local_ver_complete(rsp);
    783e:	9805      	ldr	r0, [sp, #20]
    7840:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    7842:	785a      	ldrb	r2, [r3, #1]
    7844:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    7846:	78d9      	ldrb	r1, [r3, #3]
    7848:	789a      	ldrb	r2, [r3, #2]
    784a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    784e:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    7850:	791a      	ldrb	r2, [r3, #4]
    7852:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    7854:	7a19      	ldrb	r1, [r3, #8]
    7856:	79da      	ldrb	r2, [r3, #7]
    7858:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    785c:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    785e:	795a      	ldrb	r2, [r3, #5]
    7860:	799b      	ldrb	r3, [r3, #6]
    7862:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    7866:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    7868:	f013 f9e4 	bl	1ac34 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    786c:	2103      	movs	r1, #3
    786e:	4831      	ldr	r0, [pc, #196]	; (7934 <bt_init+0x18c>)
    7870:	f018 f86f 	bl	1f952 <atomic_test_bit>
    7874:	4601      	mov	r1, r0
    7876:	bb48      	cbnz	r0, 78cc <bt_init+0x124>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    7878:	aa05      	add	r2, sp, #20
    787a:	f241 0009 	movw	r0, #4105	; 0x1009
    787e:	f7ff fcbf 	bl	7200 <bt_hci_cmd_send_sync>
		if (err) {
    7882:	4604      	mov	r4, r0
    7884:	2800      	cmp	r0, #0
    7886:	d14c      	bne.n	7922 <bt_init+0x17a>
		read_bdaddr_complete(rsp);
    7888:	9b05      	ldr	r3, [sp, #20]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    788a:	9001      	str	r0, [sp, #4]
    788c:	689e      	ldr	r6, [r3, #8]
    788e:	f8ad 0008 	strh.w	r0, [sp, #8]
    7892:	3601      	adds	r6, #1
	return memcmp(a, b, sizeof(*a));
    7894:	2206      	movs	r2, #6
    7896:	a901      	add	r1, sp, #4
    7898:	4630      	mov	r0, r6
    789a:	f017 fe8e 	bl	1f5ba <memcmp>
    789e:	b190      	cbz	r0, 78c6 <bt_init+0x11e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    78a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78a4:	2206      	movs	r2, #6
    78a6:	a903      	add	r1, sp, #12
    78a8:	4630      	mov	r0, r6
    78aa:	9303      	str	r3, [sp, #12]
    78ac:	f8ad 3010 	strh.w	r3, [sp, #16]
    78b0:	f017 fe83 	bl	1f5ba <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    78b4:	b138      	cbz	r0, 78c6 <bt_init+0x11e>
	memcpy(dst, src, sizeof(*dst));
    78b6:	2206      	movs	r2, #6
    78b8:	4631      	mov	r1, r6
    78ba:	481f      	ldr	r0, [pc, #124]	; (7938 <bt_init+0x190>)
    78bc:	f017 fea4 	bl	1f608 <memcpy>
	bt_dev.id_count = 1U;
    78c0:	2301      	movs	r3, #1
	bt_dev.id_addr[0].type = BT_ADDR_LE_PUBLIC;
    78c2:	702c      	strb	r4, [r5, #0]
	bt_dev.id_count = 1U;
    78c4:	71eb      	strb	r3, [r5, #7]
		net_buf_unref(rsp);
    78c6:	9805      	ldr	r0, [sp, #20]
    78c8:	f013 f9b4 	bl	1ac34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    78cc:	aa05      	add	r2, sp, #20
    78ce:	2100      	movs	r1, #0
    78d0:	f241 0002 	movw	r0, #4098	; 0x1002
    78d4:	f7ff fc94 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    78d8:	4604      	mov	r4, r0
    78da:	bb10      	cbnz	r0, 7922 <bt_init+0x17a>
	read_supported_commands_complete(rsp);
    78dc:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.supported_commands, rp->commands,
    78de:	4817      	ldr	r0, [pc, #92]	; (793c <bt_init+0x194>)
    78e0:	6899      	ldr	r1, [r3, #8]
    78e2:	2240      	movs	r2, #64	; 0x40
    78e4:	3101      	adds	r1, #1
    78e6:	f017 fe8f 	bl	1f608 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    78ea:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
    78ee:	9805      	ldr	r0, [sp, #20]
		bt_dev.supported_commands[34] |= 0x04;
    78f0:	f043 0306 	orr.w	r3, r3, #6
    78f4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
    78f8:	f013 f99c 	bl	1ac34 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    78fc:	7f2b      	ldrb	r3, [r5, #28]
    78fe:	0659      	lsls	r1, r3, #25
    7900:	d424      	bmi.n	794c <bt_init+0x1a4>
		BT_ERR("Non-LE capable controller detected!");
    7902:	2301      	movs	r3, #1
    7904:	f04f 0100 	mov.w	r1, #0
    7908:	f363 0107 	bfi	r1, r3, #0, #8
    790c:	4a0c      	ldr	r2, [pc, #48]	; (7940 <bt_init+0x198>)
    790e:	4b0d      	ldr	r3, [pc, #52]	; (7944 <bt_init+0x19c>)
    7910:	480d      	ldr	r0, [pc, #52]	; (7948 <bt_init+0x1a0>)
    7912:	1a9b      	subs	r3, r3, r2
    7914:	08db      	lsrs	r3, r3, #3
    7916:	f363 118f 	bfi	r1, r3, #6, #10
    791a:	f016 fd92 	bl	1e442 <log_0>
		return -ENODEV;
    791e:	f06f 0412 	mvn.w	r4, #18
}
    7922:	4620      	mov	r0, r4
    7924:	b00b      	add	sp, #44	; 0x2c
    7926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7928:	200070f8 	.word	0x200070f8
    792c:	20000564 	.word	0x20000564
    7930:	20007110 	.word	0x20007110
    7934:	20007168 	.word	0x20007168
    7938:	200070f9 	.word	0x200070f9
    793c:	20007118 	.word	0x20007118
    7940:	000233ec 	.word	0x000233ec
    7944:	0002345c 	.word	0x0002345c
    7948:	00024c88 	.word	0x00024c88
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    794c:	4621      	mov	r1, r4
    794e:	aa05      	add	r2, sp, #20
    7950:	f242 0003 	movw	r0, #8195	; 0x2003
    7954:	f7ff fc54 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7958:	4604      	mov	r4, r0
    795a:	2800      	cmp	r0, #0
    795c:	d1e1      	bne.n	7922 <bt_init+0x17a>
	read_le_features_complete(rsp);
    795e:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    7960:	48c0      	ldr	r0, [pc, #768]	; (7c64 <bt_init+0x4bc>)
    7962:	6899      	ldr	r1, [r3, #8]
    7964:	2208      	movs	r2, #8
    7966:	3101      	adds	r1, #1
    7968:	f017 fe4e 	bl	1f608 <memcpy>
	net_buf_unref(rsp);
    796c:	9805      	ldr	r0, [sp, #20]
    796e:	f013 f961 	bl	1ac34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    7972:	4621      	mov	r1, r4
    7974:	aa05      	add	r2, sp, #20
    7976:	f242 0002 	movw	r0, #8194	; 0x2002
    797a:	f7ff fc41 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    797e:	4604      	mov	r4, r0
    7980:	2800      	cmp	r0, #0
    7982:	d1ce      	bne.n	7922 <bt_init+0x17a>
	le_read_buffer_size_complete(rsp);
    7984:	9b05      	ldr	r3, [sp, #20]
    7986:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    7988:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    798c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
    7990:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
    7992:	b139      	cbz	r1, 79a4 <bt_init+0x1fc>
	le_max_num = MIN(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    7994:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    7996:	48b4      	ldr	r0, [pc, #720]	; (7c68 <bt_init+0x4c0>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    7998:	2a04      	cmp	r2, #4
    799a:	bf28      	it	cs
    799c:	2204      	movcs	r2, #4
    799e:	4611      	mov	r1, r2
    79a0:	f01b fa57 	bl	22e52 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    79a4:	9805      	ldr	r0, [sp, #20]
    79a6:	f013 f945 	bl	1ac34 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    79aa:	7f2c      	ldrb	r4, [r5, #28]
    79ac:	f014 0420 	ands.w	r4, r4, #32
    79b0:	f000 80a7 	beq.w	7b02 <bt_init+0x35a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    79b4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    79b8:	071a      	lsls	r2, r3, #28
    79ba:	f100 80be 	bmi.w	7b3a <bt_init+0x392>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    79be:	2108      	movs	r1, #8
    79c0:	f242 0001 	movw	r0, #8193	; 0x2001
    79c4:	f7ff fb1c 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    79c8:	4604      	mov	r4, r0
    79ca:	2800      	cmp	r0, #0
    79cc:	f000 80a0 	beq.w	7b10 <bt_init+0x368>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    79d0:	2108      	movs	r1, #8
    79d2:	4408      	add	r0, r1
    79d4:	f01a fdd9 	bl	2258a <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    79d8:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    79dc:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    79e0:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    79e4:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    79e8:	bf0c      	ite	eq
    79ea:	230f      	moveq	r3, #15
    79ec:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    79ee:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    79f0:	bf08      	it	eq
    79f2:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    79f6:	2200      	movs	r2, #0
    79f8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    79fa:	0a1b      	lsrs	r3, r3, #8
    79fc:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    79fe:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    7a00:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    7a02:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    7a04:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    7a06:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    7a08:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    7a0a:	4621      	mov	r1, r4
    7a0c:	f242 0001 	movw	r0, #8193	; 0x2001
    7a10:	f7ff fbf6 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7a14:	4604      	mov	r4, r0
    7a16:	2800      	cmp	r0, #0
    7a18:	d183      	bne.n	7922 <bt_init+0x17a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    7a1a:	7f2b      	ldrb	r3, [r5, #28]
    7a1c:	069b      	lsls	r3, r3, #26
    7a1e:	d421      	bmi.n	7a64 <bt_init+0x2bc>
	if (bt_dev.le.mtu) {
    7a20:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    7a24:	b9f1      	cbnz	r1, 7a64 <bt_init+0x2bc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    7a26:	aa05      	add	r2, sp, #20
    7a28:	f241 0005 	movw	r0, #4101	; 0x1005
    7a2c:	f7ff fbe8 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7a30:	4604      	mov	r4, r0
    7a32:	2800      	cmp	r0, #0
    7a34:	f47f af75 	bne.w	7922 <bt_init+0x17a>
	if (bt_dev.le.mtu) {
    7a38:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    7a3c:	b97b      	cbnz	r3, 7a5e <bt_init+0x2b6>
	read_buffer_size_complete(rsp);
    7a3e:	9b05      	ldr	r3, [sp, #20]
    7a40:	4889      	ldr	r0, [pc, #548]	; (7c68 <bt_init+0x4c0>)
    7a42:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    7a44:	7899      	ldrb	r1, [r3, #2]
    7a46:	785a      	ldrb	r2, [r3, #1]
    7a48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7a4c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    7a50:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    7a52:	2a04      	cmp	r2, #4
    7a54:	bf28      	it	cs
    7a56:	2204      	movcs	r2, #4
    7a58:	4611      	mov	r1, r2
    7a5a:	f01b f9fa 	bl	22e52 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    7a5e:	9805      	ldr	r0, [sp, #20]
    7a60:	f013 f8e8 	bl	1ac34 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    7a64:	2108      	movs	r1, #8
    7a66:	f640 4001 	movw	r0, #3073	; 0xc01
    7a6a:	f7ff fac9 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    7a6e:	4604      	mov	r4, r0
    7a70:	2800      	cmp	r0, #0
    7a72:	d04d      	beq.n	7b10 <bt_init+0x368>
	ev = net_buf_add(buf, sizeof(*ev));
    7a74:	2108      	movs	r1, #8
    7a76:	4408      	add	r0, r1
    7a78:	f01a fd87 	bl	2258a <net_buf_simple_add>
	dst[0] = val;
    7a7c:	2310      	movs	r3, #16
    7a7e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    7a80:	2388      	movs	r3, #136	; 0x88
    7a82:	7043      	strb	r3, [r0, #1]
    7a84:	2302      	movs	r3, #2
	dst[0] = val;
    7a86:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    7a88:	70c3      	strb	r3, [r0, #3]
    7a8a:	2320      	movs	r3, #32
	dst[0] = val;
    7a8c:	7082      	strb	r2, [r0, #2]
    7a8e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    7a90:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    7a92:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    7a94:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    7a96:	4621      	mov	r1, r4
    7a98:	f640 4001 	movw	r0, #3073	; 0xc01
    7a9c:	f7ff fbb0 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7aa0:	4604      	mov	r4, r0
    7aa2:	2800      	cmp	r0, #0
    7aa4:	f47f af3d 	bne.w	7922 <bt_init+0x17a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    7aa8:	4601      	mov	r1, r0
    7aaa:	466a      	mov	r2, sp
    7aac:	f64f 4001 	movw	r0, #64513	; 0xfc01
    7ab0:	f7ff fba6 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7ab4:	4e6d      	ldr	r6, [pc, #436]	; (7c6c <bt_init+0x4c4>)
    7ab6:	4b6e      	ldr	r3, [pc, #440]	; (7c70 <bt_init+0x4c8>)
    7ab8:	1af6      	subs	r6, r6, r3
    7aba:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    7abe:	2800      	cmp	r0, #0
    7ac0:	d04f      	beq.n	7b62 <bt_init+0x3ba>
		BT_WARN("Vendor HCI extensions not available");
    7ac2:	f04f 0100 	mov.w	r1, #0
    7ac6:	2302      	movs	r3, #2
    7ac8:	f363 0107 	bfi	r1, r3, #0, #8
    7acc:	4869      	ldr	r0, [pc, #420]	; (7c74 <bt_init+0x4cc>)
    7ace:	f366 118f 	bfi	r1, r6, #6, #10
		BT_WARN("Failed to read supported vendor commands");
    7ad2:	f016 fcb6 	bl	1e442 <log_0>
		err = bt_conn_init();
    7ad6:	f001 fbb3 	bl	9240 <bt_conn_init>
		if (err) {
    7ada:	4604      	mov	r4, r0
    7adc:	2800      	cmp	r0, #0
    7ade:	f47f af20 	bne.w	7922 <bt_init+0x17a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7ae2:	2102      	movs	r1, #2
    7ae4:	4864      	ldr	r0, [pc, #400]	; (7c78 <bt_init+0x4d0>)
    7ae6:	f017 ff09 	bl	1f8fc <atomic_or>
		bt_le_scan_update(false);
    7aea:	4620      	mov	r0, r4
    7aec:	f7ff fe46 	bl	777c <bt_le_scan_update>
	if (bt_dev.id_count > 0) {
    7af0:	79eb      	ldrb	r3, [r5, #7]
    7af2:	2b00      	cmp	r3, #0
    7af4:	f000 80d8 	beq.w	7ca8 <bt_init+0x500>
    7af8:	2104      	movs	r1, #4
    7afa:	485f      	ldr	r0, [pc, #380]	; (7c78 <bt_init+0x4d0>)
    7afc:	f017 fefe 	bl	1f8fc <atomic_or>
    7b00:	e70f      	b.n	7922 <bt_init+0x17a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    7b02:	2102      	movs	r1, #2
    7b04:	f640 406d 	movw	r0, #3181	; 0xc6d
    7b08:	f7ff fa7a 	bl	7000 <bt_hci_cmd_create>
		if (!buf) {
    7b0c:	4606      	mov	r6, r0
    7b0e:	b910      	cbnz	r0, 7b16 <bt_init+0x36e>
		return -ENOBUFS;
    7b10:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7b14:	e705      	b.n	7922 <bt_init+0x17a>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    7b16:	2102      	movs	r1, #2
    7b18:	3008      	adds	r0, #8
    7b1a:	f01a fd36 	bl	2258a <net_buf_simple_add>
		cp_le->le = 0x01;
    7b1e:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    7b20:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    7b22:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    7b24:	4622      	mov	r2, r4
    7b26:	4631      	mov	r1, r6
    7b28:	f640 406d 	movw	r0, #3181	; 0xc6d
    7b2c:	f7ff fb68 	bl	7200 <bt_hci_cmd_send_sync>
		if (err) {
    7b30:	4604      	mov	r4, r0
    7b32:	2800      	cmp	r0, #0
    7b34:	f43f af3e 	beq.w	79b4 <bt_init+0x20c>
    7b38:	e6f3      	b.n	7922 <bt_init+0x17a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    7b3a:	aa05      	add	r2, sp, #20
    7b3c:	2100      	movs	r1, #0
    7b3e:	f242 001c 	movw	r0, #8220	; 0x201c
    7b42:	f7ff fb5d 	bl	7200 <bt_hci_cmd_send_sync>
		if (err) {
    7b46:	4604      	mov	r4, r0
    7b48:	2800      	cmp	r0, #0
    7b4a:	f47f aeea 	bne.w	7922 <bt_init+0x17a>
		le_read_supp_states_complete(rsp);
    7b4e:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    7b50:	6883      	ldr	r3, [r0, #8]
    7b52:	f853 2f01 	ldr.w	r2, [r3, #1]!
    7b56:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    7b58:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    7b5c:	f013 f86a 	bl	1ac34 <net_buf_unref>
    7b60:	e72d      	b.n	79be <bt_init+0x216>
	rp.info = (void *)rsp->data;
    7b62:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    7b64:	4845      	ldr	r0, [pc, #276]	; (7c7c <bt_init+0x4d4>)
	rp.info = (void *)rsp->data;
    7b66:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    7b68:	2203      	movs	r2, #3
    7b6a:	f04f 0300 	mov.w	r3, #0
    7b6e:	f362 0307 	bfi	r3, r2, #0, #8
    7b72:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    7b76:	2a03      	cmp	r2, #3
		return plat_str[platform];
    7b78:	bf96      	itet	ls
    7b7a:	4941      	ldrls	r1, [pc, #260]	; (7c80 <bt_init+0x4d8>)
	return "unknown";
    7b7c:	4941      	ldrhi	r1, [pc, #260]	; (7c84 <bt_init+0x4dc>)
		return plat_str[platform];
    7b7e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    7b82:	f366 138f 	bfi	r3, r6, #6, #10
    7b86:	f016 fc7d 	bl	1e484 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    7b8a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    7b8e:	2203      	movs	r2, #3
    7b90:	f04f 0300 	mov.w	r3, #0
    7b94:	f362 0307 	bfi	r3, r2, #0, #8
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    7b98:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    7b9a:	f366 138f 	bfi	r3, r6, #6, #10
    7b9e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    7ba2:	d138      	bne.n	7c16 <bt_init+0x46e>
	if (variant < ARRAY_SIZE(nordic_str)) {
    7ba4:	2a02      	cmp	r2, #2
    7ba6:	d836      	bhi.n	7c16 <bt_init+0x46e>
		return nordic_str[variant];
    7ba8:	4937      	ldr	r1, [pc, #220]	; (7c88 <bt_init+0x4e0>)
    7baa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    7bae:	4837      	ldr	r0, [pc, #220]	; (7c8c <bt_init+0x4e4>)
    7bb0:	f016 fc68 	bl	1e484 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    7bb4:	2203      	movs	r2, #3
    7bb6:	f04f 0300 	mov.w	r3, #0
    7bba:	f362 0307 	bfi	r3, r2, #0, #8
    7bbe:	7962      	ldrb	r2, [r4, #5]
    7bc0:	4833      	ldr	r0, [pc, #204]	; (7c90 <bt_init+0x4e8>)
	if (variant < ARRAY_SIZE(var_str)) {
    7bc2:	2a03      	cmp	r2, #3
		return var_str[variant];
    7bc4:	bf96      	itet	ls
    7bc6:	4933      	ldrls	r1, [pc, #204]	; (7c94 <bt_init+0x4ec>)
	return "unknown";
    7bc8:	492e      	ldrhi	r1, [pc, #184]	; (7c84 <bt_init+0x4dc>)
		return var_str[variant];
    7bca:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    7bce:	e9cd 1205 	strd	r1, r2, [sp, #20]
    7bd2:	79a2      	ldrb	r2, [r4, #6]
    7bd4:	9207      	str	r2, [sp, #28]
    7bd6:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    7bda:	9208      	str	r2, [sp, #32]
    7bdc:	f8d4 2009 	ldr.w	r2, [r4, #9]
    7be0:	9209      	str	r2, [sp, #36]	; 0x24
    7be2:	f366 138f 	bfi	r3, r6, #6, #10
    7be6:	2205      	movs	r2, #5
    7be8:	a905      	add	r1, sp, #20
    7bea:	f016 fc7e 	bl	1e4ea <log_n>
	net_buf_unref(rsp);
    7bee:	9800      	ldr	r0, [sp, #0]
    7bf0:	f013 f820 	bl	1ac34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    7bf4:	466a      	mov	r2, sp
    7bf6:	2100      	movs	r1, #0
    7bf8:	f64f 4002 	movw	r0, #64514	; 0xfc02
    7bfc:	f7ff fb00 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7c00:	4604      	mov	r4, r0
    7c02:	b150      	cbz	r0, 7c1a <bt_init+0x472>
		BT_WARN("Failed to read supported vendor features");
    7c04:	f04f 0100 	mov.w	r1, #0
    7c08:	2302      	movs	r3, #2
    7c0a:	f363 0107 	bfi	r1, r3, #0, #8
    7c0e:	f366 118f 	bfi	r1, r6, #6, #10
    7c12:	4821      	ldr	r0, [pc, #132]	; (7c98 <bt_init+0x4f0>)
    7c14:	e75d      	b.n	7ad2 <bt_init+0x32a>
		return "unknown";
    7c16:	491b      	ldr	r1, [pc, #108]	; (7c84 <bt_init+0x4dc>)
    7c18:	e7c9      	b.n	7bae <bt_init+0x406>
	rp.cmds = (void *)rsp->data;
    7c1a:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    7c1c:	481f      	ldr	r0, [pc, #124]	; (7c9c <bt_init+0x4f4>)
    7c1e:	6899      	ldr	r1, [r3, #8]
    7c20:	2202      	movs	r2, #2
    7c22:	3101      	adds	r1, #1
    7c24:	f017 fcf0 	bl	1f608 <memcpy>
	net_buf_unref(rsp);
    7c28:	9800      	ldr	r0, [sp, #0]
    7c2a:	f013 f803 	bl	1ac34 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    7c2e:	466a      	mov	r2, sp
    7c30:	4621      	mov	r1, r4
    7c32:	f64f 4003 	movw	r0, #64515	; 0xfc03
    7c36:	f7ff fae3 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    7c3a:	b140      	cbz	r0, 7c4e <bt_init+0x4a6>
		BT_WARN("Failed to read supported vendor commands");
    7c3c:	f04f 0100 	mov.w	r1, #0
    7c40:	2302      	movs	r3, #2
    7c42:	f363 0107 	bfi	r1, r3, #0, #8
    7c46:	f366 118f 	bfi	r1, r6, #6, #10
    7c4a:	4815      	ldr	r0, [pc, #84]	; (7ca0 <bt_init+0x4f8>)
    7c4c:	e741      	b.n	7ad2 <bt_init+0x32a>
	rp.feat = (void *)rsp->data;
    7c4e:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    7c50:	4814      	ldr	r0, [pc, #80]	; (7ca4 <bt_init+0x4fc>)
    7c52:	6899      	ldr	r1, [r3, #8]
    7c54:	2201      	movs	r2, #1
    7c56:	4411      	add	r1, r2
    7c58:	f017 fcd6 	bl	1f608 <memcpy>
	net_buf_unref(rsp);
    7c5c:	9800      	ldr	r0, [sp, #0]
    7c5e:	f012 ffe9 	bl	1ac34 <net_buf_unref>
	if (err) {
    7c62:	e738      	b.n	7ad6 <bt_init+0x32e>
    7c64:	20007170 	.word	0x20007170
    7c68:	20007184 	.word	0x20007184
    7c6c:	0002345c 	.word	0x0002345c
    7c70:	000233ec 	.word	0x000233ec
    7c74:	00024cac 	.word	0x00024cac
    7c78:	20007168 	.word	0x20007168
    7c7c:	00024cd0 	.word	0x00024cd0
    7c80:	00023984 	.word	0x00023984
    7c84:	000252b1 	.word	0x000252b1
    7c88:	00023968 	.word	0x00023968
    7c8c:	00024ce9 	.word	0x00024ce9
    7c90:	00024d01 	.word	0x00024d01
    7c94:	000239ac 	.word	0x000239ac
    7c98:	00024d2e 	.word	0x00024d2e
    7c9c:	20007159 	.word	0x20007159
    7ca0:	00024d57 	.word	0x00024d57
    7ca4:	20007158 	.word	0x20007158
		BT_WARN("No ID address. Expecting one to come from storage.");
    7ca8:	2302      	movs	r3, #2
    7caa:	f04f 0100 	mov.w	r1, #0
    7cae:	f363 0107 	bfi	r1, r3, #0, #8
    7cb2:	f366 118f 	bfi	r1, r6, #6, #10
    7cb6:	4802      	ldr	r0, [pc, #8]	; (7cc0 <bt_init+0x518>)
    7cb8:	f016 fbc3 	bl	1e442 <log_0>
    7cbc:	e631      	b.n	7922 <bt_init+0x17a>
    7cbe:	bf00      	nop
    7cc0:	00024d80 	.word	0x00024d80

00007cc4 <init_work>:
{
    7cc4:	b510      	push	{r4, lr}
	err = bt_init();
    7cc6:	f7ff fd6f 	bl	77a8 <bt_init>
	if (ready_cb) {
    7cca:	4b03      	ldr	r3, [pc, #12]	; (7cd8 <init_work+0x14>)
    7ccc:	681b      	ldr	r3, [r3, #0]
    7cce:	b113      	cbz	r3, 7cd6 <init_work+0x12>
}
    7cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    7cd4:	4718      	bx	r3
}
    7cd6:	bd10      	pop	{r4, pc}
    7cd8:	20000560 	.word	0x20000560

00007cdc <id_create.isra.28>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    7cdc:	b530      	push	{r4, r5, lr}
    7cde:	4d17      	ldr	r5, [pc, #92]	; (7d3c <id_create.isra.28+0x60>)
    7ce0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    7ce4:	b085      	sub	sp, #20
    7ce6:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7ce8:	460c      	mov	r4, r1
    7cea:	b1b1      	cbz	r1, 7d1a <id_create.isra.28+0x3e>
    7cec:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7cee:	2207      	movs	r2, #7
    7cf0:	a902      	add	r1, sp, #8
    7cf2:	4620      	mov	r0, r4
    7cf4:	9302      	str	r3, [sp, #8]
    7cf6:	f8cd 300b 	str.w	r3, [sp, #11]
    7cfa:	f017 fc5e 	bl	1f5ba <memcmp>
    7cfe:	b160      	cbz	r0, 7d1a <id_create.isra.28+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    7d00:	4621      	mov	r1, r4
    7d02:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7d04:	f017 fdf7 	bl	1f8f6 <bt_addr_le_copy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7d08:	2101      	movs	r1, #1
    7d0a:	480d      	ldr	r0, [pc, #52]	; (7d40 <id_create.isra.28+0x64>)
    7d0c:	f017 fe21 	bl	1f952 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    7d10:	b108      	cbz	r0, 7d16 <id_create.isra.28+0x3a>
		bt_settings_save_id();
    7d12:	f7fe fced 	bl	66f0 <bt_settings_save_id>
}
    7d16:	b005      	add	sp, #20
    7d18:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    7d1a:	4668      	mov	r0, sp
    7d1c:	f017 fe8f 	bl	1fa3e <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    7d20:	4668      	mov	r0, sp
    7d22:	f7ff f90d 	bl	6f40 <id_find>
    7d26:	2800      	cmp	r0, #0
    7d28:	daf7      	bge.n	7d1a <id_create.isra.28+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    7d2a:	4669      	mov	r1, sp
    7d2c:	4628      	mov	r0, r5
    7d2e:	f017 fde2 	bl	1f8f6 <bt_addr_le_copy>
		if (addr) {
    7d32:	2c00      	cmp	r4, #0
    7d34:	d0e8      	beq.n	7d08 <id_create.isra.28+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7d36:	4629      	mov	r1, r5
    7d38:	4620      	mov	r0, r4
    7d3a:	e7e3      	b.n	7d04 <id_create.isra.28+0x28>
    7d3c:	200070f8 	.word	0x200070f8
    7d40:	20007168 	.word	0x20007168

00007d44 <bt_dev_show_info>:
{
    7d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7d48:	2303      	movs	r3, #3
    7d4a:	f04f 0800 	mov.w	r8, #0
    7d4e:	f363 0807 	bfi	r8, r3, #0, #8
    7d52:	4c32      	ldr	r4, [pc, #200]	; (7e1c <bt_dev_show_info+0xd8>)
    7d54:	4b32      	ldr	r3, [pc, #200]	; (7e20 <bt_dev_show_info+0xdc>)
    7d56:	4d33      	ldr	r5, [pc, #204]	; (7e24 <bt_dev_show_info+0xe0>)
    7d58:	4933      	ldr	r1, [pc, #204]	; (7e28 <bt_dev_show_info+0xe4>)
    7d5a:	4e34      	ldr	r6, [pc, #208]	; (7e2c <bt_dev_show_info+0xe8>)
    7d5c:	1aed      	subs	r5, r5, r3
    7d5e:	79e3      	ldrb	r3, [r4, #7]
{
    7d60:	b086      	sub	sp, #24
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7d62:	4620      	mov	r0, r4
    7d64:	2b01      	cmp	r3, #1
    7d66:	bf88      	it	hi
    7d68:	460e      	movhi	r6, r1
    7d6a:	f7fe f9fb 	bl	6164 <bt_addr_le_str_real>
    7d6e:	f7fc f85b 	bl	3e28 <log_strdup>
    7d72:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    7d76:	f365 188f 	bfi	r8, r5, #6, #10
    7d7a:	4643      	mov	r3, r8
    7d7c:	4602      	mov	r2, r0
    7d7e:	4631      	mov	r1, r6
    7d80:	482b      	ldr	r0, [pc, #172]	; (7e30 <bt_dev_show_info+0xec>)
		BT_INFO("Identity[%d]: %s",
    7d82:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 7e3c <bt_dev_show_info+0xf8>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7d86:	f016 fb7d 	bl	1e484 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    7d8a:	2601      	movs	r6, #1
    7d8c:	79e3      	ldrb	r3, [r4, #7]
    7d8e:	42b3      	cmp	r3, r6
    7d90:	dc2c      	bgt.n	7dec <bt_dev_show_info+0xa8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    7d92:	7c27      	ldrb	r7, [r4, #16]
    7d94:	2303      	movs	r3, #3
    7d96:	4638      	mov	r0, r7
    7d98:	f04f 0600 	mov.w	r6, #0
    7d9c:	f363 0607 	bfi	r6, r3, #0, #8
    7da0:	f7fe fda0 	bl	68e4 <ver_str>
    7da4:	8a63      	ldrh	r3, [r4, #18]
    7da6:	9304      	str	r3, [sp, #16]
    7da8:	f365 168f 	bfi	r6, r5, #6, #10
    7dac:	8ae3      	ldrh	r3, [r4, #22]
    7dae:	9305      	str	r3, [sp, #20]
    7db0:	a902      	add	r1, sp, #8
    7db2:	e9cd 0702 	strd	r0, r7, [sp, #8]
    7db6:	4633      	mov	r3, r6
    7db8:	2204      	movs	r2, #4
    7dba:	481e      	ldr	r0, [pc, #120]	; (7e34 <bt_dev_show_info+0xf0>)
    7dbc:	f016 fb95 	bl	1e4ea <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    7dc0:	f04f 0600 	mov.w	r6, #0
    7dc4:	2303      	movs	r3, #3
    7dc6:	f363 0607 	bfi	r6, r3, #0, #8
    7dca:	f365 168f 	bfi	r6, r5, #6, #10
    7dce:	7c65      	ldrb	r5, [r4, #17]
    7dd0:	4628      	mov	r0, r5
    7dd2:	f7fe fd87 	bl	68e4 <ver_str>
    7dd6:	f8ad 6000 	strh.w	r6, [sp]
    7dda:	4601      	mov	r1, r0
    7ddc:	8aa3      	ldrh	r3, [r4, #20]
    7dde:	4816      	ldr	r0, [pc, #88]	; (7e38 <bt_dev_show_info+0xf4>)
    7de0:	462a      	mov	r2, r5
    7de2:	f016 fb67 	bl	1e4b4 <log_3>
}
    7de6:	b006      	add	sp, #24
    7de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_INFO("Identity[%d]: %s",
    7dec:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    7df0:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    7df4:	f043 0303 	orr.w	r3, r3, #3
    7df8:	4420      	add	r0, r4
    7dfa:	f363 0707 	bfi	r7, r3, #0, #8
    7dfe:	f7fe f9b1 	bl	6164 <bt_addr_le_str_real>
    7e02:	f7fc f811 	bl	3e28 <log_strdup>
    7e06:	f365 178f 	bfi	r7, r5, #6, #10
    7e0a:	4602      	mov	r2, r0
    7e0c:	4631      	mov	r1, r6
    7e0e:	463b      	mov	r3, r7
    7e10:	4640      	mov	r0, r8
    7e12:	f016 fb37 	bl	1e484 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    7e16:	3601      	adds	r6, #1
    7e18:	e7b8      	b.n	7d8c <bt_dev_show_info+0x48>
    7e1a:	bf00      	nop
    7e1c:	200070f8 	.word	0x200070f8
    7e20:	000233ec 	.word	0x000233ec
    7e24:	0002345c 	.word	0x0002345c
    7e28:	00024b96 	.word	0x00024b96
    7e2c:	000262ab 	.word	0x000262ab
    7e30:	00024b9a 	.word	0x00024b9a
    7e34:	00024bba 	.word	0x00024bba
    7e38:	00024bf8 	.word	0x00024bf8
    7e3c:	00024ba9 	.word	0x00024ba9

00007e40 <bt_recv>:
{
    7e40:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7e42:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    7e44:	2d01      	cmp	r5, #1
{
    7e46:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    7e48:	d059      	beq.n	7efe <bt_recv+0xbe>
    7e4a:	2d03      	cmp	r5, #3
    7e4c:	d178      	bne.n	7f40 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7e4e:	8983      	ldrh	r3, [r0, #12]
    7e50:	2b03      	cmp	r3, #3
    7e52:	d813      	bhi.n	7e7c <bt_recv+0x3c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7e54:	2301      	movs	r3, #1
    7e56:	f04f 0100 	mov.w	r1, #0
    7e5a:	f363 0107 	bfi	r1, r3, #0, #8
    7e5e:	4a43      	ldr	r2, [pc, #268]	; (7f6c <bt_recv+0x12c>)
    7e60:	4b43      	ldr	r3, [pc, #268]	; (7f70 <bt_recv+0x130>)
    7e62:	4844      	ldr	r0, [pc, #272]	; (7f74 <bt_recv+0x134>)
    7e64:	1a9b      	subs	r3, r3, r2
    7e66:	08db      	lsrs	r3, r3, #3
    7e68:	f363 118f 	bfi	r1, r3, #6, #10
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7e6c:	f016 fae9 	bl	1e442 <log_0>
    7e70:	4040      	eors	r0, r0
    7e72:	f380 8811 	msr	BASEPRI, r0
    7e76:	f04f 0004 	mov.w	r0, #4
    7e7a:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7e7c:	2104      	movs	r1, #4
    7e7e:	3008      	adds	r0, #8
    7e80:	f01a fbf8 	bl	22674 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    7e84:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    7e86:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    7e88:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->id = BT_CONN_ID_INVALID;
    7e8a:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    7e8c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    7e90:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    7e92:	82e0      	strh	r0, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    7e94:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    7e96:	d011      	beq.n	7ebc <bt_recv+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    7e98:	2001      	movs	r0, #1
    7e9a:	f04f 0300 	mov.w	r3, #0
    7e9e:	f360 0307 	bfi	r3, r0, #0, #8
    7ea2:	4d32      	ldr	r5, [pc, #200]	; (7f6c <bt_recv+0x12c>)
    7ea4:	4832      	ldr	r0, [pc, #200]	; (7f70 <bt_recv+0x130>)
    7ea6:	1b40      	subs	r0, r0, r5
    7ea8:	08c0      	lsrs	r0, r0, #3
    7eaa:	f360 138f 	bfi	r3, r0, #6, #10
    7eae:	4832      	ldr	r0, [pc, #200]	; (7f78 <bt_recv+0x138>)
    7eb0:	f016 fae8 	bl	1e484 <log_2>
	net_buf_unref(buf);
    7eb4:	4620      	mov	r0, r4
    7eb6:	f012 febd 	bl	1ac34 <net_buf_unref>
    7eba:	e01e      	b.n	7efa <bt_recv+0xba>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    7ebc:	f001 f844 	bl	8f48 <bt_conn_lookup_handle>
	if (!conn) {
    7ec0:	4605      	mov	r5, r0
    7ec2:	b978      	cbnz	r0, 7ee4 <bt_recv+0xa4>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    7ec4:	2301      	movs	r3, #1
    7ec6:	f04f 0200 	mov.w	r2, #0
    7eca:	f363 0207 	bfi	r2, r3, #0, #8
    7ece:	4927      	ldr	r1, [pc, #156]	; (7f6c <bt_recv+0x12c>)
    7ed0:	4b27      	ldr	r3, [pc, #156]	; (7f70 <bt_recv+0x130>)
    7ed2:	482a      	ldr	r0, [pc, #168]	; (7f7c <bt_recv+0x13c>)
    7ed4:	1a5b      	subs	r3, r3, r1
    7ed6:	08db      	lsrs	r3, r3, #3
    7ed8:	f363 128f 	bfi	r2, r3, #6, #10
    7edc:	8ae1      	ldrh	r1, [r4, #22]
    7ede:	f016 fabd 	bl	1e45c <log_1>
		net_buf_unref(buf);
    7ee2:	e7e7      	b.n	7eb4 <bt_recv+0x74>
	acl(buf)->id = bt_conn_index(conn);
    7ee4:	f001 f9a0 	bl	9228 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    7ee8:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_index(conn);
    7eea:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    7eec:	4621      	mov	r1, r4
    7eee:	4628      	mov	r0, r5
    7ef0:	f000 fd5a 	bl	89a8 <bt_conn_recv>
	bt_conn_unref(conn);
    7ef4:	4628      	mov	r0, r5
    7ef6:	f017 fe25 	bl	1fb44 <bt_conn_unref>
		return 0;
    7efa:	2000      	movs	r0, #0
}
    7efc:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7efe:	8983      	ldrh	r3, [r0, #12]
    7f00:	2b01      	cmp	r3, #1
    7f02:	d9a7      	bls.n	7e54 <bt_recv+0x14>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7f04:	2102      	movs	r1, #2
    7f06:	3008      	adds	r0, #8
    7f08:	f01a fbb4 	bl	22674 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7f0c:	7800      	ldrb	r0, [r0, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    7f0e:	2813      	cmp	r0, #19
    7f10:	d810      	bhi.n	7f34 <bt_recv+0xf4>
    7f12:	4085      	lsls	r5, r0
    7f14:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    7f18:	d00c      	beq.n	7f34 <bt_recv+0xf4>
    7f1a:	2301      	movs	r3, #1
    7f1c:	f04f 0100 	mov.w	r1, #0
    7f20:	f363 0107 	bfi	r1, r3, #0, #8
    7f24:	4a11      	ldr	r2, [pc, #68]	; (7f6c <bt_recv+0x12c>)
    7f26:	4b12      	ldr	r3, [pc, #72]	; (7f70 <bt_recv+0x130>)
    7f28:	4815      	ldr	r0, [pc, #84]	; (7f80 <bt_recv+0x140>)
    7f2a:	1a9b      	subs	r3, r3, r2
    7f2c:	08db      	lsrs	r3, r3, #3
    7f2e:	f363 118f 	bfi	r1, r3, #6, #10
    7f32:	e79b      	b.n	7e6c <bt_recv+0x2c>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    7f34:	2302      	movs	r3, #2
    7f36:	4a13      	ldr	r2, [pc, #76]	; (7f84 <bt_recv+0x144>)
    7f38:	4621      	mov	r1, r4
    7f3a:	f7fe fe41 	bl	6bc0 <handle_event>
    7f3e:	e7b9      	b.n	7eb4 <bt_recv+0x74>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    7f40:	2301      	movs	r3, #1
    7f42:	f04f 0200 	mov.w	r2, #0
    7f46:	f363 0207 	bfi	r2, r3, #0, #8
    7f4a:	4908      	ldr	r1, [pc, #32]	; (7f6c <bt_recv+0x12c>)
    7f4c:	4b08      	ldr	r3, [pc, #32]	; (7f70 <bt_recv+0x130>)
    7f4e:	480e      	ldr	r0, [pc, #56]	; (7f88 <bt_recv+0x148>)
    7f50:	1a5b      	subs	r3, r3, r1
    7f52:	08db      	lsrs	r3, r3, #3
    7f54:	f363 128f 	bfi	r2, r3, #6, #10
    7f58:	4629      	mov	r1, r5
    7f5a:	f016 fa7f 	bl	1e45c <log_1>
		net_buf_unref(buf);
    7f5e:	4620      	mov	r0, r4
    7f60:	f012 fe68 	bl	1ac34 <net_buf_unref>
		return -EINVAL;
    7f64:	f06f 0015 	mvn.w	r0, #21
    7f68:	e7c8      	b.n	7efc <bt_recv+0xbc>
    7f6a:	bf00      	nop
    7f6c:	000233ec 	.word	0x000233ec
    7f70:	0002345c 	.word	0x0002345c
    7f74:	00024dfc 	.word	0x00024dfc
    7f78:	00024e26 	.word	0x00024e26
    7f7c:	00024e4a 	.word	0x00024e4a
    7f80:	00024e6c 	.word	0x00024e6c
    7f84:	00023974 	.word	0x00023974
    7f88:	00024e9b 	.word	0x00024e9b

00007f8c <bt_recv_prio>:
{
    7f8c:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7f8e:	7d05      	ldrb	r5, [r0, #20]
    7f90:	2d01      	cmp	r5, #1
{
    7f92:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7f94:	d013      	beq.n	7fbe <bt_recv_prio+0x32>
    7f96:	2301      	movs	r3, #1
    7f98:	f04f 0100 	mov.w	r1, #0
    7f9c:	f363 0107 	bfi	r1, r3, #0, #8
    7fa0:	4a20      	ldr	r2, [pc, #128]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7fa2:	4b21      	ldr	r3, [pc, #132]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    7fa4:	4821      	ldr	r0, [pc, #132]	; (802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>)
    7fa6:	1a9b      	subs	r3, r3, r2
    7fa8:	08db      	lsrs	r3, r3, #3
    7faa:	f363 118f 	bfi	r1, r3, #6, #10
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7fae:	f016 fa48 	bl	1e442 <log_0>
    7fb2:	4040      	eors	r0, r0
    7fb4:	f380 8811 	msr	BASEPRI, r0
    7fb8:	f04f 0004 	mov.w	r0, #4
    7fbc:	df02      	svc	2
    7fbe:	8983      	ldrh	r3, [r0, #12]
    7fc0:	2b01      	cmp	r3, #1
    7fc2:	d80c      	bhi.n	7fde <bt_recv_prio+0x52>
    7fc4:	2301      	movs	r3, #1
    7fc6:	f04f 0100 	mov.w	r1, #0
    7fca:	f363 0107 	bfi	r1, r3, #0, #8
    7fce:	4a15      	ldr	r2, [pc, #84]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7fd0:	4b15      	ldr	r3, [pc, #84]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    7fd2:	4817      	ldr	r0, [pc, #92]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7fd4:	1a9b      	subs	r3, r3, r2
    7fd6:	08db      	lsrs	r3, r3, #3
    7fd8:	f363 118f 	bfi	r1, r3, #6, #10
    7fdc:	e7e7      	b.n	7fae <bt_recv_prio+0x22>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7fde:	2102      	movs	r1, #2
    7fe0:	3008      	adds	r0, #8
    7fe2:	f01a fb47 	bl	22674 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    7fe6:	7800      	ldrb	r0, [r0, #0]
    7fe8:	2813      	cmp	r0, #19
    7fea:	d803      	bhi.n	7ff4 <bt_recv_prio+0x68>
    7fec:	4085      	lsls	r5, r0
    7fee:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    7ff2:	d10c      	bne.n	800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
    7ff4:	2301      	movs	r3, #1
    7ff6:	f04f 0100 	mov.w	r1, #0
    7ffa:	f363 0107 	bfi	r1, r3, #0, #8
    7ffe:	4a09      	ldr	r2, [pc, #36]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    8000:	4b09      	ldr	r3, [pc, #36]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    8002:	480c      	ldr	r0, [pc, #48]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    8004:	1a9b      	subs	r3, r3, r2
    8006:	08db      	lsrs	r3, r3, #3
    8008:	f363 118f 	bfi	r1, r3, #6, #10
    800c:	e7cf      	b.n	7fae <bt_recv_prio+0x22>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    800e:	2303      	movs	r3, #3
    8010:	4a09      	ldr	r2, [pc, #36]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    8012:	4621      	mov	r1, r4
    8014:	f7fe fdd4 	bl	6bc0 <handle_event>
	net_buf_unref(buf);
    8018:	4620      	mov	r0, r4
    801a:	f012 fe0b 	bl	1ac34 <net_buf_unref>
}
    801e:	2000      	movs	r0, #0
    8020:	bd38      	pop	{r3, r4, r5, pc}
    8022:	bf00      	nop
    8024:	000233ec 	.word	0x000233ec
    8028:	0002345c 	.word	0x0002345c
    802c:	00024eaf 	.word	0x00024eaf
    8030:	00024dfc 	.word	0x00024dfc
    8034:	00024ee3 	.word	0x00024ee3
    8038:	00023994 	.word	0x00023994

0000803c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    803c:	4a08      	ldr	r2, [pc, #32]	; (8060 <bt_hci_driver_register+0x24>)
    803e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    8042:	b93b      	cbnz	r3, 8054 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    8044:	68c1      	ldr	r1, [r0, #12]
    8046:	b141      	cbz	r1, 805a <bt_hci_driver_register+0x1e>
    8048:	6901      	ldr	r1, [r0, #16]
    804a:	b131      	cbz	r1, 805a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    804c:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    8050:	4618      	mov	r0, r3
    8052:	4770      	bx	lr
		return -EALREADY;
    8054:	f06f 0044 	mvn.w	r0, #68	; 0x44
    8058:	4770      	bx	lr
		return -EINVAL;
    805a:	f06f 0015 	mvn.w	r0, #21
}
    805e:	4770      	bx	lr
    8060:	200070f8 	.word	0x200070f8

00008064 <bt_enable>:
{
    8064:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    8066:	4d34      	ldr	r5, [pc, #208]	; (8138 <bt_enable+0xd4>)
    8068:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    806c:	b086      	sub	sp, #24
    806e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    8070:	b993      	cbnz	r3, 8098 <bt_enable+0x34>
		BT_ERR("No HCI driver registered");
    8072:	2301      	movs	r3, #1
    8074:	f04f 0100 	mov.w	r1, #0
    8078:	f363 0107 	bfi	r1, r3, #0, #8
    807c:	4a2f      	ldr	r2, [pc, #188]	; (813c <bt_enable+0xd8>)
    807e:	4b30      	ldr	r3, [pc, #192]	; (8140 <bt_enable+0xdc>)
    8080:	4830      	ldr	r0, [pc, #192]	; (8144 <bt_enable+0xe0>)
    8082:	1a9b      	subs	r3, r3, r2
    8084:	08db      	lsrs	r3, r3, #3
    8086:	f363 118f 	bfi	r1, r3, #6, #10
    808a:	f016 f9da 	bl	1e442 <log_0>
		return -ENODEV;
    808e:	f06f 0412 	mvn.w	r4, #18
}
    8092:	4620      	mov	r0, r4
    8094:	b006      	add	sp, #24
    8096:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    8098:	2101      	movs	r1, #1
    809a:	f105 0070 	add.w	r0, r5, #112	; 0x70
    809e:	f017 fc2d 	bl	1f8fc <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    80a2:	07c2      	lsls	r2, r0, #31
    80a4:	d444      	bmi.n	8130 <bt_enable+0xcc>
		err = bt_settings_init();
    80a6:	f7fe fb3b 	bl	6720 <bt_settings_init>
		if (err) {
    80aa:	4604      	mov	r4, r0
    80ac:	2800      	cmp	r0, #0
    80ae:	d1f0      	bne.n	8092 <bt_enable+0x2e>
	ready_cb = cb;
    80b0:	4b25      	ldr	r3, [pc, #148]	; (8148 <bt_enable+0xe4>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    80b2:	4926      	ldr	r1, [pc, #152]	; (814c <bt_enable+0xe8>)
    80b4:	601e      	str	r6, [r3, #0]
    80b6:	f06f 0308 	mvn.w	r3, #8
    80ba:	f44f 7220 	mov.w	r2, #640	; 0x280
    80be:	e9cd 0302 	strd	r0, r3, [sp, #8]
    80c2:	e9cd 0004 	strd	r0, r0, [sp, #16]
    80c6:	4b22      	ldr	r3, [pc, #136]	; (8150 <bt_enable+0xec>)
    80c8:	e9cd 0000 	strd	r0, r0, [sp]
    80cc:	4821      	ldr	r0, [pc, #132]	; (8154 <bt_enable+0xf0>)
    80ce:	f014 f981 	bl	1c3d4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    80d2:	4921      	ldr	r1, [pc, #132]	; (8158 <bt_enable+0xf4>)
    80d4:	481f      	ldr	r0, [pc, #124]	; (8154 <bt_enable+0xf0>)
    80d6:	f01a fed1 	bl	22e7c <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    80da:	f7fe f9f7 	bl	64cc <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    80de:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    80e2:	68db      	ldr	r3, [r3, #12]
    80e4:	4798      	blx	r3
	if (err) {
    80e6:	4604      	mov	r4, r0
    80e8:	b178      	cbz	r0, 810a <bt_enable+0xa6>
		BT_ERR("HCI driver open failed (%d)", err);
    80ea:	2301      	movs	r3, #1
    80ec:	f04f 0200 	mov.w	r2, #0
    80f0:	f363 0207 	bfi	r2, r3, #0, #8
    80f4:	4911      	ldr	r1, [pc, #68]	; (813c <bt_enable+0xd8>)
    80f6:	4b12      	ldr	r3, [pc, #72]	; (8140 <bt_enable+0xdc>)
    80f8:	1a5b      	subs	r3, r3, r1
    80fa:	08db      	lsrs	r3, r3, #3
    80fc:	4601      	mov	r1, r0
    80fe:	f363 128f 	bfi	r2, r3, #6, #10
    8102:	4816      	ldr	r0, [pc, #88]	; (815c <bt_enable+0xf8>)
    8104:	f016 f9aa 	bl	1e45c <log_1>
		return err;
    8108:	e7c3      	b.n	8092 <bt_enable+0x2e>
	if (!cb) {
    810a:	b926      	cbnz	r6, 8116 <bt_enable+0xb2>
}
    810c:	b006      	add	sp, #24
    810e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    8112:	f7ff bb49 	b.w	77a8 <bt_init>
    8116:	2101      	movs	r1, #1
    8118:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    811c:	f017 fbee 	bl	1f8fc <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8120:	07c3      	lsls	r3, r0, #31
    8122:	d4b6      	bmi.n	8092 <bt_enable+0x2e>
		k_queue_append(&work_q->queue, work);
    8124:	f105 0164 	add.w	r1, r5, #100	; 0x64
    8128:	480d      	ldr	r0, [pc, #52]	; (8160 <bt_enable+0xfc>)
    812a:	f01a fd2c 	bl	22b86 <k_queue_append>
    812e:	e7b0      	b.n	8092 <bt_enable+0x2e>
		return -EALREADY;
    8130:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8134:	e7ad      	b.n	8092 <bt_enable+0x2e>
    8136:	bf00      	nop
    8138:	200070f8 	.word	0x200070f8
    813c:	000233ec 	.word	0x000233ec
    8140:	0002345c 	.word	0x0002345c
    8144:	00024c1f 	.word	0x00024c1f
    8148:	20000560 	.word	0x20000560
    814c:	20002a98 	.word	0x20002a98
    8150:	00006da1 	.word	0x00006da1
    8154:	20000568 	.word	0x20000568
    8158:	00024c38 	.word	0x00024c38
    815c:	00024c3e 	.word	0x00024c3e
    8160:	20001c74 	.word	0x20001c74

00008164 <bt_get_name>:
}
    8164:	4800      	ldr	r0, [pc, #0]	; (8168 <bt_get_name+0x4>)
    8166:	4770      	bx	lr
    8168:	00025173 	.word	0x00025173

0000816c <bt_id_create>:
{
    816c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    816e:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8170:	4606      	mov	r6, r0
    8172:	b918      	cbnz	r0, 817c <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    8174:	b35c      	cbz	r4, 81ce <bt_id_create+0x62>
		return -EINVAL;
    8176:	f06f 0415 	mvn.w	r4, #21
    817a:	e03f      	b.n	81fc <bt_id_create+0x90>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    817c:	2300      	movs	r3, #0
    817e:	2207      	movs	r2, #7
    8180:	4669      	mov	r1, sp
    8182:	9300      	str	r3, [sp, #0]
    8184:	f8cd 3003 	str.w	r3, [sp, #3]
    8188:	f017 fa17 	bl	1f5ba <memcmp>
    818c:	2800      	cmp	r0, #0
    818e:	d0f1      	beq.n	8174 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    8190:	7833      	ldrb	r3, [r6, #0]
    8192:	2b01      	cmp	r3, #1
    8194:	d104      	bne.n	81a0 <bt_id_create+0x34>
    8196:	79b3      	ldrb	r3, [r6, #6]
    8198:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    819c:	2bc0      	cmp	r3, #192	; 0xc0
    819e:	d00e      	beq.n	81be <bt_id_create+0x52>
			BT_ERR("Only static random identity address supported");
    81a0:	2301      	movs	r3, #1
    81a2:	f04f 0100 	mov.w	r1, #0
    81a6:	f363 0107 	bfi	r1, r3, #0, #8
    81aa:	4a17      	ldr	r2, [pc, #92]	; (8208 <bt_id_create+0x9c>)
    81ac:	4b17      	ldr	r3, [pc, #92]	; (820c <bt_id_create+0xa0>)
    81ae:	4818      	ldr	r0, [pc, #96]	; (8210 <bt_id_create+0xa4>)
    81b0:	1a9b      	subs	r3, r3, r2
    81b2:	08db      	lsrs	r3, r3, #3
    81b4:	f363 118f 	bfi	r1, r3, #6, #10
    81b8:	f016 f943 	bl	1e442 <log_0>
			return -EINVAL;
    81bc:	e7db      	b.n	8176 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    81be:	4630      	mov	r0, r6
    81c0:	f7fe febe 	bl	6f40 <id_find>
    81c4:	2800      	cmp	r0, #0
    81c6:	dbd5      	blt.n	8174 <bt_id_create+0x8>
			return -EALREADY;
    81c8:	f06f 0444 	mvn.w	r4, #68	; 0x44
    81cc:	e016      	b.n	81fc <bt_id_create+0x90>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    81ce:	4b11      	ldr	r3, [pc, #68]	; (8214 <bt_id_create+0xa8>)
    81d0:	79dd      	ldrb	r5, [r3, #7]
    81d2:	2d01      	cmp	r5, #1
    81d4:	d015      	beq.n	8202 <bt_id_create+0x96>
	new_id = bt_dev.id_count++;
    81d6:	1c6a      	adds	r2, r5, #1
    81d8:	71da      	strb	r2, [r3, #7]
    81da:	462c      	mov	r4, r5
	if (new_id == BT_ID_DEFAULT &&
    81dc:	b955      	cbnz	r5, 81f4 <bt_id_create+0x88>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    81de:	2101      	movs	r1, #1
    81e0:	f103 0070 	add.w	r0, r3, #112	; 0x70
    81e4:	f017 fbb5 	bl	1f952 <atomic_test_bit>
	if (new_id == BT_ID_DEFAULT &&
    81e8:	b920      	cbnz	r0, 81f4 <bt_id_create+0x88>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    81ea:	2108      	movs	r1, #8
    81ec:	f103 0070 	add.w	r0, r3, #112	; 0x70
    81f0:	f017 fb84 	bl	1f8fc <atomic_or>
	id_create(new_id, addr, irk);
    81f4:	4631      	mov	r1, r6
    81f6:	4628      	mov	r0, r5
    81f8:	f7ff fd70 	bl	7cdc <id_create.isra.28>
}
    81fc:	4620      	mov	r0, r4
    81fe:	b002      	add	sp, #8
    8200:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    8202:	f06f 040b 	mvn.w	r4, #11
    8206:	e7f9      	b.n	81fc <bt_id_create+0x90>
    8208:	000233ec 	.word	0x000233ec
    820c:	0002345c 	.word	0x0002345c
    8210:	00024c5a 	.word	0x00024c5a
    8214:	200070f8 	.word	0x200070f8

00008218 <bt_setup_id_addr>:
{
    8218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.id_count) {
    821c:	4d39      	ldr	r5, [pc, #228]	; (8304 <bt_setup_id_addr+0xec>)
    821e:	79ef      	ldrb	r7, [r5, #7]
{
    8220:	b085      	sub	sp, #20
    8222:	462e      	mov	r6, r5
	if (!bt_dev.id_count) {
    8224:	b99f      	cbnz	r7, 824e <bt_setup_id_addr+0x36>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    8226:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    822a:	f013 0401 	ands.w	r4, r3, #1
    822e:	d113      	bne.n	8258 <bt_setup_id_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
    8230:	2302      	movs	r3, #2
    8232:	f04f 0100 	mov.w	r1, #0
    8236:	f363 0107 	bfi	r1, r3, #0, #8
    823a:	4a33      	ldr	r2, [pc, #204]	; (8308 <bt_setup_id_addr+0xf0>)
    823c:	4b33      	ldr	r3, [pc, #204]	; (830c <bt_setup_id_addr+0xf4>)
    823e:	4834      	ldr	r0, [pc, #208]	; (8310 <bt_setup_id_addr+0xf8>)
    8240:	1a9b      	subs	r3, r3, r2
    8242:	08db      	lsrs	r3, r3, #3
    8244:	f363 118f 	bfi	r1, r3, #6, #10
    8248:	f016 f8fb 	bl	1e442 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    824c:	71ec      	strb	r4, [r5, #7]
	return bt_id_create(NULL, NULL);
    824e:	2100      	movs	r1, #0
    8250:	4608      	mov	r0, r1
    8252:	f7ff ff8b 	bl	816c <bt_id_create>
    8256:	e047      	b.n	82e8 <bt_setup_id_addr+0xd0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    8258:	aa01      	add	r2, sp, #4
    825a:	4639      	mov	r1, r7
    825c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    8260:	f7fe ffce 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    8264:	4604      	mov	r4, r0
    8266:	b178      	cbz	r0, 8288 <bt_setup_id_addr+0x70>
		BT_WARN("Failed to read static addresses");
    8268:	2302      	movs	r3, #2
    826a:	f04f 0100 	mov.w	r1, #0
    826e:	f363 0107 	bfi	r1, r3, #0, #8
    8272:	4a25      	ldr	r2, [pc, #148]	; (8308 <bt_setup_id_addr+0xf0>)
    8274:	4b25      	ldr	r3, [pc, #148]	; (830c <bt_setup_id_addr+0xf4>)
    8276:	4827      	ldr	r0, [pc, #156]	; (8314 <bt_setup_id_addr+0xfc>)
    8278:	1a9b      	subs	r3, r3, r2
    827a:	08db      	lsrs	r3, r3, #3
    827c:	f363 118f 	bfi	r1, r3, #6, #10
    8280:	f016 f8df 	bl	1e442 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    8284:	71ef      	strb	r7, [r5, #7]
		if (bt_dev.id_count) {
    8286:	e7e2      	b.n	824e <bt_setup_id_addr+0x36>
	rp = (void *)rsp->data;
    8288:	9b01      	ldr	r3, [sp, #4]
    828a:	6899      	ldr	r1, [r3, #8]
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    828c:	784d      	ldrb	r5, [r1, #1]
    828e:	1c2f      	adds	r7, r5, #0
    8290:	bf18      	it	ne
    8292:	2701      	movne	r7, #1
	for (i = 0; i < cnt; i++) {
    8294:	4603      	mov	r3, r0
		addr[i].type = BT_ADDR_LE_RANDOM;
    8296:	f04f 0901 	mov.w	r9, #1
		bt_addr_copy(&addr[i].a, &rp->a[i].bdaddr);
    829a:	f101 0802 	add.w	r8, r1, #2
	for (i = 0; i < cnt; i++) {
    829e:	429f      	cmp	r7, r3
    82a0:	dc25      	bgt.n	82ee <bt_setup_id_addr+0xd6>
	net_buf_unref(rsp);
    82a2:	9801      	ldr	r0, [sp, #4]
    82a4:	f012 fcc6 	bl	1ac34 <net_buf_unref>
	if (!cnt) {
    82a8:	b96d      	cbnz	r5, 82c6 <bt_setup_id_addr+0xae>
		BT_WARN("No static addresses stored in controller");
    82aa:	2302      	movs	r3, #2
    82ac:	f04f 0100 	mov.w	r1, #0
    82b0:	f363 0107 	bfi	r1, r3, #0, #8
    82b4:	4a14      	ldr	r2, [pc, #80]	; (8308 <bt_setup_id_addr+0xf0>)
    82b6:	4b15      	ldr	r3, [pc, #84]	; (830c <bt_setup_id_addr+0xf4>)
    82b8:	4817      	ldr	r0, [pc, #92]	; (8318 <bt_setup_id_addr+0x100>)
    82ba:	1a9b      	subs	r3, r3, r2
    82bc:	08db      	lsrs	r3, r3, #3
    82be:	f363 118f 	bfi	r1, r3, #6, #10
    82c2:	f016 f8be 	bl	1e442 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    82c6:	71f7      	strb	r7, [r6, #7]
		if (bt_dev.id_count) {
    82c8:	2d00      	cmp	r5, #0
    82ca:	d0c0      	beq.n	824e <bt_setup_id_addr+0x36>
    82cc:	ad02      	add	r5, sp, #8
				id_create(i, &addrs[i], NULL);
    82ce:	4629      	mov	r1, r5
    82d0:	b2e0      	uxtb	r0, r4
    82d2:	f7ff fd03 	bl	7cdc <id_create.isra.28>
			for (i = 0; i < bt_dev.id_count; i++) {
    82d6:	79f3      	ldrb	r3, [r6, #7]
    82d8:	3401      	adds	r4, #1
    82da:	42a3      	cmp	r3, r4
    82dc:	f105 0507 	add.w	r5, r5, #7
    82e0:	dcf5      	bgt.n	82ce <bt_setup_id_addr+0xb6>
			return set_random_address(&bt_dev.id_addr[0].a);
    82e2:	480e      	ldr	r0, [pc, #56]	; (831c <bt_setup_id_addr+0x104>)
    82e4:	f7ff f962 	bl	75ac <set_random_address>
}
    82e8:	b005      	add	sp, #20
    82ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(dst, src, sizeof(*dst));
    82ee:	2206      	movs	r2, #6
    82f0:	4641      	mov	r1, r8
    82f2:	f10d 0009 	add.w	r0, sp, #9
		addr[i].type = BT_ADDR_LE_RANDOM;
    82f6:	f88d 9008 	strb.w	r9, [sp, #8]
    82fa:	f017 f985 	bl	1f608 <memcpy>
	for (i = 0; i < cnt; i++) {
    82fe:	2301      	movs	r3, #1
    8300:	e7cd      	b.n	829e <bt_setup_id_addr+0x86>
    8302:	bf00      	nop
    8304:	200070f8 	.word	0x200070f8
    8308:	000233ec 	.word	0x000233ec
    830c:	0002345c 	.word	0x0002345c
    8310:	00024f11 	.word	0x00024f11
    8314:	00024f3d 	.word	0x00024f3d
    8318:	00024f5d 	.word	0x00024f5d
    831c:	200070f9 	.word	0x200070f9

00008320 <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    8320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (param->id >= bt_dev.id_count ||
    8324:	4e78      	ldr	r6, [pc, #480]	; (8508 <bt_le_adv_start_internal+0x1e8>)
{
    8326:	4605      	mov	r5, r0
    8328:	4698      	mov	r8, r3
	if (param->id >= bt_dev.id_count ||
    832a:	7800      	ldrb	r0, [r0, #0]
    832c:	79f3      	ldrb	r3, [r6, #7]
{
    832e:	b089      	sub	sp, #36	; 0x24
	if (param->id >= bt_dev.id_count ||
    8330:	4283      	cmp	r3, r0
{
    8332:	460c      	mov	r4, r1
    8334:	4617      	mov	r7, r2
    8336:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	if (param->id >= bt_dev.id_count ||
    833a:	d805      	bhi.n	8348 <bt_le_adv_start_internal+0x28>
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    833c:	f06f 0415 	mvn.w	r4, #21
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
		atomic_set_bit(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE);
	}

	return 0;
}
    8340:	4620      	mov	r0, r4
    8342:	b009      	add	sp, #36	; 0x24
    8344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    8348:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    834c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    834e:	2207      	movs	r2, #7
    8350:	a902      	add	r1, sp, #8
    8352:	4430      	add	r0, r6
    8354:	9302      	str	r3, [sp, #8]
    8356:	f8cd 300b 	str.w	r3, [sp, #11]
    835a:	f017 f92e 	bl	1f5ba <memcmp>
	if (param->id >= bt_dev.id_count ||
    835e:	2800      	cmp	r0, #0
    8360:	d0ec      	beq.n	833c <bt_le_adv_start_internal+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8362:	786b      	ldrb	r3, [r5, #1]
    8364:	07d9      	lsls	r1, r3, #31
    8366:	d405      	bmi.n	8374 <bt_le_adv_start_internal+0x54>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    8368:	7c32      	ldrb	r2, [r6, #16]
    836a:	2a08      	cmp	r2, #8
    836c:	d802      	bhi.n	8374 <bt_le_adv_start_internal+0x54>
    836e:	886a      	ldrh	r2, [r5, #2]
    8370:	2a9f      	cmp	r2, #159	; 0x9f
    8372:	d9e3      	bls.n	833c <bt_le_adv_start_internal+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    8374:	06da      	lsls	r2, r3, #27
    8376:	d402      	bmi.n	837e <bt_le_adv_start_internal+0x5e>
    8378:	f1b9 0f00 	cmp.w	r9, #0
    837c:	d108      	bne.n	8390 <bt_le_adv_start_internal+0x70>
		if (param->interval_min > param->interval_max ||
    837e:	886a      	ldrh	r2, [r5, #2]
    8380:	88ab      	ldrh	r3, [r5, #4]
    8382:	429a      	cmp	r2, r3
    8384:	d8da      	bhi.n	833c <bt_le_adv_start_internal+0x1c>
    8386:	2a1f      	cmp	r2, #31
    8388:	d9d8      	bls.n	833c <bt_le_adv_start_internal+0x1c>
		    param->interval_min < 0x0020 ||
    838a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    838e:	d8d5      	bhi.n	833c <bt_le_adv_start_internal+0x1c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    8390:	2106      	movs	r1, #6
    8392:	485e      	ldr	r0, [pc, #376]	; (850c <bt_le_adv_start_internal+0x1ec>)
    8394:	f017 fadd 	bl	1f952 <atomic_test_bit>
    8398:	2800      	cmp	r0, #0
    839a:	f040 80ae 	bne.w	84fa <bt_le_adv_start_internal+0x1da>
	if (!dir_adv) {
    839e:	f1b9 0f00 	cmp.w	r9, #0
    83a2:	d031      	beq.n	8408 <bt_le_adv_start_internal+0xe8>
	(void)memset(&set_param, 0, sizeof(set_param));
    83a4:	220f      	movs	r2, #15
    83a6:	2100      	movs	r1, #0
    83a8:	a804      	add	r0, sp, #16
    83aa:	f017 f957 	bl	1f65c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    83ae:	886b      	ldrh	r3, [r5, #2]
	bt_dev.adv_id = param->id;
    83b0:	782f      	ldrb	r7, [r5, #0]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    83b2:	f8ad 3010 	strh.w	r3, [sp, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    83b6:	88ab      	ldrh	r3, [r5, #4]
	bt_dev.adv_id = param->id;
    83b8:	7237      	strb	r7, [r6, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    83ba:	f8ad 3012 	strh.w	r3, [sp, #18]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    83be:	786b      	ldrb	r3, [r5, #1]
	set_param.channel_map  = 0x07;
    83c0:	2007      	movs	r0, #7
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    83c2:	f013 0401 	ands.w	r4, r3, #1
	set_param.channel_map  = 0x07;
    83c6:	f88d 001d 	strb.w	r0, [sp, #29]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    83ca:	d12e      	bne.n	842a <bt_le_adv_start_internal+0x10a>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    83cc:	075b      	lsls	r3, r3, #29
    83ce:	f140 808d 	bpl.w	84ec <bt_le_adv_start_internal+0x1cc>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    83d2:	ea4f 09c7 	mov.w	r9, r7, lsl #3
    83d6:	eba9 0307 	sub.w	r3, r9, r7
    83da:	5cf3      	ldrb	r3, [r6, r3]
    83dc:	2b01      	cmp	r3, #1
    83de:	d105      	bne.n	83ec <bt_le_adv_start_internal+0xcc>
				err = set_random_address(&id_addr->a);
    83e0:	fb10 3007 	smlabb	r0, r0, r7, r3
    83e4:	4430      	add	r0, r6
    83e6:	f7ff f8e1 	bl	75ac <set_random_address>
    83ea:	4604      	mov	r4, r0
			set_param.own_addr_type = id_addr->type;
    83ec:	eba9 0707 	sub.w	r7, r9, r7
    83f0:	5df3      	ldrb	r3, [r6, r7]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    83f2:	f88d 3015 	strb.w	r3, [sp, #21]
		if (err) {
    83f6:	2c00      	cmp	r4, #0
    83f8:	d1a2      	bne.n	8340 <bt_le_adv_start_internal+0x20>
		if (sd) {
    83fa:	f1b8 0f00 	cmp.w	r8, #0
    83fe:	d07a      	beq.n	84f6 <bt_le_adv_start_internal+0x1d6>
			set_param.type = BT_LE_ADV_SCAN_IND;
    8400:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    8402:	f88d 3014 	strb.w	r3, [sp, #20]
    8406:	e037      	b.n	8478 <bt_le_adv_start_internal+0x158>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    8408:	786b      	ldrb	r3, [r5, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    840a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    840e:	f003 0301 	and.w	r3, r3, #1
    8412:	9201      	str	r2, [sp, #4]
    8414:	9300      	str	r3, [sp, #0]
    8416:	4620      	mov	r0, r4
    8418:	9b10      	ldr	r3, [sp, #64]	; 0x40
    841a:	4642      	mov	r2, r8
    841c:	4639      	mov	r1, r7
    841e:	f7ff f963 	bl	76e8 <le_adv_update>
		if (err) {
    8422:	4604      	mov	r4, r0
    8424:	2800      	cmp	r0, #0
    8426:	d0bd      	beq.n	83a4 <bt_le_adv_start_internal+0x84>
    8428:	e78a      	b.n	8340 <bt_le_adv_start_internal+0x20>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    842a:	ea4f 08c7 	mov.w	r8, r7, lsl #3
    842e:	eba8 0307 	sub.w	r3, r8, r7
    8432:	5cf3      	ldrb	r3, [r6, r3]
    8434:	2b01      	cmp	r3, #1
    8436:	d104      	bne.n	8442 <bt_le_adv_start_internal+0x122>
				set_random_address(&id_addr->a);
    8438:	fb10 3007 	smlabb	r0, r0, r7, r3
    843c:	4430      	add	r0, r6
    843e:	f7ff f8b5 	bl	75ac <set_random_address>
			set_param.own_addr_type = id_addr->type;
    8442:	eba8 0707 	sub.w	r7, r8, r7
    8446:	5df3      	ldrb	r3, [r6, r7]
    8448:	f88d 3015 	strb.w	r3, [sp, #21]
		if (dir_adv) {
    844c:	f1b9 0f00 	cmp.w	r9, #0
    8450:	d049      	beq.n	84e6 <bt_le_adv_start_internal+0x1c6>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    8452:	786b      	ldrb	r3, [r5, #1]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    8454:	f013 0f10 	tst.w	r3, #16
			set_param.direct_addr = *peer;
    8458:	f8d9 3000 	ldr.w	r3, [r9]
    845c:	f8cd 3016 	str.w	r3, [sp, #22]
    8460:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    8464:	f8ad 301a 	strh.w	r3, [sp, #26]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    8468:	bf18      	it	ne
    846a:	2404      	movne	r4, #4
			set_param.direct_addr = *peer;
    846c:	f899 3006 	ldrb.w	r3, [r9, #6]
    8470:	f88d 4014 	strb.w	r4, [sp, #20]
    8474:	f88d 301c 	strb.w	r3, [sp, #28]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    8478:	210f      	movs	r1, #15
    847a:	f242 0006 	movw	r0, #8198	; 0x2006
    847e:	f7fe fdbf 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    8482:	4604      	mov	r4, r0
    8484:	2800      	cmp	r0, #0
    8486:	d03b      	beq.n	8500 <bt_le_adv_start_internal+0x1e0>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8488:	220f      	movs	r2, #15
    848a:	a904      	add	r1, sp, #16
    848c:	3008      	adds	r0, #8
    848e:	f01a f882 	bl	22596 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    8492:	4621      	mov	r1, r4
    8494:	2200      	movs	r2, #0
    8496:	f242 0006 	movw	r0, #8198	; 0x2006
    849a:	f7fe feb1 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    849e:	4604      	mov	r4, r0
    84a0:	2800      	cmp	r0, #0
    84a2:	f47f af4d 	bne.w	8340 <bt_le_adv_start_internal+0x20>
	err = set_advertise_enable(true);
    84a6:	2001      	movs	r0, #1
    84a8:	f7fe ff26 	bl	72f8 <set_advertise_enable>
	if (err) {
    84ac:	4604      	mov	r4, r0
    84ae:	2800      	cmp	r0, #0
    84b0:	f47f af46 	bne.w	8340 <bt_le_adv_start_internal+0x20>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    84b4:	786b      	ldrb	r3, [r5, #1]
    84b6:	0799      	lsls	r1, r3, #30
    84b8:	d404      	bmi.n	84c4 <bt_le_adv_start_internal+0x1a4>
    84ba:	f44f 7100 	mov.w	r1, #512	; 0x200
    84be:	4813      	ldr	r0, [pc, #76]	; (850c <bt_le_adv_start_internal+0x1ec>)
    84c0:	f017 fa1c 	bl	1f8fc <atomic_or>
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
    84c4:	786b      	ldrb	r3, [r5, #1]
    84c6:	071a      	lsls	r2, r3, #28
    84c8:	d503      	bpl.n	84d2 <bt_le_adv_start_internal+0x1b2>
    84ca:	2180      	movs	r1, #128	; 0x80
    84cc:	480f      	ldr	r0, [pc, #60]	; (850c <bt_le_adv_start_internal+0x1ec>)
    84ce:	f017 fa15 	bl	1f8fc <atomic_or>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    84d2:	786b      	ldrb	r3, [r5, #1]
    84d4:	07db      	lsls	r3, r3, #31
    84d6:	f57f af33 	bpl.w	8340 <bt_le_adv_start_internal+0x20>
    84da:	f44f 7180 	mov.w	r1, #256	; 0x100
    84de:	480b      	ldr	r0, [pc, #44]	; (850c <bt_le_adv_start_internal+0x1ec>)
    84e0:	f017 fa0c 	bl	1f8fc <atomic_or>
    84e4:	e72c      	b.n	8340 <bt_le_adv_start_internal+0x20>
			set_param.type = BT_LE_ADV_IND;
    84e6:	f88d 9014 	strb.w	r9, [sp, #20]
    84ea:	e7c5      	b.n	8478 <bt_le_adv_start_internal+0x158>
			err = le_set_private_addr(param->id);
    84ec:	f017 fa75 	bl	1f9da <le_set_private_addr.isra.24>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    84f0:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    84f2:	4604      	mov	r4, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    84f4:	e77d      	b.n	83f2 <bt_le_adv_start_internal+0xd2>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    84f6:	2303      	movs	r3, #3
    84f8:	e783      	b.n	8402 <bt_le_adv_start_internal+0xe2>
		return -EALREADY;
    84fa:	f06f 0444 	mvn.w	r4, #68	; 0x44
    84fe:	e71f      	b.n	8340 <bt_le_adv_start_internal+0x20>
		return -ENOBUFS;
    8500:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8504:	e71c      	b.n	8340 <bt_le_adv_start_internal+0x20>
    8506:	bf00      	nop
    8508:	200070f8 	.word	0x200070f8
    850c:	20007168 	.word	0x20007168

00008510 <bt_le_adv_stop>:

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
}

int bt_le_adv_stop(void)
{
    8510:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8512:	f46f 7100 	mvn.w	r1, #512	; 0x200
    8516:	4810      	ldr	r0, [pc, #64]	; (8558 <bt_le_adv_stop+0x48>)
    8518:	f017 f9ff 	bl	1f91a <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    851c:	2106      	movs	r1, #6
    851e:	480e      	ldr	r0, [pc, #56]	; (8558 <bt_le_adv_stop+0x48>)
    8520:	f017 fa17 	bl	1f952 <atomic_test_bit>
    8524:	b910      	cbnz	r0, 852c <bt_le_adv_stop+0x1c>
		return 0;
    8526:	2400      	movs	r4, #0
			le_set_private_addr(bt_dev.adv_id);
		}
	}

	return 0;
}
    8528:	4620      	mov	r0, r4
    852a:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    852c:	2000      	movs	r0, #0
    852e:	f7fe fee3 	bl	72f8 <set_advertise_enable>
	if (err) {
    8532:	4604      	mov	r4, r0
    8534:	2800      	cmp	r0, #0
    8536:	d1f7      	bne.n	8528 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8538:	210a      	movs	r1, #10
    853a:	4807      	ldr	r0, [pc, #28]	; (8558 <bt_le_adv_stop+0x48>)
    853c:	f017 fa09 	bl	1f952 <atomic_test_bit>
    8540:	2800      	cmp	r0, #0
    8542:	d0f0      	beq.n	8526 <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    8544:	210c      	movs	r1, #12
    8546:	4804      	ldr	r0, [pc, #16]	; (8558 <bt_le_adv_stop+0x48>)
    8548:	f017 fa03 	bl	1f952 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    854c:	2800      	cmp	r0, #0
    854e:	d0ea      	beq.n	8526 <bt_le_adv_stop+0x16>
			le_set_private_addr(bt_dev.adv_id);
    8550:	f017 fa43 	bl	1f9da <le_set_private_addr.isra.24>
    8554:	e7e8      	b.n	8528 <bt_le_adv_stop+0x18>
    8556:	bf00      	nop
    8558:	20007168 	.word	0x20007168

0000855c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    855c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    8560:	7803      	ldrb	r3, [r0, #0]
    8562:	2b01      	cmp	r3, #1
{
    8564:	4605      	mov	r5, r0
    8566:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    8568:	f200 8093 	bhi.w	8692 <bt_le_scan_start+0x136>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    856c:	7843      	ldrb	r3, [r0, #1]
    856e:	2b01      	cmp	r3, #1
    8570:	f200 808f 	bhi.w	8692 <bt_le_scan_start+0x136>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    8574:	8841      	ldrh	r1, [r0, #2]
    8576:	1f0b      	subs	r3, r1, #4
    8578:	b29b      	uxth	r3, r3
    857a:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    857e:	4283      	cmp	r3, r0
    8580:	f200 8087 	bhi.w	8692 <bt_le_scan_start+0x136>
	if (param->window < 0x0004 || param->window > 0x4000) {
    8584:	88aa      	ldrh	r2, [r5, #4]
    8586:	1f13      	subs	r3, r2, #4
    8588:	b29b      	uxth	r3, r3
    858a:	4283      	cmp	r3, r0
    858c:	f200 8081 	bhi.w	8692 <bt_le_scan_start+0x136>
	if (param->window > param->interval) {
    8590:	4291      	cmp	r1, r2
    8592:	d37e      	bcc.n	8692 <bt_le_scan_start+0x136>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    8594:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8598:	4841      	ldr	r0, [pc, #260]	; (86a0 <bt_le_scan_start+0x144>)
    859a:	f017 f9af 	bl	1f8fc <atomic_or>
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    859e:	f410 6300 	ands.w	r3, r0, #2048	; 0x800
    85a2:	d179      	bne.n	8698 <bt_le_scan_start+0x13c>
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    85a4:	210a      	movs	r1, #10
    85a6:	483e      	ldr	r0, [pc, #248]	; (86a0 <bt_le_scan_start+0x144>)
    85a8:	f017 f9d3 	bl	1f952 <atomic_test_bit>
    85ac:	b168      	cbz	r0, 85ca <bt_le_scan_start+0x6e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    85ae:	4618      	mov	r0, r3
    85b0:	f7fe fe6c 	bl	728c <set_le_scan_enable>
		if (err) {
    85b4:	4604      	mov	r4, r0
    85b6:	b140      	cbz	r0, 85ca <bt_le_scan_start+0x6e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    85b8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    85bc:	4838      	ldr	r0, [pc, #224]	; (86a0 <bt_le_scan_start+0x144>)
    85be:	f017 f9ac 	bl	1f91a <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    85c2:	4620      	mov	r0, r4
    85c4:	b002      	add	sp, #8
    85c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (val) {
    85ca:	786b      	ldrb	r3, [r5, #1]
    85cc:	2b00      	cmp	r3, #0
    85ce:	d049      	beq.n	8664 <bt_le_scan_start+0x108>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    85d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    85d4:	4832      	ldr	r0, [pc, #200]	; (86a0 <bt_le_scan_start+0x144>)
    85d6:	f017 f991 	bl	1f8fc <atomic_or>
	(void)memset(&set_param, 0, sizeof(set_param));
    85da:	2207      	movs	r2, #7
    85dc:	2100      	movs	r1, #0
    85de:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
    85e0:	782e      	ldrb	r6, [r5, #0]
    85e2:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    85e6:	88ac      	ldrh	r4, [r5, #4]
	(void)memset(&set_param, 0, sizeof(set_param));
    85e8:	f017 f838 	bl	1f65c <memset>
		set_param.addr_type =  bt_dev.id_addr[0].type;
    85ec:	482d      	ldr	r0, [pc, #180]	; (86a4 <bt_le_scan_start+0x148>)
	set_param.scan_type = scan_type;
    85ee:	f88d 6000 	strb.w	r6, [sp]
	set_param.filter_policy = 0x00;
    85f2:	2300      	movs	r3, #0
    85f4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    85f8:	2e01      	cmp	r6, #1
		set_param.addr_type =  bt_dev.id_addr[0].type;
    85fa:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    85fc:	f8ad 8001 	strh.w	r8, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    8600:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr[0].type;
    8604:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    8608:	d132      	bne.n	8670 <bt_le_scan_start+0x114>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    860a:	2106      	movs	r1, #6
    860c:	3070      	adds	r0, #112	; 0x70
    860e:	f017 f9a0 	bl	1f952 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    8612:	bb68      	cbnz	r0, 8670 <bt_le_scan_start+0x114>
			err = le_set_private_addr(BT_ID_DEFAULT);
    8614:	f017 f9e1 	bl	1f9da <le_set_private_addr.isra.24>
			if (err) {
    8618:	4604      	mov	r4, r0
    861a:	2800      	cmp	r0, #0
    861c:	d1cc      	bne.n	85b8 <bt_le_scan_start+0x5c>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    861e:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    8622:	2107      	movs	r1, #7
    8624:	f242 000b 	movw	r0, #8203	; 0x200b
    8628:	f7fe fcea 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    862c:	4604      	mov	r4, r0
    862e:	b368      	cbz	r0, 868c <bt_le_scan_start+0x130>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8630:	2207      	movs	r2, #7
    8632:	4669      	mov	r1, sp
    8634:	3008      	adds	r0, #8
    8636:	f019 ffae 	bl	22596 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    863a:	4621      	mov	r1, r4
    863c:	f242 000b 	movw	r0, #8203	; 0x200b
    8640:	f7fe fd0e 	bl	7060 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    8644:	2001      	movs	r0, #1
    8646:	f7fe fe21 	bl	728c <set_le_scan_enable>
	if (err) {
    864a:	4604      	mov	r4, r0
    864c:	2800      	cmp	r0, #0
    864e:	d1b3      	bne.n	85b8 <bt_le_scan_start+0x5c>
	if (val) {
    8650:	2e01      	cmp	r6, #1
    8652:	d115      	bne.n	8680 <bt_le_scan_start+0x124>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    8658:	4811      	ldr	r0, [pc, #68]	; (86a0 <bt_le_scan_start+0x144>)
    865a:	f017 f94f 	bl	1f8fc <atomic_or>
	scan_dev_found_cb = cb;
    865e:	4b12      	ldr	r3, [pc, #72]	; (86a8 <bt_le_scan_start+0x14c>)
    8660:	601f      	str	r7, [r3, #0]
	return 0;
    8662:	e7ae      	b.n	85c2 <bt_le_scan_start+0x66>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8664:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    8668:	480d      	ldr	r0, [pc, #52]	; (86a0 <bt_le_scan_start+0x144>)
    866a:	f017 f956 	bl	1f91a <atomic_and>
    866e:	e7b4      	b.n	85da <bt_le_scan_start+0x7e>
		} else if (set_param.addr_type == BT_ADDR_LE_RANDOM) {
    8670:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8674:	2b01      	cmp	r3, #1
    8676:	d1d4      	bne.n	8622 <bt_le_scan_start+0xc6>
			set_random_address(&bt_dev.id_addr[0].a);
    8678:	480c      	ldr	r0, [pc, #48]	; (86ac <bt_le_scan_start+0x150>)
    867a:	f7fe ff97 	bl	75ac <set_random_address>
    867e:	e7d0      	b.n	8622 <bt_le_scan_start+0xc6>
    8680:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8684:	4806      	ldr	r0, [pc, #24]	; (86a0 <bt_le_scan_start+0x144>)
    8686:	f017 f948 	bl	1f91a <atomic_and>
	if (err) {
    868a:	e7e8      	b.n	865e <bt_le_scan_start+0x102>
		return -ENOBUFS;
    868c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8690:	e792      	b.n	85b8 <bt_le_scan_start+0x5c>
		return -EINVAL;
    8692:	f06f 0415 	mvn.w	r4, #21
    8696:	e794      	b.n	85c2 <bt_le_scan_start+0x66>
		return -EALREADY;
    8698:	f06f 0444 	mvn.w	r4, #68	; 0x44
    869c:	e791      	b.n	85c2 <bt_le_scan_start+0x66>
    869e:	bf00      	nop
    86a0:	20007168 	.word	0x20007168
    86a4:	200070f8 	.word	0x200070f8
    86a8:	20000564 	.word	0x20000564
    86ac:	200070f9 	.word	0x200070f9

000086b0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    86b0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    86b2:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    86b6:	4807      	ldr	r0, [pc, #28]	; (86d4 <bt_le_scan_stop+0x24>)
    86b8:	f017 f92f 	bl	1f91a <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    86bc:	0503      	lsls	r3, r0, #20
    86be:	d506      	bpl.n	86ce <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    86c0:	4b05      	ldr	r3, [pc, #20]	; (86d8 <bt_le_scan_stop+0x28>)
    86c2:	2000      	movs	r0, #0
    86c4:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    86c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    86ca:	f7ff b857 	b.w	777c <bt_le_scan_update>
}
    86ce:	f06f 0044 	mvn.w	r0, #68	; 0x44
    86d2:	bd08      	pop	{r3, pc}
    86d4:	20007168 	.word	0x20007168
    86d8:	20000564 	.word	0x20000564

000086dc <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    86dc:	b538      	push	{r3, r4, r5, lr}
    86de:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    86e0:	4805      	ldr	r0, [pc, #20]	; (86f8 <bt_buf_get_rx+0x1c>)
    86e2:	f019 fece 	bl	22482 <net_buf_alloc_fixed>
#endif

	if (buf) {
    86e6:	4604      	mov	r4, r0
    86e8:	b120      	cbz	r0, 86f4 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    86ea:	2100      	movs	r1, #0
    86ec:	3008      	adds	r0, #8
    86ee:	f019 fee7 	bl	224c0 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    86f2:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    86f4:	4620      	mov	r0, r4
    86f6:	bd38      	pop	{r3, r4, r5, pc}
    86f8:	2000817c 	.word	0x2000817c

000086fc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    86fc:	b510      	push	{r4, lr}
    86fe:	4601      	mov	r1, r0
	__asm__ volatile(
    8700:	f04f 0320 	mov.w	r3, #32
    8704:	f3ef 8011 	mrs	r0, BASEPRI
    8708:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    870c:	4a0c      	ldr	r2, [pc, #48]	; (8740 <bt_buf_get_cmd_complete+0x44>)
	bt_dev.sent_cmd = NULL;
    870e:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    8710:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    8714:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile(
    8718:	f380 8811 	msr	BASEPRI, r0
    871c:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    8720:	b924      	cbnz	r4, 872c <bt_buf_get_cmd_complete+0x30>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8722:	2001      	movs	r0, #1
}
    8724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8728:	f7ff bfd8 	b.w	86dc <bt_buf_get_rx>
    872c:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    872e:	f104 0008 	add.w	r0, r4, #8
    8732:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    8734:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    8736:	4619      	mov	r1, r3
    8738:	f019 fec2 	bl	224c0 <net_buf_simple_reserve>
}
    873c:	4620      	mov	r0, r4
    873e:	bd10      	pop	{r4, pc}
    8740:	200070f8 	.word	0x200070f8

00008744 <bt_pub_key_gen>:
	return cmd(buf)->opcode;
}

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    8744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    8748:	4e2b      	ldr	r6, [pc, #172]	; (87f8 <bt_pub_key_gen+0xb4>)
    874a:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
    874e:	f003 0306 	and.w	r3, r3, #6
    8752:	2b06      	cmp	r3, #6
{
    8754:	4607      	mov	r7, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    8756:	d012      	beq.n	877e <bt_pub_key_gen+0x3a>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    8758:	2302      	movs	r3, #2
    875a:	f04f 0100 	mov.w	r1, #0
    875e:	f363 0107 	bfi	r1, r3, #0, #8
    8762:	4a26      	ldr	r2, [pc, #152]	; (87fc <bt_pub_key_gen+0xb8>)
    8764:	4b26      	ldr	r3, [pc, #152]	; (8800 <bt_pub_key_gen+0xbc>)
    8766:	4827      	ldr	r0, [pc, #156]	; (8804 <bt_pub_key_gen+0xc0>)
    8768:	1a9b      	subs	r3, r3, r2
    876a:	08db      	lsrs	r3, r3, #3
    876c:	f363 118f 	bfi	r1, r3, #6, #10
    8770:	f015 fe67 	bl	1e442 <log_0>
		return -ENOTSUP;
    8774:	f06f 0422 	mvn.w	r4, #34	; 0x22
			cb->func(NULL);
		}
	}

	return 0;
}
    8778:	4620      	mov	r0, r4
    877a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	new_cb->_next = pub_key_cb;
    877e:	4d22      	ldr	r5, [pc, #136]	; (8808 <bt_pub_key_gen+0xc4>)
    8780:	682b      	ldr	r3, [r5, #0]
    8782:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    8784:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    8786:	2120      	movs	r1, #32
    8788:	f106 0070 	add.w	r0, r6, #112	; 0x70
    878c:	f017 f8b6 	bl	1f8fc <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8790:	f010 0820 	ands.w	r8, r0, #32
    8794:	d001      	beq.n	879a <bt_pub_key_gen+0x56>
		return 0;
    8796:	2400      	movs	r4, #0
    8798:	e7ee      	b.n	8778 <bt_pub_key_gen+0x34>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    879a:	f06f 0110 	mvn.w	r1, #16
    879e:	f106 0070 	add.w	r0, r6, #112	; 0x70
    87a2:	f017 f8ba 	bl	1f91a <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    87a6:	4642      	mov	r2, r8
    87a8:	4641      	mov	r1, r8
    87aa:	f242 0025 	movw	r0, #8229	; 0x2025
    87ae:	f7fe fd27 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    87b2:	4604      	mov	r4, r0
    87b4:	b1b0      	cbz	r0, 87e4 <bt_pub_key_gen+0xa0>
		BT_ERR("Sending LE P256 Public Key command failed");
    87b6:	2301      	movs	r3, #1
    87b8:	f04f 0100 	mov.w	r1, #0
    87bc:	4a0f      	ldr	r2, [pc, #60]	; (87fc <bt_pub_key_gen+0xb8>)
    87be:	4813      	ldr	r0, [pc, #76]	; (880c <bt_pub_key_gen+0xc8>)
    87c0:	f363 0107 	bfi	r1, r3, #0, #8
    87c4:	4b0e      	ldr	r3, [pc, #56]	; (8800 <bt_pub_key_gen+0xbc>)
    87c6:	1a9b      	subs	r3, r3, r2
    87c8:	08db      	lsrs	r3, r3, #3
    87ca:	f363 118f 	bfi	r1, r3, #6, #10
    87ce:	f015 fe38 	bl	1e442 <log_0>
    87d2:	f06f 0120 	mvn.w	r1, #32
    87d6:	f106 0070 	add.w	r0, r6, #112	; 0x70
    87da:	f017 f89e 	bl	1f91a <atomic_and>
		pub_key_cb = NULL;
    87de:	f8c5 8000 	str.w	r8, [r5]
		return err;
    87e2:	e7c9      	b.n	8778 <bt_pub_key_gen+0x34>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    87e4:	682c      	ldr	r4, [r5, #0]
    87e6:	2c00      	cmp	r4, #0
    87e8:	d0d5      	beq.n	8796 <bt_pub_key_gen+0x52>
		if (cb != new_cb) {
    87ea:	42bc      	cmp	r4, r7
    87ec:	d002      	beq.n	87f4 <bt_pub_key_gen+0xb0>
			cb->func(NULL);
    87ee:	6823      	ldr	r3, [r4, #0]
    87f0:	2000      	movs	r0, #0
    87f2:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    87f4:	6864      	ldr	r4, [r4, #4]
    87f6:	e7f6      	b.n	87e6 <bt_pub_key_gen+0xa2>
    87f8:	200070f8 	.word	0x200070f8
    87fc:	000233ec 	.word	0x000233ec
    8800:	0002345c 	.word	0x0002345c
    8804:	00024db3 	.word	0x00024db3
    8808:	2000055c 	.word	0x2000055c
    880c:	00024dd2 	.word	0x00024dd2

00008810 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    8810:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    8812:	2104      	movs	r1, #4
    8814:	4803      	ldr	r0, [pc, #12]	; (8824 <bt_pub_key_get+0x14>)
    8816:	f017 f89c 	bl	1f952 <atomic_test_bit>
    881a:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    881c:	4802      	ldr	r0, [pc, #8]	; (8828 <bt_pub_key_get+0x18>)
    881e:	bf08      	it	eq
    8820:	2000      	moveq	r0, #0
    8822:	bd08      	pop	{r3, pc}
    8824:	20007168 	.word	0x20007168
    8828:	2000229a 	.word	0x2000229a

0000882c <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    882e:	4c1a      	ldr	r4, [pc, #104]	; (8898 <bt_dh_key_gen+0x6c>)
    8830:	6822      	ldr	r2, [r4, #0]
{
    8832:	4607      	mov	r7, r0
    8834:	460b      	mov	r3, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8836:	b112      	cbz	r2, 883e <bt_dh_key_gen+0x12>
		return -EBUSY;
    8838:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    883c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    883e:	2105      	movs	r1, #5
    8840:	4816      	ldr	r0, [pc, #88]	; (889c <bt_dh_key_gen+0x70>)
    8842:	f017 f886 	bl	1f952 <atomic_test_bit>
    8846:	4606      	mov	r6, r0
    8848:	2800      	cmp	r0, #0
    884a:	d1f5      	bne.n	8838 <bt_dh_key_gen+0xc>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    884c:	2104      	movs	r1, #4
    884e:	4813      	ldr	r0, [pc, #76]	; (889c <bt_dh_key_gen+0x70>)
    8850:	f017 f87f 	bl	1f952 <atomic_test_bit>
    8854:	b1e8      	cbz	r0, 8892 <bt_dh_key_gen+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    8856:	2140      	movs	r1, #64	; 0x40
    8858:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    885c:	6023      	str	r3, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    885e:	f7fe fbcf 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
    8862:	4605      	mov	r5, r0
    8864:	b918      	cbnz	r0, 886e <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    8866:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    8868:	f06f 0036 	mvn.w	r0, #54	; 0x36
    886c:	e7e6      	b.n	883c <bt_dh_key_gen+0x10>
	cp = net_buf_add(buf, sizeof(*cp));
    886e:	2140      	movs	r1, #64	; 0x40
    8870:	3008      	adds	r0, #8
    8872:	f019 fe8a 	bl	2258a <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    8876:	2240      	movs	r2, #64	; 0x40
    8878:	4639      	mov	r1, r7
    887a:	f016 fec5 	bl	1f608 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    887e:	4632      	mov	r2, r6
    8880:	4629      	mov	r1, r5
    8882:	f242 0026 	movw	r0, #8230	; 0x2026
    8886:	f7fe fcbb 	bl	7200 <bt_hci_cmd_send_sync>
	if (err) {
    888a:	2800      	cmp	r0, #0
    888c:	d0d6      	beq.n	883c <bt_dh_key_gen+0x10>
		dh_key_cb = NULL;
    888e:	6026      	str	r6, [r4, #0]
		return err;
    8890:	e7d4      	b.n	883c <bt_dh_key_gen+0x10>
		return -EADDRNOTAVAIL;
    8892:	f06f 0030 	mvn.w	r0, #48	; 0x30
    8896:	e7d1      	b.n	883c <bt_dh_key_gen+0x10>
    8898:	20000558 	.word	0x20000558
    889c:	20007168 	.word	0x20007168

000088a0 <bt_le_oob_get_local>:
	return 0;
}
#endif /* CONFIG_BT_BREDR */

int bt_le_oob_get_local(u8_t id, struct bt_le_oob *oob)
{
    88a0:	b510      	push	{r4, lr}
    88a2:	460b      	mov	r3, r1
	if (id >= CONFIG_BT_ID_MAX) {
    88a4:	4604      	mov	r4, r0
    88a6:	b928      	cbnz	r0, 88b4 <bt_le_oob_get_local+0x14>
			return err;
		}

		bt_addr_le_copy(&oob->addr, &bt_dev.random_addr);
	} else {
		bt_addr_le_copy(&oob->addr, &bt_dev.id_addr[id]);
    88a8:	4618      	mov	r0, r3
    88aa:	4904      	ldr	r1, [pc, #16]	; (88bc <bt_le_oob_get_local+0x1c>)
    88ac:	f017 f823 	bl	1f8f6 <bt_addr_le_copy>
	}

	return 0;
    88b0:	4620      	mov	r0, r4
}
    88b2:	bd10      	pop	{r4, pc}
		return -EINVAL;
    88b4:	f06f 0015 	mvn.w	r0, #21
    88b8:	e7fb      	b.n	88b2 <bt_le_oob_get_local+0x12>
    88ba:	bf00      	nop
    88bc:	200070f8 	.word	0x200070f8

000088c0 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    88c0:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    88c2:	4b08      	ldr	r3, [pc, #32]	; (88e4 <notify_connected+0x24>)
    88c4:	681c      	ldr	r4, [r3, #0]
{
    88c6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    88c8:	b924      	cbnz	r4, 88d4 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	bt_gatt_connected(conn);
    88ca:	4628      	mov	r0, r5
}
    88cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_connected(conn);
    88d0:	f002 bb88 	b.w	afe4 <bt_gatt_connected>
		if (cb->connected) {
    88d4:	6823      	ldr	r3, [r4, #0]
    88d6:	b113      	cbz	r3, 88de <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    88d8:	7a69      	ldrb	r1, [r5, #9]
    88da:	4628      	mov	r0, r5
    88dc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    88de:	6924      	ldr	r4, [r4, #16]
    88e0:	e7f2      	b.n	88c8 <notify_connected+0x8>
    88e2:	bf00      	nop
    88e4:	200005d4 	.word	0x200005d4

000088e8 <bt_conn_get_pkts>:
}
    88e8:	4800      	ldr	r0, [pc, #0]	; (88ec <bt_conn_get_pkts+0x4>)
    88ea:	4770      	bx	lr
    88ec:	20007184 	.word	0x20007184

000088f0 <notify_le_param_updated>:
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send slave conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    88f0:	1d03      	adds	r3, r0, #4
{
    88f2:	b570      	push	{r4, r5, r6, lr}
    88f4:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    88f6:	4618      	mov	r0, r3
    88f8:	f017 f8c2 	bl	1fa80 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    88fc:	0582      	lsls	r2, r0, #22
    88fe:	d519      	bpl.n	8934 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    8900:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8904:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    8908:	4291      	cmp	r1, r2
    890a:	d813      	bhi.n	8934 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    890c:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    8910:	4291      	cmp	r1, r2
    8912:	d30f      	bcc.n	8934 <notify_le_param_updated+0x44>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    8914:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
    8918:	4291      	cmp	r1, r2
    891a:	d10b      	bne.n	8934 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    891c:	f3bf 8f5b 	dmb	ish
    8920:	e853 2f00 	ldrex	r2, [r3]
    8924:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    8928:	e843 2100 	strex	r1, r2, [r3]
    892c:	2900      	cmp	r1, #0
    892e:	d1f7      	bne.n	8920 <notify_le_param_updated+0x30>
    8930:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    8934:	4b07      	ldr	r3, [pc, #28]	; (8954 <notify_le_param_updated+0x64>)
    8936:	681d      	ldr	r5, [r3, #0]
    8938:	b905      	cbnz	r5, 893c <notify_le_param_updated+0x4c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    893a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    893c:	68ee      	ldr	r6, [r5, #12]
    893e:	b13e      	cbz	r6, 8950 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    8940:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    8944:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    8948:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    894c:	4620      	mov	r0, r4
    894e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    8950:	692d      	ldr	r5, [r5, #16]
    8952:	e7f1      	b.n	8938 <notify_le_param_updated+0x48>
    8954:	200005d4 	.word	0x200005d4

00008958 <le_param_req>:

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    8958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    895a:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    895c:	4608      	mov	r0, r1
{
    895e:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    8960:	f017 f84d 	bl	1f9fe <bt_le_conn_params_valid>
    8964:	4605      	mov	r5, r0
    8966:	b910      	cbnz	r0, 896e <le_param_req+0x16>
		return false;
    8968:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    896a:	4628      	mov	r0, r5
    896c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    896e:	4b09      	ldr	r3, [pc, #36]	; (8994 <le_param_req+0x3c>)
    8970:	681c      	ldr	r4, [r3, #0]
    8972:	2c00      	cmp	r4, #0
    8974:	d0f9      	beq.n	896a <le_param_req+0x12>
		if (!cb->le_param_req) {
    8976:	68a3      	ldr	r3, [r4, #8]
    8978:	b90b      	cbnz	r3, 897e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    897a:	6924      	ldr	r4, [r4, #16]
    897c:	e7f9      	b.n	8972 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    897e:	4631      	mov	r1, r6
    8980:	4638      	mov	r0, r7
    8982:	4798      	blx	r3
    8984:	2800      	cmp	r0, #0
    8986:	d0ef      	beq.n	8968 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    8988:	4630      	mov	r0, r6
    898a:	f017 f838 	bl	1f9fe <bt_le_conn_params_valid>
    898e:	2800      	cmp	r0, #0
    8990:	d1f3      	bne.n	897a <le_param_req+0x22>
    8992:	e7e9      	b.n	8968 <le_param_req+0x10>
    8994:	200005d4 	.word	0x200005d4

00008998 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    8998:	4b02      	ldr	r3, [pc, #8]	; (89a4 <bt_conn_cb_register+0xc>)
    899a:	681a      	ldr	r2, [r3, #0]
    899c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    899e:	6018      	str	r0, [r3, #0]
}
    89a0:	4770      	bx	lr
    89a2:	bf00      	nop
    89a4:	200005d4 	.word	0x200005d4

000089a8 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    89a8:	2a01      	cmp	r2, #1
{
    89aa:	b570      	push	{r4, r5, r6, lr}
    89ac:	460d      	mov	r5, r1
    89ae:	4604      	mov	r4, r0
    89b0:	4611      	mov	r1, r2
	switch (flags) {
    89b2:	d020      	beq.n	89f6 <bt_conn_recv+0x4e>
    89b4:	2a02      	cmp	r2, #2
    89b6:	f040 8081 	bne.w	8abc <bt_conn_recv+0x114>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    89ba:	68ab      	ldr	r3, [r5, #8]
    89bc:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    89be:	8983      	ldrh	r3, [r0, #12]
    89c0:	b183      	cbz	r3, 89e4 <bt_conn_recv+0x3c>
			BT_ERR("Unexpected first L2CAP frame");
    89c2:	2301      	movs	r3, #1
    89c4:	f04f 0100 	mov.w	r1, #0
    89c8:	f363 0107 	bfi	r1, r3, #0, #8
    89cc:	4a46      	ldr	r2, [pc, #280]	; (8ae8 <bt_conn_recv+0x140>)
    89ce:	4b47      	ldr	r3, [pc, #284]	; (8aec <bt_conn_recv+0x144>)
    89d0:	4847      	ldr	r0, [pc, #284]	; (8af0 <bt_conn_recv+0x148>)
    89d2:	1a9b      	subs	r3, r3, r2
    89d4:	08db      	lsrs	r3, r3, #3
    89d6:	f363 118f 	bfi	r1, r3, #6, #10
    89da:	f015 fd32 	bl	1e442 <log_0>
			bt_conn_reset_rx_state(conn);
    89de:	4620      	mov	r0, r4
    89e0:	f017 f854 	bl	1fa8c <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    89e4:	89ab      	ldrh	r3, [r5, #12]
    89e6:	1af3      	subs	r3, r6, r3
    89e8:	3304      	adds	r3, #4
    89ea:	b29b      	uxth	r3, r3
    89ec:	81a3      	strh	r3, [r4, #12]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    89ee:	2b00      	cmp	r3, #0
    89f0:	d04f      	beq.n	8a92 <bt_conn_recv+0xea>
			conn->rx = buf;
    89f2:	6125      	str	r5, [r4, #16]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    89f4:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    89f6:	8983      	ldrh	r3, [r0, #12]
    89f8:	b9ab      	cbnz	r3, 8a26 <bt_conn_recv+0x7e>
			BT_ERR("Unexpected L2CAP continuation");
    89fa:	2301      	movs	r3, #1
    89fc:	f04f 0100 	mov.w	r1, #0
    8a00:	f363 0107 	bfi	r1, r3, #0, #8
    8a04:	4a38      	ldr	r2, [pc, #224]	; (8ae8 <bt_conn_recv+0x140>)
    8a06:	4b39      	ldr	r3, [pc, #228]	; (8aec <bt_conn_recv+0x144>)
    8a08:	483a      	ldr	r0, [pc, #232]	; (8af4 <bt_conn_recv+0x14c>)
    8a0a:	1a9b      	subs	r3, r3, r2
    8a0c:	08db      	lsrs	r3, r3, #3
    8a0e:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("L2CAP data overflow");
    8a12:	f015 fd16 	bl	1e442 <log_0>
			bt_conn_reset_rx_state(conn);
    8a16:	4620      	mov	r0, r4
    8a18:	f017 f838 	bl	1fa8c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    8a1c:	4628      	mov	r0, r5
}
    8a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    8a22:	f012 b907 	b.w	1ac34 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    8a26:	89ae      	ldrh	r6, [r5, #12]
    8a28:	42b3      	cmp	r3, r6
    8a2a:	d20c      	bcs.n	8a46 <bt_conn_recv+0x9e>
			BT_ERR("L2CAP data overflow");
    8a2c:	2301      	movs	r3, #1
    8a2e:	f04f 0100 	mov.w	r1, #0
    8a32:	f363 0107 	bfi	r1, r3, #0, #8
    8a36:	4a2c      	ldr	r2, [pc, #176]	; (8ae8 <bt_conn_recv+0x140>)
    8a38:	4b2c      	ldr	r3, [pc, #176]	; (8aec <bt_conn_recv+0x144>)
    8a3a:	482f      	ldr	r0, [pc, #188]	; (8af8 <bt_conn_recv+0x150>)
    8a3c:	1a9b      	subs	r3, r3, r2
    8a3e:	08db      	lsrs	r3, r3, #3
    8a40:	f363 118f 	bfi	r1, r3, #6, #10
    8a44:	e7e5      	b.n	8a12 <bt_conn_recv+0x6a>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    8a46:	6900      	ldr	r0, [r0, #16]
    8a48:	3008      	adds	r0, #8
    8a4a:	f019 fe43 	bl	226d4 <net_buf_simple_tailroom>
    8a4e:	4286      	cmp	r6, r0
    8a50:	d90c      	bls.n	8a6c <bt_conn_recv+0xc4>
			BT_ERR("Not enough buffer space for L2CAP data");
    8a52:	2301      	movs	r3, #1
    8a54:	f04f 0100 	mov.w	r1, #0
    8a58:	f363 0107 	bfi	r1, r3, #0, #8
    8a5c:	4a22      	ldr	r2, [pc, #136]	; (8ae8 <bt_conn_recv+0x140>)
    8a5e:	4b23      	ldr	r3, [pc, #140]	; (8aec <bt_conn_recv+0x144>)
    8a60:	4826      	ldr	r0, [pc, #152]	; (8afc <bt_conn_recv+0x154>)
    8a62:	1a9b      	subs	r3, r3, r2
    8a64:	08db      	lsrs	r3, r3, #3
    8a66:	f363 118f 	bfi	r1, r3, #6, #10
    8a6a:	e7d2      	b.n	8a12 <bt_conn_recv+0x6a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    8a6c:	6920      	ldr	r0, [r4, #16]
    8a6e:	89aa      	ldrh	r2, [r5, #12]
    8a70:	68a9      	ldr	r1, [r5, #8]
    8a72:	3008      	adds	r0, #8
    8a74:	f019 fd8f 	bl	22596 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    8a78:	89a3      	ldrh	r3, [r4, #12]
    8a7a:	89aa      	ldrh	r2, [r5, #12]
    8a7c:	1a9b      	subs	r3, r3, r2
    8a7e:	81a3      	strh	r3, [r4, #12]
		net_buf_unref(buf);
    8a80:	4628      	mov	r0, r5
    8a82:	f012 f8d7 	bl	1ac34 <net_buf_unref>
		if (conn->rx_len) {
    8a86:	89a3      	ldrh	r3, [r4, #12]
    8a88:	2b00      	cmp	r3, #0
    8a8a:	d1b3      	bne.n	89f4 <bt_conn_recv+0x4c>
		buf = conn->rx;
    8a8c:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    8a8e:	81a3      	strh	r3, [r4, #12]
		conn->rx = NULL;
    8a90:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    8a92:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    8a94:	89aa      	ldrh	r2, [r5, #12]
    8a96:	8819      	ldrh	r1, [r3, #0]
    8a98:	1d0b      	adds	r3, r1, #4
    8a9a:	4293      	cmp	r3, r2
    8a9c:	d01d      	beq.n	8ada <bt_conn_recv+0x132>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    8a9e:	2001      	movs	r0, #1
    8aa0:	f04f 0300 	mov.w	r3, #0
    8aa4:	f360 0307 	bfi	r3, r0, #0, #8
    8aa8:	4c0f      	ldr	r4, [pc, #60]	; (8ae8 <bt_conn_recv+0x140>)
    8aaa:	4810      	ldr	r0, [pc, #64]	; (8aec <bt_conn_recv+0x144>)
    8aac:	1b00      	subs	r0, r0, r4
    8aae:	08c0      	lsrs	r0, r0, #3
    8ab0:	f360 138f 	bfi	r3, r0, #6, #10
    8ab4:	4812      	ldr	r0, [pc, #72]	; (8b00 <bt_conn_recv+0x158>)
    8ab6:	f015 fce5 	bl	1e484 <log_2>
		net_buf_unref(buf);
    8aba:	e7af      	b.n	8a1c <bt_conn_recv+0x74>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    8abc:	2301      	movs	r3, #1
    8abe:	f04f 0200 	mov.w	r2, #0
    8ac2:	f363 0207 	bfi	r2, r3, #0, #8
    8ac6:	4808      	ldr	r0, [pc, #32]	; (8ae8 <bt_conn_recv+0x140>)
    8ac8:	4b08      	ldr	r3, [pc, #32]	; (8aec <bt_conn_recv+0x144>)
    8aca:	1a1b      	subs	r3, r3, r0
    8acc:	08db      	lsrs	r3, r3, #3
    8ace:	f363 128f 	bfi	r2, r3, #6, #10
    8ad2:	480c      	ldr	r0, [pc, #48]	; (8b04 <bt_conn_recv+0x15c>)
    8ad4:	f015 fcc2 	bl	1e45c <log_1>
		bt_conn_reset_rx_state(conn);
    8ad8:	e79d      	b.n	8a16 <bt_conn_recv+0x6e>
	bt_l2cap_recv(conn, buf);
    8ada:	4629      	mov	r1, r5
    8adc:	4620      	mov	r0, r4
}
    8ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    8ae2:	f000 bcf5 	b.w	94d0 <bt_l2cap_recv>
    8ae6:	bf00      	nop
    8ae8:	000233ec 	.word	0x000233ec
    8aec:	000233f4 	.word	0x000233f4
    8af0:	000252b9 	.word	0x000252b9
    8af4:	000252d6 	.word	0x000252d6
    8af8:	000252f4 	.word	0x000252f4
    8afc:	00025308 	.word	0x00025308
    8b00:	0002534d 	.word	0x0002534d
    8b04:	0002532f 	.word	0x0002532f

00008b08 <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    8b08:	7a83      	ldrb	r3, [r0, #10]
    8b0a:	2b04      	cmp	r3, #4
{
    8b0c:	b510      	push	{r4, lr}
    8b0e:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    8b10:	d013      	beq.n	8b3a <bt_conn_send_cb+0x32>
		BT_ERR("not connected!");
    8b12:	2301      	movs	r3, #1
    8b14:	f04f 0100 	mov.w	r1, #0
    8b18:	4a0b      	ldr	r2, [pc, #44]	; (8b48 <bt_conn_send_cb+0x40>)
    8b1a:	480c      	ldr	r0, [pc, #48]	; (8b4c <bt_conn_send_cb+0x44>)
    8b1c:	f363 0107 	bfi	r1, r3, #0, #8
    8b20:	4b0b      	ldr	r3, [pc, #44]	; (8b50 <bt_conn_send_cb+0x48>)
    8b22:	1a9b      	subs	r3, r3, r2
    8b24:	08db      	lsrs	r3, r3, #3
    8b26:	f363 118f 	bfi	r1, r3, #6, #10
    8b2a:	f015 fc8a 	bl	1e442 <log_0>
		net_buf_unref(buf);
    8b2e:	4620      	mov	r0, r4
    8b30:	f012 f880 	bl	1ac34 <net_buf_unref>
		return -ENOTCONN;
    8b34:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    8b38:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    8b3a:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    8b3c:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    8b3e:	f019 fd13 	bl	22568 <net_buf_put>
	return 0;
    8b42:	2000      	movs	r0, #0
    8b44:	e7f8      	b.n	8b38 <bt_conn_send_cb+0x30>
    8b46:	bf00      	nop
    8b48:	000233ec 	.word	0x000233ec
    8b4c:	00025369 	.word	0x00025369
    8b50:	000233f4 	.word	0x000233f4

00008b54 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    8b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
Z_GENLIST_PREPEND(slist, snode)
    8b58:	4d0d      	ldr	r5, [pc, #52]	; (8b90 <bt_conn_notify_tx+0x3c>)
    8b5a:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    8b5c:	f100 071c 	add.w	r7, r0, #28
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    8b60:	f04f 0800 	mov.w	r8, #0
    8b64:	2100      	movs	r1, #0
    8b66:	4638      	mov	r0, r7
    8b68:	f01a f834 	bl	22bd4 <z_impl_k_queue_get>
    8b6c:	4604      	mov	r4, r0
    8b6e:	b908      	cbnz	r0, 8b74 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    8b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    8b74:	6863      	ldr	r3, [r4, #4]
    8b76:	b10b      	cbz	r3, 8b7c <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    8b78:	4630      	mov	r0, r6
    8b7a:	4798      	blx	r3
    8b7c:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    8b7e:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    8b80:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    8b82:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    8b86:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    8b88:	2b00      	cmp	r3, #0
    8b8a:	d1eb      	bne.n	8b64 <bt_conn_notify_tx+0x10>
	list->tail = node;
    8b8c:	606c      	str	r4, [r5, #4]
    8b8e:	e7e7      	b.n	8b60 <bt_conn_notify_tx+0xc>
    8b90:	20000690 	.word	0x20000690

00008b94 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    8b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b98:	4605      	mov	r5, r0
    8b9a:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    8b9c:	4847      	ldr	r0, [pc, #284]	; (8cbc <send_frag+0x128>)
    8b9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8ba2:	4698      	mov	r8, r3
    8ba4:	4614      	mov	r4, r2
    8ba6:	f013 fb89 	bl	1c2bc <z_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    8baa:	4b45      	ldr	r3, [pc, #276]	; (8cc0 <send_frag+0x12c>)
    8bac:	f103 0044 	add.w	r0, r3, #68	; 0x44
    8bb0:	f016 ff66 	bl	1fa80 <atomic_get>
    8bb4:	b130      	cbz	r0, 8bc4 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    8bb6:	7a9a      	ldrb	r2, [r3, #10]
    8bb8:	3a04      	subs	r2, #4
    8bba:	2a01      	cmp	r2, #1
    8bbc:	d802      	bhi.n	8bc4 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    8bbe:	4618      	mov	r0, r3
    8bc0:	f7ff ffc8 	bl	8b54 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    8bc4:	7aa9      	ldrb	r1, [r5, #10]
    8bc6:	2904      	cmp	r1, #4
    8bc8:	d15b      	bne.n	8c82 <send_frag+0xee>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    8bca:	f107 0008 	add.w	r0, r7, #8
    8bce:	f019 fd23 	bl	22618 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8bd2:	89bb      	ldrh	r3, [r7, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8bd4:	882a      	ldrh	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8bd6:	4e3b      	ldr	r6, [pc, #236]	; (8cc4 <send_frag+0x130>)
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8bd8:	3b04      	subs	r3, #4
    8bda:	8043      	strh	r3, [r0, #2]
    8bdc:	6871      	ldr	r1, [r6, #4]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8bde:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    8be2:	2302      	movs	r3, #2
    8be4:	6834      	ldr	r4, [r6, #0]
    8be6:	8002      	strh	r2, [r0, #0]

	cb = conn_tx(buf)->cb;
    8be8:	697a      	ldr	r2, [r7, #20]
    8bea:	753b      	strb	r3, [r7, #20]
    8bec:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    8bee:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8bf0:	428c      	cmp	r4, r1
	list->tail = node;
    8bf2:	bf08      	it	eq
    8bf4:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    8bf6:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    8bf8:	f04f 0320 	mov.w	r3, #32
    8bfc:	f3ef 8211 	mrs	r2, BASEPRI
    8c00:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    8c04:	2300      	movs	r3, #0
    8c06:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    8c08:	69ab      	ldr	r3, [r5, #24]
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	d147      	bne.n	8c9e <send_frag+0x10a>
	list->head = node;
    8c0e:	e9c5 4405 	strd	r4, r4, [r5, #20]
	__asm__ volatile(
    8c12:	f382 8811 	msr	BASEPRI, r2
    8c16:	f3bf 8f6f 	isb	sy
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    8c1a:	4638      	mov	r0, r7
    8c1c:	f016 ff1d 	bl	1fa5a <bt_send>
	if (err) {
    8c20:	4601      	mov	r1, r0
    8c22:	2800      	cmp	r0, #0
    8c24:	d047      	beq.n	8cb6 <send_frag+0x122>
		BT_ERR("Unable to send to driver (err %d)", err);
    8c26:	2301      	movs	r3, #1
    8c28:	f04f 0200 	mov.w	r2, #0
    8c2c:	f363 0207 	bfi	r2, r3, #0, #8
    8c30:	4825      	ldr	r0, [pc, #148]	; (8cc8 <send_frag+0x134>)
    8c32:	4b26      	ldr	r3, [pc, #152]	; (8ccc <send_frag+0x138>)
    8c34:	1a1b      	subs	r3, r3, r0
    8c36:	08db      	lsrs	r3, r3, #3
    8c38:	f363 128f 	bfi	r2, r3, #6, #10
    8c3c:	4824      	ldr	r0, [pc, #144]	; (8cd0 <send_frag+0x13c>)
    8c3e:	f015 fc0d 	bl	1e45c <log_1>
	__asm__ volatile(
    8c42:	f04f 0320 	mov.w	r3, #32
    8c46:	f3ef 8011 	mrs	r0, BASEPRI
    8c4a:	f383 8811 	msr	BASEPRI, r3
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8c4e:	696b      	ldr	r3, [r5, #20]
    8c50:	2200      	movs	r2, #0
    8c52:	b153      	cbz	r3, 8c6a <send_frag+0xd6>
    8c54:	429c      	cmp	r4, r3
    8c56:	6819      	ldr	r1, [r3, #0]
    8c58:	d12a      	bne.n	8cb0 <send_frag+0x11c>
Z_GENLIST_REMOVE(slist, snode)
    8c5a:	bb1a      	cbnz	r2, 8ca4 <send_frag+0x110>
    8c5c:	69aa      	ldr	r2, [r5, #24]
	list->head = node;
    8c5e:	6169      	str	r1, [r5, #20]
Z_GENLIST_REMOVE(slist, snode)
    8c60:	4294      	cmp	r4, r2
    8c62:	d100      	bne.n	8c66 <send_frag+0xd2>
	list->tail = node;
    8c64:	61a9      	str	r1, [r5, #24]
	parent->next = child;
    8c66:	2200      	movs	r2, #0
    8c68:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    8c6a:	f380 8811 	msr	BASEPRI, r0
    8c6e:	f3bf 8f6f 	isb	sy
	tx->cb = NULL;
    8c72:	2300      	movs	r3, #0
    8c74:	6063      	str	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    8c76:	6833      	ldr	r3, [r6, #0]
	parent->next = child;
    8c78:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    8c7a:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    8c7c:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    8c7e:	b903      	cbnz	r3, 8c82 <send_frag+0xee>
	list->tail = node;
    8c80:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8c82:	480e      	ldr	r0, [pc, #56]	; (8cbc <send_frag+0x128>)
    8c84:	f013 faf0 	bl	1c268 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    8c88:	f1b8 0f00 	cmp.w	r8, #0
    8c8c:	d004      	beq.n	8c98 <send_frag+0x104>
		net_buf_unref(buf);
    8c8e:	4638      	mov	r0, r7
    8c90:	f011 ffd0 	bl	1ac34 <net_buf_unref>
	}
	return false;
    8c94:	f04f 0800 	mov.w	r8, #0
}
    8c98:	4640      	mov	r0, r8
    8c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    8c9e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8ca0:	61ac      	str	r4, [r5, #24]
    8ca2:	e7b6      	b.n	8c12 <send_frag+0x7e>
	parent->next = child;
    8ca4:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    8ca6:	69a9      	ldr	r1, [r5, #24]
    8ca8:	428c      	cmp	r4, r1
	list->tail = node;
    8caa:	bf08      	it	eq
    8cac:	61aa      	streq	r2, [r5, #24]
    8cae:	e7da      	b.n	8c66 <send_frag+0xd2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8cb0:	461a      	mov	r2, r3
    8cb2:	460b      	mov	r3, r1
    8cb4:	e7cd      	b.n	8c52 <send_frag+0xbe>
	return true;
    8cb6:	f04f 0801 	mov.w	r8, #1
    8cba:	e7ed      	b.n	8c98 <send_frag+0x104>
    8cbc:	20007184 	.word	0x20007184
    8cc0:	200005f8 	.word	0x200005f8
    8cc4:	20000690 	.word	0x20000690
    8cc8:	000233ec 	.word	0x000233ec
    8ccc:	000233f4 	.word	0x000233f4
    8cd0:	00025117 	.word	0x00025117

00008cd4 <bt_conn_prepare_events>:
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    8cd4:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    8cd6:	4b1f      	ldr	r3, [pc, #124]	; (8d54 <bt_conn_prepare_events+0x80>)
    8cd8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8cda:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    8cdc:	609a      	str	r2, [r3, #8]
{
    8cde:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8ce0:	f013 fddc 	bl	1c89c <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    8ce4:	4b1c      	ldr	r3, [pc, #112]	; (8d58 <bt_conn_prepare_events+0x84>)
    8ce6:	f103 0044 	add.w	r0, r3, #68	; 0x44
    8cea:	f016 fec9 	bl	1fa80 <atomic_get>
    8cee:	4619      	mov	r1, r3
    8cf0:	b908      	cbnz	r0, 8cf6 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8cf2:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    8cf4:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    8cf6:	7a9a      	ldrb	r2, [r3, #10]
    8cf8:	b99a      	cbnz	r2, 8d22 <bt_conn_prepare_events+0x4e>
    8cfa:	f3bf 8f5b 	dmb	ish
    8cfe:	1d1a      	adds	r2, r3, #4
    8d00:	e852 0f00 	ldrex	r0, [r2]
    8d04:	f020 0540 	bic.w	r5, r0, #64	; 0x40
    8d08:	e842 5c00 	strex	ip, r5, [r2]
    8d0c:	f1bc 0f00 	cmp.w	ip, #0
    8d10:	d1f6      	bne.n	8d00 <bt_conn_prepare_events+0x2c>
    8d12:	f3bf 8f5b 	dmb	ish
    8d16:	0642      	lsls	r2, r0, #25
    8d18:	d503      	bpl.n	8d22 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    8d1a:	4618      	mov	r0, r3
    8d1c:	f016 fedb 	bl	1fad6 <conn_cleanup>
    8d20:	e7e7      	b.n	8cf2 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    8d22:	7a8d      	ldrb	r5, [r1, #10]
    8d24:	2d04      	cmp	r5, #4
    8d26:	d1e4      	bne.n	8cf2 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    8d28:	4b0c      	ldr	r3, [pc, #48]	; (8d5c <bt_conn_prepare_events+0x88>)
    8d2a:	2200      	movs	r2, #0
    8d2c:	4629      	mov	r1, r5
    8d2e:	f104 0014 	add.w	r0, r4, #20
    8d32:	f013 fdb3 	bl	1c89c <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    8d36:	2301      	movs	r3, #1
    8d38:	f884 3020 	strb.w	r3, [r4, #32]
		k_poll_event_init(&events[ev_count],
    8d3c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8d40:	4b07      	ldr	r3, [pc, #28]	; (8d60 <bt_conn_prepare_events+0x8c>)
    8d42:	2200      	movs	r2, #0
    8d44:	4629      	mov	r1, r5
    8d46:	f013 fda9 	bl	1c89c <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    8d4a:	2302      	movs	r3, #2
    8d4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    8d50:	2003      	movs	r0, #3
	return ev_count;
    8d52:	e7cf      	b.n	8cf4 <bt_conn_prepare_events+0x20>
    8d54:	20007728 	.word	0x20007728
    8d58:	200005f8 	.word	0x200005f8
    8d5c:	20000614 	.word	0x20000614
    8d60:	20000624 	.word	0x20000624

00008d64 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    8d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    8d66:	4c15      	ldr	r4, [pc, #84]	; (8dbc <bt_conn_add_le+0x58>)
    8d68:	f104 0644 	add.w	r6, r4, #68	; 0x44
{
    8d6c:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    8d6e:	4630      	mov	r0, r6
    8d70:	f016 fe86 	bl	1fa80 <atomic_get>
    8d74:	4605      	mov	r5, r0
    8d76:	b108      	cbz	r0, 8d7c <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    8d78:	2000      	movs	r0, #0
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);

	return conn;
}
    8d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)memset(conn, 0, sizeof(*conn));
    8d7c:	4601      	mov	r1, r0
    8d7e:	2298      	movs	r2, #152	; 0x98
    8d80:	4620      	mov	r0, r4
    8d82:	f016 fc6b 	bl	1f65c <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8d86:	f3bf 8f5b 	dmb	ish
    8d8a:	2301      	movs	r3, #1
    8d8c:	e856 2f00 	ldrex	r2, [r6]
    8d90:	e846 3100 	strex	r1, r3, [r6]
    8d94:	2900      	cmp	r1, #0
    8d96:	d1f9      	bne.n	8d8c <bt_conn_add_le+0x28>
    8d98:	f3bf 8f5b 	dmb	ish
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8d9c:	2207      	movs	r2, #7
    8d9e:	4639      	mov	r1, r7
    8da0:	f104 0048 	add.w	r0, r4, #72	; 0x48
    8da4:	f016 fc30 	bl	1f608 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8da8:	4b05      	ldr	r3, [pc, #20]	; (8dc0 <bt_conn_add_le+0x5c>)
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    8daa:	4906      	ldr	r1, [pc, #24]	; (8dc4 <bt_conn_add_le+0x60>)
	conn->type = BT_CONN_TYPE_LE;
    8dac:	70a5      	strb	r5, [r4, #2]
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    8dae:	f104 0078 	add.w	r0, r4, #120	; 0x78
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8db2:	6623      	str	r3, [r4, #96]	; 0x60
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    8db4:	f01a f8e9 	bl	22f8a <k_delayed_work_init>
			conn = &conns[i];
    8db8:	4620      	mov	r0, r4
	return conn;
    8dba:	e7de      	b.n	8d7a <bt_conn_add_le+0x16>
    8dbc:	200005f8 	.word	0x200005f8
    8dc0:	00280018 	.word	0x00280018
    8dc4:	0000904d 	.word	0x0000904d

00008dc8 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    8dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    8dca:	7a85      	ldrb	r5, [r0, #10]
    8dcc:	428d      	cmp	r5, r1
{
    8dce:	4604      	mov	r4, r0
    8dd0:	460e      	mov	r6, r1
	if (conn->state == state) {
    8dd2:	d10f      	bne.n	8df4 <bt_conn_set_state+0x2c>
		BT_WARN("no transition");
    8dd4:	2302      	movs	r3, #2
    8dd6:	f04f 0100 	mov.w	r1, #0
    8dda:	f363 0107 	bfi	r1, r3, #0, #8
    8dde:	4a52      	ldr	r2, [pc, #328]	; (8f28 <bt_conn_set_state+0x160>)
    8de0:	4b52      	ldr	r3, [pc, #328]	; (8f2c <bt_conn_set_state+0x164>)
    8de2:	4853      	ldr	r0, [pc, #332]	; (8f30 <bt_conn_set_state+0x168>)
    8de4:	1a9b      	subs	r3, r3, r2
    8de6:	08db      	lsrs	r3, r3, #3
    8de8:	f363 118f 	bfi	r1, r3, #6, #10
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    8dec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("no transition");
    8df0:	f015 bb27 	b.w	1e442 <log_0>
	conn->state = state;
    8df4:	72a1      	strb	r1, [r4, #10]
	switch (old_state) {
    8df6:	b915      	cbnz	r5, 8dfe <bt_conn_set_state+0x36>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    8df8:	3044      	adds	r0, #68	; 0x44
    8dfa:	f016 fe5f 	bl	1fabc <atomic_inc>
	switch (conn->state) {
    8dfe:	7aa3      	ldrb	r3, [r4, #10]
    8e00:	2b05      	cmp	r3, #5
    8e02:	d87f      	bhi.n	8f04 <bt_conn_set_state+0x13c>
    8e04:	e8df f003 	tbb	[pc, r3]
    8e08:	7d7d7d1d 	.word	0x7d7d7d1d
    8e0c:	7d03      	.short	0x7d03
		if (conn->type == BT_CONN_TYPE_SCO) {
    8e0e:	78a3      	ldrb	r3, [r4, #2]
    8e10:	2b02      	cmp	r3, #2
    8e12:	d076      	beq.n	8f02 <bt_conn_set_state+0x13a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    8e14:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8e18:	f019 fe9a 	bl	22b50 <z_impl_k_queue_init>
    8e1c:	f104 001c 	add.w	r0, r4, #28
    8e20:	f019 fe96 	bl	22b50 <z_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    8e24:	2100      	movs	r1, #0
    8e26:	4843      	ldr	r0, [pc, #268]	; (8f34 <bt_conn_set_state+0x16c>)
    8e28:	f013 fde0 	bl	1c9ec <z_impl_k_poll_signal_raise>
	list->head = NULL;
    8e2c:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    8e2e:	4620      	mov	r0, r4
	list->tail = NULL;
    8e30:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
    8e34:	f000 fa84 	bl	9340 <bt_l2cap_connected>
		notify_connected(conn);
    8e38:	4620      	mov	r0, r4
}
    8e3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    8e3e:	f7ff bd3f 	b.w	88c0 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8e42:	78a3      	ldrb	r3, [r4, #2]
    8e44:	2b02      	cmp	r3, #2
    8e46:	d105      	bne.n	8e54 <bt_conn_set_state+0x8c>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    8e48:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    8e4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    8e50:	f016 be27 	b.w	1faa2 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    8e54:	1f2b      	subs	r3, r5, #4
    8e56:	2b01      	cmp	r3, #1
    8e58:	d845      	bhi.n	8ee6 <bt_conn_set_state+0x11e>
			bt_l2cap_disconnected(conn);
    8e5a:	4620      	mov	r0, r4
    8e5c:	f016 ff0b 	bl	1fc76 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    8e60:	4b35      	ldr	r3, [pc, #212]	; (8f38 <bt_conn_set_state+0x170>)
    8e62:	681d      	ldr	r5, [r3, #0]
    8e64:	b9fd      	cbnz	r5, 8ea6 <bt_conn_set_state+0xde>
Z_GENLIST_PREPEND(slist, snode)
    8e66:	4e35      	ldr	r6, [pc, #212]	; (8f3c <bt_conn_set_state+0x174>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8e68:	4f35      	ldr	r7, [pc, #212]	; (8f40 <bt_conn_set_state+0x178>)
	__asm__ volatile(
    8e6a:	f04f 0320 	mov.w	r3, #32
    8e6e:	f3ef 8111 	mrs	r1, BASEPRI
    8e72:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(slist)
    8e76:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    8e78:	b12b      	cbz	r3, 8e86 <bt_conn_set_state+0xbe>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8e7a:	69a0      	ldr	r0, [r4, #24]
    8e7c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    8e7e:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8e80:	4283      	cmp	r3, r0
	list->tail = node;
    8e82:	bf08      	it	eq
    8e84:	61a2      	streq	r2, [r4, #24]
	__asm__ volatile(
    8e86:	f381 8811 	msr	BASEPRI, r1
    8e8a:	f3bf 8f6f 	isb	sy
		if (!node) {
    8e8e:	b18b      	cbz	r3, 8eb4 <bt_conn_set_state+0xec>
Z_GENLIST_PREPEND(slist, snode)
    8e90:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    8e92:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    8e94:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    8e96:	605d      	str	r5, [r3, #4]
	list->head = node;
    8e98:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    8e9a:	b902      	cbnz	r2, 8e9e <bt_conn_set_state+0xd6>
	list->tail = node;
    8e9c:	6073      	str	r3, [r6, #4]
    8e9e:	4638      	mov	r0, r7
    8ea0:	f013 f9e2 	bl	1c268 <z_impl_k_sem_give>
    8ea4:	e7e1      	b.n	8e6a <bt_conn_set_state+0xa2>
		if (cb->disconnected) {
    8ea6:	686b      	ldr	r3, [r5, #4]
    8ea8:	b113      	cbz	r3, 8eb0 <bt_conn_set_state+0xe8>
			cb->disconnected(conn, conn->err);
    8eaa:	7a61      	ldrb	r1, [r4, #9]
    8eac:	4620      	mov	r0, r4
    8eae:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8eb0:	692d      	ldr	r5, [r5, #16]
    8eb2:	e7d7      	b.n	8e64 <bt_conn_set_state+0x9c>
			if (conn->type == BT_CONN_TYPE_LE) {
    8eb4:	78a3      	ldrb	r3, [r4, #2]
    8eb6:	b91b      	cbnz	r3, 8ec0 <bt_conn_set_state+0xf8>
				k_delayed_work_cancel(&conn->le.update_work);
    8eb8:	f104 0078 	add.w	r0, r4, #120	; 0x78
    8ebc:	f01a f86d 	bl	22f9a <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8ec0:	f3bf 8f5b 	dmb	ish
    8ec4:	3404      	adds	r4, #4
    8ec6:	e854 3f00 	ldrex	r3, [r4]
    8eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8ece:	e844 3200 	strex	r2, r3, [r4]
    8ed2:	2a00      	cmp	r2, #0
    8ed4:	d1f7      	bne.n	8ec6 <bt_conn_set_state+0xfe>
    8ed6:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    8eda:	2100      	movs	r1, #0
    8edc:	4815      	ldr	r0, [pc, #84]	; (8f34 <bt_conn_set_state+0x16c>)
}
    8ede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8ee2:	f013 bd83 	b.w	1c9ec <z_impl_k_poll_signal_raise>
		} else if (old_state == BT_CONN_CONNECT) {
    8ee6:	2d03      	cmp	r5, #3
    8ee8:	d103      	bne.n	8ef2 <bt_conn_set_state+0x12a>
			notify_connected(conn);
    8eea:	4620      	mov	r0, r4
    8eec:	f7ff fce8 	bl	88c0 <notify_connected>
    8ef0:	e7aa      	b.n	8e48 <bt_conn_set_state+0x80>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    8ef2:	2d01      	cmp	r5, #1
    8ef4:	d103      	bne.n	8efe <bt_conn_set_state+0x136>
			if (conn->err) {
    8ef6:	7a63      	ldrb	r3, [r4, #9]
    8ef8:	2b00      	cmp	r3, #0
    8efa:	d0a5      	beq.n	8e48 <bt_conn_set_state+0x80>
    8efc:	e7f5      	b.n	8eea <bt_conn_set_state+0x122>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    8efe:	2d02      	cmp	r5, #2
    8f00:	d0f9      	beq.n	8ef6 <bt_conn_set_state+0x12e>
}
    8f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_WARN("no valid (%u) state was set", state);
    8f04:	2302      	movs	r3, #2
    8f06:	f04f 0200 	mov.w	r2, #0
    8f0a:	f363 0207 	bfi	r2, r3, #0, #8
    8f0e:	4906      	ldr	r1, [pc, #24]	; (8f28 <bt_conn_set_state+0x160>)
    8f10:	4b06      	ldr	r3, [pc, #24]	; (8f2c <bt_conn_set_state+0x164>)
    8f12:	480c      	ldr	r0, [pc, #48]	; (8f44 <bt_conn_set_state+0x17c>)
    8f14:	1a5b      	subs	r3, r3, r1
    8f16:	08db      	lsrs	r3, r3, #3
    8f18:	f363 128f 	bfi	r2, r3, #6, #10
    8f1c:	4631      	mov	r1, r6
}
    8f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("no valid (%u) state was set", state);
    8f22:	f015 ba9b 	b.w	1e45c <log_1>
    8f26:	bf00      	nop
    8f28:	000233ec 	.word	0x000233ec
    8f2c:	000233f4 	.word	0x000233f4
    8f30:	00025378 	.word	0x00025378
    8f34:	20007728 	.word	0x20007728
    8f38:	200005d4 	.word	0x200005d4
    8f3c:	20000690 	.word	0x20000690
    8f40:	20007184 	.word	0x20007184
    8f44:	00025386 	.word	0x00025386

00008f48 <bt_conn_lookup_handle>:
{
    8f48:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    8f4a:	4c0b      	ldr	r4, [pc, #44]	; (8f78 <bt_conn_lookup_handle+0x30>)
{
    8f4c:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    8f4e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8f52:	f016 fd95 	bl	1fa80 <atomic_get>
    8f56:	b158      	cbz	r0, 8f70 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    8f58:	7aa3      	ldrb	r3, [r4, #10]
    8f5a:	3b04      	subs	r3, #4
    8f5c:	2b01      	cmp	r3, #1
    8f5e:	d808      	bhi.n	8f72 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    8f60:	8823      	ldrh	r3, [r4, #0]
    8f62:	4293      	cmp	r3, r2
    8f64:	d105      	bne.n	8f72 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    8f66:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8f6a:	f016 fda7 	bl	1fabc <atomic_inc>
			return bt_conn_ref(&conns[i]);
    8f6e:	4620      	mov	r0, r4
}
    8f70:	bd10      	pop	{r4, pc}
	return NULL;
    8f72:	2000      	movs	r0, #0
    8f74:	e7fc      	b.n	8f70 <bt_conn_lookup_handle+0x28>
    8f76:	bf00      	nop
    8f78:	200005f8 	.word	0x200005f8

00008f7c <bt_conn_lookup_addr_le>:
{
    8f7c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    8f7e:	4c0d      	ldr	r4, [pc, #52]	; (8fb4 <bt_conn_lookup_addr_le+0x38>)
{
    8f80:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    8f82:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8f86:	f016 fd7b 	bl	1fa80 <atomic_get>
    8f8a:	b908      	cbnz	r0, 8f90 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    8f8c:	2000      	movs	r0, #0
}
    8f8e:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    8f90:	78a2      	ldrb	r2, [r4, #2]
    8f92:	2a00      	cmp	r2, #0
    8f94:	d1fa      	bne.n	8f8c <bt_conn_lookup_addr_le+0x10>
		if (conns[i].id == id &&
    8f96:	7a22      	ldrb	r2, [r4, #8]
    8f98:	429a      	cmp	r2, r3
    8f9a:	d1f7      	bne.n	8f8c <bt_conn_lookup_addr_le+0x10>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    8f9c:	4620      	mov	r0, r4
    8f9e:	f016 fdb2 	bl	1fb06 <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    8fa2:	2800      	cmp	r0, #0
    8fa4:	d1f2      	bne.n	8f8c <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    8fa6:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8faa:	f016 fd87 	bl	1fabc <atomic_inc>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    8fae:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    8fb0:	e7ed      	b.n	8f8e <bt_conn_lookup_addr_le+0x12>
    8fb2:	bf00      	nop
    8fb4:	200005f8 	.word	0x200005f8

00008fb8 <bt_conn_lookup_state_le>:
{
    8fb8:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    8fba:	4c0e      	ldr	r4, [pc, #56]	; (8ff4 <bt_conn_lookup_state_le+0x3c>)
{
    8fbc:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    8fbe:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    8fc2:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    8fc4:	f016 fd5c 	bl	1fa80 <atomic_get>
    8fc8:	b908      	cbnz	r0, 8fce <bt_conn_lookup_state_le+0x16>
	return NULL;
    8fca:	2000      	movs	r0, #0
}
    8fcc:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    8fce:	78a2      	ldrb	r2, [r4, #2]
    8fd0:	2a00      	cmp	r2, #0
    8fd2:	d1fa      	bne.n	8fca <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    8fd4:	b93b      	cbnz	r3, 8fe6 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    8fd6:	7aa3      	ldrb	r3, [r4, #10]
    8fd8:	42ab      	cmp	r3, r5
    8fda:	d1f6      	bne.n	8fca <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    8fdc:	4806      	ldr	r0, [pc, #24]	; (8ff8 <bt_conn_lookup_state_le+0x40>)
    8fde:	f016 fd6d 	bl	1fabc <atomic_inc>
			return bt_conn_ref(&conns[i]);
    8fe2:	4804      	ldr	r0, [pc, #16]	; (8ff4 <bt_conn_lookup_state_le+0x3c>)
    8fe4:	e7f2      	b.n	8fcc <bt_conn_lookup_state_le+0x14>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    8fe6:	4619      	mov	r1, r3
    8fe8:	4620      	mov	r0, r4
    8fea:	f016 fd8c 	bl	1fb06 <bt_conn_addr_le_cmp>
    8fee:	2800      	cmp	r0, #0
    8ff0:	d0f1      	beq.n	8fd6 <bt_conn_lookup_state_le+0x1e>
    8ff2:	e7ea      	b.n	8fca <bt_conn_lookup_state_le+0x12>
    8ff4:	200005f8 	.word	0x200005f8
    8ff8:	2000063c 	.word	0x2000063c

00008ffc <send_conn_le_param_update>:
{
    8ffc:	b538      	push	{r3, r4, r5, lr}
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8ffe:	4b12      	ldr	r3, [pc, #72]	; (9048 <send_conn_le_param_update+0x4c>)
    9000:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
{
    9004:	460d      	mov	r5, r1
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    9006:	0799      	lsls	r1, r3, #30
{
    9008:	4604      	mov	r4, r0
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    900a:	d407      	bmi.n	901c <send_conn_le_param_update+0x20>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    900c:	78e3      	ldrb	r3, [r4, #3]
    900e:	b173      	cbz	r3, 902e <send_conn_le_param_update+0x32>
	return bt_l2cap_update_conn_param(conn, param);
    9010:	4629      	mov	r1, r5
    9012:	4620      	mov	r0, r4
}
    9014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    9018:	f000 ba9c 	b.w	9554 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    901c:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    9020:	079a      	lsls	r2, r3, #30
    9022:	d5f3      	bpl.n	900c <send_conn_le_param_update+0x10>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9024:	3004      	adds	r0, #4
    9026:	f016 fd2b 	bl	1fa80 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    902a:	0543      	lsls	r3, r0, #21
    902c:	d4ee      	bmi.n	900c <send_conn_le_param_update+0x10>
		rc = bt_conn_le_conn_update(conn, param);
    902e:	4629      	mov	r1, r5
    9030:	4620      	mov	r0, r4
    9032:	f016 fdc6 	bl	1fbc2 <bt_conn_le_conn_update>
		if (rc == 0) {
    9036:	b928      	cbnz	r0, 9044 <send_conn_le_param_update+0x48>
			conn->le.pending_latency = param->latency;
    9038:	88ab      	ldrh	r3, [r5, #4]
    903a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
			conn->le.pending_timeout = param->timeout;
    903e:	88eb      	ldrh	r3, [r5, #6]
    9040:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
}
    9044:	bd38      	pop	{r3, r4, r5, pc}
    9046:	bf00      	nop
    9048:	200070f8 	.word	0x200070f8

0000904c <conn_le_update_timeout>:
{
    904c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    904e:	f1a0 0278 	sub.w	r2, r0, #120	; 0x78
	if (atomic_test_and_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET)) {
    9052:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9056:	f3bf 8f5b 	dmb	ish
    905a:	e854 3f00 	ldrex	r3, [r4]
    905e:	f423 7100 	bic.w	r1, r3, #512	; 0x200
    9062:	e844 1c00 	strex	ip, r1, [r4]
    9066:	f1bc 0f00 	cmp.w	ip, #0
    906a:	d1f6      	bne.n	905a <conn_le_update_timeout+0xe>
    906c:	f3bf 8f5b 	dmb	ish
    9070:	059b      	lsls	r3, r3, #22
    9072:	d517      	bpl.n	90a4 <conn_le_update_timeout+0x58>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    9074:	f850 3c18 	ldr.w	r3, [r0, #-24]
    9078:	9300      	str	r3, [sp, #0]
    907a:	f850 3c10 	ldr.w	r3, [r0, #-16]
    907e:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    9080:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    9082:	4610      	mov	r0, r2
    9084:	f7ff ffba 	bl	8ffc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9088:	f3bf 8f5b 	dmb	ish
    908c:	e854 3f00 	ldrex	r3, [r4]
    9090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9094:	e844 3200 	strex	r2, r3, [r4]
    9098:	2a00      	cmp	r2, #0
    909a:	d1f7      	bne.n	908c <conn_le_update_timeout+0x40>
    909c:	f3bf 8f5b 	dmb	ish
}
    90a0:	b004      	add	sp, #16
    90a2:	bd10      	pop	{r4, pc}
		param = BT_LE_CONN_PARAM(CONFIG_BT_PERIPHERAL_PREF_MIN_INT,
    90a4:	4903      	ldr	r1, [pc, #12]	; (90b4 <conn_le_update_timeout+0x68>)
    90a6:	6808      	ldr	r0, [r1, #0]
    90a8:	6849      	ldr	r1, [r1, #4]
    90aa:	ab02      	add	r3, sp, #8
    90ac:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    90ae:	a902      	add	r1, sp, #8
    90b0:	e7e7      	b.n	9082 <conn_le_update_timeout+0x36>
    90b2:	bf00      	nop
    90b4:	000235b8 	.word	0x000235b8

000090b8 <bt_conn_create_pdu>:

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    90b8:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    90ba:	4b08      	ldr	r3, [pc, #32]	; (90dc <bt_conn_create_pdu+0x24>)
{
    90bc:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    90be:	2800      	cmp	r0, #0
    90c0:	bf08      	it	eq
    90c2:	4618      	moveq	r0, r3
    90c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    90c8:	f019 f9db 	bl	22482 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    90cc:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    90ce:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    90d0:	3008      	adds	r0, #8
    90d2:	f019 f9f5 	bl	224c0 <net_buf_simple_reserve>

	return buf;
}
    90d6:	4620      	mov	r0, r4
    90d8:	bd38      	pop	{r3, r4, r5, pc}
    90da:	bf00      	nop
    90dc:	200080fc 	.word	0x200080fc

000090e0 <create_frag.isra.11>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    90e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90e4:	4606      	mov	r6, r0
    90e6:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    90e8:	4816      	ldr	r0, [pc, #88]	; (9144 <create_frag.isra.11+0x64>)
    90ea:	2100      	movs	r1, #0
    90ec:	f7ff ffe4 	bl	90b8 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    90f0:	7833      	ldrb	r3, [r6, #0]
    90f2:	2b04      	cmp	r3, #4
	frag = bt_conn_create_pdu(&frag_pool, 0);
    90f4:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    90f6:	f04f 0600 	mov.w	r6, #0
    90fa:	d005      	beq.n	9108 <create_frag.isra.11+0x28>
		net_buf_unref(frag);
    90fc:	f011 fd9a 	bl	1ac34 <net_buf_unref>
		return NULL;
    9100:	4635      	mov	r5, r6
}
    9102:	4628      	mov	r0, r5
    9104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    9108:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    910a:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    910e:	4e0e      	ldr	r6, [pc, #56]	; (9148 <create_frag.isra.11+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9110:	4638      	mov	r0, r7
    9112:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    9116:	f019 fadd 	bl	226d4 <net_buf_simple_tailroom>
    911a:	4580      	cmp	r8, r0
    911c:	d20c      	bcs.n	9138 <create_frag.isra.11+0x58>
	return bt_dev.le.mtu;
    911e:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    9122:	f854 1f08 	ldr.w	r1, [r4, #8]!
    9126:	4632      	mov	r2, r6
    9128:	4638      	mov	r0, r7
    912a:	f019 fa34 	bl	22596 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    912e:	4631      	mov	r1, r6
    9130:	4620      	mov	r0, r4
    9132:	f019 fa97 	bl	22664 <net_buf_simple_pull>
	return frag;
    9136:	e7e4      	b.n	9102 <create_frag.isra.11+0x22>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9138:	4638      	mov	r0, r7
    913a:	f019 facb 	bl	226d4 <net_buf_simple_tailroom>
    913e:	b286      	uxth	r6, r0
    9140:	e7ef      	b.n	9122 <create_frag.isra.11+0x42>
    9142:	bf00      	nop
    9144:	2000813c 	.word	0x2000813c
    9148:	200070f8 	.word	0x200070f8

0000914c <bt_conn_process_tx>:
{
    914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    914e:	7a83      	ldrb	r3, [r0, #10]
{
    9150:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    9152:	b993      	cbnz	r3, 917a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9154:	f3bf 8f5b 	dmb	ish
    9158:	1d03      	adds	r3, r0, #4
    915a:	e853 2f00 	ldrex	r2, [r3]
    915e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    9162:	e843 1400 	strex	r4, r1, [r3]
    9166:	2c00      	cmp	r4, #0
    9168:	d1f7      	bne.n	915a <bt_conn_process_tx+0xe>
    916a:	f3bf 8f5b 	dmb	ish
    916e:	0653      	lsls	r3, r2, #25
    9170:	d503      	bpl.n	917a <bt_conn_process_tx+0x2e>
}
    9172:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    9176:	f016 bcae 	b.w	1fad6 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    917a:	2100      	movs	r1, #0
    917c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    9180:	f019 f985 	bl	2248e <net_buf_get>
	BT_ASSERT(buf);
    9184:	4604      	mov	r4, r0
    9186:	b998      	cbnz	r0, 91b0 <bt_conn_process_tx+0x64>
    9188:	2301      	movs	r3, #1
    918a:	f04f 0100 	mov.w	r1, #0
    918e:	4a22      	ldr	r2, [pc, #136]	; (9218 <bt_conn_process_tx+0xcc>)
    9190:	4822      	ldr	r0, [pc, #136]	; (921c <bt_conn_process_tx+0xd0>)
    9192:	f363 0107 	bfi	r1, r3, #0, #8
    9196:	4b22      	ldr	r3, [pc, #136]	; (9220 <bt_conn_process_tx+0xd4>)
    9198:	1a9b      	subs	r3, r3, r2
    919a:	08db      	lsrs	r3, r3, #3
    919c:	f363 118f 	bfi	r1, r3, #6, #10
    91a0:	f015 f94f 	bl	1e442 <log_0>
    91a4:	4040      	eors	r0, r0
    91a6:	f380 8811 	msr	BASEPRI, r0
    91aa:	f04f 0004 	mov.w	r0, #4
    91ae:	df02      	svc	2
	return bt_dev.le.mtu;
    91b0:	4e1c      	ldr	r6, [pc, #112]	; (9224 <bt_conn_process_tx+0xd8>)
	if (buf->len <= conn_mtu(conn)) {
    91b2:	8981      	ldrh	r1, [r0, #12]
    91b4:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    91b8:	4291      	cmp	r1, r2
    91ba:	d807      	bhi.n	91cc <bt_conn_process_tx+0x80>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    91bc:	2300      	movs	r3, #0
    91be:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    91c0:	4621      	mov	r1, r4
    91c2:	4628      	mov	r0, r5
    91c4:	f7ff fce6 	bl	8b94 <send_frag>
	if (!send_buf(conn, buf)) {
    91c8:	b140      	cbz	r0, 91dc <bt_conn_process_tx+0x90>
}
    91ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    91cc:	f105 070a 	add.w	r7, r5, #10
    91d0:	4601      	mov	r1, r0
    91d2:	4638      	mov	r0, r7
    91d4:	f7ff ff84 	bl	90e0 <create_frag.isra.11>
	if (!frag) {
    91d8:	4601      	mov	r1, r0
    91da:	b920      	cbnz	r0, 91e6 <bt_conn_process_tx+0x9a>
		net_buf_unref(buf);
    91dc:	4620      	mov	r0, r4
}
    91de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    91e2:	f011 bd27 	b.w	1ac34 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    91e6:	2301      	movs	r3, #1
    91e8:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    91ea:	4628      	mov	r0, r5
    91ec:	f7ff fcd2 	bl	8b94 <send_frag>
    91f0:	2800      	cmp	r0, #0
    91f2:	d0f3      	beq.n	91dc <bt_conn_process_tx+0x90>
	while (buf->len > conn_mtu(conn)) {
    91f4:	89a2      	ldrh	r2, [r4, #12]
    91f6:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    91fa:	429a      	cmp	r2, r3
    91fc:	d802      	bhi.n	9204 <bt_conn_process_tx+0xb8>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    91fe:	2300      	movs	r3, #0
    9200:	2201      	movs	r2, #1
    9202:	e7dd      	b.n	91c0 <bt_conn_process_tx+0x74>
		frag = create_frag(conn, buf);
    9204:	4621      	mov	r1, r4
    9206:	4638      	mov	r0, r7
    9208:	f7ff ff6a 	bl	90e0 <create_frag.isra.11>
		if (!frag) {
    920c:	4601      	mov	r1, r0
    920e:	2800      	cmp	r0, #0
    9210:	d0e4      	beq.n	91dc <bt_conn_process_tx+0x90>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    9212:	2301      	movs	r3, #1
    9214:	461a      	mov	r2, r3
    9216:	e7e8      	b.n	91ea <bt_conn_process_tx+0x9e>
    9218:	000233ec 	.word	0x000233ec
    921c:	000250e7 	.word	0x000250e7
    9220:	000233f4 	.word	0x000233f4
    9224:	200070f8 	.word	0x200070f8

00009228 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    9228:	4b03      	ldr	r3, [pc, #12]	; (9238 <bt_conn_index+0x10>)
    922a:	1ac0      	subs	r0, r0, r3
    922c:	4b03      	ldr	r3, [pc, #12]	; (923c <bt_conn_index+0x14>)
    922e:	10c0      	asrs	r0, r0, #3
    9230:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    9232:	b2c0      	uxtb	r0, r0
    9234:	4770      	bx	lr
    9236:	bf00      	nop
    9238:	200005f8 	.word	0x200005f8
    923c:	286bca1b 	.word	0x286bca1b

00009240 <bt_conn_init>:

int bt_conn_init(void)
{
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    9240:	4a0f      	ldr	r2, [pc, #60]	; (9280 <bt_conn_init+0x40>)
{
    9242:	b538      	push	{r3, r4, r5, lr}
    9244:	6850      	ldr	r0, [r2, #4]
	parent->next = child;
    9246:	4b0f      	ldr	r3, [pc, #60]	; (9284 <bt_conn_init+0x44>)
    9248:	6811      	ldr	r1, [r2, #0]
    924a:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    924c:	b1a0      	cbz	r0, 9278 <bt_conn_init+0x38>
    924e:	2400      	movs	r4, #0
	parent->next = child;
    9250:	490d      	ldr	r1, [pc, #52]	; (9288 <bt_conn_init+0x48>)
    9252:	6119      	str	r1, [r3, #16]
    9254:	f101 0508 	add.w	r5, r1, #8
    9258:	3110      	adds	r1, #16
    925a:	609b      	str	r3, [r3, #8]
    925c:	619d      	str	r5, [r3, #24]
	return list->tail;
    925e:	6011      	str	r1, [r2, #0]
    9260:	b104      	cbz	r4, 9264 <bt_conn_init+0x24>
    9262:	6050      	str	r0, [r2, #4]
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    9264:	f000 ffea 	bl	a23c <bt_att_init>

	err = bt_smp_init();
    9268:	f001 fff0 	bl	b24c <bt_smp_init>
	if (err) {
    926c:	4604      	mov	r4, r0
    926e:	b908      	cbnz	r0, 9274 <bt_conn_init+0x34>
		return err;
	}

	bt_l2cap_init();
    9270:	f000 f9a6 	bl	95c0 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    9274:	4620      	mov	r0, r4
    9276:	bd38      	pop	{r3, r4, r5, pc}
Z_GENLIST_PREPEND(slist, snode)
    9278:	2401      	movs	r4, #1
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    927a:	4618      	mov	r0, r3
    927c:	e7e8      	b.n	9250 <bt_conn_init+0x10>
    927e:	bf00      	nop
    9280:	20000690 	.word	0x20000690
    9284:	200005d8 	.word	0x200005d8
    9288:	200005e0 	.word	0x200005e0

0000928c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    928c:	4a0d      	ldr	r2, [pc, #52]	; (92c4 <l2cap_accept+0x38>)
{
    928e:	b508      	push	{r3, lr}
		if (l2cap->chan.chan.conn) {
    9290:	6813      	ldr	r3, [r2, #0]
    9292:	b923      	cbnz	r3, 929e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    9294:	480c      	ldr	r0, [pc, #48]	; (92c8 <l2cap_accept+0x3c>)
    9296:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    9298:	600a      	str	r2, [r1, #0]

		return 0;
    929a:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    929c:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    929e:	2301      	movs	r3, #1
    92a0:	f04f 0200 	mov.w	r2, #0
    92a4:	f363 0207 	bfi	r2, r3, #0, #8
    92a8:	4908      	ldr	r1, [pc, #32]	; (92cc <l2cap_accept+0x40>)
    92aa:	4b09      	ldr	r3, [pc, #36]	; (92d0 <l2cap_accept+0x44>)
    92ac:	1a5b      	subs	r3, r3, r1
    92ae:	08db      	lsrs	r3, r3, #3
    92b0:	4601      	mov	r1, r0
    92b2:	f363 128f 	bfi	r2, r3, #6, #10
    92b6:	4807      	ldr	r0, [pc, #28]	; (92d4 <l2cap_accept+0x48>)
    92b8:	f015 f8d0 	bl	1e45c <log_1>
	return -ENOMEM;
    92bc:	f06f 000b 	mvn.w	r0, #11
    92c0:	e7ec      	b.n	929c <l2cap_accept+0x10>
    92c2:	bf00      	nop
    92c4:	20000698 	.word	0x20000698
    92c8:	20007744 	.word	0x20007744
    92cc:	000233ec 	.word	0x000233ec
    92d0:	0002346c 	.word	0x0002346c
    92d4:	000253ec 	.word	0x000253ec

000092d8 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    92d8:	2300      	movs	r3, #0
    92da:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    92dc:	4b05      	ldr	r3, [pc, #20]	; (92f4 <bt_l2cap_le_fixed_chan_register+0x1c>)
    92de:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    92e0:	f100 0208 	add.w	r2, r0, #8
    92e4:	b911      	cbnz	r1, 92ec <bt_l2cap_le_fixed_chan_register+0x14>
	list->head = node;
    92e6:	e9c3 2200 	strd	r2, r2, [r3]
    92ea:	4770      	bx	lr
	parent->next = child;
    92ec:	600a      	str	r2, [r1, #0]
	list->tail = node;
    92ee:	605a      	str	r2, [r3, #4]
}
    92f0:	4770      	bx	lr
    92f2:	bf00      	nop
    92f4:	20000724 	.word	0x20000724

000092f8 <l2cap_rtx_timeout>:
{
    92f8:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    92fa:	f04f 0200 	mov.w	r2, #0
    92fe:	2301      	movs	r3, #1
    9300:	f363 0207 	bfi	r2, r3, #0, #8
    9304:	490b      	ldr	r1, [pc, #44]	; (9334 <l2cap_rtx_timeout+0x3c>)
    9306:	4b0c      	ldr	r3, [pc, #48]	; (9338 <l2cap_rtx_timeout+0x40>)
    9308:	1a5b      	subs	r3, r3, r1
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    930a:	f1a0 0410 	sub.w	r4, r0, #16
    930e:	08db      	lsrs	r3, r3, #3
{
    9310:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    9312:	f363 128f 	bfi	r2, r3, #6, #10
    9316:	4621      	mov	r1, r4
    9318:	4808      	ldr	r0, [pc, #32]	; (933c <l2cap_rtx_timeout+0x44>)
    931a:	f015 f89f 	bl	1e45c <log_1>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    931e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    9322:	4621      	mov	r1, r4
    9324:	f016 fc76 	bl	1fc14 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    9328:	4620      	mov	r0, r4
}
    932a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    932e:	f016 bc91 	b.w	1fc54 <bt_l2cap_chan_del>
    9332:	bf00      	nop
    9334:	000233ec 	.word	0x000233ec
    9338:	0002346c 	.word	0x0002346c
    933c:	000254ad 	.word	0x000254ad

00009340 <bt_l2cap_connected>:
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    9340:	4b1a      	ldr	r3, [pc, #104]	; (93ac <bt_l2cap_connected+0x6c>)
{
    9342:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    9346:	681c      	ldr	r4, [r3, #0]
{
    9348:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    934a:	b12c      	cbz	r4, 9358 <bt_l2cap_connected+0x18>
	parent->next = child;
    934c:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    934e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 93b0 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    9352:	3c08      	subs	r4, #8
    9354:	46b9      	mov	r9, r7
    9356:	b914      	cbnz	r4, 935e <bt_l2cap_connected+0x1e>
}
    9358:	b003      	add	sp, #12
    935a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    935e:	6863      	ldr	r3, [r4, #4]
    9360:	a901      	add	r1, sp, #4
    9362:	4630      	mov	r0, r6
    9364:	4798      	blx	r3
    9366:	2800      	cmp	r0, #0
    9368:	db18      	blt.n	939c <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    936a:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    936c:	8823      	ldrh	r3, [r4, #0]
    936e:	862b      	strh	r3, [r5, #48]	; 0x30
		ch->tx.cid = fchan->cid;
    9370:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    9374:	4641      	mov	r1, r8
    9376:	f105 0010 	add.w	r0, r5, #16
    937a:	f019 fe06 	bl	22f8a <k_delayed_work_init>
    937e:	60af      	str	r7, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    9380:	6c32      	ldr	r2, [r6, #64]	; 0x40
	sys_slist_append(&conn->channels, &chan->node);
    9382:	f105 0308 	add.w	r3, r5, #8
    9386:	b972      	cbnz	r2, 93a6 <bt_l2cap_connected+0x66>
	list->head = node;
    9388:	e9c6 330f 	strd	r3, r3, [r6, #60]	; 0x3c
		if (chan->ops->connected) {
    938c:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    938e:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    9390:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    9392:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    9396:	681b      	ldr	r3, [r3, #0]
    9398:	b103      	cbz	r3, 939c <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    939a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    939c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    939e:	2c00      	cmp	r4, #0
    93a0:	d0da      	beq.n	9358 <bt_l2cap_connected+0x18>
    93a2:	3c08      	subs	r4, #8
    93a4:	e7d7      	b.n	9356 <bt_l2cap_connected+0x16>
	parent->next = child;
    93a6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    93a8:	6433      	str	r3, [r6, #64]	; 0x40
    93aa:	e7ef      	b.n	938c <bt_l2cap_connected+0x4c>
    93ac:	20000724 	.word	0x20000724
    93b0:	000092f9 	.word	0x000092f9

000093b4 <l2cap_recv>:
{
    93b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    93b6:	898b      	ldrh	r3, [r1, #12]
    93b8:	2b03      	cmp	r3, #3
{
    93ba:	4605      	mov	r5, r0
    93bc:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    93be:	d80e      	bhi.n	93de <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
    93c0:	2301      	movs	r3, #1
    93c2:	f04f 0100 	mov.w	r1, #0
    93c6:	f363 0107 	bfi	r1, r3, #0, #8
    93ca:	4a3a      	ldr	r2, [pc, #232]	; (94b4 <l2cap_recv+0x100>)
    93cc:	4b3a      	ldr	r3, [pc, #232]	; (94b8 <l2cap_recv+0x104>)
    93ce:	483b      	ldr	r0, [pc, #236]	; (94bc <l2cap_recv+0x108>)
    93d0:	1a9b      	subs	r3, r3, r2
    93d2:	08db      	lsrs	r3, r3, #3
    93d4:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid ident value in L2CAP PDU");
    93d8:	f015 f833 	bl	1e442 <log_0>
		return 0;
    93dc:	e017      	b.n	940e <l2cap_recv+0x5a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    93de:	2104      	movs	r1, #4
    93e0:	f106 0008 	add.w	r0, r6, #8
    93e4:	f019 f946 	bl	22674 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    93e8:	89b1      	ldrh	r1, [r6, #12]
	len = sys_le16_to_cpu(hdr->len);
    93ea:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    93ec:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    93ee:	4604      	mov	r4, r0
	if (buf->len != len) {
    93f0:	d00f      	beq.n	9412 <l2cap_recv+0x5e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    93f2:	2001      	movs	r0, #1
    93f4:	f04f 0300 	mov.w	r3, #0
    93f8:	f360 0307 	bfi	r3, r0, #0, #8
    93fc:	4c2d      	ldr	r4, [pc, #180]	; (94b4 <l2cap_recv+0x100>)
    93fe:	482e      	ldr	r0, [pc, #184]	; (94b8 <l2cap_recv+0x104>)
    9400:	1b00      	subs	r0, r0, r4
    9402:	08c0      	lsrs	r0, r0, #3
    9404:	f360 138f 	bfi	r3, r0, #6, #10
    9408:	482d      	ldr	r0, [pc, #180]	; (94c0 <l2cap_recv+0x10c>)
    940a:	f015 f83b 	bl	1e484 <log_2>
}
    940e:	2000      	movs	r0, #0
    9410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    9412:	7843      	ldrb	r3, [r0, #1]
    9414:	b963      	cbnz	r3, 9430 <l2cap_recv+0x7c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    9416:	2301      	movs	r3, #1
    9418:	f04f 0100 	mov.w	r1, #0
    941c:	f363 0107 	bfi	r1, r3, #0, #8
    9420:	4a24      	ldr	r2, [pc, #144]	; (94b4 <l2cap_recv+0x100>)
    9422:	4b25      	ldr	r3, [pc, #148]	; (94b8 <l2cap_recv+0x104>)
    9424:	4827      	ldr	r0, [pc, #156]	; (94c4 <l2cap_recv+0x110>)
    9426:	1a9b      	subs	r3, r3, r2
    9428:	08db      	lsrs	r3, r3, #3
    942a:	f363 118f 	bfi	r1, r3, #6, #10
    942e:	e7d3      	b.n	93d8 <l2cap_recv+0x24>
	switch (hdr->code) {
    9430:	7801      	ldrb	r1, [r0, #0]
    9432:	2901      	cmp	r1, #1
    9434:	d0eb      	beq.n	940e <l2cap_recv+0x5a>
    9436:	2913      	cmp	r1, #19
    9438:	d10e      	bne.n	9458 <l2cap_recv+0xa4>
	if (buf->len < sizeof(*rsp)) {
    943a:	2a01      	cmp	r2, #1
    943c:	d8e7      	bhi.n	940e <l2cap_recv+0x5a>
		BT_ERR("Too small LE conn param rsp");
    943e:	2301      	movs	r3, #1
    9440:	f04f 0100 	mov.w	r1, #0
    9444:	f363 0107 	bfi	r1, r3, #0, #8
    9448:	4a1a      	ldr	r2, [pc, #104]	; (94b4 <l2cap_recv+0x100>)
    944a:	4b1b      	ldr	r3, [pc, #108]	; (94b8 <l2cap_recv+0x104>)
    944c:	481e      	ldr	r0, [pc, #120]	; (94c8 <l2cap_recv+0x114>)
    944e:	1a9b      	subs	r3, r3, r2
    9450:	08db      	lsrs	r3, r3, #3
    9452:	f363 118f 	bfi	r1, r3, #6, #10
    9456:	e7bf      	b.n	93d8 <l2cap_recv+0x24>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    9458:	2302      	movs	r3, #2
    945a:	f04f 0200 	mov.w	r2, #0
    945e:	f363 0207 	bfi	r2, r3, #0, #8
    9462:	4814      	ldr	r0, [pc, #80]	; (94b4 <l2cap_recv+0x100>)
    9464:	4b14      	ldr	r3, [pc, #80]	; (94b8 <l2cap_recv+0x104>)
    9466:	1a1b      	subs	r3, r3, r0
    9468:	08db      	lsrs	r3, r3, #3
    946a:	f363 128f 	bfi	r2, r3, #6, #10
    946e:	4817      	ldr	r0, [pc, #92]	; (94cc <l2cap_recv+0x118>)
    9470:	f014 fff4 	bl	1e45c <log_1>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    9474:	2104      	movs	r1, #4
    9476:	2000      	movs	r0, #0
		l2cap_send_reject(chan->conn, hdr->ident,
    9478:	682f      	ldr	r7, [r5, #0]
    947a:	7864      	ldrb	r4, [r4, #1]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    947c:	f7ff fe1c 	bl	90b8 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    9480:	f100 0608 	add.w	r6, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    9484:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9486:	2104      	movs	r1, #4
    9488:	4630      	mov	r0, r6
    948a:	f019 f87e 	bl	2258a <net_buf_simple_add>
	hdr->code = code;
    948e:	2301      	movs	r3, #1
	hdr->ident = ident;
    9490:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    9492:	2102      	movs	r1, #2
    9494:	2400      	movs	r4, #0
	hdr->code = code;
    9496:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
    9498:	7081      	strb	r1, [r0, #2]
    949a:	70c4      	strb	r4, [r0, #3]
	rej = net_buf_add(buf, sizeof(*rej));
    949c:	4630      	mov	r0, r6
    949e:	f019 f874 	bl	2258a <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    94a2:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
    94a4:	7004      	strb	r4, [r0, #0]
    94a6:	7044      	strb	r4, [r0, #1]
    94a8:	462a      	mov	r2, r5
    94aa:	2105      	movs	r1, #5
    94ac:	4638      	mov	r0, r7
    94ae:	f016 fbf8 	bl	1fca2 <bt_l2cap_send_cb>
    94b2:	e7ac      	b.n	940e <l2cap_recv+0x5a>
    94b4:	000233ec 	.word	0x000233ec
    94b8:	0002346c 	.word	0x0002346c
    94bc:	00025413 	.word	0x00025413
    94c0:	00025431 	.word	0x00025431
    94c4:	00025452 	.word	0x00025452
    94c8:	00025473 	.word	0x00025473
    94cc:	0002548f 	.word	0x0002548f

000094d0 <bt_l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    94d0:	898b      	ldrh	r3, [r1, #12]
    94d2:	2b03      	cmp	r3, #3
{
    94d4:	b570      	push	{r4, r5, r6, lr}
    94d6:	4606      	mov	r6, r0
    94d8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    94da:	d812      	bhi.n	9502 <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
    94dc:	2301      	movs	r3, #1
    94de:	f04f 0100 	mov.w	r1, #0
    94e2:	f363 0107 	bfi	r1, r3, #0, #8
    94e6:	4a17      	ldr	r2, [pc, #92]	; (9544 <bt_l2cap_recv+0x74>)
    94e8:	4b17      	ldr	r3, [pc, #92]	; (9548 <bt_l2cap_recv+0x78>)
    94ea:	4818      	ldr	r0, [pc, #96]	; (954c <bt_l2cap_recv+0x7c>)
    94ec:	1a9b      	subs	r3, r3, r2
    94ee:	08db      	lsrs	r3, r3, #3
    94f0:	f363 118f 	bfi	r1, r3, #6, #10
    94f4:	f014 ffa5 	bl	1e442 <log_0>
	net_buf_unref(buf);
    94f8:	4620      	mov	r0, r4
}
    94fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    94fe:	f011 bb99 	b.w	1ac34 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9502:	2104      	movs	r1, #4
    9504:	f104 0008 	add.w	r0, r4, #8
    9508:	f019 f8b4 	bl	22674 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    950c:	8845      	ldrh	r5, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    950e:	4630      	mov	r0, r6
    9510:	4629      	mov	r1, r5
    9512:	f016 fbe6 	bl	1fce2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9516:	b978      	cbnz	r0, 9538 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    9518:	2302      	movs	r3, #2
    951a:	f04f 0200 	mov.w	r2, #0
    951e:	f363 0207 	bfi	r2, r3, #0, #8
    9522:	4908      	ldr	r1, [pc, #32]	; (9544 <bt_l2cap_recv+0x74>)
    9524:	4b08      	ldr	r3, [pc, #32]	; (9548 <bt_l2cap_recv+0x78>)
    9526:	480a      	ldr	r0, [pc, #40]	; (9550 <bt_l2cap_recv+0x80>)
    9528:	1a5b      	subs	r3, r3, r1
    952a:	08db      	lsrs	r3, r3, #3
    952c:	f363 128f 	bfi	r2, r3, #6, #10
    9530:	4629      	mov	r1, r5
    9532:	f014 ff93 	bl	1e45c <log_1>
		net_buf_unref(buf);
    9536:	e7df      	b.n	94f8 <bt_l2cap_recv+0x28>
	chan->ops->recv(chan, buf);
    9538:	6843      	ldr	r3, [r0, #4]
    953a:	4621      	mov	r1, r4
    953c:	691b      	ldr	r3, [r3, #16]
    953e:	4798      	blx	r3
    9540:	e7da      	b.n	94f8 <bt_l2cap_recv+0x28>
    9542:	bf00      	nop
    9544:	000233ec 	.word	0x000233ec
    9548:	0002346c 	.word	0x0002346c
    954c:	000253aa 	.word	0x000253aa
    9550:	000253c7 	.word	0x000253c7

00009554 <bt_l2cap_update_conn_param>:
{
    9554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ident++;
    9558:	4b18      	ldr	r3, [pc, #96]	; (95bc <bt_l2cap_update_conn_param+0x68>)
    955a:	781a      	ldrb	r2, [r3, #0]
    955c:	3201      	adds	r2, #1
	if (!ident) {
    955e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    9562:	bf08      	it	eq
    9564:	2201      	moveq	r2, #1
{
    9566:	460c      	mov	r4, r1
		ident++;
    9568:	701a      	strb	r2, [r3, #0]
{
    956a:	4605      	mov	r5, r0
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    956c:	2104      	movs	r1, #4
    956e:	2000      	movs	r0, #0
	return ident;
    9570:	781e      	ldrb	r6, [r3, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    9572:	f7ff fda1 	bl	90b8 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    9576:	f100 0808 	add.w	r8, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    957a:	4607      	mov	r7, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    957c:	2104      	movs	r1, #4
    957e:	4640      	mov	r0, r8
    9580:	f019 f803 	bl	2258a <net_buf_simple_add>
	hdr->code = code;
    9584:	2312      	movs	r3, #18
	hdr->ident = ident;
    9586:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    9588:	2108      	movs	r1, #8
    958a:	2600      	movs	r6, #0
	hdr->code = code;
    958c:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
    958e:	7081      	strb	r1, [r0, #2]
    9590:	70c6      	strb	r6, [r0, #3]
	req = net_buf_add(buf, sizeof(*req));
    9592:	4640      	mov	r0, r8
    9594:	f018 fff9 	bl	2258a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    9598:	8823      	ldrh	r3, [r4, #0]
    959a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    959c:	8863      	ldrh	r3, [r4, #2]
    959e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    95a0:	88a3      	ldrh	r3, [r4, #4]
    95a2:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    95a4:	88e3      	ldrh	r3, [r4, #6]
    95a6:	80c3      	strh	r3, [r0, #6]
    95a8:	463a      	mov	r2, r7
    95aa:	4628      	mov	r0, r5
    95ac:	4633      	mov	r3, r6
    95ae:	2105      	movs	r1, #5
    95b0:	f016 fb77 	bl	1fca2 <bt_l2cap_send_cb>
}
    95b4:	4630      	mov	r0, r6
    95b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95ba:	bf00      	nop
    95bc:	200022da 	.word	0x200022da

000095c0 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    95c0:	4801      	ldr	r0, [pc, #4]	; (95c8 <bt_l2cap_init+0x8>)
    95c2:	f7ff be89 	b.w	92d8 <bt_l2cap_le_fixed_chan_register>
    95c6:	bf00      	nop
    95c8:	20007738 	.word	0x20007738

000095cc <att_op_get_type>:
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    95cc:	4a09      	ldr	r2, [pc, #36]	; (95f4 <att_op_get_type+0x28>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    95ce:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    95d0:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    95d4:	4281      	cmp	r1, r0
    95d6:	d103      	bne.n	95e0 <att_op_get_type+0x14>
			return handlers[i].type;
    95d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    95dc:	7898      	ldrb	r0, [r3, #2]
    95de:	4770      	bx	lr
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    95e0:	3301      	adds	r3, #1
    95e2:	2b0d      	cmp	r3, #13
    95e4:	d1f4      	bne.n	95d0 <att_op_get_type+0x4>
		}
	}

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
    95e6:	f010 0f40 	tst.w	r0, #64	; 0x40
    95ea:	bf0c      	ite	eq
    95ec:	2006      	moveq	r0, #6
    95ee:	2000      	movne	r0, #0
	}

	return ATT_UNKNOWN;
}
    95f0:	4770      	bx	lr
    95f2:	bf00      	nop
    95f4:	000239f0 	.word	0x000239f0

000095f8 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    95f8:	b510      	push	{r4, lr}
    95fa:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    95fc:	30d4      	adds	r0, #212	; 0xd4
    95fe:	f019 faa7 	bl	22b50 <z_impl_k_queue_init>

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9602:	2317      	movs	r3, #23
    9604:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9608:	8663      	strh	r3, [r4, #50]	; 0x32

	k_delayed_work_init(&att->timeout_work, att_timeout);
    960a:	4904      	ldr	r1, [pc, #16]	; (961c <bt_att_connected+0x24>)
    960c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9610:	f019 fcbb 	bl	22f8a <k_delayed_work_init>
	list->head = NULL;
    9614:	2300      	movs	r3, #0
	list->tail = NULL;
    9616:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
	sys_slist_init(&att->reqs);
}
    961a:	bd10      	pop	{r4, pc}
    961c:	00009885 	.word	0x00009885

00009620 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    9620:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    9622:	4d13      	ldr	r5, [pc, #76]	; (9670 <bt_att_accept+0x50>)
    9624:	682c      	ldr	r4, [r5, #0]
{
    9626:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    9628:	b97c      	cbnz	r4, 964a <bt_att_accept+0x2a>
			continue;
		}

		(void)memset(att, 0, sizeof(*att));
    962a:	22e4      	movs	r2, #228	; 0xe4
    962c:	4621      	mov	r1, r4
    962e:	4628      	mov	r0, r5
    9630:	f016 f814 	bl	1f65c <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    9634:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    9636:	4b0f      	ldr	r3, [pc, #60]	; (9674 <bt_att_accept+0x54>)
    9638:	606b      	str	r3, [r5, #4]
    963a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    963e:	4611      	mov	r1, r2
    9640:	f019 fc07 	bl	22e52 <z_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    9644:	6035      	str	r5, [r6, #0]
    9646:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    9648:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    964a:	2301      	movs	r3, #1
    964c:	f04f 0200 	mov.w	r2, #0
    9650:	f363 0207 	bfi	r2, r3, #0, #8
    9654:	4908      	ldr	r1, [pc, #32]	; (9678 <bt_att_accept+0x58>)
    9656:	4b09      	ldr	r3, [pc, #36]	; (967c <bt_att_accept+0x5c>)
    9658:	1a5b      	subs	r3, r3, r1
    965a:	08db      	lsrs	r3, r3, #3
    965c:	4601      	mov	r1, r0
    965e:	f363 128f 	bfi	r2, r3, #6, #10
    9662:	4807      	ldr	r0, [pc, #28]	; (9680 <bt_att_accept+0x60>)
    9664:	f014 fefa 	bl	1e45c <log_1>
	return -ENOMEM;
    9668:	f06f 000b 	mvn.w	r0, #11
    966c:	e7ec      	b.n	9648 <bt_att_accept+0x28>
    966e:	bf00      	nop
    9670:	2000072c 	.word	0x2000072c
    9674:	20007764 	.word	0x20007764
    9678:	000233ec 	.word	0x000233ec
    967c:	000233ec 	.word	0x000233ec
    9680:	00025555 	.word	0x00025555

00009684 <att_req_sent>:
{
    9684:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    9686:	2104      	movs	r1, #4
    9688:	f016 fb20 	bl	1fccc <bt_l2cap_le_lookup_tx_cid>
    968c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    968e:	30bc      	adds	r0, #188	; 0xbc
    9690:	f012 fdea 	bl	1c268 <z_impl_k_sem_give>
	if (att->req) {
    9694:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    9698:	b143      	cbz	r3, 96ac <att_req_sent+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    969a:	f104 019c 	add.w	r1, r4, #156	; 0x9c
    969e:	f247 5230 	movw	r2, #30000	; 0x7530
    96a2:	4803      	ldr	r0, [pc, #12]	; (96b0 <att_req_sent+0x2c>)
}
    96a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    96a8:	f012 bf46 	b.w	1c538 <k_delayed_work_submit_to_queue>
    96ac:	bd10      	pop	{r4, pc}
    96ae:	bf00      	nop
    96b0:	20001c74 	.word	0x20001c74

000096b4 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    96b4:	7a81      	ldrb	r1, [r0, #10]
    96b6:	2904      	cmp	r1, #4
{
    96b8:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    96ba:	d00f      	beq.n	96dc <att_chan_get+0x28>
		BT_WARN("Not connected");
    96bc:	2302      	movs	r3, #2
    96be:	f04f 0100 	mov.w	r1, #0
    96c2:	f363 0107 	bfi	r1, r3, #0, #8
    96c6:	4a1a      	ldr	r2, [pc, #104]	; (9730 <att_chan_get+0x7c>)
    96c8:	4b1a      	ldr	r3, [pc, #104]	; (9734 <att_chan_get+0x80>)
    96ca:	481b      	ldr	r0, [pc, #108]	; (9738 <att_chan_get+0x84>)
    96cc:	1a9b      	subs	r3, r3, r2
    96ce:	08db      	lsrs	r3, r3, #3
    96d0:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("ATT context flagged as disconnected");
    96d4:	f014 feb5 	bl	1e442 <log_0>
		return NULL;
    96d8:	2400      	movs	r4, #0
    96da:	e011      	b.n	9700 <att_chan_get+0x4c>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    96dc:	f016 fb01 	bl	1fce2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    96e0:	4604      	mov	r4, r0
    96e2:	b978      	cbnz	r0, 9704 <att_chan_get+0x50>
		BT_ERR("Unable to find ATT channel");
    96e4:	2301      	movs	r3, #1
    96e6:	f04f 0100 	mov.w	r1, #0
    96ea:	f363 0107 	bfi	r1, r3, #0, #8
    96ee:	4a10      	ldr	r2, [pc, #64]	; (9730 <att_chan_get+0x7c>)
    96f0:	4b10      	ldr	r3, [pc, #64]	; (9734 <att_chan_get+0x80>)
    96f2:	4812      	ldr	r0, [pc, #72]	; (973c <att_chan_get+0x88>)
    96f4:	1a9b      	subs	r3, r3, r2
    96f6:	08db      	lsrs	r3, r3, #3
    96f8:	f363 118f 	bfi	r1, r3, #6, #10
    96fc:	f014 fea1 	bl	1e442 <log_0>
}
    9700:	4620      	mov	r0, r4
    9702:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9704:	f3bf 8f5b 	dmb	ish
    9708:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    970c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    9710:	075b      	lsls	r3, r3, #29
    9712:	d5f5      	bpl.n	9700 <att_chan_get+0x4c>
		BT_WARN("ATT context flagged as disconnected");
    9714:	2302      	movs	r3, #2
    9716:	f04f 0100 	mov.w	r1, #0
    971a:	f363 0107 	bfi	r1, r3, #0, #8
    971e:	4a04      	ldr	r2, [pc, #16]	; (9730 <att_chan_get+0x7c>)
    9720:	4b04      	ldr	r3, [pc, #16]	; (9734 <att_chan_get+0x80>)
    9722:	4807      	ldr	r0, [pc, #28]	; (9740 <att_chan_get+0x8c>)
    9724:	1a9b      	subs	r3, r3, r2
    9726:	08db      	lsrs	r3, r3, #3
    9728:	f363 118f 	bfi	r1, r3, #6, #10
    972c:	e7d2      	b.n	96d4 <att_chan_get+0x20>
    972e:	bf00      	nop
    9730:	000233ec 	.word	0x000233ec
    9734:	000233ec 	.word	0x000233ec
    9738:	000254d8 	.word	0x000254d8
    973c:	000254e6 	.word	0x000254e6
    9740:	00025501 	.word	0x00025501

00009744 <att_send_req>:
{
    9744:	b570      	push	{r4, r5, r6, lr}
    9746:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    9748:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
	att->req = req;
    974c:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
{
    9750:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    9752:	4630      	mov	r0, r6
    9754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9758:	f012 fdb0 	bl	1c2bc <z_impl_k_sem_take>
	if (!att_is_connected(att)) {
    975c:	4628      	mov	r0, r5
    975e:	f016 fc76 	bl	2004e <att_is_connected>
    9762:	b998      	cbnz	r0, 978c <att_send_req+0x48>
		BT_WARN("Disconnected");
    9764:	2302      	movs	r3, #2
    9766:	f04f 0100 	mov.w	r1, #0
    976a:	4a19      	ldr	r2, [pc, #100]	; (97d0 <att_send_req+0x8c>)
    976c:	4819      	ldr	r0, [pc, #100]	; (97d4 <att_send_req+0x90>)
    976e:	f363 0107 	bfi	r1, r3, #0, #8
    9772:	4b19      	ldr	r3, [pc, #100]	; (97d8 <att_send_req+0x94>)
    9774:	1a9b      	subs	r3, r3, r2
    9776:	08db      	lsrs	r3, r3, #3
    9778:	f363 118f 	bfi	r1, r3, #6, #10
    977c:	f014 fe61 	bl	1e442 <log_0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    9780:	4630      	mov	r0, r6
    9782:	f012 fd71 	bl	1c268 <z_impl_k_sem_give>
		return -ENOTCONN;
    9786:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    978a:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    978c:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    978e:	f106 0008 	add.w	r0, r6, #8
    9792:	f018 ff9b 	bl	226cc <net_buf_simple_headroom>
	state->len = buf->len;
    9796:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    9798:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    979a:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    979c:	6920      	ldr	r0, [r4, #16]
    979e:	682d      	ldr	r5, [r5, #0]
    97a0:	f018 feef 	bl	22582 <net_buf_ref>
    97a4:	6923      	ldr	r3, [r4, #16]
	switch (att_op_get_type(buf->data[0])) {
    97a6:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    97a8:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    97aa:	7818      	ldrb	r0, [r3, #0]
    97ac:	f7ff ff0e 	bl	95cc <att_op_get_type>
    97b0:	3801      	subs	r0, #1
    97b2:	b2c0      	uxtb	r0, r0
    97b4:	2804      	cmp	r0, #4
    97b6:	bf96      	itet	ls
    97b8:	4b08      	ldrls	r3, [pc, #32]	; (97dc <att_send_req+0x98>)
    97ba:	4b09      	ldrhi	r3, [pc, #36]	; (97e0 <att_send_req+0x9c>)
    97bc:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    97c0:	4632      	mov	r2, r6
    97c2:	4628      	mov	r0, r5
    97c4:	2104      	movs	r1, #4
    97c6:	f016 fa6c 	bl	1fca2 <bt_l2cap_send_cb>
	return 0;
    97ca:	2000      	movs	r0, #0
    97cc:	e7dd      	b.n	978a <att_send_req+0x46>
    97ce:	bf00      	nop
    97d0:	000233ec 	.word	0x000233ec
    97d4:	0002553c 	.word	0x0002553c
    97d8:	000233ec 	.word	0x000233ec
    97dc:	000239dc 	.word	0x000239dc
    97e0:	00020071 	.word	0x00020071

000097e4 <att_handle_rsp>:
{
    97e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    97e8:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    97ea:	309c      	adds	r0, #156	; 0x9c
{
    97ec:	461e      	mov	r6, r3
    97ee:	460f      	mov	r7, r1
    97f0:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    97f2:	f019 fbd2 	bl	22f9a <k_delayed_work_cancel>
	if (!att->req) {
    97f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    97fa:	bb03      	cbnz	r3, 983e <att_handle_rsp+0x5a>
		BT_WARN("No pending ATT request");
    97fc:	2302      	movs	r3, #2
    97fe:	f04f 0100 	mov.w	r1, #0
    9802:	f363 0107 	bfi	r1, r3, #0, #8
    9806:	4a1c      	ldr	r2, [pc, #112]	; (9878 <att_handle_rsp+0x94>)
    9808:	4b1c      	ldr	r3, [pc, #112]	; (987c <att_handle_rsp+0x98>)
    980a:	481d      	ldr	r0, [pc, #116]	; (9880 <att_handle_rsp+0x9c>)
    980c:	1a9b      	subs	r3, r3, r2
    980e:	08db      	lsrs	r3, r3, #3
    9810:	f363 118f 	bfi	r1, r3, #6, #10
    9814:	f014 fe15 	bl	1e442 <log_0>
Z_GENLIST_IS_EMPTY(slist)
    9818:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
Z_GENLIST_GET(slist, snode)
    981c:	b159      	cbz	r1, 9836 <att_handle_rsp+0x52>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    981e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    9822:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    9824:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9828:	4291      	cmp	r1, r2
	list->tail = node;
    982a:	bf08      	it	eq
    982c:	f8c4 3098 	streq.w	r3, [r4, #152]	; 0x98
	att_send_req(att, ATT_REQ(node));
    9830:	4620      	mov	r0, r4
    9832:	f7ff ff87 	bl	9744 <att_send_req>
}
    9836:	2000      	movs	r0, #0
    9838:	b003      	add	sp, #12
    983a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    983e:	6918      	ldr	r0, [r3, #16]
    9840:	b128      	cbz	r0, 984e <att_handle_rsp+0x6a>
		net_buf_unref(att->req->buf);
    9842:	f011 f9f7 	bl	1ac34 <net_buf_unref>
		att->req->buf = NULL;
    9846:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    984a:	2200      	movs	r2, #0
    984c:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    984e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	func(att->chan.chan.conn, err, pdu, len, att->req);
    9852:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    9854:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    9858:	2500      	movs	r5, #0
    985a:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    985c:	463a      	mov	r2, r7
    985e:	9300      	str	r3, [sp, #0]
    9860:	4631      	mov	r1, r6
    9862:	4643      	mov	r3, r8
    9864:	47c8      	blx	r9
	if (!att->req->func) {
    9866:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    986a:	6843      	ldr	r3, [r0, #4]
    986c:	b90b      	cbnz	r3, 9872 <att_handle_rsp+0x8e>
		att_req_destroy(att->req);
    986e:	f016 fa42 	bl	1fcf6 <att_req_destroy>
	att->req = NULL;
    9872:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    9876:	e7cf      	b.n	9818 <att_handle_rsp+0x34>
    9878:	000233ec 	.word	0x000233ec
    987c:	000233ec 	.word	0x000233ec
    9880:	00025525 	.word	0x00025525

00009884 <att_timeout>:
	BT_ERR("ATT Timeout");
    9884:	2301      	movs	r3, #1
    9886:	f04f 0100 	mov.w	r1, #0
    988a:	4a0c      	ldr	r2, [pc, #48]	; (98bc <att_timeout+0x38>)
    988c:	f363 0107 	bfi	r1, r3, #0, #8
    9890:	4b0b      	ldr	r3, [pc, #44]	; (98c0 <att_timeout+0x3c>)
    9892:	1a9b      	subs	r3, r3, r2
    9894:	08db      	lsrs	r3, r3, #3
{
    9896:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
    9898:	f363 118f 	bfi	r1, r3, #6, #10
{
    989c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    989e:	4809      	ldr	r0, [pc, #36]	; (98c4 <att_timeout+0x40>)
    98a0:	f014 fdcf 	bl	1e442 <log_0>
	att_reset(att);
    98a4:	f1a4 009c 	sub.w	r0, r4, #156	; 0x9c
    98a8:	f016 fc88 	bl	201bc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    98ac:	f854 0c9c 	ldr.w	r0, [r4, #-156]
    98b0:	f001 fc1e 	bl	b0f0 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    98b4:	2300      	movs	r3, #0
    98b6:	f844 3c9c 	str.w	r3, [r4, #-156]
}
    98ba:	bd10      	pop	{r4, pc}
    98bc:	000233ec 	.word	0x000233ec
    98c0:	000233ec 	.word	0x000233ec
    98c4:	00025549 	.word	0x00025549

000098c8 <prep_write_cb>:
{
    98c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    98ca:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    98cc:	680f      	ldr	r7, [r1, #0]
    98ce:	212a      	movs	r1, #42	; 0x2a
{
    98d0:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    98d2:	f016 fb28 	bl	1ff26 <check_perm.isra.6>
    98d6:	4605      	mov	r5, r0
    98d8:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    98da:	2800      	cmp	r0, #0
    98dc:	d12d      	bne.n	993a <prep_write_cb+0x72>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    98de:	7cb3      	ldrb	r3, [r6, #18]
    98e0:	065b      	lsls	r3, r3, #25
    98e2:	d514      	bpl.n	990e <prep_write_cb+0x46>
	write = attr->write(data->conn, attr, data->value, data->len,
    98e4:	2301      	movs	r3, #1
    98e6:	9301      	str	r3, [sp, #4]
    98e8:	89e3      	ldrh	r3, [r4, #14]
    98ea:	9300      	str	r3, [sp, #0]
    98ec:	4638      	mov	r0, r7
    98ee:	7b23      	ldrb	r3, [r4, #12]
    98f0:	68a2      	ldr	r2, [r4, #8]
    98f2:	68b7      	ldr	r7, [r6, #8]
    98f4:	4631      	mov	r1, r6
    98f6:	47b8      	blx	r7
	if (write != 0) {
    98f8:	b148      	cbz	r0, 990e <prep_write_cb+0x46>
	if (err < 0 && err >= -0xff) {
    98fa:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    98fe:	bf26      	itte	cs
    9900:	4240      	negcs	r0, r0
    9902:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    9904:	200e      	movcc	r0, #14
		data->err = err_to_att(write);
    9906:	7420      	strb	r0, [r4, #16]
}
    9908:	4628      	mov	r0, r5
    990a:	b003      	add	sp, #12
    990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    990e:	2100      	movs	r1, #0
    9910:	480b      	ldr	r0, [pc, #44]	; (9940 <prep_write_cb+0x78>)
    9912:	f018 fdb6 	bl	22482 <net_buf_alloc_fixed>
    9916:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    9918:	b910      	cbnz	r0, 9920 <prep_write_cb+0x58>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    991a:	2309      	movs	r3, #9
    991c:	7423      	strb	r3, [r4, #16]
		return BT_GATT_ITER_STOP;
    991e:	e7f3      	b.n	9908 <prep_write_cb+0x40>
	attr_data->handle = attr->handle;
    9920:	8a33      	ldrh	r3, [r6, #16]
    9922:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    9924:	89e3      	ldrh	r3, [r4, #14]
    9926:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    9928:	7b22      	ldrb	r2, [r4, #12]
    992a:	68a1      	ldr	r1, [r4, #8]
    992c:	3008      	adds	r0, #8
    992e:	f018 fe32 	bl	22596 <net_buf_simple_add_mem>
	data->err = 0U;
    9932:	2300      	movs	r3, #0
    9934:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    9936:	2501      	movs	r5, #1
    9938:	e7e6      	b.n	9908 <prep_write_cb+0x40>
		return BT_GATT_ITER_STOP;
    993a:	2500      	movs	r5, #0
    993c:	e7e4      	b.n	9908 <prep_write_cb+0x40>
    993e:	bf00      	nop
    9940:	2000819c 	.word	0x2000819c

00009944 <bt_att_create_pdu>:
{
    9944:	b570      	push	{r4, r5, r6, lr}
    9946:	460e      	mov	r6, r1
    9948:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    994a:	f7ff feb3 	bl	96b4 <att_chan_get>
	if (!att) {
    994e:	4604      	mov	r4, r0
    9950:	b198      	cbz	r0, 997a <bt_att_create_pdu+0x36>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    9952:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    9956:	1c6a      	adds	r2, r5, #1
    9958:	428a      	cmp	r2, r1
    995a:	d910      	bls.n	997e <bt_att_create_pdu+0x3a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    995c:	2002      	movs	r0, #2
    995e:	f04f 0300 	mov.w	r3, #0
    9962:	f360 0307 	bfi	r3, r0, #0, #8
    9966:	4c0b      	ldr	r4, [pc, #44]	; (9994 <bt_att_create_pdu+0x50>)
    9968:	480b      	ldr	r0, [pc, #44]	; (9998 <bt_att_create_pdu+0x54>)
    996a:	1b00      	subs	r0, r0, r4
    996c:	08c0      	lsrs	r0, r0, #3
    996e:	f360 138f 	bfi	r3, r0, #6, #10
    9972:	480a      	ldr	r0, [pc, #40]	; (999c <bt_att_create_pdu+0x58>)
    9974:	f014 fd86 	bl	1e484 <log_2>
		return NULL;
    9978:	2400      	movs	r4, #0
}
    997a:	4620      	mov	r0, r4
    997c:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    997e:	2100      	movs	r1, #0
    9980:	4608      	mov	r0, r1
    9982:	f016 f98b 	bl	1fc9c <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    9986:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    9988:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    998a:	3008      	adds	r0, #8
    998c:	f018 fdfd 	bl	2258a <net_buf_simple_add>
	hdr->code = op;
    9990:	7006      	strb	r6, [r0, #0]
	return buf;
    9992:	e7f2      	b.n	997a <bt_att_create_pdu+0x36>
    9994:	000233ec 	.word	0x000233ec
    9998:	000233ec 	.word	0x000233ec
    999c:	0002557a 	.word	0x0002557a

000099a0 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    99a0:	688b      	ldr	r3, [r1, #8]
{
    99a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    99a6:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    99a8:	2d16      	cmp	r5, #22
{
    99aa:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    99ac:	d91f      	bls.n	99ee <att_mtu_req+0x4e>
	struct bt_conn *conn = att->chan.chan.conn;
    99ae:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    99b2:	2202      	movs	r2, #2
    99b4:	2103      	movs	r1, #3
    99b6:	4640      	mov	r0, r8
    99b8:	f7ff ffc4 	bl	9944 <bt_att_create_pdu>
	if (!pdu) {
    99bc:	4607      	mov	r7, r0
    99be:	b1c0      	cbz	r0, 99f2 <att_mtu_req+0x52>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    99c0:	2102      	movs	r1, #2
    99c2:	3008      	adds	r0, #8
    99c4:	f018 fde1 	bl	2258a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    99c8:	2400      	movs	r4, #0
    99ca:	2345      	movs	r3, #69	; 0x45
    99cc:	7003      	strb	r3, [r0, #0]
    99ce:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    99d0:	4b09      	ldr	r3, [pc, #36]	; (99f8 <att_mtu_req+0x58>)
    99d2:	4640      	mov	r0, r8
    99d4:	463a      	mov	r2, r7
    99d6:	2104      	movs	r1, #4
    99d8:	f016 f963 	bl	1fca2 <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    99dc:	2d45      	cmp	r5, #69	; 0x45
    99de:	bf28      	it	cs
    99e0:	2545      	movcs	r5, #69	; 0x45
    99e2:	8675      	strh	r5, [r6, #50]	; 0x32
	att->chan.tx.mtu = att->chan.rx.mtu;
    99e4:	f8a6 5052 	strh.w	r5, [r6, #82]	; 0x52
	return 0;
    99e8:	4620      	mov	r0, r4
}
    99ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    99ee:	2004      	movs	r0, #4
    99f0:	e7fb      	b.n	99ea <att_mtu_req+0x4a>
		return BT_ATT_ERR_UNLIKELY;
    99f2:	200e      	movs	r0, #14
    99f4:	e7f9      	b.n	99ea <att_mtu_req+0x4a>
    99f6:	bf00      	nop
    99f8:	00020083 	.word	0x00020083

000099fc <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    99fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a00:	4688      	mov	r8, r1
    9a02:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9a04:	2101      	movs	r1, #1
    9a06:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    9a08:	4605      	mov	r5, r0
    9a0a:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9a0c:	f7ff ff9a 	bl	9944 <bt_att_create_pdu>
	if (!buf) {
    9a10:	4604      	mov	r4, r0
    9a12:	b180      	cbz	r0, 9a36 <send_err_rsp.part.12+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    9a14:	2104      	movs	r1, #4
    9a16:	3008      	adds	r0, #8
    9a18:	f018 fdb7 	bl	2258a <net_buf_simple_add>
	rsp->request = req;
    9a1c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    9a20:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    9a22:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    9a26:	4622      	mov	r2, r4
    9a28:	4628      	mov	r0, r5
    9a2a:	4b04      	ldr	r3, [pc, #16]	; (9a3c <send_err_rsp.part.12+0x40>)
    9a2c:	2104      	movs	r1, #4
}
    9a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    9a32:	f016 b936 	b.w	1fca2 <bt_l2cap_send_cb>
}
    9a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a3a:	bf00      	nop
    9a3c:	00020083 	.word	0x00020083

00009a40 <bt_att_recv>:
{
    9a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    9a42:	898b      	ldrh	r3, [r1, #12]
{
    9a44:	4604      	mov	r4, r0
    9a46:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    9a48:	b97b      	cbnz	r3, 9a6a <bt_att_recv+0x2a>
		BT_ERR("Too small ATT PDU received");
    9a4a:	2301      	movs	r3, #1
    9a4c:	f04f 0100 	mov.w	r1, #0
    9a50:	f363 0107 	bfi	r1, r3, #0, #8
    9a54:	4a52      	ldr	r2, [pc, #328]	; (9ba0 <bt_att_recv+0x160>)
    9a56:	4b53      	ldr	r3, [pc, #332]	; (9ba4 <bt_att_recv+0x164>)
    9a58:	4853      	ldr	r0, [pc, #332]	; (9ba8 <bt_att_recv+0x168>)
    9a5a:	1a9b      	subs	r3, r3, r2
    9a5c:	08db      	lsrs	r3, r3, #3
    9a5e:	f363 118f 	bfi	r1, r3, #6, #10
			BT_WARN("Ignoring unexpected indication");
    9a62:	f014 fcee 	bl	1e442 <log_0>
}
    9a66:	2000      	movs	r0, #0
    9a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9a6a:	2101      	movs	r1, #1
    9a6c:	f107 0008 	add.w	r0, r7, #8
    9a70:	f018 fe00 	bl	22674 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    9a74:	4a4d      	ldr	r2, [pc, #308]	; (9bac <bt_att_recv+0x16c>)
    9a76:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9a78:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9a7a:	2300      	movs	r3, #0
    9a7c:	4610      	mov	r0, r2
		if (hdr->code == handlers[i].op) {
    9a7e:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    9a82:	428e      	cmp	r6, r1
    9a84:	d122      	bne.n	9acc <bt_att_recv+0x8c>
		if (handler->type == ATT_REQUEST &&
    9a86:	00db      	lsls	r3, r3, #3
    9a88:	441a      	add	r2, r3
    9a8a:	7896      	ldrb	r6, [r2, #2]
    9a8c:	2e01      	cmp	r6, #1
    9a8e:	d13d      	bne.n	9b0c <bt_att_recv+0xcc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9a90:	f3bf 8f5b 	dmb	ish
    9a94:	f104 028c 	add.w	r2, r4, #140	; 0x8c
    9a98:	e852 1f00 	ldrex	r1, [r2]
    9a9c:	f041 0c01 	orr.w	ip, r1, #1
    9aa0:	e842 ce00 	strex	lr, ip, [r2]
    9aa4:	f1be 0f00 	cmp.w	lr, #0
    9aa8:	d1f6      	bne.n	9a98 <bt_att_recv+0x58>
    9aaa:	f3bf 8f5b 	dmb	ish
    9aae:	07c9      	lsls	r1, r1, #31
    9ab0:	d54c      	bpl.n	9b4c <bt_att_recv+0x10c>
			BT_WARN("Ignoring unexpected request");
    9ab2:	2302      	movs	r3, #2
    9ab4:	f04f 0100 	mov.w	r1, #0
    9ab8:	f363 0107 	bfi	r1, r3, #0, #8
    9abc:	4a38      	ldr	r2, [pc, #224]	; (9ba0 <bt_att_recv+0x160>)
    9abe:	4b39      	ldr	r3, [pc, #228]	; (9ba4 <bt_att_recv+0x164>)
    9ac0:	483b      	ldr	r0, [pc, #236]	; (9bb0 <bt_att_recv+0x170>)
    9ac2:	1a9b      	subs	r3, r3, r2
    9ac4:	08db      	lsrs	r3, r3, #3
    9ac6:	f363 118f 	bfi	r1, r3, #6, #10
    9aca:	e7ca      	b.n	9a62 <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9acc:	3301      	adds	r3, #1
    9ace:	2b0d      	cmp	r3, #13
    9ad0:	d1d5      	bne.n	9a7e <bt_att_recv+0x3e>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    9ad2:	2302      	movs	r3, #2
    9ad4:	f04f 0200 	mov.w	r2, #0
    9ad8:	f363 0207 	bfi	r2, r3, #0, #8
    9adc:	4830      	ldr	r0, [pc, #192]	; (9ba0 <bt_att_recv+0x160>)
    9ade:	4b31      	ldr	r3, [pc, #196]	; (9ba4 <bt_att_recv+0x164>)
    9ae0:	1a1b      	subs	r3, r3, r0
    9ae2:	08db      	lsrs	r3, r3, #3
    9ae4:	4833      	ldr	r0, [pc, #204]	; (9bb4 <bt_att_recv+0x174>)
    9ae6:	f363 128f 	bfi	r2, r3, #6, #10
    9aea:	f014 fcb7 	bl	1e45c <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9aee:	782d      	ldrb	r5, [r5, #0]
    9af0:	4628      	mov	r0, r5
    9af2:	f7ff fd6b 	bl	95cc <att_op_get_type>
    9af6:	2800      	cmp	r0, #0
    9af8:	d0b5      	beq.n	9a66 <bt_att_recv+0x26>
	if (!req) {
    9afa:	2d00      	cmp	r5, #0
    9afc:	d0b3      	beq.n	9a66 <bt_att_recv+0x26>
    9afe:	2306      	movs	r3, #6
    9b00:	2200      	movs	r2, #0
    9b02:	4629      	mov	r1, r5
    9b04:	6820      	ldr	r0, [r4, #0]
    9b06:	f7ff ff79 	bl	99fc <send_err_rsp.part.12>
    9b0a:	e7ac      	b.n	9a66 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
    9b0c:	2e05      	cmp	r6, #5
    9b0e:	d11d      	bne.n	9b4c <bt_att_recv+0x10c>
    9b10:	f3bf 8f5b 	dmb	ish
    9b14:	f104 028c 	add.w	r2, r4, #140	; 0x8c
    9b18:	e852 1f00 	ldrex	r1, [r2]
    9b1c:	f041 0c02 	orr.w	ip, r1, #2
    9b20:	e842 ce00 	strex	lr, ip, [r2]
    9b24:	f1be 0f00 	cmp.w	lr, #0
    9b28:	d1f6      	bne.n	9b18 <bt_att_recv+0xd8>
    9b2a:	f3bf 8f5b 	dmb	ish
    9b2e:	078a      	lsls	r2, r1, #30
    9b30:	d50c      	bpl.n	9b4c <bt_att_recv+0x10c>
			BT_WARN("Ignoring unexpected indication");
    9b32:	2302      	movs	r3, #2
    9b34:	f04f 0100 	mov.w	r1, #0
    9b38:	f363 0107 	bfi	r1, r3, #0, #8
    9b3c:	4a18      	ldr	r2, [pc, #96]	; (9ba0 <bt_att_recv+0x160>)
    9b3e:	4b19      	ldr	r3, [pc, #100]	; (9ba4 <bt_att_recv+0x164>)
    9b40:	481d      	ldr	r0, [pc, #116]	; (9bb8 <bt_att_recv+0x178>)
    9b42:	1a9b      	subs	r3, r3, r2
    9b44:	08db      	lsrs	r3, r3, #3
    9b46:	f363 118f 	bfi	r1, r3, #6, #10
    9b4a:	e78a      	b.n	9a62 <bt_att_recv+0x22>
	if (buf->len < handler->expect_len) {
    9b4c:	4403      	add	r3, r0
    9b4e:	89b9      	ldrh	r1, [r7, #12]
    9b50:	785a      	ldrb	r2, [r3, #1]
    9b52:	428a      	cmp	r2, r1
    9b54:	d913      	bls.n	9b7e <bt_att_recv+0x13e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    9b56:	2201      	movs	r2, #1
    9b58:	f04f 0300 	mov.w	r3, #0
    9b5c:	f362 0307 	bfi	r3, r2, #0, #8
    9b60:	480f      	ldr	r0, [pc, #60]	; (9ba0 <bt_att_recv+0x160>)
    9b62:	4a10      	ldr	r2, [pc, #64]	; (9ba4 <bt_att_recv+0x164>)
    9b64:	1a12      	subs	r2, r2, r0
    9b66:	08d2      	lsrs	r2, r2, #3
    9b68:	f362 138f 	bfi	r3, r2, #6, #10
    9b6c:	4813      	ldr	r0, [pc, #76]	; (9bbc <bt_att_recv+0x17c>)
    9b6e:	782a      	ldrb	r2, [r5, #0]
    9b70:	f014 fc88 	bl	1e484 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    9b74:	2e01      	cmp	r6, #1
    9b76:	f47f af76 	bne.w	9a66 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
    9b7a:	2304      	movs	r3, #4
    9b7c:	e00a      	b.n	9b94 <bt_att_recv+0x154>
		err = handler->func(att, buf);
    9b7e:	685b      	ldr	r3, [r3, #4]
    9b80:	4639      	mov	r1, r7
    9b82:	4620      	mov	r0, r4
    9b84:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    9b86:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    9b88:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    9b8a:	f47f af6c 	bne.w	9a66 <bt_att_recv+0x26>
    9b8e:	2800      	cmp	r0, #0
    9b90:	f43f af69 	beq.w	9a66 <bt_att_recv+0x26>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    9b94:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    9b96:	2900      	cmp	r1, #0
    9b98:	f43f af65 	beq.w	9a66 <bt_att_recv+0x26>
    9b9c:	2200      	movs	r2, #0
    9b9e:	e7b1      	b.n	9b04 <bt_att_recv+0xc4>
    9ba0:	000233ec 	.word	0x000233ec
    9ba4:	000233ec 	.word	0x000233ec
    9ba8:	0002559f 	.word	0x0002559f
    9bac:	000239f0 	.word	0x000239f0
    9bb0:	000255ba 	.word	0x000255ba
    9bb4:	00025614 	.word	0x00025614
    9bb8:	000255d6 	.word	0x000255d6
    9bbc:	000255f5 	.word	0x000255f5

00009bc0 <att_write_rsp>:
{
    9bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9bc4:	460e      	mov	r6, r1
    9bc6:	3100      	adds	r1, #0
{
    9bc8:	b086      	sub	sp, #24
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9bca:	bf18      	it	ne
    9bcc:	2101      	movne	r1, #1
{
    9bce:	4605      	mov	r5, r0
    9bd0:	4690      	mov	r8, r2
    9bd2:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9bd4:	f016 fd8a 	bl	206ec <bt_gatt_change_aware>
    9bd8:	2800      	cmp	r0, #0
    9bda:	d04d      	beq.n	9c78 <att_write_rsp+0xb8>
	if (!handle) {
    9bdc:	2f00      	cmp	r7, #0
    9bde:	d04d      	beq.n	9c7c <att_write_rsp+0xbc>
	(void)memset(&data, 0, sizeof(data));
    9be0:	2218      	movs	r2, #24
    9be2:	2100      	movs	r1, #0
    9be4:	4668      	mov	r0, sp
    9be6:	f015 fd39 	bl	1f65c <memset>
	if (rsp) {
    9bea:	f1b8 0f00 	cmp.w	r8, #0
    9bee:	d124      	bne.n	9c3a <att_write_rsp+0x7a>
	data.offset = offset;
    9bf0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9bf4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    9bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9bfa:	9303      	str	r3, [sp, #12]
	data.len = len;
    9bfc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    9c00:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9c04:	2301      	movs	r3, #1
    9c06:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9c0a:	4a1d      	ldr	r2, [pc, #116]	; (9c80 <att_write_rsp+0xc0>)
	data.conn = conn;
    9c0c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9c0e:	466b      	mov	r3, sp
    9c10:	4639      	mov	r1, r7
    9c12:	4638      	mov	r0, r7
	data.req = req;
    9c14:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9c18:	f001 f846 	bl	aca8 <bt_gatt_foreach_attr>
	if (data.err) {
    9c1c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9c20:	b30c      	cbz	r4, 9c66 <att_write_rsp+0xa6>
		if (rsp) {
    9c22:	f1b8 0f00 	cmp.w	r8, #0
    9c26:	d019      	beq.n	9c5c <att_write_rsp+0x9c>
			net_buf_unref(data.buf);
    9c28:	9801      	ldr	r0, [sp, #4]
    9c2a:	f011 f803 	bl	1ac34 <net_buf_unref>
	if (!req) {
    9c2e:	b976      	cbnz	r6, 9c4e <att_write_rsp+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9c30:	2400      	movs	r4, #0
}
    9c32:	4620      	mov	r0, r4
    9c34:	b006      	add	sp, #24
    9c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    9c3a:	2200      	movs	r2, #0
    9c3c:	4641      	mov	r1, r8
    9c3e:	4628      	mov	r0, r5
    9c40:	f7ff fe80 	bl	9944 <bt_att_create_pdu>
    9c44:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    9c46:	2800      	cmp	r0, #0
    9c48:	d1d2      	bne.n	9bf0 <att_write_rsp+0x30>
			return BT_ATT_ERR_UNLIKELY;
    9c4a:	240e      	movs	r4, #14
    9c4c:	e7f1      	b.n	9c32 <att_write_rsp+0x72>
    9c4e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9c52:	463a      	mov	r2, r7
    9c54:	4631      	mov	r1, r6
    9c56:	4628      	mov	r0, r5
    9c58:	f7ff fed0 	bl	99fc <send_err_rsp.part.12>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9c5c:	2e18      	cmp	r6, #24
    9c5e:	d1e7      	bne.n	9c30 <att_write_rsp+0x70>
    9c60:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9c64:	e7e5      	b.n	9c32 <att_write_rsp+0x72>
	if (data.buf) {
    9c66:	9a01      	ldr	r2, [sp, #4]
    9c68:	2a00      	cmp	r2, #0
    9c6a:	d0e1      	beq.n	9c30 <att_write_rsp+0x70>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    9c6c:	4b05      	ldr	r3, [pc, #20]	; (9c84 <att_write_rsp+0xc4>)
    9c6e:	2104      	movs	r1, #4
    9c70:	4628      	mov	r0, r5
    9c72:	f016 f816 	bl	1fca2 <bt_l2cap_send_cb>
    9c76:	e7dc      	b.n	9c32 <att_write_rsp+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9c78:	2412      	movs	r4, #18
    9c7a:	e7da      	b.n	9c32 <att_write_rsp+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    9c7c:	2401      	movs	r4, #1
    9c7e:	e7d8      	b.n	9c32 <att_write_rsp+0x72>
    9c80:	000200df 	.word	0x000200df
    9c84:	00020083 	.word	0x00020083

00009c88 <att_exec_write_req>:
{
    9c88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(att, req->flags);
    9c8c:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    9c8e:	4607      	mov	r7, r0
	return att_exec_write_rsp(att, req->flags);
    9c90:	f893 8000 	ldrb.w	r8, [r3]
	struct bt_conn *conn = att->chan.chan.conn;
    9c94:	f857 6bd4 	ldr.w	r6, [r7], #212
	u8_t err = 0U;
    9c98:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    9c9a:	2100      	movs	r1, #0
    9c9c:	4638      	mov	r0, r7
    9c9e:	f018 fbf6 	bl	2248e <net_buf_get>
    9ca2:	4605      	mov	r5, r0
    9ca4:	b980      	cbnz	r0, 9cc8 <att_exec_write_req+0x40>
	if (err) {
    9ca6:	bb5c      	cbnz	r4, 9d00 <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    9ca8:	4622      	mov	r2, r4
    9caa:	2119      	movs	r1, #25
    9cac:	4630      	mov	r0, r6
    9cae:	f7ff fe49 	bl	9944 <bt_att_create_pdu>
	if (!buf) {
    9cb2:	4602      	mov	r2, r0
    9cb4:	b330      	cbz	r0, 9d04 <att_exec_write_req+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    9cb6:	4b14      	ldr	r3, [pc, #80]	; (9d08 <att_exec_write_req+0x80>)
    9cb8:	2104      	movs	r1, #4
    9cba:	4630      	mov	r0, r6
    9cbc:	f015 fff1 	bl	1fca2 <bt_l2cap_send_cb>
}
    9cc0:	4620      	mov	r0, r4
    9cc2:	b004      	add	sp, #16
    9cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    9cc8:	b9b4      	cbnz	r4, 9cf8 <att_exec_write_req+0x70>
    9cca:	f1b8 0f01 	cmp.w	r8, #1
    9cce:	d113      	bne.n	9cf8 <att_exec_write_req+0x70>
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    9cd0:	7b2a      	ldrb	r2, [r5, #12]
    9cd2:	8aab      	ldrh	r3, [r5, #20]
    9cd4:	9202      	str	r2, [sp, #8]
    9cd6:	68aa      	ldr	r2, [r5, #8]
    9cd8:	9201      	str	r2, [sp, #4]
    9cda:	8aea      	ldrh	r2, [r5, #22]
    9cdc:	9200      	str	r2, [sp, #0]
    9cde:	2118      	movs	r1, #24
    9ce0:	4622      	mov	r2, r4
    9ce2:	4630      	mov	r0, r6
    9ce4:	f7ff ff6c 	bl	9bc0 <att_write_rsp>
			if (err) {
    9ce8:	4604      	mov	r4, r0
    9cea:	b128      	cbz	r0, 9cf8 <att_exec_write_req+0x70>
	if (!req) {
    9cec:	4603      	mov	r3, r0
    9cee:	8aaa      	ldrh	r2, [r5, #20]
    9cf0:	2118      	movs	r1, #24
    9cf2:	4630      	mov	r0, r6
    9cf4:	f7ff fe82 	bl	99fc <send_err_rsp.part.12>
		net_buf_unref(buf);
    9cf8:	4628      	mov	r0, r5
    9cfa:	f010 ff9b 	bl	1ac34 <net_buf_unref>
    9cfe:	e7cc      	b.n	9c9a <att_exec_write_req+0x12>
		return 0;
    9d00:	4604      	mov	r4, r0
    9d02:	e7dd      	b.n	9cc0 <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    9d04:	240e      	movs	r4, #14
    9d06:	e7db      	b.n	9cc0 <att_exec_write_req+0x38>
    9d08:	00020083 	.word	0x00020083

00009d0c <att_prepare_write_req>:
{
    9d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d10:	460c      	mov	r4, r1
    9d12:	b087      	sub	sp, #28
    9d14:	4683      	mov	fp, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    9d16:	2104      	movs	r1, #4
    9d18:	f104 0008 	add.w	r0, r4, #8
    9d1c:	f018 fcaa 	bl	22674 <net_buf_simple_pull_mem>
	struct bt_conn *conn = att->chan.chan.conn;
    9d20:	f8db 5000 	ldr.w	r5, [fp]
	handle = sys_le16_to_cpu(req->handle);
    9d24:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    9d28:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    9d2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    9d30:	89a6      	ldrh	r6, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    9d32:	2101      	movs	r1, #1
    9d34:	4628      	mov	r0, r5
	handle = sys_le16_to_cpu(req->handle);
    9d36:	fa1f f78a 	uxth.w	r7, sl
	if (!bt_gatt_change_aware(conn, true)) {
    9d3a:	f016 fcd7 	bl	206ec <bt_gatt_change_aware>
    9d3e:	2800      	cmp	r0, #0
    9d40:	d04b      	beq.n	9dda <att_prepare_write_req+0xce>
	if (!handle) {
    9d42:	2f00      	cmp	r7, #0
    9d44:	d04b      	beq.n	9dde <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    9d46:	2214      	movs	r2, #20
    9d48:	2100      	movs	r1, #0
    9d4a:	a801      	add	r0, sp, #4
    9d4c:	f015 fc86 	bl	1f65c <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9d50:	2301      	movs	r3, #1
    9d52:	f88d 3014 	strb.w	r3, [sp, #20]
	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    9d56:	b2f6      	uxtb	r6, r6
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    9d58:	ab01      	add	r3, sp, #4
    9d5a:	4a23      	ldr	r2, [pc, #140]	; (9de8 <att_prepare_write_req+0xdc>)
	data.conn = conn;
    9d5c:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    9d5e:	4639      	mov	r1, r7
    9d60:	4638      	mov	r0, r7
	data.offset = offset;
    9d62:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    9d66:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    9d6a:	f88d 6010 	strb.w	r6, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    9d6e:	f000 ff9b 	bl	aca8 <bt_gatt_foreach_attr>
	if (data.err) {
    9d72:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9d76:	b154      	cbz	r4, 9d8e <att_prepare_write_req+0x82>
	if (!req) {
    9d78:	4623      	mov	r3, r4
    9d7a:	463a      	mov	r2, r7
    9d7c:	2116      	movs	r1, #22
    9d7e:	4628      	mov	r0, r5
    9d80:	f7ff fe3c 	bl	99fc <send_err_rsp.part.12>
		return 0;
    9d84:	2400      	movs	r4, #0
}
    9d86:	4620      	mov	r0, r4
    9d88:	b007      	add	sp, #28
    9d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&att->prep_queue, data.buf);
    9d8e:	9902      	ldr	r1, [sp, #8]
    9d90:	f10b 00d4 	add.w	r0, fp, #212	; 0xd4
    9d94:	f018 fbe8 	bl	22568 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    9d98:	4622      	mov	r2, r4
    9d9a:	2117      	movs	r1, #23
    9d9c:	4628      	mov	r0, r5
    9d9e:	f7ff fdd1 	bl	9944 <bt_att_create_pdu>
    9da2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9da4:	b1e8      	cbz	r0, 9de2 <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    9da6:	2104      	movs	r1, #4
    9da8:	3008      	adds	r0, #8
    9daa:	f018 fbee 	bl	2258a <net_buf_simple_add>
    9dae:	4607      	mov	r7, r0
	rsp->handle = sys_cpu_to_le16(handle);
    9db0:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    9db4:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    9db8:	9802      	ldr	r0, [sp, #8]
    9dba:	4631      	mov	r1, r6
    9dbc:	3008      	adds	r0, #8
    9dbe:	f018 fbe4 	bl	2258a <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    9dc2:	4632      	mov	r2, r6
    9dc4:	4641      	mov	r1, r8
    9dc6:	1d38      	adds	r0, r7, #4
    9dc8:	f015 fc1e 	bl	1f608 <memcpy>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9dcc:	4b07      	ldr	r3, [pc, #28]	; (9dec <att_prepare_write_req+0xe0>)
    9dce:	9a02      	ldr	r2, [sp, #8]
    9dd0:	2104      	movs	r1, #4
    9dd2:	4628      	mov	r0, r5
    9dd4:	f015 ff65 	bl	1fca2 <bt_l2cap_send_cb>
	return 0;
    9dd8:	e7d5      	b.n	9d86 <att_prepare_write_req+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9dda:	2412      	movs	r4, #18
    9ddc:	e7d3      	b.n	9d86 <att_prepare_write_req+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    9dde:	2401      	movs	r4, #1
    9de0:	e7d1      	b.n	9d86 <att_prepare_write_req+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    9de2:	240e      	movs	r4, #14
    9de4:	e7cf      	b.n	9d86 <att_prepare_write_req+0x7a>
    9de6:	bf00      	nop
    9de8:	000098c9 	.word	0x000098c9
    9dec:	00020083 	.word	0x00020083

00009df0 <att_read_group_req>:
{
    9df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9df4:	898b      	ldrh	r3, [r1, #12]
    9df6:	2b06      	cmp	r3, #6
{
    9df8:	b08d      	sub	sp, #52	; 0x34
    9dfa:	4681      	mov	r9, r0
    9dfc:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9dfe:	d001      	beq.n	9e04 <att_read_group_req+0x14>
    9e00:	2b14      	cmp	r3, #20
    9e02:	d16d      	bne.n	9ee0 <att_read_group_req+0xf0>
	req = net_buf_pull_mem(buf, sizeof(*req));
    9e04:	2104      	movs	r1, #4
    9e06:	f104 0008 	add.w	r0, r4, #8
	struct bt_conn *conn = att->chan.chan.conn;
    9e0a:	f8d9 8000 	ldr.w	r8, [r9]
	req = net_buf_pull_mem(buf, sizeof(*req));
    9e0e:	f018 fc31 	bl	22674 <net_buf_simple_pull_mem>
	if (!uuid_create(&u.uuid, buf)) {
    9e12:	af02      	add	r7, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    9e14:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9e16:	8846      	ldrh	r6, [r0, #2]
	if (!uuid_create(&u.uuid, buf)) {
    9e18:	4621      	mov	r1, r4
    9e1a:	4638      	mov	r0, r7
    9e1c:	f016 f8fe 	bl	2001c <uuid_create>
    9e20:	2800      	cmp	r0, #0
    9e22:	d05f      	beq.n	9ee4 <att_read_group_req+0xf4>
	if (!start || !end) {
    9e24:	2d00      	cmp	r5, #0
    9e26:	d036      	beq.n	9e96 <att_read_group_req+0xa6>
    9e28:	2400      	movs	r4, #0
    9e2a:	b39e      	cbz	r6, 9e94 <att_read_group_req+0xa4>
	if (start > end) {
    9e2c:	42b5      	cmp	r5, r6
    9e2e:	d832      	bhi.n	9e96 <att_read_group_req+0xa6>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9e30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9e34:	4669      	mov	r1, sp
    9e36:	4638      	mov	r0, r7
    9e38:	f88d 4000 	strb.w	r4, [sp]
    9e3c:	f8ad 3002 	strh.w	r3, [sp, #2]
    9e40:	f015 fd2e 	bl	1f8a0 <bt_uuid_cmp>
    9e44:	bb90      	cbnz	r0, 9eac <att_read_group_req+0xbc>
	struct bt_conn *conn = att->chan.chan.conn;
    9e46:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    9e4a:	2214      	movs	r2, #20
    9e4c:	2100      	movs	r1, #0
    9e4e:	a807      	add	r0, sp, #28
    9e50:	f015 fc04 	bl	1f65c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9e54:	2201      	movs	r2, #1
    9e56:	2111      	movs	r1, #17
    9e58:	4640      	mov	r0, r8
    9e5a:	f7ff fd73 	bl	9944 <bt_att_create_pdu>
    9e5e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    9e60:	2800      	cmp	r0, #0
    9e62:	d03f      	beq.n	9ee4 <att_read_group_req+0xf4>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9e64:	2101      	movs	r1, #1
    9e66:	3008      	adds	r0, #8
	data.uuid = uuid;
    9e68:	e9cd 9707 	strd	r9, r7, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9e6c:	f018 fb8d 	bl	2258a <net_buf_simple_add>
	data.rsp->len = 0U;
    9e70:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9e72:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9e74:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    9e76:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9e78:	4a1b      	ldr	r2, [pc, #108]	; (9ee8 <att_read_group_req+0xf8>)
	data.group = NULL;
    9e7a:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9e7c:	4631      	mov	r1, r6
    9e7e:	4628      	mov	r0, r5
    9e80:	f000 ff12 	bl	aca8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    9e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e86:	781c      	ldrb	r4, [r3, #0]
    9e88:	bb1c      	cbnz	r4, 9ed2 <att_read_group_req+0xe2>
		net_buf_unref(data.buf);
    9e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e8c:	f010 fed2 	bl	1ac34 <net_buf_unref>
	if (!req) {
    9e90:	230a      	movs	r3, #10
    9e92:	e018      	b.n	9ec6 <att_read_group_req+0xd6>
			*err = 0U;
    9e94:	4635      	mov	r5, r6
	if (!req) {
    9e96:	2301      	movs	r3, #1
    9e98:	462a      	mov	r2, r5
    9e9a:	2110      	movs	r1, #16
    9e9c:	4640      	mov	r0, r8
    9e9e:	f7ff fdad 	bl	99fc <send_err_rsp.part.12>
		return 0;
    9ea2:	2400      	movs	r4, #0
}
    9ea4:	4620      	mov	r0, r4
    9ea6:	b00d      	add	sp, #52	; 0x34
    9ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9eac:	f642 0301 	movw	r3, #10241	; 0x2801
    9eb0:	a901      	add	r1, sp, #4
    9eb2:	4638      	mov	r0, r7
    9eb4:	f88d 4004 	strb.w	r4, [sp, #4]
    9eb8:	f8ad 3006 	strh.w	r3, [sp, #6]
    9ebc:	f015 fcf0 	bl	1f8a0 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9ec0:	2800      	cmp	r0, #0
    9ec2:	d0c0      	beq.n	9e46 <att_read_group_req+0x56>
	if (!req) {
    9ec4:	2310      	movs	r3, #16
    9ec6:	462a      	mov	r2, r5
    9ec8:	2110      	movs	r1, #16
    9eca:	4640      	mov	r0, r8
    9ecc:	f7ff fd96 	bl	99fc <send_err_rsp.part.12>
		return 0;
    9ed0:	e7e8      	b.n	9ea4 <att_read_group_req+0xb4>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9ed2:	4b06      	ldr	r3, [pc, #24]	; (9eec <att_read_group_req+0xfc>)
    9ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ed6:	2104      	movs	r1, #4
    9ed8:	4640      	mov	r0, r8
    9eda:	f015 fee2 	bl	1fca2 <bt_l2cap_send_cb>
	return 0;
    9ede:	e7e0      	b.n	9ea2 <att_read_group_req+0xb2>
		return BT_ATT_ERR_INVALID_PDU;
    9ee0:	2404      	movs	r4, #4
    9ee2:	e7df      	b.n	9ea4 <att_read_group_req+0xb4>
		return BT_ATT_ERR_UNLIKELY;
    9ee4:	240e      	movs	r4, #14
    9ee6:	e7dd      	b.n	9ea4 <att_read_group_req+0xb4>
    9ee8:	0001fdb3 	.word	0x0001fdb3
    9eec:	00020083 	.word	0x00020083

00009ef0 <att_read_mult_req>:
{
    9ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9ef4:	6804      	ldr	r4, [r0, #0]
{
    9ef6:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    9ef8:	2214      	movs	r2, #20
{
    9efa:	4606      	mov	r6, r0
    9efc:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    9efe:	a801      	add	r0, sp, #4
    9f00:	2100      	movs	r1, #0
    9f02:	f015 fbab 	bl	1f65c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    9f06:	2200      	movs	r2, #0
    9f08:	210f      	movs	r1, #15
    9f0a:	4620      	mov	r0, r4
    9f0c:	f7ff fd1a 	bl	9944 <bt_att_create_pdu>
    9f10:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9f12:	b368      	cbz	r0, 9f70 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9f14:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9f78 <att_read_mult_req+0x88>
	data.att = att;
    9f18:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    9f1a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9f1e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    9f22:	89ab      	ldrh	r3, [r5, #12]
    9f24:	2b01      	cmp	r3, #1
    9f26:	d806      	bhi.n	9f36 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9f28:	4b12      	ldr	r3, [pc, #72]	; (9f74 <att_read_mult_req+0x84>)
    9f2a:	9a03      	ldr	r2, [sp, #12]
    9f2c:	2104      	movs	r1, #4
    9f2e:	4620      	mov	r0, r4
    9f30:	f015 feb7 	bl	1fca2 <bt_l2cap_send_cb>
    9f34:	e018      	b.n	9f68 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    9f36:	4638      	mov	r0, r7
    9f38:	f018 fbac 	bl	22694 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9f3c:	ab01      	add	r3, sp, #4
    9f3e:	464a      	mov	r2, r9
    9f40:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    9f42:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9f44:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9f48:	f000 feae 	bl	aca8 <bt_gatt_foreach_attr>
		if (data.err) {
    9f4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9f50:	2b00      	cmp	r3, #0
    9f52:	d0e6      	beq.n	9f22 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    9f54:	9803      	ldr	r0, [sp, #12]
    9f56:	f010 fe6d 	bl	1ac34 <net_buf_unref>
	if (!req) {
    9f5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9f5e:	4632      	mov	r2, r6
    9f60:	210e      	movs	r1, #14
    9f62:	4620      	mov	r0, r4
    9f64:	f7ff fd4a 	bl	99fc <send_err_rsp.part.12>
	return 0;
    9f68:	2000      	movs	r0, #0
}
    9f6a:	b007      	add	sp, #28
    9f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    9f70:	200e      	movs	r0, #14
    9f72:	e7fa      	b.n	9f6a <att_read_mult_req+0x7a>
    9f74:	00020083 	.word	0x00020083
    9f78:	0002013f 	.word	0x0002013f

00009f7c <att_read_rsp>:
{
    9f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9f80:	6805      	ldr	r5, [r0, #0]
{
    9f82:	b086      	sub	sp, #24
    9f84:	4604      	mov	r4, r0
    9f86:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    9f88:	4628      	mov	r0, r5
    9f8a:	2101      	movs	r1, #1
{
    9f8c:	4690      	mov	r8, r2
    9f8e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    9f90:	f016 fbac 	bl	206ec <bt_gatt_change_aware>
    9f94:	b398      	cbz	r0, 9ffe <att_read_rsp+0x82>
	if (!handle) {
    9f96:	b3a6      	cbz	r6, a002 <att_read_rsp+0x86>
	(void)memset(&data, 0, sizeof(data));
    9f98:	2214      	movs	r2, #20
    9f9a:	2100      	movs	r1, #0
    9f9c:	a801      	add	r0, sp, #4
    9f9e:	f015 fb5d 	bl	1f65c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    9fa2:	2200      	movs	r2, #0
    9fa4:	4641      	mov	r1, r8
    9fa6:	4628      	mov	r0, r5
    9fa8:	f7ff fccc 	bl	9944 <bt_att_create_pdu>
    9fac:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9fae:	b350      	cbz	r0, a006 <att_read_rsp+0x8a>
	data.offset = offset;
    9fb0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9fb4:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9fb8:	2301      	movs	r3, #1
    9fba:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9fbe:	4a13      	ldr	r2, [pc, #76]	; (a00c <att_read_rsp+0x90>)
	data.att = att;
    9fc0:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9fc2:	ab01      	add	r3, sp, #4
    9fc4:	4631      	mov	r1, r6
    9fc6:	4630      	mov	r0, r6
    9fc8:	f000 fe6e 	bl	aca8 <bt_gatt_foreach_attr>
	if (data.err) {
    9fcc:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9fd0:	b174      	cbz	r4, 9ff0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    9fd2:	9803      	ldr	r0, [sp, #12]
    9fd4:	f010 fe2e 	bl	1ac34 <net_buf_unref>
	if (!req) {
    9fd8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9fdc:	4632      	mov	r2, r6
    9fde:	4639      	mov	r1, r7
    9fe0:	4628      	mov	r0, r5
    9fe2:	f7ff fd0b 	bl	99fc <send_err_rsp.part.12>
		return 0;
    9fe6:	2400      	movs	r4, #0
}
    9fe8:	4620      	mov	r0, r4
    9fea:	b006      	add	sp, #24
    9fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9ff0:	4b07      	ldr	r3, [pc, #28]	; (a010 <att_read_rsp+0x94>)
    9ff2:	9a03      	ldr	r2, [sp, #12]
    9ff4:	2104      	movs	r1, #4
    9ff6:	4628      	mov	r0, r5
    9ff8:	f015 fe53 	bl	1fca2 <bt_l2cap_send_cb>
	return 0;
    9ffc:	e7f4      	b.n	9fe8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9ffe:	2412      	movs	r4, #18
    a000:	e7f2      	b.n	9fe8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    a002:	2401      	movs	r4, #1
    a004:	e7f0      	b.n	9fe8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    a006:	240e      	movs	r4, #14
    a008:	e7ee      	b.n	9fe8 <att_read_rsp+0x6c>
    a00a:	bf00      	nop
    a00c:	0002013f 	.word	0x0002013f
    a010:	00020083 	.word	0x00020083

0000a014 <att_read_type_req>:
{
    a014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    a018:	898b      	ldrh	r3, [r1, #12]
    a01a:	2b06      	cmp	r3, #6
{
    a01c:	b08d      	sub	sp, #52	; 0x34
    a01e:	4607      	mov	r7, r0
    a020:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    a022:	d001      	beq.n	a028 <att_read_type_req+0x14>
    a024:	2b14      	cmp	r3, #20
    a026:	d154      	bne.n	a0d2 <att_read_type_req+0xbe>
	req = net_buf_pull_mem(buf, sizeof(*req));
    a028:	2104      	movs	r1, #4
    a02a:	f106 0008 	add.w	r0, r6, #8
	struct bt_conn *conn = att->chan.chan.conn;
    a02e:	f8d7 9000 	ldr.w	r9, [r7]
	req = net_buf_pull_mem(buf, sizeof(*req));
    a032:	f018 fb1f 	bl	22674 <net_buf_simple_pull_mem>
	if (!uuid_create(&u.uuid, buf)) {
    a036:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    a03a:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a03c:	8844      	ldrh	r4, [r0, #2]
	if (!uuid_create(&u.uuid, buf)) {
    a03e:	4631      	mov	r1, r6
    a040:	4640      	mov	r0, r8
    a042:	f015 ffeb 	bl	2001c <uuid_create>
    a046:	b188      	cbz	r0, a06c <att_read_type_req+0x58>
	if (!start || !end) {
    a048:	b19d      	cbz	r5, a072 <att_read_type_req+0x5e>
    a04a:	b18c      	cbz	r4, a070 <att_read_type_req+0x5c>
	if (start > end) {
    a04c:	42ac      	cmp	r4, r5
    a04e:	d310      	bcc.n	a072 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    a050:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    a052:	683e      	ldr	r6, [r7, #0]
	(void)memset(&data, 0, sizeof(data));
    a054:	2100      	movs	r1, #0
    a056:	eb0d 0002 	add.w	r0, sp, r2
    a05a:	f015 faff 	bl	1f65c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    a05e:	2201      	movs	r2, #1
    a060:	2109      	movs	r1, #9
    a062:	4630      	mov	r0, r6
    a064:	f7ff fc6e 	bl	9944 <bt_att_create_pdu>
    a068:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    a06a:	b968      	cbnz	r0, a088 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    a06c:	240e      	movs	r4, #14
    a06e:	e007      	b.n	a080 <att_read_type_req+0x6c>
			*err = 0U;
    a070:	4625      	mov	r5, r4
	if (!req) {
    a072:	2301      	movs	r3, #1
    a074:	462a      	mov	r2, r5
    a076:	2108      	movs	r1, #8
    a078:	4648      	mov	r0, r9
    a07a:	f7ff fcbf 	bl	99fc <send_err_rsp.part.12>
		return 0;
    a07e:	2400      	movs	r4, #0
}
    a080:	4620      	mov	r0, r4
    a082:	b00d      	add	sp, #52	; 0x34
    a084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a088:	2101      	movs	r1, #1
    a08a:	3008      	adds	r0, #8
	data.uuid = uuid;
    a08c:	e9cd 7806 	strd	r7, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a090:	f018 fa7b 	bl	2258a <net_buf_simple_add>
	data.rsp->len = 0U;
    a094:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a096:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a098:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a09a:	4621      	mov	r1, r4
	data.rsp->len = 0U;
    a09c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a09e:	4a0e      	ldr	r2, [pc, #56]	; (a0d8 <att_read_type_req+0xc4>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a0a0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a0a4:	4628      	mov	r0, r5
    a0a6:	ab06      	add	r3, sp, #24
    a0a8:	f000 fdfe 	bl	aca8 <bt_gatt_foreach_attr>
	if (data.err) {
    a0ac:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    a0b0:	b144      	cbz	r4, a0c4 <att_read_type_req+0xb0>
		net_buf_unref(data.buf);
    a0b2:	9808      	ldr	r0, [sp, #32]
    a0b4:	f010 fdbe 	bl	1ac34 <net_buf_unref>
	if (!req) {
    a0b8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    a0bc:	462a      	mov	r2, r5
    a0be:	2108      	movs	r1, #8
    a0c0:	4630      	mov	r0, r6
    a0c2:	e7da      	b.n	a07a <att_read_type_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    a0c4:	4b05      	ldr	r3, [pc, #20]	; (a0dc <att_read_type_req+0xc8>)
    a0c6:	9a08      	ldr	r2, [sp, #32]
    a0c8:	2104      	movs	r1, #4
    a0ca:	4630      	mov	r0, r6
    a0cc:	f015 fde9 	bl	1fca2 <bt_l2cap_send_cb>
	return 0;
    a0d0:	e7d6      	b.n	a080 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    a0d2:	2404      	movs	r4, #4
    a0d4:	e7d4      	b.n	a080 <att_read_type_req+0x6c>
    a0d6:	bf00      	nop
    a0d8:	0001ff65 	.word	0x0001ff65
    a0dc:	00020083 	.word	0x00020083

0000a0e0 <att_find_type_req>:
{
    a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0e4:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    a0e6:	f8d0 b000 	ldr.w	fp, [r0]
{
    a0ea:	b089      	sub	sp, #36	; 0x24
    a0ec:	4681      	mov	r9, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    a0ee:	2106      	movs	r1, #6
    a0f0:	f108 0008 	add.w	r0, r8, #8
    a0f4:	f018 fabe 	bl	22674 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    a0f8:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    a0fa:	b1fd      	cbz	r5, a13c <att_find_type_req+0x5c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a0fc:	8847      	ldrh	r7, [r0, #2]
	if (!start || !end) {
    a0fe:	b1e7      	cbz	r7, a13a <att_find_type_req+0x5a>
	if (start > end) {
    a100:	42af      	cmp	r7, r5
    a102:	d31b      	bcc.n	a13c <att_find_type_req+0x5c>
	type = sys_le16_to_cpu(req->type);
    a104:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a106:	f8ad 3006 	strh.w	r3, [sp, #6]
    a10a:	2400      	movs	r4, #0
    a10c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a110:	a902      	add	r1, sp, #8
    a112:	a801      	add	r0, sp, #4
	value = buf->data;
    a114:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a118:	f88d 4004 	strb.w	r4, [sp, #4]
    a11c:	f88d 4008 	strb.w	r4, [sp, #8]
    a120:	f8ad 300a 	strh.w	r3, [sp, #10]
    a124:	f015 fbbc 	bl	1f8a0 <bt_uuid_cmp>
    a128:	4606      	mov	r6, r0
    a12a:	b190      	cbz	r0, a152 <att_find_type_req+0x72>
	if (!req) {
    a12c:	230a      	movs	r3, #10
    a12e:	462a      	mov	r2, r5
    a130:	2106      	movs	r1, #6
    a132:	4658      	mov	r0, fp
    a134:	f7ff fc62 	bl	99fc <send_err_rsp.part.12>
		return 0;
    a138:	e007      	b.n	a14a <att_find_type_req+0x6a>
			*err = 0U;
    a13a:	463d      	mov	r5, r7
	if (!req) {
    a13c:	2301      	movs	r3, #1
    a13e:	462a      	mov	r2, r5
    a140:	2106      	movs	r1, #6
    a142:	4658      	mov	r0, fp
    a144:	f7ff fc5a 	bl	99fc <send_err_rsp.part.12>
		return 0;
    a148:	2400      	movs	r4, #0
}
    a14a:	4620      	mov	r0, r4
    a14c:	b009      	add	sp, #36	; 0x24
    a14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return att_find_type_rsp(att, start_handle, end_handle, value,
    a152:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    a156:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    a15a:	4601      	mov	r1, r0
    a15c:	2214      	movs	r2, #20
    a15e:	a803      	add	r0, sp, #12
    a160:	f015 fa7c 	bl	1f65c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    a164:	4632      	mov	r2, r6
    a166:	2107      	movs	r1, #7
    a168:	4640      	mov	r0, r8
    a16a:	f7ff fbeb 	bl	9944 <bt_att_create_pdu>
    a16e:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    a170:	b308      	cbz	r0, a1b6 <att_find_type_req+0xd6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a172:	230a      	movs	r3, #10
    a174:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a178:	4a10      	ldr	r2, [pc, #64]	; (a1bc <att_find_type_req+0xdc>)
	data.value_len = value_len;
    a17a:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a17e:	ab03      	add	r3, sp, #12
    a180:	4639      	mov	r1, r7
    a182:	4628      	mov	r0, r5
	data.att = att;
    a184:	f8cd 900c 	str.w	r9, [sp, #12]
	data.value = value;
    a188:	e9cd 6a05 	strd	r6, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a18c:	f000 fd8c 	bl	aca8 <bt_gatt_foreach_attr>
	if (data.err) {
    a190:	f89d 401d 	ldrb.w	r4, [sp, #29]
    a194:	b144      	cbz	r4, a1a8 <att_find_type_req+0xc8>
		net_buf_unref(data.buf);
    a196:	9804      	ldr	r0, [sp, #16]
    a198:	f010 fd4c 	bl	1ac34 <net_buf_unref>
	if (!req) {
    a19c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    a1a0:	462a      	mov	r2, r5
    a1a2:	2106      	movs	r1, #6
    a1a4:	4640      	mov	r0, r8
    a1a6:	e7cd      	b.n	a144 <att_find_type_req+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    a1a8:	4b05      	ldr	r3, [pc, #20]	; (a1c0 <att_find_type_req+0xe0>)
    a1aa:	9a04      	ldr	r2, [sp, #16]
    a1ac:	2104      	movs	r1, #4
    a1ae:	4640      	mov	r0, r8
    a1b0:	f015 fd77 	bl	1fca2 <bt_l2cap_send_cb>
	return 0;
    a1b4:	e7c9      	b.n	a14a <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    a1b6:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    a1b8:	e7c7      	b.n	a14a <att_find_type_req+0x6a>
    a1ba:	bf00      	nop
    a1bc:	0001fe81 	.word	0x0001fe81
    a1c0:	00020083 	.word	0x00020083

0000a1c4 <att_find_info_req>:
{
    a1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    a1c6:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    a1c8:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    a1ca:	881d      	ldrh	r5, [r3, #0]
{
    a1cc:	b085      	sub	sp, #20
    a1ce:	4607      	mov	r7, r0
	if (!start || !end) {
    a1d0:	b195      	cbz	r5, a1f8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a1d2:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    a1d4:	b17c      	cbz	r4, a1f6 <att_find_info_req+0x32>
	if (start > end) {
    a1d6:	42a5      	cmp	r5, r4
    a1d8:	d80e      	bhi.n	a1f8 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    a1da:	2210      	movs	r2, #16
    a1dc:	2100      	movs	r1, #0
    a1de:	4668      	mov	r0, sp
    a1e0:	f015 fa3c 	bl	1f65c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    a1e4:	2200      	movs	r2, #0
    a1e6:	2105      	movs	r1, #5
    a1e8:	4630      	mov	r0, r6
    a1ea:	f7ff fbab 	bl	9944 <bt_att_create_pdu>
    a1ee:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    a1f0:	b958      	cbnz	r0, a20a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    a1f2:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    a1f4:	e007      	b.n	a206 <att_find_info_req+0x42>
			*err = 0U;
    a1f6:	4625      	mov	r5, r4
	if (!req) {
    a1f8:	2301      	movs	r3, #1
    a1fa:	462a      	mov	r2, r5
    a1fc:	2104      	movs	r1, #4
    a1fe:	4630      	mov	r0, r6
    a200:	f7ff fbfc 	bl	99fc <send_err_rsp.part.12>
	return 0;
    a204:	2000      	movs	r0, #0
}
    a206:	b005      	add	sp, #20
    a208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a20a:	4621      	mov	r1, r4
    a20c:	466b      	mov	r3, sp
    a20e:	4a09      	ldr	r2, [pc, #36]	; (a234 <att_find_info_req+0x70>)
	data.att = att;
    a210:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a212:	4628      	mov	r0, r5
    a214:	f000 fd48 	bl	aca8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    a218:	9c02      	ldr	r4, [sp, #8]
    a21a:	b924      	cbnz	r4, a226 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    a21c:	9801      	ldr	r0, [sp, #4]
    a21e:	f010 fd09 	bl	1ac34 <net_buf_unref>
	if (!req) {
    a222:	230a      	movs	r3, #10
    a224:	e7e9      	b.n	a1fa <att_find_info_req+0x36>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    a226:	4b04      	ldr	r3, [pc, #16]	; (a238 <att_find_info_req+0x74>)
    a228:	9a01      	ldr	r2, [sp, #4]
    a22a:	2104      	movs	r1, #4
    a22c:	4630      	mov	r0, r6
    a22e:	f015 fd38 	bl	1fca2 <bt_l2cap_send_cb>
    a232:	e7e7      	b.n	a204 <att_find_info_req+0x40>
    a234:	0001fd19 	.word	0x0001fd19
    a238:	00020083 	.word	0x00020083

0000a23c <bt_att_init>:

void bt_att_init(void)
{
    a23c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    a23e:	4803      	ldr	r0, [pc, #12]	; (a24c <bt_att_init+0x10>)
    a240:	f7ff f84a 	bl	92d8 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    a244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    a248:	f000 bd9c 	b.w	ad84 <bt_gatt_init>
    a24c:	20007758 	.word	0x20007758

0000a250 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb)
{
    a250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a254:	460d      	mov	r5, r1
    a256:	4616      	mov	r6, r2
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    a258:	4680      	mov	r8, r0
    a25a:	2800      	cmp	r0, #0
    a25c:	d059      	beq.n	a312 <bt_att_send+0xc2>
    a25e:	2900      	cmp	r1, #0
    a260:	d057      	beq.n	a312 <bt_att_send+0xc2>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    a262:	f7ff fa27 	bl	96b4 <att_chan_get>
	if (!att) {
    a266:	4607      	mov	r7, r0
    a268:	b1e0      	cbz	r0, a2a4 <bt_att_send+0x54>
		return -ENOTCONN;
	}

	/* Don't use tx_sem if caller has set it own callback */
	if (!cb) {
    a26a:	b9f6      	cbnz	r6, a2aa <bt_att_send+0x5a>
		k_sem_take(&att->tx_sem, K_FOREVER);
    a26c:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    a270:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a274:	4620      	mov	r0, r4
    a276:	f012 f821 	bl	1c2bc <z_impl_k_sem_take>
		if (!att_is_connected(att)) {
    a27a:	4638      	mov	r0, r7
    a27c:	f015 fee7 	bl	2004e <att_is_connected>
    a280:	b998      	cbnz	r0, a2aa <bt_att_send+0x5a>
			BT_WARN("Disconnected");
    a282:	2302      	movs	r3, #2
    a284:	f04f 0100 	mov.w	r1, #0
    a288:	f363 0107 	bfi	r1, r3, #0, #8
    a28c:	4a22      	ldr	r2, [pc, #136]	; (a318 <bt_att_send+0xc8>)
    a28e:	4b23      	ldr	r3, [pc, #140]	; (a31c <bt_att_send+0xcc>)
    a290:	4823      	ldr	r0, [pc, #140]	; (a320 <bt_att_send+0xd0>)
    a292:	1a9b      	subs	r3, r3, r2
    a294:	08db      	lsrs	r3, r3, #3
    a296:	f363 118f 	bfi	r1, r3, #6, #10
    a29a:	f014 f8d2 	bl	1e442 <log_0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    a29e:	4620      	mov	r0, r4
    a2a0:	f011 ffe2 	bl	1c268 <z_impl_k_sem_give>
		return -ENOTCONN;
    a2a4:	f06f 0438 	mvn.w	r4, #56	; 0x38
    a2a8:	e01b      	b.n	a2e2 <bt_att_send+0x92>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    a2aa:	68ab      	ldr	r3, [r5, #8]
    a2ac:	781b      	ldrb	r3, [r3, #0]
    a2ae:	2bd2      	cmp	r3, #210	; 0xd2
    a2b0:	d11a      	bne.n	a2e8 <bt_att_send+0x98>
		int err;

		err = bt_smp_sign(conn, buf);
    a2b2:	4629      	mov	r1, r5
    a2b4:	4640      	mov	r0, r8
    a2b6:	f016 fa64 	bl	20782 <bt_smp_sign>
		if (err) {
    a2ba:	4604      	mov	r4, r0
    a2bc:	b1a0      	cbz	r0, a2e8 <bt_att_send+0x98>
			BT_ERR("Error signing data");
    a2be:	2301      	movs	r3, #1
    a2c0:	f04f 0100 	mov.w	r1, #0
    a2c4:	f363 0107 	bfi	r1, r3, #0, #8
    a2c8:	4a13      	ldr	r2, [pc, #76]	; (a318 <bt_att_send+0xc8>)
    a2ca:	4b14      	ldr	r3, [pc, #80]	; (a31c <bt_att_send+0xcc>)
    a2cc:	4815      	ldr	r0, [pc, #84]	; (a324 <bt_att_send+0xd4>)
    a2ce:	1a9b      	subs	r3, r3, r2
    a2d0:	08db      	lsrs	r3, r3, #3
    a2d2:	f363 118f 	bfi	r1, r3, #6, #10
    a2d6:	f014 f8b4 	bl	1e442 <log_0>
    a2da:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
    a2de:	f011 ffc3 	bl	1c268 <z_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf));

	return 0;
}
    a2e2:	4620      	mov	r0, r4
    a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf));
    a2e8:	b95e      	cbnz	r6, a302 <bt_att_send+0xb2>
	switch (att_op_get_type(buf->data[0])) {
    a2ea:	68ab      	ldr	r3, [r5, #8]
    a2ec:	7818      	ldrb	r0, [r3, #0]
    a2ee:	f7ff f96d 	bl	95cc <att_op_get_type>
    a2f2:	3801      	subs	r0, #1
    a2f4:	b2c0      	uxtb	r0, r0
    a2f6:	2804      	cmp	r0, #4
    a2f8:	bf96      	itet	ls
    a2fa:	4b0b      	ldrls	r3, [pc, #44]	; (a328 <bt_att_send+0xd8>)
    a2fc:	4e0b      	ldrhi	r6, [pc, #44]	; (a32c <bt_att_send+0xdc>)
    a2fe:	f853 6020 	ldrls.w	r6, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf));
    a302:	4633      	mov	r3, r6
    a304:	462a      	mov	r2, r5
    a306:	2104      	movs	r1, #4
    a308:	4640      	mov	r0, r8
    a30a:	f015 fcca 	bl	1fca2 <bt_l2cap_send_cb>
	return 0;
    a30e:	2400      	movs	r4, #0
    a310:	e7e7      	b.n	a2e2 <bt_att_send+0x92>
		return -EINVAL;
    a312:	f06f 0415 	mvn.w	r4, #21
    a316:	e7e4      	b.n	a2e2 <bt_att_send+0x92>
    a318:	000233ec 	.word	0x000233ec
    a31c:	000233ec 	.word	0x000233ec
    a320:	0002553c 	.word	0x0002553c
    a324:	0002562c 	.word	0x0002562c
    a328:	000239dc 	.word	0x000239dc
    a32c:	00020071 	.word	0x00020071

0000a330 <gatt_notify>:
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len, bt_gatt_complete_func_t cb)
{
    a330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a334:	468b      	mov	fp, r1
    a336:	4692      	mov	sl, r2
	if (!bt_gatt_change_aware(conn, false)) {
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    a338:	211b      	movs	r1, #27
    a33a:	1c9a      	adds	r2, r3, #2
{
    a33c:	4680      	mov	r8, r0
    a33e:	461e      	mov	r6, r3
    a340:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    a344:	f7ff fafe 	bl	9944 <bt_att_create_pdu>
	if (!buf) {
    a348:	4604      	mov	r4, r0
    a34a:	b1c0      	cbz	r0, a37e <gatt_notify+0x4e>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    a34c:	f100 0708 	add.w	r7, r0, #8
    a350:	2102      	movs	r1, #2
    a352:	4638      	mov	r0, r7
    a354:	f018 f919 	bl	2258a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a358:	4605      	mov	r5, r0

	net_buf_add(buf, len);
    a35a:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    a35c:	f825 bb02 	strh.w	fp, [r5], #2
	net_buf_add(buf, len);
    a360:	4638      	mov	r0, r7
    a362:	f018 f912 	bl	2258a <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    a366:	4632      	mov	r2, r6
    a368:	4651      	mov	r1, sl
    a36a:	4628      	mov	r0, r5
    a36c:	f015 f94c 	bl	1f608 <memcpy>

	return bt_att_send(conn, buf, cb);
    a370:	464a      	mov	r2, r9
    a372:	4621      	mov	r1, r4
    a374:	4640      	mov	r0, r8
}
    a376:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_att_send(conn, buf, cb);
    a37a:	f7ff bf69 	b.w	a250 <bt_att_send>
		BT_WARN("No buffer available to send notification");
    a37e:	2302      	movs	r3, #2
    a380:	f04f 0100 	mov.w	r1, #0
    a384:	4a07      	ldr	r2, [pc, #28]	; (a3a4 <gatt_notify+0x74>)
    a386:	4808      	ldr	r0, [pc, #32]	; (a3a8 <gatt_notify+0x78>)
    a388:	f363 0107 	bfi	r1, r3, #0, #8
    a38c:	4b07      	ldr	r3, [pc, #28]	; (a3ac <gatt_notify+0x7c>)
    a38e:	1a9b      	subs	r3, r3, r2
    a390:	08db      	lsrs	r3, r3, #3
    a392:	f363 118f 	bfi	r1, r3, #6, #10
    a396:	f014 f854 	bl	1e442 <log_0>
}
    a39a:	f06f 000b 	mvn.w	r0, #11
    a39e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a3a2:	bf00      	nop
    a3a4:	000233ec 	.word	0x000233ec
    a3a8:	000257cc 	.word	0x000257cc
    a3ac:	00023454 	.word	0x00023454

0000a3b0 <disconnected_cb>:

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a3b4:	6882      	ldr	r2, [r0, #8]
    a3b6:	4b2b      	ldr	r3, [pc, #172]	; (a464 <disconnected_cb+0xb4>)
    a3b8:	429a      	cmp	r2, r3
{
    a3ba:	b085      	sub	sp, #20
    a3bc:	4681      	mov	r9, r0
    a3be:	460f      	mov	r7, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a3c0:	d110      	bne.n	a3e4 <disconnected_cb+0x34>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    a3c2:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    a3c4:	892b      	ldrh	r3, [r5, #8]
    a3c6:	b16b      	cbz	r3, a3e4 <disconnected_cb+0x34>
	}

	/* Checking if all values are disabled */
	value_used = false;

	for (i = 0; i < ccc->cfg_len; i++) {
    a3c8:	2600      	movs	r6, #0
	value_used = false;
    a3ca:	4634      	mov	r4, r6

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a3cc:	f101 0b48 	add.w	fp, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    a3d0:	686b      	ldr	r3, [r5, #4]
    a3d2:	429e      	cmp	r6, r3
    a3d4:	d30a      	bcc.n	a3ec <disconnected_cb+0x3c>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    a3d6:	b92c      	cbnz	r4, a3e4 <disconnected_cb+0x34>
		ccc->value = 0;
		if (ccc->cfg_changed) {
    a3d8:	68eb      	ldr	r3, [r5, #12]
		ccc->value = 0;
    a3da:	812c      	strh	r4, [r5, #8]
		if (ccc->cfg_changed) {
    a3dc:	b113      	cbz	r3, a3e4 <disconnected_cb+0x34>
			ccc->cfg_changed(attr, ccc->value);
    a3de:	4621      	mov	r1, r4
    a3e0:	4648      	mov	r0, r9
    a3e2:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    a3e4:	2001      	movs	r0, #1
    a3e6:	b005      	add	sp, #20
    a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    a3ec:	682a      	ldr	r2, [r5, #0]
    a3ee:	0133      	lsls	r3, r6, #4
    a3f0:	eb02 0a03 	add.w	sl, r2, r3
		if (!cfg->value) {
    a3f4:	f8ba 1008 	ldrh.w	r1, [sl, #8]
    a3f8:	b151      	cbz	r1, a410 <disconnected_cb+0x60>
		if (conn->id != cfg->id ||
    a3fa:	7a38      	ldrb	r0, [r7, #8]
    a3fc:	5cd1      	ldrb	r1, [r2, r3]
    a3fe:	4288      	cmp	r0, r1
    a400:	f10a 0801 	add.w	r8, sl, #1
    a404:	d006      	beq.n	a414 <disconnected_cb+0x64>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a406:	4641      	mov	r1, r8
    a408:	5cd0      	ldrb	r0, [r2, r3]
    a40a:	f7fe fdb7 	bl	8f7c <bt_conn_lookup_addr_le>
			if (tmp) {
    a40e:	b9e0      	cbnz	r0, a44a <disconnected_cb+0x9a>
	for (i = 0; i < ccc->cfg_len; i++) {
    a410:	3601      	adds	r6, #1
    a412:	e7dd      	b.n	a3d0 <disconnected_cb+0x20>
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    a414:	4641      	mov	r1, r8
    a416:	4638      	mov	r0, r7
    a418:	e9cd 3200 	strd	r3, r2, [sp]
    a41c:	f015 fb73 	bl	1fb06 <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    a420:	e9dd 3200 	ldrd	r3, r2, [sp]
    a424:	2800      	cmp	r0, #0
    a426:	d1ee      	bne.n	a406 <disconnected_cb+0x56>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a428:	4659      	mov	r1, fp
    a42a:	7a38      	ldrb	r0, [r7, #8]
    a42c:	f015 fb17 	bl	1fa5e <bt_addr_le_is_bonded>
    a430:	b990      	cbnz	r0, a458 <disconnected_cb+0xa8>
				bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    a432:	9002      	str	r0, [sp, #8]
    a434:	9000      	str	r0, [sp, #0]
    a436:	f8cd 000b 	str.w	r0, [sp, #11]
    a43a:	a902      	add	r1, sp, #8
    a43c:	4640      	mov	r0, r8
    a43e:	f015 ffa5 	bl	2038c <bt_addr_le_copy>
				cfg->value = 0;
    a442:	9b00      	ldr	r3, [sp, #0]
    a444:	f8aa 3008 	strh.w	r3, [sl, #8]
    a448:	e7e2      	b.n	a410 <disconnected_cb+0x60>
				if (tmp->state == BT_CONN_CONNECTED) {
    a44a:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
    a44c:	2b04      	cmp	r3, #4
    a44e:	bf08      	it	eq
    a450:	2401      	moveq	r4, #1
				bt_conn_unref(tmp);
    a452:	f015 fb77 	bl	1fb44 <bt_conn_unref>
    a456:	e7db      	b.n	a410 <disconnected_cb+0x60>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a458:	4659      	mov	r1, fp
    a45a:	4640      	mov	r0, r8
    a45c:	f015 ff96 	bl	2038c <bt_addr_le_copy>
    a460:	e7d6      	b.n	a410 <disconnected_cb+0x60>
    a462:	bf00      	nop
    a464:	0000a8fd 	.word	0x0000a8fd

0000a468 <gatt_register>:
Z_GENLIST_IS_EMPTY(slist)
    a468:	4a1e      	ldr	r2, [pc, #120]	; (a4e4 <gatt_register+0x7c>)
	if (sys_slist_is_empty(&db)) {
    a46a:	6813      	ldr	r3, [r2, #0]
{
    a46c:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_attr *attrs = svc->attrs;
    a46e:	6805      	ldr	r5, [r0, #0]
	u16_t count = svc->attr_count;
    a470:	8884      	ldrh	r4, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    a472:	b143      	cbz	r3, a486 <gatt_register+0x1e>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    a474:	6853      	ldr	r3, [r2, #4]
    a476:	b393      	cbz	r3, a4de <gatt_register+0x76>
	handle = last->attrs[last->attr_count - 1].handle;
    a478:	e953 3102 	ldrd	r3, r1, [r3, #-8]
    a47c:	2614      	movs	r6, #20
    a47e:	fb06 3301 	mla	r3, r6, r1, r3
    a482:	f833 3c04 	ldrh.w	r3, [r3, #-4]
	for (; attrs && count; attrs++, count--) {
    a486:	b105      	cbz	r5, a48a <gatt_register+0x22>
    a488:	b944      	cbnz	r4, a49c <gatt_register+0x34>
	parent->next = child;
    a48a:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    a48c:	f100 0108 	add.w	r1, r0, #8
    a490:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    a492:	6850      	ldr	r0, [r2, #4]
    a494:	b9f8      	cbnz	r0, a4d6 <gatt_register+0x6e>
	list->head = node;
    a496:	e9c2 1100 	strd	r1, r1, [r2]
    a49a:	e01b      	b.n	a4d4 <gatt_register+0x6c>
		if (!attrs->handle) {
    a49c:	8a29      	ldrh	r1, [r5, #16]
    a49e:	b939      	cbnz	r1, a4b0 <gatt_register+0x48>
			attrs->handle = ++handle;
    a4a0:	3301      	adds	r3, #1
    a4a2:	b299      	uxth	r1, r3
    a4a4:	8229      	strh	r1, [r5, #16]
	for (; attrs && count; attrs++, count--) {
    a4a6:	3c01      	subs	r4, #1
    a4a8:	3514      	adds	r5, #20
    a4aa:	b2a4      	uxth	r4, r4
    a4ac:	460b      	mov	r3, r1
    a4ae:	e7ea      	b.n	a486 <gatt_register+0x1e>
		} else if (attrs->handle > handle) {
    a4b0:	4299      	cmp	r1, r3
    a4b2:	d8f8      	bhi.n	a4a6 <gatt_register+0x3e>
			BT_ERR("Unable to register handle 0x%04x",
    a4b4:	2301      	movs	r3, #1
    a4b6:	f04f 0200 	mov.w	r2, #0
    a4ba:	f363 0207 	bfi	r2, r3, #0, #8
    a4be:	480a      	ldr	r0, [pc, #40]	; (a4e8 <gatt_register+0x80>)
    a4c0:	4b0a      	ldr	r3, [pc, #40]	; (a4ec <gatt_register+0x84>)
    a4c2:	1a1b      	subs	r3, r3, r0
    a4c4:	08db      	lsrs	r3, r3, #3
    a4c6:	480a      	ldr	r0, [pc, #40]	; (a4f0 <gatt_register+0x88>)
    a4c8:	f363 128f 	bfi	r2, r3, #6, #10
    a4cc:	f013 ffc6 	bl	1e45c <log_1>
			return -EINVAL;
    a4d0:	f06f 0015 	mvn.w	r0, #21
}
    a4d4:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    a4d6:	6001      	str	r1, [r0, #0]
	list->tail = node;
    a4d8:	6051      	str	r1, [r2, #4]
	return 0;
    a4da:	4618      	mov	r0, r3
    a4dc:	e7fa      	b.n	a4d4 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    a4de:	681b      	ldr	r3, [r3, #0]
    a4e0:	deff      	udf	#255	; 0xff
    a4e2:	bf00      	nop
    a4e4:	20000820 	.word	0x20000820
    a4e8:	000233ec 	.word	0x000233ec
    a4ec:	00023454 	.word	0x00023454
    a4f0:	000257f5 	.word	0x000257f5

0000a4f4 <gatt_indicate>:
{
    a4f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    a4f8:	694b      	ldr	r3, [r1, #20]
{
    a4fa:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    a4fc:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    a4fe:	6818      	ldr	r0, [r3, #0]
    a500:	2300      	movs	r3, #0
{
    a502:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    a504:	f88d 3004 	strb.w	r3, [sp, #4]
    a508:	a901      	add	r1, sp, #4
    a50a:	f642 0303 	movw	r3, #10243	; 0x2803
    a50e:	f8ad 3006 	strh.w	r3, [sp, #6]
    a512:	f015 f9c5 	bl	1f8a0 <bt_uuid_cmp>
    a516:	b930      	cbnz	r0, a526 <gatt_indicate+0x32>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    a518:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    a51a:	68db      	ldr	r3, [r3, #12]
    a51c:	791b      	ldrb	r3, [r3, #4]
    a51e:	069b      	lsls	r3, r3, #26
    a520:	d54e      	bpl.n	a5c0 <gatt_indicate+0xcc>
		value_handle += 1;
    a522:	3501      	adds	r5, #1
    a524:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    a526:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a528:	211d      	movs	r1, #29
    a52a:	3202      	adds	r2, #2
    a52c:	4648      	mov	r0, r9
    a52e:	f7ff fa09 	bl	9944 <bt_att_create_pdu>
	if (!buf) {
    a532:	4606      	mov	r6, r0
    a534:	b998      	cbnz	r0, a55e <gatt_indicate+0x6a>
		BT_WARN("No buffer available to send indication");
    a536:	2302      	movs	r3, #2
    a538:	f04f 0100 	mov.w	r1, #0
    a53c:	f363 0107 	bfi	r1, r3, #0, #8
    a540:	4a21      	ldr	r2, [pc, #132]	; (a5c8 <gatt_indicate+0xd4>)
    a542:	4b22      	ldr	r3, [pc, #136]	; (a5cc <gatt_indicate+0xd8>)
    a544:	4822      	ldr	r0, [pc, #136]	; (a5d0 <gatt_indicate+0xdc>)
    a546:	1a9b      	subs	r3, r3, r2
    a548:	08db      	lsrs	r3, r3, #3
    a54a:	f363 118f 	bfi	r1, r3, #6, #10
    a54e:	f013 ff78 	bl	1e442 <log_0>
		return -ENOMEM;
    a552:	f06f 040b 	mvn.w	r4, #11
}
    a556:	4620      	mov	r0, r4
    a558:	b003      	add	sp, #12
    a55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    a55e:	f100 0708 	add.w	r7, r0, #8
    a562:	2102      	movs	r1, #2
    a564:	4638      	mov	r0, r7
    a566:	f018 f810 	bl	2258a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    a56a:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    a56c:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    a56e:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    a572:	4638      	mov	r0, r7
    a574:	f018 f809 	bl	2258a <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a578:	8c22      	ldrh	r2, [r4, #32]
    a57a:	69e1      	ldr	r1, [r4, #28]
    a57c:	4640      	mov	r0, r8
    a57e:	f015 f843 	bl	1f608 <memcpy>
		req->func = func;
    a582:	4b14      	ldr	r3, [pc, #80]	; (a5d4 <gatt_indicate+0xe0>)
    a584:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    a586:	2300      	movs	r3, #0
		req->buf = buf;
    a588:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    a58a:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    a58c:	4621      	mov	r1, r4
    a58e:	4648      	mov	r0, r9
    a590:	f015 fead 	bl	202ee <bt_att_req_send>
	if (err) {
    a594:	4604      	mov	r4, r0
    a596:	2800      	cmp	r0, #0
    a598:	d0dd      	beq.n	a556 <gatt_indicate+0x62>
		BT_ERR("Error sending ATT PDU: %d", err);
    a59a:	2301      	movs	r3, #1
    a59c:	f04f 0200 	mov.w	r2, #0
    a5a0:	f363 0207 	bfi	r2, r3, #0, #8
    a5a4:	4908      	ldr	r1, [pc, #32]	; (a5c8 <gatt_indicate+0xd4>)
    a5a6:	4b09      	ldr	r3, [pc, #36]	; (a5cc <gatt_indicate+0xd8>)
    a5a8:	1a5b      	subs	r3, r3, r1
    a5aa:	08db      	lsrs	r3, r3, #3
    a5ac:	4601      	mov	r1, r0
    a5ae:	f363 128f 	bfi	r2, r3, #6, #10
    a5b2:	4809      	ldr	r0, [pc, #36]	; (a5d8 <gatt_indicate+0xe4>)
    a5b4:	f013 ff52 	bl	1e45c <log_1>
		net_buf_unref(buf);
    a5b8:	4630      	mov	r0, r6
    a5ba:	f010 fb3b 	bl	1ac34 <net_buf_unref>
    a5be:	e7ca      	b.n	a556 <gatt_indicate+0x62>
			return -EINVAL;
    a5c0:	f06f 0415 	mvn.w	r4, #21
    a5c4:	e7c7      	b.n	a556 <gatt_indicate+0x62>
    a5c6:	bf00      	nop
    a5c8:	000233ec 	.word	0x000233ec
    a5cc:	00023454 	.word	0x00023454
    a5d0:	0002578b 	.word	0x0002578b
    a5d4:	0002036b 	.word	0x0002036b
    a5d8:	000257b2 	.word	0x000257b2

0000a5dc <ccc_save>:
	struct ccc_store store[CCC_STORE_MAX];
	size_t count;
};

static u8_t ccc_save(const struct bt_gatt_attr *attr, void *user_data)
{
    a5dc:	b538      	push	{r3, r4, r5, lr}
	struct ccc_save *save = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a5de:	6882      	ldr	r2, [r0, #8]
    a5e0:	4b0b      	ldr	r3, [pc, #44]	; (a610 <ccc_save+0x34>)
    a5e2:	429a      	cmp	r2, r3
{
    a5e4:	4605      	mov	r5, r0
    a5e6:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a5e8:	d10f      	bne.n	a60a <ccc_save+0x2e>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, save->addr);
    a5ea:	6809      	ldr	r1, [r1, #0]
    a5ec:	68c0      	ldr	r0, [r0, #12]
    a5ee:	f015 ff32 	bl	20456 <ccc_find_cfg>
	if (!cfg) {
    a5f2:	b150      	cbz	r0, a60a <ccc_save+0x2e>
	}

	BT_DBG("Storing CCCs handle 0x%04x value 0x%04x", attr->handle,
	       cfg->value);

	save->store[save->count].handle = attr->handle;
    a5f4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    a5f8:	8a29      	ldrh	r1, [r5, #16]
    a5fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->store[save->count].value = cfg->value;
	save->count++;
    a5fe:	3301      	adds	r3, #1
	save->store[save->count].handle = attr->handle;
    a600:	8091      	strh	r1, [r2, #4]
	save->store[save->count].value = cfg->value;
    a602:	8901      	ldrh	r1, [r0, #8]
    a604:	80d1      	strh	r1, [r2, #6]
	save->count++;
    a606:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	return BT_GATT_ITER_CONTINUE;
}
    a60a:	2001      	movs	r0, #1
    a60c:	bd38      	pop	{r3, r4, r5, pc}
    a60e:	bf00      	nop
    a610:	0000a8fd 	.word	0x0000a8fd

0000a614 <ccc_load>:
	struct ccc_store *entry;
	size_t count;
};

static u8_t ccc_load(const struct bt_gatt_attr *attr, void *user_data)
{
    a614:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ccc_load *load = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a616:	6882      	ldr	r2, [r0, #8]
    a618:	4b23      	ldr	r3, [pc, #140]	; (a6a8 <ccc_load+0x94>)
    a61a:	429a      	cmp	r2, r3
{
    a61c:	b085      	sub	sp, #20
    a61e:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a620:	d002      	beq.n	a628 <ccc_load+0x14>
	ccc = attr->user_data;

	/* Clear if value was invalidade */
	if (!load->entry) {
		ccc_clear(ccc, &load->addr);
		return BT_GATT_ITER_CONTINUE;
    a622:	2001      	movs	r0, #1
next:
	load->entry++;
	load->count--;

	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
    a624:	b005      	add	sp, #20
    a626:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!load->entry) {
    a628:	688d      	ldr	r5, [r1, #8]
	ccc = attr->user_data;
    a62a:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    a62c:	b97d      	cbnz	r5, a64e <ccc_load+0x3a>
	cfg = ccc_find_cfg(ccc, addr);
    a62e:	3101      	adds	r1, #1
    a630:	4630      	mov	r0, r6
    a632:	f015 ff10 	bl	20456 <ccc_find_cfg>
	if (!cfg) {
    a636:	4604      	mov	r4, r0
    a638:	2800      	cmp	r0, #0
    a63a:	d0f2      	beq.n	a622 <ccc_load+0xe>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    a63c:	a902      	add	r1, sp, #8
    a63e:	3001      	adds	r0, #1
    a640:	9502      	str	r5, [sp, #8]
    a642:	f8cd 500b 	str.w	r5, [sp, #11]
    a646:	f015 fea1 	bl	2038c <bt_addr_le_copy>
	cfg->value = 0;
    a64a:	8125      	strh	r5, [r4, #8]
    a64c:	e7e9      	b.n	a622 <ccc_load+0xe>
	} else if (!load->count) {
    a64e:	68cb      	ldr	r3, [r1, #12]
    a650:	b33b      	cbz	r3, a6a2 <ccc_load+0x8e>
	if (load->entry->handle != attr->handle) {
    a652:	882a      	ldrh	r2, [r5, #0]
    a654:	8a03      	ldrh	r3, [r0, #16]
    a656:	429a      	cmp	r2, r3
    a658:	d00a      	beq.n	a670 <ccc_load+0x5c>
		if (load->entry->handle < attr->handle) {
    a65a:	d2e2      	bcs.n	a622 <ccc_load+0xe>
	load->count--;
    a65c:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    a65e:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    a660:	3801      	subs	r0, #1
	load->entry++;
    a662:	3304      	adds	r3, #4
	load->count--;
    a664:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a666:	3000      	adds	r0, #0
	load->entry++;
    a668:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a66a:	bf18      	it	ne
    a66c:	2001      	movne	r0, #1
    a66e:	e7d9      	b.n	a624 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, &load->addr);
    a670:	1c4f      	adds	r7, r1, #1
    a672:	4639      	mov	r1, r7
    a674:	4630      	mov	r0, r6
    a676:	f015 feee 	bl	20456 <ccc_find_cfg>
	if (!cfg) {
    a67a:	4605      	mov	r5, r0
    a67c:	b968      	cbnz	r0, a69a <ccc_load+0x86>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY);
    a67e:	9000      	str	r0, [sp, #0]
    a680:	4669      	mov	r1, sp
    a682:	f8cd 0003 	str.w	r0, [sp, #3]
    a686:	4630      	mov	r0, r6
    a688:	f015 fee5 	bl	20456 <ccc_find_cfg>
		if (!cfg) {
    a68c:	4605      	mov	r5, r0
    a68e:	2800      	cmp	r0, #0
    a690:	d0e4      	beq.n	a65c <ccc_load+0x48>
		bt_addr_le_copy(&cfg->peer, &load->addr);
    a692:	4639      	mov	r1, r7
    a694:	3001      	adds	r0, #1
    a696:	f015 fe79 	bl	2038c <bt_addr_le_copy>
	cfg->value = load->entry->value;
    a69a:	68a3      	ldr	r3, [r4, #8]
    a69c:	885b      	ldrh	r3, [r3, #2]
    a69e:	812b      	strh	r3, [r5, #8]
    a6a0:	e7dc      	b.n	a65c <ccc_load+0x48>
		return BT_GATT_ITER_STOP;
    a6a2:	4618      	mov	r0, r3
    a6a4:	e7be      	b.n	a624 <ccc_load+0x10>
    a6a6:	bf00      	nop
    a6a8:	0000a8fd 	.word	0x0000a8fd

0000a6ac <find_cf_cfg>:
{
    a6ac:	b507      	push	{r0, r1, r2, lr}
		if (!conn) {
    a6ae:	b960      	cbnz	r0, a6ca <find_cf_cfg+0x1e>
			if (!bt_addr_le_cmp(&cf_cfg[i].peer, BT_ADDR_LE_ANY)) {
    a6b0:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    a6b2:	2207      	movs	r2, #7
    a6b4:	f8cd 0003 	str.w	r0, [sp, #3]
    a6b8:	4669      	mov	r1, sp
    a6ba:	4807      	ldr	r0, [pc, #28]	; (a6d8 <find_cf_cfg+0x2c>)
    a6bc:	f014 ff7d 	bl	1f5ba <memcmp>
    a6c0:	b938      	cbnz	r0, a6d2 <find_cf_cfg+0x26>
				return &cf_cfg[i];
    a6c2:	4806      	ldr	r0, [pc, #24]	; (a6dc <find_cf_cfg+0x30>)
}
    a6c4:	b003      	add	sp, #12
    a6c6:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if (!bt_conn_addr_le_cmp(conn, &cf_cfg[i].peer)) {
    a6ca:	4903      	ldr	r1, [pc, #12]	; (a6d8 <find_cf_cfg+0x2c>)
    a6cc:	f015 fa1b 	bl	1fb06 <bt_conn_addr_le_cmp>
    a6d0:	e7f6      	b.n	a6c0 <find_cf_cfg+0x14>
	return NULL;
    a6d2:	2000      	movs	r0, #0
    a6d4:	e7f6      	b.n	a6c4 <find_cf_cfg+0x18>
    a6d6:	bf00      	nop
    a6d8:	20000811 	.word	0x20000811
    a6dc:	20000810 	.word	0x20000810

0000a6e0 <sc_indicate_rsp>:
{
    a6e0:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6e2:	4b13      	ldr	r3, [pc, #76]	; (a730 <sc_indicate_rsp+0x50>)
    a6e4:	f3bf 8f5b 	dmb	ish
    a6e8:	4604      	mov	r4, r0
    a6ea:	e853 2f00 	ldrex	r2, [r3]
    a6ee:	f022 0202 	bic.w	r2, r2, #2
    a6f2:	e843 2100 	strex	r1, r2, [r3]
    a6f6:	2900      	cmp	r1, #0
    a6f8:	d1f7      	bne.n	a6ea <sc_indicate_rsp+0xa>
    a6fa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a6fe:	2100      	movs	r1, #0
    a700:	4618      	mov	r0, r3
    a702:	f015 fe3a 	bl	2037a <atomic_test_bit>
    a706:	b128      	cbz	r0, a714 <sc_indicate_rsp+0x34>
    a708:	2200      	movs	r2, #0
    a70a:	f1a3 0120 	sub.w	r1, r3, #32
    a70e:	4809      	ldr	r0, [pc, #36]	; (a734 <sc_indicate_rsp+0x54>)
    a710:	f011 ff12 	bl	1c538 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    a714:	4620      	mov	r0, r4
    a716:	f7ff ffc9 	bl	a6ac <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    a71a:	b140      	cbz	r0, a72e <sc_indicate_rsp+0x4e>
    a71c:	7a03      	ldrb	r3, [r0, #8]
    a71e:	07db      	lsls	r3, r3, #31
    a720:	d505      	bpl.n	a72e <sc_indicate_rsp+0x4e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a722:	2100      	movs	r1, #0
    a724:	300c      	adds	r0, #12
}
    a726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a72a:	f015 be32 	b.w	20392 <atomic_set_bit>
}
    a72e:	bd10      	pop	{r4, pc}
    a730:	20000890 	.word	0x20000890
    a734:	20001c74 	.word	0x20001c74

0000a738 <cf_write>:
{
    a738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a73c:	4690      	mov	r8, r2
    a73e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    a742:	2a01      	cmp	r2, #1
{
    a744:	4606      	mov	r6, r0
    a746:	461f      	mov	r7, r3
	if (offset > sizeof(cfg->data)) {
    a748:	d844      	bhi.n	a7d4 <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
    a74a:	441a      	add	r2, r3
    a74c:	2a01      	cmp	r2, #1
    a74e:	461d      	mov	r5, r3
    a750:	dc43      	bgt.n	a7da <cf_write+0xa2>
	cfg = find_cf_cfg(conn);
    a752:	f7ff ffab 	bl	a6ac <find_cf_cfg>
	if (!cfg) {
    a756:	4604      	mov	r4, r0
    a758:	b9b0      	cbnz	r0, a788 <cf_write+0x50>
		cfg = find_cf_cfg(NULL);
    a75a:	f7ff ffa7 	bl	a6ac <find_cf_cfg>
	if (!cfg) {
    a75e:	4604      	mov	r4, r0
    a760:	b990      	cbnz	r0, a788 <cf_write+0x50>
		BT_WARN("No space to store Client Supported Features");
    a762:	2302      	movs	r3, #2
    a764:	f04f 0100 	mov.w	r1, #0
    a768:	f363 0107 	bfi	r1, r3, #0, #8
    a76c:	4a1c      	ldr	r2, [pc, #112]	; (a7e0 <cf_write+0xa8>)
    a76e:	4b1d      	ldr	r3, [pc, #116]	; (a7e4 <cf_write+0xac>)
    a770:	481d      	ldr	r0, [pc, #116]	; (a7e8 <cf_write+0xb0>)
    a772:	1a9b      	subs	r3, r3, r2
    a774:	08db      	lsrs	r3, r3, #3
    a776:	f363 118f 	bfi	r1, r3, #6, #10
    a77a:	f013 fe62 	bl	1e442 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a77e:	f06f 0510 	mvn.w	r5, #16
}
    a782:	4628      	mov	r0, r5
    a784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < len && i < last_byte; i++) {
    a788:	2300      	movs	r3, #0
    a78a:	429f      	cmp	r7, r3
    a78c:	d915      	bls.n	a7ba <cf_write+0x82>
    a78e:	b13b      	cbz	r3, a7a0 <cf_write+0x68>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
    a790:	f898 3000 	ldrb.w	r3, [r8]
    a794:	7a22      	ldrb	r2, [r4, #8]
    a796:	f003 0301 	and.w	r3, r3, #1
    a79a:	4313      	orrs	r3, r2
    a79c:	7223      	strb	r3, [r4, #8]
		BT_DBG("byte %u: data 0x%02x value 0x%02x", i, cfg->data[i],
    a79e:	e00e      	b.n	a7be <cf_write+0x86>
    a7a0:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
    a7a2:	f898 2000 	ldrb.w	r2, [r8]
    a7a6:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
    a7a8:	07d0      	lsls	r0, r2, #31
	for (i = 0; i < len && i < last_byte; i++) {
    a7aa:	f04f 0301 	mov.w	r3, #1
			if ((BIT(bit) & chg_bits) &&
    a7ae:	d5ec      	bpl.n	a78a <cf_write+0x52>
    a7b0:	07ca      	lsls	r2, r1, #31
    a7b2:	d5ea      	bpl.n	a78a <cf_write+0x52>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    a7b4:	f06f 0512 	mvn.w	r5, #18
    a7b8:	e7e3      	b.n	a782 <cf_write+0x4a>
	for (i = 0; i < len && i < last_byte; i++) {
    a7ba:	2f00      	cmp	r7, #0
    a7bc:	d1e8      	bne.n	a790 <cf_write+0x58>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a7be:	f106 0148 	add.w	r1, r6, #72	; 0x48
    a7c2:	1c60      	adds	r0, r4, #1
    a7c4:	f015 fde2 	bl	2038c <bt_addr_le_copy>
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a7c8:	2100      	movs	r1, #0
    a7ca:	f104 000c 	add.w	r0, r4, #12
    a7ce:	f015 fde0 	bl	20392 <atomic_set_bit>
	return len;
    a7d2:	e7d6      	b.n	a782 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a7d4:	f06f 0506 	mvn.w	r5, #6
    a7d8:	e7d3      	b.n	a782 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a7da:	f06f 050c 	mvn.w	r5, #12
    a7de:	e7d0      	b.n	a782 <cf_write+0x4a>
    a7e0:	000233ec 	.word	0x000233ec
    a7e4:	00023454 	.word	0x00023454
    a7e8:	0002572d 	.word	0x0002572d

0000a7ec <cf_set>:
{
	struct gatt_cf_cfg *cfg;
	bt_addr_le_t addr;
	int len, err;

	if (argc < 1) {
    a7ec:	2800      	cmp	r0, #0
{
    a7ee:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    a7f2:	460d      	mov	r5, r1
    a7f4:	4617      	mov	r7, r2
	if (argc < 1) {
    a7f6:	dc13      	bgt.n	a820 <cf_set+0x34>
		BT_ERR("Insufficient number of arguments");
    a7f8:	2301      	movs	r3, #1
    a7fa:	f04f 0100 	mov.w	r1, #0
    a7fe:	f363 0107 	bfi	r1, r3, #0, #8
    a802:	4a36      	ldr	r2, [pc, #216]	; (a8dc <cf_set+0xf0>)
    a804:	4b36      	ldr	r3, [pc, #216]	; (a8e0 <cf_set+0xf4>)
    a806:	4837      	ldr	r0, [pc, #220]	; (a8e4 <cf_set+0xf8>)
    a808:	1a9b      	subs	r3, r3, r2
    a80a:	08db      	lsrs	r3, r3, #3
    a80c:	f363 118f 	bfi	r1, r3, #6, #10
    a810:	f013 fe17 	bl	1e442 <log_0>
	}

	err = bt_settings_decode_key(argv[0], &addr);
	if (err) {
		BT_ERR("Unable to decode address %s", argv[0]);
		return -EINVAL;
    a814:	f06f 0415 	mvn.w	r4, #21
	}

	BT_DBG("Restored CF for %s", bt_addr_le_str(&addr));

	return 0;
}
    a818:	4620      	mov	r0, r4
    a81a:	b004      	add	sp, #16
    a81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(argv[0], &addr);
    a820:	4669      	mov	r1, sp
    a822:	6828      	ldr	r0, [r5, #0]
    a824:	f015 f809 	bl	1f83a <bt_settings_decode_key>
	if (err) {
    a828:	4604      	mov	r4, r0
    a82a:	b178      	cbz	r0, a84c <cf_set+0x60>
		BT_ERR("Unable to decode address %s", argv[0]);
    a82c:	2301      	movs	r3, #1
    a82e:	f04f 0200 	mov.w	r2, #0
    a832:	f363 0207 	bfi	r2, r3, #0, #8
    a836:	4929      	ldr	r1, [pc, #164]	; (a8dc <cf_set+0xf0>)
    a838:	4b29      	ldr	r3, [pc, #164]	; (a8e0 <cf_set+0xf4>)
    a83a:	482b      	ldr	r0, [pc, #172]	; (a8e8 <cf_set+0xfc>)
    a83c:	1a5b      	subs	r3, r3, r1
    a83e:	08db      	lsrs	r3, r3, #3
    a840:	f363 128f 	bfi	r2, r3, #6, #10
    a844:	6829      	ldr	r1, [r5, #0]
    a846:	f013 fe09 	bl	1e45c <log_1>
    a84a:	e7e3      	b.n	a814 <cf_set+0x28>
    a84c:	2207      	movs	r2, #7
    a84e:	4927      	ldr	r1, [pc, #156]	; (a8ec <cf_set+0x100>)
    a850:	4668      	mov	r0, sp
    a852:	f014 feb2 	bl	1f5ba <memcmp>
		if (!bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
    a856:	b198      	cbz	r0, a880 <cf_set+0x94>
		cfg = find_cf_cfg(NULL);
    a858:	4620      	mov	r0, r4
    a85a:	f7ff ff27 	bl	a6ac <find_cf_cfg>
		if (!cfg) {
    a85e:	4605      	mov	r5, r0
    a860:	b978      	cbnz	r0, a882 <cf_set+0x96>
			BT_ERR("Unable to restore CF: no cfg left");
    a862:	2301      	movs	r3, #1
    a864:	f04f 0100 	mov.w	r1, #0
    a868:	f363 0107 	bfi	r1, r3, #0, #8
    a86c:	4a1b      	ldr	r2, [pc, #108]	; (a8dc <cf_set+0xf0>)
    a86e:	4b1c      	ldr	r3, [pc, #112]	; (a8e0 <cf_set+0xf4>)
    a870:	481f      	ldr	r0, [pc, #124]	; (a8f0 <cf_set+0x104>)
    a872:	1a9b      	subs	r3, r3, r2
    a874:	08db      	lsrs	r3, r3, #3
    a876:	f363 118f 	bfi	r1, r3, #6, #10
    a87a:	f013 fde2 	bl	1e442 <log_0>
			return 0;
    a87e:	e7cb      	b.n	a818 <cf_set+0x2c>
			return &cf_cfg[i];
    a880:	4d1c      	ldr	r5, [pc, #112]	; (a8f4 <cf_set+0x108>)
	if (settings_val_get_len_cb(val_ctx)) {
    a882:	4638      	mov	r0, r7
    a884:	f014 fd4e 	bl	1f324 <settings_val_get_len_cb>
    a888:	f105 0808 	add.w	r8, r5, #8
    a88c:	4606      	mov	r6, r0
    a88e:	b1b8      	cbz	r0, a8c0 <cf_set+0xd4>
		len = settings_val_read_cb(val_ctx, cfg->data,
    a890:	2201      	movs	r2, #1
    a892:	4641      	mov	r1, r8
    a894:	4638      	mov	r0, r7
    a896:	f014 fd28 	bl	1f2ea <settings_val_read_cb>
		if (len < 0) {
    a89a:	1e05      	subs	r5, r0, #0
    a89c:	dabc      	bge.n	a818 <cf_set+0x2c>
			BT_ERR("Failed to decode value (err %d)", len);
    a89e:	2301      	movs	r3, #1
    a8a0:	f04f 0200 	mov.w	r2, #0
    a8a4:	f363 0207 	bfi	r2, r3, #0, #8
    a8a8:	490c      	ldr	r1, [pc, #48]	; (a8dc <cf_set+0xf0>)
    a8aa:	4b0d      	ldr	r3, [pc, #52]	; (a8e0 <cf_set+0xf4>)
    a8ac:	4812      	ldr	r0, [pc, #72]	; (a8f8 <cf_set+0x10c>)
    a8ae:	1a5b      	subs	r3, r3, r1
    a8b0:	08db      	lsrs	r3, r3, #3
    a8b2:	f363 128f 	bfi	r2, r3, #6, #10
    a8b6:	4629      	mov	r1, r5
    a8b8:	f013 fdd0 	bl	1e45c <log_1>
			return len;
    a8bc:	462c      	mov	r4, r5
    a8be:	e7ab      	b.n	a818 <cf_set+0x2c>
		bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    a8c0:	9002      	str	r0, [sp, #8]
    a8c2:	a902      	add	r1, sp, #8
    a8c4:	f8cd 000b 	str.w	r0, [sp, #11]
    a8c8:	1c68      	adds	r0, r5, #1
    a8ca:	f015 fd5f 	bl	2038c <bt_addr_le_copy>
		memset(cfg->data, 0, sizeof(cfg->data));
    a8ce:	2201      	movs	r2, #1
    a8d0:	4631      	mov	r1, r6
    a8d2:	4640      	mov	r0, r8
    a8d4:	f014 fec2 	bl	1f65c <memset>
    a8d8:	e79e      	b.n	a818 <cf_set+0x2c>
    a8da:	bf00      	nop
    a8dc:	000233ec 	.word	0x000233ec
    a8e0:	00023454 	.word	0x00023454
    a8e4:	000256ae 	.word	0x000256ae
    a8e8:	000256cf 	.word	0x000256cf
    a8ec:	20000811 	.word	0x20000811
    a8f0:	000256eb 	.word	0x000256eb
    a8f4:	20000810 	.word	0x20000810
    a8f8:	0002570d 	.word	0x0002570d

0000a8fc <bt_gatt_attr_write_ccc>:
{
    a8fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a900:	4688      	mov	r8, r1
    a902:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a906:	f8d8 700c 	ldr.w	r7, [r8, #12]
	if (offset > sizeof(u16_t)) {
    a90a:	2902      	cmp	r1, #2
{
    a90c:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    a90e:	d849      	bhi.n	a9a4 <bt_gatt_attr_write_ccc+0xa8>
	if (offset + len > sizeof(u16_t)) {
    a910:	4419      	add	r1, r3
    a912:	2902      	cmp	r1, #2
    a914:	461d      	mov	r5, r3
    a916:	dc48      	bgt.n	a9aa <bt_gatt_attr_write_ccc+0xae>
	return ((u16_t)src[1] << 8) | src[0];
    a918:	7853      	ldrb	r3, [r2, #1]
    a91a:	7814      	ldrb	r4, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
    a91c:	4639      	mov	r1, r7
    a91e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    a922:	f015 fdaf 	bl	20484 <find_ccc_cfg>
	if (!cfg) {
    a926:	4606      	mov	r6, r0
    a928:	b9f0      	cbnz	r0, a968 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
    a92a:	b1a4      	cbz	r4, a956 <bt_gatt_attr_write_ccc+0x5a>
		cfg = find_ccc_cfg(NULL, ccc);
    a92c:	4639      	mov	r1, r7
    a92e:	f015 fda9 	bl	20484 <find_ccc_cfg>
		if (!cfg) {
    a932:	4606      	mov	r6, r0
    a934:	b998      	cbnz	r0, a95e <bt_gatt_attr_write_ccc+0x62>
			BT_WARN("No space to store CCC cfg");
    a936:	2302      	movs	r3, #2
    a938:	f04f 0100 	mov.w	r1, #0
    a93c:	f363 0107 	bfi	r1, r3, #0, #8
    a940:	4a1b      	ldr	r2, [pc, #108]	; (a9b0 <bt_gatt_attr_write_ccc+0xb4>)
    a942:	4b1c      	ldr	r3, [pc, #112]	; (a9b4 <bt_gatt_attr_write_ccc+0xb8>)
    a944:	481c      	ldr	r0, [pc, #112]	; (a9b8 <bt_gatt_attr_write_ccc+0xbc>)
    a946:	1a9b      	subs	r3, r3, r2
    a948:	08db      	lsrs	r3, r3, #3
    a94a:	f363 118f 	bfi	r1, r3, #6, #10
    a94e:	f013 fd78 	bl	1e442 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a952:	f06f 0510 	mvn.w	r5, #16
}
    a956:	4628      	mov	r0, r5
    a958:	b003      	add	sp, #12
    a95a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a95e:	f109 0148 	add.w	r1, r9, #72	; 0x48
    a962:	3001      	adds	r0, #1
    a964:	f015 fd12 	bl	2038c <bt_addr_le_copy>
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
    a968:	693b      	ldr	r3, [r7, #16]
    a96a:	b993      	cbnz	r3, a992 <bt_gatt_attr_write_ccc+0x96>
	if (cfg->value != ccc->value) {
    a96c:	893b      	ldrh	r3, [r7, #8]
	cfg->value = value;
    a96e:	8134      	strh	r4, [r6, #8]
	if (cfg->value != ccc->value) {
    a970:	42a3      	cmp	r3, r4
    a972:	d003      	beq.n	a97c <bt_gatt_attr_write_ccc+0x80>
		gatt_ccc_changed(attr, ccc);
    a974:	4639      	mov	r1, r7
    a976:	4640      	mov	r0, r8
    a978:	f015 fcdd 	bl	20336 <gatt_ccc_changed>
	if (!value) {
    a97c:	2c00      	cmp	r4, #0
    a97e:	d1ea      	bne.n	a956 <bt_gatt_attr_write_ccc+0x5a>
		bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    a980:	4669      	mov	r1, sp
    a982:	1c70      	adds	r0, r6, #1
    a984:	9400      	str	r4, [sp, #0]
    a986:	f8cd 4003 	str.w	r4, [sp, #3]
    a98a:	f015 fcff 	bl	2038c <bt_addr_le_copy>
		cfg->value = 0;
    a98e:	8134      	strh	r4, [r6, #8]
    a990:	e7e1      	b.n	a956 <bt_gatt_attr_write_ccc+0x5a>
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
    a992:	4622      	mov	r2, r4
    a994:	4641      	mov	r1, r8
    a996:	4648      	mov	r0, r9
    a998:	4798      	blx	r3
    a99a:	2800      	cmp	r0, #0
    a99c:	d1e6      	bne.n	a96c <bt_gatt_attr_write_ccc+0x70>
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_NOT_PERMITTED);
    a99e:	f06f 0502 	mvn.w	r5, #2
    a9a2:	e7d8      	b.n	a956 <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a9a4:	f06f 0506 	mvn.w	r5, #6
    a9a8:	e7d5      	b.n	a956 <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a9aa:	f06f 050c 	mvn.w	r5, #12
    a9ae:	e7d2      	b.n	a956 <bt_gatt_attr_write_ccc+0x5a>
    a9b0:	000233ec 	.word	0x000233ec
    a9b4:	00023454 	.word	0x00023454
    a9b8:	00025646 	.word	0x00025646

0000a9bc <db_changed>:
{
    a9bc:	b513      	push	{r0, r1, r4, lr}
    a9be:	4c11      	ldr	r4, [pc, #68]	; (aa04 <db_changed+0x48>)
    a9c0:	4911      	ldr	r1, [pc, #68]	; (aa08 <db_changed+0x4c>)
    a9c2:	4812      	ldr	r0, [pc, #72]	; (aa0c <db_changed+0x50>)
    a9c4:	220a      	movs	r2, #10
    a9c6:	f011 fdb7 	bl	1c538 <k_delayed_work_submit_to_queue>
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a9ca:	2300      	movs	r3, #0
    a9cc:	2207      	movs	r2, #7
    a9ce:	4669      	mov	r1, sp
    a9d0:	1c60      	adds	r0, r4, #1
    a9d2:	9300      	str	r3, [sp, #0]
    a9d4:	f8cd 3003 	str.w	r3, [sp, #3]
    a9d8:	f014 fdef 	bl	1f5ba <memcmp>
    a9dc:	b178      	cbz	r0, a9fe <db_changed+0x42>
		if (CF_ROBUST_CACHING(cfg) &&
    a9de:	7a23      	ldrb	r3, [r4, #8]
    a9e0:	07db      	lsls	r3, r3, #31
    a9e2:	d50c      	bpl.n	a9fe <db_changed+0x42>
    a9e4:	f3bf 8f5b 	dmb	ish
    a9e8:	340c      	adds	r4, #12
    a9ea:	e854 3f00 	ldrex	r3, [r4]
    a9ee:	f023 0301 	bic.w	r3, r3, #1
    a9f2:	e844 3200 	strex	r2, r3, [r4]
    a9f6:	2a00      	cmp	r2, #0
    a9f8:	d1f7      	bne.n	a9ea <db_changed+0x2e>
    a9fa:	f3bf 8f5b 	dmb	ish
}
    a9fe:	b002      	add	sp, #8
    aa00:	bd10      	pop	{r4, pc}
    aa02:	bf00      	nop
    aa04:	20000810 	.word	0x20000810
    aa08:	20000828 	.word	0x20000828
    aa0c:	20001c74 	.word	0x20001c74

0000aa10 <read_ppcp>:
{
    aa10:	b513      	push	{r0, r1, r4, lr}
    aa12:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    aa16:	4c0b      	ldr	r4, [pc, #44]	; (aa44 <read_ppcp+0x34>)
{
    aa18:	4610      	mov	r0, r2
	if (offset > value_len) {
    aa1a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    aa1c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    aa20:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    aa24:	d80b      	bhi.n	aa3e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    aa26:	f1c1 0408 	rsb	r4, r1, #8
    aa2a:	429c      	cmp	r4, r3
    aa2c:	bfa8      	it	ge
    aa2e:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    aa30:	4622      	mov	r2, r4
    aa32:	4469      	add	r1, sp
    aa34:	f014 fde8 	bl	1f608 <memcpy>
}
    aa38:	4620      	mov	r0, r4
    aa3a:	b002      	add	sp, #8
    aa3c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    aa3e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    aa42:	e7f9      	b.n	aa38 <read_ppcp+0x28>
    aa44:	00280018 	.word	0x00280018

0000aa48 <sc_indicate.constprop.22>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    aa48:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aa4a:	4a17      	ldr	r2, [pc, #92]	; (aaa8 <sc_indicate.constprop.22+0x60>)
    aa4c:	f3bf 8f5b 	dmb	ish
    aa50:	f102 0348 	add.w	r3, r2, #72	; 0x48
    aa54:	e853 4f00 	ldrex	r4, [r3]
    aa58:	f044 0c01 	orr.w	ip, r4, #1
    aa5c:	e843 ce00 	strex	lr, ip, [r3]
    aa60:	f1be 0f00 	cmp.w	lr, #0
    aa64:	d1f6      	bne.n	aa54 <sc_indicate.constprop.22+0xc>
    aa66:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    aa6a:	f014 0f01 	tst.w	r4, #1
    aa6e:	4613      	mov	r3, r2
    aa70:	d10d      	bne.n	aa8e <sc_indicate.constprop.22+0x46>
		sc->start = start;
    aa72:	8490      	strh	r0, [r2, #36]	; 0x24
		sc->end = end;
    aa74:	84d1      	strh	r1, [r2, #38]	; 0x26
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    aa76:	2101      	movs	r1, #1
    aa78:	480c      	ldr	r0, [pc, #48]	; (aaac <sc_indicate.constprop.22+0x64>)
    aa7a:	f015 fc7e 	bl	2037a <atomic_test_bit>
    aa7e:	b990      	cbnz	r0, aaa6 <sc_indicate.constprop.22+0x5e>
    aa80:	220a      	movs	r2, #10
    aa82:	490b      	ldr	r1, [pc, #44]	; (aab0 <sc_indicate.constprop.22+0x68>)
    aa84:	480b      	ldr	r0, [pc, #44]	; (aab4 <sc_indicate.constprop.22+0x6c>)
}
    aa86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa8a:	f011 bd55 	b.w	1c538 <k_delayed_work_submit_to_queue>
	if (new_start >= *start && new_end <= *end) {
    aa8e:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    aa90:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
    aa92:	4284      	cmp	r4, r0
    aa94:	d803      	bhi.n	aa9e <sc_indicate.constprop.22+0x56>
    aa96:	428a      	cmp	r2, r1
    aa98:	d205      	bcs.n	aaa6 <sc_indicate.constprop.22+0x5e>
		*end = new_end;
    aa9a:	84d9      	strh	r1, [r3, #38]	; 0x26
    aa9c:	e7eb      	b.n	aa76 <sc_indicate.constprop.22+0x2e>
	if (*end < new_end) {
    aa9e:	428a      	cmp	r2, r1
		*start = new_start;
    aaa0:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    aaa2:	d2e8      	bcs.n	aa76 <sc_indicate.constprop.22+0x2e>
    aaa4:	e7f9      	b.n	aa9a <sc_indicate.constprop.22+0x52>
}
    aaa6:	bd10      	pop	{r4, pc}
    aaa8:	20000848 	.word	0x20000848
    aaac:	20000890 	.word	0x20000890
    aab0:	20000870 	.word	0x20000870
    aab4:	20001c74 	.word	0x20001c74

0000aab8 <connected_cb>:
{
    aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    aabc:	6882      	ldr	r2, [r0, #8]
    aabe:	4b19      	ldr	r3, [pc, #100]	; (ab24 <connected_cb+0x6c>)
    aac0:	429a      	cmp	r2, r3
{
    aac2:	4607      	mov	r7, r0
    aac4:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    aac6:	d128      	bne.n	ab1a <connected_cb+0x62>
	ccc = attr->user_data;
    aac8:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    aaca:	2600      	movs	r6, #0
    aacc:	686b      	ldr	r3, [r5, #4]
    aace:	429e      	cmp	r6, r3
    aad0:	d223      	bcs.n	ab1a <connected_cb+0x62>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    aad2:	6829      	ldr	r1, [r5, #0]
    aad4:	ea4f 1806 	mov.w	r8, r6, lsl #4
    aad8:	4441      	add	r1, r8
    aada:	3101      	adds	r1, #1
    aadc:	4620      	mov	r0, r4
    aade:	f015 f812 	bl	1fb06 <bt_conn_addr_le_cmp>
    aae2:	4681      	mov	r9, r0
    aae4:	b9e0      	cbnz	r0, ab20 <connected_cb+0x68>
		if (ccc->cfg[i].value) {
    aae6:	682b      	ldr	r3, [r5, #0]
    aae8:	4443      	add	r3, r8
    aaea:	891b      	ldrh	r3, [r3, #8]
    aaec:	b1c3      	cbz	r3, ab20 <connected_cb+0x68>
			gatt_ccc_changed(attr, ccc);
    aaee:	4629      	mov	r1, r5
    aaf0:	4638      	mov	r0, r7
    aaf2:	f015 fc20 	bl	20336 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    aaf6:	682c      	ldr	r4, [r5, #0]
    aaf8:	4b0b      	ldr	r3, [pc, #44]	; (ab28 <connected_cb+0x70>)
    aafa:	429c      	cmp	r4, r3
    aafc:	d10d      	bne.n	ab1a <connected_cb+0x62>
				sc_restore(&ccc->cfg[i]);
    aafe:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    ab00:	89a0      	ldrh	r0, [r4, #12]
    ab02:	89e1      	ldrh	r1, [r4, #14]
    ab04:	ea50 0301 	orrs.w	r3, r0, r1
    ab08:	d007      	beq.n	ab1a <connected_cb+0x62>
	sc_indicate(&gatt_sc, data->start, data->end);
    ab0a:	f7ff ff9d 	bl	aa48 <sc_indicate.constprop.22>
	(void)memset(cfg->data, 0, sizeof(cfg->data));
    ab0e:	2204      	movs	r2, #4
    ab10:	4649      	mov	r1, r9
    ab12:	f104 000c 	add.w	r0, r4, #12
    ab16:	f014 fda1 	bl	1f65c <memset>
}
    ab1a:	2001      	movs	r0, #1
    ab1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    ab20:	3601      	adds	r6, #1
    ab22:	e7d3      	b.n	aacc <connected_cb+0x14>
    ab24:	0000a8fd 	.word	0x0000a8fd
    ab28:	20000898 	.word	0x20000898

0000ab2c <notify_cb>:
{
    ab2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab30:	b085      	sub	sp, #20
    ab32:	4607      	mov	r7, r0
    ab34:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    ab36:	2500      	movs	r5, #0
    ab38:	f642 1302 	movw	r3, #10498	; 0x2902
    ab3c:	a902      	add	r1, sp, #8
    ab3e:	6800      	ldr	r0, [r0, #0]
    ab40:	f88d 5008 	strb.w	r5, [sp, #8]
    ab44:	f8ad 300a 	strh.w	r3, [sp, #10]
    ab48:	f014 feaa 	bl	1f8a0 <bt_uuid_cmp>
    ab4c:	b178      	cbz	r0, ab6e <notify_cb+0x42>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    ab4e:	f642 0303 	movw	r3, #10243	; 0x2803
    ab52:	a903      	add	r1, sp, #12
    ab54:	6838      	ldr	r0, [r7, #0]
    ab56:	f88d 500c 	strb.w	r5, [sp, #12]
    ab5a:	f8ad 300e 	strh.w	r3, [sp, #14]
    ab5e:	f014 fe9f 	bl	1f8a0 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    ab62:	1b40      	subs	r0, r0, r5
    ab64:	bf18      	it	ne
    ab66:	2001      	movne	r0, #1
}
    ab68:	b005      	add	sp, #20
    ab6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    ab6e:	68ba      	ldr	r2, [r7, #8]
    ab70:	4b34      	ldr	r3, [pc, #208]	; (ac44 <notify_cb+0x118>)
    ab72:	429a      	cmp	r2, r3
    ab74:	d001      	beq.n	ab7a <notify_cb+0x4e>
		return BT_GATT_ITER_CONTINUE;
    ab76:	2001      	movs	r0, #1
    ab78:	e7f6      	b.n	ab68 <notify_cb+0x3c>
	ccc = attr->user_data;
    ab7a:	f8d7 800c 	ldr.w	r8, [r7, #12]
			if (ccc->cfg == sc_ccc_cfg) {
    ab7e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; ac48 <notify_cb+0x11c>
	for (i = 0; i < ccc->cfg_len; i++) {
    ab82:	4606      	mov	r6, r0
    ab84:	4682      	mov	sl, r0
    ab86:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ab8a:	429e      	cmp	r6, r3
    ab8c:	d2f3      	bcs.n	ab76 <notify_cb+0x4a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    ab8e:	f8d8 2000 	ldr.w	r2, [r8]
		if (cfg->value != data->type) {
    ab92:	88a1      	ldrh	r1, [r4, #4]
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    ab94:	0133      	lsls	r3, r6, #4
    ab96:	18d5      	adds	r5, r2, r3
		if (cfg->value != data->type) {
    ab98:	8928      	ldrh	r0, [r5, #8]
    ab9a:	4288      	cmp	r0, r1
    ab9c:	d117      	bne.n	abce <notify_cb+0xa2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    ab9e:	1c69      	adds	r1, r5, #1
    aba0:	5cd0      	ldrb	r0, [r2, r3]
    aba2:	f7fe f9eb 	bl	8f7c <bt_conn_lookup_addr_le>
		if (!conn) {
    aba6:	4681      	mov	r9, r0
    aba8:	bb08      	cbnz	r0, abee <notify_cb+0xc2>
			if (ccc->cfg == sc_ccc_cfg) {
    abaa:	f8d8 3000 	ldr.w	r3, [r8]
    abae:	455b      	cmp	r3, fp
    abb0:	d10d      	bne.n	abce <notify_cb+0xa2>
				sc_save(cfg, data->params);
    abb2:	69a3      	ldr	r3, [r4, #24]
	memcpy(&data, params->data, params->len);
    abb4:	a803      	add	r0, sp, #12
    abb6:	69d9      	ldr	r1, [r3, #28]
    abb8:	8c1a      	ldrh	r2, [r3, #32]
    abba:	f014 fd25 	bl	1f608 <memcpy>
	if (!stored->start && !stored->end) {
    abbe:	89a9      	ldrh	r1, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    abc0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!stored->start && !stored->end) {
    abc4:	b929      	cbnz	r1, abd2 <notify_cb+0xa6>
    abc6:	89ea      	ldrh	r2, [r5, #14]
    abc8:	b942      	cbnz	r2, abdc <notify_cb+0xb0>
		*stored = data;
    abca:	9803      	ldr	r0, [sp, #12]
    abcc:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    abce:	3601      	adds	r6, #1
    abd0:	e7d9      	b.n	ab86 <notify_cb+0x5a>
	data.start = sys_le16_to_cpu(data.start);
    abd2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (new_start >= *start && new_end <= *end) {
    abd6:	89e8      	ldrh	r0, [r5, #14]
    abd8:	428a      	cmp	r2, r1
    abda:	d304      	bcc.n	abe6 <notify_cb+0xba>
    abdc:	89ea      	ldrh	r2, [r5, #14]
    abde:	429a      	cmp	r2, r3
    abe0:	d2f5      	bcs.n	abce <notify_cb+0xa2>
		*end = new_end;
    abe2:	81eb      	strh	r3, [r5, #14]
    abe4:	e7f3      	b.n	abce <notify_cb+0xa2>
	if (*end < new_end) {
    abe6:	4283      	cmp	r3, r0
		*start = new_start;
    abe8:	81aa      	strh	r2, [r5, #12]
	if (*end < new_end) {
    abea:	d9f0      	bls.n	abce <notify_cb+0xa2>
    abec:	e7f9      	b.n	abe2 <notify_cb+0xb6>
		if (conn->state != BT_CONN_CONNECTED) {
    abee:	7a83      	ldrb	r3, [r0, #10]
    abf0:	2b04      	cmp	r3, #4
    abf2:	d002      	beq.n	abfa <notify_cb+0xce>
			bt_conn_unref(conn);
    abf4:	f014 ffa6 	bl	1fb44 <bt_conn_unref>
			continue;
    abf8:	e7e9      	b.n	abce <notify_cb+0xa2>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    abfa:	f8d8 3014 	ldr.w	r3, [r8, #20]
    abfe:	b97b      	cbnz	r3, ac20 <notify_cb+0xf4>
		if (data->type == BT_GATT_CCC_INDICATE) {
    ac00:	88a3      	ldrh	r3, [r4, #4]
    ac02:	2b02      	cmp	r3, #2
    ac04:	d111      	bne.n	ac2a <notify_cb+0xfe>
			err = gatt_indicate(conn, data->params);
    ac06:	69a1      	ldr	r1, [r4, #24]
    ac08:	4648      	mov	r0, r9
    ac0a:	f7ff fc73 	bl	a4f4 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    ac0e:	4605      	mov	r5, r0
		bt_conn_unref(conn);
    ac10:	4648      	mov	r0, r9
    ac12:	f014 ff97 	bl	1fb44 <bt_conn_unref>
		if (err < 0) {
    ac16:	2d00      	cmp	r5, #0
    ac18:	db11      	blt.n	ac3e <notify_cb+0x112>
		data->err = 0;
    ac1a:	f8c4 a000 	str.w	sl, [r4]
    ac1e:	e7d6      	b.n	abce <notify_cb+0xa2>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    ac20:	4639      	mov	r1, r7
    ac22:	4798      	blx	r3
    ac24:	2800      	cmp	r0, #0
    ac26:	d1eb      	bne.n	ac00 <notify_cb+0xd4>
    ac28:	e7d1      	b.n	abce <notify_cb+0xa2>
			err = gatt_notify(conn, data->attr->handle,
    ac2a:	68a3      	ldr	r3, [r4, #8]
    ac2c:	6922      	ldr	r2, [r4, #16]
    ac2e:	8a19      	ldrh	r1, [r3, #16]
    ac30:	68e3      	ldr	r3, [r4, #12]
    ac32:	9300      	str	r3, [sp, #0]
    ac34:	4648      	mov	r0, r9
    ac36:	8aa3      	ldrh	r3, [r4, #20]
    ac38:	f7ff fb7a 	bl	a330 <gatt_notify>
    ac3c:	e7e7      	b.n	ac0e <notify_cb+0xe2>
			return BT_GATT_ITER_STOP;
    ac3e:	2000      	movs	r0, #0
    ac40:	e792      	b.n	ab68 <notify_cb+0x3c>
    ac42:	bf00      	nop
    ac44:	0000a8fd 	.word	0x0000a8fd
    ac48:	20000898 	.word	0x20000898

0000ac4c <bt_gatt_service_unregister>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ac4c:	4b15      	ldr	r3, [pc, #84]	; (aca4 <bt_gatt_service_unregister+0x58>)
    ac4e:	681a      	ldr	r2, [r3, #0]
{
    ac50:	b510      	push	{r4, lr}
    ac52:	2100      	movs	r1, #0
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    ac54:	f100 0408 	add.w	r4, r0, #8
    ac58:	b912      	cbnz	r2, ac60 <bt_gatt_service_unregister+0x14>
		return -ENOENT;
    ac5a:	f06f 0001 	mvn.w	r0, #1
    ac5e:	e017      	b.n	ac90 <bt_gatt_service_unregister+0x44>
    ac60:	4294      	cmp	r4, r2
    ac62:	d11c      	bne.n	ac9e <bt_gatt_service_unregister+0x52>
Z_GENLIST_REMOVE(slist, snode)
    ac64:	6882      	ldr	r2, [r0, #8]
    ac66:	b9a1      	cbnz	r1, ac92 <bt_gatt_service_unregister+0x46>
    ac68:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    ac6a:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    ac6c:	428c      	cmp	r4, r1
    ac6e:	d100      	bne.n	ac72 <bt_gatt_service_unregister+0x26>
	list->tail = node;
    ac70:	605a      	str	r2, [r3, #4]
		    svc->attrs[svc->attr_count - 1].handle);
    ac72:	e9d0 2300 	ldrd	r2, r3, [r0]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    ac76:	2114      	movs	r1, #20
    ac78:	fb01 2303 	mla	r3, r1, r3, r2
	parent->next = child;
    ac7c:	2400      	movs	r4, #0
    ac7e:	6084      	str	r4, [r0, #8]
    ac80:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    ac84:	8a10      	ldrh	r0, [r2, #16]
    ac86:	f7ff fedf 	bl	aa48 <sc_indicate.constprop.22>
	db_changed();
    ac8a:	f7ff fe97 	bl	a9bc <db_changed>
	return 0;
    ac8e:	4620      	mov	r0, r4
}
    ac90:	bd10      	pop	{r4, pc}
    ac92:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    ac94:	685a      	ldr	r2, [r3, #4]
    ac96:	4294      	cmp	r4, r2
	list->tail = node;
    ac98:	bf08      	it	eq
    ac9a:	6059      	streq	r1, [r3, #4]
    ac9c:	e7e9      	b.n	ac72 <bt_gatt_service_unregister+0x26>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ac9e:	4611      	mov	r1, r2
    aca0:	6812      	ldr	r2, [r2, #0]
    aca2:	e7d9      	b.n	ac58 <bt_gatt_service_unregister+0xc>
    aca4:	20000820 	.word	0x20000820

0000aca8 <bt_gatt_foreach_attr>:
{
    aca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    acac:	4698      	mov	r8, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    acae:	4b12      	ldr	r3, [pc, #72]	; (acf8 <bt_gatt_foreach_attr+0x50>)
    acb0:	681c      	ldr	r4, [r3, #0]
{
    acb2:	4605      	mov	r5, r0
    acb4:	460e      	mov	r6, r1
    acb6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    acb8:	b1dc      	cbz	r4, acf2 <bt_gatt_foreach_attr+0x4a>
    acba:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    acbc:	f04f 0914 	mov.w	r9, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    acc0:	b1bc      	cbz	r4, acf2 <bt_gatt_foreach_attr+0x4a>
		for (i = 0; i < svc->attr_count; i++) {
    acc2:	f04f 0a00 	mov.w	sl, #0
    acc6:	e007      	b.n	acd8 <bt_gatt_foreach_attr+0x30>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    acc8:	6820      	ldr	r0, [r4, #0]
    acca:	fb09 000a 	mla	r0, r9, sl, r0
			if (attr->handle < start_handle ||
    acce:	8a01      	ldrh	r1, [r0, #16]
    acd0:	42a9      	cmp	r1, r5
    acd2:	d208      	bcs.n	ace6 <bt_gatt_foreach_attr+0x3e>
		for (i = 0; i < svc->attr_count; i++) {
    acd4:	f10a 0a01 	add.w	sl, sl, #1
    acd8:	6863      	ldr	r3, [r4, #4]
    acda:	4553      	cmp	r3, sl
    acdc:	d8f4      	bhi.n	acc8 <bt_gatt_foreach_attr+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    acde:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    ace0:	b13c      	cbz	r4, acf2 <bt_gatt_foreach_attr+0x4a>
    ace2:	3c08      	subs	r4, #8
    ace4:	e7ec      	b.n	acc0 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    ace6:	42b1      	cmp	r1, r6
    ace8:	d8f4      	bhi.n	acd4 <bt_gatt_foreach_attr+0x2c>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    acea:	4641      	mov	r1, r8
    acec:	47b8      	blx	r7
    acee:	2800      	cmp	r0, #0
    acf0:	d1f0      	bne.n	acd4 <bt_gatt_foreach_attr+0x2c>
}
    acf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    acf6:	bf00      	nop
    acf8:	20000820 	.word	0x20000820

0000acfc <db_hash_gen>:
{
    acfc:	b500      	push	{lr}
    acfe:	b0c9      	sub	sp, #292	; 0x124
	u8_t key[16] = {};
    ad00:	2210      	movs	r2, #16
    ad02:	2100      	movs	r1, #0
    ad04:	4668      	mov	r0, sp
    ad06:	f014 fca9 	bl	1f65c <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    ad0a:	aa1c      	add	r2, sp, #112	; 0x70
    ad0c:	4669      	mov	r1, sp
    ad0e:	a804      	add	r0, sp, #16
    ad10:	f013 fa5a 	bl	1e1c8 <tc_cmac_setup>
    ad14:	b980      	cbnz	r0, ad38 <db_hash_gen+0x3c>
		BT_ERR("Unable to setup AES CMAC");
    ad16:	2301      	movs	r3, #1
    ad18:	f04f 0100 	mov.w	r1, #0
    ad1c:	f363 0107 	bfi	r1, r3, #0, #8
    ad20:	4a12      	ldr	r2, [pc, #72]	; (ad6c <db_hash_gen+0x70>)
    ad22:	4b13      	ldr	r3, [pc, #76]	; (ad70 <db_hash_gen+0x74>)
    ad24:	4813      	ldr	r0, [pc, #76]	; (ad74 <db_hash_gen+0x78>)
    ad26:	1a9b      	subs	r3, r3, r2
    ad28:	08db      	lsrs	r3, r3, #3
    ad2a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to calculate hash");
    ad2e:	f013 fb88 	bl	1e442 <log_0>
}
    ad32:	b049      	add	sp, #292	; 0x124
    ad34:	f85d fb04 	ldr.w	pc, [sp], #4
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    ad38:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ad3c:	2001      	movs	r0, #1
    ad3e:	ab04      	add	r3, sp, #16
    ad40:	4a0d      	ldr	r2, [pc, #52]	; (ad78 <db_hash_gen+0x7c>)
    ad42:	f7ff ffb1 	bl	aca8 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    ad46:	a904      	add	r1, sp, #16
    ad48:	480c      	ldr	r0, [pc, #48]	; (ad7c <db_hash_gen+0x80>)
    ad4a:	f013 fad3 	bl	1e2f4 <tc_cmac_final>
    ad4e:	2800      	cmp	r0, #0
    ad50:	d1ef      	bne.n	ad32 <db_hash_gen+0x36>
		BT_ERR("Unable to calculate hash");
    ad52:	2301      	movs	r3, #1
    ad54:	f04f 0100 	mov.w	r1, #0
    ad58:	f363 0107 	bfi	r1, r3, #0, #8
    ad5c:	4a03      	ldr	r2, [pc, #12]	; (ad6c <db_hash_gen+0x70>)
    ad5e:	4b04      	ldr	r3, [pc, #16]	; (ad70 <db_hash_gen+0x74>)
    ad60:	4807      	ldr	r0, [pc, #28]	; (ad80 <db_hash_gen+0x84>)
    ad62:	1a9b      	subs	r3, r3, r2
    ad64:	08db      	lsrs	r3, r3, #3
    ad66:	f363 118f 	bfi	r1, r3, #6, #10
    ad6a:	e7e0      	b.n	ad2e <db_hash_gen+0x32>
    ad6c:	000233ec 	.word	0x000233ec
    ad70:	00023454 	.word	0x00023454
    ad74:	00025759 	.word	0x00025759
    ad78:	000203b1 	.word	0x000203b1
    ad7c:	200022db 	.word	0x200022db
    ad80:	00025772 	.word	0x00025772

0000ad84 <bt_gatt_init>:
{
    ad84:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ad86:	4b11      	ldr	r3, [pc, #68]	; (adcc <bt_gatt_init+0x48>)
    ad88:	f3bf 8f5b 	dmb	ish
    ad8c:	2201      	movs	r2, #1
    ad8e:	e853 1f00 	ldrex	r1, [r3]
    ad92:	2900      	cmp	r1, #0
    ad94:	d103      	bne.n	ad9e <bt_gatt_init+0x1a>
    ad96:	e843 2000 	strex	r0, r2, [r3]
    ad9a:	2800      	cmp	r0, #0
    ad9c:	d1f7      	bne.n	ad8e <bt_gatt_init+0xa>
    ad9e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    ada2:	d111      	bne.n	adc8 <bt_gatt_init+0x44>
	gatt_register(&gatt_svc);
    ada4:	480a      	ldr	r0, [pc, #40]	; (add0 <bt_gatt_init+0x4c>)
    ada6:	f7ff fb5f 	bl	a468 <gatt_register>
	gatt_register(&gap_svc);
    adaa:	480a      	ldr	r0, [pc, #40]	; (add4 <bt_gatt_init+0x50>)
    adac:	f7ff fb5c 	bl	a468 <gatt_register>
	k_delayed_work_init(&db_hash_work, db_hash_process);
    adb0:	4909      	ldr	r1, [pc, #36]	; (add8 <bt_gatt_init+0x54>)
    adb2:	480a      	ldr	r0, [pc, #40]	; (addc <bt_gatt_init+0x58>)
    adb4:	f018 f8e9 	bl	22f8a <k_delayed_work_init>
	db_hash_gen();
    adb8:	f7ff ffa0 	bl	acfc <db_hash_gen>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    adbc:	4908      	ldr	r1, [pc, #32]	; (ade0 <bt_gatt_init+0x5c>)
    adbe:	4809      	ldr	r0, [pc, #36]	; (ade4 <bt_gatt_init+0x60>)
}
    adc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    adc4:	f018 b8e1 	b.w	22f8a <k_delayed_work_init>
}
    adc8:	bd08      	pop	{r3, pc}
    adca:	bf00      	nop
    adcc:	20000894 	.word	0x20000894
    add0:	200078f8 	.word	0x200078f8
    add4:	2000784c 	.word	0x2000784c
    add8:	000206e5 	.word	0x000206e5
    addc:	20000828 	.word	0x20000828
    ade0:	0000af01 	.word	0x0000af01
    ade4:	20000870 	.word	0x20000870

0000ade8 <ccc_set>:
{
    ade8:	b570      	push	{r4, r5, r6, lr}
	if (argc < 1) {
    adea:	2800      	cmp	r0, #0
{
    adec:	b0b4      	sub	sp, #208	; 0xd0
    adee:	460c      	mov	r4, r1
    adf0:	4616      	mov	r6, r2
	if (argc < 1) {
    adf2:	dc12      	bgt.n	ae1a <ccc_set+0x32>
		BT_ERR("Insufficient number of arguments");
    adf4:	2301      	movs	r3, #1
    adf6:	f04f 0100 	mov.w	r1, #0
    adfa:	f363 0107 	bfi	r1, r3, #0, #8
    adfe:	4a2e      	ldr	r2, [pc, #184]	; (aeb8 <ccc_set+0xd0>)
    ae00:	4b2e      	ldr	r3, [pc, #184]	; (aebc <ccc_set+0xd4>)
    ae02:	482f      	ldr	r0, [pc, #188]	; (aec0 <ccc_set+0xd8>)
    ae04:	1a9b      	subs	r3, r3, r2
    ae06:	08db      	lsrs	r3, r3, #3
    ae08:	f363 118f 	bfi	r1, r3, #6, #10
    ae0c:	f013 fb19 	bl	1e442 <log_0>
		return -EINVAL;
    ae10:	f06f 0415 	mvn.w	r4, #21
}
    ae14:	4620      	mov	r0, r4
    ae16:	b034      	add	sp, #208	; 0xd0
    ae18:	bd70      	pop	{r4, r5, r6, pc}
	} else if (argc == 1) {
    ae1a:	2801      	cmp	r0, #1
    ae1c:	d118      	bne.n	ae50 <ccc_set+0x68>
		load.id = BT_ID_DEFAULT;
    ae1e:	2300      	movs	r3, #0
    ae20:	f88d 3000 	strb.w	r3, [sp]
	err = bt_settings_decode_key(argv[0], &load.addr);
    ae24:	f10d 0101 	add.w	r1, sp, #1
    ae28:	6820      	ldr	r0, [r4, #0]
    ae2a:	f014 fd06 	bl	1f83a <bt_settings_decode_key>
	if (err) {
    ae2e:	b1b8      	cbz	r0, ae60 <ccc_set+0x78>
		BT_ERR("Unable to decode address %s", argv[0]);
    ae30:	2301      	movs	r3, #1
    ae32:	f04f 0200 	mov.w	r2, #0
    ae36:	f363 0207 	bfi	r2, r3, #0, #8
    ae3a:	491f      	ldr	r1, [pc, #124]	; (aeb8 <ccc_set+0xd0>)
    ae3c:	4b1f      	ldr	r3, [pc, #124]	; (aebc <ccc_set+0xd4>)
    ae3e:	4821      	ldr	r0, [pc, #132]	; (aec4 <ccc_set+0xdc>)
    ae40:	1a5b      	subs	r3, r3, r1
    ae42:	08db      	lsrs	r3, r3, #3
    ae44:	f363 128f 	bfi	r2, r3, #6, #10
    ae48:	6821      	ldr	r1, [r4, #0]
    ae4a:	f013 fb07 	bl	1e45c <log_1>
    ae4e:	e7df      	b.n	ae10 <ccc_set+0x28>
		load.id = strtol(argv[1], NULL, 10);
    ae50:	220a      	movs	r2, #10
    ae52:	2100      	movs	r1, #0
    ae54:	6860      	ldr	r0, [r4, #4]
    ae56:	f014 fafc 	bl	1f452 <strtol>
    ae5a:	f88d 0000 	strb.w	r0, [sp]
    ae5e:	e7e1      	b.n	ae24 <ccc_set+0x3c>
	if (settings_val_get_len_cb(val_ctx)) {
    ae60:	4630      	mov	r0, r6
    ae62:	f014 fa5f 	bl	1f324 <settings_val_get_len_cb>
    ae66:	b318      	cbz	r0, aeb0 <ccc_set+0xc8>
		len = settings_val_read_cb(val_ctx, ccc_store,
    ae68:	ad04      	add	r5, sp, #16
    ae6a:	22c0      	movs	r2, #192	; 0xc0
    ae6c:	4629      	mov	r1, r5
    ae6e:	4630      	mov	r0, r6
    ae70:	f014 fa3b 	bl	1f2ea <settings_val_read_cb>
		if (len < 0) {
    ae74:	1e04      	subs	r4, r0, #0
    ae76:	da0f      	bge.n	ae98 <ccc_set+0xb0>
			BT_ERR("Failed to decode value (err %d)", len);
    ae78:	2301      	movs	r3, #1
    ae7a:	f04f 0200 	mov.w	r2, #0
    ae7e:	f363 0207 	bfi	r2, r3, #0, #8
    ae82:	490d      	ldr	r1, [pc, #52]	; (aeb8 <ccc_set+0xd0>)
    ae84:	4b0d      	ldr	r3, [pc, #52]	; (aebc <ccc_set+0xd4>)
    ae86:	4810      	ldr	r0, [pc, #64]	; (aec8 <ccc_set+0xe0>)
    ae88:	1a5b      	subs	r3, r3, r1
    ae8a:	08db      	lsrs	r3, r3, #3
    ae8c:	f363 128f 	bfi	r2, r3, #6, #10
    ae90:	4621      	mov	r1, r4
    ae92:	f013 fae3 	bl	1e45c <log_1>
			return len;
    ae96:	e7bd      	b.n	ae14 <ccc_set+0x2c>
		load.count = len / sizeof(*ccc_store);
    ae98:	08a4      	lsrs	r4, r4, #2
		load.entry = ccc_store;
    ae9a:	9502      	str	r5, [sp, #8]
		load.count = len / sizeof(*ccc_store);
    ae9c:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    ae9e:	466b      	mov	r3, sp
    aea0:	4a0a      	ldr	r2, [pc, #40]	; (aecc <ccc_set+0xe4>)
    aea2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aea6:	2001      	movs	r0, #1
    aea8:	f7ff fefe 	bl	aca8 <bt_gatt_foreach_attr>
	return 0;
    aeac:	2400      	movs	r4, #0
    aeae:	e7b1      	b.n	ae14 <ccc_set+0x2c>
		load.count = 0;
    aeb0:	e9cd 0002 	strd	r0, r0, [sp, #8]
    aeb4:	e7f3      	b.n	ae9e <ccc_set+0xb6>
    aeb6:	bf00      	nop
    aeb8:	000233ec 	.word	0x000233ec
    aebc:	00023454 	.word	0x00023454
    aec0:	000256ae 	.word	0x000256ae
    aec4:	000256cf 	.word	0x000256cf
    aec8:	0002570d 	.word	0x0002570d
    aecc:	0000a615 	.word	0x0000a615

0000aed0 <bt_gatt_indicate.part.15>:
int bt_gatt_indicate(struct bt_conn *conn,
    aed0:	b500      	push	{lr}
    aed2:	b089      	sub	sp, #36	; 0x24
	nfy.err = -ENOTCONN;
    aed4:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    aed8:	9007      	str	r0, [sp, #28]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    aeda:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    aedc:	9301      	str	r3, [sp, #4]
	nfy.type = BT_GATT_CCC_INDICATE;
    aede:	2302      	movs	r3, #2
    aee0:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    aee4:	4a05      	ldr	r2, [pc, #20]	; (aefc <bt_gatt_indicate.part.15+0x2c>)
    aee6:	8a00      	ldrh	r0, [r0, #16]
    aee8:	ab01      	add	r3, sp, #4
    aeea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aeee:	f7ff fedb 	bl	aca8 <bt_gatt_foreach_attr>
}
    aef2:	9801      	ldr	r0, [sp, #4]
    aef4:	b009      	add	sp, #36	; 0x24
    aef6:	f85d fb04 	ldr.w	pc, [sp], #4
    aefa:	bf00      	nop
    aefc:	0000ab2d 	.word	0x0000ab2d

0000af00 <sc_process>:
{
    af00:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    af02:	f850 2c04 	ldr.w	r2, [r0, #-4]
    af06:	9201      	str	r2, [sp, #4]
{
    af08:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    af0a:	f103 0420 	add.w	r4, r3, #32
    af0e:	3828      	subs	r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    af10:	f3bf 8f5b 	dmb	ish
    af14:	e854 2f00 	ldrex	r2, [r4]
    af18:	f022 0201 	bic.w	r2, r2, #1
    af1c:	e844 2100 	strex	r1, r2, [r4]
    af20:	2900      	cmp	r1, #0
    af22:	d1f7      	bne.n	af14 <sc_process+0x14>
    af24:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
    af28:	2200      	movs	r2, #0
    af2a:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0U;
    af2e:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    af32:	4a0a      	ldr	r2, [pc, #40]	; (af5c <sc_process+0x5c>)
    af34:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    af38:	4a09      	ldr	r2, [pc, #36]	; (af60 <sc_process+0x60>)
    af3a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    af3e:	aa01      	add	r2, sp, #4
    af40:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    af44:	2204      	movs	r2, #4
    af46:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (conn) {
    af4a:	f7ff ffc1 	bl	aed0 <bt_gatt_indicate.part.15>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    af4e:	b918      	cbnz	r0, af58 <sc_process+0x58>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    af50:	2101      	movs	r1, #1
    af52:	4620      	mov	r0, r4
    af54:	f015 fa1d 	bl	20392 <atomic_set_bit>
}
    af58:	b002      	add	sp, #8
    af5a:	bd10      	pop	{r4, pc}
    af5c:	20007880 	.word	0x20007880
    af60:	0000a6e1 	.word	0x0000a6e1

0000af64 <bt_gatt_notify_cb>:
{
    af64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af68:	460c      	mov	r4, r1
    af6a:	b08a      	sub	sp, #40	; 0x28
    af6c:	461d      	mov	r5, r3
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    af6e:	2300      	movs	r3, #0
{
    af70:	4680      	mov	r8, r0
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    af72:	f88d 3008 	strb.w	r3, [sp, #8]
    af76:	a902      	add	r1, sp, #8
    af78:	f642 0303 	movw	r3, #10243	; 0x2803
    af7c:	6820      	ldr	r0, [r4, #0]
{
    af7e:	9f10      	ldr	r7, [sp, #64]	; 0x40
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    af80:	f8ad 300a 	strh.w	r3, [sp, #10]
{
    af84:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    af86:	f014 fc8b 	bl	1f8a0 <bt_uuid_cmp>
    af8a:	b920      	cbnz	r0, af96 <bt_gatt_notify_cb+0x32>
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    af8c:	68e3      	ldr	r3, [r4, #12]
    af8e:	791b      	ldrb	r3, [r3, #4]
    af90:	06db      	lsls	r3, r3, #27
    af92:	d521      	bpl.n	afd8 <bt_gatt_notify_cb+0x74>
		attr++;
    af94:	3414      	adds	r4, #20
	if (conn) {
    af96:	8a20      	ldrh	r0, [r4, #16]
    af98:	f1b8 0f00 	cmp.w	r8, #0
    af9c:	d009      	beq.n	afb2 <bt_gatt_notify_cb+0x4e>
		return gatt_notify(conn, attr->handle, data,
    af9e:	4601      	mov	r1, r0
    afa0:	9700      	str	r7, [sp, #0]
    afa2:	462b      	mov	r3, r5
    afa4:	4632      	mov	r2, r6
    afa6:	4640      	mov	r0, r8
    afa8:	f7ff f9c2 	bl	a330 <gatt_notify>
}
    afac:	b00a      	add	sp, #40	; 0x28
    afae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nfy.err = -ENOTCONN;
    afb2:	f06f 0338 	mvn.w	r3, #56	; 0x38
    afb6:	9303      	str	r3, [sp, #12]
	nfy.type = BT_GATT_CCC_NOTIFY;
    afb8:	2301      	movs	r3, #1
    afba:	f8ad 3010 	strh.w	r3, [sp, #16]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    afbe:	4a08      	ldr	r2, [pc, #32]	; (afe0 <bt_gatt_notify_cb+0x7c>)
	nfy.data = data;
    afc0:	9607      	str	r6, [sp, #28]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    afc2:	ab03      	add	r3, sp, #12
    afc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	nfy.func = func;
    afc8:	e9cd 4705 	strd	r4, r7, [sp, #20]
	nfy.len = len;
    afcc:	f8ad 5020 	strh.w	r5, [sp, #32]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    afd0:	f7ff fe6a 	bl	aca8 <bt_gatt_foreach_attr>
	return nfy.err;
    afd4:	9803      	ldr	r0, [sp, #12]
    afd6:	e7e9      	b.n	afac <bt_gatt_notify_cb+0x48>
			return -EINVAL;
    afd8:	f06f 0015 	mvn.w	r0, #21
    afdc:	e7e6      	b.n	afac <bt_gatt_notify_cb+0x48>
    afde:	bf00      	nop
    afe0:	0000ab2d 	.word	0x0000ab2d

0000afe4 <bt_gatt_connected>:
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    afe4:	4603      	mov	r3, r0
    afe6:	4a03      	ldr	r2, [pc, #12]	; (aff4 <bt_gatt_connected+0x10>)
    afe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    afec:	2001      	movs	r0, #1
    afee:	f7ff be5b 	b.w	aca8 <bt_gatt_foreach_attr>
    aff2:	bf00      	nop
    aff4:	0000aab9 	.word	0x0000aab9

0000aff8 <db_hash_read>:
{
    aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    affa:	4604      	mov	r4, r0
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    affc:	4815      	ldr	r0, [pc, #84]	; (b054 <db_hash_read+0x5c>)
    affe:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    b002:	4616      	mov	r6, r2
    b004:	461f      	mov	r7, r3
    b006:	f011 fb5f 	bl	1c6c8 <z_timeout_remaining>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    b00a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b00e:	2264      	movs	r2, #100	; 0x64
    b010:	2300      	movs	r3, #0
    b012:	fb80 0101 	smull	r0, r1, r0, r1
    b016:	f7f5 f8b3 	bl	180 <__aeabi_uldivmod>
	if (k_delayed_work_remaining_get(&db_hash_work)) {
    b01a:	b120      	cbz	r0, b026 <db_hash_read+0x2e>
		k_delayed_work_cancel(&db_hash_work);
    b01c:	480e      	ldr	r0, [pc, #56]	; (b058 <db_hash_read+0x60>)
    b01e:	f017 ffbc 	bl	22f9a <k_delayed_work_cancel>
		db_hash_gen();
    b022:	f7ff fe6b 	bl	acfc <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    b026:	2101      	movs	r1, #1
    b028:	4620      	mov	r0, r4
    b02a:	f015 fb5f 	bl	206ec <bt_gatt_change_aware>
	if (offset > value_len) {
    b02e:	2d10      	cmp	r5, #16
    b030:	d80c      	bhi.n	b04c <db_hash_read+0x54>
	len = MIN(buf_len, value_len - offset);
    b032:	f1c5 0410 	rsb	r4, r5, #16
    b036:	42bc      	cmp	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    b038:	4908      	ldr	r1, [pc, #32]	; (b05c <db_hash_read+0x64>)
	len = MIN(buf_len, value_len - offset);
    b03a:	bfa8      	it	ge
    b03c:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    b03e:	4622      	mov	r2, r4
    b040:	4429      	add	r1, r5
    b042:	4630      	mov	r0, r6
    b044:	f014 fae0 	bl	1f608 <memcpy>
}
    b048:	4620      	mov	r0, r4
    b04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b04c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b050:	e7fa      	b.n	b048 <db_hash_read+0x50>
    b052:	bf00      	nop
    b054:	20000834 	.word	0x20000834
    b058:	20000828 	.word	0x20000828
    b05c:	200022db 	.word	0x200022db

0000b060 <bt_gatt_store_ccc>:
{
    b060:	b570      	push	{r4, r5, r6, lr}
    b062:	b0be      	sub	sp, #248	; 0xf8
	save.count = 0;
    b064:	2300      	movs	r3, #0
{
    b066:	4605      	mov	r5, r0
    b068:	460c      	mov	r4, r1
	save.addr = addr;
    b06a:	910c      	str	r1, [sp, #48]	; 0x30
	save.count = 0;
    b06c:	933d      	str	r3, [sp, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    b06e:	4a1a      	ldr	r2, [pc, #104]	; (b0d8 <bt_gatt_store_ccc+0x78>)
    b070:	ab0c      	add	r3, sp, #48	; 0x30
    b072:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b076:	2001      	movs	r0, #1
    b078:	f7ff fe16 	bl	aca8 <bt_gatt_foreach_attr>
	if (id) {
    b07c:	b345      	cbz	r5, b0d0 <bt_gatt_store_ccc+0x70>
		snprintk(id_str, sizeof(id_str), "%u", id);
    b07e:	ae02      	add	r6, sp, #8
    b080:	462b      	mov	r3, r5
    b082:	4a16      	ldr	r2, [pc, #88]	; (b0dc <bt_gatt_store_ccc+0x7c>)
    b084:	2104      	movs	r1, #4
    b086:	4630      	mov	r0, r6
    b088:	f7f8 f934 	bl	32f4 <snprintk>
		bt_settings_encode_key(key, sizeof(key), "ccc",
    b08c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc",
    b08e:	4a14      	ldr	r2, [pc, #80]	; (b0e0 <bt_gatt_store_ccc+0x80>)
    b090:	4623      	mov	r3, r4
    b092:	2124      	movs	r1, #36	; 0x24
    b094:	a803      	add	r0, sp, #12
    b096:	f7fb fafb 	bl	6690 <bt_settings_encode_key>
	if (save.count) {
    b09a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    b09c:	b1d2      	cbz	r2, b0d4 <bt_gatt_store_ccc+0x74>
		len = save.count * sizeof(*save.store);
    b09e:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    b0a0:	a90d      	add	r1, sp, #52	; 0x34
	err = settings_save_one(key, str, len);
    b0a2:	a803      	add	r0, sp, #12
    b0a4:	f7f9 fa6e 	bl	4584 <settings_save_one>
	if (err) {
    b0a8:	4604      	mov	r4, r0
    b0aa:	b170      	cbz	r0, b0ca <bt_gatt_store_ccc+0x6a>
		BT_ERR("Failed to store CCCs (err %d)", err);
    b0ac:	2301      	movs	r3, #1
    b0ae:	f04f 0200 	mov.w	r2, #0
    b0b2:	f363 0207 	bfi	r2, r3, #0, #8
    b0b6:	490b      	ldr	r1, [pc, #44]	; (b0e4 <bt_gatt_store_ccc+0x84>)
    b0b8:	4b0b      	ldr	r3, [pc, #44]	; (b0e8 <bt_gatt_store_ccc+0x88>)
    b0ba:	1a5b      	subs	r3, r3, r1
    b0bc:	08db      	lsrs	r3, r3, #3
    b0be:	4601      	mov	r1, r0
    b0c0:	f363 128f 	bfi	r2, r3, #6, #10
    b0c4:	4809      	ldr	r0, [pc, #36]	; (b0ec <bt_gatt_store_ccc+0x8c>)
    b0c6:	f013 f9c9 	bl	1e45c <log_1>
}
    b0ca:	4620      	mov	r0, r4
    b0cc:	b03e      	add	sp, #248	; 0xf8
    b0ce:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc",
    b0d0:	9500      	str	r5, [sp, #0]
    b0d2:	e7dc      	b.n	b08e <bt_gatt_store_ccc+0x2e>
		str = NULL;
    b0d4:	4611      	mov	r1, r2
    b0d6:	e7e4      	b.n	b0a2 <bt_gatt_store_ccc+0x42>
    b0d8:	0000a5dd 	.word	0x0000a5dd
    b0dc:	000281f2 	.word	0x000281f2
    b0e0:	0002568c 	.word	0x0002568c
    b0e4:	000233ec 	.word	0x000233ec
    b0e8:	00023454 	.word	0x00023454
    b0ec:	00025690 	.word	0x00025690

0000b0f0 <bt_gatt_disconnected>:
{
    b0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0f2:	4604      	mov	r4, r0
    b0f4:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b0f6:	4603      	mov	r3, r0
    b0f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b0fc:	2001      	movs	r0, #1
    b0fe:	4a3a      	ldr	r2, [pc, #232]	; (b1e8 <bt_gatt_disconnected+0xf8>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b100:	f104 0648 	add.w	r6, r4, #72	; 0x48
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b104:	f7ff fdd0 	bl	aca8 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b108:	4631      	mov	r1, r6
    b10a:	7a20      	ldrb	r0, [r4, #8]
    b10c:	f014 fca7 	bl	1fa5e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b110:	2800      	cmp	r0, #0
    b112:	d03a      	beq.n	b18a <bt_gatt_disconnected+0x9a>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    b114:	4631      	mov	r1, r6
    b116:	7a20      	ldrb	r0, [r4, #8]
    b118:	f7ff ffa2 	bl	b060 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    b11c:	4620      	mov	r0, r4
    b11e:	f7ff fac5 	bl	a6ac <find_cf_cfg>
	if (!cfg) {
    b122:	4605      	mov	r5, r0
    b124:	2800      	cmp	r0, #0
    b126:	d056      	beq.n	b1d6 <bt_gatt_disconnected+0xe6>
		if (conn->id) {
    b128:	7a23      	ldrb	r3, [r4, #8]
		str = (char *)cfg->data;
    b12a:	3508      	adds	r5, #8
		if (conn->id) {
    b12c:	2b00      	cmp	r3, #0
    b12e:	d054      	beq.n	b1da <bt_gatt_disconnected+0xea>
			snprintk(id_str, sizeof(id_str), "%u", conn->id);
    b130:	af02      	add	r7, sp, #8
    b132:	4a2e      	ldr	r2, [pc, #184]	; (b1ec <bt_gatt_disconnected+0xfc>)
    b134:	2104      	movs	r1, #4
    b136:	4638      	mov	r0, r7
    b138:	f7f8 f8dc 	bl	32f4 <snprintk>
			bt_settings_encode_key(key, sizeof(key), "cf",
    b13c:	9700      	str	r7, [sp, #0]
    b13e:	4633      	mov	r3, r6
    b140:	4a2b      	ldr	r2, [pc, #172]	; (b1f0 <bt_gatt_disconnected+0x100>)
    b142:	2124      	movs	r1, #36	; 0x24
    b144:	a803      	add	r0, sp, #12
    b146:	f7fb faa3 	bl	6690 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    b14a:	7a23      	ldrb	r3, [r4, #8]
    b14c:	2701      	movs	r7, #1
    b14e:	b93b      	cbnz	r3, b160 <bt_gatt_disconnected+0x70>
		bt_settings_encode_key(key, sizeof(key), "cf",
    b150:	2300      	movs	r3, #0
    b152:	9300      	str	r3, [sp, #0]
    b154:	4a26      	ldr	r2, [pc, #152]	; (b1f0 <bt_gatt_disconnected+0x100>)
    b156:	4633      	mov	r3, r6
    b158:	2124      	movs	r1, #36	; 0x24
    b15a:	a803      	add	r0, sp, #12
    b15c:	f7fb fa98 	bl	6690 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    b160:	4629      	mov	r1, r5
    b162:	463a      	mov	r2, r7
    b164:	a803      	add	r0, sp, #12
    b166:	f7f9 fa0d 	bl	4584 <settings_save_one>
	if (err) {
    b16a:	4601      	mov	r1, r0
    b16c:	b168      	cbz	r0, b18a <bt_gatt_disconnected+0x9a>
		BT_ERR("Failed to store Client Features (err %d)", err);
    b16e:	2301      	movs	r3, #1
    b170:	f04f 0200 	mov.w	r2, #0
    b174:	f363 0207 	bfi	r2, r3, #0, #8
    b178:	481e      	ldr	r0, [pc, #120]	; (b1f4 <bt_gatt_disconnected+0x104>)
    b17a:	4b1f      	ldr	r3, [pc, #124]	; (b1f8 <bt_gatt_disconnected+0x108>)
    b17c:	1a1b      	subs	r3, r3, r0
    b17e:	08db      	lsrs	r3, r3, #3
    b180:	f363 128f 	bfi	r2, r3, #6, #10
    b184:	481d      	ldr	r0, [pc, #116]	; (b1fc <bt_gatt_disconnected+0x10c>)
    b186:	f013 f969 	bl	1e45c <log_1>
	cfg = find_cf_cfg(conn);
    b18a:	4620      	mov	r0, r4
    b18c:	f7ff fa8e 	bl	a6ac <find_cf_cfg>
	if (!cfg) {
    b190:	4605      	mov	r5, r0
    b192:	b1f0      	cbz	r0, b1d2 <bt_gatt_disconnected+0xe2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b194:	7a20      	ldrb	r0, [r4, #8]
    b196:	4631      	mov	r1, r6
    b198:	f014 fc61 	bl	1fa5e <bt_addr_le_is_bonded>
    b19c:	1c6b      	adds	r3, r5, #1
    b19e:	4604      	mov	r4, r0
    b1a0:	b9e8      	cbnz	r0, b1de <bt_gatt_disconnected+0xee>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    b1a2:	9003      	str	r0, [sp, #12]
    b1a4:	a903      	add	r1, sp, #12
    b1a6:	f8cd 000f 	str.w	r0, [sp, #15]
    b1aa:	4618      	mov	r0, r3
    b1ac:	f015 f8ee 	bl	2038c <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
    b1b0:	f105 0008 	add.w	r0, r5, #8
    b1b4:	2201      	movs	r2, #1
    b1b6:	4621      	mov	r1, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b1b8:	350c      	adds	r5, #12
    b1ba:	f014 fa4f 	bl	1f65c <memset>
    b1be:	f3bf 8f5b 	dmb	ish
    b1c2:	e855 3f00 	ldrex	r3, [r5]
    b1c6:	e845 4200 	strex	r2, r4, [r5]
    b1ca:	2a00      	cmp	r2, #0
    b1cc:	d1f9      	bne.n	b1c2 <bt_gatt_disconnected+0xd2>
    b1ce:	f3bf 8f5b 	dmb	ish
}
    b1d2:	b00d      	add	sp, #52	; 0x34
    b1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    b1d6:	4607      	mov	r7, r0
    b1d8:	e7ba      	b.n	b150 <bt_gatt_disconnected+0x60>
		if (conn->id) {
    b1da:	2701      	movs	r7, #1
    b1dc:	e7b8      	b.n	b150 <bt_gatt_disconnected+0x60>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b1de:	4631      	mov	r1, r6
    b1e0:	4618      	mov	r0, r3
    b1e2:	f015 f8d3 	bl	2038c <bt_addr_le_copy>
}
    b1e6:	e7f4      	b.n	b1d2 <bt_gatt_disconnected+0xe2>
    b1e8:	0000a3b1 	.word	0x0000a3b1
    b1ec:	000281f2 	.word	0x000281f2
    b1f0:	00025660 	.word	0x00025660
    b1f4:	000233ec 	.word	0x000233ec
    b1f8:	00023454 	.word	0x00023454
    b1fc:	00025663 	.word	0x00025663

0000b200 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    b200:	4a0d      	ldr	r2, [pc, #52]	; (b238 <bt_smp_accept+0x38>)
{
    b202:	b508      	push	{r3, lr}
		if (smp->chan.conn) {
    b204:	6813      	ldr	r3, [r2, #0]
    b206:	b923      	cbnz	r3, b212 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    b208:	480c      	ldr	r0, [pc, #48]	; (b23c <bt_smp_accept+0x3c>)
    b20a:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    b20c:	600a      	str	r2, [r1, #0]

		return 0;
    b20e:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    b210:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    b212:	2301      	movs	r3, #1
    b214:	f04f 0200 	mov.w	r2, #0
    b218:	f363 0207 	bfi	r2, r3, #0, #8
    b21c:	4908      	ldr	r1, [pc, #32]	; (b240 <bt_smp_accept+0x40>)
    b21e:	4b09      	ldr	r3, [pc, #36]	; (b244 <bt_smp_accept+0x44>)
    b220:	1a5b      	subs	r3, r3, r1
    b222:	08db      	lsrs	r3, r3, #3
    b224:	4601      	mov	r1, r0
    b226:	f363 128f 	bfi	r2, r3, #6, #10
    b22a:	4807      	ldr	r0, [pc, #28]	; (b248 <bt_smp_accept+0x48>)
    b22c:	f013 f916 	bl	1e45c <log_1>
	return -ENOMEM;
    b230:	f06f 000b 	mvn.w	r0, #11
    b234:	e7ec      	b.n	b210 <bt_smp_accept+0x10>
    b236:	bf00      	nop
    b238:	200008a8 	.word	0x200008a8
    b23c:	20007910 	.word	0x20007910
    b240:	000233ec 	.word	0x000233ec
    b244:	000234e4 	.word	0x000234e4
    b248:	0002581e 	.word	0x0002581e

0000b24c <bt_smp_init>:

int bt_smp_init(void)
{
    b24c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    b24e:	4802      	ldr	r0, [pc, #8]	; (b258 <bt_smp_init+0xc>)
    b250:	f7fe f842 	bl	92d8 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    b254:	2000      	movs	r0, #0
    b256:	bd08      	pop	{r3, pc}
    b258:	20007904 	.word	0x20007904

0000b25c <atomic_test_bit.constprop.3>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b25c:	4b04      	ldr	r3, [pc, #16]	; (b270 <atomic_test_bit.constprop.3+0x14>)
    b25e:	f3bf 8f5b 	dmb	ish
    b262:	6818      	ldr	r0, [r3, #0]
    b264:	f3bf 8f5b 	dmb	ish
}
    b268:	f000 0001 	and.w	r0, r0, #1
    b26c:	4770      	bx	lr
    b26e:	bf00      	nop
    b270:	2000792c 	.word	0x2000792c

0000b274 <bt_mesh_provision>:
#include "mesh.h"

int bt_mesh_provision(const u8_t net_key[16], u16_t net_idx,
		      u8_t flags, u32_t iv_index, u16_t addr,
		      const u8_t dev_key[16])
{
    b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b278:	4691      	mov	r9, r2
    b27a:	469a      	mov	sl, r3
	bool pb_gatt_enabled;
	int err;

	BT_INFO("Primary Element: 0x%04x", addr);
    b27c:	f04f 0200 	mov.w	r2, #0
    b280:	2303      	movs	r3, #3
{
    b282:	b087      	sub	sp, #28
	BT_INFO("Primary Element: 0x%04x", addr);
    b284:	f363 0207 	bfi	r2, r3, #0, #8
    b288:	4d38      	ldr	r5, [pc, #224]	; (b36c <bt_mesh_provision+0xf8>)
    b28a:	4b39      	ldr	r3, [pc, #228]	; (b370 <bt_mesh_provision+0xfc>)
{
    b28c:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
    b290:	4e38      	ldr	r6, [pc, #224]	; (b374 <bt_mesh_provision+0x100>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b292:	4c39      	ldr	r4, [pc, #228]	; (b378 <bt_mesh_provision+0x104>)
	BT_INFO("Primary Element: 0x%04x", addr);
    b294:	1aed      	subs	r5, r5, r3
    b296:	f3c5 05c9 	ubfx	r5, r5, #3, #10
{
    b29a:	4688      	mov	r8, r1
	BT_INFO("Primary Element: 0x%04x", addr);
    b29c:	f365 128f 	bfi	r2, r5, #6, #10
    b2a0:	4639      	mov	r1, r7
{
    b2a2:	4683      	mov	fp, r0
	BT_INFO("Primary Element: 0x%04x", addr);
    b2a4:	4835      	ldr	r0, [pc, #212]	; (b37c <bt_mesh_provision+0x108>)
    b2a6:	f013 f8d9 	bl	1e45c <log_1>
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
    b2aa:	2204      	movs	r2, #4
    b2ac:	f04f 0300 	mov.w	r3, #0
    b2b0:	f362 0307 	bfi	r3, r2, #0, #8
    b2b4:	f365 138f 	bfi	r3, r5, #6, #10
    b2b8:	a902      	add	r1, sp, #8
    b2ba:	4831      	ldr	r0, [pc, #196]	; (b380 <bt_mesh_provision+0x10c>)
    b2bc:	e9cd 6802 	strd	r6, r8, [sp, #8]
    b2c0:	e9cd 9a04 	strd	r9, sl, [sp, #16]
    b2c4:	f013 f911 	bl	1e4ea <log_n>
    b2c8:	f3bf 8f5b 	dmb	ish
    b2cc:	e854 3f00 	ldrex	r3, [r4]
    b2d0:	f043 0201 	orr.w	r2, r3, #1
    b2d4:	e844 2100 	strex	r1, r2, [r4]
    b2d8:	2900      	cmp	r1, #0
    b2da:	d1f7      	bne.n	b2cc <bt_mesh_provision+0x58>
    b2dc:	f3bf 8f5b 	dmb	ish
	       net_idx, flags, iv_index);

	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b2e0:	07db      	lsls	r3, r3, #31
    b2e2:	d440      	bmi.n	b366 <bt_mesh_provision+0xf2>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		if (bt_mesh_proxy_prov_disable() == 0) {
    b2e4:	f009 fe10 	bl	14f08 <bt_mesh_proxy_prov_disable>
		}
	} else {
		pb_gatt_enabled = false;
	}

	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    b2e8:	4653      	mov	r3, sl
		if (bt_mesh_proxy_prov_disable() == 0) {
    b2ea:	9001      	str	r0, [sp, #4]
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    b2ec:	465a      	mov	r2, fp
    b2ee:	4640      	mov	r0, r8
    b2f0:	4649      	mov	r1, r9
    b2f2:	f000 ff09 	bl	c108 <bt_mesh_net_create>
	if (err) {
    b2f6:	4680      	mov	r8, r0
    b2f8:	b198      	cbz	r0, b322 <bt_mesh_provision+0xae>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b2fa:	f3bf 8f5b 	dmb	ish
    b2fe:	e854 3f00 	ldrex	r3, [r4]
    b302:	f023 0301 	bic.w	r3, r3, #1
    b306:	e844 3200 	strex	r2, r3, [r4]
    b30a:	2a00      	cmp	r2, #0
    b30c:	d1f7      	bne.n	b2fe <bt_mesh_provision+0x8a>
    b30e:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_mesh.flags, BT_MESH_VALID);

		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) && pb_gatt_enabled) {
    b312:	9b01      	ldr	r3, [sp, #4]
    b314:	b90b      	cbnz	r3, b31a <bt_mesh_provision+0xa6>
			bt_mesh_proxy_prov_enable();
    b316:	f009 fdd5 	bl	14ec4 <bt_mesh_proxy_prov_enable>
	}

	bt_mesh_net_start();

	return 0;
}
    b31a:	4640      	mov	r0, r8
    b31c:	b007      	add	sp, #28
    b31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_mesh.seq = 0U;
    b322:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    b326:	4638      	mov	r0, r7
    b328:	f003 f9e0 	bl	e6ec <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    b32c:	9911      	ldr	r1, [sp, #68]	; 0x44
    b32e:	2210      	movs	r2, #16
    b330:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    b334:	f014 f968 	bl	1f608 <memcpy>
		BT_DBG("Storing network information persistently");
    b338:	2304      	movs	r3, #4
    b33a:	f04f 0200 	mov.w	r2, #0
    b33e:	f363 0207 	bfi	r2, r3, #0, #8
    b342:	f365 128f 	bfi	r2, r5, #6, #10
    b346:	4631      	mov	r1, r6
    b348:	480e      	ldr	r0, [pc, #56]	; (b384 <bt_mesh_provision+0x110>)
    b34a:	f013 f887 	bl	1e45c <log_1>
		bt_mesh_store_net();
    b34e:	f016 f9f3 	bl	21738 <bt_mesh_store_net>
		bt_mesh_store_subnet(&bt_mesh.sub[0]);
    b352:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    b356:	f016 fa03 	bl	21760 <bt_mesh_store_subnet>
		bt_mesh_store_iv(false);
    b35a:	4640      	mov	r0, r8
    b35c:	f016 f9ef 	bl	2173e <bt_mesh_store_iv>
	bt_mesh_net_start();
    b360:	f001 fd62 	bl	ce28 <bt_mesh_net_start>
	return 0;
    b364:	e7d9      	b.n	b31a <bt_mesh_provision+0xa6>
		return -EALREADY;
    b366:	f06f 0844 	mvn.w	r8, #68	; 0x44
    b36a:	e7d6      	b.n	b31a <bt_mesh_provision+0xa6>
    b36c:	000234ac 	.word	0x000234ac
    b370:	000233ec 	.word	0x000233ec
    b374:	0002584a 	.word	0x0002584a
    b378:	2000792c 	.word	0x2000792c
    b37c:	0002586c 	.word	0x0002586c
    b380:	00025884 	.word	0x00025884
    b384:	000258b4 	.word	0x000258b4

0000b388 <bt_mesh_reset>:

void bt_mesh_reset(void)
{
    b388:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    b38a:	f7ff ff67 	bl	b25c <atomic_test_bit.constprop.3>
    b38e:	b338      	cbz	r0, b3e0 <bt_mesh_reset+0x58>
		return;
	}

	bt_mesh.iv_index = 0U;
    b390:	4c14      	ldr	r4, [pc, #80]	; (b3e4 <bt_mesh_reset+0x5c>)
    b392:	2500      	movs	r5, #0
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    b394:	4629      	mov	r1, r5
    b396:	2204      	movs	r2, #4
    b398:	f104 0008 	add.w	r0, r4, #8
	bt_mesh.seq = 0U;
    b39c:	e9c4 5500 	strd	r5, r5, [r4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    b3a0:	f014 f95c 	bl	1f65c <memset>

	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    b3a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    b3a8:	f017 fdf7 	bl	22f9a <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    b3ac:	f006 fa1a 	bl	117e4 <bt_mesh_cfg_reset>

	bt_mesh_rx_reset();
    b3b0:	f002 fe90 	bl	e0d4 <bt_mesh_rx_reset>
	bt_mesh_tx_reset();
    b3b4:	f002 fea6 	bl	e104 <bt_mesh_tx_reset>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
    b3b8:	f009 fdf6 	bl	14fa8 <bt_mesh_proxy_gatt_disable>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_clear_net();
    b3bc:	f016 fa1e 	bl	217fc <bt_mesh_clear_net>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    b3c0:	4629      	mov	r1, r5
    b3c2:	2210      	movs	r2, #16
    b3c4:	f104 0044 	add.w	r0, r4, #68	; 0x44
    b3c8:	f014 f948 	bl	1f65c <memset>

	bt_mesh_scan_disable();
    b3cc:	f015 f9f9 	bl	207c2 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    b3d0:	f000 fcba 	bl	bd48 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    b3d4:	f003 f9a0 	bl	e718 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    b3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    b3dc:	f009 b990 	b.w	14700 <bt_mesh_prov_reset>
}
    b3e0:	bd38      	pop	{r3, r4, r5, pc}
    b3e2:	bf00      	nop
    b3e4:	20007924 	.word	0x20007924

0000b3e8 <bt_mesh_prov_enable>:
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
    b3e8:	b570      	push	{r4, r5, r6, lr}
    b3ea:	b086      	sub	sp, #24
    b3ec:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
    b3ee:	f015 f9cb 	bl	20788 <bt_mesh_is_provisioned>
    b3f2:	4605      	mov	r5, r0
    b3f4:	bb88      	cbnz	r0, b45a <bt_mesh_prov_enable+0x72>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_DEBUG)) {
		const struct bt_mesh_prov *prov = bt_mesh_prov_get();
    b3f6:	f009 f8bd 	bl	14574 <bt_mesh_prov_get>
		struct bt_uuid_128 uuid = { .uuid.type = BT_UUID_TYPE_128 };
    b3fa:	4629      	mov	r1, r5
		const struct bt_mesh_prov *prov = bt_mesh_prov_get();
    b3fc:	4606      	mov	r6, r0
		struct bt_uuid_128 uuid = { .uuid.type = BT_UUID_TYPE_128 };
    b3fe:	2211      	movs	r2, #17
    b400:	a801      	add	r0, sp, #4
    b402:	f014 f92b 	bl	1f65c <memset>
    b406:	2302      	movs	r3, #2
    b408:	f88d 3004 	strb.w	r3, [sp, #4]

		memcpy(uuid.val, prov->uuid, 16);
    b40c:	6831      	ldr	r1, [r6, #0]
    b40e:	2210      	movs	r2, #16
    b410:	f10d 0005 	add.w	r0, sp, #5
    b414:	f014 f8f8 	bl	1f608 <memcpy>
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
    b418:	2303      	movs	r3, #3
    b41a:	4a11      	ldr	r2, [pc, #68]	; (b460 <bt_mesh_prov_enable+0x78>)
    b41c:	f363 0507 	bfi	r5, r3, #0, #8
    b420:	4b10      	ldr	r3, [pc, #64]	; (b464 <bt_mesh_prov_enable+0x7c>)
    b422:	1a9b      	subs	r3, r3, r2
    b424:	08db      	lsrs	r3, r3, #3
    b426:	a801      	add	r0, sp, #4
    b428:	f363 158f 	bfi	r5, r3, #6, #10
    b42c:	f7fb fa40 	bl	68b0 <bt_uuid_str>
    b430:	462a      	mov	r2, r5
    b432:	4601      	mov	r1, r0
    b434:	480c      	ldr	r0, [pc, #48]	; (b468 <bt_mesh_prov_enable+0x80>)
    b436:	f013 f811 	bl	1e45c <log_1>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
    b43a:	07e3      	lsls	r3, r4, #31
    b43c:	d503      	bpl.n	b446 <bt_mesh_prov_enable+0x5e>
	    (bearers & BT_MESH_PROV_ADV)) {
		/* Make sure we're scanning for provisioning inviations */
		bt_mesh_scan_enable();
    b43e:	f000 f9a5 	bl	b78c <bt_mesh_scan_enable>
		/* Enable unprovisioned beacon sending */
		bt_mesh_beacon_enable();
    b442:	f000 fc5b 	bl	bcfc <bt_mesh_beacon_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
    b446:	f014 0002 	ands.w	r0, r4, #2
    b44a:	d004      	beq.n	b456 <bt_mesh_prov_enable+0x6e>
	    (bearers & BT_MESH_PROV_GATT)) {
		bt_mesh_proxy_prov_enable();
    b44c:	f009 fd3a 	bl	14ec4 <bt_mesh_proxy_prov_enable>
		bt_mesh_adv_update();
    b450:	f000 f912 	bl	b678 <bt_mesh_adv_update>
	}

	return 0;
    b454:	2000      	movs	r0, #0
}
    b456:	b006      	add	sp, #24
    b458:	bd70      	pop	{r4, r5, r6, pc}
		return -EALREADY;
    b45a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    b45e:	e7fa      	b.n	b456 <bt_mesh_prov_enable+0x6e>
    b460:	000233ec 	.word	0x000233ec
    b464:	000234ac 	.word	0x000234ac
    b468:	0002585c 	.word	0x0002585c

0000b46c <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    b46c:	4b02      	ldr	r3, [pc, #8]	; (b478 <adv_alloc+0xc>)
    b46e:	220c      	movs	r2, #12
    b470:	fb02 3000 	mla	r0, r2, r0, r3
    b474:	4770      	bx	lr
    b476:	bf00      	nop
    b478:	20000934 	.word	0x20000934

0000b47c <adv_thread>:
						thread->stack_info.size);
#endif
}

static void adv_thread(void *p1, void *p2, void *p3)
{
    b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Stopping advertising failed: err %d", err);
    b480:	4b4a      	ldr	r3, [pc, #296]	; (b5ac <adv_thread+0x130>)
    b482:	4e4b      	ldr	r6, [pc, #300]	; (b5b0 <adv_thread+0x134>)
    b484:	1af6      	subs	r6, r6, r3
{
    b486:	b087      	sub	sp, #28
		BT_ERR("Stopping advertising failed: err %d", err);
    b488:	f3c6 06c9 	ubfx	r6, r6, #3, #10

	while (1) {
		struct net_buf *buf;

		if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
    b48c:	2100      	movs	r1, #0
    b48e:	4849      	ldr	r0, [pc, #292]	; (b5b4 <adv_thread+0x138>)
    b490:	f016 fffd 	bl	2248e <net_buf_get>
    b494:	4605      	mov	r5, r0
			while (!buf) {
    b496:	2d00      	cmp	r5, #0
    b498:	d064      	beq.n	b564 <adv_thread+0xe8>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
    b49a:	696a      	ldr	r2, [r5, #20]
    b49c:	7a13      	ldrb	r3, [r2, #8]
    b49e:	0759      	lsls	r1, r3, #29
    b4a0:	d559      	bpl.n	b556 <adv_thread+0xda>
			BT_MESH_ADV(buf)->busy = 0U;
    b4a2:	f36f 0382 	bfc	r3, #2, #1
    b4a6:	7213      	strb	r3, [r2, #8]
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
    b4a8:	6969      	ldr	r1, [r5, #20]
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    b4aa:	4b43      	ldr	r3, [pc, #268]	; (b5b8 <adv_thread+0x13c>)
	adv_int = MAX(adv_int_min,
    b4ac:	7a4c      	ldrb	r4, [r1, #9]
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    b4ae:	7c1b      	ldrb	r3, [r3, #16]
    b4b0:	2b08      	cmp	r3, #8
	adv_int = MAX(adv_int_min,
    b4b2:	ea4f 03d4 	mov.w	r3, r4, lsr #3
    b4b6:	f103 0301 	add.w	r3, r3, #1
    b4ba:	f04f 000a 	mov.w	r0, #10
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    b4be:	bf8c      	ite	hi
    b4c0:	2214      	movhi	r2, #20
    b4c2:	2264      	movls	r2, #100	; 0x64
	adv_int = MAX(adv_int_min,
    b4c4:	4358      	muls	r0, r3
    b4c6:	4290      	cmp	r0, r2
    b4c8:	bfa6      	itte	ge
    b4ca:	eb03 0383 	addge.w	r3, r3, r3, lsl #2
    b4ce:	005a      	lslge	r2, r3, #1
    b4d0:	b292      	uxthlt	r2, r2
		    ((BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1) *
    b4d2:	f004 0307 	and.w	r3, r4, #7
		     (adv_int + 10)));
    b4d6:	f102 040a 	add.w	r4, r2, #10
	duration = (MESH_SCAN_WINDOW_MS +
    b4da:	fb03 4404 	mla	r4, r3, r4, r4
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    b4de:	7a0b      	ldrb	r3, [r1, #8]
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
    b4e0:	e9d1 7b00 	ldrd	r7, fp, [r1]
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    b4e4:	f003 0303 	and.w	r3, r3, #3
    b4e8:	4934      	ldr	r1, [pc, #208]	; (b5bc <adv_thread+0x140>)
    b4ea:	5ccb      	ldrb	r3, [r1, r3]
    b4ec:	f88d 3010 	strb.w	r3, [sp, #16]
	ad.data_len = buf->len;
    b4f0:	89ab      	ldrh	r3, [r5, #12]
    b4f2:	f88d 3011 	strb.w	r3, [sp, #17]
	ad.data = buf->data;
    b4f6:	68ab      	ldr	r3, [r5, #8]
    b4f8:	9305      	str	r3, [sp, #20]
	param.id = BT_ID_DEFAULT;
    b4fa:	2300      	movs	r3, #0
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    b4fc:	2105      	movs	r1, #5
    b4fe:	00d2      	lsls	r2, r2, #3
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b500:	9300      	str	r3, [sp, #0]
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    b502:	fbb2 f2f1 	udiv	r2, r2, r1
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b506:	a802      	add	r0, sp, #8
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    b508:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.interval_max = param.interval_min;
    b50c:	f8ad 200c 	strh.w	r2, [sp, #12]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b510:	a904      	add	r1, sp, #16
    b512:	2201      	movs	r2, #1
	param.id = BT_ID_DEFAULT;
    b514:	f8ad 3008 	strh.w	r3, [sp, #8]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b518:	f014 faa3 	bl	1fa62 <bt_le_adv_start>
	duration = (MESH_SCAN_WINDOW_MS +
    b51c:	341e      	adds	r4, #30
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b51e:	4682      	mov	sl, r0
	net_buf_unref(buf);
    b520:	4628      	mov	r0, r5
	duration = (MESH_SCAN_WINDOW_MS +
    b522:	b224      	sxth	r4, r4
	net_buf_unref(buf);
    b524:	f00f fb86 	bl	1ac34 <net_buf_unref>
	if (cb && cb->start) {
    b528:	b12f      	cbz	r7, b536 <adv_thread+0xba>
    b52a:	683d      	ldr	r5, [r7, #0]
    b52c:	b11d      	cbz	r5, b536 <adv_thread+0xba>
		cb->start(duration, err, cb_data);
    b52e:	b2a0      	uxth	r0, r4
    b530:	465a      	mov	r2, fp
    b532:	4651      	mov	r1, sl
    b534:	47a8      	blx	r5
	if (err) {
    b536:	f1ba 0f00 	cmp.w	sl, #0
    b53a:	d01d      	beq.n	b578 <adv_thread+0xfc>
		BT_ERR("Advertising failed: err %d", err);
    b53c:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    b540:	f042 0201 	orr.w	r2, r2, #1
    b544:	f362 0807 	bfi	r8, r2, #0, #8
    b548:	f366 188f 	bfi	r8, r6, #6, #10
    b54c:	481c      	ldr	r0, [pc, #112]	; (b5c0 <adv_thread+0x144>)
    b54e:	4642      	mov	r2, r8
    b550:	4651      	mov	r1, sl
		BT_ERR("Stopping advertising failed: err %d", err);
    b552:	f012 ff83 	bl	1e45c <log_1>
			adv_send(buf);
		}

		STACK_ANALYZE("adv stack", adv_thread_stack);
		k_thread_foreach(adv_stack_dump, "BT_MESH");
    b556:	491b      	ldr	r1, [pc, #108]	; (b5c4 <adv_thread+0x148>)
    b558:	481b      	ldr	r0, [pc, #108]	; (b5c8 <adv_thread+0x14c>)
    b55a:	f017 fc8c 	bl	22e76 <k_thread_foreach>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    b55e:	f010 fdd1 	bl	1c104 <z_impl_k_yield>
    b562:	e793      	b.n	b48c <adv_thread+0x10>
				timeout = bt_mesh_proxy_adv_start();
    b564:	f009 fdb2 	bl	150cc <bt_mesh_proxy_adv_start>
				buf = net_buf_get(&adv_queue, timeout);
    b568:	4601      	mov	r1, r0
    b56a:	4812      	ldr	r0, [pc, #72]	; (b5b4 <adv_thread+0x138>)
    b56c:	f016 ff8f 	bl	2248e <net_buf_get>
    b570:	4605      	mov	r5, r0
				bt_mesh_proxy_adv_stop();
    b572:	f009 ff39 	bl	153e8 <bt_mesh_proxy_adv_stop>
    b576:	e78e      	b.n	b496 <adv_thread+0x1a>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    b578:	4620      	mov	r0, r4
    b57a:	f010 fe09 	bl	1c190 <z_impl_k_sleep>
	err = bt_le_adv_stop();
    b57e:	f7fc ffc7 	bl	8510 <bt_le_adv_stop>
    b582:	4604      	mov	r4, r0
	if (cb && cb->end) {
    b584:	b11f      	cbz	r7, b58e <adv_thread+0x112>
    b586:	687b      	ldr	r3, [r7, #4]
    b588:	b10b      	cbz	r3, b58e <adv_thread+0x112>
		cb->end(err, cb_data);
    b58a:	4659      	mov	r1, fp
    b58c:	4798      	blx	r3
	if (err) {
    b58e:	2c00      	cmp	r4, #0
    b590:	d0e1      	beq.n	b556 <adv_thread+0xda>
		BT_ERR("Stopping advertising failed: err %d", err);
    b592:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    b596:	f043 0301 	orr.w	r3, r3, #1
    b59a:	f363 0907 	bfi	r9, r3, #0, #8
    b59e:	f366 198f 	bfi	r9, r6, #6, #10
    b5a2:	464a      	mov	r2, r9
    b5a4:	4621      	mov	r1, r4
    b5a6:	4809      	ldr	r0, [pc, #36]	; (b5cc <adv_thread+0x150>)
    b5a8:	e7d3      	b.n	b552 <adv_thread+0xd6>
    b5aa:	bf00      	nop
    b5ac:	000233ec 	.word	0x000233ec
    b5b0:	0002347c 	.word	0x0002347c
    b5b4:	200080dc 	.word	0x200080dc
    b5b8:	200070f8 	.word	0x200070f8
    b5bc:	00025935 	.word	0x00025935
    b5c0:	000258ee 	.word	0x000258ee
    b5c4:	0002592d 	.word	0x0002592d
    b5c8:	000207c1 	.word	0x000207c1
    b5cc:	00025909 	.word	0x00025909

0000b5d0 <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, s8_t rssi,
			    u8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
    b5d0:	2a03      	cmp	r2, #3
{
    b5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5d6:	460f      	mov	r7, r1
    b5d8:	461c      	mov	r4, r3
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
    b5da:	d025      	beq.n	b628 <bt_mesh_scan_cb+0x58>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    b5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state->offset = net_buf_simple_headroom(buf);
    b5e0:	4620      	mov	r0, r4
    b5e2:	f017 f873 	bl	226cc <net_buf_simple_headroom>
    b5e6:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    b5e8:	4620      	mov	r0, r4
	state->len = buf->len;
    b5ea:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    b5ee:	f017 f849 	bl	22684 <net_buf_simple_pull_u8>
		buf->len = len - 1;
    b5f2:	1e6b      	subs	r3, r5, #1
		switch (type) {
    b5f4:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    b5f6:	80a3      	strh	r3, [r4, #4]
		switch (type) {
    b5f8:	d007      	beq.n	b60a <bt_mesh_scan_cb+0x3a>
    b5fa:	282b      	cmp	r0, #43	; 0x2b
    b5fc:	d031      	beq.n	b662 <bt_mesh_scan_cb+0x92>
    b5fe:	2829      	cmp	r0, #41	; 0x29
    b600:	d108      	bne.n	b614 <bt_mesh_scan_cb+0x44>
			bt_mesh_pb_adv_recv(buf);
    b602:	4620      	mov	r0, r4
    b604:	f008 ffbc 	bl	14580 <bt_mesh_pb_adv_recv>
			break;
    b608:	e004      	b.n	b614 <bt_mesh_scan_cb+0x44>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    b60a:	2200      	movs	r2, #0
    b60c:	4639      	mov	r1, r7
    b60e:	4620      	mov	r0, r4
    b610:	f001 fabe 	bl	cb90 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    b614:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    b616:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    b61a:	fa13 f686 	uxtah	r6, r3, r6
    b61e:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
    b620:	4629      	mov	r1, r5
    b622:	4620      	mov	r0, r4
    b624:	f017 f81e 	bl	22664 <net_buf_simple_pull>
	while (buf->len > 1) {
    b628:	88a3      	ldrh	r3, [r4, #4]
    b62a:	2b01      	cmp	r3, #1
    b62c:	d9d6      	bls.n	b5dc <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
    b62e:	4620      	mov	r0, r4
    b630:	f017 f828 	bl	22684 <net_buf_simple_pull_u8>
		if (len == 0) {
    b634:	4605      	mov	r5, r0
    b636:	2800      	cmp	r0, #0
    b638:	d0d0      	beq.n	b5dc <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
    b63a:	88a2      	ldrh	r2, [r4, #4]
    b63c:	b283      	uxth	r3, r0
    b63e:	429a      	cmp	r2, r3
    b640:	d2ce      	bcs.n	b5e0 <bt_mesh_scan_cb+0x10>
			BT_WARN("AD malformed");
    b642:	2302      	movs	r3, #2
    b644:	f04f 0100 	mov.w	r1, #0
    b648:	f363 0107 	bfi	r1, r3, #0, #8
    b64c:	4a07      	ldr	r2, [pc, #28]	; (b66c <bt_mesh_scan_cb+0x9c>)
    b64e:	4b08      	ldr	r3, [pc, #32]	; (b670 <bt_mesh_scan_cb+0xa0>)
    b650:	4808      	ldr	r0, [pc, #32]	; (b674 <bt_mesh_scan_cb+0xa4>)
    b652:	1a9b      	subs	r3, r3, r2
    b654:	08db      	lsrs	r3, r3, #3
    b656:	f363 118f 	bfi	r1, r3, #6, #10
}
    b65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("AD malformed");
    b65e:	f012 bef0 	b.w	1e442 <log_0>
			bt_mesh_beacon_recv(buf);
    b662:	4620      	mov	r0, r4
    b664:	f000 fa52 	bl	bb0c <bt_mesh_beacon_recv>
			break;
    b668:	e7d4      	b.n	b614 <bt_mesh_scan_cb+0x44>
    b66a:	bf00      	nop
    b66c:	000233ec 	.word	0x000233ec
    b670:	0002347c 	.word	0x0002347c
    b674:	00025971 	.word	0x00025971

0000b678 <bt_mesh_adv_update>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_CANCEL_WAIT, k_queue_cancel_wait, struct k_queue *, queue)
    b678:	4801      	ldr	r0, [pc, #4]	; (b680 <bt_mesh_adv_update+0x8>)
    b67a:	f017 ba71 	b.w	22b60 <z_impl_k_queue_cancel_wait>
    b67e:	bf00      	nop
    b680:	200080dc 	.word	0x200080dc

0000b684 <bt_mesh_adv_create_from_pool>:
{
    b684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b688:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b68a:	4b19      	ldr	r3, [pc, #100]	; (b6f0 <bt_mesh_adv_create_from_pool+0x6c>)
    b68c:	f3bf 8f5b 	dmb	ish
    b690:	681d      	ldr	r5, [r3, #0]
    b692:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    b696:	f3c5 0540 	ubfx	r5, r5, #1, #1
    b69a:	460c      	mov	r4, r1
    b69c:	4690      	mov	r8, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    b69e:	b18d      	cbz	r5, b6c4 <bt_mesh_adv_create_from_pool+0x40>
		BT_WARN("Refusing to allocate buffer while suspended");
    b6a0:	2302      	movs	r3, #2
    b6a2:	f04f 0100 	mov.w	r1, #0
    b6a6:	f363 0107 	bfi	r1, r3, #0, #8
    b6aa:	4a12      	ldr	r2, [pc, #72]	; (b6f4 <bt_mesh_adv_create_from_pool+0x70>)
    b6ac:	4b12      	ldr	r3, [pc, #72]	; (b6f8 <bt_mesh_adv_create_from_pool+0x74>)
    b6ae:	4813      	ldr	r0, [pc, #76]	; (b6fc <bt_mesh_adv_create_from_pool+0x78>)
    b6b0:	1a9b      	subs	r3, r3, r2
    b6b2:	08db      	lsrs	r3, r3, #3
    b6b4:	f363 118f 	bfi	r1, r3, #6, #10
    b6b8:	f012 fec3 	bl	1e442 <log_0>
		return NULL;
    b6bc:	2600      	movs	r6, #0
}
    b6be:	4630      	mov	r0, r6
    b6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = net_buf_alloc(pool, timeout);
    b6c4:	9906      	ldr	r1, [sp, #24]
    b6c6:	f016 fedc 	bl	22482 <net_buf_alloc_fixed>
	if (!buf) {
    b6ca:	4606      	mov	r6, r0
    b6cc:	2800      	cmp	r0, #0
    b6ce:	d0f6      	beq.n	b6be <bt_mesh_adv_create_from_pool+0x3a>
	adv = get_id(net_buf_id(buf));
    b6d0:	f00f fa1c 	bl	1ab0c <net_buf_id>
    b6d4:	47a0      	blx	r4
    b6d6:	4604      	mov	r4, r0
	BT_MESH_ADV(buf) = adv;
    b6d8:	6170      	str	r0, [r6, #20]
	(void)memset(adv, 0, sizeof(*adv));
    b6da:	220c      	movs	r2, #12
    b6dc:	4629      	mov	r1, r5
    b6de:	f013 ffbd 	bl	1f65c <memset>
	adv->type         = type;
    b6e2:	7a23      	ldrb	r3, [r4, #8]
	adv->xmit         = xmit;
    b6e4:	7267      	strb	r7, [r4, #9]
	adv->type         = type;
    b6e6:	f368 0301 	bfi	r3, r8, #0, #2
    b6ea:	7223      	strb	r3, [r4, #8]
	return buf;
    b6ec:	e7e7      	b.n	b6be <bt_mesh_adv_create_from_pool+0x3a>
    b6ee:	bf00      	nop
    b6f0:	2000792c 	.word	0x2000792c
    b6f4:	000233ec 	.word	0x000233ec
    b6f8:	0002347c 	.word	0x0002347c
    b6fc:	00025939 	.word	0x00025939

0000b700 <bt_mesh_adv_create>:
{
    b700:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    b702:	460b      	mov	r3, r1
    b704:	9200      	str	r2, [sp, #0]
    b706:	4904      	ldr	r1, [pc, #16]	; (b718 <bt_mesh_adv_create+0x18>)
    b708:	4602      	mov	r2, r0
    b70a:	4804      	ldr	r0, [pc, #16]	; (b71c <bt_mesh_adv_create+0x1c>)
    b70c:	f7ff ffba 	bl	b684 <bt_mesh_adv_create_from_pool>
}
    b710:	b003      	add	sp, #12
    b712:	f85d fb04 	ldr.w	pc, [sp], #4
    b716:	bf00      	nop
    b718:	0000b46d 	.word	0x0000b46d
    b71c:	2000811c 	.word	0x2000811c

0000b720 <bt_mesh_adv_send>:
{
    b720:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    b722:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    b724:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    b728:	6942      	ldr	r2, [r0, #20]
    b72a:	7a13      	ldrb	r3, [r2, #8]
    b72c:	f043 0304 	orr.w	r3, r3, #4
    b730:	7213      	strb	r3, [r2, #8]
	net_buf_put(&adv_queue, net_buf_ref(buf));
    b732:	f016 ff26 	bl	22582 <net_buf_ref>
}
    b736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_put(&adv_queue, net_buf_ref(buf));
    b73a:	4601      	mov	r1, r0
    b73c:	4801      	ldr	r0, [pc, #4]	; (b744 <bt_mesh_adv_send+0x24>)
    b73e:	f016 bf13 	b.w	22568 <net_buf_put>
    b742:	bf00      	nop
    b744:	200080dc 	.word	0x200080dc

0000b748 <bt_mesh_adv_init>:

void bt_mesh_adv_init(void)
{
    b748:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    b74a:	4c0c      	ldr	r4, [pc, #48]	; (b77c <bt_mesh_adv_init+0x34>)
    b74c:	490c      	ldr	r1, [pc, #48]	; (b780 <bt_mesh_adv_init+0x38>)
    b74e:	b086      	sub	sp, #24
    b750:	2300      	movs	r3, #0
    b752:	f06f 0208 	mvn.w	r2, #8
    b756:	e9cd 3202 	strd	r3, r2, [sp, #8]
    b75a:	e9cd 3304 	strd	r3, r3, [sp, #16]
    b75e:	e9cd 3300 	strd	r3, r3, [sp]
    b762:	f44f 7240 	mov.w	r2, #768	; 0x300
    b766:	4b07      	ldr	r3, [pc, #28]	; (b784 <bt_mesh_adv_init+0x3c>)
    b768:	4620      	mov	r0, r4
    b76a:	f010 fe33 	bl	1c3d4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    b76e:	4906      	ldr	r1, [pc, #24]	; (b788 <bt_mesh_adv_init+0x40>)
    b770:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_THREAD_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
    b772:	b006      	add	sp, #24
    b774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b778:	f017 bb80 	b.w	22e7c <z_impl_k_thread_name_set>
    b77c:	20000a24 	.word	0x20000a24
    b780:	20002d18 	.word	0x20002d18
    b784:	0000b47d 	.word	0x0000b47d
    b788:	00025965 	.word	0x00025965

0000b78c <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    b78c:	b507      	push	{r0, r1, r2, lr}
	struct bt_le_scan_param scan_param = {
    b78e:	4b06      	ldr	r3, [pc, #24]	; (b7a8 <bt_mesh_scan_enable+0x1c>)
			.interval   = MESH_SCAN_INTERVAL,
			.window     = MESH_SCAN_WINDOW };

	BT_DBG("");

	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    b790:	4906      	ldr	r1, [pc, #24]	; (b7ac <bt_mesh_scan_enable+0x20>)
	struct bt_le_scan_param scan_param = {
    b792:	6818      	ldr	r0, [r3, #0]
    b794:	9000      	str	r0, [sp, #0]
    b796:	889b      	ldrh	r3, [r3, #4]
    b798:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    b79c:	4668      	mov	r0, sp
    b79e:	f7fc fedd 	bl	855c <bt_le_scan_start>
}
    b7a2:	b003      	add	sp, #12
    b7a4:	f85d fb04 	ldr.w	pc, [sp], #4
    b7a8:	000235c0 	.word	0x000235c0
    b7ac:	0000b5d1 	.word	0x0000b5d1

0000b7b0 <k_work_submit_to_queue.constprop.3>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b7b0:	4909      	ldr	r1, [pc, #36]	; (b7d8 <k_work_submit_to_queue.constprop.3+0x28>)
    b7b2:	f3bf 8f5b 	dmb	ish
    b7b6:	e851 3f00 	ldrex	r3, [r1]
    b7ba:	f043 0201 	orr.w	r2, r3, #1
    b7be:	e841 2000 	strex	r0, r2, [r1]
    b7c2:	2800      	cmp	r0, #0
    b7c4:	d1f7      	bne.n	b7b6 <k_work_submit_to_queue.constprop.3+0x6>
    b7c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b7ca:	07db      	lsls	r3, r3, #31
    b7cc:	d403      	bmi.n	b7d6 <k_work_submit_to_queue.constprop.3+0x26>
		k_queue_append(&work_q->queue, work);
    b7ce:	3908      	subs	r1, #8
    b7d0:	4802      	ldr	r0, [pc, #8]	; (b7dc <k_work_submit_to_queue.constprop.3+0x2c>)
    b7d2:	f017 b9d8 	b.w	22b86 <k_queue_append>
}
    b7d6:	4770      	bx	lr
    b7d8:	20000a98 	.word	0x20000a98
    b7dc:	20001c74 	.word	0x20001c74

0000b7e0 <bt_mesh_beacon_create>:
	sub->beacon_sent = k_uptime_get_32();
}

void bt_mesh_beacon_create(struct bt_mesh_subnet *sub,
			   struct net_buf_simple *buf)
{
    b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b7e2:	460c      	mov	r4, r1
    b7e4:	4605      	mov	r5, r0
	u8_t flags = bt_mesh_net_flags(sub);
    b7e6:	f014 fff4 	bl	207d2 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;

	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    b7ea:	2101      	movs	r1, #1
	u8_t flags = bt_mesh_net_flags(sub);
    b7ec:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    b7ee:	4620      	mov	r0, r4
    b7f0:	f016 feda 	bl	225a8 <net_buf_simple_add_u8>

	if (sub->kr_flag) {
    b7f4:	7fab      	ldrb	r3, [r5, #30]
    b7f6:	b1c3      	cbz	r3, b82a <bt_mesh_beacon_create+0x4a>
		keys = &sub->keys[1];
    b7f8:	f105 0689 	add.w	r6, r5, #137	; 0x89
	} else {
		keys = &sub->keys[0];
	}

	net_buf_simple_add_u8(buf, flags);
    b7fc:	4639      	mov	r1, r7
    b7fe:	4620      	mov	r0, r4
    b800:	f016 fed2 	bl	225a8 <net_buf_simple_add_u8>

	/* Network ID */
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    b804:	2208      	movs	r2, #8
    b806:	f106 0121 	add.w	r1, r6, #33	; 0x21
    b80a:	4620      	mov	r0, r4
    b80c:	f016 fec3 	bl	22596 <net_buf_simple_add_mem>

	/* IV Index */
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    b810:	4b07      	ldr	r3, [pc, #28]	; (b830 <bt_mesh_beacon_create+0x50>)
    b812:	4620      	mov	r0, r4
    b814:	6819      	ldr	r1, [r3, #0]
    b816:	f016 fef0 	bl	225fa <net_buf_simple_add_be32>

	net_buf_simple_add_mem(buf, sub->auth, 8);
    b81a:	f105 0128 	add.w	r1, r5, #40	; 0x28
    b81e:	4620      	mov	r0, r4
    b820:	2208      	movs	r2, #8

	BT_DBG("net_idx 0x%04x flags 0x%02x NetID %s", sub->net_idx,
	       flags, bt_hex(keys->net_id, 8));
	BT_DBG("IV Index 0x%08x Auth %s", bt_mesh.iv_index,
	       bt_hex(sub->auth, 8));
}
    b822:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    b826:	f016 beb6 	b.w	22596 <net_buf_simple_add_mem>
		keys = &sub->keys[0];
    b82a:	f105 0630 	add.w	r6, r5, #48	; 0x30
    b82e:	e7e5      	b.n	b7fc <bt_mesh_beacon_create+0x1c>
    b830:	20007924 	.word	0x20007924

0000b834 <beacon_send>:
		sub->beacons_cur = 0U;
	}
}

static void beacon_send(struct k_work *work)
{
    b834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b838:	b08b      	sub	sp, #44	; 0x2c
	/* Don't send anything if we have an active provisioning link */
	if (IS_ENABLED(CONFIG_BT_MESH_PROV) && bt_prov_active()) {
    b83a:	f016 f887 	bl	2194c <bt_prov_active>
    b83e:	b110      	cbz	r0, b846 <beacon_send+0x12>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b840:	f241 3288 	movw	r2, #5000	; 0x1388
    b844:	e05f      	b.n	b906 <beacon_send+0xd2>
		return;
	}

	BT_DBG("");

	if (bt_mesh_is_provisioned()) {
    b846:	f014 ff9f 	bl	20788 <bt_mesh_is_provisioned>
    b84a:	4605      	mov	r5, r0
    b84c:	2800      	cmp	r0, #0
    b84e:	d07f      	beq.n	b950 <beacon_send+0x11c>
	first_half = !first_half;
    b850:	4b89      	ldr	r3, [pc, #548]	; (ba78 <beacon_send+0x244>)
    b852:	781a      	ldrb	r2, [r3, #0]
    b854:	f082 0201 	eor.w	r2, r2, #1
    b858:	701a      	strb	r2, [r3, #0]
	if (first_half) {
    b85a:	4b88      	ldr	r3, [pc, #544]	; (ba7c <beacon_send+0x248>)
    b85c:	b9ca      	cbnz	r2, b892 <beacon_send+0x5e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b85e:	f8b3 00c0 	ldrh.w	r0, [r3, #192]	; 0xc0
    b862:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b866:	4288      	cmp	r0, r1
		sub->beacons_last = sub->beacons_cur;
    b868:	bf1c      	itt	ne
    b86a:	f893 10a9 	ldrbne.w	r1, [r3, #169]	; 0xa9
    b86e:	f883 10a8 	strbne.w	r1, [r3, #168]	; 0xa8
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b872:	f8b3 11a4 	ldrh.w	r1, [r3, #420]	; 0x1a4
		sub->beacons_cur = 0U;
    b876:	bf18      	it	ne
    b878:	f883 20a9 	strbne.w	r2, [r3, #169]	; 0xa9
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b87c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b880:	4291      	cmp	r1, r2
		sub->beacons_last = sub->beacons_cur;
    b882:	bf1f      	itttt	ne
    b884:	f893 218d 	ldrbne.w	r2, [r3, #397]	; 0x18d
    b888:	f883 218c 	strbne.w	r2, [r3, #396]	; 0x18c
		sub->beacons_cur = 0U;
    b88c:	2200      	movne	r2, #0
    b88e:	f883 218d 	strbne.w	r2, [r3, #397]	; 0x18d
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    b892:	f017 fbd3 	bl	2303c <z_impl_k_uptime_get_32>
    b896:	f8df 91e4 	ldr.w	r9, [pc, #484]	; ba7c <beacon_send+0x248>
		if (time_diff < K_SECONDS(600) &&
    b89a:	4f79      	ldr	r7, [pc, #484]	; (ba80 <beacon_send+0x24c>)
		bt_mesh_adv_send(buf, &send_cb, sub);
    b89c:	f8df 8204 	ldr.w	r8, [pc, #516]	; baa4 <beacon_send+0x270>
    b8a0:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    b8a2:	2400      	movs	r4, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b8a4:	f64f 76ff 	movw	r6, #65535	; 0xffff
    b8a8:	f8b9 30c0 	ldrh.w	r3, [r9, #192]	; 0xc0
    b8ac:	42b3      	cmp	r3, r6
    b8ae:	d03e      	beq.n	b92e <beacon_send+0xfa>
		time_diff = now - sub->beacon_sent;
    b8b0:	f8d9 20a4 	ldr.w	r2, [r9, #164]	; 0xa4
    b8b4:	1aaa      	subs	r2, r5, r2
		if (time_diff < K_SECONDS(600) &&
    b8b6:	42ba      	cmp	r2, r7
    b8b8:	d80a      	bhi.n	b8d0 <beacon_send+0x9c>
		    time_diff < BEACON_THRESHOLD(sub)) {
    b8ba:	f899 10a8 	ldrb.w	r1, [r9, #168]	; 0xa8
    b8be:	f242 7310 	movw	r3, #10000	; 0x2710
    b8c2:	fb01 3303 	mla	r3, r1, r3, r3
    b8c6:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    b8ca:	3b08      	subs	r3, #8
		if (time_diff < K_SECONDS(600) &&
    b8cc:	429a      	cmp	r2, r3
    b8ce:	d32e      	bcc.n	b92e <beacon_send+0xfa>
		buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT,
    b8d0:	2200      	movs	r2, #0
    b8d2:	2108      	movs	r1, #8
    b8d4:	2002      	movs	r0, #2
    b8d6:	f7ff ff13 	bl	b700 <bt_mesh_adv_create>
		if (!buf) {
    b8da:	4682      	mov	sl, r0
    b8dc:	b9c0      	cbnz	r0, b910 <beacon_send+0xdc>
			BT_ERR("Unable to allocate beacon buffer");
    b8de:	2301      	movs	r3, #1
    b8e0:	f04f 0100 	mov.w	r1, #0
    b8e4:	f363 0107 	bfi	r1, r3, #0, #8
    b8e8:	4a66      	ldr	r2, [pc, #408]	; (ba84 <beacon_send+0x250>)
    b8ea:	4b67      	ldr	r3, [pc, #412]	; (ba88 <beacon_send+0x254>)
    b8ec:	4867      	ldr	r0, [pc, #412]	; (ba8c <beacon_send+0x258>)
    b8ee:	1a9b      	subs	r3, r3, r2
    b8f0:	08db      	lsrs	r3, r3, #3
    b8f2:	f363 118f 	bfi	r1, r3, #6, #10
    b8f6:	f012 fda4 	bl	1e442 <log_0>
		update_beacon_observation();
		secure_beacon_send();

		/* Only resubmit if beaconing is still enabled */
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    b8fa:	f005 fa33 	bl	10d64 <bt_mesh_beacon_get>
    b8fe:	2801      	cmp	r0, #1
    b900:	d11b      	bne.n	b93a <beacon_send+0x106>
    b902:	f242 7210 	movw	r2, #10000	; 0x2710
    b906:	4962      	ldr	r1, [pc, #392]	; (ba90 <beacon_send+0x25c>)
    b908:	4862      	ldr	r0, [pc, #392]	; (ba94 <beacon_send+0x260>)
    b90a:	f010 fe15 	bl	1c538 <k_delayed_work_submit_to_queue>
    b90e:	e01c      	b.n	b94a <beacon_send+0x116>
    b910:	f109 0ba4 	add.w	fp, r9, #164	; 0xa4
		bt_mesh_beacon_create(sub, &buf->b);
    b914:	f100 0108 	add.w	r1, r0, #8
    b918:	4658      	mov	r0, fp
    b91a:	f7ff ff61 	bl	b7e0 <bt_mesh_beacon_create>
		bt_mesh_adv_send(buf, &send_cb, sub);
    b91e:	4650      	mov	r0, sl
    b920:	465a      	mov	r2, fp
    b922:	4641      	mov	r1, r8
    b924:	f7ff fefc 	bl	b720 <bt_mesh_adv_send>
		net_buf_unref(buf);
    b928:	4650      	mov	r0, sl
    b92a:	f00f f983 	bl	1ac34 <net_buf_unref>
    b92e:	f109 09e4 	add.w	r9, r9, #228	; 0xe4
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    b932:	2c00      	cmp	r4, #0
    b934:	d1e1      	bne.n	b8fa <beacon_send+0xc6>
    b936:	2401      	movs	r4, #1
    b938:	e7b6      	b.n	b8a8 <beacon_send+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b93a:	4b57      	ldr	r3, [pc, #348]	; (ba98 <beacon_send+0x264>)
    b93c:	f3bf 8f5b 	dmb	ish
    b940:	681b      	ldr	r3, [r3, #0]
    b942:	f3bf 8f5b 	dmb	ish
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    b946:	071b      	lsls	r3, r3, #28
    b948:	d4db      	bmi.n	b902 <beacon_send+0xce>
	} else {
		unprovisioned_beacon_send();
		k_delayed_work_submit(&beacon_timer, UNPROVISIONED_INTERVAL);
	}

}
    b94a:	b00b      	add	sp, #44	; 0x2c
    b94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t uri_hash[16] = { 0 };
    b950:	4601      	mov	r1, r0
    b952:	2210      	movs	r2, #16
    b954:	a802      	add	r0, sp, #8
    b956:	f013 fe81 	bl	1f65c <memset>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    b95a:	462a      	mov	r2, r5
    b95c:	210a      	movs	r1, #10
    b95e:	2002      	movs	r0, #2
    b960:	f7ff fece 	bl	b700 <bt_mesh_adv_create>
	if (!buf) {
    b964:	4606      	mov	r6, r0
    b966:	b970      	cbnz	r0, b986 <beacon_send+0x152>
		BT_ERR("Unable to allocate beacon buffer");
    b968:	2301      	movs	r3, #1
    b96a:	f04f 0100 	mov.w	r1, #0
    b96e:	f363 0107 	bfi	r1, r3, #0, #8
    b972:	4a44      	ldr	r2, [pc, #272]	; (ba84 <beacon_send+0x250>)
    b974:	4b44      	ldr	r3, [pc, #272]	; (ba88 <beacon_send+0x254>)
    b976:	4845      	ldr	r0, [pc, #276]	; (ba8c <beacon_send+0x258>)
    b978:	1a9b      	subs	r3, r3, r2
    b97a:	08db      	lsrs	r3, r3, #3
    b97c:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("Unable to allocate URI buffer");
    b980:	f012 fd5f 	bl	1e442 <log_0>
			return -ENOBUFS;
    b984:	e75c      	b.n	b840 <beacon_send+0xc>
	prov = bt_mesh_prov_get();
    b986:	f008 fdf5 	bl	14574 <bt_mesh_prov_get>
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    b98a:	f106 0708 	add.w	r7, r6, #8
	prov = bt_mesh_prov_get();
    b98e:	4604      	mov	r4, r0
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    b990:	4629      	mov	r1, r5
    b992:	4638      	mov	r0, r7
    b994:	f016 fe08 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, prov->uuid, 16);
    b998:	2210      	movs	r2, #16
    b99a:	6821      	ldr	r1, [r4, #0]
    b99c:	4638      	mov	r0, r7
    b99e:	f016 fdfa 	bl	22596 <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    b9a2:	f8d4 8004 	ldr.w	r8, [r4, #4]
    b9a6:	f1b8 0f00 	cmp.w	r8, #0
    b9aa:	d03b      	beq.n	ba24 <beacon_send+0x1f0>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
}

static inline bool bt_mesh_s1(const char *m, u8_t salt[16])
{
	const u8_t zero[16] = { 0 };
    b9ac:	2210      	movs	r2, #16
    b9ae:	4629      	mov	r1, r5
    b9b0:	a806      	add	r0, sp, #24
    b9b2:	f013 fe53 	bl	1f65c <memset>

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    b9b6:	4640      	mov	r0, r8
    b9b8:	f013 fdec 	bl	1f594 <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    b9bc:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    b9be:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    b9c2:	2201      	movs	r2, #1
    b9c4:	4669      	mov	r1, sp
    b9c6:	a806      	add	r0, sp, #24
    b9c8:	f015 f9e4 	bl	20d94 <bt_mesh_aes_cmac>
    b9cc:	bb50      	cbnz	r0, ba24 <beacon_send+0x1f0>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    b9ce:	8921      	ldrh	r1, [r4, #8]
    b9d0:	f041 0102 	orr.w	r1, r1, #2
	net_buf_add_be16(buf, oob_info);
    b9d4:	4638      	mov	r0, r7
    b9d6:	f016 fdfe 	bl	225d6 <net_buf_simple_add_be16>
	net_buf_add_mem(buf, uri_hash, 4);
    b9da:	2204      	movs	r2, #4
    b9dc:	a902      	add	r1, sp, #8
    b9de:	4638      	mov	r0, r7
    b9e0:	f016 fdd9 	bl	22596 <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    b9e4:	2200      	movs	r2, #0
    b9e6:	4611      	mov	r1, r2
    b9e8:	4630      	mov	r0, r6
    b9ea:	f7ff fe99 	bl	b720 <bt_mesh_adv_send>
	net_buf_unref(buf);
    b9ee:	4630      	mov	r0, r6
    b9f0:	f00f f920 	bl	1ac34 <net_buf_unref>
	if (prov->uri) {
    b9f4:	6863      	ldr	r3, [r4, #4]
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	f43f af22 	beq.w	b840 <beacon_send+0xc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    b9fc:	2200      	movs	r2, #0
    b9fe:	210a      	movs	r1, #10
    ba00:	2003      	movs	r0, #3
    ba02:	f7ff fe7d 	bl	b700 <bt_mesh_adv_create>
		if (!buf) {
    ba06:	4605      	mov	r5, r0
    ba08:	b970      	cbnz	r0, ba28 <beacon_send+0x1f4>
			BT_ERR("Unable to allocate URI buffer");
    ba0a:	2301      	movs	r3, #1
    ba0c:	f04f 0100 	mov.w	r1, #0
    ba10:	f363 0107 	bfi	r1, r3, #0, #8
    ba14:	4a1b      	ldr	r2, [pc, #108]	; (ba84 <beacon_send+0x250>)
    ba16:	4b1c      	ldr	r3, [pc, #112]	; (ba88 <beacon_send+0x254>)
    ba18:	4820      	ldr	r0, [pc, #128]	; (ba9c <beacon_send+0x268>)
    ba1a:	1a9b      	subs	r3, r3, r2
    ba1c:	08db      	lsrs	r3, r3, #3
    ba1e:	f363 118f 	bfi	r1, r3, #6, #10
    ba22:	e7ad      	b.n	b980 <beacon_send+0x14c>
		oob_info = prov->oob_info;
    ba24:	8921      	ldrh	r1, [r4, #8]
    ba26:	e7d5      	b.n	b9d4 <beacon_send+0x1a0>
		len = strlen(prov->uri);
    ba28:	6860      	ldr	r0, [r4, #4]
    ba2a:	f013 fdb3 	bl	1f594 <strlen>
		if (net_buf_tailroom(buf) < len) {
    ba2e:	f105 0608 	add.w	r6, r5, #8
		len = strlen(prov->uri);
    ba32:	4607      	mov	r7, r0
		if (net_buf_tailroom(buf) < len) {
    ba34:	4630      	mov	r0, r6
    ba36:	f016 fe4d 	bl	226d4 <net_buf_simple_tailroom>
    ba3a:	4287      	cmp	r7, r0
    ba3c:	d911      	bls.n	ba62 <beacon_send+0x22e>
			BT_WARN("Too long URI to fit advertising data");
    ba3e:	2302      	movs	r3, #2
    ba40:	f04f 0100 	mov.w	r1, #0
    ba44:	f363 0107 	bfi	r1, r3, #0, #8
    ba48:	4a0e      	ldr	r2, [pc, #56]	; (ba84 <beacon_send+0x250>)
    ba4a:	4b0f      	ldr	r3, [pc, #60]	; (ba88 <beacon_send+0x254>)
    ba4c:	4814      	ldr	r0, [pc, #80]	; (baa0 <beacon_send+0x26c>)
    ba4e:	1a9b      	subs	r3, r3, r2
    ba50:	08db      	lsrs	r3, r3, #3
    ba52:	f363 118f 	bfi	r1, r3, #6, #10
    ba56:	f012 fcf4 	bl	1e442 <log_0>
		net_buf_unref(buf);
    ba5a:	4628      	mov	r0, r5
    ba5c:	f00f f8ea 	bl	1ac34 <net_buf_unref>
    ba60:	e6ee      	b.n	b840 <beacon_send+0xc>
			net_buf_add_mem(buf, prov->uri, len);
    ba62:	463a      	mov	r2, r7
    ba64:	6861      	ldr	r1, [r4, #4]
    ba66:	4630      	mov	r0, r6
    ba68:	f016 fd95 	bl	22596 <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    ba6c:	2200      	movs	r2, #0
    ba6e:	4611      	mov	r1, r2
    ba70:	4628      	mov	r0, r5
    ba72:	f7ff fe55 	bl	b720 <bt_mesh_adv_send>
    ba76:	e7f0      	b.n	ba5a <beacon_send+0x226>
    ba78:	200022eb 	.word	0x200022eb
    ba7c:	20007924 	.word	0x20007924
    ba80:	000927bf 	.word	0x000927bf
    ba84:	000233ec 	.word	0x000233ec
    ba88:	00023484 	.word	0x00023484
    ba8c:	0002598a 	.word	0x0002598a
    ba90:	20000a90 	.word	0x20000a90
    ba94:	20001c74 	.word	0x20001c74
    ba98:	2000792c 	.word	0x2000792c
    ba9c:	000259ab 	.word	0x000259ab
    baa0:	000259c9 	.word	0x000259c9
    baa4:	00023a78 	.word	0x00023a78

0000baa8 <bt_mesh_beacon_init>:
	}
}

void bt_mesh_beacon_init(void)
{
	k_delayed_work_init(&beacon_timer, beacon_send);
    baa8:	4901      	ldr	r1, [pc, #4]	; (bab0 <bt_mesh_beacon_init+0x8>)
    baaa:	4802      	ldr	r0, [pc, #8]	; (bab4 <bt_mesh_beacon_init+0xc>)
    baac:	f017 ba6d 	b.w	22f8a <k_delayed_work_init>
    bab0:	0000b835 	.word	0x0000b835
    bab4:	20000a90 	.word	0x20000a90

0000bab8 <bt_mesh_beacon_ivu_initiator>:
}

void bt_mesh_beacon_ivu_initiator(bool enable)
{
    bab8:	b508      	push	{r3, lr}
    baba:	4b12      	ldr	r3, [pc, #72]	; (bb04 <bt_mesh_beacon_ivu_initiator+0x4c>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    babc:	f3bf 8f5b 	dmb	ish
	if (val) {
    bac0:	b168      	cbz	r0, bade <bt_mesh_beacon_ivu_initiator+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bac2:	e853 2f00 	ldrex	r2, [r3]
    bac6:	f042 0208 	orr.w	r2, r2, #8
    baca:	e843 2100 	strex	r1, r2, [r3]
    bace:	2900      	cmp	r1, #0
    bad0:	d1f7      	bne.n	bac2 <bt_mesh_beacon_ivu_initiator+0xa>
    bad2:	f3bf 8f5b 	dmb	ish
	if (enable) {
		k_work_submit(&beacon_timer.work);
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
		k_delayed_work_cancel(&beacon_timer);
	}
}
    bad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_submit_to_queue(&k_sys_work_q, work);
    bada:	f7ff be69 	b.w	b7b0 <k_work_submit_to_queue.constprop.3>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bade:	e853 2f00 	ldrex	r2, [r3]
    bae2:	f022 0208 	bic.w	r2, r2, #8
    bae6:	e843 2100 	strex	r1, r2, [r3]
    baea:	2900      	cmp	r1, #0
    baec:	d1f7      	bne.n	bade <bt_mesh_beacon_ivu_initiator+0x26>
    baee:	f3bf 8f5b 	dmb	ish
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
    baf2:	f005 f937 	bl	10d64 <bt_mesh_beacon_get>
    baf6:	b920      	cbnz	r0, bb02 <bt_mesh_beacon_ivu_initiator+0x4a>
		k_delayed_work_cancel(&beacon_timer);
    baf8:	4803      	ldr	r0, [pc, #12]	; (bb08 <bt_mesh_beacon_ivu_initiator+0x50>)
}
    bafa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    bafe:	f017 ba4c 	b.w	22f9a <k_delayed_work_cancel>
}
    bb02:	bd08      	pop	{r3, pc}
    bb04:	2000792c 	.word	0x2000792c
    bb08:	20000a90 	.word	0x20000a90

0000bb0c <bt_mesh_beacon_recv>:
{
    bb0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (buf->len < 1) {
    bb10:	8883      	ldrh	r3, [r0, #4]
{
    bb12:	4605      	mov	r5, r0
	if (buf->len < 1) {
    bb14:	b973      	cbnz	r3, bb34 <bt_mesh_beacon_recv+0x28>
		BT_ERR("Too short beacon");
    bb16:	2301      	movs	r3, #1
    bb18:	f04f 0100 	mov.w	r1, #0
    bb1c:	f363 0107 	bfi	r1, r3, #0, #8
    bb20:	4a6b      	ldr	r2, [pc, #428]	; (bcd0 <bt_mesh_beacon_recv+0x1c4>)
    bb22:	4b6c      	ldr	r3, [pc, #432]	; (bcd4 <bt_mesh_beacon_recv+0x1c8>)
    bb24:	486c      	ldr	r0, [pc, #432]	; (bcd8 <bt_mesh_beacon_recv+0x1cc>)
    bb26:	1a9b      	subs	r3, r3, r2
    bb28:	08db      	lsrs	r3, r3, #3
    bb2a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    bb2e:	f012 fc88 	bl	1e442 <log_0>
		return;
    bb32:	e042      	b.n	bbba <bt_mesh_beacon_recv+0xae>
	type = net_buf_simple_pull_u8(buf);
    bb34:	f016 fda6 	bl	22684 <net_buf_simple_pull_u8>
	switch (type) {
    bb38:	4601      	mov	r1, r0
    bb3a:	2800      	cmp	r0, #0
    bb3c:	d03d      	beq.n	bbba <bt_mesh_beacon_recv+0xae>
    bb3e:	2801      	cmp	r0, #1
    bb40:	f040 80b5 	bne.w	bcae <bt_mesh_beacon_recv+0x1a2>
	if (buf->len < 21) {
    bb44:	88a9      	ldrh	r1, [r5, #4]
    bb46:	2914      	cmp	r1, #20
    bb48:	d80e      	bhi.n	bb68 <bt_mesh_beacon_recv+0x5c>
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    bb4a:	2301      	movs	r3, #1
    bb4c:	f04f 0200 	mov.w	r2, #0
    bb50:	f363 0207 	bfi	r2, r3, #0, #8
    bb54:	485e      	ldr	r0, [pc, #376]	; (bcd0 <bt_mesh_beacon_recv+0x1c4>)
    bb56:	4b5f      	ldr	r3, [pc, #380]	; (bcd4 <bt_mesh_beacon_recv+0x1c8>)
    bb58:	1a1b      	subs	r3, r3, r0
    bb5a:	08db      	lsrs	r3, r3, #3
    bb5c:	485f      	ldr	r0, [pc, #380]	; (bcdc <bt_mesh_beacon_recv+0x1d0>)
    bb5e:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("Unknown beacon type 0x%02x", type);
    bb62:	f012 fc7b 	bl	1e45c <log_1>
    bb66:	e028      	b.n	bbba <bt_mesh_beacon_recv+0xae>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    bb68:	4c5d      	ldr	r4, [pc, #372]	; (bce0 <bt_mesh_beacon_recv+0x1d4>)
	sub = cache_check(buf->data);
    bb6a:	682e      	ldr	r6, [r5, #0]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    bb6c:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
    bb70:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bb74:	429a      	cmp	r2, r3
    bb76:	4627      	mov	r7, r4
    bb78:	d122      	bne.n	bbc0 <bt_mesh_beacon_recv+0xb4>
    bb7a:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
    bb7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bb82:	429a      	cmp	r2, r3
    bb84:	d126      	bne.n	bbd4 <bt_mesh_beacon_recv+0xc8>
	flags = net_buf_simple_pull_u8(buf);
    bb86:	4628      	mov	r0, r5
	data = buf->data;
    bb88:	f8d5 8000 	ldr.w	r8, [r5]
	flags = net_buf_simple_pull_u8(buf);
    bb8c:	f016 fd7a 	bl	22684 <net_buf_simple_pull_u8>
	net_id = net_buf_simple_pull(buf, 8);
    bb90:	2108      	movs	r1, #8
	flags = net_buf_simple_pull_u8(buf);
    bb92:	4606      	mov	r6, r0
	net_id = net_buf_simple_pull(buf, 8);
    bb94:	4628      	mov	r0, r5
    bb96:	f016 fd65 	bl	22664 <net_buf_simple_pull>
    bb9a:	4604      	mov	r4, r0
	iv_index = net_buf_simple_pull_be32(buf);
    bb9c:	4628      	mov	r0, r5
    bb9e:	f016 fd8c 	bl	226ba <net_buf_simple_pull_be32>
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    bba2:	f10d 030f 	add.w	r3, sp, #15
    bba6:	9300      	str	r3, [sp, #0]
    bba8:	4602      	mov	r2, r0
	iv_index = net_buf_simple_pull_be32(buf);
    bbaa:	4607      	mov	r7, r0
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    bbac:	682b      	ldr	r3, [r5, #0]
    bbae:	4620      	mov	r0, r4
    bbb0:	4631      	mov	r1, r6
    bbb2:	f000 fe3f 	bl	c834 <bt_mesh_subnet_find>
	if (!sub) {
    bbb6:	4604      	mov	r4, r0
    bbb8:	b9a8      	cbnz	r0, bbe6 <bt_mesh_beacon_recv+0xda>
}
    bbba:	b004      	add	sp, #16
    bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(sub->beacon_cache, data, 21)) {
    bbc0:	2215      	movs	r2, #21
    bbc2:	4631      	mov	r1, r6
    bbc4:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
    bbc8:	f013 fcf7 	bl	1f5ba <memcmp>
    bbcc:	2800      	cmp	r0, #0
    bbce:	d1d4      	bne.n	bb7a <bt_mesh_beacon_recv+0x6e>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    bbd0:	34a4      	adds	r4, #164	; 0xa4
    bbd2:	e034      	b.n	bc3e <bt_mesh_beacon_recv+0x132>
		if (!memcmp(sub->beacon_cache, data, 21)) {
    bbd4:	2215      	movs	r2, #21
    bbd6:	4631      	mov	r1, r6
    bbd8:	4842      	ldr	r0, [pc, #264]	; (bce4 <bt_mesh_beacon_recv+0x1d8>)
    bbda:	f013 fcee 	bl	1f5ba <memcmp>
    bbde:	2800      	cmp	r0, #0
    bbe0:	d1d1      	bne.n	bb86 <bt_mesh_beacon_recv+0x7a>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    bbe2:	4c41      	ldr	r4, [pc, #260]	; (bce8 <bt_mesh_beacon_recv+0x1dc>)
    bbe4:	e02b      	b.n	bc3e <bt_mesh_beacon_recv+0x132>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !new_key) {
    bbe6:	7fc3      	ldrb	r3, [r0, #31]
    bbe8:	2b02      	cmp	r3, #2
    bbea:	d10f      	bne.n	bc0c <bt_mesh_beacon_recv+0x100>
    bbec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bbf0:	b963      	cbnz	r3, bc0c <bt_mesh_beacon_recv+0x100>
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    bbf2:	2302      	movs	r3, #2
    bbf4:	f04f 0100 	mov.w	r1, #0
    bbf8:	f363 0107 	bfi	r1, r3, #0, #8
    bbfc:	4a34      	ldr	r2, [pc, #208]	; (bcd0 <bt_mesh_beacon_recv+0x1c4>)
    bbfe:	4b35      	ldr	r3, [pc, #212]	; (bcd4 <bt_mesh_beacon_recv+0x1c8>)
    bc00:	483a      	ldr	r0, [pc, #232]	; (bcec <bt_mesh_beacon_recv+0x1e0>)
    bc02:	1a9b      	subs	r3, r3, r2
    bc04:	08db      	lsrs	r3, r3, #3
    bc06:	f363 118f 	bfi	r1, r3, #6, #10
    bc0a:	e790      	b.n	bb2e <bt_mesh_beacon_recv+0x22>
	memcpy(sub->beacon_cache, data, 21);
    bc0c:	2215      	movs	r2, #21
    bc0e:	4641      	mov	r1, r8
    bc10:	1da0      	adds	r0, r4, #6
    bc12:	f013 fcf9 	bl	1f608 <memcpy>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    bc16:	2000      	movs	r0, #0
    bc18:	f000 f9c0 	bl	bf9c <bt_mesh_subnet_get>
    bc1c:	b1c8      	cbz	r0, bc52 <bt_mesh_beacon_recv+0x146>
    bc1e:	8ba3      	ldrh	r3, [r4, #28]
    bc20:	b1bb      	cbz	r3, bc52 <bt_mesh_beacon_recv+0x146>
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    bc22:	2302      	movs	r3, #2
    bc24:	f04f 0100 	mov.w	r1, #0
    bc28:	f363 0107 	bfi	r1, r3, #0, #8
    bc2c:	4a28      	ldr	r2, [pc, #160]	; (bcd0 <bt_mesh_beacon_recv+0x1c4>)
    bc2e:	4b29      	ldr	r3, [pc, #164]	; (bcd4 <bt_mesh_beacon_recv+0x1c8>)
    bc30:	482f      	ldr	r0, [pc, #188]	; (bcf0 <bt_mesh_beacon_recv+0x1e4>)
    bc32:	1a9b      	subs	r3, r3, r2
    bc34:	08db      	lsrs	r3, r3, #3
    bc36:	f363 118f 	bfi	r1, r3, #6, #10
    bc3a:	f012 fc02 	bl	1e442 <log_0>
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    bc3e:	f005 f891 	bl	10d64 <bt_mesh_beacon_get>
    bc42:	2801      	cmp	r0, #1
    bc44:	d1b9      	bne.n	bbba <bt_mesh_beacon_recv+0xae>
	    sub->beacons_cur < 0xff) {
    bc46:	7963      	ldrb	r3, [r4, #5]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    bc48:	2bff      	cmp	r3, #255	; 0xff
    bc4a:	d0b6      	beq.n	bbba <bt_mesh_beacon_recv+0xae>
		sub->beacons_cur++;
    bc4c:	3301      	adds	r3, #1
    bc4e:	7163      	strb	r3, [r4, #5]
    bc50:	e7b3      	b.n	bbba <bt_mesh_beacon_recv+0xae>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc52:	4b28      	ldr	r3, [pc, #160]	; (bcf4 <bt_mesh_beacon_recv+0x1e8>)
    bc54:	f3bf 8f5b 	dmb	ish
    bc58:	681a      	ldr	r2, [r3, #0]
    bc5a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    bc5e:	f012 0f08 	tst.w	r2, #8
    bc62:	f3c6 0540 	ubfx	r5, r6, #1, #1
    bc66:	d00b      	beq.n	bc80 <bt_mesh_beacon_recv+0x174>
    bc68:	f3bf 8f5b 	dmb	ish
    bc6c:	681b      	ldr	r3, [r3, #0]
    bc6e:	f3bf 8f5b 	dmb	ish
    bc72:	f3c3 0380 	ubfx	r3, r3, #2, #1
    bc76:	42ab      	cmp	r3, r5
    bc78:	d102      	bne.n	bc80 <bt_mesh_beacon_recv+0x174>
		bt_mesh_beacon_ivu_initiator(false);
    bc7a:	2000      	movs	r0, #0
    bc7c:	f7ff ff1c 	bl	bab8 <bt_mesh_beacon_ivu_initiator>
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    bc80:	4629      	mov	r1, r5
    bc82:	4638      	mov	r0, r7
    bc84:	f000 fb06 	bl	c294 <bt_mesh_net_iv_update>
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    bc88:	f89d 200f 	ldrb.w	r2, [sp, #15]
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    bc8c:	4605      	mov	r5, r0
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    bc8e:	f006 0101 	and.w	r1, r6, #1
    bc92:	4620      	mov	r0, r4
    bc94:	f000 faac 	bl	c1f0 <bt_mesh_kr_update>
	if (kr_change) {
    bc98:	b1b0      	cbz	r0, bcc8 <bt_mesh_beacon_recv+0x1bc>
		bt_mesh_net_beacon_update(sub);
    bc9a:	4620      	mov	r0, r4
    bc9c:	f000 fa1a 	bl	c0d4 <bt_mesh_net_beacon_update>
	if (iv_change) {
    bca0:	b11d      	cbz	r5, bcaa <bt_mesh_beacon_recv+0x19e>
		bt_mesh_net_sec_update(NULL);
    bca2:	2000      	movs	r0, #0
		bt_mesh_net_sec_update(sub);
    bca4:	f014 fda1 	bl	207ea <bt_mesh_net_sec_update>
    bca8:	e7c9      	b.n	bc3e <bt_mesh_beacon_recv+0x132>
    bcaa:	4620      	mov	r0, r4
    bcac:	e7fa      	b.n	bca4 <bt_mesh_beacon_recv+0x198>
		BT_WARN("Unknown beacon type 0x%02x", type);
    bcae:	2302      	movs	r3, #2
    bcb0:	f04f 0200 	mov.w	r2, #0
    bcb4:	f363 0207 	bfi	r2, r3, #0, #8
    bcb8:	4805      	ldr	r0, [pc, #20]	; (bcd0 <bt_mesh_beacon_recv+0x1c4>)
    bcba:	4b06      	ldr	r3, [pc, #24]	; (bcd4 <bt_mesh_beacon_recv+0x1c8>)
    bcbc:	1a1b      	subs	r3, r3, r0
    bcbe:	08db      	lsrs	r3, r3, #3
    bcc0:	f363 128f 	bfi	r2, r3, #6, #10
    bcc4:	480c      	ldr	r0, [pc, #48]	; (bcf8 <bt_mesh_beacon_recv+0x1ec>)
    bcc6:	e74c      	b.n	bb62 <bt_mesh_beacon_recv+0x56>
	if (iv_change) {
    bcc8:	2d00      	cmp	r5, #0
    bcca:	d0b8      	beq.n	bc3e <bt_mesh_beacon_recv+0x132>
    bccc:	e7e9      	b.n	bca2 <bt_mesh_beacon_recv+0x196>
    bcce:	bf00      	nop
    bcd0:	000233ec 	.word	0x000233ec
    bcd4:	00023484 	.word	0x00023484
    bcd8:	000259ee 	.word	0x000259ee
    bcdc:	000259ff 	.word	0x000259ff
    bce0:	20007924 	.word	0x20007924
    bce4:	20007ab2 	.word	0x20007ab2
    bce8:	20007aac 	.word	0x20007aac
    bcec:	00025a20 	.word	0x00025a20
    bcf0:	00025a51 	.word	0x00025a51
    bcf4:	2000792c 	.word	0x2000792c
    bcf8:	00025a7e 	.word	0x00025a7e

0000bcfc <bt_mesh_beacon_enable>:

void bt_mesh_beacon_enable(void)
{
    bcfc:	b510      	push	{r4, lr}
	int i;

	if (!bt_mesh_is_provisioned()) {
    bcfe:	f014 fd43 	bl	20788 <bt_mesh_is_provisioned>
    bd02:	b1c8      	cbz	r0, bd38 <bt_mesh_beacon_enable+0x3c>
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    bd04:	4c0e      	ldr	r4, [pc, #56]	; (bd40 <bt_mesh_beacon_enable+0x44>)
    bd06:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
    bd0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bd0e:	429a      	cmp	r2, r3
    bd10:	d006      	beq.n	bd20 <bt_mesh_beacon_enable+0x24>
			continue;
		}

		sub->beacons_last = 0U;
    bd12:	2300      	movs	r3, #0
		sub->beacons_cur = 0U;

		bt_mesh_net_beacon_update(sub);
    bd14:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
		sub->beacons_last = 0U;
    bd18:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		bt_mesh_net_beacon_update(sub);
    bd1c:	f000 f9da 	bl	c0d4 <bt_mesh_net_beacon_update>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    bd20:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    bd24:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bd28:	429a      	cmp	r2, r3
    bd2a:	d005      	beq.n	bd38 <bt_mesh_beacon_enable+0x3c>
		sub->beacons_last = 0U;
    bd2c:	2300      	movs	r3, #0
		bt_mesh_net_beacon_update(sub);
    bd2e:	4805      	ldr	r0, [pc, #20]	; (bd44 <bt_mesh_beacon_enable+0x48>)
		sub->beacons_last = 0U;
    bd30:	f8a4 318c 	strh.w	r3, [r4, #396]	; 0x18c
		bt_mesh_net_beacon_update(sub);
    bd34:	f000 f9ce 	bl	c0d4 <bt_mesh_net_beacon_update>
	}

	k_work_submit(&beacon_timer.work);
}
    bd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd3c:	f7ff bd38 	b.w	b7b0 <k_work_submit_to_queue.constprop.3>
    bd40:	20007924 	.word	0x20007924
    bd44:	20007aac 	.word	0x20007aac

0000bd48 <bt_mesh_beacon_disable>:
    bd48:	4b05      	ldr	r3, [pc, #20]	; (bd60 <bt_mesh_beacon_disable+0x18>)
    bd4a:	f3bf 8f5b 	dmb	ish
    bd4e:	681b      	ldr	r3, [r3, #0]
    bd50:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    bd54:	071b      	lsls	r3, r3, #28
    bd56:	d402      	bmi.n	bd5e <bt_mesh_beacon_disable+0x16>
		k_delayed_work_cancel(&beacon_timer);
    bd58:	4802      	ldr	r0, [pc, #8]	; (bd64 <bt_mesh_beacon_disable+0x1c>)
    bd5a:	f017 b91e 	b.w	22f9a <k_delayed_work_cancel>
	}
}
    bd5e:	4770      	bx	lr
    bd60:	2000792c 	.word	0x2000792c
    bd64:	20000a90 	.word	0x20000a90

0000bd68 <auth_match>:
}

static bool auth_match(struct bt_mesh_subnet_keys *keys,
		       const u8_t net_id[8], u8_t flags,
		       u32_t iv_index, const u8_t auth[8])
{
    bd68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bd6c:	4605      	mov	r5, r0
	u8_t net_auth[8];

	if (memcmp(net_id, keys->net_id, 8)) {
    bd6e:	f105 0721 	add.w	r7, r5, #33	; 0x21
{
    bd72:	b085      	sub	sp, #20
    bd74:	4608      	mov	r0, r1
    bd76:	4690      	mov	r8, r2
	if (memcmp(net_id, keys->net_id, 8)) {
    bd78:	4639      	mov	r1, r7
    bd7a:	2208      	movs	r2, #8
{
    bd7c:	4699      	mov	r9, r3
	if (memcmp(net_id, keys->net_id, 8)) {
    bd7e:	f013 fc1c 	bl	1f5ba <memcmp>
    bd82:	bb60      	cbnz	r0, bdde <auth_match+0x76>
		return false;
	}

	bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id, iv_index,
    bd84:	ae02      	add	r6, sp, #8
    bd86:	463a      	mov	r2, r7
    bd88:	4641      	mov	r1, r8
    bd8a:	9600      	str	r6, [sp, #0]
    bd8c:	464b      	mov	r3, r9
    bd8e:	f105 0049 	add.w	r0, r5, #73	; 0x49
    bd92:	f015 f9da 	bl	2114a <bt_mesh_beacon_auth>
			    net_auth);

	if (memcmp(auth, net_auth, 8)) {
    bd96:	2208      	movs	r2, #8
    bd98:	4631      	mov	r1, r6
    bd9a:	980c      	ldr	r0, [sp, #48]	; 0x30
    bd9c:	f013 fc0d 	bl	1f5ba <memcmp>
    bda0:	b308      	cbz	r0, bde6 <auth_match+0x7e>
		BT_WARN("Authentication Value %s != %s",
    bda2:	2302      	movs	r3, #2
    bda4:	f04f 0500 	mov.w	r5, #0
    bda8:	f363 0507 	bfi	r5, r3, #0, #8
    bdac:	4a0f      	ldr	r2, [pc, #60]	; (bdec <auth_match+0x84>)
    bdae:	4b10      	ldr	r3, [pc, #64]	; (bdf0 <auth_match+0x88>)
    bdb0:	980c      	ldr	r0, [sp, #48]	; 0x30
    bdb2:	1ad2      	subs	r2, r2, r3
    bdb4:	08d2      	lsrs	r2, r2, #3
    bdb6:	2108      	movs	r1, #8
    bdb8:	f362 158f 	bfi	r5, r2, #6, #10
    bdbc:	f7fa f9b0 	bl	6120 <bt_hex_real>
    bdc0:	f7f8 f832 	bl	3e28 <log_strdup>
    bdc4:	2108      	movs	r1, #8
    bdc6:	4607      	mov	r7, r0
    bdc8:	4630      	mov	r0, r6
    bdca:	f7fa f9a9 	bl	6120 <bt_hex_real>
    bdce:	f7f8 f82b 	bl	3e28 <log_strdup>
    bdd2:	462b      	mov	r3, r5
    bdd4:	4602      	mov	r2, r0
    bdd6:	4639      	mov	r1, r7
    bdd8:	4806      	ldr	r0, [pc, #24]	; (bdf4 <auth_match+0x8c>)
    bdda:	f012 fb53 	bl	1e484 <log_2>
		return false;
    bdde:	2000      	movs	r0, #0
			bt_hex(auth, 8), bt_hex(net_auth, 8));
		return false;
	}

	return true;
}
    bde0:	b005      	add	sp, #20
    bde2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return true;
    bde6:	2001      	movs	r0, #1
    bde8:	e7fa      	b.n	bde0 <auth_match+0x78>
    bdea:	bf00      	nop
    bdec:	000234b4 	.word	0x000234b4
    bdf0:	000233ec 	.word	0x000233ec
    bdf4:	00025aa8 	.word	0x00025aa8

0000bdf8 <net_decrypt.isra.1>:
	}

	return NULL;
}

static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    bdf8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		       struct net_buf_simple *buf)
{
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
	BT_DBG("IVI %u net->iv_index 0x%08x", IVI(data), bt_mesh.iv_index);

	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    bdfc:	4f4d      	ldr	r7, [pc, #308]	; (bf34 <net_decrypt.isra.1+0x13c>)
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    bdfe:	e9dd 540a 	ldrd	r5, r4, [sp, #40]	; 0x28
    be02:	4689      	mov	r9, r1
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    be04:	6839      	ldr	r1, [r7, #0]
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    be06:	469a      	mov	sl, r3
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    be08:	7813      	ldrb	r3, [r2, #0]
    be0a:	f001 0101 	and.w	r1, r1, #1
    be0e:	ea81 11d3 	eor.w	r1, r1, r3, lsr #7
    be12:	7d2b      	ldrb	r3, [r5, #20]
    be14:	f361 0300 	bfi	r3, r1, #0, #1
    be18:	752b      	strb	r3, [r5, #20]
	buf->len  = 0;
    be1a:	2300      	movs	r3, #0
    be1c:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    be1e:	68a3      	ldr	r3, [r4, #8]
    be20:	6023      	str	r3, [r4, #0]
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    be22:	4690      	mov	r8, r2

	net_buf_simple_reset(buf);
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
    be24:	4651      	mov	r1, sl
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    be26:	4606      	mov	r6, r0
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
    be28:	4620      	mov	r0, r4
    be2a:	f016 fbae 	bl	2258a <net_buf_simple_add>
    be2e:	4652      	mov	r2, sl
    be30:	4641      	mov	r1, r8
    be32:	f013 fbe9 	bl	1f608 <memcpy>

	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    be36:	7d2b      	ldrb	r3, [r5, #20]
    be38:	6839      	ldr	r1, [r7, #0]
    be3a:	6820      	ldr	r0, [r4, #0]
    be3c:	f003 0301 	and.w	r3, r3, #1
    be40:	464a      	mov	r2, r9
    be42:	1ac9      	subs	r1, r1, r3
    be44:	f015 f801 	bl	20e4a <bt_mesh_net_obfuscate>
    be48:	2800      	cmp	r0, #0
    be4a:	d170      	bne.n	bf2e <net_decrypt.isra.1+0x136>
		return -ENOENT;
	}

	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(rx, buf)) {
    be4c:	7d2a      	ldrb	r2, [r5, #20]
    be4e:	f012 0830 	ands.w	r8, r2, #48	; 0x30
    be52:	d12d      	bne.n	beb0 <net_decrypt.isra.1+0xb8>
    be54:	6821      	ldr	r1, [r4, #0]
	hash1 = (BT_MESH_NET_IVI_RX(rx) << 8) | pdu->data[2];
    be56:	683b      	ldr	r3, [r7, #0]
    be58:	f891 9002 	ldrb.w	r9, [r1, #2]
    be5c:	f002 0201 	and.w	r2, r2, #1
    be60:	1a9a      	subs	r2, r3, r2
    be62:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
	memcpy(&hash2, &pdu->data[3], 4);
    be66:	2204      	movs	r2, #4
    be68:	3103      	adds	r1, #3
    be6a:	eb0d 0002 	add.w	r0, sp, r2
    be6e:	f013 fbcb 	bl	1f608 <memcpy>
	return (u64_t)hash1 << 32 | (u64_t)hash2;
    be72:	4a31      	ldr	r2, [pc, #196]	; (bf38 <net_decrypt.isra.1+0x140>)
    be74:	9801      	ldr	r0, [sp, #4]
    be76:	4649      	mov	r1, r9
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    be78:	4643      	mov	r3, r8
    be7a:	4694      	mov	ip, r2
		if (msg_cache[i] == hash) {
    be7c:	e8f2 8902 	ldrd	r8, r9, [r2], #8
    be80:	4589      	cmp	r9, r1
    be82:	bf08      	it	eq
    be84:	4580      	cmpeq	r8, r0
    be86:	d02e      	beq.n	bee6 <net_decrypt.isra.1+0xee>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    be88:	3301      	adds	r3, #1
    be8a:	b29b      	uxth	r3, r3
    be8c:	2b0a      	cmp	r3, #10
    be8e:	d1f5      	bne.n	be7c <net_decrypt.isra.1+0x84>
	msg_cache[msg_cache_next++] = hash;
    be90:	f8df e0b8 	ldr.w	lr, [pc, #184]	; bf4c <net_decrypt.isra.1+0x154>
    be94:	f8be 2000 	ldrh.w	r2, [lr]
    be98:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
    be9c:	3201      	adds	r2, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    be9e:	b292      	uxth	r2, r2
	msg_cache[msg_cache_next++] = hash;
    bea0:	e9cc 0100 	strd	r0, r1, [ip]
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    bea4:	fbb2 f1f3 	udiv	r1, r2, r3
    bea8:	fb03 2311 	mls	r3, r3, r1, r2
    beac:	f8ae 3000 	strh.w	r3, [lr]
		BT_WARN("Duplicate found in Network Message Cache");
		return -EALREADY;
	}

	rx->ctx.addr = SRC(buf->data);
    beb0:	6822      	ldr	r2, [r4, #0]
	return ((u16_t)src[0] << 8) | src[1];
    beb2:	7951      	ldrb	r1, [r2, #5]
    beb4:	7993      	ldrb	r3, [r2, #6]
    beb6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    beba:	b21b      	sxth	r3, r3
    bebc:	b299      	uxth	r1, r3
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    bebe:	2b00      	cmp	r3, #0
	rx->ctx.addr = SRC(buf->data);
    bec0:	8129      	strh	r1, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    bec2:	dc23      	bgt.n	bf0c <net_decrypt.isra.1+0x114>
		BT_WARN("Ignoring non-unicast src addr 0x%04x", rx->ctx.addr);
    bec4:	2302      	movs	r3, #2
    bec6:	f04f 0200 	mov.w	r2, #0
    beca:	f363 0207 	bfi	r2, r3, #0, #8
    bece:	481b      	ldr	r0, [pc, #108]	; (bf3c <net_decrypt.isra.1+0x144>)
    bed0:	4b1b      	ldr	r3, [pc, #108]	; (bf40 <net_decrypt.isra.1+0x148>)
    bed2:	1a1b      	subs	r3, r3, r0
    bed4:	08db      	lsrs	r3, r3, #3
    bed6:	481b      	ldr	r0, [pc, #108]	; (bf44 <net_decrypt.isra.1+0x14c>)
    bed8:	f363 128f 	bfi	r2, r3, #6, #10
    bedc:	f012 fabe 	bl	1e45c <log_1>
		return -EINVAL;
    bee0:	f06f 0015 	mvn.w	r0, #21
    bee4:	e00f      	b.n	bf06 <net_decrypt.isra.1+0x10e>
		BT_WARN("Duplicate found in Network Message Cache");
    bee6:	2302      	movs	r3, #2
    bee8:	f04f 0100 	mov.w	r1, #0
    beec:	f363 0107 	bfi	r1, r3, #0, #8
    bef0:	4a12      	ldr	r2, [pc, #72]	; (bf3c <net_decrypt.isra.1+0x144>)
    bef2:	4b13      	ldr	r3, [pc, #76]	; (bf40 <net_decrypt.isra.1+0x148>)
    bef4:	4814      	ldr	r0, [pc, #80]	; (bf48 <net_decrypt.isra.1+0x150>)
    bef6:	1a9b      	subs	r3, r3, r2
    bef8:	08db      	lsrs	r3, r3, #3
    befa:	f363 118f 	bfi	r1, r3, #6, #10
    befe:	f012 faa0 	bl	1e442 <log_0>
		return -EALREADY;
    bf02:	f06f 0044 	mvn.w	r0, #68	; 0x44
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
					   true);
	}

	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
}
    bf06:	b002      	add	sp, #8
    bf08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
    bf0c:	7d2b      	ldrb	r3, [r5, #20]
    bf0e:	683a      	ldr	r2, [r7, #0]
    bf10:	f003 0101 	and.w	r1, r3, #1
    bf14:	f003 0330 	and.w	r3, r3, #48	; 0x30
    bf18:	2b30      	cmp	r3, #48	; 0x30
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
    bf1a:	eba2 0201 	sub.w	r2, r2, r1
    bf1e:	bf0c      	ite	eq
    bf20:	2301      	moveq	r3, #1
	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
    bf22:	2300      	movne	r3, #0
    bf24:	4621      	mov	r1, r4
    bf26:	4630      	mov	r0, r6
    bf28:	f015 f80b 	bl	20f42 <bt_mesh_net_decrypt>
    bf2c:	e7eb      	b.n	bf06 <net_decrypt.isra.1+0x10e>
		return -ENOENT;
    bf2e:	f06f 0001 	mvn.w	r0, #1
    bf32:	e7e8      	b.n	bf06 <net_decrypt.isra.1+0x10e>
    bf34:	20007924 	.word	0x20007924
    bf38:	20000000 	.word	0x20000000
    bf3c:	000233ec 	.word	0x000233ec
    bf40:	000234b4 	.word	0x000234b4
    bf44:	00025ddf 	.word	0x00025ddf
    bf48:	00025db6 	.word	0x00025db6
    bf4c:	20001cf6 	.word	0x20001cf6

0000bf50 <atomic_test_bit.constprop.8>:
    bf50:	4b04      	ldr	r3, [pc, #16]	; (bf64 <atomic_test_bit.constprop.8+0x14>)
    bf52:	f3bf 8f5b 	dmb	ish
    bf56:	6898      	ldr	r0, [r3, #8]
    bf58:	f3bf 8f5b 	dmb	ish
}
    bf5c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    bf60:	4770      	bx	lr
    bf62:	bf00      	nop
    bf64:	20007924 	.word	0x20007924

0000bf68 <atomic_set_bit_to.constprop.6>:
	if (val) {
    bf68:	4b0b      	ldr	r3, [pc, #44]	; (bf98 <atomic_set_bit_to.constprop.6+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf6a:	f3bf 8f5b 	dmb	ish
	if (val) {
    bf6e:	b150      	cbz	r0, bf86 <atomic_set_bit_to.constprop.6+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf70:	e853 2f00 	ldrex	r2, [r3]
    bf74:	f042 0204 	orr.w	r2, r2, #4
    bf78:	e843 2100 	strex	r1, r2, [r3]
    bf7c:	2900      	cmp	r1, #0
    bf7e:	d1f7      	bne.n	bf70 <atomic_set_bit_to.constprop.6+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bf80:	f3bf 8f5b 	dmb	ish
	}
}
    bf84:	4770      	bx	lr
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bf86:	e853 2f00 	ldrex	r2, [r3]
    bf8a:	f022 0204 	bic.w	r2, r2, #4
    bf8e:	e843 2100 	strex	r1, r2, [r3]
    bf92:	2900      	cmp	r1, #0
    bf94:	d0f4      	beq.n	bf80 <atomic_set_bit_to.constprop.6+0x18>
    bf96:	e7f6      	b.n	bf86 <atomic_set_bit_to.constprop.6+0x1e>
    bf98:	2000792c 	.word	0x2000792c

0000bf9c <bt_mesh_subnet_get>:
	if (net_idx == BT_MESH_KEY_ANY) {
    bf9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bfa0:	4298      	cmp	r0, r3
    bfa2:	d010      	beq.n	bfc6 <bt_mesh_subnet_get+0x2a>
		if (bt_mesh.sub[i].net_idx == net_idx) {
    bfa4:	4b0a      	ldr	r3, [pc, #40]	; (bfd0 <bt_mesh_subnet_get+0x34>)
    bfa6:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
    bfaa:	4282      	cmp	r2, r0
    bfac:	d009      	beq.n	bfc2 <bt_mesh_subnet_get+0x26>
    bfae:	f8b3 21a4 	ldrh.w	r2, [r3, #420]	; 0x1a4
    bfb2:	4282      	cmp	r2, r0
    bfb4:	d109      	bne.n	bfca <bt_mesh_subnet_get+0x2e>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    bfb6:	2001      	movs	r0, #1
			return &bt_mesh.sub[i];
    bfb8:	22e4      	movs	r2, #228	; 0xe4
    bfba:	fb02 3000 	mla	r0, r2, r0, r3
    bfbe:	30a4      	adds	r0, #164	; 0xa4
    bfc0:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    bfc2:	2000      	movs	r0, #0
    bfc4:	e7f8      	b.n	bfb8 <bt_mesh_subnet_get+0x1c>
		return &bt_mesh.sub[0];
    bfc6:	4803      	ldr	r0, [pc, #12]	; (bfd4 <bt_mesh_subnet_get+0x38>)
    bfc8:	4770      	bx	lr
	return NULL;
    bfca:	2000      	movs	r0, #0
}
    bfcc:	4770      	bx	lr
    bfce:	bf00      	nop
    bfd0:	20007924 	.word	0x20007924
    bfd4:	200079c8 	.word	0x200079c8

0000bfd8 <bt_mesh_net_keys_create>:
{
    bfd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	u8_t p[] = { 0 };
    bfda:	2300      	movs	r3, #0
    bfdc:	f88d 300c 	strb.w	r3, [sp, #12]
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    bfe0:	f100 0339 	add.w	r3, r0, #57	; 0x39
{
    bfe4:	460e      	mov	r6, r1
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    bfe6:	9301      	str	r3, [sp, #4]
    bfe8:	f100 0311 	add.w	r3, r0, #17
    bfec:	9300      	str	r3, [sp, #0]
{
    bfee:	4605      	mov	r5, r0
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    bff0:	f10d 030f 	add.w	r3, sp, #15
    bff4:	2201      	movs	r2, #1
    bff6:	a903      	add	r1, sp, #12
    bff8:	4630      	mov	r0, r6
    bffa:	f002 f8a3 	bl	e144 <bt_mesh_k2>
	if (err) {
    bffe:	4604      	mov	r4, r0
    c000:	b180      	cbz	r0, c024 <bt_mesh_net_keys_create+0x4c>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    c002:	2301      	movs	r3, #1
    c004:	f04f 0100 	mov.w	r1, #0
    c008:	f363 0107 	bfi	r1, r3, #0, #8
    c00c:	4a29      	ldr	r2, [pc, #164]	; (c0b4 <bt_mesh_net_keys_create+0xdc>)
    c00e:	4b2a      	ldr	r3, [pc, #168]	; (c0b8 <bt_mesh_net_keys_create+0xe0>)
    c010:	482a      	ldr	r0, [pc, #168]	; (c0bc <bt_mesh_net_keys_create+0xe4>)
    c012:	1a9b      	subs	r3, r3, r2
    c014:	08db      	lsrs	r3, r3, #3
    c016:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to generate beacon key");
    c01a:	f012 fa12 	bl	1e442 <log_0>
}
    c01e:	4620      	mov	r0, r4
    c020:	b004      	add	sp, #16
    c022:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(keys->net, key, 16);
    c024:	2210      	movs	r2, #16
    c026:	4631      	mov	r1, r6
    c028:	4628      	mov	r0, r5
    c02a:	f013 faed 	bl	1f608 <memcpy>
	keys->nid = nid;
    c02e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c032:	742b      	strb	r3, [r5, #16]
	err = bt_mesh_k3(key, keys->net_id);
    c034:	f105 0121 	add.w	r1, r5, #33	; 0x21
    c038:	4630      	mov	r0, r6
    c03a:	f002 f8db 	bl	e1f4 <bt_mesh_k3>
	if (err) {
    c03e:	4604      	mov	r4, r0
    c040:	b160      	cbz	r0, c05c <bt_mesh_net_keys_create+0x84>
		BT_ERR("Unable to generate Net ID");
    c042:	2301      	movs	r3, #1
    c044:	f04f 0100 	mov.w	r1, #0
    c048:	f363 0107 	bfi	r1, r3, #0, #8
    c04c:	4a19      	ldr	r2, [pc, #100]	; (c0b4 <bt_mesh_net_keys_create+0xdc>)
    c04e:	4b1a      	ldr	r3, [pc, #104]	; (c0b8 <bt_mesh_net_keys_create+0xe0>)
    c050:	481b      	ldr	r0, [pc, #108]	; (c0c0 <bt_mesh_net_keys_create+0xe8>)
    c052:	1a9b      	subs	r3, r3, r2
    c054:	08db      	lsrs	r3, r3, #3
    c056:	f363 118f 	bfi	r1, r3, #6, #10
    c05a:	e7de      	b.n	c01a <bt_mesh_net_keys_create+0x42>
}

static inline int bt_mesh_identity_key(const u8_t net_key[16],
				       u8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    c05c:	f105 0229 	add.w	r2, r5, #41	; 0x29
    c060:	4918      	ldr	r1, [pc, #96]	; (c0c4 <bt_mesh_net_keys_create+0xec>)
    c062:	4630      	mov	r0, r6
    c064:	f002 f91c 	bl	e2a0 <bt_mesh_id128>
	if (err) {
    c068:	4604      	mov	r4, r0
    c06a:	b160      	cbz	r0, c086 <bt_mesh_net_keys_create+0xae>
		BT_ERR("Unable to generate IdentityKey");
    c06c:	2301      	movs	r3, #1
    c06e:	f04f 0100 	mov.w	r1, #0
    c072:	f363 0107 	bfi	r1, r3, #0, #8
    c076:	4a0f      	ldr	r2, [pc, #60]	; (c0b4 <bt_mesh_net_keys_create+0xdc>)
    c078:	4b0f      	ldr	r3, [pc, #60]	; (c0b8 <bt_mesh_net_keys_create+0xe0>)
    c07a:	4813      	ldr	r0, [pc, #76]	; (c0c8 <bt_mesh_net_keys_create+0xf0>)
    c07c:	1a9b      	subs	r3, r3, r2
    c07e:	08db      	lsrs	r3, r3, #3
    c080:	f363 118f 	bfi	r1, r3, #6, #10
    c084:	e7c9      	b.n	c01a <bt_mesh_net_keys_create+0x42>
}

static inline int bt_mesh_beacon_key(const u8_t net_key[16],
				     u8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    c086:	f105 0249 	add.w	r2, r5, #73	; 0x49
    c08a:	4910      	ldr	r1, [pc, #64]	; (c0cc <bt_mesh_net_keys_create+0xf4>)
    c08c:	4630      	mov	r0, r6
    c08e:	f002 f907 	bl	e2a0 <bt_mesh_id128>
	if (err) {
    c092:	4604      	mov	r4, r0
    c094:	2800      	cmp	r0, #0
    c096:	d0c2      	beq.n	c01e <bt_mesh_net_keys_create+0x46>
		BT_ERR("Unable to generate beacon key");
    c098:	2301      	movs	r3, #1
    c09a:	f04f 0100 	mov.w	r1, #0
    c09e:	f363 0107 	bfi	r1, r3, #0, #8
    c0a2:	4a04      	ldr	r2, [pc, #16]	; (c0b4 <bt_mesh_net_keys_create+0xdc>)
    c0a4:	4b04      	ldr	r3, [pc, #16]	; (c0b8 <bt_mesh_net_keys_create+0xe0>)
    c0a6:	480a      	ldr	r0, [pc, #40]	; (c0d0 <bt_mesh_net_keys_create+0xf8>)
    c0a8:	1a9b      	subs	r3, r3, r2
    c0aa:	08db      	lsrs	r3, r3, #3
    c0ac:	f363 118f 	bfi	r1, r3, #6, #10
    c0b0:	e7b3      	b.n	c01a <bt_mesh_net_keys_create+0x42>
    c0b2:	bf00      	nop
    c0b4:	000233ec 	.word	0x000233ec
    c0b8:	000234b4 	.word	0x000234b4
    c0bc:	00025c9d 	.word	0x00025c9d
    c0c0:	00025cc9 	.word	0x00025cc9
    c0c4:	00025ce3 	.word	0x00025ce3
    c0c8:	00025ce8 	.word	0x00025ce8
    c0cc:	00025d07 	.word	0x00025d07
    c0d0:	00025d0c 	.word	0x00025d0c

0000c0d4 <bt_mesh_net_beacon_update>:
{
    c0d4:	b513      	push	{r0, r1, r4, lr}
    c0d6:	4604      	mov	r4, r0
	u8_t flags = bt_mesh_net_flags(sub);
    c0d8:	f014 fb7b 	bl	207d2 <bt_mesh_net_flags>
	if (sub->kr_flag) {
    c0dc:	7fa3      	ldrb	r3, [r4, #30]
	u8_t flags = bt_mesh_net_flags(sub);
    c0de:	4601      	mov	r1, r0
	if (sub->kr_flag) {
    c0e0:	b163      	cbz	r3, c0fc <bt_mesh_net_beacon_update+0x28>
		keys = &sub->keys[1];
    c0e2:	f104 0089 	add.w	r0, r4, #137	; 0x89
				   bt_mesh.iv_index, sub->auth);
    c0e6:	3428      	adds	r4, #40	; 0x28
	return bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    c0e8:	4b06      	ldr	r3, [pc, #24]	; (c104 <bt_mesh_net_beacon_update+0x30>)
    c0ea:	9400      	str	r4, [sp, #0]
    c0ec:	f100 0221 	add.w	r2, r0, #33	; 0x21
    c0f0:	681b      	ldr	r3, [r3, #0]
    c0f2:	3049      	adds	r0, #73	; 0x49
    c0f4:	f015 f829 	bl	2114a <bt_mesh_beacon_auth>
}
    c0f8:	b002      	add	sp, #8
    c0fa:	bd10      	pop	{r4, pc}
		keys = &sub->keys[0];
    c0fc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    c100:	e7f1      	b.n	c0e6 <bt_mesh_net_beacon_update+0x12>
    c102:	bf00      	nop
    c104:	20007924 	.word	0x20007924

0000c108 <bt_mesh_net_create>:
{
    c108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c10c:	460e      	mov	r6, r1
    c10e:	4615      	mov	r5, r2
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    c110:	2100      	movs	r1, #0
    c112:	2250      	movs	r2, #80	; 0x50
{
    c114:	4680      	mov	r8, r0
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    c116:	4819      	ldr	r0, [pc, #100]	; (c17c <bt_mesh_net_create+0x74>)
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
    c118:	4c19      	ldr	r4, [pc, #100]	; (c180 <bt_mesh_net_create+0x78>)
{
    c11a:	461f      	mov	r7, r3
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    c11c:	f013 fa9e 	bl	1f65c <memset>
	msg_cache_next = 0U;
    c120:	4b18      	ldr	r3, [pc, #96]	; (c184 <bt_mesh_net_create+0x7c>)
    c122:	2200      	movs	r2, #0
    c124:	801a      	strh	r2, [r3, #0]
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
    c126:	f006 0301 	and.w	r3, r6, #1
    c12a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    c12e:	4629      	mov	r1, r5
	if (sub->kr_flag) {
    c130:	b1eb      	cbz	r3, c16e <bt_mesh_net_create+0x66>
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    c132:	f204 102d 	addw	r0, r4, #301	; 0x12d
    c136:	f7ff ff4f 	bl	bfd8 <bt_mesh_net_keys_create>
		if (err) {
    c13a:	b118      	cbz	r0, c144 <bt_mesh_net_create+0x3c>
			return -EIO;
    c13c:	f06f 0004 	mvn.w	r0, #4
}
    c140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sub->kr_phase = BT_MESH_KR_PHASE_2;
    c144:	2302      	movs	r3, #2
    c146:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    c14a:	2500      	movs	r5, #0
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c14c:	f3c6 0040 	ubfx	r0, r6, #1, #1
	sub->net_idx = idx;
    c150:	f8a4 80c0 	strh.w	r8, [r4, #192]	; 0xc0
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    c154:	f884 50c4 	strb.w	r5, [r4, #196]	; 0xc4
	bt_mesh.iv_index = iv_index;
    c158:	6027      	str	r7, [r4, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c15a:	f7ff ff05 	bl	bf68 <atomic_set_bit_to.constprop.6>
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    c15e:	2360      	movs	r3, #96	; 0x60
	bt_mesh_net_beacon_update(sub);
    c160:	4809      	ldr	r0, [pc, #36]	; (c188 <bt_mesh_net_create+0x80>)
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    c162:	f884 3020 	strb.w	r3, [r4, #32]
	bt_mesh_net_beacon_update(sub);
    c166:	f7ff ffb5 	bl	c0d4 <bt_mesh_net_beacon_update>
	return 0;
    c16a:	4628      	mov	r0, r5
    c16c:	e7e8      	b.n	c140 <bt_mesh_net_create+0x38>
		err = bt_mesh_net_keys_create(&sub->keys[0], key);
    c16e:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    c172:	f7ff ff31 	bl	bfd8 <bt_mesh_net_keys_create>
		if (err) {
    c176:	2800      	cmp	r0, #0
    c178:	d0e7      	beq.n	c14a <bt_mesh_net_create+0x42>
    c17a:	e7df      	b.n	c13c <bt_mesh_net_create+0x34>
    c17c:	20000000 	.word	0x20000000
    c180:	20007924 	.word	0x20007924
    c184:	20001cf6 	.word	0x20001cf6
    c188:	200079c8 	.word	0x200079c8

0000c18c <bt_mesh_net_revoke_keys>:
{
    c18c:	b538      	push	{r3, r4, r5, lr}
    c18e:	4605      	mov	r5, r0
		if (key->net_idx != sub->net_idx || !key->updated) {
    c190:	4c15      	ldr	r4, [pc, #84]	; (c1e8 <bt_mesh_net_revoke_keys+0x5c>)
	memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
    c192:	2259      	movs	r2, #89	; 0x59
    c194:	f100 0189 	add.w	r1, r0, #137	; 0x89
    c198:	3030      	adds	r0, #48	; 0x30
    c19a:	f013 fa35 	bl	1f608 <memcpy>
		if (key->net_idx != sub->net_idx || !key->updated) {
    c19e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
    c1a2:	8bab      	ldrh	r3, [r5, #28]
    c1a4:	429a      	cmp	r2, r3
    c1a6:	d10c      	bne.n	c1c2 <bt_mesh_net_revoke_keys+0x36>
    c1a8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    c1ac:	b14b      	cbz	r3, c1c2 <bt_mesh_net_revoke_keys+0x36>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    c1ae:	2211      	movs	r2, #17
    c1b0:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    c1b4:	f104 0059 	add.w	r0, r4, #89	; 0x59
    c1b8:	f013 fa26 	bl	1f608 <memcpy>
		key->updated = false;
    c1bc:	2300      	movs	r3, #0
    c1be:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		if (key->net_idx != sub->net_idx || !key->updated) {
    c1c2:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c1c6:	8bab      	ldrh	r3, [r5, #28]
    c1c8:	429a      	cmp	r2, r3
    c1ca:	d10b      	bne.n	c1e4 <bt_mesh_net_revoke_keys+0x58>
    c1cc:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    c1d0:	b143      	cbz	r3, c1e4 <bt_mesh_net_revoke_keys+0x58>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    c1d2:	4906      	ldr	r1, [pc, #24]	; (c1ec <bt_mesh_net_revoke_keys+0x60>)
    c1d4:	2211      	movs	r2, #17
    c1d6:	f1a1 0011 	sub.w	r0, r1, #17
    c1da:	f013 fa15 	bl	1f608 <memcpy>
		key->updated = false;
    c1de:	2300      	movs	r3, #0
    c1e0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
    c1e4:	bd38      	pop	{r3, r4, r5, pc}
    c1e6:	bf00      	nop
    c1e8:	20007924 	.word	0x20007924
    c1ec:	200079b6 	.word	0x200079b6

0000c1f0 <bt_mesh_kr_update>:
{
    c1f0:	b538      	push	{r3, r4, r5, lr}
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
    c1f2:	7f83      	ldrb	r3, [r0, #30]
    c1f4:	7fc5      	ldrb	r5, [r0, #31]
    c1f6:	428b      	cmp	r3, r1
{
    c1f8:	4604      	mov	r4, r0
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
    c1fa:	d010      	beq.n	c21e <bt_mesh_kr_update+0x2e>
    c1fc:	b97d      	cbnz	r5, c21e <bt_mesh_kr_update+0x2e>
		BT_WARN("KR change in normal operation. Are we blacklisted?");
    c1fe:	2302      	movs	r3, #2
    c200:	f04f 0100 	mov.w	r1, #0
    c204:	f363 0107 	bfi	r1, r3, #0, #8
    c208:	4a11      	ldr	r2, [pc, #68]	; (c250 <bt_mesh_kr_update+0x60>)
    c20a:	4b12      	ldr	r3, [pc, #72]	; (c254 <bt_mesh_kr_update+0x64>)
    c20c:	4812      	ldr	r0, [pc, #72]	; (c258 <bt_mesh_kr_update+0x68>)
    c20e:	1a9b      	subs	r3, r3, r2
    c210:	08db      	lsrs	r3, r3, #3
    c212:	f363 118f 	bfi	r1, r3, #6, #10
    c216:	f012 f914 	bl	1e442 <log_0>
	return false;
    c21a:	2200      	movs	r2, #0
    c21c:	e016      	b.n	c24c <bt_mesh_kr_update+0x5c>
	sub->kr_flag = new_kr;
    c21e:	2900      	cmp	r1, #0
    c220:	bf14      	ite	ne
    c222:	2301      	movne	r3, #1
    c224:	2300      	moveq	r3, #0
    c226:	77a3      	strb	r3, [r4, #30]
	if (sub->kr_flag) {
    c228:	d005      	beq.n	c236 <bt_mesh_kr_update+0x46>
		if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
    c22a:	2d01      	cmp	r5, #1
    c22c:	d1f5      	bne.n	c21a <bt_mesh_kr_update+0x2a>
			sub->kr_phase = BT_MESH_KR_PHASE_2;
    c22e:	2302      	movs	r3, #2
			sub->kr_phase = BT_MESH_KR_NORMAL;
    c230:	77e3      	strb	r3, [r4, #31]
			return true;
    c232:	2201      	movs	r2, #1
    c234:	e00a      	b.n	c24c <bt_mesh_kr_update+0x5c>
		switch (sub->kr_phase) {
    c236:	2d01      	cmp	r5, #1
    c238:	d006      	beq.n	c248 <bt_mesh_kr_update+0x58>
    c23a:	2d02      	cmp	r5, #2
    c23c:	d1ed      	bne.n	c21a <bt_mesh_kr_update+0x2a>
			bt_mesh_net_revoke_keys(sub);
    c23e:	4620      	mov	r0, r4
    c240:	f7ff ffa4 	bl	c18c <bt_mesh_net_revoke_keys>
			sub->kr_phase = BT_MESH_KR_NORMAL;
    c244:	2300      	movs	r3, #0
    c246:	e7f3      	b.n	c230 <bt_mesh_kr_update+0x40>
			if (!new_key) {
    c248:	2a00      	cmp	r2, #0
    c24a:	d1f8      	bne.n	c23e <bt_mesh_kr_update+0x4e>
}
    c24c:	4610      	mov	r0, r2
    c24e:	bd38      	pop	{r3, r4, r5, pc}
    c250:	000233ec 	.word	0x000233ec
    c254:	000234b4 	.word	0x000234b4
    c258:	00025ac6 	.word	0x00025ac6

0000c25c <bt_mesh_rpl_reset>:
{
    c25c:	b570      	push	{r4, r5, r6, lr}
    c25e:	4c0c      	ldr	r4, [pc, #48]	; (c290 <bt_mesh_rpl_reset+0x34>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    c260:	2500      	movs	r5, #0
				rpl->old_iv = true;
    c262:	2601      	movs	r6, #1
		if (rpl->src) {
    c264:	f8b4 326c 	ldrh.w	r3, [r4, #620]	; 0x26c
    c268:	b143      	cbz	r3, c27c <bt_mesh_rpl_reset+0x20>
			if (rpl->old_iv) {
    c26a:	f894 326e 	ldrb.w	r3, [r4, #622]	; 0x26e
    c26e:	b15b      	cbz	r3, c288 <bt_mesh_rpl_reset+0x2c>
				(void)memset(rpl, 0, sizeof(*rpl));
    c270:	2208      	movs	r2, #8
    c272:	2100      	movs	r1, #0
    c274:	f504 701b 	add.w	r0, r4, #620	; 0x26c
    c278:	f013 f9f0 	bl	1f65c <memset>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    c27c:	3501      	adds	r5, #1
    c27e:	2d0a      	cmp	r5, #10
    c280:	f104 0408 	add.w	r4, r4, #8
    c284:	d1ee      	bne.n	c264 <bt_mesh_rpl_reset+0x8>
}
    c286:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    c288:	f884 626e 	strb.w	r6, [r4, #622]	; 0x26e
    c28c:	e7f6      	b.n	c27c <bt_mesh_rpl_reset+0x20>
    c28e:	bf00      	nop
    c290:	20007924 	.word	0x20007924

0000c294 <bt_mesh_net_iv_update>:
{
    c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c296:	4606      	mov	r6, r0
    c298:	460c      	mov	r4, r1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c29a:	f7ff fe59 	bl	bf50 <atomic_test_bit.constprop.8>
    c29e:	4d5e      	ldr	r5, [pc, #376]	; (c418 <bt_mesh_net_iv_update+0x184>)
    c2a0:	4607      	mov	r7, r0
		if (iv_index != bt_mesh.iv_index) {
    c2a2:	682a      	ldr	r2, [r5, #0]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c2a4:	b1b0      	cbz	r0, c2d4 <bt_mesh_net_iv_update+0x40>
		if (iv_index != bt_mesh.iv_index) {
    c2a6:	42b2      	cmp	r2, r6
    c2a8:	d00f      	beq.n	c2ca <bt_mesh_net_iv_update+0x36>
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    c2aa:	2102      	movs	r1, #2
    c2ac:	f04f 0300 	mov.w	r3, #0
    c2b0:	f361 0307 	bfi	r3, r1, #0, #8
    c2b4:	4859      	ldr	r0, [pc, #356]	; (c41c <bt_mesh_net_iv_update+0x188>)
    c2b6:	495a      	ldr	r1, [pc, #360]	; (c420 <bt_mesh_net_iv_update+0x18c>)
    c2b8:	1a09      	subs	r1, r1, r0
    c2ba:	08c9      	lsrs	r1, r1, #3
    c2bc:	4859      	ldr	r0, [pc, #356]	; (c424 <bt_mesh_net_iv_update+0x190>)
    c2be:	f361 138f 	bfi	r3, r1, #6, #10
    c2c2:	4631      	mov	r1, r6
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    c2c4:	f012 f8de 	bl	1e484 <log_2>
    c2c8:	e001      	b.n	c2ce <bt_mesh_net_iv_update+0x3a>
		if (iv_update) {
    c2ca:	2900      	cmp	r1, #0
    c2cc:	d06b      	beq.n	c3a6 <bt_mesh_net_iv_update+0x112>
			return false;
    c2ce:	2400      	movs	r4, #0
}
    c2d0:	4620      	mov	r0, r4
    c2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    c2d4:	42b2      	cmp	r2, r6
    c2d6:	f000 809d 	beq.w	c414 <bt_mesh_net_iv_update+0x180>
		if (iv_index < bt_mesh.iv_index ||
    c2da:	d803      	bhi.n	c2e4 <bt_mesh_net_iv_update+0x50>
		    iv_index > bt_mesh.iv_index + 42) {
    c2dc:	f102 032a 	add.w	r3, r2, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    c2e0:	42b3      	cmp	r3, r6
    c2e2:	d20d      	bcs.n	c300 <bt_mesh_net_iv_update+0x6c>
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    c2e4:	2101      	movs	r1, #1
    c2e6:	f04f 0300 	mov.w	r3, #0
    c2ea:	f361 0307 	bfi	r3, r1, #0, #8
    c2ee:	484b      	ldr	r0, [pc, #300]	; (c41c <bt_mesh_net_iv_update+0x188>)
    c2f0:	494b      	ldr	r1, [pc, #300]	; (c420 <bt_mesh_net_iv_update+0x18c>)
    c2f2:	1a09      	subs	r1, r1, r0
    c2f4:	08c9      	lsrs	r1, r1, #3
    c2f6:	f361 138f 	bfi	r3, r1, #6, #10
    c2fa:	484b      	ldr	r0, [pc, #300]	; (c428 <bt_mesh_net_iv_update+0x194>)
    c2fc:	4631      	mov	r1, r6
    c2fe:	e7e1      	b.n	c2c4 <bt_mesh_net_iv_update+0x30>
		if (iv_index > bt_mesh.iv_index + 1) {
    c300:	3201      	adds	r2, #1
    c302:	4296      	cmp	r6, r2
    c304:	d93c      	bls.n	c380 <bt_mesh_net_iv_update+0xec>
			BT_WARN("Performing IV Index Recovery");
    c306:	2302      	movs	r3, #2
    c308:	f04f 0100 	mov.w	r1, #0
    c30c:	4a43      	ldr	r2, [pc, #268]	; (c41c <bt_mesh_net_iv_update+0x188>)
    c30e:	4847      	ldr	r0, [pc, #284]	; (c42c <bt_mesh_net_iv_update+0x198>)
    c310:	f363 0107 	bfi	r1, r3, #0, #8
    c314:	4b42      	ldr	r3, [pc, #264]	; (c420 <bt_mesh_net_iv_update+0x18c>)
    c316:	1a9b      	subs	r3, r3, r2
    c318:	08db      	lsrs	r3, r3, #3
    c31a:	f363 118f 	bfi	r1, r3, #6, #10
    c31e:	f012 f890 	bl	1e442 <log_0>
			(void)memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
    c322:	2250      	movs	r2, #80	; 0x50
    c324:	4639      	mov	r1, r7
    c326:	f505 701b 	add.w	r0, r5, #620	; 0x26c
    c32a:	f013 f997 	bl	1f65c <memset>
			bt_mesh.seq = 0U;
    c32e:	e9c5 6700 	strd	r6, r7, [r5]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    c332:	4620      	mov	r0, r4
    c334:	f7ff fe18 	bl	bf68 <atomic_set_bit_to.constprop.6>
	bt_mesh.ivu_duration = 0U;
    c338:	2300      	movs	r3, #0
    c33a:	f885 3020 	strb.w	r3, [r5, #32]
	if (iv_update) {
    c33e:	2c00      	cmp	r4, #0
    c340:	d066      	beq.n	c410 <bt_mesh_net_iv_update+0x17c>
		bt_mesh.iv_index = iv_index;
    c342:	602e      	str	r6, [r5, #0]
		bt_mesh_rpl_reset();
    c344:	f7ff ff8a 	bl	c25c <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c348:	4a39      	ldr	r2, [pc, #228]	; (c430 <bt_mesh_net_iv_update+0x19c>)
    c34a:	493a      	ldr	r1, [pc, #232]	; (c434 <bt_mesh_net_iv_update+0x1a0>)
    c34c:	483a      	ldr	r0, [pc, #232]	; (c438 <bt_mesh_net_iv_update+0x1a4>)
    c34e:	f010 f8f3 	bl	1c538 <k_delayed_work_submit_to_queue>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    c352:	f8b5 20c0 	ldrh.w	r2, [r5, #192]	; 0xc0
    c356:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c35a:	429a      	cmp	r2, r3
    c35c:	d002      	beq.n	c364 <bt_mesh_net_iv_update+0xd0>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    c35e:	4837      	ldr	r0, [pc, #220]	; (c43c <bt_mesh_net_iv_update+0x1a8>)
    c360:	f7ff feb8 	bl	c0d4 <bt_mesh_net_beacon_update>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    c364:	f8b5 21a4 	ldrh.w	r2, [r5, #420]	; 0x1a4
    c368:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c36c:	429a      	cmp	r2, r3
    c36e:	d002      	beq.n	c376 <bt_mesh_net_iv_update+0xe2>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    c370:	4833      	ldr	r0, [pc, #204]	; (c440 <bt_mesh_net_iv_update+0x1ac>)
    c372:	f7ff feaf 	bl	c0d4 <bt_mesh_net_beacon_update>
		bt_mesh_store_iv(false);
    c376:	2000      	movs	r0, #0
    c378:	f015 f9e1 	bl	2173e <bt_mesh_store_iv>
	return true;
    c37c:	2401      	movs	r4, #1
    c37e:	e7a7      	b.n	c2d0 <bt_mesh_net_iv_update+0x3c>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    c380:	d10f      	bne.n	c3a2 <bt_mesh_net_iv_update+0x10e>
    c382:	b981      	cbnz	r1, c3a6 <bt_mesh_net_iv_update+0x112>
			BT_WARN("Ignoring new index in normal mode");
    c384:	2302      	movs	r3, #2
    c386:	f04f 0100 	mov.w	r1, #0
    c38a:	f363 0107 	bfi	r1, r3, #0, #8
    c38e:	4a23      	ldr	r2, [pc, #140]	; (c41c <bt_mesh_net_iv_update+0x188>)
    c390:	4b23      	ldr	r3, [pc, #140]	; (c420 <bt_mesh_net_iv_update+0x18c>)
    c392:	482c      	ldr	r0, [pc, #176]	; (c444 <bt_mesh_net_iv_update+0x1b0>)
    c394:	1a9b      	subs	r3, r3, r2
    c396:	08db      	lsrs	r3, r3, #3
    c398:	f363 118f 	bfi	r1, r3, #6, #10
    c39c:	f012 f851 	bl	1e442 <log_0>
			return false;
    c3a0:	e796      	b.n	c2d0 <bt_mesh_net_iv_update+0x3c>
		if (!iv_update) {
    c3a2:	2900      	cmp	r1, #0
    c3a4:	d094      	beq.n	c2d0 <bt_mesh_net_iv_update+0x3c>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c3a6:	f895 3020 	ldrb.w	r3, [r5, #32]
    c3aa:	2b5f      	cmp	r3, #95	; 0x5f
    c3ac:	d80e      	bhi.n	c3cc <bt_mesh_net_iv_update+0x138>
			BT_WARN("IV Update before minimum duration");
    c3ae:	2302      	movs	r3, #2
    c3b0:	f04f 0100 	mov.w	r1, #0
    c3b4:	f363 0107 	bfi	r1, r3, #0, #8
    c3b8:	4a18      	ldr	r2, [pc, #96]	; (c41c <bt_mesh_net_iv_update+0x188>)
    c3ba:	4b19      	ldr	r3, [pc, #100]	; (c420 <bt_mesh_net_iv_update+0x18c>)
    c3bc:	4822      	ldr	r0, [pc, #136]	; (c448 <bt_mesh_net_iv_update+0x1b4>)
    c3be:	1a9b      	subs	r3, r3, r2
    c3c0:	08db      	lsrs	r3, r3, #3
    c3c2:	f363 118f 	bfi	r1, r3, #6, #10
    c3c6:	f012 f83c 	bl	1e442 <log_0>
			return false;
    c3ca:	e780      	b.n	c2ce <bt_mesh_net_iv_update+0x3a>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    c3cc:	2c00      	cmp	r4, #0
    c3ce:	d1b0      	bne.n	c332 <bt_mesh_net_iv_update+0x9e>
    c3d0:	f001 f9ea 	bl	d7a8 <bt_mesh_tx_in_progress>
    c3d4:	2800      	cmp	r0, #0
    c3d6:	d0ac      	beq.n	c332 <bt_mesh_net_iv_update+0x9e>
		BT_WARN("IV Update deferred because of pending transfer");
    c3d8:	2302      	movs	r3, #2
    c3da:	f04f 0100 	mov.w	r1, #0
    c3de:	f363 0107 	bfi	r1, r3, #0, #8
    c3e2:	4a0e      	ldr	r2, [pc, #56]	; (c41c <bt_mesh_net_iv_update+0x188>)
    c3e4:	4b0e      	ldr	r3, [pc, #56]	; (c420 <bt_mesh_net_iv_update+0x18c>)
    c3e6:	4819      	ldr	r0, [pc, #100]	; (c44c <bt_mesh_net_iv_update+0x1b8>)
    c3e8:	1a9b      	subs	r3, r3, r2
    c3ea:	08db      	lsrs	r3, r3, #3
    c3ec:	f363 118f 	bfi	r1, r3, #6, #10
    c3f0:	f012 f827 	bl	1e442 <log_0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c3f4:	f3bf 8f5b 	dmb	ish
    c3f8:	4b15      	ldr	r3, [pc, #84]	; (c450 <bt_mesh_net_iv_update+0x1bc>)
    c3fa:	e853 2f00 	ldrex	r2, [r3]
    c3fe:	f042 0220 	orr.w	r2, r2, #32
    c402:	e843 2100 	strex	r1, r2, [r3]
    c406:	2900      	cmp	r1, #0
    c408:	d1f7      	bne.n	c3fa <bt_mesh_net_iv_update+0x166>
    c40a:	f3bf 8f5b 	dmb	ish
    c40e:	e75f      	b.n	c2d0 <bt_mesh_net_iv_update+0x3c>
		bt_mesh.seq = 0U;
    c410:	606c      	str	r4, [r5, #4]
    c412:	e799      	b.n	c348 <bt_mesh_net_iv_update+0xb4>
			return false;
    c414:	4604      	mov	r4, r0
    c416:	e75b      	b.n	c2d0 <bt_mesh_net_iv_update+0x3c>
    c418:	20007924 	.word	0x20007924
    c41c:	000233ec 	.word	0x000233ec
    c420:	000234b4 	.word	0x000234b4
    c424:	00025bc2 	.word	0x00025bc2
    c428:	00025be6 	.word	0x00025be6
    c42c:	00025c0d 	.word	0x00025c0d
    c430:	05265c00 	.word	0x05265c00
    c434:	20007948 	.word	0x20007948
    c438:	20001c74 	.word	0x20001c74
    c43c:	200079c8 	.word	0x200079c8
    c440:	20007aac 	.word	0x20007aac
    c444:	00025c2a 	.word	0x00025c2a
    c448:	00025c4c 	.word	0x00025c4c
    c44c:	00025c6e 	.word	0x00025c6e
    c450:	2000792c 	.word	0x2000792c

0000c454 <ivu_refresh>:
		bt_mesh_net_relay(&buf, &rx);
	}
}

static void ivu_refresh(struct k_work *work)
{
    c454:	b510      	push	{r4, lr}
	bt_mesh.ivu_duration += BT_MESH_IVU_HOURS;
    c456:	4c12      	ldr	r4, [pc, #72]	; (c4a0 <ivu_refresh+0x4c>)
    c458:	f894 3020 	ldrb.w	r3, [r4, #32]
    c45c:	3318      	adds	r3, #24
    c45e:	b2db      	uxtb	r3, r3
	BT_DBG("%s for %u hour%s",
	       atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) ?
	       "IVU in Progress" : "IVU Normal mode",
	       bt_mesh.ivu_duration, bt_mesh.ivu_duration == 1 ? "" : "s");

	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c460:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration += BT_MESH_IVU_HOURS;
    c462:	f884 3020 	strb.w	r3, [r4, #32]
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c466:	d80a      	bhi.n	c47e <ivu_refresh+0x2a>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			bt_mesh_store_iv(true);
    c468:	2001      	movs	r0, #1
    c46a:	f015 f968 	bl	2173e <bt_mesh_store_iv>
    c46e:	f104 0124 	add.w	r1, r4, #36	; 0x24
    c472:	4a0c      	ldr	r2, [pc, #48]	; (c4a4 <ivu_refresh+0x50>)
    c474:	480c      	ldr	r0, [pc, #48]	; (c4a8 <ivu_refresh+0x54>)
		bt_mesh_beacon_ivu_initiator(true);
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_store_iv(true);
	}
}
    c476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c47a:	f010 b85d 	b.w	1c538 <k_delayed_work_submit_to_queue>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c47e:	f7ff fd67 	bl	bf50 <atomic_test_bit.constprop.8>
    c482:	b140      	cbz	r0, c496 <ivu_refresh+0x42>
		bt_mesh_beacon_ivu_initiator(true);
    c484:	2001      	movs	r0, #1
    c486:	f7ff fb17 	bl	bab8 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    c48a:	6820      	ldr	r0, [r4, #0]
    c48c:	2100      	movs	r1, #0
}
    c48e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    c492:	f7ff beff 	b.w	c294 <bt_mesh_net_iv_update>
		bt_mesh_store_iv(true);
    c496:	2001      	movs	r0, #1
}
    c498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_store_iv(true);
    c49c:	f015 b94f 	b.w	2173e <bt_mesh_store_iv>
    c4a0:	20007924 	.word	0x20007924
    c4a4:	05265c00 	.word	0x05265c00
    c4a8:	20001c74 	.word	0x20001c74

0000c4ac <bt_mesh_next_seq>:
{
    c4ac:	b510      	push	{r4, lr}
	u32_t seq = bt_mesh.seq++;
    c4ae:	4b04      	ldr	r3, [pc, #16]	; (c4c0 <bt_mesh_next_seq+0x14>)
    c4b0:	685c      	ldr	r4, [r3, #4]
    c4b2:	1c62      	adds	r2, r4, #1
    c4b4:	605a      	str	r2, [r3, #4]
		bt_mesh_store_seq();
    c4b6:	f006 fdd9 	bl	1306c <bt_mesh_store_seq>
}
    c4ba:	4620      	mov	r0, r4
    c4bc:	bd10      	pop	{r4, pc}
    c4be:	bf00      	nop
    c4c0:	20007924 	.word	0x20007924

0000c4c4 <bt_mesh_net_resend>:
{
    c4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4c8:	2759      	movs	r7, #89	; 0x59
    c4ca:	4357      	muls	r7, r2
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c4cc:	4e4a      	ldr	r6, [pc, #296]	; (c5f8 <bt_mesh_net_resend+0x134>)
    c4ce:	688c      	ldr	r4, [r1, #8]
	priv = sub->keys[new_key].privacy;
    c4d0:	f107 0869 	add.w	r8, r7, #105	; 0x69
{
    c4d4:	4699      	mov	r9, r3
	priv = sub->keys[new_key].privacy;
    c4d6:	4480      	add	r8, r0
{
    c4d8:	4682      	mov	sl, r0
    c4da:	460d      	mov	r5, r1
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c4dc:	6831      	ldr	r1, [r6, #0]
    c4de:	f7ff fd37 	bl	bf50 <atomic_test_bit.constprop.8>
    c4e2:	4642      	mov	r2, r8
    c4e4:	1a09      	subs	r1, r1, r0
    c4e6:	4620      	mov	r0, r4
    c4e8:	f014 fcaf 	bl	20e4a <bt_mesh_net_obfuscate>
	if (err) {
    c4ec:	4604      	mov	r4, r0
    c4ee:	b188      	cbz	r0, c514 <bt_mesh_net_resend+0x50>
		BT_ERR("deobfuscate failed (err %d)", err);
    c4f0:	2301      	movs	r3, #1
    c4f2:	f04f 0200 	mov.w	r2, #0
    c4f6:	f363 0207 	bfi	r2, r3, #0, #8
    c4fa:	4940      	ldr	r1, [pc, #256]	; (c5fc <bt_mesh_net_resend+0x138>)
    c4fc:	4b40      	ldr	r3, [pc, #256]	; (c600 <bt_mesh_net_resend+0x13c>)
    c4fe:	1a5b      	subs	r3, r3, r1
    c500:	08db      	lsrs	r3, r3, #3
    c502:	4601      	mov	r1, r0
    c504:	483f      	ldr	r0, [pc, #252]	; (c604 <bt_mesh_net_resend+0x140>)
    c506:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("decrypt failed (err %d)", err);
    c50a:	f011 ffa7 	bl	1e45c <log_1>
}
    c50e:	4620      	mov	r0, r4
    c510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    c514:	6832      	ldr	r2, [r6, #0]
    c516:	f7ff fd1b 	bl	bf50 <atomic_test_bit.constprop.8>
	enc = sub->keys[new_key].enc;
    c51a:	3741      	adds	r7, #65	; 0x41
    c51c:	4457      	add	r7, sl
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    c51e:	f105 0a08 	add.w	sl, r5, #8
    c522:	4623      	mov	r3, r4
    c524:	1a12      	subs	r2, r2, r0
    c526:	4651      	mov	r1, sl
    c528:	4638      	mov	r0, r7
    c52a:	f014 fd0a 	bl	20f42 <bt_mesh_net_decrypt>
	if (err) {
    c52e:	4604      	mov	r4, r0
    c530:	b168      	cbz	r0, c54e <bt_mesh_net_resend+0x8a>
		BT_ERR("decrypt failed (err %d)", err);
    c532:	2301      	movs	r3, #1
    c534:	f04f 0200 	mov.w	r2, #0
    c538:	f363 0207 	bfi	r2, r3, #0, #8
    c53c:	492f      	ldr	r1, [pc, #188]	; (c5fc <bt_mesh_net_resend+0x138>)
    c53e:	4b30      	ldr	r3, [pc, #192]	; (c600 <bt_mesh_net_resend+0x13c>)
    c540:	1a5b      	subs	r3, r3, r1
    c542:	08db      	lsrs	r3, r3, #3
    c544:	4601      	mov	r1, r0
    c546:	f363 128f 	bfi	r2, r3, #6, #10
    c54a:	482f      	ldr	r0, [pc, #188]	; (c608 <bt_mesh_net_resend+0x144>)
    c54c:	e7dd      	b.n	c50a <bt_mesh_net_resend+0x46>
	seq = bt_mesh_next_seq();
    c54e:	f7ff ffad 	bl	c4ac <bt_mesh_next_seq>
	buf->data[2] = seq >> 16;
    c552:	68ab      	ldr	r3, [r5, #8]
    c554:	0c02      	lsrs	r2, r0, #16
    c556:	709a      	strb	r2, [r3, #2]
	buf->data[3] = seq >> 8;
    c558:	68ab      	ldr	r3, [r5, #8]
    c55a:	0a02      	lsrs	r2, r0, #8
    c55c:	70da      	strb	r2, [r3, #3]
	buf->data[4] = seq;
    c55e:	68ab      	ldr	r3, [r5, #8]
	err = bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    c560:	6832      	ldr	r2, [r6, #0]
	buf->data[4] = seq;
    c562:	7118      	strb	r0, [r3, #4]
	err = bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    c564:	f7ff fcf4 	bl	bf50 <atomic_test_bit.constprop.8>
    c568:	4623      	mov	r3, r4
    c56a:	1a12      	subs	r2, r2, r0
    c56c:	4651      	mov	r1, sl
    c56e:	4638      	mov	r0, r7
    c570:	f014 fc94 	bl	20e9c <bt_mesh_net_encrypt>
	if (err) {
    c574:	4604      	mov	r4, r0
    c576:	b168      	cbz	r0, c594 <bt_mesh_net_resend+0xd0>
		BT_ERR("encrypt failed (err %d)", err);
    c578:	2301      	movs	r3, #1
    c57a:	f04f 0200 	mov.w	r2, #0
    c57e:	f363 0207 	bfi	r2, r3, #0, #8
    c582:	491e      	ldr	r1, [pc, #120]	; (c5fc <bt_mesh_net_resend+0x138>)
    c584:	4b1e      	ldr	r3, [pc, #120]	; (c600 <bt_mesh_net_resend+0x13c>)
    c586:	1a5b      	subs	r3, r3, r1
    c588:	08db      	lsrs	r3, r3, #3
    c58a:	4601      	mov	r1, r0
    c58c:	f363 128f 	bfi	r2, r3, #6, #10
    c590:	481e      	ldr	r0, [pc, #120]	; (c60c <bt_mesh_net_resend+0x148>)
    c592:	e7ba      	b.n	c50a <bt_mesh_net_resend+0x46>
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c594:	68ac      	ldr	r4, [r5, #8]
    c596:	6831      	ldr	r1, [r6, #0]
    c598:	f7ff fcda 	bl	bf50 <atomic_test_bit.constprop.8>
    c59c:	4642      	mov	r2, r8
    c59e:	1a09      	subs	r1, r1, r0
    c5a0:	4620      	mov	r0, r4
    c5a2:	f014 fc52 	bl	20e4a <bt_mesh_net_obfuscate>
	if (err) {
    c5a6:	4604      	mov	r4, r0
    c5a8:	b168      	cbz	r0, c5c6 <bt_mesh_net_resend+0x102>
		BT_ERR("obfuscate failed (err %d)", err);
    c5aa:	2301      	movs	r3, #1
    c5ac:	f04f 0200 	mov.w	r2, #0
    c5b0:	f363 0207 	bfi	r2, r3, #0, #8
    c5b4:	4911      	ldr	r1, [pc, #68]	; (c5fc <bt_mesh_net_resend+0x138>)
    c5b6:	4b12      	ldr	r3, [pc, #72]	; (c600 <bt_mesh_net_resend+0x13c>)
    c5b8:	1a5b      	subs	r3, r3, r1
    c5ba:	08db      	lsrs	r3, r3, #3
    c5bc:	4601      	mov	r1, r0
    c5be:	f363 128f 	bfi	r2, r3, #6, #10
    c5c2:	4813      	ldr	r0, [pc, #76]	; (c610 <bt_mesh_net_resend+0x14c>)
    c5c4:	e7a1      	b.n	c50a <bt_mesh_net_resend+0x46>
	bt_mesh_adv_send(buf, cb, cb_data);
    c5c6:	9a08      	ldr	r2, [sp, #32]
    c5c8:	4649      	mov	r1, r9
    c5ca:	4628      	mov	r0, r5
    c5cc:	f7ff f8a8 	bl	b720 <bt_mesh_adv_send>
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    c5d0:	f7ff fcbe 	bl	bf50 <atomic_test_bit.constprop.8>
    c5d4:	2800      	cmp	r0, #0
    c5d6:	d19a      	bne.n	c50e <bt_mesh_net_resend+0x4a>
    c5d8:	6872      	ldr	r2, [r6, #4]
    c5da:	4b0e      	ldr	r3, [pc, #56]	; (c614 <bt_mesh_net_resend+0x150>)
    c5dc:	429a      	cmp	r2, r3
    c5de:	d996      	bls.n	c50e <bt_mesh_net_resend+0x4a>
		bt_mesh_beacon_ivu_initiator(true);
    c5e0:	2001      	movs	r0, #1
    c5e2:	f7ff fa69 	bl	bab8 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    c5e6:	6830      	ldr	r0, [r6, #0]
    c5e8:	2101      	movs	r1, #1
    c5ea:	4408      	add	r0, r1
    c5ec:	f7ff fe52 	bl	c294 <bt_mesh_net_iv_update>
		bt_mesh_net_sec_update(NULL);
    c5f0:	4620      	mov	r0, r4
    c5f2:	f014 f8fa 	bl	207ea <bt_mesh_net_sec_update>
    c5f6:	e78a      	b.n	c50e <bt_mesh_net_resend+0x4a>
    c5f8:	20007924 	.word	0x20007924
    c5fc:	000233ec 	.word	0x000233ec
    c600:	000234b4 	.word	0x000234b4
    c604:	00025d6a 	.word	0x00025d6a
    c608:	00025d86 	.word	0x00025d86
    c60c:	00025d9e 	.word	0x00025d9e
    c610:	00025d6c 	.word	0x00025d6c
    c614:	007a1200 	.word	0x007a1200

0000c618 <bt_mesh_net_encode>:
{
    c618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    c61c:	6843      	ldr	r3, [r0, #4]
    c61e:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    c620:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c624:	429f      	cmp	r7, r3
{
    c626:	4605      	mov	r5, r0
    c628:	460c      	mov	r4, r1
    c62a:	4691      	mov	r9, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    c62c:	d116      	bne.n	c65c <bt_mesh_net_encode+0x44>
    c62e:	4608      	mov	r0, r1
    c630:	f016 f850 	bl	226d4 <net_buf_simple_tailroom>
    c634:	2807      	cmp	r0, #7
    c636:	d811      	bhi.n	c65c <bt_mesh_net_encode+0x44>
		BT_ERR("Insufficient MIC space for CTL PDU");
    c638:	2301      	movs	r3, #1
    c63a:	f04f 0100 	mov.w	r1, #0
    c63e:	f363 0107 	bfi	r1, r3, #0, #8
    c642:	4a38      	ldr	r2, [pc, #224]	; (c724 <bt_mesh_net_encode+0x10c>)
    c644:	4b38      	ldr	r3, [pc, #224]	; (c728 <bt_mesh_net_encode+0x110>)
    c646:	4839      	ldr	r0, [pc, #228]	; (c72c <bt_mesh_net_encode+0x114>)
    c648:	1a9b      	subs	r3, r3, r2
    c64a:	08db      	lsrs	r3, r3, #3
    c64c:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Insufficient MIC space for PDU");
    c650:	f011 fef7 	bl	1e442 <log_0>
		return -EINVAL;
    c654:	f06f 0015 	mvn.w	r0, #21
}
    c658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    c65c:	4620      	mov	r0, r4
    c65e:	f016 f839 	bl	226d4 <net_buf_simple_tailroom>
    c662:	2803      	cmp	r0, #3
    c664:	d80c      	bhi.n	c680 <bt_mesh_net_encode+0x68>
		BT_ERR("Insufficient MIC space for PDU");
    c666:	2301      	movs	r3, #1
    c668:	f04f 0100 	mov.w	r1, #0
    c66c:	f363 0107 	bfi	r1, r3, #0, #8
    c670:	4a2c      	ldr	r2, [pc, #176]	; (c724 <bt_mesh_net_encode+0x10c>)
    c672:	4b2d      	ldr	r3, [pc, #180]	; (c728 <bt_mesh_net_encode+0x110>)
    c674:	482e      	ldr	r0, [pc, #184]	; (c730 <bt_mesh_net_encode+0x118>)
    c676:	1a9b      	subs	r3, r3, r2
    c678:	08db      	lsrs	r3, r3, #3
    c67a:	f363 118f 	bfi	r1, r3, #6, #10
    c67e:	e7e7      	b.n	c650 <bt_mesh_net_encode+0x38>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    c680:	686b      	ldr	r3, [r5, #4]
    c682:	4620      	mov	r0, r4
    c684:	8899      	ldrh	r1, [r3, #4]
    c686:	f015 ffcf 	bl	22628 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    c68a:	8929      	ldrh	r1, [r5, #8]
    c68c:	4620      	mov	r0, r4
    c68e:	f015 ffcb 	bl	22628 <net_buf_simple_push_be16>
	seq = net_buf_simple_push(buf, 3);
    c692:	2103      	movs	r1, #3
    c694:	4620      	mov	r0, r4
    c696:	f015 ffbf 	bl	22618 <net_buf_simple_push>
    c69a:	4606      	mov	r6, r0
	seq_val = bt_mesh_next_seq();
    c69c:	f7ff ff06 	bl	c4ac <bt_mesh_next_seq>
	seq[0] = seq_val >> 16;
    c6a0:	0c03      	lsrs	r3, r0, #16
    c6a2:	7033      	strb	r3, [r6, #0]
	seq[1] = seq_val >> 8;
    c6a4:	0a03      	lsrs	r3, r0, #8
    c6a6:	7073      	strb	r3, [r6, #1]
	seq[2] = seq_val;
    c6a8:	70b0      	strb	r0, [r6, #2]
	if (ctl) {
    c6aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c6ae:	429f      	cmp	r7, r3
    c6b0:	686b      	ldr	r3, [r5, #4]
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    c6b2:	4f20      	ldr	r7, [pc, #128]	; (c734 <bt_mesh_net_encode+0x11c>)
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    c6b4:	7a59      	ldrb	r1, [r3, #9]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    c6b6:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    c6b8:	bf08      	it	eq
    c6ba:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    c6be:	f015 ffc8 	bl	22652 <net_buf_simple_push_u8>
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    c6c2:	682e      	ldr	r6, [r5, #0]
		tx->friend_cred = 0U;
    c6c4:	7aeb      	ldrb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    c6c6:	7fb2      	ldrb	r2, [r6, #30]
		tx->friend_cred = 0U;
    c6c8:	f36f 0300 	bfc	r3, #0, #1
    c6cc:	72eb      	strb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    c6ce:	2559      	movs	r5, #89	; 0x59
    c6d0:	4355      	muls	r5, r2
    c6d2:	1973      	adds	r3, r6, r5
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    c6d4:	783a      	ldrb	r2, [r7, #0]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    c6d6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    c6da:	f7ff fc39 	bl	bf50 <atomic_test_bit.constprop.8>
    c6de:	1a10      	subs	r0, r2, r0
    c6e0:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    c6e4:	b2c9      	uxtb	r1, r1
    c6e6:	4620      	mov	r0, r4
    c6e8:	f015 ffb3 	bl	22652 <net_buf_simple_push_u8>
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
    c6ec:	683a      	ldr	r2, [r7, #0]
    c6ee:	f7ff fc2f 	bl	bf50 <atomic_test_bit.constprop.8>
		enc = tx->sub->keys[tx->sub->kr_flag].enc;
    c6f2:	f105 0841 	add.w	r8, r5, #65	; 0x41
    c6f6:	44b0      	add	r8, r6
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
    c6f8:	1a12      	subs	r2, r2, r0
    c6fa:	464b      	mov	r3, r9
    c6fc:	4621      	mov	r1, r4
    c6fe:	4640      	mov	r0, r8
    c700:	f014 fbcc 	bl	20e9c <bt_mesh_net_encrypt>
	if (err) {
    c704:	2800      	cmp	r0, #0
    c706:	d1a7      	bne.n	c658 <bt_mesh_net_encode+0x40>
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c708:	6824      	ldr	r4, [r4, #0]
    c70a:	6839      	ldr	r1, [r7, #0]
    c70c:	f7ff fc20 	bl	bf50 <atomic_test_bit.constprop.8>
		priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    c710:	f105 0269 	add.w	r2, r5, #105	; 0x69
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c714:	4432      	add	r2, r6
    c716:	1a09      	subs	r1, r1, r0
    c718:	4620      	mov	r0, r4
}
    c71a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c71e:	f014 bb94 	b.w	20e4a <bt_mesh_net_obfuscate>
    c722:	bf00      	nop
    c724:	000233ec 	.word	0x000233ec
    c728:	000234b4 	.word	0x000234b4
    c72c:	00025b80 	.word	0x00025b80
    c730:	00025ba3 	.word	0x00025ba3
    c734:	20007924 	.word	0x20007924

0000c738 <bt_mesh_net_send>:
{
    c738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    c73c:	6846      	ldr	r6, [r0, #4]
{
    c73e:	461f      	mov	r7, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    c740:	7a73      	ldrb	r3, [r6, #9]
    c742:	2bff      	cmp	r3, #255	; 0xff
{
    c744:	4605      	mov	r5, r0
    c746:	4688      	mov	r8, r1
    c748:	4614      	mov	r4, r2
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    c74a:	d102      	bne.n	c752 <bt_mesh_net_send+0x1a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    c74c:	f004 fde4 	bl	11318 <bt_mesh_default_ttl_get>
    c750:	7270      	strb	r0, [r6, #9]
	err = bt_mesh_net_encode(tx, &buf->b, false);
    c752:	f108 0908 	add.w	r9, r8, #8
    c756:	2200      	movs	r2, #0
    c758:	4649      	mov	r1, r9
    c75a:	4628      	mov	r0, r5
    c75c:	f7ff ff5c 	bl	c618 <bt_mesh_net_encode>
	if (err) {
    c760:	4606      	mov	r6, r0
    c762:	b9c8      	cbnz	r0, c798 <bt_mesh_net_send+0x60>
	    tx->ctx->send_ttl != 1) {
    c764:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    c766:	7a5a      	ldrb	r2, [r3, #9]
    c768:	2a01      	cmp	r2, #1
    c76a:	d01b      	beq.n	c7a4 <bt_mesh_net_send+0x6c>
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    c76c:	8899      	ldrh	r1, [r3, #4]
    c76e:	4648      	mov	r0, r9
    c770:	f008 fc74 	bl	1505c <bt_mesh_proxy_relay>
    c774:	b1b0      	cbz	r0, c7a4 <bt_mesh_net_send+0x6c>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    c776:	686b      	ldr	r3, [r5, #4]
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    c778:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c77c:	2b00      	cmp	r3, #0
    c77e:	dd11      	ble.n	c7a4 <bt_mesh_net_send+0x6c>
			if (cb) {
    c780:	b154      	cbz	r4, c798 <bt_mesh_net_send+0x60>
				if (cb->start) {
    c782:	6823      	ldr	r3, [r4, #0]
    c784:	b11b      	cbz	r3, c78e <bt_mesh_net_send+0x56>
					cb->start(0, 0, cb_data);
    c786:	463a      	mov	r2, r7
    c788:	4631      	mov	r1, r6
    c78a:	4630      	mov	r0, r6
    c78c:	4798      	blx	r3
				if (cb->end) {
    c78e:	6863      	ldr	r3, [r4, #4]
    c790:	b113      	cbz	r3, c798 <bt_mesh_net_send+0x60>
					cb->end(0, cb_data);
    c792:	4639      	mov	r1, r7
    c794:	2000      	movs	r0, #0
    c796:	4798      	blx	r3
	net_buf_unref(buf);
    c798:	4640      	mov	r0, r8
    c79a:	f00e fa4b 	bl	1ac34 <net_buf_unref>
}
    c79e:	4630      	mov	r0, r6
    c7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    c7a4:	686b      	ldr	r3, [r5, #4]
    c7a6:	8898      	ldrh	r0, [r3, #4]
    c7a8:	f014 fd00 	bl	211ac <bt_mesh_fixed_group_match>
    c7ac:	b318      	cbz	r0, c7f6 <bt_mesh_net_send+0xbe>
		if (cb && cb->start) {
    c7ae:	bb94      	cbnz	r4, c816 <bt_mesh_net_send+0xde>
		net_buf_slist_put(&bt_mesh.local_queue, net_buf_ref(buf));
    c7b0:	4640      	mov	r0, r8
    c7b2:	f015 fee6 	bl	22582 <net_buf_ref>
    c7b6:	4601      	mov	r1, r0
    c7b8:	481b      	ldr	r0, [pc, #108]	; (c828 <bt_mesh_net_send+0xf0>)
    c7ba:	f015 fe85 	bl	224c8 <net_buf_slist_put>
		if (cb && cb->end) {
    c7be:	b124      	cbz	r4, c7ca <bt_mesh_net_send+0x92>
    c7c0:	6863      	ldr	r3, [r4, #4]
    c7c2:	b113      	cbz	r3, c7ca <bt_mesh_net_send+0x92>
			cb->end(0, cb_data);
    c7c4:	4639      	mov	r1, r7
    c7c6:	2000      	movs	r0, #0
    c7c8:	4798      	blx	r3
    c7ca:	f3bf 8f5b 	dmb	ish
    c7ce:	4917      	ldr	r1, [pc, #92]	; (c82c <bt_mesh_net_send+0xf4>)
    c7d0:	e851 3f00 	ldrex	r3, [r1]
    c7d4:	f043 0201 	orr.w	r2, r3, #1
    c7d8:	e841 2000 	strex	r0, r2, [r1]
    c7dc:	2800      	cmp	r0, #0
    c7de:	d1f7      	bne.n	c7d0 <bt_mesh_net_send+0x98>
    c7e0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    c7e4:	f013 0401 	ands.w	r4, r3, #1
    c7e8:	d1d6      	bne.n	c798 <bt_mesh_net_send+0x60>
		k_queue_append(&work_q->queue, work);
    c7ea:	3908      	subs	r1, #8
    c7ec:	4810      	ldr	r0, [pc, #64]	; (c830 <bt_mesh_net_send+0xf8>)
    c7ee:	f016 f9ca 	bl	22b86 <k_queue_append>
	err = bt_mesh_net_encode(tx, &buf->b, false);
    c7f2:	4626      	mov	r6, r4
    c7f4:	e7d0      	b.n	c798 <bt_mesh_net_send+0x60>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    c7f6:	686b      	ldr	r3, [r5, #4]
    c7f8:	8898      	ldrh	r0, [r3, #4]
    c7fa:	f001 ff9d 	bl	e738 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    c7fe:	2800      	cmp	r0, #0
    c800:	d1d5      	bne.n	c7ae <bt_mesh_net_send+0x76>
	} else if (tx->ctx->send_ttl != 1) {
    c802:	686b      	ldr	r3, [r5, #4]
    c804:	7a5b      	ldrb	r3, [r3, #9]
    c806:	2b01      	cmp	r3, #1
    c808:	d0c6      	beq.n	c798 <bt_mesh_net_send+0x60>
		bt_mesh_adv_send(buf, cb, cb_data);
    c80a:	463a      	mov	r2, r7
    c80c:	4621      	mov	r1, r4
    c80e:	4640      	mov	r0, r8
    c810:	f7fe ff86 	bl	b720 <bt_mesh_adv_send>
    c814:	e7c0      	b.n	c798 <bt_mesh_net_send+0x60>
		if (cb && cb->start) {
    c816:	6823      	ldr	r3, [r4, #0]
    c818:	2b00      	cmp	r3, #0
    c81a:	d0c9      	beq.n	c7b0 <bt_mesh_net_send+0x78>
			cb->start(0, 0, cb_data);
    c81c:	2100      	movs	r1, #0
    c81e:	463a      	mov	r2, r7
    c820:	4608      	mov	r0, r1
    c822:	4798      	blx	r3
    c824:	e7c4      	b.n	c7b0 <bt_mesh_net_send+0x78>
    c826:	bf00      	nop
    c828:	2000793c 	.word	0x2000793c
    c82c:	20007938 	.word	0x20007938
    c830:	20001c74 	.word	0x20001c74

0000c834 <bt_mesh_subnet_find>:
{
    c834:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c838:	4c28      	ldr	r4, [pc, #160]	; (c8dc <bt_mesh_subnet_find+0xa8>)
{
    c83a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    c83e:	4617      	mov	r7, r2
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c840:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
{
    c844:	4698      	mov	r8, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c846:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c84a:	429a      	cmp	r2, r3
{
    c84c:	4605      	mov	r5, r0
    c84e:	460e      	mov	r6, r1
    c850:	46a2      	mov	sl, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c852:	d016      	beq.n	c882 <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    c854:	460a      	mov	r2, r1
    c856:	f8cd 8000 	str.w	r8, [sp]
    c85a:	4601      	mov	r1, r0
    c85c:	463b      	mov	r3, r7
    c85e:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    c862:	f7ff fa81 	bl	bd68 <auth_match>
    c866:	bb10      	cbnz	r0, c8ae <bt_mesh_subnet_find+0x7a>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    c868:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    c86c:	b14b      	cbz	r3, c882 <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    c86e:	f8cd 8000 	str.w	r8, [sp]
    c872:	463b      	mov	r3, r7
    c874:	4632      	mov	r2, r6
    c876:	4629      	mov	r1, r5
    c878:	f204 102d 	addw	r0, r4, #301	; 0x12d
    c87c:	f7ff fa74 	bl	bd68 <auth_match>
    c880:	bb38      	cbnz	r0, c8d2 <bt_mesh_subnet_find+0x9e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c882:	f8ba 21a4 	ldrh.w	r2, [sl, #420]	; 0x1a4
    c886:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c88a:	429a      	cmp	r2, r3
    c88c:	d024      	beq.n	c8d8 <bt_mesh_subnet_find+0xa4>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    c88e:	f8cd 8000 	str.w	r8, [sp]
    c892:	463b      	mov	r3, r7
    c894:	4632      	mov	r2, r6
    c896:	4629      	mov	r1, r5
    c898:	4811      	ldr	r0, [pc, #68]	; (c8e0 <bt_mesh_subnet_find+0xac>)
    c89a:	f7ff fa65 	bl	bd68 <auth_match>
    c89e:	b148      	cbz	r0, c8b4 <bt_mesh_subnet_find+0x80>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    c8a0:	4810      	ldr	r0, [pc, #64]	; (c8e4 <bt_mesh_subnet_find+0xb0>)
			*new_key = false;
    c8a2:	2300      	movs	r3, #0
			*new_key = true;
    c8a4:	f889 3000 	strb.w	r3, [r9]
}
    c8a8:	b002      	add	sp, #8
    c8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    c8ae:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    c8b2:	e7f6      	b.n	c8a2 <bt_mesh_subnet_find+0x6e>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    c8b4:	f89a 31a7 	ldrb.w	r3, [sl, #423]	; 0x1a7
    c8b8:	b173      	cbz	r3, c8d8 <bt_mesh_subnet_find+0xa4>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    c8ba:	f8cd 8000 	str.w	r8, [sp]
    c8be:	463b      	mov	r3, r7
    c8c0:	4632      	mov	r2, r6
    c8c2:	4629      	mov	r1, r5
    c8c4:	4808      	ldr	r0, [pc, #32]	; (c8e8 <bt_mesh_subnet_find+0xb4>)
    c8c6:	f7ff fa4f 	bl	bd68 <auth_match>
    c8ca:	b128      	cbz	r0, c8d8 <bt_mesh_subnet_find+0xa4>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    c8cc:	4805      	ldr	r0, [pc, #20]	; (c8e4 <bt_mesh_subnet_find+0xb0>)
			*new_key = true;
    c8ce:	2301      	movs	r3, #1
    c8d0:	e7e8      	b.n	c8a4 <bt_mesh_subnet_find+0x70>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    c8d2:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    c8d6:	e7fa      	b.n	c8ce <bt_mesh_subnet_find+0x9a>
	return NULL;
    c8d8:	2000      	movs	r0, #0
    c8da:	e7e5      	b.n	c8a8 <bt_mesh_subnet_find+0x74>
    c8dc:	20007924 	.word	0x20007924
    c8e0:	20007adc 	.word	0x20007adc
    c8e4:	20007aac 	.word	0x20007aac
    c8e8:	20007b35 	.word	0x20007b35

0000c8ec <bt_mesh_net_decode>:
{
    c8ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    c8f0:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    c8f4:	f1b8 0f11 	cmp.w	r8, #17
{
    c8f8:	4605      	mov	r5, r0
    c8fa:	460e      	mov	r6, r1
    c8fc:	4614      	mov	r4, r2
    c8fe:	4699      	mov	r9, r3
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    c900:	d824      	bhi.n	c94c <bt_mesh_net_decode+0x60>
		BT_WARN("Dropping too short mesh packet (len %u)", data->len);
    c902:	2302      	movs	r3, #2
    c904:	f04f 0200 	mov.w	r2, #0
    c908:	f363 0207 	bfi	r2, r3, #0, #8
    c90c:	4c92      	ldr	r4, [pc, #584]	; (cb58 <bt_mesh_net_decode+0x26c>)
    c90e:	4b93      	ldr	r3, [pc, #588]	; (cb5c <bt_mesh_net_decode+0x270>)
    c910:	4893      	ldr	r0, [pc, #588]	; (cb60 <bt_mesh_net_decode+0x274>)
    c912:	1ae4      	subs	r4, r4, r3
    c914:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c918:	f364 128f 	bfi	r2, r4, #6, #10
    c91c:	4641      	mov	r1, r8
    c91e:	f011 fd9d 	bl	1e45c <log_1>
		BT_WARN("%s", bt_hex(data->data, data->len));
    c922:	f04f 0600 	mov.w	r6, #0
    c926:	2302      	movs	r3, #2
    c928:	88a9      	ldrh	r1, [r5, #4]
    c92a:	6828      	ldr	r0, [r5, #0]
    c92c:	f363 0607 	bfi	r6, r3, #0, #8
    c930:	f7f9 fbf6 	bl	6120 <bt_hex_real>
    c934:	f7f7 fa78 	bl	3e28 <log_strdup>
    c938:	f364 168f 	bfi	r6, r4, #6, #10
    c93c:	4601      	mov	r1, r0
    c93e:	4632      	mov	r2, r6
    c940:	4888      	ldr	r0, [pc, #544]	; (cb64 <bt_mesh_net_decode+0x278>)
    c942:	f011 fd8b 	bl	1e45c <log_1>
		return -EINVAL;
    c946:	f06f 0015 	mvn.w	r0, #21
    c94a:	e0e6      	b.n	cb1a <bt_mesh_net_decode+0x22e>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(data)) {
    c94c:	6807      	ldr	r7, [r0, #0]
    c94e:	bb81      	cbnz	r1, c9b2 <bt_mesh_net_decode+0xc6>
	return buf->data + buf->len;
    c950:	eb07 0208 	add.w	r2, r7, r8
    c954:	f812 3c07 	ldrb.w	r3, [r2, #-7]
    c958:	f812 1c08 	ldrb.w	r1, [r2, #-8]
    c95c:	f812 0c06 	ldrb.w	r0, [r2, #-6]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    c960:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    c964:	f812 3c05 	ldrb.w	r3, [r2, #-5]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    c968:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    c96c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
    c970:	f812 0c04 	ldrb.w	r0, [r2, #-4]
    c974:	f812 1c03 	ldrb.w	r1, [r2, #-3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    c978:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    c97c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
    c980:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    c984:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    c988:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    c98c:	4976      	ldr	r1, [pc, #472]	; (cb68 <bt_mesh_net_decode+0x27c>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    c98e:	4053      	eors	r3, r2
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    c990:	4608      	mov	r0, r1
    c992:	4632      	mov	r2, r6
		if (dup_cache[i] == val) {
    c994:	f851 5b04 	ldr.w	r5, [r1], #4
    c998:	42ab      	cmp	r3, r5
    c99a:	d0d4      	beq.n	c946 <bt_mesh_net_decode+0x5a>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    c99c:	3201      	adds	r2, #1
    c99e:	2a04      	cmp	r2, #4
    c9a0:	d1f8      	bne.n	c994 <bt_mesh_net_decode+0xa8>
	dup_cache[dup_cache_next++] = val;
    c9a2:	4972      	ldr	r1, [pc, #456]	; (cb6c <bt_mesh_net_decode+0x280>)
    c9a4:	680a      	ldr	r2, [r1, #0]
    c9a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    c9aa:	3201      	adds	r2, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    c9ac:	f002 0203 	and.w	r2, r2, #3
    c9b0:	600a      	str	r2, [r1, #0]
	rx->net_if = net_if;
    c9b2:	7d23      	ldrb	r3, [r4, #20]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c9b4:	4d6e      	ldr	r5, [pc, #440]	; (cb70 <bt_mesh_net_decode+0x284>)
	rx->net_if = net_if;
    c9b6:	f366 1305 	bfi	r3, r6, #4, #2
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c9ba:	f8b5 20c0 	ldrh.w	r2, [r5, #192]	; 0xc0
	rx->net_if = net_if;
    c9be:	7523      	strb	r3, [r4, #20]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c9c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c9c4:	429a      	cmp	r2, r3
    c9c6:	d02b      	beq.n	ca20 <bt_mesh_net_decode+0x134>
		if (NID(data) == sub->keys[0].nid &&
    c9c8:	783b      	ldrb	r3, [r7, #0]
    c9ca:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
    c9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c9d2:	429a      	cmp	r2, r3
    c9d4:	d015      	beq.n	ca02 <bt_mesh_net_decode+0x116>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    c9d6:	f895 30c3 	ldrb.w	r3, [r5, #195]	; 0xc3
    c9da:	b30b      	cbz	r3, ca20 <bt_mesh_net_decode+0x134>
		if (NID(data) == sub->keys[1].nid &&
    c9dc:	783b      	ldrb	r3, [r7, #0]
    c9de:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    c9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c9e6:	429a      	cmp	r2, r3
    c9e8:	d11a      	bne.n	ca20 <bt_mesh_net_decode+0x134>
		    !net_decrypt(sub, sub->keys[1].enc, sub->keys[1].privacy,
    c9ea:	4962      	ldr	r1, [pc, #392]	; (cb74 <bt_mesh_net_decode+0x288>)
    c9ec:	e9cd 4900 	strd	r4, r9, [sp]
    c9f0:	4643      	mov	r3, r8
    c9f2:	463a      	mov	r2, r7
    c9f4:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
    c9f8:	f7ff f9fe 	bl	bdf8 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[1].nid &&
    c9fc:	b980      	cbnz	r0, ca20 <bt_mesh_net_decode+0x134>
		sub = &bt_mesh.sub[i];
    c9fe:	4a5e      	ldr	r2, [pc, #376]	; (cb78 <bt_mesh_net_decode+0x28c>)
    ca00:	e07d      	b.n	cafe <bt_mesh_net_decode+0x212>
		    !net_decrypt(sub, sub->keys[0].enc, sub->keys[0].privacy,
    ca02:	e9cd 4900 	strd	r4, r9, [sp]
    ca06:	4643      	mov	r3, r8
    ca08:	463a      	mov	r2, r7
    ca0a:	f205 110d 	addw	r1, r5, #269	; 0x10d
    ca0e:	f105 00e5 	add.w	r0, r5, #229	; 0xe5
    ca12:	f7ff f9f1 	bl	bdf8 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[0].nid &&
    ca16:	2800      	cmp	r0, #0
    ca18:	d1dd      	bne.n	c9d6 <bt_mesh_net_decode+0xea>
		sub = &bt_mesh.sub[i];
    ca1a:	f105 03a4 	add.w	r3, r5, #164	; 0xa4
    ca1e:	e019      	b.n	ca54 <bt_mesh_net_decode+0x168>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ca20:	f8b5 21a4 	ldrh.w	r2, [r5, #420]	; 0x1a4
    ca24:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ca28:	429a      	cmp	r2, r3
    ca2a:	d074      	beq.n	cb16 <bt_mesh_net_decode+0x22a>
		if (NID(data) == sub->keys[0].nid &&
    ca2c:	783b      	ldrb	r3, [r7, #0]
    ca2e:	f895 21c8 	ldrb.w	r2, [r5, #456]	; 0x1c8
    ca32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ca36:	429a      	cmp	r2, r3
    ca38:	d14b      	bne.n	cad2 <bt_mesh_net_decode+0x1e6>
		    !net_decrypt(sub, sub->keys[0].enc, sub->keys[0].privacy,
    ca3a:	4950      	ldr	r1, [pc, #320]	; (cb7c <bt_mesh_net_decode+0x290>)
    ca3c:	e9cd 4900 	strd	r4, r9, [sp]
    ca40:	4643      	mov	r3, r8
    ca42:	463a      	mov	r2, r7
    ca44:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
    ca48:	f7ff f9d6 	bl	bdf8 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[0].nid &&
    ca4c:	2800      	cmp	r0, #0
    ca4e:	d140      	bne.n	cad2 <bt_mesh_net_decode+0x1e6>
		sub = &bt_mesh.sub[i];
    ca50:	4b4b      	ldr	r3, [pc, #300]	; (cb80 <bt_mesh_net_decode+0x294>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    ca52:	2001      	movs	r0, #1
			rx->ctx.net_idx = sub->net_idx;
    ca54:	22e4      	movs	r2, #228	; 0xe4
    ca56:	fb02 5000 	mla	r0, r2, r0, r5
    ca5a:	f8b0 20c0 	ldrh.w	r2, [r0, #192]	; 0xc0
    ca5e:	80a2      	strh	r2, [r4, #4]
			rx->sub = sub;
    ca60:	6023      	str	r3, [r4, #0]
	rx->ctx.recv_ttl = TTL(buf->data);
    ca62:	f8d9 2000 	ldr.w	r2, [r9]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    ca66:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ca6a:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(buf->data);
    ca6c:	7851      	ldrb	r1, [r2, #1]
    ca6e:	7b23      	ldrb	r3, [r4, #12]
    ca70:	f361 0306 	bfi	r3, r1, #0, #7
    ca74:	7323      	strb	r3, [r4, #12]
	if (rx->ctx.recv_ttl == 0) {
    ca76:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
    ca7a:	bf18      	it	ne
    ca7c:	2301      	movne	r3, #1
    ca7e:	425b      	negs	r3, r3
    ca80:	7363      	strb	r3, [r4, #13]
	rx->ctl = CTL(buf->data);
    ca82:	7853      	ldrb	r3, [r2, #1]
    ca84:	7d21      	ldrb	r1, [r4, #20]
    ca86:	09db      	lsrs	r3, r3, #7
    ca88:	f363 01c3 	bfi	r1, r3, #3, #1
    ca8c:	7521      	strb	r1, [r4, #20]
	rx->seq = SEQ(buf->data);
    ca8e:	78d3      	ldrb	r3, [r2, #3]
    ca90:	7891      	ldrb	r1, [r2, #2]
    ca92:	021b      	lsls	r3, r3, #8
    ca94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ca98:	7911      	ldrb	r1, [r2, #4]
    ca9a:	430b      	orrs	r3, r1
    ca9c:	6123      	str	r3, [r4, #16]
	return ((u16_t)src[0] << 8) | src[1];
    ca9e:	79d1      	ldrb	r1, [r2, #7]
    caa0:	7a13      	ldrb	r3, [r2, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    caa2:	2e03      	cmp	r6, #3
    caa4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rx->ctx.recv_dst = DST(buf->data);
    caa8:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    caaa:	d039      	beq.n	cb20 <bt_mesh_net_decode+0x234>
    caac:	2b00      	cmp	r3, #0
    caae:	d137      	bne.n	cb20 <bt_mesh_net_decode+0x234>
		BT_ERR("Destination address is unassigned; dropping packet");
    cab0:	2301      	movs	r3, #1
    cab2:	f04f 0100 	mov.w	r1, #0
    cab6:	f363 0107 	bfi	r1, r3, #0, #8
    caba:	4a28      	ldr	r2, [pc, #160]	; (cb5c <bt_mesh_net_decode+0x270>)
    cabc:	4b26      	ldr	r3, [pc, #152]	; (cb58 <bt_mesh_net_decode+0x26c>)
    cabe:	4831      	ldr	r0, [pc, #196]	; (cb84 <bt_mesh_net_decode+0x298>)
    cac0:	1a9b      	subs	r3, r3, r2
    cac2:	08db      	lsrs	r3, r3, #3
    cac4:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Destination address is RFU; dropping packet");
    cac8:	f011 fcbb 	bl	1e442 <log_0>
		return -EBADMSG;
    cacc:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    cad0:	e023      	b.n	cb1a <bt_mesh_net_decode+0x22e>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    cad2:	f895 31a7 	ldrb.w	r3, [r5, #423]	; 0x1a7
    cad6:	b1f3      	cbz	r3, cb16 <bt_mesh_net_decode+0x22a>
		if (NID(data) == sub->keys[1].nid &&
    cad8:	783b      	ldrb	r3, [r7, #0]
    cada:	f895 2221 	ldrb.w	r2, [r5, #545]	; 0x221
    cade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cae2:	429a      	cmp	r2, r3
    cae4:	d117      	bne.n	cb16 <bt_mesh_net_decode+0x22a>
		    !net_decrypt(sub, sub->keys[1].enc, sub->keys[1].privacy,
    cae6:	4928      	ldr	r1, [pc, #160]	; (cb88 <bt_mesh_net_decode+0x29c>)
    cae8:	e9cd 4900 	strd	r4, r9, [sp]
    caec:	4643      	mov	r3, r8
    caee:	463a      	mov	r2, r7
    caf0:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
    caf4:	f7ff f980 	bl	bdf8 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[1].nid &&
    caf8:	b968      	cbnz	r0, cb16 <bt_mesh_net_decode+0x22a>
		sub = &bt_mesh.sub[i];
    cafa:	4a21      	ldr	r2, [pc, #132]	; (cb80 <bt_mesh_net_decode+0x294>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    cafc:	2001      	movs	r0, #1
			rx->new_key = 1U;
    cafe:	7d23      	ldrb	r3, [r4, #20]
    cb00:	f043 0302 	orr.w	r3, r3, #2
    cb04:	7523      	strb	r3, [r4, #20]
			rx->ctx.net_idx = sub->net_idx;
    cb06:	23e4      	movs	r3, #228	; 0xe4
    cb08:	fb03 5000 	mla	r0, r3, r0, r5
    cb0c:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
    cb10:	80a3      	strh	r3, [r4, #4]
			rx->sub = sub;
    cb12:	6022      	str	r2, [r4, #0]
			return true;
    cb14:	e7a5      	b.n	ca62 <bt_mesh_net_decode+0x176>
		return -ENOENT;
    cb16:	f06f 0001 	mvn.w	r0, #1
}
    cb1a:	b003      	add	sp, #12
    cb1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (BT_MESH_ADDR_IS_RFU(rx->ctx.recv_dst)) {
    cb20:	f503 7380 	add.w	r3, r3, #256	; 0x100
    cb24:	b29b      	uxth	r3, r3
    cb26:	2bfb      	cmp	r3, #251	; 0xfb
    cb28:	d80c      	bhi.n	cb44 <bt_mesh_net_decode+0x258>
		BT_ERR("Destination address is RFU; dropping packet");
    cb2a:	2301      	movs	r3, #1
    cb2c:	f04f 0100 	mov.w	r1, #0
    cb30:	f363 0107 	bfi	r1, r3, #0, #8
    cb34:	4a09      	ldr	r2, [pc, #36]	; (cb5c <bt_mesh_net_decode+0x270>)
    cb36:	4b08      	ldr	r3, [pc, #32]	; (cb58 <bt_mesh_net_decode+0x26c>)
    cb38:	4814      	ldr	r0, [pc, #80]	; (cb8c <bt_mesh_net_decode+0x2a0>)
    cb3a:	1a9b      	subs	r3, r3, r2
    cb3c:	08db      	lsrs	r3, r3, #3
    cb3e:	f363 118f 	bfi	r1, r3, #6, #10
    cb42:	e7c1      	b.n	cac8 <bt_mesh_net_decode+0x1dc>
	if (net_if != BT_MESH_NET_IF_LOCAL && bt_mesh_elem_find(rx->ctx.addr)) {
    cb44:	2e01      	cmp	r6, #1
    cb46:	d004      	beq.n	cb52 <bt_mesh_net_decode+0x266>
    cb48:	8920      	ldrh	r0, [r4, #8]
    cb4a:	f001 fdf5 	bl	e738 <bt_mesh_elem_find>
    cb4e:	2800      	cmp	r0, #0
    cb50:	d1bc      	bne.n	cacc <bt_mesh_net_decode+0x1e0>
	return 0;
    cb52:	2000      	movs	r0, #0
    cb54:	e7e1      	b.n	cb1a <bt_mesh_net_decode+0x22e>
    cb56:	bf00      	nop
    cb58:	000234b4 	.word	0x000234b4
    cb5c:	000233ec 	.word	0x000233ec
    cb60:	00025af9 	.word	0x00025af9
    cb64:	00025869 	.word	0x00025869
    cb68:	20000ab0 	.word	0x20000ab0
    cb6c:	20000ac0 	.word	0x20000ac0
    cb70:	20007924 	.word	0x20007924
    cb74:	20007a8a 	.word	0x20007a8a
    cb78:	200079c8 	.word	0x200079c8
    cb7c:	20007b15 	.word	0x20007b15
    cb80:	20007aac 	.word	0x20007aac
    cb84:	00025b21 	.word	0x00025b21
    cb88:	20007b6e 	.word	0x20007b6e
    cb8c:	00025b54 	.word	0x00025b54

0000cb90 <bt_mesh_net_recv>:
{
    cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb94:	b092      	sub	sp, #72	; 0x48
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    cb96:	ab0a      	add	r3, sp, #40	; 0x28
{
    cb98:	4616      	mov	r6, r2
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    cb9a:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
{
    cb9e:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    cba0:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    cba4:	4605      	mov	r5, r0
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    cba6:	2218      	movs	r2, #24
    cba8:	2100      	movs	r1, #0
    cbaa:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    cbac:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    cbae:	f012 fd55 	bl	1f65c <memset>
    cbb2:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	if (!bt_mesh_is_provisioned()) {
    cbb6:	f013 fde7 	bl	20788 <bt_mesh_is_provisioned>
    cbba:	2800      	cmp	r0, #0
    cbbc:	d043      	beq.n	cc46 <bt_mesh_net_recv+0xb6>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    cbbe:	ab01      	add	r3, sp, #4
    cbc0:	aa04      	add	r2, sp, #16
    cbc2:	4631      	mov	r1, r6
    cbc4:	4628      	mov	r0, r5
    cbc6:	f7ff fe91 	bl	c8ec <bt_mesh_net_decode>
    cbca:	2800      	cmp	r0, #0
    cbcc:	d13b      	bne.n	cc46 <bt_mesh_net_recv+0xb6>
	state->offset = net_buf_simple_headroom(buf);
    cbce:	a801      	add	r0, sp, #4
    cbd0:	f015 fd7c 	bl	226cc <net_buf_simple_headroom>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cbd4:	2e02      	cmp	r6, #2
    cbd6:	4604      	mov	r4, r0
	state->len = buf->len;
    cbd8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
    cbdc:	d104      	bne.n	cbe8 <bt_mesh_net_recv+0x58>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    cbde:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    cbe2:	4628      	mov	r0, r5
    cbe4:	f014 ff33 	bl	21a4e <bt_mesh_proxy_addr_add>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cbe8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    cbec:	f014 fade 	bl	211ac <bt_mesh_fixed_group_match>
    cbf0:	bb60      	cbnz	r0, cc4c <bt_mesh_net_recv+0xbc>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    cbf2:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    cbf6:	f001 fd9f 	bl	e738 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cbfa:	3000      	adds	r0, #0
    cbfc:	bf18      	it	ne
    cbfe:	2001      	movne	r0, #1
    cc00:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	bt_mesh_trans_recv(&buf, &rx);
    cc04:	a904      	add	r1, sp, #16
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cc06:	f360 1386 	bfi	r3, r0, #6, #1
	bt_mesh_trans_recv(&buf, &rx);
    cc0a:	a801      	add	r0, sp, #4
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cc0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_mesh_trans_recv(&buf, &rx);
    cc10:	f000 ff8e 	bl	db30 <bt_mesh_trans_recv>
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    cc14:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    cc18:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	dd02      	ble.n	cc26 <bt_mesh_net_recv+0x96>
    cc20:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    cc24:	d10f      	bne.n	cc46 <bt_mesh_net_recv+0xb6>
	buf->data = buf->__buf + state->offset;
    cc26:	9b03      	ldr	r3, [sp, #12]
	buf->len = state->len;
    cc28:	f8ad 7008 	strh.w	r7, [sp, #8]
	buf->data = buf->__buf + state->offset;
    cc2c:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    cc30:	f002 0230 	and.w	r2, r2, #48	; 0x30
    cc34:	f89d 301c 	ldrb.w	r3, [sp, #28]
    cc38:	9401      	str	r4, [sp, #4]
    cc3a:	2a10      	cmp	r2, #16
		if (rx->ctx.recv_ttl == 1) {
    cc3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    cc40:	d106      	bne.n	cc50 <bt_mesh_net_recv+0xc0>
		if (rx->ctx.recv_ttl == 1) {
    cc42:	2b01      	cmp	r3, #1
    cc44:	d110      	bne.n	cc68 <bt_mesh_net_recv+0xd8>
}
    cc46:	b012      	add	sp, #72	; 0x48
    cc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cc4c:	2001      	movs	r0, #1
    cc4e:	e7d7      	b.n	cc00 <bt_mesh_net_recv+0x70>
		if (rx->ctx.recv_ttl <= 1) {
    cc50:	2b01      	cmp	r3, #1
    cc52:	d9f8      	bls.n	cc46 <bt_mesh_net_recv+0xb6>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    cc54:	b942      	cbnz	r2, cc68 <bt_mesh_net_recv+0xd8>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    cc56:	f004 f82f 	bl	10cb8 <bt_mesh_relay_get>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    cc5a:	2801      	cmp	r0, #1
    cc5c:	d107      	bne.n	cc6e <bt_mesh_net_recv+0xde>
	if (rx->net_if == BT_MESH_NET_IF_ADV) {
    cc5e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    cc62:	f013 0f30 	tst.w	r3, #48	; 0x30
    cc66:	d007      	beq.n	cc78 <bt_mesh_net_recv+0xe8>
		transmit = bt_mesh_net_transmit_get();
    cc68:	f003 ff9e 	bl	10ba8 <bt_mesh_net_transmit_get>
    cc6c:	e006      	b.n	cc7c <bt_mesh_net_recv+0xec>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    cc6e:	f004 f91d 	bl	10eac <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    cc72:	2801      	cmp	r0, #1
    cc74:	d1e7      	bne.n	cc46 <bt_mesh_net_recv+0xb6>
    cc76:	e7f2      	b.n	cc5e <bt_mesh_net_recv+0xce>
		transmit = bt_mesh_relay_retransmit_get();
    cc78:	f004 f832 	bl	10ce0 <bt_mesh_relay_retransmit_get>
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    cc7c:	4601      	mov	r1, r0
    cc7e:	2200      	movs	r2, #0
    cc80:	2001      	movs	r0, #1
    cc82:	f7fe fd3d 	bl	b700 <bt_mesh_adv_create>
	if (!buf) {
    cc86:	4604      	mov	r4, r0
    cc88:	b970      	cbnz	r0, cca8 <bt_mesh_net_recv+0x118>
		BT_ERR("Out of relay buffers");
    cc8a:	2301      	movs	r3, #1
    cc8c:	f04f 0100 	mov.w	r1, #0
    cc90:	f363 0107 	bfi	r1, r3, #0, #8
    cc94:	4a54      	ldr	r2, [pc, #336]	; (cde8 <bt_mesh_net_recv+0x258>)
    cc96:	4b55      	ldr	r3, [pc, #340]	; (cdec <bt_mesh_net_recv+0x25c>)
    cc98:	4855      	ldr	r0, [pc, #340]	; (cdf0 <bt_mesh_net_recv+0x260>)
    cc9a:	1a9b      	subs	r3, r3, r2
    cc9c:	08db      	lsrs	r3, r3, #3
    cc9e:	f363 118f 	bfi	r1, r3, #6, #10
    cca2:	f011 fbce 	bl	1e442 <log_0>
		return;
    cca6:	e7ce      	b.n	cc46 <bt_mesh_net_recv+0xb6>
	if (rx->net_if != BT_MESH_NET_IF_LOCAL) {
    cca8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    ccac:	f003 0330 	and.w	r3, r3, #48	; 0x30
    ccb0:	2b10      	cmp	r3, #16
    ccb2:	d00d      	beq.n	ccd0 <bt_mesh_net_recv+0x140>
    ccb4:	9a01      	ldr	r2, [sp, #4]
		sbuf->data[1] &= 0x80;
    ccb6:	7853      	ldrb	r3, [r2, #1]
    ccb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ccbc:	7053      	strb	r3, [r2, #1]
		sbuf->data[1] |= rx->ctx.recv_ttl - 1;
    ccbe:	9a01      	ldr	r2, [sp, #4]
    ccc0:	f89d 301c 	ldrb.w	r3, [sp, #28]
    ccc4:	7851      	ldrb	r1, [r2, #1]
    ccc6:	f3c3 0306 	ubfx	r3, r3, #0, #7
    ccca:	3b01      	subs	r3, #1
    cccc:	430b      	orrs	r3, r1
    ccce:	7053      	strb	r3, [r2, #1]
	net_buf_add_mem(buf, sbuf->data, sbuf->len);
    ccd0:	f104 0708 	add.w	r7, r4, #8
    ccd4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    ccd8:	9901      	ldr	r1, [sp, #4]
    ccda:	4638      	mov	r0, r7
    ccdc:	f015 fc5b 	bl	22596 <net_buf_simple_add_mem>
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    cce0:	9e04      	ldr	r6, [sp, #16]
	if (rx->friend_cred) {
    cce2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    cce6:	7fb2      	ldrb	r2, [r6, #30]
    cce8:	2559      	movs	r5, #89	; 0x59
    ccea:	4355      	muls	r5, r2
    ccec:	f105 0041 	add.w	r0, r5, #65	; 0x41
	if (rx->friend_cred) {
    ccf0:	075a      	lsls	r2, r3, #29
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    ccf2:	4430      	add	r0, r6
	if (rx->friend_cred) {
    ccf4:	d50b      	bpl.n	cd0e <bt_mesh_net_recv+0x17e>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    ccf6:	68a1      	ldr	r1, [r4, #8]
    ccf8:	780a      	ldrb	r2, [r1, #0]
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    ccfa:	1973      	adds	r3, r6, r5
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    ccfc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    cd00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    cd04:	700a      	strb	r2, [r1, #0]
		buf->data[0] |= nid;
    cd06:	68a2      	ldr	r2, [r4, #8]
    cd08:	7811      	ldrb	r1, [r2, #0]
    cd0a:	430b      	orrs	r3, r1
    cd0c:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_RX(rx), false)) {
    cd0e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; cdfc <bt_mesh_net_recv+0x26c>
    cd12:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    cd16:	f8d8 1000 	ldr.w	r1, [r8]
    cd1a:	f002 0201 	and.w	r2, r2, #1
    cd1e:	1a8a      	subs	r2, r1, r2
    cd20:	2300      	movs	r3, #0
    cd22:	4639      	mov	r1, r7
    cd24:	f014 f8ba 	bl	20e9c <bt_mesh_net_encrypt>
    cd28:	b188      	cbz	r0, cd4e <bt_mesh_net_recv+0x1be>
		BT_ERR("Re-encrypting failed");
    cd2a:	2301      	movs	r3, #1
    cd2c:	f04f 0100 	mov.w	r1, #0
    cd30:	f363 0107 	bfi	r1, r3, #0, #8
    cd34:	4a2c      	ldr	r2, [pc, #176]	; (cde8 <bt_mesh_net_recv+0x258>)
    cd36:	4b2d      	ldr	r3, [pc, #180]	; (cdec <bt_mesh_net_recv+0x25c>)
    cd38:	482e      	ldr	r0, [pc, #184]	; (cdf4 <bt_mesh_net_recv+0x264>)
    cd3a:	1a9b      	subs	r3, r3, r2
    cd3c:	08db      	lsrs	r3, r3, #3
    cd3e:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Re-obfuscating failed");
    cd42:	f011 fb7e 	bl	1e442 <log_0>
	net_buf_unref(buf);
    cd46:	4620      	mov	r0, r4
    cd48:	f00d ff74 	bl	1ac34 <net_buf_unref>
    cd4c:	e77b      	b.n	cc46 <bt_mesh_net_recv+0xb6>
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    cd4e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    cd52:	f8d8 1000 	ldr.w	r1, [r8]
    cd56:	68a0      	ldr	r0, [r4, #8]
	priv = rx->sub->keys[rx->sub->kr_flag].privacy;
    cd58:	f105 0269 	add.w	r2, r5, #105	; 0x69
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    cd5c:	f003 0301 	and.w	r3, r3, #1
    cd60:	4432      	add	r2, r6
    cd62:	1ac9      	subs	r1, r1, r3
    cd64:	f014 f871 	bl	20e4a <bt_mesh_net_obfuscate>
    cd68:	b160      	cbz	r0, cd84 <bt_mesh_net_recv+0x1f4>
		BT_ERR("Re-obfuscating failed");
    cd6a:	2301      	movs	r3, #1
    cd6c:	f04f 0100 	mov.w	r1, #0
    cd70:	f363 0107 	bfi	r1, r3, #0, #8
    cd74:	4a1c      	ldr	r2, [pc, #112]	; (cde8 <bt_mesh_net_recv+0x258>)
    cd76:	4b1d      	ldr	r3, [pc, #116]	; (cdec <bt_mesh_net_recv+0x25c>)
    cd78:	481f      	ldr	r0, [pc, #124]	; (cdf8 <bt_mesh_net_recv+0x268>)
    cd7a:	1a9b      	subs	r3, r3, r2
    cd7c:	08db      	lsrs	r3, r3, #3
    cd7e:	f363 118f 	bfi	r1, r3, #6, #10
    cd82:	e7de      	b.n	cd42 <bt_mesh_net_recv+0x1b2>
	    (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED ||
    cd84:	f004 f892 	bl	10eac <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cd88:	2801      	cmp	r0, #1
    cd8a:	d013      	beq.n	cdb4 <bt_mesh_net_recv+0x224>
	     rx->net_if == BT_MESH_NET_IF_LOCAL)) {
    cd8c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cd90:	f003 0330 	and.w	r3, r3, #48	; 0x30
    cd94:	2b10      	cmp	r3, #16
    cd96:	d00d      	beq.n	cdb4 <bt_mesh_net_recv+0x224>
	if (relay_to_adv(rx->net_if)) {
    cd98:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    cd9c:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cda0:	b2da      	uxtb	r2, r3
	switch (net_if) {
    cda2:	2a01      	cmp	r2, #1
    cda4:	d019      	beq.n	cdda <bt_mesh_net_recv+0x24a>
    cda6:	b25b      	sxtb	r3, r3
    cda8:	b183      	cbz	r3, cdcc <bt_mesh_net_recv+0x23c>
    cdaa:	2a02      	cmp	r2, #2
    cdac:	d1cb      	bne.n	cd46 <bt_mesh_net_recv+0x1b6>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    cdae:	f004 f87d 	bl	10eac <bt_mesh_gatt_proxy_get>
    cdb2:	e00d      	b.n	cdd0 <bt_mesh_net_recv+0x240>
		if (bt_mesh_proxy_relay(&buf->b, rx->ctx.recv_dst) &&
    cdb4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    cdb8:	4638      	mov	r0, r7
    cdba:	f008 f94f 	bl	1505c <bt_mesh_proxy_relay>
    cdbe:	2800      	cmp	r0, #0
    cdc0:	d0ea      	beq.n	cd98 <bt_mesh_net_recv+0x208>
    cdc2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    cdc6:	2b00      	cmp	r3, #0
    cdc8:	dde6      	ble.n	cd98 <bt_mesh_net_recv+0x208>
    cdca:	e7bc      	b.n	cd46 <bt_mesh_net_recv+0x1b6>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    cdcc:	f003 ff74 	bl	10cb8 <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    cdd0:	1e43      	subs	r3, r0, #1
    cdd2:	4258      	negs	r0, r3
    cdd4:	4158      	adcs	r0, r3
	if (relay_to_adv(rx->net_if)) {
    cdd6:	2800      	cmp	r0, #0
    cdd8:	d0b5      	beq.n	cd46 <bt_mesh_net_recv+0x1b6>
		bt_mesh_adv_send(buf, NULL, NULL);
    cdda:	2200      	movs	r2, #0
    cddc:	4611      	mov	r1, r2
    cdde:	4620      	mov	r0, r4
    cde0:	f7fe fc9e 	bl	b720 <bt_mesh_adv_send>
    cde4:	e7af      	b.n	cd46 <bt_mesh_net_recv+0x1b6>
    cde6:	bf00      	nop
    cde8:	000233ec 	.word	0x000233ec
    cdec:	000234b4 	.word	0x000234b4
    cdf0:	00025d2a 	.word	0x00025d2a
    cdf4:	00025d3f 	.word	0x00025d3f
    cdf8:	00025d54 	.word	0x00025d54
    cdfc:	20007924 	.word	0x20007924

0000ce00 <bt_mesh_net_local>:
{
    ce00:	b538      	push	{r3, r4, r5, lr}
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    ce02:	4d08      	ldr	r5, [pc, #32]	; (ce24 <bt_mesh_net_local+0x24>)
    ce04:	4628      	mov	r0, r5
    ce06:	f015 fb7a 	bl	224fe <net_buf_slist_get>
    ce0a:	4604      	mov	r4, r0
    ce0c:	b900      	cbnz	r0, ce10 <bt_mesh_net_local+0x10>
}
    ce0e:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_net_recv(&buf->b, 0, BT_MESH_NET_IF_LOCAL);
    ce10:	f104 0008 	add.w	r0, r4, #8
    ce14:	2201      	movs	r2, #1
    ce16:	2100      	movs	r1, #0
    ce18:	f7ff feba 	bl	cb90 <bt_mesh_net_recv>
		net_buf_unref(buf);
    ce1c:	4620      	mov	r0, r4
    ce1e:	f00d ff09 	bl	1ac34 <net_buf_unref>
    ce22:	e7ef      	b.n	ce04 <bt_mesh_net_local+0x4>
    ce24:	2000793c 	.word	0x2000793c

0000ce28 <bt_mesh_net_start>:

void bt_mesh_net_start(void)
{
    ce28:	b510      	push	{r4, lr}
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED) {
    ce2a:	f003 ff9b 	bl	10d64 <bt_mesh_beacon_get>
    ce2e:	2801      	cmp	r0, #1
    ce30:	d116      	bne.n	ce60 <bt_mesh_net_start+0x38>
		bt_mesh_beacon_enable();
    ce32:	f7fe ff63 	bl	bcfc <bt_mesh_beacon_enable>
	} else {
		bt_mesh_beacon_disable();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    ce36:	f004 f839 	bl	10eac <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    ce3a:	2802      	cmp	r0, #2
    ce3c:	d003      	beq.n	ce46 <bt_mesh_net_start+0x1e>
		bt_mesh_proxy_gatt_enable();
    ce3e:	f008 f885 	bl	14f4c <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    ce42:	f7fe fc19 	bl	b678 <bt_mesh_adv_update>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_init();
	} else {
		bt_mesh_scan_enable();
    ce46:	f7fe fca1 	bl	b78c <bt_mesh_scan_enable>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_init();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		u16_t net_idx = bt_mesh.sub[0].net_idx;
    ce4a:	4b07      	ldr	r3, [pc, #28]	; (ce68 <bt_mesh_net_start+0x40>)
    ce4c:	f8b3 40c0 	ldrh.w	r4, [r3, #192]	; 0xc0
		u16_t addr = bt_mesh_primary_addr();
    ce50:	f001 fc6c 	bl	e72c <bt_mesh_primary_addr>

		bt_mesh_prov_complete(net_idx, addr);
    ce54:	4601      	mov	r1, r0
    ce56:	4620      	mov	r0, r4
	}
}
    ce58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_complete(net_idx, addr);
    ce5c:	f007 bc48 	b.w	146f0 <bt_mesh_prov_complete>
		bt_mesh_beacon_disable();
    ce60:	f7fe ff72 	bl	bd48 <bt_mesh_beacon_disable>
    ce64:	e7e7      	b.n	ce36 <bt_mesh_net_start+0xe>
    ce66:	bf00      	nop
    ce68:	20007924 	.word	0x20007924

0000ce6c <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
    ce6c:	b510      	push	{r4, lr}
	k_delayed_work_init(&bt_mesh.ivu_timer, ivu_refresh);
    ce6e:	4c06      	ldr	r4, [pc, #24]	; (ce88 <bt_mesh_net_init+0x1c>)
    ce70:	4906      	ldr	r1, [pc, #24]	; (ce8c <bt_mesh_net_init+0x20>)
    ce72:	f104 0024 	add.w	r0, r4, #36	; 0x24
    ce76:	f016 f888 	bl	22f8a <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ce7a:	4a05      	ldr	r2, [pc, #20]	; (ce90 <bt_mesh_net_init+0x24>)
    ce7c:	2300      	movs	r3, #0
    ce7e:	60e3      	str	r3, [r4, #12]
    ce80:	e9c4 2304 	strd	r2, r3, [r4, #16]

	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
}
    ce84:	bd10      	pop	{r4, pc}
    ce86:	bf00      	nop
    ce88:	20007924 	.word	0x20007924
    ce8c:	0000c455 	.word	0x0000c455
    ce90:	0000ce01 	.word	0x0000ce01

0000ce94 <is_replay>:
static bool is_replay(struct bt_mesh_net_rx *rx)
{
	int i;

	/* Don't bother checking messages from ourselves */
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    ce94:	7d02      	ldrb	r2, [r0, #20]
{
    ce96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    ce98:	f002 0330 	and.w	r3, r2, #48	; 0x30
    ce9c:	2b10      	cmp	r3, #16
{
    ce9e:	4605      	mov	r5, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    cea0:	d013      	beq.n	ceca <is_replay+0x36>
    cea2:	491f      	ldr	r1, [pc, #124]	; (cf20 <is_replay+0x8c>)
    cea4:	8907      	ldrh	r7, [r0, #8]
		return false;
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    cea6:	2300      	movs	r3, #0
    cea8:	460e      	mov	r6, r1
		struct bt_mesh_rpl *rpl = &bt_mesh.rpl[i];

		/* Empty slot */
		if (!rpl->src) {
    ceaa:	f8b1 426c 	ldrh.w	r4, [r1, #620]	; 0x26c
    ceae:	f501 701b 	add.w	r0, r1, #620	; 0x26c
    ceb2:	b964      	cbnz	r4, cece <is_replay+0x3a>
			rpl->src = rx->ctx.addr;
    ceb4:	334d      	adds	r3, #77	; 0x4d
    ceb6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    ceba:	809f      	strh	r7, [r3, #4]
				return true;
			}

			if ((!rx->old_iv && rpl->old_iv) ||
			    rpl->seq < rx->seq) {
				rpl->seq = rx->seq;
    cebc:	6929      	ldr	r1, [r5, #16]
    cebe:	6099      	str	r1, [r3, #8]
				rpl->old_iv = rx->old_iv;
    cec0:	f3c2 0200 	ubfx	r2, r2, #0, #1
    cec4:	719a      	strb	r2, [r3, #6]

				if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
					bt_mesh_store_rpl(rpl);
    cec6:	f014 fc46 	bl	21756 <bt_mesh_store_rpl>
				}

				return false;
    ceca:	2000      	movs	r0, #0
		}
	}

	BT_ERR("RPL is full!");
	return true;
}
    cecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    cece:	42bc      	cmp	r4, r7
    ced0:	d112      	bne.n	cef8 <is_replay+0x64>
			if (rx->old_iv && !rpl->old_iv) {
    ced2:	334d      	adds	r3, #77	; 0x4d
    ced4:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
    ced8:	07d4      	lsls	r4, r2, #31
    ceda:	7989      	ldrb	r1, [r1, #6]
    cedc:	d502      	bpl.n	cee4 <is_replay+0x50>
    cede:	b911      	cbnz	r1, cee6 <is_replay+0x52>
				return true;
    cee0:	2001      	movs	r0, #1
    cee2:	e7f3      	b.n	cecc <is_replay+0x38>
			if ((!rx->old_iv && rpl->old_iv) ||
    cee4:	b929      	cbnz	r1, cef2 <is_replay+0x5e>
			    rpl->seq < rx->seq) {
    cee6:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
			if ((!rx->old_iv && rpl->old_iv) ||
    ceea:	688c      	ldr	r4, [r1, #8]
    ceec:	6929      	ldr	r1, [r5, #16]
    ceee:	428c      	cmp	r4, r1
    cef0:	d2f6      	bcs.n	cee0 <is_replay+0x4c>
				rpl->seq = rx->seq;
    cef2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    cef6:	e7e1      	b.n	cebc <is_replay+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    cef8:	3301      	adds	r3, #1
    cefa:	2b0a      	cmp	r3, #10
    cefc:	f101 0108 	add.w	r1, r1, #8
    cf00:	d1d3      	bne.n	ceaa <is_replay+0x16>
	BT_ERR("RPL is full!");
    cf02:	2301      	movs	r3, #1
    cf04:	f04f 0100 	mov.w	r1, #0
    cf08:	f363 0107 	bfi	r1, r3, #0, #8
    cf0c:	4a05      	ldr	r2, [pc, #20]	; (cf24 <is_replay+0x90>)
    cf0e:	4b06      	ldr	r3, [pc, #24]	; (cf28 <is_replay+0x94>)
    cf10:	4806      	ldr	r0, [pc, #24]	; (cf2c <is_replay+0x98>)
    cf12:	1a9b      	subs	r3, r3, r2
    cf14:	08db      	lsrs	r3, r3, #3
    cf16:	f363 118f 	bfi	r1, r3, #6, #10
    cf1a:	f011 fa92 	bl	1e442 <log_0>
	return true;
    cf1e:	e7df      	b.n	cee0 <is_replay+0x4c>
    cf20:	20007924 	.word	0x20007924
    cf24:	000233ec 	.word	0x000233ec
    cf28:	000234d4 	.word	0x000234d4
    cf2c:	00026106 	.word	0x00026106

0000cf30 <sdu_recv>:

static int sdu_recv(struct bt_mesh_net_rx *rx, u32_t seq, u8_t hdr,
		    u8_t aszmic, struct net_buf_simple *buf)
{
    cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf34:	b09f      	sub	sp, #124	; 0x7c
    cf36:	4692      	mov	sl, r2
    cf38:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    cf3a:	9108      	str	r1, [sp, #32]
	NET_BUF_SIMPLE_DEFINE(sdu, CONFIG_BT_MESH_RX_SDU_MAX - 4);
    cf3c:	aa0d      	add	r2, sp, #52	; 0x34
    cf3e:	f44f 0188 	mov.w	r1, #4456448	; 0x440000
	int err;

	BT_DBG("ASZMIC %u AKF %u AID 0x%02x", aszmic, AKF(&hdr), AID(&hdr));
	BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));

	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
    cf42:	f1b3 0900 	subs.w	r9, r3, #0
	NET_BUF_SIMPLE_DEFINE(sdu, CONFIG_BT_MESH_RX_SDU_MAX - 4);
    cf46:	920a      	str	r2, [sp, #40]	; 0x28
    cf48:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
    cf4c:	88b2      	ldrh	r2, [r6, #4]
    cf4e:	bf14      	ite	ne
    cf50:	2309      	movne	r3, #9
    cf52:	2305      	moveq	r3, #5
    cf54:	429a      	cmp	r2, r3
{
    cf56:	4604      	mov	r4, r0
	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
    cf58:	da10      	bge.n	cf7c <sdu_recv+0x4c>
		BT_ERR("Too short SDU + MIC");
    cf5a:	2301      	movs	r3, #1
    cf5c:	f04f 0100 	mov.w	r1, #0
    cf60:	f363 0107 	bfi	r1, r3, #0, #8
    cf64:	4a5c      	ldr	r2, [pc, #368]	; (d0d8 <sdu_recv+0x1a8>)
    cf66:	4b5d      	ldr	r3, [pc, #372]	; (d0dc <sdu_recv+0x1ac>)
    cf68:	485d      	ldr	r0, [pc, #372]	; (d0e0 <sdu_recv+0x1b0>)
    cf6a:	1a9b      	subs	r3, r3, r2
    cf6c:	08db      	lsrs	r3, r3, #3
    cf6e:	f363 118f 	bfi	r1, r3, #6, #10

		bt_mesh_model_recv(rx, &sdu);
		return 0;
	}

	BT_WARN("No matching AppKey");
    cf72:	f011 fa66 	bl	1e442 <log_0>

	return -EINVAL;
    cf76:	f06f 0b15 	mvn.w	fp, #21
    cf7a:	e042      	b.n	d002 <sdu_recv+0xd2>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    cf7c:	8940      	ldrh	r0, [r0, #10]
    cf7e:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    cf82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    cf86:	d233      	bcs.n	cff0 <sdu_recv+0xc0>
		ad = bt_mesh_label_uuid_get(rx->ctx.recv_dst);
    cf88:	f004 fa68 	bl	1145c <bt_mesh_label_uuid_get>
    cf8c:	4607      	mov	r7, r0
	buf->len -= APP_MIC_LEN(aszmic);
    cf8e:	f1b9 0f00 	cmp.w	r9, #0
    cf92:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
    cf96:	bf14      	ite	ne
    cf98:	2208      	movne	r2, #8
    cf9a:	2204      	moveq	r2, #4
    cf9c:	1a9b      	subs	r3, r3, r2
	if (!AKF(&hdr)) {
    cf9e:	f01a 0f40 	tst.w	sl, #64	; 0x40
	buf->len -= APP_MIC_LEN(aszmic);
    cfa2:	80b3      	strh	r3, [r6, #4]
	if (!AKF(&hdr)) {
    cfa4:	d131      	bne.n	d00a <sdu_recv+0xda>
					  BT_MESH_NET_IVI_RX(rx));
    cfa6:	7d23      	ldrb	r3, [r4, #20]
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, buf,
    cfa8:	484e      	ldr	r0, [pc, #312]	; (d0e4 <sdu_recv+0x1b4>)
					  BT_MESH_NET_IVI_RX(rx));
    cfaa:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, buf,
    cfae:	f850 3c44 	ldr.w	r3, [r0, #-68]
    cfb2:	1a9b      	subs	r3, r3, r2
    cfb4:	9305      	str	r3, [sp, #20]
    cfb6:	9b08      	ldr	r3, [sp, #32]
    cfb8:	9304      	str	r3, [sp, #16]
    cfba:	8963      	ldrh	r3, [r4, #10]
    cfbc:	9303      	str	r3, [sp, #12]
    cfbe:	8923      	ldrh	r3, [r4, #8]
    cfc0:	ad0a      	add	r5, sp, #40	; 0x28
    cfc2:	e9cd 7301 	strd	r7, r3, [sp, #4]
    cfc6:	9500      	str	r5, [sp, #0]
    cfc8:	4633      	mov	r3, r6
    cfca:	464a      	mov	r2, r9
    cfcc:	2101      	movs	r1, #1
    cfce:	f014 f84b 	bl	21068 <bt_mesh_app_decrypt>
		if (err) {
    cfd2:	4683      	mov	fp, r0
    cfd4:	b170      	cbz	r0, cff4 <sdu_recv+0xc4>
			BT_ERR("Unable to decrypt with DevKey");
    cfd6:	2301      	movs	r3, #1
    cfd8:	f04f 0100 	mov.w	r1, #0
    cfdc:	f363 0107 	bfi	r1, r3, #0, #8
    cfe0:	4a3d      	ldr	r2, [pc, #244]	; (d0d8 <sdu_recv+0x1a8>)
    cfe2:	4b3e      	ldr	r3, [pc, #248]	; (d0dc <sdu_recv+0x1ac>)
    cfe4:	4840      	ldr	r0, [pc, #256]	; (d0e8 <sdu_recv+0x1b8>)
    cfe6:	1a9b      	subs	r3, r3, r2
    cfe8:	08db      	lsrs	r3, r3, #3
    cfea:	f363 118f 	bfi	r1, r3, #6, #10
    cfee:	e7c0      	b.n	cf72 <sdu_recv+0x42>
		ad = NULL;
    cff0:	2700      	movs	r7, #0
    cff2:	e7cc      	b.n	cf8e <sdu_recv+0x5e>
		rx->ctx.app_idx = BT_MESH_KEY_DEV;
    cff4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    cff8:	80e2      	strh	r2, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    cffa:	4629      	mov	r1, r5
		bt_mesh_model_recv(rx, &sdu);
    cffc:	4620      	mov	r0, r4
    cffe:	f001 fbe1 	bl	e7c4 <bt_mesh_model_recv>
}
    d002:	4658      	mov	r0, fp
    d004:	b01f      	add	sp, #124	; 0x7c
    d006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d00a:	4b34      	ldr	r3, [pc, #208]	; (d0dc <sdu_recv+0x1ac>)
			BT_WARN("Unable to decrypt with AppKey 0x%03x",
    d00c:	4a32      	ldr	r2, [pc, #200]	; (d0d8 <sdu_recv+0x1a8>)
    d00e:	4d37      	ldr	r5, [pc, #220]	; (d0ec <sdu_recv+0x1bc>)
    d010:	1a9b      	subs	r3, r3, r2
    d012:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    d016:	9307      	str	r3, [sp, #28]
    d018:	2300      	movs	r3, #0
    d01a:	9306      	str	r3, [sp, #24]
		if (AID(&hdr) != keys->id) {
    d01c:	f00a 033f 	and.w	r3, sl, #63	; 0x3f
    d020:	9309      	str	r3, [sp, #36]	; 0x24
					  BT_MESH_NET_IVI_RX(rx));
    d022:	46aa      	mov	sl, r5
		if (key->net_idx != rx->sub->net_idx) {
    d024:	6823      	ldr	r3, [r4, #0]
    d026:	f8b5 2054 	ldrh.w	r2, [r5, #84]	; 0x54
    d02a:	8b9b      	ldrh	r3, [r3, #28]
    d02c:	429a      	cmp	r2, r3
    d02e:	d137      	bne.n	d0a0 <sdu_recv+0x170>
		if (rx->new_key && key->updated) {
    d030:	7d23      	ldrb	r3, [r4, #20]
    d032:	079b      	lsls	r3, r3, #30
    d034:	d544      	bpl.n	d0c0 <sdu_recv+0x190>
    d036:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
    d03a:	2b00      	cmp	r3, #0
    d03c:	d040      	beq.n	d0c0 <sdu_recv+0x190>
			keys = &key->keys[1];
    d03e:	f105 006a 	add.w	r0, r5, #106	; 0x6a
		if (AID(&hdr) != keys->id) {
    d042:	7803      	ldrb	r3, [r0, #0]
    d044:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d046:	4293      	cmp	r3, r2
    d048:	d12a      	bne.n	d0a0 <sdu_recv+0x170>
	buf->data = buf->__buf;
    d04a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d04c:	930a      	str	r3, [sp, #40]	; 0x28
					  BT_MESH_NET_IVI_RX(rx));
    d04e:	7d23      	ldrb	r3, [r4, #20]
    d050:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(keys->val, false, aszmic, buf,
    d054:	f8da 3000 	ldr.w	r3, [sl]
    d058:	1a9b      	subs	r3, r3, r2
    d05a:	9305      	str	r3, [sp, #20]
    d05c:	9b08      	ldr	r3, [sp, #32]
    d05e:	9304      	str	r3, [sp, #16]
    d060:	8963      	ldrh	r3, [r4, #10]
    d062:	9303      	str	r3, [sp, #12]
    d064:	8923      	ldrh	r3, [r4, #8]
    d066:	e9cd 7301 	strd	r7, r3, [sp, #4]
    d06a:	ab0a      	add	r3, sp, #40	; 0x28
	buf->len  = 0;
    d06c:	2100      	movs	r1, #0
    d06e:	9300      	str	r3, [sp, #0]
    d070:	464a      	mov	r2, r9
    d072:	4633      	mov	r3, r6
    d074:	3001      	adds	r0, #1
    d076:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    d07a:	f013 fff5 	bl	21068 <bt_mesh_app_decrypt>
		if (err) {
    d07e:	4683      	mov	fp, r0
    d080:	b308      	cbz	r0, d0c6 <sdu_recv+0x196>
			BT_WARN("Unable to decrypt with AppKey 0x%03x",
    d082:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    d086:	f043 0302 	orr.w	r3, r3, #2
    d08a:	f363 0807 	bfi	r8, r3, #0, #8
    d08e:	9b07      	ldr	r3, [sp, #28]
    d090:	f8b5 1056 	ldrh.w	r1, [r5, #86]	; 0x56
    d094:	4816      	ldr	r0, [pc, #88]	; (d0f0 <sdu_recv+0x1c0>)
    d096:	f363 188f 	bfi	r8, r3, #6, #10
    d09a:	4642      	mov	r2, r8
    d09c:	f011 f9de 	bl	1e45c <log_1>
	for (i = 0U; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
    d0a0:	9b06      	ldr	r3, [sp, #24]
    d0a2:	3528      	adds	r5, #40	; 0x28
    d0a4:	b14b      	cbz	r3, d0ba <sdu_recv+0x18a>
	BT_WARN("No matching AppKey");
    d0a6:	2302      	movs	r3, #2
    d0a8:	f04f 0100 	mov.w	r1, #0
    d0ac:	f363 0107 	bfi	r1, r3, #0, #8
    d0b0:	9b07      	ldr	r3, [sp, #28]
    d0b2:	4810      	ldr	r0, [pc, #64]	; (d0f4 <sdu_recv+0x1c4>)
    d0b4:	f363 118f 	bfi	r1, r3, #6, #10
    d0b8:	e75b      	b.n	cf72 <sdu_recv+0x42>
    d0ba:	2301      	movs	r3, #1
    d0bc:	9306      	str	r3, [sp, #24]
    d0be:	e7b1      	b.n	d024 <sdu_recv+0xf4>
			keys = &key->keys[0];
    d0c0:	f105 0059 	add.w	r0, r5, #89	; 0x59
    d0c4:	e7bd      	b.n	d042 <sdu_recv+0x112>
		rx->ctx.app_idx = key->app_idx;
    d0c6:	9b06      	ldr	r3, [sp, #24]
    d0c8:	2228      	movs	r2, #40	; 0x28
    d0ca:	fb02 aa03 	mla	sl, r2, r3, sl
		bt_mesh_model_recv(rx, &sdu);
    d0ce:	a90a      	add	r1, sp, #40	; 0x28
		rx->ctx.app_idx = key->app_idx;
    d0d0:	f8ba 2056 	ldrh.w	r2, [sl, #86]	; 0x56
    d0d4:	80e2      	strh	r2, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    d0d6:	e791      	b.n	cffc <sdu_recv+0xcc>
    d0d8:	000233ec 	.word	0x000233ec
    d0dc:	000234d4 	.word	0x000234d4
    d0e0:	00026113 	.word	0x00026113
    d0e4:	20007968 	.word	0x20007968
    d0e8:	00026127 	.word	0x00026127
    d0ec:	20007924 	.word	0x20007924
    d0f0:	00026145 	.word	0x00026145
    d0f4:	0002616a 	.word	0x0002616a

0000d0f8 <send_unseg>:
{
    d0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d0fc:	4604      	mov	r4, r0
    d0fe:	460f      	mov	r7, r1
    d100:	4690      	mov	r8, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    d102:	7a81      	ldrb	r1, [r0, #10]
    d104:	2200      	movs	r2, #0
    d106:	2001      	movs	r0, #1
{
    d108:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    d10a:	f7fe faf9 	bl	b700 <bt_mesh_adv_create>
	if (!buf) {
    d10e:	4606      	mov	r6, r0
    d110:	b300      	cbz	r0, d154 <send_unseg+0x5c>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
    d112:	f100 0508 	add.w	r5, r0, #8
    d116:	2109      	movs	r1, #9
    d118:	4628      	mov	r0, r5
    d11a:	f015 f9d1 	bl	224c0 <net_buf_simple_reserve>
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d11e:	6863      	ldr	r3, [r4, #4]
    d120:	885a      	ldrh	r2, [r3, #2]
    d122:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    d126:	429a      	cmp	r2, r3
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    d128:	bf1b      	ittet	ne
    d12a:	7ae1      	ldrbne	r1, [r4, #11]
    d12c:	0889      	lsrne	r1, r1, #2
		net_buf_add_u8(buf, UNSEG_HDR(0, 0));
    d12e:	2100      	moveq	r1, #0
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    d130:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
    d134:	4628      	mov	r0, r5
    d136:	f015 fa37 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, sdu->data, sdu->len);
    d13a:	88ba      	ldrh	r2, [r7, #4]
    d13c:	6839      	ldr	r1, [r7, #0]
    d13e:	4628      	mov	r0, r5
    d140:	f015 fa29 	bl	22596 <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    d144:	464b      	mov	r3, r9
    d146:	4642      	mov	r2, r8
    d148:	4631      	mov	r1, r6
    d14a:	4620      	mov	r0, r4
}
    d14c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    d150:	f7ff baf2 	b.w	c738 <bt_mesh_net_send>
		BT_ERR("Out of network buffers");
    d154:	2301      	movs	r3, #1
    d156:	f04f 0100 	mov.w	r1, #0
    d15a:	4a07      	ldr	r2, [pc, #28]	; (d178 <send_unseg+0x80>)
    d15c:	4807      	ldr	r0, [pc, #28]	; (d17c <send_unseg+0x84>)
    d15e:	f363 0107 	bfi	r1, r3, #0, #8
    d162:	4b07      	ldr	r3, [pc, #28]	; (d180 <send_unseg+0x88>)
    d164:	1a9b      	subs	r3, r3, r2
    d166:	08db      	lsrs	r3, r3, #3
    d168:	f363 118f 	bfi	r1, r3, #6, #10
    d16c:	f011 f969 	bl	1e442 <log_0>
}
    d170:	f06f 0036 	mvn.w	r0, #54	; 0x36
    d174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d178:	000233ec 	.word	0x000233ec
    d17c:	0002627c 	.word	0x0002627c
    d180:	000234d4 	.word	0x000234d4

0000d184 <seg_tx_reset>:
{
    d184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d186:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
    d188:	3038      	adds	r0, #56	; 0x38
    d18a:	f015 ff06 	bl	22f9a <k_delayed_work_cancel>
	if (!tx->nack_count) {
    d18e:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
	tx->cb = NULL;
    d192:	2500      	movs	r5, #0
	tx->seq_auth = 0U;
    d194:	2000      	movs	r0, #0
    d196:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    d198:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
	tx->seq_auth = 0U;
    d19c:	e9c4 0108 	strd	r0, r1, [r4, #32]
	tx->sub = NULL;
    d1a0:	6025      	str	r5, [r4, #0]
	tx->dst = BT_MESH_ADDR_UNASSIGNED;
    d1a2:	8525      	strh	r5, [r4, #40]	; 0x28
	if (!tx->nack_count) {
    d1a4:	b362      	cbz	r2, d200 <seg_tx_reset+0x7c>
    d1a6:	1d26      	adds	r6, r4, #4
		tx->seg[i] = NULL;
    d1a8:	462f      	mov	r7, r5
		if (!tx->seg[i]) {
    d1aa:	f856 0b04 	ldr.w	r0, [r6], #4
    d1ae:	b118      	cbz	r0, d1b8 <seg_tx_reset+0x34>
		net_buf_unref(tx->seg[i]);
    d1b0:	f00d fd40 	bl	1ac34 <net_buf_unref>
		tx->seg[i] = NULL;
    d1b4:	f846 7c04 	str.w	r7, [r6, #-4]
	for (i = 0; i <= tx->seg_n; i++) {
    d1b8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    d1bc:	3501      	adds	r5, #1
    d1be:	f003 031f 	and.w	r3, r3, #31
    d1c2:	42ab      	cmp	r3, r5
    d1c4:	daf1      	bge.n	d1aa <seg_tx_reset+0x26>
	tx->nack_count = 0U;
    d1c6:	2500      	movs	r5, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d1c8:	4b0e      	ldr	r3, [pc, #56]	; (d204 <seg_tx_reset+0x80>)
    d1ca:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
    d1ce:	f3bf 8f5b 	dmb	ish
    d1d2:	e853 2f00 	ldrex	r2, [r3]
    d1d6:	f022 0120 	bic.w	r1, r2, #32
    d1da:	e843 1000 	strex	r0, r1, [r3]
    d1de:	2800      	cmp	r0, #0
    d1e0:	d1f7      	bne.n	d1d2 <seg_tx_reset+0x4e>
    d1e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    d1e6:	0692      	lsls	r2, r2, #26
    d1e8:	d50a      	bpl.n	d200 <seg_tx_reset+0x7c>
		if (bt_mesh_net_iv_update(bt_mesh.iv_index, false)) {
    d1ea:	4629      	mov	r1, r5
    d1ec:	f853 0c08 	ldr.w	r0, [r3, #-8]
    d1f0:	f7ff f850 	bl	c294 <bt_mesh_net_iv_update>
    d1f4:	b120      	cbz	r0, d200 <seg_tx_reset+0x7c>
			bt_mesh_net_sec_update(NULL);
    d1f6:	4628      	mov	r0, r5
}
    d1f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_mesh_net_sec_update(NULL);
    d1fc:	f013 baf5 	b.w	207ea <bt_mesh_net_sec_update>
}
    d200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d202:	bf00      	nop
    d204:	2000792c 	.word	0x2000792c

0000d208 <seg_tx_send_unacked>:
{
    d208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
    d20a:	4f25      	ldr	r7, [pc, #148]	; (d2a0 <seg_tx_send_unacked+0x98>)
{
    d20c:	4604      	mov	r4, r0
    d20e:	1d06      	adds	r6, r0, #4
	for (i = 0; i <= tx->seg_n; i++) {
    d210:	2500      	movs	r5, #0
		struct net_buf *seg = tx->seg[i];
    d212:	f856 1b04 	ldr.w	r1, [r6], #4
		if (!seg) {
    d216:	2900      	cmp	r1, #0
    d218:	d038      	beq.n	d28c <seg_tx_send_unacked+0x84>
		if (BT_MESH_ADV(seg)->busy) {
    d21a:	694b      	ldr	r3, [r1, #20]
    d21c:	7a1a      	ldrb	r2, [r3, #8]
    d21e:	0752      	lsls	r2, r2, #29
    d220:	d434      	bmi.n	d28c <seg_tx_send_unacked+0x84>
		if (!(BT_MESH_ADV(seg)->seg.attempts--)) {
    d222:	7a9a      	ldrb	r2, [r3, #10]
    d224:	1e50      	subs	r0, r2, #1
    d226:	7298      	strb	r0, [r3, #10]
    d228:	b9aa      	cbnz	r2, d256 <seg_tx_send_unacked+0x4e>
			BT_ERR("Ran out of retransmit attempts");
    d22a:	2301      	movs	r3, #1
    d22c:	f04f 0100 	mov.w	r1, #0
    d230:	f363 0107 	bfi	r1, r3, #0, #8
    d234:	4a1b      	ldr	r2, [pc, #108]	; (d2a4 <seg_tx_send_unacked+0x9c>)
    d236:	4b1c      	ldr	r3, [pc, #112]	; (d2a8 <seg_tx_send_unacked+0xa0>)
    d238:	481c      	ldr	r0, [pc, #112]	; (d2ac <seg_tx_send_unacked+0xa4>)
    d23a:	1a9b      	subs	r3, r3, r2
    d23c:	08db      	lsrs	r3, r3, #3
    d23e:	f363 118f 	bfi	r1, r3, #6, #10
    d242:	f011 f8fe 	bl	1e442 <log_0>
			seg_tx_complete(tx, -ETIMEDOUT);
    d246:	f06f 013b 	mvn.w	r1, #59	; 0x3b
			seg_tx_complete(tx, -EIO);
    d24a:	4620      	mov	r0, r4
}
    d24c:	b003      	add	sp, #12
    d24e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			seg_tx_complete(tx, -EIO);
    d252:	f013 baf9 	b.w	20848 <seg_tx_complete>
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
    d256:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
    d25a:	9400      	str	r4, [sp, #0]
    d25c:	463b      	mov	r3, r7
    d25e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    d262:	6820      	ldr	r0, [r4, #0]
    d264:	f7ff f92e 	bl	c4c4 <bt_mesh_net_resend>
		if (err) {
    d268:	b180      	cbz	r0, d28c <seg_tx_send_unacked+0x84>
			BT_ERR("Sending segment failed");
    d26a:	2301      	movs	r3, #1
    d26c:	f04f 0100 	mov.w	r1, #0
    d270:	f363 0107 	bfi	r1, r3, #0, #8
    d274:	4a0b      	ldr	r2, [pc, #44]	; (d2a4 <seg_tx_send_unacked+0x9c>)
    d276:	4b0c      	ldr	r3, [pc, #48]	; (d2a8 <seg_tx_send_unacked+0xa0>)
    d278:	480d      	ldr	r0, [pc, #52]	; (d2b0 <seg_tx_send_unacked+0xa8>)
    d27a:	1a9b      	subs	r3, r3, r2
    d27c:	08db      	lsrs	r3, r3, #3
    d27e:	f363 118f 	bfi	r1, r3, #6, #10
    d282:	f011 f8de 	bl	1e442 <log_0>
			seg_tx_complete(tx, -EIO);
    d286:	f06f 0104 	mvn.w	r1, #4
    d28a:	e7de      	b.n	d24a <seg_tx_send_unacked+0x42>
	for (i = 0; i <= tx->seg_n; i++) {
    d28c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    d290:	3501      	adds	r5, #1
    d292:	f003 031f 	and.w	r3, r3, #31
    d296:	42ab      	cmp	r3, r5
    d298:	dabb      	bge.n	d212 <seg_tx_send_unacked+0xa>
}
    d29a:	b003      	add	sp, #12
    d29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d29e:	bf00      	nop
    d2a0:	00023a88 	.word	0x00023a88
    d2a4:	000233ec 	.word	0x000233ec
    d2a8:	000234d4 	.word	0x000234d4
    d2ac:	00026196 	.word	0x00026196
    d2b0:	000261b5 	.word	0x000261b5

0000d2b4 <ctl_recv>:
	return 0;
}

static int ctl_recv(struct bt_mesh_net_rx *rx, u8_t hdr,
		    struct net_buf_simple *buf, u64_t *seq_auth)
{
    d2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t ctl_op = TRANS_CTL_OP(&hdr);

	BT_DBG("OpCode 0x%02x len %u", ctl_op, buf->len);

	switch (ctl_op) {
    d2b8:	f011 067f 	ands.w	r6, r1, #127	; 0x7f
{
    d2bc:	4605      	mov	r5, r0
    d2be:	4691      	mov	r9, r2
    d2c0:	461f      	mov	r7, r3
	switch (ctl_op) {
    d2c2:	d018      	beq.n	d2f6 <ctl_recv+0x42>
    d2c4:	2e0a      	cmp	r6, #10
    d2c6:	f000 80be 	beq.w	d446 <ctl_recv+0x192>
	case TRANS_CTL_OP_HEARTBEAT:
		return trans_heartbeat(rx, buf);
	}

	/* Only acks and heartbeats may need processing without local_match */
	if (!rx->local_match) {
    d2ca:	7d05      	ldrb	r5, [r0, #20]
    d2cc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    d2d0:	d024      	beq.n	d31c <ctl_recv+0x68>
			return bt_mesh_lpn_friend_sub_cfm(rx, buf);
		}
	}
#endif /* CONFIG_BT_MESH_LOW_POWER */

	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
    d2d2:	2302      	movs	r3, #2
    d2d4:	f04f 0200 	mov.w	r2, #0
    d2d8:	f363 0207 	bfi	r2, r3, #0, #8
    d2dc:	497d      	ldr	r1, [pc, #500]	; (d4d4 <ctl_recv+0x220>)
    d2de:	4b7e      	ldr	r3, [pc, #504]	; (d4d8 <ctl_recv+0x224>)
    d2e0:	487e      	ldr	r0, [pc, #504]	; (d4dc <ctl_recv+0x228>)
    d2e2:	1a5b      	subs	r3, r3, r1
    d2e4:	08db      	lsrs	r3, r3, #3
    d2e6:	f363 128f 	bfi	r2, r3, #6, #10
    d2ea:	4631      	mov	r1, r6
    d2ec:	f011 f8b6 	bl	1e45c <log_1>

	return -ENOENT;
    d2f0:	f06f 0501 	mvn.w	r5, #1
    d2f4:	e012      	b.n	d31c <ctl_recv+0x68>
	if (buf->len < 6) {
    d2f6:	8893      	ldrh	r3, [r2, #4]
    d2f8:	2b05      	cmp	r3, #5
    d2fa:	d813      	bhi.n	d324 <ctl_recv+0x70>
		BT_ERR("Too short ack message");
    d2fc:	2301      	movs	r3, #1
    d2fe:	f04f 0100 	mov.w	r1, #0
    d302:	f363 0107 	bfi	r1, r3, #0, #8
    d306:	4a73      	ldr	r2, [pc, #460]	; (d4d4 <ctl_recv+0x220>)
    d308:	4b73      	ldr	r3, [pc, #460]	; (d4d8 <ctl_recv+0x224>)
    d30a:	4875      	ldr	r0, [pc, #468]	; (d4e0 <ctl_recv+0x22c>)
    d30c:	1a9b      	subs	r3, r3, r2
    d30e:	08db      	lsrs	r3, r3, #3
    d310:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Too large segment number in ack");
    d314:	f011 f895 	bl	1e442 <log_0>
		return -EINVAL;
    d318:	f06f 0515 	mvn.w	r5, #21
}
    d31c:	4628      	mov	r0, r5
    d31e:	b003      	add	sp, #12
    d320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    d324:	4610      	mov	r0, r2
    d326:	f015 f9bd 	bl	226a4 <net_buf_simple_pull_be16>
	seq_zero = (seq_zero >> 2) & 0x1fff;
    d32a:	f3c0 088f 	ubfx	r8, r0, #2, #16
	obo = seq_zero >> 15;
    d32e:	f3c0 3acf 	ubfx	sl, r0, #15, #16
	ack = net_buf_simple_pull_be32(buf);
    d332:	4648      	mov	r0, r9
    d334:	f015 f9c1 	bl	226ba <net_buf_simple_pull_be32>
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d338:	4a6a      	ldr	r2, [pc, #424]	; (d4e4 <ctl_recv+0x230>)
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    d33a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
		if (obo && tx->nack_count == tx->seg_n + 1) {
    d33e:	f892 502a 	ldrb.w	r5, [r2, #42]	; 0x2a
		if (tx->dst == addr) {
    d342:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
		if (obo && tx->nack_count == tx->seg_n + 1) {
    d346:	f892 e02b 	ldrb.w	lr, [r2, #43]	; 0x2b
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d34a:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	ack = net_buf_simple_pull_be32(buf);
    d34e:	4604      	mov	r4, r0
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d350:	9101      	str	r1, [sp, #4]
	seq_zero = (seq_zero >> 2) & 0x1fff;
    d352:	f3c8 000c 	ubfx	r0, r8, #0, #13
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d356:	2100      	movs	r1, #0
    d358:	42b1      	cmp	r1, r6
    d35a:	b280      	uxth	r0, r0
    d35c:	f3c3 080c 	ubfx	r8, r3, #0, #13
		if (obo && tx->nack_count == tx->seg_n + 1) {
    d360:	f005 051f 	and.w	r5, r5, #31
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d364:	bf08      	it	eq
    d366:	4540      	cmpeq	r0, r8
		if (obo && tx->nack_count == tx->seg_n + 1) {
    d368:	f105 0501 	add.w	r5, r5, #1
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d36c:	4616      	mov	r6, r2
    d36e:	f040 80a3 	bne.w	d4b8 <ctl_recv+0x204>
		if (tx->dst == addr) {
    d372:	45dc      	cmp	ip, fp
    d374:	d008      	beq.n	d388 <ctl_recv+0xd4>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    d376:	f1ba 0f00 	cmp.w	sl, #0
    d37a:	f000 809d 	beq.w	d4b8 <ctl_recv+0x204>
    d37e:	45ae      	cmp	lr, r5
    d380:	f040 809a 	bne.w	d4b8 <ctl_recv+0x204>
			tx->dst = addr;
    d384:	f8a2 c028 	strh.w	ip, [r2, #40]	; 0x28
	*seq_auth = tx->seq_auth;
    d388:	603b      	str	r3, [r7, #0]
    d38a:	9b01      	ldr	r3, [sp, #4]
    d38c:	607b      	str	r3, [r7, #4]
	if (!ack) {
    d38e:	b9a4      	cbnz	r4, d3ba <ctl_recv+0x106>
		BT_WARN("SDU canceled");
    d390:	2302      	movs	r3, #2
    d392:	f04f 0100 	mov.w	r1, #0
    d396:	f363 0107 	bfi	r1, r3, #0, #8
    d39a:	4a4e      	ldr	r2, [pc, #312]	; (d4d4 <ctl_recv+0x220>)
    d39c:	4b4e      	ldr	r3, [pc, #312]	; (d4d8 <ctl_recv+0x224>)
    d39e:	4852      	ldr	r0, [pc, #328]	; (d4e8 <ctl_recv+0x234>)
    d3a0:	1a9b      	subs	r3, r3, r2
    d3a2:	08db      	lsrs	r3, r3, #3
    d3a4:	f363 118f 	bfi	r1, r3, #6, #10
    d3a8:	f011 f84b 	bl	1e442 <log_0>
		seg_tx_complete(tx, -ECANCELED);
    d3ac:	f06f 0147 	mvn.w	r1, #71	; 0x47
    d3b0:	484c      	ldr	r0, [pc, #304]	; (d4e4 <ctl_recv+0x230>)
    d3b2:	f013 fa49 	bl	20848 <seg_tx_complete>
	return 0;
    d3b6:	2500      	movs	r5, #0
    d3b8:	e7b0      	b.n	d31c <ctl_recv+0x68>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    d3ba:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
	return 32 - __builtin_clz(op);
    d3be:	fab4 f284 	clz	r2, r4
    d3c2:	f1c2 021f 	rsb	r2, r2, #31
    d3c6:	f003 031f 	and.w	r3, r3, #31
    d3ca:	429a      	cmp	r2, r3
    d3cc:	d90c      	bls.n	d3e8 <ctl_recv+0x134>
		BT_ERR("Too large segment number in ack");
    d3ce:	2301      	movs	r3, #1
    d3d0:	f04f 0100 	mov.w	r1, #0
    d3d4:	f363 0107 	bfi	r1, r3, #0, #8
    d3d8:	4a3e      	ldr	r2, [pc, #248]	; (d4d4 <ctl_recv+0x220>)
    d3da:	4b3f      	ldr	r3, [pc, #252]	; (d4d8 <ctl_recv+0x224>)
    d3dc:	4843      	ldr	r0, [pc, #268]	; (d4ec <ctl_recv+0x238>)
    d3de:	1a9b      	subs	r3, r3, r2
    d3e0:	08db      	lsrs	r3, r3, #3
    d3e2:	f363 118f 	bfi	r1, r3, #6, #10
    d3e6:	e795      	b.n	d314 <ctl_recv+0x60>
	k_delayed_work_cancel(&tx->retransmit);
    d3e8:	4841      	ldr	r0, [pc, #260]	; (d4f0 <ctl_recv+0x23c>)
    d3ea:	f015 fdd6 	bl	22f9a <k_delayed_work_cancel>
			tx->seg[bit - 1] = NULL;
    d3ee:	f04f 0800 	mov.w	r8, #0
		ack &= ~BIT(bit - 1);
    d3f2:	f04f 0901 	mov.w	r9, #1
	return __builtin_ffs(op);
    d3f6:	2c00      	cmp	r4, #0
    d3f8:	fa94 f7a4 	rbit	r7, r4
    d3fc:	fab7 f787 	clz	r7, r7
    d400:	bf08      	it	eq
    d402:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    d406:	1c7d      	adds	r5, r7, #1
    d408:	d106      	bne.n	d418 <ctl_recv+0x164>
	if (tx->nack_count) {
    d40a:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
    d40e:	b1ab      	cbz	r3, d43c <ctl_recv+0x188>
		seg_tx_send_unacked(tx);
    d410:	4834      	ldr	r0, [pc, #208]	; (d4e4 <ctl_recv+0x230>)
    d412:	f7ff fef9 	bl	d208 <seg_tx_send_unacked>
    d416:	e781      	b.n	d31c <ctl_recv+0x68>
		if (tx->seg[bit - 1]) {
    d418:	eb06 0587 	add.w	r5, r6, r7, lsl #2
    d41c:	6868      	ldr	r0, [r5, #4]
    d41e:	b140      	cbz	r0, d432 <ctl_recv+0x17e>
			net_buf_unref(tx->seg[bit - 1]);
    d420:	f00d fc08 	bl	1ac34 <net_buf_unref>
			tx->nack_count--;
    d424:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
			tx->seg[bit - 1] = NULL;
    d428:	f8c5 8004 	str.w	r8, [r5, #4]
			tx->nack_count--;
    d42c:	3b01      	subs	r3, #1
    d42e:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
		ack &= ~BIT(bit - 1);
    d432:	fa09 f707 	lsl.w	r7, r9, r7
    d436:	ea24 0407 	bic.w	r4, r4, r7
    d43a:	e7dc      	b.n	d3f6 <ctl_recv+0x142>
		seg_tx_complete(tx, 0);
    d43c:	4629      	mov	r1, r5
    d43e:	4829      	ldr	r0, [pc, #164]	; (d4e4 <ctl_recv+0x230>)
    d440:	f013 fa02 	bl	20848 <seg_tx_complete>
    d444:	e76a      	b.n	d31c <ctl_recv+0x68>
	if (buf->len < 3) {
    d446:	8893      	ldrh	r3, [r2, #4]
    d448:	2b02      	cmp	r3, #2
    d44a:	d80c      	bhi.n	d466 <ctl_recv+0x1b2>
		BT_ERR("Too short heartbeat message");
    d44c:	2301      	movs	r3, #1
    d44e:	f04f 0100 	mov.w	r1, #0
    d452:	f363 0107 	bfi	r1, r3, #0, #8
    d456:	4a1f      	ldr	r2, [pc, #124]	; (d4d4 <ctl_recv+0x220>)
    d458:	4b1f      	ldr	r3, [pc, #124]	; (d4d8 <ctl_recv+0x224>)
    d45a:	4826      	ldr	r0, [pc, #152]	; (d4f4 <ctl_recv+0x240>)
    d45c:	1a9b      	subs	r3, r3, r2
    d45e:	08db      	lsrs	r3, r3, #3
    d460:	f363 118f 	bfi	r1, r3, #6, #10
    d464:	e756      	b.n	d314 <ctl_recv+0x60>
	if (rx->ctx.recv_dst != hb_sub_dst) {
    d466:	4b24      	ldr	r3, [pc, #144]	; (d4f8 <ctl_recv+0x244>)
    d468:	8942      	ldrh	r2, [r0, #10]
    d46a:	881b      	ldrh	r3, [r3, #0]
    d46c:	429a      	cmp	r2, r3
    d46e:	d00e      	beq.n	d48e <ctl_recv+0x1da>
		BT_WARN("Ignoring heartbeat to non-subscribed destination");
    d470:	2302      	movs	r3, #2
    d472:	f04f 0100 	mov.w	r1, #0
    d476:	f363 0107 	bfi	r1, r3, #0, #8
    d47a:	4a16      	ldr	r2, [pc, #88]	; (d4d4 <ctl_recv+0x220>)
    d47c:	4b16      	ldr	r3, [pc, #88]	; (d4d8 <ctl_recv+0x224>)
    d47e:	481f      	ldr	r0, [pc, #124]	; (d4fc <ctl_recv+0x248>)
    d480:	1a9b      	subs	r3, r3, r2
    d482:	08db      	lsrs	r3, r3, #3
    d484:	f363 118f 	bfi	r1, r3, #6, #10
    d488:	f010 ffdb 	bl	1e442 <log_0>
		return 0;
    d48c:	e793      	b.n	d3b6 <ctl_recv+0x102>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    d48e:	4648      	mov	r0, r9
    d490:	f015 f8f8 	bl	22684 <net_buf_simple_pull_u8>
    d494:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    d496:	4648      	mov	r0, r9
    d498:	f015 f904 	bl	226a4 <net_buf_simple_pull_be16>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    d49c:	f004 027f 	and.w	r2, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    d4a0:	7b2c      	ldrb	r4, [r5, #12]
	bt_mesh_heartbeat(rx->ctx.addr, rx->ctx.recv_dst, hops, feat);
    d4a2:	8969      	ldrh	r1, [r5, #10]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    d4a4:	f3c4 0406 	ubfx	r4, r4, #0, #7
    d4a8:	1b12      	subs	r2, r2, r4
    d4aa:	3201      	adds	r2, #1
	bt_mesh_heartbeat(rx->ctx.addr, rx->ctx.recv_dst, hops, feat);
    d4ac:	4603      	mov	r3, r0
    d4ae:	b2d2      	uxtb	r2, r2
    d4b0:	8928      	ldrh	r0, [r5, #8]
    d4b2:	f003 fb0f 	bl	10ad4 <bt_mesh_heartbeat>
    d4b6:	e77e      	b.n	d3b6 <ctl_recv+0x102>
		BT_WARN("No matching TX context for ack");
    d4b8:	2302      	movs	r3, #2
    d4ba:	f04f 0100 	mov.w	r1, #0
    d4be:	f363 0107 	bfi	r1, r3, #0, #8
    d4c2:	4a04      	ldr	r2, [pc, #16]	; (d4d4 <ctl_recv+0x220>)
    d4c4:	4b04      	ldr	r3, [pc, #16]	; (d4d8 <ctl_recv+0x224>)
    d4c6:	480e      	ldr	r0, [pc, #56]	; (d500 <ctl_recv+0x24c>)
    d4c8:	1a9b      	subs	r3, r3, r2
    d4ca:	08db      	lsrs	r3, r3, #3
    d4cc:	f363 118f 	bfi	r1, r3, #6, #10
    d4d0:	e720      	b.n	d314 <ctl_recv+0x60>
    d4d2:	bf00      	nop
    d4d4:	000233ec 	.word	0x000233ec
    d4d8:	000234d4 	.word	0x000234d4
    d4dc:	000260ca 	.word	0x000260ca
    d4e0:	0002603a 	.word	0x0002603a
    d4e4:	20000050 	.word	0x20000050
    d4e8:	00026050 	.word	0x00026050
    d4ec:	0002605d 	.word	0x0002605d
    d4f0:	20000088 	.word	0x20000088
    d4f4:	0002607d 	.word	0x0002607d
    d4f8:	20001cf8 	.word	0x20001cf8
    d4fc:	00026099 	.word	0x00026099
    d500:	000260e7 	.word	0x000260e7

0000d504 <send_seg>:
{
    d504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d508:	4688      	mov	r8, r1
	if (sdu->len < 1) {
    d50a:	8889      	ldrh	r1, [r1, #4]
{
    d50c:	b085      	sub	sp, #20
    d50e:	4605      	mov	r5, r0
	if (sdu->len < 1) {
    d510:	b989      	cbnz	r1, d536 <send_seg+0x32>
		BT_ERR("Zero-length SDU not allowed");
    d512:	2301      	movs	r3, #1
    d514:	f363 0107 	bfi	r1, r3, #0, #8
    d518:	4a85      	ldr	r2, [pc, #532]	; (d730 <send_seg+0x22c>)
    d51a:	4b86      	ldr	r3, [pc, #536]	; (d734 <send_seg+0x230>)
    d51c:	4886      	ldr	r0, [pc, #536]	; (d738 <send_seg+0x234>)
    d51e:	1a9b      	subs	r3, r3, r2
    d520:	08db      	lsrs	r3, r3, #3
    d522:	f363 118f 	bfi	r1, r3, #6, #10
    d526:	f010 ff8c 	bl	1e442 <log_0>
		return -EINVAL;
    d52a:	f06f 0715 	mvn.w	r7, #21
}
    d52e:	4638      	mov	r0, r7
    d530:	b005      	add	sp, #20
    d532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (sdu->len > BT_MESH_TX_SDU_MAX) {
    d536:	2948      	cmp	r1, #72	; 0x48
    d538:	d873      	bhi.n	d622 <send_seg+0x11e>
		if (!seg_tx[i].nack_count) {
    d53a:	4c80      	ldr	r4, [pc, #512]	; (d73c <send_seg+0x238>)
    d53c:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    d540:	2800      	cmp	r0, #0
    d542:	d17f      	bne.n	d644 <send_seg+0x140>
	if (net_tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d544:	6868      	ldr	r0, [r5, #4]
    d546:	8847      	ldrh	r7, [r0, #2]
	tx->dst = net_tx->ctx->addr;
    d548:	8880      	ldrh	r0, [r0, #4]
	if (net_tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d54a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
    d54e:	42b7      	cmp	r7, r6
		seg_hdr = SEG_HDR(1, net_tx->aid);
    d550:	bf18      	it	ne
    d552:	7aee      	ldrbne	r6, [r5, #11]
	tx->dst = net_tx->ctx->addr;
    d554:	8520      	strh	r0, [r4, #40]	; 0x28
	tx->seg_n = (sdu->len - 1) / 12;
    d556:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    d55a:	f04f 000c 	mov.w	r0, #12
    d55e:	fbb1 f1f0 	udiv	r1, r1, r0
    d562:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    d566:	f361 0004 	bfi	r0, r1, #0, #5
    d56a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
	tx->nack_count = tx->seg_n + 1;
    d56e:	f101 0101 	add.w	r1, r1, #1
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    d572:	4873      	ldr	r0, [pc, #460]	; (d740 <send_seg+0x23c>)
	tx->nack_count = tx->seg_n + 1;
    d574:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    d578:	6801      	ldr	r1, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d57a:	f3bf 8f5b 	dmb	ish
    d57e:	6887      	ldr	r7, [r0, #8]
    d580:	f3bf 8f5b 	dmb	ish
    d584:	f3c7 0780 	ubfx	r7, r7, #2, #1
    d588:	6840      	ldr	r0, [r0, #4]
    d58a:	eba1 0107 	sub.w	r1, r1, r7
    d58e:	ea4f 2711 	mov.w	r7, r1, lsr #8
    d592:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
	tx->sub = net_tx->sub;
    d596:	6828      	ldr	r0, [r5, #0]
    d598:	6020      	str	r0, [r4, #0]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    d59a:	e9c4 1708 	strd	r1, r7, [r4, #32]
	tx->new_key = net_tx->sub->kr_flag;
    d59e:	7f80      	ldrb	r0, [r0, #30]
    d5a0:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    d5a4:	f360 1145 	bfi	r1, r0, #5, #1
    d5a8:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	tx->cb_data = cb_data;
    d5ac:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
	if (net_tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d5b0:	686b      	ldr	r3, [r5, #4]
    d5b2:	7a5b      	ldrb	r3, [r3, #9]
		seg_hdr = SEG_HDR(1, net_tx->aid);
    d5b4:	bf1a      	itte	ne
    d5b6:	08b6      	lsrne	r6, r6, #2
    d5b8:	f046 06c0 	orrne.w	r6, r6, #192	; 0xc0
		seg_hdr = SEG_HDR(0, 0);
    d5bc:	2680      	moveq	r6, #128	; 0x80
	if (net_tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d5be:	2bff      	cmp	r3, #255	; 0xff
    d5c0:	d151      	bne.n	d666 <send_seg+0x162>
		tx->ttl = bt_mesh_default_ttl_get();
    d5c2:	f003 fea9 	bl	11318 <bt_mesh_default_ttl_get>
    d5c6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	seq_zero = tx->seq_auth & 0x1fff;
    d5ca:	8c23      	ldrh	r3, [r4, #32]
    d5cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    d5d0:	099a      	lsrs	r2, r3, #6
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    d5d2:	009b      	lsls	r3, r3, #2
    d5d4:	b25b      	sxtb	r3, r3
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    d5d6:	9201      	str	r2, [sp, #4]
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    d5d8:	9302      	str	r3, [sp, #8]
	for (seg_o = 0U; sdu->len; seg_o++) {
    d5da:	f04f 0b00 	mov.w	fp, #0
    d5de:	f8b8 7004 	ldrh.w	r7, [r8, #4]
    d5e2:	fa5f fa8b 	uxtb.w	sl, fp
    d5e6:	2f00      	cmp	r7, #0
    d5e8:	d0a1      	beq.n	d52e <send_seg+0x2a>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, net_tx->xmit,
    d5ea:	2200      	movs	r2, #0
    d5ec:	7aa9      	ldrb	r1, [r5, #10]
    d5ee:	2001      	movs	r0, #1
    d5f0:	f7fe f886 	bl	b700 <bt_mesh_adv_create>
		if (!seg) {
    d5f4:	4681      	mov	r9, r0
    d5f6:	2800      	cmp	r0, #0
    d5f8:	d138      	bne.n	d66c <send_seg+0x168>
			BT_ERR("Out of segment buffers");
    d5fa:	2301      	movs	r3, #1
    d5fc:	f04f 0100 	mov.w	r1, #0
    d600:	4a4b      	ldr	r2, [pc, #300]	; (d730 <send_seg+0x22c>)
    d602:	4850      	ldr	r0, [pc, #320]	; (d744 <send_seg+0x240>)
    d604:	f363 0107 	bfi	r1, r3, #0, #8
    d608:	4b4a      	ldr	r3, [pc, #296]	; (d734 <send_seg+0x230>)
    d60a:	1a9b      	subs	r3, r3, r2
    d60c:	08db      	lsrs	r3, r3, #3
    d60e:	f363 118f 	bfi	r1, r3, #6, #10
    d612:	f010 ff16 	bl	1e442 <log_0>
			seg_tx_reset(tx);
    d616:	4849      	ldr	r0, [pc, #292]	; (d73c <send_seg+0x238>)
    d618:	f7ff fdb4 	bl	d184 <seg_tx_reset>
			return -ENOBUFS;
    d61c:	f06f 0736 	mvn.w	r7, #54	; 0x36
    d620:	e785      	b.n	d52e <send_seg+0x2a>
		BT_ERR("Not enough segment buffers for length %u", sdu->len);
    d622:	2301      	movs	r3, #1
    d624:	f04f 0200 	mov.w	r2, #0
    d628:	f363 0207 	bfi	r2, r3, #0, #8
    d62c:	4840      	ldr	r0, [pc, #256]	; (d730 <send_seg+0x22c>)
    d62e:	4b41      	ldr	r3, [pc, #260]	; (d734 <send_seg+0x230>)
    d630:	1a1b      	subs	r3, r3, r0
    d632:	08db      	lsrs	r3, r3, #3
    d634:	f363 128f 	bfi	r2, r3, #6, #10
    d638:	4843      	ldr	r0, [pc, #268]	; (d748 <send_seg+0x244>)
    d63a:	f010 ff0f 	bl	1e45c <log_1>
		return -EMSGSIZE;
    d63e:	f06f 0723 	mvn.w	r7, #35	; 0x23
    d642:	e774      	b.n	d52e <send_seg+0x2a>
		BT_ERR("No multi-segment message contexts available");
    d644:	2301      	movs	r3, #1
    d646:	f04f 0100 	mov.w	r1, #0
    d64a:	f363 0107 	bfi	r1, r3, #0, #8
    d64e:	4a38      	ldr	r2, [pc, #224]	; (d730 <send_seg+0x22c>)
    d650:	4b38      	ldr	r3, [pc, #224]	; (d734 <send_seg+0x230>)
    d652:	483e      	ldr	r0, [pc, #248]	; (d74c <send_seg+0x248>)
    d654:	1a9b      	subs	r3, r3, r2
    d656:	08db      	lsrs	r3, r3, #3
    d658:	f363 118f 	bfi	r1, r3, #6, #10
    d65c:	f010 fef1 	bl	1e442 <log_0>
		return -EBUSY;
    d660:	f06f 070f 	mvn.w	r7, #15
    d664:	e763      	b.n	d52e <send_seg+0x2a>
		tx->ttl = net_tx->ctx->send_ttl;
    d666:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    d66a:	e7ae      	b.n	d5ca <send_seg+0xc6>
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
    d66c:	6943      	ldr	r3, [r0, #20]
    d66e:	2204      	movs	r2, #4
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
    d670:	f100 0708 	add.w	r7, r0, #8
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
    d674:	729a      	strb	r2, [r3, #10]
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
    d676:	4638      	mov	r0, r7
    d678:	2109      	movs	r1, #9
    d67a:	f014 ff21 	bl	224c0 <net_buf_simple_reserve>
		net_buf_add_u8(seg, seg_hdr);
    d67e:	4631      	mov	r1, r6
    d680:	4638      	mov	r0, r7
    d682:	f014 ff91 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    d686:	7ae9      	ldrb	r1, [r5, #11]
    d688:	9b01      	ldr	r3, [sp, #4]
    d68a:	f3c1 0140 	ubfx	r1, r1, #1, #1
    d68e:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
    d692:	4638      	mov	r0, r7
    d694:	f014 ff88 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    d698:	9b02      	ldr	r3, [sp, #8]
    d69a:	ea43 01da 	orr.w	r1, r3, sl, lsr #3
    d69e:	b2c9      	uxtb	r1, r1
    d6a0:	4638      	mov	r0, r7
    d6a2:	f014 ff81 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
    d6a6:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    d6aa:	f3c1 0104 	ubfx	r1, r1, #0, #5
    d6ae:	ea41 114a 	orr.w	r1, r1, sl, lsl #5
    d6b2:	b2c9      	uxtb	r1, r1
    d6b4:	4638      	mov	r0, r7
    d6b6:	f014 ff77 	bl	225a8 <net_buf_simple_add_u8>
		len = MIN(sdu->len, 12);
    d6ba:	f8b8 3004 	ldrh.w	r3, [r8, #4]
		net_buf_add_mem(seg, sdu->data, len);
    d6be:	f8d8 1000 	ldr.w	r1, [r8]
    d6c2:	2b0c      	cmp	r3, #12
    d6c4:	bf28      	it	cs
    d6c6:	230c      	movcs	r3, #12
    d6c8:	461a      	mov	r2, r3
    d6ca:	4638      	mov	r0, r7
    d6cc:	9303      	str	r3, [sp, #12]
    d6ce:	f014 ff62 	bl	22596 <net_buf_simple_add_mem>
		net_buf_simple_pull(sdu, len);
    d6d2:	9b03      	ldr	r3, [sp, #12]
    d6d4:	4640      	mov	r0, r8
    d6d6:	4619      	mov	r1, r3
    d6d8:	f014 ffc4 	bl	22664 <net_buf_simple_pull>
		tx->seg[seg_o] = net_buf_ref(seg);
    d6dc:	4648      	mov	r0, r9
    d6de:	f014 ff50 	bl	22582 <net_buf_ref>
    d6e2:	eb04 038a 	add.w	r3, r4, sl, lsl #2
		err = bt_mesh_net_send(net_tx, seg,
    d6e6:	491a      	ldr	r1, [pc, #104]	; (d750 <send_seg+0x24c>)
    d6e8:	4a1a      	ldr	r2, [pc, #104]	; (d754 <send_seg+0x250>)
		tx->seg[seg_o] = net_buf_ref(seg);
    d6ea:	6058      	str	r0, [r3, #4]
		err = bt_mesh_net_send(net_tx, seg,
    d6ec:	f1ba 0f00 	cmp.w	sl, #0
    d6f0:	bf08      	it	eq
    d6f2:	460a      	moveq	r2, r1
    d6f4:	4b11      	ldr	r3, [pc, #68]	; (d73c <send_seg+0x238>)
    d6f6:	4649      	mov	r1, r9
    d6f8:	4628      	mov	r0, r5
    d6fa:	f7ff f81d 	bl	c738 <bt_mesh_net_send>
		if (err) {
    d6fe:	f10b 0b01 	add.w	fp, fp, #1
    d702:	4607      	mov	r7, r0
    d704:	2800      	cmp	r0, #0
    d706:	f43f af6a 	beq.w	d5de <send_seg+0xda>
			BT_ERR("Sending segment failed");
    d70a:	2301      	movs	r3, #1
    d70c:	f04f 0100 	mov.w	r1, #0
    d710:	4a07      	ldr	r2, [pc, #28]	; (d730 <send_seg+0x22c>)
    d712:	4811      	ldr	r0, [pc, #68]	; (d758 <send_seg+0x254>)
    d714:	f363 0107 	bfi	r1, r3, #0, #8
    d718:	4b06      	ldr	r3, [pc, #24]	; (d734 <send_seg+0x230>)
    d71a:	1a9b      	subs	r3, r3, r2
    d71c:	08db      	lsrs	r3, r3, #3
    d71e:	f363 118f 	bfi	r1, r3, #6, #10
    d722:	f010 fe8e 	bl	1e442 <log_0>
			seg_tx_reset(tx);
    d726:	4805      	ldr	r0, [pc, #20]	; (d73c <send_seg+0x238>)
    d728:	f7ff fd2c 	bl	d184 <seg_tx_reset>
			return err;
    d72c:	e6ff      	b.n	d52e <send_seg+0x2a>
    d72e:	bf00      	nop
    d730:	000233ec 	.word	0x000233ec
    d734:	000234d4 	.word	0x000234d4
    d738:	000261f4 	.word	0x000261f4
    d73c:	20000050 	.word	0x20000050
    d740:	20007924 	.word	0x20007924
    d744:	00026265 	.word	0x00026265
    d748:	00026210 	.word	0x00026210
    d74c:	00026239 	.word	0x00026239
    d750:	00023a80 	.word	0x00023a80
    d754:	00023a88 	.word	0x00023a88
    d758:	000261b5 	.word	0x000261b5

0000d75c <seg_send_start>:
{
    d75c:	4613      	mov	r3, r2
	if (err) {
    d75e:	b159      	cbz	r1, d778 <seg_send_start+0x1c>
		k_delayed_work_submit(&tx->retransmit,
    d760:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d764:	2032      	movs	r0, #50	; 0x32
    d766:	f44f 71c8 	mov.w	r1, #400	; 0x190
    d76a:	fb00 1202 	mla	r2, r0, r2, r1
    d76e:	f103 0138 	add.w	r1, r3, #56	; 0x38
    d772:	4802      	ldr	r0, [pc, #8]	; (d77c <seg_send_start+0x20>)
    d774:	f00e bee0 	b.w	1c538 <k_delayed_work_submit_to_queue>
}
    d778:	4770      	bx	lr
    d77a:	bf00      	nop
    d77c:	20001c74 	.word	0x20001c74

0000d780 <seg_sent>:
	k_delayed_work_submit(&tx->retransmit,
    d780:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    d784:	2032      	movs	r0, #50	; 0x32
    d786:	f44f 73c8 	mov.w	r3, #400	; 0x190
    d78a:	fb00 3202 	mla	r2, r0, r2, r3
    d78e:	3138      	adds	r1, #56	; 0x38
    d790:	4801      	ldr	r0, [pc, #4]	; (d798 <seg_sent+0x18>)
    d792:	f00e bed1 	b.w	1c538 <k_delayed_work_submit_to_queue>
    d796:	bf00      	nop
    d798:	20001c74 	.word	0x20001c74

0000d79c <bt_mesh_set_hb_sub_dst>:
	hb_sub_dst = addr;
    d79c:	4b01      	ldr	r3, [pc, #4]	; (d7a4 <bt_mesh_set_hb_sub_dst+0x8>)
    d79e:	8018      	strh	r0, [r3, #0]
}
    d7a0:	4770      	bx	lr
    d7a2:	bf00      	nop
    d7a4:	20001cf8 	.word	0x20001cf8

0000d7a8 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    d7a8:	4b03      	ldr	r3, [pc, #12]	; (d7b8 <bt_mesh_tx_in_progress+0x10>)
    d7aa:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
}
    d7ae:	3000      	adds	r0, #0
    d7b0:	bf18      	it	ne
    d7b2:	2001      	movne	r0, #1
    d7b4:	4770      	bx	lr
    d7b6:	bf00      	nop
    d7b8:	20000050 	.word	0x20000050

0000d7bc <bt_mesh_app_key_find>:
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    d7bc:	4b0f      	ldr	r3, [pc, #60]	; (d7fc <bt_mesh_app_key_find+0x40>)
    d7be:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
    d7c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d7c6:	4291      	cmp	r1, r2
    d7c8:	461a      	mov	r2, r3
    d7ca:	d003      	beq.n	d7d4 <bt_mesh_app_key_find+0x18>
    d7cc:	f8b3 1056 	ldrh.w	r1, [r3, #86]	; 0x56
    d7d0:	4281      	cmp	r1, r0
    d7d2:	d00d      	beq.n	d7f0 <bt_mesh_app_key_find+0x34>
    d7d4:	f8b2 107c 	ldrh.w	r1, [r2, #124]	; 0x7c
    d7d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d7dc:	4299      	cmp	r1, r3
    d7de:	d00a      	beq.n	d7f6 <bt_mesh_app_key_find+0x3a>
    d7e0:	f8b2 207e 	ldrh.w	r2, [r2, #126]	; 0x7e
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    d7e4:	4b06      	ldr	r3, [pc, #24]	; (d800 <bt_mesh_app_key_find+0x44>)
    d7e6:	4282      	cmp	r2, r0
    d7e8:	bf0c      	ite	eq
    d7ea:	4618      	moveq	r0, r3
    d7ec:	2000      	movne	r0, #0
    d7ee:	4770      	bx	lr
    d7f0:	f103 0054 	add.w	r0, r3, #84	; 0x54
    d7f4:	4770      	bx	lr
	return NULL;
    d7f6:	2000      	movs	r0, #0
}
    d7f8:	4770      	bx	lr
    d7fa:	bf00      	nop
    d7fc:	20007924 	.word	0x20007924
    d800:	200079a0 	.word	0x200079a0

0000d804 <bt_mesh_trans_send>:
{
    d804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d808:	4604      	mov	r4, r0
    d80a:	b086      	sub	sp, #24
	if (net_buf_simple_tailroom(msg) < 4) {
    d80c:	4608      	mov	r0, r1
{
    d80e:	460d      	mov	r5, r1
    d810:	4617      	mov	r7, r2
    d812:	4698      	mov	r8, r3
	if (net_buf_simple_tailroom(msg) < 4) {
    d814:	f014 ff5e 	bl	226d4 <net_buf_simple_tailroom>
    d818:	2803      	cmp	r0, #3
    d81a:	d812      	bhi.n	d842 <bt_mesh_trans_send+0x3e>
		BT_ERR("Insufficient tailroom for Transport MIC");
    d81c:	2301      	movs	r3, #1
    d81e:	f04f 0100 	mov.w	r1, #0
    d822:	f363 0107 	bfi	r1, r3, #0, #8
    d826:	4a48      	ldr	r2, [pc, #288]	; (d948 <bt_mesh_trans_send+0x144>)
    d828:	4b48      	ldr	r3, [pc, #288]	; (d94c <bt_mesh_trans_send+0x148>)
    d82a:	4849      	ldr	r0, [pc, #292]	; (d950 <bt_mesh_trans_send+0x14c>)
    d82c:	1a9b      	subs	r3, r3, r2
    d82e:	08db      	lsrs	r3, r3, #3
    d830:	f363 118f 	bfi	r1, r3, #6, #10
    d834:	f010 fe05 	bl	1e442 <log_0>
			return -EINVAL;
    d838:	f06f 0015 	mvn.w	r0, #21
}
    d83c:	b006      	add	sp, #24
    d83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (msg->len > 11) {
    d842:	88ab      	ldrh	r3, [r5, #4]
    d844:	f8d4 9004 	ldr.w	r9, [r4, #4]
    d848:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = 1;
    d84a:	bf88      	it	hi
    d84c:	f899 3008 	ldrbhi.w	r3, [r9, #8]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d850:	f8b9 0002 	ldrh.w	r0, [r9, #2]
		tx->ctx->send_rel = 1;
    d854:	bf84      	itt	hi
    d856:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
    d85a:	f889 3008 	strbhi.w	r3, [r9, #8]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d85e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    d862:	4298      	cmp	r0, r3
    d864:	d151      	bne.n	d90a <bt_mesh_trans_send+0x106>
		tx->aid = 0U;
    d866:	7ae3      	ldrb	r3, [r4, #11]
		key = bt_mesh.dev_key;
    d868:	4e3a      	ldr	r6, [pc, #232]	; (d954 <bt_mesh_trans_send+0x150>)
		tx->aid = 0U;
    d86a:	f36f 0387 	bfc	r3, #2, #6
    d86e:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    d870:	f999 3008 	ldrsb.w	r3, [r9, #8]
    d874:	2b00      	cmp	r3, #0
    d876:	da5d      	bge.n	d934 <bt_mesh_trans_send+0x130>
    d878:	4628      	mov	r0, r5
    d87a:	f014 ff2b 	bl	226d4 <net_buf_simple_tailroom>
    d87e:	2807      	cmp	r0, #7
    d880:	bf94      	ite	ls
    d882:	2000      	movls	r0, #0
    d884:	2001      	movhi	r0, #1
    d886:	7ae3      	ldrb	r3, [r4, #11]
    d888:	f360 0341 	bfi	r3, r0, #1, #1
    d88c:	72e3      	strb	r3, [r4, #11]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    d88e:	6863      	ldr	r3, [r4, #4]
    d890:	8898      	ldrh	r0, [r3, #4]
    d892:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    d896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    d89a:	d24d      	bcs.n	d938 <bt_mesh_trans_send+0x134>
		ad = bt_mesh_label_uuid_get(tx->ctx->addr);
    d89c:	f003 fdde 	bl	1145c <bt_mesh_label_uuid_get>
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    d8a0:	6863      	ldr	r3, [r4, #4]
    d8a2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; d958 <bt_mesh_trans_send+0x154>
    d8a6:	8859      	ldrh	r1, [r3, #2]
    d8a8:	f8b3 9004 	ldrh.w	r9, [r3, #4]
				  tx->aszmic, msg, ad, tx->src,
    d8ac:	7ae2      	ldrb	r2, [r4, #11]
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    d8ae:	f8b4 e008 	ldrh.w	lr, [r4, #8]
				  BT_MESH_NET_IVI_TX);
    d8b2:	e9dc 3a00 	ldrd	r3, sl, [ip]
    d8b6:	f3bf 8f5b 	dmb	ish
    d8ba:	f8dc c008 	ldr.w	ip, [ip, #8]
    d8be:	f3bf 8f5b 	dmb	ish
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    d8c2:	9000      	str	r0, [sp, #0]
    d8c4:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    d8c8:	1a08      	subs	r0, r1, r0
				  BT_MESH_NET_IVI_TX);
    d8ca:	f3cc 0c80 	ubfx	ip, ip, #2, #1
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    d8ce:	4241      	negs	r1, r0
    d8d0:	eba3 030c 	sub.w	r3, r3, ip
    d8d4:	4141      	adcs	r1, r0
    d8d6:	e9cd a303 	strd	sl, r3, [sp, #12]
    d8da:	e9cd e901 	strd	lr, r9, [sp, #4]
    d8de:	462b      	mov	r3, r5
    d8e0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d8e4:	4630      	mov	r0, r6
    d8e6:	f013 fb7b 	bl	20fe0 <bt_mesh_app_encrypt>
	if (err) {
    d8ea:	2800      	cmp	r0, #0
    d8ec:	d1a6      	bne.n	d83c <bt_mesh_trans_send+0x38>
	if (tx->ctx->send_rel) {
    d8ee:	6863      	ldr	r3, [r4, #4]
    d8f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
    d8f4:	2b00      	cmp	r3, #0
		err = send_seg(tx, msg, cb, cb_data);
    d8f6:	463a      	mov	r2, r7
    d8f8:	4643      	mov	r3, r8
    d8fa:	4629      	mov	r1, r5
    d8fc:	4620      	mov	r0, r4
	if (tx->ctx->send_rel) {
    d8fe:	da1d      	bge.n	d93c <bt_mesh_trans_send+0x138>
}
    d900:	b006      	add	sp, #24
    d902:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = send_seg(tx, msg, cb, cb_data);
    d906:	f7ff bdfd 	b.w	d504 <send_seg>
		app_key = bt_mesh_app_key_find(tx->ctx->app_idx);
    d90a:	f7ff ff57 	bl	d7bc <bt_mesh_app_key_find>
		if (!app_key) {
    d90e:	2800      	cmp	r0, #0
    d910:	d092      	beq.n	d838 <bt_mesh_trans_send+0x34>
		if (tx->sub->kr_phase == BT_MESH_KR_PHASE_2 &&
    d912:	6823      	ldr	r3, [r4, #0]
    d914:	7fdb      	ldrb	r3, [r3, #31]
    d916:	2b02      	cmp	r3, #2
    d918:	7ae3      	ldrb	r3, [r4, #11]
    d91a:	d108      	bne.n	d92e <bt_mesh_trans_send+0x12a>
    d91c:	7902      	ldrb	r2, [r0, #4]
    d91e:	b132      	cbz	r2, d92e <bt_mesh_trans_send+0x12a>
			tx->aid = app_key->keys[1].id;
    d920:	7d82      	ldrb	r2, [r0, #22]
			key = app_key->keys[1].val;
    d922:	f100 0617 	add.w	r6, r0, #23
			tx->aid = app_key->keys[0].id;
    d926:	f362 0387 	bfi	r3, r2, #2, #6
    d92a:	72e3      	strb	r3, [r4, #11]
    d92c:	e7a0      	b.n	d870 <bt_mesh_trans_send+0x6c>
			key = app_key->keys[0].val;
    d92e:	1d86      	adds	r6, r0, #6
			tx->aid = app_key->keys[0].id;
    d930:	7942      	ldrb	r2, [r0, #5]
    d932:	e7f8      	b.n	d926 <bt_mesh_trans_send+0x122>
		tx->aszmic = 0U;
    d934:	2000      	movs	r0, #0
    d936:	e7a6      	b.n	d886 <bt_mesh_trans_send+0x82>
		ad = NULL;
    d938:	2000      	movs	r0, #0
    d93a:	e7b1      	b.n	d8a0 <bt_mesh_trans_send+0x9c>
}
    d93c:	b006      	add	sp, #24
    d93e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = send_unseg(tx, msg, cb, cb_data);
    d942:	f7ff bbd9 	b.w	d0f8 <send_unseg>
    d946:	bf00      	nop
    d948:	000233ec 	.word	0x000233ec
    d94c:	000234d4 	.word	0x000234d4
    d950:	00026012 	.word	0x00026012
    d954:	20007968 	.word	0x20007968
    d958:	20007924 	.word	0x20007924

0000d95c <bt_mesh_ctl_send>:
}

int bt_mesh_ctl_send(struct bt_mesh_net_tx *tx, u8_t ctl_op, void *data,
		     size_t data_len, u64_t *seq_auth,
		     const struct bt_mesh_send_cb *cb, void *cb_data)
{
    d95c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d960:	4606      	mov	r6, r0
    d962:	468b      	mov	fp, r1
    d964:	4691      	mov	r9, r2

	BT_DBG("src 0x%04x dst 0x%04x ttl 0x%02x ctl 0x%02x", tx->src,
	       tx->ctx->addr, tx->ctx->send_ttl, ctl_op);
	BT_DBG("len %zu: %s", data_len, bt_hex(data, data_len));

	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    d966:	7a81      	ldrb	r1, [r0, #10]
    d968:	2200      	movs	r2, #0
    d96a:	2001      	movs	r0, #1
{
    d96c:	469a      	mov	sl, r3
    d96e:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    d972:	f7fd fec5 	bl	b700 <bt_mesh_adv_create>
	if (!buf) {
    d976:	4604      	mov	r4, r0
    d978:	b1c0      	cbz	r0, d9ac <bt_mesh_ctl_send+0x50>
		BT_ERR("Out of transport buffers");
		return -ENOBUFS;
	}

	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
    d97a:	f100 0508 	add.w	r5, r0, #8
    d97e:	4628      	mov	r0, r5
    d980:	2109      	movs	r1, #9
    d982:	f014 fd9d 	bl	224c0 <net_buf_simple_reserve>

	net_buf_add_u8(buf, TRANS_CTL_HDR(ctl_op, 0));
    d986:	f00b 017f 	and.w	r1, fp, #127	; 0x7f
    d98a:	4628      	mov	r0, r5
    d98c:	f014 fe0c 	bl	225a8 <net_buf_simple_add_u8>

	net_buf_add_mem(buf, data, data_len);
    d990:	4652      	mov	r2, sl
    d992:	4649      	mov	r1, r9
    d994:	4628      	mov	r0, r5
    d996:	f014 fdfe 	bl	22596 <net_buf_simple_add_mem>
			net_buf_unref(buf);
			return 0;
		}
	}

	return bt_mesh_net_send(tx, buf, cb, cb_data);
    d99a:	4643      	mov	r3, r8
    d99c:	463a      	mov	r2, r7
    d99e:	4621      	mov	r1, r4
    d9a0:	4630      	mov	r0, r6
}
    d9a2:	b001      	add	sp, #4
    d9a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    d9a8:	f7fe bec6 	b.w	c738 <bt_mesh_net_send>
		BT_ERR("Out of transport buffers");
    d9ac:	2301      	movs	r3, #1
    d9ae:	f04f 0100 	mov.w	r1, #0
    d9b2:	4a08      	ldr	r2, [pc, #32]	; (d9d4 <bt_mesh_ctl_send+0x78>)
    d9b4:	4808      	ldr	r0, [pc, #32]	; (d9d8 <bt_mesh_ctl_send+0x7c>)
    d9b6:	f363 0107 	bfi	r1, r3, #0, #8
    d9ba:	4b08      	ldr	r3, [pc, #32]	; (d9dc <bt_mesh_ctl_send+0x80>)
    d9bc:	1a9b      	subs	r3, r3, r2
    d9be:	08db      	lsrs	r3, r3, #3
    d9c0:	f363 118f 	bfi	r1, r3, #6, #10
    d9c4:	f010 fd3d 	bl	1e442 <log_0>
}
    d9c8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    d9cc:	b001      	add	sp, #4
    d9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9d2:	bf00      	nop
    d9d4:	000233ec 	.word	0x000233ec
    d9d8:	00025e10 	.word	0x00025e10
    d9dc:	000234d4 	.word	0x000234d4

0000d9e0 <send_ack>:

static int send_ack(struct bt_mesh_subnet *sub, u16_t src, u16_t dst,
		    u8_t ttl, u64_t *seq_auth, u32_t block, u8_t obo)
{
    d9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9e2:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
    d9e4:	8b87      	ldrh	r7, [r0, #28]
{
    d9e6:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
	struct bt_mesh_msg_ctx ctx = {
    d9ea:	f8ad 7018 	strh.w	r7, [sp, #24]
{
    d9ee:	460e      	mov	r6, r1
	struct bt_mesh_msg_ctx ctx = {
    d9f0:	2100      	movs	r1, #0
    d9f2:	f8cd 101e 	str.w	r1, [sp, #30]
    d9f6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    d9fa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		.net_idx = sub->net_idx,
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = dst,
		.send_ttl = ttl,
	};
	struct bt_mesh_net_tx tx = {
    d9fe:	ab06      	add	r3, sp, #24
{
    da00:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	struct bt_mesh_msg_ctx ctx = {
    da02:	f8ad 701a 	strh.w	r7, [sp, #26]
    da06:	f8ad 201c 	strh.w	r2, [sp, #28]
	struct bt_mesh_net_tx tx = {
    da0a:	910b      	str	r1, [sp, #44]	; 0x2c
    da0c:	9009      	str	r0, [sp, #36]	; 0x24
    da0e:	930a      	str	r3, [sp, #40]	; 0x28
    da10:	b1dc      	cbz	r4, da4a <send_ack+0x6a>
		.sub = sub,
		.ctx = &ctx,
		.src = obo ? bt_mesh_primary_addr() : src,
    da12:	f000 fe8b 	bl	e72c <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    da16:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
    da1a:	f003 f8c5 	bl	10ba8 <bt_mesh_net_transmit_get>
	}

	/* This can happen if the segmented message was destined for a group
	 * or virtual address.
	 */
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
    da1e:	b236      	sxth	r6, r6
    da20:	2e00      	cmp	r6, #0
	struct bt_mesh_net_tx tx = {
    da22:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
    da26:	dc12      	bgt.n	da4e <send_ack+0x6e>
		BT_WARN("Not sending ack for non-unicast address");
    da28:	2302      	movs	r3, #2
    da2a:	f04f 0100 	mov.w	r1, #0
    da2e:	f363 0107 	bfi	r1, r3, #0, #8
    da32:	4a15      	ldr	r2, [pc, #84]	; (da88 <send_ack+0xa8>)
    da34:	4b15      	ldr	r3, [pc, #84]	; (da8c <send_ack+0xac>)
    da36:	4816      	ldr	r0, [pc, #88]	; (da90 <send_ack+0xb0>)
    da38:	1a9b      	subs	r3, r3, r2
    da3a:	08db      	lsrs	r3, r3, #3
    da3c:	f363 118f 	bfi	r1, r3, #6, #10
    da40:	f010 fcff 	bl	1e442 <log_0>
		return 0;
    da44:	2000      	movs	r0, #0
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
	sys_put_be32(block, &buf[2]);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL, NULL);
}
    da46:	b00d      	add	sp, #52	; 0x34
    da48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
    da4a:	4630      	mov	r0, r6
    da4c:	e7e3      	b.n	da16 <send_ack+0x36>
	u16_t seq_zero = *seq_auth & 0x1fff;
    da4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    da50:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
    da52:	03e4      	lsls	r4, r4, #15
    da54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    da58:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
    da5c:	0c2b      	lsrs	r3, r5, #16
	dst[0] = val >> 8;
    da5e:	0a1a      	lsrs	r2, r3, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
    da60:	2100      	movs	r1, #0
    da62:	ba64      	rev16	r4, r4
    da64:	f88d 2012 	strb.w	r2, [sp, #18]
	dst[1] = val;
    da68:	f88d 3013 	strb.w	r3, [sp, #19]
	dst[0] = val >> 8;
    da6c:	ba6d      	rev16	r5, r5
    da6e:	e9cd 1101 	strd	r1, r1, [sp, #4]
    da72:	9100      	str	r1, [sp, #0]
    da74:	2306      	movs	r3, #6
    da76:	aa04      	add	r2, sp, #16
    da78:	a809      	add	r0, sp, #36	; 0x24
    da7a:	f8ad 4010 	strh.w	r4, [sp, #16]
    da7e:	f8ad 5014 	strh.w	r5, [sp, #20]
    da82:	f7ff ff6b 	bl	d95c <bt_mesh_ctl_send>
    da86:	e7de      	b.n	da46 <send_ack+0x66>
    da88:	000233ec 	.word	0x000233ec
    da8c:	000234d4 	.word	0x000234d4
    da90:	000261cc 	.word	0x000261cc

0000da94 <seg_ack>:
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}

static void seg_ack(struct k_work *work)
{
    da94:	b530      	push	{r4, r5, lr}
    da96:	4604      	mov	r4, r0
    da98:	b085      	sub	sp, #20
    da9a:	f015 facf 	bl	2303c <z_impl_k_uptime_get_32>
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);

	BT_DBG("rx %p", rx);

	if (k_uptime_get_32() - rx->last > K_SECONDS(60)) {
    da9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    daa2:	1ac0      	subs	r0, r0, r3
    daa4:	f64e 2360 	movw	r3, #60000	; 0xea60
    daa8:	4298      	cmp	r0, r3
    daaa:	f1a4 0520 	sub.w	r5, r4, #32
    daae:	d918      	bls.n	dae2 <seg_ack+0x4e>
		BT_WARN("Incomplete timer expired");
    dab0:	2302      	movs	r3, #2
    dab2:	f04f 0100 	mov.w	r1, #0
    dab6:	4a1a      	ldr	r2, [pc, #104]	; (db20 <seg_ack+0x8c>)
    dab8:	481a      	ldr	r0, [pc, #104]	; (db24 <seg_ack+0x90>)
    daba:	f363 0107 	bfi	r1, r3, #0, #8
    dabe:	4b1a      	ldr	r3, [pc, #104]	; (db28 <seg_ack+0x94>)
    dac0:	1a9b      	subs	r3, r3, r2
    dac2:	08db      	lsrs	r3, r3, #3
    dac4:	f363 118f 	bfi	r1, r3, #6, #10
    dac8:	f010 fcbb 	bl	1e442 <log_0>
	k_delayed_work_cancel(&rx->ack);
    dacc:	4620      	mov	r0, r4
    dace:	f015 fa64 	bl	22f9a <k_delayed_work_cancel>
	rx->in_use = 0U;
    dad2:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    dad6:	f36f 1386 	bfc	r3, #6, #1
    dada:	f804 3c10 	strb.w	r3, [r4, #-16]

	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
		 rx->block, rx->obo);

	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
}
    dade:	b005      	add	sp, #20
    dae0:	bd30      	pop	{r4, r5, pc}
		 rx->block, rx->obo);
    dae2:	f814 3c10 	ldrb.w	r3, [r4, #-16]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
    dae6:	f834 2c0c 	ldrh.w	r2, [r4, #-12]
    daea:	f834 1c0a 	ldrh.w	r1, [r4, #-10]
    daee:	f854 0c20 	ldr.w	r0, [r4, #-32]
    daf2:	09db      	lsrs	r3, r3, #7
    daf4:	9302      	str	r3, [sp, #8]
    daf6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    dafa:	9301      	str	r3, [sp, #4]
    dafc:	f1a4 0318 	sub.w	r3, r4, #24
    db00:	9300      	str	r3, [sp, #0]
    db02:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
    db06:	f7ff ff6b 	bl	d9e0 <send_ack>
	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
    db0a:	4628      	mov	r0, r5
    db0c:	f012 fe80 	bl	20810 <ack_timeout>
    db10:	4602      	mov	r2, r0
    db12:	4806      	ldr	r0, [pc, #24]	; (db2c <seg_ack+0x98>)
    db14:	4621      	mov	r1, r4
}
    db16:	b005      	add	sp, #20
    db18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    db1c:	f00e bd0c 	b.w	1c538 <k_delayed_work_submit_to_queue>
    db20:	000233ec 	.word	0x000233ec
    db24:	0002617d 	.word	0x0002617d
    db28:	000234d4 	.word	0x000234d4
    db2c:	20001c74 	.word	0x20001c74

0000db30 <bt_mesh_trans_recv>:

	return err;
}

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx)
{
    db30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    db34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    db38:	b089      	sub	sp, #36	; 0x24
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    db3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    db3e:	e9cd 2306 	strd	r2, r3, [sp, #24]

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
							rx->ctx.recv_dst);
	} else {
		rx->friend_match = false;
    db42:	7d0b      	ldrb	r3, [r1, #20]
    db44:	f36f 13c7 	bfc	r3, #7, #1
{
    db48:	4607      	mov	r7, r0
		rx->friend_match = false;
    db4a:	750b      	strb	r3, [r1, #20]
{
    db4c:	460d      	mov	r5, r1

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
	       rx->ctx.addr, rx->ctx.recv_dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    db4e:	2109      	movs	r1, #9
    db50:	f014 fd88 	bl	22664 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    db54:	4638      	mov	r0, r7
    db56:	f014 fdb9 	bl	226cc <net_buf_simple_headroom>
	/* Save the app-level state so the buffer can later be placed in
	 * the Friend Queue.
	 */
	net_buf_simple_save(buf, &state);

	if (SEG(buf->data)) {
    db5a:	f8d7 a000 	ldr.w	sl, [r7]
    db5e:	9005      	str	r0, [sp, #20]
    db60:	f99a 3000 	ldrsb.w	r3, [sl]
	state->len = buf->len;
    db64:	f8b7 b004 	ldrh.w	fp, [r7, #4]
    db68:	2b00      	cmp	r3, #0
    db6a:	f280 8240 	bge.w	dfee <bt_mesh_trans_recv+0x4be>
		/* Segmented messages must match a local element or an
		 * LPN of this Friend.
		 */
		if (!rx->local_match && !rx->friend_match) {
    db6e:	7d2b      	ldrb	r3, [r5, #20]
    db70:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    db74:	f000 8280 	beq.w	e078 <bt_mesh_trans_recv+0x548>
	if (buf->len < 5) {
    db78:	f1bb 0f04 	cmp.w	fp, #4
    db7c:	d811      	bhi.n	dba2 <bt_mesh_trans_recv+0x72>
		BT_ERR("Too short segmented message (len %u)", buf->len);
    db7e:	2301      	movs	r3, #1
    db80:	f04f 0200 	mov.w	r2, #0
    db84:	f363 0207 	bfi	r2, r3, #0, #8
    db88:	49a5      	ldr	r1, [pc, #660]	; (de20 <bt_mesh_trans_recv+0x2f0>)
    db8a:	4ba6      	ldr	r3, [pc, #664]	; (de24 <bt_mesh_trans_recv+0x2f4>)
    db8c:	48a6      	ldr	r0, [pc, #664]	; (de28 <bt_mesh_trans_recv+0x2f8>)
    db8e:	1a5b      	subs	r3, r3, r1
    db90:	08db      	lsrs	r3, r3, #3
    db92:	f363 128f 	bfi	r2, r3, #6, #10
    db96:	4659      	mov	r1, fp
    db98:	f010 fc60 	bl	1e45c <log_1>
			return -EINVAL;
    db9c:	f06f 0515 	mvn.w	r5, #21
    dba0:	e133      	b.n	de0a <bt_mesh_trans_recv+0x2da>
	net_buf_simple_pull(buf, 1);
    dba2:	2101      	movs	r1, #1
    dba4:	4638      	mov	r0, r7
    dba6:	f014 fd5d 	bl	22664 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    dbaa:	4638      	mov	r0, r7
    dbac:	f014 fd7a 	bl	226a4 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    dbb0:	00c6      	lsls	r6, r0, #3
	seq_zero = (seq_zero >> 2) & 0x1fff;
    dbb2:	f3c0 048c 	ubfx	r4, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    dbb6:	4638      	mov	r0, r7
    dbb8:	f014 fd64 	bl	22684 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    dbbc:	f006 0618 	and.w	r6, r6, #24
	seg_o |= seg_n >> 5;
    dbc0:	ea46 1650 	orr.w	r6, r6, r0, lsr #5
    dbc4:	b2f6      	uxtb	r6, r6
	seg_n &= 0x1f;
    dbc6:	f000 091f 	and.w	r9, r0, #31
	if (seg_o > seg_n) {
    dbca:	454e      	cmp	r6, r9
	seg_n = net_buf_simple_pull_u8(buf);
    dbcc:	4680      	mov	r8, r0
	if (seg_o > seg_n) {
    dbce:	d910      	bls.n	dbf2 <bt_mesh_trans_recv+0xc2>
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
    dbd0:	2201      	movs	r2, #1
    dbd2:	f04f 0300 	mov.w	r3, #0
    dbd6:	f362 0307 	bfi	r3, r2, #0, #8
    dbda:	4991      	ldr	r1, [pc, #580]	; (de20 <bt_mesh_trans_recv+0x2f0>)
    dbdc:	4a91      	ldr	r2, [pc, #580]	; (de24 <bt_mesh_trans_recv+0x2f4>)
    dbde:	4893      	ldr	r0, [pc, #588]	; (de2c <bt_mesh_trans_recv+0x2fc>)
    dbe0:	1a52      	subs	r2, r2, r1
    dbe2:	08d2      	lsrs	r2, r2, #3
    dbe4:	f362 138f 	bfi	r3, r2, #6, #10
    dbe8:	4631      	mov	r1, r6
    dbea:	464a      	mov	r2, r9
    dbec:	f010 fc4a 	bl	1e484 <log_2>
		return -EINVAL;
    dbf0:	e7d4      	b.n	db9c <bt_mesh_trans_recv+0x6c>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    dbf2:	6928      	ldr	r0, [r5, #16]
    dbf4:	498e      	ldr	r1, [pc, #568]	; (de30 <bt_mesh_trans_recv+0x300>)
    dbf6:	f895 c014 	ldrb.w	ip, [r5, #20]
    dbfa:	6809      	ldr	r1, [r1, #0]
    dbfc:	1b04      	subs	r4, r0, r4
    dbfe:	f00c 0301 	and.w	r3, ip, #1
    dc02:	f3c4 040c 	ubfx	r4, r4, #0, #13
    dc06:	1ac9      	subs	r1, r1, r3
    dc08:	1b04      	subs	r4, r0, r4
    dc0a:	ea44 6201 	orr.w	r2, r4, r1, lsl #24
		if (rx->src != net_rx->ctx.addr ||
    dc0e:	4c89      	ldr	r4, [pc, #548]	; (de34 <bt_mesh_trans_recv+0x304>)
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    dc10:	0a0b      	lsrs	r3, r1, #8
		if (rx->src != net_rx->ctx.addr ||
    dc12:	6960      	ldr	r0, [r4, #20]
    dc14:	68a9      	ldr	r1, [r5, #8]
    dc16:	4288      	cmp	r0, r1
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    dc18:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if (rx->src != net_rx->ctx.addr ||
    dc1c:	d127      	bne.n	dc6e <bt_mesh_trans_recv+0x13e>
		if (rx->seq_auth >= *seq_auth) {
    dc1e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    dc22:	4299      	cmp	r1, r3
    dc24:	bf08      	it	eq
    dc26:	4290      	cmpeq	r0, r2
    dc28:	f080 8228 	bcs.w	e07c <bt_mesh_trans_recv+0x54c>
		if (rx->in_use) {
    dc2c:	7c22      	ldrb	r2, [r4, #16]
    dc2e:	0653      	lsls	r3, r2, #25
    dc30:	d51d      	bpl.n	dc6e <bt_mesh_trans_recv+0x13e>
			BT_WARN("Duplicate SDU from src 0x%04x",
    dc32:	2102      	movs	r1, #2
    dc34:	f04f 0200 	mov.w	r2, #0
    dc38:	f361 0207 	bfi	r2, r1, #0, #8
    dc3c:	4878      	ldr	r0, [pc, #480]	; (de20 <bt_mesh_trans_recv+0x2f0>)
    dc3e:	4979      	ldr	r1, [pc, #484]	; (de24 <bt_mesh_trans_recv+0x2f4>)
    dc40:	1a09      	subs	r1, r1, r0
    dc42:	08c9      	lsrs	r1, r1, #3
    dc44:	f361 128f 	bfi	r2, r1, #6, #10
    dc48:	487b      	ldr	r0, [pc, #492]	; (de38 <bt_mesh_trans_recv+0x308>)
    dc4a:	8929      	ldrh	r1, [r5, #8]
    dc4c:	f010 fc06 	bl	1e45c <log_1>
	k_delayed_work_cancel(&rx->ack);
    dc50:	f104 0020 	add.w	r0, r4, #32
    dc54:	f015 f9a1 	bl	22f9a <k_delayed_work_cancel>
	rx->in_use = 0U;
    dc58:	7c22      	ldrb	r2, [r4, #16]
		rx->seq_auth = 0U;
    dc5a:	2000      	movs	r0, #0
    dc5c:	2100      	movs	r1, #0
	rx->in_use = 0U;
    dc5e:	2300      	movs	r3, #0
		rx->seq_auth = 0U;
    dc60:	e9c4 0102 	strd	r0, r1, [r4, #8]
	rx->in_use = 0U;
    dc64:	f363 1286 	bfi	r2, r3, #6, #1
    dc68:	7422      	strb	r2, [r4, #16]
		rx->sub = NULL;
    dc6a:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    dc6c:	6163      	str	r3, [r4, #20]
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    dc6e:	7d2b      	ldrb	r3, [r5, #20]
    dc70:	f3c3 00c0 	ubfx	r0, r3, #3, #1
		return 12;
    dc74:	2800      	cmp	r0, #0
    dc76:	bf14      	ite	ne
    dc78:	2208      	movne	r2, #8
    dc7a:	220c      	moveq	r2, #12
	return ((seg_n * seg_len(ctl) + 1) <= CONFIG_BT_MESH_RX_SDU_MAX);
    dc7c:	fb19 f202 	smulbb	r2, r9, r2
    dc80:	3201      	adds	r2, #1
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    dc82:	2a48      	cmp	r2, #72	; 0x48
    dc84:	f340 80ad 	ble.w	dde2 <bt_mesh_trans_recv+0x2b2>
		BT_ERR("Too big incoming SDU length");
    dc88:	2301      	movs	r3, #1
    dc8a:	f04f 0100 	mov.w	r1, #0
    dc8e:	4a64      	ldr	r2, [pc, #400]	; (de20 <bt_mesh_trans_recv+0x2f0>)
    dc90:	486a      	ldr	r0, [pc, #424]	; (de3c <bt_mesh_trans_recv+0x30c>)
    dc92:	f363 0107 	bfi	r1, r3, #0, #8
    dc96:	4b63      	ldr	r3, [pc, #396]	; (de24 <bt_mesh_trans_recv+0x2f4>)
    dc98:	1a9b      	subs	r3, r3, r2
    dc9a:	08db      	lsrs	r3, r3, #3
    dc9c:	f363 118f 	bfi	r1, r3, #6, #10
    dca0:	f010 fbcf 	bl	1e442 <log_0>
			 net_rx->friend_match);
    dca4:	7d2b      	ldrb	r3, [r5, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    dca6:	09db      	lsrs	r3, r3, #7
    dca8:	9302      	str	r3, [sp, #8]
    dcaa:	2300      	movs	r3, #0
    dcac:	9301      	str	r3, [sp, #4]
    dcae:	ab06      	add	r3, sp, #24
    dcb0:	9300      	str	r3, [sp, #0]
    dcb2:	7b6b      	ldrb	r3, [r5, #13]
    dcb4:	892a      	ldrh	r2, [r5, #8]
    dcb6:	8969      	ldrh	r1, [r5, #10]
    dcb8:	6828      	ldr	r0, [r5, #0]
    dcba:	f7ff fe91 	bl	d9e0 <send_ack>
			return -EMSGSIZE;
    dcbe:	f06f 0523 	mvn.w	r5, #35	; 0x23
    dcc2:	e0a2      	b.n	de0a <bt_mesh_trans_recv+0x2da>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    dcc4:	f89a 1000 	ldrb.w	r1, [sl]
    dcc8:	7c63      	ldrb	r3, [r4, #17]
    dcca:	4299      	cmp	r1, r3
    dccc:	d104      	bne.n	dcd8 <bt_mesh_trans_recv+0x1a8>
    dcce:	7c23      	ldrb	r3, [r4, #16]
    dcd0:	f003 011f 	and.w	r1, r3, #31
    dcd4:	4549      	cmp	r1, r9
    dcd6:	d00c      	beq.n	dcf2 <bt_mesh_trans_recv+0x1c2>
		BT_ERR("Invalid segment for ongoing session");
    dcd8:	2301      	movs	r3, #1
    dcda:	f04f 0100 	mov.w	r1, #0
    dcde:	f363 0107 	bfi	r1, r3, #0, #8
    dce2:	4a4f      	ldr	r2, [pc, #316]	; (de20 <bt_mesh_trans_recv+0x2f0>)
    dce4:	4b4f      	ldr	r3, [pc, #316]	; (de24 <bt_mesh_trans_recv+0x2f4>)
    dce6:	4856      	ldr	r0, [pc, #344]	; (de40 <bt_mesh_trans_recv+0x310>)
    dce8:	1a9b      	subs	r3, r3, r2
    dcea:	08db      	lsrs	r3, r3, #3
    dcec:	f363 118f 	bfi	r1, r3, #6, #10
    dcf0:	e1d5      	b.n	e09e <bt_mesh_trans_recv+0x56e>
	if (rx->ctl != net_rx->ctl) {
    dcf2:	f3c3 1340 	ubfx	r3, r3, #5, #1
    dcf6:	f3cc 02c0 	ubfx	r2, ip, #3, #1
    dcfa:	4293      	cmp	r3, r2
    dcfc:	d00c      	beq.n	dd18 <bt_mesh_trans_recv+0x1e8>
		BT_ERR("Inconsistent CTL in segment");
    dcfe:	2301      	movs	r3, #1
    dd00:	f04f 0100 	mov.w	r1, #0
    dd04:	f363 0107 	bfi	r1, r3, #0, #8
    dd08:	4a45      	ldr	r2, [pc, #276]	; (de20 <bt_mesh_trans_recv+0x2f0>)
    dd0a:	4b46      	ldr	r3, [pc, #280]	; (de24 <bt_mesh_trans_recv+0x2f4>)
    dd0c:	484d      	ldr	r0, [pc, #308]	; (de44 <bt_mesh_trans_recv+0x314>)
    dd0e:	1a9b      	subs	r3, r3, r2
    dd10:	08db      	lsrs	r3, r3, #3
    dd12:	f363 118f 	bfi	r1, r3, #6, #10
    dd16:	e1c2      	b.n	e09e <bt_mesh_trans_recv+0x56e>
		if (rx->in_use) {
    dd18:	7c23      	ldrb	r3, [r4, #16]
    dd1a:	0658      	lsls	r0, r3, #25
    dd1c:	d44c      	bmi.n	ddb8 <bt_mesh_trans_recv+0x288>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    dd1e:	4a40      	ldr	r2, [pc, #256]	; (de20 <bt_mesh_trans_recv+0x2f0>)
    dd20:	4b40      	ldr	r3, [pc, #256]	; (de24 <bt_mesh_trans_recv+0x2f4>)
    dd22:	3101      	adds	r1, #1
    dd24:	1a9b      	subs	r3, r3, r2
    dd26:	2201      	movs	r2, #1
    dd28:	408a      	lsls	r2, r1
    dd2a:	69a1      	ldr	r1, [r4, #24]
    dd2c:	3a01      	subs	r2, #1
    dd2e:	428a      	cmp	r2, r1
			BT_WARN("Got segment for already complete SDU");
    dd30:	f04f 0100 	mov.w	r1, #0
    dd34:	f04f 0202 	mov.w	r2, #2
    dd38:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    dd3c:	f362 0107 	bfi	r1, r2, #0, #8
    dd40:	f363 118f 	bfi	r1, r3, #6, #10
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    dd44:	d112      	bne.n	dd6c <bt_mesh_trans_recv+0x23c>
			BT_WARN("Got segment for already complete SDU");
    dd46:	4840      	ldr	r0, [pc, #256]	; (de48 <bt_mesh_trans_recv+0x318>)
    dd48:	f010 fb7b 	bl	1e442 <log_0>
				 seq_auth, rx->block, rx->obo);
    dd4c:	7c23      	ldrb	r3, [r4, #16]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    dd4e:	09db      	lsrs	r3, r3, #7
    dd50:	9302      	str	r3, [sp, #8]
    dd52:	69a3      	ldr	r3, [r4, #24]
    dd54:	9301      	str	r3, [sp, #4]
    dd56:	ab06      	add	r3, sp, #24
    dd58:	9300      	str	r3, [sp, #0]
    dd5a:	7b6b      	ldrb	r3, [r5, #13]
    dd5c:	892a      	ldrh	r2, [r5, #8]
    dd5e:	8969      	ldrh	r1, [r5, #10]
    dd60:	6828      	ldr	r0, [r5, #0]
    dd62:	f7ff fe3d 	bl	d9e0 <send_ack>
		return -EALREADY;
    dd66:	f06f 0544 	mvn.w	r5, #68	; 0x44
    dd6a:	e04e      	b.n	de0a <bt_mesh_trans_recv+0x2da>
		BT_WARN("Got segment for canceled SDU");
    dd6c:	4837      	ldr	r0, [pc, #220]	; (de4c <bt_mesh_trans_recv+0x31c>)
    dd6e:	e196      	b.n	e09e <bt_mesh_trans_recv+0x56e>
		rx->in_use = 1U;
    dd70:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    dd74:	7421      	strb	r1, [r4, #16]
		rx->ctl = net_rx->ctl;
    dd76:	f894 c010 	ldrb.w	ip, [r4, #16]
	buf->data = buf->__buf;
    dd7a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    dd7c:	6421      	str	r1, [r4, #64]	; 0x40
		rx->sub = net_rx->sub;
    dd7e:	6829      	ldr	r1, [r5, #0]
    dd80:	6021      	str	r1, [r4, #0]
		rx->ctl = net_rx->ctl;
    dd82:	f360 1c45 	bfi	ip, r0, #5, #1
		rx->seq_auth = *seq_auth;
    dd86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    dd8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
		rx->seg_n = seg_n;
    dd8e:	4661      	mov	r1, ip
    dd90:	f368 0104 	bfi	r1, r8, #0, #5
    dd94:	7421      	strb	r1, [r4, #16]
	buf->len  = 0;
    dd96:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
		rx->hdr = *hdr;
    dd9a:	f89a 1000 	ldrb.w	r1, [sl]
    dd9e:	7461      	strb	r1, [r4, #17]
		rx->ttl = net_rx->ctx.send_ttl;
    dda0:	7b69      	ldrb	r1, [r5, #13]
    dda2:	74a1      	strb	r1, [r4, #18]
		rx->src = net_rx->ctx.addr;
    dda4:	8929      	ldrh	r1, [r5, #8]
    dda6:	82a1      	strh	r1, [r4, #20]
		rx->dst = net_rx->ctx.recv_dst;
    dda8:	8969      	ldrh	r1, [r5, #10]
		rx->block = 0U;
    ddaa:	61a2      	str	r2, [r4, #24]
	rx->obo = net_rx->friend_match;
    ddac:	7c22      	ldrb	r2, [r4, #16]
		rx->dst = net_rx->ctx.recv_dst;
    ddae:	82e1      	strh	r1, [r4, #22]
	rx->obo = net_rx->friend_match;
    ddb0:	09db      	lsrs	r3, r3, #7
    ddb2:	f363 12c7 	bfi	r2, r3, #7, #1
    ddb6:	7422      	strb	r2, [r4, #16]
	if (BIT(seg_o) & rx->block) {
    ddb8:	69a3      	ldr	r3, [r4, #24]
    ddba:	fa23 f806 	lsr.w	r8, r3, r6
    ddbe:	f018 0801 	ands.w	r8, r8, #1
    ddc2:	d049      	beq.n	de58 <bt_mesh_trans_recv+0x328>
		BT_WARN("Received already received fragment");
    ddc4:	2302      	movs	r3, #2
    ddc6:	f04f 0100 	mov.w	r1, #0
    ddca:	f363 0107 	bfi	r1, r3, #0, #8
    ddce:	4a14      	ldr	r2, [pc, #80]	; (de20 <bt_mesh_trans_recv+0x2f0>)
    ddd0:	4b14      	ldr	r3, [pc, #80]	; (de24 <bt_mesh_trans_recv+0x2f4>)
    ddd2:	481f      	ldr	r0, [pc, #124]	; (de50 <bt_mesh_trans_recv+0x320>)
    ddd4:	1a9b      	subs	r3, r3, r2
    ddd6:	08db      	lsrs	r3, r3, #3
    ddd8:	f363 118f 	bfi	r1, r3, #6, #10
    dddc:	f010 fb31 	bl	1e442 <log_0>
    dde0:	e7c1      	b.n	dd66 <bt_mesh_trans_recv+0x236>
		if (rx->in_use) {
    dde2:	7c21      	ldrb	r1, [r4, #16]
    dde4:	f011 0240 	ands.w	r2, r1, #64	; 0x40
    dde8:	d0c2      	beq.n	dd70 <bt_mesh_trans_recv+0x240>
		BT_WARN("No free slots for new incoming segmented messages");
    ddea:	2302      	movs	r3, #2
    ddec:	f04f 0100 	mov.w	r1, #0
    ddf0:	f363 0107 	bfi	r1, r3, #0, #8
    ddf4:	4a0a      	ldr	r2, [pc, #40]	; (de20 <bt_mesh_trans_recv+0x2f0>)
    ddf6:	4b0b      	ldr	r3, [pc, #44]	; (de24 <bt_mesh_trans_recv+0x2f4>)
    ddf8:	4816      	ldr	r0, [pc, #88]	; (de54 <bt_mesh_trans_recv+0x324>)
    ddfa:	1a9b      	subs	r3, r3, r2
    ddfc:	08db      	lsrs	r3, r3, #3
    ddfe:	f363 118f 	bfi	r1, r3, #6, #10
    de02:	f010 fb1e 	bl	1e442 <log_0>
		return -ENOMEM;
    de06:	f06f 050b 	mvn.w	r5, #11
	buf->data = buf->__buf + state->offset;
    de0a:	68bb      	ldr	r3, [r7, #8]
    de0c:	9a05      	ldr	r2, [sp, #20]
	buf->len = state->len;
    de0e:	f8a7 b004 	strh.w	fp, [r7, #4]
	buf->data = buf->__buf + state->offset;
    de12:	fa13 f382 	uxtah	r3, r3, r2
    de16:	603b      	str	r3, [r7, #0]
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth, buf);
		}
	}

	return err;
}
    de18:	4628      	mov	r0, r5
    de1a:	b009      	add	sp, #36	; 0x24
    de1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de20:	000233ec 	.word	0x000233ec
    de24:	000234d4 	.word	0x000234d4
    de28:	00025e29 	.word	0x00025e29
    de2c:	00025e4e 	.word	0x00025e4e
    de30:	20007924 	.word	0x20007924
    de34:	200071d0 	.word	0x200071d0
    de38:	00025e6f 	.word	0x00025e6f
    de3c:	00025f24 	.word	0x00025f24
    de40:	00025ea2 	.word	0x00025ea2
    de44:	00025ec6 	.word	0x00025ec6
    de48:	00025ee2 	.word	0x00025ee2
    de4c:	00025f07 	.word	0x00025f07
    de50:	00025f72 	.word	0x00025f72
    de54:	00025f40 	.word	0x00025f40
	if (seg_o == seg_n) {
    de58:	7c22      	ldrb	r2, [r4, #16]
    de5a:	88b9      	ldrh	r1, [r7, #4]
    de5c:	f3c2 1240 	ubfx	r2, r2, #5, #1
		return 12;
    de60:	2a00      	cmp	r2, #0
    de62:	bf14      	ite	ne
    de64:	2308      	movne	r3, #8
    de66:	230c      	moveq	r3, #12
	if (seg_o == seg_n) {
    de68:	454e      	cmp	r6, r9
    de6a:	d130      	bne.n	dece <bt_mesh_trans_recv+0x39e>
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
    de6c:	fb03 1306 	mla	r3, r3, r6, r1
    de70:	b29b      	uxth	r3, r3
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
    de72:	2b48      	cmp	r3, #72	; 0x48
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
    de74:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
    de78:	d938      	bls.n	deec <bt_mesh_trans_recv+0x3bc>
			BT_ERR("Too large SDU len");
    de7a:	2301      	movs	r3, #1
    de7c:	f04f 0100 	mov.w	r1, #0
    de80:	4a88      	ldr	r2, [pc, #544]	; (e0a4 <bt_mesh_trans_recv+0x574>)
    de82:	4889      	ldr	r0, [pc, #548]	; (e0a8 <bt_mesh_trans_recv+0x578>)
    de84:	f363 0107 	bfi	r1, r3, #0, #8
    de88:	4b88      	ldr	r3, [pc, #544]	; (e0ac <bt_mesh_trans_recv+0x57c>)
    de8a:	1a9b      	subs	r3, r3, r2
    de8c:	08db      	lsrs	r3, r3, #3
    de8e:	f363 118f 	bfi	r1, r3, #6, #10
    de92:	f010 fad6 	bl	1e442 <log_0>
				 seq_auth, 0, rx->obo);
    de96:	7c23      	ldrb	r3, [r4, #16]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    de98:	09db      	lsrs	r3, r3, #7
    de9a:	e9cd 8301 	strd	r8, r3, [sp, #4]
    de9e:	ab06      	add	r3, sp, #24
    dea0:	9300      	str	r3, [sp, #0]
    dea2:	7b6b      	ldrb	r3, [r5, #13]
    dea4:	892a      	ldrh	r2, [r5, #8]
    dea6:	8969      	ldrh	r1, [r5, #10]
    dea8:	6828      	ldr	r0, [r5, #0]
    deaa:	f7ff fd99 	bl	d9e0 <send_ack>
	k_delayed_work_cancel(&rx->ack);
    deae:	4880      	ldr	r0, [pc, #512]	; (e0b0 <bt_mesh_trans_recv+0x580>)
    deb0:	f015 f873 	bl	22f9a <k_delayed_work_cancel>
	rx->in_use = 0U;
    deb4:	7c23      	ldrb	r3, [r4, #16]
		rx->sub = NULL;
    deb6:	f8c4 8000 	str.w	r8, [r4]
	rx->in_use = 0U;
    deba:	f368 1386 	bfi	r3, r8, #6, #1
    debe:	7423      	strb	r3, [r4, #16]
		rx->seq_auth = 0U;
    dec0:	2200      	movs	r2, #0
    dec2:	2300      	movs	r3, #0
    dec4:	e9c4 2302 	strd	r2, r3, [r4, #8]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    dec8:	f8c4 8014 	str.w	r8, [r4, #20]
    decc:	e6f7      	b.n	dcbe <bt_mesh_trans_recv+0x18e>
		if (buf->len != seg_len(rx->ctl)) {
    dece:	428b      	cmp	r3, r1
    ded0:	d00c      	beq.n	deec <bt_mesh_trans_recv+0x3bc>
			BT_ERR("Incorrect segment size for message type");
    ded2:	2301      	movs	r3, #1
    ded4:	f04f 0100 	mov.w	r1, #0
    ded8:	f363 0107 	bfi	r1, r3, #0, #8
    dedc:	4a71      	ldr	r2, [pc, #452]	; (e0a4 <bt_mesh_trans_recv+0x574>)
    dede:	4b73      	ldr	r3, [pc, #460]	; (e0ac <bt_mesh_trans_recv+0x57c>)
    dee0:	4874      	ldr	r0, [pc, #464]	; (e0b4 <bt_mesh_trans_recv+0x584>)
    dee2:	1a9b      	subs	r3, r3, r2
    dee4:	08db      	lsrs	r3, r3, #3
    dee6:	f363 118f 	bfi	r1, r3, #6, #10
    deea:	e0d8      	b.n	e09e <bt_mesh_trans_recv+0x56e>
    deec:	f015 f8a6 	bl	2303c <z_impl_k_uptime_get_32>
	rx->last = k_uptime_get_32();
    def0:	61e0      	str	r0, [r4, #28]
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    def2:	4871      	ldr	r0, [pc, #452]	; (e0b8 <bt_mesh_trans_recv+0x588>)
    def4:	f00e fbe8 	bl	1c6c8 <z_timeout_remaining>
    def8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    defc:	2264      	movs	r2, #100	; 0x64
    defe:	2300      	movs	r3, #0
    df00:	fb80 0101 	smull	r0, r1, r0, r1
    df04:	f7f2 f93c 	bl	180 <__aeabi_uldivmod>
	if (!k_delayed_work_remaining_get(&rx->ack) &&
    df08:	b938      	cbnz	r0, df1a <bt_mesh_trans_recv+0x3ea>
		k_delayed_work_submit(&rx->ack, ack_timeout(rx));
    df0a:	486c      	ldr	r0, [pc, #432]	; (e0bc <bt_mesh_trans_recv+0x58c>)
    df0c:	f012 fc80 	bl	20810 <ack_timeout>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    df10:	4967      	ldr	r1, [pc, #412]	; (e0b0 <bt_mesh_trans_recv+0x580>)
    df12:	4602      	mov	r2, r0
    df14:	486a      	ldr	r0, [pc, #424]	; (e0c0 <bt_mesh_trans_recv+0x590>)
    df16:	f00e fb0f 	bl	1c538 <k_delayed_work_submit_to_queue>
	memcpy(rx->buf.data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
    df1a:	7c22      	ldrb	r2, [r4, #16]
    df1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    df1e:	6839      	ldr	r1, [r7, #0]
		return 12;
    df20:	f012 0f20 	tst.w	r2, #32
    df24:	bf14      	ite	ne
    df26:	2008      	movne	r0, #8
    df28:	200c      	moveq	r0, #12
	memcpy(rx->buf.data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
    df2a:	fb06 3000 	mla	r0, r6, r0, r3
    df2e:	88ba      	ldrh	r2, [r7, #4]
    df30:	f011 fb6a 	bl	1f608 <memcpy>
	rx->block |= BIT(seg_o);
    df34:	2301      	movs	r3, #1
    df36:	69a2      	ldr	r2, [r4, #24]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    df38:	4499      	add	r9, r3
	rx->block |= BIT(seg_o);
    df3a:	fa03 f606 	lsl.w	r6, r3, r6
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    df3e:	fa03 f309 	lsl.w	r3, r3, r9
	rx->block |= BIT(seg_o);
    df42:	4332      	orrs	r2, r6
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    df44:	3b01      	subs	r3, #1
    df46:	429a      	cmp	r2, r3
	rx->block |= BIT(seg_o);
    df48:	61a2      	str	r2, [r4, #24]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    df4a:	d001      	beq.n	df50 <bt_mesh_trans_recv+0x420>
		return 0;
    df4c:	2500      	movs	r5, #0
    df4e:	e75c      	b.n	de0a <bt_mesh_trans_recv+0x2da>
	if (net_rx->local_match && is_replay(net_rx)) {
    df50:	7d2b      	ldrb	r3, [r5, #20]
    df52:	065a      	lsls	r2, r3, #25
    df54:	d51b      	bpl.n	df8e <bt_mesh_trans_recv+0x45e>
    df56:	4628      	mov	r0, r5
    df58:	f7fe ff9c 	bl	ce94 <is_replay>
    df5c:	b1b8      	cbz	r0, df8e <bt_mesh_trans_recv+0x45e>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    df5e:	2302      	movs	r3, #2
    df60:	f04f 0200 	mov.w	r2, #0
    df64:	f363 0207 	bfi	r2, r3, #0, #8
    df68:	494e      	ldr	r1, [pc, #312]	; (e0a4 <bt_mesh_trans_recv+0x574>)
    df6a:	4b50      	ldr	r3, [pc, #320]	; (e0ac <bt_mesh_trans_recv+0x57c>)
    df6c:	4855      	ldr	r0, [pc, #340]	; (e0c4 <bt_mesh_trans_recv+0x594>)
    df6e:	1a5b      	subs	r3, r3, r1
    df70:	08db      	lsrs	r3, r3, #3
    df72:	f363 128f 	bfi	r2, r3, #6, #10
    df76:	f8ad 2000 	strh.w	r2, [sp]
    df7a:	692b      	ldr	r3, [r5, #16]
    df7c:	896a      	ldrh	r2, [r5, #10]
    df7e:	8929      	ldrh	r1, [r5, #8]
    df80:	f010 fa98 	bl	1e4b4 <log_3>
		rx->block &= ~BIT(seg_o);
    df84:	69a3      	ldr	r3, [r4, #24]
    df86:	ea23 0606 	bic.w	r6, r3, r6
    df8a:	61a6      	str	r6, [r4, #24]
		return -EINVAL;
    df8c:	e606      	b.n	db9c <bt_mesh_trans_recv+0x6c>
	k_delayed_work_cancel(&rx->ack);
    df8e:	4848      	ldr	r0, [pc, #288]	; (e0b0 <bt_mesh_trans_recv+0x580>)
    df90:	f015 f803 	bl	22f9a <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    df94:	7c23      	ldrb	r3, [r4, #16]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    df96:	09db      	lsrs	r3, r3, #7
    df98:	9302      	str	r3, [sp, #8]
    df9a:	69a3      	ldr	r3, [r4, #24]
    df9c:	9301      	str	r3, [sp, #4]
    df9e:	ae06      	add	r6, sp, #24
    dfa0:	9600      	str	r6, [sp, #0]
    dfa2:	7b6b      	ldrb	r3, [r5, #13]
    dfa4:	892a      	ldrh	r2, [r5, #8]
    dfa6:	8969      	ldrh	r1, [r5, #10]
    dfa8:	6828      	ldr	r0, [r5, #0]
    dfaa:	f7ff fd19 	bl	d9e0 <send_ack>
	if (net_rx->ctl) {
    dfae:	7d2b      	ldrb	r3, [r5, #20]
    dfb0:	f89a 1000 	ldrb.w	r1, [sl]
    dfb4:	4a44      	ldr	r2, [pc, #272]	; (e0c8 <bt_mesh_trans_recv+0x598>)
    dfb6:	f013 0f08 	tst.w	r3, #8
    dfba:	d00c      	beq.n	dfd6 <bt_mesh_trans_recv+0x4a6>
		err = ctl_recv(net_rx, *hdr, &rx->buf, seq_auth);
    dfbc:	4633      	mov	r3, r6
    dfbe:	4628      	mov	r0, r5
    dfc0:	f7ff f978 	bl	d2b4 <ctl_recv>
		err = sdu_recv(net_rx, (rx->seq_auth & 0xffffff), *hdr,
    dfc4:	4605      	mov	r5, r0
	k_delayed_work_cancel(&rx->ack);
    dfc6:	483a      	ldr	r0, [pc, #232]	; (e0b0 <bt_mesh_trans_recv+0x580>)
    dfc8:	f014 ffe7 	bl	22f9a <k_delayed_work_cancel>
	rx->in_use = 0U;
    dfcc:	7c23      	ldrb	r3, [r4, #16]
    dfce:	f36f 1386 	bfc	r3, #6, #1
    dfd2:	7423      	strb	r3, [r4, #16]
	return err;
    dfd4:	e719      	b.n	de0a <bt_mesh_trans_recv+0x2da>
		err = sdu_recv(net_rx, (rx->seq_auth & 0xffffff), *hdr,
    dfd6:	68a0      	ldr	r0, [r4, #8]
    dfd8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    dfdc:	9200      	str	r2, [sp, #0]
    dfde:	09db      	lsrs	r3, r3, #7
    dfe0:	460a      	mov	r2, r1
    dfe2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    dfe6:	4628      	mov	r0, r5
    dfe8:	f7fe ffa2 	bl	cf30 <sdu_recv>
    dfec:	e7ea      	b.n	dfc4 <bt_mesh_trans_recv+0x494>
	if (buf->len < 1) {
    dfee:	f1bb 0f00 	cmp.w	fp, #0
    dff2:	d10c      	bne.n	e00e <bt_mesh_trans_recv+0x4de>
		BT_ERR("Too small unsegmented PDU");
    dff4:	2301      	movs	r3, #1
    dff6:	f04f 0100 	mov.w	r1, #0
    dffa:	f363 0107 	bfi	r1, r3, #0, #8
    dffe:	4a29      	ldr	r2, [pc, #164]	; (e0a4 <bt_mesh_trans_recv+0x574>)
    e000:	4b2a      	ldr	r3, [pc, #168]	; (e0ac <bt_mesh_trans_recv+0x57c>)
    e002:	4832      	ldr	r0, [pc, #200]	; (e0cc <bt_mesh_trans_recv+0x59c>)
    e004:	1a9b      	subs	r3, r3, r2
    e006:	08db      	lsrs	r3, r3, #3
    e008:	f363 118f 	bfi	r1, r3, #6, #10
    e00c:	e047      	b.n	e09e <bt_mesh_trans_recv+0x56e>
	if (rx->local_match && is_replay(rx)) {
    e00e:	7d2b      	ldrb	r3, [r5, #20]
    e010:	065b      	lsls	r3, r3, #25
    e012:	d517      	bpl.n	e044 <bt_mesh_trans_recv+0x514>
    e014:	4628      	mov	r0, r5
    e016:	f7fe ff3d 	bl	ce94 <is_replay>
    e01a:	b198      	cbz	r0, e044 <bt_mesh_trans_recv+0x514>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    e01c:	2302      	movs	r3, #2
    e01e:	f04f 0200 	mov.w	r2, #0
    e022:	f363 0207 	bfi	r2, r3, #0, #8
    e026:	491f      	ldr	r1, [pc, #124]	; (e0a4 <bt_mesh_trans_recv+0x574>)
    e028:	4b20      	ldr	r3, [pc, #128]	; (e0ac <bt_mesh_trans_recv+0x57c>)
    e02a:	4826      	ldr	r0, [pc, #152]	; (e0c4 <bt_mesh_trans_recv+0x594>)
    e02c:	1a5b      	subs	r3, r3, r1
    e02e:	08db      	lsrs	r3, r3, #3
    e030:	f363 128f 	bfi	r2, r3, #6, #10
    e034:	f8ad 2000 	strh.w	r2, [sp]
    e038:	692b      	ldr	r3, [r5, #16]
    e03a:	896a      	ldrh	r2, [r5, #10]
    e03c:	8929      	ldrh	r1, [r5, #8]
    e03e:	f010 fa39 	bl	1e4b4 <log_3>
		return -EINVAL;
    e042:	e5ab      	b.n	db9c <bt_mesh_trans_recv+0x6c>
	hdr = net_buf_simple_pull_u8(buf);
    e044:	4638      	mov	r0, r7
    e046:	f014 fb1d 	bl	22684 <net_buf_simple_pull_u8>
	if (rx->ctl) {
    e04a:	7d2a      	ldrb	r2, [r5, #20]
    e04c:	f012 0308 	ands.w	r3, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
    e050:	4601      	mov	r1, r0
	if (rx->ctl) {
    e052:	d006      	beq.n	e062 <bt_mesh_trans_recv+0x532>
		return ctl_recv(rx, hdr, buf, seq_auth);
    e054:	ab06      	add	r3, sp, #24
    e056:	463a      	mov	r2, r7
    e058:	4628      	mov	r0, r5
    e05a:	f7ff f92b 	bl	d2b4 <ctl_recv>
		return sdu_recv(rx, rx->seq, hdr, 0, buf);
    e05e:	4605      	mov	r5, r0
    e060:	e6d3      	b.n	de0a <bt_mesh_trans_recv+0x2da>
		if (!rx->local_match && !rx->friend_match) {
    e062:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    e066:	f43f af71 	beq.w	df4c <bt_mesh_trans_recv+0x41c>
		return sdu_recv(rx, rx->seq, hdr, 0, buf);
    e06a:	9700      	str	r7, [sp, #0]
    e06c:	4602      	mov	r2, r0
    e06e:	6929      	ldr	r1, [r5, #16]
    e070:	4628      	mov	r0, r5
    e072:	f7fe ff5d 	bl	cf30 <sdu_recv>
    e076:	e7f2      	b.n	e05e <bt_mesh_trans_recv+0x52e>
			return 0;
    e078:	461d      	mov	r5, r3
    e07a:	e6cd      	b.n	de18 <bt_mesh_trans_recv+0x2e8>
		if (rx->seq_auth > *seq_auth) {
    e07c:	428b      	cmp	r3, r1
    e07e:	bf08      	it	eq
    e080:	4282      	cmpeq	r2, r0
    e082:	f4bf ae1f 	bcs.w	dcc4 <bt_mesh_trans_recv+0x194>
			BT_WARN("Ignoring old SeqAuth");
    e086:	2302      	movs	r3, #2
    e088:	f04f 0100 	mov.w	r1, #0
    e08c:	f363 0107 	bfi	r1, r3, #0, #8
    e090:	4a04      	ldr	r2, [pc, #16]	; (e0a4 <bt_mesh_trans_recv+0x574>)
    e092:	4b06      	ldr	r3, [pc, #24]	; (e0ac <bt_mesh_trans_recv+0x57c>)
    e094:	480e      	ldr	r0, [pc, #56]	; (e0d0 <bt_mesh_trans_recv+0x5a0>)
    e096:	1a9b      	subs	r3, r3, r2
    e098:	08db      	lsrs	r3, r3, #3
    e09a:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("Incorrect segment size for message type");
    e09e:	f010 f9d0 	bl	1e442 <log_0>
    e0a2:	e57b      	b.n	db9c <bt_mesh_trans_recv+0x6c>
    e0a4:	000233ec 	.word	0x000233ec
    e0a8:	00025f95 	.word	0x00025f95
    e0ac:	000234d4 	.word	0x000234d4
    e0b0:	200071f0 	.word	0x200071f0
    e0b4:	00025fa7 	.word	0x00025fa7
    e0b8:	200071fc 	.word	0x200071fc
    e0bc:	200071d0 	.word	0x200071d0
    e0c0:	20001c74 	.word	0x20001c74
    e0c4:	00025fcf 	.word	0x00025fcf
    e0c8:	20007210 	.word	0x20007210
    e0cc:	00025ff8 	.word	0x00025ff8
    e0d0:	00025e8d 	.word	0x00025e8d

0000e0d4 <bt_mesh_rx_reset>:

void bt_mesh_rx_reset(void)
{
    e0d4:	b510      	push	{r4, lr}
	k_delayed_work_cancel(&rx->ack);
    e0d6:	4c0a      	ldr	r4, [pc, #40]	; (e100 <bt_mesh_rx_reset+0x2c>)
    e0d8:	f104 0020 	add.w	r0, r4, #32
    e0dc:	f014 ff5d 	bl	22f9a <k_delayed_work_cancel>
	rx->in_use = 0U;
    e0e0:	7c23      	ldrb	r3, [r4, #16]
    e0e2:	f36f 1386 	bfc	r3, #6, #1
    e0e6:	7423      	strb	r3, [r4, #16]
		rx->seq_auth = 0U;
    e0e8:	2200      	movs	r2, #0
    e0ea:	2300      	movs	r3, #0
    e0ec:	e9c4 2302 	strd	r2, r3, [r4, #8]
		rx->sub = NULL;
    e0f0:	2300      	movs	r3, #0
    e0f2:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    e0f4:	6163      	str	r3, [r4, #20]
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_clear_rpl();
	} else {
		(void)memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
	}
}
    e0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_clear_rpl();
    e0fa:	f013 bbd1 	b.w	218a0 <bt_mesh_clear_rpl>
    e0fe:	bf00      	nop
    e100:	200071d0 	.word	0x200071d0

0000e104 <bt_mesh_tx_reset>:
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
    e104:	4801      	ldr	r0, [pc, #4]	; (e10c <bt_mesh_tx_reset+0x8>)
    e106:	f7ff b83d 	b.w	d184 <seg_tx_reset>
    e10a:	bf00      	nop
    e10c:	20000050 	.word	0x20000050

0000e110 <bt_mesh_trans_init>:
	}
}

void bt_mesh_trans_init(void)
{
    e110:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    e112:	4c07      	ldr	r4, [pc, #28]	; (e130 <bt_mesh_trans_init+0x20>)
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    e114:	4907      	ldr	r1, [pc, #28]	; (e134 <bt_mesh_trans_init+0x24>)
    e116:	4808      	ldr	r0, [pc, #32]	; (e138 <bt_mesh_trans_init+0x28>)
    e118:	f014 ff37 	bl	22f8a <k_delayed_work_init>
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    e11c:	4907      	ldr	r1, [pc, #28]	; (e13c <bt_mesh_trans_init+0x2c>)
    e11e:	f104 0020 	add.w	r0, r4, #32
    e122:	f014 ff32 	bl	22f8a <k_delayed_work_init>
		seg_rx[i].buf.__buf = (seg_rx_buf_data +
    e126:	4b06      	ldr	r3, [pc, #24]	; (e140 <bt_mesh_trans_init+0x30>)
    e128:	64a3      	str	r3, [r4, #72]	; 0x48
				       (i * CONFIG_BT_MESH_RX_SDU_MAX));
		seg_rx[i].buf.data = seg_rx[i].buf.__buf;
    e12a:	6423      	str	r3, [r4, #64]	; 0x40
	}
}
    e12c:	bd10      	pop	{r4, pc}
    e12e:	bf00      	nop
    e130:	200071d0 	.word	0x200071d0
    e134:	00020865 	.word	0x00020865
    e138:	20000088 	.word	0x20000088
    e13c:	0000da95 	.word	0x0000da95
    e140:	20007016 	.word	0x20007016

0000e144 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const u8_t n[16], const u8_t *p, size_t p_len,
	       u8_t net_id[1], u8_t enc_key[16], u8_t priv_key[16])
{
    e144:	b5f0      	push	{r4, r5, r6, r7, lr}
    e146:	b095      	sub	sp, #84	; 0x54
    e148:	4604      	mov	r4, r0
    e14a:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    e14c:	4828      	ldr	r0, [pc, #160]	; (e1f0 <bt_mesh_k2+0xac>)
    e14e:	a902      	add	r1, sp, #8
{
    e150:	4615      	mov	r5, r2
    e152:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    e154:	f012 fe4a 	bl	20dec <bt_mesh_s1>
	if (err) {
    e158:	2800      	cmp	r0, #0
    e15a:	d146      	bne.n	e1ea <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    e15c:	4621      	mov	r1, r4
    e15e:	ab0a      	add	r3, sp, #40	; 0x28
    e160:	2210      	movs	r2, #16
    e162:	a802      	add	r0, sp, #8
    e164:	f012 fe38 	bl	20dd8 <bt_mesh_aes_cmac_one>
	if (err) {
    e168:	4604      	mov	r4, r0
    e16a:	2800      	cmp	r0, #0
    e16c:	d13a      	bne.n	e1e4 <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    e16e:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    e170:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    e174:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e178:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    e17a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	pad = 0x01;
    e17e:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = 0;
    e182:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e186:	462b      	mov	r3, r5
    e188:	2203      	movs	r2, #3
    e18a:	a90e      	add	r1, sp, #56	; 0x38
    e18c:	a80a      	add	r0, sp, #40	; 0x28
    e18e:	f012 fe01 	bl	20d94 <bt_mesh_aes_cmac>
	if (err) {
    e192:	4604      	mov	r4, r0
    e194:	bb30      	cbnz	r0, e1e4 <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    e196:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    e19a:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    e19c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e1a0:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    e1a2:	2302      	movs	r3, #2
    e1a4:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    e1a8:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e1aa:	462b      	mov	r3, r5
    e1ac:	2203      	movs	r2, #3
    e1ae:	a90e      	add	r1, sp, #56	; 0x38
    e1b0:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    e1b2:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e1b4:	f012 fdee 	bl	20d94 <bt_mesh_aes_cmac>
	if (err) {
    e1b8:	4604      	mov	r4, r0
    e1ba:	b998      	cbnz	r0, e1e4 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    e1bc:	4632      	mov	r2, r6
    e1be:	4629      	mov	r1, r5
    e1c0:	981a      	ldr	r0, [sp, #104]	; 0x68
    e1c2:	f011 fa21 	bl	1f608 <memcpy>

	pad = 0x03;
    e1c6:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e1c8:	462b      	mov	r3, r5
    e1ca:	a90e      	add	r1, sp, #56	; 0x38
    e1cc:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    e1ce:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e1d2:	f012 fddf 	bl	20d94 <bt_mesh_aes_cmac>
	if (err) {
    e1d6:	4604      	mov	r4, r0
    e1d8:	b920      	cbnz	r0, e1e4 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    e1da:	4632      	mov	r2, r6
    e1dc:	4629      	mov	r1, r5
    e1de:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e1e0:	f011 fa12 	bl	1f608 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    e1e4:	4620      	mov	r0, r4
    e1e6:	b015      	add	sp, #84	; 0x54
    e1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    e1ea:	2401      	movs	r4, #1
    e1ec:	e7fa      	b.n	e1e4 <bt_mesh_k2+0xa0>
    e1ee:	bf00      	nop
    e1f0:	000262ac 	.word	0x000262ac

0000e1f4 <bt_mesh_k3>:

int bt_mesh_k3(const u8_t n[16], u8_t out[8])
{
    e1f4:	b530      	push	{r4, r5, lr}
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    e1f6:	4b14      	ldr	r3, [pc, #80]	; (e248 <bt_mesh_k3+0x54>)
{
    e1f8:	b08b      	sub	sp, #44	; 0x2c
    e1fa:	4604      	mov	r4, r0
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    e1fc:	6818      	ldr	r0, [r3, #0]
    e1fe:	9000      	str	r0, [sp, #0]
{
    e200:	460d      	mov	r5, r1
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    e202:	791b      	ldrb	r3, [r3, #4]
	u8_t tmp[16];
	u8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    e204:	4811      	ldr	r0, [pc, #68]	; (e24c <bt_mesh_k3+0x58>)
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    e206:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
    e20a:	a902      	add	r1, sp, #8
    e20c:	f012 fdee 	bl	20dec <bt_mesh_s1>
	if (err) {
    e210:	b9b8      	cbnz	r0, e242 <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    e212:	4621      	mov	r1, r4
    e214:	ab06      	add	r3, sp, #24
    e216:	2210      	movs	r2, #16
    e218:	a802      	add	r0, sp, #8
    e21a:	f012 fddd 	bl	20dd8 <bt_mesh_aes_cmac_one>
	if (err) {
    e21e:	4604      	mov	r4, r0
    e220:	b960      	cbnz	r0, e23c <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    e222:	ab02      	add	r3, sp, #8
    e224:	2205      	movs	r2, #5
    e226:	4669      	mov	r1, sp
    e228:	a806      	add	r0, sp, #24
    e22a:	f012 fdd5 	bl	20dd8 <bt_mesh_aes_cmac_one>
	if (err) {
    e22e:	4604      	mov	r4, r0
    e230:	b920      	cbnz	r0, e23c <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    e232:	2208      	movs	r2, #8
    e234:	a904      	add	r1, sp, #16
    e236:	4628      	mov	r0, r5
    e238:	f011 f9e6 	bl	1f608 <memcpy>

	return 0;
}
    e23c:	4620      	mov	r0, r4
    e23e:	b00b      	add	sp, #44	; 0x2c
    e240:	bd30      	pop	{r4, r5, pc}
		return err;
    e242:	2401      	movs	r4, #1
    e244:	e7fa      	b.n	e23c <bt_mesh_k3+0x48>
    e246:	bf00      	nop
    e248:	000235c6 	.word	0x000235c6
    e24c:	000262b1 	.word	0x000262b1

0000e250 <bt_mesh_k4>:

int bt_mesh_k4(const u8_t n[16], u8_t out[1])
{
    e250:	b530      	push	{r4, r5, lr}
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
    e252:	4b11      	ldr	r3, [pc, #68]	; (e298 <bt_mesh_k4+0x48>)
{
    e254:	b08b      	sub	sp, #44	; 0x2c
    e256:	4605      	mov	r5, r0
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
    e258:	6818      	ldr	r0, [r3, #0]
    e25a:	9001      	str	r0, [sp, #4]
{
    e25c:	460c      	mov	r4, r1
	u8_t tmp[16];
	u8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    e25e:	480f      	ldr	r0, [pc, #60]	; (e29c <bt_mesh_k4+0x4c>)
    e260:	a902      	add	r1, sp, #8
    e262:	f012 fdc3 	bl	20dec <bt_mesh_s1>
	if (err) {
    e266:	b9a8      	cbnz	r0, e294 <bt_mesh_k4+0x44>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    e268:	ab06      	add	r3, sp, #24
    e26a:	2210      	movs	r2, #16
    e26c:	4629      	mov	r1, r5
    e26e:	a802      	add	r0, sp, #8
    e270:	f012 fdb2 	bl	20dd8 <bt_mesh_aes_cmac_one>
	if (err) {
    e274:	b960      	cbnz	r0, e290 <bt_mesh_k4+0x40>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    e276:	2204      	movs	r2, #4
    e278:	ab02      	add	r3, sp, #8
    e27a:	eb0d 0102 	add.w	r1, sp, r2
    e27e:	a806      	add	r0, sp, #24
    e280:	f012 fdaa 	bl	20dd8 <bt_mesh_aes_cmac_one>
	if (err) {
    e284:	b920      	cbnz	r0, e290 <bt_mesh_k4+0x40>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    e286:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e28a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e28e:	7023      	strb	r3, [r4, #0]

	return 0;
}
    e290:	b00b      	add	sp, #44	; 0x2c
    e292:	bd30      	pop	{r4, r5, pc}
		return err;
    e294:	2001      	movs	r0, #1
    e296:	e7fb      	b.n	e290 <bt_mesh_k4+0x40>
    e298:	000235cb 	.word	0x000235cb
    e29c:	000262b6 	.word	0x000262b6

0000e2a0 <bt_mesh_id128>:

int bt_mesh_id128(const u8_t n[16], const char *s, u8_t out[16])
{
    e2a0:	b530      	push	{r4, r5, lr}
    e2a2:	b087      	sub	sp, #28
    e2a4:	4604      	mov	r4, r0
    e2a6:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	u8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    e2a8:	a902      	add	r1, sp, #8
{
    e2aa:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    e2ac:	f012 fd9e 	bl	20dec <bt_mesh_s1>
	if (err) {
    e2b0:	b940      	cbnz	r0, e2c4 <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    e2b2:	9500      	str	r5, [sp, #0]
    e2b4:	4b04      	ldr	r3, [pc, #16]	; (e2c8 <bt_mesh_id128+0x28>)
    e2b6:	aa02      	add	r2, sp, #8
    e2b8:	2110      	movs	r1, #16
    e2ba:	4620      	mov	r0, r4
    e2bc:	f012 fdad 	bl	20e1a <bt_mesh_k1>
}
    e2c0:	b007      	add	sp, #28
    e2c2:	bd30      	pop	{r4, r5, pc}
		return err;
    e2c4:	2001      	movs	r0, #1
    e2c6:	e7fb      	b.n	e2c0 <bt_mesh_id128+0x20>
    e2c8:	000262a5 	.word	0x000262a5

0000e2cc <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

u8_t bt_mesh_fcs_calc(const u8_t *data, u8_t data_len)
{
    e2cc:	b510      	push	{r4, lr}
	u8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    e2ce:	4a06      	ldr	r2, [pc, #24]	; (e2e8 <bt_mesh_fcs_calc+0x1c>)
    e2d0:	4401      	add	r1, r0
	u8_t fcs = 0xff;
    e2d2:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    e2d4:	4288      	cmp	r0, r1
    e2d6:	d102      	bne.n	e2de <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    e2d8:	43d8      	mvns	r0, r3
}
    e2da:	b2c0      	uxtb	r0, r0
    e2dc:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    e2de:	f810 4b01 	ldrb.w	r4, [r0], #1
    e2e2:	4063      	eors	r3, r4
    e2e4:	5cd3      	ldrb	r3, [r2, r3]
    e2e6:	e7f5      	b.n	e2d4 <bt_mesh_fcs_calc+0x8>
    e2e8:	000262c5 	.word	0x000262c5

0000e2ec <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, u8_t received_fcs)
{
	const u8_t *data = buf->data;
    e2ec:	6802      	ldr	r2, [r0, #0]
	u16_t data_len = buf->len;
	u8_t fcs = 0xff;

	while (data_len--) {
    e2ee:	8880      	ldrh	r0, [r0, #4]
{
    e2f0:	b530      	push	{r4, r5, lr}
    e2f2:	4c08      	ldr	r4, [pc, #32]	; (e314 <bt_mesh_fcs_check+0x28>)
    e2f4:	4410      	add	r0, r2
	u8_t fcs = 0xff;
    e2f6:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    e2f8:	4282      	cmp	r2, r0
    e2fa:	d106      	bne.n	e30a <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    e2fc:	404b      	eors	r3, r1
    e2fe:	5ce0      	ldrb	r0, [r4, r3]
}
    e300:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    e304:	4258      	negs	r0, r3
    e306:	4158      	adcs	r0, r3
    e308:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    e30a:	f812 5b01 	ldrb.w	r5, [r2], #1
    e30e:	406b      	eors	r3, r5
    e310:	5ce3      	ldrb	r3, [r4, r3]
    e312:	e7f1      	b.n	e2f8 <bt_mesh_fcs_check+0xc>
    e314:	000262c5 	.word	0x000262c5

0000e318 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const u8_t virtual_label[16], u16_t *addr)
{
    e318:	b530      	push	{r4, r5, lr}
    e31a:	b089      	sub	sp, #36	; 0x24
    e31c:	4605      	mov	r5, r0
    e31e:	460c      	mov	r4, r1
	u8_t salt[16];
	u8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
    e320:	480e      	ldr	r0, [pc, #56]	; (e35c <bt_mesh_virtual_addr+0x44>)
    e322:	4669      	mov	r1, sp
    e324:	f012 fd62 	bl	20dec <bt_mesh_s1>
	if (err) {
    e328:	b9a8      	cbnz	r0, e356 <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
    e32a:	ab04      	add	r3, sp, #16
    e32c:	2210      	movs	r2, #16
    e32e:	4629      	mov	r1, r5
    e330:	4668      	mov	r0, sp
    e332:	f012 fd51 	bl	20dd8 <bt_mesh_aes_cmac_one>
	if (err) {
    e336:	b960      	cbnz	r0, e352 <bt_mesh_virtual_addr+0x3a>
	return ((u16_t)src[0] << 8) | src[1];
    e338:	f89d 201e 	ldrb.w	r2, [sp, #30]
    e33c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    e340:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
    e344:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    e34c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    e350:	8023      	strh	r3, [r4, #0]

	return 0;
}
    e352:	b009      	add	sp, #36	; 0x24
    e354:	bd30      	pop	{r4, r5, pc}
		return err;
    e356:	2001      	movs	r0, #1
    e358:	e7fb      	b.n	e352 <bt_mesh_virtual_addr+0x3a>
    e35a:	bf00      	nop
    e35c:	000262c0 	.word	0x000262c0

0000e360 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const u8_t dhkey[32], const u8_t conf_salt[16],
			  u8_t conf_key[16])
{
    e360:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
    e362:	4b04      	ldr	r3, [pc, #16]	; (e374 <bt_mesh_prov_conf_key+0x14>)
    e364:	9200      	str	r2, [sp, #0]
    e366:	460a      	mov	r2, r1
    e368:	2120      	movs	r1, #32
    e36a:	f012 fd56 	bl	20e1a <bt_mesh_k1>
}
    e36e:	b003      	add	sp, #12
    e370:	f85d fb04 	ldr.w	pc, [sp], #4
    e374:	000262bb 	.word	0x000262bb

0000e378 <model_send>:

static int model_send(struct bt_mesh_model *model,
		      struct bt_mesh_net_tx *tx, bool implicit_bind,
		      struct net_buf_simple *msg,
		      const struct bt_mesh_send_cb *cb, void *cb_data)
{
    e378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e37c:	4606      	mov	r6, r0
    e37e:	460d      	mov	r5, r1
    e380:	4691      	mov	r9, r2
    e382:	461c      	mov	r4, r3
    e384:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
	BT_DBG("net_idx 0x%04x app_idx 0x%04x dst 0x%04x", tx->ctx->net_idx,
	       tx->ctx->app_idx, tx->ctx->addr);
	BT_DBG("len %u: %s", msg->len, bt_hex(msg->data, msg->len));

	if (!bt_mesh_is_provisioned()) {
    e388:	f012 f9fe 	bl	20788 <bt_mesh_is_provisioned>
    e38c:	b988      	cbnz	r0, e3b2 <model_send+0x3a>
		BT_ERR("Local node is not yet provisioned");
    e38e:	2301      	movs	r3, #1
    e390:	f04f 0100 	mov.w	r1, #0
    e394:	f363 0107 	bfi	r1, r3, #0, #8
    e398:	4a2c      	ldr	r2, [pc, #176]	; (e44c <model_send+0xd4>)
    e39a:	4b2d      	ldr	r3, [pc, #180]	; (e450 <model_send+0xd8>)
    e39c:	482d      	ldr	r0, [pc, #180]	; (e454 <model_send+0xdc>)
    e39e:	1a9b      	subs	r3, r3, r2
    e3a0:	08db      	lsrs	r3, r3, #3
    e3a2:	f363 118f 	bfi	r1, r3, #6, #10
    e3a6:	f010 f84c 	bl	1e442 <log_0>
		return -EAGAIN;
    e3aa:	f06f 000a 	mvn.w	r0, #10
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
		return -EINVAL;
	}

	return bt_mesh_trans_send(tx, msg, cb, cb_data);
}
    e3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
    e3b2:	4620      	mov	r0, r4
    e3b4:	f014 f98e 	bl	226d4 <net_buf_simple_tailroom>
    e3b8:	2803      	cmp	r0, #3
    e3ba:	d810      	bhi.n	e3de <model_send+0x66>
		BT_ERR("Not enough tailroom for TransMIC");
    e3bc:	2301      	movs	r3, #1
    e3be:	f04f 0100 	mov.w	r1, #0
    e3c2:	f363 0107 	bfi	r1, r3, #0, #8
    e3c6:	4a21      	ldr	r2, [pc, #132]	; (e44c <model_send+0xd4>)
    e3c8:	4b21      	ldr	r3, [pc, #132]	; (e450 <model_send+0xd8>)
    e3ca:	4823      	ldr	r0, [pc, #140]	; (e458 <model_send+0xe0>)
    e3cc:	1a9b      	subs	r3, r3, r2
    e3ce:	08db      	lsrs	r3, r3, #3
    e3d0:	f363 118f 	bfi	r1, r3, #6, #10
    e3d4:	f010 f835 	bl	1e442 <log_0>
		return -EINVAL;
    e3d8:	f06f 0015 	mvn.w	r0, #21
    e3dc:	e7e7      	b.n	e3ae <model_send+0x36>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
    e3de:	88a3      	ldrh	r3, [r4, #4]
    e3e0:	2b44      	cmp	r3, #68	; 0x44
    e3e2:	d910      	bls.n	e406 <model_send+0x8e>
		BT_ERR("Too big message");
    e3e4:	2301      	movs	r3, #1
    e3e6:	f04f 0100 	mov.w	r1, #0
    e3ea:	f363 0107 	bfi	r1, r3, #0, #8
    e3ee:	4a17      	ldr	r2, [pc, #92]	; (e44c <model_send+0xd4>)
    e3f0:	4b17      	ldr	r3, [pc, #92]	; (e450 <model_send+0xd8>)
    e3f2:	481a      	ldr	r0, [pc, #104]	; (e45c <model_send+0xe4>)
    e3f4:	1a9b      	subs	r3, r3, r2
    e3f6:	08db      	lsrs	r3, r3, #3
    e3f8:	f363 118f 	bfi	r1, r3, #6, #10
    e3fc:	f010 f821 	bl	1e442 <log_0>
		return -EMSGSIZE;
    e400:	f06f 0023 	mvn.w	r0, #35	; 0x23
    e404:	e7d3      	b.n	e3ae <model_send+0x36>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
    e406:	f1b9 0f00 	cmp.w	r9, #0
    e40a:	d116      	bne.n	e43a <model_send+0xc2>
    e40c:	686b      	ldr	r3, [r5, #4]
    e40e:	8859      	ldrh	r1, [r3, #2]
		if (mod->keys[i] == key) {
    e410:	89b3      	ldrh	r3, [r6, #12]
    e412:	428b      	cmp	r3, r1
    e414:	d011      	beq.n	e43a <model_send+0xc2>
    e416:	89f3      	ldrh	r3, [r6, #14]
    e418:	428b      	cmp	r3, r1
    e41a:	d00e      	beq.n	e43a <model_send+0xc2>
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
    e41c:	2301      	movs	r3, #1
    e41e:	f04f 0200 	mov.w	r2, #0
    e422:	f363 0207 	bfi	r2, r3, #0, #8
    e426:	4809      	ldr	r0, [pc, #36]	; (e44c <model_send+0xd4>)
    e428:	4b09      	ldr	r3, [pc, #36]	; (e450 <model_send+0xd8>)
    e42a:	1a1b      	subs	r3, r3, r0
    e42c:	08db      	lsrs	r3, r3, #3
    e42e:	f363 128f 	bfi	r2, r3, #6, #10
    e432:	480b      	ldr	r0, [pc, #44]	; (e460 <model_send+0xe8>)
    e434:	f010 f812 	bl	1e45c <log_1>
    e438:	e7ce      	b.n	e3d8 <model_send+0x60>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    e43a:	4643      	mov	r3, r8
    e43c:	463a      	mov	r2, r7
    e43e:	4621      	mov	r1, r4
    e440:	4628      	mov	r0, r5
}
    e442:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    e446:	f7ff b9dd 	b.w	d804 <bt_mesh_trans_send>
    e44a:	bf00      	nop
    e44c:	000233ec 	.word	0x000233ec
    e450:	00023474 	.word	0x00023474
    e454:	00026566 	.word	0x00026566
    e458:	00026588 	.word	0x00026588
    e45c:	000265a9 	.word	0x000265a9
    e460:	000265b9 	.word	0x000265b9

0000e464 <mod_init>:
{
    e464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e466:	4604      	mov	r4, r0
	if (mod->pub) {
    e468:	6880      	ldr	r0, [r0, #8]
{
    e46a:	460f      	mov	r7, r1
    e46c:	4615      	mov	r5, r2
    e46e:	461e      	mov	r6, r3
	if (mod->pub) {
    e470:	b120      	cbz	r0, e47c <mod_init+0x18>
		mod->pub->mod = mod;
    e472:	f840 4b18 	str.w	r4, [r0], #24
		k_delayed_work_init(&mod->pub->timer, mod_publish);
    e476:	4914      	ldr	r1, [pc, #80]	; (e4c8 <mod_init+0x64>)
    e478:	f014 fd87 	bl	22f8a <k_delayed_work_init>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    e47c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e480:	60e3      	str	r3, [r4, #12]
	mod->elem_idx = elem - dev_comp->elem;
    e482:	4b12      	ldr	r3, [pc, #72]	; (e4cc <mod_init+0x68>)
    e484:	681b      	ldr	r3, [r3, #0]
    e486:	68db      	ldr	r3, [r3, #12]
    e488:	1afb      	subs	r3, r7, r3
    e48a:	111b      	asrs	r3, r3, #4
    e48c:	7123      	strb	r3, [r4, #4]
	if (vnd) {
    e48e:	4b10      	ldr	r3, [pc, #64]	; (e4d0 <mod_init+0x6c>)
    e490:	b12d      	cbz	r5, e49e <mod_init+0x3a>
		mod->mod_idx = mod - elem->vnd_models;
    e492:	68fa      	ldr	r2, [r7, #12]
    e494:	1aa2      	subs	r2, r4, r2
    e496:	1092      	asrs	r2, r2, #2
    e498:	4353      	muls	r3, r2
    e49a:	7163      	strb	r3, [r4, #5]
}
    e49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mod->mod_idx = mod - elem->models;
    e49e:	68ba      	ldr	r2, [r7, #8]
    e4a0:	4f0c      	ldr	r7, [pc, #48]	; (e4d4 <mod_init+0x70>)
    e4a2:	1aa2      	subs	r2, r4, r2
    e4a4:	1092      	asrs	r2, r2, #2
    e4a6:	4353      	muls	r3, r2
    e4a8:	7163      	strb	r3, [r4, #5]
		if (model_init[i].id == mod->id) {
    e4aa:	883a      	ldrh	r2, [r7, #0]
    e4ac:	8823      	ldrh	r3, [r4, #0]
    e4ae:	429a      	cmp	r2, r3
    e4b0:	d103      	bne.n	e4ba <mod_init+0x56>
			model_init[i].init(mod, primary);
    e4b2:	687b      	ldr	r3, [r7, #4]
    e4b4:	4631      	mov	r1, r6
    e4b6:	4620      	mov	r0, r4
    e4b8:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(model_init); i++) {
    e4ba:	3501      	adds	r5, #1
    e4bc:	2d03      	cmp	r5, #3
    e4be:	f107 0708 	add.w	r7, r7, #8
    e4c2:	d1f2      	bne.n	e4aa <mod_init+0x46>
    e4c4:	e7ea      	b.n	e49c <mod_init+0x38>
    e4c6:	bf00      	nop
    e4c8:	0000eac1 	.word	0x0000eac1
    e4cc:	20000ac4 	.word	0x20000ac4
    e4d0:	b6db6db7 	.word	0xb6db6db7
    e4d4:	00023a90 	.word	0x00023a90

0000e4d8 <bt_mesh_model_foreach>:
{
    e4d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    e4dc:	f8df a068 	ldr.w	sl, [pc, #104]	; e548 <bt_mesh_model_foreach+0x70>
{
    e4e0:	4607      	mov	r7, r0
    e4e2:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    e4e4:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
    e4e6:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
    e4ea:	f8da 3000 	ldr.w	r3, [sl]
    e4ee:	689a      	ldr	r2, [r3, #8]
    e4f0:	42aa      	cmp	r2, r5
    e4f2:	d802      	bhi.n	e4fa <bt_mesh_model_foreach+0x22>
}
    e4f4:	b002      	add	sp, #8
    e4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e4fa:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    e4fc:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e4fe:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    e502:	7923      	ldrb	r3, [r4, #4]
    e504:	42b3      	cmp	r3, r6
    e506:	dc05      	bgt.n	e514 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
    e508:	2600      	movs	r6, #0
    e50a:	7963      	ldrb	r3, [r4, #5]
    e50c:	42b3      	cmp	r3, r6
    e50e:	dc0e      	bgt.n	e52e <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
    e510:	3501      	adds	r5, #1
    e512:	e7ea      	b.n	e4ea <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
    e514:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    e516:	f8cd 8000 	str.w	r8, [sp]
    e51a:	fab5 f385 	clz	r3, r5
    e51e:	fb09 0006 	mla	r0, r9, r6, r0
    e522:	095b      	lsrs	r3, r3, #5
    e524:	2200      	movs	r2, #0
    e526:	4621      	mov	r1, r4
    e528:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
    e52a:	3601      	adds	r6, #1
    e52c:	e7e9      	b.n	e502 <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    e52e:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    e530:	f8cd 8000 	str.w	r8, [sp]
    e534:	fab5 f385 	clz	r3, r5
    e538:	fb09 0006 	mla	r0, r9, r6, r0
    e53c:	095b      	lsrs	r3, r3, #5
    e53e:	2201      	movs	r2, #1
    e540:	4621      	mov	r1, r4
    e542:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
    e544:	3601      	adds	r6, #1
    e546:	e7e0      	b.n	e50a <bt_mesh_model_foreach+0x32>
    e548:	20000ac4 	.word	0x20000ac4

0000e54c <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
    e54c:	6880      	ldr	r0, [r0, #8]
    e54e:	b178      	cbz	r0, e570 <bt_mesh_model_pub_period_get+0x24>
	switch (mod->pub->period >> 6) {
    e550:	7a83      	ldrb	r3, [r0, #10]
    e552:	099a      	lsrs	r2, r3, #6
    e554:	2a02      	cmp	r2, #2
    e556:	d012      	beq.n	e57e <bt_mesh_model_pub_period_get+0x32>
    e558:	2a03      	cmp	r2, #3
    e55a:	d015      	beq.n	e588 <bt_mesh_model_pub_period_get+0x3c>
    e55c:	2a01      	cmp	r2, #1
    e55e:	d008      	beq.n	e572 <bt_mesh_model_pub_period_get+0x26>
		period = K_MSEC((mod->pub->period & BIT_MASK(6)) * 100);
    e560:	2264      	movs	r2, #100	; 0x64
    e562:	fb13 f302 	smulbb	r3, r3, r2
	return period >> mod->pub->period_div;
    e566:	7ac0      	ldrb	r0, [r0, #11]
    e568:	f000 000f 	and.w	r0, r0, #15
    e56c:	fa43 f000 	asr.w	r0, r3, r0
}
    e570:	4770      	bx	lr
		period = K_SECONDS(mod->pub->period & BIT_MASK(6));
    e572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
    e57a:	4353      	muls	r3, r2
		break;
    e57c:	e7f3      	b.n	e566 <bt_mesh_model_pub_period_get+0x1a>
		period = K_SECONDS((mod->pub->period & BIT_MASK(6)) * 10);
    e57e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e582:	f242 7210 	movw	r2, #10000	; 0x2710
    e586:	e7f8      	b.n	e57a <bt_mesh_model_pub_period_get+0x2e>
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
    e588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e58c:	4a00      	ldr	r2, [pc, #0]	; (e590 <bt_mesh_model_pub_period_get+0x44>)
    e58e:	e7f4      	b.n	e57a <bt_mesh_model_pub_period_get+0x2e>
    e590:	000927c0 	.word	0x000927c0

0000e594 <publish_sent>:
{
    e594:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
    e596:	688e      	ldr	r6, [r1, #8]
    e598:	7af3      	ldrb	r3, [r6, #11]
    e59a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
    e59e:	460d      	mov	r5, r1
	if (mod->pub->count) {
    e5a0:	d00b      	beq.n	e5ba <publish_sent+0x26>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
    e5a2:	7a72      	ldrb	r2, [r6, #9]
    e5a4:	08d0      	lsrs	r0, r2, #3
    e5a6:	2232      	movs	r2, #50	; 0x32
    e5a8:	fb00 2202 	mla	r2, r0, r2, r2
		k_delayed_work_submit(&mod->pub->timer, delay);
    e5ac:	68a9      	ldr	r1, [r5, #8]
    e5ae:	4812      	ldr	r0, [pc, #72]	; (e5f8 <publish_sent+0x64>)
    e5b0:	3118      	adds	r1, #24
}
    e5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e5b6:	f00d bfbf 	b.w	1c538 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
    e5ba:	4608      	mov	r0, r1
    e5bc:	f7ff ffc6 	bl	e54c <bt_mesh_model_pub_period_get>
	if (!period) {
    e5c0:	4604      	mov	r4, r0
    e5c2:	b1c0      	cbz	r0, e5f6 <publish_sent+0x62>
    e5c4:	f014 fd3a 	bl	2303c <z_impl_k_uptime_get_32>
	elapsed = k_uptime_get_32() - pub->period_start;
    e5c8:	68f2      	ldr	r2, [r6, #12]
    e5ca:	1a83      	subs	r3, r0, r2
	if (elapsed > period) {
    e5cc:	429c      	cmp	r4, r3
    e5ce:	d20f      	bcs.n	e5f0 <publish_sent+0x5c>
		BT_WARN("Publication sending took longer than the period");
    e5d0:	2302      	movs	r3, #2
    e5d2:	f04f 0100 	mov.w	r1, #0
    e5d6:	4a09      	ldr	r2, [pc, #36]	; (e5fc <publish_sent+0x68>)
    e5d8:	4809      	ldr	r0, [pc, #36]	; (e600 <publish_sent+0x6c>)
    e5da:	f363 0107 	bfi	r1, r3, #0, #8
    e5de:	4b09      	ldr	r3, [pc, #36]	; (e604 <publish_sent+0x70>)
    e5e0:	1a9b      	subs	r3, r3, r2
    e5e2:	08db      	lsrs	r3, r3, #3
    e5e4:	f363 118f 	bfi	r1, r3, #6, #10
    e5e8:	f00f ff2b 	bl	1e442 <log_0>
		return K_MSEC(1);
    e5ec:	2201      	movs	r2, #1
    e5ee:	e7dd      	b.n	e5ac <publish_sent+0x18>
	return period - elapsed;
    e5f0:	4414      	add	r4, r2
	if (delay) {
    e5f2:	1a22      	subs	r2, r4, r0
    e5f4:	d1da      	bne.n	e5ac <publish_sent+0x18>
}
    e5f6:	bd70      	pop	{r4, r5, r6, pc}
    e5f8:	20001c74 	.word	0x20001c74
    e5fc:	000233ec 	.word	0x000233ec
    e600:	000265da 	.word	0x000265da
    e604:	00023474 	.word	0x00023474

0000e608 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
    e608:	4b03      	ldr	r3, [pc, #12]	; (e618 <bt_mesh_model_elem+0x10>)
    e60a:	7900      	ldrb	r0, [r0, #4]
    e60c:	681b      	ldr	r3, [r3, #0]
    e60e:	68db      	ldr	r3, [r3, #12]
}
    e610:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    e614:	4770      	bx	lr
    e616:	bf00      	nop
    e618:	20000ac4 	.word	0x20000ac4

0000e61c <bt_mesh_model_get>:
{
    e61c:	b538      	push	{r3, r4, r5, lr}
    e61e:	4604      	mov	r4, r0
    e620:	4610      	mov	r0, r2
	if (elem_idx >= dev_comp->elem_count) {
    e622:	4a23      	ldr	r2, [pc, #140]	; (e6b0 <bt_mesh_model_get+0x94>)
    e624:	6812      	ldr	r2, [r2, #0]
    e626:	6895      	ldr	r5, [r2, #8]
    e628:	42a9      	cmp	r1, r5
{
    e62a:	460b      	mov	r3, r1
	if (elem_idx >= dev_comp->elem_count) {
    e62c:	d30f      	bcc.n	e64e <bt_mesh_model_get+0x32>
		BT_ERR("Invalid element index %u", elem_idx);
    e62e:	2301      	movs	r3, #1
    e630:	f04f 0200 	mov.w	r2, #0
    e634:	f363 0207 	bfi	r2, r3, #0, #8
    e638:	481e      	ldr	r0, [pc, #120]	; (e6b4 <bt_mesh_model_get+0x98>)
    e63a:	4b1f      	ldr	r3, [pc, #124]	; (e6b8 <bt_mesh_model_get+0x9c>)
    e63c:	1a1b      	subs	r3, r3, r0
    e63e:	08db      	lsrs	r3, r3, #3
    e640:	481e      	ldr	r0, [pc, #120]	; (e6bc <bt_mesh_model_get+0xa0>)
    e642:	f363 128f 	bfi	r2, r3, #6, #10
    e646:	f00f ff09 	bl	1e45c <log_1>
		return NULL;
    e64a:	2000      	movs	r0, #0
}
    e64c:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
    e64e:	68d1      	ldr	r1, [r2, #12]
    e650:	eb01 1103 	add.w	r1, r1, r3, lsl #4
	if (vnd) {
    e654:	b1b4      	cbz	r4, e684 <bt_mesh_model_get+0x68>
		if (mod_idx >= elem->vnd_model_count) {
    e656:	794b      	ldrb	r3, [r1, #5]
    e658:	4283      	cmp	r3, r0
    e65a:	d80d      	bhi.n	e678 <bt_mesh_model_get+0x5c>
			BT_ERR("Invalid vendor model index %u", mod_idx);
    e65c:	2301      	movs	r3, #1
    e65e:	f04f 0200 	mov.w	r2, #0
    e662:	f363 0207 	bfi	r2, r3, #0, #8
    e666:	4913      	ldr	r1, [pc, #76]	; (e6b4 <bt_mesh_model_get+0x98>)
    e668:	4b13      	ldr	r3, [pc, #76]	; (e6b8 <bt_mesh_model_get+0x9c>)
    e66a:	1a5b      	subs	r3, r3, r1
    e66c:	08db      	lsrs	r3, r3, #3
    e66e:	4601      	mov	r1, r0
    e670:	f363 128f 	bfi	r2, r3, #6, #10
    e674:	4812      	ldr	r0, [pc, #72]	; (e6c0 <bt_mesh_model_get+0xa4>)
    e676:	e7e6      	b.n	e646 <bt_mesh_model_get+0x2a>
		return &elem->vnd_models[mod_idx];
    e678:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    e67c:	68c8      	ldr	r0, [r1, #12]
		return &elem->models[mod_idx];
    e67e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e682:	e7e3      	b.n	e64c <bt_mesh_model_get+0x30>
		if (mod_idx >= elem->model_count) {
    e684:	790b      	ldrb	r3, [r1, #4]
    e686:	4283      	cmp	r3, r0
    e688:	d80d      	bhi.n	e6a6 <bt_mesh_model_get+0x8a>
			BT_ERR("Invalid SIG model index %u", mod_idx);
    e68a:	2301      	movs	r3, #1
    e68c:	f04f 0200 	mov.w	r2, #0
    e690:	f363 0207 	bfi	r2, r3, #0, #8
    e694:	4907      	ldr	r1, [pc, #28]	; (e6b4 <bt_mesh_model_get+0x98>)
    e696:	4b08      	ldr	r3, [pc, #32]	; (e6b8 <bt_mesh_model_get+0x9c>)
    e698:	1a5b      	subs	r3, r3, r1
    e69a:	08db      	lsrs	r3, r3, #3
    e69c:	4601      	mov	r1, r0
    e69e:	f363 128f 	bfi	r2, r3, #6, #10
    e6a2:	4808      	ldr	r0, [pc, #32]	; (e6c4 <bt_mesh_model_get+0xa8>)
    e6a4:	e7cf      	b.n	e646 <bt_mesh_model_get+0x2a>
		return &elem->models[mod_idx];
    e6a6:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    e6aa:	6888      	ldr	r0, [r1, #8]
    e6ac:	e7e7      	b.n	e67e <bt_mesh_model_get+0x62>
    e6ae:	bf00      	nop
    e6b0:	20000ac4 	.word	0x20000ac4
    e6b4:	000233ec 	.word	0x000233ec
    e6b8:	00023474 	.word	0x00023474
    e6bc:	000263d4 	.word	0x000263d4
    e6c0:	000263ed 	.word	0x000263ed
    e6c4:	0002640b 	.word	0x0002640b

0000e6c8 <bt_mesh_comp_register>:
{
    e6c8:	b508      	push	{r3, lr}
	if (!comp->elem_count) {
    e6ca:	6883      	ldr	r3, [r0, #8]
    e6cc:	b13b      	cbz	r3, e6de <bt_mesh_comp_register+0x16>
	dev_comp = comp;
    e6ce:	4b05      	ldr	r3, [pc, #20]	; (e6e4 <bt_mesh_comp_register+0x1c>)
	bt_mesh_model_foreach(mod_init, NULL);
    e6d0:	2100      	movs	r1, #0
	dev_comp = comp;
    e6d2:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    e6d4:	4804      	ldr	r0, [pc, #16]	; (e6e8 <bt_mesh_comp_register+0x20>)
    e6d6:	f7ff feff 	bl	e4d8 <bt_mesh_model_foreach>
	return 0;
    e6da:	2000      	movs	r0, #0
}
    e6dc:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e6de:	f06f 0015 	mvn.w	r0, #21
    e6e2:	e7fb      	b.n	e6dc <bt_mesh_comp_register+0x14>
    e6e4:	20000ac4 	.word	0x20000ac4
    e6e8:	0000e465 	.word	0x0000e465

0000e6ec <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
    e6ec:	4b08      	ldr	r3, [pc, #32]	; (e710 <bt_mesh_comp_provision+0x24>)
{
    e6ee:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    e6f0:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
    e6f2:	4b08      	ldr	r3, [pc, #32]	; (e714 <bt_mesh_comp_provision+0x28>)
    e6f4:	6819      	ldr	r1, [r3, #0]
    e6f6:	688c      	ldr	r4, [r1, #8]
    e6f8:	2300      	movs	r3, #0
    e6fa:	18c2      	adds	r2, r0, r3
    e6fc:	42a3      	cmp	r3, r4
    e6fe:	b292      	uxth	r2, r2
    e700:	d100      	bne.n	e704 <bt_mesh_comp_provision+0x18>
}
    e702:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    e704:	011d      	lsls	r5, r3, #4
    e706:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    e708:	3301      	adds	r3, #1
		elem->addr = addr++;
    e70a:	5372      	strh	r2, [r6, r5]
		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
    e70c:	e7f5      	b.n	e6fa <bt_mesh_comp_provision+0xe>
    e70e:	bf00      	nop
    e710:	20001cfa 	.word	0x20001cfa
    e714:	20000ac4 	.word	0x20000ac4

0000e718 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    e718:	4b02      	ldr	r3, [pc, #8]	; (e724 <bt_mesh_comp_unprovision+0xc>)
	bt_mesh_model_foreach(mod_init, NULL);
    e71a:	4803      	ldr	r0, [pc, #12]	; (e728 <bt_mesh_comp_unprovision+0x10>)
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    e71c:	2100      	movs	r1, #0
    e71e:	8019      	strh	r1, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    e720:	f7ff beda 	b.w	e4d8 <bt_mesh_model_foreach>
    e724:	20001cfa 	.word	0x20001cfa
    e728:	0000e465 	.word	0x0000e465

0000e72c <bt_mesh_primary_addr>:
}
    e72c:	4b01      	ldr	r3, [pc, #4]	; (e734 <bt_mesh_primary_addr+0x8>)
    e72e:	8818      	ldrh	r0, [r3, #0]
    e730:	4770      	bx	lr
    e732:	bf00      	nop
    e734:	20001cfa 	.word	0x20001cfa

0000e738 <bt_mesh_elem_find>:
	for (i = 0; i < dev_comp->elem_count; i++) {
    e738:	4b1e      	ldr	r3, [pc, #120]	; (e7b4 <bt_mesh_elem_find+0x7c>)
{
    e73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    e73e:	681d      	ldr	r5, [r3, #0]
    e740:	68af      	ldr	r7, [r5, #8]
    e742:	2200      	movs	r2, #0
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    e744:	f480 4c00 	eor.w	ip, r0, #32768	; 0x8000
		model = &elem->models[i];
    e748:	261c      	movs	r6, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
    e74a:	42ba      	cmp	r2, r7
    e74c:	d101      	bne.n	e752 <bt_mesh_elem_find+0x1a>
	return NULL;
    e74e:	2300      	movs	r3, #0
    e750:	e02d      	b.n	e7ae <bt_mesh_elem_find+0x76>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e752:	68ec      	ldr	r4, [r5, #12]
    e754:	0111      	lsls	r1, r2, #4
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    e756:	f5bc 4ffe 	cmp.w	ip, #32512	; 0x7f00
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e75a:	eb04 0301 	add.w	r3, r4, r1
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    e75e:	d823      	bhi.n	e7a8 <bt_mesh_elem_find+0x70>
	for (i = 0; i < elem->model_count; i++) {
    e760:	f893 e004 	ldrb.w	lr, [r3, #4]
    e764:	2100      	movs	r1, #0
    e766:	4571      	cmp	r1, lr
    e768:	db06      	blt.n	e778 <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
    e76a:	f893 e005 	ldrb.w	lr, [r3, #5]
    e76e:	2100      	movs	r1, #0
    e770:	4571      	cmp	r1, lr
    e772:	db0d      	blt.n	e790 <bt_mesh_elem_find+0x58>
	for (i = 0; i < dev_comp->elem_count; i++) {
    e774:	3201      	adds	r2, #1
    e776:	e7e8      	b.n	e74a <bt_mesh_elem_find+0x12>
		model = &elem->models[i];
    e778:	689c      	ldr	r4, [r3, #8]
    e77a:	fb06 4401 	mla	r4, r6, r1, r4
		if (mod->groups[i] == addr) {
    e77e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
    e782:	4580      	cmp	r8, r0
    e784:	d013      	beq.n	e7ae <bt_mesh_elem_find+0x76>
    e786:	8a64      	ldrh	r4, [r4, #18]
    e788:	4284      	cmp	r4, r0
    e78a:	d010      	beq.n	e7ae <bt_mesh_elem_find+0x76>
	for (i = 0; i < elem->model_count; i++) {
    e78c:	3101      	adds	r1, #1
    e78e:	e7ea      	b.n	e766 <bt_mesh_elem_find+0x2e>
		model = &elem->vnd_models[i];
    e790:	68dc      	ldr	r4, [r3, #12]
    e792:	fb06 4401 	mla	r4, r6, r1, r4
		if (mod->groups[i] == addr) {
    e796:	f8b4 8010 	ldrh.w	r8, [r4, #16]
    e79a:	4580      	cmp	r8, r0
    e79c:	d007      	beq.n	e7ae <bt_mesh_elem_find+0x76>
    e79e:	8a64      	ldrh	r4, [r4, #18]
    e7a0:	4284      	cmp	r4, r0
    e7a2:	d004      	beq.n	e7ae <bt_mesh_elem_find+0x76>
	for (i = 0; i < elem->vnd_model_count; i++) {
    e7a4:	3101      	adds	r1, #1
    e7a6:	e7e3      	b.n	e770 <bt_mesh_elem_find+0x38>
		} else if (elem->addr == addr) {
    e7a8:	5a61      	ldrh	r1, [r4, r1]
    e7aa:	4281      	cmp	r1, r0
    e7ac:	d1e2      	bne.n	e774 <bt_mesh_elem_find+0x3c>
}
    e7ae:	4618      	mov	r0, r3
    e7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7b4:	20000ac4 	.word	0x20000ac4

0000e7b8 <bt_mesh_elem_count>:
	return dev_comp->elem_count;
    e7b8:	4b01      	ldr	r3, [pc, #4]	; (e7c0 <bt_mesh_elem_count+0x8>)
    e7ba:	681b      	ldr	r3, [r3, #0]
}
    e7bc:	7a18      	ldrb	r0, [r3, #8]
    e7be:	4770      	bx	lr
    e7c0:	20000ac4 	.word	0x20000ac4

0000e7c4 <bt_mesh_model_recv>:
{
    e7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    e7c8:	680b      	ldr	r3, [r1, #0]
    e7ca:	4e67      	ldr	r6, [pc, #412]	; (e968 <bt_mesh_model_recv+0x1a4>)
    e7cc:	781b      	ldrb	r3, [r3, #0]
{
    e7ce:	460c      	mov	r4, r1
    e7d0:	4966      	ldr	r1, [pc, #408]	; (e96c <bt_mesh_model_recv+0x1a8>)
	switch (buf->data[0] >> 6) {
    e7d2:	099a      	lsrs	r2, r3, #6
    e7d4:	1a76      	subs	r6, r6, r1
    e7d6:	2a02      	cmp	r2, #2
{
    e7d8:	b085      	sub	sp, #20
    e7da:	4683      	mov	fp, r0
    e7dc:	f3c6 06c9 	ubfx	r6, r6, #3, #10
	switch (buf->data[0] >> 6) {
    e7e0:	d02b      	beq.n	e83a <bt_mesh_model_recv+0x76>
    e7e2:	2a03      	cmp	r2, #3
    e7e4:	d039      	beq.n	e85a <bt_mesh_model_recv+0x96>
		if (buf->data[0] == 0x7f) {
    e7e6:	2b7f      	cmp	r3, #127	; 0x7f
    e7e8:	d116      	bne.n	e818 <bt_mesh_model_recv+0x54>
			BT_ERR("Ignoring RFU OpCode");
    e7ea:	f04f 0100 	mov.w	r1, #0
    e7ee:	2301      	movs	r3, #1
    e7f0:	f363 0107 	bfi	r1, r3, #0, #8
    e7f4:	485e      	ldr	r0, [pc, #376]	; (e970 <bt_mesh_model_recv+0x1ac>)
    e7f6:	f366 118f 	bfi	r1, r6, #6, #10
			BT_ERR("Too short payload for 2-octet OpCode");
    e7fa:	f00f fe22 	bl	1e442 <log_0>
		BT_WARN("Unable to decode OpCode");
    e7fe:	2302      	movs	r3, #2
    e800:	f04f 0100 	mov.w	r1, #0
    e804:	f363 0107 	bfi	r1, r3, #0, #8
    e808:	485a      	ldr	r0, [pc, #360]	; (e974 <bt_mesh_model_recv+0x1b0>)
    e80a:	f366 118f 	bfi	r1, r6, #6, #10
}
    e80e:	b005      	add	sp, #20
    e810:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
    e814:	f00f be15 	b.w	1e442 <log_0>
		*opcode = net_buf_simple_pull_u8(buf);
    e818:	4620      	mov	r0, r4
    e81a:	f013 ff33 	bl	22684 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    e81e:	4607      	mov	r7, r0
			op->func(model, &rx->ctx, buf);
    e820:	f10b 0304 	add.w	r3, fp, #4
		op = find_op(models, count, rx->ctx.recv_dst, rx->ctx.app_idx,
    e824:	f04f 0800 	mov.w	r8, #0
			op->func(model, &rx->ctx, buf);
    e828:	9302      	str	r3, [sp, #8]
	for (i = 0; i < dev_comp->elem_count; i++) {
    e82a:	4b53      	ldr	r3, [pc, #332]	; (e978 <bt_mesh_model_recv+0x1b4>)
    e82c:	681b      	ldr	r3, [r3, #0]
    e82e:	689a      	ldr	r2, [r3, #8]
    e830:	4542      	cmp	r2, r8
    e832:	d828      	bhi.n	e886 <bt_mesh_model_recv+0xc2>
}
    e834:	b005      	add	sp, #20
    e836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    e83a:	88a3      	ldrh	r3, [r4, #4]
    e83c:	2b01      	cmp	r3, #1
    e83e:	d808      	bhi.n	e852 <bt_mesh_model_recv+0x8e>
			BT_ERR("Too short payload for 2-octet OpCode");
    e840:	f04f 0100 	mov.w	r1, #0
    e844:	2301      	movs	r3, #1
    e846:	f363 0107 	bfi	r1, r3, #0, #8
    e84a:	f366 118f 	bfi	r1, r6, #6, #10
    e84e:	484b      	ldr	r0, [pc, #300]	; (e97c <bt_mesh_model_recv+0x1b8>)
    e850:	e7d3      	b.n	e7fa <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_be16(buf);
    e852:	4620      	mov	r0, r4
    e854:	f013 ff26 	bl	226a4 <net_buf_simple_pull_be16>
    e858:	e7e1      	b.n	e81e <bt_mesh_model_recv+0x5a>
		if (buf->len < 3) {
    e85a:	88a3      	ldrh	r3, [r4, #4]
    e85c:	2b02      	cmp	r3, #2
    e85e:	d808      	bhi.n	e872 <bt_mesh_model_recv+0xae>
			BT_ERR("Too short payload for 3-octet OpCode");
    e860:	f04f 0100 	mov.w	r1, #0
    e864:	2301      	movs	r3, #1
    e866:	f363 0107 	bfi	r1, r3, #0, #8
    e86a:	f366 118f 	bfi	r1, r6, #6, #10
    e86e:	4844      	ldr	r0, [pc, #272]	; (e980 <bt_mesh_model_recv+0x1bc>)
    e870:	e7c3      	b.n	e7fa <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    e872:	4620      	mov	r0, r4
    e874:	f013 ff06 	bl	22684 <net_buf_simple_pull_u8>
    e878:	4607      	mov	r7, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    e87a:	4620      	mov	r0, r4
    e87c:	f013 ff0a 	bl	22694 <net_buf_simple_pull_le16>
    e880:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
		return 0;
    e884:	e7cc      	b.n	e820 <bt_mesh_model_recv+0x5c>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    e886:	f8bb 000a 	ldrh.w	r0, [fp, #10]
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e88a:	68db      	ldr	r3, [r3, #12]
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    e88c:	b201      	sxth	r1, r0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e88e:	ea4f 1208 	mov.w	r2, r8, lsl #4
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    e892:	2900      	cmp	r1, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e894:	eb03 0a02 	add.w	sl, r3, r2
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    e898:	dd0a      	ble.n	e8b0 <bt_mesh_model_recv+0xec>
			if (elem->addr != rx->ctx.recv_dst) {
    e89a:	5a9b      	ldrh	r3, [r3, r2]
    e89c:	4283      	cmp	r3, r0
    e89e:	d113      	bne.n	e8c8 <bt_mesh_model_recv+0x104>
		if (opcode < 0x10000) {
    e8a0:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
			models = elem->vnd_models;
    e8a4:	e9da 3502 	ldrd	r3, r5, [sl, #8]
		if (opcode < 0x10000) {
    e8a8:	d311      	bcc.n	e8ce <bt_mesh_model_recv+0x10a>
			count = elem->vnd_model_count;
    e8aa:	f89a c005 	ldrb.w	ip, [sl, #5]
    e8ae:	e011      	b.n	e8d4 <bt_mesh_model_recv+0x110>
		} else if (BT_MESH_ADDR_IS_GROUP(rx->ctx.recv_dst) ||
    e8b0:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    e8b4:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
    e8b8:	d9f2      	bls.n	e8a0 <bt_mesh_model_recv+0xdc>
		} else if (i != 0 ||
    e8ba:	f1b8 0f00 	cmp.w	r8, #0
    e8be:	d103      	bne.n	e8c8 <bt_mesh_model_recv+0x104>
			   !bt_mesh_fixed_group_match(rx->ctx.recv_dst)) {
    e8c0:	f012 fc74 	bl	211ac <bt_mesh_fixed_group_match>
		} else if (i != 0 ||
    e8c4:	2800      	cmp	r0, #0
    e8c6:	d1eb      	bne.n	e8a0 <bt_mesh_model_recv+0xdc>
	for (i = 0; i < dev_comp->elem_count; i++) {
    e8c8:	f108 0801 	add.w	r8, r8, #1
    e8cc:	e7ad      	b.n	e82a <bt_mesh_model_recv+0x66>
			count = elem->model_count;
    e8ce:	f89a c004 	ldrb.w	ip, [sl, #4]
			models = elem->models;
    e8d2:	461d      	mov	r5, r3
		op = find_op(models, count, rx->ctx.recv_dst, rx->ctx.app_idx,
    e8d4:	f8bb 000a 	ldrh.w	r0, [fp, #10]
    e8d8:	f8bb e006 	ldrh.w	lr, [fp, #6]
    e8dc:	2200      	movs	r2, #0
		if (BT_MESH_ADDR_IS_GROUP(dst) ||
    e8de:	f480 4a00 	eor.w	sl, r0, #32768	; 0x8000
	for (i = 0U; i < model_count; i++) {
    e8e2:	b2d3      	uxtb	r3, r2
    e8e4:	459c      	cmp	ip, r3
    e8e6:	d9ef      	bls.n	e8c8 <bt_mesh_model_recv+0x104>
		if (BT_MESH_ADDR_IS_GROUP(dst) ||
    e8e8:	f5ba 4ffe 	cmp.w	sl, #32512	; 0x7f00
    e8ec:	d805      	bhi.n	e8fa <bt_mesh_model_recv+0x136>
		if (mod->groups[i] == addr) {
    e8ee:	8a2b      	ldrh	r3, [r5, #16]
    e8f0:	4283      	cmp	r3, r0
    e8f2:	d002      	beq.n	e8fa <bt_mesh_model_recv+0x136>
    e8f4:	8a6b      	ldrh	r3, [r5, #18]
    e8f6:	4283      	cmp	r3, r0
    e8f8:	d108      	bne.n	e90c <bt_mesh_model_recv+0x148>
		if (mod->keys[i] == key) {
    e8fa:	89ab      	ldrh	r3, [r5, #12]
    e8fc:	4573      	cmp	r3, lr
    e8fe:	d002      	beq.n	e906 <bt_mesh_model_recv+0x142>
    e900:	89eb      	ldrh	r3, [r5, #14]
    e902:	4573      	cmp	r3, lr
    e904:	d102      	bne.n	e90c <bt_mesh_model_recv+0x148>
		for (op = (*model)->op; op->func; op++) {
    e906:	696b      	ldr	r3, [r5, #20]
    e908:	6899      	ldr	r1, [r3, #8]
    e90a:	b911      	cbnz	r1, e912 <bt_mesh_model_recv+0x14e>
    e90c:	3201      	adds	r2, #1
    e90e:	351c      	adds	r5, #28
    e910:	e7e7      	b.n	e8e2 <bt_mesh_model_recv+0x11e>
			if (op->opcode == opcode) {
    e912:	6819      	ldr	r1, [r3, #0]
    e914:	42b9      	cmp	r1, r7
    e916:	d015      	beq.n	e944 <bt_mesh_model_recv+0x180>
		for (op = (*model)->op; op->func; op++) {
    e918:	330c      	adds	r3, #12
    e91a:	e7f5      	b.n	e908 <bt_mesh_model_recv+0x144>
	state->offset = net_buf_simple_headroom(buf);
    e91c:	4620      	mov	r0, r4
    e91e:	9303      	str	r3, [sp, #12]
    e920:	f013 fed4 	bl	226cc <net_buf_simple_headroom>
	state->len = buf->len;
    e924:	88a3      	ldrh	r3, [r4, #4]
    e926:	9301      	str	r3, [sp, #4]
			op->func(model, &rx->ctx, buf);
    e928:	9b03      	ldr	r3, [sp, #12]
    e92a:	9902      	ldr	r1, [sp, #8]
    e92c:	689b      	ldr	r3, [r3, #8]
	state->offset = net_buf_simple_headroom(buf);
    e92e:	4682      	mov	sl, r0
    e930:	4622      	mov	r2, r4
    e932:	4628      	mov	r0, r5
    e934:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    e936:	68a3      	ldr	r3, [r4, #8]
    e938:	fa13 f38a 	uxtah	r3, r3, sl
    e93c:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
    e93e:	9b01      	ldr	r3, [sp, #4]
    e940:	80a3      	strh	r3, [r4, #4]
    e942:	e7c1      	b.n	e8c8 <bt_mesh_model_recv+0x104>
			if (buf->len < op->min_len) {
    e944:	88a1      	ldrh	r1, [r4, #4]
    e946:	685a      	ldr	r2, [r3, #4]
    e948:	4291      	cmp	r1, r2
    e94a:	d2e7      	bcs.n	e91c <bt_mesh_model_recv+0x158>
				BT_ERR("Too short message for OpCode 0x%08x",
    e94c:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    e950:	f043 0301 	orr.w	r3, r3, #1
    e954:	f363 0907 	bfi	r9, r3, #0, #8
    e958:	f366 198f 	bfi	r9, r6, #6, #10
    e95c:	464a      	mov	r2, r9
    e95e:	4639      	mov	r1, r7
    e960:	4808      	ldr	r0, [pc, #32]	; (e984 <bt_mesh_model_recv+0x1c0>)
    e962:	f00f fd7b 	bl	1e45c <log_1>
				continue;
    e966:	e7af      	b.n	e8c8 <bt_mesh_model_recv+0x104>
    e968:	00023474 	.word	0x00023474
    e96c:	000233ec 	.word	0x000233ec
    e970:	0002646e 	.word	0x0002646e
    e974:	000264cc 	.word	0x000264cc
    e978:	20000ac4 	.word	0x20000ac4
    e97c:	00026482 	.word	0x00026482
    e980:	000264a7 	.word	0x000264a7
    e984:	000264e4 	.word	0x000264e4

0000e988 <bt_mesh_model_publish>:

	return model_send(model, &tx, false, msg, cb, cb_data);
}

int bt_mesh_model_publish(struct bt_mesh_model *model)
{
    e988:	b570      	push	{r4, r5, r6, lr}
    e98a:	b09e      	sub	sp, #120	; 0x78
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    e98c:	ab0c      	add	r3, sp, #48	; 0x30
    e98e:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
    e992:	e9cd 2307 	strd	r2, r3, [sp, #28]
    e996:	9306      	str	r3, [sp, #24]
	struct bt_mesh_model_pub *pub = model->pub;
	struct bt_mesh_app_key *key;
	struct bt_mesh_msg_ctx ctx = {
    e998:	aa03      	add	r2, sp, #12
    e99a:	2300      	movs	r3, #0
	};
	struct bt_mesh_net_tx tx = {
    e99c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	struct bt_mesh_model_pub *pub = model->pub;
    e9a0:	6884      	ldr	r4, [r0, #8]
	struct bt_mesh_msg_ctx ctx = {
    e9a2:	f8ad 3014 	strh.w	r3, [sp, #20]
    e9a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
	struct bt_mesh_net_tx tx = {
    e9aa:	9309      	str	r3, [sp, #36]	; 0x24
{
    e9ac:	4606      	mov	r6, r0
		.ctx = &ctx,
		.src = bt_mesh_model_elem(model)->addr,
    e9ae:	f7ff fe2b 	bl	e608 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    e9b2:	8803      	ldrh	r3, [r0, #0]
    e9b4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
    e9b8:	f002 f8f6 	bl	10ba8 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    e9bc:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	};
	int err;

	BT_DBG("");

	if (!pub) {
    e9c0:	2c00      	cmp	r4, #0
    e9c2:	d06f      	beq.n	eaa4 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x44>
		return -ENOTSUP;
	}

	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    e9c4:	88a3      	ldrh	r3, [r4, #4]
    e9c6:	b923      	cbnz	r3, e9d2 <bt_mesh_model_publish+0x4a>
		return -EADDRNOTAVAIL;
    e9c8:	f06f 0530 	mvn.w	r5, #48	; 0x30
		publish_sent(err, model);
		return err;
	}

	return 0;
}
    e9cc:	4628      	mov	r0, r5
    e9ce:	b01e      	add	sp, #120	; 0x78
    e9d0:	bd70      	pop	{r4, r5, r6, pc}
	key = bt_mesh_app_key_find(pub->key);
    e9d2:	88e0      	ldrh	r0, [r4, #6]
    e9d4:	f7fe fef2 	bl	d7bc <bt_mesh_app_key_find>
	if (!key) {
    e9d8:	4605      	mov	r5, r0
    e9da:	2800      	cmp	r0, #0
    e9dc:	d0f4      	beq.n	e9c8 <bt_mesh_model_publish+0x40>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
    e9de:	6923      	ldr	r3, [r4, #16]
    e9e0:	889b      	ldrh	r3, [r3, #4]
    e9e2:	3304      	adds	r3, #4
    e9e4:	2b48      	cmp	r3, #72	; 0x48
    e9e6:	dd10      	ble.n	ea0a <bt_mesh_model_publish+0x82>
		BT_ERR("Message does not fit maximum SDU size");
    e9e8:	2301      	movs	r3, #1
    e9ea:	f04f 0100 	mov.w	r1, #0
    e9ee:	f363 0107 	bfi	r1, r3, #0, #8
    e9f2:	4a2e      	ldr	r2, [pc, #184]	; (eaac <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x4c>)
    e9f4:	4b2e      	ldr	r3, [pc, #184]	; (eab0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x50>)
    e9f6:	482f      	ldr	r0, [pc, #188]	; (eab4 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x54>)
    e9f8:	1a9b      	subs	r3, r3, r2
    e9fa:	08db      	lsrs	r3, r3, #3
    e9fc:	f363 118f 	bfi	r1, r3, #6, #10
    ea00:	f00f fd1f 	bl	1e442 <log_0>
		return -EMSGSIZE;
    ea04:	f06f 0523 	mvn.w	r5, #35	; 0x23
    ea08:	e7e0      	b.n	e9cc <bt_mesh_model_publish+0x44>
	if (pub->count) {
    ea0a:	7ae3      	ldrb	r3, [r4, #11]
    ea0c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    ea10:	d011      	beq.n	ea36 <bt_mesh_model_publish+0xae>
		BT_WARN("Clearing publish retransmit timer");
    ea12:	2302      	movs	r3, #2
    ea14:	f04f 0100 	mov.w	r1, #0
    ea18:	f363 0107 	bfi	r1, r3, #0, #8
    ea1c:	4a23      	ldr	r2, [pc, #140]	; (eaac <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x4c>)
    ea1e:	4b24      	ldr	r3, [pc, #144]	; (eab0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x50>)
    ea20:	4825      	ldr	r0, [pc, #148]	; (eab8 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x58>)
    ea22:	1a9b      	subs	r3, r3, r2
    ea24:	08db      	lsrs	r3, r3, #3
    ea26:	f363 118f 	bfi	r1, r3, #6, #10
    ea2a:	f00f fd0a 	bl	1e442 <log_0>
		k_delayed_work_cancel(&pub->timer);
    ea2e:	f104 0018 	add.w	r0, r4, #24
    ea32:	f014 fab2 	bl	22f9a <k_delayed_work_cancel>
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    ea36:	6923      	ldr	r3, [r4, #16]
    ea38:	a806      	add	r0, sp, #24
    ea3a:	6819      	ldr	r1, [r3, #0]
    ea3c:	889a      	ldrh	r2, [r3, #4]
    ea3e:	f013 fdaa 	bl	22596 <net_buf_simple_add_mem>
	ctx.addr = pub->addr;
    ea42:	88a3      	ldrh	r3, [r4, #4]
    ea44:	f8ad 3010 	strh.w	r3, [sp, #16]
	ctx.send_ttl = pub->ttl;
    ea48:	7a23      	ldrb	r3, [r4, #8]
    ea4a:	f88d 3015 	strb.w	r3, [sp, #21]
	ctx.app_idx = key->app_idx;
    ea4e:	886b      	ldrh	r3, [r5, #2]
	ctx.net_idx = key->net_idx;
    ea50:	8828      	ldrh	r0, [r5, #0]
	ctx.app_idx = key->app_idx;
    ea52:	f8ad 300e 	strh.w	r3, [sp, #14]
	tx.friend_cred = pub->cred;
    ea56:	7ae3      	ldrb	r3, [r4, #11]
    ea58:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
	ctx.net_idx = key->net_idx;
    ea5c:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.friend_cred = pub->cred;
    ea60:	f3c3 1300 	ubfx	r3, r3, #4, #1
    ea64:	f363 0200 	bfi	r2, r3, #0, #1
    ea68:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    ea6c:	f7fd fa96 	bl	bf9c <bt_mesh_subnet_get>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    ea70:	7ae3      	ldrb	r3, [r4, #11]
    ea72:	7a62      	ldrb	r2, [r4, #9]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    ea74:	9009      	str	r0, [sp, #36]	; 0x24
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    ea76:	f362 1347 	bfi	r3, r2, #5, #3
    ea7a:	72e3      	strb	r3, [r4, #11]
	err = model_send(model, &tx, true, &sdu, &pub_sent_cb, model);
    ea7c:	4b0f      	ldr	r3, [pc, #60]	; (eabc <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x5c>)
    ea7e:	9300      	str	r3, [sp, #0]
    ea80:	9601      	str	r6, [sp, #4]
    ea82:	ab06      	add	r3, sp, #24
    ea84:	2201      	movs	r2, #1
    ea86:	a909      	add	r1, sp, #36	; 0x24
    ea88:	4630      	mov	r0, r6
    ea8a:	f7ff fc75 	bl	e378 <model_send>
	if (err) {
    ea8e:	4605      	mov	r5, r0
    ea90:	2800      	cmp	r0, #0
    ea92:	d09b      	beq.n	e9cc <bt_mesh_model_publish+0x44>
		pub->count = 0;
    ea94:	7ae3      	ldrb	r3, [r4, #11]
    ea96:	f36f 1347 	bfc	r3, #5, #3
    ea9a:	72e3      	strb	r3, [r4, #11]
		publish_sent(err, model);
    ea9c:	4631      	mov	r1, r6
    ea9e:	f7ff fd79 	bl	e594 <publish_sent>
		return err;
    eaa2:	e793      	b.n	e9cc <bt_mesh_model_publish+0x44>
		return -ENOTSUP;
    eaa4:	f06f 0522 	mvn.w	r5, #34	; 0x22
    eaa8:	e790      	b.n	e9cc <bt_mesh_model_publish+0x44>
    eaaa:	bf00      	nop
    eaac:	000233ec 	.word	0x000233ec
    eab0:	00023474 	.word	0x00023474
    eab4:	00026426 	.word	0x00026426
    eab8:	0002644c 	.word	0x0002644c
    eabc:	00023aa8 	.word	0x00023aa8

0000eac0 <mod_publish>:
{
    eac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    eac4:	f850 6c18 	ldr.w	r6, [r0, #-24]
{
    eac8:	4604      	mov	r4, r0
    eaca:	b09c      	sub	sp, #112	; 0x70
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    eacc:	4630      	mov	r0, r6
    eace:	f7ff fd3d 	bl	e54c <bt_mesh_model_pub_period_get>
	if (pub->count) {
    ead2:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    ead6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    eada:	4607      	mov	r7, r0
	if (pub->count) {
    eadc:	d06b      	beq.n	ebb6 <mod_publish+0xf6>
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    eade:	ab0a      	add	r3, sp, #40	; 0x28
    eae0:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
    eae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    eae8:	9304      	str	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
    eaea:	2300      	movs	r3, #0
	struct bt_mesh_model_pub *pub = mod->pub;
    eaec:	68b5      	ldr	r5, [r6, #8]
	struct bt_mesh_msg_ctx ctx = {
    eaee:	f8ad 300c 	strh.w	r3, [sp, #12]
    eaf2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    eaf6:	88a9      	ldrh	r1, [r5, #4]
    eaf8:	f8ad 1008 	strh.w	r1, [sp, #8]
    eafc:	aa01      	add	r2, sp, #4
    eafe:	7a29      	ldrb	r1, [r5, #8]
    eb00:	f88d 100d 	strb.w	r1, [sp, #13]
		.src = bt_mesh_model_elem(mod)->addr,
    eb04:	4630      	mov	r0, r6
	struct bt_mesh_net_tx tx = {
    eb06:	e9cd 2308 	strd	r2, r3, [sp, #32]
    eb0a:	9307      	str	r3, [sp, #28]
		.src = bt_mesh_model_elem(mod)->addr,
    eb0c:	f7ff fd7c 	bl	e608 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    eb10:	8803      	ldrh	r3, [r0, #0]
    eb12:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    eb16:	f002 f847 	bl	10ba8 <bt_mesh_net_transmit_get>
		.friend_cred = pub->cred,
    eb1a:	7aeb      	ldrb	r3, [r5, #11]
	struct bt_mesh_net_tx tx = {
    eb1c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    eb20:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.friend_cred = pub->cred,
    eb24:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
    eb28:	f363 0200 	bfi	r2, r3, #0, #1
	key = bt_mesh_app_key_find(pub->key);
    eb2c:	88e8      	ldrh	r0, [r5, #6]
	struct bt_mesh_net_tx tx = {
    eb2e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	key = bt_mesh_app_key_find(pub->key);
    eb32:	f7fe fe43 	bl	d7bc <bt_mesh_app_key_find>
	if (!key) {
    eb36:	4680      	mov	r8, r0
    eb38:	b9e0      	cbnz	r0, eb74 <mod_publish+0xb4>
		return -EADDRNOTAVAIL;
    eb3a:	f06f 0130 	mvn.w	r1, #48	; 0x30
			BT_ERR("Failed to retransmit (err %d)", err);
    eb3e:	2301      	movs	r3, #1
    eb40:	f04f 0200 	mov.w	r2, #0
    eb44:	f363 0207 	bfi	r2, r3, #0, #8
    eb48:	4837      	ldr	r0, [pc, #220]	; (ec28 <mod_publish+0x168>)
    eb4a:	4b38      	ldr	r3, [pc, #224]	; (ec2c <mod_publish+0x16c>)
    eb4c:	1a1b      	subs	r3, r3, r0
    eb4e:	08db      	lsrs	r3, r3, #3
    eb50:	f363 128f 	bfi	r2, r3, #6, #10
    eb54:	4836      	ldr	r0, [pc, #216]	; (ec30 <mod_publish+0x170>)
    eb56:	f00f fc81 	bl	1e45c <log_1>
			pub->count = 0;
    eb5a:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    eb5e:	f36f 1347 	bfc	r3, #5, #3
    eb62:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
    eb66:	b31f      	cbz	r7, ebb0 <mod_publish+0xf0>
    eb68:	463a      	mov	r2, r7
    eb6a:	4621      	mov	r1, r4
    eb6c:	4831      	ldr	r0, [pc, #196]	; (ec34 <mod_publish+0x174>)
    eb6e:	f00d fce3 	bl	1c538 <k_delayed_work_submit_to_queue>
    eb72:	e01d      	b.n	ebb0 <mod_publish+0xf0>
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    eb74:	8800      	ldrh	r0, [r0, #0]
    eb76:	f7fd fa11 	bl	bf9c <bt_mesh_subnet_get>
	ctx.net_idx = key->net_idx;
    eb7a:	f8b8 3000 	ldrh.w	r3, [r8]
    eb7e:	f8ad 3004 	strh.w	r3, [sp, #4]
	ctx.app_idx = key->app_idx;
    eb82:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    eb86:	f8ad 3006 	strh.w	r3, [sp, #6]
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    eb8a:	692b      	ldr	r3, [r5, #16]
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    eb8c:	9007      	str	r0, [sp, #28]
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    eb8e:	889a      	ldrh	r2, [r3, #4]
    eb90:	6819      	ldr	r1, [r3, #0]
    eb92:	a804      	add	r0, sp, #16
    eb94:	f013 fcff 	bl	22596 <net_buf_simple_add_mem>
	pub->count--;
    eb98:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    eb9a:	4a27      	ldr	r2, [pc, #156]	; (ec38 <mod_publish+0x178>)
	pub->count--;
    eb9c:	33e0      	adds	r3, #224	; 0xe0
    eb9e:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    eba0:	a904      	add	r1, sp, #16
    eba2:	4633      	mov	r3, r6
    eba4:	a807      	add	r0, sp, #28
    eba6:	f7fe fe2d 	bl	d804 <bt_mesh_trans_send>
		if (err) {
    ebaa:	4601      	mov	r1, r0
    ebac:	2800      	cmp	r0, #0
    ebae:	d1c6      	bne.n	eb3e <mod_publish+0x7e>
}
    ebb0:	b01c      	add	sp, #112	; 0x70
    ebb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!period_ms) {
    ebb6:	2800      	cmp	r0, #0
    ebb8:	d0fa      	beq.n	ebb0 <mod_publish+0xf0>
    ebba:	f014 fa3f 	bl	2303c <z_impl_k_uptime_get_32>
	err = pub->update(pub->mod);
    ebbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
	pub->period_start = k_uptime_get_32();
    ebc2:	f844 0c0c 	str.w	r0, [r4, #-12]
	err = pub->update(pub->mod);
    ebc6:	f854 0c18 	ldr.w	r0, [r4, #-24]
    ebca:	4798      	blx	r3
	if (err) {
    ebcc:	b170      	cbz	r0, ebec <mod_publish+0x12c>
		BT_ERR("Failed to update publication message");
    ebce:	2301      	movs	r3, #1
    ebd0:	f04f 0100 	mov.w	r1, #0
    ebd4:	f363 0107 	bfi	r1, r3, #0, #8
    ebd8:	4a13      	ldr	r2, [pc, #76]	; (ec28 <mod_publish+0x168>)
    ebda:	4b14      	ldr	r3, [pc, #80]	; (ec2c <mod_publish+0x16c>)
    ebdc:	4817      	ldr	r0, [pc, #92]	; (ec3c <mod_publish+0x17c>)
    ebde:	1a9b      	subs	r3, r3, r2
    ebe0:	08db      	lsrs	r3, r3, #3
    ebe2:	f363 118f 	bfi	r1, r3, #6, #10
    ebe6:	f00f fc2c 	bl	1e442 <log_0>
		return;
    ebea:	e7e1      	b.n	ebb0 <mod_publish+0xf0>
	err = bt_mesh_model_publish(pub->mod);
    ebec:	f854 0c18 	ldr.w	r0, [r4, #-24]
    ebf0:	f7ff feca 	bl	e988 <bt_mesh_model_publish>
	if (err) {
    ebf4:	4601      	mov	r1, r0
    ebf6:	b168      	cbz	r0, ec14 <mod_publish+0x154>
		BT_ERR("Publishing failed (err %d)", err);
    ebf8:	2301      	movs	r3, #1
    ebfa:	f04f 0200 	mov.w	r2, #0
    ebfe:	f363 0207 	bfi	r2, r3, #0, #8
    ec02:	4809      	ldr	r0, [pc, #36]	; (ec28 <mod_publish+0x168>)
    ec04:	4b09      	ldr	r3, [pc, #36]	; (ec2c <mod_publish+0x16c>)
    ec06:	1a1b      	subs	r3, r3, r0
    ec08:	08db      	lsrs	r3, r3, #3
    ec0a:	f363 128f 	bfi	r2, r3, #6, #10
    ec0e:	480c      	ldr	r0, [pc, #48]	; (ec40 <mod_publish+0x180>)
    ec10:	f00f fc24 	bl	1e45c <log_1>
	if (pub->count) {
    ec14:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    ec18:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    ec1c:	d0c8      	beq.n	ebb0 <mod_publish+0xf0>
		k_delayed_work_cancel(&pub->timer);
    ec1e:	4620      	mov	r0, r4
    ec20:	f014 f9bb 	bl	22f9a <k_delayed_work_cancel>
    ec24:	e7c4      	b.n	ebb0 <mod_publish+0xf0>
    ec26:	bf00      	nop
    ec28:	000233ec 	.word	0x000233ec
    ec2c:	00023474 	.word	0x00023474
    ec30:	00026508 	.word	0x00026508
    ec34:	20001c74 	.word	0x20001c74
    ec38:	00023aa8 	.word	0x00023aa8
    ec3c:	00026526 	.word	0x00026526
    ec40:	0002654b 	.word	0x0002654b

0000ec44 <bt_mesh_comp_get>:
}

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
    ec44:	4b01      	ldr	r3, [pc, #4]	; (ec4c <bt_mesh_comp_get+0x8>)
    ec46:	6818      	ldr	r0, [r3, #0]
    ec48:	4770      	bx	lr
    ec4a:	bf00      	nop
    ec4c:	20000ac4 	.word	0x20000ac4

0000ec50 <app_key_is_valid>:
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    ec50:	4b0d      	ldr	r3, [pc, #52]	; (ec88 <app_key_is_valid+0x38>)
    ec52:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
    ec56:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ec5a:	4291      	cmp	r1, r2
    ec5c:	461a      	mov	r2, r3
    ec5e:	d003      	beq.n	ec68 <app_key_is_valid+0x18>
    ec60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    ec64:	4283      	cmp	r3, r0
    ec66:	d00b      	beq.n	ec80 <app_key_is_valid+0x30>
    ec68:	f8b2 107c 	ldrh.w	r1, [r2, #124]	; 0x7c
    ec6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ec70:	4299      	cmp	r1, r3
    ec72:	d007      	beq.n	ec84 <app_key_is_valid+0x34>
    ec74:	f8b2 307e 	ldrh.w	r3, [r2, #126]	; 0x7e
    ec78:	1a1b      	subs	r3, r3, r0
    ec7a:	4258      	negs	r0, r3
    ec7c:	4158      	adcs	r0, r3
    ec7e:	4770      	bx	lr
		    key->app_idx == app_idx) {
			return true;
    ec80:	2001      	movs	r0, #1
    ec82:	4770      	bx	lr
		}
	}

	return false;
    ec84:	2000      	movs	r0, #0
}
    ec86:	4770      	bx	lr
    ec88:	20007924 	.word	0x20007924

0000ec8c <_mod_pub_set>:

static u8_t _mod_pub_set(struct bt_mesh_model *model, u16_t pub_addr,
			 u16_t app_idx, u8_t cred_flag, u8_t ttl, u8_t period,
			 u8_t retransmit, bool store)
{
    ec8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec90:	4605      	mov	r5, r0
	if (!model->pub) {
    ec92:	6880      	ldr	r0, [r0, #8]
{
    ec94:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
    ec98:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
    ec9c:	460e      	mov	r6, r1
    ec9e:	4691      	mov	r9, r2
    eca0:	461c      	mov	r4, r3
	if (!model->pub) {
    eca2:	2800      	cmp	r0, #0
    eca4:	d040      	beq.n	ed28 <_mod_pub_set+0x9c>
		return STATUS_NVAL_PUB_PARAM;
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
    eca6:	2b00      	cmp	r3, #0
    eca8:	d13c      	bne.n	ed24 <_mod_pub_set+0x98>
		return STATUS_FEAT_NOT_SUPP;
	}

	if (!model->pub->update && period) {
    ecaa:	6942      	ldr	r2, [r0, #20]
    ecac:	b912      	cbnz	r2, ecb4 <_mod_pub_set+0x28>
    ecae:	f1b8 0f00 	cmp.w	r8, #0
    ecb2:	d139      	bne.n	ed28 <_mod_pub_set+0x9c>
		return STATUS_NVAL_PUB_PARAM;
	}

	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
    ecb4:	b98e      	cbnz	r6, ecda <_mod_pub_set+0x4e>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    ecb6:	8883      	ldrh	r3, [r0, #4]
    ecb8:	b163      	cbz	r3, ecd4 <_mod_pub_set+0x48>
		}

		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
		model->pub->key = 0;
		model->pub->cred = 0;
		model->pub->ttl = 0;
    ecba:	6883      	ldr	r3, [r0, #8]
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    ecbc:	6046      	str	r6, [r0, #4]
		model->pub->ttl = 0;
    ecbe:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ecc2:	6083      	str	r3, [r0, #8]
		model->pub->period = 0;
		model->pub->retransmit = 0;
		model->pub->count = 0;

		if (model->pub->update) {
    ecc4:	b112      	cbz	r2, eccc <_mod_pub_set+0x40>
			k_delayed_work_cancel(&model->pub->timer);
    ecc6:	3018      	adds	r0, #24
    ecc8:	f014 f967 	bl	22f9a <k_delayed_work_cancel>
		}

		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    eccc:	b117      	cbz	r7, ecd4 <_mod_pub_set+0x48>
			bt_mesh_store_mod_pub(model);
    ecce:	4628      	mov	r0, r5
    ecd0:	f012 fdf7 	bl	218c2 <bt_mesh_store_mod_pub>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
		bt_mesh_store_mod_pub(model);
	}

	return STATUS_SUCCESS;
}
    ecd4:	4620      	mov	r0, r4
    ecd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!bt_mesh_app_key_find(app_idx)) {
    ecda:	4648      	mov	r0, r9
    ecdc:	f7fe fd6e 	bl	d7bc <bt_mesh_app_key_find>
    ece0:	b320      	cbz	r0, ed2c <_mod_pub_set+0xa0>
	model->pub->addr = pub_addr;
    ece2:	68ab      	ldr	r3, [r5, #8]
	model->pub->cred = cred_flag;
    ece4:	7ada      	ldrb	r2, [r3, #11]
	model->pub->addr = pub_addr;
    ece6:	809e      	strh	r6, [r3, #4]
	model->pub->cred = cred_flag;
    ece8:	f36f 1204 	bfc	r2, #4, #1
    ecec:	72da      	strb	r2, [r3, #11]
	model->pub->ttl = ttl;
    ecee:	f89d 2020 	ldrb.w	r2, [sp, #32]
    ecf2:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
    ecf4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	model->pub->key = app_idx;
    ecf8:	f8a3 9006 	strh.w	r9, [r3, #6]
	model->pub->period = period;
    ecfc:	f883 800a 	strb.w	r8, [r3, #10]
	model->pub->retransmit = retransmit;
    ed00:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
    ed02:	695b      	ldr	r3, [r3, #20]
    ed04:	2b00      	cmp	r3, #0
    ed06:	d0e1      	beq.n	eccc <_mod_pub_set+0x40>
		period_ms = bt_mesh_model_pub_period_get(model);
    ed08:	4628      	mov	r0, r5
    ed0a:	f7ff fc1f 	bl	e54c <bt_mesh_model_pub_period_get>
		if (period_ms) {
    ed0e:	68a9      	ldr	r1, [r5, #8]
    ed10:	4602      	mov	r2, r0
    ed12:	b120      	cbz	r0, ed1e <_mod_pub_set+0x92>
    ed14:	3118      	adds	r1, #24
    ed16:	4806      	ldr	r0, [pc, #24]	; (ed30 <_mod_pub_set+0xa4>)
    ed18:	f00d fc0e 	bl	1c538 <k_delayed_work_submit_to_queue>
    ed1c:	e7d6      	b.n	eccc <_mod_pub_set+0x40>
			k_delayed_work_cancel(&model->pub->timer);
    ed1e:	f101 0018 	add.w	r0, r1, #24
    ed22:	e7d1      	b.n	ecc8 <_mod_pub_set+0x3c>
		return STATUS_FEAT_NOT_SUPP;
    ed24:	240a      	movs	r4, #10
    ed26:	e7d5      	b.n	ecd4 <_mod_pub_set+0x48>
		return STATUS_NVAL_PUB_PARAM;
    ed28:	2407      	movs	r4, #7
    ed2a:	e7d3      	b.n	ecd4 <_mod_pub_set+0x48>
		return STATUS_INVALID_APPKEY;
    ed2c:	2403      	movs	r4, #3
    ed2e:	e7d1      	b.n	ecd4 <_mod_pub_set+0x48>
    ed30:	20001c74 	.word	0x20001c74

0000ed34 <lpn_timeout_get>:
}

static void lpn_timeout_get(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    struct net_buf_simple *buf)
{
    ed34:	b570      	push	{r4, r5, r6, lr}
    ed36:	b088      	sub	sp, #32
	/* Needed size: opcode (2 bytes) + msg + MIC */
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4);
    ed38:	ab02      	add	r3, sp, #8
{
    ed3a:	4605      	mov	r5, r0
    ed3c:	460e      	mov	r6, r1
	struct bt_mesh_friend *frnd;
	u16_t lpn_addr;
	s32_t timeout;

	lpn_addr = net_buf_simple_pull_le16(buf);
    ed3e:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4);
    ed40:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
    ed44:	9305      	str	r3, [sp, #20]
    ed46:	e9cd 1306 	strd	r1, r3, [sp, #24]
	lpn_addr = net_buf_simple_pull_le16(buf);
    ed4a:	f013 fca3 	bl	22694 <net_buf_simple_pull_le16>

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x lpn_addr 0x%02x",
	       ctx->net_idx, ctx->app_idx, ctx->addr, lpn_addr);

	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
    ed4e:	b203      	sxth	r3, r0
    ed50:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
    ed52:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
    ed54:	dc0f      	bgt.n	ed76 <lpn_timeout_get+0x42>
		BT_WARN("Invalid LPNAddress; ignoring msg");
    ed56:	2302      	movs	r3, #2
    ed58:	f04f 0100 	mov.w	r1, #0
    ed5c:	f363 0107 	bfi	r1, r3, #0, #8
    ed60:	4a1a      	ldr	r2, [pc, #104]	; (edcc <lpn_timeout_get+0x98>)
    ed62:	4b1b      	ldr	r3, [pc, #108]	; (edd0 <lpn_timeout_get+0x9c>)
    ed64:	481b      	ldr	r0, [pc, #108]	; (edd4 <lpn_timeout_get+0xa0>)
    ed66:	1a9b      	subs	r3, r3, r2
    ed68:	08db      	lsrs	r3, r3, #3
    ed6a:	f363 118f 	bfi	r1, r3, #6, #10
	net_buf_simple_add_u8(&msg, timeout);
	net_buf_simple_add_u8(&msg, timeout >> 8);
	net_buf_simple_add_u8(&msg, timeout >> 16);

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
		BT_ERR("Unable to send LPN PollTimeout Status");
    ed6e:	f00f fb68 	bl	1e442 <log_0>
	}
}
    ed72:	b008      	add	sp, #32
    ed74:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
    ed76:	f248 012e 	movw	r1, #32814	; 0x802e
    ed7a:	a805      	add	r0, sp, #20
    ed7c:	f012 fa2d 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
    ed80:	4621      	mov	r1, r4
    ed82:	a805      	add	r0, sp, #20
    ed84:	f013 fc18 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, timeout);
    ed88:	2100      	movs	r1, #0
    ed8a:	a805      	add	r0, sp, #20
    ed8c:	f013 fc0c 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, timeout >> 8);
    ed90:	2100      	movs	r1, #0
    ed92:	a805      	add	r0, sp, #20
    ed94:	f013 fc08 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, timeout >> 16);
    ed98:	2100      	movs	r1, #0
    ed9a:	a805      	add	r0, sp, #20
    ed9c:	f013 fc04 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    eda0:	2300      	movs	r3, #0
    eda2:	9300      	str	r3, [sp, #0]
    eda4:	aa05      	add	r2, sp, #20
    eda6:	4631      	mov	r1, r6
    eda8:	4628      	mov	r0, r5
    edaa:	f012 fa3f 	bl	2122c <bt_mesh_model_send>
    edae:	2800      	cmp	r0, #0
    edb0:	d0df      	beq.n	ed72 <lpn_timeout_get+0x3e>
		BT_ERR("Unable to send LPN PollTimeout Status");
    edb2:	2301      	movs	r3, #1
    edb4:	f04f 0100 	mov.w	r1, #0
    edb8:	f363 0107 	bfi	r1, r3, #0, #8
    edbc:	4a03      	ldr	r2, [pc, #12]	; (edcc <lpn_timeout_get+0x98>)
    edbe:	4b04      	ldr	r3, [pc, #16]	; (edd0 <lpn_timeout_get+0x9c>)
    edc0:	4805      	ldr	r0, [pc, #20]	; (edd8 <lpn_timeout_get+0xa4>)
    edc2:	1a9b      	subs	r3, r3, r2
    edc4:	08db      	lsrs	r3, r3, #3
    edc6:	f363 118f 	bfi	r1, r3, #6, #10
    edca:	e7d0      	b.n	ed6e <lpn_timeout_get+0x3a>
    edcc:	000233ec 	.word	0x000233ec
    edd0:	00023494 	.word	0x00023494
    edd4:	000269a4 	.word	0x000269a4
    edd8:	000269c5 	.word	0x000269c5

0000eddc <node_identity_get>:
{
    eddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    edde:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
    ede0:	ab02      	add	r3, sp, #8
{
    ede2:	4606      	mov	r6, r0
    ede4:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
    ede6:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
    ede8:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
    edec:	9305      	str	r3, [sp, #20]
    edee:	e9cd 1306 	strd	r1, r3, [sp, #24]
	idx = net_buf_simple_pull_le16(buf);
    edf2:	f013 fc4f 	bl	22694 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    edf6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    edfa:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    edfc:	d310      	bcc.n	ee20 <node_identity_get+0x44>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    edfe:	2301      	movs	r3, #1
    ee00:	f04f 0200 	mov.w	r2, #0
    ee04:	f363 0207 	bfi	r2, r3, #0, #8
    ee08:	4920      	ldr	r1, [pc, #128]	; (ee8c <node_identity_get+0xb0>)
    ee0a:	4b21      	ldr	r3, [pc, #132]	; (ee90 <node_identity_get+0xb4>)
    ee0c:	1a5b      	subs	r3, r3, r1
    ee0e:	08db      	lsrs	r3, r3, #3
    ee10:	4601      	mov	r1, r0
    ee12:	f363 128f 	bfi	r2, r3, #6, #10
    ee16:	481f      	ldr	r0, [pc, #124]	; (ee94 <node_identity_get+0xb8>)
    ee18:	f00f fb20 	bl	1e45c <log_1>
}
    ee1c:	b009      	add	sp, #36	; 0x24
    ee1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
    ee20:	f248 0148 	movw	r1, #32840	; 0x8048
    ee24:	a805      	add	r0, sp, #20
    ee26:	f012 f9d8 	bl	211da <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
    ee2a:	4628      	mov	r0, r5
    ee2c:	f7fd f8b6 	bl	bf9c <bt_mesh_subnet_get>
	if (!sub) {
    ee30:	4604      	mov	r4, r0
    ee32:	bb18      	cbnz	r0, ee7c <node_identity_get+0xa0>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_NETKEY);
    ee34:	2104      	movs	r1, #4
    ee36:	a805      	add	r0, sp, #20
    ee38:	f013 fbb6 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
    ee3c:	4629      	mov	r1, r5
    ee3e:	a805      	add	r0, sp, #20
    ee40:	f013 fbba 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
    ee44:	4621      	mov	r1, r4
    ee46:	a805      	add	r0, sp, #20
    ee48:	f013 fbae 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    ee4c:	2300      	movs	r3, #0
    ee4e:	9300      	str	r3, [sp, #0]
    ee50:	aa05      	add	r2, sp, #20
    ee52:	4639      	mov	r1, r7
    ee54:	4630      	mov	r0, r6
    ee56:	f012 f9e9 	bl	2122c <bt_mesh_model_send>
    ee5a:	2800      	cmp	r0, #0
    ee5c:	d0de      	beq.n	ee1c <node_identity_get+0x40>
		BT_ERR("Unable to send Node Identity Status");
    ee5e:	2301      	movs	r3, #1
    ee60:	f04f 0100 	mov.w	r1, #0
    ee64:	f363 0107 	bfi	r1, r3, #0, #8
    ee68:	4a08      	ldr	r2, [pc, #32]	; (ee8c <node_identity_get+0xb0>)
    ee6a:	4b09      	ldr	r3, [pc, #36]	; (ee90 <node_identity_get+0xb4>)
    ee6c:	480a      	ldr	r0, [pc, #40]	; (ee98 <node_identity_get+0xbc>)
    ee6e:	1a9b      	subs	r3, r3, r2
    ee70:	08db      	lsrs	r3, r3, #3
    ee72:	f363 118f 	bfi	r1, r3, #6, #10
    ee76:	f00f fae4 	bl	1e442 <log_0>
    ee7a:	e7cf      	b.n	ee1c <node_identity_get+0x40>
		net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    ee7c:	2100      	movs	r1, #0
    ee7e:	a805      	add	r0, sp, #20
    ee80:	f013 fb92 	bl	225a8 <net_buf_simple_add_u8>
		node_id = sub->node_id;
    ee84:	f894 4020 	ldrb.w	r4, [r4, #32]
    ee88:	e7d8      	b.n	ee3c <node_identity_get+0x60>
    ee8a:	bf00      	nop
    ee8c:	000233ec 	.word	0x000233ec
    ee90:	00023494 	.word	0x00023494
    ee94:	00026be2 	.word	0x00026be2
    ee98:	00026bfd 	.word	0x00026bfd

0000ee9c <app_key_get>:
{
    ee9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee9e:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4 +
    eea0:	ab02      	add	r3, sp, #8
{
    eea2:	4605      	mov	r5, r0
    eea4:	460e      	mov	r6, r1
	get_idx = net_buf_simple_pull_le16(buf);
    eea6:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4 +
    eea8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
    eeac:	9305      	str	r3, [sp, #20]
    eeae:	e9cd 1306 	strd	r1, r3, [sp, #24]
	get_idx = net_buf_simple_pull_le16(buf);
    eeb2:	f013 fbef 	bl	22694 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
    eeb6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
    eeba:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
    eebc:	d310      	bcc.n	eee0 <app_key_get+0x44>
		BT_ERR("Invalid NetKeyIndex 0x%04x", get_idx);
    eebe:	2301      	movs	r3, #1
    eec0:	f04f 0200 	mov.w	r2, #0
    eec4:	f363 0207 	bfi	r2, r3, #0, #8
    eec8:	492b      	ldr	r1, [pc, #172]	; (ef78 <app_key_get+0xdc>)
    eeca:	4b2c      	ldr	r3, [pc, #176]	; (ef7c <app_key_get+0xe0>)
    eecc:	1a5b      	subs	r3, r3, r1
    eece:	08db      	lsrs	r3, r3, #3
    eed0:	4601      	mov	r1, r0
    eed2:	f363 128f 	bfi	r2, r3, #6, #10
    eed6:	482a      	ldr	r0, [pc, #168]	; (ef80 <app_key_get+0xe4>)
    eed8:	f00f fac0 	bl	1e45c <log_1>
}
    eedc:	b009      	add	sp, #36	; 0x24
    eede:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
    eee0:	f248 0102 	movw	r1, #32770	; 0x8002
    eee4:	a805      	add	r0, sp, #20
    eee6:	f012 f978 	bl	211da <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_get(get_idx)) {
    eeea:	4620      	mov	r0, r4
    eeec:	f7fd f856 	bl	bf9c <bt_mesh_subnet_get>
		status = STATUS_SUCCESS;
    eef0:	2800      	cmp	r0, #0
    eef2:	bf0c      	ite	eq
    eef4:	2704      	moveq	r7, #4
    eef6:	2700      	movne	r7, #0
	net_buf_simple_add_u8(&msg, status);
    eef8:	4639      	mov	r1, r7
    eefa:	a805      	add	r0, sp, #20
    eefc:	f013 fb54 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
    ef00:	4621      	mov	r1, r4
    ef02:	a805      	add	r0, sp, #20
    ef04:	f013 fb58 	bl	225b8 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
    ef08:	b9af      	cbnz	r7, ef36 <app_key_get+0x9a>
		if (key->net_idx != get_idx) {
    ef0a:	4b1e      	ldr	r3, [pc, #120]	; (ef84 <app_key_get+0xe8>)
    ef0c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
    ef10:	42a2      	cmp	r2, r4
    ef12:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			prev = key->app_idx;
    ef16:	bf0c      	ite	eq
    ef18:	f8b3 1056 	ldrheq.w	r1, [r3, #86]	; 0x56
	prev = BT_MESH_KEY_UNUSED;
    ef1c:	f64f 71ff 	movwne	r1, #65535	; 0xffff
		if (key->net_idx != get_idx) {
    ef20:	42a2      	cmp	r2, r4
    ef22:	d121      	bne.n	ef68 <app_key_get+0xcc>
		if (prev == BT_MESH_KEY_UNUSED) {
    ef24:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
    ef28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ef2c:	4299      	cmp	r1, r3
    ef2e:	d01a      	beq.n	ef66 <app_key_get+0xca>
		key_idx_pack(&msg, prev, key->app_idx);
    ef30:	a805      	add	r0, sp, #20
    ef32:	f012 f9cc 	bl	212ce <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    ef36:	2300      	movs	r3, #0
    ef38:	9300      	str	r3, [sp, #0]
    ef3a:	aa05      	add	r2, sp, #20
    ef3c:	4631      	mov	r1, r6
    ef3e:	4628      	mov	r0, r5
    ef40:	f012 f974 	bl	2122c <bt_mesh_model_send>
    ef44:	2800      	cmp	r0, #0
    ef46:	d0c9      	beq.n	eedc <app_key_get+0x40>
		BT_ERR("Unable to send AppKey List");
    ef48:	2301      	movs	r3, #1
    ef4a:	f04f 0100 	mov.w	r1, #0
    ef4e:	f363 0107 	bfi	r1, r3, #0, #8
    ef52:	4a09      	ldr	r2, [pc, #36]	; (ef78 <app_key_get+0xdc>)
    ef54:	4b09      	ldr	r3, [pc, #36]	; (ef7c <app_key_get+0xe0>)
    ef56:	480c      	ldr	r0, [pc, #48]	; (ef88 <app_key_get+0xec>)
    ef58:	1a9b      	subs	r3, r3, r2
    ef5a:	08db      	lsrs	r3, r3, #3
    ef5c:	f363 118f 	bfi	r1, r3, #6, #10
    ef60:	f00f fa6f 	bl	1e442 <log_0>
    ef64:	e7ba      	b.n	eedc <app_key_get+0x40>
			prev = key->app_idx;
    ef66:	4611      	mov	r1, r2
	if (prev != BT_MESH_KEY_UNUSED) {
    ef68:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ef6c:	4299      	cmp	r1, r3
    ef6e:	d0e2      	beq.n	ef36 <app_key_get+0x9a>
		net_buf_simple_add_le16(&msg, prev);
    ef70:	a805      	add	r0, sp, #20
    ef72:	f013 fb21 	bl	225b8 <net_buf_simple_add_le16>
    ef76:	e7de      	b.n	ef36 <app_key_get+0x9a>
    ef78:	000233ec 	.word	0x000233ec
    ef7c:	00023494 	.word	0x00023494
    ef80:	00026be2 	.word	0x00026be2
    ef84:	20007924 	.word	0x20007924
    ef88:	00026619 	.word	0x00026619

0000ef8c <hb_pub_send_status>:
} __packed;

static void hb_pub_send_status(struct bt_mesh_model *model,
			       struct bt_mesh_msg_ctx *ctx, u8_t status,
			       struct hb_pub_param *orig_msg)
{
    ef8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef90:	b08a      	sub	sp, #40	; 0x28
    ef92:	4690      	mov	r8, r2
    ef94:	461f      	mov	r7, r3
	/* Needed size: opcode (1 byte) + msg + MIC */
	NET_BUF_SIMPLE_DEFINE(msg, 1 + 10 + 4);
    ef96:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    ef9a:	ab06      	add	r3, sp, #24
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    ef9c:	6984      	ldr	r4, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(msg, 1 + 10 + 4);
    ef9e:	9303      	str	r3, [sp, #12]
{
    efa0:	4605      	mov	r5, r0
    efa2:	460e      	mov	r6, r1

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
    efa4:	a803      	add	r0, sp, #12
    efa6:	2106      	movs	r1, #6
	NET_BUF_SIMPLE_DEFINE(msg, 1 + 10 + 4);
    efa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
    efac:	f012 f915 	bl	211da <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(&msg, status);
    efb0:	4641      	mov	r1, r8
    efb2:	a803      	add	r0, sp, #12
    efb4:	f013 faf8 	bl	225a8 <net_buf_simple_add_u8>

	if (orig_msg) {
    efb8:	b307      	cbz	r7, effc <hb_pub_send_status+0x70>
		memcpy(net_buf_simple_add(&msg, sizeof(*orig_msg)), orig_msg,
    efba:	2109      	movs	r1, #9
    efbc:	a803      	add	r0, sp, #12
    efbe:	f013 fae4 	bl	2258a <net_buf_simple_add>
    efc2:	2209      	movs	r2, #9
    efc4:	4639      	mov	r1, r7
    efc6:	f010 fb1f 	bl	1f608 <memcpy>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.ttl);
	net_buf_simple_add_le16(&msg, cfg->hb_pub.feat);
	net_buf_simple_add_le16(&msg, cfg->hb_pub.net_idx);

send:
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    efca:	2300      	movs	r3, #0
    efcc:	9300      	str	r3, [sp, #0]
    efce:	aa03      	add	r2, sp, #12
    efd0:	4631      	mov	r1, r6
    efd2:	4628      	mov	r0, r5
    efd4:	f012 f92a 	bl	2122c <bt_mesh_model_send>
    efd8:	b168      	cbz	r0, eff6 <hb_pub_send_status+0x6a>
		BT_ERR("Unable to send Heartbeat Publication Status");
    efda:	2301      	movs	r3, #1
    efdc:	f04f 0100 	mov.w	r1, #0
    efe0:	f363 0107 	bfi	r1, r3, #0, #8
    efe4:	4a1b      	ldr	r2, [pc, #108]	; (f054 <hb_pub_send_status+0xc8>)
    efe6:	4b1c      	ldr	r3, [pc, #112]	; (f058 <hb_pub_send_status+0xcc>)
    efe8:	481c      	ldr	r0, [pc, #112]	; (f05c <hb_pub_send_status+0xd0>)
    efea:	1a9b      	subs	r3, r3, r2
    efec:	08db      	lsrs	r3, r3, #3
    efee:	f363 118f 	bfi	r1, r3, #6, #10
    eff2:	f00f fa26 	bl	1e442 <log_0>
	}
}
    eff6:	b00a      	add	sp, #40	; 0x28
    eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_simple_add_le16(&msg, cfg->hb_pub.dst);
    effc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    effe:	a803      	add	r0, sp, #12
    f000:	f013 fada 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
    f004:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (!val) {
    f006:	b171      	cbz	r1, f026 <hb_pub_send_status+0x9a>
	} else if (val == 0x01) {
    f008:	2901      	cmp	r1, #1
    f00a:	d00c      	beq.n	f026 <hb_pub_send_status+0x9a>
	} else if (val == 0xffff) {
    f00c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f010:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
    f012:	bf1f      	itttt	ne
    f014:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    f018:	fab1 f181 	clzne	r1, r1
    f01c:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
    f020:	b2c9      	uxtbne	r1, r1
		return 0xff;
    f022:	bf08      	it	eq
    f024:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
    f026:	a803      	add	r0, sp, #12
    f028:	f013 fabe 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.period);
    f02c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    f030:	a803      	add	r0, sp, #12
    f032:	f013 fab9 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.ttl);
    f036:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
    f03a:	a803      	add	r0, sp, #12
    f03c:	f013 fab4 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.feat);
    f040:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    f042:	a803      	add	r0, sp, #12
    f044:	f013 fab8 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.net_idx);
    f048:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    f04a:	a803      	add	r0, sp, #12
    f04c:	f013 fab4 	bl	225b8 <net_buf_simple_add_le16>
    f050:	e7bb      	b.n	efca <hb_pub_send_status+0x3e>
    f052:	bf00      	nop
    f054:	000233ec 	.word	0x000233ec
    f058:	00023494 	.word	0x00023494
    f05c:	000268ab 	.word	0x000268ab

0000f060 <send_mod_sub_status>:
{
    f060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f064:	b08a      	sub	sp, #40	; 0x28
    f066:	461f      	mov	r7, r3
    f068:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
    f06a:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
    f06e:	a906      	add	r1, sp, #24
{
    f070:	4690      	mov	r8, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
    f072:	e9cd 3104 	strd	r3, r1, [sp, #16]
    f076:	9103      	str	r1, [sp, #12]
{
    f078:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
    f07a:	f248 011f 	movw	r1, #32799	; 0x801f
    f07e:	a803      	add	r0, sp, #12
{
    f080:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
    f084:	f012 f8a9 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
    f088:	4641      	mov	r1, r8
    f08a:	a803      	add	r0, sp, #12
    f08c:	f013 fa8c 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
    f090:	4639      	mov	r1, r7
    f092:	a803      	add	r0, sp, #12
    f094:	f013 fa90 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
    f098:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    f09c:	a803      	add	r0, sp, #12
    f09e:	f013 fa8b 	bl	225b8 <net_buf_simple_add_le16>
	if (vnd) {
    f0a2:	b306      	cbz	r6, f0e6 <send_mod_sub_status+0x86>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
    f0a4:	2104      	movs	r1, #4
    f0a6:	a803      	add	r0, sp, #12
    f0a8:	f013 fa6f 	bl	2258a <net_buf_simple_add>
    f0ac:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
    f0ae:	9911      	ldr	r1, [sp, #68]	; 0x44
    f0b0:	f010 faaa 	bl	1f608 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f0b4:	2300      	movs	r3, #0
    f0b6:	9300      	str	r3, [sp, #0]
    f0b8:	aa03      	add	r2, sp, #12
    f0ba:	4629      	mov	r1, r5
    f0bc:	4620      	mov	r0, r4
    f0be:	f012 f8b5 	bl	2122c <bt_mesh_model_send>
    f0c2:	b168      	cbz	r0, f0e0 <send_mod_sub_status+0x80>
		BT_ERR("Unable to send Model Subscription Status");
    f0c4:	2301      	movs	r3, #1
    f0c6:	f04f 0100 	mov.w	r1, #0
    f0ca:	f363 0107 	bfi	r1, r3, #0, #8
    f0ce:	4a09      	ldr	r2, [pc, #36]	; (f0f4 <send_mod_sub_status+0x94>)
    f0d0:	4b09      	ldr	r3, [pc, #36]	; (f0f8 <send_mod_sub_status+0x98>)
    f0d2:	480a      	ldr	r0, [pc, #40]	; (f0fc <send_mod_sub_status+0x9c>)
    f0d4:	1a9b      	subs	r3, r3, r2
    f0d6:	08db      	lsrs	r3, r3, #3
    f0d8:	f363 118f 	bfi	r1, r3, #6, #10
    f0dc:	f00f f9b1 	bl	1e442 <log_0>
}
    f0e0:	b00a      	add	sp, #40	; 0x28
    f0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
    f0e6:	2102      	movs	r1, #2
    f0e8:	a803      	add	r0, sp, #12
    f0ea:	f013 fa4e 	bl	2258a <net_buf_simple_add>
    f0ee:	2202      	movs	r2, #2
    f0f0:	e7dd      	b.n	f0ae <send_mod_sub_status+0x4e>
    f0f2:	bf00      	nop
    f0f4:	000233ec 	.word	0x000233ec
    f0f8:	00023494 	.word	0x00023494
    f0fc:	00026d59 	.word	0x00026d59

0000f100 <node_reset>:
{
    f100:	b530      	push	{r4, r5, lr}
    f102:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 0 + 4);
    f104:	ab03      	add	r3, sp, #12
    f106:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
    f10a:	4604      	mov	r4, r0
    f10c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    f10e:	a805      	add	r0, sp, #20
    f110:	f248 014a 	movw	r1, #32842	; 0x804a
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 0 + 4);
    f114:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f118:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    f11a:	f012 f85e 	bl	211da <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f11e:	2300      	movs	r3, #0
    f120:	9300      	str	r3, [sp, #0]
    f122:	aa05      	add	r2, sp, #20
    f124:	4629      	mov	r1, r5
    f126:	4620      	mov	r0, r4
    f128:	f012 f880 	bl	2122c <bt_mesh_model_send>
    f12c:	b168      	cbz	r0, f14a <node_reset+0x4a>
		BT_ERR("Unable to send Node Reset Status");
    f12e:	2301      	movs	r3, #1
    f130:	f04f 0100 	mov.w	r1, #0
    f134:	f363 0107 	bfi	r1, r3, #0, #8
    f138:	4a06      	ldr	r2, [pc, #24]	; (f154 <node_reset+0x54>)
    f13a:	4b07      	ldr	r3, [pc, #28]	; (f158 <node_reset+0x58>)
    f13c:	4807      	ldr	r0, [pc, #28]	; (f15c <node_reset+0x5c>)
    f13e:	1a9b      	subs	r3, r3, r2
    f140:	08db      	lsrs	r3, r3, #3
    f142:	f363 118f 	bfi	r1, r3, #6, #10
    f146:	f00f f97c 	bl	1e442 <log_0>
	bt_mesh_reset();
    f14a:	f7fc f91d 	bl	b388 <bt_mesh_reset>
}
    f14e:	b009      	add	sp, #36	; 0x24
    f150:	bd30      	pop	{r4, r5, pc}
    f152:	bf00      	nop
    f154:	000233ec 	.word	0x000233ec
    f158:	00023494 	.word	0x00023494
    f15c:	00026c3e 	.word	0x00026c3e

0000f160 <mod_sub_get>:
{
    f160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f164:	4615      	mov	r5, r2
    f166:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4 +
    f168:	ab06      	add	r3, sp, #24
    f16a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
    f16e:	4607      	mov	r7, r0
	addr = net_buf_simple_pull_le16(buf);
    f170:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4 +
    f172:	9303      	str	r3, [sp, #12]
    f174:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
    f178:	4688      	mov	r8, r1
	addr = net_buf_simple_pull_le16(buf);
    f17a:	f013 fa8b 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    f17e:	b203      	sxth	r3, r0
    f180:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    f182:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    f184:	dc10      	bgt.n	f1a8 <mod_sub_get+0x48>
		BT_WARN("Prohibited element address");
    f186:	2302      	movs	r3, #2
    f188:	f04f 0100 	mov.w	r1, #0
    f18c:	f363 0107 	bfi	r1, r3, #0, #8
    f190:	4a2b      	ldr	r2, [pc, #172]	; (f240 <mod_sub_get+0xe0>)
    f192:	4b2c      	ldr	r3, [pc, #176]	; (f244 <mod_sub_get+0xe4>)
    f194:	482c      	ldr	r0, [pc, #176]	; (f248 <mod_sub_get+0xe8>)
    f196:	1a9b      	subs	r3, r3, r2
    f198:	08db      	lsrs	r3, r3, #3
    f19a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Model Subscription List");
    f19e:	f00f f950 	bl	1e442 <log_0>
}
    f1a2:	b00a      	add	sp, #40	; 0x28
    f1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id = net_buf_simple_pull_le16(buf);
    f1a8:	4628      	mov	r0, r5
    f1aa:	f013 fa73 	bl	22694 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    f1ae:	f248 012a 	movw	r1, #32810	; 0x802a
	id = net_buf_simple_pull_le16(buf);
    f1b2:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    f1b4:	a803      	add	r0, sp, #12
    f1b6:	f012 f810 	bl	211da <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    f1ba:	4620      	mov	r0, r4
    f1bc:	f7ff fabc 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
    f1c0:	b960      	cbnz	r0, f1dc <mod_sub_get+0x7c>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
    f1c2:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    f1c4:	a803      	add	r0, sp, #12
    f1c6:	f013 f9ef 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
    f1ca:	4621      	mov	r1, r4
    f1cc:	a803      	add	r0, sp, #12
    f1ce:	f013 f9f3 	bl	225b8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
    f1d2:	4629      	mov	r1, r5
			net_buf_simple_add_le16(&msg, mod->groups[i]);
    f1d4:	a803      	add	r0, sp, #12
    f1d6:	f013 f9ef 	bl	225b8 <net_buf_simple_add_le16>
    f1da:	e01a      	b.n	f212 <mod_sub_get+0xb2>
	mod = bt_mesh_model_find(elem, id);
    f1dc:	4629      	mov	r1, r5
    f1de:	f012 f862 	bl	212a6 <bt_mesh_model_find>
	if (!mod) {
    f1e2:	4606      	mov	r6, r0
    f1e4:	b908      	cbnz	r0, f1ea <mod_sub_get+0x8a>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    f1e6:	2102      	movs	r1, #2
    f1e8:	e7ec      	b.n	f1c4 <mod_sub_get+0x64>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    f1ea:	2100      	movs	r1, #0
    f1ec:	a803      	add	r0, sp, #12
    f1ee:	f013 f9db 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
    f1f2:	4621      	mov	r1, r4
    f1f4:	a803      	add	r0, sp, #12
    f1f6:	f013 f9df 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
    f1fa:	4629      	mov	r1, r5
    f1fc:	a803      	add	r0, sp, #12
    f1fe:	f013 f9db 	bl	225b8 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    f202:	8a31      	ldrh	r1, [r6, #16]
    f204:	b111      	cbz	r1, f20c <mod_sub_get+0xac>
			net_buf_simple_add_le16(&msg, mod->groups[i]);
    f206:	a803      	add	r0, sp, #12
    f208:	f013 f9d6 	bl	225b8 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    f20c:	8a71      	ldrh	r1, [r6, #18]
    f20e:	2900      	cmp	r1, #0
    f210:	d1e0      	bne.n	f1d4 <mod_sub_get+0x74>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f212:	2300      	movs	r3, #0
    f214:	9300      	str	r3, [sp, #0]
    f216:	aa03      	add	r2, sp, #12
    f218:	4641      	mov	r1, r8
    f21a:	4638      	mov	r0, r7
    f21c:	f012 f806 	bl	2122c <bt_mesh_model_send>
    f220:	2800      	cmp	r0, #0
    f222:	d0be      	beq.n	f1a2 <mod_sub_get+0x42>
		BT_ERR("Unable to send Model Subscription List");
    f224:	2301      	movs	r3, #1
    f226:	f04f 0100 	mov.w	r1, #0
    f22a:	f363 0107 	bfi	r1, r3, #0, #8
    f22e:	4a04      	ldr	r2, [pc, #16]	; (f240 <mod_sub_get+0xe0>)
    f230:	4b04      	ldr	r3, [pc, #16]	; (f244 <mod_sub_get+0xe4>)
    f232:	4806      	ldr	r0, [pc, #24]	; (f24c <mod_sub_get+0xec>)
    f234:	1a9b      	subs	r3, r3, r2
    f236:	08db      	lsrs	r3, r3, #3
    f238:	f363 118f 	bfi	r1, r3, #6, #10
    f23c:	e7af      	b.n	f19e <mod_sub_get+0x3e>
    f23e:	bf00      	nop
    f240:	000233ec 	.word	0x000233ec
    f244:	00023494 	.word	0x00023494
    f248:	00026ac3 	.word	0x00026ac3
    f24c:	00026ade 	.word	0x00026ade

0000f250 <mod_sub_get_vnd>:
{
    f250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f254:	4615      	mov	r5, r2
    f256:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 7 + 4 +
    f258:	ab05      	add	r3, sp, #20
    f25a:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
    f25e:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
    f260:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 7 + 4 +
    f262:	9302      	str	r3, [sp, #8]
    f264:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
    f268:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
    f26a:	f013 fa13 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    f26e:	b203      	sxth	r3, r0
    f270:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    f272:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    f274:	dc10      	bgt.n	f298 <mod_sub_get_vnd+0x48>
		BT_WARN("Prohibited element address");
    f276:	2302      	movs	r3, #2
    f278:	f04f 0100 	mov.w	r1, #0
    f27c:	f363 0107 	bfi	r1, r3, #0, #8
    f280:	4a31      	ldr	r2, [pc, #196]	; (f348 <mod_sub_get_vnd+0xf8>)
    f282:	4b32      	ldr	r3, [pc, #200]	; (f34c <mod_sub_get_vnd+0xfc>)
    f284:	4832      	ldr	r0, [pc, #200]	; (f350 <mod_sub_get_vnd+0x100>)
    f286:	1a9b      	subs	r3, r3, r2
    f288:	08db      	lsrs	r3, r3, #3
    f28a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Vendor Model Subscription List");
    f28e:	f00f f8d8 	bl	1e442 <log_0>
}
    f292:	b00b      	add	sp, #44	; 0x2c
    f294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	company = net_buf_simple_pull_le16(buf);
    f298:	4628      	mov	r0, r5
    f29a:	f013 f9fb 	bl	22694 <net_buf_simple_pull_le16>
    f29e:	4606      	mov	r6, r0
	id = net_buf_simple_pull_le16(buf);
    f2a0:	4628      	mov	r0, r5
    f2a2:	f013 f9f7 	bl	22694 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    f2a6:	f248 012c 	movw	r1, #32812	; 0x802c
	id = net_buf_simple_pull_le16(buf);
    f2aa:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    f2ac:	a802      	add	r0, sp, #8
    f2ae:	f011 ff94 	bl	211da <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    f2b2:	4620      	mov	r0, r4
    f2b4:	f7ff fa40 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
    f2b8:	b980      	cbnz	r0, f2dc <mod_sub_get_vnd+0x8c>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
    f2ba:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    f2bc:	a802      	add	r0, sp, #8
    f2be:	f013 f973 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
    f2c2:	4621      	mov	r1, r4
    f2c4:	a802      	add	r0, sp, #8
    f2c6:	f013 f977 	bl	225b8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
    f2ca:	4631      	mov	r1, r6
    f2cc:	a802      	add	r0, sp, #8
    f2ce:	f013 f973 	bl	225b8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
    f2d2:	4629      	mov	r1, r5
			net_buf_simple_add_le16(&msg, mod->groups[i]);
    f2d4:	a802      	add	r0, sp, #8
    f2d6:	f013 f96f 	bl	225b8 <net_buf_simple_add_le16>
    f2da:	e01f      	b.n	f31c <mod_sub_get_vnd+0xcc>
	mod = bt_mesh_model_find_vnd(elem, company, id);
    f2dc:	462a      	mov	r2, r5
    f2de:	4631      	mov	r1, r6
    f2e0:	f011 ffca 	bl	21278 <bt_mesh_model_find_vnd>
	if (!mod) {
    f2e4:	4607      	mov	r7, r0
    f2e6:	b908      	cbnz	r0, f2ec <mod_sub_get_vnd+0x9c>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    f2e8:	2102      	movs	r1, #2
    f2ea:	e7e7      	b.n	f2bc <mod_sub_get_vnd+0x6c>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    f2ec:	2100      	movs	r1, #0
    f2ee:	a802      	add	r0, sp, #8
    f2f0:	f013 f95a 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
    f2f4:	4621      	mov	r1, r4
    f2f6:	a802      	add	r0, sp, #8
    f2f8:	f013 f95e 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
    f2fc:	4631      	mov	r1, r6
    f2fe:	a802      	add	r0, sp, #8
    f300:	f013 f95a 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
    f304:	4629      	mov	r1, r5
    f306:	a802      	add	r0, sp, #8
    f308:	f013 f956 	bl	225b8 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    f30c:	8a39      	ldrh	r1, [r7, #16]
    f30e:	b111      	cbz	r1, f316 <mod_sub_get_vnd+0xc6>
			net_buf_simple_add_le16(&msg, mod->groups[i]);
    f310:	a802      	add	r0, sp, #8
    f312:	f013 f951 	bl	225b8 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    f316:	8a79      	ldrh	r1, [r7, #18]
    f318:	2900      	cmp	r1, #0
    f31a:	d1db      	bne.n	f2d4 <mod_sub_get_vnd+0x84>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f31c:	2300      	movs	r3, #0
    f31e:	9300      	str	r3, [sp, #0]
    f320:	aa02      	add	r2, sp, #8
    f322:	4649      	mov	r1, r9
    f324:	4640      	mov	r0, r8
    f326:	f011 ff81 	bl	2122c <bt_mesh_model_send>
    f32a:	2800      	cmp	r0, #0
    f32c:	d0b1      	beq.n	f292 <mod_sub_get_vnd+0x42>
		BT_ERR("Unable to send Vendor Model Subscription List");
    f32e:	2301      	movs	r3, #1
    f330:	f04f 0100 	mov.w	r1, #0
    f334:	f363 0107 	bfi	r1, r3, #0, #8
    f338:	4a03      	ldr	r2, [pc, #12]	; (f348 <mod_sub_get_vnd+0xf8>)
    f33a:	4b04      	ldr	r3, [pc, #16]	; (f34c <mod_sub_get_vnd+0xfc>)
    f33c:	4805      	ldr	r0, [pc, #20]	; (f354 <mod_sub_get_vnd+0x104>)
    f33e:	1a9b      	subs	r3, r3, r2
    f340:	08db      	lsrs	r3, r3, #3
    f342:	f363 118f 	bfi	r1, r3, #6, #10
    f346:	e7a2      	b.n	f28e <mod_sub_get_vnd+0x3e>
    f348:	000233ec 	.word	0x000233ec
    f34c:	00023494 	.word	0x00023494
    f350:	00026ac3 	.word	0x00026ac3
    f354:	00026b05 	.word	0x00026b05

0000f358 <va_add>:
{
    f358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f35c:	4c1c      	ldr	r4, [pc, #112]	; (f3d0 <va_add+0x78>)
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    f35e:	2600      	movs	r6, #0
{
    f360:	4607      	mov	r7, r0
    f362:	4688      	mov	r8, r1
	struct label *free_slot = NULL;
    f364:	4635      	mov	r5, r6
    f366:	46a1      	mov	r9, r4
		if (!labels[i].ref) {
    f368:	8823      	ldrh	r3, [r4, #0]
    f36a:	b19b      	cbz	r3, f394 <va_add+0x3c>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    f36c:	2210      	movs	r2, #16
    f36e:	4639      	mov	r1, r7
    f370:	1d20      	adds	r0, r4, #4
    f372:	f010 f922 	bl	1f5ba <memcmp>
    f376:	b970      	cbnz	r0, f396 <va_add+0x3e>
			*addr = labels[i].addr;
    f378:	2314      	movs	r3, #20
    f37a:	435e      	muls	r6, r3
    f37c:	eb09 0306 	add.w	r3, r9, r6
    f380:	885b      	ldrh	r3, [r3, #2]
    f382:	f8a8 3000 	strh.w	r3, [r8]
			labels[i].ref++;
    f386:	f839 3006 	ldrh.w	r3, [r9, r6]
    f38a:	3301      	adds	r3, #1
    f38c:	f829 3006 	strh.w	r3, [r9, r6]
}
    f390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f394:	4625      	mov	r5, r4
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    f396:	3601      	adds	r6, #1
    f398:	2e03      	cmp	r6, #3
    f39a:	f104 0414 	add.w	r4, r4, #20
    f39e:	d1e3      	bne.n	f368 <va_add+0x10>
	if (!free_slot) {
    f3a0:	b18d      	cbz	r5, f3c6 <va_add+0x6e>
	if (bt_mesh_virtual_addr(label_uuid, addr) < 0) {
    f3a2:	4641      	mov	r1, r8
    f3a4:	4638      	mov	r0, r7
    f3a6:	f7fe ffb7 	bl	e318 <bt_mesh_virtual_addr>
    f3aa:	2800      	cmp	r0, #0
    f3ac:	db0d      	blt.n	f3ca <va_add+0x72>
	free_slot->ref = 1U;
    f3ae:	2301      	movs	r3, #1
    f3b0:	802b      	strh	r3, [r5, #0]
	free_slot->addr = *addr;
    f3b2:	f8b8 3000 	ldrh.w	r3, [r8]
    f3b6:	806b      	strh	r3, [r5, #2]
	memcpy(free_slot->uuid, label_uuid, 16);
    f3b8:	2210      	movs	r2, #16
    f3ba:	4639      	mov	r1, r7
    f3bc:	1d28      	adds	r0, r5, #4
    f3be:	f010 f923 	bl	1f608 <memcpy>
	return STATUS_SUCCESS;
    f3c2:	2000      	movs	r0, #0
    f3c4:	e7e4      	b.n	f390 <va_add+0x38>
		return STATUS_INSUFF_RESOURCES;
    f3c6:	2005      	movs	r0, #5
    f3c8:	e7e2      	b.n	f390 <va_add+0x38>
		return STATUS_UNSPECIFIED;
    f3ca:	2010      	movs	r0, #16
    f3cc:	e7e0      	b.n	f390 <va_add+0x38>
    f3ce:	bf00      	nop
    f3d0:	20001cfc 	.word	0x20001cfc

0000f3d4 <send_krp_status>:
{
    f3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3d6:	b089      	sub	sp, #36	; 0x24
    f3d8:	460d      	mov	r5, r1
    f3da:	461e      	mov	r6, r3
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
    f3dc:	a902      	add	r1, sp, #8
    f3de:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
    f3e2:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
    f3e6:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
    f3e8:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
    f3ea:	a805      	add	r0, sp, #20
    f3ec:	f248 0117 	movw	r1, #32791	; 0x8017
{
    f3f0:	4617      	mov	r7, r2
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
    f3f2:	f011 fef2 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
    f3f6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    f3fa:	a805      	add	r0, sp, #20
    f3fc:	f013 f8d4 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
    f400:	4639      	mov	r1, r7
    f402:	a805      	add	r0, sp, #20
    f404:	f013 f8d8 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
    f408:	4631      	mov	r1, r6
    f40a:	a805      	add	r0, sp, #20
    f40c:	f013 f8cc 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f410:	2300      	movs	r3, #0
    f412:	9300      	str	r3, [sp, #0]
    f414:	aa05      	add	r2, sp, #20
    f416:	4629      	mov	r1, r5
    f418:	4620      	mov	r0, r4
    f41a:	f011 ff07 	bl	2122c <bt_mesh_model_send>
    f41e:	b168      	cbz	r0, f43c <send_krp_status+0x68>
		BT_ERR("Unable to send Key Refresh State Status");
    f420:	2301      	movs	r3, #1
    f422:	f04f 0100 	mov.w	r1, #0
    f426:	f363 0107 	bfi	r1, r3, #0, #8
    f42a:	4a05      	ldr	r2, [pc, #20]	; (f440 <send_krp_status+0x6c>)
    f42c:	4b05      	ldr	r3, [pc, #20]	; (f444 <send_krp_status+0x70>)
    f42e:	4806      	ldr	r0, [pc, #24]	; (f448 <send_krp_status+0x74>)
    f430:	1a9b      	subs	r3, r3, r2
    f432:	08db      	lsrs	r3, r3, #3
    f434:	f363 118f 	bfi	r1, r3, #6, #10
    f438:	f00f f803 	bl	1e442 <log_0>
}
    f43c:	b009      	add	sp, #36	; 0x24
    f43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f440:	000233ec 	.word	0x000233ec
    f444:	00023494 	.word	0x00023494
    f448:	00026d09 	.word	0x00026d09

0000f44c <krp_get>:
{
    f44c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f44e:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
    f450:	4610      	mov	r0, r2
{
    f452:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
    f454:	f013 f91e 	bl	22694 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    f458:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    f45c:	4604      	mov	r4, r0
	if (idx > 0xfff) {
    f45e:	d311      	bcc.n	f484 <krp_get+0x38>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    f460:	2301      	movs	r3, #1
    f462:	f04f 0200 	mov.w	r2, #0
    f466:	f363 0207 	bfi	r2, r3, #0, #8
    f46a:	490e      	ldr	r1, [pc, #56]	; (f4a4 <krp_get+0x58>)
    f46c:	4b0e      	ldr	r3, [pc, #56]	; (f4a8 <krp_get+0x5c>)
    f46e:	1a5b      	subs	r3, r3, r1
    f470:	08db      	lsrs	r3, r3, #3
    f472:	4601      	mov	r1, r0
    f474:	480d      	ldr	r0, [pc, #52]	; (f4ac <krp_get+0x60>)
    f476:	f363 128f 	bfi	r2, r3, #6, #10
}
    f47a:	b002      	add	sp, #8
    f47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    f480:	f00e bfec 	b.w	1e45c <log_1>
	sub = bt_mesh_subnet_get(idx);
    f484:	f7fc fd8a 	bl	bf9c <bt_mesh_subnet_get>
	if (!sub) {
    f488:	4603      	mov	r3, r0
    f48a:	b940      	cbnz	r0, f49e <krp_get+0x52>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
    f48c:	2204      	movs	r2, #4
		send_krp_status(model, ctx, idx, sub->kr_phase,
    f48e:	9200      	str	r2, [sp, #0]
    f490:	4631      	mov	r1, r6
    f492:	4622      	mov	r2, r4
    f494:	4628      	mov	r0, r5
    f496:	f7ff ff9d 	bl	f3d4 <send_krp_status>
}
    f49a:	b002      	add	sp, #8
    f49c:	bd70      	pop	{r4, r5, r6, pc}
		send_krp_status(model, ctx, idx, sub->kr_phase,
    f49e:	7fc3      	ldrb	r3, [r0, #31]
    f4a0:	2200      	movs	r2, #0
    f4a2:	e7f4      	b.n	f48e <krp_get+0x42>
    f4a4:	000233ec 	.word	0x000233ec
    f4a8:	00023494 	.word	0x00023494
    f4ac:	00026be2 	.word	0x00026be2

0000f4b0 <krp_set>:
{
    f4b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f4b4:	4607      	mov	r7, r0
	idx = net_buf_simple_pull_le16(buf);
    f4b6:	4610      	mov	r0, r2
{
    f4b8:	4614      	mov	r4, r2
    f4ba:	4688      	mov	r8, r1
	idx = net_buf_simple_pull_le16(buf);
    f4bc:	f013 f8ea 	bl	22694 <net_buf_simple_pull_le16>
    f4c0:	4605      	mov	r5, r0
	phase = net_buf_simple_pull_u8(buf);
    f4c2:	4620      	mov	r0, r4
    f4c4:	f013 f8de 	bl	22684 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
    f4c8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
    f4cc:	4606      	mov	r6, r0
	if (idx > 0xfff) {
    f4ce:	d311      	bcc.n	f4f4 <krp_set+0x44>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    f4d0:	2301      	movs	r3, #1
    f4d2:	f04f 0200 	mov.w	r2, #0
    f4d6:	f363 0207 	bfi	r2, r3, #0, #8
    f4da:	4927      	ldr	r1, [pc, #156]	; (f578 <krp_set+0xc8>)
    f4dc:	4b27      	ldr	r3, [pc, #156]	; (f57c <krp_set+0xcc>)
    f4de:	4828      	ldr	r0, [pc, #160]	; (f580 <krp_set+0xd0>)
    f4e0:	1a5b      	subs	r3, r3, r1
    f4e2:	08db      	lsrs	r3, r3, #3
    f4e4:	f363 128f 	bfi	r2, r3, #6, #10
    f4e8:	4629      	mov	r1, r5
}
    f4ea:	b002      	add	sp, #8
    f4ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    f4f0:	f00e bfb4 	b.w	1e45c <log_1>
	sub = bt_mesh_subnet_get(idx);
    f4f4:	4628      	mov	r0, r5
    f4f6:	f7fc fd51 	bl	bf9c <bt_mesh_subnet_get>
	if (!sub) {
    f4fa:	4604      	mov	r4, r0
    f4fc:	b950      	cbnz	r0, f514 <krp_set+0x64>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
    f4fe:	2304      	movs	r3, #4
    f500:	9300      	str	r3, [sp, #0]
    f502:	4603      	mov	r3, r0
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
    f504:	462a      	mov	r2, r5
    f506:	4641      	mov	r1, r8
    f508:	4638      	mov	r0, r7
    f50a:	f7ff ff63 	bl	f3d4 <send_krp_status>
}
    f50e:	b002      	add	sp, #8
    f510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
    f514:	1eb3      	subs	r3, r6, #2
    f516:	b2db      	uxtb	r3, r3
    f518:	2b01      	cmp	r3, #1
    f51a:	7fc1      	ldrb	r1, [r0, #31]
    f51c:	d802      	bhi.n	f524 <krp_set+0x74>
    f51e:	b999      	cbnz	r1, f548 <krp_set+0x98>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
    f520:	2e02      	cmp	r6, #2
    f522:	d11a      	bne.n	f55a <krp_set+0xaa>
		BT_WARN("Prohibited transition %u -> %u", sub->kr_phase, phase);
    f524:	2202      	movs	r2, #2
    f526:	f04f 0300 	mov.w	r3, #0
    f52a:	f362 0307 	bfi	r3, r2, #0, #8
    f52e:	4812      	ldr	r0, [pc, #72]	; (f578 <krp_set+0xc8>)
    f530:	4a12      	ldr	r2, [pc, #72]	; (f57c <krp_set+0xcc>)
    f532:	1a12      	subs	r2, r2, r0
    f534:	08d2      	lsrs	r2, r2, #3
    f536:	4813      	ldr	r0, [pc, #76]	; (f584 <krp_set+0xd4>)
    f538:	f362 138f 	bfi	r3, r2, #6, #10
    f53c:	4632      	mov	r2, r6
}
    f53e:	b002      	add	sp, #8
    f540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Prohibited transition %u -> %u", sub->kr_phase, phase);
    f544:	f00e bf9e 	b.w	1e484 <log_2>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1 &&
    f548:	2901      	cmp	r1, #1
    f54a:	d10a      	bne.n	f562 <krp_set+0xb2>
    f54c:	2e02      	cmp	r6, #2
    f54e:	d10a      	bne.n	f566 <krp_set+0xb6>
		sub->kr_flag = 1;
    f550:	f240 2301 	movw	r3, #513	; 0x201
    f554:	83c3      	strh	r3, [r0, #30]
		bt_mesh_net_beacon_update(sub);
    f556:	f7fc fdbd 	bl	c0d4 <bt_mesh_net_beacon_update>
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
    f55a:	2200      	movs	r2, #0
    f55c:	7fe3      	ldrb	r3, [r4, #31]
    f55e:	9200      	str	r2, [sp, #0]
    f560:	e7d0      	b.n	f504 <krp_set+0x54>
	} else if ((sub->kr_phase == BT_MESH_KR_PHASE_1 ||
    f562:	2902      	cmp	r1, #2
    f564:	d1f9      	bne.n	f55a <krp_set+0xaa>
		    sub->kr_phase == BT_MESH_KR_PHASE_2) &&
    f566:	2e03      	cmp	r6, #3
    f568:	d1f7      	bne.n	f55a <krp_set+0xaa>
		bt_mesh_net_revoke_keys(sub);
    f56a:	4620      	mov	r0, r4
    f56c:	f7fc fe0e 	bl	c18c <bt_mesh_net_revoke_keys>
		sub->kr_flag = 0;
    f570:	2300      	movs	r3, #0
    f572:	83e3      	strh	r3, [r4, #30]
		bt_mesh_net_beacon_update(sub);
    f574:	4620      	mov	r0, r4
    f576:	e7ee      	b.n	f556 <krp_set+0xa6>
    f578:	000233ec 	.word	0x000233ec
    f57c:	00023494 	.word	0x00023494
    f580:	00026be2 	.word	0x00026be2
    f584:	00026985 	.word	0x00026985

0000f588 <send_friend_status>:
{
    f588:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    f58a:	6986      	ldr	r6, [r0, #24]
{
    f58c:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
    f58e:	ab03      	add	r3, sp, #12
    f590:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
    f594:	4604      	mov	r4, r0
    f596:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
    f598:	a805      	add	r0, sp, #20
    f59a:	f248 0111 	movw	r1, #32785	; 0x8011
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
    f59e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f5a2:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
    f5a4:	f011 fe19 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, cfg->frnd);
    f5a8:	7a71      	ldrb	r1, [r6, #9]
    f5aa:	a805      	add	r0, sp, #20
    f5ac:	f012 fffc 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f5b0:	2300      	movs	r3, #0
    f5b2:	9300      	str	r3, [sp, #0]
    f5b4:	aa05      	add	r2, sp, #20
    f5b6:	4629      	mov	r1, r5
    f5b8:	4620      	mov	r0, r4
    f5ba:	f011 fe37 	bl	2122c <bt_mesh_model_send>
    f5be:	b168      	cbz	r0, f5dc <send_friend_status+0x54>
		BT_ERR("Unable to send Friend Status");
    f5c0:	2301      	movs	r3, #1
    f5c2:	f04f 0100 	mov.w	r1, #0
    f5c6:	f363 0107 	bfi	r1, r3, #0, #8
    f5ca:	4a05      	ldr	r2, [pc, #20]	; (f5e0 <send_friend_status+0x58>)
    f5cc:	4b05      	ldr	r3, [pc, #20]	; (f5e4 <send_friend_status+0x5c>)
    f5ce:	4806      	ldr	r0, [pc, #24]	; (f5e8 <send_friend_status+0x60>)
    f5d0:	1a9b      	subs	r3, r3, r2
    f5d2:	08db      	lsrs	r3, r3, #3
    f5d4:	f363 118f 	bfi	r1, r3, #6, #10
    f5d8:	f00e ff33 	bl	1e442 <log_0>
}
    f5dc:	b008      	add	sp, #32
    f5de:	bd70      	pop	{r4, r5, r6, pc}
    f5e0:	000233ec 	.word	0x000233ec
    f5e4:	00023494 	.word	0x00023494
    f5e8:	00026ccb 	.word	0x00026ccb

0000f5ec <net_key_get>:
{
    f5ec:	b530      	push	{r4, r5, lr}
    f5ee:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg,
    f5f0:	ab02      	add	r3, sp, #8
    f5f2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
{
    f5f6:	4604      	mov	r4, r0
    f5f8:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
    f5fa:	a805      	add	r0, sp, #20
    f5fc:	f248 0143 	movw	r1, #32835	; 0x8043
	NET_BUF_SIMPLE_DEFINE(msg,
    f600:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f604:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
    f606:	f011 fde8 	bl	211da <bt_mesh_model_msg_init>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    f60a:	4b17      	ldr	r3, [pc, #92]	; (f668 <net_key_get+0x7c>)
    f60c:	f8b3 21a4 	ldrh.w	r2, [r3, #420]	; 0x1a4
    f610:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
    f614:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f618:	429a      	cmp	r2, r3
    f61a:	d01c      	beq.n	f656 <net_key_get+0x6a>
		if (prev == BT_MESH_KEY_UNUSED) {
    f61c:	4299      	cmp	r1, r3
    f61e:	d01d      	beq.n	f65c <net_key_get+0x70>
		key_idx_pack(&msg, prev, sub->net_idx);
    f620:	a805      	add	r0, sp, #20
    f622:	f011 fe54 	bl	212ce <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f626:	2300      	movs	r3, #0
    f628:	9300      	str	r3, [sp, #0]
    f62a:	aa05      	add	r2, sp, #20
    f62c:	4629      	mov	r1, r5
    f62e:	4620      	mov	r0, r4
    f630:	f011 fdfc 	bl	2122c <bt_mesh_model_send>
    f634:	b168      	cbz	r0, f652 <net_key_get+0x66>
		BT_ERR("Unable to send NetKey List");
    f636:	2301      	movs	r3, #1
    f638:	f04f 0100 	mov.w	r1, #0
    f63c:	f363 0107 	bfi	r1, r3, #0, #8
    f640:	4a0a      	ldr	r2, [pc, #40]	; (f66c <net_key_get+0x80>)
    f642:	4b0b      	ldr	r3, [pc, #44]	; (f670 <net_key_get+0x84>)
    f644:	480b      	ldr	r0, [pc, #44]	; (f674 <net_key_get+0x88>)
    f646:	1a9b      	subs	r3, r3, r2
    f648:	08db      	lsrs	r3, r3, #3
    f64a:	f363 118f 	bfi	r1, r3, #6, #10
    f64e:	f00e fef8 	bl	1e442 <log_0>
}
    f652:	b009      	add	sp, #36	; 0x24
    f654:	bd30      	pop	{r4, r5, pc}
	if (prev != BT_MESH_KEY_UNUSED) {
    f656:	4291      	cmp	r1, r2
    f658:	d0e5      	beq.n	f626 <net_key_get+0x3a>
    f65a:	460a      	mov	r2, r1
		net_buf_simple_add_le16(&msg, prev);
    f65c:	4611      	mov	r1, r2
    f65e:	a805      	add	r0, sp, #20
    f660:	f012 ffaa 	bl	225b8 <net_buf_simple_add_le16>
    f664:	e7df      	b.n	f626 <net_key_get+0x3a>
    f666:	bf00      	nop
    f668:	20007924 	.word	0x20007924
    f66c:	000233ec 	.word	0x000233ec
    f670:	00023494 	.word	0x00023494
    f674:	00026b48 	.word	0x00026b48

0000f678 <send_net_key_status>:
{
    f678:	b5f0      	push	{r4, r5, r6, r7, lr}
    f67a:	b089      	sub	sp, #36	; 0x24
    f67c:	460d      	mov	r5, r1
    f67e:	461f      	mov	r7, r3
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4);
    f680:	a902      	add	r1, sp, #8
    f682:	f44f 2310 	mov.w	r3, #589824	; 0x90000
    f686:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
    f68a:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4);
    f68c:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
    f68e:	a805      	add	r0, sp, #20
    f690:	f248 0144 	movw	r1, #32836	; 0x8044
{
    f694:	4616      	mov	r6, r2
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
    f696:	f011 fda0 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
    f69a:	4639      	mov	r1, r7
    f69c:	a805      	add	r0, sp, #20
    f69e:	f012 ff83 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
    f6a2:	4631      	mov	r1, r6
    f6a4:	a805      	add	r0, sp, #20
    f6a6:	f012 ff87 	bl	225b8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f6aa:	2300      	movs	r3, #0
    f6ac:	9300      	str	r3, [sp, #0]
    f6ae:	aa05      	add	r2, sp, #20
    f6b0:	4629      	mov	r1, r5
    f6b2:	4620      	mov	r0, r4
    f6b4:	f011 fdba 	bl	2122c <bt_mesh_model_send>
    f6b8:	b168      	cbz	r0, f6d6 <send_net_key_status+0x5e>
		BT_ERR("Unable to send NetKey Status");
    f6ba:	2301      	movs	r3, #1
    f6bc:	f04f 0100 	mov.w	r1, #0
    f6c0:	f363 0107 	bfi	r1, r3, #0, #8
    f6c4:	4a05      	ldr	r2, [pc, #20]	; (f6dc <send_net_key_status+0x64>)
    f6c6:	4b06      	ldr	r3, [pc, #24]	; (f6e0 <send_net_key_status+0x68>)
    f6c8:	4806      	ldr	r0, [pc, #24]	; (f6e4 <send_net_key_status+0x6c>)
    f6ca:	1a9b      	subs	r3, r3, r2
    f6cc:	08db      	lsrs	r3, r3, #3
    f6ce:	f363 118f 	bfi	r1, r3, #6, #10
    f6d2:	f00e feb6 	bl	1e442 <log_0>
}
    f6d6:	b009      	add	sp, #36	; 0x24
    f6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f6da:	bf00      	nop
    f6dc:	000233ec 	.word	0x000233ec
    f6e0:	00023494 	.word	0x00023494
    f6e4:	00026d82 	.word	0x00026d82

0000f6e8 <net_key_update>:
{
    f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6ec:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
    f6ee:	4610      	mov	r0, r2
{
    f6f0:	460f      	mov	r7, r1
    f6f2:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
    f6f4:	f012 ffce 	bl	22694 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    f6f8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    f6fc:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    f6fe:	d310      	bcc.n	f722 <net_key_update+0x3a>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    f700:	2301      	movs	r3, #1
    f702:	f04f 0200 	mov.w	r2, #0
    f706:	f363 0207 	bfi	r2, r3, #0, #8
    f70a:	4924      	ldr	r1, [pc, #144]	; (f79c <net_key_update+0xb4>)
    f70c:	4b24      	ldr	r3, [pc, #144]	; (f7a0 <net_key_update+0xb8>)
    f70e:	1a5b      	subs	r3, r3, r1
    f710:	08db      	lsrs	r3, r3, #3
    f712:	4601      	mov	r1, r0
    f714:	f363 128f 	bfi	r2, r3, #6, #10
    f718:	4822      	ldr	r0, [pc, #136]	; (f7a4 <net_key_update+0xbc>)
}
    f71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    f71e:	f00e be9d 	b.w	1e45c <log_1>
	sub = bt_mesh_subnet_get(idx);
    f722:	f7fc fc3b 	bl	bf9c <bt_mesh_subnet_get>
	if (!sub) {
    f726:	4604      	mov	r4, r0
    f728:	b938      	cbnz	r0, f73a <net_key_update+0x52>
		send_net_key_status(model, ctx, idx, STATUS_INVALID_NETKEY);
    f72a:	2304      	movs	r3, #4
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    f72c:	462a      	mov	r2, r5
    f72e:	4639      	mov	r1, r7
    f730:	4630      	mov	r0, r6
}
    f732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    f736:	f7ff bf9f 	b.w	f678 <send_net_key_status>
	switch (sub->kr_phase) {
    f73a:	7fc3      	ldrb	r3, [r0, #31]
    f73c:	2b03      	cmp	r3, #3
    f73e:	d819      	bhi.n	f774 <net_key_update+0x8c>
    f740:	e8df f003 	tbb	[pc, r3]
    f744:	16160c02 	.word	0x16160c02
		if (!memcmp(buf->data, sub->keys[0].net, 16)) {
    f748:	f100 0130 	add.w	r1, r0, #48	; 0x30
    f74c:	2210      	movs	r2, #16
    f74e:	f8d8 0000 	ldr.w	r0, [r8]
    f752:	f00f ff32 	bl	1f5ba <memcmp>
    f756:	b968      	cbnz	r0, f774 <net_key_update+0x8c>
}
    f758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(buf->data, sub->keys[1].net, 16)) {
    f75c:	f100 0189 	add.w	r1, r0, #137	; 0x89
    f760:	2210      	movs	r2, #16
    f762:	f8d8 0000 	ldr.w	r0, [r8]
    f766:	f00f ff28 	bl	1f5ba <memcmp>
    f76a:	4603      	mov	r3, r0
    f76c:	2800      	cmp	r0, #0
    f76e:	d0dd      	beq.n	f72c <net_key_update+0x44>
		send_net_key_status(model, ctx, idx, STATUS_CANNOT_UPDATE);
    f770:	230b      	movs	r3, #11
    f772:	e7db      	b.n	f72c <net_key_update+0x44>
	err = bt_mesh_net_keys_create(&sub->keys[1], buf->data);
    f774:	f8d8 1000 	ldr.w	r1, [r8]
    f778:	f104 0089 	add.w	r0, r4, #137	; 0x89
    f77c:	f7fc fc2c 	bl	bfd8 <bt_mesh_net_keys_create>
	if (err) {
    f780:	4680      	mov	r8, r0
    f782:	b108      	cbz	r0, f788 <net_key_update+0xa0>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
    f784:	2310      	movs	r3, #16
    f786:	e7d1      	b.n	f72c <net_key_update+0x44>
	sub->kr_phase = BT_MESH_KR_PHASE_1;
    f788:	2301      	movs	r3, #1
    f78a:	77e3      	strb	r3, [r4, #31]
		bt_mesh_store_subnet(sub);
    f78c:	4620      	mov	r0, r4
    f78e:	f011 ffe7 	bl	21760 <bt_mesh_store_subnet>
	bt_mesh_net_beacon_update(sub);
    f792:	4620      	mov	r0, r4
    f794:	f7fc fc9e 	bl	c0d4 <bt_mesh_net_beacon_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    f798:	4643      	mov	r3, r8
    f79a:	e7c7      	b.n	f72c <net_key_update+0x44>
    f79c:	000233ec 	.word	0x000233ec
    f7a0:	00023494 	.word	0x00023494
    f7a4:	00026be2 	.word	0x00026be2

0000f7a8 <net_key_add>:
{
    f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7ac:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
    f7ae:	4610      	mov	r0, r2
{
    f7b0:	460f      	mov	r7, r1
    f7b2:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
    f7b4:	f012 ff6e 	bl	22694 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    f7b8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    f7bc:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    f7be:	d310      	bcc.n	f7e2 <net_key_add+0x3a>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    f7c0:	2301      	movs	r3, #1
    f7c2:	f04f 0200 	mov.w	r2, #0
    f7c6:	f363 0207 	bfi	r2, r3, #0, #8
    f7ca:	4928      	ldr	r1, [pc, #160]	; (f86c <net_key_add+0xc4>)
    f7cc:	4b28      	ldr	r3, [pc, #160]	; (f870 <net_key_add+0xc8>)
    f7ce:	1a5b      	subs	r3, r3, r1
    f7d0:	08db      	lsrs	r3, r3, #3
    f7d2:	4601      	mov	r1, r0
    f7d4:	f363 128f 	bfi	r2, r3, #6, #10
    f7d8:	4826      	ldr	r0, [pc, #152]	; (f874 <net_key_add+0xcc>)
}
    f7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    f7de:	f00e be3d 	b.w	1e45c <log_1>
	sub = bt_mesh_subnet_get(idx);
    f7e2:	f7fc fbdb 	bl	bf9c <bt_mesh_subnet_get>
	if (!sub) {
    f7e6:	4604      	mov	r4, r0
    f7e8:	b978      	cbnz	r0, f80a <net_key_add+0x62>
			if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
    f7ea:	4b23      	ldr	r3, [pc, #140]	; (f878 <net_key_add+0xd0>)
    f7ec:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
    f7f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f7f4:	4291      	cmp	r1, r2
    f7f6:	d004      	beq.n	f802 <net_key_add+0x5a>
    f7f8:	f8b3 11a4 	ldrh.w	r1, [r3, #420]	; 0x1a4
    f7fc:	4291      	cmp	r1, r2
    f7fe:	d114      	bne.n	f82a <net_key_add+0x82>
		for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    f800:	2401      	movs	r4, #1
				sub = &bt_mesh.sub[i];
    f802:	22e4      	movs	r2, #228	; 0xe4
    f804:	fb02 3404 	mla	r4, r2, r4, r3
    f808:	34a4      	adds	r4, #164	; 0xa4
	if (sub->net_idx == idx) {
    f80a:	8ba2      	ldrh	r2, [r4, #28]
    f80c:	f8d8 0000 	ldr.w	r0, [r8]
    f810:	42aa      	cmp	r2, r5
    f812:	f104 0330 	add.w	r3, r4, #48	; 0x30
    f816:	d110      	bne.n	f83a <net_key_add+0x92>
		if (memcmp(buf->data, sub->keys[0].net, 16)) {
    f818:	4619      	mov	r1, r3
    f81a:	2210      	movs	r2, #16
    f81c:	f00f fecd 	bl	1f5ba <memcmp>
			status = STATUS_SUCCESS;
    f820:	2800      	cmp	r0, #0
		send_net_key_status(model, ctx, idx, status);
    f822:	bf14      	ite	ne
    f824:	2306      	movne	r3, #6
    f826:	2300      	moveq	r3, #0
    f828:	e000      	b.n	f82c <net_key_add+0x84>
			send_net_key_status(model, ctx, idx,
    f82a:	2305      	movs	r3, #5
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    f82c:	462a      	mov	r2, r5
    f82e:	4639      	mov	r1, r7
    f830:	4630      	mov	r0, r6
}
    f832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    f836:	f7ff bf1f 	b.w	f678 <send_net_key_status>
	err = bt_mesh_net_keys_create(&sub->keys[0], buf->data);
    f83a:	4601      	mov	r1, r0
    f83c:	4618      	mov	r0, r3
    f83e:	f7fc fbcb 	bl	bfd8 <bt_mesh_net_keys_create>
	if (err) {
    f842:	4680      	mov	r8, r0
    f844:	b108      	cbz	r0, f84a <net_key_add+0xa2>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
    f846:	2310      	movs	r3, #16
    f848:	e7f0      	b.n	f82c <net_key_add+0x84>
		bt_mesh_store_subnet(sub);
    f84a:	4620      	mov	r0, r4
	sub->net_idx = idx;
    f84c:	83a5      	strh	r5, [r4, #28]
		bt_mesh_store_subnet(sub);
    f84e:	f011 ff87 	bl	21760 <bt_mesh_store_subnet>
	bt_mesh_net_beacon_update(sub);
    f852:	4620      	mov	r0, r4
    f854:	f7fc fc3e 	bl	c0d4 <bt_mesh_net_beacon_update>
		bt_mesh_proxy_beacon_send(sub);
    f858:	4620      	mov	r0, r4
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    f85a:	f884 8020 	strb.w	r8, [r4, #32]
		bt_mesh_proxy_beacon_send(sub);
    f85e:	f005 fab5 	bl	14dcc <bt_mesh_proxy_beacon_send>
		bt_mesh_adv_update();
    f862:	f7fb ff09 	bl	b678 <bt_mesh_adv_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    f866:	4643      	mov	r3, r8
    f868:	e7e0      	b.n	f82c <net_key_add+0x84>
    f86a:	bf00      	nop
    f86c:	000233ec 	.word	0x000233ec
    f870:	00023494 	.word	0x00023494
    f874:	00026be2 	.word	0x00026be2
    f878:	20007924 	.word	0x20007924

0000f87c <send_mod_pub_status.isra.9>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
    f87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f880:	b08a      	sub	sp, #40	; 0x28
    f882:	460f      	mov	r7, r1
    f884:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
    f888:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f88c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 14 + 4);
    f88e:	a905      	add	r1, sp, #20
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
    f890:	4699      	mov	r9, r3
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 14 + 4);
    f892:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
    f896:	e9cd 3103 	strd	r3, r1, [sp, #12]
    f89a:	9102      	str	r1, [sp, #8]
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
    f89c:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
    f89e:	f248 0119 	movw	r1, #32793	; 0x8019
    f8a2:	a802      	add	r0, sp, #8
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
    f8a4:	4692      	mov	sl, r2
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
    f8a6:	f011 fc98 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
    f8aa:	4629      	mov	r1, r5
    f8ac:	a802      	add	r0, sp, #8
    f8ae:	f012 fe7b 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
    f8b2:	4651      	mov	r1, sl
    f8b4:	a802      	add	r0, sp, #8
    f8b6:	f012 fe7f 	bl	225b8 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
    f8ba:	b35d      	cbz	r5, f914 <send_mod_pub_status.isra.9+0x98>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
    f8bc:	2107      	movs	r1, #7
    f8be:	a802      	add	r0, sp, #8
    f8c0:	f012 fe63 	bl	2258a <net_buf_simple_add>
    f8c4:	2207      	movs	r2, #7
    f8c6:	2100      	movs	r1, #0
    f8c8:	f00f fec8 	bl	1f65c <memset>
	if (vnd) {
    f8cc:	f1b8 0f00 	cmp.w	r8, #0
    f8d0:	d03e      	beq.n	f950 <send_mod_pub_status.isra.9+0xd4>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
    f8d2:	2104      	movs	r1, #4
    f8d4:	a802      	add	r0, sp, #8
    f8d6:	f012 fe58 	bl	2258a <net_buf_simple_add>
    f8da:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
    f8dc:	9915      	ldr	r1, [sp, #84]	; 0x54
    f8de:	f00f fe93 	bl	1f608 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
    f8e2:	2300      	movs	r3, #0
    f8e4:	9300      	str	r3, [sp, #0]
    f8e6:	aa02      	add	r2, sp, #8
    f8e8:	4639      	mov	r1, r7
    f8ea:	4630      	mov	r0, r6
    f8ec:	f011 fc9e 	bl	2122c <bt_mesh_model_send>
    f8f0:	b168      	cbz	r0, f90e <send_mod_pub_status.isra.9+0x92>
		BT_ERR("Unable to send Model Publication Status");
    f8f2:	2301      	movs	r3, #1
    f8f4:	f04f 0100 	mov.w	r1, #0
    f8f8:	f363 0107 	bfi	r1, r3, #0, #8
    f8fc:	4a17      	ldr	r2, [pc, #92]	; (f95c <send_mod_pub_status.isra.9+0xe0>)
    f8fe:	4b18      	ldr	r3, [pc, #96]	; (f960 <send_mod_pub_status.isra.9+0xe4>)
    f900:	4818      	ldr	r0, [pc, #96]	; (f964 <send_mod_pub_status.isra.9+0xe8>)
    f902:	1a9b      	subs	r3, r3, r2
    f904:	08db      	lsrs	r3, r3, #3
    f906:	f363 118f 	bfi	r1, r3, #6, #10
    f90a:	f00e fd9a 	bl	1e442 <log_0>
}
    f90e:	b00a      	add	sp, #40	; 0x28
    f910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
    f914:	4649      	mov	r1, r9
    f916:	a802      	add	r0, sp, #8
    f918:	f012 fe4e 	bl	225b8 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (u16_t)mod->pub->cred << 12;
    f91c:	6822      	ldr	r2, [r4, #0]
    f91e:	7ad3      	ldrb	r3, [r2, #11]
    f920:	88d1      	ldrh	r1, [r2, #6]
    f922:	f3c3 1300 	ubfx	r3, r3, #4, #1
		net_buf_simple_add_le16(&msg, idx_cred);
    f926:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
    f92a:	a802      	add	r0, sp, #8
    f92c:	f012 fe44 	bl	225b8 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
    f930:	6823      	ldr	r3, [r4, #0]
    f932:	a802      	add	r0, sp, #8
    f934:	7a19      	ldrb	r1, [r3, #8]
    f936:	f012 fe37 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
    f93a:	6823      	ldr	r3, [r4, #0]
    f93c:	a802      	add	r0, sp, #8
    f93e:	7a99      	ldrb	r1, [r3, #10]
    f940:	f012 fe32 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
    f944:	6823      	ldr	r3, [r4, #0]
    f946:	a802      	add	r0, sp, #8
    f948:	7a59      	ldrb	r1, [r3, #9]
    f94a:	f012 fe2d 	bl	225a8 <net_buf_simple_add_u8>
    f94e:	e7bd      	b.n	f8cc <send_mod_pub_status.isra.9+0x50>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
    f950:	2102      	movs	r1, #2
    f952:	a802      	add	r0, sp, #8
    f954:	f012 fe19 	bl	2258a <net_buf_simple_add>
    f958:	2202      	movs	r2, #2
    f95a:	e7bf      	b.n	f8dc <send_mod_pub_status.isra.9+0x60>
    f95c:	000233ec 	.word	0x000233ec
    f960:	00023494 	.word	0x00023494
    f964:	00026d31 	.word	0x00026d31

0000f968 <mod_app_get>:
{
    f968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f96c:	4615      	mov	r5, r2
    f96e:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + KEY_LIST_LEN + 4);
    f970:	ab07      	add	r3, sp, #28
    f972:	f44f 1298 	mov.w	r2, #1245184	; 0x130000
{
    f976:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
    f978:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + KEY_LIST_LEN + 4);
    f97a:	9304      	str	r3, [sp, #16]
    f97c:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
    f980:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    f982:	f012 fe87 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    f986:	b203      	sxth	r3, r0
    f988:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    f98a:	4681      	mov	r9, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    f98c:	dc10      	bgt.n	f9b0 <mod_app_get+0x48>
		BT_WARN("Prohibited element address");
    f98e:	2302      	movs	r3, #2
    f990:	f04f 0100 	mov.w	r1, #0
    f994:	f363 0107 	bfi	r1, r3, #0, #8
    f998:	4a34      	ldr	r2, [pc, #208]	; (fa6c <mod_app_get+0x104>)
    f99a:	4b35      	ldr	r3, [pc, #212]	; (fa70 <mod_app_get+0x108>)
    f99c:	4835      	ldr	r0, [pc, #212]	; (fa74 <mod_app_get+0x10c>)
    f99e:	1a9b      	subs	r3, r3, r2
    f9a0:	08db      	lsrs	r3, r3, #3
    f9a2:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Model Application List message");
    f9a6:	f00e fd4c 	bl	1e442 <log_0>
}
    f9aa:	b00d      	add	sp, #52	; 0x34
    f9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_id = buf->data;
    f9b0:	f8d5 8000 	ldr.w	r8, [r5]
	elem = bt_mesh_elem_find(elem_addr);
    f9b4:	f7fe fec0 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
    f9b8:	4604      	mov	r4, r0
    f9ba:	2800      	cmp	r0, #0
    f9bc:	d147      	bne.n	fa4e <mod_app_get+0xe6>
		vnd = (buf->len == 4);
    f9be:	88ab      	ldrh	r3, [r5, #4]
    f9c0:	1f1a      	subs	r2, r3, #4
    f9c2:	4253      	negs	r3, r2
    f9c4:	4153      	adcs	r3, r2
    f9c6:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
    f9ca:	2501      	movs	r5, #1
	if (vnd) {
    f9cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f9d0:	2b00      	cmp	r3, #0
    f9d2:	d046      	beq.n	fa62 <mod_app_get+0xfa>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
    f9d4:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
    f9d8:	a804      	add	r0, sp, #16
    f9da:	f011 fbfe 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
    f9de:	4629      	mov	r1, r5
    f9e0:	a804      	add	r0, sp, #16
    f9e2:	f012 fde1 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
    f9e6:	4649      	mov	r1, r9
    f9e8:	a804      	add	r0, sp, #16
    f9ea:	f012 fde5 	bl	225b8 <net_buf_simple_add_le16>
	if (vnd) {
    f9ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	d038      	beq.n	fa68 <mod_app_get+0x100>
		net_buf_simple_add_mem(&msg, mod_id, 4);
    f9f6:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
    f9f8:	4641      	mov	r1, r8
    f9fa:	a804      	add	r0, sp, #16
    f9fc:	f012 fdcb 	bl	22596 <net_buf_simple_add_mem>
	if (mod) {
    fa00:	b17c      	cbz	r4, fa22 <mod_app_get+0xba>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
    fa02:	89a1      	ldrh	r1, [r4, #12]
    fa04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fa08:	4299      	cmp	r1, r3
    fa0a:	d002      	beq.n	fa12 <mod_app_get+0xaa>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
    fa0c:	a804      	add	r0, sp, #16
    fa0e:	f012 fdd3 	bl	225b8 <net_buf_simple_add_le16>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
    fa12:	89e1      	ldrh	r1, [r4, #14]
    fa14:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fa18:	4299      	cmp	r1, r3
    fa1a:	d002      	beq.n	fa22 <mod_app_get+0xba>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
    fa1c:	a804      	add	r0, sp, #16
    fa1e:	f012 fdcb 	bl	225b8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fa22:	2300      	movs	r3, #0
    fa24:	9300      	str	r3, [sp, #0]
    fa26:	aa04      	add	r2, sp, #16
    fa28:	4639      	mov	r1, r7
    fa2a:	4630      	mov	r0, r6
    fa2c:	f011 fbfe 	bl	2122c <bt_mesh_model_send>
    fa30:	2800      	cmp	r0, #0
    fa32:	d0ba      	beq.n	f9aa <mod_app_get+0x42>
		BT_ERR("Unable to send Model Application List message");
    fa34:	2301      	movs	r3, #1
    fa36:	f04f 0100 	mov.w	r1, #0
    fa3a:	f363 0107 	bfi	r1, r3, #0, #8
    fa3e:	4a0b      	ldr	r2, [pc, #44]	; (fa6c <mod_app_get+0x104>)
    fa40:	4b0b      	ldr	r3, [pc, #44]	; (fa70 <mod_app_get+0x108>)
    fa42:	480d      	ldr	r0, [pc, #52]	; (fa78 <mod_app_get+0x110>)
    fa44:	1a9b      	subs	r3, r3, r2
    fa46:	08db      	lsrs	r3, r3, #3
    fa48:	f363 118f 	bfi	r1, r3, #6, #10
    fa4c:	e7ab      	b.n	f9a6 <mod_app_get+0x3e>
	mod = get_model(elem, buf, &vnd);
    fa4e:	4629      	mov	r1, r5
    fa50:	f10d 020f 	add.w	r2, sp, #15
    fa54:	f011 fcba 	bl	213cc <get_model>
		status = STATUS_INVALID_MODEL;
    fa58:	1e04      	subs	r4, r0, #0
    fa5a:	bf14      	ite	ne
    fa5c:	2500      	movne	r5, #0
    fa5e:	2502      	moveq	r5, #2
    fa60:	e7b4      	b.n	f9cc <mod_app_get+0x64>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
    fa62:	f248 014c 	movw	r1, #32844	; 0x804c
    fa66:	e7b7      	b.n	f9d8 <mod_app_get+0x70>
		net_buf_simple_add_mem(&msg, mod_id, 2);
    fa68:	2202      	movs	r2, #2
    fa6a:	e7c5      	b.n	f9f8 <mod_app_get+0x90>
    fa6c:	000233ec 	.word	0x000233ec
    fa70:	00023494 	.word	0x00023494
    fa74:	00026ac3 	.word	0x00026ac3
    fa78:	00026a4c 	.word	0x00026a4c

0000fa7c <mod_app_unbind>:
{
    fa7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa80:	4614      	mov	r4, r2
    fa82:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
    fa84:	ab06      	add	r3, sp, #24
    fa86:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
    fa8a:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
    fa8c:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
    fa8e:	9303      	str	r3, [sp, #12]
    fa90:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
    fa94:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    fa96:	f012 fdfd 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    fa9a:	b203      	sxth	r3, r0
    fa9c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    fa9e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    faa0:	dc10      	bgt.n	fac4 <mod_app_unbind+0x48>
		BT_WARN("Prohibited element address");
    faa2:	2302      	movs	r3, #2
    faa4:	f04f 0100 	mov.w	r1, #0
    faa8:	f363 0107 	bfi	r1, r3, #0, #8
    faac:	4a28      	ldr	r2, [pc, #160]	; (fb50 <mod_app_unbind+0xd4>)
    faae:	4b29      	ldr	r3, [pc, #164]	; (fb54 <mod_app_unbind+0xd8>)
    fab0:	4829      	ldr	r0, [pc, #164]	; (fb58 <mod_app_unbind+0xdc>)
    fab2:	1a9b      	subs	r3, r3, r2
    fab4:	08db      	lsrs	r3, r3, #3
    fab6:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Model App Unbind Status response");
    faba:	f00e fcc2 	bl	1e442 <log_0>
}
    fabe:	b00b      	add	sp, #44	; 0x2c
    fac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
    fac4:	4620      	mov	r0, r4
    fac6:	f012 fde5 	bl	22694 <net_buf_simple_pull_le16>
    faca:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
    facc:	4628      	mov	r0, r5
	mod_id = buf->data;
    face:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    fad2:	f7fe fe31 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
    fad6:	bb28      	cbnz	r0, fb24 <mod_app_unbind+0xa8>
		vnd = (buf->len == 4);
    fad8:	88a3      	ldrh	r3, [r4, #4]
    fada:	1f1a      	subs	r2, r3, #4
    fadc:	4253      	negs	r3, r2
    fade:	4153      	adcs	r3, r2
    fae0:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
    fae4:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
    fae6:	e9cd 0900 	strd	r0, r9, [sp]
    faea:	4633      	mov	r3, r6
    faec:	462a      	mov	r2, r5
    faee:	f89d 100b 	ldrb.w	r1, [sp, #11]
    faf2:	a803      	add	r0, sp, #12
    faf4:	f011 fc40 	bl	21378 <create_mod_app_status.isra.7>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    faf8:	2300      	movs	r3, #0
    fafa:	9300      	str	r3, [sp, #0]
    fafc:	aa03      	add	r2, sp, #12
    fafe:	4641      	mov	r1, r8
    fb00:	4638      	mov	r0, r7
    fb02:	f011 fb93 	bl	2122c <bt_mesh_model_send>
    fb06:	2800      	cmp	r0, #0
    fb08:	d0d9      	beq.n	fabe <mod_app_unbind+0x42>
		BT_ERR("Unable to send Model App Unbind Status response");
    fb0a:	2301      	movs	r3, #1
    fb0c:	f04f 0100 	mov.w	r1, #0
    fb10:	f363 0107 	bfi	r1, r3, #0, #8
    fb14:	4a0e      	ldr	r2, [pc, #56]	; (fb50 <mod_app_unbind+0xd4>)
    fb16:	4b0f      	ldr	r3, [pc, #60]	; (fb54 <mod_app_unbind+0xd8>)
    fb18:	4810      	ldr	r0, [pc, #64]	; (fb5c <mod_app_unbind+0xe0>)
    fb1a:	1a9b      	subs	r3, r3, r2
    fb1c:	08db      	lsrs	r3, r3, #3
    fb1e:	f363 118f 	bfi	r1, r3, #6, #10
    fb22:	e7ca      	b.n	faba <mod_app_unbind+0x3e>
	mod = get_model(elem, buf, &vnd);
    fb24:	4621      	mov	r1, r4
    fb26:	f10d 020b 	add.w	r2, sp, #11
    fb2a:	f011 fc4f 	bl	213cc <get_model>
	if (!mod) {
    fb2e:	4604      	mov	r4, r0
    fb30:	b148      	cbz	r0, fb46 <mod_app_unbind+0xca>
	if (!app_key_is_valid(key_idx)) {
    fb32:	4630      	mov	r0, r6
    fb34:	f7ff f88c 	bl	ec50 <app_key_is_valid>
    fb38:	b138      	cbz	r0, fb4a <mod_app_unbind+0xce>
    fb3a:	2201      	movs	r2, #1
    fb3c:	4631      	mov	r1, r6
    fb3e:	4620      	mov	r0, r4
    fb40:	f011 fbeb 	bl	2131a <mod_unbind.part.1>
    fb44:	e7cf      	b.n	fae6 <mod_app_unbind+0x6a>
		status = STATUS_INVALID_MODEL;
    fb46:	2002      	movs	r0, #2
    fb48:	e7cd      	b.n	fae6 <mod_app_unbind+0x6a>
		return STATUS_INVALID_APPKEY;
    fb4a:	2003      	movs	r0, #3
    fb4c:	e7cb      	b.n	fae6 <mod_app_unbind+0x6a>
    fb4e:	bf00      	nop
    fb50:	000233ec 	.word	0x000233ec
    fb54:	00023494 	.word	0x00023494
    fb58:	00026ac3 	.word	0x00026ac3
    fb5c:	00026a7a 	.word	0x00026a7a

0000fb60 <mod_app_bind>:
{
    fb60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fb64:	4614      	mov	r4, r2
    fb66:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
    fb68:	ab06      	add	r3, sp, #24
    fb6a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
    fb6e:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
    fb70:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
    fb72:	9303      	str	r3, [sp, #12]
    fb74:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
    fb78:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    fb7a:	f012 fd8b 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    fb7e:	b203      	sxth	r3, r0
    fb80:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    fb82:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    fb84:	dc10      	bgt.n	fba8 <mod_app_bind+0x48>
		BT_WARN("Prohibited element address");
    fb86:	2302      	movs	r3, #2
    fb88:	f04f 0100 	mov.w	r1, #0
    fb8c:	f363 0107 	bfi	r1, r3, #0, #8
    fb90:	4a3b      	ldr	r2, [pc, #236]	; (fc80 <mod_app_bind+0x120>)
    fb92:	4b3c      	ldr	r3, [pc, #240]	; (fc84 <mod_app_bind+0x124>)
    fb94:	483c      	ldr	r0, [pc, #240]	; (fc88 <mod_app_bind+0x128>)
    fb96:	1a9b      	subs	r3, r3, r2
    fb98:	08db      	lsrs	r3, r3, #3
    fb9a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Model App Bind Status response");
    fb9e:	f00e fc50 	bl	1e442 <log_0>
}
    fba2:	b00b      	add	sp, #44	; 0x2c
    fba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
    fba8:	4620      	mov	r0, r4
    fbaa:	f012 fd73 	bl	22694 <net_buf_simple_pull_le16>
    fbae:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
    fbb0:	4630      	mov	r0, r6
	mod_id = buf->data;
    fbb2:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    fbb6:	f7fe fdbf 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
    fbba:	bb28      	cbnz	r0, fc08 <mod_app_bind+0xa8>
		vnd = (buf->len == 4);
    fbbc:	88a3      	ldrh	r3, [r4, #4]
    fbbe:	1f1a      	subs	r2, r3, #4
    fbc0:	4253      	negs	r3, r2
    fbc2:	4153      	adcs	r3, r2
    fbc4:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
    fbc8:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
    fbca:	e9cd 3900 	strd	r3, r9, [sp]
    fbce:	4632      	mov	r2, r6
    fbd0:	462b      	mov	r3, r5
    fbd2:	f89d 100b 	ldrb.w	r1, [sp, #11]
    fbd6:	a803      	add	r0, sp, #12
    fbd8:	f011 fbce 	bl	21378 <create_mod_app_status.isra.7>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fbdc:	2300      	movs	r3, #0
    fbde:	9300      	str	r3, [sp, #0]
    fbe0:	aa03      	add	r2, sp, #12
    fbe2:	4641      	mov	r1, r8
    fbe4:	4638      	mov	r0, r7
    fbe6:	f011 fb21 	bl	2122c <bt_mesh_model_send>
    fbea:	2800      	cmp	r0, #0
    fbec:	d0d9      	beq.n	fba2 <mod_app_bind+0x42>
		BT_ERR("Unable to send Model App Bind Status response");
    fbee:	2301      	movs	r3, #1
    fbf0:	f04f 0100 	mov.w	r1, #0
    fbf4:	f363 0107 	bfi	r1, r3, #0, #8
    fbf8:	4a21      	ldr	r2, [pc, #132]	; (fc80 <mod_app_bind+0x120>)
    fbfa:	4b22      	ldr	r3, [pc, #136]	; (fc84 <mod_app_bind+0x124>)
    fbfc:	4823      	ldr	r0, [pc, #140]	; (fc8c <mod_app_bind+0x12c>)
    fbfe:	1a9b      	subs	r3, r3, r2
    fc00:	08db      	lsrs	r3, r3, #3
    fc02:	f363 118f 	bfi	r1, r3, #6, #10
    fc06:	e7ca      	b.n	fb9e <mod_app_bind+0x3e>
	mod = get_model(elem, buf, &vnd);
    fc08:	4621      	mov	r1, r4
    fc0a:	f10d 020b 	add.w	r2, sp, #11
    fc0e:	f011 fbdd 	bl	213cc <get_model>
	if (!mod) {
    fc12:	4604      	mov	r4, r0
    fc14:	b368      	cbz	r0, fc72 <mod_app_bind+0x112>
	if (model == mod) {
    fc16:	42b8      	cmp	r0, r7
    fc18:	d10f      	bne.n	fc3a <mod_app_bind+0xda>
		BT_ERR("Client tried to bind AppKey to Configuration Model");
    fc1a:	2301      	movs	r3, #1
    fc1c:	f04f 0100 	mov.w	r1, #0
    fc20:	f363 0107 	bfi	r1, r3, #0, #8
    fc24:	4a16      	ldr	r2, [pc, #88]	; (fc80 <mod_app_bind+0x120>)
    fc26:	4b17      	ldr	r3, [pc, #92]	; (fc84 <mod_app_bind+0x124>)
    fc28:	4819      	ldr	r0, [pc, #100]	; (fc90 <mod_app_bind+0x130>)
    fc2a:	1a9b      	subs	r3, r3, r2
    fc2c:	08db      	lsrs	r3, r3, #3
    fc2e:	f363 118f 	bfi	r1, r3, #6, #10
    fc32:	f00e fc06 	bl	1e442 <log_0>
		status = STATUS_CANNOT_BIND;
    fc36:	230d      	movs	r3, #13
		goto send_status;
    fc38:	e7c7      	b.n	fbca <mod_app_bind+0x6a>
	if (!app_key_is_valid(key_idx)) {
    fc3a:	4628      	mov	r0, r5
    fc3c:	f7ff f808 	bl	ec50 <app_key_is_valid>
    fc40:	b1c8      	cbz	r0, fc76 <mod_app_bind+0x116>
		if (model->keys[i] == key_idx) {
    fc42:	89a1      	ldrh	r1, [r4, #12]
    fc44:	428d      	cmp	r5, r1
    fc46:	d010      	beq.n	fc6a <mod_app_bind+0x10a>
    fc48:	89e2      	ldrh	r2, [r4, #14]
    fc4a:	4295      	cmp	r5, r2
    fc4c:	d00d      	beq.n	fc6a <mod_app_bind+0x10a>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
    fc4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fc52:	4299      	cmp	r1, r3
    fc54:	d00b      	beq.n	fc6e <mod_app_bind+0x10e>
    fc56:	429a      	cmp	r2, r3
    fc58:	d10f      	bne.n	fc7a <mod_app_bind+0x11a>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
    fc5a:	2301      	movs	r3, #1
			model->keys[i] = key_idx;
    fc5c:	3304      	adds	r3, #4
    fc5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
				bt_mesh_store_mod_bind(model);
    fc62:	4620      	mov	r0, r4
			model->keys[i] = key_idx;
    fc64:	809d      	strh	r5, [r3, #4]
				bt_mesh_store_mod_bind(model);
    fc66:	f011 fe1e 	bl	218a6 <bt_mesh_store_mod_bind>
			return STATUS_SUCCESS;
    fc6a:	2300      	movs	r3, #0
    fc6c:	e7ad      	b.n	fbca <mod_app_bind+0x6a>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
    fc6e:	2300      	movs	r3, #0
    fc70:	e7f4      	b.n	fc5c <mod_app_bind+0xfc>
		status = STATUS_INVALID_MODEL;
    fc72:	2302      	movs	r3, #2
    fc74:	e7a9      	b.n	fbca <mod_app_bind+0x6a>
		return STATUS_INVALID_APPKEY;
    fc76:	2303      	movs	r3, #3
    fc78:	e7a7      	b.n	fbca <mod_app_bind+0x6a>
	return STATUS_INSUFF_RESOURCES;
    fc7a:	2305      	movs	r3, #5
    fc7c:	e7a5      	b.n	fbca <mod_app_bind+0x6a>
    fc7e:	bf00      	nop
    fc80:	000233ec 	.word	0x000233ec
    fc84:	00023494 	.word	0x00023494
    fc88:	00026ac3 	.word	0x00026ac3
    fc8c:	00026a1e 	.word	0x00026a1e
    fc90:	000269eb 	.word	0x000269eb

0000fc94 <mod_pub_set>:
{
    fc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc98:	4681      	mov	r9, r0
    fc9a:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
    fc9c:	4610      	mov	r0, r2
{
    fc9e:	468a      	mov	sl, r1
    fca0:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
    fca2:	f012 fcf7 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    fca6:	b203      	sxth	r3, r0
    fca8:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    fcaa:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    fcac:	dc10      	bgt.n	fcd0 <mod_pub_set+0x3c>
		BT_WARN("Prohibited element address");
    fcae:	2302      	movs	r3, #2
    fcb0:	f04f 0100 	mov.w	r1, #0
    fcb4:	f363 0107 	bfi	r1, r3, #0, #8
    fcb8:	4a34      	ldr	r2, [pc, #208]	; (fd8c <mod_pub_set+0xf8>)
    fcba:	4b35      	ldr	r3, [pc, #212]	; (fd90 <mod_pub_set+0xfc>)
    fcbc:	4835      	ldr	r0, [pc, #212]	; (fd94 <mod_pub_set+0x100>)
    fcbe:	1a9b      	subs	r3, r3, r2
    fcc0:	08db      	lsrs	r3, r3, #3
    fcc2:	f363 118f 	bfi	r1, r3, #6, #10
    fcc6:	f00e fbbc 	bl	1e442 <log_0>
}
    fcca:	b00b      	add	sp, #44	; 0x2c
    fccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
    fcd0:	4620      	mov	r0, r4
    fcd2:	f012 fcdf 	bl	22694 <net_buf_simple_pull_le16>
    fcd6:	4607      	mov	r7, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
    fcd8:	4620      	mov	r0, r4
    fcda:	f012 fcdb 	bl	22694 <net_buf_simple_pull_le16>
    fcde:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
    fce0:	4620      	mov	r0, r4
    fce2:	f012 fccf 	bl	22684 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
    fce6:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
    fcea:	b2d2      	uxtb	r2, r2
    fcec:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
    fcee:	4683      	mov	fp, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
    fcf0:	d80f      	bhi.n	fd12 <mod_pub_set+0x7e>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
    fcf2:	2101      	movs	r1, #1
    fcf4:	f04f 0200 	mov.w	r2, #0
    fcf8:	f361 0207 	bfi	r2, r1, #0, #8
    fcfc:	4823      	ldr	r0, [pc, #140]	; (fd8c <mod_pub_set+0xf8>)
    fcfe:	4924      	ldr	r1, [pc, #144]	; (fd90 <mod_pub_set+0xfc>)
    fd00:	1a09      	subs	r1, r1, r0
    fd02:	08c9      	lsrs	r1, r1, #3
    fd04:	f361 128f 	bfi	r2, r1, #6, #10
    fd08:	4823      	ldr	r0, [pc, #140]	; (fd98 <mod_pub_set+0x104>)
    fd0a:	4659      	mov	r1, fp
    fd0c:	f00e fba6 	bl	1e45c <log_1>
		return;
    fd10:	e7db      	b.n	fcca <mod_pub_set+0x36>
	pub_period = net_buf_simple_pull_u8(buf);
    fd12:	4620      	mov	r0, r4
    fd14:	f012 fcb6 	bl	22684 <net_buf_simple_pull_u8>
    fd18:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
    fd1a:	4620      	mov	r0, r4
    fd1c:	f012 fcb2 	bl	22684 <net_buf_simple_pull_u8>
	mod_id = buf->data;
    fd20:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
    fd22:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
    fd24:	4630      	mov	r0, r6
	mod_id = buf->data;
    fd26:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
    fd28:	f7fe fd06 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
    fd2c:	4605      	mov	r5, r0
    fd2e:	b9a8      	cbnz	r0, fd5c <mod_pub_set+0xc8>
		vnd = (buf->len == 4);
    fd30:	88a3      	ldrh	r3, [r4, #4]
    fd32:	1f1a      	subs	r2, r3, #4
    fd34:	4253      	negs	r3, r2
    fd36:	4153      	adcs	r3, r2
    fd38:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
    fd3c:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
    fd3e:	9b05      	ldr	r3, [sp, #20]
    fd40:	3508      	adds	r5, #8
    fd42:	e9cd 0302 	strd	r0, r3, [sp, #8]
    fd46:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    fd4a:	9300      	str	r3, [sp, #0]
    fd4c:	9501      	str	r5, [sp, #4]
    fd4e:	463b      	mov	r3, r7
    fd50:	4632      	mov	r2, r6
    fd52:	4651      	mov	r1, sl
    fd54:	4648      	mov	r0, r9
    fd56:	f7ff fd91 	bl	f87c <send_mod_pub_status.isra.9>
    fd5a:	e7b6      	b.n	fcca <mod_pub_set+0x36>
	mod = get_model(elem, buf, &vnd);
    fd5c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    fd60:	4621      	mov	r1, r4
    fd62:	f011 fb33 	bl	213cc <get_model>
	if (!mod) {
    fd66:	4605      	mov	r5, r0
    fd68:	b170      	cbz	r0, fd88 <mod_pub_set+0xf4>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
    fd6a:	9b07      	ldr	r3, [sp, #28]
    fd6c:	9302      	str	r3, [sp, #8]
    fd6e:	9b06      	ldr	r3, [sp, #24]
    fd70:	2201      	movs	r2, #1
    fd72:	9203      	str	r2, [sp, #12]
    fd74:	e9cd b300 	strd	fp, r3, [sp]
    fd78:	f3c8 020b 	ubfx	r2, r8, #0, #12
    fd7c:	f3c8 3300 	ubfx	r3, r8, #12, #1
    fd80:	4639      	mov	r1, r7
    fd82:	f7fe ff83 	bl	ec8c <_mod_pub_set>
    fd86:	e7da      	b.n	fd3e <mod_pub_set+0xaa>
		status = STATUS_INVALID_MODEL;
    fd88:	2002      	movs	r0, #2
    fd8a:	e7d8      	b.n	fd3e <mod_pub_set+0xaa>
    fd8c:	000233ec 	.word	0x000233ec
    fd90:	00023494 	.word	0x00023494
    fd94:	00026ac3 	.word	0x00026ac3
    fd98:	00026aaa 	.word	0x00026aaa

0000fd9c <mod_pub_va_set>:
{
    fd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fda0:	4681      	mov	r9, r0
    fda2:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
    fda4:	4610      	mov	r0, r2
{
    fda6:	468a      	mov	sl, r1
    fda8:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
    fdaa:	f012 fc73 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    fdae:	b203      	sxth	r3, r0
    fdb0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    fdb2:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    fdb4:	dc10      	bgt.n	fdd8 <mod_pub_va_set+0x3c>
		BT_WARN("Prohibited element address");
    fdb6:	2302      	movs	r3, #2
    fdb8:	f04f 0100 	mov.w	r1, #0
    fdbc:	f363 0107 	bfi	r1, r3, #0, #8
    fdc0:	4a3c      	ldr	r2, [pc, #240]	; (feb4 <mod_pub_va_set+0x118>)
    fdc2:	4b3d      	ldr	r3, [pc, #244]	; (feb8 <mod_pub_va_set+0x11c>)
    fdc4:	483d      	ldr	r0, [pc, #244]	; (febc <mod_pub_va_set+0x120>)
    fdc6:	1a9b      	subs	r3, r3, r2
    fdc8:	08db      	lsrs	r3, r3, #3
    fdca:	f363 118f 	bfi	r1, r3, #6, #10
    fdce:	f00e fb38 	bl	1e442 <log_0>
}
    fdd2:	b00b      	add	sp, #44	; 0x2c
    fdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
    fdd8:	2110      	movs	r1, #16
    fdda:	4620      	mov	r0, r4
    fddc:	f012 fc4a 	bl	22674 <net_buf_simple_pull_mem>
    fde0:	4683      	mov	fp, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
    fde2:	4620      	mov	r0, r4
    fde4:	f012 fc56 	bl	22694 <net_buf_simple_pull_le16>
    fde8:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
    fdea:	4620      	mov	r0, r4
    fdec:	f012 fc4a 	bl	22684 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
    fdf0:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
    fdf4:	b2db      	uxtb	r3, r3
    fdf6:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
    fdf8:	4607      	mov	r7, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
    fdfa:	d80f      	bhi.n	fe1c <mod_pub_va_set+0x80>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
    fdfc:	2301      	movs	r3, #1
    fdfe:	f04f 0200 	mov.w	r2, #0
    fe02:	f363 0207 	bfi	r2, r3, #0, #8
    fe06:	492b      	ldr	r1, [pc, #172]	; (feb4 <mod_pub_va_set+0x118>)
    fe08:	4b2b      	ldr	r3, [pc, #172]	; (feb8 <mod_pub_va_set+0x11c>)
    fe0a:	1a5b      	subs	r3, r3, r1
    fe0c:	08db      	lsrs	r3, r3, #3
    fe0e:	4601      	mov	r1, r0
    fe10:	f363 128f 	bfi	r2, r3, #6, #10
    fe14:	482a      	ldr	r0, [pc, #168]	; (fec0 <mod_pub_va_set+0x124>)
    fe16:	f00e fb21 	bl	1e45c <log_1>
		return;
    fe1a:	e7da      	b.n	fdd2 <mod_pub_va_set+0x36>
	pub_period = net_buf_simple_pull_u8(buf);
    fe1c:	4620      	mov	r0, r4
    fe1e:	f012 fc31 	bl	22684 <net_buf_simple_pull_u8>
    fe22:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
    fe24:	4620      	mov	r0, r4
    fe26:	f012 fc2d 	bl	22684 <net_buf_simple_pull_u8>
	mod_id = buf->data;
    fe2a:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
    fe2c:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
    fe2e:	4630      	mov	r0, r6
	mod_id = buf->data;
    fe30:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
    fe32:	f7fe fc81 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
    fe36:	4605      	mov	r5, r0
    fe38:	b9c0      	cbnz	r0, fe6c <mod_pub_va_set+0xd0>
		vnd = (buf->len == 4);
    fe3a:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0U;
    fe3c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4);
    fe40:	1f1a      	subs	r2, r3, #4
    fe42:	4253      	negs	r3, r2
    fe44:	4153      	adcs	r3, r2
    fe46:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
    fe4a:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
    fe4c:	9b05      	ldr	r3, [sp, #20]
    fe4e:	3508      	adds	r5, #8
    fe50:	e9cd 0302 	strd	r0, r3, [sp, #8]
    fe54:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    fe58:	9300      	str	r3, [sp, #0]
    fe5a:	9501      	str	r5, [sp, #4]
    fe5c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    fe60:	4632      	mov	r2, r6
    fe62:	4651      	mov	r1, sl
    fe64:	4648      	mov	r0, r9
    fe66:	f7ff fd09 	bl	f87c <send_mod_pub_status.isra.9>
    fe6a:	e7b2      	b.n	fdd2 <mod_pub_va_set+0x36>
	mod = get_model(elem, buf, &vnd);
    fe6c:	f10d 0225 	add.w	r2, sp, #37	; 0x25
    fe70:	4621      	mov	r1, r4
    fe72:	f011 faab 	bl	213cc <get_model>
	if (!mod) {
    fe76:	4605      	mov	r5, r0
    fe78:	b918      	cbnz	r0, fe82 <mod_pub_va_set+0xe6>
		pub_addr = 0U;
    fe7a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
    fe7e:	2002      	movs	r0, #2
		goto send_status;
    fe80:	e7e4      	b.n	fe4c <mod_pub_va_set+0xb0>
	status = va_add(label_uuid, &pub_addr);
    fe82:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    fe86:	4658      	mov	r0, fp
    fe88:	f7ff fa66 	bl	f358 <va_add>
	if (status == STATUS_SUCCESS) {
    fe8c:	2800      	cmp	r0, #0
    fe8e:	d1dd      	bne.n	fe4c <mod_pub_va_set+0xb0>
		status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag,
    fe90:	2301      	movs	r3, #1
    fe92:	9303      	str	r3, [sp, #12]
    fe94:	9b07      	ldr	r3, [sp, #28]
    fe96:	9302      	str	r3, [sp, #8]
    fe98:	9b06      	ldr	r3, [sp, #24]
    fe9a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    fe9e:	e9cd 7300 	strd	r7, r3, [sp]
    fea2:	f3c8 020b 	ubfx	r2, r8, #0, #12
    fea6:	f3c8 3300 	ubfx	r3, r8, #12, #1
    feaa:	4628      	mov	r0, r5
    feac:	f7fe feee 	bl	ec8c <_mod_pub_set>
    feb0:	e7cc      	b.n	fe4c <mod_pub_va_set+0xb0>
    feb2:	bf00      	nop
    feb4:	000233ec 	.word	0x000233ec
    feb8:	00023494 	.word	0x00023494
    febc:	00026ac3 	.word	0x00026ac3
    fec0:	00026aaa 	.word	0x00026aaa

0000fec4 <mod_sub_va_del>:
{
    fec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fec8:	4607      	mov	r7, r0
    feca:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
    fecc:	4610      	mov	r0, r2
{
    fece:	4688      	mov	r8, r1
    fed0:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
    fed2:	f012 fbdf 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    fed6:	b203      	sxth	r3, r0
    fed8:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    feda:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    fedc:	dc10      	bgt.n	ff00 <mod_sub_va_del+0x3c>
		BT_WARN("Prohibited element address");
    fede:	2302      	movs	r3, #2
    fee0:	f04f 0100 	mov.w	r1, #0
    fee4:	f363 0107 	bfi	r1, r3, #0, #8
    fee8:	4a32      	ldr	r2, [pc, #200]	; (ffb4 <mod_sub_va_del+0xf0>)
    feea:	4b33      	ldr	r3, [pc, #204]	; (ffb8 <mod_sub_va_del+0xf4>)
    feec:	4833      	ldr	r0, [pc, #204]	; (ffbc <mod_sub_va_del+0xf8>)
    feee:	1a9b      	subs	r3, r3, r2
    fef0:	08db      	lsrs	r3, r3, #3
    fef2:	f363 118f 	bfi	r1, r3, #6, #10
    fef6:	f00e faa4 	bl	1e442 <log_0>
}
    fefa:	b007      	add	sp, #28
    fefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
    ff00:	2110      	movs	r1, #16
    ff02:	4620      	mov	r0, r4
    ff04:	f012 fbb6 	bl	22674 <net_buf_simple_pull_mem>
    ff08:	4683      	mov	fp, r0
	elem = bt_mesh_elem_find(elem_addr);
    ff0a:	4630      	mov	r0, r6
	mod_id = buf->data;
    ff0c:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    ff10:	f7fe fc12 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
    ff14:	4605      	mov	r5, r0
    ff16:	b988      	cbnz	r0, ff3c <mod_sub_va_del+0x78>
		vnd = (buf->len == 4);
    ff18:	88a3      	ldrh	r3, [r4, #4]
    ff1a:	1f1a      	subs	r2, r3, #4
    ff1c:	4253      	negs	r3, r2
    ff1e:	4153      	adcs	r3, r2
    ff20:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    ff24:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    ff26:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ff2a:	9500      	str	r5, [sp, #0]
    ff2c:	e9cd 9301 	strd	r9, r3, [sp, #4]
    ff30:	4641      	mov	r1, r8
    ff32:	4633      	mov	r3, r6
    ff34:	4638      	mov	r0, r7
    ff36:	f7ff f893 	bl	f060 <send_mod_sub_status>
    ff3a:	e7de      	b.n	fefa <mod_sub_va_del+0x36>
	mod = get_model(elem, buf, &vnd);
    ff3c:	f10d 0217 	add.w	r2, sp, #23
    ff40:	4621      	mov	r1, r4
    ff42:	f011 fa43 	bl	213cc <get_model>
	if (!mod) {
    ff46:	4682      	mov	sl, r0
    ff48:	b358      	cbz	r0, ffa2 <mod_sub_va_del+0xde>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    ff4a:	2210      	movs	r2, #16
    ff4c:	4659      	mov	r1, fp
    ff4e:	481c      	ldr	r0, [pc, #112]	; (ffc0 <mod_sub_va_del+0xfc>)
    ff50:	4c1c      	ldr	r4, [pc, #112]	; (ffc4 <mod_sub_va_del+0x100>)
    ff52:	f00f fb32 	bl	1f5ba <memcmp>
    ff56:	b170      	cbz	r0, ff76 <mod_sub_va_del+0xb2>
    ff58:	2210      	movs	r2, #16
    ff5a:	4659      	mov	r1, fp
    ff5c:	f104 0018 	add.w	r0, r4, #24
    ff60:	f00f fb2b 	bl	1f5ba <memcmp>
    ff64:	b1d8      	cbz	r0, ff9e <mod_sub_va_del+0xda>
    ff66:	2210      	movs	r2, #16
    ff68:	4659      	mov	r1, fp
    ff6a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ff6e:	f00f fb24 	bl	1f5ba <memcmp>
    ff72:	b9c8      	cbnz	r0, ffa8 <mod_sub_va_del+0xe4>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    ff74:	2002      	movs	r0, #2
				*addr = labels[i].addr;
    ff76:	2314      	movs	r3, #20
    ff78:	4358      	muls	r0, r3
    ff7a:	1823      	adds	r3, r4, r0
    ff7c:	885d      	ldrh	r5, [r3, #2]
			labels[i].ref--;
    ff7e:	5a23      	ldrh	r3, [r4, r0]
    ff80:	3b01      	subs	r3, #1
    ff82:	5223      	strh	r3, [r4, r0]
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
    ff84:	b19d      	cbz	r5, ffae <mod_sub_va_del+0xea>
	match = bt_mesh_model_find_group(mod, sub_addr);
    ff86:	4629      	mov	r1, r5
    ff88:	4650      	mov	r0, sl
    ff8a:	f011 f900 	bl	2118e <bt_mesh_model_find_group>
	if (match) {
    ff8e:	b160      	cbz	r0, ffaa <mod_sub_va_del+0xe6>
		*match = BT_MESH_ADDR_UNASSIGNED;
    ff90:	2400      	movs	r4, #0
    ff92:	8004      	strh	r4, [r0, #0]
			bt_mesh_store_mod_sub(mod);
    ff94:	4650      	mov	r0, sl
    ff96:	f011 fc8d 	bl	218b4 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
    ff9a:	4622      	mov	r2, r4
    ff9c:	e7c3      	b.n	ff26 <mod_sub_va_del+0x62>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    ff9e:	2001      	movs	r0, #1
    ffa0:	e7e9      	b.n	ff76 <mod_sub_va_del+0xb2>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
    ffa2:	4605      	mov	r5, r0
		status = STATUS_INVALID_MODEL;
    ffa4:	2202      	movs	r2, #2
    ffa6:	e7be      	b.n	ff26 <mod_sub_va_del+0x62>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    ffa8:	2500      	movs	r5, #0
		status = STATUS_CANNOT_REMOVE;
    ffaa:	220c      	movs	r2, #12
    ffac:	e7bb      	b.n	ff26 <mod_sub_va_del+0x62>
			return STATUS_SUCCESS;
    ffae:	462a      	mov	r2, r5
    ffb0:	e7b9      	b.n	ff26 <mod_sub_va_del+0x62>
    ffb2:	bf00      	nop
    ffb4:	000233ec 	.word	0x000233ec
    ffb8:	00023494 	.word	0x00023494
    ffbc:	00026ac3 	.word	0x00026ac3
    ffc0:	20001d00 	.word	0x20001d00
    ffc4:	20001cfc 	.word	0x20001cfc

0000ffc8 <mod_sub_del>:
{
    ffc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffcc:	4607      	mov	r7, r0
    ffce:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
    ffd0:	4610      	mov	r0, r2
{
    ffd2:	4688      	mov	r8, r1
    ffd4:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
    ffd6:	f012 fb5d 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    ffda:	b203      	sxth	r3, r0
    ffdc:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    ffde:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    ffe0:	dc10      	bgt.n	10004 <__kernel_ram_size+0x4>
		BT_WARN("Prohibited element address");
    ffe2:	2302      	movs	r3, #2
    ffe4:	f04f 0100 	mov.w	r1, #0
    ffe8:	f363 0107 	bfi	r1, r3, #0, #8
    ffec:	4a21      	ldr	r2, [pc, #132]	; (10074 <__kernel_ram_size+0x74>)
    ffee:	4b22      	ldr	r3, [pc, #136]	; (10078 <__kernel_ram_size+0x78>)
    fff0:	4822      	ldr	r0, [pc, #136]	; (1007c <__kernel_ram_size+0x7c>)
    fff2:	1a9b      	subs	r3, r3, r2
    fff4:	08db      	lsrs	r3, r3, #3
    fff6:	f363 118f 	bfi	r1, r3, #6, #10
    fffa:	f00e fa22 	bl	1e442 <log_0>
}
    fffe:	b006      	add	sp, #24
   10000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   10004:	4620      	mov	r0, r4
   10006:	f012 fb45 	bl	22694 <net_buf_simple_pull_le16>
   1000a:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1000c:	4628      	mov	r0, r5
	mod_id = buf->data;
   1000e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10012:	f7fe fb91 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
   10016:	b938      	cbnz	r0, 10028 <__kernel_ram_size+0x28>
		vnd = (buf->len == 4);
   10018:	88a3      	ldrh	r3, [r4, #4]
   1001a:	1f1a      	subs	r2, r3, #4
   1001c:	4253      	negs	r3, r2
   1001e:	4153      	adcs	r3, r2
   10020:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   10024:	2201      	movs	r2, #1
   10026:	e016      	b.n	10056 <__kernel_ram_size+0x56>
	mod = get_model(elem, buf, &vnd);
   10028:	f10d 0217 	add.w	r2, sp, #23
   1002c:	4621      	mov	r1, r4
   1002e:	f011 f9cd 	bl	213cc <get_model>
	if (!mod) {
   10032:	4682      	mov	sl, r0
   10034:	b1d0      	cbz	r0, 1006c <__kernel_ram_size+0x6c>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   10036:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   1003a:	b29b      	uxth	r3, r3
   1003c:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   10040:	d8f0      	bhi.n	10024 <__kernel_ram_size+0x24>
	match = bt_mesh_model_find_group(mod, sub_addr);
   10042:	4631      	mov	r1, r6
   10044:	f011 f8a3 	bl	2118e <bt_mesh_model_find_group>
	if (match) {
   10048:	2400      	movs	r4, #0
   1004a:	b188      	cbz	r0, 10070 <__kernel_ram_size+0x70>
		*match = BT_MESH_ADDR_UNASSIGNED;
   1004c:	8004      	strh	r4, [r0, #0]
			bt_mesh_store_mod_sub(mod);
   1004e:	4650      	mov	r0, sl
   10050:	f011 fc30 	bl	218b4 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   10054:	4622      	mov	r2, r4
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10056:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1005a:	9600      	str	r6, [sp, #0]
   1005c:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10060:	4641      	mov	r1, r8
   10062:	462b      	mov	r3, r5
   10064:	4638      	mov	r0, r7
   10066:	f7fe fffb 	bl	f060 <send_mod_sub_status>
   1006a:	e7c8      	b.n	fffe <mod_sub_del+0x36>
		status = STATUS_INVALID_MODEL;
   1006c:	2202      	movs	r2, #2
   1006e:	e7f2      	b.n	10056 <__kernel_ram_size+0x56>
	status = STATUS_SUCCESS;
   10070:	4602      	mov	r2, r0
   10072:	e7f0      	b.n	10056 <__kernel_ram_size+0x56>
   10074:	000233ec 	.word	0x000233ec
   10078:	00023494 	.word	0x00023494
   1007c:	00026ac3 	.word	0x00026ac3

00010080 <mod_sub_va_add>:
{
   10080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10084:	4607      	mov	r7, r0
   10086:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10088:	4610      	mov	r0, r2
{
   1008a:	4688      	mov	r8, r1
   1008c:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1008e:	f012 fb01 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10092:	b203      	sxth	r3, r0
   10094:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10096:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10098:	dc10      	bgt.n	100bc <mod_sub_va_add+0x3c>
		BT_WARN("Prohibited element address");
   1009a:	2302      	movs	r3, #2
   1009c:	f04f 0100 	mov.w	r1, #0
   100a0:	f363 0107 	bfi	r1, r3, #0, #8
   100a4:	4a2c      	ldr	r2, [pc, #176]	; (10158 <mod_sub_va_add+0xd8>)
   100a6:	4b2d      	ldr	r3, [pc, #180]	; (1015c <mod_sub_va_add+0xdc>)
   100a8:	482d      	ldr	r0, [pc, #180]	; (10160 <mod_sub_va_add+0xe0>)
   100aa:	1a9b      	subs	r3, r3, r2
   100ac:	08db      	lsrs	r3, r3, #3
   100ae:	f363 118f 	bfi	r1, r3, #6, #10
   100b2:	f00e f9c6 	bl	1e442 <log_0>
}
   100b6:	b007      	add	sp, #28
   100b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   100bc:	2110      	movs	r1, #16
   100be:	4620      	mov	r0, r4
   100c0:	f012 fad8 	bl	22674 <net_buf_simple_pull_mem>
   100c4:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   100c6:	4630      	mov	r0, r6
	mod_id = buf->data;
   100c8:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   100cc:	f7fe fb34 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
   100d0:	b9b0      	cbnz	r0, 10100 <mod_sub_va_add+0x80>
		vnd = (buf->len == 4);
   100d2:	88a3      	ldrh	r3, [r4, #4]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   100d4:	f8ad 0016 	strh.w	r0, [sp, #22]
		vnd = (buf->len == 4);
   100d8:	1f19      	subs	r1, r3, #4
   100da:	424b      	negs	r3, r1
   100dc:	414b      	adcs	r3, r1
   100de:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   100e2:	2501      	movs	r5, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   100e4:	f89d 3015 	ldrb.w	r3, [sp, #21]
   100e8:	e9cd 9301 	strd	r9, r3, [sp, #4]
   100ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   100f0:	9300      	str	r3, [sp, #0]
   100f2:	462a      	mov	r2, r5
   100f4:	4633      	mov	r3, r6
   100f6:	4641      	mov	r1, r8
   100f8:	4638      	mov	r0, r7
   100fa:	f7fe ffb1 	bl	f060 <send_mod_sub_status>
   100fe:	e7da      	b.n	100b6 <mod_sub_va_add+0x36>
	mod = get_model(elem, buf, &vnd);
   10100:	4621      	mov	r1, r4
   10102:	f10d 0215 	add.w	r2, sp, #21
   10106:	f011 f961 	bl	213cc <get_model>
	if (!mod) {
   1010a:	4604      	mov	r4, r0
   1010c:	b918      	cbnz	r0, 10116 <mod_sub_va_add+0x96>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1010e:	f8ad 0016 	strh.w	r0, [sp, #22]
		status = STATUS_INVALID_MODEL;
   10112:	2502      	movs	r5, #2
		goto send_status;
   10114:	e7e6      	b.n	100e4 <mod_sub_va_add+0x64>
	status = va_add(label_uuid, &sub_addr);
   10116:	4628      	mov	r0, r5
   10118:	f10d 0116 	add.w	r1, sp, #22
   1011c:	f7ff f91c 	bl	f358 <va_add>
	if (status != STATUS_SUCCESS) {
   10120:	4605      	mov	r5, r0
   10122:	2800      	cmp	r0, #0
   10124:	d1de      	bne.n	100e4 <mod_sub_va_add+0x64>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
   10126:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1012a:	4620      	mov	r0, r4
   1012c:	f011 f82f 	bl	2118e <bt_mesh_model_find_group>
   10130:	2800      	cmp	r0, #0
   10132:	d1d7      	bne.n	100e4 <mod_sub_va_add+0x64>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   10134:	8a23      	ldrh	r3, [r4, #16]
   10136:	b15b      	cbz	r3, 10150 <mod_sub_va_add+0xd0>
   10138:	8a63      	ldrh	r3, [r4, #18]
   1013a:	b95b      	cbnz	r3, 10154 <mod_sub_va_add+0xd4>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1013c:	2301      	movs	r3, #1
			mod->groups[i] = sub_addr;
   1013e:	3308      	adds	r3, #8
   10140:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   10144:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
			bt_mesh_store_mod_sub(mod);
   10148:	4620      	mov	r0, r4
   1014a:	f011 fbb3 	bl	218b4 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   1014e:	e7c9      	b.n	100e4 <mod_sub_va_add+0x64>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   10150:	462b      	mov	r3, r5
   10152:	e7f4      	b.n	1013e <mod_sub_va_add+0xbe>
		status = STATUS_INSUFF_RESOURCES;
   10154:	2505      	movs	r5, #5
   10156:	e7c5      	b.n	100e4 <mod_sub_va_add+0x64>
   10158:	000233ec 	.word	0x000233ec
   1015c:	00023494 	.word	0x00023494
   10160:	00026ac3 	.word	0x00026ac3

00010164 <mod_sub_add>:
{
   10164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10168:	4607      	mov	r7, r0
   1016a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   1016c:	4610      	mov	r0, r2
{
   1016e:	4688      	mov	r8, r1
   10170:	4615      	mov	r5, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10172:	f012 fa8f 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10176:	b203      	sxth	r3, r0
   10178:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1017a:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1017c:	dc10      	bgt.n	101a0 <mod_sub_add+0x3c>
		BT_WARN("Prohibited element address");
   1017e:	2302      	movs	r3, #2
   10180:	f04f 0100 	mov.w	r1, #0
   10184:	f363 0107 	bfi	r1, r3, #0, #8
   10188:	4a24      	ldr	r2, [pc, #144]	; (1021c <mod_sub_add+0xb8>)
   1018a:	4b25      	ldr	r3, [pc, #148]	; (10220 <mod_sub_add+0xbc>)
   1018c:	4825      	ldr	r0, [pc, #148]	; (10224 <mod_sub_add+0xc0>)
   1018e:	1a9b      	subs	r3, r3, r2
   10190:	08db      	lsrs	r3, r3, #3
   10192:	f363 118f 	bfi	r1, r3, #6, #10
   10196:	f00e f954 	bl	1e442 <log_0>
}
   1019a:	b007      	add	sp, #28
   1019c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   101a0:	4628      	mov	r0, r5
   101a2:	f012 fa77 	bl	22694 <net_buf_simple_pull_le16>
   101a6:	4604      	mov	r4, r0
	elem = bt_mesh_elem_find(elem_addr);
   101a8:	4630      	mov	r0, r6
	mod_id = buf->data;
   101aa:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
   101ae:	f7fe fac3 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
   101b2:	b938      	cbnz	r0, 101c4 <mod_sub_add+0x60>
		vnd = (buf->len == 4);
   101b4:	88ab      	ldrh	r3, [r5, #4]
   101b6:	1f1a      	subs	r2, r3, #4
   101b8:	4253      	negs	r3, r2
   101ba:	4153      	adcs	r3, r2
   101bc:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   101c0:	2201      	movs	r2, #1
   101c2:	e01d      	b.n	10200 <mod_sub_add+0x9c>
	mod = get_model(elem, buf, &vnd);
   101c4:	4629      	mov	r1, r5
   101c6:	f10d 0217 	add.w	r2, sp, #23
   101ca:	f011 f8ff 	bl	213cc <get_model>
	if (!mod) {
   101ce:	4605      	mov	r5, r0
   101d0:	b1a8      	cbz	r0, 101fe <mod_sub_add+0x9a>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   101d2:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
   101d6:	b29b      	uxth	r3, r3
   101d8:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   101dc:	d8f0      	bhi.n	101c0 <mod_sub_add+0x5c>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
   101de:	4621      	mov	r1, r4
   101e0:	f010 ffd5 	bl	2118e <bt_mesh_model_find_group>
   101e4:	b938      	cbnz	r0, 101f6 <mod_sub_add+0x92>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   101e6:	8a2b      	ldrh	r3, [r5, #16]
   101e8:	b13b      	cbz	r3, 101fa <mod_sub_add+0x96>
   101ea:	8a6b      	ldrh	r3, [r5, #18]
   101ec:	b99b      	cbnz	r3, 10216 <mod_sub_add+0xb2>
			mod->groups[i] = sub_addr;
   101ee:	826c      	strh	r4, [r5, #18]
			bt_mesh_store_mod_sub(mod);
   101f0:	4628      	mov	r0, r5
   101f2:	f011 fb5f 	bl	218b4 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   101f6:	2200      	movs	r2, #0
   101f8:	e002      	b.n	10200 <mod_sub_add+0x9c>
			mod->groups[i] = sub_addr;
   101fa:	822c      	strh	r4, [r5, #16]
	if (i == ARRAY_SIZE(mod->groups)) {
   101fc:	e7f8      	b.n	101f0 <mod_sub_add+0x8c>
		status = STATUS_INVALID_MODEL;
   101fe:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10200:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10204:	9400      	str	r4, [sp, #0]
   10206:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1020a:	4641      	mov	r1, r8
   1020c:	4633      	mov	r3, r6
   1020e:	4638      	mov	r0, r7
   10210:	f7fe ff26 	bl	f060 <send_mod_sub_status>
   10214:	e7c1      	b.n	1019a <mod_sub_add+0x36>
		status = STATUS_INSUFF_RESOURCES;
   10216:	2205      	movs	r2, #5
   10218:	e7f2      	b.n	10200 <mod_sub_add+0x9c>
   1021a:	bf00      	nop
   1021c:	000233ec 	.word	0x000233ec
   10220:	00023494 	.word	0x00023494
   10224:	00026ac3 	.word	0x00026ac3

00010228 <mod_pub_get.part.11>:
		BT_WARN("Prohibited element address");
   10228:	2302      	movs	r3, #2
   1022a:	f04f 0100 	mov.w	r1, #0
   1022e:	f363 0107 	bfi	r1, r3, #0, #8
   10232:	4a04      	ldr	r2, [pc, #16]	; (10244 <mod_pub_get.part.11+0x1c>)
   10234:	4b04      	ldr	r3, [pc, #16]	; (10248 <mod_pub_get.part.11+0x20>)
   10236:	4805      	ldr	r0, [pc, #20]	; (1024c <mod_pub_get.part.11+0x24>)
   10238:	1a9b      	subs	r3, r3, r2
   1023a:	08db      	lsrs	r3, r3, #3
   1023c:	f363 118f 	bfi	r1, r3, #6, #10
   10240:	f00e b8ff 	b.w	1e442 <log_0>
   10244:	000233ec 	.word	0x000233ec
   10248:	00023494 	.word	0x00023494
   1024c:	00026ac3 	.word	0x00026ac3

00010250 <dev_comp_data_get>:
{
   10250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10254:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   10256:	ab06      	add	r3, sp, #24
{
   10258:	4680      	mov	r8, r0
   1025a:	4689      	mov	r9, r1
	page = net_buf_simple_pull_u8(buf);
   1025c:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1025e:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   10262:	e9cd 1304 	strd	r1, r3, [sp, #16]
   10266:	9303      	str	r3, [sp, #12]
	page = net_buf_simple_pull_u8(buf);
   10268:	f012 fa0c 	bl	22684 <net_buf_simple_pull_u8>
	if (page != 0) {
   1026c:	4601      	mov	r1, r0
   1026e:	b168      	cbz	r0, 1028c <dev_comp_data_get+0x3c>
		BT_WARN("Composition page %u not available", page);
   10270:	2302      	movs	r3, #2
   10272:	f04f 0200 	mov.w	r2, #0
   10276:	f363 0207 	bfi	r2, r3, #0, #8
   1027a:	484f      	ldr	r0, [pc, #316]	; (103b8 <dev_comp_data_get+0x168>)
   1027c:	4b4f      	ldr	r3, [pc, #316]	; (103bc <dev_comp_data_get+0x16c>)
   1027e:	1a1b      	subs	r3, r3, r0
   10280:	08db      	lsrs	r3, r3, #3
   10282:	f363 128f 	bfi	r2, r3, #6, #10
   10286:	484e      	ldr	r0, [pc, #312]	; (103c0 <dev_comp_data_get+0x170>)
   10288:	f00e f8e8 	bl	1e45c <log_1>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   1028c:	2102      	movs	r1, #2
   1028e:	a803      	add	r0, sp, #12
   10290:	f010 ffa3 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   10294:	2100      	movs	r1, #0
   10296:	a803      	add	r0, sp, #12
   10298:	f012 f986 	bl	225a8 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   1029c:	f7fe fcd2 	bl	ec44 <bt_mesh_comp_get>
   102a0:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   102a2:	8801      	ldrh	r1, [r0, #0]
   102a4:	a803      	add	r0, sp, #12
   102a6:	f012 f987 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   102aa:	8869      	ldrh	r1, [r5, #2]
   102ac:	a803      	add	r0, sp, #12
   102ae:	f012 f983 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   102b2:	88a9      	ldrh	r1, [r5, #4]
   102b4:	a803      	add	r0, sp, #12
   102b6:	f012 f97f 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   102ba:	210a      	movs	r1, #10
   102bc:	a803      	add	r0, sp, #12
   102be:	f012 f97b 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   102c2:	2103      	movs	r1, #3
   102c4:	a803      	add	r0, sp, #12
   102c6:	f012 f977 	bl	225b8 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   102ca:	2600      	movs	r6, #0
		net_buf_simple_add_le16(buf, mod->id);
   102cc:	271c      	movs	r7, #28
	for (i = 0; i < comp->elem_count; i++) {
   102ce:	68ab      	ldr	r3, [r5, #8]
   102d0:	429e      	cmp	r6, r3
   102d2:	d314      	bcc.n	102fe <dev_comp_data_get+0xae>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   102d4:	2300      	movs	r3, #0
   102d6:	9300      	str	r3, [sp, #0]
   102d8:	aa03      	add	r2, sp, #12
   102da:	4649      	mov	r1, r9
   102dc:	4640      	mov	r0, r8
   102de:	f010 ffa5 	bl	2122c <bt_mesh_model_send>
   102e2:	b390      	cbz	r0, 1034a <dev_comp_data_get+0xfa>
		BT_ERR("Unable to send Device Composition Status response");
   102e4:	2301      	movs	r3, #1
   102e6:	f04f 0100 	mov.w	r1, #0
   102ea:	f363 0107 	bfi	r1, r3, #0, #8
   102ee:	4a32      	ldr	r2, [pc, #200]	; (103b8 <dev_comp_data_get+0x168>)
   102f0:	4b32      	ldr	r3, [pc, #200]	; (103bc <dev_comp_data_get+0x16c>)
   102f2:	4834      	ldr	r0, [pc, #208]	; (103c4 <dev_comp_data_get+0x174>)
   102f4:	1a9b      	subs	r3, r3, r2
   102f6:	08db      	lsrs	r3, r3, #3
   102f8:	f363 118f 	bfi	r1, r3, #6, #10
   102fc:	e023      	b.n	10346 <dev_comp_data_get+0xf6>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   102fe:	68ec      	ldr	r4, [r5, #12]
   10300:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
   10304:	a803      	add	r0, sp, #12
   10306:	f012 f9e5 	bl	226d4 <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2) + (elem->vnd_model_count * 2)) {
   1030a:	7923      	ldrb	r3, [r4, #4]
   1030c:	7962      	ldrb	r2, [r4, #5]
   1030e:	4413      	add	r3, r2
   10310:	3302      	adds	r3, #2
	if (net_buf_simple_tailroom(buf) <
   10312:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   10316:	d21b      	bcs.n	10350 <dev_comp_data_get+0x100>
		BT_ERR("Too large device composition");
   10318:	2301      	movs	r3, #1
   1031a:	f04f 0100 	mov.w	r1, #0
   1031e:	f363 0107 	bfi	r1, r3, #0, #8
   10322:	4c26      	ldr	r4, [pc, #152]	; (103bc <dev_comp_data_get+0x16c>)
   10324:	4b24      	ldr	r3, [pc, #144]	; (103b8 <dev_comp_data_get+0x168>)
   10326:	4828      	ldr	r0, [pc, #160]	; (103c8 <dev_comp_data_get+0x178>)
   10328:	1ae4      	subs	r4, r4, r3
   1032a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1032e:	f364 118f 	bfi	r1, r4, #6, #10
   10332:	f00e f886 	bl	1e442 <log_0>
		BT_ERR("Unable to get composition page 0");
   10336:	f04f 0100 	mov.w	r1, #0
   1033a:	2301      	movs	r3, #1
   1033c:	f363 0107 	bfi	r1, r3, #0, #8
   10340:	4822      	ldr	r0, [pc, #136]	; (103cc <dev_comp_data_get+0x17c>)
   10342:	f364 118f 	bfi	r1, r4, #6, #10
		BT_ERR("Unable to send Device Composition Status response");
   10346:	f00e f87c 	bl	1e442 <log_0>
}
   1034a:	b019      	add	sp, #100	; 0x64
   1034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_simple_add_le16(buf, elem->loc);
   10350:	8861      	ldrh	r1, [r4, #2]
   10352:	a803      	add	r0, sp, #12
   10354:	f012 f930 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   10358:	7921      	ldrb	r1, [r4, #4]
   1035a:	a803      	add	r0, sp, #12
   1035c:	f012 f924 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   10360:	7961      	ldrb	r1, [r4, #5]
   10362:	a803      	add	r0, sp, #12
   10364:	f012 f920 	bl	225a8 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   10368:	f04f 0a00 	mov.w	sl, #0
   1036c:	7923      	ldrb	r3, [r4, #4]
   1036e:	459a      	cmp	sl, r3
   10370:	db06      	blt.n	10380 <dev_comp_data_get+0x130>
	for (i = 0; i < elem->vnd_model_count; i++) {
   10372:	f04f 0a00 	mov.w	sl, #0
   10376:	7963      	ldrb	r3, [r4, #5]
   10378:	459a      	cmp	sl, r3
   1037a:	db0b      	blt.n	10394 <dev_comp_data_get+0x144>
	for (i = 0; i < comp->elem_count; i++) {
   1037c:	3601      	adds	r6, #1
   1037e:	e7a6      	b.n	102ce <dev_comp_data_get+0x7e>
		net_buf_simple_add_le16(buf, mod->id);
   10380:	fb07 f30a 	mul.w	r3, r7, sl
   10384:	68a2      	ldr	r2, [r4, #8]
   10386:	a803      	add	r0, sp, #12
   10388:	5ad1      	ldrh	r1, [r2, r3]
   1038a:	f012 f915 	bl	225b8 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   1038e:	f10a 0a01 	add.w	sl, sl, #1
   10392:	e7eb      	b.n	1036c <dev_comp_data_get+0x11c>
		mod = &elem->vnd_models[i];
   10394:	68e2      	ldr	r2, [r4, #12]
   10396:	fb07 f30a 	mul.w	r3, r7, sl
   1039a:	eb02 0b03 	add.w	fp, r2, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   1039e:	5ad1      	ldrh	r1, [r2, r3]
   103a0:	a803      	add	r0, sp, #12
   103a2:	f012 f909 	bl	225b8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   103a6:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   103aa:	a803      	add	r0, sp, #12
   103ac:	f012 f904 	bl	225b8 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   103b0:	f10a 0a01 	add.w	sl, sl, #1
   103b4:	e7df      	b.n	10376 <dev_comp_data_get+0x126>
   103b6:	bf00      	nop
   103b8:	000233ec 	.word	0x000233ec
   103bc:	00023494 	.word	0x00023494
   103c0:	000267dd 	.word	0x000267dd
   103c4:	0002683d 	.word	0x0002683d
   103c8:	000267ff 	.word	0x000267ff
   103cc:	0002681c 	.word	0x0002681c

000103d0 <app_key_set>:
{
   103d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103d4:	4680      	mov	r8, r0
   103d6:	4689      	mov	r9, r1
   103d8:	4616      	mov	r6, r2
   103da:	469a      	mov	sl, r3
	sub = bt_mesh_subnet_get(net_idx);
   103dc:	f7fb fdde 	bl	bf9c <bt_mesh_subnet_get>
	if (!sub) {
   103e0:	4605      	mov	r5, r0
   103e2:	2800      	cmp	r0, #0
   103e4:	d046      	beq.n	10474 <app_key_set+0xa4>
	key = bt_mesh_app_key_find(app_idx);
   103e6:	4648      	mov	r0, r9
   103e8:	f7fd f9e8 	bl	d7bc <bt_mesh_app_key_find>
   103ec:	4604      	mov	r4, r0
	if (update) {
   103ee:	f1ba 0f00 	cmp.w	sl, #0
   103f2:	d024      	beq.n	1043e <app_key_set+0x6e>
		if (!key) {
   103f4:	2800      	cmp	r0, #0
   103f6:	d04c      	beq.n	10492 <app_key_set+0xc2>
		if (key->net_idx != net_idx) {
   103f8:	8803      	ldrh	r3, [r0, #0]
   103fa:	4543      	cmp	r3, r8
   103fc:	d14b      	bne.n	10496 <app_key_set+0xc6>
		if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
   103fe:	7feb      	ldrb	r3, [r5, #31]
   10400:	2b01      	cmp	r3, #1
   10402:	d002      	beq.n	1040a <app_key_set+0x3a>
			return STATUS_CANNOT_UPDATE;
   10404:	200b      	movs	r0, #11
}
   10406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key->updated) {
   1040a:	7902      	ldrb	r2, [r0, #4]
   1040c:	b142      	cbz	r2, 10420 <app_key_set+0x50>
			if (memcmp(keys->val, val, 16)) {
   1040e:	2210      	movs	r2, #16
   10410:	4631      	mov	r1, r6
   10412:	3017      	adds	r0, #23
   10414:	f00f f8d1 	bl	1f5ba <memcmp>
   10418:	2800      	cmp	r0, #0
   1041a:	d1f3      	bne.n	10404 <app_key_set+0x34>
				return STATUS_SUCCESS;
   1041c:	2000      	movs	r0, #0
   1041e:	e7f2      	b.n	10406 <app_key_set+0x36>
		keys = &key->keys[1];
   10420:	f100 0716 	add.w	r7, r0, #22
		key->updated = true;
   10424:	7103      	strb	r3, [r0, #4]
			const u8_t net_id[16], u32_t iv_index,
			u8_t auth[8]);

static inline int bt_mesh_app_id(const u8_t app_key[16], u8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
   10426:	4639      	mov	r1, r7
   10428:	4630      	mov	r0, r6
   1042a:	f7fd ff11 	bl	e250 <bt_mesh_k4>
	if (bt_mesh_app_id(val, &keys->id)) {
   1042e:	b318      	cbz	r0, 10478 <app_key_set+0xa8>
		if (update) {
   10430:	f1ba 0f00 	cmp.w	sl, #0
   10434:	d001      	beq.n	1043a <app_key_set+0x6a>
			key->updated = false;
   10436:	2300      	movs	r3, #0
   10438:	7123      	strb	r3, [r4, #4]
		return STATUS_STORAGE_FAIL;
   1043a:	2009      	movs	r0, #9
   1043c:	e7e3      	b.n	10406 <app_key_set+0x36>
		if (key) {
   1043e:	b960      	cbnz	r0, 1045a <app_key_set+0x8a>
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
   10440:	4c19      	ldr	r4, [pc, #100]	; (104a8 <app_key_set+0xd8>)
   10442:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   10446:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1044a:	429a      	cmp	r2, r3
   1044c:	d027      	beq.n	1049e <app_key_set+0xce>
   1044e:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   10452:	429a      	cmp	r2, r3
   10454:	d026      	beq.n	104a4 <app_key_set+0xd4>
			return STATUS_INSUFF_RESOURCES;
   10456:	2005      	movs	r0, #5
   10458:	e7d5      	b.n	10406 <app_key_set+0x36>
			if (key->net_idx == net_idx &&
   1045a:	8805      	ldrh	r5, [r0, #0]
   1045c:	4545      	cmp	r5, r8
   1045e:	d109      	bne.n	10474 <app_key_set+0xa4>
			    !memcmp(key->keys[0].val, val, 16)) {
   10460:	2210      	movs	r2, #16
   10462:	4631      	mov	r1, r6
   10464:	3006      	adds	r0, #6
   10466:	f00f f8a8 	bl	1f5ba <memcmp>
			if (key->net_idx == net_idx &&
   1046a:	2800      	cmp	r0, #0
   1046c:	d0d6      	beq.n	1041c <app_key_set+0x4c>
			if (key->net_idx == net_idx) {
   1046e:	8823      	ldrh	r3, [r4, #0]
   10470:	42ab      	cmp	r3, r5
   10472:	d012      	beq.n	1049a <app_key_set+0xca>
				return STATUS_INVALID_NETKEY;
   10474:	2004      	movs	r0, #4
   10476:	e7c6      	b.n	10406 <app_key_set+0x36>
	key->net_idx = net_idx;
   10478:	f8a4 8000 	strh.w	r8, [r4]
	key->app_idx = app_idx;
   1047c:	f8a4 9002 	strh.w	r9, [r4, #2]
	memcpy(keys->val, val, 16);
   10480:	2210      	movs	r2, #16
   10482:	4631      	mov	r1, r6
   10484:	1c78      	adds	r0, r7, #1
   10486:	f00f f8bf 	bl	1f608 <memcpy>
		bt_mesh_store_app_key(key);
   1048a:	4620      	mov	r0, r4
   1048c:	f011 f98c 	bl	217a8 <bt_mesh_store_app_key>
	return STATUS_SUCCESS;
   10490:	e7c4      	b.n	1041c <app_key_set+0x4c>
			return STATUS_INVALID_APPKEY;
   10492:	2003      	movs	r0, #3
   10494:	e7b7      	b.n	10406 <app_key_set+0x36>
			return STATUS_INVALID_BINDING;
   10496:	2011      	movs	r0, #17
   10498:	e7b5      	b.n	10406 <app_key_set+0x36>
				return STATUS_IDX_ALREADY_STORED;
   1049a:	2006      	movs	r0, #6
   1049c:	e7b3      	b.n	10406 <app_key_set+0x36>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
   1049e:	3454      	adds	r4, #84	; 0x54
		keys = &key->keys[0];
   104a0:	1d67      	adds	r7, r4, #5
   104a2:	e7c0      	b.n	10426 <app_key_set+0x56>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
   104a4:	347c      	adds	r4, #124	; 0x7c
   104a6:	e7fb      	b.n	104a0 <app_key_set+0xd0>
   104a8:	20007924 	.word	0x20007924

000104ac <app_key_update>:
{
   104ac:	b570      	push	{r4, r5, r6, lr}
   104ae:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   104b0:	ab04      	add	r3, sp, #16
{
   104b2:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   104b4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   104b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   104bc:	4605      	mov	r5, r0
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   104be:	f10d 020e 	add.w	r2, sp, #14
{
   104c2:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   104c4:	4620      	mov	r0, r4
   104c6:	a903      	add	r1, sp, #12
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   104c8:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   104ca:	f010 ff13 	bl	212f4 <key_idx_unpack>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   104ce:	f248 0103 	movw	r1, #32771	; 0x8003
   104d2:	a807      	add	r0, sp, #28
   104d4:	f010 fe81 	bl	211da <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, true);
   104d8:	2301      	movs	r3, #1
   104da:	6822      	ldr	r2, [r4, #0]
   104dc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   104e0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   104e4:	f7ff ff74 	bl	103d0 <app_key_set>
	net_buf_simple_add_u8(&msg, status);
   104e8:	4601      	mov	r1, r0
   104ea:	a807      	add	r0, sp, #28
   104ec:	f012 f85c 	bl	225a8 <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   104f0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   104f4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   104f8:	a807      	add	r0, sp, #28
   104fa:	f010 fee8 	bl	212ce <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   104fe:	2300      	movs	r3, #0
   10500:	9300      	str	r3, [sp, #0]
   10502:	aa07      	add	r2, sp, #28
   10504:	4631      	mov	r1, r6
   10506:	4628      	mov	r0, r5
   10508:	f010 fe90 	bl	2122c <bt_mesh_model_send>
   1050c:	b168      	cbz	r0, 1052a <app_key_update+0x7e>
		BT_ERR("Unable to send App Key Status response");
   1050e:	2301      	movs	r3, #1
   10510:	f04f 0100 	mov.w	r1, #0
   10514:	f363 0107 	bfi	r1, r3, #0, #8
   10518:	4a05      	ldr	r2, [pc, #20]	; (10530 <app_key_update+0x84>)
   1051a:	4b06      	ldr	r3, [pc, #24]	; (10534 <app_key_update+0x88>)
   1051c:	4806      	ldr	r0, [pc, #24]	; (10538 <app_key_update+0x8c>)
   1051e:	1a9b      	subs	r3, r3, r2
   10520:	08db      	lsrs	r3, r3, #3
   10522:	f363 118f 	bfi	r1, r3, #6, #10
   10526:	f00d ff8c 	bl	1e442 <log_0>
}
   1052a:	b00a      	add	sp, #40	; 0x28
   1052c:	bd70      	pop	{r4, r5, r6, pc}
   1052e:	bf00      	nop
   10530:	000233ec 	.word	0x000233ec
   10534:	00023494 	.word	0x00023494
   10538:	00026634 	.word	0x00026634

0001053c <app_key_add>:
{
   1053c:	b570      	push	{r4, r5, r6, lr}
   1053e:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   10540:	ab04      	add	r3, sp, #16
{
   10542:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   10544:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   10548:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   1054c:	4605      	mov	r5, r0
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1054e:	f10d 020e 	add.w	r2, sp, #14
{
   10552:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   10554:	4620      	mov	r0, r4
   10556:	a903      	add	r1, sp, #12
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   10558:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1055a:	f010 fecb 	bl	212f4 <key_idx_unpack>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1055e:	f248 0103 	movw	r1, #32771	; 0x8003
   10562:	a807      	add	r0, sp, #28
   10564:	f010 fe39 	bl	211da <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, false);
   10568:	2300      	movs	r3, #0
   1056a:	6822      	ldr	r2, [r4, #0]
   1056c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   10570:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   10574:	f7ff ff2c 	bl	103d0 <app_key_set>
	net_buf_simple_add_u8(&msg, status);
   10578:	4601      	mov	r1, r0
   1057a:	a807      	add	r0, sp, #28
   1057c:	f012 f814 	bl	225a8 <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   10580:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   10584:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   10588:	a807      	add	r0, sp, #28
   1058a:	f010 fea0 	bl	212ce <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1058e:	2300      	movs	r3, #0
   10590:	9300      	str	r3, [sp, #0]
   10592:	aa07      	add	r2, sp, #28
   10594:	4631      	mov	r1, r6
   10596:	4628      	mov	r0, r5
   10598:	f010 fe48 	bl	2122c <bt_mesh_model_send>
   1059c:	b168      	cbz	r0, 105ba <app_key_add+0x7e>
		BT_ERR("Unable to send App Key Status response");
   1059e:	2301      	movs	r3, #1
   105a0:	f04f 0100 	mov.w	r1, #0
   105a4:	f363 0107 	bfi	r1, r3, #0, #8
   105a8:	4a05      	ldr	r2, [pc, #20]	; (105c0 <app_key_add+0x84>)
   105aa:	4b06      	ldr	r3, [pc, #24]	; (105c4 <app_key_add+0x88>)
   105ac:	4806      	ldr	r0, [pc, #24]	; (105c8 <app_key_add+0x8c>)
   105ae:	1a9b      	subs	r3, r3, r2
   105b0:	08db      	lsrs	r3, r3, #3
   105b2:	f363 118f 	bfi	r1, r3, #6, #10
   105b6:	f00d ff44 	bl	1e442 <log_0>
}
   105ba:	b00a      	add	sp, #40	; 0x28
   105bc:	bd70      	pop	{r4, r5, r6, pc}
   105be:	bf00      	nop
   105c0:	000233ec 	.word	0x000233ec
   105c4:	00023494 	.word	0x00023494
   105c8:	00026634 	.word	0x00026634

000105cc <heartbeat_pub_set>:
}

static void heartbeat_pub_set(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
   105cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct hb_pub_param *param = (void *)buf->data;
   105d0:	6815      	ldr	r5, [r2, #0]
	u16_t dst, feat, idx;
	u8_t status;

	BT_DBG("src 0x%04x", ctx->addr);

	dst = sys_le16_to_cpu(param->dst);
   105d2:	f8b5 8000 	ldrh.w	r8, [r5]
   105d6:	fa1f f988 	uxth.w	r9, r8
	/* All other address types but virtual are valid */
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   105da:	f489 4300 	eor.w	r3, r9, #32768	; 0x8000
   105de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
   105e2:	4606      	mov	r6, r0
   105e4:	460f      	mov	r7, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   105e6:	d37c      	bcc.n	106e2 <heartbeat_pub_set+0x116>
		status = STATUS_INVALID_ADDRESS;
		goto failed;
	}

	if (param->count_log > 0x11 && param->count_log != 0xff) {
   105e8:	78ab      	ldrb	r3, [r5, #2]
   105ea:	3b12      	subs	r3, #18
   105ec:	b2db      	uxtb	r3, r3
   105ee:	2bec      	cmp	r3, #236	; 0xec
   105f0:	d97a      	bls.n	106e8 <heartbeat_pub_set+0x11c>
		status = STATUS_CANNOT_SET;
		goto failed;
	}

	if (param->period_log > 0x10) {
   105f2:	78eb      	ldrb	r3, [r5, #3]
   105f4:	2b10      	cmp	r3, #16
   105f6:	d877      	bhi.n	106e8 <heartbeat_pub_set+0x11c>
		status = STATUS_CANNOT_SET;
		goto failed;
	}

	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   105f8:	7929      	ldrb	r1, [r5, #4]
   105fa:	f081 0380 	eor.w	r3, r1, #128	; 0x80
   105fe:	2b7e      	cmp	r3, #126	; 0x7e
   10600:	d810      	bhi.n	10624 <heartbeat_pub_set+0x58>
		BT_ERR("Invalid TTL value 0x%02x", param->ttl);
   10602:	2301      	movs	r3, #1
   10604:	f04f 0200 	mov.w	r2, #0
   10608:	f363 0207 	bfi	r2, r3, #0, #8
   1060c:	4838      	ldr	r0, [pc, #224]	; (106f0 <heartbeat_pub_set+0x124>)
   1060e:	4b39      	ldr	r3, [pc, #228]	; (106f4 <heartbeat_pub_set+0x128>)
   10610:	1a1b      	subs	r3, r3, r0
   10612:	08db      	lsrs	r3, r3, #3
   10614:	4838      	ldr	r0, [pc, #224]	; (106f8 <heartbeat_pub_set+0x12c>)
   10616:	f363 128f 	bfi	r2, r3, #6, #10

	return;

failed:
	hb_pub_send_status(model, ctx, status, param);
}
   1061a:	b003      	add	sp, #12
   1061c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10620:	f00d bf1c 	b.w	1e45c <log_1>
	idx = sys_le16_to_cpu(param->net_idx);
   10624:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   10628:	b299      	uxth	r1, r3
	if (idx > 0xfff) {
   1062a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   1062e:	d30c      	bcc.n	1064a <heartbeat_pub_set+0x7e>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10630:	2301      	movs	r3, #1
   10632:	f04f 0200 	mov.w	r2, #0
   10636:	f363 0207 	bfi	r2, r3, #0, #8
   1063a:	482d      	ldr	r0, [pc, #180]	; (106f0 <heartbeat_pub_set+0x124>)
   1063c:	4b2d      	ldr	r3, [pc, #180]	; (106f4 <heartbeat_pub_set+0x128>)
   1063e:	1a1b      	subs	r3, r3, r0
   10640:	08db      	lsrs	r3, r3, #3
   10642:	f363 128f 	bfi	r2, r3, #6, #10
   10646:	482d      	ldr	r0, [pc, #180]	; (106fc <heartbeat_pub_set+0x130>)
   10648:	e7e7      	b.n	1061a <heartbeat_pub_set+0x4e>
   1064a:	9301      	str	r3, [sp, #4]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1064c:	6984      	ldr	r4, [r0, #24]
	feat = sys_le16_to_cpu(param->feat);
   1064e:	f8b5 a005 	ldrh.w	sl, [r5, #5]
	if (!bt_mesh_subnet_get(idx)) {
   10652:	4608      	mov	r0, r1
   10654:	f7fb fca2 	bl	bf9c <bt_mesh_subnet_get>
   10658:	2800      	cmp	r0, #0
   1065a:	d047      	beq.n	106ec <heartbeat_pub_set+0x120>
	cfg->hb_pub.dst = dst;
   1065c:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
	cfg->hb_pub.period = param->period_log;
   10660:	f895 b003 	ldrb.w	fp, [r5, #3]
	cfg->hb_pub.net_idx = idx;
   10664:	9b01      	ldr	r3, [sp, #4]
	cfg->hb_pub.period = param->period_log;
   10666:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
	cfg->hb_pub.feat = feat & BT_MESH_FEAT_SUPPORTED;
   1066a:	f00a 0a0f 	and.w	sl, sl, #15
   1066e:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
	cfg->hb_pub.net_idx = idx;
   10672:	86a3      	strh	r3, [r4, #52]	; 0x34
	if (dst == BT_MESH_ADDR_UNASSIGNED) {
   10674:	f104 010c 	add.w	r1, r4, #12
   10678:	f1b9 0f00 	cmp.w	r9, #0
   1067c:	d107      	bne.n	1068e <heartbeat_pub_set+0xc2>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
   1067e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	cfg->hb_pub.period = 0;
   10682:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
			k_delayed_work_cancel(&cfg->hb_pub.timer);
   10686:	4608      	mov	r0, r1
   10688:	f012 fc87 	bl	22f9a <k_delayed_work_cancel>
   1068c:	e01e      	b.n	106cc <heartbeat_pub_set+0x100>
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
   1068e:	78aa      	ldrb	r2, [r5, #2]
   10690:	4610      	mov	r0, r2
   10692:	f010 fefa 	bl	2148a <hb_pwr2.constprop.22>
   10696:	85e0      	strh	r0, [r4, #46]	; 0x2e
		cfg->hb_pub.ttl = param->ttl;
   10698:	792b      	ldrb	r3, [r5, #4]
   1069a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		if (param->period_log && param->count_log) {
   1069e:	f1bb 0f00 	cmp.w	fp, #0
   106a2:	d0f0      	beq.n	10686 <heartbeat_pub_set+0xba>
   106a4:	2a00      	cmp	r2, #0
   106a6:	d0ee      	beq.n	10686 <heartbeat_pub_set+0xba>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   106a8:	f3bf 8f5b 	dmb	ish
   106ac:	3414      	adds	r4, #20
   106ae:	e854 3f00 	ldrex	r3, [r4]
   106b2:	f043 0201 	orr.w	r2, r3, #1
   106b6:	e844 2000 	strex	r0, r2, [r4]
   106ba:	2800      	cmp	r0, #0
   106bc:	d1f7      	bne.n	106ae <heartbeat_pub_set+0xe2>
   106be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   106c2:	07db      	lsls	r3, r3, #31
   106c4:	d402      	bmi.n	106cc <heartbeat_pub_set+0x100>
		k_queue_append(&work_q->queue, work);
   106c6:	480e      	ldr	r0, [pc, #56]	; (10700 <heartbeat_pub_set+0x134>)
   106c8:	f012 fa5d 	bl	22b86 <k_queue_append>
		bt_mesh_store_hb_pub();
   106cc:	f011 f890 	bl	217f0 <bt_mesh_store_hb_pub>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
   106d0:	2300      	movs	r3, #0
   106d2:	461a      	mov	r2, r3
	hb_pub_send_status(model, ctx, status, param);
   106d4:	4639      	mov	r1, r7
   106d6:	4630      	mov	r0, r6
}
   106d8:	b003      	add	sp, #12
   106da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hb_pub_send_status(model, ctx, status, param);
   106de:	f7fe bc55 	b.w	ef8c <hb_pub_send_status>
		status = STATUS_INVALID_ADDRESS;
   106e2:	2201      	movs	r2, #1
	hb_pub_send_status(model, ctx, status, param);
   106e4:	462b      	mov	r3, r5
   106e6:	e7f5      	b.n	106d4 <heartbeat_pub_set+0x108>
		status = STATUS_CANNOT_SET;
   106e8:	220f      	movs	r2, #15
   106ea:	e7fb      	b.n	106e4 <heartbeat_pub_set+0x118>
		status = STATUS_INVALID_NETKEY;
   106ec:	2204      	movs	r2, #4
   106ee:	e7f9      	b.n	106e4 <heartbeat_pub_set+0x118>
   106f0:	000233ec 	.word	0x000233ec
   106f4:	00023494 	.word	0x00023494
   106f8:	00026aaa 	.word	0x00026aaa
   106fc:	00026be2 	.word	0x00026be2
   10700:	20001c74 	.word	0x20001c74

00010704 <hb_sub_send_status.constprop.21>:

static void hb_sub_send_status(struct bt_mesh_model *model,
   10704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			       struct bt_mesh_msg_ctx *ctx, u8_t status)
{
	/* Needed size: opcode (2 bytes) + msg + MIC */
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10708:	6985      	ldr	r5, [r0, #24]
static void hb_sub_send_status(struct bt_mesh_model *model,
   1070a:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   1070c:	ab06      	add	r3, sp, #24
   1070e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   10712:	9303      	str	r3, [sp, #12]
   10714:	e9cd 2304 	strd	r2, r3, [sp, #16]
static void hb_sub_send_status(struct bt_mesh_model *model,
   10718:	4682      	mov	sl, r0
   1071a:	468b      	mov	fp, r1
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1071c:	f012 fc9a 	bl	23054 <z_impl_k_uptime_get>
	s64_t uptime;

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	uptime = k_uptime_get();
	if (uptime > cfg->hb_sub.expiry) {
   10720:	e9d5 890e 	ldrd	r8, r9, [r5, #56]	; 0x38
   10724:	4580      	cmp	r8, r0
   10726:	eb79 0301 	sbcs.w	r3, r9, r1
   1072a:	db5e      	blt.n	107ea <hb_sub_send_status.constprop.21+0xe6>
		period = 0U;
	} else {
		period = (cfg->hb_sub.expiry - uptime) / 1000;
   1072c:	ebb8 0000 	subs.w	r0, r8, r0
   10730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10734:	f04f 0300 	mov.w	r3, #0
   10738:	eb69 0101 	sbc.w	r1, r9, r1
   1073c:	f7ef fcd0 	bl	e0 <__aeabi_ldivmod>
   10740:	b284      	uxth	r4, r0
	}

	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   10742:	f248 013c 	movw	r1, #32828	; 0x803c
   10746:	a803      	add	r0, sp, #12
   10748:	f010 fd47 	bl	211da <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(&msg, status);
   1074c:	2100      	movs	r1, #0
   1074e:	a803      	add	r0, sp, #12
   10750:	f011 ff2a 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.src);
   10754:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
   10758:	a803      	add	r0, sp, #12
   1075a:	f011 ff2d 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.dst);
   1075e:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
   10762:	a803      	add	r0, sp, #12
   10764:	f011 ff28 	bl	225b8 <net_buf_simple_add_le16>
	if (!val) {
   10768:	2c00      	cmp	r4, #0
   1076a:	d040      	beq.n	107ee <hb_sub_send_status.constprop.21+0xea>
	} else if (val == 0xffff) {
   1076c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10770:	429c      	cmp	r4, r3
   10772:	d03e      	beq.n	107f2 <hb_sub_send_status.constprop.21+0xee>
		return 32 - __builtin_clz(val);
   10774:	fab4 f484 	clz	r4, r4
   10778:	f1c4 0420 	rsb	r4, r4, #32
   1077c:	b2e1      	uxtb	r1, r4
	net_buf_simple_add_u8(&msg, hb_log(period));
   1077e:	a803      	add	r0, sp, #12
   10780:	f011 ff12 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   10784:	f8b5 1044 	ldrh.w	r1, [r5, #68]	; 0x44
	if (!val) {
   10788:	b149      	cbz	r1, 1079e <hb_sub_send_status.constprop.21+0x9a>
	} else if (val == 0xffff) {
   1078a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1078e:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   10790:	bf1d      	ittte	ne
   10792:	fab1 f181 	clzne	r1, r1
   10796:	f1c1 0120 	rsbne	r1, r1, #32
   1079a:	b2c9      	uxtbne	r1, r1
		return 0xff;
   1079c:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   1079e:	a803      	add	r0, sp, #12
   107a0:	f011 ff02 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.min_hops);
   107a4:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
   107a8:	a803      	add	r0, sp, #12
   107aa:	f011 fefd 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.max_hops);
   107ae:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
   107b2:	a803      	add	r0, sp, #12
   107b4:	f011 fef8 	bl	225a8 <net_buf_simple_add_u8>

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   107b8:	2300      	movs	r3, #0
   107ba:	9300      	str	r3, [sp, #0]
   107bc:	aa03      	add	r2, sp, #12
   107be:	4659      	mov	r1, fp
   107c0:	4650      	mov	r0, sl
   107c2:	f010 fd33 	bl	2122c <bt_mesh_model_send>
   107c6:	b168      	cbz	r0, 107e4 <hb_sub_send_status.constprop.21+0xe0>
		BT_ERR("Unable to send Heartbeat Subscription Status");
   107c8:	2301      	movs	r3, #1
   107ca:	f04f 0100 	mov.w	r1, #0
   107ce:	f363 0107 	bfi	r1, r3, #0, #8
   107d2:	4a09      	ldr	r2, [pc, #36]	; (107f8 <hb_sub_send_status.constprop.21+0xf4>)
   107d4:	4b09      	ldr	r3, [pc, #36]	; (107fc <hb_sub_send_status.constprop.21+0xf8>)
   107d6:	480a      	ldr	r0, [pc, #40]	; (10800 <hb_sub_send_status.constprop.21+0xfc>)
   107d8:	1a9b      	subs	r3, r3, r2
   107da:	08db      	lsrs	r3, r3, #3
   107dc:	f363 118f 	bfi	r1, r3, #6, #10
   107e0:	f00d fe2f 	bl	1e442 <log_0>
	}
}
   107e4:	b00b      	add	sp, #44	; 0x2c
   107e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period = 0U;
   107ea:	2400      	movs	r4, #0
   107ec:	e7a9      	b.n	10742 <hb_sub_send_status.constprop.21+0x3e>
		return 0x00;
   107ee:	4621      	mov	r1, r4
   107f0:	e7c5      	b.n	1077e <hb_sub_send_status.constprop.21+0x7a>
		return 0xff;
   107f2:	21ff      	movs	r1, #255	; 0xff
   107f4:	e7c3      	b.n	1077e <hb_sub_send_status.constprop.21+0x7a>
   107f6:	bf00      	nop
   107f8:	000233ec 	.word	0x000233ec
   107fc:	00023494 	.word	0x00023494
   10800:	000268f9 	.word	0x000268f9

00010804 <heartbeat_sub_set>:
}

static void heartbeat_sub_set(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
   10804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10808:	6985      	ldr	r5, [r0, #24]
{
   1080a:	4607      	mov	r7, r0
	u8_t sub_period;
	s32_t period_ms;

	BT_DBG("src 0x%04x", ctx->addr);

	sub_src = net_buf_simple_pull_le16(buf);
   1080c:	4610      	mov	r0, r2
{
   1080e:	4614      	mov	r4, r2
   10810:	4688      	mov	r8, r1
	sub_src = net_buf_simple_pull_le16(buf);
   10812:	f011 ff3f 	bl	22694 <net_buf_simple_pull_le16>
   10816:	4681      	mov	r9, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   10818:	4620      	mov	r0, r4
   1081a:	f011 ff3b 	bl	22694 <net_buf_simple_pull_le16>
   1081e:	4606      	mov	r6, r0
	sub_period = net_buf_simple_pull_u8(buf);
   10820:	4620      	mov	r0, r4
   10822:	f011 ff2f 	bl	22684 <net_buf_simple_pull_u8>

	BT_DBG("sub_src 0x%04x sub_dst 0x%04x period 0x%02x",
	       sub_src, sub_dst, sub_period);

	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   10826:	f419 4f00 	tst.w	r9, #32768	; 0x8000
	sub_period = net_buf_simple_pull_u8(buf);
   1082a:	4604      	mov	r4, r0
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   1082c:	d00f      	beq.n	1084e <heartbeat_sub_set+0x4a>
	    !BT_MESH_ADDR_IS_UNICAST(sub_src)) {
		BT_WARN("Prohibited source address");
   1082e:	2302      	movs	r3, #2
   10830:	f04f 0100 	mov.w	r1, #0
   10834:	f363 0107 	bfi	r1, r3, #0, #8
   10838:	4a36      	ldr	r2, [pc, #216]	; (10914 <heartbeat_sub_set+0x110>)
   1083a:	4b37      	ldr	r3, [pc, #220]	; (10918 <heartbeat_sub_set+0x114>)
   1083c:	4837      	ldr	r0, [pc, #220]	; (1091c <heartbeat_sub_set+0x118>)
   1083e:	1a9b      	subs	r3, r3, r2
   10840:	08db      	lsrs	r3, r3, #3
   10842:	f363 118f 	bfi	r1, r3, #6, #10
	 * disabling subscription, but 0x00 for subsequent Get requests.
	 */
	if (!period_ms) {
		cfg->hb_sub.min_hops = 0;
	}
}
   10846:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Prohibited destination address");
   1084a:	f00d bdfa 	b.w	1e442 <log_0>
	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
   1084e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
   10852:	b29b      	uxth	r3, r3
   10854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   10858:	d20c      	bcs.n	10874 <heartbeat_sub_set+0x70>
		BT_WARN("Prohibited destination address");
   1085a:	2302      	movs	r3, #2
   1085c:	f04f 0100 	mov.w	r1, #0
   10860:	f363 0107 	bfi	r1, r3, #0, #8
   10864:	4a2b      	ldr	r2, [pc, #172]	; (10914 <heartbeat_sub_set+0x110>)
   10866:	4b2c      	ldr	r3, [pc, #176]	; (10918 <heartbeat_sub_set+0x114>)
   10868:	482d      	ldr	r0, [pc, #180]	; (10920 <heartbeat_sub_set+0x11c>)
   1086a:	1a9b      	subs	r3, r3, r2
   1086c:	08db      	lsrs	r3, r3, #3
   1086e:	f363 118f 	bfi	r1, r3, #6, #10
   10872:	e7e8      	b.n	10846 <heartbeat_sub_set+0x42>
	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
   10874:	f506 7380 	add.w	r3, r6, #256	; 0x100
   10878:	b29b      	uxth	r3, r3
   1087a:	2bfb      	cmp	r3, #251	; 0xfb
   1087c:	d9ed      	bls.n	1085a <heartbeat_sub_set+0x56>
   1087e:	b233      	sxth	r3, r6
   10880:	2b00      	cmp	r3, #0
   10882:	dd03      	ble.n	1088c <heartbeat_sub_set+0x88>
	     sub_dst != bt_mesh_primary_addr())) {
   10884:	f7fd ff52 	bl	e72c <bt_mesh_primary_addr>
	    (BT_MESH_ADDR_IS_UNICAST(sub_dst) &&
   10888:	4286      	cmp	r6, r0
   1088a:	d1e6      	bne.n	1085a <heartbeat_sub_set+0x56>
	if (sub_period > 0x11) {
   1088c:	2c11      	cmp	r4, #17
   1088e:	d910      	bls.n	108b2 <heartbeat_sub_set+0xae>
		BT_WARN("Prohibited subscription period 0x%02x", sub_period);
   10890:	2302      	movs	r3, #2
   10892:	f04f 0200 	mov.w	r2, #0
   10896:	f363 0207 	bfi	r2, r3, #0, #8
   1089a:	491e      	ldr	r1, [pc, #120]	; (10914 <heartbeat_sub_set+0x110>)
   1089c:	4b1e      	ldr	r3, [pc, #120]	; (10918 <heartbeat_sub_set+0x114>)
   1089e:	4821      	ldr	r0, [pc, #132]	; (10924 <heartbeat_sub_set+0x120>)
   108a0:	1a5b      	subs	r3, r3, r1
   108a2:	08db      	lsrs	r3, r3, #3
   108a4:	f363 128f 	bfi	r2, r3, #6, #10
   108a8:	4621      	mov	r1, r4
}
   108aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Prohibited subscription period 0x%02x", sub_period);
   108ae:	f00d bdd5 	b.w	1e45c <log_1>
	if (sub_src == BT_MESH_ADDR_UNASSIGNED ||
   108b2:	f1b9 0f00 	cmp.w	r9, #0
   108b6:	d00f      	beq.n	108d8 <heartbeat_sub_set+0xd4>
   108b8:	b176      	cbz	r6, 108d8 <heartbeat_sub_set+0xd4>
	    sub_dst == BT_MESH_ADDR_UNASSIGNED ||
   108ba:	b194      	cbz	r4, 108e2 <heartbeat_sub_set+0xde>
		cfg->hb_sub.count = 0;
   108bc:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
		period_ms = hb_pwr2(sub_period, 1) * 1000;
   108c0:	4620      	mov	r0, r4
		cfg->hb_sub.src = sub_src;
   108c2:	f8a5 9040 	strh.w	r9, [r5, #64]	; 0x40
		cfg->hb_sub.dst = sub_dst;
   108c6:	f8a5 6042 	strh.w	r6, [r5, #66]	; 0x42
		cfg->hb_sub.count = 0;
   108ca:	646b      	str	r3, [r5, #68]	; 0x44
		period_ms = hb_pwr2(sub_period, 1) * 1000;
   108cc:	f010 fddd 	bl	2148a <hb_pwr2.constprop.22>
   108d0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   108d4:	4344      	muls	r4, r0
   108d6:	e004      	b.n	108e2 <heartbeat_sub_set+0xde>
			cfg->hb_sub.count = 0;
   108d8:	2400      	movs	r4, #0
   108da:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
   108de:	e9c5 4310 	strd	r4, r3, [r5, #64]	; 0x40
	bt_mesh_set_hb_sub_dst(cfg->hb_sub.dst);
   108e2:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
   108e6:	f7fc ff59 	bl	d79c <bt_mesh_set_hb_sub_dst>
	if (period_ms) {
   108ea:	b17c      	cbz	r4, 1090c <heartbeat_sub_set+0x108>
   108ec:	f012 fbb2 	bl	23054 <z_impl_k_uptime_get>
		cfg->hb_sub.expiry = k_uptime_get() + period_ms;
   108f0:	1902      	adds	r2, r0, r4
   108f2:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
		cfg->hb_sub.expiry = 0;
   108f6:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   108fa:	4641      	mov	r1, r8
   108fc:	4638      	mov	r0, r7
   108fe:	f7ff ff01 	bl	10704 <hb_sub_send_status.constprop.21>
	if (!period_ms) {
   10902:	b90c      	cbnz	r4, 10908 <heartbeat_sub_set+0x104>
		cfg->hb_sub.min_hops = 0;
   10904:	f885 4046 	strb.w	r4, [r5, #70]	; 0x46
}
   10908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg->hb_sub.expiry = 0;
   1090c:	2200      	movs	r2, #0
   1090e:	2300      	movs	r3, #0
   10910:	e7f1      	b.n	108f6 <heartbeat_sub_set+0xf2>
   10912:	bf00      	nop
   10914:	000233ec 	.word	0x000233ec
   10918:	00023494 	.word	0x00023494
   1091c:	00026926 	.word	0x00026926
   10920:	00026940 	.word	0x00026940
   10924:	0002695f 	.word	0x0002695f

00010928 <bt_mesh_app_key_alloc>:
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
   10928:	4807      	ldr	r0, [pc, #28]	; (10948 <bt_mesh_app_key_alloc+0x20>)
   1092a:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   1092e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10932:	429a      	cmp	r2, r3
   10934:	d005      	beq.n	10942 <bt_mesh_app_key_alloc+0x1a>
   10936:	f830 2f7c 	ldrh.w	r2, [r0, #124]!
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
   1093a:	429a      	cmp	r2, r3
   1093c:	bf18      	it	ne
   1093e:	2000      	movne	r0, #0
   10940:	4770      	bx	lr
   10942:	3054      	adds	r0, #84	; 0x54
}
   10944:	4770      	bx	lr
   10946:	bf00      	nop
   10948:	20007924 	.word	0x20007924

0001094c <bt_mesh_app_key_del>:
{
   1094c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct unbind_data data = { .app_idx = key->app_idx, .store = store };
   1094e:	8843      	ldrh	r3, [r0, #2]
   10950:	f88d 1006 	strb.w	r1, [sp, #6]
{
   10954:	460d      	mov	r5, r1
   10956:	4604      	mov	r4, r0
	bt_mesh_model_foreach(_mod_unbind, &data);
   10958:	a901      	add	r1, sp, #4
   1095a:	480a      	ldr	r0, [pc, #40]	; (10984 <bt_mesh_app_key_del+0x38>)
	struct unbind_data data = { .app_idx = key->app_idx, .store = store };
   1095c:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_mesh_model_foreach(_mod_unbind, &data);
   10960:	f7fd fdba 	bl	e4d8 <bt_mesh_model_foreach>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   10964:	b115      	cbz	r5, 1096c <bt_mesh_app_key_del+0x20>
		bt_mesh_clear_app_key(key);
   10966:	4620      	mov	r0, r4
   10968:	f010 ff77 	bl	2185a <bt_mesh_clear_app_key>
	key->net_idx = BT_MESH_KEY_UNUSED;
   1096c:	4620      	mov	r0, r4
   1096e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10972:	f820 3b05 	strh.w	r3, [r0], #5
	(void)memset(key->keys, 0, sizeof(key->keys));
   10976:	2222      	movs	r2, #34	; 0x22
   10978:	2100      	movs	r1, #0
   1097a:	f00e fe6f 	bl	1f65c <memset>
}
   1097e:	b003      	add	sp, #12
   10980:	bd30      	pop	{r4, r5, pc}
   10982:	bf00      	nop
   10984:	000214a7 	.word	0x000214a7

00010988 <app_key_del>:
{
   10988:	b570      	push	{r4, r5, r6, lr}
   1098a:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1098c:	ab04      	add	r3, sp, #16
{
   1098e:	4605      	mov	r5, r0
   10990:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   10992:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   10996:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   1099a:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1099c:	f10d 020e 	add.w	r2, sp, #14
   109a0:	a903      	add	r1, sp, #12
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   109a2:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   109a4:	f010 fca6 	bl	212f4 <key_idx_unpack>
	if (!bt_mesh_subnet_get(key_net_idx)) {
   109a8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   109ac:	f7fb faf6 	bl	bf9c <bt_mesh_subnet_get>
   109b0:	2800      	cmp	r0, #0
   109b2:	d036      	beq.n	10a22 <app_key_del+0x9a>
	key = bt_mesh_app_key_find(key_app_idx);
   109b4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   109b8:	f7fc ff00 	bl	d7bc <bt_mesh_app_key_find>
	if (!key) {
   109bc:	4604      	mov	r4, r0
   109be:	b140      	cbz	r0, 109d2 <app_key_del+0x4a>
	if (key->net_idx != key_net_idx) {
   109c0:	8802      	ldrh	r2, [r0, #0]
   109c2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   109c6:	429a      	cmp	r2, r3
   109c8:	d12d      	bne.n	10a26 <app_key_del+0x9e>
	bt_mesh_app_key_del(key, true);
   109ca:	2101      	movs	r1, #1
   109cc:	f7ff ffbe 	bl	1094c <bt_mesh_app_key_del>
	status = STATUS_SUCCESS;
   109d0:	2400      	movs	r4, #0
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   109d2:	f248 0103 	movw	r1, #32771	; 0x8003
   109d6:	a807      	add	r0, sp, #28
   109d8:	f010 fbff 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   109dc:	4621      	mov	r1, r4
   109de:	a807      	add	r0, sp, #28
   109e0:	f011 fde2 	bl	225a8 <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   109e4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   109e8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   109ec:	a807      	add	r0, sp, #28
   109ee:	f010 fc6e 	bl	212ce <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   109f2:	2300      	movs	r3, #0
   109f4:	9300      	str	r3, [sp, #0]
   109f6:	aa07      	add	r2, sp, #28
   109f8:	4631      	mov	r1, r6
   109fa:	4628      	mov	r0, r5
   109fc:	f010 fc16 	bl	2122c <bt_mesh_model_send>
   10a00:	b168      	cbz	r0, 10a1e <app_key_del+0x96>
		BT_ERR("Unable to send App Key Status response");
   10a02:	2301      	movs	r3, #1
   10a04:	f04f 0100 	mov.w	r1, #0
   10a08:	f363 0107 	bfi	r1, r3, #0, #8
   10a0c:	4a07      	ldr	r2, [pc, #28]	; (10a2c <app_key_del+0xa4>)
   10a0e:	4b08      	ldr	r3, [pc, #32]	; (10a30 <app_key_del+0xa8>)
   10a10:	4808      	ldr	r0, [pc, #32]	; (10a34 <app_key_del+0xac>)
   10a12:	1a9b      	subs	r3, r3, r2
   10a14:	08db      	lsrs	r3, r3, #3
   10a16:	f363 118f 	bfi	r1, r3, #6, #10
   10a1a:	f00d fd12 	bl	1e442 <log_0>
}
   10a1e:	b00a      	add	sp, #40	; 0x28
   10a20:	bd70      	pop	{r4, r5, r6, pc}
		status = STATUS_INVALID_NETKEY;
   10a22:	2404      	movs	r4, #4
   10a24:	e7d5      	b.n	109d2 <app_key_del+0x4a>
		status = STATUS_INVALID_BINDING;
   10a26:	2411      	movs	r4, #17
   10a28:	e7d3      	b.n	109d2 <app_key_del+0x4a>
   10a2a:	bf00      	nop
   10a2c:	000233ec 	.word	0x000233ec
   10a30:	00023494 	.word	0x00023494
   10a34:	00026634 	.word	0x00026634

00010a38 <bt_mesh_cfg_srv_init>:

	return true;
}

int bt_mesh_cfg_srv_init(struct bt_mesh_model *model, bool primary)
{
   10a38:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10a3a:	6984      	ldr	r4, [r0, #24]
{
   10a3c:	4605      	mov	r5, r0

	if (!cfg) {
   10a3e:	b984      	cbnz	r4, 10a62 <bt_mesh_cfg_srv_init+0x2a>
		BT_ERR("No Configuration Server context provided");
   10a40:	2301      	movs	r3, #1
   10a42:	f04f 0100 	mov.w	r1, #0
   10a46:	f363 0107 	bfi	r1, r3, #0, #8
   10a4a:	4a1c      	ldr	r2, [pc, #112]	; (10abc <bt_mesh_cfg_srv_init+0x84>)
   10a4c:	4b1c      	ldr	r3, [pc, #112]	; (10ac0 <bt_mesh_cfg_srv_init+0x88>)
   10a4e:	481d      	ldr	r0, [pc, #116]	; (10ac4 <bt_mesh_cfg_srv_init+0x8c>)
   10a50:	1a9b      	subs	r3, r3, r2
   10a52:	08db      	lsrs	r3, r3, #3
   10a54:	f363 118f 	bfi	r1, r3, #6, #10
		return -EINVAL;
	}

	if (!conf_is_valid(cfg)) {
		BT_ERR("Invalid values in configuration");
   10a58:	f00d fcf3 	bl	1e442 <log_0>
		return -EINVAL;
   10a5c:	f06f 0015 	mvn.w	r0, #21
   10a60:	e01e      	b.n	10aa0 <bt_mesh_cfg_srv_init+0x68>
	if (cfg->relay > 0x02) {
   10a62:	7963      	ldrb	r3, [r4, #5]
   10a64:	2b02      	cmp	r3, #2
   10a66:	d81c      	bhi.n	10aa2 <bt_mesh_cfg_srv_init+0x6a>
	if (cfg->beacon > 0x01) {
   10a68:	79e3      	ldrb	r3, [r4, #7]
   10a6a:	2b01      	cmp	r3, #1
   10a6c:	d819      	bhi.n	10aa2 <bt_mesh_cfg_srv_init+0x6a>
	if (cfg->default_ttl > BT_MESH_TTL_MAX) {
   10a6e:	f994 300a 	ldrsb.w	r3, [r4, #10]
   10a72:	2b00      	cmp	r3, #0
   10a74:	db15      	blt.n	10aa2 <bt_mesh_cfg_srv_init+0x6a>
	}

	/* Configuration Model security is device-key based */
	model->keys[0] = BT_MESH_KEY_DEV;
   10a76:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   10a7a:	8183      	strh	r3, [r0, #12]
	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		cfg->relay = BT_MESH_RELAY_NOT_SUPPORTED;
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		cfg->frnd = BT_MESH_FRIEND_NOT_SUPPORTED;
   10a7c:	2302      	movs	r3, #2
   10a7e:	7263      	strb	r3, [r4, #9]

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		cfg->gatt_proxy = BT_MESH_GATT_PROXY_NOT_SUPPORTED;
	}

	k_delayed_work_init(&cfg->hb_pub.timer, hb_publish);
   10a80:	f104 000c 	add.w	r0, r4, #12
   10a84:	4910      	ldr	r1, [pc, #64]	; (10ac8 <bt_mesh_cfg_srv_init+0x90>)
   10a86:	f012 fa80 	bl	22f8a <k_delayed_work_init>
	cfg->hb_pub.net_idx = BT_MESH_KEY_UNUSED;
   10a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10a8e:	86a3      	strh	r3, [r4, #52]	; 0x34
	cfg->hb_sub.expiry = 0;
   10a90:	2200      	movs	r2, #0
   10a92:	2300      	movs	r3, #0
   10a94:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38

	cfg->model = model;

	conf = cfg;
   10a98:	4b0c      	ldr	r3, [pc, #48]	; (10acc <bt_mesh_cfg_srv_init+0x94>)
	cfg->model = model;
   10a9a:	6025      	str	r5, [r4, #0]
	conf = cfg;
   10a9c:	601c      	str	r4, [r3, #0]

	return 0;
   10a9e:	2000      	movs	r0, #0
}
   10aa0:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid values in configuration");
   10aa2:	2301      	movs	r3, #1
   10aa4:	f04f 0100 	mov.w	r1, #0
   10aa8:	f363 0107 	bfi	r1, r3, #0, #8
   10aac:	4a03      	ldr	r2, [pc, #12]	; (10abc <bt_mesh_cfg_srv_init+0x84>)
   10aae:	4b04      	ldr	r3, [pc, #16]	; (10ac0 <bt_mesh_cfg_srv_init+0x88>)
   10ab0:	4807      	ldr	r0, [pc, #28]	; (10ad0 <bt_mesh_cfg_srv_init+0x98>)
   10ab2:	1a9b      	subs	r3, r3, r2
   10ab4:	08db      	lsrs	r3, r3, #3
   10ab6:	f363 118f 	bfi	r1, r3, #6, #10
   10aba:	e7cd      	b.n	10a58 <bt_mesh_cfg_srv_init+0x20>
   10abc:	000233ec 	.word	0x000233ec
   10ac0:	00023494 	.word	0x00023494
   10ac4:	000266ab 	.word	0x000266ab
   10ac8:	00011045 	.word	0x00011045
   10acc:	20000ac8 	.word	0x20000ac8
   10ad0:	000266d4 	.word	0x000266d4

00010ad4 <bt_mesh_heartbeat>:

	(void)memset(labels, 0, sizeof(labels));
}

void bt_mesh_heartbeat(u16_t src, u16_t dst, u8_t hops, u16_t feat)
{
   10ad4:	b570      	push	{r4, r5, r6, lr}
   10ad6:	461e      	mov	r6, r3
	struct bt_mesh_cfg_srv *cfg = conf;
   10ad8:	4b2d      	ldr	r3, [pc, #180]	; (10b90 <bt_mesh_heartbeat+0xbc>)
   10ada:	681c      	ldr	r4, [r3, #0]
{
   10adc:	4615      	mov	r5, r2

	if (!cfg) {
   10ade:	b97c      	cbnz	r4, 10b00 <bt_mesh_heartbeat+0x2c>
		BT_WARN("No configuaration server context available");
   10ae0:	2302      	movs	r3, #2
   10ae2:	f04f 0100 	mov.w	r1, #0
   10ae6:	f363 0107 	bfi	r1, r3, #0, #8
   10aea:	4a2a      	ldr	r2, [pc, #168]	; (10b94 <bt_mesh_heartbeat+0xc0>)
   10aec:	4b2a      	ldr	r3, [pc, #168]	; (10b98 <bt_mesh_heartbeat+0xc4>)
   10aee:	482b      	ldr	r0, [pc, #172]	; (10b9c <bt_mesh_heartbeat+0xc8>)
   10af0:	1a9b      	subs	r3, r3, r2
   10af2:	08db      	lsrs	r3, r3, #3
   10af4:	f363 118f 	bfi	r1, r3, #6, #10
	       cfg->hb_sub.count);

	if (cfg->hb_sub.func) {
		cfg->hb_sub.func(hops, feat);
	}
}
   10af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("No subscription for received heartbeat");
   10afc:	f00d bca1 	b.w	1e442 <log_0>
	if (src != cfg->hb_sub.src || dst != cfg->hb_sub.dst) {
   10b00:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
   10b04:	4283      	cmp	r3, r0
   10b06:	d103      	bne.n	10b10 <bt_mesh_heartbeat+0x3c>
   10b08:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   10b0c:	428b      	cmp	r3, r1
   10b0e:	d00c      	beq.n	10b2a <bt_mesh_heartbeat+0x56>
		BT_WARN("No subscription for received heartbeat");
   10b10:	2302      	movs	r3, #2
   10b12:	f04f 0100 	mov.w	r1, #0
   10b16:	f363 0107 	bfi	r1, r3, #0, #8
   10b1a:	4a1e      	ldr	r2, [pc, #120]	; (10b94 <bt_mesh_heartbeat+0xc0>)
   10b1c:	4b1e      	ldr	r3, [pc, #120]	; (10b98 <bt_mesh_heartbeat+0xc4>)
   10b1e:	4820      	ldr	r0, [pc, #128]	; (10ba0 <bt_mesh_heartbeat+0xcc>)
   10b20:	1a9b      	subs	r3, r3, r2
   10b22:	08db      	lsrs	r3, r3, #3
   10b24:	f363 118f 	bfi	r1, r3, #6, #10
   10b28:	e7e6      	b.n	10af8 <bt_mesh_heartbeat+0x24>
   10b2a:	f012 fa93 	bl	23054 <z_impl_k_uptime_get>
	if (k_uptime_get() > cfg->hb_sub.expiry) {
   10b2e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   10b32:	4282      	cmp	r2, r0
   10b34:	418b      	sbcs	r3, r1
   10b36:	da0c      	bge.n	10b52 <bt_mesh_heartbeat+0x7e>
		BT_WARN("Heartbeat subscription period expired");
   10b38:	2302      	movs	r3, #2
   10b3a:	f04f 0100 	mov.w	r1, #0
   10b3e:	f363 0107 	bfi	r1, r3, #0, #8
   10b42:	4a14      	ldr	r2, [pc, #80]	; (10b94 <bt_mesh_heartbeat+0xc0>)
   10b44:	4b14      	ldr	r3, [pc, #80]	; (10b98 <bt_mesh_heartbeat+0xc4>)
   10b46:	4817      	ldr	r0, [pc, #92]	; (10ba4 <bt_mesh_heartbeat+0xd0>)
   10b48:	1a9b      	subs	r3, r3, r2
   10b4a:	08db      	lsrs	r3, r3, #3
   10b4c:	f363 118f 	bfi	r1, r3, #6, #10
   10b50:	e7d2      	b.n	10af8 <bt_mesh_heartbeat+0x24>
	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
   10b52:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	if (cfg->hb_sub.count < 0xffff) {
   10b56:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
   10b5a:	42aa      	cmp	r2, r5
   10b5c:	bf28      	it	cs
   10b5e:	462a      	movcs	r2, r5
   10b60:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
   10b64:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
	if (cfg->hb_sub.count < 0xffff) {
   10b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
   10b6c:	42aa      	cmp	r2, r5
   10b6e:	bf38      	it	cc
   10b70:	462a      	movcc	r2, r5
	if (cfg->hb_sub.count < 0xffff) {
   10b72:	4299      	cmp	r1, r3
	if (cfg->hb_sub.func) {
   10b74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
   10b76:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
		cfg->hb_sub.count++;
   10b7a:	bf1c      	itt	ne
   10b7c:	3101      	addne	r1, #1
   10b7e:	f8a4 1044 	strhne.w	r1, [r4, #68]	; 0x44
	if (cfg->hb_sub.func) {
   10b82:	b123      	cbz	r3, 10b8e <bt_mesh_heartbeat+0xba>
		cfg->hb_sub.func(hops, feat);
   10b84:	4631      	mov	r1, r6
   10b86:	4628      	mov	r0, r5
}
   10b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cfg->hb_sub.func(hops, feat);
   10b8c:	4718      	bx	r3
}
   10b8e:	bd70      	pop	{r4, r5, r6, pc}
   10b90:	20000ac8 	.word	0x20000ac8
   10b94:	000233ec 	.word	0x000233ec
   10b98:	00023494 	.word	0x00023494
   10b9c:	000266f4 	.word	0x000266f4
   10ba0:	0002671f 	.word	0x0002671f
   10ba4:	00026746 	.word	0x00026746

00010ba8 <bt_mesh_net_transmit_get>:

u8_t bt_mesh_net_transmit_get(void)
{
	if (conf) {
   10ba8:	4b02      	ldr	r3, [pc, #8]	; (10bb4 <bt_mesh_net_transmit_get+0xc>)
   10baa:	6818      	ldr	r0, [r3, #0]
   10bac:	b100      	cbz	r0, 10bb0 <bt_mesh_net_transmit_get+0x8>
		return conf->net_transmit;
   10bae:	7900      	ldrb	r0, [r0, #4]
	}

	return 0;
}
   10bb0:	4770      	bx	lr
   10bb2:	bf00      	nop
   10bb4:	20000ac8 	.word	0x20000ac8

00010bb8 <net_transmit_set>:
{
   10bb8:	b530      	push	{r4, r5, lr}
   10bba:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10bbc:	ab03      	add	r3, sp, #12
{
   10bbe:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10bc0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   10bc4:	9305      	str	r3, [sp, #20]
   10bc6:	e9cd 1306 	strd	r1, r3, [sp, #24]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10bca:	6983      	ldr	r3, [r0, #24]
{
   10bcc:	4604      	mov	r4, r0
	if (!cfg) {
   10bce:	bb83      	cbnz	r3, 10c32 <net_transmit_set+0x7a>
		BT_WARN("No Configuration Server context available");
   10bd0:	2302      	movs	r3, #2
   10bd2:	f04f 0100 	mov.w	r1, #0
   10bd6:	f363 0107 	bfi	r1, r3, #0, #8
   10bda:	4a19      	ldr	r2, [pc, #100]	; (10c40 <net_transmit_set+0x88>)
   10bdc:	4b19      	ldr	r3, [pc, #100]	; (10c44 <net_transmit_set+0x8c>)
   10bde:	481a      	ldr	r0, [pc, #104]	; (10c48 <net_transmit_set+0x90>)
   10be0:	1a9b      	subs	r3, r3, r2
   10be2:	08db      	lsrs	r3, r3, #3
   10be4:	f363 118f 	bfi	r1, r3, #6, #10
   10be8:	f00d fc2b 	bl	1e442 <log_0>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   10bec:	f248 0125 	movw	r1, #32805	; 0x8025
   10bf0:	a805      	add	r0, sp, #20
   10bf2:	f010 faf2 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   10bf6:	f7ff ffd7 	bl	10ba8 <bt_mesh_net_transmit_get>
   10bfa:	4601      	mov	r1, r0
   10bfc:	a805      	add	r0, sp, #20
   10bfe:	f011 fcd3 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10c02:	2300      	movs	r3, #0
   10c04:	9300      	str	r3, [sp, #0]
   10c06:	aa05      	add	r2, sp, #20
   10c08:	4629      	mov	r1, r5
   10c0a:	4620      	mov	r0, r4
   10c0c:	f010 fb0e 	bl	2122c <bt_mesh_model_send>
   10c10:	b168      	cbz	r0, 10c2e <net_transmit_set+0x76>
		BT_ERR("Unable to send Network Transmit Status");
   10c12:	2301      	movs	r3, #1
   10c14:	f04f 0100 	mov.w	r1, #0
   10c18:	f363 0107 	bfi	r1, r3, #0, #8
   10c1c:	4a08      	ldr	r2, [pc, #32]	; (10c40 <net_transmit_set+0x88>)
   10c1e:	4b09      	ldr	r3, [pc, #36]	; (10c44 <net_transmit_set+0x8c>)
   10c20:	480a      	ldr	r0, [pc, #40]	; (10c4c <net_transmit_set+0x94>)
   10c22:	1a9b      	subs	r3, r3, r2
   10c24:	08db      	lsrs	r3, r3, #3
   10c26:	f363 118f 	bfi	r1, r3, #6, #10
   10c2a:	f00d fc0a 	bl	1e442 <log_0>
}
   10c2e:	b009      	add	sp, #36	; 0x24
   10c30:	bd30      	pop	{r4, r5, pc}
		cfg->net_transmit = buf->data[0];
   10c32:	6812      	ldr	r2, [r2, #0]
   10c34:	7812      	ldrb	r2, [r2, #0]
   10c36:	711a      	strb	r2, [r3, #4]
			bt_mesh_store_cfg();
   10c38:	f010 fddd 	bl	217f6 <bt_mesh_store_cfg>
   10c3c:	e7d6      	b.n	10bec <net_transmit_set+0x34>
   10c3e:	bf00      	nop
   10c40:	000233ec 	.word	0x000233ec
   10c44:	00023494 	.word	0x00023494
   10c48:	00026b91 	.word	0x00026b91
   10c4c:	00026bbb 	.word	0x00026bbb

00010c50 <net_transmit_get>:
{
   10c50:	b530      	push	{r4, r5, lr}
   10c52:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10c54:	ab03      	add	r3, sp, #12
   10c56:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   10c5a:	4604      	mov	r4, r0
   10c5c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   10c5e:	a805      	add	r0, sp, #20
   10c60:	f248 0125 	movw	r1, #32805	; 0x8025
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10c64:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10c68:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   10c6a:	f010 fab6 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   10c6e:	f7ff ff9b 	bl	10ba8 <bt_mesh_net_transmit_get>
   10c72:	4601      	mov	r1, r0
   10c74:	a805      	add	r0, sp, #20
   10c76:	f011 fc97 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10c7a:	2300      	movs	r3, #0
   10c7c:	9300      	str	r3, [sp, #0]
   10c7e:	aa05      	add	r2, sp, #20
   10c80:	4629      	mov	r1, r5
   10c82:	4620      	mov	r0, r4
   10c84:	f010 fad2 	bl	2122c <bt_mesh_model_send>
   10c88:	b168      	cbz	r0, 10ca6 <net_transmit_get+0x56>
		BT_ERR("Unable to send Config Network Transmit Status");
   10c8a:	2301      	movs	r3, #1
   10c8c:	f04f 0100 	mov.w	r1, #0
   10c90:	f363 0107 	bfi	r1, r3, #0, #8
   10c94:	4a05      	ldr	r2, [pc, #20]	; (10cac <net_transmit_get+0x5c>)
   10c96:	4b06      	ldr	r3, [pc, #24]	; (10cb0 <net_transmit_get+0x60>)
   10c98:	4806      	ldr	r0, [pc, #24]	; (10cb4 <net_transmit_get+0x64>)
   10c9a:	1a9b      	subs	r3, r3, r2
   10c9c:	08db      	lsrs	r3, r3, #3
   10c9e:	f363 118f 	bfi	r1, r3, #6, #10
   10ca2:	f00d fbce 	bl	1e442 <log_0>
}
   10ca6:	b009      	add	sp, #36	; 0x24
   10ca8:	bd30      	pop	{r4, r5, pc}
   10caa:	bf00      	nop
   10cac:	000233ec 	.word	0x000233ec
   10cb0:	00023494 	.word	0x00023494
   10cb4:	00026b63 	.word	0x00026b63

00010cb8 <bt_mesh_relay_get>:

u8_t bt_mesh_relay_get(void)
{
	if (conf) {
   10cb8:	4b03      	ldr	r3, [pc, #12]	; (10cc8 <bt_mesh_relay_get+0x10>)
   10cba:	681b      	ldr	r3, [r3, #0]
   10cbc:	b10b      	cbz	r3, 10cc2 <bt_mesh_relay_get+0xa>
		return conf->relay;
   10cbe:	7958      	ldrb	r0, [r3, #5]
   10cc0:	4770      	bx	lr
	}

	return BT_MESH_RELAY_NOT_SUPPORTED;
   10cc2:	2002      	movs	r0, #2
}
   10cc4:	4770      	bx	lr
   10cc6:	bf00      	nop
   10cc8:	20000ac8 	.word	0x20000ac8

00010ccc <bt_mesh_friend_get>:

u8_t bt_mesh_friend_get(void)
{
	BT_DBG("conf %p conf->frnd 0x%02x", conf, conf->frnd);

	if (conf) {
   10ccc:	4b03      	ldr	r3, [pc, #12]	; (10cdc <bt_mesh_friend_get+0x10>)
   10cce:	681b      	ldr	r3, [r3, #0]
   10cd0:	b10b      	cbz	r3, 10cd6 <bt_mesh_friend_get+0xa>
		return conf->frnd;
   10cd2:	7a58      	ldrb	r0, [r3, #9]
   10cd4:	4770      	bx	lr
	}

	return BT_MESH_FRIEND_NOT_SUPPORTED;
   10cd6:	2002      	movs	r0, #2
}
   10cd8:	4770      	bx	lr
   10cda:	bf00      	nop
   10cdc:	20000ac8 	.word	0x20000ac8

00010ce0 <bt_mesh_relay_retransmit_get>:

u8_t bt_mesh_relay_retransmit_get(void)
{
	if (conf) {
   10ce0:	4b02      	ldr	r3, [pc, #8]	; (10cec <bt_mesh_relay_retransmit_get+0xc>)
   10ce2:	6818      	ldr	r0, [r3, #0]
   10ce4:	b100      	cbz	r0, 10ce8 <bt_mesh_relay_retransmit_get+0x8>
		return conf->relay_retransmit;
   10ce6:	7980      	ldrb	r0, [r0, #6]
	}

	return 0;
}
   10ce8:	4770      	bx	lr
   10cea:	bf00      	nop
   10cec:	20000ac8 	.word	0x20000ac8

00010cf0 <relay_get>:
{
   10cf0:	b530      	push	{r4, r5, lr}
   10cf2:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   10cf4:	ab03      	add	r3, sp, #12
   10cf6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   10cfa:	4604      	mov	r4, r0
   10cfc:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   10cfe:	a805      	add	r0, sp, #20
   10d00:	f248 0128 	movw	r1, #32808	; 0x8028
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   10d04:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10d08:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   10d0a:	f010 fa66 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   10d0e:	f7ff ffd3 	bl	10cb8 <bt_mesh_relay_get>
   10d12:	4601      	mov	r1, r0
   10d14:	a805      	add	r0, sp, #20
   10d16:	f011 fc47 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   10d1a:	f7ff ffe1 	bl	10ce0 <bt_mesh_relay_retransmit_get>
   10d1e:	4601      	mov	r1, r0
   10d20:	a805      	add	r0, sp, #20
   10d22:	f011 fc41 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10d26:	2300      	movs	r3, #0
   10d28:	9300      	str	r3, [sp, #0]
   10d2a:	aa05      	add	r2, sp, #20
   10d2c:	4629      	mov	r1, r5
   10d2e:	4620      	mov	r0, r4
   10d30:	f010 fa7c 	bl	2122c <bt_mesh_model_send>
   10d34:	b168      	cbz	r0, 10d52 <relay_get+0x62>
		BT_ERR("Unable to send Config Relay Status response");
   10d36:	2301      	movs	r3, #1
   10d38:	f04f 0100 	mov.w	r1, #0
   10d3c:	f363 0107 	bfi	r1, r3, #0, #8
   10d40:	4a05      	ldr	r2, [pc, #20]	; (10d58 <relay_get+0x68>)
   10d42:	4b06      	ldr	r3, [pc, #24]	; (10d5c <relay_get+0x6c>)
   10d44:	4806      	ldr	r0, [pc, #24]	; (10d60 <relay_get+0x70>)
   10d46:	1a9b      	subs	r3, r3, r2
   10d48:	08db      	lsrs	r3, r3, #3
   10d4a:	f363 118f 	bfi	r1, r3, #6, #10
   10d4e:	f00d fb78 	bl	1e442 <log_0>
}
   10d52:	b009      	add	sp, #36	; 0x24
   10d54:	bd30      	pop	{r4, r5, pc}
   10d56:	bf00      	nop
   10d58:	000233ec 	.word	0x000233ec
   10d5c:	00023494 	.word	0x00023494
   10d60:	00026c5f 	.word	0x00026c5f

00010d64 <bt_mesh_beacon_get>:

u8_t bt_mesh_beacon_get(void)
{
	if (conf) {
   10d64:	4b02      	ldr	r3, [pc, #8]	; (10d70 <bt_mesh_beacon_get+0xc>)
   10d66:	6818      	ldr	r0, [r3, #0]
   10d68:	b100      	cbz	r0, 10d6c <bt_mesh_beacon_get+0x8>
		return conf->beacon;
   10d6a:	79c0      	ldrb	r0, [r0, #7]
	}

	return BT_MESH_BEACON_DISABLED;
}
   10d6c:	4770      	bx	lr
   10d6e:	bf00      	nop
   10d70:	20000ac8 	.word	0x20000ac8

00010d74 <beacon_set>:
{
   10d74:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10d76:	6984      	ldr	r4, [r0, #24]
{
   10d78:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10d7a:	ab03      	add	r3, sp, #12
{
   10d7c:	460e      	mov	r6, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10d7e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
{
   10d82:	4605      	mov	r5, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10d84:	9305      	str	r3, [sp, #20]
   10d86:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (!cfg) {
   10d8a:	bb7c      	cbnz	r4, 10dec <beacon_set+0x78>
		BT_WARN("No Configuration Server context available");
   10d8c:	2302      	movs	r3, #2
   10d8e:	f04f 0100 	mov.w	r1, #0
   10d92:	f363 0107 	bfi	r1, r3, #0, #8
   10d96:	4a26      	ldr	r2, [pc, #152]	; (10e30 <beacon_set+0xbc>)
   10d98:	4b26      	ldr	r3, [pc, #152]	; (10e34 <beacon_set+0xc0>)
   10d9a:	4827      	ldr	r0, [pc, #156]	; (10e38 <beacon_set+0xc4>)
   10d9c:	1a9b      	subs	r3, r3, r2
   10d9e:	08db      	lsrs	r3, r3, #3
   10da0:	f363 118f 	bfi	r1, r3, #6, #10
   10da4:	f00d fb4d 	bl	1e442 <log_0>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   10da8:	f248 010b 	movw	r1, #32779	; 0x800b
   10dac:	a805      	add	r0, sp, #20
   10dae:	f010 fa14 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   10db2:	f7ff ffd7 	bl	10d64 <bt_mesh_beacon_get>
   10db6:	4601      	mov	r1, r0
   10db8:	a805      	add	r0, sp, #20
   10dba:	f011 fbf5 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10dbe:	2300      	movs	r3, #0
   10dc0:	9300      	str	r3, [sp, #0]
   10dc2:	aa05      	add	r2, sp, #20
   10dc4:	4631      	mov	r1, r6
   10dc6:	4628      	mov	r0, r5
   10dc8:	f010 fa30 	bl	2122c <bt_mesh_model_send>
   10dcc:	b370      	cbz	r0, 10e2c <beacon_set+0xb8>
		BT_ERR("Unable to send Config Beacon Status response");
   10dce:	2301      	movs	r3, #1
   10dd0:	f04f 0100 	mov.w	r1, #0
   10dd4:	f363 0107 	bfi	r1, r3, #0, #8
   10dd8:	4a15      	ldr	r2, [pc, #84]	; (10e30 <beacon_set+0xbc>)
   10dda:	4b16      	ldr	r3, [pc, #88]	; (10e34 <beacon_set+0xc0>)
   10ddc:	4817      	ldr	r0, [pc, #92]	; (10e3c <beacon_set+0xc8>)
   10dde:	1a9b      	subs	r3, r3, r2
   10de0:	08db      	lsrs	r3, r3, #3
   10de2:	f363 118f 	bfi	r1, r3, #6, #10
   10de6:	f00d fb2c 	bl	1e442 <log_0>
   10dea:	e01f      	b.n	10e2c <beacon_set+0xb8>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   10dec:	6813      	ldr	r3, [r2, #0]
   10dee:	7819      	ldrb	r1, [r3, #0]
   10df0:	2901      	cmp	r1, #1
   10df2:	d80d      	bhi.n	10e10 <beacon_set+0x9c>
		if (buf->data[0] != cfg->beacon) {
   10df4:	79e3      	ldrb	r3, [r4, #7]
   10df6:	428b      	cmp	r3, r1
   10df8:	d0d6      	beq.n	10da8 <beacon_set+0x34>
			cfg->beacon = buf->data[0];
   10dfa:	71e1      	strb	r1, [r4, #7]
				bt_mesh_store_cfg();
   10dfc:	f010 fcfb 	bl	217f6 <bt_mesh_store_cfg>
			if (cfg->beacon) {
   10e00:	79e3      	ldrb	r3, [r4, #7]
   10e02:	b113      	cbz	r3, 10e0a <beacon_set+0x96>
				bt_mesh_beacon_enable();
   10e04:	f7fa ff7a 	bl	bcfc <bt_mesh_beacon_enable>
   10e08:	e7ce      	b.n	10da8 <beacon_set+0x34>
				bt_mesh_beacon_disable();
   10e0a:	f7fa ff9d 	bl	bd48 <bt_mesh_beacon_disable>
   10e0e:	e7cb      	b.n	10da8 <beacon_set+0x34>
		BT_WARN("Invalid Config Beacon value 0x%02x", buf->data[0]);
   10e10:	2302      	movs	r3, #2
   10e12:	f04f 0200 	mov.w	r2, #0
   10e16:	f363 0207 	bfi	r2, r3, #0, #8
   10e1a:	4805      	ldr	r0, [pc, #20]	; (10e30 <beacon_set+0xbc>)
   10e1c:	4b05      	ldr	r3, [pc, #20]	; (10e34 <beacon_set+0xc0>)
   10e1e:	1a1b      	subs	r3, r3, r0
   10e20:	08db      	lsrs	r3, r3, #3
   10e22:	f363 128f 	bfi	r2, r3, #6, #10
   10e26:	4806      	ldr	r0, [pc, #24]	; (10e40 <beacon_set+0xcc>)
   10e28:	f00d fb18 	bl	1e45c <log_1>
}
   10e2c:	b008      	add	sp, #32
   10e2e:	bd70      	pop	{r4, r5, r6, pc}
   10e30:	000233ec 	.word	0x000233ec
   10e34:	00023494 	.word	0x00023494
   10e38:	00026b91 	.word	0x00026b91
   10e3c:	0002667e 	.word	0x0002667e
   10e40:	0002665b 	.word	0x0002665b

00010e44 <beacon_get>:
{
   10e44:	b530      	push	{r4, r5, lr}
   10e46:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10e48:	ab03      	add	r3, sp, #12
   10e4a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   10e4e:	4604      	mov	r4, r0
   10e50:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   10e52:	a805      	add	r0, sp, #20
   10e54:	f248 010b 	movw	r1, #32779	; 0x800b
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10e58:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10e5c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   10e5e:	f010 f9bc 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   10e62:	f7ff ff7f 	bl	10d64 <bt_mesh_beacon_get>
   10e66:	4601      	mov	r1, r0
   10e68:	a805      	add	r0, sp, #20
   10e6a:	f011 fb9d 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10e6e:	2300      	movs	r3, #0
   10e70:	9300      	str	r3, [sp, #0]
   10e72:	aa05      	add	r2, sp, #20
   10e74:	4629      	mov	r1, r5
   10e76:	4620      	mov	r0, r4
   10e78:	f010 f9d8 	bl	2122c <bt_mesh_model_send>
   10e7c:	b168      	cbz	r0, 10e9a <beacon_get+0x56>
		BT_ERR("Unable to send Config Beacon Status response");
   10e7e:	2301      	movs	r3, #1
   10e80:	f04f 0100 	mov.w	r1, #0
   10e84:	f363 0107 	bfi	r1, r3, #0, #8
   10e88:	4a05      	ldr	r2, [pc, #20]	; (10ea0 <beacon_get+0x5c>)
   10e8a:	4b06      	ldr	r3, [pc, #24]	; (10ea4 <beacon_get+0x60>)
   10e8c:	4806      	ldr	r0, [pc, #24]	; (10ea8 <beacon_get+0x64>)
   10e8e:	1a9b      	subs	r3, r3, r2
   10e90:	08db      	lsrs	r3, r3, #3
   10e92:	f363 118f 	bfi	r1, r3, #6, #10
   10e96:	f00d fad4 	bl	1e442 <log_0>
}
   10e9a:	b009      	add	sp, #36	; 0x24
   10e9c:	bd30      	pop	{r4, r5, pc}
   10e9e:	bf00      	nop
   10ea0:	000233ec 	.word	0x000233ec
   10ea4:	00023494 	.word	0x00023494
   10ea8:	0002667e 	.word	0x0002667e

00010eac <bt_mesh_gatt_proxy_get>:

u8_t bt_mesh_gatt_proxy_get(void)
{
	if (conf) {
   10eac:	4b03      	ldr	r3, [pc, #12]	; (10ebc <bt_mesh_gatt_proxy_get+0x10>)
   10eae:	681b      	ldr	r3, [r3, #0]
   10eb0:	b10b      	cbz	r3, 10eb6 <bt_mesh_gatt_proxy_get+0xa>
		return conf->gatt_proxy;
   10eb2:	7a18      	ldrb	r0, [r3, #8]
   10eb4:	4770      	bx	lr
	}

	return BT_MESH_GATT_PROXY_NOT_SUPPORTED;
   10eb6:	2002      	movs	r0, #2
}
   10eb8:	4770      	bx	lr
   10eba:	bf00      	nop
   10ebc:	20000ac8 	.word	0x20000ac8

00010ec0 <friend_set>:
{
   10ec0:	b570      	push	{r4, r5, r6, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   10ec2:	6813      	ldr	r3, [r2, #0]
{
   10ec4:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   10ec6:	7819      	ldrb	r1, [r3, #0]
   10ec8:	2901      	cmp	r1, #1
{
   10eca:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   10ecc:	d90f      	bls.n	10eee <friend_set+0x2e>
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   10ece:	2302      	movs	r3, #2
   10ed0:	f04f 0200 	mov.w	r2, #0
   10ed4:	f363 0207 	bfi	r2, r3, #0, #8
   10ed8:	4817      	ldr	r0, [pc, #92]	; (10f38 <friend_set+0x78>)
   10eda:	4b18      	ldr	r3, [pc, #96]	; (10f3c <friend_set+0x7c>)
   10edc:	1a1b      	subs	r3, r3, r0
   10ede:	08db      	lsrs	r3, r3, #3
   10ee0:	f363 128f 	bfi	r2, r3, #6, #10
   10ee4:	4816      	ldr	r0, [pc, #88]	; (10f40 <friend_set+0x80>)
}
   10ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   10eea:	f00d bab7 	b.w	1e45c <log_1>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10eee:	6984      	ldr	r4, [r0, #24]
	if (!cfg) {
   10ef0:	b99c      	cbnz	r4, 10f1a <friend_set+0x5a>
		BT_WARN("No Configuration Server context available");
   10ef2:	2302      	movs	r3, #2
   10ef4:	f04f 0100 	mov.w	r1, #0
   10ef8:	f363 0107 	bfi	r1, r3, #0, #8
   10efc:	4a0e      	ldr	r2, [pc, #56]	; (10f38 <friend_set+0x78>)
   10efe:	4b0f      	ldr	r3, [pc, #60]	; (10f3c <friend_set+0x7c>)
   10f00:	4810      	ldr	r0, [pc, #64]	; (10f44 <friend_set+0x84>)
   10f02:	1a9b      	subs	r3, r3, r2
   10f04:	08db      	lsrs	r3, r3, #3
   10f06:	f363 118f 	bfi	r1, r3, #6, #10
   10f0a:	f00d fa9a 	bl	1e442 <log_0>
	send_friend_status(model, ctx);
   10f0e:	4631      	mov	r1, r6
   10f10:	4628      	mov	r0, r5
}
   10f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_friend_status(model, ctx);
   10f16:	f7fe bb37 	b.w	f588 <send_friend_status>
	if (cfg->frnd == buf->data[0]) {
   10f1a:	7a63      	ldrb	r3, [r4, #9]
   10f1c:	428b      	cmp	r3, r1
   10f1e:	d0f6      	beq.n	10f0e <friend_set+0x4e>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   10f20:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
   10f22:	f7fb f83b 	bl	bf9c <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_FRIEND) && sub) {
   10f26:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10f28:	075b      	lsls	r3, r3, #29
   10f2a:	d5f0      	bpl.n	10f0e <friend_set+0x4e>
   10f2c:	2800      	cmp	r0, #0
   10f2e:	d0ee      	beq.n	10f0e <friend_set+0x4e>
		hb_send(model);
   10f30:	4628      	mov	r0, r5
   10f32:	f010 faca 	bl	214ca <hb_send>
   10f36:	e7ea      	b.n	10f0e <friend_set+0x4e>
   10f38:	000233ec 	.word	0x000233ec
   10f3c:	00023494 	.word	0x00023494
   10f40:	0002686f 	.word	0x0002686f
   10f44:	00026b91 	.word	0x00026b91

00010f48 <relay_set>:
{
   10f48:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10f4a:	6984      	ldr	r4, [r0, #24]
{
   10f4c:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   10f4e:	ab03      	add	r3, sp, #12
{
   10f50:	460f      	mov	r7, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   10f52:	f44f 2100 	mov.w	r1, #524288	; 0x80000
{
   10f56:	4606      	mov	r6, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   10f58:	9305      	str	r3, [sp, #20]
   10f5a:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (!cfg) {
   10f5e:	2c00      	cmp	r4, #0
   10f60:	d136      	bne.n	10fd0 <relay_set+0x88>
		BT_WARN("No Configuration Server context available");
   10f62:	2302      	movs	r3, #2
   10f64:	f04f 0100 	mov.w	r1, #0
   10f68:	f363 0107 	bfi	r1, r3, #0, #8
   10f6c:	4a30      	ldr	r2, [pc, #192]	; (11030 <relay_set+0xe8>)
   10f6e:	4b31      	ldr	r3, [pc, #196]	; (11034 <relay_set+0xec>)
   10f70:	4831      	ldr	r0, [pc, #196]	; (11038 <relay_set+0xf0>)
   10f72:	1a9b      	subs	r3, r3, r2
   10f74:	08db      	lsrs	r3, r3, #3
   10f76:	f363 118f 	bfi	r1, r3, #6, #10
   10f7a:	f00d fa62 	bl	1e442 <log_0>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   10f7e:	f248 0128 	movw	r1, #32808	; 0x8028
   10f82:	a805      	add	r0, sp, #20
   10f84:	f010 f929 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   10f88:	f7ff fe96 	bl	10cb8 <bt_mesh_relay_get>
   10f8c:	4601      	mov	r1, r0
   10f8e:	a805      	add	r0, sp, #20
   10f90:	f011 fb0a 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   10f94:	f7ff fea4 	bl	10ce0 <bt_mesh_relay_retransmit_get>
   10f98:	4601      	mov	r1, r0
   10f9a:	a805      	add	r0, sp, #20
   10f9c:	f011 fb04 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10fa0:	2300      	movs	r3, #0
   10fa2:	9300      	str	r3, [sp, #0]
   10fa4:	aa05      	add	r2, sp, #20
   10fa6:	4639      	mov	r1, r7
   10fa8:	4630      	mov	r0, r6
   10faa:	f010 f93f 	bl	2122c <bt_mesh_model_send>
   10fae:	2800      	cmp	r0, #0
   10fb0:	d03b      	beq.n	1102a <relay_set+0xe2>
		BT_ERR("Unable to send Relay Status response");
   10fb2:	2301      	movs	r3, #1
   10fb4:	f04f 0100 	mov.w	r1, #0
   10fb8:	f363 0107 	bfi	r1, r3, #0, #8
   10fbc:	4a1c      	ldr	r2, [pc, #112]	; (11030 <relay_set+0xe8>)
   10fbe:	4b1d      	ldr	r3, [pc, #116]	; (11034 <relay_set+0xec>)
   10fc0:	481e      	ldr	r0, [pc, #120]	; (1103c <relay_set+0xf4>)
   10fc2:	1a9b      	subs	r3, r3, r2
   10fc4:	08db      	lsrs	r3, r3, #3
   10fc6:	f363 118f 	bfi	r1, r3, #6, #10
   10fca:	f00d fa3a 	bl	1e442 <log_0>
   10fce:	e02c      	b.n	1102a <relay_set+0xe2>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   10fd0:	6813      	ldr	r3, [r2, #0]
   10fd2:	7819      	ldrb	r1, [r3, #0]
   10fd4:	2901      	cmp	r1, #1
   10fd6:	d81a      	bhi.n	1100e <relay_set+0xc6>
		if (cfg->relay == BT_MESH_RELAY_NOT_SUPPORTED) {
   10fd8:	7965      	ldrb	r5, [r4, #5]
   10fda:	2d02      	cmp	r5, #2
   10fdc:	d015      	beq.n	1100a <relay_set+0xc2>
			cfg->relay = buf->data[0];
   10fde:	7161      	strb	r1, [r4, #5]
			cfg->relay_retransmit = buf->data[1];
   10fe0:	785b      	ldrb	r3, [r3, #1]
   10fe2:	71a3      	strb	r3, [r4, #6]
			change = (cfg->relay != buf->data[0]);
   10fe4:	1b4d      	subs	r5, r1, r5
   10fe6:	bf18      	it	ne
   10fe8:	2501      	movne	r5, #1
				bt_mesh_store_cfg();
   10fea:	f010 fc04 	bl	217f6 <bt_mesh_store_cfg>
		sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   10fee:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
   10ff0:	f7fa ffd4 	bl	bf9c <bt_mesh_subnet_get>
		if ((cfg->hb_pub.feat & BT_MESH_FEAT_RELAY) && sub && change) {
   10ff4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   10ff6:	07db      	lsls	r3, r3, #31
   10ff8:	d5c1      	bpl.n	10f7e <relay_set+0x36>
   10ffa:	2800      	cmp	r0, #0
   10ffc:	d0bf      	beq.n	10f7e <relay_set+0x36>
   10ffe:	2d00      	cmp	r5, #0
   11000:	d0bd      	beq.n	10f7e <relay_set+0x36>
			hb_send(model);
   11002:	4630      	mov	r0, r6
   11004:	f010 fa61 	bl	214ca <hb_send>
   11008:	e7b9      	b.n	10f7e <relay_set+0x36>
			change = false;
   1100a:	2500      	movs	r5, #0
   1100c:	e7ef      	b.n	10fee <relay_set+0xa6>
		BT_WARN("Invalid Relay value 0x%02x", buf->data[0]);
   1100e:	2302      	movs	r3, #2
   11010:	f04f 0200 	mov.w	r2, #0
   11014:	f363 0207 	bfi	r2, r3, #0, #8
   11018:	4805      	ldr	r0, [pc, #20]	; (11030 <relay_set+0xe8>)
   1101a:	4b06      	ldr	r3, [pc, #24]	; (11034 <relay_set+0xec>)
   1101c:	1a1b      	subs	r3, r3, r0
   1101e:	08db      	lsrs	r3, r3, #3
   11020:	f363 128f 	bfi	r2, r3, #6, #10
   11024:	4806      	ldr	r0, [pc, #24]	; (11040 <relay_set+0xf8>)
   11026:	f00d fa19 	bl	1e45c <log_1>
}
   1102a:	b009      	add	sp, #36	; 0x24
   1102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1102e:	bf00      	nop
   11030:	000233ec 	.word	0x000233ec
   11034:	00023494 	.word	0x00023494
   11038:	00026b91 	.word	0x00026b91
   1103c:	00026ca6 	.word	0x00026ca6
   11040:	00026c8b 	.word	0x00026c8b

00011044 <hb_publish>:
{
   11044:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_model *model = cfg->model;
   11046:	f850 6c0c 	ldr.w	r6, [r0, #-12]
{
   1104a:	4604      	mov	r4, r0
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   1104c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1104e:	f7fa ffa5 	bl	bf9c <bt_mesh_subnet_get>
	if (!sub) {
   11052:	4605      	mov	r5, r0
   11054:	b980      	cbnz	r0, 11078 <hb_publish+0x34>
		BT_ERR("No matching subnet for idx 0x%02x",
   11056:	2301      	movs	r3, #1
   11058:	f04f 0200 	mov.w	r2, #0
   1105c:	f363 0207 	bfi	r2, r3, #0, #8
   11060:	4915      	ldr	r1, [pc, #84]	; (110b8 <hb_publish+0x74>)
   11062:	4b16      	ldr	r3, [pc, #88]	; (110bc <hb_publish+0x78>)
   11064:	4816      	ldr	r0, [pc, #88]	; (110c0 <hb_publish+0x7c>)
   11066:	1a5b      	subs	r3, r3, r1
   11068:	08db      	lsrs	r3, r3, #3
   1106a:	f363 128f 	bfi	r2, r3, #6, #10
   1106e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   11070:	f00d f9f4 	bl	1e45c <log_1>
		cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
   11074:	8425      	strh	r5, [r4, #32]
}
   11076:	bd70      	pop	{r4, r5, r6, pc}
	if (cfg->hb_pub.count == 0) {
   11078:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1107a:	2900      	cmp	r1, #0
   1107c:	d0fb      	beq.n	11076 <hb_publish+0x32>
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000;
   1107e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   11082:	f010 fa02 	bl	2148a <hb_pwr2.constprop.22>
   11086:	ebc0 1240 	rsb	r2, r0, r0, lsl #5
   1108a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   1108e:	00d2      	lsls	r2, r2, #3
   11090:	b292      	uxth	r2, r2
	if (period_ms && cfg->hb_pub.count > 1) {
   11092:	b12a      	cbz	r2, 110a0 <hb_publish+0x5c>
   11094:	2901      	cmp	r1, #1
   11096:	d903      	bls.n	110a0 <hb_publish+0x5c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11098:	4621      	mov	r1, r4
   1109a:	480a      	ldr	r0, [pc, #40]	; (110c4 <hb_publish+0x80>)
   1109c:	f00b fa4c 	bl	1c538 <k_delayed_work_submit_to_queue>
	hb_send(model);
   110a0:	4630      	mov	r0, r6
   110a2:	f010 fa12 	bl	214ca <hb_send>
	if (cfg->hb_pub.count != 0xffff) {
   110a6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   110a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   110ac:	4293      	cmp	r3, r2
		cfg->hb_pub.count--;
   110ae:	bf1c      	itt	ne
   110b0:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
   110b4:	8463      	strhne	r3, [r4, #34]	; 0x22
   110b6:	e7de      	b.n	11076 <hb_publish+0x32>
   110b8:	000233ec 	.word	0x000233ec
   110bc:	00023494 	.word	0x00023494
   110c0:	000268d7 	.word	0x000268d7
   110c4:	20001c74 	.word	0x20001c74

000110c8 <node_identity_set>:
{
   110c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110cc:	4615      	mov	r5, r2
   110ce:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   110d0:	ab02      	add	r3, sp, #8
   110d2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
{
   110d6:	4607      	mov	r7, r0
	idx = net_buf_simple_pull_le16(buf);
   110d8:	4628      	mov	r0, r5
{
   110da:	4688      	mov	r8, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   110dc:	9305      	str	r3, [sp, #20]
   110de:	e9cd 2306 	strd	r2, r3, [sp, #24]
	idx = net_buf_simple_pull_le16(buf);
   110e2:	f011 fad7 	bl	22694 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   110e6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   110ea:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   110ec:	d311      	bcc.n	11112 <node_identity_set+0x4a>
		BT_WARN("Invalid NetKeyIndex 0x%04x", idx);
   110ee:	2302      	movs	r3, #2
   110f0:	f04f 0200 	mov.w	r2, #0
   110f4:	f363 0207 	bfi	r2, r3, #0, #8
   110f8:	4933      	ldr	r1, [pc, #204]	; (111c8 <node_identity_set+0x100>)
   110fa:	4b34      	ldr	r3, [pc, #208]	; (111cc <node_identity_set+0x104>)
   110fc:	1a5b      	subs	r3, r3, r1
   110fe:	08db      	lsrs	r3, r3, #3
   11100:	4601      	mov	r1, r0
   11102:	4833      	ldr	r0, [pc, #204]	; (111d0 <node_identity_set+0x108>)
   11104:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   11108:	f00d f9a8 	bl	1e45c <log_1>
}
   1110c:	b008      	add	sp, #32
   1110e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node_id = net_buf_simple_pull_u8(buf);
   11112:	4628      	mov	r0, r5
   11114:	f011 fab6 	bl	22684 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   11118:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   1111a:	4606      	mov	r6, r0
	if (node_id != 0x00 && node_id != 0x01) {
   1111c:	d90d      	bls.n	1113a <node_identity_set+0x72>
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   1111e:	2302      	movs	r3, #2
   11120:	f04f 0200 	mov.w	r2, #0
   11124:	f363 0207 	bfi	r2, r3, #0, #8
   11128:	4927      	ldr	r1, [pc, #156]	; (111c8 <node_identity_set+0x100>)
   1112a:	4b28      	ldr	r3, [pc, #160]	; (111cc <node_identity_set+0x104>)
   1112c:	1a5b      	subs	r3, r3, r1
   1112e:	08db      	lsrs	r3, r3, #3
   11130:	4601      	mov	r1, r0
   11132:	f363 128f 	bfi	r2, r3, #6, #10
   11136:	4827      	ldr	r0, [pc, #156]	; (111d4 <node_identity_set+0x10c>)
   11138:	e7e6      	b.n	11108 <node_identity_set+0x40>
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   1113a:	f248 0148 	movw	r1, #32840	; 0x8048
   1113e:	a805      	add	r0, sp, #20
   11140:	f010 f84b 	bl	211da <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
   11144:	4620      	mov	r0, r4
   11146:	f7fa ff29 	bl	bf9c <bt_mesh_subnet_get>
	if (!sub) {
   1114a:	4605      	mov	r5, r0
   1114c:	bb18      	cbnz	r0, 11196 <node_identity_set+0xce>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_NETKEY);
   1114e:	2104      	movs	r1, #4
   11150:	a805      	add	r0, sp, #20
   11152:	f011 fa29 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, idx);
   11156:	4621      	mov	r1, r4
   11158:	a805      	add	r0, sp, #20
   1115a:	f011 fa2d 	bl	225b8 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, node_id);
   1115e:	4631      	mov	r1, r6
		net_buf_simple_add_u8(&msg, sub->node_id);
   11160:	a805      	add	r0, sp, #20
   11162:	f011 fa21 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11166:	2300      	movs	r3, #0
   11168:	9300      	str	r3, [sp, #0]
   1116a:	aa05      	add	r2, sp, #20
   1116c:	4641      	mov	r1, r8
   1116e:	4638      	mov	r0, r7
   11170:	f010 f85c 	bl	2122c <bt_mesh_model_send>
   11174:	2800      	cmp	r0, #0
   11176:	d0c9      	beq.n	1110c <node_identity_set+0x44>
		BT_ERR("Unable to send Node Identity Status");
   11178:	2301      	movs	r3, #1
   1117a:	f04f 0100 	mov.w	r1, #0
   1117e:	f363 0107 	bfi	r1, r3, #0, #8
   11182:	4a11      	ldr	r2, [pc, #68]	; (111c8 <node_identity_set+0x100>)
   11184:	4b11      	ldr	r3, [pc, #68]	; (111cc <node_identity_set+0x104>)
   11186:	4814      	ldr	r0, [pc, #80]	; (111d8 <node_identity_set+0x110>)
   11188:	1a9b      	subs	r3, r3, r2
   1118a:	08db      	lsrs	r3, r3, #3
   1118c:	f363 118f 	bfi	r1, r3, #6, #10
   11190:	f00d f957 	bl	1e442 <log_0>
   11194:	e7ba      	b.n	1110c <node_identity_set+0x44>
		net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   11196:	2100      	movs	r1, #0
   11198:	a805      	add	r0, sp, #20
   1119a:	f011 fa05 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, idx);
   1119e:	4621      	mov	r1, r4
   111a0:	a805      	add	r0, sp, #20
   111a2:	f011 fa09 	bl	225b8 <net_buf_simple_add_le16>
		    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   111a6:	f7ff fe81 	bl	10eac <bt_mesh_gatt_proxy_get>
		if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   111aa:	2801      	cmp	r0, #1
   111ac:	d105      	bne.n	111ba <node_identity_set+0xf2>
				bt_mesh_proxy_identity_start(sub);
   111ae:	4628      	mov	r0, r5
			if (node_id) {
   111b0:	b136      	cbz	r6, 111c0 <node_identity_set+0xf8>
				bt_mesh_proxy_identity_start(sub);
   111b2:	f003 fe31 	bl	14e18 <bt_mesh_proxy_identity_start>
			bt_mesh_adv_update();
   111b6:	f7fa fa5f 	bl	b678 <bt_mesh_adv_update>
		net_buf_simple_add_u8(&msg, sub->node_id);
   111ba:	f895 1020 	ldrb.w	r1, [r5, #32]
   111be:	e7cf      	b.n	11160 <node_identity_set+0x98>
				bt_mesh_proxy_identity_stop(sub);
   111c0:	f010 fc40 	bl	21a44 <bt_mesh_proxy_identity_stop>
   111c4:	e7f7      	b.n	111b6 <node_identity_set+0xee>
   111c6:	bf00      	nop
   111c8:	000233ec 	.word	0x000233ec
   111cc:	00023494 	.word	0x00023494
   111d0:	00026be2 	.word	0x00026be2
   111d4:	00026c21 	.word	0x00026c21
   111d8:	00026bfd 	.word	0x00026bfd

000111dc <send_gatt_proxy_status>:
{
   111dc:	b530      	push	{r4, r5, lr}
   111de:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   111e0:	ab03      	add	r3, sp, #12
   111e2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   111e6:	4604      	mov	r4, r0
   111e8:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   111ea:	a805      	add	r0, sp, #20
   111ec:	f248 0114 	movw	r1, #32788	; 0x8014
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   111f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   111f4:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   111f6:	f00f fff0 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   111fa:	f7ff fe57 	bl	10eac <bt_mesh_gatt_proxy_get>
   111fe:	4601      	mov	r1, r0
   11200:	a805      	add	r0, sp, #20
   11202:	f011 f9d1 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11206:	2300      	movs	r3, #0
   11208:	9300      	str	r3, [sp, #0]
   1120a:	aa05      	add	r2, sp, #20
   1120c:	4629      	mov	r1, r5
   1120e:	4620      	mov	r0, r4
   11210:	f010 f80c 	bl	2122c <bt_mesh_model_send>
   11214:	b168      	cbz	r0, 11232 <send_gatt_proxy_status+0x56>
		BT_ERR("Unable to send GATT Proxy Status");
   11216:	2301      	movs	r3, #1
   11218:	f04f 0100 	mov.w	r1, #0
   1121c:	f363 0107 	bfi	r1, r3, #0, #8
   11220:	4a05      	ldr	r2, [pc, #20]	; (11238 <send_gatt_proxy_status+0x5c>)
   11222:	4b06      	ldr	r3, [pc, #24]	; (1123c <send_gatt_proxy_status+0x60>)
   11224:	4806      	ldr	r0, [pc, #24]	; (11240 <send_gatt_proxy_status+0x64>)
   11226:	1a9b      	subs	r3, r3, r2
   11228:	08db      	lsrs	r3, r3, #3
   1122a:	f363 118f 	bfi	r1, r3, #6, #10
   1122e:	f00d f908 	bl	1e442 <log_0>
}
   11232:	b009      	add	sp, #36	; 0x24
   11234:	bd30      	pop	{r4, r5, pc}
   11236:	bf00      	nop
   11238:	000233ec 	.word	0x000233ec
   1123c:	00023494 	.word	0x00023494
   11240:	00026ce8 	.word	0x00026ce8

00011244 <gatt_proxy_set>:
{
   11244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11246:	6813      	ldr	r3, [r2, #0]
{
   11248:	460f      	mov	r7, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1124a:	7819      	ldrb	r1, [r3, #0]
   1124c:	2901      	cmp	r1, #1
{
   1124e:	4606      	mov	r6, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11250:	d90f      	bls.n	11272 <gatt_proxy_set+0x2e>
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   11252:	2302      	movs	r3, #2
   11254:	f04f 0200 	mov.w	r2, #0
   11258:	f363 0207 	bfi	r2, r3, #0, #8
   1125c:	4828      	ldr	r0, [pc, #160]	; (11300 <gatt_proxy_set+0xbc>)
   1125e:	4b29      	ldr	r3, [pc, #164]	; (11304 <gatt_proxy_set+0xc0>)
   11260:	1a1b      	subs	r3, r3, r0
   11262:	08db      	lsrs	r3, r3, #3
   11264:	f363 128f 	bfi	r2, r3, #6, #10
   11268:	4827      	ldr	r0, [pc, #156]	; (11308 <gatt_proxy_set+0xc4>)
}
   1126a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   1126e:	f00d b8f5 	b.w	1e45c <log_1>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
   11272:	f7ff fe1b 	bl	10eac <bt_mesh_gatt_proxy_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) ||
   11276:	2802      	cmp	r0, #2
   11278:	d00f      	beq.n	1129a <gatt_proxy_set+0x56>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1127a:	69b4      	ldr	r4, [r6, #24]
	if (!cfg) {
   1127c:	b99c      	cbnz	r4, 112a6 <gatt_proxy_set+0x62>
		BT_WARN("No Configuration Server context available");
   1127e:	2302      	movs	r3, #2
   11280:	f04f 0100 	mov.w	r1, #0
   11284:	f363 0107 	bfi	r1, r3, #0, #8
   11288:	4a1d      	ldr	r2, [pc, #116]	; (11300 <gatt_proxy_set+0xbc>)
   1128a:	4b1e      	ldr	r3, [pc, #120]	; (11304 <gatt_proxy_set+0xc0>)
   1128c:	481f      	ldr	r0, [pc, #124]	; (1130c <gatt_proxy_set+0xc8>)
   1128e:	1a9b      	subs	r3, r3, r2
   11290:	08db      	lsrs	r3, r3, #3
   11292:	f363 118f 	bfi	r1, r3, #6, #10
   11296:	f00d f8d4 	bl	1e442 <log_0>
	send_gatt_proxy_status(model, ctx);
   1129a:	4639      	mov	r1, r7
   1129c:	4630      	mov	r0, r6
}
   1129e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	send_gatt_proxy_status(model, ctx);
   112a2:	f7ff bf9b 	b.w	111dc <send_gatt_proxy_status>
	if (cfg->gatt_proxy == buf->data[0]) {
   112a6:	7a23      	ldrb	r3, [r4, #8]
   112a8:	428b      	cmp	r3, r1
   112aa:	d0f6      	beq.n	1129a <gatt_proxy_set+0x56>
	cfg->gatt_proxy = buf->data[0];
   112ac:	7221      	strb	r1, [r4, #8]
		bt_mesh_store_cfg();
   112ae:	f010 faa2 	bl	217f6 <bt_mesh_store_cfg>
	if (cfg->gatt_proxy == BT_MESH_GATT_PROXY_DISABLED) {
   112b2:	7a23      	ldrb	r3, [r4, #8]
   112b4:	b9ab      	cbnz	r3, 112e2 <gatt_proxy_set+0x9e>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   112b6:	4d16      	ldr	r5, [pc, #88]	; (11310 <gatt_proxy_set+0xcc>)
   112b8:	f8b5 20c0 	ldrh.w	r2, [r5, #192]	; 0xc0
   112bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   112c0:	429a      	cmp	r2, r3
   112c2:	d003      	beq.n	112cc <gatt_proxy_set+0x88>
				bt_mesh_proxy_identity_stop(sub);
   112c4:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
   112c8:	f010 fbbc 	bl	21a44 <bt_mesh_proxy_identity_stop>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   112cc:	f8b5 21a4 	ldrh.w	r2, [r5, #420]	; 0x1a4
   112d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   112d4:	429a      	cmp	r2, r3
   112d6:	d002      	beq.n	112de <gatt_proxy_set+0x9a>
				bt_mesh_proxy_identity_stop(sub);
   112d8:	480e      	ldr	r0, [pc, #56]	; (11314 <gatt_proxy_set+0xd0>)
   112da:	f010 fbb3 	bl	21a44 <bt_mesh_proxy_identity_stop>
		bt_mesh_proxy_gatt_disconnect();
   112de:	f003 fe53 	bl	14f88 <bt_mesh_proxy_gatt_disconnect>
	bt_mesh_adv_update();
   112e2:	f7fa f9c9 	bl	b678 <bt_mesh_adv_update>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   112e6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
   112e8:	f7fa fe58 	bl	bf9c <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_PROXY) && sub) {
   112ec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   112ee:	079b      	lsls	r3, r3, #30
   112f0:	d5d3      	bpl.n	1129a <gatt_proxy_set+0x56>
   112f2:	2800      	cmp	r0, #0
   112f4:	d0d1      	beq.n	1129a <gatt_proxy_set+0x56>
		hb_send(model);
   112f6:	4630      	mov	r0, r6
   112f8:	f010 f8e7 	bl	214ca <hb_send>
   112fc:	e7cd      	b.n	1129a <gatt_proxy_set+0x56>
   112fe:	bf00      	nop
   11300:	000233ec 	.word	0x000233ec
   11304:	00023494 	.word	0x00023494
   11308:	0002688b 	.word	0x0002688b
   1130c:	00026b91 	.word	0x00026b91
   11310:	20007924 	.word	0x20007924
   11314:	20007aac 	.word	0x20007aac

00011318 <bt_mesh_default_ttl_get>:

u8_t bt_mesh_default_ttl_get(void)
{
	if (conf) {
   11318:	4b03      	ldr	r3, [pc, #12]	; (11328 <bt_mesh_default_ttl_get+0x10>)
   1131a:	681b      	ldr	r3, [r3, #0]
   1131c:	b10b      	cbz	r3, 11322 <bt_mesh_default_ttl_get+0xa>
		return conf->default_ttl;
   1131e:	7a98      	ldrb	r0, [r3, #10]
   11320:	4770      	bx	lr
	}

	return DEFAULT_TTL;
   11322:	2007      	movs	r0, #7
}
   11324:	4770      	bx	lr
   11326:	bf00      	nop
   11328:	20000ac8 	.word	0x20000ac8

0001132c <default_ttl_set>:
{
   1132c:	b530      	push	{r4, r5, lr}
   1132e:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11330:	ab03      	add	r3, sp, #12
{
   11332:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11334:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   11338:	9305      	str	r3, [sp, #20]
   1133a:	e9cd 1306 	strd	r1, r3, [sp, #24]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1133e:	6983      	ldr	r3, [r0, #24]
{
   11340:	4604      	mov	r4, r0
	if (!cfg) {
   11342:	bb7b      	cbnz	r3, 113a4 <default_ttl_set+0x78>
		BT_WARN("No Configuration Server context available");
   11344:	2302      	movs	r3, #2
   11346:	f04f 0100 	mov.w	r1, #0
   1134a:	f363 0107 	bfi	r1, r3, #0, #8
   1134e:	4a24      	ldr	r2, [pc, #144]	; (113e0 <default_ttl_set+0xb4>)
   11350:	4b24      	ldr	r3, [pc, #144]	; (113e4 <default_ttl_set+0xb8>)
   11352:	4825      	ldr	r0, [pc, #148]	; (113e8 <default_ttl_set+0xbc>)
   11354:	1a9b      	subs	r3, r3, r2
   11356:	08db      	lsrs	r3, r3, #3
   11358:	f363 118f 	bfi	r1, r3, #6, #10
   1135c:	f00d f871 	bl	1e442 <log_0>
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   11360:	f248 010e 	movw	r1, #32782	; 0x800e
   11364:	a805      	add	r0, sp, #20
   11366:	f00f ff38 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   1136a:	f7ff ffd5 	bl	11318 <bt_mesh_default_ttl_get>
   1136e:	4601      	mov	r1, r0
   11370:	a805      	add	r0, sp, #20
   11372:	f011 f919 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11376:	2300      	movs	r3, #0
   11378:	9300      	str	r3, [sp, #0]
   1137a:	aa05      	add	r2, sp, #20
   1137c:	4629      	mov	r1, r5
   1137e:	4620      	mov	r0, r4
   11380:	f00f ff54 	bl	2122c <bt_mesh_model_send>
   11384:	b348      	cbz	r0, 113da <default_ttl_set+0xae>
		BT_ERR("Unable to send Default TTL Status response");
   11386:	2301      	movs	r3, #1
   11388:	f04f 0100 	mov.w	r1, #0
   1138c:	f363 0107 	bfi	r1, r3, #0, #8
   11390:	4a13      	ldr	r2, [pc, #76]	; (113e0 <default_ttl_set+0xb4>)
   11392:	4b14      	ldr	r3, [pc, #80]	; (113e4 <default_ttl_set+0xb8>)
   11394:	4815      	ldr	r0, [pc, #84]	; (113ec <default_ttl_set+0xc0>)
   11396:	1a9b      	subs	r3, r3, r2
   11398:	08db      	lsrs	r3, r3, #3
   1139a:	f363 118f 	bfi	r1, r3, #6, #10
   1139e:	f00d f850 	bl	1e442 <log_0>
   113a2:	e01a      	b.n	113da <default_ttl_set+0xae>
	} else if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
   113a4:	6812      	ldr	r2, [r2, #0]
   113a6:	7811      	ldrb	r1, [r2, #0]
   113a8:	060a      	lsls	r2, r1, #24
   113aa:	d408      	bmi.n	113be <default_ttl_set+0x92>
   113ac:	2901      	cmp	r1, #1
   113ae:	d006      	beq.n	113be <default_ttl_set+0x92>
		if (cfg->default_ttl != buf->data[0]) {
   113b0:	7a9a      	ldrb	r2, [r3, #10]
   113b2:	428a      	cmp	r2, r1
   113b4:	d0d4      	beq.n	11360 <default_ttl_set+0x34>
			cfg->default_ttl = buf->data[0];
   113b6:	7299      	strb	r1, [r3, #10]
				bt_mesh_store_cfg();
   113b8:	f010 fa1d 	bl	217f6 <bt_mesh_store_cfg>
   113bc:	e7d0      	b.n	11360 <default_ttl_set+0x34>
		BT_WARN("Prohibited Default TTL value 0x%02x", buf->data[0]);
   113be:	2302      	movs	r3, #2
   113c0:	f04f 0200 	mov.w	r2, #0
   113c4:	f363 0207 	bfi	r2, r3, #0, #8
   113c8:	4805      	ldr	r0, [pc, #20]	; (113e0 <default_ttl_set+0xb4>)
   113ca:	4b06      	ldr	r3, [pc, #24]	; (113e4 <default_ttl_set+0xb8>)
   113cc:	1a1b      	subs	r3, r3, r0
   113ce:	08db      	lsrs	r3, r3, #3
   113d0:	f363 128f 	bfi	r2, r3, #6, #10
   113d4:	4806      	ldr	r0, [pc, #24]	; (113f0 <default_ttl_set+0xc4>)
   113d6:	f00d f841 	bl	1e45c <log_1>
}
   113da:	b009      	add	sp, #36	; 0x24
   113dc:	bd30      	pop	{r4, r5, pc}
   113de:	bf00      	nop
   113e0:	000233ec 	.word	0x000233ec
   113e4:	00023494 	.word	0x00023494
   113e8:	00026b91 	.word	0x00026b91
   113ec:	000267b2 	.word	0x000267b2
   113f0:	0002678e 	.word	0x0002678e

000113f4 <default_ttl_get>:
{
   113f4:	b530      	push	{r4, r5, lr}
   113f6:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   113f8:	ab03      	add	r3, sp, #12
   113fa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   113fe:	4604      	mov	r4, r0
   11400:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   11402:	a805      	add	r0, sp, #20
   11404:	f248 010e 	movw	r1, #32782	; 0x800e
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11408:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1140c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1140e:	f00f fee4 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   11412:	f7ff ff81 	bl	11318 <bt_mesh_default_ttl_get>
   11416:	4601      	mov	r1, r0
   11418:	a805      	add	r0, sp, #20
   1141a:	f011 f8c5 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1141e:	2300      	movs	r3, #0
   11420:	9300      	str	r3, [sp, #0]
   11422:	aa05      	add	r2, sp, #20
   11424:	4629      	mov	r1, r5
   11426:	4620      	mov	r0, r4
   11428:	f00f ff00 	bl	2122c <bt_mesh_model_send>
   1142c:	b168      	cbz	r0, 1144a <default_ttl_get+0x56>
		BT_ERR("Unable to send Default TTL Status response");
   1142e:	2301      	movs	r3, #1
   11430:	f04f 0100 	mov.w	r1, #0
   11434:	f363 0107 	bfi	r1, r3, #0, #8
   11438:	4a05      	ldr	r2, [pc, #20]	; (11450 <default_ttl_get+0x5c>)
   1143a:	4b06      	ldr	r3, [pc, #24]	; (11454 <default_ttl_get+0x60>)
   1143c:	4806      	ldr	r0, [pc, #24]	; (11458 <default_ttl_get+0x64>)
   1143e:	1a9b      	subs	r3, r3, r2
   11440:	08db      	lsrs	r3, r3, #3
   11442:	f363 118f 	bfi	r1, r3, #6, #10
   11446:	f00c fffc 	bl	1e442 <log_0>
}
   1144a:	b009      	add	sp, #36	; 0x24
   1144c:	bd30      	pop	{r4, r5, pc}
   1144e:	bf00      	nop
   11450:	000233ec 	.word	0x000233ec
   11454:	00023494 	.word	0x00023494
   11458:	000267b2 	.word	0x000267b2

0001145c <bt_mesh_label_uuid_get>:

u8_t *bt_mesh_label_uuid_get(u16_t addr)
{
   1145c:	b508      	push	{r3, lr}
	int i;

	BT_DBG("addr 0x%04x", addr);

	for (i = 0; i < ARRAY_SIZE(labels); i++) {
		if (labels[i].addr == addr) {
   1145e:	4b13      	ldr	r3, [pc, #76]	; (114ac <bt_mesh_label_uuid_get+0x50>)
   11460:	885a      	ldrh	r2, [r3, #2]
   11462:	4282      	cmp	r2, r0
{
   11464:	4601      	mov	r1, r0
   11466:	461a      	mov	r2, r3
		if (labels[i].addr == addr) {
   11468:	d015      	beq.n	11496 <bt_mesh_label_uuid_get+0x3a>
   1146a:	8ad8      	ldrh	r0, [r3, #22]
   1146c:	4288      	cmp	r0, r1
   1146e:	d018      	beq.n	114a2 <bt_mesh_label_uuid_get+0x46>
   11470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   11472:	428b      	cmp	r3, r1
   11474:	d017      	beq.n	114a6 <bt_mesh_label_uuid_get+0x4a>
			       bt_hex(labels[i].uuid, 16));
			return labels[i].uuid;
		}
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);
   11476:	2302      	movs	r3, #2
   11478:	f04f 0200 	mov.w	r2, #0
   1147c:	f363 0207 	bfi	r2, r3, #0, #8
   11480:	480b      	ldr	r0, [pc, #44]	; (114b0 <bt_mesh_label_uuid_get+0x54>)
   11482:	4b0c      	ldr	r3, [pc, #48]	; (114b4 <bt_mesh_label_uuid_get+0x58>)
   11484:	1a1b      	subs	r3, r3, r0
   11486:	08db      	lsrs	r3, r3, #3
   11488:	480b      	ldr	r0, [pc, #44]	; (114b8 <bt_mesh_label_uuid_get+0x5c>)
   1148a:	f363 128f 	bfi	r2, r3, #6, #10
   1148e:	f00c ffe5 	bl	1e45c <log_1>

	return NULL;
   11492:	2000      	movs	r0, #0
}
   11494:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   11496:	2000      	movs	r0, #0
			return labels[i].uuid;
   11498:	2314      	movs	r3, #20
   1149a:	fb03 2000 	mla	r0, r3, r0, r2
   1149e:	3004      	adds	r0, #4
   114a0:	e7f8      	b.n	11494 <bt_mesh_label_uuid_get+0x38>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   114a2:	2001      	movs	r0, #1
   114a4:	e7f8      	b.n	11498 <bt_mesh_label_uuid_get+0x3c>
   114a6:	2002      	movs	r0, #2
   114a8:	e7f6      	b.n	11498 <bt_mesh_label_uuid_get+0x3c>
   114aa:	bf00      	nop
   114ac:	20001cfc 	.word	0x20001cfc
   114b0:	000233ec 	.word	0x000233ec
   114b4:	00023494 	.word	0x00023494
   114b8:	0002676c 	.word	0x0002676c

000114bc <mod_sub_list_clear>:
{
   114bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Label UUID not found");
   114c0:	4b27      	ldr	r3, [pc, #156]	; (11560 <mod_sub_list_clear+0xa4>)
   114c2:	4c28      	ldr	r4, [pc, #160]	; (11564 <mod_sub_list_clear+0xa8>)
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   114c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 11570 <mod_sub_list_clear+0xb4>
			BT_ERR("Label UUID not found");
   114c8:	1ae4      	subs	r4, r4, r3
   114ca:	f100 0510 	add.w	r5, r0, #16
   114ce:	f100 0314 	add.w	r3, r0, #20
   114d2:	f1a8 0704 	sub.w	r7, r8, #4
   114d6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   114da:	9301      	str	r3, [sp, #4]
   114dc:	46a9      	mov	r9, r5
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   114de:	f107 0a18 	add.w	sl, r7, #24
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   114e2:	f835 0b02 	ldrh.w	r0, [r5], #2
   114e6:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   114ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   114ee:	d20f      	bcs.n	11510 <mod_sub_list_clear+0x54>
		label_uuid = bt_mesh_label_uuid_get(mod->groups[i]);
   114f0:	f7ff ffb4 	bl	1145c <bt_mesh_label_uuid_get>
		if (!label_uuid) {
   114f4:	4606      	mov	r6, r0
   114f6:	b9b0      	cbnz	r0, 11526 <mod_sub_list_clear+0x6a>
			BT_ERR("Label UUID not found");
   114f8:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   114fc:	f043 0301 	orr.w	r3, r3, #1
   11500:	f363 0b07 	bfi	fp, r3, #0, #8
   11504:	f364 1b8f 	bfi	fp, r4, #6, #10
   11508:	4659      	mov	r1, fp
   1150a:	4817      	ldr	r0, [pc, #92]	; (11568 <mod_sub_list_clear+0xac>)
   1150c:	f00c ff99 	bl	1e442 <log_0>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   11510:	9b01      	ldr	r3, [sp, #4]
   11512:	42ab      	cmp	r3, r5
   11514:	d1e5      	bne.n	114e2 <mod_sub_list_clear+0x26>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   11516:	2204      	movs	r2, #4
   11518:	2100      	movs	r1, #0
   1151a:	4648      	mov	r0, r9
}
   1151c:	b003      	add	sp, #12
   1151e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   11522:	f00e b89b 	b.w	1f65c <memset>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   11526:	4601      	mov	r1, r0
   11528:	2210      	movs	r2, #16
   1152a:	4640      	mov	r0, r8
   1152c:	f00e f845 	bl	1f5ba <memcmp>
   11530:	b168      	cbz	r0, 1154e <mod_sub_list_clear+0x92>
   11532:	2210      	movs	r2, #16
   11534:	4631      	mov	r1, r6
   11536:	4650      	mov	r0, sl
   11538:	f00e f83f 	bl	1f5ba <memcmp>
   1153c:	b168      	cbz	r0, 1155a <mod_sub_list_clear+0x9e>
   1153e:	2210      	movs	r2, #16
   11540:	4631      	mov	r1, r6
   11542:	480a      	ldr	r0, [pc, #40]	; (1156c <mod_sub_list_clear+0xb0>)
   11544:	f00e f839 	bl	1f5ba <memcmp>
   11548:	2800      	cmp	r0, #0
   1154a:	d1e1      	bne.n	11510 <mod_sub_list_clear+0x54>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   1154c:	2002      	movs	r0, #2
			labels[i].ref--;
   1154e:	2314      	movs	r3, #20
   11550:	4358      	muls	r0, r3
   11552:	5a3b      	ldrh	r3, [r7, r0]
   11554:	3b01      	subs	r3, #1
   11556:	523b      	strh	r3, [r7, r0]
			return STATUS_SUCCESS;
   11558:	e7da      	b.n	11510 <mod_sub_list_clear+0x54>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   1155a:	2001      	movs	r0, #1
   1155c:	e7f7      	b.n	1154e <mod_sub_list_clear+0x92>
   1155e:	bf00      	nop
   11560:	000233ec 	.word	0x000233ec
   11564:	00023494 	.word	0x00023494
   11568:	00026b33 	.word	0x00026b33
   1156c:	20001d28 	.word	0x20001d28
   11570:	20001d00 	.word	0x20001d00

00011574 <mod_sub_va_overwrite>:
{
   11574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11578:	b086      	sub	sp, #24
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1157a:	2300      	movs	r3, #0
{
   1157c:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1157e:	4610      	mov	r0, r2
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   11580:	f8ad 3016 	strh.w	r3, [sp, #22]
{
   11584:	460f      	mov	r7, r1
   11586:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   11588:	f011 f884 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1158c:	b203      	sxth	r3, r0
   1158e:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   11590:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11592:	dc10      	bgt.n	115b6 <mod_sub_va_overwrite+0x42>
		BT_WARN("Prohibited element address");
   11594:	2302      	movs	r3, #2
   11596:	f04f 0100 	mov.w	r1, #0
   1159a:	f363 0107 	bfi	r1, r3, #0, #8
   1159e:	4a23      	ldr	r2, [pc, #140]	; (1162c <mod_sub_va_overwrite+0xb8>)
   115a0:	4b23      	ldr	r3, [pc, #140]	; (11630 <mod_sub_va_overwrite+0xbc>)
   115a2:	4824      	ldr	r0, [pc, #144]	; (11634 <mod_sub_va_overwrite+0xc0>)
   115a4:	1a9b      	subs	r3, r3, r2
   115a6:	08db      	lsrs	r3, r3, #3
   115a8:	f363 118f 	bfi	r1, r3, #6, #10
   115ac:	f00c ff49 	bl	1e442 <log_0>
}
   115b0:	b006      	add	sp, #24
   115b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   115b6:	2110      	movs	r1, #16
   115b8:	4620      	mov	r0, r4
   115ba:	f011 f85b 	bl	22674 <net_buf_simple_pull_mem>
   115be:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   115c0:	4628      	mov	r0, r5
	mod_id = buf->data;
   115c2:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   115c6:	f7fd f8b7 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
   115ca:	b9a0      	cbnz	r0, 115f6 <mod_sub_va_overwrite+0x82>
		vnd = (buf->len == 4);
   115cc:	88a3      	ldrh	r3, [r4, #4]
   115ce:	1f1a      	subs	r2, r3, #4
   115d0:	4253      	negs	r3, r2
   115d2:	4153      	adcs	r3, r2
   115d4:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   115d8:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   115da:	f89d 3015 	ldrb.w	r3, [sp, #21]
   115de:	e9cd 8301 	strd	r8, r3, [sp, #4]
   115e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   115e6:	9300      	str	r3, [sp, #0]
   115e8:	4622      	mov	r2, r4
   115ea:	462b      	mov	r3, r5
   115ec:	4639      	mov	r1, r7
   115ee:	4630      	mov	r0, r6
   115f0:	f7fd fd36 	bl	f060 <send_mod_sub_status>
   115f4:	e7dc      	b.n	115b0 <mod_sub_va_overwrite+0x3c>
	mod = get_model(elem, buf, &vnd);
   115f6:	f10d 0215 	add.w	r2, sp, #21
   115fa:	4621      	mov	r1, r4
   115fc:	f00f fee6 	bl	213cc <get_model>
	if (!mod) {
   11600:	4681      	mov	r9, r0
   11602:	b188      	cbz	r0, 11628 <mod_sub_va_overwrite+0xb4>
	mod_sub_list_clear(mod);
   11604:	f7ff ff5a 	bl	114bc <mod_sub_list_clear>
		status = va_add(label_uuid, &sub_addr);
   11608:	f10d 0116 	add.w	r1, sp, #22
   1160c:	4650      	mov	r0, sl
   1160e:	f7fd fea3 	bl	f358 <va_add>
		if (status == STATUS_SUCCESS) {
   11612:	4604      	mov	r4, r0
   11614:	2800      	cmp	r0, #0
   11616:	d1e0      	bne.n	115da <mod_sub_va_overwrite+0x66>
			mod->groups[0] = sub_addr;
   11618:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1161c:	f8a9 3010 	strh.w	r3, [r9, #16]
				bt_mesh_store_mod_sub(mod);
   11620:	4648      	mov	r0, r9
   11622:	f010 f947 	bl	218b4 <bt_mesh_store_mod_sub>
   11626:	e7d8      	b.n	115da <mod_sub_va_overwrite+0x66>
		status = STATUS_INVALID_MODEL;
   11628:	2402      	movs	r4, #2
   1162a:	e7d6      	b.n	115da <mod_sub_va_overwrite+0x66>
   1162c:	000233ec 	.word	0x000233ec
   11630:	00023494 	.word	0x00023494
   11634:	00026ac3 	.word	0x00026ac3

00011638 <mod_sub_overwrite>:
{
   11638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1163c:	4607      	mov	r7, r0
   1163e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   11640:	4610      	mov	r0, r2
{
   11642:	4688      	mov	r8, r1
   11644:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   11646:	f011 f825 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1164a:	b203      	sxth	r3, r0
   1164c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1164e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   11650:	dc10      	bgt.n	11674 <mod_sub_overwrite+0x3c>
		BT_WARN("Prohibited element address");
   11652:	2302      	movs	r3, #2
   11654:	f04f 0100 	mov.w	r1, #0
   11658:	f363 0107 	bfi	r1, r3, #0, #8
   1165c:	4a1f      	ldr	r2, [pc, #124]	; (116dc <mod_sub_overwrite+0xa4>)
   1165e:	4b20      	ldr	r3, [pc, #128]	; (116e0 <mod_sub_overwrite+0xa8>)
   11660:	4820      	ldr	r0, [pc, #128]	; (116e4 <mod_sub_overwrite+0xac>)
   11662:	1a9b      	subs	r3, r3, r2
   11664:	08db      	lsrs	r3, r3, #3
   11666:	f363 118f 	bfi	r1, r3, #6, #10
   1166a:	f00c feea 	bl	1e442 <log_0>
}
   1166e:	b007      	add	sp, #28
   11670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   11674:	4620      	mov	r0, r4
   11676:	f011 f80d 	bl	22694 <net_buf_simple_pull_le16>
   1167a:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1167c:	4628      	mov	r0, r5
	mod_id = buf->data;
   1167e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   11682:	f7fd f859 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
   11686:	b938      	cbnz	r0, 11698 <mod_sub_overwrite+0x60>
		vnd = (buf->len == 4);
   11688:	88a3      	ldrh	r3, [r4, #4]
   1168a:	1f1a      	subs	r2, r3, #4
   1168c:	4253      	negs	r3, r2
   1168e:	4153      	adcs	r3, r2
   11690:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   11694:	2201      	movs	r2, #1
   11696:	e013      	b.n	116c0 <mod_sub_overwrite+0x88>
	mod = get_model(elem, buf, &vnd);
   11698:	4621      	mov	r1, r4
   1169a:	f10d 0217 	add.w	r2, sp, #23
   1169e:	f00f fe95 	bl	213cc <get_model>
	if (!mod) {
   116a2:	4604      	mov	r4, r0
   116a4:	b1b8      	cbz	r0, 116d6 <mod_sub_overwrite+0x9e>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   116a6:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   116aa:	b29b      	uxth	r3, r3
   116ac:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   116b0:	d8f0      	bhi.n	11694 <mod_sub_overwrite+0x5c>
	mod_sub_list_clear(mod);
   116b2:	f7ff ff03 	bl	114bc <mod_sub_list_clear>
		mod->groups[0] = sub_addr;
   116b6:	8226      	strh	r6, [r4, #16]
			bt_mesh_store_mod_sub(mod);
   116b8:	4620      	mov	r0, r4
   116ba:	f010 f8fb 	bl	218b4 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   116be:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   116c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   116c4:	9600      	str	r6, [sp, #0]
   116c6:	e9cd 9301 	strd	r9, r3, [sp, #4]
   116ca:	4641      	mov	r1, r8
   116cc:	462b      	mov	r3, r5
   116ce:	4638      	mov	r0, r7
   116d0:	f7fd fcc6 	bl	f060 <send_mod_sub_status>
   116d4:	e7cb      	b.n	1166e <mod_sub_overwrite+0x36>
		status = STATUS_INVALID_MODEL;
   116d6:	2202      	movs	r2, #2
   116d8:	e7f2      	b.n	116c0 <mod_sub_overwrite+0x88>
   116da:	bf00      	nop
   116dc:	000233ec 	.word	0x000233ec
   116e0:	00023494 	.word	0x00023494
   116e4:	00026ac3 	.word	0x00026ac3

000116e8 <bt_mesh_hb_pub_get>:

struct bt_mesh_hb_pub *bt_mesh_hb_pub_get(void)
{
	if (!conf) {
   116e8:	4b02      	ldr	r3, [pc, #8]	; (116f4 <bt_mesh_hb_pub_get+0xc>)
   116ea:	6818      	ldr	r0, [r3, #0]
   116ec:	b100      	cbz	r0, 116f0 <bt_mesh_hb_pub_get+0x8>
		return NULL;
	}

	return &conf->hb_pub;
   116ee:	300c      	adds	r0, #12
}
   116f0:	4770      	bx	lr
   116f2:	bf00      	nop
   116f4:	20000ac8 	.word	0x20000ac8

000116f8 <bt_mesh_cfg_get>:
}

struct bt_mesh_cfg_srv *bt_mesh_cfg_get(void)
{
	return conf;
}
   116f8:	4b01      	ldr	r3, [pc, #4]	; (11700 <bt_mesh_cfg_get+0x8>)
   116fa:	6818      	ldr	r0, [r3, #0]
   116fc:	4770      	bx	lr
   116fe:	bf00      	nop
   11700:	20000ac8 	.word	0x20000ac8

00011704 <bt_mesh_subnet_del>:
{
	int i;

	BT_DBG("NetIdx 0x%03x store %u", sub->net_idx, store);

	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
   11704:	4b19      	ldr	r3, [pc, #100]	; (1176c <bt_mesh_subnet_del+0x68>)
{
   11706:	b570      	push	{r4, r5, r6, lr}
   11708:	4604      	mov	r4, r0
	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
   1170a:	6818      	ldr	r0, [r3, #0]
{
   1170c:	460e      	mov	r6, r1
	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
   1170e:	b160      	cbz	r0, 1172a <bt_mesh_subnet_del+0x26>
   11710:	8e82      	ldrh	r2, [r0, #52]	; 0x34
   11712:	8ba3      	ldrh	r3, [r4, #28]
   11714:	429a      	cmp	r2, r3
   11716:	d108      	bne.n	1172a <bt_mesh_subnet_del+0x26>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
   11718:	2300      	movs	r3, #0
   1171a:	62c3      	str	r3, [r0, #44]	; 0x2c
	cfg->hb_pub.period = 0;
   1171c:	8603      	strh	r3, [r0, #48]	; 0x30
	k_delayed_work_cancel(&cfg->hb_pub.timer);
   1171e:	300c      	adds	r0, #12
   11720:	f011 fc3b 	bl	22f9a <k_delayed_work_cancel>
		hb_pub_disable(conf);

		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   11724:	b10e      	cbz	r6, 1172a <bt_mesh_subnet_del+0x26>
			bt_mesh_store_hb_pub();
   11726:	f010 f863 	bl	217f0 <bt_mesh_store_hb_pub>

	/* Delete any app keys bound to this NetKey index */
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx == sub->net_idx) {
   1172a:	4d11      	ldr	r5, [pc, #68]	; (11770 <bt_mesh_subnet_del+0x6c>)
   1172c:	8ba3      	ldrh	r3, [r4, #28]
   1172e:	f8b5 2054 	ldrh.w	r2, [r5, #84]	; 0x54
   11732:	429a      	cmp	r2, r3
   11734:	d104      	bne.n	11740 <bt_mesh_subnet_del+0x3c>
			bt_mesh_app_key_del(key, store);
   11736:	4631      	mov	r1, r6
   11738:	f105 0054 	add.w	r0, r5, #84	; 0x54
   1173c:	f7ff f906 	bl	1094c <bt_mesh_app_key_del>
		if (key->net_idx == sub->net_idx) {
   11740:	f8b5 207c 	ldrh.w	r2, [r5, #124]	; 0x7c
   11744:	8ba3      	ldrh	r3, [r4, #28]
   11746:	429a      	cmp	r2, r3
   11748:	d103      	bne.n	11752 <bt_mesh_subnet_del+0x4e>
			bt_mesh_app_key_del(key, store);
   1174a:	4631      	mov	r1, r6
   1174c:	4809      	ldr	r0, [pc, #36]	; (11774 <bt_mesh_subnet_del+0x70>)
   1174e:	f7ff f8fd 	bl	1094c <bt_mesh_app_key_del>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(sub->net_idx);
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   11752:	b116      	cbz	r6, 1175a <bt_mesh_subnet_del+0x56>
		bt_mesh_clear_subnet(sub);
   11754:	4620      	mov	r0, r4
   11756:	f010 f85d 	bl	21814 <bt_mesh_clear_subnet>
	}

	(void)memset(sub, 0, sizeof(*sub));
   1175a:	22e4      	movs	r2, #228	; 0xe4
   1175c:	2100      	movs	r1, #0
   1175e:	4620      	mov	r0, r4
   11760:	f00d ff7c 	bl	1f65c <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   11764:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11768:	83a3      	strh	r3, [r4, #28]
}
   1176a:	bd70      	pop	{r4, r5, r6, pc}
   1176c:	20000ac8 	.word	0x20000ac8
   11770:	20007924 	.word	0x20007924
   11774:	200079a0 	.word	0x200079a0

00011778 <net_key_del>:
{
   11778:	b570      	push	{r4, r5, r6, lr}
   1177a:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   1177c:	4610      	mov	r0, r2
{
   1177e:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   11780:	f010 ff88 	bl	22694 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   11784:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   11788:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   1178a:	d310      	bcc.n	117ae <net_key_del+0x36>
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   1178c:	2301      	movs	r3, #1
   1178e:	f04f 0200 	mov.w	r2, #0
   11792:	f363 0207 	bfi	r2, r3, #0, #8
   11796:	4910      	ldr	r1, [pc, #64]	; (117d8 <net_key_del+0x60>)
   11798:	4b10      	ldr	r3, [pc, #64]	; (117dc <net_key_del+0x64>)
   1179a:	1a5b      	subs	r3, r3, r1
   1179c:	08db      	lsrs	r3, r3, #3
   1179e:	4601      	mov	r1, r0
   117a0:	f363 128f 	bfi	r2, r3, #6, #10
   117a4:	480e      	ldr	r0, [pc, #56]	; (117e0 <net_key_del+0x68>)
}
   117a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   117aa:	f00c be57 	b.w	1e45c <log_1>
	sub = bt_mesh_subnet_get(del_idx);
   117ae:	f7fa fbf5 	bl	bf9c <bt_mesh_subnet_get>
	if (!sub) {
   117b2:	4603      	mov	r3, r0
   117b4:	b130      	cbz	r0, 117c4 <net_key_del+0x4c>
	if (ctx->net_idx == del_idx) {
   117b6:	882b      	ldrh	r3, [r5, #0]
   117b8:	42a3      	cmp	r3, r4
   117ba:	d00a      	beq.n	117d2 <net_key_del+0x5a>
	bt_mesh_subnet_del(sub, true);
   117bc:	2101      	movs	r1, #1
   117be:	f7ff ffa1 	bl	11704 <bt_mesh_subnet_del>
	status = STATUS_SUCCESS;
   117c2:	2300      	movs	r3, #0
	send_net_key_status(model, ctx, del_idx, status);
   117c4:	4622      	mov	r2, r4
   117c6:	4629      	mov	r1, r5
   117c8:	4630      	mov	r0, r6
}
   117ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_net_key_status(model, ctx, del_idx, status);
   117ce:	f7fd bf53 	b.w	f678 <send_net_key_status>
		status = STATUS_CANNOT_REMOVE;
   117d2:	230c      	movs	r3, #12
   117d4:	e7f6      	b.n	117c4 <net_key_del+0x4c>
   117d6:	bf00      	nop
   117d8:	000233ec 	.word	0x000233ec
   117dc:	00023494 	.word	0x00023494
   117e0:	00026be2 	.word	0x00026be2

000117e4 <bt_mesh_cfg_reset>:
	struct bt_mesh_cfg_srv *cfg = conf;
   117e4:	4b17      	ldr	r3, [pc, #92]	; (11844 <bt_mesh_cfg_reset+0x60>)
{
   117e6:	b510      	push	{r4, lr}
	struct bt_mesh_cfg_srv *cfg = conf;
   117e8:	681c      	ldr	r4, [r3, #0]
	if (!cfg) {
   117ea:	b34c      	cbz	r4, 11840 <bt_mesh_cfg_reset+0x5c>
	bt_mesh_set_hb_sub_dst(BT_MESH_ADDR_UNASSIGNED);
   117ec:	2000      	movs	r0, #0
   117ee:	f7fb ffd5 	bl	d79c <bt_mesh_set_hb_sub_dst>
	cfg->hb_sub.expiry = 0;
   117f2:	2200      	movs	r2, #0
   117f4:	2300      	movs	r3, #0
   117f6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
   117fa:	2300      	movs	r3, #0
   117fc:	6423      	str	r3, [r4, #64]	; 0x40
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   117fe:	4c12      	ldr	r4, [pc, #72]	; (11848 <bt_mesh_cfg_reset+0x64>)
   11800:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   11804:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11808:	429a      	cmp	r2, r3
   1180a:	d004      	beq.n	11816 <bt_mesh_cfg_reset+0x32>
			bt_mesh_subnet_del(sub, true);
   1180c:	2101      	movs	r1, #1
   1180e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   11812:	f7ff ff77 	bl	11704 <bt_mesh_subnet_del>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   11816:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   1181a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1181e:	429a      	cmp	r2, r3
   11820:	d003      	beq.n	1182a <bt_mesh_cfg_reset+0x46>
			bt_mesh_subnet_del(sub, true);
   11822:	2101      	movs	r1, #1
   11824:	4809      	ldr	r0, [pc, #36]	; (1184c <bt_mesh_cfg_reset+0x68>)
   11826:	f7ff ff6d 	bl	11704 <bt_mesh_subnet_del>
	bt_mesh_model_foreach(mod_reset, NULL);
   1182a:	2100      	movs	r1, #0
   1182c:	4808      	ldr	r0, [pc, #32]	; (11850 <bt_mesh_cfg_reset+0x6c>)
   1182e:	f7fc fe53 	bl	e4d8 <bt_mesh_model_foreach>
	(void)memset(labels, 0, sizeof(labels));
   11832:	223c      	movs	r2, #60	; 0x3c
   11834:	2100      	movs	r1, #0
   11836:	4807      	ldr	r0, [pc, #28]	; (11854 <bt_mesh_cfg_reset+0x70>)
}
   11838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(labels, 0, sizeof(labels));
   1183c:	f00d bf0e 	b.w	1f65c <memset>
}
   11840:	bd10      	pop	{r4, pc}
   11842:	bf00      	nop
   11844:	20000ac8 	.word	0x20000ac8
   11848:	20007924 	.word	0x20007924
   1184c:	20007aac 	.word	0x20007aac
   11850:	000215d9 	.word	0x000215d9
   11854:	20001cfc 	.word	0x20001cfc

00011858 <health_period_set_unrel>:
}

static void health_period_set_unrel(struct bt_mesh_model *model,
				    struct bt_mesh_msg_ctx *ctx,
				    struct net_buf_simple *buf)
{
   11858:	b510      	push	{r4, lr}
   1185a:	4604      	mov	r4, r0
	u8_t period;

	period = net_buf_simple_pull_u8(buf);
   1185c:	4610      	mov	r0, r2
   1185e:	f010 ff11 	bl	22684 <net_buf_simple_pull_u8>
	if (period > 15) {
   11862:	280f      	cmp	r0, #15
	period = net_buf_simple_pull_u8(buf);
   11864:	4601      	mov	r1, r0
	if (period > 15) {
   11866:	d90f      	bls.n	11888 <health_period_set_unrel+0x30>
		BT_WARN("Prohibited period value %u", period);
   11868:	2302      	movs	r3, #2
   1186a:	f04f 0200 	mov.w	r2, #0
   1186e:	f363 0207 	bfi	r2, r3, #0, #8
   11872:	4808      	ldr	r0, [pc, #32]	; (11894 <health_period_set_unrel+0x3c>)
   11874:	4b08      	ldr	r3, [pc, #32]	; (11898 <health_period_set_unrel+0x40>)
   11876:	1a1b      	subs	r3, r3, r0
   11878:	08db      	lsrs	r3, r3, #3
   1187a:	f363 128f 	bfi	r2, r3, #6, #10
   1187e:	4807      	ldr	r0, [pc, #28]	; (1189c <health_period_set_unrel+0x44>)
	}

	BT_DBG("period %u", period);

	model->pub->period_div = period;
}
   11880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Prohibited period value %u", period);
   11884:	f00c bdea 	b.w	1e45c <log_1>
	model->pub->period_div = period;
   11888:	68a3      	ldr	r3, [r4, #8]
   1188a:	7ada      	ldrb	r2, [r3, #11]
   1188c:	f360 0203 	bfi	r2, r0, #0, #4
   11890:	72da      	strb	r2, [r3, #11]
}
   11892:	bd10      	pop	{r4, pc}
   11894:	000233ec 	.word	0x000233ec
   11898:	000234a4 	.word	0x000234a4
   1189c:	00026ea6 	.word	0x00026ea6

000118a0 <health_get_registered>:
{
   118a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   118a4:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   118a6:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
   118aa:	460f      	mov	r7, r1
   118ac:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   118ae:	2105      	movs	r1, #5
   118b0:	4610      	mov	r0, r2
   118b2:	f00f fc92 	bl	211da <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   118b6:	2101      	movs	r1, #1
   118b8:	4620      	mov	r0, r4
   118ba:	f010 fe66 	bl	2258a <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   118be:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   118c0:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   118c2:	4620      	mov	r0, r4
   118c4:	f010 fe78 	bl	225b8 <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   118c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   118cc:	b383      	cbz	r3, 11930 <health_get_registered+0x90>
   118ce:	685b      	ldr	r3, [r3, #4]
   118d0:	b373      	cbz	r3, 11930 <health_get_registered+0x90>
		u8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   118d2:	4620      	mov	r0, r4
   118d4:	f010 fefe 	bl	226d4 <net_buf_simple_tailroom>
   118d8:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   118da:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   118de:	6822      	ldr	r2, [r4, #0]
		u8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   118e0:	f88d 000f 	strb.w	r0, [sp, #15]
   118e4:	88a3      	ldrh	r3, [r4, #4]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   118e6:	f10d 000f 	add.w	r0, sp, #15
   118ea:	9000      	str	r0, [sp, #0]
   118ec:	f8d1 8004 	ldr.w	r8, [r1, #4]
   118f0:	4413      	add	r3, r2
   118f2:	4639      	mov	r1, r7
   118f4:	462a      	mov	r2, r5
   118f6:	4630      	mov	r0, r6
   118f8:	47c0      	blx	r8
		if (err) {
   118fa:	4601      	mov	r1, r0
   118fc:	b180      	cbz	r0, 11920 <health_get_registered+0x80>
			BT_ERR("Failed to get faults (err %d)", err);
   118fe:	2301      	movs	r3, #1
   11900:	f04f 0200 	mov.w	r2, #0
   11904:	f363 0207 	bfi	r2, r3, #0, #8
   11908:	4811      	ldr	r0, [pc, #68]	; (11950 <health_get_registered+0xb0>)
   1190a:	4b12      	ldr	r3, [pc, #72]	; (11954 <health_get_registered+0xb4>)
   1190c:	1a1b      	subs	r3, r3, r0
   1190e:	08db      	lsrs	r3, r3, #3
   11910:	f363 128f 	bfi	r2, r3, #6, #10
   11914:	4810      	ldr	r0, [pc, #64]	; (11958 <health_get_registered+0xb8>)
   11916:	f00c fda1 	bl	1e45c <log_1>
		*test_id = HEALTH_TEST_STANDARD;
   1191a:	2300      	movs	r3, #0
   1191c:	702b      	strb	r3, [r5, #0]
}
   1191e:	e004      	b.n	1192a <health_get_registered+0x8a>
			net_buf_simple_add(msg, fault_count);
   11920:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11924:	4620      	mov	r0, r4
   11926:	f010 fe30 	bl	2258a <net_buf_simple_add>
}
   1192a:	b004      	add	sp, #16
   1192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No callback for getting faults");
   11930:	2302      	movs	r3, #2
   11932:	f04f 0100 	mov.w	r1, #0
   11936:	f363 0107 	bfi	r1, r3, #0, #8
   1193a:	4a05      	ldr	r2, [pc, #20]	; (11950 <health_get_registered+0xb0>)
   1193c:	4b05      	ldr	r3, [pc, #20]	; (11954 <health_get_registered+0xb4>)
   1193e:	4807      	ldr	r0, [pc, #28]	; (1195c <health_get_registered+0xbc>)
   11940:	1a9b      	subs	r3, r3, r2
   11942:	08db      	lsrs	r3, r3, #3
   11944:	f363 118f 	bfi	r1, r3, #6, #10
   11948:	f00c fd7b 	bl	1e442 <log_0>
   1194c:	e7e5      	b.n	1191a <health_get_registered+0x7a>
   1194e:	bf00      	nop
   11950:	000233ec 	.word	0x000233ec
   11954:	000234a4 	.word	0x000234a4
   11958:	00026e69 	.word	0x00026e69
   1195c:	00026e87 	.word	0x00026e87

00011960 <health_fault_test>:
{
   11960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11964:	4615      	mov	r5, r2
   11966:	b098      	sub	sp, #96	; 0x60
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11968:	ab06      	add	r3, sp, #24
   1196a:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
	struct bt_mesh_health_srv *srv = model->user_data;
   1196e:	f8d0 8018 	ldr.w	r8, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11972:	9303      	str	r3, [sp, #12]
{
   11974:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   11976:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11978:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1197c:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   1197e:	f010 fe81 	bl	22684 <net_buf_simple_pull_u8>
   11982:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   11984:	4628      	mov	r0, r5
   11986:	f010 fe85 	bl	22694 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   1198a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1198e:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_test) {
   11990:	b1c3      	cbz	r3, 119c4 <health_fault_test+0x64>
   11992:	68db      	ldr	r3, [r3, #12]
   11994:	b1b3      	cbz	r3, 119c4 <health_fault_test+0x64>
		err = srv->cb->fault_test(model, test_id, company_id);
   11996:	4602      	mov	r2, r0
   11998:	4639      	mov	r1, r7
   1199a:	4620      	mov	r0, r4
   1199c:	4798      	blx	r3
		if (err) {
   1199e:	4601      	mov	r1, r0
   119a0:	b180      	cbz	r0, 119c4 <health_fault_test+0x64>
			BT_WARN("Running fault test failed with err %d", err);
   119a2:	2302      	movs	r3, #2
   119a4:	f04f 0200 	mov.w	r2, #0
   119a8:	f363 0207 	bfi	r2, r3, #0, #8
   119ac:	4814      	ldr	r0, [pc, #80]	; (11a00 <health_fault_test+0xa0>)
   119ae:	4b15      	ldr	r3, [pc, #84]	; (11a04 <health_fault_test+0xa4>)
   119b0:	1a1b      	subs	r3, r3, r0
   119b2:	08db      	lsrs	r3, r3, #3
   119b4:	f363 128f 	bfi	r2, r3, #6, #10
   119b8:	4813      	ldr	r0, [pc, #76]	; (11a08 <health_fault_test+0xa8>)
   119ba:	f00c fd4f 	bl	1e45c <log_1>
}
   119be:	b018      	add	sp, #96	; 0x60
   119c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	health_get_registered(model, company_id, &sdu);
   119c4:	aa03      	add	r2, sp, #12
   119c6:	4629      	mov	r1, r5
   119c8:	4620      	mov	r0, r4
   119ca:	f7ff ff69 	bl	118a0 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   119ce:	2300      	movs	r3, #0
   119d0:	9300      	str	r3, [sp, #0]
   119d2:	aa03      	add	r2, sp, #12
   119d4:	4631      	mov	r1, r6
   119d6:	4620      	mov	r0, r4
   119d8:	f00f fc28 	bl	2122c <bt_mesh_model_send>
   119dc:	2800      	cmp	r0, #0
   119de:	d0ee      	beq.n	119be <health_fault_test+0x5e>
		BT_ERR("Unable to send Health Current Status response");
   119e0:	2301      	movs	r3, #1
   119e2:	f04f 0100 	mov.w	r1, #0
   119e6:	f363 0107 	bfi	r1, r3, #0, #8
   119ea:	4a05      	ldr	r2, [pc, #20]	; (11a00 <health_fault_test+0xa0>)
   119ec:	4b05      	ldr	r3, [pc, #20]	; (11a04 <health_fault_test+0xa4>)
   119ee:	4807      	ldr	r0, [pc, #28]	; (11a0c <health_fault_test+0xac>)
   119f0:	1a9b      	subs	r3, r3, r2
   119f2:	08db      	lsrs	r3, r3, #3
   119f4:	f363 118f 	bfi	r1, r3, #6, #10
   119f8:	f00c fd23 	bl	1e442 <log_0>
   119fc:	e7df      	b.n	119be <health_fault_test+0x5e>
   119fe:	bf00      	nop
   11a00:	000233ec 	.word	0x000233ec
   11a04:	000234a4 	.word	0x000234a4
   11a08:	00026e15 	.word	0x00026e15
   11a0c:	00026e3b 	.word	0x00026e3b

00011a10 <health_pub_update>:
	{ OP_ATTENTION_SET_UNREL,      1,   attention_set_unrel },
	BT_MESH_MODEL_OP_END,
};

static int health_pub_update(struct bt_mesh_model *mod)
{
   11a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   11a14:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   11a16:	f8d0 a018 	ldr.w	sl, [r0, #24]
	size_t count;

	BT_DBG("");

	count = health_get_current(mod, pub->msg);
   11a1a:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   11a1c:	2104      	movs	r1, #4
{
   11a1e:	4681      	mov	r9, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   11a20:	4620      	mov	r0, r4
   11a22:	f00f fbda 	bl	211da <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   11a26:	2101      	movs	r1, #1
   11a28:	4620      	mov	r0, r4
   11a2a:	f010 fdae 	bl	2258a <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   11a2e:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   11a30:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   11a32:	4620      	mov	r0, r4
   11a34:	f010 fda9 	bl	2258a <net_buf_simple_add>
   11a38:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
   11a3a:	f7fd f903 	bl	ec44 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   11a3e:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   11a42:	4680      	mov	r8, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   11a44:	2b00      	cmp	r3, #0
   11a46:	d045      	beq.n	11ad4 <health_pub_update+0xc4>
   11a48:	681b      	ldr	r3, [r3, #0]
   11a4a:	2b00      	cmp	r3, #0
   11a4c:	d042      	beq.n	11ad4 <health_pub_update+0xc4>
		fault_count = net_buf_simple_tailroom(msg);
   11a4e:	4620      	mov	r0, r4
   11a50:	f010 fe40 	bl	226d4 <net_buf_simple_tailroom>
   11a54:	f88d 000d 	strb.w	r0, [sp, #13]
   11a58:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   11a5a:	f8da 1004 	ldr.w	r1, [sl, #4]
   11a5e:	88a3      	ldrh	r3, [r4, #4]
   11a60:	f10d 000d 	add.w	r0, sp, #13
   11a64:	9000      	str	r0, [sp, #0]
   11a66:	f8d1 a000 	ldr.w	sl, [r1]
   11a6a:	4413      	add	r3, r2
   11a6c:	4639      	mov	r1, r7
   11a6e:	f10d 020e 	add.w	r2, sp, #14
   11a72:	4648      	mov	r0, r9
   11a74:	47d0      	blx	sl
		if (err) {
   11a76:	4601      	mov	r1, r0
   11a78:	b1b8      	cbz	r0, 11aaa <health_pub_update+0x9a>
			BT_ERR("Failed to get faults (err %d)", err);
   11a7a:	2301      	movs	r3, #1
   11a7c:	f04f 0200 	mov.w	r2, #0
   11a80:	f363 0207 	bfi	r2, r3, #0, #8
   11a84:	481b      	ldr	r0, [pc, #108]	; (11af4 <health_pub_update+0xe4>)
   11a86:	4b1c      	ldr	r3, [pc, #112]	; (11af8 <health_pub_update+0xe8>)
   11a88:	1a1b      	subs	r3, r3, r0
   11a8a:	08db      	lsrs	r3, r3, #3
   11a8c:	f363 128f 	bfi	r2, r3, #6, #10
   11a90:	481a      	ldr	r0, [pc, #104]	; (11afc <health_pub_update+0xec>)
   11a92:	f00c fce3 	bl	1e45c <log_1>
		sys_put_le16(comp->cid, company_ptr);
   11a96:	f8b8 3000 	ldrh.w	r3, [r8]
	dst[0] = val;
   11a9a:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   11a9c:	0a1b      	lsrs	r3, r3, #8
   11a9e:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
   11aa0:	2300      	movs	r3, #0
   11aa2:	703b      	strb	r3, [r7, #0]
		fault_count = 0U;
   11aa4:	f88d 300d 	strb.w	r3, [sp, #13]
   11aa8:	e009      	b.n	11abe <health_pub_update+0xae>
			sys_put_le16(company_id, company_ptr);
   11aaa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   11aae:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   11ab0:	0a1b      	lsrs	r3, r3, #8
   11ab2:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
   11ab4:	f89d 100d 	ldrb.w	r1, [sp, #13]
   11ab8:	4620      	mov	r0, r4
   11aba:	f010 fd66 	bl	2258a <net_buf_simple_add>
	return fault_count;
   11abe:	f89d 200d 	ldrb.w	r2, [sp, #13]
	if (!count) {
   11ac2:	b91a      	cbnz	r2, 11acc <health_pub_update+0xbc>
		pub->period_div = 0;
   11ac4:	7af3      	ldrb	r3, [r6, #11]
   11ac6:	f362 0303 	bfi	r3, r2, #0, #4
   11aca:	72f3      	strb	r3, [r6, #11]
	}

	return 0;
}
   11acc:	2000      	movs	r0, #0
   11ace:	b004      	add	sp, #16
   11ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No callback for getting faults");
   11ad4:	2302      	movs	r3, #2
   11ad6:	f04f 0100 	mov.w	r1, #0
   11ada:	f363 0107 	bfi	r1, r3, #0, #8
   11ade:	4a05      	ldr	r2, [pc, #20]	; (11af4 <health_pub_update+0xe4>)
   11ae0:	4b05      	ldr	r3, [pc, #20]	; (11af8 <health_pub_update+0xe8>)
   11ae2:	4807      	ldr	r0, [pc, #28]	; (11b00 <health_pub_update+0xf0>)
   11ae4:	1a9b      	subs	r3, r3, r2
   11ae6:	08db      	lsrs	r3, r3, #3
   11ae8:	f363 118f 	bfi	r1, r3, #6, #10
   11aec:	f00c fca9 	bl	1e442 <log_0>
   11af0:	e7d1      	b.n	11a96 <health_pub_update+0x86>
   11af2:	bf00      	nop
   11af4:	000233ec 	.word	0x000233ec
   11af8:	000234a4 	.word	0x000234a4
   11afc:	00026e69 	.word	0x00026e69
   11b00:	00026e87 	.word	0x00026e87

00011b04 <send_health_period_status>:
{
   11b04:	b530      	push	{r4, r5, lr}
   11b06:	4604      	mov	r4, r0
   11b08:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11b0a:	ab03      	add	r3, sp, #12
   11b0c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   11b10:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   11b12:	a805      	add	r0, sp, #20
   11b14:	f248 0137 	movw	r1, #32823	; 0x8037
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11b18:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11b1c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   11b1e:	f00f fb5c 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   11b22:	68a3      	ldr	r3, [r4, #8]
   11b24:	7ad9      	ldrb	r1, [r3, #11]
   11b26:	a805      	add	r0, sp, #20
   11b28:	f001 010f 	and.w	r1, r1, #15
   11b2c:	f010 fd3c 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11b30:	2300      	movs	r3, #0
   11b32:	9300      	str	r3, [sp, #0]
   11b34:	aa05      	add	r2, sp, #20
   11b36:	4629      	mov	r1, r5
   11b38:	4620      	mov	r0, r4
   11b3a:	f00f fb77 	bl	2122c <bt_mesh_model_send>
   11b3e:	b168      	cbz	r0, 11b5c <send_health_period_status+0x58>
		BT_ERR("Unable to send Health Period Status");
   11b40:	2301      	movs	r3, #1
   11b42:	f04f 0100 	mov.w	r1, #0
   11b46:	f363 0107 	bfi	r1, r3, #0, #8
   11b4a:	4a05      	ldr	r2, [pc, #20]	; (11b60 <send_health_period_status+0x5c>)
   11b4c:	4b05      	ldr	r3, [pc, #20]	; (11b64 <send_health_period_status+0x60>)
   11b4e:	4806      	ldr	r0, [pc, #24]	; (11b68 <send_health_period_status+0x64>)
   11b50:	1a9b      	subs	r3, r3, r2
   11b52:	08db      	lsrs	r3, r3, #3
   11b54:	f363 118f 	bfi	r1, r3, #6, #10
   11b58:	f00c fc73 	bl	1e442 <log_0>
}
   11b5c:	b009      	add	sp, #36	; 0x24
   11b5e:	bd30      	pop	{r4, r5, pc}
   11b60:	000233ec 	.word	0x000233ec
   11b64:	000234a4 	.word	0x000234a4
   11b68:	00026ee1 	.word	0x00026ee1

00011b6c <send_attention_status>:
{
   11b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b6e:	4605      	mov	r5, r0
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   11b70:	6980      	ldr	r0, [r0, #24]
   11b72:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11b74:	ab03      	add	r3, sp, #12
   11b76:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   11b7a:	3014      	adds	r0, #20
   11b7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   11b80:	460e      	mov	r6, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11b82:	9305      	str	r3, [sp, #20]
   11b84:	f00a fda0 	bl	1c6c8 <z_timeout_remaining>
   11b88:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   11b8c:	4607      	mov	r7, r0
	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   11b8e:	f248 0107 	movw	r1, #32775	; 0x8007
   11b92:	a805      	add	r0, sp, #20
   11b94:	f00f fb21 	bl	211da <bt_mesh_model_msg_init>
   11b98:	2264      	movs	r2, #100	; 0x64
   11b9a:	2300      	movs	r3, #0
   11b9c:	fb87 0104 	smull	r0, r1, r7, r4
   11ba0:	f7ee faee 	bl	180 <__aeabi_uldivmod>
	time = k_delayed_work_remaining_get(&srv->attn_timer) / 1000;
   11ba4:	fb90 f1f4 	sdiv	r1, r0, r4
	net_buf_simple_add_u8(&msg, time);
   11ba8:	a805      	add	r0, sp, #20
   11baa:	b2c9      	uxtb	r1, r1
   11bac:	f010 fcfc 	bl	225a8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11bb0:	2300      	movs	r3, #0
   11bb2:	9300      	str	r3, [sp, #0]
   11bb4:	aa05      	add	r2, sp, #20
   11bb6:	4631      	mov	r1, r6
   11bb8:	4628      	mov	r0, r5
   11bba:	f00f fb37 	bl	2122c <bt_mesh_model_send>
   11bbe:	b168      	cbz	r0, 11bdc <send_attention_status+0x70>
		BT_ERR("Unable to send Attention Status");
   11bc0:	2301      	movs	r3, #1
   11bc2:	f04f 0100 	mov.w	r1, #0
   11bc6:	f363 0107 	bfi	r1, r3, #0, #8
   11bca:	4a05      	ldr	r2, [pc, #20]	; (11be0 <send_attention_status+0x74>)
   11bcc:	4b05      	ldr	r3, [pc, #20]	; (11be4 <send_attention_status+0x78>)
   11bce:	4806      	ldr	r0, [pc, #24]	; (11be8 <send_attention_status+0x7c>)
   11bd0:	1a9b      	subs	r3, r3, r2
   11bd2:	08db      	lsrs	r3, r3, #3
   11bd4:	f363 118f 	bfi	r1, r3, #6, #10
   11bd8:	f00c fc33 	bl	1e442 <log_0>
}
   11bdc:	b009      	add	sp, #36	; 0x24
   11bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11be0:	000233ec 	.word	0x000233ec
   11be4:	000234a4 	.word	0x000234a4
   11be8:	00026ec1 	.word	0x00026ec1

00011bec <health_fault_clear.part.2>:
		BT_ERR("Unable to send Health Current Status response");
   11bec:	2301      	movs	r3, #1
   11bee:	f04f 0100 	mov.w	r1, #0
   11bf2:	f363 0107 	bfi	r1, r3, #0, #8
   11bf6:	4a04      	ldr	r2, [pc, #16]	; (11c08 <health_fault_clear.part.2+0x1c>)
   11bf8:	4b04      	ldr	r3, [pc, #16]	; (11c0c <health_fault_clear.part.2+0x20>)
   11bfa:	4805      	ldr	r0, [pc, #20]	; (11c10 <health_fault_clear.part.2+0x24>)
   11bfc:	1a9b      	subs	r3, r3, r2
   11bfe:	08db      	lsrs	r3, r3, #3
   11c00:	f363 118f 	bfi	r1, r3, #6, #10
   11c04:	f00c bc1d 	b.w	1e442 <log_0>
   11c08:	000233ec 	.word	0x000233ec
   11c0c:	000234a4 	.word	0x000234a4
   11c10:	00026e3b 	.word	0x00026e3b

00011c14 <bt_mesh_health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

int bt_mesh_health_srv_init(struct bt_mesh_model *model, bool primary)
{
   11c14:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   11c16:	6984      	ldr	r4, [r0, #24]
{
   11c18:	4605      	mov	r5, r0
   11c1a:	460e      	mov	r6, r1

	if (!srv) {
   11c1c:	b99c      	cbnz	r4, 11c46 <bt_mesh_health_srv_init+0x32>
		if (!primary) {
   11c1e:	b909      	cbnz	r1, 11c24 <bt_mesh_health_srv_init+0x10>

	if (primary) {
		health_srv = srv;
	}

	return 0;
   11c20:	2000      	movs	r0, #0
   11c22:	e00f      	b.n	11c44 <bt_mesh_health_srv_init+0x30>
		BT_ERR("No Health Server context provided");
   11c24:	2301      	movs	r3, #1
   11c26:	f04f 0100 	mov.w	r1, #0
   11c2a:	f363 0107 	bfi	r1, r3, #0, #8
   11c2e:	4a14      	ldr	r2, [pc, #80]	; (11c80 <bt_mesh_health_srv_init+0x6c>)
   11c30:	4b14      	ldr	r3, [pc, #80]	; (11c84 <bt_mesh_health_srv_init+0x70>)
   11c32:	4815      	ldr	r0, [pc, #84]	; (11c88 <bt_mesh_health_srv_init+0x74>)
   11c34:	1a9b      	subs	r3, r3, r2
   11c36:	08db      	lsrs	r3, r3, #3
   11c38:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Health Server has no publication support");
   11c3c:	f00c fc01 	bl	1e442 <log_0>
		return -EINVAL;
   11c40:	f06f 0015 	mvn.w	r0, #21
}
   11c44:	bd70      	pop	{r4, r5, r6, pc}
	if (!model->pub) {
   11c46:	6883      	ldr	r3, [r0, #8]
   11c48:	b963      	cbnz	r3, 11c64 <bt_mesh_health_srv_init+0x50>
		BT_ERR("Health Server has no publication support");
   11c4a:	2301      	movs	r3, #1
   11c4c:	f04f 0100 	mov.w	r1, #0
   11c50:	f363 0107 	bfi	r1, r3, #0, #8
   11c54:	4a0a      	ldr	r2, [pc, #40]	; (11c80 <bt_mesh_health_srv_init+0x6c>)
   11c56:	4b0b      	ldr	r3, [pc, #44]	; (11c84 <bt_mesh_health_srv_init+0x70>)
   11c58:	480c      	ldr	r0, [pc, #48]	; (11c8c <bt_mesh_health_srv_init+0x78>)
   11c5a:	1a9b      	subs	r3, r3, r2
   11c5c:	08db      	lsrs	r3, r3, #3
   11c5e:	f363 118f 	bfi	r1, r3, #6, #10
   11c62:	e7eb      	b.n	11c3c <bt_mesh_health_srv_init+0x28>
	model->pub->update = health_pub_update;
   11c64:	4a0a      	ldr	r2, [pc, #40]	; (11c90 <bt_mesh_health_srv_init+0x7c>)
   11c66:	615a      	str	r2, [r3, #20]
	k_delayed_work_init(&srv->attn_timer, attention_off);
   11c68:	490a      	ldr	r1, [pc, #40]	; (11c94 <bt_mesh_health_srv_init+0x80>)
   11c6a:	f104 0008 	add.w	r0, r4, #8
   11c6e:	f011 f98c 	bl	22f8a <k_delayed_work_init>
	srv->model = model;
   11c72:	6025      	str	r5, [r4, #0]
	if (primary) {
   11c74:	2e00      	cmp	r6, #0
   11c76:	d0d3      	beq.n	11c20 <bt_mesh_health_srv_init+0xc>
		health_srv = srv;
   11c78:	4b07      	ldr	r3, [pc, #28]	; (11c98 <bt_mesh_health_srv_init+0x84>)
   11c7a:	601c      	str	r4, [r3, #0]
   11c7c:	e7d0      	b.n	11c20 <bt_mesh_health_srv_init+0xc>
   11c7e:	bf00      	nop
   11c80:	000233ec 	.word	0x000233ec
   11c84:	000234a4 	.word	0x000234a4
   11c88:	00026dca 	.word	0x00026dca
   11c8c:	00026dec 	.word	0x00026dec
   11c90:	00011a11 	.word	0x00011a11
   11c94:	000215eb 	.word	0x000215eb
   11c98:	20000acc 	.word	0x20000acc

00011c9c <bt_mesh_attention>:

void bt_mesh_attention(struct bt_mesh_model *model, u8_t time)
{
   11c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ca0:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   11ca2:	4605      	mov	r5, r0
   11ca4:	bb28      	cbnz	r0, 11cf2 <bt_mesh_attention+0x56>
		srv = health_srv;
   11ca6:	4b1a      	ldr	r3, [pc, #104]	; (11d10 <bt_mesh_attention+0x74>)
   11ca8:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
   11caa:	b97c      	cbnz	r4, 11ccc <bt_mesh_attention+0x30>
			BT_WARN("No Health Server available");
   11cac:	2302      	movs	r3, #2
   11cae:	f04f 0100 	mov.w	r1, #0
   11cb2:	f363 0107 	bfi	r1, r3, #0, #8
   11cb6:	4a17      	ldr	r2, [pc, #92]	; (11d14 <bt_mesh_attention+0x78>)
   11cb8:	4b17      	ldr	r3, [pc, #92]	; (11d18 <bt_mesh_attention+0x7c>)
   11cba:	4818      	ldr	r0, [pc, #96]	; (11d1c <bt_mesh_attention+0x80>)
   11cbc:	1a9b      	subs	r3, r3, r2
   11cbe:	08db      	lsrs	r3, r3, #3
   11cc0:	f363 118f 	bfi	r1, r3, #6, #10

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
   11cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("No Health Server available");
   11cc8:	f00c bbbb 	b.w	1e442 <log_0>
		model = srv->model;
   11ccc:	6825      	ldr	r5, [r4, #0]
	if (time) {
   11cce:	f104 0608 	add.w	r6, r4, #8
   11cd2:	b187      	cbz	r7, 11cf6 <bt_mesh_attention+0x5a>
		if (srv->cb && srv->cb->attn_on) {
   11cd4:	6863      	ldr	r3, [r4, #4]
   11cd6:	b11b      	cbz	r3, 11ce0 <bt_mesh_attention+0x44>
   11cd8:	691b      	ldr	r3, [r3, #16]
   11cda:	b10b      	cbz	r3, 11ce0 <bt_mesh_attention+0x44>
			srv->cb->attn_on(model);
   11cdc:	4628      	mov	r0, r5
   11cde:	4798      	blx	r3
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11ce4:	437a      	muls	r2, r7
   11ce6:	4631      	mov	r1, r6
   11ce8:	480d      	ldr	r0, [pc, #52]	; (11d20 <bt_mesh_attention+0x84>)
}
   11cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11cee:	f00a bc23 	b.w	1c538 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
   11cf2:	6984      	ldr	r4, [r0, #24]
   11cf4:	e7eb      	b.n	11cce <bt_mesh_attention+0x32>
		k_delayed_work_cancel(&srv->attn_timer);
   11cf6:	4630      	mov	r0, r6
   11cf8:	f011 f94f 	bl	22f9a <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
   11cfc:	6863      	ldr	r3, [r4, #4]
   11cfe:	b12b      	cbz	r3, 11d0c <bt_mesh_attention+0x70>
   11d00:	695b      	ldr	r3, [r3, #20]
   11d02:	b11b      	cbz	r3, 11d0c <bt_mesh_attention+0x70>
			srv->cb->attn_off(model);
   11d04:	4628      	mov	r0, r5
}
   11d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
   11d0a:	4718      	bx	r3
}
   11d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d10:	20000acc 	.word	0x20000acc
   11d14:	000233ec 	.word	0x000233ec
   11d18:	000234a4 	.word	0x000234a4
   11d1c:	00026daf 	.word	0x00026daf
   11d20:	20001c74 	.word	0x20001c74

00011d24 <key_update_find>:
	schedule_store(BT_MESH_RPL_PENDING);
}

static struct key_update *key_update_find(bool app_key, u16_t key_idx,
					  struct key_update **free_slot)
{
   11d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d26:	4c0f      	ldr	r4, [pc, #60]	; (11d64 <key_update_find+0x40>)
	struct key_update *match;
	int i;

	match = NULL;
	*free_slot = NULL;
   11d28:	2300      	movs	r3, #0
{
   11d2a:	4607      	mov	r7, r0
	*free_slot = NULL;
   11d2c:	6013      	str	r3, [r2, #0]
	match = NULL;
   11d2e:	4618      	mov	r0, r3
   11d30:	4626      	mov	r6, r4

	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
		struct key_update *update = &key_updates[i];

		if (!update->valid) {
   11d32:	eb06 0543 	add.w	r5, r6, r3, lsl #1
   11d36:	786d      	ldrb	r5, [r5, #1]
   11d38:	f015 0f10 	tst.w	r5, #16
   11d3c:	d106      	bne.n	11d4c <key_update_find+0x28>
			*free_slot = update;
   11d3e:	6014      	str	r4, [r2, #0]
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   11d40:	3301      	adds	r3, #1
   11d42:	2b04      	cmp	r3, #4
   11d44:	f104 0402 	add.w	r4, r4, #2
   11d48:	d1f3      	bne.n	11d32 <key_update_find+0xe>
			match = update;
		}
	}

	return match;
}
   11d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (update->app_key != app_key) {
   11d4c:	f3c5 1540 	ubfx	r5, r5, #5, #1
   11d50:	42bd      	cmp	r5, r7
   11d52:	d1f5      	bne.n	11d40 <key_update_find+0x1c>
		if (update->key_idx == key_idx) {
   11d54:	f836 5013 	ldrh.w	r5, [r6, r3, lsl #1]
   11d58:	f3c5 050b 	ubfx	r5, r5, #0, #12
			match = update;
   11d5c:	428d      	cmp	r5, r1
   11d5e:	bf08      	it	eq
   11d60:	4620      	moveq	r0, r4
   11d62:	e7ed      	b.n	11d40 <key_update_find+0x1c>
   11d64:	20001d38 	.word	0x20001d38

00011d68 <mesh_x_set>:
{
   11d68:	b538      	push	{r3, r4, r5, lr}
   11d6a:	4615      	mov	r5, r2
	len = settings_val_read_cb(val_ctx, out, read_len);
   11d6c:	f00d fabd 	bl	1f2ea <settings_val_read_cb>
	if (len < 0) {
   11d70:	1e04      	subs	r4, r0, #0
   11d72:	da10      	bge.n	11d96 <mesh_x_set+0x2e>
		BT_ERR("Failed to read value (err %d)", len);
   11d74:	2301      	movs	r3, #1
   11d76:	f04f 0200 	mov.w	r2, #0
   11d7a:	f363 0207 	bfi	r2, r3, #0, #8
   11d7e:	4911      	ldr	r1, [pc, #68]	; (11dc4 <mesh_x_set+0x5c>)
   11d80:	4b11      	ldr	r3, [pc, #68]	; (11dc8 <mesh_x_set+0x60>)
   11d82:	4812      	ldr	r0, [pc, #72]	; (11dcc <mesh_x_set+0x64>)
   11d84:	1a5b      	subs	r3, r3, r1
   11d86:	08db      	lsrs	r3, r3, #3
   11d88:	f363 128f 	bfi	r2, r3, #6, #10
   11d8c:	4621      	mov	r1, r4
   11d8e:	f00c fb65 	bl	1e45c <log_1>
}
   11d92:	4620      	mov	r0, r4
   11d94:	bd38      	pop	{r3, r4, r5, pc}
	if (len != read_len) {
   11d96:	42a5      	cmp	r5, r4
   11d98:	d012      	beq.n	11dc0 <mesh_x_set+0x58>
		BT_ERR("Unexpected value length (%d != %zu)", len, read_len);
   11d9a:	2201      	movs	r2, #1
   11d9c:	f04f 0300 	mov.w	r3, #0
   11da0:	f362 0307 	bfi	r3, r2, #0, #8
   11da4:	4907      	ldr	r1, [pc, #28]	; (11dc4 <mesh_x_set+0x5c>)
   11da6:	4a08      	ldr	r2, [pc, #32]	; (11dc8 <mesh_x_set+0x60>)
   11da8:	4809      	ldr	r0, [pc, #36]	; (11dd0 <mesh_x_set+0x68>)
   11daa:	1a52      	subs	r2, r2, r1
   11dac:	08d2      	lsrs	r2, r2, #3
   11dae:	f362 138f 	bfi	r3, r2, #6, #10
   11db2:	4621      	mov	r1, r4
   11db4:	462a      	mov	r2, r5
   11db6:	f00c fb65 	bl	1e484 <log_2>
		return -EINVAL;
   11dba:	f06f 0415 	mvn.w	r4, #21
   11dbe:	e7e8      	b.n	11d92 <mesh_x_set+0x2a>
	return 0;
   11dc0:	2400      	movs	r4, #0
   11dc2:	e7e6      	b.n	11d92 <mesh_x_set+0x2a>
   11dc4:	000233ec 	.word	0x000233ec
   11dc8:	000234cc 	.word	0x000234cc
   11dcc:	0002704e 	.word	0x0002704e
   11dd0:	0002706c 	.word	0x0002706c

00011dd4 <rpl_set>:
{
   11dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11dd8:	460b      	mov	r3, r1
	if (argc < 1) {
   11dda:	1e01      	subs	r1, r0, #0
{
   11ddc:	4617      	mov	r7, r2
	if (argc < 1) {
   11dde:	dc13      	bgt.n	11e08 <rpl_set+0x34>
		BT_ERR("Invalid argc (%d)", argc);
   11de0:	2301      	movs	r3, #1
   11de2:	f04f 0200 	mov.w	r2, #0
   11de6:	f363 0207 	bfi	r2, r3, #0, #8
   11dea:	4842      	ldr	r0, [pc, #264]	; (11ef4 <rpl_set+0x120>)
   11dec:	4b42      	ldr	r3, [pc, #264]	; (11ef8 <rpl_set+0x124>)
   11dee:	1a1b      	subs	r3, r3, r0
   11df0:	08db      	lsrs	r3, r3, #3
   11df2:	f363 128f 	bfi	r2, r3, #6, #10
   11df6:	4841      	ldr	r0, [pc, #260]	; (11efc <rpl_set+0x128>)
   11df8:	f00c fb30 	bl	1e45c <log_1>
		return -ENOENT;
   11dfc:	f06f 0501 	mvn.w	r5, #1
}
   11e00:	4628      	mov	r0, r5
   11e02:	b003      	add	sp, #12
   11e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	src = strtol(argv[0], NULL, 16);
   11e08:	2210      	movs	r2, #16
   11e0a:	6818      	ldr	r0, [r3, #0]
   11e0c:	2100      	movs	r1, #0
   11e0e:	f00d fb20 	bl	1f452 <strtol>
		if (bt_mesh.rpl[i].src == src) {
   11e12:	4a3b      	ldr	r2, [pc, #236]	; (11f00 <rpl_set+0x12c>)
	src = strtol(argv[0], NULL, 16);
   11e14:	4606      	mov	r6, r0
   11e16:	fa1f f880 	uxth.w	r8, r0
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   11e1a:	2300      	movs	r3, #0
   11e1c:	4691      	mov	r9, r2
		if (bt_mesh.rpl[i].src == src) {
   11e1e:	f832 1033 	ldrh.w	r1, [r2, r3, lsl #3]
   11e22:	4541      	cmp	r1, r8
   11e24:	d10e      	bne.n	11e44 <rpl_set+0x70>
			return &bt_mesh.rpl[i];
   11e26:	4c36      	ldr	r4, [pc, #216]	; (11f00 <rpl_set+0x12c>)
   11e28:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (settings_val_get_len_cb(val_ctx) == 0) {
   11e2c:	4638      	mov	r0, r7
   11e2e:	f00d fa79 	bl	1f324 <settings_val_get_len_cb>
   11e32:	4605      	mov	r5, r0
   11e34:	b9e0      	cbnz	r0, 11e70 <rpl_set+0x9c>
		if (entry) {
   11e36:	b154      	cbz	r4, 11e4e <rpl_set+0x7a>
			(void)memset(entry, 0, sizeof(*entry));
   11e38:	4601      	mov	r1, r0
   11e3a:	2208      	movs	r2, #8
   11e3c:	4620      	mov	r0, r4
   11e3e:	f00d fc0d 	bl	1f65c <memset>
   11e42:	e7dd      	b.n	11e00 <rpl_set+0x2c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   11e44:	3301      	adds	r3, #1
   11e46:	2b0a      	cmp	r3, #10
   11e48:	d1e9      	bne.n	11e1e <rpl_set+0x4a>
	return NULL;
   11e4a:	2400      	movs	r4, #0
   11e4c:	e7ee      	b.n	11e2c <rpl_set+0x58>
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
   11e4e:	2302      	movs	r3, #2
   11e50:	f04f 0200 	mov.w	r2, #0
   11e54:	f363 0207 	bfi	r2, r3, #0, #8
   11e58:	4926      	ldr	r1, [pc, #152]	; (11ef4 <rpl_set+0x120>)
   11e5a:	4b27      	ldr	r3, [pc, #156]	; (11ef8 <rpl_set+0x124>)
   11e5c:	4829      	ldr	r0, [pc, #164]	; (11f04 <rpl_set+0x130>)
   11e5e:	1a5b      	subs	r3, r3, r1
   11e60:	08db      	lsrs	r3, r3, #3
   11e62:	f363 128f 	bfi	r2, r3, #6, #10
   11e66:	b2b1      	uxth	r1, r6
   11e68:	f00c faf8 	bl	1e45c <log_1>
		return 0;
   11e6c:	4625      	mov	r5, r4
   11e6e:	e7c7      	b.n	11e00 <rpl_set+0x2c>
	if (!entry) {
   11e70:	b954      	cbnz	r4, 11e88 <rpl_set+0xb4>
		if (!bt_mesh.rpl[i].src) {
   11e72:	f839 3034 	ldrh.w	r3, [r9, r4, lsl #3]
   11e76:	b9f3      	cbnz	r3, 11eb6 <rpl_set+0xe2>
			bt_mesh.rpl[i].src = src;
   11e78:	4b23      	ldr	r3, [pc, #140]	; (11f08 <rpl_set+0x134>)
   11e7a:	344d      	adds	r4, #77	; 0x4d
   11e7c:	00e4      	lsls	r4, r4, #3
   11e7e:	191a      	adds	r2, r3, r4
			return &bt_mesh.rpl[i];
   11e80:	3404      	adds	r4, #4
			bt_mesh.rpl[i].src = src;
   11e82:	f8a2 8004 	strh.w	r8, [r2, #4]
			return &bt_mesh.rpl[i];
   11e86:	441c      	add	r4, r3
	err = mesh_x_set(val_ctx, &rpl, sizeof(rpl));
   11e88:	2204      	movs	r2, #4
   11e8a:	eb0d 0102 	add.w	r1, sp, r2
   11e8e:	4638      	mov	r0, r7
   11e90:	f7ff ff6a 	bl	11d68 <mesh_x_set>
	if (err) {
   11e94:	4605      	mov	r5, r0
   11e96:	b318      	cbz	r0, 11ee0 <rpl_set+0x10c>
		BT_ERR("Failed to set `net`");
   11e98:	2301      	movs	r3, #1
   11e9a:	f04f 0100 	mov.w	r1, #0
   11e9e:	f363 0107 	bfi	r1, r3, #0, #8
   11ea2:	4a14      	ldr	r2, [pc, #80]	; (11ef4 <rpl_set+0x120>)
   11ea4:	4b14      	ldr	r3, [pc, #80]	; (11ef8 <rpl_set+0x124>)
   11ea6:	4819      	ldr	r0, [pc, #100]	; (11f0c <rpl_set+0x138>)
   11ea8:	1a9b      	subs	r3, r3, r2
   11eaa:	08db      	lsrs	r3, r3, #3
   11eac:	f363 118f 	bfi	r1, r3, #6, #10
   11eb0:	f00c fac7 	bl	1e442 <log_0>
		return err;
   11eb4:	e7a4      	b.n	11e00 <rpl_set+0x2c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   11eb6:	3401      	adds	r4, #1
   11eb8:	2c0a      	cmp	r4, #10
   11eba:	d1da      	bne.n	11e72 <rpl_set+0x9e>
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
   11ebc:	2301      	movs	r3, #1
   11ebe:	f04f 0200 	mov.w	r2, #0
   11ec2:	f363 0207 	bfi	r2, r3, #0, #8
   11ec6:	490b      	ldr	r1, [pc, #44]	; (11ef4 <rpl_set+0x120>)
   11ec8:	4b0b      	ldr	r3, [pc, #44]	; (11ef8 <rpl_set+0x124>)
   11eca:	4811      	ldr	r0, [pc, #68]	; (11f10 <rpl_set+0x13c>)
   11ecc:	1a5b      	subs	r3, r3, r1
   11ece:	08db      	lsrs	r3, r3, #3
   11ed0:	f363 128f 	bfi	r2, r3, #6, #10
   11ed4:	b2b1      	uxth	r1, r6
   11ed6:	f00c fac1 	bl	1e45c <log_1>
			return -ENOMEM;
   11eda:	f06f 050b 	mvn.w	r5, #11
   11ede:	e78f      	b.n	11e00 <rpl_set+0x2c>
	entry->seq = rpl.seq;
   11ee0:	9b01      	ldr	r3, [sp, #4]
   11ee2:	f3c3 0317 	ubfx	r3, r3, #0, #24
   11ee6:	6063      	str	r3, [r4, #4]
	entry->old_iv = rpl.old_iv;
   11ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11eec:	f3c3 0300 	ubfx	r3, r3, #0, #1
   11ef0:	70a3      	strb	r3, [r4, #2]
	return 0;
   11ef2:	e785      	b.n	11e00 <rpl_set+0x2c>
   11ef4:	000233ec 	.word	0x000233ec
   11ef8:	000234cc 	.word	0x000234cc
   11efc:	000271a2 	.word	0x000271a2
   11f00:	20007b90 	.word	0x20007b90
   11f04:	000271b4 	.word	0x000271b4
   11f08:	20007924 	.word	0x20007924
   11f0c:	000271d8 	.word	0x000271d8
   11f10:	000271ec 	.word	0x000271ec

00011f14 <hb_pub_set>:
{
   11f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11f16:	4614      	mov	r4, r2
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
   11f18:	f7ff fbe6 	bl	116e8 <bt_mesh_hb_pub_get>
	if (!pub) {
   11f1c:	4605      	mov	r5, r0
   11f1e:	2800      	cmp	r0, #0
   11f20:	d036      	beq.n	11f90 <hb_pub_set+0x7c>
	if (settings_val_get_len_cb(val_ctx) == 0) {
   11f22:	4620      	mov	r0, r4
   11f24:	f00d f9fe 	bl	1f324 <settings_val_get_len_cb>
   11f28:	b928      	cbnz	r0, 11f36 <hb_pub_set+0x22>
		pub->period = 0;
   11f2a:	e9c5 0008 	strd	r0, r0, [r5, #32]
		return 0;
   11f2e:	4604      	mov	r4, r0
}
   11f30:	4620      	mov	r0, r4
   11f32:	b003      	add	sp, #12
   11f34:	bd30      	pop	{r4, r5, pc}
	err = mesh_x_set(val_ctx, &hb_val, sizeof(hb_val));
   11f36:	4620      	mov	r0, r4
   11f38:	2208      	movs	r2, #8
   11f3a:	4669      	mov	r1, sp
   11f3c:	f7ff ff14 	bl	11d68 <mesh_x_set>
	if (err) {
   11f40:	4604      	mov	r4, r0
   11f42:	b170      	cbz	r0, 11f62 <hb_pub_set+0x4e>
		BT_ERR("Failed to set \'hb_val\'");
   11f44:	2301      	movs	r3, #1
   11f46:	f04f 0100 	mov.w	r1, #0
   11f4a:	f363 0107 	bfi	r1, r3, #0, #8
   11f4e:	4a12      	ldr	r2, [pc, #72]	; (11f98 <hb_pub_set+0x84>)
   11f50:	4b12      	ldr	r3, [pc, #72]	; (11f9c <hb_pub_set+0x88>)
   11f52:	4813      	ldr	r0, [pc, #76]	; (11fa0 <hb_pub_set+0x8c>)
   11f54:	1a9b      	subs	r3, r3, r2
   11f56:	08db      	lsrs	r3, r3, #3
   11f58:	f363 118f 	bfi	r1, r3, #6, #10
   11f5c:	f00c fa71 	bl	1e442 <log_0>
		return err;
   11f60:	e7e6      	b.n	11f30 <hb_pub_set+0x1c>
	pub->dst = hb_val.dst;
   11f62:	f8bd 3000 	ldrh.w	r3, [sp]
   11f66:	842b      	strh	r3, [r5, #32]
	pub->feat = hb_val.feat;
   11f68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11f6c:	84eb      	strh	r3, [r5, #38]	; 0x26
	pub->net_idx = hb_val.net_idx;
   11f6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	pub->period = hb_val.period;
   11f72:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11f76:	84aa      	strh	r2, [r5, #36]	; 0x24
	pub->net_idx = hb_val.net_idx;
   11f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
   11f7c:	852b      	strh	r3, [r5, #40]	; 0x28
	if (hb_val.indefinite) {
   11f7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11f82:	06db      	lsls	r3, r3, #27
		pub->count = 0xffff;
   11f84:	bf46      	itte	mi
   11f86:	f64f 73ff 	movwmi	r3, #65535	; 0xffff
   11f8a:	846b      	strhmi	r3, [r5, #34]	; 0x22
		pub->count = 0;
   11f8c:	8468      	strhpl	r0, [r5, #34]	; 0x22
   11f8e:	e7cf      	b.n	11f30 <hb_pub_set+0x1c>
		return -ENOENT;
   11f90:	f06f 0401 	mvn.w	r4, #1
   11f94:	e7cc      	b.n	11f30 <hb_pub_set+0x1c>
   11f96:	bf00      	nop
   11f98:	000233ec 	.word	0x000233ec
   11f9c:	000234cc 	.word	0x000234cc
   11fa0:	00026fc5 	.word	0x00026fc5

00011fa4 <net_key_set>:
{
   11fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fa8:	460b      	mov	r3, r1
   11faa:	b08a      	sub	sp, #40	; 0x28
	net_idx = strtol(argv[0], NULL, 16);
   11fac:	2100      	movs	r1, #0
   11fae:	6818      	ldr	r0, [r3, #0]
{
   11fb0:	4616      	mov	r6, r2
	net_idx = strtol(argv[0], NULL, 16);
   11fb2:	2210      	movs	r2, #16
   11fb4:	f00d fa4d 	bl	1f452 <strtol>
   11fb8:	b287      	uxth	r7, r0
	sub = bt_mesh_subnet_get(net_idx);
   11fba:	4638      	mov	r0, r7
   11fbc:	f7f9 ffee 	bl	bf9c <bt_mesh_subnet_get>
   11fc0:	4605      	mov	r5, r0
	if (settings_val_get_len_cb(val_ctx) == 0) {
   11fc2:	4630      	mov	r0, r6
   11fc4:	f00d f9ae 	bl	1f324 <settings_val_get_len_cb>
   11fc8:	4604      	mov	r4, r0
   11fca:	b9d0      	cbnz	r0, 12002 <net_key_set+0x5e>
		if (!sub) {
   11fcc:	b9a5      	cbnz	r5, 11ff8 <net_key_set+0x54>
			BT_ERR("No subnet with NetKeyIndex 0x%03x", net_idx);
   11fce:	2301      	movs	r3, #1
   11fd0:	f04f 0200 	mov.w	r2, #0
   11fd4:	f363 0207 	bfi	r2, r3, #0, #8
   11fd8:	4940      	ldr	r1, [pc, #256]	; (120dc <net_key_set+0x138>)
   11fda:	4b41      	ldr	r3, [pc, #260]	; (120e0 <net_key_set+0x13c>)
   11fdc:	4841      	ldr	r0, [pc, #260]	; (120e4 <net_key_set+0x140>)
   11fde:	1a5b      	subs	r3, r3, r1
   11fe0:	08db      	lsrs	r3, r3, #3
   11fe2:	f363 128f 	bfi	r2, r3, #6, #10
   11fe6:	4639      	mov	r1, r7
   11fe8:	f00c fa38 	bl	1e45c <log_1>
			return -ENOENT;
   11fec:	f06f 0401 	mvn.w	r4, #1
}
   11ff0:	4620      	mov	r0, r4
   11ff2:	b00a      	add	sp, #40	; 0x28
   11ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_mesh_subnet_del(sub, false);
   11ff8:	4601      	mov	r1, r0
   11ffa:	4628      	mov	r0, r5
   11ffc:	f7ff fb82 	bl	11704 <bt_mesh_subnet_del>
		return 0;
   12000:	e7f6      	b.n	11ff0 <net_key_set+0x4c>
	err = mesh_x_set(val_ctx, &key, sizeof(key));
   12002:	2221      	movs	r2, #33	; 0x21
   12004:	a901      	add	r1, sp, #4
   12006:	4630      	mov	r0, r6
   12008:	f7ff feae 	bl	11d68 <mesh_x_set>
	if (err) {
   1200c:	4604      	mov	r4, r0
   1200e:	b170      	cbz	r0, 1202e <net_key_set+0x8a>
		BT_ERR("Failed to set \'net-key\'");
   12010:	2301      	movs	r3, #1
   12012:	f04f 0100 	mov.w	r1, #0
   12016:	f363 0107 	bfi	r1, r3, #0, #8
   1201a:	4a30      	ldr	r2, [pc, #192]	; (120dc <net_key_set+0x138>)
   1201c:	4b30      	ldr	r3, [pc, #192]	; (120e0 <net_key_set+0x13c>)
   1201e:	4832      	ldr	r0, [pc, #200]	; (120e8 <net_key_set+0x144>)
   12020:	1a9b      	subs	r3, r3, r2
   12022:	08db      	lsrs	r3, r3, #3
   12024:	f363 118f 	bfi	r1, r3, #6, #10
   12028:	f00c fa0b 	bl	1e442 <log_0>
		return err;
   1202c:	e7e0      	b.n	11ff0 <net_key_set+0x4c>
	if (sub) {
   1202e:	bb55      	cbnz	r5, 12086 <net_key_set+0xe2>
		if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
   12030:	4b2e      	ldr	r3, [pc, #184]	; (120ec <net_key_set+0x148>)
   12032:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
   12036:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1203a:	4291      	cmp	r1, r2
   1203c:	461e      	mov	r6, r3
   1203e:	d004      	beq.n	1204a <net_key_set+0xa6>
   12040:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
   12044:	4293      	cmp	r3, r2
   12046:	d137      	bne.n	120b8 <net_key_set+0x114>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   12048:	2001      	movs	r0, #1
			sub = &bt_mesh.sub[i];
   1204a:	25e4      	movs	r5, #228	; 0xe4
   1204c:	4345      	muls	r5, r0
	sub->kr_flag = key.kr_flag;
   1204e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	sub->net_idx = net_idx;
   12052:	1972      	adds	r2, r6, r5
	sub->kr_flag = key.kr_flag;
   12054:	f3c3 0100 	ubfx	r1, r3, #0, #1
	memcpy(sub->keys[0].net, &key.val[0], 16);
   12058:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
	sub->kr_phase = key.kr_phase;
   1205c:	f3c3 0346 	ubfx	r3, r3, #1, #7
	sub->kr_flag = key.kr_flag;
   12060:	f882 10c2 	strb.w	r1, [r2, #194]	; 0xc2
	sub->net_idx = net_idx;
   12064:	f8a2 70c0 	strh.w	r7, [r2, #192]	; 0xc0
	sub->kr_phase = key.kr_phase;
   12068:	f882 30c3 	strb.w	r3, [r2, #195]	; 0xc3
	memcpy(sub->keys[0].net, &key.val[0], 16);
   1206c:	f10d 0105 	add.w	r1, sp, #5
   12070:	2210      	movs	r2, #16
   12072:	4430      	add	r0, r6
   12074:	f00d fac8 	bl	1f608 <memcpy>
	memcpy(sub->keys[1].net, &key.val[1], 16);
   12078:	f205 102d 	addw	r0, r5, #301	; 0x12d
   1207c:	2210      	movs	r2, #16
   1207e:	f10d 0115 	add.w	r1, sp, #21
   12082:	4430      	add	r0, r6
   12084:	e015      	b.n	120b2 <net_key_set+0x10e>
		sub->kr_flag = key.kr_flag;
   12086:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1208a:	f3c3 0300 	ubfx	r3, r3, #0, #1
   1208e:	77ab      	strb	r3, [r5, #30]
		sub->kr_phase = key.kr_phase;
   12090:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12094:	f3c3 0346 	ubfx	r3, r3, #1, #7
		memcpy(sub->keys[0].net, &key.val[0], 16);
   12098:	2210      	movs	r2, #16
   1209a:	f10d 0105 	add.w	r1, sp, #5
		sub->kr_phase = key.kr_phase;
   1209e:	77eb      	strb	r3, [r5, #31]
		memcpy(sub->keys[0].net, &key.val[0], 16);
   120a0:	f105 0030 	add.w	r0, r5, #48	; 0x30
   120a4:	f00d fab0 	bl	1f608 <memcpy>
		memcpy(sub->keys[1].net, &key.val[1], 16);
   120a8:	2210      	movs	r2, #16
   120aa:	f10d 0115 	add.w	r1, sp, #21
   120ae:	f105 0089 	add.w	r0, r5, #137	; 0x89
	memcpy(sub->keys[1].net, &key.val[1], 16);
   120b2:	f00d faa9 	bl	1f608 <memcpy>
	return 0;
   120b6:	e79b      	b.n	11ff0 <net_key_set+0x4c>
		BT_ERR("No space to allocate a new subnet");
   120b8:	2301      	movs	r3, #1
   120ba:	f04f 0100 	mov.w	r1, #0
   120be:	f363 0107 	bfi	r1, r3, #0, #8
   120c2:	4a06      	ldr	r2, [pc, #24]	; (120dc <net_key_set+0x138>)
   120c4:	4b06      	ldr	r3, [pc, #24]	; (120e0 <net_key_set+0x13c>)
   120c6:	480a      	ldr	r0, [pc, #40]	; (120f0 <net_key_set+0x14c>)
   120c8:	1a9b      	subs	r3, r3, r2
   120ca:	08db      	lsrs	r3, r3, #3
   120cc:	f363 118f 	bfi	r1, r3, #6, #10
   120d0:	f00c f9b7 	bl	1e442 <log_0>
		return -ENOMEM;
   120d4:	f06f 040b 	mvn.w	r4, #11
   120d8:	e78a      	b.n	11ff0 <net_key_set+0x4c>
   120da:	bf00      	nop
   120dc:	000233ec 	.word	0x000233ec
   120e0:	000234cc 	.word	0x000234cc
   120e4:	00027132 	.word	0x00027132
   120e8:	00027154 	.word	0x00027154
   120ec:	20007924 	.word	0x20007924
   120f0:	0002716c 	.word	0x0002716c

000120f4 <store_app_key>:
{
   120f4:	b510      	push	{r4, lr}
   120f6:	b08e      	sub	sp, #56	; 0x38
	key.net_idx = app->net_idx;
   120f8:	8803      	ldrh	r3, [r0, #0]
   120fa:	f8ad 3014 	strh.w	r3, [sp, #20]
{
   120fe:	4604      	mov	r4, r0
	key.updated = app->updated;
   12100:	7903      	ldrb	r3, [r0, #4]
   12102:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
   12106:	1d81      	adds	r1, r0, #6
   12108:	2210      	movs	r2, #16
   1210a:	f10d 0017 	add.w	r0, sp, #23
   1210e:	f00d fa7b 	bl	1f608 <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
   12112:	2210      	movs	r2, #16
   12114:	f104 0117 	add.w	r1, r4, #23
   12118:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1211c:	f00d fa74 	bl	1f608 <memcpy>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app->app_idx);
   12120:	4a10      	ldr	r2, [pc, #64]	; (12164 <store_app_key+0x70>)
   12122:	8863      	ldrh	r3, [r4, #2]
   12124:	2114      	movs	r1, #20
   12126:	4668      	mov	r0, sp
   12128:	f7f1 f8e4 	bl	32f4 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   1212c:	2223      	movs	r2, #35	; 0x23
   1212e:	a905      	add	r1, sp, #20
   12130:	4668      	mov	r0, sp
   12132:	f7f2 fa27 	bl	4584 <settings_save_one>
	if (err) {
   12136:	b190      	cbz	r0, 1215e <store_app_key+0x6a>
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
   12138:	2301      	movs	r3, #1
   1213a:	f04f 0400 	mov.w	r4, #0
   1213e:	4a0a      	ldr	r2, [pc, #40]	; (12168 <store_app_key+0x74>)
   12140:	f363 0407 	bfi	r4, r3, #0, #8
   12144:	4b09      	ldr	r3, [pc, #36]	; (1216c <store_app_key+0x78>)
   12146:	1a9b      	subs	r3, r3, r2
   12148:	08db      	lsrs	r3, r3, #3
   1214a:	4668      	mov	r0, sp
   1214c:	f363 148f 	bfi	r4, r3, #6, #10
   12150:	f7f1 fe6a 	bl	3e28 <log_strdup>
   12154:	4622      	mov	r2, r4
   12156:	4601      	mov	r1, r0
   12158:	4805      	ldr	r0, [pc, #20]	; (12170 <store_app_key+0x7c>)
   1215a:	f00c f97f 	bl	1e45c <log_1>
}
   1215e:	b00e      	add	sp, #56	; 0x38
   12160:	bd10      	pop	{r4, pc}
   12162:	bf00      	nop
   12164:	00027228 	.word	0x00027228
   12168:	000233ec 	.word	0x000233ec
   1216c:	000234cc 	.word	0x000234cc
   12170:	0002723a 	.word	0x0002723a

00012174 <mod_set>:
	if (argc < 2) {
   12174:	2901      	cmp	r1, #1
{
   12176:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1217a:	4605      	mov	r5, r0
   1217c:	4616      	mov	r6, r2
   1217e:	4698      	mov	r8, r3
	if (argc < 2) {
   12180:	dc0e      	bgt.n	121a0 <mod_set+0x2c>
		BT_ERR("Too small argc (%d)", argc);
   12182:	2301      	movs	r3, #1
   12184:	f04f 0200 	mov.w	r2, #0
   12188:	f363 0207 	bfi	r2, r3, #0, #8
   1218c:	4860      	ldr	r0, [pc, #384]	; (12310 <mod_set+0x19c>)
   1218e:	4b61      	ldr	r3, [pc, #388]	; (12314 <mod_set+0x1a0>)
   12190:	1a1b      	subs	r3, r3, r0
   12192:	08db      	lsrs	r3, r3, #3
   12194:	4860      	ldr	r0, [pc, #384]	; (12318 <mod_set+0x1a4>)
   12196:	f363 128f 	bfi	r2, r3, #6, #10
	BT_WARN("Unknown module key %s", argv[1]);
   1219a:	f00c f95f 	bl	1e45c <log_1>
   1219e:	e01e      	b.n	121de <mod_set+0x6a>
	mod_key = strtol(argv[0], NULL, 16);
   121a0:	2210      	movs	r2, #16
   121a2:	2100      	movs	r1, #0
   121a4:	6830      	ldr	r0, [r6, #0]
   121a6:	f00d f954 	bl	1f452 <strtol>
	elem_idx = mod_key >> 8;
   121aa:	f3c0 2707 	ubfx	r7, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   121ae:	b2c4      	uxtb	r4, r0
   121b0:	4622      	mov	r2, r4
   121b2:	4628      	mov	r0, r5
   121b4:	4639      	mov	r1, r7
   121b6:	f7fc fa31 	bl	e61c <bt_mesh_model_get>
	if (!mod) {
   121ba:	4605      	mov	r5, r0
   121bc:	b990      	cbnz	r0, 121e4 <mod_set+0x70>
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
   121be:	2201      	movs	r2, #1
   121c0:	f04f 0300 	mov.w	r3, #0
   121c4:	f362 0307 	bfi	r3, r2, #0, #8
   121c8:	4951      	ldr	r1, [pc, #324]	; (12310 <mod_set+0x19c>)
   121ca:	4a52      	ldr	r2, [pc, #328]	; (12314 <mod_set+0x1a0>)
   121cc:	4853      	ldr	r0, [pc, #332]	; (1231c <mod_set+0x1a8>)
   121ce:	1a52      	subs	r2, r2, r1
   121d0:	08d2      	lsrs	r2, r2, #3
   121d2:	f362 138f 	bfi	r3, r2, #6, #10
   121d6:	4639      	mov	r1, r7
   121d8:	4622      	mov	r2, r4
   121da:	f00c f953 	bl	1e484 <log_2>
	return -ENOENT;
   121de:	f06f 0401 	mvn.w	r4, #1
   121e2:	e00c      	b.n	121fe <mod_set+0x8a>
	if (!strcmp(argv[1], "bind")) {
   121e4:	494e      	ldr	r1, [pc, #312]	; (12320 <mod_set+0x1ac>)
   121e6:	6870      	ldr	r0, [r6, #4]
   121e8:	f00d f9db 	bl	1f5a2 <strcmp>
   121ec:	bb18      	cbnz	r0, 12236 <mod_set+0xc2>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   121ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121f2:	60eb      	str	r3, [r5, #12]
	if (settings_val_get_len_cb(val_ctx) == 0) {
   121f4:	4640      	mov	r0, r8
   121f6:	f00d f895 	bl	1f324 <settings_val_get_len_cb>
   121fa:	b920      	cbnz	r0, 12206 <mod_set+0x92>
		return 0;
   121fc:	2400      	movs	r4, #0
}
   121fe:	4620      	mov	r0, r4
   12200:	b002      	add	sp, #8
   12202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = settings_val_read_cb(val_ctx, mod->keys, sizeof(mod->keys));
   12206:	2204      	movs	r2, #4
   12208:	f105 010c 	add.w	r1, r5, #12
	len = settings_val_read_cb(val_ctx, mod->groups, sizeof(mod->groups));
   1220c:	4640      	mov	r0, r8
   1220e:	f00d f86c 	bl	1f2ea <settings_val_read_cb>
	if (len < 0) {
   12212:	1e04      	subs	r4, r0, #0
   12214:	daf2      	bge.n	121fc <mod_set+0x88>
		BT_ERR("Failed to read value (err %d)", len);
   12216:	2301      	movs	r3, #1
   12218:	f04f 0200 	mov.w	r2, #0
   1221c:	f363 0207 	bfi	r2, r3, #0, #8
   12220:	493b      	ldr	r1, [pc, #236]	; (12310 <mod_set+0x19c>)
   12222:	4b3c      	ldr	r3, [pc, #240]	; (12314 <mod_set+0x1a0>)
   12224:	483f      	ldr	r0, [pc, #252]	; (12324 <mod_set+0x1b0>)
   12226:	1a5b      	subs	r3, r3, r1
   12228:	08db      	lsrs	r3, r3, #3
   1222a:	f363 128f 	bfi	r2, r3, #6, #10
   1222e:	4621      	mov	r1, r4
   12230:	f00c f914 	bl	1e45c <log_1>
		return len;
   12234:	e7e3      	b.n	121fe <mod_set+0x8a>
	if (!strcmp(argv[1], "sub")) {
   12236:	493c      	ldr	r1, [pc, #240]	; (12328 <mod_set+0x1b4>)
   12238:	6870      	ldr	r0, [r6, #4]
   1223a:	f00d f9b2 	bl	1f5a2 <strcmp>
   1223e:	4601      	mov	r1, r0
   12240:	b960      	cbnz	r0, 1225c <mod_set+0xe8>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   12242:	3510      	adds	r5, #16
   12244:	2204      	movs	r2, #4
   12246:	4628      	mov	r0, r5
   12248:	f00d fa08 	bl	1f65c <memset>
	if (settings_val_get_len_cb(val_ctx) == 0) {
   1224c:	4640      	mov	r0, r8
   1224e:	f00d f869 	bl	1f324 <settings_val_get_len_cb>
   12252:	2800      	cmp	r0, #0
   12254:	d0d2      	beq.n	121fc <mod_set+0x88>
	len = settings_val_read_cb(val_ctx, mod->groups, sizeof(mod->groups));
   12256:	2204      	movs	r2, #4
   12258:	4629      	mov	r1, r5
   1225a:	e7d7      	b.n	1220c <mod_set+0x98>
	if (!strcmp(argv[1], "pub")) {
   1225c:	4933      	ldr	r1, [pc, #204]	; (1232c <mod_set+0x1b8>)
   1225e:	6870      	ldr	r0, [r6, #4]
   12260:	f00d f99f 	bl	1f5a2 <strcmp>
   12264:	4604      	mov	r4, r0
   12266:	2800      	cmp	r0, #0
   12268:	d144      	bne.n	122f4 <mod_set+0x180>
	if (!mod->pub) {
   1226a:	68ab      	ldr	r3, [r5, #8]
   1226c:	b983      	cbnz	r3, 12290 <mod_set+0x11c>
		BT_WARN("Model has no publication context!");
   1226e:	2302      	movs	r3, #2
   12270:	f04f 0100 	mov.w	r1, #0
   12274:	f363 0107 	bfi	r1, r3, #0, #8
   12278:	4a25      	ldr	r2, [pc, #148]	; (12310 <mod_set+0x19c>)
   1227a:	4b26      	ldr	r3, [pc, #152]	; (12314 <mod_set+0x1a0>)
   1227c:	482c      	ldr	r0, [pc, #176]	; (12330 <mod_set+0x1bc>)
   1227e:	1a9b      	subs	r3, r3, r2
   12280:	08db      	lsrs	r3, r3, #3
   12282:	f363 118f 	bfi	r1, r3, #6, #10
   12286:	f00c f8dc 	bl	1e442 <log_0>
		return -EINVAL;
   1228a:	f06f 0415 	mvn.w	r4, #21
   1228e:	e7b6      	b.n	121fe <mod_set+0x8a>
	if (settings_val_get_len_cb(val_ctx) == 0) {
   12290:	4640      	mov	r0, r8
   12292:	f00d f847 	bl	1f324 <settings_val_get_len_cb>
   12296:	b930      	cbnz	r0, 122a6 <mod_set+0x132>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   12298:	68ab      	ldr	r3, [r5, #8]
		mod->pub->ttl = 0;
   1229a:	689a      	ldr	r2, [r3, #8]
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   1229c:	605c      	str	r4, [r3, #4]
		mod->pub->ttl = 0;
   1229e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
   122a2:	609a      	str	r2, [r3, #8]
		return 0;
   122a4:	e7ab      	b.n	121fe <mod_set+0x8a>
	err = mesh_x_set(val_ctx, &pub, sizeof(pub));
   122a6:	2208      	movs	r2, #8
   122a8:	4669      	mov	r1, sp
   122aa:	4640      	mov	r0, r8
   122ac:	f7ff fd5c 	bl	11d68 <mesh_x_set>
	if (err) {
   122b0:	4604      	mov	r4, r0
   122b2:	b170      	cbz	r0, 122d2 <mod_set+0x15e>
		BT_ERR("Failed to set \'model-pub\'");
   122b4:	2301      	movs	r3, #1
   122b6:	f04f 0100 	mov.w	r1, #0
   122ba:	f363 0107 	bfi	r1, r3, #0, #8
   122be:	4a14      	ldr	r2, [pc, #80]	; (12310 <mod_set+0x19c>)
   122c0:	4b14      	ldr	r3, [pc, #80]	; (12314 <mod_set+0x1a0>)
   122c2:	481c      	ldr	r0, [pc, #112]	; (12334 <mod_set+0x1c0>)
   122c4:	1a9b      	subs	r3, r3, r2
   122c6:	08db      	lsrs	r3, r3, #3
   122c8:	f363 118f 	bfi	r1, r3, #6, #10
   122cc:	f00c f8b9 	bl	1e442 <log_0>
		return err;
   122d0:	e795      	b.n	121fe <mod_set+0x8a>
	mod->pub->addr = pub.addr;
   122d2:	68aa      	ldr	r2, [r5, #8]
   122d4:	9b00      	ldr	r3, [sp, #0]
   122d6:	6053      	str	r3, [r2, #4]
	mod->pub->ttl = pub.ttl;
   122d8:	9901      	ldr	r1, [sp, #4]
   122da:	6893      	ldr	r3, [r2, #8]
   122dc:	f021 416f 	bic.w	r1, r1, #4009754624	; 0xef000000
   122e0:	f003 436f 	and.w	r3, r3, #4009754624	; 0xef000000
   122e4:	430b      	orrs	r3, r1
   122e6:	6093      	str	r3, [r2, #8]
	mod->pub->count = 0;
   122e8:	f3c3 6307 	ubfx	r3, r3, #24, #8
   122ec:	f360 1347 	bfi	r3, r0, #5, #3
   122f0:	72d3      	strb	r3, [r2, #11]
		return mod_set_pub(mod, val_ctx);
   122f2:	e784      	b.n	121fe <mod_set+0x8a>
	BT_WARN("Unknown module key %s", argv[1]);
   122f4:	2302      	movs	r3, #2
   122f6:	f04f 0200 	mov.w	r2, #0
   122fa:	f363 0207 	bfi	r2, r3, #0, #8
   122fe:	4904      	ldr	r1, [pc, #16]	; (12310 <mod_set+0x19c>)
   12300:	4b04      	ldr	r3, [pc, #16]	; (12314 <mod_set+0x1a0>)
   12302:	480d      	ldr	r0, [pc, #52]	; (12338 <mod_set+0x1c4>)
   12304:	1a5b      	subs	r3, r3, r1
   12306:	08db      	lsrs	r3, r3, #3
   12308:	f363 128f 	bfi	r2, r3, #6, #10
   1230c:	6871      	ldr	r1, [r6, #4]
   1230e:	e744      	b.n	1219a <mod_set+0x26>
   12310:	000233ec 	.word	0x000233ec
   12314:	000234cc 	.word	0x000234cc
   12318:	00027090 	.word	0x00027090
   1231c:	000270a4 	.word	0x000270a4
   12320:	000270d3 	.word	0x000270d3
   12324:	0002704e 	.word	0x0002704e
   12328:	000270d8 	.word	0x000270d8
   1232c:	000270dc 	.word	0x000270dc
   12330:	000270e0 	.word	0x000270e0
   12334:	00027102 	.word	0x00027102
   12338:	0002711c 	.word	0x0002711c

0001233c <seq_set>:
{
   1233c:	b513      	push	{r0, r1, r4, lr}
	if (settings_val_get_len_cb(val_ctx) == 0) {
   1233e:	4610      	mov	r0, r2
{
   12340:	4614      	mov	r4, r2
	if (settings_val_get_len_cb(val_ctx) == 0) {
   12342:	f00c ffef 	bl	1f324 <settings_val_get_len_cb>
   12346:	b928      	cbnz	r0, 12354 <seq_set+0x18>
		bt_mesh.seq = 0U;
   12348:	4b15      	ldr	r3, [pc, #84]	; (123a0 <seq_set+0x64>)
		return 0;
   1234a:	4604      	mov	r4, r0
		bt_mesh.seq = 0U;
   1234c:	6058      	str	r0, [r3, #4]
}
   1234e:	4620      	mov	r0, r4
   12350:	b002      	add	sp, #8
   12352:	bd10      	pop	{r4, pc}
	err = mesh_x_set(val_ctx, &seq, sizeof(seq));
   12354:	4620      	mov	r0, r4
   12356:	2203      	movs	r2, #3
   12358:	a901      	add	r1, sp, #4
   1235a:	f7ff fd05 	bl	11d68 <mesh_x_set>
	if (err) {
   1235e:	4604      	mov	r4, r0
   12360:	b170      	cbz	r0, 12380 <seq_set+0x44>
		BT_ERR("Failed to set \'seq\'");
   12362:	2301      	movs	r3, #1
   12364:	f04f 0100 	mov.w	r1, #0
   12368:	f363 0107 	bfi	r1, r3, #0, #8
   1236c:	4a0d      	ldr	r2, [pc, #52]	; (123a4 <seq_set+0x68>)
   1236e:	4b0e      	ldr	r3, [pc, #56]	; (123a8 <seq_set+0x6c>)
   12370:	480e      	ldr	r0, [pc, #56]	; (123ac <seq_set+0x70>)
   12372:	1a9b      	subs	r3, r3, r2
   12374:	08db      	lsrs	r3, r3, #3
   12376:	f363 118f 	bfi	r1, r3, #6, #10
   1237a:	f00c f862 	bl	1e442 <log_0>
		return err;
   1237e:	e7e6      	b.n	1234e <seq_set+0x12>
		       ((u32_t)seq.val[2] << 16));
   12380:	f89d 3006 	ldrb.w	r3, [sp, #6]
	bt_mesh.seq = ((u32_t)seq.val[0] | ((u32_t)seq.val[1] << 8) |
   12384:	f89d 2005 	ldrb.w	r2, [sp, #5]
		       ((u32_t)seq.val[2] << 16));
   12388:	041b      	lsls	r3, r3, #16
	bt_mesh.seq = ((u32_t)seq.val[0] | ((u32_t)seq.val[1] << 8) |
   1238a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1238e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   12392:	4313      	orrs	r3, r2
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
   12394:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
   12398:	4a01      	ldr	r2, [pc, #4]	; (123a0 <seq_set+0x64>)
   1239a:	337f      	adds	r3, #127	; 0x7f
   1239c:	6053      	str	r3, [r2, #4]
	return 0;
   1239e:	e7d6      	b.n	1234e <seq_set+0x12>
   123a0:	20007924 	.word	0x20007924
   123a4:	000233ec 	.word	0x000233ec
   123a8:	000234cc 	.word	0x000234cc
   123ac:	00027214 	.word	0x00027214

000123b0 <cfg_set>:
{
   123b0:	b538      	push	{r3, r4, r5, lr}
   123b2:	4614      	mov	r4, r2
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   123b4:	f7ff f9a0 	bl	116f8 <bt_mesh_cfg_get>
	if (!cfg) {
   123b8:	b308      	cbz	r0, 123fe <cfg_set+0x4e>
	if (settings_val_get_len_cb(val_ctx) == 0) {
   123ba:	4620      	mov	r0, r4
   123bc:	f00c ffb2 	bl	1f324 <settings_val_get_len_cb>
   123c0:	4d10      	ldr	r5, [pc, #64]	; (12404 <cfg_set+0x54>)
   123c2:	b918      	cbnz	r0, 123cc <cfg_set+0x1c>
		stored_cfg.valid = false;
   123c4:	7028      	strb	r0, [r5, #0]
		return 0;
   123c6:	4604      	mov	r4, r0
}
   123c8:	4620      	mov	r0, r4
   123ca:	bd38      	pop	{r3, r4, r5, pc}
	err = mesh_x_set(val_ctx, &stored_cfg.cfg, sizeof(stored_cfg.cfg));
   123cc:	4620      	mov	r0, r4
   123ce:	2207      	movs	r2, #7
   123d0:	1c69      	adds	r1, r5, #1
   123d2:	f7ff fcc9 	bl	11d68 <mesh_x_set>
	if (err) {
   123d6:	4604      	mov	r4, r0
   123d8:	b170      	cbz	r0, 123f8 <cfg_set+0x48>
		BT_ERR("Failed to set \'cfg\'");
   123da:	2301      	movs	r3, #1
   123dc:	f04f 0100 	mov.w	r1, #0
   123e0:	f363 0107 	bfi	r1, r3, #0, #8
   123e4:	4a08      	ldr	r2, [pc, #32]	; (12408 <cfg_set+0x58>)
   123e6:	4b09      	ldr	r3, [pc, #36]	; (1240c <cfg_set+0x5c>)
   123e8:	4809      	ldr	r0, [pc, #36]	; (12410 <cfg_set+0x60>)
   123ea:	1a9b      	subs	r3, r3, r2
   123ec:	08db      	lsrs	r3, r3, #3
   123ee:	f363 118f 	bfi	r1, r3, #6, #10
   123f2:	f00c f826 	bl	1e442 <log_0>
		return err;
   123f6:	e7e7      	b.n	123c8 <cfg_set+0x18>
	stored_cfg.valid = true;
   123f8:	2301      	movs	r3, #1
   123fa:	702b      	strb	r3, [r5, #0]
	return 0;
   123fc:	e7e4      	b.n	123c8 <cfg_set+0x18>
		return -ENOENT;
   123fe:	f06f 0401 	mvn.w	r4, #1
   12402:	e7e1      	b.n	123c8 <cfg_set+0x18>
   12404:	200022ec 	.word	0x200022ec
   12408:	000233ec 	.word	0x000233ec
   1240c:	000234cc 	.word	0x000234cc
   12410:	00026f4b 	.word	0x00026f4b

00012414 <net_set>:
{
   12414:	b530      	push	{r4, r5, lr}
	if (settings_val_get_len_cb(val_ctx) == 0) {
   12416:	4610      	mov	r0, r2
{
   12418:	b087      	sub	sp, #28
   1241a:	4615      	mov	r5, r2
	if (settings_val_get_len_cb(val_ctx) == 0) {
   1241c:	f00c ff82 	bl	1f324 <settings_val_get_len_cb>
   12420:	4604      	mov	r4, r0
   12422:	b948      	cbnz	r0, 12438 <net_set+0x24>
		bt_mesh_comp_unprovision();
   12424:	f7fc f978 	bl	e718 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
   12428:	2210      	movs	r2, #16
   1242a:	4621      	mov	r1, r4
   1242c:	4813      	ldr	r0, [pc, #76]	; (1247c <net_set+0x68>)
   1242e:	f00d f915 	bl	1f65c <memset>
}
   12432:	4620      	mov	r0, r4
   12434:	b007      	add	sp, #28
   12436:	bd30      	pop	{r4, r5, pc}
	err = mesh_x_set(val_ctx, &net, sizeof(net));
   12438:	2212      	movs	r2, #18
   1243a:	a901      	add	r1, sp, #4
   1243c:	4628      	mov	r0, r5
   1243e:	f7ff fc93 	bl	11d68 <mesh_x_set>
	if (err) {
   12442:	4604      	mov	r4, r0
   12444:	b170      	cbz	r0, 12464 <net_set+0x50>
		BT_ERR("Failed to set \'net\'");
   12446:	2301      	movs	r3, #1
   12448:	f04f 0100 	mov.w	r1, #0
   1244c:	f363 0107 	bfi	r1, r3, #0, #8
   12450:	4a0b      	ldr	r2, [pc, #44]	; (12480 <net_set+0x6c>)
   12452:	4b0c      	ldr	r3, [pc, #48]	; (12484 <net_set+0x70>)
   12454:	480c      	ldr	r0, [pc, #48]	; (12488 <net_set+0x74>)
   12456:	1a9b      	subs	r3, r3, r2
   12458:	08db      	lsrs	r3, r3, #3
   1245a:	f363 118f 	bfi	r1, r3, #6, #10
   1245e:	f00b fff0 	bl	1e442 <log_0>
		return err;
   12462:	e7e6      	b.n	12432 <net_set+0x1e>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
   12464:	2210      	movs	r2, #16
   12466:	f10d 0106 	add.w	r1, sp, #6
   1246a:	4804      	ldr	r0, [pc, #16]	; (1247c <net_set+0x68>)
   1246c:	f00d f8cc 	bl	1f608 <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
   12470:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   12474:	f7fc f93a 	bl	e6ec <bt_mesh_comp_provision>
	return 0;
   12478:	e7db      	b.n	12432 <net_set+0x1e>
   1247a:	bf00      	nop
   1247c:	20007968 	.word	0x20007968
   12480:	000233ec 	.word	0x000233ec
   12484:	000234cc 	.word	0x000234cc
   12488:	0002718e 	.word	0x0002718e

0001248c <mesh_set>:
{
   1248c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (argc < 1) {
   12490:	1e07      	subs	r7, r0, #0
{
   12492:	460e      	mov	r6, r1
   12494:	4690      	mov	r8, r2
	if (argc < 1) {
   12496:	dc11      	bgt.n	124bc <mesh_set+0x30>
		BT_ERR("Insufficient number of arguments");
   12498:	2301      	movs	r3, #1
   1249a:	f04f 0100 	mov.w	r1, #0
   1249e:	f363 0107 	bfi	r1, r3, #0, #8
   124a2:	4a1b      	ldr	r2, [pc, #108]	; (12510 <mesh_set+0x84>)
   124a4:	4b1b      	ldr	r3, [pc, #108]	; (12514 <mesh_set+0x88>)
   124a6:	481c      	ldr	r0, [pc, #112]	; (12518 <mesh_set+0x8c>)
   124a8:	1a9b      	subs	r3, r3, r2
   124aa:	08db      	lsrs	r3, r3, #3
   124ac:	f363 118f 	bfi	r1, r3, #6, #10
   124b0:	f00b ffc7 	bl	1e442 <log_0>
		return -EINVAL;
   124b4:	f06f 0015 	mvn.w	r0, #21
}
   124b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!strcmp(settings[i].name, argv[0])) {
   124bc:	4d17      	ldr	r5, [pc, #92]	; (1251c <mesh_set+0x90>)
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
   124be:	2400      	movs	r4, #0
		if (!strcmp(settings[i].name, argv[0])) {
   124c0:	6831      	ldr	r1, [r6, #0]
   124c2:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   124c6:	f00d f86c 	bl	1f5a2 <strcmp>
   124ca:	b940      	cbnz	r0, 124de <mesh_set+0x52>
			return settings[i].func(argc, argv, val_ctx);
   124cc:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   124d0:	4642      	mov	r2, r8
   124d2:	6863      	ldr	r3, [r4, #4]
   124d4:	1d31      	adds	r1, r6, #4
   124d6:	1e78      	subs	r0, r7, #1
}
   124d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return settings[i].func(argc, argv, val_ctx);
   124dc:	4718      	bx	r3
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
   124de:	3401      	adds	r4, #1
   124e0:	2c0a      	cmp	r4, #10
   124e2:	d1ed      	bne.n	124c0 <mesh_set+0x34>
	BT_WARN("No matching handler for key %s", log_strdup(argv[0]));
   124e4:	2302      	movs	r3, #2
   124e6:	f04f 0400 	mov.w	r4, #0
   124ea:	4a09      	ldr	r2, [pc, #36]	; (12510 <mesh_set+0x84>)
   124ec:	6830      	ldr	r0, [r6, #0]
   124ee:	f363 0407 	bfi	r4, r3, #0, #8
   124f2:	4b08      	ldr	r3, [pc, #32]	; (12514 <mesh_set+0x88>)
   124f4:	1a9b      	subs	r3, r3, r2
   124f6:	08db      	lsrs	r3, r3, #3
   124f8:	f363 148f 	bfi	r4, r3, #6, #10
   124fc:	f7f1 fc94 	bl	3e28 <log_strdup>
   12500:	4622      	mov	r2, r4
   12502:	4601      	mov	r1, r0
   12504:	4806      	ldr	r0, [pc, #24]	; (12520 <mesh_set+0x94>)
   12506:	f00b ffa9 	bl	1e45c <log_1>
	return -ENOENT;
   1250a:	f06f 0001 	mvn.w	r0, #1
   1250e:	e7d3      	b.n	124b8 <mesh_set+0x2c>
   12510:	000233ec 	.word	0x000233ec
   12514:	000234cc 	.word	0x000234cc
   12518:	000256ae 	.word	0x000256ae
   1251c:	00023d80 	.word	0x00023d80
   12520:	0002702f 	.word	0x0002702f

00012524 <store_net_key>:
{
   12524:	b510      	push	{r4, lr}
   12526:	b08e      	sub	sp, #56	; 0x38
   12528:	4604      	mov	r4, r0
	memcpy(&key.val[0], sub->keys[0].net, 16);
   1252a:	f100 0130 	add.w	r1, r0, #48	; 0x30
   1252e:	2210      	movs	r2, #16
   12530:	f10d 0015 	add.w	r0, sp, #21
   12534:	f00d f868 	bl	1f608 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
   12538:	2210      	movs	r2, #16
   1253a:	f104 0189 	add.w	r1, r4, #137	; 0x89
   1253e:	f10d 0025 	add.w	r0, sp, #37	; 0x25
   12542:	f00d f861 	bl	1f608 <memcpy>
	key.kr_flag = sub->kr_flag;
   12546:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1254a:	7fa2      	ldrb	r2, [r4, #30]
   1254c:	f362 0300 	bfi	r3, r2, #0, #1
	key.kr_phase = sub->kr_phase;
   12550:	7fe2      	ldrb	r2, [r4, #31]
   12552:	f362 0347 	bfi	r3, r2, #1, #7
   12556:	f88d 3014 	strb.w	r3, [sp, #20]
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", sub->net_idx);
   1255a:	4a0e      	ldr	r2, [pc, #56]	; (12594 <store_net_key+0x70>)
   1255c:	8ba3      	ldrh	r3, [r4, #28]
   1255e:	2114      	movs	r1, #20
   12560:	4668      	mov	r0, sp
   12562:	f7f0 fec7 	bl	32f4 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   12566:	2221      	movs	r2, #33	; 0x21
   12568:	a905      	add	r1, sp, #20
   1256a:	4668      	mov	r0, sp
   1256c:	f7f2 f80a 	bl	4584 <settings_save_one>
	if (err) {
   12570:	b168      	cbz	r0, 1258e <store_net_key+0x6a>
		BT_ERR("Failed to store NetKey value");
   12572:	2301      	movs	r3, #1
   12574:	f04f 0100 	mov.w	r1, #0
   12578:	f363 0107 	bfi	r1, r3, #0, #8
   1257c:	4a06      	ldr	r2, [pc, #24]	; (12598 <store_net_key+0x74>)
   1257e:	4b07      	ldr	r3, [pc, #28]	; (1259c <store_net_key+0x78>)
   12580:	4807      	ldr	r0, [pc, #28]	; (125a0 <store_net_key+0x7c>)
   12582:	1a9b      	subs	r3, r3, r2
   12584:	08db      	lsrs	r3, r3, #3
   12586:	f363 118f 	bfi	r1, r3, #6, #10
   1258a:	f00b ff5a 	bl	1e442 <log_0>
}
   1258e:	b00e      	add	sp, #56	; 0x38
   12590:	bd10      	pop	{r4, pc}
   12592:	bf00      	nop
   12594:	0002725a 	.word	0x0002725a
   12598:	000233ec 	.word	0x000233ec
   1259c:	000234cc 	.word	0x000234cc
   125a0:	0002726c 	.word	0x0002726c

000125a4 <clear_net_key>:
{
   125a4:	b510      	push	{r4, lr}
   125a6:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   125a8:	4603      	mov	r3, r0
{
   125aa:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   125ac:	4a0c      	ldr	r2, [pc, #48]	; (125e0 <clear_net_key+0x3c>)
   125ae:	2114      	movs	r1, #20
   125b0:	a801      	add	r0, sp, #4
   125b2:	f7f0 fe9f 	bl	32f4 <snprintk>
	err = settings_delete(path);
   125b6:	a801      	add	r0, sp, #4
   125b8:	f00c fe5a 	bl	1f270 <settings_delete>
	if (err) {
   125bc:	b170      	cbz	r0, 125dc <clear_net_key+0x38>
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
   125be:	2301      	movs	r3, #1
   125c0:	f04f 0200 	mov.w	r2, #0
   125c4:	f363 0207 	bfi	r2, r3, #0, #8
   125c8:	4906      	ldr	r1, [pc, #24]	; (125e4 <clear_net_key+0x40>)
   125ca:	4b07      	ldr	r3, [pc, #28]	; (125e8 <clear_net_key+0x44>)
   125cc:	4807      	ldr	r0, [pc, #28]	; (125ec <clear_net_key+0x48>)
   125ce:	1a5b      	subs	r3, r3, r1
   125d0:	08db      	lsrs	r3, r3, #3
   125d2:	f363 128f 	bfi	r2, r3, #6, #10
   125d6:	4621      	mov	r1, r4
   125d8:	f00b ff40 	bl	1e45c <log_1>
}
   125dc:	b006      	add	sp, #24
   125de:	bd10      	pop	{r4, pc}
   125e0:	0002725a 	.word	0x0002725a
   125e4:	000233ec 	.word	0x000233ec
   125e8:	000234cc 	.word	0x000234cc
   125ec:	00026f82 	.word	0x00026f82

000125f0 <clear_app_key>:
{
   125f0:	b510      	push	{r4, lr}
   125f2:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   125f4:	4603      	mov	r3, r0
{
   125f6:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   125f8:	4a0c      	ldr	r2, [pc, #48]	; (1262c <clear_app_key+0x3c>)
   125fa:	2114      	movs	r1, #20
   125fc:	a801      	add	r0, sp, #4
   125fe:	f7f0 fe79 	bl	32f4 <snprintk>
	err = settings_delete(path);
   12602:	a801      	add	r0, sp, #4
   12604:	f00c fe34 	bl	1f270 <settings_delete>
	if (err) {
   12608:	b170      	cbz	r0, 12628 <clear_app_key+0x38>
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
   1260a:	2301      	movs	r3, #1
   1260c:	f04f 0200 	mov.w	r2, #0
   12610:	f363 0207 	bfi	r2, r3, #0, #8
   12614:	4906      	ldr	r1, [pc, #24]	; (12630 <clear_app_key+0x40>)
   12616:	4b07      	ldr	r3, [pc, #28]	; (12634 <clear_app_key+0x44>)
   12618:	4807      	ldr	r0, [pc, #28]	; (12638 <clear_app_key+0x48>)
   1261a:	1a5b      	subs	r3, r3, r1
   1261c:	08db      	lsrs	r3, r3, #3
   1261e:	f363 128f 	bfi	r2, r3, #6, #10
   12622:	4621      	mov	r1, r4
   12624:	f00b ff1a 	bl	1e45c <log_1>
}
   12628:	b006      	add	sp, #24
   1262a:	bd10      	pop	{r4, pc}
   1262c:	00027228 	.word	0x00027228
   12630:	000233ec 	.word	0x000233ec
   12634:	000234cc 	.word	0x000234cc
   12638:	00026f5f 	.word	0x00026f5f

0001263c <atomic_test_bit.constprop.15>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1263c:	4b05      	ldr	r3, [pc, #20]	; (12654 <atomic_test_bit.constprop.15+0x18>)
   1263e:	f3bf 8f5b 	dmb	ish
   12642:	681b      	ldr	r3, [r3, #0]
   12644:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   12648:	fa43 f000 	asr.w	r0, r3, r0
}
   1264c:	f000 0001 	and.w	r0, r0, #1
   12650:	4770      	bx	lr
   12652:	bf00      	nop
   12654:	2000792c 	.word	0x2000792c

00012658 <encode_mod_path.constprop.16>:
static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
   12658:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1265a:	4604      	mov	r4, r0
   1265c:	4618      	mov	r0, r3
	u16_t mod_key = (((u16_t)mod->elem_idx << 8) | mod->mod_idx);
   1265e:	7925      	ldrb	r5, [r4, #4]
   12660:	7963      	ldrb	r3, [r4, #5]
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   12662:	9200      	str	r2, [sp, #0]
   12664:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (vnd) {
   12668:	b129      	cbz	r1, 12676 <encode_mod_path.constprop.16+0x1e>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   1266a:	4a04      	ldr	r2, [pc, #16]	; (1267c <encode_mod_path.constprop.16+0x24>)
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   1266c:	2114      	movs	r1, #20
   1266e:	f7f0 fe41 	bl	32f4 <snprintk>
}
   12672:	b003      	add	sp, #12
   12674:	bd30      	pop	{r4, r5, pc}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   12676:	4a02      	ldr	r2, [pc, #8]	; (12680 <encode_mod_path.constprop.16+0x28>)
   12678:	e7f8      	b.n	1266c <encode_mod_path.constprop.16+0x14>
   1267a:	bf00      	nop
   1267c:	00026fa5 	.word	0x00026fa5
   12680:	00026fb5 	.word	0x00026fb5

00012684 <store_pending_mod>:
{
   12684:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!mod->flags) {
   12686:	88c3      	ldrh	r3, [r0, #6]
{
   12688:	b089      	sub	sp, #36	; 0x24
   1268a:	4604      	mov	r4, r0
   1268c:	4617      	mov	r7, r2
	if (!mod->flags) {
   1268e:	2b00      	cmp	r3, #0
   12690:	f000 809f 	beq.w	127d2 <store_pending_mod+0x14e>
	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
   12694:	07d8      	lsls	r0, r3, #31
   12696:	d535      	bpl.n	12704 <store_pending_mod+0x80>
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   12698:	89a2      	ldrh	r2, [r4, #12]
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
   1269a:	f023 0301 	bic.w	r3, r3, #1
   1269e:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   126a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   126a4:	429a      	cmp	r2, r3
			keys[count++] = mod->keys[i];
   126a6:	bf18      	it	ne
   126a8:	f8ad 2004 	strhne.w	r2, [sp, #4]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   126ac:	89e2      	ldrh	r2, [r4, #14]
			keys[count++] = mod->keys[i];
   126ae:	bf14      	ite	ne
   126b0:	2501      	movne	r5, #1
	for (i = 0, count = 0; i < ARRAY_SIZE(mod->keys); i++) {
   126b2:	2500      	moveq	r5, #0
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   126b4:	429a      	cmp	r2, r3
			keys[count++] = mod->keys[i];
   126b6:	bf1c      	itt	ne
   126b8:	ab08      	addne	r3, sp, #32
   126ba:	eb03 0345 	addne.w	r3, r3, r5, lsl #1
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   126be:	4639      	mov	r1, r7
			keys[count++] = mod->keys[i];
   126c0:	bf1c      	itt	ne
   126c2:	f823 2c1c 	strhne.w	r2, [r3, #-28]
   126c6:	3501      	addne	r5, #1
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   126c8:	4a45      	ldr	r2, [pc, #276]	; (127e0 <store_pending_mod+0x15c>)
   126ca:	4620      	mov	r0, r4
   126cc:	ab03      	add	r3, sp, #12
   126ce:	f7ff ffc3 	bl	12658 <encode_mod_path.constprop.16>
	err = settings_save_one(path, keys, count * sizeof(keys[0]));
   126d2:	006a      	lsls	r2, r5, #1
   126d4:	a901      	add	r1, sp, #4
   126d6:	a803      	add	r0, sp, #12
   126d8:	f7f1 ff54 	bl	4584 <settings_save_one>
	if (err) {
   126dc:	b190      	cbz	r0, 12704 <store_pending_mod+0x80>
		BT_ERR("Failed to store %s value", log_strdup(path));
   126de:	2301      	movs	r3, #1
   126e0:	f04f 0500 	mov.w	r5, #0
   126e4:	4a3f      	ldr	r2, [pc, #252]	; (127e4 <store_pending_mod+0x160>)
   126e6:	f363 0507 	bfi	r5, r3, #0, #8
   126ea:	4b3f      	ldr	r3, [pc, #252]	; (127e8 <store_pending_mod+0x164>)
   126ec:	1a9b      	subs	r3, r3, r2
   126ee:	08db      	lsrs	r3, r3, #3
   126f0:	a803      	add	r0, sp, #12
   126f2:	f363 158f 	bfi	r5, r3, #6, #10
   126f6:	f7f1 fb97 	bl	3e28 <log_strdup>
   126fa:	462a      	mov	r2, r5
   126fc:	4601      	mov	r1, r0
   126fe:	483b      	ldr	r0, [pc, #236]	; (127ec <store_pending_mod+0x168>)
   12700:	f00b feac 	bl	1e45c <log_1>
	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
   12704:	88e3      	ldrh	r3, [r4, #6]
   12706:	0799      	lsls	r1, r3, #30
   12708:	d52e      	bpl.n	12768 <store_pending_mod+0xe4>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1270a:	8a25      	ldrh	r5, [r4, #16]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
   1270c:	f023 0302 	bic.w	r3, r3, #2
   12710:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   12712:	b115      	cbz	r5, 1271a <store_pending_mod+0x96>
			groups[count++] = mod->groups[i];
   12714:	f8ad 5004 	strh.w	r5, [sp, #4]
   12718:	2501      	movs	r5, #1
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1271a:	8a63      	ldrh	r3, [r4, #18]
   1271c:	b12b      	cbz	r3, 1272a <store_pending_mod+0xa6>
			groups[count++] = mod->groups[i];
   1271e:	aa08      	add	r2, sp, #32
   12720:	eb02 0245 	add.w	r2, r2, r5, lsl #1
   12724:	3501      	adds	r5, #1
   12726:	f822 3c1c 	strh.w	r3, [r2, #-28]
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
   1272a:	4a31      	ldr	r2, [pc, #196]	; (127f0 <store_pending_mod+0x16c>)
   1272c:	4639      	mov	r1, r7
   1272e:	4620      	mov	r0, r4
   12730:	ab03      	add	r3, sp, #12
   12732:	f7ff ff91 	bl	12658 <encode_mod_path.constprop.16>
	err = settings_save_one(path, groups, count * sizeof(groups[0]));
   12736:	006a      	lsls	r2, r5, #1
   12738:	a901      	add	r1, sp, #4
   1273a:	a803      	add	r0, sp, #12
   1273c:	f7f1 ff22 	bl	4584 <settings_save_one>
	if (err) {
   12740:	b190      	cbz	r0, 12768 <store_pending_mod+0xe4>
		BT_ERR("Failed to store %s value", log_strdup(path));
   12742:	2301      	movs	r3, #1
   12744:	f04f 0500 	mov.w	r5, #0
   12748:	4a26      	ldr	r2, [pc, #152]	; (127e4 <store_pending_mod+0x160>)
   1274a:	f363 0507 	bfi	r5, r3, #0, #8
   1274e:	4b26      	ldr	r3, [pc, #152]	; (127e8 <store_pending_mod+0x164>)
   12750:	1a9b      	subs	r3, r3, r2
   12752:	08db      	lsrs	r3, r3, #3
   12754:	a803      	add	r0, sp, #12
   12756:	f363 158f 	bfi	r5, r3, #6, #10
   1275a:	f7f1 fb65 	bl	3e28 <log_strdup>
   1275e:	462a      	mov	r2, r5
   12760:	4601      	mov	r1, r0
   12762:	4822      	ldr	r0, [pc, #136]	; (127ec <store_pending_mod+0x168>)
   12764:	f00b fe7a 	bl	1e45c <log_1>
	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
   12768:	88e3      	ldrh	r3, [r4, #6]
   1276a:	075a      	lsls	r2, r3, #29
   1276c:	d531      	bpl.n	127d2 <store_pending_mod+0x14e>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1276e:	68a5      	ldr	r5, [r4, #8]
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
   12770:	f023 0304 	bic.w	r3, r3, #4
   12774:	80e3      	strh	r3, [r4, #6]
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   12776:	b375      	cbz	r5, 127d6 <store_pending_mod+0x152>
   12778:	88ae      	ldrh	r6, [r5, #4]
   1277a:	b376      	cbz	r6, 127da <store_pending_mod+0x156>
		pub.addr = mod->pub->addr;
   1277c:	686b      	ldr	r3, [r5, #4]
   1277e:	9301      	str	r3, [sp, #4]
		pub.ttl = mod->pub->ttl;
   12780:	68aa      	ldr	r2, [r5, #8]
   12782:	9b02      	ldr	r3, [sp, #8]
   12784:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
   12788:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1278c:	4313      	orrs	r3, r2
   1278e:	9302      	str	r3, [sp, #8]
		len = sizeof(pub);
   12790:	2608      	movs	r6, #8
		val = &pub;
   12792:	ad01      	add	r5, sp, #4
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
   12794:	4a17      	ldr	r2, [pc, #92]	; (127f4 <store_pending_mod+0x170>)
   12796:	4639      	mov	r1, r7
   12798:	4620      	mov	r0, r4
   1279a:	ab03      	add	r3, sp, #12
   1279c:	f7ff ff5c 	bl	12658 <encode_mod_path.constprop.16>
	err = settings_save_one(path, val, len);
   127a0:	4632      	mov	r2, r6
   127a2:	4629      	mov	r1, r5
   127a4:	a803      	add	r0, sp, #12
   127a6:	f7f1 feed 	bl	4584 <settings_save_one>
	if (err) {
   127aa:	b190      	cbz	r0, 127d2 <store_pending_mod+0x14e>
		BT_ERR("Failed to store %s value", log_strdup(path));
   127ac:	2301      	movs	r3, #1
   127ae:	f04f 0400 	mov.w	r4, #0
   127b2:	4a0c      	ldr	r2, [pc, #48]	; (127e4 <store_pending_mod+0x160>)
   127b4:	f363 0407 	bfi	r4, r3, #0, #8
   127b8:	4b0b      	ldr	r3, [pc, #44]	; (127e8 <store_pending_mod+0x164>)
   127ba:	1a9b      	subs	r3, r3, r2
   127bc:	08db      	lsrs	r3, r3, #3
   127be:	a803      	add	r0, sp, #12
   127c0:	f363 148f 	bfi	r4, r3, #6, #10
   127c4:	f7f1 fb30 	bl	3e28 <log_strdup>
   127c8:	4622      	mov	r2, r4
   127ca:	4601      	mov	r1, r0
   127cc:	4807      	ldr	r0, [pc, #28]	; (127ec <store_pending_mod+0x168>)
   127ce:	f00b fe45 	bl	1e45c <log_1>
}
   127d2:	b009      	add	sp, #36	; 0x24
   127d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   127d6:	462e      	mov	r6, r5
   127d8:	e7dc      	b.n	12794 <store_pending_mod+0x110>
		val = NULL;
   127da:	4635      	mov	r5, r6
   127dc:	e7da      	b.n	12794 <store_pending_mod+0x110>
   127de:	bf00      	nop
   127e0:	000270d3 	.word	0x000270d3
   127e4:	000233ec 	.word	0x000233ec
   127e8:	000234cc 	.word	0x000234cc
   127ec:	00027423 	.word	0x00027423
   127f0:	000270d8 	.word	0x000270d8
   127f4:	000270dc 	.word	0x000270dc

000127f8 <mesh_commit>:
	if (bt_mesh.sub[0].net_idx == BT_MESH_KEY_UNUSED) {
   127f8:	4b5c      	ldr	r3, [pc, #368]	; (1296c <mesh_commit+0x174>)
{
   127fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_mesh.sub[0].net_idx == BT_MESH_KEY_UNUSED) {
   127fe:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
   12802:	f64f 79ff 	movw	r9, #65535	; 0xffff
   12806:	454a      	cmp	r2, r9
   12808:	469a      	mov	sl, r3
   1280a:	f000 80aa 	beq.w	12962 <mesh_commit+0x16a>
		bt_mesh_proxy_prov_disable();
   1280e:	f002 fb7b 	bl	14f08 <bt_mesh_proxy_prov_disable>
   12812:	4d57      	ldr	r5, [pc, #348]	; (12970 <mesh_commit+0x178>)
			BT_ERR("Unable to generate keys for subnet");
   12814:	4b57      	ldr	r3, [pc, #348]	; (12974 <mesh_commit+0x17c>)
   12816:	1aed      	subs	r5, r5, r3
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   12818:	2300      	movs	r3, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   1281a:	e9cd 3900 	strd	r3, r9, [sp]
			BT_ERR("Unable to generate keys for subnet");
   1281e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   12822:	4654      	mov	r4, sl
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   12824:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   12828:	9a01      	ldr	r2, [sp, #4]
   1282a:	4293      	cmp	r3, r2
   1282c:	d047      	beq.n	128be <mesh_commit+0xc6>
	err = bt_mesh_net_keys_create(&sub->keys[0], sub->keys[0].net);
   1282e:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
   12832:	4649      	mov	r1, r9
   12834:	4648      	mov	r0, r9
   12836:	f7f9 fbcf 	bl	bfd8 <bt_mesh_net_keys_create>
	if (err) {
   1283a:	4683      	mov	fp, r0
   1283c:	b1e8      	cbz	r0, 1287a <mesh_commit+0x82>
		BT_ERR("Unable to generate keys for subnet");
   1283e:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   12842:	f043 0301 	orr.w	r3, r3, #1
   12846:	f363 0607 	bfi	r6, r3, #0, #8
   1284a:	f365 168f 	bfi	r6, r5, #6, #10
   1284e:	4631      	mov	r1, r6
   12850:	4849      	ldr	r0, [pc, #292]	; (12978 <mesh_commit+0x180>)
   12852:	f00b fdf6 	bl	1e442 <log_0>
			BT_ERR("Failed to init subnet 0x%03x", sub->net_idx);
   12856:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   1285a:	f043 0301 	orr.w	r3, r3, #1
   1285e:	f363 0807 	bfi	r8, r3, #0, #8
   12862:	f365 188f 	bfi	r8, r5, #6, #10
   12866:	4642      	mov	r2, r8
   12868:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
   1286c:	4843      	ldr	r0, [pc, #268]	; (1297c <mesh_commit+0x184>)
   1286e:	f00b fdf5 	bl	1e45c <log_1>
   12872:	e024      	b.n	128be <mesh_commit+0xc6>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   12874:	2301      	movs	r3, #1
   12876:	9300      	str	r3, [sp, #0]
   12878:	e7d4      	b.n	12824 <mesh_commit+0x2c>
	if (sub->kr_phase != BT_MESH_KR_NORMAL) {
   1287a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   1287e:	b1bb      	cbz	r3, 128b0 <mesh_commit+0xb8>
		err = bt_mesh_net_keys_create(&sub->keys[1], sub->keys[1].net);
   12880:	f204 112d 	addw	r1, r4, #301	; 0x12d
   12884:	4608      	mov	r0, r1
   12886:	f7f9 fba7 	bl	bfd8 <bt_mesh_net_keys_create>
		if (err) {
   1288a:	b188      	cbz	r0, 128b0 <mesh_commit+0xb8>
			BT_ERR("Unable to generate keys for subnet");
   1288c:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   12890:	f043 0301 	orr.w	r3, r3, #1
   12894:	f363 0707 	bfi	r7, r3, #0, #8
   12898:	f365 178f 	bfi	r7, r5, #6, #10
   1289c:	4639      	mov	r1, r7
   1289e:	4836      	ldr	r0, [pc, #216]	; (12978 <mesh_commit+0x180>)
   128a0:	f00b fdcf 	bl	1e442 <log_0>
			(void)memset(&sub->keys[0], 0, sizeof(sub->keys[0]));
   128a4:	2259      	movs	r2, #89	; 0x59
   128a6:	4659      	mov	r1, fp
   128a8:	4648      	mov	r0, r9
   128aa:	f00c fed7 	bl	1f65c <memset>
		if (err) {
   128ae:	e7d2      	b.n	12856 <mesh_commit+0x5e>
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   128b0:	2300      	movs	r3, #0
   128b2:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	bt_mesh_net_beacon_update(sub);
   128b6:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   128ba:	f7f9 fc0b 	bl	c0d4 <bt_mesh_net_beacon_update>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   128be:	9b00      	ldr	r3, [sp, #0]
   128c0:	34e4      	adds	r4, #228	; 0xe4
   128c2:	2b00      	cmp	r3, #0
   128c4:	d0d6      	beq.n	12874 <mesh_commit+0x7c>
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   128c6:	f89a 3020 	ldrb.w	r3, [sl, #32]
   128ca:	2b5f      	cmp	r3, #95	; 0x5f
   128cc:	d804      	bhi.n	128d8 <mesh_commit+0xe0>
   128ce:	4a2c      	ldr	r2, [pc, #176]	; (12980 <mesh_commit+0x188>)
   128d0:	492c      	ldr	r1, [pc, #176]	; (12984 <mesh_commit+0x18c>)
   128d2:	482d      	ldr	r0, [pc, #180]	; (12988 <mesh_commit+0x190>)
   128d4:	f009 fe30 	bl	1c538 <k_delayed_work_submit_to_queue>
	bt_mesh_model_foreach(commit_mod, NULL);
   128d8:	2100      	movs	r1, #0
   128da:	482c      	ldr	r0, [pc, #176]	; (1298c <mesh_commit+0x194>)
   128dc:	f7fb fdfc 	bl	e4d8 <bt_mesh_model_foreach>
	hb_pub = bt_mesh_hb_pub_get();
   128e0:	f7fe ff02 	bl	116e8 <bt_mesh_hb_pub_get>
	if (hb_pub && hb_pub->dst != BT_MESH_ADDR_UNASSIGNED &&
   128e4:	4601      	mov	r1, r0
   128e6:	b1c8      	cbz	r0, 1291c <mesh_commit+0x124>
   128e8:	8c03      	ldrh	r3, [r0, #32]
   128ea:	b1bb      	cbz	r3, 1291c <mesh_commit+0x124>
   128ec:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   128ee:	b1ab      	cbz	r3, 1291c <mesh_commit+0x124>
	    hb_pub->count && hb_pub->period) {
   128f0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   128f4:	b193      	cbz	r3, 1291c <mesh_commit+0x124>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   128f6:	f3bf 8f5b 	dmb	ish
   128fa:	f100 0308 	add.w	r3, r0, #8
   128fe:	e853 2f00 	ldrex	r2, [r3]
   12902:	f042 0001 	orr.w	r0, r2, #1
   12906:	e843 0400 	strex	r4, r0, [r3]
   1290a:	2c00      	cmp	r4, #0
   1290c:	d1f7      	bne.n	128fe <mesh_commit+0x106>
   1290e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   12912:	07d3      	lsls	r3, r2, #31
   12914:	d402      	bmi.n	1291c <mesh_commit+0x124>
		k_queue_append(&work_q->queue, work);
   12916:	481c      	ldr	r0, [pc, #112]	; (12988 <mesh_commit+0x190>)
   12918:	f010 f935 	bl	22b86 <k_queue_append>
	cfg = bt_mesh_cfg_get();
   1291c:	f7fe feec 	bl	116f8 <bt_mesh_cfg_get>
	if (cfg && stored_cfg.valid) {
   12920:	b180      	cbz	r0, 12944 <mesh_commit+0x14c>
   12922:	4b1b      	ldr	r3, [pc, #108]	; (12990 <mesh_commit+0x198>)
   12924:	781a      	ldrb	r2, [r3, #0]
   12926:	b16a      	cbz	r2, 12944 <mesh_commit+0x14c>
		cfg->net_transmit = stored_cfg.cfg.net_transmit;
   12928:	785a      	ldrb	r2, [r3, #1]
   1292a:	7102      	strb	r2, [r0, #4]
		cfg->relay = stored_cfg.cfg.relay;
   1292c:	789a      	ldrb	r2, [r3, #2]
   1292e:	7142      	strb	r2, [r0, #5]
		cfg->relay_retransmit = stored_cfg.cfg.relay_retransmit;
   12930:	78da      	ldrb	r2, [r3, #3]
   12932:	7182      	strb	r2, [r0, #6]
		cfg->beacon = stored_cfg.cfg.beacon;
   12934:	791a      	ldrb	r2, [r3, #4]
   12936:	71c2      	strb	r2, [r0, #7]
		cfg->gatt_proxy = stored_cfg.cfg.gatt_proxy;
   12938:	795a      	ldrb	r2, [r3, #5]
   1293a:	7202      	strb	r2, [r0, #8]
		cfg->frnd = stored_cfg.cfg.frnd;
   1293c:	799a      	ldrb	r2, [r3, #6]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
   1293e:	79db      	ldrb	r3, [r3, #7]
		cfg->frnd = stored_cfg.cfg.frnd;
   12940:	7242      	strb	r2, [r0, #9]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
   12942:	7283      	strb	r3, [r0, #10]
   12944:	4b13      	ldr	r3, [pc, #76]	; (12994 <mesh_commit+0x19c>)
   12946:	f3bf 8f5b 	dmb	ish
   1294a:	e853 2f00 	ldrex	r2, [r3]
   1294e:	f042 0201 	orr.w	r2, r2, #1
   12952:	e843 2100 	strex	r1, r2, [r3]
   12956:	2900      	cmp	r1, #0
   12958:	d1f7      	bne.n	1294a <mesh_commit+0x152>
   1295a:	f3bf 8f5b 	dmb	ish
	bt_mesh_net_start();
   1295e:	f7fa fa63 	bl	ce28 <bt_mesh_net_start>
}
   12962:	2000      	movs	r0, #0
   12964:	b003      	add	sp, #12
   12966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1296a:	bf00      	nop
   1296c:	20007924 	.word	0x20007924
   12970:	000234cc 	.word	0x000234cc
   12974:	000233ec 	.word	0x000233ec
   12978:	00026fef 	.word	0x00026fef
   1297c:	00027012 	.word	0x00027012
   12980:	05265c00 	.word	0x05265c00
   12984:	20007948 	.word	0x20007948
   12988:	20001c74 	.word	0x20001c74
   1298c:	00012e9d 	.word	0x00012e9d
   12990:	200022ec 	.word	0x200022ec
   12994:	2000792c 	.word	0x2000792c

00012998 <atomic_test_and_clear_bit.constprop.14>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   12998:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1299a:	2301      	movs	r3, #1
   1299c:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   129a0:	4b0a      	ldr	r3, [pc, #40]	; (129cc <atomic_test_and_clear_bit.constprop.14+0x34>)
   129a2:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   129a6:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   129a8:	e853 2f00 	ldrex	r2, [r3]
   129ac:	ea02 0c01 	and.w	ip, r2, r1
   129b0:	e843 ce00 	strex	lr, ip, [r3]
   129b4:	f1be 0f00 	cmp.w	lr, #0
   129b8:	d1f6      	bne.n	129a8 <atomic_test_and_clear_bit.constprop.14+0x10>
   129ba:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   129be:	4202      	tst	r2, r0
}
   129c0:	bf14      	ite	ne
   129c2:	2001      	movne	r0, #1
   129c4:	2000      	moveq	r0, #0
   129c6:	f85d fb04 	ldr.w	pc, [sp], #4
   129ca:	bf00      	nop
   129cc:	2000792c 	.word	0x2000792c

000129d0 <store_pending>:
{
   129d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_RPL_PENDING)) {
   129d4:	2006      	movs	r0, #6
{
   129d6:	b087      	sub	sp, #28
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_RPL_PENDING)) {
   129d8:	f7ff ffde 	bl	12998 <atomic_test_and_clear_bit.constprop.14>
   129dc:	2800      	cmp	r0, #0
   129de:	f040 80f3 	bne.w	12bc8 <store_pending+0x1f8>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_KEYS_PENDING)) {
   129e2:	2007      	movs	r0, #7
   129e4:	f7ff ffd8 	bl	12998 <atomic_test_and_clear_bit.constprop.14>
   129e8:	b340      	cbz	r0, 12a3c <store_pending+0x6c>
   129ea:	4dbd      	ldr	r5, [pc, #756]	; (12ce0 <store_pending+0x310>)
					BT_WARN("NetKeyIndex 0x%03x not found",
   129ec:	4bbd      	ldr	r3, [pc, #756]	; (12ce4 <store_pending+0x314>)
		if (!update->valid) {
   129ee:	4ebe      	ldr	r6, [pc, #760]	; (12ce8 <store_pending+0x318>)
					BT_WARN("NetKeyIndex 0x%03x not found",
   129f0:	f8df b334 	ldr.w	fp, [pc, #820]	; 12d28 <store_pending+0x358>
   129f4:	1aed      	subs	r5, r5, r3
   129f6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   129fa:	2400      	movs	r4, #0
   129fc:	46b2      	mov	sl, r6
		if (!update->valid) {
   129fe:	ea4f 0944 	mov.w	r9, r4, lsl #1
   12a02:	eb06 0309 	add.w	r3, r6, r9
   12a06:	785b      	ldrb	r3, [r3, #1]
   12a08:	06da      	lsls	r2, r3, #27
   12a0a:	d514      	bpl.n	12a36 <store_pending+0x66>
		if (update->clear) {
   12a0c:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
   12a10:	f003 0220 	and.w	r2, r3, #32
   12a14:	065b      	lsls	r3, r3, #25
   12a16:	f3c0 000b 	ubfx	r0, r0, #0, #12
   12a1a:	f140 8148 	bpl.w	12cae <store_pending+0x2de>
			if (update->app_key) {
   12a1e:	2a00      	cmp	r2, #0
   12a20:	f000 8142 	beq.w	12ca8 <store_pending+0x2d8>
				clear_app_key(update->key_idx);
   12a24:	f7ff fde4 	bl	125f0 <clear_app_key>
		update->valid = 0U;
   12a28:	44d1      	add	r9, sl
   12a2a:	f899 3001 	ldrb.w	r3, [r9, #1]
   12a2e:	f36f 1304 	bfc	r3, #4, #1
   12a32:	f889 3001 	strb.w	r3, [r9, #1]
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   12a36:	3401      	adds	r4, #1
   12a38:	2c04      	cmp	r4, #4
   12a3a:	d1e0      	bne.n	129fe <store_pending+0x2e>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_NET_PENDING)) {
   12a3c:	2008      	movs	r0, #8
   12a3e:	f7ff ffab 	bl	12998 <atomic_test_and_clear_bit.constprop.14>
   12a42:	b318      	cbz	r0, 12a8c <store_pending+0xbc>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   12a44:	2000      	movs	r0, #0
   12a46:	f7ff fdf9 	bl	1263c <atomic_test_bit.constprop.15>
   12a4a:	2800      	cmp	r0, #0
   12a4c:	f000 8187 	beq.w	12d5e <store_pending+0x38e>
	net.primary_addr = bt_mesh_primary_addr();
   12a50:	f7fb fe6c 	bl	e72c <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   12a54:	2210      	movs	r2, #16
	net.primary_addr = bt_mesh_primary_addr();
   12a56:	f8ad 0004 	strh.w	r0, [sp, #4]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   12a5a:	49a4      	ldr	r1, [pc, #656]	; (12cec <store_pending+0x31c>)
   12a5c:	f10d 0006 	add.w	r0, sp, #6
   12a60:	f00c fdd2 	bl	1f608 <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
   12a64:	2212      	movs	r2, #18
   12a66:	a901      	add	r1, sp, #4
   12a68:	48a1      	ldr	r0, [pc, #644]	; (12cf0 <store_pending+0x320>)
   12a6a:	f7f1 fd8b 	bl	4584 <settings_save_one>
	if (err) {
   12a6e:	b168      	cbz	r0, 12a8c <store_pending+0xbc>
		BT_ERR("Failed to store Network value");
   12a70:	2301      	movs	r3, #1
   12a72:	f04f 0100 	mov.w	r1, #0
   12a76:	f363 0107 	bfi	r1, r3, #0, #8
   12a7a:	4a9a      	ldr	r2, [pc, #616]	; (12ce4 <store_pending+0x314>)
   12a7c:	4b98      	ldr	r3, [pc, #608]	; (12ce0 <store_pending+0x310>)
   12a7e:	489d      	ldr	r0, [pc, #628]	; (12cf4 <store_pending+0x324>)
   12a80:	1a9b      	subs	r3, r3, r2
   12a82:	08db      	lsrs	r3, r3, #3
   12a84:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Failed to clear Network");
   12a88:	f00b fcdb 	bl	1e442 <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IV_PENDING)) {
   12a8c:	2009      	movs	r0, #9
   12a8e:	f7ff ff83 	bl	12998 <atomic_test_and_clear_bit.constprop.14>
   12a92:	b348      	cbz	r0, 12ae8 <store_pending+0x118>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   12a94:	2000      	movs	r0, #0
   12a96:	f7ff fdd1 	bl	1263c <atomic_test_bit.constprop.15>
   12a9a:	2800      	cmp	r0, #0
   12a9c:	f000 8172 	beq.w	12d84 <store_pending+0x3b4>
	iv.iv_index = bt_mesh.iv_index;
   12aa0:	4a95      	ldr	r2, [pc, #596]	; (12cf8 <store_pending+0x328>)
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   12aa2:	2002      	movs	r0, #2
	iv.iv_index = bt_mesh.iv_index;
   12aa4:	6813      	ldr	r3, [r2, #0]
   12aa6:	9301      	str	r3, [sp, #4]
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   12aa8:	f7ff fdc8 	bl	1263c <atomic_test_bit.constprop.15>
   12aac:	f89d 3008 	ldrb.w	r3, [sp, #8]
	iv.iv_duration = bt_mesh.ivu_duration;
   12ab0:	f892 2020 	ldrb.w	r2, [r2, #32]
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   12ab4:	f360 0300 	bfi	r3, r0, #0, #1
	iv.iv_duration = bt_mesh.ivu_duration;
   12ab8:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
   12abc:	a901      	add	r1, sp, #4
   12abe:	2205      	movs	r2, #5
   12ac0:	488e      	ldr	r0, [pc, #568]	; (12cfc <store_pending+0x32c>)
	iv.iv_duration = bt_mesh.ivu_duration;
   12ac2:	f88d 3008 	strb.w	r3, [sp, #8]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
   12ac6:	f7f1 fd5d 	bl	4584 <settings_save_one>
	if (err) {
   12aca:	b168      	cbz	r0, 12ae8 <store_pending+0x118>
		BT_ERR("Failed to store IV value");
   12acc:	2301      	movs	r3, #1
   12ace:	f04f 0100 	mov.w	r1, #0
   12ad2:	f363 0107 	bfi	r1, r3, #0, #8
   12ad6:	4a83      	ldr	r2, [pc, #524]	; (12ce4 <store_pending+0x314>)
   12ad8:	4b81      	ldr	r3, [pc, #516]	; (12ce0 <store_pending+0x310>)
   12ada:	4889      	ldr	r0, [pc, #548]	; (12d00 <store_pending+0x330>)
   12adc:	1a9b      	subs	r3, r3, r2
   12ade:	08db      	lsrs	r3, r3, #3
   12ae0:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Failed to clear IV");
   12ae4:	f00b fcad 	bl	1e442 <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_SEQ_PENDING)) {
   12ae8:	200a      	movs	r0, #10
   12aea:	f7ff ff55 	bl	12998 <atomic_test_and_clear_bit.constprop.14>
   12aee:	b1d0      	cbz	r0, 12b26 <store_pending+0x156>
	seq.val[0] = bt_mesh.seq;
   12af0:	4b81      	ldr	r3, [pc, #516]	; (12cf8 <store_pending+0x328>)
	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
   12af2:	4884      	ldr	r0, [pc, #528]	; (12d04 <store_pending+0x334>)
	seq.val[0] = bt_mesh.seq;
   12af4:	889a      	ldrh	r2, [r3, #4]
   12af6:	f8ad 2004 	strh.w	r2, [sp, #4]
	seq.val[2] = bt_mesh.seq >> 16;
   12afa:	88db      	ldrh	r3, [r3, #6]
   12afc:	f88d 3006 	strb.w	r3, [sp, #6]
	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
   12b00:	2203      	movs	r2, #3
   12b02:	a901      	add	r1, sp, #4
   12b04:	f7f1 fd3e 	bl	4584 <settings_save_one>
	if (err) {
   12b08:	b168      	cbz	r0, 12b26 <store_pending+0x156>
		BT_ERR("Failed to stor Seq value");
   12b0a:	2301      	movs	r3, #1
   12b0c:	f04f 0100 	mov.w	r1, #0
   12b10:	f363 0107 	bfi	r1, r3, #0, #8
   12b14:	4a73      	ldr	r2, [pc, #460]	; (12ce4 <store_pending+0x314>)
   12b16:	4b72      	ldr	r3, [pc, #456]	; (12ce0 <store_pending+0x310>)
   12b18:	487b      	ldr	r0, [pc, #492]	; (12d08 <store_pending+0x338>)
   12b1a:	1a9b      	subs	r3, r3, r2
   12b1c:	08db      	lsrs	r3, r3, #3
   12b1e:	f363 118f 	bfi	r1, r3, #6, #10
   12b22:	f00b fc8e 	bl	1e442 <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_HB_PUB_PENDING)) {
   12b26:	200b      	movs	r0, #11
   12b28:	f7ff ff36 	bl	12998 <atomic_test_and_clear_bit.constprop.14>
   12b2c:	b1c0      	cbz	r0, 12b60 <store_pending+0x190>
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
   12b2e:	f7fe fddb 	bl	116e8 <bt_mesh_hb_pub_get>
	if (!pub) {
   12b32:	b1a8      	cbz	r0, 12b60 <store_pending+0x190>
	if (pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   12b34:	8c02      	ldrh	r2, [r0, #32]
   12b36:	2a00      	cmp	r2, #0
   12b38:	f040 8137 	bne.w	12daa <store_pending+0x3da>
		err = settings_delete("bt/mesh/HBPub");
   12b3c:	4873      	ldr	r0, [pc, #460]	; (12d0c <store_pending+0x33c>)
   12b3e:	f00c fb97 	bl	1f270 <settings_delete>
	if (err) {
   12b42:	b168      	cbz	r0, 12b60 <store_pending+0x190>
		BT_ERR("Failed to store Heartbeat Publication");
   12b44:	2301      	movs	r3, #1
   12b46:	f04f 0100 	mov.w	r1, #0
   12b4a:	f363 0107 	bfi	r1, r3, #0, #8
   12b4e:	4a65      	ldr	r2, [pc, #404]	; (12ce4 <store_pending+0x314>)
   12b50:	4b63      	ldr	r3, [pc, #396]	; (12ce0 <store_pending+0x310>)
   12b52:	486f      	ldr	r0, [pc, #444]	; (12d10 <store_pending+0x340>)
   12b54:	1a9b      	subs	r3, r3, r2
   12b56:	08db      	lsrs	r3, r3, #3
   12b58:	f363 118f 	bfi	r1, r3, #6, #10
   12b5c:	f00b fc71 	bl	1e442 <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_CFG_PENDING)) {
   12b60:	200c      	movs	r0, #12
   12b62:	f7ff ff19 	bl	12998 <atomic_test_and_clear_bit.constprop.14>
   12b66:	b320      	cbz	r0, 12bb2 <store_pending+0x1e2>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   12b68:	2000      	movs	r0, #0
   12b6a:	f7ff fd67 	bl	1263c <atomic_test_bit.constprop.15>
   12b6e:	2800      	cmp	r0, #0
   12b70:	f000 813c 	beq.w	12dec <store_pending+0x41c>
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   12b74:	f7fe fdc0 	bl	116f8 <bt_mesh_cfg_get>
	if (!cfg) {
   12b78:	b1d8      	cbz	r0, 12bb2 <store_pending+0x1e2>
	val.net_transmit = cfg->net_transmit;
   12b7a:	6843      	ldr	r3, [r0, #4]
   12b7c:	9301      	str	r3, [sp, #4]
	val.gatt_proxy = cfg->gatt_proxy;
   12b7e:	8902      	ldrh	r2, [r0, #8]
	val.default_ttl = cfg->default_ttl;
   12b80:	7a83      	ldrb	r3, [r0, #10]
	val.gatt_proxy = cfg->gatt_proxy;
   12b82:	f8ad 2008 	strh.w	r2, [sp, #8]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   12b86:	a901      	add	r1, sp, #4
   12b88:	2207      	movs	r2, #7
   12b8a:	4862      	ldr	r0, [pc, #392]	; (12d14 <store_pending+0x344>)
	val.default_ttl = cfg->default_ttl;
   12b8c:	f88d 300a 	strb.w	r3, [sp, #10]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   12b90:	f7f1 fcf8 	bl	4584 <settings_save_one>
	if (err) {
   12b94:	b168      	cbz	r0, 12bb2 <store_pending+0x1e2>
		BT_ERR("Failed to store configuration value");
   12b96:	2301      	movs	r3, #1
   12b98:	f04f 0100 	mov.w	r1, #0
   12b9c:	f363 0107 	bfi	r1, r3, #0, #8
   12ba0:	4a50      	ldr	r2, [pc, #320]	; (12ce4 <store_pending+0x314>)
   12ba2:	4b4f      	ldr	r3, [pc, #316]	; (12ce0 <store_pending+0x310>)
   12ba4:	485c      	ldr	r0, [pc, #368]	; (12d18 <store_pending+0x348>)
   12ba6:	1a9b      	subs	r3, r3, r2
   12ba8:	08db      	lsrs	r3, r3, #3
   12baa:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Failed to clear configuration");
   12bae:	f00b fc48 	bl	1e442 <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_MOD_PENDING)) {
   12bb2:	200d      	movs	r0, #13
   12bb4:	f7ff fef0 	bl	12998 <atomic_test_and_clear_bit.constprop.14>
   12bb8:	b118      	cbz	r0, 12bc2 <store_pending+0x1f2>
		bt_mesh_model_foreach(store_pending_mod, NULL);
   12bba:	2100      	movs	r1, #0
   12bbc:	4857      	ldr	r0, [pc, #348]	; (12d1c <store_pending+0x34c>)
   12bbe:	f7fb fc8b 	bl	e4d8 <bt_mesh_model_foreach>
}
   12bc2:	b007      	add	sp, #28
   12bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   12bc8:	2000      	movs	r0, #0
   12bca:	f7ff fd37 	bl	1263c <atomic_test_bit.constprop.15>
   12bce:	4d44      	ldr	r5, [pc, #272]	; (12ce0 <store_pending+0x310>)
   12bd0:	4b44      	ldr	r3, [pc, #272]	; (12ce4 <store_pending+0x314>)
   12bd2:	1aed      	subs	r5, r5, r3
   12bd4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   12bd8:	2800      	cmp	r0, #0
   12bda:	d03b      	beq.n	12c54 <store_pending+0x284>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   12bdc:	2600      	movs	r6, #0
   12bde:	4c46      	ldr	r4, [pc, #280]	; (12cf8 <store_pending+0x328>)
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
   12be0:	f8df b148 	ldr.w	fp, [pc, #328]	; 12d2c <store_pending+0x35c>
			rpl->store = false;
   12be4:	46b2      	mov	sl, r6
		if (rpl->store) {
   12be6:	f894 326f 	ldrb.w	r3, [r4, #623]	; 0x26f
   12bea:	b36b      	cbz	r3, 12c48 <store_pending+0x278>
			rpl->store = false;
   12bec:	f884 a26f 	strb.w	sl, [r4, #623]	; 0x26f
	rpl.seq = entry->seq;
   12bf0:	9b00      	ldr	r3, [sp, #0]
   12bf2:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
   12bf6:	f362 0317 	bfi	r3, r2, #0, #24
   12bfa:	9300      	str	r3, [sp, #0]
	rpl.old_iv = entry->old_iv;
   12bfc:	f894 226e 	ldrb.w	r2, [r4, #622]	; 0x26e
   12c00:	f3c3 6307 	ubfx	r3, r3, #24, #8
   12c04:	f362 0300 	bfi	r3, r2, #0, #1
   12c08:	f88d 3003 	strb.w	r3, [sp, #3]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   12c0c:	4a44      	ldr	r2, [pc, #272]	; (12d20 <store_pending+0x350>)
   12c0e:	f8b4 326c 	ldrh.w	r3, [r4, #620]	; 0x26c
   12c12:	2112      	movs	r1, #18
   12c14:	a801      	add	r0, sp, #4
   12c16:	f7f0 fb6d 	bl	32f4 <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
   12c1a:	2204      	movs	r2, #4
   12c1c:	4669      	mov	r1, sp
   12c1e:	eb0d 0002 	add.w	r0, sp, r2
   12c22:	f7f1 fcaf 	bl	4584 <settings_save_one>
	if (err) {
   12c26:	b178      	cbz	r0, 12c48 <store_pending+0x278>
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
   12c28:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   12c2c:	f043 0301 	orr.w	r3, r3, #1
   12c30:	a801      	add	r0, sp, #4
   12c32:	f363 0907 	bfi	r9, r3, #0, #8
   12c36:	f7f1 f8f7 	bl	3e28 <log_strdup>
   12c3a:	f365 198f 	bfi	r9, r5, #6, #10
   12c3e:	4601      	mov	r1, r0
   12c40:	464a      	mov	r2, r9
   12c42:	4658      	mov	r0, fp
   12c44:	f00b fc0a 	bl	1e45c <log_1>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   12c48:	3601      	adds	r6, #1
   12c4a:	2e0a      	cmp	r6, #10
   12c4c:	f104 0408 	add.w	r4, r4, #8
   12c50:	d1c9      	bne.n	12be6 <store_pending+0x216>
   12c52:	e6c6      	b.n	129e2 <store_pending+0x12>
   12c54:	4e28      	ldr	r6, [pc, #160]	; (12cf8 <store_pending+0x328>)
		snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   12c56:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 12d20 <store_pending+0x350>
			BT_ERR("Failed to clear RPL");
   12c5a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 12d30 <store_pending+0x360>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   12c5e:	4604      	mov	r4, r0
		if (!rpl->src) {
   12c60:	f8b6 326c 	ldrh.w	r3, [r6, #620]	; 0x26c
   12c64:	b1d3      	cbz	r3, 12c9c <store_pending+0x2cc>
		snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   12c66:	464a      	mov	r2, r9
   12c68:	2112      	movs	r1, #18
   12c6a:	a801      	add	r0, sp, #4
   12c6c:	f7f0 fb42 	bl	32f4 <snprintk>
		err = settings_delete(path);
   12c70:	a801      	add	r0, sp, #4
   12c72:	f00c fafd 	bl	1f270 <settings_delete>
		if (err) {
   12c76:	b158      	cbz	r0, 12c90 <store_pending+0x2c0>
			BT_ERR("Failed to clear RPL");
   12c78:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   12c7c:	f043 0301 	orr.w	r3, r3, #1
   12c80:	f363 0a07 	bfi	sl, r3, #0, #8
   12c84:	f365 1a8f 	bfi	sl, r5, #6, #10
   12c88:	4651      	mov	r1, sl
   12c8a:	4658      	mov	r0, fp
   12c8c:	f00b fbd9 	bl	1e442 <log_0>
		(void)memset(rpl, 0, sizeof(*rpl));
   12c90:	2208      	movs	r2, #8
   12c92:	2100      	movs	r1, #0
   12c94:	f506 701b 	add.w	r0, r6, #620	; 0x26c
   12c98:	f00c fce0 	bl	1f65c <memset>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   12c9c:	3401      	adds	r4, #1
   12c9e:	2c0a      	cmp	r4, #10
   12ca0:	f106 0608 	add.w	r6, r6, #8
   12ca4:	d1dc      	bne.n	12c60 <store_pending+0x290>
   12ca6:	e69c      	b.n	129e2 <store_pending+0x12>
				clear_net_key(update->key_idx);
   12ca8:	f7ff fc7c 	bl	125a4 <clear_net_key>
   12cac:	e6bc      	b.n	12a28 <store_pending+0x58>
			if (update->app_key) {
   12cae:	2a00      	cmp	r2, #0
   12cb0:	d040      	beq.n	12d34 <store_pending+0x364>
				key = bt_mesh_app_key_find(update->key_idx);
   12cb2:	f7fa fd83 	bl	d7bc <bt_mesh_app_key_find>
				if (key) {
   12cb6:	b110      	cbz	r0, 12cbe <store_pending+0x2ee>
					store_app_key(key);
   12cb8:	f7ff fa1c 	bl	120f4 <store_app_key>
   12cbc:	e6b4      	b.n	12a28 <store_pending+0x58>
					BT_WARN("AppKeyIndex 0x%03x not found",
   12cbe:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   12cc2:	f043 0302 	orr.w	r3, r3, #2
   12cc6:	f363 0707 	bfi	r7, r3, #0, #8
   12cca:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
   12cce:	4815      	ldr	r0, [pc, #84]	; (12d24 <store_pending+0x354>)
   12cd0:	f365 178f 	bfi	r7, r5, #6, #10
   12cd4:	463a      	mov	r2, r7
   12cd6:	f3c1 010b 	ubfx	r1, r1, #0, #12
					BT_WARN("NetKeyIndex 0x%03x not found",
   12cda:	f00b fbbf 	bl	1e45c <log_1>
   12cde:	e6a3      	b.n	12a28 <store_pending+0x58>
   12ce0:	000234cc 	.word	0x000234cc
   12ce4:	000233ec 	.word	0x000233ec
   12ce8:	20001d38 	.word	0x20001d38
   12cec:	20007968 	.word	0x20007968
   12cf0:	00027303 	.word	0x00027303
   12cf4:	0002730f 	.word	0x0002730f
   12cf8:	20007924 	.word	0x20007924
   12cfc:	00027345 	.word	0x00027345
   12d00:	00027350 	.word	0x00027350
   12d04:	0002737c 	.word	0x0002737c
   12d08:	00027388 	.word	0x00027388
   12d0c:	000273a1 	.word	0x000273a1
   12d10:	000273af 	.word	0x000273af
   12d14:	000273d5 	.word	0x000273d5
   12d18:	000273e1 	.word	0x000273e1
   12d1c:	00012685 	.word	0x00012685
   12d20:	00027289 	.word	0x00027289
   12d24:	000272c9 	.word	0x000272c9
   12d28:	000272e6 	.word	0x000272e6
   12d2c:	00027298 	.word	0x00027298
   12d30:	000272b5 	.word	0x000272b5
				sub = bt_mesh_subnet_get(update->key_idx);
   12d34:	f7f9 f932 	bl	bf9c <bt_mesh_subnet_get>
				if (sub) {
   12d38:	b110      	cbz	r0, 12d40 <store_pending+0x370>
					store_net_key(sub);
   12d3a:	f7ff fbf3 	bl	12524 <store_net_key>
   12d3e:	e673      	b.n	12a28 <store_pending+0x58>
					BT_WARN("NetKeyIndex 0x%03x not found",
   12d40:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   12d44:	f043 0302 	orr.w	r3, r3, #2
   12d48:	f363 0807 	bfi	r8, r3, #0, #8
   12d4c:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
   12d50:	f365 188f 	bfi	r8, r5, #6, #10
   12d54:	4642      	mov	r2, r8
   12d56:	f3c1 010b 	ubfx	r1, r1, #0, #12
   12d5a:	4658      	mov	r0, fp
   12d5c:	e7bd      	b.n	12cda <store_pending+0x30a>
	err = settings_delete("bt/mesh/Net");
   12d5e:	482d      	ldr	r0, [pc, #180]	; (12e14 <store_pending+0x444>)
   12d60:	f00c fa86 	bl	1f270 <settings_delete>
	if (err) {
   12d64:	2800      	cmp	r0, #0
   12d66:	f43f ae91 	beq.w	12a8c <store_pending+0xbc>
		BT_ERR("Failed to clear Network");
   12d6a:	2301      	movs	r3, #1
   12d6c:	f04f 0100 	mov.w	r1, #0
   12d70:	f363 0107 	bfi	r1, r3, #0, #8
   12d74:	4a28      	ldr	r2, [pc, #160]	; (12e18 <store_pending+0x448>)
   12d76:	4b29      	ldr	r3, [pc, #164]	; (12e1c <store_pending+0x44c>)
   12d78:	4829      	ldr	r0, [pc, #164]	; (12e20 <store_pending+0x450>)
   12d7a:	1a9b      	subs	r3, r3, r2
   12d7c:	08db      	lsrs	r3, r3, #3
   12d7e:	f363 118f 	bfi	r1, r3, #6, #10
   12d82:	e681      	b.n	12a88 <store_pending+0xb8>
	err = settings_delete("bt/mesh/IV");
   12d84:	4827      	ldr	r0, [pc, #156]	; (12e24 <store_pending+0x454>)
   12d86:	f00c fa73 	bl	1f270 <settings_delete>
	if (err) {
   12d8a:	2800      	cmp	r0, #0
   12d8c:	f43f aeac 	beq.w	12ae8 <store_pending+0x118>
		BT_ERR("Failed to clear IV");
   12d90:	2301      	movs	r3, #1
   12d92:	f04f 0100 	mov.w	r1, #0
   12d96:	f363 0107 	bfi	r1, r3, #0, #8
   12d9a:	4a1f      	ldr	r2, [pc, #124]	; (12e18 <store_pending+0x448>)
   12d9c:	4b1f      	ldr	r3, [pc, #124]	; (12e1c <store_pending+0x44c>)
   12d9e:	4822      	ldr	r0, [pc, #136]	; (12e28 <store_pending+0x458>)
   12da0:	1a9b      	subs	r3, r3, r2
   12da2:	08db      	lsrs	r3, r3, #3
   12da4:	f363 118f 	bfi	r1, r3, #6, #10
   12da8:	e69c      	b.n	12ae4 <store_pending+0x114>
		val.indefinite = (pub->count == 0xffff);
   12daa:	8c43      	ldrh	r3, [r0, #34]	; 0x22
		val.dst = pub->dst;
   12dac:	f8ad 2004 	strh.w	r2, [sp, #4]
		val.indefinite = (pub->count == 0xffff);
   12db0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12db4:	1a59      	subs	r1, r3, r1
   12db6:	424b      	negs	r3, r1
   12db8:	414b      	adcs	r3, r1
   12dba:	f89d 100b 	ldrb.w	r1, [sp, #11]
   12dbe:	f363 1104 	bfi	r1, r3, #4, #1
   12dc2:	f88d 100b 	strb.w	r1, [sp, #11]
		val.period = pub->period;
   12dc6:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		val.feat = pub->feat;
   12dc8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
		val.period = pub->period;
   12dca:	f8ad 2006 	strh.w	r2, [sp, #6]
		val.net_idx = pub->net_idx;
   12dce:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		val.feat = pub->feat;
   12dd0:	f8ad 3008 	strh.w	r3, [sp, #8]
		val.net_idx = pub->net_idx;
   12dd4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   12dd8:	4814      	ldr	r0, [pc, #80]	; (12e2c <store_pending+0x45c>)
		val.net_idx = pub->net_idx;
   12dda:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   12dde:	a901      	add	r1, sp, #4
   12de0:	2208      	movs	r2, #8
		val.net_idx = pub->net_idx;
   12de2:	f8ad 300a 	strh.w	r3, [sp, #10]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   12de6:	f7f1 fbcd 	bl	4584 <settings_save_one>
   12dea:	e6aa      	b.n	12b42 <store_pending+0x172>
	err = settings_delete("bt/mesh/Cfg");
   12dec:	4810      	ldr	r0, [pc, #64]	; (12e30 <store_pending+0x460>)
   12dee:	f00c fa3f 	bl	1f270 <settings_delete>
	if (err) {
   12df2:	2800      	cmp	r0, #0
   12df4:	f43f aedd 	beq.w	12bb2 <store_pending+0x1e2>
		BT_ERR("Failed to clear configuration");
   12df8:	2301      	movs	r3, #1
   12dfa:	f04f 0100 	mov.w	r1, #0
   12dfe:	f363 0107 	bfi	r1, r3, #0, #8
   12e02:	4a05      	ldr	r2, [pc, #20]	; (12e18 <store_pending+0x448>)
   12e04:	4b05      	ldr	r3, [pc, #20]	; (12e1c <store_pending+0x44c>)
   12e06:	480b      	ldr	r0, [pc, #44]	; (12e34 <store_pending+0x464>)
   12e08:	1a9b      	subs	r3, r3, r2
   12e0a:	08db      	lsrs	r3, r3, #3
   12e0c:	f363 118f 	bfi	r1, r3, #6, #10
   12e10:	e6cd      	b.n	12bae <store_pending+0x1de>
   12e12:	bf00      	nop
   12e14:	00027303 	.word	0x00027303
   12e18:	000233ec 	.word	0x000233ec
   12e1c:	000234cc 	.word	0x000234cc
   12e20:	0002732d 	.word	0x0002732d
   12e24:	00027345 	.word	0x00027345
   12e28:	00027369 	.word	0x00027369
   12e2c:	000273a1 	.word	0x000273a1
   12e30:	000273d5 	.word	0x000273d5
   12e34:	00027405 	.word	0x00027405

00012e38 <schedule_store>:
{
   12e38:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12e3a:	4a15      	ldr	r2, [pc, #84]	; (12e90 <schedule_store+0x58>)
   12e3c:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   12e40:	2301      	movs	r3, #1
   12e42:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12e46:	e852 3f00 	ldrex	r3, [r2]
   12e4a:	4303      	orrs	r3, r0
   12e4c:	e842 3100 	strex	r1, r3, [r2]
   12e50:	2900      	cmp	r1, #0
   12e52:	d1f8      	bne.n	12e46 <schedule_store+0xe>
   12e54:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_NET_PENDING) ||
   12e58:	2008      	movs	r0, #8
   12e5a:	f7ff fbef 	bl	1263c <atomic_test_bit.constprop.15>
   12e5e:	b130      	cbz	r0, 12e6e <schedule_store+0x36>
		timeout = K_NO_WAIT;
   12e60:	2200      	movs	r2, #0
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12e62:	490c      	ldr	r1, [pc, #48]	; (12e94 <schedule_store+0x5c>)
   12e64:	480c      	ldr	r0, [pc, #48]	; (12e98 <schedule_store+0x60>)
}
   12e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12e6a:	f009 bb65 	b.w	1c538 <k_delayed_work_submit_to_queue>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_IV_PENDING) ||
   12e6e:	2009      	movs	r0, #9
   12e70:	f7ff fbe4 	bl	1263c <atomic_test_bit.constprop.15>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_NET_PENDING) ||
   12e74:	2800      	cmp	r0, #0
   12e76:	d1f3      	bne.n	12e60 <schedule_store+0x28>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_SEQ_PENDING)) {
   12e78:	200a      	movs	r0, #10
   12e7a:	f7ff fbdf 	bl	1263c <atomic_test_bit.constprop.15>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_IV_PENDING) ||
   12e7e:	2800      	cmp	r0, #0
   12e80:	d1ee      	bne.n	12e60 <schedule_store+0x28>
	} else if (atomic_test_bit(bt_mesh.flags, BT_MESH_RPL_PENDING) &&
   12e82:	2006      	movs	r0, #6
   12e84:	f7ff fbda 	bl	1263c <atomic_test_bit.constprop.15>
		timeout = K_SECONDS(CONFIG_BT_MESH_STORE_TIMEOUT);
   12e88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   12e8c:	e7e9      	b.n	12e62 <schedule_store+0x2a>
   12e8e:	bf00      	nop
   12e90:	2000792c 	.word	0x2000792c
   12e94:	20000ad0 	.word	0x20000ad0
   12e98:	20001c74 	.word	0x20001c74

00012e9c <commit_mod>:
	if (mod->pub && mod->pub->update &&
   12e9c:	6883      	ldr	r3, [r0, #8]
{
   12e9e:	b510      	push	{r4, lr}
   12ea0:	4604      	mov	r4, r0
	if (mod->pub && mod->pub->update &&
   12ea2:	b173      	cbz	r3, 12ec2 <commit_mod+0x26>
   12ea4:	695a      	ldr	r2, [r3, #20]
   12ea6:	b162      	cbz	r2, 12ec2 <commit_mod+0x26>
   12ea8:	889b      	ldrh	r3, [r3, #4]
   12eaa:	b153      	cbz	r3, 12ec2 <commit_mod+0x26>
		s32_t ms = bt_mesh_model_pub_period_get(mod);
   12eac:	f7fb fb4e 	bl	e54c <bt_mesh_model_pub_period_get>
		if (ms) {
   12eb0:	4602      	mov	r2, r0
   12eb2:	b130      	cbz	r0, 12ec2 <commit_mod+0x26>
			k_delayed_work_submit(&mod->pub->timer, ms);
   12eb4:	68a1      	ldr	r1, [r4, #8]
   12eb6:	4803      	ldr	r0, [pc, #12]	; (12ec4 <commit_mod+0x28>)
   12eb8:	3118      	adds	r1, #24
}
   12eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12ebe:	f009 bb3b 	b.w	1c538 <k_delayed_work_submit_to_queue>
   12ec2:	bd10      	pop	{r4, pc}
   12ec4:	20001c74 	.word	0x20001c74

00012ec8 <iv_set>:
{
   12ec8:	b513      	push	{r0, r1, r4, lr}
	if (settings_val_get_len_cb(val_ctx) == 0) {
   12eca:	4610      	mov	r0, r2
{
   12ecc:	4614      	mov	r4, r2
	if (settings_val_get_len_cb(val_ctx) == 0) {
   12ece:	f00c fa29 	bl	1f324 <settings_val_get_len_cb>
   12ed2:	b990      	cbnz	r0, 12efa <iv_set+0x32>
		bt_mesh.iv_index = 0U;
   12ed4:	4b27      	ldr	r3, [pc, #156]	; (12f74 <iv_set+0xac>)
   12ed6:	f843 0b08 	str.w	r0, [r3], #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12eda:	f3bf 8f5b 	dmb	ish
   12ede:	e853 2f00 	ldrex	r2, [r3]
   12ee2:	f022 0204 	bic.w	r2, r2, #4
   12ee6:	e843 2100 	strex	r1, r2, [r3]
   12eea:	2900      	cmp	r1, #0
   12eec:	d1f7      	bne.n	12ede <iv_set+0x16>
   12eee:	f3bf 8f5b 	dmb	ish
   12ef2:	4604      	mov	r4, r0
}
   12ef4:	4620      	mov	r0, r4
   12ef6:	b002      	add	sp, #8
   12ef8:	bd10      	pop	{r4, pc}
	err = mesh_x_set(val_ctx, &iv, sizeof(iv));
   12efa:	4620      	mov	r0, r4
   12efc:	2205      	movs	r2, #5
   12efe:	4669      	mov	r1, sp
   12f00:	f7fe ff32 	bl	11d68 <mesh_x_set>
	if (err) {
   12f04:	4604      	mov	r4, r0
   12f06:	b170      	cbz	r0, 12f26 <iv_set+0x5e>
		BT_ERR("Failed to set \'iv\'");
   12f08:	2301      	movs	r3, #1
   12f0a:	f04f 0100 	mov.w	r1, #0
   12f0e:	f363 0107 	bfi	r1, r3, #0, #8
   12f12:	4a19      	ldr	r2, [pc, #100]	; (12f78 <iv_set+0xb0>)
   12f14:	4b19      	ldr	r3, [pc, #100]	; (12f7c <iv_set+0xb4>)
   12f16:	481a      	ldr	r0, [pc, #104]	; (12f80 <iv_set+0xb8>)
   12f18:	1a9b      	subs	r3, r3, r2
   12f1a:	08db      	lsrs	r3, r3, #3
   12f1c:	f363 118f 	bfi	r1, r3, #6, #10
   12f20:	f00b fa8f 	bl	1e442 <log_0>
		return err;
   12f24:	e7e6      	b.n	12ef4 <iv_set+0x2c>
	bt_mesh.iv_index = iv.iv_index;
   12f26:	4b13      	ldr	r3, [pc, #76]	; (12f74 <iv_set+0xac>)
   12f28:	9a00      	ldr	r2, [sp, #0]
   12f2a:	601a      	str	r2, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
   12f2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12f30:	f3bf 8f5b 	dmb	ish
	if (val) {
   12f34:	f012 0f01 	tst.w	r2, #1
   12f38:	f103 0208 	add.w	r2, r3, #8
   12f3c:	d010      	beq.n	12f60 <iv_set+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12f3e:	e852 1f00 	ldrex	r1, [r2]
   12f42:	f041 0104 	orr.w	r1, r1, #4
   12f46:	e842 1000 	strex	r0, r1, [r2]
   12f4a:	2800      	cmp	r0, #0
   12f4c:	d1f7      	bne.n	12f3e <iv_set+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12f4e:	f3bf 8f5b 	dmb	ish
	bt_mesh.ivu_duration = iv.iv_duration;
   12f52:	f89d 2004 	ldrb.w	r2, [sp, #4]
   12f56:	f3c2 0246 	ubfx	r2, r2, #1, #7
   12f5a:	f883 2020 	strb.w	r2, [r3, #32]
	return 0;
   12f5e:	e7c9      	b.n	12ef4 <iv_set+0x2c>
   12f60:	e852 1f00 	ldrex	r1, [r2]
   12f64:	f021 0104 	bic.w	r1, r1, #4
   12f68:	e842 1000 	strex	r0, r1, [r2]
   12f6c:	2800      	cmp	r0, #0
   12f6e:	d0ee      	beq.n	12f4e <iv_set+0x86>
   12f70:	e7f6      	b.n	12f60 <iv_set+0x98>
   12f72:	bf00      	nop
   12f74:	20007924 	.word	0x20007924
   12f78:	000233ec 	.word	0x000233ec
   12f7c:	000234cc 	.word	0x000234cc
   12f80:	00026fdc 	.word	0x00026fdc

00012f84 <app_key_set>:
{
   12f84:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f86:	460b      	mov	r3, r1
   12f88:	b08b      	sub	sp, #44	; 0x2c
   12f8a:	4615      	mov	r5, r2
	app_idx = strtol(argv[0], NULL, 16);
   12f8c:	2100      	movs	r1, #0
   12f8e:	2210      	movs	r2, #16
   12f90:	6818      	ldr	r0, [r3, #0]
   12f92:	f00c fa5e 	bl	1f452 <strtol>
   12f96:	b286      	uxth	r6, r0
	if (settings_val_get_len_cb(val_ctx) == 0) {
   12f98:	4628      	mov	r0, r5
   12f9a:	f00c f9c3 	bl	1f324 <settings_val_get_len_cb>
   12f9e:	4604      	mov	r4, r0
   12fa0:	b958      	cbnz	r0, 12fba <app_key_set+0x36>
		app = bt_mesh_app_key_find(app_idx);
   12fa2:	4630      	mov	r0, r6
   12fa4:	f7fa fc0a 	bl	d7bc <bt_mesh_app_key_find>
		if (app) {
   12fa8:	4605      	mov	r5, r0
   12faa:	b118      	cbz	r0, 12fb4 <app_key_set+0x30>
			bt_mesh_app_key_del(app, false);
   12fac:	4621      	mov	r1, r4
   12fae:	f7fd fccd 	bl	1094c <bt_mesh_app_key_del>
		return 0;
   12fb2:	4625      	mov	r5, r4
}
   12fb4:	4628      	mov	r0, r5
   12fb6:	b00b      	add	sp, #44	; 0x2c
   12fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = mesh_x_set(val_ctx, &key, sizeof(key));
   12fba:	4628      	mov	r0, r5
   12fbc:	2223      	movs	r2, #35	; 0x23
   12fbe:	a901      	add	r1, sp, #4
   12fc0:	f7fe fed2 	bl	11d68 <mesh_x_set>
	if (err) {
   12fc4:	4605      	mov	r5, r0
   12fc6:	b170      	cbz	r0, 12fe6 <app_key_set+0x62>
		BT_ERR("Failed to set \'app-key\'");
   12fc8:	2301      	movs	r3, #1
   12fca:	f04f 0100 	mov.w	r1, #0
   12fce:	f363 0107 	bfi	r1, r3, #0, #8
   12fd2:	4a22      	ldr	r2, [pc, #136]	; (1305c <app_key_set+0xd8>)
   12fd4:	4b22      	ldr	r3, [pc, #136]	; (13060 <app_key_set+0xdc>)
   12fd6:	4823      	ldr	r0, [pc, #140]	; (13064 <app_key_set+0xe0>)
   12fd8:	1a9b      	subs	r3, r3, r2
   12fda:	08db      	lsrs	r3, r3, #3
   12fdc:	f363 118f 	bfi	r1, r3, #6, #10
   12fe0:	f00b fa2f 	bl	1e442 <log_0>
		return err;
   12fe4:	e7e6      	b.n	12fb4 <app_key_set+0x30>
	app = bt_mesh_app_key_find(app_idx);
   12fe6:	4630      	mov	r0, r6
   12fe8:	f7fa fbe8 	bl	d7bc <bt_mesh_app_key_find>
	if (!app) {
   12fec:	4604      	mov	r4, r0
   12fee:	b9a8      	cbnz	r0, 1301c <app_key_set+0x98>
		app = bt_mesh_app_key_alloc(app_idx);
   12ff0:	4630      	mov	r0, r6
   12ff2:	f7fd fc99 	bl	10928 <bt_mesh_app_key_alloc>
	if (!app) {
   12ff6:	4604      	mov	r4, r0
   12ff8:	b980      	cbnz	r0, 1301c <app_key_set+0x98>
		BT_ERR("No space for a new app key");
   12ffa:	2301      	movs	r3, #1
   12ffc:	f04f 0100 	mov.w	r1, #0
   13000:	f363 0107 	bfi	r1, r3, #0, #8
   13004:	4a15      	ldr	r2, [pc, #84]	; (1305c <app_key_set+0xd8>)
   13006:	4b16      	ldr	r3, [pc, #88]	; (13060 <app_key_set+0xdc>)
   13008:	4817      	ldr	r0, [pc, #92]	; (13068 <app_key_set+0xe4>)
   1300a:	1a9b      	subs	r3, r3, r2
   1300c:	08db      	lsrs	r3, r3, #3
   1300e:	f363 118f 	bfi	r1, r3, #6, #10
   13012:	f00b fa16 	bl	1e442 <log_0>
		return -ENOMEM;
   13016:	f06f 050b 	mvn.w	r5, #11
   1301a:	e7cb      	b.n	12fb4 <app_key_set+0x30>
	app->net_idx = key.net_idx;
   1301c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   13020:	8023      	strh	r3, [r4, #0]
	memcpy(app->keys[0].val, key.val[0], 16);
   13022:	1da7      	adds	r7, r4, #6
	app->updated = key.updated;
   13024:	f89d 3006 	ldrb.w	r3, [sp, #6]
   13028:	7123      	strb	r3, [r4, #4]
	app->app_idx = app_idx;
   1302a:	8066      	strh	r6, [r4, #2]
	memcpy(app->keys[0].val, key.val[0], 16);
   1302c:	f10d 0107 	add.w	r1, sp, #7
	memcpy(app->keys[1].val, key.val[1], 16);
   13030:	f104 0617 	add.w	r6, r4, #23
	memcpy(app->keys[0].val, key.val[0], 16);
   13034:	2210      	movs	r2, #16
   13036:	4638      	mov	r0, r7
   13038:	f00c fae6 	bl	1f608 <memcpy>
	memcpy(app->keys[1].val, key.val[1], 16);
   1303c:	2210      	movs	r2, #16
   1303e:	f10d 0117 	add.w	r1, sp, #23
   13042:	4630      	mov	r0, r6
   13044:	f00c fae0 	bl	1f608 <memcpy>
   13048:	1d61      	adds	r1, r4, #5
   1304a:	4638      	mov	r0, r7
   1304c:	f7fb f900 	bl	e250 <bt_mesh_k4>
   13050:	f104 0116 	add.w	r1, r4, #22
   13054:	4630      	mov	r0, r6
   13056:	f7fb f8fb 	bl	e250 <bt_mesh_k4>
   1305a:	e7ab      	b.n	12fb4 <app_key_set+0x30>
   1305c:	000233ec 	.word	0x000233ec
   13060:	000234cc 	.word	0x000234cc
   13064:	00026f18 	.word	0x00026f18
   13068:	00026f30 	.word	0x00026f30

0001306c <bt_mesh_store_seq>:
	    (bt_mesh.seq % CONFIG_BT_MESH_SEQ_STORE_RATE)) {
   1306c:	4b03      	ldr	r3, [pc, #12]	; (1307c <bt_mesh_store_seq+0x10>)
   1306e:	685b      	ldr	r3, [r3, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
   13070:	065b      	lsls	r3, r3, #25
   13072:	d102      	bne.n	1307a <bt_mesh_store_seq+0xe>
	schedule_store(BT_MESH_SEQ_PENDING);
   13074:	200a      	movs	r0, #10
   13076:	f7ff bedf 	b.w	12e38 <schedule_store>
}
   1307a:	4770      	bx	lr
   1307c:	20007924 	.word	0x20007924

00013080 <bt_mesh_settings_init>:
	schedule_store(BT_MESH_MOD_PENDING);
}

void bt_mesh_settings_init(void)
{
	k_delayed_work_init(&pending_store, store_pending);
   13080:	4901      	ldr	r1, [pc, #4]	; (13088 <bt_mesh_settings_init+0x8>)
   13082:	4802      	ldr	r0, [pc, #8]	; (1308c <bt_mesh_settings_init+0xc>)
   13084:	f00f bf81 	b.w	22f8a <k_delayed_work_init>
   13088:	000129d1 	.word	0x000129d1
   1308c:	20000ad0 	.word	0x20000ad0

00013090 <ack_complete>:
static u8_t pending_ack = XACT_NVAL;

static void ack_complete(u16_t duration, int err, void *user_data)
{
	BT_DBG("xact %u complete", (u8_t)pending_ack);
	pending_ack = XACT_NVAL;
   13090:	4b01      	ldr	r3, [pc, #4]	; (13098 <ack_complete+0x8>)
   13092:	22ff      	movs	r2, #255	; 0xff
   13094:	701a      	strb	r2, [r3, #0]
}
   13096:	4770      	bx	lr
   13098:	20007f84 	.word	0x20007f84

0001309c <free_segments>:
{
   1309c:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1309e:	2400      	movs	r4, #0
   130a0:	4d08      	ldr	r5, [pc, #32]	; (130c4 <free_segments+0x28>)
		link.tx.buf[i] = NULL;
   130a2:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   130a4:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   130a8:	b158      	cbz	r0, 130c2 <free_segments+0x26>
		BT_MESH_ADV(buf)->busy = 0U;
   130aa:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   130ac:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   130b0:	7a1a      	ldrb	r2, [r3, #8]
   130b2:	f366 0282 	bfi	r2, r6, #2, #1
   130b6:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   130b8:	3401      	adds	r4, #1
		net_buf_unref(buf);
   130ba:	f007 fdbb 	bl	1ac34 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   130be:	2c03      	cmp	r4, #3
   130c0:	d1f0      	bne.n	130a4 <free_segments+0x8>
}
   130c2:	bd70      	pop	{r4, r5, r6, pc}
   130c4:	200001e4 	.word	0x200001e4

000130c8 <prov_clear_tx>:
{
   130c8:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&link.tx.retransmit);
   130ca:	4803      	ldr	r0, [pc, #12]	; (130d8 <prov_clear_tx+0x10>)
   130cc:	f00f ff65 	bl	22f9a <k_delayed_work_cancel>
}
   130d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   130d4:	f7ff bfe2 	b.w	1309c <free_segments>
   130d8:	200001f0 	.word	0x200001f0

000130dc <gen_prov_ack>:

static void gen_prov_ack(struct prov_rx *rx, struct net_buf_simple *buf)
{
	BT_DBG("len %u", buf->len);

	if (!link.tx.buf[0]) {
   130dc:	4b05      	ldr	r3, [pc, #20]	; (130f4 <gen_prov_ack+0x18>)
   130de:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   130e2:	b132      	cbz	r2, 130f2 <gen_prov_ack+0x16>
		return;
	}

	if (rx->xact_id == link.tx.id) {
   130e4:	7902      	ldrb	r2, [r0, #4]
   130e6:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
   130ea:	429a      	cmp	r2, r3
   130ec:	d101      	bne.n	130f2 <gen_prov_ack+0x16>
		prov_clear_tx();
   130ee:	f7ff bfeb 	b.w	130c8 <prov_clear_tx>
	}
}
   130f2:	4770      	bx	lr
   130f4:	200000a8 	.word	0x200000a8

000130f8 <send_reliable>:
{
   130f8:	b570      	push	{r4, r5, r6, lr}
   130fa:	f00f ffab 	bl	23054 <z_impl_k_uptime_get>
	link.tx.start = k_uptime_get();
   130fe:	4c0d      	ldr	r4, [pc, #52]	; (13134 <send_reliable+0x3c>)
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   13100:	4e0d      	ldr	r6, [pc, #52]	; (13138 <send_reliable+0x40>)
	link.tx.start = k_uptime_get();
   13102:	e9c4 014c 	strd	r0, r1, [r4, #304]	; 0x130
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   13106:	2500      	movs	r5, #0
   13108:	f504 749e 	add.w	r4, r4, #316	; 0x13c
		struct net_buf *buf = link.tx.buf[i];
   1310c:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   13110:	b178      	cbz	r0, 13132 <send_reliable+0x3a>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   13112:	3501      	adds	r5, #1
   13114:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
   13116:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   1311a:	d005      	beq.n	13128 <send_reliable+0x30>
   1311c:	6823      	ldr	r3, [r4, #0]
   1311e:	b11b      	cbz	r3, 13128 <send_reliable+0x30>
			bt_mesh_adv_send(buf, NULL, NULL);
   13120:	4611      	mov	r1, r2
   13122:	f7f8 fafd 	bl	b720 <bt_mesh_adv_send>
   13126:	e7f1      	b.n	1310c <send_reliable+0x14>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   13128:	4631      	mov	r1, r6
   1312a:	f7f8 faf9 	bl	b720 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1312e:	2d03      	cmp	r5, #3
   13130:	d1ec      	bne.n	1310c <send_reliable+0x14>
}
   13132:	bd70      	pop	{r4, r5, r6, pc}
   13134:	200000a8 	.word	0x200000a8
   13138:	20007be0 	.word	0x20007be0

0001313c <prov_failed>:
	BT_WARN("Error: 0x%02x", data[0]);
   1313c:	2302      	movs	r3, #2
   1313e:	f04f 0200 	mov.w	r2, #0
   13142:	f363 0207 	bfi	r2, r3, #0, #8
   13146:	4905      	ldr	r1, [pc, #20]	; (1315c <prov_failed+0x20>)
   13148:	4b05      	ldr	r3, [pc, #20]	; (13160 <prov_failed+0x24>)
   1314a:	1a5b      	subs	r3, r3, r1
   1314c:	08db      	lsrs	r3, r3, #3
   1314e:	7801      	ldrb	r1, [r0, #0]
   13150:	4804      	ldr	r0, [pc, #16]	; (13164 <prov_failed+0x28>)
   13152:	f363 128f 	bfi	r2, r3, #6, #10
   13156:	f00b b981 	b.w	1e45c <log_1>
   1315a:	bf00      	nop
   1315c:	000233ec 	.word	0x000233ec
   13160:	000234bc 	.word	0x000234bc
   13164:	000277fb 	.word	0x000277fb

00013168 <adv_buf_create>:
{
   13168:	b510      	push	{r4, lr}
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV, PROV_XMIT, BUF_TIMEOUT);
   1316a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1316e:	210a      	movs	r1, #10
   13170:	2000      	movs	r0, #0
   13172:	f7f8 fac5 	bl	b700 <bt_mesh_adv_create>
	if (!buf) {
   13176:	4604      	mov	r4, r0
   13178:	b968      	cbnz	r0, 13196 <adv_buf_create+0x2e>
		BT_ERR("Out of provisioning buffers");
   1317a:	2301      	movs	r3, #1
   1317c:	f04f 0100 	mov.w	r1, #0
   13180:	f363 0107 	bfi	r1, r3, #0, #8
   13184:	4a05      	ldr	r2, [pc, #20]	; (1319c <adv_buf_create+0x34>)
   13186:	4b06      	ldr	r3, [pc, #24]	; (131a0 <adv_buf_create+0x38>)
   13188:	4806      	ldr	r0, [pc, #24]	; (131a4 <adv_buf_create+0x3c>)
   1318a:	1a9b      	subs	r3, r3, r2
   1318c:	08db      	lsrs	r3, r3, #3
   1318e:	f363 118f 	bfi	r1, r3, #6, #10
   13192:	f00b f956 	bl	1e442 <log_0>
}
   13196:	4620      	mov	r0, r4
   13198:	bd10      	pop	{r4, pc}
   1319a:	bf00      	nop
   1319c:	000233ec 	.word	0x000233ec
   131a0:	000234bc 	.word	0x000234bc
   131a4:	00027462 	.word	0x00027462

000131a8 <prov_send>:
{
   131a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (link.conn) {
   131ac:	4e54      	ldr	r6, [pc, #336]	; (13300 <prov_send+0x158>)
{
   131ae:	4604      	mov	r4, r0
	if (link.conn) {
   131b0:	6870      	ldr	r0, [r6, #4]
   131b2:	b128      	cbz	r0, 131c0 <prov_send+0x18>
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
   131b4:	4622      	mov	r2, r4
   131b6:	2103      	movs	r1, #3
}
   131b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
   131bc:	f001 bf0c 	b.w	14fd8 <bt_mesh_proxy_send>
	prov_clear_tx();
   131c0:	f7ff ff82 	bl	130c8 <prov_clear_tx>
	start = adv_buf_create();
   131c4:	f7ff ffd0 	bl	13168 <adv_buf_create>
	if (!start) {
   131c8:	4680      	mov	r8, r0
   131ca:	2800      	cmp	r0, #0
   131cc:	d070      	beq.n	132b0 <prov_send+0x108>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
   131ce:	f896 5138 	ldrb.w	r5, [r6, #312]	; 0x138
	net_buf_add_be32(start, link.id);
   131d2:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
   131d6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 13310 <prov_send+0x168>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
   131da:	1e6b      	subs	r3, r5, #1
   131dc:	b2db      	uxtb	r3, r3
   131de:	2bfd      	cmp	r3, #253	; 0xfd
		return ++link.tx.id;
   131e0:	bf98      	it	ls
   131e2:	3501      	addls	r5, #1
	net_buf_add_be32(start, link.id);
   131e4:	f100 0708 	add.w	r7, r0, #8
		return ++link.tx.id;
   131e8:	bf94      	ite	ls
   131ea:	b2ed      	uxtbls	r5, r5
	return link.tx.id;
   131ec:	2580      	movhi	r5, #128	; 0x80
	net_buf_add_be32(start, link.id);
   131ee:	4638      	mov	r0, r7
   131f0:	f886 5138 	strb.w	r5, [r6, #312]	; 0x138
   131f4:	f00f fa01 	bl	225fa <net_buf_simple_add_be32>
	net_buf_add_u8(start, xact_id);
   131f8:	4629      	mov	r1, r5
   131fa:	4638      	mov	r0, r7
   131fc:	f00f f9d4 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   13200:	88a3      	ldrh	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
   13202:	b2da      	uxtb	r2, r3
   13204:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
   13206:	bf81      	itttt	hi
   13208:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   1320c:	b2c9      	uxtbhi	r1, r1
   1320e:	2317      	movhi	r3, #23
   13210:	fbb1 f1f3 	udivhi	r1, r1, r3
   13214:	bf86      	itte	hi
   13216:	3101      	addhi	r1, #1
   13218:	b2c9      	uxtbhi	r1, r1
		return 0;
   1321a:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   1321c:	0089      	lsls	r1, r1, #2
   1321e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   13222:	4638      	mov	r0, r7
   13224:	f00f f9c0 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_add_be16(start, msg->len);
   13228:	88a1      	ldrh	r1, [r4, #4]
   1322a:	4638      	mov	r0, r7
   1322c:	f00f f9d3 	bl	225d6 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   13230:	7921      	ldrb	r1, [r4, #4]
   13232:	6820      	ldr	r0, [r4, #0]
   13234:	f7fb f84a 	bl	e2cc <bt_mesh_fcs_calc>
   13238:	4601      	mov	r1, r0
   1323a:	4638      	mov	r0, r7
   1323c:	f00f f9b4 	bl	225a8 <net_buf_simple_add_u8>
	link.tx.buf[0] = start;
   13240:	f8c6 813c 	str.w	r8, [r6, #316]	; 0x13c
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   13244:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	net_buf_add_mem(start, msg->data, seg_len);
   13248:	6821      	ldr	r1, [r4, #0]
   1324a:	f1b8 0f14 	cmp.w	r8, #20
   1324e:	bf28      	it	cs
   13250:	f04f 0814 	movcs.w	r8, #20
   13254:	4642      	mov	r2, r8
   13256:	4638      	mov	r0, r7
   13258:	f00f f99d 	bl	22596 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   1325c:	4641      	mov	r1, r8
   1325e:	4620      	mov	r0, r4
   13260:	f00f fa00 	bl	22664 <net_buf_simple_pull>
   13264:	f04f 0800 	mov.w	r8, #0
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   13268:	88a7      	ldrh	r7, [r4, #4]
   1326a:	b91f      	cbnz	r7, 13274 <prov_send+0xcc>
	send_reliable();
   1326c:	f7ff ff44 	bl	130f8 <send_reliable>
	return 0;
   13270:	4638      	mov	r0, r7
   13272:	e014      	b.n	1329e <prov_send+0xf6>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   13274:	f1b8 0f08 	cmp.w	r8, #8
   13278:	d113      	bne.n	132a2 <prov_send+0xfa>
			BT_ERR("Too big message");
   1327a:	2301      	movs	r3, #1
   1327c:	f04f 0100 	mov.w	r1, #0
   13280:	4a20      	ldr	r2, [pc, #128]	; (13304 <prov_send+0x15c>)
   13282:	4821      	ldr	r0, [pc, #132]	; (13308 <prov_send+0x160>)
   13284:	f363 0107 	bfi	r1, r3, #0, #8
   13288:	4b20      	ldr	r3, [pc, #128]	; (1330c <prov_send+0x164>)
   1328a:	1a9b      	subs	r3, r3, r2
   1328c:	08db      	lsrs	r3, r3, #3
   1328e:	f363 118f 	bfi	r1, r3, #6, #10
   13292:	f00b f8d6 	bl	1e442 <log_0>
			free_segments();
   13296:	f7ff ff01 	bl	1309c <free_segments>
			return -E2BIG;
   1329a:	f06f 0006 	mvn.w	r0, #6
}
   1329e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create();
   132a2:	f7ff ff61 	bl	13168 <adv_buf_create>
		if (!buf) {
   132a6:	f108 0804 	add.w	r8, r8, #4
   132aa:	b920      	cbnz	r0, 132b6 <prov_send+0x10e>
			free_segments();
   132ac:	f7ff fef6 	bl	1309c <free_segments>
		return -ENOBUFS;
   132b0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   132b4:	e7f3      	b.n	1329e <prov_send+0xf6>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   132b6:	f8b4 a004 	ldrh.w	sl, [r4, #4]
		link.tx.buf[seg_id] = buf;
   132ba:	f849 0b04 	str.w	r0, [r9], #4
		net_buf_add_be32(buf, link.id);
   132be:	f100 0708 	add.w	r7, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   132c2:	f1ba 0f17 	cmp.w	sl, #23
		net_buf_add_be32(buf, link.id);
   132c6:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
   132ca:	4638      	mov	r0, r7
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   132cc:	bf28      	it	cs
   132ce:	f04f 0a17 	movcs.w	sl, #23
		net_buf_add_be32(buf, link.id);
   132d2:	f00f f992 	bl	225fa <net_buf_simple_add_be32>
		net_buf_add_u8(buf, xact_id);
   132d6:	4629      	mov	r1, r5
   132d8:	4638      	mov	r0, r7
   132da:	f00f f965 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   132de:	f048 0102 	orr.w	r1, r8, #2
   132e2:	b2c9      	uxtb	r1, r1
   132e4:	4638      	mov	r0, r7
   132e6:	f00f f95f 	bl	225a8 <net_buf_simple_add_u8>
		net_buf_add_mem(buf, msg->data, seg_len);
   132ea:	6821      	ldr	r1, [r4, #0]
   132ec:	4652      	mov	r2, sl
   132ee:	4638      	mov	r0, r7
   132f0:	f00f f951 	bl	22596 <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   132f4:	4651      	mov	r1, sl
   132f6:	4620      	mov	r0, r4
   132f8:	f00f f9b4 	bl	22664 <net_buf_simple_pull>
   132fc:	e7b4      	b.n	13268 <prov_send+0xc0>
   132fe:	bf00      	nop
   13300:	200000a8 	.word	0x200000a8
   13304:	000233ec 	.word	0x000233ec
   13308:	000265a9 	.word	0x000265a9
   1330c:	000234bc 	.word	0x000234bc
   13310:	200001e8 	.word	0x200001e8

00013314 <bearer_ctl_send>:
{
   13314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13318:	4604      	mov	r4, r0
   1331a:	4688      	mov	r8, r1
   1331c:	4691      	mov	r9, r2
	prov_clear_tx();
   1331e:	f7ff fed3 	bl	130c8 <prov_clear_tx>
	buf = adv_buf_create();
   13322:	f7ff ff21 	bl	13168 <adv_buf_create>
	if (!buf) {
   13326:	4606      	mov	r6, r0
   13328:	b1f0      	cbz	r0, 13368 <bearer_ctl_send+0x54>
	net_buf_add_be32(buf, link.id);
   1332a:	4f11      	ldr	r7, [pc, #68]	; (13370 <bearer_ctl_send+0x5c>)
   1332c:	f100 0508 	add.w	r5, r0, #8
   13330:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
   13334:	4628      	mov	r0, r5
   13336:	f00f f960 	bl	225fa <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
   1333a:	2100      	movs	r1, #0
   1333c:	4628      	mov	r0, r5
   1333e:	f00f f933 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
   13342:	00a1      	lsls	r1, r4, #2
   13344:	f041 0103 	orr.w	r1, r1, #3
   13348:	b2c9      	uxtb	r1, r1
   1334a:	4628      	mov	r0, r5
   1334c:	f00f f92c 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
   13350:	464a      	mov	r2, r9
   13352:	4641      	mov	r1, r8
   13354:	4628      	mov	r0, r5
   13356:	f00f f91e 	bl	22596 <net_buf_simple_add_mem>
	link.tx.buf[0] = buf;
   1335a:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
	send_reliable();
   1335e:	f7ff fecb 	bl	130f8 <send_reliable>
	return 0;
   13362:	2000      	movs	r0, #0
}
   13364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
   13368:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1336c:	e7fa      	b.n	13364 <bearer_ctl_send+0x50>
   1336e:	bf00      	nop
   13370:	200000a8 	.word	0x200000a8

00013374 <gen_prov_ack_send>:
{
   13374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (pending_ack == xact_id) {
   13376:	4d16      	ldr	r5, [pc, #88]	; (133d0 <gen_prov_ack_send+0x5c>)
   13378:	782b      	ldrb	r3, [r5, #0]
   1337a:	4283      	cmp	r3, r0
{
   1337c:	4606      	mov	r6, r0
	if (pending_ack == xact_id) {
   1337e:	d025      	beq.n	133cc <gen_prov_ack_send+0x58>
	buf = adv_buf_create();
   13380:	f7ff fef2 	bl	13168 <adv_buf_create>
	if (!buf) {
   13384:	4604      	mov	r4, r0
   13386:	b308      	cbz	r0, 133cc <gen_prov_ack_send+0x58>
	if (pending_ack == XACT_NVAL) {
   13388:	782b      	ldrb	r3, [r5, #0]
   1338a:	2bff      	cmp	r3, #255	; 0xff
	net_buf_add_be32(buf, link.id);
   1338c:	4b11      	ldr	r3, [pc, #68]	; (133d4 <gen_prov_ack_send+0x60>)
		pending_ack = xact_id;
   1338e:	bf08      	it	eq
   13390:	702e      	strbeq	r6, [r5, #0]
	net_buf_add_be32(buf, link.id);
   13392:	f100 0508 	add.w	r5, r0, #8
   13396:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
		complete = &cb;
   1339a:	bf08      	it	eq
   1339c:	4f0e      	ldreq	r7, [pc, #56]	; (133d8 <gen_prov_ack_send+0x64>)
	net_buf_add_be32(buf, link.id);
   1339e:	4628      	mov	r0, r5
		complete = NULL;
   133a0:	bf18      	it	ne
   133a2:	2700      	movne	r7, #0
	net_buf_add_be32(buf, link.id);
   133a4:	f00f f929 	bl	225fa <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   133a8:	4631      	mov	r1, r6
   133aa:	4628      	mov	r0, r5
   133ac:	f00f f8fc 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
   133b0:	2101      	movs	r1, #1
   133b2:	4628      	mov	r0, r5
   133b4:	f00f f8f8 	bl	225a8 <net_buf_simple_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
   133b8:	4620      	mov	r0, r4
   133ba:	4639      	mov	r1, r7
   133bc:	2200      	movs	r2, #0
   133be:	f7f8 f9af 	bl	b720 <bt_mesh_adv_send>
	net_buf_unref(buf);
   133c2:	4620      	mov	r0, r4
}
   133c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
   133c8:	f007 bc34 	b.w	1ac34 <net_buf_unref>
}
   133cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   133ce:	bf00      	nop
   133d0:	20007f84 	.word	0x20007f84
   133d4:	200000a8 	.word	0x200000a8
   133d8:	00023dd0 	.word	0x00023dd0

000133dc <prov_start>:
{
   133dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (data[0] != PROV_ALG_P256) {
   133e0:	7801      	ldrb	r1, [r0, #0]
{
   133e2:	b08c      	sub	sp, #48	; 0x30
   133e4:	4607      	mov	r7, r0
	if (data[0] != PROV_ALG_P256) {
   133e6:	b189      	cbz	r1, 1340c <prov_start+0x30>
		BT_ERR("Unknown algorithm 0x%02x", data[0]);
   133e8:	2301      	movs	r3, #1
   133ea:	f04f 0200 	mov.w	r2, #0
   133ee:	f363 0207 	bfi	r2, r3, #0, #8
   133f2:	4875      	ldr	r0, [pc, #468]	; (135c8 <prov_start+0x1ec>)
   133f4:	4b75      	ldr	r3, [pc, #468]	; (135cc <prov_start+0x1f0>)
   133f6:	1a1b      	subs	r3, r3, r0
   133f8:	08db      	lsrs	r3, r3, #3
   133fa:	4875      	ldr	r0, [pc, #468]	; (135d0 <prov_start+0x1f4>)
   133fc:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Invalid public key value: 0x%02x", data[1]);
   13400:	f00b f82c 	bl	1e45c <log_1>
		prov_send_fail_msg(PROV_ERR_NVAL_FMT);
   13404:	2002      	movs	r0, #2
   13406:	f00e fa7f 	bl	21908 <prov_send_fail_msg>
   1340a:	e029      	b.n	13460 <prov_start+0x84>
	if (data[1] > 0x01) {
   1340c:	7841      	ldrb	r1, [r0, #1]
   1340e:	2901      	cmp	r1, #1
   13410:	d90c      	bls.n	1342c <prov_start+0x50>
		BT_ERR("Invalid public key value: 0x%02x", data[1]);
   13412:	2301      	movs	r3, #1
   13414:	f04f 0200 	mov.w	r2, #0
   13418:	f363 0207 	bfi	r2, r3, #0, #8
   1341c:	486a      	ldr	r0, [pc, #424]	; (135c8 <prov_start+0x1ec>)
   1341e:	4b6b      	ldr	r3, [pc, #428]	; (135cc <prov_start+0x1f0>)
   13420:	1a1b      	subs	r3, r3, r0
   13422:	08db      	lsrs	r3, r3, #3
   13424:	f363 128f 	bfi	r2, r3, #6, #10
   13428:	486a      	ldr	r0, [pc, #424]	; (135d4 <prov_start+0x1f8>)
   1342a:	e7e9      	b.n	13400 <prov_start+0x24>
	memcpy(&link.conf_inputs[12], data, 5);
   1342c:	4d6a      	ldr	r5, [pc, #424]	; (135d8 <prov_start+0x1fc>)
   1342e:	4601      	mov	r1, r0
   13430:	2205      	movs	r2, #5
   13432:	f105 0088 	add.w	r0, r5, #136	; 0x88
   13436:	f00c f8e7 	bl	1f608 <memcpy>
	link.expect = PROV_PUB_KEY;
   1343a:	2303      	movs	r3, #3
   1343c:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	switch (method) {
   13440:	78bb      	ldrb	r3, [r7, #2]
	if (prov_auth(data[2], data[3], data[4]) < 0) {
   13442:	78f9      	ldrb	r1, [r7, #3]
   13444:	793c      	ldrb	r4, [r7, #4]
	switch (method) {
   13446:	46a8      	mov	r8, r5
   13448:	2b03      	cmp	r3, #3
   1344a:	d858      	bhi.n	134fe <prov_start+0x122>
   1344c:	e8df f003 	tbb	[pc, r3]
   13450:	a11e0b02 	.word	0xa11e0b02
		if (action || size) {
   13454:	4321      	orrs	r1, r4
   13456:	d152      	bne.n	134fe <prov_start+0x122>
		(void)memset(link.auth, 0, sizeof(link.auth));
   13458:	4860      	ldr	r0, [pc, #384]	; (135dc <prov_start+0x200>)
   1345a:	2210      	movs	r2, #16
		(void)memset(link.auth, 0,
   1345c:	f00c f8fe 	bl	1f65c <memset>
}
   13460:	b00c      	add	sp, #48	; 0x30
   13462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (action || size) {
   13466:	430c      	orrs	r4, r1
   13468:	d149      	bne.n	134fe <prov_start+0x122>
		memcpy(link.auth + 16 - prov->static_val_len,
   1346a:	4e5d      	ldr	r6, [pc, #372]	; (135e0 <prov_start+0x204>)
   1346c:	4d5b      	ldr	r5, [pc, #364]	; (135dc <prov_start+0x200>)
   1346e:	6833      	ldr	r3, [r6, #0]
   13470:	7c1a      	ldrb	r2, [r3, #16]
   13472:	68d9      	ldr	r1, [r3, #12]
   13474:	f1c2 0010 	rsb	r0, r2, #16
   13478:	4428      	add	r0, r5
   1347a:	f00c f8c5 	bl	1f608 <memcpy>
			     sizeof(link.auth) - prov->static_val_len);
   1347e:	6833      	ldr	r3, [r6, #0]
   13480:	7c1a      	ldrb	r2, [r3, #16]
		(void)memset(link.auth, 0,
   13482:	4621      	mov	r1, r4
   13484:	f1c2 0210 	rsb	r2, r2, #16
   13488:	4628      	mov	r0, r5
   1348a:	e7e7      	b.n	1345c <prov_start+0x80>
	switch (action) {
   1348c:	2904      	cmp	r1, #4
   1348e:	d836      	bhi.n	134fe <prov_start+0x122>
   13490:	4b54      	ldr	r3, [pc, #336]	; (135e4 <prov_start+0x208>)
   13492:	f813 9001 	ldrb.w	r9, [r3, r1]
		if (!output) {
   13496:	f1b9 0f00 	cmp.w	r9, #0
   1349a:	d030      	beq.n	134fe <prov_start+0x122>
		if (!(prov->output_actions & output)) {
   1349c:	f8df a140 	ldr.w	sl, [pc, #320]	; 135e0 <prov_start+0x204>
   134a0:	f8da 3000 	ldr.w	r3, [sl]
   134a4:	8a5a      	ldrh	r2, [r3, #18]
   134a6:	ea12 0f09 	tst.w	r2, r9
   134aa:	4655      	mov	r5, sl
   134ac:	d027      	beq.n	134fe <prov_start+0x122>
		if (size > prov->output_size) {
   134ae:	7c5b      	ldrb	r3, [r3, #17]
   134b0:	42a3      	cmp	r3, r4
   134b2:	d324      	bcc.n	134fe <prov_start+0x122>
		if (output == BT_MESH_DISPLAY_STRING) {
   134b4:	f1b9 0f10 	cmp.w	r9, #16
   134b8:	d145      	bne.n	13546 <prov_start+0x16a>
			bt_rand(str, size);
   134ba:	4621      	mov	r1, r4
   134bc:	a804      	add	r0, sp, #16
   134be:	f00e fcb9 	bl	21e34 <bt_rand>
				str[i] %= 36;
   134c2:	2624      	movs	r6, #36	; 0x24
   134c4:	a804      	add	r0, sp, #16
			bt_rand(str, size);
   134c6:	2100      	movs	r1, #0
			for (i = 0U; i < size; i++) {
   134c8:	b2cb      	uxtb	r3, r1
   134ca:	429c      	cmp	r4, r3
   134cc:	d82b      	bhi.n	13526 <prov_start+0x14a>
			memcpy(link.auth, str, size);
   134ce:	4e43      	ldr	r6, [pc, #268]	; (135dc <prov_start+0x200>)
			str[size] = '\0';
   134d0:	ab0c      	add	r3, sp, #48	; 0x30
   134d2:	4423      	add	r3, r4
   134d4:	f04f 0800 	mov.w	r8, #0
			memcpy(link.auth, str, size);
   134d8:	4622      	mov	r2, r4
   134da:	a904      	add	r1, sp, #16
   134dc:	4630      	mov	r0, r6
			str[size] = '\0';
   134de:	f803 8c20 	strb.w	r8, [r3, #-32]
			memcpy(link.auth, str, size);
   134e2:	f00c f891 	bl	1f608 <memcpy>
			(void)memset(link.auth + size, 0,
   134e6:	f1c4 0210 	rsb	r2, r4, #16
   134ea:	4641      	mov	r1, r8
   134ec:	1930      	adds	r0, r6, r4
   134ee:	f00c f8b5 	bl	1f65c <memset>
			return prov->output_string((char *)str);
   134f2:	682b      	ldr	r3, [r5, #0]
   134f4:	a804      	add	r0, sp, #16
   134f6:	69db      	ldr	r3, [r3, #28]
   134f8:	4798      	blx	r3
	if (prov_auth(data[2], data[3], data[4]) < 0) {
   134fa:	2800      	cmp	r0, #0
   134fc:	dab0      	bge.n	13460 <prov_start+0x84>
		BT_ERR("Invalid authentication method: 0x%02x; "
   134fe:	2301      	movs	r3, #1
   13500:	f04f 0200 	mov.w	r2, #0
   13504:	f363 0207 	bfi	r2, r3, #0, #8
   13508:	492f      	ldr	r1, [pc, #188]	; (135c8 <prov_start+0x1ec>)
   1350a:	4b30      	ldr	r3, [pc, #192]	; (135cc <prov_start+0x1f0>)
   1350c:	4836      	ldr	r0, [pc, #216]	; (135e8 <prov_start+0x20c>)
   1350e:	1a5b      	subs	r3, r3, r1
   13510:	08db      	lsrs	r3, r3, #3
   13512:	f363 128f 	bfi	r2, r3, #6, #10
   13516:	f8ad 2000 	strh.w	r2, [sp]
   1351a:	793b      	ldrb	r3, [r7, #4]
   1351c:	78fa      	ldrb	r2, [r7, #3]
   1351e:	78b9      	ldrb	r1, [r7, #2]
   13520:	f00a ffc8 	bl	1e4b4 <log_3>
   13524:	e76e      	b.n	13404 <prov_start+0x28>
				str[i] %= 36;
   13526:	7803      	ldrb	r3, [r0, #0]
   13528:	fbb3 f2f6 	udiv	r2, r3, r6
   1352c:	fb06 3212 	mls	r2, r6, r2, r3
   13530:	b2d2      	uxtb	r2, r2
				if (str[i] < 10) {
   13532:	b253      	sxtb	r3, r2
   13534:	2a09      	cmp	r2, #9
					str[i] += '0';
   13536:	bf94      	ite	ls
   13538:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   1353a:	3337      	addhi	r3, #55	; 0x37
   1353c:	b2db      	uxtb	r3, r3
   1353e:	f800 3b01 	strb.w	r3, [r0], #1
   13542:	3101      	adds	r1, #1
   13544:	e7c0      	b.n	134c8 <prov_start+0xec>
			u32_t div[8] = { 10, 100, 1000, 10000, 100000,
   13546:	4e29      	ldr	r6, [pc, #164]	; (135ec <prov_start+0x210>)
   13548:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1354a:	ad04      	add	r5, sp, #16
   1354c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1354e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   13552:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   13556:	2104      	movs	r1, #4
   13558:	a803      	add	r0, sp, #12
   1355a:	f00e fc6b 	bl	21e34 <bt_rand>
			num %= div[size - 1];
   1355e:	ab0c      	add	r3, sp, #48	; 0x30
   13560:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   13564:	9803      	ldr	r0, [sp, #12]
   13566:	f854 2c24 	ldr.w	r2, [r4, #-36]
   1356a:	fbb0 f3f2 	udiv	r3, r0, r2
   1356e:	fb02 0313 	mls	r3, r2, r3, r0
   13572:	9303      	str	r3, [sp, #12]
	dst[1] = val;
   13574:	ba1b      	rev	r3, r3
	dst[0] = val >> 8;
   13576:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
			(void)memset(link.auth, 0, 12);
   1357a:	220c      	movs	r2, #12
   1357c:	2100      	movs	r1, #0
   1357e:	4817      	ldr	r0, [pc, #92]	; (135dc <prov_start+0x200>)
   13580:	f00c f86c 	bl	1f65c <memset>
			return prov->output_number(output, num);
   13584:	f8da 3000 	ldr.w	r3, [sl]
   13588:	9903      	ldr	r1, [sp, #12]
   1358a:	699b      	ldr	r3, [r3, #24]
   1358c:	4648      	mov	r0, r9
   1358e:	4798      	blx	r3
   13590:	e7b3      	b.n	134fa <prov_start+0x11e>
	switch (action) {
   13592:	2903      	cmp	r1, #3
   13594:	d8b3      	bhi.n	134fe <prov_start+0x122>
   13596:	4b16      	ldr	r3, [pc, #88]	; (135f0 <prov_start+0x214>)
   13598:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   1359a:	2d00      	cmp	r5, #0
   1359c:	d0af      	beq.n	134fe <prov_start+0x122>
		if (!(prov->input_actions & input)) {
   1359e:	4b10      	ldr	r3, [pc, #64]	; (135e0 <prov_start+0x204>)
   135a0:	681e      	ldr	r6, [r3, #0]
   135a2:	8af3      	ldrh	r3, [r6, #22]
   135a4:	422b      	tst	r3, r5
   135a6:	d0aa      	beq.n	134fe <prov_start+0x122>
		if (size > prov->input_size) {
   135a8:	7d33      	ldrb	r3, [r6, #20]
   135aa:	42a3      	cmp	r3, r4
   135ac:	d3a7      	bcc.n	134fe <prov_start+0x122>
		if (input == BT_MESH_ENTER_STRING) {
   135ae:	2d08      	cmp	r5, #8
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   135b0:	bf0c      	ite	eq
   135b2:	2140      	moveq	r1, #64	; 0x40
   135b4:	2120      	movne	r1, #32
   135b6:	4808      	ldr	r0, [pc, #32]	; (135d8 <prov_start+0x1fc>)
   135b8:	f00e f997 	bl	218ea <atomic_or>
		return prov->input(input, size);
   135bc:	6a33      	ldr	r3, [r6, #32]
   135be:	4621      	mov	r1, r4
   135c0:	4628      	mov	r0, r5
   135c2:	4798      	blx	r3
   135c4:	e799      	b.n	134fa <prov_start+0x11e>
   135c6:	bf00      	nop
   135c8:	000233ec 	.word	0x000233ec
   135cc:	000234bc 	.word	0x000234bc
   135d0:	00027907 	.word	0x00027907
   135d4:	00027920 	.word	0x00027920
   135d8:	200000a8 	.word	0x200000a8
   135dc:	200000f4 	.word	0x200000f4
   135e0:	20000af0 	.word	0x20000af0
   135e4:	00027459 	.word	0x00027459
   135e8:	00027941 	.word	0x00027941
   135ec:	00023598 	.word	0x00023598
   135f0:	0002745e 	.word	0x0002745e

000135f4 <atomic_test_bit.constprop.26>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   135f4:	4b05      	ldr	r3, [pc, #20]	; (1360c <atomic_test_bit.constprop.26+0x18>)
   135f6:	f3bf 8f5b 	dmb	ish
   135fa:	681b      	ldr	r3, [r3, #0]
   135fc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13600:	fa43 f000 	asr.w	r0, r3, r0
}
   13604:	f000 0001 	and.w	r0, r0, #1
   13608:	4770      	bx	lr
   1360a:	bf00      	nop
   1360c:	200000a8 	.word	0x200000a8

00013610 <buf_sent>:
	if (!link.tx.buf[0]) {
   13610:	4905      	ldr	r1, [pc, #20]	; (13628 <buf_sent+0x18>)
   13612:	f8d1 313c 	ldr.w	r3, [r1, #316]	; 0x13c
   13616:	b133      	cbz	r3, 13626 <buf_sent+0x16>
   13618:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1361c:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   13620:	4802      	ldr	r0, [pc, #8]	; (1362c <buf_sent+0x1c>)
   13622:	f008 bf89 	b.w	1c538 <k_delayed_work_submit_to_queue>
}
   13626:	4770      	bx	lr
   13628:	200000a8 	.word	0x200000a8
   1362c:	20001c74 	.word	0x20001c74

00013630 <atomic_test_and_clear_bit.constprop.24>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   13630:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   13632:	2301      	movs	r3, #1
   13634:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13638:	4b0a      	ldr	r3, [pc, #40]	; (13664 <atomic_test_and_clear_bit.constprop.24+0x34>)
   1363a:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1363e:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13640:	e853 2f00 	ldrex	r2, [r3]
   13644:	ea02 0c01 	and.w	ip, r2, r1
   13648:	e843 ce00 	strex	lr, ip, [r3]
   1364c:	f1be 0f00 	cmp.w	lr, #0
   13650:	d1f6      	bne.n	13640 <atomic_test_and_clear_bit.constprop.24+0x10>
   13652:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   13656:	4202      	tst	r2, r0
}
   13658:	bf14      	ite	ne
   1365a:	2001      	movne	r0, #1
   1365c:	2000      	moveq	r0, #0
   1365e:	f85d fb04 	ldr.w	pc, [sp], #4
   13662:	bf00      	nop
   13664:	200000a8 	.word	0x200000a8

00013668 <reset_link>:
{
   13668:	b510      	push	{r4, lr}
	prov_clear_tx();
   1366a:	f7ff fd2d 	bl	130c8 <prov_clear_tx>
	if (prov->link_close) {
   1366e:	4b12      	ldr	r3, [pc, #72]	; (136b8 <reset_link+0x50>)
   13670:	681b      	ldr	r3, [r3, #0]
   13672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13674:	b10b      	cbz	r3, 1367a <reset_link+0x12>
		prov->link_close(BT_MESH_PROV_ADV);
   13676:	2001      	movs	r0, #1
   13678:	4798      	blx	r3
	(void)memset(&link, 0, offsetof(struct prov_link, tx.retransmit));
   1367a:	4c10      	ldr	r4, [pc, #64]	; (136bc <reset_link+0x54>)
   1367c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13680:	2100      	movs	r1, #0
   13682:	4620      	mov	r0, r4
   13684:	f00b ffea 	bl	1f65c <memset>
	link.rx.prev_id = XACT_NVAL;
   13688:	23ff      	movs	r3, #255	; 0xff
   1368a:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (bt_pub_key_get()) {
   1368e:	f7f5 f8bf 	bl	8810 <bt_pub_key_get>
   13692:	b118      	cbz	r0, 1369c <reset_link+0x34>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13694:	2102      	movs	r1, #2
   13696:	4620      	mov	r0, r4
   13698:	f00e f927 	bl	218ea <atomic_or>
	link.rx.buf = bt_mesh_proxy_get_buf();
   1369c:	f001 fc08 	bl	14eb0 <bt_mesh_proxy_get_buf>
	if (link.conf_inputs[0]) {
   136a0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	link.rx.buf = bt_mesh_proxy_get_buf();
   136a4:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
	if (link.conf_inputs[0]) {
   136a8:	b12b      	cbz	r3, 136b6 <reset_link+0x4e>
		bt_mesh_attention(NULL, 0);
   136aa:	2100      	movs	r1, #0
   136ac:	4608      	mov	r0, r1
}
   136ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_attention(NULL, 0);
   136b2:	f7fe baf3 	b.w	11c9c <bt_mesh_attention>
}
   136b6:	bd10      	pop	{r4, pc}
   136b8:	20000af0 	.word	0x20000af0
   136bc:	200000a8 	.word	0x200000a8

000136c0 <gen_prov_ctl>:
{
   136c0:	b570      	push	{r4, r5, r6, lr}
   136c2:	460e      	mov	r6, r1
	switch (BEARER_CTL(rx->gpc)) {
   136c4:	7941      	ldrb	r1, [r0, #5]
   136c6:	0889      	lsrs	r1, r1, #2
   136c8:	2901      	cmp	r1, #1
{
   136ca:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
   136cc:	d068      	beq.n	137a0 <gen_prov_ctl+0xe0>
   136ce:	b171      	cbz	r1, 136ee <gen_prov_ctl+0x2e>
   136d0:	2902      	cmp	r1, #2
   136d2:	d06a      	beq.n	137aa <gen_prov_ctl+0xea>
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   136d4:	2301      	movs	r3, #1
   136d6:	f04f 0200 	mov.w	r2, #0
   136da:	f363 0207 	bfi	r2, r3, #0, #8
   136de:	4837      	ldr	r0, [pc, #220]	; (137bc <gen_prov_ctl+0xfc>)
   136e0:	4b37      	ldr	r3, [pc, #220]	; (137c0 <gen_prov_ctl+0x100>)
   136e2:	1a1b      	subs	r3, r3, r0
   136e4:	08db      	lsrs	r3, r3, #3
   136e6:	f363 128f 	bfi	r2, r3, #6, #10
   136ea:	4836      	ldr	r0, [pc, #216]	; (137c4 <gen_prov_ctl+0x104>)
   136ec:	e00e      	b.n	1370c <gen_prov_ctl+0x4c>
	if (buf->len < 16) {
   136ee:	88b1      	ldrh	r1, [r6, #4]
   136f0:	290f      	cmp	r1, #15
   136f2:	d80f      	bhi.n	13714 <gen_prov_ctl+0x54>
		BT_ERR("Too short bearer open message (len %u)", buf->len);
   136f4:	2301      	movs	r3, #1
   136f6:	f04f 0200 	mov.w	r2, #0
   136fa:	f363 0207 	bfi	r2, r3, #0, #8
   136fe:	482f      	ldr	r0, [pc, #188]	; (137bc <gen_prov_ctl+0xfc>)
   13700:	4b2f      	ldr	r3, [pc, #188]	; (137c0 <gen_prov_ctl+0x100>)
   13702:	1a1b      	subs	r3, r3, r0
   13704:	08db      	lsrs	r3, r3, #3
   13706:	4830      	ldr	r0, [pc, #192]	; (137c8 <gen_prov_ctl+0x108>)
   13708:	f363 128f 	bfi	r2, r3, #6, #10
}
   1370c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   13710:	f00a bea4 	b.w	1e45c <log_1>
	if (atomic_test_bit(link.flags, LINK_ACTIVE)) {
   13714:	2002      	movs	r0, #2
   13716:	f7ff ff6d 	bl	135f4 <atomic_test_bit.constprop.26>
   1371a:	b1f0      	cbz	r0, 1375a <gen_prov_ctl+0x9a>
		if (link.id == rx->link_id && link.expect == PROV_INVITE) {
   1371c:	4b2b      	ldr	r3, [pc, #172]	; (137cc <gen_prov_ctl+0x10c>)
   1371e:	6822      	ldr	r2, [r4, #0]
   13720:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   13724:	4291      	cmp	r1, r2
   13726:	d108      	bne.n	1373a <gen_prov_ctl+0x7a>
   13728:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1372c:	b92a      	cbnz	r2, 1373a <gen_prov_ctl+0x7a>
			bearer_ctl_send(LINK_ACK, NULL, 0);
   1372e:	4611      	mov	r1, r2
   13730:	2001      	movs	r0, #1
}
   13732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0);
   13736:	f7ff bded 	b.w	13314 <bearer_ctl_send>
			BT_WARN("Ignoring bearer open: link already active");
   1373a:	2302      	movs	r3, #2
   1373c:	f04f 0100 	mov.w	r1, #0
   13740:	f363 0107 	bfi	r1, r3, #0, #8
   13744:	4a1d      	ldr	r2, [pc, #116]	; (137bc <gen_prov_ctl+0xfc>)
   13746:	4b1e      	ldr	r3, [pc, #120]	; (137c0 <gen_prov_ctl+0x100>)
   13748:	4821      	ldr	r0, [pc, #132]	; (137d0 <gen_prov_ctl+0x110>)
   1374a:	1a9b      	subs	r3, r3, r2
   1374c:	08db      	lsrs	r3, r3, #3
   1374e:	f363 118f 	bfi	r1, r3, #6, #10
}
   13752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_WARN("Ignoring bearer open: link already active");
   13756:	f00a be74 	b.w	1e442 <log_0>
	if (memcmp(buf->data, prov->uuid, 16)) {
   1375a:	4d1e      	ldr	r5, [pc, #120]	; (137d4 <gen_prov_ctl+0x114>)
   1375c:	6830      	ldr	r0, [r6, #0]
   1375e:	682b      	ldr	r3, [r5, #0]
   13760:	2210      	movs	r2, #16
   13762:	6819      	ldr	r1, [r3, #0]
   13764:	f00b ff29 	bl	1f5ba <memcmp>
   13768:	b9c8      	cbnz	r0, 1379e <gen_prov_ctl+0xde>
	if (prov->link_open) {
   1376a:	682b      	ldr	r3, [r5, #0]
   1376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1376e:	b10b      	cbz	r3, 13774 <gen_prov_ctl+0xb4>
		prov->link_open(BT_MESH_PROV_ADV);
   13770:	2001      	movs	r0, #1
   13772:	4798      	blx	r3
	link.id = rx->link_id;
   13774:	6823      	ldr	r3, [r4, #0]
   13776:	4c15      	ldr	r4, [pc, #84]	; (137cc <gen_prov_ctl+0x10c>)
   13778:	2104      	movs	r1, #4
   1377a:	4620      	mov	r0, r4
   1377c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13780:	f00e f8b3 	bl	218ea <atomic_or>
	net_buf_simple_reset(link.rx.buf);
   13784:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	buf->len  = 0;
   13788:	2500      	movs	r5, #0
	buf->data = buf->__buf;
   1378a:	689a      	ldr	r2, [r3, #8]
   1378c:	601a      	str	r2, [r3, #0]
	buf->len  = 0;
   1378e:	809d      	strh	r5, [r3, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0);
   13790:	462a      	mov	r2, r5
   13792:	4629      	mov	r1, r5
   13794:	2001      	movs	r0, #1
   13796:	f7ff fdbd 	bl	13314 <bearer_ctl_send>
	link.expect = PROV_INVITE;
   1379a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
}
   1379e:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   137a0:	2002      	movs	r0, #2
}
   137a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   137a6:	f7ff bf25 	b.w	135f4 <atomic_test_bit.constprop.26>
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   137aa:	4608      	mov	r0, r1
   137ac:	f7ff ff22 	bl	135f4 <atomic_test_bit.constprop.26>
   137b0:	2800      	cmp	r0, #0
   137b2:	d0f4      	beq.n	1379e <gen_prov_ctl+0xde>
}
   137b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	reset_link();
   137b8:	f7ff bf56 	b.w	13668 <reset_link>
   137bc:	000233ec 	.word	0x000233ec
   137c0:	000234bc 	.word	0x000234bc
   137c4:	00027670 	.word	0x00027670
   137c8:	0002761f 	.word	0x0002761f
   137cc:	200000a8 	.word	0x200000a8
   137d0:	00027646 	.word	0x00027646
   137d4:	20000af0 	.word	0x20000af0

000137d8 <prov_retransmit>:
{
   137d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   137da:	2002      	movs	r0, #2
   137dc:	f7ff ff0a 	bl	135f4 <atomic_test_bit.constprop.26>
   137e0:	b978      	cbnz	r0, 13802 <prov_retransmit+0x2a>
		BT_WARN("Link not active");
   137e2:	2302      	movs	r3, #2
   137e4:	f04f 0100 	mov.w	r1, #0
   137e8:	f363 0107 	bfi	r1, r3, #0, #8
   137ec:	4a23      	ldr	r2, [pc, #140]	; (1387c <prov_retransmit+0xa4>)
   137ee:	4b24      	ldr	r3, [pc, #144]	; (13880 <prov_retransmit+0xa8>)
   137f0:	4824      	ldr	r0, [pc, #144]	; (13884 <prov_retransmit+0xac>)
   137f2:	1a9b      	subs	r3, r3, r2
   137f4:	08db      	lsrs	r3, r3, #3
   137f6:	f363 118f 	bfi	r1, r3, #6, #10
}
   137fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Link not active");
   137fe:	f00a be20 	b.w	1e442 <log_0>
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
   13802:	4c21      	ldr	r4, [pc, #132]	; (13888 <prov_retransmit+0xb0>)
   13804:	f00f fc26 	bl	23054 <z_impl_k_uptime_get>
   13808:	e9d4 324c 	ldrd	r3, r2, [r4, #304]	; 0x130
   1380c:	1ac6      	subs	r6, r0, r3
   1380e:	eb61 0702 	sbc.w	r7, r1, r2
   13812:	f247 5230 	movw	r2, #30000	; 0x7530
   13816:	2300      	movs	r3, #0
   13818:	42b2      	cmp	r2, r6
   1381a:	41bb      	sbcs	r3, r7
   1381c:	da11      	bge.n	13842 <prov_retransmit+0x6a>
		BT_WARN("Giving up transaction");
   1381e:	2302      	movs	r3, #2
   13820:	f04f 0100 	mov.w	r1, #0
   13824:	f363 0107 	bfi	r1, r3, #0, #8
   13828:	4a14      	ldr	r2, [pc, #80]	; (1387c <prov_retransmit+0xa4>)
   1382a:	4b15      	ldr	r3, [pc, #84]	; (13880 <prov_retransmit+0xa8>)
   1382c:	4817      	ldr	r0, [pc, #92]	; (1388c <prov_retransmit+0xb4>)
   1382e:	1a9b      	subs	r3, r3, r2
   13830:	08db      	lsrs	r3, r3, #3
   13832:	f363 118f 	bfi	r1, r3, #6, #10
   13836:	f00a fe04 	bl	1e442 <log_0>
}
   1383a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		reset_link();
   1383e:	f7ff bf13 	b.w	13668 <reset_link>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   13842:	4e13      	ldr	r6, [pc, #76]	; (13890 <prov_retransmit+0xb8>)
   13844:	f504 749e 	add.w	r4, r4, #316	; 0x13c
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   13848:	2500      	movs	r5, #0
		struct net_buf *buf = link.tx.buf[i];
   1384a:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   1384e:	b1a0      	cbz	r0, 1387a <prov_retransmit+0xa2>
		if (BT_MESH_ADV(buf)->busy) {
   13850:	6943      	ldr	r3, [r0, #20]
   13852:	7a1a      	ldrb	r2, [r3, #8]
   13854:	f012 0204 	ands.w	r2, r2, #4
   13858:	f105 0501 	add.w	r5, r5, #1
   1385c:	d10b      	bne.n	13876 <prov_retransmit+0x9e>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   1385e:	2d03      	cmp	r5, #3
   13860:	d005      	beq.n	1386e <prov_retransmit+0x96>
   13862:	6823      	ldr	r3, [r4, #0]
   13864:	b11b      	cbz	r3, 1386e <prov_retransmit+0x96>
			bt_mesh_adv_send(buf, NULL, NULL);
   13866:	4611      	mov	r1, r2
   13868:	f7f7 ff5a 	bl	b720 <bt_mesh_adv_send>
   1386c:	e7ed      	b.n	1384a <prov_retransmit+0x72>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   1386e:	2200      	movs	r2, #0
   13870:	4631      	mov	r1, r6
   13872:	f7f7 ff55 	bl	b720 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   13876:	2d03      	cmp	r5, #3
   13878:	d1e7      	bne.n	1384a <prov_retransmit+0x72>
}
   1387a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1387c:	000233ec 	.word	0x000233ec
   13880:	000234bc 	.word	0x000234bc
   13884:	000278e1 	.word	0x000278e1
   13888:	200000a8 	.word	0x200000a8
   1388c:	000278f1 	.word	0x000278f1
   13890:	20007be0 	.word	0x20007be0

00013894 <bt_mesh_pb_gatt_recv>:
}
#endif /* CONFIG_BT_MESH_PB_ADV */

#if defined(CONFIG_BT_MESH_PB_GATT)
int bt_mesh_pb_gatt_recv(struct bt_conn *conn, struct net_buf_simple *buf)
{
   13894:	b538      	push	{r3, r4, r5, lr}
	u8_t type;

	BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

	if (link.conn != conn) {
   13896:	4d39      	ldr	r5, [pc, #228]	; (1397c <bt_mesh_pb_gatt_recv+0xe8>)
   13898:	686b      	ldr	r3, [r5, #4]
   1389a:	4283      	cmp	r3, r0
{
   1389c:	460c      	mov	r4, r1
	if (link.conn != conn) {
   1389e:	d010      	beq.n	138c2 <bt_mesh_pb_gatt_recv+0x2e>
		BT_WARN("Data for unexpected connection");
   138a0:	2302      	movs	r3, #2
   138a2:	f04f 0100 	mov.w	r1, #0
   138a6:	f363 0107 	bfi	r1, r3, #0, #8
   138aa:	4a35      	ldr	r2, [pc, #212]	; (13980 <bt_mesh_pb_gatt_recv+0xec>)
   138ac:	4b35      	ldr	r3, [pc, #212]	; (13984 <bt_mesh_pb_gatt_recv+0xf0>)
   138ae:	4836      	ldr	r0, [pc, #216]	; (13988 <bt_mesh_pb_gatt_recv+0xf4>)
   138b0:	1a9b      	subs	r3, r3, r2
   138b2:	08db      	lsrs	r3, r3, #3
   138b4:	f363 118f 	bfi	r1, r3, #6, #10
   138b8:	f00a fdc3 	bl	1e442 <log_0>
		return -ENOTCONN;
   138bc:	f06f 0038 	mvn.w	r0, #56	; 0x38
	}

	prov_handlers[type].func(buf->data);

	return 0;
}
   138c0:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
   138c2:	8889      	ldrh	r1, [r1, #4]
   138c4:	b971      	cbnz	r1, 138e4 <bt_mesh_pb_gatt_recv+0x50>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   138c6:	2302      	movs	r3, #2
   138c8:	f04f 0200 	mov.w	r2, #0
   138cc:	f363 0207 	bfi	r2, r3, #0, #8
   138d0:	482b      	ldr	r0, [pc, #172]	; (13980 <bt_mesh_pb_gatt_recv+0xec>)
   138d2:	4b2c      	ldr	r3, [pc, #176]	; (13984 <bt_mesh_pb_gatt_recv+0xf0>)
   138d4:	1a1b      	subs	r3, r3, r0
   138d6:	08db      	lsrs	r3, r3, #3
   138d8:	482c      	ldr	r0, [pc, #176]	; (1398c <bt_mesh_pb_gatt_recv+0xf8>)
   138da:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   138de:	f00a fdbd 	bl	1e45c <log_1>
		return -EINVAL;
   138e2:	e01b      	b.n	1391c <bt_mesh_pb_gatt_recv+0x88>
	type = net_buf_simple_pull_u8(buf);
   138e4:	4620      	mov	r0, r4
   138e6:	f00e fecd 	bl	22684 <net_buf_simple_pull_u8>
	if (type != PROV_FAILED && type != link.expect) {
   138ea:	2809      	cmp	r0, #9
   138ec:	d028      	beq.n	13940 <bt_mesh_pb_gatt_recv+0xac>
   138ee:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   138f2:	4281      	cmp	r1, r0
   138f4:	d015      	beq.n	13922 <bt_mesh_pb_gatt_recv+0x8e>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, link.expect);
   138f6:	2202      	movs	r2, #2
   138f8:	f04f 0300 	mov.w	r3, #0
   138fc:	f362 0307 	bfi	r3, r2, #0, #8
   13900:	4c1f      	ldr	r4, [pc, #124]	; (13980 <bt_mesh_pb_gatt_recv+0xec>)
   13902:	4a20      	ldr	r2, [pc, #128]	; (13984 <bt_mesh_pb_gatt_recv+0xf0>)
   13904:	1b12      	subs	r2, r2, r4
   13906:	08d2      	lsrs	r2, r2, #3
   13908:	f362 138f 	bfi	r3, r2, #6, #10
   1390c:	460a      	mov	r2, r1
   1390e:	4601      	mov	r1, r0
   13910:	481f      	ldr	r0, [pc, #124]	; (13990 <bt_mesh_pb_gatt_recv+0xfc>)
   13912:	f00a fdb7 	bl	1e484 <log_2>
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
   13916:	2003      	movs	r0, #3
   13918:	f00d fff6 	bl	21908 <prov_send_fail_msg>
		return -EINVAL;
   1391c:	f06f 0015 	mvn.w	r0, #21
   13920:	e7ce      	b.n	138c0 <bt_mesh_pb_gatt_recv+0x2c>
	if (type >= ARRAY_SIZE(prov_handlers)) {
   13922:	2909      	cmp	r1, #9
   13924:	d90c      	bls.n	13940 <bt_mesh_pb_gatt_recv+0xac>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   13926:	2301      	movs	r3, #1
   13928:	f04f 0200 	mov.w	r2, #0
   1392c:	f363 0207 	bfi	r2, r3, #0, #8
   13930:	4813      	ldr	r0, [pc, #76]	; (13980 <bt_mesh_pb_gatt_recv+0xec>)
   13932:	4b14      	ldr	r3, [pc, #80]	; (13984 <bt_mesh_pb_gatt_recv+0xf0>)
   13934:	1a1b      	subs	r3, r3, r0
   13936:	08db      	lsrs	r3, r3, #3
   13938:	f363 128f 	bfi	r2, r3, #6, #10
   1393c:	4815      	ldr	r0, [pc, #84]	; (13994 <bt_mesh_pb_gatt_recv+0x100>)
   1393e:	e7ce      	b.n	138de <bt_mesh_pb_gatt_recv+0x4a>
	if (prov_handlers[type].len != buf->len) {
   13940:	4b15      	ldr	r3, [pc, #84]	; (13998 <bt_mesh_pb_gatt_recv+0x104>)
   13942:	88a1      	ldrh	r1, [r4, #4]
   13944:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   13948:	8892      	ldrh	r2, [r2, #4]
   1394a:	428a      	cmp	r2, r1
   1394c:	d00f      	beq.n	1396e <bt_mesh_pb_gatt_recv+0xda>
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
   1394e:	2201      	movs	r2, #1
   13950:	f04f 0300 	mov.w	r3, #0
   13954:	f362 0307 	bfi	r3, r2, #0, #8
   13958:	4c09      	ldr	r4, [pc, #36]	; (13980 <bt_mesh_pb_gatt_recv+0xec>)
   1395a:	4a0a      	ldr	r2, [pc, #40]	; (13984 <bt_mesh_pb_gatt_recv+0xf0>)
   1395c:	1b12      	subs	r2, r2, r4
   1395e:	08d2      	lsrs	r2, r2, #3
   13960:	f362 138f 	bfi	r3, r2, #6, #10
   13964:	4602      	mov	r2, r0
   13966:	480d      	ldr	r0, [pc, #52]	; (1399c <bt_mesh_pb_gatt_recv+0x108>)
   13968:	f00a fd8c 	bl	1e484 <log_2>
   1396c:	e7d6      	b.n	1391c <bt_mesh_pb_gatt_recv+0x88>
	prov_handlers[type].func(buf->data);
   1396e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   13972:	6820      	ldr	r0, [r4, #0]
   13974:	4798      	blx	r3
	return 0;
   13976:	2000      	movs	r0, #0
   13978:	e7a2      	b.n	138c0 <bt_mesh_pb_gatt_recv+0x2c>
   1397a:	bf00      	nop
   1397c:	200000a8 	.word	0x200000a8
   13980:	000233ec 	.word	0x000233ec
   13984:	000234bc 	.word	0x000234bc
   13988:	0002749c 	.word	0x0002749c
   1398c:	000274bb 	.word	0x000274bb
   13990:	000274e2 	.word	0x000274e2
   13994:	00027502 	.word	0x00027502
   13998:	00023df8 	.word	0x00023df8
   1399c:	00027527 	.word	0x00027527

000139a0 <bt_mesh_pb_gatt_open>:

int bt_mesh_pb_gatt_open(struct bt_conn *conn)
{
   139a0:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   139a2:	4d0d      	ldr	r5, [pc, #52]	; (139d8 <bt_mesh_pb_gatt_open+0x38>)
   139a4:	4606      	mov	r6, r0
   139a6:	2104      	movs	r1, #4
   139a8:	4628      	mov	r0, r5
   139aa:	f00d ff9e 	bl	218ea <atomic_or>
	BT_DBG("conn %p", conn);

	if (atomic_test_and_set_bit(link.flags, LINK_ACTIVE)) {
   139ae:	f010 0404 	ands.w	r4, r0, #4
   139b2:	d10d      	bne.n	139d0 <bt_mesh_pb_gatt_open+0x30>
		return -EBUSY;
	}

	link.conn = bt_conn_ref(conn);
   139b4:	4630      	mov	r0, r6
   139b6:	f00c f8be 	bl	1fb36 <bt_conn_ref>
	link.expect = PROV_INVITE;

	if (prov->link_open) {
   139ba:	4b08      	ldr	r3, [pc, #32]	; (139dc <bt_mesh_pb_gatt_open+0x3c>)
	link.expect = PROV_INVITE;
   139bc:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
	if (prov->link_open) {
   139c0:	681b      	ldr	r3, [r3, #0]
	link.conn = bt_conn_ref(conn);
   139c2:	6068      	str	r0, [r5, #4]
	if (prov->link_open) {
   139c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   139c6:	b10b      	cbz	r3, 139cc <bt_mesh_pb_gatt_open+0x2c>
		prov->link_open(BT_MESH_PROV_GATT);
   139c8:	2002      	movs	r0, #2
   139ca:	4798      	blx	r3
	}

	return 0;
}
   139cc:	4620      	mov	r0, r4
   139ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   139d0:	f06f 040f 	mvn.w	r4, #15
   139d4:	e7fa      	b.n	139cc <bt_mesh_pb_gatt_open+0x2c>
   139d6:	bf00      	nop
   139d8:	200000a8 	.word	0x200000a8
   139dc:	20000af0 	.word	0x20000af0

000139e0 <bt_mesh_pb_gatt_close>:

int bt_mesh_pb_gatt_close(struct bt_conn *conn)
{
   139e0:	b510      	push	{r4, lr}
	bool pub_key;

	BT_DBG("conn %p", conn);

	if (link.conn != conn) {
   139e2:	4c1c      	ldr	r4, [pc, #112]	; (13a54 <bt_mesh_pb_gatt_close+0x74>)
   139e4:	6863      	ldr	r3, [r4, #4]
   139e6:	4283      	cmp	r3, r0
   139e8:	d010      	beq.n	13a0c <bt_mesh_pb_gatt_close+0x2c>
		BT_ERR("Not connected");
   139ea:	2301      	movs	r3, #1
   139ec:	f04f 0100 	mov.w	r1, #0
   139f0:	f363 0107 	bfi	r1, r3, #0, #8
   139f4:	4a18      	ldr	r2, [pc, #96]	; (13a58 <bt_mesh_pb_gatt_close+0x78>)
   139f6:	4b19      	ldr	r3, [pc, #100]	; (13a5c <bt_mesh_pb_gatt_close+0x7c>)
   139f8:	4819      	ldr	r0, [pc, #100]	; (13a60 <bt_mesh_pb_gatt_close+0x80>)
   139fa:	1a9b      	subs	r3, r3, r2
   139fc:	08db      	lsrs	r3, r3, #3
   139fe:	f363 118f 	bfi	r1, r3, #6, #10
   13a02:	f00a fd1e 	bl	1e442 <log_0>
		return -ENOTCONN;
   13a06:	f06f 0038 	mvn.w	r0, #56	; 0x38
	if (pub_key) {
		atomic_set_bit(link.flags, LOCAL_PUB_KEY);
	}

	return 0;
}
   13a0a:	bd10      	pop	{r4, pc}
	if (link.conf_inputs[0]) {
   13a0c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   13a10:	b11b      	cbz	r3, 13a1a <bt_mesh_pb_gatt_close+0x3a>
		bt_mesh_attention(NULL, 0);
   13a12:	2100      	movs	r1, #0
   13a14:	4608      	mov	r0, r1
   13a16:	f7fe f941 	bl	11c9c <bt_mesh_attention>
	if (prov->link_close) {
   13a1a:	4b12      	ldr	r3, [pc, #72]	; (13a64 <bt_mesh_pb_gatt_close+0x84>)
   13a1c:	681b      	ldr	r3, [r3, #0]
   13a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13a20:	b10b      	cbz	r3, 13a26 <bt_mesh_pb_gatt_close+0x46>
		prov->link_close(BT_MESH_PROV_GATT);
   13a22:	2002      	movs	r0, #2
   13a24:	4798      	blx	r3
	bt_conn_unref(link.conn);
   13a26:	6860      	ldr	r0, [r4, #4]
   13a28:	f00c f88c 	bl	1fb44 <bt_conn_unref>
	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
   13a2c:	2001      	movs	r0, #1
   13a2e:	f7ff fde1 	bl	135f4 <atomic_test_bit.constprop.26>
	(void)memset(&link, 0, sizeof(link));
   13a32:	f44f 72b4 	mov.w	r2, #360	; 0x168
	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
   13a36:	4604      	mov	r4, r0
	(void)memset(&link, 0, sizeof(link));
   13a38:	2100      	movs	r1, #0
   13a3a:	4806      	ldr	r0, [pc, #24]	; (13a54 <bt_mesh_pb_gatt_close+0x74>)
   13a3c:	f00b fe0e 	bl	1f65c <memset>
	if (pub_key) {
   13a40:	b12c      	cbz	r4, 13a4e <bt_mesh_pb_gatt_close+0x6e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13a42:	2102      	movs	r1, #2
   13a44:	4803      	ldr	r0, [pc, #12]	; (13a54 <bt_mesh_pb_gatt_close+0x74>)
   13a46:	f00d ff50 	bl	218ea <atomic_or>
	return 0;
   13a4a:	2000      	movs	r0, #0
   13a4c:	e7dd      	b.n	13a0a <bt_mesh_pb_gatt_close+0x2a>
   13a4e:	4620      	mov	r0, r4
   13a50:	e7db      	b.n	13a0a <bt_mesh_pb_gatt_close+0x2a>
   13a52:	bf00      	nop
   13a54:	200000a8 	.word	0x200000a8
   13a58:	000233ec 	.word	0x000233ec
   13a5c:	000234bc 	.word	0x000234bc
   13a60:	000254d8 	.word	0x000254d8
   13a64:	20000af0 	.word	0x20000af0

00013a68 <close_link.constprop.22>:
static void close_link(u8_t err, u8_t reason)
   13a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (link.conn) {
   13a6a:	4c15      	ldr	r4, [pc, #84]	; (13ac0 <close_link.constprop.22+0x58>)
   13a6c:	6865      	ldr	r5, [r4, #4]
   13a6e:	2602      	movs	r6, #2
   13a70:	f88d 6007 	strb.w	r6, [sp, #7]
   13a74:	b125      	cbz	r5, 13a80 <close_link.constprop.22+0x18>
		bt_mesh_pb_gatt_close(link.conn);
   13a76:	4628      	mov	r0, r5
   13a78:	f7ff ffb2 	bl	139e0 <bt_mesh_pb_gatt_close>
}
   13a7c:	b002      	add	sp, #8
   13a7e:	bd70      	pop	{r4, r5, r6, pc}
		prov_send_fail_msg(err);
   13a80:	f00d ff42 	bl	21908 <prov_send_fail_msg>
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
   13a84:	2201      	movs	r2, #1
   13a86:	f10d 0107 	add.w	r1, sp, #7
   13a8a:	4630      	mov	r0, r6
	link.rx.seg = 0U;
   13a8c:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
   13a90:	f7ff fc40 	bl	13314 <bearer_ctl_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a94:	f3bf 8f5b 	dmb	ish
   13a98:	e854 3f00 	ldrex	r3, [r4]
   13a9c:	f023 0304 	bic.w	r3, r3, #4
   13aa0:	e844 3200 	strex	r2, r3, [r4]
   13aa4:	2a00      	cmp	r2, #0
   13aa6:	d1f7      	bne.n	13a98 <close_link.constprop.22+0x30>
   13aa8:	f3bf 8f5b 	dmb	ish
	if (link.conf_inputs[0]) {
   13aac:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   13ab0:	2b00      	cmp	r3, #0
   13ab2:	d0e3      	beq.n	13a7c <close_link.constprop.22+0x14>
		bt_mesh_attention(NULL, 0);
   13ab4:	4629      	mov	r1, r5
   13ab6:	4628      	mov	r0, r5
   13ab8:	f7fe f8f0 	bl	11c9c <bt_mesh_attention>
   13abc:	e7de      	b.n	13a7c <close_link.constprop.22+0x14>
   13abe:	bf00      	nop
   13ac0:	200000a8 	.word	0x200000a8

00013ac4 <prov_invite>:
{
   13ac4:	b530      	push	{r4, r5, lr}
   13ac6:	b089      	sub	sp, #36	; 0x24
	if (data[0]) {
   13ac8:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, 12);
   13aca:	ab03      	add	r3, sp, #12
   13acc:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   13ad0:	4604      	mov	r4, r0
	PROV_BUF(buf, 12);
   13ad2:	9300      	str	r3, [sp, #0]
   13ad4:	e9cd 2301 	strd	r2, r3, [sp, #4]
	if (data[0]) {
   13ad8:	b111      	cbz	r1, 13ae0 <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   13ada:	2000      	movs	r0, #0
   13adc:	f7fe f8de 	bl	11c9c <bt_mesh_attention>
	link.conf_inputs[0] = data[0];
   13ae0:	4d2a      	ldr	r5, [pc, #168]	; (13b8c <prov_invite+0xc8>)
   13ae2:	7823      	ldrb	r3, [r4, #0]
   13ae4:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
	prov_buf_init(&buf, PROV_CAPABILITIES);
   13ae8:	2101      	movs	r1, #1
   13aea:	4668      	mov	r0, sp
   13aec:	f00d fef1 	bl	218d2 <prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   13af0:	f7fa fe62 	bl	e7b8 <bt_mesh_elem_count>
   13af4:	4601      	mov	r1, r0
   13af6:	4668      	mov	r0, sp
   13af8:	f00e fd56 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->static_val ? BIT(0) : 0x00);
   13afc:	4c24      	ldr	r4, [pc, #144]	; (13b90 <prov_invite+0xcc>)
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   13afe:	2101      	movs	r1, #1
   13b00:	4668      	mov	r0, sp
   13b02:	f00e fd68 	bl	225d6 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, 0x00);
   13b06:	2100      	movs	r1, #0
   13b08:	4668      	mov	r0, sp
   13b0a:	f00e fd4d 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->static_val ? BIT(0) : 0x00);
   13b0e:	6823      	ldr	r3, [r4, #0]
   13b10:	68d9      	ldr	r1, [r3, #12]
   13b12:	3100      	adds	r1, #0
   13b14:	bf18      	it	ne
   13b16:	2101      	movne	r1, #1
   13b18:	4668      	mov	r0, sp
   13b1a:	f00e fd45 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->output_size);
   13b1e:	6823      	ldr	r3, [r4, #0]
   13b20:	4668      	mov	r0, sp
   13b22:	7c59      	ldrb	r1, [r3, #17]
   13b24:	f00e fd40 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, prov->output_actions);
   13b28:	6823      	ldr	r3, [r4, #0]
   13b2a:	4668      	mov	r0, sp
   13b2c:	8a59      	ldrh	r1, [r3, #18]
   13b2e:	f00e fd52 	bl	225d6 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, prov->input_size);
   13b32:	6823      	ldr	r3, [r4, #0]
   13b34:	4668      	mov	r0, sp
   13b36:	7d19      	ldrb	r1, [r3, #20]
   13b38:	f00e fd36 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, prov->input_actions);
   13b3c:	6823      	ldr	r3, [r4, #0]
   13b3e:	4668      	mov	r0, sp
   13b40:	8ad9      	ldrh	r1, [r3, #22]
   13b42:	f00e fd48 	bl	225d6 <net_buf_simple_add_be16>
	memcpy(&link.conf_inputs[1], &buf.data[1], 11);
   13b46:	9900      	ldr	r1, [sp, #0]
   13b48:	220b      	movs	r2, #11
   13b4a:	3101      	adds	r1, #1
   13b4c:	f105 007d 	add.w	r0, r5, #125	; 0x7d
   13b50:	f00b fd5a 	bl	1f608 <memcpy>
	if (prov_send(&buf)) {
   13b54:	4668      	mov	r0, sp
   13b56:	f7ff fb27 	bl	131a8 <prov_send>
   13b5a:	b190      	cbz	r0, 13b82 <prov_invite+0xbe>
		BT_ERR("Failed to send capabilities");
   13b5c:	2301      	movs	r3, #1
   13b5e:	f04f 0100 	mov.w	r1, #0
   13b62:	f363 0107 	bfi	r1, r3, #0, #8
   13b66:	4a0b      	ldr	r2, [pc, #44]	; (13b94 <prov_invite+0xd0>)
   13b68:	4b0b      	ldr	r3, [pc, #44]	; (13b98 <prov_invite+0xd4>)
   13b6a:	480c      	ldr	r0, [pc, #48]	; (13b9c <prov_invite+0xd8>)
   13b6c:	1a9b      	subs	r3, r3, r2
   13b6e:	08db      	lsrs	r3, r3, #3
   13b70:	f363 118f 	bfi	r1, r3, #6, #10
   13b74:	f00a fc65 	bl	1e442 <log_0>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   13b78:	2005      	movs	r0, #5
   13b7a:	f7ff ff75 	bl	13a68 <close_link.constprop.22>
}
   13b7e:	b009      	add	sp, #36	; 0x24
   13b80:	bd30      	pop	{r4, r5, pc}
	link.expect = PROV_START;
   13b82:	2302      	movs	r3, #2
   13b84:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   13b88:	e7f9      	b.n	13b7e <prov_invite+0xba>
   13b8a:	bf00      	nop
   13b8c:	200000a8 	.word	0x200000a8
   13b90:	20000af0 	.word	0x20000af0
   13b94:	000233ec 	.word	0x000233ec
   13b98:	000234bc 	.word	0x000234bc
   13b9c:	00027809 	.word	0x00027809

00013ba0 <send_pub_key>:
{
   13ba0:	b510      	push	{r4, lr}
   13ba2:	b096      	sub	sp, #88	; 0x58
	PROV_BUF(buf, 65);
   13ba4:	ab04      	add	r3, sp, #16
   13ba6:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   13baa:	9301      	str	r3, [sp, #4]
   13bac:	e9cd 2302 	strd	r2, r3, [sp, #8]
	key = bt_pub_key_get();
   13bb0:	f7f4 fe2e 	bl	8810 <bt_pub_key_get>
	if (!key) {
   13bb4:	4604      	mov	r4, r0
   13bb6:	b990      	cbnz	r0, 13bde <send_pub_key+0x3e>
		BT_ERR("No public key available");
   13bb8:	2301      	movs	r3, #1
   13bba:	f04f 0100 	mov.w	r1, #0
   13bbe:	f363 0107 	bfi	r1, r3, #0, #8
   13bc2:	4a2a      	ldr	r2, [pc, #168]	; (13c6c <send_pub_key+0xcc>)
   13bc4:	4b2a      	ldr	r3, [pc, #168]	; (13c70 <send_pub_key+0xd0>)
   13bc6:	482b      	ldr	r0, [pc, #172]	; (13c74 <send_pub_key+0xd4>)
   13bc8:	1a9b      	subs	r3, r3, r2
   13bca:	08db      	lsrs	r3, r3, #3
   13bcc:	f363 118f 	bfi	r1, r3, #6, #10
   13bd0:	f00a fc37 	bl	1e442 <log_0>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   13bd4:	2005      	movs	r0, #5
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   13bd6:	f7ff ff47 	bl	13a68 <close_link.constprop.22>
}
   13bda:	b016      	add	sp, #88	; 0x58
   13bdc:	bd10      	pop	{r4, pc}
	prov_buf_init(&buf, PROV_PUB_KEY);
   13bde:	2103      	movs	r1, #3
   13be0:	a801      	add	r0, sp, #4
   13be2:	f00d fe76 	bl	218d2 <prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), key, 32);
   13be6:	2120      	movs	r1, #32
   13be8:	a801      	add	r0, sp, #4
   13bea:	f00e fcce 	bl	2258a <net_buf_simple_add>
   13bee:	4621      	mov	r1, r4
   13bf0:	f00d fea0 	bl	21934 <sys_memcpy_swap.constprop.21>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), &key[32], 32);
   13bf4:	2120      	movs	r1, #32
   13bf6:	a801      	add	r0, sp, #4
   13bf8:	f00e fcc7 	bl	2258a <net_buf_simple_add>
   13bfc:	f104 0120 	add.w	r1, r4, #32
   13c00:	f00d fe98 	bl	21934 <sys_memcpy_swap.constprop.21>
	memcpy(&link.conf_inputs[81], &buf.data[1], 64);
   13c04:	4c1c      	ldr	r4, [pc, #112]	; (13c78 <send_pub_key+0xd8>)
   13c06:	9901      	ldr	r1, [sp, #4]
   13c08:	2240      	movs	r2, #64	; 0x40
   13c0a:	3101      	adds	r1, #1
   13c0c:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
   13c10:	f00b fcfa 	bl	1f608 <memcpy>
	prov_send(&buf);
   13c14:	a801      	add	r0, sp, #4
   13c16:	f7ff fac7 	bl	131a8 <prov_send>
   13c1a:	2300      	movs	r3, #0
	buf->data = buf->__buf;
   13c1c:	9803      	ldr	r0, [sp, #12]
	buf->len  = 0;
   13c1e:	f8ad 3008 	strh.w	r3, [sp, #8]
	sys_memcpy_swap(buf.data, &link.conf_inputs[17], 32);
   13c22:	f104 018d 	add.w	r1, r4, #141	; 0x8d
	buf->data = buf->__buf;
   13c26:	9001      	str	r0, [sp, #4]
   13c28:	f00d fe84 	bl	21934 <sys_memcpy_swap.constprop.21>
	sys_memcpy_swap(&buf.data[32], &link.conf_inputs[49], 32);
   13c2c:	9801      	ldr	r0, [sp, #4]
   13c2e:	f104 01ad 	add.w	r1, r4, #173	; 0xad
   13c32:	3020      	adds	r0, #32
   13c34:	f00d fe7e 	bl	21934 <sys_memcpy_swap.constprop.21>
	if (bt_dh_key_gen(buf.data, prov_dh_key_cb)) {
   13c38:	4910      	ldr	r1, [pc, #64]	; (13c7c <send_pub_key+0xdc>)
   13c3a:	9801      	ldr	r0, [sp, #4]
   13c3c:	f7f4 fdf6 	bl	882c <bt_dh_key_gen>
   13c40:	b178      	cbz	r0, 13c62 <send_pub_key+0xc2>
		BT_ERR("Failed to generate DHKey");
   13c42:	2301      	movs	r3, #1
   13c44:	f04f 0100 	mov.w	r1, #0
   13c48:	f363 0107 	bfi	r1, r3, #0, #8
   13c4c:	4a07      	ldr	r2, [pc, #28]	; (13c6c <send_pub_key+0xcc>)
   13c4e:	4b08      	ldr	r3, [pc, #32]	; (13c70 <send_pub_key+0xd0>)
   13c50:	480b      	ldr	r0, [pc, #44]	; (13c80 <send_pub_key+0xe0>)
   13c52:	1a9b      	subs	r3, r3, r2
   13c54:	08db      	lsrs	r3, r3, #3
   13c56:	f363 118f 	bfi	r1, r3, #6, #10
   13c5a:	f00a fbf2 	bl	1e442 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   13c5e:	2007      	movs	r0, #7
   13c60:	e7b9      	b.n	13bd6 <send_pub_key+0x36>
	link.expect = PROV_CONFIRM;
   13c62:	2305      	movs	r3, #5
   13c64:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   13c68:	e7b7      	b.n	13bda <send_pub_key+0x3a>
   13c6a:	bf00      	nop
   13c6c:	000233ec 	.word	0x000233ec
   13c70:	000234bc 	.word	0x000234bc
   13c74:	00027a52 	.word	0x00027a52
   13c78:	200000a8 	.word	0x200000a8
   13c7c:	00014509 	.word	0x00014509
   13c80:	00027a6a 	.word	0x00027a6a

00013c84 <prov_pub_key>:
{
   13c84:	b508      	push	{r3, lr}
	memcpy(&link.conf_inputs[17], data, 64);
   13c86:	4601      	mov	r1, r0
   13c88:	2240      	movs	r2, #64	; 0x40
   13c8a:	4810      	ldr	r0, [pc, #64]	; (13ccc <prov_pub_key+0x48>)
   13c8c:	f00b fcbc 	bl	1f608 <memcpy>
	if (!atomic_test_bit(link.flags, LOCAL_PUB_KEY)) {
   13c90:	2001      	movs	r0, #1
   13c92:	f7ff fcaf 	bl	135f4 <atomic_test_bit.constprop.26>
   13c96:	b9a8      	cbnz	r0, 13cc4 <prov_pub_key+0x40>
		prov_clear_tx();
   13c98:	f7ff fa16 	bl	130c8 <prov_clear_tx>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13c9c:	2101      	movs	r1, #1
   13c9e:	480c      	ldr	r0, [pc, #48]	; (13cd0 <prov_pub_key+0x4c>)
   13ca0:	f00d fe23 	bl	218ea <atomic_or>
		BT_WARN("Waiting for local public key");
   13ca4:	2302      	movs	r3, #2
   13ca6:	f04f 0100 	mov.w	r1, #0
   13caa:	f363 0107 	bfi	r1, r3, #0, #8
   13cae:	4a09      	ldr	r2, [pc, #36]	; (13cd4 <prov_pub_key+0x50>)
   13cb0:	4b09      	ldr	r3, [pc, #36]	; (13cd8 <prov_pub_key+0x54>)
   13cb2:	480a      	ldr	r0, [pc, #40]	; (13cdc <prov_pub_key+0x58>)
   13cb4:	1a9b      	subs	r3, r3, r2
   13cb6:	08db      	lsrs	r3, r3, #3
   13cb8:	f363 118f 	bfi	r1, r3, #6, #10
}
   13cbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Waiting for local public key");
   13cc0:	f00a bbbf 	b.w	1e442 <log_0>
}
   13cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_pub_key();
   13cc8:	f7ff bf6a 	b.w	13ba0 <send_pub_key>
   13ccc:	20000135 	.word	0x20000135
   13cd0:	200000a8 	.word	0x200000a8
   13cd4:	000233ec 	.word	0x000233ec
   13cd8:	000234bc 	.word	0x000234bc
   13cdc:	00027833 	.word	0x00027833

00013ce0 <pub_key_ready>:
{
   13ce0:	b508      	push	{r3, lr}
	if (!pkey) {
   13ce2:	b978      	cbnz	r0, 13d04 <pub_key_ready+0x24>
		BT_WARN("Public key not available");
   13ce4:	2302      	movs	r3, #2
   13ce6:	f04f 0100 	mov.w	r1, #0
   13cea:	f363 0107 	bfi	r1, r3, #0, #8
   13cee:	4a0c      	ldr	r2, [pc, #48]	; (13d20 <pub_key_ready+0x40>)
   13cf0:	4b0c      	ldr	r3, [pc, #48]	; (13d24 <pub_key_ready+0x44>)
   13cf2:	480d      	ldr	r0, [pc, #52]	; (13d28 <pub_key_ready+0x48>)
   13cf4:	1a9b      	subs	r3, r3, r2
   13cf6:	08db      	lsrs	r3, r3, #3
   13cf8:	f363 118f 	bfi	r1, r3, #6, #10
}
   13cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Public key not available");
   13d00:	f00a bb9f 	b.w	1e442 <log_0>
   13d04:	2102      	movs	r1, #2
   13d06:	4809      	ldr	r0, [pc, #36]	; (13d2c <pub_key_ready+0x4c>)
   13d08:	f00d fdef 	bl	218ea <atomic_or>
	if (atomic_test_and_clear_bit(link.flags, REMOTE_PUB_KEY)) {
   13d0c:	2000      	movs	r0, #0
   13d0e:	f7ff fc8f 	bl	13630 <atomic_test_and_clear_bit.constprop.24>
   13d12:	b118      	cbz	r0, 13d1c <pub_key_ready+0x3c>
}
   13d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_pub_key();
   13d18:	f7ff bf42 	b.w	13ba0 <send_pub_key>
}
   13d1c:	bd08      	pop	{r3, pc}
   13d1e:	bf00      	nop
   13d20:	000233ec 	.word	0x000233ec
   13d24:	000234bc 	.word	0x000234bc
   13d28:	00027985 	.word	0x00027985
   13d2c:	200000a8 	.word	0x200000a8

00013d30 <prov_random>:
{
   13d30:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
   13d32:	4c41      	ldr	r4, [pc, #260]	; (13e38 <prov_random+0x108>)
{
   13d34:	b099      	sub	sp, #100	; 0x64
	PROV_BUF(rnd, 16);
   13d36:	ab0c      	add	r3, sp, #48	; 0x30
   13d38:	f44f 12a8 	mov.w	r2, #1376256	; 0x150000
   13d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
   13d40:	4607      	mov	r7, r0
	PROV_BUF(rnd, 16);
   13d42:	9301      	str	r3, [sp, #4]
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
   13d44:	4601      	mov	r1, r0
   13d46:	ab04      	add	r3, sp, #16
   13d48:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   13d4c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   13d50:	f00d f9e2 	bl	21118 <bt_mesh_prov_conf>
   13d54:	b178      	cbz	r0, 13d76 <prov_random+0x46>
		BT_ERR("Unable to calculate confirmation verification");
   13d56:	2301      	movs	r3, #1
   13d58:	f04f 0100 	mov.w	r1, #0
   13d5c:	f363 0107 	bfi	r1, r3, #0, #8
   13d60:	4a36      	ldr	r2, [pc, #216]	; (13e3c <prov_random+0x10c>)
   13d62:	4b37      	ldr	r3, [pc, #220]	; (13e40 <prov_random+0x110>)
   13d64:	4837      	ldr	r0, [pc, #220]	; (13e44 <prov_random+0x114>)
   13d66:	1a9b      	subs	r3, r3, r2
   13d68:	08db      	lsrs	r3, r3, #3
   13d6a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Failed to generate provisioning salt");
   13d6e:	f00a fb68 	bl	1e442 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   13d72:	2007      	movs	r0, #7
   13d74:	e016      	b.n	13da4 <prov_random+0x74>
	if (memcmp(conf_verify, link.conf, 16)) {
   13d76:	2210      	movs	r2, #16
   13d78:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   13d7c:	eb0d 0002 	add.w	r0, sp, r2
   13d80:	f00b fc1b 	bl	1f5ba <memcmp>
   13d84:	b190      	cbz	r0, 13dac <prov_random+0x7c>
		BT_ERR("Invalid confirmation value");
   13d86:	2301      	movs	r3, #1
   13d88:	f04f 0100 	mov.w	r1, #0
   13d8c:	f363 0107 	bfi	r1, r3, #0, #8
   13d90:	4a2a      	ldr	r2, [pc, #168]	; (13e3c <prov_random+0x10c>)
   13d92:	4b2b      	ldr	r3, [pc, #172]	; (13e40 <prov_random+0x110>)
   13d94:	482c      	ldr	r0, [pc, #176]	; (13e48 <prov_random+0x118>)
   13d96:	1a9b      	subs	r3, r3, r2
   13d98:	08db      	lsrs	r3, r3, #3
   13d9a:	f363 118f 	bfi	r1, r3, #6, #10
   13d9e:	f00a fb50 	bl	1e442 <log_0>
		close_link(PROV_ERR_CFM_FAILED, CLOSE_REASON_FAILED);
   13da2:	2004      	movs	r0, #4
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   13da4:	f7ff fe60 	bl	13a68 <close_link.constprop.22>
}
   13da8:	b019      	add	sp, #100	; 0x64
   13daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	prov_buf_init(&rnd, PROV_RANDOM);
   13dac:	2106      	movs	r1, #6
   13dae:	a801      	add	r0, sp, #4
	net_buf_simple_add_mem(&rnd, link.rand, 16);
   13db0:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	prov_buf_init(&rnd, PROV_RANDOM);
   13db4:	f00d fd8d 	bl	218d2 <prov_buf_init>
	net_buf_simple_add_mem(&rnd, link.rand, 16);
   13db8:	4631      	mov	r1, r6
   13dba:	2210      	movs	r2, #16
   13dbc:	a801      	add	r0, sp, #4
   13dbe:	f00e fbea 	bl	22596 <net_buf_simple_add_mem>
	if (prov_send(&rnd)) {
   13dc2:	a801      	add	r0, sp, #4
   13dc4:	f7ff f9f0 	bl	131a8 <prov_send>
   13dc8:	4601      	mov	r1, r0
   13dca:	b178      	cbz	r0, 13dec <prov_random+0xbc>
		BT_ERR("Failed to send Provisioning Random");
   13dcc:	2301      	movs	r3, #1
   13dce:	f04f 0100 	mov.w	r1, #0
   13dd2:	f363 0107 	bfi	r1, r3, #0, #8
   13dd6:	4a19      	ldr	r2, [pc, #100]	; (13e3c <prov_random+0x10c>)
   13dd8:	4b19      	ldr	r3, [pc, #100]	; (13e40 <prov_random+0x110>)
   13dda:	481c      	ldr	r0, [pc, #112]	; (13e4c <prov_random+0x11c>)
   13ddc:	1a9b      	subs	r3, r3, r2
   13dde:	08db      	lsrs	r3, r3, #3
   13de0:	f363 118f 	bfi	r1, r3, #6, #10
   13de4:	f00a fb2d 	bl	1e442 <log_0>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   13de8:	2005      	movs	r0, #5
   13dea:	e7db      	b.n	13da4 <prov_random+0x74>
static inline int bt_mesh_prov_salt(const u8_t conf_salt[16],
				    const u8_t prov_rand[16],
				    const u8_t dev_rand[16],
				    u8_t prov_salt[16])
{
	const u8_t prov_salt_key[16] = { 0 };
   13dec:	2510      	movs	r5, #16
   13dee:	462a      	mov	r2, r5
   13df0:	a808      	add	r0, sp, #32
   13df2:	f00b fc33 	bl	1f65c <memset>
	struct bt_mesh_sg sg[] = {
   13df6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13dfa:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   13dfe:	2203      	movs	r2, #3
   13e00:	f204 130d 	addw	r3, r4, #269	; 0x10d
   13e04:	a912      	add	r1, sp, #72	; 0x48
   13e06:	a808      	add	r0, sp, #32
	struct bt_mesh_sg sg[] = {
   13e08:	e9cd 7514 	strd	r7, r5, [sp, #80]	; 0x50
   13e0c:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   13e10:	f00c ffc0 	bl	20d94 <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(link.conf_salt, data, link.rand,
   13e14:	b160      	cbz	r0, 13e30 <prov_random+0x100>
		BT_ERR("Failed to generate provisioning salt");
   13e16:	2301      	movs	r3, #1
   13e18:	f04f 0100 	mov.w	r1, #0
   13e1c:	f363 0107 	bfi	r1, r3, #0, #8
   13e20:	4a06      	ldr	r2, [pc, #24]	; (13e3c <prov_random+0x10c>)
   13e22:	4b07      	ldr	r3, [pc, #28]	; (13e40 <prov_random+0x110>)
   13e24:	480a      	ldr	r0, [pc, #40]	; (13e50 <prov_random+0x120>)
   13e26:	1a9b      	subs	r3, r3, r2
   13e28:	08db      	lsrs	r3, r3, #3
   13e2a:	f363 118f 	bfi	r1, r3, #6, #10
   13e2e:	e79e      	b.n	13d6e <prov_random+0x3e>
	link.expect = PROV_DATA;
   13e30:	2307      	movs	r3, #7
   13e32:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   13e36:	e7b7      	b.n	13da8 <prov_random+0x78>
   13e38:	200000a8 	.word	0x200000a8
   13e3c:	000233ec 	.word	0x000233ec
   13e40:	000234bc 	.word	0x000234bc
   13e44:	00027850 	.word	0x00027850
   13e48:	0002787e 	.word	0x0002787e
   13e4c:	00027899 	.word	0x00027899
   13e50:	000278bc 	.word	0x000278bc

00013e54 <prov_data>:
{
   13e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   13e58:	4c5e      	ldr	r4, [pc, #376]	; (13fd4 <prov_data+0x180>)
   13e5a:	b09b      	sub	sp, #108	; 0x6c
	PROV_BUF(msg, 1);
   13e5c:	ab02      	add	r3, sp, #8
   13e5e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   13e62:	ad0b      	add	r5, sp, #44	; 0x2c
   13e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   13e68:	4606      	mov	r6, r0
	PROV_BUF(msg, 1);
   13e6a:	9304      	str	r3, [sp, #16]
   13e6c:	9500      	str	r5, [sp, #0]
   13e6e:	4b5a      	ldr	r3, [pc, #360]	; (13fd8 <prov_data+0x184>)
   13e70:	f204 120d 	addw	r2, r4, #269	; 0x10d
   13e74:	2120      	movs	r1, #32
   13e76:	f104 0008 	add.w	r0, r4, #8
   13e7a:	f00c ffce 	bl	20e1a <bt_mesh_k1>
	if (err) {
   13e7e:	b178      	cbz	r0, 13ea0 <prov_data+0x4c>
		BT_ERR("Unable to generate session key");
   13e80:	2301      	movs	r3, #1
   13e82:	f04f 0100 	mov.w	r1, #0
   13e86:	f363 0107 	bfi	r1, r3, #0, #8
   13e8a:	4a54      	ldr	r2, [pc, #336]	; (13fdc <prov_data+0x188>)
   13e8c:	4b54      	ldr	r3, [pc, #336]	; (13fe0 <prov_data+0x18c>)
   13e8e:	4855      	ldr	r0, [pc, #340]	; (13fe4 <prov_data+0x190>)
   13e90:	1a9b      	subs	r3, r3, r2
   13e92:	08db      	lsrs	r3, r3, #3
   13e94:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to generate session nonce");
   13e98:	f00a fad3 	bl	1e442 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   13e9c:	2007      	movs	r0, #7
   13e9e:	e029      	b.n	13ef4 <prov_data+0xa0>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   13ea0:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   13ea4:	f8cd 8000 	str.w	r8, [sp]
   13ea8:	4b4f      	ldr	r3, [pc, #316]	; (13fe8 <prov_data+0x194>)
   13eaa:	f204 120d 	addw	r2, r4, #269	; 0x10d
   13eae:	2120      	movs	r1, #32
   13eb0:	f104 0008 	add.w	r0, r4, #8
   13eb4:	f00c ffb1 	bl	20e1a <bt_mesh_k1>
	if (!err) {
   13eb8:	2800      	cmp	r0, #0
   13eba:	d17d      	bne.n	13fb8 <prov_data+0x164>
		memcpy(nonce, tmp + 3, 13);
   13ebc:	220d      	movs	r2, #13
   13ebe:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
   13ec2:	a807      	add	r0, sp, #28
   13ec4:	f00b fba0 	bl	1f608 <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   13ec8:	4643      	mov	r3, r8
   13eca:	4632      	mov	r2, r6
   13ecc:	a907      	add	r1, sp, #28
   13ece:	4628      	mov	r0, r5
   13ed0:	f00d f92f 	bl	21132 <bt_mesh_prov_decrypt>
	if (err) {
   13ed4:	b188      	cbz	r0, 13efa <prov_data+0xa6>
		BT_ERR("Unable to decrypt provisioning data");
   13ed6:	2301      	movs	r3, #1
   13ed8:	f04f 0100 	mov.w	r1, #0
   13edc:	f363 0107 	bfi	r1, r3, #0, #8
   13ee0:	4a3e      	ldr	r2, [pc, #248]	; (13fdc <prov_data+0x188>)
   13ee2:	4b3f      	ldr	r3, [pc, #252]	; (13fe0 <prov_data+0x18c>)
   13ee4:	4841      	ldr	r0, [pc, #260]	; (13fec <prov_data+0x198>)
   13ee6:	1a9b      	subs	r3, r3, r2
   13ee8:	08db      	lsrs	r3, r3, #3
   13eea:	f363 118f 	bfi	r1, r3, #6, #10
   13eee:	f00a faa8 	bl	1e442 <log_0>
		close_link(PROV_ERR_DECRYPT, CLOSE_REASON_FAILED);
   13ef2:	2006      	movs	r0, #6
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   13ef4:	f7ff fdb8 	bl	13a68 <close_link.constprop.22>
		return;
   13ef8:	e056      	b.n	13fa8 <prov_data+0x154>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   13efa:	af0f      	add	r7, sp, #60	; 0x3c
   13efc:	9700      	str	r7, [sp, #0]
   13efe:	4b3c      	ldr	r3, [pc, #240]	; (13ff0 <prov_data+0x19c>)
   13f00:	f204 120d 	addw	r2, r4, #269	; 0x10d
   13f04:	2120      	movs	r1, #32
   13f06:	f104 0008 	add.w	r0, r4, #8
   13f0a:	f00c ff86 	bl	20e1a <bt_mesh_k1>
	if (err) {
   13f0e:	4683      	mov	fp, r0
   13f10:	b160      	cbz	r0, 13f2c <prov_data+0xd8>
		BT_ERR("Unable to generate device key");
   13f12:	2301      	movs	r3, #1
   13f14:	f04f 0100 	mov.w	r1, #0
   13f18:	f363 0107 	bfi	r1, r3, #0, #8
   13f1c:	4a2f      	ldr	r2, [pc, #188]	; (13fdc <prov_data+0x188>)
   13f1e:	4b30      	ldr	r3, [pc, #192]	; (13fe0 <prov_data+0x18c>)
   13f20:	4834      	ldr	r0, [pc, #208]	; (13ff4 <prov_data+0x1a0>)
   13f22:	1a9b      	subs	r3, r3, r2
   13f24:	08db      	lsrs	r3, r3, #3
   13f26:	f363 118f 	bfi	r1, r3, #6, #10
   13f2a:	e7b5      	b.n	13e98 <prov_data+0x44>
	return ((u16_t)src[0] << 8) | src[1];
   13f2c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   13f30:	f89d 905d 	ldrb.w	r9, [sp, #93]	; 0x5d
   13f34:	f89d 505f 	ldrb.w	r5, [sp, #95]	; 0x5f
   13f38:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   13f3c:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
	flags = pdu[18];
   13f40:	f89d a05e 	ldrb.w	sl, [sp, #94]	; 0x5e
   13f44:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
   13f48:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   13f4c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   13f50:	f89d 5062 	ldrb.w	r5, [sp, #98]	; 0x62
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   13f54:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
   13f58:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
   13f5c:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
	prov_buf_init(&msg, PROV_COMPLETE);
   13f60:	2108      	movs	r1, #8
   13f62:	a804      	add	r0, sp, #16
   13f64:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
   13f68:	f00d fcb3 	bl	218d2 <prov_buf_init>
	prov_send(&msg);
   13f6c:	a804      	add	r0, sp, #16
   13f6e:	f7ff f91b 	bl	131a8 <prov_send>
	link.expect = 0U;
   13f72:	f884 b028 	strb.w	fp, [r4, #40]	; 0x28
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   13f76:	4649      	mov	r1, r9
	return !!link.conn;
   13f78:	6864      	ldr	r4, [r4, #4]
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   13f7a:	462b      	mov	r3, r5
   13f7c:	e9cd 6700 	strd	r6, r7, [sp]
   13f80:	4652      	mov	r2, sl
   13f82:	4640      	mov	r0, r8
   13f84:	f7f7 f976 	bl	b274 <bt_mesh_provision>
	if (err) {
   13f88:	4601      	mov	r1, r0
   13f8a:	b180      	cbz	r0, 13fae <prov_data+0x15a>
		BT_ERR("Failed to provision (err %d)", err);
   13f8c:	2301      	movs	r3, #1
   13f8e:	f04f 0200 	mov.w	r2, #0
   13f92:	f363 0207 	bfi	r2, r3, #0, #8
   13f96:	4811      	ldr	r0, [pc, #68]	; (13fdc <prov_data+0x188>)
   13f98:	4b11      	ldr	r3, [pc, #68]	; (13fe0 <prov_data+0x18c>)
   13f9a:	1a1b      	subs	r3, r3, r0
   13f9c:	08db      	lsrs	r3, r3, #3
   13f9e:	f363 128f 	bfi	r2, r3, #6, #10
   13fa2:	4815      	ldr	r0, [pc, #84]	; (13ff8 <prov_data+0x1a4>)
   13fa4:	f00a fa5a 	bl	1e45c <log_1>
}
   13fa8:	b01b      	add	sp, #108	; 0x6c
   13faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) && identity_enable) {
   13fae:	2c00      	cmp	r4, #0
   13fb0:	d0fa      	beq.n	13fa8 <prov_data+0x154>
		bt_mesh_proxy_identity_enable();
   13fb2:	f000 ff4b 	bl	14e4c <bt_mesh_proxy_identity_enable>
   13fb6:	e7f7      	b.n	13fa8 <prov_data+0x154>
		BT_ERR("Unable to generate session nonce");
   13fb8:	2301      	movs	r3, #1
   13fba:	f04f 0100 	mov.w	r1, #0
   13fbe:	f363 0107 	bfi	r1, r3, #0, #8
   13fc2:	4a06      	ldr	r2, [pc, #24]	; (13fdc <prov_data+0x188>)
   13fc4:	4b06      	ldr	r3, [pc, #24]	; (13fe0 <prov_data+0x18c>)
   13fc6:	480d      	ldr	r0, [pc, #52]	; (13ffc <prov_data+0x1a8>)
   13fc8:	1a9b      	subs	r3, r3, r2
   13fca:	08db      	lsrs	r3, r3, #3
   13fcc:	f363 118f 	bfi	r1, r3, #6, #10
   13fd0:	e762      	b.n	13e98 <prov_data+0x44>
   13fd2:	bf00      	nop
   13fd4:	200000a8 	.word	0x200000a8
   13fd8:	00027735 	.word	0x00027735
   13fdc:	000233ec 	.word	0x000233ec
   13fe0:	000234bc 	.word	0x000234bc
   13fe4:	0002773a 	.word	0x0002773a
   13fe8:	00027759 	.word	0x00027759
   13fec:	0002775e 	.word	0x0002775e
   13ff0:	00027782 	.word	0x00027782
   13ff4:	00027787 	.word	0x00027787
   13ff8:	000277a5 	.word	0x000277a5
   13ffc:	000277c2 	.word	0x000277c2

00014000 <prov_msg_recv>:
{
   14000:	b570      	push	{r4, r5, r6, lr}
	u8_t type = link.rx.buf->data[0];
   14002:	4c3b      	ldr	r4, [pc, #236]	; (140f0 <prov_msg_recv+0xf0>)
   14004:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   14008:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
	u8_t type = link.rx.buf->data[0];
   1400c:	6803      	ldr	r3, [r0, #0]
   1400e:	781d      	ldrb	r5, [r3, #0]
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   14010:	f7fa f96c 	bl	e2ec <bt_mesh_fcs_check>
   14014:	4626      	mov	r6, r4
   14016:	b978      	cbnz	r0, 14038 <prov_msg_recv+0x38>
		BT_ERR("Incorrect FCS");
   14018:	2301      	movs	r3, #1
   1401a:	f04f 0100 	mov.w	r1, #0
   1401e:	f363 0107 	bfi	r1, r3, #0, #8
   14022:	4a34      	ldr	r2, [pc, #208]	; (140f4 <prov_msg_recv+0xf4>)
   14024:	4b34      	ldr	r3, [pc, #208]	; (140f8 <prov_msg_recv+0xf8>)
   14026:	4835      	ldr	r0, [pc, #212]	; (140fc <prov_msg_recv+0xfc>)
   14028:	1a9b      	subs	r3, r3, r2
   1402a:	08db      	lsrs	r3, r3, #3
   1402c:	f363 118f 	bfi	r1, r3, #6, #10
}
   14030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Incorrect FCS");
   14034:	f00a ba05 	b.w	1e442 <log_0>
	gen_prov_ack_send(link.rx.id);
   14038:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
   1403c:	f7ff f99a 	bl	13374 <gen_prov_ack_send>
	link.rx.prev_id = link.rx.id;
   14040:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   14044:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (type != PROV_FAILED && type != link.expect) {
   14048:	2d09      	cmp	r5, #9
	link.rx.id = 0U;
   1404a:	f04f 0300 	mov.w	r3, #0
   1404e:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	if (type != PROV_FAILED && type != link.expect) {
   14052:	d02b      	beq.n	140ac <prov_msg_recv+0xac>
   14054:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   14058:	42a9      	cmp	r1, r5
   1405a:	d012      	beq.n	14082 <prov_msg_recv+0x82>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, link.expect);
   1405c:	2202      	movs	r2, #2
   1405e:	f362 0307 	bfi	r3, r2, #0, #8
   14062:	4824      	ldr	r0, [pc, #144]	; (140f4 <prov_msg_recv+0xf4>)
   14064:	4a24      	ldr	r2, [pc, #144]	; (140f8 <prov_msg_recv+0xf8>)
   14066:	1a12      	subs	r2, r2, r0
   14068:	08d2      	lsrs	r2, r2, #3
   1406a:	f362 138f 	bfi	r3, r2, #6, #10
   1406e:	4824      	ldr	r0, [pc, #144]	; (14100 <prov_msg_recv+0x100>)
   14070:	460a      	mov	r2, r1
   14072:	4629      	mov	r1, r5
   14074:	f00a fa06 	bl	1e484 <log_2>
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
   14078:	2003      	movs	r0, #3
}
   1407a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
   1407e:	f00d bc43 	b.w	21908 <prov_send_fail_msg>
	if (type >= ARRAY_SIZE(prov_handlers)) {
   14082:	2909      	cmp	r1, #9
   14084:	d912      	bls.n	140ac <prov_msg_recv+0xac>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   14086:	2301      	movs	r3, #1
   14088:	f04f 0200 	mov.w	r2, #0
   1408c:	f363 0207 	bfi	r2, r3, #0, #8
   14090:	4818      	ldr	r0, [pc, #96]	; (140f4 <prov_msg_recv+0xf4>)
   14092:	4b19      	ldr	r3, [pc, #100]	; (140f8 <prov_msg_recv+0xf8>)
   14094:	1a1b      	subs	r3, r3, r0
   14096:	08db      	lsrs	r3, r3, #3
   14098:	481a      	ldr	r0, [pc, #104]	; (14104 <prov_msg_recv+0x104>)
   1409a:	f363 128f 	bfi	r2, r3, #6, #10
   1409e:	f00a f9dd 	bl	1e45c <log_1>
		close_link(PROV_ERR_NVAL_PDU, CLOSE_REASON_FAILED);
   140a2:	2001      	movs	r0, #1
}
   140a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   140a8:	f7ff bcde 	b.w	13a68 <close_link.constprop.22>
	if (1 + prov_handlers[type].len != link.rx.buf->len) {
   140ac:	4a16      	ldr	r2, [pc, #88]	; (14108 <prov_msg_recv+0x108>)
   140ae:	f8d6 012c 	ldr.w	r0, [r6, #300]	; 0x12c
   140b2:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
   140b6:	8881      	ldrh	r1, [r0, #4]
   140b8:	889b      	ldrh	r3, [r3, #4]
   140ba:	3301      	adds	r3, #1
   140bc:	428b      	cmp	r3, r1
   140be:	d010      	beq.n	140e2 <prov_msg_recv+0xe2>
		BT_ERR("Invalid length %u for type 0x%02x",
   140c0:	2201      	movs	r2, #1
   140c2:	f04f 0300 	mov.w	r3, #0
   140c6:	f362 0307 	bfi	r3, r2, #0, #8
   140ca:	480a      	ldr	r0, [pc, #40]	; (140f4 <prov_msg_recv+0xf4>)
   140cc:	4a0a      	ldr	r2, [pc, #40]	; (140f8 <prov_msg_recv+0xf8>)
   140ce:	1a12      	subs	r2, r2, r0
   140d0:	08d2      	lsrs	r2, r2, #3
   140d2:	f362 138f 	bfi	r3, r2, #6, #10
   140d6:	480d      	ldr	r0, [pc, #52]	; (1410c <prov_msg_recv+0x10c>)
   140d8:	462a      	mov	r2, r5
   140da:	f00a f9d3 	bl	1e484 <log_2>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   140de:	2002      	movs	r0, #2
   140e0:	e7e0      	b.n	140a4 <prov_msg_recv+0xa4>
	prov_handlers[type].func(&link.rx.buf->data[1]);
   140e2:	6800      	ldr	r0, [r0, #0]
   140e4:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
   140e8:	3001      	adds	r0, #1
}
   140ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prov_handlers[type].func(&link.rx.buf->data[1]);
   140ee:	4718      	bx	r3
   140f0:	200000a8 	.word	0x200000a8
   140f4:	000233ec 	.word	0x000233ec
   140f8:	000234bc 	.word	0x000234bc
   140fc:	00027825 	.word	0x00027825
   14100:	000274e2 	.word	0x000274e2
   14104:	00027502 	.word	0x00027502
   14108:	00023df8 	.word	0x00023df8
   1410c:	00027527 	.word	0x00027527

00014110 <gen_prov_cont>:
{
   14110:	b570      	push	{r4, r5, r6, lr}
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
   14112:	4b4c      	ldr	r3, [pc, #304]	; (14244 <gen_prov_cont+0x134>)
{
   14114:	4604      	mov	r4, r0
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
   14116:	f893 0126 	ldrb.w	r0, [r3, #294]	; 0x126
{
   1411a:	460e      	mov	r6, r1
   1411c:	461d      	mov	r5, r3
   1411e:	7921      	ldrb	r1, [r4, #4]
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
   14120:	b9b0      	cbnz	r0, 14150 <gen_prov_cont+0x40>
   14122:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
   14126:	428b      	cmp	r3, r1
   14128:	d112      	bne.n	14150 <gen_prov_cont+0x40>
		BT_WARN("Resending ack");
   1412a:	2302      	movs	r3, #2
   1412c:	f04f 0100 	mov.w	r1, #0
   14130:	f363 0107 	bfi	r1, r3, #0, #8
   14134:	4a44      	ldr	r2, [pc, #272]	; (14248 <gen_prov_cont+0x138>)
   14136:	4b45      	ldr	r3, [pc, #276]	; (1424c <gen_prov_cont+0x13c>)
   14138:	4845      	ldr	r0, [pc, #276]	; (14250 <gen_prov_cont+0x140>)
   1413a:	1a9b      	subs	r3, r3, r2
   1413c:	08db      	lsrs	r3, r3, #3
   1413e:	f363 118f 	bfi	r1, r3, #6, #10
   14142:	f00a f97e 	bl	1e442 <log_0>
		gen_prov_ack_send(rx->xact_id);
   14146:	7920      	ldrb	r0, [r4, #4]
}
   14148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gen_prov_ack_send(rx->xact_id);
   1414c:	f7ff b912 	b.w	13374 <gen_prov_ack_send>
	if (rx->xact_id != link.rx.id) {
   14150:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
   14154:	428a      	cmp	r2, r1
   14156:	d00f      	beq.n	14178 <gen_prov_cont+0x68>
		BT_WARN("Data for unknown transaction (%u != %u)",
   14158:	2002      	movs	r0, #2
   1415a:	f04f 0300 	mov.w	r3, #0
   1415e:	f360 0307 	bfi	r3, r0, #0, #8
   14162:	4c39      	ldr	r4, [pc, #228]	; (14248 <gen_prov_cont+0x138>)
   14164:	4839      	ldr	r0, [pc, #228]	; (1424c <gen_prov_cont+0x13c>)
   14166:	1b00      	subs	r0, r0, r4
   14168:	08c0      	lsrs	r0, r0, #3
   1416a:	f360 138f 	bfi	r3, r0, #6, #10
}
   1416e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Data for unknown transaction (%u != %u)",
   14172:	4838      	ldr	r0, [pc, #224]	; (14254 <gen_prov_cont+0x144>)
   14174:	f00a b986 	b.w	1e484 <log_2>
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
   14178:	7964      	ldrb	r4, [r4, #5]
	if (seg > link.rx.last_seg) {
   1417a:	f895 3127 	ldrb.w	r3, [r5, #295]	; 0x127
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
   1417e:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
   14180:	42a3      	cmp	r3, r4
   14182:	d213      	bcs.n	141ac <gen_prov_cont+0x9c>
		BT_ERR("Invalid segment index %u", seg);
   14184:	2301      	movs	r3, #1
   14186:	f04f 0200 	mov.w	r2, #0
   1418a:	f363 0207 	bfi	r2, r3, #0, #8
   1418e:	492e      	ldr	r1, [pc, #184]	; (14248 <gen_prov_cont+0x138>)
   14190:	4b2e      	ldr	r3, [pc, #184]	; (1424c <gen_prov_cont+0x13c>)
   14192:	4831      	ldr	r0, [pc, #196]	; (14258 <gen_prov_cont+0x148>)
   14194:	1a5b      	subs	r3, r3, r1
   14196:	08db      	lsrs	r3, r3, #3
   14198:	f363 128f 	bfi	r2, r3, #6, #10
   1419c:	4621      	mov	r1, r4
   1419e:	f00a f95d 	bl	1e45c <log_1>
			close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   141a2:	2002      	movs	r0, #2
}
   141a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   141a8:	f7ff bc5e 	b.w	13a68 <close_link.constprop.22>
	} else if (seg == link.rx.last_seg) {
   141ac:	d11d      	bne.n	141ea <gen_prov_cont+0xda>
		expect_len = (link.rx.buf->len - 20 -
   141ae:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
   141b2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
   141b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   141ba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   141be:	7911      	ldrb	r1, [r2, #4]
		if (expect_len != buf->len) {
   141c0:	88b2      	ldrh	r2, [r6, #4]
		expect_len = (link.rx.buf->len - 20 -
   141c2:	440b      	add	r3, r1
   141c4:	3303      	adds	r3, #3
   141c6:	b2d9      	uxtb	r1, r3
		if (expect_len != buf->len) {
   141c8:	4291      	cmp	r1, r2
   141ca:	d00e      	beq.n	141ea <gen_prov_cont+0xda>
			BT_ERR("Incorrect last seg len: %u != %u",
   141cc:	2001      	movs	r0, #1
   141ce:	f04f 0300 	mov.w	r3, #0
   141d2:	f360 0307 	bfi	r3, r0, #0, #8
   141d6:	4c1c      	ldr	r4, [pc, #112]	; (14248 <gen_prov_cont+0x138>)
   141d8:	481c      	ldr	r0, [pc, #112]	; (1424c <gen_prov_cont+0x13c>)
   141da:	1b00      	subs	r0, r0, r4
   141dc:	08c0      	lsrs	r0, r0, #3
   141de:	f360 138f 	bfi	r3, r0, #6, #10
   141e2:	481e      	ldr	r0, [pc, #120]	; (1425c <gen_prov_cont+0x14c>)
   141e4:	f00a f94e 	bl	1e484 <log_2>
   141e8:	e7db      	b.n	141a2 <gen_prov_cont+0x92>
	if (!(link.rx.seg & BIT(seg))) {
   141ea:	40e0      	lsrs	r0, r4
   141ec:	07c3      	lsls	r3, r0, #31
   141ee:	d40f      	bmi.n	14210 <gen_prov_cont+0x100>
		BT_WARN("Ignoring already received segment");
   141f0:	2302      	movs	r3, #2
   141f2:	f04f 0100 	mov.w	r1, #0
   141f6:	f363 0107 	bfi	r1, r3, #0, #8
   141fa:	4a13      	ldr	r2, [pc, #76]	; (14248 <gen_prov_cont+0x138>)
   141fc:	4b13      	ldr	r3, [pc, #76]	; (1424c <gen_prov_cont+0x13c>)
   141fe:	4818      	ldr	r0, [pc, #96]	; (14260 <gen_prov_cont+0x150>)
   14200:	1a9b      	subs	r3, r3, r2
   14202:	08db      	lsrs	r3, r3, #3
   14204:	f363 118f 	bfi	r1, r3, #6, #10
}
   14208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Ignoring already received segment");
   1420c:	f00a b919 	b.w	1e442 <log_0>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   14210:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
   14214:	6831      	ldr	r1, [r6, #0]
   14216:	1e60      	subs	r0, r4, #1
   14218:	2317      	movs	r3, #23
   1421a:	4343      	muls	r3, r0
   1421c:	6810      	ldr	r0, [r2, #0]
   1421e:	88b2      	ldrh	r2, [r6, #4]
   14220:	3314      	adds	r3, #20
   14222:	4418      	add	r0, r3
   14224:	f00b f9f0 	bl	1f608 <memcpy>
	XACT_SEG_RECV(seg);
   14228:	2301      	movs	r3, #1
   1422a:	40a3      	lsls	r3, r4
   1422c:	f895 4126 	ldrb.w	r4, [r5, #294]	; 0x126
   14230:	ea24 0403 	bic.w	r4, r4, r3
   14234:	f885 4126 	strb.w	r4, [r5, #294]	; 0x126
	if (!link.rx.seg) {
   14238:	b91c      	cbnz	r4, 14242 <gen_prov_cont+0x132>
}
   1423a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_msg_recv();
   1423e:	f7ff bedf 	b.w	14000 <prov_msg_recv>
}
   14242:	bd70      	pop	{r4, r5, r6, pc}
   14244:	200000a8 	.word	0x200000a8
   14248:	000233ec 	.word	0x000233ec
   1424c:	000234bc 	.word	0x000234bc
   14250:	0002758d 	.word	0x0002758d
   14254:	0002759b 	.word	0x0002759b
   14258:	000275c3 	.word	0x000275c3
   1425c:	000275dc 	.word	0x000275dc
   14260:	000275fd 	.word	0x000275fd

00014264 <gen_prov_start>:
{
   14264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (link.rx.seg) {
   14268:	4c48      	ldr	r4, [pc, #288]	; (1438c <gen_prov_start+0x128>)
   1426a:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
{
   1426e:	4607      	mov	r7, r0
   14270:	460e      	mov	r6, r1
   14272:	4625      	mov	r5, r4
	if (link.rx.seg) {
   14274:	b17b      	cbz	r3, 14296 <gen_prov_start+0x32>
		BT_WARN("Got Start while there are unreceived segments");
   14276:	2302      	movs	r3, #2
   14278:	f04f 0100 	mov.w	r1, #0
   1427c:	f363 0107 	bfi	r1, r3, #0, #8
   14280:	4a43      	ldr	r2, [pc, #268]	; (14390 <gen_prov_start+0x12c>)
   14282:	4b44      	ldr	r3, [pc, #272]	; (14394 <gen_prov_start+0x130>)
   14284:	4844      	ldr	r0, [pc, #272]	; (14398 <gen_prov_start+0x134>)
   14286:	1a9b      	subs	r3, r3, r2
   14288:	08db      	lsrs	r3, r3, #3
   1428a:	f363 118f 	bfi	r1, r3, #6, #10
}
   1428e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Got Start while there are unreceived segments");
   14292:	f00a b8d6 	b.w	1e442 <log_0>
	if (link.rx.prev_id == rx->xact_id) {
   14296:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
   1429a:	7903      	ldrb	r3, [r0, #4]
   1429c:	429a      	cmp	r2, r3
   1429e:	d112      	bne.n	142c6 <gen_prov_start+0x62>
		BT_WARN("Resending ack");
   142a0:	2302      	movs	r3, #2
   142a2:	f04f 0100 	mov.w	r1, #0
   142a6:	f363 0107 	bfi	r1, r3, #0, #8
   142aa:	4a39      	ldr	r2, [pc, #228]	; (14390 <gen_prov_start+0x12c>)
   142ac:	4b39      	ldr	r3, [pc, #228]	; (14394 <gen_prov_start+0x130>)
   142ae:	483b      	ldr	r0, [pc, #236]	; (1439c <gen_prov_start+0x138>)
   142b0:	1a9b      	subs	r3, r3, r2
   142b2:	08db      	lsrs	r3, r3, #3
   142b4:	f363 118f 	bfi	r1, r3, #6, #10
   142b8:	f00a f8c3 	bl	1e442 <log_0>
		gen_prov_ack_send(rx->xact_id);
   142bc:	7938      	ldrb	r0, [r7, #4]
}
   142be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		gen_prov_ack_send(rx->xact_id);
   142c2:	f7ff b857 	b.w	13374 <gen_prov_ack_send>
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   142c6:	4608      	mov	r0, r1
   142c8:	f8d4 812c 	ldr.w	r8, [r4, #300]	; 0x12c
   142cc:	f00e f9ea 	bl	226a4 <net_buf_simple_pull_be16>
   142d0:	f8a8 0004 	strh.w	r0, [r8, #4]
	link.rx.id  = rx->xact_id;
   142d4:	793b      	ldrb	r3, [r7, #4]
   142d6:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   142da:	4630      	mov	r0, r6
   142dc:	f00e f9d2 	bl	22684 <net_buf_simple_pull_u8>
   142e0:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
	if (link.rx.buf->len < 1) {
   142e4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   142e8:	8881      	ldrh	r1, [r0, #4]
   142ea:	b961      	cbnz	r1, 14306 <gen_prov_start+0xa2>
		BT_ERR("Ignoring zero-length provisioning PDU");
   142ec:	2301      	movs	r3, #1
   142ee:	f363 0107 	bfi	r1, r3, #0, #8
   142f2:	4a27      	ldr	r2, [pc, #156]	; (14390 <gen_prov_start+0x12c>)
   142f4:	4b27      	ldr	r3, [pc, #156]	; (14394 <gen_prov_start+0x130>)
   142f6:	482a      	ldr	r0, [pc, #168]	; (143a0 <gen_prov_start+0x13c>)
   142f8:	1a9b      	subs	r3, r3, r2
   142fa:	08db      	lsrs	r3, r3, #3
   142fc:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Too small total length for multi-segment PDU");
   14300:	f00a f89f 	bl	1e442 <log_0>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   14304:	e010      	b.n	14328 <gen_prov_start+0xc4>
	if (link.rx.buf->len > link.rx.buf->size) {
   14306:	88c3      	ldrh	r3, [r0, #6]
   14308:	428b      	cmp	r3, r1
   1430a:	d212      	bcs.n	14332 <gen_prov_start+0xce>
		BT_ERR("Too large provisioning PDU (%u bytes)",
   1430c:	2301      	movs	r3, #1
   1430e:	f04f 0200 	mov.w	r2, #0
   14312:	f363 0207 	bfi	r2, r3, #0, #8
   14316:	481e      	ldr	r0, [pc, #120]	; (14390 <gen_prov_start+0x12c>)
   14318:	4b1e      	ldr	r3, [pc, #120]	; (14394 <gen_prov_start+0x130>)
   1431a:	1a1b      	subs	r3, r3, r0
   1431c:	08db      	lsrs	r3, r3, #3
   1431e:	f363 128f 	bfi	r2, r3, #6, #10
   14322:	4820      	ldr	r0, [pc, #128]	; (143a4 <gen_prov_start+0x140>)
   14324:	f00a f89a 	bl	1e45c <log_1>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   14328:	2002      	movs	r0, #2
}
   1432a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   1432e:	f7ff bb9b 	b.w	13a68 <close_link.constprop.22>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20) {
   14332:	797b      	ldrb	r3, [r7, #5]
   14334:	089b      	lsrs	r3, r3, #2
   14336:	d00e      	beq.n	14356 <gen_prov_start+0xf2>
   14338:	2914      	cmp	r1, #20
   1433a:	d80c      	bhi.n	14356 <gen_prov_start+0xf2>
		BT_ERR("Too small total length for multi-segment PDU");
   1433c:	2301      	movs	r3, #1
   1433e:	f04f 0100 	mov.w	r1, #0
   14342:	f363 0107 	bfi	r1, r3, #0, #8
   14346:	4a12      	ldr	r2, [pc, #72]	; (14390 <gen_prov_start+0x12c>)
   14348:	4b12      	ldr	r3, [pc, #72]	; (14394 <gen_prov_start+0x130>)
   1434a:	4817      	ldr	r0, [pc, #92]	; (143a8 <gen_prov_start+0x144>)
   1434c:	1a9b      	subs	r3, r3, r2
   1434e:	08db      	lsrs	r3, r3, #3
   14350:	f363 118f 	bfi	r1, r3, #6, #10
   14354:	e7d4      	b.n	14300 <gen_prov_start+0x9c>
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
   14356:	1c59      	adds	r1, r3, #1
   14358:	2201      	movs	r2, #1
   1435a:	408a      	lsls	r2, r1
   1435c:	3a01      	subs	r2, #1
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   1435e:	f885 3127 	strb.w	r3, [r5, #295]	; 0x127
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
   14362:	f885 2126 	strb.w	r2, [r5, #294]	; 0x126
	memcpy(link.rx.buf->data, buf->data, buf->len);
   14366:	88b2      	ldrh	r2, [r6, #4]
   14368:	6831      	ldr	r1, [r6, #0]
   1436a:	6800      	ldr	r0, [r0, #0]
   1436c:	f00b f94c 	bl	1f608 <memcpy>
	XACT_SEG_RECV(0);
   14370:	f895 3126 	ldrb.w	r3, [r5, #294]	; 0x126
   14374:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   14378:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
	if (!link.rx.seg) {
   1437c:	b91b      	cbnz	r3, 14386 <gen_prov_start+0x122>
}
   1437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   14382:	f7ff be3d 	b.w	14000 <prov_msg_recv>
}
   14386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1438a:	bf00      	nop
   1438c:	200000a8 	.word	0x200000a8
   14390:	000233ec 	.word	0x000233ec
   14394:	000234bc 	.word	0x000234bc
   14398:	0002768e 	.word	0x0002768e
   1439c:	0002758d 	.word	0x0002758d
   143a0:	000276bc 	.word	0x000276bc
   143a4:	000276e2 	.word	0x000276e2
   143a8:	00027708 	.word	0x00027708

000143ac <send_confirm>:
{
   143ac:	b510      	push	{r4, lr}
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   143ae:	4c41      	ldr	r4, [pc, #260]	; (144b4 <send_confirm+0x108>)
{
   143b0:	b08a      	sub	sp, #40	; 0x28
	PROV_BUF(cfm, 17);
   143b2:	ab04      	add	r3, sp, #16
   143b4:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   143b8:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   143bc:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	PROV_BUF(cfm, 17);
   143c0:	9301      	str	r3, [sp, #4]
   143c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   143c6:	f00c fe96 	bl	210f6 <bt_mesh_prov_conf_salt>
   143ca:	b190      	cbz	r0, 143f2 <send_confirm+0x46>
		BT_ERR("Unable to generate confirmation salt");
   143cc:	2301      	movs	r3, #1
   143ce:	f04f 0100 	mov.w	r1, #0
   143d2:	f363 0107 	bfi	r1, r3, #0, #8
   143d6:	4a38      	ldr	r2, [pc, #224]	; (144b8 <send_confirm+0x10c>)
   143d8:	4b38      	ldr	r3, [pc, #224]	; (144bc <send_confirm+0x110>)
   143da:	4839      	ldr	r0, [pc, #228]	; (144c0 <send_confirm+0x114>)
   143dc:	1a9b      	subs	r3, r3, r2
   143de:	08db      	lsrs	r3, r3, #3
   143e0:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to generate confirmation value");
   143e4:	f00a f82d 	bl	1e442 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   143e8:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   143ea:	f7ff fb3d 	bl	13a68 <close_link.constprop.22>
}
   143ee:	b00a      	add	sp, #40	; 0x28
   143f0:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(link.dhkey, link.conf_salt, link.conf_key)) {
   143f2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   143f6:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   143fa:	f104 0008 	add.w	r0, r4, #8
   143fe:	f7f9 ffaf 	bl	e360 <bt_mesh_prov_conf_key>
   14402:	b160      	cbz	r0, 1441e <send_confirm+0x72>
		BT_ERR("Unable to generate confirmation key");
   14404:	2301      	movs	r3, #1
   14406:	f04f 0100 	mov.w	r1, #0
   1440a:	f363 0107 	bfi	r1, r3, #0, #8
   1440e:	4a2a      	ldr	r2, [pc, #168]	; (144b8 <send_confirm+0x10c>)
   14410:	4b2a      	ldr	r3, [pc, #168]	; (144bc <send_confirm+0x110>)
   14412:	482c      	ldr	r0, [pc, #176]	; (144c4 <send_confirm+0x118>)
   14414:	1a9b      	subs	r3, r3, r2
   14416:	08db      	lsrs	r3, r3, #3
   14418:	f363 118f 	bfi	r1, r3, #6, #10
   1441c:	e7e2      	b.n	143e4 <send_confirm+0x38>
	if (bt_rand(link.rand, 16)) {
   1441e:	2110      	movs	r1, #16
   14420:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   14424:	f00d fd06 	bl	21e34 <bt_rand>
   14428:	b160      	cbz	r0, 14444 <send_confirm+0x98>
		BT_ERR("Unable to generate random number");
   1442a:	2301      	movs	r3, #1
   1442c:	f04f 0100 	mov.w	r1, #0
   14430:	f363 0107 	bfi	r1, r3, #0, #8
   14434:	4a20      	ldr	r2, [pc, #128]	; (144b8 <send_confirm+0x10c>)
   14436:	4b21      	ldr	r3, [pc, #132]	; (144bc <send_confirm+0x110>)
   14438:	4823      	ldr	r0, [pc, #140]	; (144c8 <send_confirm+0x11c>)
   1443a:	1a9b      	subs	r3, r3, r2
   1443c:	08db      	lsrs	r3, r3, #3
   1443e:	f363 118f 	bfi	r1, r3, #6, #10
   14442:	e7cf      	b.n	143e4 <send_confirm+0x38>
	prov_buf_init(&cfm, PROV_CONFIRM);
   14444:	2105      	movs	r1, #5
   14446:	a801      	add	r0, sp, #4
   14448:	f00d fa43 	bl	218d2 <prov_buf_init>
			      net_buf_simple_add(&cfm, 16))) {
   1444c:	2110      	movs	r1, #16
   1444e:	a801      	add	r0, sp, #4
   14450:	f00e f89b 	bl	2258a <net_buf_simple_add>
	if (bt_mesh_prov_conf(link.conf_key, link.rand, link.auth,
   14454:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   14458:	4603      	mov	r3, r0
   1445a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1445e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   14462:	f00c fe59 	bl	21118 <bt_mesh_prov_conf>
   14466:	b160      	cbz	r0, 14482 <send_confirm+0xd6>
		BT_ERR("Unable to generate confirmation value");
   14468:	2301      	movs	r3, #1
   1446a:	f04f 0100 	mov.w	r1, #0
   1446e:	f363 0107 	bfi	r1, r3, #0, #8
   14472:	4a11      	ldr	r2, [pc, #68]	; (144b8 <send_confirm+0x10c>)
   14474:	4b11      	ldr	r3, [pc, #68]	; (144bc <send_confirm+0x110>)
   14476:	4815      	ldr	r0, [pc, #84]	; (144cc <send_confirm+0x120>)
   14478:	1a9b      	subs	r3, r3, r2
   1447a:	08db      	lsrs	r3, r3, #3
   1447c:	f363 118f 	bfi	r1, r3, #6, #10
   14480:	e7b0      	b.n	143e4 <send_confirm+0x38>
	if (prov_send(&cfm)) {
   14482:	a801      	add	r0, sp, #4
   14484:	f7fe fe90 	bl	131a8 <prov_send>
   14488:	b178      	cbz	r0, 144aa <send_confirm+0xfe>
		BT_ERR("Failed to send Provisioning Confirm");
   1448a:	2301      	movs	r3, #1
   1448c:	f04f 0100 	mov.w	r1, #0
   14490:	f363 0107 	bfi	r1, r3, #0, #8
   14494:	4a08      	ldr	r2, [pc, #32]	; (144b8 <send_confirm+0x10c>)
   14496:	4b09      	ldr	r3, [pc, #36]	; (144bc <send_confirm+0x110>)
   14498:	480d      	ldr	r0, [pc, #52]	; (144d0 <send_confirm+0x124>)
   1449a:	1a9b      	subs	r3, r3, r2
   1449c:	08db      	lsrs	r3, r3, #3
   1449e:	f363 118f 	bfi	r1, r3, #6, #10
   144a2:	f009 ffce 	bl	1e442 <log_0>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   144a6:	2005      	movs	r0, #5
   144a8:	e79f      	b.n	143ea <send_confirm+0x3e>
	link.expect = PROV_RANDOM;
   144aa:	2306      	movs	r3, #6
   144ac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   144b0:	e79d      	b.n	143ee <send_confirm+0x42>
   144b2:	bf00      	nop
   144b4:	200000a8 	.word	0x200000a8
   144b8:	000233ec 	.word	0x000233ec
   144bc:	000234bc 	.word	0x000234bc
   144c0:	0002799e 	.word	0x0002799e
   144c4:	000279c3 	.word	0x000279c3
   144c8:	000279e7 	.word	0x000279e7
   144cc:	00027a08 	.word	0x00027a08
   144d0:	00027a2e 	.word	0x00027a2e

000144d4 <prov_confirm>:
{
   144d4:	b508      	push	{r3, lr}
	memcpy(link.conf, data, 16);
   144d6:	4601      	mov	r1, r0
   144d8:	2210      	movs	r2, #16
   144da:	4809      	ldr	r0, [pc, #36]	; (14500 <prov_confirm+0x2c>)
   144dc:	f00b f894 	bl	1f608 <memcpy>
	if (!atomic_test_bit(link.flags, HAVE_DHKEY)) {
   144e0:	2003      	movs	r0, #3
   144e2:	f7ff f887 	bl	135f4 <atomic_test_bit.constprop.26>
   144e6:	b938      	cbnz	r0, 144f8 <prov_confirm+0x24>
		prov_clear_tx();
   144e8:	f7fe fdee 	bl	130c8 <prov_clear_tx>
   144ec:	2110      	movs	r1, #16
   144ee:	4805      	ldr	r0, [pc, #20]	; (14504 <prov_confirm+0x30>)
}
   144f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   144f4:	f00d b9f9 	b.w	218ea <atomic_or>
   144f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
   144fc:	f7ff bf56 	b.w	143ac <send_confirm>
   14500:	200000d4 	.word	0x200000d4
   14504:	200000a8 	.word	0x200000a8

00014508 <prov_dh_key_cb>:
{
   14508:	b508      	push	{r3, lr}
	if (!key) {
   1450a:	4601      	mov	r1, r0
   1450c:	b980      	cbnz	r0, 14530 <prov_dh_key_cb+0x28>
		BT_ERR("DHKey generation failed");
   1450e:	2301      	movs	r3, #1
   14510:	f363 0107 	bfi	r1, r3, #0, #8
   14514:	4a12      	ldr	r2, [pc, #72]	; (14560 <prov_dh_key_cb+0x58>)
   14516:	4b13      	ldr	r3, [pc, #76]	; (14564 <prov_dh_key_cb+0x5c>)
   14518:	4813      	ldr	r0, [pc, #76]	; (14568 <prov_dh_key_cb+0x60>)
   1451a:	1a9b      	subs	r3, r3, r2
   1451c:	08db      	lsrs	r3, r3, #3
   1451e:	f363 118f 	bfi	r1, r3, #6, #10
   14522:	f009 ff8e 	bl	1e442 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   14526:	2007      	movs	r0, #7
}
   14528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   1452c:	f7ff ba9c 	b.w	13a68 <close_link.constprop.22>
	sys_memcpy_swap(link.dhkey, key, 32);
   14530:	480e      	ldr	r0, [pc, #56]	; (1456c <prov_dh_key_cb+0x64>)
   14532:	f00d f9ff 	bl	21934 <sys_memcpy_swap.constprop.21>
   14536:	2108      	movs	r1, #8
   14538:	480d      	ldr	r0, [pc, #52]	; (14570 <prov_dh_key_cb+0x68>)
   1453a:	f00d f9d6 	bl	218ea <atomic_or>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
   1453e:	2005      	movs	r0, #5
   14540:	f7ff f858 	bl	135f4 <atomic_test_bit.constprop.26>
   14544:	b958      	cbnz	r0, 1455e <prov_dh_key_cb+0x56>
	    atomic_test_bit(link.flags, WAIT_STRING)) {
   14546:	2006      	movs	r0, #6
   14548:	f7ff f854 	bl	135f4 <atomic_test_bit.constprop.26>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
   1454c:	b938      	cbnz	r0, 1455e <prov_dh_key_cb+0x56>
	if (atomic_test_and_clear_bit(link.flags, SEND_CONFIRM)) {
   1454e:	2004      	movs	r0, #4
   14550:	f7ff f86e 	bl	13630 <atomic_test_and_clear_bit.constprop.24>
   14554:	b118      	cbz	r0, 1455e <prov_dh_key_cb+0x56>
}
   14556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
   1455a:	f7ff bf27 	b.w	143ac <send_confirm>
}
   1455e:	bd08      	pop	{r3, pc}
   14560:	000233ec 	.word	0x000233ec
   14564:	000234bc 	.word	0x000234bc
   14568:	000277e3 	.word	0x000277e3
   1456c:	200000b0 	.word	0x200000b0
   14570:	200000a8 	.word	0x200000a8

00014574 <bt_mesh_prov_get>:
#endif /* CONFIG_BT_MESH_PB_GATT */

const struct bt_mesh_prov *bt_mesh_prov_get(void)
{
	return prov;
}
   14574:	4b01      	ldr	r3, [pc, #4]	; (1457c <bt_mesh_prov_get+0x8>)
   14576:	6818      	ldr	r0, [r3, #0]
   14578:	4770      	bx	lr
   1457a:	bf00      	nop
   1457c:	20000af0 	.word	0x20000af0

00014580 <bt_mesh_pb_adv_recv>:
{
   14580:	b513      	push	{r0, r1, r4, lr}
   14582:	4604      	mov	r4, r0
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
   14584:	f00d f9e2 	bl	2194c <bt_prov_active>
   14588:	b188      	cbz	r0, 145ae <bt_mesh_pb_adv_recv+0x2e>
	if (buf->len < 6) {
   1458a:	88a1      	ldrh	r1, [r4, #4]
   1458c:	2905      	cmp	r1, #5
   1458e:	d814      	bhi.n	145ba <bt_mesh_pb_adv_recv+0x3a>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   14590:	2302      	movs	r3, #2
   14592:	f04f 0200 	mov.w	r2, #0
   14596:	f363 0207 	bfi	r2, r3, #0, #8
   1459a:	482a      	ldr	r0, [pc, #168]	; (14644 <bt_mesh_pb_adv_recv+0xc4>)
   1459c:	4b2a      	ldr	r3, [pc, #168]	; (14648 <bt_mesh_pb_adv_recv+0xc8>)
   1459e:	1a1b      	subs	r3, r3, r0
   145a0:	08db      	lsrs	r3, r3, #3
   145a2:	482a      	ldr	r0, [pc, #168]	; (1464c <bt_mesh_pb_adv_recv+0xcc>)
   145a4:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   145a8:	f009 ff58 	bl	1e45c <log_1>
		return;
   145ac:	e003      	b.n	145b6 <bt_mesh_pb_adv_recv+0x36>
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
   145ae:	f00c f8eb 	bl	20788 <bt_mesh_is_provisioned>
   145b2:	2800      	cmp	r0, #0
   145b4:	d0e9      	beq.n	1458a <bt_mesh_pb_adv_recv+0xa>
}
   145b6:	b002      	add	sp, #8
   145b8:	bd10      	pop	{r4, pc}
	rx.link_id = net_buf_simple_pull_be32(buf);
   145ba:	4620      	mov	r0, r4
   145bc:	f00e f87d 	bl	226ba <net_buf_simple_pull_be32>
   145c0:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   145c2:	4620      	mov	r0, r4
   145c4:	f00e f85e 	bl	22684 <net_buf_simple_pull_u8>
   145c8:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   145cc:	4620      	mov	r0, r4
   145ce:	f00e f859 	bl	22684 <net_buf_simple_pull_u8>
   145d2:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, LINK_ACTIVE) && link.id != rx.link_id) {
   145d6:	2002      	movs	r0, #2
   145d8:	f7ff f80c 	bl	135f4 <atomic_test_bit.constprop.26>
   145dc:	b128      	cbz	r0, 145ea <bt_mesh_pb_adv_recv+0x6a>
   145de:	4b1c      	ldr	r3, [pc, #112]	; (14650 <bt_mesh_pb_adv_recv+0xd0>)
   145e0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   145e4:	9b00      	ldr	r3, [sp, #0]
   145e6:	429a      	cmp	r2, r3
   145e8:	d1e5      	bne.n	145b6 <bt_mesh_pb_adv_recv+0x36>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   145ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
   145ee:	4a19      	ldr	r2, [pc, #100]	; (14654 <bt_mesh_pb_adv_recv+0xd4>)
   145f0:	88a0      	ldrh	r0, [r4, #4]
   145f2:	f001 0103 	and.w	r1, r1, #3
   145f6:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
   145fa:	795b      	ldrb	r3, [r3, #5]
   145fc:	4298      	cmp	r0, r3
   145fe:	d20c      	bcs.n	1461a <bt_mesh_pb_adv_recv+0x9a>
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   14600:	2301      	movs	r3, #1
   14602:	f04f 0200 	mov.w	r2, #0
   14606:	f363 0207 	bfi	r2, r3, #0, #8
   1460a:	480e      	ldr	r0, [pc, #56]	; (14644 <bt_mesh_pb_adv_recv+0xc4>)
   1460c:	4b0e      	ldr	r3, [pc, #56]	; (14648 <bt_mesh_pb_adv_recv+0xc8>)
   1460e:	1a1b      	subs	r3, r3, r0
   14610:	08db      	lsrs	r3, r3, #3
   14612:	f363 128f 	bfi	r2, r3, #6, #10
   14616:	4810      	ldr	r0, [pc, #64]	; (14658 <bt_mesh_pb_adv_recv+0xd8>)
   14618:	e7c6      	b.n	145a8 <bt_mesh_pb_adv_recv+0x28>
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
   1461a:	2002      	movs	r0, #2
   1461c:	f7fe ffea 	bl	135f4 <atomic_test_bit.constprop.26>
   14620:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14624:	b930      	cbnz	r0, 14634 <bt_mesh_pb_adv_recv+0xb4>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   14626:	f003 0103 	and.w	r1, r3, #3
   1462a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
   1462e:	7909      	ldrb	r1, [r1, #4]
   14630:	2900      	cmp	r1, #0
   14632:	d1c0      	bne.n	145b6 <bt_mesh_pb_adv_recv+0x36>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   14634:	f003 0303 	and.w	r3, r3, #3
   14638:	4621      	mov	r1, r4
   1463a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   1463e:	4668      	mov	r0, sp
   14640:	4798      	blx	r3
   14642:	e7b8      	b.n	145b6 <bt_mesh_pb_adv_recv+0x36>
   14644:	000233ec 	.word	0x000233ec
   14648:	000234bc 	.word	0x000234bc
   1464c:	000274bb 	.word	0x000274bb
   14650:	200000a8 	.word	0x200000a8
   14654:	00023dd8 	.word	0x00023dd8
   14658:	0002747e 	.word	0x0002747e

0001465c <bt_mesh_prov_init>:
{
	return atomic_test_bit(link.flags, LINK_ACTIVE);
}

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   1465c:	b538      	push	{r3, r4, r5, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func = pub_key_ready,
	};
	int err;

	if (!prov_info) {
   1465e:	4605      	mov	r5, r0
   14660:	b988      	cbnz	r0, 14686 <bt_mesh_prov_init+0x2a>
		BT_ERR("No provisioning context provided");
   14662:	2301      	movs	r3, #1
   14664:	f04f 0100 	mov.w	r1, #0
   14668:	f363 0107 	bfi	r1, r3, #0, #8
   1466c:	4a18      	ldr	r2, [pc, #96]	; (146d0 <bt_mesh_prov_init+0x74>)
   1466e:	4b19      	ldr	r3, [pc, #100]	; (146d4 <bt_mesh_prov_init+0x78>)
   14670:	4819      	ldr	r0, [pc, #100]	; (146d8 <bt_mesh_prov_init+0x7c>)
   14672:	1a9b      	subs	r3, r3, r2
   14674:	08db      	lsrs	r3, r3, #3
   14676:	f363 118f 	bfi	r1, r3, #6, #10
   1467a:	f009 fee2 	bl	1e442 <log_0>
		return -EINVAL;
   1467e:	f06f 0415 	mvn.w	r4, #21
#endif

#endif /* CONFIG_BT_MESH_PB_ADV */

	return 0;
}
   14682:	4620      	mov	r0, r4
   14684:	bd38      	pop	{r3, r4, r5, pc}
	err = bt_pub_key_gen(&pub_key_cb);
   14686:	4815      	ldr	r0, [pc, #84]	; (146dc <bt_mesh_prov_init+0x80>)
   14688:	f7f4 f85c 	bl	8744 <bt_pub_key_gen>
	if (err) {
   1468c:	4604      	mov	r4, r0
   1468e:	b178      	cbz	r0, 146b0 <bt_mesh_prov_init+0x54>
		BT_ERR("Failed to generate public key (%d)", err);
   14690:	2301      	movs	r3, #1
   14692:	f04f 0200 	mov.w	r2, #0
   14696:	f363 0207 	bfi	r2, r3, #0, #8
   1469a:	490d      	ldr	r1, [pc, #52]	; (146d0 <bt_mesh_prov_init+0x74>)
   1469c:	4b0d      	ldr	r3, [pc, #52]	; (146d4 <bt_mesh_prov_init+0x78>)
   1469e:	1a5b      	subs	r3, r3, r1
   146a0:	08db      	lsrs	r3, r3, #3
   146a2:	4601      	mov	r1, r0
   146a4:	f363 128f 	bfi	r2, r3, #6, #10
   146a8:	480d      	ldr	r0, [pc, #52]	; (146e0 <bt_mesh_prov_init+0x84>)
   146aa:	f009 fed7 	bl	1e45c <log_1>
		return err;
   146ae:	e7e8      	b.n	14682 <bt_mesh_prov_init+0x26>
	prov = prov_info;
   146b0:	4b0c      	ldr	r3, [pc, #48]	; (146e4 <bt_mesh_prov_init+0x88>)
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   146b2:	490d      	ldr	r1, [pc, #52]	; (146e8 <bt_mesh_prov_init+0x8c>)
	prov = prov_info;
   146b4:	601d      	str	r5, [r3, #0]
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   146b6:	4d0d      	ldr	r5, [pc, #52]	; (146ec <bt_mesh_prov_init+0x90>)
   146b8:	f505 70a4 	add.w	r0, r5, #328	; 0x148
   146bc:	f00e fc65 	bl	22f8a <k_delayed_work_init>
	link.rx.prev_id = XACT_NVAL;
   146c0:	23ff      	movs	r3, #255	; 0xff
   146c2:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125
	link.rx.buf = bt_mesh_proxy_get_buf();
   146c6:	f000 fbf3 	bl	14eb0 <bt_mesh_proxy_get_buf>
   146ca:	f8c5 012c 	str.w	r0, [r5, #300]	; 0x12c
	return 0;
   146ce:	e7d8      	b.n	14682 <bt_mesh_prov_init+0x26>
   146d0:	000233ec 	.word	0x000233ec
   146d4:	000234bc 	.word	0x000234bc
   146d8:	00027549 	.word	0x00027549
   146dc:	20007be8 	.word	0x20007be8
   146e0:	0002756a 	.word	0x0002756a
   146e4:	20000af0 	.word	0x20000af0
   146e8:	000137d9 	.word	0x000137d9
   146ec:	200000a8 	.word	0x200000a8

000146f0 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(u16_t net_idx, u16_t addr)
{
	if (prov->complete) {
   146f0:	4b02      	ldr	r3, [pc, #8]	; (146fc <bt_mesh_prov_complete+0xc>)
   146f2:	681b      	ldr	r3, [r3, #0]
   146f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   146f6:	b103      	cbz	r3, 146fa <bt_mesh_prov_complete+0xa>
		prov->complete(net_idx, addr);
   146f8:	4718      	bx	r3
	}
}
   146fa:	4770      	bx	lr
   146fc:	20000af0 	.word	0x20000af0

00014700 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
	if (prov->reset) {
   14700:	4b02      	ldr	r3, [pc, #8]	; (1470c <bt_mesh_prov_reset+0xc>)
   14702:	681b      	ldr	r3, [r3, #0]
   14704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14706:	b103      	cbz	r3, 1470a <bt_mesh_prov_reset+0xa>
		prov->reset();
   14708:	4718      	bx	r3
	}
}
   1470a:	4770      	bx	lr
   1470c:	20000af0 	.word	0x20000af0

00014710 <proxy_disconnected>:
{
	int i;

	BT_DBG("conn %p reason 0x%02x", conn, reason);

	conn_count--;
   14710:	4a0b      	ldr	r2, [pc, #44]	; (14740 <proxy_disconnected+0x30>)
   14712:	6813      	ldr	r3, [r2, #0]
{
   14714:	b510      	push	{r4, lr}

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		if (client->conn == conn) {
   14716:	4c0b      	ldr	r4, [pc, #44]	; (14744 <proxy_disconnected+0x34>)
	conn_count--;
   14718:	3b01      	subs	r3, #1
   1471a:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
   1471c:	6823      	ldr	r3, [r4, #0]
   1471e:	4283      	cmp	r3, r0
   14720:	d109      	bne.n	14736 <proxy_disconnected+0x26>
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   14722:	7aa3      	ldrb	r3, [r4, #10]
   14724:	2b03      	cmp	r3, #3
   14726:	d101      	bne.n	1472c <proxy_disconnected+0x1c>
			    client->filter_type == PROV) {
				bt_mesh_pb_gatt_close(conn);
   14728:	f7ff f95a 	bl	139e0 <bt_mesh_pb_gatt_close>
			}

			bt_conn_unref(client->conn);
   1472c:	6820      	ldr	r0, [r4, #0]
   1472e:	f00b fa09 	bl	1fb44 <bt_conn_unref>
			client->conn = NULL;
   14732:	2300      	movs	r3, #0
   14734:	6023      	str	r3, [r4, #0]
			break;
		}
	}

	bt_mesh_adv_update();
}
   14736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_update();
   1473a:	f7f6 bf9d 	b.w	b678 <bt_mesh_adv_update>
   1473e:	bf00      	nop
   14740:	20000af4 	.word	0x20000af4
   14744:	20007c40 	.word	0x20007c40

00014748 <prov_ccc_write.part.2>:
static void prov_ccc_changed(const struct bt_gatt_attr *attr, u16_t value)
{
	BT_DBG("value 0x%04x", value);
}

static bool prov_ccc_write(struct bt_conn *conn,
   14748:	b508      	push	{r3, lr}
	struct bt_mesh_proxy_client *client;

	BT_DBG("value 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   1474a:	f04f 0200 	mov.w	r2, #0
   1474e:	2302      	movs	r3, #2
   14750:	f363 0207 	bfi	r2, r3, #0, #8
   14754:	4905      	ldr	r1, [pc, #20]	; (1476c <prov_ccc_write.part.2+0x24>)
   14756:	4b06      	ldr	r3, [pc, #24]	; (14770 <prov_ccc_write.part.2+0x28>)
   14758:	1a5b      	subs	r3, r3, r1
   1475a:	08db      	lsrs	r3, r3, #3
   1475c:	4601      	mov	r1, r0
   1475e:	f363 128f 	bfi	r2, r3, #6, #10
   14762:	4804      	ldr	r0, [pc, #16]	; (14774 <prov_ccc_write.part.2+0x2c>)
   14764:	f009 fe7a 	bl	1e45c <log_1>
		client->filter_type = PROV;
		bt_mesh_pb_gatt_open(conn);
	}

	return true;
}
   14768:	2000      	movs	r0, #0
   1476a:	bd08      	pop	{r3, pc}
   1476c:	000233ec 	.word	0x000233ec
   14770:	000234c4 	.word	0x000234c4
   14774:	00027bba 	.word	0x00027bba

00014778 <next_sub.part.5>:

	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
}

static struct bt_mesh_subnet *next_sub(void)
   14778:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub;

		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   1477a:	4d1b      	ldr	r5, [pc, #108]	; (147e8 <next_sub.part.5+0x70>)
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   1477c:	4e1b      	ldr	r6, [pc, #108]	; (147ec <next_sub.part.5+0x74>)
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   1477e:	682c      	ldr	r4, [r5, #0]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   14780:	23e4      	movs	r3, #228	; 0xe4
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   14782:	f004 0401 	and.w	r4, r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   14786:	fb03 6304 	mla	r3, r3, r4, r6
   1478a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1478e:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
   14792:	4291      	cmp	r1, r2
   14794:	d007      	beq.n	147a6 <next_sub.part.5+0x2e>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   14796:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
   1479a:	2b01      	cmp	r3, #1
   1479c:	d014      	beq.n	147c8 <next_sub.part.5+0x50>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   1479e:	f7fc fb85 	bl	10eac <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   147a2:	2801      	cmp	r0, #1
   147a4:	d010      	beq.n	147c8 <next_sub.part.5+0x50>
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   147a6:	682b      	ldr	r3, [r5, #0]
   147a8:	1c5c      	adds	r4, r3, #1
   147aa:	f004 0401 	and.w	r4, r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   147ae:	23e4      	movs	r3, #228	; 0xe4
   147b0:	fb03 6304 	mla	r3, r3, r4, r6
   147b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   147b8:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
   147bc:	4291      	cmp	r1, r2
   147be:	d011      	beq.n	147e4 <next_sub.part.5+0x6c>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   147c0:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
   147c4:	2b01      	cmp	r3, #1
   147c6:	d109      	bne.n	147dc <next_sub.part.5+0x64>
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   147c8:	682b      	ldr	r3, [r5, #0]
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   147ca:	20e4      	movs	r0, #228	; 0xe4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   147cc:	3301      	adds	r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   147ce:	fb00 6004 	mla	r0, r0, r4, r6
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   147d2:	f003 0301 	and.w	r3, r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   147d6:	30a4      	adds	r0, #164	; 0xa4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   147d8:	602b      	str	r3, [r5, #0]
			return sub;
		}
	}

	return NULL;
}
   147da:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   147dc:	f7fc fb66 	bl	10eac <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   147e0:	2801      	cmp	r0, #1
   147e2:	d0f1      	beq.n	147c8 <next_sub.part.5+0x50>
	return NULL;
   147e4:	2000      	movs	r0, #0
   147e6:	e7f8      	b.n	147da <next_sub.part.5+0x62>
   147e8:	20000af8 	.word	0x20000af8
   147ec:	20007924 	.word	0x20007924

000147f0 <proxy_connected>:
	conn_count++;
   147f0:	4a16      	ldr	r2, [pc, #88]	; (1484c <proxy_connected+0x5c>)
   147f2:	6813      	ldr	r3, [r2, #0]
   147f4:	3301      	adds	r3, #1
{
   147f6:	b570      	push	{r4, r5, r6, lr}
	proxy_adv_enabled = false;
   147f8:	2100      	movs	r1, #0
	conn_count++;
   147fa:	6013      	str	r3, [r2, #0]
	proxy_adv_enabled = false;
   147fc:	4a14      	ldr	r2, [pc, #80]	; (14850 <proxy_connected+0x60>)
	if (conn_count < CONFIG_BT_MAX_CONN) {
   147fe:	428b      	cmp	r3, r1
{
   14800:	4606      	mov	r6, r0
	proxy_adv_enabled = false;
   14802:	7011      	strb	r1, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
   14804:	dc01      	bgt.n	1480a <proxy_connected+0x1a>
		bt_mesh_adv_update();
   14806:	f7f6 ff37 	bl	b678 <bt_mesh_adv_update>
		if (!clients[i].conn) {
   1480a:	4c12      	ldr	r4, [pc, #72]	; (14854 <proxy_connected+0x64>)
   1480c:	6825      	ldr	r5, [r4, #0]
   1480e:	b17d      	cbz	r5, 14830 <proxy_connected+0x40>
		BT_ERR("No free Proxy Client objects");
   14810:	2301      	movs	r3, #1
   14812:	f04f 0100 	mov.w	r1, #0
   14816:	f363 0107 	bfi	r1, r3, #0, #8
   1481a:	4a0f      	ldr	r2, [pc, #60]	; (14858 <proxy_connected+0x68>)
   1481c:	4b0f      	ldr	r3, [pc, #60]	; (1485c <proxy_connected+0x6c>)
   1481e:	4810      	ldr	r0, [pc, #64]	; (14860 <proxy_connected+0x70>)
   14820:	1a9b      	subs	r3, r3, r2
   14822:	08db      	lsrs	r3, r3, #3
   14824:	f363 118f 	bfi	r1, r3, #6, #10
}
   14828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("No free Proxy Client objects");
   1482c:	f009 be09 	b.w	1e442 <log_0>
	client->conn = bt_conn_ref(conn);
   14830:	4630      	mov	r0, r6
   14832:	f00b f980 	bl	1fb36 <bt_conn_ref>
	(void)memset(client->filter, 0, sizeof(client->filter));
   14836:	2206      	movs	r2, #6
	client->conn = bt_conn_ref(conn);
   14838:	6020      	str	r0, [r4, #0]
	(void)memset(client->filter, 0, sizeof(client->filter));
   1483a:	4629      	mov	r1, r5
   1483c:	1d20      	adds	r0, r4, #4
	client->filter_type = NONE;
   1483e:	72a5      	strb	r5, [r4, #10]
	(void)memset(client->filter, 0, sizeof(client->filter));
   14840:	f00a ff0c 	bl	1f65c <memset>
   14844:	6a23      	ldr	r3, [r4, #32]
	buf->len  = 0;
   14846:	83a5      	strh	r5, [r4, #28]
	buf->data = buf->__buf;
   14848:	61a3      	str	r3, [r4, #24]
}
   1484a:	bd70      	pop	{r4, r5, r6, pc}
   1484c:	20000af4 	.word	0x20000af4
   14850:	200022f6 	.word	0x200022f6
   14854:	20007c40 	.word	0x20007c40
   14858:	000233ec 	.word	0x000233ec
   1485c:	000234c4 	.word	0x000234c4
   14860:	00027cb5 	.word	0x00027cb5

00014864 <proxy_send>:
{
   14864:	4613      	mov	r3, r2
	if (gatt_svc == MESH_GATT_PROXY) {
   14866:	4a0b      	ldr	r2, [pc, #44]	; (14894 <proxy_send+0x30>)
   14868:	7812      	ldrb	r2, [r2, #0]
   1486a:	2a02      	cmp	r2, #2
{
   1486c:	b513      	push	{r0, r1, r4, lr}
   1486e:	f04f 0400 	mov.w	r4, #0
	if (gatt_svc == MESH_GATT_PROXY) {
   14872:	d106      	bne.n	14882 <proxy_send+0x1e>
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
				 const struct bt_gatt_attr *attr,
				 const void *data, u16_t len)
{
	return bt_gatt_notify_cb(conn, attr, data, len, NULL);
   14874:	460a      	mov	r2, r1
   14876:	4908      	ldr	r1, [pc, #32]	; (14898 <proxy_send+0x34>)
   14878:	9400      	str	r4, [sp, #0]
   1487a:	f7f6 fb73 	bl	af64 <bt_gatt_notify_cb>
}
   1487e:	b002      	add	sp, #8
   14880:	bd10      	pop	{r4, pc}
	if (gatt_svc == MESH_GATT_PROV) {
   14882:	2a01      	cmp	r2, #1
   14884:	d103      	bne.n	1488e <proxy_send+0x2a>
   14886:	460a      	mov	r2, r1
   14888:	9400      	str	r4, [sp, #0]
   1488a:	4904      	ldr	r1, [pc, #16]	; (1489c <proxy_send+0x38>)
   1488c:	e7f5      	b.n	1487a <proxy_send+0x16>
	return 0;
   1488e:	4620      	mov	r0, r4
   14890:	e7f5      	b.n	1487e <proxy_send+0x1a>
   14892:	bf00      	nop
   14894:	200022f4 	.word	0x200022f4
   14898:	20007d38 	.word	0x20007d38
   1489c:	20007cb4 	.word	0x20007cb4

000148a0 <proxy_send_beacons>:
{
   148a0:	b538      	push	{r3, r4, r5, lr}
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   148a2:	4c0e      	ldr	r4, [pc, #56]	; (148dc <proxy_send_beacons+0x3c>)
   148a4:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   148a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   148ac:	429a      	cmp	r2, r3
{
   148ae:	4605      	mov	r5, r0
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   148b0:	d005      	beq.n	148be <proxy_send_beacons+0x1e>
			beacon_send(client->conn, sub);
   148b2:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
   148b6:	f850 0c0c 	ldr.w	r0, [r0, #-12]
   148ba:	f00d f8aa 	bl	21a12 <beacon_send>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   148be:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   148c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   148c6:	429a      	cmp	r2, r3
   148c8:	d006      	beq.n	148d8 <proxy_send_beacons+0x38>
			beacon_send(client->conn, sub);
   148ca:	f855 0c0c 	ldr.w	r0, [r5, #-12]
   148ce:	4904      	ldr	r1, [pc, #16]	; (148e0 <proxy_send_beacons+0x40>)
}
   148d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(client->conn, sub);
   148d4:	f00d b89d 	b.w	21a12 <beacon_send>
}
   148d8:	bd38      	pop	{r3, r4, r5, pc}
   148da:	bf00      	nop
   148dc:	20007924 	.word	0x20007924
   148e0:	20007aac 	.word	0x20007aac

000148e4 <send_filter_status>:
{
   148e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
   148e6:	f851 3b04 	ldr.w	r3, [r1], #4
   148ea:	2600      	movs	r6, #0
{
   148ec:	4614      	mov	r4, r2
   148ee:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   148f0:	e9cd 3101 	strd	r3, r1, [sp, #4]
   148f4:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
   148f6:	f7f9 ff19 	bl	e72c <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   148fa:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
   148fc:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   14900:	809e      	strh	r6, [r3, #4]
   14902:	68a3      	ldr	r3, [r4, #8]
   14904:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
   14906:	210a      	movs	r1, #10
   14908:	4620      	mov	r0, r4
	buf->len  = 0;
   1490a:	80a6      	strh	r6, [r4, #4]
   1490c:	f00d fdd8 	bl	224c0 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   14910:	2103      	movs	r1, #3
   14912:	4620      	mov	r0, r4
   14914:	f00d fe48 	bl	225a8 <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
   14918:	7aab      	ldrb	r3, [r5, #10]
   1491a:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   1491c:	bf0c      	ite	eq
   1491e:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
   14920:	2101      	movne	r1, #1
   14922:	4620      	mov	r0, r4
   14924:	f00d fe40 	bl	225a8 <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   14928:	88a9      	ldrh	r1, [r5, #4]
   1492a:	88eb      	ldrh	r3, [r5, #6]
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1492c:	3100      	adds	r1, #0
   1492e:	bf18      	it	ne
   14930:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   14932:	b103      	cbz	r3, 14936 <send_filter_status+0x52>
			filter_size++;
   14934:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   14936:	892b      	ldrh	r3, [r5, #8]
   14938:	b10b      	cbz	r3, 1493e <send_filter_status+0x5a>
			filter_size++;
   1493a:	3101      	adds	r1, #1
   1493c:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
   1493e:	4620      	mov	r0, r4
   14940:	f00d fe49 	bl	225d6 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   14944:	4621      	mov	r1, r4
   14946:	2201      	movs	r2, #1
   14948:	a801      	add	r0, sp, #4
   1494a:	f7f7 fe65 	bl	c618 <bt_mesh_net_encode>
	if (err) {
   1494e:	4601      	mov	r1, r0
   14950:	b178      	cbz	r0, 14972 <send_filter_status+0x8e>
		BT_ERR("Encoding Proxy cfg message failed (err %d)", err);
   14952:	2301      	movs	r3, #1
   14954:	f04f 0200 	mov.w	r2, #0
   14958:	f363 0207 	bfi	r2, r3, #0, #8
   1495c:	480f      	ldr	r0, [pc, #60]	; (1499c <send_filter_status+0xb8>)
   1495e:	4b10      	ldr	r3, [pc, #64]	; (149a0 <send_filter_status+0xbc>)
   14960:	1a1b      	subs	r3, r3, r0
   14962:	08db      	lsrs	r3, r3, #3
   14964:	480f      	ldr	r0, [pc, #60]	; (149a4 <send_filter_status+0xc0>)
   14966:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   1496a:	f009 fd77 	bl	1e45c <log_1>
}
   1496e:	b004      	add	sp, #16
   14970:	bd70      	pop	{r4, r5, r6, pc}
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
   14972:	2102      	movs	r1, #2
   14974:	4622      	mov	r2, r4
   14976:	6828      	ldr	r0, [r5, #0]
   14978:	f00d f802 	bl	21980 <proxy_segment_and_send>
	if (err) {
   1497c:	4601      	mov	r1, r0
   1497e:	2800      	cmp	r0, #0
   14980:	d0f5      	beq.n	1496e <send_filter_status+0x8a>
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   14982:	2301      	movs	r3, #1
   14984:	f04f 0200 	mov.w	r2, #0
   14988:	f363 0207 	bfi	r2, r3, #0, #8
   1498c:	4803      	ldr	r0, [pc, #12]	; (1499c <send_filter_status+0xb8>)
   1498e:	4b04      	ldr	r3, [pc, #16]	; (149a0 <send_filter_status+0xbc>)
   14990:	1a1b      	subs	r3, r3, r0
   14992:	08db      	lsrs	r3, r3, #3
   14994:	f363 128f 	bfi	r2, r3, #6, #10
   14998:	4803      	ldr	r0, [pc, #12]	; (149a8 <send_filter_status+0xc4>)
   1499a:	e7e6      	b.n	1496a <send_filter_status+0x86>
   1499c:	000233ec 	.word	0x000233ec
   149a0:	000234c4 	.word	0x000234c4
   149a4:	00027e07 	.word	0x00027e07
   149a8:	00027e32 	.word	0x00027e32

000149ac <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   149ac:	2a01      	cmp	r2, #1
{
   149ae:	b508      	push	{r3, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   149b0:	d106      	bne.n	149c0 <proxy_ccc_write+0x14>
		if (clients[i].conn == conn) {
   149b2:	4913      	ldr	r1, [pc, #76]	; (14a00 <proxy_ccc_write+0x54>)
   149b4:	680b      	ldr	r3, [r1, #0]
   149b6:	4298      	cmp	r0, r3
   149b8:	d007      	beq.n	149ca <proxy_ccc_write+0x1e>
	if (client->filter_type == NONE) {
   149ba:	2300      	movs	r3, #0
   149bc:	7a9b      	ldrb	r3, [r3, #10]
   149be:	deff      	udf	#255	; 0xff
   149c0:	4610      	mov	r0, r2
}
   149c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   149c6:	f7ff bebf 	b.w	14748 <prov_ccc_write.part.2>
	if (client->filter_type == NONE) {
   149ca:	7a8b      	ldrb	r3, [r1, #10]
   149cc:	b9ab      	cbnz	r3, 149fa <proxy_ccc_write+0x4e>
		client->filter_type = WHITELIST;
   149ce:	728a      	strb	r2, [r1, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   149d0:	f101 0314 	add.w	r3, r1, #20
   149d4:	f3bf 8f5b 	dmb	ish
   149d8:	e853 2f00 	ldrex	r2, [r3]
   149dc:	f042 0001 	orr.w	r0, r2, #1
   149e0:	e843 0c00 	strex	ip, r0, [r3]
   149e4:	f1bc 0f00 	cmp.w	ip, #0
   149e8:	d1f6      	bne.n	149d8 <proxy_ccc_write+0x2c>
   149ea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   149ee:	07d3      	lsls	r3, r2, #31
   149f0:	d403      	bmi.n	149fa <proxy_ccc_write+0x4e>
		k_queue_append(&work_q->queue, work);
   149f2:	310c      	adds	r1, #12
   149f4:	4803      	ldr	r0, [pc, #12]	; (14a04 <proxy_ccc_write+0x58>)
   149f6:	f00e f8c6 	bl	22b86 <k_queue_append>
}
   149fa:	2001      	movs	r0, #1
   149fc:	bd08      	pop	{r3, pc}
   149fe:	bf00      	nop
   14a00:	20007c40 	.word	0x20007c40
   14a04:	20001c74 	.word	0x20001c74

00014a08 <prov_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   14a08:	2a01      	cmp	r2, #1
{
   14a0a:	b508      	push	{r3, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   14a0c:	d106      	bne.n	14a1c <prov_ccc_write+0x14>
		if (clients[i].conn == conn) {
   14a0e:	4b0a      	ldr	r3, [pc, #40]	; (14a38 <prov_ccc_write+0x30>)
   14a10:	681a      	ldr	r2, [r3, #0]
   14a12:	4290      	cmp	r0, r2
   14a14:	d007      	beq.n	14a26 <prov_ccc_write+0x1e>
	if (client->filter_type == NONE) {
   14a16:	2300      	movs	r3, #0
   14a18:	7a9b      	ldrb	r3, [r3, #10]
   14a1a:	deff      	udf	#255	; 0xff
   14a1c:	4610      	mov	r0, r2
}
   14a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14a22:	f7ff be91 	b.w	14748 <prov_ccc_write.part.2>
	if (client->filter_type == NONE) {
   14a26:	7a9a      	ldrb	r2, [r3, #10]
   14a28:	b91a      	cbnz	r2, 14a32 <prov_ccc_write+0x2a>
		client->filter_type = PROV;
   14a2a:	2203      	movs	r2, #3
   14a2c:	729a      	strb	r2, [r3, #10]
		bt_mesh_pb_gatt_open(conn);
   14a2e:	f7fe ffb7 	bl	139a0 <bt_mesh_pb_gatt_open>
}
   14a32:	2001      	movs	r0, #1
   14a34:	bd08      	pop	{r3, pc}
   14a36:	bf00      	nop
   14a38:	20007c40 	.word	0x20007c40

00014a3c <proxy_complete_pdu>:
{
   14a3c:	b570      	push	{r4, r5, r6, lr}
	switch (client->msg_type) {
   14a3e:	7ac1      	ldrb	r1, [r0, #11]
{
   14a40:	b092      	sub	sp, #72	; 0x48
   14a42:	4604      	mov	r4, r0
	switch (client->msg_type) {
   14a44:	2903      	cmp	r1, #3
   14a46:	f200 80c6 	bhi.w	14bd6 <proxy_complete_pdu+0x19a>
   14a4a:	e8df f001 	tbb	[pc, r1]
   14a4e:	0d02      	.short	0x0d02
   14a50:	be11      	.short	0xbe11
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
   14a52:	2202      	movs	r2, #2
   14a54:	2100      	movs	r1, #0
   14a56:	3018      	adds	r0, #24
   14a58:	f7f8 f89a 	bl	cb90 <bt_mesh_net_recv>
   14a5c:	2300      	movs	r3, #0
   14a5e:	83a3      	strh	r3, [r4, #28]
	buf->data = buf->__buf;
   14a60:	6a23      	ldr	r3, [r4, #32]
   14a62:	61a3      	str	r3, [r4, #24]
}
   14a64:	b012      	add	sp, #72	; 0x48
   14a66:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_beacon_recv(&client->buf);
   14a68:	3018      	adds	r0, #24
   14a6a:	f7f7 f84f 	bl	bb0c <bt_mesh_beacon_recv>
		break;
   14a6e:	e7f5      	b.n	14a5c <proxy_complete_pdu+0x20>
	NET_BUF_SIMPLE_DEFINE(buf, 29);
   14a70:	ab0a      	add	r3, sp, #40	; 0x28
   14a72:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   14a76:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14a7a:	9301      	str	r3, [sp, #4]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
   14a7c:	aa04      	add	r2, sp, #16
   14a7e:	ab01      	add	r3, sp, #4
   14a80:	2103      	movs	r1, #3
   14a82:	3018      	adds	r0, #24
   14a84:	f7f7 ff32 	bl	c8ec <bt_mesh_net_decode>
	if (err) {
   14a88:	4605      	mov	r5, r0
   14a8a:	b178      	cbz	r0, 14aac <proxy_complete_pdu+0x70>
		BT_ERR("Failed to decode Proxy Configuration (err %d)", err);
   14a8c:	2301      	movs	r3, #1
   14a8e:	f04f 0200 	mov.w	r2, #0
   14a92:	f363 0207 	bfi	r2, r3, #0, #8
   14a96:	4956      	ldr	r1, [pc, #344]	; (14bf0 <proxy_complete_pdu+0x1b4>)
   14a98:	4b56      	ldr	r3, [pc, #344]	; (14bf4 <proxy_complete_pdu+0x1b8>)
   14a9a:	1a5b      	subs	r3, r3, r1
   14a9c:	08db      	lsrs	r3, r3, #3
   14a9e:	4601      	mov	r1, r0
   14aa0:	4855      	ldr	r0, [pc, #340]	; (14bf8 <proxy_complete_pdu+0x1bc>)
   14aa2:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   14aa6:	f009 fcd9 	bl	1e45c <log_1>
   14aaa:	e7d7      	b.n	14a5c <proxy_complete_pdu+0x20>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
   14aac:	2109      	movs	r1, #9
   14aae:	a801      	add	r0, sp, #4
   14ab0:	f00d fdd8 	bl	22664 <net_buf_simple_pull>
	if (buf.len < 1) {
   14ab4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14ab8:	b973      	cbnz	r3, 14ad8 <proxy_complete_pdu+0x9c>
		BT_WARN("Too short proxy configuration PDU");
   14aba:	2302      	movs	r3, #2
   14abc:	f04f 0100 	mov.w	r1, #0
   14ac0:	f363 0107 	bfi	r1, r3, #0, #8
   14ac4:	4a4a      	ldr	r2, [pc, #296]	; (14bf0 <proxy_complete_pdu+0x1b4>)
   14ac6:	4b4b      	ldr	r3, [pc, #300]	; (14bf4 <proxy_complete_pdu+0x1b8>)
   14ac8:	484c      	ldr	r0, [pc, #304]	; (14bfc <proxy_complete_pdu+0x1c0>)
   14aca:	1a9b      	subs	r3, r3, r2
   14acc:	08db      	lsrs	r3, r3, #3
   14ace:	f363 118f 	bfi	r1, r3, #6, #10
   14ad2:	f009 fcb6 	bl	1e442 <log_0>
		return;
   14ad6:	e7c1      	b.n	14a5c <proxy_complete_pdu+0x20>
	opcode = net_buf_simple_pull_u8(&buf);
   14ad8:	a801      	add	r0, sp, #4
   14ada:	f00d fdd3 	bl	22684 <net_buf_simple_pull_u8>
	switch (opcode) {
   14ade:	2801      	cmp	r0, #1
   14ae0:	d05c      	beq.n	14b9c <proxy_complete_pdu+0x160>
   14ae2:	b246      	sxtb	r6, r0
   14ae4:	b1c6      	cbz	r6, 14b18 <proxy_complete_pdu+0xdc>
   14ae6:	2802      	cmp	r0, #2
   14ae8:	d161      	bne.n	14bae <proxy_complete_pdu+0x172>
		while (buf.len >= 2) {
   14aea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14aee:	2b01      	cmp	r3, #1
   14af0:	d923      	bls.n	14b3a <proxy_complete_pdu+0xfe>
			addr = net_buf_simple_pull_be16(&buf);
   14af2:	a801      	add	r0, sp, #4
   14af4:	f00d fdd6 	bl	226a4 <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   14af8:	2800      	cmp	r0, #0
   14afa:	d0f6      	beq.n	14aea <proxy_complete_pdu+0xae>
		if (client->filter[i] == addr) {
   14afc:	88a3      	ldrh	r3, [r4, #4]
   14afe:	4283      	cmp	r3, r0
   14b00:	d051      	beq.n	14ba6 <proxy_complete_pdu+0x16a>
   14b02:	88e3      	ldrh	r3, [r4, #6]
   14b04:	4283      	cmp	r3, r0
   14b06:	d050      	beq.n	14baa <proxy_complete_pdu+0x16e>
   14b08:	8923      	ldrh	r3, [r4, #8]
   14b0a:	4283      	cmp	r3, r0
   14b0c:	d1ed      	bne.n	14aea <proxy_complete_pdu+0xae>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   14b0e:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   14b10:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   14b14:	809d      	strh	r5, [r3, #4]
			return;
   14b16:	e7e8      	b.n	14aea <proxy_complete_pdu+0xae>
	if (buf->len < 1) {
   14b18:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14b1c:	b99b      	cbnz	r3, 14b46 <proxy_complete_pdu+0x10a>
		BT_WARN("Too short Filter Set message");
   14b1e:	2302      	movs	r3, #2
   14b20:	f04f 0100 	mov.w	r1, #0
   14b24:	f363 0107 	bfi	r1, r3, #0, #8
   14b28:	4a31      	ldr	r2, [pc, #196]	; (14bf0 <proxy_complete_pdu+0x1b4>)
   14b2a:	4b32      	ldr	r3, [pc, #200]	; (14bf4 <proxy_complete_pdu+0x1b8>)
   14b2c:	4834      	ldr	r0, [pc, #208]	; (14c00 <proxy_complete_pdu+0x1c4>)
   14b2e:	1a9b      	subs	r3, r3, r2
   14b30:	08db      	lsrs	r3, r3, #3
   14b32:	f363 118f 	bfi	r1, r3, #6, #10
   14b36:	f009 fc84 	bl	1e442 <log_0>
		send_filter_status(client, &rx, &buf);
   14b3a:	aa01      	add	r2, sp, #4
   14b3c:	a904      	add	r1, sp, #16
   14b3e:	4620      	mov	r0, r4
   14b40:	f7ff fed0 	bl	148e4 <send_filter_status>
		break;
   14b44:	e78a      	b.n	14a5c <proxy_complete_pdu+0x20>
	type = net_buf_simple_pull_u8(buf);
   14b46:	a801      	add	r0, sp, #4
   14b48:	f00d fd9c 	bl	22684 <net_buf_simple_pull_u8>
	switch (type) {
   14b4c:	4601      	mov	r1, r0
   14b4e:	b180      	cbz	r0, 14b72 <proxy_complete_pdu+0x136>
   14b50:	2801      	cmp	r0, #1
   14b52:	d015      	beq.n	14b80 <proxy_complete_pdu+0x144>
		BT_WARN("Prohibited Filter Type 0x%02x", type);
   14b54:	2302      	movs	r3, #2
   14b56:	f04f 0200 	mov.w	r2, #0
   14b5a:	f363 0207 	bfi	r2, r3, #0, #8
   14b5e:	4824      	ldr	r0, [pc, #144]	; (14bf0 <proxy_complete_pdu+0x1b4>)
   14b60:	4b24      	ldr	r3, [pc, #144]	; (14bf4 <proxy_complete_pdu+0x1b8>)
   14b62:	1a1b      	subs	r3, r3, r0
   14b64:	08db      	lsrs	r3, r3, #3
   14b66:	f363 128f 	bfi	r2, r3, #6, #10
   14b6a:	4826      	ldr	r0, [pc, #152]	; (14c04 <proxy_complete_pdu+0x1c8>)
   14b6c:	f009 fc76 	bl	1e45c <log_1>
		return -EINVAL;
   14b70:	e7e3      	b.n	14b3a <proxy_complete_pdu+0xfe>
		(void)memset(client->filter, 0, sizeof(client->filter));
   14b72:	2206      	movs	r2, #6
   14b74:	1d20      	adds	r0, r4, #4
   14b76:	f00a fd71 	bl	1f65c <memset>
		client->filter_type = WHITELIST;
   14b7a:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
   14b7c:	72a3      	strb	r3, [r4, #10]
		break;
   14b7e:	e7dc      	b.n	14b3a <proxy_complete_pdu+0xfe>
		(void)memset(client->filter, 0, sizeof(client->filter));
   14b80:	2206      	movs	r2, #6
   14b82:	4631      	mov	r1, r6
   14b84:	1d20      	adds	r0, r4, #4
   14b86:	f00a fd69 	bl	1f65c <memset>
		client->filter_type = BLACKLIST;
   14b8a:	2302      	movs	r3, #2
   14b8c:	e7f6      	b.n	14b7c <proxy_complete_pdu+0x140>
			addr = net_buf_simple_pull_be16(&buf);
   14b8e:	a801      	add	r0, sp, #4
   14b90:	f00d fd88 	bl	226a4 <net_buf_simple_pull_be16>
			filter_add(client, addr);
   14b94:	4601      	mov	r1, r0
   14b96:	4620      	mov	r0, r4
   14b98:	f00c fedc 	bl	21954 <filter_add>
		while (buf.len >= 2) {
   14b9c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14ba0:	2b01      	cmp	r3, #1
   14ba2:	d8f4      	bhi.n	14b8e <proxy_complete_pdu+0x152>
   14ba4:	e7c9      	b.n	14b3a <proxy_complete_pdu+0xfe>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   14ba6:	2300      	movs	r3, #0
   14ba8:	e7b2      	b.n	14b10 <proxy_complete_pdu+0xd4>
   14baa:	2301      	movs	r3, #1
   14bac:	e7b0      	b.n	14b10 <proxy_complete_pdu+0xd4>
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
   14bae:	2302      	movs	r3, #2
   14bb0:	f04f 0200 	mov.w	r2, #0
   14bb4:	f363 0207 	bfi	r2, r3, #0, #8
   14bb8:	490d      	ldr	r1, [pc, #52]	; (14bf0 <proxy_complete_pdu+0x1b4>)
   14bba:	4b0e      	ldr	r3, [pc, #56]	; (14bf4 <proxy_complete_pdu+0x1b8>)
   14bbc:	1a5b      	subs	r3, r3, r1
   14bbe:	08db      	lsrs	r3, r3, #3
   14bc0:	4601      	mov	r1, r0
   14bc2:	f363 128f 	bfi	r2, r3, #6, #10
   14bc6:	4810      	ldr	r0, [pc, #64]	; (14c08 <proxy_complete_pdu+0x1cc>)
   14bc8:	e76d      	b.n	14aa6 <proxy_complete_pdu+0x6a>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
   14bca:	f100 0118 	add.w	r1, r0, #24
   14bce:	6800      	ldr	r0, [r0, #0]
   14bd0:	f7fe fe60 	bl	13894 <bt_mesh_pb_gatt_recv>
		break;
   14bd4:	e742      	b.n	14a5c <proxy_complete_pdu+0x20>
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   14bd6:	2302      	movs	r3, #2
   14bd8:	f04f 0200 	mov.w	r2, #0
   14bdc:	f363 0207 	bfi	r2, r3, #0, #8
   14be0:	4803      	ldr	r0, [pc, #12]	; (14bf0 <proxy_complete_pdu+0x1b4>)
   14be2:	4b04      	ldr	r3, [pc, #16]	; (14bf4 <proxy_complete_pdu+0x1b8>)
   14be4:	1a1b      	subs	r3, r3, r0
   14be6:	08db      	lsrs	r3, r3, #3
   14be8:	f363 128f 	bfi	r2, r3, #6, #10
   14bec:	4807      	ldr	r0, [pc, #28]	; (14c0c <proxy_complete_pdu+0x1d0>)
   14bee:	e75a      	b.n	14aa6 <proxy_complete_pdu+0x6a>
   14bf0:	000233ec 	.word	0x000233ec
   14bf4:	000234c4 	.word	0x000234c4
   14bf8:	00027be6 	.word	0x00027be6
   14bfc:	00027c14 	.word	0x00027c14
   14c00:	00027c36 	.word	0x00027c36
   14c04:	00027c53 	.word	0x00027c53
   14c08:	00027c71 	.word	0x00027c71
   14c0c:	00027c97 	.word	0x00027c97

00014c10 <proxy_recv>:
{
   14c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (clients[i].conn == conn) {
   14c12:	4d62      	ldr	r5, [pc, #392]	; (14d9c <proxy_recv+0x18c>)
{
   14c14:	4616      	mov	r6, r2
		if (clients[i].conn == conn) {
   14c16:	682a      	ldr	r2, [r5, #0]
   14c18:	4282      	cmp	r2, r0
   14c1a:	f040 80bc 	bne.w	14d96 <proxy_recv+0x186>
	if (len < 1) {
   14c1e:	b983      	cbnz	r3, 14c42 <proxy_recv+0x32>
		BT_WARN("Too small Proxy PDU");
   14c20:	2302      	movs	r3, #2
   14c22:	f04f 0100 	mov.w	r1, #0
   14c26:	f363 0107 	bfi	r1, r3, #0, #8
   14c2a:	4a5d      	ldr	r2, [pc, #372]	; (14da0 <proxy_recv+0x190>)
   14c2c:	4b5d      	ldr	r3, [pc, #372]	; (14da4 <proxy_recv+0x194>)
   14c2e:	485e      	ldr	r0, [pc, #376]	; (14da8 <proxy_recv+0x198>)
   14c30:	1a9b      	subs	r3, r3, r2
   14c32:	08db      	lsrs	r3, r3, #3
   14c34:	f363 118f 	bfi	r1, r3, #6, #10
			BT_WARN("Unexpected message type in last SAR PDU");
   14c38:	f009 fc03 	bl	1e442 <log_0>
			return -EINVAL;
   14c3c:	f06f 0415 	mvn.w	r4, #21
   14c40:	e067      	b.n	14d12 <proxy_recv+0x102>
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
   14c42:	7832      	ldrb	r2, [r6, #0]
   14c44:	68c9      	ldr	r1, [r1, #12]
   14c46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   14c4a:	3100      	adds	r1, #0
   14c4c:	f1a2 0003 	sub.w	r0, r2, #3
   14c50:	bf18      	it	ne
   14c52:	2101      	movne	r1, #1
   14c54:	4242      	negs	r2, r0
   14c56:	4142      	adcs	r2, r0
   14c58:	4291      	cmp	r1, r2
   14c5a:	d00c      	beq.n	14c76 <proxy_recv+0x66>
		BT_WARN("Proxy PDU type doesn't match GATT service");
   14c5c:	2302      	movs	r3, #2
   14c5e:	f04f 0100 	mov.w	r1, #0
   14c62:	f363 0107 	bfi	r1, r3, #0, #8
   14c66:	4a4e      	ldr	r2, [pc, #312]	; (14da0 <proxy_recv+0x190>)
   14c68:	4b4e      	ldr	r3, [pc, #312]	; (14da4 <proxy_recv+0x194>)
   14c6a:	4850      	ldr	r0, [pc, #320]	; (14dac <proxy_recv+0x19c>)
   14c6c:	1a9b      	subs	r3, r3, r2
   14c6e:	08db      	lsrs	r3, r3, #3
   14c70:	f363 118f 	bfi	r1, r3, #6, #10
   14c74:	e7e0      	b.n	14c38 <proxy_recv+0x28>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
   14c76:	f105 0018 	add.w	r0, r5, #24
   14c7a:	1e5f      	subs	r7, r3, #1
   14c7c:	461c      	mov	r4, r3
   14c7e:	f00d fd29 	bl	226d4 <net_buf_simple_tailroom>
   14c82:	4287      	cmp	r7, r0
   14c84:	d90c      	bls.n	14ca0 <proxy_recv+0x90>
		BT_WARN("Too big proxy PDU");
   14c86:	2302      	movs	r3, #2
   14c88:	f04f 0100 	mov.w	r1, #0
   14c8c:	f363 0107 	bfi	r1, r3, #0, #8
   14c90:	4a43      	ldr	r2, [pc, #268]	; (14da0 <proxy_recv+0x190>)
   14c92:	4b44      	ldr	r3, [pc, #272]	; (14da4 <proxy_recv+0x194>)
   14c94:	4846      	ldr	r0, [pc, #280]	; (14db0 <proxy_recv+0x1a0>)
   14c96:	1a9b      	subs	r3, r3, r2
   14c98:	08db      	lsrs	r3, r3, #3
   14c9a:	f363 118f 	bfi	r1, r3, #6, #10
   14c9e:	e7cb      	b.n	14c38 <proxy_recv+0x28>
	switch (PDU_SAR(data)) {
   14ca0:	7833      	ldrb	r3, [r6, #0]
   14ca2:	8baa      	ldrh	r2, [r5, #28]
   14ca4:	0999      	lsrs	r1, r3, #6
   14ca6:	2902      	cmp	r1, #2
   14ca8:	d035      	beq.n	14d16 <proxy_recv+0x106>
   14caa:	2903      	cmp	r1, #3
   14cac:	d053      	beq.n	14d56 <proxy_recv+0x146>
   14cae:	2901      	cmp	r1, #1
   14cb0:	d018      	beq.n	14ce4 <proxy_recv+0xd4>
		if (client->buf.len) {
   14cb2:	b162      	cbz	r2, 14cce <proxy_recv+0xbe>
			BT_WARN("Complete PDU while a pending incomplete one");
   14cb4:	2302      	movs	r3, #2
   14cb6:	f04f 0100 	mov.w	r1, #0
   14cba:	f363 0107 	bfi	r1, r3, #0, #8
   14cbe:	4a38      	ldr	r2, [pc, #224]	; (14da0 <proxy_recv+0x190>)
   14cc0:	4b38      	ldr	r3, [pc, #224]	; (14da4 <proxy_recv+0x194>)
   14cc2:	483c      	ldr	r0, [pc, #240]	; (14db4 <proxy_recv+0x1a4>)
   14cc4:	1a9b      	subs	r3, r3, r2
   14cc6:	08db      	lsrs	r3, r3, #3
   14cc8:	f363 118f 	bfi	r1, r3, #6, #10
   14ccc:	e7b4      	b.n	14c38 <proxy_recv+0x28>
		client->msg_type = PDU_TYPE(data);
   14cce:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   14cd0:	463a      	mov	r2, r7
   14cd2:	1c71      	adds	r1, r6, #1
   14cd4:	f105 0018 	add.w	r0, r5, #24
   14cd8:	f00d fc5d 	bl	22596 <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
   14cdc:	4628      	mov	r0, r5
   14cde:	f7ff fead 	bl	14a3c <proxy_complete_pdu>
		break;
   14ce2:	e016      	b.n	14d12 <proxy_recv+0x102>
		if (client->buf.len) {
   14ce4:	b162      	cbz	r2, 14d00 <proxy_recv+0xf0>
			BT_WARN("First PDU while a pending incomplete one");
   14ce6:	2302      	movs	r3, #2
   14ce8:	f04f 0100 	mov.w	r1, #0
   14cec:	f363 0107 	bfi	r1, r3, #0, #8
   14cf0:	4a2b      	ldr	r2, [pc, #172]	; (14da0 <proxy_recv+0x190>)
   14cf2:	4b2c      	ldr	r3, [pc, #176]	; (14da4 <proxy_recv+0x194>)
   14cf4:	4830      	ldr	r0, [pc, #192]	; (14db8 <proxy_recv+0x1a8>)
   14cf6:	1a9b      	subs	r3, r3, r2
   14cf8:	08db      	lsrs	r3, r3, #3
   14cfa:	f363 118f 	bfi	r1, r3, #6, #10
   14cfe:	e79b      	b.n	14c38 <proxy_recv+0x28>
		client->msg_type = PDU_TYPE(data);
   14d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14d04:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   14d06:	463a      	mov	r2, r7
   14d08:	1c71      	adds	r1, r6, #1
   14d0a:	f105 0018 	add.w	r0, r5, #24
   14d0e:	f00d fc42 	bl	22596 <net_buf_simple_add_mem>
}
   14d12:	4620      	mov	r0, r4
   14d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!client->buf.len) {
   14d16:	b962      	cbnz	r2, 14d32 <proxy_recv+0x122>
			BT_WARN("Continuation with no prior data");
   14d18:	2302      	movs	r3, #2
   14d1a:	f04f 0100 	mov.w	r1, #0
   14d1e:	f363 0107 	bfi	r1, r3, #0, #8
   14d22:	4a1f      	ldr	r2, [pc, #124]	; (14da0 <proxy_recv+0x190>)
   14d24:	4b1f      	ldr	r3, [pc, #124]	; (14da4 <proxy_recv+0x194>)
   14d26:	4825      	ldr	r0, [pc, #148]	; (14dbc <proxy_recv+0x1ac>)
   14d28:	1a9b      	subs	r3, r3, r2
   14d2a:	08db      	lsrs	r3, r3, #3
   14d2c:	f363 118f 	bfi	r1, r3, #6, #10
   14d30:	e782      	b.n	14c38 <proxy_recv+0x28>
		if (client->msg_type != PDU_TYPE(data)) {
   14d32:	7aea      	ldrb	r2, [r5, #11]
   14d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14d38:	429a      	cmp	r2, r3
   14d3a:	d0e4      	beq.n	14d06 <proxy_recv+0xf6>
			BT_WARN("Unexpected message type in continuation");
   14d3c:	2302      	movs	r3, #2
   14d3e:	f04f 0100 	mov.w	r1, #0
   14d42:	f363 0107 	bfi	r1, r3, #0, #8
   14d46:	4a16      	ldr	r2, [pc, #88]	; (14da0 <proxy_recv+0x190>)
   14d48:	4b16      	ldr	r3, [pc, #88]	; (14da4 <proxy_recv+0x194>)
   14d4a:	481d      	ldr	r0, [pc, #116]	; (14dc0 <proxy_recv+0x1b0>)
   14d4c:	1a9b      	subs	r3, r3, r2
   14d4e:	08db      	lsrs	r3, r3, #3
   14d50:	f363 118f 	bfi	r1, r3, #6, #10
   14d54:	e770      	b.n	14c38 <proxy_recv+0x28>
		if (!client->buf.len) {
   14d56:	b962      	cbnz	r2, 14d72 <proxy_recv+0x162>
			BT_WARN("Last SAR PDU with no prior data");
   14d58:	2302      	movs	r3, #2
   14d5a:	f04f 0100 	mov.w	r1, #0
   14d5e:	f363 0107 	bfi	r1, r3, #0, #8
   14d62:	4a0f      	ldr	r2, [pc, #60]	; (14da0 <proxy_recv+0x190>)
   14d64:	4b0f      	ldr	r3, [pc, #60]	; (14da4 <proxy_recv+0x194>)
   14d66:	4817      	ldr	r0, [pc, #92]	; (14dc4 <proxy_recv+0x1b4>)
   14d68:	1a9b      	subs	r3, r3, r2
   14d6a:	08db      	lsrs	r3, r3, #3
   14d6c:	f363 118f 	bfi	r1, r3, #6, #10
   14d70:	e762      	b.n	14c38 <proxy_recv+0x28>
		if (client->msg_type != PDU_TYPE(data)) {
   14d72:	7aea      	ldrb	r2, [r5, #11]
   14d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14d78:	429a      	cmp	r2, r3
   14d7a:	d0a9      	beq.n	14cd0 <proxy_recv+0xc0>
			BT_WARN("Unexpected message type in last SAR PDU");
   14d7c:	2302      	movs	r3, #2
   14d7e:	f04f 0100 	mov.w	r1, #0
   14d82:	f363 0107 	bfi	r1, r3, #0, #8
   14d86:	4a06      	ldr	r2, [pc, #24]	; (14da0 <proxy_recv+0x190>)
   14d88:	4b06      	ldr	r3, [pc, #24]	; (14da4 <proxy_recv+0x194>)
   14d8a:	480f      	ldr	r0, [pc, #60]	; (14dc8 <proxy_recv+0x1b8>)
   14d8c:	1a9b      	subs	r3, r3, r2
   14d8e:	08db      	lsrs	r3, r3, #3
   14d90:	f363 118f 	bfi	r1, r3, #6, #10
   14d94:	e750      	b.n	14c38 <proxy_recv+0x28>
		return -ENOTCONN;
   14d96:	f06f 0438 	mvn.w	r4, #56	; 0x38
   14d9a:	e7ba      	b.n	14d12 <proxy_recv+0x102>
   14d9c:	20007c40 	.word	0x20007c40
   14da0:	000233ec 	.word	0x000233ec
   14da4:	000234c4 	.word	0x000234c4
   14da8:	00027cd2 	.word	0x00027cd2
   14dac:	00027ce6 	.word	0x00027ce6
   14db0:	00027d10 	.word	0x00027d10
   14db4:	00027d22 	.word	0x00027d22
   14db8:	00027d4e 	.word	0x00027d4e
   14dbc:	00027d77 	.word	0x00027d77
   14dc0:	00027d97 	.word	0x00027d97
   14dc4:	00027dbf 	.word	0x00027dbf
   14dc8:	00027ddf 	.word	0x00027ddf

00014dcc <bt_mesh_proxy_beacon_send>:
{
   14dcc:	b538      	push	{r3, r4, r5, lr}
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   14dce:	4c0f      	ldr	r4, [pc, #60]	; (14e0c <bt_mesh_proxy_beacon_send+0x40>)
{
   14dd0:	4601      	mov	r1, r0
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   14dd2:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
	if (!sub) {
   14dd6:	b981      	cbnz	r1, 14dfa <bt_mesh_proxy_beacon_send+0x2e>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   14dd8:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   14ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14de0:	429a      	cmp	r2, r3
   14de2:	d002      	beq.n	14dea <bt_mesh_proxy_beacon_send+0x1e>
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   14de4:	4628      	mov	r0, r5
   14de6:	f7ff fff1 	bl	14dcc <bt_mesh_proxy_beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   14dea:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   14dee:	4908      	ldr	r1, [pc, #32]	; (14e10 <bt_mesh_proxy_beacon_send+0x44>)
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   14df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14df4:	429a      	cmp	r2, r3
   14df6:	d1ee      	bne.n	14dd6 <bt_mesh_proxy_beacon_send+0xa>
}
   14df8:	bd38      	pop	{r3, r4, r5, pc}
		if (clients[i].conn) {
   14dfa:	4b06      	ldr	r3, [pc, #24]	; (14e14 <bt_mesh_proxy_beacon_send+0x48>)
   14dfc:	6818      	ldr	r0, [r3, #0]
   14dfe:	2800      	cmp	r0, #0
   14e00:	d0fa      	beq.n	14df8 <bt_mesh_proxy_beacon_send+0x2c>
}
   14e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(clients[i].conn, sub);
   14e06:	f00c be04 	b.w	21a12 <beacon_send>
   14e0a:	bf00      	nop
   14e0c:	20007924 	.word	0x20007924
   14e10:	20007aac 	.word	0x20007aac
   14e14:	20007c40 	.word	0x20007c40

00014e18 <bt_mesh_proxy_identity_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   14e18:	2301      	movs	r3, #1
{
   14e1a:	b510      	push	{r4, lr}
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   14e1c:	f880 3020 	strb.w	r3, [r0, #32]
{
   14e20:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   14e22:	f00e f90b 	bl	2303c <z_impl_k_uptime_get_32>
	next_idx = sub - bt_mesh.sub;
   14e26:	4b07      	ldr	r3, [pc, #28]	; (14e44 <bt_mesh_proxy_identity_start+0x2c>)
	sub->node_id_start = k_uptime_get_32();
   14e28:	6260      	str	r0, [r4, #36]	; 0x24
	next_idx = sub - bt_mesh.sub;
   14e2a:	1ae4      	subs	r4, r4, r3
   14e2c:	10a4      	asrs	r4, r4, #2
   14e2e:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   14e32:	ebc4 2444 	rsb	r4, r4, r4, lsl #9
   14e36:	eb04 4484 	add.w	r4, r4, r4, lsl #18
   14e3a:	4b03      	ldr	r3, [pc, #12]	; (14e48 <bt_mesh_proxy_identity_start+0x30>)
   14e3c:	4264      	negs	r4, r4
   14e3e:	601c      	str	r4, [r3, #0]
}
   14e40:	bd10      	pop	{r4, pc}
   14e42:	bf00      	nop
   14e44:	200079c8 	.word	0x200079c8
   14e48:	20000af8 	.word	0x20000af8

00014e4c <bt_mesh_proxy_identity_enable>:
{
   14e4c:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
   14e4e:	f00b fc9b 	bl	20788 <bt_mesh_is_provisioned>
   14e52:	b328      	cbz	r0, 14ea0 <bt_mesh_proxy_identity_enable+0x54>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   14e54:	4c14      	ldr	r4, [pc, #80]	; (14ea8 <bt_mesh_proxy_identity_enable+0x5c>)
   14e56:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   14e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14e5e:	429a      	cmp	r2, r3
   14e60:	d019      	beq.n	14e96 <bt_mesh_proxy_identity_enable+0x4a>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_NOT_SUPPORTED) {
   14e62:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   14e66:	2b02      	cmp	r3, #2
   14e68:	d015      	beq.n	14e96 <bt_mesh_proxy_identity_enable+0x4a>
		bt_mesh_proxy_identity_start(sub);
   14e6a:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   14e6e:	f7ff ffd3 	bl	14e18 <bt_mesh_proxy_identity_start>
		count++;
   14e72:	2001      	movs	r0, #1
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   14e74:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   14e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14e7c:	429a      	cmp	r2, r3
   14e7e:	d00c      	beq.n	14e9a <bt_mesh_proxy_identity_enable+0x4e>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_NOT_SUPPORTED) {
   14e80:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   14e84:	2b02      	cmp	r3, #2
   14e86:	d008      	beq.n	14e9a <bt_mesh_proxy_identity_enable+0x4e>
		bt_mesh_proxy_identity_start(sub);
   14e88:	4808      	ldr	r0, [pc, #32]	; (14eac <bt_mesh_proxy_identity_enable+0x60>)
   14e8a:	f7ff ffc5 	bl	14e18 <bt_mesh_proxy_identity_start>
		bt_mesh_adv_update();
   14e8e:	f7f6 fbf3 	bl	b678 <bt_mesh_adv_update>
	return 0;
   14e92:	2000      	movs	r0, #0
   14e94:	e003      	b.n	14e9e <bt_mesh_proxy_identity_enable+0x52>
	int i, count = 0;
   14e96:	2000      	movs	r0, #0
   14e98:	e7ec      	b.n	14e74 <bt_mesh_proxy_identity_enable+0x28>
	if (count) {
   14e9a:	2800      	cmp	r0, #0
   14e9c:	d1f7      	bne.n	14e8e <bt_mesh_proxy_identity_enable+0x42>
}
   14e9e:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   14ea0:	f06f 000a 	mvn.w	r0, #10
   14ea4:	e7fb      	b.n	14e9e <bt_mesh_proxy_identity_enable+0x52>
   14ea6:	bf00      	nop
   14ea8:	20007924 	.word	0x20007924
   14eac:	20007aac 	.word	0x20007aac

00014eb0 <bt_mesh_proxy_get_buf>:
	buf->len  = 0;
   14eb0:	4803      	ldr	r0, [pc, #12]	; (14ec0 <bt_mesh_proxy_get_buf+0x10>)
   14eb2:	2300      	movs	r3, #0
   14eb4:	8383      	strh	r3, [r0, #28]
	buf->data = buf->__buf;
   14eb6:	6a03      	ldr	r3, [r0, #32]
   14eb8:	f840 3f18 	str.w	r3, [r0, #24]!
}
   14ebc:	4770      	bx	lr
   14ebe:	bf00      	nop
   14ec0:	20007c40 	.word	0x20007c40

00014ec4 <bt_mesh_proxy_prov_enable>:
{
   14ec4:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROV) {
   14ec6:	4d0c      	ldr	r5, [pc, #48]	; (14ef8 <bt_mesh_proxy_prov_enable+0x34>)
   14ec8:	782c      	ldrb	r4, [r5, #0]
   14eca:	2c01      	cmp	r4, #1
   14ecc:	d00e      	beq.n	14eec <bt_mesh_proxy_prov_enable+0x28>
	if (gatt_svc != MESH_GATT_NONE) {
   14ece:	b984      	cbnz	r4, 14ef2 <bt_mesh_proxy_prov_enable+0x2e>
	bt_gatt_service_register(&prov_svc);
   14ed0:	480a      	ldr	r0, [pc, #40]	; (14efc <bt_mesh_proxy_prov_enable+0x38>)
   14ed2:	f00b fbd2 	bl	2067a <bt_gatt_service_register>
	prov_fast_adv = true;
   14ed6:	4a0a      	ldr	r2, [pc, #40]	; (14f00 <bt_mesh_proxy_prov_enable+0x3c>)
	gatt_svc = MESH_GATT_PROV;
   14ed8:	2301      	movs	r3, #1
   14eda:	702b      	strb	r3, [r5, #0]
	prov_fast_adv = true;
   14edc:	7013      	strb	r3, [r2, #0]
		if (clients[i].conn) {
   14ede:	4b09      	ldr	r3, [pc, #36]	; (14f04 <bt_mesh_proxy_prov_enable+0x40>)
   14ee0:	6818      	ldr	r0, [r3, #0]
   14ee2:	b110      	cbz	r0, 14eea <bt_mesh_proxy_prov_enable+0x26>
			clients[i].filter_type = PROV;
   14ee4:	2203      	movs	r2, #3
   14ee6:	729a      	strb	r2, [r3, #10]
	return 0;
   14ee8:	4620      	mov	r0, r4
}
   14eea:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   14eec:	f06f 0044 	mvn.w	r0, #68	; 0x44
   14ef0:	e7fb      	b.n	14eea <bt_mesh_proxy_prov_enable+0x26>
		return -EBUSY;
   14ef2:	f06f 000f 	mvn.w	r0, #15
   14ef6:	e7f8      	b.n	14eea <bt_mesh_proxy_prov_enable+0x26>
   14ef8:	200022f4 	.word	0x200022f4
   14efc:	20007cf0 	.word	0x20007cf0
   14f00:	200022f5 	.word	0x200022f5
   14f04:	20007c40 	.word	0x20007c40

00014f08 <bt_mesh_proxy_prov_disable>:
{
   14f08:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   14f0a:	4d0d      	ldr	r5, [pc, #52]	; (14f40 <bt_mesh_proxy_prov_disable+0x38>)
   14f0c:	782b      	ldrb	r3, [r5, #0]
   14f0e:	b18b      	cbz	r3, 14f34 <bt_mesh_proxy_prov_disable+0x2c>
	if (gatt_svc != MESH_GATT_PROV) {
   14f10:	2b01      	cmp	r3, #1
   14f12:	d112      	bne.n	14f3a <bt_mesh_proxy_prov_disable+0x32>
	bt_gatt_service_unregister(&prov_svc);
   14f14:	480b      	ldr	r0, [pc, #44]	; (14f44 <bt_mesh_proxy_prov_disable+0x3c>)
	gatt_svc = MESH_GATT_NONE;
   14f16:	2400      	movs	r4, #0
	bt_gatt_service_unregister(&prov_svc);
   14f18:	f7f5 fe98 	bl	ac4c <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   14f1c:	702c      	strb	r4, [r5, #0]
		if (client->conn && client->filter_type == PROV) {
   14f1e:	4d0a      	ldr	r5, [pc, #40]	; (14f48 <bt_mesh_proxy_prov_disable+0x40>)
   14f20:	6828      	ldr	r0, [r5, #0]
   14f22:	b148      	cbz	r0, 14f38 <bt_mesh_proxy_prov_disable+0x30>
   14f24:	7aab      	ldrb	r3, [r5, #10]
   14f26:	2b03      	cmp	r3, #3
   14f28:	d102      	bne.n	14f30 <bt_mesh_proxy_prov_disable+0x28>
			bt_mesh_pb_gatt_close(client->conn);
   14f2a:	f7fe fd59 	bl	139e0 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
   14f2e:	72ac      	strb	r4, [r5, #10]
	return 0;
   14f30:	4620      	mov	r0, r4
   14f32:	e001      	b.n	14f38 <bt_mesh_proxy_prov_disable+0x30>
		return -EALREADY;
   14f34:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   14f38:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   14f3a:	f06f 000f 	mvn.w	r0, #15
   14f3e:	e7fb      	b.n	14f38 <bt_mesh_proxy_prov_disable+0x30>
   14f40:	200022f4 	.word	0x200022f4
   14f44:	20007cf0 	.word	0x20007cf0
   14f48:	20007c40 	.word	0x20007c40

00014f4c <bt_mesh_proxy_gatt_enable>:
{
   14f4c:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
   14f4e:	4d0b      	ldr	r5, [pc, #44]	; (14f7c <bt_mesh_proxy_gatt_enable+0x30>)
   14f50:	782c      	ldrb	r4, [r5, #0]
   14f52:	2c02      	cmp	r4, #2
   14f54:	d00c      	beq.n	14f70 <bt_mesh_proxy_gatt_enable+0x24>
	if (gatt_svc != MESH_GATT_NONE) {
   14f56:	b974      	cbnz	r4, 14f76 <bt_mesh_proxy_gatt_enable+0x2a>
	bt_gatt_service_register(&proxy_svc);
   14f58:	4809      	ldr	r0, [pc, #36]	; (14f80 <bt_mesh_proxy_gatt_enable+0x34>)
   14f5a:	f00b fb8e 	bl	2067a <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
   14f5e:	2302      	movs	r3, #2
   14f60:	702b      	strb	r3, [r5, #0]
		if (clients[i].conn) {
   14f62:	4b08      	ldr	r3, [pc, #32]	; (14f84 <bt_mesh_proxy_gatt_enable+0x38>)
   14f64:	6818      	ldr	r0, [r3, #0]
   14f66:	b110      	cbz	r0, 14f6e <bt_mesh_proxy_gatt_enable+0x22>
			clients[i].filter_type = WHITELIST;
   14f68:	2201      	movs	r2, #1
   14f6a:	729a      	strb	r2, [r3, #10]
	return 0;
   14f6c:	4620      	mov	r0, r4
}
   14f6e:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   14f70:	f06f 0044 	mvn.w	r0, #68	; 0x44
   14f74:	e7fb      	b.n	14f6e <bt_mesh_proxy_gatt_enable+0x22>
		return -EBUSY;
   14f76:	f06f 000f 	mvn.w	r0, #15
   14f7a:	e7f8      	b.n	14f6e <bt_mesh_proxy_gatt_enable+0x22>
   14f7c:	200022f4 	.word	0x200022f4
   14f80:	20007d74 	.word	0x20007d74
   14f84:	20007c40 	.word	0x20007c40

00014f88 <bt_mesh_proxy_gatt_disconnect>:
		if (client->conn && (client->filter_type == WHITELIST ||
   14f88:	4b06      	ldr	r3, [pc, #24]	; (14fa4 <bt_mesh_proxy_gatt_disconnect+0x1c>)
   14f8a:	6818      	ldr	r0, [r3, #0]
   14f8c:	b140      	cbz	r0, 14fa0 <bt_mesh_proxy_gatt_disconnect+0x18>
   14f8e:	7a9a      	ldrb	r2, [r3, #10]
   14f90:	3a01      	subs	r2, #1
   14f92:	2a01      	cmp	r2, #1
   14f94:	d804      	bhi.n	14fa0 <bt_mesh_proxy_gatt_disconnect+0x18>
			client->filter_type = NONE;
   14f96:	2200      	movs	r2, #0
   14f98:	729a      	strb	r2, [r3, #10]
			bt_conn_disconnect(client->conn,
   14f9a:	2113      	movs	r1, #19
   14f9c:	f00a bdd5 	b.w	1fb4a <bt_conn_disconnect>
}
   14fa0:	4770      	bx	lr
   14fa2:	bf00      	nop
   14fa4:	20007c40 	.word	0x20007c40

00014fa8 <bt_mesh_proxy_gatt_disable>:
{
   14fa8:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   14faa:	4c09      	ldr	r4, [pc, #36]	; (14fd0 <bt_mesh_proxy_gatt_disable+0x28>)
   14fac:	7823      	ldrb	r3, [r4, #0]
   14fae:	b14b      	cbz	r3, 14fc4 <bt_mesh_proxy_gatt_disable+0x1c>
	if (gatt_svc != MESH_GATT_PROXY) {
   14fb0:	2b02      	cmp	r3, #2
   14fb2:	d10a      	bne.n	14fca <bt_mesh_proxy_gatt_disable+0x22>
	bt_mesh_proxy_gatt_disconnect();
   14fb4:	f7ff ffe8 	bl	14f88 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
   14fb8:	4806      	ldr	r0, [pc, #24]	; (14fd4 <bt_mesh_proxy_gatt_disable+0x2c>)
   14fba:	f7f5 fe47 	bl	ac4c <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   14fbe:	2000      	movs	r0, #0
   14fc0:	7020      	strb	r0, [r4, #0]
}
   14fc2:	bd10      	pop	{r4, pc}
		return -EALREADY;
   14fc4:	f06f 0044 	mvn.w	r0, #68	; 0x44
   14fc8:	e7fb      	b.n	14fc2 <bt_mesh_proxy_gatt_disable+0x1a>
		return -EBUSY;
   14fca:	f06f 000f 	mvn.w	r0, #15
   14fce:	e7f8      	b.n	14fc2 <bt_mesh_proxy_gatt_disable+0x1a>
   14fd0:	200022f4 	.word	0x200022f4
   14fd4:	20007d74 	.word	0x20007d74

00014fd8 <bt_mesh_proxy_send>:
{
   14fd8:	b538      	push	{r3, r4, r5, lr}
		if (clients[i].conn == conn) {
   14fda:	4c1b      	ldr	r4, [pc, #108]	; (15048 <bt_mesh_proxy_send+0x70>)
   14fdc:	6825      	ldr	r5, [r4, #0]
   14fde:	4285      	cmp	r5, r0
   14fe0:	d010      	beq.n	15004 <bt_mesh_proxy_send+0x2c>
		BT_ERR("No Proxy Client found");
   14fe2:	2301      	movs	r3, #1
   14fe4:	f04f 0100 	mov.w	r1, #0
   14fe8:	f363 0107 	bfi	r1, r3, #0, #8
   14fec:	4a17      	ldr	r2, [pc, #92]	; (1504c <bt_mesh_proxy_send+0x74>)
   14fee:	4b18      	ldr	r3, [pc, #96]	; (15050 <bt_mesh_proxy_send+0x78>)
   14ff0:	4818      	ldr	r0, [pc, #96]	; (15054 <bt_mesh_proxy_send+0x7c>)
   14ff2:	1a9b      	subs	r3, r3, r2
   14ff4:	08db      	lsrs	r3, r3, #3
   14ff6:	f363 118f 	bfi	r1, r3, #6, #10
   14ffa:	f009 fa22 	bl	1e442 <log_0>
		return -ENOTCONN;
   14ffe:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   15002:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
   15004:	7aa4      	ldrb	r4, [r4, #10]
   15006:	1ee5      	subs	r5, r4, #3
   15008:	426c      	negs	r4, r5
   1500a:	f1a1 0c03 	sub.w	ip, r1, #3
   1500e:	416c      	adcs	r4, r5
   15010:	f1dc 0300 	rsbs	r3, ip, #0
   15014:	eb43 030c 	adc.w	r3, r3, ip
   15018:	429c      	cmp	r4, r3
   1501a:	d010      	beq.n	1503e <bt_mesh_proxy_send+0x66>
		BT_ERR("Invalid PDU type for Proxy Client");
   1501c:	2301      	movs	r3, #1
   1501e:	f04f 0100 	mov.w	r1, #0
   15022:	f363 0107 	bfi	r1, r3, #0, #8
   15026:	4a09      	ldr	r2, [pc, #36]	; (1504c <bt_mesh_proxy_send+0x74>)
   15028:	4b09      	ldr	r3, [pc, #36]	; (15050 <bt_mesh_proxy_send+0x78>)
   1502a:	480b      	ldr	r0, [pc, #44]	; (15058 <bt_mesh_proxy_send+0x80>)
   1502c:	1a9b      	subs	r3, r3, r2
   1502e:	08db      	lsrs	r3, r3, #3
   15030:	f363 118f 	bfi	r1, r3, #6, #10
   15034:	f009 fa05 	bl	1e442 <log_0>
		return -EINVAL;
   15038:	f06f 0015 	mvn.w	r0, #21
   1503c:	e7e1      	b.n	15002 <bt_mesh_proxy_send+0x2a>
}
   1503e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
   15042:	f00c bc9d 	b.w	21980 <proxy_segment_and_send>
   15046:	bf00      	nop
   15048:	20007c40 	.word	0x20007c40
   1504c:	000233ec 	.word	0x000233ec
   15050:	000234c4 	.word	0x000234c4
   15054:	00027b82 	.word	0x00027b82
   15058:	00027b98 	.word	0x00027b98

0001505c <bt_mesh_proxy_relay>:
{
   1505c:	b530      	push	{r4, r5, lr}
		if (!client->conn) {
   1505e:	4c1a      	ldr	r4, [pc, #104]	; (150c8 <bt_mesh_proxy_relay+0x6c>)
{
   15060:	b08d      	sub	sp, #52	; 0x34
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   15062:	ab04      	add	r3, sp, #16
   15064:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   15068:	9301      	str	r3, [sp, #4]
   1506a:	e9cd 2302 	strd	r2, r3, [sp, #8]
		if (!client->conn) {
   1506e:	6823      	ldr	r3, [r4, #0]
{
   15070:	4605      	mov	r5, r0
		if (!client->conn) {
   15072:	b33b      	cbz	r3, 150c4 <bt_mesh_proxy_relay+0x68>
	if (client->filter_type == WHITELIST) {
   15074:	7aa3      	ldrb	r3, [r4, #10]
   15076:	2b01      	cmp	r3, #1
   15078:	d119      	bne.n	150ae <bt_mesh_proxy_relay+0x52>
			if (client->filter[i] == addr) {
   1507a:	88a3      	ldrh	r3, [r4, #4]
   1507c:	428b      	cmp	r3, r1
   1507e:	d005      	beq.n	1508c <bt_mesh_proxy_relay+0x30>
   15080:	88e3      	ldrh	r3, [r4, #6]
   15082:	428b      	cmp	r3, r1
   15084:	d002      	beq.n	1508c <bt_mesh_proxy_relay+0x30>
   15086:	8923      	ldrh	r3, [r4, #8]
   15088:	428b      	cmp	r3, r1
   1508a:	d11b      	bne.n	150c4 <bt_mesh_proxy_relay+0x68>
		net_buf_simple_reserve(&msg, 1);
   1508c:	2101      	movs	r1, #1
   1508e:	a801      	add	r0, sp, #4
   15090:	f00d fa16 	bl	224c0 <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
   15094:	88aa      	ldrh	r2, [r5, #4]
   15096:	6829      	ldr	r1, [r5, #0]
   15098:	a801      	add	r0, sp, #4
   1509a:	f00d fa7c 	bl	22596 <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, &msg);
   1509e:	aa01      	add	r2, sp, #4
   150a0:	2100      	movs	r1, #0
   150a2:	6820      	ldr	r0, [r4, #0]
   150a4:	f7ff ff98 	bl	14fd8 <bt_mesh_proxy_send>
		relayed = true;
   150a8:	2001      	movs	r0, #1
}
   150aa:	b00d      	add	sp, #52	; 0x34
   150ac:	bd30      	pop	{r4, r5, pc}
	if (client->filter_type == BLACKLIST) {
   150ae:	2b02      	cmp	r3, #2
   150b0:	d108      	bne.n	150c4 <bt_mesh_proxy_relay+0x68>
			if (client->filter[i] == addr) {
   150b2:	88a3      	ldrh	r3, [r4, #4]
   150b4:	428b      	cmp	r3, r1
   150b6:	d005      	beq.n	150c4 <bt_mesh_proxy_relay+0x68>
   150b8:	88e3      	ldrh	r3, [r4, #6]
   150ba:	428b      	cmp	r3, r1
   150bc:	d002      	beq.n	150c4 <bt_mesh_proxy_relay+0x68>
   150be:	8923      	ldrh	r3, [r4, #8]
   150c0:	428b      	cmp	r3, r1
   150c2:	d1e3      	bne.n	1508c <bt_mesh_proxy_relay+0x30>
	bool relayed = false;
   150c4:	2000      	movs	r0, #0
   150c6:	e7f0      	b.n	150aa <bt_mesh_proxy_relay+0x4e>
   150c8:	20007c40 	.word	0x20007c40

000150cc <bt_mesh_proxy_adv_start>:
	return prov_sd_len;
}
#endif /* CONFIG_BT_MESH_PB_GATT */

s32_t bt_mesh_proxy_adv_start(void)
{
   150cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("");

	if (gatt_svc == MESH_GATT_NONE) {
   150d0:	4bb0      	ldr	r3, [pc, #704]	; (15394 <bt_mesh_proxy_adv_start+0x2c8>)
   150d2:	781b      	ldrb	r3, [r3, #0]
{
   150d4:	b087      	sub	sp, #28
	if (gatt_svc == MESH_GATT_NONE) {
   150d6:	b913      	cbnz	r3, 150de <bt_mesh_proxy_adv_start+0x12>
		return remaining;
   150d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   150dc:	e06f      	b.n	151be <bt_mesh_proxy_adv_start+0xf2>
		return K_FOREVER;
	}

#if defined(CONFIG_BT_MESH_PB_GATT)
	if (!bt_mesh_is_provisioned()) {
   150de:	f00b fb53 	bl	20788 <bt_mesh_is_provisioned>
   150e2:	4681      	mov	r9, r0
   150e4:	2800      	cmp	r0, #0
   150e6:	d170      	bne.n	151ca <bt_mesh_proxy_adv_start+0xfe>
		const struct bt_le_adv_param *param;
		struct bt_data prov_sd[2];
		size_t prov_sd_len;

		if (prov_fast_adv) {
   150e8:	4cab      	ldr	r4, [pc, #684]	; (15398 <bt_mesh_proxy_adv_start+0x2cc>)
			param = &fast_adv_param;
		} else {
			param = &slow_adv_param;
   150ea:	4bac      	ldr	r3, [pc, #688]	; (1539c <bt_mesh_proxy_adv_start+0x2d0>)
		if (prov_fast_adv) {
   150ec:	7822      	ldrb	r2, [r4, #0]
			param = &slow_adv_param;
   150ee:	4dac      	ldr	r5, [pc, #688]	; (153a0 <bt_mesh_proxy_adv_start+0x2d4>)
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   150f0:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 153e0 <bt_mesh_proxy_adv_start+0x314>
			param = &slow_adv_param;
   150f4:	2a00      	cmp	r2, #0
   150f6:	bf08      	it	eq
   150f8:	461d      	moveq	r5, r3
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   150fa:	f7ff fa3b 	bl	14574 <bt_mesh_prov_get>
   150fe:	4683      	mov	fp, r0
	const char *name = bt_get_name();
   15100:	f7f3 f830 	bl	8164 <bt_get_name>
   15104:	4680      	mov	r8, r0
	size_t name_len = strlen(name);
   15106:	f00a fa45 	bl	1f594 <strlen>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   1510a:	2210      	movs	r2, #16
	size_t name_len = strlen(name);
   1510c:	4607      	mov	r7, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   1510e:	f8db 1000 	ldr.w	r1, [fp]
   15112:	f10a 0002 	add.w	r0, sl, #2
   15116:	f00a fa77 	bl	1f608 <memcpy>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   1511a:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	dst[1] = val;
   1511e:	f88a 3013 	strb.w	r3, [sl, #19]
	dst[0] = val >> 8;
   15122:	0a1a      	lsrs	r2, r3, #8
   15124:	f88a 2012 	strb.w	r2, [sl, #18]
	if (prov->uri) {
   15128:	f8db 0004 	ldr.w	r0, [fp, #4]
   1512c:	f10d 0a08 	add.w	sl, sp, #8
   15130:	2800      	cmp	r0, #0
   15132:	d048      	beq.n	151c6 <bt_mesh_proxy_adv_start+0xfa>
		size_t uri_len = strlen(prov->uri);
   15134:	f00a fa2e 	bl	1f594 <strlen>
		if (uri_len > 29) {
   15138:	281d      	cmp	r0, #29
   1513a:	d922      	bls.n	15182 <bt_mesh_proxy_adv_start+0xb6>
			BT_WARN("Too long URI to fit advertising packet");
   1513c:	2302      	movs	r3, #2
   1513e:	f04f 0100 	mov.w	r1, #0
   15142:	4a98      	ldr	r2, [pc, #608]	; (153a4 <bt_mesh_proxy_adv_start+0x2d8>)
   15144:	4898      	ldr	r0, [pc, #608]	; (153a8 <bt_mesh_proxy_adv_start+0x2dc>)
   15146:	f363 0107 	bfi	r1, r3, #0, #8
   1514a:	4b98      	ldr	r3, [pc, #608]	; (153ac <bt_mesh_proxy_adv_start+0x2e0>)
   1514c:	1a9b      	subs	r3, r3, r2
   1514e:	08db      	lsrs	r3, r3, #3
   15150:	f363 118f 	bfi	r1, r3, #6, #10
   15154:	f009 f975 	bl	1e442 <log_0>
	size_t sd_space = 31;
   15158:	221f      	movs	r2, #31
	size_t prov_sd_len = 0;
   1515a:	4648      	mov	r0, r9
	if (sd_space > 2 && name_len > 0) {
   1515c:	b1ff      	cbz	r7, 1519e <bt_mesh_proxy_adv_start+0xd2>
		sd_space -= 2;
   1515e:	3a02      	subs	r2, #2
		if (sd_space < name_len) {
   15160:	4297      	cmp	r7, r2
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   15162:	eb0a 03c0 	add.w	r3, sl, r0, lsl #3
   15166:	bf8b      	itete	hi
   15168:	2108      	movhi	r1, #8
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   1516a:	2209      	movls	r2, #9
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   1516c:	f80a 1030 	strbhi.w	r1, [sl, r0, lsl #3]
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   15170:	f80a 2030 	strbls.w	r2, [sl, r0, lsl #3]
			prov_sd[prov_sd_len].data_len = sd_space;
   15174:	bf8c      	ite	hi
   15176:	705a      	strbhi	r2, [r3, #1]
			prov_sd[prov_sd_len].data_len = name_len;
   15178:	705f      	strbls	r7, [r3, #1]
		prov_sd[prov_sd_len].data = name;
   1517a:	f8c3 8004 	str.w	r8, [r3, #4]
		prov_sd_len++;
   1517e:	3001      	adds	r0, #1
   15180:	e00d      	b.n	1519e <bt_mesh_proxy_adv_start+0xd2>
			prov_sd[0].type = BT_DATA_URI;
   15182:	2324      	movs	r3, #36	; 0x24
			prov_sd[0].data_len = uri_len;
   15184:	f88d 0009 	strb.w	r0, [sp, #9]
			sd_space -= 2 + uri_len;
   15188:	f1c0 021d 	rsb	r2, r0, #29
			prov_sd[0].type = BT_DATA_URI;
   1518c:	f88d 3008 	strb.w	r3, [sp, #8]
			prov_sd[0].data = prov->uri;
   15190:	f8db 3004 	ldr.w	r3, [fp, #4]
   15194:	9303      	str	r3, [sp, #12]
	if (sd_space > 2 && name_len > 0) {
   15196:	2a02      	cmp	r2, #2
			prov_sd_len++;
   15198:	f04f 0001 	mov.w	r0, #1
	if (sd_space > 2 && name_len > 0) {
   1519c:	d8de      	bhi.n	1515c <bt_mesh_proxy_adv_start+0x90>
		}

		prov_sd_len = gatt_prov_adv_create(prov_sd);

		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
   1519e:	9000      	str	r0, [sp, #0]
   151a0:	4653      	mov	r3, sl
   151a2:	2203      	movs	r2, #3
   151a4:	4982      	ldr	r1, [pc, #520]	; (153b0 <bt_mesh_proxy_adv_start+0x2e4>)
   151a6:	4628      	mov	r0, r5
   151a8:	f00a fc5b 	bl	1fa62 <bt_le_adv_start>
   151ac:	b968      	cbnz	r0, 151ca <bt_mesh_proxy_adv_start+0xfe>
				    prov_sd, prov_sd_len) == 0) {
			proxy_adv_enabled = true;
   151ae:	4b81      	ldr	r3, [pc, #516]	; (153b4 <bt_mesh_proxy_adv_start+0x2e8>)
   151b0:	2201      	movs	r2, #1
   151b2:	701a      	strb	r2, [r3, #0]

			/* Advertise 60 seconds using fast interval */
			if (prov_fast_adv) {
   151b4:	7823      	ldrb	r3, [r4, #0]
   151b6:	b143      	cbz	r3, 151ca <bt_mesh_proxy_adv_start+0xfe>
				prov_fast_adv = false;
   151b8:	7020      	strb	r0, [r4, #0]
				return K_SECONDS(60);
   151ba:	f64e 2460 	movw	r4, #60000	; 0xea60
		return gatt_proxy_advertise(next_sub());
	}
#endif /* GATT_PROXY */

	return K_FOREVER;
}
   151be:	4620      	mov	r0, r4
   151c0:	b007      	add	sp, #28
   151c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t sd_space = 31;
   151c6:	221f      	movs	r2, #31
   151c8:	e7c8      	b.n	1515c <bt_mesh_proxy_adv_start+0x90>
	if (bt_mesh_is_provisioned()) {
   151ca:	f00b fadd 	bl	20788 <bt_mesh_is_provisioned>
   151ce:	2800      	cmp	r0, #0
   151d0:	d082      	beq.n	150d8 <bt_mesh_proxy_adv_start+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   151d2:	f7ff fad1 	bl	14778 <next_sub.part.5>
   151d6:	4f75      	ldr	r7, [pc, #468]	; (153ac <bt_mesh_proxy_adv_start+0x2e0>)
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   151d8:	4b72      	ldr	r3, [pc, #456]	; (153a4 <bt_mesh_proxy_adv_start+0x2d8>)
	if (conn_count == CONFIG_BT_MAX_CONN) {
   151da:	f8df a208 	ldr.w	sl, [pc, #520]	; 153e4 <bt_mesh_proxy_adv_start+0x318>
	proxy_svc_data[2] = ID_TYPE_NODE;
   151de:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 153d0 <bt_mesh_proxy_adv_start+0x304>
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   151e2:	1aff      	subs	r7, r7, r3
   151e4:	4605      	mov	r5, r0
   151e6:	f3c7 07c9 	ubfx	r7, r7, #3, #10
	if (conn_count == CONFIG_BT_MAX_CONN) {
   151ea:	f8da 3000 	ldr.w	r3, [sl]
   151ee:	2b01      	cmp	r3, #1
   151f0:	d10a      	bne.n	15208 <bt_mesh_proxy_adv_start+0x13c>
		BT_WARN("Connectable advertising deferred (max connections)");
   151f2:	f04f 0100 	mov.w	r1, #0
   151f6:	2302      	movs	r3, #2
   151f8:	f363 0107 	bfi	r1, r3, #0, #8
   151fc:	486e      	ldr	r0, [pc, #440]	; (153b8 <bt_mesh_proxy_adv_start+0x2ec>)
   151fe:	f367 118f 	bfi	r1, r7, #6, #10
   15202:	f009 f91e 	bl	1e442 <log_0>
   15206:	e767      	b.n	150d8 <bt_mesh_proxy_adv_start+0xc>
	if (!sub) {
   15208:	b945      	cbnz	r5, 1521c <bt_mesh_proxy_adv_start+0x150>
		BT_WARN("No subnets to advertise on");
   1520a:	f04f 0100 	mov.w	r1, #0
   1520e:	2302      	movs	r3, #2
   15210:	f363 0107 	bfi	r1, r3, #0, #8
   15214:	f367 118f 	bfi	r1, r7, #6, #10
   15218:	4868      	ldr	r0, [pc, #416]	; (153bc <bt_mesh_proxy_adv_start+0x2f0>)
   1521a:	e7f2      	b.n	15202 <bt_mesh_proxy_adv_start+0x136>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
   1521c:	f895 8020 	ldrb.w	r8, [r5, #32]
   15220:	f1b8 0f01 	cmp.w	r8, #1
   15224:	f040 80a2 	bne.w	1536c <bt_mesh_proxy_adv_start+0x2a0>
   15228:	f00d ff08 	bl	2303c <z_impl_k_uptime_get_32>
		u32_t active = k_uptime_get_32() - sub->node_id_start;
   1522c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
		if (active < NODE_ID_TIMEOUT) {
   1522e:	f64e 235f 	movw	r3, #59999	; 0xea5f
		u32_t active = k_uptime_get_32() - sub->node_id_start;
   15232:	1b02      	subs	r2, r0, r4
		if (active < NODE_ID_TIMEOUT) {
   15234:	429a      	cmp	r2, r3
   15236:	f200 8095 	bhi.w	15364 <bt_mesh_proxy_adv_start+0x298>
			remaining = NODE_ID_TIMEOUT - active;
   1523a:	f504 446a 	add.w	r4, r4, #59904	; 0xea00
   1523e:	3460      	adds	r4, #96	; 0x60
	err = bt_rand(proxy_svc_data + 11, 8);
   15240:	2108      	movs	r1, #8
			remaining = NODE_ID_TIMEOUT - active;
   15242:	1a24      	subs	r4, r4, r0
	err = bt_rand(proxy_svc_data + 11, 8);
   15244:	485e      	ldr	r0, [pc, #376]	; (153c0 <bt_mesh_proxy_adv_start+0x2f4>)
	proxy_svc_data[2] = ID_TYPE_NODE;
   15246:	f889 8002 	strb.w	r8, [r9, #2]
	err = bt_rand(proxy_svc_data + 11, 8);
   1524a:	f00c fdf3 	bl	21e34 <bt_rand>
	if (err) {
   1524e:	4601      	mov	r1, r0
   15250:	2800      	cmp	r0, #0
   15252:	d135      	bne.n	152c0 <bt_mesh_proxy_adv_start+0x1f4>
	(void)memset(tmp, 0, 6);
   15254:	2206      	movs	r2, #6
   15256:	a802      	add	r0, sp, #8
   15258:	f00a fa00 	bl	1f65c <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
   1525c:	2208      	movs	r2, #8
   1525e:	4958      	ldr	r1, [pc, #352]	; (153c0 <bt_mesh_proxy_adv_start+0x2f4>)
   15260:	f10d 000e 	add.w	r0, sp, #14
   15264:	f00a f9d0 	bl	1f608 <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
   15268:	f7f9 fa60 	bl	e72c <bt_mesh_primary_addr>
   1526c:	ba40      	rev16	r0, r0
   1526e:	f8ad 0016 	strh.w	r0, [sp, #22]
	err = bt_encrypt_be(sub->keys[sub->kr_flag].identity, tmp, tmp);
   15272:	7fab      	ldrb	r3, [r5, #30]
   15274:	2059      	movs	r0, #89	; 0x59
   15276:	fb03 0000 	mla	r0, r3, r0, r0
   1527a:	aa02      	add	r2, sp, #8
   1527c:	4611      	mov	r1, r2
   1527e:	4428      	add	r0, r5
   15280:	f00c fdf2 	bl	21e68 <bt_encrypt_be>
	if (err) {
   15284:	4683      	mov	fp, r0
   15286:	b9d8      	cbnz	r0, 152c0 <bt_mesh_proxy_adv_start+0x1f4>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   15288:	2208      	movs	r2, #8
   1528a:	a904      	add	r1, sp, #16
   1528c:	484d      	ldr	r0, [pc, #308]	; (153c4 <bt_mesh_proxy_adv_start+0x2f8>)
   1528e:	f00a f9bb 	bl	1f608 <memcpy>
	err = bt_le_adv_start(&fast_adv_param, node_id_ad,
   15292:	494d      	ldr	r1, [pc, #308]	; (153c8 <bt_mesh_proxy_adv_start+0x2fc>)
   15294:	f8cd b000 	str.w	fp, [sp]
   15298:	465b      	mov	r3, fp
   1529a:	2203      	movs	r2, #3
   1529c:	4840      	ldr	r0, [pc, #256]	; (153a0 <bt_mesh_proxy_adv_start+0x2d4>)
   1529e:	f00a fbe0 	bl	1fa62 <bt_le_adv_start>
	if (err) {
   152a2:	4601      	mov	r1, r0
   152a4:	2800      	cmp	r0, #0
   152a6:	d059      	beq.n	1535c <bt_mesh_proxy_adv_start+0x290>
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   152a8:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   152ac:	f043 0302 	orr.w	r3, r3, #2
   152b0:	f363 0607 	bfi	r6, r3, #0, #8
   152b4:	f367 168f 	bfi	r6, r7, #6, #10
   152b8:	4632      	mov	r2, r6
   152ba:	4844      	ldr	r0, [pc, #272]	; (153cc <bt_mesh_proxy_adv_start+0x300>)
   152bc:	f009 f8ce 	bl	1e45c <log_1>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
   152c0:	f895 b020 	ldrb.w	fp, [r5, #32]
   152c4:	f1bb 0f00 	cmp.w	fp, #0
   152c8:	d124      	bne.n	15314 <bt_mesh_proxy_adv_start+0x248>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   152ca:	f7fb fdef 	bl	10eac <bt_mesh_gatt_proxy_get>
   152ce:	2801      	cmp	r0, #1
   152d0:	4680      	mov	r8, r0
   152d2:	d152      	bne.n	1537a <bt_mesh_proxy_adv_start+0x2ae>
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   152d4:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
   152d6:	483e      	ldr	r0, [pc, #248]	; (153d0 <bt_mesh_proxy_adv_start+0x304>)
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   152d8:	2259      	movs	r2, #89	; 0x59
   152da:	fb02 5101 	mla	r1, r2, r1, r5
	proxy_svc_data[2] = ID_TYPE_NET;
   152de:	f880 b002 	strb.w	fp, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   152e2:	2208      	movs	r2, #8
   152e4:	3151      	adds	r1, #81	; 0x51
   152e6:	3003      	adds	r0, #3
   152e8:	f00a f98e 	bl	1f608 <memcpy>
	err = bt_le_adv_start(&slow_adv_param, net_id_ad,
   152ec:	4939      	ldr	r1, [pc, #228]	; (153d4 <bt_mesh_proxy_adv_start+0x308>)
   152ee:	f8cd b000 	str.w	fp, [sp]
   152f2:	465b      	mov	r3, fp
   152f4:	2203      	movs	r2, #3
   152f6:	4829      	ldr	r0, [pc, #164]	; (1539c <bt_mesh_proxy_adv_start+0x2d0>)
   152f8:	f00a fbb3 	bl	1fa62 <bt_le_adv_start>
	if (err) {
   152fc:	4601      	mov	r1, r0
   152fe:	b3c0      	cbz	r0, 15372 <bt_mesh_proxy_adv_start+0x2a6>
		BT_WARN("Failed to advertise using Network ID (err %d)", err);
   15300:	f04f 0200 	mov.w	r2, #0
   15304:	2302      	movs	r3, #2
   15306:	f363 0207 	bfi	r2, r3, #0, #8
   1530a:	f367 128f 	bfi	r2, r7, #6, #10
   1530e:	4832      	ldr	r0, [pc, #200]	; (153d8 <bt_mesh_proxy_adv_start+0x30c>)
   15310:	f009 f8a4 	bl	1e45c <log_1>
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   15314:	4d31      	ldr	r5, [pc, #196]	; (153dc <bt_mesh_proxy_adv_start+0x310>)
   15316:	f8b5 20c0 	ldrh.w	r2, [r5, #192]	; 0xc0
   1531a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1531e:	429a      	cmp	r2, r3
   15320:	d035      	beq.n	1538e <bt_mesh_proxy_adv_start+0x2c2>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   15322:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
   15326:	2b01      	cmp	r3, #1
   15328:	d003      	beq.n	15332 <bt_mesh_proxy_adv_start+0x266>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   1532a:	f7fb fdbf 	bl	10eac <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   1532e:	2801      	cmp	r0, #1
   15330:	d12d      	bne.n	1538e <bt_mesh_proxy_adv_start+0x2c2>
			count++;
   15332:	2601      	movs	r6, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   15334:	f8b5 21a4 	ldrh.w	r2, [r5, #420]	; 0x1a4
   15338:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1533c:	429a      	cmp	r2, r3
   1533e:	f43f af3e 	beq.w	151be <bt_mesh_proxy_adv_start+0xf2>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   15342:	f895 31a8 	ldrb.w	r3, [r5, #424]	; 0x1a8
   15346:	2b01      	cmp	r3, #1
   15348:	d11b      	bne.n	15382 <bt_mesh_proxy_adv_start+0x2b6>
	if (subnet_count > 1) {
   1534a:	2e00      	cmp	r6, #0
   1534c:	f43f af37 	beq.w	151be <bt_mesh_proxy_adv_start+0xf2>
		max_timeout = MAX(max_timeout, K_SECONDS(1));
   15350:	f242 7310 	movw	r3, #10000	; 0x2710
   15354:	429c      	cmp	r4, r3
   15356:	bf28      	it	cs
   15358:	461c      	movcs	r4, r3
   1535a:	e730      	b.n	151be <bt_mesh_proxy_adv_start+0xf2>
	proxy_adv_enabled = true;
   1535c:	4b15      	ldr	r3, [pc, #84]	; (153b4 <bt_mesh_proxy_adv_start+0x2e8>)
   1535e:	f883 8000 	strb.w	r8, [r3]
	return 0;
   15362:	e7ad      	b.n	152c0 <bt_mesh_proxy_adv_start+0x1f4>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   15364:	2300      	movs	r3, #0
   15366:	f885 3020 	strb.w	r3, [r5, #32]
	sub->node_id_start = 0U;
   1536a:	626b      	str	r3, [r5, #36]	; 0x24
	s32_t remaining = K_FOREVER;
   1536c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15370:	e7a6      	b.n	152c0 <bt_mesh_proxy_adv_start+0x1f4>
	proxy_adv_enabled = true;
   15372:	4b10      	ldr	r3, [pc, #64]	; (153b4 <bt_mesh_proxy_adv_start+0x2e8>)
   15374:	f883 8000 	strb.w	r8, [r3]
	return 0;
   15378:	e7cc      	b.n	15314 <bt_mesh_proxy_adv_start+0x248>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   1537a:	f7ff f9fd 	bl	14778 <next_sub.part.5>
   1537e:	4605      	mov	r5, r0
   15380:	e733      	b.n	151ea <bt_mesh_proxy_adv_start+0x11e>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   15382:	f7fb fd93 	bl	10eac <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   15386:	2801      	cmp	r0, #1
   15388:	f47f af19 	bne.w	151be <bt_mesh_proxy_adv_start+0xf2>
   1538c:	e7dd      	b.n	1534a <bt_mesh_proxy_adv_start+0x27e>
   1538e:	2600      	movs	r6, #0
   15390:	e7d0      	b.n	15334 <bt_mesh_proxy_adv_start+0x268>
   15392:	bf00      	nop
   15394:	200022f4 	.word	0x200022f4
   15398:	200022f5 	.word	0x200022f5
   1539c:	00023fd2 	.word	0x00023fd2
   153a0:	00023fcc 	.word	0x00023fcc
   153a4:	000233ec 	.word	0x000233ec
   153a8:	00027a90 	.word	0x00027a90
   153ac:	000234c4 	.word	0x000234c4
   153b0:	00023e78 	.word	0x00023e78
   153b4:	200022f6 	.word	0x200022f6
   153b8:	00027ab7 	.word	0x00027ab7
   153bc:	00027aea 	.word	0x00027aea
   153c0:	20007fad 	.word	0x20007fad
   153c4:	20007fa5 	.word	0x20007fa5
   153c8:	00023e60 	.word	0x00023e60
   153cc:	00027b05 	.word	0x00027b05
   153d0:	20007fa2 	.word	0x20007fa2
   153d4:	00023e48 	.word	0x00023e48
   153d8:	00027b30 	.word	0x00027b30
   153dc:	20007924 	.word	0x20007924
   153e0:	20007f8e 	.word	0x20007f8e
   153e4:	20000af4 	.word	0x20000af4

000153e8 <bt_mesh_proxy_adv_stop>:

void bt_mesh_proxy_adv_stop(void)
{
   153e8:	b510      	push	{r4, lr}
	int err;

	BT_DBG("adv_enabled %u", proxy_adv_enabled);

	if (!proxy_adv_enabled) {
   153ea:	4c0c      	ldr	r4, [pc, #48]	; (1541c <bt_mesh_proxy_adv_stop+0x34>)
   153ec:	7823      	ldrb	r3, [r4, #0]
   153ee:	b1a3      	cbz	r3, 1541a <bt_mesh_proxy_adv_stop+0x32>
		return;
	}

	err = bt_le_adv_stop();
   153f0:	f7f3 f88e 	bl	8510 <bt_le_adv_stop>
	if (err) {
   153f4:	4601      	mov	r1, r0
   153f6:	b178      	cbz	r0, 15418 <bt_mesh_proxy_adv_stop+0x30>
		BT_ERR("Failed to stop advertising (err %d)", err);
   153f8:	2301      	movs	r3, #1
   153fa:	f04f 0200 	mov.w	r2, #0
   153fe:	f363 0207 	bfi	r2, r3, #0, #8
   15402:	4807      	ldr	r0, [pc, #28]	; (15420 <bt_mesh_proxy_adv_stop+0x38>)
   15404:	4b07      	ldr	r3, [pc, #28]	; (15424 <bt_mesh_proxy_adv_stop+0x3c>)
   15406:	1a1b      	subs	r3, r3, r0
   15408:	08db      	lsrs	r3, r3, #3
   1540a:	f363 128f 	bfi	r2, r3, #6, #10
   1540e:	4806      	ldr	r0, [pc, #24]	; (15428 <bt_mesh_proxy_adv_stop+0x40>)
	} else {
		proxy_adv_enabled = false;
	}
}
   15410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to stop advertising (err %d)", err);
   15414:	f009 b822 	b.w	1e45c <log_1>
		proxy_adv_enabled = false;
   15418:	7020      	strb	r0, [r4, #0]
}
   1541a:	bd10      	pop	{r4, pc}
   1541c:	200022f6 	.word	0x200022f6
   15420:	000233ec 	.word	0x000233ec
   15424:	000234c4 	.word	0x000234c4
   15428:	00027b5e 	.word	0x00027b5e

0001542c <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
   1542c:	b508      	push	{r3, lr}

	/* Initialize the client receive buffers */
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		client->buf.size = CLIENT_BUF_SIZE;
   1542e:	4b05      	ldr	r3, [pc, #20]	; (15444 <bt_mesh_proxy_init+0x18>)
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
	}

	bt_conn_cb_register(&conn_callbacks);
   15430:	4805      	ldr	r0, [pc, #20]	; (15448 <bt_mesh_proxy_init+0x1c>)
		client->buf.size = CLIENT_BUF_SIZE;
   15432:	2244      	movs	r2, #68	; 0x44
   15434:	83da      	strh	r2, [r3, #30]
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   15436:	4a05      	ldr	r2, [pc, #20]	; (1544c <bt_mesh_proxy_init+0x20>)
   15438:	621a      	str	r2, [r3, #32]
	bt_conn_cb_register(&conn_callbacks);
   1543a:	f7f3 faad 	bl	8998 <bt_conn_cb_register>

	return 0;
}
   1543e:	2000      	movs	r0, #0
   15440:	bd08      	pop	{r3, pc}
   15442:	bf00      	nop
   15444:	20007c40 	.word	0x20007c40
   15448:	20007c64 	.word	0x20007c64
   1544c:	2000705e 	.word	0x2000705e

00015450 <hb_pub_status>:
};

static void hb_pub_status(struct bt_mesh_model *model,
			  struct bt_mesh_msg_ctx *ctx,
			  struct net_buf_simple *buf)
{
   15450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	if (cli->op_pending != OP_HEARTBEAT_PUB_STATUS) {
   15452:	4f20      	ldr	r7, [pc, #128]	; (154d4 <hb_pub_status+0x84>)
   15454:	683b      	ldr	r3, [r7, #0]
   15456:	69d9      	ldr	r1, [r3, #28]
   15458:	2906      	cmp	r1, #6
{
   1545a:	4615      	mov	r5, r2
	if (cli->op_pending != OP_HEARTBEAT_PUB_STATUS) {
   1545c:	d00f      	beq.n	1547e <hb_pub_status+0x2e>
		BT_WARN("Unexpected Heartbeat Publication Status message");
   1545e:	2302      	movs	r3, #2
   15460:	f04f 0100 	mov.w	r1, #0
   15464:	f363 0107 	bfi	r1, r3, #0, #8
   15468:	4a1b      	ldr	r2, [pc, #108]	; (154d8 <hb_pub_status+0x88>)
   1546a:	4b1c      	ldr	r3, [pc, #112]	; (154dc <hb_pub_status+0x8c>)
   1546c:	481c      	ldr	r0, [pc, #112]	; (154e0 <hb_pub_status+0x90>)
   1546e:	1a9b      	subs	r3, r3, r2
   15470:	08db      	lsrs	r3, r3, #3
   15472:	f363 118f 	bfi	r1, r3, #6, #10
		param->pub->feat = net_buf_simple_pull_u8(buf);
		param->pub->net_idx = net_buf_simple_pull_u8(buf);
	}

	k_sem_give(&cli->op_sync);
}
   15476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unexpected Heartbeat Publication Status message");
   1547a:	f008 bfe2 	b.w	1e442 <log_0>
	param = cli->op_param;
   1547e:	6a1c      	ldr	r4, [r3, #32]
	*param->status = net_buf_simple_pull_u8(buf);
   15480:	4610      	mov	r0, r2
   15482:	6826      	ldr	r6, [r4, #0]
   15484:	f00d f8fe 	bl	22684 <net_buf_simple_pull_u8>
   15488:	7030      	strb	r0, [r6, #0]
	if (param->pub) {
   1548a:	6866      	ldr	r6, [r4, #4]
   1548c:	b1e6      	cbz	r6, 154c8 <hb_pub_status+0x78>
		param->pub->dst = net_buf_simple_pull_le16(buf);
   1548e:	4628      	mov	r0, r5
   15490:	f00d f900 	bl	22694 <net_buf_simple_pull_le16>
   15494:	8030      	strh	r0, [r6, #0]
		param->pub->count = net_buf_simple_pull_u8(buf);
   15496:	4628      	mov	r0, r5
   15498:	6866      	ldr	r6, [r4, #4]
   1549a:	f00d f8f3 	bl	22684 <net_buf_simple_pull_u8>
   1549e:	70b0      	strb	r0, [r6, #2]
		param->pub->period = net_buf_simple_pull_u8(buf);
   154a0:	4628      	mov	r0, r5
   154a2:	6866      	ldr	r6, [r4, #4]
   154a4:	f00d f8ee 	bl	22684 <net_buf_simple_pull_u8>
   154a8:	70f0      	strb	r0, [r6, #3]
		param->pub->ttl = net_buf_simple_pull_u8(buf);
   154aa:	4628      	mov	r0, r5
   154ac:	6866      	ldr	r6, [r4, #4]
   154ae:	f00d f8e9 	bl	22684 <net_buf_simple_pull_u8>
   154b2:	7130      	strb	r0, [r6, #4]
		param->pub->feat = net_buf_simple_pull_u8(buf);
   154b4:	4628      	mov	r0, r5
   154b6:	f00d f8e5 	bl	22684 <net_buf_simple_pull_u8>
   154ba:	6863      	ldr	r3, [r4, #4]
   154bc:	80d8      	strh	r0, [r3, #6]
		param->pub->net_idx = net_buf_simple_pull_u8(buf);
   154be:	4628      	mov	r0, r5
   154c0:	f00d f8e0 	bl	22684 <net_buf_simple_pull_u8>
   154c4:	6863      	ldr	r3, [r4, #4]
   154c6:	8118      	strh	r0, [r3, #8]
	k_sem_give(&cli->op_sync);
   154c8:	6838      	ldr	r0, [r7, #0]
}
   154ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   154ce:	3004      	adds	r0, #4
   154d0:	f006 beca 	b.w	1c268 <z_impl_k_sem_give>
   154d4:	20000b1c 	.word	0x20000b1c
   154d8:	000233ec 	.word	0x000233ec
   154dc:	0002348c 	.word	0x0002348c
   154e0:	00027f36 	.word	0x00027f36

000154e4 <hb_sub_status>:
{
   154e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cli->op_pending != OP_HEARTBEAT_SUB_STATUS) {
   154e6:	4e21      	ldr	r6, [pc, #132]	; (1556c <hb_sub_status+0x88>)
   154e8:	6833      	ldr	r3, [r6, #0]
   154ea:	69d9      	ldr	r1, [r3, #28]
{
   154ec:	4614      	mov	r4, r2
	if (cli->op_pending != OP_HEARTBEAT_SUB_STATUS) {
   154ee:	f248 023c 	movw	r2, #32828	; 0x803c
   154f2:	4291      	cmp	r1, r2
   154f4:	d00f      	beq.n	15516 <hb_sub_status+0x32>
		BT_WARN("Unexpected Heartbeat Subscription Status message");
   154f6:	2302      	movs	r3, #2
   154f8:	f04f 0100 	mov.w	r1, #0
   154fc:	f363 0107 	bfi	r1, r3, #0, #8
   15500:	4a1b      	ldr	r2, [pc, #108]	; (15570 <hb_sub_status+0x8c>)
   15502:	4b1c      	ldr	r3, [pc, #112]	; (15574 <hb_sub_status+0x90>)
   15504:	481c      	ldr	r0, [pc, #112]	; (15578 <hb_sub_status+0x94>)
   15506:	1a9b      	subs	r3, r3, r2
   15508:	08db      	lsrs	r3, r3, #3
   1550a:	f363 118f 	bfi	r1, r3, #6, #10
}
   1550e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unexpected Heartbeat Subscription Status message");
   15512:	f008 bf96 	b.w	1e442 <log_0>
	param = cli->op_param;
   15516:	6a1d      	ldr	r5, [r3, #32]
	*param->status = net_buf_simple_pull_u8(buf);
   15518:	4620      	mov	r0, r4
   1551a:	682f      	ldr	r7, [r5, #0]
   1551c:	f00d f8b2 	bl	22684 <net_buf_simple_pull_u8>
   15520:	7038      	strb	r0, [r7, #0]
	param->sub->src = net_buf_simple_pull_le16(buf);
   15522:	4620      	mov	r0, r4
   15524:	686f      	ldr	r7, [r5, #4]
   15526:	f00d f8b5 	bl	22694 <net_buf_simple_pull_le16>
   1552a:	8038      	strh	r0, [r7, #0]
	param->sub->dst = net_buf_simple_pull_le16(buf);
   1552c:	4620      	mov	r0, r4
   1552e:	686f      	ldr	r7, [r5, #4]
   15530:	f00d f8b0 	bl	22694 <net_buf_simple_pull_le16>
   15534:	8078      	strh	r0, [r7, #2]
	param->sub->period = net_buf_simple_pull_u8(buf);
   15536:	4620      	mov	r0, r4
   15538:	686f      	ldr	r7, [r5, #4]
   1553a:	f00d f8a3 	bl	22684 <net_buf_simple_pull_u8>
   1553e:	7138      	strb	r0, [r7, #4]
	param->sub->count = net_buf_simple_pull_u8(buf);
   15540:	4620      	mov	r0, r4
   15542:	686f      	ldr	r7, [r5, #4]
   15544:	f00d f89e 	bl	22684 <net_buf_simple_pull_u8>
   15548:	7178      	strb	r0, [r7, #5]
	param->sub->min = net_buf_simple_pull_u8(buf);
   1554a:	4620      	mov	r0, r4
   1554c:	686f      	ldr	r7, [r5, #4]
   1554e:	f00d f899 	bl	22684 <net_buf_simple_pull_u8>
   15552:	71b8      	strb	r0, [r7, #6]
	param->sub->max = net_buf_simple_pull_u8(buf);
   15554:	4620      	mov	r0, r4
   15556:	686d      	ldr	r5, [r5, #4]
   15558:	f00d f894 	bl	22684 <net_buf_simple_pull_u8>
   1555c:	71e8      	strb	r0, [r5, #7]
	k_sem_give(&cli->op_sync);
   1555e:	6830      	ldr	r0, [r6, #0]
}
   15560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15564:	3004      	adds	r0, #4
   15566:	f006 be7f 	b.w	1c268 <z_impl_k_sem_give>
   1556a:	bf00      	nop
   1556c:	20000b1c 	.word	0x20000b1c
   15570:	000233ec 	.word	0x000233ec
   15574:	0002348c 	.word	0x0002348c
   15578:	00027f66 	.word	0x00027f66

0001557c <mod_pub_status>:
{
   1557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cli->op_pending != OP_MOD_PUB_STATUS) {
   1557e:	4e52      	ldr	r6, [pc, #328]	; (156c8 <mod_pub_status+0x14c>)
   15580:	6833      	ldr	r3, [r6, #0]
   15582:	69d9      	ldr	r1, [r3, #28]
{
   15584:	4614      	mov	r4, r2
	if (cli->op_pending != OP_MOD_PUB_STATUS) {
   15586:	f248 0219 	movw	r2, #32793	; 0x8019
   1558a:	4291      	cmp	r1, r2
   1558c:	d00f      	beq.n	155ae <mod_pub_status+0x32>
		BT_WARN("Unexpected Model Pub Status message");
   1558e:	2302      	movs	r3, #2
   15590:	f04f 0100 	mov.w	r1, #0
   15594:	f363 0107 	bfi	r1, r3, #0, #8
   15598:	4a4c      	ldr	r2, [pc, #304]	; (156cc <mod_pub_status+0x150>)
   1559a:	4b4d      	ldr	r3, [pc, #308]	; (156d0 <mod_pub_status+0x154>)
   1559c:	484d      	ldr	r0, [pc, #308]	; (156d4 <mod_pub_status+0x158>)
   1559e:	1a9b      	subs	r3, r3, r2
   155a0:	08db      	lsrs	r3, r3, #3
   155a2:	f363 118f 	bfi	r1, r3, #6, #10
}
   155a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			BT_WARN("Unexpected Mod Pub Status with SIG Model");
   155aa:	f008 bf4a 	b.w	1e442 <log_0>
	param = cli->op_param;
   155ae:	6a1d      	ldr	r5, [r3, #32]
	if (param->cid != CID_NVAL) {
   155b0:	88a3      	ldrh	r3, [r4, #4]
   155b2:	8868      	ldrh	r0, [r5, #2]
   155b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   155b8:	4290      	cmp	r0, r2
   155ba:	d029      	beq.n	15610 <mod_pub_status+0x94>
		if (buf->len < 14) {
   155bc:	2b0d      	cmp	r3, #13
   155be:	d80c      	bhi.n	155da <mod_pub_status+0x5e>
			BT_WARN("Unexpected Mod Pub Status with SIG Model");
   155c0:	2302      	movs	r3, #2
   155c2:	f04f 0100 	mov.w	r1, #0
   155c6:	f363 0107 	bfi	r1, r3, #0, #8
   155ca:	4a40      	ldr	r2, [pc, #256]	; (156cc <mod_pub_status+0x150>)
   155cc:	4b40      	ldr	r3, [pc, #256]	; (156d0 <mod_pub_status+0x154>)
   155ce:	4842      	ldr	r0, [pc, #264]	; (156d8 <mod_pub_status+0x15c>)
   155d0:	1a9b      	subs	r3, r3, r2
   155d2:	08db      	lsrs	r3, r3, #3
   155d4:	f363 118f 	bfi	r1, r3, #6, #10
   155d8:	e7e5      	b.n	155a6 <mod_pub_status+0x2a>
		cid = sys_get_le16(&buf->data[10]);
   155da:	6821      	ldr	r1, [r4, #0]
	return ((u16_t)src[1] << 8) | src[0];
   155dc:	7acb      	ldrb	r3, [r1, #11]
   155de:	7a8a      	ldrb	r2, [r1, #10]
   155e0:	7b4f      	ldrb	r7, [r1, #13]
   155e2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   155e6:	7b0b      	ldrb	r3, [r1, #12]
   155e8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
	if (mod_id != param->mod_id || cid != param->cid) {
   155ec:	8829      	ldrh	r1, [r5, #0]
   155ee:	4299      	cmp	r1, r3
   155f0:	d101      	bne.n	155f6 <mod_pub_status+0x7a>
   155f2:	4290      	cmp	r0, r2
   155f4:	d022      	beq.n	1563c <mod_pub_status+0xc0>
		BT_WARN("Mod Pub Model ID or Company ID mismatch");
   155f6:	2302      	movs	r3, #2
   155f8:	f04f 0100 	mov.w	r1, #0
   155fc:	f363 0107 	bfi	r1, r3, #0, #8
   15600:	4a32      	ldr	r2, [pc, #200]	; (156cc <mod_pub_status+0x150>)
   15602:	4b33      	ldr	r3, [pc, #204]	; (156d0 <mod_pub_status+0x154>)
   15604:	4835      	ldr	r0, [pc, #212]	; (156dc <mod_pub_status+0x160>)
   15606:	1a9b      	subs	r3, r3, r2
   15608:	08db      	lsrs	r3, r3, #3
   1560a:	f363 118f 	bfi	r1, r3, #6, #10
   1560e:	e7ca      	b.n	155a6 <mod_pub_status+0x2a>
		if (buf->len > 12) {
   15610:	2b0c      	cmp	r3, #12
   15612:	d90c      	bls.n	1562e <mod_pub_status+0xb2>
			BT_WARN("Unexpected Mod Pub Status with Vendor Model");
   15614:	2302      	movs	r3, #2
   15616:	f04f 0100 	mov.w	r1, #0
   1561a:	f363 0107 	bfi	r1, r3, #0, #8
   1561e:	4a2b      	ldr	r2, [pc, #172]	; (156cc <mod_pub_status+0x150>)
   15620:	4b2b      	ldr	r3, [pc, #172]	; (156d0 <mod_pub_status+0x154>)
   15622:	482f      	ldr	r0, [pc, #188]	; (156e0 <mod_pub_status+0x164>)
   15624:	1a9b      	subs	r3, r3, r2
   15626:	08db      	lsrs	r3, r3, #3
   15628:	f363 118f 	bfi	r1, r3, #6, #10
   1562c:	e7bb      	b.n	155a6 <mod_pub_status+0x2a>
		mod_id = sys_get_le16(&buf->data[10]);
   1562e:	6822      	ldr	r2, [r4, #0]
   15630:	7ad1      	ldrb	r1, [r2, #11]
   15632:	7a93      	ldrb	r3, [r2, #10]
		cid = CID_NVAL;
   15634:	4602      	mov	r2, r0
   15636:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1563a:	e7d7      	b.n	155ec <mod_pub_status+0x70>
	status = net_buf_simple_pull_u8(buf);
   1563c:	4620      	mov	r0, r4
   1563e:	f00d f821 	bl	22684 <net_buf_simple_pull_u8>
   15642:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   15644:	4620      	mov	r0, r4
   15646:	f00d f825 	bl	22694 <net_buf_simple_pull_le16>
	if (elem_addr != param->elem_addr) {
   1564a:	88ab      	ldrh	r3, [r5, #4]
   1564c:	4283      	cmp	r3, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1564e:	4601      	mov	r1, r0
	if (elem_addr != param->elem_addr) {
   15650:	d00f      	beq.n	15672 <mod_pub_status+0xf6>
		BT_WARN("Model Pub Status for unexpected element (0x%04x)",
   15652:	2302      	movs	r3, #2
   15654:	f04f 0200 	mov.w	r2, #0
   15658:	f363 0207 	bfi	r2, r3, #0, #8
   1565c:	481b      	ldr	r0, [pc, #108]	; (156cc <mod_pub_status+0x150>)
   1565e:	4b1c      	ldr	r3, [pc, #112]	; (156d0 <mod_pub_status+0x154>)
   15660:	1a1b      	subs	r3, r3, r0
   15662:	08db      	lsrs	r3, r3, #3
   15664:	f363 128f 	bfi	r2, r3, #6, #10
   15668:	481e      	ldr	r0, [pc, #120]	; (156e4 <mod_pub_status+0x168>)
}
   1566a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Model Pub Status for unexpected element (0x%04x)",
   1566e:	f008 bef5 	b.w	1e45c <log_1>
	if (param->status) {
   15672:	68ab      	ldr	r3, [r5, #8]
   15674:	b103      	cbz	r3, 15678 <mod_pub_status+0xfc>
		*param->status = status;
   15676:	701f      	strb	r7, [r3, #0]
	if (param->pub) {
   15678:	68ef      	ldr	r7, [r5, #12]
   1567a:	b1f7      	cbz	r7, 156ba <mod_pub_status+0x13e>
		param->pub->addr = net_buf_simple_pull_le16(buf);
   1567c:	4620      	mov	r0, r4
   1567e:	f00d f809 	bl	22694 <net_buf_simple_pull_le16>
   15682:	8038      	strh	r0, [r7, #0]
		param->pub->app_idx = net_buf_simple_pull_le16(buf);
   15684:	4620      	mov	r0, r4
   15686:	68ef      	ldr	r7, [r5, #12]
   15688:	f00d f804 	bl	22694 <net_buf_simple_pull_le16>
   1568c:	8078      	strh	r0, [r7, #2]
		param->pub->cred_flag = (param->pub->app_idx & BIT(12));
   1568e:	68ef      	ldr	r7, [r5, #12]
   15690:	887b      	ldrh	r3, [r7, #2]
   15692:	f3c3 3200 	ubfx	r2, r3, #12, #1
		param->pub->app_idx &= BIT_MASK(12);
   15696:	f3c3 030b 	ubfx	r3, r3, #0, #12
		param->pub->cred_flag = (param->pub->app_idx & BIT(12));
   1569a:	713a      	strb	r2, [r7, #4]
		param->pub->app_idx &= BIT_MASK(12);
   1569c:	807b      	strh	r3, [r7, #2]
		param->pub->ttl = net_buf_simple_pull_u8(buf);
   1569e:	4620      	mov	r0, r4
   156a0:	f00c fff0 	bl	22684 <net_buf_simple_pull_u8>
   156a4:	7178      	strb	r0, [r7, #5]
		param->pub->period = net_buf_simple_pull_u8(buf);
   156a6:	4620      	mov	r0, r4
   156a8:	68ef      	ldr	r7, [r5, #12]
   156aa:	f00c ffeb 	bl	22684 <net_buf_simple_pull_u8>
   156ae:	71b8      	strb	r0, [r7, #6]
		param->pub->transmit = net_buf_simple_pull_u8(buf);
   156b0:	4620      	mov	r0, r4
   156b2:	68ed      	ldr	r5, [r5, #12]
   156b4:	f00c ffe6 	bl	22684 <net_buf_simple_pull_u8>
   156b8:	71e8      	strb	r0, [r5, #7]
	k_sem_give(&cli->op_sync);
   156ba:	6830      	ldr	r0, [r6, #0]
}
   156bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   156c0:	3004      	adds	r0, #4
   156c2:	f006 bdd1 	b.w	1c268 <z_impl_k_sem_give>
   156c6:	bf00      	nop
   156c8:	20000b1c 	.word	0x20000b1c
   156cc:	000233ec 	.word	0x000233ec
   156d0:	0002348c 	.word	0x0002348c
   156d4:	00027fe5 	.word	0x00027fe5
   156d8:	00028009 	.word	0x00028009
   156dc:	0002805e 	.word	0x0002805e
   156e0:	00028032 	.word	0x00028032
   156e4:	00028086 	.word	0x00028086

000156e8 <app_key_status>:
{
   156e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (cli->op_pending != OP_APP_KEY_STATUS) {
   156ea:	4c21      	ldr	r4, [pc, #132]	; (15770 <app_key_status+0x88>)
   156ec:	6823      	ldr	r3, [r4, #0]
{
   156ee:	4615      	mov	r5, r2
	if (cli->op_pending != OP_APP_KEY_STATUS) {
   156f0:	69da      	ldr	r2, [r3, #28]
   156f2:	f248 0303 	movw	r3, #32771	; 0x8003
   156f6:	429a      	cmp	r2, r3
   156f8:	d00f      	beq.n	1571a <app_key_status+0x32>
		BT_WARN("Unexpected App Key Status message");
   156fa:	2302      	movs	r3, #2
   156fc:	f04f 0100 	mov.w	r1, #0
   15700:	f363 0107 	bfi	r1, r3, #0, #8
   15704:	4a1b      	ldr	r2, [pc, #108]	; (15774 <app_key_status+0x8c>)
   15706:	4b1c      	ldr	r3, [pc, #112]	; (15778 <app_key_status+0x90>)
   15708:	481c      	ldr	r0, [pc, #112]	; (1577c <app_key_status+0x94>)
   1570a:	1a9b      	subs	r3, r3, r2
   1570c:	08db      	lsrs	r3, r3, #3
   1570e:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("App Key Status key indices did not match");
   15712:	f008 fe96 	bl	1e442 <log_0>
}
   15716:	b002      	add	sp, #8
   15718:	bd70      	pop	{r4, r5, r6, pc}
	status = net_buf_simple_pull_u8(buf);
   1571a:	4628      	mov	r0, r5
   1571c:	f00c ffb2 	bl	22684 <net_buf_simple_pull_u8>
	key_idx_unpack(buf, &net_idx, &app_idx);
   15720:	f10d 0206 	add.w	r2, sp, #6
   15724:	a901      	add	r1, sp, #4
	status = net_buf_simple_pull_u8(buf);
   15726:	4606      	mov	r6, r0
	key_idx_unpack(buf, &net_idx, &app_idx);
   15728:	4628      	mov	r0, r5
   1572a:	f00c f9b1 	bl	21a90 <key_idx_unpack>
	param = cli->op_param;
   1572e:	6820      	ldr	r0, [r4, #0]
	if (param->net_idx != net_idx || param->app_idx != app_idx) {
   15730:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	param = cli->op_param;
   15734:	6a03      	ldr	r3, [r0, #32]
	if (param->net_idx != net_idx || param->app_idx != app_idx) {
   15736:	8899      	ldrh	r1, [r3, #4]
   15738:	4291      	cmp	r1, r2
   1573a:	d104      	bne.n	15746 <app_key_status+0x5e>
   1573c:	88d9      	ldrh	r1, [r3, #6]
   1573e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15742:	4291      	cmp	r1, r2
   15744:	d00c      	beq.n	15760 <app_key_status+0x78>
		BT_WARN("App Key Status key indices did not match");
   15746:	2302      	movs	r3, #2
   15748:	f04f 0100 	mov.w	r1, #0
   1574c:	f363 0107 	bfi	r1, r3, #0, #8
   15750:	4a08      	ldr	r2, [pc, #32]	; (15774 <app_key_status+0x8c>)
   15752:	4b09      	ldr	r3, [pc, #36]	; (15778 <app_key_status+0x90>)
   15754:	480a      	ldr	r0, [pc, #40]	; (15780 <app_key_status+0x98>)
   15756:	1a9b      	subs	r3, r3, r2
   15758:	08db      	lsrs	r3, r3, #3
   1575a:	f363 118f 	bfi	r1, r3, #6, #10
   1575e:	e7d8      	b.n	15712 <app_key_status+0x2a>
	if (param->status) {
   15760:	681b      	ldr	r3, [r3, #0]
   15762:	b103      	cbz	r3, 15766 <app_key_status+0x7e>
		*param->status = status;
   15764:	701e      	strb	r6, [r3, #0]
   15766:	3004      	adds	r0, #4
   15768:	f006 fd7e 	bl	1c268 <z_impl_k_sem_give>
   1576c:	e7d3      	b.n	15716 <app_key_status+0x2e>
   1576e:	bf00      	nop
   15770:	20000b1c 	.word	0x20000b1c
   15774:	000233ec 	.word	0x000233ec
   15778:	0002348c 	.word	0x0002348c
   1577c:	00027e6a 	.word	0x00027e6a
   15780:	00027e8c 	.word	0x00027e8c

00015784 <net_key_status>:
{
   15784:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (cli->op_pending != OP_NET_KEY_STATUS) {
   15786:	4c1e      	ldr	r4, [pc, #120]	; (15800 <net_key_status+0x7c>)
   15788:	6823      	ldr	r3, [r4, #0]
{
   1578a:	4615      	mov	r5, r2
	if (cli->op_pending != OP_NET_KEY_STATUS) {
   1578c:	69da      	ldr	r2, [r3, #28]
   1578e:	f248 0344 	movw	r3, #32836	; 0x8044
   15792:	429a      	cmp	r2, r3
   15794:	d00f      	beq.n	157b6 <net_key_status+0x32>
		BT_WARN("Unexpected Net Key Status message");
   15796:	2302      	movs	r3, #2
   15798:	f04f 0100 	mov.w	r1, #0
   1579c:	f363 0107 	bfi	r1, r3, #0, #8
   157a0:	4a18      	ldr	r2, [pc, #96]	; (15804 <net_key_status+0x80>)
   157a2:	4b19      	ldr	r3, [pc, #100]	; (15808 <net_key_status+0x84>)
   157a4:	4819      	ldr	r0, [pc, #100]	; (1580c <net_key_status+0x88>)
   157a6:	1a9b      	subs	r3, r3, r2
   157a8:	08db      	lsrs	r3, r3, #3
   157aa:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("Net Key Status key index does not match");
   157ae:	f008 fe48 	bl	1e442 <log_0>
}
   157b2:	b002      	add	sp, #8
   157b4:	bd70      	pop	{r4, r5, r6, pc}
	status = net_buf_simple_pull_u8(buf);
   157b6:	4628      	mov	r0, r5
   157b8:	f00c ff64 	bl	22684 <net_buf_simple_pull_u8>
	key_idx_unpack(buf, &net_idx, &app_idx);
   157bc:	f10d 0206 	add.w	r2, sp, #6
   157c0:	a901      	add	r1, sp, #4
	status = net_buf_simple_pull_u8(buf);
   157c2:	4606      	mov	r6, r0
	key_idx_unpack(buf, &net_idx, &app_idx);
   157c4:	4628      	mov	r0, r5
   157c6:	f00c f963 	bl	21a90 <key_idx_unpack>
	param = cli->op_param;
   157ca:	6820      	ldr	r0, [r4, #0]
	if (param->net_idx != net_idx) {
   157cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	param = cli->op_param;
   157d0:	6a03      	ldr	r3, [r0, #32]
	if (param->net_idx != net_idx) {
   157d2:	8899      	ldrh	r1, [r3, #4]
   157d4:	4291      	cmp	r1, r2
   157d6:	d00c      	beq.n	157f2 <net_key_status+0x6e>
		BT_WARN("Net Key Status key index does not match");
   157d8:	2302      	movs	r3, #2
   157da:	f04f 0100 	mov.w	r1, #0
   157de:	f363 0107 	bfi	r1, r3, #0, #8
   157e2:	4a08      	ldr	r2, [pc, #32]	; (15804 <net_key_status+0x80>)
   157e4:	4b08      	ldr	r3, [pc, #32]	; (15808 <net_key_status+0x84>)
   157e6:	480a      	ldr	r0, [pc, #40]	; (15810 <net_key_status+0x8c>)
   157e8:	1a9b      	subs	r3, r3, r2
   157ea:	08db      	lsrs	r3, r3, #3
   157ec:	f363 118f 	bfi	r1, r3, #6, #10
   157f0:	e7dd      	b.n	157ae <net_key_status+0x2a>
	if (param->status) {
   157f2:	681b      	ldr	r3, [r3, #0]
   157f4:	b103      	cbz	r3, 157f8 <net_key_status+0x74>
		*param->status = status;
   157f6:	701e      	strb	r6, [r3, #0]
   157f8:	3004      	adds	r0, #4
   157fa:	f006 fd35 	bl	1c268 <z_impl_k_sem_give>
   157fe:	e7d8      	b.n	157b2 <net_key_status+0x2e>
   15800:	20000b1c 	.word	0x20000b1c
   15804:	000233ec 	.word	0x000233ec
   15808:	0002348c 	.word	0x0002348c
   1580c:	00028117 	.word	0x00028117
   15810:	00028139 	.word	0x00028139

00015814 <mod_sub_status>:
{
   15814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (cli->op_pending != OP_MOD_SUB_STATUS) {
   15818:	4d2c      	ldr	r5, [pc, #176]	; (158cc <mod_sub_status+0xb8>)
{
   1581a:	4614      	mov	r4, r2
	if (cli->op_pending != OP_MOD_SUB_STATUS) {
   1581c:	682a      	ldr	r2, [r5, #0]
   1581e:	69d1      	ldr	r1, [r2, #28]
   15820:	f248 021f 	movw	r2, #32799	; 0x801f
   15824:	4291      	cmp	r1, r2
   15826:	d00f      	beq.n	15848 <mod_sub_status+0x34>
		BT_WARN("Unexpected Model Subscription Status message");
   15828:	2302      	movs	r3, #2
   1582a:	f04f 0100 	mov.w	r1, #0
   1582e:	f363 0107 	bfi	r1, r3, #0, #8
   15832:	4a27      	ldr	r2, [pc, #156]	; (158d0 <mod_sub_status+0xbc>)
   15834:	4b27      	ldr	r3, [pc, #156]	; (158d4 <mod_sub_status+0xc0>)
   15836:	4828      	ldr	r0, [pc, #160]	; (158d8 <mod_sub_status+0xc4>)
   15838:	1a9b      	subs	r3, r3, r2
   1583a:	08db      	lsrs	r3, r3, #3
   1583c:	f363 118f 	bfi	r1, r3, #6, #10
}
   15840:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Model Subscription Status parameters did not match");
   15844:	f008 bdfd 	b.w	1e442 <log_0>
	status = net_buf_simple_pull_u8(buf);
   15848:	4620      	mov	r0, r4
   1584a:	f00c ff1b 	bl	22684 <net_buf_simple_pull_u8>
   1584e:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   15850:	4620      	mov	r0, r4
   15852:	f00c ff1f 	bl	22694 <net_buf_simple_pull_le16>
   15856:	4681      	mov	r9, r0
	sub_addr = net_buf_simple_pull_le16(buf);
   15858:	4620      	mov	r0, r4
   1585a:	f00c ff1b 	bl	22694 <net_buf_simple_pull_le16>
	if (buf->len >= 4) {
   1585e:	88a3      	ldrh	r3, [r4, #4]
   15860:	2b03      	cmp	r3, #3
	sub_addr = net_buf_simple_pull_le16(buf);
   15862:	4606      	mov	r6, r0
	if (buf->len >= 4) {
   15864:	d923      	bls.n	158ae <mod_sub_status+0x9a>
		cid = net_buf_simple_pull_le16(buf);
   15866:	4620      	mov	r0, r4
   15868:	f00c ff14 	bl	22694 <net_buf_simple_pull_le16>
   1586c:	4680      	mov	r8, r0
	mod_id = net_buf_simple_pull_le16(buf);
   1586e:	4620      	mov	r0, r4
   15870:	f00c ff10 	bl	22694 <net_buf_simple_pull_le16>
	param = cli->op_param;
   15874:	682a      	ldr	r2, [r5, #0]
   15876:	6a13      	ldr	r3, [r2, #32]
	if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   15878:	8899      	ldrh	r1, [r3, #4]
   1587a:	4549      	cmp	r1, r9
   1587c:	d10a      	bne.n	15894 <mod_sub_status+0x80>
   1587e:	8a19      	ldrh	r1, [r3, #16]
   15880:	4281      	cmp	r1, r0
   15882:	d107      	bne.n	15894 <mod_sub_status+0x80>
	    (param->expect_sub && *param->expect_sub != sub_addr) ||
   15884:	68d9      	ldr	r1, [r3, #12]
	if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   15886:	b111      	cbz	r1, 1588e <mod_sub_status+0x7a>
	    (param->expect_sub && *param->expect_sub != sub_addr) ||
   15888:	8809      	ldrh	r1, [r1, #0]
   1588a:	42b1      	cmp	r1, r6
   1588c:	d102      	bne.n	15894 <mod_sub_status+0x80>
   1588e:	8a59      	ldrh	r1, [r3, #18]
   15890:	4541      	cmp	r1, r8
   15892:	d00f      	beq.n	158b4 <mod_sub_status+0xa0>
		BT_WARN("Model Subscription Status parameters did not match");
   15894:	2302      	movs	r3, #2
   15896:	f04f 0100 	mov.w	r1, #0
   1589a:	f363 0107 	bfi	r1, r3, #0, #8
   1589e:	4a0c      	ldr	r2, [pc, #48]	; (158d0 <mod_sub_status+0xbc>)
   158a0:	4b0c      	ldr	r3, [pc, #48]	; (158d4 <mod_sub_status+0xc0>)
   158a2:	480e      	ldr	r0, [pc, #56]	; (158dc <mod_sub_status+0xc8>)
   158a4:	1a9b      	subs	r3, r3, r2
   158a6:	08db      	lsrs	r3, r3, #3
   158a8:	f363 118f 	bfi	r1, r3, #6, #10
   158ac:	e7c8      	b.n	15840 <mod_sub_status+0x2c>
		cid = CID_NVAL;
   158ae:	f64f 78ff 	movw	r8, #65535	; 0xffff
   158b2:	e7dc      	b.n	1586e <mod_sub_status+0x5a>
	if (param->sub_addr) {
   158b4:	6899      	ldr	r1, [r3, #8]
   158b6:	b101      	cbz	r1, 158ba <mod_sub_status+0xa6>
		*param->sub_addr = sub_addr;
   158b8:	800e      	strh	r6, [r1, #0]
	if (param->status) {
   158ba:	681b      	ldr	r3, [r3, #0]
   158bc:	b103      	cbz	r3, 158c0 <mod_sub_status+0xac>
		*param->status = status;
   158be:	701f      	strb	r7, [r3, #0]
   158c0:	1d10      	adds	r0, r2, #4
}
   158c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   158c6:	f006 bccf 	b.w	1c268 <z_impl_k_sem_give>
   158ca:	bf00      	nop
   158cc:	20000b1c 	.word	0x20000b1c
   158d0:	000233ec 	.word	0x000233ec
   158d4:	0002348c 	.word	0x0002348c
   158d8:	000280b7 	.word	0x000280b7
   158dc:	000280e4 	.word	0x000280e4

000158e0 <mod_app_status>:
{
   158e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (cli->op_pending != OP_MOD_APP_STATUS) {
   158e4:	4d29      	ldr	r5, [pc, #164]	; (1598c <mod_app_status+0xac>)
{
   158e6:	4614      	mov	r4, r2
	if (cli->op_pending != OP_MOD_APP_STATUS) {
   158e8:	682a      	ldr	r2, [r5, #0]
   158ea:	69d1      	ldr	r1, [r2, #28]
   158ec:	f248 023e 	movw	r2, #32830	; 0x803e
   158f0:	4291      	cmp	r1, r2
   158f2:	d00f      	beq.n	15914 <mod_app_status+0x34>
		BT_WARN("Unexpected Model App Status message");
   158f4:	2302      	movs	r3, #2
   158f6:	f04f 0100 	mov.w	r1, #0
   158fa:	f363 0107 	bfi	r1, r3, #0, #8
   158fe:	4a24      	ldr	r2, [pc, #144]	; (15990 <mod_app_status+0xb0>)
   15900:	4b24      	ldr	r3, [pc, #144]	; (15994 <mod_app_status+0xb4>)
   15902:	4825      	ldr	r0, [pc, #148]	; (15998 <mod_app_status+0xb8>)
   15904:	1a9b      	subs	r3, r3, r2
   15906:	08db      	lsrs	r3, r3, #3
   15908:	f363 118f 	bfi	r1, r3, #6, #10
}
   1590c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Model App Status parameters did not match");
   15910:	f008 bd97 	b.w	1e442 <log_0>
	status = net_buf_simple_pull_u8(buf);
   15914:	4620      	mov	r0, r4
   15916:	f00c feb5 	bl	22684 <net_buf_simple_pull_u8>
   1591a:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1591c:	4620      	mov	r0, r4
   1591e:	f00c feb9 	bl	22694 <net_buf_simple_pull_le16>
   15922:	4681      	mov	r9, r0
	mod_app_idx = net_buf_simple_pull_le16(buf);
   15924:	4620      	mov	r0, r4
   15926:	f00c feb5 	bl	22694 <net_buf_simple_pull_le16>
	if (buf->len >= 4) {
   1592a:	88a3      	ldrh	r3, [r4, #4]
   1592c:	2b03      	cmp	r3, #3
	mod_app_idx = net_buf_simple_pull_le16(buf);
   1592e:	4680      	mov	r8, r0
	if (buf->len >= 4) {
   15930:	d921      	bls.n	15976 <mod_app_status+0x96>
		cid = net_buf_simple_pull_le16(buf);
   15932:	4620      	mov	r0, r4
   15934:	f00c feae 	bl	22694 <net_buf_simple_pull_le16>
   15938:	4606      	mov	r6, r0
	mod_id = net_buf_simple_pull_le16(buf);
   1593a:	4620      	mov	r0, r4
   1593c:	f00c feaa 	bl	22694 <net_buf_simple_pull_le16>
	param = cli->op_param;
   15940:	682a      	ldr	r2, [r5, #0]
   15942:	6a13      	ldr	r3, [r2, #32]
	if (param->elem_addr != elem_addr ||
   15944:	8899      	ldrh	r1, [r3, #4]
   15946:	4549      	cmp	r1, r9
   15948:	d108      	bne.n	1595c <mod_app_status+0x7c>
   1594a:	88d9      	ldrh	r1, [r3, #6]
   1594c:	4541      	cmp	r1, r8
   1594e:	d105      	bne.n	1595c <mod_app_status+0x7c>
	    param->mod_app_idx != mod_app_idx || param->mod_id != mod_id ||
   15950:	8919      	ldrh	r1, [r3, #8]
   15952:	4281      	cmp	r1, r0
   15954:	d102      	bne.n	1595c <mod_app_status+0x7c>
   15956:	8959      	ldrh	r1, [r3, #10]
   15958:	42b1      	cmp	r1, r6
   1595a:	d00f      	beq.n	1597c <mod_app_status+0x9c>
		BT_WARN("Model App Status parameters did not match");
   1595c:	2302      	movs	r3, #2
   1595e:	f04f 0100 	mov.w	r1, #0
   15962:	f363 0107 	bfi	r1, r3, #0, #8
   15966:	4a0a      	ldr	r2, [pc, #40]	; (15990 <mod_app_status+0xb0>)
   15968:	4b0a      	ldr	r3, [pc, #40]	; (15994 <mod_app_status+0xb4>)
   1596a:	480c      	ldr	r0, [pc, #48]	; (1599c <mod_app_status+0xbc>)
   1596c:	1a9b      	subs	r3, r3, r2
   1596e:	08db      	lsrs	r3, r3, #3
   15970:	f363 118f 	bfi	r1, r3, #6, #10
   15974:	e7ca      	b.n	1590c <mod_app_status+0x2c>
		cid = CID_NVAL;
   15976:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1597a:	e7de      	b.n	1593a <mod_app_status+0x5a>
	if (param->status) {
   1597c:	681b      	ldr	r3, [r3, #0]
   1597e:	b103      	cbz	r3, 15982 <mod_app_status+0xa2>
		*param->status = status;
   15980:	701f      	strb	r7, [r3, #0]
   15982:	1d10      	adds	r0, r2, #4
}
   15984:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15988:	f006 bc6e 	b.w	1c268 <z_impl_k_sem_give>
   1598c:	20000b1c 	.word	0x20000b1c
   15990:	000233ec 	.word	0x000233ec
   15994:	0002348c 	.word	0x0002348c
   15998:	00027f97 	.word	0x00027f97
   1599c:	00027fbb 	.word	0x00027fbb

000159a0 <relay_status>:
{
   159a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cli->op_pending != OP_RELAY_STATUS) {
   159a2:	4c14      	ldr	r4, [pc, #80]	; (159f4 <relay_status+0x54>)
   159a4:	6823      	ldr	r3, [r4, #0]
   159a6:	69d9      	ldr	r1, [r3, #28]
{
   159a8:	4615      	mov	r5, r2
	if (cli->op_pending != OP_RELAY_STATUS) {
   159aa:	f248 0228 	movw	r2, #32808	; 0x8028
   159ae:	4291      	cmp	r1, r2
   159b0:	d00f      	beq.n	159d2 <relay_status+0x32>
		BT_WARN("Unexpected Relay Status message");
   159b2:	2302      	movs	r3, #2
   159b4:	f04f 0100 	mov.w	r1, #0
   159b8:	f363 0107 	bfi	r1, r3, #0, #8
   159bc:	4a0e      	ldr	r2, [pc, #56]	; (159f8 <relay_status+0x58>)
   159be:	4b0f      	ldr	r3, [pc, #60]	; (159fc <relay_status+0x5c>)
   159c0:	480f      	ldr	r0, [pc, #60]	; (15a00 <relay_status+0x60>)
   159c2:	1a9b      	subs	r3, r3, r2
   159c4:	08db      	lsrs	r3, r3, #3
   159c6:	f363 118f 	bfi	r1, r3, #6, #10
}
   159ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unexpected Relay Status message");
   159ce:	f008 bd38 	b.w	1e442 <log_0>
	param = cli->op_param;
   159d2:	6a1e      	ldr	r6, [r3, #32]
	*param->status = net_buf_simple_pull_u8(buf);
   159d4:	4628      	mov	r0, r5
   159d6:	6837      	ldr	r7, [r6, #0]
   159d8:	f00c fe54 	bl	22684 <net_buf_simple_pull_u8>
   159dc:	7038      	strb	r0, [r7, #0]
	*param->transmit = net_buf_simple_pull_u8(buf);
   159de:	4628      	mov	r0, r5
   159e0:	6876      	ldr	r6, [r6, #4]
   159e2:	f00c fe4f 	bl	22684 <net_buf_simple_pull_u8>
   159e6:	7030      	strb	r0, [r6, #0]
	k_sem_give(&cli->op_sync);
   159e8:	6820      	ldr	r0, [r4, #0]
}
   159ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   159ee:	3004      	adds	r0, #4
   159f0:	f006 bc3a 	b.w	1c268 <z_impl_k_sem_give>
   159f4:	20000b1c 	.word	0x20000b1c
   159f8:	000233ec 	.word	0x000233ec
   159fc:	0002348c 	.word	0x0002348c
   15a00:	00028161 	.word	0x00028161

00015a04 <state_status_u8.isra.4>:
static void state_status_u8(struct bt_mesh_model *model,
   15a04:	b570      	push	{r4, r5, r6, lr}
	if (cli->op_pending != expect_status) {
   15a06:	4c10      	ldr	r4, [pc, #64]	; (15a48 <state_status_u8.isra.4+0x44>)
   15a08:	6823      	ldr	r3, [r4, #0]
static void state_status_u8(struct bt_mesh_model *model,
   15a0a:	460a      	mov	r2, r1
	if (cli->op_pending != expect_status) {
   15a0c:	69d9      	ldr	r1, [r3, #28]
   15a0e:	4291      	cmp	r1, r2
   15a10:	d00f      	beq.n	15a32 <state_status_u8.isra.4+0x2e>
		BT_WARN("Unexpected Status (0x%08x != 0x%08x)",
   15a12:	2002      	movs	r0, #2
   15a14:	f04f 0300 	mov.w	r3, #0
   15a18:	f360 0307 	bfi	r3, r0, #0, #8
   15a1c:	4c0b      	ldr	r4, [pc, #44]	; (15a4c <state_status_u8.isra.4+0x48>)
   15a1e:	480c      	ldr	r0, [pc, #48]	; (15a50 <state_status_u8.isra.4+0x4c>)
   15a20:	1b00      	subs	r0, r0, r4
   15a22:	08c0      	lsrs	r0, r0, #3
   15a24:	f360 138f 	bfi	r3, r0, #6, #10
}
   15a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Unexpected Status (0x%08x != 0x%08x)",
   15a2c:	4809      	ldr	r0, [pc, #36]	; (15a54 <state_status_u8.isra.4+0x50>)
   15a2e:	f008 bd29 	b.w	1e484 <log_2>
	status = cli->op_param;
   15a32:	6a1d      	ldr	r5, [r3, #32]
	*status = net_buf_simple_pull_u8(buf);
   15a34:	f00c fe26 	bl	22684 <net_buf_simple_pull_u8>
   15a38:	7028      	strb	r0, [r5, #0]
	k_sem_give(&cli->op_sync);
   15a3a:	6820      	ldr	r0, [r4, #0]
}
   15a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15a40:	3004      	adds	r0, #4
   15a42:	f006 bc11 	b.w	1c268 <z_impl_k_sem_give>
   15a46:	bf00      	nop
   15a48:	20000b1c 	.word	0x20000b1c
   15a4c:	000233ec 	.word	0x000233ec
   15a50:	0002348c 	.word	0x0002348c
   15a54:	00028181 	.word	0x00028181

00015a58 <comp_data_status>:
{
   15a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cli->op_pending != OP_DEV_COMP_DATA_STATUS) {
   15a5a:	4c18      	ldr	r4, [pc, #96]	; (15abc <comp_data_status+0x64>)
{
   15a5c:	4616      	mov	r6, r2
	if (cli->op_pending != OP_DEV_COMP_DATA_STATUS) {
   15a5e:	6822      	ldr	r2, [r4, #0]
   15a60:	69d1      	ldr	r1, [r2, #28]
   15a62:	2902      	cmp	r1, #2
   15a64:	d00f      	beq.n	15a86 <comp_data_status+0x2e>
		BT_WARN("Unexpected Composition Data Status");
   15a66:	2302      	movs	r3, #2
   15a68:	f04f 0100 	mov.w	r1, #0
   15a6c:	f363 0107 	bfi	r1, r3, #0, #8
   15a70:	4a13      	ldr	r2, [pc, #76]	; (15ac0 <comp_data_status+0x68>)
   15a72:	4b14      	ldr	r3, [pc, #80]	; (15ac4 <comp_data_status+0x6c>)
   15a74:	4814      	ldr	r0, [pc, #80]	; (15ac8 <comp_data_status+0x70>)
   15a76:	1a9b      	subs	r3, r3, r2
   15a78:	08db      	lsrs	r3, r3, #3
   15a7a:	f363 118f 	bfi	r1, r3, #6, #10
}
   15a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unexpected Composition Data Status");
   15a82:	f008 bcde 	b.w	1e442 <log_0>
	param = cli->op_param;
   15a86:	6a15      	ldr	r5, [r2, #32]
	*(param->status) = net_buf_simple_pull_u8(buf);
   15a88:	4630      	mov	r0, r6
   15a8a:	682f      	ldr	r7, [r5, #0]
   15a8c:	f00c fdfa 	bl	22684 <net_buf_simple_pull_u8>
   15a90:	7038      	strb	r0, [r7, #0]
	to_copy  = MIN(net_buf_simple_tailroom(param->comp), buf->len);
   15a92:	6868      	ldr	r0, [r5, #4]
   15a94:	f00c fe1e 	bl	226d4 <net_buf_simple_tailroom>
   15a98:	88b2      	ldrh	r2, [r6, #4]
   15a9a:	4290      	cmp	r0, r2
   15a9c:	d203      	bcs.n	15aa6 <comp_data_status+0x4e>
   15a9e:	6868      	ldr	r0, [r5, #4]
   15aa0:	f00c fe18 	bl	226d4 <net_buf_simple_tailroom>
   15aa4:	4602      	mov	r2, r0
	net_buf_simple_add_mem(param->comp, buf->data, to_copy);
   15aa6:	6831      	ldr	r1, [r6, #0]
   15aa8:	6868      	ldr	r0, [r5, #4]
   15aaa:	f00c fd74 	bl	22596 <net_buf_simple_add_mem>
	k_sem_give(&cli->op_sync);
   15aae:	6820      	ldr	r0, [r4, #0]
}
   15ab0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15ab4:	3004      	adds	r0, #4
   15ab6:	f006 bbd7 	b.w	1c268 <z_impl_k_sem_give>
   15aba:	bf00      	nop
   15abc:	20000b1c 	.word	0x20000b1c
   15ac0:	000233ec 	.word	0x000233ec
   15ac4:	0002348c 	.word	0x0002348c
   15ac8:	00027f13 	.word	0x00027f13

00015acc <bt_mesh_cfg_cli_init>:
{
	msg_timeout = timeout;
}

int bt_mesh_cfg_cli_init(struct bt_mesh_model *model, bool primary)
{
   15acc:	b508      	push	{r3, lr}
   15ace:	4602      	mov	r2, r0
	BT_DBG("primary %u", primary);

	if (!primary) {
   15ad0:	b971      	cbnz	r1, 15af0 <bt_mesh_cfg_cli_init+0x24>
		BT_ERR("Configuration Client only allowed in primary element");
   15ad2:	2301      	movs	r3, #1
   15ad4:	f363 0107 	bfi	r1, r3, #0, #8
   15ad8:	4a13      	ldr	r2, [pc, #76]	; (15b28 <bt_mesh_cfg_cli_init+0x5c>)
   15ada:	4b14      	ldr	r3, [pc, #80]	; (15b2c <bt_mesh_cfg_cli_init+0x60>)
   15adc:	4814      	ldr	r0, [pc, #80]	; (15b30 <bt_mesh_cfg_cli_init+0x64>)
   15ade:	1a9b      	subs	r3, r3, r2
   15ae0:	08db      	lsrs	r3, r3, #3
   15ae2:	f363 118f 	bfi	r1, r3, #6, #10
		return -EINVAL;
	}

	if (!model->user_data) {
		BT_ERR("No Configuration Client context provided");
   15ae6:	f008 fcac 	bl	1e442 <log_0>
		return -EINVAL;
   15aea:	f06f 0015 	mvn.w	r0, #21
	model->keys[0] = BT_MESH_KEY_DEV;

	k_sem_init(&cli->op_sync, 0, 1);

	return 0;
}
   15aee:	bd08      	pop	{r3, pc}
	if (!model->user_data) {
   15af0:	6980      	ldr	r0, [r0, #24]
   15af2:	b960      	cbnz	r0, 15b0e <bt_mesh_cfg_cli_init+0x42>
		BT_ERR("No Configuration Client context provided");
   15af4:	2301      	movs	r3, #1
   15af6:	f04f 0100 	mov.w	r1, #0
   15afa:	f363 0107 	bfi	r1, r3, #0, #8
   15afe:	4a0a      	ldr	r2, [pc, #40]	; (15b28 <bt_mesh_cfg_cli_init+0x5c>)
   15b00:	4b0a      	ldr	r3, [pc, #40]	; (15b2c <bt_mesh_cfg_cli_init+0x60>)
   15b02:	480c      	ldr	r0, [pc, #48]	; (15b34 <bt_mesh_cfg_cli_init+0x68>)
   15b04:	1a9b      	subs	r3, r3, r2
   15b06:	08db      	lsrs	r3, r3, #3
   15b08:	f363 118f 	bfi	r1, r3, #6, #10
   15b0c:	e7eb      	b.n	15ae6 <bt_mesh_cfg_cli_init+0x1a>
	cli = model->user_data;
   15b0e:	490a      	ldr	r1, [pc, #40]	; (15b38 <bt_mesh_cfg_cli_init+0x6c>)
	model->keys[0] = BT_MESH_KEY_DEV;
   15b10:	f64f 73fe 	movw	r3, #65534	; 0xfffe
	cli = model->user_data;
   15b14:	6008      	str	r0, [r1, #0]
	cli->model = model;
   15b16:	f840 2b04 	str.w	r2, [r0], #4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   15b1a:	2100      	movs	r1, #0
	model->keys[0] = BT_MESH_KEY_DEV;
   15b1c:	8193      	strh	r3, [r2, #12]
   15b1e:	2201      	movs	r2, #1
   15b20:	f00d f997 	bl	22e52 <z_impl_k_sem_init>
	return 0;
   15b24:	2000      	movs	r0, #0
   15b26:	e7e2      	b.n	15aee <bt_mesh_cfg_cli_init+0x22>
   15b28:	000233ec 	.word	0x000233ec
   15b2c:	0002348c 	.word	0x0002348c
   15b30:	00027eb5 	.word	0x00027eb5
   15b34:	00027eea 	.word	0x00027eea
   15b38:	20000b1c 	.word	0x20000b1c

00015b3c <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   15b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   15b40:	4f11      	ldr	r7, [pc, #68]	; (15b88 <mayfly_init+0x4c>)
   15b42:	f8df 9048 	ldr.w	r9, [pc, #72]	; 15b8c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   15b46:	2604      	movs	r6, #4
	while (callee_id--) {
   15b48:	3e01      	subs	r6, #1
   15b4a:	b2f6      	uxtb	r6, r6
   15b4c:	2eff      	cmp	r6, #255	; 0xff
   15b4e:	d019      	beq.n	15b84 <mayfly_init+0x48>
   15b50:	b233      	sxth	r3, r6
   15b52:	ea4f 0883 	mov.w	r8, r3, lsl #2
   15b56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15b5a:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
   15b5c:	2404      	movs	r4, #4
   15b5e:	f04f 0a0c 	mov.w	sl, #12
   15b62:	e00a      	b.n	15b7a <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
   15b64:	fb1a 5104 	smlabb	r1, sl, r4, r5
   15b68:	1d0a      	adds	r2, r1, #4
   15b6a:	eb04 0008 	add.w	r0, r4, r8
   15b6e:	443a      	add	r2, r7
   15b70:	4439      	add	r1, r7
   15b72:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
   15b76:	f00c f81b 	bl	21bb0 <memq_init>
		while (caller_id--) {
   15b7a:	3c01      	subs	r4, #1
   15b7c:	b2e4      	uxtb	r4, r4
   15b7e:	2cff      	cmp	r4, #255	; 0xff
   15b80:	d1f0      	bne.n	15b64 <mayfly_init+0x28>
   15b82:	e7e1      	b.n	15b48 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   15b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15b88:	20000ba0 	.word	0x20000ba0
   15b8c:	20000b20 	.word	0x20000b20

00015b90 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   15b90:	b4f0      	push	{r4, r5, r6, r7}
   15b92:	4b12      	ldr	r3, [pc, #72]	; (15bdc <mayfly_enable+0x4c>)
   15b94:	4605      	mov	r5, r0
   15b96:	460f      	mov	r7, r1
   15b98:	260c      	movs	r6, #12
   15b9a:	2430      	movs	r4, #48	; 0x30
	if (enable) {
   15b9c:	b172      	cbz	r2, 15bbc <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
   15b9e:	4361      	muls	r1, r4
   15ba0:	fb06 1400 	mla	r4, r6, r0, r1
   15ba4:	4423      	add	r3, r4
   15ba6:	7a59      	ldrb	r1, [r3, #9]
   15ba8:	7a18      	ldrb	r0, [r3, #8]
   15baa:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   15bac:	bf04      	itt	eq
   15bae:	3101      	addeq	r1, #1
   15bb0:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   15bb2:	4628      	mov	r0, r5
   15bb4:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
   15bb6:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   15bb8:	f004 bea6 	b.w	1a908 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   15bbc:	434c      	muls	r4, r1
   15bbe:	fb06 4400 	mla	r4, r6, r0, r4
   15bc2:	4423      	add	r3, r4
   15bc4:	7a9c      	ldrb	r4, [r3, #10]
   15bc6:	7ada      	ldrb	r2, [r3, #11]
   15bc8:	42a2      	cmp	r2, r4
   15bca:	d104      	bne.n	15bd6 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
   15bcc:	3201      	adds	r2, #1
   15bce:	729a      	strb	r2, [r3, #10]
}
   15bd0:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   15bd2:	f004 bee7 	b.w	1a9a4 <mayfly_pend>
}
   15bd6:	bcf0      	pop	{r4, r5, r6, r7}
   15bd8:	4770      	bx	lr
   15bda:	bf00      	nop
   15bdc:	20000ba0 	.word	0x20000ba0

00015be0 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
   15be0:	b570      	push	{r4, r5, r6, lr}
   15be2:	4606      	mov	r6, r0
   15be4:	460d      	mov	r5, r1
   15be6:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   15be8:	b1a2      	cbz	r2, 15c14 <mayfly_enqueue+0x34>
   15bea:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   15bec:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   15bee:	7820      	ldrb	r0, [r4, #0]
   15bf0:	1a80      	subs	r0, r0, r2
	if (state != 0) {
   15bf2:	f010 0003 	ands.w	r0, r0, #3
   15bf6:	d02c      	beq.n	15c52 <mayfly_enqueue+0x72>
		if (chain) {
   15bf8:	b31b      	cbz	r3, 15c42 <mayfly_enqueue+0x62>
			if (state != 1) {
   15bfa:	2801      	cmp	r0, #1
   15bfc:	d028      	beq.n	15c50 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
   15bfe:	3201      	adds	r2, #1
   15c00:	b2d2      	uxtb	r2, r2
   15c02:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1;
   15c04:	4b1c      	ldr	r3, [pc, #112]	; (15c78 <mayfly_enqueue+0x98>)
   15c06:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   15c08:	4629      	mov	r1, r5
   15c0a:	4630      	mov	r0, r6
	mfp[callee_id] = 1;
   15c0c:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   15c0e:	f004 fec9 	bl	1a9a4 <mayfly_pend>
   15c12:	e01c      	b.n	15c4e <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   15c14:	f00c fc1f 	bl	22456 <mayfly_prio_is_equal>
   15c18:	2800      	cmp	r0, #0
   15c1a:	d0e6      	beq.n	15bea <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   15c1c:	4629      	mov	r1, r5
   15c1e:	4630      	mov	r0, r6
   15c20:	f004 fe9a 	bl	1a958 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   15c24:	2800      	cmp	r0, #0
   15c26:	d0e0      	beq.n	15bea <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   15c28:	2330      	movs	r3, #48	; 0x30
   15c2a:	220c      	movs	r2, #12
   15c2c:	436b      	muls	r3, r5
   15c2e:	fb02 3306 	mla	r3, r2, r6, r3
   15c32:	4a12      	ldr	r2, [pc, #72]	; (15c7c <mayfly_enqueue+0x9c>)
   15c34:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   15c36:	7a93      	ldrb	r3, [r2, #10]
   15c38:	7ad2      	ldrb	r2, [r2, #11]
   15c3a:	1a9b      	subs	r3, r3, r2
   15c3c:	bf18      	it	ne
   15c3e:	2301      	movne	r3, #1
   15c40:	e7d4      	b.n	15bec <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   15c42:	3202      	adds	r2, #2
   15c44:	b2d2      	uxtb	r2, r2
   15c46:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   15c48:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   15c4c:	4798      	blx	r3

	return 0;
   15c4e:	2000      	movs	r0, #0
}
   15c50:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
   15c52:	2b00      	cmp	r3, #0
   15c54:	d0f8      	beq.n	15c48 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
   15c56:	3201      	adds	r2, #1
   15c58:	b2d2      	uxtb	r2, r2
   15c5a:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   15c5c:	2304      	movs	r3, #4
   15c5e:	2230      	movs	r2, #48	; 0x30
   15c60:	fb12 3205 	smlabb	r2, r2, r5, r3
   15c64:	230c      	movs	r3, #12
   15c66:	fb13 2306 	smlabb	r3, r3, r6, r2
   15c6a:	4a04      	ldr	r2, [pc, #16]	; (15c7c <mayfly_enqueue+0x9c>)
   15c6c:	6860      	ldr	r0, [r4, #4]
   15c6e:	441a      	add	r2, r3
   15c70:	4621      	mov	r1, r4
   15c72:	f00b ffa0 	bl	21bb6 <memq_enqueue>
   15c76:	e7c5      	b.n	15c04 <mayfly_enqueue+0x24>
   15c78:	200022f7 	.word	0x200022f7
   15c7c:	20000ba0 	.word	0x20000ba0

00015c80 <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
   15c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
   15c84:	4b56      	ldr	r3, [pc, #344]	; (15de0 <mayfly_run+0x160>)
   15c86:	5c1a      	ldrb	r2, [r3, r0]
{
   15c88:	b089      	sub	sp, #36	; 0x24
   15c8a:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
   15c8c:	2a00      	cmp	r2, #0
   15c8e:	f000 80a0 	beq.w	15dd2 <mayfly_run+0x152>
		return;
	}
	mfp[callee_id] = 1;
   15c92:	2201      	movs	r2, #1
   15c94:	541a      	strb	r2, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   15c96:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   15c9a:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15c9c:	f8df b144 	ldr.w	fp, [pc, #324]	; 15de4 <mayfly_run+0x164>
   15ca0:	9304      	str	r3, [sp, #16]
   15ca2:	2404      	movs	r4, #4
   15ca4:	233c      	movs	r3, #60	; 0x3c
   15ca6:	fb13 4300 	smlabb	r3, r3, r0, r4
   15caa:	445b      	add	r3, fp
	u8_t enable = 0U;
   15cac:	f04f 0800 	mov.w	r8, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15cb0:	9303      	str	r3, [sp, #12]
	u8_t disable = 0U;
   15cb2:	f8cd 8000 	str.w	r8, [sp]
   15cb6:	46d9      	mov	r9, fp
	while (caller_id--) {
   15cb8:	3c01      	subs	r4, #1
   15cba:	b2e4      	uxtb	r4, r4
   15cbc:	2cff      	cmp	r4, #255	; 0xff
   15cbe:	d10d      	bne.n	15cdc <mayfly_run+0x5c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   15cc0:	9b00      	ldr	r3, [sp, #0]
   15cc2:	2b00      	cmp	r3, #0
   15cc4:	f000 8085 	beq.w	15dd2 <mayfly_run+0x152>
   15cc8:	f1b8 0f00 	cmp.w	r8, #0
   15ccc:	f040 8081 	bne.w	15dd2 <mayfly_run+0x152>
		mayfly_enable_cb(callee_id, callee_id, 0);
   15cd0:	4642      	mov	r2, r8
   15cd2:	4629      	mov	r1, r5
   15cd4:	4628      	mov	r0, r5
   15cd6:	f004 fe17 	bl	1a908 <mayfly_enable_cb>
   15cda:	e07a      	b.n	15dd2 <mayfly_run+0x152>
		struct mayfly *m = 0;
   15cdc:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   15cde:	260c      	movs	r6, #12
		struct mayfly *m = 0;
   15ce0:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   15ce2:	4366      	muls	r6, r4
   15ce4:	2330      	movs	r3, #48	; 0x30
   15ce6:	fb03 6305 	mla	r3, r3, r5, r6
   15cea:	eb09 0103 	add.w	r1, r9, r3
   15cee:	aa07      	add	r2, sp, #28
   15cf0:	f859 0003 	ldr.w	r0, [r9, r3]
   15cf4:	6849      	ldr	r1, [r1, #4]
   15cf6:	f00b ff65 	bl	21bc4 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
   15cfa:	9a04      	ldr	r2, [sp, #16]
   15cfc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   15d00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15d04:	444b      	add	r3, r9
   15d06:	e9cd 6301 	strd	r6, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
   15d0a:	4682      	mov	sl, r0
		while (link) {
   15d0c:	f1ba 0f00 	cmp.w	sl, #0
   15d10:	d043      	beq.n	15d9a <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
   15d12:	9b07      	ldr	r3, [sp, #28]
   15d14:	781f      	ldrb	r7, [r3, #0]
   15d16:	785a      	ldrb	r2, [r3, #1]
   15d18:	1abf      	subs	r7, r7, r2
   15d1a:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
   15d1e:	2f01      	cmp	r7, #1
   15d20:	d104      	bne.n	15d2c <mayfly_run+0xac>
				m->_ack--;
   15d22:	3a01      	subs	r2, #1
   15d24:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   15d26:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   15d2a:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
   15d2c:	9e07      	ldr	r6, [sp, #28]
	req = m->_req;
   15d2e:	7833      	ldrb	r3, [r6, #0]
	if (((req - m->_ack) & 0x03) != 1) {
   15d30:	7872      	ldrb	r2, [r6, #1]
	req = m->_req;
   15d32:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1) {
   15d34:	1a9a      	subs	r2, r3, r2
   15d36:	f002 0203 	and.w	r2, r2, #3
   15d3a:	2a01      	cmp	r2, #1
   15d3c:	9305      	str	r3, [sp, #20]
   15d3e:	d01b      	beq.n	15d78 <mayfly_run+0xf8>
		memq_dequeue(mft[callee_id][caller_id].tail,
   15d40:	9b01      	ldr	r3, [sp, #4]
   15d42:	9902      	ldr	r1, [sp, #8]
   15d44:	2030      	movs	r0, #48	; 0x30
   15d46:	fb00 3005 	mla	r0, r0, r5, r3
   15d4a:	4b26      	ldr	r3, [pc, #152]	; (15de4 <mayfly_run+0x164>)
   15d4c:	4418      	add	r0, r3
   15d4e:	2200      	movs	r2, #0
   15d50:	6840      	ldr	r0, [r0, #4]
   15d52:	f00b ff3f 	bl	21bd4 <memq_dequeue>
		m->_ack = req;
   15d56:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
   15d58:	7872      	ldrb	r2, [r6, #1]
		m->_ack = req;
   15d5a:	7073      	strb	r3, [r6, #1]
		if (((m->_req - ack) & 0x03) == 1) {
   15d5c:	7833      	ldrb	r3, [r6, #0]
		m->_link = link;
   15d5e:	f8c6 a004 	str.w	sl, [r6, #4]
		if (((m->_req - ack) & 0x03) == 1) {
   15d62:	1a9b      	subs	r3, r3, r2
   15d64:	f003 0303 	and.w	r3, r3, #3
   15d68:	2b01      	cmp	r3, #1
   15d6a:	d105      	bne.n	15d78 <mayfly_run+0xf8>
			m->_ack = ack;
   15d6c:	7072      	strb	r2, [r6, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   15d6e:	4631      	mov	r1, r6
   15d70:	9a03      	ldr	r2, [sp, #12]
   15d72:	4650      	mov	r0, sl
   15d74:	f00b ff1f 	bl	21bb6 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
   15d78:	9a01      	ldr	r2, [sp, #4]
   15d7a:	2330      	movs	r3, #48	; 0x30
   15d7c:	fb03 2305 	mla	r3, r3, r5, r2
   15d80:	eb09 0103 	add.w	r1, r9, r3
   15d84:	aa07      	add	r2, sp, #28
   15d86:	6849      	ldr	r1, [r1, #4]
   15d88:	f859 0003 	ldr.w	r0, [r9, r3]
   15d8c:	f00b ff1a 	bl	21bc4 <memq_peek>
			if (state == 1) {
   15d90:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   15d92:	4682      	mov	sl, r0
			if (state == 1) {
   15d94:	d1ba      	bne.n	15d0c <mayfly_run+0x8c>
				if (caller_id || link) {
   15d96:	b9c4      	cbnz	r4, 15dca <mayfly_run+0x14a>
   15d98:	b9b8      	cbnz	r0, 15dca <mayfly_run+0x14a>
		if (mft[callee_id][caller_id].disable_req !=
   15d9a:	2230      	movs	r2, #48	; 0x30
   15d9c:	4911      	ldr	r1, [pc, #68]	; (15de4 <mayfly_run+0x164>)
   15d9e:	230c      	movs	r3, #12
   15da0:	436a      	muls	r2, r5
   15da2:	fb03 2204 	mla	r2, r3, r4, r2
   15da6:	440a      	add	r2, r1
   15da8:	7a91      	ldrb	r1, [r2, #10]
   15daa:	7ad0      	ldrb	r0, [r2, #11]
   15dac:	4288      	cmp	r0, r1
   15dae:	d113      	bne.n	15dd8 <mayfly_run+0x158>
		if (mft[callee_id][caller_id].enable_req !=
   15db0:	2230      	movs	r2, #48	; 0x30
   15db2:	436a      	muls	r2, r5
   15db4:	fb03 2304 	mla	r3, r3, r4, r2
   15db8:	445b      	add	r3, fp
   15dba:	7a1a      	ldrb	r2, [r3, #8]
   15dbc:	7a59      	ldrb	r1, [r3, #9]
   15dbe:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   15dc0:	bf1c      	itt	ne
   15dc2:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
   15dc4:	f04f 0801 	movne.w	r8, #1
   15dc8:	e776      	b.n	15cb8 <mayfly_run+0x38>
					mayfly_pend(callee_id, callee_id);
   15dca:	4629      	mov	r1, r5
   15dcc:	4628      	mov	r0, r5
   15dce:	f004 fde9 	bl	1a9a4 <mayfly_pend>
	}
}
   15dd2:	b009      	add	sp, #36	; 0x24
   15dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   15dd8:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
   15dda:	2201      	movs	r2, #1
   15ddc:	9200      	str	r2, [sp, #0]
   15dde:	e7e7      	b.n	15db0 <mayfly_run+0x130>
   15de0:	200022f7 	.word	0x200022f7
   15de4:	20000ba0 	.word	0x20000ba0

00015de8 <ticker_job>:
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
		  ticker_ticks_diff_get(cc, ctr));
}

void ticker_job(void *param)
{
   15de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
   15dec:	7fc2      	ldrb	r2, [r0, #31]
{
   15dee:	b093      	sub	sp, #76	; 0x4c
   15df0:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
   15df2:	2a00      	cmp	r2, #0
   15df4:	f040 83be 	bne.w	16574 <ticker_job+0x78c>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
   15df8:	6943      	ldr	r3, [r0, #20]
   15dfa:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1U;
   15dfc:	2101      	movs	r1, #1

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   15dfe:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
   15e00:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   15e02:	7ac0      	ldrb	r0, [r0, #11]
   15e04:	4298      	cmp	r0, r3
   15e06:	f000 8088 	beq.w	15f1a <ticker_job+0x132>
		u8_t first;

		first = instance->ticks_elapsed_first + 1;
   15e0a:	440b      	add	r3, r1
   15e0c:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0U;
   15e0e:	2b02      	cmp	r3, #2
   15e10:	bf08      	it	eq
   15e12:	2300      	moveq	r3, #0
		}
		instance->ticks_elapsed_first = first;
   15e14:	f88b 300a 	strb.w	r3, [fp, #10]

		ticks_elapsed =
   15e18:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
   15e1c:	9102      	str	r1, [sp, #8]
		ticks_elapsed =
   15e1e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		instance->ticks_current += ticks_elapsed;
   15e22:	9b05      	ldr	r3, [sp, #20]
   15e24:	4453      	add	r3, sl
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   15e26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   15e2a:	f8cb 3014 	str.w	r3, [fp, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
   15e2e:	f89b 301d 	ldrb.w	r3, [fp, #29]
   15e32:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
   15e34:	f8db 3000 	ldr.w	r3, [fp]
   15e38:	9303      	str	r3, [sp, #12]
	users = &instance->user[0];
   15e3a:	f8db 3004 	ldr.w	r3, [fp, #4]
   15e3e:	930b      	str	r3, [sp, #44]	; 0x2c
	pending = 0U;
   15e40:	2300      	movs	r3, #0
   15e42:	9306      	str	r3, [sp, #24]
	count_user = instance->count_user;
   15e44:	f89b 8009 	ldrb.w	r8, [fp, #9]
	insert_head = TICKER_NULL;
   15e48:	23ff      	movs	r3, #255	; 0xff
   15e4a:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   15e4c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   15e50:	fa5f f883 	uxtb.w	r8, r3
   15e54:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   15e58:	d162      	bne.n	15f20 <ticker_job+0x138>

	/* Manage updates and deletions in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
   15e5a:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   15e5e:	9a04      	ldr	r2, [sp, #16]
   15e60:	1a9b      	subs	r3, r3, r2
   15e62:	bf18      	it	ne
   15e64:	2301      	movne	r3, #1
   15e66:	9303      	str	r3, [sp, #12]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
   15e68:	9b02      	ldr	r3, [sp, #8]
   15e6a:	b1db      	cbz	r3, 15ea4 <ticker_job+0xbc>
   15e6c:	f8db 8000 	ldr.w	r8, [fp]
	if ((ticker->remainder_current < BIT(31)) &&
   15e70:	f8df 93fc 	ldr.w	r9, [pc, #1020]	; 16270 <ticker_job+0x488>
	ticks_expired = 0U;
   15e74:	2700      	movs	r7, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   15e76:	f89b 501d 	ldrb.w	r5, [fp, #29]
   15e7a:	2dff      	cmp	r5, #255	; 0xff
   15e7c:	d00b      	beq.n	15e96 <ticker_job+0xae>
		ticker = &node[id_expired];
   15e7e:	b22e      	sxth	r6, r5
   15e80:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   15e84:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   15e88:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   15e8a:	4553      	cmp	r3, sl
   15e8c:	f240 812f 	bls.w	160ee <ticker_job+0x306>
			ticker->ticks_to_expire -= ticks_elapsed;
   15e90:	eba3 030a 	sub.w	r3, r3, sl
   15e94:	60a3      	str	r3, [r4, #8]
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1U;
   15e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   15e9a:	9904      	ldr	r1, [sp, #16]
   15e9c:	42a9      	cmp	r1, r5
   15e9e:	bf18      	it	ne
   15ea0:	4613      	movne	r3, r2
   15ea2:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
   15ea4:	f8db 3000 	ldr.w	r3, [fp]
   15ea8:	9307      	str	r3, [sp, #28]
	users = &instance->user[0];
   15eaa:	f8db 3004 	ldr.w	r3, [fp, #4]
   15eae:	9310      	str	r3, [sp, #64]	; 0x40
	count_user = instance->count_user;
   15eb0:	f89b 3009 	ldrb.w	r3, [fp, #9]
   15eb4:	9302      	str	r3, [sp, #8]
	while (count_user--) {
   15eb6:	9b02      	ldr	r3, [sp, #8]
   15eb8:	3b01      	subs	r3, #1
   15eba:	b2db      	uxtb	r3, r3
   15ebc:	2bff      	cmp	r3, #255	; 0xff
   15ebe:	9302      	str	r3, [sp, #8]
   15ec0:	f040 8166 	bne.w	16190 <ticker_job+0x3a8>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1U;
   15ec4:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
	if (instance->ticker_id_head != ticker_id_old_head) {
   15ec8:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   15ecc:	428b      	cmp	r3, r1
   15ece:	bf18      	it	ne
   15ed0:	2201      	movne	r2, #1
	}

	/* Processing any list inquiries */
	if (!pending) {
   15ed2:	9b06      	ldr	r3, [sp, #24]
		flag_compare_update = 1U;
   15ed4:	9203      	str	r2, [sp, #12]
	if (!pending) {
   15ed6:	2b00      	cmp	r3, #0
   15ed8:	f000 8299 	beq.w	1640e <ticker_job+0x626>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0U;
   15edc:	2300      	movs	r3, #0
   15ede:	f88b 301e 	strb.w	r3, [fp, #30]

	/* update compare if head changed */
	if (flag_compare_update) {
   15ee2:	9b03      	ldr	r3, [sp, #12]
   15ee4:	b14b      	cbz	r3, 15efa <ticker_job+0x112>
	if (instance->ticker_id_head == TICKER_NULL) {
   15ee6:	f89b 301d 	ldrb.w	r3, [fp, #29]
   15eea:	2bff      	cmp	r3, #255	; 0xff
   15eec:	f040 82e9 	bne.w	164c2 <ticker_job+0x6da>
		if (cntr_stop() == 0) {
   15ef0:	f004 f8e4 	bl	1a0bc <cntr_stop>
   15ef4:	b908      	cbnz	r0, 15efa <ticker_job+0x112>
			instance->ticks_slot_previous = 0U;
   15ef6:	f8cb 0018 	str.w	r0, [fp, #24]
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
   15efa:	f89b 301f 	ldrb.w	r3, [fp, #31]
   15efe:	2b00      	cmp	r3, #0
   15f00:	f000 8338 	beq.w	16574 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   15f04:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   15f08:	465b      	mov	r3, fp
   15f0a:	2201      	movs	r2, #1
   15f0c:	2103      	movs	r1, #3
   15f0e:	2004      	movs	r0, #4
   15f10:	46a4      	mov	ip, r4
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
   15f12:	b013      	add	sp, #76	; 0x4c
   15f14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   15f18:	4760      	bx	ip
		flag_elapsed = 0U;
   15f1a:	9202      	str	r2, [sp, #8]
		ticks_elapsed = 0U;
   15f1c:	4692      	mov	sl, r2
   15f1e:	e786      	b.n	15e2e <ticker_job+0x46>
		user = &users[count_user];
   15f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15f22:	eb03 07c8 	add.w	r7, r3, r8, lsl #3
		user_ops = &user->user_op[0];
   15f26:	687b      	ldr	r3, [r7, #4]
   15f28:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
   15f2a:	78f9      	ldrb	r1, [r7, #3]
   15f2c:	78be      	ldrb	r6, [r7, #2]
   15f2e:	428e      	cmp	r6, r1
   15f30:	d08c      	beq.n	15e4c <ticker_job+0x64>
			user_op = &user_ops[user->middle];
   15f32:	9b07      	ldr	r3, [sp, #28]
			if (middle == user->count_user_op) {
   15f34:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
   15f36:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   15f3a:	0112      	lsls	r2, r2, #4
   15f3c:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
   15f3e:	1c73      	adds	r3, r6, #1
   15f40:	b2db      	uxtb	r3, r3
				middle = 0U;
   15f42:	4298      	cmp	r0, r3
   15f44:	bf08      	it	eq
   15f46:	2300      	moveq	r3, #0
			user->middle = middle;
   15f48:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   15f4a:	9b07      	ldr	r3, [sp, #28]
   15f4c:	5c9a      	ldrb	r2, [r3, r2]
   15f4e:	2a03      	cmp	r2, #3
   15f50:	d9ec      	bls.n	15f2c <ticker_job+0x144>
			ticker = &node[user_op->id];
   15f52:	7869      	ldrb	r1, [r5, #1]
   15f54:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   15f58:	930a      	str	r3, [sp, #40]	; 0x28
   15f5a:	980a      	ldr	r0, [sp, #40]	; 0x28
   15f5c:	9b03      	ldr	r3, [sp, #12]
   15f5e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   15f62:	2a05      	cmp	r2, #5
			state = (ticker->req - ticker->ack) & 0xff;
   15f64:	7863      	ldrb	r3, [r4, #1]
   15f66:	78a0      	ldrb	r0, [r4, #2]
   15f68:	eba3 0300 	sub.w	r3, r3, r0
   15f6c:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   15f6e:	d80e      	bhi.n	15f8e <ticker_job+0x1a6>
   15f70:	b16b      	cbz	r3, 15f8e <ticker_job+0x1a6>
			    (state == 0) ||
   15f72:	2a04      	cmp	r2, #4
   15f74:	d110      	bne.n	15f98 <ticker_job+0x1b0>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   15f76:	686a      	ldr	r2, [r5, #4]
   15f78:	b972      	cbnz	r2, 15f98 <ticker_job+0x1b0>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   15f7a:	68aa      	ldr	r2, [r5, #8]
   15f7c:	b962      	cbnz	r2, 15f98 <ticker_job+0x1b0>
			     (user_op->params.update.ticks_drift_minus == 0) &&
   15f7e:	68ea      	ldr	r2, [r5, #12]
   15f80:	b952      	cbnz	r2, 15f98 <ticker_job+0x1b0>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   15f82:	692a      	ldr	r2, [r5, #16]
   15f84:	b942      	cbnz	r2, 15f98 <ticker_job+0x1b0>
			     (user_op->params.update.lazy == 0) &&
   15f86:	696a      	ldr	r2, [r5, #20]
   15f88:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   15f8c:	d104      	bne.n	15f98 <ticker_job+0x1b0>
				ticker_job_op_cb(user_op,
   15f8e:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   15f90:	4628      	mov	r0, r5
   15f92:	f00b fe8a 	bl	21caa <ticker_job_op_cb>
   15f96:	e7c8      	b.n	15f2a <ticker_job+0x142>
			if (state == 1) {
   15f98:	2b01      	cmp	r3, #1
   15f9a:	f040 809d 	bne.w	160d8 <ticker_job+0x2f0>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   15f9e:	4658      	mov	r0, fp
   15fa0:	f00b fe3a 	bl	21c18 <ticker_dequeue>
   15fa4:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   15fa6:	782b      	ldrb	r3, [r5, #0]
   15fa8:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   15faa:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   15fac:	f040 8086 	bne.w	160bc <ticker_job+0x2d4>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   15fb0:	f8db 3014 	ldr.w	r3, [fp, #20]
   15fb4:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   15fb6:	f004 f8ad 	bl	1a114 <cntr_cnt_get>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15fba:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   15fbc:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15fbe:	1ac3      	subs	r3, r0, r3
   15fc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   15fc4:	4453      	add	r3, sl
	if (ticks_to_expire > ticks_elapsed) {
   15fc6:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   15fc8:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
   15fca:	bf9e      	ittt	ls
   15fcc:	6962      	ldrls	r2, [r4, #20]
   15fce:	1b92      	subls	r2, r2, r6
   15fd0:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
   15fd2:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   15fd4:	bf96      	itet	ls
   15fd6:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
   15fd8:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0U;
   15fda:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
   15fdc:	2a00      	cmp	r2, #0
   15fde:	d049      	beq.n	16074 <ticker_job+0x28c>
	    (user_op->params.update.lazy != 0)) {
   15fe0:	8aa9      	ldrh	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0) &&
   15fe2:	2900      	cmp	r1, #0
   15fe4:	d046      	beq.n	16074 <ticker_job+0x28c>
		user_op->params.update.lazy--;
   15fe6:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   15fea:	fa1f fc8c 	uxth.w	ip, ip
   15fee:	f8a5 c014 	strh.w	ip, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   15ff2:	429a      	cmp	r2, r3
   15ff4:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   15ff8:	d201      	bcs.n	15ffe <ticker_job+0x216>
   15ffa:	45f4      	cmp	ip, lr
   15ffc:	d302      	bcc.n	16004 <ticker_job+0x21c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   15ffe:	f8df 9278 	ldr.w	r9, [pc, #632]	; 16278 <ticker_job+0x490>
   16002:	e031      	b.n	16068 <ticker_job+0x280>
	if ((ticker->remainder_current >= BIT(31)) ||
   16004:	6a61      	ldr	r1, [r4, #36]	; 0x24
   16006:	4e9a      	ldr	r6, [pc, #616]	; (16270 <ticker_job+0x488>)
   16008:	489a      	ldr	r0, [pc, #616]	; (16274 <ticker_job+0x48c>)
   1600a:	198e      	adds	r6, r1, r6
   1600c:	4286      	cmp	r6, r0
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1600e:	bf81      	itttt	hi
   16010:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   16014:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   16018:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   1601c:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   1601e:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
		decrement++;
   16022:	bf8c      	ite	hi
   16024:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0U;
   16028:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   1602c:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
   1602e:	4491      	add	r9, r2
			ticker->lazy_current--;
   16030:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
   16034:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   16036:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
   1603a:	f8a4 e01e 	strh.w	lr, [r4, #30]
   1603e:	e7d8      	b.n	15ff2 <ticker_job+0x20a>
	ticker->remainder_current += ticker->remainder_periodic;
   16040:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
   16044:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
   16046:	498a      	ldr	r1, [pc, #552]	; (16270 <ticker_job+0x488>)
   16048:	488a      	ldr	r0, [pc, #552]	; (16274 <ticker_job+0x48c>)
   1604a:	1871      	adds	r1, r6, r1
   1604c:	4281      	cmp	r1, r0
	return 0;
   1604e:	bf8e      	itee	hi
   16050:	2100      	movhi	r1, #0
		return 1;
   16052:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16054:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
   16056:	4411      	add	r1, r2
			ticker->lazy_current++;
   16058:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
   1605c:	bf8c      	ite	hi
   1605e:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16060:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
   16062:	440b      	add	r3, r1
			ticker->lazy_current++;
   16064:	f8a4 e01e 	strh.w	lr, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   16068:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   1606c:	45f4      	cmp	ip, lr
   1606e:	d8e7      	bhi.n	16040 <ticker_job+0x258>
		ticker->lazy_periodic = user_op->params.update.lazy;
   16070:	f8a4 c01c 	strh.w	ip, [r4, #28]
	ticker->ticks_to_expire = ticks_to_expire +
   16074:	686a      	ldr	r2, [r5, #4]
   16076:	4413      	add	r3, r2
   16078:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   1607a:	68aa      	ldr	r2, [r5, #8]
   1607c:	6963      	ldr	r3, [r4, #20]
   1607e:	4413      	add	r3, r2
   16080:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   16082:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   16086:	4620      	mov	r0, r4
   16088:	f00b fdf1 	bl	21c6e <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1608c:	68ea      	ldr	r2, [r5, #12]
   1608e:	69a3      	ldr	r3, [r4, #24]
   16090:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   16092:	692a      	ldr	r2, [r5, #16]
   16094:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   16096:	bf8c      	ite	hi
   16098:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   1609a:	2300      	movls	r3, #0
   1609c:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
   1609e:	7dab      	ldrb	r3, [r5, #22]
   160a0:	b103      	cbz	r3, 160a4 <ticker_job+0x2bc>
		ticker->force = user_op->params.update.force;
   160a2:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
   160a4:	9b03      	ldr	r3, [sp, #12]
   160a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   160a8:	9901      	ldr	r1, [sp, #4]
   160aa:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
	*insert_head = user_op->id;
   160ae:	786b      	ldrb	r3, [r5, #1]
   160b0:	9301      	str	r3, [sp, #4]
		ticker->req++;
   160b2:	7863      	ldrb	r3, [r4, #1]
   160b4:	3301      	adds	r3, #1
   160b6:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   160b8:	2100      	movs	r1, #0
   160ba:	e769      	b.n	15f90 <ticker_job+0x1a8>
		ticker->req = ticker->ack;
   160bc:	78a3      	ldrb	r3, [r4, #2]
   160be:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   160c0:	786b      	ldrb	r3, [r5, #1]
   160c2:	f89b 201c 	ldrb.w	r2, [fp, #28]
   160c6:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   160c8:	bf01      	itttt	eq
   160ca:	23ff      	moveq	r3, #255	; 0xff
   160cc:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
   160d0:	2300      	moveq	r3, #0
   160d2:	f8cb 3018 	streq.w	r3, [fp, #24]
   160d6:	e7ef      	b.n	160b8 <ticker_job+0x2d0>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   160d8:	2104      	movs	r1, #4
   160da:	465b      	mov	r3, fp
   160dc:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   160e0:	2201      	movs	r2, #1
   160e2:	4608      	mov	r0, r1
   160e4:	47a0      	blx	r4
				pending = 1U;
   160e6:	2301      	movs	r3, #1
				user->middle = prev;
   160e8:	70be      	strb	r6, [r7, #2]
				pending = 1U;
   160ea:	9306      	str	r3, [sp, #24]
   160ec:	e6ae      	b.n	15e4c <ticker_job+0x64>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   160ee:	f8db 2018 	ldr.w	r2, [fp, #24]
   160f2:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   160f4:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
   160f8:	441f      	add	r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   160fa:	bf29      	itett	cs
   160fc:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
   160fe:	1ad3      	subcc	r3, r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   16100:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
   16104:	2300      	movcs	r3, #0
   16106:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
   1610a:	69a3      	ldr	r3, [r4, #24]
   1610c:	b11b      	cbz	r3, 16116 <ticker_job+0x32e>
			instance->ticker_id_slot_previous = id_expired;
   1610e:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   16112:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0U;
   16116:	2200      	movs	r2, #0
   16118:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1611a:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   1611e:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
   16122:	f8d4 c004 	ldr.w	ip, [r4, #4]
   16126:	f1bc 0f00 	cmp.w	ip, #0
   1612a:	d02d      	beq.n	16188 <ticker_job+0x3a0>
			while (count--) {
   1612c:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
   1612e:	f8df e144 	ldr.w	lr, [pc, #324]	; 16274 <ticker_job+0x48c>
	ticker->remainder_current += ticker->remainder_periodic;
   16132:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   16136:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
   16138:	eb03 0109 	add.w	r1, r3, r9
   1613c:	4571      	cmp	r1, lr
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1613e:	bf9f      	itttt	ls
   16140:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   16144:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   16148:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
   1614c:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
   1614e:	bf92      	itee	ls
   16150:	9b02      	ldrls	r3, [sp, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   16152:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
   16154:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
   16156:	4463      	add	r3, ip
			while (count--) {
   16158:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
   1615c:	441a      	add	r2, r3
			while (count--) {
   1615e:	d2e8      	bcs.n	16132 <ticker_job+0x34a>
			ticks_to_expire_prep(ticker, instance->ticks_current,
   16160:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
   16162:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   16164:	f8db 1014 	ldr.w	r1, [fp, #20]
   16168:	19da      	adds	r2, r3, r7
   1616a:	4620      	mov	r0, r4
   1616c:	f00b fd7f 	bl	21c6e <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   16170:	8ba3      	ldrh	r3, [r4, #28]
   16172:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0U;
   16174:	2300      	movs	r3, #0
   16176:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
   16178:	9b01      	ldr	r3, [sp, #4]
   1617a:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
			ticker->req++;
   1617e:	7863      	ldrb	r3, [r4, #1]
   16180:	3301      	adds	r3, #1
   16182:	7063      	strb	r3, [r4, #1]
			ticker->req = ticker->ack;
   16184:	9501      	str	r5, [sp, #4]
   16186:	e676      	b.n	15e76 <ticker_job+0x8e>
   16188:	78a3      	ldrb	r3, [r4, #2]
   1618a:	7063      	strb	r3, [r4, #1]
   1618c:	9d01      	ldr	r5, [sp, #4]
   1618e:	e7f9      	b.n	16184 <ticker_job+0x39c>
		user = &users[count_user];
   16190:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16192:	9a02      	ldr	r2, [sp, #8]
   16194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   16198:	9305      	str	r3, [sp, #20]
		user_ops = (void *)&user->user_op[0];
   1619a:	685b      	ldr	r3, [r3, #4]
   1619c:	9309      	str	r3, [sp, #36]	; 0x24
		user_ops_first = user->first;
   1619e:	9b05      	ldr	r3, [sp, #20]
   161a0:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   161a4:	9b01      	ldr	r3, [sp, #4]
   161a6:	2bff      	cmp	r3, #255	; 0xff
   161a8:	d041      	beq.n	1622e <ticker_job+0x446>
				ticker = &node[id_insert];
   161aa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   161ae:	9a07      	ldr	r2, [sp, #28]
				insert_head = ticker->next;
   161b0:	f8dd a004 	ldr.w	sl, [sp, #4]
				ticker = &node[id_insert];
   161b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   161b8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				insert_head = ticker->next;
   161bc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   161c0:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   161c2:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
   161c4:	f8db 3000 	ldr.w	r3, [fp]
   161c8:	930a      	str	r3, [sp, #40]	; 0x28
	ticker->next = TICKER_NULL;
   161ca:	23ff      	movs	r3, #255	; 0xff
   161cc:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   161ce:	8ba2      	ldrh	r2, [r4, #28]
   161d0:	8be3      	ldrh	r3, [r4, #30]
   161d2:	4293      	cmp	r3, r2
   161d4:	d97e      	bls.n	162d4 <ticker_job+0x4ec>
		skip = ticker->lazy_current -
   161d6:	1a9b      	subs	r3, r3, r2
   161d8:	b29b      	uxth	r3, r3
		skip = 0U;
   161da:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_new = &node[id];
   161dc:	fa0f f38a 	sxth.w	r3, sl
   161e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   161e4:	00db      	lsls	r3, r3, #3
   161e6:	9311      	str	r3, [sp, #68]	; 0x44
   161e8:	e0c6      	b.n	16378 <ticker_job+0x590>
				user_op = &user_ops[user_ops_first];
   161ea:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   161ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   161f0:	011b      	lsls	r3, r3, #4
   161f2:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   161f4:	f109 0201 	add.w	r2, r9, #1
   161f8:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
   161fc:	9a05      	ldr	r2, [sp, #20]
   161fe:	7812      	ldrb	r2, [r2, #0]
					first = 0U;
   16200:	454a      	cmp	r2, r9
   16202:	bf08      	it	eq
   16204:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   16208:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1620a:	5cd3      	ldrb	r3, [r2, r3]
   1620c:	2b03      	cmp	r3, #3
   1620e:	d10e      	bne.n	1622e <ticker_job+0x446>
				id_insert = user_op->id;
   16210:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   16214:	9b07      	ldr	r3, [sp, #28]
   16216:	eb0a 048a 	add.w	r4, sl, sl, lsl #2
   1621a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   1621e:	7862      	ldrb	r2, [r4, #1]
   16220:	78a3      	ldrb	r3, [r4, #2]
   16222:	429a      	cmp	r2, r3
   16224:	d008      	beq.n	16238 <ticker_job+0x450>
					ticker_job_op_cb(user_op,
   16226:	2101      	movs	r1, #1
   16228:	4628      	mov	r0, r5
   1622a:	f00b fd3e 	bl	21caa <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   1622e:	9b05      	ldr	r3, [sp, #20]
   16230:	789b      	ldrb	r3, [r3, #2]
   16232:	454b      	cmp	r3, r9
   16234:	d1d9      	bne.n	161ea <ticker_job+0x402>
   16236:	e63e      	b.n	15eb6 <ticker_job+0xce>
	ticker->ticks_periodic = start->ticks_periodic;
   16238:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
   1623a:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   1623e:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   16240:	692b      	ldr	r3, [r5, #16]
   16242:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
   16244:	8aab      	ldrh	r3, [r5, #20]
   16246:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   16248:	69ab      	ldr	r3, [r5, #24]
   1624a:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   1624c:	69eb      	ldr	r3, [r5, #28]
   1624e:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   16250:	6a2b      	ldr	r3, [r5, #32]
   16252:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   16254:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
   16256:	68ab      	ldr	r3, [r5, #8]
   16258:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   1625a:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1625c:	686a      	ldr	r2, [r5, #4]
   1625e:	4620      	mov	r0, r4
   16260:	f00b fd05 	bl	21c6e <ticks_to_expire_prep>
	ticker->force = 1U;
   16264:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
   16266:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   16268:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1U;
   1626a:	70e3      	strb	r3, [r4, #3]
   1626c:	e7aa      	b.n	161c4 <ticker_job+0x3dc>
   1626e:	bf00      	nop
   16270:	ff172b5a 	.word	0xff172b5a
   16274:	7f172b59 	.word	0x7f172b59
   16278:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
   1627c:	6860      	ldr	r0, [r4, #4]
   1627e:	2800      	cmp	r0, #0
   16280:	f000 80c3 	beq.w	1640a <ticker_job+0x622>
	ticker->remainder_current += ticker->remainder_periodic;
   16284:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   16288:	4bb3      	ldr	r3, [pc, #716]	; (16558 <ticker_job+0x770>)
	ticker->remainder_current += ticker->remainder_periodic;
   1628a:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   1628c:	49b3      	ldr	r1, [pc, #716]	; (1655c <ticker_job+0x774>)
   1628e:	18d3      	adds	r3, r2, r3
   16290:	428b      	cmp	r3, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16292:	bf9c      	itt	ls
   16294:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   16298:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
   1629c:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   1629e:	bf8b      	itete	hi
   162a0:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   162a2:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
   162a6:	2200      	movhi	r2, #0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   162a8:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
   162aa:	4403      	add	r3, r0
		return 1;
   162ac:	bf98      	it	ls
   162ae:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
   162b0:	4413      	add	r3, r2
			ticker->lazy_current++;
   162b2:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
   162b4:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
   162b6:	3201      	adds	r2, #1
   162b8:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
   162ba:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
   162bc:	4293      	cmp	r3, r2
   162be:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
   162c2:	bf89      	itett	hi
   162c4:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
   162c6:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
   162c8:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0U;
   162ca:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
   162cc:	bf9c      	itt	ls
   162ce:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0U;
   162d0:	60a1      	strls	r1, [r4, #8]
   162d2:	e051      	b.n	16378 <ticker_job+0x590>
		skip = 0U;
   162d4:	2300      	movs	r3, #0
   162d6:	e780      	b.n	161da <ticker_job+0x3f2>
		if (ticker_current->ticks_slot != 0) {
   162d8:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
   162da:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
   162dc:	b946      	cbnz	r6, 162f0 <ticker_job+0x508>
			if (ticks_slot_previous > ticks_to_expire_current) {
   162de:	4560      	cmp	r0, ip
   162e0:	d201      	bcs.n	162e6 <ticker_job+0x4fe>
				ticks_slot_previous -= ticks_to_expire_current;
   162e2:	ebac 0600 	sub.w	r6, ip, r0
		current = ticker_current->next;
   162e6:	9308      	str	r3, [sp, #32]
   162e8:	46b4      	mov	ip, r6
   162ea:	f812 303e 	ldrb.w	r3, [r2, lr, lsl #3]
   162ee:	e050      	b.n	16392 <ticker_job+0x5aa>
		if (ticker_current->ticks_slot != 0) {
   162f0:	461f      	mov	r7, r3
   162f2:	e7f8      	b.n	162e6 <ticker_job+0x4fe>
		ticker = &node[ticker_id_head];
   162f4:	b230      	sxth	r0, r6
   162f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   162fa:	900f      	str	r0, [sp, #60]	; 0x3c
   162fc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   16300:	900d      	str	r0, [sp, #52]	; 0x34
		ticks_to_expire = ticker->ticks_to_expire;
   16302:	6880      	ldr	r0, [r0, #8]
   16304:	900e      	str	r0, [sp, #56]	; 0x38
		if (ticks_slot <= ticks_to_expire) {
   16306:	4570      	cmp	r0, lr
   16308:	d20a      	bcs.n	16320 <ticker_job+0x538>
		if (ticker->ticks_slot) {
   1630a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1630c:	6980      	ldr	r0, [r0, #24]
   1630e:	2800      	cmp	r0, #0
   16310:	d150      	bne.n	163b4 <ticker_job+0x5cc>
		ticks_slot -= ticks_to_expire;
   16312:	980e      	ldr	r0, [sp, #56]	; 0x38
   16314:	ebae 0e00 	sub.w	lr, lr, r0
		ticker_id_head = ticker->next;
   16318:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1631a:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
   1631e:	e047      	b.n	163b0 <ticker_job+0x5c8>
			return TICKER_NULL;
   16320:	26ff      	movs	r6, #255	; 0xff
   16322:	e047      	b.n	163b4 <ticker_job+0x5cc>
	while (id_insert !=
   16324:	45ba      	cmp	sl, r7
   16326:	d065      	beq.n	163f4 <ticker_job+0x60c>
		if (id_collide != TICKER_NULL) {
   16328:	2fff      	cmp	r7, #255	; 0xff
   1632a:	d0a7      	beq.n	1627c <ticker_job+0x494>
   1632c:	463e      	mov	r6, r7
			struct ticker_node *ticker_collide = &node[id_collide];
   1632e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16330:	fa0f f886 	sxth.w	r8, r6
   16334:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   16338:	eb03 07c8 	add.w	r7, r3, r8, lsl #3
			if (ticker_collide->lazy_current >
   1633c:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
   1633e:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
   16340:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
   16342:	bf88      	it	hi
   16344:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
   16346:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
   16348:	bf8c      	ite	hi
   1634a:	b29b      	uxthhi	r3, r3
				skip_collide = 0U;
   1634c:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
   1634e:	2a00      	cmp	r2, #0
   16350:	d094      	beq.n	1627c <ticker_job+0x494>
   16352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16354:	4293      	cmp	r3, r2
   16356:	d891      	bhi.n	1627c <ticker_job+0x494>
			    skip_collide <= skip &&
   16358:	78fa      	ldrb	r2, [r7, #3]
   1635a:	78e3      	ldrb	r3, [r4, #3]
   1635c:	429a      	cmp	r2, r3
   1635e:	d28d      	bcs.n	1627c <ticker_job+0x494>
					ticker_dequeue(instance, id_collide);
   16360:	4631      	mov	r1, r6
   16362:	4658      	mov	r0, fp
   16364:	f00b fc58 	bl	21c18 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
   16368:	78bb      	ldrb	r3, [r7, #2]
   1636a:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
   1636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1636e:	9a01      	ldr	r2, [sp, #4]
				ticker_collide->ticks_to_expire =
   16370:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
   16372:	f803 2038 	strb.w	r2, [r3, r8, lsl #3]
   16376:	9601      	str	r6, [sp, #4]
	ticker_new = &node[id];
   16378:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
   1637a:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
   1637e:	f8db c018 	ldr.w	ip, [fp, #24]
	ticker_new = &node[id];
   16382:	eb02 0803 	add.w	r8, r2, r3
	current = instance->ticker_id_head;
   16386:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
   1638a:	f8d8 1008 	ldr.w	r1, [r8, #8]
	previous = current;
   1638e:	9308      	str	r3, [sp, #32]
	collide = ticker_id_slot_previous = TICKER_NULL;
   16390:	27ff      	movs	r7, #255	; 0xff
	while ((current != TICKER_NULL) &&
   16392:	2bff      	cmp	r3, #255	; 0xff
   16394:	d006      	beq.n	163a4 <ticker_job+0x5bc>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   16396:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   1639a:	eb02 06ce 	add.w	r6, r2, lr, lsl #3
		(ticks_to_expire_current =
   1639e:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
   163a0:	4281      	cmp	r1, r0
   163a2:	d899      	bhi.n	162d8 <ticker_job+0x4f0>
				     ticks_to_expire + ticker_new->ticks_slot);
   163a4:	f8d8 0018 	ldr.w	r0, [r8, #24]
   163a8:	900c      	str	r0, [sp, #48]	; 0x30
	collide = ticker_by_slot_get(&node[0], current,
   163aa:	eb01 0e00 	add.w	lr, r1, r0
   163ae:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
   163b0:	2eff      	cmp	r6, #255	; 0xff
   163b2:	d19f      	bne.n	162f4 <ticker_job+0x50c>
	if ((ticker_new->ticks_slot == 0) ||
   163b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   163b6:	b120      	cbz	r0, 163c2 <ticker_job+0x5da>
   163b8:	4561      	cmp	r1, ip
   163ba:	d3b3      	bcc.n	16324 <ticker_job+0x53c>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   163bc:	2eff      	cmp	r6, #255	; 0xff
   163be:	f040 80d5 	bne.w	1656c <ticker_job+0x784>
		if (previous == current) {
   163c2:	9808      	ldr	r0, [sp, #32]
		ticker_new->ticks_to_expire = ticks_to_expire;
   163c4:	f8c8 1008 	str.w	r1, [r8, #8]
		if (previous == current) {
   163c8:	4283      	cmp	r3, r0
			node[previous].next = id;
   163ca:	bf18      	it	ne
   163cc:	f9bd 0020 	ldrshne.w	r0, [sp, #32]
		ticker_new->next = current;
   163d0:	f888 3000 	strb.w	r3, [r8]
			node[previous].next = id;
   163d4:	bf16      	itet	ne
   163d6:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
   163da:	f88b a01d 	strbeq.w	sl, [fp, #29]
			node[previous].next = id;
   163de:	f802 a030 	strbne.w	sl, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
   163e2:	2bff      	cmp	r3, #255	; 0xff
   163e4:	d006      	beq.n	163f4 <ticker_job+0x60c>
			node[current].ticks_to_expire -= ticks_to_expire;
   163e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   163ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   163ee:	689a      	ldr	r2, [r3, #8]
   163f0:	1a51      	subs	r1, r2, r1
   163f2:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
   163f4:	78a3      	ldrb	r3, [r4, #2]
   163f6:	3301      	adds	r3, #1
   163f8:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   163fa:	2100      	movs	r1, #0
			if (user_op) {
   163fc:	2d00      	cmp	r5, #0
   163fe:	f43f aed1 	beq.w	161a4 <ticker_job+0x3bc>
				ticker_job_op_cb(user_op, status);
   16402:	4628      	mov	r0, r5
   16404:	f00b fc51 	bl	21caa <ticker_job_op_cb>
   16408:	e6cc      	b.n	161a4 <ticker_job+0x3bc>
			return TICKER_STATUS_FAILURE;
   1640a:	2101      	movs	r1, #1
   1640c:	e7f6      	b.n	163fc <ticker_job+0x614>
	users = &instance->user[0];
   1640e:	f8db 3004 	ldr.w	r3, [fp, #4]
   16412:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   16414:	f89b 4009 	ldrb.w	r4, [fp, #9]
		uop->status = TICKER_STATUS_SUCCESS;
   16418:	9b06      	ldr	r3, [sp, #24]
   1641a:	9302      	str	r3, [sp, #8]
	while (count_user--) {
   1641c:	3c01      	subs	r4, #1
   1641e:	b2e4      	uxtb	r4, r4
   16420:	2cff      	cmp	r4, #255	; 0xff
   16422:	f43f ad5b 	beq.w	15edc <ticker_job+0xf4>
		user = &users[count_user];
   16426:	9b01      	ldr	r3, [sp, #4]
   16428:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
   1642c:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
   1642e:	786b      	ldrb	r3, [r5, #1]
   16430:	78ea      	ldrb	r2, [r5, #3]
   16432:	429a      	cmp	r2, r3
   16434:	d0f2      	beq.n	1641c <ticker_job+0x634>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   16436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1643a:	011a      	lsls	r2, r3, #4
   1643c:	18b3      	adds	r3, r6, r2
	switch (uop->op) {
   1643e:	5cb2      	ldrb	r2, [r6, r2]
   16440:	2a01      	cmp	r2, #1
   16442:	d024      	beq.n	1648e <ticker_job+0x6a6>
   16444:	2a02      	cmp	r2, #2
   16446:	d129      	bne.n	1649c <ticker_job+0x6b4>
		ticker_by_next_slot_get(instance,
   16448:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   1644c:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   16450:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->node;
   16454:	f8db c000 	ldr.w	ip, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   16458:	f8db 1014 	ldr.w	r1, [fp, #20]
   1645c:	2aff      	cmp	r2, #255	; 0xff
   1645e:	d002      	beq.n	16466 <ticker_job+0x67e>
   16460:	6807      	ldr	r7, [r0, #0]
   16462:	428f      	cmp	r7, r1
   16464:	d023      	beq.n	164ae <ticker_job+0x6c6>
		_ticker_id_head = instance->ticker_id_head;
   16466:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   1646a:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   1646c:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   1646e:	2aff      	cmp	r2, #255	; 0xff
   16470:	d009      	beq.n	16486 <ticker_job+0x69e>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   16472:	eb02 0882 	add.w	r8, r2, r2, lsl #2
   16476:	eb0c 0ac8 	add.w	sl, ip, r8, lsl #3
   1647a:	f8da 0008 	ldr.w	r0, [sl, #8]
   1647e:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   16480:	f8da 0018 	ldr.w	r0, [sl, #24]
   16484:	b1d0      	cbz	r0, 164bc <ticker_job+0x6d4>
	*ticker_id_head = _ticker_id_head;
   16486:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   1648a:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   1648e:	9a02      	ldr	r2, [sp, #8]
   16490:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
   16492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
   16494:	b112      	cbz	r2, 1649c <ticker_job+0x6b4>
		fp_op_func(uop->status, uop->op_context);
   16496:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   16498:	2000      	movs	r0, #0
   1649a:	4790      	blx	r2
			first = user->first + 1;
   1649c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
   1649e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
   164a0:	3301      	adds	r3, #1
   164a2:	b2db      	uxtb	r3, r3
				first = 0U;
   164a4:	429a      	cmp	r2, r3
   164a6:	bf08      	it	eq
   164a8:	2300      	moveq	r3, #0
			user->first = first;
   164aa:	706b      	strb	r3, [r5, #1]
   164ac:	e7bf      	b.n	1642e <ticker_job+0x646>
		ticker = &node[_ticker_id_head];
   164ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
   164b2:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   164b6:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
   164ba:	e7d8      	b.n	1646e <ticker_job+0x686>
		_ticker_id_head = ticker->next;
   164bc:	f81c 2038 	ldrb.w	r2, [ip, r8, lsl #3]
   164c0:	e7d5      	b.n	1646e <ticker_job+0x686>
	if (ticker_id_old_head == TICKER_NULL) {
   164c2:	9b04      	ldr	r3, [sp, #16]
   164c4:	2bff      	cmp	r3, #255	; 0xff
   164c6:	d107      	bne.n	164d8 <ticker_job+0x6f0>
		ticks_current = cntr_cnt_get();
   164c8:	f003 fe24 	bl	1a114 <cntr_cnt_get>
   164cc:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   164ce:	f003 fde7 	bl	1a0a0 <cntr_start>
   164d2:	b908      	cbnz	r0, 164d8 <ticker_job+0x6f0>
			instance->ticks_current = ticks_current;
   164d4:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
   164d8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   164dc:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
   164e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
   164e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   164e8:	260a      	movs	r6, #10
   164ea:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
   164ec:	f003 fe12 	bl	1a114 <cntr_cnt_get>
		cc = instance->ticks_current;
   164f0:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   164f4:	1b03      	subs	r3, r0, r4
   164f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   164fa:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   164fc:	42ab      	cmp	r3, r5
   164fe:	bf2c      	ite	cs
   16500:	18e4      	addcs	r4, r4, r3
   16502:	1964      	addcc	r4, r4, r5
		cc &= HAL_TICKER_CNTR_MASK;
   16504:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   16508:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
   1650a:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   1650e:	4620      	mov	r0, r4
   16510:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   16512:	f003 fdff 	bl	1a114 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16516:	1bc0      	subs	r0, r0, r7
   16518:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1651c:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1651e:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16520:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   16524:	42a0      	cmp	r0, r4
   16526:	f67f ace8 	bls.w	15efa <ticker_job+0x112>
		LL_ASSERT(i);
   1652a:	3e01      	subs	r6, #1
   1652c:	d1de      	bne.n	164ec <ticker_job+0x704>
   1652e:	2301      	movs	r3, #1
   16530:	f04f 0100 	mov.w	r1, #0
   16534:	4a0a      	ldr	r2, [pc, #40]	; (16560 <ticker_job+0x778>)
   16536:	480b      	ldr	r0, [pc, #44]	; (16564 <ticker_job+0x77c>)
   16538:	f363 0107 	bfi	r1, r3, #0, #8
   1653c:	4b0a      	ldr	r3, [pc, #40]	; (16568 <ticker_job+0x780>)
   1653e:	1a9b      	subs	r3, r3, r2
   16540:	08db      	lsrs	r3, r3, #3
   16542:	f363 118f 	bfi	r1, r3, #6, #10
   16546:	f007 ff7c 	bl	1e442 <log_0>
   1654a:	4040      	eors	r0, r0
   1654c:	f380 8811 	msr	BASEPRI, r0
   16550:	f04f 0004 	mov.w	r0, #4
   16554:	df02      	svc	2
   16556:	bf00      	nop
   16558:	ff172b5a 	.word	0xff172b5a
   1655c:	7f172b59 	.word	0x7f172b59
   16560:	000233ec 	.word	0x000233ec
   16564:	000281c5 	.word	0x000281c5
   16568:	0002344c 	.word	0x0002344c
	while (id_insert !=
   1656c:	45b2      	cmp	sl, r6
   1656e:	f47f aede 	bne.w	1632e <ticker_job+0x546>
   16572:	e73f      	b.n	163f4 <ticker_job+0x60c>
}
   16574:	b013      	add	sp, #76	; 0x4c
   16576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1657a:	bf00      	nop

0001657c <ticker_init>:
{
   1657c:	b570      	push	{r4, r5, r6, lr}
   1657e:	9d04      	ldr	r5, [sp, #16]
   16580:	f89d 4014 	ldrb.w	r4, [sp, #20]
   16584:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   16586:	b108      	cbz	r0, 1658c <ticker_init+0x10>
		return TICKER_STATUS_FAILURE;
   16588:	2001      	movs	r0, #1
}
   1658a:	bd70      	pop	{r4, r5, r6, pc}
	instance->count_node = count_node;
   1658c:	4813      	ldr	r0, [pc, #76]	; (165dc <ticker_init+0x60>)
	instance->node = node;
   1658e:	6002      	str	r2, [r0, #0]
	instance->count_node = count_node;
   16590:	7201      	strb	r1, [r0, #8]
	instance->count_user = count_user;
   16592:	7243      	strb	r3, [r0, #9]
	instance->user = user;
   16594:	6045      	str	r5, [r0, #4]
	while (count_user--) {
   16596:	4602      	mov	r2, r0
   16598:	3b01      	subs	r3, #1
   1659a:	b2db      	uxtb	r3, r3
   1659c:	2bff      	cmp	r3, #255	; 0xff
   1659e:	d10f      	bne.n	165c0 <ticker_init+0x44>
	if (count_op) {
   165a0:	2c00      	cmp	r4, #0
   165a2:	d1f1      	bne.n	16588 <ticker_init+0xc>
	instance->caller_id_get_cb = caller_id_get_cb;
   165a4:	9b07      	ldr	r3, [sp, #28]
   165a6:	6213      	str	r3, [r2, #32]
	instance->sched_cb = sched_cb;
   165a8:	9b08      	ldr	r3, [sp, #32]
   165aa:	6253      	str	r3, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   165ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   165ae:	6293      	str	r3, [r2, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   165b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   165b4:	e9c2 4405 	strd	r4, r4, [r2, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   165b8:	8393      	strh	r3, [r2, #28]
	instance->ticks_elapsed_first = 0U;
   165ba:	8154      	strh	r4, [r2, #10]
	return TICKER_STATUS_SUCCESS;
   165bc:	4620      	mov	r0, r4
   165be:	e7e4      	b.n	1658a <ticker_init+0xe>
		users[count_user].user_op = user_op_;
   165c0:	b219      	sxth	r1, r3
   165c2:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   165c6:	6046      	str	r6, [r0, #4]
		user_op_ += users[count_user].count_user_op;
   165c8:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   165cc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
   165d0:	1a20      	subs	r0, r4, r0
		user_op_ += users[count_user].count_user_op;
   165d2:	eb06 1601 	add.w	r6, r6, r1, lsl #4
		count_op -= users[count_user].count_user_op;
   165d6:	b2c4      	uxtb	r4, r0
   165d8:	e7de      	b.n	16598 <ticker_init+0x1c>
   165da:	bf00      	nop
   165dc:	20000c60 	.word	0x20000c60

000165e0 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   165e0:	4a04      	ldr	r2, [pc, #16]	; (165f4 <ticker_is_initialized+0x14>)
   165e2:	232c      	movs	r3, #44	; 0x2c
   165e4:	fb03 2000 	mla	r0, r3, r0, r2
   165e8:	7a00      	ldrb	r0, [r0, #8]
}
   165ea:	3000      	adds	r0, #0
   165ec:	bf18      	it	ne
   165ee:	2001      	movne	r0, #1
   165f0:	4770      	bx	lr
   165f2:	bf00      	nop
   165f4:	20000c60 	.word	0x20000c60

000165f8 <ticker_trigger>:
	if (instance->sched_cb) {
   165f8:	4a07      	ldr	r2, [pc, #28]	; (16618 <ticker_trigger+0x20>)
   165fa:	232c      	movs	r3, #44	; 0x2c
   165fc:	fb03 2100 	mla	r1, r3, r0, r2
{
   16600:	b410      	push	{r4}
	if (instance->sched_cb) {
   16602:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   16604:	b134      	cbz	r4, 16614 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   16606:	460b      	mov	r3, r1
   16608:	46a4      	mov	ip, r4
   1660a:	2201      	movs	r2, #1
   1660c:	2103      	movs	r1, #3
   1660e:	2002      	movs	r0, #2
}
   16610:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   16612:	4760      	bx	ip
}
   16614:	bc10      	pop	{r4}
   16616:	4770      	bx	lr
   16618:	20000c60 	.word	0x20000c60

0001661c <ticker_start>:
{
   1661c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   16620:	4c22      	ldr	r4, [pc, #136]	; (166ac <ticker_start+0x90>)
   16622:	272c      	movs	r7, #44	; 0x2c
   16624:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   16628:	b20d      	sxth	r5, r1
   1662a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1662e:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   16632:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   16636:	f89c 4003 	ldrb.w	r4, [ip, #3]
   1663a:	1c66      	adds	r6, r4, #1
   1663c:	b2f6      	uxtb	r6, r6
		last = 0U;
   1663e:	42b0      	cmp	r0, r6
   16640:	bf98      	it	ls
   16642:	2600      	movls	r6, #0
	if (last == user->first) {
   16644:	f89c 0001 	ldrb.w	r0, [ip, #1]
   16648:	42b0      	cmp	r0, r6
   1664a:	d02d      	beq.n	166a8 <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
   1664c:	f8dc 0004 	ldr.w	r0, [ip, #4]
   16650:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16654:	0125      	lsls	r5, r4, #4
   16656:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
   16658:	f04f 0e03 	mov.w	lr, #3
   1665c:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
   16660:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   16662:	9b06      	ldr	r3, [sp, #24]
   16664:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   16666:	9b07      	ldr	r3, [sp, #28]
   16668:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   1666a:	9b08      	ldr	r3, [sp, #32]
   1666c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   1666e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16670:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   16672:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   16676:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   16678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1667a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   1667c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1667e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   16680:	2302      	movs	r3, #2
   16682:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   16684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16686:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   16688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   1668a:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   1668c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   1668e:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16692:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   16696:	4608      	mov	r0, r1
   16698:	4798      	blx	r3
   1669a:	4643      	mov	r3, r8
   1669c:	2200      	movs	r2, #0
   1669e:	2104      	movs	r1, #4
   166a0:	47a8      	blx	r5
	return user_op->status;
   166a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   166a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   166a8:	2001      	movs	r0, #1
   166aa:	e7fb      	b.n	166a4 <ticker_start+0x88>
   166ac:	20000c60 	.word	0x20000c60

000166b0 <ticker_update>:
{
   166b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   166b4:	4c21      	ldr	r4, [pc, #132]	; (1673c <ticker_update+0x8c>)
   166b6:	272c      	movs	r7, #44	; 0x2c
   166b8:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->user[user_id];
   166bc:	b20d      	sxth	r5, r1
   166be:	f8d9 0004 	ldr.w	r0, [r9, #4]
   166c2:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   166c6:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   166ca:	f89c 4003 	ldrb.w	r4, [ip, #3]
   166ce:	1c66      	adds	r6, r4, #1
   166d0:	b2f6      	uxtb	r6, r6
		last = 0U;
   166d2:	42b0      	cmp	r0, r6
   166d4:	bf98      	it	ls
   166d6:	2600      	movls	r6, #0
	if (last == user->first) {
   166d8:	f89c 0001 	ldrb.w	r0, [ip, #1]
   166dc:	42b0      	cmp	r0, r6
   166de:	d02a      	beq.n	16736 <ticker_update+0x86>
	user_op = &user->user_op[user->last];
   166e0:	f8dc 0004 	ldr.w	r0, [ip, #4]
   166e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   166e8:	0125      	lsls	r5, r4, #4
   166ea:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   166ec:	f04f 0804 	mov.w	r8, #4
   166f0:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   166f4:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   166f6:	9b08      	ldr	r3, [sp, #32]
   166f8:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   166fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   166fc:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   166fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16700:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   16702:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   16706:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   16708:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1670c:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
   1670e:	2302      	movs	r3, #2
   16710:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   16712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16714:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   16716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   16718:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   1671a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   1671c:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16720:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   16724:	4608      	mov	r0, r1
   16726:	4798      	blx	r3
   16728:	464b      	mov	r3, r9
   1672a:	2200      	movs	r2, #0
   1672c:	4641      	mov	r1, r8
   1672e:	47a8      	blx	r5
	return user_op->status;
   16730:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   16732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   16736:	2001      	movs	r0, #1
   16738:	e7fb      	b.n	16732 <ticker_update+0x82>
   1673a:	bf00      	nop
   1673c:	20000c60 	.word	0x20000c60

00016740 <ticker_stop>:
{
   16740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   16744:	4c1a      	ldr	r4, [pc, #104]	; (167b0 <ticker_stop+0x70>)
   16746:	262c      	movs	r6, #44	; 0x2c
   16748:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   1674c:	b20f      	sxth	r7, r1
   1674e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   16752:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   16756:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   1675a:	f89c 4003 	ldrb.w	r4, [ip, #3]
   1675e:	1c65      	adds	r5, r4, #1
   16760:	b2ed      	uxtb	r5, r5
		last = 0U;
   16762:	42a8      	cmp	r0, r5
   16764:	bf98      	it	ls
   16766:	2500      	movls	r5, #0
	if (last == user->first) {
   16768:	f89c 0001 	ldrb.w	r0, [ip, #1]
   1676c:	42a8      	cmp	r0, r5
   1676e:	d01c      	beq.n	167aa <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
   16770:	f8dc 0004 	ldr.w	r0, [ip, #4]
   16774:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16778:	0124      	lsls	r4, r4, #4
   1677a:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1677c:	f04f 0e05 	mov.w	lr, #5
   16780:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
   16784:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
   16786:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   16788:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   1678c:	9b06      	ldr	r3, [sp, #24]
   1678e:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   16790:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16794:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   16798:	4608      	mov	r0, r1
   1679a:	4798      	blx	r3
   1679c:	4643      	mov	r3, r8
   1679e:	2200      	movs	r2, #0
   167a0:	2104      	movs	r1, #4
   167a2:	47a0      	blx	r4
	return user_op->status;
   167a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   167a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   167aa:	2001      	movs	r0, #1
   167ac:	e7fb      	b.n	167a6 <ticker_stop+0x66>
   167ae:	bf00      	nop
   167b0:	20000c60 	.word	0x20000c60

000167b4 <ticker_next_slot_get>:
{
   167b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   167b8:	4c1c      	ldr	r4, [pc, #112]	; (1682c <ticker_next_slot_get+0x78>)
   167ba:	272c      	movs	r7, #44	; 0x2c
   167bc:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   167c0:	b20d      	sxth	r5, r1
   167c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   167c6:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   167ca:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   167ce:	f89c 4003 	ldrb.w	r4, [ip, #3]
   167d2:	1c66      	adds	r6, r4, #1
   167d4:	b2f6      	uxtb	r6, r6
		last = 0U;
   167d6:	42b0      	cmp	r0, r6
   167d8:	bf98      	it	ls
   167da:	2600      	movls	r6, #0
	if (last == user->first) {
   167dc:	f89c 0001 	ldrb.w	r0, [ip, #1]
   167e0:	42b0      	cmp	r0, r6
   167e2:	d020      	beq.n	16826 <ticker_next_slot_get+0x72>
	user_op = &user->user_op[user->last];
   167e4:	f8dc 0004 	ldr.w	r0, [ip, #4]
   167e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   167ec:	0124      	lsls	r4, r4, #4
   167ee:	1905      	adds	r5, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   167f0:	f64f 7e02 	movw	lr, #65282	; 0xff02
   167f4:	f820 e004 	strh.w	lr, [r0, r4]
	user_op->params.slot_get.ticks_current = ticks_current;
   167f8:	e9c5 2301 	strd	r2, r3, [r5, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   167fc:	9b06      	ldr	r3, [sp, #24]
   167fe:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   16800:	2302      	movs	r3, #2
   16802:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   16804:	9b07      	ldr	r3, [sp, #28]
   16806:	62ab      	str	r3, [r5, #40]	; 0x28
	user_op->op_context = op_context;
   16808:	9b08      	ldr	r3, [sp, #32]
   1680a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user->last = last;
   1680c:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16810:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   16814:	4608      	mov	r0, r1
   16816:	4798      	blx	r3
   16818:	4643      	mov	r3, r8
   1681a:	2200      	movs	r2, #0
   1681c:	2104      	movs	r1, #4
   1681e:	47a0      	blx	r4
	return user_op->status;
   16820:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   16822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   16826:	2001      	movs	r0, #1
   16828:	e7fb      	b.n	16822 <ticker_next_slot_get+0x6e>
   1682a:	bf00      	nop
   1682c:	20000c60 	.word	0x20000c60

00016830 <ticker_job_idle_get>:
{
   16830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   16834:	4c19      	ldr	r4, [pc, #100]	; (1689c <ticker_job_idle_get+0x6c>)
   16836:	262c      	movs	r6, #44	; 0x2c
   16838:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   1683c:	b20f      	sxth	r7, r1
   1683e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   16842:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   16846:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   1684a:	f89c 4003 	ldrb.w	r4, [ip, #3]
   1684e:	1c65      	adds	r5, r4, #1
   16850:	b2ed      	uxtb	r5, r5
		last = 0U;
   16852:	42a8      	cmp	r0, r5
   16854:	bf98      	it	ls
   16856:	2500      	movls	r5, #0
	if (last == user->first) {
   16858:	f89c 0001 	ldrb.w	r0, [ip, #1]
   1685c:	42a8      	cmp	r0, r5
   1685e:	d01a      	beq.n	16896 <ticker_job_idle_get+0x66>
	user_op = &user->user_op[user->last];
   16860:	f8dc 0004 	ldr.w	r0, [ip, #4]
   16864:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   16868:	0124      	lsls	r4, r4, #4
   1686a:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   1686c:	f64f 7e01 	movw	lr, #65281	; 0xff01
   16870:	f820 e004 	strh.w	lr, [r0, r4]
	user_op->status = TICKER_STATUS_BUSY;
   16874:	2002      	movs	r0, #2
	user_op->fp_op_func = fp_op_func;
   16876:	e9c7 0209 	strd	r0, r2, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   1687a:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   1687c:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   16880:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   16884:	4608      	mov	r0, r1
   16886:	4798      	blx	r3
   16888:	4643      	mov	r3, r8
   1688a:	2200      	movs	r2, #0
   1688c:	2104      	movs	r1, #4
   1688e:	47a0      	blx	r4
	return user_op->status;
   16890:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   16892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   16896:	2001      	movs	r0, #1
   16898:	e7fb      	b.n	16892 <ticker_job_idle_get+0x62>
   1689a:	bf00      	nop
   1689c:	20000c60 	.word	0x20000c60

000168a0 <ticker_job_sched>:
{
   168a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   168a4:	4c08      	ldr	r4, [pc, #32]	; (168c8 <ticker_job_sched+0x28>)
   168a6:	252c      	movs	r5, #44	; 0x2c
   168a8:	fb05 4300 	mla	r3, r5, r0, r4
   168ac:	e9d3 3708 	ldrd	r3, r7, [r3, #32]
{
   168b0:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   168b2:	4608      	mov	r0, r1
   168b4:	4798      	blx	r3
   168b6:	fb06 4305 	mla	r3, r6, r5, r4
   168ba:	46bc      	mov	ip, r7
   168bc:	2200      	movs	r2, #0
   168be:	2104      	movs	r1, #4
}
   168c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   168c4:	4760      	bx	ip
   168c6:	bf00      	nop
   168c8:	20000c60 	.word	0x20000c60

000168cc <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   168cc:	b508      	push	{r3, lr}
   168ce:	4603      	mov	r3, r0
	if (addr_type > 1) {
   168d0:	2b01      	cmp	r3, #1
{
   168d2:	4608      	mov	r0, r1
	if (addr_type > 1) {
   168d4:	d80e      	bhi.n	168f4 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
   168d6:	b133      	cbz	r3, 168e6 <ll_addr_get+0x1a>
		if (bdaddr) {
   168d8:	b119      	cbz	r1, 168e2 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   168da:	2206      	movs	r2, #6
   168dc:	4906      	ldr	r1, [pc, #24]	; (168f8 <ll_addr_get+0x2c>)
   168de:	f008 fe93 	bl	1f608 <memcpy>
		}

		return rnd_addr;
   168e2:	4805      	ldr	r0, [pc, #20]	; (168f8 <ll_addr_get+0x2c>)
   168e4:	e007      	b.n	168f6 <ll_addr_get+0x2a>
	}

	if (bdaddr) {
   168e6:	b119      	cbz	r1, 168f0 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   168e8:	2206      	movs	r2, #6
   168ea:	4904      	ldr	r1, [pc, #16]	; (168fc <ll_addr_get+0x30>)
   168ec:	f008 fe8c 	bl	1f608 <memcpy>
	}

	return pub_addr;
   168f0:	4802      	ldr	r0, [pc, #8]	; (168fc <ll_addr_get+0x30>)
   168f2:	e000      	b.n	168f6 <ll_addr_get+0x2a>
		return NULL;
   168f4:	2000      	movs	r0, #0
}
   168f6:	bd08      	pop	{r3, pc}
   168f8:	20002301 	.word	0x20002301
   168fc:	200022fb 	.word	0x200022fb

00016900 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   16900:	b570      	push	{r4, r5, r6, lr}
   16902:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
   16904:	2000      	movs	r0, #0
{
   16906:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
   16908:	f002 fe90 	bl	1962c <ll_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   1690c:	b110      	cbz	r0, 16914 <ll_addr_set+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1690e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   16910:	4620      	mov	r0, r4
   16912:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   16914:	f002 fea0 	bl	19658 <ll_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   16918:	f010 0406 	ands.w	r4, r0, #6
   1691c:	d1f7      	bne.n	1690e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1691e:	2206      	movs	r2, #6
   16920:	4629      	mov	r1, r5
	if (addr_type) {
   16922:	b11e      	cbz	r6, 1692c <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   16924:	4802      	ldr	r0, [pc, #8]	; (16930 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   16926:	f008 fe6f 	bl	1f608 <memcpy>
   1692a:	e7f1      	b.n	16910 <ll_addr_set+0x10>
   1692c:	4801      	ldr	r0, [pc, #4]	; (16934 <ll_addr_set+0x34>)
   1692e:	e7fa      	b.n	16926 <ll_addr_set+0x26>
   16930:	20002301 	.word	0x20002301
   16934:	200022fb 	.word	0x200022fb

00016938 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
   16938:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1693a:	4802      	ldr	r0, [pc, #8]	; (16944 <_hci_driver_init+0xc>)
   1693c:	f7f1 fb7e 	bl	803c <bt_hci_driver_register>

	return 0;
}
   16940:	2000      	movs	r0, #0
   16942:	bd08      	pop	{r3, pc}
   16944:	00023f38 	.word	0x00023f38

00016948 <recv_thread>:
{
   16948:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1694a:	4d2a      	ldr	r5, [pc, #168]	; (169f4 <recv_thread+0xac>)
		radio_rx_fc_set(node_rx->hdr.handle, 0);
   1694c:	2600      	movs	r6, #0
   1694e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16952:	4628      	mov	r0, r5
   16954:	f00c f93e 	bl	22bd4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   16958:	4604      	mov	r4, r0
   1695a:	2800      	cmp	r0, #0
   1695c:	d03a      	beq.n	169d4 <recv_thread+0x8c>
	s8_t class = hci_get_class(node_rx);
   1695e:	f00b fa4c 	bl	21dfa <hci_get_class>
	switch (class) {
   16962:	1e03      	subs	r3, r0, #0
   16964:	9401      	str	r4, [sp, #4]
   16966:	db03      	blt.n	16970 <recv_thread+0x28>
   16968:	2b02      	cmp	r3, #2
   1696a:	dd15      	ble.n	16998 <recv_thread+0x50>
   1696c:	2b03      	cmp	r3, #3
   1696e:	d034      	beq.n	169da <recv_thread+0x92>
		LL_ASSERT(0);
   16970:	2301      	movs	r3, #1
   16972:	f04f 0100 	mov.w	r1, #0
   16976:	4a20      	ldr	r2, [pc, #128]	; (169f8 <recv_thread+0xb0>)
   16978:	4820      	ldr	r0, [pc, #128]	; (169fc <recv_thread+0xb4>)
   1697a:	f363 0107 	bfi	r1, r3, #0, #8
   1697e:	4b20      	ldr	r3, [pc, #128]	; (16a00 <recv_thread+0xb8>)
   16980:	1a9b      	subs	r3, r3, r2
   16982:	08db      	lsrs	r3, r3, #3
   16984:	f363 118f 	bfi	r1, r3, #6, #10
   16988:	f007 fd5b 	bl	1e442 <log_0>
   1698c:	4040      	eors	r0, r0
   1698e:	f380 8811 	msr	BASEPRI, r0
   16992:	f04f 0004 	mov.w	r0, #4
   16996:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   16998:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
   1699a:	bf0e      	itee	eq
   1699c:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1699e:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   169a2:	2001      	movne	r0, #1
   169a4:	f7f1 fe9a 	bl	86dc <bt_buf_get_rx>
   169a8:	4604      	mov	r4, r0
		if (buf) {
   169aa:	b118      	cbz	r0, 169b4 <recv_thread+0x6c>
			hci_evt_encode(node_rx, buf);
   169ac:	4601      	mov	r1, r0
   169ae:	9801      	ldr	r0, [sp, #4]
   169b0:	f000 fdd6 	bl	17560 <hci_evt_encode>
		radio_rx_fc_set(node_rx->hdr.handle, 0);
   169b4:	9b01      	ldr	r3, [sp, #4]
   169b6:	2100      	movs	r1, #0
   169b8:	88d8      	ldrh	r0, [r3, #6]
   169ba:	f002 feeb 	bl	19794 <radio_rx_fc_set>
	node_rx->hdr.next = NULL;
   169be:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   169c0:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   169c2:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   169c4:	f002 fea0 	bl	19708 <ll_rx_mem_release>
		if (buf) {
   169c8:	b124      	cbz	r4, 169d4 <recv_thread+0x8c>
			if (buf->len) {
   169ca:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   169cc:	4620      	mov	r0, r4
			if (buf->len) {
   169ce:	b173      	cbz	r3, 169ee <recv_thread+0xa6>
				bt_recv(buf);
   169d0:	f7f1 fa36 	bl	7e40 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   169d4:	f005 fb96 	bl	1c104 <z_impl_k_yield>
   169d8:	e7b9      	b.n	1694e <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   169da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   169de:	f7f1 fe7d 	bl	86dc <bt_buf_get_rx>
   169e2:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   169e4:	4601      	mov	r1, r0
   169e6:	9801      	ldr	r0, [sp, #4]
   169e8:	f000 fd7a 	bl	174e0 <hci_acl_encode>
		break;
   169ec:	e7e2      	b.n	169b4 <recv_thread+0x6c>
				net_buf_unref(buf);
   169ee:	f004 f921 	bl	1ac34 <net_buf_unref>
   169f2:	e7ef      	b.n	169d4 <recv_thread+0x8c>
   169f4:	200080ec 	.word	0x200080ec
   169f8:	000233ec 	.word	0x000233ec
   169fc:	0002822a 	.word	0x0002822a
   16a00:	00023414 	.word	0x00023414

00016a04 <hci_driver_send>:
	if (!buf->len) {
   16a04:	8983      	ldrh	r3, [r0, #12]
{
   16a06:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16a08:	4605      	mov	r5, r0
	if (!buf->len) {
   16a0a:	b993      	cbnz	r3, 16a32 <hci_driver_send+0x2e>
		BT_ERR("Empty HCI packet");
   16a0c:	2301      	movs	r3, #1
   16a0e:	f04f 0100 	mov.w	r1, #0
   16a12:	f363 0107 	bfi	r1, r3, #0, #8
   16a16:	4a1f      	ldr	r2, [pc, #124]	; (16a94 <hci_driver_send+0x90>)
   16a18:	4b1f      	ldr	r3, [pc, #124]	; (16a98 <hci_driver_send+0x94>)
   16a1a:	4820      	ldr	r0, [pc, #128]	; (16a9c <hci_driver_send+0x98>)
   16a1c:	1a9b      	subs	r3, r3, r2
   16a1e:	08db      	lsrs	r3, r3, #3
   16a20:	f363 118f 	bfi	r1, r3, #6, #10
   16a24:	f007 fd0d 	bl	1e442 <log_0>
		return -EINVAL;
   16a28:	f06f 0415 	mvn.w	r4, #21
}
   16a2c:	4620      	mov	r0, r4
   16a2e:	b003      	add	sp, #12
   16a30:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
   16a32:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
   16a34:	b181      	cbz	r1, 16a58 <hci_driver_send+0x54>
   16a36:	2902      	cmp	r1, #2
   16a38:	d11d      	bne.n	16a76 <hci_driver_send+0x72>
	err = hci_acl_handle(buf, &evt);
   16a3a:	a901      	add	r1, sp, #4
   16a3c:	f000 fcb2 	bl	173a4 <hci_acl_handle>
   16a40:	4604      	mov	r4, r0
	if (evt) {
   16a42:	9801      	ldr	r0, [sp, #4]
   16a44:	b108      	cbz	r0, 16a4a <hci_driver_send+0x46>
		bt_recv_prio(evt);
   16a46:	f7f1 faa1 	bl	7f8c <bt_recv_prio>
	if (!err) {
   16a4a:	2c00      	cmp	r4, #0
   16a4c:	d1ee      	bne.n	16a2c <hci_driver_send+0x28>
		net_buf_unref(buf);
   16a4e:	4628      	mov	r0, r5
   16a50:	f004 f8f0 	bl	1ac34 <net_buf_unref>
   16a54:	2400      	movs	r4, #0
   16a56:	e7e9      	b.n	16a2c <hci_driver_send+0x28>
	void *node_rx = NULL;
   16a58:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, &node_rx);
   16a5a:	a901      	add	r1, sp, #4
   16a5c:	f000 f916 	bl	16c8c <hci_cmd_handle>
	if (evt) {
   16a60:	2800      	cmp	r0, #0
   16a62:	d0f4      	beq.n	16a4e <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   16a64:	f7f1 fa92 	bl	7f8c <bt_recv_prio>
		if (node_rx) {
   16a68:	9901      	ldr	r1, [sp, #4]
   16a6a:	2900      	cmp	r1, #0
   16a6c:	d0ef      	beq.n	16a4e <hci_driver_send+0x4a>
			k_fifo_put(&recv_fifo, node_rx);
   16a6e:	480c      	ldr	r0, [pc, #48]	; (16aa0 <hci_driver_send+0x9c>)
   16a70:	f00c f889 	bl	22b86 <k_queue_append>
	if (!err) {
   16a74:	e7eb      	b.n	16a4e <hci_driver_send+0x4a>
		BT_ERR("Unknown HCI type %u", type);
   16a76:	2301      	movs	r3, #1
   16a78:	f04f 0200 	mov.w	r2, #0
   16a7c:	f363 0207 	bfi	r2, r3, #0, #8
   16a80:	4804      	ldr	r0, [pc, #16]	; (16a94 <hci_driver_send+0x90>)
   16a82:	4b05      	ldr	r3, [pc, #20]	; (16a98 <hci_driver_send+0x94>)
   16a84:	1a1b      	subs	r3, r3, r0
   16a86:	08db      	lsrs	r3, r3, #3
   16a88:	f363 128f 	bfi	r2, r3, #6, #10
   16a8c:	4805      	ldr	r0, [pc, #20]	; (16aa4 <hci_driver_send+0xa0>)
   16a8e:	f007 fce5 	bl	1e45c <log_1>
   16a92:	e7c9      	b.n	16a28 <hci_driver_send+0x24>
   16a94:	000233ec 	.word	0x000233ec
   16a98:	00023414 	.word	0x00023414
   16a9c:	00028205 	.word	0x00028205
   16aa0:	200080ec 	.word	0x200080ec
   16aa4:	00028216 	.word	0x00028216

00016aa8 <prio_recv_thread>:
{
   16aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   16aaa:	4d14      	ldr	r5, [pc, #80]	; (16afc <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
   16aac:	4e14      	ldr	r6, [pc, #80]	; (16b00 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
   16aae:	f10d 0102 	add.w	r1, sp, #2
   16ab2:	a801      	add	r0, sp, #4
   16ab4:	f002 fdf4 	bl	196a0 <ll_rx_get>
   16ab8:	4604      	mov	r4, r0
   16aba:	b940      	cbnz	r0, 16ace <prio_recv_thread+0x26>
		if (node_rx) {
   16abc:	9b01      	ldr	r3, [sp, #4]
   16abe:	b1bb      	cbz	r3, 16af0 <prio_recv_thread+0x48>
			ll_rx_dequeue();
   16ac0:	f002 ff94 	bl	199ec <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
   16ac4:	9901      	ldr	r1, [sp, #4]
   16ac6:	4630      	mov	r0, r6
   16ac8:	f00c f85d 	bl	22b86 <k_queue_append>
			continue;
   16acc:	e7ef      	b.n	16aae <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   16ace:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16ad2:	2001      	movs	r0, #1
   16ad4:	f7f1 fe02 	bl	86dc <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   16ad8:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   16ada:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   16adc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   16ae0:	f00b f977 	bl	21dd2 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   16ae4:	4638      	mov	r0, r7
   16ae6:	f7f1 fa51 	bl	7f8c <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   16aea:	f005 fb0b 	bl	1c104 <z_impl_k_yield>
   16aee:	e7de      	b.n	16aae <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   16af0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16af4:	4628      	mov	r0, r5
   16af6:	f005 fbe1 	bl	1c2bc <z_impl_k_sem_take>
		BT_DBG("sem taken");
   16afa:	e7d8      	b.n	16aae <prio_recv_thread+0x6>
   16afc:	2000809c 	.word	0x2000809c
   16b00:	200080ec 	.word	0x200080ec

00016b04 <hci_driver_open>:
{
   16b04:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
   16b06:	4820      	ldr	r0, [pc, #128]	; (16b88 <hci_driver_open+0x84>)
{
   16b08:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
   16b0a:	f003 f845 	bl	19b98 <ll_init>
	if (err) {
   16b0e:	4604      	mov	r4, r0
   16b10:	b188      	cbz	r0, 16b36 <hci_driver_open+0x32>
		BT_ERR("LL initialization failed: %u", err);
   16b12:	2301      	movs	r3, #1
   16b14:	f04f 0200 	mov.w	r2, #0
   16b18:	f363 0207 	bfi	r2, r3, #0, #8
   16b1c:	491b      	ldr	r1, [pc, #108]	; (16b8c <hci_driver_open+0x88>)
   16b1e:	4b1c      	ldr	r3, [pc, #112]	; (16b90 <hci_driver_open+0x8c>)
   16b20:	1a5b      	subs	r3, r3, r1
   16b22:	08db      	lsrs	r3, r3, #3
   16b24:	4601      	mov	r1, r0
   16b26:	f363 128f 	bfi	r2, r3, #6, #10
   16b2a:	481a      	ldr	r0, [pc, #104]	; (16b94 <hci_driver_open+0x90>)
   16b2c:	f007 fc96 	bl	1e45c <log_1>
}
   16b30:	4620      	mov	r0, r4
   16b32:	b006      	add	sp, #24
   16b34:	bd10      	pop	{r4, pc}
	hci_init(NULL);
   16b36:	f000 fecf 	bl	178d8 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   16b3a:	f06f 0309 	mvn.w	r3, #9
   16b3e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16b42:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   16b46:	4b14      	ldr	r3, [pc, #80]	; (16b98 <hci_driver_open+0x94>)
   16b48:	4914      	ldr	r1, [pc, #80]	; (16b9c <hci_driver_open+0x98>)
   16b4a:	4815      	ldr	r0, [pc, #84]	; (16ba0 <hci_driver_open+0x9c>)
   16b4c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   16b50:	e9cd 4400 	strd	r4, r4, [sp]
   16b54:	f005 fc3e 	bl	1c3d4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   16b58:	4912      	ldr	r1, [pc, #72]	; (16ba4 <hci_driver_open+0xa0>)
   16b5a:	4811      	ldr	r0, [pc, #68]	; (16ba0 <hci_driver_open+0x9c>)
   16b5c:	f00c f98e 	bl	22e7c <z_impl_k_thread_name_set>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   16b60:	f06f 0307 	mvn.w	r3, #7
   16b64:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16b68:	e9cd 4404 	strd	r4, r4, [sp, #16]
   16b6c:	e9cd 4400 	strd	r4, r4, [sp]
   16b70:	4b0d      	ldr	r3, [pc, #52]	; (16ba8 <hci_driver_open+0xa4>)
   16b72:	490e      	ldr	r1, [pc, #56]	; (16bac <hci_driver_open+0xa8>)
   16b74:	480e      	ldr	r0, [pc, #56]	; (16bb0 <hci_driver_open+0xac>)
   16b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16b7a:	f005 fc2b 	bl	1c3d4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   16b7e:	490d      	ldr	r1, [pc, #52]	; (16bb4 <hci_driver_open+0xb0>)
   16b80:	480b      	ldr	r0, [pc, #44]	; (16bb0 <hci_driver_open+0xac>)
   16b82:	f00c f97b 	bl	22e7c <z_impl_k_thread_name_set>
	return 0;
   16b86:	e7d3      	b.n	16b30 <hci_driver_open+0x2c>
   16b88:	2000809c 	.word	0x2000809c
   16b8c:	000233ec 	.word	0x000233ec
   16b90:	00023414 	.word	0x00023414
   16b94:	000281d8 	.word	0x000281d8
   16b98:	00016aa9 	.word	0x00016aa9
   16b9c:	20003018 	.word	0x20003018
   16ba0:	20000c8c 	.word	0x20000c8c
   16ba4:	000281f5 	.word	0x000281f5
   16ba8:	00016949 	.word	0x00016949
   16bac:	200031d8 	.word	0x200031d8
   16bb0:	20000cf8 	.word	0x20000cf8
   16bb4:	000281ff 	.word	0x000281ff

00016bb8 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
   16bb8:	b538      	push	{r3, r4, r5, lr}
   16bba:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
   16bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16bc0:	f7f1 fd9c 	bl	86fc <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   16bc4:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   16bc6:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   16bc8:	210f      	movs	r1, #15
   16bca:	f00b f8df 	bl	21d8c <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   16bce:	2104      	movs	r1, #4
   16bd0:	f104 0008 	add.w	r0, r4, #8
   16bd4:	f00b fcd9 	bl	2258a <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
   16bd8:	2301      	movs	r3, #1
   16bda:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
   16bdc:	4b02      	ldr	r3, [pc, #8]	; (16be8 <cmd_status+0x30>)
	cs->status = status;
   16bde:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
   16be0:	881b      	ldrh	r3, [r3, #0]
   16be2:	8043      	strh	r3, [r0, #2]

	return buf;
}
   16be4:	4620      	mov	r0, r4
   16be6:	bd38      	pop	{r3, r4, r5, pc}
   16be8:	20001d40 	.word	0x20001d40

00016bec <cmd_complete>:
{
   16bec:	b538      	push	{r3, r4, r5, lr}
   16bee:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   16bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   16bf4:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   16bf6:	f7f1 fd81 	bl	86fc <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   16bfa:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   16bfc:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   16bfe:	b2d2      	uxtb	r2, r2
   16c00:	210e      	movs	r1, #14
   16c02:	f00b f8c3 	bl	21d8c <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
   16c06:	6820      	ldr	r0, [r4, #0]
   16c08:	2103      	movs	r1, #3
   16c0a:	3008      	adds	r0, #8
   16c0c:	f00b fcbd 	bl	2258a <net_buf_simple_add>
	cc->ncmd = 1;
   16c10:	2301      	movs	r3, #1
   16c12:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
   16c14:	4b05      	ldr	r3, [pc, #20]	; (16c2c <cmd_complete+0x40>)
   16c16:	881b      	ldrh	r3, [r3, #0]
   16c18:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
   16c1c:	6820      	ldr	r0, [r4, #0]
   16c1e:	4629      	mov	r1, r5
   16c20:	3008      	adds	r0, #8
}
   16c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   16c26:	f00b bcb0 	b.w	2258a <net_buf_simple_add>
   16c2a:	bf00      	nop
   16c2c:	20001d40 	.word	0x20001d40

00016c30 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
   16c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c32:	4605      	mov	r5, r0
   16c34:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16c36:	4b13      	ldr	r3, [pc, #76]	; (16c84 <le_remote_feat_complete+0x54>)
{
   16c38:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16c3a:	6859      	ldr	r1, [r3, #4]
   16c3c:	2400      	movs	r4, #0
{
   16c3e:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16c40:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   16c44:	4622      	mov	r2, r4
   16c46:	4313      	orrs	r3, r2
   16c48:	d01a      	beq.n	16c80 <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   16c4a:	4b0f      	ldr	r3, [pc, #60]	; (16c88 <le_remote_feat_complete+0x58>)
   16c4c:	6819      	ldr	r1, [r3, #0]
   16c4e:	4623      	mov	r3, r4
   16c50:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   16c54:	4313      	orrs	r3, r2
   16c56:	d013      	beq.n	16c80 <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   16c58:	220b      	movs	r2, #11
   16c5a:	2104      	movs	r1, #4
   16c5c:	f00b f8a0 	bl	21da0 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   16c60:	2208      	movs	r2, #8
	sep->status = status;
   16c62:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   16c64:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   16c68:	3003      	adds	r0, #3
   16c6a:	b925      	cbnz	r5, 16c76 <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
   16c6c:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   16c6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   16c72:	f008 bcc9 	b.w	1f608 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   16c76:	4621      	mov	r1, r4
}
   16c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   16c7c:	f008 bcee 	b.w	1f65c <memset>
}
   16c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c82:	bf00      	nop
   16c84:	20007220 	.word	0x20007220
   16c88:	20007228 	.word	0x20007228

00016c8c <hci_cmd_handle>:
{
   16c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   16c8e:	8983      	ldrh	r3, [r0, #12]
{
   16c90:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   16c92:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   16c94:	2b02      	cmp	r3, #2
{
   16c96:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   16c98:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   16c9a:	d810      	bhi.n	16cbe <hci_cmd_handle+0x32>
		BT_ERR("No HCI Command header");
   16c9c:	2301      	movs	r3, #1
   16c9e:	f04f 0100 	mov.w	r1, #0
   16ca2:	f363 0107 	bfi	r1, r3, #0, #8
   16ca6:	4ac7      	ldr	r2, [pc, #796]	; (16fc4 <hci_cmd_handle+0x338>)
   16ca8:	4bc7      	ldr	r3, [pc, #796]	; (16fc8 <hci_cmd_handle+0x33c>)
   16caa:	48c8      	ldr	r0, [pc, #800]	; (16fcc <hci_cmd_handle+0x340>)
   16cac:	1a9b      	subs	r3, r3, r2
   16cae:	08db      	lsrs	r3, r3, #3
   16cb0:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI CMD packet length");
   16cb4:	f007 fbc5 	bl	1e442 <log_0>
		return NULL;
   16cb8:	4628      	mov	r0, r5
}
   16cba:	b00d      	add	sp, #52	; 0x34
   16cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   16cbe:	2103      	movs	r1, #3
   16cc0:	3008      	adds	r0, #8
   16cc2:	f00b fcd7 	bl	22674 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   16cc6:	89a2      	ldrh	r2, [r4, #12]
   16cc8:	7883      	ldrb	r3, [r0, #2]
   16cca:	429a      	cmp	r2, r3
   16ccc:	d20c      	bcs.n	16ce8 <hci_cmd_handle+0x5c>
		BT_ERR("Invalid HCI CMD packet length");
   16cce:	2301      	movs	r3, #1
   16cd0:	f04f 0100 	mov.w	r1, #0
   16cd4:	f363 0107 	bfi	r1, r3, #0, #8
   16cd8:	4aba      	ldr	r2, [pc, #744]	; (16fc4 <hci_cmd_handle+0x338>)
   16cda:	4bbb      	ldr	r3, [pc, #748]	; (16fc8 <hci_cmd_handle+0x33c>)
   16cdc:	48bc      	ldr	r0, [pc, #752]	; (16fd0 <hci_cmd_handle+0x344>)
   16cde:	1a9b      	subs	r3, r3, r2
   16ce0:	08db      	lsrs	r3, r3, #3
   16ce2:	f363 118f 	bfi	r1, r3, #6, #10
   16ce6:	e7e5      	b.n	16cb4 <hci_cmd_handle+0x28>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   16ce8:	8802      	ldrh	r2, [r0, #0]
   16cea:	49ba      	ldr	r1, [pc, #744]	; (16fd4 <hci_cmd_handle+0x348>)
   16cec:	b293      	uxth	r3, r2
   16cee:	800a      	strh	r2, [r1, #0]
	ocf = BT_OCF(_opcode);
   16cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   16cf4:	0a9b      	lsrs	r3, r3, #10
   16cf6:	2b04      	cmp	r3, #4
   16cf8:	d07a      	beq.n	16df0 <hci_cmd_handle+0x164>
   16cfa:	d809      	bhi.n	16d10 <hci_cmd_handle+0x84>
   16cfc:	2b01      	cmp	r3, #1
   16cfe:	d027      	beq.n	16d50 <hci_cmd_handle+0xc4>
   16d00:	2b03      	cmp	r3, #3
   16d02:	d037      	beq.n	16d74 <hci_cmd_handle+0xe8>
		ccst = cmd_complete(&evt, sizeof(*ccst));
   16d04:	2101      	movs	r1, #1
   16d06:	a805      	add	r0, sp, #20
   16d08:	f7ff ff70 	bl	16bec <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   16d0c:	2301      	movs	r3, #1
   16d0e:	e04c      	b.n	16daa <hci_cmd_handle+0x11e>
	switch (BT_OGF(_opcode)) {
   16d10:	2b08      	cmp	r3, #8
   16d12:	f000 80f8 	beq.w	16f06 <hci_cmd_handle+0x27a>
   16d16:	2b3f      	cmp	r3, #63	; 0x3f
   16d18:	d1f4      	bne.n	16d04 <hci_cmd_handle+0x78>
	switch (ocf) {
   16d1a:	3a01      	subs	r2, #1
   16d1c:	2a09      	cmp	r2, #9
   16d1e:	d8f1      	bhi.n	16d04 <hci_cmd_handle+0x78>
   16d20:	a301      	add	r3, pc, #4	; (adr r3, 16d28 <hci_cmd_handle+0x9c>)
   16d22:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   16d26:	bf00      	nop
   16d28:	000171b7 	.word	0x000171b7
   16d2c:	000171e3 	.word	0x000171e3
   16d30:	0001720b 	.word	0x0001720b
   16d34:	00016d05 	.word	0x00016d05
   16d38:	00016d05 	.word	0x00016d05
   16d3c:	00017257 	.word	0x00017257
   16d40:	00016d05 	.word	0x00016d05
   16d44:	00017221 	.word	0x00017221
   16d48:	00017261 	.word	0x00017261
   16d4c:	000172cd 	.word	0x000172cd
	switch (ocf) {
   16d50:	2a06      	cmp	r2, #6
   16d52:	d006      	beq.n	16d62 <hci_cmd_handle+0xd6>
   16d54:	2a1d      	cmp	r2, #29
   16d56:	d1d5      	bne.n	16d04 <hci_cmd_handle+0x78>
	handle = sys_le16_to_cpu(cmd->handle);
   16d58:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   16d5a:	8818      	ldrh	r0, [r3, #0]
   16d5c:	f00b fa35 	bl	221ca <ll_version_ind_send>
	*evt = cmd_status(status);
   16d60:	e004      	b.n	16d6c <hci_cmd_handle+0xe0>
		disconnect(cmd, evt);
   16d62:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   16d64:	7899      	ldrb	r1, [r3, #2]
   16d66:	8818      	ldrh	r0, [r3, #0]
   16d68:	f00b fa45 	bl	221f6 <ll_terminate_ind_send>
	*evt = cmd_status(status);
   16d6c:	f7ff ff24 	bl	16bb8 <cmd_status>
   16d70:	9005      	str	r0, [sp, #20]
	if (err == -EINVAL) {
   16d72:	e00f      	b.n	16d94 <hci_cmd_handle+0x108>
	switch (ocf) {
   16d74:	2a03      	cmp	r2, #3
   16d76:	d01a      	beq.n	16dae <hci_cmd_handle+0x122>
   16d78:	d80e      	bhi.n	16d98 <hci_cmd_handle+0x10c>
   16d7a:	2a01      	cmp	r2, #1
   16d7c:	d1c2      	bne.n	16d04 <hci_cmd_handle+0x78>
	event_mask = sys_get_le64(cmd->events);
   16d7e:	68a0      	ldr	r0, [r4, #8]
   16d80:	f00b f823 	bl	21dca <sys_get_le64>
   16d84:	4b94      	ldr	r3, [pc, #592]	; (16fd8 <hci_cmd_handle+0x34c>)
   16d86:	e9c3 0100 	strd	r0, r1, [r3]
		ccst = cmd_complete(evt, sizeof(*ccst));
   16d8a:	2101      	movs	r1, #1
   16d8c:	a805      	add	r0, sp, #20
   16d8e:	f7ff ff2d 	bl	16bec <cmd_complete>
		ccst->status = 0x00;
   16d92:	7005      	strb	r5, [r0, #0]
	return evt;
   16d94:	9805      	ldr	r0, [sp, #20]
   16d96:	e790      	b.n	16cba <hci_cmd_handle+0x2e>
	switch (ocf) {
   16d98:	2a2d      	cmp	r2, #45	; 0x2d
   16d9a:	d017      	beq.n	16dcc <hci_cmd_handle+0x140>
   16d9c:	2a63      	cmp	r2, #99	; 0x63
   16d9e:	d1b1      	bne.n	16d04 <hci_cmd_handle+0x78>
	ccst = cmd_complete(evt, sizeof(*ccst));
   16da0:	2101      	movs	r1, #1
   16da2:	a805      	add	r0, sp, #20
   16da4:	f7ff ff22 	bl	16bec <cmd_complete>
	ccst->status = 0x00;
   16da8:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   16daa:	7003      	strb	r3, [r0, #0]
   16dac:	e7f2      	b.n	16d94 <hci_cmd_handle+0x108>
	event_mask = DEFAULT_EVENT_MASK;
   16dae:	4b8a      	ldr	r3, [pc, #552]	; (16fd8 <hci_cmd_handle+0x34c>)
   16db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16db4:	f641 71ff 	movw	r1, #8191	; 0x1fff
   16db8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   16dbc:	4b87      	ldr	r3, [pc, #540]	; (16fdc <hci_cmd_handle+0x350>)
   16dbe:	201f      	movs	r0, #31
   16dc0:	2100      	movs	r1, #0
   16dc2:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   16dc6:	f002 fbdd 	bl	19584 <ll_reset>
   16dca:	e7de      	b.n	16d8a <hci_cmd_handle+0xfe>
		read_tx_power_level(cmd, evt);
   16dcc:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   16dce:	2104      	movs	r1, #4
   16dd0:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   16dd2:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   16dd4:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
   16dd6:	f7ff ff09 	bl	16bec <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   16dda:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   16ddc:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
   16dde:	1cc2      	adds	r2, r0, #3
   16de0:	4639      	mov	r1, r7
   16de2:	4630      	mov	r0, r6
   16de4:	f00b fa1d 	bl	22222 <ll_tx_pwr_lvl_get>
	rp->status = status;
   16de8:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   16dea:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   16dee:	e7d1      	b.n	16d94 <hci_cmd_handle+0x108>
	switch (ocf) {
   16df0:	3a01      	subs	r2, #1
   16df2:	2a08      	cmp	r2, #8
   16df4:	d886      	bhi.n	16d04 <hci_cmd_handle+0x78>
   16df6:	a301      	add	r3, pc, #4	; (adr r3, 16dfc <hci_cmd_handle+0x170>)
   16df8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   16dfc:	00016e21 	.word	0x00016e21
   16e00:	00016e4b 	.word	0x00016e4b
   16e04:	00016ed3 	.word	0x00016ed3
   16e08:	00016d05 	.word	0x00016d05
   16e0c:	00016d05 	.word	0x00016d05
   16e10:	00016d05 	.word	0x00016d05
   16e14:	00016d05 	.word	0x00016d05
   16e18:	00016d05 	.word	0x00016d05
   16e1c:	00016eef 	.word	0x00016eef
	rp = cmd_complete(evt, sizeof(*rp));
   16e20:	2109      	movs	r1, #9
   16e22:	a805      	add	r0, sp, #20
   16e24:	f7ff fee2 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   16e28:	2300      	movs	r3, #0
   16e2a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   16e2c:	7083      	strb	r3, [r0, #2]
   16e2e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
   16e30:	f06f 030e 	mvn.w	r3, #14
   16e34:	7143      	strb	r3, [r0, #5]
   16e36:	2305      	movs	r3, #5
	rp->hci_version = LL_VERSION_NUMBER;
   16e38:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
   16e3a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
   16e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = LL_VERSION_NUMBER;
   16e40:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   16e42:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
   16e44:	71c3      	strb	r3, [r0, #7]
   16e46:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   16e48:	e7a4      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   16e4a:	2141      	movs	r1, #65	; 0x41
   16e4c:	a805      	add	r0, sp, #20
   16e4e:	f7ff fecd 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   16e52:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   16e54:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16e56:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   16e58:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   16e5c:	f008 fbfe 	bl	1f65c <memset>
	rp->commands[2] |= BIT(7);
   16e60:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(6) | BIT(7);
   16e62:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   16e64:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
   16e66:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[2] |= BIT(7);
   16e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16e6c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
   16e6e:	79a3      	ldrb	r3, [r4, #6]
   16e70:	f063 033f 	orn	r3, r3, #63	; 0x3f
   16e74:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   16e76:	7ae3      	ldrb	r3, [r4, #11]
   16e78:	f043 0304 	orr.w	r3, r3, #4
   16e7c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   16e7e:	7be3      	ldrb	r3, [r4, #15]
   16e80:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   16e84:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   16e86:	7c23      	ldrb	r3, [r4, #16]
   16e88:	f043 0302 	orr.w	r3, r3, #2
   16e8c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   16e8e:	7de3      	ldrb	r3, [r4, #23]
   16e90:	f043 0304 	orr.w	r3, r3, #4
   16e94:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
   16e96:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   16e98:	f063 0308 	orn	r3, r3, #8
   16e9c:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   16e9e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
   16ea2:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
   16ea6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
   16eaa:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
   16eac:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   16eb0:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   16eb2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
   16eb6:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   16eba:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
   16ebe:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
   16ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
   16ec6:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   16ec8:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
   16eca:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   16ecc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   16ed0:	e760      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   16ed2:	2109      	movs	r1, #9
   16ed4:	a805      	add	r0, sp, #20
   16ed6:	f7ff fe89 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   16eda:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   16edc:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16ede:	2208      	movs	r2, #8
	rp->status = 0x00;
   16ee0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   16ee4:	f008 fbba 	bl	1f65c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   16ee8:	2360      	movs	r3, #96	; 0x60
   16eea:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   16eec:	e752      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   16eee:	2107      	movs	r1, #7
   16ef0:	a805      	add	r0, sp, #20
   16ef2:	f7ff fe7b 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   16ef6:	4601      	mov	r1, r0
   16ef8:	2300      	movs	r3, #0
   16efa:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   16efe:	4618      	mov	r0, r3
   16f00:	f7ff fce4 	bl	168cc <ll_addr_get>
	if (err == -EINVAL) {
   16f04:	e746      	b.n	16d94 <hci_cmd_handle+0x108>
	switch (ocf) {
   16f06:	2a0f      	cmp	r2, #15
   16f08:	f000 80d4 	beq.w	170b4 <hci_cmd_handle+0x428>
   16f0c:	d848      	bhi.n	16fa0 <hci_cmd_handle+0x314>
   16f0e:	2a07      	cmp	r2, #7
   16f10:	f000 810c 	beq.w	1712c <hci_cmd_handle+0x4a0>
   16f14:	d829      	bhi.n	16f6a <hci_cmd_handle+0x2de>
   16f16:	2a03      	cmp	r2, #3
   16f18:	f000 80af 	beq.w	1707a <hci_cmd_handle+0x3ee>
   16f1c:	d811      	bhi.n	16f42 <hci_cmd_handle+0x2b6>
   16f1e:	2a01      	cmp	r2, #1
   16f20:	f000 80a4 	beq.w	1706c <hci_cmd_handle+0x3e0>
   16f24:	2a02      	cmp	r2, #2
   16f26:	f47f aeed 	bne.w	16d04 <hci_cmd_handle+0x78>
	rp = cmd_complete(evt, sizeof(*rp));
   16f2a:	2104      	movs	r1, #4
   16f2c:	a805      	add	r0, sp, #20
   16f2e:	f7ff fe5d 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   16f32:	2300      	movs	r3, #0
   16f34:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   16f36:	221b      	movs	r2, #27
   16f38:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   16f3a:	2304      	movs	r3, #4
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   16f3c:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   16f3e:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   16f40:	e728      	b.n	16d94 <hci_cmd_handle+0x108>
	switch (ocf) {
   16f42:	2a05      	cmp	r2, #5
   16f44:	f000 80ab 	beq.w	1709e <hci_cmd_handle+0x412>
   16f48:	2a06      	cmp	r2, #6
   16f4a:	f47f aedb 	bne.w	16d04 <hci_cmd_handle+0x78>
		le_set_adv_param(cmd, evt);
   16f4e:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   16f50:	7ba5      	ldrb	r5, [r4, #14]
   16f52:	79a3      	ldrb	r3, [r4, #6]
   16f54:	7962      	ldrb	r2, [r4, #5]
   16f56:	7921      	ldrb	r1, [r4, #4]
   16f58:	8820      	ldrh	r0, [r4, #0]
   16f5a:	9502      	str	r5, [sp, #8]
   16f5c:	7b65      	ldrb	r5, [r4, #13]
   16f5e:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   16f60:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   16f62:	9400      	str	r4, [sp, #0]
   16f64:	f002 fec6 	bl	19cf4 <ll_adv_params_set>
   16f68:	e09d      	b.n	170a6 <hci_cmd_handle+0x41a>
	switch (ocf) {
   16f6a:	2a0a      	cmp	r2, #10
   16f6c:	f000 80eb 	beq.w	17146 <hci_cmd_handle+0x4ba>
   16f70:	d80b      	bhi.n	16f8a <hci_cmd_handle+0x2fe>
   16f72:	2a08      	cmp	r2, #8
   16f74:	f000 80e1 	beq.w	1713a <hci_cmd_handle+0x4ae>
   16f78:	2a09      	cmp	r2, #9
   16f7a:	f47f aec3 	bne.w	16d04 <hci_cmd_handle+0x78>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   16f7e:	68a1      	ldr	r1, [r4, #8]
   16f80:	f811 0b01 	ldrb.w	r0, [r1], #1
   16f84:	f00b f9bd 	bl	22302 <ll_adv_scan_rsp_set>
   16f88:	e08d      	b.n	170a6 <hci_cmd_handle+0x41a>
	switch (ocf) {
   16f8a:	2a0b      	cmp	r2, #11
   16f8c:	f000 80e0 	beq.w	17150 <hci_cmd_handle+0x4c4>
   16f90:	2a0c      	cmp	r2, #12
   16f92:	f47f aeb7 	bne.w	16d04 <hci_cmd_handle+0x78>
	status = ll_scan_enable(cmd->enable);
   16f96:	68a3      	ldr	r3, [r4, #8]
   16f98:	7818      	ldrb	r0, [r3, #0]
   16f9a:	f002 ff7f 	bl	19e9c <ll_scan_enable>
   16f9e:	e082      	b.n	170a6 <hci_cmd_handle+0x41a>
	switch (ocf) {
   16fa0:	2a16      	cmp	r2, #22
   16fa2:	f000 80e1 	beq.w	17168 <hci_cmd_handle+0x4dc>
   16fa6:	d82e      	bhi.n	17006 <hci_cmd_handle+0x37a>
   16fa8:	2a12      	cmp	r2, #18
   16faa:	f000 8096 	beq.w	170da <hci_cmd_handle+0x44e>
   16fae:	d817      	bhi.n	16fe0 <hci_cmd_handle+0x354>
   16fb0:	2a10      	cmp	r2, #16
   16fb2:	f000 8089 	beq.w	170c8 <hci_cmd_handle+0x43c>
   16fb6:	2a11      	cmp	r2, #17
   16fb8:	f47f aea4 	bne.w	16d04 <hci_cmd_handle+0x78>
	status = ll_wl_add(&cmd->addr);
   16fbc:	68a0      	ldr	r0, [r4, #8]
   16fbe:	f002 ffd5 	bl	19f6c <ll_wl_add>
   16fc2:	e070      	b.n	170a6 <hci_cmd_handle+0x41a>
   16fc4:	000233ec 	.word	0x000233ec
   16fc8:	0002340c 	.word	0x0002340c
   16fcc:	000282b1 	.word	0x000282b1
   16fd0:	000282c7 	.word	0x000282c7
   16fd4:	20001d40 	.word	0x20001d40
   16fd8:	20007220 	.word	0x20007220
   16fdc:	20007228 	.word	0x20007228
	switch (ocf) {
   16fe0:	2a13      	cmp	r2, #19
   16fe2:	f000 80c6 	beq.w	17172 <hci_cmd_handle+0x4e6>
   16fe6:	2a15      	cmp	r2, #21
   16fe8:	f47f ae8c 	bne.w	16d04 <hci_cmd_handle+0x78>
	handle = sys_le16_to_cpu(cmd->handle);
   16fec:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   16fee:	2108      	movs	r1, #8
   16ff0:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   16ff2:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   16ff4:	f7ff fdfa 	bl	16bec <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   16ff8:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   16ffa:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   16ffc:	1cc1      	adds	r1, r0, #3
   16ffe:	4630      	mov	r0, r6
   17000:	f00b f8b8 	bl	22174 <ll_chm_get>
   17004:	e6f0      	b.n	16de8 <hci_cmd_handle+0x15c>
	switch (ocf) {
   17006:	2a1c      	cmp	r2, #28
   17008:	d07e      	beq.n	17108 <hci_cmd_handle+0x47c>
   1700a:	d80f      	bhi.n	1702c <hci_cmd_handle+0x3a0>
   1700c:	2a17      	cmp	r2, #23
   1700e:	d068      	beq.n	170e2 <hci_cmd_handle+0x456>
   17010:	2a18      	cmp	r2, #24
   17012:	f47f ae77 	bne.w	16d04 <hci_cmd_handle+0x78>
	rp = cmd_complete(evt, sizeof(*rp));
   17016:	2109      	movs	r1, #9
   17018:	a805      	add	r0, sp, #20
   1701a:	f7ff fde7 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   1701e:	2300      	movs	r3, #0
   17020:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
   17024:	2108      	movs	r1, #8
   17026:	f00a ff05 	bl	21e34 <bt_rand>
	if (err == -EINVAL) {
   1702a:	e6b3      	b.n	16d94 <hci_cmd_handle+0x108>
	switch (ocf) {
   1702c:	2a21      	cmp	r2, #33	; 0x21
   1702e:	f000 80ae 	beq.w	1718e <hci_cmd_handle+0x502>
   17032:	2a4b      	cmp	r2, #75	; 0x4b
   17034:	f000 80b3 	beq.w	1719e <hci_cmd_handle+0x512>
   17038:	2a20      	cmp	r2, #32
   1703a:	f47f ae63 	bne.w	16d04 <hci_cmd_handle+0x78>
		le_conn_param_req_reply(cmd, evt);
   1703e:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   17040:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   17042:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   17044:	8853      	ldrh	r3, [r2, #2]
   17046:	9102      	str	r1, [sp, #8]
   17048:	88d1      	ldrh	r1, [r2, #6]
   1704a:	9101      	str	r1, [sp, #4]
   1704c:	8892      	ldrh	r2, [r2, #4]
   1704e:	9200      	str	r2, [sp, #0]
   17050:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   17052:	2102      	movs	r1, #2
   17054:	4620      	mov	r0, r4
   17056:	f00b f816 	bl	22086 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
   1705a:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1705c:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   1705e:	a805      	add	r0, sp, #20
   17060:	f7ff fdc4 	bl	16bec <cmd_complete>
	rp->status = status;
   17064:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   17066:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   1706a:	e693      	b.n	16d94 <hci_cmd_handle+0x108>
	le_event_mask = sys_get_le64(cmd->events);
   1706c:	68a0      	ldr	r0, [r4, #8]
   1706e:	f00a feac 	bl	21dca <sys_get_le64>
   17072:	4bc9      	ldr	r3, [pc, #804]	; (17398 <hci_cmd_handle+0x70c>)
   17074:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
   17078:	e692      	b.n	16da0 <hci_cmd_handle+0x114>
	rp = cmd_complete(evt, sizeof(*rp));
   1707a:	2109      	movs	r1, #9
   1707c:	a805      	add	r0, sp, #20
   1707e:	f7ff fdb5 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   17082:	2500      	movs	r5, #0
	rp = cmd_complete(evt, sizeof(*rp));
   17084:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17086:	2208      	movs	r2, #8
	rp->status = 0x00;
   17088:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1708c:	4629      	mov	r1, r5
   1708e:	f008 fae5 	bl	1f65c <memset>
	rp->features[0] = LL_FEAT & 0xFF;
   17092:	238e      	movs	r3, #142	; 0x8e
   17094:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (LL_FEAT >> 8)  & 0xFF;
   17096:	2301      	movs	r3, #1
   17098:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (LL_FEAT >> 16)  & 0xFF;
   1709a:	70e5      	strb	r5, [r4, #3]
	if (err == -EINVAL) {
   1709c:	e67a      	b.n	16d94 <hci_cmd_handle+0x108>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1709e:	68a1      	ldr	r1, [r4, #8]
   170a0:	2001      	movs	r0, #1
   170a2:	f7ff fc2d 	bl	16900 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
   170a6:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   170a8:	2101      	movs	r1, #1
   170aa:	a805      	add	r0, sp, #20
   170ac:	f7ff fd9e 	bl	16bec <cmd_complete>
	ccst->status = status;
   170b0:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   170b2:	e66f      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   170b4:	2102      	movs	r1, #2
   170b6:	a805      	add	r0, sp, #20
   170b8:	f7ff fd98 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   170bc:	7005      	strb	r5, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   170be:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   170c0:	f00b f962 	bl	22388 <ll_wl_size_get>
   170c4:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   170c6:	e665      	b.n	16d94 <hci_cmd_handle+0x108>
	ccst = cmd_complete(evt, sizeof(*ccst));
   170c8:	2101      	movs	r1, #1
   170ca:	a805      	add	r0, sp, #20
   170cc:	f7ff fd8e 	bl	16bec <cmd_complete>
   170d0:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   170d2:	f002 ff35 	bl	19f40 <ll_wl_clear>
   170d6:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   170d8:	e65c      	b.n	16d94 <hci_cmd_handle+0x108>
	status = ll_wl_remove(&cmd->addr);
   170da:	68a0      	ldr	r0, [r4, #8]
   170dc:	f002 ff7e 	bl	19fdc <ll_wl_remove>
   170e0:	e7e1      	b.n	170a6 <hci_cmd_handle+0x41a>
		le_encrypt(cmd, evt);
   170e2:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   170e4:	2300      	movs	r3, #0
   170e6:	aa06      	add	r2, sp, #24
   170e8:	f100 0110 	add.w	r1, r0, #16
   170ec:	f00b f967 	bl	223be <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
   170f0:	2111      	movs	r1, #17
   170f2:	a805      	add	r0, sp, #20
   170f4:	f7ff fd7a 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   170f8:	2300      	movs	r3, #0
   170fa:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   170fe:	2210      	movs	r2, #16
   17100:	a906      	add	r1, sp, #24
	memcpy(rp->info, build_info, sizeof(build_info));
   17102:	f008 fa81 	bl	1f608 <memcpy>
	if (err == -EINVAL) {
   17106:	e645      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   17108:	2109      	movs	r1, #9
   1710a:	a805      	add	r0, sp, #20
   1710c:	f7ff fd6e 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   17110:	4601      	mov	r1, r0
   17112:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
   17114:	4602      	mov	r2, r0
	rp->status = 0x00;
   17116:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
   1711a:	48a0      	ldr	r0, [pc, #640]	; (1739c <hci_cmd_handle+0x710>)
   1711c:	f00a fe2d 	bl	21d7a <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
   17120:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
   17124:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   17126:	f00a fe28 	bl	21d7a <sys_put_le32>
	if (err == -EINVAL) {
   1712a:	e633      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   1712c:	2102      	movs	r1, #2
   1712e:	a805      	add	r0, sp, #20
   17130:	f7ff fd5c 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   17134:	7005      	strb	r5, [r0, #0]
	rp->tx_power_level = 0;
   17136:	7045      	strb	r5, [r0, #1]
	if (err == -EINVAL) {
   17138:	e62c      	b.n	16d94 <hci_cmd_handle+0x108>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   1713a:	68a1      	ldr	r1, [r4, #8]
   1713c:	f811 0b01 	ldrb.w	r0, [r1], #1
   17140:	f00b f894 	bl	2226c <ll_adv_data_set>
   17144:	e7af      	b.n	170a6 <hci_cmd_handle+0x41a>
	status = ll_adv_enable(cmd->enable);
   17146:	68a3      	ldr	r3, [r4, #8]
   17148:	7818      	ldrb	r0, [r3, #0]
   1714a:	f002 fe41 	bl	19dd0 <ll_adv_enable>
   1714e:	e7aa      	b.n	170a6 <hci_cmd_handle+0x41a>
		le_set_scan_param(cmd, evt);
   17150:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   17152:	7963      	ldrb	r3, [r4, #5]
   17154:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   17158:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   1715c:	7820      	ldrb	r0, [r4, #0]
   1715e:	79a4      	ldrb	r4, [r4, #6]
   17160:	9400      	str	r4, [sp, #0]
   17162:	f002 fe7d 	bl	19e60 <ll_scan_params_set>
   17166:	e79e      	b.n	170a6 <hci_cmd_handle+0x41a>
	handle = sys_le16_to_cpu(cmd->handle);
   17168:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   1716a:	8818      	ldrh	r0, [r3, #0]
   1716c:	f00b f817 	bl	2219e <ll_feature_req_send>
   17170:	e5fc      	b.n	16d6c <hci_cmd_handle+0xe0>
		le_conn_update(cmd, evt);
   17172:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   17174:	8911      	ldrh	r1, [r2, #8]
   17176:	8853      	ldrh	r3, [r2, #2]
   17178:	8810      	ldrh	r0, [r2, #0]
   1717a:	9102      	str	r1, [sp, #8]
   1717c:	88d1      	ldrh	r1, [r2, #6]
   1717e:	9101      	str	r1, [sp, #4]
   17180:	8892      	ldrh	r2, [r2, #4]
   17182:	9200      	str	r2, [sp, #0]
   17184:	2200      	movs	r2, #0
   17186:	4611      	mov	r1, r2
   17188:	f00a ff7d 	bl	22086 <ll_conn_update>
	*evt = cmd_status(status);
   1718c:	e5ee      	b.n	16d6c <hci_cmd_handle+0xe0>
		le_conn_param_req_neg_reply(cmd, evt);
   1718e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   17190:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   17192:	789a      	ldrb	r2, [r3, #2]
   17194:	2300      	movs	r3, #0
   17196:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1719a:	9300      	str	r3, [sp, #0]
   1719c:	e759      	b.n	17052 <hci_cmd_handle+0x3c6>
	rp = cmd_complete(evt, sizeof(*rp));
   1719e:	2103      	movs	r1, #3
   171a0:	a805      	add	r0, sp, #20
   171a2:	f7ff fd23 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   171a6:	4601      	mov	r1, r0
   171a8:	2300      	movs	r3, #0
   171aa:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   171ae:	3001      	adds	r0, #1
   171b0:	f00a fddf 	bl	21d72 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   171b4:	e5ee      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   171b6:	210d      	movs	r1, #13
   171b8:	a805      	add	r0, sp, #20
   171ba:	f7ff fd17 	bl	16bec <cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   171be:	2202      	movs	r2, #2
   171c0:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   171c2:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   171c4:	2201      	movs	r2, #1
	rp->status = 0x00;
   171c6:	2300      	movs	r3, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   171c8:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   171ca:	220e      	movs	r2, #14
	rp->status = 0x00;
   171cc:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   171ce:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   171d0:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
   171d2:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   171d4:	71c2      	strb	r2, [r0, #7]
   171d6:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   171d8:	7243      	strb	r3, [r0, #9]
   171da:	7283      	strb	r3, [r0, #10]
   171dc:	72c3      	strb	r3, [r0, #11]
   171de:	7303      	strb	r3, [r0, #12]
	if (err == -EINVAL) {
   171e0:	e5d8      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   171e2:	2141      	movs	r1, #65	; 0x41
   171e4:	a805      	add	r0, sp, #20
   171e6:	f7ff fd01 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   171ea:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   171ec:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   171ee:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   171f0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   171f4:	f008 fa32 	bl	1f65c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   171f8:	7863      	ldrb	r3, [r4, #1]
   171fa:	f063 0358 	orn	r3, r3, #88	; 0x58
   171fe:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   17200:	78a3      	ldrb	r3, [r4, #2]
   17202:	f043 0303 	orr.w	r3, r3, #3
   17206:	70a3      	strb	r3, [r4, #2]
	if (err == -EINVAL) {
   17208:	e5c4      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   1720a:	2109      	movs	r1, #9
   1720c:	a805      	add	r0, sp, #20
   1720e:	f7ff fced 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   17212:	2100      	movs	r1, #0
   17214:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17218:	2208      	movs	r2, #8
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   1721a:	f008 fa1f 	bl	1f65c <memset>
	if (err == -EINVAL) {
   1721e:	e5b9      	b.n	16d94 <hci_cmd_handle+0x108>
	const char build_info[] = HCI_VS_BUILD_INFO;
   17220:	4b5f      	ldr	r3, [pc, #380]	; (173a0 <hci_cmd_handle+0x714>)
   17222:	aa06      	add	r2, sp, #24
   17224:	f103 0610 	add.w	r6, r3, #16
   17228:	4615      	mov	r5, r2
   1722a:	6818      	ldr	r0, [r3, #0]
   1722c:	6859      	ldr	r1, [r3, #4]
   1722e:	4614      	mov	r4, r2
   17230:	c403      	stmia	r4!, {r0, r1}
   17232:	3308      	adds	r3, #8
   17234:	42b3      	cmp	r3, r6
   17236:	4622      	mov	r2, r4
   17238:	d1f7      	bne.n	1722a <hci_cmd_handle+0x59e>
   1723a:	6818      	ldr	r0, [r3, #0]
   1723c:	889b      	ldrh	r3, [r3, #4]
   1723e:	6020      	str	r0, [r4, #0]
   17240:	80a3      	strh	r3, [r4, #4]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   17242:	2117      	movs	r1, #23
   17244:	a805      	add	r0, sp, #20
   17246:	f7ff fcd1 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   1724a:	2300      	movs	r3, #0
   1724c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   17250:	2216      	movs	r2, #22
   17252:	4629      	mov	r1, r5
   17254:	e755      	b.n	17102 <hci_cmd_handle+0x476>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   17256:	68a1      	ldr	r1, [r4, #8]
   17258:	2000      	movs	r0, #0
   1725a:	f7ff fb51 	bl	16900 <ll_addr_set>
   1725e:	e59f      	b.n	16da0 <hci_cmd_handle+0x114>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   17260:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17264:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   17268:	3201      	adds	r2, #1
   1726a:	d106      	bne.n	1727a <hci_cmd_handle+0x5ee>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1726c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   17270:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   17274:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   17276:	4293      	cmp	r3, r2
   17278:	d020      	beq.n	172bc <hci_cmd_handle+0x630>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1727a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1727e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   17282:	07db      	lsls	r3, r3, #31
   17284:	d51a      	bpl.n	172bc <hci_cmd_handle+0x630>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   17286:	2118      	movs	r1, #24
   17288:	a805      	add	r0, sp, #20
   1728a:	f7ff fcaf 	bl	16bec <cmd_complete>
		rp->status = 0x00;
   1728e:	2600      	movs	r6, #0
		rp->num_addrs = 1;
   17290:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   17292:	4604      	mov	r4, r0
		rp->num_addrs = 1;
   17294:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
   17296:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
   17298:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   1729c:	1ca1      	adds	r1, r4, #2
   1729e:	f00a fd6c 	bl	21d7a <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
   172a2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
   172a6:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
   172a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
   172ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   172b0:	71e3      	strb	r3, [r4, #7]
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
   172b2:	2210      	movs	r2, #16
   172b4:	4631      	mov	r1, r6
   172b6:	f104 0008 	add.w	r0, r4, #8
   172ba:	e7ae      	b.n	1721a <hci_cmd_handle+0x58e>
	rp = cmd_complete(evt, sizeof(*rp));
   172bc:	2102      	movs	r1, #2
   172be:	a805      	add	r0, sp, #20
   172c0:	f7ff fc94 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   172c4:	2300      	movs	r3, #0
   172c6:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
   172c8:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   172ca:	e563      	b.n	16d94 <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   172cc:	2121      	movs	r1, #33	; 0x21
   172ce:	a805      	add	r0, sp, #20
   172d0:	f7ff fc8c 	bl	16bec <cmd_complete>
	rp->status = 0x00;
   172d4:	4603      	mov	r3, r0
   172d6:	2200      	movs	r2, #0
   172d8:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   172dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
   172e0:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   172e2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   172e6:	3101      	adds	r1, #1
   172e8:	d04b      	beq.n	17382 <hci_cmd_handle+0x6f6>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   172ea:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   172ee:	3101      	adds	r1, #1
   172f0:	d047      	beq.n	17382 <hci_cmd_handle+0x6f6>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   172f2:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   172f6:	3101      	adds	r1, #1
   172f8:	d043      	beq.n	17382 <hci_cmd_handle+0x6f6>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
   172fa:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   172fe:	3101      	adds	r1, #1
   17300:	d03f      	beq.n	17382 <hci_cmd_handle+0x6f6>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
   17302:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   17306:	4619      	mov	r1, r3
   17308:	f00a fd37 	bl	21d7a <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
   1730c:	1d61      	adds	r1, r4, #5
   1730e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   17312:	f00a fd32 	bl	21d7a <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
   17316:	f104 0109 	add.w	r1, r4, #9
   1731a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   1731e:	f00a fd2c 	bl	21d7a <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
   17322:	f104 010d 	add.w	r1, r4, #13
   17326:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1732a:	f00a fd26 	bl	21d7a <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17332:	f104 0311 	add.w	r3, r4, #17
   17336:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
   1733a:	3101      	adds	r1, #1
   1733c:	d027      	beq.n	1738e <hci_cmd_handle+0x702>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1733e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   17342:	3101      	adds	r1, #1
   17344:	d023      	beq.n	1738e <hci_cmd_handle+0x702>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   17346:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1734a:	3101      	adds	r1, #1
   1734c:	d01f      	beq.n	1738e <hci_cmd_handle+0x702>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1734e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   17352:	3101      	adds	r1, #1
   17354:	d01b      	beq.n	1738e <hci_cmd_handle+0x702>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
   17356:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1735a:	4619      	mov	r1, r3
   1735c:	f00a fd0d 	bl	21d7a <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
   17360:	f104 0115 	add.w	r1, r4, #21
   17364:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   17368:	f00a fd07 	bl	21d7a <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
   1736c:	f104 0119 	add.w	r1, r4, #25
   17370:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   17374:	f00a fd01 	bl	21d7a <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   17378:	f104 011d 	add.w	r1, r4, #29
   1737c:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
   17380:	e6d1      	b.n	17126 <hci_cmd_handle+0x49a>
		(void)memset(rp->ir, 0x00, sizeof(rp->ir));
   17382:	2210      	movs	r2, #16
   17384:	2100      	movs	r1, #0
   17386:	4618      	mov	r0, r3
   17388:	f008 f968 	bl	1f65c <memset>
   1738c:	e7cf      	b.n	1732e <hci_cmd_handle+0x6a2>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   1738e:	2210      	movs	r2, #16
   17390:	2100      	movs	r1, #0
   17392:	4618      	mov	r0, r3
   17394:	e741      	b.n	1721a <hci_cmd_handle+0x58e>
   17396:	bf00      	nop
   17398:	20007228 	.word	0x20007228
   1739c:	ec30ffbf 	.word	0xec30ffbf
   173a0:	000282e5 	.word	0x000282e5

000173a4 <hci_acl_handle>:
{
   173a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   173a8:	2300      	movs	r3, #0
   173aa:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   173ac:	8983      	ldrh	r3, [r0, #12]
   173ae:	2b03      	cmp	r3, #3
{
   173b0:	4606      	mov	r6, r0
   173b2:	460f      	mov	r7, r1
	if (buf->len < sizeof(*acl)) {
   173b4:	d811      	bhi.n	173da <hci_acl_handle+0x36>
		BT_ERR("No HCI ACL header");
   173b6:	2301      	movs	r3, #1
   173b8:	f04f 0100 	mov.w	r1, #0
   173bc:	f363 0107 	bfi	r1, r3, #0, #8
   173c0:	4a40      	ldr	r2, [pc, #256]	; (174c4 <hci_acl_handle+0x120>)
   173c2:	4b41      	ldr	r3, [pc, #260]	; (174c8 <hci_acl_handle+0x124>)
   173c4:	4841      	ldr	r0, [pc, #260]	; (174cc <hci_acl_handle+0x128>)
   173c6:	1a9b      	subs	r3, r3, r2
   173c8:	08db      	lsrs	r3, r3, #3
   173ca:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI ACL packet length");
   173ce:	f007 f838 	bl	1e442 <log_0>
		return -EINVAL;
   173d2:	f06f 0015 	mvn.w	r0, #21
}
   173d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   173da:	2104      	movs	r1, #4
   173dc:	3008      	adds	r0, #8
   173de:	f00b f949 	bl	22674 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   173e2:	89b3      	ldrh	r3, [r6, #12]
	len = sys_le16_to_cpu(acl->len);
   173e4:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   173e8:	8800      	ldrh	r0, [r0, #0]
	if (buf->len < len) {
   173ea:	4543      	cmp	r3, r8
   173ec:	d20c      	bcs.n	17408 <hci_acl_handle+0x64>
		BT_ERR("Invalid HCI ACL packet length");
   173ee:	2301      	movs	r3, #1
   173f0:	f04f 0100 	mov.w	r1, #0
   173f4:	f363 0107 	bfi	r1, r3, #0, #8
   173f8:	4a32      	ldr	r2, [pc, #200]	; (174c4 <hci_acl_handle+0x120>)
   173fa:	4b33      	ldr	r3, [pc, #204]	; (174c8 <hci_acl_handle+0x124>)
   173fc:	4834      	ldr	r0, [pc, #208]	; (174d0 <hci_acl_handle+0x12c>)
   173fe:	1a9b      	subs	r3, r3, r2
   17400:	08db      	lsrs	r3, r3, #3
   17402:	f363 118f 	bfi	r1, r3, #6, #10
   17406:	e7e2      	b.n	173ce <hci_acl_handle+0x2a>
	flags = bt_acl_flags(handle);
   17408:	ea4f 3910 	mov.w	r9, r0, lsr #12
	handle = bt_acl_handle(handle);
   1740c:	f3c0 050b 	ubfx	r5, r0, #0, #12
	node_tx = ll_tx_mem_acquire();
   17410:	f002 fa10 	bl	19834 <ll_tx_mem_acquire>
	if (!node_tx) {
   17414:	4604      	mov	r4, r0
   17416:	bb40      	cbnz	r0, 1746a <hci_acl_handle+0xc6>
		BT_ERR("Tx Buffer Overflow");
   17418:	2301      	movs	r3, #1
   1741a:	f04f 0100 	mov.w	r1, #0
   1741e:	4a29      	ldr	r2, [pc, #164]	; (174c4 <hci_acl_handle+0x120>)
   17420:	482c      	ldr	r0, [pc, #176]	; (174d4 <hci_acl_handle+0x130>)
   17422:	f363 0107 	bfi	r1, r3, #0, #8
   17426:	4b28      	ldr	r3, [pc, #160]	; (174c8 <hci_acl_handle+0x124>)
   17428:	1a9b      	subs	r3, r3, r2
   1742a:	08db      	lsrs	r3, r3, #3
   1742c:	f363 118f 	bfi	r1, r3, #6, #10
   17430:	f007 f807 	bl	1e442 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   17434:	4b28      	ldr	r3, [pc, #160]	; (174d8 <hci_acl_handle+0x134>)
   17436:	6819      	ldr	r1, [r3, #0]
   17438:	4623      	mov	r3, r4
   1743a:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   1743e:	4313      	orrs	r3, r2
   17440:	d010      	beq.n	17464 <hci_acl_handle+0xc0>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   17442:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17446:	2001      	movs	r0, #1
   17448:	f7f1 f948 	bl	86dc <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   1744c:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1744e:	6038      	str	r0, [r7, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   17450:	211a      	movs	r1, #26
   17452:	f00a fc9b 	bl	21d8c <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
   17456:	6838      	ldr	r0, [r7, #0]
   17458:	2101      	movs	r1, #1
   1745a:	3008      	adds	r0, #8
   1745c:	f00b f895 	bl	2258a <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   17460:	2301      	movs	r3, #1
   17462:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   17464:	f06f 0036 	mvn.w	r0, #54	; 0x36
   17468:	e7b5      	b.n	173d6 <hci_acl_handle+0x32>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
   1746a:	f1b9 0f00 	cmp.w	r9, #0
   1746e:	d027      	beq.n	174c0 <hci_acl_handle+0x11c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   17470:	f1b9 0f02 	cmp.w	r9, #2
   17474:	bf0c      	ite	eq
   17476:	2202      	moveq	r2, #2
   17478:	2201      	movne	r2, #1
   1747a:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   1747c:	f884 8005 	strb.w	r8, [r4, #5]
   17480:	f362 0301 	bfi	r3, r2, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   17484:	68b1      	ldr	r1, [r6, #8]
   17486:	7123      	strb	r3, [r4, #4]
   17488:	4642      	mov	r2, r8
   1748a:	1de0      	adds	r0, r4, #7
   1748c:	f008 f8bc 	bl	1f608 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   17490:	4621      	mov	r1, r4
   17492:	4628      	mov	r0, r5
   17494:	f002 f9da 	bl	1984c <ll_tx_mem_enqueue>
   17498:	2800      	cmp	r0, #0
   1749a:	d09c      	beq.n	173d6 <hci_acl_handle+0x32>
		BT_ERR("Invalid Tx Enqueue");
   1749c:	2301      	movs	r3, #1
   1749e:	f04f 0100 	mov.w	r1, #0
   174a2:	4a08      	ldr	r2, [pc, #32]	; (174c4 <hci_acl_handle+0x120>)
   174a4:	480d      	ldr	r0, [pc, #52]	; (174dc <hci_acl_handle+0x138>)
   174a6:	f363 0107 	bfi	r1, r3, #0, #8
   174aa:	4b07      	ldr	r3, [pc, #28]	; (174c8 <hci_acl_handle+0x124>)
   174ac:	1a9b      	subs	r3, r3, r2
   174ae:	08db      	lsrs	r3, r3, #3
   174b0:	f363 118f 	bfi	r1, r3, #6, #10
   174b4:	f006 ffc5 	bl	1e442 <log_0>
		ll_tx_mem_release(node_tx);
   174b8:	4620      	mov	r0, r4
   174ba:	f002 f9c1 	bl	19840 <ll_tx_mem_release>
   174be:	e788      	b.n	173d2 <hci_acl_handle+0x2e>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   174c0:	2202      	movs	r2, #2
   174c2:	e7da      	b.n	1747a <hci_acl_handle+0xd6>
   174c4:	000233ec 	.word	0x000233ec
   174c8:	0002340c 	.word	0x0002340c
   174cc:	0002825b 	.word	0x0002825b
   174d0:	0002826d 	.word	0x0002826d
   174d4:	0002828b 	.word	0x0002828b
   174d8:	20007220 	.word	0x20007220
   174dc:	0002829e 	.word	0x0002829e

000174e0 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   174e0:	7a03      	ldrb	r3, [r0, #8]
   174e2:	f003 0303 	and.w	r3, r3, #3
   174e6:	3b01      	subs	r3, #1
   174e8:	2b01      	cmp	r3, #1
{
   174ea:	b570      	push	{r4, r5, r6, lr}
   174ec:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
   174ee:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
   174f0:	d81b      	bhi.n	1752a <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   174f2:	f101 0608 	add.w	r6, r1, #8
   174f6:	4630      	mov	r0, r6
   174f8:	2104      	movs	r1, #4
   174fa:	f00b f846 	bl	2258a <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   174fe:	7a23      	ldrb	r3, [r4, #8]
   17500:	f003 0303 	and.w	r3, r3, #3
   17504:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   17506:	bf0c      	ite	eq
   17508:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1750c:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   17510:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   17512:	7a61      	ldrb	r1, [r4, #9]
   17514:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   17516:	4630      	mov	r0, r6
   17518:	f00b f837 	bl	2258a <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1751c:	7a62      	ldrb	r2, [r4, #9]
   1751e:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
   17522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   17526:	f008 b86f 	b.w	1f608 <memcpy>
		LL_ASSERT(0);
   1752a:	2301      	movs	r3, #1
   1752c:	f04f 0100 	mov.w	r1, #0
   17530:	4a08      	ldr	r2, [pc, #32]	; (17554 <hci_acl_encode+0x74>)
   17532:	4809      	ldr	r0, [pc, #36]	; (17558 <hci_acl_encode+0x78>)
   17534:	f363 0107 	bfi	r1, r3, #0, #8
   17538:	4b08      	ldr	r3, [pc, #32]	; (1755c <hci_acl_encode+0x7c>)
   1753a:	1a9b      	subs	r3, r3, r2
   1753c:	08db      	lsrs	r3, r3, #3
   1753e:	f363 118f 	bfi	r1, r3, #6, #10
   17542:	f006 ff7e 	bl	1e442 <log_0>
   17546:	4040      	eors	r0, r0
   17548:	f380 8811 	msr	BASEPRI, r0
   1754c:	f04f 0004 	mov.w	r0, #4
   17550:	df02      	svc	2
   17552:	bf00      	nop
   17554:	000233ec 	.word	0x000233ec
   17558:	0002822a 	.word	0x0002822a
   1755c:	0002340c 	.word	0x0002340c

00017560 <hci_evt_encode>:
#endif

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   17560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   17564:	7903      	ldrb	r3, [r0, #4]
   17566:	88c6      	ldrh	r6, [r0, #6]
   17568:	2b02      	cmp	r3, #2
{
   1756a:	b086      	sub	sp, #24
   1756c:	4604      	mov	r4, r0
   1756e:	460d      	mov	r5, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   17570:	f000 811b 	beq.w	177aa <hci_evt_encode+0x24a>
	switch (node_rx->hdr.type) {
   17574:	3b04      	subs	r3, #4
   17576:	4aba      	ldr	r2, [pc, #744]	; (17860 <hci_evt_encode+0x300>)
   17578:	2700      	movs	r7, #0
   1757a:	2b06      	cmp	r3, #6
   1757c:	f200 8197 	bhi.w	178ae <hci_evt_encode+0x34e>
   17580:	e8df f013 	tbh	[pc, r3, lsl #1]
   17584:	01950007 	.word	0x01950007
   17588:	01950195 	.word	0x01950195
   1758c:	00d7009e 	.word	0x00d7009e
   17590:	00f1      	.short	0x00f1
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   17592:	4bb4      	ldr	r3, [pc, #720]	; (17864 <hci_evt_encode+0x304>)
   17594:	9304      	str	r3, [sp, #16]
   17596:	f64f 7304 	movw	r3, #65284	; 0xff04
   1759a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1759e:	2302      	movs	r3, #2
   175a0:	f88d 3016 	strb.w	r3, [sp, #22]
		   offsetof(struct pdu_adv, payload) + adv->len];
   175a4:	7a43      	ldrb	r3, [r0, #9]
   175a6:	6852      	ldr	r2, [r2, #4]
   175a8:	f103 010a 	add.w	r1, r3, #10
	extra = &b[offsetof(struct node_rx_pdu, pdu) +
   175ac:	4408      	add	r0, r1
	rssi = -(*extra);
   175ae:	5c67      	ldrb	r7, [r4, r1]
	direct = *extra;
   175b0:	7846      	ldrb	r6, [r0, #1]
	rssi = -(*extra);
   175b2:	427f      	negs	r7, r7
   175b4:	f04f 0c00 	mov.w	ip, #0
   175b8:	b27f      	sxtb	r7, r7
	if (direct) {
   175ba:	4660      	mov	r0, ip
   175bc:	f002 5100 	and.w	r1, r2, #536870912	; 0x20000000
   175c0:	2e00      	cmp	r6, #0
   175c2:	d042      	beq.n	1764a <hci_evt_encode+0xea>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   175c4:	ea50 0301 	orrs.w	r3, r0, r1
   175c8:	d03c      	beq.n	17644 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   175ca:	4ba7      	ldr	r3, [pc, #668]	; (17868 <hci_evt_encode+0x308>)
   175cc:	6819      	ldr	r1, [r3, #0]
   175ce:	4663      	mov	r3, ip
   175d0:	f401 6280 	and.w	r2, r1, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   175d4:	4313      	orrs	r3, r2
   175d6:	d035      	beq.n	17644 <hci_evt_encode+0xe4>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   175d8:	7a26      	ldrb	r6, [r4, #8]
   175da:	f006 060f 	and.w	r6, r6, #15
   175de:	2e01      	cmp	r6, #1
   175e0:	d013      	beq.n	1760a <hci_evt_encode+0xaa>
   175e2:	2301      	movs	r3, #1
   175e4:	f04f 0100 	mov.w	r1, #0
   175e8:	f363 0107 	bfi	r1, r3, #0, #8
   175ec:	4a9f      	ldr	r2, [pc, #636]	; (1786c <hci_evt_encode+0x30c>)
   175ee:	4ba0      	ldr	r3, [pc, #640]	; (17870 <hci_evt_encode+0x310>)
   175f0:	48a0      	ldr	r0, [pc, #640]	; (17874 <hci_evt_encode+0x314>)
   175f2:	1a9b      	subs	r3, r3, r2
   175f4:	08db      	lsrs	r3, r3, #3
   175f6:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(0);
   175fa:	f006 ff22 	bl	1e442 <log_0>
   175fe:	4040      	eors	r0, r0
   17600:	f380 8811 	msr	BASEPRI, r0
   17604:	f04f 0004 	mov.w	r0, #4
   17608:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1760a:	2211      	movs	r2, #17
   1760c:	210b      	movs	r1, #11
   1760e:	4628      	mov	r0, r5
   17610:	f00a fbc6 	bl	21da0 <meta_evt>
		dir_info->addr.type = adv->tx_addr;
   17614:	46a0      	mov	r8, r4
	drp->num_reports = 1;
   17616:	7006      	strb	r6, [r0, #0]
	dir_info->evt_type = BT_LE_ADV_DIRECT_IND;
   17618:	7046      	strb	r6, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
   1761a:	f818 3f08 	ldrb.w	r3, [r8, #8]!
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1761e:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
   17620:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17624:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   17626:	2206      	movs	r2, #6
   17628:	f104 010a 	add.w	r1, r4, #10
   1762c:	3003      	adds	r0, #3
   1762e:	f007 ffeb 	bl	1f608 <memcpy>
	dir_info->dir_addr.type = 0x1;
   17632:	726e      	strb	r6, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   17634:	2206      	movs	r2, #6
   17636:	f108 0108 	add.w	r1, r8, #8
   1763a:	f105 000a 	add.w	r0, r5, #10
   1763e:	f007 ffe3 	bl	1f608 <memcpy>
	dir_info->rssi = rssi;
   17642:	742f      	strb	r7, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   17644:	b006      	add	sp, #24
   17646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1764a:	ea50 0201 	orrs.w	r2, r0, r1
   1764e:	d0f9      	beq.n	17644 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   17650:	4a85      	ldr	r2, [pc, #532]	; (17868 <hci_evt_encode+0x308>)
   17652:	6812      	ldr	r2, [r2, #0]
   17654:	4631      	mov	r1, r6
   17656:	f002 0002 	and.w	r0, r2, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1765a:	ea50 0201 	orrs.w	r2, r0, r1
   1765e:	d0f1      	beq.n	17644 <hci_evt_encode+0xe4>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   17660:	7a22      	ldrb	r2, [r4, #8]
   17662:	f002 020f 	and.w	r2, r2, #15
   17666:	2a01      	cmp	r2, #1
		data_len = (adv->len - BDADDR_SIZE);
   17668:	bf1c      	itt	ne
   1766a:	1f9e      	subne	r6, r3, #6
   1766c:	b2f6      	uxtbne	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1766e:	f106 020b 	add.w	r2, r6, #11
   17672:	b2d2      	uxtb	r2, r2
   17674:	2102      	movs	r1, #2
   17676:	4628      	mov	r0, r5
   17678:	f00a fb92 	bl	21da0 <meta_evt>
	sep->num_reports = 1;
   1767c:	2301      	movs	r3, #1
   1767e:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   17680:	7a23      	ldrb	r3, [r4, #8]
   17682:	aa06      	add	r2, sp, #24
   17684:	f003 030f 	and.w	r3, r3, #15
   17688:	4413      	add	r3, r2
		adv_info->addr.type = adv->tx_addr;
   1768a:	46a0      	mov	r8, r4
	adv_info->evt_type = c_adv_type[adv->type];
   1768c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   17690:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   17692:	f818 3f08 	ldrb.w	r3, [r8, #8]!
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   17696:	4605      	mov	r5, r0
		adv_info->addr.type = adv->tx_addr;
   17698:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1769c:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   1769e:	2206      	movs	r2, #6
   176a0:	f104 010a 	add.w	r1, r4, #10
   176a4:	3003      	adds	r0, #3
   176a6:	f007 ffaf 	bl	1f608 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   176aa:	350a      	adds	r5, #10
	adv_info->length = data_len;
   176ac:	f805 6c01 	strb.w	r6, [r5, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   176b0:	4632      	mov	r2, r6
   176b2:	f108 0108 	add.w	r1, r8, #8
   176b6:	4628      	mov	r0, r5
   176b8:	f007 ffa6 	bl	1f608 <memcpy>
	*prssi = rssi;
   176bc:	55af      	strb	r7, [r5, r6]
   176be:	e7c1      	b.n	17644 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   176c0:	6851      	ldr	r1, [r2, #4]
   176c2:	463a      	mov	r2, r7
   176c4:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   176c8:	4313      	orrs	r3, r2
   176ca:	d0bb      	beq.n	17644 <hci_evt_encode+0xe4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   176cc:	4b66      	ldr	r3, [pc, #408]	; (17868 <hci_evt_encode+0x308>)
   176ce:	6819      	ldr	r1, [r3, #0]
   176d0:	463b      	mov	r3, r7
   176d2:	f001 0201 	and.w	r2, r1, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   176d6:	4313      	orrs	r3, r2
   176d8:	d0b4      	beq.n	17644 <hci_evt_encode+0xe4>
	u8_t status = node_rx->status;
   176da:	7a07      	ldrb	r7, [r0, #8]
	if (!status) {
   176dc:	b91f      	cbnz	r7, 176e6 <hci_evt_encode+0x186>
		conn_count++;
   176de:	4a66      	ldr	r2, [pc, #408]	; (17878 <hci_evt_encode+0x318>)
   176e0:	6813      	ldr	r3, [r2, #0]
   176e2:	3301      	adds	r3, #1
   176e4:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   176e6:	4628      	mov	r0, r5
   176e8:	2212      	movs	r2, #18
   176ea:	2101      	movs	r1, #1
   176ec:	f00a fb58 	bl	21da0 <meta_evt>
   176f0:	4605      	mov	r5, r0
	if (status) {
   176f2:	b12f      	cbz	r7, 17700 <hci_evt_encode+0x1a0>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   176f4:	2212      	movs	r2, #18
   176f6:	2100      	movs	r1, #0
   176f8:	f007 ffb0 	bl	1f65c <memset>
		lecc->status = status;
   176fc:	702f      	strb	r7, [r5, #0]
		return;
   176fe:	e7a1      	b.n	17644 <hci_evt_encode+0xe4>
	lecc->status = 0x00;
   17700:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   17702:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = node_rx->role;
   17706:	7a63      	ldrb	r3, [r4, #9]
   17708:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type;
   1770a:	7aa3      	ldrb	r3, [r4, #10]
   1770c:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   1770e:	2206      	movs	r2, #6
   17710:	f104 010b 	add.w	r1, r4, #11
   17714:	3005      	adds	r0, #5
   17716:	f007 ff77 	bl	1f608 <memcpy>
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   1771a:	8a63      	ldrh	r3, [r4, #18]
   1771c:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   17720:	8aa3      	ldrh	r3, [r4, #20]
   17722:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   17726:	8ae3      	ldrh	r3, [r4, #22]
   17728:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = node_rx->sca;
   1772c:	7e23      	ldrb	r3, [r4, #24]
   1772e:	746b      	strb	r3, [r5, #17]
   17730:	e788      	b.n	17644 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   17732:	6811      	ldr	r1, [r2, #0]
   17734:	463b      	mov	r3, r7
   17736:	f001 0210 	and.w	r2, r1, #16
   1773a:	4313      	orrs	r3, r2
   1773c:	d082      	beq.n	17644 <hci_evt_encode+0xe4>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
   1773e:	2204      	movs	r2, #4
   17740:	2105      	movs	r1, #5
   17742:	4628      	mov	r0, r5
   17744:	f00a fb22 	bl	21d8c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   17748:	2104      	movs	r1, #4
   1774a:	f105 0008 	add.w	r0, r5, #8
   1774e:	f00a ff1c 	bl	2258a <net_buf_simple_add>
	conn_count--;
   17752:	4a49      	ldr	r2, [pc, #292]	; (17878 <hci_evt_encode+0x318>)
	ep->status = 0x00;
   17754:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   17756:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
   1775a:	7a23      	ldrb	r3, [r4, #8]
   1775c:	70c3      	strb	r3, [r0, #3]
	conn_count--;
   1775e:	6813      	ldr	r3, [r2, #0]
   17760:	3b01      	subs	r3, #1
   17762:	6013      	str	r3, [r2, #0]
   17764:	e76e      	b.n	17644 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17766:	6851      	ldr	r1, [r2, #4]
   17768:	463a      	mov	r2, r7
   1776a:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   1776e:	4313      	orrs	r3, r2
   17770:	f43f af68 	beq.w	17644 <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   17774:	4b3c      	ldr	r3, [pc, #240]	; (17868 <hci_evt_encode+0x308>)
   17776:	6819      	ldr	r1, [r3, #0]
   17778:	463b      	mov	r3, r7
   1777a:	f001 0204 	and.w	r2, r1, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1777e:	4313      	orrs	r3, r2
   17780:	f43f af60 	beq.w	17644 <hci_evt_encode+0xe4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   17784:	2209      	movs	r2, #9
   17786:	2103      	movs	r1, #3
   17788:	4628      	mov	r0, r5
   1778a:	f00a fb09 	bl	21da0 <meta_evt>
	sep->status = cu->status;
   1778e:	7a23      	ldrb	r3, [r4, #8]
   17790:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   17792:	8963      	ldrh	r3, [r4, #10]
   17794:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   17798:	89a3      	ldrh	r3, [r4, #12]
   1779a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1779e:	89e3      	ldrh	r3, [r4, #14]
	sep->handle = sys_cpu_to_le16(handle);
   177a0:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   177a4:	f8a0 3007 	strh.w	r3, [r0, #7]
   177a8:	e74c      	b.n	17644 <hci_evt_encode+0xe4>
	switch (pdu_data->llctrl.opcode) {
   177aa:	7ac3      	ldrb	r3, [r0, #11]
   177ac:	3b07      	subs	r3, #7
   177ae:	2b08      	cmp	r3, #8
   177b0:	d87d      	bhi.n	178ae <hci_evt_encode+0x34e>
   177b2:	e8df f003 	tbb	[pc, r3]
   177b6:	7c63      	.short	0x7c63
   177b8:	0f7c7c05 	.word	0x0f7c7c05
   177bc:	7c7c      	.short	0x7c7c
   177be:	2d          	.byte	0x2d
   177bf:	00          	.byte	0x00
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   177c0:	460b      	mov	r3, r1
   177c2:	4632      	mov	r2, r6
   177c4:	f100 0108 	add.w	r1, r0, #8
   177c8:	2000      	movs	r0, #0
}
   177ca:	b006      	add	sp, #24
   177cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   177d0:	f7ff ba2e 	b.w	16c30 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
   177d4:	4b22      	ldr	r3, [pc, #136]	; (17860 <hci_evt_encode+0x300>)
   177d6:	6819      	ldr	r1, [r3, #0]
   177d8:	2700      	movs	r7, #0
   177da:	f401 6200 	and.w	r2, r1, #2048	; 0x800
   177de:	463b      	mov	r3, r7
   177e0:	4313      	orrs	r3, r2
   177e2:	f43f af2f 	beq.w	17644 <hci_evt_encode+0xe4>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
   177e6:	2208      	movs	r2, #8
   177e8:	210c      	movs	r1, #12
   177ea:	4628      	mov	r0, r5
   177ec:	f00a face 	bl	21d8c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   177f0:	2108      	movs	r1, #8
   177f2:	1868      	adds	r0, r5, r1
   177f4:	f00a fec9 	bl	2258a <net_buf_simple_add>
	ep->status = 0x00;
   177f8:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   177fa:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
   177fe:	7b23      	ldrb	r3, [r4, #12]
   17800:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = ver_ind->company_id;
   17802:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   17806:	8083      	strh	r3, [r0, #4]
	ep->subversion = ver_ind->sub_version_number;
   17808:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   1780c:	80c3      	strh	r3, [r0, #6]
   1780e:	e719      	b.n	17644 <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17810:	4b13      	ldr	r3, [pc, #76]	; (17860 <hci_evt_encode+0x300>)
   17812:	6858      	ldr	r0, [r3, #4]
   17814:	2100      	movs	r1, #0
   17816:	460a      	mov	r2, r1
   17818:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1781c:	4313      	orrs	r3, r2
   1781e:	d006      	beq.n	1782e <hci_evt_encode+0x2ce>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   17820:	4b11      	ldr	r3, [pc, #68]	; (17868 <hci_evt_encode+0x308>)
   17822:	6818      	ldr	r0, [r3, #0]
   17824:	460b      	mov	r3, r1
   17826:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1782a:	4313      	orrs	r3, r2
   1782c:	d109      	bne.n	17842 <hci_evt_encode+0x2e2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1782e:	2300      	movs	r3, #0
   17830:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17834:	9300      	str	r3, [sp, #0]
   17836:	221a      	movs	r2, #26
   17838:	2102      	movs	r1, #2
   1783a:	4630      	mov	r0, r6
   1783c:	f00a fc23 	bl	22086 <ll_conn_update>
		return;
   17840:	e700      	b.n	17644 <hci_evt_encode+0xe4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   17842:	220a      	movs	r2, #10
   17844:	2106      	movs	r1, #6
   17846:	4628      	mov	r0, r5
   17848:	f00a faaa 	bl	21da0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1784c:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1784e:	89a3      	ldrh	r3, [r4, #12]
   17850:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   17852:	89e3      	ldrh	r3, [r4, #14]
   17854:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   17856:	8a23      	ldrh	r3, [r4, #16]
   17858:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1785a:	8a63      	ldrh	r3, [r4, #18]
   1785c:	8103      	strh	r3, [r0, #8]
   1785e:	e6f1      	b.n	17644 <hci_evt_encode+0xe4>
   17860:	20007220 	.word	0x20007220
   17864:	ff030100 	.word	0xff030100
   17868:	20007228 	.word	0x20007228
   1786c:	000233ec 	.word	0x000233ec
   17870:	0002340c 	.word	0x0002340c
   17874:	000282fb 	.word	0x000282fb
   17878:	20000d64 	.word	0x20000d64
		le_unknown_rsp(pdu_data, handle, buf);
   1787c:	7b01      	ldrb	r1, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1787e:	290e      	cmp	r1, #14
   17880:	d104      	bne.n	1788c <hci_evt_encode+0x32c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   17882:	462b      	mov	r3, r5
   17884:	4632      	mov	r2, r6
   17886:	2100      	movs	r1, #0
   17888:	201a      	movs	r0, #26
   1788a:	e79e      	b.n	177ca <hci_evt_encode+0x26a>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1788c:	2302      	movs	r3, #2
   1788e:	f04f 0200 	mov.w	r2, #0
   17892:	f363 0207 	bfi	r2, r3, #0, #8
   17896:	480c      	ldr	r0, [pc, #48]	; (178c8 <hci_evt_encode+0x368>)
   17898:	4b0c      	ldr	r3, [pc, #48]	; (178cc <hci_evt_encode+0x36c>)
   1789a:	1a1b      	subs	r3, r3, r0
   1789c:	08db      	lsrs	r3, r3, #3
   1789e:	480c      	ldr	r0, [pc, #48]	; (178d0 <hci_evt_encode+0x370>)
   178a0:	f363 128f 	bfi	r2, r3, #6, #10
}
   178a4:	b006      	add	sp, #24
   178a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   178aa:	f006 bdd7 	b.w	1e45c <log_1>
		LL_ASSERT(0);
   178ae:	2301      	movs	r3, #1
   178b0:	f04f 0100 	mov.w	r1, #0
   178b4:	f363 0107 	bfi	r1, r3, #0, #8
   178b8:	4a03      	ldr	r2, [pc, #12]	; (178c8 <hci_evt_encode+0x368>)
   178ba:	4b04      	ldr	r3, [pc, #16]	; (178cc <hci_evt_encode+0x36c>)
   178bc:	4805      	ldr	r0, [pc, #20]	; (178d4 <hci_evt_encode+0x374>)
   178be:	1a9b      	subs	r3, r3, r2
   178c0:	08db      	lsrs	r3, r3, #3
   178c2:	f363 118f 	bfi	r1, r3, #6, #10
   178c6:	e698      	b.n	175fa <hci_evt_encode+0x9a>
   178c8:	000233ec 	.word	0x000233ec
   178cc:	0002340c 	.word	0x0002340c
   178d0:	00028331 	.word	0x00028331
   178d4:	0002822a 	.word	0x0002822a

000178d8 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   178d8:	4b06      	ldr	r3, [pc, #24]	; (178f4 <hci_init+0x1c>)
   178da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   178de:	f641 71ff 	movw	r1, #8191	; 0x1fff
   178e2:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   178e6:	4b04      	ldr	r3, [pc, #16]	; (178f8 <hci_init+0x20>)
   178e8:	201f      	movs	r0, #31
   178ea:	2100      	movs	r1, #0
   178ec:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   178f0:	4770      	bx	lr
   178f2:	bf00      	nop
   178f4:	20007220 	.word	0x20007220
   178f8:	20007228 	.word	0x20007228

000178fc <pdu_len_cmp>:
{
   178fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
   178fe:	4b0d      	ldr	r3, [pc, #52]	; (17934 <pdu_len_cmp+0x38>)
{
   17900:	b089      	sub	sp, #36	; 0x24
   17902:	4605      	mov	r5, r0
   17904:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
   17906:	aa01      	add	r2, sp, #4
   17908:	f103 0718 	add.w	r7, r3, #24
   1790c:	6818      	ldr	r0, [r3, #0]
   1790e:	6859      	ldr	r1, [r3, #4]
   17910:	4614      	mov	r4, r2
   17912:	c403      	stmia	r4!, {r0, r1}
   17914:	3308      	adds	r3, #8
   17916:	42bb      	cmp	r3, r7
   17918:	4622      	mov	r2, r4
   1791a:	d1f7      	bne.n	1790c <pdu_len_cmp+0x10>
   1791c:	881b      	ldrh	r3, [r3, #0]
   1791e:	8023      	strh	r3, [r4, #0]
	return ctrl_len_lut[opcode] == len;
   17920:	ab08      	add	r3, sp, #32
   17922:	441d      	add	r5, r3
   17924:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   17928:	1b83      	subs	r3, r0, r6
   1792a:	4258      	negs	r0, r3
   1792c:	4158      	adcs	r0, r3
   1792e:	b009      	add	sp, #36	; 0x24
   17930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17932:	bf00      	nop
   17934:	000235cf 	.word	0x000235cf

00017938 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
   17938:	4b02      	ldr	r3, [pc, #8]	; (17944 <mayfly_xtal_start+0xc>)
   1793a:	6818      	ldr	r0, [r3, #0]
   1793c:	6843      	ldr	r3, [r0, #4]
   1793e:	2100      	movs	r1, #0
   17940:	681b      	ldr	r3, [r3, #0]
   17942:	4718      	bx	r3
   17944:	20000d68 	.word	0x20000d68

00017948 <packet_rx_reserve_get>:
{
   17948:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   1794a:	4b0e      	ldr	r3, [pc, #56]	; (17984 <packet_rx_reserve_get+0x3c>)
	    _radio.packet_rx_last) {
   1794c:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
	if (_radio.packet_rx_acquire >=
   17950:	f893 113a 	ldrb.w	r1, [r3, #314]	; 0x13a
   17954:	4291      	cmp	r1, r2
		return (_radio.packet_rx_count -
   17956:	bf3b      	ittet	cc
   17958:	f893 2138 	ldrbcc.w	r2, [r3, #312]	; 0x138
			_radio.packet_rx_last +
   1795c:	f893 4139 	ldrbcc.w	r4, [r3, #313]	; 0x139
			_radio.packet_rx_last);
   17960:	f893 2139 	ldrbcs.w	r2, [r3, #313]	; 0x139
		return (_radio.packet_rx_count -
   17964:	1b12      	subcc	r2, r2, r4
		return (_radio.packet_rx_acquire -
   17966:	bf2c      	ite	cs
   17968:	1a8a      	subcs	r2, r1, r2
			_radio.packet_rx_last +
   1796a:	1852      	addcc	r2, r2, r1
   1796c:	b2d2      	uxtb	r2, r2
	if (count > packet_rx_acquired_count_get()) {
   1796e:	4290      	cmp	r0, r2
	return _radio.packet_rx[_radio.packet_rx_last];
   17970:	bf9b      	ittet	ls
   17972:	f893 2139 	ldrbls.w	r2, [r3, #313]	; 0x139
   17976:	f8d3 3134 	ldrls.w	r3, [r3, #308]	; 0x134
		return 0;
   1797a:	2000      	movhi	r0, #0
	return _radio.packet_rx[_radio.packet_rx_last];
   1797c:	f853 0022 	ldrls.w	r0, [r3, r2, lsl #2]
}
   17980:	bd10      	pop	{r4, pc}
   17982:	bf00      	nop
   17984:	20000d68 	.word	0x20000d68

00017988 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_PHY */
#endif /* CONFIG_BT_CONN */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
   17988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
   1798c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   1798e:	4294      	cmp	r4, r2
{
   17990:	4681      	mov	r9, r0
   17992:	460f      	mov	r7, r1
   17994:	4690      	mov	r8, r2
	if (_first == last) {
   17996:	d03a      	beq.n	17a0e <tx_cmplt_get+0x86>
		return 0;
	}

	cmplt = 0U;
	*handle = _radio.pkt_release[_first].handle;
   17998:	4e1e      	ldr	r6, [pc, #120]	; (17a14 <tx_cmplt_get+0x8c>)
   1799a:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
   1799e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   179a2:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   179a4:	2500      	movs	r5, #0
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   179a6:	f506 7aae 	add.w	sl, r6, #348	; 0x15c
		if (*handle != _radio.pkt_release[_first].handle) {
   179aa:	b223      	sxth	r3, r4
   179ac:	f8d6 1168 	ldr.w	r1, [r6, #360]	; 0x168
   179b0:	f8b9 0000 	ldrh.w	r0, [r9]
   179b4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   179b8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   179bc:	4298      	cmp	r0, r3
   179be:	d120      	bne.n	17a02 <tx_cmplt_get+0x7a>
		node_tx = _radio.pkt_release[_first].node_tx;
   179c0:	6850      	ldr	r0, [r2, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
   179c2:	2801      	cmp	r0, #1
   179c4:	f020 0103 	bic.w	r1, r0, #3
   179c8:	d90a      	bls.n	179e0 <tx_cmplt_get+0x58>
   179ca:	b1f1      	cbz	r1, 17a0a <tx_cmplt_get+0x82>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   179cc:	1d03      	adds	r3, r0, #4
   179ce:	d01c      	beq.n	17a0a <tx_cmplt_get+0x82>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   179d0:	7943      	ldrb	r3, [r0, #5]
   179d2:	b1d3      	cbz	r3, 17a0a <tx_cmplt_get+0x82>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   179d4:	7903      	ldrb	r3, [r0, #4]
   179d6:	f003 0303 	and.w	r3, r3, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   179da:	3b01      	subs	r3, #1
   179dc:	2b01      	cmp	r3, #1
   179de:	d814      	bhi.n	17a0a <tx_cmplt_get+0x82>
			cmplt++;
   179e0:	3501      	adds	r5, #1
   179e2:	b2ed      	uxtb	r5, r5
			_radio.pkt_release[_first].node_tx = (void *)1;
   179e4:	2301      	movs	r3, #1
   179e6:	6053      	str	r3, [r2, #4]
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   179e8:	b111      	cbz	r1, 179f0 <tx_cmplt_get+0x68>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   179ea:	4651      	mov	r1, sl
   179ec:	f00a f8b4 	bl	21b58 <mem_release>
		}

		_first = _first + 1;
   179f0:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
   179f2:	f896 316c 	ldrb.w	r3, [r6, #364]	; 0x16c
		_first = _first + 1;
   179f6:	b2e4      	uxtb	r4, r4
			_first = 0U;
   179f8:	42a3      	cmp	r3, r4
   179fa:	bf08      	it	eq
   179fc:	2400      	moveq	r4, #0
		}

	} while (_first != last);
   179fe:	4544      	cmp	r4, r8
   17a00:	d1d3      	bne.n	179aa <tx_cmplt_get+0x22>

	*first = _first;
   17a02:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
   17a04:	4628      	mov	r0, r5
   17a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
   17a0a:	2302      	movs	r3, #2
   17a0c:	e7eb      	b.n	179e6 <tx_cmplt_get+0x5e>
		return 0;
   17a0e:	2500      	movs	r5, #0
   17a10:	e7f8      	b.n	17a04 <tx_cmplt_get+0x7c>
   17a12:	bf00      	nop
   17a14:	20000d68 	.word	0x20000d68

00017a18 <mayfly_xtal_retain>:
{
   17a18:	b538      	push	{r3, r4, r5, lr}
   17a1a:	4b1c      	ldr	r3, [pc, #112]	; (17a8c <mayfly_xtal_retain+0x74>)
   17a1c:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
   17a1e:	b351      	cbz	r1, 17a76 <mayfly_xtal_retain+0x5e>
		if (!s_xtal_retained) {
   17a20:	2a00      	cmp	r2, #0
   17a22:	d132      	bne.n	17a8a <mayfly_xtal_retain+0x72>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   17a24:	2801      	cmp	r0, #1
   17a26:	d013      	beq.n	17a50 <mayfly_xtal_retain+0x38>
   17a28:	2301      	movs	r3, #1
   17a2a:	f04f 0100 	mov.w	r1, #0
   17a2e:	f363 0107 	bfi	r1, r3, #0, #8
   17a32:	4a17      	ldr	r2, [pc, #92]	; (17a90 <mayfly_xtal_retain+0x78>)
   17a34:	4b17      	ldr	r3, [pc, #92]	; (17a94 <mayfly_xtal_retain+0x7c>)
   17a36:	4818      	ldr	r0, [pc, #96]	; (17a98 <mayfly_xtal_retain+0x80>)
   17a38:	1a9b      	subs	r3, r3, r2
   17a3a:	08db      	lsrs	r3, r3, #3
   17a3c:	f363 118f 	bfi	r1, r3, #6, #10
			LL_ASSERT(!retval);
   17a40:	f006 fcff 	bl	1e442 <log_0>
   17a44:	4040      	eors	r0, r0
   17a46:	f380 8811 	msr	BASEPRI, r0
   17a4a:	f04f 0004 	mov.w	r0, #4
   17a4e:	df02      	svc	2
			s_xtal_retained = 1U;
   17a50:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   17a52:	4b12      	ldr	r3, [pc, #72]	; (17a9c <mayfly_xtal_retain+0x84>)
   17a54:	4611      	mov	r1, r2
   17a56:	f7fe f8c3 	bl	15be0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   17a5a:	b1b0      	cbz	r0, 17a8a <mayfly_xtal_retain+0x72>
   17a5c:	2301      	movs	r3, #1
   17a5e:	f04f 0100 	mov.w	r1, #0
   17a62:	f363 0107 	bfi	r1, r3, #0, #8
   17a66:	4a0a      	ldr	r2, [pc, #40]	; (17a90 <mayfly_xtal_retain+0x78>)
   17a68:	4b0a      	ldr	r3, [pc, #40]	; (17a94 <mayfly_xtal_retain+0x7c>)
   17a6a:	480d      	ldr	r0, [pc, #52]	; (17aa0 <mayfly_xtal_retain+0x88>)
   17a6c:	1a9b      	subs	r3, r3, r2
   17a6e:	08db      	lsrs	r3, r3, #3
   17a70:	f363 118f 	bfi	r1, r3, #6, #10
   17a74:	e7e4      	b.n	17a40 <mayfly_xtal_retain+0x28>
		if (s_xtal_retained) {
   17a76:	b142      	cbz	r2, 17a8a <mayfly_xtal_retain+0x72>
			s_xtal_retained = 0U;
   17a78:	7019      	strb	r1, [r3, #0]
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   17a7a:	4b0a      	ldr	r3, [pc, #40]	; (17aa4 <mayfly_xtal_retain+0x8c>)
   17a7c:	f103 0210 	add.w	r2, r3, #16
			retval = mayfly_enqueue(caller_id,
   17a80:	2801      	cmp	r0, #1
   17a82:	bf08      	it	eq
   17a84:	4613      	moveq	r3, r2
   17a86:	460a      	mov	r2, r1
   17a88:	e7e5      	b.n	17a56 <mayfly_xtal_retain+0x3e>
}
   17a8a:	bd38      	pop	{r3, r4, r5, pc}
   17a8c:	20002309 	.word	0x20002309
   17a90:	000233ec 	.word	0x000233ec
   17a94:	0002341c 	.word	0x0002341c
   17a98:	00028809 	.word	0x00028809
   17a9c:	20007e10 	.word	0x20007e10
   17aa0:	00028829 	.word	0x00028829
   17aa4:	20007e20 	.word	0x20007e20

00017aa8 <adv_scan_conn_configure>:
{
   17aa8:	b508      	push	{r3, lr}
	radio_reset();
   17aaa:	f002 fc17 	bl	1a2dc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   17aae:	2000      	movs	r0, #0
   17ab0:	f002 fc3e 	bl	1a330 <radio_tx_power_set>
	radio_isr_set(isr, NULL);
   17ab4:	2100      	movs	r1, #0
   17ab6:	4802      	ldr	r0, [pc, #8]	; (17ac0 <adv_scan_conn_configure+0x18>)
}
   17ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_isr_set(isr, NULL);
   17abc:	f002 bbee 	b.w	1a29c <radio_isr_set>
   17ac0:	00000dd9 	.word	0x00000dd9

00017ac4 <packet_rx_enqueue>:
{
   17ac4:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   17ac6:	4a23      	ldr	r2, [pc, #140]	; (17b54 <packet_rx_enqueue+0x90>)
   17ac8:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
   17acc:	f892 113a 	ldrb.w	r1, [r2, #314]	; 0x13a
   17ad0:	4299      	cmp	r1, r3
   17ad2:	d113      	bne.n	17afc <packet_rx_enqueue+0x38>
   17ad4:	2301      	movs	r3, #1
   17ad6:	f04f 0100 	mov.w	r1, #0
   17ada:	f363 0107 	bfi	r1, r3, #0, #8
   17ade:	4a1e      	ldr	r2, [pc, #120]	; (17b58 <packet_rx_enqueue+0x94>)
   17ae0:	4b1e      	ldr	r3, [pc, #120]	; (17b5c <packet_rx_enqueue+0x98>)
   17ae2:	481f      	ldr	r0, [pc, #124]	; (17b60 <packet_rx_enqueue+0x9c>)
   17ae4:	1a9b      	subs	r3, r3, r2
   17ae6:	08db      	lsrs	r3, r3, #3
   17ae8:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(link);
   17aec:	f006 fca9 	bl	1e442 <log_0>
   17af0:	4040      	eors	r0, r0
   17af2:	f380 8811 	msr	BASEPRI, r0
   17af6:	f04f 0004 	mov.w	r0, #4
   17afa:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   17afc:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
   17b00:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   17b04:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   17b08:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	link = node_rx->hdr.link;
   17b0c:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   17b0e:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
   17b10:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
	if (last == _radio.packet_rx_count) {
   17b14:	f892 4138 	ldrb.w	r4, [r2, #312]	; 0x138
	last = _radio.packet_rx_last + 1;
   17b18:	3301      	adds	r3, #1
   17b1a:	b2db      	uxtb	r3, r3
		last = 0U;
   17b1c:	429c      	cmp	r4, r3
   17b1e:	bf08      	it	eq
   17b20:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
   17b22:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   17b26:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   17b2a:	f00a f844 	bl	21bb6 <memq_enqueue>
	LL_ASSERT(link);
   17b2e:	b960      	cbnz	r0, 17b4a <packet_rx_enqueue+0x86>
   17b30:	2301      	movs	r3, #1
   17b32:	f04f 0100 	mov.w	r1, #0
   17b36:	f363 0107 	bfi	r1, r3, #0, #8
   17b3a:	4a07      	ldr	r2, [pc, #28]	; (17b58 <packet_rx_enqueue+0x94>)
   17b3c:	4b07      	ldr	r3, [pc, #28]	; (17b5c <packet_rx_enqueue+0x98>)
   17b3e:	4809      	ldr	r0, [pc, #36]	; (17b64 <packet_rx_enqueue+0xa0>)
   17b40:	1a9b      	subs	r3, r3, r2
   17b42:	08db      	lsrs	r3, r3, #3
   17b44:	f363 118f 	bfi	r1, r3, #6, #10
   17b48:	e7d0      	b.n	17aec <packet_rx_enqueue+0x28>
}
   17b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   17b4e:	f002 b81d 	b.w	19b8c <radio_event_callback>
   17b52:	bf00      	nop
   17b54:	20000d68 	.word	0x20000d68
   17b58:	000233ec 	.word	0x000233ec
   17b5c:	0002341c 	.word	0x0002341c
   17b60:	00028893 	.word	0x00028893
   17b64:	000288d6 	.word	0x000288d6

00017b68 <rx_fc_lock>:
}

#if defined(CONFIG_BT_CONN)
static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   17b68:	4a0b      	ldr	r2, [pc, #44]	; (17b98 <rx_fc_lock+0x30>)
   17b6a:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
   17b6e:	f892 1179 	ldrb.w	r1, [r2, #377]	; 0x179
   17b72:	4299      	cmp	r1, r3
   17b74:	d10e      	bne.n	17b94 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   17b76:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
   17b7a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   17b7e:	f8a3 0172 	strh.w	r0, [r3, #370]	; 0x172
		req = _radio.fc_req + 1;
   17b82:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
   17b86:	3301      	adds	r3, #1
   17b88:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0U;
   17b8a:	2b03      	cmp	r3, #3
   17b8c:	bf08      	it	eq
   17b8e:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
   17b90:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
	}
}
   17b94:	4770      	bx	lr
   17b96:	bf00      	nop
   17b98:	20000d68 	.word	0x20000d68

00017b9c <ticker_start_conn_assert.part.7>:
static void ticker_success_assert(u32_t status, void *params)
   17b9c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17b9e:	f04f 0100 	mov.w	r1, #0
   17ba2:	2301      	movs	r3, #1
   17ba4:	4a08      	ldr	r2, [pc, #32]	; (17bc8 <ticker_start_conn_assert.part.7+0x2c>)
   17ba6:	4809      	ldr	r0, [pc, #36]	; (17bcc <ticker_start_conn_assert.part.7+0x30>)
   17ba8:	f363 0107 	bfi	r1, r3, #0, #8
   17bac:	4b08      	ldr	r3, [pc, #32]	; (17bd0 <ticker_start_conn_assert.part.7+0x34>)
   17bae:	1a9b      	subs	r3, r3, r2
   17bb0:	08db      	lsrs	r3, r3, #3
   17bb2:	f363 118f 	bfi	r1, r3, #6, #10
   17bb6:	f006 fc44 	bl	1e442 <log_0>
   17bba:	4040      	eors	r0, r0
   17bbc:	f380 8811 	msr	BASEPRI, r0
   17bc0:	f04f 0004 	mov.w	r0, #4
   17bc4:	df02      	svc	2
   17bc6:	bf00      	nop
   17bc8:	000233ec 	.word	0x000233ec
   17bcc:	00028b35 	.word	0x00028b35
   17bd0:	0002341c 	.word	0x0002341c

00017bd4 <ticker_start_conn_assert>:
{
   17bd4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17bd6:	b108      	cbz	r0, 17bdc <ticker_start_conn_assert+0x8>
   17bd8:	f7ff ffe0 	bl	17b9c <ticker_start_conn_assert.part.7>
	_radio.ticker_id_upd = 0;
   17bdc:	4b01      	ldr	r3, [pc, #4]	; (17be4 <ticker_start_conn_assert+0x10>)
   17bde:	74d8      	strb	r0, [r3, #19]
}
   17be0:	bd08      	pop	{r3, pc}
   17be2:	bf00      	nop
   17be4:	20000d68 	.word	0x20000d68

00017be8 <ticker_stop_conn_assert>:
{
   17be8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17bea:	b108      	cbz	r0, 17bf0 <ticker_stop_conn_assert+0x8>
   17bec:	f7ff ffd6 	bl	17b9c <ticker_start_conn_assert.part.7>
	_radio.ticker_id_upd = (u8_t)((u32_t)params & 0xFF);
   17bf0:	4b01      	ldr	r3, [pc, #4]	; (17bf8 <ticker_stop_conn_assert+0x10>)
   17bf2:	b2c9      	uxtb	r1, r1
   17bf4:	74d9      	strb	r1, [r3, #19]
}
   17bf6:	bd08      	pop	{r3, pc}
   17bf8:	20000d68 	.word	0x20000d68

00017bfc <chan_set.part.25>:
static void ticker_stop_adv_assert(u32_t status, void *params)
   17bfc:	b508      	push	{r3, lr}
			LL_ASSERT(0);
   17bfe:	f04f 0100 	mov.w	r1, #0
   17c02:	2301      	movs	r3, #1
   17c04:	4a08      	ldr	r2, [pc, #32]	; (17c28 <chan_set.part.25+0x2c>)
   17c06:	4809      	ldr	r0, [pc, #36]	; (17c2c <chan_set.part.25+0x30>)
   17c08:	f363 0107 	bfi	r1, r3, #0, #8
   17c0c:	4b08      	ldr	r3, [pc, #32]	; (17c30 <chan_set.part.25+0x34>)
   17c0e:	1a9b      	subs	r3, r3, r2
   17c10:	08db      	lsrs	r3, r3, #3
   17c12:	f363 118f 	bfi	r1, r3, #6, #10
   17c16:	f006 fc14 	bl	1e442 <log_0>
   17c1a:	4040      	eors	r0, r0
   17c1c:	f380 8811 	msr	BASEPRI, r0
   17c20:	f04f 0004 	mov.w	r0, #4
   17c24:	df02      	svc	2
   17c26:	bf00      	nop
   17c28:	000233ec 	.word	0x000233ec
   17c2c:	0002822a 	.word	0x0002822a
   17c30:	0002341c 	.word	0x0002341c

00017c34 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   17c34:	2801      	cmp	r0, #1
{
   17c36:	b508      	push	{r3, lr}
   17c38:	4b10      	ldr	r3, [pc, #64]	; (17c7c <ticker_stop_adv_assert+0x48>)
	if (status == TICKER_STATUS_FAILURE) {
   17c3a:	d107      	bne.n	17c4c <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   17c3c:	7c9a      	ldrb	r2, [r3, #18]
   17c3e:	2a05      	cmp	r2, #5
   17c40:	d102      	bne.n	17c48 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0U;
   17c42:	2200      	movs	r2, #0
   17c44:	749a      	strb	r2, [r3, #18]
}
   17c46:	bd08      	pop	{r3, pc}
   17c48:	f7ff ffd8 	bl	17bfc <chan_set.part.25>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   17c4c:	7c1b      	ldrb	r3, [r3, #16]
   17c4e:	2b05      	cmp	r3, #5
   17c50:	d1f9      	bne.n	17c46 <ticker_stop_adv_assert+0x12>
   17c52:	2301      	movs	r3, #1
   17c54:	f04f 0100 	mov.w	r1, #0
   17c58:	4a09      	ldr	r2, [pc, #36]	; (17c80 <ticker_stop_adv_assert+0x4c>)
   17c5a:	480a      	ldr	r0, [pc, #40]	; (17c84 <ticker_stop_adv_assert+0x50>)
   17c5c:	f363 0107 	bfi	r1, r3, #0, #8
   17c60:	4b09      	ldr	r3, [pc, #36]	; (17c88 <ticker_stop_adv_assert+0x54>)
   17c62:	1a9b      	subs	r3, r3, r2
   17c64:	08db      	lsrs	r3, r3, #3
   17c66:	f363 118f 	bfi	r1, r3, #6, #10
   17c6a:	f006 fbea 	bl	1e442 <log_0>
   17c6e:	4040      	eors	r0, r0
   17c70:	f380 8811 	msr	BASEPRI, r0
   17c74:	f04f 0004 	mov.w	r0, #4
   17c78:	df02      	svc	2
   17c7a:	bf00      	nop
   17c7c:	20000d68 	.word	0x20000d68
   17c80:	000233ec 	.word	0x000233ec
   17c84:	00028ada 	.word	0x00028ada
   17c88:	0002341c 	.word	0x0002341c

00017c8c <ticker_update_adv_assert>:
{
   17c8c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17c8e:	b1b8      	cbz	r0, 17cc0 <ticker_update_adv_assert+0x34>
   17c90:	4b0c      	ldr	r3, [pc, #48]	; (17cc4 <ticker_update_adv_assert+0x38>)
   17c92:	7c9b      	ldrb	r3, [r3, #18]
   17c94:	2b05      	cmp	r3, #5
   17c96:	d013      	beq.n	17cc0 <ticker_update_adv_assert+0x34>
   17c98:	2301      	movs	r3, #1
   17c9a:	f04f 0100 	mov.w	r1, #0
   17c9e:	4a0a      	ldr	r2, [pc, #40]	; (17cc8 <ticker_update_adv_assert+0x3c>)
   17ca0:	480a      	ldr	r0, [pc, #40]	; (17ccc <ticker_update_adv_assert+0x40>)
   17ca2:	f363 0107 	bfi	r1, r3, #0, #8
   17ca6:	4b0a      	ldr	r3, [pc, #40]	; (17cd0 <ticker_update_adv_assert+0x44>)
   17ca8:	1a9b      	subs	r3, r3, r2
   17caa:	08db      	lsrs	r3, r3, #3
   17cac:	f363 118f 	bfi	r1, r3, #6, #10
   17cb0:	f006 fbc7 	bl	1e442 <log_0>
   17cb4:	4040      	eors	r0, r0
   17cb6:	f380 8811 	msr	BASEPRI, r0
   17cba:	f04f 0004 	mov.w	r0, #4
   17cbe:	df02      	svc	2
}
   17cc0:	bd08      	pop	{r3, pc}
   17cc2:	bf00      	nop
   17cc4:	20000d68 	.word	0x20000d68
   17cc8:	000233ec 	.word	0x000233ec
   17ccc:	00028b52 	.word	0x00028b52
   17cd0:	0002341c 	.word	0x0002341c

00017cd4 <ticker_update_slave_assert>:
{
   17cd4:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17cd6:	b1d8      	cbz	r0, 17d10 <ticker_update_slave_assert+0x3c>
   17cd8:	4b0e      	ldr	r3, [pc, #56]	; (17d14 <ticker_update_slave_assert+0x40>)
   17cda:	7c9a      	ldrb	r2, [r3, #18]
	u8_t ticker_id = (u32_t)params & 0xFF;
   17cdc:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17cde:	428a      	cmp	r2, r1
   17ce0:	d016      	beq.n	17d10 <ticker_update_slave_assert+0x3c>
   17ce2:	7cdb      	ldrb	r3, [r3, #19]
   17ce4:	428b      	cmp	r3, r1
   17ce6:	d013      	beq.n	17d10 <ticker_update_slave_assert+0x3c>
   17ce8:	2301      	movs	r3, #1
   17cea:	f04f 0100 	mov.w	r1, #0
   17cee:	4a0a      	ldr	r2, [pc, #40]	; (17d18 <ticker_update_slave_assert+0x44>)
   17cf0:	480a      	ldr	r0, [pc, #40]	; (17d1c <ticker_update_slave_assert+0x48>)
   17cf2:	f363 0107 	bfi	r1, r3, #0, #8
   17cf6:	4b0a      	ldr	r3, [pc, #40]	; (17d20 <ticker_update_slave_assert+0x4c>)
   17cf8:	1a9b      	subs	r3, r3, r2
   17cfa:	08db      	lsrs	r3, r3, #3
   17cfc:	f363 118f 	bfi	r1, r3, #6, #10
   17d00:	f006 fb9f 	bl	1e442 <log_0>
   17d04:	4040      	eors	r0, r0
   17d06:	f380 8811 	msr	BASEPRI, r0
   17d0a:	f04f 0004 	mov.w	r0, #4
   17d0e:	df02      	svc	2
}
   17d10:	bd08      	pop	{r3, pc}
   17d12:	bf00      	nop
   17d14:	20000d68 	.word	0x20000d68
   17d18:	000233ec 	.word	0x000233ec
   17d1c:	00028b91 	.word	0x00028b91
   17d20:	0002341c 	.word	0x0002341c

00017d24 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
   17d24:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   17d26:	b198      	cbz	r0, 17d50 <ticker_op_latency_cancelled+0x2c>
   17d28:	2301      	movs	r3, #1
   17d2a:	f04f 0100 	mov.w	r1, #0
   17d2e:	4a0c      	ldr	r2, [pc, #48]	; (17d60 <ticker_op_latency_cancelled+0x3c>)
   17d30:	480c      	ldr	r0, [pc, #48]	; (17d64 <ticker_op_latency_cancelled+0x40>)
   17d32:	f363 0107 	bfi	r1, r3, #0, #8
   17d36:	4b0c      	ldr	r3, [pc, #48]	; (17d68 <ticker_op_latency_cancelled+0x44>)
   17d38:	1a9b      	subs	r3, r3, r2
   17d3a:	08db      	lsrs	r3, r3, #3
   17d3c:	f363 118f 	bfi	r1, r3, #6, #10
   17d40:	f006 fb7f 	bl	1e442 <log_0>
   17d44:	4040      	eors	r0, r0
   17d46:	f380 8811 	msr	BASEPRI, r0
   17d4a:	f04f 0004 	mov.w	r0, #4
   17d4e:	df02      	svc	2

	conn->slave.latency_cancel = 0U;
   17d50:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   17d54:	f360 0341 	bfi	r3, r0, #1, #1
   17d58:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
}
   17d5c:	bd08      	pop	{r3, pc}
   17d5e:	bf00      	nop
   17d60:	000233ec 	.word	0x000233ec
   17d64:	00028ab6 	.word	0x00028ab6
   17d68:	0002341c 	.word	0x0002341c

00017d6c <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
   17d6c:	4b04      	ldr	r3, [pc, #16]	; (17d80 <ticker_job_disable+0x14>)
   17d6e:	7d5b      	ldrb	r3, [r3, #21]
   17d70:	b123      	cbz	r3, 17d7c <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   17d72:	2101      	movs	r1, #1
   17d74:	2200      	movs	r2, #0
   17d76:	4608      	mov	r0, r1
   17d78:	f7fd bf0a 	b.w	15b90 <mayfly_enable>
}
   17d7c:	4770      	bx	lr
   17d7e:	bf00      	nop
   17d80:	20000d68 	.word	0x20000d68

00017d84 <connection_get>:
{
   17d84:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
   17d86:	4b0a      	ldr	r3, [pc, #40]	; (17db0 <connection_get+0x2c>)
   17d88:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
   17d8c:	4282      	cmp	r2, r0
{
   17d8e:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
   17d90:	d801      	bhi.n	17d96 <connection_get+0x12>
	return 0;
   17d92:	2000      	movs	r0, #0
}
   17d94:	bd10      	pop	{r4, pc}
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   17d96:	4602      	mov	r2, r0
   17d98:	f44f 7196 	mov.w	r1, #300	; 0x12c
   17d9c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   17da0:	f009 feef 	bl	21b82 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   17da4:	2800      	cmp	r0, #0
   17da6:	d0f4      	beq.n	17d92 <connection_get+0xe>
   17da8:	8c03      	ldrh	r3, [r0, #32]
   17daa:	42a3      	cmp	r3, r4
   17dac:	d1f1      	bne.n	17d92 <connection_get+0xe>
   17dae:	e7f1      	b.n	17d94 <connection_get+0x10>
   17db0:	20000d68 	.word	0x20000d68

00017db4 <role_disable>:
{
   17db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17db8:	b087      	sub	sp, #28
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   17dba:	2502      	movs	r5, #2
	switch (ticker_id_primary) {
   17dbc:	2805      	cmp	r0, #5
{
   17dbe:	4606      	mov	r6, r0
   17dc0:	4688      	mov	r8, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   17dc2:	9502      	str	r5, [sp, #8]
	switch (ticker_id_primary) {
   17dc4:	d00b      	beq.n	17dde <role_disable+0x2a>
   17dc6:	2806      	cmp	r0, #6
   17dc8:	d048      	beq.n	17e5c <role_disable+0xa8>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   17dca:	d94b      	bls.n	17e64 <role_disable+0xb0>
			conn_handle = ticker_id_primary -
   17dcc:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   17dce:	b280      	uxth	r0, r0
   17dd0:	f7ff ffd8 	bl	17d84 <connection_get>
			if (!conn) {
   17dd4:	2800      	cmp	r0, #0
   17dd6:	d067      	beq.n	17ea8 <role_disable+0xf4>
			ticks_active_to_start =
   17dd8:	e9d0 7900 	ldrd	r7, r9, [r0]
		break;
   17ddc:	e00e      	b.n	17dfc <role_disable+0x48>
		ticks_xtal_to_start =
   17dde:	4ba6      	ldr	r3, [pc, #664]	; (18078 <role_disable+0x2c4>)
		ticks_active_to_start =
   17de0:	e9d3 7906 	ldrd	r7, r9, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17de4:	ab02      	add	r3, sp, #8
   17de6:	9300      	str	r3, [sp, #0]
   17de8:	460a      	mov	r2, r1
   17dea:	4ba4      	ldr	r3, [pc, #656]	; (1807c <role_disable+0x2c8>)
   17dec:	2103      	movs	r1, #3
   17dee:	2000      	movs	r0, #0
   17df0:	f7fe fca6 	bl	16740 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   17df4:	2802      	cmp	r0, #2
   17df6:	d016      	beq.n	17e26 <role_disable+0x72>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   17df8:	9b02      	ldr	r3, [sp, #8]
   17dfa:	b9c3      	cbnz	r3, 17e2e <role_disable+0x7a>
	LL_ASSERT(!_radio.ticker_id_stop);
   17dfc:	4c9e      	ldr	r4, [pc, #632]	; (18078 <role_disable+0x2c4>)
   17dfe:	7ca3      	ldrb	r3, [r4, #18]
   17e00:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   17e04:	2b00      	cmp	r3, #0
   17e06:	d03a      	beq.n	17e7e <role_disable+0xca>
   17e08:	2301      	movs	r3, #1
   17e0a:	f04f 0100 	mov.w	r1, #0
   17e0e:	f363 0107 	bfi	r1, r3, #0, #8
   17e12:	4a9b      	ldr	r2, [pc, #620]	; (18080 <role_disable+0x2cc>)
   17e14:	4b9b      	ldr	r3, [pc, #620]	; (18084 <role_disable+0x2d0>)
   17e16:	489c      	ldr	r0, [pc, #624]	; (18088 <role_disable+0x2d4>)
   17e18:	1a9b      	subs	r3, r3, r2
   17e1a:	08db      	lsrs	r3, r3, #3
   17e1c:	f363 118f 	bfi	r1, r3, #6, #10
   17e20:	e014      	b.n	17e4c <role_disable+0x98>
				cpu_sleep();
   17e22:	f00a f826 	bl	21e72 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   17e26:	9b02      	ldr	r3, [sp, #8]
   17e28:	2b02      	cmp	r3, #2
   17e2a:	d0fa      	beq.n	17e22 <role_disable+0x6e>
   17e2c:	e7e4      	b.n	17df8 <role_disable+0x44>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   17e2e:	9b02      	ldr	r3, [sp, #8]
   17e30:	2b01      	cmp	r3, #1
   17e32:	d0e3      	beq.n	17dfc <role_disable+0x48>
   17e34:	2301      	movs	r3, #1
   17e36:	f04f 0100 	mov.w	r1, #0
   17e3a:	f363 0107 	bfi	r1, r3, #0, #8
   17e3e:	4a90      	ldr	r2, [pc, #576]	; (18080 <role_disable+0x2cc>)
   17e40:	4b90      	ldr	r3, [pc, #576]	; (18084 <role_disable+0x2d0>)
   17e42:	4892      	ldr	r0, [pc, #584]	; (1808c <role_disable+0x2d8>)
   17e44:	1a9b      	subs	r3, r3, r2
   17e46:	08db      	lsrs	r3, r3, #3
   17e48:	f363 118f 	bfi	r1, r3, #6, #10
			LL_ASSERT(0);
   17e4c:	f006 faf9 	bl	1e442 <log_0>
   17e50:	4040      	eors	r0, r0
   17e52:	f380 8811 	msr	BASEPRI, r0
   17e56:	f04f 0004 	mov.w	r0, #4
   17e5a:	df02      	svc	2
		ticks_xtal_to_start =
   17e5c:	4b86      	ldr	r3, [pc, #536]	; (18078 <role_disable+0x2c4>)
		ticks_active_to_start =
   17e5e:	e9d3 7934 	ldrd	r7, r9, [r3, #208]	; 0xd0
		break;
   17e62:	e7cb      	b.n	17dfc <role_disable+0x48>
			LL_ASSERT(0);
   17e64:	2301      	movs	r3, #1
   17e66:	f04f 0100 	mov.w	r1, #0
   17e6a:	f363 0107 	bfi	r1, r3, #0, #8
   17e6e:	4a84      	ldr	r2, [pc, #528]	; (18080 <role_disable+0x2cc>)
   17e70:	4b84      	ldr	r3, [pc, #528]	; (18084 <role_disable+0x2d0>)
   17e72:	4887      	ldr	r0, [pc, #540]	; (18090 <role_disable+0x2dc>)
   17e74:	1a9b      	subs	r3, r3, r2
   17e76:	08db      	lsrs	r3, r3, #3
   17e78:	f363 118f 	bfi	r1, r3, #6, #10
   17e7c:	e7e6      	b.n	17e4c <role_disable+0x98>
	ret_cb = TICKER_STATUS_BUSY;
   17e7e:	2302      	movs	r3, #2
	_radio.ticker_id_stop = ticker_id_primary;
   17e80:	74a6      	strb	r6, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
   17e82:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e84:	ab02      	add	r3, sp, #8
   17e86:	9300      	str	r3, [sp, #0]
   17e88:	4632      	mov	r2, r6
   17e8a:	4b7c      	ldr	r3, [pc, #496]	; (1807c <role_disable+0x2c8>)
   17e8c:	2103      	movs	r1, #3
   17e8e:	4628      	mov	r0, r5
   17e90:	f7fe fc56 	bl	16740 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   17e94:	2802      	cmp	r0, #2
   17e96:	d00b      	beq.n	17eb0 <role_disable+0xfc>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   17e98:	9b02      	ldr	r3, [sp, #8]
   17e9a:	b1bb      	cbz	r3, 17ecc <role_disable+0x118>
	_radio.ticker_id_stop = 0U;
   17e9c:	2300      	movs	r3, #0
   17e9e:	74a3      	strb	r3, [r4, #18]
	return ret_cb ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   17ea0:	9b02      	ldr	r3, [sp, #8]
   17ea2:	2b00      	cmp	r3, #0
   17ea4:	bf18      	it	ne
   17ea6:	250c      	movne	r5, #12
}
   17ea8:	4628      	mov	r0, r5
   17eaa:	b007      	add	sp, #28
   17eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (_radio.ticker_id_event == ticker_id_primary) {
   17eb0:	7c63      	ldrb	r3, [r4, #17]
   17eb2:	42b3      	cmp	r3, r6
   17eb4:	d104      	bne.n	17ec0 <role_disable+0x10c>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   17eb6:	2201      	movs	r2, #1
   17eb8:	4611      	mov	r1, r2
   17eba:	2003      	movs	r0, #3
   17ebc:	f7fd fe68 	bl	15b90 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
   17ec0:	9b02      	ldr	r3, [sp, #8]
   17ec2:	2b02      	cmp	r3, #2
   17ec4:	d1e8      	bne.n	17e98 <role_disable+0xe4>
			cpu_sleep();
   17ec6:	f009 ffd4 	bl	21e72 <cpu_sleep>
   17eca:	e7f9      	b.n	17ec0 <role_disable+0x10c>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   17ecc:	7c23      	ldrb	r3, [r4, #16]
   17ece:	42b3      	cmp	r3, r6
   17ed0:	d002      	beq.n	17ed8 <role_disable+0x124>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   17ed2:	7c63      	ldrb	r3, [r4, #17]
   17ed4:	42b3      	cmp	r3, r6
   17ed6:	d15f      	bne.n	17f98 <role_disable+0x1e4>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   17ed8:	2302      	movs	r3, #2
   17eda:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17edc:	2200      	movs	r2, #0
   17ede:	ab03      	add	r3, sp, #12
   17ee0:	9300      	str	r3, [sp, #0]
   17ee2:	2103      	movs	r1, #3
   17ee4:	4b65      	ldr	r3, [pc, #404]	; (1807c <role_disable+0x2c8>)
   17ee6:	4610      	mov	r0, r2
   17ee8:	f7fe fc2a 	bl	16740 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   17eec:	2802      	cmp	r0, #2
   17eee:	d114      	bne.n	17f1a <role_disable+0x166>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   17ef0:	2201      	movs	r2, #1
   17ef2:	4611      	mov	r1, r2
   17ef4:	2003      	movs	r0, #3
   17ef6:	f7fd fe4b 	bl	15b90 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
   17efa:	9b03      	ldr	r3, [sp, #12]
   17efc:	2b02      	cmp	r3, #2
   17efe:	d10c      	bne.n	17f1a <role_disable+0x166>
   17f00:	2301      	movs	r3, #1
   17f02:	f04f 0100 	mov.w	r1, #0
   17f06:	f363 0107 	bfi	r1, r3, #0, #8
   17f0a:	4a5d      	ldr	r2, [pc, #372]	; (18080 <role_disable+0x2cc>)
   17f0c:	4b5d      	ldr	r3, [pc, #372]	; (18084 <role_disable+0x2d0>)
   17f0e:	4861      	ldr	r0, [pc, #388]	; (18094 <role_disable+0x2e0>)
   17f10:	1a9b      	subs	r3, r3, r2
   17f12:	08db      	lsrs	r3, r3, #3
   17f14:	f363 118f 	bfi	r1, r3, #6, #10
   17f18:	e798      	b.n	17e4c <role_disable+0x98>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   17f1a:	9803      	ldr	r0, [sp, #12]
   17f1c:	2800      	cmp	r0, #0
   17f1e:	d15d      	bne.n	17fdc <role_disable+0x228>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   17f20:	2302      	movs	r3, #2
   17f22:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
   17f24:	7c23      	ldrb	r3, [r4, #16]
   17f26:	b963      	cbnz	r3, 17f42 <role_disable+0x18e>
   17f28:	2301      	movs	r3, #1
   17f2a:	f04f 0100 	mov.w	r1, #0
   17f2e:	f363 0107 	bfi	r1, r3, #0, #8
   17f32:	4a53      	ldr	r2, [pc, #332]	; (18080 <role_disable+0x2cc>)
   17f34:	4b53      	ldr	r3, [pc, #332]	; (18084 <role_disable+0x2d0>)
   17f36:	4858      	ldr	r0, [pc, #352]	; (18098 <role_disable+0x2e4>)
   17f38:	1a9b      	subs	r3, r3, r2
   17f3a:	08db      	lsrs	r3, r3, #3
   17f3c:	f363 118f 	bfi	r1, r3, #6, #10
   17f40:	e784      	b.n	17e4c <role_disable+0x98>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17f42:	ab04      	add	r3, sp, #16
   17f44:	9300      	str	r3, [sp, #0]
   17f46:	2201      	movs	r2, #1
   17f48:	4b4c      	ldr	r3, [pc, #304]	; (1807c <role_disable+0x2c8>)
		_radio.ticker_id_prepare = 0U;
   17f4a:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17f4c:	2103      	movs	r1, #3
   17f4e:	f7fe fbf7 	bl	16740 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   17f52:	2802      	cmp	r0, #2
   17f54:	d114      	bne.n	17f80 <role_disable+0x1cc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   17f56:	2201      	movs	r2, #1
   17f58:	4611      	mov	r1, r2
   17f5a:	2003      	movs	r0, #3
   17f5c:	f7fd fe18 	bl	15b90 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
   17f60:	9b04      	ldr	r3, [sp, #16]
   17f62:	2b02      	cmp	r3, #2
   17f64:	d10c      	bne.n	17f80 <role_disable+0x1cc>
   17f66:	2301      	movs	r3, #1
   17f68:	f04f 0100 	mov.w	r1, #0
   17f6c:	f363 0107 	bfi	r1, r3, #0, #8
   17f70:	4a43      	ldr	r2, [pc, #268]	; (18080 <role_disable+0x2cc>)
   17f72:	4b44      	ldr	r3, [pc, #272]	; (18084 <role_disable+0x2d0>)
   17f74:	4849      	ldr	r0, [pc, #292]	; (1809c <role_disable+0x2e8>)
   17f76:	1a9b      	subs	r3, r3, r2
   17f78:	08db      	lsrs	r3, r3, #3
   17f7a:	f363 118f 	bfi	r1, r3, #6, #10
   17f7e:	e765      	b.n	17e4c <role_disable+0x98>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   17f80:	9a04      	ldr	r2, [sp, #16]
   17f82:	b982      	cbnz	r2, 17fa6 <role_disable+0x1f2>
			ticks_xtal_to_start &= ~XON_BITMASK;
   17f84:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   17f88:	45b9      	cmp	r9, r7
   17f8a:	d925      	bls.n	17fd8 <role_disable+0x224>
				ret = mayfly_enqueue(
   17f8c:	4b44      	ldr	r3, [pc, #272]	; (180a0 <role_disable+0x2ec>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   17f8e:	4611      	mov	r1, r2
   17f90:	2003      	movs	r0, #3
   17f92:	f7fd fe25 	bl	15be0 <mayfly_enqueue>
			LL_ASSERT(!ret);
   17f96:	b990      	cbnz	r0, 17fbe <role_disable+0x20a>
	if (!_radio.ticker_id_stop) {
   17f98:	7ca3      	ldrb	r3, [r4, #18]
   17f9a:	2b00      	cmp	r3, #0
   17f9c:	f47f af7e 	bne.w	17e9c <role_disable+0xe8>
		ret_cb = TICKER_STATUS_FAILURE;
   17fa0:	2301      	movs	r3, #1
   17fa2:	9302      	str	r3, [sp, #8]
   17fa4:	e77a      	b.n	17e9c <role_disable+0xe8>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   17fa6:	9b04      	ldr	r3, [sp, #16]
   17fa8:	2b01      	cmp	r3, #1
   17faa:	f47f af5b 	bne.w	17e64 <role_disable+0xb0>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   17fae:	2200      	movs	r2, #0
   17fb0:	4611      	mov	r1, r2
   17fb2:	4b3b      	ldr	r3, [pc, #236]	; (180a0 <role_disable+0x2ec>)
   17fb4:	2003      	movs	r0, #3
   17fb6:	f7fd fe13 	bl	15be0 <mayfly_enqueue>
			LL_ASSERT(!ret);
   17fba:	4602      	mov	r2, r0
   17fbc:	b160      	cbz	r0, 17fd8 <role_disable+0x224>
			LL_ASSERT(!ret);
   17fbe:	2301      	movs	r3, #1
   17fc0:	f04f 0100 	mov.w	r1, #0
   17fc4:	f363 0107 	bfi	r1, r3, #0, #8
   17fc8:	4a2d      	ldr	r2, [pc, #180]	; (18080 <role_disable+0x2cc>)
   17fca:	4b2e      	ldr	r3, [pc, #184]	; (18084 <role_disable+0x2d0>)
   17fcc:	4835      	ldr	r0, [pc, #212]	; (180a4 <role_disable+0x2f0>)
   17fce:	1a9b      	subs	r3, r3, r2
   17fd0:	08db      	lsrs	r3, r3, #3
   17fd2:	f363 118f 	bfi	r1, r3, #6, #10
   17fd6:	e739      	b.n	17e4c <role_disable+0x98>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   17fd8:	4b33      	ldr	r3, [pc, #204]	; (180a8 <role_disable+0x2f4>)
   17fda:	e7d8      	b.n	17f8e <role_disable+0x1da>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   17fdc:	9e03      	ldr	r6, [sp, #12]
   17fde:	2e01      	cmp	r6, #1
   17fe0:	f47f af40 	bne.w	17e64 <role_disable+0xb0>
		if (ticker_id_stop != TICKER_NULL) {
   17fe4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   17fe8:	d032      	beq.n	18050 <role_disable+0x29c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
   17fea:	2302      	movs	r3, #2
   17fec:	9305      	str	r3, [sp, #20]
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17fee:	ab05      	add	r3, sp, #20
   17ff0:	9300      	str	r3, [sp, #0]
   17ff2:	4642      	mov	r2, r8
   17ff4:	4b21      	ldr	r3, [pc, #132]	; (1807c <role_disable+0x2c8>)
   17ff6:	2103      	movs	r1, #3
   17ff8:	2000      	movs	r0, #0
   17ffa:	f7fe fba1 	bl	16740 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   17ffe:	2802      	cmp	r0, #2
   18000:	d114      	bne.n	1802c <role_disable+0x278>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   18002:	4632      	mov	r2, r6
   18004:	4631      	mov	r1, r6
   18006:	2003      	movs	r0, #3
   18008:	f7fd fdc2 	bl	15b90 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
   1800c:	9b05      	ldr	r3, [sp, #20]
   1800e:	2b02      	cmp	r3, #2
   18010:	d10c      	bne.n	1802c <role_disable+0x278>
   18012:	2301      	movs	r3, #1
   18014:	f04f 0100 	mov.w	r1, #0
   18018:	f363 0107 	bfi	r1, r3, #0, #8
   1801c:	4a18      	ldr	r2, [pc, #96]	; (18080 <role_disable+0x2cc>)
   1801e:	4b19      	ldr	r3, [pc, #100]	; (18084 <role_disable+0x2d0>)
   18020:	4822      	ldr	r0, [pc, #136]	; (180ac <role_disable+0x2f8>)
   18022:	1a9b      	subs	r3, r3, r2
   18024:	08db      	lsrs	r3, r3, #3
   18026:	f363 118f 	bfi	r1, r3, #6, #10
   1802a:	e70f      	b.n	17e4c <role_disable+0x98>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
   1802c:	9b05      	ldr	r3, [sp, #20]
   1802e:	b17b      	cbz	r3, 18050 <role_disable+0x29c>
   18030:	9b05      	ldr	r3, [sp, #20]
   18032:	2b01      	cmp	r3, #1
   18034:	d00c      	beq.n	18050 <role_disable+0x29c>
   18036:	2301      	movs	r3, #1
   18038:	f04f 0100 	mov.w	r1, #0
   1803c:	f363 0107 	bfi	r1, r3, #0, #8
   18040:	4a0f      	ldr	r2, [pc, #60]	; (18080 <role_disable+0x2cc>)
   18042:	4b10      	ldr	r3, [pc, #64]	; (18084 <role_disable+0x2d0>)
   18044:	481a      	ldr	r0, [pc, #104]	; (180b0 <role_disable+0x2fc>)
   18046:	1a9b      	subs	r3, r3, r2
   18048:	08db      	lsrs	r3, r3, #3
   1804a:	f363 118f 	bfi	r1, r3, #6, #10
   1804e:	e6fd      	b.n	17e4c <role_disable+0x98>
		if (_radio.role != ROLE_NONE) {
   18050:	7d23      	ldrb	r3, [r4, #20]
   18052:	2b00      	cmp	r3, #0
   18054:	d0a0      	beq.n	17f98 <role_disable+0x1e4>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   18056:	4b17      	ldr	r3, [pc, #92]	; (180b4 <role_disable+0x300>)
   18058:	2204      	movs	r2, #4
   1805a:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1805c:	2200      	movs	r2, #0
   1805e:	4611      	mov	r1, r2
   18060:	2003      	movs	r0, #3
   18062:	f7fd fdbd 	bl	15be0 <mayfly_enqueue>
			LL_ASSERT(!ret);
   18066:	2800      	cmp	r0, #0
   18068:	d1a9      	bne.n	17fbe <role_disable+0x20a>
			while (_radio.role != ROLE_NONE) {
   1806a:	7d23      	ldrb	r3, [r4, #20]
   1806c:	2b00      	cmp	r3, #0
   1806e:	d093      	beq.n	17f98 <role_disable+0x1e4>
				cpu_sleep();
   18070:	f009 feff 	bl	21e72 <cpu_sleep>
   18074:	e7f9      	b.n	1806a <role_disable+0x2b6>
   18076:	bf00      	nop
   18078:	20000d68 	.word	0x20000d68
   1807c:	00021e7b 	.word	0x00021e7b
   18080:	000233ec 	.word	0x000233ec
   18084:	0002341c 	.word	0x0002341c
   18088:	0002897c 	.word	0x0002897c
   1808c:	0002894c 	.word	0x0002894c
   18090:	0002822a 	.word	0x0002822a
   18094:	000289a4 	.word	0x000289a4
   18098:	000289c5 	.word	0x000289c5
   1809c:	000289ef 	.word	0x000289ef
   180a0:	20007dc0 	.word	0x20007dc0
   180a4:	00028a0f 	.word	0x00028a0f
   180a8:	20007e50 	.word	0x20007e50
   180ac:	00028a25 	.word	0x00028a25
   180b0:	00028a47 	.word	0x00028a47
   180b4:	20007df0 	.word	0x20007df0

000180b8 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   180b8:	2806      	cmp	r0, #6
{
   180ba:	b510      	push	{r4, lr}
   180bc:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   180be:	d90a      	bls.n	180d6 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   180c0:	4b09      	ldr	r3, [pc, #36]	; (180e8 <hdr_conn_get+0x30>)
				(ticker_id -
   180c2:	1fc2      	subs	r2, r0, #7
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   180c4:	b292      	uxth	r2, r2
   180c6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   180ca:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   180ce:	f009 fd58 	bl	21b82 <mem_get>
   180d2:	6020      	str	r0, [r4, #0]
}
   180d4:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   180d6:	2805      	cmp	r0, #5
   180d8:	d004      	beq.n	180e4 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   180da:	2806      	cmp	r0, #6
		return &_radio.scanner.hdr;
   180dc:	4803      	ldr	r0, [pc, #12]	; (180ec <hdr_conn_get+0x34>)
   180de:	bf18      	it	ne
   180e0:	2000      	movne	r0, #0
   180e2:	e7f7      	b.n	180d4 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
   180e4:	4802      	ldr	r0, [pc, #8]	; (180f0 <hdr_conn_get+0x38>)
   180e6:	e7f5      	b.n	180d4 <hdr_conn_get+0x1c>
   180e8:	20000d68 	.word	0x20000d68
   180ec:	20000e38 	.word	0x20000e38
   180f0:	20000d80 	.word	0x20000d80

000180f4 <event_active.part.19>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   180f4:	b508      	push	{r3, lr}
	LL_ASSERT(!retval);
   180f6:	f04f 0100 	mov.w	r1, #0
   180fa:	2301      	movs	r3, #1
   180fc:	4a08      	ldr	r2, [pc, #32]	; (18120 <event_active.part.19+0x2c>)
   180fe:	4809      	ldr	r0, [pc, #36]	; (18124 <event_active.part.19+0x30>)
   18100:	f363 0107 	bfi	r1, r3, #0, #8
   18104:	4b08      	ldr	r3, [pc, #32]	; (18128 <event_active.part.19+0x34>)
   18106:	1a9b      	subs	r3, r3, r2
   18108:	08db      	lsrs	r3, r3, #3
   1810a:	f363 118f 	bfi	r1, r3, #6, #10
   1810e:	f006 f998 	bl	1e442 <log_0>
   18112:	4040      	eors	r0, r0
   18114:	f380 8811 	msr	BASEPRI, r0
   18118:	f04f 0004 	mov.w	r0, #4
   1811c:	df02      	svc	2
   1811e:	bf00      	nop
   18120:	000233ec 	.word	0x000233ec
   18124:	00028829 	.word	0x00028829
   18128:	0002341c 	.word	0x0002341c

0001812c <event_stop>:
	s_mfy_radio_stop.param = context;
   1812c:	4a06      	ldr	r2, [pc, #24]	; (18148 <event_stop+0x1c>)
{
   1812e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   18130:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   18132:	4613      	mov	r3, r2
   18134:	2200      	movs	r2, #0
   18136:	4611      	mov	r1, r2
   18138:	4610      	mov	r0, r2
   1813a:	f7fd fd51 	bl	15be0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1813e:	b108      	cbz	r0, 18144 <event_stop+0x18>
   18140:	f7ff ffd8 	bl	180f4 <event_active.part.19>
}
   18144:	bd08      	pop	{r3, pc}
   18146:	bf00      	nop
   18148:	20007dd0 	.word	0x20007dd0

0001814c <event_adv_stop.part.17>:
void event_adv_stop(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
   1814c:	b508      	push	{r3, lr}
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1814e:	f04f 0100 	mov.w	r1, #0
   18152:	2301      	movs	r3, #1
   18154:	4a08      	ldr	r2, [pc, #32]	; (18178 <event_adv_stop.part.17+0x2c>)
   18156:	4809      	ldr	r0, [pc, #36]	; (1817c <event_adv_stop.part.17+0x30>)
   18158:	f363 0107 	bfi	r1, r3, #0, #8
   1815c:	4b08      	ldr	r3, [pc, #32]	; (18180 <event_adv_stop.part.17+0x34>)
   1815e:	1a9b      	subs	r3, r3, r2
   18160:	08db      	lsrs	r3, r3, #3
   18162:	f363 118f 	bfi	r1, r3, #6, #10
   18166:	f006 f96c 	bl	1e442 <log_0>
   1816a:	4040      	eors	r0, r0
   1816c:	f380 8811 	msr	BASEPRI, r0
   18170:	f04f 0004 	mov.w	r0, #4
   18174:	df02      	svc	2
   18176:	bf00      	nop
   18178:	000233ec 	.word	0x000233ec
   1817c:	00028388 	.word	0x00028388
   18180:	0002341c 	.word	0x0002341c

00018184 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   18184:	2200      	movs	r2, #0
{
   18186:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   18188:	4611      	mov	r1, r2
   1818a:	4b04      	ldr	r3, [pc, #16]	; (1819c <event_active+0x18>)
   1818c:	4610      	mov	r0, r2
   1818e:	f7fd fd27 	bl	15be0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   18192:	b108      	cbz	r0, 18198 <event_active+0x14>
   18194:	f7ff ffae 	bl	180f4 <event_active.part.19>
}
   18198:	bd08      	pop	{r3, pc}
   1819a:	bf00      	nop
   1819c:	20007d90 	.word	0x20007d90

000181a0 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   181a0:	2200      	movs	r2, #0
{
   181a2:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   181a4:	4611      	mov	r1, r2
   181a6:	4b04      	ldr	r3, [pc, #16]	; (181b8 <event_xtal+0x18>)
   181a8:	4610      	mov	r0, r2
   181aa:	f7fd fd19 	bl	15be0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   181ae:	b108      	cbz	r0, 181b4 <event_xtal+0x14>
   181b0:	f7ff ffa0 	bl	180f4 <event_active.part.19>
}
   181b4:	bd08      	pop	{r3, pc}
   181b6:	bf00      	nop
   181b8:	20007e00 	.word	0x20007e00

000181bc <mayfly_radio_active>:
{
   181bc:	b508      	push	{r3, lr}
   181be:	4a13      	ldr	r2, [pc, #76]	; (1820c <mayfly_radio_active+0x50>)
   181c0:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
   181c2:	b138      	cbz	r0, 181d4 <mayfly_radio_active+0x18>
		if (s_active++) {
   181c4:	1c59      	adds	r1, r3, #1
   181c6:	7011      	strb	r1, [r2, #0]
   181c8:	b9f3      	cbnz	r3, 18208 <mayfly_radio_active+0x4c>
		radio_active_callback(1);
   181ca:	2001      	movs	r0, #1
}
   181cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
   181d0:	f00a b846 	b.w	22260 <radio_active_callback>
		LL_ASSERT(s_active);
   181d4:	b99b      	cbnz	r3, 181fe <mayfly_radio_active+0x42>
   181d6:	2301      	movs	r3, #1
   181d8:	f04f 0100 	mov.w	r1, #0
   181dc:	4a0c      	ldr	r2, [pc, #48]	; (18210 <mayfly_radio_active+0x54>)
   181de:	480d      	ldr	r0, [pc, #52]	; (18214 <mayfly_radio_active+0x58>)
   181e0:	f363 0107 	bfi	r1, r3, #0, #8
   181e4:	4b0c      	ldr	r3, [pc, #48]	; (18218 <mayfly_radio_active+0x5c>)
   181e6:	1a9b      	subs	r3, r3, r2
   181e8:	08db      	lsrs	r3, r3, #3
   181ea:	f363 118f 	bfi	r1, r3, #6, #10
   181ee:	f006 f928 	bl	1e442 <log_0>
   181f2:	4040      	eors	r0, r0
   181f4:	f380 8811 	msr	BASEPRI, r0
   181f8:	f04f 0004 	mov.w	r0, #4
   181fc:	df02      	svc	2
		if (--s_active) {
   181fe:	3b01      	subs	r3, #1
   18200:	b2db      	uxtb	r3, r3
   18202:	7013      	strb	r3, [r2, #0]
   18204:	2b00      	cmp	r3, #0
   18206:	d0e1      	beq.n	181cc <mayfly_radio_active+0x10>
}
   18208:	bd08      	pop	{r3, pc}
   1820a:	bf00      	nop
   1820c:	20002308 	.word	0x20002308
   18210:	000233ec 	.word	0x000233ec
   18214:	000287ae 	.word	0x000287ae
   18218:	0002341c 	.word	0x0002341c

0001821c <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
   1821c:	b2c0      	uxtb	r0, r0
{
   1821e:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   18220:	1f03      	subs	r3, r0, #4
   18222:	2b01      	cmp	r3, #1
   18224:	d913      	bls.n	1824e <mayfly_radio_stop+0x32>
   18226:	2301      	movs	r3, #1
   18228:	f04f 0100 	mov.w	r1, #0
   1822c:	4a10      	ldr	r2, [pc, #64]	; (18270 <mayfly_radio_stop+0x54>)
   1822e:	4811      	ldr	r0, [pc, #68]	; (18274 <mayfly_radio_stop+0x58>)
   18230:	f363 0107 	bfi	r1, r3, #0, #8
   18234:	4b10      	ldr	r3, [pc, #64]	; (18278 <mayfly_radio_stop+0x5c>)
   18236:	1a9b      	subs	r3, r3, r2
   18238:	08db      	lsrs	r3, r3, #3
   1823a:	f363 118f 	bfi	r1, r3, #6, #10
   1823e:	f006 f900 	bl	1e442 <log_0>
   18242:	4040      	eors	r0, r0
   18244:	f380 8811 	msr	BASEPRI, r0
   18248:	f04f 0004 	mov.w	r0, #4
   1824c:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
   1824e:	4a0b      	ldr	r2, [pc, #44]	; (1827c <mayfly_radio_stop+0x60>)
   18250:	7d53      	ldrb	r3, [r2, #21]
		      (_radio.state != STATE_STOP) &&
   18252:	b13b      	cbz	r3, 18264 <mayfly_radio_stop+0x48>
	radio_used = ((_radio.state != STATE_NONE) &&
   18254:	3b04      	subs	r3, #4
   18256:	2b01      	cmp	r3, #1
   18258:	d904      	bls.n	18264 <mayfly_radio_stop+0x48>
			_radio.state = state;
   1825a:	7550      	strb	r0, [r2, #21]
}
   1825c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
   18260:	f002 b8e0 	b.w	1a424 <radio_disable>
	if (radio_used || !radio_is_idle()) {
   18264:	f002 f910 	bl	1a488 <radio_is_idle>
   18268:	2800      	cmp	r0, #0
   1826a:	d0f7      	beq.n	1825c <mayfly_radio_stop+0x40>
}
   1826c:	bd08      	pop	{r3, pc}
   1826e:	bf00      	nop
   18270:	000233ec 	.word	0x000233ec
   18274:	000287c8 	.word	0x000287c8
   18278:	0002341c 	.word	0x0002341c
   1827c:	20000d68 	.word	0x20000d68

00018280 <pdu_node_tx_release>:
{
   18280:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   18282:	4a19      	ldr	r2, [pc, #100]	; (182e8 <pdu_node_tx_release+0x68>)
   18284:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	if (last == _radio.packet_tx_count) {
   18288:	f892 416c 	ldrb.w	r4, [r2, #364]	; 0x16c
	last = _radio.packet_release_last + 1;
   1828c:	3301      	adds	r3, #1
   1828e:	b2db      	uxtb	r3, r3
		last = 0U;
   18290:	429c      	cmp	r4, r3
   18292:	bf08      	it	eq
   18294:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
   18296:	f892 416f 	ldrb.w	r4, [r2, #367]	; 0x16f
   1829a:	429c      	cmp	r4, r3
   1829c:	d113      	bne.n	182c6 <pdu_node_tx_release+0x46>
   1829e:	2301      	movs	r3, #1
   182a0:	f04f 0100 	mov.w	r1, #0
   182a4:	4a11      	ldr	r2, [pc, #68]	; (182ec <pdu_node_tx_release+0x6c>)
   182a6:	4812      	ldr	r0, [pc, #72]	; (182f0 <pdu_node_tx_release+0x70>)
   182a8:	f363 0107 	bfi	r1, r3, #0, #8
   182ac:	4b11      	ldr	r3, [pc, #68]	; (182f4 <pdu_node_tx_release+0x74>)
   182ae:	1a9b      	subs	r3, r3, r2
   182b0:	08db      	lsrs	r3, r3, #3
   182b2:	f363 118f 	bfi	r1, r3, #6, #10
   182b6:	f006 f8c4 	bl	1e442 <log_0>
   182ba:	4040      	eors	r0, r0
   182bc:	f380 8811 	msr	BASEPRI, r0
   182c0:	f04f 0004 	mov.w	r0, #4
   182c4:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   182c6:	f892 5170 	ldrb.w	r5, [r2, #368]	; 0x170
   182ca:	f8d2 4168 	ldr.w	r4, [r2, #360]	; 0x168
   182ce:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   182d2:	f892 0170 	ldrb.w	r0, [r2, #368]	; 0x170
   182d6:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   182da:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
   182dc:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
}
   182e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
   182e4:	f001 bc52 	b.w	19b8c <radio_event_callback>
   182e8:	20000d68 	.word	0x20000d68
   182ec:	000233ec 	.word	0x000233ec
   182f0:	000288ec 	.word	0x000288ec
   182f4:	0002341c 	.word	0x0002341c

000182f8 <packet_tx_enqueue>:
{
   182f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   182fc:	4d25      	ldr	r5, [pc, #148]	; (18394 <packet_tx_enqueue+0x9c>)
{
   182fe:	4606      	mov	r6, r0
   18300:	46a8      	mov	r8, r5
		node_tx_new->next = NULL;
   18302:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   18304:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
   18308:	f895 216e 	ldrb.w	r2, [r5, #366]	; 0x16e
   1830c:	429a      	cmp	r2, r3
   1830e:	d036      	beq.n	1837e <packet_tx_enqueue+0x86>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   18310:	f895 916d 	ldrb.w	r9, [r5, #365]	; 0x16d
   18314:	f8d5 a164 	ldr.w	sl, [r5, #356]	; 0x164
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   18318:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   1831c:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   18320:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   18324:	f44f 7196 	mov.w	r1, #300	; 0x12c
		node_tx_new = pdu_data_q_tx->node_tx;
   18328:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
   1832a:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1832c:	f009 fc29 	bl	21b82 <mem_get>
   18330:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
   18332:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
   18336:	8c1a      	ldrh	r2, [r3, #32]
   18338:	4282      	cmp	r2, r0
   1833a:	d122      	bne.n	18382 <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
   1833c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   18340:	b942      	cbnz	r2, 18354 <packet_tx_enqueue+0x5c>
				if (conn->pkt_tx_head == 0) {
   18342:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
				conn->pkt_tx_data = node_tx_new;
   18346:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
				if (conn->pkt_tx_head == 0) {
   1834a:	b91a      	cbnz	r2, 18354 <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
   1834c:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
					conn->pkt_tx_last = NULL;
   18350:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			if (conn->pkt_tx_last) {
   18354:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   18358:	b102      	cbz	r2, 1835c <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
   1835a:	6014      	str	r4, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
   1835c:	f8c3 4124 	str.w	r4, [r3, #292]	; 0x124
		first = _radio.packet_tx_first + 1;
   18360:	f898 316d 	ldrb.w	r3, [r8, #365]	; 0x16d
		if (first == _radio.packet_tx_count) {
   18364:	f898 216c 	ldrb.w	r2, [r8, #364]	; 0x16c
		first = _radio.packet_tx_first + 1;
   18368:	3301      	adds	r3, #1
   1836a:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   1836c:	3e01      	subs	r6, #1
			first = 0U;
   1836e:	429a      	cmp	r2, r3
   18370:	bf08      	it	eq
   18372:	2300      	moveq	r3, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   18374:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		_radio.packet_tx_first = first;
   18378:	f888 316d 	strb.w	r3, [r8, #365]	; 0x16d
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1837c:	d1c2      	bne.n	18304 <packet_tx_enqueue+0xc>
}
   1837e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   18382:	7923      	ldrb	r3, [r4, #4]
   18384:	f367 0301 	bfi	r3, r7, #0, #2
   18388:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   1838a:	4621      	mov	r1, r4
   1838c:	f7ff ff78 	bl	18280 <pdu_node_tx_release>
   18390:	e7e6      	b.n	18360 <packet_tx_enqueue+0x68>
   18392:	bf00      	nop
   18394:	20000d68 	.word	0x20000d68

00018398 <connection_release>:
{
   18398:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1839a:	2201      	movs	r2, #1
{
   1839c:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1839e:	4611      	mov	r1, r2
   183a0:	2000      	movs	r0, #0
   183a2:	f7fd fbf5 	bl	15b90 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   183a6:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   183aa:	2100      	movs	r1, #0
   183ac:	f242 43e3 	movw	r3, #9443	; 0x24e3
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   183b0:	3207      	adds	r2, #7
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   183b2:	9300      	str	r3, [sp, #0]
   183b4:	4608      	mov	r0, r1
   183b6:	4b3e      	ldr	r3, [pc, #248]	; (184b0 <connection_release+0x118>)
   183b8:	b2d2      	uxtb	r2, r2
   183ba:	f7fe f9c1 	bl	16740 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   183be:	f030 0102 	bics.w	r1, r0, #2
   183c2:	d013      	beq.n	183ec <connection_release+0x54>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   183c4:	2301      	movs	r3, #1
   183c6:	f04f 0100 	mov.w	r1, #0
   183ca:	4a3a      	ldr	r2, [pc, #232]	; (184b4 <connection_release+0x11c>)
   183cc:	483a      	ldr	r0, [pc, #232]	; (184b8 <connection_release+0x120>)
   183ce:	f363 0107 	bfi	r1, r3, #0, #8
   183d2:	4b3a      	ldr	r3, [pc, #232]	; (184bc <connection_release+0x124>)
   183d4:	1a9b      	subs	r3, r3, r2
   183d6:	08db      	lsrs	r3, r3, #3
   183d8:	f363 118f 	bfi	r1, r3, #6, #10
   183dc:	f006 f831 	bl	1e442 <log_0>
   183e0:	4040      	eors	r0, r0
   183e2:	f380 8811 	msr	BASEPRI, r0
   183e6:	f04f 0004 	mov.w	r0, #4
   183ea:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
   183ec:	4b34      	ldr	r3, [pc, #208]	; (184c0 <connection_release+0x128>)
   183ee:	7d5a      	ldrb	r2, [r3, #21]
   183f0:	2a05      	cmp	r2, #5
   183f2:	461d      	mov	r5, r3
   183f4:	d11b      	bne.n	1842e <connection_release+0x96>
					  conn->handle))) {
   183f6:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   183f8:	7c18      	ldrb	r0, [r3, #16]
   183fa:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
   183fc:	4290      	cmp	r0, r2
   183fe:	d116      	bne.n	1842e <connection_release+0x96>
		_radio.ticker_id_prepare = 0U;
   18400:	7419      	strb	r1, [r3, #16]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18402:	f242 43f4 	movw	r3, #9460	; 0x24f4
   18406:	9300      	str	r3, [sp, #0]
   18408:	2201      	movs	r2, #1
   1840a:	4b29      	ldr	r3, [pc, #164]	; (184b0 <connection_release+0x118>)
   1840c:	4608      	mov	r0, r1
   1840e:	f7fe f997 	bl	16740 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18412:	f030 0202 	bics.w	r2, r0, #2
   18416:	d1d5      	bne.n	183c4 <connection_release+0x2c>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18418:	f242 43fb 	movw	r3, #9467	; 0x24fb
   1841c:	9300      	str	r3, [sp, #0]
   1841e:	4611      	mov	r1, r2
   18420:	4b23      	ldr	r3, [pc, #140]	; (184b0 <connection_release+0x118>)
   18422:	4610      	mov	r0, r2
   18424:	f7fe f98c 	bl	16740 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18428:	f030 0302 	bics.w	r3, r0, #2
   1842c:	d1ca      	bne.n	183c4 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   1842e:	e9d4 1345 	ldrd	r1, r3, [r4, #276]	; 0x114
   18432:	4299      	cmp	r1, r3
   18434:	d003      	beq.n	1843e <connection_release+0xa6>
   18436:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1843a:	4299      	cmp	r1, r3
   1843c:	d101      	bne.n	18442 <connection_release+0xaa>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1843e:	4e21      	ldr	r6, [pc, #132]	; (184c4 <connection_release+0x12c>)
   18440:	e010      	b.n	18464 <connection_release+0xcc>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   18442:	790b      	ldrb	r3, [r1, #4]
   18444:	f36f 0301 	bfc	r3, #0, #2
   18448:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1844a:	680b      	ldr	r3, [r1, #0]
   1844c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		pdu_node_tx_release(conn->handle, node_tx);
   18450:	8c20      	ldrh	r0, [r4, #32]
   18452:	f7ff ff15 	bl	18280 <pdu_node_tx_release>
   18456:	e7ea      	b.n	1842e <connection_release+0x96>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   18458:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1845a:	4631      	mov	r1, r6
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   1845c:	e9c4 3345 	strd	r3, r3, [r4, #276]	; 0x114
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   18460:	f009 fb7a 	bl	21b58 <mem_release>
	while ((conn->pkt_tx_head) &&
   18464:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   18468:	b118      	cbz	r0, 18472 <connection_release+0xda>
   1846a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1846e:	4298      	cmp	r0, r3
   18470:	d1f2      	bne.n	18458 <connection_release+0xc0>
	conn->pkt_tx_ctrl = NULL;
   18472:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
   18474:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
	while (conn->pkt_tx_head) {
   18478:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   1847c:	b951      	cbnz	r1, 18494 <connection_release+0xfc>
	conn->handle = 0xffff;
   1847e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18482:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   18484:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
   18488:	42a3      	cmp	r3, r4
		_radio.conn_upd = NULL;
   1848a:	bf08      	it	eq
   1848c:	f8c5 1180 	streq.w	r1, [r5, #384]	; 0x180
}
   18490:	b002      	add	sp, #8
   18492:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   18494:	790b      	ldrb	r3, [r1, #4]
   18496:	f36f 0301 	bfc	r3, #0, #2
   1849a:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1849c:	680b      	ldr	r3, [r1, #0]
   1849e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		conn->pkt_tx_data = conn->pkt_tx_head;
   184a2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		pdu_node_tx_release(conn->handle, node_tx);
   184a6:	8c20      	ldrh	r0, [r4, #32]
   184a8:	f7ff feea 	bl	18280 <pdu_node_tx_release>
   184ac:	e7e4      	b.n	18478 <connection_release+0xe0>
   184ae:	bf00      	nop
   184b0:	00021edf 	.word	0x00021edf
   184b4:	000233ec 	.word	0x000233ec
   184b8:	00028388 	.word	0x00028388
   184bc:	0002341c 	.word	0x0002341c
   184c0:	20000d68 	.word	0x20000d68
   184c4:	20000ebc 	.word	0x20000ebc

000184c8 <adv_setup>:
{
   184c8:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   184ca:	4c29      	ldr	r4, [pc, #164]	; (18570 <adv_setup+0xa8>)
   184cc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   184d0:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
   184d4:	429a      	cmp	r2, r3
   184d6:	d006      	beq.n	184e6 <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
   184d8:	3301      	adds	r3, #1
   184da:	b2db      	uxtb	r3, r3
			first = 0U;
   184dc:	2b02      	cmp	r3, #2
   184de:	bf08      	it	eq
   184e0:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
   184e2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (_radio.advertiser.scan_data.first != _radio.
   184e6:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   184ea:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
   184ee:	429a      	cmp	r2, r3
   184f0:	d006      	beq.n	18500 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
   184f2:	3301      	adds	r3, #1
   184f4:	b2db      	uxtb	r3, r3
			first = 0U;
   184f6:	2b02      	cmp	r3, #2
   184f8:	bf08      	it	eq
   184fa:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
   184fc:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	pdu = (void *)_radio.advertiser.adv_data.data
   18500:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   18504:	232a      	movs	r3, #42	; 0x2a
   18506:	2527      	movs	r5, #39	; 0x27
   18508:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
   1850c:	1960      	adds	r0, r4, r5
   1850e:	f001 ff77 	bl	1a400 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   18512:	5d63      	ldrb	r3, [r4, r5]
   18514:	f003 030f 	and.w	r3, r3, #15
   18518:	2b02      	cmp	r3, #2
   1851a:	d020      	beq.n	1855e <adv_setup+0x96>
		_radio.state = STATE_TX;
   1851c:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
   1851e:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   18520:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
   18522:	f002 f86d 	bl	1a600 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   18526:	2000      	movs	r0, #0
   18528:	f001 ffd6 	bl	1a4d8 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
   1852c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   18530:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18534:	b2da      	uxtb	r2, r3
	while ((bitmap & 0x01) == 0) {
   18536:	2000      	movs	r0, #0
   18538:	07d5      	lsls	r5, r2, #31
   1853a:	f100 0101 	add.w	r1, r0, #1
   1853e:	d513      	bpl.n	18568 <adv_setup+0xa0>
	_radio.advertiser.chan_map_current &=
   18540:	b25b      	sxtb	r3, r3
		(_radio.advertiser.chan_map_current - 1);
   18542:	1e5a      	subs	r2, r3, #1
	_radio.advertiser.chan_map_current &=
   18544:	4013      	ands	r3, r2
   18546:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   1854a:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
   1854c:	f363 0202 	bfi	r2, r3, #0, #3
   18550:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   18554:	3025      	adds	r0, #37	; 0x25
}
   18556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
   1855a:	f009 bce9 	b.w	21f30 <chan_set>
		_radio.state = STATE_CLOSE;
   1855e:	2303      	movs	r3, #3
   18560:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
   18562:	f001 ffcf 	bl	1a504 <radio_switch_complete_and_disable>
   18566:	e7e1      	b.n	1852c <adv_setup+0x64>
		bitmap >>= 1;
   18568:	0852      	lsrs	r2, r2, #1
   1856a:	4608      	mov	r0, r1
   1856c:	e7e4      	b.n	18538 <adv_setup+0x70>
   1856e:	bf00      	nop
   18570:	20000d68 	.word	0x20000d68

00018574 <mayfly_adv_stop>:
{
   18574:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
   18576:	2001      	movs	r0, #1
   18578:	f7ff f9e6 	bl	17948 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
   1857c:	4604      	mov	r4, r0
   1857e:	b998      	cbnz	r0, 185a8 <mayfly_adv_stop+0x34>
   18580:	2301      	movs	r3, #1
   18582:	f04f 0100 	mov.w	r1, #0
   18586:	4a10      	ldr	r2, [pc, #64]	; (185c8 <mayfly_adv_stop+0x54>)
   18588:	4810      	ldr	r0, [pc, #64]	; (185cc <mayfly_adv_stop+0x58>)
   1858a:	f363 0107 	bfi	r1, r3, #0, #8
   1858e:	4b10      	ldr	r3, [pc, #64]	; (185d0 <mayfly_adv_stop+0x5c>)
   18590:	1a9b      	subs	r3, r3, r2
   18592:	08db      	lsrs	r3, r3, #3
   18594:	f363 118f 	bfi	r1, r3, #6, #10
   18598:	f005 ff53 	bl	1e442 <log_0>
   1859c:	4040      	eors	r0, r0
   1859e:	f380 8811 	msr	BASEPRI, r0
   185a2:	f04f 0004 	mov.w	r0, #4
   185a6:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
   185a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   185ac:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   185ae:	2308      	movs	r3, #8
   185b0:	7103      	strb	r3, [r0, #4]
	(void)memset(radio_le_conn_cmplt, 0x00,
   185b2:	2212      	movs	r2, #18
   185b4:	4418      	add	r0, r3
   185b6:	2100      	movs	r1, #0
   185b8:	f007 f850 	bl	1f65c <memset>
	radio_le_conn_cmplt->status = BT_HCI_ERR_ADV_TIMEOUT;
   185bc:	233c      	movs	r3, #60	; 0x3c
   185be:	7223      	strb	r3, [r4, #8]
}
   185c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
   185c4:	f7ff ba7e 	b.w	17ac4 <packet_rx_enqueue>
   185c8:	000233ec 	.word	0x000233ec
   185cc:	00028795 	.word	0x00028795
   185d0:	0002341c 	.word	0x0002341c

000185d4 <terminate_ind_rx_enqueue>:
{
   185d4:	4603      	mov	r3, r0
   185d6:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   185d8:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.link);
   185dc:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
{
   185e0:	b510      	push	{r4, lr}
	LL_ASSERT(node_rx->hdr.link);
   185e2:	b998      	cbnz	r0, 1860c <terminate_ind_rx_enqueue+0x38>
   185e4:	2301      	movs	r3, #1
   185e6:	f04f 0100 	mov.w	r1, #0
   185ea:	f363 0107 	bfi	r1, r3, #0, #8
   185ee:	4a19      	ldr	r2, [pc, #100]	; (18654 <terminate_ind_rx_enqueue+0x80>)
   185f0:	4b19      	ldr	r3, [pc, #100]	; (18658 <terminate_ind_rx_enqueue+0x84>)
   185f2:	481a      	ldr	r0, [pc, #104]	; (1865c <terminate_ind_rx_enqueue+0x88>)
   185f4:	1a9b      	subs	r3, r3, r2
   185f6:	08db      	lsrs	r3, r3, #3
   185f8:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(link);
   185fc:	f005 ff21 	bl	1e442 <log_0>
   18600:	4040      	eors	r0, r0
   18602:	f380 8811 	msr	BASEPRI, r0
   18606:	f04f 0004 	mov.w	r0, #4
   1860a:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
   1860c:	8c1c      	ldrh	r4, [r3, #32]
   1860e:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
   18612:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   18616:	2409      	movs	r4, #9
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   18618:	4a11      	ldr	r2, [pc, #68]	; (18660 <terminate_ind_rx_enqueue+0x8c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1861a:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   1861e:	f892 4170 	ldrb.w	r4, [r2, #368]	; 0x170
   18622:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   18626:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   1862a:	f009 fac4 	bl	21bb6 <memq_enqueue>
	LL_ASSERT(link);
   1862e:	b960      	cbnz	r0, 1864a <terminate_ind_rx_enqueue+0x76>
   18630:	2301      	movs	r3, #1
   18632:	f04f 0100 	mov.w	r1, #0
   18636:	f363 0107 	bfi	r1, r3, #0, #8
   1863a:	4a06      	ldr	r2, [pc, #24]	; (18654 <terminate_ind_rx_enqueue+0x80>)
   1863c:	4b06      	ldr	r3, [pc, #24]	; (18658 <terminate_ind_rx_enqueue+0x84>)
   1863e:	4809      	ldr	r0, [pc, #36]	; (18664 <terminate_ind_rx_enqueue+0x90>)
   18640:	1a9b      	subs	r3, r3, r2
   18642:	08db      	lsrs	r3, r3, #3
   18644:	f363 118f 	bfi	r1, r3, #6, #10
   18648:	e7d8      	b.n	185fc <terminate_ind_rx_enqueue+0x28>
}
   1864a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   1864e:	f001 ba9d 	b.w	19b8c <radio_event_callback>
   18652:	bf00      	nop
   18654:	000233ec 	.word	0x000233ec
   18658:	0002341c 	.word	0x0002341c
   1865c:	00028a93 	.word	0x00028a93
   18660:	20000d68 	.word	0x20000d68
   18664:	000288d6 	.word	0x000288d6

00018668 <prepare_normal_set>:
{
   18668:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   1866a:	6804      	ldr	r4, [r0, #0]
   1866c:	2c00      	cmp	r4, #0
{
   1866e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   18670:	da19      	bge.n	186a6 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
   18672:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   18676:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   1867a:	429d      	cmp	r5, r3
   1867c:	bf38      	it	cc
   1867e:	1ae4      	subcc	r4, r4, r3
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   18680:	4b0a      	ldr	r3, [pc, #40]	; (186ac <prepare_normal_set+0x44>)
   18682:	9305      	str	r3, [sp, #20]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   18684:	bf28      	it	cs
   18686:	1b64      	subcs	r4, r4, r5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   18688:	2300      	movs	r3, #0
   1868a:	9006      	str	r0, [sp, #24]
   1868c:	e9cd 3303 	strd	r3, r3, [sp, #12]
   18690:	e9cd 4301 	strd	r4, r3, [sp, #4]
   18694:	4618      	mov	r0, r3
   18696:	9400      	str	r4, [sp, #0]
   18698:	f7fe f80a 	bl	166b0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1869c:	f030 0302 	bics.w	r3, r0, #2
   186a0:	d001      	beq.n	186a6 <prepare_normal_set+0x3e>
   186a2:	f7ff fd53 	bl	1814c <event_adv_stop.part.17>
}
   186a6:	b009      	add	sp, #36	; 0x24
   186a8:	bd30      	pop	{r4, r5, pc}
   186aa:	bf00      	nop
   186ac:	00021e8b 	.word	0x00021e8b

000186b0 <event_slave>:
{
   186b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   186b4:	4d81      	ldr	r5, [pc, #516]	; (188bc <event_slave+0x20c>)
{
   186b6:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   186b8:	7d2b      	ldrb	r3, [r5, #20]
{
   186ba:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   186bc:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   186c0:	462f      	mov	r7, r5
   186c2:	b19b      	cbz	r3, 186ec <event_slave+0x3c>
   186c4:	2301      	movs	r3, #1
   186c6:	f04f 0100 	mov.w	r1, #0
   186ca:	f363 0107 	bfi	r1, r3, #0, #8
   186ce:	4a7c      	ldr	r2, [pc, #496]	; (188c0 <event_slave+0x210>)
   186d0:	4b7c      	ldr	r3, [pc, #496]	; (188c4 <event_slave+0x214>)
   186d2:	487d      	ldr	r0, [pc, #500]	; (188c8 <event_slave+0x218>)
   186d4:	1a9b      	subs	r3, r3, r2
   186d6:	08db      	lsrs	r3, r3, #3
   186d8:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(_radio.ticker_id_prepare ==
   186dc:	f005 feb1 	bl	1e442 <log_0>
   186e0:	4040      	eors	r0, r0
   186e2:	f380 8811 	msr	BASEPRI, r0
   186e6:	f04f 0004 	mov.w	r0, #4
   186ea:	df02      	svc	2
   186ec:	7c2a      	ldrb	r2, [r5, #16]
   186ee:	8c23      	ldrh	r3, [r4, #32]
   186f0:	b2d2      	uxtb	r2, r2
   186f2:	3307      	adds	r3, #7
   186f4:	429a      	cmp	r2, r3
   186f6:	d00c      	beq.n	18712 <event_slave+0x62>
   186f8:	2301      	movs	r3, #1
   186fa:	f04f 0100 	mov.w	r1, #0
   186fe:	f363 0107 	bfi	r1, r3, #0, #8
   18702:	4a6f      	ldr	r2, [pc, #444]	; (188c0 <event_slave+0x210>)
   18704:	4b6f      	ldr	r3, [pc, #444]	; (188c4 <event_slave+0x214>)
   18706:	4871      	ldr	r0, [pc, #452]	; (188cc <event_slave+0x21c>)
   18708:	1a9b      	subs	r3, r3, r2
   1870a:	08db      	lsrs	r3, r3, #3
   1870c:	f363 118f 	bfi	r1, r3, #6, #10
   18710:	e7e4      	b.n	186dc <event_slave+0x2c>
	_radio.role = ROLE_SLAVE;
   18712:	2303      	movs	r3, #3
   18714:	752b      	strb	r3, [r5, #20]
	_radio.packet_counter = 0U;
   18716:	f8a5 8118 	strh.w	r8, [r5, #280]	; 0x118
	_radio.state = STATE_RX;
   1871a:	2301      	movs	r3, #1
   1871c:	756b      	strb	r3, [r5, #21]
	conn->latency_event = conn->latency_prepare;
   1871e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   18720:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   18724:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
   18726:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0U;
   18728:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
	_radio.ticker_id_prepare = 0U;
   1872c:	f885 8010 	strb.w	r8, [r5, #16]
	_radio.ticks_anchor = ticks_at_expire;
   18730:	60a8      	str	r0, [r5, #8]
	_radio.ticker_id_event =
   18732:	746a      	strb	r2, [r5, #17]
	adv_scan_conn_configure();
   18734:	f7ff f9b8 	bl	17aa8 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   18738:	f104 0010 	add.w	r0, r4, #16
   1873c:	f001 fe16 	bl	1a36c <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   18740:	7d62      	ldrb	r2, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   18742:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   18744:	0212      	lsls	r2, r2, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   18746:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   1874a:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1874c:	f240 605b 	movw	r0, #1627	; 0x65b
   18750:	4311      	orrs	r1, r2
   18752:	f001 fea3 	bl	1a49c <radio_crc_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   18756:	2096      	movs	r0, #150	; 0x96
   18758:	f001 ff52 	bl	1a600 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1875c:	4643      	mov	r3, r8
   1875e:	4642      	mov	r2, r8
   18760:	4641      	mov	r1, r8
   18762:	4640      	mov	r0, r8
   18764:	f001 fec4 	bl	1a4f0 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   18768:	f895 2139 	ldrb.w	r2, [r5, #313]	; 0x139
   1876c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   18770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   18774:	4620      	mov	r0, r4
   18776:	3108      	adds	r1, #8
   18778:	f009 fbb9 	bl	21eee <rx_packet_set>
	if (conn->data_chan_sel) {
   1877c:	7f63      	ldrb	r3, [r4, #29]
   1877e:	065a      	lsls	r2, r3, #25
   18780:	d50c      	bpl.n	1879c <event_slave+0xec>
		LL_ASSERT(0);
   18782:	2301      	movs	r3, #1
   18784:	f04f 0100 	mov.w	r1, #0
   18788:	f363 0107 	bfi	r1, r3, #0, #8
   1878c:	4a4c      	ldr	r2, [pc, #304]	; (188c0 <event_slave+0x210>)
   1878e:	4b4d      	ldr	r3, [pc, #308]	; (188c4 <event_slave+0x214>)
   18790:	484f      	ldr	r0, [pc, #316]	; (188d0 <event_slave+0x220>)
   18792:	1a9b      	subs	r3, r3, r2
   18794:	08db      	lsrs	r3, r3, #3
   18796:	f363 118f 	bfi	r1, r3, #6, #10
   1879a:	e79f      	b.n	186dc <event_slave+0x2c>
					   conn->data_chan_count);
   1879c:	f003 053f 	and.w	r5, r3, #63	; 0x3f
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   187a0:	7fa2      	ldrb	r2, [r4, #30]
   187a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   187a4:	fb03 2202 	mla	r2, r3, r2, r2
   187a8:	7fe3      	ldrb	r3, [r4, #31]
   187aa:	441a      	add	r2, r3
   187ac:	2325      	movs	r3, #37	; 0x25
   187ae:	fbb2 f1f3 	udiv	r1, r2, r3
   187b2:	fb03 2111 	mls	r1, r3, r1, r2
   187b6:	b2c8      	uxtb	r0, r1
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   187b8:	eb04 03d0 	add.w	r3, r4, r0, lsr #3
	*chan_use = chan_next;
   187bc:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   187be:	7dda      	ldrb	r2, [r3, #23]
   187c0:	f001 0107 	and.w	r1, r1, #7
   187c4:	410a      	asrs	r2, r1
   187c6:	f012 0201 	ands.w	r2, r2, #1
   187ca:	d10b      	bne.n	187e4 <event_slave+0x134>
		chan_index = chan_next % chan_count;
   187cc:	fbb0 f3f5 	udiv	r3, r0, r5
   187d0:	fb05 0313 	mls	r3, r5, r3, r0
   187d4:	b2db      	uxtb	r3, r3
	while (byte_count--) {
   187d6:	f104 0516 	add.w	r5, r4, #22
   187da:	f104 0e1b 	add.w	lr, r4, #27
	chan_next = 0U;
   187de:	4610      	mov	r0, r2
	while (byte_count--) {
   187e0:	45ae      	cmp	lr, r5
   187e2:	d141      	bne.n	18868 <event_slave+0x1b8>
	chan_set(data_chan_use);
   187e4:	f009 fba4 	bl	21f30 <chan_set>
	conn->slave.window_widening_event_us +=
   187e8:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   187ec:	4413      	add	r3, r2
	    conn->slave.window_widening_max_us) {
   187ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
		conn->slave.window_widening_event_us =
   187f0:	429a      	cmp	r2, r3
   187f2:	bf94      	ite	ls
   187f4:	64a2      	strls	r2, [r4, #72]	; 0x48
   187f6:	64a3      	strhi	r3, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
   187f8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
	conn->slave.window_widening_prepare_us = 0U;
   187fc:	2500      	movs	r5, #0
	conn->slave.window_size_event_us +=
   187fe:	4413      	add	r3, r2
	conn->slave.window_size_prepare_us = 0U;
   18800:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   18804:	68fa      	ldr	r2, [r7, #12]
	conn->slave.window_widening_prepare_us = 0U;
   18806:	6465      	str	r5, [r4, #68]	; 0x44
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   18808:	f106 0109 	add.w	r1, r6, #9
   1880c:	4628      	mov	r0, r5
   1880e:	f001 ff03 	bl	1a618 <radio_tmr_start>
   18812:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   18814:	f001 ff90 	bl	1a738 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   18818:	4628      	mov	r0, r5
   1881a:	f001 ffa7 	bl	1a76c <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   1881e:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
   18820:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18822:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
   18824:	4629      	mov	r1, r5
   18826:	4628      	mov	r0, r5
   18828:	eb03 0942 	add.w	r9, r3, r2, lsl #1
   1882c:	f009 fe0c 	bl	22448 <radio_rx_ready_delay_get>
	switch (phy) {
   18830:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
   18832:	4629      	mov	r1, r5
   18834:	4480      	add	r8, r0
   18836:	4628      	mov	r0, r5
   18838:	f009 fe08 	bl	2244c <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1883c:	4440      	add	r0, r8
   1883e:	f001 ff6f 	bl	1a720 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   18842:	f894 1020 	ldrb.w	r1, [r4, #32]
   18846:	3107      	adds	r1, #7
   18848:	4632      	mov	r2, r6
   1884a:	b2c9      	uxtb	r1, r1
   1884c:	4620      	mov	r0, r4
   1884e:	f009 fbb2 	bl	21fb6 <preempt_calc>
   18852:	4603      	mov	r3, r0
   18854:	b1f0      	cbz	r0, 18894 <event_slave+0x1e4>
		_radio.state = STATE_STOP;
   18856:	2304      	movs	r3, #4
   18858:	757b      	strb	r3, [r7, #21]
		radio_disable();
   1885a:	f001 fde3 	bl	1a424 <radio_disable>
	packet_tx_enqueue(2);
   1885e:	2002      	movs	r0, #2
}
   18860:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
   18864:	f7ff bd48 	b.w	182f8 <packet_tx_enqueue>
		bite = *chan_map;
   18868:	f100 0108 	add.w	r1, r0, #8
   1886c:	f815 cf01 	ldrb.w	ip, [r5, #1]!
		while (bit_count--) {
   18870:	b2c9      	uxtb	r1, r1
		bite = *chan_map;
   18872:	4602      	mov	r2, r0
		while (bit_count--) {
   18874:	428a      	cmp	r2, r1
   18876:	4608      	mov	r0, r1
   18878:	d0b2      	beq.n	187e0 <event_slave+0x130>
			if (bite & 0x01) {
   1887a:	f01c 0f01 	tst.w	ip, #1
   1887e:	d002      	beq.n	18886 <event_slave+0x1d6>
				if (chan_index == 0) {
   18880:	b133      	cbz	r3, 18890 <event_slave+0x1e0>
				chan_index--;
   18882:	3b01      	subs	r3, #1
   18884:	b2db      	uxtb	r3, r3
			chan_next++;
   18886:	3201      	adds	r2, #1
   18888:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   1888a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1888e:	e7f1      	b.n	18874 <event_slave+0x1c4>
				if (chan_index == 0) {
   18890:	4610      	mov	r0, r2
   18892:	e7a7      	b.n	187e4 <event_slave+0x134>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   18894:	4a0f      	ldr	r2, [pc, #60]	; (188d4 <event_slave+0x224>)
   18896:	4601      	mov	r1, r0
   18898:	f7fd ffca 	bl	16830 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1889c:	f030 0302 	bics.w	r3, r0, #2
   188a0:	d0dd      	beq.n	1885e <event_slave+0x1ae>
   188a2:	2301      	movs	r3, #1
   188a4:	f04f 0100 	mov.w	r1, #0
   188a8:	f363 0107 	bfi	r1, r3, #0, #8
   188ac:	4a04      	ldr	r2, [pc, #16]	; (188c0 <event_slave+0x210>)
   188ae:	4b05      	ldr	r3, [pc, #20]	; (188c4 <event_slave+0x214>)
   188b0:	4809      	ldr	r0, [pc, #36]	; (188d8 <event_slave+0x228>)
   188b2:	1a9b      	subs	r3, r3, r2
   188b4:	08db      	lsrs	r3, r3, #3
   188b6:	f363 118f 	bfi	r1, r3, #6, #10
   188ba:	e70f      	b.n	186dc <event_slave+0x2c>
   188bc:	20000d68 	.word	0x20000d68
   188c0:	000233ec 	.word	0x000233ec
   188c4:	0002341c 	.word	0x0002341c
   188c8:	0002841f 	.word	0x0002841f
   188cc:	00028449 	.word	0x00028449
   188d0:	0002822a 	.word	0x0002822a
   188d4:	00017d6d 	.word	0x00017d6d
   188d8:	00028388 	.word	0x00028388

000188dc <mayfly_xtal_stop_calc>:
{
   188dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   188de:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   188e0:	2302      	movs	r3, #2
   188e2:	9309      	str	r3, [sp, #36]	; 0x24
	struct connection *conn_curr = NULL;
   188e4:	2300      	movs	r3, #0
	struct connection *conn_next = NULL;
   188e6:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	ticker_id_next = 0xff;
   188ea:	22ff      	movs	r2, #255	; 0xff
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   188ec:	4e5f      	ldr	r6, [pc, #380]	; (18a6c <mayfly_xtal_stop_calc+0x190>)
				    _radio.connection_count));
   188ee:	4d60      	ldr	r5, [pc, #384]	; (18a70 <mayfly_xtal_stop_calc+0x194>)
	ticker_id_next = 0xff;
   188f0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	u8_t ticker_id_curr = ((u32_t)params & 0xff);
   188f4:	b2c4      	uxtb	r4, r0
	ticks_to_expire = 0U;
   188f6:	930a      	str	r3, [sp, #40]	; 0x28
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   188f8:	ab09      	add	r3, sp, #36	; 0x24
   188fa:	e9cd 6301 	strd	r6, r3, [sp, #4]
   188fe:	ab0a      	add	r3, sp, #40	; 0x28
   18900:	9300      	str	r3, [sp, #0]
   18902:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   18906:	ab0b      	add	r3, sp, #44	; 0x2c
   18908:	2101      	movs	r1, #1
   1890a:	2000      	movs	r0, #0
   1890c:	f7fd ff52 	bl	167b4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   18910:	2802      	cmp	r0, #2
   18912:	d019      	beq.n	18948 <mayfly_xtal_stop_calc+0x6c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   18914:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18916:	b1db      	cbz	r3, 18950 <mayfly_xtal_stop_calc+0x74>
   18918:	2301      	movs	r3, #1
   1891a:	f04f 0100 	mov.w	r1, #0
   1891e:	f363 0107 	bfi	r1, r3, #0, #8
   18922:	4a54      	ldr	r2, [pc, #336]	; (18a74 <mayfly_xtal_stop_calc+0x198>)
   18924:	4b54      	ldr	r3, [pc, #336]	; (18a78 <mayfly_xtal_stop_calc+0x19c>)
   18926:	4855      	ldr	r0, [pc, #340]	; (18a7c <mayfly_xtal_stop_calc+0x1a0>)
   18928:	1a9b      	subs	r3, r3, r2
   1892a:	08db      	lsrs	r3, r3, #3
   1892c:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(hdr_curr);
   18930:	f005 fd87 	bl	1e442 <log_0>
   18934:	4040      	eors	r0, r0
   18936:	f380 8811 	msr	BASEPRI, r0
   1893a:	f04f 0004 	mov.w	r0, #4
   1893e:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   18940:	2101      	movs	r1, #1
   18942:	2000      	movs	r0, #0
   18944:	f7fd ffac 	bl	168a0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   18948:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1894a:	2b02      	cmp	r3, #2
   1894c:	d0f8      	beq.n	18940 <mayfly_xtal_stop_calc+0x64>
   1894e:	e7e1      	b.n	18914 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
   18950:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
   18954:	2bff      	cmp	r3, #255	; 0xff
   18956:	d01a      	beq.n	1898e <mayfly_xtal_stop_calc+0xb2>
   18958:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1895c:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
   1895e:	4293      	cmp	r3, r2
   18960:	daca      	bge.n	188f8 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
   18962:	3b05      	subs	r3, #5
   18964:	b2db      	uxtb	r3, r3
   18966:	2bf9      	cmp	r3, #249	; 0xf9
   18968:	d811      	bhi.n	1898e <mayfly_xtal_stop_calc+0xb2>
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
   1896a:	a90c      	add	r1, sp, #48	; 0x30
   1896c:	4620      	mov	r0, r4
   1896e:	f7ff fba3 	bl	180b8 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
   18972:	b990      	cbnz	r0, 1899a <mayfly_xtal_stop_calc+0xbe>
   18974:	2301      	movs	r3, #1
   18976:	f04f 0100 	mov.w	r1, #0
   1897a:	f363 0107 	bfi	r1, r3, #0, #8
   1897e:	4a3d      	ldr	r2, [pc, #244]	; (18a74 <mayfly_xtal_stop_calc+0x198>)
   18980:	4b3d      	ldr	r3, [pc, #244]	; (18a78 <mayfly_xtal_stop_calc+0x19c>)
   18982:	483f      	ldr	r0, [pc, #252]	; (18a80 <mayfly_xtal_stop_calc+0x1a4>)
   18984:	1a9b      	subs	r3, r3, r2
   18986:	08db      	lsrs	r3, r3, #3
   18988:	f363 118f 	bfi	r1, r3, #6, #10
   1898c:	e7d0      	b.n	18930 <mayfly_xtal_stop_calc+0x54>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   1898e:	2100      	movs	r1, #0
   18990:	2001      	movs	r0, #1
   18992:	f7ff f841 	bl	17a18 <mayfly_xtal_retain>
}
   18996:	b00f      	add	sp, #60	; 0x3c
   18998:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
   1899a:	e9d0 7600 	ldrd	r7, r6, [r0]
   1899e:	2f00      	cmp	r7, #0
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
   189a0:	bfb8      	it	lt
   189a2:	6887      	ldrlt	r7, [r0, #8]
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
   189a4:	42b7      	cmp	r7, r6
   189a6:	bf38      	it	cc
   189a8:	4637      	movcc	r7, r6
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   189aa:	a90d      	add	r1, sp, #52	; 0x34
   189ac:	68c6      	ldr	r6, [r0, #12]
   189ae:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   189b2:	f7ff fb81 	bl	180b8 <hdr_conn_get>
   189b6:	3631      	adds	r6, #49	; 0x31
	LL_ASSERT(hdr_next);
   189b8:	4604      	mov	r4, r0
   189ba:	b960      	cbnz	r0, 189d6 <mayfly_xtal_stop_calc+0xfa>
   189bc:	2301      	movs	r3, #1
   189be:	f04f 0100 	mov.w	r1, #0
   189c2:	f363 0107 	bfi	r1, r3, #0, #8
   189c6:	4a2b      	ldr	r2, [pc, #172]	; (18a74 <mayfly_xtal_stop_calc+0x198>)
   189c8:	4b2b      	ldr	r3, [pc, #172]	; (18a78 <mayfly_xtal_stop_calc+0x19c>)
   189ca:	482e      	ldr	r0, [pc, #184]	; (18a84 <mayfly_xtal_stop_calc+0x1a8>)
   189cc:	1a9b      	subs	r3, r3, r2
   189ce:	08db      	lsrs	r3, r3, #3
   189d0:	f363 118f 	bfi	r1, r3, #6, #10
   189d4:	e7ac      	b.n	18930 <mayfly_xtal_stop_calc+0x54>
	ticks_prepare_to_start_next =
   189d6:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   189da:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
   189dc:	429d      	cmp	r5, r3
   189de:	bf38      	it	cc
   189e0:	461d      	movcc	r5, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   189e2:	2a00      	cmp	r2, #0
   189e4:	da08      	bge.n	189f8 <mayfly_xtal_stop_calc+0x11c>
   189e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		u32_t ticks_reduced = (hdr_next->ticks_xtal_to_start &
   189e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   189ec:	1b51      	subs	r1, r2, r5
		if (ticks_to_expire > ticks_reduced) {
   189ee:	428b      	cmp	r3, r1
   189f0:	d911      	bls.n	18a16 <mayfly_xtal_stop_calc+0x13a>
			ticks_to_expire -= ticks_reduced;
   189f2:	442b      	add	r3, r5
   189f4:	1a9b      	subs	r3, r3, r2
   189f6:	930a      	str	r3, [sp, #40]	; 0x28
	if (ticks_to_expire >
   189f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	    (ticks_slot_abs +
   189fa:	443e      	add	r6, r7
	if (ticks_to_expire >
   189fc:	429e      	cmp	r6, r3
   189fe:	d20c      	bcs.n	18a1a <mayfly_xtal_stop_calc+0x13e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   18a00:	2100      	movs	r1, #0
   18a02:	2001      	movs	r0, #1
   18a04:	f7ff f808 	bl	17a18 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
   18a08:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   18a0c:	2101      	movs	r1, #1
   18a0e:	4620      	mov	r0, r4
   18a10:	f7ff fe2a 	bl	18668 <prepare_normal_set>
   18a14:	e7bf      	b.n	18996 <mayfly_xtal_stop_calc+0xba>
			ticks_to_expire = 0U;
   18a16:	2300      	movs	r3, #0
   18a18:	930a      	str	r3, [sp, #40]	; 0x28
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   18a1a:	2101      	movs	r1, #1
   18a1c:	4608      	mov	r0, r1
   18a1e:	f7fe fffb 	bl	17a18 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
   18a22:	6823      	ldr	r3, [r4, #0]
   18a24:	2b00      	cmp	r3, #0
   18a26:	dbb6      	blt.n	18996 <mayfly_xtal_stop_calc+0xba>
   18a28:	42ab      	cmp	r3, r5
   18a2a:	d9b4      	bls.n	18996 <mayfly_xtal_stop_calc+0xba>
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   18a2c:	2000      	movs	r0, #0
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
   18a2e:	1b5b      	subs	r3, r3, r5
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   18a30:	4a15      	ldr	r2, [pc, #84]	; (18a88 <mayfly_xtal_stop_calc+0x1ac>)
   18a32:	9205      	str	r2, [sp, #20]
   18a34:	e9cd 0301 	strd	r0, r3, [sp, #4]
   18a38:	9406      	str	r4, [sp, #24]
   18a3a:	e9cd 0003 	strd	r0, r0, [sp, #12]
   18a3e:	9000      	str	r0, [sp, #0]
   18a40:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   18a44:	2101      	movs	r1, #1
   18a46:	f7fd fe33 	bl	166b0 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18a4a:	f030 0302 	bics.w	r3, r0, #2
   18a4e:	d0a2      	beq.n	18996 <mayfly_xtal_stop_calc+0xba>
   18a50:	2301      	movs	r3, #1
   18a52:	f04f 0100 	mov.w	r1, #0
   18a56:	f363 0107 	bfi	r1, r3, #0, #8
   18a5a:	4a06      	ldr	r2, [pc, #24]	; (18a74 <mayfly_xtal_stop_calc+0x198>)
   18a5c:	4b06      	ldr	r3, [pc, #24]	; (18a78 <mayfly_xtal_stop_calc+0x19c>)
   18a5e:	480b      	ldr	r0, [pc, #44]	; (18a8c <mayfly_xtal_stop_calc+0x1b0>)
   18a60:	1a9b      	subs	r3, r3, r2
   18a62:	08db      	lsrs	r3, r3, #3
   18a64:	f363 118f 	bfi	r1, r3, #6, #10
   18a68:	e762      	b.n	18930 <mayfly_xtal_stop_calc+0x54>
   18a6a:	bf00      	nop
   18a6c:	00021e7b 	.word	0x00021e7b
   18a70:	20000d68 	.word	0x20000d68
   18a74:	000233ec 	.word	0x000233ec
   18a78:	0002341c 	.word	0x0002341c
   18a7c:	00028842 	.word	0x00028842
   18a80:	0002885f 	.word	0x0002885f
   18a84:	00028879 	.word	0x00028879
   18a88:	00021e7f 	.word	0x00021e7f
   18a8c:	00028388 	.word	0x00028388

00018a90 <event_scan_prepare.part.41>:
void radio_event_adv_prepare(u32_t ticks_at_expire, u32_t remainder,
   18a90:	b508      	push	{r3, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   18a92:	f04f 0100 	mov.w	r1, #0
   18a96:	2301      	movs	r3, #1
   18a98:	4a08      	ldr	r2, [pc, #32]	; (18abc <event_scan_prepare.part.41+0x2c>)
   18a9a:	4809      	ldr	r0, [pc, #36]	; (18ac0 <event_scan_prepare.part.41+0x30>)
   18a9c:	f363 0107 	bfi	r1, r3, #0, #8
   18aa0:	4b08      	ldr	r3, [pc, #32]	; (18ac4 <event_scan_prepare.part.41+0x34>)
   18aa2:	1a9b      	subs	r3, r3, r2
   18aa4:	08db      	lsrs	r3, r3, #3
   18aa6:	f363 118f 	bfi	r1, r3, #6, #10
   18aaa:	f005 fcca 	bl	1e442 <log_0>
   18aae:	4040      	eors	r0, r0
   18ab0:	f380 8811 	msr	BASEPRI, r0
   18ab4:	f04f 0004 	mov.w	r0, #4
   18ab8:	df02      	svc	2
   18aba:	bf00      	nop
   18abc:	000233ec 	.word	0x000233ec
   18ac0:	00028921 	.word	0x00028921
   18ac4:	0002341c 	.word	0x0002341c

00018ac8 <ticker_stop_adv_stop>:
{
   18ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   18aca:	4c5e      	ldr	r4, [pc, #376]	; (18c44 <ticker_stop_adv_stop+0x17c>)
	if (status != TICKER_STATUS_SUCCESS) {
   18acc:	b1b8      	cbz	r0, 18afe <ticker_stop_adv_stop+0x36>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   18ace:	7ca3      	ldrb	r3, [r4, #18]
   18ad0:	2b05      	cmp	r3, #5
   18ad2:	f000 80b4 	beq.w	18c3e <ticker_stop_adv_stop+0x176>
   18ad6:	2301      	movs	r3, #1
   18ad8:	f04f 0100 	mov.w	r1, #0
   18adc:	f363 0107 	bfi	r1, r3, #0, #8
   18ae0:	4a59      	ldr	r2, [pc, #356]	; (18c48 <ticker_stop_adv_stop+0x180>)
   18ae2:	4b5a      	ldr	r3, [pc, #360]	; (18c4c <ticker_stop_adv_stop+0x184>)
   18ae4:	485a      	ldr	r0, [pc, #360]	; (18c50 <ticker_stop_adv_stop+0x188>)
   18ae6:	1a9b      	subs	r3, r3, r2
   18ae8:	08db      	lsrs	r3, r3, #3
   18aea:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(_radio.ticker_id_prepare);
   18aee:	f005 fca8 	bl	1e442 <log_0>
   18af2:	4040      	eors	r0, r0
   18af4:	f380 8811 	msr	BASEPRI, r0
   18af8:	f04f 0004 	mov.w	r0, #4
   18afc:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   18afe:	7c23      	ldrb	r3, [r4, #16]
   18b00:	2b05      	cmp	r3, #5
   18b02:	d002      	beq.n	18b0a <ticker_stop_adv_stop+0x42>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   18b04:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   18b06:	2b05      	cmp	r3, #5
   18b08:	d176      	bne.n	18bf8 <ticker_stop_adv_stop+0x130>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   18b0a:	2302      	movs	r3, #2
   18b0c:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b0e:	2200      	movs	r2, #0
   18b10:	ab02      	add	r3, sp, #8
   18b12:	9300      	str	r3, [sp, #0]
   18b14:	2101      	movs	r1, #1
   18b16:	4b4f      	ldr	r3, [pc, #316]	; (18c54 <ticker_stop_adv_stop+0x18c>)
   18b18:	4610      	mov	r0, r2
   18b1a:	f7fd fe11 	bl	16740 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   18b1e:	2802      	cmp	r0, #2
   18b20:	d00d      	beq.n	18b3e <ticker_stop_adv_stop+0x76>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   18b22:	9802      	ldr	r0, [sp, #8]
   18b24:	b1c0      	cbz	r0, 18b58 <ticker_stop_adv_stop+0x90>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   18b26:	9802      	ldr	r0, [sp, #8]
   18b28:	2801      	cmp	r0, #1
   18b2a:	d17b      	bne.n	18c24 <ticker_stop_adv_stop+0x15c>
		if (_radio.role != ROLE_NONE) {
   18b2c:	7d23      	ldrb	r3, [r4, #20]
   18b2e:	2b00      	cmp	r3, #0
   18b30:	d062      	beq.n	18bf8 <ticker_stop_adv_stop+0x130>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   18b32:	4b49      	ldr	r3, [pc, #292]	; (18c58 <ticker_stop_adv_stop+0x190>)
   18b34:	2204      	movs	r2, #4
   18b36:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   18b38:	2200      	movs	r2, #0
   18b3a:	4611      	mov	r1, r2
   18b3c:	e058      	b.n	18bf0 <ticker_stop_adv_stop+0x128>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   18b3e:	2201      	movs	r2, #1
   18b40:	4611      	mov	r1, r2
   18b42:	4610      	mov	r0, r2
   18b44:	f7fd f824 	bl	15b90 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
   18b48:	9b02      	ldr	r3, [sp, #8]
   18b4a:	2b02      	cmp	r3, #2
   18b4c:	d1e9      	bne.n	18b22 <ticker_stop_adv_stop+0x5a>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b4e:	2101      	movs	r1, #1
   18b50:	2000      	movs	r0, #0
   18b52:	f7fd fea5 	bl	168a0 <ticker_job_sched>
   18b56:	e7f7      	b.n	18b48 <ticker_stop_adv_stop+0x80>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   18b58:	2302      	movs	r3, #2
   18b5a:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   18b5c:	7c23      	ldrb	r3, [r4, #16]
   18b5e:	b963      	cbnz	r3, 18b7a <ticker_stop_adv_stop+0xb2>
   18b60:	2301      	movs	r3, #1
   18b62:	f04f 0100 	mov.w	r1, #0
   18b66:	f363 0107 	bfi	r1, r3, #0, #8
   18b6a:	4a37      	ldr	r2, [pc, #220]	; (18c48 <ticker_stop_adv_stop+0x180>)
   18b6c:	4b37      	ldr	r3, [pc, #220]	; (18c4c <ticker_stop_adv_stop+0x184>)
   18b6e:	483b      	ldr	r0, [pc, #236]	; (18c5c <ticker_stop_adv_stop+0x194>)
   18b70:	1a9b      	subs	r3, r3, r2
   18b72:	08db      	lsrs	r3, r3, #3
   18b74:	f363 118f 	bfi	r1, r3, #6, #10
   18b78:	e7b9      	b.n	18aee <ticker_stop_adv_stop+0x26>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b7a:	ab03      	add	r3, sp, #12
   18b7c:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0U;
   18b7e:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b80:	4611      	mov	r1, r2
   18b82:	9300      	str	r3, [sp, #0]
   18b84:	4b33      	ldr	r3, [pc, #204]	; (18c54 <ticker_stop_adv_stop+0x18c>)
   18b86:	f7fd fddb 	bl	16740 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   18b8a:	2802      	cmp	r0, #2
   18b8c:	d01a      	beq.n	18bc4 <ticker_stop_adv_stop+0xfc>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   18b8e:	9a03      	ldr	r2, [sp, #12]
   18b90:	b32a      	cbz	r2, 18bde <ticker_stop_adv_stop+0x116>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   18b92:	9c03      	ldr	r4, [sp, #12]
   18b94:	2c01      	cmp	r4, #1
   18b96:	d145      	bne.n	18c24 <ticker_stop_adv_stop+0x15c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   18b98:	2200      	movs	r2, #0
   18b9a:	4611      	mov	r1, r2
   18b9c:	4b30      	ldr	r3, [pc, #192]	; (18c60 <ticker_stop_adv_stop+0x198>)
   18b9e:	4620      	mov	r0, r4
   18ba0:	f7fd f81e 	bl	15be0 <mayfly_enqueue>
			LL_ASSERT(!ret);
   18ba4:	4602      	mov	r2, r0
   18ba6:	2800      	cmp	r0, #0
   18ba8:	d03a      	beq.n	18c20 <ticker_stop_adv_stop+0x158>
			LL_ASSERT(!ret);
   18baa:	2301      	movs	r3, #1
   18bac:	f04f 0100 	mov.w	r1, #0
   18bb0:	f363 0107 	bfi	r1, r3, #0, #8
   18bb4:	4a24      	ldr	r2, [pc, #144]	; (18c48 <ticker_stop_adv_stop+0x180>)
   18bb6:	4b25      	ldr	r3, [pc, #148]	; (18c4c <ticker_stop_adv_stop+0x184>)
   18bb8:	482a      	ldr	r0, [pc, #168]	; (18c64 <ticker_stop_adv_stop+0x19c>)
   18bba:	1a9b      	subs	r3, r3, r2
   18bbc:	08db      	lsrs	r3, r3, #3
   18bbe:	f363 118f 	bfi	r1, r3, #6, #10
   18bc2:	e794      	b.n	18aee <ticker_stop_adv_stop+0x26>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   18bc4:	2201      	movs	r2, #1
   18bc6:	4611      	mov	r1, r2
   18bc8:	4610      	mov	r0, r2
   18bca:	f7fc ffe1 	bl	15b90 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
   18bce:	9b03      	ldr	r3, [sp, #12]
   18bd0:	2b02      	cmp	r3, #2
   18bd2:	d1dc      	bne.n	18b8e <ticker_stop_adv_stop+0xc6>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   18bd4:	2101      	movs	r1, #1
   18bd6:	2000      	movs	r0, #0
   18bd8:	f7fd fe62 	bl	168a0 <ticker_job_sched>
   18bdc:	e7f7      	b.n	18bce <ticker_stop_adv_stop+0x106>
			u32_t ticks_xtal_to_start =
   18bde:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
   18be0:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
   18be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   18be6:	428b      	cmp	r3, r1
   18be8:	d21a      	bcs.n	18c20 <ticker_stop_adv_stop+0x158>
				ret = mayfly_enqueue(
   18bea:	4b1d      	ldr	r3, [pc, #116]	; (18c60 <ticker_stop_adv_stop+0x198>)
				ret = mayfly_enqueue(
   18bec:	4611      	mov	r1, r2
   18bee:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   18bf0:	f7fc fff6 	bl	15be0 <mayfly_enqueue>
			LL_ASSERT(!ret);
   18bf4:	2800      	cmp	r0, #0
   18bf6:	d1d8      	bne.n	18baa <ticker_stop_adv_stop+0xe2>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   18bf8:	2200      	movs	r2, #0
   18bfa:	4b1b      	ldr	r3, [pc, #108]	; (18c68 <ticker_stop_adv_stop+0x1a0>)
   18bfc:	4611      	mov	r1, r2
   18bfe:	2001      	movs	r0, #1
   18c00:	f7fc ffee 	bl	15be0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   18c04:	b1d8      	cbz	r0, 18c3e <ticker_stop_adv_stop+0x176>
   18c06:	2301      	movs	r3, #1
   18c08:	f04f 0100 	mov.w	r1, #0
   18c0c:	f363 0107 	bfi	r1, r3, #0, #8
   18c10:	4a0d      	ldr	r2, [pc, #52]	; (18c48 <ticker_stop_adv_stop+0x180>)
   18c12:	4b0e      	ldr	r3, [pc, #56]	; (18c4c <ticker_stop_adv_stop+0x184>)
   18c14:	4815      	ldr	r0, [pc, #84]	; (18c6c <ticker_stop_adv_stop+0x1a4>)
   18c16:	1a9b      	subs	r3, r3, r2
   18c18:	08db      	lsrs	r3, r3, #3
   18c1a:	f363 118f 	bfi	r1, r3, #6, #10
   18c1e:	e766      	b.n	18aee <ticker_stop_adv_stop+0x26>
				ret = mayfly_enqueue(
   18c20:	4b13      	ldr	r3, [pc, #76]	; (18c70 <ticker_stop_adv_stop+0x1a8>)
   18c22:	e7e3      	b.n	18bec <ticker_stop_adv_stop+0x124>
		LL_ASSERT(0);
   18c24:	2301      	movs	r3, #1
   18c26:	f04f 0100 	mov.w	r1, #0
   18c2a:	f363 0107 	bfi	r1, r3, #0, #8
   18c2e:	4a06      	ldr	r2, [pc, #24]	; (18c48 <ticker_stop_adv_stop+0x180>)
   18c30:	4b06      	ldr	r3, [pc, #24]	; (18c4c <ticker_stop_adv_stop+0x184>)
   18c32:	4810      	ldr	r0, [pc, #64]	; (18c74 <ticker_stop_adv_stop+0x1ac>)
   18c34:	1a9b      	subs	r3, r3, r2
   18c36:	08db      	lsrs	r3, r3, #3
   18c38:	f363 118f 	bfi	r1, r3, #6, #10
   18c3c:	e757      	b.n	18aee <ticker_stop_adv_stop+0x26>
}
   18c3e:	b004      	add	sp, #16
   18c40:	bd10      	pop	{r4, pc}
   18c42:	bf00      	nop
   18c44:	20000d68 	.word	0x20000d68
   18c48:	000233ec 	.word	0x000233ec
   18c4c:	0002341c 	.word	0x0002341c
   18c50:	00028b09 	.word	0x00028b09
   18c54:	00021e7b 	.word	0x00021e7b
   18c58:	20007de0 	.word	0x20007de0
   18c5c:	000289c5 	.word	0x000289c5
   18c60:	20007db0 	.word	0x20007db0
   18c64:	00028a0f 	.word	0x00028a0f
   18c68:	20007d80 	.word	0x20007d80
   18c6c:	00028829 	.word	0x00028829
   18c70:	20007e40 	.word	0x20007e40
   18c74:	0002822a 	.word	0x0002822a

00018c78 <adv_scan_configure.constprop.45>:
static void adv_scan_configure(u8_t phy, u8_t flags)
   18c78:	b507      	push	{r0, r1, r2, lr}
	u32_t aa = 0x8e89bed6;
   18c7a:	4b0c      	ldr	r3, [pc, #48]	; (18cac <adv_scan_configure.constprop.45+0x34>)
   18c7c:	9301      	str	r3, [sp, #4]
	adv_scan_conn_configure();
   18c7e:	f7fe ff13 	bl	17aa8 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   18c82:	2100      	movs	r1, #0
   18c84:	4608      	mov	r0, r1
   18c86:	f001 fb43 	bl	1a310 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   18c8a:	a801      	add	r0, sp, #4
   18c8c:	f001 fb6e 	bl	1a36c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   18c90:	2200      	movs	r2, #0
   18c92:	2125      	movs	r1, #37	; 0x25
   18c94:	2008      	movs	r0, #8
   18c96:	f001 fb81 	bl	1a39c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   18c9a:	4905      	ldr	r1, [pc, #20]	; (18cb0 <adv_scan_configure.constprop.45+0x38>)
   18c9c:	f240 605b 	movw	r0, #1627	; 0x65b
   18ca0:	f001 fbfc 	bl	1a49c <radio_crc_configure>
}
   18ca4:	b003      	add	sp, #12
   18ca6:	f85d fb04 	ldr.w	pc, [sp], #4
   18caa:	bf00      	nop
   18cac:	8e89bed6 	.word	0x8e89bed6
   18cb0:	00555555 	.word	0x00555555

00018cb4 <event_scan>:
{
   18cb4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   18cb6:	4b5c      	ldr	r3, [pc, #368]	; (18e28 <event_scan+0x174>)
   18cb8:	7d1a      	ldrb	r2, [r3, #20]
{
   18cba:	b08a      	sub	sp, #40	; 0x28
   18cbc:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   18cbe:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   18cc2:	461c      	mov	r4, r3
   18cc4:	b19a      	cbz	r2, 18cee <event_scan+0x3a>
   18cc6:	2301      	movs	r3, #1
   18cc8:	f04f 0100 	mov.w	r1, #0
   18ccc:	f363 0107 	bfi	r1, r3, #0, #8
   18cd0:	4a56      	ldr	r2, [pc, #344]	; (18e2c <event_scan+0x178>)
   18cd2:	4b57      	ldr	r3, [pc, #348]	; (18e30 <event_scan+0x17c>)
   18cd4:	4857      	ldr	r0, [pc, #348]	; (18e34 <event_scan+0x180>)
   18cd6:	1a9b      	subs	r3, r3, r2
   18cd8:	08db      	lsrs	r3, r3, #3
   18cda:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   18cde:	f005 fbb0 	bl	1e442 <log_0>
   18ce2:	4040      	eors	r0, r0
   18ce4:	f380 8811 	msr	BASEPRI, r0
   18ce8:	f04f 0004 	mov.w	r0, #4
   18cec:	df02      	svc	2
   18cee:	7c1b      	ldrb	r3, [r3, #16]
   18cf0:	b2db      	uxtb	r3, r3
   18cf2:	2b06      	cmp	r3, #6
   18cf4:	d00c      	beq.n	18d10 <event_scan+0x5c>
   18cf6:	2301      	movs	r3, #1
   18cf8:	f04f 0100 	mov.w	r1, #0
   18cfc:	f363 0107 	bfi	r1, r3, #0, #8
   18d00:	4a4a      	ldr	r2, [pc, #296]	; (18e2c <event_scan+0x178>)
   18d02:	4b4b      	ldr	r3, [pc, #300]	; (18e30 <event_scan+0x17c>)
   18d04:	484c      	ldr	r0, [pc, #304]	; (18e38 <event_scan+0x184>)
   18d06:	1a9b      	subs	r3, r3, r2
   18d08:	08db      	lsrs	r3, r3, #3
   18d0a:	f363 118f 	bfi	r1, r3, #6, #10
   18d0e:	e7e6      	b.n	18cde <event_scan+0x2a>
	_radio.role = ROLE_SCAN;
   18d10:	2202      	movs	r2, #2
   18d12:	7522      	strb	r2, [r4, #20]
	_radio.ticker_id_prepare = 0U;
   18d14:	7426      	strb	r6, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   18d16:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0U;
   18d18:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.ticks_anchor = ticks_at_expire;
   18d1c:	60a0      	str	r0, [r4, #8]
	_radio.state = STATE_RX;
   18d1e:	2201      	movs	r2, #1
	_radio.scanner.state = 0U;
   18d20:	f366 0341 	bfi	r3, r6, #1, #1
	_radio.state = STATE_RX;
   18d24:	7562      	strb	r2, [r4, #21]
	_radio.scanner.state = 0U;
   18d26:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(0, 0);
   18d2a:	f7ff ffa5 	bl	18c78 <adv_scan_configure.constprop.45>
	chan_set(37 + _radio.scanner.chan++);
   18d2e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   18d32:	f3c3 0081 	ubfx	r0, r3, #2, #2
   18d36:	1c42      	adds	r2, r0, #1
   18d38:	f362 0383 	bfi	r3, r2, #2, #2
   18d3c:	3025      	adds	r0, #37	; 0x25
   18d3e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   18d42:	f009 f8f5 	bl	21f30 <chan_set>
	if (_radio.scanner.chan == 3) {
   18d46:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   18d4a:	f003 020c 	and.w	r2, r3, #12
   18d4e:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0U;
   18d50:	bf08      	it	eq
   18d52:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
   18d56:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0U;
   18d5a:	bf08      	it	eq
   18d5c:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
   18d60:	f001 fc4e 	bl	1a600 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   18d64:	2300      	movs	r3, #0
   18d66:	4619      	mov	r1, r3
   18d68:	461a      	mov	r2, r3
   18d6a:	4618      	mov	r0, r3
   18d6c:	f001 fbc0 	bl	1a4f0 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   18d70:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   18d74:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
   18d78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   18d7c:	3008      	adds	r0, #8
   18d7e:	f001 fb39 	bl	1a3f4 <radio_pkt_rx_set>
	radio_rssi_measure();
   18d82:	f001 fbcd 	bl	1a520 <radio_rssi_measure>
	if (_radio.scanner.filter_policy) {
   18d86:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   18d8a:	f013 0f06 	tst.w	r3, #6
   18d8e:	d007      	beq.n	18da0 <event_scan+0xec>
		struct ll_filter *wl = ctrl_filter_get(true);
   18d90:	2001      	movs	r0, #1
   18d92:	f001 f8b5 	bl	19f00 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   18d96:	1c82      	adds	r2, r0, #2
   18d98:	7841      	ldrb	r1, [r0, #1]
   18d9a:	7800      	ldrb	r0, [r0, #0]
   18d9c:	f001 fbe2 	bl	1a564 <radio_filter_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   18da0:	68e2      	ldr	r2, [r4, #12]
   18da2:	f105 0109 	add.w	r1, r5, #9
   18da6:	2000      	movs	r0, #0
   18da8:	f001 fc36 	bl	1a618 <radio_tmr_start>
	radio_tmr_end_capture();
   18dac:	f001 fcf0 	bl	1a790 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   18db0:	2106      	movs	r1, #6
   18db2:	462a      	mov	r2, r5
   18db4:	4821      	ldr	r0, [pc, #132]	; (18e3c <event_scan+0x188>)
   18db6:	f009 f8fe 	bl	21fb6 <preempt_calc>
   18dba:	4601      	mov	r1, r0
   18dbc:	b130      	cbz	r0, 18dcc <event_scan+0x118>
		_radio.state = STATE_STOP;
   18dbe:	2304      	movs	r3, #4
   18dc0:	7563      	strb	r3, [r4, #21]
}
   18dc2:	b00a      	add	sp, #40	; 0x28
   18dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   18dc8:	f001 bb2c 	b.w	1a424 <radio_disable>
		ret = ticker_start(
   18dcc:	f641 23f1 	movw	r3, #6897	; 0x1af1
   18dd0:	9308      	str	r3, [sp, #32]
   18dd2:	4b1b      	ldr	r3, [pc, #108]	; (18e40 <event_scan+0x18c>)
   18dd4:	9307      	str	r3, [sp, #28]
   18dd6:	4b1b      	ldr	r3, [pc, #108]	; (18e44 <event_scan+0x190>)
   18dd8:	9001      	str	r0, [sp, #4]
   18dda:	e9cd 0304 	strd	r0, r3, [sp, #16]
   18dde:	e9cd 0002 	strd	r0, r0, [sp, #8]
   18de2:	2204      	movs	r2, #4
   18de4:	9206      	str	r2, [sp, #24]
   18de6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   18dea:	3309      	adds	r3, #9
   18dec:	9300      	str	r3, [sp, #0]
   18dee:	462b      	mov	r3, r5
   18df0:	f7fd fc14 	bl	1661c <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18df4:	f030 0302 	bics.w	r3, r0, #2
   18df8:	d00c      	beq.n	18e14 <event_scan+0x160>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18dfa:	2301      	movs	r3, #1
   18dfc:	f04f 0100 	mov.w	r1, #0
   18e00:	f363 0107 	bfi	r1, r3, #0, #8
   18e04:	4a09      	ldr	r2, [pc, #36]	; (18e2c <event_scan+0x178>)
   18e06:	4b0a      	ldr	r3, [pc, #40]	; (18e30 <event_scan+0x17c>)
   18e08:	480f      	ldr	r0, [pc, #60]	; (18e48 <event_scan+0x194>)
   18e0a:	1a9b      	subs	r3, r3, r2
   18e0c:	08db      	lsrs	r3, r3, #3
   18e0e:	f363 118f 	bfi	r1, r3, #6, #10
   18e12:	e764      	b.n	18cde <event_scan+0x2a>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   18e14:	4619      	mov	r1, r3
   18e16:	4618      	mov	r0, r3
   18e18:	4a0c      	ldr	r2, [pc, #48]	; (18e4c <event_scan+0x198>)
   18e1a:	f7fd fd09 	bl	16830 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18e1e:	f030 0302 	bics.w	r3, r0, #2
   18e22:	d1ea      	bne.n	18dfa <event_scan+0x146>
}
   18e24:	b00a      	add	sp, #40	; 0x28
   18e26:	bd70      	pop	{r4, r5, r6, pc}
   18e28:	20000d68 	.word	0x20000d68
   18e2c:	000233ec 	.word	0x000233ec
   18e30:	0002341c 	.word	0x0002341c
   18e34:	0002841f 	.word	0x0002841f
   18e38:	000283c6 	.word	0x000283c6
   18e3c:	20000e38 	.word	0x20000e38
   18e40:	00021edf 	.word	0x00021edf
   18e44:	0001812d 	.word	0x0001812d
   18e48:	000283f5 	.word	0x000283f5
   18e4c:	00017d6d 	.word	0x00017d6d

00018e50 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   18e50:	4b3b      	ldr	r3, [pc, #236]	; (18f40 <event_adv+0xf0>)
   18e52:	7d1a      	ldrb	r2, [r3, #20]
{
   18e54:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   18e56:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
   18e5a:	4605      	mov	r5, r0
   18e5c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   18e5e:	b19a      	cbz	r2, 18e88 <event_adv+0x38>
   18e60:	2301      	movs	r3, #1
   18e62:	f04f 0100 	mov.w	r1, #0
   18e66:	f363 0107 	bfi	r1, r3, #0, #8
   18e6a:	4a36      	ldr	r2, [pc, #216]	; (18f44 <event_adv+0xf4>)
   18e6c:	4b36      	ldr	r3, [pc, #216]	; (18f48 <event_adv+0xf8>)
   18e6e:	4837      	ldr	r0, [pc, #220]	; (18f4c <event_adv+0xfc>)
   18e70:	1a9b      	subs	r3, r3, r2
   18e72:	08db      	lsrs	r3, r3, #3
   18e74:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   18e78:	f005 fae3 	bl	1e442 <log_0>
   18e7c:	4040      	eors	r0, r0
   18e7e:	f380 8811 	msr	BASEPRI, r0
   18e82:	f04f 0004 	mov.w	r0, #4
   18e86:	df02      	svc	2
   18e88:	7c1b      	ldrb	r3, [r3, #16]
   18e8a:	b2db      	uxtb	r3, r3
   18e8c:	2b05      	cmp	r3, #5
   18e8e:	d00c      	beq.n	18eaa <event_adv+0x5a>
   18e90:	2301      	movs	r3, #1
   18e92:	f04f 0100 	mov.w	r1, #0
   18e96:	f363 0107 	bfi	r1, r3, #0, #8
   18e9a:	4a2a      	ldr	r2, [pc, #168]	; (18f44 <event_adv+0xf4>)
   18e9c:	4b2a      	ldr	r3, [pc, #168]	; (18f48 <event_adv+0xf8>)
   18e9e:	482c      	ldr	r0, [pc, #176]	; (18f50 <event_adv+0x100>)
   18ea0:	1a9b      	subs	r3, r3, r2
   18ea2:	08db      	lsrs	r3, r3, #3
   18ea4:	f363 118f 	bfi	r1, r3, #6, #10
   18ea8:	e7e6      	b.n	18e78 <event_adv+0x28>
	_radio.role = ROLE_ADV;
   18eaa:	2601      	movs	r6, #1
   18eac:	7526      	strb	r6, [r4, #20]
	_radio.ticks_anchor = ticks_at_expire;
   18eae:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0U;
   18eb0:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   18eb2:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(0, 0);
   18eb4:	f7ff fee0 	bl	18c78 <adv_scan_configure.constprop.45>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   18eb8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   18ebc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   18ec0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18ec4:	f363 0202 	bfi	r2, r3, #0, #3
   18ec8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
   18ecc:	f7ff fafc 	bl	184c8 <adv_setup>
	if (_radio.advertiser.filter_policy) {
   18ed0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   18ed4:	f013 0f18 	tst.w	r3, #24
   18ed8:	d007      	beq.n	18eea <event_adv+0x9a>
		struct ll_filter *wl = ctrl_filter_get(true);
   18eda:	4630      	mov	r0, r6
   18edc:	f001 f810 	bl	19f00 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   18ee0:	1c82      	adds	r2, r0, #2
   18ee2:	7841      	ldrb	r1, [r0, #1]
   18ee4:	7800      	ldrb	r0, [r0, #0]
   18ee6:	f001 fb3d 	bl	1a564 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
   18eea:	68e2      	ldr	r2, [r4, #12]
   18eec:	f105 0109 	add.w	r1, r5, #9
   18ef0:	2001      	movs	r0, #1
   18ef2:	f001 fb91 	bl	1a618 <radio_tmr_start>
	radio_tmr_end_capture();
   18ef6:	f001 fc4b 	bl	1a790 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   18efa:	462a      	mov	r2, r5
   18efc:	2105      	movs	r1, #5
   18efe:	4815      	ldr	r0, [pc, #84]	; (18f54 <event_adv+0x104>)
   18f00:	f009 f859 	bl	21fb6 <preempt_calc>
   18f04:	4603      	mov	r3, r0
   18f06:	b128      	cbz	r0, 18f14 <event_adv+0xc4>
		_radio.state = STATE_STOP;
   18f08:	2304      	movs	r3, #4
   18f0a:	7563      	strb	r3, [r4, #21]
}
   18f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   18f10:	f001 ba88 	b.w	1a424 <radio_disable>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   18f14:	4a10      	ldr	r2, [pc, #64]	; (18f58 <event_adv+0x108>)
   18f16:	4601      	mov	r1, r0
   18f18:	f7fd fc8a 	bl	16830 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18f1c:	f030 0302 	bics.w	r3, r0, #2
   18f20:	d00c      	beq.n	18f3c <event_adv+0xec>
   18f22:	2301      	movs	r3, #1
   18f24:	f04f 0100 	mov.w	r1, #0
   18f28:	f363 0107 	bfi	r1, r3, #0, #8
   18f2c:	4a05      	ldr	r2, [pc, #20]	; (18f44 <event_adv+0xf4>)
   18f2e:	4b06      	ldr	r3, [pc, #24]	; (18f48 <event_adv+0xf8>)
   18f30:	480a      	ldr	r0, [pc, #40]	; (18f5c <event_adv+0x10c>)
   18f32:	1a9b      	subs	r3, r3, r2
   18f34:	08db      	lsrs	r3, r3, #3
   18f36:	f363 118f 	bfi	r1, r3, #6, #10
   18f3a:	e79d      	b.n	18e78 <event_adv+0x28>
}
   18f3c:	bd70      	pop	{r4, r5, r6, pc}
   18f3e:	bf00      	nop
   18f40:	20000d68 	.word	0x20000d68
   18f44:	000233ec 	.word	0x000233ec
   18f48:	0002341c 	.word	0x0002341c
   18f4c:	0002841f 	.word	0x0002841f
   18f50:	00028359 	.word	0x00028359
   18f54:	20000d80 	.word	0x20000d80
   18f58:	00017d6d 	.word	0x00017d6d
   18f5c:	00028388 	.word	0x00028388

00018f60 <event_stop.constprop.46>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   18f60:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   18f62:	4b05      	ldr	r3, [pc, #20]	; (18f78 <event_stop.constprop.46+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   18f64:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
   18f66:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   18f68:	4611      	mov	r1, r2
   18f6a:	4610      	mov	r0, r2
   18f6c:	f7fc fe38 	bl	15be0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   18f70:	b108      	cbz	r0, 18f76 <event_stop.constprop.46+0x16>
   18f72:	f7ff f8bf 	bl	180f4 <event_active.part.19>
}
   18f76:	bd08      	pop	{r3, pc}
   18f78:	20007dd0 	.word	0x20007dd0

00018f7c <event_common_prepare>:
{
   18f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   18f80:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   18f82:	681d      	ldr	r5, [r3, #0]
{
   18f84:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
   18f86:	2c00      	cmp	r4, #0
{
   18f88:	4681      	mov	r9, r0
   18f8a:	910b      	str	r1, [sp, #44]	; 0x2c
   18f8c:	4690      	mov	r8, r2
   18f8e:	469b      	mov	fp, r3
   18f90:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
   18f94:	da03      	bge.n	18f9e <event_common_prepare+0x22>
		_ticks_xtal_to_start = MAX(_ticks_active_to_start,
   18f96:	9c16      	ldr	r4, [sp, #88]	; 0x58
   18f98:	42ac      	cmp	r4, r5
   18f9a:	bf38      	it	cc
   18f9c:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   18f9e:	42ac      	cmp	r4, r5
   18fa0:	4f5b      	ldr	r7, [pc, #364]	; (19110 <event_common_prepare+0x194>)
   18fa2:	d929      	bls.n	18ff8 <event_common_prepare+0x7c>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18fa4:	f241 63d7 	movw	r3, #5847	; 0x16d7
   18fa8:	e9cd 7307 	strd	r7, r3, [sp, #28]
   18fac:	4b59      	ldr	r3, [pc, #356]	; (19114 <event_common_prepare+0x198>)
   18fae:	2100      	movs	r1, #0
   18fb0:	e9cd 1304 	strd	r1, r3, [sp, #16]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   18fb4:	1b63      	subs	r3, r4, r5
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18fb6:	9300      	str	r3, [sp, #0]
   18fb8:	9106      	str	r1, [sp, #24]
   18fba:	464b      	mov	r3, r9
   18fbc:	e9cd 1102 	strd	r1, r1, [sp, #8]
   18fc0:	9101      	str	r1, [sp, #4]
   18fc2:	2201      	movs	r2, #1
   18fc4:	4608      	mov	r0, r1
   18fc6:	f7fd fb29 	bl	1661c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18fca:	f030 0302 	bics.w	r3, r0, #2
   18fce:	d039      	beq.n	19044 <event_common_prepare+0xc8>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18fd0:	2301      	movs	r3, #1
   18fd2:	f04f 0100 	mov.w	r1, #0
   18fd6:	f363 0107 	bfi	r1, r3, #0, #8
   18fda:	4a4f      	ldr	r2, [pc, #316]	; (19118 <event_common_prepare+0x19c>)
   18fdc:	4b4f      	ldr	r3, [pc, #316]	; (1911c <event_common_prepare+0x1a0>)
   18fde:	4850      	ldr	r0, [pc, #320]	; (19120 <event_common_prepare+0x1a4>)
   18fe0:	1a9b      	subs	r3, r3, r2
   18fe2:	08db      	lsrs	r3, r3, #3
   18fe4:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(!retval);
   18fe8:	f005 fa2b 	bl	1e442 <log_0>
   18fec:	4040      	eors	r0, r0
   18fee:	f380 8811 	msr	BASEPRI, r0
   18ff2:	f04f 0004 	mov.w	r0, #4
   18ff6:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   18ff8:	d21d      	bcs.n	19036 <event_common_prepare+0xba>
		event_active(0, 0, 0, NULL);
   18ffa:	2300      	movs	r3, #0
   18ffc:	461a      	mov	r2, r3
   18ffe:	4619      	mov	r1, r3
   19000:	4618      	mov	r0, r3
   19002:	f7ff f8bf 	bl	18184 <event_active>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19006:	f241 63ec 	movw	r3, #5868	; 0x16ec
   1900a:	e9cd 7307 	strd	r7, r3, [sp, #28]
   1900e:	4b45      	ldr	r3, [pc, #276]	; (19124 <event_common_prepare+0x1a8>)
   19010:	2100      	movs	r1, #0
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   19012:	1b2c      	subs	r4, r5, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19014:	e9cd 1304 	strd	r1, r3, [sp, #16]
   19018:	9106      	str	r1, [sp, #24]
   1901a:	464b      	mov	r3, r9
   1901c:	e9cd 1102 	strd	r1, r1, [sp, #8]
   19020:	e9cd 4100 	strd	r4, r1, [sp]
   19024:	2201      	movs	r2, #1
   19026:	4608      	mov	r0, r1
   19028:	f7fd faf8 	bl	1661c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1902c:	f030 0302 	bics.w	r3, r0, #2
   19030:	d1ce      	bne.n	18fd0 <event_common_prepare+0x54>
   19032:	462c      	mov	r4, r5
   19034:	e00b      	b.n	1904e <event_common_prepare+0xd2>
		event_active(0, 0, 0, NULL);
   19036:	2300      	movs	r3, #0
   19038:	461a      	mov	r2, r3
   1903a:	4619      	mov	r1, r3
   1903c:	4618      	mov	r0, r3
   1903e:	f7ff f8a1 	bl	18184 <event_active>
		event_xtal(0, 0, 0, NULL);
   19042:	2300      	movs	r3, #0
   19044:	461a      	mov	r2, r3
   19046:	4619      	mov	r1, r3
   19048:	4618      	mov	r0, r3
   1904a:	f7ff f8a9 	bl	181a0 <event_xtal>
	_radio.remainder_anchor = remainder;
   1904e:	4e36      	ldr	r6, [pc, #216]	; (19128 <event_common_prepare+0x1ac>)
   19050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19052:	60f3      	str	r3, [r6, #12]
		ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19054:	f241 7304 	movw	r3, #5892	; 0x1704
   19058:	e9cd 7307 	strd	r7, r3, [sp, #28]
   1905c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1905e:	9306      	str	r3, [sp, #24]
   19060:	2200      	movs	r2, #0
   19062:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19064:	9305      	str	r3, [sp, #20]
   19066:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1906a:	464b      	mov	r3, r9
   1906c:	e9cd 2201 	strd	r2, r2, [sp, #4]
   19070:	9400      	str	r4, [sp, #0]
   19072:	4611      	mov	r1, r2
   19074:	4610      	mov	r0, r2
   19076:	f7fd fad1 	bl	1661c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1907a:	f030 0302 	bics.w	r3, r0, #2
   1907e:	d1a7      	bne.n	18fd0 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   19080:	2005      	movs	r0, #5
   19082:	f7ff ff6d 	bl	18f60 <event_stop.constprop.46>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   19086:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
   1908a:	42ab      	cmp	r3, r5
   1908c:	d023      	beq.n	190d6 <event_common_prepare+0x15a>
		*ticks_active_to_start = _radio.ticks_active_to_start;
   1908e:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
   19092:	f8d8 3000 	ldr.w	r3, [r8]
   19096:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
   19098:	bfbc      	itt	lt
   1909a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1909e:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = MAX(_radio.ticks_active_to_start,
   190a2:	f8d8 3000 	ldr.w	r3, [r8]
   190a6:	f8d6 217c 	ldr.w	r2, [r6, #380]	; 0x17c
   190aa:	4293      	cmp	r3, r2
   190ac:	bf38      	it	cc
   190ae:	4613      	movcc	r3, r2
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   190b0:	2100      	movs	r1, #0
   190b2:	f241 7232 	movw	r2, #5938	; 0x1732
   190b6:	e9cd 7205 	strd	r7, r2, [sp, #20]
   190ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
   190be:	9300      	str	r3, [sp, #0]
   190c0:	e9cd 1103 	strd	r1, r1, [sp, #12]
   190c4:	4623      	mov	r3, r4
   190c6:	4652      	mov	r2, sl
   190c8:	4608      	mov	r0, r1
   190ca:	f7fd faf1 	bl	166b0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   190ce:	f030 0302 	bics.w	r3, r0, #2
   190d2:	f47f af7d 	bne.w	18fd0 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
   190d6:	20ff      	movs	r0, #255	; 0xff
   190d8:	f7ff f90e 	bl	182f8 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   190dc:	4b13      	ldr	r3, [pc, #76]	; (1912c <event_common_prepare+0x1b0>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   190de:	2201      	movs	r2, #1
   190e0:	4611      	mov	r1, r2
   190e2:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   190e4:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   190e8:	f7fc fd7a 	bl	15be0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   190ec:	b160      	cbz	r0, 19108 <event_common_prepare+0x18c>
   190ee:	2301      	movs	r3, #1
   190f0:	f04f 0100 	mov.w	r1, #0
   190f4:	f363 0107 	bfi	r1, r3, #0, #8
   190f8:	4a07      	ldr	r2, [pc, #28]	; (19118 <event_common_prepare+0x19c>)
   190fa:	4b08      	ldr	r3, [pc, #32]	; (1911c <event_common_prepare+0x1a0>)
   190fc:	480c      	ldr	r0, [pc, #48]	; (19130 <event_common_prepare+0x1b4>)
   190fe:	1a9b      	subs	r3, r3, r2
   19100:	08db      	lsrs	r3, r3, #3
   19102:	f363 118f 	bfi	r1, r3, #6, #10
   19106:	e76f      	b.n	18fe8 <event_common_prepare+0x6c>
}
   19108:	b00d      	add	sp, #52	; 0x34
   1910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1910e:	bf00      	nop
   19110:	00021edf 	.word	0x00021edf
   19114:	00018185 	.word	0x00018185
   19118:	000233ec 	.word	0x000233ec
   1911c:	0002341c 	.word	0x0002341c
   19120:	00028388 	.word	0x00028388
   19124:	000181a1 	.word	0x000181a1
   19128:	20000d68 	.word	0x20000d68
   1912c:	20007e60 	.word	0x20007e60
   19130:	00028829 	.word	0x00028829

00019134 <radio_event_adv_prepare>:
{
   19134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   19136:	4a0b      	ldr	r2, [pc, #44]	; (19164 <radio_event_adv_prepare+0x30>)
   19138:	7c13      	ldrb	r3, [r2, #16]
   1913a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1913e:	b10b      	cbz	r3, 19144 <radio_event_adv_prepare+0x10>
   19140:	f7ff fca6 	bl	18a90 <event_scan_prepare.part.41>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   19144:	2305      	movs	r3, #5
   19146:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   19148:	9403      	str	r4, [sp, #12]
   1914a:	4c07      	ldr	r4, [pc, #28]	; (19168 <radio_event_adv_prepare+0x34>)
   1914c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   19150:	6a13      	ldr	r3, [r2, #32]
   19152:	9300      	str	r3, [sp, #0]
   19154:	f102 031c 	add.w	r3, r2, #28
   19158:	3218      	adds	r2, #24
   1915a:	f7ff ff0f 	bl	18f7c <event_common_prepare>
}
   1915e:	b004      	add	sp, #16
   19160:	bd10      	pop	{r4, pc}
   19162:	bf00      	nop
   19164:	20000d68 	.word	0x20000d68
   19168:	00018e51 	.word	0x00018e51

0001916c <event_scan_prepare>:
{
   1916c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   1916e:	4a0b      	ldr	r2, [pc, #44]	; (1919c <event_scan_prepare+0x30>)
   19170:	7c13      	ldrb	r3, [r2, #16]
   19172:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   19176:	b10b      	cbz	r3, 1917c <event_scan_prepare+0x10>
   19178:	f7ff fc8a 	bl	18a90 <event_scan_prepare.part.41>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   1917c:	2306      	movs	r3, #6
   1917e:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   19180:	9403      	str	r4, [sp, #12]
   19182:	4c07      	ldr	r4, [pc, #28]	; (191a0 <event_scan_prepare+0x34>)
   19184:	e9cd 3401 	strd	r3, r4, [sp, #4]
   19188:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   1918c:	9300      	str	r3, [sp, #0]
   1918e:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
   19192:	32d0      	adds	r2, #208	; 0xd0
   19194:	f7ff fef2 	bl	18f7c <event_common_prepare>
}
   19198:	b004      	add	sp, #16
   1919a:	bd10      	pop	{r4, pc}
   1919c:	20000d68 	.word	0x20000d68
   191a0:	00018cb5 	.word	0x00018cb5

000191a4 <event_adv_stop>:
{
   191a4:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   191a6:	2005      	movs	r0, #5
   191a8:	f7ff feda 	bl	18f60 <event_stop.constprop.46>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   191ac:	2100      	movs	r1, #0
   191ae:	4b07      	ldr	r3, [pc, #28]	; (191cc <event_adv_stop+0x28>)
   191b0:	9100      	str	r1, [sp, #0]
   191b2:	2205      	movs	r2, #5
   191b4:	4608      	mov	r0, r1
   191b6:	f7fd fac3 	bl	16740 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   191ba:	f030 0302 	bics.w	r3, r0, #2
   191be:	d001      	beq.n	191c4 <event_adv_stop+0x20>
   191c0:	f7fe ffc4 	bl	1814c <event_adv_stop.part.17>
}
   191c4:	b003      	add	sp, #12
   191c6:	f85d fb04 	ldr.w	pc, [sp], #4
   191ca:	bf00      	nop
   191cc:	00018ac9 	.word	0x00018ac9

000191d0 <packet_rx_allocate.constprop.47>:
static void packet_rx_allocate(u8_t max)
   191d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
   191d4:	4d21      	ldr	r5, [pc, #132]	; (1925c <packet_rx_allocate.constprop.47+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
   191d6:	f895 413a 	ldrb.w	r4, [r5, #314]	; 0x13a
	if (acquire == _radio.packet_rx_count) {
   191da:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
	if (max > _radio.link_rx_data_quota) {
   191de:	f895 914c 	ldrb.w	r9, [r5, #332]	; 0x14c
	acquire = _radio.packet_rx_acquire + 1;
   191e2:	3401      	adds	r4, #1
   191e4:	b2e4      	uxtb	r4, r4
		acquire = 0U;
   191e6:	42a3      	cmp	r3, r4
   191e8:	bf08      	it	eq
   191ea:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
   191ec:	f505 77a0 	add.w	r7, r5, #320	; 0x140
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   191f0:	f505 7894 	add.w	r8, r5, #296	; 0x128
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   191f4:	f1b9 0f00 	cmp.w	r9, #0
   191f8:	d003      	beq.n	19202 <packet_rx_allocate.constprop.47+0x32>
   191fa:	f895 3139 	ldrb.w	r3, [r5, #313]	; 0x139
   191fe:	429c      	cmp	r4, r3
   19200:	d101      	bne.n	19206 <packet_rx_allocate.constprop.47+0x36>
}
   19202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
   19206:	4638      	mov	r0, r7
   19208:	f008 fc8d 	bl	21b26 <mem_acquire>
		if (!link) {
   1920c:	4606      	mov	r6, r0
   1920e:	2800      	cmp	r0, #0
   19210:	d0f7      	beq.n	19202 <packet_rx_allocate.constprop.47+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   19212:	4640      	mov	r0, r8
   19214:	f008 fc87 	bl	21b26 <mem_acquire>
		if (!node_rx) {
   19218:	b928      	cbnz	r0, 19226 <packet_rx_allocate.constprop.47+0x56>
			mem_release(link, &_radio.link_rx_free);
   1921a:	4630      	mov	r0, r6
   1921c:	4910      	ldr	r1, [pc, #64]	; (19260 <packet_rx_allocate.constprop.47+0x90>)
}
   1921e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
   19222:	f008 bc99 	b.w	21b58 <mem_release>
		node_rx->hdr.link = link;
   19226:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
   19228:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
   1922c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   19230:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
   19234:	f885 413a 	strb.w	r4, [r5, #314]	; 0x13a
		if (acquire == _radio.packet_rx_count) {
   19238:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
		acquire = _radio.packet_rx_acquire + 1;
   1923c:	3401      	adds	r4, #1
   1923e:	b2e4      	uxtb	r4, r4
			acquire = 0U;
   19240:	42a3      	cmp	r3, r4
   19242:	bf08      	it	eq
   19244:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
   19246:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
   1924a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1924e:	3b01      	subs	r3, #1
   19250:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
   19254:	fa5f f989 	uxtb.w	r9, r9
   19258:	e7cc      	b.n	191f4 <packet_rx_allocate.constprop.47+0x24>
   1925a:	bf00      	nop
   1925c:	20000d68 	.word	0x20000d68
   19260:	20000ea8 	.word	0x20000ea8

00019264 <common_init>:
{
   19264:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
   19266:	4c31      	ldr	r4, [pc, #196]	; (1932c <common_init+0xc8>)
   19268:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1926c:	2a00      	cmp	r2, #0
   1926e:	d045      	beq.n	192fc <common_init+0x98>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
   19270:	f504 7386 	add.w	r3, r4, #268	; 0x10c
   19274:	f44f 7196 	mov.w	r1, #300	; 0x12c
   19278:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   1927c:	f008 fc2f 	bl	21ade <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
   19280:	4b2b      	ldr	r3, [pc, #172]	; (19330 <common_init+0xcc>)
   19282:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   19286:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
   1928a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1928e:	f008 fc26 	bl	21ade <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
   19292:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   19296:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
   1929a:	4b26      	ldr	r3, [pc, #152]	; (19334 <common_init+0xd0>)
   1929c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   192a0:	440a      	add	r2, r1
   192a2:	2108      	movs	r1, #8
   192a4:	f008 fc1b 	bl	21ade <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
   192a8:	4b23      	ldr	r3, [pc, #140]	; (19338 <common_init+0xd4>)
   192aa:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   192ae:	2202      	movs	r2, #2
   192b0:	2124      	movs	r1, #36	; 0x24
   192b2:	f008 fc14 	bl	21ade <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
   192b6:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
   192ba:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
   192be:	4b1f      	ldr	r3, [pc, #124]	; (1933c <common_init+0xd8>)
   192c0:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
   192c4:	3a01      	subs	r2, #1
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
   192c6:	b292      	uxth	r2, r2
   192c8:	f008 fc09 	bl	21ade <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
   192cc:	4819      	ldr	r0, [pc, #100]	; (19334 <common_init+0xd0>)
   192ce:	f008 fc2a 	bl	21b26 <mem_acquire>
	LL_ASSERT(link);
   192d2:	b9b0      	cbnz	r0, 19302 <common_init+0x9e>
   192d4:	2301      	movs	r3, #1
   192d6:	f04f 0100 	mov.w	r1, #0
   192da:	4a19      	ldr	r2, [pc, #100]	; (19340 <common_init+0xdc>)
   192dc:	4819      	ldr	r0, [pc, #100]	; (19344 <common_init+0xe0>)
   192de:	f363 0107 	bfi	r1, r3, #0, #8
   192e2:	4b19      	ldr	r3, [pc, #100]	; (19348 <common_init+0xe4>)
   192e4:	1a9b      	subs	r3, r3, r2
   192e6:	08db      	lsrs	r3, r3, #3
   192e8:	f363 118f 	bfi	r1, r3, #6, #10
   192ec:	f005 f8a9 	bl	1e442 <log_0>
   192f0:	4040      	eors	r0, r0
   192f2:	f380 8811 	msr	BASEPRI, r0
   192f6:	f04f 0004 	mov.w	r0, #4
   192fa:	df02      	svc	2
		_radio.conn_free = NULL;
   192fc:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
   19300:	e7be      	b.n	19280 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
   19302:	4a12      	ldr	r2, [pc, #72]	; (1934c <common_init+0xe8>)
   19304:	1f11      	subs	r1, r2, #4
   19306:	f008 fc53 	bl	21bb0 <memq_init>
	_radio.advertiser.chan_map = 0x07;
   1930a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1930e:	f043 0307 	orr.w	r3, r3, #7
   19312:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
   19316:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1931a:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[2] = 0xFF;
   1931e:	4b0c      	ldr	r3, [pc, #48]	; (19350 <common_init+0xec>)
   19320:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
}
   19324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
   19328:	f7ff bf52 	b.w	191d0 <packet_rx_allocate.constprop.47>
   1932c:	20000d68 	.word	0x20000d68
   19330:	20000e90 	.word	0x20000e90
   19334:	20000ea8 	.word	0x20000ea8
   19338:	20000ebc 	.word	0x20000ebc
   1933c:	20000ec4 	.word	0x20000ec4
   19340:	000233ec 	.word	0x000233ec
   19344:	000288d6 	.word	0x000288d6
   19348:	0002341c 	.word	0x0002341c
   1934c:	20000eb0 	.word	0x20000eb0
   19350:	251fffff 	.word	0x251fffff

00019354 <k32src_wait>:
	if (done) {
   19354:	4b14      	ldr	r3, [pc, #80]	; (193a8 <k32src_wait+0x54>)
   19356:	781a      	ldrb	r2, [r3, #0]
{
   19358:	b510      	push	{r4, lr}
	if (done) {
   1935a:	bb1a      	cbnz	r2, 193a4 <k32src_wait+0x50>
	done = true;
   1935c:	2201      	movs	r2, #1
   1935e:	4813      	ldr	r0, [pc, #76]	; (193ac <k32src_wait+0x58>)
   19360:	701a      	strb	r2, [r3, #0]
   19362:	f002 f9a9 	bl	1b6b8 <z_impl_device_get_binding>
	LL_ASSERT(lf_clock);
   19366:	4604      	mov	r4, r0
   19368:	b9a8      	cbnz	r0, 19396 <k32src_wait+0x42>
   1936a:	2301      	movs	r3, #1
   1936c:	f04f 0100 	mov.w	r1, #0
   19370:	4a0f      	ldr	r2, [pc, #60]	; (193b0 <k32src_wait+0x5c>)
   19372:	4810      	ldr	r0, [pc, #64]	; (193b4 <k32src_wait+0x60>)
   19374:	f363 0107 	bfi	r1, r3, #0, #8
   19378:	4b0f      	ldr	r3, [pc, #60]	; (193b8 <k32src_wait+0x64>)
   1937a:	1a9b      	subs	r3, r3, r2
   1937c:	08db      	lsrs	r3, r3, #3
   1937e:	f363 118f 	bfi	r1, r3, #6, #10
   19382:	f005 f85e 	bl	1e442 <log_0>
   19386:	4040      	eors	r0, r0
   19388:	f380 8811 	msr	BASEPRI, r0
   1938c:	f04f 0004 	mov.w	r0, #4
   19390:	df02      	svc	2
		cpu_sleep();
   19392:	f008 fd6e 	bl	21e72 <cpu_sleep>
   19396:	6863      	ldr	r3, [r4, #4]
   19398:	2101      	movs	r1, #1
   1939a:	681b      	ldr	r3, [r3, #0]
   1939c:	4620      	mov	r0, r4
   1939e:	4798      	blx	r3
	while (clock_control_on(lf_clock, (void *)CLOCK_CONTROL_NRF_K32SRC)) {
   193a0:	2800      	cmp	r0, #0
   193a2:	d1f6      	bne.n	19392 <k32src_wait+0x3e>
}
   193a4:	bd10      	pop	{r4, pc}
   193a6:	bf00      	nop
   193a8:	20002307 	.word	0x20002307
   193ac:	000244ea 	.word	0x000244ea
   193b0:	000233ec 	.word	0x000233ec
   193b4:	00028630 	.word	0x00028630
   193b8:	0002341c 	.word	0x0002341c

000193bc <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
   193bc:	4b02      	ldr	r3, [pc, #8]	; (193c8 <mayfly_xtal_stop+0xc>)
   193be:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
   193c0:	6843      	ldr	r3, [r0, #4]
   193c2:	2100      	movs	r1, #0
   193c4:	685b      	ldr	r3, [r3, #4]
   193c6:	4718      	bx	r3
   193c8:	20000d68 	.word	0x20000d68

000193cc <feature_rsp_send>:
{
   193cc:	b570      	push	{r4, r5, r6, lr}
   193ce:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   193d0:	481e      	ldr	r0, [pc, #120]	; (1944c <feature_rsp_send+0x80>)
{
   193d2:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   193d4:	f008 fba7 	bl	21b26 <mem_acquire>
	if (!node_tx) {
   193d8:	4604      	mov	r4, r0
   193da:	b3a0      	cbz	r0, 19446 <feature_rsp_send+0x7a>
	       (features[1] << 8) | (features[2] << 16);
   193dc:	79b3      	ldrb	r3, [r6, #6]
   193de:	7972      	ldrb	r2, [r6, #5]
   193e0:	041b      	lsls	r3, r3, #16
   193e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   193e6:	7932      	ldrb	r2, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
   193e8:	4313      	orrs	r3, r2
   193ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   193ee:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_features &= feat_get(&req->features[0]);
   193f2:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	       (features[1] << 8) | (features[2] << 16);
   193f6:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   193fa:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_features &= feat_get(&req->features[0]);
   193fe:	4013      	ands	r3, r2
   19400:	f3c3 0310 	ubfx	r3, r3, #0, #17
   19404:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	conn->common.fex_valid = 1U;
   19408:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1940c:	f043 0320 	orr.w	r3, r3, #32
   19410:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19414:	7903      	ldrb	r3, [r0, #4]
   19416:	f043 0303 	orr.w	r3, r3, #3
   1941a:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   1941c:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1941e:	2309      	movs	r3, #9
   19420:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   19422:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   19424:	2100      	movs	r1, #0
   19426:	4410      	add	r0, r2
   19428:	f006 f918 	bl	1f65c <memset>
		conn->llcp_features & 0xFF;
   1942c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
   19430:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   19432:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
   19434:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
   19436:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
   19438:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
   1943a:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   1943c:	4621      	mov	r1, r4
   1943e:	f008 fe06 	bl	2204e <ctrl_tx_sec_enqueue>
	return 0;
   19442:	2000      	movs	r0, #0
}
   19444:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   19446:	2001      	movs	r0, #1
   19448:	e7fc      	b.n	19444 <feature_rsp_send+0x78>
   1944a:	bf00      	nop
   1944c:	20000ebc 	.word	0x20000ebc

00019450 <reject_ext_ind_send>:
{
   19450:	b570      	push	{r4, r5, r6, lr}
   19452:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   19454:	480b      	ldr	r0, [pc, #44]	; (19484 <reject_ext_ind_send+0x34>)
{
   19456:	460e      	mov	r6, r1
   19458:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1945a:	f008 fb64 	bl	21b26 <mem_acquire>
	if (!node_tx) {
   1945e:	b178      	cbz	r0, 19480 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19460:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   19462:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19464:	f043 0303 	orr.w	r3, r3, #3
   19468:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1946a:	2303      	movs	r3, #3
   1946c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1946e:	2311      	movs	r3, #17
   19470:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   19472:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   19474:	4601      	mov	r1, r0
   19476:	4620      	mov	r0, r4
   19478:	f008 fdbb 	bl	21ff2 <ctrl_tx_enqueue>
	return 0;
   1947c:	2000      	movs	r0, #0
}
   1947e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   19480:	2001      	movs	r0, #1
   19482:	e7fc      	b.n	1947e <reject_ext_ind_send+0x2e>
   19484:	20000ebc 	.word	0x20000ebc

00019488 <radio_init>:
{
   19488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   1948c:	4c3c      	ldr	r4, [pc, #240]	; (19580 <radio_init+0xf8>)
{
   1948e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	_radio.entropy = entropy;
   19490:	6062      	str	r2, [r4, #4]
	rx_count_max += 3;
   19492:	f99d e018 	ldrsb.w	lr, [sp, #24]
	tx_count_max += 1;
   19496:	f99d 201c 	ldrsb.w	r2, [sp, #28]
{
   1949a:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
	_radio.sca = sca;
   1949e:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   194a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   194a6:	fb01 5103 	mla	r1, r1, r3, r5
	_radio.hf_clock = hf_clock;
   194aa:	6020      	str	r0, [r4, #0]
	_radio.conn_pool = mem_radio;
   194ac:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   194b0:	19a8      	adds	r0, r5, r6
	tx_count_max += 1;
   194b2:	f102 0c01 	add.w	ip, r2, #1
	rx_count_max += 3;
   194b6:	f10e 0503 	add.w	r5, lr, #3
	_radio.packet_tx_count = (tx_count_max + 1);
   194ba:	3202      	adds	r2, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   194bc:	f10e 0e04 	add.w	lr, lr, #4
   194c0:	fa5f fe8e 	uxtb.w	lr, lr
	_radio.packet_tx_count = (tx_count_max + 1);
   194c4:	b2d2      	uxtb	r2, r2
{
   194c6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	_radio.packet_tx_count = (tx_count_max + 1);
   194ca:	f884 216c 	strb.w	r2, [r4, #364]	; 0x16c
	_radio.packet_rx = (void *)mem_radio;
   194ce:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   194d2:	00d2      	lsls	r2, r2, #3
	mem_radio +=
   194d4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   194d8:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   194dc:	4411      	add	r1, r2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   194de:	188f      	adds	r7, r1, r2
	    (offsetof(struct pdu_data, lldata) +
   194e0:	f108 0203 	add.w	r2, r8, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   194e4:	2a29      	cmp	r2, #41	; 0x29
	rx_count_max += 3;
   194e6:	b2ed      	uxtb	r5, r5
	_radio.pkt_release = (void *)mem_radio;
   194e8:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	_radio.link_rx_data_quota = rx_count_max;
   194ec:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
		_radio.packet_rx_data_pool_size =
   194f0:	bf88      	it	hi
   194f2:	f108 010e 	addhi.w	r1, r8, #14
   194f6:	b2ad      	uxth	r5, r5
   194f8:	bf8b      	itete	hi
   194fa:	f021 0103 	bichi.w	r1, r1, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   194fe:	eb05 0145 	addls.w	r1, r5, r5, lsl #1
		_radio.packet_rx_data_pool_size =
   19502:	fb11 f105 	smulbbhi	r1, r1, r5
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   19506:	eb05 0181 	addls.w	r1, r5, r1, lsl #2
   1950a:	4622      	mov	r2, r4
		_radio.packet_rx_data_pool_size =
   1950c:	bf8c      	ite	hi
   1950e:	b289      	uxthhi	r1, r1
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   19510:	0089      	lslls	r1, r1, #2
	_radio.connection_count = connection_count_max;
   19512:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	tx_count_max += 1;
   19516:	f8a4 112e 	strh.w	r1, [r4, #302]	; 0x12e
	_radio.packet_rx_count = (rx_count_max + 1);
   1951a:	f884 e138 	strb.w	lr, [r4, #312]	; 0x138
	_radio.packet_data_octets_max = packet_data_octets_max;
   1951e:	f8a4 812c 	strh.w	r8, [r4, #300]	; 0x12c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   19522:	2434      	movs	r4, #52	; 0x34
   19524:	f8a2 4130 	strh.w	r4, [r2, #304]	; 0x130
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   19528:	fbb1 f4f4 	udiv	r4, r1, r4
   1952c:	f882 4132 	strb.w	r4, [r2, #306]	; 0x132
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   19530:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_rx_data_pool = mem_radio;
   19534:	f8c2 7124 	str.w	r7, [r2, #292]	; 0x124
	mem_radio += _radio.packet_rx_data_pool_size;
   19538:	4439      	add	r1, r7
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1953a:	4473      	add	r3, lr
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1953c:	340a      	adds	r4, #10
	_radio.link_rx_pool = mem_radio;
   1953e:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   19542:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   19546:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1954a:	b2a4      	uxth	r4, r4
	tx_count_max += 1;
   1954c:	fa5f fc8c 	uxtb.w	ip, ip
	_radio.pkt_tx_ctrl_pool = mem_radio;
   19550:	f8c2 1150 	str.w	r1, [r2, #336]	; 0x150
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   19554:	3148      	adds	r1, #72	; 0x48
	_radio.packet_tx_data_size =
   19556:	f8a2 4160 	strh.w	r4, [r2, #352]	; 0x160
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   1955a:	fb0c 1404 	mla	r4, ip, r4, r1
	if (retcode) {
   1955e:	1a24      	subs	r4, r4, r0
	_radio.pkt_tx_data_pool = mem_radio;
   19560:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	if (retcode) {
   19564:	d003      	beq.n	1956e <radio_init+0xe6>
		return (retcode + mem_size);
   19566:	4434      	add	r4, r6
}
   19568:	4620      	mov	r0, r4
   1956a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1U;
   1956e:	2301      	movs	r3, #1
   19570:	f882 317a 	strb.w	r3, [r2, #378]	; 0x17a
	common_init();
   19574:	f7ff fe76 	bl	19264 <common_init>
	radio_setup();
   19578:	f008 ff42 	bl	22400 <radio_setup>
	return retcode;
   1957c:	e7f4      	b.n	19568 <radio_init+0xe0>
   1957e:	bf00      	nop
   19580:	20000d68 	.word	0x20000d68

00019584 <ll_reset>:
{
   19584:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   19586:	2103      	movs	r1, #3
   19588:	2005      	movs	r0, #5
   1958a:	f7fe fc13 	bl	17db4 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   1958e:	2104      	movs	r1, #4
   19590:	2006      	movs	r0, #6
   19592:	f7fe fc0f 	bl	17db4 <role_disable>
	for (conn_handle = 0U; conn_handle < _radio.connection_count;
   19596:	4c20      	ldr	r4, [pc, #128]	; (19618 <ll_reset+0x94>)
   19598:	2500      	movs	r5, #0
   1959a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1959e:	b2ab      	uxth	r3, r5
   195a0:	429a      	cmp	r2, r3
   195a2:	d832      	bhi.n	1960a <ll_reset+0x86>
	_radio.advertiser.is_enabled = 0U;
   195a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   195a8:	f36f 13c7 	bfc	r3, #7, #1
   195ac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0U;
   195b0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   195b4:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0U;
   195b6:	f360 0300 	bfi	r3, r0, #0, #1
   195ba:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   195be:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   195c0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
   195c4:	fbb3 f3f2 	udiv	r3, r3, r2
   195c8:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   195cc:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
	_radio.packet_rx_last = 0U;
   195d0:	f884 0139 	strb.w	r0, [r4, #313]	; 0x139
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   195d4:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0U;
   195d6:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
	_radio.packet_release_last = 0U;
   195da:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   195de:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
	_radio.fc_ack = _radio.fc_req;
   195e2:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	_radio.advertiser.conn = NULL;
   195e6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   195ea:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   195ee:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
	_radio.packet_rx_acquire = 0U;
   195f2:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
	_radio.packet_tx_last = 0U;
   195f6:	f8a4 016e 	strh.w	r0, [r4, #366]	; 0x16e
	_radio.fc_ack = _radio.fc_req;
   195fa:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	ll_filter_reset(false);
   195fe:	f000 fd35 	bl	1a06c <ll_filter_reset>
}
   19602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   19606:	f7ff be2d 	b.w	19264 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   1960a:	1de8      	adds	r0, r5, #7
   1960c:	21ff      	movs	r1, #255	; 0xff
   1960e:	b2c0      	uxtb	r0, r0
   19610:	f7fe fbd0 	bl	17db4 <role_disable>
   19614:	3501      	adds	r5, #1
   19616:	e7c0      	b.n	1959a <ll_reset+0x16>
   19618:	20000d68 	.word	0x20000d68

0001961c <radio_adv_data_get>:
}
   1961c:	4800      	ldr	r0, [pc, #0]	; (19620 <radio_adv_data_get+0x4>)
   1961e:	4770      	bx	lr
   19620:	20000d92 	.word	0x20000d92

00019624 <radio_scan_data_get>:
}
   19624:	4800      	ldr	r0, [pc, #0]	; (19628 <radio_scan_data_get+0x4>)
   19626:	4770      	bx	lr
   19628:	20000de2 	.word	0x20000de2

0001962c <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   1962c:	4b02      	ldr	r3, [pc, #8]	; (19638 <ll_adv_is_enabled+0xc>)
   1962e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   19632:	09c0      	lsrs	r0, r0, #7
   19634:	4770      	bx	lr
   19636:	bf00      	nop
   19638:	20000d68 	.word	0x20000d68

0001963c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   1963c:	4b05      	ldr	r3, [pc, #20]	; (19654 <radio_adv_filter_pol_get+0x18>)
   1963e:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   19642:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   19644:	bfba      	itte	lt
   19646:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   1964a:	f3c0 00c1 	ubfxlt	r0, r0, #3, #2
	return 0;
   1964e:	2000      	movge	r0, #0
}
   19650:	4770      	bx	lr
   19652:	bf00      	nop
   19654:	20000d68 	.word	0x20000d68

00019658 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   19658:	4a09      	ldr	r2, [pc, #36]	; (19680 <ll_scan_is_enabled+0x28>)
   1965a:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   1965e:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   19662:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   19666:	f000 0001 	and.w	r0, r0, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1966a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1966c:	f003 0301 	and.w	r3, r3, #1
   19670:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   19674:	bf14      	ite	ne
   19676:	2004      	movne	r0, #4
   19678:	2000      	moveq	r0, #0
}
   1967a:	4318      	orrs	r0, r3
   1967c:	4770      	bx	lr
   1967e:	bf00      	nop
   19680:	20000d68 	.word	0x20000d68

00019684 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   19684:	4b05      	ldr	r3, [pc, #20]	; (1969c <radio_scan_filter_pol_get+0x18>)
   19686:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1968a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   1968e:	bf1c      	itt	ne
   19690:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   19694:	f3c0 0041 	ubfxne	r0, r0, #1, #2
}
   19698:	4770      	bx	lr
   1969a:	bf00      	nop
   1969c:	20000d68 	.word	0x20000d68

000196a0 <ll_rx_get>:
{
   196a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   196a2:	4605      	mov	r5, r0
   196a4:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   196a6:	4917      	ldr	r1, [pc, #92]	; (19704 <ll_rx_get+0x64>)
   196a8:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
   196ac:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
   196b0:	4293      	cmp	r3, r2
   196b2:	460e      	mov	r6, r1
   196b4:	d01b      	beq.n	196ee <ll_rx_get+0x4e>
		_node_rx = _radio.link_rx_head->mem;
   196b6:	685f      	ldr	r7, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   196b8:	f201 116f 	addw	r1, r1, #367	; 0x16f
   196bc:	783a      	ldrb	r2, [r7, #0]
   196be:	f7fe f963 	bl	17988 <tx_cmplt_get>
		if (!cmplt) {
   196c2:	4604      	mov	r4, r0
   196c4:	b9d0      	cbnz	r0, 196fc <ll_rx_get+0x5c>
			first = _radio.packet_release_first;
   196c6:	f896 316f 	ldrb.w	r3, [r6, #367]	; 0x16f
   196ca:	f88d 3005 	strb.w	r3, [sp, #5]
				cmplt_curr = tx_cmplt_get(&h, &first,
   196ce:	f896 2170 	ldrb.w	r2, [r6, #368]	; 0x170
   196d2:	f10d 0105 	add.w	r1, sp, #5
   196d6:	f10d 0006 	add.w	r0, sp, #6
   196da:	f7fe f955 	bl	17988 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   196de:	b924      	cbnz	r4, 196ea <ll_rx_get+0x4a>
			} while ((cmplt_prev != 0) ||
   196e0:	b918      	cbnz	r0, 196ea <ll_rx_get+0x4a>
			*node_rx = _node_rx;
   196e2:	602f      	str	r7, [r5, #0]
}
   196e4:	4620      	mov	r0, r4
   196e6:	b003      	add	sp, #12
   196e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
   196ea:	4604      	mov	r4, r0
   196ec:	e7ef      	b.n	196ce <ll_rx_get+0x2e>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   196ee:	f891 2170 	ldrb.w	r2, [r1, #368]	; 0x170
   196f2:	f201 116f 	addw	r1, r1, #367	; 0x16f
   196f6:	f7fe f947 	bl	17988 <tx_cmplt_get>
   196fa:	4604      	mov	r4, r0
		*node_rx = NULL;
   196fc:	2300      	movs	r3, #0
   196fe:	602b      	str	r3, [r5, #0]
   19700:	e7f0      	b.n	196e4 <ll_rx_get+0x44>
   19702:	bf00      	nop
   19704:	20000d68 	.word	0x20000d68

00019708 <ll_rx_mem_release>:
{
   19708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   1970c:	4c1d      	ldr	r4, [pc, #116]	; (19784 <ll_rx_mem_release+0x7c>)
{
   1970e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   19710:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   19712:	f5a4 7694 	sub.w	r6, r4, #296	; 0x128
			mem_release(conn, &_radio.conn_free);
   19716:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
   1971a:	b920      	cbnz	r0, 19726 <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
   1971c:	6028      	str	r0, [r5, #0]
}
   1971e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   19722:	f7ff bd55 	b.w	191d0 <packet_rx_allocate.constprop.47>
		switch (_node_rx_free->hdr.type) {
   19726:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.next;
   19728:	f8d0 8000 	ldr.w	r8, [r0]
		switch (_node_rx_free->hdr.type) {
   1972c:	2a0d      	cmp	r2, #13
   1972e:	d807      	bhi.n	19740 <ll_rx_mem_release+0x38>
   19730:	2301      	movs	r3, #1
   19732:	4093      	lsls	r3, r2
   19734:	f642 5214 	movw	r2, #11540	; 0x2d14
   19738:	4213      	tst	r3, r2
   1973a:	d115      	bne.n	19768 <ll_rx_mem_release+0x60>
   1973c:	059b      	lsls	r3, r3, #22
   1973e:	d418      	bmi.n	19772 <ll_rx_mem_release+0x6a>
			LL_ASSERT(0);
   19740:	2301      	movs	r3, #1
   19742:	f04f 0100 	mov.w	r1, #0
   19746:	4a10      	ldr	r2, [pc, #64]	; (19788 <ll_rx_mem_release+0x80>)
   19748:	4810      	ldr	r0, [pc, #64]	; (1978c <ll_rx_mem_release+0x84>)
   1974a:	f363 0107 	bfi	r1, r3, #0, #8
   1974e:	4b10      	ldr	r3, [pc, #64]	; (19790 <ll_rx_mem_release+0x88>)
   19750:	1a9b      	subs	r3, r3, r2
   19752:	08db      	lsrs	r3, r3, #3
   19754:	f363 118f 	bfi	r1, r3, #6, #10
   19758:	f004 fe73 	bl	1e442 <log_0>
   1975c:	4040      	eors	r0, r0
   1975e:	f380 8811 	msr	BASEPRI, r0
   19762:	f04f 0004 	mov.w	r0, #4
   19766:	df02      	svc	2
			mem_release(_node_rx_free,
   19768:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   1976a:	f008 f9f5 	bl	21b58 <mem_release>
{
   1976e:	4640      	mov	r0, r8
   19770:	e7d3      	b.n	1971a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   19772:	88c2      	ldrh	r2, [r0, #6]
   19774:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   19778:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1977c:	f008 fa01 	bl	21b82 <mem_get>
			mem_release(conn, &_radio.conn_free);
   19780:	4639      	mov	r1, r7
   19782:	e7f2      	b.n	1976a <ll_rx_mem_release+0x62>
   19784:	20000e90 	.word	0x20000e90
   19788:	000233ec 	.word	0x000233ec
   1978c:	0002822a 	.word	0x0002822a
   19790:	0002341c 	.word	0x0002341c

00019794 <radio_rx_fc_set>:
{
   19794:	b530      	push	{r4, r5, lr}
	if (_radio.fc_ena) {
   19796:	4b26      	ldr	r3, [pc, #152]	; (19830 <radio_rx_fc_set+0x9c>)
   19798:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
   1979c:	b912      	cbnz	r2, 197a4 <radio_rx_fc_set+0x10>
	return 0;
   1979e:	2100      	movs	r1, #0
}
   197a0:	4608      	mov	r0, r1
   197a2:	bd30      	pop	{r4, r5, pc}
		u8_t req = _radio.fc_req;
   197a4:	f893 5178 	ldrb.w	r5, [r3, #376]	; 0x178
		u8_t ack = _radio.fc_ack;
   197a8:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
		u8_t req = _radio.fc_req;
   197ac:	b2ed      	uxtb	r5, r5
		if (fc) {
   197ae:	b351      	cbz	r1, 19806 <radio_rx_fc_set+0x72>
			if (handle != 0xffff) {
   197b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   197b4:	4288      	cmp	r0, r1
   197b6:	d0f2      	beq.n	1979e <radio_rx_fc_set+0xa>
	if (req == ack) {
   197b8:	4295      	cmp	r5, r2
   197ba:	d119      	bne.n	197f0 <radio_rx_fc_set+0x5c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   197bc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   197c0:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
   197c4:	4291      	cmp	r1, r2
   197c6:	d111      	bne.n	197ec <radio_rx_fc_set+0x58>
				ack1 = TRIPLE_BUFFER_SIZE;
   197c8:	2d00      	cmp	r5, #0
   197ca:	bf14      	ite	ne
   197cc:	462a      	movne	r2, r5
   197ce:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   197d0:	3a01      	subs	r2, #1
   197d2:	b2d2      	uxtb	r2, r2
   197d4:	eb03 0142 	add.w	r1, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   197d8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
			if (req != _radio.fc_req) {
   197dc:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
			_radio.fc_handle[--ack1] = handle;
   197e0:	f8a1 0172 	strh.w	r0, [r1, #370]	; 0x172
			if (req != _radio.fc_req) {
   197e4:	4295      	cmp	r5, r2
   197e6:	d0da      	beq.n	1979e <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
   197e8:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
		return 1;
   197ec:	2101      	movs	r1, #1
   197ee:	e7d7      	b.n	197a0 <radio_rx_fc_set+0xc>
	} else if (((req == 0) &&
   197f0:	b925      	cbnz	r5, 197fc <radio_rx_fc_set+0x68>
   197f2:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   197f6:	4283      	cmp	r3, r0
   197f8:	d1f8      	bne.n	197ec <radio_rx_fc_set+0x58>
   197fa:	e7d0      	b.n	1979e <radio_rx_fc_set+0xa>
   197fc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   19800:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
   19804:	e7f7      	b.n	197f6 <radio_rx_fc_set+0x62>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   19806:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   1980a:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   1980e:	42a0      	cmp	r0, r4
   19810:	d1c5      	bne.n	1979e <radio_rx_fc_set+0xa>
   19812:	4295      	cmp	r5, r2
   19814:	d0c3      	beq.n	1979e <radio_rx_fc_set+0xa>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   19816:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
			_radio.fc_ack = req;
   1981a:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1981e:	42a0      	cmp	r0, r4
   19820:	d0bd      	beq.n	1979e <radio_rx_fc_set+0xa>
			    (req == _radio.fc_req)) {
   19822:	f893 0178 	ldrb.w	r0, [r3, #376]	; 0x178
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   19826:	42a8      	cmp	r0, r5
   19828:	d1b9      	bne.n	1979e <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
   1982a:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
   1982e:	e7b7      	b.n	197a0 <radio_rx_fc_set+0xc>
   19830:	20000d68 	.word	0x20000d68

00019834 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   19834:	4801      	ldr	r0, [pc, #4]	; (1983c <ll_tx_mem_acquire+0x8>)
   19836:	f008 b976 	b.w	21b26 <mem_acquire>
   1983a:	bf00      	nop
   1983c:	20000ec4 	.word	0x20000ec4

00019840 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   19840:	4901      	ldr	r1, [pc, #4]	; (19848 <ll_tx_mem_release+0x8>)
   19842:	f008 b989 	b.w	21b58 <mem_release>
   19846:	bf00      	nop
   19848:	20000ec4 	.word	0x20000ec4

0001984c <ll_tx_mem_enqueue>:

int ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   1984c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   1984e:	4d3a      	ldr	r5, [pc, #232]	; (19938 <ll_tx_mem_enqueue+0xec>)
   19850:	f895 416e 	ldrb.w	r4, [r5, #366]	; 0x16e
	if (last == _radio.packet_tx_count) {
   19854:	f895 316c 	ldrb.w	r3, [r5, #364]	; 0x16c
	last = _radio.packet_tx_last + 1;
   19858:	3401      	adds	r4, #1
{
   1985a:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   1985c:	b2e4      	uxtb	r4, r4
{
   1985e:	4607      	mov	r7, r0
   19860:	460e      	mov	r6, r1
		last = 0U;
   19862:	42a3      	cmp	r3, r4
   19864:	bf08      	it	eq
   19866:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   19868:	f7fe fa8c 	bl	17d84 <connection_get>
	if (!conn) {
   1986c:	2800      	cmp	r0, #0
   1986e:	d05c      	beq.n	1992a <ll_tx_mem_enqueue+0xde>
		return -EINVAL;
	}

	if (last == _radio.packet_tx_first) {
   19870:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
   19874:	42a3      	cmp	r3, r4
   19876:	d05b      	beq.n	19930 <ll_tx_mem_enqueue+0xe4>
		return -ENOBUFS;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   19878:	f8b5 3160 	ldrh.w	r3, [r5, #352]	; 0x160
   1987c:	7972      	ldrb	r2, [r6, #5]
   1987e:	3b07      	subs	r3, #7
   19880:	429a      	cmp	r2, r3
   19882:	d913      	bls.n	198ac <ll_tx_mem_enqueue+0x60>
   19884:	2301      	movs	r3, #1
   19886:	f04f 0100 	mov.w	r1, #0
   1988a:	f363 0107 	bfi	r1, r3, #0, #8
   1988e:	4a2b      	ldr	r2, [pc, #172]	; (1993c <ll_tx_mem_enqueue+0xf0>)
   19890:	4b2b      	ldr	r3, [pc, #172]	; (19940 <ll_tx_mem_enqueue+0xf4>)
   19892:	482c      	ldr	r0, [pc, #176]	; (19944 <ll_tx_mem_enqueue+0xf8>)
   19894:	1a9b      	subs	r3, r3, r2
   19896:	08db      	lsrs	r3, r3, #3
   19898:	f363 118f 	bfi	r1, r3, #6, #10
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1989c:	f004 fdd1 	bl	1e442 <log_0>
   198a0:	4040      	eors	r0, r0
   198a2:	f380 8811 	msr	BASEPRI, r0
   198a6:	f04f 0004 	mov.w	r0, #4
   198aa:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   198ac:	f895 216e 	ldrb.w	r2, [r5, #366]	; 0x16e
   198b0:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   198b4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   198b8:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   198bc:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   198be:	f885 416e 	strb.w	r4, [r5, #366]	; 0x16e
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   198c2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   198c6:	2b00      	cmp	r3, #0
   198c8:	db02      	blt.n	198d0 <ll_tx_mem_enqueue+0x84>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   198ca:	2000      	movs	r0, #0
}
   198cc:	b009      	add	sp, #36	; 0x24
   198ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   198d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   198d2:	2b00      	cmp	r3, #0
   198d4:	d0f9      	beq.n	198ca <ll_tx_mem_enqueue+0x7e>
   198d6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   198da:	f012 0302 	ands.w	r3, r2, #2
   198de:	d1f4      	bne.n	198ca <ll_tx_mem_enqueue+0x7e>
		conn->slave.latency_cancel = 1U;
   198e0:	f042 0202 	orr.w	r2, r2, #2
   198e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   198e8:	4917      	ldr	r1, [pc, #92]	; (19948 <ll_tx_mem_enqueue+0xfc>)
				 RADIO_TICKER_ID_FIRST_CONNECTION +
   198ea:	f890 2020 	ldrb.w	r2, [r0, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   198ee:	9006      	str	r0, [sp, #24]
   198f0:	e9cd 3104 	strd	r3, r1, [sp, #16]
				 RADIO_TICKER_ID_FIRST_CONNECTION +
   198f4:	3207      	adds	r2, #7
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   198f6:	2101      	movs	r1, #1
   198f8:	e9cd 3102 	strd	r3, r1, [sp, #8]
   198fc:	e9cd 3300 	strd	r3, r3, [sp]
   19900:	4618      	mov	r0, r3
   19902:	b2d2      	uxtb	r2, r2
   19904:	2103      	movs	r1, #3
   19906:	f7fc fed3 	bl	166b0 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1990a:	f030 0302 	bics.w	r3, r0, #2
   1990e:	d0dc      	beq.n	198ca <ll_tx_mem_enqueue+0x7e>
   19910:	2301      	movs	r3, #1
   19912:	f04f 0100 	mov.w	r1, #0
   19916:	f363 0107 	bfi	r1, r3, #0, #8
   1991a:	4a08      	ldr	r2, [pc, #32]	; (1993c <ll_tx_mem_enqueue+0xf0>)
   1991c:	4b08      	ldr	r3, [pc, #32]	; (19940 <ll_tx_mem_enqueue+0xf4>)
   1991e:	480b      	ldr	r0, [pc, #44]	; (1994c <ll_tx_mem_enqueue+0x100>)
   19920:	1a9b      	subs	r3, r3, r2
   19922:	08db      	lsrs	r3, r3, #3
   19924:	f363 118f 	bfi	r1, r3, #6, #10
   19928:	e7b8      	b.n	1989c <ll_tx_mem_enqueue+0x50>
		return -EINVAL;
   1992a:	f06f 0015 	mvn.w	r0, #21
   1992e:	e7cd      	b.n	198cc <ll_tx_mem_enqueue+0x80>
		return -ENOBUFS;
   19930:	f06f 0036 	mvn.w	r0, #54	; 0x36
   19934:	e7ca      	b.n	198cc <ll_tx_mem_enqueue+0x80>
   19936:	bf00      	nop
   19938:	20000d68 	.word	0x20000d68
   1993c:	000233ec 	.word	0x000233ec
   19940:	0002341c 	.word	0x0002341c
   19944:	000286ed 	.word	0x000286ed
   19948:	00017d25 	.word	0x00017d25
   1994c:	00028388 	.word	0x00028388

00019950 <radio_adv_disable>:
{
   19950:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   19952:	2103      	movs	r1, #3
   19954:	2005      	movs	r0, #5
   19956:	f7fe fa2d 	bl	17db4 <role_disable>
	if (!status) {
   1995a:	4606      	mov	r6, r0
   1995c:	b9d8      	cbnz	r0, 19996 <radio_adv_disable+0x46>
		_radio.advertiser.is_enabled = 0U;
   1995e:	4c0f      	ldr	r4, [pc, #60]	; (1999c <radio_adv_disable+0x4c>)
   19960:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   19964:	f360 12c7 	bfi	r2, r0, #7, #1
   19968:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   1996c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   19970:	07d3      	lsls	r3, r2, #31
   19972:	d401      	bmi.n	19978 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   19974:	f008 fc5f 	bl	22236 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   19978:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		if (conn) {
   1997c:	b15d      	cbz	r5, 19996 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   1997e:	2300      	movs	r3, #0
			mem_release(hdr->link, &_radio.link_rx_free);
   19980:	4907      	ldr	r1, [pc, #28]	; (199a0 <radio_adv_disable+0x50>)
   19982:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
			_radio.advertiser.conn = NULL;
   19986:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(hdr->link, &_radio.link_rx_free);
   1998a:	f008 f8e5 	bl	21b58 <mem_release>
			mem_release(conn, &_radio.conn_free);
   1998e:	4905      	ldr	r1, [pc, #20]	; (199a4 <radio_adv_disable+0x54>)
   19990:	4628      	mov	r0, r5
   19992:	f008 f8e1 	bl	21b58 <mem_release>
}
   19996:	4630      	mov	r0, r6
   19998:	bd70      	pop	{r4, r5, r6, pc}
   1999a:	bf00      	nop
   1999c:	20000d68 	.word	0x20000d68
   199a0:	20000ea8 	.word	0x20000ea8
   199a4:	20000e74 	.word	0x20000e74

000199a8 <radio_scan_disable>:
{
   199a8:	b510      	push	{r4, lr}
	if (scanner && _radio.scanner.conn) {
   199aa:	b118      	cbz	r0, 199b4 <radio_scan_disable+0xc>
   199ac:	4b0e      	ldr	r3, [pc, #56]	; (199e8 <radio_scan_disable+0x40>)
   199ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   199b2:	b9bb      	cbnz	r3, 199e4 <radio_scan_disable+0x3c>
	status = role_disable(RADIO_TICKER_ID_SCAN,
   199b4:	2104      	movs	r1, #4
   199b6:	2006      	movs	r0, #6
   199b8:	f7fe f9fc 	bl	17db4 <role_disable>
	if (!status && !_radio.scanner.conn) {
   199bc:	4604      	mov	r4, r0
   199be:	b978      	cbnz	r0, 199e0 <radio_scan_disable+0x38>
   199c0:	4b09      	ldr	r3, [pc, #36]	; (199e8 <radio_scan_disable+0x40>)
   199c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   199c6:	b95a      	cbnz	r2, 199e0 <radio_scan_disable+0x38>
		_radio.scanner.is_enabled = 0U;
   199c8:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   199cc:	f360 0200 	bfi	r2, r0, #0, #1
   199d0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   199d4:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
   199d8:	2b00      	cmp	r3, #0
   199da:	db01      	blt.n	199e0 <radio_scan_disable+0x38>
			ll_adv_scan_state_cb(0);
   199dc:	f008 fc2b 	bl	22236 <ll_adv_scan_state_cb>
}
   199e0:	4620      	mov	r0, r4
   199e2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   199e4:	240c      	movs	r4, #12
   199e6:	e7fb      	b.n	199e0 <radio_scan_disable+0x38>
   199e8:	20000d68 	.word	0x20000d68

000199ec <ll_rx_dequeue>:
{
   199ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   199ee:	4d54      	ldr	r5, [pc, #336]	; (19b40 <ll_rx_dequeue+0x154>)
	struct radio_pdu_node_rx *node_rx = NULL;
   199f0:	2300      	movs	r3, #0
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   199f2:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
	struct radio_pdu_node_rx *node_rx = NULL;
   199f6:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   199f8:	aa01      	add	r2, sp, #4
   199fa:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   199fe:	f008 f8e9 	bl	21bd4 <memq_dequeue>
	LL_ASSERT(link);
   19a02:	462c      	mov	r4, r5
   19a04:	b998      	cbnz	r0, 19a2e <ll_rx_dequeue+0x42>
   19a06:	2301      	movs	r3, #1
   19a08:	f04f 0100 	mov.w	r1, #0
   19a0c:	f363 0107 	bfi	r1, r3, #0, #8
   19a10:	4a4c      	ldr	r2, [pc, #304]	; (19b44 <ll_rx_dequeue+0x158>)
   19a12:	4b4d      	ldr	r3, [pc, #308]	; (19b48 <ll_rx_dequeue+0x15c>)
   19a14:	484d      	ldr	r0, [pc, #308]	; (19b4c <ll_rx_dequeue+0x160>)
   19a16:	1a9b      	subs	r3, r3, r2
   19a18:	08db      	lsrs	r3, r3, #3
   19a1a:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(_radio.link_rx_data_quota <
   19a1e:	f004 fd10 	bl	1e442 <log_0>
   19a22:	4040      	eors	r0, r0
   19a24:	f380 8811 	msr	BASEPRI, r0
   19a28:	f04f 0004 	mov.w	r0, #4
   19a2c:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   19a2e:	f505 71a0 	add.w	r1, r5, #320	; 0x140
   19a32:	f008 f891 	bl	21b58 <mem_release>
	switch (node_rx->hdr.type) {
   19a36:	9a01      	ldr	r2, [sp, #4]
   19a38:	7911      	ldrb	r1, [r2, #4]
   19a3a:	290d      	cmp	r1, #13
   19a3c:	d807      	bhi.n	19a4e <ll_rx_dequeue+0x62>
   19a3e:	2301      	movs	r3, #1
   19a40:	408b      	lsls	r3, r1
   19a42:	f642 5014 	movw	r0, #11540	; 0x2d14
   19a46:	4203      	tst	r3, r0
   19a48:	d10e      	bne.n	19a68 <ll_rx_dequeue+0x7c>
   19a4a:	0598      	lsls	r0, r3, #22
   19a4c:	d423      	bmi.n	19a96 <ll_rx_dequeue+0xaa>
		LL_ASSERT(0);
   19a4e:	2301      	movs	r3, #1
   19a50:	f04f 0100 	mov.w	r1, #0
   19a54:	f363 0107 	bfi	r1, r3, #0, #8
   19a58:	4a3a      	ldr	r2, [pc, #232]	; (19b44 <ll_rx_dequeue+0x158>)
   19a5a:	4b3b      	ldr	r3, [pc, #236]	; (19b48 <ll_rx_dequeue+0x15c>)
   19a5c:	483c      	ldr	r0, [pc, #240]	; (19b50 <ll_rx_dequeue+0x164>)
   19a5e:	1a9b      	subs	r3, r3, r2
   19a60:	08db      	lsrs	r3, r3, #3
   19a62:	f363 118f 	bfi	r1, r3, #6, #10
   19a66:	e7da      	b.n	19a1e <ll_rx_dequeue+0x32>
		LL_ASSERT(_radio.link_rx_data_quota <
   19a68:	f895 0138 	ldrb.w	r0, [r5, #312]	; 0x138
   19a6c:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
   19a70:	3801      	subs	r0, #1
   19a72:	4283      	cmp	r3, r0
   19a74:	db0c      	blt.n	19a90 <ll_rx_dequeue+0xa4>
   19a76:	2301      	movs	r3, #1
   19a78:	f04f 0100 	mov.w	r1, #0
   19a7c:	f363 0107 	bfi	r1, r3, #0, #8
   19a80:	4a30      	ldr	r2, [pc, #192]	; (19b44 <ll_rx_dequeue+0x158>)
   19a82:	4b31      	ldr	r3, [pc, #196]	; (19b48 <ll_rx_dequeue+0x15c>)
   19a84:	4833      	ldr	r0, [pc, #204]	; (19b54 <ll_rx_dequeue+0x168>)
   19a86:	1a9b      	subs	r3, r3, r2
   19a88:	08db      	lsrs	r3, r3, #3
   19a8a:	f363 118f 	bfi	r1, r3, #6, #10
   19a8e:	e7c6      	b.n	19a1e <ll_rx_dequeue+0x32>
		_radio.link_rx_data_quota++;
   19a90:	3301      	adds	r3, #1
   19a92:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   19a96:	2908      	cmp	r1, #8
   19a98:	d140      	bne.n	19b1c <ll_rx_dequeue+0x130>
		if ((radio_le_conn_cmplt->status == BT_HCI_ERR_ADV_TIMEOUT) ||
   19a9a:	7a13      	ldrb	r3, [r2, #8]
   19a9c:	2b3c      	cmp	r3, #60	; 0x3c
   19a9e:	d012      	beq.n	19ac6 <ll_rx_dequeue+0xda>
   19aa0:	7a52      	ldrb	r2, [r2, #9]
   19aa2:	bb32      	cbnz	r2, 19af2 <ll_rx_dequeue+0x106>
			LL_ASSERT(_radio.scanner.is_enabled);
   19aa4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   19aa8:	07d9      	lsls	r1, r3, #31
   19aaa:	d439      	bmi.n	19b20 <ll_rx_dequeue+0x134>
   19aac:	2301      	movs	r3, #1
   19aae:	f04f 0100 	mov.w	r1, #0
   19ab2:	f363 0107 	bfi	r1, r3, #0, #8
   19ab6:	4a23      	ldr	r2, [pc, #140]	; (19b44 <ll_rx_dequeue+0x158>)
   19ab8:	4b23      	ldr	r3, [pc, #140]	; (19b48 <ll_rx_dequeue+0x15c>)
   19aba:	4827      	ldr	r0, [pc, #156]	; (19b58 <ll_rx_dequeue+0x16c>)
   19abc:	1a9b      	subs	r3, r3, r2
   19abe:	08db      	lsrs	r3, r3, #3
   19ac0:	f363 118f 	bfi	r1, r3, #6, #10
   19ac4:	e7ab      	b.n	19a1e <ll_rx_dequeue+0x32>
				_radio.advertiser.conn = NULL;
   19ac6:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   19ac8:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   19acc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   19ad0:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   19ad4:	2b00      	cmp	r3, #0
   19ad6:	db0e      	blt.n	19af6 <ll_rx_dequeue+0x10a>
   19ad8:	2301      	movs	r3, #1
   19ada:	f04f 0100 	mov.w	r1, #0
   19ade:	f363 0107 	bfi	r1, r3, #0, #8
   19ae2:	4a18      	ldr	r2, [pc, #96]	; (19b44 <ll_rx_dequeue+0x158>)
   19ae4:	4b18      	ldr	r3, [pc, #96]	; (19b48 <ll_rx_dequeue+0x15c>)
   19ae6:	481d      	ldr	r0, [pc, #116]	; (19b5c <ll_rx_dequeue+0x170>)
   19ae8:	1a9b      	subs	r3, r3, r2
   19aea:	08db      	lsrs	r3, r3, #3
   19aec:	f363 118f 	bfi	r1, r3, #6, #10
   19af0:	e795      	b.n	19a1e <ll_rx_dequeue+0x32>
		struct connection *conn = NULL;
   19af2:	2500      	movs	r5, #0
   19af4:	e7ec      	b.n	19ad0 <ll_rx_dequeue+0xe4>
			_radio.advertiser.is_enabled = 0U;
   19af6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   19afa:	f36f 13c7 	bfc	r3, #7, #1
   19afe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   19b02:	b995      	cbnz	r5, 19b2a <ll_rx_dequeue+0x13e>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   19b04:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   19b08:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   19b0c:	f000 0001 	and.w	r0, r0, #1
   19b10:	0040      	lsls	r0, r0, #1
		if (!bm) {
   19b12:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   19b16:	d101      	bne.n	19b1c <ll_rx_dequeue+0x130>
			ll_adv_scan_state_cb(0);
   19b18:	f008 fb8d 	bl	22236 <ll_adv_scan_state_cb>
}
   19b1c:	b003      	add	sp, #12
   19b1e:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0U;
   19b20:	f362 0300 	bfi	r3, r2, #0, #1
   19b24:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		if (conn) {
   19b28:	e7ec      	b.n	19b04 <ll_rx_dequeue+0x118>
			mem_release(node_rx->hdr.link,
   19b2a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   19b2e:	490c      	ldr	r1, [pc, #48]	; (19b60 <ll_rx_dequeue+0x174>)
   19b30:	f008 f812 	bl	21b58 <mem_release>
			mem_release(conn, &_radio.conn_free);
   19b34:	490b      	ldr	r1, [pc, #44]	; (19b64 <ll_rx_dequeue+0x178>)
   19b36:	4628      	mov	r0, r5
   19b38:	f008 f80e 	bl	21b58 <mem_release>
   19b3c:	e7e2      	b.n	19b04 <ll_rx_dequeue+0x118>
   19b3e:	bf00      	nop
   19b40:	20000d68 	.word	0x20000d68
   19b44:	000233ec 	.word	0x000233ec
   19b48:	0002341c 	.word	0x0002341c
   19b4c:	000288d6 	.word	0x000288d6
   19b50:	0002822a 	.word	0x0002822a
   19b54:	0002864a 	.word	0x0002864a
   19b58:	000286c2 	.word	0x000286c2
   19b5c:	00028694 	.word	0x00028694
   19b60:	20000ea8 	.word	0x20000ea8
   19b64:	20000e74 	.word	0x20000e74

00019b68 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   19b68:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   19b6a:	4b07      	ldr	r3, [pc, #28]	; (19b88 <rtc0_nrf5_isr+0x20>)
   19b6c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   19b70:	b122      	cbz	r2, 19b7c <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   19b72:	2000      	movs	r0, #0
   19b74:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   19b78:	f7fc fd3e 	bl	165f8 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   19b7c:	2000      	movs	r0, #0

	DEBUG_TICKER_ISR(0);
}
   19b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   19b82:	f7fc b87d 	b.w	15c80 <mayfly_run>
   19b86:	bf00      	nop
   19b88:	4000b000 	.word	0x4000b000

00019b8c <radio_event_callback>:
	k_sem_give(sem_recv);
   19b8c:	4b01      	ldr	r3, [pc, #4]	; (19b94 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   19b8e:	6818      	ldr	r0, [r3, #0]
   19b90:	f002 bb6a 	b.w	1c268 <z_impl_k_sem_give>
   19b94:	20001868 	.word	0x20001868

00019b98 <ll_init>:

	DEBUG_TICKER_JOB(0);
}

int ll_init(struct k_sem *sem_rx)
{
   19b98:	b530      	push	{r4, r5, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   19b9a:	4b47      	ldr	r3, [pc, #284]	; (19cb8 <ll_init+0x120>)
{
   19b9c:	b087      	sub	sp, #28
	sem_recv = sem_rx;
   19b9e:	6018      	str	r0, [r3, #0]
   19ba0:	4846      	ldr	r0, [pc, #280]	; (19cbc <ll_init+0x124>)
   19ba2:	f001 fd89 	bl	1b6b8 <z_impl_device_get_binding>

	clk_k32 = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clk_k32) {
   19ba6:	b918      	cbnz	r0, 19bb0 <ll_init+0x18>
		return -ENODEV;
   19ba8:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI5_IRQn);

	return 0;
}
   19bac:	b007      	add	sp, #28
   19bae:	bd30      	pop	{r4, r5, pc}
	return api->on(dev, sys);
   19bb0:	6843      	ldr	r3, [r0, #4]
   19bb2:	2101      	movs	r1, #1
   19bb4:	681b      	ldr	r3, [r3, #0]
   19bb6:	4798      	blx	r3
   19bb8:	4841      	ldr	r0, [pc, #260]	; (19cc0 <ll_init+0x128>)
   19bba:	f001 fd7d 	bl	1b6b8 <z_impl_device_get_binding>
	if (!entropy) {
   19bbe:	4604      	mov	r4, r0
   19bc0:	2800      	cmp	r0, #0
   19bc2:	d0f1      	beq.n	19ba8 <ll_init+0x10>
	cntr_init();
   19bc4:	f000 fa5e 	bl	1a084 <cntr_init>
	mayfly_init();
   19bc8:	f7fb ffb8 	bl	15b3c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   19bcc:	4b3d      	ldr	r3, [pc, #244]	; (19cc4 <ll_init+0x12c>)
   19bce:	2208      	movs	r2, #8
   19bd0:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   19bd2:	2203      	movs	r2, #3
   19bd4:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   19bd6:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   19bd8:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   19bda:	4a3b      	ldr	r2, [pc, #236]	; (19cc8 <ll_init+0x130>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   19bdc:	7418      	strb	r0, [r3, #16]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   19bde:	9205      	str	r2, [sp, #20]
   19be0:	4a3a      	ldr	r2, [pc, #232]	; (19ccc <ll_init+0x134>)
   19be2:	9204      	str	r2, [sp, #16]
   19be4:	4a3a      	ldr	r2, [pc, #232]	; (19cd0 <ll_init+0x138>)
   19be6:	9203      	str	r2, [sp, #12]
   19be8:	4a3a      	ldr	r2, [pc, #232]	; (19cd4 <ll_init+0x13c>)
   19bea:	9202      	str	r2, [sp, #8]
   19bec:	220e      	movs	r2, #14
   19bee:	e9cd 3200 	strd	r3, r2, [sp]
   19bf2:	2109      	movs	r1, #9
   19bf4:	2304      	movs	r3, #4
   19bf6:	4a38      	ldr	r2, [pc, #224]	; (19cd8 <ll_init+0x140>)
   19bf8:	f7fc fcc0 	bl	1657c <ticker_init>
	LL_ASSERT(!err);
   19bfc:	b198      	cbz	r0, 19c26 <ll_init+0x8e>
   19bfe:	2301      	movs	r3, #1
   19c00:	f04f 0100 	mov.w	r1, #0
   19c04:	4a35      	ldr	r2, [pc, #212]	; (19cdc <ll_init+0x144>)
   19c06:	4836      	ldr	r0, [pc, #216]	; (19ce0 <ll_init+0x148>)
   19c08:	f363 0107 	bfi	r1, r3, #0, #8
   19c0c:	4b35      	ldr	r3, [pc, #212]	; (19ce4 <ll_init+0x14c>)
   19c0e:	1a9b      	subs	r3, r3, r2
   19c10:	08db      	lsrs	r3, r3, #3
   19c12:	f363 118f 	bfi	r1, r3, #6, #10
   19c16:	f004 fc14 	bl	1e442 <log_0>
   19c1a:	4040      	eors	r0, r0
   19c1c:	f380 8811 	msr	BASEPRI, r0
   19c20:	f04f 0004 	mov.w	r0, #4
   19c24:	df02      	svc	2
   19c26:	4830      	ldr	r0, [pc, #192]	; (19ce8 <ll_init+0x150>)
   19c28:	f001 fd46 	bl	1b6b8 <z_impl_device_get_binding>
	if (!clk_m16) {
   19c2c:	2800      	cmp	r0, #0
   19c2e:	d0bb      	beq.n	19ba8 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF_K32SRC_ACCURACY, entropy,
   19c30:	4b2e      	ldr	r3, [pc, #184]	; (19cec <ll_init+0x154>)
   19c32:	9304      	str	r3, [sp, #16]
   19c34:	231b      	movs	r3, #27
   19c36:	e9cd 3302 	strd	r3, r3, [sp, #8]
   19c3a:	2204      	movs	r2, #4
   19c3c:	2306      	movs	r3, #6
   19c3e:	f240 45dc 	movw	r5, #1244	; 0x4dc
   19c42:	e9cd 3200 	strd	r3, r2, [sp]
   19c46:	9505      	str	r5, [sp, #20]
   19c48:	4622      	mov	r2, r4
   19c4a:	2301      	movs	r3, #1
   19c4c:	2107      	movs	r1, #7
   19c4e:	f7ff fc1b 	bl	19488 <radio_init>
	if (err) {
   19c52:	4604      	mov	r4, r0
   19c54:	b190      	cbz	r0, 19c7c <ll_init+0xe4>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   19c56:	2201      	movs	r2, #1
   19c58:	f04f 0300 	mov.w	r3, #0
   19c5c:	f362 0307 	bfi	r3, r2, #0, #8
   19c60:	491e      	ldr	r1, [pc, #120]	; (19cdc <ll_init+0x144>)
   19c62:	4a20      	ldr	r2, [pc, #128]	; (19ce4 <ll_init+0x14c>)
   19c64:	1a52      	subs	r2, r2, r1
   19c66:	08d2      	lsrs	r2, r2, #3
   19c68:	f362 138f 	bfi	r3, r2, #6, #10
   19c6c:	4601      	mov	r1, r0
   19c6e:	462a      	mov	r2, r5
   19c70:	481f      	ldr	r0, [pc, #124]	; (19cf0 <ll_init+0x158>)
   19c72:	f004 fc07 	bl	1e484 <log_2>
		return -ENOMEM;
   19c76:	f06f 000b 	mvn.w	r0, #11
   19c7a:	e797      	b.n	19bac <ll_init+0x14>
	ll_filter_reset(true);
   19c7c:	2001      	movs	r0, #1
   19c7e:	f000 f9f5 	bl	1a06c <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   19c82:	4622      	mov	r2, r4
   19c84:	4621      	mov	r1, r4
   19c86:	2001      	movs	r0, #1
   19c88:	f7eb fc64 	bl	5554 <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   19c8c:	4622      	mov	r2, r4
   19c8e:	4621      	mov	r1, r4
   19c90:	200b      	movs	r0, #11
   19c92:	f7eb fc5f 	bl	5554 <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI5_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi5_nrf5_isr,
   19c96:	4622      	mov	r2, r4
   19c98:	4621      	mov	r1, r4
   19c9a:	2019      	movs	r0, #25
   19c9c:	f7eb fc5a 	bl	5554 <z_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   19ca0:	2001      	movs	r0, #1
   19ca2:	f7eb fc25 	bl	54f0 <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   19ca6:	200b      	movs	r0, #11
   19ca8:	f7eb fc22 	bl	54f0 <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI5_IRQn);
   19cac:	2019      	movs	r0, #25
   19cae:	f7eb fc1f 	bl	54f0 <z_arch_irq_enable>
	return 0;
   19cb2:	4620      	mov	r0, r4
   19cb4:	e77a      	b.n	19bac <ll_init+0x14>
   19cb6:	bf00      	nop
   19cb8:	20001868 	.word	0x20001868
   19cbc:	000244ea 	.word	0x000244ea
   19cc0:	00024467 	.word	0x00024467
   19cc4:	20001848 	.word	0x20001848
   19cc8:	00022479 	.word	0x00022479
   19ccc:	0001aa5d 	.word	0x0001aa5d
   19cd0:	0001a9f9 	.word	0x0001a9f9
   19cd4:	200015a8 	.word	0x200015a8
   19cd8:	20001440 	.word	0x20001440
   19cdc:	000233ec 	.word	0x000233ec
   19ce0:	00028bff 	.word	0x00028bff
   19ce4:	00023424 	.word	0x00023424
   19ce8:	000244f4 	.word	0x000244f4
   19cec:	20000f64 	.word	0x20000f64
   19cf0:	00028c15 	.word	0x00028c15

00019cf4 <ll_adv_params_set>:
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u8_t ll_adv_params_set(u16_t interval, u8_t adv_type,
		       u8_t own_addr_type, u8_t direct_addr_type,
		       u8_t const *const direct_addr, u8_t chan_map,
		       u8_t filter_policy)
{
   19cf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19cf8:	461e      	mov	r6, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   19cfa:	4b33      	ldr	r3, [pc, #204]	; (19dc8 <ll_adv_params_set+0xd4>)
   19cfc:	9300      	str	r3, [sp, #0]
{
   19cfe:	4604      	mov	r4, r0
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   19d00:	2301      	movs	r3, #1
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled(0)) {
   19d02:	2000      	movs	r0, #0
{
   19d04:	4688      	mov	r8, r1
   19d06:	4615      	mov	r5, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   19d08:	f88d 3004 	strb.w	r3, [sp, #4]
	if (ll_adv_is_enabled(0)) {
   19d0c:	f7ff fc8e 	bl	1962c <ll_adv_is_enabled>
   19d10:	2800      	cmp	r0, #0
   19d12:	d154      	bne.n	19dbe <ll_adv_params_set+0xca>
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
   19d14:	4a2d      	ldr	r2, [pc, #180]	; (19dcc <ll_adv_params_set+0xd8>)
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chan_map = chan_map;
   19d16:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   19d1a:	7813      	ldrb	r3, [r2, #0]
   19d1c:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   19d20:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
	if (adv_type != 0x01) {
   19d24:	f1b8 0f01 	cmp.w	r8, #1
		ll_adv.interval = 0;
   19d28:	bf08      	it	eq
   19d2a:	2400      	moveq	r4, #0
	ll_adv.filter_policy = filter_policy;
   19d2c:	f361 03c4 	bfi	r3, r1, #3, #2
   19d30:	8054      	strh	r4, [r2, #2]
   19d32:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   19d34:	f7ff fc72 	bl	1961c <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19d38:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   19d3c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19d40:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
   19d44:	ab02      	add	r3, sp, #8
   19d46:	eb03 0108 	add.w	r1, r3, r8
   19d4a:	5d03      	ldrb	r3, [r0, r4]
   19d4c:	f811 2c08 	ldrb.w	r2, [r1, #-8]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   19d50:	f005 0501 	and.w	r5, r5, #1
	pdu->type = pdu_adv_type[adv_type];
   19d54:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   19d58:	f365 1386 	bfi	r3, r5, #6, #1
	pdu->rfu = 0;
   19d5c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19d60:	f003 020f 	and.w	r2, r3, #15
   19d64:	2a01      	cmp	r2, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19d66:	eb00 0704 	add.w	r7, r0, r4
	pdu->rfu = 0;
   19d6a:	5503      	strb	r3, [r0, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19d6c:	d122      	bne.n	19db4 <ll_adv_params_set+0xc0>
		pdu->rx_addr = direct_addr_type;
   19d6e:	f366 13c7 	bfi	r3, r6, #7, #1
   19d72:	5503      	strb	r3, [r0, r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   19d74:	2206      	movs	r2, #6
   19d76:	9908      	ldr	r1, [sp, #32]
   19d78:	f107 0008 	add.w	r0, r7, #8
   19d7c:	f005 fc44 	bl	1f608 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   19d80:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   19d82:	707b      	strb	r3, [r7, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   19d84:	f7ff fc4e 	bl	19624 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19d88:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   19d8c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19d90:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   19d94:	18c1      	adds	r1, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   19d96:	5cc2      	ldrb	r2, [r0, r3]
   19d98:	f365 1286 	bfi	r2, r5, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19d9c:	f002 0240 	and.w	r2, r2, #64	; 0x40
   19da0:	f042 0204 	orr.w	r2, r2, #4
   19da4:	54c2      	strb	r2, [r0, r3]
	pdu->rx_addr = 0;
	if (pdu->len == 0) {
   19da6:	7848      	ldrb	r0, [r1, #1]
   19da8:	b958      	cbnz	r0, 19dc2 <ll_adv_params_set+0xce>
		pdu->len = BDADDR_SIZE;
   19daa:	2306      	movs	r3, #6
   19dac:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   19dae:	b002      	add	sp, #8
   19db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (pdu->len == 0) {
   19db4:	787b      	ldrb	r3, [r7, #1]
   19db6:	2b00      	cmp	r3, #0
   19db8:	d1e4      	bne.n	19d84 <ll_adv_params_set+0x90>
		pdu->len = BDADDR_SIZE;
   19dba:	2306      	movs	r3, #6
   19dbc:	e7e1      	b.n	19d82 <ll_adv_params_set+0x8e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19dbe:	200c      	movs	r0, #12
   19dc0:	e7f5      	b.n	19dae <ll_adv_params_set+0xba>
	return 0;
   19dc2:	2000      	movs	r0, #0
   19dc4:	e7f3      	b.n	19dae <ll_adv_params_set+0xba>
   19dc6:	bf00      	nop
   19dc8:	02060100 	.word	0x02060100
   19dcc:	20001d42 	.word	0x20001d42

00019dd0 <ll_adv_enable>:
u8_t ll_adv_enable(u16_t handle, u8_t enable)
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
{
   19dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   19dd4:	b918      	cbnz	r0, 19dde <ll_adv_enable+0xe>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
#endif /* !CONFIG_BT_HCI_MESH_EXT */
	return status;
}
   19dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return radio_adv_disable();
   19dda:	f7ff bdb9 	b.w	19950 <radio_adv_disable>
	} else if (ll_adv_is_enabled(0)) {
   19dde:	2000      	movs	r0, #0
   19de0:	f7ff fc24 	bl	1962c <ll_adv_is_enabled>
   19de4:	4607      	mov	r7, r0
   19de6:	bbb8      	cbnz	r0, 19e58 <ll_adv_enable+0x88>
	radio_adv_data = radio_adv_data_get();
   19de8:	f7ff fc18 	bl	1961c <radio_adv_data_get>
   19dec:	4606      	mov	r6, r0
	radio_scan_data = radio_scan_data_get();
   19dee:	f7ff fc19 	bl	19624 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   19df2:	f896 404f 	ldrb.w	r4, [r6, #79]	; 0x4f
   19df6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19dfa:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   19dfe:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   19e02:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19e06:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   19e0a:	18c5      	adds	r5, r0, r3
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   19e0c:	5d30      	ldrb	r0, [r6, r4]
   19e0e:	4639      	mov	r1, r7
   19e10:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19e14:	f7fc fd5a 	bl	168cc <ll_addr_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   19e18:	eb06 0804 	add.w	r8, r6, r4
			memcpy(&pdu_adv->adv_ind.addr[0],
   19e1c:	2206      	movs	r2, #6
   19e1e:	4601      	mov	r1, r0
   19e20:	f108 0002 	add.w	r0, r8, #2
   19e24:	f005 fbf0 	bl	1f608 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   19e28:	5d30      	ldrb	r0, [r6, r4]
   19e2a:	4639      	mov	r1, r7
   19e2c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19e30:	f7fc fd4c 	bl	168cc <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   19e34:	2206      	movs	r2, #6
   19e36:	4601      	mov	r1, r0
   19e38:	1ca8      	adds	r0, r5, #2
   19e3a:	f005 fbe5 	bl	1f608 <memcpy>
				  ll_adv.filter_policy, rl_idx);
   19e3e:	4807      	ldr	r0, [pc, #28]	; (19e5c <ll_adv_enable+0x8c>)
   19e40:	7801      	ldrb	r1, [r0, #0]
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   19e42:	8840      	ldrh	r0, [r0, #2]
   19e44:	f3c1 02c1 	ubfx	r2, r1, #3, #2
   19e48:	23ff      	movs	r3, #255	; 0xff
   19e4a:	f001 0107 	and.w	r1, r1, #7
   19e4e:	f7e8 fc0f 	bl	2670 <radio_adv_enable>
	return status;
   19e52:	b2c0      	uxtb	r0, r0
}
   19e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   19e58:	2000      	movs	r0, #0
   19e5a:	e7fb      	b.n	19e54 <ll_adv_enable+0x84>
   19e5c:	20001d42 	.word	0x20001d42

00019e60 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u8_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   19e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19e64:	4681      	mov	r9, r0
	if (ll_scan_is_enabled(0)) {
   19e66:	2000      	movs	r0, #0
{
   19e68:	4688      	mov	r8, r1
   19e6a:	4617      	mov	r7, r2
   19e6c:	461e      	mov	r6, r3
	if (ll_scan_is_enabled(0)) {
   19e6e:	f7ff fbf3 	bl	19658 <ll_scan_is_enabled>
   19e72:	b978      	cbnz	r0, 19e94 <ll_scan_params_set+0x34>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   19e74:	4d08      	ldr	r5, [pc, #32]	; (19e98 <ll_scan_params_set+0x38>)
	ll_scan.interval = interval;
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;
   19e76:	f89d 3020 	ldrb.w	r3, [sp, #32]
	ll_scan.type = type;
   19e7a:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   19e7c:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   19e80:	f369 0400 	bfi	r4, r9, #0, #1
	ll_scan.own_addr_type = own_addr_type;
   19e84:	f366 0442 	bfi	r4, r6, #1, #2
	ll_scan.filter_policy = filter_policy;
   19e88:	f363 04c4 	bfi	r4, r3, #3, #2
	ll_scan.window = window;
   19e8c:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   19e8e:	712c      	strb	r4, [r5, #4]

	return 0;
}
   19e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19e94:	200c      	movs	r0, #12
   19e96:	e7fb      	b.n	19e90 <ll_scan_params_set+0x30>
   19e98:	20001d46 	.word	0x20001d46

00019e9c <ll_scan_enable>:

u8_t ll_scan_enable(u8_t enable)
{
   19e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e9e:	b085      	sub	sp, #20
	u8_t rpa_gen = 0U;
	u32_t status;
	u32_t scan;

	if (!enable) {
   19ea0:	b928      	cbnz	r0, 19eae <ll_scan_enable+0x12>
		return radio_scan_disable(true);
   19ea2:	2001      	movs	r0, #1
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   19ea4:	b005      	add	sp, #20
   19ea6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable(true);
   19eaa:	f7ff bd7d 	b.w	199a8 <radio_scan_disable>
	scan = ll_scan_is_enabled(0);
   19eae:	2000      	movs	r0, #0
   19eb0:	f7ff fbd2 	bl	19658 <ll_scan_is_enabled>
   19eb4:	4605      	mov	r5, r0
	if (scan & BIT(2)) {
   19eb6:	f010 0004 	ands.w	r0, r0, #4
   19eba:	d11c      	bne.n	19ef6 <ll_scan_enable+0x5a>
	if (scan) {
   19ebc:	b9cd      	cbnz	r5, 19ef2 <ll_scan_enable+0x56>
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   19ebe:	4e0f      	ldr	r6, [pc, #60]	; (19efc <ll_scan_enable+0x60>)
   19ec0:	7934      	ldrb	r4, [r6, #4]
   19ec2:	f004 0701 	and.w	r7, r4, #1
   19ec6:	f3c4 0440 	ubfx	r4, r4, #1, #1
   19eca:	4629      	mov	r1, r5
   19ecc:	4620      	mov	r0, r4
   19ece:	f7fc fcfd 	bl	168cc <ll_addr_get>
   19ed2:	23ff      	movs	r3, #255	; 0xff
   19ed4:	e9cd 5302 	strd	r5, r3, [sp, #8]
				   ll_scan.filter_policy, rpa_gen,
   19ed8:	7933      	ldrb	r3, [r6, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   19eda:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   19ede:	9301      	str	r3, [sp, #4]
   19ee0:	8873      	ldrh	r3, [r6, #2]
   19ee2:	9300      	str	r3, [sp, #0]
   19ee4:	4602      	mov	r2, r0
   19ee6:	8833      	ldrh	r3, [r6, #0]
   19ee8:	4621      	mov	r1, r4
   19eea:	4638      	mov	r0, r7
   19eec:	f7e8 fd14 	bl	2918 <radio_scan_enable>
	return status;
   19ef0:	b2c0      	uxtb	r0, r0
}
   19ef2:	b005      	add	sp, #20
   19ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	       return BT_HCI_ERR_CMD_DISALLOWED;
   19ef6:	200c      	movs	r0, #12
   19ef8:	e7fb      	b.n	19ef2 <ll_scan_enable+0x56>
   19efa:	bf00      	nop
   19efc:	20001d46 	.word	0x20001d46

00019f00 <ctrl_filter_get>:
	return rl[rl_idx].wl;
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
   19f00:	b508      	push	{r3, lr}
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
   19f02:	b998      	cbnz	r0, 19f2c <ctrl_filter_get+0x2c>
   19f04:	2301      	movs	r3, #1
   19f06:	f04f 0100 	mov.w	r1, #0
   19f0a:	4a09      	ldr	r2, [pc, #36]	; (19f30 <ctrl_filter_get+0x30>)
   19f0c:	4809      	ldr	r0, [pc, #36]	; (19f34 <ctrl_filter_get+0x34>)
   19f0e:	f363 0107 	bfi	r1, r3, #0, #8
   19f12:	4b09      	ldr	r3, [pc, #36]	; (19f38 <ctrl_filter_get+0x38>)
   19f14:	1a9b      	subs	r3, r3, r2
   19f16:	08db      	lsrs	r3, r3, #3
   19f18:	f363 118f 	bfi	r1, r3, #6, #10
   19f1c:	f004 fa91 	bl	1e442 <log_0>
   19f20:	4040      	eors	r0, r0
   19f22:	f380 8811 	msr	BASEPRI, r0
   19f26:	f04f 0004 	mov.w	r0, #4
   19f2a:	df02      	svc	2
	return &wl_filter;
#endif
}
   19f2c:	4803      	ldr	r0, [pc, #12]	; (19f3c <ctrl_filter_get+0x3c>)
   19f2e:	bd08      	pop	{r3, pc}
   19f30:	000233ec 	.word	0x000233ec
   19f34:	00028c4a 	.word	0x00028c4a
   19f38:	0002342c 	.word	0x0002342c
   19f3c:	2000230b 	.word	0x2000230b

00019f40 <ll_wl_clear>:
{
	return WL_SIZE;
}

u8_t ll_wl_clear(void)
{
   19f40:	b508      	push	{r3, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19f42:	f7ff fb7b 	bl	1963c <radio_adv_filter_pol_get>
   19f46:	b108      	cbz	r0, 19f4c <ll_wl_clear+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19f48:	200c      	movs	r0, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0U;

	return 0;
}
   19f4a:	bd08      	pop	{r3, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19f4c:	f7ff fb9a 	bl	19684 <radio_scan_filter_pol_get>
   19f50:	f010 0001 	ands.w	r0, r0, #1
   19f54:	d1f8      	bne.n	19f48 <ll_wl_clear+0x8>
	filter->enable_bitmask = 0U;
   19f56:	4b03      	ldr	r3, [pc, #12]	; (19f64 <ll_wl_clear+0x24>)
   19f58:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0U;
   19f5a:	7058      	strb	r0, [r3, #1]
	wl_anon = 0U;
   19f5c:	4b02      	ldr	r3, [pc, #8]	; (19f68 <ll_wl_clear+0x28>)
   19f5e:	7018      	strb	r0, [r3, #0]
	return 0;
   19f60:	e7f3      	b.n	19f4a <ll_wl_clear+0xa>
   19f62:	bf00      	nop
   19f64:	2000230b 	.word	0x2000230b
   19f68:	2000230a 	.word	0x2000230a

00019f6c <ll_wl_add>:

u8_t ll_wl_add(bt_addr_le_t *addr)
{
   19f6c:	b570      	push	{r4, r5, r6, lr}
   19f6e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19f70:	f7ff fb64 	bl	1963c <radio_adv_filter_pol_get>
   19f74:	b108      	cbz	r0, 19f7a <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19f76:	200c      	movs	r0, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
   19f78:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19f7a:	f7ff fb83 	bl	19684 <radio_scan_filter_pol_get>
   19f7e:	f010 0001 	ands.w	r0, r0, #1
   19f82:	d1f8      	bne.n	19f76 <ll_wl_add+0xa>
	if (addr->type == ADDR_TYPE_ANON) {
   19f84:	7823      	ldrb	r3, [r4, #0]
   19f86:	2bff      	cmp	r3, #255	; 0xff
   19f88:	d103      	bne.n	19f92 <ll_wl_add+0x26>
		wl_anon = 1U;
   19f8a:	4b12      	ldr	r3, [pc, #72]	; (19fd4 <ll_wl_add+0x68>)
   19f8c:	2201      	movs	r2, #1
   19f8e:	701a      	strb	r2, [r3, #0]
		return 0;
   19f90:	e7f2      	b.n	19f78 <ll_wl_add+0xc>
	if (filter->enable_bitmask == 0xFF) {
   19f92:	4d11      	ldr	r5, [pc, #68]	; (19fd8 <ll_wl_add+0x6c>)
   19f94:	782a      	ldrb	r2, [r5, #0]
   19f96:	2aff      	cmp	r2, #255	; 0xff
	return filter_add(&wl_filter, addr->type, addr->a.val);
   19f98:	f104 0101 	add.w	r1, r4, #1
	if (filter->enable_bitmask == 0xFF) {
   19f9c:	d018      	beq.n	19fd0 <ll_wl_add+0x64>
	     (filter->enable_bitmask & BIT(index));
   19f9e:	fa22 f400 	lsr.w	r4, r2, r0
	for (index = 0;
   19fa2:	f014 0401 	ands.w	r4, r4, #1
   19fa6:	d111      	bne.n	19fcc <ll_wl_add+0x60>
	filter->enable_bitmask |= BIT(index);
   19fa8:	2601      	movs	r6, #1
   19faa:	4086      	lsls	r6, r0
   19fac:	4332      	orrs	r2, r6
   19fae:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19fb0:	f003 0301 	and.w	r3, r3, #1
   19fb4:	786a      	ldrb	r2, [r5, #1]
   19fb6:	4083      	lsls	r3, r0
   19fb8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19fba:	2206      	movs	r2, #6
   19fbc:	fb02 5000 	mla	r0, r2, r0, r5
   19fc0:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19fc2:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19fc4:	f005 fb20 	bl	1f608 <memcpy>
	return filter_add(&wl_filter, addr->type, addr->a.val);
   19fc8:	b2e0      	uxtb	r0, r4
   19fca:	e7d5      	b.n	19f78 <ll_wl_add+0xc>
	     index++) {
   19fcc:	3001      	adds	r0, #1
   19fce:	e7e6      	b.n	19f9e <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19fd0:	2407      	movs	r4, #7
   19fd2:	e7f9      	b.n	19fc8 <ll_wl_add+0x5c>
   19fd4:	2000230a 	.word	0x2000230a
   19fd8:	2000230b 	.word	0x2000230b

00019fdc <ll_wl_remove>:

u8_t ll_wl_remove(bt_addr_le_t *addr)
{
   19fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19fe0:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19fe2:	f7ff fb2b 	bl	1963c <radio_adv_filter_pol_get>
   19fe6:	b110      	cbz	r0, 19fee <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19fe8:	200c      	movs	r0, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
   19fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19fee:	f7ff fb49 	bl	19684 <radio_scan_filter_pol_get>
   19ff2:	f010 0501 	ands.w	r5, r0, #1
   19ff6:	d1f7      	bne.n	19fe8 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   19ff8:	f897 8000 	ldrb.w	r8, [r7]
   19ffc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1a000:	d103      	bne.n	1a00a <ll_wl_remove+0x2e>
		wl_anon = 0U;
   1a002:	4b18      	ldr	r3, [pc, #96]	; (1a064 <ll_wl_remove+0x88>)
		return 0;
   1a004:	4628      	mov	r0, r5
		wl_anon = 0U;
   1a006:	701d      	strb	r5, [r3, #0]
		return 0;
   1a008:	e7ef      	b.n	19fea <ll_wl_remove+0xe>
	if (!filter->enable_bitmask) {
   1a00a:	4c17      	ldr	r4, [pc, #92]	; (1a068 <ll_wl_remove+0x8c>)
   1a00c:	7823      	ldrb	r3, [r4, #0]
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1a00e:	3701      	adds	r7, #1
	if (!filter->enable_bitmask) {
   1a010:	b913      	cbnz	r3, 1a018 <ll_wl_remove+0x3c>
		return BT_HCI_ERR_INVALID_PARAM;
   1a012:	2512      	movs	r5, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1a014:	b2e8      	uxtb	r0, r5
   1a016:	e7e8      	b.n	19fea <ll_wl_remove+0xe>
	index = 8;
   1a018:	2608      	movs	r6, #8
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1a01a:	f104 0902 	add.w	r9, r4, #2
   1a01e:	f04f 0a06 	mov.w	sl, #6
	while (index--) {
   1a022:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   1a026:	d3f4      	bcc.n	1a012 <ll_wl_remove+0x36>
		if ((filter->enable_bitmask & BIT(index)) &&
   1a028:	7823      	ldrb	r3, [r4, #0]
   1a02a:	40f3      	lsrs	r3, r6
   1a02c:	07da      	lsls	r2, r3, #31
   1a02e:	d5f8      	bpl.n	1a022 <ll_wl_remove+0x46>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   1a030:	7863      	ldrb	r3, [r4, #1]
   1a032:	4133      	asrs	r3, r6
   1a034:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   1a038:	07db      	lsls	r3, r3, #31
   1a03a:	d4f2      	bmi.n	1a022 <ll_wl_remove+0x46>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1a03c:	2206      	movs	r2, #6
   1a03e:	4639      	mov	r1, r7
   1a040:	fb0a 9006 	mla	r0, sl, r6, r9
   1a044:	f005 fab9 	bl	1f5ba <memcmp>
		     (addr_type & 0x01)) &&
   1a048:	2800      	cmp	r0, #0
   1a04a:	d1ea      	bne.n	1a022 <ll_wl_remove+0x46>
			filter->enable_bitmask &= ~BIT(index);
   1a04c:	2301      	movs	r3, #1
   1a04e:	40b3      	lsls	r3, r6
   1a050:	7822      	ldrb	r2, [r4, #0]
   1a052:	43db      	mvns	r3, r3
   1a054:	b2db      	uxtb	r3, r3
   1a056:	401a      	ands	r2, r3
   1a058:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   1a05a:	7862      	ldrb	r2, [r4, #1]
   1a05c:	4013      	ands	r3, r2
   1a05e:	7063      	strb	r3, [r4, #1]
			return 0;
   1a060:	e7d8      	b.n	1a014 <ll_wl_remove+0x38>
   1a062:	bf00      	nop
   1a064:	2000230a 	.word	0x2000230a
   1a068:	2000230b 	.word	0x2000230b

0001a06c <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0U;
   1a06c:	4a03      	ldr	r2, [pc, #12]	; (1a07c <ll_filter_reset+0x10>)
   1a06e:	2300      	movs	r3, #0
   1a070:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0U;
   1a072:	4a03      	ldr	r2, [pc, #12]	; (1a080 <ll_filter_reset+0x14>)
   1a074:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0U;
   1a076:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   1a078:	4770      	bx	lr
   1a07a:	bf00      	nop
   1a07c:	2000230a 	.word	0x2000230a
   1a080:	2000230b 	.word	0x2000230b

0001a084 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1a084:	4b05      	ldr	r3, [pc, #20]	; (1a09c <cntr_init+0x18>)
   1a086:	2200      	movs	r2, #0
   1a088:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
   1a08c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a090:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1a094:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1a098:	4770      	bx	lr
   1a09a:	bf00      	nop
   1a09c:	4000b000 	.word	0x4000b000

0001a0a0 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   1a0a0:	4a04      	ldr	r2, [pc, #16]	; (1a0b4 <cntr_start+0x14>)
   1a0a2:	7813      	ldrb	r3, [r2, #0]
   1a0a4:	1c59      	adds	r1, r3, #1
   1a0a6:	7011      	strb	r1, [r2, #0]
   1a0a8:	2001      	movs	r0, #1
   1a0aa:	b913      	cbnz	r3, 1a0b2 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1a0ac:	4a02      	ldr	r2, [pc, #8]	; (1a0b8 <cntr_start+0x18>)
   1a0ae:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1a0b0:	4618      	mov	r0, r3
}
   1a0b2:	4770      	bx	lr
   1a0b4:	2000233d 	.word	0x2000233d
   1a0b8:	4000b000 	.word	0x4000b000

0001a0bc <cntr_stop>:

u32_t cntr_stop(void)
{
   1a0bc:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
   1a0be:	4b10      	ldr	r3, [pc, #64]	; (1a100 <cntr_stop+0x44>)
   1a0c0:	7818      	ldrb	r0, [r3, #0]
   1a0c2:	b998      	cbnz	r0, 1a0ec <cntr_stop+0x30>
   1a0c4:	2301      	movs	r3, #1
   1a0c6:	f04f 0100 	mov.w	r1, #0
   1a0ca:	4a0e      	ldr	r2, [pc, #56]	; (1a104 <cntr_stop+0x48>)
   1a0cc:	480e      	ldr	r0, [pc, #56]	; (1a108 <cntr_stop+0x4c>)
   1a0ce:	f363 0107 	bfi	r1, r3, #0, #8
   1a0d2:	4b0e      	ldr	r3, [pc, #56]	; (1a10c <cntr_stop+0x50>)
   1a0d4:	1a9b      	subs	r3, r3, r2
   1a0d6:	08db      	lsrs	r3, r3, #3
   1a0d8:	f363 118f 	bfi	r1, r3, #6, #10
   1a0dc:	f004 f9b1 	bl	1e442 <log_0>
   1a0e0:	4040      	eors	r0, r0
   1a0e2:	f380 8811 	msr	BASEPRI, r0
   1a0e6:	f04f 0004 	mov.w	r0, #4
   1a0ea:	df02      	svc	2

	if (--_refcount) {
   1a0ec:	3801      	subs	r0, #1
   1a0ee:	b2c0      	uxtb	r0, r0
   1a0f0:	7018      	strb	r0, [r3, #0]
   1a0f2:	2301      	movs	r3, #1
   1a0f4:	b910      	cbnz	r0, 1a0fc <cntr_stop+0x40>
   1a0f6:	4a06      	ldr	r2, [pc, #24]	; (1a110 <cntr_stop+0x54>)
   1a0f8:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1a0fa:	bd08      	pop	{r3, pc}
		return 1;
   1a0fc:	4618      	mov	r0, r3
   1a0fe:	e7fc      	b.n	1a0fa <cntr_stop+0x3e>
   1a100:	2000233d 	.word	0x2000233d
   1a104:	000233ec 	.word	0x000233ec
   1a108:	00028c7b 	.word	0x00028c7b
   1a10c:	000233fc 	.word	0x000233fc
   1a110:	4000b004 	.word	0x4000b004

0001a114 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1a114:	4b01      	ldr	r3, [pc, #4]	; (1a11c <cntr_cnt_get+0x8>)
   1a116:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1a11a:	4770      	bx	lr
   1a11c:	4000b000 	.word	0x4000b000

0001a120 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1a120:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1a124:	4b01      	ldr	r3, [pc, #4]	; (1a12c <cntr_cmp_set+0xc>)
   1a126:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1a12a:	4770      	bx	lr
   1a12c:	4000b000 	.word	0x4000b000

0001a130 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1a130:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1a132:	4b13      	ldr	r3, [pc, #76]	; (1a180 <do_ecb+0x50>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a134:	4c13      	ldr	r4, [pc, #76]	; (1a184 <do_ecb+0x54>)
   1a136:	2501      	movs	r5, #1
{
   1a138:	4684      	mov	ip, r0
   1a13a:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   1a13c:	2700      	movs	r7, #0
   1a13e:	46a6      	mov	lr, r4
   1a140:	461a      	mov	r2, r3
   1a142:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1a144:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1a148:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1a14c:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   1a150:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1a152:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1a156:	b931      	cbnz	r1, 1a166 <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1a158:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1a15c:	b919      	cbnz	r1, 1a166 <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1a15e:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1a162:	2900      	cmp	r1, #0
   1a164:	d1f5      	bne.n	1a152 <do_ecb+0x22>
   1a166:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1a16a:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1a16e:	2900      	cmp	r1, #0
   1a170:	d1e7      	bne.n	1a142 <do_ecb+0x12>
   1a172:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   1a176:	2800      	cmp	r0, #0
   1a178:	d0e3      	beq.n	1a142 <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   1a17a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1a17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a180:	4000e000 	.word	0x4000e000
   1a184:	4000e004 	.word	0x4000e004

0001a188 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   1a188:	2800      	cmp	r0, #0
    NRF_PPI->CHENSET = mask;
}

__STATIC_INLINE void nrf_ppi_channels_disable(uint32_t mask)
{
    NRF_PPI->CHENCLR = mask;
   1a18a:	4b08      	ldr	r3, [pc, #32]	; (1a1ac <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1a18c:	bf14      	ite	ne
   1a18e:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   1a192:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   1a196:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   1a19a:	bf14      	ite	ne
   1a19c:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   1a1a0:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    NRF_PPI->CHENSET = mask;
   1a1a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   1a1a8:	4770      	bx	lr
   1a1aa:	bf00      	nop
   1a1ac:	4001f000 	.word	0x4001f000

0001a1b0 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1a1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1a1b2:	4e2d      	ldr	r6, [pc, #180]	; (1a268 <sw_switch.isra.10+0xb8>)

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1a1b4:	4f2d      	ldr	r7, [pc, #180]	; (1a26c <sw_switch.isra.10+0xbc>)
   1a1b6:	7833      	ldrb	r3, [r6, #0]
   1a1b8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1a278 <sw_switch.isra.10+0xc8>
   1a1bc:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
   1a1c0:	b25d      	sxtb	r5, r3
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle));
   1a1c2:	b21b      	sxth	r3, r3
   1a1c4:	00dc      	lsls	r4, r3, #3
   1a1c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1a1ca:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1a1ce:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1a1d2:	f105 040b 	add.w	r4, r5, #11
   1a1d6:	b2e4      	uxtb	r4, r4
   1a1d8:	00e4      	lsls	r4, r4, #3

	nrf_ppi_event_endpoint_setup(ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc));
   1a1da:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   1a1de:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1a1e2:	3fc0      	subs	r7, #192	; 0xc0
   1a1e4:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1a1e8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
}

__STATIC_INLINE void nrf_ppi_event_endpoint_setup(nrf_ppi_channel_t channel,
                                                  uint32_t          eep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1a1ec:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   1a1f0:	2800      	cmp	r0, #0
   1a1f2:	d034      	beq.n	1a25e <sw_switch.isra.10+0xae>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   1a1f4:	f649 4740 	movw	r7, #40000	; 0x9c40
   1a1f8:	f24a 005a 	movw	r0, #41050	; 0xa05a
   1a1fc:	2a02      	cmp	r2, #2
   1a1fe:	bf08      	it	eq
   1a200:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1a202:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1a206:	f241 574a 	movw	r7, #5450	; 0x154a
   1a20a:	2902      	cmp	r1, #2
   1a20c:	bf14      	ite	ne
   1a20e:	4611      	movne	r1, r2
   1a210:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1a212:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   1a216:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a21a:	4401      	add	r1, r0
   1a21c:	fbb1 f1f2 	udiv	r1, r1, r2
}

__STATIC_INLINE void nrf_ppi_task_endpoint_setup(nrf_ppi_channel_t channel,
                                                 uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1a220:	4a13      	ldr	r2, [pc, #76]	; (1a270 <sw_switch.isra.10+0xc0>)
   1a222:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1a226:	009b      	lsls	r3, r3, #2
   1a228:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a22c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   1a230:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1a234:	428a      	cmp	r2, r1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
   1a236:	bf8b      	itete	hi
   1a238:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1a23c:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
   1a23e:	1a51      	subhi	r1, r2, r1
   1a240:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   1a244:	bf88      	it	hi
   1a246:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
   1a24a:	4b08      	ldr	r3, [pc, #32]	; (1a26c <sw_switch.isra.10+0xbc>)
   1a24c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1a250:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   1a254:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1a256:	f003 0301 	and.w	r3, r3, #1
   1a25a:	7033      	strb	r3, [r6, #0]
}
   1a25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1a25e:	4a05      	ldr	r2, [pc, #20]	; (1a274 <sw_switch.isra.10+0xc4>)
   1a260:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1a264:	212d      	movs	r1, #45	; 0x2d
   1a266:	e7de      	b.n	1a226 <sw_switch.isra.10+0x76>
   1a268:	2000233e 	.word	0x2000233e
   1a26c:	4001f000 	.word	0x4001f000
   1a270:	40001000 	.word	0x40001000
   1a274:	40001004 	.word	0x40001004
   1a278:	4000110c 	.word	0x4000110c

0001a27c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1a27c:	4b04      	ldr	r3, [pc, #16]	; (1a290 <isr_radio+0x14>)
   1a27e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1a282:	b123      	cbz	r3, 1a28e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1a284:	4b03      	ldr	r3, [pc, #12]	; (1a294 <isr_radio+0x18>)
   1a286:	4a04      	ldr	r2, [pc, #16]	; (1a298 <isr_radio+0x1c>)
   1a288:	681b      	ldr	r3, [r3, #0]
   1a28a:	6810      	ldr	r0, [r2, #0]
   1a28c:	4718      	bx	r3
}
   1a28e:	4770      	bx	lr
   1a290:	40001000 	.word	0x40001000
   1a294:	20001a80 	.word	0x20001a80
   1a298:	20001a84 	.word	0x20001a84

0001a29c <radio_isr_set>:
{
   1a29c:	b538      	push	{r3, r4, r5, lr}
   1a29e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1a2a0:	2001      	movs	r0, #1
{
   1a2a2:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1a2a4:	f7eb f934 	bl	5510 <z_arch_irq_disable>
	isr_cb_param = param;
   1a2a8:	4b08      	ldr	r3, [pc, #32]	; (1a2cc <radio_isr_set+0x30>)
   1a2aa:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   1a2ac:	4b08      	ldr	r3, [pc, #32]	; (1a2d0 <radio_isr_set+0x34>)
   1a2ae:	601c      	str	r4, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t radio_int_mask)
{
    NRF_RADIO->INTENSET = radio_int_mask;
   1a2b0:	4b08      	ldr	r3, [pc, #32]	; (1a2d4 <radio_isr_set+0x38>)
   1a2b2:	2210      	movs	r2, #16
   1a2b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a2b8:	4b07      	ldr	r3, [pc, #28]	; (1a2d8 <radio_isr_set+0x3c>)
   1a2ba:	2202      	movs	r2, #2
   1a2bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1a2c0:	2001      	movs	r0, #1
}
   1a2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1a2c6:	f7eb b913 	b.w	54f0 <z_arch_irq_enable>
   1a2ca:	bf00      	nop
   1a2cc:	20001a84 	.word	0x20001a84
   1a2d0:	20001a80 	.word	0x20001a80
   1a2d4:	40001000 	.word	0x40001000
   1a2d8:	e000e100 	.word	0xe000e100

0001a2dc <radio_reset>:
{
   1a2dc:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1a2de:	2001      	movs	r0, #1
   1a2e0:	f7eb f916 	bl	5510 <z_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
   1a2e4:	4b08      	ldr	r3, [pc, #32]	; (1a308 <radio_reset+0x2c>)
   1a2e6:	2200      	movs	r2, #0
   1a2e8:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   1a2ec:	2201      	movs	r2, #1
   1a2ee:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1a2f2:	4a06      	ldr	r2, [pc, #24]	; (1a30c <radio_reset+0x30>)
   1a2f4:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1a2f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a2fa:	f023 0301 	bic.w	r3, r3, #1
   1a2fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1a302:	6013      	str	r3, [r2, #0]
}
   1a304:	bd08      	pop	{r3, pc}
   1a306:	bf00      	nop
   1a308:	40001000 	.word	0x40001000
   1a30c:	40001774 	.word	0x40001774

0001a310 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1a310:	4b06      	ldr	r3, [pc, #24]	; (1a32c <radio_phy_set+0x1c>)
	switch (phy) {
   1a312:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1a314:	bf14      	ite	ne
   1a316:	2203      	movne	r2, #3
   1a318:	2204      	moveq	r2, #4
   1a31a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1a31e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1a322:	f042 0201 	orr.w	r2, r2, #1
   1a326:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1a32a:	4770      	bx	lr
   1a32c:	40001000 	.word	0x40001000

0001a330 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   1a330:	4b01      	ldr	r3, [pc, #4]	; (1a338 <radio_tx_power_set+0x8>)
   1a332:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1a336:	4770      	bx	lr
   1a338:	40001000 	.word	0x40001000

0001a33c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1a33c:	4b01      	ldr	r3, [pc, #4]	; (1a344 <radio_freq_chan_set+0x8>)
   1a33e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1a342:	4770      	bx	lr
   1a344:	40001000 	.word	0x40001000

0001a348 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1a348:	4b07      	ldr	r3, [pc, #28]	; (1a368 <radio_whiten_iv_set+0x20>)
   1a34a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1a34e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1a352:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1a356:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1a35a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1a35e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1a362:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1a366:	4770      	bx	lr
   1a368:	40001000 	.word	0x40001000

0001a36c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1a36c:	4a0a      	ldr	r2, [pc, #40]	; (1a398 <radio_aa_set+0x2c>)
   1a36e:	2300      	movs	r3, #0
   1a370:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1a374:	2301      	movs	r3, #1
   1a376:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1a37a:	78c3      	ldrb	r3, [r0, #3]
   1a37c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1a380:	7843      	ldrb	r3, [r0, #1]
   1a382:	7881      	ldrb	r1, [r0, #2]
   1a384:	041b      	lsls	r3, r3, #16
   1a386:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1a38a:	7801      	ldrb	r1, [r0, #0]
   1a38c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1a390:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1a394:	4770      	bx	lr
   1a396:	bf00      	nop
   1a398:	40001000 	.word	0x40001000

0001a39c <radio_pkt_configure>:
	switch (phy) {
   1a39c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1a3a0:	2b02      	cmp	r3, #2
{
   1a3a2:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1a3a4:	bf14      	ite	ne
   1a3a6:	2400      	movne	r4, #0
   1a3a8:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1a3ac:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1a3ae:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1a3b2:	bf48      	it	mi
   1a3b4:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1a3b8:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1a3ba:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1a3be:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1a3c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1a3c4:	4a09      	ldr	r2, [pc, #36]	; (1a3ec <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1a3c6:	4303      	orrs	r3, r0
   1a3c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1a3cc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1a3d0:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1a3d4:	4b06      	ldr	r3, [pc, #24]	; (1a3f0 <radio_pkt_configure+0x54>)
   1a3d6:	4003      	ands	r3, r0
   1a3d8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1a3dc:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1a3e0:	4319      	orrs	r1, r3
   1a3e2:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1a3e6:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1a3ea:	bd10      	pop	{r4, pc}
   1a3ec:	40001000 	.word	0x40001000
   1a3f0:	fef80000 	.word	0xfef80000

0001a3f4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   1a3f4:	4b01      	ldr	r3, [pc, #4]	; (1a3fc <radio_pkt_rx_set+0x8>)
   1a3f6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1a3fa:	4770      	bx	lr
   1a3fc:	40001000 	.word	0x40001000

0001a400 <radio_pkt_tx_set>:
   1a400:	4b01      	ldr	r3, [pc, #4]	; (1a408 <radio_pkt_tx_set+0x8>)
   1a402:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1a406:	4770      	bx	lr
   1a408:	40001000 	.word	0x40001000

0001a40c <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + radio_task)) = 0x1UL;
   1a40c:	4b01      	ldr	r3, [pc, #4]	; (1a414 <radio_rx_enable+0x8>)
   1a40e:	2201      	movs	r2, #1
   1a410:	601a      	str	r2, [r3, #0]
}
   1a412:	4770      	bx	lr
   1a414:	40001004 	.word	0x40001004

0001a418 <radio_tx_enable>:
   1a418:	4b01      	ldr	r3, [pc, #4]	; (1a420 <radio_tx_enable+0x8>)
   1a41a:	2201      	movs	r2, #1
   1a41c:	601a      	str	r2, [r3, #0]
}
   1a41e:	4770      	bx	lr
   1a420:	40001000 	.word	0x40001000

0001a424 <radio_disable>:
    NRF_PPI->CHENCLR = mask;
   1a424:	4a07      	ldr	r2, [pc, #28]	; (1a444 <radio_disable+0x20>)
   1a426:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1a42a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = NRF_PPI_TASK_SET;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = NRF_PPI_TASK_SET;
   1a42e:	2301      	movs	r3, #1
   1a430:	6053      	str	r3, [r2, #4]
   1a432:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1a434:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1a438:	2100      	movs	r1, #0
   1a43a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1a43e:	6113      	str	r3, [r2, #16]
}
   1a440:	4770      	bx	lr
   1a442:	bf00      	nop
   1a444:	4001f000 	.word	0x4001f000

0001a448 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1a448:	4b04      	ldr	r3, [pc, #16]	; (1a45c <radio_status_reset+0x14>)
   1a44a:	2200      	movs	r2, #0
   1a44c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1a450:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1a454:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1a458:	4770      	bx	lr
   1a45a:	bf00      	nop
   1a45c:	40001000 	.word	0x40001000

0001a460 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1a460:	4b03      	ldr	r3, [pc, #12]	; (1a470 <radio_is_ready+0x10>)
   1a462:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1a466:	3000      	adds	r0, #0
   1a468:	bf18      	it	ne
   1a46a:	2001      	movne	r0, #1
   1a46c:	4770      	bx	lr
   1a46e:	bf00      	nop
   1a470:	40001000 	.word	0x40001000

0001a474 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1a474:	4b03      	ldr	r3, [pc, #12]	; (1a484 <radio_is_done+0x10>)
   1a476:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1a47a:	3000      	adds	r0, #0
   1a47c:	bf18      	it	ne
   1a47e:	2001      	movne	r0, #1
   1a480:	4770      	bx	lr
   1a482:	bf00      	nop
   1a484:	40001000 	.word	0x40001000

0001a488 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1a488:	4b03      	ldr	r3, [pc, #12]	; (1a498 <radio_is_idle+0x10>)
   1a48a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1a48e:	fab0 f080 	clz	r0, r0
   1a492:	0940      	lsrs	r0, r0, #5
   1a494:	4770      	bx	lr
   1a496:	bf00      	nop
   1a498:	40001000 	.word	0x40001000

0001a49c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1a49c:	4b04      	ldr	r3, [pc, #16]	; (1a4b0 <radio_crc_configure+0x14>)
   1a49e:	f240 1203 	movw	r2, #259	; 0x103
   1a4a2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1a4a6:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1a4aa:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1a4ae:	4770      	bx	lr
   1a4b0:	40001000 	.word	0x40001000

0001a4b4 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1a4b4:	4b03      	ldr	r3, [pc, #12]	; (1a4c4 <radio_crc_is_valid+0x10>)
   1a4b6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1a4ba:	3000      	adds	r0, #0
   1a4bc:	bf18      	it	ne
   1a4be:	2001      	movne	r0, #1
   1a4c0:	4770      	bx	lr
   1a4c2:	bf00      	nop
   1a4c4:	40001000 	.word	0x40001000

0001a4c8 <radio_pkt_empty_get>:
}
   1a4c8:	4800      	ldr	r0, [pc, #0]	; (1a4cc <radio_pkt_empty_get+0x4>)
   1a4ca:	4770      	bx	lr
   1a4cc:	20001978 	.word	0x20001978

0001a4d0 <radio_pkt_scratch_get>:
}
   1a4d0:	4800      	ldr	r0, [pc, #0]	; (1a4d4 <radio_pkt_scratch_get+0x4>)
   1a4d2:	4770      	bx	lr
   1a4d4:	2000197c 	.word	0x2000197c

0001a4d8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1a4d8:	4b04      	ldr	r3, [pc, #16]	; (1a4ec <radio_switch_complete_and_rx+0x14>)
   1a4da:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1a4dc:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1a4de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1a4e2:	4602      	mov	r2, r0
   1a4e4:	4608      	mov	r0, r1
   1a4e6:	f7ff be63 	b.w	1a1b0 <sw_switch.isra.10>
   1a4ea:	bf00      	nop
   1a4ec:	40001000 	.word	0x40001000

0001a4f0 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1a4f0:	4b03      	ldr	r3, [pc, #12]	; (1a500 <radio_switch_complete_and_tx+0x10>)
   1a4f2:	2103      	movs	r1, #3
   1a4f4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1a4f8:	4601      	mov	r1, r0
   1a4fa:	2001      	movs	r0, #1
   1a4fc:	f7ff be58 	b.w	1a1b0 <sw_switch.isra.10>
   1a500:	40001000 	.word	0x40001000

0001a504 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1a504:	4b05      	ldr	r3, [pc, #20]	; (1a51c <radio_switch_complete_and_disable+0x18>)
   1a506:	2203      	movs	r2, #3
   1a508:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
   1a50c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1a510:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1a514:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_ppi_channels_disable(BIT(HAL_SW_SWITCH_TIMER_CLEAR_PPI) |
				 BIT(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI));
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1a518:	4770      	bx	lr
   1a51a:	bf00      	nop
   1a51c:	40001000 	.word	0x40001000

0001a520 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1a520:	4a03      	ldr	r2, [pc, #12]	; (1a530 <radio_rssi_measure+0x10>)
   1a522:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1a526:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1a52a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1a52e:	4770      	bx	lr
   1a530:	40001000 	.word	0x40001000

0001a534 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1a534:	4b01      	ldr	r3, [pc, #4]	; (1a53c <radio_rssi_get+0x8>)
   1a536:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1a53a:	4770      	bx	lr
   1a53c:	40001000 	.word	0x40001000

0001a540 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1a540:	4b02      	ldr	r3, [pc, #8]	; (1a54c <radio_rssi_status_reset+0xc>)
   1a542:	2200      	movs	r2, #0
   1a544:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1a548:	4770      	bx	lr
   1a54a:	bf00      	nop
   1a54c:	40001000 	.word	0x40001000

0001a550 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1a550:	4b03      	ldr	r3, [pc, #12]	; (1a560 <radio_rssi_is_ready+0x10>)
   1a552:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1a556:	3000      	adds	r0, #0
   1a558:	bf18      	it	ne
   1a55a:	2001      	movne	r0, #1
   1a55c:	4770      	bx	lr
   1a55e:	bf00      	nop
   1a560:	40001000 	.word	0x40001000

0001a564 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   1a564:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a566:	2400      	movs	r4, #0
   1a568:	2706      	movs	r7, #6
   1a56a:	00a3      	lsls	r3, r4, #2
   1a56c:	fb07 2504 	mla	r5, r7, r4, r2
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1a570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1a578:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1a57a:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   1a57e:	3401      	adds	r4, #1
   1a580:	88ad      	ldrh	r5, [r5, #4]
   1a582:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1a586:	2c08      	cmp	r4, #8
   1a588:	d1ef      	bne.n	1a56a <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   1a58a:	4b03      	ldr	r3, [pc, #12]	; (1a598 <radio_filter_configure+0x34>)
   1a58c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1a590:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1a594:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a596:	bf00      	nop
   1a598:	40001000 	.word	0x40001000

0001a59c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1a59c:	4a03      	ldr	r2, [pc, #12]	; (1a5ac <radio_filter_disable+0x10>)
   1a59e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1a5a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1a5a6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1a5aa:	4770      	bx	lr
   1a5ac:	40001000 	.word	0x40001000

0001a5b0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1a5b0:	4b02      	ldr	r3, [pc, #8]	; (1a5bc <radio_filter_status_reset+0xc>)
   1a5b2:	2200      	movs	r2, #0
   1a5b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1a5b8:	4770      	bx	lr
   1a5ba:	bf00      	nop
   1a5bc:	40001000 	.word	0x40001000

0001a5c0 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1a5c0:	4b03      	ldr	r3, [pc, #12]	; (1a5d0 <radio_filter_has_match+0x10>)
   1a5c2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1a5c6:	3000      	adds	r0, #0
   1a5c8:	bf18      	it	ne
   1a5ca:	2001      	movne	r0, #1
   1a5cc:	4770      	bx	lr
   1a5ce:	bf00      	nop
   1a5d0:	40001000 	.word	0x40001000

0001a5d4 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1a5d4:	4b01      	ldr	r3, [pc, #4]	; (1a5dc <radio_filter_match_get+0x8>)
   1a5d6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1a5da:	4770      	bx	lr
   1a5dc:	40001000 	.word	0x40001000

0001a5e0 <radio_tmr_status_reset>:
{
    p_reg->EVTENSET = mask;
}
__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1a5e0:	4b05      	ldr	r3, [pc, #20]	; (1a5f8 <radio_tmr_status_reset+0x18>)
   1a5e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1a5e6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1a5ea:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1a5ee:	4a03      	ldr	r2, [pc, #12]	; (1a5fc <radio_tmr_status_reset+0x1c>)
   1a5f0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1a5f4:	4770      	bx	lr
   1a5f6:	bf00      	nop
   1a5f8:	4000b000 	.word	0x4000b000
   1a5fc:	0e700060 	.word	0x0e700060

0001a600 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
   1a600:	4b03      	ldr	r3, [pc, #12]	; (1a610 <radio_tmr_tifs_set+0x10>)
   1a602:	4a04      	ldr	r2, [pc, #16]	; (1a614 <radio_tmr_tifs_set+0x14>)
   1a604:	781b      	ldrb	r3, [r3, #0]
   1a606:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1a60a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1a60e:	4770      	bx	lr
   1a610:	2000233e 	.word	0x2000233e
   1a614:	40009000 	.word	0x40009000

0001a618 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   1a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1a61a:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1a61e:	4c33      	ldr	r4, [pc, #204]	; (1a6ec <radio_tmr_start+0xd4>)
   1a620:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1a624:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1a626:	bf88      	it	hi
   1a628:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a62c:	4b30      	ldr	r3, [pc, #192]	; (1a6f0 <radio_tmr_start+0xd8>)
	}
	remainder /= 1000000UL;
   1a62e:	4c31      	ldr	r4, [pc, #196]	; (1a6f4 <radio_tmr_start+0xdc>)
		remainder += 30517578UL;
   1a630:	bf84      	itt	hi
   1a632:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1a636:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1a63a:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   1a63e:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1a642:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   1a646:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1a64a:	f04f 0202 	mov.w	r2, #2
   1a64e:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   1a650:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1a654:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1a658:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   1a65c:	4a26      	ldr	r2, [pc, #152]	; (1a6f8 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   1a65e:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   1a662:	bf88      	it	hi
   1a664:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   1a668:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1a66c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1a670:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1a674:	4921      	ldr	r1, [pc, #132]	; (1a6fc <radio_tmr_start+0xe4>)
   1a676:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   1a67a:	3b0c      	subs	r3, #12
   1a67c:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1a680:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
   1a684:	2320      	movs	r3, #32
   1a686:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1a68a:	f7ff fd7d 	bl	1a188 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1a68e:	4b1c      	ldr	r3, [pc, #112]	; (1a700 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a690:	4a1c      	ldr	r2, [pc, #112]	; (1a704 <radio_tmr_start+0xec>)
   1a692:	6015      	str	r5, [r2, #0]
   1a694:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1a698:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1a69c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1a6a0:	601d      	str	r5, [r3, #0]
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1a6a2:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1a6a6:	3b74      	subs	r3, #116	; 0x74
   1a6a8:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
   1a6ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1a6b0:	3334      	adds	r3, #52	; 0x34
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1a6b2:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1a6b6:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1a6ba:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1a6be:	33c4      	adds	r3, #196	; 0xc4
   1a6c0:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1a6c4:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1a6c8:	3bc0      	subs	r3, #192	; 0xc0
   1a6ca:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1a6ce:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1a6d2:	33c8      	adds	r3, #200	; 0xc8
   1a6d4:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
			SW_SWITCH_TIMER_EVTS_COMP(1)),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1));

#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1a6d8:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1a6dc:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1a6e0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   1a6e4:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1a6e8:	4620      	mov	r0, r4
   1a6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a6ec:	7ff0bdbf 	.word	0x7ff0bdbf
   1a6f0:	4000800c 	.word	0x4000800c
   1a6f4:	000f4240 	.word	0x000f4240
   1a6f8:	4000b000 	.word	0x4000b000
   1a6fc:	4001f000 	.word	0x4001f000
   1a700:	40009000 	.word	0x40009000
   1a704:	4000900c 	.word	0x4000900c

0001a708 <radio_tmr_stop>:
   1a708:	4a04      	ldr	r2, [pc, #16]	; (1a71c <radio_tmr_stop+0x14>)
   1a70a:	2301      	movs	r3, #1
   1a70c:	6013      	str	r3, [r2, #0]
   1a70e:	60d3      	str	r3, [r2, #12]
   1a710:	320c      	adds	r2, #12
   1a712:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1a716:	6013      	str	r3, [r2, #0]
   1a718:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1a71a:	4770      	bx	lr
   1a71c:	40008004 	.word	0x40008004

0001a720 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1a720:	4b04      	ldr	r3, [pc, #16]	; (1a734 <radio_tmr_hcto_configure+0x14>)
   1a722:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   1a726:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1a72a:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1a72e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
				BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1a732:	4770      	bx	lr
   1a734:	40008000 	.word	0x40008000

0001a738 <radio_tmr_aa_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1a738:	4b06      	ldr	r3, [pc, #24]	; (1a754 <radio_tmr_aa_capture+0x1c>)
   1a73a:	4a07      	ldr	r2, [pc, #28]	; (1a758 <radio_tmr_aa_capture+0x20>)
   1a73c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1a740:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1a744:	3240      	adds	r2, #64	; 0x40
   1a746:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   1a74a:	4a04      	ldr	r2, [pc, #16]	; (1a75c <radio_tmr_aa_capture+0x24>)
   1a74c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
{
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
				BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1a750:	4770      	bx	lr
   1a752:	bf00      	nop
   1a754:	4001f000 	.word	0x4001f000
   1a758:	40001100 	.word	0x40001100
   1a75c:	04000040 	.word	0x04000040

0001a760 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1a760:	4b01      	ldr	r3, [pc, #4]	; (1a768 <radio_tmr_aa_get+0x8>)
   1a762:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1a766:	4770      	bx	lr
   1a768:	40008000 	.word	0x40008000

0001a76c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1a76c:	4b01      	ldr	r3, [pc, #4]	; (1a774 <radio_tmr_aa_save+0x8>)
   1a76e:	6018      	str	r0, [r3, #0]
}
   1a770:	4770      	bx	lr
   1a772:	bf00      	nop
   1a774:	20001a88 	.word	0x20001a88

0001a778 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1a778:	4b01      	ldr	r3, [pc, #4]	; (1a780 <radio_tmr_aa_restore+0x8>)
   1a77a:	6818      	ldr	r0, [r3, #0]
   1a77c:	4770      	bx	lr
   1a77e:	bf00      	nop
   1a780:	20001a88 	.word	0x20001a88

0001a784 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1a784:	4b01      	ldr	r3, [pc, #4]	; (1a78c <radio_tmr_ready_get+0x8>)
   1a786:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1a78a:	4770      	bx	lr
   1a78c:	40008000 	.word	0x40008000

0001a790 <radio_tmr_end_capture>:
   1a790:	4b02      	ldr	r3, [pc, #8]	; (1a79c <radio_tmr_end_capture+0xc>)
   1a792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1a796:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1a79a:	4770      	bx	lr
   1a79c:	4001f000 	.word	0x4001f000

0001a7a0 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1a7a0:	4b01      	ldr	r3, [pc, #4]	; (1a7a8 <radio_tmr_end_get+0x8>)
   1a7a2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1a7a6:	4770      	bx	lr
   1a7a8:	40008000 	.word	0x40008000

0001a7ac <radio_tmr_tifs_base_get>:
   1a7ac:	4b01      	ldr	r3, [pc, #4]	; (1a7b4 <radio_tmr_tifs_base_get+0x8>)
   1a7ae:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1a7b2:	4770      	bx	lr
   1a7b4:	40008000 	.word	0x40008000

0001a7b8 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a7b8:	4b13      	ldr	r3, [pc, #76]	; (1a808 <radio_ccm_rx_pkt_set+0x50>)
{
   1a7ba:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a7bc:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1a7be:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a7c0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1a7c4:	4e11      	ldr	r6, [pc, #68]	; (1a80c <radio_ccm_rx_pkt_set+0x54>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1a7c6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1a7ca:	4d11      	ldr	r5, [pc, #68]	; (1a810 <radio_ccm_rx_pkt_set+0x58>)
   1a7cc:	2902      	cmp	r1, #2
   1a7ce:	bf14      	ite	ne
   1a7d0:	4629      	movne	r1, r5
   1a7d2:	4631      	moveq	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1a7d4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1a7d8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1a7dc:	480d      	ldr	r0, [pc, #52]	; (1a814 <radio_ccm_rx_pkt_set+0x5c>)
   1a7de:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1a7e2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1a7e6:	4a0c      	ldr	r2, [pc, #48]	; (1a818 <radio_ccm_rx_pkt_set+0x60>)
   1a7e8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   1a7ec:	4a0b      	ldr	r2, [pc, #44]	; (1a81c <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->SHORTS = 0;
   1a7ee:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
   1a7f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1a7f6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1a7fa:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1a7fe:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a802:	2201      	movs	r2, #1
   1a804:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1a806:	bd70      	pop	{r4, r5, r6, pc}
   1a808:	4000f000 	.word	0x4000f000
   1a80c:	01010001 	.word	0x01010001
   1a810:	01000001 	.word	0x01000001
   1a814:	2000197c 	.word	0x2000197c
   1a818:	2000186c 	.word	0x2000186c
   1a81c:	4001f000 	.word	0x4001f000

0001a820 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1a820:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a822:	4b0e      	ldr	r3, [pc, #56]	; (1a85c <radio_ccm_tx_pkt_set+0x3c>)
   1a824:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1a826:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1a828:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1a82c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1a830:	4c0b      	ldr	r4, [pc, #44]	; (1a860 <radio_ccm_tx_pkt_set+0x40>)
   1a832:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1a836:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1a83a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1a83e:	4809      	ldr	r0, [pc, #36]	; (1a864 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1a840:	4909      	ldr	r1, [pc, #36]	; (1a868 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1a842:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1a846:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1a84a:	2101      	movs	r1, #1
   1a84c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1a850:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1a854:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1a858:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1a85a:	bd10      	pop	{r4, pc}
   1a85c:	4000f000 	.word	0x4000f000
   1a860:	01010000 	.word	0x01010000
   1a864:	2000197c 	.word	0x2000197c
   1a868:	2000186c 	.word	0x2000186c

0001a86c <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

__STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a86c:	4b0c      	ldr	r3, [pc, #48]	; (1a8a0 <radio_ccm_is_done+0x34>)
   1a86e:	2202      	movs	r2, #2
   1a870:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1a874:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1a878:	b16a      	cbz	r2, 1a896 <radio_ccm_is_done+0x2a>
}

__STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1a87a:	2202      	movs	r2, #2
   1a87c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1a880:	4a08      	ldr	r2, [pc, #32]	; (1a8a4 <radio_ccm_is_done+0x38>)
   1a882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1a886:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1a88a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1a88e:	fab0 f080 	clz	r0, r0
   1a892:	0940      	lsrs	r0, r0, #5
   1a894:	4770      	bx	lr
		__WFE();
   1a896:	bf20      	wfe
		__SEV();
   1a898:	bf40      	sev
		__WFE();
   1a89a:	bf20      	wfe
   1a89c:	e7ea      	b.n	1a874 <radio_ccm_is_done+0x8>
   1a89e:	bf00      	nop
   1a8a0:	4000f000 	.word	0x4000f000
   1a8a4:	e000e100 	.word	0xe000e100

0001a8a8 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1a8a8:	4b03      	ldr	r3, [pc, #12]	; (1a8b8 <radio_ccm_mic_is_valid+0x10>)
   1a8aa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1a8ae:	3000      	adds	r0, #0
   1a8b0:	bf18      	it	ne
   1a8b2:	2001      	movne	r0, #1
   1a8b4:	4770      	bx	lr
   1a8b6:	bf00      	nop
   1a8b8:	4000f000 	.word	0x4000f000

0001a8bc <radio_ar_match_get>:
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1a8bc:	4b01      	ldr	r3, [pc, #4]	; (1a8c4 <radio_ar_match_get+0x8>)
   1a8be:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1a8c2:	4770      	bx	lr
   1a8c4:	4000f000 	.word	0x4000f000

0001a8c8 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1a8c8:	4a04      	ldr	r2, [pc, #16]	; (1a8dc <radio_ar_status_reset+0x14>)
   1a8ca:	2300      	movs	r3, #0
   1a8cc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1a8d0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1a8d4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1a8d8:	4770      	bx	lr
   1a8da:	bf00      	nop
   1a8dc:	40001000 	.word	0x40001000

0001a8e0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1a8e0:	4b08      	ldr	r3, [pc, #32]	; (1a904 <radio_ar_has_match+0x24>)
   1a8e2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1a8e6:	b160      	cbz	r0, 1a902 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1a8e8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1a8ec:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1a8f0:	b138      	cbz	r0, 1a902 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1a8f2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1a8f6:	b120      	cbz	r0, 1a902 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1a8f8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1a8fc:	fab0 f080 	clz	r0, r0
   1a900:	0940      	lsrs	r0, r0, #5
}
   1a902:	4770      	bx	lr
   1a904:	40001000 	.word	0x40001000

0001a908 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1a908:	2901      	cmp	r1, #1
{
   1a90a:	b508      	push	{r3, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1a90c:	d013      	beq.n	1a936 <mayfly_enable_cb+0x2e>
   1a90e:	2301      	movs	r3, #1
   1a910:	f04f 0100 	mov.w	r1, #0
   1a914:	4a0d      	ldr	r2, [pc, #52]	; (1a94c <mayfly_enable_cb+0x44>)
   1a916:	480e      	ldr	r0, [pc, #56]	; (1a950 <mayfly_enable_cb+0x48>)
   1a918:	f363 0107 	bfi	r1, r3, #0, #8
   1a91c:	4b0d      	ldr	r3, [pc, #52]	; (1a954 <mayfly_enable_cb+0x4c>)
   1a91e:	1a9b      	subs	r3, r3, r2
   1a920:	08db      	lsrs	r3, r3, #3
   1a922:	f363 118f 	bfi	r1, r3, #6, #10
   1a926:	f003 fd8c 	bl	1e442 <log_0>
   1a92a:	4040      	eors	r0, r0
   1a92c:	f380 8811 	msr	BASEPRI, r0
   1a930:	f04f 0004 	mov.w	r0, #4
   1a934:	df02      	svc	2

	if (enable) {
		irq_enable(SWI5_IRQn);
   1a936:	2019      	movs	r0, #25
	if (enable) {
   1a938:	b11a      	cbz	r2, 1a942 <mayfly_enable_cb+0x3a>
	} else {
		irq_disable(SWI5_IRQn);
	}
}
   1a93a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_enable(SWI5_IRQn);
   1a93e:	f7ea bdd7 	b.w	54f0 <z_arch_irq_enable>
}
   1a942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_disable(SWI5_IRQn);
   1a946:	f7ea bde3 	b.w	5510 <z_arch_irq_disable>
   1a94a:	bf00      	nop
   1a94c:	000233ec 	.word	0x000233ec
   1a950:	00028cb4 	.word	0x00028cb4
   1a954:	0002343c 	.word	0x0002343c

0001a958 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   1a958:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   1a95a:	b1a9      	cbz	r1, 1a988 <mayfly_is_enabled+0x30>
   1a95c:	2901      	cmp	r1, #1
   1a95e:	d018      	beq.n	1a992 <mayfly_is_enabled+0x3a>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI5_IRQn);

	default:
		LL_ASSERT(0);
   1a960:	2301      	movs	r3, #1
   1a962:	f04f 0100 	mov.w	r1, #0
   1a966:	4a0c      	ldr	r2, [pc, #48]	; (1a998 <mayfly_is_enabled+0x40>)
   1a968:	480c      	ldr	r0, [pc, #48]	; (1a99c <mayfly_is_enabled+0x44>)
   1a96a:	f363 0107 	bfi	r1, r3, #0, #8
   1a96e:	4b0c      	ldr	r3, [pc, #48]	; (1a9a0 <mayfly_is_enabled+0x48>)
   1a970:	1a9b      	subs	r3, r3, r2
   1a972:	08db      	lsrs	r3, r3, #3
   1a974:	f363 118f 	bfi	r1, r3, #6, #10
   1a978:	f003 fd63 	bl	1e442 <log_0>
   1a97c:	4040      	eors	r0, r0
   1a97e:	f380 8811 	msr	BASEPRI, r0
   1a982:	f04f 0004 	mov.w	r0, #4
   1a986:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1a988:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   1a98a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI5_IRQn);
   1a98e:	f7ea bdd3 	b.w	5538 <z_arch_irq_is_enabled>
   1a992:	2019      	movs	r0, #25
   1a994:	e7f9      	b.n	1a98a <mayfly_is_enabled+0x32>
   1a996:	bf00      	nop
   1a998:	000233ec 	.word	0x000233ec
   1a99c:	0002822a 	.word	0x0002822a
   1a9a0:	0002343c 	.word	0x0002343c

0001a9a4 <mayfly_pend>:
#endif
	       0;
}

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   1a9a4:	b508      	push	{r3, lr}
   1a9a6:	4b10      	ldr	r3, [pc, #64]	; (1a9e8 <mayfly_pend+0x44>)
	(void)caller_id;

	switch (callee_id) {
   1a9a8:	b1a9      	cbz	r1, 1a9d6 <mayfly_pend+0x32>
   1a9aa:	2901      	cmp	r1, #1
   1a9ac:	d018      	beq.n	1a9e0 <mayfly_pend+0x3c>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI5_IRQn);
		break;

	default:
		LL_ASSERT(0);
   1a9ae:	2301      	movs	r3, #1
   1a9b0:	f04f 0100 	mov.w	r1, #0
   1a9b4:	4a0d      	ldr	r2, [pc, #52]	; (1a9ec <mayfly_pend+0x48>)
   1a9b6:	480e      	ldr	r0, [pc, #56]	; (1a9f0 <mayfly_pend+0x4c>)
   1a9b8:	f363 0107 	bfi	r1, r3, #0, #8
   1a9bc:	4b0d      	ldr	r3, [pc, #52]	; (1a9f4 <mayfly_pend+0x50>)
   1a9be:	1a9b      	subs	r3, r3, r2
   1a9c0:	08db      	lsrs	r3, r3, #3
   1a9c2:	f363 118f 	bfi	r1, r3, #6, #10
   1a9c6:	f003 fd3c 	bl	1e442 <log_0>
   1a9ca:	4040      	eors	r0, r0
   1a9cc:	f380 8811 	msr	BASEPRI, r0
   1a9d0:	f04f 0004 	mov.w	r0, #4
   1a9d4:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a9d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a9da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   1a9de:	bd08      	pop	{r3, pc}
   1a9e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1a9e4:	e7f9      	b.n	1a9da <mayfly_pend+0x36>
   1a9e6:	bf00      	nop
   1a9e8:	e000e100 	.word	0xe000e100
   1a9ec:	000233ec 	.word	0x000233ec
   1a9f0:	0002822a 	.word	0x0002822a
   1a9f4:	0002343c 	.word	0x0002343c

0001a9f8 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1a9f8:	2803      	cmp	r0, #3
{
   1a9fa:	b508      	push	{r3, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1a9fc:	d913      	bls.n	1aa26 <hal_ticker_instance0_caller_id_get+0x2e>
   1a9fe:	2301      	movs	r3, #1
   1aa00:	f04f 0100 	mov.w	r1, #0
   1aa04:	f363 0107 	bfi	r1, r3, #0, #8
   1aa08:	4a0f      	ldr	r2, [pc, #60]	; (1aa48 <hal_ticker_instance0_caller_id_get+0x50>)
   1aa0a:	4b10      	ldr	r3, [pc, #64]	; (1aa4c <hal_ticker_instance0_caller_id_get+0x54>)
   1aa0c:	4810      	ldr	r0, [pc, #64]	; (1aa50 <hal_ticker_instance0_caller_id_get+0x58>)
   1aa0e:	1a9b      	subs	r3, r3, r2
   1aa10:	08db      	lsrs	r3, r3, #3
   1aa12:	f363 118f 	bfi	r1, r3, #6, #10

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1aa16:	f003 fd14 	bl	1e442 <log_0>
   1aa1a:	4040      	eors	r0, r0
   1aa1c:	f380 8811 	msr	BASEPRI, r0
   1aa20:	f04f 0004 	mov.w	r0, #4
   1aa24:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1aa26:	4b0b      	ldr	r3, [pc, #44]	; (1aa54 <hal_ticker_instance0_caller_id_get+0x5c>)
   1aa28:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1aa2a:	b960      	cbnz	r0, 1aa46 <hal_ticker_instance0_caller_id_get+0x4e>
   1aa2c:	2301      	movs	r3, #1
   1aa2e:	f04f 0100 	mov.w	r1, #0
   1aa32:	f363 0107 	bfi	r1, r3, #0, #8
   1aa36:	4a04      	ldr	r2, [pc, #16]	; (1aa48 <hal_ticker_instance0_caller_id_get+0x50>)
   1aa38:	4b04      	ldr	r3, [pc, #16]	; (1aa4c <hal_ticker_instance0_caller_id_get+0x54>)
   1aa3a:	4807      	ldr	r0, [pc, #28]	; (1aa58 <hal_ticker_instance0_caller_id_get+0x60>)
   1aa3c:	1a9b      	subs	r3, r3, r2
   1aa3e:	08db      	lsrs	r3, r3, #3
   1aa40:	f363 118f 	bfi	r1, r3, #6, #10
   1aa44:	e7e7      	b.n	1aa16 <hal_ticker_instance0_caller_id_get+0x1e>

	return caller_id;
}
   1aa46:	bd08      	pop	{r3, pc}
   1aa48:	000233ec 	.word	0x000233ec
   1aa4c:	00023444 	.word	0x00023444
   1aa50:	00028cec 	.word	0x00028cec
   1aa54:	00028ce8 	.word	0x00028ce8
   1aa58:	00028d1d 	.word	0x00028d1d

0001aa5c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1aa5c:	3802      	subs	r0, #2
{
   1aa5e:	b510      	push	{r4, lr}
   1aa60:	461c      	mov	r4, r3
	switch (caller_id) {
   1aa62:	2803      	cmp	r0, #3
   1aa64:	d817      	bhi.n	1aa96 <hal_ticker_instance0_sched+0x3a>
   1aa66:	e8df f000 	tbb	[pc, r0]
   1aa6a:	0c02      	.short	0x0c02
   1aa6c:	3312      	.short	0x3312
		}
		break;
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   1aa6e:	2903      	cmp	r1, #3
   1aa70:	d111      	bne.n	1aa96 <hal_ticker_instance0_sched+0x3a>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1aa72:	4b1b      	ldr	r3, [pc, #108]	; (1aae0 <hal_ticker_instance0_sched+0x84>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1aa74:	2100      	movs	r1, #0
			m.param = instance;
   1aa76:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1aa78:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1aa7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1aa7e:	f7fb b8af 	b.w	15be0 <mayfly_enqueue>
		switch (callee_id) {
   1aa82:	2904      	cmp	r1, #4
   1aa84:	d107      	bne.n	1aa96 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   1aa86:	4b17      	ldr	r3, [pc, #92]	; (1aae4 <hal_ticker_instance0_sched+0x88>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1aa88:	2101      	movs	r1, #1
			m.param = instance;
   1aa8a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1aa8c:	e7f4      	b.n	1aa78 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   1aa8e:	2903      	cmp	r1, #3
   1aa90:	d015      	beq.n	1aabe <hal_ticker_instance0_sched+0x62>
   1aa92:	2904      	cmp	r1, #4
   1aa94:	d018      	beq.n	1aac8 <hal_ticker_instance0_sched+0x6c>
		LL_ASSERT(0);
   1aa96:	2301      	movs	r3, #1
   1aa98:	f04f 0100 	mov.w	r1, #0
   1aa9c:	4a12      	ldr	r2, [pc, #72]	; (1aae8 <hal_ticker_instance0_sched+0x8c>)
   1aa9e:	4813      	ldr	r0, [pc, #76]	; (1aaec <hal_ticker_instance0_sched+0x90>)
   1aaa0:	f363 0107 	bfi	r1, r3, #0, #8
   1aaa4:	4b12      	ldr	r3, [pc, #72]	; (1aaf0 <hal_ticker_instance0_sched+0x94>)
   1aaa6:	1a9b      	subs	r3, r3, r2
   1aaa8:	08db      	lsrs	r3, r3, #3
   1aaaa:	f363 118f 	bfi	r1, r3, #6, #10
   1aaae:	f003 fcc8 	bl	1e442 <log_0>
   1aab2:	4040      	eors	r0, r0
   1aab4:	f380 8811 	msr	BASEPRI, r0
   1aab8:	f04f 0004 	mov.w	r0, #4
   1aabc:	df02      	svc	2
			m.param = instance;
   1aabe:	4b0d      	ldr	r3, [pc, #52]	; (1aaf4 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1aac0:	2100      	movs	r1, #0
			m.param = instance;
   1aac2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1aac4:	2001      	movs	r0, #1
   1aac6:	e7d8      	b.n	1aa7a <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   1aac8:	4b0b      	ldr	r3, [pc, #44]	; (1aaf8 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1aaca:	2101      	movs	r1, #1
			m.param = instance;
   1aacc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1aace:	e7f9      	b.n	1aac4 <hal_ticker_instance0_sched+0x68>
		switch (callee_id) {
   1aad0:	2904      	cmp	r1, #4
   1aad2:	d1e0      	bne.n	1aa96 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   1aad4:	4b09      	ldr	r3, [pc, #36]	; (1aafc <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1aad6:	2101      	movs	r1, #1
			m.param = instance;
   1aad8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1aada:	2003      	movs	r0, #3
   1aadc:	e7cd      	b.n	1aa7a <hal_ticker_instance0_sched+0x1e>
   1aade:	bf00      	nop
   1aae0:	20007e70 	.word	0x20007e70
   1aae4:	20007e80 	.word	0x20007e80
   1aae8:	000233ec 	.word	0x000233ec
   1aaec:	0002822a 	.word	0x0002822a
   1aaf0:	00023444 	.word	0x00023444
   1aaf4:	20007e90 	.word	0x20007e90
   1aaf8:	20007ea0 	.word	0x20007ea0
   1aafc:	20007eb0 	.word	0x20007eb0

0001ab00 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1ab00:	4b01      	ldr	r3, [pc, #4]	; (1ab08 <net_buf_pool_get+0x8>)
   1ab02:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1ab06:	4770      	bx	lr
   1ab08:	200080fc 	.word	0x200080fc

0001ab0c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ab0c:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1ab0e:	4b04      	ldr	r3, [pc, #16]	; (1ab20 <net_buf_id+0x14>)
   1ab10:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1ab14:	69db      	ldr	r3, [r3, #28]
   1ab16:	1ac0      	subs	r0, r0, r3
}
   1ab18:	4b02      	ldr	r3, [pc, #8]	; (1ab24 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1ab1a:	10c0      	asrs	r0, r0, #3
}
   1ab1c:	4358      	muls	r0, r3
   1ab1e:	4770      	bx	lr
   1ab20:	200080fc 	.word	0x200080fc
   1ab24:	aaaaaaab 	.word	0xaaaaaaab

0001ab28 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   1ab28:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ab2a:	4b09      	ldr	r3, [pc, #36]	; (1ab50 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ab2c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ab2e:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
   1ab32:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ab34:	699b      	ldr	r3, [r3, #24]
   1ab36:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1ab38:	6823      	ldr	r3, [r4, #0]
   1ab3a:	429a      	cmp	r2, r3
   1ab3c:	bf94      	ite	ls
   1ab3e:	600a      	strls	r2, [r1, #0]
   1ab40:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1ab42:	f7ff ffe3 	bl	1ab0c <net_buf_id>
   1ab46:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1ab4a:	fb02 3000 	mla	r0, r2, r0, r3
   1ab4e:	bd10      	pop	{r4, pc}
   1ab50:	200080fc 	.word	0x200080fc

0001ab54 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   1ab54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ab58:	4605      	mov	r5, r0
   1ab5a:	9101      	str	r1, [sp, #4]
   1ab5c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1ab5e:	f008 fa6d 	bl	2303c <z_impl_k_uptime_get_32>
   1ab62:	4607      	mov	r7, r0
	__asm__ volatile(
   1ab64:	f04f 0320 	mov.w	r3, #32
   1ab68:	f3ef 8811 	mrs	r8, BASEPRI
   1ab6c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ab70:	8a6b      	ldrh	r3, [r5, #18]
   1ab72:	2b00      	cmp	r3, #0
   1ab74:	d041      	beq.n	1abfa <net_buf_alloc_len+0xa6>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ab76:	8a2a      	ldrh	r2, [r5, #16]
   1ab78:	429a      	cmp	r2, r3
   1ab7a:	d92c      	bls.n	1abd6 <net_buf_alloc_len+0x82>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1ab7c:	2100      	movs	r1, #0
   1ab7e:	4628      	mov	r0, r5
   1ab80:	f008 f828 	bl	22bd4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ab84:	4604      	mov	r4, r0
   1ab86:	b330      	cbz	r0, 1abd6 <net_buf_alloc_len+0x82>
	__asm__ volatile(
   1ab88:	f388 8811 	msr	BASEPRI, r8
   1ab8c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ab90:	9b01      	ldr	r3, [sp, #4]
   1ab92:	2b00      	cmp	r3, #0
   1ab94:	d040      	beq.n	1ac18 <net_buf_alloc_len+0xc4>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   1ab96:	1c73      	adds	r3, r6, #1
   1ab98:	2b01      	cmp	r3, #1
   1ab9a:	d906      	bls.n	1abaa <net_buf_alloc_len+0x56>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1ab9c:	f008 fa4e 	bl	2303c <z_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   1aba0:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
   1aba2:	42b0      	cmp	r0, r6
   1aba4:	bf94      	ite	ls
   1aba6:	1a36      	subls	r6, r6, r0
   1aba8:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1abaa:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1abac:	4f20      	ldr	r7, [pc, #128]	; (1ac30 <net_buf_alloc_len+0xdc>)
   1abae:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   1abb2:	4632      	mov	r2, r6
   1abb4:	699b      	ldr	r3, [r3, #24]
   1abb6:	681b      	ldr	r3, [r3, #0]
   1abb8:	a901      	add	r1, sp, #4
   1abba:	681b      	ldr	r3, [r3, #0]
   1abbc:	4620      	mov	r0, r4
   1abbe:	4798      	blx	r3
   1abc0:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1abc2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1abc4:	bb48      	cbnz	r0, 1ac1a <net_buf_alloc_len+0xc6>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1abc6:	79a0      	ldrb	r0, [r4, #6]
   1abc8:	4621      	mov	r1, r4
   1abca:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1abce:	f007 ffdf 	bl	22b90 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1abd2:	462c      	mov	r4, r5
   1abd4:	e01c      	b.n	1ac10 <net_buf_alloc_len+0xbc>
		uninit_count = pool->uninit_count--;
   1abd6:	8a6b      	ldrh	r3, [r5, #18]
   1abd8:	1e5a      	subs	r2, r3, #1
   1abda:	826a      	strh	r2, [r5, #18]
   1abdc:	f388 8811 	msr	BASEPRI, r8
   1abe0:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1abe4:	8a2c      	ldrh	r4, [r5, #16]
   1abe6:	1ae4      	subs	r4, r4, r3
   1abe8:	69eb      	ldr	r3, [r5, #28]
   1abea:	2218      	movs	r2, #24
   1abec:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1abf0:	4b0f      	ldr	r3, [pc, #60]	; (1ac30 <net_buf_alloc_len+0xdc>)
   1abf2:	1aed      	subs	r5, r5, r3
   1abf4:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   1abf6:	71a5      	strb	r5, [r4, #6]
		goto success;
   1abf8:	e7ca      	b.n	1ab90 <net_buf_alloc_len+0x3c>
   1abfa:	f388 8811 	msr	BASEPRI, r8
   1abfe:	f3bf 8f6f 	isb	sy
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1ac02:	4631      	mov	r1, r6
   1ac04:	4628      	mov	r0, r5
   1ac06:	f007 ffe5 	bl	22bd4 <z_impl_k_queue_get>
	if (!buf) {
   1ac0a:	4604      	mov	r4, r0
   1ac0c:	2800      	cmp	r0, #0
   1ac0e:	d1bf      	bne.n	1ab90 <net_buf_alloc_len+0x3c>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1ac10:	4620      	mov	r0, r4
   1ac12:	b002      	add	sp, #8
   1ac14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   1ac18:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1ac1a:	2300      	movs	r3, #0
	buf->ref   = 1;
   1ac1c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ac1e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1;
   1ac20:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0;
   1ac22:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1ac24:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1ac26:	6923      	ldr	r3, [r4, #16]
   1ac28:	81e2      	strh	r2, [r4, #14]
   1ac2a:	60a3      	str	r3, [r4, #8]
	return buf;
   1ac2c:	e7f0      	b.n	1ac10 <net_buf_alloc_len+0xbc>
   1ac2e:	bf00      	nop
   1ac30:	200080fc 	.word	0x200080fc

0001ac34 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac36:	4d15      	ldr	r5, [pc, #84]	; (1ac8c <net_buf_unref+0x58>)
   1ac38:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1ac3a:	2600      	movs	r6, #0
	while (buf) {
   1ac3c:	b904      	cbnz	r4, 1ac40 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1ac3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   1ac40:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1ac42:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   1ac44:	3b01      	subs	r3, #1
   1ac46:	b2db      	uxtb	r3, r3
   1ac48:	7123      	strb	r3, [r4, #4]
   1ac4a:	2b00      	cmp	r3, #0
   1ac4c:	d1f7      	bne.n	1ac3e <net_buf_unref+0xa>
		if (buf->__buf) {
   1ac4e:	6921      	ldr	r1, [r4, #16]
   1ac50:	b159      	cbz	r1, 1ac6a <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ac52:	7963      	ldrb	r3, [r4, #5]
   1ac54:	079b      	lsls	r3, r3, #30
   1ac56:	d407      	bmi.n	1ac68 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
   1ac58:	79a3      	ldrb	r3, [r4, #6]
   1ac5a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1ac5e:	4620      	mov	r0, r4
   1ac60:	699b      	ldr	r3, [r3, #24]
   1ac62:	681b      	ldr	r3, [r3, #0]
   1ac64:	689b      	ldr	r3, [r3, #8]
   1ac66:	4798      	blx	r3
			buf->__buf = NULL;
   1ac68:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1ac6a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1ac6c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1ac6e:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   1ac72:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1ac74:	695b      	ldr	r3, [r3, #20]
   1ac76:	b11b      	cbz	r3, 1ac80 <net_buf_unref+0x4c>
			pool->destroy(buf);
   1ac78:	4620      	mov	r0, r4
   1ac7a:	4798      	blx	r3
{
   1ac7c:	463c      	mov	r4, r7
   1ac7e:	e7dd      	b.n	1ac3c <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   1ac80:	4621      	mov	r1, r4
   1ac82:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1ac86:	f007 ff83 	bl	22b90 <k_queue_prepend>
   1ac8a:	e7f7      	b.n	1ac7c <net_buf_unref+0x48>
   1ac8c:	200080fc 	.word	0x200080fc

0001ac90 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   1ac90:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1ac92:	4b09      	ldr	r3, [pc, #36]	; (1acb8 <gpio_nrfx_init+0x28>)
   1ac94:	781a      	ldrb	r2, [r3, #0]
   1ac96:	b96a      	cbnz	r2, 1acb4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1ac98:	2101      	movs	r1, #1
   1ac9a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
   1ac9c:	2006      	movs	r0, #6
   1ac9e:	2105      	movs	r1, #5
   1aca0:	f7ea fc58 	bl	5554 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
   1aca4:	2006      	movs	r0, #6
   1aca6:	f7ea fc23 	bl	54f0 <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
   1acaa:	4b04      	ldr	r3, [pc, #16]	; (1acbc <gpio_nrfx_init+0x2c>)
   1acac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1acb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1acb4:	2000      	movs	r0, #0
   1acb6:	bd08      	pop	{r3, pc}
   1acb8:	2000233f 	.word	0x2000233f
   1acbc:	40006000 	.word	0x40006000

0001acc0 <gpiote_event_handler>:
{
   1acc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   1acc4:	4f4b      	ldr	r7, [pc, #300]	; (1adf4 <gpiote_event_handler+0x134>)
   1acc6:	683d      	ldr	r5, [r7, #0]
	if (port_event) {
   1acc8:	2d01      	cmp	r5, #1
   1acca:	d166      	bne.n	1ad9a <gpiote_event_handler+0xda>
	struct gpio_nrfx_data *data = get_port_data(port);
   1accc:	4a4a      	ldr	r2, [pc, #296]	; (1adf8 <gpiote_event_handler+0x138>)
   1acce:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   1acd0:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   1acd2:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   1acd4:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   1acd8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
   1acdc:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
   1acde:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1ace2:	4301      	orrs	r1, r0
   1ace4:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1ace8:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   1acec:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   1acee:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
   1acf2:	405c      	eors	r4, r3
   1acf4:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
   1acf6:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
   1acfa:	462e      	mov	r6, r5
	u32_t pin = 0;
   1acfc:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
   1ad00:	2a00      	cmp	r2, #0
   1ad02:	d139      	bne.n	1ad78 <gpiote_event_handler+0xb8>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1ad04:	603a      	str	r2, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1ad06:	683b      	ldr	r3, [r7, #0]
   1ad08:	9300      	str	r3, [sp, #0]
    (void)dummy;
   1ad0a:	9b00      	ldr	r3, [sp, #0]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   1ad0c:	4e3b      	ldr	r6, [pc, #236]	; (1adfc <gpiote_event_handler+0x13c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1ad0e:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   1ad10:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1ad12:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
   1ad14:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   1ad18:	fa07 f103 	lsl.w	r1, r7, r3
   1ad1c:	4211      	tst	r1, r2
   1ad1e:	d014      	beq.n	1ad4a <gpiote_event_handler+0x8a>
    return ((uint32_t)NRF_GPIOTE + event);
   1ad20:	009a      	lsls	r2, r3, #2
   1ad22:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ad26:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   1ad2a:	6811      	ldr	r1, [r2, #0]
   1ad2c:	2901      	cmp	r1, #1
   1ad2e:	d10c      	bne.n	1ad4a <gpiote_event_handler+0x8a>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ad30:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1ad34:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1ad38:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1ad3c:	6812      	ldr	r2, [r2, #0]
   1ad3e:	9201      	str	r2, [sp, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ad40:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32] |= BIT(abs_pin % 32);
   1ad44:	4081      	lsls	r1, r0
    (void)dummy;
   1ad46:	9a01      	ldr	r2, [sp, #4]
   1ad48:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1ad4a:	3301      	adds	r3, #1
   1ad4c:	2b08      	cmp	r3, #8
   1ad4e:	d1e1      	bne.n	1ad14 <gpiote_event_handler+0x54>
	if (fired_triggers[0]) {
   1ad50:	bb2c      	cbnz	r4, 1ad9e <gpiote_event_handler+0xde>
	if (port_event) {
   1ad52:	2d01      	cmp	r5, #1
   1ad54:	d10d      	bne.n	1ad72 <gpiote_event_handler+0xb2>
	const struct gpio_nrfx_data *data = get_port_data(port);
   1ad56:	4b28      	ldr	r3, [pc, #160]	; (1adf8 <gpiote_event_handler+0x138>)
   1ad58:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
   1ad5a:	681b      	ldr	r3, [r3, #0]
   1ad5c:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   1ad5e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1ad62:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
   1ad64:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
   1ad68:	430b      	orrs	r3, r1
   1ad6a:	ea22 0203 	bic.w	r2, r2, r3
	u32_t pin = 0;
   1ad6e:	2700      	movs	r7, #0
	while (level_pins) {
   1ad70:	bb3a      	cbnz	r2, 1adc2 <gpiote_event_handler+0x102>
}
   1ad72:	b003      	add	sp, #12
   1ad74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   1ad78:	4232      	tst	r2, r6
   1ad7a:	d00a      	beq.n	1ad92 <gpiote_event_handler+0xd2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ad7c:	f898 3004 	ldrb.w	r3, [r8, #4]
   1ad80:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1ad84:	2100      	movs	r1, #0
   1ad86:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1ad8a:	f007 fcab 	bl	226e4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1ad8e:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   1ad92:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1ad96:	0076      	lsls	r6, r6, #1
   1ad98:	e7b2      	b.n	1ad00 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1ad9a:	2400      	movs	r4, #0
   1ad9c:	e7b6      	b.n	1ad0c <gpiote_event_handler+0x4c>
	_gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
   1ad9e:	4f16      	ldr	r7, [pc, #88]	; (1adf8 <gpiote_event_handler+0x138>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ada0:	68bb      	ldr	r3, [r7, #8]
   1ada2:	6819      	ldr	r1, [r3, #0]
   1ada4:	2900      	cmp	r1, #0
   1ada6:	d0d4      	beq.n	1ad52 <gpiote_event_handler+0x92>
   1ada8:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
   1adaa:	688b      	ldr	r3, [r1, #8]
   1adac:	421c      	tst	r4, r3
   1adae:	d003      	beq.n	1adb8 <gpiote_event_handler+0xf8>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   1adb0:	684b      	ldr	r3, [r1, #4]
   1adb2:	4622      	mov	r2, r4
   1adb4:	4638      	mov	r0, r7
   1adb6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1adb8:	2e00      	cmp	r6, #0
   1adba:	d0ca      	beq.n	1ad52 <gpiote_event_handler+0x92>
   1adbc:	4631      	mov	r1, r6
   1adbe:	6836      	ldr	r6, [r6, #0]
   1adc0:	e7f3      	b.n	1adaa <gpiote_event_handler+0xea>
		if (level_pins & bit) {
   1adc2:	4215      	tst	r5, r2
   1adc4:	d012      	beq.n	1adec <gpiote_event_handler+0x12c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1adc6:	69e1      	ldr	r1, [r4, #28]
   1adc8:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1adca:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1adce:	404b      	eors	r3, r1
   1add0:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   1add2:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1add6:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1adda:	bf0c      	ite	eq
   1addc:	2103      	moveq	r1, #3
   1adde:	2102      	movne	r1, #2
   1ade0:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   1ade4:	f007 fc7e 	bl	226e4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1ade8:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   1adec:	3701      	adds	r7, #1
		bit <<= 1;
   1adee:	006d      	lsls	r5, r5, #1
   1adf0:	e7be      	b.n	1ad70 <gpiote_event_handler+0xb0>
   1adf2:	bf00      	nop
   1adf4:	4000617c 	.word	0x4000617c
   1adf8:	20008054 	.word	0x20008054
   1adfc:	40006000 	.word	0x40006000

0001ae00 <gpiote_pin_int_cfg>:
{
   1ae00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
   1ae02:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   1ae04:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ae06:	689b      	ldr	r3, [r3, #8]
   1ae08:	f001 041f 	and.w	r4, r1, #31
{
   1ae0c:	460d      	mov	r5, r1
    return (NRF_GPIOTE->INTENSET & mask);
   1ae0e:	494e      	ldr	r1, [pc, #312]	; (1af48 <gpiote_pin_int_cfg+0x148>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ae10:	791b      	ldrb	r3, [r3, #4]
   1ae12:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   1ae16:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
   1ae1a:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1ae1c:	2300      	movs	r3, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ae1e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1ae22:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   1ae26:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   1ae2a:	4284      	cmp	r4, r0
   1ae2c:	d170      	bne.n	1af10 <gpiote_pin_int_cfg+0x110>
		    && (intenset & BIT(i))) {
   1ae2e:	fa22 f003 	lsr.w	r0, r2, r3
   1ae32:	07c0      	lsls	r0, r0, #31
   1ae34:	d56c      	bpl.n	1af10 <gpiote_pin_int_cfg+0x110>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1ae36:	009a      	lsls	r2, r3, #2
   1ae38:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ae3c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   1ae40:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ae44:	f020 0001 	bic.w	r0, r0, #1
   1ae48:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   1ae4c:	2201      	movs	r2, #1
   1ae4e:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   1ae52:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1ae56:	4620      	mov	r0, r4
   1ae58:	2100      	movs	r1, #0
   1ae5a:	f007 fc43 	bl	226e4 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   1ae5e:	68b0      	ldr	r0, [r6, #8]
   1ae60:	40e8      	lsrs	r0, r5
   1ae62:	f010 0001 	ands.w	r0, r0, #1
   1ae66:	d051      	beq.n	1af0c <gpiote_pin_int_cfg+0x10c>
   1ae68:	68f0      	ldr	r0, [r6, #12]
   1ae6a:	40e8      	lsrs	r0, r5
   1ae6c:	f010 0001 	ands.w	r0, r0, #1
   1ae70:	d04c      	beq.n	1af0c <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   1ae72:	6970      	ldr	r0, [r6, #20]
   1ae74:	40e8      	lsrs	r0, r5
   1ae76:	f010 0201 	ands.w	r2, r0, #1
   1ae7a:	d055      	beq.n	1af28 <gpiote_pin_int_cfg+0x128>
			if (data->double_edge & BIT(pin)) {
   1ae7c:	69b3      	ldr	r3, [r6, #24]
   1ae7e:	40eb      	lsrs	r3, r5
   1ae80:	07db      	lsls	r3, r3, #31
   1ae82:	d449      	bmi.n	1af18 <gpiote_pin_int_cfg+0x118>
			} else if (((data->active_level & BIT(pin)) != 0)
   1ae84:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1ae86:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0)
   1ae88:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   1ae8a:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0)
   1ae8e:	f003 0301 	and.w	r3, r3, #1
   1ae92:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1ae96:	42ab      	cmp	r3, r5
   1ae98:	bf14      	ite	ne
   1ae9a:	2501      	movne	r5, #1
   1ae9c:	2502      	moveq	r5, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   1ae9e:	4e2a      	ldr	r6, [pc, #168]	; (1af48 <gpiote_pin_int_cfg+0x148>)
   1aea0:	2100      	movs	r1, #0
   1aea2:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   1aea6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   1aeaa:	f010 0003 	ands.w	r0, r0, #3
   1aeae:	d135      	bne.n	1af1c <gpiote_pin_int_cfg+0x11c>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1aeb0:	008b      	lsls	r3, r1, #2
   1aeb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1aeb6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aeba:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1aebc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1aec0:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1aec4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1aec8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aecc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1aed0:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1aed4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1aed8:	4315      	orrs	r5, r2
			nrf_gpiote_events_t evt =
   1aeda:	f101 0240 	add.w	r2, r1, #64	; 0x40
   1aede:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
   1aee0:	b292      	uxth	r2, r2
   1aee2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1aee6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1aeea:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   1aeee:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   1aef0:	6812      	ldr	r2, [r2, #0]
   1aef2:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1aef4:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1aef6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1aefa:	f042 0201 	orr.w	r2, r2, #1
   1aefe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   1af02:	2301      	movs	r3, #1
   1af04:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
   1af08:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   1af0c:	b002      	add	sp, #8
   1af0e:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1af10:	3301      	adds	r3, #1
   1af12:	2b08      	cmp	r3, #8
   1af14:	d183      	bne.n	1ae1e <gpiote_pin_int_cfg+0x1e>
   1af16:	e79e      	b.n	1ae56 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1af18:	2503      	movs	r5, #3
   1af1a:	e7c0      	b.n	1ae9e <gpiote_pin_int_cfg+0x9e>
   1af1c:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1af1e:	2908      	cmp	r1, #8
   1af20:	d1bf      	bne.n	1aea2 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   1af22:	f06f 0012 	mvn.w	r0, #18
   1af26:	e7f1      	b.n	1af0c <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   1af28:	69f1      	ldr	r1, [r6, #28]
   1af2a:	6933      	ldr	r3, [r6, #16]
   1af2c:	404b      	eors	r3, r1
   1af2e:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   1af32:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1af36:	4620      	mov	r0, r4
   1af38:	bf0c      	ite	eq
   1af3a:	2103      	moveq	r1, #3
   1af3c:	2102      	movne	r1, #2
   1af3e:	f007 fbd1 	bl	226e4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1af42:	4610      	mov	r0, r2
   1af44:	e7e2      	b.n	1af0c <gpiote_pin_int_cfg+0x10c>
   1af46:	bf00      	nop
   1af48:	40006000 	.word	0x40006000

0001af4c <nvmc_wait_ready>:
	while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   1af4c:	4a02      	ldr	r2, [pc, #8]	; (1af58 <nvmc_wait_ready+0xc>)
   1af4e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1af52:	2b00      	cmp	r3, #0
   1af54:	d0fb      	beq.n	1af4e <nvmc_wait_ready+0x2>
}
   1af56:	4770      	bx	lr
   1af58:	4001e000 	.word	0x4001e000

0001af5c <flash_nrf_pages_layout>:
	*layout = &dev_layout;
   1af5c:	4b02      	ldr	r3, [pc, #8]	; (1af68 <flash_nrf_pages_layout+0xc>)
   1af5e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1af60:	2301      	movs	r3, #1
   1af62:	6013      	str	r3, [r2, #0]
}
   1af64:	4770      	bx	lr
   1af66:	bf00      	nop
   1af68:	20001ad4 	.word	0x20001ad4

0001af6c <nrf_flash_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1af6c:	2201      	movs	r2, #1
{
   1af6e:	b508      	push	{r3, lr}
   1af70:	4611      	mov	r1, r2
   1af72:	4808      	ldr	r0, [pc, #32]	; (1af94 <nrf_flash_init+0x28>)
   1af74:	f007 ff6d 	bl	22e52 <z_impl_k_sem_init>
   1af78:	2201      	movs	r2, #1
   1af7a:	2100      	movs	r1, #0
   1af7c:	4806      	ldr	r0, [pc, #24]	; (1af98 <nrf_flash_init+0x2c>)
   1af7e:	f007 ff68 	bl	22e52 <z_impl_k_sem_init>
	dev_layout.pages_count = NRF_FICR->CODESIZE;
   1af82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1af86:	4b05      	ldr	r3, [pc, #20]	; (1af9c <nrf_flash_init+0x30>)
   1af88:	6951      	ldr	r1, [r2, #20]
   1af8a:	6019      	str	r1, [r3, #0]
	dev_layout.pages_size = NRF_FICR->CODEPAGESIZE;
   1af8c:	6912      	ldr	r2, [r2, #16]
   1af8e:	605a      	str	r2, [r3, #4]
}
   1af90:	2000      	movs	r0, #0
   1af92:	bd08      	pop	{r3, pc}
   1af94:	20001adc 	.word	0x20001adc
   1af98:	20001af4 	.word	0x20001af4
   1af9c:	20001ad4 	.word	0x20001ad4

0001afa0 <time_slot_callback_helper>:
{
   1afa0:	b570      	push	{r4, r5, r6, lr}
   1afa2:	b08c      	sub	sp, #48	; 0x30
   1afa4:	461d      	mov	r5, r3
   1afa6:	4606      	mov	r6, r0
	ll_radio_state_abort();
   1afa8:	f007 f86a 	bl	22080 <ll_radio_state_abort>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1afac:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   1afb0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1afb4:	f007 f955 	bl	22262 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   1afb8:	4b13      	ldr	r3, [pc, #76]	; (1b008 <time_slot_callback_helper+0x68>)
   1afba:	9506      	str	r5, [sp, #24]
   1afbc:	2400      	movs	r4, #0
   1afbe:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1afc2:	2310      	movs	r3, #16
   1afc4:	9300      	str	r3, [sp, #0]
   1afc6:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1afca:	4633      	mov	r3, r6
   1afcc:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1afd0:	9401      	str	r4, [sp, #4]
   1afd2:	4622      	mov	r2, r4
   1afd4:	4621      	mov	r1, r4
   1afd6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1afda:	f7fb fb1f 	bl	1661c <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1afde:	f030 0302 	bics.w	r3, r0, #2
   1afe2:	d00e      	beq.n	1b002 <time_slot_callback_helper+0x62>
		((struct flash_op_desc *)context)->result = -ECANCELED;
   1afe4:	f06f 0347 	mvn.w	r3, #71	; 0x47
   1afe8:	60ab      	str	r3, [r5, #8]
		err = ticker_stop(instance_index, 0, ticker_id, NULL, NULL);
   1afea:	9400      	str	r4, [sp, #0]
   1afec:	4623      	mov	r3, r4
   1afee:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1aff2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1aff6:	4621      	mov	r1, r4
   1aff8:	f7fb fba2 	bl	16740 <ticker_stop>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1affc:	4803      	ldr	r0, [pc, #12]	; (1b00c <time_slot_callback_helper+0x6c>)
   1affe:	f001 f933 	bl	1c268 <z_impl_k_sem_give>
}
   1b002:	b00c      	add	sp, #48	; 0x30
   1b004:	bd70      	pop	{r4, r5, r6, pc}
   1b006:	bf00      	nop
   1b008:	0001b011 	.word	0x0001b011
   1b00c:	20001af4 	.word	0x20001af4

0001b010 <time_slot_callback_work>:
{
   1b010:	b530      	push	{r4, r5, lr}
   1b012:	461d      	mov	r5, r3
   1b014:	b085      	sub	sp, #20
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1b016:	e9d3 3000 	ldrd	r3, r0, [r3]
   1b01a:	4798      	blx	r3
   1b01c:	4604      	mov	r4, r0
   1b01e:	b990      	cbnz	r0, 1b046 <time_slot_callback_work+0x36>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1b020:	f10d 010f 	add.w	r1, sp, #15
   1b024:	f10d 000e 	add.w	r0, sp, #14
   1b028:	f007 f91b 	bl	22262 <ll_timeslice_ticker_id_get>
		result = ticker_stop(instance_index,
   1b02c:	9400      	str	r4, [sp, #0]
   1b02e:	4623      	mov	r3, r4
   1b030:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1b034:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1b038:	4621      	mov	r1, r4
   1b03a:	f7fb fb81 	bl	16740 <ticker_stop>
		((struct flash_op_desc *)context)->result = 0;
   1b03e:	60ac      	str	r4, [r5, #8]
   1b040:	4802      	ldr	r0, [pc, #8]	; (1b04c <time_slot_callback_work+0x3c>)
   1b042:	f001 f911 	bl	1c268 <z_impl_k_sem_give>
}
   1b046:	b005      	add	sp, #20
   1b048:	bd30      	pop	{r4, r5, pc}
   1b04a:	bf00      	nop
   1b04c:	20001af4 	.word	0x20001af4

0001b050 <flash_nrf_erase>:
{
   1b050:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
   1b052:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   1b056:	460e      	mov	r6, r1
   1b058:	b08b      	sub	sp, #44	; 0x2c
	if (is_regular_addr_valid(addr, size)) {
   1b05a:	4611      	mov	r1, r2
   1b05c:	4630      	mov	r0, r6
{
   1b05e:	4615      	mov	r5, r2
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
   1b060:	691f      	ldr	r7, [r3, #16]
	if (is_regular_addr_valid(addr, size)) {
   1b062:	f007 fc83 	bl	2296c <is_regular_addr_valid>
   1b066:	2800      	cmp	r0, #0
   1b068:	d03a      	beq.n	1b0e0 <flash_nrf_erase+0x90>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1b06a:	fbb6 f3f7 	udiv	r3, r6, r7
   1b06e:	fb07 6313 	mls	r3, r7, r3, r6
   1b072:	bbab      	cbnz	r3, 1b0e0 <flash_nrf_erase+0x90>
   1b074:	fbb5 f4f7 	udiv	r4, r5, r7
   1b078:	fb07 5414 	mls	r4, r7, r4, r5
   1b07c:	bb84      	cbnz	r4, 1b0e0 <flash_nrf_erase+0x90>
		if (!n_pages) {
   1b07e:	42af      	cmp	r7, r5
   1b080:	d822      	bhi.n	1b0c8 <flash_nrf_erase+0x78>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1b082:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b086:	4818      	ldr	r0, [pc, #96]	; (1b0e8 <flash_nrf_erase+0x98>)
   1b088:	f001 f918 	bl	1c2bc <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1b08c:	4620      	mov	r0, r4
   1b08e:	f7fb faa7 	bl	165e0 <ticker_is_initialized>
   1b092:	ab04      	add	r3, sp, #16
   1b094:	4601      	mov	r1, r0
   1b096:	b1d0      	cbz	r0, 1b0ce <flash_nrf_erase+0x7e>
	struct flash_context context = {
   1b098:	2210      	movs	r2, #16
   1b09a:	4621      	mov	r1, r4
   1b09c:	4618      	mov	r0, r3
   1b09e:	f004 fadd 	bl	1f65c <memset>
   1b0a2:	2201      	movs	r2, #1
   1b0a4:	f88d 201c 	strb.w	r2, [sp, #28]
   1b0a8:	4a10      	ldr	r2, [pc, #64]	; (1b0ec <flash_nrf_erase+0x9c>)
	struct flash_op_desc flash_op_desc = {
   1b0aa:	9403      	str	r4, [sp, #12]
	struct flash_context context = {
   1b0ac:	e9cd 2208 	strd	r2, r2, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   1b0b0:	4a0f      	ldr	r2, [pc, #60]	; (1b0f0 <flash_nrf_erase+0xa0>)
   1b0b2:	e9cd 2001 	strd	r2, r0, [sp, #4]
	return work_in_time_slice(&flash_op_desc);
   1b0b6:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1b0b8:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return work_in_time_slice(&flash_op_desc);
   1b0bc:	f7e7 fd2c 	bl	2b18 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return	erase_op(&context);
   1b0c0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1b0c2:	4809      	ldr	r0, [pc, #36]	; (1b0e8 <flash_nrf_erase+0x98>)
   1b0c4:	f001 f8d0 	bl	1c268 <z_impl_k_sem_give>
}
   1b0c8:	4620      	mov	r0, r4
   1b0ca:	b00b      	add	sp, #44	; 0x2c
   1b0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1b0ce:	2218      	movs	r2, #24
   1b0d0:	4618      	mov	r0, r3
   1b0d2:	f004 fac3 	bl	1f65c <memset>
   1b0d6:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return	erase_op(&context);
   1b0da:	f7e7 fcc9 	bl	2a70 <erase_op>
   1b0de:	e7ef      	b.n	1b0c0 <flash_nrf_erase+0x70>
		return -EINVAL;
   1b0e0:	f06f 0415 	mvn.w	r4, #21
   1b0e4:	e7f0      	b.n	1b0c8 <flash_nrf_erase+0x78>
   1b0e6:	bf00      	nop
   1b0e8:	20001adc 	.word	0x20001adc
   1b0ec:	00015e64 	.word	0x00015e64
   1b0f0:	00002a71 	.word	0x00002a71

0001b0f4 <flash_nrf_write_protection>:
{
   1b0f4:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1b0f6:	480a      	ldr	r0, [pc, #40]	; (1b120 <flash_nrf_write_protection+0x2c>)
   1b0f8:	460c      	mov	r4, r1
   1b0fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b0fe:	f001 f8dd 	bl	1c2bc <z_impl_k_sem_take>
	if (enable) {
   1b102:	4b08      	ldr	r3, [pc, #32]	; (1b124 <flash_nrf_write_protection+0x30>)
   1b104:	b14c      	cbz	r4, 1b11a <flash_nrf_write_protection+0x26>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1b106:	2200      	movs	r2, #0
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1b108:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nvmc_wait_ready();
   1b10c:	f7ff ff1e 	bl	1af4c <nvmc_wait_ready>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1b110:	4803      	ldr	r0, [pc, #12]	; (1b120 <flash_nrf_write_protection+0x2c>)
   1b112:	f001 f8a9 	bl	1c268 <z_impl_k_sem_give>
}
   1b116:	2000      	movs	r0, #0
   1b118:	bd10      	pop	{r4, pc}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1b11a:	2201      	movs	r2, #1
   1b11c:	e7f4      	b.n	1b108 <flash_nrf_write_protection+0x14>
   1b11e:	bf00      	nop
   1b120:	20001adc 	.word	0x20001adc
   1b124:	4001e000 	.word	0x4001e000

0001b128 <flash_nrf_write>:
{
   1b128:	b570      	push	{r4, r5, r6, lr}
   1b12a:	460d      	mov	r5, r1
   1b12c:	b08a      	sub	sp, #40	; 0x28
	return is_regular_addr_valid(addr, len) ||
   1b12e:	4619      	mov	r1, r3
   1b130:	4628      	mov	r0, r5
{
   1b132:	4616      	mov	r6, r2
   1b134:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   1b136:	f007 fc19 	bl	2296c <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   1b13a:	b368      	cbz	r0, 1b198 <flash_nrf_write+0x70>
	if (!len) {
   1b13c:	b304      	cbz	r4, 1b180 <flash_nrf_write+0x58>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1b13e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b142:	4817      	ldr	r0, [pc, #92]	; (1b1a0 <flash_nrf_write+0x78>)
   1b144:	f001 f8ba 	bl	1c2bc <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1b148:	2000      	movs	r0, #0
   1b14a:	f7fb fa49 	bl	165e0 <ticker_is_initialized>
   1b14e:	4603      	mov	r3, r0
   1b150:	a804      	add	r0, sp, #16
   1b152:	b1c3      	cbz	r3, 1b186 <flash_nrf_write+0x5e>
	struct flash_context context = {
   1b154:	2301      	movs	r3, #1
   1b156:	f88d 301c 	strb.w	r3, [sp, #28]
   1b15a:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1b15e:	e9cd 3308 	strd	r3, r3, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   1b162:	2300      	movs	r3, #0
   1b164:	9303      	str	r3, [sp, #12]
   1b166:	4b0f      	ldr	r3, [pc, #60]	; (1b1a4 <flash_nrf_write+0x7c>)
	struct flash_context context = {
   1b168:	9406      	str	r4, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   1b16a:	e9cd 3001 	strd	r3, r0, [sp, #4]
	return  work_in_time_slice(&flash_op_desc);
   1b16e:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1b170:	e9cd 6504 	strd	r6, r5, [sp, #16]
	return  work_in_time_slice(&flash_op_desc);
   1b174:	f7e7 fcd0 	bl	2b18 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
   1b178:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1b17a:	4809      	ldr	r0, [pc, #36]	; (1b1a0 <flash_nrf_write+0x78>)
   1b17c:	f001 f874 	bl	1c268 <z_impl_k_sem_give>
}
   1b180:	4620      	mov	r0, r4
   1b182:	b00a      	add	sp, #40	; 0x28
   1b184:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   1b186:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1b18a:	9309      	str	r3, [sp, #36]	; 0x24
   1b18c:	e9cd 6504 	strd	r6, r5, [sp, #16]
   1b190:	9406      	str	r4, [sp, #24]
	return write_op(&context);
   1b192:	f7e7 fd35 	bl	2c00 <write_op>
   1b196:	e7ef      	b.n	1b178 <flash_nrf_write+0x50>
		return -EINVAL;
   1b198:	f06f 0415 	mvn.w	r4, #21
   1b19c:	e7f0      	b.n	1b180 <flash_nrf_write+0x58>
   1b19e:	bf00      	nop
   1b1a0:	20001adc 	.word	0x20001adc
   1b1a4:	00002c01 	.word	0x00002c01

0001b1a8 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b1a8:	4b03      	ldr	r3, [pc, #12]	; (1b1b8 <uart_nrfx_err_check+0x10>)
   1b1aa:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   1b1ac:	b118      	cbz	r0, 1b1b6 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b1ae:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   1b1b2:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
   1b1b6:	4770      	bx	lr
   1b1b8:	40002124 	.word	0x40002124

0001b1bc <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
   1b1bc:	b530      	push	{r4, r5, lr}
	nrf_uart_parity_t parity;
	nrf_uart_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1b1be:	794b      	ldrb	r3, [r1, #5]
   1b1c0:	2b01      	cmp	r3, #1
   1b1c2:	d120      	bne.n	1b206 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1b1c4:	798b      	ldrb	r3, [r1, #6]
   1b1c6:	2b03      	cmp	r3, #3
   1b1c8:	d11d      	bne.n	1b206 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1b1ca:	79cc      	ldrb	r4, [r1, #7]
   1b1cc:	b12c      	cbz	r4, 1b1da <uart_nrfx_configure+0x1e>
   1b1ce:	2c01      	cmp	r4, #1
   1b1d0:	d119      	bne.n	1b206 <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
   1b1d2:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1b1d4:	689b      	ldr	r3, [r3, #8]
   1b1d6:	781b      	ldrb	r3, [r3, #0]
   1b1d8:	b1ab      	cbz	r3, 1b206 <uart_nrfx_configure+0x4a>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   1b1da:	790a      	ldrb	r2, [r1, #4]
   1b1dc:	b112      	cbz	r2, 1b1e4 <uart_nrfx_configure+0x28>
   1b1de:	2a02      	cmp	r2, #2
   1b1e0:	d111      	bne.n	1b206 <uart_nrfx_configure+0x4a>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UART_PARITY_INCLUDED;
   1b1e2:	220e      	movs	r2, #14
		break;
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1b1e4:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1b1e6:	f647 2512 	movw	r5, #31250	; 0x7a12
   1b1ea:	42ab      	cmp	r3, r5
   1b1ec:	d05f      	beq.n	1b2ae <uart_nrfx_configure+0xf2>
   1b1ee:	d827      	bhi.n	1b240 <uart_nrfx_configure+0x84>
   1b1f0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1b1f4:	d05e      	beq.n	1b2b4 <uart_nrfx_configure+0xf8>
   1b1f6:	d812      	bhi.n	1b21e <uart_nrfx_configure+0x62>
   1b1f8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1b1fc:	d05c      	beq.n	1b2b8 <uart_nrfx_configure+0xfc>
   1b1fe:	d805      	bhi.n	1b20c <uart_nrfx_configure+0x50>
   1b200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1b204:	d05b      	beq.n	1b2be <uart_nrfx_configure+0x102>
		return -ENOTSUP;
   1b206:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b20a:	e04f      	b.n	1b2ac <uart_nrfx_configure+0xf0>
	switch (baudrate) {
   1b20c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1b210:	d058      	beq.n	1b2c4 <uart_nrfx_configure+0x108>
   1b212:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1b216:	d1f6      	bne.n	1b206 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1b218:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1b21c:	e03b      	b.n	1b296 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1b21e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1b222:	d052      	beq.n	1b2ca <uart_nrfx_configure+0x10e>
   1b224:	d804      	bhi.n	1b230 <uart_nrfx_configure+0x74>
   1b226:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1b22a:	d1ec      	bne.n	1b206 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1b22c:	4b30      	ldr	r3, [pc, #192]	; (1b2f0 <uart_nrfx_configure+0x134>)
   1b22e:	e032      	b.n	1b296 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1b230:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1b234:	d04c      	beq.n	1b2d0 <uart_nrfx_configure+0x114>
   1b236:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1b23a:	d1e4      	bne.n	1b206 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1b23c:	4b2d      	ldr	r3, [pc, #180]	; (1b2f4 <uart_nrfx_configure+0x138>)
   1b23e:	e02a      	b.n	1b296 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1b240:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1b244:	d046      	beq.n	1b2d4 <uart_nrfx_configure+0x118>
   1b246:	d811      	bhi.n	1b26c <uart_nrfx_configure+0xb0>
   1b248:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1b24c:	42ab      	cmp	r3, r5
   1b24e:	d043      	beq.n	1b2d8 <uart_nrfx_configure+0x11c>
   1b250:	d804      	bhi.n	1b25c <uart_nrfx_configure+0xa0>
   1b252:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1b256:	d1d6      	bne.n	1b206 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1b258:	4b27      	ldr	r3, [pc, #156]	; (1b2f8 <uart_nrfx_configure+0x13c>)
   1b25a:	e01c      	b.n	1b296 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1b25c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1b260:	d03d      	beq.n	1b2de <uart_nrfx_configure+0x122>
   1b262:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1b266:	d1ce      	bne.n	1b206 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1b268:	4b24      	ldr	r3, [pc, #144]	; (1b2fc <uart_nrfx_configure+0x140>)
   1b26a:	e014      	b.n	1b296 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1b26c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1b270:	d037      	beq.n	1b2e2 <uart_nrfx_configure+0x126>
   1b272:	d808      	bhi.n	1b286 <uart_nrfx_configure+0xca>
   1b274:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1b278:	d035      	beq.n	1b2e6 <uart_nrfx_configure+0x12a>
   1b27a:	4d21      	ldr	r5, [pc, #132]	; (1b300 <uart_nrfx_configure+0x144>)
   1b27c:	42ab      	cmp	r3, r5
   1b27e:	d1c2      	bne.n	1b206 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1b280:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b284:	e007      	b.n	1b296 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1b286:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1b28a:	d02e      	beq.n	1b2ea <uart_nrfx_configure+0x12e>
   1b28c:	4d1d      	ldr	r5, [pc, #116]	; (1b304 <uart_nrfx_configure+0x148>)
   1b28e:	42ab      	cmp	r3, r5
   1b290:	d1b9      	bne.n	1b206 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1b292:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1b296:	4d1c      	ldr	r5, [pc, #112]	; (1b308 <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   1b298:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1b29a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   1b29e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
   1b2a2:	6883      	ldr	r3, [r0, #8]
   1b2a4:	c903      	ldmia	r1, {r0, r1}
   1b2a6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1b2aa:	2000      	movs	r0, #0
}
   1b2ac:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1b2ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1b2b2:	e7f0      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1b2b4:	4b15      	ldr	r3, [pc, #84]	; (1b30c <uart_nrfx_configure+0x150>)
   1b2b6:	e7ee      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
   1b2b8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1b2bc:	e7eb      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1b2be:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1b2c2:	e7e8      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1b2c4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1b2c8:	e7e5      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1b2ca:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1b2ce:	e7e2      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1b2d0:	4b0f      	ldr	r3, [pc, #60]	; (1b310 <uart_nrfx_configure+0x154>)
   1b2d2:	e7e0      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1b2d4:	4b0f      	ldr	r3, [pc, #60]	; (1b314 <uart_nrfx_configure+0x158>)
   1b2d6:	e7de      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1b2d8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1b2dc:	e7db      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1b2de:	4b0e      	ldr	r3, [pc, #56]	; (1b318 <uart_nrfx_configure+0x15c>)
   1b2e0:	e7d9      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1b2e2:	4b0e      	ldr	r3, [pc, #56]	; (1b31c <uart_nrfx_configure+0x160>)
   1b2e4:	e7d7      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1b2e6:	4b0e      	ldr	r3, [pc, #56]	; (1b320 <uart_nrfx_configure+0x164>)
   1b2e8:	e7d5      	b.n	1b296 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1b2ea:	4b0e      	ldr	r3, [pc, #56]	; (1b324 <uart_nrfx_configure+0x168>)
   1b2ec:	e7d3      	b.n	1b296 <uart_nrfx_configure+0xda>
   1b2ee:	bf00      	nop
   1b2f0:	00275000 	.word	0x00275000
   1b2f4:	0075f000 	.word	0x0075f000
   1b2f8:	009d5000 	.word	0x009d5000
   1b2fc:	013a9000 	.word	0x013a9000
   1b300:	0003d090 	.word	0x0003d090
   1b304:	000f4240 	.word	0x000f4240
   1b308:	40002000 	.word	0x40002000
   1b30c:	0013b000 	.word	0x0013b000
   1b310:	004ea000 	.word	0x004ea000
   1b314:	01d7e000 	.word	0x01d7e000
   1b318:	00ebf000 	.word	0x00ebf000
   1b31c:	075f7000 	.word	0x075f7000
   1b320:	03afb000 	.word	0x03afb000
   1b324:	0ebed000 	.word	0x0ebed000

0001b328 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b328:	4b08      	ldr	r3, [pc, #32]	; (1b34c <uart_nrfx_poll_in+0x24>)
   1b32a:	681a      	ldr	r2, [r3, #0]
{
   1b32c:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1b32e:	b152      	cbz	r2, 1b346 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b330:	2000      	movs	r0, #0
   1b332:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1b334:	681b      	ldr	r3, [r3, #0]
   1b336:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1b338:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1b33a:	4b05      	ldr	r3, [pc, #20]	; (1b350 <uart_nrfx_poll_in+0x28>)
   1b33c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1b340:	700b      	strb	r3, [r1, #0]
}
   1b342:	b002      	add	sp, #8
   1b344:	4770      	bx	lr
		return -1;
   1b346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b34a:	e7fa      	b.n	1b342 <uart_nrfx_poll_in+0x1a>
   1b34c:	40002108 	.word	0x40002108
   1b350:	40002000 	.word	0x40002000

0001b354 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b354:	4b09      	ldr	r3, [pc, #36]	; (1b37c <uart_nrfx_poll_out+0x28>)
   1b356:	2200      	movs	r2, #0
   1b358:	601a      	str	r2, [r3, #0]
{
   1b35a:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1b35c:	681a      	ldr	r2, [r3, #0]
   1b35e:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1b360:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b362:	4a07      	ldr	r2, [pc, #28]	; (1b380 <uart_nrfx_poll_out+0x2c>)
   1b364:	2001      	movs	r0, #1
   1b366:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
   1b368:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b36c:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
   1b36e:	2a00      	cmp	r2, #0
   1b370:	d0fc      	beq.n	1b36c <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b372:	4b04      	ldr	r3, [pc, #16]	; (1b384 <uart_nrfx_poll_out+0x30>)
   1b374:	2201      	movs	r2, #1
   1b376:	601a      	str	r2, [r3, #0]
}
   1b378:	b002      	add	sp, #8
   1b37a:	4770      	bx	lr
   1b37c:	4000211c 	.word	0x4000211c
   1b380:	40002008 	.word	0x40002008
   1b384:	4000200c 	.word	0x4000200c

0001b388 <uart_nrfx_init>:
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1b388:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1b38c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
   1b38e:	4c16      	ldr	r4, [pc, #88]	; (1b3e8 <uart_nrfx_init+0x60>)
   1b390:	2240      	movs	r2, #64	; 0x40
   1b392:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b396:	2103      	movs	r1, #3
   1b398:	2200      	movs	r2, #0
   1b39a:	2508      	movs	r5, #8
   1b39c:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1b3a0:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1b3a4:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   1b3a8:	2506      	movs	r5, #6
   1b3aa:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1b3ae:	2520      	movs	r5, #32
   1b3b0:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b3b4:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1b3b8:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
   1b3bc:	2305      	movs	r3, #5
   1b3be:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
   1b3c2:	2307      	movs	r3, #7
   1b3c4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1b3c8:	6881      	ldr	r1, [r0, #8]
   1b3ca:	f7ff fef7 	bl	1b1bc <uart_nrfx_configure>
	if (err) {
   1b3ce:	b948      	cbnz	r0, 1b3e4 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1b3d0:	2304      	movs	r3, #4
   1b3d2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b3d6:	4b05      	ldr	r3, [pc, #20]	; (1b3ec <uart_nrfx_init+0x64>)
   1b3d8:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1b3da:	681b      	ldr	r3, [r3, #0]
   1b3dc:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1b3de:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b3e0:	2301      	movs	r3, #1
   1b3e2:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1b3e4:	b003      	add	sp, #12
   1b3e6:	bd30      	pop	{r4, r5, pc}
   1b3e8:	40002000 	.word	0x40002000
   1b3ec:	40002108 	.word	0x40002108

0001b3f0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   1b3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
   1b3f2:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
   1b3f4:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1b3f6:	f04f 0420 	mov.w	r4, #32
   1b3fa:	f3ef 8e11 	mrs	lr, BASEPRI
   1b3fe:	f384 8811 	msr	BASEPRI, r4
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1b402:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1b404:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   1b408:	1b9b      	subs	r3, r3, r6
   1b40a:	403b      	ands	r3, r7
	if (available < len) {
   1b40c:	429a      	cmp	r2, r3
		len = available;
   1b40e:	bf88      	it	hi
   1b410:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1b412:	18b4      	adds	r4, r6, r2
   1b414:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   1b416:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1b418:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   1b41a:	f38e 8811 	msr	BASEPRI, lr
   1b41e:	f3bf 8f6f 	isb	sy
   1b422:	440a      	add	r2, r1
	u8_t *dst   = buf;
   1b424:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   1b426:	42a2      	cmp	r2, r4
   1b428:	d118      	bne.n	1b45c <rng_pool_get+0x6c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1b42a:	4566      	cmp	r6, ip
   1b42c:	d10b      	bne.n	1b446 <rng_pool_get+0x56>
	__asm__ volatile(
   1b42e:	f04f 0520 	mov.w	r5, #32
   1b432:	f3ef 8211 	mrs	r2, BASEPRI
   1b436:	f385 8811 	msr	BASEPRI, r5
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1b43a:	7805      	ldrb	r5, [r0, #0]
   1b43c:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   1b43e:	f382 8811 	msr	BASEPRI, r2
   1b442:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1b446:	1a64      	subs	r4, r4, r1
   1b448:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   1b44a:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   1b44c:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   1b44e:	42a1      	cmp	r1, r4
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   1b450:	bf22      	ittt	cs
   1b452:	4b07      	ldrcs	r3, [pc, #28]	; (1b470 <rng_pool_get+0x80>)
   1b454:	2101      	movcs	r1, #1
   1b456:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
   1b458:	4610      	mov	r0, r2
   1b45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1b45c:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   1b460:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1b462:	f89e e005 	ldrb.w	lr, [lr, #5]
   1b466:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   1b46a:	403d      	ands	r5, r7
   1b46c:	e7db      	b.n	1b426 <rng_pool_get+0x36>
   1b46e:	bf00      	nop
   1b470:	4000d000 	.word	0x4000d000

0001b474 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   1b474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1b478:	4d11      	ldr	r5, [pc, #68]	; (1b4c0 <entropy_nrf5_get_entropy+0x4c>)
   1b47a:	460e      	mov	r6, r1
   1b47c:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b47e:	f105 0845 	add.w	r8, r5, #69	; 0x45
   1b482:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   1b486:	b914      	cbnz	r4, 1b48e <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   1b488:	4620      	mov	r0, r4
   1b48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b48e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b492:	4628      	mov	r0, r5
   1b494:	f000 ff12 	bl	1c2bc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b498:	4622      	mov	r2, r4
   1b49a:	4631      	mov	r1, r6
   1b49c:	4640      	mov	r0, r8
   1b49e:	f7ff ffa7 	bl	1b3f0 <rng_pool_get>
   1b4a2:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1b4a4:	4628      	mov	r0, r5
   1b4a6:	f000 fedf 	bl	1c268 <z_impl_k_sem_give>
		if (bytes == 0) {
   1b4aa:	b92f      	cbnz	r7, 1b4b8 <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1b4ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b4b0:	4648      	mov	r0, r9
   1b4b2:	f000 ff03 	bl	1c2bc <z_impl_k_sem_take>
   1b4b6:	e7e6      	b.n	1b486 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1b4b8:	1be4      	subs	r4, r4, r7
   1b4ba:	b2a4      	uxth	r4, r4
		buf += bytes;
   1b4bc:	443e      	add	r6, r7
   1b4be:	e7e2      	b.n	1b486 <entropy_nrf5_get_entropy+0x12>
   1b4c0:	20001b0c 	.word	0x20001b0c

0001b4c4 <random_byte_get>:
{
   1b4c4:	b082      	sub	sp, #8
	__asm__ volatile(
   1b4c6:	f04f 0320 	mov.w	r3, #32
   1b4ca:	f3ef 8211 	mrs	r2, BASEPRI
   1b4ce:	f383 8811 	msr	BASEPRI, r3
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1b4d2:	4b0a      	ldr	r3, [pc, #40]	; (1b4fc <random_byte_get+0x38>)
   1b4d4:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   1b4d6:	b171      	cbz	r1, 1b4f6 <random_byte_get+0x32>
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
   1b4d8:	4909      	ldr	r1, [pc, #36]	; (1b500 <random_byte_get+0x3c>)
   1b4da:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   1b4de:	2100      	movs	r1, #0
   1b4e0:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1b4e2:	681b      	ldr	r3, [r3, #0]
   1b4e4:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1b4e6:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
   1b4e8:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1b4ea:	f382 8811 	msr	BASEPRI, r2
   1b4ee:	f3bf 8f6f 	isb	sy
}
   1b4f2:	b002      	add	sp, #8
   1b4f4:	4770      	bx	lr
	int retval = -EAGAIN;
   1b4f6:	f06f 000a 	mvn.w	r0, #10
   1b4fa:	e7f6      	b.n	1b4ea <random_byte_get+0x26>
   1b4fc:	4000d100 	.word	0x4000d100
   1b500:	4000d000 	.word	0x4000d000

0001b504 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1b504:	07db      	lsls	r3, r3, #31
{
   1b506:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b50a:	4688      	mov	r8, r1
   1b50c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1b50e:	d405      	bmi.n	1b51c <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1b510:	481e      	ldr	r0, [pc, #120]	; (1b58c <entropy_nrf5_get_entropy_isr+0x88>)
   1b512:	f7ff ff6d 	bl	1b3f0 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   1b516:	b002      	add	sp, #8
   1b518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1b51c:	b382      	cbz	r2, 1b580 <entropy_nrf5_get_entropy_isr+0x7c>
	__asm__ volatile(
   1b51e:	f04f 0320 	mov.w	r3, #32
   1b522:	f3ef 8511 	mrs	r5, BASEPRI
   1b526:	f383 8811 	msr	BASEPRI, r3
		irq_enabled = irq_is_enabled(RNG_IRQn);
   1b52a:	200d      	movs	r0, #13
   1b52c:	f7ea f804 	bl	5538 <z_arch_irq_is_enabled>
   1b530:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
   1b532:	200d      	movs	r0, #13
   1b534:	f7e9 ffec 	bl	5510 <z_arch_irq_disable>
	__asm__ volatile(
   1b538:	f385 8811 	msr	BASEPRI, r5
   1b53c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   1b540:	4e13      	ldr	r6, [pc, #76]	; (1b590 <entropy_nrf5_get_entropy_isr+0x8c>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b542:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1b598 <entropy_nrf5_get_entropy_isr+0x94>
   1b546:	2200      	movs	r2, #0
   1b548:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1b54a:	6832      	ldr	r2, [r6, #0]
   1b54c:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1b54e:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   1b550:	4a10      	ldr	r2, [pc, #64]	; (1b594 <entropy_nrf5_get_entropy_isr+0x90>)
   1b552:	2101      	movs	r1, #1
   1b554:	6011      	str	r1, [r2, #0]
   1b556:	4625      	mov	r5, r4
   1b558:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1b55c:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   1b55e:	b18b      	cbz	r3, 1b584 <entropy_nrf5_get_entropy_isr+0x80>
			byte = random_byte_get();
   1b560:	f7ff ffb0 	bl	1b4c4 <random_byte_get>
			if (byte < 0) {
   1b564:	2800      	cmp	r0, #0
   1b566:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1b56a:	dbf7      	blt.n	1b55c <entropy_nrf5_get_entropy_isr+0x58>
   1b56c:	3d01      	subs	r5, #1
   1b56e:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1b570:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   1b574:	2d00      	cmp	r5, #0
   1b576:	d1f1      	bne.n	1b55c <entropy_nrf5_get_entropy_isr+0x58>
		if (irq_enabled) {
   1b578:	b117      	cbz	r7, 1b580 <entropy_nrf5_get_entropy_isr+0x7c>
			irq_enable(RNG_IRQn);
   1b57a:	200d      	movs	r0, #13
   1b57c:	f7e9 ffb8 	bl	54f0 <z_arch_irq_enable>
	return cnt;
   1b580:	4620      	mov	r0, r4
   1b582:	e7c8      	b.n	1b516 <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
   1b584:	bf20      	wfe
				__SEV();
   1b586:	bf40      	sev
				__WFE();
   1b588:	bf20      	wfe
   1b58a:	e7e7      	b.n	1b55c <entropy_nrf5_get_entropy_isr+0x58>
   1b58c:	20001b3c 	.word	0x20001b3c
   1b590:	4000d100 	.word	0x4000d100
   1b594:	4000d000 	.word	0x4000d000
   1b598:	e000e100 	.word	0xe000e100

0001b59c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1b59c:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1b59e:	4c1b      	ldr	r4, [pc, #108]	; (1b60c <entropy_nrf5_init+0x70>)
   1b5a0:	2201      	movs	r2, #1
   1b5a2:	4611      	mov	r1, r2
   1b5a4:	4620      	mov	r0, r4
   1b5a6:	f007 fc54 	bl	22e52 <z_impl_k_sem_init>
   1b5aa:	f104 0018 	add.w	r0, r4, #24
   1b5ae:	2201      	movs	r2, #1
   1b5b0:	2100      	movs	r1, #0
   1b5b2:	f007 fc4e 	bl	22e52 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1b5b6:	f240 4307 	movw	r3, #1031	; 0x407
   1b5ba:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1b5be:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b5c2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1b5c4:	230c      	movs	r3, #12
   1b5c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1b5ca:	2500      	movs	r5, #0
}

__STATIC_INLINE void nrf_rng_error_correction_enable(void)
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1b5cc:	4b10      	ldr	r3, [pc, #64]	; (1b610 <entropy_nrf5_init+0x74>)
   1b5ce:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1b5d2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1b5d6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b5da:	f042 0201 	orr.w	r2, r2, #1
   1b5de:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   1b5e2:	4a0c      	ldr	r2, [pc, #48]	; (1b614 <entropy_nrf5_init+0x78>)
   1b5e4:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1b5e6:	6812      	ldr	r2, [r2, #0]
   1b5e8:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1b5ea:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = rng_int_mask;
   1b5ec:	2201      	movs	r2, #1
   1b5ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   1b5f2:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   1b5f4:	601a      	str	r2, [r3, #0]
   1b5f6:	200d      	movs	r0, #13
   1b5f8:	462a      	mov	r2, r5
   1b5fa:	f7e9 ffab 	bl	5554 <z_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   1b5fe:	200d      	movs	r0, #13
   1b600:	f7e9 ff76 	bl	54f0 <z_arch_irq_enable>

	return 0;
}
   1b604:	4628      	mov	r0, r5
   1b606:	b003      	add	sp, #12
   1b608:	bd30      	pop	{r4, r5, pc}
   1b60a:	bf00      	nop
   1b60c:	20001b0c 	.word	0x20001b0c
   1b610:	4000d000 	.word	0x4000d000
   1b614:	4000d100 	.word	0x4000d100

0001b618 <isr>:
{
   1b618:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1b61a:	f7ff ff53 	bl	1b4c4 <random_byte_get>
	if (byte < 0) {
   1b61e:	2800      	cmp	r0, #0
   1b620:	db20      	blt.n	1b664 <isr+0x4c>
	u8_t last  = rngp->last;
   1b622:	4b17      	ldr	r3, [pc, #92]	; (1b680 <isr+0x68>)
   1b624:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1b628:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   1b62c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1b630:	1a51      	subs	r1, r2, r1
   1b632:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1b636:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1b638:	d10d      	bne.n	1b656 <isr+0x3e>
	u8_t last  = rngp->last;
   1b63a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1b63e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   1b642:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1b646:	1a51      	subs	r1, r2, r1
   1b648:	ea34 0101 	bics.w	r1, r4, r1
   1b64c:	d10b      	bne.n	1b666 <isr+0x4e>
   1b64e:	4b0d      	ldr	r3, [pc, #52]	; (1b684 <isr+0x6c>)
   1b650:	2201      	movs	r2, #1
   1b652:	601a      	str	r2, [r3, #0]
   1b654:	e00e      	b.n	1b674 <isr+0x5c>
	rngp->buffer[last] = byte;
   1b656:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1b658:	3201      	adds	r2, #1
   1b65a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1b65c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1b660:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1b664:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1b666:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1b668:	3201      	adds	r2, #1
   1b66a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1b66c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1b670:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1b674:	4804      	ldr	r0, [pc, #16]	; (1b688 <isr+0x70>)
}
   1b676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b67a:	f000 bdf5 	b.w	1c268 <z_impl_k_sem_give>
   1b67e:	bf00      	nop
   1b680:	20001b0c 	.word	0x20001b0c
   1b684:	4000d004 	.word	0x4000d004
   1b688:	20001b24 	.word	0x20001b24

0001b68c <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   1b68c:	4b09      	ldr	r3, [pc, #36]	; (1b6b4 <z_sys_device_do_config_level+0x28>)
{
   1b68e:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
   1b690:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b694:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1b696:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1b698:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1b69c:	42a5      	cmp	r5, r4
   1b69e:	d800      	bhi.n	1b6a2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1b6a0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1b6a2:	6823      	ldr	r3, [r4, #0]
   1b6a4:	4620      	mov	r0, r4
   1b6a6:	685b      	ldr	r3, [r3, #4]
   1b6a8:	4798      	blx	r3
		if (retval != 0) {
   1b6aa:	b100      	cbz	r0, 1b6ae <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1b6ac:	6066      	str	r6, [r4, #4]
								info++) {
   1b6ae:	340c      	adds	r4, #12
   1b6b0:	e7f4      	b.n	1b69c <z_sys_device_do_config_level+0x10>
   1b6b2:	bf00      	nop
   1b6b4:	00023fb0 	.word	0x00023fb0

0001b6b8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1b6b8:	4b10      	ldr	r3, [pc, #64]	; (1b6fc <z_impl_device_get_binding+0x44>)
{
   1b6ba:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1b6bc:	4c10      	ldr	r4, [pc, #64]	; (1b700 <z_impl_device_get_binding+0x48>)
{
   1b6be:	4605      	mov	r5, r0
   1b6c0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1b6c2:	429c      	cmp	r4, r3
   1b6c4:	d104      	bne.n	1b6d0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1b6c6:	4c0e      	ldr	r4, [pc, #56]	; (1b700 <z_impl_device_get_binding+0x48>)
   1b6c8:	42b4      	cmp	r4, r6
   1b6ca:	d109      	bne.n	1b6e0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1b6cc:	2400      	movs	r4, #0
   1b6ce:	e012      	b.n	1b6f6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1b6d0:	6862      	ldr	r2, [r4, #4]
   1b6d2:	b11a      	cbz	r2, 1b6dc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1b6d4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1b6d6:	6812      	ldr	r2, [r2, #0]
   1b6d8:	42aa      	cmp	r2, r5
   1b6da:	d00c      	beq.n	1b6f6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1b6dc:	340c      	adds	r4, #12
   1b6de:	e7f0      	b.n	1b6c2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1b6e0:	6863      	ldr	r3, [r4, #4]
   1b6e2:	b90b      	cbnz	r3, 1b6e8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1b6e4:	340c      	adds	r4, #12
   1b6e6:	e7ef      	b.n	1b6c8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1b6e8:	6823      	ldr	r3, [r4, #0]
   1b6ea:	4628      	mov	r0, r5
   1b6ec:	6819      	ldr	r1, [r3, #0]
   1b6ee:	f003 ff58 	bl	1f5a2 <strcmp>
   1b6f2:	2800      	cmp	r0, #0
   1b6f4:	d1f6      	bne.n	1b6e4 <z_impl_device_get_binding+0x2c>
}
   1b6f6:	4620      	mov	r0, r4
   1b6f8:	bd70      	pop	{r4, r5, r6, pc}
   1b6fa:	bf00      	nop
   1b6fc:	20008084 	.word	0x20008084
   1b700:	20007fb8 	.word	0x20007fb8

0001b704 <z_impl_z_errno>:

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1b704:	4b01      	ldr	r3, [pc, #4]	; (1b70c <z_impl_z_errno+0x8>)
   1b706:	6898      	ldr	r0, [r3, #8]
}
   1b708:	3054      	adds	r0, #84	; 0x54
   1b70a:	4770      	bx	lr
   1b70c:	20001c38 	.word	0x20001c38

0001b710 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1b710:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1b712:	4d0a      	ldr	r5, [pc, #40]	; (1b73c <idle+0x2c>)
	__asm__ volatile(
   1b714:	f04f 0220 	mov.w	r2, #32
   1b718:	f3ef 8311 	mrs	r3, BASEPRI
   1b71c:	f382 8811 	msr	BASEPRI, r2
	s32_t ticks = z_get_next_timeout_expiry();
   1b720:	f007 fc62 	bl	22fe8 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b724:	2101      	movs	r1, #1
   1b726:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   1b728:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b72a:	bfd8      	it	le
   1b72c:	4608      	movle	r0, r1
   1b72e:	f007 fc69 	bl	23004 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1b732:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
   1b734:	f7e9 ff64 	bl	5600 <k_cpu_idle>
   1b738:	e7ec      	b.n	1b714 <idle+0x4>
   1b73a:	bf00      	nop
   1b73c:	20001c38 	.word	0x20001c38

0001b740 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(&__bss_start, 0,
   1b740:	4802      	ldr	r0, [pc, #8]	; (1b74c <z_bss_zero+0xc>)
   1b742:	4a03      	ldr	r2, [pc, #12]	; (1b750 <z_bss_zero+0x10>)
   1b744:	2100      	movs	r1, #0
   1b746:	1a12      	subs	r2, r2, r0
   1b748:	f003 bf88 	b.w	1f65c <memset>
   1b74c:	20000000 	.word	0x20000000
   1b750:	20002344 	.word	0x20002344

0001b754 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1b754:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1b756:	4806      	ldr	r0, [pc, #24]	; (1b770 <z_data_copy+0x1c>)
   1b758:	4a06      	ldr	r2, [pc, #24]	; (1b774 <z_data_copy+0x20>)
   1b75a:	4907      	ldr	r1, [pc, #28]	; (1b778 <z_data_copy+0x24>)
   1b75c:	1a12      	subs	r2, r2, r0
   1b75e:	f003 ff53 	bl	1f608 <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1b762:	4a06      	ldr	r2, [pc, #24]	; (1b77c <z_data_copy+0x28>)
   1b764:	4906      	ldr	r1, [pc, #24]	; (1b780 <z_data_copy+0x2c>)
   1b766:	4807      	ldr	r0, [pc, #28]	; (1b784 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 ((u32_t) &_app_smem_end - (u32_t) &_app_smem_start));
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1b76c:	f003 bf4c 	b.w	1f608 <memcpy>
   1b770:	200070a8 	.word	0x200070a8
   1b774:	200081bc 	.word	0x200081bc
   1b778:	00028dbe 	.word	0x00028dbe
   1b77c:	00000000 	.word	0x00000000
   1b780:	00028db8 	.word	0x00028db8
   1b784:	20000000 	.word	0x20000000

0001b788 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1b788:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b78a:	2002      	movs	r0, #2
   1b78c:	f7ff ff7e 	bl	1b68c <z_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   1b790:	4807      	ldr	r0, [pc, #28]	; (1b7b0 <bg_thread_main+0x28>)
   1b792:	f001 fd0f 	bl	1d1b4 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1b796:	2003      	movs	r0, #3
   1b798:	f7ff ff78 	bl	1b68c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1b79c:	f000 fe4c 	bl	1c438 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1b7a0:	f7e7 fca6 	bl	30f0 <main>

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   1b7a4:	4a03      	ldr	r2, [pc, #12]	; (1b7b4 <bg_thread_main+0x2c>)
   1b7a6:	7b13      	ldrb	r3, [r2, #12]
   1b7a8:	f023 0301 	bic.w	r3, r3, #1
   1b7ac:	7313      	strb	r3, [r2, #12]
}
   1b7ae:	bd08      	pop	{r3, pc}
   1b7b0:	00028d5a 	.word	0x00028d5a
   1b7b4:	20001bcc 	.word	0x20001bcc

0001b7b8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1b7b8:	b580      	push	{r7, lr}
   1b7ba:	b0a2      	sub	sp, #136	; 0x88
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
   1b7bc:	f7e8 f9c2 	bl	3b44 <log_core_init>
#if defined(CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT) && \
	defined(CONFIG_USERSPACE)
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1b7c0:	4b3c      	ldr	r3, [pc, #240]	; (1b8b4 <z_cstart+0xfc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b7c2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1b7c6:	4b3c      	ldr	r3, [pc, #240]	; (1b8b8 <z_cstart+0x100>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1b7c8:	4e3c      	ldr	r6, [pc, #240]	; (1b8bc <z_cstart+0x104>)
   1b7ca:	695a      	ldr	r2, [r3, #20]
	_kernel.ready_q.cache = _main_thread;
   1b7cc:	4d3c      	ldr	r5, [pc, #240]	; (1b8c0 <z_cstart+0x108>)
   1b7ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1b7d2:	615a      	str	r2, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b7d4:	2400      	movs	r4, #0
   1b7d6:	22e0      	movs	r2, #224	; 0xe0
   1b7d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   1b7dc:	77dc      	strb	r4, [r3, #31]
   1b7de:	761c      	strb	r4, [r3, #24]
   1b7e0:	765c      	strb	r4, [r3, #25]
   1b7e2:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b7e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1b7e6:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   1b7ea:	625a      	str	r2, [r3, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   1b7ec:	f7e9 fe78 	bl	54e0 <_FaultInit>
	_CpuIdleInit();
   1b7f0:	f7e9 ff00 	bl	55f4 <_CpuIdleInit>
	struct k_thread dummy_thread = {
   1b7f4:	ab07      	add	r3, sp, #28
   1b7f6:	4621      	mov	r1, r4
   1b7f8:	226c      	movs	r2, #108	; 0x6c
   1b7fa:	4618      	mov	r0, r3
   1b7fc:	f003 ff2e 	bl	1f65c <memset>
   1b800:	2701      	movs	r7, #1
	_current = &dummy_thread;
   1b802:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b804:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1b806:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b80a:	f7ff ff3f 	bl	1b68c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b80e:	4638      	mov	r0, r7
   1b810:	f7ff ff3c 	bl	1b68c <z_sys_device_do_config_level>
	z_sched_init();
   1b814:	f000 fc6a 	bl	1c0ec <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
   1b818:	4b2a      	ldr	r3, [pc, #168]	; (1b8c4 <z_cstart+0x10c>)
	_kernel.ready_q.cache = _main_thread;
   1b81a:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
   1b81c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b820:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1b824:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1b828:	e9cd 4400 	strd	r4, r4, [sp]
   1b82c:	4b26      	ldr	r3, [pc, #152]	; (1b8c8 <z_cstart+0x110>)
   1b82e:	4927      	ldr	r1, [pc, #156]	; (1b8cc <z_cstart+0x114>)
   1b830:	4628      	mov	r0, r5
   1b832:	f000 fdb7 	bl	1c3a4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b836:	7b6b      	ldrb	r3, [r5, #13]
   1b838:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b83c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b840:	736a      	strb	r2, [r5, #13]
	return state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   1b842:	4634      	mov	r4, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b844:	d104      	bne.n	1b850 <z_cstart+0x98>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1b846:	69ab      	ldr	r3, [r5, #24]
   1b848:	b913      	cbnz	r3, 1b850 <z_cstart+0x98>
		z_add_thread_to_ready_q(thread);
   1b84a:	4628      	mov	r0, r5
   1b84c:	f000 fac2 	bl	1bdd4 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1b850:	4b1f      	ldr	r3, [pc, #124]	; (1b8d0 <z_cstart+0x118>)
   1b852:	4e20      	ldr	r6, [pc, #128]	; (1b8d4 <z_cstart+0x11c>)
   1b854:	9305      	str	r3, [sp, #20]
   1b856:	2201      	movs	r2, #1
   1b858:	230f      	movs	r3, #15
   1b85a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1b85e:	2300      	movs	r3, #0
   1b860:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b864:	491c      	ldr	r1, [pc, #112]	; (1b8d8 <z_cstart+0x120>)
   1b866:	9300      	str	r3, [sp, #0]
   1b868:	4630      	mov	r0, r6
   1b86a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1b86e:	4b1b      	ldr	r3, [pc, #108]	; (1b8dc <z_cstart+0x124>)
   1b870:	f000 fd98 	bl	1c3a4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b874:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
   1b876:	60e6      	str	r6, [r4, #12]
   1b878:	f023 0304 	bic.w	r3, r3, #4
   1b87c:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1b87e:	4b18      	ldr	r3, [pc, #96]	; (1b8e0 <z_cstart+0x128>)
	list->tail = (sys_dnode_t *)list;
   1b880:	e9c4 3306 	strd	r3, r3, [r4, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
   1b884:	f7e9 ffa6 	bl	57d4 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
   1b888:	480d      	ldr	r0, [pc, #52]	; (1b8c0 <z_cstart+0x108>)
	_current = main_thread;
   1b88a:	60a5      	str	r5, [r4, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
   1b88c:	f003 fdd9 	bl	1f442 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1b890:	4b0d      	ldr	r3, [pc, #52]	; (1b8c8 <z_cstart+0x110>)
   1b892:	4a14      	ldr	r2, [pc, #80]	; (1b8e4 <z_cstart+0x12c>)
   1b894:	4618      	mov	r0, r3
   1b896:	f382 8809 	msr	PSP, r2
   1b89a:	b663      	cpsie	if
   1b89c:	f04f 0100 	mov.w	r1, #0
   1b8a0:	f381 8811 	msr	BASEPRI, r1
   1b8a4:	f3bf 8f6f 	isb	sy
   1b8a8:	2100      	movs	r1, #0
   1b8aa:	2200      	movs	r2, #0
   1b8ac:	2300      	movs	r3, #0
   1b8ae:	f001 fae4 	bl	1ce7a <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
   1b8b2:	bf00      	nop
   1b8b4:	20004d18 	.word	0x20004d18
   1b8b8:	e000ed00 	.word	0xe000ed00
   1b8bc:	20001c38 	.word	0x20001c38
   1b8c0:	20001bcc 	.word	0x20001bcc
   1b8c4:	000258e9 	.word	0x000258e9
   1b8c8:	0001b789 	.word	0x0001b789
   1b8cc:	200041d8 	.word	0x200041d8
   1b8d0:	00028d9f 	.word	0x00028d9f
   1b8d4:	20001b60 	.word	0x20001b60
   1b8d8:	200043d8 	.word	0x200043d8
   1b8dc:	0001b711 	.word	0x0001b711
   1b8e0:	20001c50 	.word	0x20001c50
   1b8e4:	200043d8 	.word	0x200043d8

0001b8e8 <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   1b8e8:	4b0b      	ldr	r3, [pc, #44]	; (1b918 <init_mem_slab_module+0x30>)
   1b8ea:	480c      	ldr	r0, [pc, #48]	; (1b91c <init_mem_slab_module+0x34>)
{
   1b8ec:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1b8ee:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
   1b8f0:	4283      	cmp	r3, r0
   1b8f2:	d301      	bcc.n	1b8f8 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1b8f4:	2000      	movs	r0, #0
   1b8f6:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   1b8f8:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b8fa:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1b8fc:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b8fe:	2100      	movs	r1, #0
   1b900:	42a9      	cmp	r1, r5
   1b902:	d101      	bne.n	1b908 <init_mem_slab_module+0x20>
	     slab++) {
   1b904:	331c      	adds	r3, #28
   1b906:	e7f3      	b.n	1b8f0 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1b908:	695e      	ldr	r6, [r3, #20]
   1b90a:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1b90c:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1b90e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b910:	3101      	adds	r1, #1
		p += slab->block_size;
   1b912:	4432      	add	r2, r6
   1b914:	e7f4      	b.n	1b900 <init_mem_slab_module+0x18>
   1b916:	bf00      	nop
   1b918:	20008084 	.word	0x20008084
   1b91c:	20008084 	.word	0x20008084

0001b920 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1b920:	b510      	push	{r4, lr}
   1b922:	4613      	mov	r3, r2
   1b924:	460c      	mov	r4, r1
   1b926:	f04f 0220 	mov.w	r2, #32
   1b92a:	f3ef 8111 	mrs	r1, BASEPRI
   1b92e:	f382 8811 	msr	BASEPRI, r2

	/* block size must be word aligned */
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
		 "block size not word aligned");

	if (slab->free_list != NULL) {
   1b932:	6942      	ldr	r2, [r0, #20]
   1b934:	b15a      	cbz	r2, 1b94e <k_mem_slab_alloc+0x2e>
		/* take a free block */
		*mem = slab->free_list;
   1b936:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b938:	6813      	ldr	r3, [r2, #0]
   1b93a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b93c:	6983      	ldr	r3, [r0, #24]
   1b93e:	3301      	adds	r3, #1
   1b940:	6183      	str	r3, [r0, #24]
		result = 0;
   1b942:	2000      	movs	r0, #0
	__asm__ volatile(
   1b944:	f381 8811 	msr	BASEPRI, r1
   1b948:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1b94c:	e00d      	b.n	1b96a <k_mem_slab_alloc+0x4a>
	} else if (timeout == K_NO_WAIT) {
   1b94e:	b91b      	cbnz	r3, 1b958 <k_mem_slab_alloc+0x38>
		*mem = NULL;
   1b950:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b952:	f06f 000b 	mvn.w	r0, #11
   1b956:	e7f5      	b.n	1b944 <k_mem_slab_alloc+0x24>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1b958:	4602      	mov	r2, r0
   1b95a:	4804      	ldr	r0, [pc, #16]	; (1b96c <k_mem_slab_alloc+0x4c>)
   1b95c:	f000 fb68 	bl	1c030 <z_pend_curr>
		if (result == 0) {
   1b960:	b918      	cbnz	r0, 1b96a <k_mem_slab_alloc+0x4a>
			*mem = _current->base.swap_data;
   1b962:	4b03      	ldr	r3, [pc, #12]	; (1b970 <k_mem_slab_alloc+0x50>)
   1b964:	689b      	ldr	r3, [r3, #8]
   1b966:	695b      	ldr	r3, [r3, #20]
   1b968:	6023      	str	r3, [r4, #0]
}
   1b96a:	bd10      	pop	{r4, pc}
   1b96c:	20002340 	.word	0x20002340
   1b970:	20001c38 	.word	0x20001c38

0001b974 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1b974:	b570      	push	{r4, r5, r6, lr}
   1b976:	4604      	mov	r4, r0
   1b978:	460d      	mov	r5, r1
	__asm__ volatile(
   1b97a:	f04f 0320 	mov.w	r3, #32
   1b97e:	f3ef 8611 	mrs	r6, BASEPRI
   1b982:	f383 8811 	msr	BASEPRI, r3
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1b986:	f007 fa25 	bl	22dd4 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1b98a:	b180      	cbz	r0, 1b9ae <k_mem_slab_free+0x3a>
		z_set_thread_return_value_with_data(pending_thread, 0, *mem);
   1b98c:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
   1b98e:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b990:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b992:	2100      	movs	r1, #0
   1b994:	06d2      	lsls	r2, r2, #27
   1b996:	6681      	str	r1, [r0, #104]	; 0x68
   1b998:	d103      	bne.n	1b9a2 <k_mem_slab_free+0x2e>
	if (z_is_thread_ready(thread)) {
   1b99a:	6983      	ldr	r3, [r0, #24]
   1b99c:	b90b      	cbnz	r3, 1b9a2 <k_mem_slab_free+0x2e>
		z_add_thread_to_ready_q(thread);
   1b99e:	f000 fa19 	bl	1bdd4 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1b9a2:	4631      	mov	r1, r6
   1b9a4:	4808      	ldr	r0, [pc, #32]	; (1b9c8 <k_mem_slab_free+0x54>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1b9a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b9aa:	f007 b99d 	b.w	22ce8 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1b9ae:	682b      	ldr	r3, [r5, #0]
   1b9b0:	6962      	ldr	r2, [r4, #20]
   1b9b2:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1b9b4:	682b      	ldr	r3, [r5, #0]
   1b9b6:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1b9b8:	69a3      	ldr	r3, [r4, #24]
   1b9ba:	3b01      	subs	r3, #1
   1b9bc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1b9be:	f386 8811 	msr	BASEPRI, r6
   1b9c2:	f3bf 8f6f 	isb	sy
}
   1b9c6:	bd70      	pop	{r4, r5, r6, pc}
   1b9c8:	20002340 	.word	0x20002340

0001b9cc <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1b9cc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1b9ce:	4c07      	ldr	r4, [pc, #28]	; (1b9ec <init_static_pools+0x20>)
   1b9d0:	4d07      	ldr	r5, [pc, #28]	; (1b9f0 <init_static_pools+0x24>)
   1b9d2:	42ac      	cmp	r4, r5
   1b9d4:	d301      	bcc.n	1b9da <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1b9d6:	2000      	movs	r0, #0
   1b9d8:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b9da:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1b9de:	4620      	mov	r0, r4
   1b9e0:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1b9e4:	f001 f87a 	bl	1cadc <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1b9e8:	341c      	adds	r4, #28
   1b9ea:	e7f2      	b.n	1b9d2 <init_static_pools+0x6>
   1b9ec:	20008084 	.word	0x20008084
   1b9f0:	20008084 	.word	0x20008084

0001b9f4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1b9f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1b9f8:	1e1e      	subs	r6, r3, #0
{
   1b9fa:	4680      	mov	r8, r0
   1b9fc:	460c      	mov	r4, r1
   1b9fe:	4691      	mov	r9, r2
	if (timeout > 0) {
   1ba00:	dd52      	ble.n	1baa8 <k_mem_pool_alloc+0xb4>
		end = z_tick_get() + z_ms_to_ticks(timeout);
   1ba02:	f000 fedb 	bl	1c7bc <z_tick_get>
   1ba06:	4605      	mov	r5, r0
	return (s32_t)ceiling_fraction(
   1ba08:	4828      	ldr	r0, [pc, #160]	; (1baac <k_mem_pool_alloc+0xb8>)
   1ba0a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1ba0e:	2100      	movs	r1, #0
   1ba10:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1ba14:	2300      	movs	r3, #0
   1ba16:	fbc7 0106 	smlal	r0, r1, r7, r6
   1ba1a:	f7e4 fb61 	bl	e0 <__aeabi_ldivmod>
   1ba1e:	1945      	adds	r5, r0, r5
	return pool - &_k_mem_pool_list_start[0];
   1ba20:	4b23      	ldr	r3, [pc, #140]	; (1bab0 <k_mem_pool_alloc+0xbc>)
   1ba22:	4f24      	ldr	r7, [pc, #144]	; (1bab4 <k_mem_pool_alloc+0xc0>)
   1ba24:	eba8 0303 	sub.w	r3, r8, r3
   1ba28:	109b      	asrs	r3, r3, #2
   1ba2a:	435f      	muls	r7, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   1ba2c:	b2ff      	uxtb	r7, r7
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1ba2e:	f108 0a14 	add.w	sl, r8, #20
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1ba32:	9400      	str	r4, [sp, #0]
   1ba34:	ab03      	add	r3, sp, #12
   1ba36:	aa02      	add	r2, sp, #8
   1ba38:	4649      	mov	r1, r9
   1ba3a:	4640      	mov	r0, r8
   1ba3c:	f001 f898 	bl	1cb70 <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   1ba40:	f110 0f0b 	cmn.w	r0, #11
   1ba44:	d10b      	bne.n	1ba5e <k_mem_pool_alloc+0x6a>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1ba46:	9400      	str	r4, [sp, #0]
   1ba48:	ab03      	add	r3, sp, #12
   1ba4a:	aa02      	add	r2, sp, #8
   1ba4c:	4649      	mov	r1, r9
   1ba4e:	4640      	mov	r0, r8
   1ba50:	f001 f88e 	bl	1cb70 <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   1ba54:	f110 0f0b 	cmn.w	r0, #11
   1ba58:	bf08      	it	eq
   1ba5a:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   1ba5e:	7963      	ldrb	r3, [r4, #5]
   1ba60:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1ba62:	7127      	strb	r7, [r4, #4]
		block->id.level = level_num;
   1ba64:	f362 0303 	bfi	r3, r2, #0, #4
   1ba68:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   1ba6a:	6863      	ldr	r3, [r4, #4]
   1ba6c:	9a03      	ldr	r2, [sp, #12]
   1ba6e:	f362 331f 	bfi	r3, r2, #12, #20
   1ba72:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1ba74:	b1a8      	cbz	r0, 1baa2 <k_mem_pool_alloc+0xae>
   1ba76:	b1a6      	cbz	r6, 1baa2 <k_mem_pool_alloc+0xae>
   1ba78:	f110 0f0c 	cmn.w	r0, #12
   1ba7c:	d111      	bne.n	1baa2 <k_mem_pool_alloc+0xae>
	__asm__ volatile(
   1ba7e:	f04f 0320 	mov.w	r3, #32
   1ba82:	f3ef 8011 	mrs	r0, BASEPRI
   1ba86:	f383 8811 	msr	BASEPRI, r3
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   1ba8a:	4632      	mov	r2, r6
   1ba8c:	4651      	mov	r1, sl
   1ba8e:	f000 faad 	bl	1bfec <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1ba92:	1c73      	adds	r3, r6, #1
   1ba94:	d0cd      	beq.n	1ba32 <k_mem_pool_alloc+0x3e>
			timeout = end - z_tick_get();
   1ba96:	f000 fe91 	bl	1c7bc <z_tick_get>

			if (timeout < 0) {
   1ba9a:	1a2e      	subs	r6, r5, r0
   1ba9c:	d5c9      	bpl.n	1ba32 <k_mem_pool_alloc+0x3e>
				break;
			}
		}
	}

	return -EAGAIN;
   1ba9e:	f06f 000a 	mvn.w	r0, #10
}
   1baa2:	b004      	add	sp, #16
   1baa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	s64_t end = 0;
   1baa8:	2500      	movs	r5, #0
   1baaa:	e7b9      	b.n	1ba20 <k_mem_pool_alloc+0x2c>
   1baac:	0004ffff 	.word	0x0004ffff
   1bab0:	20008084 	.word	0x20008084
   1bab4:	b6db6db7 	.word	0xb6db6db7

0001bab8 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1bab8:	b570      	push	{r4, r5, r6, lr}
   1baba:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1babc:	6802      	ldr	r2, [r0, #0]
   1babe:	7841      	ldrb	r1, [r0, #1]
   1bac0:	4e10      	ldr	r6, [pc, #64]	; (1bb04 <k_mem_pool_free_id+0x4c>)
   1bac2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1bac6:	00a4      	lsls	r4, r4, #2
   1bac8:	0b12      	lsrs	r2, r2, #12
   1baca:	f001 010f 	and.w	r1, r1, #15
   1bace:	1930      	adds	r0, r6, r4
   1bad0:	f001 f924 	bl	1cd1c <z_sys_mem_pool_block_free>
   1bad4:	f04f 0320 	mov.w	r3, #32
   1bad8:	f3ef 8511 	mrs	r5, BASEPRI
   1badc:	f383 8811 	msr	BASEPRI, r3
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1bae0:	f104 0014 	add.w	r0, r4, #20
   1bae4:	4430      	add	r0, r6
   1bae6:	f007 f99e 	bl	22e26 <z_unpend_all>

	if (need_sched) {
   1baea:	b128      	cbz	r0, 1baf8 <k_mem_pool_free_id+0x40>
		z_reschedule(&lock, key);
   1baec:	4629      	mov	r1, r5
   1baee:	4806      	ldr	r0, [pc, #24]	; (1bb08 <k_mem_pool_free_id+0x50>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1baf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1baf4:	f007 b8f8 	b.w	22ce8 <z_reschedule>
	__asm__ volatile(
   1baf8:	f385 8811 	msr	BASEPRI, r5
   1bafc:	f3bf 8f6f 	isb	sy
}
   1bb00:	bd70      	pop	{r4, r5, r6, pc}
   1bb02:	bf00      	nop
   1bb04:	20008084 	.word	0x20008084
   1bb08:	20002340 	.word	0x20002340

0001bb0c <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1bb0c:	4b03      	ldr	r3, [pc, #12]	; (1bb1c <z_thread_malloc+0x10>)
   1bb0e:	689b      	ldr	r3, [r3, #8]
{
   1bb10:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1bb12:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1bb14:	b108      	cbz	r0, 1bb1a <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1bb16:	f006 bfa1 	b.w	22a5c <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1bb1a:	4770      	bx	lr
   1bb1c:	20001c38 	.word	0x20001c38

0001bb20 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1bb20:	b570      	push	{r4, r5, r6, lr}
   1bb22:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1bb24:	4932      	ldr	r1, [pc, #200]	; (1bbf0 <z_impl_k_mutex_lock+0xd0>)
   1bb26:	688b      	ldr	r3, [r1, #8]
   1bb28:	7bda      	ldrb	r2, [r3, #15]
   1bb2a:	3a01      	subs	r2, #1
   1bb2c:	4604      	mov	r4, r0
   1bb2e:	73da      	strb	r2, [r3, #15]
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1bb30:	68c2      	ldr	r2, [r0, #12]
   1bb32:	4608      	mov	r0, r1
   1bb34:	b14a      	cbz	r2, 1bb4a <z_impl_k_mutex_lock+0x2a>
   1bb36:	68a3      	ldr	r3, [r4, #8]
   1bb38:	6889      	ldr	r1, [r1, #8]
   1bb3a:	428b      	cmp	r3, r1
   1bb3c:	d012      	beq.n	1bb64 <z_impl_k_mutex_lock+0x44>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1bb3e:	b99d      	cbnz	r5, 1bb68 <z_impl_k_mutex_lock+0x48>
		k_sched_unlock();
   1bb40:	f000 f92e 	bl	1bda0 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1bb44:	f06f 050f 	mvn.w	r5, #15
   1bb48:	e00a      	b.n	1bb60 <z_impl_k_mutex_lock+0x40>
					_current->base.prio :
   1bb4a:	688b      	ldr	r3, [r1, #8]
   1bb4c:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1bb50:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
   1bb52:	3201      	adds	r2, #1
		mutex->owner = _current;
   1bb54:	6883      	ldr	r3, [r0, #8]
		mutex->lock_count++;
   1bb56:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1bb58:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
   1bb5a:	f000 f921 	bl	1bda0 <k_sched_unlock>
		return 0;
   1bb5e:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1bb60:	4628      	mov	r0, r5
   1bb62:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   1bb64:	6923      	ldr	r3, [r4, #16]
   1bb66:	e7f3      	b.n	1bb50 <z_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1bb68:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1bb6c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1bb70:	4299      	cmp	r1, r3
   1bb72:	bfa8      	it	ge
   1bb74:	4619      	movge	r1, r3
   1bb76:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	__asm__ volatile(
   1bb7a:	f04f 0320 	mov.w	r3, #32
   1bb7e:	f3ef 8611 	mrs	r6, BASEPRI
   1bb82:	f383 8811 	msr	BASEPRI, r3
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1bb86:	68a0      	ldr	r0, [r4, #8]
   1bb88:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1bb8c:	4299      	cmp	r1, r3
   1bb8e:	da01      	bge.n	1bb94 <z_impl_k_mutex_lock+0x74>
		z_thread_priority_set(mutex->owner, new_prio);
   1bb90:	f000 fa62 	bl	1c058 <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1bb94:	462b      	mov	r3, r5
   1bb96:	4622      	mov	r2, r4
   1bb98:	4631      	mov	r1, r6
   1bb9a:	4816      	ldr	r0, [pc, #88]	; (1bbf4 <z_impl_k_mutex_lock+0xd4>)
   1bb9c:	f000 fa48 	bl	1c030 <z_pend_curr>
	if (got_mutex == 0) {
   1bba0:	4605      	mov	r5, r0
   1bba2:	b910      	cbnz	r0, 1bbaa <z_impl_k_mutex_lock+0x8a>
		k_sched_unlock();
   1bba4:	f000 f8fc 	bl	1bda0 <k_sched_unlock>
		return 0;
   1bba8:	e7da      	b.n	1bb60 <z_impl_k_mutex_lock+0x40>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1bbaa:	6823      	ldr	r3, [r4, #0]
   1bbac:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbae:	429c      	cmp	r4, r3
   1bbb0:	d007      	beq.n	1bbc2 <z_impl_k_mutex_lock+0xa2>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1bbb2:	b133      	cbz	r3, 1bbc2 <z_impl_k_mutex_lock+0xa2>
   1bbb4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1bbb8:	4299      	cmp	r1, r3
   1bbba:	bfa8      	it	ge
   1bbbc:	4619      	movge	r1, r3
   1bbbe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1bbc2:	f04f 0320 	mov.w	r3, #32
   1bbc6:	f3ef 8511 	mrs	r5, BASEPRI
   1bbca:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, new_prio);
   1bbce:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1bbd0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1bbd4:	4299      	cmp	r1, r3
   1bbd6:	d001      	beq.n	1bbdc <z_impl_k_mutex_lock+0xbc>
		z_thread_priority_set(mutex->owner, new_prio);
   1bbd8:	f000 fa3e 	bl	1c058 <z_thread_priority_set>
	__asm__ volatile(
   1bbdc:	f385 8811 	msr	BASEPRI, r5
   1bbe0:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
   1bbe4:	f000 f8dc 	bl	1bda0 <k_sched_unlock>
	return -EAGAIN;
   1bbe8:	f06f 050a 	mvn.w	r5, #10
   1bbec:	e7b8      	b.n	1bb60 <z_impl_k_mutex_lock+0x40>
   1bbee:	bf00      	nop
   1bbf0:	20001c38 	.word	0x20001c38
   1bbf4:	20002340 	.word	0x20002340

0001bbf8 <z_impl_k_mutex_unlock>:
   1bbf8:	4b1d      	ldr	r3, [pc, #116]	; (1bc70 <z_impl_k_mutex_unlock+0x78>)
   1bbfa:	689a      	ldr	r2, [r3, #8]
   1bbfc:	7bd3      	ldrb	r3, [r2, #15]
   1bbfe:	3b01      	subs	r3, #1
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1bc00:	b570      	push	{r4, r5, r6, lr}
   1bc02:	4604      	mov	r4, r0
   1bc04:	73d3      	strb	r3, [r2, #15]
	RECORD_STATE_CHANGE();


	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1bc06:	68c3      	ldr	r3, [r0, #12]
   1bc08:	2b01      	cmp	r3, #1
   1bc0a:	d005      	beq.n	1bc18 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   1bc0c:	3b01      	subs	r3, #1
   1bc0e:	60c3      	str	r3, [r0, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
   1bc10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   1bc14:	f000 b8c4 	b.w	1bda0 <k_sched_unlock>
	__asm__ volatile(
   1bc18:	f04f 0320 	mov.w	r3, #32
   1bc1c:	f3ef 8611 	mrs	r6, BASEPRI
   1bc20:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1bc24:	6901      	ldr	r1, [r0, #16]
   1bc26:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1bc28:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1bc2c:	4299      	cmp	r1, r3
   1bc2e:	d001      	beq.n	1bc34 <z_impl_k_mutex_unlock+0x3c>
		z_thread_priority_set(mutex->owner, new_prio);
   1bc30:	f000 fa12 	bl	1c058 <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1bc34:	4620      	mov	r0, r4
   1bc36:	f007 f8cd 	bl	22dd4 <z_unpend_first_thread>
   1bc3a:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   1bc3c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1bc3e:	b180      	cbz	r0, 1bc62 <z_impl_k_mutex_unlock+0x6a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bc40:	7b43      	ldrb	r3, [r0, #13]
   1bc42:	06db      	lsls	r3, r3, #27
   1bc44:	d103      	bne.n	1bc4e <z_impl_k_mutex_unlock+0x56>
	if (z_is_thread_ready(thread)) {
   1bc46:	6983      	ldr	r3, [r0, #24]
   1bc48:	b90b      	cbnz	r3, 1bc4e <z_impl_k_mutex_unlock+0x56>
		z_add_thread_to_ready_q(thread);
   1bc4a:	f000 f8c3 	bl	1bdd4 <z_add_thread_to_ready_q>
	__asm__ volatile(
   1bc4e:	f386 8811 	msr	BASEPRI, r6
   1bc52:	f3bf 8f6f 	isb	sy
   1bc56:	2300      	movs	r3, #0
   1bc58:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   1bc5a:	f995 300e 	ldrsb.w	r3, [r5, #14]
   1bc5e:	6123      	str	r3, [r4, #16]
   1bc60:	e7d6      	b.n	1bc10 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0;
   1bc62:	60e0      	str	r0, [r4, #12]
   1bc64:	f386 8811 	msr	BASEPRI, r6
   1bc68:	f3bf 8f6f 	isb	sy
   1bc6c:	e7d0      	b.n	1bc10 <z_impl_k_mutex_unlock+0x18>
   1bc6e:	bf00      	nop
   1bc70:	20001c38 	.word	0x20001c38

0001bc74 <resched>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bc74:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   1bc78:	280d      	cmp	r0, #13
   1bc7a:	d809      	bhi.n	1bc90 <resched+0x1c>
   1bc7c:	b128      	cbz	r0, 1bc8a <resched+0x16>
   1bc7e:	4b05      	ldr	r3, [pc, #20]	; (1bc94 <resched+0x20>)
   1bc80:	6858      	ldr	r0, [r3, #4]
   1bc82:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   1bc86:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
   1bc8a:	f080 0001 	eor.w	r0, r0, #1
   1bc8e:	4770      	bx	lr
   1bc90:	2001      	movs	r0, #1
   1bc92:	e7fa      	b.n	1bc8a <resched+0x16>
   1bc94:	e000ed00 	.word	0xe000ed00

0001bc98 <reset_time_slice>:
{
   1bc98:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1bc9a:	f7e9 fa35 	bl	5108 <z_clock_elapsed>
   1bc9e:	4b05      	ldr	r3, [pc, #20]	; (1bcb4 <reset_time_slice+0x1c>)
   1bca0:	4a05      	ldr	r2, [pc, #20]	; (1bcb8 <reset_time_slice+0x20>)
   1bca2:	681b      	ldr	r3, [r3, #0]
   1bca4:	4418      	add	r0, r3
   1bca6:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
   1bca8:	2100      	movs	r1, #0
   1bcaa:	4618      	mov	r0, r3
}
   1bcac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
   1bcb0:	f007 b9a8 	b.w	23004 <z_set_timeout_expiry>
   1bcb4:	20001c70 	.word	0x20001c70
   1bcb8:	20001c38 	.word	0x20001c38

0001bcbc <k_sched_time_slice_set>:
{
   1bcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcbe:	460d      	mov	r5, r1
	__asm__ volatile(
   1bcc0:	f04f 0320 	mov.w	r3, #32
   1bcc4:	f3ef 8411 	mrs	r4, BASEPRI
   1bcc8:	f383 8811 	msr	BASEPRI, r3
   1bccc:	4e0d      	ldr	r6, [pc, #52]	; (1bd04 <k_sched_time_slice_set+0x48>)
		_current_cpu->slice_ticks = 0;
   1bcce:	4b0e      	ldr	r3, [pc, #56]	; (1bd08 <k_sched_time_slice_set+0x4c>)
   1bcd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1bcd4:	2700      	movs	r7, #0
   1bcd6:	fbc1 6700 	smlal	r6, r7, r1, r0
   1bcda:	2200      	movs	r2, #0
   1bcdc:	611a      	str	r2, [r3, #16]
   1bcde:	4630      	mov	r0, r6
   1bce0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1bce4:	2300      	movs	r3, #0
   1bce6:	4639      	mov	r1, r7
   1bce8:	f7e4 f9fa 	bl	e0 <__aeabi_ldivmod>
   1bcec:	4b07      	ldr	r3, [pc, #28]	; (1bd0c <k_sched_time_slice_set+0x50>)
   1bcee:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1bcf0:	4b07      	ldr	r3, [pc, #28]	; (1bd10 <k_sched_time_slice_set+0x54>)
   1bcf2:	601d      	str	r5, [r3, #0]
		reset_time_slice();
   1bcf4:	f7ff ffd0 	bl	1bc98 <reset_time_slice>
	__asm__ volatile(
   1bcf8:	f384 8811 	msr	BASEPRI, r4
   1bcfc:	f3bf 8f6f 	isb	sy
}
   1bd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd02:	bf00      	nop
   1bd04:	0004ffff 	.word	0x0004ffff
   1bd08:	20001c38 	.word	0x20001c38
   1bd0c:	20001c70 	.word	0x20001c70
   1bd10:	20001c6c 	.word	0x20001c6c

0001bd14 <k_sched_lock>:
	__asm__ volatile(
   1bd14:	f04f 0320 	mov.w	r3, #32
   1bd18:	f3ef 8111 	mrs	r1, BASEPRI
   1bd1c:	f383 8811 	msr	BASEPRI, r3
	--_current->base.sched_locked;
   1bd20:	4b04      	ldr	r3, [pc, #16]	; (1bd34 <k_sched_lock+0x20>)
   1bd22:	689a      	ldr	r2, [r3, #8]
   1bd24:	7bd3      	ldrb	r3, [r2, #15]
   1bd26:	3b01      	subs	r3, #1
   1bd28:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1bd2a:	f381 8811 	msr	BASEPRI, r1
   1bd2e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1bd32:	4770      	bx	lr
   1bd34:	20001c38 	.word	0x20001c38

0001bd38 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1bd38:	4b09      	ldr	r3, [pc, #36]	; (1bd60 <z_priq_dumb_remove+0x28>)
   1bd3a:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1bd3e:	4282      	cmp	r2, r0
   1bd40:	d105      	bne.n	1bd4e <z_priq_dumb_remove+0x16>
   1bd42:	689b      	ldr	r3, [r3, #8]
   1bd44:	428b      	cmp	r3, r1
   1bd46:	d102      	bne.n	1bd4e <z_priq_dumb_remove+0x16>
   1bd48:	7b4b      	ldrb	r3, [r1, #13]
   1bd4a:	06db      	lsls	r3, r3, #27
   1bd4c:	d106      	bne.n	1bd5c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1bd4e:	e9d1 3200 	ldrd	r3, r2, [r1]
   1bd52:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1bd54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bd56:	2300      	movs	r3, #0
	node->prev = NULL;
   1bd58:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1bd5c:	4770      	bx	lr
   1bd5e:	bf00      	nop
   1bd60:	20001c38 	.word	0x20001c38

0001bd64 <update_cache>:
{
   1bd64:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1bd66:	4c0d      	ldr	r4, [pc, #52]	; (1bd9c <update_cache+0x38>)
{
   1bd68:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1bd6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1bd6e:	f006 fffc 	bl	22d6a <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1bd72:	4605      	mov	r5, r0
   1bd74:	b900      	cbnz	r0, 1bd78 <update_cache+0x14>
   1bd76:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1bd78:	68a3      	ldr	r3, [r4, #8]
   1bd7a:	b94a      	cbnz	r2, 1bd90 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1bd7c:	7b5a      	ldrb	r2, [r3, #13]
   1bd7e:	06d2      	lsls	r2, r2, #27
   1bd80:	d106      	bne.n	1bd90 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1bd82:	69aa      	ldr	r2, [r5, #24]
   1bd84:	b922      	cbnz	r2, 1bd90 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1bd86:	89da      	ldrh	r2, [r3, #14]
   1bd88:	2a7f      	cmp	r2, #127	; 0x7f
   1bd8a:	d901      	bls.n	1bd90 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1bd8c:	6263      	str	r3, [r4, #36]	; 0x24
}
   1bd8e:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   1bd90:	429d      	cmp	r5, r3
   1bd92:	d001      	beq.n	1bd98 <update_cache+0x34>
			reset_time_slice();
   1bd94:	f7ff ff80 	bl	1bc98 <reset_time_slice>
		_kernel.ready_q.cache = th;
   1bd98:	6265      	str	r5, [r4, #36]	; 0x24
}
   1bd9a:	e7f8      	b.n	1bd8e <update_cache+0x2a>
   1bd9c:	20001c38 	.word	0x20001c38

0001bda0 <k_sched_unlock>:
{
   1bda0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bda2:	f04f 0320 	mov.w	r3, #32
   1bda6:	f3ef 8411 	mrs	r4, BASEPRI
   1bdaa:	f383 8811 	msr	BASEPRI, r3
		++_current->base.sched_locked;
   1bdae:	4b08      	ldr	r3, [pc, #32]	; (1bdd0 <k_sched_unlock+0x30>)
   1bdb0:	689a      	ldr	r2, [r3, #8]
   1bdb2:	7bd3      	ldrb	r3, [r2, #15]
   1bdb4:	3301      	adds	r3, #1
   1bdb6:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
   1bdb8:	2001      	movs	r0, #1
   1bdba:	f7ff ffd3 	bl	1bd64 <update_cache>
	__asm__ volatile(
   1bdbe:	f384 8811 	msr	BASEPRI, r4
   1bdc2:	f3bf 8f6f 	isb	sy
}
   1bdc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1bdca:	f006 bfaa 	b.w	22d22 <z_reschedule_unlocked>
   1bdce:	bf00      	nop
   1bdd0:	20001c38 	.word	0x20001c38

0001bdd4 <z_add_thread_to_ready_q>:
{
   1bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1bdd6:	f04f 0320 	mov.w	r3, #32
   1bdda:	f3ef 8411 	mrs	r4, BASEPRI
   1bdde:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1bde2:	4a15      	ldr	r2, [pc, #84]	; (1be38 <z_add_thread_to_ready_q+0x64>)
   1bde4:	4611      	mov	r1, r2
   1bde6:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bdea:	428b      	cmp	r3, r1
   1bdec:	d01d      	beq.n	1be2a <z_add_thread_to_ready_q+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bdee:	b1e3      	cbz	r3, 1be2a <z_add_thread_to_ready_q+0x56>
   1bdf0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1bdf2:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1bdf6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1bdfa:	42af      	cmp	r7, r5
   1bdfc:	dd10      	ble.n	1be20 <z_add_thread_to_ready_q+0x4c>
	node->prev = successor->prev;
   1bdfe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1be00:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1be04:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1be06:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1be08:	7b43      	ldrb	r3, [r0, #13]
   1be0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1be0e:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1be10:	2000      	movs	r0, #0
   1be12:	f7ff ffa7 	bl	1bd64 <update_cache>
	__asm__ volatile(
   1be16:	f384 8811 	msr	BASEPRI, r4
   1be1a:	f3bf 8f6f 	isb	sy
}
   1be1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1be20:	42b3      	cmp	r3, r6
   1be22:	d002      	beq.n	1be2a <z_add_thread_to_ready_q+0x56>
   1be24:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1be26:	2b00      	cmp	r3, #0
   1be28:	d1e5      	bne.n	1bdf6 <z_add_thread_to_ready_q+0x22>
	node->prev = list->tail;
   1be2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1be2c:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1be2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1be30:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
   1be32:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1be34:	62d0      	str	r0, [r2, #44]	; 0x2c
   1be36:	e7e7      	b.n	1be08 <z_add_thread_to_ready_q+0x34>
   1be38:	20001c38 	.word	0x20001c38

0001be3c <z_move_thread_to_end_of_prio_q>:
{
   1be3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be3e:	4604      	mov	r4, r0
	__asm__ volatile(
   1be40:	f04f 0320 	mov.w	r3, #32
   1be44:	f3ef 8711 	mrs	r7, BASEPRI
   1be48:	f383 8811 	msr	BASEPRI, r3
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1be4c:	4d19      	ldr	r5, [pc, #100]	; (1beb4 <z_move_thread_to_end_of_prio_q+0x78>)
   1be4e:	f105 0628 	add.w	r6, r5, #40	; 0x28
   1be52:	4601      	mov	r1, r0
   1be54:	4630      	mov	r0, r6
   1be56:	f7ff ff6f 	bl	1bd38 <z_priq_dumb_remove>
	return list->head == list;
   1be5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be5c:	42b3      	cmp	r3, r6
   1be5e:	462a      	mov	r2, r5
   1be60:	d020      	beq.n	1bea4 <z_move_thread_to_end_of_prio_q+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1be62:	b1fb      	cbz	r3, 1bea4 <z_move_thread_to_end_of_prio_q+0x68>
   1be64:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1be66:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1be6a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1be6e:	428d      	cmp	r5, r1
   1be70:	dd13      	ble.n	1be9a <z_move_thread_to_end_of_prio_q+0x5e>
	node->prev = successor->prev;
   1be72:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1be74:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1be78:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1be7a:	605c      	str	r4, [r3, #4]
   1be7c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1be7e:	6890      	ldr	r0, [r2, #8]
   1be80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1be84:	7363      	strb	r3, [r4, #13]
   1be86:	1b03      	subs	r3, r0, r4
   1be88:	4258      	negs	r0, r3
   1be8a:	4158      	adcs	r0, r3
   1be8c:	f7ff ff6a 	bl	1bd64 <update_cache>
	__asm__ volatile(
   1be90:	f387 8811 	msr	BASEPRI, r7
   1be94:	f3bf 8f6f 	isb	sy
}
   1be98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1be9a:	4283      	cmp	r3, r0
   1be9c:	d002      	beq.n	1bea4 <z_move_thread_to_end_of_prio_q+0x68>
   1be9e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bea0:	2b00      	cmp	r3, #0
   1bea2:	d1e2      	bne.n	1be6a <z_move_thread_to_end_of_prio_q+0x2e>
	node->prev = list->tail;
   1bea4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1bea6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1bea8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1beaa:	6026      	str	r6, [r4, #0]
	list->tail->next = node;
   1beac:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1beae:	62d4      	str	r4, [r2, #44]	; 0x2c
   1beb0:	e7e4      	b.n	1be7c <z_move_thread_to_end_of_prio_q+0x40>
   1beb2:	bf00      	nop
   1beb4:	20001c38 	.word	0x20001c38

0001beb8 <z_time_slice>:
	if (pending_current == _current) {
   1beb8:	4914      	ldr	r1, [pc, #80]	; (1bf0c <z_time_slice+0x54>)
   1beba:	4a15      	ldr	r2, [pc, #84]	; (1bf10 <z_time_slice+0x58>)
   1bebc:	688b      	ldr	r3, [r1, #8]
{
   1bebe:	b510      	push	{r4, lr}
	if (pending_current == _current) {
   1bec0:	6814      	ldr	r4, [r2, #0]
   1bec2:	42a3      	cmp	r3, r4
   1bec4:	d103      	bne.n	1bece <z_time_slice+0x16>
}
   1bec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
   1beca:	f7ff bee5 	b.w	1bc98 <reset_time_slice>
	pending_current = NULL;
   1bece:	2400      	movs	r4, #0
   1bed0:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1bed2:	4a10      	ldr	r2, [pc, #64]	; (1bf14 <z_time_slice+0x5c>)
   1bed4:	6812      	ldr	r2, [r2, #0]
   1bed6:	b1ba      	cbz	r2, 1bf08 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   1bed8:	89da      	ldrh	r2, [r3, #14]
   1beda:	2a7f      	cmp	r2, #127	; 0x7f
   1bedc:	d814      	bhi.n	1bf08 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   1bede:	4a0e      	ldr	r2, [pc, #56]	; (1bf18 <z_time_slice+0x60>)
   1bee0:	f993 400e 	ldrsb.w	r4, [r3, #14]
   1bee4:	6812      	ldr	r2, [r2, #0]
   1bee6:	4294      	cmp	r4, r2
   1bee8:	db0e      	blt.n	1bf08 <z_time_slice+0x50>
	return thread == _idle_thread;
   1beea:	4a0c      	ldr	r2, [pc, #48]	; (1bf1c <z_time_slice+0x64>)
		&& !is_idle(t)
   1beec:	6812      	ldr	r2, [r2, #0]
   1beee:	4293      	cmp	r3, r2
   1bef0:	d00a      	beq.n	1bf08 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   1bef2:	699a      	ldr	r2, [r3, #24]
   1bef4:	b942      	cbnz	r2, 1bf08 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
   1bef6:	690a      	ldr	r2, [r1, #16]
   1bef8:	4282      	cmp	r2, r0
   1befa:	dc03      	bgt.n	1bf04 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1befc:	4618      	mov	r0, r3
   1befe:	f7ff ff9d 	bl	1be3c <z_move_thread_to_end_of_prio_q>
   1bf02:	e7e0      	b.n	1bec6 <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
   1bf04:	1a12      	subs	r2, r2, r0
   1bf06:	610a      	str	r2, [r1, #16]
}
   1bf08:	bd10      	pop	{r4, pc}
   1bf0a:	bf00      	nop
   1bf0c:	20001c38 	.word	0x20001c38
   1bf10:	20001c68 	.word	0x20001c68
   1bf14:	20001c70 	.word	0x20001c70
   1bf18:	20001c6c 	.word	0x20001c6c
   1bf1c:	00023fc8 	.word	0x00023fc8

0001bf20 <z_remove_thread_from_ready_q>:
{
   1bf20:	b538      	push	{r3, r4, r5, lr}
   1bf22:	4604      	mov	r4, r0
	__asm__ volatile(
   1bf24:	f04f 0320 	mov.w	r3, #32
   1bf28:	f3ef 8511 	mrs	r5, BASEPRI
   1bf2c:	f383 8811 	msr	BASEPRI, r3
		if (z_is_thread_queued(thread)) {
   1bf30:	7b43      	ldrb	r3, [r0, #13]
   1bf32:	065a      	lsls	r2, r3, #25
   1bf34:	d507      	bpl.n	1bf46 <z_remove_thread_from_ready_q+0x26>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1bf36:	4601      	mov	r1, r0
   1bf38:	4809      	ldr	r0, [pc, #36]	; (1bf60 <z_remove_thread_from_ready_q+0x40>)
   1bf3a:	f7ff fefd 	bl	1bd38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1bf3e:	7b63      	ldrb	r3, [r4, #13]
   1bf40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1bf44:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1bf46:	4b07      	ldr	r3, [pc, #28]	; (1bf64 <z_remove_thread_from_ready_q+0x44>)
   1bf48:	6898      	ldr	r0, [r3, #8]
   1bf4a:	1b03      	subs	r3, r0, r4
   1bf4c:	4258      	negs	r0, r3
   1bf4e:	4158      	adcs	r0, r3
   1bf50:	f7ff ff08 	bl	1bd64 <update_cache>
	__asm__ volatile(
   1bf54:	f385 8811 	msr	BASEPRI, r5
   1bf58:	f3bf 8f6f 	isb	sy
}
   1bf5c:	bd38      	pop	{r3, r4, r5, pc}
   1bf5e:	bf00      	nop
   1bf60:	20001c60 	.word	0x20001c60
   1bf64:	20001c38 	.word	0x20001c38

0001bf68 <pend>:
{
   1bf68:	b570      	push	{r4, r5, r6, lr}
   1bf6a:	4604      	mov	r4, r0
   1bf6c:	460d      	mov	r5, r1
   1bf6e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1bf70:	f7ff ffd6 	bl	1bf20 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1bf74:	7b63      	ldrb	r3, [r4, #13]
   1bf76:	f043 0302 	orr.w	r3, r3, #2
   1bf7a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1bf7c:	b17d      	cbz	r5, 1bf9e <pend+0x36>
	return list->head == list;
   1bf7e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1bf80:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf82:	429d      	cmp	r5, r3
   1bf84:	d026      	beq.n	1bfd4 <pend+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bf86:	b32b      	cbz	r3, 1bfd4 <pend+0x6c>
	if (t1->base.prio < t2->base.prio) {
   1bf88:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1bf8c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1bf90:	4291      	cmp	r1, r2
   1bf92:	dd19      	ble.n	1bfc8 <pend+0x60>
	node->prev = successor->prev;
   1bf94:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bf96:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1bf9a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bf9c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1bf9e:	1c73      	adds	r3, r6, #1
   1bfa0:	d01f      	beq.n	1bfe2 <pend+0x7a>
   1bfa2:	4810      	ldr	r0, [pc, #64]	; (1bfe4 <pend+0x7c>)
   1bfa4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1bfa8:	2100      	movs	r1, #0
   1bfaa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1bfae:	fbc5 0106 	smlal	r0, r1, r5, r6
   1bfb2:	2300      	movs	r3, #0
   1bfb4:	f7e4 f894 	bl	e0 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1bfb8:	490b      	ldr	r1, [pc, #44]	; (1bfe8 <pend+0x80>)
   1bfba:	1c42      	adds	r2, r0, #1
   1bfbc:	f104 0018 	add.w	r0, r4, #24
}
   1bfc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bfc4:	f000 bb40 	b.w	1c648 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1bfc8:	6869      	ldr	r1, [r5, #4]
   1bfca:	428b      	cmp	r3, r1
   1bfcc:	d002      	beq.n	1bfd4 <pend+0x6c>
   1bfce:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bfd0:	2b00      	cmp	r3, #0
   1bfd2:	d1db      	bne.n	1bf8c <pend+0x24>
	node->prev = list->tail;
   1bfd4:	686b      	ldr	r3, [r5, #4]
   1bfd6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1bfd8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1bfda:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1bfdc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bfde:	606c      	str	r4, [r5, #4]
   1bfe0:	e7dd      	b.n	1bf9e <pend+0x36>
}
   1bfe2:	bd70      	pop	{r4, r5, r6, pc}
   1bfe4:	0004ffff 	.word	0x0004ffff
   1bfe8:	00022d77 	.word	0x00022d77

0001bfec <z_pend_curr_irqlock>:
{
   1bfec:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
   1bfee:	4d0e      	ldr	r5, [pc, #56]	; (1c028 <z_pend_curr_irqlock+0x3c>)
	pending_current = _current;
   1bff0:	4c0e      	ldr	r4, [pc, #56]	; (1c02c <z_pend_curr_irqlock+0x40>)
{
   1bff2:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1bff4:	68a8      	ldr	r0, [r5, #8]
   1bff6:	f7ff ffb7 	bl	1bf68 <pend>
	pending_current = _current;
   1bffa:	68ab      	ldr	r3, [r5, #8]
   1bffc:	6023      	str	r3, [r4, #0]
   1bffe:	4630      	mov	r0, r6
   1c000:	f7e9 f8d0 	bl	51a4 <__swap>
	__asm__ volatile(
   1c004:	f04f 0220 	mov.w	r2, #32
   1c008:	f3ef 8311 	mrs	r3, BASEPRI
   1c00c:	f382 8811 	msr	BASEPRI, r2
		if (pending_current == _current) {
   1c010:	6822      	ldr	r2, [r4, #0]
   1c012:	68a9      	ldr	r1, [r5, #8]
   1c014:	4291      	cmp	r1, r2
			pending_current = NULL;
   1c016:	bf04      	itt	eq
   1c018:	2200      	moveq	r2, #0
   1c01a:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1c01c:	f383 8811 	msr	BASEPRI, r3
   1c020:	f3bf 8f6f 	isb	sy
}
   1c024:	bd70      	pop	{r4, r5, r6, pc}
   1c026:	bf00      	nop
   1c028:	20001c38 	.word	0x20001c38
   1c02c:	20001c68 	.word	0x20001c68

0001c030 <z_pend_curr>:
{
   1c030:	b510      	push	{r4, lr}
   1c032:	460c      	mov	r4, r1
   1c034:	4611      	mov	r1, r2
	pending_current = _current;
   1c036:	4a06      	ldr	r2, [pc, #24]	; (1c050 <z_pend_curr+0x20>)
   1c038:	6890      	ldr	r0, [r2, #8]
   1c03a:	4a06      	ldr	r2, [pc, #24]	; (1c054 <z_pend_curr+0x24>)
   1c03c:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1c03e:	461a      	mov	r2, r3
   1c040:	f7ff ff92 	bl	1bf68 <pend>
   1c044:	4620      	mov	r0, r4
}
   1c046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c04a:	f7e9 b8ab 	b.w	51a4 <__swap>
   1c04e:	bf00      	nop
   1c050:	20001c38 	.word	0x20001c38
   1c054:	20001c68 	.word	0x20001c68

0001c058 <z_thread_priority_set>:
{
   1c058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c05c:	4604      	mov	r4, r0
	__asm__ volatile(
   1c05e:	f04f 0320 	mov.w	r3, #32
   1c062:	f3ef 8911 	mrs	r9, BASEPRI
   1c066:	f383 8811 	msr	BASEPRI, r3
		need_sched = z_is_thread_ready(thread);
   1c06a:	f006 fe14 	bl	22c96 <z_is_thread_ready>
		if (need_sched) {
   1c06e:	b24e      	sxtb	r6, r1
   1c070:	4680      	mov	r8, r0
   1c072:	2800      	cmp	r0, #0
   1c074:	d034      	beq.n	1c0e0 <z_thread_priority_set+0x88>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c076:	4d1c      	ldr	r5, [pc, #112]	; (1c0e8 <z_thread_priority_set+0x90>)
   1c078:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1c07c:	4621      	mov	r1, r4
   1c07e:	4638      	mov	r0, r7
   1c080:	f7ff fe5a 	bl	1bd38 <z_priq_dumb_remove>
	return list->head == list;
   1c084:	6aab      	ldr	r3, [r5, #40]	; 0x28
			thread->base.prio = prio;
   1c086:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c088:	42bb      	cmp	r3, r7
   1c08a:	462a      	mov	r2, r5
   1c08c:	d021      	beq.n	1c0d2 <z_thread_priority_set+0x7a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c08e:	b303      	cbz	r3, 1c0d2 <z_thread_priority_set+0x7a>
   1c090:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1c092:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1c096:	42b0      	cmp	r0, r6
   1c098:	dd16      	ble.n	1c0c8 <z_thread_priority_set+0x70>
	node->prev = successor->prev;
   1c09a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c09c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1c0a0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c0a2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1c0a4:	2001      	movs	r0, #1
   1c0a6:	f7ff fe5d 	bl	1bd64 <update_cache>
	__asm__ volatile(
   1c0aa:	f389 8811 	msr	BASEPRI, r9
   1c0ae:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
   1c0b2:	f1b8 0f00 	cmp.w	r8, #0
   1c0b6:	d015      	beq.n	1c0e4 <z_thread_priority_set+0x8c>
   1c0b8:	4b0b      	ldr	r3, [pc, #44]	; (1c0e8 <z_thread_priority_set+0x90>)
   1c0ba:	689b      	ldr	r3, [r3, #8]
   1c0bc:	7bdb      	ldrb	r3, [r3, #15]
   1c0be:	b98b      	cbnz	r3, 1c0e4 <z_thread_priority_set+0x8c>
}
   1c0c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		z_reschedule_unlocked();
   1c0c4:	f006 be2d 	b.w	22d22 <z_reschedule_unlocked>
	return (node == list->tail) ? NULL : node->next;
   1c0c8:	4299      	cmp	r1, r3
   1c0ca:	d002      	beq.n	1c0d2 <z_thread_priority_set+0x7a>
   1c0cc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c0ce:	2b00      	cmp	r3, #0
   1c0d0:	d1df      	bne.n	1c092 <z_thread_priority_set+0x3a>
	node->prev = list->tail;
   1c0d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c0d4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1c0d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1c0d8:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
   1c0da:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c0dc:	62d4      	str	r4, [r2, #44]	; 0x2c
   1c0de:	e7e1      	b.n	1c0a4 <z_thread_priority_set+0x4c>
			thread->base.prio = prio;
   1c0e0:	73a6      	strb	r6, [r4, #14]
   1c0e2:	e7e2      	b.n	1c0aa <z_thread_priority_set+0x52>
}
   1c0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c0e8:	20001c38 	.word	0x20001c38

0001c0ec <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1c0ec:	4b04      	ldr	r3, [pc, #16]	; (1c100 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1c0ee:	2100      	movs	r1, #0
   1c0f0:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1c0f4:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1c0f8:	4608      	mov	r0, r1
   1c0fa:	f7ff bddf 	b.w	1bcbc <k_sched_time_slice_set>
   1c0fe:	bf00      	nop
   1c100:	20001c38 	.word	0x20001c38

0001c104 <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
   1c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!z_is_in_isr(), "");

	if (!is_idle(_current)) {
   1c106:	4c20      	ldr	r4, [pc, #128]	; (1c188 <z_impl_k_yield+0x84>)
   1c108:	4b20      	ldr	r3, [pc, #128]	; (1c18c <z_impl_k_yield+0x88>)
   1c10a:	68a2      	ldr	r2, [r4, #8]
   1c10c:	681b      	ldr	r3, [r3, #0]
   1c10e:	429a      	cmp	r2, r3
   1c110:	d023      	beq.n	1c15a <z_impl_k_yield+0x56>
	__asm__ volatile(
   1c112:	f04f 0320 	mov.w	r3, #32
   1c116:	f3ef 8611 	mrs	r6, BASEPRI
   1c11a:	f383 8811 	msr	BASEPRI, r3
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1c11e:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1c122:	68a1      	ldr	r1, [r4, #8]
   1c124:	4628      	mov	r0, r5
   1c126:	f7ff fe07 	bl	1bd38 <z_priq_dumb_remove>
	return list->head == list;
   1c12a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
   1c12c:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c12e:	42ab      	cmp	r3, r5
   1c130:	d022      	beq.n	1c178 <z_impl_k_yield+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c132:	b30b      	cbz	r3, 1c178 <z_impl_k_yield+0x74>
   1c134:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1c136:	f992 000e 	ldrsb.w	r0, [r2, #14]
   1c13a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1c13e:	4287      	cmp	r7, r0
   1c140:	dd15      	ble.n	1c16e <z_impl_k_yield+0x6a>
	node->prev = successor->prev;
   1c142:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1c144:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1c148:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1c14a:	605a      	str	r2, [r3, #4]
					      _current);
			}
			update_cache(1);
   1c14c:	2001      	movs	r0, #1
   1c14e:	f7ff fe09 	bl	1bd64 <update_cache>
	__asm__ volatile(
   1c152:	f386 8811 	msr	BASEPRI, r6
   1c156:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c15a:	f04f 0320 	mov.w	r3, #32
   1c15e:	f3ef 8011 	mrs	r0, BASEPRI
   1c162:	f383 8811 	msr	BASEPRI, r3
		}
	}
	z_swap_unlocked();
}
   1c166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c16a:	f7e9 b81b 	b.w	51a4 <__swap>
	return (node == list->tail) ? NULL : node->next;
   1c16e:	4299      	cmp	r1, r3
   1c170:	d002      	beq.n	1c178 <z_impl_k_yield+0x74>
   1c172:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c174:	2b00      	cmp	r3, #0
   1c176:	d1e0      	bne.n	1c13a <z_impl_k_yield+0x36>
	node->prev = list->tail;
   1c178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c17a:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
   1c17c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
   1c17e:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
   1c180:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c182:	62e2      	str	r2, [r4, #44]	; 0x2c
   1c184:	e7e2      	b.n	1c14c <z_impl_k_yield+0x48>
   1c186:	bf00      	nop
   1c188:	20001c38 	.word	0x20001c38
   1c18c:	00023fc8 	.word	0x00023fc8

0001c190 <z_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t z_impl_k_sleep(s32_t duration)
{
   1c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   1c192:	4604      	mov	r4, r0
   1c194:	b918      	cbnz	r0, 1c19e <z_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1c196:	f7ff ffb5 	bl	1c104 <z_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
   1c19a:	4620      	mov	r0, r4
   1c19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c19e:	481a      	ldr	r0, [pc, #104]	; (1c208 <z_impl_k_sleep+0x78>)
   1c1a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c1a4:	2100      	movs	r1, #0
   1c1a6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1c1aa:	2300      	movs	r3, #0
   1c1ac:	fbc5 0104 	smlal	r0, r1, r5, r4
   1c1b0:	f7e3 ff96 	bl	e0 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + z_ms_to_ticks(duration);
   1c1b4:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1c1b6:	f006 ff3d 	bl	23034 <z_tick_get_32>
   1c1ba:	182c      	adds	r4, r5, r0
   1c1bc:	f04f 0320 	mov.w	r3, #32
   1c1c0:	f3ef 8711 	mrs	r7, BASEPRI
   1c1c4:	f383 8811 	msr	BASEPRI, r3
	pending_current = _current;
   1c1c8:	4e10      	ldr	r6, [pc, #64]	; (1c20c <z_impl_k_sleep+0x7c>)
   1c1ca:	4b11      	ldr	r3, [pc, #68]	; (1c210 <z_impl_k_sleep+0x80>)
   1c1cc:	68b0      	ldr	r0, [r6, #8]
   1c1ce:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   1c1d0:	f7ff fea6 	bl	1bf20 <z_remove_thread_from_ready_q>
   1c1d4:	68b0      	ldr	r0, [r6, #8]
   1c1d6:	490f      	ldr	r1, [pc, #60]	; (1c214 <z_impl_k_sleep+0x84>)
   1c1d8:	462a      	mov	r2, r5
   1c1da:	3018      	adds	r0, #24
   1c1dc:	f000 fa34 	bl	1c648 <z_add_timeout>
   1c1e0:	4638      	mov	r0, r7
   1c1e2:	f7e8 ffdf 	bl	51a4 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
   1c1e6:	f006 ff25 	bl	23034 <z_tick_get_32>
   1c1ea:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
   1c1ec:	2800      	cmp	r0, #0
   1c1ee:	dd09      	ble.n	1c204 <z_impl_k_sleep+0x74>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   1c1f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1c1f4:	2264      	movs	r2, #100	; 0x64
   1c1f6:	2300      	movs	r3, #0
   1c1f8:	fb80 0101 	smull	r0, r1, r0, r1
   1c1fc:	f7e3 ffc0 	bl	180 <__aeabi_uldivmod>
   1c200:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
   1c202:	e7ca      	b.n	1c19a <z_impl_k_sleep+0xa>
	return 0;
   1c204:	2400      	movs	r4, #0
   1c206:	e7c8      	b.n	1c19a <z_impl_k_sleep+0xa>
   1c208:	0004ffff 	.word	0x0004ffff
   1c20c:	20001c38 	.word	0x20001c38
   1c210:	20001c68 	.word	0x20001c68
   1c214:	00022d77 	.word	0x00022d77

0001c218 <z_impl_k_wakeup>:
	return z_impl_k_sleep(duration);
}
#endif

void z_impl_k_wakeup(k_tid_t thread)
{
   1c218:	b510      	push	{r4, lr}
	if (z_is_thread_pending(thread)) {
   1c21a:	7b43      	ldrb	r3, [r0, #13]
   1c21c:	079a      	lsls	r2, r3, #30
{
   1c21e:	4604      	mov	r4, r0
	if (z_is_thread_pending(thread)) {
   1c220:	d418      	bmi.n	1c254 <z_impl_k_wakeup+0x3c>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1c222:	3018      	adds	r0, #24
   1c224:	f006 fecc 	bl	22fc0 <z_abort_timeout>
		return;
	}

	if (z_abort_thread_timeout(thread) < 0) {
   1c228:	2800      	cmp	r0, #0
   1c22a:	db13      	blt.n	1c254 <z_impl_k_wakeup+0x3c>
	if (z_is_thread_ready(thread)) {
   1c22c:	4620      	mov	r0, r4
   1c22e:	f006 fd32 	bl	22c96 <z_is_thread_ready>
   1c232:	b110      	cbz	r0, 1c23a <z_impl_k_wakeup+0x22>
		z_add_thread_to_ready_q(thread);
   1c234:	4620      	mov	r0, r4
   1c236:	f7ff fdcd 	bl	1bdd4 <z_add_thread_to_ready_q>
   1c23a:	f3ef 8305 	mrs	r3, IPSR
   1c23e:	2b0d      	cmp	r3, #13
   1c240:	d808      	bhi.n	1c254 <z_impl_k_wakeup+0x3c>
   1c242:	b11b      	cbz	r3, 1c24c <z_impl_k_wakeup+0x34>
   1c244:	4b04      	ldr	r3, [pc, #16]	; (1c258 <z_impl_k_wakeup+0x40>)
   1c246:	685b      	ldr	r3, [r3, #4]
   1c248:	051b      	lsls	r3, r3, #20
   1c24a:	d503      	bpl.n	1c254 <z_impl_k_wakeup+0x3c>

	if (IS_ENABLED(CONFIG_SMP) &&
	    !IS_ENABLED(CONFIG_SCHED_IPI_SUPPORTED)) {
		z_sched_ipi();
	}
}
   1c24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_reschedule_unlocked();
   1c250:	f006 bd67 	b.w	22d22 <z_reschedule_unlocked>
}
   1c254:	bd10      	pop	{r4, pc}
   1c256:	bf00      	nop
   1c258:	e000ed00 	.word	0xe000ed00

0001c25c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1c25c:	4b01      	ldr	r3, [pc, #4]	; (1c264 <z_impl_k_current_get+0x8>)
   1c25e:	6898      	ldr	r0, [r3, #8]
   1c260:	4770      	bx	lr
   1c262:	bf00      	nop
   1c264:	20001c38 	.word	0x20001c38

0001c268 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1c268:	b570      	push	{r4, r5, r6, lr}
   1c26a:	4604      	mov	r4, r0
   1c26c:	f04f 0320 	mov.w	r3, #32
   1c270:	f3ef 8611 	mrs	r6, BASEPRI
   1c274:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1c278:	f006 fdac 	bl	22dd4 <z_unpend_first_thread>
	if (thread != NULL) {
   1c27c:	4605      	mov	r5, r0
   1c27e:	b170      	cbz	r0, 1c29e <z_impl_k_sem_give+0x36>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c280:	7b43      	ldrb	r3, [r0, #13]
   1c282:	06db      	lsls	r3, r3, #27
   1c284:	d103      	bne.n	1c28e <z_impl_k_sem_give+0x26>
	if (z_is_thread_ready(thread)) {
   1c286:	6983      	ldr	r3, [r0, #24]
   1c288:	b90b      	cbnz	r3, 1c28e <z_impl_k_sem_give+0x26>
		z_add_thread_to_ready_q(thread);
   1c28a:	f7ff fda3 	bl	1bdd4 <z_add_thread_to_ready_q>
   1c28e:	2300      	movs	r3, #0
   1c290:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1c292:	4631      	mov	r1, r6
   1c294:	4808      	ldr	r0, [pc, #32]	; (1c2b8 <z_impl_k_sem_give+0x50>)
}
   1c296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1c29a:	f006 bd25 	b.w	22ce8 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1c29e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1c2a2:	429a      	cmp	r2, r3
   1c2a4:	bf18      	it	ne
   1c2a6:	3301      	addne	r3, #1
   1c2a8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1c2aa:	2102      	movs	r1, #2
   1c2ac:	f104 0010 	add.w	r0, r4, #16
   1c2b0:	f006 ff6e 	bl	23190 <z_handle_obj_poll_events>
   1c2b4:	e7ed      	b.n	1c292 <z_impl_k_sem_give+0x2a>
   1c2b6:	bf00      	nop
   1c2b8:	20002340 	.word	0x20002340

0001c2bc <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1c2bc:	b410      	push	{r4}
   1c2be:	4602      	mov	r2, r0
   1c2c0:	460b      	mov	r3, r1
   1c2c2:	f04f 0020 	mov.w	r0, #32
   1c2c6:	f3ef 8111 	mrs	r1, BASEPRI
   1c2ca:	f380 8811 	msr	BASEPRI, r0
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1c2ce:	6894      	ldr	r4, [r2, #8]
   1c2d0:	b144      	cbz	r4, 1c2e4 <z_impl_k_sem_take+0x28>
		sem->count--;
   1c2d2:	3c01      	subs	r4, #1
   1c2d4:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1c2d6:	f381 8811 	msr	BASEPRI, r1
   1c2da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1c2de:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   1c2e0:	bc10      	pop	{r4}
   1c2e2:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1c2e4:	b933      	cbnz	r3, 1c2f4 <z_impl_k_sem_take+0x38>
   1c2e6:	f381 8811 	msr	BASEPRI, r1
   1c2ea:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1c2ee:	f06f 000f 	mvn.w	r0, #15
   1c2f2:	e7f5      	b.n	1c2e0 <z_impl_k_sem_take+0x24>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1c2f4:	4801      	ldr	r0, [pc, #4]	; (1c2fc <z_impl_k_sem_take+0x40>)
}
   1c2f6:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1c2f8:	f7ff be9a 	b.w	1c030 <z_pend_curr>
   1c2fc:	20002340 	.word	0x20002340

0001c300 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1c300:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1c302:	4c08      	ldr	r4, [pc, #32]	; (1c324 <k_sys_work_q_init+0x24>)
   1c304:	4908      	ldr	r1, [pc, #32]	; (1c328 <k_sys_work_q_init+0x28>)
   1c306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c30a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c30e:	4620      	mov	r0, r4
   1c310:	f000 f8ee 	bl	1c4f0 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   1c314:	f104 0010 	add.w	r0, r4, #16
   1c318:	4904      	ldr	r1, [pc, #16]	; (1c32c <k_sys_work_q_init+0x2c>)
   1c31a:	f006 fdaf 	bl	22e7c <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1c31e:	2000      	movs	r0, #0
   1c320:	bd10      	pop	{r4, pc}
   1c322:	bf00      	nop
   1c324:	20001c74 	.word	0x20001c74
   1c328:	20004d18 	.word	0x20004d18
   1c32c:	00028da4 	.word	0x00028da4

0001c330 <k_is_in_isr>:
   1c330:	f3ef 8005 	mrs	r0, IPSR
   1c334:	280d      	cmp	r0, #13
   1c336:	d807      	bhi.n	1c348 <k_is_in_isr+0x18>
   1c338:	b138      	cbz	r0, 1c34a <k_is_in_isr+0x1a>
   1c33a:	4b04      	ldr	r3, [pc, #16]	; (1c34c <k_is_in_isr+0x1c>)
   1c33c:	6858      	ldr	r0, [r3, #4]
   1c33e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   1c342:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   1c346:	4770      	bx	lr
   1c348:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
   1c34a:	4770      	bx	lr
   1c34c:	e000ed00 	.word	0xe000ed00

0001c350 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
   1c350:	4b02      	ldr	r3, [pc, #8]	; (1c35c <z_is_thread_essential+0xc>)
   1c352:	689b      	ldr	r3, [r3, #8]
   1c354:	7b18      	ldrb	r0, [r3, #12]
}
   1c356:	f000 0001 	and.w	r0, r0, #1
   1c35a:	4770      	bx	lr
   1c35c:	20001c38 	.word	0x20001c38

0001c360 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1c360:	b510      	push	{r4, lr}
   1c362:	4602      	mov	r2, r0
	__asm__ volatile(
   1c364:	f04f 0320 	mov.w	r3, #32
   1c368:	f3ef 8411 	mrs	r4, BASEPRI
   1c36c:	f383 8811 	msr	BASEPRI, r3
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1c370:	7b43      	ldrb	r3, [r0, #13]
   1c372:	0759      	lsls	r1, r3, #29
   1c374:	d404      	bmi.n	1c380 <z_impl_k_thread_start+0x20>
	__asm__ volatile(
   1c376:	f384 8811 	msr	BASEPRI, r4
   1c37a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1c37e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c380:	f023 0304 	bic.w	r3, r3, #4
   1c384:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1c386:	f006 fd6d 	bl	22e64 <z_is_thread_ready>
   1c38a:	b110      	cbz	r0, 1c392 <z_impl_k_thread_start+0x32>
		z_add_thread_to_ready_q(thread);
   1c38c:	4610      	mov	r0, r2
   1c38e:	f7ff fd21 	bl	1bdd4 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1c392:	4621      	mov	r1, r4
   1c394:	4802      	ldr	r0, [pc, #8]	; (1c3a0 <z_impl_k_thread_start+0x40>)
}
   1c396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1c39a:	f006 bca5 	b.w	22ce8 <z_reschedule>
   1c39e:	bf00      	nop
   1c3a0:	20002340 	.word	0x20002340

0001c3a4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1c3a4:	b530      	push	{r4, r5, lr}
   1c3a6:	b087      	sub	sp, #28
   1c3a8:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c3aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c3ac:	9504      	str	r5, [sp, #16]
   1c3ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1c3b0:	9503      	str	r5, [sp, #12]
   1c3b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1c3b4:	9502      	str	r5, [sp, #8]
   1c3b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1c3b8:	9501      	str	r5, [sp, #4]
   1c3ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1c3bc:	9500      	str	r5, [sp, #0]
   1c3be:	f7e9 f8ef 	bl	55a0 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1c3c2:	4b03      	ldr	r3, [pc, #12]	; (1c3d0 <z_setup_new_thread+0x2c>)
   1c3c4:	689b      	ldr	r3, [r3, #8]
   1c3c6:	b103      	cbz	r3, 1c3ca <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1c3c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1c3ca:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1c3cc:	b007      	add	sp, #28
   1c3ce:	bd30      	pop	{r4, r5, pc}
   1c3d0:	20001c38 	.word	0x20001c38

0001c3d4 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1c3d4:	b570      	push	{r4, r5, r6, lr}
   1c3d6:	b086      	sub	sp, #24
	__ASSERT(!z_is_in_isr(), "Threads may not be created in ISRs");

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c3d8:	2600      	movs	r6, #0
   1c3da:	9605      	str	r6, [sp, #20]
   1c3dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1c3de:	9604      	str	r6, [sp, #16]
   1c3e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1c3e2:	9603      	str	r6, [sp, #12]
   1c3e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1c3e6:	9602      	str	r6, [sp, #8]
   1c3e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   1c3ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c3ec:	9601      	str	r6, [sp, #4]
   1c3ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1c3f0:	9600      	str	r6, [sp, #0]
{
   1c3f2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c3f4:	f7ff ffd6 	bl	1c3a4 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1c3f8:	1c6b      	adds	r3, r5, #1
   1c3fa:	d003      	beq.n	1c404 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1c3fc:	b92d      	cbnz	r5, 1c40a <z_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   1c3fe:	4620      	mov	r0, r4
   1c400:	f7ff ffae 	bl	1c360 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1c404:	4620      	mov	r0, r4
   1c406:	b006      	add	sp, #24
   1c408:	bd70      	pop	{r4, r5, r6, pc}
	return (s32_t)ceiling_fraction(
   1c40a:	4809      	ldr	r0, [pc, #36]	; (1c430 <z_impl_k_thread_create+0x5c>)
   1c40c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1c410:	2100      	movs	r1, #0
   1c412:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1c416:	2300      	movs	r3, #0
   1c418:	fbc6 0105 	smlal	r0, r1, r6, r5
   1c41c:	f7e3 fe60 	bl	e0 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1c420:	4904      	ldr	r1, [pc, #16]	; (1c434 <z_impl_k_thread_create+0x60>)
   1c422:	1c42      	adds	r2, r0, #1
   1c424:	f104 0018 	add.w	r0, r4, #24
   1c428:	f000 f90e 	bl	1c648 <z_add_timeout>
   1c42c:	e7ea      	b.n	1c404 <z_impl_k_thread_create+0x30>
   1c42e:	bf00      	nop
   1c430:	0004ffff 	.word	0x0004ffff
   1c434:	00022d77 	.word	0x00022d77

0001c438 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1c43c:	4e28      	ldr	r6, [pc, #160]	; (1c4e0 <z_init_static_threads+0xa8>)
   1c43e:	4d29      	ldr	r5, [pc, #164]	; (1c4e4 <z_init_static_threads+0xac>)
{
   1c440:	b087      	sub	sp, #28
   1c442:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1c444:	42b5      	cmp	r5, r6
   1c446:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1c44a:	d30f      	bcc.n	1c46c <z_init_static_threads+0x34>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1c44c:	f7ff fc62 	bl	1bd14 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c450:	4c24      	ldr	r4, [pc, #144]	; (1c4e4 <z_init_static_threads+0xac>)
   1c452:	4e25      	ldr	r6, [pc, #148]	; (1c4e8 <z_init_static_threads+0xb0>)
   1c454:	f8df a094 	ldr.w	sl, [pc, #148]	; 1c4ec <z_init_static_threads+0xb4>
   1c458:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1c45c:	2700      	movs	r7, #0
   1c45e:	4544      	cmp	r4, r8
   1c460:	d321      	bcc.n	1c4a6 <z_init_static_threads+0x6e>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1c462:	b007      	add	sp, #28
   1c464:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1c468:	f7ff bc9a 	b.w	1bda0 <k_sched_unlock>
		z_setup_new_thread(
   1c46c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c470:	9305      	str	r3, [sp, #20]
   1c472:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1c476:	9304      	str	r3, [sp, #16]
   1c478:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c47c:	9303      	str	r3, [sp, #12]
   1c47e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1c482:	9302      	str	r3, [sp, #8]
   1c484:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1c488:	9301      	str	r3, [sp, #4]
   1c48a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1c48e:	9300      	str	r3, [sp, #0]
   1c490:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1c494:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1c498:	f7ff ff84 	bl	1c3a4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1c49c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1c4a0:	64dd      	str	r5, [r3, #76]	; 0x4c
   1c4a2:	4625      	mov	r5, r4
   1c4a4:	e7ce      	b.n	1c444 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1c4a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1c4a8:	1c4b      	adds	r3, r1, #1
   1c4aa:	d004      	beq.n	1c4b6 <z_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
   1c4ac:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1c4ae:	b921      	cbnz	r1, 1c4ba <z_init_static_threads+0x82>
   1c4b0:	4628      	mov	r0, r5
   1c4b2:	f7ff ff55 	bl	1c360 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c4b6:	3430      	adds	r4, #48	; 0x30
   1c4b8:	e7d1      	b.n	1c45e <z_init_static_threads+0x26>
   1c4ba:	46b3      	mov	fp, r6
   1c4bc:	46bc      	mov	ip, r7
   1c4be:	fbc9 bc01 	smlal	fp, ip, r9, r1
   1c4c2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1c4c6:	2300      	movs	r3, #0
   1c4c8:	4658      	mov	r0, fp
   1c4ca:	4661      	mov	r1, ip
   1c4cc:	f7e3 fe08 	bl	e0 <__aeabi_ldivmod>
   1c4d0:	4651      	mov	r1, sl
   1c4d2:	1c42      	adds	r2, r0, #1
   1c4d4:	f105 0018 	add.w	r0, r5, #24
   1c4d8:	f000 f8b6 	bl	1c648 <z_add_timeout>
   1c4dc:	e7eb      	b.n	1c4b6 <z_init_static_threads+0x7e>
   1c4de:	bf00      	nop
   1c4e0:	20008084 	.word	0x20008084
   1c4e4:	20008084 	.word	0x20008084
   1c4e8:	0004ffff 	.word	0x0004ffff
   1c4ec:	00022d77 	.word	0x00022d77

0001c4f0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1c4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4f4:	4605      	mov	r5, r0
   1c4f6:	b086      	sub	sp, #24
   1c4f8:	4698      	mov	r8, r3
   1c4fa:	460e      	mov	r6, r1
   1c4fc:	4617      	mov	r7, r2
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1c4fe:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   1c502:	f006 fb25 	bl	22b50 <z_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1c506:	2000      	movs	r0, #0
   1c508:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1c50c:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1c510:	e9cd 5000 	strd	r5, r0, [sp]
   1c514:	4631      	mov	r1, r6
   1c516:	4b06      	ldr	r3, [pc, #24]	; (1c530 <k_work_q_start+0x40>)
   1c518:	463a      	mov	r2, r7
   1c51a:	4620      	mov	r0, r4
   1c51c:	f7ff ff5a 	bl	1c3d4 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   1c520:	4904      	ldr	r1, [pc, #16]	; (1c534 <k_work_q_start+0x44>)
   1c522:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1c524:	b006      	add	sp, #24
   1c526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c52a:	f006 bca7 	b.w	22e7c <z_impl_k_thread_name_set>
   1c52e:	bf00      	nop
   1c530:	0001ce8f 	.word	0x0001ce8f
   1c534:	00028dad 	.word	0x00028dad

0001c538 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   1c538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c53c:	4606      	mov	r6, r0
   1c53e:	460d      	mov	r5, r1
   1c540:	4617      	mov	r7, r2
	__asm__ volatile(
   1c542:	f04f 0320 	mov.w	r3, #32
   1c546:	f3ef 8811 	mrs	r8, BASEPRI
   1c54a:	f383 8811 	msr	BASEPRI, r3
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
   1c54e:	69cc      	ldr	r4, [r1, #28]
   1c550:	b15c      	cbz	r4, 1c56a <k_delayed_work_submit_to_queue+0x32>
   1c552:	4284      	cmp	r4, r0
   1c554:	d12b      	bne.n	1c5ae <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1c556:	4628      	mov	r0, r5
   1c558:	f006 fcd5 	bl	22f06 <work_cancel>
		if (err < 0) {
   1c55c:	1e04      	subs	r4, r0, #0
   1c55e:	da06      	bge.n	1c56e <k_delayed_work_submit_to_queue+0x36>
	__asm__ volatile(
   1c560:	f388 8811 	msr	BASEPRI, r8
   1c564:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   1c568:	e00c      	b.n	1c584 <k_delayed_work_submit_to_queue+0x4c>
	if (work->work_q == work_q) {
   1c56a:	2800      	cmp	r0, #0
   1c56c:	d0f3      	beq.n	1c556 <k_delayed_work_submit_to_queue+0x1e>
	work->work_q = work_q;
   1c56e:	61ee      	str	r6, [r5, #28]
	if (!delay) {
   1c570:	b95f      	cbnz	r7, 1c58a <k_delayed_work_submit_to_queue+0x52>
   1c572:	f388 8811 	msr	BASEPRI, r8
   1c576:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1c57a:	4629      	mov	r1, r5
   1c57c:	4630      	mov	r0, r6
   1c57e:	f006 fca5 	bl	22ecc <k_work_submit_to_queue>
		return 0;
   1c582:	463c      	mov	r4, r7
}
   1c584:	4620      	mov	r0, r4
   1c586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c58a:	480a      	ldr	r0, [pc, #40]	; (1c5b4 <k_delayed_work_submit_to_queue+0x7c>)
   1c58c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1c590:	2100      	movs	r1, #0
   1c592:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1c596:	2300      	movs	r3, #0
   1c598:	fbc6 0107 	smlal	r0, r1, r6, r7
   1c59c:	f7e3 fda0 	bl	e0 <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   1c5a0:	4905      	ldr	r1, [pc, #20]	; (1c5b8 <k_delayed_work_submit_to_queue+0x80>)
   1c5a2:	1c42      	adds	r2, r0, #1
   1c5a4:	f105 000c 	add.w	r0, r5, #12
   1c5a8:	f000 f84e 	bl	1c648 <z_add_timeout>
   1c5ac:	e7d8      	b.n	1c560 <k_delayed_work_submit_to_queue+0x28>
		err = -EADDRINUSE;
   1c5ae:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1c5b2:	e7d5      	b.n	1c560 <k_delayed_work_submit_to_queue+0x28>
   1c5b4:	0004ffff 	.word	0x0004ffff
   1c5b8:	00022efd 	.word	0x00022efd

0001c5bc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1c5bc:	4b03      	ldr	r3, [pc, #12]	; (1c5cc <elapsed+0x10>)
   1c5be:	681b      	ldr	r3, [r3, #0]
   1c5c0:	b90b      	cbnz	r3, 1c5c6 <elapsed+0xa>
   1c5c2:	f7e8 bda1 	b.w	5108 <z_clock_elapsed>
}
   1c5c6:	2000      	movs	r0, #0
   1c5c8:	4770      	bx	lr
   1c5ca:	bf00      	nop
   1c5cc:	20001cf0 	.word	0x20001cf0

0001c5d0 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c5d0:	6803      	ldr	r3, [r0, #0]
   1c5d2:	b140      	cbz	r0, 1c5e6 <remove_timeout+0x16>
   1c5d4:	4a07      	ldr	r2, [pc, #28]	; (1c5f4 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1c5d6:	6852      	ldr	r2, [r2, #4]
   1c5d8:	4290      	cmp	r0, r2
   1c5da:	d004      	beq.n	1c5e6 <remove_timeout+0x16>
	if (next(t) != NULL) {
   1c5dc:	b11b      	cbz	r3, 1c5e6 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1c5de:	689a      	ldr	r2, [r3, #8]
   1c5e0:	6881      	ldr	r1, [r0, #8]
   1c5e2:	440a      	add	r2, r1
   1c5e4:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1c5e6:	6842      	ldr	r2, [r0, #4]
   1c5e8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c5ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c5ec:	2300      	movs	r3, #0
	node->prev = NULL;
   1c5ee:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c5f2:	4770      	bx	lr
   1c5f4:	20007ec8 	.word	0x20007ec8

0001c5f8 <next_timeout>:

static s32_t next_timeout(void)
{
   1c5f8:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   1c5fa:	4b10      	ldr	r3, [pc, #64]	; (1c63c <next_timeout+0x44>)
   1c5fc:	781b      	ldrb	r3, [r3, #0]
   1c5fe:	2b00      	cmp	r3, #0
	return list->head == list;
   1c600:	4b0f      	ldr	r3, [pc, #60]	; (1c640 <next_timeout+0x48>)
   1c602:	681c      	ldr	r4, [r3, #0]
   1c604:	bf14      	ite	ne
   1c606:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1c60a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c60e:	429c      	cmp	r4, r3
   1c610:	d00a      	beq.n	1c628 <next_timeout+0x30>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   1c612:	b14c      	cbz	r4, 1c628 <next_timeout+0x30>
   1c614:	68a5      	ldr	r5, [r4, #8]
   1c616:	f7ff ffd1 	bl	1c5bc <elapsed>
   1c61a:	1a28      	subs	r0, r5, r0
   1c61c:	2800      	cmp	r0, #0
   1c61e:	db0a      	blt.n	1c636 <next_timeout+0x3e>
   1c620:	68a4      	ldr	r4, [r4, #8]
   1c622:	f7ff ffcb 	bl	1c5bc <elapsed>
   1c626:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c628:	4b06      	ldr	r3, [pc, #24]	; (1c644 <next_timeout+0x4c>)
   1c62a:	691b      	ldr	r3, [r3, #16]
   1c62c:	b113      	cbz	r3, 1c634 <next_timeout+0x3c>
   1c62e:	4298      	cmp	r0, r3
   1c630:	bfa8      	it	ge
   1c632:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c634:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   1c636:	2000      	movs	r0, #0
   1c638:	e7f6      	b.n	1c628 <next_timeout+0x30>
   1c63a:	bf00      	nop
   1c63c:	20002340 	.word	0x20002340
   1c640:	20007ec8 	.word	0x20007ec8
   1c644:	20001c38 	.word	0x20001c38

0001c648 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1c648:	b570      	push	{r4, r5, r6, lr}
   1c64a:	4604      	mov	r4, r0
   1c64c:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c64e:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   1c650:	f04f 0320 	mov.w	r3, #32
   1c654:	f3ef 8511 	mrs	r5, BASEPRI
   1c658:	f383 8811 	msr	BASEPRI, r3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1c65c:	f7ff ffae 	bl	1c5bc <elapsed>
	return list->head == list;
   1c660:	4b18      	ldr	r3, [pc, #96]	; (1c6c4 <z_add_timeout+0x7c>)
   1c662:	681a      	ldr	r2, [r3, #0]
   1c664:	2e01      	cmp	r6, #1
   1c666:	bfac      	ite	ge
   1c668:	1980      	addge	r0, r0, r6
   1c66a:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c66c:	429a      	cmp	r2, r3
   1c66e:	60a0      	str	r0, [r4, #8]
   1c670:	d001      	beq.n	1c676 <z_add_timeout+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c672:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1c674:	b932      	cbnz	r2, 1c684 <z_add_timeout+0x3c>
	node->prev = list->tail;
   1c676:	685a      	ldr	r2, [r3, #4]
   1c678:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1c67a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1c67c:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
   1c67e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c680:	605c      	str	r4, [r3, #4]
   1c682:	e00a      	b.n	1c69a <z_add_timeout+0x52>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1c684:	6890      	ldr	r0, [r2, #8]
   1c686:	68a1      	ldr	r1, [r4, #8]
   1c688:	4288      	cmp	r0, r1
   1c68a:	dd15      	ble.n	1c6b8 <z_add_timeout+0x70>
				t->dticks -= to->dticks;
   1c68c:	1a41      	subs	r1, r0, r1
   1c68e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1c690:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1c692:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1c696:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1c698:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1c69a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c69c:	429a      	cmp	r2, r3
   1c69e:	d006      	beq.n	1c6ae <z_add_timeout+0x66>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c6a0:	4294      	cmp	r4, r2
   1c6a2:	d104      	bne.n	1c6ae <z_add_timeout+0x66>
			z_clock_set_timeout(next_timeout(), false);
   1c6a4:	f7ff ffa8 	bl	1c5f8 <next_timeout>
   1c6a8:	2100      	movs	r1, #0
   1c6aa:	f7e8 fcf3 	bl	5094 <z_clock_set_timeout>
	__asm__ volatile(
   1c6ae:	f385 8811 	msr	BASEPRI, r5
   1c6b2:	f3bf 8f6f 	isb	sy
		}
	}
}
   1c6b6:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1c6b8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1c6ba:	42b2      	cmp	r2, r6
   1c6bc:	60a1      	str	r1, [r4, #8]
   1c6be:	d0da      	beq.n	1c676 <z_add_timeout+0x2e>
   1c6c0:	6812      	ldr	r2, [r2, #0]
   1c6c2:	e7d7      	b.n	1c674 <z_add_timeout+0x2c>
   1c6c4:	20007ec8 	.word	0x20007ec8

0001c6c8 <z_timeout_remaining>:

	return ret;
}

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   1c6c8:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1c6ca:	6804      	ldr	r4, [r0, #0]
   1c6cc:	b304      	cbz	r4, 1c710 <z_timeout_remaining+0x48>
	__asm__ volatile(
   1c6ce:	f04f 0320 	mov.w	r3, #32
   1c6d2:	f3ef 8111 	mrs	r1, BASEPRI
   1c6d6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1c6da:	4a0e      	ldr	r2, [pc, #56]	; (1c714 <z_timeout_remaining+0x4c>)
   1c6dc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c6de:	4293      	cmp	r3, r2
   1c6e0:	d014      	beq.n	1c70c <z_timeout_remaining+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c6e2:	6852      	ldr	r2, [r2, #4]
   1c6e4:	2400      	movs	r4, #0
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1c6e6:	b93b      	cbnz	r3, 1c6f8 <z_timeout_remaining+0x30>
	__asm__ volatile(
   1c6e8:	f381 8811 	msr	BASEPRI, r1
   1c6ec:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
   1c6f0:	f7ff ff64 	bl	1c5bc <elapsed>
   1c6f4:	1a20      	subs	r0, r4, r0
}
   1c6f6:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
   1c6f8:	689d      	ldr	r5, [r3, #8]
			if (timeout == t) {
   1c6fa:	4283      	cmp	r3, r0
			ticks += t->dticks;
   1c6fc:	442c      	add	r4, r5
			if (timeout == t) {
   1c6fe:	d0f3      	beq.n	1c6e8 <z_timeout_remaining+0x20>
   1c700:	2b00      	cmp	r3, #0
   1c702:	d0f1      	beq.n	1c6e8 <z_timeout_remaining+0x20>
	return (node == list->tail) ? NULL : node->next;
   1c704:	4293      	cmp	r3, r2
   1c706:	d0ef      	beq.n	1c6e8 <z_timeout_remaining+0x20>
   1c708:	681b      	ldr	r3, [r3, #0]
   1c70a:	e7ec      	b.n	1c6e6 <z_timeout_remaining+0x1e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c70c:	2400      	movs	r4, #0
   1c70e:	e7eb      	b.n	1c6e8 <z_timeout_remaining+0x20>
		return 0;
   1c710:	4620      	mov	r0, r4
   1c712:	e7f0      	b.n	1c6f6 <z_timeout_remaining+0x2e>
   1c714:	20007ec8 	.word	0x20007ec8

0001c718 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1c718:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1c71c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c71e:	f7ff fbcb 	bl	1beb8 <z_time_slice>
	__asm__ volatile(
   1c722:	f04f 0320 	mov.w	r3, #32
   1c726:	f3ef 8511 	mrs	r5, BASEPRI
   1c72a:	f383 8811 	msr	BASEPRI, r3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c72e:	4e20      	ldr	r6, [pc, #128]	; (1c7b0 <z_clock_announce+0x98>)
   1c730:	4f20      	ldr	r7, [pc, #128]	; (1c7b4 <z_clock_announce+0x9c>)
	return list->head == list;
   1c732:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1c7b8 <z_clock_announce+0xa0>
   1c736:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c738:	46b8      	mov	r8, r7
   1c73a:	f8d9 4000 	ldr.w	r4, [r9]
   1c73e:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c740:	454c      	cmp	r4, r9
   1c742:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1c746:	d005      	beq.n	1c754 <z_clock_announce+0x3c>
   1c748:	b124      	cbz	r4, 1c754 <z_clock_announce+0x3c>
   1c74a:	68a3      	ldr	r3, [r4, #8]
   1c74c:	4293      	cmp	r3, r2
   1c74e:	dd14      	ble.n	1c77a <z_clock_announce+0x62>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c750:	1a9b      	subs	r3, r3, r2
   1c752:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
   1c754:	eb1b 0002 	adds.w	r0, fp, r2
   1c758:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
   1c75c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1c75e:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1c762:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1c764:	f7ff ff48 	bl	1c5f8 <next_timeout>
   1c768:	4621      	mov	r1, r4
   1c76a:	f7e8 fc93 	bl	5094 <z_clock_set_timeout>
	__asm__ volatile(
   1c76e:	f385 8811 	msr	BASEPRI, r5
   1c772:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c776:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1c77a:	eb1b 0003 	adds.w	r0, fp, r3
   1c77e:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1c782:	1ad3      	subs	r3, r2, r3
   1c784:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1c786:	2300      	movs	r3, #0
		curr_tick += dt;
   1c788:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1c78c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1c78e:	4620      	mov	r0, r4
   1c790:	f7ff ff1e 	bl	1c5d0 <remove_timeout>
   1c794:	f385 8811 	msr	BASEPRI, r5
   1c798:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c79c:	68e3      	ldr	r3, [r4, #12]
   1c79e:	4798      	blx	r3
	__asm__ volatile(
   1c7a0:	f04f 0320 	mov.w	r3, #32
   1c7a4:	f3ef 8511 	mrs	r5, BASEPRI
   1c7a8:	f383 8811 	msr	BASEPRI, r3
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c7ac:	e7c5      	b.n	1c73a <z_clock_announce+0x22>
   1c7ae:	bf00      	nop
   1c7b0:	20001cf0 	.word	0x20001cf0
   1c7b4:	20000210 	.word	0x20000210
   1c7b8:	20007ec8 	.word	0x20007ec8

0001c7bc <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
   1c7bc:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1c7c0:	f04f 0320 	mov.w	r3, #32
   1c7c4:	f3ef 8411 	mrs	r4, BASEPRI
   1c7c8:	f383 8811 	msr	BASEPRI, r3
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1c7cc:	f7e8 fc9c 	bl	5108 <z_clock_elapsed>
   1c7d0:	4b07      	ldr	r3, [pc, #28]	; (1c7f0 <z_tick_get+0x34>)
   1c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c7d6:	eb12 0b00 	adds.w	fp, r2, r0
   1c7da:	f143 0c00 	adc.w	ip, r3, #0
   1c7de:	4658      	mov	r0, fp
   1c7e0:	4661      	mov	r1, ip
	__asm__ volatile(
   1c7e2:	f384 8811 	msr	BASEPRI, r4
   1c7e6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c7ea:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1c7ee:	bf00      	nop
   1c7f0:	20000210 	.word	0x20000210

0001c7f4 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   1c7f4:	6a02      	ldr	r2, [r0, #32]
   1c7f6:	2a00      	cmp	r2, #0
{
   1c7f8:	b538      	push	{r3, r4, r5, lr}
   1c7fa:	4604      	mov	r4, r0
	if (timer->period > 0) {
   1c7fc:	dd02      	ble.n	1c804 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c7fe:	490e      	ldr	r1, [pc, #56]	; (1c838 <z_timer_expiration_handler+0x44>)
   1c800:	f7ff ff22 	bl	1c648 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1;
   1c804:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c806:	3301      	adds	r3, #1
   1c808:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c80a:	69a3      	ldr	r3, [r4, #24]
   1c80c:	b10b      	cbz	r3, 1c812 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   1c80e:	4620      	mov	r0, r4
   1c810:	4798      	blx	r3
	return list->head == list;
   1c812:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c816:	42a5      	cmp	r5, r4
   1c818:	d00d      	beq.n	1c836 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c81a:	b165      	cbz	r5, 1c836 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1c81c:	4628      	mov	r0, r5
   1c81e:	f006 fa4c 	bl	22cba <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c822:	7b6b      	ldrb	r3, [r5, #13]
   1c824:	06db      	lsls	r3, r3, #27
   1c826:	d104      	bne.n	1c832 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   1c828:	69ab      	ldr	r3, [r5, #24]
   1c82a:	b913      	cbnz	r3, 1c832 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   1c82c:	4628      	mov	r0, r5
   1c82e:	f7ff fad1 	bl	1bdd4 <z_add_thread_to_ready_q>
   1c832:	2300      	movs	r3, #0
   1c834:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	z_set_thread_return_value(thread, 0);
}
   1c836:	bd38      	pop	{r3, r4, r5, pc}
   1c838:	0001c7f5 	.word	0x0001c7f5

0001c83c <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   1c83c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c840:	4e14      	ldr	r6, [pc, #80]	; (1c894 <z_impl_k_timer_start+0x58>)
   1c842:	2700      	movs	r7, #0
   1c844:	4604      	mov	r4, r0
   1c846:	4688      	mov	r8, r1
   1c848:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c84c:	4630      	mov	r0, r6
   1c84e:	4639      	mov	r1, r7
   1c850:	fbc5 0102 	smlal	r0, r1, r5, r2
   1c854:	2300      	movs	r3, #0
   1c856:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1c85a:	f7e3 fc41 	bl	e0 <__aeabi_ldivmod>
   1c85e:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = z_ms_to_ticks(period);
   1c860:	9000      	str	r0, [sp, #0]
   1c862:	4630      	mov	r0, r6
   1c864:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1c868:	2300      	movs	r3, #0
   1c86a:	fbc5 0108 	smlal	r0, r1, r5, r8
   1c86e:	f7e3 fc37 	bl	e0 <__aeabi_ldivmod>
	duration_in_ticks = z_ms_to_ticks(duration);
   1c872:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   1c874:	4620      	mov	r0, r4
   1c876:	f006 fba3 	bl	22fc0 <z_abort_timeout>
	timer->period = period_in_ticks;
   1c87a:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c87c:	4906      	ldr	r1, [pc, #24]	; (1c898 <z_impl_k_timer_start+0x5c>)
   1c87e:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
   1c880:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c882:	4620      	mov	r0, r4
	timer->status = 0;
   1c884:	2300      	movs	r3, #0
   1c886:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1c888:	b002      	add	sp, #8
   1c88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c88e:	f7ff bedb 	b.w	1c648 <z_add_timeout>
   1c892:	bf00      	nop
   1c894:	0004ffff 	.word	0x0004ffff
   1c898:	0001c7f5 	.word	0x0001c7f5

0001c89c <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1c89c:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1c89e:	7b44      	ldrb	r4, [r0, #13]
   1c8a0:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1c8a4:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1c8a6:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1c8a8:	f362 0141 	bfi	r1, r2, #1, #1
   1c8ac:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
   1c8ae:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
   1c8b0:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1c8b2:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1c8b4:	4a02      	ldr	r2, [pc, #8]	; (1c8c0 <k_poll_event_init+0x24>)
   1c8b6:	400a      	ands	r2, r1
	event->unused = 0;
	event->obj = obj;
   1c8b8:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1c8bc:	bd10      	pop	{r4, pc}
   1c8be:	bf00      	nop
   1c8c0:	00020fff 	.word	0x00020fff

0001c8c4 <z_impl_k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   1c8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, rc;
	k_spinlock_key_t key;

	struct _poller poller = { .thread = _current, .is_polling = true, };
   1c8c8:	4b46      	ldr	r3, [pc, #280]	; (1c9e4 <z_impl_k_poll+0x120>)
{
   1c8ca:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
   1c8cc:	689b      	ldr	r3, [r3, #8]
   1c8ce:	9300      	str	r3, [sp, #0]

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   1c8d0:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
   1c8d2:	2301      	movs	r3, #1
{
   1c8d4:	4607      	mov	r7, r0
   1c8d6:	468a      	mov	sl, r1
   1c8d8:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
   1c8da:	f88d 3004 	strb.w	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1c8de:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   1c8e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   1c8e4:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   1c8e6:	4556      	cmp	r6, sl
   1c8e8:	db15      	blt.n	1c916 <z_impl_k_poll+0x52>
	__asm__ volatile(
   1c8ea:	f04f 0320 	mov.w	r3, #32
   1c8ee:	f3ef 8611 	mrs	r6, BASEPRI
   1c8f2:	f383 8811 	msr	BASEPRI, r3
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1c8f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1c8fa:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1c8fe:	2b00      	cmp	r3, #0
   1c900:	d150      	bne.n	1c9a4 <z_impl_k_poll+0xe0>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, last_registered, key);
   1c902:	4632      	mov	r2, r6
   1c904:	4629      	mov	r1, r5
   1c906:	4638      	mov	r0, r7
   1c908:	f006 fbc0 	bl	2308c <clear_event_registrations>
	__asm__ volatile(
   1c90c:	f386 8811 	msr	BASEPRI, r6
   1c910:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1c914:	e052      	b.n	1c9bc <z_impl_k_poll+0xf8>
	__asm__ volatile(
   1c916:	f04f 0320 	mov.w	r3, #32
   1c91a:	f3ef 8b11 	mrs	fp, BASEPRI
   1c91e:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   1c922:	7b63      	ldrb	r3, [r4, #13]
   1c924:	f003 030f 	and.w	r3, r3, #15
   1c928:	2b02      	cmp	r3, #2
   1c92a:	d003      	beq.n	1c934 <z_impl_k_poll+0x70>
   1c92c:	2b04      	cmp	r3, #4
   1c92e:	d004      	beq.n	1c93a <z_impl_k_poll+0x76>
   1c930:	2b01      	cmp	r3, #1
   1c932:	d117      	bne.n	1c964 <z_impl_k_poll+0xa0>
		if (event->signal->signaled != 0) {
   1c934:	6922      	ldr	r2, [r4, #16]
   1c936:	6892      	ldr	r2, [r2, #8]
   1c938:	e001      	b.n	1c93e <z_impl_k_poll+0x7a>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1c93a:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   1c93c:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0) {
   1c93e:	b18a      	cbz	r2, 1c964 <z_impl_k_poll+0xa0>
	event->state |= state;
   1c940:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1c942:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
   1c946:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1c94a:	430b      	orrs	r3, r1
   1c94c:	f363 3210 	bfi	r2, r3, #12, #5
   1c950:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
   1c952:	f88d 9004 	strb.w	r9, [sp, #4]
	__asm__ volatile(
   1c956:	f38b 8811 	msr	BASEPRI, fp
   1c95a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c95e:	3601      	adds	r6, #1
   1c960:	3414      	adds	r4, #20
   1c962:	e7c0      	b.n	1c8e6 <z_impl_k_poll+0x22>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   1c964:	f1b8 0f00 	cmp.w	r8, #0
   1c968:	d0f5      	beq.n	1c956 <z_impl_k_poll+0x92>
   1c96a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1c96e:	2a00      	cmp	r2, #0
   1c970:	d0f1      	beq.n	1c956 <z_impl_k_poll+0x92>
	switch (event->type) {
   1c972:	2b02      	cmp	r3, #2
   1c974:	d007      	beq.n	1c986 <z_impl_k_poll+0xc2>
   1c976:	2b04      	cmp	r3, #4
   1c978:	d00f      	beq.n	1c99a <z_impl_k_poll+0xd6>
   1c97a:	2b01      	cmp	r3, #1
   1c97c:	d109      	bne.n	1c992 <z_impl_k_poll+0xce>
		add_event(&event->signal->poll_events, event, poller);
   1c97e:	466a      	mov	r2, sp
   1c980:	4621      	mov	r1, r4
   1c982:	6920      	ldr	r0, [r4, #16]
   1c984:	e003      	b.n	1c98e <z_impl_k_poll+0xca>
		add_event(&event->sem->poll_events, event, poller);
   1c986:	6920      	ldr	r0, [r4, #16]
   1c988:	466a      	mov	r2, sp
   1c98a:	4621      	mov	r1, r4
   1c98c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1c98e:	f006 fbd1 	bl	23134 <add_event>
	event->poller = poller;
   1c992:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   1c996:	3501      	adds	r5, #1
   1c998:	e7dd      	b.n	1c956 <z_impl_k_poll+0x92>
		add_event(&event->queue->poll_events, event, poller);
   1c99a:	6920      	ldr	r0, [r4, #16]
   1c99c:	466a      	mov	r2, sp
   1c99e:	4621      	mov	r1, r4
   1c9a0:	3008      	adds	r0, #8
   1c9a2:	e7f4      	b.n	1c98e <z_impl_k_poll+0xca>
	poller.is_polling = false;
   1c9a4:	2300      	movs	r3, #0
   1c9a6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   1c9aa:	f1b8 0f00 	cmp.w	r8, #0
   1c9ae:	d109      	bne.n	1c9c4 <z_impl_k_poll+0x100>
   1c9b0:	f386 8811 	msr	BASEPRI, r6
   1c9b4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c9b8:	f06f 040a 	mvn.w	r4, #10
}
   1c9bc:	4620      	mov	r0, r4
   1c9be:	b005      	add	sp, #20
   1c9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c9c4:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c9c6:	4643      	mov	r3, r8
   1c9c8:	4631      	mov	r1, r6
   1c9ca:	4807      	ldr	r0, [pc, #28]	; (1c9e8 <z_impl_k_poll+0x124>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c9cc:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c9d0:	f7ff fb2e 	bl	1c030 <z_pend_curr>
   1c9d4:	4604      	mov	r4, r0
	__asm__ volatile(
   1c9d6:	f04f 0320 	mov.w	r3, #32
   1c9da:	f3ef 8611 	mrs	r6, BASEPRI
   1c9de:	f383 8811 	msr	BASEPRI, r3
   1c9e2:	e78e      	b.n	1c902 <z_impl_k_poll+0x3e>
   1c9e4:	20001c38 	.word	0x20001c38
   1c9e8:	20002341 	.word	0x20002341

0001c9ec <z_impl_k_poll_signal_raise>:
	return 0;
}
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1c9ec:	b538      	push	{r3, r4, r5, lr}
   1c9ee:	f04f 0320 	mov.w	r3, #32
   1c9f2:	f3ef 8511 	mrs	r5, BASEPRI
   1c9f6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1c9fa:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1c9fc:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c9fe:	4298      	cmp	r0, r3
	signal->signaled = 1;
   1ca00:	f04f 0101 	mov.w	r1, #1
   1ca04:	6081      	str	r1, [r0, #8]
   1ca06:	d106      	bne.n	1ca16 <z_impl_k_poll_signal_raise+0x2a>
	__asm__ volatile(
   1ca08:	f385 8811 	msr	BASEPRI, r5
   1ca0c:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1ca10:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1ca12:	4620      	mov	r0, r4
   1ca14:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1ca16:	e9d3 2000 	ldrd	r2, r0, [r3]
   1ca1a:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1ca1c:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1ca1e:	2200      	movs	r2, #0
	node->prev = NULL;
   1ca20:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ca24:	4618      	mov	r0, r3
   1ca26:	f006 fb59 	bl	230dc <signal_poll_event>
	z_reschedule(&lock, key);
   1ca2a:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ca2c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1ca2e:	4802      	ldr	r0, [pc, #8]	; (1ca38 <z_impl_k_poll_signal_raise+0x4c>)
   1ca30:	f006 f95a 	bl	22ce8 <z_reschedule>
	return rc;
   1ca34:	e7ed      	b.n	1ca12 <z_impl_k_poll_signal_raise+0x26>
   1ca36:	bf00      	nop
   1ca38:	20002341 	.word	0x20002341

0001ca3c <prov_reset>:
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   1ca3c:	2003      	movs	r0, #3
   1ca3e:	f7ee bcd3 	b.w	b3e8 <bt_mesh_prov_enable>

0001ca42 <gpio_pin_enable_callback>:
	if (!api->enable_callback) {
   1ca42:	6843      	ldr	r3, [r0, #4]
   1ca44:	691b      	ldr	r3, [r3, #16]
 * Note: Depending on the driver implementation, this function will enable
 *       the pin to trigger an interruption. So as a semantic detail, if no
 *       callback is registered, of course none will be called.
 */
static inline int gpio_pin_enable_callback(struct device *port, u32_t pin)
{
   1ca46:	460a      	mov	r2, r1
	if (!api->enable_callback) {
   1ca48:	b10b      	cbz	r3, 1ca4e <gpio_pin_enable_callback+0xc>
	return api->enable_callback(port, access_op, pin);
   1ca4a:	2100      	movs	r1, #0
   1ca4c:	4718      	bx	r3
	return gpio_enable_callback(port, GPIO_ACCESS_BY_PIN, pin);
}
   1ca4e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1ca52:	4770      	bx	lr

0001ca54 <gpio_pin_configure>:
	return api->config(port, access_op, pin, flags);
   1ca54:	6843      	ldr	r3, [r0, #4]
{
   1ca56:	b410      	push	{r4}
	return api->config(port, access_op, pin, flags);
   1ca58:	681c      	ldr	r4, [r3, #0]
   1ca5a:	4613      	mov	r3, r2
   1ca5c:	46a4      	mov	ip, r4
   1ca5e:	460a      	mov	r2, r1
}
   1ca60:	bc10      	pop	{r4}
	return api->config(port, access_op, pin, flags);
   1ca62:	2100      	movs	r1, #0
   1ca64:	4760      	bx	ip

0001ca66 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1ca66:	b570      	push	{r4, r5, r6, lr}
   1ca68:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1ca6a:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1ca6e:	250c      	movs	r5, #12
   1ca70:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
   1ca72:	4288      	cmp	r0, r1
   1ca74:	eb06 0405 	add.w	r4, r6, r5
   1ca78:	bfb8      	it	lt
   1ca7a:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
   1ca7c:	2a00      	cmp	r2, #0
   1ca7e:	4610      	mov	r0, r2
   1ca80:	bfb8      	it	lt
   1ca82:	f102 001f 	addlt.w	r0, r2, #31
   1ca86:	1140      	asrs	r0, r0, #5
   1ca88:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1ca8c:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1ca8e:	f002 001f 	and.w	r0, r2, #31
   1ca92:	bd70      	pop	{r4, r5, r6, pc}

0001ca94 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   1ca94:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   1ca96:	ab01      	add	r3, sp, #4
   1ca98:	f7ff ffe5 	bl	1ca66 <get_bit_ptr>

	*word |= (1<<bit);
   1ca9c:	9a01      	ldr	r2, [sp, #4]
   1ca9e:	2301      	movs	r3, #1
   1caa0:	fa03 f000 	lsl.w	r0, r3, r0
   1caa4:	6813      	ldr	r3, [r2, #0]
   1caa6:	4303      	orrs	r3, r0
   1caa8:	6013      	str	r3, [r2, #0]
}
   1caaa:	b003      	add	sp, #12
   1caac:	f85d fb04 	ldr.w	pc, [sp], #4

0001cab0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   1cab0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   1cab2:	ab01      	add	r3, sp, #4
   1cab4:	f7ff ffd7 	bl	1ca66 <get_bit_ptr>

	*word &= ~(1<<bit);
   1cab8:	9a01      	ldr	r2, [sp, #4]
   1caba:	2301      	movs	r3, #1
   1cabc:	fa03 f000 	lsl.w	r0, r3, r0
   1cac0:	6813      	ldr	r3, [r2, #0]
   1cac2:	ea23 0300 	bic.w	r3, r3, r0
   1cac6:	6013      	str	r3, [r2, #0]
}
   1cac8:	b003      	add	sp, #12
   1caca:	f85d fb04 	ldr.w	pc, [sp], #4

0001cace <pool_irq_unlock.isra.5>:
	}
}

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1cace:	07c3      	lsls	r3, r0, #31
   1cad0:	d503      	bpl.n	1cada <pool_irq_unlock.isra.5+0xc>
   1cad2:	f381 8811 	msr	BASEPRI, r1
   1cad6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1cada:	4770      	bx	lr

0001cadc <z_sys_mem_pool_base_init>:
{
   1cadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1cae0:	6843      	ldr	r3, [r0, #4]
   1cae2:	8906      	ldrh	r6, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1cae4:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
   1cae6:	f890 c00a 	ldrb.w	ip, [r0, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1caea:	435e      	muls	r6, r3
	p->max_inline_level = -1;
   1caec:	22ff      	movs	r2, #255	; 0xff
{
   1caee:	4604      	mov	r4, r0
	p->max_inline_level = -1;
   1caf0:	72c2      	strb	r2, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1caf2:	4435      	add	r5, r6
	for (i = 0; i < p->n_levels; i++) {
   1caf4:	2000      	movs	r0, #0
		sys_dlist_init(&p->levels[i].free_list);
   1caf6:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
   1cafa:	4584      	cmp	ip, r0
   1cafc:	dc05      	bgt.n	1cb0a <z_sys_mem_pool_base_init+0x2e>
	for (i = 0; i < p->n_max; i++) {
   1cafe:	2500      	movs	r5, #0
   1cb00:	8923      	ldrh	r3, [r4, #8]
   1cb02:	42ab      	cmp	r3, r5
   1cb04:	dc21      	bgt.n	1cb4a <z_sys_mem_pool_base_init+0x6e>
}
   1cb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
   1cb0a:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
   1cb0e:	fbb6 f1f3 	udiv	r1, r6, r3
		sys_dlist_init(&p->levels[i].free_list);
   1cb12:	fb0e f700 	mul.w	r7, lr, r0
   1cb16:	eb08 0207 	add.w	r2, r8, r7
   1cb1a:	f102 0904 	add.w	r9, r2, #4
		if (nblocks < 32) {
   1cb1e:	291f      	cmp	r1, #31
	list->tail = (sys_dnode_t *)list;
   1cb20:	e9c2 9901 	strd	r9, r9, [r2, #4]
   1cb24:	dc06      	bgt.n	1cb34 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1cb26:	72e0      	strb	r0, [r4, #11]
		sz = _ALIGN4(sz / 4);
   1cb28:	089b      	lsrs	r3, r3, #2
   1cb2a:	3303      	adds	r3, #3
   1cb2c:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
   1cb30:	3001      	adds	r0, #1
   1cb32:	e7e2      	b.n	1cafa <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
   1cb34:	f111 021f 	adds.w	r2, r1, #31
   1cb38:	bf48      	it	mi
   1cb3a:	f101 023e 	addmi.w	r2, r1, #62	; 0x3e
   1cb3e:	1152      	asrs	r2, r2, #5
			p->levels[i].bits_p = bits;
   1cb40:	f848 5007 	str.w	r5, [r8, r7]
			bits += (nblocks + 31)/32;
   1cb44:	eb05 0582 	add.w	r5, r5, r2, lsl #2
   1cb48:	e7ee      	b.n	1cb28 <z_sys_mem_pool_base_init+0x4c>
	return (u8_t *)p->buf + lsz * block;
   1cb4a:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
   1cb4c:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
   1cb4e:	6820      	ldr	r0, [r4, #0]
   1cb50:	436a      	muls	r2, r5
   1cb52:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
   1cb54:	1d1e      	adds	r6, r3, #4
	node->next = list;
   1cb56:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
   1cb58:	689a      	ldr	r2, [r3, #8]
   1cb5a:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   1cb5c:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   1cb5e:	4620      	mov	r0, r4
   1cb60:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1cb62:	6099      	str	r1, [r3, #8]
   1cb64:	462a      	mov	r2, r5
   1cb66:	2100      	movs	r1, #0
   1cb68:	f7ff ff94 	bl	1ca94 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   1cb6c:	3501      	adds	r5, #1
   1cb6e:	e7c7      	b.n	1cb00 <z_sys_mem_pool_base_init+0x24>

0001cb70 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb74:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1, free_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1cb76:	7a85      	ldrb	r5, [r0, #10]
{
   1cb78:	af00      	add	r7, sp, #0
   1cb7a:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1cb7e:	00ab      	lsls	r3, r5, #2
   1cb80:	3307      	adds	r3, #7
   1cb82:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1cb86:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
   1cb8a:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1cb8c:	46ea      	mov	sl, sp
{
   1cb8e:	4604      	mov	r4, r0
	lsizes[0] = _ALIGN4(p->max_sz);
   1cb90:	3303      	adds	r3, #3
   1cb92:	4650      	mov	r0, sl
   1cb94:	f023 0303 	bic.w	r3, r3, #3
   1cb98:	f840 3904 	str.w	r3, [r0], #-4
	int i, from_l, alloc_l = -1, free_l = -1;
   1cb9c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
   1cba0:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
   1cba2:	f04f 0c0c 	mov.w	ip, #12
	for (i = 0; i < p->n_levels; i++) {
   1cba6:	429d      	cmp	r5, r3
   1cba8:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
   1cbac:	dd0a      	ble.n	1cbc4 <z_sys_mem_pool_block_alloc+0x54>
		if (i > 0) {
   1cbae:	b12b      	cbz	r3, 1cbbc <z_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   1cbb0:	6802      	ldr	r2, [r0, #0]
   1cbb2:	0892      	lsrs	r2, r2, #2
   1cbb4:	3203      	adds	r2, #3
   1cbb6:	f022 0203 	bic.w	r2, r2, #3
   1cbba:	6042      	str	r2, [r0, #4]
		}

		if (lsizes[i] < size) {
   1cbbc:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1cbc0:	428a      	cmp	r2, r1
   1cbc2:	d20b      	bcs.n	1cbdc <z_sys_mem_pool_block_alloc+0x6c>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
   1cbc4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1cbc8:	d113      	bne.n	1cbf2 <z_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
   1cbca:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1cbcc:	2300      	movs	r3, #0
   1cbce:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   1cbd0:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
   1cbd4:	3724      	adds	r7, #36	; 0x24
   1cbd6:	46bd      	mov	sp, r7
   1cbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
   1cbdc:	68e2      	ldr	r2, [r4, #12]
   1cbde:	fb0c 2203 	mla	r2, ip, r3, r2
   1cbe2:	f102 0e04 	add.w	lr, r2, #4
		if (!level_empty(p, i)) {
   1cbe6:	6852      	ldr	r2, [r2, #4]
   1cbe8:	4572      	cmp	r2, lr
   1cbea:	bf18      	it	ne
   1cbec:	461e      	movne	r6, r3
	for (i = 0; i < p->n_levels; i++) {
   1cbee:	3301      	adds	r3, #1
   1cbf0:	e7d9      	b.n	1cba6 <z_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
   1cbf2:	1c71      	adds	r1, r6, #1
   1cbf4:	d0e9      	beq.n	1cbca <z_sys_mem_pool_block_alloc+0x5a>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1cbf6:	7c23      	ldrb	r3, [r4, #16]
   1cbf8:	f013 0301 	ands.w	r3, r3, #1
   1cbfc:	d005      	beq.n	1cc0a <z_sys_mem_pool_block_alloc+0x9a>
	__asm__ volatile(
   1cbfe:	f04f 0220 	mov.w	r2, #32
   1cc02:	f3ef 8311 	mrs	r3, BASEPRI
   1cc06:	f382 8811 	msr	BASEPRI, r2
	return key;
   1cc0a:	68e2      	ldr	r2, [r4, #12]
	key = pool_irq_lock(p);
   1cc0c:	61fb      	str	r3, [r7, #28]
	for (i = free_l; i >= 0; i--) {
   1cc0e:	230c      	movs	r3, #12
   1cc10:	fb03 2306 	mla	r3, r3, r6, r2
	return list->head == list;
   1cc14:	461a      	mov	r2, r3
   1cc16:	f852 5f04 	ldr.w	r5, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   1cc1a:	4295      	cmp	r5, r2
   1cc1c:	d076      	beq.n	1cd0c <z_sys_mem_pool_block_alloc+0x19c>
	node->prev->next = node->next;
   1cc1e:	e9d5 3100 	ldrd	r3, r1, [r5]
   1cc22:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
   1cc24:	6059      	str	r1, [r3, #4]
	node->next = NULL;
   1cc26:	2300      	movs	r3, #0
	node->prev = NULL;
   1cc28:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1cc2c:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   1cc2e:	f85a 2026 	ldr.w	r2, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1cc32:	1aeb      	subs	r3, r5, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
   1cc34:	4631      	mov	r1, r6
   1cc36:	fb93 f2f2 	sdiv	r2, r3, r2
   1cc3a:	4620      	mov	r0, r4
   1cc3c:	f7ff ff38 	bl	1cab0 <clear_free_bit>
		if (data != NULL) {
   1cc40:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
   1cc44:	f106 0801 	add.w	r8, r6, #1
   1cc48:	61bb      	str	r3, [r7, #24]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1cc4a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1cc4e:	459b      	cmp	fp, r3
   1cc50:	dc12      	bgt.n	1cc78 <z_sys_mem_pool_block_alloc+0x108>
	pool_irq_unlock(p, key);
   1cc52:	7c20      	ldrb	r0, [r4, #16]
   1cc54:	69f9      	ldr	r1, [r7, #28]
   1cc56:	f7ff ff3a 	bl	1cace <pool_irq_unlock.isra.5>
	*level_p = alloc_l;
   1cc5a:	68bb      	ldr	r3, [r7, #8]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1cc5c:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
	*level_p = alloc_l;
   1cc60:	f8c3 b000 	str.w	fp, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1cc64:	6823      	ldr	r3, [r4, #0]
   1cc66:	1aeb      	subs	r3, r5, r3
   1cc68:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1cc6c:	687a      	ldr	r2, [r7, #4]
   1cc6e:	6013      	str	r3, [r2, #0]
	*data_p = data;
   1cc70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	return 0;
   1cc72:	2000      	movs	r0, #0
	*data_p = data;
   1cc74:	601d      	str	r5, [r3, #0]
	return 0;
   1cc76:	e7ad      	b.n	1cbd4 <z_sys_mem_pool_block_alloc+0x64>
	bn = block_num(p, block, lsizes[l]);
   1cc78:	69bb      	ldr	r3, [r7, #24]
   1cc7a:	f853 2b04 	ldr.w	r2, [r3], #4
   1cc7e:	61bb      	str	r3, [r7, #24]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1cc80:	6823      	ldr	r3, [r4, #0]
   1cc82:	1aeb      	subs	r3, r5, r3
   1cc84:	fb93 f3f2 	sdiv	r3, r3, r2
		int lbn = 4*bn + i;
   1cc88:	009b      	lsls	r3, r3, #2
   1cc8a:	60fb      	str	r3, [r7, #12]
   1cc8c:	230c      	movs	r3, #12
   1cc8e:	fb03 f308 	mul.w	r3, r3, r8
   1cc92:	613b      	str	r3, [r7, #16]
	for (i = 1; i < 4; i++) {
   1cc94:	f04f 0901 	mov.w	r9, #1
		int lsz = lsizes[l + 1];
   1cc98:	69bb      	ldr	r3, [r7, #24]
   1cc9a:	681e      	ldr	r6, [r3, #0]
		void *block2 = (lsz * i) + (char *)block;
   1cc9c:	fb09 f306 	mul.w	r3, r9, r6
   1cca0:	617b      	str	r3, [r7, #20]
   1cca2:	18eb      	adds	r3, r5, r3
   1cca4:	603b      	str	r3, [r7, #0]
		set_free_bit(p, l + 1, lbn);
   1cca6:	68fb      	ldr	r3, [r7, #12]
   1cca8:	4641      	mov	r1, r8
   1ccaa:	eb09 0203 	add.w	r2, r9, r3
   1ccae:	4620      	mov	r0, r4
   1ccb0:	f7ff fef0 	bl	1ca94 <set_free_bit>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   1ccb4:	683b      	ldr	r3, [r7, #0]
   1ccb6:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
   1ccb8:	8921      	ldrh	r1, [r4, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   1ccba:	3e01      	subs	r6, #1
   1ccbc:	441e      	add	r6, r3
   1ccbe:	1ab6      	subs	r6, r6, r2
	return p->n_max * p->max_sz;
   1ccc0:	6862      	ldr	r2, [r4, #4]
   1ccc2:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
   1ccc4:	4296      	cmp	r6, r2
   1ccc6:	d20a      	bcs.n	1ccde <z_sys_mem_pool_block_alloc+0x16e>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1ccc8:	68e2      	ldr	r2, [r4, #12]
   1ccca:	6939      	ldr	r1, [r7, #16]
	node->next = list;
   1cccc:	6978      	ldr	r0, [r7, #20]
   1ccce:	440a      	add	r2, r1
   1ccd0:	1d11      	adds	r1, r2, #4
   1ccd2:	5029      	str	r1, [r5, r0]
	node->prev = list->tail;
   1ccd4:	6891      	ldr	r1, [r2, #8]
   1ccd6:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
   1ccd8:	6891      	ldr	r1, [r2, #8]
   1ccda:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1ccdc:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
   1ccde:	f109 0901 	add.w	r9, r9, #1
   1cce2:	f1b9 0f04 	cmp.w	r9, #4
   1cce6:	d1d7      	bne.n	1cc98 <z_sys_mem_pool_block_alloc+0x128>
				pool_irq_unlock(p, key);
   1cce8:	69f9      	ldr	r1, [r7, #28]
   1ccea:	7c20      	ldrb	r0, [r4, #16]
   1ccec:	f7ff feef 	bl	1cace <pool_irq_unlock.isra.5>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ccf0:	7c23      	ldrb	r3, [r4, #16]
   1ccf2:	f013 0301 	ands.w	r3, r3, #1
   1ccf6:	d005      	beq.n	1cd04 <z_sys_mem_pool_block_alloc+0x194>
	__asm__ volatile(
   1ccf8:	f04f 0220 	mov.w	r2, #32
   1ccfc:	f3ef 8311 	mrs	r3, BASEPRI
   1cd00:	f382 8811 	msr	BASEPRI, r2
				key = pool_irq_lock(p);
   1cd04:	61fb      	str	r3, [r7, #28]
   1cd06:	f108 0801 	add.w	r8, r8, #1
   1cd0a:	e79e      	b.n	1cc4a <z_sys_mem_pool_block_alloc+0xda>
	for (i = free_l; i >= 0; i--) {
   1cd0c:	3e01      	subs	r6, #1
   1cd0e:	1c72      	adds	r2, r6, #1
   1cd10:	f1a3 030c 	sub.w	r3, r3, #12
   1cd14:	f47f af7e 	bne.w	1cc14 <z_sys_mem_pool_block_alloc+0xa4>
   1cd18:	2500      	movs	r5, #0
   1cd1a:	e79a      	b.n	1cc52 <z_sys_mem_pool_block_alloc+0xe2>

0001cd1c <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1cd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd20:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1cd22:	7a83      	ldrb	r3, [r0, #10]
   1cd24:	009b      	lsls	r3, r3, #2
   1cd26:	3307      	adds	r3, #7
   1cd28:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
   1cd2c:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1cd2e:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
   1cd32:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1cd34:	46e9      	mov	r9, sp
	lsizes[0] = _ALIGN4(p->max_sz);
   1cd36:	3303      	adds	r3, #3
   1cd38:	f023 0303 	bic.w	r3, r3, #3
{
   1cd3c:	4605      	mov	r5, r0
	lsizes[0] = _ALIGN4(p->max_sz);
   1cd3e:	f8c9 3000 	str.w	r3, [r9]
	for (i = 1; i <= level; i++) {
   1cd42:	464c      	mov	r4, r9
   1cd44:	2001      	movs	r0, #1
   1cd46:	4281      	cmp	r1, r0
   1cd48:	d218      	bcs.n	1cd7c <z_sys_mem_pool_block_free+0x60>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1cd4a:	7c2c      	ldrb	r4, [r5, #16]
   1cd4c:	f014 0401 	ands.w	r4, r4, #1
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1cd50:	4688      	mov	r8, r1
   1cd52:	4616      	mov	r6, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1cd54:	d005      	beq.n	1cd62 <z_sys_mem_pool_block_free+0x46>
   1cd56:	f04f 0320 	mov.w	r3, #32
   1cd5a:	f3ef 8411 	mrs	r4, BASEPRI
   1cd5e:	f383 8811 	msr	BASEPRI, r3
	while (level >= 0) {
   1cd62:	f1b8 0f00 	cmp.w	r8, #0
   1cd66:	da12      	bge.n	1cd8e <z_sys_mem_pool_block_free+0x72>
	return -1;
   1cd68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1cd6c:	4621      	mov	r1, r4
   1cd6e:	7c28      	ldrb	r0, [r5, #16]
   1cd70:	f7ff fead 	bl	1cace <pool_irq_unlock.isra.5>
}
   1cd74:	371c      	adds	r7, #28
   1cd76:	46bd      	mov	sp, r7
   1cd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   1cd7c:	6823      	ldr	r3, [r4, #0]
   1cd7e:	089b      	lsrs	r3, r3, #2
   1cd80:	3303      	adds	r3, #3
   1cd82:	f023 0303 	bic.w	r3, r3, #3
   1cd86:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
   1cd8a:	3001      	adds	r0, #1
   1cd8c:	e7db      	b.n	1cd46 <z_sys_mem_pool_block_free+0x2a>
		int i, lsz = lsizes[level];
   1cd8e:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
   1cd92:	60fb      	str	r3, [r7, #12]
	return (u8_t *)p->buf + lsz * block;
   1cd94:	fb03 fb06 	mul.w	fp, r3, r6
   1cd98:	682b      	ldr	r3, [r5, #0]
   1cd9a:	60bb      	str	r3, [r7, #8]
		set_free_bit(p, level, bn);
   1cd9c:	4632      	mov	r2, r6
   1cd9e:	4641      	mov	r1, r8
   1cda0:	4628      	mov	r0, r5
	return (u8_t *)p->buf + lsz * block;
   1cda2:	eb03 0a0b 	add.w	sl, r3, fp
		set_free_bit(p, level, bn);
   1cda6:	f7ff fe75 	bl	1ca94 <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
   1cdaa:	68ea      	ldr	r2, [r5, #12]
   1cdac:	230c      	movs	r3, #12
   1cdae:	fb03 2208 	mla	r2, r3, r8, r2
	node->next = list;
   1cdb2:	68bb      	ldr	r3, [r7, #8]
   1cdb4:	1d11      	adds	r1, r2, #4
   1cdb6:	f843 100b 	str.w	r1, [r3, fp]
	node->prev = list->tail;
   1cdba:	6893      	ldr	r3, [r2, #8]
   1cdbc:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
   1cdc0:	6893      	ldr	r3, [r2, #8]
   1cdc2:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
   1cdc6:	f8c2 a008 	str.w	sl, [r2, #8]
		pool_irq_unlock(p, key);
   1cdca:	4621      	mov	r1, r4
   1cdcc:	7c28      	ldrb	r0, [r5, #16]
   1cdce:	f7ff fe7e 	bl	1cace <pool_irq_unlock.isra.5>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1cdd2:	7c2c      	ldrb	r4, [r5, #16]
   1cdd4:	f014 0401 	ands.w	r4, r4, #1
   1cdd8:	d005      	beq.n	1cde6 <z_sys_mem_pool_block_free+0xca>
   1cdda:	f04f 0320 	mov.w	r3, #32
   1cdde:	f3ef 8411 	mrs	r4, BASEPRI
   1cde2:	f383 8811 	msr	BASEPRI, r3
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   1cde6:	f1b8 0f00 	cmp.w	r8, #0
   1cdea:	d0bf      	beq.n	1cd6c <z_sys_mem_pool_block_free+0x50>
	int bit = get_bit_ptr(p, level, bn, &word);
   1cdec:	f107 0314 	add.w	r3, r7, #20
   1cdf0:	4632      	mov	r2, r6
   1cdf2:	4641      	mov	r1, r8
   1cdf4:	4628      	mov	r0, r5
   1cdf6:	f7ff fe36 	bl	1ca66 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1cdfa:	697a      	ldr	r2, [r7, #20]
   1cdfc:	2800      	cmp	r0, #0
   1cdfe:	bfb8      	it	lt
   1ce00:	3003      	addlt	r0, #3
   1ce02:	f020 0303 	bic.w	r3, r0, #3
   1ce06:	6810      	ldr	r0, [r2, #0]
   1ce08:	40d8      	lsrs	r0, r3
   1ce0a:	f000 000f 	and.w	r0, r0, #15
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   1ce0e:	280f      	cmp	r0, #15
   1ce10:	d1ac      	bne.n	1cd6c <z_sys_mem_pool_block_free+0x50>
			int b = (bn & ~3) + i;
   1ce12:	f026 0303 	bic.w	r3, r6, #3
   1ce16:	60bb      	str	r3, [r7, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   1ce18:	68fb      	ldr	r3, [r7, #12]
   1ce1a:	3b01      	subs	r3, #1
		for (i = 0; i < 4; i++) {
   1ce1c:	f04f 0a00 	mov.w	sl, #0
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   1ce20:	607b      	str	r3, [r7, #4]
			int b = (bn & ~3) + i;
   1ce22:	68bb      	ldr	r3, [r7, #8]
	return p->n_max * p->max_sz;
   1ce24:	f8b5 c008 	ldrh.w	ip, [r5, #8]
   1ce28:	6869      	ldr	r1, [r5, #4]
			int b = (bn & ~3) + i;
   1ce2a:	eb03 020a 	add.w	r2, r3, sl
	return (u8_t *)p->buf + lsz * block;
   1ce2e:	68fb      	ldr	r3, [r7, #12]
   1ce30:	fb03 fb02 	mul.w	fp, r3, r2
			if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
   1ce34:	687b      	ldr	r3, [r7, #4]
	return p->n_max * p->max_sz;
   1ce36:	fb01 f10c 	mul.w	r1, r1, ip
			if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
   1ce3a:	eb03 000b 	add.w	r0, r3, fp
   1ce3e:	4288      	cmp	r0, r1
   1ce40:	d20f      	bcs.n	1ce62 <z_sys_mem_pool_block_free+0x146>
				clear_free_bit(p, level, b);
   1ce42:	4641      	mov	r1, r8
   1ce44:	4628      	mov	r0, r5
   1ce46:	f7ff fe33 	bl	1cab0 <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
   1ce4a:	682a      	ldr	r2, [r5, #0]
   1ce4c:	eb02 010b 	add.w	r1, r2, fp
	node->prev->next = node->next;
   1ce50:	f852 000b 	ldr.w	r0, [r2, fp]
   1ce54:	684b      	ldr	r3, [r1, #4]
   1ce56:	6018      	str	r0, [r3, #0]
	node->next->prev = node->prev;
   1ce58:	6043      	str	r3, [r0, #4]
	node->next = NULL;
   1ce5a:	2300      	movs	r3, #0
   1ce5c:	f842 300b 	str.w	r3, [r2, fp]
	node->prev = NULL;
   1ce60:	604b      	str	r3, [r1, #4]
		for (i = 0; i < 4; i++) {
   1ce62:	f10a 0a01 	add.w	sl, sl, #1
   1ce66:	f1ba 0f04 	cmp.w	sl, #4
   1ce6a:	d1da      	bne.n	1ce22 <z_sys_mem_pool_block_free+0x106>
		bn = bn / 4;
   1ce6c:	2e00      	cmp	r6, #0
   1ce6e:	bfb8      	it	lt
   1ce70:	3603      	addlt	r6, #3
		level = level - 1;
   1ce72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1ce76:	10b6      	asrs	r6, r6, #2
   1ce78:	e773      	b.n	1cd62 <z_sys_mem_pool_block_free+0x46>

0001ce7a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ce7a:	b508      	push	{r3, lr}
   1ce7c:	4604      	mov	r4, r0
   1ce7e:	4608      	mov	r0, r1
   1ce80:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1ce82:	461a      	mov	r2, r3
   1ce84:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   1ce86:	f7ff f9e9 	bl	1c25c <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   1ce8a:	f7e8 fc33 	bl	56f4 <z_impl_k_thread_abort>

0001ce8e <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1ce8e:	b510      	push	{r4, lr}
   1ce90:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1ce92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ce96:	4620      	mov	r0, r4
   1ce98:	f005 fe9c 	bl	22bd4 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1ce9c:	4603      	mov	r3, r0
   1ce9e:	2800      	cmp	r0, #0
   1cea0:	d0f7      	beq.n	1ce92 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cea2:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1cea4:	6842      	ldr	r2, [r0, #4]
   1cea6:	f3bf 8f5b 	dmb	ish
   1ceaa:	e853 1f00 	ldrex	r1, [r3]
   1ceae:	f021 0c01 	bic.w	ip, r1, #1
   1ceb2:	e843 ce00 	strex	lr, ip, [r3]
   1ceb6:	f1be 0f00 	cmp.w	lr, #0
   1ceba:	d1f6      	bne.n	1ceaa <z_work_q_main+0x1c>
   1cebc:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1cec0:	07cb      	lsls	r3, r1, #31
   1cec2:	d500      	bpl.n	1cec6 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1cec4:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1cec6:	f7ff f91d 	bl	1c104 <z_impl_k_yield>
   1ceca:	e7e2      	b.n	1ce92 <z_work_q_main+0x4>

0001cecc <z_arch_printk_char_out>:
}
   1cecc:	2000      	movs	r0, #0
   1cece:	4770      	bx	lr

0001ced0 <print_err>:
{
   1ced0:	b570      	push	{r4, r5, r6, lr}
   1ced2:	4604      	mov	r4, r0
   1ced4:	460d      	mov	r5, r1
	out('E', ctx);
   1ced6:	2045      	movs	r0, #69	; 0x45
   1ced8:	47a0      	blx	r4
	out('R', ctx);
   1ceda:	4629      	mov	r1, r5
   1cedc:	2052      	movs	r0, #82	; 0x52
   1cede:	47a0      	blx	r4
	out('R', ctx);
   1cee0:	4629      	mov	r1, r5
   1cee2:	4623      	mov	r3, r4
   1cee4:	2052      	movs	r0, #82	; 0x52
}
   1cee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1ceea:	4718      	bx	r3

0001ceec <str_out>:
{
   1ceec:	b530      	push	{r4, r5, lr}
   1ceee:	688a      	ldr	r2, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
   1cef0:	680c      	ldr	r4, [r1, #0]
   1cef2:	1c55      	adds	r5, r2, #1
   1cef4:	b114      	cbz	r4, 1cefc <str_out+0x10>
   1cef6:	684b      	ldr	r3, [r1, #4]
   1cef8:	4293      	cmp	r3, r2
   1cefa:	dc01      	bgt.n	1cf00 <str_out+0x14>
		ctx->count++;
   1cefc:	608d      	str	r5, [r1, #8]
}
   1cefe:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1cf00:	3b01      	subs	r3, #1
   1cf02:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1cf04:	bf08      	it	eq
   1cf06:	2200      	moveq	r2, #0
   1cf08:	608d      	str	r5, [r1, #8]
   1cf0a:	bf0c      	ite	eq
   1cf0c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1cf0e:	54a0      	strbne	r0, [r4, r2]
   1cf10:	e7f5      	b.n	1cefe <str_out+0x12>

0001cf12 <_vprintk>:
{
   1cf12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf16:	b08b      	sub	sp, #44	; 0x2c
   1cf18:	461c      	mov	r4, r3
	int long_ctr = 0;
   1cf1a:	f04f 0900 	mov.w	r9, #0
   1cf1e:	1e53      	subs	r3, r2, #1
{
   1cf20:	4605      	mov	r5, r0
   1cf22:	460e      	mov	r6, r1
   1cf24:	9303      	str	r3, [sp, #12]
	int min_width = -1;
   1cf26:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1cf2a:	464f      	mov	r7, r9
			might_format = 0;
   1cf2c:	f04f 0b00 	mov.w	fp, #0
						break;
   1cf30:	e007      	b.n	1cf42 <_vprintk+0x30>
		if (!might_format) {
   1cf32:	f1bb 0f00 	cmp.w	fp, #0
   1cf36:	d10d      	bne.n	1cf54 <_vprintk+0x42>
			if (*fmt != '%') {
   1cf38:	2825      	cmp	r0, #37	; 0x25
   1cf3a:	f000 812e 	beq.w	1d19a <_vprintk+0x288>
				out((int)*fmt, ctx);
   1cf3e:	4631      	mov	r1, r6
   1cf40:	47a8      	blx	r5
	while (*fmt) {
   1cf42:	9b03      	ldr	r3, [sp, #12]
   1cf44:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1cf48:	9303      	str	r3, [sp, #12]
   1cf4a:	2800      	cmp	r0, #0
   1cf4c:	d1f1      	bne.n	1cf32 <_vprintk+0x20>
}
   1cf4e:	b00b      	add	sp, #44	; 0x2c
   1cf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1cf54:	2864      	cmp	r0, #100	; 0x64
   1cf56:	d05f      	beq.n	1d018 <_vprintk+0x106>
   1cf58:	d819      	bhi.n	1cf8e <_vprintk+0x7c>
   1cf5a:	2839      	cmp	r0, #57	; 0x39
   1cf5c:	d80a      	bhi.n	1cf74 <_vprintk+0x62>
   1cf5e:	2831      	cmp	r0, #49	; 0x31
   1cf60:	d24e      	bcs.n	1d000 <_vprintk+0xee>
   1cf62:	282d      	cmp	r0, #45	; 0x2d
   1cf64:	f000 8120 	beq.w	1d1a8 <_vprintk+0x296>
   1cf68:	2830      	cmp	r0, #48	; 0x30
   1cf6a:	d03d      	beq.n	1cfe8 <_vprintk+0xd6>
   1cf6c:	2825      	cmp	r0, #37	; 0x25
   1cf6e:	d107      	bne.n	1cf80 <_vprintk+0x6e>
				out((int)'%', ctx);
   1cf70:	4631      	mov	r1, r6
   1cf72:	e110      	b.n	1d196 <_vprintk+0x284>
			switch (*fmt) {
   1cf74:	2858      	cmp	r0, #88	; 0x58
   1cf76:	f000 80a3 	beq.w	1d0c0 <_vprintk+0x1ae>
   1cf7a:	2863      	cmp	r0, #99	; 0x63
   1cf7c:	f000 8108 	beq.w	1d190 <_vprintk+0x27e>
				out((int)'%', ctx);
   1cf80:	4631      	mov	r1, r6
   1cf82:	2025      	movs	r0, #37	; 0x25
   1cf84:	47a8      	blx	r5
				out((int)*fmt, ctx);
   1cf86:	9b03      	ldr	r3, [sp, #12]
   1cf88:	4631      	mov	r1, r6
   1cf8a:	7818      	ldrb	r0, [r3, #0]
   1cf8c:	e103      	b.n	1d196 <_vprintk+0x284>
			switch (*fmt) {
   1cf8e:	2870      	cmp	r0, #112	; 0x70
   1cf90:	f000 808d 	beq.w	1d0ae <_vprintk+0x19c>
   1cf94:	d806      	bhi.n	1cfa4 <_vprintk+0x92>
   1cf96:	2869      	cmp	r0, #105	; 0x69
   1cf98:	d03e      	beq.n	1d018 <_vprintk+0x106>
   1cf9a:	286c      	cmp	r0, #108	; 0x6c
   1cf9c:	d039      	beq.n	1d012 <_vprintk+0x100>
   1cf9e:	2868      	cmp	r0, #104	; 0x68
   1cfa0:	d0cf      	beq.n	1cf42 <_vprintk+0x30>
   1cfa2:	e7ed      	b.n	1cf80 <_vprintk+0x6e>
   1cfa4:	2875      	cmp	r0, #117	; 0x75
   1cfa6:	d06b      	beq.n	1d080 <_vprintk+0x16e>
   1cfa8:	d81a      	bhi.n	1cfe0 <_vprintk+0xce>
   1cfaa:	2873      	cmp	r0, #115	; 0x73
   1cfac:	d1e8      	bne.n	1cf80 <_vprintk+0x6e>
				char *s = va_arg(ap, char *);
   1cfae:	f854 bb04 	ldr.w	fp, [r4], #4
				while (*s)
   1cfb2:	46da      	mov	sl, fp
   1cfb4:	4652      	mov	r2, sl
   1cfb6:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1cfba:	2800      	cmp	r0, #0
   1cfbc:	f040 80e5 	bne.w	1d18a <_vprintk+0x278>
				if (padding == PAD_SPACE_AFTER) {
   1cfc0:	2f03      	cmp	r7, #3
   1cfc2:	f040 80f5 	bne.w	1d1b0 <_vprintk+0x29e>
					int remaining = min_width - (s - start);
   1cfc6:	eba2 0b0b 	sub.w	fp, r2, fp
   1cfca:	eba8 0b0b 	sub.w	fp, r8, fp
					while (remaining-- > 0) {
   1cfce:	f1bb 0f00 	cmp.w	fp, #0
   1cfd2:	ddab      	ble.n	1cf2c <_vprintk+0x1a>
						out(' ', ctx);
   1cfd4:	4631      	mov	r1, r6
   1cfd6:	2020      	movs	r0, #32
   1cfd8:	47a8      	blx	r5
   1cfda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1cfde:	e7f6      	b.n	1cfce <_vprintk+0xbc>
			switch (*fmt) {
   1cfe0:	2878      	cmp	r0, #120	; 0x78
   1cfe2:	d06d      	beq.n	1d0c0 <_vprintk+0x1ae>
   1cfe4:	287a      	cmp	r0, #122	; 0x7a
   1cfe6:	e7db      	b.n	1cfa0 <_vprintk+0x8e>
				if (min_width < 0 && padding == PAD_NONE) {
   1cfe8:	f1b8 0f00 	cmp.w	r8, #0
   1cfec:	da0b      	bge.n	1d006 <_vprintk+0xf4>
   1cfee:	2f00      	cmp	r7, #0
   1cff0:	f000 80dc 	beq.w	1d1ac <_vprintk+0x29a>
					min_width = *fmt - '0';
   1cff4:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1cff8:	2f00      	cmp	r7, #0
   1cffa:	bf08      	it	eq
   1cffc:	2702      	moveq	r7, #2
   1cffe:	e7a0      	b.n	1cf42 <_vprintk+0x30>
				if (min_width < 0) {
   1d000:	f1b8 0f00 	cmp.w	r8, #0
   1d004:	dbf6      	blt.n	1cff4 <_vprintk+0xe2>
					min_width = 10 * min_width + *fmt - '0';
   1d006:	220a      	movs	r2, #10
   1d008:	fb02 0808 	mla	r8, r2, r8, r0
   1d00c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   1d010:	e7f2      	b.n	1cff8 <_vprintk+0xe6>
				long_ctr++;
   1d012:	f109 0901 	add.w	r9, r9, #1
   1d016:	e794      	b.n	1cf42 <_vprintk+0x30>
				if (long_ctr == 0) {
   1d018:	f1b9 0f00 	cmp.w	r9, #0
   1d01c:	d114      	bne.n	1d048 <_vprintk+0x136>
					long ld = va_arg(ap, long);
   1d01e:	f854 ab04 	ldr.w	sl, [r4], #4
				if (d < 0) {
   1d022:	f1ba 0f00 	cmp.w	sl, #0
   1d026:	da06      	bge.n	1d036 <_vprintk+0x124>
					out((int)'-', ctx);
   1d028:	4631      	mov	r1, r6
   1d02a:	202d      	movs	r0, #45	; 0x2d
   1d02c:	47a8      	blx	r5
					d = -d;
   1d02e:	f1ca 0a00 	rsb	sl, sl, #0
					min_width--;
   1d032:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1d036:	f8cd 8000 	str.w	r8, [sp]
   1d03a:	463b      	mov	r3, r7
   1d03c:	4652      	mov	r2, sl
				_printk_dec_ulong(out, ctx, u, padding,
   1d03e:	4631      	mov	r1, r6
   1d040:	4628      	mov	r0, r5
   1d042:	f7e6 f8f3 	bl	322c <_printk_dec_ulong>
				break;
   1d046:	e771      	b.n	1cf2c <_vprintk+0x1a>
				} else if (long_ctr == 1) {
   1d048:	f1b9 0f01 	cmp.w	r9, #1
   1d04c:	d0e7      	beq.n	1d01e <_vprintk+0x10c>
					long long lld = va_arg(ap, long long);
   1d04e:	3407      	adds	r4, #7
   1d050:	f024 0407 	bic.w	r4, r4, #7
   1d054:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
					if (lld > INT32_MAX ||
   1d058:	f11a 4300 	adds.w	r3, sl, #2147483648	; 0x80000000
   1d05c:	9306      	str	r3, [sp, #24]
   1d05e:	f14b 0300 	adc.w	r3, fp, #0
   1d062:	9307      	str	r3, [sp, #28]
   1d064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1d068:	2300      	movs	r3, #0
   1d06a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d06e:	428b      	cmp	r3, r1
   1d070:	bf08      	it	eq
   1d072:	4282      	cmpeq	r2, r0
   1d074:	d2d5      	bcs.n	1d022 <_vprintk+0x110>
						print_err(out, ctx);
   1d076:	4631      	mov	r1, r6
   1d078:	4628      	mov	r0, r5
   1d07a:	f7ff ff29 	bl	1ced0 <print_err>
   1d07e:	e755      	b.n	1cf2c <_vprintk+0x1a>
				if (long_ctr == 0) {
   1d080:	f1b9 0f00 	cmp.w	r9, #0
   1d084:	d105      	bne.n	1d092 <_vprintk+0x180>
					long lu = va_arg(ap, unsigned long);
   1d086:	f854 2b04 	ldr.w	r2, [r4], #4
				_printk_dec_ulong(out, ctx, u, padding,
   1d08a:	f8cd 8000 	str.w	r8, [sp]
   1d08e:	463b      	mov	r3, r7
   1d090:	e7d5      	b.n	1d03e <_vprintk+0x12c>
				} else if (long_ctr == 1) {
   1d092:	f1b9 0f01 	cmp.w	r9, #1
   1d096:	d0f6      	beq.n	1d086 <_vprintk+0x174>
					unsigned long long llu =
   1d098:	3407      	adds	r4, #7
   1d09a:	f024 0407 	bic.w	r4, r4, #7
   1d09e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > INT32_MAX) {
   1d0a2:	2b00      	cmp	r3, #0
   1d0a4:	bf08      	it	eq
   1d0a6:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
   1d0aa:	d3ee      	bcc.n	1d08a <_vprintk+0x178>
   1d0ac:	e7e3      	b.n	1d076 <_vprintk+0x164>
				  out('0', ctx);
   1d0ae:	4631      	mov	r1, r6
   1d0b0:	2030      	movs	r0, #48	; 0x30
   1d0b2:	47a8      	blx	r5
				  out('x', ctx);
   1d0b4:	4631      	mov	r1, r6
   1d0b6:	2078      	movs	r0, #120	; 0x78
   1d0b8:	47a8      	blx	r5
				  min_width = 8;
   1d0ba:	f04f 0808 	mov.w	r8, #8
				  padding = PAD_ZERO_BEFORE;
   1d0be:	2701      	movs	r7, #1
				if (long_ctr < 2) {
   1d0c0:	f1b9 0f01 	cmp.w	r9, #1
   1d0c4:	dc26      	bgt.n	1d114 <_vprintk+0x202>
					x = va_arg(ap, unsigned long);
   1d0c6:	f854 3b04 	ldr.w	r3, [r4], #4
   1d0ca:	9308      	str	r3, [sp, #32]
   1d0cc:	2300      	movs	r3, #0
	int remaining = 16; /* 16 digits max */
   1d0ce:	2210      	movs	r2, #16
	int digits = 0;
   1d0d0:	f04f 0a00 	mov.w	sl, #0
					x = va_arg(ap, unsigned long long);
   1d0d4:	9304      	str	r3, [sp, #16]
	int found_largest_digit = 0;
   1d0d6:	f8cd a014 	str.w	sl, [sp, #20]
	int size = sizeof(num) * 2;
   1d0da:	4611      	mov	r1, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   1d0dc:	1e4b      	subs	r3, r1, #1
   1d0de:	0098      	lsls	r0, r3, #2
   1d0e0:	9302      	str	r3, [sp, #8]
   1d0e2:	9b08      	ldr	r3, [sp, #32]
   1d0e4:	f1c0 0e20 	rsb	lr, r0, #32
   1d0e8:	f1a0 0c20 	sub.w	ip, r0, #32
   1d0ec:	fa23 f000 	lsr.w	r0, r3, r0
   1d0f0:	9b04      	ldr	r3, [sp, #16]
   1d0f2:	fa03 fe0e 	lsl.w	lr, r3, lr
   1d0f6:	ea40 000e 	orr.w	r0, r0, lr
   1d0fa:	fa23 fc0c 	lsr.w	ip, r3, ip
   1d0fe:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble || found_largest_digit || size == 1) {
   1d102:	f010 000f 	ands.w	r0, r0, #15
   1d106:	d112      	bne.n	1d12e <_vprintk+0x21c>
   1d108:	9b05      	ldr	r3, [sp, #20]
   1d10a:	b90b      	cbnz	r3, 1d110 <_vprintk+0x1fe>
   1d10c:	2901      	cmp	r1, #1
   1d10e:	d12c      	bne.n	1d16a <_vprintk+0x258>
			nibble += nibble > 9 ? 87 : 48;
   1d110:	2130      	movs	r1, #48	; 0x30
   1d112:	e010      	b.n	1d136 <_vprintk+0x224>
					x = va_arg(ap, unsigned long long);
   1d114:	3407      	adds	r4, #7
   1d116:	f024 0207 	bic.w	r2, r4, #7
   1d11a:	4614      	mov	r4, r2
   1d11c:	f854 3b08 	ldr.w	r3, [r4], #8
   1d120:	9308      	str	r3, [sp, #32]
   1d122:	6853      	ldr	r3, [r2, #4]
   1d124:	e7d3      	b.n	1d0ce <_vprintk+0x1bc>
			found_largest_digit = 1;
   1d126:	f8cd b014 	str.w	fp, [sp, #20]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   1d12a:	9902      	ldr	r1, [sp, #8]
   1d12c:	e7d6      	b.n	1d0dc <_vprintk+0x1ca>
			nibble += nibble > 9 ? 87 : 48;
   1d12e:	2809      	cmp	r0, #9
   1d130:	bf8c      	ite	hi
   1d132:	2157      	movhi	r1, #87	; 0x57
   1d134:	2130      	movls	r1, #48	; 0x30
   1d136:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1d138:	b240      	sxtb	r0, r0
   1d13a:	4631      	mov	r1, r6
   1d13c:	9205      	str	r2, [sp, #20]
   1d13e:	47a8      	blx	r5
	for (; size; size--) {
   1d140:	9b02      	ldr	r3, [sp, #8]
   1d142:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1d144:	f10a 0a01 	add.w	sl, sl, #1
	for (; size; size--) {
   1d148:	2b00      	cmp	r3, #0
   1d14a:	d1ec      	bne.n	1d126 <_vprintk+0x214>
	if (padding == PAD_SPACE_AFTER) {
   1d14c:	2f03      	cmp	r7, #3
   1d14e:	f47f aeed 	bne.w	1cf2c <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1d152:	ebca 0a48 	rsb	sl, sl, r8, lsl #1
		while (remaining-- > 0) {
   1d156:	f1ba 0f00 	cmp.w	sl, #0
   1d15a:	f77f aee7 	ble.w	1cf2c <_vprintk+0x1a>
			out(' ', ctx);
   1d15e:	4631      	mov	r1, r6
   1d160:	2020      	movs	r0, #32
   1d162:	47a8      	blx	r5
   1d164:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1d168:	e7f5      	b.n	1d156 <_vprintk+0x244>
		if (remaining-- <= min_width) {
   1d16a:	1e53      	subs	r3, r2, #1
   1d16c:	4590      	cmp	r8, r2
   1d16e:	9309      	str	r3, [sp, #36]	; 0x24
   1d170:	db04      	blt.n	1d17c <_vprintk+0x26a>
			if (padding == PAD_ZERO_BEFORE) {
   1d172:	2f01      	cmp	r7, #1
   1d174:	d104      	bne.n	1d180 <_vprintk+0x26e>
				out('0', ctx);
   1d176:	4631      	mov	r1, r6
   1d178:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   1d17a:	47a8      	blx	r5
					x = va_arg(ap, unsigned long);
   1d17c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d17e:	e7d4      	b.n	1d12a <_vprintk+0x218>
			} else if (padding == PAD_SPACE_BEFORE) {
   1d180:	2f02      	cmp	r7, #2
   1d182:	d1fb      	bne.n	1d17c <_vprintk+0x26a>
				out(' ', ctx);
   1d184:	4631      	mov	r1, r6
   1d186:	2020      	movs	r0, #32
   1d188:	e7f7      	b.n	1d17a <_vprintk+0x268>
					out((int)(*s++), ctx);
   1d18a:	4631      	mov	r1, r6
   1d18c:	47a8      	blx	r5
   1d18e:	e711      	b.n	1cfb4 <_vprintk+0xa2>
				out(c, ctx);
   1d190:	f854 0b04 	ldr.w	r0, [r4], #4
   1d194:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   1d196:	47a8      	blx	r5
				break;
   1d198:	e6c8      	b.n	1cf2c <_vprintk+0x1a>
				long_ctr = 0;
   1d19a:	46d9      	mov	r9, fp
				padding = PAD_NONE;
   1d19c:	465f      	mov	r7, fp
				min_width = -1;
   1d19e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
   1d1a2:	f04f 0b01 	mov.w	fp, #1
   1d1a6:	e6cc      	b.n	1cf42 <_vprintk+0x30>
				padding = PAD_SPACE_AFTER;
   1d1a8:	2703      	movs	r7, #3
   1d1aa:	e6ca      	b.n	1cf42 <_vprintk+0x30>
					padding = PAD_ZERO_BEFORE;
   1d1ac:	2701      	movs	r7, #1
   1d1ae:	e6c8      	b.n	1cf42 <_vprintk+0x30>
			might_format = 0;
   1d1b0:	4683      	mov	fp, r0
		++fmt;
   1d1b2:	e6c6      	b.n	1cf42 <_vprintk+0x30>

0001d1b4 <printk>:
{
   1d1b4:	b40f      	push	{r0, r1, r2, r3}
   1d1b6:	b507      	push	{r0, r1, r2, lr}
   1d1b8:	a904      	add	r1, sp, #16
   1d1ba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1d1be:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1d1c0:	f7e6 f88a 	bl	32d8 <vprintk>
}
   1d1c4:	b003      	add	sp, #12
   1d1c6:	f85d eb04 	ldr.w	lr, [sp], #4
   1d1ca:	b004      	add	sp, #16
   1d1cc:	4770      	bx	lr

0001d1ce <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
   1d1ce:	4770      	bx	lr

0001d1d0 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   1d1d0:	428b      	cmp	r3, r1
{
   1d1d2:	b538      	push	{r3, r4, r5, lr}
   1d1d4:	4615      	mov	r5, r2
   1d1d6:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d1d8:	d805      	bhi.n	1d1e6 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1d1da:	461a      	mov	r2, r3
   1d1dc:	4629      	mov	r1, r5
   1d1de:	f002 fa13 	bl	1f608 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d1e2:	4620      	mov	r0, r4
   1d1e4:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d1e6:	2400      	movs	r4, #0
   1d1e8:	e7fb      	b.n	1d1e2 <_copy+0x12>

0001d1ea <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1d1ea:	f002 ba37 	b.w	1f65c <memset>

0001d1ee <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d1ee:	09c3      	lsrs	r3, r0, #7
   1d1f0:	005a      	lsls	r2, r3, #1
   1d1f2:	4413      	add	r3, r2
   1d1f4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d1f8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d1fc:	b2c0      	uxtb	r0, r0
   1d1fe:	4770      	bx	lr

0001d200 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d204:	4606      	mov	r6, r0
   1d206:	b0a8      	sub	sp, #160	; 0xa0
   1d208:	460f      	mov	r7, r1
   1d20a:	4614      	mov	r4, r2
   1d20c:	2540      	movs	r5, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1d20e:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1d212:	f7e6 f8b5 	bl	3380 <uECC_get_rng>
		if (!rng_function ||
   1d216:	4603      	mov	r3, r0
   1d218:	2800      	cmp	r0, #0
   1d21a:	d03d      	beq.n	1d298 <uECC_make_key+0x98>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1d21c:	2140      	movs	r1, #64	; 0x40
   1d21e:	a808      	add	r0, sp, #32
   1d220:	4798      	blx	r3
		if (!rng_function ||
   1d222:	b3c8      	cbz	r0, 1d298 <uECC_make_key+0x98>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1d224:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1d228:	f112 031f 	adds.w	r3, r2, #31
   1d22c:	bf48      	it	mi
   1d22e:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1d232:	a908      	add	r1, sp, #32
   1d234:	4642      	mov	r2, r8
   1d236:	4668      	mov	r0, sp
   1d238:	f343 1347 	sbfx	r3, r3, #5, #8
   1d23c:	f000 fa00 	bl	1d640 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1d240:	4622      	mov	r2, r4
   1d242:	4669      	mov	r1, sp
   1d244:	a818      	add	r0, sp, #96	; 0x60
   1d246:	f000 fe16 	bl	1de76 <EccPoint_compute_public_key>
   1d24a:	b318      	cbz	r0, 1d294 <uECC_make_key+0x94>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1d24c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1d250:	1dd9      	adds	r1, r3, #7
   1d252:	bf48      	it	mi
   1d254:	f103 010e 	addmi.w	r1, r3, #14
   1d258:	466a      	mov	r2, sp
   1d25a:	10c9      	asrs	r1, r1, #3
   1d25c:	4638      	mov	r0, r7
   1d25e:	f000 fe32 	bl	1dec6 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1d262:	aa18      	add	r2, sp, #96	; 0x60
   1d264:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1d268:	4630      	mov	r0, r6
   1d26a:	f000 fe2c 	bl	1dec6 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1d26e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1d272:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1d276:	ab18      	add	r3, sp, #96	; 0x60
   1d278:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1d27c:	1870      	adds	r0, r6, r1
   1d27e:	f000 fe22 	bl	1dec6 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			memset(_private, 0, NUM_ECC_BYTES);
   1d282:	2220      	movs	r2, #32
   1d284:	2100      	movs	r1, #0
   1d286:	4668      	mov	r0, sp
   1d288:	f002 f9e8 	bl	1f65c <memset>

      			return 1;
   1d28c:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1d28e:	b028      	add	sp, #160	; 0xa0
   1d290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1d294:	3d01      	subs	r5, #1
   1d296:	d1bc      	bne.n	1d212 <uECC_make_key+0x12>
        		return 0;
   1d298:	2000      	movs	r0, #0
   1d29a:	e7f8      	b.n	1d28e <uECC_make_key+0x8e>

0001d29c <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1d29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d2a0:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1d2a2:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1d2a6:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1d2aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1d2ae:	b0a4      	sub	sp, #144	; 0x90
   1d2b0:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1d2b2:	1dda      	adds	r2, r3, #7
   1d2b4:	bf48      	it	mi
   1d2b6:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1d2ba:	ad04      	add	r5, sp, #16
{
   1d2bc:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1d2be:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1d2c0:	4628      	mov	r0, r5
   1d2c2:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1d2c4:	9502      	str	r5, [sp, #8]
   1d2c6:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1d2c8:	f000 fe11 	bl	1deee <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1d2cc:	463a      	mov	r2, r7
   1d2ce:	4649      	mov	r1, r9
   1d2d0:	a814      	add	r0, sp, #80	; 0x50
   1d2d2:	f000 fe0c 	bl	1deee <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1d2d6:	ab14      	add	r3, sp, #80	; 0x50
   1d2d8:	eb09 0107 	add.w	r1, r9, r7
   1d2dc:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1d2e0:	463a      	mov	r2, r7
   1d2e2:	f000 fe04 	bl	1deee <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1d2e6:	4623      	mov	r3, r4
   1d2e8:	4632      	mov	r2, r6
   1d2ea:	4629      	mov	r1, r5
   1d2ec:	4628      	mov	r0, r5
   1d2ee:	f000 fd95 	bl	1de1c <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1d2f2:	fab0 f080 	clz	r0, r0
   1d2f6:	9401      	str	r4, [sp, #4]
   1d2f8:	ab24      	add	r3, sp, #144	; 0x90
   1d2fa:	0940      	lsrs	r0, r0, #5
   1d2fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1d300:	8863      	ldrh	r3, [r4, #2]
   1d302:	3301      	adds	r3, #1
   1d304:	b21b      	sxth	r3, r3
   1d306:	9300      	str	r3, [sp, #0]
   1d308:	a914      	add	r1, sp, #80	; 0x50
   1d30a:	2300      	movs	r3, #0
   1d30c:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1d310:	4608      	mov	r0, r1
   1d312:	f000 fcb4 	bl	1dc7e <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1d316:	aa14      	add	r2, sp, #80	; 0x50
   1d318:	4639      	mov	r1, r7
   1d31a:	4640      	mov	r0, r8
   1d31c:	f000 fdd3 	bl	1dec6 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1d320:	4621      	mov	r1, r4
   1d322:	a814      	add	r0, sp, #80	; 0x50
   1d324:	f000 fc22 	bl	1db6c <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	memset(p2, 0, sizeof(p2));
   1d328:	ac02      	add	r4, sp, #8
	r = !EccPoint_isZero(_public, curve);
   1d32a:	4607      	mov	r7, r0
	memset(p2, 0, sizeof(p2));
   1d32c:	2208      	movs	r2, #8
   1d32e:	2100      	movs	r1, #0
   1d330:	4620      	mov	r0, r4
   1d332:	f002 f993 	bl	1f65c <memset>
	__asm__ __volatile__("" :: "g"(p2) : "memory");
	memset(tmp, 0, sizeof(tmp));
   1d336:	2220      	movs	r2, #32
   1d338:	2100      	movs	r1, #0
   1d33a:	4630      	mov	r0, r6
   1d33c:	f002 f98e 	bl	1f65c <memset>
	__asm__ __volatile__("" :: "g"(tmp) : "memory");
	memset(_private, 0, sizeof(_private));
   1d340:	2220      	movs	r2, #32
   1d342:	2100      	movs	r1, #0
   1d344:	4628      	mov	r0, r5
   1d346:	f002 f989 	bl	1f65c <memset>
	__asm__ __volatile__("" :: "g"(_private) : "memory");

	return r;
}
   1d34a:	fab7 f087 	clz	r0, r7
   1d34e:	0940      	lsrs	r0, r0, #5
   1d350:	b024      	add	sp, #144	; 0x90
   1d352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d356 <uECC_vli_add>:
{
   1d356:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1d358:	2400      	movs	r4, #0
{
   1d35a:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   1d35c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1d35e:	b265      	sxtb	r5, r4
   1d360:	42ab      	cmp	r3, r5
   1d362:	dc00      	bgt.n	1d366 <uECC_vli_add+0x10>
}
   1d364:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1d366:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   1d36a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1d36e:	4435      	add	r5, r6
   1d370:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1d372:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   1d374:	bf8c      	ite	hi
   1d376:	2601      	movhi	r6, #1
   1d378:	2600      	movls	r6, #0
		result[i] = sum;
   1d37a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1d37e:	bf18      	it	ne
   1d380:	4630      	movne	r0, r6
		result[i] = sum;
   1d382:	3401      	adds	r4, #1
   1d384:	e7eb      	b.n	1d35e <uECC_vli_add+0x8>

0001d386 <uECC_vli_rshift1>:
	vli += num_words;
   1d386:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1d38a:	2300      	movs	r3, #0
	while (vli-- > end) {
   1d38c:	4288      	cmp	r0, r1
   1d38e:	d300      	bcc.n	1d392 <uECC_vli_rshift1+0xc>
}
   1d390:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1d392:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1d396:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1d39a:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1d39c:	07d3      	lsls	r3, r2, #31
   1d39e:	e7f5      	b.n	1d38c <uECC_vli_rshift1+0x6>

0001d3a0 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1d3a0:	6803      	ldr	r3, [r0, #0]
{
   1d3a2:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1d3a4:	f013 0601 	ands.w	r6, r3, #1
{
   1d3a8:	4605      	mov	r5, r0
   1d3aa:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1d3ac:	d005      	beq.n	1d3ba <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1d3ae:	4613      	mov	r3, r2
   1d3b0:	460a      	mov	r2, r1
   1d3b2:	4601      	mov	r1, r0
   1d3b4:	f7ff ffcf 	bl	1d356 <uECC_vli_add>
   1d3b8:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1d3ba:	4621      	mov	r1, r4
   1d3bc:	4628      	mov	r0, r5
   1d3be:	f7ff ffe2 	bl	1d386 <uECC_vli_rshift1>
	if (carry) {
   1d3c2:	b146      	cbz	r6, 1d3d6 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1d3c4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1d3c8:	3a01      	subs	r2, #1
   1d3ca:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1d3ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d3d2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1d3d6:	bd70      	pop	{r4, r5, r6, pc}

0001d3d8 <uECC_vli_mult>:
{
   1d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1d3dc:	2500      	movs	r5, #0
{
   1d3de:	b087      	sub	sp, #28
   1d3e0:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1d3e4:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1d3e6:	462a      	mov	r2, r5
   1d3e8:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   1d3ec:	4543      	cmp	r3, r8
   1d3ee:	dc16      	bgt.n	1d41e <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1d3f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1d3f4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1d3f8:	9502      	str	r5, [sp, #8]
   1d3fa:	f04f 0a00 	mov.w	sl, #0
   1d3fe:	fa5f f58a 	uxtb.w	r5, sl
   1d402:	eb05 0c03 	add.w	ip, r5, r3
   1d406:	9e02      	ldr	r6, [sp, #8]
   1d408:	fa4f fc8c 	sxtb.w	ip, ip
   1d40c:	45b4      	cmp	ip, r6
   1d40e:	db2d      	blt.n	1d46c <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1d410:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1d414:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1d418:	b007      	add	sp, #28
   1d41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d41e:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1d420:	f04f 0c00 	mov.w	ip, #0
   1d424:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1d428:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1d42a:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1d42e:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1d430:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1d434:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1d438:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1d43c:	fba7 ab06 	umull	sl, fp, r7, r6
   1d440:	eb1a 0601 	adds.w	r6, sl, r1
   1d444:	f10c 0c01 	add.w	ip, ip, #1
   1d448:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1d44c:	fa4f fa8c 	sxtb.w	sl, ip
   1d450:	bf2c      	ite	cs
   1d452:	2201      	movcs	r2, #1
   1d454:	2200      	movcc	r2, #0
   1d456:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1d458:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1d45a:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1d45c:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1d45e:	dde4      	ble.n	1d42a <uECC_vli_mult+0x52>
		result[k] = r0;
   1d460:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1d464:	463a      	mov	r2, r7
   1d466:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1d468:	4674      	mov	r4, lr
   1d46a:	e7bd      	b.n	1d3e8 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1d46c:	3501      	adds	r5, #1
   1d46e:	b26d      	sxtb	r5, r5
   1d470:	9e01      	ldr	r6, [sp, #4]
   1d472:	9900      	ldr	r1, [sp, #0]
   1d474:	ebac 0e05 	sub.w	lr, ip, r5
   1d478:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   1d47c:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   1d480:	4626      	mov	r6, r4
   1d482:	2400      	movs	r4, #0
   1d484:	429d      	cmp	r5, r3
   1d486:	db05      	blt.n	1d494 <uECC_vli_mult+0xbc>
		result[k] = r0;
   1d488:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   1d48c:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1d490:	4632      	mov	r2, r6
   1d492:	e7b4      	b.n	1d3fe <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1d494:	e9cd 2604 	strd	r2, r6, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1d498:	f85e 7904 	ldr.w	r7, [lr], #-4
   1d49c:	f85b 8b04 	ldr.w	r8, [fp], #4
	r01 += p;
   1d4a0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1d4a4:	fba8 8907 	umull	r8, r9, r8, r7
   1d4a8:	eb18 0601 	adds.w	r6, r8, r1
   1d4ac:	eb59 0702 	adcs.w	r7, r9, r2
   1d4b0:	bf2c      	ite	cs
   1d4b2:	2201      	movcs	r2, #1
   1d4b4:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1d4b6:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1d4b8:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1d4ba:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   1d4bc:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   1d4be:	463e      	mov	r6, r7
   1d4c0:	e7e0      	b.n	1d484 <uECC_vli_mult+0xac>

0001d4c2 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1d4c2:	2300      	movs	r3, #0
{
   1d4c4:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1d4c6:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1d4c8:	b25a      	sxtb	r2, r3
   1d4ca:	4291      	cmp	r1, r2
   1d4cc:	dc00      	bgt.n	1d4d0 <uECC_vli_clear+0xe>
}
   1d4ce:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1d4d0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   1d4d4:	3301      	adds	r3, #1
   1d4d6:	e7f7      	b.n	1d4c8 <uECC_vli_clear+0x6>

0001d4d8 <uECC_vli_isZero>:
{
   1d4d8:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1d4da:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1d4dc:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1d4de:	b25c      	sxtb	r4, r3
   1d4e0:	42a1      	cmp	r1, r4
   1d4e2:	dc03      	bgt.n	1d4ec <uECC_vli_isZero+0x14>
}
   1d4e4:	fab2 f082 	clz	r0, r2
   1d4e8:	0940      	lsrs	r0, r0, #5
   1d4ea:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1d4ec:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1d4f0:	3301      	adds	r3, #1
   1d4f2:	4322      	orrs	r2, r4
   1d4f4:	e7f3      	b.n	1d4de <uECC_vli_isZero+0x6>

0001d4f6 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d4f6:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1d4f8:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d4fa:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1d4fe:	f001 011f 	and.w	r1, r1, #31
   1d502:	fa03 f101 	lsl.w	r1, r3, r1
}
   1d506:	4008      	ands	r0, r1
   1d508:	4770      	bx	lr

0001d50a <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1d50a:	3901      	subs	r1, #1
   1d50c:	b249      	sxtb	r1, r1
   1d50e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   1d512:	2900      	cmp	r1, #0
   1d514:	da04      	bge.n	1d520 <uECC_vli_numBits+0x16>
	return (i + 1);
   1d516:	3101      	adds	r1, #1
   1d518:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   1d51a:	b941      	cbnz	r1, 1d52e <uECC_vli_numBits+0x24>
		return 0;
   1d51c:	4608      	mov	r0, r1
}
   1d51e:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1d520:	f853 2904 	ldr.w	r2, [r3], #-4
   1d524:	2a00      	cmp	r2, #0
   1d526:	d1f6      	bne.n	1d516 <uECC_vli_numBits+0xc>
   1d528:	3901      	subs	r1, #1
   1d52a:	b249      	sxtb	r1, r1
   1d52c:	e7f1      	b.n	1d512 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   1d52e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   1d532:	3b01      	subs	r3, #1
   1d534:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1d538:	2000      	movs	r0, #0
   1d53a:	b923      	cbnz	r3, 1d546 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1d53c:	3901      	subs	r1, #1
   1d53e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   1d542:	b208      	sxth	r0, r1
   1d544:	4770      	bx	lr
		digit >>= 1;
   1d546:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   1d548:	3001      	adds	r0, #1
   1d54a:	e7f6      	b.n	1d53a <uECC_vli_numBits+0x30>

0001d54c <uECC_vli_set>:
{
   1d54c:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1d54e:	2300      	movs	r3, #0
   1d550:	b25c      	sxtb	r4, r3
   1d552:	42a2      	cmp	r2, r4
   1d554:	dc00      	bgt.n	1d558 <uECC_vli_set+0xc>
}
   1d556:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1d558:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1d55c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   1d560:	3301      	adds	r3, #1
   1d562:	e7f5      	b.n	1d550 <uECC_vli_set+0x4>

0001d564 <uECC_vli_cmp_unsafe>:
{
   1d564:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1d566:	3a01      	subs	r2, #1
   1d568:	b252      	sxtb	r2, r2
   1d56a:	0093      	lsls	r3, r2, #2
   1d56c:	2a00      	cmp	r2, #0
   1d56e:	da01      	bge.n	1d574 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1d570:	2000      	movs	r0, #0
}
   1d572:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1d574:	58c5      	ldr	r5, [r0, r3]
   1d576:	58cc      	ldr	r4, [r1, r3]
   1d578:	42a5      	cmp	r5, r4
   1d57a:	d805      	bhi.n	1d588 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1d57c:	f1a3 0304 	sub.w	r3, r3, #4
   1d580:	d304      	bcc.n	1d58c <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1d582:	3a01      	subs	r2, #1
   1d584:	b252      	sxtb	r2, r2
   1d586:	e7f1      	b.n	1d56c <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1d588:	2001      	movs	r0, #1
   1d58a:	e7f2      	b.n	1d572 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1d58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d590:	e7ef      	b.n	1d572 <uECC_vli_cmp_unsafe+0xe>

0001d592 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1d592:	3a01      	subs	r2, #1
   1d594:	b252      	sxtb	r2, r2
{
   1d596:	b570      	push	{r4, r5, r6, lr}
   1d598:	0093      	lsls	r3, r2, #2
	uECC_word_t diff = 0;
   1d59a:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1d59c:	2a00      	cmp	r2, #0
   1d59e:	da03      	bge.n	1d5a8 <uECC_vli_equal+0x16>
}
   1d5a0:	1c20      	adds	r0, r4, #0
   1d5a2:	bf18      	it	ne
   1d5a4:	2001      	movne	r0, #1
   1d5a6:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1d5a8:	58c5      	ldr	r5, [r0, r3]
   1d5aa:	58ce      	ldr	r6, [r1, r3]
	for (i = num_words - 1; i >= 0; --i) {
   1d5ac:	3a01      	subs	r2, #1
		diff |= (left[i] ^ right[i]);
   1d5ae:	4075      	eors	r5, r6
   1d5b0:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1d5b2:	b252      	sxtb	r2, r2
   1d5b4:	3b04      	subs	r3, #4
   1d5b6:	e7f1      	b.n	1d59c <uECC_vli_equal+0xa>

0001d5b8 <uECC_vli_sub>:
{
   1d5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1d5ba:	2400      	movs	r4, #0
{
   1d5bc:	4607      	mov	r7, r0
   1d5be:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1d5c0:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1d5c2:	b265      	sxtb	r5, r4
   1d5c4:	45ac      	cmp	ip, r5
   1d5c6:	dc00      	bgt.n	1d5ca <uECC_vli_sub+0x12>
}
   1d5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1d5ca:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   1d5ce:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1d5d2:	1a35      	subs	r5, r6, r0
   1d5d4:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1d5d6:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   1d5d8:	bf34      	ite	cc
   1d5da:	2601      	movcc	r6, #1
   1d5dc:	2600      	movcs	r6, #0
		result[i] = diff;
   1d5de:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1d5e2:	bf18      	it	ne
   1d5e4:	4630      	movne	r0, r6
		result[i] = diff;
   1d5e6:	3401      	adds	r4, #1
   1d5e8:	e7eb      	b.n	1d5c2 <uECC_vli_sub+0xa>

0001d5ea <uECC_vli_modAdd>:
{
   1d5ea:	b570      	push	{r4, r5, r6, lr}
   1d5ec:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   1d5f0:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1d5f2:	4623      	mov	r3, r4
{
   1d5f4:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1d5f6:	f7ff feae 	bl	1d356 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1d5fa:	b930      	cbnz	r0, 1d60a <uECC_vli_modAdd+0x20>
   1d5fc:	4622      	mov	r2, r4
   1d5fe:	4629      	mov	r1, r5
   1d600:	4630      	mov	r0, r6
   1d602:	f7ff ffaf 	bl	1d564 <uECC_vli_cmp_unsafe>
   1d606:	2801      	cmp	r0, #1
   1d608:	d007      	beq.n	1d61a <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1d60a:	4623      	mov	r3, r4
   1d60c:	4632      	mov	r2, r6
   1d60e:	4629      	mov	r1, r5
   1d610:	4628      	mov	r0, r5
}
   1d612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1d616:	f7ff bfcf 	b.w	1d5b8 <uECC_vli_sub>
}
   1d61a:	bd70      	pop	{r4, r5, r6, pc}

0001d61c <uECC_vli_modSub>:
{
   1d61c:	b570      	push	{r4, r5, r6, lr}
   1d61e:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   1d622:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1d624:	4623      	mov	r3, r4
{
   1d626:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1d628:	f7ff ffc6 	bl	1d5b8 <uECC_vli_sub>
	if (l_borrow) {
   1d62c:	b138      	cbz	r0, 1d63e <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1d62e:	4623      	mov	r3, r4
   1d630:	4632      	mov	r2, r6
   1d632:	4629      	mov	r1, r5
   1d634:	4628      	mov	r0, r5
}
   1d636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1d63a:	f7ff be8c 	b.w	1d356 <uECC_vli_add>
}
   1d63e:	bd70      	pop	{r4, r5, r6, pc}

0001d640 <uECC_vli_mmod>:
{
   1d640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d644:	b0a5      	sub	sp, #148	; 0x94
   1d646:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1d648:	ab14      	add	r3, sp, #80	; 0x50
   1d64a:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1d64e:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   1d650:	4629      	mov	r1, r5
   1d652:	4610      	mov	r0, r2
{
   1d654:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   1d656:	f7ff ff58 	bl	1d50a <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1d65a:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   1d65e:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1d660:	2c00      	cmp	r4, #0
   1d662:	4626      	mov	r6, r4
   1d664:	bfb8      	it	lt
   1d666:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1d66a:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1d66c:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1d670:	f003 031f 	and.w	r3, r3, #31
   1d674:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1d678:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1d67a:	bf58      	it	pl
   1d67c:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   1d680:	4631      	mov	r1, r6
   1d682:	f7ff ff1e 	bl	1d4c2 <uECC_vli_clear>
	if (bit_shift > 0) {
   1d686:	f1b8 0f00 	cmp.w	r8, #0
   1d68a:	b230      	sxth	r0, r6
   1d68c:	dd2d      	ble.n	1d6ea <uECC_vli_mmod+0xaa>
   1d68e:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1d690:	2200      	movs	r2, #0
   1d692:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1d696:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1d69a:	4613      	mov	r3, r2
   1d69c:	429d      	cmp	r5, r3
   1d69e:	d819      	bhi.n	1d6d4 <uECC_vli_mmod+0x94>
		for (i = 0; i < num_words * 2; ++i) {
   1d6a0:	b22f      	sxth	r7, r5
   1d6a2:	007b      	lsls	r3, r7, #1
   1d6a4:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1d6a6:	ab04      	add	r3, sp, #16
   1d6a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d6ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   1d6b0:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1d6b2:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d6b4:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1d6b8:	2c00      	cmp	r4, #0
   1d6ba:	da54      	bge.n	1d766 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   1d6bc:	ab24      	add	r3, sp, #144	; 0x90
   1d6be:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1d6c2:	462a      	mov	r2, r5
   1d6c4:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1d6c8:	4648      	mov	r0, r9
   1d6ca:	f7ff ff3f 	bl	1d54c <uECC_vli_set>
}
   1d6ce:	b025      	add	sp, #148	; 0x94
   1d6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1d6d4:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   1d6d8:	fa06 f108 	lsl.w	r1, r6, r8
   1d6dc:	430a      	orrs	r2, r1
   1d6de:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1d6e2:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1d6e4:	fa26 f20c 	lsr.w	r2, r6, ip
   1d6e8:	e7d8      	b.n	1d69c <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1d6ea:	ab04      	add	r3, sp, #16
   1d6ec:	462a      	mov	r2, r5
   1d6ee:	4639      	mov	r1, r7
   1d6f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1d6f4:	f7ff ff2a 	bl	1d54c <uECC_vli_set>
   1d6f8:	e7d2      	b.n	1d6a0 <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1d6fa:	fa0f fe82 	sxth.w	lr, r2
   1d6fe:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1d702:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1d706:	ab24      	add	r3, sp, #144	; 0x90
   1d708:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1d70c:	3001      	adds	r0, #1
   1d70e:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1d712:	440b      	add	r3, r1
   1d714:	ebbb 0303 	subs.w	r3, fp, r3
   1d718:	bf34      	ite	cc
   1d71a:	2201      	movcc	r2, #1
   1d71c:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1d71e:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1d720:	bf18      	it	ne
   1d722:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1d724:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1d728:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1d72c:	9b01      	ldr	r3, [sp, #4]
   1d72e:	b242      	sxtb	r2, r0
   1d730:	429a      	cmp	r2, r3
   1d732:	dbe2      	blt.n	1d6fa <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   1d734:	1a73      	subs	r3, r6, r1
   1d736:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1d738:	4629      	mov	r1, r5
   1d73a:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1d73c:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1d73e:	f7ff fe22 	bl	1d386 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d742:	ab24      	add	r3, sp, #144	; 0x90
   1d744:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1d748:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d74a:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1d74e:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1d752:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d754:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1d758:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1d75a:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   1d75e:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1d760:	f7ff fe11 	bl	1d386 <uECC_vli_rshift1>
   1d764:	e7a8      	b.n	1d6b8 <uECC_vli_mmod+0x78>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1d766:	ab24      	add	r3, sp, #144	; 0x90
   1d768:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1d76a:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1d76e:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1d770:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1d774:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1d778:	e7d8      	b.n	1d72c <uECC_vli_mmod+0xec>

0001d77a <uECC_vli_modMult_fast>:
{
   1d77a:	b530      	push	{r4, r5, lr}
   1d77c:	461c      	mov	r4, r3
   1d77e:	b091      	sub	sp, #68	; 0x44
   1d780:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1d782:	f993 3000 	ldrsb.w	r3, [r3]
   1d786:	4668      	mov	r0, sp
   1d788:	f7ff fe26 	bl	1d3d8 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1d78c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1d790:	4669      	mov	r1, sp
   1d792:	4628      	mov	r0, r5
   1d794:	4798      	blx	r3
}
   1d796:	b011      	add	sp, #68	; 0x44
   1d798:	bd30      	pop	{r4, r5, pc}

0001d79a <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   1d79a:	4613      	mov	r3, r2
   1d79c:	460a      	mov	r2, r1
   1d79e:	f7ff bfec 	b.w	1d77a <uECC_vli_modMult_fast>

0001d7a2 <double_jacobian_default>:
{
   1d7a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1d7a6:	f993 6000 	ldrsb.w	r6, [r3]
{
   1d7aa:	b092      	sub	sp, #72	; 0x48
   1d7ac:	4604      	mov	r4, r0
   1d7ae:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1d7b0:	4610      	mov	r0, r2
   1d7b2:	4631      	mov	r1, r6
{
   1d7b4:	4615      	mov	r5, r2
   1d7b6:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1d7b8:	f7ff fe8e 	bl	1d4d8 <uECC_vli_isZero>
   1d7bc:	2800      	cmp	r0, #0
   1d7be:	f040 8091 	bne.w	1d8e4 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1d7c2:	4642      	mov	r2, r8
   1d7c4:	4649      	mov	r1, r9
   1d7c6:	a802      	add	r0, sp, #8
   1d7c8:	f7ff ffe7 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1d7cc:	4643      	mov	r3, r8
   1d7ce:	aa02      	add	r2, sp, #8
   1d7d0:	4621      	mov	r1, r4
   1d7d2:	a80a      	add	r0, sp, #40	; 0x28
   1d7d4:	f7ff ffd1 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1d7d8:	a902      	add	r1, sp, #8
   1d7da:	4608      	mov	r0, r1
   1d7dc:	4642      	mov	r2, r8
   1d7de:	f7ff ffdc 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1d7e2:	4643      	mov	r3, r8
   1d7e4:	462a      	mov	r2, r5
   1d7e6:	4649      	mov	r1, r9
   1d7e8:	4648      	mov	r0, r9
   1d7ea:	f7ff ffc6 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1d7ee:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1d7f2:	4642      	mov	r2, r8
   1d7f4:	4629      	mov	r1, r5
   1d7f6:	4628      	mov	r0, r5
   1d7f8:	f7ff ffcf 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1d7fc:	463b      	mov	r3, r7
   1d7fe:	462a      	mov	r2, r5
   1d800:	4621      	mov	r1, r4
   1d802:	4620      	mov	r0, r4
   1d804:	9600      	str	r6, [sp, #0]
   1d806:	f7ff fef0 	bl	1d5ea <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1d80a:	463b      	mov	r3, r7
   1d80c:	462a      	mov	r2, r5
   1d80e:	4629      	mov	r1, r5
   1d810:	4628      	mov	r0, r5
   1d812:	9600      	str	r6, [sp, #0]
   1d814:	f7ff fee9 	bl	1d5ea <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1d818:	463b      	mov	r3, r7
   1d81a:	462a      	mov	r2, r5
   1d81c:	4621      	mov	r1, r4
   1d81e:	4628      	mov	r0, r5
   1d820:	9600      	str	r6, [sp, #0]
   1d822:	f7ff fefb 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1d826:	4643      	mov	r3, r8
   1d828:	462a      	mov	r2, r5
   1d82a:	4621      	mov	r1, r4
   1d82c:	4620      	mov	r0, r4
   1d82e:	f7ff ffa4 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1d832:	463b      	mov	r3, r7
   1d834:	4622      	mov	r2, r4
   1d836:	4621      	mov	r1, r4
   1d838:	4628      	mov	r0, r5
   1d83a:	9600      	str	r6, [sp, #0]
   1d83c:	f7ff fed5 	bl	1d5ea <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1d840:	463b      	mov	r3, r7
   1d842:	9600      	str	r6, [sp, #0]
   1d844:	462a      	mov	r2, r5
   1d846:	4621      	mov	r1, r4
   1d848:	4620      	mov	r0, r4
   1d84a:	f7ff fece 	bl	1d5ea <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d84e:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1d850:	07db      	lsls	r3, r3, #31
   1d852:	d54a      	bpl.n	1d8ea <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1d854:	4633      	mov	r3, r6
   1d856:	463a      	mov	r2, r7
   1d858:	4621      	mov	r1, r4
   1d85a:	4620      	mov	r0, r4
   1d85c:	f7ff fd7b 	bl	1d356 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1d860:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1d862:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1d864:	4620      	mov	r0, r4
   1d866:	f7ff fd8e 	bl	1d386 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1d86a:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1d86e:	3b01      	subs	r3, #1
   1d870:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1d874:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   1d878:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1d87c:	4642      	mov	r2, r8
   1d87e:	4621      	mov	r1, r4
   1d880:	4628      	mov	r0, r5
   1d882:	f7ff ff8a 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1d886:	463b      	mov	r3, r7
   1d888:	aa0a      	add	r2, sp, #40	; 0x28
   1d88a:	4629      	mov	r1, r5
   1d88c:	4628      	mov	r0, r5
   1d88e:	9600      	str	r6, [sp, #0]
   1d890:	f7ff fec4 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1d894:	463b      	mov	r3, r7
   1d896:	aa0a      	add	r2, sp, #40	; 0x28
   1d898:	4629      	mov	r1, r5
   1d89a:	4628      	mov	r0, r5
   1d89c:	9600      	str	r6, [sp, #0]
   1d89e:	f7ff febd 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1d8a2:	a90a      	add	r1, sp, #40	; 0x28
   1d8a4:	4608      	mov	r0, r1
   1d8a6:	463b      	mov	r3, r7
   1d8a8:	462a      	mov	r2, r5
   1d8aa:	9600      	str	r6, [sp, #0]
   1d8ac:	f7ff feb6 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1d8b0:	4643      	mov	r3, r8
   1d8b2:	aa0a      	add	r2, sp, #40	; 0x28
   1d8b4:	4621      	mov	r1, r4
   1d8b6:	4620      	mov	r0, r4
   1d8b8:	f7ff ff5f 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1d8bc:	aa02      	add	r2, sp, #8
   1d8be:	463b      	mov	r3, r7
   1d8c0:	4610      	mov	r0, r2
   1d8c2:	4621      	mov	r1, r4
   1d8c4:	9600      	str	r6, [sp, #0]
   1d8c6:	f7ff fea9 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1d8ca:	4632      	mov	r2, r6
   1d8cc:	4629      	mov	r1, r5
   1d8ce:	4620      	mov	r0, r4
   1d8d0:	f7ff fe3c 	bl	1d54c <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1d8d4:	4649      	mov	r1, r9
   1d8d6:	4628      	mov	r0, r5
   1d8d8:	f7ff fe38 	bl	1d54c <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1d8dc:	a902      	add	r1, sp, #8
   1d8de:	4648      	mov	r0, r9
   1d8e0:	f7ff fe34 	bl	1d54c <uECC_vli_set>
}
   1d8e4:	b012      	add	sp, #72	; 0x48
   1d8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1d8ea:	4631      	mov	r1, r6
   1d8ec:	4620      	mov	r0, r4
   1d8ee:	f7ff fd4a 	bl	1d386 <uECC_vli_rshift1>
   1d8f2:	e7c3      	b.n	1d87c <double_jacobian_default+0xda>

0001d8f4 <x_side_default>:
{
   1d8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8f8:	4615      	mov	r5, r2
   1d8fa:	b08a      	sub	sp, #40	; 0x28
   1d8fc:	4604      	mov	r4, r0
   1d8fe:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1d900:	221c      	movs	r2, #28
   1d902:	2100      	movs	r1, #0
   1d904:	a803      	add	r0, sp, #12
   1d906:	f001 fea9 	bl	1f65c <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1d90a:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
   1d90c:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1d910:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1d912:	462a      	mov	r2, r5
   1d914:	4641      	mov	r1, r8
   1d916:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1d918:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1d91a:	f7ff ff3e 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1d91e:	4633      	mov	r3, r6
   1d920:	aa02      	add	r2, sp, #8
   1d922:	4621      	mov	r1, r4
   1d924:	4620      	mov	r0, r4
   1d926:	9700      	str	r7, [sp, #0]
   1d928:	f7ff fe78 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1d92c:	462b      	mov	r3, r5
   1d92e:	4642      	mov	r2, r8
   1d930:	4621      	mov	r1, r4
   1d932:	4620      	mov	r0, r4
   1d934:	f7ff ff21 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1d938:	9700      	str	r7, [sp, #0]
   1d93a:	4633      	mov	r3, r6
   1d93c:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1d940:	4621      	mov	r1, r4
   1d942:	4620      	mov	r0, r4
   1d944:	f7ff fe51 	bl	1d5ea <uECC_vli_modAdd>
}
   1d948:	b00a      	add	sp, #40	; 0x28
   1d94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d94e <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1d94e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d952:	b09b      	sub	sp, #108	; 0x6c
   1d954:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1d956:	9c22      	ldr	r4, [sp, #136]	; 0x88
   1d958:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d95c:	9500      	str	r5, [sp, #0]
{
   1d95e:	4698      	mov	r8, r3
   1d960:	4607      	mov	r7, r0
   1d962:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d964:	4623      	mov	r3, r4
   1d966:	4602      	mov	r2, r0
   1d968:	4631      	mov	r1, r6
   1d96a:	a802      	add	r0, sp, #8
   1d96c:	f7ff fe56 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1d970:	a902      	add	r1, sp, #8
   1d972:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1d974:	4608      	mov	r0, r1
   1d976:	f7ff ff10 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1d97a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d97c:	aa02      	add	r2, sp, #8
   1d97e:	4639      	mov	r1, r7
   1d980:	4638      	mov	r0, r7
   1d982:	f7ff fefa 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1d986:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d988:	aa02      	add	r2, sp, #8
   1d98a:	4631      	mov	r1, r6
   1d98c:	4630      	mov	r0, r6
   1d98e:	f7ff fef4 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1d992:	4623      	mov	r3, r4
   1d994:	464a      	mov	r2, r9
   1d996:	4641      	mov	r1, r8
   1d998:	a802      	add	r0, sp, #8
   1d99a:	9500      	str	r5, [sp, #0]
   1d99c:	f7ff fe25 	bl	1d5ea <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1d9a0:	4623      	mov	r3, r4
   1d9a2:	464a      	mov	r2, r9
   1d9a4:	4641      	mov	r1, r8
   1d9a6:	4640      	mov	r0, r8
   1d9a8:	9500      	str	r5, [sp, #0]
   1d9aa:	f7ff fe37 	bl	1d61c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1d9ae:	4623      	mov	r3, r4
   1d9b0:	463a      	mov	r2, r7
   1d9b2:	4631      	mov	r1, r6
   1d9b4:	a80a      	add	r0, sp, #40	; 0x28
   1d9b6:	9500      	str	r5, [sp, #0]
   1d9b8:	f7ff fe30 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1d9bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d9be:	aa0a      	add	r2, sp, #40	; 0x28
   1d9c0:	4649      	mov	r1, r9
   1d9c2:	4648      	mov	r0, r9
   1d9c4:	f7ff fed9 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1d9c8:	4623      	mov	r3, r4
   1d9ca:	4632      	mov	r2, r6
   1d9cc:	4639      	mov	r1, r7
   1d9ce:	a80a      	add	r0, sp, #40	; 0x28
   1d9d0:	9500      	str	r5, [sp, #0]
   1d9d2:	f7ff fe0a 	bl	1d5ea <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1d9d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1d9d8:	4641      	mov	r1, r8
   1d9da:	4630      	mov	r0, r6
   1d9dc:	f7ff fedd 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1d9e0:	4623      	mov	r3, r4
   1d9e2:	aa0a      	add	r2, sp, #40	; 0x28
   1d9e4:	4631      	mov	r1, r6
   1d9e6:	4630      	mov	r0, r6
   1d9e8:	9500      	str	r5, [sp, #0]
   1d9ea:	f7ff fe17 	bl	1d61c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1d9ee:	4623      	mov	r3, r4
   1d9f0:	4632      	mov	r2, r6
   1d9f2:	4639      	mov	r1, r7
   1d9f4:	a812      	add	r0, sp, #72	; 0x48
   1d9f6:	9500      	str	r5, [sp, #0]
   1d9f8:	f7ff fe10 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1d9fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1d9fe:	aa12      	add	r2, sp, #72	; 0x48
   1da00:	4641      	mov	r1, r8
   1da02:	4640      	mov	r0, r8
   1da04:	f7ff feb9 	bl	1d77a <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1da08:	4623      	mov	r3, r4
   1da0a:	464a      	mov	r2, r9
   1da0c:	4641      	mov	r1, r8
   1da0e:	4640      	mov	r0, r8
   1da10:	9500      	str	r5, [sp, #0]
   1da12:	f7ff fe03 	bl	1d61c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1da16:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1da18:	a902      	add	r1, sp, #8
   1da1a:	a812      	add	r0, sp, #72	; 0x48
   1da1c:	f7ff febd 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1da20:	a912      	add	r1, sp, #72	; 0x48
   1da22:	4623      	mov	r3, r4
   1da24:	aa0a      	add	r2, sp, #40	; 0x28
   1da26:	4608      	mov	r0, r1
   1da28:	9500      	str	r5, [sp, #0]
   1da2a:	f7ff fdf7 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1da2e:	4623      	mov	r3, r4
   1da30:	463a      	mov	r2, r7
   1da32:	a912      	add	r1, sp, #72	; 0x48
   1da34:	a80a      	add	r0, sp, #40	; 0x28
   1da36:	9500      	str	r5, [sp, #0]
   1da38:	f7ff fdf0 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1da3c:	a90a      	add	r1, sp, #40	; 0x28
   1da3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1da40:	aa02      	add	r2, sp, #8
   1da42:	4608      	mov	r0, r1
   1da44:	f7ff fe99 	bl	1d77a <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1da48:	4623      	mov	r3, r4
   1da4a:	464a      	mov	r2, r9
   1da4c:	a90a      	add	r1, sp, #40	; 0x28
   1da4e:	4648      	mov	r0, r9
   1da50:	9500      	str	r5, [sp, #0]
   1da52:	f7ff fde3 	bl	1d61c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1da56:	462a      	mov	r2, r5
   1da58:	a912      	add	r1, sp, #72	; 0x48
   1da5a:	4638      	mov	r0, r7
   1da5c:	f7ff fd76 	bl	1d54c <uECC_vli_set>
}
   1da60:	b01b      	add	sp, #108	; 0x6c
   1da62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001da66 <uECC_vli_modInv>:
{
   1da66:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da68:	460f      	mov	r7, r1
   1da6a:	b0a1      	sub	sp, #132	; 0x84
   1da6c:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1da6e:	4619      	mov	r1, r3
   1da70:	4638      	mov	r0, r7
{
   1da72:	4615      	mov	r5, r2
   1da74:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1da76:	f7ff fd2f 	bl	1d4d8 <uECC_vli_isZero>
   1da7a:	b120      	cbz	r0, 1da86 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1da7c:	4630      	mov	r0, r6
   1da7e:	f7ff fd20 	bl	1d4c2 <uECC_vli_clear>
}
   1da82:	b021      	add	sp, #132	; 0x84
   1da84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1da86:	4622      	mov	r2, r4
   1da88:	4639      	mov	r1, r7
   1da8a:	4668      	mov	r0, sp
   1da8c:	f7ff fd5e 	bl	1d54c <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1da90:	4629      	mov	r1, r5
   1da92:	a808      	add	r0, sp, #32
   1da94:	f7ff fd5a 	bl	1d54c <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1da98:	a810      	add	r0, sp, #64	; 0x40
   1da9a:	4621      	mov	r1, r4
   1da9c:	f7ff fd11 	bl	1d4c2 <uECC_vli_clear>
	u[0] = 1;
   1daa0:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1daa2:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1daa4:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1daa6:	f7ff fd0c 	bl	1d4c2 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1daaa:	4622      	mov	r2, r4
   1daac:	a908      	add	r1, sp, #32
   1daae:	4668      	mov	r0, sp
   1dab0:	f7ff fd58 	bl	1d564 <uECC_vli_cmp_unsafe>
   1dab4:	b928      	cbnz	r0, 1dac2 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1dab6:	4622      	mov	r2, r4
   1dab8:	a910      	add	r1, sp, #64	; 0x40
   1daba:	4630      	mov	r0, r6
   1dabc:	f7ff fd46 	bl	1d54c <uECC_vli_set>
   1dac0:	e7df      	b.n	1da82 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1dac2:	9b00      	ldr	r3, [sp, #0]
   1dac4:	07da      	lsls	r2, r3, #31
   1dac6:	d409      	bmi.n	1dadc <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1dac8:	4621      	mov	r1, r4
   1daca:	4668      	mov	r0, sp
   1dacc:	f7ff fc5b 	bl	1d386 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1dad0:	4622      	mov	r2, r4
   1dad2:	4629      	mov	r1, r5
   1dad4:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1dad6:	f7ff fc63 	bl	1d3a0 <vli_modInv_update>
   1dada:	e7e6      	b.n	1daaa <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1dadc:	9b08      	ldr	r3, [sp, #32]
   1dade:	07db      	lsls	r3, r3, #31
   1dae0:	d407      	bmi.n	1daf2 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1dae2:	4621      	mov	r1, r4
   1dae4:	a808      	add	r0, sp, #32
   1dae6:	f7ff fc4e 	bl	1d386 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1daea:	4622      	mov	r2, r4
   1daec:	4629      	mov	r1, r5
   1daee:	a818      	add	r0, sp, #96	; 0x60
   1daf0:	e7f1      	b.n	1dad6 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1daf2:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1daf4:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1daf6:	dd1c      	ble.n	1db32 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1daf8:	aa08      	add	r2, sp, #32
   1dafa:	4669      	mov	r1, sp
   1dafc:	4668      	mov	r0, sp
   1dafe:	f7ff fd5b 	bl	1d5b8 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1db02:	4621      	mov	r1, r4
   1db04:	4668      	mov	r0, sp
   1db06:	f7ff fc3e 	bl	1d386 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1db0a:	4622      	mov	r2, r4
   1db0c:	a918      	add	r1, sp, #96	; 0x60
   1db0e:	a810      	add	r0, sp, #64	; 0x40
   1db10:	f7ff fd28 	bl	1d564 <uECC_vli_cmp_unsafe>
   1db14:	2800      	cmp	r0, #0
   1db16:	da05      	bge.n	1db24 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1db18:	a910      	add	r1, sp, #64	; 0x40
   1db1a:	4623      	mov	r3, r4
   1db1c:	462a      	mov	r2, r5
   1db1e:	4608      	mov	r0, r1
   1db20:	f7ff fc19 	bl	1d356 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1db24:	a910      	add	r1, sp, #64	; 0x40
   1db26:	4623      	mov	r3, r4
   1db28:	aa18      	add	r2, sp, #96	; 0x60
   1db2a:	4608      	mov	r0, r1
   1db2c:	f7ff fd44 	bl	1d5b8 <uECC_vli_sub>
   1db30:	e7ce      	b.n	1dad0 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1db32:	a908      	add	r1, sp, #32
   1db34:	466a      	mov	r2, sp
   1db36:	4608      	mov	r0, r1
   1db38:	f7ff fd3e 	bl	1d5b8 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1db3c:	4621      	mov	r1, r4
   1db3e:	a808      	add	r0, sp, #32
   1db40:	f7ff fc21 	bl	1d386 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1db44:	4622      	mov	r2, r4
   1db46:	a910      	add	r1, sp, #64	; 0x40
   1db48:	a818      	add	r0, sp, #96	; 0x60
   1db4a:	f7ff fd0b 	bl	1d564 <uECC_vli_cmp_unsafe>
   1db4e:	2800      	cmp	r0, #0
   1db50:	da05      	bge.n	1db5e <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1db52:	a918      	add	r1, sp, #96	; 0x60
   1db54:	4623      	mov	r3, r4
   1db56:	462a      	mov	r2, r5
   1db58:	4608      	mov	r0, r1
   1db5a:	f7ff fbfc 	bl	1d356 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1db5e:	a918      	add	r1, sp, #96	; 0x60
   1db60:	4623      	mov	r3, r4
   1db62:	aa10      	add	r2, sp, #64	; 0x40
   1db64:	4608      	mov	r0, r1
   1db66:	f7ff fd27 	bl	1d5b8 <uECC_vli_sub>
   1db6a:	e7be      	b.n	1daea <uECC_vli_modInv+0x84>

0001db6c <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1db6c:	7809      	ldrb	r1, [r1, #0]
   1db6e:	0049      	lsls	r1, r1, #1
   1db70:	b249      	sxtb	r1, r1
   1db72:	f7ff bcb1 	b.w	1d4d8 <uECC_vli_isZero>

0001db76 <apply_z>:
{
   1db76:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db78:	4615      	mov	r5, r2
   1db7a:	b089      	sub	sp, #36	; 0x24
   1db7c:	461c      	mov	r4, r3
   1db7e:	4607      	mov	r7, r0
   1db80:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1db82:	461a      	mov	r2, r3
   1db84:	4629      	mov	r1, r5
   1db86:	4668      	mov	r0, sp
   1db88:	f7ff fe07 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1db8c:	4623      	mov	r3, r4
   1db8e:	466a      	mov	r2, sp
   1db90:	4639      	mov	r1, r7
   1db92:	4638      	mov	r0, r7
   1db94:	f7ff fdf1 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1db98:	4623      	mov	r3, r4
   1db9a:	462a      	mov	r2, r5
   1db9c:	4669      	mov	r1, sp
   1db9e:	4668      	mov	r0, sp
   1dba0:	f7ff fdeb 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1dba4:	4623      	mov	r3, r4
   1dba6:	466a      	mov	r2, sp
   1dba8:	4631      	mov	r1, r6
   1dbaa:	4630      	mov	r0, r6
   1dbac:	f7ff fde5 	bl	1d77a <uECC_vli_modMult_fast>
}
   1dbb0:	b009      	add	sp, #36	; 0x24
   1dbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dbb4 <XYcZ_add>:
{
   1dbb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dbb8:	b08b      	sub	sp, #44	; 0x2c
   1dbba:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   1dbbc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   1dbbe:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1dbc2:	9600      	str	r6, [sp, #0]
{
   1dbc4:	461f      	mov	r7, r3
   1dbc6:	4680      	mov	r8, r0
   1dbc8:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1dbca:	462b      	mov	r3, r5
   1dbcc:	4602      	mov	r2, r0
   1dbce:	4621      	mov	r1, r4
   1dbd0:	a802      	add	r0, sp, #8
   1dbd2:	f7ff fd23 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1dbd6:	a902      	add	r1, sp, #8
   1dbd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1dbda:	4608      	mov	r0, r1
   1dbdc:	f7ff fddd 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1dbe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1dbe2:	aa02      	add	r2, sp, #8
   1dbe4:	4641      	mov	r1, r8
   1dbe6:	4640      	mov	r0, r8
   1dbe8:	f7ff fdc7 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1dbec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1dbee:	aa02      	add	r2, sp, #8
   1dbf0:	4621      	mov	r1, r4
   1dbf2:	4620      	mov	r0, r4
   1dbf4:	f7ff fdc1 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1dbf8:	462b      	mov	r3, r5
   1dbfa:	464a      	mov	r2, r9
   1dbfc:	4639      	mov	r1, r7
   1dbfe:	4638      	mov	r0, r7
   1dc00:	9600      	str	r6, [sp, #0]
   1dc02:	f7ff fd0b 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1dc06:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1dc08:	4639      	mov	r1, r7
   1dc0a:	a802      	add	r0, sp, #8
   1dc0c:	f7ff fdc5 	bl	1d79a <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1dc10:	a902      	add	r1, sp, #8
   1dc12:	462b      	mov	r3, r5
   1dc14:	4642      	mov	r2, r8
   1dc16:	4608      	mov	r0, r1
   1dc18:	9600      	str	r6, [sp, #0]
   1dc1a:	f7ff fcff 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1dc1e:	a902      	add	r1, sp, #8
   1dc20:	462b      	mov	r3, r5
   1dc22:	4622      	mov	r2, r4
   1dc24:	4608      	mov	r0, r1
   1dc26:	9600      	str	r6, [sp, #0]
   1dc28:	f7ff fcf8 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1dc2c:	462b      	mov	r3, r5
   1dc2e:	4642      	mov	r2, r8
   1dc30:	4621      	mov	r1, r4
   1dc32:	4620      	mov	r0, r4
   1dc34:	9600      	str	r6, [sp, #0]
   1dc36:	f7ff fcf1 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1dc3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1dc3c:	4622      	mov	r2, r4
   1dc3e:	4649      	mov	r1, r9
   1dc40:	4648      	mov	r0, r9
   1dc42:	f7ff fd9a 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1dc46:	462b      	mov	r3, r5
   1dc48:	aa02      	add	r2, sp, #8
   1dc4a:	4641      	mov	r1, r8
   1dc4c:	4620      	mov	r0, r4
   1dc4e:	9600      	str	r6, [sp, #0]
   1dc50:	f7ff fce4 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1dc54:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1dc56:	4622      	mov	r2, r4
   1dc58:	4639      	mov	r1, r7
   1dc5a:	4638      	mov	r0, r7
   1dc5c:	f7ff fd8d 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1dc60:	462b      	mov	r3, r5
   1dc62:	464a      	mov	r2, r9
   1dc64:	4639      	mov	r1, r7
   1dc66:	4638      	mov	r0, r7
   1dc68:	9600      	str	r6, [sp, #0]
   1dc6a:	f7ff fcd7 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1dc6e:	4632      	mov	r2, r6
   1dc70:	a902      	add	r1, sp, #8
   1dc72:	4620      	mov	r0, r4
   1dc74:	f7ff fc6a 	bl	1d54c <uECC_vli_set>
}
   1dc78:	b00b      	add	sp, #44	; 0x2c
   1dc7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001dc7e <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1dc7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc82:	b0b1      	sub	sp, #196	; 0xc4
   1dc84:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1dc88:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   1dc8a:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1dc8c:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1dc90:	a818      	add	r0, sp, #96	; 0x60
   1dc92:	463a      	mov	r2, r7
{
   1dc94:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1dc96:	f7ff fc59 	bl	1d54c <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1dc9a:	00bb      	lsls	r3, r7, #2
   1dc9c:	9307      	str	r3, [sp, #28]
   1dc9e:	9b05      	ldr	r3, [sp, #20]
   1dca0:	00ba      	lsls	r2, r7, #2
   1dca2:	4413      	add	r3, r2
   1dca4:	4619      	mov	r1, r3
   1dca6:	463a      	mov	r2, r7
   1dca8:	a828      	add	r0, sp, #160	; 0xa0
   1dcaa:	9302      	str	r3, [sp, #8]
   1dcac:	f7ff fc4e 	bl	1d54c <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1dcb0:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1dcb4:	2e00      	cmp	r6, #0
   1dcb6:	f000 8087 	beq.w	1ddc8 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1dcba:	462a      	mov	r2, r5
   1dcbc:	4631      	mov	r1, r6
   1dcbe:	a808      	add	r0, sp, #32
   1dcc0:	f7ff fc44 	bl	1d54c <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1dcc4:	ae10      	add	r6, sp, #64	; 0x40
   1dcc6:	462a      	mov	r2, r5
   1dcc8:	a918      	add	r1, sp, #96	; 0x60
   1dcca:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   1dccc:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1dcd0:	f7ff fc3c 	bl	1d54c <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1dcd4:	a928      	add	r1, sp, #160	; 0xa0
   1dcd6:	4648      	mov	r0, r9
   1dcd8:	f7ff fc38 	bl	1d54c <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1dcdc:	4623      	mov	r3, r4
   1dcde:	aa08      	add	r2, sp, #32
   1dce0:	a928      	add	r1, sp, #160	; 0xa0
   1dce2:	a818      	add	r0, sp, #96	; 0x60
   1dce4:	f7ff ff47 	bl	1db76 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1dce8:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1dcec:	4623      	mov	r3, r4
   1dcee:	aa08      	add	r2, sp, #32
   1dcf0:	a928      	add	r1, sp, #160	; 0xa0
   1dcf2:	a818      	add	r0, sp, #96	; 0x60
   1dcf4:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1dcf6:	4623      	mov	r3, r4
   1dcf8:	aa08      	add	r2, sp, #32
   1dcfa:	4649      	mov	r1, r9
   1dcfc:	4630      	mov	r0, r6
   1dcfe:	f7ff ff3a 	bl	1db76 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1dd02:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1dd06:	3d02      	subs	r5, #2
   1dd08:	b22d      	sxth	r5, r5
   1dd0a:	2d00      	cmp	r5, #0
   1dd0c:	dc63      	bgt.n	1ddd6 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1dd0e:	9b06      	ldr	r3, [sp, #24]
   1dd10:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1dd12:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1dd14:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1dd18:	ab10      	add	r3, sp, #64	; 0x40
   1dd1a:	0176      	lsls	r6, r6, #5
   1dd1c:	43ed      	mvns	r5, r5
   1dd1e:	eb03 0806 	add.w	r8, r3, r6
   1dd22:	f005 0501 	and.w	r5, r5, #1
   1dd26:	ab20      	add	r3, sp, #128	; 0x80
   1dd28:	441e      	add	r6, r3
   1dd2a:	016d      	lsls	r5, r5, #5
   1dd2c:	ab10      	add	r3, sp, #64	; 0x40
   1dd2e:	eb03 0905 	add.w	r9, r3, r5
   1dd32:	ab20      	add	r3, sp, #128	; 0x80
   1dd34:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1dd36:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1dd3a:	462b      	mov	r3, r5
   1dd3c:	464a      	mov	r2, r9
   1dd3e:	4631      	mov	r1, r6
   1dd40:	4640      	mov	r0, r8
   1dd42:	f7ff fe04 	bl	1d94e <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1dd46:	4653      	mov	r3, sl
   1dd48:	aa10      	add	r2, sp, #64	; 0x40
   1dd4a:	a918      	add	r1, sp, #96	; 0x60
   1dd4c:	a808      	add	r0, sp, #32
   1dd4e:	9700      	str	r7, [sp, #0]
   1dd50:	f7ff fc64 	bl	1d61c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1dd54:	a908      	add	r1, sp, #32
   1dd56:	4623      	mov	r3, r4
   1dd58:	4632      	mov	r2, r6
   1dd5a:	4608      	mov	r0, r1
   1dd5c:	f7ff fd0d 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1dd60:	a908      	add	r1, sp, #32
   1dd62:	4623      	mov	r3, r4
   1dd64:	9a05      	ldr	r2, [sp, #20]
   1dd66:	4608      	mov	r0, r1
   1dd68:	f7ff fd07 	bl	1d77a <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1dd6c:	a908      	add	r1, sp, #32
   1dd6e:	463b      	mov	r3, r7
   1dd70:	4652      	mov	r2, sl
   1dd72:	4608      	mov	r0, r1
   1dd74:	f7ff fe77 	bl	1da66 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1dd78:	a908      	add	r1, sp, #32
   1dd7a:	4623      	mov	r3, r4
   1dd7c:	9a02      	ldr	r2, [sp, #8]
   1dd7e:	4608      	mov	r0, r1
   1dd80:	f7ff fcfb 	bl	1d77a <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1dd84:	a908      	add	r1, sp, #32
   1dd86:	4623      	mov	r3, r4
   1dd88:	4642      	mov	r2, r8
   1dd8a:	4608      	mov	r0, r1
   1dd8c:	f7ff fcf5 	bl	1d77a <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1dd90:	9400      	str	r4, [sp, #0]
   1dd92:	4633      	mov	r3, r6
   1dd94:	4642      	mov	r2, r8
   1dd96:	4629      	mov	r1, r5
   1dd98:	4648      	mov	r0, r9
   1dd9a:	f7ff ff0b 	bl	1dbb4 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1dd9e:	4623      	mov	r3, r4
   1dda0:	aa08      	add	r2, sp, #32
   1dda2:	a920      	add	r1, sp, #128	; 0x80
   1dda4:	a810      	add	r0, sp, #64	; 0x40
   1dda6:	f7ff fee6 	bl	1db76 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1ddaa:	463a      	mov	r2, r7
   1ddac:	a910      	add	r1, sp, #64	; 0x40
   1ddae:	9804      	ldr	r0, [sp, #16]
   1ddb0:	f7ff fbcc 	bl	1d54c <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1ddb4:	9b04      	ldr	r3, [sp, #16]
   1ddb6:	9c07      	ldr	r4, [sp, #28]
   1ddb8:	4423      	add	r3, r4
   1ddba:	a920      	add	r1, sp, #128	; 0x80
   1ddbc:	4618      	mov	r0, r3
   1ddbe:	f7ff fbc5 	bl	1d54c <uECC_vli_set>
}
   1ddc2:	b031      	add	sp, #196	; 0xc4
   1ddc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1ddc8:	4629      	mov	r1, r5
   1ddca:	a808      	add	r0, sp, #32
   1ddcc:	f7ff fb79 	bl	1d4c2 <uECC_vli_clear>
		z[0] = 1;
   1ddd0:	2301      	movs	r3, #1
   1ddd2:	9308      	str	r3, [sp, #32]
   1ddd4:	e776      	b.n	1dcc4 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   1ddd6:	4629      	mov	r1, r5
   1ddd8:	9806      	ldr	r0, [sp, #24]
   1ddda:	f7ff fb8c 	bl	1d4f6 <uECC_vli_testBit>
   1ddde:	fab0 f080 	clz	r0, r0
   1dde2:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1dde4:	f1c0 0801 	rsb	r8, r0, #1
   1dde8:	ea4f 1848 	mov.w	r8, r8, lsl #5
   1ddec:	0140      	lsls	r0, r0, #5
   1ddee:	eb06 0b08 	add.w	fp, r6, r8
   1ddf2:	eb06 0a00 	add.w	sl, r6, r0
   1ddf6:	44c8      	add	r8, r9
   1ddf8:	eb09 0300 	add.w	r3, r9, r0
   1ddfc:	4652      	mov	r2, sl
   1ddfe:	4641      	mov	r1, r8
   1de00:	4658      	mov	r0, fp
   1de02:	9400      	str	r4, [sp, #0]
   1de04:	9303      	str	r3, [sp, #12]
   1de06:	f7ff fda2 	bl	1d94e <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1de0a:	9400      	str	r4, [sp, #0]
   1de0c:	4643      	mov	r3, r8
   1de0e:	465a      	mov	r2, fp
   1de10:	9903      	ldr	r1, [sp, #12]
   1de12:	4650      	mov	r0, sl
   1de14:	f7ff fece 	bl	1dbb4 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1de18:	3d01      	subs	r5, #1
   1de1a:	e775      	b.n	1dd08 <EccPoint_mult+0x8a>

0001de1c <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1de20:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
   1de24:	f114 051f 	adds.w	r5, r4, #31
   1de28:	bf48      	it	mi
   1de2a:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
{
   1de2e:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1de30:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1de34:	f345 1547 	sbfx	r5, r5, #5, #8
{
   1de38:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1de3a:	4601      	mov	r1, r0
   1de3c:	462b      	mov	r3, r5
   1de3e:	4632      	mov	r2, r6
   1de40:	4638      	mov	r0, r7
   1de42:	f7ff fa88 	bl	1d356 <uECC_vli_add>
   1de46:	b990      	cbnz	r0, 1de6e <regularize_k+0x52>
   1de48:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   1de4c:	da11      	bge.n	1de72 <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1de4e:	4621      	mov	r1, r4
   1de50:	4638      	mov	r0, r7
   1de52:	f7ff fb50 	bl	1d4f6 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1de56:	1c04      	adds	r4, r0, #0
   1de58:	bf18      	it	ne
   1de5a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1de5c:	462b      	mov	r3, r5
   1de5e:	4632      	mov	r2, r6
   1de60:	4639      	mov	r1, r7
   1de62:	4640      	mov	r0, r8
   1de64:	f7ff fa77 	bl	1d356 <uECC_vli_add>

	return carry;
}
   1de68:	4620      	mov	r0, r4
   1de6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1de6e:	2401      	movs	r4, #1
   1de70:	e7f4      	b.n	1de5c <regularize_k+0x40>
   1de72:	4604      	mov	r4, r0
   1de74:	e7f2      	b.n	1de5c <regularize_k+0x40>

0001de76 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1de76:	b530      	push	{r4, r5, lr}
   1de78:	4614      	mov	r4, r2
   1de7a:	b095      	sub	sp, #84	; 0x54
   1de7c:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1de7e:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1de80:	4623      	mov	r3, r4
{
   1de82:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1de84:	a904      	add	r1, sp, #16
   1de86:	9102      	str	r1, [sp, #8]
   1de88:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1de8a:	f7ff ffc7 	bl	1de1c <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1de8e:	fab0 f080 	clz	r0, r0
   1de92:	ab14      	add	r3, sp, #80	; 0x50
   1de94:	0940      	lsrs	r0, r0, #5
   1de96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1de9a:	8863      	ldrh	r3, [r4, #2]
   1de9c:	9401      	str	r4, [sp, #4]
   1de9e:	3301      	adds	r3, #1
   1dea0:	b21b      	sxth	r3, r3
   1dea2:	9300      	str	r3, [sp, #0]
   1dea4:	f850 2c48 	ldr.w	r2, [r0, #-72]
   1dea8:	2300      	movs	r3, #0
   1deaa:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1deae:	4628      	mov	r0, r5
   1deb0:	f7ff fee5 	bl	1dc7e <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1deb4:	4621      	mov	r1, r4
   1deb6:	4628      	mov	r0, r5
   1deb8:	f7ff fe58 	bl	1db6c <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1debc:	fab0 f080 	clz	r0, r0
   1dec0:	0940      	lsrs	r0, r0, #5
   1dec2:	b015      	add	sp, #84	; 0x54
   1dec4:	bd30      	pop	{r4, r5, pc}

0001dec6 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1dec6:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1dec8:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1deca:	1e4f      	subs	r7, r1, #1
   1decc:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1dece:	428c      	cmp	r4, r1
   1ded0:	f105 0501 	add.w	r5, r5, #1
   1ded4:	db00      	blt.n	1ded8 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1ded6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1ded8:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1deda:	f023 0603 	bic.w	r6, r3, #3
   1dede:	f003 0303 	and.w	r3, r3, #3
   1dee2:	5996      	ldr	r6, [r2, r6]
   1dee4:	00db      	lsls	r3, r3, #3
   1dee6:	fa26 f303 	lsr.w	r3, r6, r3
   1deea:	5503      	strb	r3, [r0, r4]
   1deec:	e7ee      	b.n	1decc <uECC_vli_nativeToBytes+0x6>

0001deee <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1deee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1def0:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1def2:	1cd1      	adds	r1, r2, #3
   1def4:	bf48      	it	mi
   1def6:	1d91      	addmi	r1, r2, #6
{
   1def8:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1defa:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1defe:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   1df00:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1df02:	f7ff fade 	bl	1d4c2 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1df06:	2100      	movs	r1, #0
   1df08:	b24a      	sxtb	r2, r1
   1df0a:	42a2      	cmp	r2, r4
   1df0c:	f101 0101 	add.w	r1, r1, #1
   1df10:	db00      	blt.n	1df14 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1df12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1df14:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1df16:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1df1a:	5cb2      	ldrb	r2, [r6, r2]
   1df1c:	f003 0303 	and.w	r3, r3, #3
   1df20:	00db      	lsls	r3, r3, #3
   1df22:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1df26:	582a      	ldr	r2, [r5, r0]
   1df28:	431a      	orrs	r2, r3
   1df2a:	502a      	str	r2, [r5, r0]
   1df2c:	e7ec      	b.n	1df08 <uECC_vli_bytesToNative+0x1a>

0001df2e <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1df2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df32:	b090      	sub	sp, #64	; 0x40
   1df34:	4606      	mov	r6, r0
   1df36:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1df38:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1df3c:	f7ff fe16 	bl	1db6c <EccPoint_isZero>
   1df40:	bb40      	cbnz	r0, 1df94 <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1df42:	f104 0804 	add.w	r8, r4, #4
   1df46:	462a      	mov	r2, r5
   1df48:	4631      	mov	r1, r6
   1df4a:	4640      	mov	r0, r8
   1df4c:	f7ff fb0a 	bl	1d564 <uECC_vli_cmp_unsafe>
   1df50:	2801      	cmp	r0, #1
   1df52:	d122      	bne.n	1df9a <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1df54:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   1df58:	462a      	mov	r2, r5
   1df5a:	4639      	mov	r1, r7
   1df5c:	4640      	mov	r0, r8
   1df5e:	f7ff fb01 	bl	1d564 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1df62:	2801      	cmp	r0, #1
   1df64:	d119      	bne.n	1df9a <uECC_valid_point+0x6c>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1df66:	4622      	mov	r2, r4
   1df68:	4668      	mov	r0, sp
   1df6a:	f7ff fc16 	bl	1d79a <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1df6e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1df72:	4622      	mov	r2, r4
   1df74:	4631      	mov	r1, r6
   1df76:	a808      	add	r0, sp, #32
   1df78:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1df7a:	462a      	mov	r2, r5
   1df7c:	a908      	add	r1, sp, #32
   1df7e:	4668      	mov	r0, sp
   1df80:	f7ff fb07 	bl	1d592 <uECC_vli_equal>
   1df84:	2800      	cmp	r0, #0
		return -3;
   1df86:	bf0c      	ite	eq
   1df88:	2000      	moveq	r0, #0
   1df8a:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1df8e:	b010      	add	sp, #64	; 0x40
   1df90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   1df94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df98:	e7f9      	b.n	1df8e <uECC_valid_point+0x60>
		return -2;
   1df9a:	f06f 0001 	mvn.w	r0, #1
   1df9e:	e7f6      	b.n	1df8e <uECC_valid_point+0x60>

0001dfa0 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1dfa0:	b570      	push	{r4, r5, r6, lr}
   1dfa2:	460c      	mov	r4, r1
   1dfa4:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1dfa6:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1dfa8:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1dfac:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1dfae:	4601      	mov	r1, r0
   1dfb0:	4668      	mov	r0, sp
   1dfb2:	f7ff ff9c 	bl	1deee <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1dfb6:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1dfba:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   1dfbe:	18b1      	adds	r1, r6, r2
   1dfc0:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1dfc4:	f7ff ff93 	bl	1deee <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1dfc8:	2210      	movs	r2, #16
   1dfca:	4629      	mov	r1, r5
   1dfcc:	4668      	mov	r0, sp
   1dfce:	f7ff fac9 	bl	1d564 <uECC_vli_cmp_unsafe>
   1dfd2:	b128      	cbz	r0, 1dfe0 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1dfd4:	4621      	mov	r1, r4
   1dfd6:	4668      	mov	r0, sp
   1dfd8:	f7ff ffa9 	bl	1df2e <uECC_valid_point>
}
   1dfdc:	b010      	add	sp, #64	; 0x40
   1dfde:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1dfe0:	f06f 0003 	mvn.w	r0, #3
   1dfe4:	e7fa      	b.n	1dfdc <uECC_valid_public_key+0x3c>

0001dfe6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1dfe6:	78cb      	ldrb	r3, [r1, #3]
   1dfe8:	7802      	ldrb	r2, [r0, #0]
   1dfea:	4053      	eors	r3, r2
   1dfec:	7003      	strb	r3, [r0, #0]
   1dfee:	884b      	ldrh	r3, [r1, #2]
   1dff0:	7842      	ldrb	r2, [r0, #1]
   1dff2:	4053      	eors	r3, r2
   1dff4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1dff6:	680a      	ldr	r2, [r1, #0]
   1dff8:	7883      	ldrb	r3, [r0, #2]
   1dffa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1dffe:	7083      	strb	r3, [r0, #2]
   1e000:	680a      	ldr	r2, [r1, #0]
   1e002:	78c3      	ldrb	r3, [r0, #3]
   1e004:	4053      	eors	r3, r2
   1e006:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1e008:	79cb      	ldrb	r3, [r1, #7]
   1e00a:	7902      	ldrb	r2, [r0, #4]
   1e00c:	4053      	eors	r3, r2
   1e00e:	7103      	strb	r3, [r0, #4]
   1e010:	88cb      	ldrh	r3, [r1, #6]
   1e012:	7942      	ldrb	r2, [r0, #5]
   1e014:	4053      	eors	r3, r2
   1e016:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1e018:	684a      	ldr	r2, [r1, #4]
   1e01a:	7983      	ldrb	r3, [r0, #6]
   1e01c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e020:	7183      	strb	r3, [r0, #6]
   1e022:	684a      	ldr	r2, [r1, #4]
   1e024:	79c3      	ldrb	r3, [r0, #7]
   1e026:	4053      	eors	r3, r2
   1e028:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1e02a:	7acb      	ldrb	r3, [r1, #11]
   1e02c:	7a02      	ldrb	r2, [r0, #8]
   1e02e:	4053      	eors	r3, r2
   1e030:	7203      	strb	r3, [r0, #8]
   1e032:	7a42      	ldrb	r2, [r0, #9]
   1e034:	894b      	ldrh	r3, [r1, #10]
   1e036:	4053      	eors	r3, r2
   1e038:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1e03a:	688a      	ldr	r2, [r1, #8]
   1e03c:	7a83      	ldrb	r3, [r0, #10]
   1e03e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e042:	7283      	strb	r3, [r0, #10]
   1e044:	688a      	ldr	r2, [r1, #8]
   1e046:	7ac3      	ldrb	r3, [r0, #11]
   1e048:	4053      	eors	r3, r2
   1e04a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1e04c:	7bcb      	ldrb	r3, [r1, #15]
   1e04e:	7b02      	ldrb	r2, [r0, #12]
   1e050:	4053      	eors	r3, r2
   1e052:	7303      	strb	r3, [r0, #12]
   1e054:	89cb      	ldrh	r3, [r1, #14]
   1e056:	7b42      	ldrb	r2, [r0, #13]
   1e058:	4053      	eors	r3, r2
   1e05a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1e05c:	68ca      	ldr	r2, [r1, #12]
   1e05e:	7b83      	ldrb	r3, [r0, #14]
   1e060:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e064:	7383      	strb	r3, [r0, #14]
   1e066:	68ca      	ldr	r2, [r1, #12]
   1e068:	7bc3      	ldrb	r3, [r0, #15]
   1e06a:	4053      	eors	r3, r2
   1e06c:	73c3      	strb	r3, [r0, #15]
}
   1e06e:	4770      	bx	lr

0001e070 <shift_rows>:
{
   1e070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1e072:	7802      	ldrb	r2, [r0, #0]
   1e074:	f88d 2000 	strb.w	r2, [sp]
   1e078:	7942      	ldrb	r2, [r0, #5]
   1e07a:	f88d 2001 	strb.w	r2, [sp, #1]
   1e07e:	7a82      	ldrb	r2, [r0, #10]
   1e080:	f88d 2002 	strb.w	r2, [sp, #2]
   1e084:	7bc2      	ldrb	r2, [r0, #15]
   1e086:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1e08a:	7902      	ldrb	r2, [r0, #4]
   1e08c:	f88d 2004 	strb.w	r2, [sp, #4]
   1e090:	7a42      	ldrb	r2, [r0, #9]
   1e092:	f88d 2005 	strb.w	r2, [sp, #5]
   1e096:	7b82      	ldrb	r2, [r0, #14]
   1e098:	f88d 2006 	strb.w	r2, [sp, #6]
   1e09c:	78c2      	ldrb	r2, [r0, #3]
   1e09e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1e0a2:	7a02      	ldrb	r2, [r0, #8]
   1e0a4:	f88d 2008 	strb.w	r2, [sp, #8]
   1e0a8:	7b42      	ldrb	r2, [r0, #13]
   1e0aa:	f88d 2009 	strb.w	r2, [sp, #9]
   1e0ae:	7882      	ldrb	r2, [r0, #2]
   1e0b0:	f88d 200a 	strb.w	r2, [sp, #10]
   1e0b4:	79c2      	ldrb	r2, [r0, #7]
   1e0b6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1e0ba:	7b02      	ldrb	r2, [r0, #12]
   1e0bc:	f88d 200c 	strb.w	r2, [sp, #12]
   1e0c0:	7842      	ldrb	r2, [r0, #1]
   1e0c2:	f88d 200d 	strb.w	r2, [sp, #13]
   1e0c6:	7ac3      	ldrb	r3, [r0, #11]
   1e0c8:	7982      	ldrb	r2, [r0, #6]
   1e0ca:	f88d 200e 	strb.w	r2, [sp, #14]
   1e0ce:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1e0d2:	2310      	movs	r3, #16
   1e0d4:	466a      	mov	r2, sp
   1e0d6:	4619      	mov	r1, r3
   1e0d8:	f7ff f87a 	bl	1d1d0 <_copy>
}
   1e0dc:	b005      	add	sp, #20
   1e0de:	f85d fb04 	ldr.w	pc, [sp], #4

0001e0e2 <mult_row_column>:
{
   1e0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0e4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1e0e6:	7808      	ldrb	r0, [r1, #0]
{
   1e0e8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1e0ea:	f7ff f880 	bl	1d1ee <_double_byte>
   1e0ee:	4605      	mov	r5, r0
   1e0f0:	7860      	ldrb	r0, [r4, #1]
   1e0f2:	f7ff f87c 	bl	1d1ee <_double_byte>
   1e0f6:	78a2      	ldrb	r2, [r4, #2]
   1e0f8:	7863      	ldrb	r3, [r4, #1]
   1e0fa:	4053      	eors	r3, r2
   1e0fc:	78e2      	ldrb	r2, [r4, #3]
   1e0fe:	4053      	eors	r3, r2
   1e100:	405d      	eors	r5, r3
   1e102:	4045      	eors	r5, r0
   1e104:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1e106:	7860      	ldrb	r0, [r4, #1]
   1e108:	7827      	ldrb	r7, [r4, #0]
   1e10a:	f7ff f870 	bl	1d1ee <_double_byte>
   1e10e:	4605      	mov	r5, r0
   1e110:	78a0      	ldrb	r0, [r4, #2]
   1e112:	f7ff f86c 	bl	1d1ee <_double_byte>
   1e116:	78a3      	ldrb	r3, [r4, #2]
   1e118:	405f      	eors	r7, r3
   1e11a:	78e3      	ldrb	r3, [r4, #3]
   1e11c:	405f      	eors	r7, r3
   1e11e:	407d      	eors	r5, r7
   1e120:	4045      	eors	r5, r0
   1e122:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1e124:	78a0      	ldrb	r0, [r4, #2]
   1e126:	7865      	ldrb	r5, [r4, #1]
   1e128:	7827      	ldrb	r7, [r4, #0]
   1e12a:	f7ff f860 	bl	1d1ee <_double_byte>
   1e12e:	406f      	eors	r7, r5
   1e130:	4605      	mov	r5, r0
   1e132:	78e0      	ldrb	r0, [r4, #3]
   1e134:	f7ff f85b 	bl	1d1ee <_double_byte>
   1e138:	78e3      	ldrb	r3, [r4, #3]
   1e13a:	405f      	eors	r7, r3
   1e13c:	407d      	eors	r5, r7
   1e13e:	4045      	eors	r5, r0
   1e140:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1e142:	7820      	ldrb	r0, [r4, #0]
   1e144:	f7ff f853 	bl	1d1ee <_double_byte>
   1e148:	7863      	ldrb	r3, [r4, #1]
   1e14a:	7825      	ldrb	r5, [r4, #0]
   1e14c:	405d      	eors	r5, r3
   1e14e:	78a3      	ldrb	r3, [r4, #2]
   1e150:	405d      	eors	r5, r3
   1e152:	4045      	eors	r5, r0
   1e154:	78e0      	ldrb	r0, [r4, #3]
   1e156:	f7ff f84a 	bl	1d1ee <_double_byte>
   1e15a:	b2ed      	uxtb	r5, r5
   1e15c:	4068      	eors	r0, r5
   1e15e:	70f0      	strb	r0, [r6, #3]
}
   1e160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e162 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1e162:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1e164:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1e166:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1e168:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1e16c:	2b00      	cmp	r3, #0
   1e16e:	bfb4      	ite	lt
   1e170:	2387      	movlt	r3, #135	; 0x87
   1e172:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1e174:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1e178:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1e17c:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1e17e:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1e182:	d002      	beq.n	1e18a <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1e184:	7813      	ldrb	r3, [r2, #0]
   1e186:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1e188:	e7f4      	b.n	1e174 <gf_double+0x12>
	}
}
   1e18a:	bd10      	pop	{r4, pc}

0001e18c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1e18c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1e18e:	b120      	cbz	r0, 1e19a <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1e190:	2258      	movs	r2, #88	; 0x58
   1e192:	2100      	movs	r1, #0
   1e194:	f7ff f829 	bl	1d1ea <_set>
   1e198:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1e19a:	bd08      	pop	{r3, pc}

0001e19c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1e19c:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1e19e:	4604      	mov	r4, r0
   1e1a0:	b188      	cbz	r0, 1e1c6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1e1a2:	2210      	movs	r2, #16
   1e1a4:	2100      	movs	r1, #0
   1e1a6:	f7ff f820 	bl	1d1ea <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1e1aa:	2210      	movs	r2, #16
   1e1ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e1b0:	2100      	movs	r1, #0
   1e1b2:	f7ff f81a 	bl	1d1ea <_set>
	s->leftover_offset = 0;
   1e1b6:	2300      	movs	r3, #0
   1e1b8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1e1ba:	2200      	movs	r2, #0
   1e1bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e1c0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1e1c4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1e1c6:	bd10      	pop	{r4, pc}

0001e1c8 <tc_cmac_setup>:
{
   1e1c8:	b570      	push	{r4, r5, r6, lr}
   1e1ca:	460d      	mov	r5, r1
   1e1cc:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1e1ce:	4604      	mov	r4, r0
   1e1d0:	b310      	cbz	r0, 1e218 <tc_cmac_setup+0x50>
   1e1d2:	b311      	cbz	r1, 1e21a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1e1d4:	2258      	movs	r2, #88	; 0x58
   1e1d6:	2100      	movs	r1, #0
   1e1d8:	f7ff f807 	bl	1d1ea <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1e1dc:	4629      	mov	r1, r5
	s->sched = sched;
   1e1de:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1e1e0:	4630      	mov	r0, r6
   1e1e2:	f7e5 f9a3 	bl	352c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1e1e6:	2210      	movs	r2, #16
   1e1e8:	2100      	movs	r1, #0
   1e1ea:	4620      	mov	r0, r4
   1e1ec:	f7fe fffd 	bl	1d1ea <_set>
	gf_double (s->K1, s->iv);
   1e1f0:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1e1f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e1f6:	4621      	mov	r1, r4
   1e1f8:	4620      	mov	r0, r4
   1e1fa:	f7e5 f9ed 	bl	35d8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1e1fe:	4621      	mov	r1, r4
   1e200:	4628      	mov	r0, r5
   1e202:	f7ff ffae 	bl	1e162 <gf_double>
	gf_double (s->K2, s->K1);
   1e206:	4629      	mov	r1, r5
   1e208:	f104 0020 	add.w	r0, r4, #32
   1e20c:	f7ff ffa9 	bl	1e162 <gf_double>
	tc_cmac_init(s);
   1e210:	4620      	mov	r0, r4
   1e212:	f7ff ffc3 	bl	1e19c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1e216:	2001      	movs	r0, #1
}
   1e218:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1e21a:	4608      	mov	r0, r1
   1e21c:	e7fc      	b.n	1e218 <tc_cmac_setup+0x50>

0001e21e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1e21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e222:	460d      	mov	r5, r1
   1e224:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1e226:	4604      	mov	r4, r0
   1e228:	2800      	cmp	r0, #0
   1e22a:	d061      	beq.n	1e2f0 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1e22c:	b912      	cbnz	r2, 1e234 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1e22e:	2001      	movs	r0, #1
}
   1e230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1e234:	2900      	cmp	r1, #0
   1e236:	d05b      	beq.n	1e2f0 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1e238:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1e23c:	ea50 0301 	orrs.w	r3, r0, r1
   1e240:	d056      	beq.n	1e2f0 <tc_cmac_update+0xd2>
	s->countdown--;
   1e242:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1e246:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1e24a:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1e24e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1e252:	f1b8 0f00 	cmp.w	r8, #0
   1e256:	d02a      	beq.n	1e2ae <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1e258:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1e25c:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1e260:	42be      	cmp	r6, r7
   1e262:	4420      	add	r0, r4
   1e264:	d208      	bcs.n	1e278 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1e266:	4633      	mov	r3, r6
   1e268:	4631      	mov	r1, r6
   1e26a:	462a      	mov	r2, r5
   1e26c:	f7fe ffb0 	bl	1d1d0 <_copy>
			s->leftover_offset += data_length;
   1e270:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1e272:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   1e274:	6466      	str	r6, [r4, #68]	; 0x44
   1e276:	e7da      	b.n	1e22e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1e278:	463b      	mov	r3, r7
   1e27a:	462a      	mov	r2, r5
   1e27c:	4639      	mov	r1, r7
   1e27e:	f7fe ffa7 	bl	1d1d0 <_copy>
		data_length -= remaining_space;
   1e282:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1e284:	2300      	movs	r3, #0
   1e286:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1e288:	4446      	add	r6, r8
		data += remaining_space;
   1e28a:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e28c:	1e63      	subs	r3, r4, #1
   1e28e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1e292:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e296:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e29a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1e29c:	ea82 0200 	eor.w	r2, r2, r0
   1e2a0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e2a2:	d1f6      	bne.n	1e292 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1e2a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e2a6:	4621      	mov	r1, r4
   1e2a8:	4620      	mov	r0, r4
   1e2aa:	f7e5 f995 	bl	35d8 <tc_aes_encrypt>
   1e2ae:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1e2b2:	2e10      	cmp	r6, #16
   1e2b4:	d809      	bhi.n	1e2ca <tc_cmac_update+0xac>
	if (data_length > 0) {
   1e2b6:	2e00      	cmp	r6, #0
   1e2b8:	d0b9      	beq.n	1e22e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1e2ba:	4633      	mov	r3, r6
   1e2bc:	462a      	mov	r2, r5
   1e2be:	4631      	mov	r1, r6
   1e2c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e2c4:	f7fe ff84 	bl	1d1d0 <_copy>
   1e2c8:	e7d4      	b.n	1e274 <tc_cmac_update+0x56>
   1e2ca:	1e63      	subs	r3, r4, #1
   1e2cc:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1e2ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e2d2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e2d6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1e2d8:	ea82 0200 	eor.w	r2, r2, r0
   1e2dc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e2de:	d1f6      	bne.n	1e2ce <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1e2e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e2e2:	4621      	mov	r1, r4
   1e2e4:	4620      	mov	r0, r4
   1e2e6:	f7e5 f977 	bl	35d8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1e2ea:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1e2ec:	3e10      	subs	r6, #16
   1e2ee:	e7e0      	b.n	1e2b2 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1e2f0:	2000      	movs	r0, #0
   1e2f2:	e79d      	b.n	1e230 <tc_cmac_update+0x12>

0001e2f4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1e2f4:	b570      	push	{r4, r5, r6, lr}
   1e2f6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1e2f8:	4605      	mov	r5, r0
   1e2fa:	b1e8      	cbz	r0, 1e338 <tc_cmac_final+0x44>
   1e2fc:	b369      	cbz	r1, 1e35a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1e2fe:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1e300:	2a10      	cmp	r2, #16
   1e302:	d11a      	bne.n	1e33a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1e304:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e306:	1e63      	subs	r3, r4, #1
   1e308:	3901      	subs	r1, #1
   1e30a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1e30e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e312:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1e316:	4072      	eors	r2, r6
   1e318:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e31c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1e31e:	ea82 0206 	eor.w	r2, r2, r6
   1e322:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e324:	d1f3      	bne.n	1e30e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1e326:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e328:	4621      	mov	r1, r4
   1e32a:	4628      	mov	r0, r5
   1e32c:	f7e5 f954 	bl	35d8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1e330:	4620      	mov	r0, r4
   1e332:	f7ff ff2b 	bl	1e18c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1e336:	2001      	movs	r0, #1
}
   1e338:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1e33a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1e33e:	2100      	movs	r1, #0
   1e340:	f1c2 0210 	rsb	r2, r2, #16
   1e344:	4420      	add	r0, r4
   1e346:	f7fe ff50 	bl	1d1ea <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1e34a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1e34c:	4423      	add	r3, r4
   1e34e:	2280      	movs	r2, #128	; 0x80
   1e350:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1e354:	f104 0120 	add.w	r1, r4, #32
   1e358:	e7d5      	b.n	1e306 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1e35a:	4608      	mov	r0, r1
   1e35c:	e7ec      	b.n	1e338 <tc_cmac_final+0x44>

0001e35e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1e35e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1e360:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   1e362:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1e364:	bf9d      	ittte	ls
   1e366:	6882      	ldrls	r2, [r0, #8]
   1e368:	18d2      	addls	r2, r2, r3
   1e36a:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
   1e36e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1e372:	bf94      	ite	ls
   1e374:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   1e376:	1a58      	subhi	r0, r3, r1
}
   1e378:	4770      	bx	lr

0001e37a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1e37e:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e382:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1e384:	1b3e      	subs	r6, r7, r4
  if (Rem > NumBytes) {
   1e386:	6840      	ldr	r0, [r0, #4]
   1e388:	4296      	cmp	r6, r2
   1e38a:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e38c:	4688      	mov	r8, r1
   1e38e:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1e390:	d904      	bls.n	1e39c <_WriteNoCheck+0x22>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1e392:	f001 f939 	bl	1f608 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1e396:	60ec      	str	r4, [r5, #12]
}
   1e398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1e39c:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   1e39e:	1be4      	subs	r4, r4, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1e3a0:	f001 f932 	bl	1f608 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1e3a4:	4622      	mov	r2, r4
   1e3a6:	eb08 0106 	add.w	r1, r8, r6
   1e3aa:	6868      	ldr	r0, [r5, #4]
   1e3ac:	e7f1      	b.n	1e392 <_WriteNoCheck+0x18>

0001e3ae <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1e3ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1e3b2:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1e3b4:	4606      	mov	r6, r0
   1e3b6:	4689      	mov	r9, r1
   1e3b8:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1e3ba:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1e3be:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1e3c0:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1e3c2:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1e3c4:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1e3c6:	bf28      	it	cs
   1e3c8:	18e4      	addcs	r4, r4, r3
   1e3ca:	3c01      	subs	r4, #1
   1e3cc:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1e3ce:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1e3d0:	42bc      	cmp	r4, r7
   1e3d2:	bf28      	it	cs
   1e3d4:	463c      	movcs	r4, r7
   1e3d6:	4294      	cmp	r4, r2
   1e3d8:	bf28      	it	cs
   1e3da:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1e3dc:	4649      	mov	r1, r9
   1e3de:	4428      	add	r0, r5
   1e3e0:	4622      	mov	r2, r4
   1e3e2:	f001 f911 	bl	1f608 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1e3e6:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1e3e8:	4425      	add	r5, r4
      WrOff = 0u;
   1e3ea:	42ab      	cmp	r3, r5
   1e3ec:	bf08      	it	eq
   1e3ee:	2500      	moveq	r5, #0
  } while (NumBytes);
   1e3f0:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1e3f2:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1e3f4:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1e3f6:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1e3f8:	d1e1      	bne.n	1e3be <_WriteBlocking+0x10>
}
   1e3fa:	4640      	mov	r0, r8
   1e3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e400 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1e400:	f7e5 bab2 	b.w	3968 <_DoInit>

0001e404 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   1e404:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1e406:	f7ff fffb 	bl	1e400 <SEGGER_RTT_Init>

	return 0;
}
   1e40a:	2000      	movs	r0, #0
   1e40c:	bd08      	pop	{r3, pc}

0001e40e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1e40e:	2300      	movs	r3, #0
	list->head = NULL;
   1e410:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e414:	4770      	bx	lr

0001e416 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1e416:	6803      	ldr	r3, [r0, #0]
   1e418:	b923      	cbnz	r3, 1e424 <log_list_add_tail+0xe>
		list->head = msg;
   1e41a:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1e41c:	2300      	movs	r3, #0
	list->tail = msg;
   1e41e:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1e420:	600b      	str	r3, [r1, #0]
}
   1e422:	4770      	bx	lr
		list->tail->next = msg;
   1e424:	6843      	ldr	r3, [r0, #4]
   1e426:	6019      	str	r1, [r3, #0]
   1e428:	e7f8      	b.n	1e41c <log_list_add_tail+0x6>

0001e42a <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1e42a:	6800      	ldr	r0, [r0, #0]
   1e42c:	4770      	bx	lr

0001e42e <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1e42e:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1e430:	b10b      	cbz	r3, 1e436 <log_list_head_get+0x8>
		list->head = list->head->next;
   1e432:	681a      	ldr	r2, [r3, #0]
   1e434:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1e436:	4618      	mov	r0, r3
   1e438:	4770      	bx	lr

0001e43a <dummy_timestamp>:
}
   1e43a:	2000      	movs	r0, #0
   1e43c:	4770      	bx	lr

0001e43e <timestamp_get>:
		return k_cycle_get_32();
   1e43e:	f7e6 be7f 	b.w	5140 <z_timer_cycle_get_32>

0001e442 <log_0>:
{
   1e442:	b538      	push	{r3, r4, r5, lr}
   1e444:	4605      	mov	r5, r0
   1e446:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1e448:	f7e5 fb44 	bl	3ad4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e44c:	b128      	cbz	r0, 1e45a <log_0+0x18>
		msg->str = str;
   1e44e:	6105      	str	r5, [r0, #16]
	msg_finalize(msg, src_level);
   1e450:	4621      	mov	r1, r4
}
   1e452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	msg_finalize(msg, src_level);
   1e456:	f7e5 bc0f 	b.w	3c78 <msg_finalize>
}
   1e45a:	bd38      	pop	{r3, r4, r5, pc}

0001e45c <log_1>:
{
   1e45c:	b570      	push	{r4, r5, r6, lr}
   1e45e:	4604      	mov	r4, r0
   1e460:	460e      	mov	r6, r1
   1e462:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       u32_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e464:	f7e5 fb36 	bl	3ad4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e468:	b158      	cbz	r0, 1e482 <log_1+0x26>
		msg->str = str;
   1e46a:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1;
   1e46c:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1e46e:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1;
   1e470:	2201      	movs	r2, #1
   1e472:	f362 1407 	bfi	r4, r2, #4, #4
   1e476:	7244      	strb	r4, [r0, #9]
	msg_finalize(msg, src_level);
   1e478:	4629      	mov	r1, r5
}
   1e47a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg_finalize(msg, src_level);
   1e47e:	f7e5 bbfb 	b.w	3c78 <msg_finalize>
}
   1e482:	bd70      	pop	{r4, r5, r6, pc}

0001e484 <log_2>:
{
   1e484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e488:	4605      	mov	r5, r0
   1e48a:	4688      	mov	r8, r1
   1e48c:	4617      	mov	r7, r2
   1e48e:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       u32_t arg1,
					       u32_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e490:	f7e5 fb20 	bl	3ad4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e494:	b160      	cbz	r0, 1e4b0 <log_2+0x2c>
		msg->str = str;
   1e496:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2;
   1e498:	7a45      	ldrb	r5, [r0, #9]
   1e49a:	2302      	movs	r3, #2
   1e49c:	f363 1507 	bfi	r5, r3, #4, #4
   1e4a0:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1e4a2:	e9c0 8705 	strd	r8, r7, [r0, #20]
	msg_finalize(msg, src_level);
   1e4a6:	4631      	mov	r1, r6
}
   1e4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	msg_finalize(msg, src_level);
   1e4ac:	f7e5 bbe4 	b.w	3c78 <msg_finalize>
}
   1e4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e4b4 <log_3>:
{
   1e4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e4b8:	4605      	mov	r5, r0
   1e4ba:	4689      	mov	r9, r1
   1e4bc:	4690      	mov	r8, r2
   1e4be:	461f      	mov	r7, r3
   1e4c0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       u32_t arg1,
					       u32_t arg2,
					       u32_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1e4c4:	f7e5 fb06 	bl	3ad4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1e4c8:	b168      	cbz	r0, 1e4e6 <log_3+0x32>
		msg->str = str;
   1e4ca:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3;
   1e4cc:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
   1e4ce:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3;
   1e4d0:	2303      	movs	r3, #3
   1e4d2:	f363 1507 	bfi	r5, r3, #4, #4
   1e4d6:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
   1e4d8:	e9c0 9805 	strd	r9, r8, [r0, #20]
	msg_finalize(msg, src_level);
   1e4dc:	4631      	mov	r1, r6
}
   1e4de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	msg_finalize(msg, src_level);
   1e4e2:	f7e5 bbc9 	b.w	3c78 <msg_finalize>
}
   1e4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e4ea <log_n>:
{
   1e4ea:	b510      	push	{r4, lr}
   1e4ec:	461c      	mov	r4, r3
	struct log_msg *msg = log_msg_create_n(str, args, narg);
   1e4ee:	f000 f89b 	bl	1e628 <log_msg_create_n>
	if (msg == NULL) {
   1e4f2:	b120      	cbz	r0, 1e4fe <log_n+0x14>
	msg_finalize(msg, src_level);
   1e4f4:	4621      	mov	r1, r4
}
   1e4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	msg_finalize(msg, src_level);
   1e4fa:	f7e5 bbbd 	b.w	3c78 <msg_finalize>
}
   1e4fe:	bd10      	pop	{r4, pc}

0001e500 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1e500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e504:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   1e506:	8903      	ldrh	r3, [r0, #8]
{
   1e508:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
   1e50c:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   1e50e:	42a3      	cmp	r3, r4
{
   1e510:	460e      	mov	r6, r1
	if (offset >= available_len) {
   1e512:	d803      	bhi.n	1e51c <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   1e514:	2300      	movs	r3, #0
   1e516:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1e518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1e51c:	6811      	ldr	r1, [r2, #0]
   1e51e:	4421      	add	r1, r4
   1e520:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1e522:	bf84      	itt	hi
   1e524:	1b19      	subhi	r1, r3, r4
   1e526:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1e528:	2b0c      	cmp	r3, #12
	req_len = *length;
   1e52a:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1e52e:	d928      	bls.n	1e582 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   1e530:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1e532:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1e536:	d82b      	bhi.n	1e590 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
   1e538:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1e53a:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1e53c:	454b      	cmp	r3, r9
   1e53e:	bf28      	it	cs
   1e540:	464b      	movcs	r3, r9
   1e542:	461d      	mov	r5, r3
		if (put_op) {
   1e544:	4420      	add	r0, r4
			(void)memcpy(&head_data[offset], data, cpy_len);
   1e546:	461a      	mov	r2, r3
		if (put_op) {
   1e548:	b1ff      	cbz	r7, 1e58a <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1e54a:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1e54c:	f001 f85c 	bl	1f608 <memcpy>
		req_len -= cpy_len;
   1e550:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1e554:	442e      	add	r6, r5
	while (req_len > 0) {
   1e556:	f1b9 0f00 	cmp.w	r9, #0
   1e55a:	d0dd      	beq.n	1e518 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1e55c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1e560:	454d      	cmp	r5, r9
   1e562:	bf28      	it	cs
   1e564:	464d      	movcs	r5, r9
		if (put_op) {
   1e566:	1d20      	adds	r0, r4, #4
   1e568:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   1e56a:	462a      	mov	r2, r5
		if (put_op) {
   1e56c:	b1bf      	cbz	r7, 1e59e <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   1e56e:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1e570:	f001 f84a 	bl	1f608 <memcpy>
		req_len -= cpy_len;
   1e574:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1e578:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1e57c:	442e      	add	r6, r5
		offset = 0;
   1e57e:	2400      	movs	r4, #0
   1e580:	e7e9      	b.n	1e556 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   1e582:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1e584:	f04f 0800 	mov.w	r8, #0
   1e588:	e7d8      	b.n	1e53c <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1e58a:	4601      	mov	r1, r0
   1e58c:	4630      	mov	r0, r6
   1e58e:	e7dd      	b.n	1e54c <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   1e590:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1e592:	2c1b      	cmp	r4, #27
   1e594:	d9df      	bls.n	1e556 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   1e596:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1e59a:	3c1c      	subs	r4, #28
   1e59c:	e7f9      	b.n	1e592 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1e59e:	4601      	mov	r1, r0
   1e5a0:	4630      	mov	r0, r6
   1e5a2:	e7e5      	b.n	1e570 <log_msg_hexdump_data_op+0x70>

0001e5a4 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e5a4:	3004      	adds	r0, #4
   1e5a6:	f3bf 8f5b 	dmb	ish
   1e5aa:	e850 3f00 	ldrex	r3, [r0]
   1e5ae:	3301      	adds	r3, #1
   1e5b0:	e840 3200 	strex	r2, r3, [r0]
   1e5b4:	2a00      	cmp	r2, #0
   1e5b6:	d1f8      	bne.n	1e5aa <log_msg_get+0x6>
   1e5b8:	f3bf 8f5b 	dmb	ish
}
   1e5bc:	4770      	bx	lr

0001e5be <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1e5be:	7a40      	ldrb	r0, [r0, #9]
}
   1e5c0:	0900      	lsrs	r0, r0, #4
   1e5c2:	4770      	bx	lr

0001e5c4 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1e5c4:	7a43      	ldrb	r3, [r0, #9]
   1e5c6:	091b      	lsrs	r3, r3, #4
   1e5c8:	428b      	cmp	r3, r1
   1e5ca:	d916      	bls.n	1e5fa <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e5cc:	2b03      	cmp	r3, #3
   1e5ce:	d803      	bhi.n	1e5d8 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   1e5d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e5d4:	6948      	ldr	r0, [r1, #20]
   1e5d6:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1e5d8:	2901      	cmp	r1, #1
   1e5da:	d803      	bhi.n	1e5e4 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   1e5dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1e5e0:	6988      	ldr	r0, [r1, #24]
   1e5e2:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1e5e4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e5e6:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1e5e8:	2906      	cmp	r1, #6
   1e5ea:	d803      	bhi.n	1e5f4 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   1e5ec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1e5f0:	6848      	ldr	r0, [r1, #4]
   1e5f2:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   1e5f4:	3907      	subs	r1, #7
		cont = cont->next;
   1e5f6:	681b      	ldr	r3, [r3, #0]
   1e5f8:	e7f6      	b.n	1e5e8 <log_msg_arg_get+0x24>
		return 0;
   1e5fa:	2000      	movs	r0, #0
}
   1e5fc:	4770      	bx	lr

0001e5fe <log_msg_put>:
{
   1e5fe:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e600:	1d02      	adds	r2, r0, #4
   1e602:	f3bf 8f5b 	dmb	ish
   1e606:	e852 1f00 	ldrex	r1, [r2]
   1e60a:	3901      	subs	r1, #1
   1e60c:	e842 1c00 	strex	ip, r1, [r2]
   1e610:	f1bc 0f00 	cmp.w	ip, #0
   1e614:	d1f7      	bne.n	1e606 <log_msg_put+0x8>
   1e616:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1e61a:	685b      	ldr	r3, [r3, #4]
   1e61c:	b90b      	cbnz	r3, 1e622 <log_msg_put+0x24>
		msg_free(msg);
   1e61e:	f7e5 bc89 	b.w	3f34 <msg_free>
}
   1e622:	4770      	bx	lr

0001e624 <log_msg_str_get>:
}
   1e624:	6900      	ldr	r0, [r0, #16]
   1e626:	4770      	bx	lr

0001e628 <log_msg_create_n>:
{
   1e628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e62c:	4682      	mov	sl, r0
   1e62e:	4688      	mov	r8, r1
   1e630:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1e632:	f7e5 fc6d 	bl	3f10 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1e636:	4604      	mov	r4, r0
   1e638:	b330      	cbz	r0, 1e688 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1e63a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0;
   1e63c:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e63e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1e640:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0;
   1e642:	8106      	strh	r6, [r0, #8]
   1e644:	d909      	bls.n	1e65a <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1e646:	2202      	movs	r2, #2
   1e648:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e64a:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   1e64e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1e652:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   1e654:	f1b9 0f00 	cmp.w	r9, #0
   1e658:	dc0e      	bgt.n	1e678 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1e65a:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1e65c:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1e660:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e664:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1e666:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1e668:	d818      	bhi.n	1e69c <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1e66a:	00aa      	lsls	r2, r5, #2
   1e66c:	4641      	mov	r1, r8
   1e66e:	f104 0014 	add.w	r0, r4, #20
   1e672:	f000 ffc9 	bl	1f608 <memcpy>
		nargs  = 0U;
   1e676:	e007      	b.n	1e688 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1e678:	f7e5 fc4a 	bl	3f10 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1e67c:	4607      	mov	r7, r0
   1e67e:	b930      	cbnz	r0, 1e68e <log_msg_create_n+0x66>
			msg_free(msg);
   1e680:	4620      	mov	r0, r4
   1e682:	f7e5 fc57 	bl	3f34 <msg_free>
			return NULL;
   1e686:	463c      	mov	r4, r7
}
   1e688:	4620      	mov	r0, r4
   1e68a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1e68e:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1e692:	f1a9 0907 	sub.w	r9, r9, #7
   1e696:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   1e698:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1e69a:	e7db      	b.n	1e654 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1e69c:	4641      	mov	r1, r8
   1e69e:	2208      	movs	r2, #8
   1e6a0:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1e6a4:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1e6a6:	f000 ffaf 	bl	1f608 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1e6aa:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1e6ac:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1e6b0:	2d07      	cmp	r5, #7
   1e6b2:	462e      	mov	r6, r5
   1e6b4:	bf28      	it	cs
   1e6b6:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1e6b8:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1e6bc:	4641      	mov	r1, r8
   1e6be:	1d38      	adds	r0, r7, #4
   1e6c0:	464a      	mov	r2, r9
   1e6c2:	f000 ffa1 	bl	1f608 <memcpy>
	while (nargs != 0) {
   1e6c6:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   1e6c8:	44c8      	add	r8, r9
		cont = cont->next;
   1e6ca:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0) {
   1e6cc:	d1f0      	bne.n	1e6b0 <log_msg_create_n+0x88>
   1e6ce:	e7db      	b.n	1e688 <log_msg_create_n+0x60>

0001e6d0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   1e6d0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1e6d2:	2400      	movs	r4, #0
   1e6d4:	9400      	str	r4, [sp, #0]
   1e6d6:	f7ff ff13 	bl	1e500 <log_msg_hexdump_data_op>
}
   1e6da:	b002      	add	sp, #8
   1e6dc:	bd10      	pop	{r4, pc}

0001e6de <buffer_write>:
{
   1e6de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e6e0:	4606      	mov	r6, r0
   1e6e2:	460d      	mov	r5, r1
   1e6e4:	4614      	mov	r4, r2
   1e6e6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1e6e8:	4621      	mov	r1, r4
   1e6ea:	4628      	mov	r0, r5
   1e6ec:	463a      	mov	r2, r7
   1e6ee:	47b0      	blx	r6
	} while (len != 0);
   1e6f0:	1a24      	subs	r4, r4, r0
		buf += processed;
   1e6f2:	4405      	add	r5, r0
	} while (len != 0);
   1e6f4:	d1f8      	bne.n	1e6e8 <buffer_write+0xa>
}
   1e6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e6f8 <std_print>:
{
   1e6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e6fc:	b08e      	sub	sp, #56	; 0x38
   1e6fe:	af0e      	add	r7, sp, #56	; 0x38
   1e700:	4681      	mov	r9, r0
   1e702:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1e704:	f7ff ff8e 	bl	1e624 <log_msg_str_get>
   1e708:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   1e70a:	4648      	mov	r0, r9
   1e70c:	f7ff ff57 	bl	1e5be <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1e710:	0083      	lsls	r3, r0, #2
   1e712:	3307      	adds	r3, #7
   1e714:	f023 0307 	bic.w	r3, r3, #7
   1e718:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
   1e71c:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   1e71e:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1e720:	f04f 0800 	mov.w	r8, #0
   1e724:	45d0      	cmp	r8, sl
   1e726:	d116      	bne.n	1e756 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1e728:	4648      	mov	r0, r9
   1e72a:	f7ff ff48 	bl	1e5be <log_msg_nargs_get>
   1e72e:	280f      	cmp	r0, #15
   1e730:	d81e      	bhi.n	1e770 <std_print+0x78>
   1e732:	e8df f010 	tbh	[pc, r0, lsl #1]
   1e736:	0019      	.short	0x0019
   1e738:	00260020 	.word	0x00260020
   1e73c:	0036002d 	.word	0x0036002d
   1e740:	004e0041 	.word	0x004e0041
   1e744:	006e005d 	.word	0x006e005d
   1e748:	00960081 	.word	0x00960081
   1e74c:	00c600ad 	.word	0x00c600ad
   1e750:	00fe00e1 	.word	0x00fe00e1
   1e754:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1e756:	4641      	mov	r1, r8
   1e758:	4648      	mov	r0, r9
   1e75a:	f7ff ff33 	bl	1e5c4 <log_msg_arg_get>
   1e75e:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   1e762:	f108 0801 	add.w	r8, r8, #1
   1e766:	e7dd      	b.n	1e724 <std_print+0x2c>
		print_formatted(log_output, str);
   1e768:	4631      	mov	r1, r6
   1e76a:	4628      	mov	r0, r5
   1e76c:	f7e5 fc14 	bl	3f98 <print_formatted>
}
   1e770:	46bd      	mov	sp, r7
   1e772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1e776:	6822      	ldr	r2, [r4, #0]
   1e778:	4631      	mov	r1, r6
   1e77a:	4628      	mov	r0, r5
   1e77c:	f7e5 fc0c 	bl	3f98 <print_formatted>
		break;
   1e780:	e7f6      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1e782:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e786:	4631      	mov	r1, r6
   1e788:	4628      	mov	r0, r5
   1e78a:	f7e5 fc05 	bl	3f98 <print_formatted>
		break;
   1e78e:	e7ef      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1e790:	68a3      	ldr	r3, [r4, #8]
   1e792:	9300      	str	r3, [sp, #0]
   1e794:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e798:	4631      	mov	r1, r6
   1e79a:	4628      	mov	r0, r5
   1e79c:	f7e5 fbfc 	bl	3f98 <print_formatted>
		break;
   1e7a0:	e7e6      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e7a2:	68e3      	ldr	r3, [r4, #12]
   1e7a4:	9301      	str	r3, [sp, #4]
   1e7a6:	68a3      	ldr	r3, [r4, #8]
   1e7a8:	9300      	str	r3, [sp, #0]
   1e7aa:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e7ae:	4631      	mov	r1, r6
   1e7b0:	4628      	mov	r0, r5
   1e7b2:	f7e5 fbf1 	bl	3f98 <print_formatted>
		break;
   1e7b6:	e7db      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e7b8:	6923      	ldr	r3, [r4, #16]
   1e7ba:	9302      	str	r3, [sp, #8]
   1e7bc:	68e3      	ldr	r3, [r4, #12]
   1e7be:	9301      	str	r3, [sp, #4]
   1e7c0:	68a3      	ldr	r3, [r4, #8]
   1e7c2:	9300      	str	r3, [sp, #0]
   1e7c4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e7c8:	4631      	mov	r1, r6
   1e7ca:	4628      	mov	r0, r5
   1e7cc:	f7e5 fbe4 	bl	3f98 <print_formatted>
		break;
   1e7d0:	e7ce      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e7d2:	6963      	ldr	r3, [r4, #20]
   1e7d4:	9303      	str	r3, [sp, #12]
   1e7d6:	6923      	ldr	r3, [r4, #16]
   1e7d8:	9302      	str	r3, [sp, #8]
   1e7da:	68e3      	ldr	r3, [r4, #12]
   1e7dc:	9301      	str	r3, [sp, #4]
   1e7de:	68a3      	ldr	r3, [r4, #8]
   1e7e0:	9300      	str	r3, [sp, #0]
   1e7e2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e7e6:	4631      	mov	r1, r6
   1e7e8:	4628      	mov	r0, r5
   1e7ea:	f7e5 fbd5 	bl	3f98 <print_formatted>
		break;
   1e7ee:	e7bf      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e7f0:	69a3      	ldr	r3, [r4, #24]
   1e7f2:	9304      	str	r3, [sp, #16]
   1e7f4:	6963      	ldr	r3, [r4, #20]
   1e7f6:	9303      	str	r3, [sp, #12]
   1e7f8:	6923      	ldr	r3, [r4, #16]
   1e7fa:	9302      	str	r3, [sp, #8]
   1e7fc:	68e3      	ldr	r3, [r4, #12]
   1e7fe:	9301      	str	r3, [sp, #4]
   1e800:	68a3      	ldr	r3, [r4, #8]
   1e802:	9300      	str	r3, [sp, #0]
   1e804:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e808:	4631      	mov	r1, r6
   1e80a:	4628      	mov	r0, r5
   1e80c:	f7e5 fbc4 	bl	3f98 <print_formatted>
		break;
   1e810:	e7ae      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e812:	69e3      	ldr	r3, [r4, #28]
   1e814:	9305      	str	r3, [sp, #20]
   1e816:	69a3      	ldr	r3, [r4, #24]
   1e818:	9304      	str	r3, [sp, #16]
   1e81a:	6963      	ldr	r3, [r4, #20]
   1e81c:	9303      	str	r3, [sp, #12]
   1e81e:	6923      	ldr	r3, [r4, #16]
   1e820:	9302      	str	r3, [sp, #8]
   1e822:	68e3      	ldr	r3, [r4, #12]
   1e824:	9301      	str	r3, [sp, #4]
   1e826:	68a3      	ldr	r3, [r4, #8]
   1e828:	9300      	str	r3, [sp, #0]
   1e82a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e82e:	4631      	mov	r1, r6
   1e830:	4628      	mov	r0, r5
   1e832:	f7e5 fbb1 	bl	3f98 <print_formatted>
		break;
   1e836:	e79b      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e838:	6a23      	ldr	r3, [r4, #32]
   1e83a:	9306      	str	r3, [sp, #24]
   1e83c:	69e3      	ldr	r3, [r4, #28]
   1e83e:	9305      	str	r3, [sp, #20]
   1e840:	69a3      	ldr	r3, [r4, #24]
   1e842:	9304      	str	r3, [sp, #16]
   1e844:	6963      	ldr	r3, [r4, #20]
   1e846:	9303      	str	r3, [sp, #12]
   1e848:	6923      	ldr	r3, [r4, #16]
   1e84a:	9302      	str	r3, [sp, #8]
   1e84c:	68e3      	ldr	r3, [r4, #12]
   1e84e:	9301      	str	r3, [sp, #4]
   1e850:	68a3      	ldr	r3, [r4, #8]
   1e852:	9300      	str	r3, [sp, #0]
   1e854:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e858:	4631      	mov	r1, r6
   1e85a:	4628      	mov	r0, r5
   1e85c:	f7e5 fb9c 	bl	3f98 <print_formatted>
		break;
   1e860:	e786      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e862:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e864:	9307      	str	r3, [sp, #28]
   1e866:	6a23      	ldr	r3, [r4, #32]
   1e868:	9306      	str	r3, [sp, #24]
   1e86a:	69e3      	ldr	r3, [r4, #28]
   1e86c:	9305      	str	r3, [sp, #20]
   1e86e:	69a3      	ldr	r3, [r4, #24]
   1e870:	9304      	str	r3, [sp, #16]
   1e872:	6963      	ldr	r3, [r4, #20]
   1e874:	9303      	str	r3, [sp, #12]
   1e876:	6923      	ldr	r3, [r4, #16]
   1e878:	9302      	str	r3, [sp, #8]
   1e87a:	68e3      	ldr	r3, [r4, #12]
   1e87c:	9301      	str	r3, [sp, #4]
   1e87e:	68a3      	ldr	r3, [r4, #8]
   1e880:	9300      	str	r3, [sp, #0]
   1e882:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e886:	4631      	mov	r1, r6
   1e888:	4628      	mov	r0, r5
   1e88a:	f7e5 fb85 	bl	3f98 <print_formatted>
		break;
   1e88e:	e76f      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e890:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e892:	9308      	str	r3, [sp, #32]
   1e894:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e896:	9307      	str	r3, [sp, #28]
   1e898:	6a23      	ldr	r3, [r4, #32]
   1e89a:	9306      	str	r3, [sp, #24]
   1e89c:	69e3      	ldr	r3, [r4, #28]
   1e89e:	9305      	str	r3, [sp, #20]
   1e8a0:	69a3      	ldr	r3, [r4, #24]
   1e8a2:	9304      	str	r3, [sp, #16]
   1e8a4:	6963      	ldr	r3, [r4, #20]
   1e8a6:	9303      	str	r3, [sp, #12]
   1e8a8:	6923      	ldr	r3, [r4, #16]
   1e8aa:	9302      	str	r3, [sp, #8]
   1e8ac:	68e3      	ldr	r3, [r4, #12]
   1e8ae:	9301      	str	r3, [sp, #4]
   1e8b0:	68a3      	ldr	r3, [r4, #8]
   1e8b2:	9300      	str	r3, [sp, #0]
   1e8b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e8b8:	4631      	mov	r1, r6
   1e8ba:	4628      	mov	r0, r5
   1e8bc:	f7e5 fb6c 	bl	3f98 <print_formatted>
		break;
   1e8c0:	e756      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e8c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e8c4:	9309      	str	r3, [sp, #36]	; 0x24
   1e8c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e8c8:	9308      	str	r3, [sp, #32]
   1e8ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e8cc:	9307      	str	r3, [sp, #28]
   1e8ce:	6a23      	ldr	r3, [r4, #32]
   1e8d0:	9306      	str	r3, [sp, #24]
   1e8d2:	69e3      	ldr	r3, [r4, #28]
   1e8d4:	9305      	str	r3, [sp, #20]
   1e8d6:	69a3      	ldr	r3, [r4, #24]
   1e8d8:	9304      	str	r3, [sp, #16]
   1e8da:	6963      	ldr	r3, [r4, #20]
   1e8dc:	9303      	str	r3, [sp, #12]
   1e8de:	6923      	ldr	r3, [r4, #16]
   1e8e0:	9302      	str	r3, [sp, #8]
   1e8e2:	68e3      	ldr	r3, [r4, #12]
   1e8e4:	9301      	str	r3, [sp, #4]
   1e8e6:	68a3      	ldr	r3, [r4, #8]
   1e8e8:	9300      	str	r3, [sp, #0]
   1e8ea:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e8ee:	4631      	mov	r1, r6
   1e8f0:	4628      	mov	r0, r5
   1e8f2:	f7e5 fb51 	bl	3f98 <print_formatted>
		break;
   1e8f6:	e73b      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e8f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e8fa:	930a      	str	r3, [sp, #40]	; 0x28
   1e8fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e8fe:	9309      	str	r3, [sp, #36]	; 0x24
   1e900:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e902:	9308      	str	r3, [sp, #32]
   1e904:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e906:	9307      	str	r3, [sp, #28]
   1e908:	6a23      	ldr	r3, [r4, #32]
   1e90a:	9306      	str	r3, [sp, #24]
   1e90c:	69e3      	ldr	r3, [r4, #28]
   1e90e:	9305      	str	r3, [sp, #20]
   1e910:	69a3      	ldr	r3, [r4, #24]
   1e912:	9304      	str	r3, [sp, #16]
   1e914:	6963      	ldr	r3, [r4, #20]
   1e916:	9303      	str	r3, [sp, #12]
   1e918:	6923      	ldr	r3, [r4, #16]
   1e91a:	9302      	str	r3, [sp, #8]
   1e91c:	68e3      	ldr	r3, [r4, #12]
   1e91e:	9301      	str	r3, [sp, #4]
   1e920:	68a3      	ldr	r3, [r4, #8]
   1e922:	9300      	str	r3, [sp, #0]
   1e924:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e928:	4631      	mov	r1, r6
   1e92a:	4628      	mov	r0, r5
   1e92c:	f7e5 fb34 	bl	3f98 <print_formatted>
		break;
   1e930:	e71e      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e932:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e934:	930b      	str	r3, [sp, #44]	; 0x2c
   1e936:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e938:	930a      	str	r3, [sp, #40]	; 0x28
   1e93a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e93c:	9309      	str	r3, [sp, #36]	; 0x24
   1e93e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e940:	9308      	str	r3, [sp, #32]
   1e942:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e944:	9307      	str	r3, [sp, #28]
   1e946:	6a23      	ldr	r3, [r4, #32]
   1e948:	9306      	str	r3, [sp, #24]
   1e94a:	69e3      	ldr	r3, [r4, #28]
   1e94c:	9305      	str	r3, [sp, #20]
   1e94e:	69a3      	ldr	r3, [r4, #24]
   1e950:	9304      	str	r3, [sp, #16]
   1e952:	6963      	ldr	r3, [r4, #20]
   1e954:	9303      	str	r3, [sp, #12]
   1e956:	6923      	ldr	r3, [r4, #16]
   1e958:	9302      	str	r3, [sp, #8]
   1e95a:	68e3      	ldr	r3, [r4, #12]
   1e95c:	9301      	str	r3, [sp, #4]
   1e95e:	68a3      	ldr	r3, [r4, #8]
   1e960:	9300      	str	r3, [sp, #0]
   1e962:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e966:	4631      	mov	r1, r6
   1e968:	4628      	mov	r0, r5
   1e96a:	f7e5 fb15 	bl	3f98 <print_formatted>
		break;
   1e96e:	e6ff      	b.n	1e770 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e972:	930c      	str	r3, [sp, #48]	; 0x30
   1e974:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e976:	930b      	str	r3, [sp, #44]	; 0x2c
   1e978:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e97a:	930a      	str	r3, [sp, #40]	; 0x28
   1e97c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e97e:	9309      	str	r3, [sp, #36]	; 0x24
   1e980:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e982:	9308      	str	r3, [sp, #32]
   1e984:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e986:	9307      	str	r3, [sp, #28]
   1e988:	6a23      	ldr	r3, [r4, #32]
   1e98a:	9306      	str	r3, [sp, #24]
   1e98c:	69e3      	ldr	r3, [r4, #28]
   1e98e:	9305      	str	r3, [sp, #20]
   1e990:	69a3      	ldr	r3, [r4, #24]
   1e992:	9304      	str	r3, [sp, #16]
   1e994:	6963      	ldr	r3, [r4, #20]
   1e996:	9303      	str	r3, [sp, #12]
   1e998:	6923      	ldr	r3, [r4, #16]
   1e99a:	9302      	str	r3, [sp, #8]
   1e99c:	68e3      	ldr	r3, [r4, #12]
   1e99e:	9301      	str	r3, [sp, #4]
   1e9a0:	68a3      	ldr	r3, [r4, #8]
   1e9a2:	9300      	str	r3, [sp, #0]
   1e9a4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e9a8:	4631      	mov	r1, r6
   1e9aa:	4628      	mov	r0, r5
   1e9ac:	f7e5 faf4 	bl	3f98 <print_formatted>
}
   1e9b0:	e6de      	b.n	1e770 <std_print+0x78>

0001e9b2 <log_output_flush>:
		     log_output->control_block->offset,
   1e9b2:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   1e9b4:	6881      	ldr	r1, [r0, #8]
{
   1e9b6:	b510      	push	{r4, lr}
   1e9b8:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1e9ba:	e9d2 2300 	ldrd	r2, r3, [r2]
   1e9be:	6800      	ldr	r0, [r0, #0]
   1e9c0:	f7ff fe8d 	bl	1e6de <buffer_write>
	log_output->control_block->offset = 0;
   1e9c4:	6863      	ldr	r3, [r4, #4]
   1e9c6:	2200      	movs	r2, #0
   1e9c8:	601a      	str	r2, [r3, #0]
}
   1e9ca:	bd10      	pop	{r4, pc}

0001e9cc <out_func>:
{
   1e9cc:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1e9ce:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1e9d2:	681b      	ldr	r3, [r3, #0]
   1e9d4:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1e9d6:	684a      	ldr	r2, [r1, #4]
   1e9d8:	6813      	ldr	r3, [r2, #0]
   1e9da:	3301      	adds	r3, #1
   1e9dc:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   1e9de:	68ca      	ldr	r2, [r1, #12]
   1e9e0:	4293      	cmp	r3, r2
   1e9e2:	d102      	bne.n	1e9ea <out_func+0x1e>
		log_output_flush(out_ctx);
   1e9e4:	4608      	mov	r0, r1
   1e9e6:	f7ff ffe4 	bl	1e9b2 <log_output_flush>
}
   1e9ea:	2000      	movs	r0, #0
   1e9ec:	bd08      	pop	{r3, pc}

0001e9ee <char_out>:
{
   1e9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e9f0:	460d      	mov	r5, r1
   1e9f2:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1e9f4:	4604      	mov	r4, r0
   1e9f6:	1847      	adds	r7, r0, r1
   1e9f8:	42bc      	cmp	r4, r7
   1e9fa:	d101      	bne.n	1ea00 <char_out+0x12>
}
   1e9fc:	4628      	mov	r0, r5
   1e9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ea00:	6873      	ldr	r3, [r6, #4]
   1ea02:	f814 1b01 	ldrb.w	r1, [r4], #1
   1ea06:	685b      	ldr	r3, [r3, #4]
   1ea08:	4630      	mov	r0, r6
   1ea0a:	4798      	blx	r3
   1ea0c:	e7f4      	b.n	1e9f8 <char_out+0xa>

0001ea0e <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   1ea0e:	b538      	push	{r3, r4, r5, lr}
		cur = fcb_getnext_sector(fcb, cur);
   1ea10:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
   1ea12:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   1ea14:	f000 fa8e 	bl	1ef34 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   1ea18:	6a23      	ldr	r3, [r4, #32]
   1ea1a:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   1ea1c:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   1ea1e:	d00f      	beq.n	1ea40 <fcb_append_to_scratch+0x32>
	struct flash_sector *sector;
	int rc;

	sector = fcb_new_sector(fcb, 0);
	if (!sector) {
   1ea20:	b170      	cbz	r0, 1ea40 <fcb_append_to_scratch+0x32>
		return FCB_ERR_NOSPACE;
	}
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   1ea22:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1ea24:	3201      	adds	r2, #1
   1ea26:	4601      	mov	r1, r0
   1ea28:	b292      	uxth	r2, r2
   1ea2a:	4620      	mov	r0, r4
   1ea2c:	f000 f932 	bl	1ec94 <fcb_sector_hdr_init>
	if (rc) {
   1ea30:	b928      	cbnz	r0, 1ea3e <fcb_append_to_scratch+0x30>
		return rc;
	}
	fcb->f_active.fe_sector = sector;
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1ea32:	2308      	movs	r3, #8
   1ea34:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   1ea36:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   1ea38:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   1ea3a:	3301      	adds	r3, #1
   1ea3c:	86a3      	strh	r3, [r4, #52]	; 0x34
	return FCB_OK;
}
   1ea3e:	bd38      	pop	{r3, r4, r5, pc}
		return FCB_ERR_NOSPACE;
   1ea40:	f06f 0003 	mvn.w	r0, #3
   1ea44:	e7fb      	b.n	1ea3e <fcb_append_to_scratch+0x30>

0001ea46 <fcb_append>:

int
fcb_append(struct fcb *fcb, u16_t len, struct fcb_entry *append_loc)
{
   1ea46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea4a:	b085      	sub	sp, #20
   1ea4c:	4604      	mov	r4, r0
	struct fcb_entry *active;
	u8_t tmp_str[2];
	int cnt;
	int rc;

	cnt = fcb_put_len(tmp_str, len);
   1ea4e:	a803      	add	r0, sp, #12
{
   1ea50:	460d      	mov	r5, r1
   1ea52:	4616      	mov	r6, r2
	cnt = fcb_put_len(tmp_str, len);
   1ea54:	f000 f8f6 	bl	1ec44 <fcb_put_len>
	if (cnt < 0) {
   1ea58:	f1b0 0800 	subs.w	r8, r0, #0
   1ea5c:	db67      	blt.n	1eb2e <fcb_append+0xe8>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   1ea5e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(u8_t *buf, u16_t len);
int fcb_get_len(u8_t *buf, u16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, u16_t len)
{
	if (fcb->f_align <= 1) {
   1ea62:	2b01      	cmp	r3, #1
   1ea64:	4629      	mov	r1, r5
   1ea66:	fa1f f788 	uxth.w	r7, r8
   1ea6a:	d906      	bls.n	1ea7a <fcb_append+0x34>
		return len;
	}
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ea6c:	1e5d      	subs	r5, r3, #1
   1ea6e:	4419      	add	r1, r3
   1ea70:	425a      	negs	r2, r3
   1ea72:	442f      	add	r7, r5
   1ea74:	3901      	subs	r1, #1
   1ea76:	4017      	ands	r7, r2
   1ea78:	4011      	ands	r1, r2
	if (fcb->f_align <= 1) {
   1ea7a:	2b01      	cmp	r3, #1
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   1ea7c:	b20d      	sxth	r5, r1

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   1ea7e:	f104 0a0c 	add.w	sl, r4, #12
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ea82:	bf86      	itte	hi
   1ea84:	4259      	neghi	r1, r3
   1ea86:	400b      	andhi	r3, r1
		return len;
   1ea88:	2301      	movls	r3, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   1ea8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ea8e:	4650      	mov	r0, sl
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   1ea90:	441d      	add	r5, r3
   1ea92:	f7fd f845 	bl	1bb20 <z_impl_k_mutex_lock>
   1ea96:	b2ad      	uxth	r5, r5
	if (rc) {
   1ea98:	4680      	mov	r8, r0
   1ea9a:	2800      	cmp	r0, #0
   1ea9c:	d153      	bne.n	1eb46 <fcb_append+0x100>
		return FCB_ERR_ARGS;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   1ea9e:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   1eaa2:	443b      	add	r3, r7
   1eaa4:	684a      	ldr	r2, [r1, #4]
   1eaa6:	442b      	add	r3, r5
   1eaa8:	4293      	cmp	r3, r2
   1eaaa:	d92b      	bls.n	1eb04 <fcb_append+0xbe>
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   1eaac:	f894 b006 	ldrb.w	fp, [r4, #6]
	prev = NULL;
   1eab0:	4681      	mov	r9, r0
		cur = fcb_getnext_sector(fcb, cur);
   1eab2:	4620      	mov	r0, r4
   1eab4:	f000 fa3e 	bl	1ef34 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   1eab8:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   1eaba:	f1b9 0f00 	cmp.w	r9, #0
   1eabe:	bf08      	it	eq
   1eac0:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   1eac2:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   1eac4:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   1eac6:	d038      	beq.n	1eb3a <fcb_append+0xf4>
	} while (i++ < cnt);
   1eac8:	45c3      	cmp	fp, r8
   1eaca:	f108 0301 	add.w	r3, r8, #1
   1eace:	dc32      	bgt.n	1eb36 <fcb_append+0xf0>
		if (!sector || (sector->fs_size <
   1ead0:	f1b9 0f00 	cmp.w	r9, #0
   1ead4:	d031      	beq.n	1eb3a <fcb_append+0xf4>
			sizeof(struct fcb_disk_area) + len + cnt)) {
   1ead6:	f107 0308 	add.w	r3, r7, #8
		if (!sector || (sector->fs_size <
   1eada:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   1eade:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   1eae0:	429a      	cmp	r2, r3
   1eae2:	d32a      	bcc.n	1eb3a <fcb_append+0xf4>
			rc = FCB_ERR_NOSPACE;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   1eae4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1eae6:	3201      	adds	r2, #1
   1eae8:	b292      	uxth	r2, r2
   1eaea:	4649      	mov	r1, r9
   1eaec:	4620      	mov	r0, r4
   1eaee:	f000 f8d1 	bl	1ec94 <fcb_sector_hdr_init>
		if (rc) {
   1eaf2:	4680      	mov	r8, r0
   1eaf4:	b9c0      	cbnz	r0, 1eb28 <fcb_append+0xe2>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1eaf6:	2308      	movs	r3, #8
   1eaf8:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   1eafa:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   1eafc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   1eb00:	3301      	adds	r3, #1
   1eb02:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   1eb04:	9700      	str	r7, [sp, #0]
   1eb06:	ab03      	add	r3, sp, #12
   1eb08:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   1eb0c:	4620      	mov	r0, r4
   1eb0e:	f000 f867 	bl	1ebe0 <fcb_flash_write>
	if (rc) {
   1eb12:	4680      	mov	r8, r0
   1eb14:	b9a0      	cbnz	r0, 1eb40 <fcb_append+0xfa>
		rc = FCB_ERR_FLASH;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   1eb16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1eb18:	6033      	str	r3, [r6, #0]
	append_loc->fe_elem_off = active->fe_elem_off;
   1eb1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1eb1c:	6073      	str	r3, [r6, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   1eb1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1eb20:	441f      	add	r7, r3
   1eb22:	60b7      	str	r7, [r6, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   1eb24:	442f      	add	r7, r5
   1eb26:	62a7      	str	r7, [r4, #40]	; 0x28
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   1eb28:	4650      	mov	r0, sl
   1eb2a:	f7fd f865 	bl	1bbf8 <z_impl_k_mutex_unlock>

	return FCB_OK;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   1eb2e:	4640      	mov	r0, r8
   1eb30:	b005      	add	sp, #20
   1eb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   1eb36:	4698      	mov	r8, r3
   1eb38:	e7bb      	b.n	1eab2 <fcb_append+0x6c>
			rc = FCB_ERR_NOSPACE;
   1eb3a:	f06f 0803 	mvn.w	r8, #3
   1eb3e:	e7f3      	b.n	1eb28 <fcb_append+0xe2>
		rc = FCB_ERR_FLASH;
   1eb40:	f06f 0801 	mvn.w	r8, #1
   1eb44:	e7f0      	b.n	1eb28 <fcb_append+0xe2>
		return FCB_ERR_ARGS;
   1eb46:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1eb4a:	e7f0      	b.n	1eb2e <fcb_append+0xe8>

0001eb4c <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   1eb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eb4e:	b083      	sub	sp, #12
	int rc;
	u8_t crc8[fcb->f_align];
   1eb50:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
   1eb54:	1dd3      	adds	r3, r2, #7
   1eb56:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
{
   1eb5a:	af02      	add	r7, sp, #8
	u8_t crc8[fcb->f_align];
   1eb5c:	ebad 0d03 	sub.w	sp, sp, r3
   1eb60:	ae02      	add	r6, sp, #8
{
   1eb62:	4604      	mov	r4, r0
   1eb64:	460d      	mov	r5, r1
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));
   1eb66:	4630      	mov	r0, r6
   1eb68:	21ff      	movs	r1, #255	; 0xff
   1eb6a:	f000 fd77 	bl	1f65c <memset>

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   1eb6e:	4632      	mov	r2, r6
   1eb70:	4629      	mov	r1, r5
   1eb72:	4620      	mov	r0, r4
   1eb74:	f000 f937 	bl	1ede6 <fcb_elem_crc8>
	if (rc) {
   1eb78:	b9a8      	cbnz	r0, 1eba6 <fcb_append_finish+0x5a>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   1eb7a:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
	if (fcb->f_align <= 1) {
   1eb7e:	89aa      	ldrh	r2, [r5, #12]
   1eb80:	68a8      	ldr	r0, [r5, #8]

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   1eb82:	9100      	str	r1, [sp, #0]
   1eb84:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1eb86:	bf81      	itttt	hi
   1eb88:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   1eb8c:	1852      	addhi	r2, r2, r1
   1eb8e:	424b      	neghi	r3, r1
   1eb90:	401a      	andhi	r2, r3
   1eb92:	4402      	add	r2, r0
   1eb94:	4633      	mov	r3, r6
   1eb96:	6829      	ldr	r1, [r5, #0]
   1eb98:	4620      	mov	r0, r4
   1eb9a:	f000 f821 	bl	1ebe0 <fcb_flash_write>
	if (rc) {
   1eb9e:	2800      	cmp	r0, #0
		return FCB_ERR_FLASH;
   1eba0:	bf18      	it	ne
   1eba2:	f06f 0001 	mvnne.w	r0, #1
	}
	return 0;
}
   1eba6:	3704      	adds	r7, #4
   1eba8:	46bd      	mov	sp, r7
   1ebaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ebac <fcb_get_align>:
u8_t
fcb_get_align(const struct fcb *fcb)
{
	u8_t align;

	if (fcb->fap == NULL) {
   1ebac:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1ebae:	b108      	cbz	r0, 1ebb4 <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   1ebb0:	f000 bb15 	b.w	1f1de <flash_area_align>

	return align;
}
   1ebb4:	4770      	bx	lr

0001ebb6 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   1ebb6:	b570      	push	{r4, r5, r6, lr}
   1ebb8:	4614      	mov	r4, r2
   1ebba:	461a      	mov	r2, r3
   1ebbc:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   1ebbe:	684d      	ldr	r5, [r1, #4]
   1ebc0:	18e6      	adds	r6, r4, r3
   1ebc2:	42ae      	cmp	r6, r5
   1ebc4:	d809      	bhi.n	1ebda <fcb_flash_read+0x24>
		return FCB_ERR_ARGS;
	}

	if (fcb->fap == NULL) {
   1ebc6:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1ebc8:	b120      	cbz	r0, 1ebd4 <fcb_flash_read+0x1e>
		return FCB_ERR_FLASH;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   1ebca:	6809      	ldr	r1, [r1, #0]
   1ebcc:	4421      	add	r1, r4
   1ebce:	f000 fa9a 	bl	1f106 <flash_area_read>

	if (rc != 0) {
   1ebd2:	b108      	cbz	r0, 1ebd8 <fcb_flash_read+0x22>
		return FCB_ERR_FLASH;
   1ebd4:	f06f 0001 	mvn.w	r0, #1
	}

	return 0;
}
   1ebd8:	bd70      	pop	{r4, r5, r6, pc}
		return FCB_ERR_ARGS;
   1ebda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ebde:	e7fb      	b.n	1ebd8 <fcb_flash_read+0x22>

0001ebe0 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   1ebe0:	b570      	push	{r4, r5, r6, lr}
   1ebe2:	4614      	mov	r4, r2
   1ebe4:	461a      	mov	r2, r3
   1ebe6:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   1ebe8:	684d      	ldr	r5, [r1, #4]
   1ebea:	18e6      	adds	r6, r4, r3
   1ebec:	42ae      	cmp	r6, r5
   1ebee:	d809      	bhi.n	1ec04 <fcb_flash_write+0x24>
		return FCB_ERR_ARGS;
	}

	if (fcb->fap == NULL) {
   1ebf0:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1ebf2:	b120      	cbz	r0, 1ebfe <fcb_flash_write+0x1e>
		return FCB_ERR_FLASH;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   1ebf4:	6809      	ldr	r1, [r1, #0]
   1ebf6:	4421      	add	r1, r4
   1ebf8:	f000 faa2 	bl	1f140 <flash_area_write>

	if (rc != 0) {
   1ebfc:	b108      	cbz	r0, 1ec02 <fcb_flash_write+0x22>
		return FCB_ERR_FLASH;
   1ebfe:	f06f 0001 	mvn.w	r0, #1
	}

	return 0;
}
   1ec02:	bd70      	pop	{r4, r5, r6, pc}
		return FCB_ERR_ARGS;
   1ec04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ec08:	e7fb      	b.n	1ec02 <fcb_flash_write+0x22>

0001ec0a <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   1ec0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   1ec0c:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   1ec0e:	b120      	cbz	r0, 1ec1a <fcb_erase_sector+0x10>
		return FCB_ERR_FLASH;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   1ec10:	e9d1 1200 	ldrd	r1, r2, [r1]
   1ec14:	f000 fabd 	bl	1f192 <flash_area_erase>

	if (rc != 0) {
   1ec18:	b108      	cbz	r0, 1ec1e <fcb_erase_sector+0x14>
		return FCB_ERR_FLASH;
   1ec1a:	f06f 0001 	mvn.w	r0, #1
	}

	return 0;
}
   1ec1e:	bd08      	pop	{r3, pc}

0001ec20 <fcb_free_sector_cnt>:
fcb_free_sector_cnt(struct fcb *fcb)
{
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
   1ec20:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
   1ec22:	b538      	push	{r3, r4, r5, lr}
   1ec24:	4605      	mov	r5, r0
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   1ec26:	2400      	movs	r4, #0
   1ec28:	796b      	ldrb	r3, [r5, #5]
   1ec2a:	42a3      	cmp	r3, r4
   1ec2c:	dc01      	bgt.n	1ec32 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   1ec2e:	4620      	mov	r0, r4
   1ec30:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   1ec32:	4628      	mov	r0, r5
   1ec34:	f000 f97e 	bl	1ef34 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   1ec38:	6a2b      	ldr	r3, [r5, #32]
   1ec3a:	4283      	cmp	r3, r0
		fa = fcb_getnext_sector(fcb, fa);
   1ec3c:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   1ec3e:	d0f6      	beq.n	1ec2e <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   1ec40:	3401      	adds	r4, #1
   1ec42:	e7f1      	b.n	1ec28 <fcb_free_sector_cnt+0x8>

0001ec44 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(u8_t *buf, u16_t len)
{
	if (len < 0x80) {
   1ec44:	297f      	cmp	r1, #127	; 0x7f
   1ec46:	d802      	bhi.n	1ec4e <fcb_put_len+0xa>
		buf[0] = len;
   1ec48:	7001      	strb	r1, [r0, #0]
		return 1;
   1ec4a:	2001      	movs	r0, #1
   1ec4c:	4770      	bx	lr
	} else if (len < FCB_MAX_LEN) {
   1ec4e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   1ec52:	4299      	cmp	r1, r3
		buf[0] = (len & 0x7f) | 0x80;
   1ec54:	bf9f      	itttt	ls
   1ec56:	f061 037f 	ornls	r3, r1, #127	; 0x7f
		buf[1] = len >> 7;
   1ec5a:	09c9      	lsrls	r1, r1, #7
		buf[0] = (len & 0x7f) | 0x80;
   1ec5c:	7003      	strbls	r3, [r0, #0]
		buf[1] = len >> 7;
   1ec5e:	7041      	strbls	r1, [r0, #1]
		return 2;
   1ec60:	bf94      	ite	ls
   1ec62:	2002      	movls	r0, #2
	} else {
		return FCB_ERR_ARGS;
   1ec64:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}
}
   1ec68:	4770      	bx	lr

0001ec6a <fcb_get_len>:
int
fcb_get_len(u8_t *buf, u16_t *len)
{
	int rc;

	if (buf[0] & 0x80) {
   1ec6a:	7803      	ldrb	r3, [r0, #0]
   1ec6c:	061a      	lsls	r2, r3, #24
   1ec6e:	d50b      	bpl.n	1ec88 <fcb_get_len+0x1e>
		if (buf[0] == 0xff && buf[1] == 0xff) {
   1ec70:	7842      	ldrb	r2, [r0, #1]
   1ec72:	ea03 0002 	and.w	r0, r3, r2
   1ec76:	28ff      	cmp	r0, #255	; 0xff
   1ec78:	d009      	beq.n	1ec8e <fcb_get_len+0x24>
			return FCB_ERR_NOVAR;
		}
		*len = (buf[0] & 0x7f) | (buf[1] << 7);
   1ec7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ec7e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   1ec82:	800b      	strh	r3, [r1, #0]
		rc = 2;
   1ec84:	2002      	movs	r0, #2
   1ec86:	4770      	bx	lr
	} else {
		*len = buf[0];
   1ec88:	800b      	strh	r3, [r1, #0]
		rc = 1;
   1ec8a:	2001      	movs	r0, #1
   1ec8c:	4770      	bx	lr
			return FCB_ERR_NOVAR;
   1ec8e:	f06f 0002 	mvn.w	r0, #2
	}
	return rc;
}
   1ec92:	4770      	bx	lr

0001ec94 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, u16_t id)
{
   1ec94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb->f_magic;
	fda.fd_ver = fcb->f_version;
   1ec96:	7903      	ldrb	r3, [r0, #4]
   1ec98:	f88d 300c 	strb.w	r3, [sp, #12]
	fda._pad = 0xff;
   1ec9c:	23ff      	movs	r3, #255	; 0xff
   1ec9e:	f88d 300d 	strb.w	r3, [sp, #13]
	fda.fd_id = id;

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   1eca2:	2308      	movs	r3, #8
	fda.fd_magic = fcb->f_magic;
   1eca4:	6804      	ldr	r4, [r0, #0]
	fda.fd_id = id;
   1eca6:	f8ad 200e 	strh.w	r2, [sp, #14]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   1ecaa:	9300      	str	r3, [sp, #0]
   1ecac:	2200      	movs	r2, #0
   1ecae:	446b      	add	r3, sp
	fda.fd_magic = fcb->f_magic;
   1ecb0:	9402      	str	r4, [sp, #8]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   1ecb2:	f7ff ff95 	bl	1ebe0 <fcb_flash_write>
	if (rc != 0) {
   1ecb6:	2800      	cmp	r0, #0
		return FCB_ERR_FLASH;
	}
	return 0;
}
   1ecb8:	bf18      	it	ne
   1ecba:	f06f 0001 	mvnne.w	r0, #1
   1ecbe:	b004      	add	sp, #16
   1ecc0:	bd10      	pop	{r4, pc}

0001ecc2 <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   1ecc2:	b530      	push	{r4, r5, lr}
   1ecc4:	4605      	mov	r5, r0
   1ecc6:	b085      	sub	sp, #20
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   1ecc8:	4614      	mov	r4, r2
   1ecca:	b902      	cbnz	r2, 1ecce <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   1eccc:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   1ecce:	2308      	movs	r3, #8
   1ecd0:	9300      	str	r3, [sp, #0]
   1ecd2:	2200      	movs	r2, #0
   1ecd4:	4623      	mov	r3, r4
   1ecd6:	4628      	mov	r0, r5
   1ecd8:	f7ff ff6d 	bl	1ebb6 <fcb_flash_read>
	if (rc) {
   1ecdc:	b950      	cbnz	r0, 1ecf4 <fcb_sector_hdr_read+0x32>
		return FCB_ERR_FLASH;
	}
	if (fdap->fd_magic == 0xffffffff) {
   1ecde:	6823      	ldr	r3, [r4, #0]
   1ece0:	1c5a      	adds	r2, r3, #1
   1ece2:	d005      	beq.n	1ecf0 <fcb_sector_hdr_read+0x2e>
		return 0;
	}
	if (fdap->fd_magic != fcb->f_magic) {
   1ece4:	682a      	ldr	r2, [r5, #0]
		return FCB_ERR_MAGIC;
   1ece6:	4293      	cmp	r3, r2
   1ece8:	bf0c      	ite	eq
   1ecea:	2001      	moveq	r0, #1
   1ecec:	f06f 0006 	mvnne.w	r0, #6
	}
	return 1;
}
   1ecf0:	b005      	add	sp, #20
   1ecf2:	bd30      	pop	{r4, r5, pc}
		return FCB_ERR_FLASH;
   1ecf4:	f06f 0001 	mvn.w	r0, #1
   1ecf8:	e7fa      	b.n	1ecf0 <fcb_sector_hdr_read+0x2e>

0001ecfa <fcb_init>:
{
   1ecfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   1ecfe:	688b      	ldr	r3, [r1, #8]
{
   1ed00:	b085      	sub	sp, #20
   1ed02:	460c      	mov	r4, r1
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   1ed04:	b92b      	cbnz	r3, 1ed12 <fcb_init+0x18>
		return FCB_ERR_ARGS;
   1ed06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   1ed0a:	4628      	mov	r0, r5
   1ed0c:	b005      	add	sp, #20
   1ed0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   1ed12:	794b      	ldrb	r3, [r1, #5]
   1ed14:	798a      	ldrb	r2, [r1, #6]
   1ed16:	1a9b      	subs	r3, r3, r2
   1ed18:	2b00      	cmp	r3, #0
   1ed1a:	ddf4      	ble.n	1ed06 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   1ed1c:	3138      	adds	r1, #56	; 0x38
   1ed1e:	b2c0      	uxtb	r0, r0
   1ed20:	f7e5 fbf8 	bl	4514 <flash_area_open>
	if (rc != 0) {
   1ed24:	4606      	mov	r6, r0
   1ed26:	2800      	cmp	r0, #0
   1ed28:	d1ed      	bne.n	1ed06 <fcb_init+0xc>
	align = fcb_get_align(fcb);
   1ed2a:	4620      	mov	r0, r4
   1ed2c:	f7ff ff3e 	bl	1ebac <fcb_get_align>
	if (align == 0) {
   1ed30:	4683      	mov	fp, r0
   1ed32:	2800      	cmp	r0, #0
   1ed34:	d0e7      	beq.n	1ed06 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   1ed36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   1ed3a:	46b2      	mov	sl, r6
   1ed3c:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   1ed3e:	4698      	mov	r8, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   1ed40:	7962      	ldrb	r2, [r4, #5]
   1ed42:	42b2      	cmp	r2, r6
   1ed44:	dc23      	bgt.n	1ed8e <fcb_init+0x94>
	if (oldest < 0) {
   1ed46:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1ed4a:	d148      	bne.n	1edde <fcb_init+0xe4>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   1ed4c:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   1ed4e:	2200      	movs	r2, #0
   1ed50:	4639      	mov	r1, r7
   1ed52:	4620      	mov	r0, r4
   1ed54:	f7ff ff9e 	bl	1ec94 <fcb_sector_hdr_init>
		if (rc) {
   1ed58:	4605      	mov	r5, r0
   1ed5a:	2800      	cmp	r0, #0
   1ed5c:	d1d5      	bne.n	1ed0a <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   1ed5e:	46ba      	mov	sl, r7
	fcb->f_active.fe_sector = newest_sector;
   1ed60:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1ed64:	2308      	movs	r3, #8
	fcb->f_align = align;
   1ed66:	f884 b036 	strb.w	fp, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1ed6a:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   1ed6c:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   1ed6e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   1ed72:	4631      	mov	r1, r6
   1ed74:	4620      	mov	r0, r4
   1ed76:	f000 f8bc 	bl	1eef2 <fcb_getnext_in_sector>
		if (rc == FCB_ERR_NOVAR) {
   1ed7a:	1cc3      	adds	r3, r0, #3
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   1ed7c:	4605      	mov	r5, r0
		if (rc == FCB_ERR_NOVAR) {
   1ed7e:	d030      	beq.n	1ede2 <fcb_init+0xe8>
		if (rc != 0) {
   1ed80:	2800      	cmp	r0, #0
   1ed82:	d0f6      	beq.n	1ed72 <fcb_init+0x78>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
   1ed84:	f104 000c 	add.w	r0, r4, #12
   1ed88:	f003 fe81 	bl	22a8e <z_impl_k_mutex_init>
	return rc;
   1ed8c:	e7bd      	b.n	1ed0a <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   1ed8e:	68a2      	ldr	r2, [r4, #8]
   1ed90:	9301      	str	r3, [sp, #4]
   1ed92:	eb02 09c6 	add.w	r9, r2, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   1ed96:	4649      	mov	r1, r9
   1ed98:	aa02      	add	r2, sp, #8
   1ed9a:	4620      	mov	r0, r4
   1ed9c:	f7ff ff91 	bl	1ecc2 <fcb_sector_hdr_read>
		if (rc < 0) {
   1eda0:	1e05      	subs	r5, r0, #0
   1eda2:	dbb2      	blt.n	1ed0a <fcb_init+0x10>
		if (rc == 0) {
   1eda4:	9b01      	ldr	r3, [sp, #4]
   1eda6:	d008      	beq.n	1edba <fcb_init+0xc0>
		if (oldest < 0) {
   1eda8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1edac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1edb0:	d105      	bne.n	1edbe <fcb_init+0xc4>
			oldest = newest = fda.fd_id;
   1edb2:	4690      	mov	r8, r2
			oldest_sector = newest_sector = sector;
   1edb4:	46ca      	mov	sl, r9
   1edb6:	464f      	mov	r7, r9
			oldest = newest = fda.fd_id;
   1edb8:	4613      	mov	r3, r2
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   1edba:	3601      	adds	r6, #1
   1edbc:	e7c0      	b.n	1ed40 <fcb_init+0x46>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   1edbe:	b215      	sxth	r5, r2
   1edc0:	b218      	sxth	r0, r3
   1edc2:	1a28      	subs	r0, r5, r0
   1edc4:	2800      	cmp	r0, #0
   1edc6:	dd02      	ble.n	1edce <fcb_init+0xd4>
			newest = fda.fd_id;
   1edc8:	4613      	mov	r3, r2
			newest_sector = sector;
   1edca:	46ca      	mov	sl, r9
   1edcc:	e7f5      	b.n	1edba <fcb_init+0xc0>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   1edce:	fa0f f188 	sxth.w	r1, r8
   1edd2:	1b49      	subs	r1, r1, r5
			oldest = fda.fd_id;
   1edd4:	2900      	cmp	r1, #0
   1edd6:	bfc4      	itt	gt
   1edd8:	4690      	movgt	r8, r2
   1edda:	464f      	movgt	r7, r9
   1eddc:	e7ed      	b.n	1edba <fcb_init+0xc0>
   1edde:	461d      	mov	r5, r3
   1ede0:	e7be      	b.n	1ed60 <fcb_init+0x66>
			rc = FCB_OK;
   1ede2:	2500      	movs	r5, #0
   1ede4:	e7ce      	b.n	1ed84 <fcb_init+0x8a>

0001ede6 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, u8_t *c8p)
{
   1ede6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1edea:	460c      	mov	r4, r1
   1edec:	4617      	mov	r7, r2
	u16_t len;
	u32_t off;
	u32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   1edee:	e9d1 1200 	ldrd	r1, r2, [r1]
   1edf2:	684b      	ldr	r3, [r1, #4]
   1edf4:	1c95      	adds	r5, r2, #2
   1edf6:	429d      	cmp	r5, r3
{
   1edf8:	b08c      	sub	sp, #48	; 0x30
   1edfa:	4606      	mov	r6, r0
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   1edfc:	d84b      	bhi.n	1ee96 <fcb_elem_crc8+0xb0>
		return FCB_ERR_NOVAR;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   1edfe:	2302      	movs	r3, #2
   1ee00:	9300      	str	r3, [sp, #0]
   1ee02:	ab04      	add	r3, sp, #16
   1ee04:	f7ff fed7 	bl	1ebb6 <fcb_flash_read>
	if (rc) {
   1ee08:	b120      	cbz	r0, 1ee14 <fcb_elem_crc8+0x2e>
		return FCB_ERR_FLASH;
   1ee0a:	f06f 0001 	mvn.w	r0, #1
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   1ee0e:	b00c      	add	sp, #48	; 0x30
   1ee10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(tmp_str, &len);
   1ee14:	f10d 010e 	add.w	r1, sp, #14
   1ee18:	a804      	add	r0, sp, #16
   1ee1a:	f7ff ff26 	bl	1ec6a <fcb_get_len>
	if (cnt < 0) {
   1ee1e:	2800      	cmp	r0, #0
   1ee20:	dbf5      	blt.n	1ee0e <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   1ee22:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
   1ee26:	6861      	ldr	r1, [r4, #4]
	if (fcb->f_align <= 1) {
   1ee28:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ee2a:	bf88      	it	hi
   1ee2c:	f102 35ff 	addhi.w	r5, r2, #4294967295	; 0xffffffff
   1ee30:	b283      	uxth	r3, r0
   1ee32:	bf82      	ittt	hi
   1ee34:	195b      	addhi	r3, r3, r5
   1ee36:	4252      	neghi	r2, r2
   1ee38:	4013      	andhi	r3, r2
   1ee3a:	440b      	add	r3, r1
   1ee3c:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   1ee3e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ee42:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   1ee44:	4602      	mov	r2, r0
   1ee46:	a904      	add	r1, sp, #16
   1ee48:	20ff      	movs	r0, #255	; 0xff
   1ee4a:	f7e4 f9d1 	bl	31f0 <crc8_ccitt>
	off = loc->fe_data_off;
   1ee4e:	68a5      	ldr	r5, [r4, #8]
	end = loc->fe_data_off + len;
   1ee50:	f8bd 900e 	ldrh.w	r9, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   1ee54:	4682      	mov	sl, r0
	end = loc->fe_data_off + len;
   1ee56:	44a9      	add	r9, r5
	for (; off < end; off += blk_sz) {
   1ee58:	454d      	cmp	r5, r9
   1ee5a:	d303      	bcc.n	1ee64 <fcb_elem_crc8+0x7e>
	*c8p = crc8;
   1ee5c:	f887 a000 	strb.w	sl, [r7]
	return 0;
   1ee60:	2000      	movs	r0, #0
   1ee62:	e7d4      	b.n	1ee0e <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   1ee64:	eba9 0805 	sub.w	r8, r9, r5
   1ee68:	f1b8 0f20 	cmp.w	r8, #32
   1ee6c:	bf28      	it	cs
   1ee6e:	f04f 0820 	movcs.w	r8, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   1ee72:	f8cd 8000 	str.w	r8, [sp]
   1ee76:	ab04      	add	r3, sp, #16
   1ee78:	462a      	mov	r2, r5
   1ee7a:	6821      	ldr	r1, [r4, #0]
   1ee7c:	4630      	mov	r0, r6
   1ee7e:	f7ff fe9a 	bl	1ebb6 <fcb_flash_read>
		if (rc) {
   1ee82:	2800      	cmp	r0, #0
   1ee84:	d1c1      	bne.n	1ee0a <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   1ee86:	4650      	mov	r0, sl
   1ee88:	4642      	mov	r2, r8
   1ee8a:	a904      	add	r1, sp, #16
   1ee8c:	f7e4 f9b0 	bl	31f0 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   1ee90:	4445      	add	r5, r8
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   1ee92:	4682      	mov	sl, r0
   1ee94:	e7e0      	b.n	1ee58 <fcb_elem_crc8+0x72>
		return FCB_ERR_NOVAR;
   1ee96:	f06f 0002 	mvn.w	r0, #2
   1ee9a:	e7b8      	b.n	1ee0e <fcb_elem_crc8+0x28>

0001ee9c <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   1ee9c:	b530      	push	{r4, r5, lr}
   1ee9e:	b085      	sub	sp, #20
	int rc;
	u8_t crc8;
	u8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   1eea0:	f10d 020e 	add.w	r2, sp, #14
{
   1eea4:	4605      	mov	r5, r0
   1eea6:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   1eea8:	f7ff ff9d 	bl	1ede6 <fcb_elem_crc8>
	if (rc) {
   1eeac:	b9e0      	cbnz	r0, 1eee8 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   1eeae:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
	if (fcb->f_align <= 1) {
   1eeb2:	89a1      	ldrh	r1, [r4, #12]
   1eeb4:	68a2      	ldr	r2, [r4, #8]
   1eeb6:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1eeb8:	bf81      	itttt	hi
   1eeba:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   1eebe:	18c9      	addhi	r1, r1, r3
   1eec0:	425b      	neghi	r3, r3
   1eec2:	4019      	andhi	r1, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   1eec4:	2301      	movs	r3, #1
   1eec6:	9300      	str	r3, [sp, #0]
   1eec8:	440a      	add	r2, r1
   1eeca:	f10d 030f 	add.w	r3, sp, #15
   1eece:	6821      	ldr	r1, [r4, #0]
   1eed0:	4628      	mov	r0, r5
   1eed2:	f7ff fe70 	bl	1ebb6 <fcb_flash_read>
	if (rc) {
   1eed6:	b948      	cbnz	r0, 1eeec <fcb_elem_info+0x50>
		return FCB_ERR_FLASH;
	}

	if (fl_crc8 != crc8) {
   1eed8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1eedc:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1eee0:	429a      	cmp	r2, r3
		return FCB_ERR_CRC;
   1eee2:	bf18      	it	ne
   1eee4:	f06f 0005 	mvnne.w	r0, #5
	}
	return 0;
}
   1eee8:	b005      	add	sp, #20
   1eeea:	bd30      	pop	{r4, r5, pc}
		return FCB_ERR_FLASH;
   1eeec:	f06f 0001 	mvn.w	r0, #1
   1eef0:	e7fa      	b.n	1eee8 <fcb_elem_info+0x4c>

0001eef2 <fcb_getnext_in_sector>:
#include "fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   1eef2:	b538      	push	{r3, r4, r5, lr}
   1eef4:	4604      	mov	r4, r0
   1eef6:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   1eef8:	f7ff ffd0 	bl	1ee9c <fcb_elem_info>
	if (rc == 0 || rc == FCB_ERR_CRC) {
   1eefc:	b108      	cbz	r0, 1ef02 <fcb_getnext_in_sector+0x10>
   1eefe:	1d83      	adds	r3, r0, #6
   1ef00:	d117      	bne.n	1ef32 <fcb_getnext_in_sector+0x40>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   1ef02:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   1ef06:	89ab      	ldrh	r3, [r5, #12]
			loc->fe_elem_off = loc->fe_data_off +
   1ef08:	68aa      	ldr	r2, [r5, #8]
	if (fcb->f_align <= 1) {
   1ef0a:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ef0c:	bf81      	itttt	hi
   1ef0e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   1ef12:	185b      	addhi	r3, r3, r1
   1ef14:	4248      	neghi	r0, r1
   1ef16:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1) {
   1ef18:	2901      	cmp	r1, #1
   1ef1a:	4413      	add	r3, r2
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1ef1c:	bf86      	itte	hi
   1ef1e:	424a      	neghi	r2, r1
   1ef20:	400a      	andhi	r2, r1
		return len;
   1ef22:	2201      	movls	r2, #1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   1ef24:	4413      	add	r3, r2
			loc->fe_elem_off = loc->fe_data_off +
   1ef26:	606b      	str	r3, [r5, #4]
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   1ef28:	4629      	mov	r1, r5
   1ef2a:	4620      	mov	r0, r4
   1ef2c:	f7ff ffb6 	bl	1ee9c <fcb_elem_info>
			if (rc != FCB_ERR_CRC) {
   1ef30:	e7e5      	b.n	1eefe <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == FCB_ERR_CRC);
	}
	return rc;
}
   1ef32:	bd38      	pop	{r3, r4, r5, pc}

0001ef34 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   1ef34:	6882      	ldr	r2, [r0, #8]
   1ef36:	7943      	ldrb	r3, [r0, #5]
	sector++;
   1ef38:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   1ef3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   1ef3e:	4299      	cmp	r1, r3
   1ef40:	bf34      	ite	cc
   1ef42:	4608      	movcc	r0, r1
   1ef44:	4610      	movcs	r0, r2
   1ef46:	4770      	bx	lr

0001ef48 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   1ef48:	680b      	ldr	r3, [r1, #0]
{
   1ef4a:	b570      	push	{r4, r5, r6, lr}
   1ef4c:	4605      	mov	r5, r0
   1ef4e:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   1ef50:	b90b      	cbnz	r3, 1ef56 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   1ef52:	6a03      	ldr	r3, [r0, #32]
   1ef54:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0) {
   1ef56:	6863      	ldr	r3, [r4, #4]
   1ef58:	b953      	cbnz	r3, 1ef70 <fcb_getnext_nolock+0x28>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1ef5a:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   1ef5c:	4621      	mov	r1, r4
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1ef5e:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   1ef60:	4628      	mov	r0, r5
   1ef62:	f7ff ff9b 	bl	1ee9c <fcb_elem_info>
		switch (rc) {
   1ef66:	1d81      	adds	r1, r0, #6
   1ef68:	d01f      	beq.n	1efaa <fcb_getnext_nolock+0x62>
   1ef6a:	b948      	cbnz	r0, 1ef80 <fcb_getnext_nolock+0x38>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   1ef6c:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   1ef6e:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   1ef70:	4621      	mov	r1, r4
   1ef72:	4628      	mov	r0, r5
   1ef74:	f7ff ffbd 	bl	1eef2 <fcb_getnext_in_sector>
		if (rc == 0) {
   1ef78:	2800      	cmp	r0, #0
   1ef7a:	d0f7      	beq.n	1ef6c <fcb_getnext_nolock+0x24>
		if (rc == FCB_ERR_NOVAR) {
   1ef7c:	1cc2      	adds	r2, r0, #3
   1ef7e:	d112      	bne.n	1efa6 <fcb_getnext_nolock+0x5e>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1ef80:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   1ef82:	6821      	ldr	r1, [r4, #0]
   1ef84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ef86:	4299      	cmp	r1, r3
   1ef88:	d018      	beq.n	1efbc <fcb_getnext_nolock+0x74>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   1ef8a:	4628      	mov	r0, r5
   1ef8c:	f7ff ffd2 	bl	1ef34 <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   1ef90:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1ef92:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   1ef96:	4628      	mov	r0, r5
   1ef98:	f7ff ff80 	bl	1ee9c <fcb_elem_info>
			switch (rc) {
   1ef9c:	1d83      	adds	r3, r0, #6
   1ef9e:	d004      	beq.n	1efaa <fcb_getnext_nolock+0x62>
   1efa0:	2800      	cmp	r0, #0
   1efa2:	d0e3      	beq.n	1ef6c <fcb_getnext_nolock+0x24>
   1efa4:	e7ed      	b.n	1ef82 <fcb_getnext_nolock+0x3a>
	while (rc == FCB_ERR_CRC) {
   1efa6:	3006      	adds	r0, #6
   1efa8:	d1e0      	bne.n	1ef6c <fcb_getnext_nolock+0x24>
		rc = fcb_getnext_in_sector(fcb, loc);
   1efaa:	4621      	mov	r1, r4
   1efac:	4628      	mov	r0, r5
   1efae:	f7ff ffa0 	bl	1eef2 <fcb_getnext_in_sector>
		if (rc == 0) {
   1efb2:	2800      	cmp	r0, #0
   1efb4:	d0da      	beq.n	1ef6c <fcb_getnext_nolock+0x24>
		if (rc != FCB_ERR_CRC) {
   1efb6:	3006      	adds	r0, #6
   1efb8:	d0f7      	beq.n	1efaa <fcb_getnext_nolock+0x62>
   1efba:	e7e1      	b.n	1ef80 <fcb_getnext_nolock+0x38>
				return FCB_ERR_NOVAR;
   1efbc:	f06f 0002 	mvn.w	r0, #2
   1efc0:	e7d5      	b.n	1ef6e <fcb_getnext_nolock+0x26>

0001efc2 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   1efc2:	b570      	push	{r4, r5, r6, lr}
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   1efc4:	f100 050c 	add.w	r5, r0, #12
{
   1efc8:	4604      	mov	r4, r0
   1efca:	460e      	mov	r6, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   1efcc:	4628      	mov	r0, r5
   1efce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1efd2:	f7fc fda5 	bl	1bb20 <z_impl_k_mutex_lock>
	if (rc) {
   1efd6:	b948      	cbnz	r0, 1efec <fcb_getnext+0x2a>
		return FCB_ERR_ARGS;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   1efd8:	4620      	mov	r0, r4
   1efda:	4631      	mov	r1, r6
   1efdc:	f7ff ffb4 	bl	1ef48 <fcb_getnext_nolock>
   1efe0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   1efe2:	4628      	mov	r0, r5
   1efe4:	f7fc fe08 	bl	1bbf8 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   1efe8:	4620      	mov	r0, r4
   1efea:	bd70      	pop	{r4, r5, r6, pc}
		return FCB_ERR_ARGS;
   1efec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1eff0:	e7fa      	b.n	1efe8 <fcb_getnext+0x26>

0001eff2 <fcb_rotate>:
#include "fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   1eff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   1eff4:	f100 060c 	add.w	r6, r0, #12
{
   1eff8:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   1effa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1effe:	4630      	mov	r0, r6
   1f000:	f7fc fd8e 	bl	1bb20 <z_impl_k_mutex_lock>
	if (rc) {
   1f004:	bb48      	cbnz	r0, 1f05a <fcb_rotate+0x68>
		return FCB_ERR_ARGS;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   1f006:	6a21      	ldr	r1, [r4, #32]
   1f008:	4620      	mov	r0, r4
   1f00a:	f7ff fdfe 	bl	1ec0a <fcb_erase_sector>
	if (rc) {
   1f00e:	bb08      	cbnz	r0, 1f054 <fcb_rotate+0x62>
		rc = FCB_ERR_FLASH;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   1f010:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   1f014:	4299      	cmp	r1, r3
   1f016:	d112      	bne.n	1f03e <fcb_rotate+0x4c>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   1f018:	4620      	mov	r0, r4
   1f01a:	f7ff ff8b 	bl	1ef34 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   1f01e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1f020:	3201      	adds	r2, #1
   1f022:	4601      	mov	r1, r0
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   1f024:	4607      	mov	r7, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   1f026:	b292      	uxth	r2, r2
   1f028:	4620      	mov	r0, r4
   1f02a:	f7ff fe33 	bl	1ec94 <fcb_sector_hdr_init>
		if (rc) {
   1f02e:	4605      	mov	r5, r0
   1f030:	b958      	cbnz	r0, 1f04a <fcb_rotate+0x58>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1f032:	2308      	movs	r3, #8
   1f034:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   1f036:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   1f038:	6267      	str	r7, [r4, #36]	; 0x24
		fcb->f_active_id++;
   1f03a:	3301      	adds	r3, #1
   1f03c:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   1f03e:	6a21      	ldr	r1, [r4, #32]
   1f040:	4620      	mov	r0, r4
   1f042:	f7ff ff77 	bl	1ef34 <fcb_getnext_sector>
   1f046:	2500      	movs	r5, #0
   1f048:	6220      	str	r0, [r4, #32]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   1f04a:	4630      	mov	r0, r6
   1f04c:	f7fc fdd4 	bl	1bbf8 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   1f050:	4628      	mov	r0, r5
   1f052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = FCB_ERR_FLASH;
   1f054:	f06f 0501 	mvn.w	r5, #1
   1f058:	e7f7      	b.n	1f04a <fcb_rotate+0x58>
		return FCB_ERR_ARGS;
   1f05a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f05e:	e7f7      	b.n	1f050 <fcb_rotate+0x5e>

0001f060 <fcb_walk>:
 * only elements with that flash_sector are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_sector *sector, fcb_walk_cb cb,
	 void *cb_arg)
{
   1f060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f064:	b086      	sub	sp, #24
   1f066:	4698      	mov	r8, r3
	struct fcb_entry_ctx entry_ctx;
	int rc;

	entry_ctx.loc.fe_sector = sector;
	entry_ctx.loc.fe_elem_off = 0;
   1f068:	2300      	movs	r3, #0
{
   1f06a:	4605      	mov	r5, r0
   1f06c:	460e      	mov	r6, r1
   1f06e:	4617      	mov	r7, r2
	entry_ctx.loc.fe_sector = sector;
   1f070:	9101      	str	r1, [sp, #4]
	entry_ctx.loc.fe_elem_off = 0;
   1f072:	9302      	str	r3, [sp, #8]

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   1f074:	f100 040c 	add.w	r4, r0, #12
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   1f078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f07c:	4620      	mov	r0, r4
   1f07e:	f7fc fd4f 	bl	1bb20 <z_impl_k_mutex_lock>
	if (rc < 0) {
   1f082:	2800      	cmp	r0, #0
   1f084:	da12      	bge.n	1f0ac <fcb_walk+0x4c>
		return FCB_ERR_ARGS;
   1f086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return FCB_ERR_ARGS;
		}
	}
	k_mutex_unlock(&fcb->f_mtx);
	return 0;
}
   1f08a:	b006      	add	sp, #24
   1f08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   1f090:	f7fc fdb2 	bl	1bbf8 <z_impl_k_mutex_unlock>
		if (sector && entry_ctx.loc.fe_sector != sector) {
   1f094:	b116      	cbz	r6, 1f09c <fcb_walk+0x3c>
   1f096:	9b01      	ldr	r3, [sp, #4]
   1f098:	42b3      	cmp	r3, r6
   1f09a:	d110      	bne.n	1f0be <fcb_walk+0x5e>
		entry_ctx.fap = fcb->fap;
   1f09c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1f09e:	9305      	str	r3, [sp, #20]
		rc = cb(&entry_ctx, cb_arg);
   1f0a0:	4641      	mov	r1, r8
   1f0a2:	a801      	add	r0, sp, #4
   1f0a4:	47b8      	blx	r7
		if (rc) {
   1f0a6:	2800      	cmp	r0, #0
   1f0a8:	d0e6      	beq.n	1f078 <fcb_walk+0x18>
   1f0aa:	e7ee      	b.n	1f08a <fcb_walk+0x2a>
	while ((rc = fcb_getnext_nolock(fcb, &entry_ctx.loc)) !=
   1f0ac:	a901      	add	r1, sp, #4
   1f0ae:	4628      	mov	r0, r5
   1f0b0:	f7ff ff4a 	bl	1ef48 <fcb_getnext_nolock>
   1f0b4:	3003      	adds	r0, #3
   1f0b6:	4620      	mov	r0, r4
   1f0b8:	d1ea      	bne.n	1f090 <fcb_walk+0x30>
   1f0ba:	f7fc fd9d 	bl	1bbf8 <z_impl_k_mutex_unlock>
			return 0;
   1f0be:	2000      	movs	r0, #0
   1f0c0:	e7e3      	b.n	1f08a <fcb_walk+0x2a>

0001f0c2 <z_impl_flash_write_protection_set>:
static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_protection(dev, enable);
   1f0c2:	6843      	ldr	r3, [r0, #4]
   1f0c4:	68db      	ldr	r3, [r3, #12]
   1f0c6:	4718      	bx	r3

0001f0c8 <get_sectors_cb>:
{
   1f0c8:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1f0ca:	6802      	ldr	r2, [r0, #0]
   1f0cc:	684c      	ldr	r4, [r1, #4]
   1f0ce:	42a2      	cmp	r2, r4
   1f0d0:	d316      	bcc.n	1f100 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1f0d2:	688b      	ldr	r3, [r1, #8]
   1f0d4:	4423      	add	r3, r4
   1f0d6:	429a      	cmp	r2, r3
   1f0d8:	d206      	bcs.n	1f0e8 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1f0da:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1f0de:	42ab      	cmp	r3, r5
   1f0e0:	d304      	bcc.n	1f0ec <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1f0e2:	f06f 030b 	mvn.w	r3, #11
   1f0e6:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   1f0e8:	2000      	movs	r0, #0
   1f0ea:	e00a      	b.n	1f102 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1f0ec:	68cd      	ldr	r5, [r1, #12]
   1f0ee:	1b12      	subs	r2, r2, r4
   1f0f0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   1f0f4:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   1f0f8:	6842      	ldr	r2, [r0, #4]
   1f0fa:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1f0fc:	3301      	adds	r3, #1
   1f0fe:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1f100:	2001      	movs	r0, #1
}
   1f102:	bd70      	pop	{r4, r5, r6, pc}

0001f104 <flash_area_close>:
}
   1f104:	4770      	bx	lr

0001f106 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   1f106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f10a:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   1f10c:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   1f10e:	428b      	cmp	r3, r1
{
   1f110:	4605      	mov	r5, r0
   1f112:	460c      	mov	r4, r1
   1f114:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   1f116:	d30f      	bcc.n	1f138 <flash_area_read+0x32>
   1f118:	1872      	adds	r2, r6, r1
   1f11a:	4293      	cmp	r3, r2
   1f11c:	d30c      	bcc.n	1f138 <flash_area_read+0x32>
   1f11e:	68c0      	ldr	r0, [r0, #12]
   1f120:	f7fc faca 	bl	1b6b8 <z_impl_device_get_binding>
	return api->read(dev, offset, data, len);
   1f124:	6843      	ldr	r3, [r0, #4]
		return -1;
	}

	dev = device_get_binding(fa->fa_dev_name);

	return flash_read(dev, fa->fa_off + off, dst, len);
   1f126:	6869      	ldr	r1, [r5, #4]
   1f128:	681d      	ldr	r5, [r3, #0]
   1f12a:	463a      	mov	r2, r7
   1f12c:	4633      	mov	r3, r6
   1f12e:	4421      	add	r1, r4
   1f130:	46ac      	mov	ip, r5
}
   1f132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f136:	4760      	bx	ip
   1f138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f140 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   1f140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f144:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   1f146:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   1f148:	428b      	cmp	r3, r1
{
   1f14a:	4607      	mov	r7, r0
   1f14c:	460e      	mov	r6, r1
   1f14e:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   1f150:	d31c      	bcc.n	1f18c <flash_area_write+0x4c>
   1f152:	eb08 0201 	add.w	r2, r8, r1
   1f156:	4293      	cmp	r3, r2
   1f158:	d318      	bcc.n	1f18c <flash_area_write+0x4c>
   1f15a:	68c0      	ldr	r0, [r0, #12]
   1f15c:	f7fc faac 	bl	1b6b8 <z_impl_device_get_binding>

K_SYSCALL_DECLARE4(K_SYSCALL_FLASH_WRITE, flash_write, int, struct device *, dev, off_t, offset, const void *, data, size_t, len)

K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_ERASE, flash_erase, int, struct device *, dev, off_t, offset, size_t, size)

K_SYSCALL_DECLARE2(K_SYSCALL_FLASH_WRITE_PROTECTION_SET, flash_write_protection_set, int, struct device *, dev, bool, enable)
   1f160:	2100      	movs	r1, #0
   1f162:	4605      	mov	r5, r0
   1f164:	f7ff ffad 	bl	1f0c2 <z_impl_flash_write_protection_set>
	}

	flash_dev = device_get_binding(fa->fa_dev_name);

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   1f168:	4604      	mov	r4, r0
   1f16a:	b960      	cbnz	r0, 1f186 <flash_area_write+0x46>
	return api->write(dev, offset, data, len);
   1f16c:	686b      	ldr	r3, [r5, #4]
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   1f16e:	6879      	ldr	r1, [r7, #4]
   1f170:	685c      	ldr	r4, [r3, #4]
   1f172:	4431      	add	r1, r6
   1f174:	4643      	mov	r3, r8
   1f176:	464a      	mov	r2, r9
   1f178:	4628      	mov	r0, r5
   1f17a:	47a0      	blx	r4
   1f17c:	2101      	movs	r1, #1
   1f17e:	4604      	mov	r4, r0
   1f180:	4628      	mov	r0, r5
   1f182:	f7ff ff9e 	bl	1f0c2 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   1f186:	4620      	mov	r0, r4
   1f188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
   1f18c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1f190:	e7f9      	b.n	1f186 <flash_area_write+0x46>

0001f192 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   1f192:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   1f194:	428b      	cmp	r3, r1
{
   1f196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f19a:	4607      	mov	r7, r0
   1f19c:	460e      	mov	r6, r1
   1f19e:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   1f1a0:	d31a      	bcc.n	1f1d8 <flash_area_erase+0x46>
   1f1a2:	440a      	add	r2, r1
   1f1a4:	4293      	cmp	r3, r2
   1f1a6:	d317      	bcc.n	1f1d8 <flash_area_erase+0x46>
   1f1a8:	68c0      	ldr	r0, [r0, #12]
   1f1aa:	f7fc fa85 	bl	1b6b8 <z_impl_device_get_binding>
   1f1ae:	2100      	movs	r1, #0
   1f1b0:	4605      	mov	r5, r0
   1f1b2:	f7ff ff86 	bl	1f0c2 <z_impl_flash_write_protection_set>
	}

	flash_dev = device_get_binding(fa->fa_dev_name);

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   1f1b6:	4604      	mov	r4, r0
   1f1b8:	b958      	cbnz	r0, 1f1d2 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   1f1ba:	6879      	ldr	r1, [r7, #4]
	return api->erase(dev, offset, size);
   1f1bc:	686b      	ldr	r3, [r5, #4]
   1f1be:	4431      	add	r1, r6
   1f1c0:	689b      	ldr	r3, [r3, #8]
   1f1c2:	4642      	mov	r2, r8
   1f1c4:	4628      	mov	r0, r5
   1f1c6:	4798      	blx	r3
   1f1c8:	2101      	movs	r1, #1
   1f1ca:	4604      	mov	r4, r0
   1f1cc:	4628      	mov	r0, r5
   1f1ce:	f7ff ff78 	bl	1f0c2 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   1f1d2:	4620      	mov	r0, r4
   1f1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   1f1d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1f1dc:	e7f9      	b.n	1f1d2 <flash_area_erase+0x40>

0001f1de <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   1f1de:	b508      	push	{r3, lr}
   1f1e0:	68c0      	ldr	r0, [r0, #12]
   1f1e2:	f7fc fa69 	bl	1b6b8 <z_impl_device_get_binding>

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_block_size;
   1f1e6:	6843      	ldr	r3, [r0, #4]
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);

	return flash_get_write_block_size(dev);
}
   1f1e8:	7d18      	ldrb	r0, [r3, #20]
   1f1ea:	bd08      	pop	{r3, pc}

0001f1ec <settings_dup_check_cb>:
{
   1f1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1f0:	4689      	mov	r9, r1
   1f1f2:	b089      	sub	sp, #36	; 0x24
	if (strcmp(name, cdca->name)) {
   1f1f4:	6819      	ldr	r1, [r3, #0]
{
   1f1f6:	4692      	mov	sl, r2
   1f1f8:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   1f1fa:	f000 f9d2 	bl	1f5a2 <strcmp>
   1f1fe:	4607      	mov	r7, r0
   1f200:	b960      	cbnz	r0, 1f21c <settings_dup_check_cb+0x30>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   1f202:	4649      	mov	r1, r9
   1f204:	4650      	mov	r0, sl
   1f206:	f7e5 fba7 	bl	4958 <settings_line_val_get_len>
	if (len_read == 0) {
   1f20a:	6865      	ldr	r5, [r4, #4]
   1f20c:	b948      	cbnz	r0, 1f222 <settings_dup_check_cb+0x36>
		if (!cdca->val || cdca->val_len == 0) {
   1f20e:	b10d      	cbz	r5, 1f214 <settings_dup_check_cb+0x28>
   1f210:	68a3      	ldr	r3, [r4, #8]
   1f212:	b90b      	cbnz	r3, 1f218 <settings_dup_check_cb+0x2c>
			cdca->is_dup = 1;
   1f214:	2301      	movs	r3, #1
   1f216:	e000      	b.n	1f21a <settings_dup_check_cb+0x2e>
			cdca->is_dup = 0;
   1f218:	2300      	movs	r3, #0
			cdca->is_dup = 1;
   1f21a:	60e3      	str	r3, [r4, #12]
}
   1f21c:	b009      	add	sp, #36	; 0x24
   1f21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cdca->val && !settings_cmp(cdca->val, cdca->val_len,
   1f222:	2d00      	cmp	r5, #0
   1f224:	d0f8      	beq.n	1f218 <settings_dup_check_cb+0x2c>
   1f226:	68a6      	ldr	r6, [r4, #8]
		rc = settings_line_val_read(val_off, off, buf, len_read,
   1f228:	f10d 0b0c 	add.w	fp, sp, #12
	for (rem = val_len; rem > 0; rem -= len_read) {
   1f22c:	2e00      	cmp	r6, #0
   1f22e:	d0f1      	beq.n	1f214 <settings_dup_check_cb+0x28>
		len_read = exp_len = MIN(sizeof(buf), rem);
   1f230:	2e10      	cmp	r6, #16
   1f232:	46b0      	mov	r8, r6
   1f234:	bf28      	it	cs
   1f236:	f04f 0810 	movcs.w	r8, #16
		rc = settings_line_val_read(val_off, off, buf, len_read,
   1f23a:	e9cd b900 	strd	fp, r9, [sp]
   1f23e:	4643      	mov	r3, r8
   1f240:	aa04      	add	r2, sp, #16
   1f242:	4639      	mov	r1, r7
   1f244:	4650      	mov	r0, sl
		len_read = exp_len = MIN(sizeof(buf), rem);
   1f246:	f8cd 800c 	str.w	r8, [sp, #12]
		rc = settings_line_val_read(val_off, off, buf, len_read,
   1f24a:	f000 f883 	bl	1f354 <settings_line_val_read>
		if (rc) {
   1f24e:	2800      	cmp	r0, #0
   1f250:	d1e2      	bne.n	1f218 <settings_dup_check_cb+0x2c>
		if (len_read != exp_len) {
   1f252:	9b03      	ldr	r3, [sp, #12]
   1f254:	4598      	cmp	r8, r3
   1f256:	d1df      	bne.n	1f218 <settings_dup_check_cb+0x2c>
		rc = memcmp(val, buf, len_read);
   1f258:	4642      	mov	r2, r8
   1f25a:	a904      	add	r1, sp, #16
   1f25c:	4628      	mov	r0, r5
   1f25e:	f000 f9ac 	bl	1f5ba <memcmp>
		if (rc) {
   1f262:	2800      	cmp	r0, #0
   1f264:	d1d8      	bne.n	1f218 <settings_dup_check_cb+0x2c>
		val += len_read;
   1f266:	9b03      	ldr	r3, [sp, #12]
   1f268:	441d      	add	r5, r3
		off += len_read;
   1f26a:	441f      	add	r7, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   1f26c:	1af6      	subs	r6, r6, r3
   1f26e:	e7dd      	b.n	1f22c <settings_dup_check_cb+0x40>

0001f270 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1f270:	2200      	movs	r2, #0
   1f272:	4611      	mov	r1, r2
   1f274:	f7e5 b986 	b.w	4584 <settings_save_one>

0001f278 <settings_parse_name>:
	while (name) {
   1f278:	2300      	movs	r3, #0
{
   1f27a:	b5f0      	push	{r4, r5, r6, r7, lr}
				name = NULL;
   1f27c:	461e      	mov	r6, r3
	while (name) {
   1f27e:	b908      	cbnz	r0, 1f284 <settings_parse_name+0xc>
	*name_argc = i;
   1f280:	600b      	str	r3, [r1, #0]
}
   1f282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		name_argv[i++] = name;
   1f284:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   1f288:	4604      	mov	r4, r0
   1f28a:	4627      	mov	r7, r4
			if (*name == '\0') {
   1f28c:	f814 5b01 	ldrb.w	r5, [r4], #1
   1f290:	b12d      	cbz	r5, 1f29e <settings_parse_name+0x26>
			if (*name == *SETTINGS_NAME_SEPARATOR) {
   1f292:	2d2f      	cmp	r5, #47	; 0x2f
   1f294:	4620      	mov	r0, r4
   1f296:	d1f8      	bne.n	1f28a <settings_parse_name+0x12>
				*name = '\0';
   1f298:	703e      	strb	r6, [r7, #0]
				break;
   1f29a:	3301      	adds	r3, #1
   1f29c:	e7ef      	b.n	1f27e <settings_parse_name+0x6>
				name = NULL;
   1f29e:	4628      	mov	r0, r5
   1f2a0:	e7fb      	b.n	1f29a <settings_parse_name+0x22>

0001f2a2 <settings_parse_and_lookup>:
{
   1f2a2:	b510      	push	{r4, lr}
	rc = settings_parse_name(name, name_argc, name_argv);
   1f2a4:	f7ff ffe8 	bl	1f278 <settings_parse_name>
	if (rc) {
   1f2a8:	b920      	cbnz	r0, 1f2b4 <settings_parse_and_lookup+0x12>
	return settings_handler_lookup(name_argv[0]);
   1f2aa:	6810      	ldr	r0, [r2, #0]
}
   1f2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return settings_handler_lookup(name_argv[0]);
   1f2b0:	f7e5 b9f8 	b.w	46a4 <settings_handler_lookup>
}
   1f2b4:	2000      	movs	r0, #0
   1f2b6:	bd10      	pop	{r4, pc}

0001f2b8 <settings_set_value_priv>:
{
   1f2b8:	b570      	push	{r4, r5, r6, lr}
   1f2ba:	b08c      	sub	sp, #48	; 0x30
   1f2bc:	460e      	mov	r6, r1
   1f2be:	4615      	mov	r5, r2
	ch = settings_parse_and_lookup(name, &name_argc, name_argv);
   1f2c0:	4669      	mov	r1, sp
   1f2c2:	aa04      	add	r2, sp, #16
{
   1f2c4:	461c      	mov	r4, r3
	ch = settings_parse_and_lookup(name, &name_argc, name_argv);
   1f2c6:	f7ff ffec 	bl	1f2a2 <settings_parse_and_lookup>
	if (!ch) {
   1f2ca:	b158      	cbz	r0, 1f2e4 <settings_set_value_priv+0x2c>
	return ch->h_set(name_argc - 1, &name_argv[1], (void *)&value_ctx);
   1f2cc:	68c3      	ldr	r3, [r0, #12]
   1f2ce:	9800      	ldr	r0, [sp, #0]
	value_ctx.runtime = is_runtime;
   1f2d0:	f88d 400c 	strb.w	r4, [sp, #12]
	value_ctx.off = off;
   1f2d4:	e9cd 6501 	strd	r6, r5, [sp, #4]
	return ch->h_set(name_argc - 1, &name_argv[1], (void *)&value_ctx);
   1f2d8:	aa01      	add	r2, sp, #4
   1f2da:	a905      	add	r1, sp, #20
   1f2dc:	3801      	subs	r0, #1
   1f2de:	4798      	blx	r3
}
   1f2e0:	b00c      	add	sp, #48	; 0x30
   1f2e2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1f2e4:	f06f 0015 	mvn.w	r0, #21
   1f2e8:	e7fa      	b.n	1f2e0 <settings_set_value_priv+0x28>

0001f2ea <settings_val_read_cb>:
{
   1f2ea:	b530      	push	{r4, r5, lr}
   1f2ec:	460d      	mov	r5, r1
	if (value_context->runtime) {
   1f2ee:	7a01      	ldrb	r1, [r0, #8]
   1f2f0:	6804      	ldr	r4, [r0, #0]
{
   1f2f2:	b085      	sub	sp, #20
	if (value_context->runtime) {
   1f2f4:	b151      	cbz	r1, 1f30c <settings_val_read_cb+0x22>
		len_read = MIN(len, rt_ctx->size);
   1f2f6:	6863      	ldr	r3, [r4, #4]
		memcpy(buf, rt_ctx->p_value, len_read);
   1f2f8:	6821      	ldr	r1, [r4, #0]
		len_read = MIN(len, rt_ctx->size);
   1f2fa:	429a      	cmp	r2, r3
   1f2fc:	bf28      	it	cs
   1f2fe:	461a      	movcs	r2, r3
		memcpy(buf, rt_ctx->p_value, len_read);
   1f300:	4628      	mov	r0, r5
		len_read = MIN(len, rt_ctx->size);
   1f302:	9203      	str	r2, [sp, #12]
		memcpy(buf, rt_ctx->p_value, len_read);
   1f304:	f000 f980 	bl	1f608 <memcpy>
		return len_read;
   1f308:	9803      	ldr	r0, [sp, #12]
   1f30a:	e009      	b.n	1f320 <settings_val_read_cb+0x36>
		rc = settings_line_val_read(value_context->off, 0, buf, len,
   1f30c:	ab03      	add	r3, sp, #12
   1f30e:	9300      	str	r3, [sp, #0]
   1f310:	9401      	str	r4, [sp, #4]
   1f312:	4613      	mov	r3, r2
   1f314:	6840      	ldr	r0, [r0, #4]
   1f316:	462a      	mov	r2, r5
   1f318:	f000 f81c 	bl	1f354 <settings_line_val_read>
	if (rc == 0) {
   1f31c:	2800      	cmp	r0, #0
   1f31e:	d0f3      	beq.n	1f308 <settings_val_read_cb+0x1e>
}
   1f320:	b005      	add	sp, #20
   1f322:	bd30      	pop	{r4, r5, pc}

0001f324 <settings_val_get_len_cb>:
	if (value_context->runtime) {
   1f324:	7a03      	ldrb	r3, [r0, #8]
   1f326:	6801      	ldr	r1, [r0, #0]
   1f328:	b913      	cbnz	r3, 1f330 <settings_val_get_len_cb+0xc>
		return settings_line_val_get_len(value_context->off,
   1f32a:	6840      	ldr	r0, [r0, #4]
   1f32c:	f7e5 bb14 	b.w	4958 <settings_line_val_get_len>
		return rt_ctx->size;
   1f330:	6848      	ldr	r0, [r1, #4]
}
   1f332:	4770      	bx	lr

0001f334 <settings_line_len_calc>:
{
   1f334:	b510      	push	{r4, lr}
   1f336:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   1f338:	f000 f92c 	bl	1f594 <strlen>
   1f33c:	3401      	adds	r4, #1
}
   1f33e:	4420      	add	r0, r4
   1f340:	bd10      	pop	{r4, pc}

0001f342 <settings_line_raw_read>:
{
   1f342:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   1f344:	9c04      	ldr	r4, [sp, #16]
   1f346:	9401      	str	r4, [sp, #4]
   1f348:	2400      	movs	r4, #0
   1f34a:	9400      	str	r4, [sp, #0]
   1f34c:	f7e5 fa4e 	bl	47ec <settings_line_raw_read_until>
}
   1f350:	b002      	add	sp, #8
   1f352:	bd10      	pop	{r4, pc}

0001f354 <settings_line_val_read>:
{
   1f354:	b410      	push	{r4}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   1f356:	4408      	add	r0, r1
{
   1f358:	4614      	mov	r4, r2
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   1f35a:	9902      	ldr	r1, [sp, #8]
{
   1f35c:	461a      	mov	r2, r3
   1f35e:	9b01      	ldr	r3, [sp, #4]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   1f360:	9101      	str	r1, [sp, #4]
   1f362:	4621      	mov	r1, r4
}
   1f364:	bc10      	pop	{r4}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   1f366:	f7ff bfec 	b.w	1f342 <settings_line_raw_read>

0001f36a <settings_line_name_read>:
{
   1f36a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read_until(0, out, len_req, len_read,
   1f36c:	9301      	str	r3, [sp, #4]
   1f36e:	f10d 030f 	add.w	r3, sp, #15
   1f372:	9300      	str	r3, [sp, #0]
	char const until_char = '=';
   1f374:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   1f376:	4613      	mov	r3, r2
   1f378:	460a      	mov	r2, r1
   1f37a:	4601      	mov	r1, r0
   1f37c:	2000      	movs	r0, #0
	char const until_char = '=';
   1f37e:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   1f382:	f7e5 fa33 	bl	47ec <settings_line_raw_read_until>
}
   1f386:	b004      	add	sp, #16
   1f388:	bd10      	pop	{r4, pc}

0001f38a <get_len_cb>:
}
   1f38a:	8980      	ldrh	r0, [r0, #12]
   1f38c:	4770      	bx	lr

0001f38e <settings_fcb_load_cb>:
{
   1f38e:	b570      	push	{r4, r5, r6, lr}
   1f390:	b094      	sub	sp, #80	; 0x50
   1f392:	4604      	mov	r4, r0
   1f394:	460d      	mov	r5, r1
	rc = settings_line_name_read(buf, sizeof(buf), &len_read,
   1f396:	4603      	mov	r3, r0
   1f398:	466a      	mov	r2, sp
   1f39a:	214a      	movs	r1, #74	; 0x4a
   1f39c:	a801      	add	r0, sp, #4
   1f39e:	f7ff ffe4 	bl	1f36a <settings_line_name_read>
	if (rc) {
   1f3a2:	b950      	cbnz	r0, 1f3ba <settings_fcb_load_cb+0x2c>
	buf[len_read] = '\0';
   1f3a4:	9a00      	ldr	r2, [sp, #0]
   1f3a6:	ab14      	add	r3, sp, #80	; 0x50
   1f3a8:	4413      	add	r3, r2
	argp->cb(buf, (void *)&entry_ctx->loc, len_read + 1, argp->cb_arg);
   1f3aa:	4621      	mov	r1, r4
	buf[len_read] = '\0';
   1f3ac:	f803 0c4c 	strb.w	r0, [r3, #-76]
	argp->cb(buf, (void *)&entry_ctx->loc, len_read + 1, argp->cb_arg);
   1f3b0:	3201      	adds	r2, #1
   1f3b2:	e9d5 6300 	ldrd	r6, r3, [r5]
   1f3b6:	a801      	add	r0, sp, #4
   1f3b8:	47b0      	blx	r6
}
   1f3ba:	2000      	movs	r0, #0
   1f3bc:	b014      	add	sp, #80	; 0x50
   1f3be:	bd70      	pop	{r4, r5, r6, pc}

0001f3c0 <write_handler>:
{
   1f3c0:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   1f3c2:	6805      	ldr	r5, [r0, #0]
   1f3c4:	6884      	ldr	r4, [r0, #8]
	return flash_area_write(entry_ctx->fap,
   1f3c6:	6900      	ldr	r0, [r0, #16]
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   1f3c8:	4421      	add	r1, r4
   1f3ca:	682c      	ldr	r4, [r5, #0]
	return flash_area_write(entry_ctx->fap,
   1f3cc:	4421      	add	r1, r4
}
   1f3ce:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   1f3d0:	f7ff beb6 	b.w	1f140 <flash_area_write>

0001f3d4 <read_handler>:
{
   1f3d4:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   1f3d6:	8984      	ldrh	r4, [r0, #12]
   1f3d8:	428c      	cmp	r4, r1
   1f3da:	dd0f      	ble.n	1f3fc <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   1f3dc:	681d      	ldr	r5, [r3, #0]
   1f3de:	440d      	add	r5, r1
   1f3e0:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   1f3e2:	bf84      	itt	hi
   1f3e4:	1a64      	subhi	r4, r4, r1
   1f3e6:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   1f3e8:	6804      	ldr	r4, [r0, #0]
   1f3ea:	6885      	ldr	r5, [r0, #8]
   1f3ec:	6824      	ldr	r4, [r4, #0]
	return flash_area_read(entry_ctx->fap,
   1f3ee:	681b      	ldr	r3, [r3, #0]
   1f3f0:	6900      	ldr	r0, [r0, #16]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   1f3f2:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   1f3f4:	4421      	add	r1, r4
}
   1f3f6:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   1f3f8:	f7ff be85 	b.w	1f106 <flash_area_read>
		*len = 0;
   1f3fc:	2000      	movs	r0, #0
   1f3fe:	6018      	str	r0, [r3, #0]
}
   1f400:	bc30      	pop	{r4, r5}
   1f402:	4770      	bx	lr

0001f404 <_clock_control_init>:

static int _clock_control_init(struct device *dev)
{
   1f404:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
   1f406:	2200      	movs	r2, #0
   1f408:	4610      	mov	r0, r2
   1f40a:	2101      	movs	r1, #1
   1f40c:	f7e6 f8a2 	bl	5554 <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   1f410:	2000      	movs	r0, #0
   1f412:	f7e6 f86d 	bl	54f0 <z_arch_irq_enable>

	return 0;
}
   1f416:	2000      	movs	r0, #0
   1f418:	bd08      	pop	{r3, pc}

0001f41a <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1f41a:	4770      	bx	lr

0001f41c <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1f41c:	4770      	bx	lr

0001f41e <z_irq_spurious>:
	__reserved();
   1f41e:	f7e6 b8f5 	b.w	560c <__bus_fault>

0001f422 <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	z_sys_trace_isr_enter();
}
   1f422:	4770      	bx	lr

0001f424 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
   1f424:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->r0, esf);
   1f426:	6800      	ldr	r0, [r0, #0]
   1f428:	f7e6 b904 	b.w	5634 <z_NanoFatalErrorHandler>

0001f42c <lock_interrupts>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
   1f42c:	2320      	movs	r3, #32
   1f42e:	f383 8811 	msr	BASEPRI, r3
}
   1f432:	4770      	bx	lr

0001f434 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   1f434:	b508      	push	{r3, lr}
	handler();
   1f436:	f7e6 f9a5 	bl	5784 <_SysNmiOnReset>
	z_ExcExit();
}
   1f43a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
   1f43e:	f7e5 be97 	b.w	5170 <_IntExit>

0001f442 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1f442:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1f444:	2100      	movs	r1, #0
   1f446:	a801      	add	r0, sp, #4
   1f448:	f7e6 fa92 	bl	5970 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   1f44c:	b003      	add	sp, #12
   1f44e:	f85d fb04 	ldr.w	pc, [sp], #4

0001f452 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1f452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f456:	4684      	mov	ip, r0
   1f458:	460f      	mov	r7, r1
	register const char *s = nptr;
   1f45a:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1f45c:	462c      	mov	r4, r5
   1f45e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1f462:	2b20      	cmp	r3, #32
   1f464:	d036      	beq.n	1f4d4 <strtol+0x82>
   1f466:	f1a3 0109 	sub.w	r1, r3, #9
   1f46a:	2904      	cmp	r1, #4
   1f46c:	d932      	bls.n	1f4d4 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   1f46e:	2b2d      	cmp	r3, #45	; 0x2d
   1f470:	d132      	bne.n	1f4d8 <strtol+0x86>
		neg = 1;
		c = *s++;
   1f472:	786b      	ldrb	r3, [r5, #1]
   1f474:	1cac      	adds	r4, r5, #2
		neg = 1;
   1f476:	2101      	movs	r1, #1
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
   1f478:	2a00      	cmp	r2, #0
   1f47a:	d05c      	beq.n	1f536 <strtol+0xe4>
   1f47c:	2a10      	cmp	r2, #16
   1f47e:	d109      	bne.n	1f494 <strtol+0x42>
   1f480:	2b30      	cmp	r3, #48	; 0x30
   1f482:	d107      	bne.n	1f494 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1f484:	7823      	ldrb	r3, [r4, #0]
   1f486:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f48a:	2b58      	cmp	r3, #88	; 0x58
   1f48c:	d14e      	bne.n	1f52c <strtol+0xda>
		c = s[1];
   1f48e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   1f490:	2210      	movs	r2, #16
		s += 2;
   1f492:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1f494:	2900      	cmp	r1, #0
   1f496:	bf14      	ite	ne
   1f498:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   1f49c:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1f4a0:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1f4a2:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   1f4a6:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1f4a8:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1f4ac:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1f4b0:	2d09      	cmp	r5, #9
   1f4b2:	d817      	bhi.n	1f4e4 <strtol+0x92>
			c -= '0';
   1f4b4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1f4b6:	429a      	cmp	r2, r3
   1f4b8:	dd24      	ble.n	1f504 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1f4ba:	1c75      	adds	r5, r6, #1
   1f4bc:	d007      	beq.n	1f4ce <strtol+0x7c>
   1f4be:	4570      	cmp	r0, lr
   1f4c0:	d81d      	bhi.n	1f4fe <strtol+0xac>
   1f4c2:	d101      	bne.n	1f4c8 <strtol+0x76>
   1f4c4:	454b      	cmp	r3, r9
   1f4c6:	dc1a      	bgt.n	1f4fe <strtol+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   1f4c8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   1f4cc:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   1f4ce:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1f4d2:	e7eb      	b.n	1f4ac <strtol+0x5a>
{
   1f4d4:	4625      	mov	r5, r4
   1f4d6:	e7c1      	b.n	1f45c <strtol+0xa>
	} else if (c == '+')
   1f4d8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1f4da:	bf04      	itt	eq
   1f4dc:	1cac      	addeq	r4, r5, #2
   1f4de:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   1f4e0:	2100      	movs	r1, #0
   1f4e2:	e7c9      	b.n	1f478 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1f4e4:	f043 0520 	orr.w	r5, r3, #32
   1f4e8:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1f4ea:	2d19      	cmp	r5, #25
   1f4ec:	d80a      	bhi.n	1f504 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1f4ee:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1f4f2:	2d1a      	cmp	r5, #26
   1f4f4:	bf34      	ite	cc
   1f4f6:	2537      	movcc	r5, #55	; 0x37
   1f4f8:	2557      	movcs	r5, #87	; 0x57
   1f4fa:	1b5b      	subs	r3, r3, r5
   1f4fc:	e7db      	b.n	1f4b6 <strtol+0x64>
			any = -1;
   1f4fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f502:	e7e4      	b.n	1f4ce <strtol+0x7c>
		}
	}
	if (any < 0) {
   1f504:	1c73      	adds	r3, r6, #1
   1f506:	d107      	bne.n	1f518 <strtol+0xc6>
   1f508:	f7fc f8fc 	bl	1b704 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1f50c:	2326      	movs	r3, #38	; 0x26
   1f50e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1f510:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != NULL) {
   1f512:	b937      	cbnz	r7, 1f522 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1f514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
   1f518:	b101      	cbz	r1, 1f51c <strtol+0xca>
		acc = -acc;
   1f51a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1f51c:	2f00      	cmp	r7, #0
   1f51e:	d0f9      	beq.n	1f514 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1f520:	b10e      	cbz	r6, 1f526 <strtol+0xd4>
   1f522:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1f526:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1f52a:	e7f3      	b.n	1f514 <strtol+0xc2>
	if (base == 0) {
   1f52c:	2330      	movs	r3, #48	; 0x30
   1f52e:	2a00      	cmp	r2, #0
   1f530:	d1b0      	bne.n	1f494 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1f532:	2208      	movs	r2, #8
   1f534:	e7ae      	b.n	1f494 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1f536:	2b30      	cmp	r3, #48	; 0x30
   1f538:	d0a4      	beq.n	1f484 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1f53a:	220a      	movs	r2, #10
   1f53c:	e7aa      	b.n	1f494 <strtol+0x42>

0001f53e <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1f53e:	3901      	subs	r1, #1
   1f540:	4603      	mov	r3, r0
   1f542:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f546:	b90a      	cbnz	r2, 1f54c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1f548:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1f54a:	4770      	bx	lr
		*d = *s;
   1f54c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1f550:	e7f7      	b.n	1f542 <strcpy+0x4>

0001f552 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1f552:	b570      	push	{r4, r5, r6, lr}
   1f554:	3901      	subs	r1, #1
   1f556:	4605      	mov	r5, r0
   1f558:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1f55a:	b142      	cbz	r2, 1f56e <strncpy+0x1c>
   1f55c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1f560:	1e56      	subs	r6, r2, #1
   1f562:	b92b      	cbnz	r3, 1f570 <strncpy+0x1e>
   1f564:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1f566:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1f56a:	42a2      	cmp	r2, r4
   1f56c:	d1fb      	bne.n	1f566 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1f56e:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1f570:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1f574:	4632      	mov	r2, r6
   1f576:	e7ef      	b.n	1f558 <strncpy+0x6>

0001f578 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1f578:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
   1f57a:	7802      	ldrb	r2, [r0, #0]
   1f57c:	428a      	cmp	r2, r1
   1f57e:	4603      	mov	r3, r0
   1f580:	f100 0001 	add.w	r0, r0, #1
   1f584:	d004      	beq.n	1f590 <strchr+0x18>
   1f586:	2a00      	cmp	r2, #0
   1f588:	d1f7      	bne.n	1f57a <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
   1f58a:	2900      	cmp	r1, #0
   1f58c:	bf18      	it	ne
   1f58e:	2300      	movne	r3, #0
}
   1f590:	4618      	mov	r0, r3
   1f592:	4770      	bx	lr

0001f594 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1f594:	2300      	movs	r3, #0

	while (*s != '\0') {
   1f596:	5cc2      	ldrb	r2, [r0, r3]
   1f598:	b90a      	cbnz	r2, 1f59e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1f59a:	4618      	mov	r0, r3
   1f59c:	4770      	bx	lr
		n++;
   1f59e:	3301      	adds	r3, #1
   1f5a0:	e7f9      	b.n	1f596 <strlen+0x2>

0001f5a2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1f5a2:	3801      	subs	r0, #1
   1f5a4:	3901      	subs	r1, #1
   1f5a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1f5aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f5ae:	4293      	cmp	r3, r2
   1f5b0:	d101      	bne.n	1f5b6 <strcmp+0x14>
   1f5b2:	2b00      	cmp	r3, #0
   1f5b4:	d1f7      	bne.n	1f5a6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1f5b6:	1a98      	subs	r0, r3, r2
   1f5b8:	4770      	bx	lr

0001f5ba <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1f5ba:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
   1f5bc:	b15a      	cbz	r2, 1f5d6 <memcmp+0x1c>
   1f5be:	3901      	subs	r1, #1
   1f5c0:	1884      	adds	r4, r0, r2
   1f5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
   1f5c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
   1f5ca:	42a0      	cmp	r0, r4
   1f5cc:	d001      	beq.n	1f5d2 <memcmp+0x18>
   1f5ce:	429a      	cmp	r2, r3
   1f5d0:	d0f7      	beq.n	1f5c2 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1f5d2:	1ad0      	subs	r0, r2, r3
}
   1f5d4:	bd10      	pop	{r4, pc}
		return 0;
   1f5d6:	4610      	mov	r0, r2
   1f5d8:	e7fc      	b.n	1f5d4 <memcmp+0x1a>

0001f5da <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1f5da:	1a43      	subs	r3, r0, r1
   1f5dc:	4293      	cmp	r3, r2
{
   1f5de:	b510      	push	{r4, lr}
   1f5e0:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1f5e4:	d308      	bcc.n	1f5f8 <memmove+0x1e>
   1f5e6:	3901      	subs	r1, #1
	char *dest = d;
   1f5e8:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1f5ea:	429a      	cmp	r2, r3
   1f5ec:	d00b      	beq.n	1f606 <memmove+0x2c>
			*dest = *src;
   1f5ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f5f2:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1f5f6:	e7f8      	b.n	1f5ea <memmove+0x10>
   1f5f8:	440a      	add	r2, r1
			dest[n] = src[n];
   1f5fa:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1f5fe:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1f602:	428a      	cmp	r2, r1
   1f604:	d1f9      	bne.n	1f5fa <memmove+0x20>
		}
	}

	return d;
}
   1f606:	bd10      	pop	{r4, pc}

0001f608 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1f608:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
   1f60a:	ea81 0400 	eor.w	r4, r1, r0
   1f60e:	07a5      	lsls	r5, r4, #30
   1f610:	4603      	mov	r3, r0
   1f612:	d00b      	beq.n	1f62c <memcpy+0x24>
   1f614:	3b01      	subs	r3, #1
   1f616:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1f618:	4291      	cmp	r1, r2
   1f61a:	d11a      	bne.n	1f652 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1f61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1f61e:	2a00      	cmp	r2, #0
   1f620:	d0fc      	beq.n	1f61c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1f622:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f626:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1f62a:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
   1f62c:	079c      	lsls	r4, r3, #30
   1f62e:	d1f6      	bne.n	1f61e <memcpy+0x16>
   1f630:	0895      	lsrs	r5, r2, #2
   1f632:	00ac      	lsls	r4, r5, #2
   1f634:	1f1e      	subs	r6, r3, #4
   1f636:	190f      	adds	r7, r1, r4
		while (n >= sizeof(unsigned int)) {
   1f638:	42b9      	cmp	r1, r7
   1f63a:	d105      	bne.n	1f648 <memcpy+0x40>
   1f63c:	f06f 0603 	mvn.w	r6, #3
   1f640:	fb06 2205 	mla	r2, r6, r5, r2
   1f644:	4423      	add	r3, r4
   1f646:	e7e5      	b.n	1f614 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1f648:	f851 cb04 	ldr.w	ip, [r1], #4
   1f64c:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(unsigned int);
   1f650:	e7f2      	b.n	1f638 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1f652:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f656:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1f65a:	e7dd      	b.n	1f618 <memcpy+0x10>

0001f65c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1f65c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1f65e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1f660:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
   1f662:	079c      	lsls	r4, r3, #30
   1f664:	d110      	bne.n	1f688 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
   1f666:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1f66a:	ea44 4504 	orr.w	r5, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
   1f66e:	0894      	lsrs	r4, r2, #2
   1f670:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1f674:	42b3      	cmp	r3, r6
   1f676:	d10d      	bne.n	1f694 <memset+0x38>
   1f678:	f06f 0503 	mvn.w	r5, #3
   1f67c:	fb05 2404 	mla	r4, r5, r4, r2
   1f680:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1f682:	42a3      	cmp	r3, r4
   1f684:	d109      	bne.n	1f69a <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1f686:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1f688:	2a00      	cmp	r2, #0
   1f68a:	d0fc      	beq.n	1f686 <memset+0x2a>
		*(d_byte++) = c_byte;
   1f68c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1f690:	3a01      	subs	r2, #1
   1f692:	e7e6      	b.n	1f662 <memset+0x6>
		*(d_word++) = c_word;
   1f694:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(unsigned int);
   1f698:	e7ec      	b.n	1f674 <memset+0x18>
		*(d_byte++) = c_byte;
   1f69a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1f69e:	e7f0      	b.n	1f682 <memset+0x26>

0001f6a0 <memchr>:
 *
 * @return pointer to start of found byte
 */

void *memchr(const void *s, unsigned char c, size_t n)
{
   1f6a0:	b510      	push	{r4, lr}
	if (n != 0) {
   1f6a2:	b152      	cbz	r2, 1f6ba <memchr+0x1a>
   1f6a4:	4402      	add	r2, r0
		const unsigned char *p = s;

		do {
			if (*p++ == c) {
   1f6a6:	4603      	mov	r3, r0
   1f6a8:	f813 4b01 	ldrb.w	r4, [r3], #1
   1f6ac:	428c      	cmp	r4, r1
   1f6ae:	d003      	beq.n	1f6b8 <memchr+0x18>
				return ((void *)(p - 1));
			}

		} while (--n != 0);
   1f6b0:	429a      	cmp	r2, r3
   1f6b2:	4618      	mov	r0, r3
   1f6b4:	d1f7      	bne.n	1f6a6 <memchr+0x6>
	}

	return NULL;
   1f6b6:	2000      	movs	r0, #0
}
   1f6b8:	bd10      	pop	{r4, pc}
	return NULL;
   1f6ba:	4610      	mov	r0, r2
   1f6bc:	e7fc      	b.n	1f6b8 <memchr+0x18>

0001f6be <_to_x>:
{
   1f6be:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f6c0:	4604      	mov	r4, r0
		int d = n % base;
   1f6c2:	fbb1 f7f2 	udiv	r7, r1, r2
   1f6c6:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1f6ca:	2d09      	cmp	r5, #9
   1f6cc:	bf8c      	ite	hi
   1f6ce:	2627      	movhi	r6, #39	; 0x27
   1f6d0:	2600      	movls	r6, #0
   1f6d2:	3530      	adds	r5, #48	; 0x30
   1f6d4:	4435      	add	r5, r6
	} while (n);
   1f6d6:	428a      	cmp	r2, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1f6d8:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   1f6dc:	d90a      	bls.n	1f6f4 <_to_x+0x36>
		*end++ = '0';
   1f6de:	2130      	movs	r1, #48	; 0x30
	while (end - start < minlen) {
   1f6e0:	1a22      	subs	r2, r4, r0
   1f6e2:	4293      	cmp	r3, r2
   1f6e4:	dc08      	bgt.n	1f6f8 <_to_x+0x3a>
	*end = 0;
   1f6e6:	2300      	movs	r3, #0
   1f6e8:	f804 3901 	strb.w	r3, [r4], #-1
	for (end--; end > start; end--, start++) {
   1f6ec:	4284      	cmp	r4, r0
   1f6ee:	d806      	bhi.n	1f6fe <_to_x+0x40>
}
   1f6f0:	4610      	mov	r0, r2
   1f6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   1f6f4:	4639      	mov	r1, r7
   1f6f6:	e7e4      	b.n	1f6c2 <_to_x+0x4>
		*end++ = '0';
   1f6f8:	f804 1b01 	strb.w	r1, [r4], #1
   1f6fc:	e7f0      	b.n	1f6e0 <_to_x+0x22>
		char tmp = *end;
   1f6fe:	7823      	ldrb	r3, [r4, #0]
		*end = *start;
   1f700:	7801      	ldrb	r1, [r0, #0]
   1f702:	f804 1901 	strb.w	r1, [r4], #-1
		*start = tmp;
   1f706:	f800 3b01 	strb.w	r3, [r0], #1
   1f70a:	e7ef      	b.n	1f6ec <_to_x+0x2e>

0001f70c <_rlrshift>:
{
   1f70c:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1f70e:	e9d0 6500 	ldrd	r6, r5, [r0]
   1f712:	0872      	lsrs	r2, r6, #1
   1f714:	f006 0301 	and.w	r3, r6, #1
   1f718:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1f71c:	189b      	adds	r3, r3, r2
   1f71e:	f04f 0100 	mov.w	r1, #0
   1f722:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1f726:	eb44 0101 	adc.w	r1, r4, r1
   1f72a:	e9c0 3100 	strd	r3, r1, [r0]
}
   1f72e:	bd70      	pop	{r4, r5, r6, pc}

0001f730 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
   1f730:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   1f734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2;
   1f738:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5) << shifts[i];
   1f73a:	f04f 0705 	mov.w	r7, #5
   1f73e:	f04f 0c00 	mov.w	ip, #0
	rem += 2;
   1f742:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5;
   1f746:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5) << shifts[i];
   1f74a:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5;
   1f74e:	fb07 f10e 	mul.w	r1, r7, lr
   1f752:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1f756:	08f2      	lsrs	r2, r6, #3
   1f758:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5) << shifts[i];
   1f75c:	fbb2 f1f7 	udiv	r1, r2, r7
   1f760:	00ca      	lsls	r2, r1, #3
		quot += q;
   1f762:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5) << shifts[i];
   1f766:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1f76a:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5;
   1f76e:	fba2 2307 	umull	r2, r3, r2, r7
   1f772:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5) << shifts[i];
   1f774:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1f778:	eb18 0403 	adds.w	r4, r8, r3
   1f77c:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   1f780:	e9c0 4500 	strd	r4, r5, [r0]
}
   1f784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001f788 <_get_digit>:
	if (*digit_count > 0) {
   1f788:	680b      	ldr	r3, [r1, #0]
   1f78a:	2b00      	cmp	r3, #0
{
   1f78c:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1f78e:	dd10      	ble.n	1f7b2 <_get_digit+0x2a>
		*digit_count -= 1;
   1f790:	3b01      	subs	r3, #1
		*fr = *fr * 10;
   1f792:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
   1f794:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
   1f796:	6844      	ldr	r4, [r0, #4]
   1f798:	210a      	movs	r1, #10
   1f79a:	fba2 5601 	umull	r5, r6, r2, r1
   1f79e:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1f7a2:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1f7a6:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1f7aa:	0f31      	lsrs	r1, r6, #28
   1f7ac:	3130      	adds	r1, #48	; 0x30
}
   1f7ae:	b2c8      	uxtb	r0, r1
   1f7b0:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1f7b2:	2130      	movs	r1, #48	; 0x30
   1f7b4:	e7fb      	b.n	1f7ae <_get_digit+0x26>

0001f7b6 <_stdout_hook_default>:
}
   1f7b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f7ba:	4770      	bx	lr

0001f7bc <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1f7bc:	684b      	ldr	r3, [r1, #4]
   1f7be:	2b01      	cmp	r3, #1
   1f7c0:	dd07      	ble.n	1f7d2 <sprintf_out+0x16>
		*(p->ptr) = c;
   1f7c2:	680b      	ldr	r3, [r1, #0]
   1f7c4:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1f7c6:	680b      	ldr	r3, [r1, #0]
   1f7c8:	3301      	adds	r3, #1
   1f7ca:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1f7cc:	684b      	ldr	r3, [r1, #4]
   1f7ce:	3b01      	subs	r3, #1
   1f7d0:	604b      	str	r3, [r1, #4]
}
   1f7d2:	2000      	movs	r0, #0
   1f7d4:	4770      	bx	lr

0001f7d6 <send_cmd_status>:
{
   1f7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7da:	4680      	mov	r8, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1f7dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   1f7e0:	460f      	mov	r7, r1
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1f7e2:	f7e8 ff8b 	bl	86fc <bt_buf_get_cmd_complete>
	*(u8_t *)net_buf_user_data(buf) = type;
   1f7e6:	2501      	movs	r5, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1f7e8:	f100 0608 	add.w	r6, r0, #8
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1f7ec:	4604      	mov	r4, r0
   1f7ee:	7505      	strb	r5, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1f7f0:	2102      	movs	r1, #2
   1f7f2:	4630      	mov	r0, r6
   1f7f4:	f002 fec9 	bl	2258a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f7f8:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1f7fa:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f7fc:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1f7fe:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1f800:	4630      	mov	r0, r6
   1f802:	f002 fec2 	bl	2258a <net_buf_simple_add>
	evt->ncmd = 1;
   1f806:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   1f808:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1f80a:	f8a0 8002 	strh.w	r8, [r0, #2]
	bt_recv_prio(buf);
   1f80e:	4620      	mov	r0, r4
}
   1f810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   1f814:	f7e8 bbba 	b.w	7f8c <bt_recv_prio>

0001f818 <sys_memcpy_swap.constprop.2>:
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   1f818:	f101 0320 	add.w	r3, r1, #32
   1f81c:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1f81e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1f822:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1f826:	428b      	cmp	r3, r1
   1f828:	d1f9      	bne.n	1f81e <sys_memcpy_swap.constprop.2+0x6>
	}
}
   1f82a:	4770      	bx	lr

0001f82c <default_CSPRNG>:
{
   1f82c:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1f82e:	f002 fb01 	bl	21e34 <bt_rand>
}
   1f832:	fab0 f080 	clz	r0, r0
   1f836:	0940      	lsrs	r0, r0, #5
   1f838:	bd08      	pop	{r3, pc}

0001f83a <bt_settings_decode_key>:
{
   1f83a:	b570      	push	{r4, r5, r6, lr}
   1f83c:	4604      	mov	r4, r0
   1f83e:	460e      	mov	r6, r1
	if (strlen(key) != 13) {
   1f840:	f7ff fea8 	bl	1f594 <strlen>
   1f844:	280d      	cmp	r0, #13
   1f846:	d128      	bne.n	1f89a <bt_settings_decode_key+0x60>
	if (key[12] == '0') {
   1f848:	7b23      	ldrb	r3, [r4, #12]
   1f84a:	2b30      	cmp	r3, #48	; 0x30
   1f84c:	d11c      	bne.n	1f888 <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_PUBLIC;
   1f84e:	2300      	movs	r3, #0
		addr->type = BT_ADDR_LE_RANDOM;
   1f850:	7033      	strb	r3, [r6, #0]
   1f852:	1e60      	subs	r0, r4, #1
{
   1f854:	2501      	movs	r5, #1
   1f856:	2205      	movs	r2, #5
		if (*key >= '0' && *key <= '9') {
   1f858:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   1f85c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1f860:	b2db      	uxtb	r3, r3
   1f862:	2b09      	cmp	r3, #9
   1f864:	d906      	bls.n	1f874 <bt_settings_decode_key+0x3a>
		} else if (*key >= 'a' && *key <= 'f') {
   1f866:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1f86a:	2b05      	cmp	r3, #5
   1f86c:	d815      	bhi.n	1f89a <bt_settings_decode_key+0x60>
			nibble = *key - 'a' + 10;
   1f86e:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1f872:	b2db      	uxtb	r3, r3
		if (high) {
   1f874:	18b1      	adds	r1, r6, r2
   1f876:	b15d      	cbz	r5, 1f890 <bt_settings_decode_key+0x56>
			addr->a.val[i] = nibble << 4;
   1f878:	011b      	lsls	r3, r3, #4
   1f87a:	b2db      	uxtb	r3, r3
			high = false;
   1f87c:	2500      	movs	r5, #0
   1f87e:	704b      	strb	r3, [r1, #1]
	for (i = 5, high = true; i >= 0; key++) {
   1f880:	1c53      	adds	r3, r2, #1
   1f882:	d1e9      	bne.n	1f858 <bt_settings_decode_key+0x1e>
	return 0;
   1f884:	2000      	movs	r0, #0
}
   1f886:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1f888:	2b31      	cmp	r3, #49	; 0x31
   1f88a:	d106      	bne.n	1f89a <bt_settings_decode_key+0x60>
		addr->type = BT_ADDR_LE_RANDOM;
   1f88c:	2301      	movs	r3, #1
   1f88e:	e7df      	b.n	1f850 <bt_settings_decode_key+0x16>
			addr->a.val[i] |= nibble;
   1f890:	784c      	ldrb	r4, [r1, #1]
			i--;
   1f892:	3a01      	subs	r2, #1
			addr->a.val[i] |= nibble;
   1f894:	4323      	orrs	r3, r4
			high = true;
   1f896:	2501      	movs	r5, #1
   1f898:	e7f1      	b.n	1f87e <bt_settings_decode_key+0x44>
		return -EINVAL;
   1f89a:	f06f 0015 	mvn.w	r0, #21
   1f89e:	e7f2      	b.n	1f886 <bt_settings_decode_key+0x4c>

0001f8a0 <bt_uuid_cmp>:
{
   1f8a0:	b510      	push	{r4, lr}
   1f8a2:	460c      	mov	r4, r1
	if (u1->type != u2->type)
   1f8a4:	7801      	ldrb	r1, [r0, #0]
   1f8a6:	7822      	ldrb	r2, [r4, #0]
   1f8a8:	428a      	cmp	r2, r1
{
   1f8aa:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
   1f8ac:	d00e      	beq.n	1f8cc <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1f8ae:	4669      	mov	r1, sp
   1f8b0:	f7e6 ff6a 	bl	6788 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1f8b4:	a905      	add	r1, sp, #20
   1f8b6:	4620      	mov	r0, r4
   1f8b8:	f7e6 ff66 	bl	6788 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1f8bc:	2210      	movs	r2, #16
   1f8be:	f10d 0115 	add.w	r1, sp, #21
   1f8c2:	f10d 0001 	add.w	r0, sp, #1
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1f8c6:	f7ff fe78 	bl	1f5ba <memcmp>
   1f8ca:	e006      	b.n	1f8da <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   1f8cc:	2a01      	cmp	r2, #1
   1f8ce:	d00a      	beq.n	1f8e6 <bt_uuid_cmp+0x46>
   1f8d0:	b12a      	cbz	r2, 1f8de <bt_uuid_cmp+0x3e>
   1f8d2:	2a02      	cmp	r2, #2
   1f8d4:	d00a      	beq.n	1f8ec <bt_uuid_cmp+0x4c>
	return -EINVAL;
   1f8d6:	f06f 0015 	mvn.w	r0, #21
}
   1f8da:	b00a      	add	sp, #40	; 0x28
   1f8dc:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1f8de:	8840      	ldrh	r0, [r0, #2]
   1f8e0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1f8e2:	1ac0      	subs	r0, r0, r3
   1f8e4:	e7f9      	b.n	1f8da <bt_uuid_cmp+0x3a>
   1f8e6:	6840      	ldr	r0, [r0, #4]
   1f8e8:	6863      	ldr	r3, [r4, #4]
   1f8ea:	e7fa      	b.n	1f8e2 <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1f8ec:	2210      	movs	r2, #16
   1f8ee:	1c61      	adds	r1, r4, #1
   1f8f0:	3001      	adds	r0, #1
   1f8f2:	e7e8      	b.n	1f8c6 <bt_uuid_cmp+0x26>

0001f8f4 <hci_stack_dump>:
}
   1f8f4:	4770      	bx	lr

0001f8f6 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1f8f6:	2207      	movs	r2, #7
   1f8f8:	f7ff be86 	b.w	1f608 <memcpy>

0001f8fc <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f8fc:	f3bf 8f5b 	dmb	ish
   1f900:	e850 3f00 	ldrex	r3, [r0]
   1f904:	ea43 0201 	orr.w	r2, r3, r1
   1f908:	e840 2c00 	strex	ip, r2, [r0]
   1f90c:	f1bc 0f00 	cmp.w	ip, #0
   1f910:	d1f6      	bne.n	1f900 <atomic_or+0x4>
   1f912:	f3bf 8f5b 	dmb	ish
}
   1f916:	4618      	mov	r0, r3
   1f918:	4770      	bx	lr

0001f91a <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f91a:	f3bf 8f5b 	dmb	ish
   1f91e:	e850 3f00 	ldrex	r3, [r0]
   1f922:	ea03 0201 	and.w	r2, r3, r1
   1f926:	e840 2c00 	strex	ip, r2, [r0]
   1f92a:	f1bc 0f00 	cmp.w	ip, #0
   1f92e:	d1f6      	bne.n	1f91e <atomic_and+0x4>
   1f930:	f3bf 8f5b 	dmb	ish
}
   1f934:	4618      	mov	r0, r3
   1f936:	4770      	bx	lr

0001f938 <find_pending_connect>:
{
   1f938:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   1f93a:	2103      	movs	r1, #3
{
   1f93c:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   1f93e:	f7e9 fb3b 	bl	8fb8 <bt_conn_lookup_state_le>
	if (conn) {
   1f942:	b928      	cbnz	r0, 1f950 <find_pending_connect+0x18>
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   1f944:	4620      	mov	r0, r4
   1f946:	2102      	movs	r1, #2
}
   1f948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   1f94c:	f7e9 bb34 	b.w	8fb8 <bt_conn_lookup_state_le>
}
   1f950:	bd10      	pop	{r4, pc}

0001f952 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f952:	f3bf 8f5b 	dmb	ish
   1f956:	6800      	ldr	r0, [r0, #0]
   1f958:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f95c:	4108      	asrs	r0, r1
}
   1f95e:	f000 0001 	and.w	r0, r0, #1
   1f962:	4770      	bx	lr

0001f964 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1f964:	6880      	ldr	r0, [r0, #8]
   1f966:	f7e7 bd3d 	b.w	73e4 <enh_conn_complete>

0001f96a <le_legacy_conn_complete>:
{
   1f96a:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1f96c:	6881      	ldr	r1, [r0, #8]
{
   1f96e:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
   1f970:	780b      	ldrb	r3, [r1, #0]
   1f972:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   1f976:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1f97a:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   1f97e:	78cb      	ldrb	r3, [r1, #3]
   1f980:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   1f984:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1f988:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   1f98c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1f990:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   1f994:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1f998:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   1f99c:	7c4b      	ldrb	r3, [r1, #17]
   1f99e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1f9a2:	a805      	add	r0, sp, #20
   1f9a4:	3104      	adds	r1, #4
   1f9a6:	f7ff ffa6 	bl	1f8f6 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1f9aa:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1f9ac:	4669      	mov	r1, sp
   1f9ae:	2206      	movs	r2, #6
   1f9b0:	f10d 001b 	add.w	r0, sp, #27
   1f9b4:	9400      	str	r4, [sp, #0]
   1f9b6:	f8ad 4004 	strh.w	r4, [sp, #4]
   1f9ba:	f7ff fe25 	bl	1f608 <memcpy>
   1f9be:	2206      	movs	r2, #6
   1f9c0:	a902      	add	r1, sp, #8
   1f9c2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1f9c6:	9402      	str	r4, [sp, #8]
   1f9c8:	f8ad 400c 	strh.w	r4, [sp, #12]
   1f9cc:	f7ff fe1c 	bl	1f608 <memcpy>
	enh_conn_complete(&enh);
   1f9d0:	a804      	add	r0, sp, #16
   1f9d2:	f7e7 fd07 	bl	73e4 <enh_conn_complete>
}
   1f9d6:	b00c      	add	sp, #48	; 0x30
   1f9d8:	bd10      	pop	{r4, pc}

0001f9da <le_set_private_addr.isra.24>:
static int le_set_private_addr(u8_t id)
   1f9da:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1f9dc:	2106      	movs	r1, #6
   1f9de:	4668      	mov	r0, sp
   1f9e0:	f002 fa28 	bl	21e34 <bt_rand>
	if (err) {
   1f9e4:	b940      	cbnz	r0, 1f9f8 <le_set_private_addr.isra.24+0x1e>
	nrpa.val[5] &= 0x3f;
   1f9e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1f9ea:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   1f9ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f9f0:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1f9f4:	f7e7 fdda 	bl	75ac <set_random_address>
}
   1f9f8:	b003      	add	sp, #12
   1f9fa:	f85d fb04 	ldr.w	pc, [sp], #4

0001f9fe <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1f9fe:	8802      	ldrh	r2, [r0, #0]
   1fa00:	8843      	ldrh	r3, [r0, #2]
   1fa02:	429a      	cmp	r2, r3
{
   1fa04:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1fa06:	d818      	bhi.n	1fa3a <bt_le_conn_params_valid+0x3c>
   1fa08:	2a05      	cmp	r2, #5
   1fa0a:	d916      	bls.n	1fa3a <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1fa0c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1fa10:	d813      	bhi.n	1fa3a <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1fa12:	8884      	ldrh	r4, [r0, #4]
   1fa14:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1fa18:	d20f      	bcs.n	1fa3a <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1fa1a:	88c1      	ldrh	r1, [r0, #6]
   1fa1c:	f1a1 020a 	sub.w	r2, r1, #10
   1fa20:	b292      	uxth	r2, r2
   1fa22:	f640 4076 	movw	r0, #3190	; 0xc76
   1fa26:	4282      	cmp	r2, r0
   1fa28:	d807      	bhi.n	1fa3a <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
   1fa2a:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1fa2e:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1fa32:	bfb4      	ite	lt
   1fa34:	2001      	movlt	r0, #1
   1fa36:	2000      	movge	r0, #0
}
   1fa38:	bd10      	pop	{r4, pc}
		return false;
   1fa3a:	2000      	movs	r0, #0
   1fa3c:	e7fc      	b.n	1fa38 <bt_le_conn_params_valid+0x3a>

0001fa3e <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1fa3e:	2301      	movs	r3, #1
{
   1fa40:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1fa42:	2106      	movs	r1, #6
{
   1fa44:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1fa46:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1fa4a:	f002 f9f3 	bl	21e34 <bt_rand>
	if (err) {
   1fa4e:	b918      	cbnz	r0, 1fa58 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1fa50:	79a3      	ldrb	r3, [r4, #6]
   1fa52:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1fa56:	71a3      	strb	r3, [r4, #6]
}
   1fa58:	bd10      	pop	{r4, pc}

0001fa5a <bt_send>:
		return bt_hci_ecc_send(buf);
   1fa5a:	f7e6 bcad 	b.w	63b8 <bt_hci_ecc_send>

0001fa5e <bt_addr_le_is_bonded>:
}
   1fa5e:	2000      	movs	r0, #0
   1fa60:	4770      	bx	lr

0001fa62 <bt_le_adv_start>:
{
   1fa62:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   1fa64:	7844      	ldrb	r4, [r0, #1]
   1fa66:	f014 0410 	ands.w	r4, r4, #16
   1fa6a:	d106      	bne.n	1fa7a <bt_le_adv_start+0x18>
	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
   1fa6c:	9401      	str	r4, [sp, #4]
   1fa6e:	9c04      	ldr	r4, [sp, #16]
   1fa70:	9400      	str	r4, [sp, #0]
   1fa72:	f7e8 fc55 	bl	8320 <bt_le_adv_start_internal>
}
   1fa76:	b002      	add	sp, #8
   1fa78:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fa7a:	f06f 0015 	mvn.w	r0, #21
   1fa7e:	e7fa      	b.n	1fa76 <bt_le_adv_start+0x14>

0001fa80 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fa80:	f3bf 8f5b 	dmb	ish
   1fa84:	6800      	ldr	r0, [r0, #0]
   1fa86:	f3bf 8f5b 	dmb	ish
}
   1fa8a:	4770      	bx	lr

0001fa8c <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   1fa8c:	8983      	ldrh	r3, [r0, #12]
{
   1fa8e:	b510      	push	{r4, lr}
   1fa90:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   1fa92:	b12b      	cbz	r3, 1faa0 <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   1fa94:	6900      	ldr	r0, [r0, #16]
   1fa96:	f7fb f8cd 	bl	1ac34 <net_buf_unref>
	conn->rx = NULL;
   1fa9a:	2300      	movs	r3, #0
   1fa9c:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   1fa9e:	81a3      	strh	r3, [r4, #12]
}
   1faa0:	bd10      	pop	{r4, pc}

0001faa2 <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1faa2:	f3bf 8f5b 	dmb	ish
   1faa6:	e850 3f00 	ldrex	r3, [r0]
   1faaa:	1e5a      	subs	r2, r3, #1
   1faac:	e840 2100 	strex	r1, r2, [r0]
   1fab0:	2900      	cmp	r1, #0
   1fab2:	d1f8      	bne.n	1faa6 <atomic_dec+0x4>
   1fab4:	f3bf 8f5b 	dmb	ish
}
   1fab8:	4618      	mov	r0, r3
   1faba:	4770      	bx	lr

0001fabc <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1fabc:	f3bf 8f5b 	dmb	ish
   1fac0:	e850 3f00 	ldrex	r3, [r0]
   1fac4:	1c5a      	adds	r2, r3, #1
   1fac6:	e840 2100 	strex	r1, r2, [r0]
   1faca:	2900      	cmp	r1, #0
   1facc:	d1f8      	bne.n	1fac0 <atomic_inc+0x4>
   1face:	f3bf 8f5b 	dmb	ish
}
   1fad2:	4618      	mov	r0, r3
   1fad4:	4770      	bx	lr

0001fad6 <conn_cleanup>:
{
   1fad6:	b538      	push	{r3, r4, r5, lr}
   1fad8:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1fada:	f100 052c 	add.w	r5, r0, #44	; 0x2c
   1fade:	2100      	movs	r1, #0
   1fae0:	4628      	mov	r0, r5
   1fae2:	f002 fcd4 	bl	2248e <net_buf_get>
   1fae6:	b958      	cbnz	r0, 1fb00 <conn_cleanup+0x2a>
	bt_conn_notify_tx(conn);
   1fae8:	4620      	mov	r0, r4
   1faea:	f7e9 f833 	bl	8b54 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
   1faee:	4620      	mov	r0, r4
   1faf0:	f7ff ffcc 	bl	1fa8c <bt_conn_reset_rx_state>
	atomic_dec(&conn->ref);
   1faf4:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
   1faf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
   1fafc:	f7ff bfd1 	b.w	1faa2 <atomic_dec>
		net_buf_unref(buf);
   1fb00:	f7fb f898 	bl	1ac34 <net_buf_unref>
   1fb04:	e7eb      	b.n	1fade <conn_cleanup+0x8>

0001fb06 <bt_conn_addr_le_cmp>:
{
   1fb06:	b538      	push	{r3, r4, r5, lr}
   1fb08:	460d      	mov	r5, r1
   1fb0a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1fb0c:	f100 0148 	add.w	r1, r0, #72	; 0x48
   1fb10:	2207      	movs	r2, #7
   1fb12:	4628      	mov	r0, r5
   1fb14:	f7ff fd51 	bl	1f5ba <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1fb18:	b160      	cbz	r0, 1fb34 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1fb1a:	78e3      	ldrb	r3, [r4, #3]
   1fb1c:	2207      	movs	r2, #7
   1fb1e:	b933      	cbnz	r3, 1fb2e <bt_conn_addr_le_cmp+0x28>
   1fb20:	f104 0156 	add.w	r1, r4, #86	; 0x56
   1fb24:	4628      	mov	r0, r5
}
   1fb26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1fb2a:	f7ff bd46 	b.w	1f5ba <memcmp>
   1fb2e:	f104 014f 	add.w	r1, r4, #79	; 0x4f
   1fb32:	e7f7      	b.n	1fb24 <bt_conn_addr_le_cmp+0x1e>
   1fb34:	bd38      	pop	{r3, r4, r5, pc}

0001fb36 <bt_conn_ref>:
{
   1fb36:	b510      	push	{r4, lr}
   1fb38:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
   1fb3a:	3044      	adds	r0, #68	; 0x44
   1fb3c:	f7ff ffbe 	bl	1fabc <atomic_inc>
}
   1fb40:	4620      	mov	r0, r4
   1fb42:	bd10      	pop	{r4, pc}

0001fb44 <bt_conn_unref>:
	atomic_dec(&conn->ref);
   1fb44:	3044      	adds	r0, #68	; 0x44
   1fb46:	f7ff bfac 	b.w	1faa2 <atomic_dec>

0001fb4a <bt_conn_disconnect>:
	switch (conn->state) {
   1fb4a:	7a83      	ldrb	r3, [r0, #10]
   1fb4c:	3b01      	subs	r3, #1
{
   1fb4e:	b570      	push	{r4, r5, r6, lr}
   1fb50:	4604      	mov	r4, r0
   1fb52:	460e      	mov	r6, r1
	switch (conn->state) {
   1fb54:	2b04      	cmp	r3, #4
   1fb56:	d804      	bhi.n	1fb62 <bt_conn_disconnect+0x18>
   1fb58:	e8df f003 	tbb	[pc, r3]
   1fb5c:	150b0d07 	.word	0x150b0d07
   1fb60:	0b          	.byte	0x0b
   1fb61:	00          	.byte	0x00
		return -ENOTCONN;
   1fb62:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   1fb66:	4628      	mov	r0, r5
   1fb68:	bd70      	pop	{r4, r5, r6, pc}
		conn->err = reason;
   1fb6a:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1fb6c:	2100      	movs	r1, #0
   1fb6e:	f7e9 f92b 	bl	8dc8 <bt_conn_set_state>
		return 0;
   1fb72:	2500      	movs	r5, #0
   1fb74:	e7f7      	b.n	1fb66 <bt_conn_disconnect+0x1c>
		conn->err = reason;
   1fb76:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1fb78:	2100      	movs	r1, #0
   1fb7a:	f7e9 f925 	bl	8dc8 <bt_conn_set_state>
}
   1fb7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_le_adv_stop();
   1fb82:	f7e8 bcc5 	b.w	8510 <bt_le_adv_stop>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1fb86:	2103      	movs	r1, #3
   1fb88:	f240 4006 	movw	r0, #1030	; 0x406
   1fb8c:	f7e7 fa38 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
   1fb90:	4605      	mov	r5, r0
   1fb92:	b198      	cbz	r0, 1fbbc <bt_conn_disconnect+0x72>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1fb94:	2103      	movs	r1, #3
   1fb96:	3008      	adds	r0, #8
   1fb98:	f002 fcf7 	bl	2258a <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
   1fb9c:	8823      	ldrh	r3, [r4, #0]
   1fb9e:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
   1fba0:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1fba2:	4629      	mov	r1, r5
   1fba4:	f240 4006 	movw	r0, #1030	; 0x406
   1fba8:	f7e7 fa5a 	bl	7060 <bt_hci_cmd_send>
	if (err) {
   1fbac:	4605      	mov	r5, r0
   1fbae:	2800      	cmp	r0, #0
   1fbb0:	d1d9      	bne.n	1fb66 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1fbb2:	2105      	movs	r1, #5
   1fbb4:	4620      	mov	r0, r4
   1fbb6:	f7e9 f907 	bl	8dc8 <bt_conn_set_state>
	return 0;
   1fbba:	e7d4      	b.n	1fb66 <bt_conn_disconnect+0x1c>
		return -ENOBUFS;
   1fbbc:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1fbc0:	e7d1      	b.n	1fb66 <bt_conn_disconnect+0x1c>

0001fbc2 <bt_conn_le_conn_update>:
{
   1fbc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fbc4:	4607      	mov	r7, r0
   1fbc6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1fbc8:	f242 0013 	movw	r0, #8211	; 0x2013
   1fbcc:	210e      	movs	r1, #14
   1fbce:	f7e7 fa17 	bl	7000 <bt_hci_cmd_create>
	if (!buf) {
   1fbd2:	4606      	mov	r6, r0
   1fbd4:	b1c8      	cbz	r0, 1fc0a <bt_conn_le_conn_update+0x48>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1fbd6:	210e      	movs	r1, #14
   1fbd8:	3008      	adds	r0, #8
   1fbda:	f002 fcd6 	bl	2258a <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1fbde:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1fbe0:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1fbe2:	220e      	movs	r2, #14
   1fbe4:	f7ff fd3a 	bl	1f65c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1fbe8:	883b      	ldrh	r3, [r7, #0]
   1fbea:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1fbec:	882b      	ldrh	r3, [r5, #0]
   1fbee:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1fbf0:	886b      	ldrh	r3, [r5, #2]
   1fbf2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1fbf4:	88ab      	ldrh	r3, [r5, #4]
   1fbf6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1fbf8:	88eb      	ldrh	r3, [r5, #6]
   1fbfa:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   1fbfc:	4631      	mov	r1, r6
   1fbfe:	f242 0013 	movw	r0, #8211	; 0x2013
}
   1fc02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   1fc06:	f7e7 ba2b 	b.w	7060 <bt_hci_cmd_send>
}
   1fc0a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1fc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fc10 <l2cap_connected>:
}
   1fc10:	4770      	bx	lr

0001fc12 <l2cap_disconnected>:
   1fc12:	4770      	bx	lr

0001fc14 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1fc14:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1fc16:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1fc18:	b17b      	cbz	r3, 1fc3a <bt_l2cap_chan_remove+0x26>
   1fc1a:	3b08      	subs	r3, #8
   1fc1c:	2200      	movs	r2, #0
   1fc1e:	b163      	cbz	r3, 1fc3a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1fc20:	428b      	cmp	r3, r1
   1fc22:	f103 0408 	add.w	r4, r3, #8
   1fc26:	d10f      	bne.n	1fc48 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1fc28:	688b      	ldr	r3, [r1, #8]
   1fc2a:	b93a      	cbnz	r2, 1fc3c <bt_l2cap_chan_remove+0x28>
   1fc2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	list->head = node;
   1fc2e:	63c3      	str	r3, [r0, #60]	; 0x3c
Z_GENLIST_REMOVE(slist, snode)
   1fc30:	4294      	cmp	r4, r2
   1fc32:	d100      	bne.n	1fc36 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1fc34:	6403      	str	r3, [r0, #64]	; 0x40
	parent->next = child;
   1fc36:	2300      	movs	r3, #0
   1fc38:	608b      	str	r3, [r1, #8]
}
   1fc3a:	bd10      	pop	{r4, pc}
   1fc3c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fc3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1fc40:	429c      	cmp	r4, r3
	list->tail = node;
   1fc42:	bf08      	it	eq
   1fc44:	6402      	streq	r2, [r0, #64]	; 0x40
   1fc46:	e7f6      	b.n	1fc36 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fc48:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1fc4a:	2b00      	cmp	r3, #0
   1fc4c:	d0f5      	beq.n	1fc3a <bt_l2cap_chan_remove+0x26>
   1fc4e:	3b08      	subs	r3, #8
   1fc50:	4622      	mov	r2, r4
   1fc52:	e7e4      	b.n	1fc1e <bt_l2cap_chan_remove+0xa>

0001fc54 <bt_l2cap_chan_del>:
	if (!chan->conn) {
   1fc54:	6803      	ldr	r3, [r0, #0]
{
   1fc56:	b510      	push	{r4, lr}
   1fc58:	4604      	mov	r4, r0
	if (!chan->conn) {
   1fc5a:	b12b      	cbz	r3, 1fc68 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   1fc5c:	6843      	ldr	r3, [r0, #4]
   1fc5e:	685b      	ldr	r3, [r3, #4]
   1fc60:	b103      	cbz	r3, 1fc64 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   1fc62:	4798      	blx	r3
	chan->conn = NULL;
   1fc64:	2300      	movs	r3, #0
   1fc66:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1fc68:	68e3      	ldr	r3, [r4, #12]
   1fc6a:	b11b      	cbz	r3, 1fc74 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
   1fc6c:	4620      	mov	r0, r4
}
   1fc6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
   1fc72:	4718      	bx	r3
}
   1fc74:	bd10      	pop	{r4, pc}

0001fc76 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1fc76:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1fc78:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1fc7a:	b173      	cbz	r3, 1fc9a <bt_l2cap_disconnected+0x24>
   1fc7c:	f1b3 0008 	subs.w	r0, r3, #8
   1fc80:	d00b      	beq.n	1fc9a <bt_l2cap_disconnected+0x24>
   1fc82:	681c      	ldr	r4, [r3, #0]
   1fc84:	b104      	cbz	r4, 1fc88 <bt_l2cap_disconnected+0x12>
   1fc86:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1fc88:	f7ff ffe4 	bl	1fc54 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1fc8c:	b12c      	cbz	r4, 1fc9a <bt_l2cap_disconnected+0x24>
   1fc8e:	68a3      	ldr	r3, [r4, #8]
   1fc90:	b103      	cbz	r3, 1fc94 <bt_l2cap_disconnected+0x1e>
   1fc92:	3b08      	subs	r3, #8
{
   1fc94:	4620      	mov	r0, r4
   1fc96:	461c      	mov	r4, r3
   1fc98:	e7f6      	b.n	1fc88 <bt_l2cap_disconnected+0x12>
}
   1fc9a:	bd10      	pop	{r4, pc}

0001fc9c <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   1fc9c:	3104      	adds	r1, #4
   1fc9e:	f7e9 ba0b 	b.w	90b8 <bt_conn_create_pdu>

0001fca2 <bt_l2cap_send_cb>:
{
   1fca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fca4:	4614      	mov	r4, r2
   1fca6:	4605      	mov	r5, r0
   1fca8:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1fcaa:	f102 0008 	add.w	r0, r2, #8
   1fcae:	2104      	movs	r1, #4
{
   1fcb0:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
   1fcb2:	f002 fcb1 	bl	22618 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1fcb6:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1fcb8:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1fcba:	3904      	subs	r1, #4
   1fcbc:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
   1fcbe:	4632      	mov	r2, r6
   1fcc0:	4621      	mov	r1, r4
   1fcc2:	4628      	mov	r0, r5
}
   1fcc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
   1fcc8:	f7e8 bf1e 	b.w	8b08 <bt_conn_send_cb>

0001fccc <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1fccc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1fcce:	b108      	cbz	r0, 1fcd4 <bt_l2cap_le_lookup_tx_cid+0x8>
   1fcd0:	3808      	subs	r0, #8
   1fcd2:	b900      	cbnz	r0, 1fcd6 <bt_l2cap_le_lookup_tx_cid+0xa>
}
   1fcd4:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1fcd6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   1fcda:	428b      	cmp	r3, r1
   1fcdc:	d0fa      	beq.n	1fcd4 <bt_l2cap_le_lookup_tx_cid+0x8>
   1fcde:	6880      	ldr	r0, [r0, #8]
   1fce0:	e7f5      	b.n	1fcce <bt_l2cap_le_lookup_tx_cid+0x2>

0001fce2 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1fce2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1fce4:	b108      	cbz	r0, 1fcea <bt_l2cap_le_lookup_rx_cid+0x8>
   1fce6:	3808      	subs	r0, #8
   1fce8:	b900      	cbnz	r0, 1fcec <bt_l2cap_le_lookup_rx_cid+0xa>
}
   1fcea:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1fcec:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1fcee:	428b      	cmp	r3, r1
   1fcf0:	d0fb      	beq.n	1fcea <bt_l2cap_le_lookup_rx_cid+0x8>
   1fcf2:	6880      	ldr	r0, [r0, #8]
   1fcf4:	e7f6      	b.n	1fce4 <bt_l2cap_le_lookup_rx_cid+0x2>

0001fcf6 <att_req_destroy>:
{
   1fcf6:	b510      	push	{r4, lr}
   1fcf8:	4604      	mov	r4, r0
	if (req->buf) {
   1fcfa:	6900      	ldr	r0, [r0, #16]
   1fcfc:	b108      	cbz	r0, 1fd02 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1fcfe:	f7fa ff99 	bl	1ac34 <net_buf_unref>
	if (req->destroy) {
   1fd02:	68a3      	ldr	r3, [r4, #8]
   1fd04:	b10b      	cbz	r3, 1fd0a <att_req_destroy+0x14>
		req->destroy(req);
   1fd06:	4620      	mov	r0, r4
   1fd08:	4798      	blx	r3
	(void)memset(req, 0, sizeof(*req));
   1fd0a:	4620      	mov	r0, r4
   1fd0c:	2214      	movs	r2, #20
   1fd0e:	2100      	movs	r1, #0
}
   1fd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(req, 0, sizeof(*req));
   1fd14:	f7ff bca2 	b.w	1f65c <memset>

0001fd18 <find_info_cb>:
	if (!data->rsp) {
   1fd18:	688b      	ldr	r3, [r1, #8]
{
   1fd1a:	b570      	push	{r4, r5, r6, lr}
   1fd1c:	4605      	mov	r5, r0
   1fd1e:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   1fd20:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   1fd22:	b963      	cbnz	r3, 1fd3e <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1fd24:	6848      	ldr	r0, [r1, #4]
   1fd26:	2101      	movs	r1, #1
   1fd28:	3008      	adds	r0, #8
   1fd2a:	f002 fc2e 	bl	2258a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1fd2e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1fd30:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1fd32:	781b      	ldrb	r3, [r3, #0]
   1fd34:	2b00      	cmp	r3, #0
   1fd36:	bf0c      	ite	eq
   1fd38:	2301      	moveq	r3, #1
   1fd3a:	2302      	movne	r3, #2
   1fd3c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1fd3e:	68a3      	ldr	r3, [r4, #8]
   1fd40:	781b      	ldrb	r3, [r3, #0]
   1fd42:	2b01      	cmp	r3, #1
   1fd44:	d003      	beq.n	1fd4e <find_info_cb+0x36>
   1fd46:	2b02      	cmp	r3, #2
   1fd48:	d01a      	beq.n	1fd80 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1fd4a:	2000      	movs	r0, #0
   1fd4c:	e017      	b.n	1fd7e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1fd4e:	682b      	ldr	r3, [r5, #0]
   1fd50:	781b      	ldrb	r3, [r3, #0]
   1fd52:	2b00      	cmp	r3, #0
   1fd54:	d1f9      	bne.n	1fd4a <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1fd56:	6860      	ldr	r0, [r4, #4]
   1fd58:	2104      	movs	r1, #4
   1fd5a:	3008      	adds	r0, #8
   1fd5c:	f002 fc15 	bl	2258a <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1fd60:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1fd62:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1fd64:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1fd66:	682b      	ldr	r3, [r5, #0]
   1fd68:	885b      	ldrh	r3, [r3, #2]
   1fd6a:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   1fd6c:	6863      	ldr	r3, [r4, #4]
   1fd6e:	f8b6 0052 	ldrh.w	r0, [r6, #82]	; 0x52
   1fd72:	899b      	ldrh	r3, [r3, #12]
   1fd74:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1fd76:	2804      	cmp	r0, #4
   1fd78:	bf94      	ite	ls
   1fd7a:	2000      	movls	r0, #0
   1fd7c:	2001      	movhi	r0, #1
}
   1fd7e:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1fd80:	682b      	ldr	r3, [r5, #0]
   1fd82:	781b      	ldrb	r3, [r3, #0]
   1fd84:	2b02      	cmp	r3, #2
   1fd86:	d1e0      	bne.n	1fd4a <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1fd88:	6860      	ldr	r0, [r4, #4]
   1fd8a:	2112      	movs	r1, #18
   1fd8c:	3008      	adds	r0, #8
   1fd8e:	f002 fbfc 	bl	2258a <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1fd92:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1fd94:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1fd96:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1fd98:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1fd9a:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1fd9e:	3101      	adds	r1, #1
   1fda0:	f7ff fc32 	bl	1f608 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   1fda4:	6863      	ldr	r3, [r4, #4]
   1fda6:	f8b6 0052 	ldrh.w	r0, [r6, #82]	; 0x52
   1fdaa:	899b      	ldrh	r3, [r3, #12]
   1fdac:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1fdae:	2812      	cmp	r0, #18
   1fdb0:	e7e2      	b.n	1fd78 <find_info_cb+0x60>

0001fdb2 <read_group_cb>:
{
   1fdb2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   1fdb6:	680c      	ldr	r4, [r1, #0]
{
   1fdb8:	4606      	mov	r6, r0
   1fdba:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1fdbc:	f04f 0800 	mov.w	r8, #0
   1fdc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1fdc4:	a902      	add	r1, sp, #8
   1fdc6:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   1fdc8:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1fdca:	f88d 8008 	strb.w	r8, [sp, #8]
   1fdce:	f8ad 300a 	strh.w	r3, [sp, #10]
   1fdd2:	f7ff fd65 	bl	1f8a0 <bt_uuid_cmp>
   1fdd6:	b198      	cbz	r0, 1fe00 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1fdd8:	f642 0301 	movw	r3, #10241	; 0x2801
   1fddc:	a903      	add	r1, sp, #12
   1fdde:	6830      	ldr	r0, [r6, #0]
   1fde0:	f88d 800c 	strb.w	r8, [sp, #12]
   1fde4:	f8ad 300e 	strh.w	r3, [sp, #14]
   1fde8:	f7ff fd5a 	bl	1f8a0 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1fdec:	b140      	cbz	r0, 1fe00 <read_group_cb+0x4e>
		if (data->group &&
   1fdee:	692b      	ldr	r3, [r5, #16]
   1fdf0:	b123      	cbz	r3, 1fdfc <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   1fdf2:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
   1fdf4:	8859      	ldrh	r1, [r3, #2]
   1fdf6:	4291      	cmp	r1, r2
   1fdf8:	d200      	bcs.n	1fdfc <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1fdfa:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1fdfc:	2001      	movs	r0, #1
   1fdfe:	e012      	b.n	1fe26 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1fe00:	6869      	ldr	r1, [r5, #4]
   1fe02:	6830      	ldr	r0, [r6, #0]
   1fe04:	f7ff fd4c 	bl	1f8a0 <bt_uuid_cmp>
   1fe08:	b110      	cbz	r0, 1fe10 <read_group_cb+0x5e>
		data->group = NULL;
   1fe0a:	2300      	movs	r3, #0
   1fe0c:	612b      	str	r3, [r5, #16]
		return BT_GATT_ITER_CONTINUE;
   1fe0e:	e7f5      	b.n	1fdfc <read_group_cb+0x4a>
	if (data->rsp->len &&
   1fe10:	68eb      	ldr	r3, [r5, #12]
   1fe12:	68a8      	ldr	r0, [r5, #8]
   1fe14:	781a      	ldrb	r2, [r3, #0]
   1fe16:	b14a      	cbz	r2, 1fe2c <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1fe18:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1fe1c:	8981      	ldrh	r1, [r0, #12]
   1fe1e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1fe20:	4293      	cmp	r3, r2
   1fe22:	da03      	bge.n	1fe2c <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   1fe24:	2000      	movs	r0, #0
}
   1fe26:	b004      	add	sp, #16
   1fe28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1fe2c:	2104      	movs	r1, #4
   1fe2e:	3008      	adds	r0, #8
   1fe30:	f002 fbab 	bl	2258a <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1fe34:	68a9      	ldr	r1, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1fe36:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1fe38:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1fe3a:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1fe3c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1fe3e:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1fe40:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1fe44:	6889      	ldr	r1, [r1, #8]
   1fe46:	2400      	movs	r4, #0
   1fe48:	1a9b      	subs	r3, r3, r2
   1fe4a:	9400      	str	r4, [sp, #0]
   1fe4c:	440a      	add	r2, r1
   1fe4e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1fe52:	4631      	mov	r1, r6
   1fe54:	b29b      	uxth	r3, r3
   1fe56:	4638      	mov	r0, r7
   1fe58:	47c0      	blx	r8
	if (read < 0) {
   1fe5a:	1e01      	subs	r1, r0, #0
   1fe5c:	dbe2      	blt.n	1fe24 <read_group_cb+0x72>
	if (!data->rsp->len) {
   1fe5e:	68ee      	ldr	r6, [r5, #12]
   1fe60:	68ab      	ldr	r3, [r5, #8]
   1fe62:	7830      	ldrb	r0, [r6, #0]
   1fe64:	1d0a      	adds	r2, r1, #4
   1fe66:	b928      	cbnz	r0, 1fe74 <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
   1fe68:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
   1fe6a:	f103 0008 	add.w	r0, r3, #8
   1fe6e:	f002 fb8c 	bl	2258a <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   1fe72:	e7c3      	b.n	1fdfc <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1fe74:	4290      	cmp	r0, r2
   1fe76:	d0f8      	beq.n	1fe6a <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   1fe78:	899a      	ldrh	r2, [r3, #12]
   1fe7a:	3a04      	subs	r2, #4
   1fe7c:	819a      	strh	r2, [r3, #12]
		return false;
   1fe7e:	e7d1      	b.n	1fe24 <read_group_cb+0x72>

0001fe80 <find_type_cb>:
{
   1fe80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   1fe84:	680e      	ldr	r6, [r1, #0]
{
   1fe86:	b088      	sub	sp, #32
   1fe88:	4605      	mov	r5, r0
   1fe8a:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1fe8c:	2700      	movs	r7, #0
   1fe8e:	f642 0301 	movw	r3, #10241	; 0x2801
   1fe92:	a902      	add	r1, sp, #8
   1fe94:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   1fe96:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1fe9a:	f88d 7008 	strb.w	r7, [sp, #8]
   1fe9e:	f8ad 300a 	strh.w	r3, [sp, #10]
   1fea2:	f7ff fcfd 	bl	1f8a0 <bt_uuid_cmp>
   1fea6:	b928      	cbnz	r0, 1feb4 <find_type_cb+0x34>
		data->group = NULL;
   1fea8:	2300      	movs	r3, #0
   1feaa:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   1feac:	2001      	movs	r0, #1
}
   1feae:	b008      	add	sp, #32
   1feb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1feb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1feb8:	a903      	add	r1, sp, #12
   1feba:	6828      	ldr	r0, [r5, #0]
   1febc:	f88d 700c 	strb.w	r7, [sp, #12]
   1fec0:	f8ad 300e 	strh.w	r3, [sp, #14]
   1fec4:	f7ff fcec 	bl	1f8a0 <bt_uuid_cmp>
   1fec8:	b140      	cbz	r0, 1fedc <find_type_cb+0x5c>
		if (data->group &&
   1feca:	68a3      	ldr	r3, [r4, #8]
   1fecc:	2b00      	cmp	r3, #0
   1fece:	d0ed      	beq.n	1feac <find_type_cb+0x2c>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   1fed0:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
   1fed2:	8859      	ldrh	r1, [r3, #2]
   1fed4:	4291      	cmp	r1, r2
   1fed6:	d2e9      	bcs.n	1feac <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1fed8:	805a      	strh	r2, [r3, #2]
   1feda:	e7e7      	b.n	1feac <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
   1fedc:	6862      	ldr	r2, [r4, #4]
   1fede:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
   1fee2:	8992      	ldrh	r2, [r2, #12]
   1fee4:	1a9b      	subs	r3, r3, r2
   1fee6:	2b03      	cmp	r3, #3
   1fee8:	d9e1      	bls.n	1feae <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1feea:	2310      	movs	r3, #16
   1feec:	9000      	str	r0, [sp, #0]
   1feee:	686e      	ldr	r6, [r5, #4]
   1fef0:	eb0d 0203 	add.w	r2, sp, r3
   1fef4:	4629      	mov	r1, r5
   1fef6:	4640      	mov	r0, r8
   1fef8:	47b0      	blx	r6
	if (read < 0) {
   1fefa:	2800      	cmp	r0, #0
   1fefc:	dbd4      	blt.n	1fea8 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
   1fefe:	7c22      	ldrb	r2, [r4, #16]
   1ff00:	4282      	cmp	r2, r0
   1ff02:	d1d1      	bne.n	1fea8 <find_type_cb+0x28>
   1ff04:	a904      	add	r1, sp, #16
   1ff06:	68e0      	ldr	r0, [r4, #12]
   1ff08:	f7ff fb57 	bl	1f5ba <memcmp>
   1ff0c:	2800      	cmp	r0, #0
   1ff0e:	d1cb      	bne.n	1fea8 <find_type_cb+0x28>
	data->err = 0x00;
   1ff10:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ff12:	6860      	ldr	r0, [r4, #4]
   1ff14:	2104      	movs	r1, #4
   1ff16:	3008      	adds	r0, #8
   1ff18:	f002 fb37 	bl	2258a <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1ff1c:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ff1e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1ff20:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1ff22:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1ff24:	e7c2      	b.n	1feac <find_type_cb+0x2c>

0001ff26 <check_perm.isra.6>:
	if ((mask & BT_GATT_PERM_READ) &&
   1ff26:	07ca      	lsls	r2, r1, #31
   1ff28:	7c83      	ldrb	r3, [r0, #18]
   1ff2a:	d504      	bpl.n	1ff36 <check_perm.isra.6+0x10>
   1ff2c:	f013 0f15 	tst.w	r3, #21
   1ff30:	d012      	beq.n	1ff58 <check_perm.isra.6+0x32>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ff32:	6842      	ldr	r2, [r0, #4]
   1ff34:	b182      	cbz	r2, 1ff58 <check_perm.isra.6+0x32>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ff36:	078a      	lsls	r2, r1, #30
   1ff38:	d504      	bpl.n	1ff44 <check_perm.isra.6+0x1e>
   1ff3a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   1ff3e:	d00d      	beq.n	1ff5c <check_perm.isra.6+0x36>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ff40:	6882      	ldr	r2, [r0, #8]
   1ff42:	b15a      	cbz	r2, 1ff5c <check_perm.isra.6+0x36>
	mask &= attr->perm;
   1ff44:	ea01 0003 	and.w	r0, r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1ff48:	f010 0f30 	tst.w	r0, #48	; 0x30
   1ff4c:	d108      	bne.n	1ff60 <check_perm.isra.6+0x3a>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1ff4e:	f010 000c 	ands.w	r0, r0, #12
   1ff52:	bf18      	it	ne
   1ff54:	200f      	movne	r0, #15
   1ff56:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1ff58:	2002      	movs	r0, #2
   1ff5a:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1ff5c:	2003      	movs	r0, #3
   1ff5e:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
   1ff60:	2005      	movs	r0, #5
}
   1ff62:	4770      	bx	lr

0001ff64 <read_type_cb>:
{
   1ff64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   1ff68:	680f      	ldr	r7, [r1, #0]
{
   1ff6a:	4605      	mov	r5, r0
   1ff6c:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ff6e:	6800      	ldr	r0, [r0, #0]
   1ff70:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   1ff72:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ff76:	f7ff fc93 	bl	1f8a0 <bt_uuid_cmp>
   1ff7a:	4680      	mov	r8, r0
   1ff7c:	2800      	cmp	r0, #0
   1ff7e:	d14b      	bne.n	20018 <read_type_cb+0xb4>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ff80:	2115      	movs	r1, #21
   1ff82:	4628      	mov	r0, r5
   1ff84:	f7ff ffcf 	bl	1ff26 <check_perm.isra.6>
   1ff88:	4604      	mov	r4, r0
   1ff8a:	7530      	strb	r0, [r6, #20]
	if (data->err) {
   1ff8c:	b148      	cbz	r0, 1ffa2 <read_type_cb+0x3e>
		if (data->rsp->len) {
   1ff8e:	68f3      	ldr	r3, [r6, #12]
   1ff90:	781c      	ldrb	r4, [r3, #0]
   1ff92:	b114      	cbz	r4, 1ff9a <read_type_cb+0x36>
			data->err = 0x00;
   1ff94:	f886 8014 	strb.w	r8, [r6, #20]
		return BT_GATT_ITER_STOP;
   1ff98:	4644      	mov	r4, r8
}
   1ff9a:	4620      	mov	r0, r4
   1ff9c:	b003      	add	sp, #12
   1ff9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1ffa2:	68b0      	ldr	r0, [r6, #8]
   1ffa4:	2102      	movs	r1, #2
   1ffa6:	3008      	adds	r0, #8
   1ffa8:	f002 faef 	bl	2258a <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ffac:	68b1      	ldr	r1, [r6, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1ffae:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ffb0:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1ffb2:	6130      	str	r0, [r6, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1ffb4:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ffb6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
   1ffba:	6889      	ldr	r1, [r1, #8]
   1ffbc:	9400      	str	r4, [sp, #0]
   1ffbe:	1a9b      	subs	r3, r3, r2
   1ffc0:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1ffc4:	440a      	add	r2, r1
   1ffc6:	b29b      	uxth	r3, r3
   1ffc8:	4629      	mov	r1, r5
   1ffca:	4648      	mov	r0, r9
   1ffcc:	47c0      	blx	r8
	if (read < 0) {
   1ffce:	1e01      	subs	r1, r0, #0
   1ffd0:	da07      	bge.n	1ffe2 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1ffd2:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   1ffd6:	bf26      	itte	cs
   1ffd8:	4249      	negcs	r1, r1
   1ffda:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   1ffdc:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   1ffde:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
   1ffe0:	e7db      	b.n	1ff9a <read_type_cb+0x36>
	if (!data->rsp->len) {
   1ffe2:	68f5      	ldr	r5, [r6, #12]
   1ffe4:	68b0      	ldr	r0, [r6, #8]
   1ffe6:	782a      	ldrb	r2, [r5, #0]
   1ffe8:	1c8b      	adds	r3, r1, #2
   1ffea:	b97a      	cbnz	r2, 2000c <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
   1ffec:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   1ffee:	3008      	adds	r0, #8
   1fff0:	f002 facb 	bl	2258a <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   1fff4:	68b3      	ldr	r3, [r6, #8]
   1fff6:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
   1fffa:	899b      	ldrh	r3, [r3, #12]
   1fffc:	1ae4      	subs	r4, r4, r3
   1fffe:	68f3      	ldr	r3, [r6, #12]
   20000:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   20002:	429c      	cmp	r4, r3
   20004:	bfd4      	ite	le
   20006:	2400      	movle	r4, #0
   20008:	2401      	movgt	r4, #1
   2000a:	e7c6      	b.n	1ff9a <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2000c:	429a      	cmp	r2, r3
   2000e:	d0ee      	beq.n	1ffee <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
   20010:	8983      	ldrh	r3, [r0, #12]
   20012:	3b02      	subs	r3, #2
   20014:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   20016:	e7c0      	b.n	1ff9a <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
   20018:	2401      	movs	r4, #1
   2001a:	e7be      	b.n	1ff9a <read_type_cb+0x36>

0002001c <uuid_create>:
	switch (buf->len) {
   2001c:	898a      	ldrh	r2, [r1, #12]
   2001e:	2a02      	cmp	r2, #2
{
   20020:	b510      	push	{r4, lr}
   20022:	4604      	mov	r4, r0
	switch (buf->len) {
   20024:	d003      	beq.n	2002e <uuid_create+0x12>
   20026:	2a10      	cmp	r2, #16
   20028:	d00a      	beq.n	20040 <uuid_create+0x24>
	return false;
   2002a:	2000      	movs	r0, #0
}
   2002c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
   2002e:	2300      	movs	r3, #0
   20030:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
   20032:	f101 0008 	add.w	r0, r1, #8
   20036:	f002 fb2d 	bl	22694 <net_buf_simple_pull_le16>
   2003a:	8060      	strh	r0, [r4, #2]
		return true;
   2003c:	2001      	movs	r0, #1
   2003e:	e7f5      	b.n	2002c <uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   20040:	2302      	movs	r3, #2
   20042:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
   20046:	6889      	ldr	r1, [r1, #8]
   20048:	f7ff fade 	bl	1f608 <memcpy>
   2004c:	e7f6      	b.n	2003c <uuid_create+0x20>

0002004e <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
   2004e:	6803      	ldr	r3, [r0, #0]
   20050:	7a9b      	ldrb	r3, [r3, #10]
   20052:	2b04      	cmp	r3, #4
   20054:	d10a      	bne.n	2006c <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20056:	f3bf 8f5b 	dmb	ish
   2005a:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   2005e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20062:	ea6f 00a0 	mvn.w	r0, r0, asr #2
   20066:	f000 0001 	and.w	r0, r0, #1
   2006a:	4770      	bx	lr
   2006c:	2001      	movs	r0, #1
}
   2006e:	4770      	bx	lr

00020070 <att_pdu_sent>:
{
   20070:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   20072:	2104      	movs	r1, #4
   20074:	f7ff fe2a 	bl	1fccc <bt_l2cap_le_lookup_tx_cid>
}
   20078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2007c:	30bc      	adds	r0, #188	; 0xbc
   2007e:	f7fc b8f3 	b.w	1c268 <z_impl_k_sem_give>

00020082 <att_rsp_sent>:
{
   20082:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   20084:	2104      	movs	r1, #4
   20086:	f7ff fe21 	bl	1fccc <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2008a:	f3bf 8f5b 	dmb	ish
   2008e:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   20092:	e853 2f00 	ldrex	r2, [r3]
   20096:	f022 0201 	bic.w	r2, r2, #1
   2009a:	e843 2100 	strex	r1, r2, [r3]
   2009e:	2900      	cmp	r1, #0
   200a0:	d1f7      	bne.n	20092 <att_rsp_sent+0x10>
   200a2:	f3bf 8f5b 	dmb	ish
   200a6:	30bc      	adds	r0, #188	; 0xbc
}
   200a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   200ac:	f7fc b8dc 	b.w	1c268 <z_impl_k_sem_give>

000200b0 <att_cfm_sent>:
{
   200b0:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   200b2:	2104      	movs	r1, #4
   200b4:	f7ff fe0a 	bl	1fccc <bt_l2cap_le_lookup_tx_cid>
   200b8:	f3bf 8f5b 	dmb	ish
   200bc:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   200c0:	e853 2f00 	ldrex	r2, [r3]
   200c4:	f022 0202 	bic.w	r2, r2, #2
   200c8:	e843 2100 	strex	r1, r2, [r3]
   200cc:	2900      	cmp	r1, #0
   200ce:	d1f7      	bne.n	200c0 <att_cfm_sent+0x10>
   200d0:	f3bf 8f5b 	dmb	ish
   200d4:	30bc      	adds	r0, #188	; 0xbc
}
   200d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   200da:	f7fc b8c5 	b.w	1c268 <z_impl_k_sem_give>

000200de <write_cb>:
{
   200de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   200e2:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   200e4:	f8d1 8000 	ldr.w	r8, [r1]
   200e8:	212a      	movs	r1, #42	; 0x2a
{
   200ea:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   200ec:	f7ff ff1b 	bl	1ff26 <check_perm.isra.6>
   200f0:	4605      	mov	r5, r0
   200f2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   200f4:	bb08      	cbnz	r0, 2013a <write_cb+0x5c>
	if (!data->req) {
   200f6:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   200f8:	68b7      	ldr	r7, [r6, #8]
   200fa:	68e2      	ldr	r2, [r4, #12]
	if (!data->req) {
   200fc:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   200fe:	bf14      	ite	ne
   20100:	2300      	movne	r3, #0
   20102:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   20104:	9301      	str	r3, [sp, #4]
   20106:	8a63      	ldrh	r3, [r4, #18]
   20108:	9300      	str	r3, [sp, #0]
   2010a:	4631      	mov	r1, r6
   2010c:	7c23      	ldrb	r3, [r4, #16]
   2010e:	4640      	mov	r0, r8
   20110:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   20112:	2800      	cmp	r0, #0
   20114:	db05      	blt.n	20122 <write_cb+0x44>
   20116:	7c23      	ldrb	r3, [r4, #16]
   20118:	4298      	cmp	r0, r3
   2011a:	d10c      	bne.n	20136 <write_cb+0x58>
	data->err = 0U;
   2011c:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2011e:	2501      	movs	r5, #1
   20120:	e005      	b.n	2012e <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
   20122:	f110 0fff 	cmn.w	r0, #255	; 0xff
   20126:	d306      	bcc.n	20136 <write_cb+0x58>
		return -err;
   20128:	4240      	negs	r0, r0
   2012a:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2012c:	7520      	strb	r0, [r4, #20]
}
   2012e:	4628      	mov	r0, r5
   20130:	b002      	add	sp, #8
   20132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_ATT_ERR_UNLIKELY;
   20136:	200e      	movs	r0, #14
   20138:	e7f8      	b.n	2012c <write_cb+0x4e>
		return BT_GATT_ITER_STOP;
   2013a:	2500      	movs	r5, #0
   2013c:	e7f7      	b.n	2012e <write_cb+0x50>

0002013e <read_cb>:
{
   2013e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20142:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20144:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   20146:	f8d1 9000 	ldr.w	r9, [r1]
{
   2014a:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2014c:	3008      	adds	r0, #8
   2014e:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   20150:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20154:	f002 fa19 	bl	2258a <net_buf_simple_add>
	data->err = 0x00;
   20158:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2015a:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   2015c:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2015e:	2115      	movs	r1, #21
   20160:	4630      	mov	r0, r6
   20162:	f7ff fee0 	bl	1ff26 <check_perm.isra.6>
   20166:	4605      	mov	r5, r0
   20168:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   2016a:	bb00      	cbnz	r0, 201ae <read_cb+0x70>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   2016c:	68a1      	ldr	r1, [r4, #8]
   2016e:	f8b9 3052 	ldrh.w	r3, [r9, #82]	; 0x52
   20172:	898a      	ldrh	r2, [r1, #12]
   20174:	6889      	ldr	r1, [r1, #8]
   20176:	88a0      	ldrh	r0, [r4, #4]
   20178:	9000      	str	r0, [sp, #0]
   2017a:	1a9b      	subs	r3, r3, r2
   2017c:	6877      	ldr	r7, [r6, #4]
   2017e:	440a      	add	r2, r1
   20180:	b29b      	uxth	r3, r3
   20182:	4631      	mov	r1, r6
   20184:	4640      	mov	r0, r8
   20186:	47b8      	blx	r7
	if (read < 0) {
   20188:	1e01      	subs	r1, r0, #0
   2018a:	da0a      	bge.n	201a2 <read_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2018c:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   20190:	bf26      	itte	cs
   20192:	4249      	negcs	r1, r1
   20194:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   20196:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   20198:	7421      	strb	r1, [r4, #16]
}
   2019a:	4628      	mov	r0, r5
   2019c:	b003      	add	sp, #12
   2019e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   201a2:	68a0      	ldr	r0, [r4, #8]
   201a4:	3008      	adds	r0, #8
   201a6:	f002 f9f0 	bl	2258a <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   201aa:	2501      	movs	r5, #1
   201ac:	e7f5      	b.n	2019a <read_cb+0x5c>
		return BT_GATT_ITER_STOP;
   201ae:	463d      	mov	r5, r7
   201b0:	e7f3      	b.n	2019a <read_cb+0x5c>

000201b2 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   201b2:	898a      	ldrh	r2, [r1, #12]
   201b4:	6889      	ldr	r1, [r1, #8]
   201b6:	2300      	movs	r3, #0
   201b8:	f7e9 bb14 	b.w	97e4 <att_handle_rsp>

000201bc <att_reset>:
{
   201bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   201be:	4604      	mov	r4, r0
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
   201c0:	f100 05d4 	add.w	r5, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   201c4:	2100      	movs	r1, #0
   201c6:	4628      	mov	r0, r5
   201c8:	f002 fd04 	bl	22bd4 <z_impl_k_queue_get>
   201cc:	bb00      	cbnz	r0, 20210 <att_reset+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   201ce:	f3bf 8f5b 	dmb	ish
   201d2:	f104 038c 	add.w	r3, r4, #140	; 0x8c
   201d6:	e853 2f00 	ldrex	r2, [r3]
   201da:	f042 0204 	orr.w	r2, r2, #4
   201de:	e843 2100 	strex	r1, r2, [r3]
   201e2:	2900      	cmp	r1, #0
   201e4:	d1f7      	bne.n	201d6 <att_reset+0x1a>
   201e6:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
   201ea:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   201ee:	4628      	mov	r0, r5
   201f0:	f7fc f83a 	bl	1c268 <z_impl_k_sem_give>
   201f4:	4628      	mov	r0, r5
   201f6:	f7fc f837 	bl	1c268 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   201fa:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   201fe:	b955      	cbnz	r5, 20216 <att_reset+0x5a>
	if (!att->req) {
   20200:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	list->head = NULL;
   20204:	2200      	movs	r2, #0
	list->tail = NULL;
   20206:	e9c4 2225 	strd	r2, r2, [r4, #148]	; 0x94
   2020a:	b9ab      	cbnz	r3, 20238 <att_reset+0x7c>
}
   2020c:	b003      	add	sp, #12
   2020e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   20210:	f7fa fd10 	bl	1ac34 <net_buf_unref>
   20214:	e7d6      	b.n	201c4 <att_reset+0x8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20216:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   20218:	686f      	ldr	r7, [r5, #4]
   2021a:	b12f      	cbz	r7, 20228 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
   2021c:	2300      	movs	r3, #0
   2021e:	9500      	str	r5, [sp, #0]
   20220:	461a      	mov	r2, r3
   20222:	210e      	movs	r1, #14
   20224:	4618      	mov	r0, r3
   20226:	47b8      	blx	r7
		att_req_destroy(req);
   20228:	4628      	mov	r0, r5
   2022a:	f7ff fd64 	bl	1fcf6 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   2022e:	2e00      	cmp	r6, #0
   20230:	d0e6      	beq.n	20200 <att_reset+0x44>
   20232:	4635      	mov	r5, r6
   20234:	6836      	ldr	r6, [r6, #0]
   20236:	e7ef      	b.n	20218 <att_reset+0x5c>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   20238:	230e      	movs	r3, #14
   2023a:	4611      	mov	r1, r2
   2023c:	4620      	mov	r0, r4
}
   2023e:	b003      	add	sp, #12
   20240:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   20244:	f7e9 bace 	b.w	97e4 <att_handle_rsp>

00020248 <bt_att_disconnected>:
{
   20248:	b510      	push	{r4, lr}
   2024a:	4604      	mov	r4, r0
	att_reset(att);
   2024c:	f7ff ffb6 	bl	201bc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   20250:	6820      	ldr	r0, [r4, #0]
}
   20252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   20256:	f7ea bf4b 	b.w	b0f0 <bt_gatt_disconnected>

0002025a <att_write_cmd>:
{
   2025a:	b530      	push	{r4, r5, lr}
   2025c:	460c      	mov	r4, r1
   2025e:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   20260:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   20262:	f101 0008 	add.w	r0, r1, #8
   20266:	f002 fa15 	bl	22694 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
   2026a:	7b23      	ldrb	r3, [r4, #12]
   2026c:	9302      	str	r3, [sp, #8]
   2026e:	2200      	movs	r2, #0
   20270:	68a3      	ldr	r3, [r4, #8]
   20272:	9301      	str	r3, [sp, #4]
   20274:	9200      	str	r2, [sp, #0]
   20276:	4603      	mov	r3, r0
   20278:	4611      	mov	r1, r2
   2027a:	4628      	mov	r0, r5
   2027c:	f7e9 fca0 	bl	9bc0 <att_write_rsp>
}
   20280:	b005      	add	sp, #20
   20282:	bd30      	pop	{r4, r5, pc}

00020284 <att_write_req>:
{
   20284:	b530      	push	{r4, r5, lr}
   20286:	460c      	mov	r4, r1
   20288:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
   2028a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
   2028c:	f101 0008 	add.w	r0, r1, #8
   20290:	f002 fa00 	bl	22694 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   20294:	7b23      	ldrb	r3, [r4, #12]
   20296:	9302      	str	r3, [sp, #8]
   20298:	68a3      	ldr	r3, [r4, #8]
   2029a:	9301      	str	r3, [sp, #4]
   2029c:	2300      	movs	r3, #0
   2029e:	9300      	str	r3, [sp, #0]
   202a0:	2213      	movs	r2, #19
   202a2:	4603      	mov	r3, r0
   202a4:	2112      	movs	r1, #18
   202a6:	4628      	mov	r0, r5
   202a8:	f7e9 fc8a 	bl	9bc0 <att_write_rsp>
}
   202ac:	b005      	add	sp, #20
   202ae:	bd30      	pop	{r4, r5, pc}

000202b0 <att_read_blob_req>:
{
   202b0:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   202b2:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   202b4:	8813      	ldrh	r3, [r2, #0]
   202b6:	8852      	ldrh	r2, [r2, #2]
   202b8:	9200      	str	r2, [sp, #0]
   202ba:	210c      	movs	r1, #12
   202bc:	220d      	movs	r2, #13
   202be:	f7e9 fe5d 	bl	9f7c <att_read_rsp>
}
   202c2:	b003      	add	sp, #12
   202c4:	f85d fb04 	ldr.w	pc, [sp], #4

000202c8 <att_read_req>:
{
   202c8:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   202ca:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   202cc:	2200      	movs	r2, #0
   202ce:	881b      	ldrh	r3, [r3, #0]
   202d0:	9200      	str	r2, [sp, #0]
   202d2:	210a      	movs	r1, #10
   202d4:	220b      	movs	r2, #11
   202d6:	f7e9 fe51 	bl	9f7c <att_read_rsp>
}
   202da:	b003      	add	sp, #12
   202dc:	f85d fb04 	ldr.w	pc, [sp], #4

000202e0 <bt_att_get_mtu>:
{
   202e0:	b508      	push	{r3, lr}
	att = att_chan_get(conn);
   202e2:	f7e9 f9e7 	bl	96b4 <att_chan_get>
	if (!att) {
   202e6:	b108      	cbz	r0, 202ec <bt_att_get_mtu+0xc>
	return att->chan.tx.mtu;
   202e8:	f8b0 0052 	ldrh.w	r0, [r0, #82]	; 0x52
}
   202ec:	bd08      	pop	{r3, pc}

000202ee <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   202ee:	b510      	push	{r4, lr}
   202f0:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
   202f2:	b1c8      	cbz	r0, 20328 <bt_att_req_send+0x3a>
   202f4:	b1c1      	cbz	r1, 20328 <bt_att_req_send+0x3a>
		return -EINVAL;
	}

	att = att_chan_get(conn);
   202f6:	f7e9 f9dd 	bl	96b4 <att_chan_get>
	if (!att) {
   202fa:	4603      	mov	r3, r0
   202fc:	b1b8      	cbz	r0, 2032e <bt_att_req_send+0x40>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
   202fe:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   20302:	b162      	cbz	r2, 2031e <bt_att_req_send+0x30>
	parent->next = child;
   20304:	2000      	movs	r0, #0
   20306:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   20308:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
   2030c:	b91a      	cbnz	r2, 20316 <bt_att_req_send+0x28>
	list->head = node;
   2030e:	e9c3 4425 	strd	r4, r4, [r3, #148]	; 0x94
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
   20312:	4610      	mov	r0, r2
	}

	return att_send_req(att, req);
}
   20314:	bd10      	pop	{r4, pc}
	parent->next = child;
   20316:	6014      	str	r4, [r2, #0]
	list->tail = node;
   20318:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
   2031c:	e7fa      	b.n	20314 <bt_att_req_send+0x26>
	return att_send_req(att, req);
   2031e:	4621      	mov	r1, r4
}
   20320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
   20324:	f7e9 ba0e 	b.w	9744 <att_send_req>
		return -EINVAL;
   20328:	f06f 0015 	mvn.w	r0, #21
   2032c:	e7f2      	b.n	20314 <bt_att_req_send+0x26>
		return -ENOTCONN;
   2032e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   20332:	e7ef      	b.n	20314 <bt_att_req_send+0x26>

00020334 <sc_ccc_cfg_changed>:
}
   20334:	4770      	bx	lr

00020336 <gatt_ccc_changed>:
{
   20336:	b430      	push	{r4, r5}
	u16_t value = 0x0000;
   20338:	2300      	movs	r3, #0
   2033a:	684d      	ldr	r5, [r1, #4]
	for (i = 0; i < ccc->cfg_len; i++) {
   2033c:	461a      	mov	r2, r3
   2033e:	42aa      	cmp	r2, r5
   20340:	d108      	bne.n	20354 <gatt_ccc_changed+0x1e>
	if (value != ccc->value) {
   20342:	890a      	ldrh	r2, [r1, #8]
   20344:	429a      	cmp	r2, r3
   20346:	d00e      	beq.n	20366 <gatt_ccc_changed+0x30>
		if (ccc->cfg_changed) {
   20348:	68ca      	ldr	r2, [r1, #12]
		ccc->value = value;
   2034a:	810b      	strh	r3, [r1, #8]
		if (ccc->cfg_changed) {
   2034c:	b15a      	cbz	r2, 20366 <gatt_ccc_changed+0x30>
			ccc->cfg_changed(attr, value);
   2034e:	4619      	mov	r1, r3
}
   20350:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   20352:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
   20354:	680c      	ldr	r4, [r1, #0]
   20356:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
   2035a:	3201      	adds	r2, #1
   2035c:	8924      	ldrh	r4, [r4, #8]
   2035e:	42a3      	cmp	r3, r4
   20360:	bf38      	it	cc
   20362:	4623      	movcc	r3, r4
   20364:	e7eb      	b.n	2033e <gatt_ccc_changed+0x8>
}
   20366:	bc30      	pop	{r4, r5}
   20368:	4770      	bx	lr

0002036a <gatt_indicate_rsp>:
{
   2036a:	b410      	push	{r4}
   2036c:	9b01      	ldr	r3, [sp, #4]
	params->func(conn, params->attr, err);
   2036e:	699c      	ldr	r4, [r3, #24]
   20370:	460a      	mov	r2, r1
   20372:	6959      	ldr	r1, [r3, #20]
   20374:	4623      	mov	r3, r4
}
   20376:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   20378:	4718      	bx	r3

0002037a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2037a:	f3bf 8f5b 	dmb	ish
   2037e:	6800      	ldr	r0, [r0, #0]
   20380:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20384:	4108      	asrs	r0, r1
}
   20386:	f000 0001 	and.w	r0, r0, #1
   2038a:	4770      	bx	lr

0002038c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2038c:	2207      	movs	r2, #7
   2038e:	f7ff b93b 	b.w	1f608 <memcpy>

00020392 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20392:	2301      	movs	r3, #1
   20394:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20398:	f3bf 8f5b 	dmb	ish
   2039c:	e850 3f00 	ldrex	r3, [r0]
   203a0:	430b      	orrs	r3, r1
   203a2:	e840 3200 	strex	r2, r3, [r0]
   203a6:	2a00      	cmp	r2, #0
   203a8:	d1f8      	bne.n	2039c <atomic_set_bit+0xa>
   203aa:	f3bf 8f5b 	dmb	ish
}
   203ae:	4770      	bx	lr

000203b0 <gen_hash_m>:
{
   203b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   203b2:	6807      	ldr	r7, [r0, #0]
   203b4:	783d      	ldrb	r5, [r7, #0]
{
   203b6:	b089      	sub	sp, #36	; 0x24
   203b8:	4606      	mov	r6, r0
   203ba:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   203bc:	b10d      	cbz	r5, 203c2 <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   203be:	2501      	movs	r5, #1
   203c0:	e015      	b.n	203ee <gen_hash_m+0x3e>
	switch (u16->val) {
   203c2:	887b      	ldrh	r3, [r7, #2]
   203c4:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   203c8:	d004      	beq.n	203d4 <gen_hash_m+0x24>
   203ca:	d813      	bhi.n	203f4 <gen_hash_m+0x44>
   203cc:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   203d0:	2b03      	cmp	r3, #3
   203d2:	d8f4      	bhi.n	203be <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   203d4:	8a33      	ldrh	r3, [r6, #16]
   203d6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   203da:	2202      	movs	r2, #2
   203dc:	f10d 010e 	add.w	r1, sp, #14
   203e0:	4620      	mov	r0, r4
   203e2:	f7fd ff1c 	bl	1e21e <tc_cmac_update>
   203e6:	b9d8      	cbnz	r0, 20420 <gen_hash_m+0x70>
			state->err = -EINVAL;
   203e8:	f06f 0315 	mvn.w	r3, #21
   203ec:	65a3      	str	r3, [r4, #88]	; 0x58
}
   203ee:	4628      	mov	r0, r5
   203f0:	b009      	add	sp, #36	; 0x24
   203f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   203f4:	f642 1205 	movw	r2, #10501	; 0x2905
   203f8:	4293      	cmp	r3, r2
   203fa:	d8e0      	bhi.n	203be <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   203fc:	8a03      	ldrh	r3, [r0, #16]
   203fe:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   20402:	2202      	movs	r2, #2
   20404:	f10d 010e 	add.w	r1, sp, #14
   20408:	4620      	mov	r0, r4
   2040a:	f7fd ff08 	bl	1e21e <tc_cmac_update>
   2040e:	2800      	cmp	r0, #0
   20410:	d0ea      	beq.n	203e8 <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   20412:	887b      	ldrh	r3, [r7, #2]
   20414:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   20418:	2202      	movs	r2, #2
   2041a:	f10d 010e 	add.w	r1, sp, #14
   2041e:	e014      	b.n	2044a <gen_hash_m+0x9a>
		value = sys_cpu_to_le16(u16->val);
   20420:	887b      	ldrh	r3, [r7, #2]
   20422:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   20426:	2202      	movs	r2, #2
   20428:	f10d 010e 	add.w	r1, sp, #14
   2042c:	4620      	mov	r0, r4
   2042e:	f7fd fef6 	bl	1e21e <tc_cmac_update>
   20432:	2800      	cmp	r0, #0
   20434:	d0d8      	beq.n	203e8 <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   20436:	2000      	movs	r0, #0
   20438:	2310      	movs	r3, #16
   2043a:	eb0d 0203 	add.w	r2, sp, r3
   2043e:	4631      	mov	r1, r6
   20440:	9000      	str	r0, [sp, #0]
   20442:	6877      	ldr	r7, [r6, #4]
   20444:	47b8      	blx	r7
		if (tc_cmac_update(&state->state, data, len) ==
   20446:	a904      	add	r1, sp, #16
   20448:	4602      	mov	r2, r0
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2044a:	4620      	mov	r0, r4
   2044c:	f7fd fee7 	bl	1e21e <tc_cmac_update>
   20450:	2800      	cmp	r0, #0
   20452:	d1b4      	bne.n	203be <gen_hash_m+0xe>
   20454:	e7c8      	b.n	203e8 <gen_hash_m+0x38>

00020456 <ccc_find_cfg>:
{
   20456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20458:	4605      	mov	r5, r0
   2045a:	460f      	mov	r7, r1
	for (i = 0; i < ccc->cfg_len; i++) {
   2045c:	2400      	movs	r4, #0
   2045e:	686b      	ldr	r3, [r5, #4]
   20460:	429c      	cmp	r4, r3
   20462:	d301      	bcc.n	20468 <ccc_find_cfg+0x12>
	return NULL;
   20464:	2000      	movs	r0, #0
   20466:	e00a      	b.n	2047e <ccc_find_cfg+0x28>
		if (!bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   20468:	6828      	ldr	r0, [r5, #0]
   2046a:	0126      	lsls	r6, r4, #4
   2046c:	4430      	add	r0, r6
	return memcmp(a, b, sizeof(*a));
   2046e:	2207      	movs	r2, #7
   20470:	4639      	mov	r1, r7
   20472:	3001      	adds	r0, #1
   20474:	f7ff f8a1 	bl	1f5ba <memcmp>
   20478:	b910      	cbnz	r0, 20480 <ccc_find_cfg+0x2a>
			return &ccc->cfg[i];
   2047a:	6828      	ldr	r0, [r5, #0]
   2047c:	4430      	add	r0, r6
}
   2047e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
   20480:	3401      	adds	r4, #1
   20482:	e7ec      	b.n	2045e <ccc_find_cfg+0x8>

00020484 <find_ccc_cfg>:
{
   20484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20486:	4605      	mov	r5, r0
   20488:	460f      	mov	r7, r1
	for (i = 0; i < ccc->cfg_len; i++) {
   2048a:	2600      	movs	r6, #0
   2048c:	687b      	ldr	r3, [r7, #4]
   2048e:	42b3      	cmp	r3, r6
   20490:	d801      	bhi.n	20496 <find_ccc_cfg+0x12>
	return NULL;
   20492:	2000      	movs	r0, #0
   20494:	e00e      	b.n	204b4 <find_ccc_cfg+0x30>
		if (conn) {
   20496:	683b      	ldr	r3, [r7, #0]
   20498:	0134      	lsls	r4, r6, #4
   2049a:	1918      	adds	r0, r3, r4
   2049c:	b165      	cbz	r5, 204b8 <find_ccc_cfg+0x34>
			if (conn->id == ccc->cfg[i].id &&
   2049e:	7a2a      	ldrb	r2, [r5, #8]
   204a0:	5d1b      	ldrb	r3, [r3, r4]
   204a2:	429a      	cmp	r2, r3
   204a4:	d111      	bne.n	204ca <find_ccc_cfg+0x46>
			    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
   204a6:	1c41      	adds	r1, r0, #1
   204a8:	4628      	mov	r0, r5
   204aa:	f7ff fb2c 	bl	1fb06 <bt_conn_addr_le_cmp>
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   204ae:	b960      	cbnz	r0, 204ca <find_ccc_cfg+0x46>
			return &ccc->cfg[i];
   204b0:	6838      	ldr	r0, [r7, #0]
   204b2:	4420      	add	r0, r4
}
   204b4:	b003      	add	sp, #12
   204b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204b8:	2207      	movs	r2, #7
   204ba:	4669      	mov	r1, sp
   204bc:	3001      	adds	r0, #1
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   204be:	9500      	str	r5, [sp, #0]
   204c0:	f8cd 5003 	str.w	r5, [sp, #3]
   204c4:	f7ff f879 	bl	1f5ba <memcmp>
   204c8:	e7f1      	b.n	204ae <find_ccc_cfg+0x2a>
	for (i = 0; i < ccc->cfg_len; i++) {
   204ca:	3601      	adds	r6, #1
   204cc:	e7de      	b.n	2048c <find_ccc_cfg+0x8>

000204ce <read_appearance>:
{
   204ce:	b513      	push	{r0, r1, r4, lr}
   204d0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   204d4:	4610      	mov	r0, r2
	if (offset > value_len) {
   204d6:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   204d8:	f04f 0200 	mov.w	r2, #0
   204dc:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   204e0:	d80d      	bhi.n	204fe <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   204e2:	f1c1 0402 	rsb	r4, r1, #2
   204e6:	429c      	cmp	r4, r3
   204e8:	bfa8      	it	ge
   204ea:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   204ec:	f10d 0306 	add.w	r3, sp, #6
   204f0:	4622      	mov	r2, r4
   204f2:	4419      	add	r1, r3
   204f4:	f7ff f888 	bl	1f608 <memcpy>
}
   204f8:	4620      	mov	r0, r4
   204fa:	b002      	add	sp, #8
   204fc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   204fe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   20502:	e7f9      	b.n	204f8 <read_appearance+0x2a>

00020504 <read_name>:
{
   20504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20508:	4698      	mov	r8, r3
   2050a:	4616      	mov	r6, r2
   2050c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   20510:	f7e7 fe28 	bl	8164 <bt_get_name>
   20514:	4607      	mov	r7, r0
				 strlen(name));
   20516:	f7ff f83d 	bl	1f594 <strlen>
	if (offset > value_len) {
   2051a:	b283      	uxth	r3, r0
   2051c:	42ab      	cmp	r3, r5
   2051e:	d30c      	bcc.n	2053a <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   20520:	1b5c      	subs	r4, r3, r5
   20522:	4544      	cmp	r4, r8
   20524:	bfa8      	it	ge
   20526:	4644      	movge	r4, r8
   20528:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   2052a:	4622      	mov	r2, r4
   2052c:	1979      	adds	r1, r7, r5
   2052e:	4630      	mov	r0, r6
   20530:	f7ff f86a 	bl	1f608 <memcpy>
}
   20534:	4620      	mov	r0, r4
   20536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2053a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2053e:	e7f9      	b.n	20534 <read_name+0x30>

00020540 <cf_read>:
{
   20540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20542:	461f      	mov	r7, r3
	u8_t data[1] = {};
   20544:	2300      	movs	r3, #0
{
   20546:	4616      	mov	r6, r2
   20548:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	u8_t data[1] = {};
   2054c:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   20550:	f7ea f8ac 	bl	a6ac <find_cf_cfg>
	if (cfg) {
   20554:	b128      	cbz	r0, 20562 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   20556:	f100 0108 	add.w	r1, r0, #8
   2055a:	2201      	movs	r2, #1
   2055c:	a801      	add	r0, sp, #4
   2055e:	f7ff f853 	bl	1f608 <memcpy>
	if (offset > value_len) {
   20562:	2d01      	cmp	r5, #1
   20564:	d80d      	bhi.n	20582 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   20566:	f1c5 0401 	rsb	r4, r5, #1
   2056a:	42bc      	cmp	r4, r7
   2056c:	bfa8      	it	ge
   2056e:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   20570:	ab01      	add	r3, sp, #4
   20572:	4622      	mov	r2, r4
   20574:	1959      	adds	r1, r3, r5
   20576:	4630      	mov	r0, r6
   20578:	f7ff f846 	bl	1f608 <memcpy>
}
   2057c:	4620      	mov	r0, r4
   2057e:	b003      	add	sp, #12
   20580:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20582:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   20586:	e7f9      	b.n	2057c <cf_read+0x3c>

00020588 <bt_gatt_attr_read_ccc>:
{
   20588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2058a:	68c9      	ldr	r1, [r1, #12]
{
   2058c:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   20590:	4616      	mov	r6, r2
   20592:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   20594:	f7ff ff76 	bl	20484 <find_ccc_cfg>
	if (cfg) {
   20598:	b100      	cbz	r0, 2059c <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2059a:	8900      	ldrh	r0, [r0, #8]
   2059c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   205a0:	2d02      	cmp	r5, #2
   205a2:	d80e      	bhi.n	205c2 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   205a4:	f1c5 0402 	rsb	r4, r5, #2
   205a8:	42bc      	cmp	r4, r7
   205aa:	bfa8      	it	ge
   205ac:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   205ae:	f10d 0306 	add.w	r3, sp, #6
   205b2:	4622      	mov	r2, r4
   205b4:	1959      	adds	r1, r3, r5
   205b6:	4630      	mov	r0, r6
   205b8:	f7ff f826 	bl	1f608 <memcpy>
}
   205bc:	4620      	mov	r0, r4
   205be:	b003      	add	sp, #12
   205c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   205c2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   205c6:	e7f9      	b.n	205bc <bt_gatt_attr_read_ccc+0x34>

000205c8 <bt_gatt_attr_read_chrc>:
{
   205c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   205ca:	68c8      	ldr	r0, [r1, #12]
{
   205cc:	b087      	sub	sp, #28
   205ce:	4616      	mov	r6, r2
   205d0:	461f      	mov	r7, r3
	pdu.value_handle = sys_cpu_to_le16(attr->handle + 1);
   205d2:	8a0a      	ldrh	r2, [r1, #16]
	pdu.properties = chrc->properties;
   205d4:	7903      	ldrb	r3, [r0, #4]
   205d6:	f88d 3004 	strb.w	r3, [sp, #4]
	pdu.value_handle = sys_cpu_to_le16(attr->handle + 1);
   205da:	3201      	adds	r2, #1
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   205dc:	6801      	ldr	r1, [r0, #0]
	pdu.value_handle = sys_cpu_to_le16(attr->handle + 1);
   205de:	f8ad 2005 	strh.w	r2, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   205e2:	780b      	ldrb	r3, [r1, #0]
{
   205e4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   205e8:	b99b      	cbnz	r3, 20612 <bt_gatt_attr_read_chrc+0x4a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   205ea:	884b      	ldrh	r3, [r1, #2]
   205ec:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
   205f0:	2205      	movs	r2, #5
	if (offset > value_len) {
   205f2:	42aa      	cmp	r2, r5
   205f4:	d315      	bcc.n	20622 <bt_gatt_attr_read_chrc+0x5a>
	len = MIN(buf_len, value_len - offset);
   205f6:	1b54      	subs	r4, r2, r5
   205f8:	42bc      	cmp	r4, r7
   205fa:	bfa8      	it	ge
   205fc:	463c      	movge	r4, r7
   205fe:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   20600:	ab01      	add	r3, sp, #4
   20602:	4622      	mov	r2, r4
   20604:	1959      	adds	r1, r3, r5
   20606:	4630      	mov	r0, r6
   20608:	f7fe fffe 	bl	1f608 <memcpy>
}
   2060c:	4620      	mov	r0, r4
   2060e:	b007      	add	sp, #28
   20610:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   20612:	2210      	movs	r2, #16
   20614:	3101      	adds	r1, #1
   20616:	f10d 0007 	add.w	r0, sp, #7
   2061a:	f7fe fff5 	bl	1f608 <memcpy>
		value_len += 16;
   2061e:	2213      	movs	r2, #19
   20620:	e7e7      	b.n	205f2 <bt_gatt_attr_read_chrc+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20622:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   20626:	e7f1      	b.n	2060c <bt_gatt_attr_read_chrc+0x44>

00020628 <bt_gatt_attr_read_service>:
{
   20628:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2062a:	68c9      	ldr	r1, [r1, #12]
{
   2062c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   20630:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   20632:	780a      	ldrb	r2, [r1, #0]
   20634:	b992      	cbnz	r2, 2065c <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   20636:	884a      	ldrh	r2, [r1, #2]
   20638:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2063c:	2d02      	cmp	r5, #2
   2063e:	d819      	bhi.n	20674 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   20640:	f1c5 0402 	rsb	r4, r5, #2
   20644:	429c      	cmp	r4, r3
   20646:	bfa8      	it	ge
   20648:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   2064a:	f10d 0306 	add.w	r3, sp, #6
   2064e:	4622      	mov	r2, r4
   20650:	1959      	adds	r1, r3, r5
   20652:	f7fe ffd9 	bl	1f608 <memcpy>
}
   20656:	4620      	mov	r0, r4
   20658:	b003      	add	sp, #12
   2065a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2065c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2065e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   20662:	d807      	bhi.n	20674 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   20664:	f1c5 0410 	rsb	r4, r5, #16
   20668:	429c      	cmp	r4, r3
   2066a:	bfa8      	it	ge
   2066c:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   2066e:	4622      	mov	r2, r4
   20670:	4429      	add	r1, r5
   20672:	e7ee      	b.n	20652 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20674:	f06f 0406 	mvn.w	r4, #6
   20678:	e7ed      	b.n	20656 <bt_gatt_attr_read_service+0x2e>

0002067a <bt_gatt_service_register>:
{
   2067a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2067c:	4604      	mov	r4, r0
	bt_gatt_init();
   2067e:	f7ea fb81 	bl	ad84 <bt_gatt_init>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   20682:	6823      	ldr	r3, [r4, #0]
   20684:	2500      	movs	r5, #0
   20686:	6818      	ldr	r0, [r3, #0]
   20688:	f88d 5000 	strb.w	r5, [sp]
   2068c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   20690:	4669      	mov	r1, sp
   20692:	f8ad 3002 	strh.w	r3, [sp, #2]
   20696:	f7ff f903 	bl	1f8a0 <bt_uuid_cmp>
   2069a:	b918      	cbnz	r0, 206a4 <bt_gatt_service_register+0x2a>
		return -EALREADY;
   2069c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   206a0:	b003      	add	sp, #12
   206a2:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
   206a4:	6823      	ldr	r3, [r4, #0]
   206a6:	a901      	add	r1, sp, #4
   206a8:	6818      	ldr	r0, [r3, #0]
   206aa:	f88d 5004 	strb.w	r5, [sp, #4]
   206ae:	f641 0301 	movw	r3, #6145	; 0x1801
   206b2:	f8ad 3006 	strh.w	r3, [sp, #6]
   206b6:	f7ff f8f3 	bl	1f8a0 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   206ba:	2800      	cmp	r0, #0
   206bc:	d0ee      	beq.n	2069c <bt_gatt_service_register+0x22>
	err = gatt_register(svc);
   206be:	4620      	mov	r0, r4
   206c0:	f7e9 fed2 	bl	a468 <gatt_register>
	if (err < 0) {
   206c4:	2800      	cmp	r0, #0
   206c6:	dbeb      	blt.n	206a0 <bt_gatt_service_register+0x26>
		    svc->attrs[svc->attr_count - 1].handle);
   206c8:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
   206cc:	2114      	movs	r1, #20
   206ce:	fb01 2303 	mla	r3, r1, r3, r2
   206d2:	8a10      	ldrh	r0, [r2, #16]
   206d4:	f833 1c04 	ldrh.w	r1, [r3, #-4]
   206d8:	f7ea f9b6 	bl	aa48 <sc_indicate.constprop.22>
	db_changed();
   206dc:	f7ea f96e 	bl	a9bc <db_changed>
	return 0;
   206e0:	4628      	mov	r0, r5
   206e2:	e7dd      	b.n	206a0 <bt_gatt_service_register+0x26>

000206e4 <db_hash_process>:
	db_hash_gen();
   206e4:	f7ea bb0a 	b.w	acfc <db_hash_gen>

000206e8 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   206e8:	f7ff bdfa 	b.w	202e0 <bt_att_get_mtu>

000206ec <bt_gatt_change_aware>:
{
   206ec:	b510      	push	{r4, lr}
   206ee:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   206f0:	f7e9 ffdc 	bl	a6ac <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   206f4:	b910      	cbnz	r0, 206fc <bt_gatt_change_aware+0x10>
		return true;
   206f6:	2401      	movs	r4, #1
}
   206f8:	4620      	mov	r0, r4
   206fa:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   206fc:	7a03      	ldrb	r3, [r0, #8]
   206fe:	07db      	lsls	r3, r3, #31
   20700:	d5f9      	bpl.n	206f6 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   20702:	f100 030c 	add.w	r3, r0, #12
   20706:	2100      	movs	r1, #0
   20708:	4618      	mov	r0, r3
   2070a:	f7ff fe36 	bl	2037a <atomic_test_bit>
   2070e:	4602      	mov	r2, r0
   20710:	2800      	cmp	r0, #0
   20712:	d1f0      	bne.n	206f6 <bt_gatt_change_aware+0xa>
	if (!req) {
   20714:	2c00      	cmp	r4, #0
   20716:	d0ef      	beq.n	206f8 <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   20718:	2101      	movs	r1, #1
   2071a:	4618      	mov	r0, r3
   2071c:	f7ff fe2d 	bl	2037a <atomic_test_bit>
   20720:	4604      	mov	r4, r0
   20722:	b180      	cbz	r0, 20746 <bt_gatt_change_aware+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20724:	f3bf 8f5b 	dmb	ish
   20728:	e853 1f00 	ldrex	r1, [r3]
   2072c:	f021 0102 	bic.w	r1, r1, #2
   20730:	e843 1000 	strex	r0, r1, [r3]
   20734:	2800      	cmp	r0, #0
   20736:	d1f7      	bne.n	20728 <bt_gatt_change_aware+0x3c>
   20738:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2073c:	4611      	mov	r1, r2
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2073e:	4618      	mov	r0, r3
   20740:	f7ff fe27 	bl	20392 <atomic_set_bit>
	return false;
   20744:	e7d8      	b.n	206f8 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   20746:	2101      	movs	r1, #1
   20748:	e7f9      	b.n	2073e <bt_gatt_change_aware+0x52>

0002074a <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
   2074a:	2100      	movs	r1, #0
{
   2074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   2074e:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   20750:	4608      	mov	r0, r1
   20752:	f7ff faa3 	bl	1fc9c <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
   20756:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
   2075a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   2075c:	2101      	movs	r1, #1
   2075e:	4630      	mov	r0, r6
   20760:	f001 ff13 	bl	2258a <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   20764:	2505      	movs	r5, #5
   20766:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
   20768:	2101      	movs	r1, #1
   2076a:	4630      	mov	r0, r6
   2076c:	f001 ff0d 	bl	2258a <net_buf_simple_add>
   20770:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   20772:	7005      	strb	r5, [r0, #0]
   20774:	4622      	mov	r2, r4
   20776:	4638      	mov	r0, r7
   20778:	2106      	movs	r1, #6
   2077a:	f7ff fa92 	bl	1fca2 <bt_l2cap_send_cb>
}
   2077e:	2000      	movs	r0, #0
   20780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020782 <bt_smp_sign>:
   20782:	f06f 0022 	mvn.w	r0, #34	; 0x22
   20786:	4770      	bx	lr

00020788 <bt_mesh_is_provisioned>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
   20788:	f7ea bd68 	b.w	b25c <atomic_test_bit.constprop.3>

0002078c <bt_mesh_init>:
	return err;
}

int bt_mesh_init(const struct bt_mesh_prov *prov,
		 const struct bt_mesh_comp *comp)
{
   2078c:	b538      	push	{r3, r4, r5, lr}
   2078e:	4605      	mov	r5, r0
	err = bt_mesh_test();
	if (err) {
		return err;
	}

	err = bt_mesh_comp_register(comp);
   20790:	4608      	mov	r0, r1
   20792:	f7ed ff99 	bl	e6c8 <bt_mesh_comp_register>
	if (err) {
   20796:	4604      	mov	r4, r0
   20798:	b980      	cbnz	r0, 207bc <bt_mesh_init+0x30>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		err = bt_mesh_prov_init(prov);
   2079a:	4628      	mov	r0, r5
   2079c:	f7f3 ff5e 	bl	1465c <bt_mesh_prov_init>
		if (err) {
   207a0:	4604      	mov	r4, r0
   207a2:	b958      	cbnz	r0, 207bc <bt_mesh_init+0x30>
			return err;
		}
	}

	bt_mesh_net_init();
   207a4:	f7ec fb62 	bl	ce6c <bt_mesh_net_init>
	bt_mesh_trans_init();
   207a8:	f7ed fcb2 	bl	e110 <bt_mesh_trans_init>
	bt_mesh_beacon_init();
   207ac:	f7eb f97c 	bl	baa8 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   207b0:	f7ea ffca 	bl	b748 <bt_mesh_adv_init>

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
		bt_mesh_proxy_init();
   207b4:	f7f4 fe3a 	bl	1542c <bt_mesh_proxy_init>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_init();
   207b8:	f7f2 fc62 	bl	13080 <bt_mesh_settings_init>
	}

	return 0;
}
   207bc:	4620      	mov	r0, r4
   207be:	bd38      	pop	{r3, r4, r5, pc}

000207c0 <adv_stack_dump>:
}
   207c0:	4770      	bx	lr

000207c2 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
	BT_DBG("");

	return bt_le_scan_stop();
   207c2:	f7e7 bf75 	b.w	86b0 <bt_le_scan_stop>

000207c6 <beacon_complete>:
{
   207c6:	b510      	push	{r4, lr}
   207c8:	460c      	mov	r4, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   207ca:	f002 fc37 	bl	2303c <z_impl_k_uptime_get_32>
	sub->beacon_sent = k_uptime_get_32();
   207ce:	6020      	str	r0, [r4, #0]
}
   207d0:	bd10      	pop	{r4, pc}

000207d2 <bt_mesh_net_flags>:
{
   207d2:	b508      	push	{r3, lr}
	if (sub && sub->kr_flag) {
   207d4:	b138      	cbz	r0, 207e6 <bt_mesh_net_flags+0x14>
	u8_t flags = 0x00;
   207d6:	7f82      	ldrb	r2, [r0, #30]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
   207d8:	f7eb fbba 	bl	bf50 <atomic_test_bit.constprop.8>
   207dc:	b108      	cbz	r0, 207e2 <bt_mesh_net_flags+0x10>
		flags |= BT_MESH_NET_FLAG_IVU;
   207de:	f042 0202 	orr.w	r2, r2, #2
}
   207e2:	4610      	mov	r0, r2
   207e4:	bd08      	pop	{r3, pc}
	u8_t flags = 0x00;
   207e6:	4602      	mov	r2, r0
   207e8:	e7f6      	b.n	207d8 <bt_mesh_net_flags+0x6>

000207ea <bt_mesh_net_sec_update>:
{
   207ea:	b510      	push	{r4, lr}
   207ec:	4604      	mov	r4, r0
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   207ee:	f7f0 fb5d 	bl	10eac <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   207f2:	2801      	cmp	r0, #1
   207f4:	d104      	bne.n	20800 <bt_mesh_net_sec_update+0x16>
		bt_mesh_proxy_beacon_send(sub);
   207f6:	4620      	mov	r0, r4
}
   207f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_proxy_beacon_send(sub);
   207fc:	f7f4 bae6 	b.w	14dcc <bt_mesh_proxy_beacon_send>
}
   20800:	bd10      	pop	{r4, pc}

00020802 <seg_first_send_start>:
	if (tx->cb && tx->cb->start) {
   20802:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20804:	b11b      	cbz	r3, 2080e <seg_first_send_start+0xc>
   20806:	681b      	ldr	r3, [r3, #0]
   20808:	b10b      	cbz	r3, 2080e <seg_first_send_start+0xc>
		tx->cb->start(duration, err, tx->cb_data);
   2080a:	6b52      	ldr	r2, [r2, #52]	; 0x34
   2080c:	4718      	bx	r3
}
   2080e:	4770      	bx	lr

00020810 <ack_timeout>:
{
   20810:	b538      	push	{r3, r4, r5, lr}
   20812:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   20814:	7c80      	ldrb	r0, [r0, #18]
   20816:	28ff      	cmp	r0, #255	; 0xff
   20818:	d101      	bne.n	2081e <ack_timeout+0xe>
		ttl = bt_mesh_default_ttl_get();
   2081a:	f7f0 fd7d 	bl	11318 <bt_mesh_default_ttl_get>
	to = K_MSEC(150 + (50 * ttl));
   2081e:	2396      	movs	r3, #150	; 0x96
   20820:	2432      	movs	r4, #50	; 0x32
   20822:	fb14 3400 	smlabb	r4, r4, r0, r3
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
   20826:	69a8      	ldr	r0, [r5, #24]
   20828:	f7df fcc4 	bl	1b4 <__popcountsi2>
   2082c:	7c2b      	ldrb	r3, [r5, #16]
   2082e:	f003 031f 	and.w	r3, r3, #31
   20832:	1a18      	subs	r0, r3, r0
   20834:	2364      	movs	r3, #100	; 0x64
   20836:	fb00 3303 	mla	r3, r0, r3, r3
   2083a:	1918      	adds	r0, r3, r4
}
   2083c:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   20840:	bfb8      	it	lt
   20842:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   20846:	bd38      	pop	{r3, r4, r5, pc}

00020848 <seg_tx_complete>:
{
   20848:	b510      	push	{r4, lr}
   2084a:	4604      	mov	r4, r0
   2084c:	4608      	mov	r0, r1
	if (tx->cb && tx->cb->end) {
   2084e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20850:	b11b      	cbz	r3, 2085a <seg_tx_complete+0x12>
   20852:	685b      	ldr	r3, [r3, #4]
   20854:	b10b      	cbz	r3, 2085a <seg_tx_complete+0x12>
		tx->cb->end(err, tx->cb_data);
   20856:	6b61      	ldr	r1, [r4, #52]	; 0x34
   20858:	4798      	blx	r3
	seg_tx_reset(tx);
   2085a:	4620      	mov	r0, r4
}
   2085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seg_tx_reset(tx);
   20860:	f7ec bc90 	b.w	d184 <seg_tx_reset>

00020864 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   20864:	3838      	subs	r0, #56	; 0x38
   20866:	f7ec bccf 	b.w	d208 <seg_tx_send_unacked>

0002086a <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   2086a:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   2086c:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   2086e:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   20870:	f3c0 2307 	ubfx	r3, r0, #8, #8
   20874:	700a      	strb	r2, [r1, #0]
   20876:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   20878:	70c8      	strb	r0, [r1, #3]
}
   2087a:	4770      	bx	lr

0002087c <bt_mesh_ccm_encrypt>:
{
   2087c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20880:	b099      	sub	sp, #100	; 0x64
   20882:	4607      	mov	r7, r0
   20884:	9300      	str	r3, [sp, #0]
   20886:	4690      	mov	r8, r2
	pmsg[0] = 0x01;
   20888:	2301      	movs	r3, #1
	memcpy(pmsg + 1, nonce, 13);
   2088a:	220d      	movs	r2, #13
   2088c:	f10d 0910 	add.w	r9, sp, #16
   20890:	f10d 0011 	add.w	r0, sp, #17
{
   20894:	9101      	str	r1, [sp, #4]
	pmsg[0] = 0x01;
   20896:	f88d 3010 	strb.w	r3, [sp, #16]
{
   2089a:	e9dd a522 	ldrd	sl, r5, [sp, #136]	; 0x88
	memcpy(pmsg + 1, nonce, 13);
   2089e:	f7fe feb3 	bl	1f608 <memcpy>
	dst[0] = val >> 8;
   208a2:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, pmsg, cmic);
   208a4:	aa08      	add	r2, sp, #32
   208a6:	4649      	mov	r1, r9
   208a8:	4638      	mov	r0, r7
   208aa:	f8ad 301e 	strh.w	r3, [sp, #30]
   208ae:	f001 fadb 	bl	21e68 <bt_encrypt_be>
	if (err) {
   208b2:	4604      	mov	r4, r0
   208b4:	2800      	cmp	r0, #0
   208b6:	d139      	bne.n	2092c <bt_mesh_ccm_encrypt+0xb0>
	if (mic_size == sizeof(u64_t)) {
   208b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   208ba:	2b08      	cmp	r3, #8
   208bc:	d13a      	bne.n	20934 <bt_mesh_ccm_encrypt+0xb8>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
   208be:	2d00      	cmp	r5, #0
   208c0:	bf14      	ite	ne
   208c2:	2359      	movne	r3, #89	; 0x59
   208c4:	2319      	moveq	r3, #25
	memcpy(pmsg + 1, nonce, 13);
   208c6:	220d      	movs	r2, #13
   208c8:	9901      	ldr	r1, [sp, #4]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   208ca:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(pmsg + 1, nonce, 13);
   208ce:	f10d 0011 	add.w	r0, sp, #17
   208d2:	f7fe fe99 	bl	1f608 <memcpy>
   208d6:	9b00      	ldr	r3, [sp, #0]
	sys_put_be16(msg_len, pmsg + 14);
   208d8:	f8bd 6000 	ldrh.w	r6, [sp]
	err = bt_encrypt_be(key, pmsg, Xn);
   208dc:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   208e0:	ba5b      	rev16	r3, r3
   208e2:	465a      	mov	r2, fp
   208e4:	4649      	mov	r1, r9
   208e6:	4638      	mov	r0, r7
   208e8:	f8ad 301e 	strh.w	r3, [sp, #30]
   208ec:	f001 fabc 	bl	21e68 <bt_encrypt_be>
	if (err) {
   208f0:	4604      	mov	r4, r0
   208f2:	b9d8      	cbnz	r0, 2092c <bt_mesh_ccm_encrypt+0xb0>
	if (aad_len) {
   208f4:	bb1d      	cbnz	r5, 2093e <bt_mesh_ccm_encrypt+0xc2>
	blk_cnt = (msg_len + 15) / 16;
   208f6:	9b00      	ldr	r3, [sp, #0]
   208f8:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   208fc:	330f      	adds	r3, #15
   208fe:	091b      	lsrs	r3, r3, #4
		last_blk = 16U;
   20900:	f016 060f 	ands.w	r6, r6, #15
	blk_cnt = (msg_len + 15) / 16;
   20904:	9302      	str	r3, [sp, #8]
		last_blk = 16U;
   20906:	bf08      	it	eq
   20908:	2610      	moveq	r6, #16
	for (j = 0; j < blk_cnt; j++) {
   2090a:	f108 0810 	add.w	r8, r8, #16
   2090e:	f04f 0900 	mov.w	r9, #0
			err = bt_encrypt_be(key, pmsg, Xn);
   20912:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
	for (j = 0; j < blk_cnt; j++) {
   20916:	9b02      	ldr	r3, [sp, #8]
   20918:	4599      	cmp	r9, r3
   2091a:	d15c      	bne.n	209d6 <bt_mesh_ccm_encrypt+0x15a>
	memcpy(out_msg + msg_len, mic, mic_size);
   2091c:	9b00      	ldr	r3, [sp, #0]
   2091e:	9d24      	ldr	r5, [sp, #144]	; 0x90
   20920:	9a25      	ldr	r2, [sp, #148]	; 0x94
   20922:	442b      	add	r3, r5
   20924:	a910      	add	r1, sp, #64	; 0x40
   20926:	4618      	mov	r0, r3
   20928:	f7fe fe6e 	bl	1f608 <memcpy>
}
   2092c:	4620      	mov	r0, r4
   2092e:	b019      	add	sp, #100	; 0x64
   20930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   20934:	2d00      	cmp	r5, #0
   20936:	bf14      	ite	ne
   20938:	2349      	movne	r3, #73	; 0x49
   2093a:	2309      	moveq	r3, #9
   2093c:	e7c3      	b.n	208c6 <bt_mesh_ccm_encrypt+0x4a>
			pmsg[i] = Xn[i] ^ pmsg[i];
   2093e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   20942:	f88d 3010 	strb.w	r3, [sp, #16]
   20946:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   2094a:	406b      	eors	r3, r5
   2094c:	f88d 3011 	strb.w	r3, [sp, #17]
		while (aad_len > 16) {
   20950:	2202      	movs	r2, #2
		aad_len += sizeof(u16_t);
   20952:	1cab      	adds	r3, r5, #2
		j = 0;
   20954:	4605      	mov	r5, r0
		while (aad_len > 16) {
   20956:	2b10      	cmp	r3, #16
   20958:	eb0a 0005 	add.w	r0, sl, r5
   2095c:	d81a      	bhi.n	20994 <bt_mesh_ccm_encrypt+0x118>
   2095e:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
   20962:	f10d 0c10 	add.w	ip, sp, #16
   20966:	441d      	add	r5, r3
   20968:	44aa      	add	sl, r5
   2096a:	4661      	mov	r1, ip
   2096c:	4672      	mov	r2, lr
			pmsg[i] = Xn[i] ^ aad[j];
   2096e:	f810 9b01 	ldrb.w	r9, [r0], #1
   20972:	f81e 5b01 	ldrb.w	r5, [lr], #1
		for (i = 0; i < aad_len; i++, j++) {
   20976:	4550      	cmp	r0, sl
			pmsg[i] = Xn[i] ^ aad[j];
   20978:	ea85 0509 	eor.w	r5, r5, r9
   2097c:	f80c 5b01 	strb.w	r5, [ip], #1
		for (i = 0; i < aad_len; i++, j++) {
   20980:	d1f5      	bne.n	2096e <bt_mesh_ccm_encrypt+0xf2>
			pmsg[i] = Xn[i];
   20982:	a814      	add	r0, sp, #80	; 0x50
		for (i = aad_len; i < 16; i++) {
   20984:	2b10      	cmp	r3, #16
   20986:	d11f      	bne.n	209c8 <bt_mesh_ccm_encrypt+0x14c>
		err = bt_encrypt_be(key, pmsg, Xn);
   20988:	4638      	mov	r0, r7
   2098a:	f001 fa6d 	bl	21e68 <bt_encrypt_be>
		if (err) {
   2098e:	2800      	cmp	r0, #0
   20990:	d0b1      	beq.n	208f6 <bt_mesh_ccm_encrypt+0x7a>
   20992:	e017      	b.n	209c4 <bt_mesh_ccm_encrypt+0x148>
		while (aad_len > 16) {
   20994:	4613      	mov	r3, r2
				pmsg[i] = Xn[i] ^ aad[j];
   20996:	f813 c00b 	ldrb.w	ip, [r3, fp]
   2099a:	f810 1b01 	ldrb.w	r1, [r0], #1
   2099e:	ea81 010c 	eor.w	r1, r1, ip
   209a2:	f803 1009 	strb.w	r1, [r3, r9]
				i++, j++;
   209a6:	3301      	adds	r3, #1
			} while (i < 16);
   209a8:	2b10      	cmp	r3, #16
   209aa:	d1f4      	bne.n	20996 <bt_mesh_ccm_encrypt+0x11a>
   209ac:	f1c2 0210 	rsb	r2, r2, #16
   209b0:	4415      	add	r5, r2
			err = bt_encrypt_be(key, pmsg, Xn);
   209b2:	4649      	mov	r1, r9
   209b4:	465a      	mov	r2, fp
   209b6:	4638      	mov	r0, r7
   209b8:	f001 fa56 	bl	21e68 <bt_encrypt_be>
			aad_len -= 16;
   209bc:	2302      	movs	r3, #2
			i = 0;
   209be:	2200      	movs	r2, #0
			if (err) {
   209c0:	2800      	cmp	r0, #0
   209c2:	d0c8      	beq.n	20956 <bt_mesh_ccm_encrypt+0xda>
			err = bt_encrypt_be(key, pmsg, cmsg);
   209c4:	4604      	mov	r4, r0
   209c6:	e7b1      	b.n	2092c <bt_mesh_ccm_encrypt+0xb0>
			pmsg[i] = Xn[i];
   209c8:	f10d 0c10 	add.w	ip, sp, #16
   209cc:	5c1d      	ldrb	r5, [r3, r0]
   209ce:	f80c 5003 	strb.w	r5, [ip, r3]
		for (i = aad_len; i < 16; i++) {
   209d2:	3301      	adds	r3, #1
   209d4:	e7d6      	b.n	20984 <bt_mesh_ccm_encrypt+0x108>
		if (j + 1 == blk_cnt) {
   209d6:	9b02      	ldr	r3, [sp, #8]
   209d8:	f109 0901 	add.w	r9, r9, #1
   209dc:	454b      	cmp	r3, r9
   209de:	f1a8 0510 	sub.w	r5, r8, #16
   209e2:	d155      	bne.n	20a90 <bt_mesh_ccm_encrypt+0x214>
   209e4:	4629      	mov	r1, r5
			for (i = 0; i < last_blk; i++) {
   209e6:	2300      	movs	r3, #0
   209e8:	42b3      	cmp	r3, r6
   209ea:	d342      	bcc.n	20a72 <bt_mesh_ccm_encrypt+0x1f6>
   209ec:	4633      	mov	r3, r6
			for (i = last_blk; i < 16; i++) {
   209ee:	2b10      	cmp	r3, #16
   209f0:	d148      	bne.n	20a84 <bt_mesh_ccm_encrypt+0x208>
			err = bt_encrypt_be(key, pmsg, Xn);
   209f2:	4652      	mov	r2, sl
   209f4:	a904      	add	r1, sp, #16
   209f6:	4638      	mov	r0, r7
   209f8:	9303      	str	r3, [sp, #12]
   209fa:	f001 fa35 	bl	21e68 <bt_encrypt_be>
			if (err) {
   209fe:	2800      	cmp	r0, #0
   20a00:	d1e0      	bne.n	209c4 <bt_mesh_ccm_encrypt+0x148>
   20a02:	9b03      	ldr	r3, [sp, #12]
   20a04:	f10d 0c20 	add.w	ip, sp, #32
   20a08:	4650      	mov	r0, sl
   20a0a:	a910      	add	r1, sp, #64	; 0x40
				mic[i] = cmic[i] ^ Xn[i];
   20a0c:	f81c 2b01 	ldrb.w	r2, [ip], #1
   20a10:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < sizeof(mic); i++) {
   20a14:	3b01      	subs	r3, #1
				mic[i] = cmic[i] ^ Xn[i];
   20a16:	ea82 020e 	eor.w	r2, r2, lr
   20a1a:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < sizeof(mic); i++) {
   20a1e:	d1f5      	bne.n	20a0c <bt_mesh_ccm_encrypt+0x190>
   20a20:	9303      	str	r3, [sp, #12]
			memcpy(pmsg + 1, nonce, 13);
   20a22:	220d      	movs	r2, #13
			pmsg[0] = 0x01;
   20a24:	f04f 0301 	mov.w	r3, #1
			memcpy(pmsg + 1, nonce, 13);
   20a28:	9901      	ldr	r1, [sp, #4]
			pmsg[0] = 0x01;
   20a2a:	f88d 3010 	strb.w	r3, [sp, #16]
			memcpy(pmsg + 1, nonce, 13);
   20a2e:	f10d 0011 	add.w	r0, sp, #17
   20a32:	f7fe fde9 	bl	1f608 <memcpy>
   20a36:	fa99 f299 	rev16.w	r2, r9
   20a3a:	f8ad 201e 	strh.w	r2, [sp, #30]
			err = bt_encrypt_be(key, pmsg, cmsg);
   20a3e:	a904      	add	r1, sp, #16
   20a40:	aa0c      	add	r2, sp, #48	; 0x30
   20a42:	4638      	mov	r0, r7
   20a44:	f001 fa10 	bl	21e68 <bt_encrypt_be>
			if (err) {
   20a48:	2800      	cmp	r0, #0
   20a4a:	d1bb      	bne.n	209c4 <bt_mesh_ccm_encrypt+0x148>
   20a4c:	9b03      	ldr	r3, [sp, #12]
   20a4e:	aa0c      	add	r2, sp, #48	; 0x30
   20a50:	4658      	mov	r0, fp
					msg[(j * 16) + i] ^ cmsg[i];
   20a52:	f815 1b01 	ldrb.w	r1, [r5], #1
   20a56:	f812 cb01 	ldrb.w	ip, [r2], #1
			for (i = 0; i < last_blk; i++) {
   20a5a:	3301      	adds	r3, #1
				out_msg[(j * 16) + i] =
   20a5c:	ea81 010c 	eor.w	r1, r1, ip
			for (i = 0; i < last_blk; i++) {
   20a60:	429e      	cmp	r6, r3
				out_msg[(j * 16) + i] =
   20a62:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < last_blk; i++) {
   20a66:	d8f4      	bhi.n	20a52 <bt_mesh_ccm_encrypt+0x1d6>
   20a68:	f10b 0b10 	add.w	fp, fp, #16
   20a6c:	f108 0810 	add.w	r8, r8, #16
   20a70:	e751      	b.n	20916 <bt_mesh_ccm_encrypt+0x9a>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
   20a72:	f813 000a 	ldrb.w	r0, [r3, sl]
   20a76:	f811 2b01 	ldrb.w	r2, [r1], #1
   20a7a:	4042      	eors	r2, r0
   20a7c:	a804      	add	r0, sp, #16
   20a7e:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < last_blk; i++) {
   20a80:	3301      	adds	r3, #1
   20a82:	e7b1      	b.n	209e8 <bt_mesh_ccm_encrypt+0x16c>
				pmsg[i] = Xn[i] ^ 0x00;
   20a84:	a904      	add	r1, sp, #16
   20a86:	f81a 2003 	ldrb.w	r2, [sl, r3]
   20a8a:	54ca      	strb	r2, [r1, r3]
			for (i = last_blk; i < 16; i++) {
   20a8c:	3301      	adds	r3, #1
   20a8e:	e7ae      	b.n	209ee <bt_mesh_ccm_encrypt+0x172>
   20a90:	a914      	add	r1, sp, #80	; 0x50
   20a92:	a804      	add	r0, sp, #16
		if (j + 1 == blk_cnt) {
   20a94:	462b      	mov	r3, r5
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
   20a96:	f813 cb01 	ldrb.w	ip, [r3], #1
   20a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
			for (i = 0; i < 16; i++) {
   20a9e:	4543      	cmp	r3, r8
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
   20aa0:	ea82 020c 	eor.w	r2, r2, ip
   20aa4:	f800 2b01 	strb.w	r2, [r0], #1
			for (i = 0; i < 16; i++) {
   20aa8:	d1f5      	bne.n	20a96 <bt_mesh_ccm_encrypt+0x21a>
			err = bt_encrypt_be(key, pmsg, Xn);
   20aaa:	4652      	mov	r2, sl
   20aac:	a904      	add	r1, sp, #16
   20aae:	4638      	mov	r0, r7
   20ab0:	f001 f9da 	bl	21e68 <bt_encrypt_be>
			if (err) {
   20ab4:	2800      	cmp	r0, #0
   20ab6:	d185      	bne.n	209c4 <bt_mesh_ccm_encrypt+0x148>
			pmsg[0] = 0x01;
   20ab8:	f04f 0301 	mov.w	r3, #1
			memcpy(pmsg + 1, nonce, 13);
   20abc:	220d      	movs	r2, #13
   20abe:	9901      	ldr	r1, [sp, #4]
			pmsg[0] = 0x01;
   20ac0:	f88d 3010 	strb.w	r3, [sp, #16]
			memcpy(pmsg + 1, nonce, 13);
   20ac4:	f10d 0011 	add.w	r0, sp, #17
   20ac8:	f7fe fd9e 	bl	1f608 <memcpy>
   20acc:	fa99 f399 	rev16.w	r3, r9
			err = bt_encrypt_be(key, pmsg, cmsg);
   20ad0:	aa0c      	add	r2, sp, #48	; 0x30
   20ad2:	a904      	add	r1, sp, #16
   20ad4:	4638      	mov	r0, r7
   20ad6:	f8ad 301e 	strh.w	r3, [sp, #30]
   20ada:	f001 f9c5 	bl	21e68 <bt_encrypt_be>
			if (err) {
   20ade:	2800      	cmp	r0, #0
   20ae0:	f47f af70 	bne.w	209c4 <bt_mesh_ccm_encrypt+0x148>
   20ae4:	ab0c      	add	r3, sp, #48	; 0x30
   20ae6:	4659      	mov	r1, fp
					msg[(j * 16) + i] ^ cmsg[i];
   20ae8:	f815 2b01 	ldrb.w	r2, [r5], #1
   20aec:	f813 0b01 	ldrb.w	r0, [r3], #1
			for (i = 0; i < 16; i++) {
   20af0:	4545      	cmp	r5, r8
				out_msg[(j * 16) + i] =
   20af2:	ea82 0200 	eor.w	r2, r2, r0
   20af6:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < 16; i++) {
   20afa:	d1f5      	bne.n	20ae8 <bt_mesh_ccm_encrypt+0x26c>
   20afc:	e7b4      	b.n	20a68 <bt_mesh_ccm_encrypt+0x1ec>

00020afe <bt_mesh_ccm_decrypt>:
{
   20afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b02:	b09d      	sub	sp, #116	; 0x74
   20b04:	4605      	mov	r5, r0
   20b06:	e9cd 1202 	strd	r1, r2, [sp, #8]
   20b0a:	e9dd a626 	ldrd	sl, r6, [sp, #152]	; 0x98
	if (msg_len < 1 || aad_len >= 0xff00) {
   20b0e:	461f      	mov	r7, r3
   20b10:	2b00      	cmp	r3, #0
   20b12:	f000 813c 	beq.w	20d8e <bt_mesh_ccm_decrypt+0x290>
	pmsg[0] = 0x01;
   20b16:	2301      	movs	r3, #1
	memcpy(pmsg + 1, nonce, 13);
   20b18:	220d      	movs	r2, #13
   20b1a:	f10d 0920 	add.w	r9, sp, #32
   20b1e:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	pmsg[0] = 0x01;
   20b22:	f88d 3020 	strb.w	r3, [sp, #32]
	memcpy(pmsg + 1, nonce, 13);
   20b26:	f7fe fd6f 	bl	1f608 <memcpy>
   20b2a:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, pmsg, cmic);
   20b2c:	aa0c      	add	r2, sp, #48	; 0x30
   20b2e:	4649      	mov	r1, r9
   20b30:	4628      	mov	r0, r5
   20b32:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   20b36:	f001 f997 	bl	21e68 <bt_encrypt_be>
	if (err) {
   20b3a:	2800      	cmp	r0, #0
   20b3c:	f040 8086 	bne.w	20c4c <bt_mesh_ccm_decrypt+0x14e>
	if (mic_size == sizeof(u64_t)) {
   20b40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   20b42:	2b08      	cmp	r3, #8
   20b44:	d13a      	bne.n	20bbc <bt_mesh_ccm_decrypt+0xbe>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
   20b46:	2e00      	cmp	r6, #0
   20b48:	bf14      	ite	ne
   20b4a:	2359      	movne	r3, #89	; 0x59
   20b4c:	2319      	moveq	r3, #25
	memcpy(pmsg + 1, nonce, 13);
   20b4e:	220d      	movs	r2, #13
   20b50:	9902      	ldr	r1, [sp, #8]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   20b52:	f88d 3020 	strb.w	r3, [sp, #32]
	memcpy(pmsg + 1, nonce, 13);
   20b56:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	err = bt_encrypt_be(key, pmsg, Xn);
   20b5a:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
	memcpy(pmsg + 1, nonce, 13);
   20b5e:	f7fe fd53 	bl	1f608 <memcpy>
   20b62:	ba7b      	rev16	r3, r7
	err = bt_encrypt_be(key, pmsg, Xn);
   20b64:	465a      	mov	r2, fp
   20b66:	4649      	mov	r1, r9
   20b68:	4628      	mov	r0, r5
	sys_put_be16(msg_len, pmsg + 14);
   20b6a:	b2bc      	uxth	r4, r7
   20b6c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	err = bt_encrypt_be(key, pmsg, Xn);
   20b70:	f001 f97a 	bl	21e68 <bt_encrypt_be>
	if (err) {
   20b74:	2800      	cmp	r0, #0
   20b76:	d169      	bne.n	20c4c <bt_mesh_ccm_decrypt+0x14e>
	if (aad_len) {
   20b78:	bb2e      	cbnz	r6, 20bc6 <bt_mesh_ccm_decrypt+0xc8>
	blk_cnt = (msg_len + 15) / 16;
   20b7a:	f107 030f 	add.w	r3, r7, #15
   20b7e:	9a03      	ldr	r2, [sp, #12]
   20b80:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
		last_blk = 16U;
   20b84:	f014 040f 	ands.w	r4, r4, #15
   20b88:	f3c3 130f 	ubfx	r3, r3, #4, #16
   20b8c:	bf08      	it	eq
   20b8e:	2410      	moveq	r4, #16
	for (j = 0; j < blk_cnt; j++) {
   20b90:	f102 0910 	add.w	r9, r2, #16
   20b94:	f04f 0800 	mov.w	r8, #0
   20b98:	9300      	str	r3, [sp, #0]
   20b9a:	f10d 0a20 	add.w	sl, sp, #32
   20b9e:	9b00      	ldr	r3, [sp, #0]
   20ba0:	4543      	cmp	r3, r8
   20ba2:	d85a      	bhi.n	20c5a <bt_mesh_ccm_decrypt+0x15c>
	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   20ba4:	9b03      	ldr	r3, [sp, #12]
   20ba6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   20ba8:	443b      	add	r3, r7
   20baa:	4619      	mov	r1, r3
   20bac:	a818      	add	r0, sp, #96	; 0x60
   20bae:	f7fe fd04 	bl	1f5ba <memcmp>
		return -EBADMSG;
   20bb2:	2800      	cmp	r0, #0
   20bb4:	bf18      	it	ne
   20bb6:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
   20bba:	e047      	b.n	20c4c <bt_mesh_ccm_decrypt+0x14e>
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   20bbc:	2e00      	cmp	r6, #0
   20bbe:	bf14      	ite	ne
   20bc0:	2349      	movne	r3, #73	; 0x49
   20bc2:	2309      	moveq	r3, #9
   20bc4:	e7c3      	b.n	20b4e <bt_mesh_ccm_decrypt+0x50>
			pmsg[i] = Xn[i] ^ pmsg[i];
   20bc6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   20bca:	f88d 3020 	strb.w	r3, [sp, #32]
   20bce:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   20bd2:	4073      	eors	r3, r6
		aad_len += sizeof(u16_t);
   20bd4:	1cb1      	adds	r1, r6, #2
			pmsg[i] = Xn[i] ^ pmsg[i];
   20bd6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		j = 0;
   20bda:	4680      	mov	r8, r0
		while (aad_len > 16) {
   20bdc:	2202      	movs	r2, #2
				pmsg[i] = Xn[i] ^ aad[j];
   20bde:	464e      	mov	r6, r9
		while (aad_len > 16) {
   20be0:	2910      	cmp	r1, #16
   20be2:	eb0a 0308 	add.w	r3, sl, r8
   20be6:	d81a      	bhi.n	20c1e <bt_mesh_ccm_decrypt+0x120>
   20be8:	ae14      	add	r6, sp, #80	; 0x50
   20bea:	4488      	add	r8, r1
   20bec:	f10d 0c20 	add.w	ip, sp, #32
   20bf0:	44c2      	add	sl, r8
   20bf2:	4632      	mov	r2, r6
			pmsg[i] = Xn[i] ^ aad[j];
   20bf4:	f813 eb01 	ldrb.w	lr, [r3], #1
   20bf8:	f816 0b01 	ldrb.w	r0, [r6], #1
		for (i = 0; i < aad_len; i++, j++) {
   20bfc:	4553      	cmp	r3, sl
			pmsg[i] = Xn[i] ^ aad[j];
   20bfe:	ea80 000e 	eor.w	r0, r0, lr
   20c02:	f80c 0b01 	strb.w	r0, [ip], #1
		for (i = 0; i < aad_len; i++, j++) {
   20c06:	d1f5      	bne.n	20bf4 <bt_mesh_ccm_decrypt+0xf6>
			pmsg[i] = Xn[i];
   20c08:	ab08      	add	r3, sp, #32
   20c0a:	a814      	add	r0, sp, #80	; 0x50
		for (i = aad_len; i < 16; i++) {
   20c0c:	2910      	cmp	r1, #16
   20c0e:	d120      	bne.n	20c52 <bt_mesh_ccm_decrypt+0x154>
		err = bt_encrypt_be(key, pmsg, Xn);
   20c10:	4649      	mov	r1, r9
   20c12:	4628      	mov	r0, r5
   20c14:	f001 f928 	bl	21e68 <bt_encrypt_be>
		if (err) {
   20c18:	2800      	cmp	r0, #0
   20c1a:	d0ae      	beq.n	20b7a <bt_mesh_ccm_decrypt+0x7c>
   20c1c:	e016      	b.n	20c4c <bt_mesh_ccm_decrypt+0x14e>
		while (aad_len > 16) {
   20c1e:	4611      	mov	r1, r2
				pmsg[i] = Xn[i] ^ aad[j];
   20c20:	f811 c00b 	ldrb.w	ip, [r1, fp]
   20c24:	f813 0b01 	ldrb.w	r0, [r3], #1
   20c28:	ea80 000c 	eor.w	r0, r0, ip
   20c2c:	5588      	strb	r0, [r1, r6]
				i++, j++;
   20c2e:	3101      	adds	r1, #1
			} while (i < 16);
   20c30:	2910      	cmp	r1, #16
   20c32:	d1f5      	bne.n	20c20 <bt_mesh_ccm_decrypt+0x122>
   20c34:	f1c2 0210 	rsb	r2, r2, #16
			err = bt_encrypt_be(key, pmsg, Xn);
   20c38:	4631      	mov	r1, r6
   20c3a:	4490      	add	r8, r2
   20c3c:	4628      	mov	r0, r5
   20c3e:	465a      	mov	r2, fp
   20c40:	f001 f912 	bl	21e68 <bt_encrypt_be>
			aad_len -= 16;
   20c44:	2102      	movs	r1, #2
			i = 0;
   20c46:	2200      	movs	r2, #0
			if (err) {
   20c48:	2800      	cmp	r0, #0
   20c4a:	d0c9      	beq.n	20be0 <bt_mesh_ccm_decrypt+0xe2>
}
   20c4c:	b01d      	add	sp, #116	; 0x74
   20c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pmsg[i] = Xn[i];
   20c52:	5c0e      	ldrb	r6, [r1, r0]
   20c54:	54ce      	strb	r6, [r1, r3]
		for (i = aad_len; i < 16; i++) {
   20c56:	3101      	adds	r1, #1
   20c58:	e7d8      	b.n	20c0c <bt_mesh_ccm_decrypt+0x10e>
		if (j + 1 == blk_cnt) {
   20c5a:	9b00      	ldr	r3, [sp, #0]
			memcpy(pmsg + 1, nonce, 13);
   20c5c:	9902      	ldr	r1, [sp, #8]
		if (j + 1 == blk_cnt) {
   20c5e:	f108 0801 	add.w	r8, r8, #1
   20c62:	4543      	cmp	r3, r8
			pmsg[0] = 0x01;
   20c64:	f04f 0301 	mov.w	r3, #1
   20c68:	f88d 3020 	strb.w	r3, [sp, #32]
			memcpy(pmsg + 1, nonce, 13);
   20c6c:	f04f 020d 	mov.w	r2, #13
   20c70:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		if (j + 1 == blk_cnt) {
   20c74:	d153      	bne.n	20d1e <bt_mesh_ccm_decrypt+0x220>
			memcpy(pmsg + 1, nonce, 13);
   20c76:	f7fe fcc7 	bl	1f608 <memcpy>
   20c7a:	9b00      	ldr	r3, [sp, #0]
			err = bt_encrypt_be(key, pmsg, cmsg);
   20c7c:	ae10      	add	r6, sp, #64	; 0x40
   20c7e:	ba5b      	rev16	r3, r3
   20c80:	4632      	mov	r2, r6
   20c82:	4651      	mov	r1, sl
   20c84:	4628      	mov	r0, r5
   20c86:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   20c8a:	f001 f8ed 	bl	21e68 <bt_encrypt_be>
			if (err) {
   20c8e:	2800      	cmp	r0, #0
   20c90:	d1dc      	bne.n	20c4c <bt_mesh_ccm_decrypt+0x14e>
   20c92:	f1a9 0210 	sub.w	r2, r9, #16
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   20c96:	4631      	mov	r1, r6
			for (i = 0; i < last_blk; i++) {
   20c98:	4284      	cmp	r4, r0
   20c9a:	4626      	mov	r6, r4
   20c9c:	d832      	bhi.n	20d04 <bt_mesh_ccm_decrypt+0x206>
			memcpy(out_msg + (j * 16), msg, last_blk);
   20c9e:	4622      	mov	r2, r4
   20ca0:	a904      	add	r1, sp, #16
   20ca2:	4658      	mov	r0, fp
   20ca4:	f7fe fcb0 	bl	1f608 <memcpy>
			for (i = 0; i < last_blk; i++) {
   20ca8:	ab14      	add	r3, sp, #80	; 0x50
   20caa:	9301      	str	r3, [sp, #4]
			memcpy(out_msg + (j * 16), msg, last_blk);
   20cac:	f8dd c004 	ldr.w	ip, [sp, #4]
   20cb0:	ab04      	add	r3, sp, #16
   20cb2:	a808      	add	r0, sp, #32
			for (i = 0; i < last_blk; i++) {
   20cb4:	2200      	movs	r2, #0
				pmsg[i] = Xn[i] ^ msg[i];
   20cb6:	f81c 1b01 	ldrb.w	r1, [ip], #1
   20cba:	f813 eb01 	ldrb.w	lr, [r3], #1
			for (i = 0; i < last_blk; i++) {
   20cbe:	3201      	adds	r2, #1
				pmsg[i] = Xn[i] ^ msg[i];
   20cc0:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   20cc4:	4294      	cmp	r4, r2
				pmsg[i] = Xn[i] ^ msg[i];
   20cc6:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < last_blk; i++) {
   20cca:	d8f4      	bhi.n	20cb6 <bt_mesh_ccm_decrypt+0x1b8>
   20ccc:	aa14      	add	r2, sp, #80	; 0x50
			for (i = last_blk; i < 16; i++) {
   20cce:	2e10      	cmp	r6, #16
   20cd0:	d120      	bne.n	20d14 <bt_mesh_ccm_decrypt+0x216>
			err = bt_encrypt_be(key, pmsg, Xn);
   20cd2:	4651      	mov	r1, sl
   20cd4:	4628      	mov	r0, r5
   20cd6:	f001 f8c7 	bl	21e68 <bt_encrypt_be>
			if (err) {
   20cda:	2800      	cmp	r0, #0
   20cdc:	d1b6      	bne.n	20c4c <bt_mesh_ccm_decrypt+0x14e>
   20cde:	a90c      	add	r1, sp, #48	; 0x30
   20ce0:	aa18      	add	r2, sp, #96	; 0x60
				mic[i] = cmic[i] ^ Xn[i];
   20ce2:	9b01      	ldr	r3, [sp, #4]
   20ce4:	f811 cb01 	ldrb.w	ip, [r1], #1
   20ce8:	f813 0b01 	ldrb.w	r0, [r3], #1
   20cec:	9301      	str	r3, [sp, #4]
			for (i = 0; i < sizeof(mic); i++) {
   20cee:	3e01      	subs	r6, #1
				mic[i] = cmic[i] ^ Xn[i];
   20cf0:	ea8c 0300 	eor.w	r3, ip, r0
   20cf4:	f802 3b01 	strb.w	r3, [r2], #1
			for (i = 0; i < sizeof(mic); i++) {
   20cf8:	d1f3      	bne.n	20ce2 <bt_mesh_ccm_decrypt+0x1e4>
   20cfa:	f10b 0b10 	add.w	fp, fp, #16
   20cfe:	f109 0910 	add.w	r9, r9, #16
   20d02:	e74c      	b.n	20b9e <bt_mesh_ccm_decrypt+0xa0>
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   20d04:	5c46      	ldrb	r6, [r0, r1]
   20d06:	f812 3b01 	ldrb.w	r3, [r2], #1
   20d0a:	4073      	eors	r3, r6
   20d0c:	ae04      	add	r6, sp, #16
   20d0e:	5433      	strb	r3, [r6, r0]
			for (i = 0; i < last_blk; i++) {
   20d10:	3001      	adds	r0, #1
   20d12:	e7c1      	b.n	20c98 <bt_mesh_ccm_decrypt+0x19a>
				pmsg[i] = Xn[i] ^ 0x00;
   20d14:	5d93      	ldrb	r3, [r2, r6]
   20d16:	f80a 3006 	strb.w	r3, [sl, r6]
			for (i = last_blk; i < 16; i++) {
   20d1a:	3601      	adds	r6, #1
   20d1c:	e7d7      	b.n	20cce <bt_mesh_ccm_decrypt+0x1d0>
			memcpy(pmsg + 1, nonce, 13);
   20d1e:	f7fe fc73 	bl	1f608 <memcpy>
   20d22:	fa98 f398 	rev16.w	r3, r8
			err = bt_encrypt_be(key, pmsg, cmsg);
   20d26:	aa10      	add	r2, sp, #64	; 0x40
   20d28:	4651      	mov	r1, sl
   20d2a:	4628      	mov	r0, r5
   20d2c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   20d30:	f001 f89a 	bl	21e68 <bt_encrypt_be>
			if (err) {
   20d34:	2800      	cmp	r0, #0
   20d36:	d189      	bne.n	20c4c <bt_mesh_ccm_decrypt+0x14e>
   20d38:	ae04      	add	r6, sp, #16
   20d3a:	f1a9 0210 	sub.w	r2, r9, #16
   20d3e:	ab10      	add	r3, sp, #64	; 0x40
   20d40:	4630      	mov	r0, r6
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   20d42:	f812 1b01 	ldrb.w	r1, [r2], #1
   20d46:	f813 cb01 	ldrb.w	ip, [r3], #1
			for (i = 0; i < 16; i++) {
   20d4a:	4591      	cmp	r9, r2
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   20d4c:	ea81 010c 	eor.w	r1, r1, ip
   20d50:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < 16; i++) {
   20d54:	d1f5      	bne.n	20d42 <bt_mesh_ccm_decrypt+0x244>
			memcpy(out_msg + (j * 16), msg, 16);
   20d56:	2210      	movs	r2, #16
   20d58:	eb0d 0102 	add.w	r1, sp, r2
   20d5c:	4658      	mov	r0, fp
   20d5e:	f7fe fc53 	bl	1f608 <memcpy>
			for (i = 0; i < 16; i++) {
   20d62:	aa08      	add	r2, sp, #32
   20d64:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
			memcpy(out_msg + (j * 16), msg, 16);
   20d68:	2310      	movs	r3, #16
   20d6a:	4611      	mov	r1, r2
				pmsg[i] = Xn[i] ^ msg[i];
   20d6c:	f81c 0b01 	ldrb.w	r0, [ip], #1
   20d70:	f816 eb01 	ldrb.w	lr, [r6], #1
			for (i = 0; i < 16; i++) {
   20d74:	3b01      	subs	r3, #1
				pmsg[i] = Xn[i] ^ msg[i];
   20d76:	ea80 000e 	eor.w	r0, r0, lr
   20d7a:	f802 0b01 	strb.w	r0, [r2], #1
			for (i = 0; i < 16; i++) {
   20d7e:	d1f5      	bne.n	20d6c <bt_mesh_ccm_decrypt+0x26e>
			err = bt_encrypt_be(key, pmsg, Xn);
   20d80:	aa14      	add	r2, sp, #80	; 0x50
   20d82:	4628      	mov	r0, r5
   20d84:	f001 f870 	bl	21e68 <bt_encrypt_be>
			if (err) {
   20d88:	2800      	cmp	r0, #0
   20d8a:	d0b6      	beq.n	20cfa <bt_mesh_ccm_decrypt+0x1fc>
   20d8c:	e75e      	b.n	20c4c <bt_mesh_ccm_decrypt+0x14e>
		return -EINVAL;
   20d8e:	f06f 0015 	mvn.w	r0, #21
   20d92:	e75b      	b.n	20c4c <bt_mesh_ccm_decrypt+0x14e>

00020d94 <bt_mesh_aes_cmac>:
{
   20d94:	b570      	push	{r4, r5, r6, lr}
   20d96:	b0c2      	sub	sp, #264	; 0x108
   20d98:	460d      	mov	r5, r1
   20d9a:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   20d9c:	4601      	mov	r1, r0
   20d9e:	aa16      	add	r2, sp, #88	; 0x58
   20da0:	4668      	mov	r0, sp
{
   20da2:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   20da4:	f7fd fa10 	bl	1e1c8 <tc_cmac_setup>
   20da8:	b130      	cbz	r0, 20db8 <bt_mesh_aes_cmac+0x24>
   20daa:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   20dac:	b944      	cbnz	r4, 20dc0 <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   20dae:	4669      	mov	r1, sp
   20db0:	4630      	mov	r0, r6
   20db2:	f7fd fa9f 	bl	1e2f4 <tc_cmac_final>
   20db6:	b968      	cbnz	r0, 20dd4 <bt_mesh_aes_cmac+0x40>
		return -EIO;
   20db8:	f06f 0004 	mvn.w	r0, #4
}
   20dbc:	b042      	add	sp, #264	; 0x108
   20dbe:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   20dc0:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   20dc4:	4668      	mov	r0, sp
   20dc6:	f7fd fa2a 	bl	1e21e <tc_cmac_update>
   20dca:	3508      	adds	r5, #8
   20dcc:	2800      	cmp	r0, #0
   20dce:	d0f3      	beq.n	20db8 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   20dd0:	3c01      	subs	r4, #1
   20dd2:	e7eb      	b.n	20dac <bt_mesh_aes_cmac+0x18>
	return 0;
   20dd4:	4620      	mov	r0, r4
   20dd6:	e7f1      	b.n	20dbc <bt_mesh_aes_cmac+0x28>

00020dd8 <bt_mesh_aes_cmac_one>:
{
   20dd8:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   20dda:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   20dde:	2201      	movs	r2, #1
   20de0:	4669      	mov	r1, sp
   20de2:	f7ff ffd7 	bl	20d94 <bt_mesh_aes_cmac>
}
   20de6:	b003      	add	sp, #12
   20de8:	f85d fb04 	ldr.w	pc, [sp], #4

00020dec <bt_mesh_s1>:
{
   20dec:	b530      	push	{r4, r5, lr}
   20dee:	b085      	sub	sp, #20
   20df0:	4604      	mov	r4, r0
   20df2:	460d      	mov	r5, r1
	const u8_t zero[16] = { 0 };
   20df4:	2210      	movs	r2, #16
   20df6:	2100      	movs	r1, #0
   20df8:	4668      	mov	r0, sp
   20dfa:	f7fe fc2f 	bl	1f65c <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   20dfe:	4620      	mov	r0, r4
   20e00:	f7fe fbc8 	bl	1f594 <strlen>
   20e04:	462b      	mov	r3, r5
   20e06:	4602      	mov	r2, r0
   20e08:	4621      	mov	r1, r4
   20e0a:	4668      	mov	r0, sp
   20e0c:	f7ff ffe4 	bl	20dd8 <bt_mesh_aes_cmac_one>
}
   20e10:	3000      	adds	r0, #0
   20e12:	bf18      	it	ne
   20e14:	2001      	movne	r0, #1
   20e16:	b005      	add	sp, #20
   20e18:	bd30      	pop	{r4, r5, pc}

00020e1a <bt_mesh_k1>:
{
   20e1a:	b570      	push	{r4, r5, r6, lr}
   20e1c:	9d04      	ldr	r5, [sp, #16]
   20e1e:	4616      	mov	r6, r2
   20e20:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   20e22:	460a      	mov	r2, r1
   20e24:	462b      	mov	r3, r5
   20e26:	4601      	mov	r1, r0
   20e28:	4630      	mov	r0, r6
   20e2a:	f7ff ffd5 	bl	20dd8 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   20e2e:	2800      	cmp	r0, #0
   20e30:	db0a      	blt.n	20e48 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   20e32:	4620      	mov	r0, r4
   20e34:	f7fe fbae 	bl	1f594 <strlen>
   20e38:	462b      	mov	r3, r5
   20e3a:	4602      	mov	r2, r0
   20e3c:	4621      	mov	r1, r4
   20e3e:	4628      	mov	r0, r5
}
   20e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   20e44:	f7ff bfc8 	b.w	20dd8 <bt_mesh_aes_cmac_one>
}
   20e48:	bd70      	pop	{r4, r5, r6, pc}

00020e4a <bt_mesh_net_obfuscate>:
{
   20e4a:	b570      	push	{r4, r5, r6, lr}
   20e4c:	b088      	sub	sp, #32
   20e4e:	4604      	mov	r4, r0
   20e50:	460e      	mov	r6, r1
   20e52:	4615      	mov	r5, r2
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   20e54:	2100      	movs	r1, #0
   20e56:	2210      	movs	r2, #16
   20e58:	4668      	mov	r0, sp
   20e5a:	f7fe fbff 	bl	1f65c <memset>
	sys_put_be32(iv_index, &priv_rand[5]);
   20e5e:	f10d 0105 	add.w	r1, sp, #5
   20e62:	4630      	mov	r0, r6
   20e64:	f7ff fd01 	bl	2086a <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
   20e68:	2207      	movs	r2, #7
   20e6a:	18a1      	adds	r1, r4, r2
   20e6c:	f10d 0009 	add.w	r0, sp, #9
   20e70:	f7fe fbca 	bl	1f608 <memcpy>
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   20e74:	aa04      	add	r2, sp, #16
   20e76:	4669      	mov	r1, sp
   20e78:	4628      	mov	r0, r5
   20e7a:	f000 fff5 	bl	21e68 <bt_encrypt_be>
	if (err) {
   20e7e:	b958      	cbnz	r0, 20e98 <bt_mesh_net_obfuscate+0x4e>
   20e80:	4623      	mov	r3, r4
   20e82:	aa04      	add	r2, sp, #16
   20e84:	3406      	adds	r4, #6
		pdu[1 + i] ^= tmp[i];
   20e86:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   20e8a:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
   20e8e:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
   20e90:	ea81 0105 	eor.w	r1, r1, r5
   20e94:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
   20e96:	d1f6      	bne.n	20e86 <bt_mesh_net_obfuscate+0x3c>
}
   20e98:	b008      	add	sp, #32
   20e9a:	bd70      	pop	{r4, r5, r6, pc}

00020e9c <bt_mesh_net_encrypt>:
{
   20e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20ea0:	460c      	mov	r4, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
   20ea2:	6809      	ldr	r1, [r1, #0]
   20ea4:	f891 9001 	ldrb.w	r9, [r1, #1]
   20ea8:	f891 8002 	ldrb.w	r8, [r1, #2]
   20eac:	f891 e003 	ldrb.w	lr, [r1, #3]
   20eb0:	f891 c004 	ldrb.w	ip, [r1, #4]
   20eb4:	794f      	ldrb	r7, [r1, #5]
   20eb6:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   20eba:	4605      	mov	r5, r0
   20ebc:	b089      	sub	sp, #36	; 0x24
   20ebe:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
   20ec0:	bf14      	ite	ne
   20ec2:	2608      	movne	r6, #8
   20ec4:	2604      	moveq	r6, #4
	if (proxy) {
   20ec6:	798a      	ldrb	r2, [r1, #6]
   20ec8:	b363      	cbz	r3, 20f24 <bt_mesh_net_encrypt+0x88>
	nonce[0] = 0x03;
   20eca:	2303      	movs	r3, #3
   20ecc:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   20ed0:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   20ed4:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   20ed8:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   20edc:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   20ee0:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   20ee4:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   20ee6:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   20eea:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   20eee:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   20ef2:	f7ff fcba 	bl	2086a <sys_put_be32>
	err = bt_mesh_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7,
   20ef6:	6822      	ldr	r2, [r4, #0]
   20ef8:	88a3      	ldrh	r3, [r4, #4]
   20efa:	3207      	adds	r2, #7
   20efc:	2100      	movs	r1, #0
   20efe:	e9cd 1100 	strd	r1, r1, [sp]
   20f02:	4628      	mov	r0, r5
   20f04:	e9cd 2602 	strd	r2, r6, [sp, #8]
   20f08:	3b07      	subs	r3, #7
   20f0a:	a904      	add	r1, sp, #16
   20f0c:	f7ff fcb6 	bl	2087c <bt_mesh_ccm_encrypt>
	if (!err) {
   20f10:	4605      	mov	r5, r0
   20f12:	b918      	cbnz	r0, 20f1c <bt_mesh_net_encrypt+0x80>
		net_buf_simple_add(buf, mic_len);
   20f14:	4631      	mov	r1, r6
   20f16:	4620      	mov	r0, r4
   20f18:	f001 fb37 	bl	2258a <net_buf_simple_add>
}
   20f1c:	4628      	mov	r0, r5
   20f1e:	b009      	add	sp, #36	; 0x24
   20f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   20f24:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   20f28:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   20f2c:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   20f30:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   20f34:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   20f38:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   20f3c:	f88d 2016 	strb.w	r2, [sp, #22]
   20f40:	e7d1      	b.n	20ee6 <bt_mesh_net_encrypt+0x4a>

00020f42 <bt_mesh_net_decrypt>:
{
   20f42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20f46:	460e      	mov	r6, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
   20f48:	6809      	ldr	r1, [r1, #0]
   20f4a:	f891 9001 	ldrb.w	r9, [r1, #1]
   20f4e:	f891 8002 	ldrb.w	r8, [r1, #2]
   20f52:	f891 e003 	ldrb.w	lr, [r1, #3]
   20f56:	f891 c004 	ldrb.w	ip, [r1, #4]
   20f5a:	794f      	ldrb	r7, [r1, #5]
   20f5c:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   20f60:	4605      	mov	r5, r0
   20f62:	b089      	sub	sp, #36	; 0x24
   20f64:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
   20f66:	bf14      	ite	ne
   20f68:	2408      	movne	r4, #8
   20f6a:	2404      	moveq	r4, #4
	if (proxy) {
   20f6c:	798a      	ldrb	r2, [r1, #6]
   20f6e:	b343      	cbz	r3, 20fc2 <bt_mesh_net_decrypt+0x80>
	nonce[0] = 0x03;
   20f70:	2303      	movs	r3, #3
   20f72:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   20f76:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   20f7a:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   20f7e:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   20f82:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   20f86:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   20f8a:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   20f8c:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   20f90:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   20f94:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   20f98:	f7ff fc67 	bl	2086a <sys_put_be32>
	buf->len -= mic_len;
   20f9c:	88b3      	ldrh	r3, [r6, #4]
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   20f9e:	6832      	ldr	r2, [r6, #0]
	buf->len -= mic_len;
   20fa0:	1b1b      	subs	r3, r3, r4
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   20fa2:	3207      	adds	r2, #7
	buf->len -= mic_len;
   20fa4:	b29b      	uxth	r3, r3
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   20fa6:	2100      	movs	r1, #0
	buf->len -= mic_len;
   20fa8:	80b3      	strh	r3, [r6, #4]
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   20faa:	e9cd 1100 	strd	r1, r1, [sp]
   20fae:	e9cd 2402 	strd	r2, r4, [sp, #8]
   20fb2:	3b07      	subs	r3, #7
   20fb4:	a904      	add	r1, sp, #16
   20fb6:	4628      	mov	r0, r5
   20fb8:	f7ff fda1 	bl	20afe <bt_mesh_ccm_decrypt>
}
   20fbc:	b009      	add	sp, #36	; 0x24
   20fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   20fc2:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   20fc6:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   20fca:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   20fce:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   20fd2:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   20fd6:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   20fda:	f88d 2016 	strb.w	r2, [sp, #22]
   20fde:	e7d5      	b.n	20f8c <bt_mesh_net_decrypt+0x4a>

00020fe0 <bt_mesh_app_encrypt>:
{
   20fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20fe4:	b089      	sub	sp, #36	; 0x24
   20fe6:	4681      	mov	r9, r0
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   20fe8:	9813      	ldr	r0, [sp, #76]	; 0x4c
{
   20fea:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
   20fee:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
   20ff2:	9d10      	ldr	r5, [sp, #64]	; 0x40
	if (dev_key) {
   20ff4:	2900      	cmp	r1, #0
{
   20ff6:	461c      	mov	r4, r3
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   20ff8:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
		nonce[0] = 0x01;
   20ffc:	bf14      	ite	ne
   20ffe:	2302      	movne	r3, #2
   21000:	2301      	moveq	r3, #1
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   21002:	f10d 0111 	add.w	r1, sp, #17
{
   21006:	4616      	mov	r6, r2
   21008:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   2100c:	f7ff fc2d 	bl	2086a <sys_put_be32>
   21010:	ea4f 2318 	mov.w	r3, r8, lsr #8
   21014:	f88d 3015 	strb.w	r3, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
   21018:	f10d 0119 	add.w	r1, sp, #25
   2101c:	0a3b      	lsrs	r3, r7, #8
   2101e:	9814      	ldr	r0, [sp, #80]	; 0x50
   21020:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
   21024:	f88d 8016 	strb.w	r8, [sp, #22]
   21028:	f88d 7018 	strb.w	r7, [sp, #24]
   2102c:	f7ff fc1d 	bl	2086a <sys_put_be32>
	err = bt_mesh_ccm_encrypt(key, nonce, buf->data, buf->len, ad,
   21030:	2d00      	cmp	r5, #0
   21032:	bf14      	ite	ne
   21034:	2310      	movne	r3, #16
   21036:	2300      	moveq	r3, #0
   21038:	6822      	ldr	r2, [r4, #0]
   2103a:	2e00      	cmp	r6, #0
   2103c:	bf14      	ite	ne
   2103e:	2608      	movne	r6, #8
   21040:	2604      	moveq	r6, #4
   21042:	e9cd 5300 	strd	r5, r3, [sp]
   21046:	e9cd 2602 	strd	r2, r6, [sp, #8]
   2104a:	88a3      	ldrh	r3, [r4, #4]
   2104c:	a904      	add	r1, sp, #16
   2104e:	4648      	mov	r0, r9
   21050:	f7ff fc14 	bl	2087c <bt_mesh_ccm_encrypt>
	if (!err) {
   21054:	4605      	mov	r5, r0
   21056:	b918      	cbnz	r0, 21060 <bt_mesh_app_encrypt+0x80>
		net_buf_simple_add(buf, APP_MIC_LEN(aszmic));
   21058:	4631      	mov	r1, r6
   2105a:	4620      	mov	r0, r4
   2105c:	f001 fa95 	bl	2258a <net_buf_simple_add>
}
   21060:	4628      	mov	r0, r5
   21062:	b009      	add	sp, #36	; 0x24
   21064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00021068 <bt_mesh_app_decrypt>:
{
   21068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2106c:	b088      	sub	sp, #32
   2106e:	4682      	mov	sl, r0
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   21070:	9814      	ldr	r0, [sp, #80]	; 0x50
{
   21072:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
   21076:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
	if (dev_key) {
   2107a:	2900      	cmp	r1, #0
{
   2107c:	461c      	mov	r4, r3
   2107e:	e9dd 6510 	ldrd	r6, r5, [sp, #64]	; 0x40
		nonce[0] = 0x01;
   21082:	bf14      	ite	ne
   21084:	2302      	movne	r3, #2
   21086:	2301      	moveq	r3, #1
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   21088:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
   2108c:	f10d 0111 	add.w	r1, sp, #17
{
   21090:	4617      	mov	r7, r2
   21092:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   21096:	f7ff fbe8 	bl	2086a <sys_put_be32>
	dst[0] = val >> 8;
   2109a:	ea4f 2319 	mov.w	r3, r9, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
   2109e:	f10d 0119 	add.w	r1, sp, #25
   210a2:	f88d 3015 	strb.w	r3, [sp, #21]
   210a6:	9815      	ldr	r0, [sp, #84]	; 0x54
	dst[1] = val;
   210a8:	f88d 9016 	strb.w	r9, [sp, #22]
	dst[0] = val >> 8;
   210ac:	ea4f 2318 	mov.w	r3, r8, lsr #8
   210b0:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
   210b4:	f88d 8018 	strb.w	r8, [sp, #24]
   210b8:	f7ff fbd7 	bl	2086a <sys_put_be32>
	err = bt_mesh_ccm_decrypt(key, nonce, buf->data, buf->len, ad,
   210bc:	2d00      	cmp	r5, #0
   210be:	6832      	ldr	r2, [r6, #0]
   210c0:	bf14      	ite	ne
   210c2:	2310      	movne	r3, #16
   210c4:	2300      	moveq	r3, #0
   210c6:	2f00      	cmp	r7, #0
   210c8:	bf14      	ite	ne
   210ca:	2108      	movne	r1, #8
   210cc:	2104      	moveq	r1, #4
   210ce:	e9cd 2102 	strd	r2, r1, [sp, #8]
   210d2:	e9cd 5300 	strd	r5, r3, [sp]
   210d6:	6822      	ldr	r2, [r4, #0]
   210d8:	88a3      	ldrh	r3, [r4, #4]
   210da:	a904      	add	r1, sp, #16
   210dc:	4650      	mov	r0, sl
   210de:	f7ff fd0e 	bl	20afe <bt_mesh_ccm_decrypt>
	if (!err) {
   210e2:	4605      	mov	r5, r0
   210e4:	b918      	cbnz	r0, 210ee <bt_mesh_app_decrypt+0x86>
		net_buf_simple_add(out, buf->len);
   210e6:	88a1      	ldrh	r1, [r4, #4]
   210e8:	4630      	mov	r0, r6
   210ea:	f001 fa4e 	bl	2258a <net_buf_simple_add>
}
   210ee:	4628      	mov	r0, r5
   210f0:	b008      	add	sp, #32
   210f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000210f6 <bt_mesh_prov_conf_salt>:
{
   210f6:	b530      	push	{r4, r5, lr}
   210f8:	b085      	sub	sp, #20
   210fa:	4604      	mov	r4, r0
   210fc:	460d      	mov	r5, r1
	const u8_t conf_salt_key[16] = { 0 };
   210fe:	2210      	movs	r2, #16
   21100:	2100      	movs	r1, #0
   21102:	4668      	mov	r0, sp
   21104:	f7fe faaa 	bl	1f65c <memset>
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   21108:	462b      	mov	r3, r5
   2110a:	2291      	movs	r2, #145	; 0x91
   2110c:	4621      	mov	r1, r4
   2110e:	4668      	mov	r0, sp
   21110:	f7ff fe62 	bl	20dd8 <bt_mesh_aes_cmac_one>
}
   21114:	b005      	add	sp, #20
   21116:	bd30      	pop	{r4, r5, pc}

00021118 <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const u8_t conf_key[16], const u8_t rand[16],
		      const u8_t auth[16], u8_t conf[16])
{
   21118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   2111a:	9100      	str	r1, [sp, #0]
   2111c:	2110      	movs	r1, #16
   2111e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   21122:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   21124:	2202      	movs	r2, #2
   21126:	4669      	mov	r1, sp
   21128:	f7ff fe34 	bl	20d94 <bt_mesh_aes_cmac>
}
   2112c:	b005      	add	sp, #20
   2112e:	f85d fb04 	ldr.w	pc, [sp], #4

00021132 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const u8_t key[16], u8_t nonce[13],
			 const u8_t data[25 + 8], u8_t out[25])
{
   21132:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_mesh_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   21134:	2408      	movs	r4, #8
   21136:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2113a:	2300      	movs	r3, #0
   2113c:	e9cd 3300 	strd	r3, r3, [sp]
   21140:	2319      	movs	r3, #25
   21142:	f7ff fcdc 	bl	20afe <bt_mesh_ccm_decrypt>
}
   21146:	b004      	add	sp, #16
   21148:	bd10      	pop	{r4, pc}

0002114a <bt_mesh_beacon_auth>:

int bt_mesh_beacon_auth(const u8_t beacon_key[16], u8_t flags,
			const u8_t net_id[8], u32_t iv_index,
			u8_t auth[8])
{
   2114a:	b530      	push	{r4, r5, lr}
   2114c:	b089      	sub	sp, #36	; 0x24
   2114e:	4604      	mov	r4, r0
   21150:	4610      	mov	r0, r2
   21152:	461d      	mov	r5, r3
	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
	memcpy(&msg[1], net_id, 8);
   21154:	2208      	movs	r2, #8
	msg[0] = flags;
   21156:	f88d 1000 	strb.w	r1, [sp]
	memcpy(&msg[1], net_id, 8);
   2115a:	4601      	mov	r1, r0
   2115c:	f10d 0001 	add.w	r0, sp, #1
   21160:	f7fe fa52 	bl	1f608 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   21164:	f10d 0109 	add.w	r1, sp, #9
   21168:	4628      	mov	r0, r5
   2116a:	f7ff fb7e 	bl	2086a <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   2116e:	4620      	mov	r0, r4
   21170:	ab04      	add	r3, sp, #16
   21172:	220d      	movs	r2, #13
   21174:	4669      	mov	r1, sp
   21176:	f7ff fe2f 	bl	20dd8 <bt_mesh_aes_cmac_one>
	if (!err) {
   2117a:	4604      	mov	r4, r0
   2117c:	b920      	cbnz	r0, 21188 <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   2117e:	2208      	movs	r2, #8
   21180:	a904      	add	r1, sp, #16
   21182:	980c      	ldr	r0, [sp, #48]	; 0x30
   21184:	f7fe fa40 	bl	1f608 <memcpy>
	}

	return err;
}
   21188:	4620      	mov	r0, r4
   2118a:	b009      	add	sp, #36	; 0x24
   2118c:	bd30      	pop	{r4, r5, pc}

0002118e <bt_mesh_model_find_group>:
		if (mod->groups[i] == addr) {
   2118e:	8a03      	ldrh	r3, [r0, #16]
   21190:	428b      	cmp	r3, r1
   21192:	d007      	beq.n	211a4 <bt_mesh_model_find_group+0x16>
   21194:	8a43      	ldrh	r3, [r0, #18]
   21196:	428b      	cmp	r3, r1
   21198:	d106      	bne.n	211a8 <bt_mesh_model_find_group+0x1a>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   2119a:	2301      	movs	r3, #1
			return &mod->groups[i];
   2119c:	3308      	adds	r3, #8
   2119e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   211a2:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   211a4:	2300      	movs	r3, #0
   211a6:	e7f9      	b.n	2119c <bt_mesh_model_find_group+0xe>
	return NULL;
   211a8:	2000      	movs	r0, #0
}
   211aa:	4770      	bx	lr

000211ac <bt_mesh_fixed_group_match>:
{
   211ac:	b508      	push	{r3, lr}
	switch (addr) {
   211ae:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   211b2:	4298      	cmp	r0, r3
   211b4:	d00a      	beq.n	211cc <bt_mesh_fixed_group_match+0x20>
   211b6:	d80c      	bhi.n	211d2 <bt_mesh_fixed_group_match+0x26>
   211b8:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   211bc:	4298      	cmp	r0, r3
   211be:	d10a      	bne.n	211d6 <bt_mesh_fixed_group_match+0x2a>
		return (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED);
   211c0:	f7ef fd84 	bl	10ccc <bt_mesh_friend_get>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   211c4:	1e43      	subs	r3, r0, #1
   211c6:	4258      	negs	r0, r3
   211c8:	4158      	adcs	r0, r3
}
   211ca:	bd08      	pop	{r3, pc}
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   211cc:	f7ef fd74 	bl	10cb8 <bt_mesh_relay_get>
   211d0:	e7f8      	b.n	211c4 <bt_mesh_fixed_group_match+0x18>
		return true;
   211d2:	2001      	movs	r0, #1
   211d4:	e7f9      	b.n	211ca <bt_mesh_fixed_group_match+0x1e>
		return false;
   211d6:	2000      	movs	r0, #0
   211d8:	e7f7      	b.n	211ca <bt_mesh_fixed_group_match+0x1e>

000211da <bt_mesh_model_msg_init>:
{
   211da:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   211dc:	6883      	ldr	r3, [r0, #8]
   211de:	4604      	mov	r4, r0
   211e0:	b913      	cbnz	r3, 211e8 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (u8_t *)buf + sizeof(*buf);
   211e2:	f100 030c 	add.w	r3, r0, #12
   211e6:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   211e8:	68a3      	ldr	r3, [r4, #8]
   211ea:	6023      	str	r3, [r4, #0]
	if (opcode < 0x100) {
   211ec:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0;
   211ee:	f04f 0300 	mov.w	r3, #0
   211f2:	80a3      	strh	r3, [r4, #4]
   211f4:	d805      	bhi.n	21202 <bt_mesh_model_msg_init+0x28>
		net_buf_simple_add_u8(msg, opcode);
   211f6:	4620      	mov	r0, r4
   211f8:	b2c9      	uxtb	r1, r1
}
   211fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   211fe:	f001 b9d3 	b.w	225a8 <net_buf_simple_add_u8>
	if (opcode < 0x10000) {
   21202:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   21206:	b28d      	uxth	r5, r1
   21208:	d205      	bcs.n	21216 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   2120a:	4629      	mov	r1, r5
   2120c:	4620      	mov	r0, r4
}
   2120e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   21212:	f001 b9e0 	b.w	225d6 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   21216:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2121a:	4620      	mov	r0, r4
   2121c:	f001 f9c4 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, opcode & 0xffff);
   21220:	4629      	mov	r1, r5
   21222:	4620      	mov	r0, r4
}
   21224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_le16(msg, opcode & 0xffff);
   21228:	f001 b9c6 	b.w	225b8 <net_buf_simple_add_le16>

0002122c <bt_mesh_model_send>:
{
   2122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21230:	b086      	sub	sp, #24
   21232:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   21234:	2400      	movs	r4, #0
		.sub = bt_mesh_subnet_get(ctx->net_idx),
   21236:	8808      	ldrh	r0, [r1, #0]
	struct bt_mesh_net_tx tx = {
   21238:	9405      	str	r4, [sp, #20]
{
   2123a:	460e      	mov	r6, r1
   2123c:	4617      	mov	r7, r2
   2123e:	4698      	mov	r8, r3
	struct bt_mesh_net_tx tx = {
   21240:	e9cd 4403 	strd	r4, r4, [sp, #12]
		.sub = bt_mesh_subnet_get(ctx->net_idx),
   21244:	f7ea feaa 	bl	bf9c <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   21248:	e9cd 0603 	strd	r0, r6, [sp, #12]
		.src = bt_mesh_model_elem(model)->addr,
   2124c:	4628      	mov	r0, r5
   2124e:	f7ed f9db 	bl	e608 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   21252:	8803      	ldrh	r3, [r0, #0]
   21254:	f8ad 3014 	strh.w	r3, [sp, #20]
		.xmit = bt_mesh_net_transmit_get(),
   21258:	f7ef fca6 	bl	10ba8 <bt_mesh_net_transmit_get>
	return model_send(model, &tx, false, msg, cb, cb_data);
   2125c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	struct bt_mesh_net_tx tx = {
   2125e:	f88d 0016 	strb.w	r0, [sp, #22]
	return model_send(model, &tx, false, msg, cb, cb_data);
   21262:	e9cd 8300 	strd	r8, r3, [sp]
   21266:	4622      	mov	r2, r4
   21268:	463b      	mov	r3, r7
   2126a:	a903      	add	r1, sp, #12
   2126c:	4628      	mov	r0, r5
   2126e:	f7ed f883 	bl	e378 <model_send>
}
   21272:	b006      	add	sp, #24
   21274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021278 <bt_mesh_model_find_vnd>:
{
   21278:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2127a:	7947      	ldrb	r7, [r0, #5]
{
   2127c:	4605      	mov	r5, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2127e:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
   21280:	f04f 0c1c 	mov.w	ip, #28
	for (i = 0U; i < elem->vnd_model_count; i++) {
   21284:	b2d8      	uxtb	r0, r3
   21286:	4287      	cmp	r7, r0
   21288:	d801      	bhi.n	2128e <bt_mesh_model_find_vnd+0x16>
	return NULL;
   2128a:	2000      	movs	r0, #0
}
   2128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   2128e:	fb0c f403 	mul.w	r4, ip, r3
   21292:	68ee      	ldr	r6, [r5, #12]
   21294:	1930      	adds	r0, r6, r4
   21296:	5b34      	ldrh	r4, [r6, r4]
   21298:	428c      	cmp	r4, r1
   2129a:	d102      	bne.n	212a2 <bt_mesh_model_find_vnd+0x2a>
   2129c:	8844      	ldrh	r4, [r0, #2]
   2129e:	4294      	cmp	r4, r2
   212a0:	d0f4      	beq.n	2128c <bt_mesh_model_find_vnd+0x14>
   212a2:	3301      	adds	r3, #1
   212a4:	e7ee      	b.n	21284 <bt_mesh_model_find_vnd+0xc>

000212a6 <bt_mesh_model_find>:
{
   212a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->model_count; i++) {
   212a8:	7906      	ldrb	r6, [r0, #4]
   212aa:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   212ac:	271c      	movs	r7, #28
	for (i = 0U; i < elem->model_count; i++) {
   212ae:	b2da      	uxtb	r2, r3
   212b0:	4296      	cmp	r6, r2
   212b2:	d801      	bhi.n	212b8 <bt_mesh_model_find+0x12>
	return NULL;
   212b4:	2200      	movs	r2, #0
   212b6:	e008      	b.n	212ca <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   212b8:	fb07 f403 	mul.w	r4, r7, r3
   212bc:	6885      	ldr	r5, [r0, #8]
   212be:	192a      	adds	r2, r5, r4
   212c0:	5b2c      	ldrh	r4, [r5, r4]
   212c2:	428c      	cmp	r4, r1
   212c4:	f103 0301 	add.w	r3, r3, #1
   212c8:	d1f1      	bne.n	212ae <bt_mesh_model_find+0x8>
}
   212ca:	4610      	mov	r0, r2
   212cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000212ce <key_idx_pack>:

#include <misc/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				u16_t idx1, u16_t idx2)
{
   212ce:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   212d0:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   212d4:	4605      	mov	r5, r0
   212d6:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   212d8:	b289      	uxth	r1, r1
   212da:	f001 f96d 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   212de:	f3c4 1107 	ubfx	r1, r4, #4, #8
   212e2:	4628      	mov	r0, r5
}
   212e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   212e8:	f001 b95e 	b.w	225a8 <net_buf_simple_add_u8>

000212ec <heartbeat_pub_get>:
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
   212ec:	2300      	movs	r3, #0
   212ee:	461a      	mov	r2, r3
   212f0:	f7ed be4c 	b.w	ef8c <hb_pub_send_status>

000212f4 <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  u16_t *idx1, u16_t *idx2)
{
   212f4:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   212f6:	6804      	ldr	r4, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   212f8:	7865      	ldrb	r5, [r4, #1]
   212fa:	7823      	ldrb	r3, [r4, #0]
   212fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   21300:	f3c3 030b 	ubfx	r3, r3, #0, #12
   21304:	800b      	strh	r3, [r1, #0]
   21306:	78a1      	ldrb	r1, [r4, #2]
   21308:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2130a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2130e:	091b      	lsrs	r3, r3, #4
   21310:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   21312:	2103      	movs	r1, #3
}
   21314:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
   21316:	f001 b9a5 	b.w	22664 <net_buf_simple_pull>

0002131a <mod_unbind.part.1>:
static u8_t mod_unbind(struct bt_mesh_model *model, u16_t key_idx, bool store)
   2131a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2131e:	4604      	mov	r4, r0
   21320:	460f      	mov	r7, r1
   21322:	4690      	mov	r8, r2
   21324:	f100 050c 	add.w	r5, r0, #12
   21328:	f100 0910 	add.w	r9, r0, #16
		model->keys[i] = BT_MESH_KEY_UNUSED;
   2132c:	f64f 7aff 	movw	sl, #65535	; 0xffff
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   21330:	2600      	movs	r6, #0
		if (model->keys[i] != key_idx) {
   21332:	f835 3b02 	ldrh.w	r3, [r5], #2
   21336:	42bb      	cmp	r3, r7
   21338:	d116      	bne.n	21368 <mod_unbind.part.1+0x4e>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   2133a:	f825 ac02 	strh.w	sl, [r5, #-2]
		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   2133e:	f1b8 0f00 	cmp.w	r8, #0
   21342:	d002      	beq.n	2134a <mod_unbind.part.1+0x30>
			bt_mesh_store_mod_bind(model);
   21344:	4620      	mov	r0, r4
   21346:	f000 faae 	bl	218a6 <bt_mesh_store_mod_bind>
		if (model->pub && model->pub->key == key_idx) {
   2134a:	68a3      	ldr	r3, [r4, #8]
   2134c:	b163      	cbz	r3, 21368 <mod_unbind.part.1+0x4e>
   2134e:	88db      	ldrh	r3, [r3, #6]
   21350:	42bb      	cmp	r3, r7
   21352:	d109      	bne.n	21368 <mod_unbind.part.1+0x4e>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   21354:	2300      	movs	r3, #0
   21356:	e9cd 6802 	strd	r6, r8, [sp, #8]
   2135a:	e9cd 6600 	strd	r6, r6, [sp]
   2135e:	461a      	mov	r2, r3
   21360:	4619      	mov	r1, r3
   21362:	4620      	mov	r0, r4
   21364:	f7ed fc92 	bl	ec8c <_mod_pub_set>
	for (i = 0; i < ARRAY_SIZE(model->keys); i++) {
   21368:	454d      	cmp	r5, r9
   2136a:	d1e2      	bne.n	21332 <mod_unbind.part.1+0x18>
}
   2136c:	2000      	movs	r0, #0
   2136e:	b004      	add	sp, #16
   21370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021374 <friend_get>:
	send_friend_status(model, ctx);
   21374:	f7ee b908 	b.w	f588 <send_friend_status>

00021378 <create_mod_app_status.isra.7>:
static void create_mod_app_status(struct net_buf_simple *msg,
   21378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2137c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   21380:	9d09      	ldr	r5, [sp, #36]	; 0x24
   21382:	4604      	mov	r4, r0
   21384:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   21386:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   2138a:	4690      	mov	r8, r2
   2138c:	461f      	mov	r7, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2138e:	f7ff ff24 	bl	211da <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   21392:	4649      	mov	r1, r9
   21394:	4620      	mov	r0, r4
   21396:	f001 f907 	bl	225a8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   2139a:	4641      	mov	r1, r8
   2139c:	4620      	mov	r0, r4
   2139e:	f001 f90b 	bl	225b8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   213a2:	4639      	mov	r1, r7
   213a4:	4620      	mov	r0, r4
   213a6:	f001 f907 	bl	225b8 <net_buf_simple_add_le16>
	if (vnd) {
   213aa:	b14e      	cbz	r6, 213c0 <create_mod_app_status.isra.7+0x48>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   213ac:	2104      	movs	r1, #4
   213ae:	4620      	mov	r0, r4
   213b0:	f001 f8eb 	bl	2258a <net_buf_simple_add>
   213b4:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   213b6:	4629      	mov	r1, r5
}
   213b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   213bc:	f7fe b924 	b.w	1f608 <memcpy>
   213c0:	2102      	movs	r1, #2
   213c2:	4620      	mov	r0, r4
   213c4:	f001 f8e1 	bl	2258a <net_buf_simple_add>
   213c8:	2202      	movs	r2, #2
   213ca:	e7f4      	b.n	213b6 <create_mod_app_status.isra.7+0x3e>

000213cc <get_model>:
{
   213cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   213ce:	888b      	ldrh	r3, [r1, #4]
   213d0:	2b03      	cmp	r3, #3
{
   213d2:	4605      	mov	r5, r0
   213d4:	460c      	mov	r4, r1
   213d6:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   213d8:	4608      	mov	r0, r1
	if (buf->len < 4) {
   213da:	d809      	bhi.n	213f0 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   213dc:	f001 f95a 	bl	22694 <net_buf_simple_pull_le16>
		*vnd = false;
   213e0:	2300      	movs	r3, #0
   213e2:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   213e4:	4601      	mov	r1, r0
   213e6:	4628      	mov	r0, r5
}
   213e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   213ec:	f7ff bf5b 	b.w	212a6 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   213f0:	f001 f950 	bl	22694 <net_buf_simple_pull_le16>
   213f4:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   213f6:	4620      	mov	r0, r4
   213f8:	f001 f94c 	bl	22694 <net_buf_simple_pull_le16>
		*vnd = true;
   213fc:	2301      	movs	r3, #1
   213fe:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   21400:	4602      	mov	r2, r0
   21402:	4639      	mov	r1, r7
   21404:	4628      	mov	r0, r5
}
   21406:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   2140a:	f7ff bf35 	b.w	21278 <bt_mesh_model_find_vnd>

0002140e <mod_pub_get>:
{
   2140e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21412:	4605      	mov	r5, r0
   21414:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   21416:	4610      	mov	r0, r2
{
   21418:	460e      	mov	r6, r1
   2141a:	4690      	mov	r8, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   2141c:	f001 f93a 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21420:	b203      	sxth	r3, r0
   21422:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   21424:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21426:	dc04      	bgt.n	21432 <mod_pub_get+0x24>
   21428:	f7ee fefe 	bl	10228 <mod_pub_get.part.11>
}
   2142c:	b006      	add	sp, #24
   2142e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   21432:	f8d8 7000 	ldr.w	r7, [r8]
	elem = bt_mesh_elem_find(elem_addr);
   21436:	f7ed f97f 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
   2143a:	4602      	mov	r2, r0
   2143c:	b948      	cbnz	r0, 21452 <mod_pub_get+0x44>
		vnd = (buf->len == 4);
   2143e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   21442:	1f19      	subs	r1, r3, #4
   21444:	424b      	negs	r3, r1
   21446:	414b      	adcs	r3, r1
   21448:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   2144c:	2101      	movs	r1, #1
	u16_t elem_addr, pub_addr = 0U;
   2144e:	4613      	mov	r3, r2
   21450:	e00a      	b.n	21468 <mod_pub_get+0x5a>
	mod = get_model(elem, buf, &vnd);
   21452:	f10d 0217 	add.w	r2, sp, #23
   21456:	4641      	mov	r1, r8
   21458:	f7ff ffb8 	bl	213cc <get_model>
	if (!mod) {
   2145c:	4602      	mov	r2, r0
   2145e:	b180      	cbz	r0, 21482 <mod_pub_get+0x74>
	if (!mod->pub) {
   21460:	6883      	ldr	r3, [r0, #8]
   21462:	b183      	cbz	r3, 21486 <mod_pub_get+0x78>
	pub_addr = mod->pub->addr;
   21464:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   21466:	2100      	movs	r1, #0
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   21468:	3208      	adds	r2, #8
   2146a:	9201      	str	r2, [sp, #4]
   2146c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   21470:	9200      	str	r2, [sp, #0]
   21472:	e9cd 1702 	strd	r1, r7, [sp, #8]
   21476:	4622      	mov	r2, r4
   21478:	4631      	mov	r1, r6
   2147a:	4628      	mov	r0, r5
   2147c:	f7ee f9fe 	bl	f87c <send_mod_pub_status.isra.9>
   21480:	e7d4      	b.n	2142c <mod_pub_get+0x1e>
		status = STATUS_INVALID_MODEL;
   21482:	2102      	movs	r1, #2
   21484:	e7e3      	b.n	2144e <mod_pub_get+0x40>
		status = STATUS_NVAL_PUB_PARAM;
   21486:	2107      	movs	r1, #7
   21488:	e7ee      	b.n	21468 <mod_pub_get+0x5a>

0002148a <hb_pwr2.constprop.22>:
	if (!val) {
   2148a:	b158      	cbz	r0, 214a4 <hb_pwr2.constprop.22+0x1a>
	} else if (val == 0xff || val == 0x11) {
   2148c:	28ff      	cmp	r0, #255	; 0xff
   2148e:	d007      	beq.n	214a0 <hb_pwr2.constprop.22+0x16>
   21490:	2811      	cmp	r0, #17
   21492:	d005      	beq.n	214a0 <hb_pwr2.constprop.22+0x16>
		return (1 << (val - sub));
   21494:	2301      	movs	r3, #1
   21496:	3801      	subs	r0, #1
   21498:	fa03 f000 	lsl.w	r0, r3, r0
   2149c:	b280      	uxth	r0, r0
   2149e:	4770      	bx	lr
		return 0xffff;
   214a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   214a4:	4770      	bx	lr

000214a6 <_mod_unbind>:
{
   214a6:	b570      	push	{r4, r5, r6, lr}
   214a8:	9d04      	ldr	r5, [sp, #16]
	mod_unbind(mod, data->app_idx, data->store);
   214aa:	882c      	ldrh	r4, [r5, #0]
{
   214ac:	4606      	mov	r6, r0
	if (!app_key_is_valid(key_idx)) {
   214ae:	4620      	mov	r0, r4
   214b0:	f7ed fbce 	bl	ec50 <app_key_is_valid>
   214b4:	b130      	cbz	r0, 214c4 <_mod_unbind+0x1e>
   214b6:	78aa      	ldrb	r2, [r5, #2]
   214b8:	4621      	mov	r1, r4
   214ba:	4630      	mov	r0, r6
}
   214bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   214c0:	f7ff bf2b 	b.w	2131a <mod_unbind.part.1>
   214c4:	bd70      	pop	{r4, r5, r6, pc}

000214c6 <heartbeat_sub_get>:
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   214c6:	f7ef b91d 	b.w	10704 <hb_sub_send_status.constprop.21>

000214ca <hb_send>:
{
   214ca:	b530      	push	{r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   214cc:	6984      	ldr	r4, [r0, #24]
{
   214ce:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
   214d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   214d4:	f8ad 201a 	strh.w	r2, [sp, #26]
   214d8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   214da:	f8ad 201c 	strh.w	r2, [sp, #28]
   214de:	2300      	movs	r3, #0
   214e0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   214e4:	f8cd 301e 	str.w	r3, [sp, #30]
{
   214e8:	4605      	mov	r5, r0
		.net_idx = cfg->hb_pub.net_idx,
   214ea:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
	struct bt_mesh_msg_ctx ctx = {
   214ec:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	struct bt_mesh_net_tx tx = {
   214f0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   214f4:	930b      	str	r3, [sp, #44]	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   214f6:	f8ad 0018 	strh.w	r0, [sp, #24]
		.sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx),
   214fa:	f7ea fd4f 	bl	bf9c <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   214fe:	ab06      	add	r3, sp, #24
   21500:	9009      	str	r0, [sp, #36]	; 0x24
		.src = bt_mesh_model_elem(model)->addr,
   21502:	4628      	mov	r0, r5
	struct bt_mesh_net_tx tx = {
   21504:	930a      	str	r3, [sp, #40]	; 0x28
		.src = bt_mesh_model_elem(model)->addr,
   21506:	f7ed f87f 	bl	e608 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   2150a:	8803      	ldrh	r3, [r0, #0]
   2150c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
   21510:	f7ef fb4a 	bl	10ba8 <bt_mesh_net_transmit_get>
	hb.init_ttl = cfg->hb_pub.ttl;
   21514:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   21518:	f88d 3014 	strb.w	r3, [sp, #20]
	struct bt_mesh_net_tx tx = {
   2151c:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
   21520:	f7ef fbca 	bl	10cb8 <bt_mesh_relay_get>
	u16_t feat = 0U;
   21524:	1e43      	subs	r3, r0, #1
   21526:	425a      	negs	r2, r3
   21528:	415a      	adcs	r2, r3
	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   2152a:	f7ef fcbf 	bl	10eac <bt_mesh_gatt_proxy_get>
   2152e:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
   21530:	bf08      	it	eq
   21532:	f042 0202 	orreq.w	r2, r2, #2
	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   21536:	f7ef fbc9 	bl	10ccc <bt_mesh_friend_get>
   2153a:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
   2153c:	bf08      	it	eq
   2153e:	f042 0204 	orreq.w	r2, r2, #4
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   21542:	2300      	movs	r3, #0
	hb.feat = sys_cpu_to_be16(feat);
   21544:	0212      	lsls	r2, r2, #8
   21546:	f8ad 2015 	strh.w	r2, [sp, #21]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   2154a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2154e:	9300      	str	r3, [sp, #0]
   21550:	aa05      	add	r2, sp, #20
   21552:	2303      	movs	r3, #3
   21554:	210a      	movs	r1, #10
   21556:	a809      	add	r0, sp, #36	; 0x24
   21558:	f7ec fa00 	bl	d95c <bt_mesh_ctl_send>
}
   2155c:	b00d      	add	sp, #52	; 0x34
   2155e:	bd30      	pop	{r4, r5, pc}

00021560 <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
   21560:	f7ef be3c 	b.w	111dc <send_gatt_proxy_status>

00021564 <mod_sub_del_all>:
{
   21564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21568:	4606      	mov	r6, r0
   2156a:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   2156c:	4610      	mov	r0, r2
{
   2156e:	460f      	mov	r7, r1
   21570:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   21572:	f001 f88f 	bl	22694 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   21576:	b203      	sxth	r3, r0
   21578:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2157a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2157c:	dc04      	bgt.n	21588 <mod_sub_del_all+0x24>
   2157e:	f7ee fe53 	bl	10228 <mod_pub_get.part.11>
}
   21582:	b006      	add	sp, #24
   21584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   21588:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   2158c:	f7ed f8d4 	bl	e738 <bt_mesh_elem_find>
	if (!elem) {
   21590:	b990      	cbnz	r0, 215b8 <mod_sub_del_all+0x54>
		vnd = (buf->len == 4);
   21592:	88a3      	ldrh	r3, [r4, #4]
   21594:	1f1a      	subs	r2, r3, #4
   21596:	4253      	negs	r3, r2
   21598:	4153      	adcs	r3, r2
   2159a:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   2159e:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
   215a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   215a4:	e9cd 8301 	strd	r8, r3, [sp, #4]
   215a8:	2300      	movs	r3, #0
   215aa:	9300      	str	r3, [sp, #0]
   215ac:	4639      	mov	r1, r7
   215ae:	462b      	mov	r3, r5
   215b0:	4630      	mov	r0, r6
   215b2:	f7ed fd55 	bl	f060 <send_mod_sub_status>
   215b6:	e7e4      	b.n	21582 <mod_sub_del_all+0x1e>
	mod = get_model(elem, buf, &vnd);
   215b8:	4621      	mov	r1, r4
   215ba:	f10d 0217 	add.w	r2, sp, #23
   215be:	f7ff ff05 	bl	213cc <get_model>
	if (!mod) {
   215c2:	4604      	mov	r4, r0
   215c4:	b130      	cbz	r0, 215d4 <mod_sub_del_all+0x70>
	mod_sub_list_clear(mod);
   215c6:	f7ef ff79 	bl	114bc <mod_sub_list_clear>
		bt_mesh_store_mod_sub(mod);
   215ca:	4620      	mov	r0, r4
   215cc:	f000 f972 	bl	218b4 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   215d0:	2200      	movs	r2, #0
   215d2:	e7e5      	b.n	215a0 <mod_sub_del_all+0x3c>
		status = STATUS_INVALID_MODEL;
   215d4:	2202      	movs	r2, #2
   215d6:	e7e3      	b.n	215a0 <mod_sub_del_all+0x3c>

000215d8 <mod_reset>:
{
   215d8:	b510      	push	{r4, lr}
   215da:	4604      	mov	r4, r0
	mod_sub_list_clear(mod);
   215dc:	f7ef ff6e 	bl	114bc <mod_sub_list_clear>
		bt_mesh_store_mod_sub(mod);
   215e0:	4620      	mov	r0, r4
}
   215e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_store_mod_sub(mod);
   215e6:	f000 b965 	b.w	218b4 <bt_mesh_store_mod_sub>

000215ea <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   215ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
   215ee:	b123      	cbz	r3, 215fa <attention_off+0x10>
   215f0:	695b      	ldr	r3, [r3, #20]
   215f2:	b113      	cbz	r3, 215fa <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   215f4:	f850 0c08 	ldr.w	r0, [r0, #-8]
   215f8:	4718      	bx	r3
}
   215fa:	4770      	bx	lr

000215fc <health_fault_test_unrel>:
{
   215fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   21600:	6987      	ldr	r7, [r0, #24]
{
   21602:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   21604:	4610      	mov	r0, r2
{
   21606:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   21608:	f001 f83c 	bl	22684 <net_buf_simple_pull_u8>
   2160c:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   2160e:	4628      	mov	r0, r5
   21610:	f001 f840 	bl	22694 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   21614:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   21616:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   21618:	b133      	cbz	r3, 21628 <health_fault_test_unrel+0x2c>
   2161a:	68db      	ldr	r3, [r3, #12]
   2161c:	b123      	cbz	r3, 21628 <health_fault_test_unrel+0x2c>
		srv->cb->fault_test(model, test_id, company_id);
   2161e:	4631      	mov	r1, r6
   21620:	4620      	mov	r0, r4
}
   21622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		srv->cb->fault_test(model, test_id, company_id);
   21626:	4718      	bx	r3
}
   21628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002162c <health_fault_clear_unrel>:
{
   2162c:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   2162e:	6985      	ldr	r5, [r0, #24]
{
   21630:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   21632:	4610      	mov	r0, r2
   21634:	f001 f82e 	bl	22694 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   21638:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   2163a:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   2163c:	b12b      	cbz	r3, 2164a <health_fault_clear_unrel+0x1e>
   2163e:	689b      	ldr	r3, [r3, #8]
   21640:	b11b      	cbz	r3, 2164a <health_fault_clear_unrel+0x1e>
		srv->cb->fault_clear(model, company_id);
   21642:	4620      	mov	r0, r4
}
   21644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		srv->cb->fault_clear(model, company_id);
   21648:	4718      	bx	r3
}
   2164a:	bd70      	pop	{r4, r5, r6, pc}

0002164c <health_period_get>:
	send_health_period_status(model, ctx);
   2164c:	f7f0 ba5a 	b.w	11b04 <send_health_period_status>

00021650 <health_period_set>:
{
   21650:	b538      	push	{r3, r4, r5, lr}
   21652:	4604      	mov	r4, r0
   21654:	460d      	mov	r5, r1
	health_period_set_unrel(model, ctx, buf);
   21656:	f7f0 f8ff 	bl	11858 <health_period_set_unrel>
	send_health_period_status(model, ctx);
   2165a:	4629      	mov	r1, r5
   2165c:	4620      	mov	r0, r4
}
   2165e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_health_period_status(model, ctx);
   21662:	f7f0 ba4f 	b.w	11b04 <send_health_period_status>

00021666 <attention_get>:
	send_attention_status(model, ctx);
   21666:	f7f0 ba81 	b.w	11b6c <send_attention_status>

0002166a <health_fault_clear>:
{
   2166a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2166c:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   2166e:	ab06      	add	r3, sp, #24
	struct bt_mesh_health_srv *srv = model->user_data;
   21670:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   21672:	9303      	str	r3, [sp, #12]
{
   21674:	4604      	mov	r4, r0
   21676:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   21678:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   2167a:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   2167e:	e9cd 1304 	strd	r1, r3, [sp, #16]
	company_id = net_buf_simple_pull_le16(buf);
   21682:	f001 f807 	bl	22694 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   21686:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   21688:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
   2168a:	b123      	cbz	r3, 21696 <health_fault_clear+0x2c>
   2168c:	689b      	ldr	r3, [r3, #8]
   2168e:	b113      	cbz	r3, 21696 <health_fault_clear+0x2c>
		srv->cb->fault_clear(model, company_id);
   21690:	4601      	mov	r1, r0
   21692:	4620      	mov	r0, r4
   21694:	4798      	blx	r3
	health_get_registered(model, company_id, &sdu);
   21696:	aa03      	add	r2, sp, #12
   21698:	4629      	mov	r1, r5
   2169a:	4620      	mov	r0, r4
   2169c:	f7f0 f900 	bl	118a0 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   216a0:	2300      	movs	r3, #0
   216a2:	9300      	str	r3, [sp, #0]
   216a4:	aa03      	add	r2, sp, #12
   216a6:	4631      	mov	r1, r6
   216a8:	4620      	mov	r0, r4
   216aa:	f7ff fdbf 	bl	2122c <bt_mesh_model_send>
   216ae:	b108      	cbz	r0, 216b4 <health_fault_clear+0x4a>
   216b0:	f7f0 fa9c 	bl	11bec <health_fault_clear.part.2>
}
   216b4:	b019      	add	sp, #100	; 0x64
   216b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000216b8 <health_fault_get>:
{
   216b8:	b530      	push	{r4, r5, lr}
   216ba:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   216bc:	ab06      	add	r3, sp, #24
{
   216be:	4604      	mov	r4, r0
   216c0:	460d      	mov	r5, r1
	company_id = net_buf_simple_pull_le16(buf);
   216c2:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   216c4:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   216c8:	e9cd 1304 	strd	r1, r3, [sp, #16]
   216cc:	9303      	str	r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   216ce:	f000 ffe1 	bl	22694 <net_buf_simple_pull_le16>
	health_get_registered(model, company_id, &sdu);
   216d2:	aa03      	add	r2, sp, #12
   216d4:	4601      	mov	r1, r0
   216d6:	4620      	mov	r0, r4
   216d8:	f7f0 f8e2 	bl	118a0 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   216dc:	2300      	movs	r3, #0
   216de:	9300      	str	r3, [sp, #0]
   216e0:	aa03      	add	r2, sp, #12
   216e2:	4629      	mov	r1, r5
   216e4:	4620      	mov	r0, r4
   216e6:	f7ff fda1 	bl	2122c <bt_mesh_model_send>
   216ea:	b108      	cbz	r0, 216f0 <health_fault_get+0x38>
   216ec:	f7f0 fa7e 	bl	11bec <health_fault_clear.part.2>
}
   216f0:	b019      	add	sp, #100	; 0x64
   216f2:	bd30      	pop	{r4, r5, pc}

000216f4 <attention_set_unrel>:
{
   216f4:	b510      	push	{r4, lr}
   216f6:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   216f8:	4610      	mov	r0, r2
   216fa:	f000 ffc3 	bl	22684 <net_buf_simple_pull_u8>
	bt_mesh_attention(model, time);
   216fe:	4601      	mov	r1, r0
   21700:	4620      	mov	r0, r4
}
   21702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_attention(model, time);
   21706:	f7f0 bac9 	b.w	11c9c <bt_mesh_attention>

0002170a <attention_set>:
{
   2170a:	b538      	push	{r3, r4, r5, lr}
   2170c:	4604      	mov	r4, r0
   2170e:	460d      	mov	r5, r1
	attention_set_unrel(model, ctx, buf);
   21710:	f7ff fff0 	bl	216f4 <attention_set_unrel>
	send_attention_status(model, ctx);
   21714:	4629      	mov	r1, r5
   21716:	4620      	mov	r0, r4
}
   21718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_attention_status(model, ctx);
   2171c:	f7f0 ba26 	b.w	11b6c <send_attention_status>

00021720 <vnd_mod_set>:
	return mod_set(true, argc, argv, val_ctx);
   21720:	4613      	mov	r3, r2
   21722:	460a      	mov	r2, r1
   21724:	4601      	mov	r1, r0
   21726:	2001      	movs	r0, #1
   21728:	f7f0 bd24 	b.w	12174 <mod_set>

0002172c <sig_mod_set>:
	return mod_set(false, argc, argv, val_ctx);
   2172c:	4613      	mov	r3, r2
   2172e:	460a      	mov	r2, r1
   21730:	4601      	mov	r1, r0
   21732:	2000      	movs	r0, #0
   21734:	f7f0 bd1e 	b.w	12174 <mod_set>

00021738 <bt_mesh_store_net>:
	schedule_store(BT_MESH_NET_PENDING);
   21738:	2008      	movs	r0, #8
   2173a:	f7f1 bb7d 	b.w	12e38 <schedule_store>

0002173e <bt_mesh_store_iv>:
{
   2173e:	b510      	push	{r4, lr}
   21740:	4604      	mov	r4, r0
	schedule_store(BT_MESH_IV_PENDING);
   21742:	2009      	movs	r0, #9
   21744:	f7f1 fb78 	bl	12e38 <schedule_store>
	if (!only_duration) {
   21748:	b924      	cbnz	r4, 21754 <bt_mesh_store_iv+0x16>
		schedule_store(BT_MESH_SEQ_PENDING);
   2174a:	200a      	movs	r0, #10
}
   2174c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		schedule_store(BT_MESH_SEQ_PENDING);
   21750:	f7f1 bb72 	b.w	12e38 <schedule_store>
}
   21754:	bd10      	pop	{r4, pc}

00021756 <bt_mesh_store_rpl>:
	entry->store = true;
   21756:	2301      	movs	r3, #1
   21758:	70c3      	strb	r3, [r0, #3]
	schedule_store(BT_MESH_RPL_PENDING);
   2175a:	2006      	movs	r0, #6
   2175c:	f7f1 bb6c 	b.w	12e38 <schedule_store>

00021760 <bt_mesh_store_subnet>:
{
   21760:	b513      	push	{r0, r1, r4, lr}
   21762:	4604      	mov	r4, r0
	update = key_update_find(false, sub->net_idx, &free_slot);
   21764:	8b81      	ldrh	r1, [r0, #28]
   21766:	aa01      	add	r2, sp, #4
   21768:	2000      	movs	r0, #0
   2176a:	f7f0 fadb 	bl	11d24 <key_update_find>
	if (update) {
   2176e:	b138      	cbz	r0, 21780 <bt_mesh_store_subnet+0x20>
		update->clear = 0U;
   21770:	7843      	ldrb	r3, [r0, #1]
   21772:	f36f 1386 	bfc	r3, #6, #1
   21776:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   21778:	2007      	movs	r0, #7
   2177a:	f7f1 fb5d 	bl	12e38 <schedule_store>
   2177e:	e004      	b.n	2178a <bt_mesh_store_subnet+0x2a>
	if (!free_slot) {
   21780:	9a01      	ldr	r2, [sp, #4]
   21782:	b922      	cbnz	r2, 2178e <bt_mesh_store_subnet+0x2e>
		store_net_key(sub);
   21784:	4620      	mov	r0, r4
   21786:	f7f0 fecd 	bl	12524 <store_net_key>
}
   2178a:	b002      	add	sp, #8
   2178c:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
   2178e:	8813      	ldrh	r3, [r2, #0]
   21790:	8ba1      	ldrh	r1, [r4, #28]
   21792:	f361 030b 	bfi	r3, r1, #0, #12
   21796:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   21798:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2179c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   217a0:	f043 0310 	orr.w	r3, r3, #16
   217a4:	7053      	strb	r3, [r2, #1]
   217a6:	e7e7      	b.n	21778 <bt_mesh_store_subnet+0x18>

000217a8 <bt_mesh_store_app_key>:
{
   217a8:	b513      	push	{r0, r1, r4, lr}
   217aa:	4604      	mov	r4, r0
	update = key_update_find(true, key->app_idx, &free_slot);
   217ac:	8841      	ldrh	r1, [r0, #2]
   217ae:	aa01      	add	r2, sp, #4
   217b0:	2001      	movs	r0, #1
   217b2:	f7f0 fab7 	bl	11d24 <key_update_find>
	if (update) {
   217b6:	b138      	cbz	r0, 217c8 <bt_mesh_store_app_key+0x20>
		update->clear = 0U;
   217b8:	7843      	ldrb	r3, [r0, #1]
   217ba:	f36f 1386 	bfc	r3, #6, #1
   217be:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   217c0:	2007      	movs	r0, #7
   217c2:	f7f1 fb39 	bl	12e38 <schedule_store>
   217c6:	e004      	b.n	217d2 <bt_mesh_store_app_key+0x2a>
	if (!free_slot) {
   217c8:	9a01      	ldr	r2, [sp, #4]
   217ca:	b922      	cbnz	r2, 217d6 <bt_mesh_store_app_key+0x2e>
		store_app_key(key);
   217cc:	4620      	mov	r0, r4
   217ce:	f7f0 fc91 	bl	120f4 <store_app_key>
}
   217d2:	b002      	add	sp, #8
   217d4:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
   217d6:	8813      	ldrh	r3, [r2, #0]
   217d8:	8861      	ldrh	r1, [r4, #2]
   217da:	f361 030b 	bfi	r3, r1, #0, #12
   217de:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   217e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   217e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   217e8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   217ec:	7053      	strb	r3, [r2, #1]
   217ee:	e7e7      	b.n	217c0 <bt_mesh_store_app_key+0x18>

000217f0 <bt_mesh_store_hb_pub>:
	schedule_store(BT_MESH_HB_PUB_PENDING);
   217f0:	200b      	movs	r0, #11
   217f2:	f7f1 bb21 	b.w	12e38 <schedule_store>

000217f6 <bt_mesh_store_cfg>:
	schedule_store(BT_MESH_CFG_PENDING);
   217f6:	200c      	movs	r0, #12
   217f8:	f7f1 bb1e 	b.w	12e38 <schedule_store>

000217fc <bt_mesh_clear_net>:
{
   217fc:	b508      	push	{r3, lr}
	schedule_store(BT_MESH_NET_PENDING);
   217fe:	2008      	movs	r0, #8
   21800:	f7f1 fb1a 	bl	12e38 <schedule_store>
	schedule_store(BT_MESH_IV_PENDING);
   21804:	2009      	movs	r0, #9
   21806:	f7f1 fb17 	bl	12e38 <schedule_store>
	schedule_store(BT_MESH_CFG_PENDING);
   2180a:	200c      	movs	r0, #12
}
   2180c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	schedule_store(BT_MESH_CFG_PENDING);
   21810:	f7f1 bb12 	b.w	12e38 <schedule_store>

00021814 <bt_mesh_clear_subnet>:
{
   21814:	b513      	push	{r0, r1, r4, lr}
   21816:	4604      	mov	r4, r0
	update = key_update_find(false, sub->net_idx, &free_slot);
   21818:	8b81      	ldrh	r1, [r0, #28]
   2181a:	aa01      	add	r2, sp, #4
   2181c:	2000      	movs	r0, #0
   2181e:	f7f0 fa81 	bl	11d24 <key_update_find>
	if (update) {
   21822:	b138      	cbz	r0, 21834 <bt_mesh_clear_subnet+0x20>
		update->clear = 1U;
   21824:	7843      	ldrb	r3, [r0, #1]
   21826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2182a:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   2182c:	2007      	movs	r0, #7
   2182e:	f7f1 fb03 	bl	12e38 <schedule_store>
   21832:	e004      	b.n	2183e <bt_mesh_clear_subnet+0x2a>
	if (!free_slot) {
   21834:	9a01      	ldr	r2, [sp, #4]
   21836:	8ba0      	ldrh	r0, [r4, #28]
   21838:	b91a      	cbnz	r2, 21842 <bt_mesh_clear_subnet+0x2e>
		clear_net_key(sub->net_idx);
   2183a:	f7f0 feb3 	bl	125a4 <clear_net_key>
}
   2183e:	b002      	add	sp, #8
   21840:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
   21842:	8813      	ldrh	r3, [r2, #0]
   21844:	f360 030b 	bfi	r3, r0, #0, #12
   21848:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   2184a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2184e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   21852:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   21856:	7053      	strb	r3, [r2, #1]
   21858:	e7e8      	b.n	2182c <bt_mesh_clear_subnet+0x18>

0002185a <bt_mesh_clear_app_key>:
{
   2185a:	b513      	push	{r0, r1, r4, lr}
   2185c:	4604      	mov	r4, r0
	update = key_update_find(true, key->app_idx, &free_slot);
   2185e:	8841      	ldrh	r1, [r0, #2]
   21860:	aa01      	add	r2, sp, #4
   21862:	2001      	movs	r0, #1
   21864:	f7f0 fa5e 	bl	11d24 <key_update_find>
	if (update) {
   21868:	b138      	cbz	r0, 2187a <bt_mesh_clear_app_key+0x20>
		update->clear = 1U;
   2186a:	7843      	ldrb	r3, [r0, #1]
   2186c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21870:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   21872:	2007      	movs	r0, #7
   21874:	f7f1 fae0 	bl	12e38 <schedule_store>
   21878:	e004      	b.n	21884 <bt_mesh_clear_app_key+0x2a>
	if (!free_slot) {
   2187a:	9a01      	ldr	r2, [sp, #4]
   2187c:	8860      	ldrh	r0, [r4, #2]
   2187e:	b91a      	cbnz	r2, 21888 <bt_mesh_clear_app_key+0x2e>
		clear_app_key(key->app_idx);
   21880:	f7f0 feb6 	bl	125f0 <clear_app_key>
}
   21884:	b002      	add	sp, #8
   21886:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
   21888:	8813      	ldrh	r3, [r2, #0]
   2188a:	f360 030b 	bfi	r3, r0, #0, #12
   2188e:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   21890:	f3c3 2307 	ubfx	r3, r3, #8, #8
   21894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   21898:	f043 0370 	orr.w	r3, r3, #112	; 0x70
   2189c:	7053      	strb	r3, [r2, #1]
   2189e:	e7e8      	b.n	21872 <bt_mesh_clear_app_key+0x18>

000218a0 <bt_mesh_clear_rpl>:
	schedule_store(BT_MESH_RPL_PENDING);
   218a0:	2006      	movs	r0, #6
   218a2:	f7f1 bac9 	b.w	12e38 <schedule_store>

000218a6 <bt_mesh_store_mod_bind>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   218a6:	88c3      	ldrh	r3, [r0, #6]
   218a8:	f043 0301 	orr.w	r3, r3, #1
   218ac:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   218ae:	200d      	movs	r0, #13
   218b0:	f7f1 bac2 	b.w	12e38 <schedule_store>

000218b4 <bt_mesh_store_mod_sub>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   218b4:	88c3      	ldrh	r3, [r0, #6]
   218b6:	f043 0302 	orr.w	r3, r3, #2
   218ba:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   218bc:	200d      	movs	r0, #13
   218be:	f7f1 babb 	b.w	12e38 <schedule_store>

000218c2 <bt_mesh_store_mod_pub>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   218c2:	88c3      	ldrh	r3, [r0, #6]
   218c4:	f043 0304 	orr.w	r3, r3, #4
   218c8:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   218ca:	200d      	movs	r0, #13
   218cc:	f7f1 bab4 	b.w	12e38 <schedule_store>

000218d0 <prov_capabilities>:
}
   218d0:	4770      	bx	lr

000218d2 <prov_buf_init>:
{
   218d2:	b538      	push	{r3, r4, r5, lr}
   218d4:	4604      	mov	r4, r0
   218d6:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BUF_HEADROOM);
   218d8:	2105      	movs	r1, #5
   218da:	f000 fdf1 	bl	224c0 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   218de:	4629      	mov	r1, r5
   218e0:	4620      	mov	r0, r4
}
   218e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   218e6:	f000 be5f 	b.w	225a8 <net_buf_simple_add_u8>

000218ea <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   218ea:	f3bf 8f5b 	dmb	ish
   218ee:	e850 3f00 	ldrex	r3, [r0]
   218f2:	ea43 0201 	orr.w	r2, r3, r1
   218f6:	e840 2c00 	strex	ip, r2, [r0]
   218fa:	f1bc 0f00 	cmp.w	ip, #0
   218fe:	d1f6      	bne.n	218ee <atomic_or+0x4>
   21900:	f3bf 8f5b 	dmb	ish
}
   21904:	4618      	mov	r0, r3
   21906:	4770      	bx	lr

00021908 <prov_send_fail_msg>:
{
   21908:	b510      	push	{r4, lr}
   2190a:	b086      	sub	sp, #24
	PROV_BUF(buf, 2);
   2190c:	ab01      	add	r3, sp, #4
   2190e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   21912:	4604      	mov	r4, r0
	prov_buf_init(&buf, PROV_FAILED);
   21914:	2109      	movs	r1, #9
   21916:	a803      	add	r0, sp, #12
	PROV_BUF(buf, 2);
   21918:	9303      	str	r3, [sp, #12]
   2191a:	e9cd 2304 	strd	r2, r3, [sp, #16]
	prov_buf_init(&buf, PROV_FAILED);
   2191e:	f7ff ffd8 	bl	218d2 <prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   21922:	4621      	mov	r1, r4
   21924:	a803      	add	r0, sp, #12
   21926:	f000 fe3f 	bl	225a8 <net_buf_simple_add_u8>
	prov_send(&buf);
   2192a:	a803      	add	r0, sp, #12
   2192c:	f7f1 fc3c 	bl	131a8 <prov_send>
}
   21930:	b006      	add	sp, #24
   21932:	bd10      	pop	{r4, pc}

00021934 <sys_memcpy_swap.constprop.21>:
	for (; length > 0; length--) {
   21934:	f101 0320 	add.w	r3, r1, #32
   21938:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2193a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2193e:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   21942:	428b      	cmp	r3, r1
   21944:	d1f9      	bne.n	2193a <sys_memcpy_swap.constprop.21+0x6>
}
   21946:	4770      	bx	lr

00021948 <prov_complete>:
   21948:	4770      	bx	lr

0002194a <prov_input_complete>:
   2194a:	4770      	bx	lr

0002194c <bt_prov_active>:
	return atomic_test_bit(link.flags, LINK_ACTIVE);
   2194c:	2002      	movs	r0, #2
   2194e:	f7f1 be51 	b.w	135f4 <atomic_test_bit.constprop.26>

00021952 <prov_ccc_changed>:
}
   21952:	4770      	bx	lr

00021954 <filter_add>:
{
   21954:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   21956:	b179      	cbz	r1, 21978 <filter_add+0x24>
		if (client->filter[i] == addr) {
   21958:	8883      	ldrh	r3, [r0, #4]
   2195a:	4299      	cmp	r1, r3
   2195c:	d00c      	beq.n	21978 <filter_add+0x24>
   2195e:	88c4      	ldrh	r4, [r0, #6]
   21960:	42a1      	cmp	r1, r4
   21962:	d009      	beq.n	21978 <filter_add+0x24>
   21964:	8902      	ldrh	r2, [r0, #8]
   21966:	4291      	cmp	r1, r2
   21968:	d006      	beq.n	21978 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   2196a:	b113      	cbz	r3, 21972 <filter_add+0x1e>
   2196c:	b12c      	cbz	r4, 2197a <filter_add+0x26>
   2196e:	b91a      	cbnz	r2, 21978 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   21970:	2302      	movs	r3, #2
			client->filter[i] = addr;
   21972:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   21976:	8081      	strh	r1, [r0, #4]
}
   21978:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2197a:	2301      	movs	r3, #1
   2197c:	e7f9      	b.n	21972 <filter_add+0x1e>

0002197e <proxy_ccc_changed>:
   2197e:	4770      	bx	lr

00021980 <proxy_segment_and_send>:
{
   21980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21984:	4688      	mov	r8, r1
   21986:	4614      	mov	r4, r2
   21988:	4607      	mov	r7, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
   2198a:	f7fe fead 	bl	206e8 <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   2198e:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   21990:	3803      	subs	r0, #3
   21992:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
   21994:	42ab      	cmp	r3, r5
   21996:	f008 063f 	and.w	r6, r8, #63	; 0x3f
   2199a:	d20a      	bcs.n	219b2 <proxy_segment_and_send+0x32>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   2199c:	4631      	mov	r1, r6
   2199e:	4620      	mov	r0, r4
   219a0:	f000 fe57 	bl	22652 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
   219a4:	88a2      	ldrh	r2, [r4, #4]
   219a6:	6821      	ldr	r1, [r4, #0]
   219a8:	4638      	mov	r0, r7
}
   219aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
   219ae:	f7f2 bf59 	b.w	14864 <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   219b2:	f046 0140 	orr.w	r1, r6, #64	; 0x40
   219b6:	4620      	mov	r0, r4
   219b8:	f000 fe4b 	bl	22652 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
   219bc:	462a      	mov	r2, r5
   219be:	6821      	ldr	r1, [r4, #0]
   219c0:	4638      	mov	r0, r7
   219c2:	f7f2 ff4f 	bl	14864 <proxy_send>
	net_buf_simple_pull(msg, mtu);
   219c6:	4629      	mov	r1, r5
   219c8:	4620      	mov	r0, r4
   219ca:	f000 fe4b 	bl	22664 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   219ce:	f046 0680 	orr.w	r6, r6, #128	; 0x80
	while (msg->len) {
   219d2:	88a3      	ldrh	r3, [r4, #4]
   219d4:	b163      	cbz	r3, 219f0 <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
   219d6:	3301      	adds	r3, #1
   219d8:	42ab      	cmp	r3, r5
   219da:	da0c      	bge.n	219f6 <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   219dc:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   219e0:	4620      	mov	r0, r4
   219e2:	f000 fe36 	bl	22652 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
   219e6:	88a2      	ldrh	r2, [r4, #4]
   219e8:	6821      	ldr	r1, [r4, #0]
   219ea:	4638      	mov	r0, r7
   219ec:	f7f2 ff3a 	bl	14864 <proxy_send>
}
   219f0:	2000      	movs	r0, #0
   219f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   219f6:	4631      	mov	r1, r6
   219f8:	4620      	mov	r0, r4
   219fa:	f000 fe2a 	bl	22652 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
   219fe:	6821      	ldr	r1, [r4, #0]
   21a00:	462a      	mov	r2, r5
   21a02:	4638      	mov	r0, r7
   21a04:	f7f2 ff2e 	bl	14864 <proxy_send>
		net_buf_simple_pull(msg, mtu);
   21a08:	4629      	mov	r1, r5
   21a0a:	4620      	mov	r0, r4
   21a0c:	f000 fe2a 	bl	22664 <net_buf_simple_pull>
   21a10:	e7df      	b.n	219d2 <proxy_segment_and_send+0x52>

00021a12 <beacon_send>:
{
   21a12:	b530      	push	{r4, r5, lr}
   21a14:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   21a16:	ab04      	add	r3, sp, #16
   21a18:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   21a1c:	4604      	mov	r4, r0
   21a1e:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   21a20:	a801      	add	r0, sp, #4
   21a22:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   21a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
   21a28:	9301      	str	r3, [sp, #4]
	net_buf_simple_reserve(&buf, 1);
   21a2a:	f000 fd49 	bl	224c0 <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   21a2e:	a901      	add	r1, sp, #4
   21a30:	4628      	mov	r0, r5
   21a32:	f7e9 fed5 	bl	b7e0 <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, &buf);
   21a36:	aa01      	add	r2, sp, #4
   21a38:	2101      	movs	r1, #1
   21a3a:	4620      	mov	r0, r4
   21a3c:	f7ff ffa0 	bl	21980 <proxy_segment_and_send>
}
   21a40:	b00b      	add	sp, #44	; 0x2c
   21a42:	bd30      	pop	{r4, r5, pc}

00021a44 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   21a44:	2300      	movs	r3, #0
   21a46:	f880 3020 	strb.w	r3, [r0, #32]
	sub->node_id_start = 0U;
   21a4a:	6243      	str	r3, [r0, #36]	; 0x24
}
   21a4c:	4770      	bx	lr

00021a4e <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
   21a4e:	f810 3c0e 	ldrb.w	r3, [r0, #-14]
   21a52:	2b01      	cmp	r3, #1
{
   21a54:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
   21a56:	d102      	bne.n	21a5e <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
   21a58:	3818      	subs	r0, #24
   21a5a:	f7ff bf7b 	b.w	21954 <filter_add>
	} else if (client->filter_type == BLACKLIST) {
   21a5e:	2b02      	cmp	r3, #2
   21a60:	d111      	bne.n	21a86 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   21a62:	b181      	cbz	r1, 21a86 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
   21a64:	f830 1c14 	ldrh.w	r1, [r0, #-20]
   21a68:	4291      	cmp	r1, r2
   21a6a:	d00d      	beq.n	21a88 <bt_mesh_proxy_addr_add+0x3a>
   21a6c:	f830 1c12 	ldrh.w	r1, [r0, #-18]
   21a70:	4291      	cmp	r1, r2
   21a72:	d00b      	beq.n	21a8c <bt_mesh_proxy_addr_add+0x3e>
   21a74:	f830 1c10 	ldrh.w	r1, [r0, #-16]
   21a78:	4291      	cmp	r1, r2
   21a7a:	d104      	bne.n	21a86 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   21a7c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   21a80:	2300      	movs	r3, #0
   21a82:	f820 3c14 	strh.w	r3, [r0, #-20]
}
   21a86:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   21a88:	2300      	movs	r3, #0
   21a8a:	e7f7      	b.n	21a7c <bt_mesh_proxy_addr_add+0x2e>
   21a8c:	2301      	movs	r3, #1
   21a8e:	e7f5      	b.n	21a7c <bt_mesh_proxy_addr_add+0x2e>

00021a90 <key_idx_unpack>:
{
   21a90:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   21a92:	6804      	ldr	r4, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   21a94:	7865      	ldrb	r5, [r4, #1]
   21a96:	7823      	ldrb	r3, [r4, #0]
   21a98:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   21a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   21aa0:	800b      	strh	r3, [r1, #0]
   21aa2:	78a1      	ldrb	r1, [r4, #2]
   21aa4:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   21aa6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   21aaa:	091b      	lsrs	r3, r3, #4
   21aac:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   21aae:	2103      	movs	r1, #3
}
   21ab0:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
   21ab2:	f000 bdd7 	b.w	22664 <net_buf_simple_pull>

00021ab6 <gatt_proxy_status>:
	state_status_u8(model, ctx, buf, OP_GATT_PROXY_STATUS);
   21ab6:	f248 0114 	movw	r1, #32788	; 0x8014
   21aba:	4610      	mov	r0, r2
   21abc:	f7f3 bfa2 	b.w	15a04 <state_status_u8.isra.4>

00021ac0 <friend_status>:
	state_status_u8(model, ctx, buf, OP_FRIEND_STATUS);
   21ac0:	f248 0111 	movw	r1, #32785	; 0x8011
   21ac4:	4610      	mov	r0, r2
   21ac6:	f7f3 bf9d 	b.w	15a04 <state_status_u8.isra.4>

00021aca <ttl_status>:
	state_status_u8(model, ctx, buf, OP_DEFAULT_TTL_STATUS);
   21aca:	f248 010e 	movw	r1, #32782	; 0x800e
   21ace:	4610      	mov	r0, r2
   21ad0:	f7f3 bf98 	b.w	15a04 <state_status_u8.isra.4>

00021ad4 <beacon_status>:
	state_status_u8(model, ctx, buf, OP_BEACON_STATUS);
   21ad4:	f248 010b 	movw	r1, #32779	; 0x800b
   21ad8:	4610      	mov	r0, r2
   21ada:	f7f3 bf93 	b.w	15a04 <state_status_u8.isra.4>

00021ade <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   21ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   21ae0:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   21ae2:	1dc3      	adds	r3, r0, #7
   21ae4:	f023 0303 	bic.w	r3, r3, #3
{
   21ae8:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   21aea:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   21aec:	3a01      	subs	r2, #1
   21aee:	b294      	uxth	r4, r2
{
   21af0:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   21af2:	2204      	movs	r2, #4
   21af4:	2100      	movs	r1, #0
   21af6:	fb06 0004 	mla	r0, r6, r4, r0
   21afa:	f7fd fdaf 	bl	1f65c <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   21afe:	f64f 77ff 	movw	r7, #65535	; 0xffff
   21b02:	3c01      	subs	r4, #1
   21b04:	b2a4      	uxth	r4, r4
   21b06:	42bc      	cmp	r4, r7
   21b08:	d101      	bne.n	21b0e <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   21b0a:	b003      	add	sp, #12
   21b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   21b0e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   21b12:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   21b14:	2204      	movs	r2, #4
   21b16:	1b80      	subs	r0, r0, r6
   21b18:	eb0d 0102 	add.w	r1, sp, r2
   21b1c:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   21b1e:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   21b20:	f7fd fd72 	bl	1f608 <memcpy>
   21b24:	e7ed      	b.n	21b02 <mem_init+0x24>

00021b26 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   21b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   21b28:	6804      	ldr	r4, [r0, #0]
{
   21b2a:	4606      	mov	r6, r0
	if (*mem_head) {
   21b2c:	b18c      	cbz	r4, 21b52 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   21b2e:	1de3      	adds	r3, r4, #7
   21b30:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   21b34:	2204      	movs	r2, #4
   21b36:	4621      	mov	r1, r4
   21b38:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   21b3c:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   21b3e:	f7fd fd63 	bl	1f608 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   21b42:	9b01      	ldr	r3, [sp, #4]
   21b44:	b123      	cbz	r3, 21b50 <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   21b46:	1dda      	adds	r2, r3, #7
   21b48:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   21b4c:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   21b4e:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   21b50:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   21b52:	4620      	mov	r0, r4
   21b54:	b002      	add	sp, #8
   21b56:	bd70      	pop	{r4, r5, r6, pc}

00021b58 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   21b58:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   21b5a:	680c      	ldr	r4, [r1, #0]
{
   21b5c:	4606      	mov	r6, r0
   21b5e:	460d      	mov	r5, r1
	if (*mem_head) {
   21b60:	b11c      	cbz	r4, 21b6a <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   21b62:	1de3      	adds	r3, r4, #7
   21b64:	f023 0303 	bic.w	r3, r3, #3
   21b68:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   21b6a:	2204      	movs	r2, #4
   21b6c:	4629      	mov	r1, r5
   21b6e:	4630      	mov	r0, r6
   21b70:	f7fd fd4a 	bl	1f608 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   21b74:	1df2      	adds	r2, r6, #7
   21b76:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   21b7a:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   21b7c:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   21b7e:	602e      	str	r6, [r5, #0]
}
   21b80:	bd70      	pop	{r4, r5, r6, pc}

00021b82 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   21b82:	fb02 0001 	mla	r0, r2, r1, r0
   21b86:	4770      	bx	lr

00021b88 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   21b88:	1a40      	subs	r0, r0, r1
   21b8a:	b280      	uxth	r0, r0
}
   21b8c:	fbb0 f0f2 	udiv	r0, r0, r2
   21b90:	4770      	bx	lr

00021b92 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   21b92:	b510      	push	{r4, lr}
	src += len;
   21b94:	4411      	add	r1, r2
	while (len--) {
   21b96:	3801      	subs	r0, #1
   21b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21b9c:	3a01      	subs	r2, #1
   21b9e:	b292      	uxth	r2, r2
   21ba0:	429a      	cmp	r2, r3
   21ba2:	d100      	bne.n	21ba6 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   21ba4:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   21ba6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   21baa:	f800 4f01 	strb.w	r4, [r0, #1]!
   21bae:	e7f5      	b.n	21b9c <mem_rcopy+0xa>

00021bb0 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   21bb0:	6010      	str	r0, [r2, #0]
   21bb2:	6008      	str	r0, [r1, #0]

	return link;
}
   21bb4:	4770      	bx	lr

00021bb6 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   21bb6:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   21bb8:	6814      	ldr	r4, [r2, #0]
   21bba:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   21bbc:	6814      	ldr	r4, [r2, #0]
   21bbe:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   21bc0:	6010      	str	r0, [r2, #0]

	return link;
}
   21bc2:	bd10      	pop	{r4, pc}

00021bc4 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   21bc4:	4288      	cmp	r0, r1
   21bc6:	d003      	beq.n	21bd0 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   21bc8:	b11a      	cbz	r2, 21bd2 <memq_peek+0xe>
		*mem = head->mem;
   21bca:	6843      	ldr	r3, [r0, #4]
   21bcc:	6013      	str	r3, [r2, #0]
   21bce:	4770      	bx	lr
		return NULL;
   21bd0:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   21bd2:	4770      	bx	lr

00021bd4 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   21bd4:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   21bd6:	4283      	cmp	r3, r0
   21bd8:	d009      	beq.n	21bee <memq_dequeue+0x1a>
	if (mem) {
   21bda:	b122      	cbz	r2, 21be6 <memq_dequeue+0x12>
		*mem = head->mem;
   21bdc:	6858      	ldr	r0, [r3, #4]
   21bde:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   21be0:	681a      	ldr	r2, [r3, #0]
   21be2:	600a      	str	r2, [r1, #0]

	return old_head;
   21be4:	e001      	b.n	21bea <memq_dequeue+0x16>
	if (old_head == NULL) {
   21be6:	2b00      	cmp	r3, #0
   21be8:	d1fa      	bne.n	21be0 <memq_dequeue+0xc>
}
   21bea:	4618      	mov	r0, r3
   21bec:	4770      	bx	lr
		return NULL; /* queue is empty */
   21bee:	2300      	movs	r3, #0
   21bf0:	e7fb      	b.n	21bea <memq_dequeue+0x16>

00021bf2 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   21bf2:	b510      	push	{r4, lr}
   21bf4:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
   21bf6:	2000      	movs	r0, #0

	while (octets_len--) {
   21bf8:	3901      	subs	r1, #1
   21bfa:	b2c9      	uxtb	r1, r1
   21bfc:	29ff      	cmp	r1, #255	; 0xff
   21bfe:	d100      	bne.n	21c02 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   21c00:	bd10      	pop	{r4, pc}
		bite = *octets;
   21c02:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   21c06:	2b00      	cmp	r3, #0
   21c08:	d0f6      	beq.n	21bf8 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   21c0a:	b25b      	sxtb	r3, r3
   21c0c:	1e5c      	subs	r4, r3, #1
   21c0e:	4023      	ands	r3, r4
			one_count++;
   21c10:	3001      	adds	r0, #1
			bite &= (bite - 1);
   21c12:	b2db      	uxtb	r3, r3
			one_count++;
   21c14:	b2c0      	uxtb	r0, r0
   21c16:	e7f6      	b.n	21c06 <util_ones_count_get+0x14>

00021c18 <ticker_dequeue>:
{
   21c18:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
   21c1a:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->node[0];
   21c1c:	6804      	ldr	r4, [r0, #0]
{
   21c1e:	4606      	mov	r6, r0
	previous = instance->ticker_id_head;
   21c20:	4613      	mov	r3, r2
	total = 0U;
   21c22:	2000      	movs	r0, #0
	while (current != TICKER_NULL) {
   21c24:	2aff      	cmp	r2, #255	; 0xff
   21c26:	d101      	bne.n	21c2c <ticker_dequeue+0x14>
		return 0;
   21c28:	2000      	movs	r0, #0
}
   21c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   21c2c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   21c30:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
		if (current == id) {
   21c34:	428a      	cmp	r2, r1
   21c36:	f8d7 c008 	ldr.w	ip, [r7, #8]
   21c3a:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   21c3e:	4460      	add	r0, ip
   21c40:	d002      	beq.n	21c48 <ticker_dequeue+0x30>
   21c42:	4613      	mov	r3, r2
   21c44:	462a      	mov	r2, r5
   21c46:	e7ed      	b.n	21c24 <ticker_dequeue+0xc>
	if (previous == current) {
   21c48:	4293      	cmp	r3, r2
   21c4a:	d100      	bne.n	21c4e <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   21c4c:	7775      	strb	r5, [r6, #29]
	node[previous].next = ticker_current->next;
   21c4e:	b21b      	sxth	r3, r3
   21c50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   21c54:	f804 5033 	strb.w	r5, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
   21c58:	783b      	ldrb	r3, [r7, #0]
   21c5a:	2bff      	cmp	r3, #255	; 0xff
   21c5c:	d0e5      	beq.n	21c2a <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
   21c5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   21c62:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   21c66:	68a3      	ldr	r3, [r4, #8]
   21c68:	4463      	add	r3, ip
   21c6a:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
   21c6c:	e7dd      	b.n	21c2a <ticker_dequeue+0x12>

00021c6e <ticks_to_expire_prep>:
{
   21c6e:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   21c70:	1a55      	subs	r5, r2, r1
   21c72:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   21c76:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   21c78:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   21c7a:	d109      	bne.n	21c90 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   21c7c:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   21c80:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   21c82:	42a2      	cmp	r2, r4
   21c84:	d90e      	bls.n	21ca4 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   21c86:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   21c88:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   21c8a:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   21c8c:	6144      	str	r4, [r0, #20]
}
   21c8e:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   21c90:	1a8a      	subs	r2, r1, r2
   21c92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   21c96:	4293      	cmp	r3, r2
   21c98:	d901      	bls.n	21c9e <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   21c9a:	1a9a      	subs	r2, r3, r2
   21c9c:	e7f1      	b.n	21c82 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   21c9e:	4422      	add	r2, r4
   21ca0:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   21ca2:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   21ca4:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   21ca6:	2200      	movs	r2, #0
   21ca8:	e7ef      	b.n	21c8a <ticks_to_expire_prep+0x1c>

00021caa <ticker_job_op_cb>:
{
   21caa:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   21cac:	2200      	movs	r2, #0
   21cae:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   21cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   21cb2:	6259      	str	r1, [r3, #36]	; 0x24
{
   21cb4:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   21cb6:	b10a      	cbz	r2, 21cbc <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   21cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   21cba:	4710      	bx	r2
}
   21cbc:	4770      	bx	lr

00021cbe <ticker_worker>:
{
   21cbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
   21cc2:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
   21cc4:	2301      	movs	r3, #1
{
   21cc6:	4604      	mov	r4, r0
	instance->worker_trigger = 1U;
   21cc8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   21cca:	b91d      	cbnz	r5, 21cd4 <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
   21ccc:	7f43      	ldrb	r3, [r0, #29]
   21cce:	2bff      	cmp	r3, #255	; 0xff
   21cd0:	d102      	bne.n	21cd8 <ticker_worker+0x1a>
		instance->worker_trigger = 0U;
   21cd2:	77c5      	strb	r5, [r0, #31]
}
   21cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   21cd8:	f7f8 fa1c 	bl	1a114 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   21cdc:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
   21cde:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
   21ce0:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   21ce4:	1bc7      	subs	r7, r0, r7
   21ce6:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
   21cea:	2eff      	cmp	r6, #255	; 0xff
   21cec:	d006      	beq.n	21cfc <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
   21cee:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   21cf2:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   21cf6:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   21cf8:	429f      	cmp	r7, r3
   21cfa:	d218      	bcs.n	21d2e <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   21cfc:	7ae2      	ldrb	r2, [r4, #11]
   21cfe:	7aa3      	ldrb	r3, [r4, #10]
   21d00:	4293      	cmp	r3, r2
   21d02:	d105      	bne.n	21d10 <ticker_worker+0x52>
		last = instance->ticks_elapsed_last + 1;
   21d04:	3301      	adds	r3, #1
   21d06:	b2db      	uxtb	r3, r3
			last = 0U;
   21d08:	2b02      	cmp	r3, #2
   21d0a:	bf08      	it	eq
   21d0c:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
   21d0e:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   21d10:	7ae3      	ldrb	r3, [r4, #11]
   21d12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   21d16:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   21d18:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   21d1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0U;
   21d1c:	2300      	movs	r3, #0
   21d1e:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   21d20:	46ac      	mov	ip, r5
   21d22:	4623      	mov	r3, r4
   21d24:	2104      	movs	r1, #4
   21d26:	2003      	movs	r0, #3
}
   21d28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   21d2c:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
   21d2e:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   21d30:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   21d32:	788a      	ldrb	r2, [r1, #2]
   21d34:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
   21d36:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   21d3a:	1a9b      	subs	r3, r3, r2
   21d3c:	b2db      	uxtb	r3, r3
   21d3e:	2b01      	cmp	r3, #1
   21d40:	d1d3      	bne.n	21cea <ticker_worker+0x2c>
		if (ticker->timeout_func) {
   21d42:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
   21d46:	3a01      	subs	r2, #1
   21d48:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   21d4a:	f1b9 0f00 	cmp.w	r9, #0
   21d4e:	d0cc      	beq.n	21cea <ticker_worker+0x2c>
					   ticks_expired -
   21d50:	6948      	ldr	r0, [r1, #20]
   21d52:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   21d54:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
   21d56:	1a28      	subs	r0, r5, r0
   21d58:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   21d5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   21d5e:	690b      	ldr	r3, [r1, #16]
   21d60:	6a49      	ldr	r1, [r1, #36]	; 0x24
   21d62:	47c8      	blx	r9
   21d64:	e7c1      	b.n	21cea <ticker_worker+0x2c>

00021d66 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   21d66:	f7f8 b9d5 	b.w	1a114 <cntr_cnt_get>

00021d6a <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   21d6a:	1a40      	subs	r0, r0, r1
}
   21d6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   21d70:	4770      	bx	lr

00021d72 <ll_tx_pwr_get>:
void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than default when dynamic
	 *       updates is implemented.
	 */
	*min = RADIO_TXP_DEFAULT;
   21d72:	2300      	movs	r3, #0
   21d74:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   21d76:	700b      	strb	r3, [r1, #0]
}
   21d78:	4770      	bx	lr

00021d7a <sys_put_le32>:
	dst[1] = val >> 8;
   21d7a:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   21d7e:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   21d80:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   21d82:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   21d84:	0a00      	lsrs	r0, r0, #8
   21d86:	704b      	strb	r3, [r1, #1]
   21d88:	70c8      	strb	r0, [r1, #3]
}
   21d8a:	4770      	bx	lr

00021d8c <evt_create>:
{
   21d8c:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   21d8e:	3008      	adds	r0, #8
{
   21d90:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   21d92:	2102      	movs	r1, #2
{
   21d94:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   21d96:	f000 fbf8 	bl	2258a <net_buf_simple_add>
	hdr->evt = evt;
   21d9a:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   21d9c:	7044      	strb	r4, [r0, #1]
}
   21d9e:	bd38      	pop	{r3, r4, r5, pc}

00021da0 <meta_evt>:
{
   21da0:	b570      	push	{r4, r5, r6, lr}
   21da2:	4604      	mov	r4, r0
   21da4:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   21da6:	3201      	adds	r2, #1
{
   21da8:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   21daa:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   21dac:	b2d2      	uxtb	r2, r2
   21dae:	213e      	movs	r1, #62	; 0x3e
   21db0:	f7ff ffec 	bl	21d8c <evt_create>
	me = net_buf_add(buf, sizeof(*me));
   21db4:	2101      	movs	r1, #1
   21db6:	4620      	mov	r0, r4
   21db8:	f000 fbe7 	bl	2258a <net_buf_simple_add>
	me->subevent = subevt;
   21dbc:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
   21dbe:	4629      	mov	r1, r5
   21dc0:	4620      	mov	r0, r4
}
   21dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   21dc6:	f000 bbe0 	b.w	2258a <net_buf_simple_add>

00021dca <sys_get_le64>:
{
   21dca:	4603      	mov	r3, r0
}
   21dcc:	6800      	ldr	r0, [r0, #0]
   21dce:	6859      	ldr	r1, [r3, #4]
   21dd0:	4770      	bx	lr

00021dd2 <hci_num_cmplt_encode>:
{
   21dd2:	b570      	push	{r4, r5, r6, lr}
   21dd4:	4606      	mov	r6, r0
   21dd6:	460d      	mov	r5, r1
   21dd8:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   21dda:	2113      	movs	r1, #19
   21ddc:	2205      	movs	r2, #5
   21dde:	f7ff ffd5 	bl	21d8c <evt_create>
	ep = net_buf_add(buf, len);
   21de2:	2105      	movs	r1, #5
   21de4:	f106 0008 	add.w	r0, r6, #8
   21de8:	f000 fbcf 	bl	2258a <net_buf_simple_add>
	ep->num_handles = num_handles;
   21dec:	2301      	movs	r3, #1
   21dee:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   21df0:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   21df4:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   21df8:	bd70      	pop	{r4, r5, r6, pc}

00021dfa <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   21dfa:	7903      	ldrb	r3, [r0, #4]
   21dfc:	2b02      	cmp	r3, #2
   21dfe:	d00f      	beq.n	21e20 <hci_get_class+0x26>
		switch (node_rx->hdr.type) {
   21e00:	3b04      	subs	r3, #4
   21e02:	2b06      	cmp	r3, #6
   21e04:	d809      	bhi.n	21e1a <hci_get_class+0x20>
   21e06:	e8df f003 	tbb	[pc, r3]
   21e0a:	0813      	.short	0x0813
   21e0c:	06040808 	.word	0x06040808
   21e10:	06          	.byte	0x06
   21e11:	00          	.byte	0x00
			return HCI_CLASS_EVT_REQUIRED;
   21e12:	2000      	movs	r0, #0
   21e14:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
   21e16:	2002      	movs	r0, #2
   21e18:	4770      	bx	lr
			return -1;
   21e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21e1e:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   21e20:	7a03      	ldrb	r3, [r0, #8]
   21e22:	f003 0303 	and.w	r3, r3, #3
   21e26:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   21e28:	bf0c      	ite	eq
   21e2a:	2002      	moveq	r0, #2
   21e2c:	2003      	movne	r0, #3
   21e2e:	4770      	bx	lr
			return HCI_CLASS_EVT_DISCARDABLE;
   21e30:	2001      	movs	r0, #1
}
   21e32:	4770      	bx	lr

00021e34 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
   21e34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21e36:	460c      	mov	r4, r1
   21e38:	1846      	adds	r6, r0, r1
   21e3a:	1b35      	subs	r5, r6, r4
	u8_t *buf8 = buf;

	while (len) {
   21e3c:	b18c      	cbz	r4, 21e62 <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
   21e3e:	f7e2 fb2b 	bl	4498 <sys_rand32_get>

		if (len >= sizeof(v)) {
   21e42:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
   21e44:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
   21e46:	d907      	bls.n	21e58 <bt_rand+0x24>
			memcpy(buf8, &v, sizeof(v));
   21e48:	2204      	movs	r2, #4
   21e4a:	eb0d 0102 	add.w	r1, sp, r2
   21e4e:	4628      	mov	r0, r5
   21e50:	f7fd fbda 	bl	1f608 <memcpy>

			buf8 += sizeof(v);
			len -= sizeof(v);
   21e54:	3c04      	subs	r4, #4
   21e56:	e7f0      	b.n	21e3a <bt_rand+0x6>
		} else {
			memcpy(buf8, &v, len);
   21e58:	4622      	mov	r2, r4
   21e5a:	a901      	add	r1, sp, #4
   21e5c:	4628      	mov	r0, r5
   21e5e:	f7fd fbd3 	bl	1f608 <memcpy>
			break;
		}
	}

	return 0;
}
   21e62:	2000      	movs	r0, #0
   21e64:	b002      	add	sp, #8
   21e66:	bd70      	pop	{r4, r5, r6, pc}

00021e68 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   21e68:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   21e6a:	f000 fa8f 	bl	2238c <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   21e6e:	2000      	movs	r0, #0
   21e70:	bd08      	pop	{r3, pc}

00021e72 <cpu_sleep>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline void cpu_sleep(void)
{
	__WFE();
   21e72:	bf20      	wfe
	__SEV();
   21e74:	bf40      	sev
	__WFE();
   21e76:	bf20      	wfe
}
   21e78:	4770      	bx	lr

00021e7a <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   21e7a:	6008      	str	r0, [r1, #0]
}
   21e7c:	4770      	bx	lr

00021e7e <prepare_reduced>:
	if (status == 0) {
   21e7e:	b918      	cbnz	r0, 21e88 <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= XON_BITMASK;
   21e80:	680b      	ldr	r3, [r1, #0]
   21e82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   21e86:	600b      	str	r3, [r1, #0]
}
   21e88:	4770      	bx	lr

00021e8a <prepare_normal>:
	if (status == 0) {
   21e8a:	b918      	cbnz	r0, 21e94 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
   21e8c:	680b      	ldr	r3, [r1, #0]
   21e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   21e92:	600b      	str	r3, [r1, #0]
}
   21e94:	4770      	bx	lr

00021e96 <isr_adv_ci_adva_check>:
{
   21e96:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   21e98:	7804      	ldrb	r4, [r0, #0]
   21e9a:	780a      	ldrb	r2, [r1, #0]
   21e9c:	f3c4 1380 	ubfx	r3, r4, #6, #1
   21ea0:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   21ea4:	d119      	bne.n	21eda <isr_adv_ci_adva_check+0x44>
   21ea6:	f004 040f 	and.w	r4, r4, #15
   21eaa:	2c01      	cmp	r4, #1
   21eac:	f100 0502 	add.w	r5, r0, #2
   21eb0:	f101 0608 	add.w	r6, r1, #8
   21eb4:	d008      	beq.n	21ec8 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   21eb6:	2206      	movs	r2, #6
   21eb8:	4631      	mov	r1, r6
   21eba:	4628      	mov	r0, r5
   21ebc:	f7fd fb7d 	bl	1f5ba <memcmp>
			 BDADDR_SIZE)) ||
   21ec0:	fab0 f080 	clz	r0, r0
   21ec4:	0940      	lsrs	r0, r0, #5
}
   21ec6:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   21ec8:	2206      	movs	r2, #6
   21eca:	4631      	mov	r1, r6
   21ecc:	4628      	mov	r0, r5
   21ece:	f7fd fb74 	bl	1f5ba <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   21ed2:	2800      	cmp	r0, #0
   21ed4:	d1ef      	bne.n	21eb6 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   21ed6:	4620      	mov	r0, r4
   21ed8:	e7f5      	b.n	21ec6 <isr_adv_ci_adva_check+0x30>
   21eda:	2000      	movs	r0, #0
   21edc:	e7f3      	b.n	21ec6 <isr_adv_ci_adva_check+0x30>

00021ede <ticker_success_assert>:
{
   21ede:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   21ee0:	b108      	cbz	r0, 21ee6 <ticker_success_assert+0x8>
   21ee2:	f7f5 fe5b 	bl	17b9c <ticker_start_conn_assert.part.7>
}
   21ee6:	bd08      	pop	{r3, pc}

00021ee8 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
   21ee8:	2000      	movs	r0, #0
   21eea:	f7f6 b967 	b.w	181bc <mayfly_radio_active>

00021eee <rx_packet_set>:
{
   21eee:	b538      	push	{r3, r4, r5, lr}
   21ef0:	4605      	mov	r5, r0
   21ef2:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
   21ef4:	2100      	movs	r1, #0
   21ef6:	4608      	mov	r0, r1
   21ef8:	f7f8 fa0a 	bl	1a310 <radio_phy_set>
	if (conn->enc_rx) {
   21efc:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   21f00:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   21f02:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
   21f06:	d50d      	bpl.n	21f24 <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   21f08:	211f      	movs	r1, #31
   21f0a:	2008      	movs	r0, #8
   21f0c:	f7f8 fa46 	bl	1a39c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   21f10:	4622      	mov	r2, r4
   21f12:	2100      	movs	r1, #0
   21f14:	f105 00d1 	add.w	r0, r5, #209	; 0xd1
   21f18:	f7f8 fc4e 	bl	1a7b8 <radio_ccm_rx_pkt_set>
}
   21f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
   21f20:	f7f8 ba68 	b.w	1a3f4 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   21f24:	2008      	movs	r0, #8
   21f26:	211b      	movs	r1, #27
   21f28:	f7f8 fa38 	bl	1a39c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   21f2c:	4620      	mov	r0, r4
   21f2e:	e7f5      	b.n	21f1c <rx_packet_set+0x2e>

00021f30 <chan_set>:
	switch (chan) {
   21f30:	2826      	cmp	r0, #38	; 0x26
{
   21f32:	b510      	push	{r4, lr}
   21f34:	4604      	mov	r4, r0
	switch (chan) {
   21f36:	d00b      	beq.n	21f50 <chan_set+0x20>
   21f38:	2827      	cmp	r0, #39	; 0x27
   21f3a:	d00b      	beq.n	21f54 <chan_set+0x24>
   21f3c:	2825      	cmp	r0, #37	; 0x25
   21f3e:	d10b      	bne.n	21f58 <chan_set+0x28>
		radio_freq_chan_set(2);
   21f40:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
   21f42:	f7f8 f9fb 	bl	1a33c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   21f46:	4620      	mov	r0, r4
}
   21f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   21f4c:	f7f8 b9fc 	b.w	1a348 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   21f50:	201a      	movs	r0, #26
   21f52:	e7f6      	b.n	21f42 <chan_set+0x12>
		radio_freq_chan_set(80);
   21f54:	2050      	movs	r0, #80	; 0x50
   21f56:	e7f4      	b.n	21f42 <chan_set+0x12>
		if (chan < 11) {
   21f58:	280a      	cmp	r0, #10
   21f5a:	d802      	bhi.n	21f62 <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
   21f5c:	3002      	adds	r0, #2
   21f5e:	0040      	lsls	r0, r0, #1
   21f60:	e7ef      	b.n	21f42 <chan_set+0x12>
		} else if (chan < 40) {
   21f62:	2827      	cmp	r0, #39	; 0x27
   21f64:	d801      	bhi.n	21f6a <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   21f66:	3003      	adds	r0, #3
   21f68:	e7f9      	b.n	21f5e <chan_set+0x2e>
   21f6a:	f7f5 fe47 	bl	17bfc <chan_set.part.25>

00021f6e <isr_rx_scan_report.isra.35>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
   21f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f72:	4680      	mov	r8, r0
	node_rx = packet_rx_reserve_get(3);
   21f74:	2003      	movs	r0, #3
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
   21f76:	460f      	mov	r7, r1
	node_rx = packet_rx_reserve_get(3);
   21f78:	f7f5 fce6 	bl	17948 <packet_rx_reserve_get>
	if (node_rx == 0) {
   21f7c:	b1c8      	cbz	r0, 21fb2 <isr_rx_scan_report.isra.35+0x44>
				      pdu_adv_rx->len];
   21f7e:	7a44      	ldrb	r4, [r0, #9]
	node_rx->hdr.handle = 0xffff;
   21f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21f84:	80c3      	strh	r3, [r0, #6]
	pdu_adv_rx = (void *)node_rx->pdu_data;
   21f86:	f100 0508 	add.w	r5, r0, #8
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   21f8a:	2304      	movs	r3, #4
	extra = &((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   21f8c:	3402      	adds	r4, #2
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   21f8e:	7103      	strb	r3, [r0, #4]
	extra = &((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   21f90:	192e      	adds	r6, r5, r4
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   21f92:	f1b8 0f00 	cmp.w	r8, #0
   21f96:	d00a      	beq.n	21fae <isr_rx_scan_report.isra.35+0x40>
   21f98:	f7f8 facc 	bl	1a534 <radio_rssi_get>
   21f9c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   21fa0:	5528      	strb	r0, [r5, r4]
	*extra = dir_report ? 1 : 0;
   21fa2:	7077      	strb	r7, [r6, #1]
	packet_rx_enqueue();
   21fa4:	f7f5 fd8e 	bl	17ac4 <packet_rx_enqueue>
	return 0;
   21fa8:	2000      	movs	r0, #0
}
   21faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   21fae:	207f      	movs	r0, #127	; 0x7f
   21fb0:	e7f6      	b.n	21fa0 <isr_rx_scan_report.isra.35+0x32>
		return 1;
   21fb2:	2001      	movs	r0, #1
   21fb4:	e7f9      	b.n	21faa <isr_rx_scan_report.isra.35+0x3c>

00021fb6 <preempt_calc>:
{
   21fb6:	b570      	push	{r4, r5, r6, lr}
   21fb8:	4614      	mov	r4, r2
   21fba:	460e      	mov	r6, r1
   21fbc:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   21fbe:	f7ff fed2 	bl	21d66 <ticker_ticks_now_get>
   21fc2:	4621      	mov	r1, r4
   21fc4:	f7ff fed1 	bl	21d6a <ticker_ticks_diff_get>
	diff += 3;
   21fc8:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   21fca:	2c09      	cmp	r4, #9
   21fcc:	d90f      	bls.n	21fee <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   21fce:	2100      	movs	r1, #0
   21fd0:	4608      	mov	r0, r1
   21fd2:	f7f5 fd21 	bl	17a18 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   21fd6:	4632      	mov	r2, r6
   21fd8:	2100      	movs	r1, #0
   21fda:	4628      	mov	r0, r5
   21fdc:	f7f6 fb44 	bl	18668 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   21fe0:	68ab      	ldr	r3, [r5, #8]
   21fe2:	441c      	add	r4, r3
		if (diff <
   21fe4:	2c26      	cmp	r4, #38	; 0x26
   21fe6:	d800      	bhi.n	21fea <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
   21fe8:	60ac      	str	r4, [r5, #8]
		return 1;
   21fea:	2001      	movs	r0, #1
   21fec:	e000      	b.n	21ff0 <preempt_calc+0x3a>
	return 0;
   21fee:	2000      	movs	r0, #0
}
   21ff0:	bd70      	pop	{r4, r5, r6, pc}

00021ff2 <ctrl_tx_enqueue>:
{
   21ff2:	b510      	push	{r4, lr}
	    !conn->empty &&
   21ff4:	f890 40d0 	ldrb.w	r4, [r0, #208]	; 0xd0
   21ff8:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
	if (
   21ffc:	f014 0f80 	tst.w	r4, #128	; 0x80
   22000:	d118      	bne.n	22034 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   22002:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
	    !conn->empty &&
   22006:	b1ab      	cbz	r3, 22034 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   22008:	0724      	lsls	r4, r4, #28
   2200a:	d413      	bmi.n	22034 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   2200c:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
   22010:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   22012:	bf04      	itt	eq
   22014:	681c      	ldreq	r4, [r3, #0]
   22016:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
		if (!conn->pkt_tx_ctrl) {
   2201a:	b992      	cbnz	r2, 22042 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
   2201c:	681a      	ldr	r2, [r3, #0]
   2201e:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
   22020:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   22022:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	conn->pkt_tx_ctrl_last = node_tx;
   22026:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
	if (node_tx->next == 0) {
   2202a:	680b      	ldr	r3, [r1, #0]
   2202c:	b90b      	cbnz	r3, 22032 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
   2202e:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
}
   22032:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
   22034:	b92a      	cbnz	r2, 22042 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
   22036:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   2203a:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   2203c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   22040:	e7ef      	b.n	22022 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   22042:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   22046:	681a      	ldr	r2, [r3, #0]
   22048:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   2204a:	6019      	str	r1, [r3, #0]
   2204c:	e7eb      	b.n	22026 <ctrl_tx_enqueue+0x34>

0002204e <ctrl_tx_sec_enqueue>:
{
   2204e:	b410      	push	{r4}
	if (conn->pause_tx) {
   22050:	f890 40d0 	ldrb.w	r4, [r0, #208]	; 0xd0
   22054:	0724      	lsls	r4, r4, #28
{
   22056:	460a      	mov	r2, r1
	if (conn->pause_tx) {
   22058:	d50f      	bpl.n	2207a <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
   2205a:	f8d0 1118 	ldr.w	r1, [r0, #280]	; 0x118
   2205e:	b931      	cbnz	r1, 2206e <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
   22060:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   22064:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
   22066:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
}
   2206a:	bc10      	pop	{r4}
   2206c:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   2206e:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   22072:	6819      	ldr	r1, [r3, #0]
   22074:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   22076:	601a      	str	r2, [r3, #0]
   22078:	e7f7      	b.n	2206a <ctrl_tx_sec_enqueue+0x1c>
}
   2207a:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
   2207c:	f7ff bfb9 	b.w	21ff2 <ctrl_tx_enqueue>

00022080 <ll_radio_state_abort>:
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   22080:	2005      	movs	r0, #5
   22082:	f7f6 bf6d 	b.w	18f60 <event_stop.constprop.46>

00022086 <ll_conn_update>:
{
   22086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2208a:	460c      	mov	r4, r1
   2208c:	4691      	mov	r9, r2
   2208e:	469a      	mov	sl, r3
   22090:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   22094:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
   22098:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	conn = connection_get(handle);
   2209c:	f7f5 fe72 	bl	17d84 <connection_get>
	if (!conn) {
   220a0:	2800      	cmp	r0, #0
   220a2:	d061      	beq.n	22168 <ll_conn_update+0xe2>
	if (!cmd) {
   220a4:	bb84      	cbnz	r4, 22108 <ll_conn_update+0x82>
		if (!conn->llcp_conn_param.disabled &&
   220a6:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   220aa:	06d9      	lsls	r1, r3, #27
   220ac:	d407      	bmi.n	220be <ll_conn_update+0x38>
		    (!conn->common.fex_valid ||
   220ae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		if (!conn->llcp_conn_param.disabled &&
   220b2:	069a      	lsls	r2, r3, #26
   220b4:	d527      	bpl.n	22106 <ll_conn_update+0x80>
		     (conn->llcp_features &
   220b6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
		    (!conn->common.fex_valid ||
   220ba:	079b      	lsls	r3, r3, #30
   220bc:	d423      	bmi.n	22106 <ll_conn_update+0x80>
		} else if (conn->role) {
   220be:	f990 301d 	ldrsb.w	r3, [r0, #29]
   220c2:	2b00      	cmp	r3, #0
   220c4:	db52      	blt.n	2216c <ll_conn_update+0xe6>
		if (conn->llcp_req != conn->llcp_ack) {
   220c6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
   220ca:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   220ce:	429a      	cmp	r2, r3
   220d0:	d14e      	bne.n	22170 <ll_conn_update+0xea>
		conn->llcp.conn_upd.win_offset_us = 0U;
   220d2:	2300      	movs	r3, #0
   220d4:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   220d6:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
		conn->llcp.conn_upd.interval = interval_max;
   220da:	f8a0 8062 	strh.w	r8, [r0, #98]	; 0x62
		conn->llcp.conn_upd.win_size = 1U;
   220de:	2101      	movs	r1, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   220e0:	f023 0307 	bic.w	r3, r3, #7
   220e4:	430b      	orrs	r3, r1
		conn->llcp_req++;
   220e6:	440a      	add	r2, r1
		conn->llcp.conn_upd.win_size = 1U;
   220e8:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
		conn->llcp.conn_upd.latency = latency;
   220ec:	f8a0 7064 	strh.w	r7, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = timeout;
   220f0:	f8a0 6066 	strh.w	r6, [r0, #102]	; 0x66
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   220f4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
		conn->llcp_type = LLCP_CONN_UPD;
   220f8:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
		conn->llcp_req++;
   220fc:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
   22100:	4620      	mov	r0, r4
   22102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cmd++;
   22106:	2401      	movs	r4, #1
		cmd--;
   22108:	3c01      	subs	r4, #1
		if (cmd) {
   2210a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   2210e:	f890 50a8 	ldrb.w	r5, [r0, #168]	; 0xa8
   22112:	f890 c0a9 	ldrb.w	ip, [r0, #169]	; 0xa9
   22116:	d011      	beq.n	2213c <ll_conn_update+0xb6>
			if ((conn->llcp_conn_param.req ==
   22118:	4565      	cmp	r5, ip
   2211a:	d029      	beq.n	22170 <ll_conn_update+0xea>
			    (conn->llcp_conn_param.state !=
   2211c:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
			     conn->llcp_conn_param.ack) ||
   22120:	f003 0207 	and.w	r2, r3, #7
   22124:	2a03      	cmp	r2, #3
   22126:	d123      	bne.n	22170 <ll_conn_update+0xea>
			conn->llcp_conn_param.state = cmd;
   22128:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   2212c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   22130:	f880 90ab 	strb.w	r9, [r0, #171]	; 0xab
			conn->llcp_conn_param.cmd = 1U;
   22134:	f880 30aa 	strb.w	r3, [r0, #170]	; 0xaa
	return 0;
   22138:	2400      	movs	r4, #0
   2213a:	e7e1      	b.n	22100 <ll_conn_update+0x7a>
			if (conn->llcp_conn_param.req !=
   2213c:	4565      	cmp	r5, ip
   2213e:	d117      	bne.n	22170 <ll_conn_update+0xea>
			conn->llcp_conn_param.state = cmd;
   22140:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
			conn->llcp_conn_param.interval_min = interval_min;
   22144:	f8a0 a0ac 	strh.w	sl, [r0, #172]	; 0xac
			conn->llcp_conn_param.state = cmd;
   22148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2214c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   22150:	3501      	adds	r5, #1
			conn->llcp_conn_param.interval_max = interval_max;
   22152:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
			conn->llcp_conn_param.latency = latency;
   22156:	f8a0 70b0 	strh.w	r7, [r0, #176]	; 0xb0
			conn->llcp_conn_param.timeout = timeout;
   2215a:	f8a0 60b2 	strh.w	r6, [r0, #178]	; 0xb2
			conn->llcp_conn_param.state = cmd;
   2215e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
			conn->llcp_conn_param.req++;
   22162:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
   22166:	e7cb      	b.n	22100 <ll_conn_update+0x7a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   22168:	2402      	movs	r4, #2
   2216a:	e7c9      	b.n	22100 <ll_conn_update+0x7a>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   2216c:	241a      	movs	r4, #26
   2216e:	e7c7      	b.n	22100 <ll_conn_update+0x7a>
			return BT_HCI_ERR_CMD_DISALLOWED;
   22170:	240c      	movs	r4, #12
   22172:	e7c5      	b.n	22100 <ll_conn_update+0x7a>

00022174 <ll_chm_get>:
{
   22174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22176:	460d      	mov	r5, r1
	conn = connection_get(handle);
   22178:	f7f5 fe04 	bl	17d84 <connection_get>
	if (!conn) {
   2217c:	4604      	mov	r4, r0
   2217e:	b160      	cbz	r0, 2219a <ll_chm_get+0x26>
		conn->chm_update = 0U;
   22180:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   22182:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0U;
   22186:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   22188:	2205      	movs	r2, #5
   2218a:	4631      	mov	r1, r6
   2218c:	4628      	mov	r0, r5
   2218e:	f7fd fa3b 	bl	1f608 <memcpy>
	} while (conn->chm_update);
   22192:	7f20      	ldrb	r0, [r4, #28]
   22194:	2800      	cmp	r0, #0
   22196:	d1f6      	bne.n	22186 <ll_chm_get+0x12>
}
   22198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2219a:	2002      	movs	r0, #2
   2219c:	e7fc      	b.n	22198 <ll_chm_get+0x24>

0002219e <ll_feature_req_send>:
{
   2219e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   221a0:	f7f5 fdf0 	bl	17d84 <connection_get>
	if (!conn) {
   221a4:	b168      	cbz	r0, 221c2 <ll_feature_req_send+0x24>
	if (conn->llcp_req != conn->llcp_ack) {
   221a6:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   221aa:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   221ae:	4293      	cmp	r3, r2
   221b0:	d109      	bne.n	221c6 <ll_feature_req_send+0x28>
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   221b2:	2203      	movs	r2, #3
	conn->llcp_req++;
   221b4:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   221b6:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
	conn->llcp_req++;
   221ba:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	return 0;
   221be:	2000      	movs	r0, #0
}
   221c0:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   221c2:	2002      	movs	r0, #2
   221c4:	e7fc      	b.n	221c0 <ll_feature_req_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   221c6:	200c      	movs	r0, #12
   221c8:	e7fa      	b.n	221c0 <ll_feature_req_send+0x22>

000221ca <ll_version_ind_send>:
{
   221ca:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   221cc:	f7f5 fdda 	bl	17d84 <connection_get>
	if (!conn) {
   221d0:	b168      	cbz	r0, 221ee <ll_version_ind_send+0x24>
	if (conn->llcp_req != conn->llcp_ack) {
   221d2:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   221d6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   221da:	4293      	cmp	r3, r2
   221dc:	d109      	bne.n	221f2 <ll_version_ind_send+0x28>
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   221de:	2204      	movs	r2, #4
	conn->llcp_req++;
   221e0:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   221e2:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
	conn->llcp_req++;
   221e6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	return 0;
   221ea:	2000      	movs	r0, #0
}
   221ec:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   221ee:	2002      	movs	r0, #2
   221f0:	e7fc      	b.n	221ec <ll_version_ind_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   221f2:	200c      	movs	r0, #12
   221f4:	e7fa      	b.n	221ec <ll_version_ind_send+0x22>

000221f6 <ll_terminate_ind_send>:
{
   221f6:	b510      	push	{r4, lr}
   221f8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   221fa:	f7f5 fdc3 	bl	17d84 <connection_get>
	if (!conn) {
   221fe:	b160      	cbz	r0, 2221a <ll_terminate_ind_send+0x24>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   22200:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
   22204:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
   22208:	4293      	cmp	r3, r2
   2220a:	d108      	bne.n	2221e <ll_terminate_ind_send+0x28>
	conn->llcp_terminate.req++;
   2220c:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   2220e:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
	conn->llcp_terminate.req++;
   22212:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
	return 0;
   22216:	2000      	movs	r0, #0
}
   22218:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2221a:	2002      	movs	r0, #2
   2221c:	e7fc      	b.n	22218 <ll_terminate_ind_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2221e:	200c      	movs	r0, #12
   22220:	e7fa      	b.n	22218 <ll_terminate_ind_send+0x22>

00022222 <ll_tx_pwr_lvl_get>:
{
   22222:	b510      	push	{r4, lr}
   22224:	4614      	mov	r4, r2
	conn = connection_get(handle);
   22226:	f7f5 fdad 	bl	17d84 <connection_get>
	if (!conn) {
   2222a:	b110      	cbz	r0, 22232 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   2222c:	2000      	movs	r0, #0
   2222e:	7020      	strb	r0, [r4, #0]
}
   22230:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   22232:	2002      	movs	r0, #2
   22234:	e7fc      	b.n	22230 <ll_tx_pwr_lvl_get+0xe>

00022236 <ll_adv_scan_state_cb>:

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
   22236:	4770      	bx	lr

00022238 <swi5_nrf5_isr>:
	mayfly_run(MAYFLY_CALL_ID_1);
   22238:	2001      	movs	r0, #1
   2223a:	f7f3 bd21 	b.w	15c80 <mayfly_run>

0002223e <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2223e:	4668      	mov	r0, sp
   22240:	f020 0107 	bic.w	r1, r0, #7
   22244:	468d      	mov	sp, r1
   22246:	b501      	push	{r0, lr}
   22248:	f7fd f8eb 	bl	1f422 <z_arch_isr_direct_header>
	isr_radio();
   2224c:	f7f8 f816 	bl	1a27c <isr_radio>
	ISR_DIRECT_PM();
   22250:	f7e3 f998 	bl	5584 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	z_sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		_IntExit();
   22254:	f7e2 ff8c 	bl	5170 <_IntExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   22258:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2225c:	4685      	mov	sp, r0
   2225e:	4770      	bx	lr

00022260 <radio_active_callback>:
}
   22260:	4770      	bx	lr

00022262 <ll_timeslice_ticker_id_get>:

void ll_timeslice_ticker_id_get(u8_t * const instance_index, u8_t * const user_id)
{
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES); /* The last index in the total tickers */
   22262:	2308      	movs	r3, #8
   22264:	700b      	strb	r3, [r1, #0]
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
   22266:	2300      	movs	r3, #0
   22268:	7003      	strb	r3, [r0, #0]
}
   2226a:	4770      	bx	lr

0002226c <ll_adv_data_set>:
{
   2226c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22270:	4688      	mov	r8, r1
   22272:	4606      	mov	r6, r0
	radio_adv_data = radio_adv_data_get();
   22274:	f7f7 f9d2 	bl	1961c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   22278:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   2227c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   22280:	ebc4 02c2 	rsb	r2, r4, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
   22284:	4605      	mov	r5, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   22286:	f810 c002 	ldrb.w	ip, [r0, r2]
   2228a:	f00c 030f 	and.w	r3, ip, #15
   2228e:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   22290:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   22294:	d032      	beq.n	222fc <ll_adv_data_set+0x90>
	if (radio_adv_data->first == radio_adv_data->last) {
   22296:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   2229a:	42a3      	cmp	r3, r4
   2229c:	d104      	bne.n	222a8 <ll_adv_data_set+0x3c>
		last = radio_adv_data->last + 1;
   2229e:	3401      	adds	r4, #1
   222a0:	b2e4      	uxtb	r4, r4
			last = 0U;
   222a2:	2c02      	cmp	r4, #2
   222a4:	bf08      	it	eq
   222a6:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   222a8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   222ac:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   222b0:	18ef      	adds	r7, r5, r3
	pdu->type = prev->type;
   222b2:	5ce8      	ldrb	r0, [r5, r3]
   222b4:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0U;
   222b8:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
   222bc:	54e8      	strb	r0, [r5, r3]
	pdu->tx_addr = prev->tx_addr;
   222be:	5ca8      	ldrb	r0, [r5, r2]
   222c0:	f815 c003 	ldrb.w	ip, [r5, r3]
   222c4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   222c8:	f360 1c86 	bfi	ip, r0, #6, #1
   222cc:	f805 c003 	strb.w	ip, [r5, r3]
	pdu->rx_addr = prev->rx_addr;
   222d0:	5caa      	ldrb	r2, [r5, r2]
   222d2:	fa5f f08c 	uxtb.w	r0, ip
   222d6:	09d2      	lsrs	r2, r2, #7
   222d8:	f362 10c7 	bfi	r0, r2, #7, #1
   222dc:	54e8      	strb	r0, [r5, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   222de:	2206      	movs	r2, #6
   222e0:	3102      	adds	r1, #2
   222e2:	1cb8      	adds	r0, r7, #2
   222e4:	f7fd f990 	bl	1f608 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   222e8:	4632      	mov	r2, r6
   222ea:	4641      	mov	r1, r8
   222ec:	f107 0008 	add.w	r0, r7, #8
	pdu->len = BDADDR_SIZE + len;
   222f0:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   222f2:	f7fd f989 	bl	1f608 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   222f6:	707e      	strb	r6, [r7, #1]
	radio_adv_data->last = last;
   222f8:	f885 404f 	strb.w	r4, [r5, #79]	; 0x4f
}
   222fc:	2000      	movs	r0, #0
   222fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022302 <ll_adv_scan_rsp_set>:
{
   22302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22306:	4606      	mov	r6, r0
   22308:	460f      	mov	r7, r1
	radio_scan_data = radio_scan_data_get();
   2230a:	f7f7 f98b 	bl	19624 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   2230e:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   22312:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   22316:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   22318:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   2231a:	d133      	bne.n	22384 <ll_adv_scan_rsp_set+0x82>
		last = radio_scan_data->last + 1;
   2231c:	1c5d      	adds	r5, r3, #1
   2231e:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   22320:	2d02      	cmp	r5, #2
			last = 0;
   22322:	bf08      	it	eq
   22324:	2500      	moveq	r5, #0
	prev = (struct pdu_adv *)
   22326:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2232a:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   2232e:	b22b      	sxth	r3, r5
   22330:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   22334:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	prev = (struct pdu_adv *)
   22338:	18a1      	adds	r1, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   2233a:	5ce0      	ldrb	r0, [r4, r3]
   2233c:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   22340:	f040 0004 	orr.w	r0, r0, #4
   22344:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   22346:	5ca0      	ldrb	r0, [r4, r2]
   22348:	5ce2      	ldrb	r2, [r4, r3]
   2234a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2234e:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   22352:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
   22356:	f36f 12c7 	bfc	r2, #7, #1
   2235a:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
   2235c:	1db3      	adds	r3, r6, #6
   2235e:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   22362:	2206      	movs	r2, #6
   22364:	3102      	adds	r1, #2
   22366:	f108 0002 	add.w	r0, r8, #2
   2236a:	f7fd f94d 	bl	1f608 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   2236e:	4632      	mov	r2, r6
   22370:	4639      	mov	r1, r7
   22372:	f108 0008 	add.w	r0, r8, #8
   22376:	f7fd f947 	bl	1f608 <memcpy>
	radio_scan_data->last = last;
   2237a:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
   2237e:	2000      	movs	r0, #0
   22380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22384:	461d      	mov	r5, r3
   22386:	e7ce      	b.n	22326 <ll_adv_scan_rsp_set+0x24>

00022388 <ll_wl_size_get>:
}
   22388:	2008      	movs	r0, #8
   2238a:	4770      	bx	lr

0002238c <ecb_encrypt_be>:

void ecb_encrypt_be(u8_t const *const key_be, u8_t const *const clear_text_be,
		    u8_t * const cipher_text_be)
{
   2238c:	b530      	push	{r4, r5, lr}
   2238e:	b08d      	sub	sp, #52	; 0x34
   22390:	460d      	mov	r5, r1
   22392:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   22394:	4601      	mov	r1, r0
   22396:	2210      	movs	r2, #16
   22398:	4668      	mov	r0, sp
   2239a:	f7fd f935 	bl	1f608 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   2239e:	2210      	movs	r2, #16
   223a0:	4629      	mov	r1, r5
   223a2:	eb0d 0002 	add.w	r0, sp, r2
   223a6:	f7fd f92f 	bl	1f608 <memcpy>

	do_ecb(&ecb);
   223aa:	4668      	mov	r0, sp
   223ac:	f7f7 fec0 	bl	1a130 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   223b0:	2210      	movs	r2, #16
   223b2:	a908      	add	r1, sp, #32
   223b4:	4620      	mov	r0, r4
   223b6:	f7fd f927 	bl	1f608 <memcpy>
}
   223ba:	b00d      	add	sp, #52	; 0x34
   223bc:	bd30      	pop	{r4, r5, pc}

000223be <ecb_encrypt>:

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   223be:	b570      	push	{r4, r5, r6, lr}
   223c0:	b08c      	sub	sp, #48	; 0x30
   223c2:	460e      	mov	r6, r1
   223c4:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   223c6:	4601      	mov	r1, r0
   223c8:	2210      	movs	r2, #16
   223ca:	4668      	mov	r0, sp
{
   223cc:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   223ce:	f7ff fbe0 	bl	21b92 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   223d2:	2210      	movs	r2, #16
   223d4:	eb0d 0002 	add.w	r0, sp, r2
   223d8:	4631      	mov	r1, r6
   223da:	f7ff fbda 	bl	21b92 <mem_rcopy>

	do_ecb(&ecb);
   223de:	4668      	mov	r0, sp
   223e0:	f7f7 fea6 	bl	1a130 <do_ecb>

	if (cipher_text_le) {
   223e4:	b125      	cbz	r5, 223f0 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   223e6:	2210      	movs	r2, #16
   223e8:	a908      	add	r1, sp, #32
   223ea:	4628      	mov	r0, r5
   223ec:	f7ff fbd1 	bl	21b92 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   223f0:	b124      	cbz	r4, 223fc <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   223f2:	2210      	movs	r2, #16
   223f4:	a908      	add	r1, sp, #32
   223f6:	4620      	mov	r0, r4
   223f8:	f7fd f906 	bl	1f608 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   223fc:	b00c      	add	sp, #48	; 0x30
   223fe:	bd70      	pop	{r4, r5, r6, pc}

00022400 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   22400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   22408:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   2240a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   2240e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   22412:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   22416:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   2241a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   2241e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   22422:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   22426:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   2242a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   2242e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   22432:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   22436:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   2243a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   2243e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   22442:	4770      	bx	lr

00022444 <radio_tx_chain_delay_get>:
}
   22444:	2001      	movs	r0, #1
   22446:	4770      	bx	lr

00022448 <radio_rx_ready_delay_get>:
}
   22448:	2029      	movs	r0, #41	; 0x29
   2244a:	4770      	bx	lr

0002244c <radio_rx_chain_delay_get>:
	switch (phy) {
   2244c:	2802      	cmp	r0, #2
}
   2244e:	bf14      	ite	ne
   22450:	200a      	movne	r0, #10
   22452:	2006      	moveq	r0, #6
   22454:	4770      	bx	lr

00022456 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   22456:	4288      	cmp	r0, r1
   22458:	d00a      	beq.n	22470 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   2245a:	b918      	cbnz	r0, 22464 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   2245c:	1e4b      	subs	r3, r1, #1
   2245e:	4258      	negs	r0, r3
   22460:	4158      	adcs	r0, r3
   22462:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   22464:	2801      	cmp	r0, #1
   22466:	d105      	bne.n	22474 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   22468:	fab1 f081 	clz	r0, r1
   2246c:	0940      	lsrs	r0, r0, #5
   2246e:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   22470:	2001      	movs	r0, #1
   22472:	4770      	bx	lr
   22474:	2000      	movs	r0, #0
}
   22476:	4770      	bx	lr

00022478 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   22478:	4601      	mov	r1, r0
   2247a:	2000      	movs	r0, #0
   2247c:	f7f7 be50 	b.w	1a120 <cntr_cmp_set>

00022480 <fixed_data_unref>:
}
   22480:	4770      	bx	lr

00022482 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   22482:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   22484:	685b      	ldr	r3, [r3, #4]
   22486:	460a      	mov	r2, r1
   22488:	6819      	ldr	r1, [r3, #0]
   2248a:	f7f8 bb63 	b.w	1ab54 <net_buf_alloc_len>

0002248e <net_buf_get>:
{
   2248e:	b570      	push	{r4, r5, r6, lr}
   22490:	4606      	mov	r6, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   22492:	f000 fb9f 	bl	22bd4 <z_impl_k_queue_get>
	if (!buf) {
   22496:	4605      	mov	r5, r0
   22498:	b128      	cbz	r0, 224a6 <net_buf_get+0x18>
   2249a:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2249c:	7963      	ldrb	r3, [r4, #5]
   2249e:	f013 0301 	ands.w	r3, r3, #1
   224a2:	d102      	bne.n	224aa <net_buf_get+0x1c>
	frag->frags = NULL;
   224a4:	6023      	str	r3, [r4, #0]
}
   224a6:	4628      	mov	r0, r5
   224a8:	bd70      	pop	{r4, r5, r6, pc}
   224aa:	2100      	movs	r1, #0
   224ac:	4630      	mov	r0, r6
   224ae:	f000 fb91 	bl	22bd4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   224b2:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   224b4:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   224b6:	f023 0301 	bic.w	r3, r3, #1
   224ba:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   224bc:	4604      	mov	r4, r0
   224be:	e7ed      	b.n	2249c <net_buf_get+0xe>

000224c0 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   224c0:	6883      	ldr	r3, [r0, #8]
   224c2:	4419      	add	r1, r3
   224c4:	6001      	str	r1, [r0, #0]
}
   224c6:	4770      	bx	lr

000224c8 <net_buf_slist_put>:
{
   224c8:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   224ca:	460b      	mov	r3, r1
   224cc:	681c      	ldr	r4, [r3, #0]
   224ce:	b974      	cbnz	r4, 224ee <net_buf_slist_put+0x26>
   224d0:	f04f 0220 	mov.w	r2, #32
   224d4:	f3ef 8411 	mrs	r4, BASEPRI
   224d8:	f382 8811 	msr	BASEPRI, r2
Z_GENLIST_APPEND_LIST(slist, snode)
   224dc:	6842      	ldr	r2, [r0, #4]
   224de:	b962      	cbnz	r2, 224fa <net_buf_slist_put+0x32>
	list->head = node;
   224e0:	6001      	str	r1, [r0, #0]
	list->tail = node;
   224e2:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   224e4:	f384 8811 	msr	BASEPRI, r4
   224e8:	f3bf 8f6f 	isb	sy
}
   224ec:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   224ee:	795a      	ldrb	r2, [r3, #5]
   224f0:	f042 0201 	orr.w	r2, r2, #1
   224f4:	715a      	strb	r2, [r3, #5]
   224f6:	4623      	mov	r3, r4
   224f8:	e7e8      	b.n	224cc <net_buf_slist_put+0x4>
	parent->next = child;
   224fa:	6011      	str	r1, [r2, #0]
   224fc:	e7f1      	b.n	224e2 <net_buf_slist_put+0x1a>

000224fe <net_buf_slist_get>:
{
   224fe:	b570      	push	{r4, r5, r6, lr}
   22500:	4603      	mov	r3, r0
	__asm__ volatile(
   22502:	f04f 0220 	mov.w	r2, #32
   22506:	f3ef 8111 	mrs	r1, BASEPRI
   2250a:	f382 8811 	msr	BASEPRI, r2
Z_GENLIST_IS_EMPTY(slist)
   2250e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   22510:	b128      	cbz	r0, 2251e <net_buf_slist_get+0x20>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22512:	685c      	ldr	r4, [r3, #4]
   22514:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   22516:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22518:	42a0      	cmp	r0, r4
	list->tail = node;
   2251a:	bf08      	it	eq
   2251c:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2251e:	f381 8811 	msr	BASEPRI, r1
   22522:	f3bf 8f6f 	isb	sy
	if (!buf) {
   22526:	b128      	cbz	r0, 22534 <net_buf_slist_get+0x36>
   22528:	4602      	mov	r2, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2252a:	7951      	ldrb	r1, [r2, #5]
   2252c:	f011 0101 	ands.w	r1, r1, #1
   22530:	d101      	bne.n	22536 <net_buf_slist_get+0x38>
	frag->frags = NULL;
   22532:	6011      	str	r1, [r2, #0]
}
   22534:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   22536:	f04f 0120 	mov.w	r1, #32
   2253a:	f3ef 8511 	mrs	r5, BASEPRI
   2253e:	f381 8811 	msr	BASEPRI, r1
Z_GENLIST_IS_EMPTY(slist)
   22542:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   22544:	b129      	cbz	r1, 22552 <net_buf_slist_get+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22546:	685e      	ldr	r6, [r3, #4]
   22548:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   2254a:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2254c:	42b1      	cmp	r1, r6
	list->tail = node;
   2254e:	bf08      	it	eq
   22550:	605c      	streq	r4, [r3, #4]
		frag->frags = (void *)sys_slist_get(list);
   22552:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   22554:	f385 8811 	msr	BASEPRI, r5
   22558:	f3bf 8f6f 	isb	sy
		frag->flags &= ~NET_BUF_FRAGS;
   2255c:	7951      	ldrb	r1, [r2, #5]
   2255e:	f021 0101 	bic.w	r1, r1, #1
   22562:	7151      	strb	r1, [r2, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22564:	6812      	ldr	r2, [r2, #0]
   22566:	e7e0      	b.n	2252a <net_buf_slist_get+0x2c>

00022568 <net_buf_put>:
{
   22568:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2256a:	460a      	mov	r2, r1
   2256c:	6814      	ldr	r4, [r2, #0]
   2256e:	b914      	cbnz	r4, 22576 <net_buf_put+0xe>
}
   22570:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   22572:	f000 bb12 	b.w	22b9a <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   22576:	7953      	ldrb	r3, [r2, #5]
   22578:	f043 0301 	orr.w	r3, r3, #1
   2257c:	7153      	strb	r3, [r2, #5]
   2257e:	4622      	mov	r2, r4
   22580:	e7f4      	b.n	2256c <net_buf_put+0x4>

00022582 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   22582:	7903      	ldrb	r3, [r0, #4]
   22584:	3301      	adds	r3, #1
   22586:	7103      	strb	r3, [r0, #4]
	return buf;
}
   22588:	4770      	bx	lr

0002258a <net_buf_simple_add>:
	return buf->data + buf->len;
   2258a:	8883      	ldrh	r3, [r0, #4]
   2258c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2258e:	4419      	add	r1, r3
   22590:	8081      	strh	r1, [r0, #4]
	return tail;
}
   22592:	18d0      	adds	r0, r2, r3
   22594:	4770      	bx	lr

00022596 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   22596:	b430      	push	{r4, r5}
   22598:	8883      	ldrh	r3, [r0, #4]
   2259a:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   2259c:	189d      	adds	r5, r3, r2
   2259e:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   225a0:	18e0      	adds	r0, r4, r3
}
   225a2:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   225a4:	f7fd b830 	b.w	1f608 <memcpy>

000225a8 <net_buf_simple_add_u8>:
   225a8:	8883      	ldrh	r3, [r0, #4]
   225aa:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   225ac:	b510      	push	{r4, lr}
	buf->len += len;
   225ae:	1c5c      	adds	r4, r3, #1
   225b0:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   225b2:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   225b4:	18d0      	adds	r0, r2, r3
   225b6:	bd10      	pop	{r4, pc}

000225b8 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   225b8:	b513      	push	{r0, r1, r4, lr}
   225ba:	8883      	ldrh	r3, [r0, #4]
   225bc:	6804      	ldr	r4, [r0, #0]
   225be:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->len += len;
   225c2:	1c9a      	adds	r2, r3, #2
   225c4:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   225c6:	f10d 0106 	add.w	r1, sp, #6
   225ca:	2202      	movs	r2, #2
   225cc:	18e0      	adds	r0, r4, r3
   225ce:	f7fd f81b 	bl	1f608 <memcpy>
}
   225d2:	b002      	add	sp, #8
   225d4:	bd10      	pop	{r4, pc}

000225d6 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   225d6:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   225d8:	020b      	lsls	r3, r1, #8
   225da:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
   225de:	8883      	ldrh	r3, [r0, #4]
   225e0:	6804      	ldr	r4, [r0, #0]
   225e2:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->len += len;
   225e6:	1c9a      	adds	r2, r3, #2
   225e8:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   225ea:	f10d 0106 	add.w	r1, sp, #6
   225ee:	2202      	movs	r2, #2
   225f0:	18e0      	adds	r0, r4, r3
   225f2:	f7fd f809 	bl	1f608 <memcpy>
}
   225f6:	b002      	add	sp, #8
   225f8:	bd10      	pop	{r4, pc}

000225fa <net_buf_simple_add_be32>:
	val = sys_cpu_to_le32(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, u32_t val)
{
   225fa:	b513      	push	{r0, r1, r4, lr}
   225fc:	8883      	ldrh	r3, [r0, #4]
   225fe:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   22600:	1d1a      	adds	r2, r3, #4
   22602:	8082      	strh	r2, [r0, #4]
   22604:	ba09      	rev	r1, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be32(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   22606:	2204      	movs	r2, #4
	val = sys_cpu_to_be32(val);
   22608:	9101      	str	r1, [sp, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   2260a:	18e0      	adds	r0, r4, r3
   2260c:	eb0d 0102 	add.w	r1, sp, r2
   22610:	f7fc fffa 	bl	1f608 <memcpy>
}
   22614:	b002      	add	sp, #8
   22616:	bd10      	pop	{r4, pc}

00022618 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   22618:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   2261a:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   2261c:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   2261e:	4411      	add	r1, r2
	buf->data -= len;
   22620:	6003      	str	r3, [r0, #0]
	buf->len += len;
   22622:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   22624:	4618      	mov	r0, r3
   22626:	4770      	bx	lr

00022628 <net_buf_simple_push_be16>:
	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_push_be16(struct net_buf_simple *buf, u16_t val)
{
   22628:	b507      	push	{r0, r1, r2, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   2262a:	020b      	lsls	r3, r1, #8
	buf->len += len;
   2262c:	8882      	ldrh	r2, [r0, #4]
	val = sys_cpu_to_be16(val);
   2262e:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
	buf->data -= len;
   22632:	6803      	ldr	r3, [r0, #0]
	val = sys_cpu_to_be16(val);
   22634:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->data -= len;
   22638:	3b02      	subs	r3, #2
	buf->len += len;
   2263a:	3202      	adds	r2, #2
	buf->data -= len;
   2263c:	6003      	str	r3, [r0, #0]
	buf->len += len;
   2263e:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   22640:	f10d 0106 	add.w	r1, sp, #6
   22644:	2202      	movs	r2, #2
   22646:	4618      	mov	r0, r3
   22648:	f7fc ffde 	bl	1f608 <memcpy>
}
   2264c:	b003      	add	sp, #12
   2264e:	f85d fb04 	ldr.w	pc, [sp], #4

00022652 <net_buf_simple_push_u8>:
	buf->data -= len;
   22652:	6802      	ldr	r2, [r0, #0]
   22654:	1e53      	subs	r3, r2, #1
   22656:	6003      	str	r3, [r0, #0]
	buf->len += len;
   22658:	8883      	ldrh	r3, [r0, #4]
   2265a:	3301      	adds	r3, #1
   2265c:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, u8_t val)
{
	u8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   2265e:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   22662:	4770      	bx	lr

00022664 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   22664:	8883      	ldrh	r3, [r0, #4]
   22666:	1a5b      	subs	r3, r3, r1
   22668:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   2266a:	6803      	ldr	r3, [r0, #0]
   2266c:	4419      	add	r1, r3
   2266e:	6001      	str	r1, [r0, #0]
}
   22670:	4608      	mov	r0, r1
   22672:	4770      	bx	lr

00022674 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   22674:	4603      	mov	r3, r0
	void *data = buf->data;
   22676:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   22678:	889a      	ldrh	r2, [r3, #4]
   2267a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2267c:	4401      	add	r1, r0
	buf->len -= len;
   2267e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   22680:	6019      	str	r1, [r3, #0]

	return data;
}
   22682:	4770      	bx	lr

00022684 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   22684:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   22686:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   22688:	2101      	movs	r1, #1
	val = buf->data[0];
   2268a:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2268c:	f7ff ffea 	bl	22664 <net_buf_simple_pull>

	return val;
}
   22690:	4610      	mov	r0, r2
   22692:	bd08      	pop	{r3, pc}

00022694 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   22694:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   22696:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22698:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   2269a:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2269c:	f7ff ffe2 	bl	22664 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   226a0:	4610      	mov	r0, r2
   226a2:	bd08      	pop	{r3, pc}

000226a4 <net_buf_simple_pull_be16>:

u16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
   226a4:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   226a6:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   226a8:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   226aa:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   226ac:	f7ff ffda 	bl	22664 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
   226b0:	0210      	lsls	r0, r2, #8
   226b2:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
}
   226b6:	b280      	uxth	r0, r0
   226b8:	bd08      	pop	{r3, pc}

000226ba <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

u32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   226ba:	b508      	push	{r3, lr}
   226bc:	6803      	ldr	r3, [r0, #0]
   226be:	681a      	ldr	r2, [r3, #0]
	u32_t val;

	val = UNALIGNED_GET((u32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   226c0:	2104      	movs	r1, #4
   226c2:	ba12      	rev	r2, r2
   226c4:	f7ff ffce 	bl	22664 <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   226c8:	4610      	mov	r0, r2
   226ca:	bd08      	pop	{r3, pc}

000226cc <net_buf_simple_headroom>:

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   226cc:	6802      	ldr	r2, [r0, #0]
   226ce:	6880      	ldr	r0, [r0, #8]
}
   226d0:	1a10      	subs	r0, r2, r0
   226d2:	4770      	bx	lr

000226d4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   226d4:	8883      	ldrh	r3, [r0, #4]
   226d6:	88c2      	ldrh	r2, [r0, #6]
   226d8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   226da:	6803      	ldr	r3, [r0, #0]
   226dc:	6880      	ldr	r0, [r0, #8]
   226de:	1a18      	subs	r0, r3, r0
}
   226e0:	1a10      	subs	r0, r2, r0
   226e2:	4770      	bx	lr

000226e4 <nrf_gpio_cfg_sense_set>:
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   226e4:	0080      	lsls	r0, r0, #2
   226e6:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
   226ea:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   226ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   226f2:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   226f6:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   226fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   226fe:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   22702:	4770      	bx	lr

00022704 <gpio_nrfx_write>:
{
   22704:	b510      	push	{r4, lr}
	return port->config->config_info;
   22706:	6804      	ldr	r4, [r0, #0]
   22708:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2270a:	68a4      	ldr	r4, [r4, #8]
   2270c:	69c0      	ldr	r0, [r0, #28]
   2270e:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   22710:	2901      	cmp	r1, #1
   22712:	d104      	bne.n	2271e <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   22714:	4058      	eors	r0, r3
    p_reg->OUT = value;
   22716:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
   2271a:	2000      	movs	r0, #0
   2271c:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   2271e:	3300      	adds	r3, #0
   22720:	fa20 f002 	lsr.w	r0, r0, r2
   22724:	f04f 0101 	mov.w	r1, #1
   22728:	bf18      	it	ne
   2272a:	2301      	movne	r3, #1
   2272c:	f000 0001 	and.w	r0, r0, #1
   22730:	4091      	lsls	r1, r2
   22732:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   22734:	bf14      	ite	ne
   22736:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   2273a:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
   2273e:	e7ec      	b.n	2271a <gpio_nrfx_write+0x16>

00022740 <gpio_nrfx_read>:
{
   22740:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   22742:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   22744:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22746:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   22748:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2274a:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
   2274c:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
   22750:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
   22754:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   22758:	4060      	eors	r0, r4
   2275a:	406c      	eors	r4, r5
   2275c:	4034      	ands	r4, r6
   2275e:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   22760:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
   22762:	bf1c      	itt	ne
   22764:	40d0      	lsrne	r0, r2
   22766:	f000 0001 	andne.w	r0, r0, #1
   2276a:	6018      	str	r0, [r3, #0]
}
   2276c:	2000      	movs	r0, #0
   2276e:	bd70      	pop	{r4, r5, r6, pc}

00022770 <gpio_nrfx_manage_callback>:
	return _gpio_manage_callback(&get_port_data(port)->callbacks,
   22770:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
   22772:	6818      	ldr	r0, [r3, #0]
{
   22774:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   22776:	b158      	cbz	r0, 22790 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22778:	2400      	movs	r4, #0
   2277a:	4281      	cmp	r1, r0
   2277c:	d113      	bne.n	227a6 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2277e:	6808      	ldr	r0, [r1, #0]
   22780:	b95c      	cbnz	r4, 2279a <gpio_nrfx_manage_callback+0x2a>
   22782:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   22784:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   22786:	42a1      	cmp	r1, r4
   22788:	d100      	bne.n	2278c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2278a:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2278c:	2000      	movs	r0, #0
   2278e:	6008      	str	r0, [r1, #0]
	if (set) {
   22790:	b972      	cbnz	r2, 227b0 <gpio_nrfx_manage_callback+0x40>
	return 0;
   22792:	2000      	movs	r0, #0
}
   22794:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22796:	4628      	mov	r0, r5
   22798:	e7ef      	b.n	2277a <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   2279a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2279c:	6858      	ldr	r0, [r3, #4]
   2279e:	4281      	cmp	r1, r0
	list->tail = node;
   227a0:	bf08      	it	eq
   227a2:	605c      	streq	r4, [r3, #4]
   227a4:	e7f2      	b.n	2278c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   227a6:	6805      	ldr	r5, [r0, #0]
	return node->next;
   227a8:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   227aa:	2d00      	cmp	r5, #0
   227ac:	d1f3      	bne.n	22796 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   227ae:	b13a      	cbz	r2, 227c0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   227b0:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   227b2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   227b4:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   227b6:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   227b8:	2800      	cmp	r0, #0
   227ba:	d1ea      	bne.n	22792 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   227bc:	6059      	str	r1, [r3, #4]
   227be:	e7e9      	b.n	22794 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   227c0:	f06f 0015 	mvn.w	r0, #21
	return _gpio_manage_callback(&get_port_data(port)->callbacks,
   227c4:	e7e6      	b.n	22794 <gpio_nrfx_manage_callback+0x24>

000227c6 <gpio_nrfx_config>:
{
   227c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227ca:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   227cc:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   227ce:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   227d2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   227d6:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   227d8:	d041      	beq.n	2285e <gpio_nrfx_config+0x98>
   227da:	dc09      	bgt.n	227f0 <gpio_nrfx_config+0x2a>
   227dc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   227e0:	d03f      	beq.n	22862 <gpio_nrfx_config+0x9c>
   227e2:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   227e6:	d03e      	beq.n	22866 <gpio_nrfx_config+0xa0>
   227e8:	b190      	cbz	r0, 22810 <gpio_nrfx_config+0x4a>
		return -EINVAL;
   227ea:	f06f 0015 	mvn.w	r0, #21
   227ee:	e033      	b.n	22858 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   227f0:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   227f4:	d039      	beq.n	2286a <gpio_nrfx_config+0xa4>
   227f6:	dc04      	bgt.n	22802 <gpio_nrfx_config+0x3c>
   227f8:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   227fc:	d1f5      	bne.n	227ea <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   227fe:	2003      	movs	r0, #3
   22800:	e006      	b.n	22810 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   22802:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   22806:	d032      	beq.n	2286e <gpio_nrfx_config+0xa8>
   22808:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   2280c:	d1ed      	bne.n	227ea <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   2280e:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   22810:	f406 7740 	and.w	r7, r6, #768	; 0x300
   22814:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   22818:	d02b      	beq.n	22872 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
   2281a:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   2281e:	4263      	negs	r3, r4
   22820:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   22822:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   22826:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2282a:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   2282c:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
   22830:	bf18      	it	ne
   22832:	b2d4      	uxtbne	r4, r2
   22834:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   22838:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
   2283c:	bf12      	itee	ne
   2283e:	46a1      	movne	r9, r4
		to_pin   = 31U;
   22840:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   22844:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22846:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
   2284a:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2284e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   22852:	45a1      	cmp	r9, r4
   22854:	d20f      	bcs.n	22876 <gpio_nrfx_config+0xb0>
	return 0;
   22856:	2000      	movs	r0, #0
}
   22858:	b003      	add	sp, #12
   2285a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   2285e:	2002      	movs	r0, #2
   22860:	e7d6      	b.n	22810 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   22862:	2001      	movs	r0, #1
   22864:	e7d4      	b.n	22810 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   22866:	2004      	movs	r0, #4
   22868:	e7d2      	b.n	22810 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   2286a:	2005      	movs	r0, #5
   2286c:	e7d0      	b.n	22810 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   2286e:	2006      	movs	r0, #6
   22870:	e7ce      	b.n	22810 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   22872:	2303      	movs	r3, #3
   22874:	e7d5      	b.n	22822 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   22876:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   2287a:	6892      	ldr	r2, [r2, #8]
   2287c:	7911      	ldrb	r1, [r2, #4]
   2287e:	f004 021f 	and.w	r2, r4, #31
   22882:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   22886:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2288a:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2288e:	fa0b f204 	lsl.w	r2, fp, r4
   22892:	68a9      	ldr	r1, [r5, #8]
   22894:	2b00      	cmp	r3, #0
   22896:	d025      	beq.n	228e4 <gpio_nrfx_config+0x11e>
   22898:	4311      	orrs	r1, r2
   2289a:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   2289c:	6969      	ldr	r1, [r5, #20]
   2289e:	9301      	str	r3, [sp, #4]
   228a0:	06b0      	lsls	r0, r6, #26
   228a2:	bf4c      	ite	mi
   228a4:	4311      	orrmi	r1, r2
   228a6:	4391      	bicpl	r1, r2
   228a8:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   228aa:	69a9      	ldr	r1, [r5, #24]
   228ac:	0670      	lsls	r0, r6, #25
   228ae:	bf4c      	ite	mi
   228b0:	4311      	orrmi	r1, r2
   228b2:	4391      	bicpl	r1, r2
   228b4:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   228b6:	6929      	ldr	r1, [r5, #16]
   228b8:	0770      	lsls	r0, r6, #29
   228ba:	bf4c      	ite	mi
   228bc:	4311      	orrmi	r1, r2
   228be:	4391      	bicpl	r1, r2
   228c0:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   228c2:	69e9      	ldr	r1, [r5, #28]
   228c4:	0630      	lsls	r0, r6, #24
   228c6:	bf4c      	ite	mi
   228c8:	430a      	orrmi	r2, r1
   228ca:	ea21 0202 	bicpl.w	r2, r1, r2
   228ce:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   228d0:	4621      	mov	r1, r4
   228d2:	4640      	mov	r0, r8
   228d4:	f7f8 fa94 	bl	1ae00 <gpiote_pin_int_cfg>
		if (res != 0) {
   228d8:	2800      	cmp	r0, #0
   228da:	d1bd      	bne.n	22858 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   228dc:	3401      	adds	r4, #1
   228de:	b2e4      	uxtb	r4, r4
   228e0:	9b01      	ldr	r3, [sp, #4]
   228e2:	e7b6      	b.n	22852 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   228e4:	ea21 0102 	bic.w	r1, r1, r2
   228e8:	e7d7      	b.n	2289a <gpio_nrfx_config+0xd4>

000228ea <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   228ea:	2901      	cmp	r1, #1
{
   228ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   228f0:	bf18      	it	ne
   228f2:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   228f4:	6887      	ldr	r7, [r0, #8]
{
   228f6:	4606      	mov	r6, r0
		to_pin   = pin;
   228f8:	bf12      	itee	ne
   228fa:	4625      	movne	r5, r4
		to_pin   = 31U;
   228fc:	251f      	moveq	r5, #31
		from_pin = 0U;
   228fe:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   22900:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   22904:	42ac      	cmp	r4, r5
   22906:	d902      	bls.n	2290e <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   22908:	2000      	movs	r0, #0
}
   2290a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   2290e:	68fb      	ldr	r3, [r7, #12]
   22910:	fa08 f204 	lsl.w	r2, r8, r4
   22914:	ea23 0302 	bic.w	r3, r3, r2
   22918:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2291a:	4621      	mov	r1, r4
   2291c:	4630      	mov	r0, r6
   2291e:	f7f8 fa6f 	bl	1ae00 <gpiote_pin_int_cfg>
		if (res != 0) {
   22922:	2800      	cmp	r0, #0
   22924:	d1f1      	bne.n	2290a <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   22926:	3401      	adds	r4, #1
   22928:	b2e4      	uxtb	r4, r4
   2292a:	e7eb      	b.n	22904 <gpio_nrfx_pin_disable_callback+0x1a>

0002292c <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2292c:	2901      	cmp	r1, #1
{
   2292e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   22932:	bf18      	it	ne
   22934:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   22936:	6887      	ldr	r7, [r0, #8]
{
   22938:	4606      	mov	r6, r0
		to_pin   = pin;
   2293a:	bf12      	itee	ne
   2293c:	4625      	movne	r5, r4
		to_pin   = 31U;
   2293e:	251f      	moveq	r5, #31
		from_pin = 0U;
   22940:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   22942:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   22946:	42ac      	cmp	r4, r5
   22948:	d902      	bls.n	22950 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   2294a:	2000      	movs	r0, #0
}
   2294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   22950:	68fb      	ldr	r3, [r7, #12]
   22952:	fa08 f204 	lsl.w	r2, r8, r4
   22956:	4313      	orrs	r3, r2
   22958:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2295a:	4621      	mov	r1, r4
   2295c:	4630      	mov	r0, r6
   2295e:	f7f8 fa4f 	bl	1ae00 <gpiote_pin_int_cfg>
		if (res != 0) {
   22962:	2800      	cmp	r0, #0
   22964:	d1f2      	bne.n	2294c <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   22966:	3401      	adds	r4, #1
   22968:	b2e4      	uxtb	r4, r4
   2296a:	e7ec      	b.n	22946 <gpio_nrfx_pin_enable_callback+0x1a>

0002296c <is_regular_addr_valid>:
	if (addr >= NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   2296c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   22970:	b510      	push	{r4, lr}
	if (addr >= NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   22972:	691c      	ldr	r4, [r3, #16]
   22974:	695a      	ldr	r2, [r3, #20]
   22976:	4362      	muls	r2, r4
   22978:	4282      	cmp	r2, r0
   2297a:	d90f      	bls.n	2299c <is_regular_addr_valid+0x30>
   2297c:	2800      	cmp	r0, #0
   2297e:	db0d      	blt.n	2299c <is_regular_addr_valid+0x30>
	    len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   22980:	691c      	ldr	r4, [r3, #16]
   22982:	695a      	ldr	r2, [r3, #20]
   22984:	4362      	muls	r2, r4
	    addr < 0 ||
   22986:	428a      	cmp	r2, r1
   22988:	d308      	bcc.n	2299c <is_regular_addr_valid+0x30>
	    addr + len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE) {
   2298a:	691a      	ldr	r2, [r3, #16]
   2298c:	695b      	ldr	r3, [r3, #20]
   2298e:	4408      	add	r0, r1
   22990:	4353      	muls	r3, r2
	    len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   22992:	4298      	cmp	r0, r3
   22994:	bf8c      	ite	hi
   22996:	2000      	movhi	r0, #0
   22998:	2001      	movls	r0, #1
}
   2299a:	bd10      	pop	{r4, pc}
		return false;
   2299c:	2000      	movs	r0, #0
   2299e:	e7fc      	b.n	2299a <is_regular_addr_valid+0x2e>

000229a0 <flash_nrf_read>:
{
   229a0:	b570      	push	{r4, r5, r6, lr}
   229a2:	460d      	mov	r5, r1
	return is_regular_addr_valid(addr, len) ||
   229a4:	4628      	mov	r0, r5
   229a6:	4619      	mov	r1, r3
{
   229a8:	4616      	mov	r6, r2
   229aa:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   229ac:	f7ff ffde 	bl	2296c <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   229b0:	b138      	cbz	r0, 229c2 <flash_nrf_read+0x22>
	if (!len) {
   229b2:	b14c      	cbz	r4, 229c8 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   229b4:	4622      	mov	r2, r4
   229b6:	4629      	mov	r1, r5
   229b8:	4630      	mov	r0, r6
   229ba:	f7fc fe25 	bl	1f608 <memcpy>
	return 0;
   229be:	2000      	movs	r0, #0
}
   229c0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   229c2:	f06f 0015 	mvn.w	r0, #21
   229c6:	e7fb      	b.n	229c0 <flash_nrf_read+0x20>
		return 0;
   229c8:	4620      	mov	r0, r4
   229ca:	e7f9      	b.n	229c0 <flash_nrf_read+0x20>

000229cc <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   229cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   229d0:	6843      	ldr	r3, [r0, #4]
{
   229d2:	b086      	sub	sp, #24
   229d4:	4689      	mov	r9, r1
   229d6:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   229d8:	691b      	ldr	r3, [r3, #16]
   229da:	aa02      	add	r2, sp, #8
   229dc:	a901      	add	r1, sp, #4
   229de:	4798      	blx	r3
	off_t off = 0;
   229e0:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   229e2:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   229e4:	4625      	mov	r5, r4
   229e6:	9b02      	ldr	r3, [sp, #8]
   229e8:	42ab      	cmp	r3, r5
   229ea:	d802      	bhi.n	229f2 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   229ec:	b006      	add	sp, #24
   229ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   229f2:	9f01      	ldr	r7, [sp, #4]
   229f4:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   229f8:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   229fa:	687b      	ldr	r3, [r7, #4]
   229fc:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   229fe:	683a      	ldr	r2, [r7, #0]
   22a00:	42b2      	cmp	r2, r6
   22a02:	eb08 0306 	add.w	r3, r8, r6
   22a06:	d802      	bhi.n	22a0e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   22a08:	3501      	adds	r5, #1
   22a0a:	4698      	mov	r8, r3
   22a0c:	e7eb      	b.n	229e6 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   22a0e:	4651      	mov	r1, sl
   22a10:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   22a12:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   22a14:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   22a16:	47c8      	blx	r9
   22a18:	2800      	cmp	r0, #0
   22a1a:	d0e7      	beq.n	229ec <flash_page_foreach+0x20>
			off += page_info.size;
   22a1c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   22a1e:	3601      	adds	r6, #1
			off += page_info.size;
   22a20:	441c      	add	r4, r3
			page++;
   22a22:	e7ec      	b.n	229fe <flash_page_foreach+0x32>

00022a24 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   22a24:	6882      	ldr	r2, [r0, #8]
{
   22a26:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   22a28:	e892 0003 	ldmia.w	r2, {r0, r1}
   22a2c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   22a30:	2000      	movs	r0, #0
   22a32:	4770      	bx	lr

00022a34 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   22a34:	f7fc bcf2 	b.w	1f41c <z_clock_idle_exit>

00022a38 <k_mem_slab_init>:
{
   22a38:	b530      	push	{r4, r5, lr}
	slab->num_used = 0;
   22a3a:	2400      	movs	r4, #0
	slab->block_size = block_size;
   22a3c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   22a40:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   22a44:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   22a46:	42a3      	cmp	r3, r4
   22a48:	d102      	bne.n	22a50 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   22a4a:	e9c0 0000 	strd	r0, r0, [r0]
}
   22a4e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   22a50:	6945      	ldr	r5, [r0, #20]
   22a52:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   22a54:	3401      	adds	r4, #1
		slab->free_list = p;
   22a56:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   22a58:	4411      	add	r1, r2
   22a5a:	e7f4      	b.n	22a46 <k_mem_slab_init+0xe>

00022a5c <k_mem_pool_malloc>:
{
   22a5c:	b513      	push	{r0, r1, r4, lr}
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   22a5e:	2404      	movs	r4, #4
   22a60:	190a      	adds	r2, r1, r4
   22a62:	d204      	bcs.n	22a6e <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   22a64:	2300      	movs	r3, #0
   22a66:	4669      	mov	r1, sp
   22a68:	f7f8 ffc4 	bl	1b9f4 <k_mem_pool_alloc>
   22a6c:	b110      	cbz	r0, 22a74 <k_mem_pool_malloc+0x18>
		return NULL;
   22a6e:	2000      	movs	r0, #0
}
   22a70:	b002      	add	sp, #8
   22a72:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   22a74:	4622      	mov	r2, r4
   22a76:	a901      	add	r1, sp, #4
   22a78:	9800      	ldr	r0, [sp, #0]
   22a7a:	f7fc fdc5 	bl	1f608 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   22a7e:	9800      	ldr	r0, [sp, #0]
   22a80:	3004      	adds	r0, #4
   22a82:	e7f5      	b.n	22a70 <k_mem_pool_malloc+0x14>

00022a84 <k_free>:
	if (ptr != NULL) {
   22a84:	b110      	cbz	r0, 22a8c <k_free+0x8>
		k_mem_pool_free_id(ptr);
   22a86:	3804      	subs	r0, #4
   22a88:	f7f9 b816 	b.w	1bab8 <k_mem_pool_free_id>
}
   22a8c:	4770      	bx	lr

00022a8e <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   22a8e:	2300      	movs	r3, #0
	mutex->lock_count = 0;
   22a90:	e9c0 3302 	strd	r3, r3, [r0, #8]
   22a94:	e9c0 0000 	strd	r0, r0, [r0]
}
   22a98:	4770      	bx	lr

00022a9a <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   22a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a9e:	4604      	mov	r4, r0
   22aa0:	460f      	mov	r7, r1
   22aa2:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22aa4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   22aa8:	f04f 0220 	mov.w	r2, #32
   22aac:	f3ef 8611 	mrs	r6, BASEPRI
   22ab0:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   22ab4:	b1db      	cbz	r3, 22aee <queue_insert+0x54>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   22ab6:	2008      	movs	r0, #8
   22ab8:	f7f9 f828 	bl	1bb0c <z_thread_malloc>
		if (anode == NULL) {
   22abc:	b938      	cbnz	r0, 22ace <queue_insert+0x34>
	__asm__ volatile(
   22abe:	f386 8811 	msr	BASEPRI, r6
   22ac2:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   22ac6:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   22aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->next_and_flags = flags;
   22ace:	2301      	movs	r3, #1
		anode->data = data;
   22ad0:	f8c0 8004 	str.w	r8, [r0, #4]
   22ad4:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   22ad6:	6803      	ldr	r3, [r0, #0]
   22ad8:	f003 0203 	and.w	r2, r3, #3
   22adc:	b95f      	cbnz	r7, 22af6 <queue_insert+0x5c>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22ade:	6823      	ldr	r3, [r4, #0]
   22ae0:	4313      	orrs	r3, r2
   22ae2:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22ae4:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22ae6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22ae8:	b973      	cbnz	r3, 22b08 <queue_insert+0x6e>
	list->tail = node;
   22aea:	6060      	str	r0, [r4, #4]
   22aec:	e00c      	b.n	22b08 <queue_insert+0x6e>
	node->next_and_flags = flags;
   22aee:	f8c8 3000 	str.w	r3, [r8]
   22af2:	4640      	mov	r0, r8
   22af4:	e7ef      	b.n	22ad6 <queue_insert+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22af6:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22af8:	f033 0303 	bics.w	r3, r3, #3
   22afc:	d114      	bne.n	22b28 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22afe:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   22b00:	6862      	ldr	r2, [r4, #4]
   22b02:	b95a      	cbnz	r2, 22b1c <queue_insert+0x82>
	list->head = node;
   22b04:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22b08:	2104      	movs	r1, #4
   22b0a:	4628      	mov	r0, r5
   22b0c:	f000 fb40 	bl	23190 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22b10:	4628      	mov	r0, r5
   22b12:	4631      	mov	r1, r6
   22b14:	f000 f8e8 	bl	22ce8 <z_reschedule>
	return 0;
   22b18:	2000      	movs	r0, #0
   22b1a:	e7d6      	b.n	22aca <queue_insert+0x30>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22b1c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22b1e:	f003 0303 	and.w	r3, r3, #3
   22b22:	4303      	orrs	r3, r0
   22b24:	6013      	str	r3, [r2, #0]
   22b26:	e7e0      	b.n	22aea <queue_insert+0x50>
   22b28:	4313      	orrs	r3, r2
   22b2a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22b2c:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22b2e:	f003 0303 	and.w	r3, r3, #3
   22b32:	4318      	orrs	r0, r3
   22b34:	6038      	str	r0, [r7, #0]
   22b36:	e7e7      	b.n	22b08 <queue_insert+0x6e>

00022b38 <z_queue_node_peek>:
{
   22b38:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   22b3a:	4604      	mov	r4, r0
   22b3c:	b130      	cbz	r0, 22b4c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22b3e:	6802      	ldr	r2, [r0, #0]
   22b40:	0793      	lsls	r3, r2, #30
   22b42:	d003      	beq.n	22b4c <z_queue_node_peek+0x14>
		ret = anode->data;
   22b44:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   22b46:	b109      	cbz	r1, 22b4c <z_queue_node_peek+0x14>
			k_free(anode);
   22b48:	f7ff ff9c 	bl	22a84 <k_free>
}
   22b4c:	4620      	mov	r0, r4
   22b4e:	bd10      	pop	{r4, pc}

00022b50 <z_impl_k_queue_init>:
	list->head = NULL;
   22b50:	2300      	movs	r3, #0
	list->tail = NULL;
   22b52:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   22b56:	f100 0308 	add.w	r3, r0, #8
   22b5a:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   22b5e:	4770      	bx	lr

00022b60 <z_impl_k_queue_cancel_wait>:
{
   22b60:	b538      	push	{r3, r4, r5, lr}
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22b62:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   22b66:	f04f 0320 	mov.w	r3, #32
   22b6a:	f3ef 8511 	mrs	r5, BASEPRI
   22b6e:	f383 8811 	msr	BASEPRI, r3
	z_handle_obj_poll_events(&queue->poll_events, state);
   22b72:	2108      	movs	r1, #8
   22b74:	4620      	mov	r0, r4
   22b76:	f000 fb0b 	bl	23190 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22b7a:	4629      	mov	r1, r5
   22b7c:	4620      	mov	r0, r4
}
   22b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&queue->lock, key);
   22b82:	f000 b8b1 	b.w	22ce8 <z_reschedule>

00022b86 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   22b86:	460a      	mov	r2, r1
   22b88:	2300      	movs	r3, #0
   22b8a:	6841      	ldr	r1, [r0, #4]
   22b8c:	f7ff bf85 	b.w	22a9a <queue_insert>

00022b90 <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   22b90:	2300      	movs	r3, #0
   22b92:	460a      	mov	r2, r1
   22b94:	4619      	mov	r1, r3
   22b96:	f7ff bf80 	b.w	22a9a <queue_insert>

00022b9a <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   22b9a:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(head && tail, "invalid head or tail");

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22b9c:	f100 0508 	add.w	r5, r0, #8
   22ba0:	f04f 0320 	mov.w	r3, #32
   22ba4:	f3ef 8611 	mrs	r6, BASEPRI
   22ba8:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22bac:	6843      	ldr	r3, [r0, #4]
   22bae:	b95b      	cbnz	r3, 22bc8 <k_queue_append_list+0x2e>
	list->head = node;
   22bb0:	6001      	str	r1, [r0, #0]
	list->tail = node;
   22bb2:	6042      	str	r2, [r0, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22bb4:	2104      	movs	r1, #4
   22bb6:	4628      	mov	r0, r5
   22bb8:	f000 faea 	bl	23190 <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   22bbc:	4631      	mov	r1, r6
   22bbe:	4628      	mov	r0, r5
}
   22bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   22bc4:	f000 b890 	b.w	22ce8 <z_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22bc8:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22bca:	f004 0403 	and.w	r4, r4, #3
   22bce:	4321      	orrs	r1, r4
   22bd0:	6019      	str	r1, [r3, #0]
   22bd2:	e7ee      	b.n	22bb2 <k_queue_append_list+0x18>

00022bd4 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   22bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22bd8:	4604      	mov	r4, r0
   22bda:	b086      	sub	sp, #24
   22bdc:	460d      	mov	r5, r1
   22bde:	f04f 0320 	mov.w	r3, #32
   22be2:	f3ef 8711 	mrs	r7, BASEPRI
   22be6:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   22bea:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   22bec:	b188      	cbz	r0, 22c12 <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22bee:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   22bf0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22bf2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   22bf6:	4290      	cmp	r0, r2
	list->head = node;
   22bf8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   22bfa:	bf08      	it	eq
   22bfc:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   22bfe:	2101      	movs	r1, #1
   22c00:	f7ff ff9a 	bl	22b38 <z_queue_node_peek>
	__asm__ volatile(
   22c04:	f387 8811 	msr	BASEPRI, r7
   22c08:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   22c0c:	b006      	add	sp, #24
   22c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   22c12:	2900      	cmp	r1, #0
   22c14:	d0f6      	beq.n	22c04 <z_impl_k_queue_get+0x30>
   22c16:	f387 8811 	msr	BASEPRI, r7
   22c1a:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   22c1e:	2104      	movs	r1, #4
   22c20:	4602      	mov	r2, r0
   22c22:	4623      	mov	r3, r4
   22c24:	eb0d 0001 	add.w	r0, sp, r1
   22c28:	f7f9 fe38 	bl	1c89c <k_poll_event_init>
	if (timeout != K_FOREVER) {
   22c2c:	1c6a      	adds	r2, r5, #1
   22c2e:	d002      	beq.n	22c36 <z_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   22c30:	f000 fa04 	bl	2303c <z_impl_k_uptime_get_32>
   22c34:	4606      	mov	r6, r0
{
   22c36:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   22c38:	9b04      	ldr	r3, [sp, #16]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   22c3a:	1bea      	subs	r2, r5, r7
   22c3c:	f36f 3310 	bfc	r3, #12, #5
   22c40:	2101      	movs	r1, #1
   22c42:	a801      	add	r0, sp, #4
   22c44:	9304      	str	r3, [sp, #16]
   22c46:	f7f9 fe3d 	bl	1c8c4 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   22c4a:	b118      	cbz	r0, 22c54 <z_impl_k_queue_get+0x80>
   22c4c:	300b      	adds	r0, #11
   22c4e:	d001      	beq.n	22c54 <z_impl_k_queue_get+0x80>
			return NULL;
   22c50:	2000      	movs	r0, #0
   22c52:	e7db      	b.n	22c0c <z_impl_k_queue_get+0x38>
	__asm__ volatile(
   22c54:	f04f 0320 	mov.w	r3, #32
   22c58:	f3ef 8811 	mrs	r8, BASEPRI
   22c5c:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   22c60:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   22c62:	b138      	cbz	r0, 22c74 <z_impl_k_queue_get+0xa0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22c64:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   22c66:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22c68:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   22c6c:	4290      	cmp	r0, r2
	list->head = node;
   22c6e:	6023      	str	r3, [r4, #0]
	list->tail = node;
   22c70:	bf08      	it	eq
   22c72:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   22c74:	2101      	movs	r1, #1
   22c76:	f7ff ff5f 	bl	22b38 <z_queue_node_peek>
	__asm__ volatile(
   22c7a:	f388 8811 	msr	BASEPRI, r8
   22c7e:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   22c82:	2800      	cmp	r0, #0
   22c84:	d1c2      	bne.n	22c0c <z_impl_k_queue_get+0x38>
   22c86:	1c6b      	adds	r3, r5, #1
   22c88:	d0d6      	beq.n	22c38 <z_impl_k_queue_get+0x64>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   22c8a:	f000 f9d7 	bl	2303c <z_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   22c8e:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   22c90:	42bd      	cmp	r5, r7
   22c92:	dad1      	bge.n	22c38 <z_impl_k_queue_get+0x64>
   22c94:	e7dc      	b.n	22c50 <z_impl_k_queue_get+0x7c>

00022c96 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22c96:	7b43      	ldrb	r3, [r0, #13]
   22c98:	06db      	lsls	r3, r3, #27
   22c9a:	bf03      	ittte	eq
   22c9c:	6980      	ldreq	r0, [r0, #24]
   22c9e:	fab0 f080 	clzeq	r0, r0
   22ca2:	0940      	lsreq	r0, r0, #5
   22ca4:	2000      	movne	r0, #0
}
   22ca6:	4770      	bx	lr

00022ca8 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   22ca8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   22cac:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   22cb0:	4298      	cmp	r0, r3
   22cb2:	bfac      	ite	ge
   22cb4:	2000      	movge	r0, #0
   22cb6:	2001      	movlt	r0, #1
   22cb8:	4770      	bx	lr

00022cba <z_unpend_thread_no_timeout>:
{
   22cba:	b538      	push	{r3, r4, r5, lr}
   22cbc:	4604      	mov	r4, r0
	__asm__ volatile(
   22cbe:	f04f 0320 	mov.w	r3, #32
   22cc2:	f3ef 8511 	mrs	r5, BASEPRI
   22cc6:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22cca:	4601      	mov	r1, r0
   22ccc:	6880      	ldr	r0, [r0, #8]
   22cce:	f7f9 f833 	bl	1bd38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22cd2:	7b63      	ldrb	r3, [r4, #13]
   22cd4:	f023 0302 	bic.w	r3, r3, #2
   22cd8:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   22cda:	f385 8811 	msr	BASEPRI, r5
   22cde:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   22ce2:	2300      	movs	r3, #0
   22ce4:	60a3      	str	r3, [r4, #8]
}
   22ce6:	bd38      	pop	{r3, r4, r5, pc}

00022ce8 <z_reschedule>:
{
   22ce8:	b508      	push	{r3, lr}
	if (resched()) {
   22cea:	f7f8 ffc3 	bl	1bc74 <resched>
   22cee:	b120      	cbz	r0, 22cfa <z_reschedule+0x12>
   22cf0:	4608      	mov	r0, r1
}
   22cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22cf6:	f7e2 ba55 	b.w	51a4 <__swap>
   22cfa:	f381 8811 	msr	BASEPRI, r1
   22cfe:	f3bf 8f6f 	isb	sy
   22d02:	bd08      	pop	{r3, pc}

00022d04 <z_reschedule_irqlock>:
{
   22d04:	b508      	push	{r3, lr}
   22d06:	4602      	mov	r2, r0
	if (resched()) {
   22d08:	f7f8 ffb4 	bl	1bc74 <resched>
   22d0c:	b120      	cbz	r0, 22d18 <z_reschedule_irqlock+0x14>
   22d0e:	4610      	mov	r0, r2
}
   22d10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22d14:	f7e2 ba46 	b.w	51a4 <__swap>
   22d18:	f382 8811 	msr	BASEPRI, r2
   22d1c:	f3bf 8f6f 	isb	sy
   22d20:	bd08      	pop	{r3, pc}

00022d22 <z_reschedule_unlocked>:
	__asm__ volatile(
   22d22:	f04f 0320 	mov.w	r3, #32
   22d26:	f3ef 8011 	mrs	r0, BASEPRI
   22d2a:	f383 8811 	msr	BASEPRI, r3
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   22d2e:	f7ff bfe9 	b.w	22d04 <z_reschedule_irqlock>

00022d32 <z_unpend_thread>:
{
   22d32:	b538      	push	{r3, r4, r5, lr}
   22d34:	4604      	mov	r4, r0
   22d36:	f04f 0320 	mov.w	r3, #32
   22d3a:	f3ef 8511 	mrs	r5, BASEPRI
   22d3e:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22d42:	4601      	mov	r1, r0
   22d44:	6880      	ldr	r0, [r0, #8]
   22d46:	f7f8 fff7 	bl	1bd38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22d4a:	7b63      	ldrb	r3, [r4, #13]
   22d4c:	f023 0302 	bic.w	r3, r3, #2
   22d50:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   22d52:	f385 8811 	msr	BASEPRI, r5
   22d56:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   22d5a:	2300      	movs	r3, #0
   22d5c:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   22d5e:	f104 0018 	add.w	r0, r4, #24
}
   22d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22d66:	f000 b92b 	b.w	22fc0 <z_abort_timeout>

00022d6a <z_priq_dumb_best>:
	return list->head == list;
   22d6a:	6803      	ldr	r3, [r0, #0]
}
   22d6c:	4298      	cmp	r0, r3
   22d6e:	bf14      	ite	ne
   22d70:	4618      	movne	r0, r3
   22d72:	2000      	moveq	r0, #0
   22d74:	4770      	bx	lr

00022d76 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   22d76:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   22d7a:	b570      	push	{r4, r5, r6, lr}
   22d7c:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   22d7e:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   22d82:	b1bb      	cbz	r3, 22db4 <z_thread_timeout+0x3e>
	__asm__ volatile(
   22d84:	f04f 0320 	mov.w	r3, #32
   22d88:	f3ef 8611 	mrs	r6, BASEPRI
   22d8c:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22d90:	4629      	mov	r1, r5
   22d92:	f850 0c10 	ldr.w	r0, [r0, #-16]
   22d96:	f7f8 ffcf 	bl	1bd38 <z_priq_dumb_remove>
   22d9a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22d9e:	f023 0302 	bic.w	r3, r3, #2
   22da2:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   22da6:	f386 8811 	msr	BASEPRI, r6
   22daa:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   22dae:	2300      	movs	r3, #0
   22db0:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22db4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22db8:	f023 0304 	bic.w	r3, r3, #4
   22dbc:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   22dc0:	4628      	mov	r0, r5
   22dc2:	f7ff ff68 	bl	22c96 <z_is_thread_ready>
   22dc6:	b120      	cbz	r0, 22dd2 <z_thread_timeout+0x5c>
		z_add_thread_to_ready_q(thread);
   22dc8:	4628      	mov	r0, r5
}
   22dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22dce:	f7f9 b801 	b.w	1bdd4 <z_add_thread_to_ready_q>
   22dd2:	bd70      	pop	{r4, r5, r6, pc}

00022dd4 <z_unpend_first_thread>:
{
   22dd4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22dd6:	f04f 0320 	mov.w	r3, #32
   22dda:	f3ef 8211 	mrs	r2, BASEPRI
   22dde:	f383 8811 	msr	BASEPRI, r3
		ret = _priq_wait_best(&wait_q->waitq);
   22de2:	f7ff ffc2 	bl	22d6a <z_priq_dumb_best>
   22de6:	4604      	mov	r4, r0
	__asm__ volatile(
   22de8:	f382 8811 	msr	BASEPRI, r2
   22dec:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   22df0:	b1b8      	cbz	r0, 22e22 <z_unpend_first_thread+0x4e>
	__asm__ volatile(
   22df2:	f04f 0320 	mov.w	r3, #32
   22df6:	f3ef 8511 	mrs	r5, BASEPRI
   22dfa:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   22dfe:	4601      	mov	r1, r0
   22e00:	6880      	ldr	r0, [r0, #8]
   22e02:	f7f8 ff99 	bl	1bd38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22e06:	7b63      	ldrb	r3, [r4, #13]
   22e08:	f023 0302 	bic.w	r3, r3, #2
   22e0c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   22e0e:	f385 8811 	msr	BASEPRI, r5
   22e12:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   22e16:	2300      	movs	r3, #0
   22e18:	60a3      	str	r3, [r4, #8]
   22e1a:	f104 0018 	add.w	r0, r4, #24
   22e1e:	f000 f8cf 	bl	22fc0 <z_abort_timeout>
}
   22e22:	4620      	mov	r0, r4
   22e24:	bd38      	pop	{r3, r4, r5, pc}

00022e26 <z_unpend_all>:
{
   22e26:	b570      	push	{r4, r5, r6, lr}
   22e28:	4606      	mov	r6, r0
	int need_sched = 0;
   22e2a:	2500      	movs	r5, #0
   22e2c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e2e:	42a6      	cmp	r6, r4
   22e30:	d000      	beq.n	22e34 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   22e32:	b90c      	cbnz	r4, 22e38 <z_unpend_all+0x12>
}
   22e34:	4628      	mov	r0, r5
   22e36:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   22e38:	4620      	mov	r0, r4
   22e3a:	f7ff ff7a 	bl	22d32 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   22e3e:	4620      	mov	r0, r4
   22e40:	f7ff ff29 	bl	22c96 <z_is_thread_ready>
		need_sched = 1;
   22e44:	2501      	movs	r5, #1
   22e46:	2800      	cmp	r0, #0
   22e48:	d0f0      	beq.n	22e2c <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   22e4a:	4620      	mov	r0, r4
   22e4c:	f7f8 ffc2 	bl	1bdd4 <z_add_thread_to_ready_q>
   22e50:	e7ec      	b.n	22e2c <z_unpend_all+0x6>

00022e52 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   22e52:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   22e56:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   22e5a:	e9c0 0000 	strd	r0, r0, [r0]
   22e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22e62:	4770      	bx	lr

00022e64 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   22e64:	7b43      	ldrb	r3, [r0, #13]
   22e66:	06db      	lsls	r3, r3, #27
   22e68:	bf03      	ittte	eq
   22e6a:	6980      	ldreq	r0, [r0, #24]
   22e6c:	fab0 f080 	clzeq	r0, r0
   22e70:	0940      	lsreq	r0, r0, #5
   22e72:	2000      	movne	r0, #0
}
   22e74:	4770      	bx	lr

00022e76 <k_thread_foreach>:
}
   22e76:	4770      	bx	lr

00022e78 <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
   22e78:	f7e0 ba78 	b.w	336c <z_arch_busy_wait>

00022e7c <z_impl_k_thread_name_set>:
}
   22e7c:	4770      	bx	lr

00022e7e <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   22e7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   22e80:	b510      	push	{r4, lr}
   22e82:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   22e84:	b103      	cbz	r3, 22e88 <z_thread_single_abort+0xa>
		thread->fn_abort();
   22e86:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   22e88:	4620      	mov	r0, r4
   22e8a:	f7ff ffeb 	bl	22e64 <z_is_thread_ready>
   22e8e:	b138      	cbz	r0, 22ea0 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   22e90:	4620      	mov	r0, r4
   22e92:	f7f9 f845 	bl	1bf20 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   22e96:	7b63      	ldrb	r3, [r4, #13]
   22e98:	f043 0308 	orr.w	r3, r3, #8
   22e9c:	7363      	strb	r3, [r4, #13]
}
   22e9e:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   22ea0:	7b63      	ldrb	r3, [r4, #13]
   22ea2:	079b      	lsls	r3, r3, #30
   22ea4:	d502      	bpl.n	22eac <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   22ea6:	4620      	mov	r0, r4
   22ea8:	f7ff ff07 	bl	22cba <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   22eac:	69a3      	ldr	r3, [r4, #24]
   22eae:	2b00      	cmp	r3, #0
   22eb0:	d0f1      	beq.n	22e96 <z_thread_single_abort+0x18>
   22eb2:	f104 0018 	add.w	r0, r4, #24
   22eb6:	f000 f883 	bl	22fc0 <z_abort_timeout>
   22eba:	e7ec      	b.n	22e96 <z_thread_single_abort+0x18>

00022ebc <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   22ebc:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   22ebe:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   22ec0:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   22ec2:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0;
   22ec4:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   22ec6:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   22eca:	4770      	bx	lr

00022ecc <k_work_submit_to_queue>:
{
   22ecc:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22ece:	f101 0308 	add.w	r3, r1, #8
   22ed2:	f3bf 8f5b 	dmb	ish
   22ed6:	e853 2f00 	ldrex	r2, [r3]
   22eda:	f042 0c01 	orr.w	ip, r2, #1
   22ede:	e843 ce00 	strex	lr, ip, [r3]
   22ee2:	f1be 0f00 	cmp.w	lr, #0
   22ee6:	d1f6      	bne.n	22ed6 <k_work_submit_to_queue+0xa>
   22ee8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   22eec:	07d3      	lsls	r3, r2, #31
   22eee:	d403      	bmi.n	22ef8 <k_work_submit_to_queue+0x2c>
}
   22ef0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   22ef4:	f7ff be47 	b.w	22b86 <k_queue_append>
}
   22ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00022efc <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   22efc:	f1a0 010c 	sub.w	r1, r0, #12
   22f00:	6900      	ldr	r0, [r0, #16]
   22f02:	f7ff bfe3 	b.w	22ecc <k_work_submit_to_queue>

00022f06 <work_cancel>:
{
   22f06:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22f08:	f3bf 8f5b 	dmb	ish
   22f0c:	6883      	ldr	r3, [r0, #8]
   22f0e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   22f12:	07db      	lsls	r3, r3, #31
{
   22f14:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   22f16:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   22f1a:	d532      	bpl.n	22f82 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   22f1c:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   22f1e:	6813      	ldr	r3, [r2, #0]
   22f20:	2100      	movs	r1, #0
   22f22:	b913      	cbnz	r3, 22f2a <work_cancel+0x24>
			return -EINVAL;
   22f24:	f06f 0015 	mvn.w	r0, #21
}
   22f28:	bd70      	pop	{r4, r5, r6, pc}
   22f2a:	429c      	cmp	r4, r3
   22f2c:	d124      	bne.n	22f78 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   22f2e:	6823      	ldr	r3, [r4, #0]
   22f30:	6856      	ldr	r6, [r2, #4]
   22f32:	f023 0003 	bic.w	r0, r3, #3
   22f36:	b9b1      	cbnz	r1, 22f66 <work_cancel+0x60>
   22f38:	42b4      	cmp	r4, r6
	list->head = node;
   22f3a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   22f3c:	d100      	bne.n	22f40 <work_cancel+0x3a>
	list->tail = node;
   22f3e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22f40:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22f42:	f003 0303 	and.w	r3, r3, #3
   22f46:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   22f48:	2000      	movs	r0, #0
   22f4a:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22f4c:	f3bf 8f5b 	dmb	ish
   22f50:	e855 3f00 	ldrex	r3, [r5]
   22f54:	f023 0301 	bic.w	r3, r3, #1
   22f58:	e845 3200 	strex	r2, r3, [r5]
   22f5c:	2a00      	cmp	r2, #0
   22f5e:	d1f7      	bne.n	22f50 <work_cancel+0x4a>
   22f60:	f3bf 8f5b 	dmb	ish
   22f64:	e7e0      	b.n	22f28 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22f66:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22f68:	f003 0303 	and.w	r3, r3, #3
   22f6c:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   22f6e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   22f70:	600b      	str	r3, [r1, #0]
	list->tail = node;
   22f72:	bf08      	it	eq
   22f74:	6051      	streq	r1, [r2, #4]
   22f76:	e7e3      	b.n	22f40 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22f78:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   22f7a:	4619      	mov	r1, r3
   22f7c:	f020 0303 	bic.w	r3, r0, #3
   22f80:	e7cf      	b.n	22f22 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   22f82:	300c      	adds	r0, #12
   22f84:	f000 f81c 	bl	22fc0 <z_abort_timeout>
   22f88:	e7de      	b.n	22f48 <work_cancel+0x42>

00022f8a <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22f8a:	2300      	movs	r3, #0
   22f8c:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   22f90:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   22f94:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   22f96:	61c3      	str	r3, [r0, #28]
}
   22f98:	4770      	bx	lr

00022f9a <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   22f9a:	69c3      	ldr	r3, [r0, #28]
{
   22f9c:	b510      	push	{r4, lr}
	if (!work->work_q) {
   22f9e:	b163      	cbz	r3, 22fba <k_delayed_work_cancel+0x20>
	__asm__ volatile(
   22fa0:	f04f 0320 	mov.w	r3, #32
   22fa4:	f3ef 8411 	mrs	r4, BASEPRI
   22fa8:	f383 8811 	msr	BASEPRI, r3
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   22fac:	f7ff ffab 	bl	22f06 <work_cancel>
	__asm__ volatile(
   22fb0:	f384 8811 	msr	BASEPRI, r4
   22fb4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   22fb8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22fba:	f06f 0015 	mvn.w	r0, #21
   22fbe:	e7fb      	b.n	22fb8 <k_delayed_work_cancel+0x1e>

00022fc0 <z_abort_timeout>:
{
   22fc0:	b510      	push	{r4, lr}
	__asm__ volatile(
   22fc2:	f04f 0220 	mov.w	r2, #32
   22fc6:	f3ef 8411 	mrs	r4, BASEPRI
   22fca:	f382 8811 	msr	BASEPRI, r2
		if (sys_dnode_is_linked(&to->node)) {
   22fce:	6803      	ldr	r3, [r0, #0]
   22fd0:	b13b      	cbz	r3, 22fe2 <z_abort_timeout+0x22>
			remove_timeout(to);
   22fd2:	f7f9 fafd 	bl	1c5d0 <remove_timeout>
			ret = 0;
   22fd6:	2000      	movs	r0, #0
	__asm__ volatile(
   22fd8:	f384 8811 	msr	BASEPRI, r4
   22fdc:	f3bf 8f6f 	isb	sy
}
   22fe0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   22fe2:	f06f 0015 	mvn.w	r0, #21
   22fe6:	e7f7      	b.n	22fd8 <z_abort_timeout+0x18>

00022fe8 <z_get_next_timeout_expiry>:
{
   22fe8:	b510      	push	{r4, lr}
	__asm__ volatile(
   22fea:	f04f 0320 	mov.w	r3, #32
   22fee:	f3ef 8411 	mrs	r4, BASEPRI
   22ff2:	f383 8811 	msr	BASEPRI, r3
		ret = next_timeout();
   22ff6:	f7f9 faff 	bl	1c5f8 <next_timeout>
	__asm__ volatile(
   22ffa:	f384 8811 	msr	BASEPRI, r4
   22ffe:	f3bf 8f6f 	isb	sy
}
   23002:	bd10      	pop	{r4, pc}

00023004 <z_set_timeout_expiry>:
{
   23004:	b570      	push	{r4, r5, r6, lr}
   23006:	4604      	mov	r4, r0
   23008:	460e      	mov	r6, r1
	__asm__ volatile(
   2300a:	f04f 0320 	mov.w	r3, #32
   2300e:	f3ef 8511 	mrs	r5, BASEPRI
   23012:	f383 8811 	msr	BASEPRI, r3
		int next = next_timeout();
   23016:	f7f9 faef 	bl	1c5f8 <next_timeout>
		if (sooner && !imminent) {
   2301a:	42a0      	cmp	r0, r4
   2301c:	dd05      	ble.n	2302a <z_set_timeout_expiry+0x26>
   2301e:	2801      	cmp	r0, #1
   23020:	dd03      	ble.n	2302a <z_set_timeout_expiry+0x26>
			z_clock_set_timeout(ticks, idle);
   23022:	4631      	mov	r1, r6
   23024:	4620      	mov	r0, r4
   23026:	f7e2 f835 	bl	5094 <z_clock_set_timeout>
	__asm__ volatile(
   2302a:	f385 8811 	msr	BASEPRI, r5
   2302e:	f3bf 8f6f 	isb	sy
}
   23032:	bd70      	pop	{r4, r5, r6, pc}

00023034 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   23034:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   23036:	f7f9 fbc1 	bl	1c7bc <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   2303a:	bd08      	pop	{r3, pc}

0002303c <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
   2303c:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
   2303e:	f7ff fff9 	bl	23034 <z_tick_get_32>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   23042:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   23046:	2264      	movs	r2, #100	; 0x64
   23048:	2300      	movs	r3, #0
   2304a:	fba0 0101 	umull	r0, r1, r0, r1
   2304e:	f7dd f897 	bl	180 <__aeabi_uldivmod>
}
   23052:	bd08      	pop	{r3, pc}

00023054 <z_impl_k_uptime_get>:
	return z_impl_k_uptime_get_32();
}
#endif

s64_t z_impl_k_uptime_get(void)
{
   23054:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(z_tick_get());
   23056:	f7f9 fbb1 	bl	1c7bc <z_tick_get>
   2305a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2305e:	fba0 4503 	umull	r4, r5, r0, r3
   23062:	fb03 5501 	mla	r5, r3, r1, r5
   23066:	2264      	movs	r2, #100	; 0x64
   23068:	2300      	movs	r3, #0
   2306a:	4620      	mov	r0, r4
   2306c:	4629      	mov	r1, r5
   2306e:	f7dd f887 	bl	180 <__aeabi_uldivmod>
}
   23072:	bd38      	pop	{r3, r4, r5, pc}

00023074 <k_timer_init>:
	timer->status = 0;
   23074:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   23076:	e9c0 1206 	strd	r1, r2, [r0, #24]
   2307a:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0;
   2307e:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   23080:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   23084:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   23088:	6283      	str	r3, [r0, #40]	; 0x28
}
   2308a:	4770      	bx	lr

0002308c <clear_event_registrations>:
	for (; last_registered >= 0; last_registered--) {
   2308c:	2314      	movs	r3, #20
{
   2308e:	b570      	push	{r4, r5, r6, lr}
   23090:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   23094:	2400      	movs	r4, #0
   23096:	2601      	movs	r6, #1
	for (; last_registered >= 0; last_registered--) {
   23098:	2900      	cmp	r1, #0
   2309a:	da00      	bge.n	2309e <clear_event_registrations+0x12>
}
   2309c:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   2309e:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   230a0:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   230a2:	f003 030f 	and.w	r3, r3, #15
   230a6:	2b04      	cmp	r3, #4
   230a8:	d80b      	bhi.n	230c2 <clear_event_registrations+0x36>
   230aa:	fa06 f303 	lsl.w	r3, r6, r3
   230ae:	f013 0f16 	tst.w	r3, #22
   230b2:	d006      	beq.n	230c2 <clear_event_registrations+0x36>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   230b4:	6803      	ldr	r3, [r0, #0]
   230b6:	b123      	cbz	r3, 230c2 <clear_event_registrations+0x36>
	node->prev->next = node->next;
   230b8:	6845      	ldr	r5, [r0, #4]
   230ba:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   230bc:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   230be:	e9c0 4400 	strd	r4, r4, [r0]
   230c2:	f382 8811 	msr	BASEPRI, r2
   230c6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   230ca:	f04f 0320 	mov.w	r3, #32
   230ce:	f3ef 8211 	mrs	r2, BASEPRI
   230d2:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   230d6:	3901      	subs	r1, #1
   230d8:	3814      	subs	r0, #20
   230da:	e7dd      	b.n	23098 <clear_event_registrations+0xc>

000230dc <signal_poll_event>:
	if (!event->poller) {
   230dc:	6883      	ldr	r3, [r0, #8]
{
   230de:	b570      	push	{r4, r5, r6, lr}
   230e0:	4605      	mov	r5, r0
   230e2:	460e      	mov	r6, r1
	if (!event->poller) {
   230e4:	b1cb      	cbz	r3, 2311a <signal_poll_event+0x3e>
	event->poller->is_polling = false;
   230e6:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   230e8:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
   230ea:	711a      	strb	r2, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   230ec:	7b63      	ldrb	r3, [r4, #13]
   230ee:	079a      	lsls	r2, r3, #30
   230f0:	d513      	bpl.n	2311a <signal_poll_event+0x3e>
	if (z_is_thread_timeout_expired(thread)) {
   230f2:	6a23      	ldr	r3, [r4, #32]
   230f4:	3302      	adds	r3, #2
   230f6:	d01a      	beq.n	2312e <signal_poll_event+0x52>
	z_unpend_thread(thread);
   230f8:	4620      	mov	r0, r4
   230fa:	f7ff fe1a 	bl	22d32 <z_unpend_thread>
	z_set_thread_return_value(thread,
   230fe:	2e08      	cmp	r6, #8
   23100:	bf0c      	ite	eq
   23102:	f06f 0303 	mvneq.w	r3, #3
   23106:	2300      	movne	r3, #0
   23108:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2310a:	7b63      	ldrb	r3, [r4, #13]
   2310c:	06db      	lsls	r3, r3, #27
   2310e:	d104      	bne.n	2311a <signal_poll_event+0x3e>
	if (!z_is_thread_ready(thread)) {
   23110:	69a3      	ldr	r3, [r4, #24]
   23112:	b913      	cbnz	r3, 2311a <signal_poll_event+0x3e>
		z_add_thread_to_ready_q(thread);
   23114:	4620      	mov	r0, r4
   23116:	f7f8 fe5d 	bl	1bdd4 <z_add_thread_to_ready_q>
	event->state |= state;
   2311a:	68eb      	ldr	r3, [r5, #12]
   2311c:	f3c3 3204 	ubfx	r2, r3, #12, #5
   23120:	4316      	orrs	r6, r2
	event->poller = NULL;
   23122:	2000      	movs	r0, #0
	event->state |= state;
   23124:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   23128:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2312a:	60eb      	str	r3, [r5, #12]
}
   2312c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   2312e:	f06f 000a 	mvn.w	r0, #10
   23132:	e7fb      	b.n	2312c <signal_poll_event+0x50>

00023134 <add_event>:
{
   23134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23136:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   23138:	e9d0 2300 	ldrd	r2, r3, [r0]
   2313c:	4290      	cmp	r0, r2
   2313e:	4604      	mov	r4, r0
   23140:	460d      	mov	r5, r1
   23142:	d106      	bne.n	23152 <add_event+0x1e>
	node->prev = list->tail;
   23144:	6863      	ldr	r3, [r4, #4]
   23146:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   23148:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2314a:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2314c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2314e:	6065      	str	r5, [r4, #4]
}
   23150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   23152:	2b00      	cmp	r3, #0
   23154:	d0f6      	beq.n	23144 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   23156:	689b      	ldr	r3, [r3, #8]
   23158:	6839      	ldr	r1, [r7, #0]
   2315a:	6818      	ldr	r0, [r3, #0]
   2315c:	f7ff fda4 	bl	22ca8 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   23160:	2800      	cmp	r0, #0
   23162:	d1ef      	bne.n	23144 <add_event+0x10>
	return list->head == list;
   23164:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23166:	42b4      	cmp	r4, r6
   23168:	d0ec      	beq.n	23144 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2316a:	2e00      	cmp	r6, #0
   2316c:	d0ea      	beq.n	23144 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2316e:	68b3      	ldr	r3, [r6, #8]
   23170:	6838      	ldr	r0, [r7, #0]
   23172:	6819      	ldr	r1, [r3, #0]
   23174:	f7ff fd98 	bl	22ca8 <z_is_t1_higher_prio_than_t2>
   23178:	b128      	cbz	r0, 23186 <add_event+0x52>
	node->prev = successor->prev;
   2317a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2317c:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   23180:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23182:	6075      	str	r5, [r6, #4]
			return;
   23184:	e7e4      	b.n	23150 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   23186:	6863      	ldr	r3, [r4, #4]
   23188:	429e      	cmp	r6, r3
   2318a:	d0db      	beq.n	23144 <add_event+0x10>
   2318c:	6836      	ldr	r6, [r6, #0]
   2318e:	e7ec      	b.n	2316a <add_event+0x36>

00023190 <z_handle_obj_poll_events>:
	return list->head == list;
   23190:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   23192:	4298      	cmp	r0, r3
   23194:	d009      	beq.n	231aa <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   23196:	e9d3 2000 	ldrd	r2, r0, [r3]
   2319a:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   2319c:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   2319e:	2200      	movs	r2, #0
	node->prev = NULL;
   231a0:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   231a4:	4618      	mov	r0, r3
   231a6:	f7ff bf99 	b.w	230dc <signal_poll_event>
}
   231aa:	4770      	bx	lr

000231ac <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   231ac:	4770      	bx	lr
