
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20003d18 	.word	0x20003d18

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	00005359 	.word	0x00005359
   8:	00021cb3 	.word	0x00021cb3
		if (fdtable[fd].obj == NULL) {
   c:	000051e9 	.word	0x000051e9
  10:	000051e9 	.word	0x000051e9
  14:	000051e9 	.word	0x000051e9
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	000051e9 	.word	0x000051e9

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	000051e9 	.word	0x000051e9
	errno = ENFILE;
  20:	000051e9 	.word	0x000051e9
	return -1;
  24:	000051e9 	.word	0x000051e9

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	000051e9 	.word	0x000051e9
  2c:	00004e01 	.word	0x00004e01
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	000051e9 	.word	0x000051e9
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	000051e9 	.word	0x000051e9
  38:	00004dad 	.word	0x00004dad
  3c:	00021c99 	.word	0x00021c99

00000040 <_irq_vector_table>:
  40:	00005319 00024981 00005319 00005319     .S...I...S...S..
		sys_pm_notify_lps_exit(pm_state);
		sys_power_state_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00005319 00005319 00005319 00005319     .S...S...S...S..
  60:	00005319 00005319 00005319 00005319     .S...S...S...S..
  70:	00005319 00005319 00005319 00005319     .S...S...S...S..
  80:	00005319 00005319 00005319 00005319     .S...S...S...S..
  90:	00005319 00005319 00005319 00005319     .S...S...S...S..
  a0:	00005319 00005319 00005319 00005319     .S...S...S...S..
  b0:	00005319 00005319 00005319 00005319     .S...S...S...S..
  c0:	00005319 00005319 00005319 00005319     .S...S...S...S..
  d0:	00005319 00005319 00005319              .S...S...S..

Disassembly of section _TEXT_SECTION_NAME_2:

000000e0 <__aeabi_ldivmod>:
      e0:	b97b      	cbnz	r3, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e2:	b972      	cbnz	r2, 102 <CONFIG_KOBJECT_TEXT_AREA+0x2>
      e4:	2900      	cmp	r1, #0
      e6:	bfbe      	ittt	lt
      e8:	2000      	movlt	r0, #0
      ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
      ee:	e006      	blt.n	fe <__aeabi_ldivmod+0x1e>
      f0:	bf08      	it	eq
      f2:	2800      	cmpeq	r0, #0
      f4:	bf1c      	itt	ne
      f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
      fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      fe:	f000 b857 	b.w	1b0 <__aeabi_idiv0>
     102:	f1ad 0c08 	sub.w	ip, sp, #8
     106:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     10a:	2900      	cmp	r1, #0
     10c:	db09      	blt.n	122 <CONFIG_KOBJECT_TEXT_AREA+0x22>
     10e:	2b00      	cmp	r3, #0
     110:	db1a      	blt.n	148 <CONFIG_IDLE_STACK_SIZE+0x8>
     112:	f000 f862 	bl	1da <__udivmoddi4>
     116:	f8dd e004 	ldr.w	lr, [sp, #4]
     11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     11e:	b004      	add	sp, #16
     120:	4770      	bx	lr
     122:	4240      	negs	r0, r0
     124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     128:	2b00      	cmp	r3, #0
     12a:	db1b      	blt.n	164 <CONFIG_IDLE_STACK_SIZE+0x24>
     12c:	f000 f855 	bl	1da <__udivmoddi4>
     130:	f8dd e004 	ldr.w	lr, [sp, #4]
     134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     138:	b004      	add	sp, #16
     13a:	4240      	negs	r0, r0
     13c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     140:	4252      	negs	r2, r2
     142:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     146:	4770      	bx	lr
     148:	4252      	negs	r2, r2
     14a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     14e:	f000 f844 	bl	1da <__udivmoddi4>
     152:	f8dd e004 	ldr.w	lr, [sp, #4]
     156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     15a:	b004      	add	sp, #16
     15c:	4240      	negs	r0, r0
     15e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     162:	4770      	bx	lr
     164:	4252      	negs	r2, r2
     166:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16a:	f000 f836 	bl	1da <__udivmoddi4>
     16e:	f8dd e004 	ldr.w	lr, [sp, #4]
     172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     176:	b004      	add	sp, #16
     178:	4252      	negs	r2, r2
     17a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     17e:	4770      	bx	lr

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <__aeabi_uldivmod+0x18>
     182:	b94a      	cbnz	r2, 198 <__aeabi_uldivmod+0x18>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     194:	f000 b80c 	b.w	1b0 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f81b 	bl	1da <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__aeabi_idiv0>:
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop

000001b4 <__popcountsi2>:
     1b4:	0843      	lsrs	r3, r0, #1
     1b6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     1ba:	1ac0      	subs	r0, r0, r3
     1bc:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
     1c0:	0880      	lsrs	r0, r0, #2
     1c2:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     1c6:	4418      	add	r0, r3
     1c8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     1cc:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
     1d0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     1d4:	4358      	muls	r0, r3
     1d6:	0e00      	lsrs	r0, r0, #24
     1d8:	4770      	bx	lr

000001da <__udivmoddi4>:
     1da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1de:	9f09      	ldr	r7, [sp, #36]	; 0x24
     1e0:	4615      	mov	r5, r2
     1e2:	4604      	mov	r4, r0
     1e4:	468e      	mov	lr, r1
     1e6:	461e      	mov	r6, r3
     1e8:	2b00      	cmp	r3, #0
     1ea:	f040 80cc 	bne.w	386 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x86>
     1ee:	428a      	cmp	r2, r1
     1f0:	fab2 fc82 	clz	ip, r2
     1f4:	d94c      	bls.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     1f6:	f1bc 0f00 	cmp.w	ip, #0
     1fa:	d00b      	beq.n	214 <CONFIG_FLASH_SIZE+0x14>
     1fc:	f1cc 0820 	rsb	r8, ip, #32
     200:	fa01 fe0c 	lsl.w	lr, r1, ip
     204:	fa20 f808 	lsr.w	r8, r0, r8
     208:	fa02 f50c 	lsl.w	r5, r2, ip
     20c:	ea48 0e0e 	orr.w	lr, r8, lr
     210:	fa00 f40c 	lsl.w	r4, r0, ip
     214:	ea4f 4915 	mov.w	r9, r5, lsr #16
     218:	fa1f f885 	uxth.w	r8, r5
     21c:	fbbe faf9 	udiv	sl, lr, r9
     220:	0c21      	lsrs	r1, r4, #16
     222:	fb09 e31a 	mls	r3, r9, sl, lr
     226:	fb0a fb08 	mul.w	fp, sl, r8
     22a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     22e:	459b      	cmp	fp, r3
     230:	d92a      	bls.n	288 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     232:	18eb      	adds	r3, r5, r3
     234:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     238:	d204      	bcs.n	244 <CONFIG_FLASH_SIZE+0x44>
     23a:	459b      	cmp	fp, r3
     23c:	d902      	bls.n	244 <CONFIG_FLASH_SIZE+0x44>
     23e:	f1aa 0002 	sub.w	r0, sl, #2
     242:	442b      	add	r3, r5
     244:	eba3 030b 	sub.w	r3, r3, fp
     248:	b2a4      	uxth	r4, r4
     24a:	fbb3 f2f9 	udiv	r2, r3, r9
     24e:	fb09 3312 	mls	r3, r9, r2, r3
     252:	fb02 f808 	mul.w	r8, r2, r8
     256:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     25a:	45a0      	cmp	r8, r4
     25c:	d916      	bls.n	28c <CONFIG_BT_HCI_TX_STACK_SIZE+0xc>
     25e:	192c      	adds	r4, r5, r4
     260:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     264:	d203      	bcs.n	26e <CONFIG_FLASH_SIZE+0x6e>
     266:	45a0      	cmp	r8, r4
     268:	d901      	bls.n	26e <CONFIG_FLASH_SIZE+0x6e>
     26a:	1e93      	subs	r3, r2, #2
     26c:	442c      	add	r4, r5
     26e:	eba4 0408 	sub.w	r4, r4, r8
     272:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     276:	b127      	cbz	r7, 282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     278:	fa24 f40c 	lsr.w	r4, r4, ip
     27c:	2300      	movs	r3, #0
     27e:	603c      	str	r4, [r7, #0]
     280:	607b      	str	r3, [r7, #4]
     282:	4631      	mov	r1, r6
     284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     288:	4650      	mov	r0, sl
     28a:	e7db      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     28c:	4613      	mov	r3, r2
     28e:	e7ee      	b.n	26e <CONFIG_FLASH_SIZE+0x6e>
     290:	b902      	cbnz	r2, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     292:	deff      	udf	#255	; 0xff
     294:	f1bc 0f00 	cmp.w	ip, #0
     298:	d12e      	bne.n	2f8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     29a:	1a8b      	subs	r3, r1, r2
     29c:	2601      	movs	r6, #1
     29e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a2:	b2aa      	uxth	r2, r5
     2a4:	fbb3 f8fe 	udiv	r8, r3, lr
     2a8:	0c21      	lsrs	r1, r4, #16
     2aa:	fb0e 3318 	mls	r3, lr, r8, r3
     2ae:	fb08 f902 	mul.w	r9, r8, r2
     2b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     2b6:	4599      	cmp	r9, r3
     2b8:	d961      	bls.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     2ba:	18eb      	adds	r3, r5, r3
     2bc:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     2c0:	d204      	bcs.n	2cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     2c2:	4599      	cmp	r9, r3
     2c4:	d902      	bls.n	2cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     2c6:	f1a8 0002 	sub.w	r0, r8, #2
     2ca:	442b      	add	r3, r5
     2cc:	eba3 0309 	sub.w	r3, r3, r9
     2d0:	b2a4      	uxth	r4, r4
     2d2:	fbb3 f1fe 	udiv	r1, r3, lr
     2d6:	fb0e 3311 	mls	r3, lr, r1, r3
     2da:	434a      	muls	r2, r1
     2dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2e0:	42a2      	cmp	r2, r4
     2e2:	d94e      	bls.n	382 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x82>
     2e4:	192c      	adds	r4, r5, r4
     2e6:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     2ea:	d203      	bcs.n	2f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x74>
     2ec:	42a2      	cmp	r2, r4
     2ee:	d901      	bls.n	2f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x74>
     2f0:	1e8b      	subs	r3, r1, #2
     2f2:	442c      	add	r4, r5
     2f4:	1aa4      	subs	r4, r4, r2
     2f6:	e7bc      	b.n	272 <CONFIG_FLASH_SIZE+0x72>
     2f8:	f1cc 0e20 	rsb	lr, ip, #32
     2fc:	fa02 f50c 	lsl.w	r5, r2, ip
     300:	fa21 f90e 	lsr.w	r9, r1, lr
     304:	fa01 f30c 	lsl.w	r3, r1, ip
     308:	fa20 fe0e 	lsr.w	lr, r0, lr
     30c:	ea4e 0303 	orr.w	r3, lr, r3
     310:	ea4f 4815 	mov.w	r8, r5, lsr #16
     314:	fa00 f40c 	lsl.w	r4, r0, ip
     318:	fbb9 f1f8 	udiv	r1, r9, r8
     31c:	fa1f fe85 	uxth.w	lr, r5
     320:	fb08 9211 	mls	r2, r8, r1, r9
     324:	0c18      	lsrs	r0, r3, #16
     326:	fb01 f60e 	mul.w	r6, r1, lr
     32a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     32e:	4296      	cmp	r6, r2
     330:	d921      	bls.n	376 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x76>
     332:	18aa      	adds	r2, r5, r2
     334:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     338:	d203      	bcs.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33a:	4296      	cmp	r6, r2
     33c:	d901      	bls.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33e:	1e88      	subs	r0, r1, #2
     340:	442a      	add	r2, r5
     342:	1b92      	subs	r2, r2, r6
     344:	b29b      	uxth	r3, r3
     346:	fbb2 f9f8 	udiv	r9, r2, r8
     34a:	fb08 2219 	mls	r2, r8, r9, r2
     34e:	fb09 fe0e 	mul.w	lr, r9, lr
     352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     356:	459e      	cmp	lr, r3
     358:	d90f      	bls.n	37a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7a>
     35a:	18eb      	adds	r3, r5, r3
     35c:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     360:	d204      	bcs.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     362:	459e      	cmp	lr, r3
     364:	d902      	bls.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     366:	f1a9 0602 	sub.w	r6, r9, #2
     36a:	442b      	add	r3, r5
     36c:	eba3 030e 	sub.w	r3, r3, lr
     370:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     374:	e793      	b.n	29e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     376:	4608      	mov	r0, r1
     378:	e7e3      	b.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     37a:	464e      	mov	r6, r9
     37c:	e7f6      	b.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     37e:	4640      	mov	r0, r8
     380:	e7a4      	b.n	2cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x4c>
     382:	460b      	mov	r3, r1
     384:	e7b6      	b.n	2f4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x74>
     386:	428b      	cmp	r3, r1
     388:	d905      	bls.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     38a:	b10f      	cbz	r7, 390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     38c:	e9c7 0100 	strd	r0, r1, [r7]
     390:	2600      	movs	r6, #0
     392:	4630      	mov	r0, r6
     394:	e775      	b.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     396:	fab3 fc83 	clz	ip, r3
     39a:	f1bc 0f00 	cmp.w	ip, #0
     39e:	d10f      	bne.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     3a0:	428b      	cmp	r3, r1
     3a2:	d301      	bcc.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     3a4:	4282      	cmp	r2, r0
     3a6:	d809      	bhi.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     3a8:	1a84      	subs	r4, r0, r2
     3aa:	eb61 0e03 	sbc.w	lr, r1, r3
     3ae:	2001      	movs	r0, #1
     3b0:	2f00      	cmp	r7, #0
     3b2:	d06a      	beq.n	48a <CONFIG_LOG_BUFFER_SIZE+0x8a>
     3b4:	e9c7 4e00 	strd	r4, lr, [r7]
     3b8:	2600      	movs	r6, #0
     3ba:	e762      	b.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     3bc:	4660      	mov	r0, ip
     3be:	e7f7      	b.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     3c0:	f1cc 0e20 	rsb	lr, ip, #32
     3c4:	fa03 f30c 	lsl.w	r3, r3, ip
     3c8:	fa22 f50e 	lsr.w	r5, r2, lr
     3cc:	fa21 f40e 	lsr.w	r4, r1, lr
     3d0:	431d      	orrs	r5, r3
     3d2:	fa01 f30c 	lsl.w	r3, r1, ip
     3d6:	fa20 f10e 	lsr.w	r1, r0, lr
     3da:	430b      	orrs	r3, r1
     3dc:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     3e0:	fa00 f60c 	lsl.w	r6, r0, ip
     3e4:	fbb4 f9fa 	udiv	r9, r4, sl
     3e8:	fa1f f885 	uxth.w	r8, r5
     3ec:	fb0a 4019 	mls	r0, sl, r9, r4
     3f0:	0c1c      	lsrs	r4, r3, #16
     3f2:	fb09 f108 	mul.w	r1, r9, r8
     3f6:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     3fa:	42a1      	cmp	r1, r4
     3fc:	fa02 f20c 	lsl.w	r2, r2, ip
     400:	d93f      	bls.n	482 <CONFIG_LOG_BUFFER_SIZE+0x82>
     402:	192c      	adds	r4, r5, r4
     404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     408:	d204      	bcs.n	414 <CONFIG_LOG_BUFFER_SIZE+0x14>
     40a:	42a1      	cmp	r1, r4
     40c:	d902      	bls.n	414 <CONFIG_LOG_BUFFER_SIZE+0x14>
     40e:	f1a9 0002 	sub.w	r0, r9, #2
     412:	442c      	add	r4, r5
     414:	1a64      	subs	r4, r4, r1
     416:	b29b      	uxth	r3, r3
     418:	fbb4 f9fa 	udiv	r9, r4, sl
     41c:	fb0a 4419 	mls	r4, sl, r9, r4
     420:	fb09 f808 	mul.w	r8, r9, r8
     424:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     428:	4588      	cmp	r8, r1
     42a:	d92c      	bls.n	486 <CONFIG_LOG_BUFFER_SIZE+0x86>
     42c:	1869      	adds	r1, r5, r1
     42e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     432:	d204      	bcs.n	43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     434:	4588      	cmp	r8, r1
     436:	d902      	bls.n	43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     438:	f1a9 0302 	sub.w	r3, r9, #2
     43c:	4429      	add	r1, r5
     43e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     442:	eba1 0108 	sub.w	r1, r1, r8
     446:	fba0 8902 	umull	r8, r9, r0, r2
     44a:	4549      	cmp	r1, r9
     44c:	46c2      	mov	sl, r8
     44e:	464c      	mov	r4, r9
     450:	d302      	bcc.n	458 <CONFIG_LOG_BUFFER_SIZE+0x58>
     452:	d106      	bne.n	462 <CONFIG_LOG_BUFFER_SIZE+0x62>
     454:	4546      	cmp	r6, r8
     456:	d204      	bcs.n	462 <CONFIG_LOG_BUFFER_SIZE+0x62>
     458:	ebb8 0a02 	subs.w	sl, r8, r2
     45c:	eb69 0405 	sbc.w	r4, r9, r5
     460:	3801      	subs	r0, #1
     462:	b197      	cbz	r7, 48a <CONFIG_LOG_BUFFER_SIZE+0x8a>
     464:	ebb6 030a 	subs.w	r3, r6, sl
     468:	eb61 0604 	sbc.w	r6, r1, r4
     46c:	fa06 fe0e 	lsl.w	lr, r6, lr
     470:	fa23 f30c 	lsr.w	r3, r3, ip
     474:	ea4e 0303 	orr.w	r3, lr, r3
     478:	fa26 f60c 	lsr.w	r6, r6, ip
     47c:	e9c7 3600 	strd	r3, r6, [r7]
     480:	e79a      	b.n	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     482:	4648      	mov	r0, r9
     484:	e7c6      	b.n	414 <CONFIG_LOG_BUFFER_SIZE+0x14>
     486:	464b      	mov	r3, r9
     488:	e7d9      	b.n	43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     48a:	463e      	mov	r6, r7
     48c:	e6f9      	b.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
	...

00000490 <event_slave_prepare>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static void event_slave_prepare(u32_t ticks_at_expire, u32_t remainder,
				u16_t lazy, void *context)
{
     490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
     494:	4dc4      	ldr	r5, [pc, #784]	; (7a8 <CONFIG_BT_CTLR_COMPANY_ID+0x1b7>)
{
     496:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
     498:	7c2b      	ldrb	r3, [r5, #16]
{
     49a:	b08f      	sub	sp, #60	; 0x3c
     49c:	4606      	mov	r6, r0
     49e:	4688      	mov	r8, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
     4a0:	b19b      	cbz	r3, 4ca <event_slave_prepare+0x3a>
     4a2:	2301      	movs	r3, #1
     4a4:	f04f 0100 	mov.w	r1, #0
     4a8:	f363 0107 	bfi	r1, r3, #0, #8
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     4ac:	4abf      	ldr	r2, [pc, #764]	; (7ac <CONFIG_BT_CTLR_COMPANY_ID+0x1bb>)
     4ae:	4bc0      	ldr	r3, [pc, #768]	; (7b0 <CONFIG_BT_CTLR_COMPANY_ID+0x1bf>)
     4b0:	48c0      	ldr	r0, [pc, #768]	; (7b4 <CONFIG_BT_CTLR_COMPANY_ID+0x1c3>)
     4b2:	1a9b      	subs	r3, r3, r2
     4b4:	08db      	lsrs	r3, r3, #3
     4b6:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(0);
     4ba:	f020 fba3 	bl	20c04 <log_0>
     4be:	4040      	eors	r0, r0
     4c0:	f380 8811 	msr	BASEPRI, r0
     4c4:	f04f 0004 	mov.w	r0, #4
     4c8:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
     4ca:	f894 3020 	ldrb.w	r3, [r4, #32]
     4ce:	3307      	adds	r3, #7
     4d0:	b2db      	uxtb	r3, r3
     4d2:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
     4d4:	f994 301d 	ldrsb.w	r3, [r4, #29]
     4d8:	2b00      	cmp	r3, #0
     4da:	da09      	bge.n	4f0 <event_slave_prepare+0x60>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
     4dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
     4de:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
     4e0:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
     4e4:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
     4e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
			conn->slave.window_widening_prepare_us =
     4e8:	4299      	cmp	r1, r3
     4ea:	bf94      	ite	ls
     4ec:	6461      	strls	r1, [r4, #68]	; 0x44
     4ee:	6463      	strhi	r3, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
     4f0:	8d27      	ldrh	r7, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
     4f2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
     4f6:	443a      	add	r2, r7
	event_counter = conn->event_counter + conn->latency_prepare;
     4f8:	8c67      	ldrh	r7, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
     4fa:	b292      	uxth	r2, r2
     4fc:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
     4fe:	443a      	add	r2, r7
     500:	b297      	uxth	r7, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
     502:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
     506:	429a      	cmp	r2, r3
     508:	d159      	bne.n	5be <event_slave_prepare+0x12e>
     50a:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
     50e:	075a      	lsls	r2, r3, #29
     510:	d455      	bmi.n	5be <event_slave_prepare+0x12e>
		} else if (conn->llcp_conn_param.ack !=
     512:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
     516:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
     51a:	429a      	cmp	r2, r3
     51c:	d04f      	beq.n	5be <event_slave_prepare+0x12e>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
     51e:	2005      	movs	r0, #5
     520:	f01b faba 	bl	1ba98 <event_stop.constprop.46>
	conn_upd = _radio.conn_upd;
     524:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
	if (conn_upd && (conn_upd != conn)) {
     528:	b10b      	cbz	r3, 52e <event_slave_prepare+0x9e>
     52a:	429c      	cmp	r4, r3
     52c:	d147      	bne.n	5be <event_slave_prepare+0x12e>
	switch (conn->llcp_conn_param.state) {
     52e:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
     532:	f003 0307 	and.w	r3, r3, #7
     536:	2b05      	cmp	r3, #5
     538:	f200 8128 	bhi.w	78c <CONFIG_BT_CTLR_COMPANY_ID+0x19b>
     53c:	e8df f013 	tbh	[pc, r3, lsl #1]
     540:	00550006 	.word	0x00550006
     544:	003f00fa 	.word	0x003f00fa
     548:	003f003f 	.word	0x003f003f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     54c:	489a      	ldr	r0, [pc, #616]	; (7b8 <CONFIG_BT_CTLR_COMPANY_ID+0x1c7>)
     54e:	f023 fe8b 	bl	24268 <mem_acquire>
	if (!node_tx) {
     552:	4601      	mov	r1, r0
     554:	b398      	cbz	r0, 5be <event_slave_prepare+0x12e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
     556:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
     55a:	2204      	movs	r2, #4
     55c:	f362 0302 	bfi	r3, r2, #0, #3
     560:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     564:	7903      	ldrb	r3, [r0, #4]
     566:	f043 0303 	orr.w	r3, r3, #3
     56a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     56c:	2318      	movs	r3, #24
     56e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     570:	230f      	movs	r3, #15
     572:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval_min;
     574:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
     578:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval_max;
     57a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
     57e:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
     580:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
     584:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
     586:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
     58a:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
     58c:	2300      	movs	r3, #0
     58e:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
     590:	74c3      	strb	r3, [r0, #19]
     592:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
     594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     598:	7543      	strb	r3, [r0, #21]
     59a:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
     59c:	75c3      	strb	r3, [r0, #23]
     59e:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
     5a0:	7643      	strb	r3, [r0, #25]
     5a2:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
     5a4:	76c3      	strb	r3, [r0, #27]
     5a6:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
     5a8:	7743      	strb	r3, [r0, #29]
     5aa:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
     5ac:	f8a0 7011 	strh.w	r7, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
     5b0:	4620      	mov	r0, r4
     5b2:	f024 f8bf 	bl	24734 <ctrl_tx_enqueue>
	conn->procedure_expire = conn->procedure_reload;
     5b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	_radio.conn_upd = conn;
     5b8:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	conn->procedure_expire = conn->procedure_reload;
     5bc:	86a3      	strh	r3, [r4, #52]	; 0x34
	if (conn->llcp_ack != conn->llcp_req) {
     5be:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
     5c2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     5c6:	429a      	cmp	r2, r3
     5c8:	f000 8138 	beq.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
     5cc:	2005      	movs	r0, #5
     5ce:	f01b fa63 	bl	1ba98 <event_stop.constprop.46>
		switch (conn->llcp_type) {
     5d2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
     5d6:	3b01      	subs	r3, #1
     5d8:	2b03      	cmp	r3, #3
     5da:	f200 80d7 	bhi.w	78c <CONFIG_BT_CTLR_COMPANY_ID+0x19b>
     5de:	e8df f013 	tbh	[pc, r3, lsl #1]
     5e2:	00ef      	.short	0x00ef
     5e4:	03450302 	.word	0x03450302
     5e8:	039e      	.short	0x039e
	if (conn->llcp_conn_param.status) {
     5ea:	f894 90ab 	ldrb.w	r9, [r4, #171]	; 0xab
     5ee:	f1b9 0f00 	cmp.w	r9, #0
     5f2:	d01d      	beq.n	630 <CONFIG_BT_CTLR_COMPANY_ID+0x3f>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     5f4:	4870      	ldr	r0, [pc, #448]	; (7b8 <CONFIG_BT_CTLR_COMPANY_ID+0x1c7>)
     5f6:	f023 fe37 	bl	24268 <mem_acquire>
		if (!node_tx) {
     5fa:	4601      	mov	r1, r0
     5fc:	2800      	cmp	r0, #0
     5fe:	d0de      	beq.n	5be <event_slave_prepare+0x12e>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
     600:	7903      	ldrb	r3, [r0, #4]
     602:	f043 0303 	orr.w	r3, r3, #3
     606:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
     608:	2311      	movs	r3, #17
     60a:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
     60c:	2303      	movs	r3, #3
     60e:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     610:	230f      	movs	r3, #15
     612:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
     614:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
     618:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
     61a:	4620      	mov	r0, r4
     61c:	f024 f88a 	bl	24734 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     620:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
     624:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
		_radio.conn_upd = NULL;
     628:	2300      	movs	r3, #0
     62a:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
		return;
     62e:	e7c6      	b.n	5be <event_slave_prepare+0x12e>
	if (!conn->role) {
     630:	f994 301d 	ldrsb.w	r3, [r4, #29]
     634:	2b00      	cmp	r3, #0
     636:	db3a      	blt.n	6ae <CONFIG_BT_CTLR_COMPANY_ID+0xbd>
		if (conn->llcp_req != conn->llcp_ack) {
     638:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
     63c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     640:	428b      	cmp	r3, r1
     642:	d1bc      	bne.n	5be <event_slave_prepare+0x12e>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     644:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		conn->llcp.conn_upd.win_offset_us = 0U;
     648:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     64c:	2205      	movs	r2, #5
     64e:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
     652:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
     656:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		conn->llcp.conn_upd.win_size = 1U;
     65a:	2301      	movs	r3, #1
     65c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
		if (conn->llcp_conn_param.preferred_periodicity) {
     660:	b312      	cbz	r2, 6a8 <CONFIG_BT_CTLR_COMPANY_ID+0xb7>
				((conn->llcp_conn_param.interval_min /
     662:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
     666:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
     66a:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
     66c:	fb13 f302 	smulbb	r3, r3, r2
     670:	b29b      	uxth	r3, r3
     672:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
     676:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
     67a:	6663      	str	r3, [r4, #100]	; 0x64
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
     67c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
     680:	2202      	movs	r2, #2
     682:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
     686:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
     68a:	f082 0208 	eor.w	r2, r2, #8
     68e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
     692:	f362 0382 	bfi	r3, r2, #2, #1
     696:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_ack--;
     69a:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
     69c:	2301      	movs	r3, #1
     69e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		conn->llcp_ack--;
     6a2:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
		return;
     6a6:	e78a      	b.n	5be <event_slave_prepare+0x12e>
				conn->llcp_conn_param.interval_max;
     6a8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
     6ac:	e7e1      	b.n	672 <CONFIG_BT_CTLR_COMPANY_ID+0x81>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     6ae:	4842      	ldr	r0, [pc, #264]	; (7b8 <CONFIG_BT_CTLR_COMPANY_ID+0x1c7>)
     6b0:	f023 fdda 	bl	24268 <mem_acquire>
	if (!node_tx) {
     6b4:	4601      	mov	r1, r0
     6b6:	2800      	cmp	r0, #0
     6b8:	d081      	beq.n	5be <event_slave_prepare+0x12e>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     6ba:	7903      	ldrb	r3, [r0, #4]
     6bc:	f043 0303 	orr.w	r3, r3, #3
     6c0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
     6c2:	2318      	movs	r3, #24
     6c4:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
     6c6:	2310      	movs	r3, #16
     6c8:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval_min;
     6ca:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
     6ce:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval_max;
     6d0:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
     6d4:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
     6d6:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
     6da:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
     6dc:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
     6e0:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
     6e2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
     6e6:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
     6e8:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
     6ec:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
     6f0:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
     6f4:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
     6f8:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
     6fc:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
     700:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
     704:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
     708:	f8b4 30be 	ldrh.w	r3, [r4, #190]	; 0xbe
     70c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
     710:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
     714:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
     718:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
     71c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
     720:	4620      	mov	r0, r4
     722:	f024 f807 	bl	24734 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     726:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
     72a:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	_radio.conn_upd = NULL;
     72e:	f8c5 9180 	str.w	r9, [r5, #384]	; 0x180
     732:	e744      	b.n	5be <event_slave_prepare+0x12e>
	if (conn->pause_tx) {
     734:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
     738:	071b      	lsls	r3, r3, #28
     73a:	f53f af40 	bmi.w	5be <event_slave_prepare+0x12e>
	node_rx = packet_rx_reserve_get(2);
     73e:	2002      	movs	r0, #2
     740:	f019 fe9e 	bl	1a480 <packet_rx_reserve_get>
	if (!node_rx) {
     744:	2800      	cmp	r0, #0
     746:	f43f af3a 	beq.w	5be <event_slave_prepare+0x12e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
     74a:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
     74e:	2203      	movs	r2, #3
     750:	f362 0302 	bfi	r3, r2, #0, #3
     754:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	node_rx->hdr.handle = conn->handle;
     758:	8c23      	ldrh	r3, [r4, #32]
     75a:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     75c:	2302      	movs	r3, #2
     75e:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
     760:	7a03      	ldrb	r3, [r0, #8]
     762:	4313      	orrs	r3, r2
     764:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
     766:	2318      	movs	r3, #24
     768:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
     76a:	230f      	movs	r3, #15
     76c:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval_min;
     76e:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
     772:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval_max;
     774:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
     778:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
     77a:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
     77e:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
     780:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
     784:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
     786:	f019 ff39 	bl	1a5fc <packet_rx_enqueue>
     78a:	e718      	b.n	5be <event_slave_prepare+0x12e>
		LL_ASSERT(0);
     78c:	2301      	movs	r3, #1
     78e:	f04f 0100 	mov.w	r1, #0
     792:	f363 0107 	bfi	r1, r3, #0, #8
     796:	4a05      	ldr	r2, [pc, #20]	; (7ac <CONFIG_BT_CTLR_COMPANY_ID+0x1bb>)
     798:	4b05      	ldr	r3, [pc, #20]	; (7b0 <CONFIG_BT_CTLR_COMPANY_ID+0x1bf>)
     79a:	4808      	ldr	r0, [pc, #32]	; (7bc <CONFIG_BT_CTLR_COMPANY_ID+0x1cb>)
     79c:	1a9b      	subs	r3, r3, r2
     79e:	08db      	lsrs	r3, r3, #3
     7a0:	f363 118f 	bfi	r1, r3, #6, #10
     7a4:	e689      	b.n	4ba <event_slave_prepare+0x2a>
     7a6:	bf00      	nop
     7a8:	20000fb4 	.word	0x20000fb4
     7ac:	00025880 	.word	0x00025880
     7b0:	000258b0 	.word	0x000258b0
     7b4:	0002c757 	.word	0x0002c757
     7b8:	20001108 	.word	0x20001108
     7bc:	0002c060 	.word	0x0002c060
	if (!conn_upd) {
     7c0:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
     7c4:	b90b      	cbnz	r3, 7ca <CONFIG_BT_CTLR_COMPANY_ID+0x1d9>
		_radio.conn_upd = conn;
     7c6:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
     7ca:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
     7ce:	f013 0303 	ands.w	r3, r3, #3
     7d2:	d06c      	beq.n	8ae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xae>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     7d4:	48cc      	ldr	r0, [pc, #816]	; (b08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x308>)
     7d6:	f023 fd47 	bl	24268 <mem_acquire>
		if (!node_tx) {
     7da:	4601      	mov	r1, r0
     7dc:	b370      	cbz	r0, 83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
     7de:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     7e2:	7902      	ldrb	r2, [r0, #4]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
     7e4:	f36f 0301 	bfc	r3, #0, #2
     7e8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
     7ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     7ee:	443b      	add	r3, r7
     7f0:	3306      	adds	r3, #6
     7f2:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     7f4:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp.conn_upd.instant =
     7f8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     7fc:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     7fe:	220c      	movs	r2, #12
     800:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     802:	2200      	movs	r2, #0
     804:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
     806:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
     80a:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
     80c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
     80e:	f240 40e2 	movw	r0, #1250	; 0x4e2
     812:	fbb2 f2f0 	udiv	r2, r2, r0
     816:	f8a1 2009 	strh.w	r2, [r1, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     81a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
     81e:	f8a1 200b 	strh.w	r2, [r1, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     822:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
     826:	f8a1 200d 	strh.w	r2, [r1, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     82a:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
     82e:	f8a1 200f 	strh.w	r2, [r1, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     832:	f8a1 3011 	strh.w	r3, [r1, #17]
			ctrl_tx_enqueue(conn, node_tx);
     836:	4620      	mov	r0, r4
     838:	f023 ff7c 	bl	24734 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
     83c:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
     840:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
     844:	429a      	cmp	r2, r3
     846:	d01d      	beq.n	884 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x84>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
     848:	2005      	movs	r0, #5
     84a:	f01b f925 	bl	1ba98 <event_stop.constprop.46>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     84e:	48ae      	ldr	r0, [pc, #696]	; (b08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x308>)
     850:	f023 fd0a 	bl	24268 <mem_acquire>
		if (node_tx) {
     854:	4601      	mov	r1, r0
     856:	b1a8      	cbz	r0, 884 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x84>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
     858:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
     85c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     860:	7903      	ldrb	r3, [r0, #4]
     862:	f043 0303 	orr.w	r3, r3, #3
     866:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     868:	2302      	movs	r3, #2
     86a:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
     86c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
     86e:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
     872:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
     874:	4620      	mov	r0, r4
     876:	f023 ff5d 	bl	24734 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
     87a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
     87c:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
     87e:	bf98      	it	ls
     880:	3301      	addls	r3, #1
     882:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
     884:	4ba1      	ldr	r3, [pc, #644]	; (b0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30c>)
     886:	9403      	str	r4, [sp, #12]
     888:	9302      	str	r3, [sp, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
     88a:	f894 3020 	ldrb.w	r3, [r4, #32]
     88e:	3307      	adds	r3, #7
	event_common_prepare(ticks_at_expire, remainder,
     890:	b2db      	uxtb	r3, r3
     892:	9301      	str	r3, [sp, #4]
     894:	68a3      	ldr	r3, [r4, #8]
     896:	9300      	str	r3, [sp, #0]
     898:	4622      	mov	r2, r4
     89a:	1d23      	adds	r3, r4, #4
     89c:	4641      	mov	r1, r8
     89e:	4630      	mov	r0, r6
	conn->event_counter = event_counter + 1;
     8a0:	3701      	adds	r7, #1
	event_common_prepare(ticks_at_expire, remainder,
     8a2:	f01b f907 	bl	1bab4 <event_common_prepare>
	conn->event_counter = event_counter + 1;
     8a6:	8467      	strh	r7, [r4, #34]	; 0x22
	DEBUG_RADIO_PREPARE_S(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);

	DEBUG_RADIO_PREPARE_S(0);
}
     8a8:	b00f      	add	sp, #60	; 0x3c
     8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     8ae:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
     8b2:	eba7 0209 	sub.w	r2, r7, r9
     8b6:	b292      	uxth	r2, r2
	} else if (instant_latency <= 0x7FFF) {
     8b8:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     8ba:	920b      	str	r2, [sp, #44]	; 0x2c
	} else if (instant_latency <= 0x7FFF) {
     8bc:	d4be      	bmi.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
		conn->llcp_ack = conn->llcp_req;
     8be:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
     8c2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     8c6:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
     8ca:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
     8ce:	428a      	cmp	r2, r1
     8d0:	d008      	beq.n	8e4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe4>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     8d2:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     8d6:	f002 0207 	and.w	r2, r2, #7
     8da:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     8dc:	bf04      	itt	eq
     8de:	f884 10a9 	strbeq.w	r1, [r4, #169]	; 0xa9
			conn->procedure_expire = 0U;
     8e2:	86a3      	strheq	r3, [r4, #52]	; 0x34
		if (_radio.conn_upd == conn) {
     8e4:	f8d5 2180 	ldr.w	r2, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0U;
     8e8:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
     8ea:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
     8ec:	bf08      	it	eq
     8ee:	f8c5 3180 	streq.w	r3, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0U;
     8f2:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
     8f4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
		     conn->conn_interval) ||
     8f8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
     8fa:	429a      	cmp	r2, r3
     8fc:	d114      	bne.n	928 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x128>
		     conn->conn_interval) ||
     8fe:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
     902:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     904:	4299      	cmp	r1, r3
     906:	d10f      	bne.n	928 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x128>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
     908:	f240 43e2 	movw	r3, #1250	; 0x4e2
     90c:	435a      	muls	r2, r3
     90e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
     912:	f242 7110 	movw	r1, #10000	; 0x2710
     916:	fb01 2303 	mla	r3, r1, r3, r2
     91a:	3b01      	subs	r3, #1
     91c:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
     920:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     922:	b29b      	uxth	r3, r3
     924:	429a      	cmp	r2, r3
     926:	d021      	beq.n	96c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16c>
			node_rx = packet_rx_reserve_get(2);
     928:	2002      	movs	r0, #2
     92a:	f019 fda9 	bl	1a480 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
     92e:	b960      	cbnz	r0, 94a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14a>
		LL_ASSERT(node_rx);
     930:	2301      	movs	r3, #1
     932:	f04f 0100 	mov.w	r1, #0
     936:	f363 0107 	bfi	r1, r3, #0, #8
     93a:	4a75      	ldr	r2, [pc, #468]	; (b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>)
     93c:	4b75      	ldr	r3, [pc, #468]	; (b14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x314>)
     93e:	4876      	ldr	r0, [pc, #472]	; (b18 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x318>)
     940:	1a9b      	subs	r3, r3, r2
     942:	08db      	lsrs	r3, r3, #3
     944:	f363 118f 	bfi	r1, r3, #6, #10
     948:	e5b7      	b.n	4ba <event_slave_prepare+0x2a>
			node_rx->hdr.handle = conn->handle;
     94a:	8c23      	ldrh	r3, [r4, #32]
     94c:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     94e:	230a      	movs	r3, #10
     950:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status = 0x00;
     952:	2300      	movs	r3, #0
     954:	7203      	strb	r3, [r0, #8]
			radio_le_conn_update_cmplt->interval =
     956:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
     95a:	8143      	strh	r3, [r0, #10]
			radio_le_conn_update_cmplt->latency =
     95c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
     960:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->timeout =
     962:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
     966:	81c3      	strh	r3, [r0, #14]
			packet_rx_enqueue();
     968:	f019 fe48 	bl	1a5fc <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
     96c:	e9d4 0b00 	ldrd	r0, fp, [r4]
     970:	2800      	cmp	r0, #0
     972:	da08      	bge.n	986 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x186>
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
     974:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
			u32_t ticks_prepare_to_start =
     978:	68a3      	ldr	r3, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
     97a:	6020      	str	r0, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
     97c:	1a36      	subs	r6, r6, r0
     97e:	459b      	cmp	fp, r3
     980:	bf2c      	ite	cs
     982:	445e      	addcs	r6, fp
     984:	18f6      	addcc	r6, r6, r3
		conn_interval_old = instant_latency * conn->conn_interval;
     986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     988:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
     98a:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
     98e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x330>
		conn_interval_old = instant_latency * conn->conn_interval;
     992:	fb13 f302 	smulbb	r3, r3, r2
     996:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
     998:	fbb3 f1fa 	udiv	r1, r3, sl
     99c:	b28a      	uxth	r2, r1
     99e:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_new = latency *
     9a0:	fb1a f202 	smulbb	r2, sl, r2
     9a4:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     9a6:	4293      	cmp	r3, r2
     9a8:	f240 40e2 	movw	r0, #1250	; 0x4e2
     9ac:	f080 80c2 	bcs.w	b34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x334>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     9b0:	1ad3      	subs	r3, r2, r3
     9b2:	4358      	muls	r0, r3
     9b4:	fb80 0108 	smull	r0, r1, r0, r8
     9b8:	a351      	add	r3, pc, #324	; (adr r3, b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>)
     9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
     9be:	f7ff fbdf 	bl	180 <__aeabi_uldivmod>
     9c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9c6:	4406      	add	r6, r0
		conn->latency_prepare -= (instant_latency - latency);
     9c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     9ca:	eba9 0707 	sub.w	r7, r9, r7
     9ce:	441f      	add	r7, r3
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
     9d0:	6823      	ldr	r3, [r4, #0]
		conn->latency_prepare -= (instant_latency - latency);
     9d2:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
     9d6:	459b      	cmp	fp, r3
     9d8:	bf38      	it	cc
     9da:	469b      	movcc	fp, r3
		if (conn->role) {
     9dc:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
     9e0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
		conn->latency_prepare -= (instant_latency - latency);
     9e4:	444f      	add	r7, r9
		if (conn->role) {
     9e6:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
     9e8:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->latency_prepare -= (instant_latency - latency);
     9ec:	8527      	strh	r7, [r4, #40]	; 0x28
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
     9ee:	f8d4 b06c 	ldr.w	fp, [r4, #108]	; 0x6c
     9f2:	fb09 f70a 	mul.w	r7, r9, sl
		if (conn->role) {
     9f6:	f280 80aa 	bge.w	b4e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x34e>
			conn->slave.window_widening_prepare_us -=
     9fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
     9fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
				conn->slave.window_widening_periodic_us *
     9fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				conn->slave.window_widening_periodic_us *
     a00:	980c      	ldr	r0, [sp, #48]	; 0x30
			conn->slave.window_widening_prepare_us -=
     a02:	fb03 2311 	mls	r3, r3, r1, r2
				(((gc_lookup_ppm[_radio.sca] +
     a06:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
     a0a:	4944      	ldr	r1, [pc, #272]	; (b1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x31c>)
     a0c:	f831 5012 	ldrh.w	r5, [r1, r2, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
     a10:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
     a14:	f3c2 0282 	ubfx	r2, r2, #2, #3
     a18:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
     a1c:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
     a20:	4415      	add	r5, r2
				   gc_lookup_ppm[conn->slave.sca]) *
     a22:	437d      	muls	r5, r7
				  conn_interval_us) + (1000000 - 1)) / 1000000;
     a24:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
     a28:	4a3d      	ldr	r2, [pc, #244]	; (b20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x320>)
				conn->llcp.conn_upd.win_size * 1250;
     a2a:	fb09 f101 	mul.w	r1, r9, r1
				  conn_interval_us) + (1000000 - 1)) / 1000000;
     a2e:	f205 253f 	addw	r5, r5, #575	; 0x23f
     a32:	fbb5 f5f2 	udiv	r5, r5, r2
				(conn_interval_us >> 1) - RADIO_TIFS;
     a36:	087a      	lsrs	r2, r7, #1
				conn->slave.window_widening_periodic_us *
     a38:	4368      	muls	r0, r5
				(conn_interval_us >> 1) - RADIO_TIFS;
     a3a:	3a96      	subs	r2, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
     a3c:	4403      	add	r3, r0
			conn->slave.window_size_prepare_us =
     a3e:	64e1      	str	r1, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0U;
     a40:	2100      	movs	r1, #0
			conn->slave.window_widening_periodic_us =
     a42:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
     a44:	6422      	str	r2, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0U;
     a46:	65a1      	str	r1, [r4, #88]	; 0x58
			conn->slave.window_widening_prepare_us +=
     a48:	4293      	cmp	r3, r2
     a4a:	bf94      	ite	ls
     a4c:	6463      	strls	r3, [r4, #68]	; 0x44
     a4e:	6462      	strhi	r2, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     a50:	fba0 0108 	umull	r0, r1, r0, r8
     a54:	a32a      	add	r3, pc, #168	; (adr r3, b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>)
     a56:	e9d3 2300 	ldrd	r2, r3, [r3]
     a5a:	f7ff fb91 	bl	180 <__aeabi_uldivmod>
     a5e:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     a60:	fbbb f0f9 	udiv	r0, fp, r9
     a64:	fb09 f000 	mul.w	r0, r9, r0
     a68:	a325      	add	r3, pc, #148	; (adr r3, b00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x300>)
     a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
     a6e:	fba0 0108 	umull	r0, r1, r0, r8
     a72:	f7ff fb85 	bl	180 <__aeabi_uldivmod>
     a76:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
     a7a:	930b      	str	r3, [sp, #44]	; 0x2c
			periodic_us -= conn->slave.window_widening_periodic_us;
     a7c:	1b7d      	subs	r5, r7, r5
		conn->latency = conn->llcp.conn_upd.latency;
     a7e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
     a82:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
     a84:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
     a88:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
     a8c:	f242 7210 	movw	r2, #10000	; 0x2710
     a90:	fb02 7303 	mla	r3, r2, r3, r7
     a94:	3b01      	subs	r3, #1
     a96:	fbb3 f3f7 	udiv	r3, r3, r7
     a9a:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     a9c:	4b21      	ldr	r3, [pc, #132]	; (b24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x324>)
     a9e:	443b      	add	r3, r7
     aa0:	fbb3 f7f7 	udiv	r7, r3, r7
		if (!conn->llcp.conn_upd.is_internal) {
     aa4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     aa8:	8667      	strh	r7, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
     aaa:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0U;
     aae:	bf08      	it	eq
     ab0:	8623      	strheq	r3, [r4, #48]	; 0x30
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
     ab2:	2101      	movs	r1, #1
     ab4:	2000      	movs	r0, #0
     ab6:	f01c fce9 	bl	1d48c <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
     aba:	2200      	movs	r2, #0
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
     abc:	900c      	str	r0, [sp, #48]	; 0x30
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
     abe:	2101      	movs	r1, #1
     ac0:	4610      	mov	r0, r2
     ac2:	f017 fda3 	bl	1860c <mayfly_enable>
		ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;
     ac6:	f894 7020 	ldrb.w	r7, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
     aca:	4b17      	ldr	r3, [pc, #92]	; (b28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x328>)
		ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;
     acc:	3707      	adds	r7, #7
     ace:	b2ff      	uxtb	r7, r7
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
     ad0:	2100      	movs	r1, #0
				    (void *)(u32_t)ticker_id);
     ad2:	9700      	str	r7, [sp, #0]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
     ad4:	463a      	mov	r2, r7
     ad6:	4608      	mov	r0, r1
     ad8:	f018 fb70 	bl	191bc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     adc:	f030 0a02 	bics.w	sl, r0, #2
     ae0:	d042      	beq.n	b68 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x368>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     ae2:	2301      	movs	r3, #1
     ae4:	f04f 0100 	mov.w	r1, #0
     ae8:	f363 0107 	bfi	r1, r3, #0, #8
     aec:	4a08      	ldr	r2, [pc, #32]	; (b10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x310>)
     aee:	4b09      	ldr	r3, [pc, #36]	; (b14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x314>)
     af0:	480e      	ldr	r0, [pc, #56]	; (b2c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x32c>)
     af2:	1a9b      	subs	r3, r3, r2
     af4:	08db      	lsrs	r3, r3, #3
     af6:	f363 118f 	bfi	r1, r3, #6, #10
     afa:	e4de      	b.n	4ba <event_slave_prepare+0x2a>
     afc:	f3af 8000 	nop.w
     b00:	1afd498d 	.word	0x1afd498d
     b04:	00000007 	.word	0x00000007
     b08:	20001108 	.word	0x20001108
     b0c:	0001b1e9 	.word	0x0001b1e9
     b10:	00025880 	.word	0x00025880
     b14:	000258b0 	.word	0x000258b0
     b18:	0002c5cb 	.word	0x0002c5cb
     b1c:	000263dc 	.word	0x000263dc
     b20:	000f4240 	.word	0x000f4240
     b24:	026259ff 	.word	0x026259ff
     b28:	0001a721 	.word	0x0001a721
     b2c:	0002c1be 	.word	0x0002c1be
     b30:	3b9aca00 	.word	0x3b9aca00
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     b34:	fb0a 3111 	mls	r1, sl, r1, r3
     b38:	b289      	uxth	r1, r1
     b3a:	4348      	muls	r0, r1
     b3c:	a3a4      	add	r3, pc, #656	; (adr r3, dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>)
     b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
     b42:	fb80 0108 	smull	r0, r1, r0, r8
     b46:	f7ff fb1b 	bl	180 <__aeabi_uldivmod>
     b4a:	1a36      	subs	r6, r6, r0
     b4c:	e73c      	b.n	9c8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c8>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     b4e:	a3a0      	add	r3, pc, #640	; (adr r3, dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>)
     b50:	e9d3 2300 	ldrd	r2, r3, [r3]
     b54:	fbab 0108 	umull	r0, r1, fp, r8
     b58:	f7ff fb12 	bl	180 <__aeabi_uldivmod>
     b5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
     b60:	1c43      	adds	r3, r0, #1
     b62:	930b      	str	r3, [sp, #44]	; 0x2c
		periodic_us = conn_interval_us;
     b64:	463d      	mov	r5, r7
     b66:	e78a      	b.n	a7e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x27e>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     b68:	fba5 8908 	umull	r8, r9, r5, r8
     b6c:	a398      	add	r3, pc, #608	; (adr r3, dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>)
     b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
     b72:	4640      	mov	r0, r8
     b74:	4649      	mov	r1, r9
     b76:	f7ff fb03 	bl	180 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
     b7a:	f641 4352 	movw	r3, #7250	; 0x1c52
     b7e:	9308      	str	r3, [sp, #32]
     b80:	4b8f      	ldr	r3, [pc, #572]	; (dc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c0>)
     b82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b84:	e9cd 4306 	strd	r4, r3, [sp, #24]
     b88:	4b8e      	ldr	r3, [pc, #568]	; (dc4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c4>)
     b8a:	9305      	str	r3, [sp, #20]
     b8c:	68e3      	ldr	r3, [r4, #12]
     b8e:	441a      	add	r2, r3
				     HAL_TICKER_REMAINDER(periodic_us),
     b90:	4b8d      	ldr	r3, [pc, #564]	; (dc8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c8>)
     b92:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b96:	fba4 bc03 	umull	fp, ip, r4, r3
     b9a:	2307      	movs	r3, #7
     b9c:	fb03 cc04 	mla	ip, r3, r4, ip
     ba0:	ebb8 000b 	subs.w	r0, r8, fp
     ba4:	eb69 010c 	sbc.w	r1, r9, ip
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
     ba8:	e9cd a203 	strd	sl, r2, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
     bac:	2300      	movs	r3, #0
     bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     bb2:	f7ff fae5 	bl	180 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
     bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     bb8:	9300      	str	r3, [sp, #0]
     bba:	e9cd 4001 	strd	r4, r0, [sp, #4]
     bbe:	4633      	mov	r3, r6
     bc0:	463a      	mov	r2, r7
     bc2:	4651      	mov	r1, sl
     bc4:	4650      	mov	r0, sl
     bc6:	f018 fa67 	bl	19098 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     bca:	f030 0002 	bics.w	r0, r0, #2
     bce:	d188      	bne.n	ae2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e2>
		if (mayfly_was_enabled) {
     bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     bd2:	2b00      	cmp	r3, #0
     bd4:	f43f ae68 	beq.w	8a8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa8>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
     bd8:	2201      	movs	r2, #1
     bda:	4611      	mov	r1, r2
}
     bdc:	b00f      	add	sp, #60	; 0x3c
     bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
     be2:	f017 bd13 	b.w	1860c <mayfly_enable>
	if (conn->llcp.chan_map.initiate) {
     be6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
     bea:	b313      	cbz	r3, c32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x432>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     bec:	4877      	ldr	r0, [pc, #476]	; (dcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5cc>)
     bee:	f023 fb3b 	bl	24268 <mem_acquire>
		if (node_tx) {
     bf2:	4605      	mov	r5, r0
     bf4:	2800      	cmp	r0, #0
     bf6:	f43f ae21 	beq.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
			conn->llcp.chan_map.initiate = 0U;
     bfa:	2300      	movs	r3, #0
     bfc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
     c00:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c02:	443b      	add	r3, r7
     c04:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
     c06:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     c0a:	7903      	ldrb	r3, [r0, #4]
     c0c:	f043 0303 	orr.w	r3, r3, #3
     c10:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
     c12:	2308      	movs	r3, #8
     c14:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
     c16:	2301      	movs	r3, #1
     c18:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
     c1a:	f104 0161 	add.w	r1, r4, #97	; 0x61
     c1e:	2205      	movs	r2, #5
     c20:	3008      	adds	r0, #8
     c22:	f021 f930 	bl	21e86 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
     c26:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
     c2a:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
     c2e:	4629      	mov	r1, r5
     c30:	e601      	b.n	836 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x36>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
     c32:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
     c36:	1afb      	subs	r3, r7, r3
     c38:	0419      	lsls	r1, r3, #16
     c3a:	f53f adff 	bmi.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
		conn->llcp_ack = conn->llcp_req;
     c3e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     c42:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
     c46:	f104 0517 	add.w	r5, r4, #23
     c4a:	2205      	movs	r2, #5
     c4c:	f104 0161 	add.w	r1, r4, #97	; 0x61
     c50:	4628      	mov	r0, r5
     c52:	f021 f918 	bl	21e86 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
     c56:	2105      	movs	r1, #5
     c58:	4628      	mov	r0, r5
     c5a:	f023 fb6b 	bl	24334 <util_ones_count_get>
		conn->data_chan_count =
     c5e:	7f63      	ldrb	r3, [r4, #29]
     c60:	f360 0305 	bfi	r3, r0, #0, #6
     c64:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1U;
     c66:	2301      	movs	r3, #1
     c68:	7723      	strb	r3, [r4, #28]
     c6a:	e5e7      	b.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
	if (conn->common.fex_valid) {
     c6c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
     c70:	f011 0920 	ands.w	r9, r1, #32
     c74:	d024      	beq.n	cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>
		conn->llcp_ack = conn->llcp_req;
     c76:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     c7a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
     c7e:	2002      	movs	r0, #2
     c80:	f019 fbfe 	bl	1a480 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
     c84:	4605      	mov	r5, r0
     c86:	2800      	cmp	r0, #0
     c88:	f43f ae52 	beq.w	930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
		node_rx->hdr.handle = conn->handle;
     c8c:	8c23      	ldrh	r3, [r4, #32]
     c8e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     c90:	2302      	movs	r3, #2
     c92:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
     c94:	7a03      	ldrb	r3, [r0, #8]
     c96:	f043 0303 	orr.w	r3, r3, #3
     c9a:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
     c9c:	2309      	movs	r3, #9
     c9e:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
     ca0:	72c3      	strb	r3, [r0, #11]
		(void)memset(&pdu_ctrl_rx->llctrl.feature_rsp.features[0], 0x00,
     ca2:	2208      	movs	r2, #8
     ca4:	2100      	movs	r1, #0
     ca6:	300c      	adds	r0, #12
     ca8:	f021 f917 	bl	21eda <memset>
			conn->llcp_features & 0xFF;
     cac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_rx->llctrl.feature_req.features[0] =
     cb0:	732b      	strb	r3, [r5, #12]
			(conn->llcp_features >> 8) & 0xFF;
     cb2:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
     cb4:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_rx->llctrl.feature_req.features[1] =
     cb6:	736a      	strb	r2, [r5, #13]
		pdu_ctrl_rx->llctrl.feature_req.features[2] =
     cb8:	73ab      	strb	r3, [r5, #14]
		packet_rx_enqueue();
     cba:	f019 fc9f 	bl	1a5fc <packet_rx_enqueue>
     cbe:	e5bd      	b.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     cc0:	4842      	ldr	r0, [pc, #264]	; (dcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5cc>)
     cc2:	f023 fad1 	bl	24268 <mem_acquire>
	if (node_tx) {
     cc6:	4605      	mov	r5, r0
     cc8:	2800      	cmp	r0, #0
     cca:	f43f adb7 	beq.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
		conn->llcp_ack = conn->llcp_req;
     cce:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     cd2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = LL_FEAT;
     cd6:	f44f 73c7 	mov.w	r3, #398	; 0x18e
     cda:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     cde:	7903      	ldrb	r3, [r0, #4]
     ce0:	f043 0303 	orr.w	r3, r3, #3
     ce4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
     ce6:	2309      	movs	r3, #9
     ce8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
     cea:	f994 301d 	ldrsb.w	r3, [r4, #29]
     cee:	2b00      	cmp	r3, #0
     cf0:	bfac      	ite	ge
     cf2:	2308      	movge	r3, #8
     cf4:	230e      	movlt	r3, #14
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
     cf6:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
     cf8:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
     cfa:	4649      	mov	r1, r9
     cfc:	4410      	add	r0, r2
     cfe:	f021 f8ec 	bl	21eda <memset>
			conn->llcp_features & 0xFF;
     d02:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
     d06:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
     d08:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
     d0a:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
     d0c:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
     d0e:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
     d10:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
     d12:	4620      	mov	r0, r4
     d14:	f023 fd0e 	bl	24734 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
     d18:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     d1a:	86a3      	strh	r3, [r4, #52]	; 0x34
     d1c:	e58e      	b.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
	if (conn->llcp_version.tx == 0) {
     d1e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
     d22:	07da      	lsls	r2, r3, #31
     d24:	d424      	bmi.n	d70 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x570>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
     d26:	4829      	ldr	r0, [pc, #164]	; (dcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5cc>)
     d28:	f023 fa9e 	bl	24268 <mem_acquire>
		if (node_tx) {
     d2c:	4601      	mov	r1, r0
     d2e:	2800      	cmp	r0, #0
     d30:	f43f ad84 	beq.w	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
			conn->llcp_ack = conn->llcp_req;
     d34:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     d38:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1U;
     d3c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
     d40:	f043 0301 	orr.w	r3, r3, #1
     d44:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     d48:	7903      	ldrb	r3, [r0, #4]
     d4a:	f043 0303 	orr.w	r3, r3, #3
     d4e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
     d50:	2306      	movs	r3, #6
     d52:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
     d54:	230c      	movs	r3, #12
     d56:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
     d58:	2309      	movs	r3, #9
     d5a:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
     d5c:	f06f 030e 	mvn.w	r3, #14
     d60:	7243      	strb	r3, [r0, #9]
     d62:	2305      	movs	r3, #5
     d64:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
     d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     d6a:	72c3      	strb	r3, [r0, #11]
     d6c:	7303      	strb	r3, [r0, #12]
     d6e:	e7d0      	b.n	d12 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x512>
	} else if (conn->llcp_version.rx != 0) {
     d70:	079b      	lsls	r3, r3, #30
     d72:	f57f ad0b 	bpl.w	78c <CONFIG_BT_CTLR_COMPANY_ID+0x19b>
		conn->llcp_ack = conn->llcp_req;
     d76:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
     d7a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
     d7e:	2002      	movs	r0, #2
     d80:	f019 fb7e 	bl	1a480 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
     d84:	2800      	cmp	r0, #0
     d86:	f43f add3 	beq.w	930 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x130>
		node_rx->hdr.handle = conn->handle;
     d8a:	8c23      	ldrh	r3, [r4, #32]
     d8c:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
     d8e:	2302      	movs	r3, #2
     d90:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
     d92:	7a03      	ldrb	r3, [r0, #8]
     d94:	f043 0303 	orr.w	r3, r3, #3
     d98:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
     d9a:	2306      	movs	r3, #6
     d9c:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
     d9e:	230c      	movs	r3, #12
     da0:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
     da2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
     da6:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
     da8:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
     dac:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
     db0:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
     db4:	f8a0 300f 	strh.w	r3, [r0, #15]
     db8:	e77f      	b.n	cba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ba>
     dba:	bf00      	nop
     dbc:	f3af 8000 	nop.w
     dc0:	0001a70d 	.word	0x0001a70d
     dc4:	00000491 	.word	0x00000491
     dc8:	1afd498d 	.word	0x1afd498d
     dcc:	20001108 	.word	0x20001108
     dd0:	1afd498d 	.word	0x1afd498d
     dd4:	00000007 	.word	0x00000007

00000dd8 <isr>:
{
     dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ddc:	b091      	sub	sp, #68	; 0x44
	trx_done = radio_is_done();
     dde:	f01c f8e3 	bl	1cfa8 <radio_is_done>
     de2:	b2c6      	uxtb	r6, r0
	if (trx_done) {
     de4:	b33e      	cbz	r6, e36 <isr+0x5e>
		crc_ok = radio_crc_is_valid();
     de6:	f01c f8ff 	bl	1cfe8 <radio_crc_is_valid>
     dea:	b2c3      	uxtb	r3, r0
     dec:	930a      	str	r3, [sp, #40]	; 0x28
		devmatch_ok = radio_filter_has_match();
     dee:	f01c f981 	bl	1d0f4 <radio_filter_has_match>
     df2:	b2c5      	uxtb	r5, r0
		devmatch_id = radio_filter_match_get();
     df4:	f01c f988 	bl	1d108 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
     df8:	f01c fb0c 	bl	1d414 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
     dfc:	f01c faf8 	bl	1d3f0 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
     e00:	f01c f940 	bl	1d084 <radio_rssi_is_ready>
     e04:	fa5f f880 	uxtb.w	r8, r0
	switch (_radio.state) {
     e08:	4c75      	ldr	r4, [pc, #468]	; (fe0 <isr+0x208>)
	radio_status_reset();
     e0a:	f01c f8b7 	bl	1cf7c <radio_status_reset>
	radio_tmr_status_reset();
     e0e:	f01c f981 	bl	1d114 <radio_tmr_status_reset>
	radio_filter_status_reset();
     e12:	f01c f967 	bl	1d0e4 <radio_filter_status_reset>
	radio_ar_status_reset();
     e16:	f01c faf1 	bl	1d3fc <radio_ar_status_reset>
	radio_rssi_status_reset();
     e1a:	f01c f92b 	bl	1d074 <radio_rssi_status_reset>
	switch (_radio.state) {
     e1e:	7d67      	ldrb	r7, [r4, #21]
     e20:	2f05      	cmp	r7, #5
     e22:	f201 8400 	bhi.w	2626 <isr+0x184e>
     e26:	e8df f017 	tbh	[pc, r7, lsl #1]
     e2a:	0066      	.short	0x0066
     e2c:	000a008e 	.word	0x000a008e
     e30:	0a300a30 	.word	0x0a300a30
     e34:	0a30      	.short	0x0a30
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
     e36:	46b0      	mov	r8, r6
     e38:	4635      	mov	r5, r6
     e3a:	960a      	str	r6, [sp, #40]	; 0x28
     e3c:	e7e4      	b.n	e08 <isr+0x30>
	_radio.state = STATE_RX;
     e3e:	2301      	movs	r3, #1
     e40:	7563      	strb	r3, [r4, #21]
	hcto = radio_tmr_tifs_base_get() + RADIO_TIFS + 4 +
     e42:	f01c fa4d 	bl	1d2e0 <radio_tmr_tifs_base_get>
     e46:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
     e48:	2096      	movs	r0, #150	; 0x96
     e4a:	f01c f973 	bl	1d134 <radio_tmr_tifs_set>
	switch (_radio.role) {
     e4e:	7d23      	ldrb	r3, [r4, #20]
     e50:	3b01      	subs	r3, #1
     e52:	35cb      	adds	r5, #203	; 0xcb
     e54:	2b03      	cmp	r3, #3
     e56:	f201 83e6 	bhi.w	2626 <isr+0x184e>
     e5a:	e8df f003 	tbb	[pc, r3]
     e5e:	2b02      	.short	0x2b02
     e60:	4f4f      	.short	0x4f4f
		radio_switch_complete_and_tx(0, 0, 0, 0);
     e62:	2300      	movs	r3, #0
     e64:	461a      	mov	r2, r3
     e66:	4619      	mov	r1, r3
     e68:	4618      	mov	r0, r3
     e6a:	f01c f8db 	bl	1d024 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
     e6e:	f01c f8c9 	bl	1d004 <radio_pkt_scratch_get>
     e72:	f01c f859 	bl	1cf28 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
     e76:	f01c f88d 	bl	1cf94 <radio_is_ready>
     e7a:	4604      	mov	r4, r0
     e7c:	b160      	cbz	r0, e98 <isr+0xc0>
	LL_ASSERT(!radio_is_ready());
     e7e:	2301      	movs	r3, #1
     e80:	f04f 0100 	mov.w	r1, #0
     e84:	f363 0107 	bfi	r1, r3, #0, #8
     e88:	4a56      	ldr	r2, [pc, #344]	; (fe4 <isr+0x20c>)
     e8a:	4b57      	ldr	r3, [pc, #348]	; (fe8 <isr+0x210>)
     e8c:	4857      	ldr	r0, [pc, #348]	; (fec <isr+0x214>)
     e8e:	1a9b      	subs	r3, r3, r2
     e90:	08db      	lsrs	r3, r3, #3
     e92:	f363 118f 	bfi	r1, r3, #6, #10
     e96:	e23d      	b.n	1314 <isr+0x53c>
		hcto += radio_rx_chain_delay_get(0, 0);
     e98:	4601      	mov	r1, r0
     e9a:	f023 fe78 	bl	24b8e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
     e9e:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
     ea0:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
     ea2:	4620      	mov	r0, r4
     ea4:	f023 fe6f 	bl	24b86 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
     ea8:	1a28      	subs	r0, r5, r0
     eaa:	f01c f9d3 	bl	1d254 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
     eae:	f01c fa09 	bl	1d2c4 <radio_tmr_end_capture>
	if (dont_close) {
     eb2:	e020      	b.n	ef6 <isr+0x11e>
		radio_switch_complete_and_tx(0, 0, 0, 0);
     eb4:	2300      	movs	r3, #0
     eb6:	4619      	mov	r1, r3
     eb8:	461a      	mov	r2, r3
     eba:	4618      	mov	r0, r3
     ebc:	f01c f8b2 	bl	1d024 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
     ec0:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
     ec4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
     ec8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
		radio_pkt_rx_set(_radio.packet_rx
     ecc:	3008      	adds	r0, #8
     ece:	f01c f82b 	bl	1cf28 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
     ed2:	f01c f85f 	bl	1cf94 <radio_is_ready>
     ed6:	4604      	mov	r4, r0
     ed8:	2800      	cmp	r0, #0
     eda:	d1d0      	bne.n	e7e <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
     edc:	4601      	mov	r1, r0
     ede:	f023 fe56 	bl	24b8e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
     ee2:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
     ee4:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
     ee6:	4620      	mov	r0, r4
     ee8:	f023 fe4d 	bl	24b86 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
     eec:	1a28      	subs	r0, r5, r0
     eee:	f01c f9b1 	bl	1d254 <radio_tmr_hcto_configure>
		radio_rssi_measure();
     ef2:	f01c f8af 	bl	1d054 <radio_rssi_measure>
}
     ef6:	b011      	add	sp, #68	; 0x44
     ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
     efc:	2300      	movs	r3, #0
     efe:	461a      	mov	r2, r3
     f00:	4619      	mov	r1, r3
     f02:	4618      	mov	r0, r3
     f04:	f01c f88e 	bl	1d024 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
     f08:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
     f0c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
		rx_packet_set(_radio.conn_curr,	(void *)
     f10:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
     f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
     f18:	3108      	adds	r1, #8
     f1a:	f023 fb89 	bl	24630 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
     f1e:	f01c f839 	bl	1cf94 <radio_is_ready>
     f22:	4604      	mov	r4, r0
     f24:	2800      	cmp	r0, #0
     f26:	d1aa      	bne.n	e7e <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
     f28:	4601      	mov	r1, r0
     f2a:	f023 fe30 	bl	24b8e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
     f2e:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
     f30:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
     f32:	4620      	mov	r0, r4
     f34:	f023 fe27 	bl	24b86 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
     f38:	1a28      	subs	r0, r5, r0
     f3a:	f01c f98b 	bl	1d254 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
     f3e:	2001      	movs	r0, #1
     f40:	f019 ff76 	bl	1ae30 <packet_tx_enqueue>
		break;
     f44:	e7d7      	b.n	ef6 <isr+0x11e>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
     f46:	b926      	cbnz	r6, f52 <isr+0x17a>
		_radio.state = STATE_CLOSE;
     f48:	2303      	movs	r3, #3
     f4a:	7563      	strb	r3, [r4, #21]
		radio_disable();
     f4c:	f01c f804 	bl	1cf58 <radio_disable>
		return;
     f50:	e7d1      	b.n	ef6 <isr+0x11e>
	switch (_radio.role) {
     f52:	7d23      	ldrb	r3, [r4, #20]
     f54:	b2db      	uxtb	r3, r3
     f56:	2b02      	cmp	r3, #2
     f58:	f000 81f6 	beq.w	1348 <isr+0x570>
     f5c:	2b03      	cmp	r3, #3
     f5e:	f000 82c7 	beq.w	14f0 <isr+0x718>
     f62:	2b01      	cmp	r3, #1
     f64:	f041 835f 	bne.w	2626 <isr+0x184e>
		if (crc_ok) {
     f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     f6a:	2b00      	cmp	r3, #0
     f6c:	d0ec      	beq.n	f48 <isr+0x170>
	pdu_adv = (void *)radio_pkt_scratch_get();
     f6e:	f01c f849 	bl	1d004 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
     f72:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
     f76:	232a      	movs	r3, #42	; 0x2a
     f78:	f04f 0a27 	mov.w	sl, #39	; 0x27
     f7c:	fb1a 3a02 	smlabb	sl, sl, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
     f80:	7802      	ldrb	r2, [r0, #0]
     f82:	f002 030f 	and.w	r3, r2, #15
     f86:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
     f88:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
     f8a:	eb04 070a 	add.w	r7, r4, sl
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
     f8e:	d12f      	bne.n	ff0 <isr+0x218>
     f90:	7843      	ldrb	r3, [r0, #1]
     f92:	2b0c      	cmp	r3, #12
     f94:	d1d8      	bne.n	f48 <isr+0x170>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
     f96:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		(devmatch_ok)) &&
     f9a:	0719      	lsls	r1, r3, #28
     f9c:	d501      	bpl.n	fa2 <isr+0x1ca>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
     f9e:	2d00      	cmp	r5, #0
     fa0:	d0d2      	beq.n	f48 <isr+0x170>
	return (adv->tx_addr == sr->rx_addr) &&
     fa2:	f814 300a 	ldrb.w	r3, [r4, sl]
     fa6:	f3c3 1380 	ubfx	r3, r3, #6, #1
     faa:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
     fae:	d1cb      	bne.n	f48 <isr+0x170>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
     fb0:	2206      	movs	r2, #6
     fb2:	f106 0108 	add.w	r1, r6, #8
     fb6:	1cb8      	adds	r0, r7, #2
     fb8:	f020 ff3e 	bl	21e38 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
     fbc:	b9c0      	cbnz	r0, ff0 <isr+0x218>
		_radio.state = STATE_CLOSE;
     fbe:	2303      	movs	r3, #3
     fc0:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
     fc2:	f01c f839 	bl	1d038 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
     fc6:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
     fca:	2327      	movs	r3, #39	; 0x27
     fcc:	fb03 4000 	mla	r0, r3, r0, r4
     fd0:	307a      	adds	r0, #122	; 0x7a
     fd2:	f01b ffaf 	bl	1cf34 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
     fd6:	f01b ffdd 	bl	1cf94 <radio_is_ready>
     fda:	2800      	cmp	r0, #0
     fdc:	d08b      	beq.n	ef6 <isr+0x11e>
     fde:	e74e      	b.n	e7e <isr+0xa6>
     fe0:	20000fb4 	.word	0x20000fb4
     fe4:	00025880 	.word	0x00025880
     fe8:	000258b0 	.word	0x000258b0
     fec:	0002c2bf 	.word	0x0002c2bf
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
     ff0:	7833      	ldrb	r3, [r6, #0]
     ff2:	f003 030f 	and.w	r3, r3, #15
     ff6:	2b05      	cmp	r3, #5
     ff8:	d1a6      	bne.n	f48 <isr+0x170>
     ffa:	7873      	ldrb	r3, [r6, #1]
     ffc:	2b22      	cmp	r3, #34	; 0x22
     ffe:	d1a3      	bne.n	f48 <isr+0x170>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    1000:	f814 300a 	ldrb.w	r3, [r4, sl]
    1004:	f003 030f 	and.w	r3, r3, #15
    1008:	2b01      	cmp	r3, #1
    100a:	f040 818d 	bne.w	1328 <isr+0x550>
		       isr_adv_ci_adva_check(adv, ci) &&
    100e:	4631      	mov	r1, r6
    1010:	4638      	mov	r0, r7
    1012:	f023 fae1 	bl	245d8 <isr_adv_ci_adva_check>
    1016:	b188      	cbz	r0, 103c <isr+0x264>
	return (adv->rx_addr == ci->tx_addr) &&
    1018:	7833      	ldrb	r3, [r6, #0]
    101a:	f814 200a 	ldrb.w	r2, [r4, sl]
    101e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    1022:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    1026:	f040 817d 	bne.w	1324 <isr+0x54c>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    102a:	2206      	movs	r2, #6
    102c:	1cb1      	adds	r1, r6, #2
    102e:	f107 0008 	add.w	r0, r7, #8
    1032:	f020 ff01 	bl	21e38 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    1036:	fab0 f080 	clz	r0, r0
    103a:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    103c:	2800      	cmp	r0, #0
    103e:	d083      	beq.n	f48 <isr+0x170>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    1040:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    1044:	b133      	cbz	r3, 1054 <isr+0x27c>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    1046:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    104a:	f894 2179 	ldrb.w	r2, [r4, #377]	; 0x179
    104e:	429a      	cmp	r2, r3
    1050:	f47f af7a 	bne.w	f48 <isr+0x170>
    1054:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    1058:	2b00      	cmp	r3, #0
    105a:	f43f af75 	beq.w	f48 <isr+0x170>
			node_rx = packet_rx_reserve_get(3);
    105e:	2003      	movs	r0, #3
    1060:	f019 fa0e 	bl	1a480 <packet_rx_reserve_get>
		if (!node_rx) {
    1064:	4681      	mov	r9, r0
    1066:	2800      	cmp	r0, #0
    1068:	f43f af6e 	beq.w	f48 <isr+0x170>
		_radio.state = STATE_STOP;
    106c:	f04f 0b04 	mov.w	fp, #4
    1070:	f884 b015 	strb.w	fp, [r4, #21]
		radio_disable();
    1074:	f01b ff70 	bl	1cf58 <radio_disable>
		conn = _radio.advertiser.conn;
    1078:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    107c:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    1080:	2700      	movs	r7, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    1082:	f44f 7296 	mov.w	r2, #300	; 0x12c
    1086:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    1088:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    108c:	f023 f91d 	bl	242ca <mem_index_get>
		memcpy(&conn->crc_init[0],
    1090:	f106 0112 	add.w	r1, r6, #18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    1094:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    1096:	2203      	movs	r2, #3
    1098:	f105 0014 	add.w	r0, r5, #20
    109c:	f020 fef3 	bl	21e86 <memcpy>
		memcpy(&conn->access_addr[0],
    10a0:	f105 0310 	add.w	r3, r5, #16
    10a4:	4618      	mov	r0, r3
    10a6:	465a      	mov	r2, fp
    10a8:	f106 010e 	add.w	r1, r6, #14
		memcpy(&conn->data_chan_map[0],
    10ac:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    10b0:	930a      	str	r3, [sp, #40]	; 0x28
    10b2:	f020 fee8 	bl	21e86 <memcpy>
		memcpy(&conn->data_chan_map[0],
    10b6:	2205      	movs	r2, #5
    10b8:	f106 011e 	add.w	r1, r6, #30
    10bc:	4640      	mov	r0, r8
    10be:	f020 fee2 	bl	21e86 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    10c2:	2105      	movs	r1, #5
    10c4:	4640      	mov	r0, r8
    10c6:	f023 f935 	bl	24334 <util_ones_count_get>
		conn->data_chan_count =
    10ca:	7f6a      	ldrb	r2, [r5, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    10cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    10ce:	f360 0205 	bfi	r2, r0, #0, #6
    10d2:	776a      	strb	r2, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    10d4:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    10d8:	f3c2 0204 	ubfx	r2, r2, #0, #5
    10dc:	77aa      	strb	r2, [r5, #30]
			pdu_adv->connect_ind.interval;
    10de:	f8b6 8018 	ldrh.w	r8, [r6, #24]
		conn->conn_interval =
    10e2:	f8a5 8024 	strh.w	r8, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    10e6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    10ea:	fb02 f808 	mul.w	r8, r2, r8
		conn->latency = pdu_adv->connect_ind.latency;
    10ee:	7ef1      	ldrb	r1, [r6, #27]
    10f0:	7eb2      	ldrb	r2, [r6, #26]
    10f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    10f6:	84ea      	strh	r2, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    10f8:	4619      	mov	r1, r3
    10fa:	465a      	mov	r2, fp
    10fc:	f105 0054 	add.w	r0, r5, #84	; 0x54
    1100:	f020 fec1 	bl	21e86 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    1104:	8bb3      	ldrh	r3, [r6, #28]
    1106:	f242 7210 	movw	r2, #10000	; 0x2710
    110a:	fb02 8303 	mla	r3, r2, r3, r8
    110e:	3b01      	subs	r3, #1
    1110:	fbb3 f3f8 	udiv	r3, r3, r8
    1114:	85eb      	strh	r3, [r5, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    1116:	4bc4      	ldr	r3, [pc, #784]	; (1428 <isr+0x650>)
    1118:	4443      	add	r3, r8
    111a:	fbb3 f3f8 	udiv	r3, r3, r8
    111e:	866b      	strh	r3, [r5, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    1120:	8c2b      	ldrh	r3, [r5, #32]
    1122:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    1126:	2308      	movs	r3, #8
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    1128:	4631      	mov	r1, r6
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    112a:	f889 3004 	strb.w	r3, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
    112e:	f44f 7380 	mov.w	r3, #256	; 0x100
    1132:	f8a9 3008 	strh.w	r3, [r9, #8]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    1136:	f811 3b02 	ldrb.w	r3, [r1], #2
    113a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    113e:	f889 300a 	strb.w	r3, [r9, #10]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    1142:	2206      	movs	r2, #6
    1144:	f109 000b 	add.w	r0, r9, #11
    1148:	f020 fe9d 	bl	21e86 <memcpy>
			pdu_adv->connect_ind.interval;
    114c:	7e72      	ldrb	r2, [r6, #25]
    114e:	7e33      	ldrb	r3, [r6, #24]
    1150:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->interval =
    1154:	f8a9 3012 	strh.w	r3, [r9, #18]
			pdu_adv->connect_ind.latency;
    1158:	7ef2      	ldrb	r2, [r6, #27]
    115a:	7eb3      	ldrb	r3, [r6, #26]
    115c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->latency =
    1160:	f8a9 3014 	strh.w	r3, [r9, #20]
			pdu_adv->connect_ind.timeout;
    1164:	7f72      	ldrb	r2, [r6, #29]
    1166:	7f33      	ldrb	r3, [r6, #28]
    1168:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->timeout =
    116c:	f8a9 3016 	strh.w	r3, [r9, #22]
			pdu_adv->connect_ind.sca;
    1170:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    1174:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    1178:	f889 3018 	strb.w	r3, [r9, #24]
		rx_fc_lock(conn->handle);
    117c:	8c28      	ldrh	r0, [r5, #32]
    117e:	f019 fa8f 	bl	1a6a0 <rx_fc_lock>
		packet_rx_enqueue();
    1182:	f019 fa3b 	bl	1a5fc <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    1186:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    118a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    118e:	49a7      	ldr	r1, [pc, #668]	; (142c <isr+0x654>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    1190:	0952      	lsrs	r2, r2, #5
    1192:	f362 0384 	bfi	r3, r2, #2, #3
    1196:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    119a:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    119e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    11a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    11a6:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    11a8:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    11ac:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    11b0:	4a9f      	ldr	r2, [pc, #636]	; (1430 <isr+0x658>)
    11b2:	f203 233f 	addw	r3, r3, #575	; 0x23f
    11b6:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    11ba:	63eb      	str	r3, [r5, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    11bc:	ea4f 0358 	mov.w	r3, r8, lsr #1
    11c0:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    11c2:	642b      	str	r3, [r5, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    11c4:	7d73      	ldrb	r3, [r6, #21]
    11c6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    11ca:	4353      	muls	r3, r2
		conn->slave.window_size_prepare_us = 0;
    11cc:	e9c5 7313 	strd	r7, r3, [r5, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    11d0:	4639      	mov	r1, r7
    11d2:	4638      	mov	r0, r7
    11d4:	f023 fcd9 	bl	24b8a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    11d8:	4996      	ldr	r1, [pc, #600]	; (1434 <isr+0x65c>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    11da:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    11dc:	f200 4052 	addw	r0, r0, #1106	; 0x452
    11e0:	a38f      	add	r3, pc, #572	; (adr r3, 1420 <isr+0x648>)
    11e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    11e6:	fba0 0101 	umull	r0, r1, r0, r1
    11ea:	f7fe ffc9 	bl	180 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    11ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    11f2:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    11f4:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    11f6:	4293      	cmp	r3, r2
    11f8:	bf38      	it	cc
    11fa:	4613      	movcc	r3, r2
    11fc:	4699      	mov	r9, r3
		conn_interval_us -=
    11fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		conn->hdr.ticks_xtal_to_start =
    1200:	602a      	str	r2, [r5, #0]
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    1202:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn_interval_us -=
    1206:	eba8 0303 	sub.w	r3, r8, r3
		conn->hdr.ticks_slot =
    120a:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    120c:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    120e:	930a      	str	r3, [sp, #40]	; 0x28
		conn_offset_us = radio_tmr_end_get();
    1210:	f01c f860 	bl	1d2d4 <radio_tmr_end_get>
			((u64_t)pdu_adv->connect_ind.win_offset +
    1214:	8af6      	ldrh	r6, [r6, #22]
		conn_offset_us +=
    1216:	f240 42e2 	movw	r2, #1250	; 0x4e2
		conn_offset_us = radio_tmr_end_get();
    121a:	4680      	mov	r8, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    121c:	4639      	mov	r1, r7
    121e:	4638      	mov	r0, r7
		conn_offset_us +=
    1220:	fb02 2606 	mla	r6, r2, r6, r2
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    1224:	f023 fcaf 	bl	24b86 <radio_tx_chain_delay_get>
    1228:	3e30      	subs	r6, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    122a:	f240 43ad 	movw	r3, #1197	; 0x4ad
    122e:	44b0      	add	r8, r6
    1230:	eba8 0800 	sub.w	r8, r8, r0
    1234:	9300      	str	r3, [sp, #0]
    1236:	2205      	movs	r2, #5
    1238:	4b7f      	ldr	r3, [pc, #508]	; (1438 <isr+0x660>)
    123a:	4639      	mov	r1, r7
    123c:	4638      	mov	r0, r7
    123e:	f017 ffbd 	bl	191bc <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    1242:	f240 41ae 	movw	r1, #1198	; 0x4ae
    1246:	f019 fa91 	bl	1a76c <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    124a:	f814 300a 	ldrb.w	r3, [r4, sl]
    124e:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 1434 <isr+0x65c>
    1252:	f003 030f 	and.w	r3, r3, #15
    1256:	2b01      	cmp	r3, #1
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    1258:	eba8 080b 	sub.w	r8, r8, fp
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    125c:	d106      	bne.n	126c <isr+0x494>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    125e:	9700      	str	r7, [sp, #0]
    1260:	463b      	mov	r3, r7
    1262:	2203      	movs	r2, #3
    1264:	4639      	mov	r1, r7
    1266:	4638      	mov	r0, r7
    1268:	f017 ffa8 	bl	191bc <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    126c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    126e:	fba3 670a 	umull	r6, r7, r3, sl
    1272:	4630      	mov	r0, r6
    1274:	a36a      	add	r3, pc, #424	; (adr r3, 1420 <isr+0x648>)
    1276:	e9d3 2300 	ldrd	r2, r3, [r3]
    127a:	4639      	mov	r1, r7
    127c:	f7fe ff80 	bl	180 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1280:	68a3      	ldr	r3, [r4, #8]
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
    1282:	f895 4020 	ldrb.w	r4, [r5, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1286:	eba3 0309 	sub.w	r3, r3, r9
    128a:	930a      	str	r3, [sp, #40]	; 0x28
    128c:	f240 43c5 	movw	r3, #1221	; 0x4c5
    1290:	9308      	str	r3, [sp, #32]
    1292:	4b6a      	ldr	r3, [pc, #424]	; (143c <isr+0x664>)
    1294:	e9cd 5306 	strd	r5, r3, [sp, #24]
    1298:	4b69      	ldr	r3, [pc, #420]	; (1440 <isr+0x668>)
    129a:	9305      	str	r3, [sp, #20]
    129c:	68eb      	ldr	r3, [r5, #12]
    129e:	444b      	add	r3, r9
    12a0:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    12a2:	4b68      	ldr	r3, [pc, #416]	; (1444 <isr+0x66c>)
    12a4:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    12a8:	fba5 bc03 	umull	fp, ip, r5, r3
    12ac:	2307      	movs	r3, #7
    12ae:	fb03 cc05 	mla	ip, r3, r5, ip
    12b2:	ebb6 000b 	subs.w	r0, r6, fp
    12b6:	eb67 010c 	sbc.w	r1, r7, ip
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    12ba:	f04f 0900 	mov.w	r9, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    12be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    12c2:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    12c4:	f8cd 900c 	str.w	r9, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    12c8:	f7fe ff5a 	bl	180 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    12cc:	a354      	add	r3, pc, #336	; (adr r3, 1420 <isr+0x648>)
    12ce:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    12d2:	e9cd 5001 	strd	r5, r0, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    12d6:	fba8 010a 	umull	r0, r1, r8, sl
    12da:	f7fe ff51 	bl	180 <__aeabi_uldivmod>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
    12de:	3407      	adds	r4, #7
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    12e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    12e4:	b2e4      	uxtb	r4, r4
    12e6:	9000      	str	r0, [sp, #0]
    12e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12ea:	4622      	mov	r2, r4
    12ec:	4649      	mov	r1, r9
    12ee:	4648      	mov	r0, r9
    12f0:	f017 fed2 	bl	19098 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    12f4:	f030 0302 	bics.w	r3, r0, #2
    12f8:	f43f adfd 	beq.w	ef6 <isr+0x11e>
    12fc:	2301      	movs	r3, #1
    12fe:	f04f 0100 	mov.w	r1, #0
    1302:	f363 0107 	bfi	r1, r3, #0, #8
    1306:	4a50      	ldr	r2, [pc, #320]	; (1448 <isr+0x670>)
    1308:	4b50      	ldr	r3, [pc, #320]	; (144c <isr+0x674>)
    130a:	4851      	ldr	r0, [pc, #324]	; (1450 <isr+0x678>)
    130c:	1a9b      	subs	r3, r3, r2
    130e:	08db      	lsrs	r3, r3, #3
    1310:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(0);
    1314:	f01f fc76 	bl	20c04 <log_0>
    1318:	4040      	eors	r0, r0
    131a:	f380 8811 	msr	BASEPRI, r0
    131e:	f04f 0004 	mov.w	r0, #4
    1322:	df02      	svc	2
	return (adv->rx_addr == ci->tx_addr) &&
    1324:	2000      	movs	r0, #0
    1326:	e689      	b.n	103c <isr+0x264>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    1328:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    132c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
		(devmatch_ok)) &&
    1330:	079a      	lsls	r2, r3, #30
    1332:	d500      	bpl.n	1336 <isr+0x55e>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    1334:	b135      	cbz	r5, 1344 <isr+0x56c>
	       isr_adv_ci_adva_check(adv, ci);
    1336:	4631      	mov	r1, r6
    1338:	4638      	mov	r0, r7
    133a:	f023 f94d 	bl	245d8 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    133e:	f000 0001 	and.w	r0, r0, #1
    1342:	e67b      	b.n	103c <isr+0x264>
    1344:	4628      	mov	r0, r5
    1346:	e7fa      	b.n	133e <isr+0x566>
		if (crc_ok &&
    1348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    134a:	2b00      	cmp	r3, #0
    134c:	f000 80a4 	beq.w	1498 <isr+0x6c0>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    1350:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    1354:	079b      	lsls	r3, r3, #30
    1356:	d502      	bpl.n	135e <isr+0x586>
		if (crc_ok &&
    1358:	2d00      	cmp	r5, #0
    135a:	f000 809d 	beq.w	1498 <isr+0x6c0>
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    135e:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    1362:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    1366:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    136a:	7a2a      	ldrb	r2, [r5, #8]
    136c:	f012 030f 	ands.w	r3, r2, #15
    1370:	d001      	beq.n	1376 <isr+0x59e>
    1372:	2b06      	cmp	r3, #6
    1374:	d170      	bne.n	1458 <isr+0x680>
		 (_radio.scanner.type != 0) &&
    1376:	f894 10e1 	ldrb.w	r1, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    137a:	07cf      	lsls	r7, r1, #31
    137c:	d541      	bpl.n	1402 <isr+0x62a>
		 (_radio.scanner.type != 0) &&
    137e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    1382:	2900      	cmp	r1, #0
    1384:	d13d      	bne.n	1402 <isr+0x62a>
		err = isr_rx_scan_report(rssi_ready,
    1386:	4640      	mov	r0, r8
    1388:	f023 f992 	bl	246b0 <isr_rx_scan_report.isra.35>
		if (err) {
    138c:	4607      	mov	r7, r0
    138e:	2800      	cmp	r0, #0
    1390:	f040 8082 	bne.w	1498 <isr+0x6c0>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    1394:	f01b fe36 	bl	1d004 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    1398:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    139a:	492e      	ldr	r1, [pc, #184]	; (1454 <isr+0x67c>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    139c:	2203      	movs	r2, #3
    139e:	f362 0303 	bfi	r3, r2, #0, #4
    13a2:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    13a4:	7a2a      	ldrb	r2, [r5, #8]
    13a6:	b2db      	uxtb	r3, r3
    13a8:	f3c2 1280 	ubfx	r2, r2, #6, #1
    13ac:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    13b0:	220c      	movs	r2, #12
    13b2:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    13b4:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    13b8:	f3c2 1200 	ubfx	r2, r2, #4, #1
    13bc:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    13c0:	4606      	mov	r6, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    13c2:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    13c4:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    13c8:	f020 fd5d 	bl	21e86 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    13cc:	2206      	movs	r2, #6
    13ce:	f105 010a 	add.w	r1, r5, #10
    13d2:	f106 0008 	add.w	r0, r6, #8
    13d6:	f020 fd56 	bl	21e86 <memcpy>
		_radio.scanner.state = 1;
    13da:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    13de:	f043 0302 	orr.w	r3, r3, #2
    13e2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    13e6:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    13e8:	2302      	movs	r3, #2
    13ea:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    13ec:	f01b fea2 	bl	1d134 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    13f0:	4638      	mov	r0, r7
    13f2:	f01b fe0b 	bl	1d00c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    13f6:	4630      	mov	r0, r6
    13f8:	f01b fd9c 	bl	1cf34 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    13fc:	f01b ff62 	bl	1d2c4 <radio_tmr_end_capture>
    1400:	e5e9      	b.n	fd6 <isr+0x1fe>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    1402:	bb4b      	cbnz	r3, 1458 <isr+0x680>
	bool dir_report = false;
    1404:	2100      	movs	r1, #0
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    1406:	7a6b      	ldrb	r3, [r5, #9]
    1408:	2b00      	cmp	r3, #0
    140a:	d045      	beq.n	1498 <isr+0x6c0>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    140c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    1410:	2b00      	cmp	r3, #0
    1412:	d141      	bne.n	1498 <isr+0x6c0>
		err = isr_rx_scan_report(rssi_ready,
    1414:	4640      	mov	r0, r8
    1416:	f023 f94b 	bl	246b0 <isr_rx_scan_report.isra.35>
		if (err) {
    141a:	e03d      	b.n	1498 <isr+0x6c0>
    141c:	f3af 8000 	nop.w
    1420:	1afd498d 	.word	0x1afd498d
    1424:	00000007 	.word	0x00000007
    1428:	026259ff 	.word	0x026259ff
    142c:	000263dc 	.word	0x000263dc
    1430:	000f4240 	.word	0x000f4240
    1434:	3b9aca00 	.word	0x3b9aca00
    1438:	0001a76d 	.word	0x0001a76d
    143c:	00024621 	.word	0x00024621
    1440:	00000491 	.word	0x00000491
    1444:	1afd498d 	.word	0x1afd498d
    1448:	00025880 	.word	0x00025880
    144c:	000258b0 	.word	0x000258b0
    1450:	0002c1be 	.word	0x0002c1be
    1454:	20001096 	.word	0x20001096
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    1458:	2b01      	cmp	r3, #1
    145a:	d028      	beq.n	14ae <isr+0x6d6>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    145c:	7a2b      	ldrb	r3, [r5, #8]
					&dir_report))) ||
    145e:	f003 020b 	and.w	r2, r3, #11
    1462:	2a02      	cmp	r2, #2
    1464:	d0ce      	beq.n	1404 <isr+0x62c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    1466:	f003 030f 	and.w	r3, r3, #15
    146a:	2b04      	cmp	r3, #4
    146c:	d114      	bne.n	1498 <isr+0x6c0>
		   (_radio.scanner.state != 0) &&
    146e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    1472:	0798      	lsls	r0, r3, #30
    1474:	d510      	bpl.n	1498 <isr+0x6c0>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    1476:	f01b fdc5 	bl	1d004 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    147a:	7a2b      	ldrb	r3, [r5, #8]
    147c:	7802      	ldrb	r2, [r0, #0]
    147e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    1482:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    1486:	d107      	bne.n	1498 <isr+0x6c0>
		(memcmp(&sreq->scan_req.adv_addr[0],
    1488:	2206      	movs	r2, #6
    148a:	f105 010a 	add.w	r1, r5, #10
    148e:	3008      	adds	r0, #8
    1490:	f020 fcd2 	bl	21e38 <memcmp>
		   (_radio.scanner.state != 0) &&
    1494:	2800      	cmp	r0, #0
    1496:	d0b5      	beq.n	1404 <isr+0x62c>
			_radio.state = STATE_CLOSE;
    1498:	2303      	movs	r3, #3
    149a:	7563      	strb	r3, [r4, #21]
			radio_disable();
    149c:	f01b fd5c 	bl	1cf58 <radio_disable>
			_radio.scanner.state = 0U;
    14a0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    14a4:	f36f 0341 	bfc	r3, #1, #1
    14a8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    14ac:	e523      	b.n	ef6 <isr+0x11e>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    14ae:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    14b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
    14b6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    14ba:	d010      	beq.n	14de <isr+0x706>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    14bc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    14c0:	f3c3 0341 	ubfx	r3, r3, #1, #2
    14c4:	079e      	lsls	r6, r3, #30
    14c6:	d5c9      	bpl.n	145c <isr+0x684>
    14c8:	f995 3008 	ldrsb.w	r3, [r5, #8]
    14cc:	2b00      	cmp	r3, #0
    14ce:	dac5      	bge.n	145c <isr+0x684>
	    (pdu->rx_addr != 0) &&
    14d0:	7d6b      	ldrb	r3, [r5, #21]
    14d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    14d6:	2b40      	cmp	r3, #64	; 0x40
    14d8:	d1c0      	bne.n	145c <isr+0x684>
		return true;
    14da:	2101      	movs	r1, #1
    14dc:	e793      	b.n	1406 <isr+0x62e>
		(memcmp(&_radio.scanner.init_addr[0],
    14de:	2206      	movs	r2, #6
    14e0:	f105 0110 	add.w	r1, r5, #16
    14e4:	48bf      	ldr	r0, [pc, #764]	; (17e4 <isr+0xa0c>)
    14e6:	f020 fca7 	bl	21e38 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    14ea:	2800      	cmp	r0, #0
    14ec:	d08a      	beq.n	1404 <isr+0x62c>
    14ee:	e7e5      	b.n	14bc <isr+0x6e4>
	_radio.packet_counter++;
    14f0:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    14f4:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
	if (crc_ok) {
    14f8:	990a      	ldr	r1, [sp, #40]	; 0x28
	_radio.packet_counter++;
    14fa:	3301      	adds	r3, #1
    14fc:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    1500:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    1504:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1508:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    150c:	2202      	movs	r2, #2
    150e:	7132      	strb	r2, [r6, #4]
	if (crc_ok) {
    1510:	2900      	cmp	r1, #0
    1512:	f000 85d5 	beq.w	20c0 <isr+0x12e8>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    1516:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    151a:	7a30      	ldrb	r0, [r6, #8]
    151c:	f002 0101 	and.w	r1, r2, #1
    1520:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1524:	4288      	cmp	r0, r1
    1526:	f000 80b1 	beq.w	168c <isr+0x8b4>
		_radio.conn_curr->sn++;
    152a:	f081 0101 	eor.w	r1, r1, #1
    152e:	f361 0200 	bfi	r2, r1, #0, #1
    1532:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		if (_radio.role == ROLE_SLAVE) {
    1536:	7d22      	ldrb	r2, [r4, #20]
    1538:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1U;
    153a:	bf02      	ittt	eq
    153c:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    1540:	f042 0201 	orreq.w	r2, r2, #1
    1544:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    1548:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    154c:	0611      	lsls	r1, r2, #24
    154e:	f100 8099 	bmi.w	1684 <isr+0x8ac>
			node_tx = _radio.conn_curr->pkt_tx_head;
    1552:	f8d3 8114 	ldr.w	r8, [r3, #276]	; 0x114
				_radio.conn_curr->packet_tx_head_offset);
    1556:	f893 0129 	ldrb.w	r0, [r3, #297]	; 0x129
			pdu_data_tx = (void *)(node_tx->pdu_data +
    155a:	f108 0c04 	add.w	ip, r8, #4
    155e:	eb0c 0900 	add.w	r9, ip, r0
			pdu_data_tx_len = pdu_data_tx->len;
    1562:	f899 5001 	ldrb.w	r5, [r9, #1]
			if (pdu_data_tx_len != 0) {
    1566:	2d00      	cmp	r5, #0
    1568:	d13c      	bne.n	15e4 <isr+0x80c>
	u32_t ret = 0U;
    156a:	f04f 0900 	mov.w	r9, #0
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    156e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    1572:	f892 3129 	ldrb.w	r3, [r2, #297]	; 0x129
			if (_radio.conn_curr->packet_tx_head_offset ==
    1576:	f892 1128 	ldrb.w	r1, [r2, #296]	; 0x128
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    157a:	442b      	add	r3, r5
    157c:	b2db      	uxtb	r3, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    157e:	4299      	cmp	r1, r3
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    1580:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
			if (_radio.conn_curr->packet_tx_head_offset ==
    1584:	d059      	beq.n	163a <isr+0x862>
	return NULL;
    1586:	f04f 0800 	mov.w	r8, #0
	if (ret == ERR_TERMINATE) {
    158a:	f1b9 0f00 	cmp.w	r9, #0
    158e:	d07f      	beq.n	1690 <isr+0x8b8>
		connection_release(_radio.conn_curr);
    1590:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    1594:	f019 fc9c 	bl	1aed0 <connection_release>
		_radio.conn_curr = NULL;
    1598:	2700      	movs	r7, #0
				_radio.conn_curr = NULL;
    159a:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    159e:	f01b fe85 	bl	1d2ac <radio_tmr_aa_restore>
    15a2:	b918      	cbnz	r0, 15ac <isr+0x7d4>
		radio_tmr_aa_save(radio_tmr_aa_get());
    15a4:	f01b fe76 	bl	1d294 <radio_tmr_aa_get>
    15a8:	f01b fe7a 	bl	1d2a0 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    15ac:	4c8e      	ldr	r4, [pc, #568]	; (17e8 <isr+0xa10>)
    15ae:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    15b2:	2b00      	cmp	r3, #0
    15b4:	f43f ac9f 	beq.w	ef6 <isr+0x11e>
	if (tx_release) {
    15b8:	f1b8 0f00 	cmp.w	r8, #0
    15bc:	d003      	beq.n	15c6 <isr+0x7ee>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    15be:	4641      	mov	r1, r8
    15c0:	8c18      	ldrh	r0, [r3, #32]
    15c2:	f019 fbf9 	bl	1adb8 <pdu_node_tx_release>
	if (rx_enqueue) {
    15c6:	2f00      	cmp	r7, #0
    15c8:	f43f ac95 	beq.w	ef6 <isr+0x11e>
		rx_fc_lock(_radio.conn_curr->handle);
    15cc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    15d0:	8c18      	ldrh	r0, [r3, #32]
    15d2:	f019 f865 	bl	1a6a0 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    15d6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    15da:	8c1b      	ldrh	r3, [r3, #32]
    15dc:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    15de:	f019 f80d 	bl	1a5fc <packet_rx_enqueue>
    15e2:	e488      	b.n	ef6 <isr+0x11e>
				if (_radio.conn_curr->enc_tx) {
    15e4:	0692      	lsls	r2, r2, #26
    15e6:	d50a      	bpl.n	15fe <isr+0x826>
					_radio.conn_curr->ccm_tx.counter++;
    15e8:	f8d3 2102 	ldr.w	r2, [r3, #258]	; 0x102
    15ec:	f8d3 1106 	ldr.w	r1, [r3, #262]	; 0x106
    15f0:	3201      	adds	r2, #1
    15f2:	f141 0100 	adc.w	r1, r1, #0
    15f6:	f8c3 2102 	str.w	r2, [r3, #258]	; 0x102
    15fa:	f8c3 1106 	str.w	r1, [r3, #262]	; 0x106
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    15fe:	f81c 3000 	ldrb.w	r3, [ip, r0]
    1602:	f003 0303 	and.w	r3, r3, #3
    1606:	2b03      	cmp	r3, #3
    1608:	d1af      	bne.n	156a <isr+0x792>
	switch (pdu_data_tx->llctrl.opcode) {
    160a:	f899 2003 	ldrb.w	r2, [r9, #3]
    160e:	2a02      	cmp	r2, #2
    1610:	d1ab      	bne.n	156a <isr+0x792>
		_radio.state = STATE_CLOSE;
    1612:	7563      	strb	r3, [r4, #21]
		radio_disable();
    1614:	f01b fca0 	bl	1cf58 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    1618:	f01b fcbc 	bl	1cf94 <radio_is_ready>
    161c:	2800      	cmp	r0, #0
    161e:	f47f ac2e 	bne.w	e7e <isr+0xa6>
		     (pdu_data_tx->llctrl.terminate_ind.error_code ==
    1622:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    1626:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    162a:	2913      	cmp	r1, #19
    162c:	bf08      	it	eq
    162e:	2116      	moveq	r1, #22
    1630:	f019 fd6c 	bl	1b10c <terminate_ind_rx_enqueue>
		ret = ERR_TERMINATE;
    1634:	f04f 0901 	mov.w	r9, #1
    1638:	e799      	b.n	156e <isr+0x796>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    163a:	e9d2 1345 	ldrd	r1, r3, [r2, #276]	; 0x114
	conn->packet_tx_head_len = 0U;
    163e:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    1640:	4299      	cmp	r1, r3
	conn->packet_tx_head_len = 0U;
    1642:	f8a2 0128 	strh.w	r0, [r2, #296]	; 0x128
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    1646:	d112      	bne.n	166e <isr+0x896>
		if (node_tx) {
    1648:	f1b8 0f00 	cmp.w	r8, #0
    164c:	d09b      	beq.n	1586 <isr+0x7ae>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    164e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    1652:	680d      	ldr	r5, [r1, #0]
    1654:	f8c2 5114 	str.w	r5, [r2, #276]	; 0x114
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    1658:	4299      	cmp	r1, r3
				conn->pkt_tx_ctrl_last = NULL;
    165a:	bf0c      	ite	eq
    165c:	e9c2 0046 	strdeq	r0, r0, [r2, #280]	; 0x118
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    1660:	f8c2 5118 	strne.w	r5, [r2, #280]	; 0x118
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    1664:	4961      	ldr	r1, [pc, #388]	; (17ec <isr+0xa14>)
    1666:	4640      	mov	r0, r8
    1668:	f022 fe17 	bl	2429a <mem_release>
    166c:	e78b      	b.n	1586 <isr+0x7ae>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    166e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    1672:	4299      	cmp	r1, r3
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    1674:	bf04      	itt	eq
    1676:	680b      	ldreq	r3, [r1, #0]
    1678:	f8c2 3120 	streq.w	r3, [r2, #288]	; 0x120
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    167c:	680b      	ldr	r3, [r1, #0]
    167e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		return node_tx;
    1682:	e782      	b.n	158a <isr+0x7b2>
			_radio.conn_curr->empty = 0U;
    1684:	f36f 12c7 	bfc	r2, #7, #1
    1688:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	struct radio_pdu_node_tx *tx_release = NULL;
    168c:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    1690:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    1694:	7a32      	ldrb	r2, [r6, #8]
    1696:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    169a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    169e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    16a2:	429a      	cmp	r2, r3
    16a4:	f040 81b3 	bne.w	1a0e <isr+0xc36>
	    (packet_rx_reserve_get(3) != 0) &&
    16a8:	2003      	movs	r0, #3
    16aa:	f018 fee9 	bl	1a480 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    16ae:	2800      	cmp	r0, #0
    16b0:	f000 81ad 	beq.w	1a0e <isr+0xc36>
	    (packet_rx_reserve_get(3) != 0) &&
    16b4:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    16b8:	b383      	cbz	r3, 171c <isr+0x944>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    16ba:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    16be:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
	    ((_radio.fc_ena == 0) ||
    16c2:	4293      	cmp	r3, r2
    16c4:	d105      	bne.n	16d2 <isr+0x8fa>
	      (_radio.fc_req == _radio.fc_ack)) ||
    16c6:	f894 2178 	ldrb.w	r2, [r4, #376]	; 0x178
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    16ca:	f894 1179 	ldrb.w	r1, [r4, #377]	; 0x179
    16ce:	4291      	cmp	r1, r2
    16d0:	d024      	beq.n	171c <isr+0x944>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    16d2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
	      (_radio.fc_req == _radio.fc_ack)) ||
    16d6:	4293      	cmp	r3, r2
    16d8:	f000 8199 	beq.w	1a0e <isr+0xc36>
	      (_radio.fc_req != _radio.fc_ack) &&
    16dc:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    16e0:	f894 2179 	ldrb.w	r2, [r4, #377]	; 0x179
    16e4:	429a      	cmp	r2, r3
    16e6:	f000 8192 	beq.w	1a0e <isr+0xc36>
		(((_radio.fc_req == 0) &&
    16ea:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    16ee:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	      (_radio.fc_req != _radio.fc_ack) &&
    16f2:	b923      	cbnz	r3, 16fe <isr+0x926>
		(((_radio.fc_req == 0) &&
    16f4:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
    16f8:	8c13      	ldrh	r3, [r2, #32]
    16fa:	4299      	cmp	r1, r3
    16fc:	d00e      	beq.n	171c <isr+0x944>
		 ((_radio.fc_req != 0) &&
    16fe:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
		   _radio.conn_curr->handle)) ||
    1702:	2b00      	cmp	r3, #0
    1704:	f000 8183 	beq.w	1a0e <isr+0xc36>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    1708:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    170c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    1710:	f8b3 1170 	ldrh.w	r1, [r3, #368]	; 0x170
    1714:	8c13      	ldrh	r3, [r2, #32]
    1716:	4299      	cmp	r1, r3
    1718:	f040 8179 	bne.w	1a0e <isr+0xc36>
		if (pdu_data_rx->len != 0) {
    171c:	f896 9009 	ldrb.w	r9, [r6, #9]
    1720:	f1b9 0f00 	cmp.w	r9, #0
    1724:	f000 8153 	beq.w	19ce <isr+0xbf6>
			if (_radio.conn_curr->enc_rx) {
    1728:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    172c:	f893 90d0 	ldrb.w	r9, [r3, #208]	; 0xd0
    1730:	f019 0910 	ands.w	r9, r9, #16
    1734:	d016      	beq.n	1764 <isr+0x98c>
				done = radio_ccm_is_done();
    1736:	f01b fe33 	bl	1d3a0 <radio_ccm_is_done>
				LL_ASSERT(done);
    173a:	b960      	cbnz	r0, 1756 <isr+0x97e>
    173c:	2301      	movs	r3, #1
    173e:	f04f 0100 	mov.w	r1, #0
    1742:	f363 0107 	bfi	r1, r3, #0, #8
    1746:	4a2a      	ldr	r2, [pc, #168]	; (17f0 <isr+0xa18>)
    1748:	4b2a      	ldr	r3, [pc, #168]	; (17f4 <isr+0xa1c>)
    174a:	482b      	ldr	r0, [pc, #172]	; (17f8 <isr+0xa20>)
    174c:	1a9b      	subs	r3, r3, r2
    174e:	08db      	lsrs	r3, r3, #3
    1750:	f363 118f 	bfi	r1, r3, #6, #10
    1754:	e5de      	b.n	1314 <isr+0x53c>
			if ((_radio.conn_curr->enc_rx &&
    1756:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    175a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    175e:	06dd      	lsls	r5, r3, #27
    1760:	d44c      	bmi.n	17fc <isr+0xa24>
				ccm_rx_increment = 1U;
    1762:	46b9      	mov	r9, r7
			    (_radio.conn_curr->pause_rx &&
    1764:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    1768:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    176c:	930c      	str	r3, [sp, #48]	; 0x30
			     !radio_ccm_mic_is_valid()) ||
    176e:	f013 0f04 	tst.w	r3, #4
    1772:	7a33      	ldrb	r3, [r6, #8]
    1774:	d010      	beq.n	1798 <isr+0x9c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    1776:	f003 0103 	and.w	r1, r3, #3
    177a:	2903      	cmp	r1, #3
    177c:	d142      	bne.n	1804 <isr+0xa2c>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    177e:	f995 c01d 	ldrsb.w	ip, [r5, #29]
    1782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	u8_t opcode = pdu_data->llctrl.opcode;
    1784:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    1786:	f1bc 0f00 	cmp.w	ip, #0
    178a:	f002 0040 	and.w	r0, r2, #64	; 0x40
    178e:	db60      	blt.n	1852 <isr+0xa7a>
	       (!conn->role &&
    1790:	2800      	cmp	r0, #0
    1792:	d14b      	bne.n	182c <isr+0xa54>
		((!conn->refresh &&
    1794:	2902      	cmp	r1, #2
    1796:	d159      	bne.n	184c <isr+0xa74>
			switch (pdu_data_rx->ll_id) {
    1798:	f3c3 0301 	ubfx	r3, r3, #0, #2
    179c:	b2d9      	uxtb	r1, r3
    179e:	b25b      	sxtb	r3, r3
    17a0:	2b00      	cmp	r3, #0
    17a2:	f000 847f 	beq.w	20a4 <isr+0x12cc>
    17a6:	2902      	cmp	r1, #2
    17a8:	f240 80bc 	bls.w	1924 <isr+0xb4c>
	switch (pdu_data_rx->llctrl.opcode) {
    17ac:	f896 a00b 	ldrb.w	sl, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    17b0:	f106 0b08 	add.w	fp, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    17b4:	f1ba 0f11 	cmp.w	sl, #17
    17b8:	f200 845f 	bhi.w	207a <isr+0x12a2>
    17bc:	e8df f01a 	tbh	[pc, sl, lsl #1]
    17c0:	00d30057 	.word	0x00d30057
    17c4:	045d010b 	.word	0x045d010b
    17c8:	045d045d 	.word	0x045d045d
    17cc:	0401045d 	.word	0x0401045d
    17d0:	01310114 	.word	0x01310114
    17d4:	045d045d 	.word	0x045d045d
    17d8:	045d0157 	.word	0x045d0157
    17dc:	01b90129 	.word	0x01b90129
    17e0:	039d031a 	.word	0x039d031a
    17e4:	20001096 	.word	0x20001096
    17e8:	20000fb4 	.word	0x20000fb4
    17ec:	20001108 	.word	0x20001108
    17f0:	00025880 	.word	0x00025880
    17f4:	000258b0 	.word	0x000258b0
    17f8:	0002c2e2 	.word	0x0002c2e2
			     !radio_ccm_mic_is_valid()) ||
    17fc:	f01b fdee 	bl	1d3dc <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    1800:	2800      	cmp	r0, #0
    1802:	d1ae      	bne.n	1762 <isr+0x98a>
				_radio.state = STATE_CLOSE;
    1804:	2303      	movs	r3, #3
    1806:	7563      	strb	r3, [r4, #21]
				radio_disable();
    1808:	f01b fba6 	bl	1cf58 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    180c:	f01b fbc2 	bl	1cf94 <radio_is_ready>
    1810:	4607      	mov	r7, r0
    1812:	2800      	cmp	r0, #0
    1814:	f47f ab33 	bne.w	e7e <isr+0xa6>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    1818:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    181c:	213d      	movs	r1, #61	; 0x3d
    181e:	f019 fc75 	bl	1b10c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    1822:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    1826:	f019 fb53 	bl	1aed0 <connection_release>
    182a:	e6b6      	b.n	159a <isr+0x7c2>
		 (conn->refresh &&
    182c:	1e88      	subs	r0, r1, #2
    182e:	b2c0      	uxtb	r0, r0
    1830:	2809      	cmp	r0, #9
    1832:	d80b      	bhi.n	184c <isr+0xa74>
    1834:	f240 2c05 	movw	ip, #517	; 0x205
    1838:	fa2c f000 	lsr.w	r0, ip, r0
    183c:	07c0      	lsls	r0, r0, #31
    183e:	d4ab      	bmi.n	1798 <isr+0x9c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    1840:	48c5      	ldr	r0, [pc, #788]	; (1b58 <isr+0xd80>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    1842:	fa20 f101 	lsr.w	r1, r0, r1
    1846:	07ca      	lsls	r2, r1, #31
    1848:	d4a6      	bmi.n	1798 <isr+0x9c0>
    184a:	e7db      	b.n	1804 <isr+0xa2c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    184c:	2911      	cmp	r1, #17
    184e:	d8d9      	bhi.n	1804 <isr+0xa2c>
    1850:	e7f6      	b.n	1840 <isr+0xa68>
	       (conn->role &&
    1852:	b938      	cbnz	r0, 1864 <isr+0xa8c>
		((!conn->refresh &&
    1854:	2907      	cmp	r1, #7
    1856:	d09f      	beq.n	1798 <isr+0x9c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    1858:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    185a:	d09d      	beq.n	1798 <isr+0x9c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    185c:	2911      	cmp	r1, #17
    185e:	d8d1      	bhi.n	1804 <isr+0xa2c>
    1860:	48be      	ldr	r0, [pc, #760]	; (1b5c <isr+0xd84>)
    1862:	e7ee      	b.n	1842 <isr+0xa6a>
		 (conn->refresh &&
    1864:	1e88      	subs	r0, r1, #2
    1866:	2801      	cmp	r0, #1
    1868:	d996      	bls.n	1798 <isr+0x9c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    186a:	290b      	cmp	r1, #11
    186c:	e7f5      	b.n	185a <isr+0xa82>
		if (!_radio.conn_curr->role ||
    186e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1872:	2b00      	cmp	r3, #0
    1874:	f280 8401 	bge.w	207a <isr+0x12a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    1878:	7a71      	ldrb	r1, [r6, #9]
    187a:	2000      	movs	r0, #0
    187c:	f018 fdda 	bl	1a434 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    1880:	2800      	cmp	r0, #0
    1882:	f000 83fa 	beq.w	207a <isr+0x12a2>
	packet_rx_callback();
}

static u8_t conn_update(struct connection *conn, struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    1886:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    188a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    188c:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    188e:	041f      	lsls	r7, r3, #16
    1890:	d444      	bmi.n	191c <isr+0xb44>
		return BT_HCI_ERR_INSTANT_PASSED;
	}

	/* different transaction collision */
	if (conn->llcp_req != conn->llcp_ack) {
    1892:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1896:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
    189a:	429a      	cmp	r2, r3
    189c:	d161      	bne.n	1962 <isr+0xb8a>
	}

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
    189e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    18a2:	b90a      	cbnz	r2, 18a8 <isr+0xad0>
		LL_ASSERT(conn->role);

		_radio.conn_upd = conn;
    18a4:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
	}

	conn->llcp.conn_upd.win_size =
    18a8:	7b32      	ldrb	r2, [r6, #12]
    18aa:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_size;
	conn->llcp.conn_upd.win_offset_us =
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    18ae:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    18b2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    18b6:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    18b8:	66ea      	str	r2, [r5, #108]	; 0x6c
	conn->llcp.conn_upd.interval =
		pdu_data_rx->llctrl.conn_update_ind.interval;
    18ba:	7c30      	ldrb	r0, [r6, #16]
    18bc:	7bf2      	ldrb	r2, [r6, #15]
    18be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    18c2:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
	conn->llcp.conn_upd.latency =
		pdu_data_rx->llctrl.conn_update_ind.latency;
    18c6:	7cb0      	ldrb	r0, [r6, #18]
    18c8:	7c72      	ldrb	r2, [r6, #17]
    18ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    18ce:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
	conn->llcp.conn_upd.timeout =
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    18d2:	7cf2      	ldrb	r2, [r6, #19]
    18d4:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    18d6:	f8a5 1068 	strh.w	r1, [r5, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    18da:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    18de:	f8a5 2066 	strh.w	r2, [r5, #102]	; 0x66
		pdu_data_rx->llctrl.conn_update_ind.instant;
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    18e2:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
    18e6:	f022 0207 	bic.w	r2, r2, #7
	conn->llcp.conn_upd.is_internal = 0U;

	conn->llcp_type = LLCP_CONN_UPD;
	conn->llcp_ack--;
    18ea:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    18ec:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
	conn->llcp_type = LLCP_CONN_UPD;
    18f0:	2201      	movs	r2, #1
    18f2:	f885 205e 	strb.w	r2, [r5, #94]	; 0x5e
	conn->llcp_ack--;
    18f6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    18fa:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
    18fe:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    1902:	4293      	cmp	r3, r2
    1904:	d007      	beq.n	1916 <isr+0xb3e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    1906:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    190a:	f003 0307 	and.w	r3, r3, #7
    190e:	2b04      	cmp	r3, #4
    1910:	d101      	bne.n	1916 <isr+0xb3e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1912:	f885 20a9 	strb.w	r2, [r5, #169]	; 0xa9
			_radio.conn_curr->procedure_expire = 0U;
    1916:	2300      	movs	r3, #0
    1918:	86ab      	strh	r3, [r5, #52]	; 0x34
    191a:	e002      	b.n	1922 <isr+0xb4a>
		return BT_HCI_ERR_INSTANT_PASSED;
    191c:	2328      	movs	r3, #40	; 0x28
			_radio.conn_curr->llcp_terminate.reason_peer = err;
    191e:	f885 309b 	strb.w	r3, [r5, #155]	; 0x9b
	u8_t rx_enqueue = 0U;
    1922:	4657      	mov	r7, sl
			_radio.conn_curr->nesn++;
    1924:	4b8e      	ldr	r3, [pc, #568]	; (1b60 <isr+0xd88>)
    1926:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    192a:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    192e:	f082 0202 	eor.w	r2, r2, #2
    1932:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			if (ccm_rx_increment) {
    1936:	f1b9 0f00 	cmp.w	r9, #0
    193a:	d00a      	beq.n	1952 <isr+0xb7a>
				_radio.conn_curr->ccm_rx.counter++;
    193c:	f8d3 20e1 	ldr.w	r2, [r3, #225]	; 0xe1
    1940:	f8d3 10e5 	ldr.w	r1, [r3, #229]	; 0xe5
    1944:	3201      	adds	r2, #1
    1946:	f141 0100 	adc.w	r1, r1, #0
    194a:	f8c3 20e1 	str.w	r2, [r3, #225]	; 0xe1
    194e:	f8c3 10e5 	str.w	r1, [r3, #229]	; 0xe5
		_radio.crc_expire = 0U;
    1952:	4b83      	ldr	r3, [pc, #524]	; (1b60 <isr+0xd88>)
    1954:	2500      	movs	r5, #0
    1956:	f883 5119 	strb.w	r5, [r3, #281]	; 0x119
		_radio.conn_curr->supervision_expire = 0U;
    195a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    195e:	861d      	strh	r5, [r3, #48]	; 0x30
    1960:	e3c2      	b.n	20e8 <isr+0x1310>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    1962:	232a      	movs	r3, #42	; 0x2a
    1964:	e7db      	b.n	191e <isr+0xb46>
		if (!_radio.conn_curr->role ||
    1966:	f995 301d 	ldrsb.w	r3, [r5, #29]
    196a:	2b00      	cmp	r3, #0
    196c:	f280 8385 	bge.w	207a <isr+0x12a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    1970:	7a71      	ldrb	r1, [r6, #9]
    1972:	2001      	movs	r0, #1
    1974:	f018 fd5e 	bl	1a434 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    1978:	2800      	cmp	r0, #0
    197a:	f000 837e 	beq.w	207a <isr+0x12a2>
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED && CONFIG_BT_CTLR_SCHED_ADVANCED */

static u8_t chan_map_update(struct connection *conn,
			    struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    197e:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    1982:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    1984:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    1986:	041c      	lsls	r4, r3, #16
    1988:	d41e      	bmi.n	19c8 <isr+0xbf0>
		return BT_HCI_ERR_INSTANT_PASSED;
	}

	/* different transaction collision */
	if (conn->llcp_req != conn->llcp_ack) {
    198a:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
    198e:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1992:	429a      	cmp	r2, r3
    1994:	d11d      	bne.n	19d2 <isr+0xbfa>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
	}


	memcpy(&conn->llcp.chan_map.chm[0],
    1996:	2205      	movs	r2, #5
    1998:	f106 010c 	add.w	r1, r6, #12
    199c:	f105 0061 	add.w	r0, r5, #97	; 0x61
    19a0:	f020 fa71 	bl	21e86 <memcpy>
	       &pdu_data_rx->llctrl.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->llctrl.chan_map_ind.instant;
    19a4:	7c73      	ldrb	r3, [r6, #17]
    19a6:	7cb2      	ldrb	r2, [r6, #18]
    19a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    19ac:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->llcp.chan_map.initiate = 0U;

	conn->llcp_type = LLCP_CHAN_MAP;
    19b0:	2302      	movs	r3, #2
    19b2:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
	conn->llcp_ack--;
    19b6:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0U;
    19ba:	2700      	movs	r7, #0
	conn->llcp_ack--;
    19bc:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0U;
    19be:	f885 7060 	strb.w	r7, [r5, #96]	; 0x60
	conn->llcp_ack--;
    19c2:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		if (!nack) {
    19c6:	e7ad      	b.n	1924 <isr+0xb4c>
		return BT_HCI_ERR_INSTANT_PASSED;
    19c8:	2328      	movs	r3, #40	; 0x28
		_radio.conn_curr->llcp_terminate.reason_peer =
    19ca:	f885 309b 	strb.w	r3, [r5, #155]	; 0x9b
	u8_t rx_enqueue = 0U;
    19ce:	2700      	movs	r7, #0
    19d0:	e7a8      	b.n	1924 <isr+0xb4c>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    19d2:	232a      	movs	r3, #42	; 0x2a
			_radio.conn_curr->llcp_terminate.reason_peer = err;
    19d4:	e7f9      	b.n	19ca <isr+0xbf2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    19d6:	7a71      	ldrb	r1, [r6, #9]
    19d8:	2002      	movs	r0, #2
    19da:	f018 fd2b 	bl	1a434 <pdu_len_cmp>
    19de:	2800      	cmp	r0, #0
    19e0:	f000 834b 	beq.w	207a <isr+0x12a2>
		_radio.conn_curr->llcp_terminate.reason_peer =
    19e4:	7b33      	ldrb	r3, [r6, #12]
    19e6:	e7f0      	b.n	19ca <isr+0xbf2>
		if (!_radio.conn_curr->role ||
    19e8:	f995 301d 	ldrsb.w	r3, [r5, #29]
    19ec:	2b00      	cmp	r3, #0
    19ee:	f280 8344 	bge.w	207a <isr+0x12a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    19f2:	7a71      	ldrb	r1, [r6, #9]
    19f4:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    19f6:	f018 fd1d 	bl	1a434 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    19fa:	2800      	cmp	r0, #0
    19fc:	f000 833d 	beq.w	207a <isr+0x12a2>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    1a00:	4659      	mov	r1, fp
    1a02:	4628      	mov	r0, r5
    1a04:	f01a fa7e 	bl	1bf04 <feature_rsp_send>
				nack = reject_ext_ind_send(conn,
    1a08:	4607      	mov	r7, r0
		if (!nack) {
    1a0a:	2800      	cmp	r0, #0
    1a0c:	d08a      	beq.n	1924 <isr+0xb4c>
	u8_t rx_enqueue = 0U;
    1a0e:	2700      	movs	r7, #0
    1a10:	e79f      	b.n	1952 <isr+0xb7a>
		if (_radio.conn_curr->role ||
    1a12:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1a16:	2b00      	cmp	r3, #0
    1a18:	f2c0 832f 	blt.w	207a <isr+0x12a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    1a1c:	7a71      	ldrb	r1, [r6, #9]
    1a1e:	200e      	movs	r0, #14
    1a20:	e7e9      	b.n	19f6 <isr+0xc1e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    1a22:	7a71      	ldrb	r1, [r6, #9]
    1a24:	2009      	movs	r0, #9
    1a26:	f018 fd05 	bl	1a434 <pdu_len_cmp>
    1a2a:	2800      	cmp	r0, #0
    1a2c:	f000 8325 	beq.w	207a <isr+0x12a2>
	       (features[1] << 8) | (features[2] << 16);
    1a30:	7bb3      	ldrb	r3, [r6, #14]
    1a32:	7b72      	ldrb	r2, [r6, #13]
    1a34:	041b      	lsls	r3, r3, #16
    1a36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    1a3a:	7b32      	ldrb	r2, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    1a3c:	4313      	orrs	r3, r2
    1a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    1a42:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    1a46:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	       (features[1] << 8) | (features[2] << 16);
    1a4a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    1a4e:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    1a52:	4013      	ands	r3, r2
    1a54:	f3c3 0310 	ubfx	r3, r3, #0, #17
    1a58:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1U;
    1a5c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    1a60:	f043 0320 	orr.w	r3, r3, #32
    1a64:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0U;
    1a68:	2300      	movs	r3, #0
    1a6a:	86ab      	strh	r3, [r5, #52]	; 0x34
		if (!nack) {
    1a6c:	e75a      	b.n	1924 <isr+0xb4c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    1a6e:	7a71      	ldrb	r1, [r6, #9]
    1a70:	200c      	movs	r0, #12
    1a72:	f018 fcdf 	bl	1a434 <pdu_len_cmp>
    1a76:	2800      	cmp	r0, #0
    1a78:	f000 82ff 	beq.w	207a <isr+0x12a2>
{
	struct pdu_data_llctrl_version_ind *v;
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	if (!conn->llcp_version.tx) {
    1a7c:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    1a80:	f013 0701 	ands.w	r7, r3, #1
    1a84:	d14f      	bne.n	1b26 <isr+0xd4e>
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1a86:	4837      	ldr	r0, [pc, #220]	; (1b64 <isr+0xd8c>)
    1a88:	f022 fbee 	bl	24268 <mem_acquire>
		if (!node_tx) {
    1a8c:	4601      	mov	r1, r0
    1a8e:	2800      	cmp	r0, #0
    1a90:	d0bd      	beq.n	1a0e <isr+0xc36>
			return 1;
		}
		conn->llcp_version.tx = 1U;
    1a92:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    1a96:	f043 0301 	orr.w	r3, r3, #1
    1a9a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90

		pdu_ctrl_tx = (void *)node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a9e:	7903      	ldrb	r3, [r0, #4]
    1aa0:	f043 0303 	orr.w	r3, r3, #3
    1aa4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    1aa6:	2306      	movs	r3, #6
    1aa8:	7143      	strb	r3, [r0, #5]
			offsetof(struct pdu_data_llctrl, version_ind) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1aaa:	230c      	movs	r3, #12
    1aac:	71c3      	strb	r3, [r0, #7]
		v = &pdu_ctrl_tx->llctrl.version_ind;
		v->version_number = LL_VERSION_NUMBER;
    1aae:	2309      	movs	r3, #9
    1ab0:	7203      	strb	r3, [r0, #8]
		v->company_id =	CONFIG_BT_CTLR_COMPANY_ID;
    1ab2:	f06f 030e 	mvn.w	r3, #14
    1ab6:	7243      	strb	r3, [r0, #9]
    1ab8:	2305      	movs	r3, #5
    1aba:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	CONFIG_BT_CTLR_SUBVERSION_NUMBER;
    1abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ac0:	72c3      	strb	r3, [r0, #11]
    1ac2:	7303      	strb	r3, [r0, #12]

		ctrl_tx_sec_enqueue(conn, node_tx);
    1ac4:	4628      	mov	r0, r5
    1ac6:	f022 fe63 	bl	24790 <ctrl_tx_sec_enqueue>
	conn->empty = 1U;
    1aca:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    1ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1ad2:	f885 30d0 	strb.w	r3, [r5, #208]	; 0xd0
	pdu_data_tx = (void *)radio_pkt_empty_get();
    1ad6:	f01b fa91 	bl	1cffc <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    1ada:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0U;
    1adc:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    1ade:	2201      	movs	r2, #1
    1ae0:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    1ae4:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    1ae8:	7003      	strb	r3, [r0, #0]
	if (conn->pkt_tx_head) {
    1aea:	b2db      	uxtb	r3, r3
    1aec:	b1c2      	cbz	r2, 1b20 <isr+0xd48>
		pdu_data_tx->md = 1U;
    1aee:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0U;
    1af2:	7003      	strb	r3, [r0, #0]
		/* Tx-ed and Rx-ed before, ignore this invalid Rx. */
		return 0;
	}

	v = &pdu_data_rx->llctrl.version_ind;
	conn->llcp_version.version_number = v->version_number;
    1af4:	7b33      	ldrb	r3, [r6, #12]
    1af6:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    1afa:	7bb2      	ldrb	r2, [r6, #14]
    1afc:	7b73      	ldrb	r3, [r6, #13]
    1afe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1b02:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    1b06:	7bf3      	ldrb	r3, [r6, #15]
    1b08:	7c32      	ldrb	r2, [r6, #16]
    1b0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1b0e:	f8a5 3094 	strh.w	r3, [r5, #148]	; 0x94
	conn->llcp_version.rx = 1U;
    1b12:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    1b16:	f043 0302 	orr.w	r3, r3, #2
    1b1a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
		if (!nack) {
    1b1e:	e701      	b.n	1924 <isr+0xb4c>
		pdu_data_tx->md = 0U;
    1b20:	f367 1304 	bfi	r3, r7, #4, #1
    1b24:	e7e5      	b.n	1af2 <isr+0xd1a>
	} else if (!conn->llcp_version.rx) {
    1b26:	f013 0302 	ands.w	r3, r3, #2
    1b2a:	f47f af50 	bne.w	19ce <isr+0xbf6>
		conn->procedure_expire = 0U;
    1b2e:	86ab      	strh	r3, [r5, #52]	; 0x34
		*rx_enqueue = 1U;
    1b30:	e7e0      	b.n	1af4 <isr+0xd1c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    1b32:	7a71      	ldrb	r1, [r6, #9]
    1b34:	200f      	movs	r0, #15
    1b36:	f018 fc7d 	bl	1a434 <pdu_len_cmp>
    1b3a:	2800      	cmp	r0, #0
    1b3c:	f000 829d 	beq.w	207a <isr+0x12a2>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    1b40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    1b44:	930b      	str	r3, [sp, #44]	; 0x2c
    1b46:	b17b      	cbz	r3, 1b68 <isr+0xd90>
    1b48:	429d      	cmp	r5, r3
    1b4a:	d00d      	beq.n	1b68 <isr+0xd90>
			nack = reject_ext_ind_send(_radio.conn_curr,
    1b4c:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn,
    1b4e:	210f      	movs	r1, #15
				nack = reject_ext_ind_send(conn,
    1b50:	4628      	mov	r0, r5
    1b52:	f01a fa19 	bl	1bf88 <reject_ext_ind_send>
    1b56:	e757      	b.n	1a08 <isr+0xc30>
    1b58:	00022060 	.word	0x00022060
    1b5c:	00022040 	.word	0x00022040
    1b60:	20000fb4 	.word	0x20000fb4
    1b64:	20001108 	.word	0x20001108
		if (!_radio.conn_curr->role) {
    1b68:	f995 101d 	ldrsb.w	r1, [r5, #29]
    1b6c:	f895 b0a9 	ldrb.w	fp, [r5, #169]	; 0xa9
    1b70:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    1b74:	2900      	cmp	r1, #0
    1b76:	f2c0 80a0 	blt.w	1cba <isr+0xee2>
			if ((conn->llcp_conn_param.req !=
    1b7a:	459b      	cmp	fp, r3
    1b7c:	d009      	beq.n	1b92 <isr+0xdba>
			    ((conn->llcp_conn_param.state ==
    1b7e:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
					conn->llcp_conn_param.ack) &&
    1b82:	f013 0307 	ands.w	r3, r3, #7
    1b86:	d002      	beq.n	1b8e <isr+0xdb6>
			      LLCP_CPR_STATE_REQ) ||
    1b88:	3b04      	subs	r3, #4
    1b8a:	2b01      	cmp	r3, #1
    1b8c:	d801      	bhi.n	1b92 <isr+0xdba>
				nack = reject_ext_ind_send(_radio.conn_curr,
    1b8e:	2223      	movs	r2, #35	; 0x23
    1b90:	e7dd      	b.n	1b4e <isr+0xd76>
			} else if (conn->llcp_req != conn->llcp_ack) {
    1b92:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
    1b96:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1b9a:	4299      	cmp	r1, r3
    1b9c:	d001      	beq.n	1ba2 <isr+0xdca>
				nack = reject_ext_ind_send(_radio.conn_curr,
    1b9e:	222a      	movs	r2, #42	; 0x2a
    1ba0:	e7d5      	b.n	1b4e <isr+0xd76>
				if ((cpr->interval_min < 6) ||
    1ba2:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
    1ba6:	fa1f f38a 	uxth.w	r3, sl
    1baa:	2b05      	cmp	r3, #5
    1bac:	d922      	bls.n	1bf4 <isr+0xe1c>
				    (cpr->interval_max > 3200) ||
    1bae:	f8b6 e00e 	ldrh.w	lr, [r6, #14]
    1bb2:	fa1f f18e 	uxth.w	r1, lr
				if ((cpr->interval_min < 6) ||
    1bb6:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
    1bba:	d81b      	bhi.n	1bf4 <isr+0xe1c>
				    (cpr->interval_max > 3200) ||
    1bbc:	428b      	cmp	r3, r1
    1bbe:	d819      	bhi.n	1bf4 <isr+0xe1c>
				    (cpr->latency > 499) ||
    1bc0:	f8b6 c010 	ldrh.w	ip, [r6, #16]
    1bc4:	fa1f f08c 	uxth.w	r0, ip
				    (cpr->interval_min > cpr->interval_max) ||
    1bc8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    1bcc:	d212      	bcs.n	1bf4 <isr+0xe1c>
				    (cpr->timeout < 10) ||
    1bce:	8a73      	ldrh	r3, [r6, #18]
    1bd0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1bd4:	b29b      	uxth	r3, r3
				    (cpr->latency > 499) ||
    1bd6:	f1a3 040a 	sub.w	r4, r3, #10
    1bda:	b2a4      	uxth	r4, r4
    1bdc:	f640 4276 	movw	r2, #3190	; 0xc76
    1be0:	4294      	cmp	r4, r2
    1be2:	d807      	bhi.n	1bf4 <isr+0xe1c>
				     ((cpr->latency + 1) *
    1be4:	fb00 1401 	mla	r4, r0, r1, r1
				    (cpr->timeout > 3200) ||
    1be8:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
    1bec:	da02      	bge.n	1bf4 <isr+0xe1c>
				    (cpr->preferred_periodicity >
    1bee:	7d34      	ldrb	r4, [r6, #20]
				      cpr->interval_max)) ||
    1bf0:	42a1      	cmp	r1, r4
    1bf2:	d201      	bcs.n	1bf8 <isr+0xe20>
				nack = reject_ext_ind_send(conn,
    1bf4:	221e      	movs	r2, #30
    1bf6:	e7aa      	b.n	1b4e <isr+0xd76>
				conn->llcp_conn_param.timeout =	cpr->timeout;
    1bf8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
				conn->llcp_conn_param.interval_min =
    1bfc:	f8a5 a0ac 	strh.w	sl, [r5, #172]	; 0xac
				conn->llcp_conn_param.interval_max =
    1c00:	f8a5 e0ae 	strh.w	lr, [r5, #174]	; 0xae
				conn->llcp_conn_param.latency =	cpr->latency;
    1c04:	f8a5 c0b0 	strh.w	ip, [r5, #176]	; 0xb0
				conn->llcp_conn_param.timeout =	cpr->timeout;
    1c08:	f8a5 20b2 	strh.w	r2, [r5, #178]	; 0xb2
				conn->llcp_conn_param.preferred_periodicity =
    1c0c:	f885 40b4 	strb.w	r4, [r5, #180]	; 0xb4
					cpr->reference_conn_event_count;
    1c10:	f896 c016 	ldrb.w	ip, [r6, #22]
    1c14:	7d74      	ldrb	r4, [r6, #21]
    1c16:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    1c1a:	f8a5 40b6 	strh.w	r4, [r5, #182]	; 0xb6
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    1c1e:	f896 c018 	ldrb.w	ip, [r6, #24]
    1c22:	7df4      	ldrb	r4, [r6, #23]
    1c24:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c28:	f8a5 40b8 	strh.w	r4, [r5, #184]	; 0xb8
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    1c2c:	f896 c01a 	ldrb.w	ip, [r6, #26]
    1c30:	7e74      	ldrb	r4, [r6, #25]
    1c32:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c36:	f8a5 40ba 	strh.w	r4, [r5, #186]	; 0xba
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    1c3a:	f896 c01c 	ldrb.w	ip, [r6, #28]
    1c3e:	7ef4      	ldrb	r4, [r6, #27]
    1c40:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c44:	f8a5 40bc 	strh.w	r4, [r5, #188]	; 0xbc
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    1c48:	f896 c01e 	ldrb.w	ip, [r6, #30]
    1c4c:	7f74      	ldrb	r4, [r6, #29]
    1c4e:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c52:	f8a5 40be 	strh.w	r4, [r5, #190]	; 0xbe
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    1c56:	f896 c020 	ldrb.w	ip, [r6, #32]
    1c5a:	7ff4      	ldrb	r4, [r6, #31]
    1c5c:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c60:	f8a5 40c0 	strh.w	r4, [r5, #192]	; 0xc0
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    1c64:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
    1c68:	f896 c022 	ldrb.w	ip, [r6, #34]	; 0x22
    1c6c:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    1c70:	f8a5 40c2 	strh.w	r4, [r5, #194]	; 0xc2
				     conn->conn_interval) ||
    1c74:	8cac      	ldrh	r4, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval_max !=
    1c76:	42a1      	cmp	r1, r4
    1c78:	d111      	bne.n	1c9e <isr+0xec6>
				     conn->conn_interval) ||
    1c7a:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
    1c7c:	4281      	cmp	r1, r0
    1c7e:	d10e      	bne.n	1c9e <isr+0xec6>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    1c80:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1c84:	4361      	muls	r1, r4
    1c86:	1e48      	subs	r0, r1, #1
    1c88:	f242 7410 	movw	r4, #10000	; 0x2710
    1c8c:	fb04 0303 	mla	r3, r4, r3, r0
    1c90:	fbb3 f3f1 	udiv	r3, r3, r1
				     conn->latency) ||
    1c94:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
    1c96:	b29b      	uxth	r3, r3
    1c98:	4299      	cmp	r1, r3
    1c9a:	f000 80a2 	beq.w	1de2 <isr+0x100a>
					if (conn->pause_tx) {
    1c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ca0:	f013 0f08 	tst.w	r3, #8
    1ca4:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1ca8:	f000 808a 	beq.w	1dc0 <isr+0xfe8>
						conn->llcp_conn_param.state =
    1cac:	2202      	movs	r2, #2
    1cae:	f362 0302 	bfi	r3, r2, #0, #3
    1cb2:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
	u8_t rx_enqueue = 0U;
    1cb6:	2700      	movs	r7, #0
    1cb8:	e087      	b.n	1dca <isr+0xff2>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    1cba:	459b      	cmp	fp, r3
    1cbc:	d004      	beq.n	1cc8 <isr+0xef0>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    1cbe:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1cc2:	0798      	lsls	r0, r3, #30
    1cc4:	f040 84af 	bne.w	2626 <isr+0x184e>
			if ((cpr->interval_min < 6) ||
    1cc8:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
    1ccc:	fa1f f38a 	uxth.w	r3, sl
    1cd0:	2b05      	cmp	r3, #5
    1cd2:	d98f      	bls.n	1bf4 <isr+0xe1c>
			    (cpr->interval_max > 3200) ||
    1cd4:	f8b6 e00e 	ldrh.w	lr, [r6, #14]
    1cd8:	fa1f f28e 	uxth.w	r2, lr
			if ((cpr->interval_min < 6) ||
    1cdc:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
    1ce0:	d888      	bhi.n	1bf4 <isr+0xe1c>
			    (cpr->interval_max > 3200) ||
    1ce2:	4293      	cmp	r3, r2
    1ce4:	d886      	bhi.n	1bf4 <isr+0xe1c>
			    (cpr->latency > 499) ||
    1ce6:	f8b6 c010 	ldrh.w	ip, [r6, #16]
    1cea:	fa1f f18c 	uxth.w	r1, ip
			    (cpr->interval_min > cpr->interval_max) ||
    1cee:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    1cf2:	f4bf af7f 	bcs.w	1bf4 <isr+0xe1c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    1cf6:	8a73      	ldrh	r3, [r6, #18]
    1cf8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    1cfc:	b29b      	uxth	r3, r3
			    (cpr->latency > 499) ||
    1cfe:	f1a3 000a 	sub.w	r0, r3, #10
    1d02:	b280      	uxth	r0, r0
    1d04:	f640 4476 	movw	r4, #3190	; 0xc76
    1d08:	42a0      	cmp	r0, r4
    1d0a:	f63f af73 	bhi.w	1bf4 <isr+0xe1c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    1d0e:	fb01 2002 	mla	r0, r1, r2, r2
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    1d12:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
    1d16:	f6bf af6d 	bge.w	1bf4 <isr+0xe1c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    1d1a:	7d30      	ldrb	r0, [r6, #20]
						    cpr->interval_max)) ||
    1d1c:	4282      	cmp	r2, r0
    1d1e:	f4ff af69 	bcc.w	1bf4 <isr+0xe1c>
			conn->llcp_conn_param.timeout =	cpr->timeout;
    1d22:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
			conn->llcp_conn_param.interval_min = cpr->interval_min;
    1d26:	f8a5 a0ac 	strh.w	sl, [r5, #172]	; 0xac
			conn->llcp_conn_param.interval_max = cpr->interval_max;
    1d2a:	f8a5 e0ae 	strh.w	lr, [r5, #174]	; 0xae
			conn->llcp_conn_param.latency =	cpr->latency;
    1d2e:	f8a5 c0b0 	strh.w	ip, [r5, #176]	; 0xb0
			conn->llcp_conn_param.timeout =	cpr->timeout;
    1d32:	f8a5 40b2 	strh.w	r4, [r5, #178]	; 0xb2
			conn->llcp_conn_param.preferred_periodicity =
    1d36:	f885 00b4 	strb.w	r0, [r5, #180]	; 0xb4
				cpr->reference_conn_event_count;
    1d3a:	7db4      	ldrb	r4, [r6, #22]
    1d3c:	7d70      	ldrb	r0, [r6, #21]
    1d3e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    1d42:	f8a5 00b6 	strh.w	r0, [r5, #182]	; 0xb6
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    1d46:	7e34      	ldrb	r4, [r6, #24]
    1d48:	7df0      	ldrb	r0, [r6, #23]
    1d4a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d4e:	f8a5 00b8 	strh.w	r0, [r5, #184]	; 0xb8
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    1d52:	7eb4      	ldrb	r4, [r6, #26]
    1d54:	7e70      	ldrb	r0, [r6, #25]
    1d56:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d5a:	f8a5 00ba 	strh.w	r0, [r5, #186]	; 0xba
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    1d5e:	7f34      	ldrb	r4, [r6, #28]
    1d60:	7ef0      	ldrb	r0, [r6, #27]
    1d62:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d66:	f8a5 00bc 	strh.w	r0, [r5, #188]	; 0xbc
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    1d6a:	7fb4      	ldrb	r4, [r6, #30]
    1d6c:	7f70      	ldrb	r0, [r6, #29]
    1d6e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d72:	f8a5 00be 	strh.w	r0, [r5, #190]	; 0xbe
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    1d76:	f896 4020 	ldrb.w	r4, [r6, #32]
    1d7a:	7ff0      	ldrb	r0, [r6, #31]
    1d7c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d80:	f8a5 00c0 	strh.w	r0, [r5, #192]	; 0xc0
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    1d84:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
    1d88:	f896 4022 	ldrb.w	r4, [r6, #34]	; 0x22
    1d8c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1d90:	f8a5 00c2 	strh.w	r0, [r5, #194]	; 0xc2
			     conn->conn_interval) ||
    1d94:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval_max !=
    1d96:	4282      	cmp	r2, r0
    1d98:	d110      	bne.n	1dbc <isr+0xfe4>
			     conn->conn_interval) ||
    1d9a:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
    1d9c:	4288      	cmp	r0, r1
    1d9e:	d10d      	bne.n	1dbc <isr+0xfe4>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    1da0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1da4:	434a      	muls	r2, r1
    1da6:	1e51      	subs	r1, r2, #1
    1da8:	f242 7010 	movw	r0, #10000	; 0x2710
    1dac:	fb00 1303 	mla	r3, r0, r3, r1
    1db0:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != conn->latency) ||
    1db4:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    1db6:	b29b      	uxth	r3, r3
    1db8:	429a      	cmp	r2, r3
    1dba:	d012      	beq.n	1de2 <isr+0x100a>
				conn->llcp_conn_param.state =
    1dbc:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1dc0:	2203      	movs	r2, #3
    1dc2:	f362 0302 	bfi	r3, r2, #0, #3
    1dc6:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
			conn->llcp_conn_param.ack--;
    1dca:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    1dce:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
			if (_radio.conn_upd == 0) {
    1dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	f47f ada5 	bne.w	1924 <isr+0xb4c>
				_radio.conn_upd = conn;
    1dda:	4bb3      	ldr	r3, [pc, #716]	; (20a8 <isr+0x12d0>)
    1ddc:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
		if (!nack) {
    1de0:	e5a0      	b.n	1924 <isr+0xb4c>
				conn->llcp_conn_param.state =
    1de2:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
    1de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1dea:	f043 0301 	orr.w	r3, r3, #1
    1dee:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
    1df2:	e760      	b.n	1cb6 <isr+0xede>
		if (_radio.conn_curr->role ||
    1df4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	f2c0 813e 	blt.w	207a <isr+0x12a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    1dfe:	7a71      	ldrb	r1, [r6, #9]
    1e00:	2010      	movs	r0, #16
    1e02:	f018 fb17 	bl	1a434 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    1e06:	2800      	cmp	r0, #0
    1e08:	f000 8137 	beq.w	207a <isr+0x12a2>
		if (!_radio.conn_curr->role &&
    1e0c:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
    1e10:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    1e14:	429a      	cmp	r2, r3
    1e16:	f43f adda 	beq.w	19ce <isr+0xbf6>
		    (_radio.conn_curr->llcp_conn_param.state ==
    1e1a:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
		     _radio.conn_curr->llcp_conn_param.ack) &&
    1e1e:	f003 0307 	and.w	r3, r3, #7
    1e22:	2b04      	cmp	r3, #4
    1e24:	f47f add3 	bne.w	19ce <isr+0xbf6>
			if ((cpr->interval_min < 6) ||
    1e28:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
    1e2c:	fa1f f38e 	uxth.w	r3, lr
    1e30:	2b05      	cmp	r3, #5
    1e32:	d91e      	bls.n	1e72 <isr+0x109a>
			    (cpr->interval_max > 3200) ||
    1e34:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
    1e38:	fa1f f28c 	uxth.w	r2, ip
			if ((cpr->interval_min < 6) ||
    1e3c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
    1e40:	d817      	bhi.n	1e72 <isr+0x109a>
			    (cpr->interval_max > 3200) ||
    1e42:	4293      	cmp	r3, r2
    1e44:	d815      	bhi.n	1e72 <isr+0x109a>
			    (cpr->latency > 499) ||
    1e46:	8a34      	ldrh	r4, [r6, #16]
    1e48:	b2a3      	uxth	r3, r4
			    (cpr->interval_min > cpr->interval_max) ||
    1e4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    1e4e:	d210      	bcs.n	1e72 <isr+0x109a>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    1e50:	8a70      	ldrh	r0, [r6, #18]
    1e52:	b287      	uxth	r7, r0
			    (cpr->latency > 499) ||
    1e54:	f1a7 010a 	sub.w	r1, r7, #10
    1e58:	b289      	uxth	r1, r1
    1e5a:	f640 4a76 	movw	sl, #3190	; 0xc76
    1e5e:	4551      	cmp	r1, sl
    1e60:	d807      	bhi.n	1e72 <isr+0x109a>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    1e62:	fb03 2302 	mla	r3, r3, r2, r2
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    1e66:	ebb3 0f87 	cmp.w	r3, r7, lsl #2
    1e6a:	da02      	bge.n	1e72 <isr+0x109a>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    1e6c:	7d33      	ldrb	r3, [r6, #20]
						    cpr->interval_max)) ||
    1e6e:	429a      	cmp	r2, r3
    1e70:	d202      	bcs.n	1e78 <isr+0x10a0>
				nack = reject_ext_ind_send(conn,
    1e72:	221e      	movs	r2, #30
    1e74:	2110      	movs	r1, #16
    1e76:	e66b      	b.n	1b50 <isr+0xd78>
			_radio.conn_curr->procedure_expire = 0U;
    1e78:	2700      	movs	r7, #0
    1e7a:	86af      	strh	r7, [r5, #52]	; 0x34
			conn->llcp_conn_param.interval_min = cpr->interval_min;
    1e7c:	f8a5 e0ac 	strh.w	lr, [r5, #172]	; 0xac
			conn->llcp_conn_param.interval_max = cpr->interval_max;
    1e80:	f8a5 c0ae 	strh.w	ip, [r5, #174]	; 0xae
			conn->llcp_conn_param.latency =	cpr->latency;
    1e84:	f8a5 40b0 	strh.w	r4, [r5, #176]	; 0xb0
			conn->llcp_conn_param.timeout =	cpr->timeout;
    1e88:	f8a5 00b2 	strh.w	r0, [r5, #178]	; 0xb2
			conn->llcp_conn_param.preferred_periodicity =
    1e8c:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
				cpr->reference_conn_event_count;
    1e90:	7db2      	ldrb	r2, [r6, #22]
    1e92:	7d73      	ldrb	r3, [r6, #21]
    1e94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    1e98:	f8a5 30b6 	strh.w	r3, [r5, #182]	; 0xb6
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    1e9c:	7e32      	ldrb	r2, [r6, #24]
    1e9e:	7df3      	ldrb	r3, [r6, #23]
    1ea0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ea4:	f8a5 30b8 	strh.w	r3, [r5, #184]	; 0xb8
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    1ea8:	7eb2      	ldrb	r2, [r6, #26]
    1eaa:	7e73      	ldrb	r3, [r6, #25]
    1eac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1eb0:	f8a5 30ba 	strh.w	r3, [r5, #186]	; 0xba
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    1eb4:	7f32      	ldrb	r2, [r6, #28]
    1eb6:	7ef3      	ldrb	r3, [r6, #27]
    1eb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ebc:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    1ec0:	7fb2      	ldrb	r2, [r6, #30]
    1ec2:	7f73      	ldrb	r3, [r6, #29]
    1ec4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ec8:	f8a5 30be 	strh.w	r3, [r5, #190]	; 0xbe
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    1ecc:	f896 2020 	ldrb.w	r2, [r6, #32]
    1ed0:	7ff3      	ldrb	r3, [r6, #31]
    1ed2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ed6:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    1eda:	f896 2022 	ldrb.w	r2, [r6, #34]	; 0x22
    1ede:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    1ee2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ee6:	f8a5 30c2 	strh.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    1eea:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1eee:	2201      	movs	r2, #1
    1ef0:	f362 0302 	bfi	r3, r2, #0, #3
    1ef4:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
		if (!nack) {
    1ef8:	e514      	b.n	1924 <isr+0xb4c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    1efa:	7a71      	ldrb	r1, [r6, #9]
    1efc:	2011      	movs	r0, #17
    1efe:	f018 fa99 	bl	1a434 <pdu_len_cmp>
    1f02:	2800      	cmp	r0, #0
    1f04:	f000 80b9 	beq.w	207a <isr+0x12a2>
		   _radio.conn_curr->llcp_conn_param.req) {
    1f08:	f895 00a8 	ldrb.w	r0, [r5, #168]	; 0xa8
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    1f0c:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    1f10:	4283      	cmp	r3, r0
    1f12:	f43f ad5c 	beq.w	19ce <isr+0xbf6>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    1f16:	7b33      	ldrb	r3, [r6, #12]
    1f18:	2b0f      	cmp	r3, #15
    1f1a:	f47f ad58 	bne.w	19ce <isr+0xbf6>
	if (!conn->role && (rej_ext_ind->error_code ==
    1f1e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1f22:	7b72      	ldrb	r2, [r6, #13]
    1f24:	2b00      	cmp	r3, #0
    1f26:	db15      	blt.n	1f54 <isr+0x117c>
    1f28:	2a1a      	cmp	r2, #26
    1f2a:	d113      	bne.n	1f54 <isr+0x117c>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    1f2c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1f30:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
    1f34:	4299      	cmp	r1, r3
    1f36:	d07b      	beq.n	2030 <isr+0x1258>
    1f38:	2301      	movs	r3, #1
    1f3a:	f04f 0100 	mov.w	r1, #0
    1f3e:	f363 0107 	bfi	r1, r3, #0, #8
    1f42:	4a5a      	ldr	r2, [pc, #360]	; (20ac <isr+0x12d4>)
    1f44:	4b5a      	ldr	r3, [pc, #360]	; (20b0 <isr+0x12d8>)
    1f46:	485b      	ldr	r0, [pc, #364]	; (20b4 <isr+0x12dc>)
    1f48:	1a9b      	subs	r3, r3, r2
    1f4a:	08db      	lsrs	r3, r3, #3
    1f4c:	f363 118f 	bfi	r1, r3, #6, #10
    1f50:	f7ff b9e0 	b.w	1314 <isr+0x53c>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    1f54:	2a23      	cmp	r2, #35	; 0x23
    1f56:	d01d      	beq.n	1f94 <isr+0x11bc>
		LL_ASSERT(_radio.conn_upd == conn);
    1f58:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    1f5c:	428d      	cmp	r5, r1
    1f5e:	d00d      	beq.n	1f7c <isr+0x11a4>
			LL_ASSERT(_radio.conn_upd == conn);
    1f60:	2301      	movs	r3, #1
    1f62:	f04f 0100 	mov.w	r1, #0
    1f66:	f363 0107 	bfi	r1, r3, #0, #8
    1f6a:	4a50      	ldr	r2, [pc, #320]	; (20ac <isr+0x12d4>)
    1f6c:	4b50      	ldr	r3, [pc, #320]	; (20b0 <isr+0x12d8>)
    1f6e:	4852      	ldr	r0, [pc, #328]	; (20b8 <isr+0x12e0>)
    1f70:	1a9b      	subs	r3, r3, r2
    1f72:	08db      	lsrs	r3, r3, #3
    1f74:	f363 118f 	bfi	r1, r3, #6, #10
    1f78:	f7ff b9cc 	b.w	1314 <isr+0x53c>
		_radio.conn_upd = NULL;
    1f7c:	2100      	movs	r1, #0
		if (conn->role) {
    1f7e:	428b      	cmp	r3, r1
			conn->slave.ticks_to_offset =
    1f80:	bfb8      	it	lt
    1f82:	f8d5 30cc 	ldrlt.w	r3, [r5, #204]	; 0xcc
		_radio.conn_upd = NULL;
    1f86:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
		conn->llcp_conn_param.ack =
    1f8a:	f885 00a9 	strb.w	r0, [r5, #169]	; 0xa9
		conn->procedure_expire = 0U;
    1f8e:	86a9      	strh	r1, [r5, #52]	; 0x34
			conn->slave.ticks_to_offset =
    1f90:	bfb8      	it	lt
    1f92:	65ab      	strlt	r3, [r5, #88]	; 0x58
	if (!conn->llcp_conn_param.cmd) {
    1f94:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1f98:	f013 0308 	ands.w	r3, r3, #8
    1f9c:	f43f ad17 	beq.w	19ce <isr+0xbf6>
	cp->status = rej_ext_ind->error_code;
    1fa0:	7232      	strb	r2, [r6, #8]
	cp->latency = conn->latency;
    1fa2:	8cea      	ldrh	r2, [r5, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1fa4:	230a      	movs	r3, #10
    1fa6:	7133      	strb	r3, [r6, #4]
	cp->interval = conn->conn_interval;
    1fa8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	cp->latency = conn->latency;
    1faa:	81b2      	strh	r2, [r6, #12]
	cp->timeout = conn->supervision_reload *
    1fac:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
	cp->interval = conn->conn_interval;
    1fae:	8173      	strh	r3, [r6, #10]
	cp->timeout = conn->supervision_reload *
    1fb0:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    1fb2:	237d      	movs	r3, #125	; 0x7d
    1fb4:	4353      	muls	r3, r2
    1fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1fba:	fb93 f3f2 	sdiv	r3, r3, r2
	cp->timeout = conn->supervision_reload *
    1fbe:	81f3      	strh	r3, [r6, #14]
		if (!nack) {
    1fc0:	e4b0      	b.n	1924 <isr+0xb4c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    1fc2:	7a71      	ldrb	r1, [r6, #9]
    1fc4:	2007      	movs	r0, #7
    1fc6:	f018 fa35 	bl	1a434 <pdu_len_cmp>
    1fca:	2800      	cmp	r0, #0
    1fcc:	d055      	beq.n	207a <isr+0x12a2>
			   _radio.conn_curr->llcp_conn_param.req) {
    1fce:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    1fd2:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    1fd6:	4293      	cmp	r3, r2
    1fd8:	f43f ad46 	beq.w	1a68 <isr+0xc90>
			conn->llcp_conn_param.disabled = 1U;
    1fdc:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    1fe0:	f043 0310 	orr.w	r3, r3, #16
    1fe4:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
			if (!conn->role) {
    1fe8:	f995 301d 	ldrsb.w	r3, [r5, #29]
    1fec:	2b00      	cmp	r3, #0
    1fee:	da9d      	bge.n	1f2c <isr+0x1154>
			LL_ASSERT(_radio.conn_upd == conn);
    1ff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    1ff4:	429d      	cmp	r5, r3
    1ff6:	d1b3      	bne.n	1f60 <isr+0x1188>
			_radio.conn_upd = NULL;
    1ff8:	2300      	movs	r3, #0
    1ffa:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
			if (!conn->llcp_conn_param.cmd) {
    1ffe:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2002:	f885 20a9 	strb.w	r2, [r5, #169]	; 0xa9
			if (!conn->llcp_conn_param.cmd) {
    2006:	f013 0308 	ands.w	r3, r3, #8
    200a:	d04b      	beq.n	20a4 <isr+0x12cc>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    200c:	230a      	movs	r3, #10
    200e:	7133      	strb	r3, [r6, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    2010:	231a      	movs	r3, #26
    2012:	7233      	strb	r3, [r6, #8]
			cp->latency = conn->latency;
    2014:	8cea      	ldrh	r2, [r5, #38]	; 0x26
			cp->interval = conn->conn_interval;
    2016:	8cab      	ldrh	r3, [r5, #36]	; 0x24
			cp->latency = conn->latency;
    2018:	81b2      	strh	r2, [r6, #12]
			cp->timeout = conn->supervision_reload *
    201a:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
			cp->interval = conn->conn_interval;
    201c:	8173      	strh	r3, [r6, #10]
			cp->timeout = conn->supervision_reload *
    201e:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    2020:	237d      	movs	r3, #125	; 0x7d
    2022:	4353      	muls	r3, r2
    2024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2028:	fb93 f3f2 	sdiv	r3, r3, r2
			cp->timeout = conn->supervision_reload *
    202c:	81f3      	strh	r3, [r6, #14]
			*rx_enqueue = 1U;
    202e:	e51b      	b.n	1a68 <isr+0xc90>
				conn->llcp_conn_param.state =
    2030:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    2034:	2205      	movs	r2, #5
    2036:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp.conn_upd.interval =
    203a:	f8b5 20ae 	ldrh.w	r2, [r5, #174]	; 0xae
    203e:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
				conn->llcp.conn_upd.latency =
    2042:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
    2046:	666a      	str	r2, [r5, #100]	; 0x64
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    2048:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
				conn->llcp_conn_param.state =
    204c:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
				conn->llcp.conn_upd.win_size = 1U;
    2050:	2001      	movs	r0, #1
					!conn->llcp_conn_param.cmd;
    2052:	f083 0308 	eor.w	r3, r3, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    2056:	f360 0201 	bfi	r2, r0, #0, #2
					!conn->llcp_conn_param.cmd;
    205a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0U;
    205e:	2700      	movs	r7, #0
				conn->llcp.conn_upd.is_internal =
    2060:	f363 0282 	bfi	r2, r3, #2, #1
				conn->llcp_ack--;
    2064:	3901      	subs	r1, #1
				conn->llcp.conn_upd.win_size = 1U;
    2066:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
				conn->llcp.conn_upd.win_offset_us = 0U;
    206a:	66ef      	str	r7, [r5, #108]	; 0x6c
				conn->llcp.conn_upd.is_internal =
    206c:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
				conn->llcp_type = LLCP_CONN_UPD;
    2070:	f885 005e 	strb.w	r0, [r5, #94]	; 0x5e
				conn->llcp_ack--;
    2074:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
		if (!nack) {
    2078:	e454      	b.n	1924 <isr+0xb4c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    207a:	4810      	ldr	r0, [pc, #64]	; (20bc <isr+0x12e4>)
    207c:	f022 f8f4 	bl	24268 <mem_acquire>
	if (!node_tx) {
    2080:	4601      	mov	r1, r0
    2082:	2800      	cmp	r0, #0
    2084:	f43f acc3 	beq.w	1a0e <isr+0xc36>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2088:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    208a:	f880 a008 	strb.w	sl, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    208e:	f043 0303 	orr.w	r3, r3, #3
    2092:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    2094:	2302      	movs	r3, #2
    2096:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    2098:	2307      	movs	r3, #7
    209a:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    209c:	4628      	mov	r0, r5
    209e:	f022 fb49 	bl	24734 <ctrl_tx_enqueue>
		if (!nack) {
    20a2:	e494      	b.n	19ce <isr+0xbf6>
	u8_t rx_enqueue = 0U;
    20a4:	461f      	mov	r7, r3
    20a6:	e43d      	b.n	1924 <isr+0xb4c>
    20a8:	20000fb4 	.word	0x20000fb4
    20ac:	00025880 	.word	0x00025880
    20b0:	000258b0 	.word	0x000258b0
    20b4:	0002c2f8 	.word	0x0002c2f8
    20b8:	0002c32a 	.word	0x0002c32a
    20bc:	20001108 	.word	0x20001108
		if (_radio.crc_expire == 0) {
    20c0:	f894 1119 	ldrb.w	r1, [r4, #281]	; 0x119
    20c4:	b909      	cbnz	r1, 20ca <isr+0x12f2>
			_radio.crc_expire = 2U;
    20c6:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		_radio.crc_expire--;
    20ca:	f894 5119 	ldrb.w	r5, [r4, #281]	; 0x119
    20ce:	3d01      	subs	r5, #1
    20d0:	b2ed      	uxtb	r5, r5
    20d2:	f884 5119 	strb.w	r5, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    20d6:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    20d8:	fab5 f585 	clz	r5, r5
    20dc:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    20de:	2f00      	cmp	r7, #0
    20e0:	d17f      	bne.n	21e2 <isr+0x140a>
			_radio.conn_curr->supervision_expire =
    20e2:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    20e4:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    20e6:	46b8      	mov	r8, r7
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    20e8:	4ac2      	ldr	r2, [pc, #776]	; (23f4 <isr+0x161c>)
    20ea:	f8d2 9114 	ldr.w	r9, [r2, #276]	; 0x114
    20ee:	f899 30d0 	ldrb.w	r3, [r9, #208]	; 0xd0
	if (/* empty packet */
    20f2:	f013 0f80 	tst.w	r3, #128	; 0x80
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    20f6:	ea4f 1bd3 	mov.w	fp, r3, lsr #7
	if (/* empty packet */
    20fa:	4692      	mov	sl, r2
    20fc:	d108      	bne.n	2110 <isr+0x1338>
	    !conn->pkt_tx_head ||
    20fe:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	    conn->empty ||
    2102:	b128      	cbz	r0, 2110 <isr+0x1338>
	    !conn->pkt_tx_head ||
    2104:	0719      	lsls	r1, r3, #28
    2106:	f8d9 c118 	ldr.w	ip, [r9, #280]	; 0x118
    210a:	d56f      	bpl.n	21ec <isr+0x1414>
	      0) && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    210c:	4584      	cmp	ip, r0
    210e:	d06d      	beq.n	21ec <isr+0x1414>
	conn->empty = 1U;
    2110:	f899 30d0 	ldrb.w	r3, [r9, #208]	; 0xd0
    2114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2118:	f889 30d0 	strb.w	r3, [r9, #208]	; 0xd0
	pdu_data_tx = (void *)radio_pkt_empty_get();
    211c:	f01a ff6e 	bl	1cffc <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2120:	7803      	ldrb	r3, [r0, #0]
    2122:	2201      	movs	r2, #1
    2124:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0U;
    2128:	2200      	movs	r2, #0
    212a:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    212c:	f8d9 2114 	ldr.w	r2, [r9, #276]	; 0x114
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2130:	7003      	strb	r3, [r0, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    2132:	4604      	mov	r4, r0
	if (conn->pkt_tx_head) {
    2134:	b2db      	uxtb	r3, r3
    2136:	2a00      	cmp	r2, #0
    2138:	d055      	beq.n	21e6 <isr+0x140e>
		pdu_data_tx->md = 1U;
    213a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0U;
    213e:	7023      	strb	r3, [r4, #0]
	_pdu_data_tx->rfu = 0U;
    2140:	7823      	ldrb	r3, [r4, #0]
    2142:	f36f 1347 	bfc	r3, #5, #3
    2146:	7023      	strb	r3, [r4, #0]
	_pdu_data_tx->resv = 0U;
    2148:	2300      	movs	r3, #0
    214a:	70a3      	strb	r3, [r4, #2]
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    214c:	4ba9      	ldr	r3, [pc, #676]	; (23f4 <isr+0x161c>)
			STATE_CLOSE : STATE_TX;
    214e:	7d5a      	ldrb	r2, [r3, #21]
    2150:	2a03      	cmp	r2, #3
    2152:	f000 8082 	beq.w	225a <isr+0x1482>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2156:	2d00      	cmp	r5, #0
    2158:	d17d      	bne.n	2256 <isr+0x147e>
    215a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    215c:	b12a      	cbz	r2, 216a <isr+0x1392>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    215e:	7a32      	ldrb	r2, [r6, #8]
    2160:	06d2      	lsls	r2, r2, #27
    2162:	d402      	bmi.n	216a <isr+0x1392>
    2164:	7862      	ldrb	r2, [r4, #1]
    2166:	2a00      	cmp	r2, #0
    2168:	d075      	beq.n	2256 <isr+0x147e>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    216a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
			  (0))) ||
    216e:	f892 509b 	ldrb.w	r5, [r2, #155]	; 0x9b
    2172:	2d00      	cmp	r5, #0
    2174:	d16f      	bne.n	2256 <isr+0x147e>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2176:	2202      	movs	r2, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    2178:	2096      	movs	r0, #150	; 0x96
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    217a:	755a      	strb	r2, [r3, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    217c:	f01a ffda 	bl	1d134 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    2180:	4628      	mov	r0, r5
    2182:	f01a ff43 	bl	1d00c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    2186:	f01b f89d 	bl	1d2c4 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    218a:	f8da 5114 	ldr.w	r5, [sl, #276]	; 0x114
    218e:	7823      	ldrb	r3, [r4, #0]
    2190:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
    2194:	f3c2 0200 	ubfx	r2, r2, #0, #1
    2198:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    219c:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
    21a0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    21a4:	f362 0382 	bfi	r3, r2, #2, #1
	radio_phy_set(phy, flags);
    21a8:	2100      	movs	r1, #0
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    21aa:	7023      	strb	r3, [r4, #0]
	radio_phy_set(phy, flags);
    21ac:	4608      	mov	r0, r1
    21ae:	f01a fe49 	bl	1ce44 <radio_phy_set>
	if (conn->enc_tx) {
    21b2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    21b6:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    21b8:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    21bc:	d55f      	bpl.n	227e <isr+0x14a6>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    21be:	211f      	movs	r1, #31
    21c0:	2008      	movs	r0, #8
    21c2:	f01a fe85 	bl	1ced0 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    21c6:	4621      	mov	r1, r4
    21c8:	f105 00f2 	add.w	r0, r5, #242	; 0xf2
    21cc:	f01b f8c2 	bl	1d354 <radio_ccm_tx_pkt_set>
		radio_pkt_tx_set(pdu_data_tx);
    21d0:	f01a feb0 	bl	1cf34 <radio_pkt_tx_set>
	LL_ASSERT(!radio_is_ready());
    21d4:	f01a fede 	bl	1cf94 <radio_is_ready>
    21d8:	2800      	cmp	r0, #0
    21da:	f43f a9e0 	beq.w	159e <isr+0x7c6>
    21de:	f7fe be4e 	b.w	e7e <isr+0xa6>
	u8_t rx_enqueue = 0U;
    21e2:	2700      	movs	r7, #0
    21e4:	e77f      	b.n	20e6 <isr+0x130e>
		pdu_data_tx->md = 0U;
    21e6:	f362 1304 	bfi	r3, r2, #4, #1
    21ea:	e7a8      	b.n	213e <isr+0x1366>
					conn->packet_tx_head_offset);
    21ec:	f899 2129 	ldrb.w	r2, [r9, #297]	; 0x129
		if (!conn->packet_tx_head_len) {
    21f0:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    21f4:	1d01      	adds	r1, r0, #4
    21f6:	188c      	adds	r4, r1, r2
		if (!conn->packet_tx_head_len) {
    21f8:	b913      	cbnz	r3, 2200 <isr+0x1428>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    21fa:	7863      	ldrb	r3, [r4, #1]
    21fc:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
		if (conn->packet_tx_head_offset) {
    2200:	b12a      	cbz	r2, 220e <isr+0x1436>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2202:	5c8b      	ldrb	r3, [r1, r2]
    2204:	f04f 0e01 	mov.w	lr, #1
    2208:	f36e 0301 	bfi	r3, lr, #0, #2
    220c:	548b      	strb	r3, [r1, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    220e:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
    2212:	1a9b      	subs	r3, r3, r2
    2214:	b2db      	uxtb	r3, r3
    2216:	7063      	strb	r3, [r4, #1]
		_pdu_data_tx->md = 0U;
    2218:	f811 e002 	ldrb.w	lr, [r1, r2]
		if (_pdu_data_tx->len > max_tx_octets) {
    221c:	2b1b      	cmp	r3, #27
		_pdu_data_tx->md = 0U;
    221e:	f36f 1e04 	bfc	lr, #4, #1
    2222:	f801 e002 	strb.w	lr, [r1, r2]
		if (_pdu_data_tx->len > max_tx_octets) {
    2226:	d905      	bls.n	2234 <isr+0x145c>
			_pdu_data_tx->len = max_tx_octets;
    2228:	231b      	movs	r3, #27
    222a:	7063      	strb	r3, [r4, #1]
			_pdu_data_tx->md = 1U;
    222c:	5c8b      	ldrb	r3, [r1, r2]
    222e:	f043 0310 	orr.w	r3, r3, #16
    2232:	548b      	strb	r3, [r1, r2]
		if (conn->pkt_tx_head->next) {
    2234:	6803      	ldr	r3, [r0, #0]
    2236:	b11b      	cbz	r3, 2240 <isr+0x1468>
			_pdu_data_tx->md = 1U;
    2238:	5c8b      	ldrb	r3, [r1, r2]
    223a:	f043 0310 	orr.w	r3, r3, #16
    223e:	548b      	strb	r3, [r1, r2]
		if (!conn->pkt_tx_ctrl &&
    2240:	f1bc 0f00 	cmp.w	ip, #0
    2244:	f47f af7c 	bne.w	2140 <isr+0x1368>
    2248:	f8d9 3120 	ldr.w	r3, [r9, #288]	; 0x120
    224c:	4298      	cmp	r0, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    224e:	bf18      	it	ne
    2250:	e9c9 0046 	strdne	r0, r0, [r9, #280]	; 0x118
    2254:	e774      	b.n	2140 <isr+0x1368>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2256:	2203      	movs	r2, #3
    2258:	755a      	strb	r2, [r3, #21]
		if ((_radio.role == ROLE_MASTER) ||
    225a:	7d1a      	ldrb	r2, [r3, #20]
    225c:	2a04      	cmp	r2, #4
    225e:	d10b      	bne.n	2278 <isr+0x14a0>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    2260:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    2264:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    2268:	f36b 12c7 	bfi	r2, fp, #7, #1
    226c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			radio_disable();
    2270:	f01a fe72 	bl	1cf58 <radio_disable>
			goto isr_rx_conn_exit;
    2274:	f7ff b993 	b.w	159e <isr+0x7c6>
			radio_switch_complete_and_disable();
    2278:	f01a fede 	bl	1d038 <radio_switch_complete_and_disable>
    227c:	e785      	b.n	218a <isr+0x13b2>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    227e:	2008      	movs	r0, #8
    2280:	211b      	movs	r1, #27
    2282:	f01a fe25 	bl	1ced0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    2286:	4620      	mov	r0, r4
    2288:	e7a2      	b.n	21d0 <isr+0x13f8>
	switch (_radio.role) {
    228a:	7d23      	ldrb	r3, [r4, #20]
    228c:	2b03      	cmp	r3, #3
    228e:	f200 81ca 	bhi.w	2626 <isr+0x184e>
    2292:	e8df f013 	tbh	[pc, r3, lsl #1]
    2296:	01a6      	.short	0x01a6
    2298:	00510004 	.word	0x00510004
    229c:	0097      	.short	0x0097
	if ((_radio.state == STATE_CLOSE) &&
    229e:	2f03      	cmp	r7, #3
    22a0:	d109      	bne.n	22b6 <isr+0x14de>
	    (_radio.advertiser.chan_map_current != 0)) {
    22a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    22a6:	075e      	lsls	r6, r3, #29
    22a8:	d005      	beq.n	22b6 <isr+0x14de>
		adv_setup();
    22aa:	f018 fea9 	bl	1b000 <adv_setup>
		radio_tx_enable();
    22ae:	f01a fe4d 	bl	1cf4c <radio_tx_enable>
		radio_tmr_end_capture();
    22b2:	f7fe bdfc 	b.w	eae <isr+0xd6>
		radio_filter_disable();
    22b6:	f01a ff0b 	bl	1d0d0 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    22ba:	7d63      	ldrb	r3, [r4, #21]
    22bc:	2b03      	cmp	r3, #3
    22be:	d163      	bne.n	2388 <isr+0x15b0>
		    (!_radio.advertiser.is_hdcd)) {
    22c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    22c4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    22c8:	d15e      	bne.n	2388 <isr+0x15b0>
			entropy_get_entropy_isr(_radio.entropy,
    22ca:	6860      	ldr	r0, [r4, #4]
					  u16_t length,
					  u32_t flags)
{
	const struct entropy_driver_api *api = dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    22cc:	6842      	ldr	r2, [r0, #4]
    22ce:	6855      	ldr	r5, [r2, #4]
    22d0:	b11d      	cbz	r5, 22da <isr+0x1502>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    22d2:	2202      	movs	r2, #2
    22d4:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
    22d8:	47a8      	blx	r5
			random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    22da:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    22de:	f240 1247 	movw	r2, #327	; 0x147
    22e2:	fbb1 f3f2 	udiv	r3, r1, r2
    22e6:	fb02 1313 	mls	r3, r2, r3, r1
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    22ea:	f241 025f 	movw	r2, #4191	; 0x105f
    22ee:	2100      	movs	r1, #0
    22f0:	9206      	str	r2, [sp, #24]
			random_delay += 1;
    22f2:	3301      	adds	r3, #1
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    22f4:	4a40      	ldr	r2, [pc, #256]	; (23f8 <isr+0x1620>)
    22f6:	9205      	str	r2, [sp, #20]
			random_delay += 1;
    22f8:	b21b      	sxth	r3, r3
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    22fa:	e9cd 1103 	strd	r1, r1, [sp, #12]
    22fe:	e9cd 1101 	strd	r1, r1, [sp, #4]
    2302:	9100      	str	r1, [sp, #0]
    2304:	2205      	movs	r2, #5
    2306:	4608      	mov	r0, r1
			random_delay += 1;
    2308:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    230c:	f016 ff0e 	bl	1912c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2310:	f030 0302 	bics.w	r3, r0, #2
    2314:	d038      	beq.n	2388 <isr+0x15b0>
    2316:	7ca3      	ldrb	r3, [r4, #18]
    2318:	2b05      	cmp	r3, #5
    231a:	d035      	beq.n	2388 <isr+0x15b0>
    231c:	2301      	movs	r3, #1
    231e:	f04f 0100 	mov.w	r1, #0
    2322:	f363 0107 	bfi	r1, r3, #0, #8
    2326:	4a35      	ldr	r2, [pc, #212]	; (23fc <isr+0x1624>)
    2328:	4b35      	ldr	r3, [pc, #212]	; (2400 <isr+0x1628>)
    232a:	4836      	ldr	r0, [pc, #216]	; (2404 <isr+0x162c>)
    232c:	1a9b      	subs	r3, r3, r2
    232e:	08db      	lsrs	r3, r3, #3
    2330:	f363 118f 	bfi	r1, r3, #6, #10
    2334:	f7fe bfee 	b.w	1314 <isr+0x53c>
	if (_radio.state == STATE_CLOSE) {
    2338:	2f03      	cmp	r7, #3
    233a:	d119      	bne.n	2370 <isr+0x1598>
		radio_tmr_tifs_set(RADIO_TIFS);
    233c:	2096      	movs	r0, #150	; 0x96
    233e:	f01a fef9 	bl	1d134 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    2342:	2300      	movs	r3, #0
    2344:	4619      	mov	r1, r3
    2346:	461a      	mov	r2, r3
    2348:	4618      	mov	r0, r3
    234a:	f01a fe6b 	bl	1d024 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    234e:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    2352:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    2356:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
		radio_pkt_rx_set(_radio.packet_rx
    235a:	3008      	adds	r0, #8
    235c:	f01a fde4 	bl	1cf28 <radio_pkt_rx_set>
		radio_rssi_measure();
    2360:	f01a fe78 	bl	1d054 <radio_rssi_measure>
		_radio.state = STATE_RX;
    2364:	2301      	movs	r3, #1
    2366:	7563      	strb	r3, [r4, #21]
		radio_rx_enable();
    2368:	f01a fdea 	bl	1cf40 <radio_rx_enable>
    236c:	f7fe bd9f 	b.w	eae <isr+0xd6>
		radio_filter_disable();
    2370:	f01a feae 	bl	1d0d0 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    2374:	7d63      	ldrb	r3, [r4, #21]
    2376:	2b05      	cmp	r3, #5
    2378:	d106      	bne.n	2388 <isr+0x15b0>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    237a:	2300      	movs	r3, #0
    237c:	9300      	str	r3, [sp, #0]
    237e:	2204      	movs	r2, #4
    2380:	4619      	mov	r1, r3
    2382:	4618      	mov	r0, r3
    2384:	f016 ff1a 	bl	191bc <ticker_stop>
	_radio.role = ROLE_NONE;
    2388:	2500      	movs	r5, #0
    238a:	7525      	strb	r5, [r4, #20]
	_radio.state = STATE_NONE;
    238c:	7565      	strb	r5, [r4, #21]
	_radio.ticker_id_event = 0U;
    238e:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    2390:	f01a ff54 	bl	1d23c <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    2394:	462a      	mov	r2, r5
    2396:	4629      	mov	r1, r5
    2398:	4628      	mov	r0, r5
    239a:	4b1b      	ldr	r3, [pc, #108]	; (2408 <isr+0x1630>)
    239c:	f016 f95e 	bl	1865c <mayfly_enqueue>
	LL_ASSERT(!retval);
    23a0:	4605      	mov	r5, r0
    23a2:	2800      	cmp	r0, #0
    23a4:	f000 8133 	beq.w	260e <isr+0x1836>
    23a8:	2301      	movs	r3, #1
    23aa:	f04f 0100 	mov.w	r1, #0
    23ae:	f363 0107 	bfi	r1, r3, #0, #8
    23b2:	4a12      	ldr	r2, [pc, #72]	; (23fc <isr+0x1624>)
    23b4:	4b12      	ldr	r3, [pc, #72]	; (2400 <isr+0x1628>)
    23b6:	4815      	ldr	r0, [pc, #84]	; (240c <isr+0x1634>)
    23b8:	1a9b      	subs	r3, r3, r2
    23ba:	08db      	lsrs	r3, r3, #3
    23bc:	f363 118f 	bfi	r1, r3, #6, #10
    23c0:	f7fe bfa8 	b.w	1314 <isr+0x53c>
	if (_radio.conn_curr == 0) {
    23c4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    23c8:	2800      	cmp	r0, #0
    23ca:	d0dd      	beq.n	2388 <isr+0x15b0>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    23cc:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    23d0:	b1f1      	cbz	r1, 2410 <isr+0x1638>
    23d2:	7d23      	ldrb	r3, [r4, #20]
    23d4:	2b03      	cmp	r3, #3
    23d6:	d003      	beq.n	23e0 <isr+0x1608>
    23d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    23dc:	07dd      	lsls	r5, r3, #31
    23de:	d517      	bpl.n	2410 <isr+0x1638>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    23e0:	f018 fe94 	bl	1b10c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    23e4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    23e8:	f018 fd72 	bl	1aed0 <connection_release>
			_radio.conn_curr = NULL;
    23ec:	2300      	movs	r3, #0
    23ee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
			return;
    23f2:	e7c9      	b.n	2388 <isr+0x15b0>
    23f4:	20000fb4 	.word	0x20000fb4
    23f8:	0001a7c5 	.word	0x0001a7c5
    23fc:	00025880 	.word	0x00025880
    2400:	000258b0 	.word	0x000258b0
    2404:	0002c353 	.word	0x0002c353
    2408:	200075cc 	.word	0x200075cc
    240c:	0002c65f 	.word	0x0002c65f
	latency_event = _radio.conn_curr->latency_event;
    2410:	f8b0 902a 	ldrh.w	r9, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    2414:	f894 5118 	ldrb.w	r5, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    2418:	f109 0701 	add.w	r7, r9, #1
    241c:	b2bf      	uxth	r7, r7
	if (_radio.packet_counter &&
    241e:	2d00      	cmp	r5, #0
    2420:	d072      	beq.n	2508 <isr+0x1730>
		if (_radio.role == ROLE_SLAVE) {
    2422:	7d23      	ldrb	r3, [r4, #20]
    2424:	2b03      	cmp	r3, #3
    2426:	d163      	bne.n	24f0 <isr+0x1718>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    2428:	f01a ff40 	bl	1d2ac <radio_tmr_aa_restore>
    242c:	4683      	mov	fp, r0
						     radio_tmr_ready_get();
    242e:	f01a ff43 	bl	1d2b8 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    2432:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    2436:	f8df a230 	ldr.w	sl, [pc, #560]	; 2668 <isr+0x1890>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    243a:	ebab 0100 	sub.w	r1, fp, r0
						     radio_tmr_ready_get();
    243e:	4680      	mov	r8, r0
			window_widening_event_us =
    2440:	6ca8      	ldr	r0, [r5, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    2442:	f100 0358 	add.w	r3, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    2446:	4299      	cmp	r1, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    2448:	930a      	str	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    244a:	a385      	add	r3, pc, #532	; (adr r3, 2660 <isr+0x1888>)
    244c:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    2450:	d840      	bhi.n	24d4 <isr+0x16fc>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    2452:	fba0 010a 	umull	r0, r1, r0, sl
    2456:	f7fd fe93 	bl	180 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    245a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    245c:	4498      	add	r8, r3
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    245e:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    2462:	eba8 000b 	sub.w	r0, r8, fp
    2466:	a37e      	add	r3, pc, #504	; (adr r3, 2660 <isr+0x1888>)
    2468:	e9d3 2300 	ldrd	r2, r3, [r3]
    246c:	fba0 010a 	umull	r0, r1, r0, sl
    2470:	f7fd fe86 	bl	180 <__aeabi_uldivmod>
    2474:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			if (_radio.conn_curr->pkt_tx_head) {
    2478:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
			_radio.conn_curr->slave.window_widening_event_us = 0U;
    247c:	2200      	movs	r2, #0
    247e:	64aa      	str	r2, [r5, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0U;
    2480:	652a      	str	r2, [r5, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    2482:	b379      	cbz	r1, 24e4 <isr+0x170c>
				if (pdu_data_tx->len ||
    2484:	7949      	ldrb	r1, [r1, #5]
    2486:	b911      	cbnz	r1, 248e <isr+0x16b6>
    2488:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
    248c:	b101      	cbz	r1, 2490 <isr+0x16b8>
				_radio.conn_curr->latency_event =
    248e:	856a      	strh	r2, [r5, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0U;
    2490:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    2494:	2100      	movs	r1, #0
    2496:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    2498:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    249c:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    249e:	b1ba      	cbz	r2, 24d0 <isr+0x16f8>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    24a0:	4297      	cmp	r7, r2
    24a2:	f080 8096 	bcs.w	25d2 <isr+0x17fa>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    24a6:	1bd2      	subs	r2, r2, r7
    24a8:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0U;
    24aa:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    24ac:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    24ae:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0U;
    24b0:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    24b2:	f240 8090 	bls.w	25d6 <isr+0x17fe>
			else if (_radio.role == ROLE_SLAVE) {
    24b6:	7d22      	ldrb	r2, [r4, #20]
    24b8:	2a03      	cmp	r2, #3
    24ba:	d109      	bne.n	24d0 <isr+0x16f8>
				if (latency_event != 0) {
    24bc:	f1b9 0f00 	cmp.w	r9, #0
    24c0:	f040 8089 	bne.w	25d6 <isr+0x17fe>
					force = _radio.conn_curr->slave.force & 0x01;
    24c4:	6d41      	ldr	r1, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    24c6:	084a      	lsrs	r2, r1, #1
					if (force) {
    24c8:	f011 0101 	ands.w	r1, r1, #1
    24cc:	d136      	bne.n	253c <isr+0x1764>
					_radio.conn_curr->slave.force >>= 1;
    24ce:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0U;
    24d0:	2100      	movs	r1, #0
    24d2:	e036      	b.n	2542 <isr+0x176a>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    24d4:	fba1 010a 	umull	r0, r1, r1, sl
    24d8:	f7fd fe52 	bl	180 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    24dc:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    24de:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    24e2:	e7c9      	b.n	2478 <isr+0x16a0>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    24e4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    24e8:	07d2      	lsls	r2, r2, #31
    24ea:	d5d1      	bpl.n	2490 <isr+0x16b8>
				_radio.conn_curr->latency_event =
    24ec:	8cea      	ldrh	r2, [r5, #38]	; 0x26
    24ee:	e7ce      	b.n	248e <isr+0x16b6>
		} else if (reason_peer) {
    24f0:	b141      	cbz	r1, 2504 <isr+0x172c>
			_radio.conn_curr->master.terminate_ack = 1U;
    24f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    24f6:	f043 0301 	orr.w	r3, r3, #1
    24fa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0U;
    24fe:	2300      	movs	r3, #0
	ticks_drift_plus = 0U;
    2500:	461e      	mov	r6, r3
    2502:	e7c5      	b.n	2490 <isr+0x16b8>
	ticks_drift_minus = 0U;
    2504:	460b      	mov	r3, r1
    2506:	e7fb      	b.n	2500 <isr+0x1728>
	else if (_radio.conn_curr->connect_expire) {
    2508:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    250a:	b183      	cbz	r3, 252e <isr+0x1756>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    250c:	429f      	cmp	r7, r3
    250e:	d204      	bcs.n	251a <isr+0x1742>
			_radio.conn_curr->connect_expire -= elapsed_event;
    2510:	1bdb      	subs	r3, r3, r7
    2512:	8583      	strh	r3, [r0, #44]	; 0x2c
	ticks_drift_minus = 0U;
    2514:	462b      	mov	r3, r5
	ticks_drift_plus = 0U;
    2516:	461e      	mov	r6, r3
    2518:	e7be      	b.n	2498 <isr+0x16c0>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    251a:	213e      	movs	r1, #62	; 0x3e
    251c:	f018 fdf6 	bl	1b10c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    2520:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2524:	f018 fcd4 	bl	1aed0 <connection_release>
			_radio.conn_curr = NULL;
    2528:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
			return;
    252c:	e72c      	b.n	2388 <isr+0x15b0>
		if (!_radio.conn_curr->supervision_expire) {
    252e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    2530:	2900      	cmp	r1, #0
    2532:	d1f0      	bne.n	2516 <isr+0x173e>
			_radio.conn_curr->supervision_expire =
    2534:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    2536:	8603      	strh	r3, [r0, #48]	; 0x30
	ticks_drift_minus = 0U;
    2538:	460b      	mov	r3, r1
    253a:	e7ec      	b.n	2516 <isr+0x173e>
						_radio.conn_curr->slave.force |=
    253c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    2540:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    2542:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    2544:	b11a      	cbz	r2, 254e <isr+0x1776>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    2546:	4297      	cmp	r7, r2
    2548:	d247      	bcs.n	25da <isr+0x1802>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    254a:	1bd7      	subs	r7, r2, r7
    254c:	8687      	strh	r7, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    254e:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
    2552:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    2556:	4295      	cmp	r5, r2
    2558:	d006      	beq.n	2568 <isr+0x1790>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    255a:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    255e:	3a01      	subs	r2, #1
    2560:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0U;
    2562:	bf9c      	itt	ls
    2564:	2200      	movls	r2, #0
    2566:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    2568:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
    256a:	b909      	cbnz	r1, 2570 <isr+0x1798>
    256c:	454d      	cmp	r5, r9
    256e:	d036      	beq.n	25de <isr+0x1806>
		lazy = _radio.conn_curr->latency_event + 1;
    2570:	3501      	adds	r5, #1
    2572:	b2ad      	uxth	r5, r5
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    2574:	ea56 0203 	orrs.w	r2, r6, r3
    2578:	d103      	bne.n	2582 <isr+0x17aa>
    257a:	b915      	cbnz	r5, 2582 <isr+0x17aa>
	    (lazy != 0) || (force != 0)) {
    257c:	2900      	cmp	r1, #0
    257e:	f43f af03 	beq.w	2388 <isr+0x15b0>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    2582:	f890 2020 	ldrb.w	r2, [r0, #32]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2586:	9300      	str	r3, [sp, #0]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    2588:	3207      	adds	r2, #7
    258a:	b2d7      	uxtb	r7, r2
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    258c:	4a2e      	ldr	r2, [pc, #184]	; (2648 <isr+0x1870>)
				      (void *)(u32_t)ticker_id);
    258e:	9706      	str	r7, [sp, #24]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2590:	e9cd 1204 	strd	r1, r2, [sp, #16]
    2594:	2100      	movs	r1, #0
    2596:	4633      	mov	r3, r6
    2598:	9503      	str	r5, [sp, #12]
    259a:	e9cd 1101 	strd	r1, r1, [sp, #4]
    259e:	463a      	mov	r2, r7
    25a0:	4608      	mov	r0, r1
    25a2:	f016 fdc3 	bl	1912c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    25a6:	f030 0302 	bics.w	r3, r0, #2
    25aa:	f43f aeed 	beq.w	2388 <isr+0x15b0>
    25ae:	7ca3      	ldrb	r3, [r4, #18]
    25b0:	429f      	cmp	r7, r3
    25b2:	f43f aee9 	beq.w	2388 <isr+0x15b0>
    25b6:	2301      	movs	r3, #1
    25b8:	f04f 0100 	mov.w	r1, #0
    25bc:	f363 0107 	bfi	r1, r3, #0, #8
    25c0:	4a22      	ldr	r2, [pc, #136]	; (264c <isr+0x1874>)
    25c2:	4b23      	ldr	r3, [pc, #140]	; (2650 <isr+0x1878>)
    25c4:	4823      	ldr	r0, [pc, #140]	; (2654 <isr+0x187c>)
    25c6:	1a9b      	subs	r3, r3, r2
    25c8:	08db      	lsrs	r3, r3, #3
    25ca:	f363 118f 	bfi	r1, r3, #6, #10
    25ce:	f7fe bea1 	b.w	1314 <isr+0x53c>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    25d2:	2108      	movs	r1, #8
    25d4:	e704      	b.n	23e0 <isr+0x1608>
				force = 1U;
    25d6:	2101      	movs	r1, #1
    25d8:	e7b3      	b.n	2542 <isr+0x176a>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    25da:	2122      	movs	r1, #34	; 0x22
    25dc:	e700      	b.n	23e0 <isr+0x1608>
	lazy = 0U;
    25de:	460d      	mov	r5, r1
    25e0:	e7c8      	b.n	2574 <isr+0x179c>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    25e2:	3f04      	subs	r7, #4
    25e4:	b2ff      	uxtb	r7, r7
    25e6:	2f01      	cmp	r7, #1
    25e8:	d90d      	bls.n	2606 <isr+0x182e>
    25ea:	2301      	movs	r3, #1
    25ec:	f04f 0100 	mov.w	r1, #0
    25f0:	f363 0107 	bfi	r1, r3, #0, #8
    25f4:	4a15      	ldr	r2, [pc, #84]	; (264c <isr+0x1874>)
    25f6:	4b16      	ldr	r3, [pc, #88]	; (2650 <isr+0x1878>)
    25f8:	4817      	ldr	r0, [pc, #92]	; (2658 <isr+0x1880>)
    25fa:	1a9b      	subs	r3, r3, r2
    25fc:	08db      	lsrs	r3, r3, #3
    25fe:	f363 118f 	bfi	r1, r3, #6, #10
    2602:	f7fe be87 	b.w	1314 <isr+0x53c>
		_radio.state = STATE_NONE;
    2606:	2300      	movs	r3, #0
    2608:	7563      	strb	r3, [r4, #21]
		return;
    260a:	f7fe bc74 	b.w	ef6 <isr+0x11e>
	clock_control_off(_radio.hf_clock, NULL);
    260e:	6820      	ldr	r0, [r4, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    2610:	6843      	ldr	r3, [r0, #4]
    2612:	4629      	mov	r1, r5
    2614:	685b      	ldr	r3, [r3, #4]
    2616:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    2618:	2201      	movs	r2, #1
    261a:	4611      	mov	r1, r2
    261c:	4628      	mov	r0, r5
    261e:	f015 fff5 	bl	1860c <mayfly_enable>
    2622:	f7fe bc68 	b.w	ef6 <isr+0x11e>
		LL_ASSERT(0);
    2626:	2301      	movs	r3, #1
    2628:	f04f 0100 	mov.w	r1, #0
    262c:	f363 0107 	bfi	r1, r3, #0, #8
    2630:	4a06      	ldr	r2, [pc, #24]	; (264c <isr+0x1874>)
    2632:	4b07      	ldr	r3, [pc, #28]	; (2650 <isr+0x1878>)
    2634:	4809      	ldr	r0, [pc, #36]	; (265c <isr+0x1884>)
    2636:	1a9b      	subs	r3, r3, r2
    2638:	08db      	lsrs	r3, r3, #3
    263a:	f363 118f 	bfi	r1, r3, #6, #10
    263e:	f7fe be69 	b.w	1314 <isr+0x53c>
    2642:	bf00      	nop
    2644:	f3af 8000 	nop.w
    2648:	0001a80d 	.word	0x0001a80d
    264c:	00025880 	.word	0x00025880
    2650:	000258b0 	.word	0x000258b0
    2654:	0002c3b1 	.word	0x0002c3b1
    2658:	0002c417 	.word	0x0002c417
    265c:	0002c060 	.word	0x0002c060
    2660:	1afd498d 	.word	0x1afd498d
    2664:	00000007 	.word	0x00000007
    2668:	3b9aca00 	.word	0x3b9aca00
    266c:	00000000 	.word	0x00000000

00002670 <radio_adv_enable>:
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    2670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_adv *pdu_adv;
	u32_t slot_us;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    2674:	4fa0      	ldr	r7, [pc, #640]	; (28f8 <radio_adv_enable+0x288>)
{
    2676:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    2678:	2302      	movs	r3, #2
    267a:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    267c:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
{
    2680:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    2684:	2b00      	cmp	r3, #0
{
    2686:	4680      	mov	r8, r0
    2688:	4692      	mov	sl, r2
    268a:	463e      	mov	r6, r7
	if (_radio.advertiser.is_enabled) {
    268c:	da01      	bge.n	2692 <radio_adv_enable+0x22>
			    &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
    268e:	250c      	movs	r5, #12
    2690:	e023      	b.n	26da <radio_adv_enable+0x6a>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    2692:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
    2696:	232a      	movs	r3, #42	; 0x2a
    2698:	f04f 0927 	mov.w	r9, #39	; 0x27
    269c:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    26a0:	f817 3009 	ldrb.w	r3, [r7, r9]
    26a4:	f013 0f0e 	tst.w	r3, #14
    26a8:	f040 80e2 	bne.w	2870 <radio_adv_enable+0x200>
		if (_radio.advertiser.conn) {
    26ac:	f8d7 50cc 	ldr.w	r5, [r7, #204]	; 0xcc
    26b0:	2d00      	cmp	r5, #0
    26b2:	d1ec      	bne.n	268e <radio_adv_enable+0x1e>
		conn = mem_acquire(&_radio.conn_free);
    26b4:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    26b8:	f021 fdd6 	bl	24268 <mem_acquire>
		if (!conn) {
    26bc:	4604      	mov	r4, r0
    26be:	2800      	cmp	r0, #0
    26c0:	f000 8114 	beq.w	28ec <radio_adv_enable+0x27c>
		link = mem_acquire(&_radio.link_rx_free);
    26c4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
    26c8:	f021 fdce 	bl	24268 <mem_acquire>
		if (!link) {
    26cc:	b948      	cbnz	r0, 26e2 <radio_adv_enable+0x72>
			mem_release(conn, &_radio.conn_free);
    26ce:	f507 7186 	add.w	r1, r7, #268	; 0x10c
    26d2:	4620      	mov	r0, r4
    26d4:	f021 fde1 	bl	2429a <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    26d8:	2507      	movs	r5, #7
}
    26da:	4628      	mov	r0, r5
    26dc:	b00f      	add	sp, #60	; 0x3c
    26de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->handle = 0xFFFF;
    26e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    26e6:	6223      	str	r3, [r4, #32]
		conn->data_chan_sel = 0U;
    26e8:	7f63      	ldrb	r3, [r4, #29]
		conn->data_chan_use = 0U;
    26ea:	77e5      	strb	r5, [r4, #31]
		conn->data_chan_sel = 0U;
    26ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    26f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    26f4:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6U;
    26f6:	2306      	movs	r3, #6
    26f8:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->slave.latency_enabled = 0U;
    26fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		conn->latency_prepare = 0U;
    26fe:	62a5      	str	r5, [r4, #40]	; 0x28
		conn->slave.latency_enabled = 0U;
    2700:	f023 0323 	bic.w	r3, r3, #35	; 0x23
    2704:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		conn->llcp_features = LL_FEAT;
    2708:	f44f 73c7 	mov.w	r3, #398	; 0x18e
    270c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		conn->llcp_version.tx = 0U;
    2710:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
		conn->supervision_expire = 0U;
    2714:	8625      	strh	r5, [r4, #48]	; 0x30
		conn->llcp_version.tx = 0U;
    2716:	f023 0303 	bic.w	r3, r3, #3
    271a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		conn->llcp_conn_param.disabled = 0U;
    271e:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		conn->procedure_expire = 0U;
    2722:	86a5      	strh	r5, [r4, #52]	; 0x34
		conn->llcp_conn_param.disabled = 0U;
    2724:	f365 1304 	bfi	r3, r5, #4, #1
		conn->slave.window_widening_event_us = 0U;
    2728:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
		conn->slave.ticks_to_offset = 0U;
    272c:	65a5      	str	r5, [r4, #88]	; 0x58
		conn->llcp_req = 0U;
    272e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
		conn->llcp_terminate.req = 0U;
    2732:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
		conn->llcp_terminate.reason_peer = 0U;
    2736:	f884 509b 	strb.w	r5, [r4, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.link = link;
    273a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
		conn->llcp_conn_param.req = 0U;
    273e:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0U;
    2742:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		conn->sn = 0U;
    2746:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
		conn->pkt_tx_ctrl = NULL;
    274a:	e9c4 5545 	strd	r5, r5, [r4, #276]	; 0x114
		conn->pkt_tx_data = NULL;
    274e:	e9c4 5547 	strd	r5, r5, [r4, #284]	; 0x11c
		conn->pkt_tx_last = NULL;
    2752:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
		conn->packet_tx_head_len = 0U;
    2756:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128
		k32src_wait();
    275a:	f019 fb97 	bl	1be8c <k32src_wait>
		_radio.advertiser.conn = conn;
    275e:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    2762:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    2766:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    276a:	f362 0302 	bfi	r3, r2, #0, #3
	_radio.advertiser.filter_policy = filter_policy;
    276e:	f36a 03c4 	bfi	r3, sl, #3, #2
    2772:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    2776:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    277a:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    277c:	2327      	movs	r3, #39	; 0x27
    277e:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    2780:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    2782:	2300      	movs	r3, #0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    2784:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
	_radio.advertiser.hdr.ticks_preempt_to_start =
    2788:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    278a:	f021 fdd3 	bl	24334 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    278e:	f817 3009 	ldrb.w	r3, [r7, r9]
    2792:	f003 030f 	and.w	r3, r3, #15
    2796:	2b01      	cmp	r3, #1
    2798:	d16c      	bne.n	2874 <radio_adv_enable+0x204>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    279a:	f44f 7327 	mov.w	r3, #668	; 0x29c
    279e:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    27a0:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    27a4:	4955      	ldr	r1, [pc, #340]	; (28fc <radio_adv_enable+0x28c>)
    27a6:	a352      	add	r3, pc, #328	; (adr r3, 28f0 <radio_adv_enable+0x280>)
    27a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    27ac:	fba0 0101 	umull	r0, r1, r0, r1
    27b0:	f7fd fce6 	bl	180 <__aeabi_uldivmod>
	ticks_slot_offset =
    27b4:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
    27b8:	429a      	cmp	r2, r3
    27ba:	bf38      	it	cc
    27bc:	461a      	movcc	r2, r3
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    27be:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    27c0:	4693      	mov	fp, r2
	ticks_anchor = ticker_ticks_now_get();
    27c2:	f021 fe71 	bl	244a8 <ticker_ticks_now_get>
    27c6:	4682      	mov	sl, r0
	_radio.advertiser.is_hdcd = !interval &&
    27c8:	f1b8 0f00 	cmp.w	r8, #0
    27cc:	d15a      	bne.n	2884 <radio_adv_enable+0x214>
				    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    27ce:	f817 3009 	ldrb.w	r3, [r7, r9]
	_radio.advertiser.is_hdcd = !interval &&
    27d2:	f003 030f 	and.w	r3, r3, #15
    27d6:	1e5a      	subs	r2, r3, #1
    27d8:	4253      	negs	r3, r2
    27da:	4153      	adcs	r3, r2
    27dc:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
    27e0:	4f47      	ldr	r7, [pc, #284]	; (2900 <radio_adv_enable+0x290>)
    27e2:	4a48      	ldr	r2, [pc, #288]	; (2904 <radio_adv_enable+0x294>)
    27e4:	f363 1586 	bfi	r5, r3, #6, #1
    27e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    27ea:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    27ee:	f10d 0934 	add.w	r9, sp, #52	; 0x34
    27f2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    27f6:	445b      	add	r3, fp
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    27f8:	e9cd 7907 	strd	r7, r9, [sp, #28]
	if (_radio.advertiser.is_hdcd) {
    27fc:	d04a      	beq.n	2894 <radio_adv_enable+0x224>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    27fe:	2000      	movs	r0, #0
    2800:	e9cd 2005 	strd	r2, r0, [sp, #20]
    2804:	e9cd 0303 	strd	r0, r3, [sp, #12]
    2808:	e9cd 3001 	strd	r3, r0, [sp, #4]
    280c:	9000      	str	r0, [sp, #0]
    280e:	4653      	mov	r3, sl
    2810:	2205      	movs	r2, #5
    2812:	2103      	movs	r1, #3
    2814:	f016 fc40 	bl	19098 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    2818:	2802      	cmp	r0, #2
    281a:	d037      	beq.n	288c <radio_adv_enable+0x21c>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    281c:	980d      	ldr	r0, [sp, #52]	; 0x34
    281e:	2800      	cmp	r0, #0
    2820:	d157      	bne.n	28d2 <radio_adv_enable+0x262>
		ret_cb = TICKER_STATUS_BUSY;
    2822:	2302      	movs	r3, #2
    2824:	930d      	str	r3, [sp, #52]	; 0x34
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2826:	4b38      	ldr	r3, [pc, #224]	; (2908 <radio_adv_enable+0x298>)
    2828:	9006      	str	r0, [sp, #24]
    282a:	e9cd 7907 	strd	r7, r9, [sp, #28]
    282e:	e9cd 0002 	strd	r0, r0, [sp, #8]
    2832:	e9cd 0304 	strd	r0, r3, [sp, #16]
    2836:	2203      	movs	r2, #3
    2838:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    283c:	9300      	str	r3, [sp, #0]
    283e:	9001      	str	r0, [sp, #4]
    2840:	4653      	mov	r3, sl
    2842:	4611      	mov	r1, r2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2844:	f016 fc28 	bl	19098 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    2848:	2802      	cmp	r0, #2
    284a:	d03e      	beq.n	28ca <radio_adv_enable+0x25a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    284c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    284e:	2d00      	cmp	r5, #0
    2850:	d13f      	bne.n	28d2 <radio_adv_enable+0x262>
		_radio.advertiser.is_enabled = 1U;
    2852:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    2856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    285a:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    285e:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    2862:	07db      	lsls	r3, r3, #31
    2864:	f53f af39 	bmi.w	26da <radio_adv_enable+0x6a>
			ll_adv_scan_state_cb(BIT(0));
    2868:	2001      	movs	r0, #1
    286a:	f022 f885 	bl	24978 <ll_adv_scan_state_cb>
    286e:	e734      	b.n	26da <radio_adv_enable+0x6a>
		conn = NULL;
    2870:	2400      	movs	r4, #0
    2872:	e776      	b.n	2762 <radio_adv_enable+0xf2>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    2874:	2b02      	cmp	r3, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    2876:	bf0c      	ite	eq
    2878:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    287c:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    2880:	4358      	muls	r0, r3
    2882:	e78f      	b.n	27a4 <radio_adv_enable+0x134>
	_radio.advertiser.is_hdcd = !interval &&
    2884:	2300      	movs	r3, #0
    2886:	e7a9      	b.n	27dc <radio_adv_enable+0x16c>
				cpu_sleep();
    2888:	f021 fe94 	bl	245b4 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    288c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    288e:	2b02      	cmp	r3, #2
    2890:	d0fa      	beq.n	2888 <radio_adv_enable+0x218>
    2892:	e7c3      	b.n	281c <radio_adv_enable+0x1ac>
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    2894:	481d      	ldr	r0, [pc, #116]	; (290c <radio_adv_enable+0x29c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2896:	9502      	str	r5, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    2898:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    289c:	e9cd 5303 	strd	r5, r3, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    28a0:	fba8 0100 	umull	r0, r1, r8, r0
    28a4:	2391      	movs	r3, #145	; 0x91
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    28a6:	e9cd 2505 	strd	r2, r5, [sp, #20]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    28aa:	fb03 1108 	mla	r1, r3, r8, r1
    28ae:	a310      	add	r3, pc, #64	; (adr r3, 28f0 <radio_adv_enable+0x280>)
    28b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    28b4:	f7fd fc64 	bl	180 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    28b8:	4653      	mov	r3, sl
    28ba:	e9cd 5000 	strd	r5, r0, [sp]
    28be:	2205      	movs	r2, #5
    28c0:	2103      	movs	r1, #3
    28c2:	4628      	mov	r0, r5
    28c4:	e7be      	b.n	2844 <radio_adv_enable+0x1d4>
			cpu_sleep();
    28c6:	f021 fe75 	bl	245b4 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    28ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    28cc:	2b02      	cmp	r3, #2
    28ce:	d0fa      	beq.n	28c6 <radio_adv_enable+0x256>
    28d0:	e7bc      	b.n	284c <radio_adv_enable+0x1dc>
	if (conn) {
    28d2:	2c00      	cmp	r4, #0
    28d4:	f43f aedb 	beq.w	268e <radio_adv_enable+0x1e>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.link,
    28d8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    28dc:	490c      	ldr	r1, [pc, #48]	; (2910 <radio_adv_enable+0x2a0>)
    28de:	f021 fcdc 	bl	2429a <mem_release>
		mem_release(conn, &_radio.conn_free);
    28e2:	490c      	ldr	r1, [pc, #48]	; (2914 <radio_adv_enable+0x2a4>)
    28e4:	4620      	mov	r0, r4
    28e6:	f021 fcd8 	bl	2429a <mem_release>
    28ea:	e6d0      	b.n	268e <radio_adv_enable+0x1e>
			return BT_HCI_ERR_CONN_LIMIT_EXCEEDED;
    28ec:	2509      	movs	r5, #9
    28ee:	e6f4      	b.n	26da <radio_adv_enable+0x6a>
    28f0:	1afd498d 	.word	0x1afd498d
    28f4:	00000007 	.word	0x00000007
    28f8:	20000fb4 	.word	0x20000fb4
    28fc:	3b9aca00 	.word	0x3b9aca00
    2900:	000245bd 	.word	0x000245bd
    2904:	0001bc6d 	.word	0x0001bc6d
    2908:	0001bcdd 	.word	0x0001bcdd
    290c:	84e72a00 	.word	0x84e72a00
    2910:	200010f4 	.word	0x200010f4
    2914:	200010c0 	.word	0x200010c0

00002918 <radio_scan_enable>:
}

u32_t radio_scan_enable(u8_t type, u8_t init_addr_type, u8_t *init_addr,
			u16_t interval, u16_t window, u8_t filter_policy,
			u8_t rpa_gen, u8_t rl_idx)
{
    2918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ticks_interval;
	u32_t ticks_anchor;
	u32_t us_offset;
	u32_t ret;

	if (_radio.scanner.is_enabled) {
    291c:	4c50      	ldr	r4, [pc, #320]	; (2a60 <radio_scan_enable+0x148>)
    291e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
    2922:	b08c      	sub	sp, #48	; 0x30
    2924:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
    2926:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    292a:	f04f 0302 	mov.w	r3, #2
{
    292e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    2930:	930b      	str	r3, [sp, #44]	; 0x2c
{
    2932:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    2934:	d004      	beq.n	2940 <radio_scan_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
    2936:	250c      	movs	r5, #12
	if (!_radio.advertiser.is_enabled) {
		ll_adv_scan_state_cb(BIT(1));
	}

	return 0;
}
    2938:	4628      	mov	r0, r5
    293a:	b00c      	add	sp, #48	; 0x30
    293c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    2940:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    2944:	f360 0300 	bfi	r3, r0, #0, #1
	_radio.scanner.init_addr_type = init_addr_type;
    2948:	f366 1304 	bfi	r3, r6, #4, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    294c:	2206      	movs	r2, #6
    294e:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
	_radio.scanner.init_addr_type = init_addr_type;
    2952:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    2956:	4e43      	ldr	r6, [pc, #268]	; (2a64 <radio_scan_enable+0x14c>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    2958:	f01f fa95 	bl	21e86 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    295c:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
    2960:	f04f 0a91 	mov.w	sl, #145	; 0x91
    2964:	fba2 0106 	umull	r0, r1, r2, r6
    2968:	fb0a 1102 	mla	r1, sl, r2, r1
    296c:	a33a      	add	r3, pc, #232	; (adr r3, 2a58 <radio_scan_enable+0x140>)
    296e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2972:	f7fd fc05 	bl	180 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    2976:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    297a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
		_radio.ticks_active_to_start;
    297e:	f8d4 917c 	ldr.w	r9, [r4, #380]	; 0x17c
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    2982:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
    2986:	f362 0342 	bfi	r3, r2, #1, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    298a:	b2ba      	uxth	r2, r7
    298c:	fba2 6706 	umull	r6, r7, r2, r6
    2990:	fb0a 7702 	mla	r7, sl, r2, r7
	_radio.scanner.filter_policy = filter_policy;
    2994:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
    2998:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
    299a:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_xtal_to_start =
    299e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_active_to_start =
    29a2:	f8c4 90d4 	str.w	r9, [r4, #212]	; 0xd4
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    29a6:	a32c      	add	r3, pc, #176	; (adr r3, 2a58 <radio_scan_enable+0x140>)
    29a8:	e9d3 2300 	ldrd	r2, r3, [r3]
	_radio.scanner.hdr.ticks_preempt_to_start =
    29ac:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    29b0:	4630      	mov	r0, r6
    29b2:	4639      	mov	r1, r7
    29b4:	f7fd fbe4 	bl	180 <__aeabi_uldivmod>
	    (ticks_interval -
    29b8:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
    29bc:	4598      	cmp	r8, r3
    29be:	bf94      	ite	ls
    29c0:	f8c4 80dc 	strls.w	r8, [r4, #220]	; 0xdc
    29c4:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    29c8:	4682      	mov	sl, r0
	ticks_anchor = ticker_ticks_now_get();
    29ca:	f021 fd6d 	bl	244a8 <ticker_ticks_now_get>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    29ce:	ab0b      	add	r3, sp, #44	; 0x2c
    29d0:	9308      	str	r3, [sp, #32]
    29d2:	4b25      	ldr	r3, [pc, #148]	; (2a68 <radio_scan_enable+0x150>)
    29d4:	e9cd 5306 	strd	r5, r3, [sp, #24]
    29d8:	4b24      	ldr	r3, [pc, #144]	; (2a6c <radio_scan_enable+0x154>)
    29da:	9305      	str	r3, [sp, #20]
    29dc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    29e0:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    29e4:	bf2c      	ite	cs
    29e6:	444b      	addcs	r3, r9
    29e8:	3327      	addcc	r3, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
    29ea:	4680      	mov	r8, r0
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    29ec:	e9cd 5303 	strd	r5, r3, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    29f0:	4630      	mov	r0, r6
    29f2:	a319      	add	r3, pc, #100	; (adr r3, 2a58 <radio_scan_enable+0x140>)
    29f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    29f8:	4639      	mov	r1, r7
    29fa:	f7fd fbc1 	bl	180 <__aeabi_uldivmod>
    29fe:	4610      	mov	r0, r2
    2a00:	4619      	mov	r1, r3
    2a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a06:	2300      	movs	r3, #0
    2a08:	f7fd fbba 	bl	180 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    2a0c:	9500      	str	r5, [sp, #0]
    2a0e:	e9cd a001 	strd	sl, r0, [sp, #4]
    2a12:	4643      	mov	r3, r8
    2a14:	2206      	movs	r2, #6
    2a16:	2103      	movs	r1, #3
    2a18:	4628      	mov	r0, r5
    2a1a:	f016 fb3d 	bl	19098 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    2a1e:	2802      	cmp	r0, #2
    2a20:	d013      	beq.n	2a4a <radio_scan_enable+0x132>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    2a22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2a24:	2d00      	cmp	r5, #0
    2a26:	d186      	bne.n	2936 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1U;
    2a28:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    2a2c:	f043 0301 	orr.w	r3, r3, #1
    2a30:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
    2a34:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    2a38:	2b00      	cmp	r3, #0
    2a3a:	f6ff af7d 	blt.w	2938 <radio_scan_enable+0x20>
		ll_adv_scan_state_cb(BIT(1));
    2a3e:	2002      	movs	r0, #2
    2a40:	f021 ff9a 	bl	24978 <ll_adv_scan_state_cb>
    2a44:	e778      	b.n	2938 <radio_scan_enable+0x20>
			cpu_sleep();
    2a46:	f021 fdb5 	bl	245b4 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    2a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a4c:	2b02      	cmp	r3, #2
    2a4e:	d0fa      	beq.n	2a46 <radio_scan_enable+0x12e>
    2a50:	e7e7      	b.n	2a22 <radio_scan_enable+0x10a>
    2a52:	bf00      	nop
    2a54:	f3af 8000 	nop.w
    2a58:	1afd498d 	.word	0x1afd498d
    2a5c:	00000007 	.word	0x00000007
    2a60:	20000fb4 	.word	0x20000fb4
    2a64:	84e72a00 	.word	0x84e72a00
    2a68:	000245bd 	.word	0x000245bd
    2a6c:	0001bca5 	.word	0x0001bca5

00002a70 <erase_op>:
}

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
    2a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    2a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
    2a78:	4e25      	ldr	r6, [pc, #148]	; (2b10 <erase_op+0xa0>)
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 0U;

	if (e_ctx->enable_time_limit) {
    2a7a:	7b05      	ldrb	r5, [r0, #12]
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
    2a7c:	f8d6 9504 	ldr.w	r9, [r6, #1284]	; 0x504
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    2a80:	f8d2 8010 	ldr.w	r8, [r2, #16]
{
    2a84:	4604      	mov	r4, r0
	if (e_ctx->enable_time_limit) {
    2a86:	b115      	cbz	r5, 2a8e <erase_op+0x1e>
		ticks_begin = ticker_ticks_now_get();
    2a88:	f021 fd0e 	bl	244a8 <ticker_ticks_now_get>
    2a8c:	4605      	mov	r5, r0
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* Erase uses a specific configuration register */
	NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een << NVMC_CONFIG_WEN_Pos;
    2a8e:	2302      	movs	r3, #2
    2a90:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504
	nvmc_wait_ready();
    2a94:	f01a fe96 	bl	1d7c4 <nvmc_wait_ready>
		return FLASH_OP_DONE;
	}
#endif

	do {
		NRF_NVMC->ERASEPAGE = e_ctx->flash_addr;
    2a98:	f8df b074 	ldr.w	fp, [pc, #116]	; 2b10 <erase_op+0xa0>
		if (e_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    2a9c:	f8df a074 	ldr.w	sl, [pc, #116]	; 2b14 <erase_op+0xa4>
	u32_t i = 0U;
    2aa0:	2700      	movs	r7, #0
		NRF_NVMC->ERASEPAGE = e_ctx->flash_addr;
    2aa2:	6863      	ldr	r3, [r4, #4]
    2aa4:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
		nvmc_wait_ready();
    2aa8:	f01a fe8c 	bl	1d7c4 <nvmc_wait_ready>
		e_ctx->len -= pg_size;
    2aac:	68a3      	ldr	r3, [r4, #8]
    2aae:	eba3 0308 	sub.w	r3, r3, r8
    2ab2:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    2ab4:	6863      	ldr	r3, [r4, #4]
    2ab6:	4443      	add	r3, r8
    2ab8:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
    2aba:	7b23      	ldrb	r3, [r4, #12]
		i++;
    2abc:	3701      	adds	r7, #1
		if (e_ctx->enable_time_limit) {
    2abe:	b973      	cbnz	r3, 2ade <erase_op+0x6e>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    2ac0:	68a3      	ldr	r3, [r4, #8]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d1ed      	bne.n	2aa2 <erase_op+0x32>

	NRF_NVMC->CONFIG = prev_nvmc_cfg;
    2ac6:	4b12      	ldr	r3, [pc, #72]	; (2b10 <erase_op+0xa0>)
    2ac8:	f8c3 9504 	str.w	r9, [r3, #1284]	; 0x504
	nvmc_wait_ready();
    2acc:	f01a fe7a 	bl	1d7c4 <nvmc_wait_ready>

	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    2ad0:	68a0      	ldr	r0, [r4, #8]
    2ad2:	3000      	adds	r0, #0
    2ad4:	bf18      	it	ne
    2ad6:	2001      	movne	r0, #1
}
    2ad8:	4240      	negs	r0, r0
    2ada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    2ade:	f021 fce3 	bl	244a8 <ticker_ticks_now_get>
    2ae2:	4629      	mov	r1, r5
    2ae4:	f021 fce2 	bl	244ac <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    2ae8:	fbb0 f6f7 	udiv	r6, r0, r7
    2aec:	4406      	add	r6, r0
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    2aee:	6960      	ldr	r0, [r4, #20]
    2af0:	a305      	add	r3, pc, #20	; (adr r3, 2b08 <erase_op+0x98>)
    2af2:	e9d3 2300 	ldrd	r2, r3, [r3]
    2af6:	fba0 010a 	umull	r0, r1, r0, sl
    2afa:	f7fd fb41 	bl	180 <__aeabi_uldivmod>
    2afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    2b02:	4286      	cmp	r6, r0
    2b04:	d9dc      	bls.n	2ac0 <erase_op+0x50>
    2b06:	e7de      	b.n	2ac6 <erase_op+0x56>
    2b08:	1afd498d 	.word	0x1afd498d
    2b0c:	00000007 	.word	0x00000007
    2b10:	4001e000 	.word	0x4001e000
    2b14:	3b9aca00 	.word	0x3b9aca00

00002b18 <work_in_time_slice>:
{
    2b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b1c:	b08f      	sub	sp, #60	; 0x3c
	struct flash_context *context = p_flash_op_desc->context;
    2b1e:	f8d0 a004 	ldr.w	sl, [r0, #4]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2b22:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2bfc <work_in_time_slice+0xe4>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2b26:	f10d 0137 	add.w	r1, sp, #55	; 0x37
{
    2b2a:	4680      	mov	r8, r0
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2b2c:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    2b30:	f021 ff38 	bl	249a4 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    2b34:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    2b38:	930a      	str	r3, [sp, #40]	; 0x28
    2b3a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    2b3e:	930b      	str	r3, [sp, #44]	; 0x2c
    2b40:	f021 fcb2 	bl	244a8 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2b44:	f8da 4010 	ldr.w	r4, [sl, #16]
    2b48:	fba4 4509 	umull	r4, r5, r4, r9
    2b4c:	a326      	add	r3, pc, #152	; (adr r3, 2be8 <work_in_time_slice+0xd0>)
    2b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    2b52:	2700      	movs	r7, #0
    2b54:	4683      	mov	fp, r0
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2b56:	4629      	mov	r1, r5
    2b58:	4620      	mov	r0, r4
    2b5a:	f7fd fb11 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2b5e:	e9cd 7707 	strd	r7, r7, [sp, #28]
    2b62:	4b23      	ldr	r3, [pc, #140]	; (2bf0 <work_in_time_slice+0xd8>)
    2b64:	9305      	str	r3, [sp, #20]
    2b66:	f8cd 8018 	str.w	r8, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2b6a:	4606      	mov	r6, r0
			   HAL_TICKER_US_TO_TICKS(context->slot),
    2b6c:	f8da 0014 	ldr.w	r0, [sl, #20]
    2b70:	a31d      	add	r3, pc, #116	; (adr r3, 2be8 <work_in_time_slice+0xd0>)
    2b72:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b76:	fba0 0109 	umull	r0, r1, r0, r9
    2b7a:	f7fd fb01 	bl	180 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(context->interval),
    2b7e:	4b1d      	ldr	r3, [pc, #116]	; (2bf4 <work_in_time_slice+0xdc>)
    2b80:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    2b84:	fba6 9a03 	umull	r9, sl, r6, r3
	err = ticker_start(instance_index,
    2b88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(context->interval),
    2b8c:	2307      	movs	r3, #7
	err = ticker_start(instance_index,
    2b8e:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(context->interval),
    2b92:	fb03 aa06 	mla	sl, r3, r6, sl
    2b96:	ebb4 0009 	subs.w	r0, r4, r9
    2b9a:	eb65 010a 	sbc.w	r1, r5, sl
    2b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ba2:	2300      	movs	r3, #0
    2ba4:	f7fd faec 	bl	180 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2ba8:	465b      	mov	r3, fp
    2baa:	e9cd 6001 	strd	r6, r0, [sp, #4]
    2bae:	9700      	str	r7, [sp, #0]
    2bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2bb2:	980a      	ldr	r0, [sp, #40]	; 0x28
    2bb4:	2103      	movs	r1, #3
    2bb6:	f016 fa6f 	bl	19098 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    2bba:	f030 0302 	bics.w	r3, r0, #2
    2bbe:	d10a      	bne.n	2bd6 <work_in_time_slice+0xbe>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    2bc0:	f645 11b3 	movw	r1, #22963	; 0x59b3
    2bc4:	480c      	ldr	r0, [pc, #48]	; (2bf8 <work_in_time_slice+0xe0>)
    2bc6:	f01b ffb5 	bl	1eb34 <z_impl_k_sem_take>
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    2bca:	b938      	cbnz	r0, 2bdc <work_in_time_slice+0xc4>
		result = p_flash_op_desc->result;
    2bcc:	f8d8 0008 	ldr.w	r0, [r8, #8]
}
    2bd0:	b00f      	add	sp, #60	; 0x3c
    2bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = -ECANCELED;
    2bd6:	f06f 0047 	mvn.w	r0, #71	; 0x47
    2bda:	e7f9      	b.n	2bd0 <work_in_time_slice+0xb8>
		result = -ETIMEDOUT;
    2bdc:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	return result;
    2be0:	e7f6      	b.n	2bd0 <work_in_time_slice+0xb8>
    2be2:	bf00      	nop
    2be4:	f3af 8000 	nop.w
    2be8:	1afd498d 	.word	0x1afd498d
    2bec:	00000007 	.word	0x00000007
    2bf0:	0001d819 	.word	0x0001d819
    2bf4:	1afd498d 	.word	0x1afd498d
    2bf8:	20001bac 	.word	0x20001bac
    2bfc:	3b9aca00 	.word	0x3b9aca00

00002c00 <write_op>:
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
{
    2c00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 1U;

	if (w_ctx->enable_time_limit) {
    2c04:	7b05      	ldrb	r5, [r0, #12]
{
    2c06:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
    2c08:	b115      	cbz	r5, 2c10 <write_op+0x10>
		ticks_begin = ticker_ticks_now_get();
    2c0a:	f021 fc4d 	bl	244a8 <ticker_ticks_now_get>
    2c0e:	4605      	mov	r5, r0
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* Start with a word-aligned address and handle the offset */
	addr_word = (u32_t)w_ctx->flash_addr & ~0x3;
    2c10:	6867      	ldr	r7, [r4, #4]

	/* If not aligned, read first word, update and write it back */
	if (!is_aligned_32(w_ctx->flash_addr)) {
    2c12:	f017 0003 	ands.w	r0, r7, #3
    2c16:	d07c      	beq.n	2d12 <write_op+0x112>
    2c18:	68a2      	ldr	r2, [r4, #8]
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
		if (count > w_ctx->len) {
			count = w_ctx->len;
		}

		memcpy((u8_t *)&tmp_word + (w_ctx->flash_addr & 0x3),
    2c1a:	6821      	ldr	r1, [r4, #0]
	addr_word = (u32_t)w_ctx->flash_addr & ~0x3;
    2c1c:	f027 0703 	bic.w	r7, r7, #3
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    2c20:	f1c0 0604 	rsb	r6, r0, #4
    2c24:	4296      	cmp	r6, r2
		tmp_word = *(u32_t *)(addr_word);
    2c26:	683b      	ldr	r3, [r7, #0]
    2c28:	9301      	str	r3, [sp, #4]
		if (count > w_ctx->len) {
    2c2a:	bf28      	it	cs
    2c2c:	4616      	movcs	r6, r2
		memcpy((u8_t *)&tmp_word + (w_ctx->flash_addr & 0x3),
    2c2e:	ab01      	add	r3, sp, #4
    2c30:	4632      	mov	r2, r6
    2c32:	4418      	add	r0, r3
    2c34:	f01f f927 	bl	21e86 <memcpy>
		       (void *)w_ctx->data_addr,
		       count);
		nvmc_wait_ready();
    2c38:	f01a fdc4 	bl	1d7c4 <nvmc_wait_ready>
		*(u32_t *)addr_word = tmp_word;
    2c3c:	9b01      	ldr	r3, [sp, #4]
    2c3e:	603b      	str	r3, [r7, #0]
	w_ctx->flash_addr += shift;
    2c40:	6863      	ldr	r3, [r4, #4]
    2c42:	4433      	add	r3, r6
    2c44:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    2c46:	6823      	ldr	r3, [r4, #0]
    2c48:	4433      	add	r3, r6
    2c4a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    2c4c:	68a3      	ldr	r3, [r4, #8]
    2c4e:	1b9e      	subs	r6, r3, r6

		shift_write_context(count, w_ctx);

#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		if (w_ctx->enable_time_limit) {
    2c50:	7b23      	ldrb	r3, [r4, #12]
	w_ctx->len -= shift;
    2c52:	60a6      	str	r6, [r4, #8]
		if (w_ctx->enable_time_limit) {
    2c54:	2b00      	cmp	r3, #0
    2c56:	d05c      	beq.n	2d12 <write_op+0x112>
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    2c58:	f021 fc26 	bl	244a8 <ticker_ticks_now_get>
    2c5c:	4629      	mov	r1, r5
    2c5e:	f021 fc25 	bl	244ac <ticker_ticks_diff_get>
						      ticks_begin);
			if (2 * ticks_diff >
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2c62:	4933      	ldr	r1, [pc, #204]	; (2d30 <write_op+0x130>)
			if (2 * ticks_diff >
    2c64:	0046      	lsls	r6, r0, #1
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2c66:	6960      	ldr	r0, [r4, #20]
    2c68:	a32f      	add	r3, pc, #188	; (adr r3, 2d28 <write_op+0x128>)
    2c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c6e:	fba0 0101 	umull	r0, r1, r0, r1
    2c72:	f7fd fa85 	bl	180 <__aeabi_uldivmod>
    2c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (2 * ticks_diff >
    2c7a:	4286      	cmp	r6, r0
    2c7c:	d949      	bls.n	2d12 <write_op+0x112>
				nvmc_wait_ready();
    2c7e:	f01a fda1 	bl	1d7c4 <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
    2c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	nvmc_wait_ready();

	return FLASH_OP_DONE;
}
    2c86:	b002      	add	sp, #8
    2c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nvmc_wait_ready();
    2c8c:	f01a fd9a 	bl	1d7c4 <nvmc_wait_ready>
				UNALIGNED_GET((u32_t *)w_ctx->data_addr);
    2c90:	6823      	ldr	r3, [r4, #0]
    2c92:	681a      	ldr	r2, [r3, #0]
		*(u32_t *)w_ctx->flash_addr =
    2c94:	6863      	ldr	r3, [r4, #4]
    2c96:	601a      	str	r2, [r3, #0]
	w_ctx->flash_addr += shift;
    2c98:	6863      	ldr	r3, [r4, #4]
    2c9a:	3304      	adds	r3, #4
    2c9c:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    2c9e:	6823      	ldr	r3, [r4, #0]
    2ca0:	3304      	adds	r3, #4
    2ca2:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    2ca4:	68a3      	ldr	r3, [r4, #8]
    2ca6:	3b04      	subs	r3, #4
    2ca8:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
    2caa:	7b23      	ldrb	r3, [r4, #12]
		i++;
    2cac:	f108 0801 	add.w	r8, r8, #1
		if (w_ctx->enable_time_limit) {
    2cb0:	b193      	cbz	r3, 2cd8 <write_op+0xd8>
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    2cb2:	f021 fbf9 	bl	244a8 <ticker_ticks_now_get>
    2cb6:	4629      	mov	r1, r5
    2cb8:	f021 fbf8 	bl	244ac <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    2cbc:	fbb0 f9f8 	udiv	r9, r0, r8
    2cc0:	4481      	add	r9, r0
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2cc2:	6960      	ldr	r0, [r4, #20]
    2cc4:	4632      	mov	r2, r6
    2cc6:	463b      	mov	r3, r7
    2cc8:	fba0 010a 	umull	r0, r1, r0, sl
    2ccc:	f7fd fa58 	bl	180 <__aeabi_uldivmod>
    2cd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    2cd4:	4581      	cmp	r9, r0
    2cd6:	d8d2      	bhi.n	2c7e <write_op+0x7e>
	while (w_ctx->len >= sizeof(u32_t)) {
    2cd8:	68a2      	ldr	r2, [r4, #8]
    2cda:	2a03      	cmp	r2, #3
    2cdc:	d8d6      	bhi.n	2c8c <write_op+0x8c>
	if (w_ctx->len) {
    2cde:	b1a2      	cbz	r2, 2d0a <write_op+0x10a>
		tmp_word = *(u32_t *)(w_ctx->flash_addr);
    2ce0:	6863      	ldr	r3, [r4, #4]
		memcpy((u8_t *)&tmp_word, (void *)w_ctx->data_addr, w_ctx->len);
    2ce2:	6821      	ldr	r1, [r4, #0]
		tmp_word = *(u32_t *)(w_ctx->flash_addr);
    2ce4:	681b      	ldr	r3, [r3, #0]
    2ce6:	9301      	str	r3, [sp, #4]
		memcpy((u8_t *)&tmp_word, (void *)w_ctx->data_addr, w_ctx->len);
    2ce8:	a801      	add	r0, sp, #4
    2cea:	f01f f8cc 	bl	21e86 <memcpy>
		nvmc_wait_ready();
    2cee:	f01a fd69 	bl	1d7c4 <nvmc_wait_ready>
		*(u32_t *)w_ctx->flash_addr = tmp_word;
    2cf2:	6863      	ldr	r3, [r4, #4]
    2cf4:	9a01      	ldr	r2, [sp, #4]
    2cf6:	601a      	str	r2, [r3, #0]
	w_ctx->flash_addr += shift;
    2cf8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
	w_ctx->data_addr += shift;
    2cfc:	6823      	ldr	r3, [r4, #0]
    2cfe:	440b      	add	r3, r1
	w_ctx->flash_addr += shift;
    2d00:	440a      	add	r2, r1
	w_ctx->data_addr += shift;
    2d02:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    2d04:	2300      	movs	r3, #0
	w_ctx->flash_addr += shift;
    2d06:	6062      	str	r2, [r4, #4]
	w_ctx->len -= shift;
    2d08:	60a3      	str	r3, [r4, #8]
	nvmc_wait_ready();
    2d0a:	f01a fd5b 	bl	1d7c4 <nvmc_wait_ready>
	return FLASH_OP_DONE;
    2d0e:	2000      	movs	r0, #0
    2d10:	e7b9      	b.n	2c86 <write_op+0x86>
	u32_t ticks_begin = 0U;
    2d12:	f04f 0801 	mov.w	r8, #1
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2d16:	f8df a018 	ldr.w	sl, [pc, #24]	; 2d30 <write_op+0x130>
    2d1a:	a703      	add	r7, pc, #12	; (adr r7, 2d28 <write_op+0x128>)
    2d1c:	e9d7 6700 	ldrd	r6, r7, [r7]
    2d20:	e7da      	b.n	2cd8 <write_op+0xd8>
    2d22:	bf00      	nop
    2d24:	f3af 8000 	nop.w
    2d28:	1afd498d 	.word	0x1afd498d
    2d2c:	00000007 	.word	0x00000007
    2d30:	3b9aca00 	.word	0x3b9aca00

00002d34 <output_number>:
	.elem = elements,
	.elem_count = ARRAY_SIZE(elements),
};

static int output_number(bt_mesh_output_action_t action, u32_t number)
{
    2d34:	b508      	push	{r3, lr}
	printk("OOB Number: %u\n", number);
    2d36:	4802      	ldr	r0, [pc, #8]	; (2d40 <output_number+0xc>)
    2d38:	f01c fe1d 	bl	1f976 <printk>

	board_output_number(action, number);

	return 0;
}
    2d3c:	2000      	movs	r0, #0
    2d3e:	bd08      	pop	{r3, pc}
    2d40:	00026479 	.word	0x00026479

00002d44 <bt_ready>:
	.complete = prov_complete,
	.reset = prov_reset,
};

static void bt_ready(int err)
{
    2d44:	b508      	push	{r3, lr}
	if (err) {
    2d46:	4601      	mov	r1, r0
    2d48:	b120      	cbz	r0, 2d54 <bt_ready+0x10>
		printk("Bluetooth init failed (err %d)\n", err);
    2d4a:	480d      	ldr	r0, [pc, #52]	; (2d80 <bt_ready+0x3c>)

	/* This will be a no-op if settings_load() loaded provisioning info */
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);

	printk("Mesh initialized\n");
}
    2d4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Initializing mesh failed (err %d)\n", err);
    2d50:	f01c be11 	b.w	1f976 <printk>
	printk("Bluetooth initialized\n");
    2d54:	480b      	ldr	r0, [pc, #44]	; (2d84 <bt_ready+0x40>)
    2d56:	f01c fe0e 	bl	1f976 <printk>
	err = bt_mesh_init(&prov, &comp);
    2d5a:	490b      	ldr	r1, [pc, #44]	; (2d88 <bt_ready+0x44>)
    2d5c:	480b      	ldr	r0, [pc, #44]	; (2d8c <bt_ready+0x48>)
    2d5e:	f020 f928 	bl	22fb2 <bt_mesh_init>
	if (err) {
    2d62:	4601      	mov	r1, r0
    2d64:	b108      	cbz	r0, 2d6a <bt_ready+0x26>
		printk("Initializing mesh failed (err %d)\n", err);
    2d66:	480a      	ldr	r0, [pc, #40]	; (2d90 <bt_ready+0x4c>)
    2d68:	e7f0      	b.n	2d4c <bt_ready+0x8>
		settings_load();
    2d6a:	f001 fa65 	bl	4238 <settings_load>
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    2d6e:	2003      	movs	r0, #3
    2d70:	f008 f8ce 	bl	af10 <bt_mesh_prov_enable>
	printk("Mesh initialized\n");
    2d74:	4807      	ldr	r0, [pc, #28]	; (2d94 <bt_ready+0x50>)
}
    2d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Mesh initialized\n");
    2d7a:	f01c bdfc 	b.w	1f976 <printk>
    2d7e:	bf00      	nop
    2d80:	000263ec 	.word	0x000263ec
    2d84:	0002640c 	.word	0x0002640c
    2d88:	00025a88 	.word	0x00025a88
    2d8c:	00025b28 	.word	0x00025b28
    2d90:	00026423 	.word	0x00026423
    2d94:	00026446 	.word	0x00026446

00002d98 <main>:

void main(void)
{
    2d98:	b508      	push	{r3, lr}
	int err;

	printk("Initializing...\n");
    2d9a:	4807      	ldr	r0, [pc, #28]	; (2db8 <main+0x20>)
    2d9c:	f01c fdeb 	bl	1f976 <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
    2da0:	4806      	ldr	r0, [pc, #24]	; (2dbc <main+0x24>)
    2da2:	f004 ffc3 	bl	7d2c <bt_enable>
	if (err) {
    2da6:	4601      	mov	r1, r0
    2da8:	b120      	cbz	r0, 2db4 <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
    2daa:	4805      	ldr	r0, [pc, #20]	; (2dc0 <main+0x28>)
	}
}
    2dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    2db0:	f01c bde1 	b.w	1f976 <printk>
}
    2db4:	bd08      	pop	{r3, pc}
    2db6:	bf00      	nop
    2db8:	00026468 	.word	0x00026468
    2dbc:	00002d45 	.word	0x00002d45
    2dc0:	000263ec 	.word	0x000263ec

00002dc4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
    2dc4:	b510      	push	{r4, lr}
	int i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    2dc6:	4c09      	ldr	r4, [pc, #36]	; (2dec <crc8_ccitt+0x28>)
    2dc8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    2dca:	4291      	cmp	r1, r2
    2dcc:	d100      	bne.n	2dd0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    2dce:	bd10      	pop	{r4, pc}
		val ^= p[i];
    2dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
    2dd4:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    2dd6:	0918      	lsrs	r0, r3, #4
    2dd8:	5c20      	ldrb	r0, [r4, r0]
    2dda:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    2dde:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    2de0:	0918      	lsrs	r0, r3, #4
    2de2:	5c20      	ldrb	r0, [r4, r0]
    2de4:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    2de8:	b2c0      	uxtb	r0, r0
    2dea:	e7ee      	b.n	2dca <crc8_ccitt+0x6>
    2dec:	00026489 	.word	0x00026489

00002df0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2df0:	680b      	ldr	r3, [r1, #0]
    2df2:	3301      	adds	r3, #1
    2df4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2df6:	4b01      	ldr	r3, [pc, #4]	; (2dfc <char_out+0xc>)
    2df8:	681b      	ldr	r3, [r3, #0]
    2dfa:	4718      	bx	r3
    2dfc:	20006d84 	.word	0x20006d84

00002e00 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e04:	b085      	sub	sp, #20
    2e06:	469b      	mov	fp, r3
    2e08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    2e0a:	f8df a090 	ldr.w	sl, [pc, #144]	; 2e9c <_printk_dec_ulong+0x9c>
    2e0e:	2c01      	cmp	r4, #1
    2e10:	bfb8      	it	lt
    2e12:	2401      	movlt	r4, #1
    2e14:	2b01      	cmp	r3, #1
    2e16:	bf0c      	ite	eq
    2e18:	2330      	moveq	r3, #48	; 0x30
    2e1a:	2320      	movne	r3, #32
    2e1c:	4615      	mov	r5, r2
    2e1e:	4680      	mov	r8, r0
    2e20:	4689      	mov	r9, r1
    2e22:	9401      	str	r4, [sp, #4]
    2e24:	9302      	str	r3, [sp, #8]
    2e26:	2601      	movs	r6, #1
    2e28:	270a      	movs	r7, #10
    2e2a:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    2e2c:	f10a 0401 	add.w	r4, sl, #1
    2e30:	b90a      	cbnz	r2, 2e36 <_printk_dec_ulong+0x36>
    2e32:	45aa      	cmp	sl, r5
    2e34:	d21f      	bcs.n	2e76 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2e36:	fbb5 f0f4 	udiv	r0, r5, r4
    2e3a:	4649      	mov	r1, r9
    2e3c:	3030      	adds	r0, #48	; 0x30
    2e3e:	47c0      	blx	r8
			digits++;
    2e40:	3601      	adds	r6, #1
			found_largest_digit = 1;
    2e42:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2e44:	3f01      	subs	r7, #1
	while (pos >= 9) {
    2e46:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    2e48:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    2e4c:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    2e50:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    2e54:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    2e58:	d1e8      	bne.n	2e2c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    2e5a:	4649      	mov	r1, r9
    2e5c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2e60:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    2e62:	f1bb 0f03 	cmp.w	fp, #3
    2e66:	d103      	bne.n	2e70 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    2e68:	9b01      	ldr	r3, [sp, #4]
    2e6a:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    2e6c:	2c00      	cmp	r4, #0
    2e6e:	dc0f      	bgt.n	2e90 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    2e70:	b005      	add	sp, #20
    2e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    2e76:	9b01      	ldr	r3, [sp, #4]
    2e78:	42bb      	cmp	r3, r7
    2e7a:	dbe3      	blt.n	2e44 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    2e7c:	f1bb 0f02 	cmp.w	fp, #2
    2e80:	d8e0      	bhi.n	2e44 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2e82:	4649      	mov	r1, r9
    2e84:	9802      	ldr	r0, [sp, #8]
    2e86:	9203      	str	r2, [sp, #12]
			digits++;
    2e88:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2e8a:	47c0      	blx	r8
			digits++;
    2e8c:	9a03      	ldr	r2, [sp, #12]
    2e8e:	e7d9      	b.n	2e44 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    2e90:	4649      	mov	r1, r9
    2e92:	2020      	movs	r0, #32
    2e94:	47c0      	blx	r8
    2e96:	3c01      	subs	r4, #1
    2e98:	e7e8      	b.n	2e6c <_printk_dec_ulong+0x6c>
    2e9a:	bf00      	nop
    2e9c:	3b9ac9ff 	.word	0x3b9ac9ff

00002ea0 <__printk_hook_install>:
	_char_out = fn;
    2ea0:	4b01      	ldr	r3, [pc, #4]	; (2ea8 <__printk_hook_install+0x8>)
    2ea2:	6018      	str	r0, [r3, #0]
}
    2ea4:	4770      	bx	lr
    2ea6:	bf00      	nop
    2ea8:	20006d84 	.word	0x20006d84

00002eac <vprintk>:
{
    2eac:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    2eae:	2300      	movs	r3, #0
    2eb0:	9301      	str	r3, [sp, #4]
	_vprintk(char_out, &ctx, fmt, ap);
    2eb2:	4602      	mov	r2, r0
    2eb4:	460b      	mov	r3, r1
    2eb6:	4803      	ldr	r0, [pc, #12]	; (2ec4 <vprintk+0x18>)
    2eb8:	a901      	add	r1, sp, #4
    2eba:	f01c fc0b 	bl	1f6d4 <_vprintk>
}
    2ebe:	b003      	add	sp, #12
    2ec0:	f85d fb04 	ldr.w	pc, [sp], #4
    2ec4:	00002df1 	.word	0x00002df1

00002ec8 <snprintk>:

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    2ec8:	b40c      	push	{r2, r3}
    2eca:	b530      	push	{r4, r5, lr}
    2ecc:	b085      	sub	sp, #20
    2ece:	ab08      	add	r3, sp, #32
	struct str_context ctx = { str, size, 0 };
    2ed0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    2ed4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;

	va_start(ap, fmt);
    2ed8:	9300      	str	r3, [sp, #0]
{
    2eda:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2edc:	2500      	movs	r5, #0
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2ede:	a901      	add	r1, sp, #4
    2ee0:	4806      	ldr	r0, [pc, #24]	; (2efc <snprintk+0x34>)
	struct str_context ctx = { str, size, 0 };
    2ee2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2ee4:	f01c fbf6 	bl	1f6d4 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    2ee8:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    2eec:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    2eee:	bfb8      	it	lt
    2ef0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    2ef2:	b005      	add	sp, #20
    2ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2ef8:	b002      	add	sp, #8
    2efa:	4770      	bx	lr
    2efc:	0001f6af 	.word	0x0001f6af

00002f00 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set((uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(struct device *arg)
{
    2f00:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    2f02:	f04f 0320 	mov.w	r3, #32
    2f06:	f3ef 8411 	mrs	r4, BASEPRI
    2f0a:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
    2f0e:	f000 f9f1 	bl	32f4 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2f12:	4a09      	ldr	r2, [pc, #36]	; (2f38 <nordicsemi_nrf52_init+0x38>)
    2f14:	2301      	movs	r3, #1
    2f16:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
    2f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2f1e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2f22:	4b06      	ldr	r3, [pc, #24]	; (2f3c <nordicsemi_nrf52_init+0x3c>)
    2f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f28:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2f2a:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2f2c:	f384 8811 	msr	BASEPRI, r4
    2f30:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2f34:	2000      	movs	r0, #0
    2f36:	bd10      	pop	{r4, pc}
    2f38:	4001e000 	.word	0x4001e000
    2f3c:	e000ed00 	.word	0xe000ed00

00002f40 <z_arch_busy_wait>:
#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)


__STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2f40:	b120      	cbz	r0, 2f4c <z_arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2f42:	4b03      	ldr	r3, [pc, #12]	; (2f50 <z_arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2f44:	0180      	lsls	r0, r0, #6
    2f46:	f043 0301 	orr.w	r3, r3, #1
    2f4a:	4718      	bx	r3

void z_arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2f4c:	4770      	bx	lr
    2f4e:	bf00      	nop
    2f50:	00025a80 	.word	0x00025a80

00002f54 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    2f54:	4b01      	ldr	r3, [pc, #4]	; (2f5c <uECC_get_rng+0x8>)
    2f56:	6818      	ldr	r0, [r3, #0]
    2f58:	4770      	bx	lr
    2f5a:	bf00      	nop
    2f5c:	20006d88 	.word	0x20006d88

00002f60 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    2f60:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    2f62:	2208      	movs	r2, #8
{
    2f64:	b089      	sub	sp, #36	; 0x24
    2f66:	460c      	mov	r4, r1
    2f68:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    2f6a:	f01c fed0 	bl	1fd0e <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    2f6e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2f70:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    2f72:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2f74:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    2f76:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    2f78:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    2f7a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    2f7c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    2f7e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    2f80:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    2f82:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2f84:	2308      	movs	r3, #8
    2f86:	466a      	mov	r2, sp
    2f88:	4669      	mov	r1, sp
    2f8a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    2f8c:	e9cd 7701 	strd	r7, r7, [sp, #4]
    2f90:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2f92:	f01c fdc1 	bl	1fb18 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2f96:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2f98:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2f9a:	466a      	mov	r2, sp
    2f9c:	4631      	mov	r1, r6
    2f9e:	4630      	mov	r0, r6
    2fa0:	f01c fdba 	bl	1fb18 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    2fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2fa6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    2fa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2faa:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    2fac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2fae:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    2fb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2fb2:	4405      	add	r5, r0
	tmp[7] = 0;
    2fb4:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2fb8:	466a      	mov	r2, sp
    2fba:	2308      	movs	r3, #8
    2fbc:	4669      	mov	r1, sp
    2fbe:	4668      	mov	r0, sp
    2fc0:	f01c fdaa 	bl	1fb18 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2fc4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    2fc6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2fc8:	2308      	movs	r3, #8
    2fca:	466a      	mov	r2, sp
    2fcc:	4630      	mov	r0, r6
    2fce:	f01c fda3 	bl	1fb18 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    2fd2:	6a23      	ldr	r3, [r4, #32]
    2fd4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    2fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2fd8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    2fda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fdc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    2fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2fe0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    2fe2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2fe4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2fe6:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2fe8:	2308      	movs	r3, #8
    2fea:	466a      	mov	r2, sp
    2fec:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    2fee:	e9cd 7704 	strd	r7, r7, [sp, #16]
    2ff2:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    2ff4:	f01c fd90 	bl	1fb18 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    2ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2ffa:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    2ffc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    2ffe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    3000:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    3002:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3004:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    3006:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    3008:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    300a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    300c:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    300e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    3012:	6a23      	ldr	r3, [r4, #32]
    3014:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3016:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3018:	2308      	movs	r3, #8
    301a:	466a      	mov	r2, sp
    301c:	4630      	mov	r0, r6
    301e:	f01c fd7b 	bl	1fb18 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    3022:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3024:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    3026:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3028:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    302a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    302c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    302e:	6a23      	ldr	r3, [r4, #32]
    3030:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    3032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3034:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3036:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3038:	2308      	movs	r3, #8
    303a:	466a      	mov	r2, sp
    303c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    303e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    3042:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3044:	f01c fe99 	bl	1fd7a <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    3048:	6b23      	ldr	r3, [r4, #48]	; 0x30
    304a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    304c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    304e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    3050:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3052:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    3054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3056:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    3058:	6a63      	ldr	r3, [r4, #36]	; 0x24
    305a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    305c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    305e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3060:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3062:	2308      	movs	r3, #8
    3064:	466a      	mov	r2, sp
    3066:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    3068:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    306c:	f01c fe85 	bl	1fd7a <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    3070:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3072:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    3074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3076:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    3078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    307a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    307c:	6a23      	ldr	r3, [r4, #32]
    307e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    3080:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3082:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    3084:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    3086:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    308a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    308c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    308e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3090:	2308      	movs	r3, #8
    3092:	466a      	mov	r2, sp
    3094:	4630      	mov	r0, r6
    3096:	f01c fe70 	bl	1fd7a <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    309a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    309c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    309e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    30a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    30a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    30a6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    30a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30aa:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    30ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    30ae:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    30b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    30b4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    30b6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    30b8:	2308      	movs	r3, #8
    30ba:	466a      	mov	r2, sp
    30bc:	4630      	mov	r0, r6
    30be:	f01c fe5c 	bl	1fd7a <uECC_vli_sub>

	if (carry < 0) {
    30c2:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    30c4:	4c0d      	ldr	r4, [pc, #52]	; (30fc <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
    30c6:	d40f      	bmi.n	30e8 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    30c8:	b935      	cbnz	r5, 30d8 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    30ca:	2208      	movs	r2, #8
    30cc:	4631      	mov	r1, r6
    30ce:	4620      	mov	r0, r4
    30d0:	f01c fe29 	bl	1fd26 <uECC_vli_cmp_unsafe>
		while (carry || 
    30d4:	2801      	cmp	r0, #1
    30d6:	d00f      	beq.n	30f8 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    30d8:	2308      	movs	r3, #8
    30da:	4622      	mov	r2, r4
    30dc:	4631      	mov	r1, r6
    30de:	4630      	mov	r0, r6
    30e0:	f01c fe4b 	bl	1fd7a <uECC_vli_sub>
    30e4:	1a2d      	subs	r5, r5, r0
    30e6:	e7ef      	b.n	30c8 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    30e8:	2308      	movs	r3, #8
    30ea:	4622      	mov	r2, r4
    30ec:	4631      	mov	r1, r6
    30ee:	4630      	mov	r0, r6
    30f0:	f01c fd12 	bl	1fb18 <uECC_vli_add>
		while (carry < 0);
    30f4:	182d      	adds	r5, r5, r0
    30f6:	d4f7      	bmi.n	30e8 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
    30f8:	b009      	add	sp, #36	; 0x24
    30fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30fc:	00025b80 	.word	0x00025b80

00003100 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    3100:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    3102:	4e28      	ldr	r6, [pc, #160]	; (31a4 <tc_aes128_set_encrypt_key+0xa4>)
{
    3104:	4607      	mov	r7, r0
    3106:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    3108:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    310a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    310c:	ad01      	add	r5, sp, #4
    310e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3110:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3114:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3118:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    311c:	2f00      	cmp	r7, #0
    311e:	d03c      	beq.n	319a <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    3120:	2c00      	cmp	r4, #0
    3122:	d03c      	beq.n	319e <tc_aes128_set_encrypt_key+0x9e>
    3124:	1f38      	subs	r0, r7, #4
    3126:	4621      	mov	r1, r4
    3128:	4602      	mov	r2, r0
    312a:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    312c:	784b      	ldrb	r3, [r1, #1]
    312e:	780d      	ldrb	r5, [r1, #0]
    3130:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3132:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3136:	78cd      	ldrb	r5, [r1, #3]
    3138:	432b      	orrs	r3, r5
    313a:	788d      	ldrb	r5, [r1, #2]
    313c:	3104      	adds	r1, #4
    313e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    3142:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3144:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3148:	d1f0      	bne.n	312c <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    314a:	4c17      	ldr	r4, [pc, #92]	; (31a8 <tc_aes128_set_encrypt_key+0xa8>)
    314c:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    314e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    3150:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3152:	d118      	bne.n	3186 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    3154:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3158:	0e1a      	lsrs	r2, r3, #24
    315a:	5ca5      	ldrb	r5, [r4, r2]
    315c:	b2da      	uxtb	r2, r3
    315e:	5ca2      	ldrb	r2, [r4, r2]
    3160:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3164:	f3c3 4507 	ubfx	r5, r3, #16, #8
    3168:	f3c3 2307 	ubfx	r3, r3, #8, #8
    316c:	5d65      	ldrb	r5, [r4, r5]
    316e:	5ce3      	ldrb	r3, [r4, r3]
    3170:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    3174:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3178:	ad0c      	add	r5, sp, #48	; 0x30
    317a:	f021 0303 	bic.w	r3, r1, #3
    317e:	442b      	add	r3, r5
    3180:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3184:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    3186:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    318a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    318c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    318e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    3190:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3192:	d1dc      	bne.n	314e <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    3194:	2001      	movs	r0, #1
}
    3196:	b00d      	add	sp, #52	; 0x34
    3198:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    319a:	4638      	mov	r0, r7
    319c:	e7fb      	b.n	3196 <tc_aes128_set_encrypt_key+0x96>
    319e:	4620      	mov	r0, r4
    31a0:	e7f9      	b.n	3196 <tc_aes128_set_encrypt_key+0x96>
    31a2:	bf00      	nop
    31a4:	000259d0 	.word	0x000259d0
    31a8:	000264ac 	.word	0x000264ac

000031ac <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    31ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    31b0:	4615      	mov	r5, r2
    31b2:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    31b4:	4607      	mov	r7, r0
    31b6:	2800      	cmp	r0, #0
    31b8:	d059      	beq.n	326e <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    31ba:	2900      	cmp	r1, #0
    31bc:	d05a      	beq.n	3274 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    31be:	2a00      	cmp	r2, #0
    31c0:	d05a      	beq.n	3278 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    31c2:	2310      	movs	r3, #16
    31c4:	460a      	mov	r2, r1
    31c6:	4668      	mov	r0, sp
    31c8:	4619      	mov	r1, r3
    31ca:	f01c fbe2 	bl	1f992 <_copy>
	add_round_key(state, s->words);
    31ce:	4629      	mov	r1, r5
    31d0:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    31d2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 327c <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
    31d6:	f01d fae7 	bl	207a8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    31da:	f105 0610 	add.w	r6, r5, #16
    31de:	46c8      	mov	r8, r9
    31e0:	35a0      	adds	r5, #160	; 0xa0
    31e2:	466c      	mov	r4, sp
{
    31e4:	466a      	mov	r2, sp
    31e6:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    31e8:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    31ea:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    31ec:	f819 1001 	ldrb.w	r1, [r9, r1]
    31f0:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    31f4:	d1f8      	bne.n	31e8 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
    31f6:	4668      	mov	r0, sp
    31f8:	f01d fb1b 	bl	20832 <shift_rows>
	mult_row_column(t, s);
    31fc:	4669      	mov	r1, sp
    31fe:	a804      	add	r0, sp, #16
    3200:	f01d fb50 	bl	208a4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    3204:	a901      	add	r1, sp, #4
    3206:	a805      	add	r0, sp, #20
    3208:	f01d fb4c 	bl	208a4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    320c:	a902      	add	r1, sp, #8
    320e:	a806      	add	r0, sp, #24
    3210:	f01d fb48 	bl	208a4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    3214:	a903      	add	r1, sp, #12
    3216:	a807      	add	r0, sp, #28
    3218:	f01d fb44 	bl	208a4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    321c:	2310      	movs	r3, #16
    321e:	4619      	mov	r1, r3
    3220:	eb0d 0203 	add.w	r2, sp, r3
    3224:	4668      	mov	r0, sp
    3226:	f01c fbb4 	bl	1f992 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    322a:	4631      	mov	r1, r6
    322c:	4668      	mov	r0, sp
    322e:	3610      	adds	r6, #16
    3230:	f01d faba 	bl	207a8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    3234:	42ae      	cmp	r6, r5
    3236:	d1d4      	bne.n	31e2 <tc_aes_encrypt+0x36>
    3238:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
    323a:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    323c:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
    323e:	f818 3003 	ldrb.w	r3, [r8, r3]
    3242:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    3246:	d1f8      	bne.n	323a <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
    3248:	4668      	mov	r0, sp
    324a:	f01d faf2 	bl	20832 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    324e:	4629      	mov	r1, r5
    3250:	4668      	mov	r0, sp
    3252:	f01d faa9 	bl	207a8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    3256:	2310      	movs	r3, #16
    3258:	4619      	mov	r1, r3
    325a:	466a      	mov	r2, sp
    325c:	4638      	mov	r0, r7
    325e:	f01c fb98 	bl	1f992 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3262:	4668      	mov	r0, sp
    3264:	2210      	movs	r2, #16
    3266:	4631      	mov	r1, r6
    3268:	f01c fba0 	bl	1f9ac <_set>

	return TC_CRYPTO_SUCCESS;
    326c:	2001      	movs	r0, #1
}
    326e:	b009      	add	sp, #36	; 0x24
    3270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    3274:	4608      	mov	r0, r1
    3276:	e7fa      	b.n	326e <tc_aes_encrypt+0xc2>
    3278:	4610      	mov	r0, r2
    327a:	e7f8      	b.n	326e <tc_aes_encrypt+0xc2>
    327c:	000264ac 	.word	0x000264ac

00003280 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    3280:	4b0c      	ldr	r3, [pc, #48]	; (32b4 <errata_108+0x34>)
    3282:	781b      	ldrb	r3, [r3, #0]
    3284:	2b06      	cmp	r3, #6
    3286:	d110      	bne.n	32aa <errata_108+0x2a>
    3288:	4b0b      	ldr	r3, [pc, #44]	; (32b8 <errata_108+0x38>)
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	071a      	lsls	r2, r3, #28
    328e:	d10c      	bne.n	32aa <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    3290:	4b0a      	ldr	r3, [pc, #40]	; (32bc <errata_108+0x3c>)
    3292:	6818      	ldr	r0, [r3, #0]
    3294:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    3298:	2b30      	cmp	r3, #48	; 0x30
    329a:	d008      	beq.n	32ae <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    329c:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    32a0:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    32a4:	4258      	negs	r0, r3
    32a6:	4158      	adcs	r0, r3
    32a8:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    32aa:	2000      	movs	r0, #0
    32ac:	4770      	bx	lr
            return true;
    32ae:	2001      	movs	r0, #1
}
    32b0:	4770      	bx	lr
    32b2:	bf00      	nop
    32b4:	f0000fe0 	.word	0xf0000fe0
    32b8:	f0000fe4 	.word	0xf0000fe4
    32bc:	f0000fe8 	.word	0xf0000fe8

000032c0 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    32c0:	4b09      	ldr	r3, [pc, #36]	; (32e8 <errata_16+0x28>)
    32c2:	781b      	ldrb	r3, [r3, #0]
    32c4:	2b06      	cmp	r3, #6
    32c6:	d10c      	bne.n	32e2 <errata_16+0x22>
    32c8:	4b08      	ldr	r3, [pc, #32]	; (32ec <errata_16+0x2c>)
    32ca:	681b      	ldr	r3, [r3, #0]
    32cc:	071a      	lsls	r2, r3, #28
    32ce:	d108      	bne.n	32e2 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    32d0:	4b07      	ldr	r3, [pc, #28]	; (32f0 <errata_16+0x30>)
    32d2:	6818      	ldr	r0, [r3, #0]
    32d4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    32d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    32dc:	4258      	negs	r0, r3
    32de:	4158      	adcs	r0, r3
    32e0:	4770      	bx	lr
            return true;
        }
    }

    return false;
    32e2:	2000      	movs	r0, #0
}
    32e4:	4770      	bx	lr
    32e6:	bf00      	nop
    32e8:	f0000fe0 	.word	0xf0000fe0
    32ec:	f0000fe4 	.word	0xf0000fe4
    32f0:	f0000fe8 	.word	0xf0000fe8

000032f4 <SystemInit>:
{
    32f4:	b508      	push	{r3, lr}
    if (errata_12()){
    32f6:	f7ff ffc3 	bl	3280 <errata_108>
    32fa:	b128      	cbz	r0, 3308 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    32fc:	4b78      	ldr	r3, [pc, #480]	; (34e0 <SystemInit+0x1ec>)
    32fe:	4a79      	ldr	r2, [pc, #484]	; (34e4 <SystemInit+0x1f0>)
    3300:	681b      	ldr	r3, [r3, #0]
    3302:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3306:	6013      	str	r3, [r2, #0]
    if (errata_16()){
    3308:	f7ff ffda 	bl	32c0 <errata_16>
    330c:	b110      	cbz	r0, 3314 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    330e:	4b76      	ldr	r3, [pc, #472]	; (34e8 <SystemInit+0x1f4>)
    3310:	4a76      	ldr	r2, [pc, #472]	; (34ec <SystemInit+0x1f8>)
    3312:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    3314:	f7ff ffb4 	bl	3280 <errata_108>
    3318:	b128      	cbz	r0, 3326 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    331a:	4b75      	ldr	r3, [pc, #468]	; (34f0 <SystemInit+0x1fc>)
    331c:	4a75      	ldr	r2, [pc, #468]	; (34f4 <SystemInit+0x200>)
    331e:	681b      	ldr	r3, [r3, #0]
    3320:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3324:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    3326:	f7ff ffcb 	bl	32c0 <errata_16>
    332a:	b120      	cbz	r0, 3336 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    332c:	4a72      	ldr	r2, [pc, #456]	; (34f8 <SystemInit+0x204>)
    332e:	68d3      	ldr	r3, [r2, #12]
    3330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3334:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    3336:	f7ff ffa3 	bl	3280 <errata_108>
    333a:	b140      	cbz	r0, 334e <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    333c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3340:	2200      	movs	r2, #0
    3342:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    3346:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    334a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    334e:	f7ff ffb7 	bl	32c0 <errata_16>
    3352:	b110      	cbz	r0, 335a <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    3354:	4b69      	ldr	r3, [pc, #420]	; (34fc <SystemInit+0x208>)
    3356:	2203      	movs	r2, #3
    3358:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    335a:	f7ff ffb1 	bl	32c0 <errata_16>
    335e:	b140      	cbz	r0, 3372 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    3360:	4b67      	ldr	r3, [pc, #412]	; (3500 <SystemInit+0x20c>)
    3362:	2205      	movs	r2, #5
    3364:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    3366:	2201      	movs	r2, #1
    3368:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    336a:	2200      	movs	r2, #0
    336c:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    336e:	223f      	movs	r2, #63	; 0x3f
    3370:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    3372:	4b64      	ldr	r3, [pc, #400]	; (3504 <SystemInit+0x210>)
    3374:	781b      	ldrb	r3, [r3, #0]
    3376:	2b06      	cmp	r3, #6
    3378:	d150      	bne.n	341c <SystemInit+0x128>
    337a:	4b63      	ldr	r3, [pc, #396]	; (3508 <SystemInit+0x214>)
    337c:	681b      	ldr	r3, [r3, #0]
    337e:	0719      	lsls	r1, r3, #28
    3380:	d14c      	bne.n	341c <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    3382:	4b62      	ldr	r3, [pc, #392]	; (350c <SystemInit+0x218>)
    3384:	681b      	ldr	r3, [r3, #0]
    3386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    338a:	2b50      	cmp	r3, #80	; 0x50
    338c:	d146      	bne.n	341c <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    338e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3392:	4b5f      	ldr	r3, [pc, #380]	; (3510 <SystemInit+0x21c>)
    3394:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3398:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    339c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    33a0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    33a4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    33a8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    33ac:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    33b0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    33b4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    33b8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    33bc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    33c0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    33c4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    33c8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    33cc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    33d0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    33d4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    33d8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    33dc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    33e0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    33e4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    33e8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    33ec:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    33f0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    33f4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    33f8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    33fc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3400:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3404:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3408:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    340c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3410:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3414:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3418:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    341c:	f7ff ff30 	bl	3280 <errata_108>
    3420:	b128      	cbz	r0, 342e <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    3422:	4b3c      	ldr	r3, [pc, #240]	; (3514 <SystemInit+0x220>)
    3424:	4a3c      	ldr	r2, [pc, #240]	; (3518 <SystemInit+0x224>)
    3426:	681b      	ldr	r3, [r3, #0]
    3428:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    342c:	6013      	str	r3, [r2, #0]
    if (errata_136()){
    342e:	f7ff ff27 	bl	3280 <errata_108>
    3432:	b148      	cbz	r0, 3448 <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3438:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    343c:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    343e:	bf44      	itt	mi
    3440:	f06f 0201 	mvnmi.w	r2, #1
    3444:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
    3448:	4b34      	ldr	r3, [pc, #208]	; (351c <SystemInit+0x228>)
    344a:	681b      	ldr	r3, [r3, #0]
    344c:	2b06      	cmp	r3, #6
    344e:	d108      	bne.n	3462 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
    3450:	4b33      	ldr	r3, [pc, #204]	; (3520 <SystemInit+0x22c>)
    3452:	681b      	ldr	r3, [r3, #0]
    3454:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    3456:	bf01      	itttt	eq
    3458:	4a32      	ldreq	r2, [pc, #200]	; (3524 <SystemInit+0x230>)
    345a:	6813      	ldreq	r3, [r2, #0]
    345c:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
    3460:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3462:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3466:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    346a:	2a00      	cmp	r2, #0
    346c:	db03      	blt.n	3476 <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    346e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3472:	2b00      	cmp	r3, #0
    3474:	da2f      	bge.n	34d6 <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    3476:	4b2c      	ldr	r3, [pc, #176]	; (3528 <SystemInit+0x234>)
    3478:	2201      	movs	r2, #1
    347a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    347e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3482:	2a00      	cmp	r2, #0
    3484:	d0fb      	beq.n	347e <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
    3486:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    348a:	2115      	movs	r1, #21
    348c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3490:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3494:	2a00      	cmp	r2, #0
    3496:	d0fb      	beq.n	3490 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
    3498:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    349c:	2215      	movs	r2, #21
    349e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    34a2:	4b21      	ldr	r3, [pc, #132]	; (3528 <SystemInit+0x234>)
    34a4:	461a      	mov	r2, r3
    34a6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    34aa:	2900      	cmp	r1, #0
    34ac:	d0fb      	beq.n	34a6 <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    34ae:	2100      	movs	r1, #0
    34b0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    34b4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    34b8:	2b00      	cmp	r3, #0
    34ba:	d0fb      	beq.n	34b4 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    34bc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    34c0:	491a      	ldr	r1, [pc, #104]	; (352c <SystemInit+0x238>)
    34c2:	4b1b      	ldr	r3, [pc, #108]	; (3530 <SystemInit+0x23c>)
    34c4:	68ca      	ldr	r2, [r1, #12]
    34c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    34ca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    34cc:	60cb      	str	r3, [r1, #12]
    34ce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    34d2:	bf00      	nop
    34d4:	e7fd      	b.n	34d2 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    34d6:	4b17      	ldr	r3, [pc, #92]	; (3534 <SystemInit+0x240>)
    34d8:	4a17      	ldr	r2, [pc, #92]	; (3538 <SystemInit+0x244>)
    34da:	601a      	str	r2, [r3, #0]
}
    34dc:	bd08      	pop	{r3, pc}
    34de:	bf00      	nop
    34e0:	10000324 	.word	0x10000324
    34e4:	40013540 	.word	0x40013540
    34e8:	4007c074 	.word	0x4007c074
    34ec:	baadf00d 	.word	0xbaadf00d
    34f0:	10000244 	.word	0x10000244
    34f4:	4000053c 	.word	0x4000053c
    34f8:	e000edf0 	.word	0xe000edf0
    34fc:	400005a0 	.word	0x400005a0
    3500:	40005610 	.word	0x40005610
    3504:	f0000fe0 	.word	0xf0000fe0
    3508:	f0000fe4 	.word	0xf0000fe4
    350c:	f0000fe8 	.word	0xf0000fe8
    3510:	4000c000 	.word	0x4000c000
    3514:	10000258 	.word	0x10000258
    3518:	40000ee4 	.word	0x40000ee4
    351c:	10000130 	.word	0x10000130
    3520:	10000134 	.word	0x10000134
    3524:	4000173c 	.word	0x4000173c
    3528:	4001e000 	.word	0x4001e000
    352c:	e000ed00 	.word	0xe000ed00
    3530:	05fa0004 	.word	0x05fa0004
    3534:	20006d8c 	.word	0x20006d8c
    3538:	03d09000 	.word	0x03d09000

0000353c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    353c:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    353e:	4c11      	ldr	r4, [pc, #68]	; (3584 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3540:	4a11      	ldr	r2, [pc, #68]	; (3588 <_DoInit+0x4c>)
    3542:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3544:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3546:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    354a:	4b10      	ldr	r3, [pc, #64]	; (358c <_DoInit+0x50>)
    354c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    354e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    3550:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    3554:	4a0e      	ldr	r2, [pc, #56]	; (3590 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    3556:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    3558:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    355a:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    355c:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    355e:	490d      	ldr	r1, [pc, #52]	; (3594 <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
    3560:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
    3562:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    3564:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3566:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    3568:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    356a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    356c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    356e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    3570:	f01e fc24 	bl	21dbc <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    3574:	4908      	ldr	r1, [pc, #32]	; (3598 <_DoInit+0x5c>)
    3576:	4620      	mov	r0, r4
    3578:	f01e fc20 	bl	21dbc <strcpy>
  p->acID[6] = ' ';
    357c:	2320      	movs	r3, #32
    357e:	71a3      	strb	r3, [r4, #6]
}
    3580:	bd10      	pop	{r4, pc}
    3582:	bf00      	nop
    3584:	200005d0 	.word	0x200005d0
    3588:	000265ac 	.word	0x000265ac
    358c:	20001ea6 	.word	0x20001ea6
    3590:	20001e96 	.word	0x20001e96
    3594:	000265b5 	.word	0x000265b5
    3598:	000265b9 	.word	0x000265b9

0000359c <SEGGER_RTT_WriteSkipNoLock>:
  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    359c:	f8df c088 	ldr.w	ip, [pc, #136]	; 3628 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    35a0:	2318      	movs	r3, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    35a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  RdOff = pRing->RdOff;
    35a6:	fb03 c700 	mla	r7, r3, r0, ip
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    35aa:	468a      	mov	sl, r1
  RdOff = pRing->RdOff;
    35ac:	6abe      	ldr	r6, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
    35ae:	6a7c      	ldr	r4, [r7, #36]	; 0x24
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
    35b0:	42a6      	cmp	r6, r4
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    35b2:	4615      	mov	r5, r2
  if (RdOff <= WrOff) {
    35b4:	d82d      	bhi.n	3612 <SEGGER_RTT_WriteSkipNoLock+0x76>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
    35b6:	f8d7 9020 	ldr.w	r9, [r7, #32]
    35ba:	eba9 0804 	sub.w	r8, r9, r4
    35be:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {
    35c2:	4596      	cmp	lr, r2
    35c4:	d309      	bcc.n	35da <SEGGER_RTT_WriteSkipNoLock+0x3e>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    35c6:	fb00 3303 	mla	r3, r0, r3, r3
    35ca:	449c      	add	ip, r3
    35cc:	f8dc 0004 	ldr.w	r0, [ip, #4]
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    35d0:	4420      	add	r0, r4
    35d2:	f01e fc58 	bl	21e86 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    35d6:	442c      	add	r4, r5
    35d8:	e00d      	b.n	35f6 <SEGGER_RTT_WriteSkipNoLock+0x5a>
    Avail += RdOff;
    35da:	4476      	add	r6, lr
    if (Avail >= NumBytes) {
    35dc:	42b2      	cmp	r2, r6
    35de:	d821      	bhi.n	3624 <SEGGER_RTT_WriteSkipNoLock+0x88>
      if (Rem > NumBytes) {
    35e0:	fb00 3303 	mla	r3, r0, r3, r3
    35e4:	eb0c 0603 	add.w	r6, ip, r3
    35e8:	4590      	cmp	r8, r2
    35ea:	6870      	ldr	r0, [r6, #4]
    35ec:	4420      	add	r0, r4
    35ee:	4414      	add	r4, r2
    35f0:	d905      	bls.n	35fe <SEGGER_RTT_WriteSkipNoLock+0x62>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    35f2:	f01e fc48 	bl	21e86 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    35f6:	627c      	str	r4, [r7, #36]	; 0x24
#endif
      return 1;
    35f8:	2001      	movs	r0, #1
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
}
    35fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    35fe:	4642      	mov	r2, r8
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    3600:	eba4 0409 	sub.w	r4, r4, r9
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    3604:	f01e fc3f 	bl	21e86 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    3608:	4622      	mov	r2, r4
    360a:	eb0a 0108 	add.w	r1, sl, r8
    360e:	6870      	ldr	r0, [r6, #4]
    3610:	e7ef      	b.n	35f2 <SEGGER_RTT_WriteSkipNoLock+0x56>
    Avail = RdOff - WrOff - 1u;
    3612:	3e01      	subs	r6, #1
    3614:	1b36      	subs	r6, r6, r4
    if (Avail >= NumBytes) {
    3616:	42b2      	cmp	r2, r6
    3618:	d804      	bhi.n	3624 <SEGGER_RTT_WriteSkipNoLock+0x88>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    361a:	fb00 3303 	mla	r3, r0, r3, r3
    361e:	4463      	add	r3, ip
    3620:	6858      	ldr	r0, [r3, #4]
    3622:	e7d5      	b.n	35d0 <SEGGER_RTT_WriteSkipNoLock+0x34>
  return 0;
    3624:	2000      	movs	r0, #0
    3626:	e7e8      	b.n	35fa <SEGGER_RTT_WriteSkipNoLock+0x5e>
    3628:	200005d0 	.word	0x200005d0

0000362c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    362e:	4c18      	ldr	r4, [pc, #96]	; (3690 <SEGGER_RTT_WriteNoLock+0x64>)
    3630:	2318      	movs	r3, #24
    3632:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    3636:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    363a:	4425      	add	r5, r4
  switch (pRing->Flags) {
    363c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    363e:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3640:	460f      	mov	r7, r1
    3642:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    3644:	d011      	beq.n	366a <SEGGER_RTT_WriteNoLock+0x3e>
    3646:	b124      	cbz	r4, 3652 <SEGGER_RTT_WriteNoLock+0x26>
    3648:	2c02      	cmp	r4, #2
    364a:	d01b      	beq.n	3684 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    364c:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    364e:	4620      	mov	r0, r4
    3650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    3652:	4628      	mov	r0, r5
    3654:	f01d fa64 	bl	20b20 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    3658:	42b0      	cmp	r0, r6
    365a:	d3f8      	bcc.n	364e <SEGGER_RTT_WriteNoLock+0x22>
      _WriteNoCheck(pRing, pData, NumBytes);
    365c:	4632      	mov	r2, r6
    365e:	4639      	mov	r1, r7
    3660:	4628      	mov	r0, r5
    3662:	f01d fa6b 	bl	20b3c <_WriteNoCheck>
    3666:	4634      	mov	r4, r6
    3668:	e7f1      	b.n	364e <SEGGER_RTT_WriteNoLock+0x22>
    Avail = _GetAvailWriteSpace(pRing);
    366a:	4628      	mov	r0, r5
    366c:	f01d fa58 	bl	20b20 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    3670:	4286      	cmp	r6, r0
    3672:	4634      	mov	r4, r6
    3674:	bf28      	it	cs
    3676:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    3678:	4622      	mov	r2, r4
    367a:	4639      	mov	r1, r7
    367c:	4628      	mov	r0, r5
    367e:	f01d fa5d 	bl	20b3c <_WriteNoCheck>
    break;
    3682:	e7e4      	b.n	364e <SEGGER_RTT_WriteNoLock+0x22>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    3684:	4628      	mov	r0, r5
}
    3686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    368a:	f01d ba71 	b.w	20b70 <_WriteBlocking>
    368e:	bf00      	nop
    3690:	200005d0 	.word	0x200005d0

00003694 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    3694:	4a03      	ldr	r2, [pc, #12]	; (36a4 <SEGGER_RTT_HasDataUp+0x10>)
    3696:	2318      	movs	r3, #24
    3698:	fb03 2300 	mla	r3, r3, r0, r2
    369c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    369e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    36a0:	1a80      	subs	r0, r0, r2
    36a2:	4770      	bx	lr
    36a4:	200005d0 	.word	0x200005d0

000036a8 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    36a8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    36aa:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    36ac:	a901      	add	r1, sp, #4
    36ae:	4808      	ldr	r0, [pc, #32]	; (36d0 <z_log_msg_std_alloc+0x28>)
	union log_msg_chunk *msg = NULL;
    36b0:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    36b2:	f01a fd71 	bl	1e198 <k_mem_slab_alloc>
	if (err != 0) {
    36b6:	b110      	cbz	r0, 36be <z_log_msg_std_alloc+0x16>
		msg = log_msg_no_space_handle();
    36b8:	f000 f9fc 	bl	3ab4 <log_msg_no_space_handle>
    36bc:	9001      	str	r0, [sp, #4]
	return msg;
    36be:	9801      	ldr	r0, [sp, #4]
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
    36c0:	b118      	cbz	r0, 36ca <z_log_msg_std_alloc+0x22>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    36c2:	2301      	movs	r3, #1
    36c4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0;
    36c6:	2300      	movs	r3, #0
    36c8:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    36ca:	b003      	add	sp, #12
    36cc:	f85d fb04 	ldr.w	pc, [sp], #4
    36d0:	20000718 	.word	0x20000718

000036d4 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    36d4:	b530      	push	{r4, r5, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    36d6:	4d0c      	ldr	r5, [pc, #48]	; (3708 <enable_logger+0x34>)
    36d8:	490c      	ldr	r1, [pc, #48]	; (370c <enable_logger+0x38>)
    36da:	b087      	sub	sp, #28
    36dc:	2400      	movs	r4, #0
    36de:	230e      	movs	r3, #14
    36e0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    36e4:	f44f 7240 	mov.w	r2, #768	; 0x300
    36e8:	4b09      	ldr	r3, [pc, #36]	; (3710 <enable_logger+0x3c>)
    36ea:	e9cd 4404 	strd	r4, r4, [sp, #16]
    36ee:	e9cd 4400 	strd	r4, r4, [sp]
    36f2:	4628      	mov	r0, r5
    36f4:	f01b faaa 	bl	1ec4c <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    36f8:	4628      	mov	r0, r5
    36fa:	4906      	ldr	r1, [pc, #24]	; (3714 <enable_logger+0x40>)
    36fc:	f021 fe1b 	bl	25336 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    3700:	4620      	mov	r0, r4
    3702:	b007      	add	sp, #28
    3704:	bd30      	pop	{r4, r5, pc}
    3706:	bf00      	nop
    3708:	200006a8 	.word	0x200006a8
    370c:	20002488 	.word	0x20002488
    3710:	000039c5 	.word	0x000039c5
    3714:	000265c0 	.word	0x000265c0

00003718 <log_core_init>:
{
    3718:	b508      	push	{r3, lr}
		log_msg_pool_init();
    371a:	f000 f9c1 	bl	3aa0 <log_msg_pool_init>
		log_list_init(&list);
    371e:	4809      	ldr	r0, [pc, #36]	; (3744 <log_core_init+0x2c>)
    3720:	f01d fa56 	bl	20bd0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    3724:	2304      	movs	r3, #4
    3726:	2228      	movs	r2, #40	; 0x28
    3728:	4807      	ldr	r0, [pc, #28]	; (3748 <log_core_init+0x30>)
    372a:	4908      	ldr	r1, [pc, #32]	; (374c <log_core_init+0x34>)
    372c:	f021 fbe1 	bl	24ef2 <k_mem_slab_init>
	timestamp_func = timestamp_get;
    3730:	4b07      	ldr	r3, [pc, #28]	; (3750 <log_core_init+0x38>)
    3732:	4a08      	ldr	r2, [pc, #32]	; (3754 <log_core_init+0x3c>)
    3734:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3736:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    373a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    373e:	f000 bbcb 	b.w	3ed8 <log_output_timestamp_freq_set>
    3742:	bf00      	nop
    3744:	20000684 	.word	0x20000684
    3748:	2000068c 	.word	0x2000068c
    374c:	20004e58 	.word	0x20004e58
    3750:	20006d90 	.word	0x20006d90
    3754:	00020c01 	.word	0x00020c01

00003758 <dropped_notify>:
{
    3758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    375a:	4b0f      	ldr	r3, [pc, #60]	; (3798 <dropped_notify+0x40>)
    375c:	f3bf 8f5b 	dmb	ish
    3760:	2500      	movs	r5, #0
    3762:	e853 7f00 	ldrex	r7, [r3]
    3766:	e843 5200 	strex	r2, r5, [r3]
    376a:	2a00      	cmp	r2, #0
    376c:	d1f9      	bne.n	3762 <dropped_notify+0xa>
    376e:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    3772:	4c0a      	ldr	r4, [pc, #40]	; (379c <dropped_notify+0x44>)
    3774:	4e0a      	ldr	r6, [pc, #40]	; (37a0 <dropped_notify+0x48>)
    3776:	1b36      	subs	r6, r6, r4
    3778:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    377a:	42b5      	cmp	r5, r6
    377c:	db00      	blt.n	3780 <dropped_notify+0x28>
}
    377e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend);
	return backend->cb->active;
    3780:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3782:	795b      	ldrb	r3, [r3, #5]
    3784:	b12b      	cbz	r3, 3792 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    3786:	6823      	ldr	r3, [r4, #0]
    3788:	68db      	ldr	r3, [r3, #12]
    378a:	b113      	cbz	r3, 3792 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    378c:	4639      	mov	r1, r7
    378e:	4620      	mov	r0, r4
    3790:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3792:	3501      	adds	r5, #1
    3794:	3410      	adds	r4, #16
    3796:	e7f0      	b.n	377a <dropped_notify+0x22>
    3798:	2000067c 	.word	0x2000067c
    379c:	000259b0 	.word	0x000259b0
    37a0:	000259d0 	.word	0x000259d0

000037a4 <log_process>:
	if (!backend_attached && !bypass) {
    37a4:	4b23      	ldr	r3, [pc, #140]	; (3834 <log_process+0x90>)
    37a6:	781b      	ldrb	r3, [r3, #0]
{
    37a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37ac:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    37ae:	b903      	cbnz	r3, 37b2 <log_process+0xe>
    37b0:	b350      	cbz	r0, 3808 <log_process+0x64>
	__asm__ volatile(
    37b2:	f04f 0320 	mov.w	r3, #32
    37b6:	f3ef 8411 	mrs	r4, BASEPRI
    37ba:	f383 8811 	msr	BASEPRI, r3
	msg = log_list_head_get(&list);
    37be:	481e      	ldr	r0, [pc, #120]	; (3838 <log_process+0x94>)
    37c0:	f01d fa16 	bl	20bf0 <log_list_head_get>
    37c4:	4607      	mov	r7, r0
	__asm__ volatile(
    37c6:	f384 8811 	msr	BASEPRI, r4
    37ca:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    37ce:	b178      	cbz	r0, 37f0 <log_process+0x4c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    37d0:	f3bf 8f5b 	dmb	ish
    37d4:	4b19      	ldr	r3, [pc, #100]	; (383c <log_process+0x98>)
    37d6:	e853 2f00 	ldrex	r2, [r3]
    37da:	3a01      	subs	r2, #1
    37dc:	e843 2100 	strex	r1, r2, [r3]
    37e0:	2900      	cmp	r1, #0
    37e2:	d1f8      	bne.n	37d6 <log_process+0x32>
    37e4:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    37e8:	b18d      	cbz	r5, 380e <log_process+0x6a>
	log_msg_put(msg);
    37ea:	4638      	mov	r0, r7
    37ec:	f01d faf3 	bl	20dd6 <log_msg_put>
	if (!bypass && dropped_cnt) {
    37f0:	b925      	cbnz	r5, 37fc <log_process+0x58>
    37f2:	4b13      	ldr	r3, [pc, #76]	; (3840 <log_process+0x9c>)
    37f4:	681b      	ldr	r3, [r3, #0]
    37f6:	b10b      	cbz	r3, 37fc <log_process+0x58>
		dropped_notify();
    37f8:	f7ff ffae 	bl	3758 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    37fc:	480e      	ldr	r0, [pc, #56]	; (3838 <log_process+0x94>)
    37fe:	f01d f9f5 	bl	20bec <log_list_head_peek>
    3802:	1c05      	adds	r5, r0, #0
    3804:	bf18      	it	ne
    3806:	2501      	movne	r5, #1
}
    3808:	4628      	mov	r0, r5
    380a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __log_backends_end - __log_backends_start;
    380e:	4c0d      	ldr	r4, [pc, #52]	; (3844 <log_process+0xa0>)
    3810:	4e0d      	ldr	r6, [pc, #52]	; (3848 <log_process+0xa4>)
    3812:	1b36      	subs	r6, r6, r4
    3814:	1136      	asrs	r6, r6, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
    3816:	46a8      	mov	r8, r5
    3818:	45b0      	cmp	r8, r6
    381a:	dae6      	bge.n	37ea <log_process+0x46>
	return backend->cb->active;
    381c:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    381e:	795b      	ldrb	r3, [r3, #5]
    3820:	b123      	cbz	r3, 382c <log_process+0x88>
	backend->api->put(backend, msg);
    3822:	6823      	ldr	r3, [r4, #0]
    3824:	4639      	mov	r1, r7
    3826:	681b      	ldr	r3, [r3, #0]
    3828:	4620      	mov	r0, r4
    382a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    382c:	f108 0801 	add.w	r8, r8, #1
    3830:	3410      	adds	r4, #16
    3832:	e7f1      	b.n	3818 <log_process+0x74>
    3834:	200022a6 	.word	0x200022a6
    3838:	20000684 	.word	0x20000684
    383c:	20000678 	.word	0x20000678
    3840:	2000067c 	.word	0x2000067c
    3844:	000259b0 	.word	0x000259b0
    3848:	000259d0 	.word	0x000259d0

0000384c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    384c:	4b19      	ldr	r3, [pc, #100]	; (38b4 <msg_finalize+0x68>)
{
    384e:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    3850:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    3852:	8141      	strh	r1, [r0, #10]
{
    3854:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    3856:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3858:	4c17      	ldr	r4, [pc, #92]	; (38b8 <msg_finalize+0x6c>)
    385a:	60e8      	str	r0, [r5, #12]
    385c:	f3bf 8f5b 	dmb	ish
    3860:	e854 3f00 	ldrex	r3, [r4]
    3864:	3301      	adds	r3, #1
    3866:	e844 3200 	strex	r2, r3, [r4]
    386a:	2a00      	cmp	r2, #0
    386c:	d1f8      	bne.n	3860 <msg_finalize+0x14>
    386e:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    3872:	f04f 0320 	mov.w	r3, #32
    3876:	f3ef 8611 	mrs	r6, BASEPRI
    387a:	f383 8811 	msr	BASEPRI, r3
	log_list_add_tail(&list, msg);
    387e:	480f      	ldr	r0, [pc, #60]	; (38bc <msg_finalize+0x70>)
    3880:	4629      	mov	r1, r5
    3882:	f01d f9a9 	bl	20bd8 <log_list_add_tail>
	__asm__ volatile(
    3886:	f386 8811 	msr	BASEPRI, r6
    388a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    388e:	4b0c      	ldr	r3, [pc, #48]	; (38c0 <msg_finalize+0x74>)
    3890:	781b      	ldrb	r3, [r3, #0]
    3892:	b123      	cbz	r3, 389e <msg_finalize+0x52>
		(void)log_process(false);
    3894:	2000      	movs	r0, #0
}
    3896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)log_process(false);
    389a:	f7ff bf83 	b.w	37a4 <log_process>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    389e:	6823      	ldr	r3, [r4, #0]
    38a0:	2b0a      	cmp	r3, #10
    38a2:	d106      	bne.n	38b2 <msg_finalize+0x66>
		    (proc_tid != NULL)) {
    38a4:	4b07      	ldr	r3, [pc, #28]	; (38c4 <msg_finalize+0x78>)
    38a6:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    38a8:	b118      	cbz	r0, 38b2 <msg_finalize+0x66>
}
    38aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    38ae:	f01b b8ef 	b.w	1ea90 <z_impl_k_wakeup>
    38b2:	bd70      	pop	{r4, r5, r6, pc}
    38b4:	20006d90 	.word	0x20006d90
    38b8:	20000678 	.word	0x20000678
    38bc:	20000684 	.word	0x20000684
    38c0:	200022a7 	.word	0x200022a7
    38c4:	20000714 	.word	0x20000714

000038c8 <log_dropped>:
    38c8:	4b06      	ldr	r3, [pc, #24]	; (38e4 <log_dropped+0x1c>)
    38ca:	f3bf 8f5b 	dmb	ish
    38ce:	e853 2f00 	ldrex	r2, [r3]
    38d2:	3201      	adds	r2, #1
    38d4:	e843 2100 	strex	r1, r2, [r3]
    38d8:	2900      	cmp	r1, #0
    38da:	d1f8      	bne.n	38ce <log_dropped+0x6>
    38dc:	f3bf 8f5b 	dmb	ish
}
    38e0:	4770      	bx	lr
    38e2:	bf00      	nop
    38e4:	2000067c 	.word	0x2000067c

000038e8 <log_source_name_get>:
    38e8:	4a04      	ldr	r2, [pc, #16]	; (38fc <log_source_name_get+0x14>)
    38ea:	4b05      	ldr	r3, [pc, #20]	; (3900 <log_source_name_get+0x18>)
    38ec:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    38ee:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    38f2:	bf34      	ite	cc
    38f4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    38f8:	2000      	movcs	r0, #0
}
    38fa:	4770      	bx	lr
    38fc:	00025880 	.word	0x00025880
    3900:	000259b0 	.word	0x000259b0

00003904 <log_backend_enable>:
	id += backend - log_backend_get(0);
    3904:	4b06      	ldr	r3, [pc, #24]	; (3920 <log_backend_enable+0x1c>)
	log_backend_id_set(backend, id);
    3906:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    3908:	1ac3      	subs	r3, r0, r3
    390a:	111b      	asrs	r3, r3, #4
    390c:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
    390e:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    3910:	6842      	ldr	r2, [r0, #4]
	backend->cb->active = true;
    3912:	2301      	movs	r3, #1
	backend->cb->ctx = ctx;
    3914:	6011      	str	r1, [r2, #0]
	backend->cb->active = true;
    3916:	7153      	strb	r3, [r2, #5]
	backend_attached = true;
    3918:	4a02      	ldr	r2, [pc, #8]	; (3924 <log_backend_enable+0x20>)
    391a:	7013      	strb	r3, [r2, #0]
}
    391c:	4770      	bx	lr
    391e:	bf00      	nop
    3920:	000259b0 	.word	0x000259b0
    3924:	200022a6 	.word	0x200022a6

00003928 <log_init>:
{
    3928:	b570      	push	{r4, r5, r6, lr}
    392a:	4b11      	ldr	r3, [pc, #68]	; (3970 <log_init+0x48>)
    392c:	f3bf 8f5b 	dmb	ish
    3930:	e853 5f00 	ldrex	r5, [r3]
    3934:	1c6a      	adds	r2, r5, #1
    3936:	e843 2100 	strex	r1, r2, [r3]
    393a:	2900      	cmp	r1, #0
    393c:	d1f8      	bne.n	3930 <log_init+0x8>
    393e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3942:	b92d      	cbnz	r5, 3950 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    3944:	4c0b      	ldr	r4, [pc, #44]	; (3974 <log_init+0x4c>)
    3946:	4e0c      	ldr	r6, [pc, #48]	; (3978 <log_init+0x50>)
    3948:	1b36      	subs	r6, r6, r4
    394a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    394c:	42b5      	cmp	r5, r6
    394e:	db00      	blt.n	3952 <log_init+0x2a>
}
    3950:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3952:	7b23      	ldrb	r3, [r4, #12]
    3954:	b143      	cbz	r3, 3968 <log_init+0x40>
			if (backend->api->init != NULL) {
    3956:	6823      	ldr	r3, [r4, #0]
    3958:	695b      	ldr	r3, [r3, #20]
    395a:	b103      	cbz	r3, 395e <log_init+0x36>
				backend->api->init();
    395c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    395e:	2204      	movs	r2, #4
    3960:	2100      	movs	r1, #0
    3962:	4620      	mov	r0, r4
    3964:	f7ff ffce 	bl	3904 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3968:	3501      	adds	r5, #1
    396a:	3410      	adds	r4, #16
    396c:	e7ee      	b.n	394c <log_init+0x24>
    396e:	bf00      	nop
    3970:	20000680 	.word	0x20000680
    3974:	000259b0 	.word	0x000259b0
    3978:	000259d0 	.word	0x000259d0

0000397c <log_panic>:
{
    397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    397e:	4f0e      	ldr	r7, [pc, #56]	; (39b8 <log_panic+0x3c>)
    3980:	783d      	ldrb	r5, [r7, #0]
    3982:	b975      	cbnz	r5, 39a2 <log_panic+0x26>
    3984:	4c0d      	ldr	r4, [pc, #52]	; (39bc <log_panic+0x40>)
    3986:	4e0e      	ldr	r6, [pc, #56]	; (39c0 <log_panic+0x44>)
	log_init();
    3988:	f7ff ffce 	bl	3928 <log_init>
    398c:	1b36      	subs	r6, r6, r4
    398e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3990:	42b5      	cmp	r5, r6
    3992:	db07      	blt.n	39a4 <log_panic+0x28>
		while (log_process(false) == true) {
    3994:	2000      	movs	r0, #0
    3996:	f7ff ff05 	bl	37a4 <log_process>
    399a:	2800      	cmp	r0, #0
    399c:	d1fa      	bne.n	3994 <log_panic+0x18>
	panic_mode = true;
    399e:	2301      	movs	r3, #1
    39a0:	703b      	strb	r3, [r7, #0]
}
    39a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    39a4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    39a6:	795b      	ldrb	r3, [r3, #5]
    39a8:	b11b      	cbz	r3, 39b2 <log_panic+0x36>
	backend->api->panic(backend);
    39aa:	6823      	ldr	r3, [r4, #0]
    39ac:	4620      	mov	r0, r4
    39ae:	691b      	ldr	r3, [r3, #16]
    39b0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    39b2:	3501      	adds	r5, #1
    39b4:	3410      	adds	r4, #16
    39b6:	e7eb      	b.n	3990 <log_panic+0x14>
    39b8:	200022a7 	.word	0x200022a7
    39bc:	000259b0 	.word	0x000259b0
    39c0:	000259d0 	.word	0x000259d0

000039c4 <log_process_thread_func>:
{
    39c4:	b508      	push	{r3, lr}
	log_init();
    39c6:	f7ff ffaf 	bl	3928 <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    39ca:	f01b f883 	bl	1ead4 <z_impl_k_current_get>
	proc_tid = process_tid;
    39ce:	4a09      	ldr	r2, [pc, #36]	; (39f4 <log_process_thread_func+0x30>)
    39d0:	6010      	str	r0, [r2, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    39d2:	b128      	cbz	r0, 39e0 <log_process_thread_func+0x1c>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    39d4:	4b08      	ldr	r3, [pc, #32]	; (39f8 <log_process_thread_func+0x34>)
	    process_tid &&
    39d6:	681b      	ldr	r3, [r3, #0]
    39d8:	2b09      	cmp	r3, #9
    39da:	dd01      	ble.n	39e0 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    39dc:	f01b f858 	bl	1ea90 <z_impl_k_wakeup>
		if (log_process(false) == false) {
    39e0:	2000      	movs	r0, #0
    39e2:	f7ff fedf 	bl	37a4 <log_process>
    39e6:	2800      	cmp	r0, #0
    39e8:	d1fa      	bne.n	39e0 <log_process_thread_func+0x1c>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    39ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    39ee:	f01b f80b 	bl	1ea08 <z_impl_k_sleep>
    39f2:	e7f5      	b.n	39e0 <log_process_thread_func+0x1c>
    39f4:	20000714 	.word	0x20000714
    39f8:	20000678 	.word	0x20000678

000039fc <log_strdup>:
{
    39fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    39fe:	4605      	mov	r5, r0
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    3a00:	2200      	movs	r2, #0
    3a02:	a901      	add	r1, sp, #4
    3a04:	4810      	ldr	r0, [pc, #64]	; (3a48 <log_strdup+0x4c>)
    3a06:	f01a fbc7 	bl	1e198 <k_mem_slab_alloc>
	if (err != 0) {
    3a0a:	4604      	mov	r4, r0
    3a0c:	b9d0      	cbnz	r0, 3a44 <log_strdup+0x48>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3a0e:	2201      	movs	r2, #1
    3a10:	9b01      	ldr	r3, [sp, #4]
    3a12:	f3bf 8f5b 	dmb	ish
    3a16:	e853 1f00 	ldrex	r1, [r3]
    3a1a:	e843 2000 	strex	r0, r2, [r3]
    3a1e:	2800      	cmp	r0, #0
    3a20:	d1f9      	bne.n	3a16 <log_strdup+0x1a>
    3a22:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    3a26:	9801      	ldr	r0, [sp, #4]
    3a28:	221f      	movs	r2, #31
    3a2a:	4629      	mov	r1, r5
    3a2c:	3004      	adds	r0, #4
    3a2e:	f01e f9cf 	bl	21dd0 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    3a32:	9801      	ldr	r0, [sp, #4]
    3a34:	237e      	movs	r3, #126	; 0x7e
    3a36:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    3a3a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	return dup->buf;
    3a3e:	3004      	adds	r0, #4
}
    3a40:	b003      	add	sp, #12
    3a42:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    3a44:	4801      	ldr	r0, [pc, #4]	; (3a4c <log_strdup+0x50>)
    3a46:	e7fb      	b.n	3a40 <log_strdup+0x44>
    3a48:	2000068c 	.word	0x2000068c
    3a4c:	000265c8 	.word	0x000265c8

00003a50 <log_is_strdup>:
	return ((char *)buf >= pool_first->buf) &&
    3a50:	4b05      	ldr	r3, [pc, #20]	; (3a68 <log_is_strdup+0x18>)
    3a52:	4298      	cmp	r0, r3
    3a54:	d305      	bcc.n	3a62 <log_is_strdup+0x12>
    3a56:	3378      	adds	r3, #120	; 0x78
    3a58:	4298      	cmp	r0, r3
    3a5a:	bf8c      	ite	hi
    3a5c:	2000      	movhi	r0, #0
    3a5e:	2001      	movls	r0, #1
    3a60:	4770      	bx	lr
    3a62:	2000      	movs	r0, #0
}
    3a64:	4770      	bx	lr
    3a66:	bf00      	nop
    3a68:	20004e5c 	.word	0x20004e5c

00003a6c <log_free>:
{
    3a6c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    3a6e:	3804      	subs	r0, #4
    3a70:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3a72:	f3bf 8f5b 	dmb	ish
    3a76:	e850 3f00 	ldrex	r3, [r0]
    3a7a:	1e5a      	subs	r2, r3, #1
    3a7c:	e840 2100 	strex	r1, r2, [r0]
    3a80:	2900      	cmp	r1, #0
    3a82:	d1f8      	bne.n	3a76 <log_free+0xa>
    3a84:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    3a88:	2b01      	cmp	r3, #1
    3a8a:	d103      	bne.n	3a94 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    3a8c:	a901      	add	r1, sp, #4
    3a8e:	4803      	ldr	r0, [pc, #12]	; (3a9c <log_free+0x30>)
    3a90:	f01a fbac 	bl	1e1ec <k_mem_slab_free>
}
    3a94:	b003      	add	sp, #12
    3a96:	f85d fb04 	ldr.w	pc, [sp], #4
    3a9a:	bf00      	nop
    3a9c:	2000068c 	.word	0x2000068c

00003aa0 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(u32_t))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    3aa0:	2320      	movs	r3, #32
    3aa2:	461a      	mov	r2, r3
    3aa4:	4901      	ldr	r1, [pc, #4]	; (3aac <log_msg_pool_init+0xc>)
    3aa6:	4802      	ldr	r0, [pc, #8]	; (3ab0 <log_msg_pool_init+0x10>)
    3aa8:	f021 ba23 	b.w	24ef2 <k_mem_slab_init>
    3aac:	20004ef8 	.word	0x20004ef8
    3ab0:	20000718 	.word	0x20000718

00003ab4 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    3ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    3ab6:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    3ab8:	4d09      	ldr	r5, [pc, #36]	; (3ae0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    3aba:	9301      	str	r3, [sp, #4]
			more = log_process(true);
    3abc:	2001      	movs	r0, #1
    3abe:	f7ff fe71 	bl	37a4 <log_process>
    3ac2:	4604      	mov	r4, r0
			log_dropped();
    3ac4:	f7ff ff00 	bl	38c8 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    3ac8:	2200      	movs	r2, #0
    3aca:	a901      	add	r1, sp, #4
    3acc:	4628      	mov	r0, r5
    3ace:	f01a fb63 	bl	1e198 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    3ad2:	b108      	cbz	r0, 3ad8 <log_msg_no_space_handle+0x24>
    3ad4:	2c00      	cmp	r4, #0
    3ad6:	d1f1      	bne.n	3abc <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    3ad8:	9801      	ldr	r0, [sp, #4]
    3ada:	b003      	add	sp, #12
    3adc:	bd30      	pop	{r4, r5, pc}
    3ade:	bf00      	nop
    3ae0:	20000718 	.word	0x20000718

00003ae4 <log_msg_chunk_alloc>:
{
    3ae4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    3ae6:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    3ae8:	a901      	add	r1, sp, #4
    3aea:	4806      	ldr	r0, [pc, #24]	; (3b04 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
    3aec:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    3aee:	f01a fb53 	bl	1e198 <k_mem_slab_alloc>
	if (err != 0) {
    3af2:	b110      	cbz	r0, 3afa <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
    3af4:	f7ff ffde 	bl	3ab4 <log_msg_no_space_handle>
    3af8:	9001      	str	r0, [sp, #4]
}
    3afa:	9801      	ldr	r0, [sp, #4]
    3afc:	b003      	add	sp, #12
    3afe:	f85d fb04 	ldr.w	pc, [sp], #4
    3b02:	bf00      	nop
    3b04:	20000718 	.word	0x20000718

00003b08 <msg_free>:
{
    3b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3b0a:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
    3b0c:	7a45      	ldrb	r5, [r0, #9]
{
    3b0e:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    3b10:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
    3b14:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    3b18:	d00e      	beq.n	3b38 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
    3b1a:	9b01      	ldr	r3, [sp, #4]
    3b1c:	7a1a      	ldrb	r2, [r3, #8]
    3b1e:	0792      	lsls	r2, r2, #30
    3b20:	d504      	bpl.n	3b2c <msg_free+0x24>
		cont_free(msg->payload.ext.next);
    3b22:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3b24:	4c10      	ldr	r4, [pc, #64]	; (3b68 <msg_free+0x60>)
    3b26:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    3b28:	9b03      	ldr	r3, [sp, #12]
    3b2a:	b9b3      	cbnz	r3, 3b5a <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    3b2c:	a901      	add	r1, sp, #4
    3b2e:	480e      	ldr	r0, [pc, #56]	; (3b68 <msg_free+0x60>)
    3b30:	f01a fb5c 	bl	1e1ec <k_mem_slab_free>
}
    3b34:	b004      	add	sp, #16
    3b36:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
    3b38:	2d00      	cmp	r5, #0
    3b3a:	d0ee      	beq.n	3b1a <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
    3b3c:	42a5      	cmp	r5, r4
    3b3e:	9801      	ldr	r0, [sp, #4]
    3b40:	d9eb      	bls.n	3b1a <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
    3b42:	4621      	mov	r1, r4
    3b44:	f01d f92a 	bl	20d9c <log_msg_arg_get>
    3b48:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    3b4a:	f7ff ff81 	bl	3a50 <log_is_strdup>
    3b4e:	b110      	cbz	r0, 3b56 <msg_free+0x4e>
				log_free(buf);
    3b50:	4630      	mov	r0, r6
    3b52:	f7ff ff8b 	bl	3a6c <log_free>
		for (i = 0; i < nargs; i++) {
    3b56:	3401      	adds	r4, #1
    3b58:	e7f0      	b.n	3b3c <msg_free+0x34>
		next = cont->next;
    3b5a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3b5c:	a903      	add	r1, sp, #12
    3b5e:	4620      	mov	r0, r4
    3b60:	f01a fb44 	bl	1e1ec <k_mem_slab_free>
		cont = next;
    3b64:	9503      	str	r5, [sp, #12]
    3b66:	e7df      	b.n	3b28 <msg_free+0x20>
    3b68:	20000718 	.word	0x20000718

00003b6c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    3b6c:	b40e      	push	{r1, r2, r3}
    3b6e:	b503      	push	{r0, r1, lr}
    3b70:	ab03      	add	r3, sp, #12
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = _prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	_vprintk(out_func, (void *)log_output, fmt, args);
    3b72:	4601      	mov	r1, r0
{
    3b74:	f853 2b04 	ldr.w	r2, [r3], #4
	_vprintk(out_func, (void *)log_output, fmt, args);
    3b78:	4804      	ldr	r0, [pc, #16]	; (3b8c <print_formatted+0x20>)
	va_start(args, fmt);
    3b7a:	9301      	str	r3, [sp, #4]
	_vprintk(out_func, (void *)log_output, fmt, args);
    3b7c:	f01b fdaa 	bl	1f6d4 <_vprintk>
#endif
	va_end(args);

	return length;
}
    3b80:	2000      	movs	r0, #0
    3b82:	b002      	add	sp, #8
    3b84:	f85d eb04 	ldr.w	lr, [sp], #4
    3b88:	b003      	add	sp, #12
    3b8a:	4770      	bx	lr
    3b8c:	0002124b 	.word	0x0002124b

00003b90 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
    3b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b94:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    3b96:	f011 0402 	ands.w	r4, r1, #2
{
    3b9a:	4606      	mov	r6, r0
    3b9c:	4690      	mov	r8, r2
    3b9e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3ba2:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3ba6:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    3baa:	d007      	beq.n	3bbc <prefix_print+0x2c>
	if (!format) {
    3bac:	f011 0f44 	tst.w	r1, #68	; 0x44
    3bb0:	d134      	bne.n	3c1c <prefix_print+0x8c>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    3bb2:	461a      	mov	r2, r3
    3bb4:	4930      	ldr	r1, [pc, #192]	; (3c78 <prefix_print+0xe8>)
    3bb6:	f7ff ffd9 	bl	3b6c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    3bba:	4604      	mov	r4, r0
	if (color) {
    3bbc:	f1b9 0f00 	cmp.w	r9, #0
    3bc0:	d00a      	beq.n	3bd8 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
    3bc2:	4b2e      	ldr	r3, [pc, #184]	; (3c7c <prefix_print+0xec>)
		print_formatted(log_output, "%s", color);
    3bc4:	492e      	ldr	r1, [pc, #184]	; (3c80 <prefix_print+0xf0>)
		const char *color = start && (colors[level] != NULL) ?
    3bc6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
    3bca:	4b2e      	ldr	r3, [pc, #184]	; (3c84 <prefix_print+0xf4>)
    3bcc:	4630      	mov	r0, r6
    3bce:	2a00      	cmp	r2, #0
    3bd0:	bf08      	it	eq
    3bd2:	461a      	moveq	r2, r3
    3bd4:	f7ff ffca 	bl	3b6c <print_formatted>
	if (level_on) {
    3bd8:	b13d      	cbz	r5, 3bea <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    3bda:	4b2b      	ldr	r3, [pc, #172]	; (3c88 <prefix_print+0xf8>)
    3bdc:	492b      	ldr	r1, [pc, #172]	; (3c8c <prefix_print+0xfc>)
    3bde:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    3be2:	4630      	mov	r0, r6
    3be4:	f7ff ffc2 	bl	3b6c <print_formatted>
    3be8:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    3bea:	f1b8 0f00 	cmp.w	r8, #0
    3bee:	d041      	beq.n	3c74 <prefix_print+0xe4>
    3bf0:	4b27      	ldr	r3, [pc, #156]	; (3c90 <prefix_print+0x100>)
    3bf2:	4a28      	ldr	r2, [pc, #160]	; (3c94 <prefix_print+0x104>)
    3bf4:	2f04      	cmp	r7, #4
    3bf6:	bf14      	ite	ne
    3bf8:	461f      	movne	r7, r3
    3bfa:	4617      	moveq	r7, r2
    3bfc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    3c00:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    3c04:	f7ff fe70 	bl	38e8 <log_source_name_get>
    3c08:	4639      	mov	r1, r7
    3c0a:	4602      	mov	r2, r0
    3c0c:	4630      	mov	r0, r6
    3c0e:	f7ff ffad 	bl	3b6c <print_formatted>
    3c12:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
    3c14:	4420      	add	r0, r4
    3c16:	b005      	add	sp, #20
    3c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0) {
    3c1c:	4a1e      	ldr	r2, [pc, #120]	; (3c98 <prefix_print+0x108>)
    3c1e:	6814      	ldr	r4, [r2, #0]
    3c20:	b334      	cbz	r4, 3c70 <prefix_print+0xe0>
		timestamp /= timestamp_div;
    3c22:	4a1e      	ldr	r2, [pc, #120]	; (3c9c <prefix_print+0x10c>)
    3c24:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    3c28:	6811      	ldr	r1, [r2, #0]
    3c2a:	fbb3 f3f1 	udiv	r3, r3, r1
		ms = (remainder * 1000) / freq;
    3c2e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
    3c32:	fbb3 f1f4 	udiv	r1, r3, r4
		seconds -= hours * 3600;
    3c36:	fbb1 f2fe 	udiv	r2, r1, lr
    3c3a:	fb0e 1e12 	mls	lr, lr, r2, r1
		remainder = timestamp % freq;
    3c3e:	fb04 3111 	mls	r1, r4, r1, r3
		ms = (remainder * 1000) / freq;
    3c42:	fb0c f101 	mul.w	r1, ip, r1
		mins = seconds / 60;
    3c46:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    3c4a:	fbb1 fbf4 	udiv	fp, r1, r4
    3c4e:	fb04 111b 	mls	r1, r4, fp, r1
    3c52:	fb0c f101 	mul.w	r1, ip, r1
		mins = seconds / 60;
    3c56:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (1000 * remainder - (ms * freq))) / freq;
    3c5a:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(log_output,
    3c5e:	fb0a e113 	mls	r1, sl, r3, lr
    3c62:	9100      	str	r1, [sp, #0]
    3c64:	e9cd b401 	strd	fp, r4, [sp, #4]
    3c68:	490d      	ldr	r1, [pc, #52]	; (3ca0 <prefix_print+0x110>)
    3c6a:	f7ff ff7f 	bl	3b6c <print_formatted>
    3c6e:	e7a4      	b.n	3bba <prefix_print+0x2a>
		length = 0;
    3c70:	4620      	mov	r0, r4
    3c72:	e7a2      	b.n	3bba <prefix_print+0x2a>
	total += print_formatted(log_output,
    3c74:	4f06      	ldr	r7, [pc, #24]	; (3c90 <prefix_print+0x100>)
    3c76:	e7c1      	b.n	3bfc <prefix_print+0x6c>
    3c78:	0002662c 	.word	0x0002662c
    3c7c:	00025c2c 	.word	0x00025c2c
    3c80:	00027ad9 	.word	0x00027ad9
    3c84:	0002661e 	.word	0x0002661e
    3c88:	00025c40 	.word	0x00025c40
    3c8c:	00026651 	.word	0x00026651
    3c90:	00026623 	.word	0x00026623
    3c94:	00026628 	.word	0x00026628
    3c98:	20000734 	.word	0x20000734
    3c9c:	20000738 	.word	0x20000738
    3ca0:	00026635 	.word	0x00026635

00003ca4 <hexdump_line_print>:
{
    3ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ca8:	4698      	mov	r8, r3
    3caa:	9b08      	ldr	r3, [sp, #32]
    3cac:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0) {
    3cae:	06da      	lsls	r2, r3, #27
{
    3cb0:	4604      	mov	r4, r0
    3cb2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0) {
    3cb4:	d405      	bmi.n	3cc2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0) {
    3cb6:	069b      	lsls	r3, r3, #26
		print_formatted(ctx, "\n");
    3cb8:	bf4c      	ite	mi
    3cba:	4921      	ldrmi	r1, [pc, #132]	; (3d40 <hexdump_line_print+0x9c>)
		print_formatted(ctx, "\r\n");
    3cbc:	4921      	ldrpl	r1, [pc, #132]	; (3d44 <hexdump_line_print+0xa0>)
    3cbe:	f7ff ff55 	bl	3b6c <print_formatted>
		print_formatted(log_output, " ");
    3cc2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3d4c <hexdump_line_print+0xa8>
{
    3cc6:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
    3cc8:	4545      	cmp	r5, r8
    3cca:	db28      	blt.n	3d1e <hexdump_line_print+0x7a>
			print_formatted(log_output, "   ");
    3ccc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3d50 <hexdump_line_print+0xac>
			print_formatted(log_output, "%02x ", data[i]);
    3cd0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 3d54 <hexdump_line_print+0xb0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3cd4:	2500      	movs	r5, #0
		if (i < length) {
    3cd6:	42af      	cmp	r7, r5
    3cd8:	d927      	bls.n	3d2a <hexdump_line_print+0x86>
			print_formatted(log_output, "%02x ", data[i]);
    3cda:	5d72      	ldrb	r2, [r6, r5]
    3cdc:	4649      	mov	r1, r9
    3cde:	4620      	mov	r0, r4
    3ce0:	f7ff ff44 	bl	3b6c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3ce4:	3501      	adds	r5, #1
    3ce6:	2d08      	cmp	r5, #8
    3ce8:	d1f5      	bne.n	3cd6 <hexdump_line_print+0x32>
	print_formatted(log_output, "|");
    3cea:	4917      	ldr	r1, [pc, #92]	; (3d48 <hexdump_line_print+0xa4>)
			print_formatted(log_output, " ");
    3cec:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3d4c <hexdump_line_print+0xa8>
			print_formatted(log_output, "%c",
    3cf0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 3d58 <hexdump_line_print+0xb4>
	print_formatted(log_output, "|");
    3cf4:	4620      	mov	r0, r4
    3cf6:	f7ff ff39 	bl	3b6c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3cfa:	2500      	movs	r5, #0
		if (i < length) {
    3cfc:	42af      	cmp	r7, r5
    3cfe:	d919      	bls.n	3d34 <hexdump_line_print+0x90>
			      isprint((int)c) ? c : '.');
    3d00:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    3d02:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    3d06:	2b5f      	cmp	r3, #95	; 0x5f
    3d08:	bf28      	it	cs
    3d0a:	222e      	movcs	r2, #46	; 0x2e
    3d0c:	4649      	mov	r1, r9
    3d0e:	4620      	mov	r0, r4
    3d10:	f7ff ff2c 	bl	3b6c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3d14:	3501      	adds	r5, #1
    3d16:	2d08      	cmp	r5, #8
    3d18:	d1f0      	bne.n	3cfc <hexdump_line_print+0x58>
}
    3d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		print_formatted(log_output, " ");
    3d1e:	4649      	mov	r1, r9
    3d20:	4620      	mov	r0, r4
    3d22:	f7ff ff23 	bl	3b6c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3d26:	3501      	adds	r5, #1
    3d28:	e7ce      	b.n	3cc8 <hexdump_line_print+0x24>
			print_formatted(log_output, "   ");
    3d2a:	4641      	mov	r1, r8
    3d2c:	4620      	mov	r0, r4
    3d2e:	f7ff ff1d 	bl	3b6c <print_formatted>
    3d32:	e7d7      	b.n	3ce4 <hexdump_line_print+0x40>
			print_formatted(log_output, " ");
    3d34:	4641      	mov	r1, r8
    3d36:	4620      	mov	r0, r4
    3d38:	f7ff ff18 	bl	3b6c <print_formatted>
    3d3c:	e7ea      	b.n	3d14 <hexdump_line_print+0x70>
    3d3e:	bf00      	nop
    3d40:	000265e3 	.word	0x000265e3
    3d44:	000265e2 	.word	0x000265e2
    3d48:	000265ef 	.word	0x000265ef
    3d4c:	000265ed 	.word	0x000265ed
    3d50:	000265eb 	.word	0x000265eb
    3d54:	000265e5 	.word	0x000265e5
    3d58:	000265f1 	.word	0x000265f1

00003d5c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
    3d5c:	b538      	push	{r3, r4, r5, lr}
    3d5e:	460c      	mov	r4, r1
	if (color) {
    3d60:	07e1      	lsls	r1, r4, #31
{
    3d62:	4605      	mov	r5, r0
	if (color) {
    3d64:	d503      	bpl.n	3d6e <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
    3d66:	4a08      	ldr	r2, [pc, #32]	; (3d88 <postfix_print+0x2c>)
    3d68:	4908      	ldr	r1, [pc, #32]	; (3d8c <postfix_print+0x30>)
    3d6a:	f7ff feff 	bl	3b6c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0) {
    3d6e:	06e2      	lsls	r2, r4, #27
    3d70:	d408      	bmi.n	3d84 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0) {
    3d72:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    3d74:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    3d76:	bf4c      	ite	mi
    3d78:	4905      	ldrmi	r1, [pc, #20]	; (3d90 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    3d7a:	4906      	ldrpl	r1, [pc, #24]	; (3d94 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    3d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    3d80:	f7ff bef4 	b.w	3b6c <print_formatted>
}
    3d84:	bd38      	pop	{r3, r4, r5, pc}
    3d86:	bf00      	nop
    3d88:	0002661e 	.word	0x0002661e
    3d8c:	00027ad9 	.word	0x00027ad9
    3d90:	000265e3 	.word	0x000265e3
    3d94:	000265e2 	.word	0x000265e2

00003d98 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    3d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    3d9c:	7a8b      	ldrb	r3, [r1, #10]
	u16_t source_id = (u16_t)log_msg_source_id_get(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	int prefix_offset;

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    3d9e:	f013 0407 	ands.w	r4, r3, #7
{
    3da2:	4617      	mov	r7, r2
    3da4:	b088      	sub	sp, #32
    3da6:	4605      	mov	r5, r0
    3da8:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3daa:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    3dac:	d01c      	beq.n	3de8 <log_output_msg_process+0x50>
	return msg->hdr.ids.source_id;
    3dae:	8949      	ldrh	r1, [r1, #10]
    3db0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    3db4:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3db6:	43d2      	mvns	r2, r2
    3db8:	9102      	str	r1, [sp, #8]
    3dba:	e9cd 4300 	strd	r4, r3, [sp]
    3dbe:	f002 0201 	and.w	r2, r2, #1
    3dc2:	68f3      	ldr	r3, [r6, #12]
    3dc4:	4639      	mov	r1, r7
    3dc6:	f7ff fee3 	bl	3b90 <prefix_print>
    3dca:	4681      	mov	r9, r0
    3dcc:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    3dce:	07da      	lsls	r2, r3, #31
    3dd0:	d40c      	bmi.n	3dec <log_output_msg_process+0x54>
		std_print(msg, log_output);
    3dd2:	4629      	mov	r1, r5
    3dd4:	4630      	mov	r0, r6
    3dd6:	f01d f8ce 	bl	20f76 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    3dda:	b34c      	cbz	r4, 3e30 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    3ddc:	4622      	mov	r2, r4
    3dde:	4639      	mov	r1, r7
    3de0:	4628      	mov	r0, r5
    3de2:	f7ff ffbb 	bl	3d5c <postfix_print>
    3de6:	e023      	b.n	3e30 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    3de8:	46a1      	mov	r9, r4
    3dea:	e7ef      	b.n	3dcc <log_output_msg_process+0x34>
	} else if (raw_string) {
    3dec:	bb34      	cbnz	r4, 3e3c <log_output_msg_process+0xa4>
	size_t offset = 0;
    3dee:	4627      	mov	r7, r4
		length = log_output->size;
    3df0:	68eb      	ldr	r3, [r5, #12]
    3df2:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    3df4:	aa06      	add	r2, sp, #24
    3df6:	463b      	mov	r3, r7
    3df8:	68a9      	ldr	r1, [r5, #8]
    3dfa:	4630      	mov	r0, r6
    3dfc:	f01d f8a7 	bl	20f4e <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    3e00:	9a06      	ldr	r2, [sp, #24]
    3e02:	686b      	ldr	r3, [r5, #4]
    3e04:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    3e06:	b13a      	cbz	r2, 3e18 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    3e08:	68ab      	ldr	r3, [r5, #8]
    3e0a:	4413      	add	r3, r2
    3e0c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    3e10:	f1a4 030a 	sub.w	r3, r4, #10
    3e14:	425c      	negs	r4, r3
    3e16:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    3e18:	4628      	mov	r0, r5
    3e1a:	f01d fa09 	bl	21230 <log_output_flush>
		offset += length;
    3e1e:	9b06      	ldr	r3, [sp, #24]
    3e20:	441f      	add	r7, r3
	} while (length > 0);
    3e22:	2b00      	cmp	r3, #0
    3e24:	d1e4      	bne.n	3df0 <log_output_msg_process+0x58>
	if (eol) {
    3e26:	b11c      	cbz	r4, 3e30 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    3e28:	4914      	ldr	r1, [pc, #80]	; (3e7c <log_output_msg_process+0xe4>)
    3e2a:	4628      	mov	r0, r5
    3e2c:	f7ff fe9e 	bl	3b6c <print_formatted>
	}

	log_output_flush(log_output);
    3e30:	4628      	mov	r0, r5
    3e32:	f01d f9fd 	bl	21230 <log_output_flush>
}
    3e36:	b008      	add	sp, #32
    3e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    3e3c:	4630      	mov	r0, r6
    3e3e:	f01c ffdd 	bl	20dfc <log_msg_str_get>
    3e42:	490f      	ldr	r1, [pc, #60]	; (3e80 <log_output_msg_process+0xe8>)
    3e44:	4602      	mov	r2, r0
    3e46:	4628      	mov	r0, r5
    3e48:	f7ff fe90 	bl	3b6c <print_formatted>
	u32_t offset = 0U;
    3e4c:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    3e50:	f04f 0a08 	mov.w	sl, #8
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3e54:	aa05      	add	r2, sp, #20
    3e56:	4643      	mov	r3, r8
    3e58:	a906      	add	r1, sp, #24
    3e5a:	4630      	mov	r0, r6
		length = sizeof(buf);
    3e5c:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3e60:	f01d f875 	bl	20f4e <log_msg_hexdump_data_get>
		if (length) {
    3e64:	9a05      	ldr	r2, [sp, #20]
    3e66:	2a00      	cmp	r2, #0
    3e68:	d0b8      	beq.n	3ddc <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    3e6a:	464b      	mov	r3, r9
    3e6c:	9700      	str	r7, [sp, #0]
    3e6e:	a906      	add	r1, sp, #24
    3e70:	4628      	mov	r0, r5
    3e72:	f7ff ff17 	bl	3ca4 <hexdump_line_print>
			offset += length;
    3e76:	9b05      	ldr	r3, [sp, #20]
    3e78:	4498      	add	r8, r3
    3e7a:	e7eb      	b.n	3e54 <log_output_msg_process+0xbc>
    3e7c:	000265f4 	.word	0x000265f4
    3e80:	00027ad9 	.word	0x00027ad9

00003e84 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    3e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    3e86:	e9d0 4300 	ldrd	r4, r3, [r0]
    3e8a:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    3e8c:	4a0f      	ldr	r2, [pc, #60]	; (3ecc <log_output_dropped_process+0x48>)
    3e8e:	f242 730f 	movw	r3, #9999	; 0x270f
    3e92:	428b      	cmp	r3, r1
    3e94:	bf28      	it	cs
    3e96:	460b      	movcs	r3, r1
    3e98:	4668      	mov	r0, sp
    3e9a:	2105      	movs	r1, #5
    3e9c:	f001 ff1e 	bl	5cdc <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    3ea0:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    3ea2:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    3ea4:	220b      	movs	r2, #11
    3ea6:	4620      	mov	r0, r4
    3ea8:	4909      	ldr	r1, [pc, #36]	; (3ed0 <log_output_dropped_process+0x4c>)
    3eaa:	f01d f857 	bl	20f5c <buffer_write>
	buffer_write(outf, buf, len, dev);
    3eae:	462b      	mov	r3, r5
    3eb0:	4632      	mov	r2, r6
    3eb2:	4669      	mov	r1, sp
    3eb4:	4620      	mov	r0, r4
    3eb6:	f01d f851 	bl	20f5c <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    3eba:	462b      	mov	r3, r5
    3ebc:	221b      	movs	r2, #27
    3ebe:	4905      	ldr	r1, [pc, #20]	; (3ed4 <log_output_dropped_process+0x50>)
    3ec0:	4620      	mov	r0, r4
    3ec2:	f01d f84b 	bl	20f5c <buffer_write>
}
    3ec6:	b002      	add	sp, #8
    3ec8:	bd70      	pop	{r4, r5, r6, pc}
    3eca:	bf00      	nop
    3ecc:	00027a39 	.word	0x00027a39
    3ed0:	00026612 	.word	0x00026612
    3ed4:	000265f6 	.word	0x000265f6

00003ed8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    3ed8:	4a08      	ldr	r2, [pc, #32]	; (3efc <log_output_timestamp_freq_set+0x24>)
{
    3eda:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    3edc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3ede:	4c08      	ldr	r4, [pc, #32]	; (3f00 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    3ee0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    3ee2:	2100      	movs	r1, #0
    3ee4:	42a0      	cmp	r0, r4
    3ee6:	d804      	bhi.n	3ef2 <log_output_timestamp_freq_set+0x1a>
    3ee8:	b101      	cbz	r1, 3eec <log_output_timestamp_freq_set+0x14>
    3eea:	6013      	str	r3, [r2, #0]
		frequency /= 2;
		timestamp_div *= 2;
	}

	freq = frequency;
    3eec:	4b05      	ldr	r3, [pc, #20]	; (3f04 <log_output_timestamp_freq_set+0x2c>)
    3eee:	6018      	str	r0, [r3, #0]
}
    3ef0:	bd10      	pop	{r4, pc}
		frequency /= 2;
    3ef2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2;
    3ef4:	005b      	lsls	r3, r3, #1
    3ef6:	2101      	movs	r1, #1
    3ef8:	e7f4      	b.n	3ee4 <log_output_timestamp_freq_set+0xc>
    3efa:	bf00      	nop
    3efc:	20000738 	.word	0x20000738
    3f00:	000f4240 	.word	0x000f4240
    3f04:	20000734 	.word	0x20000734

00003f08 <log_backend_uart_init>:
	log_msg_put(msg);

}

static void log_backend_uart_init(void)
{
    3f08:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
    3f0a:	4803      	ldr	r0, [pc, #12]	; (3f18 <log_backend_uart_init+0x10>)
    3f0c:	f01a f810 	bl	1df30 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    3f10:	4b02      	ldr	r3, [pc, #8]	; (3f1c <log_backend_uart_init+0x14>)
    3f12:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    3f14:	bd08      	pop	{r3, pc}
    3f16:	bf00      	nop
    3f18:	00026677 	.word	0x00026677
    3f1c:	20000744 	.word	0x20000744

00003f20 <panic>:

static void panic(struct log_backend const *const backend)
{
	log_output_flush(&log_output);
    3f20:	4801      	ldr	r0, [pc, #4]	; (3f28 <panic+0x8>)
    3f22:	f01d b985 	b.w	21230 <log_output_flush>
    3f26:	bf00      	nop
    3f28:	00025c6c 	.word	0x00025c6c

00003f2c <dropped>:

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	ARG_UNUSED(backend);

	log_output_dropped_process(&log_output, cnt);
    3f2c:	4801      	ldr	r0, [pc, #4]	; (3f34 <dropped+0x8>)
    3f2e:	f7ff bfa9 	b.w	3e84 <log_output_dropped_process>
    3f32:	bf00      	nop
    3f34:	00025c6c 	.word	0x00025c6c

00003f38 <put>:
{
    3f38:	b510      	push	{r4, lr}
	log_msg_get(msg);
    3f3a:	4608      	mov	r0, r1
{
    3f3c:	460c      	mov	r4, r1
	log_msg_get(msg);
    3f3e:	f01c ff1d 	bl	20d7c <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    3f42:	4621      	mov	r1, r4
    3f44:	4804      	ldr	r0, [pc, #16]	; (3f58 <put+0x20>)
    3f46:	220f      	movs	r2, #15
    3f48:	f7ff ff26 	bl	3d98 <log_output_msg_process>
	log_msg_put(msg);
    3f4c:	4620      	mov	r0, r4
}
    3f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    3f52:	f01c bf40 	b.w	20dd6 <log_msg_put>
    3f56:	bf00      	nop
    3f58:	00025c6c 	.word	0x00025c6c

00003f5c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3f5c:	4b03      	ldr	r3, [pc, #12]	; (3f6c <log_backend_rtt_init+0x10>)
    3f5e:	2201      	movs	r2, #1
    3f60:	701a      	strb	r2, [r3, #0]
	panic_mode = 0;
    3f62:	4b03      	ldr	r3, [pc, #12]	; (3f70 <log_backend_rtt_init+0x14>)
    3f64:	2200      	movs	r2, #0
    3f66:	601a      	str	r2, [r3, #0]
	line_pos = line_buf;
}
    3f68:	4770      	bx	lr
    3f6a:	bf00      	nop
    3f6c:	200022b9 	.word	0x200022b9
    3f70:	20000764 	.word	0x20000764

00003f74 <panic>:

static void panic(struct log_backend const *const backend)
{
    3f74:	b508      	push	{r3, lr}
	log_output_flush(&log_output);
    3f76:	4803      	ldr	r0, [pc, #12]	; (3f84 <panic+0x10>)
    3f78:	f01d f95a 	bl	21230 <log_output_flush>
	panic_mode = 1;
    3f7c:	4b02      	ldr	r3, [pc, #8]	; (3f88 <panic+0x14>)
    3f7e:	2201      	movs	r2, #1
    3f80:	601a      	str	r2, [r3, #0]
}
    3f82:	bd08      	pop	{r3, pc}
    3f84:	00025c94 	.word	0x00025c94
    3f88:	20000764 	.word	0x20000764

00003f8c <dropped>:

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
	ARG_UNUSED(backend);

	log_output_dropped_process(&log_output, cnt);
    3f8c:	4801      	ldr	r0, [pc, #4]	; (3f94 <dropped+0x8>)
    3f8e:	f7ff bf79 	b.w	3e84 <log_output_dropped_process>
    3f92:	bf00      	nop
    3f94:	00025c94 	.word	0x00025c94

00003f98 <put>:
{
    3f98:	b510      	push	{r4, lr}
	log_msg_get(msg);
    3f9a:	4608      	mov	r0, r1
{
    3f9c:	460c      	mov	r4, r1
	log_msg_get(msg);
    3f9e:	f01c feed 	bl	20d7c <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    3fa2:	4621      	mov	r1, r4
    3fa4:	4804      	ldr	r0, [pc, #16]	; (3fb8 <put+0x20>)
    3fa6:	220f      	movs	r2, #15
    3fa8:	f7ff fef6 	bl	3d98 <log_output_msg_process>
	log_msg_put(msg);
    3fac:	4620      	mov	r0, r4
}
    3fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_msg_put(msg);
    3fb2:	f01c bf10 	b.w	20dd6 <log_msg_put>
    3fb6:	bf00      	nop
    3fb8:	00025c94 	.word	0x00025c94

00003fbc <on_failed_write.part.0>:
	} else if (panic_mode) {
    3fbc:	4b04      	ldr	r3, [pc, #16]	; (3fd0 <on_failed_write.part.0+0x14>)
    3fbe:	681b      	ldr	r3, [r3, #0]
    3fc0:	b11b      	cbz	r3, 3fca <on_failed_write.part.0+0xe>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
    3fc2:	f241 3088 	movw	r0, #5000	; 0x1388
    3fc6:	f021 b9b4 	b.w	25332 <z_impl_k_busy_wait>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    3fca:	2005      	movs	r0, #5
    3fcc:	f01a bd1c 	b.w	1ea08 <z_impl_k_sleep>
    3fd0:	20000764 	.word	0x20000764

00003fd4 <data_out_block_mode>:
{
    3fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (!panic_mode) {
    3fd8:	4f21      	ldr	r7, [pc, #132]	; (4060 <data_out_block_mode+0x8c>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    3fda:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4068 <data_out_block_mode+0x94>
{
    3fde:	4682      	mov	sl, r0
    3fe0:	460e      	mov	r6, r1
	int retry_cnt = RETRY_CNT;
    3fe2:	2404      	movs	r4, #4
    3fe4:	46b8      	mov	r8, r7
		if (!panic_mode) {
    3fe6:	683b      	ldr	r3, [r7, #0]
    3fe8:	b923      	cbnz	r3, 3ff4 <data_out_block_mode+0x20>
    3fea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3fee:	4648      	mov	r0, r9
    3ff0:	f01a f9d2 	bl	1e398 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3ff4:	4632      	mov	r2, r6
    3ff6:	4651      	mov	r1, sl
    3ff8:	2000      	movs	r0, #0
    3ffa:	f7ff facf 	bl	359c <SEGGER_RTT_WriteSkipNoLock>
		if (!panic_mode) {
    3ffe:	f8d8 3000 	ldr.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4002:	4683      	mov	fp, r0
		if (!panic_mode) {
    4004:	b913      	cbnz	r3, 400c <data_out_block_mode+0x38>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    4006:	4648      	mov	r0, r9
    4008:	f01a fa32 	bl	1e470 <z_impl_k_mutex_unlock>
		if (ret) {
    400c:	4d15      	ldr	r5, [pc, #84]	; (4064 <data_out_block_mode+0x90>)
    400e:	f1bb 0f00 	cmp.w	fp, #0
    4012:	d018      	beq.n	4046 <data_out_block_mode+0x72>
	host_present = true;
    4014:	2301      	movs	r3, #1
    4016:	702b      	strb	r3, [r5, #0]
	if (panic_mode) {
    4018:	f8d8 3000 	ldr.w	r3, [r8]
    401c:	b933      	cbnz	r3, 402c <data_out_block_mode+0x58>
}
    401e:	4630      	mov	r0, r6
    4020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    4024:	b95c      	cbnz	r4, 403e <data_out_block_mode+0x6a>
		host_present = false;
    4026:	702c      	strb	r4, [r5, #0]
    4028:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    402c:	2000      	movs	r0, #0
    402e:	f7ff fb31 	bl	3694 <SEGGER_RTT_HasDataUp>
    4032:	2800      	cmp	r0, #0
    4034:	d0f3      	beq.n	401e <data_out_block_mode+0x4a>
    4036:	782b      	ldrb	r3, [r5, #0]
    4038:	2b00      	cmp	r3, #0
    403a:	d1f3      	bne.n	4024 <data_out_block_mode+0x50>
    403c:	e7ef      	b.n	401e <data_out_block_mode+0x4a>
			on_failed_write(retry_cnt--);
    403e:	3c01      	subs	r4, #1
    4040:	f7ff ffbc 	bl	3fbc <on_failed_write.part.0>
    4044:	e7f2      	b.n	402c <data_out_block_mode+0x58>
		} else if (host_present) {
    4046:	782b      	ldrb	r3, [r5, #0]
    4048:	b113      	cbz	r3, 4050 <data_out_block_mode+0x7c>
	if (retry_cnt == 0) {
    404a:	3c01      	subs	r4, #1
    404c:	d104      	bne.n	4058 <data_out_block_mode+0x84>
		host_present = false;
    404e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    4050:	782b      	ldrb	r3, [r5, #0]
    4052:	2b00      	cmp	r3, #0
    4054:	d1c7      	bne.n	3fe6 <data_out_block_mode+0x12>
    4056:	e7e2      	b.n	401e <data_out_block_mode+0x4a>
    4058:	f7ff ffb0 	bl	3fbc <on_failed_write.part.0>
    405c:	e7f8      	b.n	4050 <data_out_block_mode+0x7c>
    405e:	bf00      	nop
    4060:	20000764 	.word	0x20000764
    4064:	200022b9 	.word	0x200022b9
    4068:	200078d8 	.word	0x200078d8

0000406c <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    406c:	b513      	push	{r0, r1, r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    406e:	4c11      	ldr	r4, [pc, #68]	; (40b4 <sys_rand32_get+0x48>)
    4070:	f3bf 8f5b 	dmb	ish
    4074:	6820      	ldr	r0, [r4, #0]
    4076:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    407a:	b960      	cbnz	r0, 4096 <sys_rand32_get+0x2a>
    407c:	480e      	ldr	r0, [pc, #56]	; (40b8 <sys_rand32_get+0x4c>)
    407e:	f019 ff57 	bl	1df30 <z_impl_device_get_binding>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4082:	f3bf 8f5b 	dmb	ish
    4086:	e854 3f00 	ldrex	r3, [r4]
    408a:	e844 0200 	strex	r2, r0, [r4]
    408e:	2a00      	cmp	r2, #0
    4090:	d1f9      	bne.n	4086 <sys_rand32_get+0x1a>
    4092:	f3bf 8f5b 	dmb	ish
	return api->get_entropy(dev, buffer, length);
    4096:	6843      	ldr	r3, [r0, #4]
    4098:	2204      	movs	r2, #4
    409a:	681b      	ldr	r3, [r3, #0]
    409c:	eb0d 0102 	add.w	r1, sp, r2
    40a0:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    40a2:	2800      	cmp	r0, #0
    40a4:	da02      	bge.n	40ac <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    40a6:	f000 fe35 	bl	4d14 <z_timer_cycle_get_32>
    40aa:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    40ac:	9801      	ldr	r0, [sp, #4]
    40ae:	b002      	add	sp, #8
    40b0:	bd10      	pop	{r4, pc}
    40b2:	bf00      	nop
    40b4:	20000768 	.word	0x20000768
    40b8:	0002669f 	.word	0x0002669f

000040bc <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    40bc:	4b08      	ldr	r3, [pc, #32]	; (40e0 <get_flash_area_from_id+0x24>)
{
    40be:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    40c0:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    40c2:	4b08      	ldr	r3, [pc, #32]	; (40e4 <get_flash_area_from_id+0x28>)
    40c4:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    40c6:	2300      	movs	r3, #0
    40c8:	429d      	cmp	r5, r3
    40ca:	dc02      	bgt.n	40d2 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    40cc:	2200      	movs	r2, #0
}
    40ce:	4610      	mov	r0, r2
    40d0:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    40d2:	011c      	lsls	r4, r3, #4
    40d4:	190a      	adds	r2, r1, r4
    40d6:	5d0c      	ldrb	r4, [r1, r4]
    40d8:	4284      	cmp	r4, r0
    40da:	d0f8      	beq.n	40ce <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
    40dc:	3301      	adds	r3, #1
    40de:	e7f3      	b.n	40c8 <get_flash_area_from_id+0xc>
    40e0:	00025cf4 	.word	0x00025cf4
    40e4:	20006d94 	.word	0x20006d94

000040e8 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    40e8:	4b08      	ldr	r3, [pc, #32]	; (410c <flash_area_open+0x24>)
    40ea:	681b      	ldr	r3, [r3, #0]
{
    40ec:	b510      	push	{r4, lr}
    40ee:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    40f0:	b12b      	cbz	r3, 40fe <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    40f2:	f7ff ffe3 	bl	40bc <get_flash_area_from_id>
	if (area == NULL) {
    40f6:	b128      	cbz	r0, 4104 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    40f8:	6020      	str	r0, [r4, #0]
	return 0;
    40fa:	2000      	movs	r0, #0
}
    40fc:	bd10      	pop	{r4, pc}
		return -EACCES;
    40fe:	f06f 000c 	mvn.w	r0, #12
    4102:	e7fb      	b.n	40fc <flash_area_open+0x14>
		return -ENOENT;
    4104:	f06f 0001 	mvn.w	r0, #1
    4108:	e7f8      	b.n	40fc <flash_area_open+0x14>
    410a:	bf00      	nop
    410c:	20006d94 	.word	0x20006d94

00004110 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    4110:	b530      	push	{r4, r5, lr}
    4112:	b089      	sub	sp, #36	; 0x24
    4114:	460c      	mov	r4, r1
    4116:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    4118:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    411a:	f7ff ffcf 	bl	40bc <get_flash_area_from_id>
	if (fa == NULL) {
    411e:	b1b0      	cbz	r0, 414e <flash_area_get_sectors+0x3e>
	cb_data->area_off = fa->fa_off;
    4120:	6843      	ldr	r3, [r0, #4]
    4122:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    4124:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    4126:	6822      	ldr	r2, [r4, #0]
    4128:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    412a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    412e:	2300      	movs	r3, #0
	cb_data->status = 0;
    4130:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    4134:	9305      	str	r3, [sp, #20]
    4136:	f019 fefb 	bl	1df30 <z_impl_device_get_binding>
	flash_page_foreach(flash_dev, cb, cb_data);
    413a:	aa01      	add	r2, sp, #4
    413c:	4905      	ldr	r1, [pc, #20]	; (4154 <flash_area_get_sectors+0x44>)
    413e:	f020 fea2 	bl	24e86 <flash_page_foreach>
	if (cb_data->status == 0) {
    4142:	9807      	ldr	r0, [sp, #28]
    4144:	b908      	cbnz	r0, 414a <flash_area_get_sectors+0x3a>
		*cnt = cb_data->ret_idx;
    4146:	9b05      	ldr	r3, [sp, #20]
    4148:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    414a:	b009      	add	sp, #36	; 0x24
    414c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    414e:	f06f 0015 	mvn.w	r0, #21
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    4152:	e7fa      	b.n	414a <flash_area_get_sectors+0x3a>
    4154:	00021947 	.word	0x00021947

00004158 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, void *value, size_t val_len)
{
    4158:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct settings_store *cs;
	struct settings_dup_check_arg cdca;

	cs = settings_save_dst;
    415c:	4b11      	ldr	r3, [pc, #68]	; (41a4 <settings_save_one+0x4c>)
    415e:	681d      	ldr	r5, [r3, #0]
{
    4160:	4606      	mov	r6, r0
    4162:	460f      	mov	r7, r1
    4164:	4690      	mov	r8, r2
	if (!cs) {
    4166:	b1bd      	cbz	r5, 4198 <settings_save_one+0x40>
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
	cdca.val_len = val_len;
	cs->cs_itf->csi_load(cs, settings_dup_check_cb, &cdca);
    4168:	686b      	ldr	r3, [r5, #4]
	cdca.is_dup = 0;
    416a:	2400      	movs	r4, #0
	cdca.val = (char *)value;
    416c:	e9cd 0100 	strd	r0, r1, [sp]
	cdca.val_len = val_len;
    4170:	e9cd 2402 	strd	r2, r4, [sp, #8]
	cs->cs_itf->csi_load(cs, settings_dup_check_cb, &cdca);
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	490c      	ldr	r1, [pc, #48]	; (41a8 <settings_save_one+0x50>)
    4178:	466a      	mov	r2, sp
    417a:	4628      	mov	r0, r5
    417c:	4798      	blx	r3
	if (cdca.is_dup == 1) {
    417e:	9b03      	ldr	r3, [sp, #12]
    4180:	2b01      	cmp	r3, #1
    4182:	d00c      	beq.n	419e <settings_save_one+0x46>
		return 0;
	}
	return cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    4184:	686b      	ldr	r3, [r5, #4]
    4186:	463a      	mov	r2, r7
    4188:	689c      	ldr	r4, [r3, #8]
    418a:	4631      	mov	r1, r6
    418c:	4643      	mov	r3, r8
    418e:	4628      	mov	r0, r5
    4190:	47a0      	blx	r4
}
    4192:	b004      	add	sp, #16
    4194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    4198:	f06f 0001 	mvn.w	r0, #1
    419c:	e7f9      	b.n	4192 <settings_save_one+0x3a>
		return 0;
    419e:	4620      	mov	r0, r4
    41a0:	e7f7      	b.n	4192 <settings_save_one+0x3a>
    41a2:	bf00      	nop
    41a4:	20000774 	.word	0x20000774
    41a8:	00021a6b 	.word	0x00021a6b

000041ac <settings_load_cb>:
{
    41ac:	b510      	push	{r4, lr}
	int rc = settings_set_value_priv(name, val_read_cb_ctx, off, 0);
    41ae:	2300      	movs	r3, #0
{
    41b0:	4604      	mov	r4, r0
	int rc = settings_set_value_priv(name, val_read_cb_ctx, off, 0);
    41b2:	f01d fcc0 	bl	21b36 <settings_set_value_priv>
	if (rc != 0) {
    41b6:	4602      	mov	r2, r0
    41b8:	b180      	cbz	r0, 41dc <settings_load_cb+0x30>
		LOG_ERR("set-value failure. key: %s error(%d)",
    41ba:	2101      	movs	r1, #1
    41bc:	f04f 0300 	mov.w	r3, #0
    41c0:	f361 0307 	bfi	r3, r1, #0, #8
	return ((u8_t *)data - (u8_t *)__log_const_start)/
    41c4:	4806      	ldr	r0, [pc, #24]	; (41e0 <settings_load_cb+0x34>)
    41c6:	4907      	ldr	r1, [pc, #28]	; (41e4 <settings_load_cb+0x38>)
    41c8:	1a09      	subs	r1, r1, r0
    41ca:	08c9      	lsrs	r1, r1, #3
    41cc:	f361 138f 	bfi	r3, r1, #6, #10
    41d0:	4805      	ldr	r0, [pc, #20]	; (41e8 <settings_load_cb+0x3c>)
    41d2:	4621      	mov	r1, r4
}
    41d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("set-value failure. key: %s error(%d)",
    41d8:	f01c bd35 	b.w	20c46 <log_2>
}
    41dc:	bd10      	pop	{r4, pc}
    41de:	bf00      	nop
    41e0:	00025880 	.word	0x00025880
    41e4:	000259a0 	.word	0x000259a0
    41e8:	000266bc 	.word	0x000266bc

000041ec <settings_src_register>:
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    41ec:	4b0e      	ldr	r3, [pc, #56]	; (4228 <settings_src_register+0x3c>)
{
    41ee:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    41f0:	681c      	ldr	r4, [r3, #0]
	prev = NULL;
    41f2:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    41f4:	4622      	mov	r2, r4
    41f6:	b932      	cbnz	r2, 4206 <settings_src_register+0x1a>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node);

Z_GENLIST_INSERT(slist, snode)
    41f8:	b941      	cbnz	r1, 420c <settings_src_register+0x20>
	parent->next = child;
    41fa:	6004      	str	r4, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
    41fc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    41fe:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    4200:	b95a      	cbnz	r2, 421a <settings_src_register+0x2e>
	list->tail = node;
    4202:	6058      	str	r0, [r3, #4]
    4204:	e009      	b.n	421a <settings_src_register+0x2e>
    4206:	4611      	mov	r1, r2
    4208:	6812      	ldr	r2, [r2, #0]
    420a:	e7f4      	b.n	41f6 <settings_src_register+0xa>
Z_GENLIST_INSERT(slist, snode)
    420c:	680c      	ldr	r4, [r1, #0]
    420e:	b93c      	cbnz	r4, 4220 <settings_src_register+0x34>
	parent->next = child;
    4210:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    4212:	685a      	ldr	r2, [r3, #4]
    4214:	b912      	cbnz	r2, 421c <settings_src_register+0x30>
	list->head = node;
    4216:	e9c3 0000 	strd	r0, r0, [r3]
}
    421a:	bd10      	pop	{r4, pc}
	parent->next = child;
    421c:	6010      	str	r0, [r2, #0]
    421e:	e7f0      	b.n	4202 <settings_src_register+0x16>
    4220:	6004      	str	r4, [r0, #0]
    4222:	6008      	str	r0, [r1, #0]
    4224:	e7f9      	b.n	421a <settings_src_register+0x2e>
    4226:	bf00      	nop
    4228:	2000076c 	.word	0x2000076c

0000422c <settings_dst_register>:
	settings_save_dst = cs;
    422c:	4b01      	ldr	r3, [pc, #4]	; (4234 <settings_dst_register+0x8>)
    422e:	6018      	str	r0, [r3, #0]
}
    4230:	4770      	bx	lr
    4232:	bf00      	nop
    4234:	20000774 	.word	0x20000774

00004238 <settings_load>:
{
    4238:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    423a:	4b09      	ldr	r3, [pc, #36]	; (4260 <settings_load+0x28>)
    423c:	681c      	ldr	r4, [r3, #0]
    423e:	b14c      	cbz	r4, 4254 <settings_load+0x1c>
		cs->cs_itf->csi_load(cs, settings_load_cb, NULL);
    4240:	4d08      	ldr	r5, [pc, #32]	; (4264 <settings_load+0x2c>)
    4242:	6863      	ldr	r3, [r4, #4]
    4244:	4620      	mov	r0, r4
    4246:	681b      	ldr	r3, [r3, #0]
    4248:	2200      	movs	r2, #0
    424a:	4629      	mov	r1, r5
    424c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    424e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    4250:	2c00      	cmp	r4, #0
    4252:	d1f6      	bne.n	4242 <settings_load+0xa>
	return settings_commit(NULL);
    4254:	2000      	movs	r0, #0
}
    4256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return settings_commit(NULL);
    425a:	f000 b843 	b.w	42e4 <settings_commit>
    425e:	bf00      	nop
    4260:	2000076c 	.word	0x2000076c
    4264:	000041ad 	.word	0x000041ad

00004268 <settings_store_init>:
	list->head = NULL;
    4268:	4b02      	ldr	r3, [pc, #8]	; (4274 <settings_store_init+0xc>)
    426a:	2200      	movs	r2, #0
	list->tail = NULL;
    426c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    4270:	4770      	bx	lr
    4272:	bf00      	nop
    4274:	2000076c 	.word	0x2000076c

00004278 <settings_handler_lookup>:

/*
 * Find settings_handler based on name.
 */
static struct settings_handler *settings_handler_lookup(char *name)
{
    4278:	b538      	push	{r3, r4, r5, lr}
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    427a:	4b07      	ldr	r3, [pc, #28]	; (4298 <settings_handler_lookup+0x20>)
    427c:	681c      	ldr	r4, [r3, #0]
{
    427e:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    4280:	b914      	cbnz	r4, 4288 <settings_handler_lookup+0x10>
		if (!strcmp(name, ch->name)) {
			return ch;
		}
	}
	return NULL;
    4282:	2400      	movs	r4, #0
}
    4284:	4620      	mov	r0, r4
    4286:	bd38      	pop	{r3, r4, r5, pc}
		if (!strcmp(name, ch->name)) {
    4288:	6861      	ldr	r1, [r4, #4]
    428a:	4628      	mov	r0, r5
    428c:	f01d fdc8 	bl	21e20 <strcmp>
    4290:	2800      	cmp	r0, #0
    4292:	d0f7      	beq.n	4284 <settings_handler_lookup+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4294:	6824      	ldr	r4, [r4, #0]
	return node->next;
    4296:	e7f3      	b.n	4280 <settings_handler_lookup+0x8>
    4298:	20000778 	.word	0x20000778

0000429c <settings_init>:
{
    429c:	b510      	push	{r4, lr}
	if (!settings_cmd_inited) {
    429e:	4c05      	ldr	r4, [pc, #20]	; (42b4 <settings_init+0x18>)
    42a0:	7823      	ldrb	r3, [r4, #0]
    42a2:	b933      	cbnz	r3, 42b2 <settings_init+0x16>
	list->head = NULL;
    42a4:	4a04      	ldr	r2, [pc, #16]	; (42b8 <settings_init+0x1c>)
	list->tail = NULL;
    42a6:	e9c2 3300 	strd	r3, r3, [r2]
		settings_store_init();
    42aa:	f7ff ffdd 	bl	4268 <settings_store_init>
		settings_cmd_inited = 1U;
    42ae:	2301      	movs	r3, #1
    42b0:	7023      	strb	r3, [r4, #0]
}
    42b2:	bd10      	pop	{r4, pc}
    42b4:	200022ba 	.word	0x200022ba
    42b8:	20000778 	.word	0x20000778

000042bc <settings_register>:
{
    42bc:	b510      	push	{r4, lr}
    42be:	4604      	mov	r4, r0
	if (settings_handler_lookup(handler->name)) {
    42c0:	6840      	ldr	r0, [r0, #4]
    42c2:	f7ff ffd9 	bl	4278 <settings_handler_lookup>
    42c6:	b940      	cbnz	r0, 42da <settings_register+0x1e>
Z_GENLIST_PREPEND(slist, snode)
    42c8:	4b05      	ldr	r3, [pc, #20]	; (42e0 <settings_register+0x24>)
    42ca:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    42cc:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    42ce:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    42d0:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    42d2:	b90a      	cbnz	r2, 42d8 <settings_register+0x1c>
	list->tail = node;
    42d4:	605c      	str	r4, [r3, #4]
	return 0;
    42d6:	4610      	mov	r0, r2
}
    42d8:	bd10      	pop	{r4, pc}
		return -EEXIST;
    42da:	f06f 0010 	mvn.w	r0, #16
    42de:	e7fb      	b.n	42d8 <settings_register+0x1c>
    42e0:	20000778 	.word	0x20000778

000042e4 <settings_commit>:
	}
	return ch->h_get(name_argc - 1, &name_argv[1], buf, buf_len);
}

int settings_commit(char *name)
{
    42e4:	b530      	push	{r4, r5, lr}
	char *name_argv[SETTINGS_MAX_DIR_DEPTH];
	struct settings_handler *ch;
	int rc;
	int rc2;

	if (name) {
    42e6:	4604      	mov	r4, r0
{
    42e8:	b08b      	sub	sp, #44	; 0x2c
	if (name) {
    42ea:	b168      	cbz	r0, 4308 <settings_commit+0x24>
		ch = settings_parse_and_lookup(name, &name_argc, name_argv);
    42ec:	aa02      	add	r2, sp, #8
    42ee:	a901      	add	r1, sp, #4
    42f0:	f01d fc16 	bl	21b20 <settings_parse_and_lookup>
		if (!ch) {
    42f4:	b1b0      	cbz	r0, 4324 <settings_commit+0x40>
			return -EINVAL;
		}
		if (ch->h_commit) {
    42f6:	6903      	ldr	r3, [r0, #16]
    42f8:	b91b      	cbnz	r3, 4302 <settings_commit+0x1e>
			return ch->h_commit();
		} else {
			return 0;
    42fa:	2400      	movs	r4, #0
				}
			}
		}
		return rc;
	}
}
    42fc:	4620      	mov	r0, r4
    42fe:	b00b      	add	sp, #44	; 0x2c
    4300:	bd30      	pop	{r4, r5, pc}
			return ch->h_commit();
    4302:	4798      	blx	r3
    4304:	4604      	mov	r4, r0
    4306:	e7f9      	b.n	42fc <settings_commit+0x18>
		SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    4308:	4b08      	ldr	r3, [pc, #32]	; (432c <settings_commit+0x48>)
    430a:	681d      	ldr	r5, [r3, #0]
    430c:	2d00      	cmp	r5, #0
    430e:	d0f4      	beq.n	42fa <settings_commit+0x16>
			if (ch->h_commit) {
    4310:	692b      	ldr	r3, [r5, #16]
    4312:	b11b      	cbz	r3, 431c <settings_commit+0x38>
				rc2 = ch->h_commit();
    4314:	4798      	blx	r3
					rc = rc2;
    4316:	2c00      	cmp	r4, #0
    4318:	bf08      	it	eq
    431a:	4604      	moveq	r4, r0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    431c:	682d      	ldr	r5, [r5, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    431e:	2d00      	cmp	r5, #0
    4320:	d1f6      	bne.n	4310 <settings_commit+0x2c>
    4322:	e7eb      	b.n	42fc <settings_commit+0x18>
			return -EINVAL;
    4324:	f06f 0415 	mvn.w	r4, #21
    4328:	e7e8      	b.n	42fc <settings_commit+0x18>
    432a:	bf00      	nop
    432c:	20000778 	.word	0x20000778

00004330 <settings_subsys_init>:
}

#endif

int settings_subsys_init(void)
{
    4330:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static bool settings_initialized;
	int err;

	if (settings_initialized) {
    4332:	4d20      	ldr	r5, [pc, #128]	; (43b4 <settings_subsys_init+0x84>)
    4334:	782a      	ldrb	r2, [r5, #0]
    4336:	2a00      	cmp	r2, #0
    4338:	d138      	bne.n	43ac <settings_subsys_init+0x7c>
		return 0;
	}

	settings_init();
    433a:	f7ff ffaf 	bl	429c <settings_init>
	u32_t cnt = CONFIG_SETTINGS_FCB_NUM_AREAS + 1;
    433e:	2309      	movs	r3, #9
	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &cnt,
    4340:	4a1d      	ldr	r2, [pc, #116]	; (43b8 <settings_subsys_init+0x88>)
	u32_t cnt = CONFIG_SETTINGS_FCB_NUM_AREAS + 1;
    4342:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &cnt,
    4344:	4669      	mov	r1, sp
    4346:	2003      	movs	r0, #3
    4348:	f7ff fee2 	bl	4110 <flash_area_get_sectors>
	if (rc != 0 && rc != -ENOMEM) {
    434c:	b138      	cbz	r0, 435e <settings_subsys_init+0x2e>
    434e:	300c      	adds	r0, #12
    4350:	d005      	beq.n	435e <settings_subsys_init+0x2e>
		k_panic();
    4352:	4040      	eors	r0, r0
    4354:	f380 8811 	msr	BASEPRI, r0
    4358:	f04f 0005 	mov.w	r0, #5
    435c:	df02      	svc	2
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
    435e:	4c17      	ldr	r4, [pc, #92]	; (43bc <settings_subsys_init+0x8c>)
    4360:	9b00      	ldr	r3, [sp, #0]
    4362:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
    4364:	4620      	mov	r0, r4
    4366:	f000 fa03 	bl	4770 <settings_fcb_src>
	if (rc != 0) {
    436a:	b1a8      	cbz	r0, 4398 <settings_subsys_init+0x68>
		rc = flash_area_open(DT_FLASH_AREA_STORAGE_ID, &fap);
    436c:	a901      	add	r1, sp, #4
    436e:	2003      	movs	r0, #3
    4370:	f7ff feba 	bl	40e8 <flash_area_open>
		if (rc == 0) {
    4374:	4601      	mov	r1, r0
    4376:	2800      	cmp	r0, #0
    4378:	d1eb      	bne.n	4352 <settings_subsys_init+0x22>
			rc = flash_area_erase(fap, 0, fap->fa_size);
    437a:	9801      	ldr	r0, [sp, #4]
    437c:	6882      	ldr	r2, [r0, #8]
    437e:	f01d fb47 	bl	21a10 <flash_area_erase>
    4382:	4606      	mov	r6, r0
			flash_area_close(fap);
    4384:	9801      	ldr	r0, [sp, #4]
    4386:	f01d fafc 	bl	21982 <flash_area_close>
		if (rc != 0) {
    438a:	2e00      	cmp	r6, #0
    438c:	d1e1      	bne.n	4352 <settings_subsys_init+0x22>
			rc = settings_fcb_src(&config_init_settings_fcb);
    438e:	4620      	mov	r0, r4
    4390:	f000 f9ee 	bl	4770 <settings_fcb_src>
	if (rc != 0) {
    4394:	2800      	cmp	r0, #0
    4396:	d1dc      	bne.n	4352 <settings_subsys_init+0x22>
	rc = settings_fcb_dst(&config_init_settings_fcb);
    4398:	4808      	ldr	r0, [pc, #32]	; (43bc <settings_subsys_init+0x8c>)
    439a:	f000 fa13 	bl	47c4 <settings_fcb_dst>
	if (rc != 0) {
    439e:	2800      	cmp	r0, #0
    43a0:	d1d7      	bne.n	4352 <settings_subsys_init+0x22>
	settings_mount_fcb_backend(&config_init_settings_fcb);
    43a2:	4806      	ldr	r0, [pc, #24]	; (43bc <settings_subsys_init+0x8c>)
    43a4:	f000 fa18 	bl	47d8 <settings_mount_fcb_backend>
	settings_init_fcb(); /* func rises kernel panic once error */
	err = 0;
#endif

	if (!err) {
		settings_initialized = true;
    43a8:	2301      	movs	r3, #1
    43aa:	702b      	strb	r3, [r5, #0]
	}

	return err;
}
    43ac:	2000      	movs	r0, #0
    43ae:	b002      	add	sp, #8
    43b0:	bd70      	pop	{r4, r5, r6, pc}
    43b2:	bf00      	nop
    43b4:	200022bb 	.word	0x200022bb
    43b8:	20000780 	.word	0x20000780
    43bc:	20006d98 	.word	0x20006d98

000043c0 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
    43c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43c4:	b089      	sub	sp, #36	; 0x24
    43c6:	e9cd 2300 	strd	r2, r3, [sp]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	u8_t rbs = settings_io_cb.rwbs;
    43ca:	4b26      	ldr	r3, [pc, #152]	; (4464 <settings_line_raw_read_until+0xa4>)
    43cc:	f893 a00c 	ldrb.w	sl, [r3, #12]
{
    43d0:	4607      	mov	r7, r0
    43d2:	4689      	mov	r9, r1
	off_t off;
	int rc;

	rem_size = len_req;
    43d4:	4615      	mov	r5, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
    43d6:	4698      	mov	r8, r3
	while (rem_size) {
    43d8:	b965      	cbnz	r5, 43f4 <settings_line_raw_read_until+0x34>
    43da:	462e      	mov	r6, r5

		out += len;
		seek += len;
	}

	*len_read = len_req - rem_size;
    43dc:	9b00      	ldr	r3, [sp, #0]
    43de:	1b5d      	subs	r5, r3, r5
    43e0:	9b01      	ldr	r3, [sp, #4]
    43e2:	601d      	str	r5, [r3, #0]

	if (until_char != NULL) {
    43e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    43e6:	2b00      	cmp	r3, #0
    43e8:	d03a      	beq.n	4460 <settings_line_raw_read_until+0xa0>
		return (rc) ? 0 : 1;
    43ea:	f086 0001 	eor.w	r0, r6, #1
	}

	return 0;
}
    43ee:	b009      	add	sp, #36	; 0x24
    43f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		read_size = sizeof(temp_buf);
    43f4:	2310      	movs	r3, #16
		off = seek / rbs * rbs;
    43f6:	fb97 fbfa 	sdiv	fp, r7, sl
    43fa:	fb0a fb0b 	mul.w	fp, sl, fp
		read_size = sizeof(temp_buf);
    43fe:	9303      	str	r3, [sp, #12]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
    4400:	f8d8 4000 	ldr.w	r4, [r8]
    4404:	9813      	ldr	r0, [sp, #76]	; 0x4c
    4406:	ab03      	add	r3, sp, #12
    4408:	aa04      	add	r2, sp, #16
    440a:	4659      	mov	r1, fp
    440c:	47a0      	blx	r4
		if (rc) {
    440e:	4606      	mov	r6, r0
    4410:	bb18      	cbnz	r0, 445a <settings_line_raw_read_until+0x9a>
		len = read_size - off;
    4412:	9c03      	ldr	r4, [sp, #12]
    4414:	eba7 0b0b 	sub.w	fp, r7, fp
    4418:	ab04      	add	r3, sp, #16
    441a:	eba4 040b 	sub.w	r4, r4, fp
		len = MIN(rem_size, len);
    441e:	449b      	add	fp, r3
		if (until_char != NULL) {
    4420:	9b12      	ldr	r3, [sp, #72]	; 0x48
		len = MIN(rem_size, len);
    4422:	42ac      	cmp	r4, r5
    4424:	bf28      	it	cs
    4426:	462c      	movcs	r4, r5
		if (until_char != NULL) {
    4428:	b143      	cbz	r3, 443c <settings_line_raw_read_until+0x7c>
			pend = memchr(&temp_buf[off], *until_char, len);
    442a:	4622      	mov	r2, r4
    442c:	7819      	ldrb	r1, [r3, #0]
    442e:	4658      	mov	r0, fp
    4430:	f01d fd75 	bl	21f1e <memchr>
			if (pend != NULL) {
    4434:	b110      	cbz	r0, 443c <settings_line_raw_read_until+0x7c>
				len = pend - &temp_buf[off];
    4436:	eba0 040b 	sub.w	r4, r0, fp
				rc = 1; /* will cause loop expiration */
    443a:	2601      	movs	r6, #1
		memcpy(out, &temp_buf[off], len);
    443c:	4622      	mov	r2, r4
    443e:	4659      	mov	r1, fp
    4440:	4648      	mov	r0, r9
    4442:	f01d fd20 	bl	21e86 <memcpy>
		if (exp_size > read_size || rc) {
    4446:	9a03      	ldr	r2, [sp, #12]
    4448:	2a0f      	cmp	r2, #15
		rem_size -= len;
    444a:	eba5 0504 	sub.w	r5, r5, r4
		if (exp_size > read_size || rc) {
    444e:	d9c5      	bls.n	43dc <settings_line_raw_read_until+0x1c>
    4450:	2e00      	cmp	r6, #0
    4452:	d1c3      	bne.n	43dc <settings_line_raw_read_until+0x1c>
		out += len;
    4454:	44a1      	add	r9, r4
		seek += len;
    4456:	4427      	add	r7, r4
    4458:	e7be      	b.n	43d8 <settings_line_raw_read_until+0x18>
			return -EIO;
    445a:	f06f 0004 	mvn.w	r0, #4
    445e:	e7c6      	b.n	43ee <settings_line_raw_read_until+0x2e>
	return 0;
    4460:	9812      	ldr	r0, [sp, #72]	; 0x48
    4462:	e7c4      	b.n	43ee <settings_line_raw_read_until+0x2e>
    4464:	200007c8 	.word	0x200007c8

00004468 <settings_line_write>:
{
    4468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t wbs = settings_io_cb.rwbs;
    446c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 4528 <settings_line_write+0xc0>
{
    4470:	b087      	sub	sp, #28
	u8_t wbs = settings_io_cb.rwbs;
    4472:	f89a 700c 	ldrb.w	r7, [sl, #12]
{
    4476:	9301      	str	r3, [sp, #4]
    4478:	4683      	mov	fp, r0
    447a:	4689      	mov	r9, r1
    447c:	4690      	mov	r8, r2
	rem = strlen(name);
    447e:	f01d fcc8 	bl	21e12 <strlen>
	w_size = rem - rem % wbs;
    4482:	fbb0 f4f7 	udiv	r4, r0, r7
    4486:	fb07 0414 	mls	r4, r7, r4, r0
    448a:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
    448c:	462b      	mov	r3, r5
    448e:	465a      	mov	r2, fp
    4490:	9901      	ldr	r1, [sp, #4]
    4492:	9810      	ldr	r0, [sp, #64]	; 0x40
    4494:	f8da 6004 	ldr.w	r6, [sl, #4]
    4498:	47b0      	blx	r6
	w_loc += w_size;
    449a:	9b01      	ldr	r3, [sp, #4]
    449c:	442b      	add	r3, r5
    449e:	9301      	str	r3, [sp, #4]
	if (rem) {
    44a0:	b12c      	cbz	r4, 44ae <settings_line_write+0x46>
		memcpy(w_buf, name, rem);
    44a2:	4622      	mov	r2, r4
    44a4:	eb0b 0105 	add.w	r1, fp, r5
    44a8:	a802      	add	r0, sp, #8
    44aa:	f01d fcec 	bl	21e86 <memcpy>
	w_buf[rem] = '=';
    44ae:	ab06      	add	r3, sp, #24
    44b0:	4423      	add	r3, r4
    44b2:	223d      	movs	r2, #61	; 0x3d
    44b4:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
    44b8:	3401      	adds	r4, #1
		while (w_size < sizeof(w_buf)) {
    44ba:	2c0f      	cmp	r4, #15
    44bc:	d90d      	bls.n	44da <settings_line_write+0x72>
    44be:	2500      	movs	r5, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
    44c0:	4623      	mov	r3, r4
    44c2:	aa02      	add	r2, sp, #8
    44c4:	9901      	ldr	r1, [sp, #4]
    44c6:	9810      	ldr	r0, [sp, #64]	; 0x40
    44c8:	f8da 6004 	ldr.w	r6, [sl, #4]
    44cc:	47b0      	blx	r6
		if (rc) {
    44ce:	bb30      	cbnz	r0, 451e <settings_line_write+0xb6>
		if (done) {
    44d0:	bb3d      	cbnz	r5, 4522 <settings_line_write+0xba>
		w_loc += w_size;
    44d2:	9b01      	ldr	r3, [sp, #4]
    44d4:	4423      	add	r3, r4
    44d6:	9301      	str	r3, [sp, #4]
		w_size = 0;
    44d8:	462c      	mov	r4, r5
				if (rem) {
    44da:	f1b8 0f00 	cmp.w	r8, #0
    44de:	d00f      	beq.n	4500 <settings_line_write+0x98>
					add = MIN(rem, sizeof(w_buf) - w_size);
    44e0:	f1c4 0510 	rsb	r5, r4, #16
    44e4:	4545      	cmp	r5, r8
    44e6:	bf28      	it	cs
    44e8:	4645      	movcs	r5, r8
					memcpy(&w_buf[w_size], value, add);
    44ea:	ab02      	add	r3, sp, #8
    44ec:	4649      	mov	r1, r9
    44ee:	1918      	adds	r0, r3, r4
    44f0:	462a      	mov	r2, r5
    44f2:	f01d fcc8 	bl	21e86 <memcpy>
					value += add;
    44f6:	44a9      	add	r9, r5
					rem -= add;
    44f8:	eba8 0805 	sub.w	r8, r8, r5
					w_size += add;
    44fc:	442c      	add	r4, r5
    44fe:	e7dc      	b.n	44ba <settings_line_write+0x52>
					add = (w_size) % wbs;
    4500:	fbb4 f5f7 	udiv	r5, r4, r7
    4504:	fb07 4515 	mls	r5, r7, r5, r4
					if (add) {
    4508:	b13d      	cbz	r5, 451a <settings_line_write+0xb2>
						add = wbs - add;
    450a:	1b7d      	subs	r5, r7, r5
						memset(&w_buf[w_size], '\0',
    450c:	ab02      	add	r3, sp, #8
    450e:	1918      	adds	r0, r3, r4
    4510:	462a      	mov	r2, r5
    4512:	4641      	mov	r1, r8
    4514:	f01d fce1 	bl	21eda <memset>
						w_size += add;
    4518:	442c      	add	r4, r5
					done = true;
    451a:	2501      	movs	r5, #1
    451c:	e7d0      	b.n	44c0 <settings_line_write+0x58>
			return -EIO;
    451e:	f06f 0004 	mvn.w	r0, #4
}
    4522:	b007      	add	sp, #28
    4524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4528:	200007c8 	.word	0x200007c8

0000452c <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
    452c:	4b03      	ldr	r3, [pc, #12]	; (453c <settings_line_val_get_len+0x10>)
{
    452e:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
    4530:	689b      	ldr	r3, [r3, #8]
{
    4532:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
    4534:	4608      	mov	r0, r1
    4536:	4798      	blx	r3
		return 0;
	}
#else
	return len - val_off;
#endif
}
    4538:	1b00      	subs	r0, r0, r4
    453a:	bd10      	pop	{r4, pc}
    453c:	200007c8 	.word	0x200007c8

00004540 <settings_entry_copy>:
}


int settings_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			off_t src_off, size_t len)
{
    4540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4544:	b086      	sub	sp, #24
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
    4546:	4f12      	ldr	r7, [pc, #72]	; (4590 <settings_entry_copy+0x50>)
{
    4548:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    454a:	4681      	mov	r9, r0
    454c:	4688      	mov	r8, r1
    454e:	4692      	mov	sl, r2
    4550:	461e      	mov	r6, r3
	while (len) {
    4552:	b91c      	cbnz	r4, 455c <settings_entry_copy+0x1c>
    4554:	4620      	mov	r0, r4
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
    4556:	b006      	add	sp, #24
    4558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
    455c:	2c10      	cmp	r4, #16
    455e:	4623      	mov	r3, r4
    4560:	bf28      	it	cs
    4562:	2310      	movcs	r3, #16
    4564:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
    4566:	aa02      	add	r2, sp, #8
    4568:	ab01      	add	r3, sp, #4
    456a:	4631      	mov	r1, r6
    456c:	4650      	mov	r0, sl
    456e:	683d      	ldr	r5, [r7, #0]
    4570:	47a8      	blx	r5
		if (rc) {
    4572:	2800      	cmp	r0, #0
    4574:	d1ef      	bne.n	4556 <settings_entry_copy+0x16>
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, chunk_size);
    4576:	9b01      	ldr	r3, [sp, #4]
    4578:	687d      	ldr	r5, [r7, #4]
    457a:	aa02      	add	r2, sp, #8
    457c:	4641      	mov	r1, r8
    457e:	4648      	mov	r0, r9
    4580:	47a8      	blx	r5
		if (rc) {
    4582:	2800      	cmp	r0, #0
    4584:	d1e7      	bne.n	4556 <settings_entry_copy+0x16>
		src_off += chunk_size;
    4586:	9b01      	ldr	r3, [sp, #4]
    4588:	441e      	add	r6, r3
		dst_off += chunk_size;
    458a:	4498      	add	r8, r3
		len -= chunk_size;
    458c:	1ae4      	subs	r4, r4, r3
    458e:	e7e0      	b.n	4552 <settings_entry_copy+0x12>
    4590:	200007c8 	.word	0x200007c8

00004594 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  u8_t io_rwbs)
{
    4594:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
    4596:	4c03      	ldr	r4, [pc, #12]	; (45a4 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
    4598:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
    459c:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
    459e:	7323      	strb	r3, [r4, #12]
}
    45a0:	bd10      	pop	{r4, pc}
    45a2:	bf00      	nop
    45a4:	200007c8 	.word	0x200007c8

000045a8 <settings_fcb_save>:
}

/* ::csi_save implementation */
static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
    45a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45ac:	b0bf      	sub	sp, #252	; 0xfc
    45ae:	4605      	mov	r5, r0
    45b0:	9205      	str	r2, [sp, #20]
    45b2:	469b      	mov	fp, r3
	int len;
	int rc;
	int i;
	u8_t wbs;

	if (!name) {
    45b4:	460f      	mov	r7, r1
    45b6:	b929      	cbnz	r1, 45c4 <settings_fcb_save+0x1c>
		return -EINVAL;
    45b8:	f06f 0515 	mvn.w	r5, #21
		if (!rc) {
			rc = i;
		}
	}
	return rc;
}
    45bc:	4628      	mov	r0, r5
    45be:	b03f      	add	sp, #252	; 0xfc
    45c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	len = settings_line_len_calc(name, val_len);
    45c4:	4619      	mov	r1, r3
    45c6:	4638      	mov	r0, r7
    45c8:	f01d faf3 	bl	21bb2 <settings_line_len_calc>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    45cc:	4b5b      	ldr	r3, [pc, #364]	; (473c <settings_fcb_save+0x194>)
    45ce:	4a5c      	ldr	r2, [pc, #368]	; (4740 <settings_fcb_save+0x198>)
	len = settings_line_len_calc(name, val_len);
    45d0:	9004      	str	r0, [sp, #16]
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    45d2:	1a9b      	subs	r3, r3, r2
    45d4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    45d8:	9303      	str	r3, [sp, #12]
	for (i = 0; i < cf->cf_fcb.f_sector_cnt - 1; i++) {
    45da:	f04f 0800 	mov.w	r8, #0
    45de:	7b6b      	ldrb	r3, [r5, #13]
    45e0:	3b01      	subs	r3, #1
    45e2:	4543      	cmp	r3, r8
    45e4:	dde8      	ble.n	45b8 <settings_fcb_save+0x10>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
    45e6:	f105 0408 	add.w	r4, r5, #8
    45ea:	ae09      	add	r6, sp, #36	; 0x24
    45ec:	4632      	mov	r2, r6
    45ee:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    45f2:	4620      	mov	r0, r4
    45f4:	f01c fe66 	bl	212c4 <fcb_append>
		if (rc != FCB_ERR_NOSPACE) {
    45f8:	1d02      	adds	r2, r0, #4
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
    45fa:	4603      	mov	r3, r0
		if (rc != FCB_ERR_NOSPACE) {
    45fc:	f040 8087 	bne.w	470e <settings_fcb_save+0x166>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
    4600:	4620      	mov	r0, r4
    4602:	f01c fe43 	bl	2128c <fcb_append_to_scratch>
	if (rc) {
    4606:	4606      	mov	r6, r0
    4608:	b110      	cbz	r0, 4610 <settings_fcb_save+0x68>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt - 1; i++) {
    460a:	f108 0801 	add.w	r8, r8, #1
    460e:	e7e6      	b.n	45de <settings_fcb_save+0x36>
	rbs = flash_area_align(cf->cf_fcb.fap);
    4610:	6c28      	ldr	r0, [r5, #64]	; 0x40
    4612:	f01d fa23 	bl	21a5c <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
    4616:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    4618:	9312      	str	r3, [sp, #72]	; 0x48
	loc1.loc.fe_elem_off = 0;
    461a:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    461e:	4e49      	ldr	r6, [pc, #292]	; (4744 <settings_fcb_save+0x19c>)
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
    4620:	a90e      	add	r1, sp, #56	; 0x38
    4622:	4620      	mov	r0, r4
    4624:	f01d f90c 	bl	21840 <fcb_getnext>
    4628:	b198      	cbz	r0, 4652 <settings_fcb_save+0xaa>
	rc = fcb_rotate(&cf->cf_fcb);
    462a:	4620      	mov	r0, r4
    462c:	f01d f920 	bl	21870 <fcb_rotate>
	if (rc != 0) {
    4630:	4601      	mov	r1, r0
    4632:	2800      	cmp	r0, #0
    4634:	d0e9      	beq.n	460a <settings_fcb_save+0x62>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
    4636:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    463a:	f043 0301 	orr.w	r3, r3, #1
    463e:	f363 0a07 	bfi	sl, r3, #0, #8
    4642:	9b03      	ldr	r3, [sp, #12]
    4644:	4840      	ldr	r0, [pc, #256]	; (4748 <settings_fcb_save+0x1a0>)
    4646:	f363 1a8f 	bfi	sl, r3, #6, #10
    464a:	4652      	mov	r2, sl
    464c:	f01c fae7 	bl	20c1e <log_1>
    4650:	e7db      	b.n	460a <settings_fcb_save+0x62>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
    4652:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4654:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4656:	429a      	cmp	r2, r3
    4658:	d1e7      	bne.n	462a <settings_fcb_save+0x82>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
    465a:	ab0e      	add	r3, sp, #56	; 0x38
    465c:	aa07      	add	r2, sp, #28
    465e:	2149      	movs	r1, #73	; 0x49
    4660:	a818      	add	r0, sp, #96	; 0x60
    4662:	f01d fac1 	bl	21be8 <settings_line_name_read>
		if (rc) {
    4666:	2800      	cmp	r0, #0
    4668:	d1da      	bne.n	4620 <settings_fcb_save+0x78>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
    466a:	9b07      	ldr	r3, [sp, #28]
    466c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    4670:	3301      	adds	r3, #1
    4672:	4293      	cmp	r3, r2
    4674:	d0d4      	beq.n	4620 <settings_fcb_save+0x78>
		loc2 = loc1;
    4676:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
    467a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    467e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
    4682:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4686:	f8de 3000 	ldr.w	r3, [lr]
    468a:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
    468e:	a913      	add	r1, sp, #76	; 0x4c
    4690:	4620      	mov	r0, r4
    4692:	f01d f8d5 	bl	21840 <fcb_getnext>
    4696:	b338      	cbz	r0, 46e8 <settings_fcb_save+0x140>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
    4698:	aa13      	add	r2, sp, #76	; 0x4c
    469a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    469e:	4620      	mov	r0, r4
    46a0:	f01c fe10 	bl	212c4 <fcb_append>
		if (rc) {
    46a4:	4603      	mov	r3, r0
    46a6:	2800      	cmp	r0, #0
    46a8:	d1ba      	bne.n	4620 <settings_fcb_save+0x78>
		rc = settings_entry_copy(&loc2, 0, &loc1, 0,
    46aa:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    46ae:	9200      	str	r2, [sp, #0]
    46b0:	4601      	mov	r1, r0
    46b2:	aa0e      	add	r2, sp, #56	; 0x38
    46b4:	a813      	add	r0, sp, #76	; 0x4c
    46b6:	f7ff ff43 	bl	4540 <settings_entry_copy>
		if (rc) {
    46ba:	2800      	cmp	r0, #0
    46bc:	d1b0      	bne.n	4620 <settings_fcb_save+0x78>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
    46be:	a913      	add	r1, sp, #76	; 0x4c
    46c0:	4620      	mov	r0, r4
    46c2:	f01c fe82 	bl	213ca <fcb_append_finish>
		if (rc != 0) {
    46c6:	4601      	mov	r1, r0
    46c8:	2800      	cmp	r0, #0
    46ca:	d0a9      	beq.n	4620 <settings_fcb_save+0x78>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
    46cc:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    46d0:	f043 0301 	orr.w	r3, r3, #1
    46d4:	f363 0907 	bfi	r9, r3, #0, #8
    46d8:	9b03      	ldr	r3, [sp, #12]
    46da:	f363 198f 	bfi	r9, r3, #6, #10
    46de:	464a      	mov	r2, r9
    46e0:	4630      	mov	r0, r6
    46e2:	f01c fa9c 	bl	20c1e <log_1>
    46e6:	e79b      	b.n	4620 <settings_fcb_save+0x78>
			rc = settings_line_name_read(name2, sizeof(name2),
    46e8:	ab13      	add	r3, sp, #76	; 0x4c
    46ea:	aa08      	add	r2, sp, #32
    46ec:	2149      	movs	r1, #73	; 0x49
    46ee:	a82b      	add	r0, sp, #172	; 0xac
    46f0:	f01d fa7a 	bl	21be8 <settings_line_name_read>
			if (rc) {
    46f4:	2800      	cmp	r0, #0
    46f6:	d1ca      	bne.n	468e <settings_fcb_save+0xe6>
			if ((val1_off == val2_off) &&
    46f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
    46fc:	429a      	cmp	r2, r3
    46fe:	d1c6      	bne.n	468e <settings_fcb_save+0xe6>
			    !memcmp(name1, name2, val1_off)) {
    4700:	a92b      	add	r1, sp, #172	; 0xac
    4702:	a818      	add	r0, sp, #96	; 0x60
    4704:	f01d fb98 	bl	21e38 <memcmp>
			if ((val1_off == val2_off) &&
    4708:	2800      	cmp	r0, #0
    470a:	d1c0      	bne.n	468e <settings_fcb_save+0xe6>
    470c:	e788      	b.n	4620 <settings_fcb_save+0x78>
	if (rc) {
    470e:	2800      	cmp	r0, #0
    4710:	f47f af52 	bne.w	45b8 <settings_fcb_save+0x10>
	loc.fap = cf->cf_fcb.fap;
    4714:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    4716:	920d      	str	r2, [sp, #52]	; 0x34
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
    4718:	9600      	str	r6, [sp, #0]
    471a:	465a      	mov	r2, fp
    471c:	9905      	ldr	r1, [sp, #20]
    471e:	4638      	mov	r0, r7
    4720:	f7ff fea2 	bl	4468 <settings_line_write>
	if (rc != -EIO) {
    4724:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
    4726:	4605      	mov	r5, r0
	if (rc != -EIO) {
    4728:	f43f af48 	beq.w	45bc <settings_fcb_save+0x14>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
    472c:	4631      	mov	r1, r6
    472e:	4620      	mov	r0, r4
    4730:	f01c fe4b 	bl	213ca <fcb_append_finish>
			rc = i;
    4734:	2d00      	cmp	r5, #0
    4736:	bf08      	it	eq
    4738:	4605      	moveq	r5, r0
    473a:	e73f      	b.n	45bc <settings_fcb_save+0x14>
    473c:	000259a0 	.word	0x000259a0
    4740:	00025880 	.word	0x00025880
    4744:	000266e1 	.word	0x000266e1
    4748:	00026702 	.word	0x00026702

0000474c <settings_fcb_load>:
{
    474c:	b507      	push	{r0, r1, r2, lr}
	rc = fcb_walk(&cf->cf_fcb, 0, settings_fcb_load_cb, &arg);
    474e:	3008      	adds	r0, #8
	arg.cb_arg = cb_arg;
    4750:	e9cd 1200 	strd	r1, r2, [sp]
	rc = fcb_walk(&cf->cf_fcb, 0, settings_fcb_load_cb, &arg);
    4754:	466b      	mov	r3, sp
    4756:	4a05      	ldr	r2, [pc, #20]	; (476c <settings_fcb_load+0x20>)
    4758:	2100      	movs	r1, #0
    475a:	f01d f8c0 	bl	218de <fcb_walk>
	if (rc) {
    475e:	2800      	cmp	r0, #0
}
    4760:	bf18      	it	ne
    4762:	f06f 0015 	mvnne.w	r0, #21
    4766:	b003      	add	sp, #12
    4768:	f85d fb04 	ldr.w	pc, [sp], #4
    476c:	00021c0d 	.word	0x00021c0d

00004770 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
    4770:	2301      	movs	r3, #1
{
    4772:	b570      	push	{r4, r5, r6, lr}
    4774:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
    4776:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
    4778:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(DT_FLASH_AREA_STORAGE_ID, &cf->cf_fcb);
    477a:	f100 0608 	add.w	r6, r0, #8
    477e:	4631      	mov	r1, r6
    4780:	2003      	movs	r0, #3
    4782:	f01c fef9 	bl	21578 <fcb_init>
		if (rc) {
    4786:	4605      	mov	r5, r0
    4788:	b9b0      	cbnz	r0, 47b8 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
    478a:	4630      	mov	r0, r6
    478c:	f01c fe87 	bl	2149e <fcb_free_sector_cnt>
    4790:	2800      	cmp	r0, #0
    4792:	dc0a      	bgt.n	47aa <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
    4794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
    4796:	6c20      	ldr	r0, [r4, #64]	; 0x40
    4798:	e9d3 1200 	ldrd	r1, r2, [r3]
    479c:	f01d f938 	bl	21a10 <flash_area_erase>
			if (rc) {
    47a0:	2800      	cmp	r0, #0
    47a2:	d0ec      	beq.n	477e <settings_fcb_src+0xe>
				return -EIO;
    47a4:	f06f 0504 	mvn.w	r5, #4
    47a8:	e004      	b.n	47b4 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
    47aa:	4b05      	ldr	r3, [pc, #20]	; (47c0 <settings_fcb_src+0x50>)
    47ac:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
    47ae:	4620      	mov	r0, r4
    47b0:	f7ff fd1c 	bl	41ec <settings_src_register>
}
    47b4:	4628      	mov	r0, r5
    47b6:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    47b8:	f06f 0515 	mvn.w	r5, #21
    47bc:	e7fa      	b.n	47b4 <settings_fcb_src+0x44>
    47be:	bf00      	nop
    47c0:	20006ddc 	.word	0x20006ddc

000047c4 <settings_fcb_dst>:
{
    47c4:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_fcb_itf;
    47c6:	4b03      	ldr	r3, [pc, #12]	; (47d4 <settings_fcb_dst+0x10>)
    47c8:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
    47ca:	f7ff fd2f 	bl	422c <settings_dst_register>
}
    47ce:	2000      	movs	r0, #0
    47d0:	bd08      	pop	{r3, pc}
    47d2:	bf00      	nop
    47d4:	20006ddc 	.word	0x20006ddc

000047d8 <settings_mount_fcb_backend>:
{
	u8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
    47d8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    47dc:	4a02      	ldr	r2, [pc, #8]	; (47e8 <settings_mount_fcb_backend+0x10>)
    47de:	4903      	ldr	r1, [pc, #12]	; (47ec <settings_mount_fcb_backend+0x14>)
    47e0:	4803      	ldr	r0, [pc, #12]	; (47f0 <settings_mount_fcb_backend+0x18>)
    47e2:	f7ff bed7 	b.w	4594 <settings_line_io_init>
    47e6:	bf00      	nop
    47e8:	00021c09 	.word	0x00021c09
    47ec:	00021c3f 	.word	0x00021c3f
    47f0:	00021c53 	.word	0x00021c53

000047f4 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    47f4:	280a      	cmp	r0, #10
{
    47f6:	b538      	push	{r3, r4, r5, lr}
    47f8:	4604      	mov	r4, r0
    47fa:	4d07      	ldr	r5, [pc, #28]	; (4818 <console_out+0x24>)
	if ('\n' == c) {
    47fc:	d104      	bne.n	4808 <console_out+0x14>
    47fe:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    4800:	6843      	ldr	r3, [r0, #4]
    4802:	210d      	movs	r1, #13
    4804:	685b      	ldr	r3, [r3, #4]
    4806:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4808:	6828      	ldr	r0, [r5, #0]
    480a:	6843      	ldr	r3, [r0, #4]
    480c:	b2e1      	uxtb	r1, r4
    480e:	685b      	ldr	r3, [r3, #4]
    4810:	4798      	blx	r3

	return c;
}
    4812:	4620      	mov	r0, r4
    4814:	bd38      	pop	{r3, r4, r5, pc}
    4816:	bf00      	nop
    4818:	200007d8 	.word	0x200007d8

0000481c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    481c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    481e:	4c04      	ldr	r4, [pc, #16]	; (4830 <uart_console_hook_install+0x14>)
    4820:	4620      	mov	r0, r4
    4822:	f001 fa55 	bl	5cd0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4826:	4620      	mov	r0, r4
}
    4828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    482c:	f7fe bb38 	b.w	2ea0 <__printk_hook_install>
    4830:	000047f5 	.word	0x000047f5

00004834 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    4834:	b508      	push	{r3, lr}
    4836:	4804      	ldr	r0, [pc, #16]	; (4848 <uart_console_init+0x14>)
    4838:	f019 fb7a 	bl	1df30 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    483c:	4b03      	ldr	r3, [pc, #12]	; (484c <uart_console_init+0x18>)
    483e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    4840:	f7ff ffec 	bl	481c <uart_console_hook_install>

	return 0;
}
    4844:	2000      	movs	r0, #0
    4846:	bd08      	pop	{r3, pc}
    4848:	00026677 	.word	0x00026677
    484c:	200007d8 	.word	0x200007d8

00004850 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    4850:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    4852:	4c04      	ldr	r4, [pc, #16]	; (4864 <rtt_console_init+0x14>)
    4854:	4620      	mov	r0, r4
    4856:	f7fe fb23 	bl	2ea0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    485a:	4620      	mov	r0, r4
    485c:	f001 fa38 	bl	5cd0 <__stdout_hook_install>

	return 0;
}
    4860:	2000      	movs	r0, #0
    4862:	bd10      	pop	{r4, pc}
    4864:	00004869 	.word	0x00004869

00004868 <rtt_console_out>:
{
    4868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    486c:	4f16      	ldr	r7, [pc, #88]	; (48c8 <rtt_console_out+0x60>)
    486e:	4d17      	ldr	r5, [pc, #92]	; (48cc <rtt_console_out+0x64>)
	char c = (char)character;
    4870:	f88d 0007 	strb.w	r0, [sp, #7]
{
    4874:	4606      	mov	r6, r0
	char c = (char)character;
    4876:	2403      	movs	r4, #3
    4878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    487c:	4638      	mov	r0, r7
    487e:	f019 fd8b 	bl	1e398 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    4882:	2201      	movs	r2, #1
    4884:	f10d 0107 	add.w	r1, sp, #7
    4888:	2000      	movs	r0, #0
    488a:	f7fe fecf 	bl	362c <SEGGER_RTT_WriteNoLock>
    488e:	4680      	mov	r8, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    4890:	4638      	mov	r0, r7
    4892:	f019 fded 	bl	1e470 <z_impl_k_mutex_unlock>
		if (cnt) {
    4896:	f1b8 0f00 	cmp.w	r8, #0
    489a:	d005      	beq.n	48a8 <rtt_console_out+0x40>
			host_present = true;
    489c:	2301      	movs	r3, #1
    489e:	702b      	strb	r3, [r5, #0]
}
    48a0:	4630      	mov	r0, r6
    48a2:	b002      	add	sp, #8
    48a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    48a8:	782b      	ldrb	r3, [r5, #0]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d0f8      	beq.n	48a0 <rtt_console_out+0x38>
			if (max_cnt) {
    48ae:	3c01      	subs	r4, #1
    48b0:	d007      	beq.n	48c2 <rtt_console_out+0x5a>
	if (k_is_in_isr()) {
    48b2:	f01a f979 	bl	1eba8 <k_is_in_isr>
    48b6:	2800      	cmp	r0, #0
    48b8:	d1de      	bne.n	4878 <rtt_console_out+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    48ba:	2002      	movs	r0, #2
    48bc:	f01a f8a4 	bl	1ea08 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    48c0:	e7da      	b.n	4878 <rtt_console_out+0x10>
				host_present = false;
    48c2:	702c      	strb	r4, [r5, #0]
    48c4:	e7ec      	b.n	48a0 <rtt_console_out+0x38>
    48c6:	bf00      	nop
    48c8:	200078d8 	.word	0x200078d8
    48cc:	200022bc 	.word	0x200022bc

000048d0 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    48d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    48d2:	f04f 0320 	mov.w	r3, #32
    48d6:	f3ef 8211 	mrs	r2, BASEPRI
    48da:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    48de:	4c15      	ldr	r4, [pc, #84]	; (4934 <_m16src_stop+0x64>)
    48e0:	7823      	ldrb	r3, [r4, #0]
    48e2:	b933      	cbnz	r3, 48f2 <_m16src_stop+0x22>
	__asm__ volatile(
    48e4:	f382 8811 	msr	BASEPRI, r2
    48e8:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    48ec:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    48f0:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    48f2:	3b01      	subs	r3, #1
    48f4:	b2db      	uxtb	r3, r3
    48f6:	7023      	strb	r3, [r4, #0]
    48f8:	b133      	cbz	r3, 4908 <_m16src_stop+0x38>
    48fa:	f382 8811 	msr	BASEPRI, r2
    48fe:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4902:	f06f 000f 	mvn.w	r0, #15
    4906:	e7f3      	b.n	48f0 <_m16src_stop+0x20>
	if (m16src_grd) {
    4908:	4b0b      	ldr	r3, [pc, #44]	; (4938 <_m16src_stop+0x68>)
    490a:	7818      	ldrb	r0, [r3, #0]
    490c:	2101      	movs	r1, #1
    490e:	b138      	cbz	r0, 4920 <_m16src_stop+0x50>
		m16src_ref++;
    4910:	7021      	strb	r1, [r4, #0]
    4912:	f382 8811 	msr	BASEPRI, r2
    4916:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    491a:	f06f 000a 	mvn.w	r0, #10
    491e:	e7e7      	b.n	48f0 <_m16src_stop+0x20>
	m16src_grd = 1U;
    4920:	7019      	strb	r1, [r3, #0]
    4922:	f382 8811 	msr	BASEPRI, r2
    4926:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    492a:	4a04      	ldr	r2, [pc, #16]	; (493c <_m16src_stop+0x6c>)
    492c:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
    492e:	7018      	strb	r0, [r3, #0]
	return 0;
    4930:	e7de      	b.n	48f0 <_m16src_stop+0x20>
    4932:	bf00      	nop
    4934:	200022bf 	.word	0x200022bf
    4938:	200022be 	.word	0x200022be
    493c:	40000004 	.word	0x40000004

00004940 <_m16src_start>:
{
    4940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4942:	f04f 0220 	mov.w	r2, #32
    4946:	f3ef 8311 	mrs	r3, BASEPRI
    494a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    494e:	4a29      	ldr	r2, [pc, #164]	; (49f4 <_m16src_start+0xb4>)
    4950:	7810      	ldrb	r0, [r2, #0]
    4952:	1c44      	adds	r4, r0, #1
    4954:	7014      	strb	r4, [r2, #0]
    4956:	b180      	cbz	r0, 497a <_m16src_start+0x3a>
	__asm__ volatile(
    4958:	f383 8811 	msr	BASEPRI, r3
    495c:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    4960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4964:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4968:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    496c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    4970:	bf0c      	ite	eq
    4972:	2000      	moveq	r0, #0
    4974:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    4978:	e009      	b.n	498e <_m16src_start+0x4e>
	if (m16src_grd) {
    497a:	4d1f      	ldr	r5, [pc, #124]	; (49f8 <_m16src_start+0xb8>)
    497c:	782f      	ldrb	r7, [r5, #0]
    497e:	b13f      	cbz	r7, 4990 <_m16src_start+0x50>
		m16src_ref--;
    4980:	7010      	strb	r0, [r2, #0]
    4982:	f383 8811 	msr	BASEPRI, r3
    4986:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    498a:	f06f 000a 	mvn.w	r0, #10
}
    498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    4990:	2601      	movs	r6, #1
    4992:	702e      	strb	r6, [r5, #0]
    4994:	f383 8811 	msr	BASEPRI, r3
    4998:	f3bf 8f6f 	isb	sy
	if (blocking) {
    499c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    49a0:	b319      	cbz	r1, 49ea <_m16src_start+0xaa>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    49a2:	4638      	mov	r0, r7
    49a4:	f000 fb9e 	bl	50e4 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    49a8:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    49ac:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    49b0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    49b4:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    49b6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    49ba:	b192      	cbz	r2, 49e2 <_m16src_start+0xa2>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    49bc:	2200      	movs	r2, #0
    49be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    49c2:	4a0e      	ldr	r2, [pc, #56]	; (49fc <_m16src_start+0xbc>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    49c4:	f013 0f01 	tst.w	r3, #1
    49c8:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    49cc:	bf08      	it	eq
    49ce:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    49d2:	2000      	movs	r0, #0
    49d4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    49d8:	f000 fb74 	bl	50c4 <z_arch_irq_enable>
	m16src_grd = 0U;
    49dc:	2300      	movs	r3, #0
    49de:	702b      	strb	r3, [r5, #0]
    49e0:	e7be      	b.n	4960 <_m16src_start+0x20>
			__WFE();
    49e2:	bf20      	wfe
			__SEV();
    49e4:	bf40      	sev
			__WFE();
    49e6:	bf20      	wfe
    49e8:	e7e5      	b.n	49b6 <_m16src_start+0x76>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    49ea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    49ee:	6026      	str	r6, [r4, #0]
    49f0:	e7f4      	b.n	49dc <_m16src_start+0x9c>
    49f2:	bf00      	nop
    49f4:	200022bf 	.word	0x200022bf
    49f8:	200022be 	.word	0x200022be
    49fc:	e000e100 	.word	0xe000e100

00004a00 <_k32src_start>:

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    4a00:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    4a02:	f04f 0220 	mov.w	r2, #32
    4a06:	f3ef 8311 	mrs	r3, BASEPRI
    4a0a:	f382 8811 	msr	BASEPRI, r2
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    4a0e:	4d24      	ldr	r5, [pc, #144]	; (4aa0 <_k32src_start+0xa0>)
    4a10:	782a      	ldrb	r2, [r5, #0]
    4a12:	b19a      	cbz	r2, 4a3c <_k32src_start+0x3c>
	__asm__ volatile(
    4a14:	f383 8811 	msr	BASEPRI, r3
    4a18:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    4a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4a20:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    4a24:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    4a28:	f003 0303 	and.w	r3, r3, #3
    4a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    4a30:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    4a32:	bf14      	ite	ne
    4a34:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    4a38:	2000      	moveq	r0, #0
    4a3a:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    4a3c:	2401      	movs	r4, #1
    4a3e:	702c      	strb	r4, [r5, #0]
    4a40:	f383 8811 	msr	BASEPRI, r3
    4a44:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    4a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a4c:	4e15      	ldr	r6, [pc, #84]	; (4aa4 <_k32src_start+0xa4>)
    4a4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    4a52:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    4a54:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    4a58:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    4a5c:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    4a60:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    4a62:	f04f 0618 	mov.w	r6, #24
    4a66:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    4a6a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    4a6e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    4a72:	d1d3      	bne.n	4a1c <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    4a74:	2210      	movs	r2, #16
    4a76:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    4a7a:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    4a7e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    4a82:	03d2      	lsls	r2, r2, #15
    4a84:	d402      	bmi.n	4a8c <_k32src_start+0x8c>
    4a86:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			goto lf_already_started;
    4a8a:	e7c7      	b.n	4a1c <_k32src_start+0x1c>
    4a8c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    4a90:	f7ff ff56 	bl	4940 <_m16src_start>
		if (!err) {
    4a94:	2800      	cmp	r0, #0
    4a96:	d1c1      	bne.n	4a1c <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a98:	4b03      	ldr	r3, [pc, #12]	; (4aa8 <_k32src_start+0xa8>)
    4a9a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    4a9e:	e7bd      	b.n	4a1c <_k32src_start+0x1c>
    4aa0:	200022bd 	.word	0x200022bd
    4aa4:	40000008 	.word	0x40000008
    4aa8:	e000e100 	.word	0xe000e100

00004aac <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    4aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    4aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    4ab2:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    4ab4:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    4ab8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    4abc:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100

	lf_intenset = ((NRF_CLOCK->INTENSET &
    4ac0:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    4ac4:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    4ac8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    4acc:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    4ad0:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    4ad2:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    4ad6:	bf18      	it	ne
    4ad8:	2401      	movne	r4, #1
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    4ada:	f1bc 0f00 	cmp.w	ip, #0
    4ade:	d003      	beq.n	4ae8 <nrf_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    4ae0:	f04f 0c00 	mov.w	ip, #0
    4ae4:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	}

	if (hf) {
    4ae8:	2f00      	cmp	r7, #0
    4aea:	d041      	beq.n	4b70 <nrf_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    4aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4af0:	2700      	movs	r7, #0
    4af2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    4af6:	b152      	cbz	r2, 4b0e <nrf_power_clock_isr+0x62>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    4af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    4afc:	4f22      	ldr	r7, [pc, #136]	; (4b88 <nrf_power_clock_isr+0xdc>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    4afe:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    4b00:	f04f 0c02 	mov.w	ip, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    4b04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    4b08:	f8c7 c000 	str.w	ip, [r7]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    4b0c:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    4b0e:	b9ee      	cbnz	r6, 4b4c <nrf_power_clock_isr+0xa0>
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    4b10:	b159      	cbz	r1, 4b2a <nrf_power_clock_isr+0x7e>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    4b12:	4b1d      	ldr	r3, [pc, #116]	; (4b88 <nrf_power_clock_isr+0xdc>)
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
    4b14:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    4b18:	2100      	movs	r1, #0
    4b1a:	6019      	str	r1, [r3, #0]

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    4b1c:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    4b1e:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    4b22:	f7ff fed5 	bl	48d0 <_m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    4b26:	2301      	movs	r3, #1
    4b28:	6173      	str	r3, [r6, #20]
	}

	if (ctto) {
    4b2a:	b174      	cbz	r4, 4b4a <nrf_power_clock_isr+0x9e>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    4b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b30:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    4b32:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    4b34:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

		err = _m16src_start(dev, false);
    4b38:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    4b3a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    4b3e:	f7ff feff 	bl	4940 <_m16src_start>
		if (!err) {
    4b42:	b910      	cbnz	r0, 4b4a <nrf_power_clock_isr+0x9e>
    4b44:	4b11      	ldr	r3, [pc, #68]	; (4b8c <nrf_power_clock_isr+0xe0>)
    4b46:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    4b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    4b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b50:	2200      	movs	r2, #0
    4b52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    4b56:	0782      	lsls	r2, r0, #30
    4b58:	d5da      	bpl.n	4b10 <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    4b5a:	2202      	movs	r2, #2
    4b5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    4b60:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4b64:	079b      	lsls	r3, r3, #30
    4b66:	d1d3      	bne.n	4b10 <nrf_power_clock_isr+0x64>
	if (done) {
    4b68:	2900      	cmp	r1, #0
    4b6a:	d0df      	beq.n	4b2c <nrf_power_clock_isr+0x80>
				ctto = 1U;
    4b6c:	2401      	movs	r4, #1
    4b6e:	e7d0      	b.n	4b12 <nrf_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    4b70:	2a00      	cmp	r2, #0
    4b72:	d0cc      	beq.n	4b0e <nrf_power_clock_isr+0x62>
    4b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b78:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4b7c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    4b80:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    4b84:	d1c3      	bne.n	4b0e <nrf_power_clock_isr+0x62>
    4b86:	e7b7      	b.n	4af8 <nrf_power_clock_isr+0x4c>
    4b88:	40000c34 	.word	0x40000c34
    4b8c:	e000e100 	.word	0xe000e100

00004b90 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    4b90:	4b0f      	ldr	r3, [pc, #60]	; (4bd0 <rtc1_nrf_isr+0x40>)
    4b92:	2200      	movs	r2, #0
{
    4b94:	b410      	push	{r4}
	RTC->EVENTS_COMPARE[0] = 0;
    4b96:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    4b9a:	f04f 0220 	mov.w	r2, #32
    4b9e:	f3ef 8411 	mrs	r4, BASEPRI
    4ba2:	f382 8811 	msr	BASEPRI, r2

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    4ba6:	4a0b      	ldr	r2, [pc, #44]	; (4bd4 <rtc1_nrf_isr+0x44>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    4ba8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    4bac:	6811      	ldr	r1, [r2, #0]
    4bae:	f240 1347 	movw	r3, #327	; 0x147
	return (a - b) & COUNTER_MAX;
    4bb2:	1a40      	subs	r0, r0, r1
    4bb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    4bb8:	fbb0 f0f3 	udiv	r0, r0, r3

	last_count += dticks * CYC_PER_TICK;
    4bbc:	fb03 1300 	mla	r3, r3, r0, r1
    4bc0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4bc2:	f384 8811 	msr	BASEPRI, r4
    4bc6:	f3bf 8f6f 	isb	sy
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    4bca:	bc10      	pop	{r4}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    4bcc:	f01a b9e0 	b.w	1ef90 <z_clock_announce>
    4bd0:	40011000 	.word	0x40011000
    4bd4:	200007dc 	.word	0x200007dc

00004bd8 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    4bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4bda:	481f      	ldr	r0, [pc, #124]	; (4c58 <z_clock_driver_init+0x80>)
    4bdc:	f019 f9a8 	bl	1df30 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
    4be0:	2800      	cmp	r0, #0
    4be2:	d035      	beq.n	4c50 <z_clock_driver_init+0x78>
	return api->on(dev, sys);
    4be4:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    4be6:	4d1d      	ldr	r5, [pc, #116]	; (4c5c <z_clock_driver_init+0x84>)
    4be8:	681b      	ldr	r3, [r3, #0]
    4bea:	2101      	movs	r1, #1
    4bec:	4798      	blx	r3
    4bee:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    4bf0:	f240 1347 	movw	r3, #327	; 0x147
    p_reg->PRESCALER = val;
    4bf4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    4bf8:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4c00:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
    4c04:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4c0c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4c14:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4c16:	681b      	ldr	r3, [r3, #0]
    4c18:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4c1a:	9b01      	ldr	r3, [sp, #4]
    4c1c:	4b10      	ldr	r3, [pc, #64]	; (4c60 <z_clock_driver_init+0x88>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    4c1e:	2101      	movs	r1, #1
    4c20:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4c24:	2011      	movs	r0, #17
    4c26:	4622      	mov	r2, r4
    4c28:	f000 fa7e 	bl	5128 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    4c2c:	2011      	movs	r0, #17
    4c2e:	f000 fa49 	bl	50c4 <z_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4c32:	4a0c      	ldr	r2, [pc, #48]	; (4c64 <z_clock_driver_init+0x8c>)
    4c34:	2301      	movs	r3, #1
    4c36:	6013      	str	r3, [r2, #0]
    4c38:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
    4c3a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    4c3e:	f203 1347 	addw	r3, r3, #327	; 0x147
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    4c42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4c46:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    4c4a:	4620      	mov	r0, r4
}
    4c4c:	b003      	add	sp, #12
    4c4e:	bd30      	pop	{r4, r5, pc}
		return -1;
    4c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4c54:	e7fa      	b.n	4c4c <z_clock_driver_init+0x74>
    4c56:	bf00      	nop
    4c58:	00026722 	.word	0x00026722
    4c5c:	40011000 	.word	0x40011000
    4c60:	e000e100 	.word	0xe000e100
    4c64:	40011008 	.word	0x40011008

00004c68 <z_clock_set_timeout>:
void z_clock_set_timeout(s32_t ticks, bool idle)
{
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    4c68:	f64c 0269 	movw	r2, #51305	; 0xc869
{
    4c6c:	b570      	push	{r4, r5, r6, lr}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    4c6e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4c72:	bf08      	it	eq
    4c74:	4610      	moveq	r0, r2
	__asm__ volatile(
    4c76:	f04f 0320 	mov.w	r3, #32
    4c7a:	f3ef 8411 	mrs	r4, BASEPRI
    4c7e:	f383 8811 	msr	BASEPRI, r3

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    4c82:	4d14      	ldr	r5, [pc, #80]	; (4cd4 <z_clock_set_timeout+0x6c>)
     return p_reg->COUNTER;
    4c84:	4914      	ldr	r1, [pc, #80]	; (4cd8 <z_clock_set_timeout+0x70>)
    4c86:	682e      	ldr	r6, [r5, #0]
    4c88:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    4c8c:	3801      	subs	r0, #1
    4c8e:	4290      	cmp	r0, r2
    4c90:	bfa8      	it	ge
    4c92:	4610      	movge	r0, r2
	return (a - b) & COUNTER_MAX;
    4c94:	1b9a      	subs	r2, r3, r6
    4c96:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    4c9a:	f240 1547 	movw	r5, #327	; 0x147
    4c9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += (CYC_PER_TICK - 1);
    4ca2:	f502 72a3 	add.w	r2, r2, #326	; 0x146
    4ca6:	fb05 2000 	mla	r0, r5, r0, r2
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    4caa:	fbb0 f0f5 	udiv	r0, r0, r5
	cyc += last_count;
    4cae:	fb05 6000 	mla	r0, r5, r0, r6
	return (a - b) & COUNTER_MAX;
    4cb2:	1ac3      	subs	r3, r0, r3

	if (counter_sub(cyc, t) < MIN_DELAY) {
    4cb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4cb8:	f023 031f 	bic.w	r3, r3, #31
    4cbc:	b903      	cbnz	r3, 4cc0 <z_clock_set_timeout+0x58>
		cyc += CYC_PER_TICK;
    4cbe:	4428      	add	r0, r5
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    4cc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4cc4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
	__asm__ volatile(
    4cc8:	f384 8811 	msr	BASEPRI, r4
    4ccc:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
    4cd0:	bd70      	pop	{r4, r5, r6, pc}
    4cd2:	bf00      	nop
    4cd4:	200007dc 	.word	0x200007dc
    4cd8:	40011000 	.word	0x40011000

00004cdc <z_clock_elapsed>:
	__asm__ volatile(
    4cdc:	f04f 0220 	mov.w	r2, #32
    4ce0:	f3ef 8311 	mrs	r3, BASEPRI
    4ce4:	f382 8811 	msr	BASEPRI, r2
     return p_reg->COUNTER;
    4ce8:	4a08      	ldr	r2, [pc, #32]	; (4d0c <z_clock_elapsed+0x30>)
    4cea:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    4cee:	4a08      	ldr	r2, [pc, #32]	; (4d10 <z_clock_elapsed+0x34>)
	return (a - b) & COUNTER_MAX;
    4cf0:	6812      	ldr	r2, [r2, #0]
    4cf2:	1a80      	subs	r0, r0, r2
    4cf4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    4cf8:	f240 1247 	movw	r2, #327	; 0x147
    4cfc:	fbb0 f0f2 	udiv	r0, r0, r2
	__asm__ volatile(
    4d00:	f383 8811 	msr	BASEPRI, r3
    4d04:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    4d08:	4770      	bx	lr
    4d0a:	bf00      	nop
    4d0c:	40011000 	.word	0x40011000
    4d10:	200007dc 	.word	0x200007dc

00004d14 <z_timer_cycle_get_32>:
	__asm__ volatile(
    4d14:	f04f 0320 	mov.w	r3, #32
    4d18:	f3ef 8211 	mrs	r2, BASEPRI
    4d1c:	f383 8811 	msr	BASEPRI, r3

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    4d20:	4906      	ldr	r1, [pc, #24]	; (4d3c <z_timer_cycle_get_32+0x28>)
    4d22:	4b07      	ldr	r3, [pc, #28]	; (4d40 <z_timer_cycle_get_32+0x2c>)
    4d24:	6808      	ldr	r0, [r1, #0]
    4d26:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    4d2a:	f382 8811 	msr	BASEPRI, r2
    4d2e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    4d32:	1a1b      	subs	r3, r3, r0
    4d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    4d38:	4418      	add	r0, r3
    4d3a:	4770      	bx	lr
    4d3c:	200007dc 	.word	0x200007dc
    4d40:	40011000 	.word	0x40011000

00004d44 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    4d44:	4804      	ldr	r0, [pc, #16]	; (4d58 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    4d46:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    4d48:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    4d4a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    4d4c:	d003      	beq.n	4d56 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    4d4e:	4903      	ldr	r1, [pc, #12]	; (4d5c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    4d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    4d54:	600a      	str	r2, [r1, #0]

00004d56 <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    4d56:	4770      	bx	lr
    ldr r0, =_kernel
    4d58:	20001cf0 	.word	0x20001cf0
    ldr r1, =_SCS_ICSR
    4d5c:	e000ed04 	.word	0xe000ed04

00004d60 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4d60:	4804      	ldr	r0, [pc, #16]	; (4d74 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    4d62:	2300      	movs	r3, #0
    4d64:	2120      	movs	r1, #32
    4d66:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4d68:	3301      	adds	r3, #1
    4d6a:	2b27      	cmp	r3, #39	; 0x27
    4d6c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4d70:	d1f9      	bne.n	4d66 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4d72:	4770      	bx	lr
    4d74:	e000e100 	.word	0xe000e100

00004d78 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    4d78:	4a09      	ldr	r2, [pc, #36]	; (4da0 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    4d7a:	490a      	ldr	r1, [pc, #40]	; (4da4 <__swap+0x2c>)
	_current->arch.basepri = key;
    4d7c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4d7e:	6809      	ldr	r1, [r1, #0]
    4d80:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4d82:	4909      	ldr	r1, [pc, #36]	; (4da8 <__swap+0x30>)
	_current->arch.basepri = key;
    4d84:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4d86:	684b      	ldr	r3, [r1, #4]
    4d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4d8c:	604b      	str	r3, [r1, #4]
    4d8e:	2300      	movs	r3, #0
    4d90:	f383 8811 	msr	BASEPRI, r3
    4d94:	f3bf 8f6f 	isb	sy

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    4d98:	6893      	ldr	r3, [r2, #8]
}
    4d9a:	6e98      	ldr	r0, [r3, #104]	; 0x68
    4d9c:	4770      	bx	lr
    4d9e:	bf00      	nop
    4da0:	20001cf0 	.word	0x20001cf0
    4da4:	000263c8 	.word	0x000263c8
    4da8:	e000ed00 	.word	0xe000ed00

00004dac <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4dac:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4dae:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4db2:	4911      	ldr	r1, [pc, #68]	; (4df8 <__pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4db4:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4db6:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    4dba:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    4dbc:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4dc0:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    4dc4:	4f0d      	ldr	r7, [pc, #52]	; (4dfc <__pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4dc6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4dca:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    4dcc:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    4dce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4dd0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    4dd2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4dd4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4dd6:	f380 8811 	msr	BASEPRI, r0
    vldmia r0, {s16-s31}
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4dda:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    4ddc:	4806      	ldr	r0, [pc, #24]	; (4df8 <__pendsv+0x4c>)
    ldr r0, [r0, #_kernel_offset_to_current]
    4dde:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    4de0:	f01c ff6e 	bl	21cc0 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4de4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4de8:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    4dec:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    4df0:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    4df4:	4770      	bx	lr
    4df6:	0000      	.short	0x0000
    ldr r1, =_kernel
    4df8:	20001cf0 	.word	0x20001cf0
    ldr v4, =_SCS_ICSR
    4dfc:	e000ed04 	.word	0xe000ed04

00004e00 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    4e00:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4e04:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4e06:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4e0a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4e0e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    4e10:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    4e14:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    4e18:	2902      	cmp	r1, #2
    beq _oops
    4e1a:	d0ff      	beq.n	4e1c <_oops>

00004e1c <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    4e1c:	b501      	push	{r0, lr}
    bl _do_kernel_oops
    4e1e:	f01c ff40 	bl	21ca2 <_do_kernel_oops>
    pop {r0, pc}
    4e22:	bd01      	pop	{r0, pc}

00004e24 <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    4e24:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4e26:	4c1c      	ldr	r4, [pc, #112]	; (4e98 <_MpuFault.isra.2+0x74>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    4e28:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    4e2a:	481c      	ldr	r0, [pc, #112]	; (4e9c <_MpuFault.isra.2+0x78>)
    4e2c:	f01a fda3 	bl	1f976 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4e30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4e32:	06d1      	lsls	r1, r2, #27
    4e34:	d502      	bpl.n	4e3c <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4e36:	481a      	ldr	r0, [pc, #104]	; (4ea0 <_MpuFault.isra.2+0x7c>)
    4e38:	f01a fd9d 	bl	1f976 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e3e:	071a      	lsls	r2, r3, #28
    4e40:	d502      	bpl.n	4e48 <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    4e42:	4818      	ldr	r0, [pc, #96]	; (4ea4 <_MpuFault.isra.2+0x80>)
    4e44:	f01a fd97 	bl	1f976 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4e48:	4c13      	ldr	r4, [pc, #76]	; (4e98 <_MpuFault.isra.2+0x74>)
    4e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e4c:	079b      	lsls	r3, r3, #30
    4e4e:	d50e      	bpl.n	4e6e <_MpuFault.isra.2+0x4a>
		PR_FAULT_INFO("  Data Access Violation\n");
    4e50:	4815      	ldr	r0, [pc, #84]	; (4ea8 <_MpuFault.isra.2+0x84>)
    4e52:	f01a fd90 	bl	1f976 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    4e56:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4e58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e5a:	0618      	lsls	r0, r3, #24
    4e5c:	d507      	bpl.n	4e6e <_MpuFault.isra.2+0x4a>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    4e5e:	4813      	ldr	r0, [pc, #76]	; (4eac <_MpuFault.isra.2+0x88>)
    4e60:	f01a fd89 	bl	1f976 <printk>
			if (fromHardFault) {
    4e64:	b11d      	cbz	r5, 4e6e <_MpuFault.isra.2+0x4a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4e66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4e6c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4e6e:	4c0a      	ldr	r4, [pc, #40]	; (4e98 <_MpuFault.isra.2+0x74>)
    4e70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4e72:	07d2      	lsls	r2, r2, #31
    4e74:	d502      	bpl.n	4e7c <_MpuFault.isra.2+0x58>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    4e76:	480e      	ldr	r0, [pc, #56]	; (4eb0 <_MpuFault.isra.2+0x8c>)
    4e78:	f01a fd7d 	bl	1f976 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4e7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e7e:	069b      	lsls	r3, r3, #26
    4e80:	d502      	bpl.n	4e88 <_MpuFault.isra.2+0x64>
		PR_FAULT_INFO(
    4e82:	480c      	ldr	r0, [pc, #48]	; (4eb4 <_MpuFault.isra.2+0x90>)
    4e84:	f01a fd77 	bl	1f976 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    4e88:	4b03      	ldr	r3, [pc, #12]	; (4e98 <_MpuFault.isra.2+0x74>)
    4e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e8e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4e92:	629a      	str	r2, [r3, #40]	; 0x28
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    4e94:	2000      	movs	r0, #0
    4e96:	bd38      	pop	{r3, r4, r5, pc}
    4e98:	e000ed00 	.word	0xe000ed00
    4e9c:	000268a1 	.word	0x000268a1
    4ea0:	000268b8 	.word	0x000268b8
    4ea4:	000268ec 	.word	0x000268ec
    4ea8:	00026900 	.word	0x00026900
    4eac:	00026919 	.word	0x00026919
    4eb0:	00026930 	.word	0x00026930
    4eb4:	00026950 	.word	0x00026950

00004eb8 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    4eb8:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4eba:	4c1e      	ldr	r4, [pc, #120]	; (4f34 <_BusFault.isra.3+0x7c>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    4ebc:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    4ebe:	481e      	ldr	r0, [pc, #120]	; (4f38 <_BusFault.isra.3+0x80>)
    4ec0:	f01a fd59 	bl	1f976 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4ec4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4ec6:	04d1      	lsls	r1, r2, #19
    4ec8:	d502      	bpl.n	4ed0 <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    4eca:	481c      	ldr	r0, [pc, #112]	; (4f3c <_BusFault.isra.3+0x84>)
    4ecc:	f01a fd53 	bl	1f976 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4ed0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4ed2:	051a      	lsls	r2, r3, #20
    4ed4:	d502      	bpl.n	4edc <_BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    4ed6:	481a      	ldr	r0, [pc, #104]	; (4f40 <_BusFault.isra.3+0x88>)
    4ed8:	f01a fd4d 	bl	1f976 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4edc:	4c15      	ldr	r4, [pc, #84]	; (4f34 <_BusFault.isra.3+0x7c>)
    4ede:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4ee0:	059b      	lsls	r3, r3, #22
    4ee2:	d50e      	bpl.n	4f02 <_BusFault.isra.3+0x4a>
		PR_FAULT_INFO("  Precise data bus error\n");
    4ee4:	4817      	ldr	r0, [pc, #92]	; (4f44 <_BusFault.isra.3+0x8c>)
    4ee6:	f01a fd46 	bl	1f976 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4eea:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4eee:	0418      	lsls	r0, r3, #16
    4ef0:	d507      	bpl.n	4f02 <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    4ef2:	4815      	ldr	r0, [pc, #84]	; (4f48 <_BusFault.isra.3+0x90>)
    4ef4:	f01a fd3f 	bl	1f976 <printk>
			if (fromHardFault) {
    4ef8:	b11d      	cbz	r5, 4f02 <_BusFault.isra.3+0x4a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4efa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4efc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4f00:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4f02:	4c0c      	ldr	r4, [pc, #48]	; (4f34 <_BusFault.isra.3+0x7c>)
    4f04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4f06:	0559      	lsls	r1, r3, #21
    4f08:	d502      	bpl.n	4f10 <_BusFault.isra.3+0x58>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    4f0a:	4810      	ldr	r0, [pc, #64]	; (4f4c <_BusFault.isra.3+0x94>)
    4f0c:	f01a fd33 	bl	1f976 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4f10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4f12:	05da      	lsls	r2, r3, #23
    4f14:	d509      	bpl.n	4f2a <_BusFault.isra.3+0x72>
		PR_FAULT_INFO("  Instruction bus error\n");
    4f16:	480e      	ldr	r0, [pc, #56]	; (4f50 <_BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    4f18:	f01a fd2d 	bl	1f976 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4f1c:	4a05      	ldr	r2, [pc, #20]	; (4f34 <_BusFault.isra.3+0x7c>)
    4f1e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4f20:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4f24:	6293      	str	r3, [r2, #40]	; 0x28
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    4f26:	2000      	movs	r0, #0
    4f28:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4f2c:	049b      	lsls	r3, r3, #18
    4f2e:	d5f5      	bpl.n	4f1c <_BusFault.isra.3+0x64>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    4f30:	4808      	ldr	r0, [pc, #32]	; (4f54 <_BusFault.isra.3+0x9c>)
    4f32:	e7f1      	b.n	4f18 <_BusFault.isra.3+0x60>
    4f34:	e000ed00 	.word	0xe000ed00
    4f38:	00026740 	.word	0x00026740
    4f3c:	00026757 	.word	0x00026757
    4f40:	000268ec 	.word	0x000268ec
    4f44:	00026769 	.word	0x00026769
    4f48:	00026783 	.word	0x00026783
    4f4c:	00026799 	.word	0x00026799
    4f50:	000267b5 	.word	0x000267b5
    4f54:	00026950 	.word	0x00026950

00004f58 <_UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    4f58:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4f5a:	4c19      	ldr	r4, [pc, #100]	; (4fc0 <_UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    4f5c:	4819      	ldr	r0, [pc, #100]	; (4fc4 <_UsageFault.isra.4+0x6c>)
    4f5e:	f01a fd0a 	bl	1f976 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4f62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f64:	0193      	lsls	r3, r2, #6
    4f66:	d502      	bpl.n	4f6e <_UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    4f68:	4817      	ldr	r0, [pc, #92]	; (4fc8 <_UsageFault.isra.4+0x70>)
    4f6a:	f01a fd04 	bl	1f976 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4f6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4f70:	01dc      	lsls	r4, r3, #7
    4f72:	d502      	bpl.n	4f7a <_UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    4f74:	4815      	ldr	r0, [pc, #84]	; (4fcc <_UsageFault.isra.4+0x74>)
    4f76:	f01a fcfe 	bl	1f976 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4f7a:	4c11      	ldr	r4, [pc, #68]	; (4fc0 <_UsageFault.isra.4+0x68>)
    4f7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f7e:	0310      	lsls	r0, r2, #12
    4f80:	d502      	bpl.n	4f88 <_UsageFault.isra.4+0x30>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    4f82:	4813      	ldr	r0, [pc, #76]	; (4fd0 <_UsageFault.isra.4+0x78>)
    4f84:	f01a fcf7 	bl	1f976 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4f88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4f8a:	0359      	lsls	r1, r3, #13
    4f8c:	d502      	bpl.n	4f94 <_UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    4f8e:	4811      	ldr	r0, [pc, #68]	; (4fd4 <_UsageFault.isra.4+0x7c>)
    4f90:	f01a fcf1 	bl	1f976 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4f94:	4c0a      	ldr	r4, [pc, #40]	; (4fc0 <_UsageFault.isra.4+0x68>)
    4f96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f98:	0392      	lsls	r2, r2, #14
    4f9a:	d502      	bpl.n	4fa2 <_UsageFault.isra.4+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    4f9c:	480e      	ldr	r0, [pc, #56]	; (4fd8 <_UsageFault.isra.4+0x80>)
    4f9e:	f01a fcea 	bl	1f976 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4fa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4fa4:	03db      	lsls	r3, r3, #15
    4fa6:	d502      	bpl.n	4fae <_UsageFault.isra.4+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    4fa8:	480c      	ldr	r0, [pc, #48]	; (4fdc <_UsageFault.isra.4+0x84>)
    4faa:	f01a fce4 	bl	1f976 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4fae:	4a04      	ldr	r2, [pc, #16]	; (4fc0 <_UsageFault.isra.4+0x68>)
    4fb0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4fb2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4fb6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4fba:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4fbc:	2000      	movs	r0, #0
    4fbe:	bd10      	pop	{r4, pc}
    4fc0:	e000ed00 	.word	0xe000ed00
    4fc4:	00026980 	.word	0x00026980
    4fc8:	00026999 	.word	0x00026999
    4fcc:	000269ad 	.word	0x000269ad
    4fd0:	000269c8 	.word	0x000269c8
    4fd4:	000269e7 	.word	0x000269e7
    4fd8:	00026a0d 	.word	0x00026a0d
    4fdc:	00026a28 	.word	0x00026a28

00004fe0 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    4fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4fe2:	4d29      	ldr	r5, [pc, #164]	; (5088 <_Fault+0xa8>)
    4fe4:	686e      	ldr	r6, [r5, #4]
    4fe6:	f3c6 0408 	ubfx	r4, r6, #0, #9
{
    4fea:	4607      	mov	r7, r0

	LOG_PANIC();
    4fec:	f7fe fcc6 	bl	397c <log_panic>
	switch (fault) {
    4ff0:	1ee3      	subs	r3, r4, #3
    4ff2:	2b09      	cmp	r3, #9
    4ff4:	d83b      	bhi.n	506e <_Fault+0x8e>
    4ff6:	e8df f003 	tbb	[pc, r3]
    4ffa:	3405      	.short	0x3405
    4ffc:	3a3a2936 	.word	0x3a3a2936
    5000:	383a3a3a 	.word	0x383a3a3a
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    5004:	4821      	ldr	r0, [pc, #132]	; (508c <_Fault+0xac>)
    5006:	f01a fcb6 	bl	1f976 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    500a:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    500c:	f014 0402 	ands.w	r4, r4, #2
    5010:	d004      	beq.n	501c <_Fault+0x3c>
		PR_EXC("  Bus fault on vector table read\n");
    5012:	481f      	ldr	r0, [pc, #124]	; (5090 <_Fault+0xb0>)
	PR_FAULT_INFO(
    5014:	f01a fcaf 	bl	1f976 <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    5018:	2400      	movs	r4, #0
    501a:	e01c      	b.n	5056 <_Fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    501c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    501e:	005b      	lsls	r3, r3, #1
    5020:	d519      	bpl.n	5056 <_Fault+0x76>
		PR_EXC("  Fault escalation (see below)\n");
    5022:	481c      	ldr	r0, [pc, #112]	; (5094 <_Fault+0xb4>)
    5024:	f01a fca7 	bl	1f976 <printk>
		if (SCB_MMFSR != 0) {
    5028:	4b1b      	ldr	r3, [pc, #108]	; (5098 <_Fault+0xb8>)
    502a:	781b      	ldrb	r3, [r3, #0]
    502c:	b11b      	cbz	r3, 5036 <_Fault+0x56>
			reason = _MpuFault(esf, 1);
    502e:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    5030:	f7ff fef8 	bl	4e24 <_MpuFault.isra.2>
    5034:	e00c      	b.n	5050 <_Fault+0x70>
		} else if (SCB_BFSR != 0) {
    5036:	4b19      	ldr	r3, [pc, #100]	; (509c <_Fault+0xbc>)
    5038:	781b      	ldrb	r3, [r3, #0]
    503a:	b11b      	cbz	r3, 5044 <_Fault+0x64>
			reason = _BusFault(esf, 1);
    503c:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    503e:	f7ff ff3b 	bl	4eb8 <_BusFault.isra.3>
    5042:	e005      	b.n	5050 <_Fault+0x70>
		} else if (SCB_UFSR != 0) {
    5044:	4b16      	ldr	r3, [pc, #88]	; (50a0 <_Fault+0xc0>)
    5046:	881b      	ldrh	r3, [r3, #0]
    5048:	b29b      	uxth	r3, r3
    504a:	b123      	cbz	r3, 5056 <_Fault+0x76>
			reason = _UsageFault(esf);
    504c:	f7ff ff84 	bl	4f58 <_UsageFault.isra.4>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = _FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
    5050:	2806      	cmp	r0, #6
			reason = _UsageFault(esf);
    5052:	4604      	mov	r4, r0
	if (reason == _NANO_ERR_RECOVERABLE) {
    5054:	d017      	beq.n	5086 <_Fault+0xa6>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    5056:	4639      	mov	r1, r7
    5058:	4620      	mov	r0, r4
}
    505a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_NanoFatalErrorHandler(reason, esf);
    505e:	f000 b8d7 	b.w	5210 <z_NanoFatalErrorHandler>
		reason = _MpuFault(esf, 0);
    5062:	2000      	movs	r0, #0
    5064:	e7e4      	b.n	5030 <_Fault+0x50>
		reason = _BusFault(esf, 0);
    5066:	2000      	movs	r0, #0
    5068:	e7e9      	b.n	503e <_Fault+0x5e>
	PR_FAULT_INFO(
    506a:	480e      	ldr	r0, [pc, #56]	; (50a4 <_Fault+0xc4>)
    506c:	e7d2      	b.n	5014 <_Fault+0x34>
	PR_FAULT_INFO("***** %s %d) *****\n",
    506e:	4b0e      	ldr	r3, [pc, #56]	; (50a8 <_Fault+0xc8>)
    5070:	490e      	ldr	r1, [pc, #56]	; (50ac <_Fault+0xcc>)
    5072:	480f      	ldr	r0, [pc, #60]	; (50b0 <_Fault+0xd0>)
    5074:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    5078:	f1a4 0210 	sub.w	r2, r4, #16
    507c:	bf18      	it	ne
    507e:	4619      	movne	r1, r3
    5080:	f01a fc79 	bl	1f976 <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
    5084:	e7c8      	b.n	5018 <_Fault+0x38>
}
    5086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5088:	e000ed00 	.word	0xe000ed00
    508c:	000267fc 	.word	0x000267fc
    5090:	00026814 	.word	0x00026814
    5094:	00026836 	.word	0x00026836
    5098:	e000ed28 	.word	0xe000ed28
    509c:	e000ed29 	.word	0xe000ed29
    50a0:	e000ed2a 	.word	0xe000ed2a
    50a4:	00026856 	.word	0x00026856
    50a8:	000267e3 	.word	0x000267e3
    50ac:	000267ce 	.word	0x000267ce
    50b0:	0002688d 	.word	0x0002688d

000050b4 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    50b4:	4a02      	ldr	r2, [pc, #8]	; (50c0 <_FaultInit+0xc>)
    50b6:	6953      	ldr	r3, [r2, #20]
    50b8:	f043 0310 	orr.w	r3, r3, #16
    50bc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    50be:	4770      	bx	lr
    50c0:	e000ed00 	.word	0xe000ed00

000050c4 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    50c4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    50c6:	2b00      	cmp	r3, #0
    50c8:	db08      	blt.n	50dc <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50ca:	2201      	movs	r2, #1
    50cc:	f000 001f 	and.w	r0, r0, #31
    50d0:	fa02 f000 	lsl.w	r0, r2, r0
    50d4:	095b      	lsrs	r3, r3, #5
    50d6:	4a02      	ldr	r2, [pc, #8]	; (50e0 <z_arch_irq_enable+0x1c>)
    50d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    50dc:	4770      	bx	lr
    50de:	bf00      	nop
    50e0:	e000e100 	.word	0xe000e100

000050e4 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    50e4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    50e6:	2b00      	cmp	r3, #0
    50e8:	db0d      	blt.n	5106 <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50ea:	2201      	movs	r2, #1
    50ec:	095b      	lsrs	r3, r3, #5
    50ee:	f000 001f 	and.w	r0, r0, #31
    50f2:	fa02 f000 	lsl.w	r0, r2, r0
    50f6:	3320      	adds	r3, #32
    50f8:	4a03      	ldr	r2, [pc, #12]	; (5108 <z_arch_irq_disable+0x24>)
    50fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    50fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5102:	f3bf 8f6f 	isb	sy
}
    5106:	4770      	bx	lr
    5108:	e000e100 	.word	0xe000e100

0000510c <z_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int z_arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    510c:	0942      	lsrs	r2, r0, #5
    510e:	4b05      	ldr	r3, [pc, #20]	; (5124 <z_arch_irq_is_enabled+0x18>)
    5110:	f000 001f 	and.w	r0, r0, #31
    5114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5118:	2301      	movs	r3, #1
    511a:	fa03 f000 	lsl.w	r0, r3, r0
}
    511e:	4010      	ands	r0, r2
    5120:	4770      	bx	lr
    5122:	bf00      	nop
    5124:	e000e100 	.word	0xe000e100

00005128 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5128:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    512a:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    512c:	bfa8      	it	ge
    512e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    5132:	f101 0101 	add.w	r1, r1, #1
    5136:	ea4f 1141 	mov.w	r1, r1, lsl #5
    513a:	bfae      	itee	ge
    513c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5140:	f000 000f 	andlt.w	r0, r0, #15
    5144:	4b03      	ldrlt	r3, [pc, #12]	; (5154 <z_irq_priority_set+0x2c>)
    5146:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5148:	bfac      	ite	ge
    514a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    514e:	5419      	strblt	r1, [r3, r0]
}
    5150:	4770      	bx	lr
    5152:	bf00      	nop
    5154:	e000ed14 	.word	0xe000ed14

00005158 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    5158:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    515a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    515c:	4b04      	ldr	r3, [pc, #16]	; (5170 <_arch_isr_direct_pm+0x18>)
    515e:	6a18      	ldr	r0, [r3, #32]
    5160:	b118      	cbz	r0, 516a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    5162:	2200      	movs	r2, #0
    5164:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    5166:	f01f fec2 	bl	24eee <z_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    516a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    516c:	bd08      	pop	{r3, pc}
    516e:	bf00      	nop
    5170:	20001cf0 	.word	0x20001cf0

00005174 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    5174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5178:	460f      	mov	r7, r1
    517a:	4605      	mov	r5, r0
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackEnd = pStackMem + stackSize - MPU_GUARD_ALIGN_AND_SIZE;
#else
	stackEnd = pStackMem + stackSize;
    517c:	188c      	adds	r4, r1, r2
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
    517e:	4638      	mov	r0, r7
    5180:	21aa      	movs	r1, #170	; 0xaa
{
    5182:	4690      	mov	r8, r2
    5184:	461e      	mov	r6, r3
    5186:	f01c fea8 	bl	21eda <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    518a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    518c:	9909      	ldr	r1, [sp, #36]	; 0x24
    518e:	2204      	movs	r2, #4
    5190:	4628      	mov	r0, r5
    5192:	f020 f8f0 	bl	25376 <z_init_thread_base>

	_new_thread_init(thread, pStackMem, stackSize, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    5196:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    519a:	490c      	ldr	r1, [pc, #48]	; (51cc <z_new_thread+0x58>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    519c:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    51a0:	2200      	movs	r2, #0
	pInitCtx->pc &= 0xfffffffe;
    51a2:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    51a6:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    51aa:	e9c5 7816 	strd	r7, r8, [r5, #88]	; 0x58
    51ae:	6199      	str	r1, [r3, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    51b0:	9906      	ldr	r1, [sp, #24]
    51b2:	6059      	str	r1, [r3, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    51b4:	9907      	ldr	r1, [sp, #28]
    51b6:	6099      	str	r1, [r3, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    51b8:	9908      	ldr	r1, [sp, #32]
    51ba:	60d9      	str	r1, [r3, #12]
	pInitCtx->xpsr =
    51bc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    51c0:	601e      	str	r6, [r3, #0]
	pInitCtx->xpsr =
    51c2:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    51c4:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    51c6:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    51c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51cc:	0001f63d 	.word	0x0001f63d

000051d0 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    51d0:	4901      	ldr	r1, [pc, #4]	; (51d8 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    51d2:	2210      	movs	r2, #16
	str r2, [r1]
    51d4:	600a      	str	r2, [r1, #0]
	bx lr
    51d6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    51d8:	e000ed10 	.word	0xe000ed10

000051dc <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    51dc:	4040      	eors	r0, r0
	msr BASEPRI, r0
    51de:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    51e2:	bf30      	wfi

	bx lr
    51e4:	4770      	bx	lr
    51e6:	bf00      	nop

000051e8 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    51e8:	4040      	eors	r0, r0
	msr BASEPRI, r0
    51ea:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    51ee:	f8df c01c 	ldr.w	ip, [pc, #28]	; 520c <__bus_fault+0x24>
	ldr ip, [ip]
    51f2:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    51f6:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    51fa:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    51fc:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    5200:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    5204:	b501      	push	{r0, lr}
	bl _Fault
    5206:	f7ff feeb 	bl	4fe0 <_Fault>

	pop {r0, pc}
    520a:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    520c:	e000ed04 	.word	0xe000ed04

00005210 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    5210:	b538      	push	{r3, r4, r5, lr}
    5212:	4604      	mov	r4, r0
    5214:	460d      	mov	r5, r1
	LOG_PANIC();
    5216:	f7fe fbb1 	bl	397c <log_panic>

	switch (reason) {
    521a:	2c05      	cmp	r4, #5
    521c:	d81a      	bhi.n	5254 <z_NanoFatalErrorHandler+0x44>
    521e:	e8df f004 	tbb	[pc, r4]
    5222:	1903      	.short	0x1903
    5224:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    5228:	480d      	ldr	r0, [pc, #52]	; (5260 <z_NanoFatalErrorHandler+0x50>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    522a:	f01a fba4 	bl	1f976 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    522e:	f019 fc51 	bl	1ead4 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    5232:	69aa      	ldr	r2, [r5, #24]
    5234:	4601      	mov	r1, r0
    5236:	480b      	ldr	r0, [pc, #44]	; (5264 <z_NanoFatalErrorHandler+0x54>)
    5238:	f01a fb9d 	bl	1f976 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    523c:	4629      	mov	r1, r5
    523e:	4620      	mov	r0, r4
}
    5240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
    5244:	f000 b818 	b.w	5278 <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    5248:	4807      	ldr	r0, [pc, #28]	; (5268 <z_NanoFatalErrorHandler+0x58>)
    524a:	e7ee      	b.n	522a <z_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel OOPS! *****\n");
    524c:	4807      	ldr	r0, [pc, #28]	; (526c <z_NanoFatalErrorHandler+0x5c>)
    524e:	e7ec      	b.n	522a <z_NanoFatalErrorHandler+0x1a>
		printk("***** Kernel Panic! *****\n");
    5250:	4807      	ldr	r0, [pc, #28]	; (5270 <z_NanoFatalErrorHandler+0x60>)
    5252:	e7ea      	b.n	522a <z_NanoFatalErrorHandler+0x1a>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    5254:	4621      	mov	r1, r4
    5256:	4807      	ldr	r0, [pc, #28]	; (5274 <z_NanoFatalErrorHandler+0x64>)
    5258:	f01a fb8d 	bl	1f976 <printk>
		break;
    525c:	e7e7      	b.n	522e <z_NanoFatalErrorHandler+0x1e>
    525e:	bf00      	nop
    5260:	00026a54 	.word	0x00026a54
    5264:	00026af2 	.word	0x00026af2
    5268:	00026a74 	.word	0x00026a74
    526c:	00026a9a 	.word	0x00026a9a
    5270:	00026ab4 	.word	0x00026ab4
    5274:	00026acf 	.word	0x00026acf

00005278 <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    5278:	2805      	cmp	r0, #5
{
    527a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    527c:	d00c      	beq.n	5298 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    527e:	f019 fc93 	bl	1eba8 <k_is_in_isr>
    5282:	b160      	cbz	r0, 529e <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    5284:	f019 fc90 	bl	1eba8 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    5288:	490c      	ldr	r1, [pc, #48]	; (52bc <z_SysFatalErrorHandler+0x44>)
    528a:	4b0d      	ldr	r3, [pc, #52]	; (52c0 <z_SysFatalErrorHandler+0x48>)
    528c:	2800      	cmp	r0, #0
    528e:	bf08      	it	eq
    5290:	4619      	moveq	r1, r3
    5292:	480c      	ldr	r0, [pc, #48]	; (52c4 <z_SysFatalErrorHandler+0x4c>)
    5294:	f01a fb6f 	bl	1f976 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    5298:	f7ff ffa0 	bl	51dc <k_cpu_idle>
    529c:	e7fc      	b.n	5298 <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
    529e:	f019 fc93 	bl	1ebc8 <z_is_thread_essential>
    52a2:	2800      	cmp	r0, #0
    52a4:	d1ee      	bne.n	5284 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    52a6:	4c08      	ldr	r4, [pc, #32]	; (52c8 <z_SysFatalErrorHandler+0x50>)
    52a8:	4808      	ldr	r0, [pc, #32]	; (52cc <z_SysFatalErrorHandler+0x54>)
    52aa:	68a1      	ldr	r1, [r4, #8]
    52ac:	f01a fb63 	bl	1f976 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    52b0:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    52b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    52b6:	f000 b80b 	b.w	52d0 <z_impl_k_thread_abort>
    52ba:	bf00      	nop
    52bc:	00026b2e 	.word	0x00026b2e
    52c0:	00026b32 	.word	0x00026b32
    52c4:	00026b43 	.word	0x00026b43
    52c8:	20001cf0 	.word	0x20001cf0
    52cc:	00026b63 	.word	0x00026b63

000052d0 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    52d0:	b538      	push	{r3, r4, r5, lr}
    52d2:	4605      	mov	r5, r0
	__asm__ volatile(
    52d4:	f04f 0320 	mov.w	r3, #32
    52d8:	f3ef 8411 	mrs	r4, BASEPRI
    52dc:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    52e0:	f020 f82a 	bl	25338 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    52e4:	4b0a      	ldr	r3, [pc, #40]	; (5310 <z_impl_k_thread_abort+0x40>)
    52e6:	689b      	ldr	r3, [r3, #8]
    52e8:	42ab      	cmp	r3, r5
    52ea:	d10b      	bne.n	5304 <z_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    52ec:	4b09      	ldr	r3, [pc, #36]	; (5314 <z_impl_k_thread_abort+0x44>)
    52ee:	685a      	ldr	r2, [r3, #4]
    52f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
    52f4:	b912      	cbnz	r2, 52fc <z_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    52f6:	4620      	mov	r0, r4
    52f8:	f7ff fd3e 	bl	4d78 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    52fc:	685a      	ldr	r2, [r3, #4]
    52fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5302:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    5304:	4620      	mov	r0, r4
}
    5306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    530a:	f01f bf58 	b.w	251be <z_reschedule_irqlock>
    530e:	bf00      	nop
    5310:	20001cf0 	.word	0x20001cf0
    5314:	e000ed00 	.word	0xe000ed00

00005318 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5318:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    531a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    531c:	4a0b      	ldr	r2, [pc, #44]	; (534c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    531e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    5320:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5322:	bf1e      	ittt	ne
	movne	r1, #0
    5324:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5326:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    5328:	f01f fde1 	blne	24eee <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    532c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    532e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5332:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5336:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    533a:	4905      	ldr	r1, [pc, #20]	; (5350 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    533c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    533e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    5340:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5342:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    5346:	4803      	ldr	r0, [pc, #12]	; (5354 <_isr_wrapper+0x3c>)
	bx r0
    5348:	4700      	bx	r0
    534a:	0000      	.short	0x0000
	ldr r2, =_kernel
    534c:	20001cf0 	.word	0x20001cf0
	ldr r1, =_sw_isr_table
    5350:	00025658 	.word	0x00025658
	ldr r0, =_IntExit
    5354:	00004d45 	.word	0x00004d45

00005358 <__reset>:
#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl _PlatformInit
#endif

    /* lock interrupts: will get unlocked when switch to main task */
    bl	lock_interrupts
    5358:	f01c fca7 	bl	21caa <lock_interrupts>
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    535c:	f000 f804 	bl	5368 <_PrepC>

00005360 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    5360:	bf30      	wfi
    b _SysNmiOnReset
    5362:	f7ff bffd 	b.w	5360 <_SysNmiOnReset>
    5366:	bf00      	nop

00005368 <_PrepC>:
}

#ifdef CONFIG_INIT_STACKS
static inline void init_stacks(void)
{
	memset(&_interrupt_stack, 0xAA, CONFIG_ISR_STACK_SIZE);
    5368:	4c12      	ldr	r4, [pc, #72]	; (53b4 <_PrepC+0x4c>)

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    536a:	b508      	push	{r3, lr}
	memset(&_interrupt_stack, 0xAA, CONFIG_ISR_STACK_SIZE);
    536c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5370:	21aa      	movs	r1, #170	; 0xaa
    5372:	4620      	mov	r0, r4
    5374:	f01c fdb1 	bl	21eda <memset>
	process_sp = (u32_t)&_interrupt_stack + CONFIG_ISR_STACK_SIZE;
    5378:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    537c:	f384 8809 	msr	PSP, r4
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5380:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() | CONTROL_SPSEL_Msk);
    5384:	f043 0302 	orr.w	r3, r3, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    5388:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    538c:	f3bf 8f6f 	isb	sy
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5390:	4b09      	ldr	r3, [pc, #36]	; (53b8 <_PrepC+0x50>)
    5392:	4a0a      	ldr	r2, [pc, #40]	; (53bc <_PrepC+0x54>)
    5394:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5398:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    539a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    539e:	f3bf 8f6f 	isb	sy
	 * gets set to _interrupt_stack during initialization.
	 */
	set_and_switch_to_psp();
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    53a2:	f018 fe09 	bl	1dfb8 <z_bss_zero>
	z_data_copy();
    53a6:	f018 fe11 	bl	1dfcc <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	_IntLibInit();
    53aa:	f7ff fcd9 	bl	4d60 <_IntLibInit>
	z_cstart();
    53ae:	f018 fe3f 	bl	1e030 <z_cstart>
    53b2:	bf00      	nop
    53b4:	20003e58 	.word	0x20003e58
    53b8:	00000000 	.word	0x00000000
    53bc:	e000ed00 	.word	0xe000ed00

000053c0 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    53c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    53c2:	4b08      	ldr	r3, [pc, #32]	; (53e4 <z_arch_configure_static_mpu_regions+0x24>)
    53c4:	9301      	str	r3, [sp, #4]
    53c6:	4b08      	ldr	r3, [pc, #32]	; (53e8 <z_arch_configure_static_mpu_regions+0x28>)
    53c8:	9302      	str	r3, [sp, #8]
    53ca:	4b08      	ldr	r3, [pc, #32]	; (53ec <z_arch_configure_static_mpu_regions+0x2c>)
    53cc:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    53ce:	ab01      	add	r3, sp, #4
    53d0:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    53d2:	4a07      	ldr	r2, [pc, #28]	; (53f0 <z_arch_configure_static_mpu_regions+0x30>)
    53d4:	4b07      	ldr	r3, [pc, #28]	; (53f4 <z_arch_configure_static_mpu_regions+0x34>)
    53d6:	2101      	movs	r1, #1
    53d8:	4668      	mov	r0, sp
    53da:	f000 f8b5 	bl	5548 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    53de:	b005      	add	sp, #20
    53e0:	f85d fb04 	ldr.w	pc, [sp], #4
    53e4:	20000000 	.word	0x20000000
    53e8:	00000000 	.word	0x00000000
    53ec:	060b0000 	.word	0x060b0000
    53f0:	20000000 	.word	0x20000000
    53f4:	20010000 	.word	0x20010000

000053f8 <_mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int _mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    53f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MPU->RNR = index;
    53fa:	4f2e      	ldr	r7, [pc, #184]	; (54b4 <_mpu_configure_regions+0xbc>)
{
    53fc:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    53fe:	2100      	movs	r1, #0
    5400:	42b1      	cmp	r1, r6
    5402:	da22      	bge.n	544a <_mpu_configure_regions+0x52>
		if (regions[i]->size == 0) {
    5404:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    5408:	f8dc 4004 	ldr.w	r4, [ip, #4]
    540c:	2c00      	cmp	r4, #0
    540e:	d04f      	beq.n	54b0 <_mpu_configure_regions+0xb8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    5410:	b1eb      	cbz	r3, 544e <_mpu_configure_regions+0x56>
		((part->size & (part->size - 1)) == 0)
    5412:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
    5416:	ea14 0f0e 	tst.w	r4, lr
    541a:	d106      	bne.n	542a <_mpu_configure_regions+0x32>
		&&
    541c:	2c1f      	cmp	r4, #31
    541e:	d904      	bls.n	542a <_mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0);
    5420:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    5424:	ea1e 0f05 	tst.w	lr, r5
    5428:	d011      	beq.n	544e <_mpu_configure_regions+0x56>
				(!_mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    542a:	2301      	movs	r3, #1
    542c:	f04f 0200 	mov.w	r2, #0
    5430:	f363 0207 	bfi	r2, r3, #0, #8
    5434:	4820      	ldr	r0, [pc, #128]	; (54b8 <_mpu_configure_regions+0xc0>)
    5436:	4b21      	ldr	r3, [pc, #132]	; (54bc <_mpu_configure_regions+0xc4>)
    5438:	1a1b      	subs	r3, r3, r0
    543a:	08db      	lsrs	r3, r3, #3
    543c:	4820      	ldr	r0, [pc, #128]	; (54c0 <_mpu_configure_regions+0xc8>)
    543e:	f363 128f 	bfi	r2, r3, #6, #10
{
	/* Attempt to allocate new region index. */
	if (index > (_get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5442:	f01b fbec 	bl	20c1e <log_1>
			return -EINVAL;
		}

		reg_index = _mpu_configure_region(reg_index, regions[i]);
    5446:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    544a:	4610      	mov	r0, r2
    544c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (size <= 32) {
    544e:	2c20      	cmp	r4, #32
		reg_index = _mpu_configure_region(reg_index, regions[i]);
    5450:	b2d5      	uxtb	r5, r2
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    5452:	f8dc 2000 	ldr.w	r2, [ip]
	_get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    5456:	f8dc c008 	ldr.w	ip, [ip, #8]
	if (size <= 32) {
    545a:	d91a      	bls.n	5492 <_mpu_configure_regions+0x9a>
	if (size > (1UL << 31)) {
    545c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5460:	d819      	bhi.n	5496 <_mpu_configure_regions+0x9e>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5462:	3c01      	subs	r4, #1
    5464:	fab4 f484 	clz	r4, r4
    5468:	f1c4 041f 	rsb	r4, r4, #31
    546c:	0064      	lsls	r4, r4, #1
	if (index > (_get_num_regions() - 1)) {
    546e:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | _size_to_mpu_rasr_size(size);
    5470:	ea4c 0404 	orr.w	r4, ip, r4
    5474:	d911      	bls.n	549a <_mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5476:	2301      	movs	r3, #1
    5478:	f04f 0200 	mov.w	r2, #0
    547c:	f363 0207 	bfi	r2, r3, #0, #8
    5480:	490d      	ldr	r1, [pc, #52]	; (54b8 <_mpu_configure_regions+0xc0>)
    5482:	4b0e      	ldr	r3, [pc, #56]	; (54bc <_mpu_configure_regions+0xc4>)
    5484:	480f      	ldr	r0, [pc, #60]	; (54c4 <_mpu_configure_regions+0xcc>)
    5486:	1a5b      	subs	r3, r3, r1
    5488:	08db      	lsrs	r3, r3, #3
    548a:	f363 128f 	bfi	r2, r3, #6, #10
    548e:	4629      	mov	r1, r5
    5490:	e7d7      	b.n	5442 <_mpu_configure_regions+0x4a>
		return REGION_32B;
    5492:	2408      	movs	r4, #8
    5494:	e7eb      	b.n	546e <_mpu_configure_regions+0x76>
		return REGION_4G;
    5496:	243e      	movs	r4, #62	; 0x3e
    5498:	e7e9      	b.n	546e <_mpu_configure_regions+0x76>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    549a:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    549e:	432a      	orrs	r2, r5
    54a0:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    54a4:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    54a8:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    54aa:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    54ac:	613c      	str	r4, [r7, #16]
		reg_index++;
    54ae:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    54b0:	3101      	adds	r1, #1
    54b2:	e7a5      	b.n	5400 <_mpu_configure_regions+0x8>
    54b4:	e000ed90 	.word	0xe000ed90
    54b8:	00025880 	.word	0x00025880
    54bc:	00025988 	.word	0x00025988
    54c0:	00026b8c 	.word	0x00026b8c
    54c4:	00026baf 	.word	0x00026baf

000054c8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    54c8:	4b03      	ldr	r3, [pc, #12]	; (54d8 <arm_core_mpu_enable+0x10>)
    54ca:	2205      	movs	r2, #5
    54cc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    54ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    54d2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    54d6:	4770      	bx	lr
    54d8:	e000ed90 	.word	0xe000ed90

000054dc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    54dc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    54e0:	4b01      	ldr	r3, [pc, #4]	; (54e8 <arm_core_mpu_disable+0xc>)
    54e2:	2200      	movs	r2, #0
    54e4:	605a      	str	r2, [r3, #4]
}
    54e6:	4770      	bx	lr
    54e8:	e000ed90 	.word	0xe000ed90

000054ec <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    54ec:	4913      	ldr	r1, [pc, #76]	; (553c <arm_mpu_init+0x50>)
    54ee:	6808      	ldr	r0, [r1, #0]
    54f0:	2808      	cmp	r0, #8
{
    54f2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    54f4:	d81e      	bhi.n	5534 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();
    54f6:	f7ff fff1 	bl	54dc <arm_core_mpu_disable>
	MPU->RNR = index;
    54fa:	4c11      	ldr	r4, [pc, #68]	; (5540 <arm_mpu_init+0x54>)
    54fc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    54fe:	2200      	movs	r2, #0
    5500:	4290      	cmp	r0, r2
    5502:	f101 010c 	add.w	r1, r1, #12
    5506:	d105      	bne.n	5514 <arm_mpu_init+0x28>
		_region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5508:	4b0e      	ldr	r3, [pc, #56]	; (5544 <arm_mpu_init+0x58>)
    550a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    550c:	f7ff ffdc 	bl	54c8 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    5510:	2000      	movs	r0, #0
}
    5512:	bd10      	pop	{r4, pc}
    5514:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5516:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    551a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    551e:	4313      	orrs	r3, r2
    5520:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5524:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5526:	f851 3c04 	ldr.w	r3, [r1, #-4]
    552a:	f043 0301 	orr.w	r3, r3, #1
    552e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5530:	3201      	adds	r2, #1
    5532:	e7e5      	b.n	5500 <arm_mpu_init+0x14>
		return -1;
    5534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5538:	e7eb      	b.n	5512 <arm_mpu_init+0x26>
    553a:	bf00      	nop
    553c:	00025b5c 	.word	0x00025b5c
    5540:	e000ed90 	.word	0xe000ed90
    5544:	200022c0 	.word	0x200022c0

00005548 <arm_core_mpu_configure_static_mpu_regions>:
{
    5548:	b510      	push	{r4, lr}
static int _mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    554a:	4c03      	ldr	r4, [pc, #12]	; (5558 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = _mpu_configure_regions(static_regions,
    554c:	2301      	movs	r3, #1
    554e:	7822      	ldrb	r2, [r4, #0]
    5550:	f7ff ff52 	bl	53f8 <_mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5554:	7020      	strb	r0, [r4, #0]
}
    5556:	bd10      	pop	{r4, pc}
    5558:	200022c0 	.word	0x200022c0

0000555c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    555c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = _mpu_configure_regions(dynamic_regions,
    555e:	4a08      	ldr	r2, [pc, #32]	; (5580 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    5560:	2300      	movs	r3, #0
    5562:	7812      	ldrb	r2, [r2, #0]
    5564:	f7ff ff48 	bl	53f8 <_mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5568:	f110 0f16 	cmn.w	r0, #22
    556c:	d003      	beq.n	5576 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    556e:	4b05      	ldr	r3, [pc, #20]	; (5584 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    5570:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < _get_num_regions(); i++) {
    5572:	2807      	cmp	r0, #7
    5574:	dd00      	ble.n	5578 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    5576:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    5578:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    557a:	611a      	str	r2, [r3, #16]
    557c:	3001      	adds	r0, #1
    557e:	e7f8      	b.n	5572 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    5580:	200022c0 	.word	0x200022c0
    5584:	e000ed90 	.word	0xe000ed90

00005588 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    5588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    558c:	b0cd      	sub	sp, #308	; 0x134
    558e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    5592:	469a      	mov	sl, r3
    5594:	9201      	str	r2, [sp, #4]
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    5596:	2300      	movs	r3, #0
			case '%':
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
    5598:	9304      	str	r3, [sp, #16]
				break;
    559a:	e003      	b.n	55a4 <_prf+0x1c>
			count++;
    559c:	9b04      	ldr	r3, [sp, #16]
	while ((c = *format++)) {
    559e:	9501      	str	r5, [sp, #4]
			count++;
    55a0:	3301      	adds	r3, #1
    55a2:	9304      	str	r3, [sp, #16]
	while ((c = *format++)) {
    55a4:	9d01      	ldr	r5, [sp, #4]
    55a6:	f815 0b01 	ldrb.w	r0, [r5], #1
    55aa:	b148      	cbz	r0, 55c0 <_prf+0x38>
		if (c != '%') {
    55ac:	2825      	cmp	r0, #37	; 0x25
    55ae:	d074      	beq.n	569a <_prf+0x112>
			if ((*func) (c, dest) == EOF) {
    55b0:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
    55b4:	4798      	blx	r3
    55b6:	3001      	adds	r0, #1
    55b8:	d1f0      	bne.n	559c <_prf+0x14>
				return EOF;
    55ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    55be:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
    55c0:	9804      	ldr	r0, [sp, #16]
    55c2:	b04d      	add	sp, #308	; 0x134
    55c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    55c8:	2c23      	cmp	r4, #35	; 0x23
    55ca:	d05e      	beq.n	568a <_prf+0x102>
    55cc:	d853      	bhi.n	5676 <_prf+0xee>
    55ce:	2c00      	cmp	r4, #0
    55d0:	d0f6      	beq.n	55c0 <_prf+0x38>
					fspace = true;
    55d2:	2c20      	cmp	r4, #32
    55d4:	9b05      	ldr	r3, [sp, #20]
    55d6:	bf08      	it	eq
    55d8:	2301      	moveq	r3, #1
    55da:	9305      	str	r3, [sp, #20]
					fminus = true;
    55dc:	9d01      	ldr	r5, [sp, #4]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    55de:	48b6      	ldr	r0, [pc, #728]	; (58b8 <_prf+0x330>)
    55e0:	462b      	mov	r3, r5
    55e2:	f813 4b01 	ldrb.w	r4, [r3], #1
    55e6:	9301      	str	r3, [sp, #4]
    55e8:	4621      	mov	r1, r4
    55ea:	f01c fc04 	bl	21df6 <strchr>
    55ee:	2800      	cmp	r0, #0
    55f0:	d1ea      	bne.n	55c8 <_prf+0x40>
			if (c == '*') {
    55f2:	2c2a      	cmp	r4, #42	; 0x2a
    55f4:	d159      	bne.n	56aa <_prf+0x122>
				width = (int32_t) va_arg(vargs, int32_t);
    55f6:	f85a 3b04 	ldr.w	r3, [sl], #4
    55fa:	9303      	str	r3, [sp, #12]
				if (width < 0) {
    55fc:	2b00      	cmp	r3, #0
					width = -width;
    55fe:	bfbf      	itttt	lt
    5600:	425b      	neglt	r3, r3
    5602:	9303      	strlt	r3, [sp, #12]
					fminus = true;
    5604:	2301      	movlt	r3, #1
    5606:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    5608:	9b01      	ldr	r3, [sp, #4]
    560a:	781c      	ldrb	r4, [r3, #0]
    560c:	1cab      	adds	r3, r5, #2
    560e:	9301      	str	r3, [sp, #4]
				width = MAXFLD;
    5610:	9b03      	ldr	r3, [sp, #12]
    5612:	2bc9      	cmp	r3, #201	; 0xc9
    5614:	bf28      	it	cs
    5616:	23c8      	movcs	r3, #200	; 0xc8
    5618:	9303      	str	r3, [sp, #12]
			if (c == '.') {
    561a:	2c2e      	cmp	r4, #46	; 0x2e
    561c:	d16b      	bne.n	56f6 <_prf+0x16e>
				if (c == '*') {
    561e:	9b01      	ldr	r3, [sp, #4]
    5620:	781b      	ldrb	r3, [r3, #0]
    5622:	2b2a      	cmp	r3, #42	; 0x2a
    5624:	d164      	bne.n	56f0 <_prf+0x168>
				c = *format++;
    5626:	9b01      	ldr	r3, [sp, #4]
					precision = (int32_t)
    5628:	f85a 5b04 	ldr.w	r5, [sl], #4
				c = *format++;
    562c:	3301      	adds	r3, #1
    562e:	9301      	str	r3, [sp, #4]
				c = *format++;
    5630:	9b01      	ldr	r3, [sp, #4]
					precision = -1;
    5632:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
    5634:	f813 4b01 	ldrb.w	r4, [r3], #1
    5638:	9301      	str	r3, [sp, #4]
					precision = -1;
    563a:	bfa8      	it	ge
    563c:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
			if (strchr("hlLz", c) != NULL) {
    5640:	4621      	mov	r1, r4
    5642:	489e      	ldr	r0, [pc, #632]	; (58bc <_prf+0x334>)
    5644:	f01c fbd7 	bl	21df6 <strchr>
    5648:	b118      	cbz	r0, 5652 <_prf+0xca>
				c = *format++;
    564a:	9b01      	ldr	r3, [sp, #4]
    564c:	f813 4b01 	ldrb.w	r4, [r3], #1
    5650:	9301      	str	r3, [sp, #4]
			switch (c) {
    5652:	2c67      	cmp	r4, #103	; 0x67
    5654:	dc7b      	bgt.n	574e <_prf+0x1c6>
    5656:	2c65      	cmp	r4, #101	; 0x65
    5658:	f280 80db 	bge.w	5812 <_prf+0x28a>
    565c:	2c47      	cmp	r4, #71	; 0x47
    565e:	dc4d      	bgt.n	56fc <_prf+0x174>
    5660:	2c45      	cmp	r4, #69	; 0x45
    5662:	f280 80d6 	bge.w	5812 <_prf+0x28a>
    5666:	2c00      	cmp	r4, #0
    5668:	d0aa      	beq.n	55c0 <_prf+0x38>
    566a:	2c25      	cmp	r4, #37	; 0x25
    566c:	f000 82fd 	beq.w	5c6a <_prf+0x6e2>
			if (c >= MAXFLD + 1) {
    5670:	2cc8      	cmp	r4, #200	; 0xc8
    5672:	dd97      	ble.n	55a4 <_prf+0x1c>
    5674:	e7a1      	b.n	55ba <_prf+0x32>
				switch (c) {
    5676:	2c2d      	cmp	r4, #45	; 0x2d
    5678:	d00a      	beq.n	5690 <_prf+0x108>
    567a:	2c30      	cmp	r4, #48	; 0x30
    567c:	d00b      	beq.n	5696 <_prf+0x10e>
					fplus = true;
    567e:	2c2b      	cmp	r4, #43	; 0x2b
    5680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5682:	bf08      	it	eq
    5684:	2301      	moveq	r3, #1
    5686:	930a      	str	r3, [sp, #40]	; 0x28
    5688:	e7a8      	b.n	55dc <_prf+0x54>
					falt = true;
    568a:	f04f 0901 	mov.w	r9, #1
    568e:	e7a5      	b.n	55dc <_prf+0x54>
					fminus = true;
    5690:	2301      	movs	r3, #1
    5692:	930b      	str	r3, [sp, #44]	; 0x2c
    5694:	e7a2      	b.n	55dc <_prf+0x54>
					pad = '0';
    5696:	9402      	str	r4, [sp, #8]
    5698:	e7a0      	b.n	55dc <_prf+0x54>
			pad = ' ';		/* Default pad character    */
    569a:	2320      	movs	r3, #32
    569c:	9302      	str	r3, [sp, #8]
			fminus = fplus = fspace = falt = false;
    569e:	2300      	movs	r3, #0
    56a0:	9305      	str	r3, [sp, #20]
    56a2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    56a6:	4699      	mov	r9, r3
    56a8:	e799      	b.n	55de <_prf+0x56>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    56aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    56ae:	2b09      	cmp	r3, #9
				width = 0;
    56b0:	9003      	str	r0, [sp, #12]
			} else if (!isdigit(c)) {
    56b2:	d8b2      	bhi.n	561a <_prf+0x92>
		i = 10 * i + *p++ - '0';
    56b4:	220a      	movs	r2, #10
	while (isdigit(((int) *p))) {
    56b6:	462b      	mov	r3, r5
    56b8:	f813 0b01 	ldrb.w	r0, [r3], #1
    56bc:	9301      	str	r3, [sp, #4]
    56be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    56c2:	2b09      	cmp	r3, #9
    56c4:	4604      	mov	r4, r0
    56c6:	d8a3      	bhi.n	5610 <_prf+0x88>
		i = 10 * i + *p++ - '0';
    56c8:	9b03      	ldr	r3, [sp, #12]
    56ca:	9d01      	ldr	r5, [sp, #4]
    56cc:	fb02 0003 	mla	r0, r2, r3, r0
    56d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    56d4:	9303      	str	r3, [sp, #12]
    56d6:	e7ee      	b.n	56b6 <_prf+0x12e>
    56d8:	fb00 3505 	mla	r5, r0, r5, r3
    56dc:	3d30      	subs	r5, #48	; 0x30
    56de:	9201      	str	r2, [sp, #4]
	while (isdigit(((int) *p))) {
    56e0:	9a01      	ldr	r2, [sp, #4]
    56e2:	f812 3b01 	ldrb.w	r3, [r2], #1
    56e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    56ea:	2909      	cmp	r1, #9
    56ec:	d9f4      	bls.n	56d8 <_prf+0x150>
    56ee:	e79f      	b.n	5630 <_prf+0xa8>
	i = 0;
    56f0:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    56f2:	200a      	movs	r0, #10
    56f4:	e7f4      	b.n	56e0 <_prf+0x158>
			precision = -1;	/* No precision specified   */
    56f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    56fa:	e7a1      	b.n	5640 <_prf+0xb8>
			switch (c) {
    56fc:	2c63      	cmp	r4, #99	; 0x63
    56fe:	d06e      	beq.n	57de <_prf+0x256>
    5700:	dc30      	bgt.n	5764 <_prf+0x1dc>
    5702:	2c58      	cmp	r4, #88	; 0x58
    5704:	d1b4      	bne.n	5670 <_prf+0xe8>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    5706:	f85a 1b04 	ldr.w	r1, [sl], #4
	if (alt_form) {
    570a:	f1b9 0f00 	cmp.w	r9, #0
    570e:	f000 82a2 	beq.w	5c56 <_prf+0x6ce>
		*buf++ = '0';
    5712:	f647 0330 	movw	r3, #30768	; 0x7830
    5716:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
		*buf++ = 'x';
    571a:	f10d 0666 	add.w	r6, sp, #102	; 0x66
	len = _to_x(buf, value, 16, precision);
    571e:	462b      	mov	r3, r5
    5720:	2210      	movs	r2, #16
    5722:	4630      	mov	r0, r6
    5724:	f01c fc0a 	bl	21f3c <_to_x>
	if (prefix == 'X') {
    5728:	2c58      	cmp	r4, #88	; 0x58
    572a:	d105      	bne.n	5738 <_prf+0x1b0>
    572c:	aa19      	add	r2, sp, #100	; 0x64
	for (/**/; *buf; buf++) {
    572e:	f812 3b01 	ldrb.w	r3, [r2], #1
    5732:	2b00      	cmp	r3, #0
    5734:	f040 8291 	bne.w	5c5a <_prf+0x6d2>
	return len + (buf - buf0);
    5738:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
			prefix = 0;
    573c:	f1b9 0f00 	cmp.w	r9, #0
	return len + (buf - buf0);
    5740:	eba6 0b0b 	sub.w	fp, r6, fp
    5744:	4458      	add	r0, fp
			prefix = 0;
    5746:	bf14      	ite	ne
    5748:	2702      	movne	r7, #2
    574a:	2700      	moveq	r7, #0
				if (precision != -1) {
    574c:	e027      	b.n	579e <_prf+0x216>
			switch (c) {
    574e:	2c70      	cmp	r4, #112	; 0x70
    5750:	f000 825d 	beq.w	5c0e <_prf+0x686>
    5754:	dc29      	bgt.n	57aa <_prf+0x222>
    5756:	2c6e      	cmp	r4, #110	; 0x6e
    5758:	f000 821e 	beq.w	5b98 <_prf+0x610>
    575c:	f300 8221 	bgt.w	5ba2 <_prf+0x61a>
    5760:	2c69      	cmp	r4, #105	; 0x69
    5762:	d185      	bne.n	5670 <_prf+0xe8>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    5764:	f85a 4b04 	ldr.w	r4, [sl], #4
	if (value < 0) {
    5768:	2c00      	cmp	r4, #0
    576a:	da43      	bge.n	57f4 <_prf+0x26c>
		*buf++ = '-';
    576c:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000) {
    576e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
    5772:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (value != 0x80000000) {
    5776:	d042      	beq.n	57fe <_prf+0x276>
			value = -value;
    5778:	4261      	negs	r1, r4
		*buf++ = '-';
    577a:	f10d 0b65 	add.w	fp, sp, #101	; 0x65
	return _to_x(buf, value, 10, precision);
    577e:	462b      	mov	r3, r5
    5780:	220a      	movs	r2, #10
    5782:	4658      	mov	r0, fp
    5784:	f01c fbda 	bl	21f3c <_to_x>
				if (fplus || fspace || (int32_temp < 0)) {
    5788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    578a:	9a05      	ldr	r2, [sp, #20]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    578c:	4458      	add	r0, fp
				if (fplus || fspace || (int32_temp < 0)) {
    578e:	ea53 0702 	orrs.w	r7, r3, r2
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    5792:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
    5796:	eba0 000b 	sub.w	r0, r0, fp
				if (fplus || fspace || (int32_temp < 0)) {
    579a:	d100      	bne.n	579e <_prf+0x216>
    579c:	0fe7      	lsrs	r7, r4, #31
			prefix = 0;
    579e:	3501      	adds	r5, #1
    57a0:	9b02      	ldr	r3, [sp, #8]
    57a2:	bf18      	it	ne
    57a4:	2320      	movne	r3, #32
    57a6:	9302      	str	r3, [sp, #8]
    57a8:	e07a      	b.n	58a0 <_prf+0x318>
			switch (c) {
    57aa:	2c75      	cmp	r4, #117	; 0x75
    57ac:	f000 824b 	beq.w	5c46 <_prf+0x6be>
    57b0:	2c78      	cmp	r4, #120	; 0x78
    57b2:	d0a8      	beq.n	5706 <_prf+0x17e>
    57b4:	2c73      	cmp	r4, #115	; 0x73
    57b6:	f47f af5b 	bne.w	5670 <_prf+0xe8>
				cptr_temp = (char *) va_arg(vargs, char *);
    57ba:	f85a 1b04 	ldr.w	r1, [sl], #4
				for (c = 0; c < MAXFLD; c++) {
    57be:	f04f 0900 	mov.w	r9, #0
					if (cptr_temp[c] == '\0') {
    57c2:	f811 3009 	ldrb.w	r3, [r1, r9]
    57c6:	2b00      	cmp	r3, #0
    57c8:	f000 822f 	beq.w	5c2a <_prf+0x6a2>
				for (c = 0; c < MAXFLD; c++) {
    57cc:	f109 0901 	add.w	r9, r9, #1
    57d0:	f1b9 0fc8 	cmp.w	r9, #200	; 0xc8
    57d4:	d1f5      	bne.n	57c2 <_prf+0x23a>
				if ((precision >= 0) && (precision < c)) {
    57d6:	2d00      	cmp	r5, #0
    57d8:	f280 8229 	bge.w	5c2e <_prf+0x6a6>
    57dc:	e22e      	b.n	5c3c <_prf+0x6b4>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    57de:	f85a 3b04 	ldr.w	r3, [sl], #4
    57e2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				buf[1] = '\0';
    57e6:	2300      	movs	r3, #0
    57e8:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
				c = 1;
    57ec:	f04f 0901 	mov.w	r9, #1
					prefix = 2;
    57f0:	2700      	movs	r7, #0
    57f2:	e1e7      	b.n	5bc4 <_prf+0x63c>
	} else if (fplus) {
    57f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    57f6:	b123      	cbz	r3, 5802 <_prf+0x27a>
		*buf++ = '+';
    57f8:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    57fa:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (value != 0x80000000) {
    57fe:	4621      	mov	r1, r4
    5800:	e7bb      	b.n	577a <_prf+0x1f2>
	} else if (fspace) {
    5802:	9b05      	ldr	r3, [sp, #20]
    5804:	b10b      	cbz	r3, 580a <_prf+0x282>
		*buf++ = ' ';
    5806:	2320      	movs	r3, #32
    5808:	e7f7      	b.n	57fa <_prf+0x272>
	} else if (fspace) {
    580a:	4621      	mov	r1, r4
    580c:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
    5810:	e7b5      	b.n	577e <_prf+0x1f6>
				u.d = (double) va_arg(vargs, double);
    5812:	f10a 0a07 	add.w	sl, sl, #7
    5816:	f02a 0307 	bic.w	r3, sl, #7
    581a:	469a      	mov	sl, r3
    581c:	6859      	ldr	r1, [r3, #4]
    581e:	f85a 0b08 	ldr.w	r0, [sl], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    5822:	02cb      	lsls	r3, r1, #11
    5824:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    5828:	02c2      	lsls	r2, r0, #11
    582a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    582e:	9206      	str	r2, [sp, #24]
    5830:	9307      	str	r3, [sp, #28]
    5832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	exp = double_temp >> 52 & 0x7ff;
    5836:	f3c1 580a 	ubfx	r8, r1, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    583a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	sign = !!(double_temp & HIGHBIT64);
    583e:	460b      	mov	r3, r1
	if (exp == 0x7ff) {
    5840:	f240 71ff 	movw	r1, #2047	; 0x7ff
    5844:	4588      	cmp	r8, r1
	sign = !!(double_temp & HIGHBIT64);
    5846:	4602      	mov	r2, r0
	if (exp == 0x7ff) {
    5848:	d145      	bne.n	58d6 <_prf+0x34e>
		if (sign) {
    584a:	2800      	cmp	r0, #0
		if (!fract) {
    584c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
		if (sign) {
    5850:	f173 0300 	sbcs.w	r3, r3, #0
			*buf++ = '-';
    5854:	bfbb      	ittet	lt
    5856:	232d      	movlt	r3, #45	; 0x2d
    5858:	f88d 3064 	strblt.w	r3, [sp, #100]	; 0x64
		if (sign) {
    585c:	ab19      	addge	r3, sp, #100	; 0x64
			*buf++ = '-';
    585e:	f10d 0365 	addlt.w	r3, sp, #101	; 0x65
		if (!fract) {
    5862:	430a      	orrs	r2, r1
    5864:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    5868:	f103 0003 	add.w	r0, r3, #3
    586c:	d128      	bne.n	58c0 <_prf+0x338>
			if (isupper(c)) {
    586e:	2c19      	cmp	r4, #25
    5870:	d81b      	bhi.n	58aa <_prf+0x322>
				*buf++ = 'I';
    5872:	2249      	movs	r2, #73	; 0x49
    5874:	701a      	strb	r2, [r3, #0]
				*buf++ = 'N';
    5876:	224e      	movs	r2, #78	; 0x4e
    5878:	705a      	strb	r2, [r3, #1]
				*buf++ = 'F';
    587a:	2246      	movs	r2, #70	; 0x46
				*buf++ = 'n';
    587c:	709a      	strb	r2, [r3, #2]
		return buf - start;
    587e:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
		*buf = 0;
    5882:	2200      	movs	r2, #0
    5884:	70da      	strb	r2, [r3, #3]
		return buf - start;
    5886:	eba0 000b 	sub.w	r0, r0, fp
				if (fplus || fspace || (buf[0] == '-')) {
    588a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    588c:	9a05      	ldr	r2, [sp, #20]
    588e:	ea53 0702 	orrs.w	r7, r3, r2
    5892:	d105      	bne.n	58a0 <_prf+0x318>
    5894:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
    5898:	f1a7 032d 	sub.w	r3, r7, #45	; 0x2d
    589c:	425f      	negs	r7, r3
    589e:	415f      	adcs	r7, r3
			if (c >= MAXFLD + 1) {
    58a0:	28c8      	cmp	r0, #200	; 0xc8
    58a2:	f73f ae8a 	bgt.w	55ba <_prf+0x32>
    58a6:	4681      	mov	r9, r0
    58a8:	e18c      	b.n	5bc4 <_prf+0x63c>
				*buf++ = 'i';
    58aa:	2269      	movs	r2, #105	; 0x69
    58ac:	701a      	strb	r2, [r3, #0]
				*buf++ = 'n';
    58ae:	226e      	movs	r2, #110	; 0x6e
    58b0:	705a      	strb	r2, [r3, #1]
				*buf++ = 'f';
    58b2:	2266      	movs	r2, #102	; 0x66
    58b4:	e7e2      	b.n	587c <_prf+0x2f4>
    58b6:	bf00      	nop
    58b8:	00026bd5 	.word	0x00026bd5
    58bc:	00026bdb 	.word	0x00026bdb
			if (isupper(c)) {
    58c0:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    58c2:	bf99      	ittee	ls
    58c4:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    58c6:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    58c8:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    58ca:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    58cc:	bf94      	ite	ls
    58ce:	701a      	strbls	r2, [r3, #0]
				*buf++ = 'n';
    58d0:	701a      	strbhi	r2, [r3, #0]
				*buf++ = 'a';
    58d2:	7059      	strb	r1, [r3, #1]
    58d4:	e7d2      	b.n	587c <_prf+0x2f4>
	if ((exp | fract) != 0) {
    58d6:	9906      	ldr	r1, [sp, #24]
    58d8:	9e07      	ldr	r6, [sp, #28]
    58da:	ea48 0101 	orr.w	r1, r8, r1
    58de:	4640      	mov	r0, r8
    58e0:	910e      	str	r1, [sp, #56]	; 0x38
    58e2:	17c1      	asrs	r1, r0, #31
    58e4:	4331      	orrs	r1, r6
    58e6:	910f      	str	r1, [sp, #60]	; 0x3c
    58e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
		c = 'f';
    58ec:	2c46      	cmp	r4, #70	; 0x46
    58ee:	bf08      	it	eq
    58f0:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    58f2:	4301      	orrs	r1, r0
    58f4:	d03e      	beq.n	5974 <_prf+0x3ec>
		fract |= HIGHBIT64;
    58f6:	9806      	ldr	r0, [sp, #24]
	if (decexp && sign) {
    58f8:	2a00      	cmp	r2, #0
		fract |= HIGHBIT64;
    58fa:	f046 4100 	orr.w	r1, r6, #2147483648	; 0x80000000
	if (decexp && sign) {
    58fe:	f173 0300 	sbcs.w	r3, r3, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    5902:	f2a8 38fe 	subw	r8, r8, #1022	; 0x3fe
		fract |= HIGHBIT64;
    5906:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	if (decexp && sign) {
    590a:	da35      	bge.n	5978 <_prf+0x3f0>
		*buf++ = '-';
    590c:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    590e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    5912:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	decexp = 0;
    5916:	2600      	movs	r6, #0
	while (exp <= -3) {
    5918:	f118 0f02 	cmn.w	r8, #2
    591c:	db39      	blt.n	5992 <_prf+0x40a>
	while (exp > 0) {
    591e:	f1b8 0f00 	cmp.w	r8, #0
    5922:	dc66      	bgt.n	59f2 <_prf+0x46a>
		_rlrshift(&fract);
    5924:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    5926:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    592a:	f01c fb2e 	bl	21f8a <_rlrshift>
	while (exp < (0 + 4)) {
    592e:	f1b8 0f04 	cmp.w	r8, #4
    5932:	d1f7      	bne.n	5924 <_prf+0x39c>
		precision = 6;		/* Default precision if none given */
    5934:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    5936:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
    593a:	bfb8      	it	lt
    593c:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    593e:	2b47      	cmp	r3, #71	; 0x47
    5940:	d17b      	bne.n	5a3a <_prf+0x4b2>
		if (!falt && (precision > 0)) {
    5942:	f1b9 0f00 	cmp.w	r9, #0
    5946:	d175      	bne.n	5a34 <_prf+0x4ac>
    5948:	f115 0800 	adds.w	r8, r5, #0
    594c:	bf18      	it	ne
    594e:	f04f 0801 	movne.w	r8, #1
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    5952:	1cf2      	adds	r2, r6, #3
    5954:	db02      	blt.n	595c <_prf+0x3d4>
    5956:	1c6b      	adds	r3, r5, #1
    5958:	429e      	cmp	r6, r3
    595a:	dd72      	ble.n	5a42 <_prf+0x4ba>
				c = 'E';
    595c:	2c67      	cmp	r4, #103	; 0x67
    595e:	bf0c      	ite	eq
    5960:	2465      	moveq	r4, #101	; 0x65
    5962:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
    5964:	f105 0b01 	add.w	fp, r5, #1
	digit_count = 16;
    5968:	2310      	movs	r3, #16
    596a:	459b      	cmp	fp, r3
    596c:	9313      	str	r3, [sp, #76]	; 0x4c
	if (exp > 16) {
    596e:	bfa8      	it	ge
    5970:	469b      	movge	fp, r3
    5972:	e06e      	b.n	5a52 <_prf+0x4ca>
	exp = double_temp >> 52 & 0x7ff;
    5974:	f04f 0800 	mov.w	r8, #0
	} else if (fplus) {
    5978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    597a:	b10b      	cbz	r3, 5980 <_prf+0x3f8>
		*buf++ = '+';
    597c:	232b      	movs	r3, #43	; 0x2b
    597e:	e7c6      	b.n	590e <_prf+0x386>
	} else if (fspace) {
    5980:	9b05      	ldr	r3, [sp, #20]
    5982:	b10b      	cbz	r3, 5988 <_prf+0x400>
		*buf++ = ' ';
    5984:	2320      	movs	r3, #32
    5986:	e7c2      	b.n	590e <_prf+0x386>
	} else if (fspace) {
    5988:	af19      	add	r7, sp, #100	; 0x64
    598a:	e7c4      	b.n	5916 <_prf+0x38e>
			_rlrshift(&fract);
    598c:	a814      	add	r0, sp, #80	; 0x50
    598e:	f01c fafc 	bl	21f8a <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    5992:	e9dd ec14 	ldrd	lr, ip, [sp, #80]	; 0x50
    5996:	2300      	movs	r3, #0
    5998:	f8cd c020 	str.w	ip, [sp, #32]
    599c:	9309      	str	r3, [sp, #36]	; 0x24
    599e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    59a2:	48b7      	ldr	r0, [pc, #732]	; (5c80 <_prf+0x6f8>)
    59a4:	2100      	movs	r1, #0
    59a6:	4299      	cmp	r1, r3
    59a8:	bf08      	it	eq
    59aa:	4290      	cmpeq	r0, r2
    59ac:	f108 0801 	add.w	r8, r8, #1
    59b0:	d3ec      	bcc.n	598c <_prf+0x404>
		fract *= 5;
    59b2:	2005      	movs	r0, #5
    59b4:	fbae 2300 	umull	r2, r3, lr, r0
    59b8:	fb00 330c 	mla	r3, r0, ip, r3
    59bc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    59c0:	3e01      	subs	r6, #1
    59c2:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    59c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    59ca:	f04f 0c00 	mov.w	ip, #0
    59ce:	2100      	movs	r1, #0
    59d0:	458c      	cmp	ip, r1
    59d2:	bf08      	it	eq
    59d4:	459b      	cmpeq	fp, r3
    59d6:	d205      	bcs.n	59e4 <_prf+0x45c>
    59d8:	f1be 0f00 	cmp.w	lr, #0
    59dc:	d09c      	beq.n	5918 <_prf+0x390>
    59de:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    59e2:	e799      	b.n	5918 <_prf+0x390>
			fract <<= 1;
    59e4:	1892      	adds	r2, r2, r2
    59e6:	415b      	adcs	r3, r3
			exp--;
    59e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    59ec:	f04f 0e01 	mov.w	lr, #1
    59f0:	e7ed      	b.n	59ce <_prf+0x446>
		_ldiv5(&fract);
    59f2:	a814      	add	r0, sp, #80	; 0x50
    59f4:	f01c fadb 	bl	21fae <_ldiv5>
		exp--;
    59f8:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    59fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    5a00:	3601      	adds	r6, #1
    5a02:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    5a06:	2300      	movs	r3, #0
    5a08:	f04f 0c00 	mov.w	ip, #0
    5a0c:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    5a10:	459c      	cmp	ip, r3
    5a12:	bf08      	it	eq
    5a14:	4583      	cmpeq	fp, r0
    5a16:	d206      	bcs.n	5a26 <_prf+0x49e>
    5a18:	f1be 0f00 	cmp.w	lr, #0
    5a1c:	f43f af7f 	beq.w	591e <_prf+0x396>
    5a20:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    5a24:	e77b      	b.n	591e <_prf+0x396>
			fract <<= 1;
    5a26:	1849      	adds	r1, r1, r1
    5a28:	4140      	adcs	r0, r0
			exp--;
    5a2a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5a2e:	f04f 0e01 	mov.w	lr, #1
    5a32:	e7e8      	b.n	5a06 <_prf+0x47e>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    5a34:	f04f 0800 	mov.w	r8, #0
    5a38:	e78b      	b.n	5952 <_prf+0x3ca>
	if (c == 'f') {
    5a3a:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
    5a3c:	f04f 0800 	mov.w	r8, #0
	if (c == 'f') {
    5a40:	d190      	bne.n	5964 <_prf+0x3dc>
		if (exp < 0) {
    5a42:	eb16 0b05 	adds.w	fp, r6, r5
    5a46:	d540      	bpl.n	5aca <_prf+0x542>
	digit_count = 16;
    5a48:	2310      	movs	r3, #16
    5a4a:	9313      	str	r3, [sp, #76]	; 0x4c
    5a4c:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    5a4e:	f04f 0b00 	mov.w	fp, #0
	ltemp = 0x0800000000000000;
    5a52:	2200      	movs	r2, #0
    5a54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    5a58:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    5a5c:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    5a60:	d235      	bcs.n	5ace <_prf+0x546>
	fract += ltemp;
    5a62:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5a64:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5a66:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5a68:	189b      	adds	r3, r3, r2
    5a6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5a6c:	eb41 0202 	adc.w	r2, r1, r2
    5a70:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    5a74:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    5a78:	9310      	str	r3, [sp, #64]	; 0x40
    5a7a:	2300      	movs	r3, #0
    5a7c:	9311      	str	r3, [sp, #68]	; 0x44
    5a7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    5a82:	4313      	orrs	r3, r2
    5a84:	d006      	beq.n	5a94 <_prf+0x50c>
		_ldiv5(&fract);
    5a86:	a814      	add	r0, sp, #80	; 0x50
    5a88:	f01c fa91 	bl	21fae <_ldiv5>
		_rlrshift(&fract);
    5a8c:	a814      	add	r0, sp, #80	; 0x50
    5a8e:	f01c fa7c 	bl	21f8a <_rlrshift>
		decexp++;
    5a92:	3601      	adds	r6, #1
	if (c == 'f') {
    5a94:	2c66      	cmp	r4, #102	; 0x66
    5a96:	f107 0b01 	add.w	fp, r7, #1
    5a9a:	d135      	bne.n	5b08 <_prf+0x580>
		if (decexp > 0) {
    5a9c:	2e00      	cmp	r6, #0
    5a9e:	dd1d      	ble.n	5adc <_prf+0x554>
    5aa0:	eb07 0b06 	add.w	fp, r7, r6
				*buf++ = _get_digit(&fract, &digit_count);
    5aa4:	a913      	add	r1, sp, #76	; 0x4c
    5aa6:	a814      	add	r0, sp, #80	; 0x50
    5aa8:	f01c faad 	bl	22006 <_get_digit>
    5aac:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0) {
    5ab0:	45bb      	cmp	fp, r7
    5ab2:	d1f7      	bne.n	5aa4 <_prf+0x51c>
    5ab4:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    5ab6:	ea59 0905 	orrs.w	r9, r9, r5
    5aba:	d003      	beq.n	5ac4 <_prf+0x53c>
			*buf++ = '.';
    5abc:	232e      	movs	r3, #46	; 0x2e
    5abe:	f80b 3b01 	strb.w	r3, [fp], #1
    5ac2:	46a9      	mov	r9, r5
    5ac4:	44d9      	add	r9, fp
				*buf++ = '0';
    5ac6:	2530      	movs	r5, #48	; 0x30
    5ac8:	e011      	b.n	5aee <_prf+0x566>
		if (exp < 0) {
    5aca:	2466      	movs	r4, #102	; 0x66
    5acc:	e74c      	b.n	5968 <_prf+0x3e0>
		_ldiv5(&ltemp);
    5ace:	a816      	add	r0, sp, #88	; 0x58
    5ad0:	f01c fa6d 	bl	21fae <_ldiv5>
		_rlrshift(&ltemp);
    5ad4:	a816      	add	r0, sp, #88	; 0x58
    5ad6:	f01c fa58 	bl	21f8a <_rlrshift>
    5ada:	e7bf      	b.n	5a5c <_prf+0x4d4>
			*buf++ = '0';
    5adc:	2330      	movs	r3, #48	; 0x30
    5ade:	703b      	strb	r3, [r7, #0]
    5ae0:	e7e9      	b.n	5ab6 <_prf+0x52e>
			if (decexp < 0) {
    5ae2:	f10b 0b01 	add.w	fp, fp, #1
    5ae6:	b146      	cbz	r6, 5afa <_prf+0x572>
				*buf++ = '0';
    5ae8:	f80b 5c01 	strb.w	r5, [fp, #-1]
				decexp++;
    5aec:	3601      	adds	r6, #1
		while (precision-- > 0) {
    5aee:	45d9      	cmp	r9, fp
    5af0:	d1f7      	bne.n	5ae2 <_prf+0x55a>
	if (prune_zero) {
    5af2:	f1b8 0f00 	cmp.w	r8, #0
    5af6:	d048      	beq.n	5b8a <_prf+0x602>
    5af8:	e024      	b.n	5b44 <_prf+0x5bc>
				*buf++ = _get_digit(&fract, &digit_count);
    5afa:	a913      	add	r1, sp, #76	; 0x4c
    5afc:	a814      	add	r0, sp, #80	; 0x50
    5afe:	f01c fa82 	bl	22006 <_get_digit>
    5b02:	f80b 0c01 	strb.w	r0, [fp, #-1]
    5b06:	e7f2      	b.n	5aee <_prf+0x566>
		*buf = _get_digit(&fract, &digit_count);
    5b08:	a913      	add	r1, sp, #76	; 0x4c
    5b0a:	a814      	add	r0, sp, #80	; 0x50
    5b0c:	f01c fa7b 	bl	22006 <_get_digit>
		if (*buf++ != '0') {
    5b10:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    5b12:	bf18      	it	ne
    5b14:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    5b18:	ea59 0905 	orrs.w	r9, r9, r5
		*buf = _get_digit(&fract, &digit_count);
    5b1c:	7038      	strb	r0, [r7, #0]
		if (falt || (precision > 0)) {
    5b1e:	d004      	beq.n	5b2a <_prf+0x5a2>
			*buf++ = '.';
    5b20:	232e      	movs	r3, #46	; 0x2e
    5b22:	f107 0b02 	add.w	fp, r7, #2
    5b26:	707b      	strb	r3, [r7, #1]
    5b28:	46a9      	mov	r9, r5
    5b2a:	44d9      	add	r9, fp
    5b2c:	e005      	b.n	5b3a <_prf+0x5b2>
			*buf++ = _get_digit(&fract, &digit_count);
    5b2e:	a913      	add	r1, sp, #76	; 0x4c
    5b30:	a814      	add	r0, sp, #80	; 0x50
    5b32:	f01c fa68 	bl	22006 <_get_digit>
    5b36:	f80b 0b01 	strb.w	r0, [fp], #1
		while (precision-- > 0) {
    5b3a:	45d9      	cmp	r9, fp
    5b3c:	d1f7      	bne.n	5b2e <_prf+0x5a6>
	if (prune_zero) {
    5b3e:	f1b8 0f00 	cmp.w	r8, #0
    5b42:	d007      	beq.n	5b54 <_prf+0x5cc>
		while (*--buf == '0')
    5b44:	465b      	mov	r3, fp
    5b46:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    5b4a:	2a30      	cmp	r2, #48	; 0x30
    5b4c:	d0fa      	beq.n	5b44 <_prf+0x5bc>
		if (*buf != '.') {
    5b4e:	2a2e      	cmp	r2, #46	; 0x2e
    5b50:	bf18      	it	ne
    5b52:	469b      	movne	fp, r3
	if ((c == 'e') || (c == 'E')) {
    5b54:	f024 0320 	bic.w	r3, r4, #32
    5b58:	2b45      	cmp	r3, #69	; 0x45
    5b5a:	d116      	bne.n	5b8a <_prf+0x602>
		if (decexp < 0) {
    5b5c:	2e00      	cmp	r6, #0
			decexp = -decexp;
    5b5e:	bfba      	itte	lt
    5b60:	4276      	neglt	r6, r6
			*buf++ = '-';
    5b62:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    5b64:	232b      	movge	r3, #43	; 0x2b
		*buf++ = (char) ((decexp / 10) + '0');
    5b66:	220a      	movs	r2, #10
    5b68:	f88b 3001 	strb.w	r3, [fp, #1]
    5b6c:	fb96 f3f2 	sdiv	r3, r6, r2
		decexp %= 10;
    5b70:	fb02 6613 	mls	r6, r2, r3, r6
		*buf++ = (char) ((decexp / 10) + '0');
    5b74:	f103 0130 	add.w	r1, r3, #48	; 0x30
		*buf++ = (char) (decexp + '0');
    5b78:	3630      	adds	r6, #48	; 0x30
		*buf++ = (char) c;
    5b7a:	f88b 4000 	strb.w	r4, [fp]
		*buf++ = (char) ((decexp / 10) + '0');
    5b7e:	f88b 1002 	strb.w	r1, [fp, #2]
		*buf++ = (char) (decexp + '0');
    5b82:	f88b 6003 	strb.w	r6, [fp, #3]
    5b86:	f10b 0b04 	add.w	fp, fp, #4
	*buf = 0;
    5b8a:	2300      	movs	r3, #0
	return buf - start;
    5b8c:	a819      	add	r0, sp, #100	; 0x64
	*buf = 0;
    5b8e:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    5b92:	ebab 0000 	sub.w	r0, fp, r0
    5b96:	e678      	b.n	588a <_prf+0x302>
				*int32ptr_temp = count;
    5b98:	f85a 3b04 	ldr.w	r3, [sl], #4
    5b9c:	9a04      	ldr	r2, [sp, #16]
    5b9e:	601a      	str	r2, [r3, #0]
				break;
    5ba0:	e500      	b.n	55a4 <_prf+0x1c>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    5ba2:	f85a 1b04 	ldr.w	r1, [sl], #4
	if (alt_form) {
    5ba6:	f1b9 0f00 	cmp.w	r9, #0
    5baa:	d020      	beq.n	5bee <_prf+0x666>
		*buf++ = '0';
    5bac:	2330      	movs	r3, #48	; 0x30
    5bae:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    5bb2:	bb49      	cbnz	r1, 5c08 <_prf+0x680>
			prefix = 0;
    5bb4:	3501      	adds	r5, #1
    5bb6:	9b02      	ldr	r3, [sp, #8]
			*buf++ = 0;
    5bb8:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			prefix = 0;
    5bbc:	bf18      	it	ne
    5bbe:	2320      	movne	r3, #32
    5bc0:	460f      	mov	r7, r1
    5bc2:	9302      	str	r3, [sp, #8]
				if (c < width) {
    5bc4:	9b03      	ldr	r3, [sp, #12]
    5bc6:	454b      	cmp	r3, r9
    5bc8:	dd7f      	ble.n	5cca <_prf+0x742>
					if (fminus) {
    5bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5bcc:	ac19      	add	r4, sp, #100	; 0x64
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d058      	beq.n	5c84 <_prf+0x6fc>
							buf[i] = ' ';
    5bd2:	2320      	movs	r3, #32
						for (i = c; i < width; i++)
    5bd4:	9a03      	ldr	r2, [sp, #12]
							buf[i] = ' ';
    5bd6:	f804 3009 	strb.w	r3, [r4, r9]
						for (i = c; i < width; i++)
    5bda:	f109 0901 	add.w	r9, r9, #1
    5bde:	454a      	cmp	r2, r9
    5be0:	d1f8      	bne.n	5bd4 <_prf+0x64c>
    5be2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    5be6:	4413      	add	r3, r2
    5be8:	ac19      	add	r4, sp, #100	; 0x64
    5bea:	461d      	mov	r5, r3
    5bec:	e069      	b.n	5cc2 <_prf+0x73a>
	if (alt_form) {
    5bee:	f10d 0b64 	add.w	fp, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    5bf2:	4658      	mov	r0, fp
    5bf4:	462b      	mov	r3, r5
    5bf6:	2208      	movs	r2, #8
    5bf8:	f01c f9a0 	bl	21f3c <_to_x>
    5bfc:	ae19      	add	r6, sp, #100	; 0x64
    5bfe:	ebab 0b06 	sub.w	fp, fp, r6
    5c02:	4458      	add	r0, fp
			prefix = 0;
    5c04:	2700      	movs	r7, #0
    5c06:	e5ca      	b.n	579e <_prf+0x216>
		*buf++ = '0';
    5c08:	f10d 0b65 	add.w	fp, sp, #101	; 0x65
    5c0c:	e7f1      	b.n	5bf2 <_prf+0x66a>
		*buf++ = '0';
    5c0e:	f647 0330 	movw	r3, #30768	; 0x7830
    5c12:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16, precision);
    5c16:	2210      	movs	r2, #16
    5c18:	2308      	movs	r3, #8
    5c1a:	f85a 1b04 	ldr.w	r1, [sl], #4
    5c1e:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    5c22:	f01c f98b 	bl	21f3c <_to_x>
	return len + (buf - buf0);
    5c26:	3002      	adds	r0, #2
    5c28:	e7ec      	b.n	5c04 <_prf+0x67c>
				if ((precision >= 0) && (precision < c)) {
    5c2a:	2d00      	cmp	r5, #0
    5c2c:	db02      	blt.n	5c34 <_prf+0x6ac>
    5c2e:	45a9      	cmp	r9, r5
    5c30:	bfa8      	it	ge
    5c32:	46a9      	movge	r9, r5
				if (c > 0) {
    5c34:	f1b9 0f00 	cmp.w	r9, #0
    5c38:	f43f acb4 	beq.w	55a4 <_prf+0x1c>
					memcpy(buf, cptr_temp, (size_t) c);
    5c3c:	464a      	mov	r2, r9
    5c3e:	a819      	add	r0, sp, #100	; 0x64
    5c40:	f01c f921 	bl	21e86 <memcpy>
					need_justifying = true;
    5c44:	e5d4      	b.n	57f0 <_prf+0x268>
	return _to_x(buf, value, 10, precision);
    5c46:	462b      	mov	r3, r5
    5c48:	220a      	movs	r2, #10
    5c4a:	f85a 1b04 	ldr.w	r1, [sl], #4
    5c4e:	a819      	add	r0, sp, #100	; 0x64
    5c50:	f01c f974 	bl	21f3c <_to_x>
				if (precision != -1) {
    5c54:	e7d6      	b.n	5c04 <_prf+0x67c>
	if (alt_form) {
    5c56:	ae19      	add	r6, sp, #100	; 0x64
    5c58:	e561      	b.n	571e <_prf+0x196>
		if (*buf >= 'a' && *buf <= 'z') {
    5c5a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    5c5e:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    5c60:	bf9c      	itt	ls
    5c62:	3b20      	subls	r3, #32
    5c64:	f802 3c01 	strbls.w	r3, [r2, #-1]
    5c68:	e561      	b.n	572e <_prf+0x1a6>
				if ((*func)('%', dest) == EOF) {
    5c6a:	990d      	ldr	r1, [sp, #52]	; 0x34
    5c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c6e:	4620      	mov	r0, r4
    5c70:	4798      	blx	r3
    5c72:	3001      	adds	r0, #1
    5c74:	f43f aca1 	beq.w	55ba <_prf+0x32>
				count++;
    5c78:	9b04      	ldr	r3, [sp, #16]
    5c7a:	3301      	adds	r3, #1
    5c7c:	e48c      	b.n	5598 <_prf+0x10>
    5c7e:	bf00      	nop
    5c80:	33333332 	.word	0x33333332
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    5c84:	9b03      	ldr	r3, [sp, #12]
    5c86:	eba3 0509 	sub.w	r5, r3, r9
    5c8a:	1960      	adds	r0, r4, r5
    5c8c:	f109 0201 	add.w	r2, r9, #1
    5c90:	4621      	mov	r1, r4
    5c92:	f01c f8e1 	bl	21e58 <memmove>
							prefix = 0;
    5c96:	9b02      	ldr	r3, [sp, #8]
    5c98:	2b20      	cmp	r3, #32
    5c9a:	bf08      	it	eq
    5c9c:	2700      	moveq	r7, #0
						c = width - c + prefix;
    5c9e:	443d      	add	r5, r7
						for (i = prefix; i < c; i++)
    5ca0:	42af      	cmp	r7, r5
    5ca2:	da9e      	bge.n	5be2 <_prf+0x65a>
							buf[i] = pad;
    5ca4:	9b02      	ldr	r3, [sp, #8]
    5ca6:	553b      	strb	r3, [r7, r4]
						for (i = prefix; i < c; i++)
    5ca8:	3701      	adds	r7, #1
    5caa:	e7f9      	b.n	5ca0 <_prf+0x718>
					if ((*func)(*cptr, dest) == EOF) {
    5cac:	990d      	ldr	r1, [sp, #52]	; 0x34
    5cae:	f814 0b01 	ldrb.w	r0, [r4], #1
    5cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5cb4:	4798      	blx	r3
    5cb6:	3001      	adds	r0, #1
    5cb8:	f43f ac7f 	beq.w	55ba <_prf+0x32>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    5cbc:	9b04      	ldr	r3, [sp, #16]
    5cbe:	3301      	adds	r3, #1
    5cc0:	9304      	str	r3, [sp, #16]
    5cc2:	9b04      	ldr	r3, [sp, #16]
    5cc4:	42ab      	cmp	r3, r5
    5cc6:	d1f1      	bne.n	5cac <_prf+0x724>
    5cc8:	e46c      	b.n	55a4 <_prf+0x1c>
    5cca:	f8cd 900c 	str.w	r9, [sp, #12]
    5cce:	e788      	b.n	5be2 <_prf+0x65a>

00005cd0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5cd0:	4b01      	ldr	r3, [pc, #4]	; (5cd8 <__stdout_hook_install+0x8>)
    5cd2:	6018      	str	r0, [r3, #0]
}
    5cd4:	4770      	bx	lr
    5cd6:	bf00      	nop
    5cd8:	20006dec 	.word	0x20006dec

00005cdc <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    5cdc:	b40c      	push	{r2, r3}
    5cde:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    5ce0:	b909      	cbnz	r1, 5ce6 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    5ce2:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    5ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    5cea:	ab07      	add	r3, sp, #28
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    5cec:	9a06      	ldr	r2, [sp, #24]
    5cee:	4806      	ldr	r0, [pc, #24]	; (5d08 <snprintf+0x2c>)
	va_start(vargs, format);
    5cf0:	9301      	str	r3, [sp, #4]
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    5cf2:	a902      	add	r1, sp, #8
    5cf4:	f7ff fc48 	bl	5588 <_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    5cf8:	9b02      	ldr	r3, [sp, #8]
    5cfa:	2200      	movs	r2, #0
    5cfc:	701a      	strb	r2, [r3, #0]
	return r;
}
    5cfe:	b005      	add	sp, #20
    5d00:	f85d eb04 	ldr.w	lr, [sp], #4
    5d04:	b002      	add	sp, #8
    5d06:	4770      	bx	lr
    5d08:	0002203b 	.word	0x0002203b

00005d0c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	int i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    5d0c:	2940      	cmp	r1, #64	; 0x40
    5d0e:	4b0e      	ldr	r3, [pc, #56]	; (5d48 <bt_hex_real+0x3c>)
{
    5d10:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    5d12:	bf28      	it	cs
    5d14:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    5d16:	4c0d      	ldr	r4, [pc, #52]	; (5d4c <bt_hex_real+0x40>)
    5d18:	1846      	adds	r6, r0, r1
    5d1a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    5d1c:	42b0      	cmp	r0, r6
    5d1e:	f103 0302 	add.w	r3, r3, #2
    5d22:	d104      	bne.n	5d2e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    5d24:	2300      	movs	r3, #0
    5d26:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    5d2a:	4807      	ldr	r0, [pc, #28]	; (5d48 <bt_hex_real+0x3c>)
    5d2c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    5d2e:	7802      	ldrb	r2, [r0, #0]
    5d30:	0912      	lsrs	r2, r2, #4
    5d32:	5ca2      	ldrb	r2, [r4, r2]
    5d34:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    5d38:	f810 2b01 	ldrb.w	r2, [r0], #1
    5d3c:	f002 020f 	and.w	r2, r2, #15
    5d40:	5ca2      	ldrb	r2, [r4, r2]
    5d42:	f803 2c01 	strb.w	r2, [r3, #-1]
    5d46:	e7e9      	b.n	5d1c <bt_hex_real+0x10>
    5d48:	200022c1 	.word	0x200022c1
    5d4c:	00026c25 	.word	0x00026c25

00005d50 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    5d50:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    5d52:	7803      	ldrb	r3, [r0, #0]
    5d54:	b08b      	sub	sp, #44	; 0x2c
    5d56:	4604      	mov	r4, r0
    5d58:	ad07      	add	r5, sp, #28
    5d5a:	2b03      	cmp	r3, #3
    5d5c:	d821      	bhi.n	5da2 <bt_addr_le_str_real+0x52>
    5d5e:	e8df f003 	tbb	[pc, r3]
    5d62:	1a02      	.short	0x1a02
    5d64:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    5d66:	4912      	ldr	r1, [pc, #72]	; (5db0 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5d68:	4628      	mov	r0, r5
    5d6a:	f01c f827 	bl	21dbc <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5d6e:	7863      	ldrb	r3, [r4, #1]
    5d70:	9304      	str	r3, [sp, #16]
    5d72:	78a3      	ldrb	r3, [r4, #2]
    5d74:	9303      	str	r3, [sp, #12]
    5d76:	78e3      	ldrb	r3, [r4, #3]
    5d78:	9302      	str	r3, [sp, #8]
    5d7a:	7923      	ldrb	r3, [r4, #4]
    5d7c:	9301      	str	r3, [sp, #4]
    5d7e:	7963      	ldrb	r3, [r4, #5]
    5d80:	9300      	str	r3, [sp, #0]
    5d82:	9505      	str	r5, [sp, #20]
    5d84:	79a3      	ldrb	r3, [r4, #6]
    5d86:	4a0b      	ldr	r2, [pc, #44]	; (5db4 <bt_addr_le_str_real+0x64>)
    5d88:	480b      	ldr	r0, [pc, #44]	; (5db8 <bt_addr_le_str_real+0x68>)
    5d8a:	211b      	movs	r1, #27
    5d8c:	f7fd f89c 	bl	2ec8 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    5d90:	4809      	ldr	r0, [pc, #36]	; (5db8 <bt_addr_le_str_real+0x68>)
    5d92:	b00b      	add	sp, #44	; 0x2c
    5d94:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    5d96:	4909      	ldr	r1, [pc, #36]	; (5dbc <bt_addr_le_str_real+0x6c>)
    5d98:	e7e6      	b.n	5d68 <bt_addr_le_str_real+0x18>
		strcpy(type, "public id");
    5d9a:	4909      	ldr	r1, [pc, #36]	; (5dc0 <bt_addr_le_str_real+0x70>)
    5d9c:	e7e4      	b.n	5d68 <bt_addr_le_str_real+0x18>
		strcpy(type, "random id");
    5d9e:	4909      	ldr	r1, [pc, #36]	; (5dc4 <bt_addr_le_str_real+0x74>)
    5da0:	e7e2      	b.n	5d68 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    5da2:	4a09      	ldr	r2, [pc, #36]	; (5dc8 <bt_addr_le_str_real+0x78>)
    5da4:	210a      	movs	r1, #10
    5da6:	4628      	mov	r0, r5
    5da8:	f7fd f88e 	bl	2ec8 <snprintk>
		break;
    5dac:	e7df      	b.n	5d6e <bt_addr_le_str_real+0x1e>
    5dae:	bf00      	nop
    5db0:	00026be0 	.word	0x00026be0
    5db4:	00026c02 	.word	0x00026c02
    5db8:	20002342 	.word	0x20002342
    5dbc:	00026be7 	.word	0x00026be7
    5dc0:	00026bee 	.word	0x00026bee
    5dc4:	00026bf8 	.word	0x00026bf8
    5dc8:	0002b7f2 	.word	0x0002b7f2

00005dcc <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    5dcc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    5dd0:	4980      	ldr	r1, [pc, #512]	; (5fd4 <ecc_thread+0x208>)
    5dd2:	4a81      	ldr	r2, [pc, #516]	; (5fd8 <ecc_thread+0x20c>)
    5dd4:	b089      	sub	sp, #36	; 0x24
    5dd6:	1a52      	subs	r2, r2, r1
		BT_ERR("public key is not valid (ret %d)", ret);
    5dd8:	f3c2 03c9 	ubfx	r3, r2, #3, #10
    5ddc:	9300      	str	r3, [sp, #0]
    5dde:	4b7f      	ldr	r3, [pc, #508]	; (5fdc <ecc_thread+0x210>)
    5de0:	1a5b      	subs	r3, r3, r1
		LOG_MODULE_DECLARE(kernel, CONFIG_KERNEL_LOG_LEVEL);

		unsigned int unused = stack_unused_space_get(stack, size);
		unsigned int pcnt = ((size - unused) * 100) / size;

		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    5de2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    5de6:	9301      	str	r3, [sp, #4]
			for (size_t i = 0; i < size; i++) {
    5de8:	f240 444c 	movw	r4, #1100	; 0x44c
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    5dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5df0:	487b      	ldr	r0, [pc, #492]	; (5fe0 <ecc_thread+0x214>)
    5df2:	f018 fe9f 	bl	1eb34 <z_impl_k_sem_take>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5df6:	f3bf 8f5b 	dmb	ish
    5dfa:	4b7a      	ldr	r3, [pc, #488]	; (5fe4 <ecc_thread+0x218>)
    5dfc:	681a      	ldr	r2, [r3, #0]
    5dfe:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5e02:	f012 0901 	ands.w	r9, r2, #1
    5e06:	461d      	mov	r5, r3
    5e08:	f000 8088 	beq.w	5f1c <ecc_thread+0x150>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    5e0c:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 6000 <ecc_thread+0x234>
    5e10:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 6008 <ecc_thread+0x23c>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5e14:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 600c <ecc_thread+0x240>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    5e18:	4873      	ldr	r0, [pc, #460]	; (5fe8 <ecc_thread+0x21c>)
    5e1a:	465a      	mov	r2, fp
    5e1c:	4649      	mov	r1, r9
    5e1e:	f019 fdd0 	bl	1f9c2 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    5e22:	2800      	cmp	r0, #0
    5e24:	d167      	bne.n	5ef6 <ecc_thread+0x12a>
			BT_ERR("Failed to create ECC public/private pair");
    5e26:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
    5e2a:	f043 0301 	orr.w	r3, r3, #1
    5e2e:	f363 0807 	bfi	r8, r3, #0, #8
    5e32:	9b00      	ldr	r3, [sp, #0]
    5e34:	486d      	ldr	r0, [pc, #436]	; (5fec <ecc_thread+0x220>)
    5e36:	f363 188f 	bfi	r8, r3, #6, #10
    5e3a:	4641      	mov	r1, r8
    5e3c:	f01a fee2 	bl	20c04 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    5e40:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5e44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5e48:	2001      	movs	r0, #1
    5e4a:	f002 faab 	bl	83a4 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5e4e:	f100 0b08 	add.w	fp, r0, #8
    5e52:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5e54:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5e56:	4658      	mov	r0, fp
    5e58:	f01e ff38 	bl	24ccc <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5e5c:	233e      	movs	r3, #62	; 0x3e
    5e5e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5e60:	2342      	movs	r3, #66	; 0x42
    5e62:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    5e64:	2101      	movs	r1, #1
    5e66:	4658      	mov	r0, fp
    5e68:	f01e ff30 	bl	24ccc <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    5e6c:	2308      	movs	r3, #8
    5e6e:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    5e70:	2141      	movs	r1, #65	; 0x41
    5e72:	4658      	mov	r0, fp
    5e74:	f01e ff2a 	bl	24ccc <net_buf_simple_add>
    5e78:	4683      	mov	fp, r0
	evt->status = status;
    5e7a:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    5e7e:	f1ba 0f00 	cmp.w	sl, #0
    5e82:	d042      	beq.n	5f0a <ecc_thread+0x13e>
		(void)memset(evt->key, 0, sizeof(evt->key));
    5e84:	2240      	movs	r2, #64	; 0x40
    5e86:	2100      	movs	r1, #0
    5e88:	f01c f827 	bl	21eda <memset>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e8c:	f3bf 8f5b 	dmb	ish
    5e90:	e855 3f00 	ldrex	r3, [r5]
    5e94:	f023 0301 	bic.w	r3, r3, #1
    5e98:	e845 3200 	strex	r2, r3, [r5]
    5e9c:	2a00      	cmp	r2, #0
    5e9e:	d1f7      	bne.n	5e90 <ecc_thread+0xc4>
    5ea0:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5ea4:	4648      	mov	r0, r9
	bt_recv(buf);
    5ea6:	f001 fe2f 	bl	7b08 <bt_recv>
static inline void stack_analyze(const char *name, const char *stack,
    5eaa:	4b51      	ldr	r3, [pc, #324]	; (5ff0 <ecc_thread+0x224>)
	size_t unused = 0;
    5eac:	2200      	movs	r2, #0
				if (checked_stack[i] == 0xaaU) {
    5eae:	f813 1b01 	ldrb.w	r1, [r3], #1
    5eb2:	29aa      	cmp	r1, #170	; 0xaa
    5eb4:	d102      	bne.n	5ebc <ecc_thread+0xf0>
					unused++;
    5eb6:	3201      	adds	r2, #1
			for (size_t i = 0; i < size; i++) {
    5eb8:	42a2      	cmp	r2, r4
    5eba:	d1f8      	bne.n	5eae <ecc_thread+0xe2>
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    5ebc:	f026 013f 	bic.w	r1, r6, #63	; 0x3f
    5ec0:	9b01      	ldr	r3, [sp, #4]
    5ec2:	f041 0103 	orr.w	r1, r1, #3
    5ec6:	f361 0607 	bfi	r6, r1, #0, #8
    5eca:	f363 168f 	bfi	r6, r3, #6, #10
    5ece:	4b49      	ldr	r3, [pc, #292]	; (5ff4 <ecc_thread+0x228>)
    5ed0:	e9cd 3203 	strd	r3, r2, [sp, #12]
    5ed4:	f240 434c 	movw	r3, #1100	; 0x44c
		unsigned int pcnt = ((size - unused) * 100) / size;
    5ed8:	1aa0      	subs	r0, r4, r2
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    5eda:	9306      	str	r3, [sp, #24]
		unsigned int pcnt = ((size - unused) * 100) / size;
    5edc:	2364      	movs	r3, #100	; 0x64
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    5ede:	9005      	str	r0, [sp, #20]
		unsigned int pcnt = ((size - unused) * 100) / size;
    5ee0:	4343      	muls	r3, r0
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    5ee2:	2205      	movs	r2, #5
		unsigned int pcnt = ((size - unused) * 100) / size;
    5ee4:	fbb3 f3f4 	udiv	r3, r3, r4
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    5ee8:	a903      	add	r1, sp, #12
    5eea:	9307      	str	r3, [sp, #28]
    5eec:	4842      	ldr	r0, [pc, #264]	; (5ff8 <ecc_thread+0x22c>)
    5eee:	4633      	mov	r3, r6
    5ef0:	f01a fedc 	bl	20cac <log_n>
    5ef4:	e77a      	b.n	5dec <ecc_thread+0x20>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5ef6:	2220      	movs	r2, #32
    5ef8:	4651      	mov	r1, sl
    5efa:	4648      	mov	r0, r9
    5efc:	f01b ff9c 	bl	21e38 <memcmp>
    5f00:	2800      	cmp	r0, #0
    5f02:	d089      	beq.n	5e18 <ecc_thread+0x4c>
	return 0;
    5f04:	f04f 0a00 	mov.w	sl, #0
    5f08:	e79c      	b.n	5e44 <ecc_thread+0x78>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    5f0a:	4937      	ldr	r1, [pc, #220]	; (5fe8 <ecc_thread+0x21c>)
    5f0c:	f01c f8c3 	bl	22096 <sys_memcpy_swap.constprop.1>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    5f10:	493a      	ldr	r1, [pc, #232]	; (5ffc <ecc_thread+0x230>)
    5f12:	f10b 0021 	add.w	r0, fp, #33	; 0x21
    5f16:	f01c f8be 	bl	22096 <sys_memcpy_swap.constprop.1>
    5f1a:	e7b7      	b.n	5e8c <ecc_thread+0xc0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f1c:	f3bf 8f5b 	dmb	ish
    5f20:	681b      	ldr	r3, [r3, #0]
    5f22:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5f26:	079b      	lsls	r3, r3, #30
    5f28:	d5bf      	bpl.n	5eaa <ecc_thread+0xde>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    5f2a:	4935      	ldr	r1, [pc, #212]	; (6000 <ecc_thread+0x234>)
    5f2c:	482e      	ldr	r0, [pc, #184]	; (5fe8 <ecc_thread+0x21c>)
    5f2e:	f01a fc18 	bl	20762 <uECC_valid_public_key>
	if (ret < 0) {
    5f32:	1e01      	subs	r1, r0, #0
    5f34:	da3f      	bge.n	5fb6 <ecc_thread+0x1ea>
		BT_ERR("public key is not valid (ret %d)", ret);
    5f36:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    5f3a:	f043 0301 	orr.w	r3, r3, #1
    5f3e:	f363 0707 	bfi	r7, r3, #0, #8
    5f42:	9b00      	ldr	r3, [sp, #0]
    5f44:	482f      	ldr	r0, [pc, #188]	; (6004 <ecc_thread+0x238>)
    5f46:	f363 178f 	bfi	r7, r3, #6, #10
    5f4a:	463a      	mov	r2, r7
    5f4c:	f01a fe67 	bl	20c1e <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5f54:	2001      	movs	r0, #1
    5f56:	f002 fa25 	bl	83a4 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5f5a:	f100 0b08 	add.w	fp, r0, #8
    5f5e:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5f60:	4682      	mov	sl, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5f62:	4658      	mov	r0, fp
    5f64:	f01e feb2 	bl	24ccc <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5f68:	233e      	movs	r3, #62	; 0x3e
    5f6a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5f6c:	2322      	movs	r3, #34	; 0x22
    5f6e:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    5f70:	2101      	movs	r1, #1
    5f72:	4658      	mov	r0, fp
    5f74:	f01e feaa 	bl	24ccc <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    5f78:	2309      	movs	r3, #9
    5f7a:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    5f7c:	2121      	movs	r1, #33	; 0x21
    5f7e:	4658      	mov	r0, fp
    5f80:	f01e fea4 	bl	24ccc <net_buf_simple_add>
    5f84:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    5f86:	3001      	adds	r0, #1
    5f88:	f1b9 0f00 	cmp.w	r9, #0
    5f8c:	d11c      	bne.n	5fc8 <ecc_thread+0x1fc>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    5f8e:	221f      	movs	r2, #31
    5f90:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    5f92:	4649      	mov	r1, r9
    5f94:	2220      	movs	r2, #32
    5f96:	f01b ffa0 	bl	21eda <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5f9a:	f3bf 8f5b 	dmb	ish
    5f9e:	e855 3f00 	ldrex	r3, [r5]
    5fa2:	f023 0302 	bic.w	r3, r3, #2
    5fa6:	e845 3200 	strex	r2, r3, [r5]
    5faa:	2a00      	cmp	r2, #0
    5fac:	d1f7      	bne.n	5f9e <ecc_thread+0x1d2>
    5fae:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5fb2:	4650      	mov	r0, sl
    5fb4:	e777      	b.n	5ea6 <ecc_thread+0xda>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    5fb6:	4a0c      	ldr	r2, [pc, #48]	; (5fe8 <ecc_thread+0x21c>)
    5fb8:	4b11      	ldr	r3, [pc, #68]	; (6000 <ecc_thread+0x234>)
    5fba:	f1a2 0120 	sub.w	r1, r2, #32
    5fbe:	4610      	mov	r0, r2
    5fc0:	f019 fd4d 	bl	1fa5e <uECC_shared_secret>
    5fc4:	4681      	mov	r9, r0
    5fc6:	e7c3      	b.n	5f50 <ecc_thread+0x184>
		evt->status = 0;
    5fc8:	2200      	movs	r2, #0
    5fca:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    5fcc:	4906      	ldr	r1, [pc, #24]	; (5fe8 <ecc_thread+0x21c>)
    5fce:	f01c f862 	bl	22096 <sys_memcpy_swap.constprop.1>
    5fd2:	e7e2      	b.n	5f9a <ecc_thread+0x1ce>
    5fd4:	00025880 	.word	0x00025880
    5fd8:	000258f8 	.word	0x000258f8
    5fdc:	00025980 	.word	0x00025980
    5fe0:	20007894 	.word	0x20007894
    5fe4:	2000084c 	.word	0x2000084c
    5fe8:	2000237d 	.word	0x2000237d
    5fec:	00026c3d 	.word	0x00026c3d
    5ff0:	20002788 	.word	0x20002788
    5ff4:	00026c87 	.word	0x00026c87
    5ff8:	00026c91 	.word	0x00026c91
    5ffc:	2000239d 	.word	0x2000239d
    6000:	00025d10 	.word	0x00025d10
    6004:	00026c66 	.word	0x00026c66
    6008:	2000235d 	.word	0x2000235d
    600c:	00025dc0 	.word	0x00025dc0

00006010 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    6010:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    6012:	7d05      	ldrb	r5, [r0, #20]
    6014:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    6016:	b9ad      	cbnz	r5, 6044 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    6018:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    601a:	881a      	ldrh	r2, [r3, #0]
    601c:	f242 0125 	movw	r1, #8229	; 0x2025
    6020:	428a      	cmp	r2, r1
    6022:	d017      	beq.n	6054 <bt_hci_ecc_send+0x44>
    6024:	f242 0126 	movw	r1, #8230	; 0x2026
    6028:	428a      	cmp	r2, r1
    602a:	d03c      	beq.n	60a6 <bt_hci_ecc_send+0x96>
    602c:	f242 0101 	movw	r1, #8193	; 0x2001
    6030:	428a      	cmp	r2, r1
    6032:	d107      	bne.n	6044 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    6034:	78da      	ldrb	r2, [r3, #3]
    6036:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    603a:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    603c:	791a      	ldrb	r2, [r3, #4]
    603e:	f022 0201 	bic.w	r2, r2, #1
    6042:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    6044:	4b32      	ldr	r3, [pc, #200]	; (6110 <bt_hci_ecc_send+0x100>)
    6046:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    604a:	4620      	mov	r0, r4
    604c:	691b      	ldr	r3, [r3, #16]
}
    604e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    6052:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    6054:	2103      	movs	r1, #3
    6056:	3008      	adds	r0, #8
    6058:	f01e fea5 	bl	24da6 <net_buf_simple_pull>
	net_buf_unref(buf);
    605c:	4620      	mov	r0, r4
    605e:	f017 fb83 	bl	1d768 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6062:	f3bf 8f5b 	dmb	ish
    6066:	4b2b      	ldr	r3, [pc, #172]	; (6114 <bt_hci_ecc_send+0x104>)
    6068:	681a      	ldr	r2, [r3, #0]
    606a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    606e:	0790      	lsls	r0, r2, #30
    6070:	d507      	bpl.n	6082 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6072:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    6074:	4629      	mov	r1, r5
    6076:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    607a:	f01b ffeb 	bl	22054 <send_cmd_status>
}
    607e:	2000      	movs	r0, #0
    6080:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6082:	f3bf 8f5b 	dmb	ish
    6086:	e853 2f00 	ldrex	r2, [r3]
    608a:	f042 0101 	orr.w	r1, r2, #1
    608e:	e843 1000 	strex	r0, r1, [r3]
    6092:	2800      	cmp	r0, #0
    6094:	d1f7      	bne.n	6086 <bt_hci_ecc_send+0x76>
    6096:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    609a:	07d1      	lsls	r1, r2, #31
    609c:	d4e9      	bmi.n	6072 <bt_hci_ecc_send+0x62>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    609e:	481e      	ldr	r0, [pc, #120]	; (6118 <bt_hci_ecc_send+0x108>)
    60a0:	f018 fd1e 	bl	1eae0 <z_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
    60a4:	e7e6      	b.n	6074 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    60a6:	2103      	movs	r1, #3
    60a8:	3008      	adds	r0, #8
    60aa:	f01e fe7c 	bl	24da6 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    60ae:	f3bf 8f5b 	dmb	ish
    60b2:	4b18      	ldr	r3, [pc, #96]	; (6114 <bt_hci_ecc_send+0x104>)
    60b4:	681a      	ldr	r2, [r3, #0]
    60b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    60ba:	07d2      	lsls	r2, r2, #31
    60bc:	d507      	bpl.n	60ce <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    60be:	250c      	movs	r5, #12
	net_buf_unref(buf);
    60c0:	4620      	mov	r0, r4
    60c2:	f017 fb51 	bl	1d768 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    60c6:	4629      	mov	r1, r5
    60c8:	f242 0026 	movw	r0, #8230	; 0x2026
    60cc:	e7d5      	b.n	607a <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    60ce:	89a2      	ldrh	r2, [r4, #12]
    60d0:	2a3f      	cmp	r2, #63	; 0x3f
    60d2:	d91b      	bls.n	610c <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    60d4:	f3bf 8f5b 	dmb	ish
    60d8:	e853 2f00 	ldrex	r2, [r3]
    60dc:	f042 0102 	orr.w	r1, r2, #2
    60e0:	e843 1000 	strex	r0, r1, [r3]
    60e4:	2800      	cmp	r0, #0
    60e6:	d1f7      	bne.n	60d8 <bt_hci_ecc_send+0xc8>
    60e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    60ec:	0793      	lsls	r3, r2, #30
    60ee:	d4e6      	bmi.n	60be <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    60f0:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    60f2:	480a      	ldr	r0, [pc, #40]	; (611c <bt_hci_ecc_send+0x10c>)
    60f4:	4631      	mov	r1, r6
    60f6:	f01b ffce 	bl	22096 <sys_memcpy_swap.constprop.1>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    60fa:	f106 0120 	add.w	r1, r6, #32
    60fe:	4808      	ldr	r0, [pc, #32]	; (6120 <bt_hci_ecc_send+0x110>)
    6100:	f01b ffc9 	bl	22096 <sys_memcpy_swap.constprop.1>
    6104:	4804      	ldr	r0, [pc, #16]	; (6118 <bt_hci_ecc_send+0x108>)
    6106:	f018 fceb 	bl	1eae0 <z_impl_k_sem_give>
	status = BT_HCI_ERR_SUCCESS;
    610a:	e7d9      	b.n	60c0 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    610c:	2512      	movs	r5, #18
    610e:	e7d7      	b.n	60c0 <bt_hci_ecc_send+0xb0>
    6110:	20006b88 	.word	0x20006b88
    6114:	2000084c 	.word	0x2000084c
    6118:	20007894 	.word	0x20007894
    611c:	2000237d 	.word	0x2000237d
    6120:	2000239d 	.word	0x2000239d

00006124 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    6124:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    6126:	4c0c      	ldr	r4, [pc, #48]	; (6158 <bt_hci_ecc_init+0x34>)
    6128:	490c      	ldr	r1, [pc, #48]	; (615c <bt_hci_ecc_init+0x38>)
    612a:	b086      	sub	sp, #24
    612c:	2300      	movs	r3, #0
    612e:	220a      	movs	r2, #10
    6130:	e9cd 3202 	strd	r3, r2, [sp, #8]
    6134:	e9cd 3304 	strd	r3, r3, [sp, #16]
    6138:	e9cd 3300 	strd	r3, r3, [sp]
    613c:	f240 424c 	movw	r2, #1100	; 0x44c
    6140:	4b07      	ldr	r3, [pc, #28]	; (6160 <bt_hci_ecc_init+0x3c>)
    6142:	4620      	mov	r0, r4
    6144:	f018 fd82 	bl	1ec4c <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    6148:	4906      	ldr	r1, [pc, #24]	; (6164 <bt_hci_ecc_init+0x40>)
    614a:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    614c:	b006      	add	sp, #24
    614e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6152:	f01f b8f0 	b.w	25336 <z_impl_k_thread_name_set>
    6156:	bf00      	nop
    6158:	200007e0 	.word	0x200007e0
    615c:	20002788 	.word	0x20002788
    6160:	00005dcd 	.word	0x00005dcd
    6164:	00026c36 	.word	0x00026c36

00006168 <export>:
}

static int export(int (*export_func)(const char *name, void *val,
				     size_t val_len))

{
    6168:	b570      	push	{r4, r5, r6, lr}
	const struct bt_settings_handler *h;

	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    616a:	4c06      	ldr	r4, [pc, #24]	; (6184 <export+0x1c>)
    616c:	4d06      	ldr	r5, [pc, #24]	; (6188 <export+0x20>)
{
    616e:	4606      	mov	r6, r0
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    6170:	42ac      	cmp	r4, r5
    6172:	d301      	bcc.n	6178 <export+0x10>
			h->export(export_func);
		}
	}

	return 0;
}
    6174:	2000      	movs	r0, #0
    6176:	bd70      	pop	{r4, r5, r6, pc}
		if (h->export) {
    6178:	68e3      	ldr	r3, [r4, #12]
    617a:	b10b      	cbz	r3, 6180 <export+0x18>
			h->export(export_func);
    617c:	4630      	mov	r0, r6
    617e:	4798      	blx	r3
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    6180:	3410      	adds	r4, #16
    6182:	e7f5      	b.n	6170 <export+0x8>
    6184:	00025850 	.word	0x00025850
    6188:	00025880 	.word	0x00025880

0000618c <save_id>:
			  ID_DATA_LEN(bt_dev.id_addr));
    618c:	4903      	ldr	r1, [pc, #12]	; (619c <save_id+0x10>)
	settings_save_one("bt/id", &bt_dev.id_addr,
    618e:	4804      	ldr	r0, [pc, #16]	; (61a0 <save_id+0x14>)
    6190:	79ca      	ldrb	r2, [r1, #7]
    6192:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    6196:	f7fd bfdf 	b.w	4158 <settings_save_one>
    619a:	bf00      	nop
    619c:	20006b88 	.word	0x20006b88
    61a0:	00026d71 	.word	0x00026d71

000061a4 <commit>:
{
    61a4:	b538      	push	{r3, r4, r5, lr}
	if (!bt_dev.id_count) {
    61a6:	4b12      	ldr	r3, [pc, #72]	; (61f0 <commit+0x4c>)
    61a8:	79db      	ldrb	r3, [r3, #7]
    61aa:	b13b      	cbz	r3, 61bc <commit+0x18>
{
    61ac:	4c11      	ldr	r4, [pc, #68]	; (61f4 <commit+0x50>)
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    61ae:	4d12      	ldr	r5, [pc, #72]	; (61f8 <commit+0x54>)
    61b0:	42ac      	cmp	r4, r5
    61b2:	d318      	bcc.n	61e6 <commit+0x42>
	bt_dev_show_info();
    61b4:	f001 fc2a 	bl	7a0c <bt_dev_show_info>
	return 0;
    61b8:	2400      	movs	r4, #0
    61ba:	e012      	b.n	61e2 <commit+0x3e>
		err = bt_setup_id_addr();
    61bc:	f001 fe90 	bl	7ee0 <bt_setup_id_addr>
		if (err) {
    61c0:	4604      	mov	r4, r0
    61c2:	2800      	cmp	r0, #0
    61c4:	d0f2      	beq.n	61ac <commit+0x8>
			BT_ERR("Unable to setup an identity address");
    61c6:	2301      	movs	r3, #1
    61c8:	f04f 0100 	mov.w	r1, #0
    61cc:	f363 0107 	bfi	r1, r3, #0, #8
    61d0:	4a0a      	ldr	r2, [pc, #40]	; (61fc <commit+0x58>)
    61d2:	4b0b      	ldr	r3, [pc, #44]	; (6200 <commit+0x5c>)
    61d4:	480b      	ldr	r0, [pc, #44]	; (6204 <commit+0x60>)
    61d6:	1a9b      	subs	r3, r3, r2
    61d8:	08db      	lsrs	r3, r3, #3
    61da:	f363 118f 	bfi	r1, r3, #6, #10
    61de:	f01a fd11 	bl	20c04 <log_0>
}
    61e2:	4620      	mov	r0, r4
    61e4:	bd38      	pop	{r3, r4, r5, pc}
		if (h->commit) {
    61e6:	68a3      	ldr	r3, [r4, #8]
    61e8:	b103      	cbz	r3, 61ec <commit+0x48>
			h->commit();
    61ea:	4798      	blx	r3
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    61ec:	3410      	adds	r4, #16
    61ee:	e7df      	b.n	61b0 <commit+0xc>
    61f0:	20006b88 	.word	0x20006b88
    61f4:	00025850 	.word	0x00025850
    61f8:	00025880 	.word	0x00025880
    61fc:	00025880 	.word	0x00025880
    6200:	00025970 	.word	0x00025970
    6204:	00026d4d 	.word	0x00026d4d

00006208 <set>:
	if (argc > 1) {
    6208:	2801      	cmp	r0, #1
{
    620a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    620e:	4607      	mov	r7, r0
    6210:	460d      	mov	r5, r1
    6212:	4616      	mov	r6, r2
	if (argc > 1) {
    6214:	dc31      	bgt.n	627a <set+0x72>
	if (!strcmp(argv[0], "id")) {
    6216:	492c      	ldr	r1, [pc, #176]	; (62c8 <set+0xc0>)
    6218:	6828      	ldr	r0, [r5, #0]
    621a:	f01b fe01 	bl	21e20 <strcmp>
    621e:	b9b0      	cbnz	r0, 624e <set+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6220:	f3bf 8f5b 	dmb	ish
    6224:	4d29      	ldr	r5, [pc, #164]	; (62cc <set+0xc4>)
    6226:	682c      	ldr	r4, [r5, #0]
    6228:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    622c:	f3c4 0480 	ubfx	r4, r4, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    6230:	b33c      	cbz	r4, 6282 <set+0x7a>
			BT_WARN("Ignoring identities stored in flash");
    6232:	2302      	movs	r3, #2
    6234:	f04f 0100 	mov.w	r1, #0
    6238:	f363 0107 	bfi	r1, r3, #0, #8
    623c:	4a24      	ldr	r2, [pc, #144]	; (62d0 <set+0xc8>)
    623e:	4b25      	ldr	r3, [pc, #148]	; (62d4 <set+0xcc>)
    6240:	4825      	ldr	r0, [pc, #148]	; (62d8 <set+0xd0>)
    6242:	1a9b      	subs	r3, r3, r2
    6244:	08db      	lsrs	r3, r3, #3
    6246:	f363 118f 	bfi	r1, r3, #6, #10
    624a:	f01a fcdb 	bl	20c04 <log_0>
	return 0;
    624e:	2400      	movs	r4, #0
    6250:	e010      	b.n	6274 <set+0x6c>
			if (!strcmp(argv[0], h->name)) {
    6252:	6821      	ldr	r1, [r4, #0]
    6254:	6828      	ldr	r0, [r5, #0]
    6256:	f01b fde3 	bl	21e20 <strcmp>
    625a:	b930      	cbnz	r0, 626a <set+0x62>
				return h->set(argc, argv, value_ctx);
    625c:	6863      	ldr	r3, [r4, #4]
    625e:	4632      	mov	r2, r6
    6260:	1d29      	adds	r1, r5, #4
    6262:	1e78      	subs	r0, r7, #1
}
    6264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return h->set(argc, argv, value_ctx);
    6268:	4718      	bx	r3
		for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    626a:	3410      	adds	r4, #16
    626c:	4544      	cmp	r4, r8
    626e:	d3f0      	bcc.n	6252 <set+0x4a>
		return -ENOENT;
    6270:	f06f 0401 	mvn.w	r4, #1
}
    6274:	4620      	mov	r0, r4
    6276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    627a:	4c18      	ldr	r4, [pc, #96]	; (62dc <set+0xd4>)
    627c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 62e4 <set+0xdc>
    6280:	e7f4      	b.n	626c <set+0x64>
		len = settings_val_read_cb(value_ctx, &bt_dev.id_addr, len);
    6282:	3d70      	subs	r5, #112	; 0x70
    6284:	2207      	movs	r2, #7
    6286:	4629      	mov	r1, r5
    6288:	4630      	mov	r0, r6
    628a:	f01b fc6d 	bl	21b68 <settings_val_read_cb>
		if (len < sizeof(bt_dev.id_addr[0])) {
    628e:	2806      	cmp	r0, #6
    6290:	d814      	bhi.n	62bc <set+0xb4>
				BT_ERR("Invalid length ID address in storage");
    6292:	2301      	movs	r3, #1
    6294:	f04f 0100 	mov.w	r1, #0
    6298:	4a0d      	ldr	r2, [pc, #52]	; (62d0 <set+0xc8>)
    629a:	4811      	ldr	r0, [pc, #68]	; (62e0 <set+0xd8>)
    629c:	f363 0107 	bfi	r1, r3, #0, #8
    62a0:	4b0c      	ldr	r3, [pc, #48]	; (62d4 <set+0xcc>)
    62a2:	1a9b      	subs	r3, r3, r2
    62a4:	08db      	lsrs	r3, r3, #3
    62a6:	f363 118f 	bfi	r1, r3, #6, #10
    62aa:	f01a fcab 	bl	20c04 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    62ae:	2207      	movs	r2, #7
    62b0:	4621      	mov	r1, r4
    62b2:	4628      	mov	r0, r5
    62b4:	f01b fe11 	bl	21eda <memset>
			bt_dev.id_count = 0U;
    62b8:	71ec      	strb	r4, [r5, #7]
    62ba:	e7db      	b.n	6274 <set+0x6c>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    62bc:	2307      	movs	r3, #7
    62be:	fbb0 f0f3 	udiv	r0, r0, r3
    62c2:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    62c4:	e7d6      	b.n	6274 <set+0x6c>
    62c6:	bf00      	nop
    62c8:	00026bf5 	.word	0x00026bf5
    62cc:	20006bf8 	.word	0x20006bf8
    62d0:	00025880 	.word	0x00025880
    62d4:	00025970 	.word	0x00025970
    62d8:	00026d77 	.word	0x00026d77
    62dc:	00025850 	.word	0x00025850
    62e0:	00026d9b 	.word	0x00026d9b
    62e4:	00025880 	.word	0x00025880

000062e8 <bt_settings_encode_key>:
{
    62e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62ec:	b088      	sub	sp, #32
    62ee:	799c      	ldrb	r4, [r3, #6]
    62f0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    62f4:	795d      	ldrb	r5, [r3, #5]
    62f6:	791e      	ldrb	r6, [r3, #4]
    62f8:	78df      	ldrb	r7, [r3, #3]
    62fa:	f893 c002 	ldrb.w	ip, [r3, #2]
    62fe:	f893 e001 	ldrb.w	lr, [r3, #1]
    6302:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    6304:	f1b8 0f00 	cmp.w	r8, #0
    6308:	d00e      	beq.n	6328 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    630a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    630e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    6312:	4613      	mov	r3, r2
    6314:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6318:	e9cd 4500 	strd	r4, r5, [sp]
    631c:	4a08      	ldr	r2, [pc, #32]	; (6340 <bt_settings_encode_key+0x58>)
    631e:	f7fc fdd3 	bl	2ec8 <snprintk>
}
    6322:	b008      	add	sp, #32
    6324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    6328:	e9cd e305 	strd	lr, r3, [sp, #20]
    632c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    6330:	4613      	mov	r3, r2
    6332:	e9cd 5601 	strd	r5, r6, [sp, #4]
    6336:	9400      	str	r4, [sp, #0]
    6338:	4a02      	ldr	r2, [pc, #8]	; (6344 <bt_settings_encode_key+0x5c>)
    633a:	f7fc fdc5 	bl	2ec8 <snprintk>
}
    633e:	e7f0      	b.n	6322 <bt_settings_encode_key+0x3a>
    6340:	00026cc1 	.word	0x00026cc1
    6344:	00026ce5 	.word	0x00026ce5

00006348 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6348:	4909      	ldr	r1, [pc, #36]	; (6370 <bt_settings_save_id+0x28>)
    634a:	f3bf 8f5b 	dmb	ish
    634e:	e851 3f00 	ldrex	r3, [r1]
    6352:	f043 0201 	orr.w	r2, r3, #1
    6356:	e841 2000 	strex	r0, r2, [r1]
    635a:	2800      	cmp	r0, #0
    635c:	d1f7      	bne.n	634e <bt_settings_save_id+0x6>
    635e:	f3bf 8f5b 	dmb	ish
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6362:	07db      	lsls	r3, r3, #31
    6364:	d403      	bmi.n	636e <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    6366:	3908      	subs	r1, #8
    6368:	4802      	ldr	r0, [pc, #8]	; (6374 <bt_settings_save_id+0x2c>)
    636a:	f01e be69 	b.w	25040 <k_queue_append>
}
    636e:	4770      	bx	lr
    6370:	20006e10 	.word	0x20006e10
    6374:	20001d2c 	.word	0x20001d2c

00006378 <bt_settings_init>:
	.h_commit = commit,
	.h_export = export,
};

int bt_settings_init(void)
{
    6378:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    637a:	f7fd ffd9 	bl	4330 <settings_subsys_init>
	if (err) {
    637e:	4604      	mov	r4, r0
    6380:	b180      	cbz	r0, 63a4 <bt_settings_init+0x2c>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    6382:	2301      	movs	r3, #1
    6384:	f04f 0200 	mov.w	r2, #0
    6388:	f363 0207 	bfi	r2, r3, #0, #8
    638c:	490f      	ldr	r1, [pc, #60]	; (63cc <bt_settings_init+0x54>)
    638e:	4b10      	ldr	r3, [pc, #64]	; (63d0 <bt_settings_init+0x58>)
    6390:	1a5b      	subs	r3, r3, r1
    6392:	08db      	lsrs	r3, r3, #3
    6394:	4601      	mov	r1, r0
    6396:	480f      	ldr	r0, [pc, #60]	; (63d4 <bt_settings_init+0x5c>)
    6398:	f363 128f 	bfi	r2, r3, #6, #10
		return err;
	}

	err = settings_register(&bt_settings);
	if (err) {
		BT_ERR("settings_register failed (err %d)", err);
    639c:	f01a fc3f 	bl	20c1e <log_1>
		return err;
	}

	return 0;
}
    63a0:	4620      	mov	r0, r4
    63a2:	bd10      	pop	{r4, pc}
	err = settings_register(&bt_settings);
    63a4:	480c      	ldr	r0, [pc, #48]	; (63d8 <bt_settings_init+0x60>)
    63a6:	f7fd ff89 	bl	42bc <settings_register>
	if (err) {
    63aa:	4604      	mov	r4, r0
    63ac:	2800      	cmp	r0, #0
    63ae:	d0f7      	beq.n	63a0 <bt_settings_init+0x28>
		BT_ERR("settings_register failed (err %d)", err);
    63b0:	2301      	movs	r3, #1
    63b2:	f04f 0200 	mov.w	r2, #0
    63b6:	f363 0207 	bfi	r2, r3, #0, #8
    63ba:	4904      	ldr	r1, [pc, #16]	; (63cc <bt_settings_init+0x54>)
    63bc:	4b04      	ldr	r3, [pc, #16]	; (63d0 <bt_settings_init+0x58>)
    63be:	1a5b      	subs	r3, r3, r1
    63c0:	08db      	lsrs	r3, r3, #3
    63c2:	4601      	mov	r1, r0
    63c4:	f363 128f 	bfi	r2, r3, #6, #10
    63c8:	4804      	ldr	r0, [pc, #16]	; (63dc <bt_settings_init+0x64>)
    63ca:	e7e7      	b.n	639c <bt_settings_init+0x24>
    63cc:	00025880 	.word	0x00025880
    63d0:	00025970 	.word	0x00025970
    63d4:	00026d06 	.word	0x00026d06
    63d8:	20006df0 	.word	0x20006df0
    63dc:	00026d2b 	.word	0x00026d2b

000063e0 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    63e0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    63e2:	7802      	ldrb	r2, [r0, #0]
    63e4:	2a01      	cmp	r2, #1
{
    63e6:	4604      	mov	r4, r0
    63e8:	460b      	mov	r3, r1
	switch (src->type) {
    63ea:	d017      	beq.n	641c <uuid_to_uuid128+0x3c>
    63ec:	b11a      	cbz	r2, 63f6 <uuid_to_uuid128+0x16>
    63ee:	2a02      	cmp	r2, #2
    63f0:	d02c      	beq.n	644c <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    63f2:	bcf0      	pop	{r4, r5, r6, r7}
    63f4:	4770      	bx	lr
		*dst = uuid128_base;
    63f6:	4a18      	ldr	r2, [pc, #96]	; (6458 <uuid_to_uuid128+0x78>)
    63f8:	460d      	mov	r5, r1
    63fa:	f102 0710 	add.w	r7, r2, #16
    63fe:	6810      	ldr	r0, [r2, #0]
    6400:	6851      	ldr	r1, [r2, #4]
    6402:	462e      	mov	r6, r5
    6404:	c603      	stmia	r6!, {r0, r1}
    6406:	3208      	adds	r2, #8
    6408:	42ba      	cmp	r2, r7
    640a:	4635      	mov	r5, r6
    640c:	d1f7      	bne.n	63fe <uuid_to_uuid128+0x1e>
    640e:	7812      	ldrb	r2, [r2, #0]
    6410:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    6412:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    6414:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    6416:	0a12      	lsrs	r2, r2, #8
    6418:	739a      	strb	r2, [r3, #14]
    641a:	e7ea      	b.n	63f2 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    641c:	4a0e      	ldr	r2, [pc, #56]	; (6458 <uuid_to_uuid128+0x78>)
    641e:	460d      	mov	r5, r1
    6420:	f102 0710 	add.w	r7, r2, #16
    6424:	6810      	ldr	r0, [r2, #0]
    6426:	6851      	ldr	r1, [r2, #4]
    6428:	462e      	mov	r6, r5
    642a:	c603      	stmia	r6!, {r0, r1}
    642c:	3208      	adds	r2, #8
    642e:	42ba      	cmp	r2, r7
    6430:	4635      	mov	r5, r6
    6432:	d1f7      	bne.n	6424 <uuid_to_uuid128+0x44>
    6434:	7812      	ldrb	r2, [r2, #0]
    6436:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    6438:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    643a:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    643c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    6440:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    6442:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    6444:	0a12      	lsrs	r2, r2, #8
    6446:	7399      	strb	r1, [r3, #14]
    6448:	741a      	strb	r2, [r3, #16]
    644a:	e7d2      	b.n	63f2 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    644c:	4601      	mov	r1, r0
    644e:	2211      	movs	r2, #17
    6450:	4618      	mov	r0, r3
}
    6452:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    6454:	f01b bd17 	b.w	21e86 <memcpy>
    6458:	00026dec 	.word	0x00026dec

0000645c <bt_uuid_to_str>:
	return -EINVAL;
}

#if defined(CONFIG_BT_DEBUG)
void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
    645c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t tmp1, tmp5;
	u16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
    645e:	7805      	ldrb	r5, [r0, #0]
    6460:	2d01      	cmp	r5, #1
{
    6462:	b08b      	sub	sp, #44	; 0x2c
    6464:	4604      	mov	r4, r0
    6466:	460e      	mov	r6, r1
    6468:	4617      	mov	r7, r2
	switch (uuid->type) {
    646a:	d00f      	beq.n	648c <bt_uuid_to_str+0x30>
    646c:	b135      	cbz	r5, 647c <bt_uuid_to_str+0x20>
    646e:	2d02      	cmp	r5, #2
    6470:	d00e      	beq.n	6490 <bt_uuid_to_str+0x34>

		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
			 tmp5, tmp4, tmp3, tmp2, tmp1, tmp0);
		break;
	default:
		(void)memset(str, 0, len);
    6472:	2100      	movs	r1, #0
    6474:	4630      	mov	r0, r6
    6476:	f01b fd30 	bl	21eda <memset>
		return;
    647a:	e005      	b.n	6488 <bt_uuid_to_str+0x2c>
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
    647c:	8843      	ldrh	r3, [r0, #2]
		snprintk(str, len, "%04x", BT_UUID_32(uuid)->val);
    647e:	4a20      	ldr	r2, [pc, #128]	; (6500 <bt_uuid_to_str+0xa4>)
    6480:	4639      	mov	r1, r7
    6482:	4630      	mov	r0, r6
    6484:	f7fc fd20 	bl	2ec8 <snprintk>
	}
}
    6488:	b00b      	add	sp, #44	; 0x2c
    648a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintk(str, len, "%04x", BT_UUID_32(uuid)->val);
    648c:	6843      	ldr	r3, [r0, #4]
    648e:	e7f6      	b.n	647e <bt_uuid_to_str+0x22>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
    6490:	462a      	mov	r2, r5
    6492:	1c41      	adds	r1, r0, #1
    6494:	a806      	add	r0, sp, #24
    6496:	f01b fcf6 	bl	21e86 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
    649a:	1ce1      	adds	r1, r4, #3
    649c:	2204      	movs	r2, #4
    649e:	a808      	add	r0, sp, #32
    64a0:	f01b fcf1 	bl	21e86 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
    64a4:	462a      	mov	r2, r5
    64a6:	1de1      	adds	r1, r4, #7
    64a8:	f10d 001a 	add.w	r0, sp, #26
    64ac:	f01b fceb 	bl	21e86 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
    64b0:	462a      	mov	r2, r5
    64b2:	f104 0109 	add.w	r1, r4, #9
    64b6:	a807      	add	r0, sp, #28
    64b8:	f01b fce5 	bl	21e86 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
    64bc:	462a      	mov	r2, r5
    64be:	f104 010b 	add.w	r1, r4, #11
    64c2:	f10d 001e 	add.w	r0, sp, #30
    64c6:	f01b fcde 	bl	21e86 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
    64ca:	f104 010d 	add.w	r1, r4, #13
    64ce:	2204      	movs	r2, #4
    64d0:	a809      	add	r0, sp, #36	; 0x24
    64d2:	f01b fcd8 	bl	21e86 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
    64d6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    64da:	9304      	str	r3, [sp, #16]
    64dc:	9b08      	ldr	r3, [sp, #32]
    64de:	9303      	str	r3, [sp, #12]
    64e0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    64e4:	9302      	str	r3, [sp, #8]
    64e6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    64ea:	9301      	str	r3, [sp, #4]
    64ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    64f0:	9300      	str	r3, [sp, #0]
    64f2:	4a04      	ldr	r2, [pc, #16]	; (6504 <bt_uuid_to_str+0xa8>)
    64f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    64f6:	4639      	mov	r1, r7
    64f8:	4630      	mov	r0, r6
    64fa:	f7fc fce5 	bl	2ec8 <snprintk>
		break;
    64fe:	e7c3      	b.n	6488 <bt_uuid_to_str+0x2c>
    6500:	00027aef 	.word	0x00027aef
    6504:	00026dcf 	.word	0x00026dcf

00006508 <bt_uuid_str>:

const char *bt_uuid_str(const struct bt_uuid *uuid)
{
    6508:	b510      	push	{r4, lr}
	static char str[37];

	bt_uuid_to_str(uuid, str, sizeof(str));
    650a:	4c03      	ldr	r4, [pc, #12]	; (6518 <bt_uuid_str+0x10>)
    650c:	2225      	movs	r2, #37	; 0x25
    650e:	4621      	mov	r1, r4
    6510:	f7ff ffa4 	bl	645c <bt_uuid_to_str>

	return str;
}
    6514:	4620      	mov	r0, r4
    6516:	bd10      	pop	{r4, pc}
    6518:	200023bd 	.word	0x200023bd

0000651c <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    651c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    651e:	4c06      	ldr	r4, [pc, #24]	; (6538 <le_dhkey_complete+0x1c>)
    6520:	6822      	ldr	r2, [r4, #0]
    6522:	b132      	cbz	r2, 6532 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    6524:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    6526:	7803      	ldrb	r3, [r0, #0]
    6528:	b923      	cbnz	r3, 6534 <le_dhkey_complete+0x18>
    652a:	3001      	adds	r0, #1
    652c:	4790      	blx	r2
		dh_key_cb = NULL;
    652e:	2300      	movs	r3, #0
    6530:	6023      	str	r3, [r4, #0]
	}
}
    6532:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    6534:	2000      	movs	r0, #0
    6536:	e7f9      	b.n	652c <le_dhkey_complete+0x10>
    6538:	20000860 	.word	0x20000860

0000653c <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    653c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    653e:	4d0b      	ldr	r5, [pc, #44]	; (656c <ver_str+0x30>)
{
    6540:	4606      	mov	r6, r0
	const char * const str[] = {
    6542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    6544:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    6546:	ac01      	add	r4, sp, #4
    6548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    654a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    654c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    654e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1",
	};

	if (ver < ARRAY_SIZE(str)) {
    6552:	2e0a      	cmp	r6, #10
	const char * const str[] = {
    6554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		return str[ver];
    6558:	bf9b      	ittet	ls
    655a:	ab0c      	addls	r3, sp, #48	; 0x30
    655c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    6560:	4803      	ldrhi	r0, [pc, #12]	; (6570 <ver_str+0x34>)
		return str[ver];
    6562:	f856 0c2c 	ldrls.w	r0, [r6, #-44]
}
    6566:	b00c      	add	sp, #48	; 0x30
    6568:	bd70      	pop	{r4, r5, r6, pc}
    656a:	bf00      	nop
    656c:	000259fc 	.word	0x000259fc
    6570:	00027521 	.word	0x00027521

00006574 <stack_analyze>:
{
    6574:	b570      	push	{r4, r5, r6, lr}
	size_t unused = 0;
    6576:	2400      	movs	r4, #0
{
    6578:	b086      	sub	sp, #24
			for (size_t i = 0; i < size; i++) {
    657a:	42a2      	cmp	r2, r4
    657c:	d101      	bne.n	6582 <stack_analyze+0xe>
    657e:	4614      	mov	r4, r2
    6580:	e002      	b.n	6588 <stack_analyze+0x14>
				if (checked_stack[i] == 0xaaU) {
    6582:	5d0b      	ldrb	r3, [r1, r4]
    6584:	2baa      	cmp	r3, #170	; 0xaa
    6586:	d01b      	beq.n	65c0 <stack_analyze+0x4c>
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    6588:	2103      	movs	r1, #3
    658a:	f04f 0300 	mov.w	r3, #0
    658e:	f361 0307 	bfi	r3, r1, #0, #8
    6592:	4d0c      	ldr	r5, [pc, #48]	; (65c4 <stack_analyze+0x50>)
    6594:	490c      	ldr	r1, [pc, #48]	; (65c8 <stack_analyze+0x54>)
    6596:	1a6d      	subs	r5, r5, r1
		unsigned int pcnt = ((size - unused) * 100) / size;
    6598:	1b16      	subs	r6, r2, r4
    659a:	08ed      	lsrs	r5, r5, #3
    659c:	2164      	movs	r1, #100	; 0x64
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    659e:	e9cd 0401 	strd	r0, r4, [sp, #4]
    65a2:	e9cd 6203 	strd	r6, r2, [sp, #12]
		unsigned int pcnt = ((size - unused) * 100) / size;
    65a6:	4371      	muls	r1, r6
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    65a8:	f365 138f 	bfi	r3, r5, #6, #10
		unsigned int pcnt = ((size - unused) * 100) / size;
    65ac:	fbb1 f2f2 	udiv	r2, r1, r2
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    65b0:	4806      	ldr	r0, [pc, #24]	; (65cc <stack_analyze+0x58>)
    65b2:	9205      	str	r2, [sp, #20]
    65b4:	a901      	add	r1, sp, #4
    65b6:	2205      	movs	r2, #5
    65b8:	f01a fb78 	bl	20cac <log_n>
			name, unused, size - unused, size, pcnt);
	}
}
    65bc:	b006      	add	sp, #24
    65be:	bd70      	pop	{r4, r5, r6, pc}
					unused++;
    65c0:	3401      	adds	r4, #1
    65c2:	e7da      	b.n	657a <stack_analyze+0x6>
    65c4:	00025980 	.word	0x00025980
    65c8:	00025880 	.word	0x00025880
    65cc:	00026c91 	.word	0x00026c91

000065d0 <le_pkey_complete>:
{
    65d0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    65d2:	6885      	ldr	r5, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    65d4:	480e      	ldr	r0, [pc, #56]	; (6610 <le_pkey_complete+0x40>)
    65d6:	f06f 0120 	mvn.w	r1, #32
    65da:	f01b fde2 	bl	221a2 <atomic_and>
	if (!evt->status) {
    65de:	782b      	ldrb	r3, [r5, #0]
    65e0:	b943      	cbnz	r3, 65f4 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    65e2:	1c69      	adds	r1, r5, #1
    65e4:	2240      	movs	r2, #64	; 0x40
    65e6:	480b      	ldr	r0, [pc, #44]	; (6614 <le_pkey_complete+0x44>)
    65e8:	f01b fc4d 	bl	21e86 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    65ec:	2110      	movs	r1, #16
    65ee:	4808      	ldr	r0, [pc, #32]	; (6610 <le_pkey_complete+0x40>)
    65f0:	f01b fdc8 	bl	22184 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    65f4:	4b08      	ldr	r3, [pc, #32]	; (6618 <le_pkey_complete+0x48>)
    65f6:	681c      	ldr	r4, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    65f8:	1c6e      	adds	r6, r5, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    65fa:	b904      	cbnz	r4, 65fe <le_pkey_complete+0x2e>
}
    65fc:	bd70      	pop	{r4, r5, r6, pc}
		cb->func(evt->status ? NULL : evt->key);
    65fe:	782a      	ldrb	r2, [r5, #0]
    6600:	6823      	ldr	r3, [r4, #0]
    6602:	2a00      	cmp	r2, #0
    6604:	bf0c      	ite	eq
    6606:	4630      	moveq	r0, r6
    6608:	2000      	movne	r0, #0
    660a:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    660c:	6864      	ldr	r4, [r4, #4]
    660e:	e7f4      	b.n	65fa <le_pkey_complete+0x2a>
    6610:	20006bf8 	.word	0x20006bf8
    6614:	200023e2 	.word	0x200023e2
    6618:	20000864 	.word	0x20000864

0000661c <le_conn_update_complete>:
{
    661c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    661e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6620:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6624:	4630      	mov	r0, r6
    6626:	f002 fae3 	bl	8bf0 <bt_conn_lookup_handle>
	if (!conn) {
    662a:	4604      	mov	r4, r0
    662c:	b980      	cbnz	r0, 6650 <le_conn_update_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    662e:	2301      	movs	r3, #1
    6630:	f04f 0200 	mov.w	r2, #0
    6634:	f363 0207 	bfi	r2, r3, #0, #8
    6638:	491d      	ldr	r1, [pc, #116]	; (66b0 <le_conn_update_complete+0x94>)
    663a:	4b1e      	ldr	r3, [pc, #120]	; (66b4 <le_conn_update_complete+0x98>)
    663c:	481e      	ldr	r0, [pc, #120]	; (66b8 <le_conn_update_complete+0x9c>)
    663e:	1a5b      	subs	r3, r3, r1
    6640:	08db      	lsrs	r3, r3, #3
    6642:	f363 128f 	bfi	r2, r3, #6, #10
    6646:	4631      	mov	r1, r6
    6648:	f01a fae9 	bl	20c1e <log_1>
}
    664c:	b002      	add	sp, #8
    664e:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    6650:	782b      	ldrb	r3, [r5, #0]
    6652:	b9bb      	cbnz	r3, 6684 <le_conn_update_complete+0x68>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    6654:	792a      	ldrb	r2, [r5, #4]
    6656:	78eb      	ldrb	r3, [r5, #3]
    6658:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    665c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    6660:	79aa      	ldrb	r2, [r5, #6]
    6662:	796b      	ldrb	r3, [r5, #5]
    6664:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6668:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    666c:	79eb      	ldrb	r3, [r5, #7]
    666e:	7a2a      	ldrb	r2, [r5, #8]
    6670:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6674:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    6678:	f001 ff8e 	bl	8598 <notify_le_param_updated>
	bt_conn_unref(conn);
    667c:	4620      	mov	r0, r4
    667e:	f01b fea5 	bl	223cc <bt_conn_unref>
    6682:	e7e3      	b.n	664c <le_conn_update_complete+0x30>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    6684:	2b1a      	cmp	r3, #26
    6686:	d1f9      	bne.n	667c <le_conn_update_complete+0x60>
    6688:	78c3      	ldrb	r3, [r0, #3]
    668a:	2b01      	cmp	r3, #1
    668c:	d1f6      	bne.n	667c <le_conn_update_complete+0x60>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    668e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    6692:	3004      	adds	r0, #4
    6694:	f01b fd76 	bl	22184 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    6698:	0543      	lsls	r3, r0, #21
    669a:	d4ef      	bmi.n	667c <le_conn_update_complete+0x60>
		param.interval_min = conn->le.interval_min;
    669c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    669e:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    66a0:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    66a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    66a4:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    66a6:	4620      	mov	r0, r4
    66a8:	f002 fda4 	bl	91f4 <bt_l2cap_update_conn_param>
    66ac:	e7e6      	b.n	667c <le_conn_update_complete+0x60>
    66ae:	bf00      	nop
    66b0:	00025880 	.word	0x00025880
    66b4:	000258f0 	.word	0x000258f0
    66b8:	00027404 	.word	0x00027404

000066bc <le_adv_report>:
{
    66bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t num_reports = net_buf_pull_u8(buf);
    66c0:	f100 0808 	add.w	r8, r0, #8
{
    66c4:	b085      	sub	sp, #20
    66c6:	4604      	mov	r4, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    66c8:	4640      	mov	r0, r8
    66ca:	f01e fb7c 	bl	24dc6 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    66ce:	4f29      	ldr	r7, [pc, #164]	; (6774 <le_adv_report+0xb8>)
	u8_t num_reports = net_buf_pull_u8(buf);
    66d0:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    66d2:	9b01      	ldr	r3, [sp, #4]
    66d4:	b183      	cbz	r3, 66f8 <le_adv_report+0x3c>
		if (buf->len < sizeof(*info)) {
    66d6:	89a3      	ldrh	r3, [r4, #12]
    66d8:	2b08      	cmp	r3, #8
    66da:	d810      	bhi.n	66fe <le_adv_report+0x42>
			BT_ERR("Unexpected end of buffer");
    66dc:	2301      	movs	r3, #1
    66de:	f04f 0100 	mov.w	r1, #0
    66e2:	f363 0107 	bfi	r1, r3, #0, #8
    66e6:	4a24      	ldr	r2, [pc, #144]	; (6778 <le_adv_report+0xbc>)
    66e8:	4b24      	ldr	r3, [pc, #144]	; (677c <le_adv_report+0xc0>)
    66ea:	4825      	ldr	r0, [pc, #148]	; (6780 <le_adv_report+0xc4>)
    66ec:	1a9b      	subs	r3, r3, r2
    66ee:	08db      	lsrs	r3, r3, #3
    66f0:	f363 118f 	bfi	r1, r3, #6, #10
    66f4:	f01a fa86 	bl	20c04 <log_0>
}
    66f8:	b005      	add	sp, #20
    66fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		info = net_buf_pull_mem(buf, sizeof(*info));
    66fe:	2109      	movs	r1, #9
    6700:	4640      	mov	r0, r8
    6702:	f01e fb58 	bl	24db6 <net_buf_simple_pull_mem>
		rssi = info->data[info->length];
    6706:	7a03      	ldrb	r3, [r0, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6708:	4601      	mov	r1, r0
		rssi = info->data[info->length];
    670a:	4403      	add	r3, r0
		info = net_buf_pull_mem(buf, sizeof(*info));
    670c:	4605      	mov	r5, r0
		rssi = info->data[info->length];
    670e:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6712:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    6716:	3b02      	subs	r3, #2
    6718:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    671a:	a802      	add	r0, sp, #8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    671c:	d827      	bhi.n	676e <le_adv_report+0xb2>
			bt_addr_le_copy(&id_addr, &info->addr);
    671e:	f01b fd28 	bl	22172 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6722:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6726:	3b02      	subs	r3, #2
    6728:	f88d 3008 	strb.w	r3, [sp, #8]
		if (scan_dev_found_cb) {
    672c:	683b      	ldr	r3, [r7, #0]
    672e:	b1a3      	cbz	r3, 675a <le_adv_report+0x9e>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    6730:	4640      	mov	r0, r8
    6732:	f01e fb6c 	bl	24e0e <net_buf_simple_headroom>
			buf->len = info->length;
    6736:	7a2b      	ldrb	r3, [r5, #8]
	state->len = buf->len;
    6738:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    673c:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    673e:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    6740:	4643      	mov	r3, r8
    6742:	782a      	ldrb	r2, [r5, #0]
    6744:	683e      	ldr	r6, [r7, #0]
    6746:	fa4f f18b 	sxtb.w	r1, fp
    674a:	a802      	add	r0, sp, #8
    674c:	47b0      	blx	r6
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    674e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    6750:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6754:	fa13 f389 	uxtah	r3, r3, r9
    6758:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    675a:	7a29      	ldrb	r1, [r5, #8]
    675c:	4640      	mov	r0, r8
    675e:	3101      	adds	r1, #1
    6760:	f01e fb21 	bl	24da6 <net_buf_simple_pull>
    6764:	9b01      	ldr	r3, [sp, #4]
    6766:	1e5e      	subs	r6, r3, #1
    6768:	b2f3      	uxtb	r3, r6
    676a:	9301      	str	r3, [sp, #4]
    676c:	e7b1      	b.n	66d2 <le_adv_report+0x16>
			bt_addr_le_copy(&id_addr,
    676e:	f01b fd00 	bl	22172 <bt_addr_le_copy>
    6772:	e7db      	b.n	672c <le_adv_report+0x70>
    6774:	2000086c 	.word	0x2000086c
    6778:	00025880 	.word	0x00025880
    677c:	000258f0 	.word	0x000258f0
    6780:	000273ca 	.word	0x000273ca

00006784 <hci_num_completed_packets>:
{
    6784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6788:	4d36      	ldr	r5, [pc, #216]	; (6864 <hci_num_completed_packets+0xe0>)
				BT_ERR("packets count mismatch");
    678a:	4a37      	ldr	r2, [pc, #220]	; (6868 <hci_num_completed_packets+0xe4>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    678c:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    6790:	1aad      	subs	r5, r5, r2
    6792:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	for (i = 0; i < evt->num_handles; i++) {
    6796:	2600      	movs	r6, #0
    6798:	f898 2000 	ldrb.w	r2, [r8]
    679c:	4296      	cmp	r6, r2
    679e:	db02      	blt.n	67a6 <hci_num_completed_packets+0x22>
}
    67a0:	b003      	add	sp, #12
    67a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    67a6:	eb08 0286 	add.w	r2, r8, r6, lsl #2
    67aa:	f8b2 1001 	ldrh.w	r1, [r2, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    67ae:	f8b2 b003 	ldrh.w	fp, [r2, #3]
    67b2:	f04f 0020 	mov.w	r0, #32
    67b6:	f3ef 8911 	mrs	r9, BASEPRI
    67ba:	f380 8811 	msr	BASEPRI, r0
		conn = bt_conn_lookup_handle(handle);
    67be:	4608      	mov	r0, r1
    67c0:	9101      	str	r1, [sp, #4]
    67c2:	f002 fa15 	bl	8bf0 <bt_conn_lookup_handle>
		if (!conn) {
    67c6:	9901      	ldr	r1, [sp, #4]
    67c8:	4604      	mov	r4, r0
    67ca:	b988      	cbnz	r0, 67f0 <hci_num_completed_packets+0x6c>
			BT_ERR("No connection for handle %u", handle);
    67cc:	f027 023f 	bic.w	r2, r7, #63	; 0x3f
    67d0:	f042 0201 	orr.w	r2, r2, #1
    67d4:	f362 0707 	bfi	r7, r2, #0, #8
    67d8:	f365 178f 	bfi	r7, r5, #6, #10
    67dc:	463a      	mov	r2, r7
    67de:	4823      	ldr	r0, [pc, #140]	; (686c <hci_num_completed_packets+0xe8>)
    67e0:	f01a fa1d 	bl	20c1e <log_1>
	__asm__ volatile(
    67e4:	f389 8811 	msr	BASEPRI, r9
    67e8:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
    67ec:	3601      	adds	r6, #1
    67ee:	e7d3      	b.n	6798 <hci_num_completed_packets+0x14>
    67f0:	f389 8811 	msr	BASEPRI, r9
    67f4:	f3bf 8f6f 	isb	sy
			k_fifo_put(&conn->tx_notify, node);
    67f8:	f100 091c 	add.w	r9, r0, #28
		while (count--) {
    67fc:	f1bb 0f00 	cmp.w	fp, #0
    6800:	d022      	beq.n	6848 <hci_num_completed_packets+0xc4>
	__asm__ volatile(
    6802:	f04f 0120 	mov.w	r1, #32
    6806:	f3ef 8e11 	mrs	lr, BASEPRI
    680a:	f381 8811 	msr	BASEPRI, r1
Z_GENLIST_IS_EMPTY(slist)
    680e:	6961      	ldr	r1, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6810:	b129      	cbz	r1, 681e <hci_num_completed_packets+0x9a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6812:	69a0      	ldr	r0, [r4, #24]
    6814:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    6816:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6818:	4281      	cmp	r1, r0
	list->tail = node;
    681a:	bf08      	it	eq
    681c:	61a3      	streq	r3, [r4, #24]
	__asm__ volatile(
    681e:	f38e 8811 	msr	BASEPRI, lr
    6822:	f3bf 8f6f 	isb	sy
			if (!node) {
    6826:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    682a:	fa1f fb82 	uxth.w	fp, r2
    682e:	b979      	cbnz	r1, 6850 <hci_num_completed_packets+0xcc>
				BT_ERR("packets count mismatch");
    6830:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
    6834:	f042 0201 	orr.w	r2, r2, #1
    6838:	f362 0a07 	bfi	sl, r2, #0, #8
    683c:	f365 1a8f 	bfi	sl, r5, #6, #10
    6840:	4651      	mov	r1, sl
    6842:	480b      	ldr	r0, [pc, #44]	; (6870 <hci_num_completed_packets+0xec>)
    6844:	f01a f9de 	bl	20c04 <log_0>
		bt_conn_unref(conn);
    6848:	4620      	mov	r0, r4
    684a:	f01b fdbf 	bl	223cc <bt_conn_unref>
    684e:	e7cd      	b.n	67ec <hci_num_completed_packets+0x68>
			k_fifo_put(&conn->tx_notify, node);
    6850:	4648      	mov	r0, r9
    6852:	f01e fbf5 	bl	25040 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    6856:	4620      	mov	r0, r4
    6858:	f001 fe9a 	bl	8590 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    685c:	f018 f940 	bl	1eae0 <z_impl_k_sem_give>
    6860:	e7cc      	b.n	67fc <hci_num_completed_packets+0x78>
    6862:	bf00      	nop
    6864:	000258f0 	.word	0x000258f0
    6868:	00025880 	.word	0x00025880
    686c:	0002730a 	.word	0x0002730a
    6870:	00027326 	.word	0x00027326

00006874 <handle_event>:
{
    6874:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6876:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    687a:	4604      	mov	r4, r0
    687c:	4608      	mov	r0, r1
		if (handler->event != event) {
    687e:	7811      	ldrb	r1, [r2, #0]
    6880:	42a1      	cmp	r1, r4
    6882:	d01e      	beq.n	68c2 <handle_event+0x4e>
			continue;
    6884:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    6886:	429a      	cmp	r2, r3
    6888:	d1f9      	bne.n	687e <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    688a:	2302      	movs	r3, #2
    688c:	f04f 0500 	mov.w	r5, #0
    6890:	4a19      	ldr	r2, [pc, #100]	; (68f8 <handle_event+0x84>)
    6892:	8986      	ldrh	r6, [r0, #12]
    6894:	6880      	ldr	r0, [r0, #8]
    6896:	f363 0507 	bfi	r5, r3, #0, #8
    689a:	4b18      	ldr	r3, [pc, #96]	; (68fc <handle_event+0x88>)
    689c:	1a9b      	subs	r3, r3, r2
    689e:	08db      	lsrs	r3, r3, #3
    68a0:	4631      	mov	r1, r6
    68a2:	f363 158f 	bfi	r5, r3, #6, #10
    68a6:	f7ff fa31 	bl	5d0c <bt_hex_real>
    68aa:	f7fd f8a7 	bl	39fc <log_strdup>
    68ae:	f8ad 5000 	strh.w	r5, [sp]
    68b2:	4603      	mov	r3, r0
    68b4:	4632      	mov	r2, r6
    68b6:	4621      	mov	r1, r4
    68b8:	4811      	ldr	r0, [pc, #68]	; (6900 <handle_event+0x8c>)
    68ba:	f01a f9dc 	bl	20c76 <log_3>
}
    68be:	b002      	add	sp, #8
    68c0:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    68c2:	8981      	ldrh	r1, [r0, #12]
    68c4:	7853      	ldrb	r3, [r2, #1]
    68c6:	428b      	cmp	r3, r1
    68c8:	d911      	bls.n	68ee <handle_event+0x7a>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    68ca:	2201      	movs	r2, #1
    68cc:	f04f 0300 	mov.w	r3, #0
    68d0:	f362 0307 	bfi	r3, r2, #0, #8
    68d4:	4808      	ldr	r0, [pc, #32]	; (68f8 <handle_event+0x84>)
    68d6:	4a09      	ldr	r2, [pc, #36]	; (68fc <handle_event+0x88>)
    68d8:	1a12      	subs	r2, r2, r0
    68da:	08d2      	lsrs	r2, r2, #3
    68dc:	4809      	ldr	r0, [pc, #36]	; (6904 <handle_event+0x90>)
    68de:	f362 138f 	bfi	r3, r2, #6, #10
    68e2:	4622      	mov	r2, r4
}
    68e4:	b002      	add	sp, #8
    68e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    68ea:	f01a b9ac 	b.w	20c46 <log_2>
		handler->handler(buf);
    68ee:	6853      	ldr	r3, [r2, #4]
}
    68f0:	b002      	add	sp, #8
    68f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    68f6:	4718      	bx	r3
    68f8:	00025880 	.word	0x00025880
    68fc:	000258f0 	.word	0x000258f0
    6900:	0002724d 	.word	0x0002724d
    6904:	0002722b 	.word	0x0002722b

00006908 <hci_le_meta_event>:
{
    6908:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    690a:	2101      	movs	r1, #1
{
    690c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    690e:	3008      	adds	r0, #8
    6910:	f01e fa51 	bl	24db6 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6914:	4621      	mov	r1, r4
    6916:	2308      	movs	r3, #8
    6918:	4a02      	ldr	r2, [pc, #8]	; (6924 <hci_le_meta_event+0x1c>)
    691a:	7800      	ldrb	r0, [r0, #0]
}
    691c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6920:	f7ff bfa8 	b.w	6874 <handle_event>
    6924:	00025de0 	.word	0x00025de0

00006928 <hci_cmd_done>:
{
    6928:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    692c:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    692e:	7990      	ldrb	r0, [r2, #6]
    6930:	4f2b      	ldr	r7, [pc, #172]	; (69e0 <hci_cmd_done+0xb8>)
{
    6932:	4688      	mov	r8, r1
    6934:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6936:	f016 fe7d 	bl	1d634 <net_buf_pool_get>
    693a:	4287      	cmp	r7, r0
    693c:	d01a      	beq.n	6974 <hci_cmd_done+0x4c>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    693e:	2302      	movs	r3, #2
    6940:	f04f 0400 	mov.w	r4, #0
    6944:	f363 0407 	bfi	r4, r3, #0, #8
    6948:	4a26      	ldr	r2, [pc, #152]	; (69e4 <hci_cmd_done+0xbc>)
    694a:	4b27      	ldr	r3, [pc, #156]	; (69e8 <hci_cmd_done+0xc0>)
    694c:	79a8      	ldrb	r0, [r5, #6]
    694e:	9600      	str	r6, [sp, #0]
    6950:	1ad2      	subs	r2, r2, r3
    6952:	08d2      	lsrs	r2, r2, #3
    6954:	f362 148f 	bfi	r4, r2, #6, #10
    6958:	9001      	str	r0, [sp, #4]
    695a:	f016 fe6b 	bl	1d634 <net_buf_pool_get>
    695e:	4623      	mov	r3, r4
    6960:	e9cd 0702 	strd	r0, r7, [sp, #8]
    6964:	2204      	movs	r2, #4
    6966:	4669      	mov	r1, sp
    6968:	4820      	ldr	r0, [pc, #128]	; (69ec <hci_cmd_done+0xc4>)
    696a:	f01a f99f 	bl	20cac <log_n>
}
    696e:	b004      	add	sp, #16
    6970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    6974:	4628      	mov	r0, r5
    6976:	f016 fe63 	bl	1d640 <net_buf_id>
    697a:	4c1d      	ldr	r4, [pc, #116]	; (69f0 <hci_cmd_done+0xc8>)
    697c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6980:	8843      	ldrh	r3, [r0, #2]
    6982:	42b3      	cmp	r3, r6
    6984:	d015      	beq.n	69b2 <hci_cmd_done+0x8a>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    6986:	2302      	movs	r3, #2
    6988:	f04f 0700 	mov.w	r7, #0
    698c:	f363 0707 	bfi	r7, r3, #0, #8
    6990:	4a14      	ldr	r2, [pc, #80]	; (69e4 <hci_cmd_done+0xbc>)
    6992:	4b15      	ldr	r3, [pc, #84]	; (69e8 <hci_cmd_done+0xc0>)
    6994:	1ad2      	subs	r2, r2, r3
    6996:	08d2      	lsrs	r2, r2, #3
    6998:	4628      	mov	r0, r5
    699a:	f362 178f 	bfi	r7, r2, #6, #10
    699e:	f016 fe4f 	bl	1d640 <net_buf_id>
    69a2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    69a6:	463b      	mov	r3, r7
    69a8:	8842      	ldrh	r2, [r0, #2]
    69aa:	4812      	ldr	r0, [pc, #72]	; (69f4 <hci_cmd_done+0xcc>)
    69ac:	4631      	mov	r1, r6
    69ae:	f01a f94a 	bl	20c46 <log_2>
	if (cmd(buf)->sync) {
    69b2:	4628      	mov	r0, r5
    69b4:	f016 fe44 	bl	1d640 <net_buf_id>
    69b8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    69bc:	6843      	ldr	r3, [r0, #4]
    69be:	2b00      	cmp	r3, #0
    69c0:	d0d5      	beq.n	696e <hci_cmd_done+0x46>
		cmd(buf)->status = status;
    69c2:	4628      	mov	r0, r5
    69c4:	f016 fe3c 	bl	1d640 <net_buf_id>
    69c8:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    69cc:	4628      	mov	r0, r5
    69ce:	f016 fe37 	bl	1d640 <net_buf_id>
    69d2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    69d6:	6840      	ldr	r0, [r0, #4]
    69d8:	f018 f882 	bl	1eae0 <z_impl_k_sem_give>
    69dc:	e7c7      	b.n	696e <hci_cmd_done+0x46>
    69de:	bf00      	nop
    69e0:	2000798c 	.word	0x2000798c
    69e4:	000258f0 	.word	0x000258f0
    69e8:	00025880 	.word	0x00025880
    69ec:	0002726f 	.word	0x0002726f
    69f0:	20000850 	.word	0x20000850
    69f4:	000272a4 	.word	0x000272a4

000069f8 <hci_cmd_status>:
{
    69f8:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    69fa:	2104      	movs	r1, #4
{
    69fc:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    69fe:	3008      	adds	r0, #8
    6a00:	f01e f9d9 	bl	24db6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    6a04:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    6a06:	7801      	ldrb	r1, [r0, #0]
    6a08:	8840      	ldrh	r0, [r0, #2]
    6a0a:	4622      	mov	r2, r4
    6a0c:	f7ff ff8c 	bl	6928 <hci_cmd_done>
	if (ncmd) {
    6a10:	b125      	cbz	r5, 6a1c <hci_cmd_status+0x24>
    6a12:	4803      	ldr	r0, [pc, #12]	; (6a20 <hci_cmd_status+0x28>)
}
    6a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6a18:	f018 b862 	b.w	1eae0 <z_impl_k_sem_give>
    6a1c:	bd38      	pop	{r3, r4, r5, pc}
    6a1e:	bf00      	nop
    6a20:	20006c30 	.word	0x20006c30

00006a24 <hci_cmd_complete>:
{
    6a24:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6a26:	2103      	movs	r1, #3
{
    6a28:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6a2a:	3008      	adds	r0, #8
    6a2c:	f01e f9c3 	bl	24db6 <net_buf_simple_pull_mem>
	status = buf->data[0];
    6a30:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    6a32:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    6a34:	7819      	ldrb	r1, [r3, #0]
    6a36:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    6a3a:	4622      	mov	r2, r4
    6a3c:	f7ff ff74 	bl	6928 <hci_cmd_done>
	if (ncmd) {
    6a40:	b125      	cbz	r5, 6a4c <hci_cmd_complete+0x28>
    6a42:	4803      	ldr	r0, [pc, #12]	; (6a50 <hci_cmd_complete+0x2c>)
}
    6a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6a48:	f018 b84a 	b.w	1eae0 <z_impl_k_sem_give>
    6a4c:	bd38      	pop	{r3, r4, r5, pc}
    6a4e:	bf00      	nop
    6a50:	20006c30 	.word	0x20006c30

00006a54 <hci_tx_thread>:
{
    6a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Uncleared pending sent_cmd");
    6a58:	4b5a      	ldr	r3, [pc, #360]	; (6bc4 <hci_tx_thread+0x170>)
    6a5a:	4c5b      	ldr	r4, [pc, #364]	; (6bc8 <hci_tx_thread+0x174>)
    6a5c:	1ae4      	subs	r4, r4, r3
    6a5e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		events[0].state = K_POLL_STATE_NOT_READY;
    6a62:	4a5a      	ldr	r2, [pc, #360]	; (6bcc <hci_tx_thread+0x178>)
    6a64:	68d3      	ldr	r3, [r2, #12]
    6a66:	f36f 3310 	bfc	r3, #12, #5
    6a6a:	60d3      	str	r3, [r2, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6a6c:	f102 0014 	add.w	r0, r2, #20
    6a70:	f001 ff84 	bl	897c <bt_conn_prepare_events>
    6a74:	1c43      	adds	r3, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    6a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a7a:	4619      	mov	r1, r3
    6a7c:	4853      	ldr	r0, [pc, #332]	; (6bcc <hci_tx_thread+0x178>)
    6a7e:	9301      	str	r3, [sp, #4]
    6a80:	f018 fb08 	bl	1f094 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    6a84:	2800      	cmp	r0, #0
    6a86:	f000 809a 	beq.w	6bbe <hci_tx_thread+0x16a>
    6a8a:	f04f 0100 	mov.w	r1, #0
    6a8e:	2301      	movs	r3, #1
    6a90:	f363 0107 	bfi	r1, r3, #0, #8
    6a94:	484e      	ldr	r0, [pc, #312]	; (6bd0 <hci_tx_thread+0x17c>)
    6a96:	f364 118f 	bfi	r1, r4, #6, #10
	BT_ASSERT(buf);
    6a9a:	f01a f8b3 	bl	20c04 <log_0>
    6a9e:	4040      	eors	r0, r0
    6aa0:	f380 8811 	msr	BASEPRI, r0
    6aa4:	f04f 0004 	mov.w	r0, #4
    6aa8:	df02      	svc	2
		switch (ev->state) {
    6aaa:	68f1      	ldr	r1, [r6, #12]
    6aac:	f3c1 3104 	ubfx	r1, r1, #12, #5
    6ab0:	2901      	cmp	r1, #1
    6ab2:	d95d      	bls.n	6b70 <hci_tx_thread+0x11c>
    6ab4:	2904      	cmp	r1, #4
    6ab6:	d175      	bne.n	6ba4 <hci_tx_thread+0x150>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6ab8:	f896 800c 	ldrb.w	r8, [r6, #12]
    6abc:	f1b8 0f00 	cmp.w	r8, #0
    6ac0:	d160      	bne.n	6b84 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6ac2:	4641      	mov	r1, r8
    6ac4:	4843      	ldr	r0, [pc, #268]	; (6bd4 <hci_tx_thread+0x180>)
    6ac6:	f01e f883 	bl	24bd0 <net_buf_get>
	BT_ASSERT(buf);
    6aca:	4607      	mov	r7, r0
    6acc:	b940      	cbnz	r0, 6ae0 <hci_tx_thread+0x8c>
    6ace:	f04f 0100 	mov.w	r1, #0
    6ad2:	2301      	movs	r3, #1
    6ad4:	f363 0107 	bfi	r1, r3, #0, #8
    6ad8:	f364 118f 	bfi	r1, r4, #6, #10
    6adc:	483e      	ldr	r0, [pc, #248]	; (6bd8 <hci_tx_thread+0x184>)
    6ade:	e7dc      	b.n	6a9a <hci_tx_thread+0x46>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    6ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6ae4:	483d      	ldr	r0, [pc, #244]	; (6bdc <hci_tx_thread+0x188>)
    6ae6:	f018 f825 	bl	1eb34 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6aea:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
    6aee:	b18a      	cbz	r2, 6b14 <hci_tx_thread+0xc0>
		BT_ERR("Uncleared pending sent_cmd");
    6af0:	f029 023f 	bic.w	r2, r9, #63	; 0x3f
    6af4:	f042 0201 	orr.w	r2, r2, #1
    6af8:	f362 0907 	bfi	r9, r2, #0, #8
    6afc:	f364 198f 	bfi	r9, r4, #6, #10
    6b00:	4649      	mov	r1, r9
    6b02:	4837      	ldr	r0, [pc, #220]	; (6be0 <hci_tx_thread+0x18c>)
    6b04:	f01a f87e 	bl	20c04 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6b08:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6b0c:	f016 fe2c 	bl	1d768 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6b10:	f8c5 80c0 	str.w	r8, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    6b14:	4638      	mov	r0, r7
    6b16:	f01e f8d5 	bl	24cc4 <net_buf_ref>
    6b1a:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    6b1e:	4638      	mov	r0, r7
    6b20:	f7ff fa76 	bl	6010 <bt_hci_ecc_send>
	if (err) {
    6b24:	4601      	mov	r1, r0
    6b26:	b318      	cbz	r0, 6b70 <hci_tx_thread+0x11c>
		BT_ERR("Unable to send to driver (err %d)", err);
    6b28:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    6b2c:	f043 0301 	orr.w	r3, r3, #1
    6b30:	f363 0a07 	bfi	sl, r3, #0, #8
    6b34:	f364 1a8f 	bfi	sl, r4, #6, #10
    6b38:	4652      	mov	r2, sl
    6b3a:	482a      	ldr	r0, [pc, #168]	; (6be4 <hci_tx_thread+0x190>)
    6b3c:	f01a f86f 	bl	20c1e <log_1>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    6b40:	4826      	ldr	r0, [pc, #152]	; (6bdc <hci_tx_thread+0x188>)
    6b42:	f017 ffcd 	bl	1eae0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    6b46:	4638      	mov	r0, r7
    6b48:	f016 fd7a 	bl	1d640 <net_buf_id>
    6b4c:	4b26      	ldr	r3, [pc, #152]	; (6be8 <hci_tx_thread+0x194>)
    6b4e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6b52:	2200      	movs	r2, #0
    6b54:	211f      	movs	r1, #31
    6b56:	8840      	ldrh	r0, [r0, #2]
    6b58:	f7ff fee6 	bl	6928 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6b5c:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6b60:	f016 fe02 	bl	1d768 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6b64:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6b66:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    6b68:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    6b6c:	f016 fdfc 	bl	1d768 <net_buf_unref>
	for (; count; ev++, count--) {
    6b70:	9b01      	ldr	r3, [sp, #4]
    6b72:	3b01      	subs	r3, #1
    6b74:	3614      	adds	r6, #20
    6b76:	9301      	str	r3, [sp, #4]
    6b78:	9b01      	ldr	r3, [sp, #4]
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d195      	bne.n	6aaa <hci_tx_thread+0x56>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    6b7e:	f017 fefd 	bl	1e97c <z_impl_k_yield>
    6b82:	e76e      	b.n	6a62 <hci_tx_thread+0xe>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    6b84:	f1b8 0f01 	cmp.w	r8, #1
    6b88:	d104      	bne.n	6b94 <hci_tx_thread+0x140>
					conn = CONTAINER_OF(ev->fifo,
    6b8a:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    6b8c:	381c      	subs	r0, #28
    6b8e:	f001 fe35 	bl	87fc <bt_conn_notify_tx>
    6b92:	e7ed      	b.n	6b70 <hci_tx_thread+0x11c>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6b94:	f1b8 0f02 	cmp.w	r8, #2
    6b98:	d1ea      	bne.n	6b70 <hci_tx_thread+0x11c>
					conn = CONTAINER_OF(ev->fifo,
    6b9a:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    6b9c:	382c      	subs	r0, #44	; 0x2c
    6b9e:	f002 f929 	bl	8df4 <bt_conn_process_tx>
    6ba2:	e7e5      	b.n	6b70 <hci_tx_thread+0x11c>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    6ba4:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
    6ba8:	f043 0302 	orr.w	r3, r3, #2
    6bac:	f363 0b07 	bfi	fp, r3, #0, #8
    6bb0:	f364 1b8f 	bfi	fp, r4, #6, #10
    6bb4:	465a      	mov	r2, fp
    6bb6:	480d      	ldr	r0, [pc, #52]	; (6bec <hci_tx_thread+0x198>)
    6bb8:	f01a f831 	bl	20c1e <log_1>
    6bbc:	e7d8      	b.n	6b70 <hci_tx_thread+0x11c>
    6bbe:	4e03      	ldr	r6, [pc, #12]	; (6bcc <hci_tx_thread+0x178>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6bc0:	4d0b      	ldr	r5, [pc, #44]	; (6bf0 <hci_tx_thread+0x19c>)
    6bc2:	e7d9      	b.n	6b78 <hci_tx_thread+0x124>
    6bc4:	00025880 	.word	0x00025880
    6bc8:	000258f0 	.word	0x000258f0
    6bcc:	20006e14 	.word	0x20006e14
    6bd0:	0002733d 	.word	0x0002733d
    6bd4:	20006c4c 	.word	0x20006c4c
    6bd8:	00027357 	.word	0x00027357
    6bdc:	20006c30 	.word	0x20006c30
    6be0:	0002736c 	.word	0x0002736c
    6be4:	00027387 	.word	0x00027387
    6be8:	20000850 	.word	0x20000850
    6bec:	000273a9 	.word	0x000273a9
    6bf0:	20006b88 	.word	0x20006b88

00006bf4 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    6bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    6bf6:	4e0b      	ldr	r6, [pc, #44]	; (6c24 <id_find+0x30>)
{
    6bf8:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    6bfa:	2500      	movs	r5, #0
    6bfc:	79f3      	ldrb	r3, [r6, #7]
    6bfe:	b2ec      	uxtb	r4, r5
    6c00:	42a3      	cmp	r3, r4
    6c02:	d802      	bhi.n	6c0a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    6c04:	f06f 0401 	mvn.w	r4, #1
    6c08:	e009      	b.n	6c1e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    6c0a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    6c0e:	2207      	movs	r2, #7
    6c10:	4431      	add	r1, r6
    6c12:	4638      	mov	r0, r7
    6c14:	f01b f910 	bl	21e38 <memcmp>
    6c18:	3501      	adds	r5, #1
    6c1a:	2800      	cmp	r0, #0
    6c1c:	d1ee      	bne.n	6bfc <id_find+0x8>
}
    6c1e:	4620      	mov	r0, r4
    6c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c22:	bf00      	nop
    6c24:	20006b88 	.word	0x20006b88

00006c28 <slave_update_conn_param>:
{
    6c28:	b508      	push	{r3, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    6c2a:	2108      	movs	r1, #8
{
    6c2c:	4603      	mov	r3, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    6c2e:	3004      	adds	r0, #4
    6c30:	f01b fad3 	bl	221da <atomic_test_bit>
    6c34:	b940      	cbnz	r0, 6c48 <slave_update_conn_param+0x20>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6c36:	f103 0178 	add.w	r1, r3, #120	; 0x78
    6c3a:	f241 3288 	movw	r2, #5000	; 0x1388
    6c3e:	4803      	ldr	r0, [pc, #12]	; (6c4c <slave_update_conn_param+0x24>)
}
    6c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6c44:	f018 b8b4 	b.w	1edb0 <k_delayed_work_submit_to_queue>
    6c48:	bd08      	pop	{r3, pc}
    6c4a:	bf00      	nop
    6c4c:	20001d2c 	.word	0x20001d2c

00006c50 <le_remote_feat_complete>:
{
    6c50:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    6c52:	6885      	ldr	r5, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    6c54:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6c58:	4630      	mov	r0, r6
    6c5a:	f001 ffc9 	bl	8bf0 <bt_conn_lookup_handle>
	if (!conn) {
    6c5e:	4604      	mov	r4, r0
    6c60:	b980      	cbnz	r0, 6c84 <le_remote_feat_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6c62:	2301      	movs	r3, #1
    6c64:	f04f 0200 	mov.w	r2, #0
    6c68:	f363 0207 	bfi	r2, r3, #0, #8
    6c6c:	490e      	ldr	r1, [pc, #56]	; (6ca8 <le_remote_feat_complete+0x58>)
    6c6e:	4b0f      	ldr	r3, [pc, #60]	; (6cac <le_remote_feat_complete+0x5c>)
    6c70:	480f      	ldr	r0, [pc, #60]	; (6cb0 <le_remote_feat_complete+0x60>)
    6c72:	1a5b      	subs	r3, r3, r1
    6c74:	08db      	lsrs	r3, r3, #3
    6c76:	4631      	mov	r1, r6
    6c78:	f363 128f 	bfi	r2, r3, #6, #10
}
    6c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6c80:	f019 bfcd 	b.w	20c1e <log_1>
	if (!evt->status) {
    6c84:	782b      	ldrb	r3, [r5, #0]
    6c86:	b923      	cbnz	r3, 6c92 <le_remote_feat_complete+0x42>
		memcpy(conn->le.features, evt->features,
    6c88:	2208      	movs	r2, #8
    6c8a:	1ce9      	adds	r1, r5, #3
    6c8c:	306c      	adds	r0, #108	; 0x6c
    6c8e:	f01b f8fa 	bl	21e86 <memcpy>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6c92:	78e3      	ldrb	r3, [r4, #3]
    6c94:	2b01      	cmp	r3, #1
    6c96:	d102      	bne.n	6c9e <le_remote_feat_complete+0x4e>
		slave_update_conn_param(conn);
    6c98:	4620      	mov	r0, r4
    6c9a:	f7ff ffc5 	bl	6c28 <slave_update_conn_param>
	bt_conn_unref(conn);
    6c9e:	4620      	mov	r0, r4
}
    6ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    6ca4:	f01b bb92 	b.w	223cc <bt_conn_unref>
    6ca8:	00025880 	.word	0x00025880
    6cac:	000258f0 	.word	0x000258f0
    6cb0:	00027404 	.word	0x00027404

00006cb4 <bt_hci_cmd_create>:
{
    6cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6cb8:	4680      	mov	r8, r0
    6cba:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    6cbc:	4813      	ldr	r0, [pc, #76]	; (6d0c <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    6cbe:	4d14      	ldr	r5, [pc, #80]	; (6d10 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    6cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6cc4:	f01d ff7e 	bl	24bc4 <net_buf_alloc_fixed>
    6cc8:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6cca:	f100 0608 	add.w	r6, r0, #8
    6cce:	2100      	movs	r1, #0
    6cd0:	4630      	mov	r0, r6
	*(u8_t *)net_buf_user_data(buf) = type;
    6cd2:	2700      	movs	r7, #0
    6cd4:	f01d ff95 	bl	24c02 <net_buf_simple_reserve>
    6cd8:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    6cda:	4620      	mov	r0, r4
    6cdc:	f016 fcb0 	bl	1d640 <net_buf_id>
    6ce0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    6ce4:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    6ce8:	4620      	mov	r0, r4
    6cea:	f016 fca9 	bl	1d640 <net_buf_id>
    6cee:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    6cf2:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    6cf4:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    6cf6:	4630      	mov	r0, r6
    6cf8:	f01d ffe8 	bl	24ccc <net_buf_simple_add>
	hdr->param_len = param_len;
    6cfc:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    6d00:	f8a0 8000 	strh.w	r8, [r0]
}
    6d04:	4620      	mov	r0, r4
    6d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d0a:	bf00      	nop
    6d0c:	2000798c 	.word	0x2000798c
    6d10:	20000850 	.word	0x20000850

00006d14 <bt_hci_cmd_send>:
{
    6d14:	b538      	push	{r3, r4, r5, lr}
    6d16:	4604      	mov	r4, r0
	if (!buf) {
    6d18:	460d      	mov	r5, r1
    6d1a:	b919      	cbnz	r1, 6d24 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    6d1c:	f7ff ffca 	bl	6cb4 <bt_hci_cmd_create>
		if (!buf) {
    6d20:	4605      	mov	r5, r0
    6d22:	b310      	cbz	r0, 6d6a <bt_hci_cmd_send+0x56>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6d24:	f640 4335 	movw	r3, #3125	; 0xc35
    6d28:	429c      	cmp	r4, r3
    6d2a:	d118      	bne.n	6d5e <bt_hci_cmd_send+0x4a>
		return bt_hci_ecc_send(buf);
    6d2c:	4628      	mov	r0, r5
    6d2e:	f7ff f96f 	bl	6010 <bt_hci_ecc_send>
		if (err) {
    6d32:	4604      	mov	r4, r0
    6d34:	b188      	cbz	r0, 6d5a <bt_hci_cmd_send+0x46>
			BT_ERR("Unable to send to driver (err %d)", err);
    6d36:	2301      	movs	r3, #1
    6d38:	f04f 0200 	mov.w	r2, #0
    6d3c:	f363 0207 	bfi	r2, r3, #0, #8
    6d40:	490b      	ldr	r1, [pc, #44]	; (6d70 <bt_hci_cmd_send+0x5c>)
    6d42:	4b0c      	ldr	r3, [pc, #48]	; (6d74 <bt_hci_cmd_send+0x60>)
    6d44:	1a5b      	subs	r3, r3, r1
    6d46:	08db      	lsrs	r3, r3, #3
    6d48:	4601      	mov	r1, r0
    6d4a:	f363 128f 	bfi	r2, r3, #6, #10
    6d4e:	480a      	ldr	r0, [pc, #40]	; (6d78 <bt_hci_cmd_send+0x64>)
    6d50:	f019 ff65 	bl	20c1e <log_1>
			net_buf_unref(buf);
    6d54:	4628      	mov	r0, r5
    6d56:	f016 fd07 	bl	1d768 <net_buf_unref>
}
    6d5a:	4620      	mov	r0, r4
    6d5c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6d5e:	4629      	mov	r1, r5
    6d60:	4806      	ldr	r0, [pc, #24]	; (6d7c <bt_hci_cmd_send+0x68>)
    6d62:	f01d ffa2 	bl	24caa <net_buf_put>
	return 0;
    6d66:	2400      	movs	r4, #0
    6d68:	e7f7      	b.n	6d5a <bt_hci_cmd_send+0x46>
			return -ENOBUFS;
    6d6a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6d6e:	e7f4      	b.n	6d5a <bt_hci_cmd_send+0x46>
    6d70:	00025880 	.word	0x00025880
    6d74:	000258f0 	.word	0x000258f0
    6d78:	00027387 	.word	0x00027387
    6d7c:	20006c4c 	.word	0x20006c4c

00006d80 <le_conn_param_neg_reply>:
{
    6d80:	b570      	push	{r4, r5, r6, lr}
    6d82:	4606      	mov	r6, r0
    6d84:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    6d86:	f242 0021 	movw	r0, #8225	; 0x2021
    6d8a:	2103      	movs	r1, #3
    6d8c:	f7ff ff92 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    6d90:	4604      	mov	r4, r0
    6d92:	b978      	cbnz	r0, 6db4 <le_conn_param_neg_reply+0x34>
		BT_ERR("Unable to allocate buffer");
    6d94:	2301      	movs	r3, #1
    6d96:	f04f 0100 	mov.w	r1, #0
    6d9a:	f363 0107 	bfi	r1, r3, #0, #8
    6d9e:	4a0c      	ldr	r2, [pc, #48]	; (6dd0 <le_conn_param_neg_reply+0x50>)
    6da0:	4b0c      	ldr	r3, [pc, #48]	; (6dd4 <le_conn_param_neg_reply+0x54>)
    6da2:	480d      	ldr	r0, [pc, #52]	; (6dd8 <le_conn_param_neg_reply+0x58>)
    6da4:	1a9b      	subs	r3, r3, r2
    6da6:	08db      	lsrs	r3, r3, #3
    6da8:	f363 118f 	bfi	r1, r3, #6, #10
}
    6dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    6db0:	f019 bf28 	b.w	20c04 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    6db4:	2103      	movs	r1, #3
    6db6:	3008      	adds	r0, #8
    6db8:	f01d ff88 	bl	24ccc <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    6dbc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    6dbe:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6dc0:	4621      	mov	r1, r4
    6dc2:	f242 0021 	movw	r0, #8225	; 0x2021
}
    6dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6dca:	f7ff bfa3 	b.w	6d14 <bt_hci_cmd_send>
    6dce:	bf00      	nop
    6dd0:	00025880 	.word	0x00025880
    6dd4:	000258f0 	.word	0x000258f0
    6dd8:	000273ea 	.word	0x000273ea

00006ddc <le_conn_param_req>:
{
    6ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6dde:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6de0:	78d9      	ldrb	r1, [r3, #3]
    6de2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    6de4:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6de6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6dea:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    6dee:	7959      	ldrb	r1, [r3, #5]
    6df0:	791a      	ldrb	r2, [r3, #4]
    6df2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6df6:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6dfa:	799a      	ldrb	r2, [r3, #6]
    6dfc:	79d9      	ldrb	r1, [r3, #7]
    6dfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6e02:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6e06:	7a1a      	ldrb	r2, [r3, #8]
    6e08:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    6e0a:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6e0c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    6e10:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6e12:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    6e16:	f001 feeb 	bl	8bf0 <bt_conn_lookup_handle>
	if (!conn) {
    6e1a:	4605      	mov	r5, r0
    6e1c:	b990      	cbnz	r0, 6e44 <le_conn_param_req+0x68>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6e1e:	2301      	movs	r3, #1
    6e20:	f04f 0200 	mov.w	r2, #0
    6e24:	f363 0207 	bfi	r2, r3, #0, #8
    6e28:	491f      	ldr	r1, [pc, #124]	; (6ea8 <le_conn_param_req+0xcc>)
    6e2a:	4b20      	ldr	r3, [pc, #128]	; (6eac <le_conn_param_req+0xd0>)
    6e2c:	4820      	ldr	r0, [pc, #128]	; (6eb0 <le_conn_param_req+0xd4>)
    6e2e:	1a5b      	subs	r3, r3, r1
    6e30:	08db      	lsrs	r3, r3, #3
    6e32:	4621      	mov	r1, r4
    6e34:	f363 128f 	bfi	r2, r3, #6, #10
    6e38:	f019 fef1 	bl	20c1e <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    6e3c:	2102      	movs	r1, #2
    6e3e:	4620      	mov	r0, r4
    6e40:	f7ff ff9e 	bl	6d80 <le_conn_param_neg_reply>
	if (!le_param_req(conn, &param)) {
    6e44:	4669      	mov	r1, sp
    6e46:	4628      	mov	r0, r5
    6e48:	f001 fbda 	bl	8600 <le_param_req>
    6e4c:	b940      	cbnz	r0, 6e60 <le_conn_param_req+0x84>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    6e4e:	211e      	movs	r1, #30
    6e50:	4620      	mov	r0, r4
    6e52:	f7ff ff95 	bl	6d80 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    6e56:	4628      	mov	r0, r5
    6e58:	f01b fab8 	bl	223cc <bt_conn_unref>
}
    6e5c:	b003      	add	sp, #12
    6e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    6e60:	210e      	movs	r1, #14
    6e62:	f242 0020 	movw	r0, #8224	; 0x2020
    6e66:	f7ff ff25 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    6e6a:	4607      	mov	r7, r0
    6e6c:	2800      	cmp	r0, #0
    6e6e:	d0f2      	beq.n	6e56 <le_conn_param_req+0x7a>
	cp = net_buf_add(buf, sizeof(*cp));
    6e70:	210e      	movs	r1, #14
    6e72:	3008      	adds	r0, #8
    6e74:	f01d ff2a 	bl	24ccc <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    6e78:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    6e7a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    6e7c:	2100      	movs	r1, #0
    6e7e:	f01b f82c 	bl	21eda <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    6e82:	f8bd 3000 	ldrh.w	r3, [sp]
    6e86:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    6e88:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6e8c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    6e8e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6e92:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6e94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    6e98:	8026      	strh	r6, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6e9a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    6e9c:	4639      	mov	r1, r7
    6e9e:	f242 0020 	movw	r0, #8224	; 0x2020
    6ea2:	f7ff ff37 	bl	6d14 <bt_hci_cmd_send>
    6ea6:	e7d6      	b.n	6e56 <le_conn_param_req+0x7a>
    6ea8:	00025880 	.word	0x00025880
    6eac:	000258f0 	.word	0x000258f0
    6eb0:	00027404 	.word	0x00027404

00006eb4 <bt_hci_cmd_send_sync>:
{
    6eb4:	b570      	push	{r4, r5, r6, lr}
    6eb6:	4615      	mov	r5, r2
    6eb8:	b086      	sub	sp, #24
	if (!buf) {
    6eba:	460c      	mov	r4, r1
    6ebc:	b919      	cbnz	r1, 6ec6 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    6ebe:	f7ff fef9 	bl	6cb4 <bt_hci_cmd_create>
		if (!buf) {
    6ec2:	4604      	mov	r4, r0
    6ec4:	b3a0      	cbz	r0, 6f30 <bt_hci_cmd_send_sync+0x7c>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    6ec6:	2201      	movs	r2, #1
    6ec8:	2100      	movs	r1, #0
    6eca:	4668      	mov	r0, sp
    6ecc:	f01e fa1e 	bl	2530c <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    6ed0:	4620      	mov	r0, r4
    6ed2:	f016 fbb5 	bl	1d640 <net_buf_id>
    6ed6:	4e18      	ldr	r6, [pc, #96]	; (6f38 <bt_hci_cmd_send_sync+0x84>)
    6ed8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    6edc:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    6ee0:	4620      	mov	r0, r4
    6ee2:	f01d feef 	bl	24cc4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6ee6:	4621      	mov	r1, r4
    6ee8:	4814      	ldr	r0, [pc, #80]	; (6f3c <bt_hci_cmd_send_sync+0x88>)
    6eea:	f01d fede 	bl	24caa <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    6eee:	f242 7110 	movw	r1, #10000	; 0x2710
    6ef2:	4668      	mov	r0, sp
    6ef4:	f017 fe1e 	bl	1eb34 <z_impl_k_sem_take>
	if (cmd(buf)->status) {
    6ef8:	4620      	mov	r0, r4
    6efa:	f016 fba1 	bl	1d640 <net_buf_id>
    6efe:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    6f02:	b173      	cbz	r3, 6f22 <bt_hci_cmd_send_sync+0x6e>
		switch (cmd(buf)->status) {
    6f04:	4620      	mov	r0, r4
    6f06:	f016 fb9b 	bl	1d640 <net_buf_id>
    6f0a:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    6f0e:	2b09      	cmp	r3, #9
			err = -EIO;
    6f10:	bf0c      	ite	eq
    6f12:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    6f16:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    6f1a:	4620      	mov	r0, r4
    6f1c:	f016 fc24 	bl	1d768 <net_buf_unref>
    6f20:	e003      	b.n	6f2a <bt_hci_cmd_send_sync+0x76>
		if (rsp) {
    6f22:	2d00      	cmp	r5, #0
    6f24:	d0f9      	beq.n	6f1a <bt_hci_cmd_send_sync+0x66>
			*rsp = buf;
    6f26:	602c      	str	r4, [r5, #0]
		err = 0;
    6f28:	461d      	mov	r5, r3
}
    6f2a:	4628      	mov	r0, r5
    6f2c:	b006      	add	sp, #24
    6f2e:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOBUFS;
    6f30:	f06f 0536 	mvn.w	r5, #54	; 0x36
    6f34:	e7f9      	b.n	6f2a <bt_hci_cmd_send_sync+0x76>
    6f36:	bf00      	nop
    6f38:	20000850 	.word	0x20000850
    6f3c:	20006c4c 	.word	0x20006c4c

00006f40 <set_le_scan_enable>:
{
    6f40:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    6f42:	2102      	movs	r1, #2
{
    6f44:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    6f46:	f242 000c 	movw	r0, #8204	; 0x200c
    6f4a:	f7ff feb3 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    6f4e:	4604      	mov	r4, r0
    6f50:	b330      	cbz	r0, 6fa0 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    6f52:	2102      	movs	r1, #2
    6f54:	3008      	adds	r0, #8
    6f56:	f01d feb9 	bl	24ccc <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    6f5a:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    6f5c:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    6f5e:	d116      	bne.n	6f8e <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    6f60:	210d      	movs	r1, #13
    6f62:	4811      	ldr	r0, [pc, #68]	; (6fa8 <set_le_scan_enable+0x68>)
    6f64:	f01b f939 	bl	221da <atomic_test_bit>
    6f68:	7058      	strb	r0, [r3, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    6f6a:	4621      	mov	r1, r4
	cp->enable = enable;
    6f6c:	701d      	strb	r5, [r3, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    6f6e:	2200      	movs	r2, #0
    6f70:	f242 000c 	movw	r0, #8204	; 0x200c
    6f74:	f7ff ff9e 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    6f78:	4604      	mov	r4, r0
    6f7a:	b930      	cbnz	r0, 6f8a <set_le_scan_enable+0x4a>
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    6f7c:	2d01      	cmp	r5, #1
    6f7e:	d109      	bne.n	6f94 <set_le_scan_enable+0x54>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
    6f84:	4808      	ldr	r0, [pc, #32]	; (6fa8 <set_le_scan_enable+0x68>)
    6f86:	f01b f8fd 	bl	22184 <atomic_or>
}
    6f8a:	4620      	mov	r0, r4
    6f8c:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    6f8e:	2200      	movs	r2, #0
    6f90:	7042      	strb	r2, [r0, #1]
    6f92:	e7ea      	b.n	6f6a <set_le_scan_enable+0x2a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6f94:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    6f98:	4803      	ldr	r0, [pc, #12]	; (6fa8 <set_le_scan_enable+0x68>)
    6f9a:	f01b f902 	bl	221a2 <atomic_and>
    6f9e:	e7f4      	b.n	6f8a <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    6fa0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6fa4:	e7f1      	b.n	6f8a <set_le_scan_enable+0x4a>
    6fa6:	bf00      	nop
    6fa8:	20006bf8 	.word	0x20006bf8

00006fac <set_advertise_enable>:
{
    6fac:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    6fae:	2101      	movs	r1, #1
{
    6fb0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    6fb2:	f242 000a 	movw	r0, #8202	; 0x200a
    6fb6:	f7ff fe7d 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    6fba:	4604      	mov	r4, r0
    6fbc:	b1d8      	cbz	r0, 6ff6 <set_advertise_enable+0x4a>
	if (enable) {
    6fbe:	3008      	adds	r0, #8
    6fc0:	b18d      	cbz	r5, 6fe6 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    6fc2:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    6fc4:	f01d fe91 	bl	24cea <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    6fc8:	4621      	mov	r1, r4
    6fca:	2200      	movs	r2, #0
    6fcc:	f242 000a 	movw	r0, #8202	; 0x200a
    6fd0:	f7ff ff70 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    6fd4:	4604      	mov	r4, r0
    6fd6:	b920      	cbnz	r0, 6fe2 <set_advertise_enable+0x36>
	if (val) {
    6fd8:	b13d      	cbz	r5, 6fea <set_advertise_enable+0x3e>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6fda:	2140      	movs	r1, #64	; 0x40
    6fdc:	4807      	ldr	r0, [pc, #28]	; (6ffc <set_advertise_enable+0x50>)
    6fde:	f01b f8d1 	bl	22184 <atomic_or>
}
    6fe2:	4620      	mov	r0, r4
    6fe4:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    6fe6:	4629      	mov	r1, r5
    6fe8:	e7ec      	b.n	6fc4 <set_advertise_enable+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6fea:	f06f 0140 	mvn.w	r1, #64	; 0x40
    6fee:	4803      	ldr	r0, [pc, #12]	; (6ffc <set_advertise_enable+0x50>)
    6ff0:	f01b f8d7 	bl	221a2 <atomic_and>
    6ff4:	e7f5      	b.n	6fe2 <set_advertise_enable+0x36>
		return -ENOBUFS;
    6ff6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6ffa:	e7f2      	b.n	6fe2 <set_advertise_enable+0x36>
    6ffc:	20006bf8 	.word	0x20006bf8

00007000 <hci_disconn_complete>:
{
    7000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    7002:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    7004:	7835      	ldrb	r5, [r6, #0]
    7006:	2d00      	cmp	r5, #0
    7008:	d13f      	bne.n	708a <hci_disconn_complete+0x8a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    700a:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    700e:	4638      	mov	r0, r7
    7010:	f001 fdee 	bl	8bf0 <bt_conn_lookup_handle>
	if (!conn) {
    7014:	4604      	mov	r4, r0
    7016:	b9e8      	cbnz	r0, 7054 <hci_disconn_complete+0x54>
		BT_ERR("Unable to look up conn with handle %u", handle);
    7018:	2301      	movs	r3, #1
    701a:	f04f 0200 	mov.w	r2, #0
    701e:	f363 0207 	bfi	r2, r3, #0, #8
    7022:	491a      	ldr	r1, [pc, #104]	; (708c <hci_disconn_complete+0x8c>)
    7024:	4b1a      	ldr	r3, [pc, #104]	; (7090 <hci_disconn_complete+0x90>)
    7026:	481b      	ldr	r0, [pc, #108]	; (7094 <hci_disconn_complete+0x94>)
    7028:	1a5b      	subs	r3, r3, r1
    702a:	08db      	lsrs	r3, r3, #3
    702c:	f363 128f 	bfi	r2, r3, #6, #10
    7030:	4639      	mov	r1, r7
    7032:	f019 fdf4 	bl	20c1e <log_1>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    7036:	2109      	movs	r1, #9
    7038:	4817      	ldr	r0, [pc, #92]	; (7098 <hci_disconn_complete+0x98>)
    703a:	f01b f8ce 	bl	221da <atomic_test_bit>
    703e:	b320      	cbz	r0, 708a <hci_disconn_complete+0x8a>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    7040:	2106      	movs	r1, #6
    7042:	4815      	ldr	r0, [pc, #84]	; (7098 <hci_disconn_complete+0x98>)
    7044:	f01b f8c9 	bl	221da <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    7048:	b9f8      	cbnz	r0, 708a <hci_disconn_complete+0x8a>
		set_advertise_enable(true);
    704a:	2001      	movs	r0, #1
}
    704c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		set_advertise_enable(true);
    7050:	f7ff bfac 	b.w	6fac <set_advertise_enable>
	conn->err = evt->reason;
    7054:	78f3      	ldrb	r3, [r6, #3]
    7056:	7243      	strb	r3, [r0, #9]
	k_thread_foreach(hci_stack_dump, "HCI");
    7058:	4910      	ldr	r1, [pc, #64]	; (709c <hci_disconn_complete+0x9c>)
    705a:	4811      	ldr	r0, [pc, #68]	; (70a0 <hci_disconn_complete+0xa0>)
    705c:	f01e f968 	bl	25330 <k_thread_foreach>
	STACK_ANALYZE("tx stack", tx_thread_stack);
    7060:	f44f 7220 	mov.w	r2, #640	; 0x280
    7064:	490f      	ldr	r1, [pc, #60]	; (70a4 <hci_disconn_complete+0xa4>)
    7066:	4810      	ldr	r0, [pc, #64]	; (70a8 <hci_disconn_complete+0xa8>)
    7068:	f7ff fa84 	bl	6574 <stack_analyze>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    706c:	4620      	mov	r0, r4
    706e:	4629      	mov	r1, r5
    7070:	f001 fcfe 	bl	8a70 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    7074:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    7076:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    7078:	4620      	mov	r0, r4
	if (conn->type != BT_CONN_TYPE_LE) {
    707a:	b11b      	cbz	r3, 7084 <hci_disconn_complete+0x84>
}
    707c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    7080:	f01b b9a4 	b.w	223cc <bt_conn_unref>
	bt_conn_unref(conn);
    7084:	f01b f9a2 	bl	223cc <bt_conn_unref>
    7088:	e7d5      	b.n	7036 <hci_disconn_complete+0x36>
}
    708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    708c:	00025880 	.word	0x00025880
    7090:	000258f0 	.word	0x000258f0
    7094:	000272d7 	.word	0x000272d7
    7098:	20006bf8 	.word	0x20006bf8
    709c:	000272fd 	.word	0x000272fd
    70a0:	00022179 	.word	0x00022179
    70a4:	20002bd8 	.word	0x20002bd8
    70a8:	00027301 	.word	0x00027301

000070ac <enh_conn_complete>:
{
    70ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    70b0:	7803      	ldrb	r3, [r0, #0]
{
    70b2:	4605      	mov	r5, r0
	if (evt->status) {
    70b4:	b32b      	cbz	r3, 7102 <enh_conn_complete+0x56>
		conn = find_pending_connect(NULL);
    70b6:	2000      	movs	r0, #0
    70b8:	f01b f882 	bl	221c0 <find_pending_connect>
		if (!conn) {
    70bc:	4604      	mov	r4, r0
    70be:	2800      	cmp	r0, #0
    70c0:	d05a      	beq.n	7178 <enh_conn_complete+0xcc>
		conn->err = evt->status;
    70c2:	7829      	ldrb	r1, [r5, #0]
    70c4:	7241      	strb	r1, [r0, #9]
			if (conn->err == BT_HCI_ERR_ADV_TIMEOUT) {
    70c6:	293c      	cmp	r1, #60	; 0x3c
    70c8:	d10c      	bne.n	70e4 <enh_conn_complete+0x38>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    70ca:	f06f 0140 	mvn.w	r1, #64	; 0x40
    70ce:	4863      	ldr	r0, [pc, #396]	; (725c <enh_conn_complete+0x1b0>)
    70d0:	f01b f867 	bl	221a2 <atomic_and>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    70d4:	2100      	movs	r1, #0
    70d6:	4620      	mov	r0, r4
    70d8:	f001 fcca 	bl	8a70 <bt_conn_set_state>
	bt_conn_unref(conn);
    70dc:	4620      	mov	r0, r4
    70de:	f01b f975 	bl	223cc <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
    70e2:	e049      	b.n	7178 <enh_conn_complete+0xcc>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    70e4:	2302      	movs	r3, #2
    70e6:	f04f 0200 	mov.w	r2, #0
    70ea:	f363 0207 	bfi	r2, r3, #0, #8
    70ee:	485c      	ldr	r0, [pc, #368]	; (7260 <enh_conn_complete+0x1b4>)
    70f0:	4b5c      	ldr	r3, [pc, #368]	; (7264 <enh_conn_complete+0x1b8>)
    70f2:	1a1b      	subs	r3, r3, r0
    70f4:	08db      	lsrs	r3, r3, #3
    70f6:	f363 128f 	bfi	r2, r3, #6, #10
    70fa:	485b      	ldr	r0, [pc, #364]	; (7268 <enh_conn_complete+0x1bc>)
    70fc:	f019 fd8f 	bl	20c1e <log_1>
		bt_conn_unref(conn);
    7100:	e7ec      	b.n	70dc <enh_conn_complete+0x30>
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    7102:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    7104:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    7108:	4621      	mov	r1, r4
    710a:	a802      	add	r0, sp, #8
    710c:	f01b f831 	bl	22172 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7110:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7114:	3b02      	subs	r3, #2
    7116:	b2db      	uxtb	r3, r3
    7118:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    711a:	b2be      	uxth	r6, r7
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    711c:	d82f      	bhi.n	717e <enh_conn_complete+0xd2>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    711e:	2206      	movs	r2, #6
    7120:	f105 0111 	add.w	r1, r5, #17
    7124:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7128:	f88d 3008 	strb.w	r3, [sp, #8]
    712c:	f01a feab 	bl	21e86 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    7130:	2301      	movs	r3, #1
    7132:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(&id_addr);
    7136:	a802      	add	r0, sp, #8
    7138:	f01b f842 	bl	221c0 <find_pending_connect>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    713c:	78eb      	ldrb	r3, [r5, #3]
    713e:	2b01      	cmp	r3, #1
	conn = find_pending_connect(&id_addr);
    7140:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    7142:	d109      	bne.n	7158 <enh_conn_complete+0xac>
    7144:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7148:	4844      	ldr	r0, [pc, #272]	; (725c <enh_conn_complete+0x1b0>)
    714a:	f01b f82a 	bl	221a2 <atomic_and>
		if (!conn) {
    714e:	b9dc      	cbnz	r4, 7188 <enh_conn_complete+0xdc>
			conn = bt_conn_add_le(&id_addr);
    7150:	a802      	add	r0, sp, #8
    7152:	f001 fc5b 	bl	8a0c <bt_conn_add_le>
    7156:	4604      	mov	r4, r0
	if (!conn) {
    7158:	b9b4      	cbnz	r4, 7188 <enh_conn_complete+0xdc>
		BT_ERR("Unable to add new conn for handle %u", handle);
    715a:	2301      	movs	r3, #1
    715c:	f04f 0200 	mov.w	r2, #0
    7160:	f363 0207 	bfi	r2, r3, #0, #8
    7164:	493e      	ldr	r1, [pc, #248]	; (7260 <enh_conn_complete+0x1b4>)
    7166:	4b3f      	ldr	r3, [pc, #252]	; (7264 <enh_conn_complete+0x1b8>)
    7168:	4840      	ldr	r0, [pc, #256]	; (726c <enh_conn_complete+0x1c0>)
    716a:	1a5b      	subs	r3, r3, r1
    716c:	08db      	lsrs	r3, r3, #3
    716e:	f363 128f 	bfi	r2, r3, #6, #10
    7172:	4631      	mov	r1, r6
    7174:	f019 fd53 	bl	20c1e <log_1>
}
    7178:	b004      	add	sp, #16
    717a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    717e:	4621      	mov	r1, r4
    7180:	4668      	mov	r0, sp
    7182:	f01a fff6 	bl	22172 <bt_addr_le_copy>
    7186:	e7d6      	b.n	7136 <enh_conn_complete+0x8a>
	conn->handle = handle;
    7188:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    718a:	a902      	add	r1, sp, #8
	conn->handle = handle;
    718c:	f820 7b48 	strh.w	r7, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    7190:	f01a ffef 	bl	22172 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    7194:	7e2a      	ldrb	r2, [r5, #24]
    7196:	7deb      	ldrb	r3, [r5, #23]
    7198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    719c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    71a0:	7eaa      	ldrb	r2, [r5, #26]
    71a2:	7e6b      	ldrb	r3, [r5, #25]
    71a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    71a8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    71ac:	7eeb      	ldrb	r3, [r5, #27]
    71ae:	7f2a      	ldrb	r2, [r5, #28]
    71b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    71b4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    71b8:	78ef      	ldrb	r7, [r5, #3]
    71ba:	70e7      	strb	r7, [r4, #3]
	conn->err = 0U;
    71bc:	f04f 0800 	mov.w	r8, #0
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    71c0:	2f01      	cmp	r7, #1
	conn->err = 0U;
    71c2:	f884 8009 	strb.w	r8, [r4, #9]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    71c6:	d11f      	bne.n	7208 <enh_conn_complete+0x15c>
		conn->id = bt_dev.adv_id;
    71c8:	4e29      	ldr	r6, [pc, #164]	; (7270 <enh_conn_complete+0x1c4>)
    71ca:	7a33      	ldrb	r3, [r6, #8]
    71cc:	7223      	strb	r3, [r4, #8]
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    71ce:	4669      	mov	r1, sp
    71d0:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    71d4:	f01a ffcd 	bl	22172 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    71d8:	7a21      	ldrb	r1, [r4, #8]
    71da:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    71de:	4431      	add	r1, r6
    71e0:	f104 0056 	add.w	r0, r4, #86	; 0x56
    71e4:	f01a ffc5 	bl	22172 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    71e8:	2109      	movs	r1, #9
    71ea:	f106 0070 	add.w	r0, r6, #112	; 0x70
    71ee:	f01a fff4 	bl	221da <atomic_test_bit>
    71f2:	b148      	cbz	r0, 7208 <enh_conn_complete+0x15c>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    71f4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
    71f8:	4642      	mov	r2, r8
    71fa:	f001 0340 	and.w	r3, r1, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    71fe:	4313      	orrs	r3, r2
    7200:	d002      	beq.n	7208 <enh_conn_complete+0x15c>
			set_advertise_enable(true);
    7202:	4638      	mov	r0, r7
    7204:	f7ff fed2 	bl	6fac <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    7208:	2104      	movs	r1, #4
    720a:	4620      	mov	r0, r4
    720c:	f001 fc30 	bl	8a70 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    7210:	7aa3      	ldrb	r3, [r4, #10]
    7212:	2b04      	cmp	r3, #4
    7214:	f47f af62 	bne.w	70dc <enh_conn_complete+0x30>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    7218:	78eb      	ldrb	r3, [r5, #3]
    721a:	b123      	cbz	r3, 7226 <enh_conn_complete+0x17a>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    721c:	4b14      	ldr	r3, [pc, #80]	; (7270 <enh_conn_complete+0x1c4>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    721e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7222:	071b      	lsls	r3, r3, #28
    7224:	d512      	bpl.n	724c <enh_conn_complete+0x1a0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    7226:	2102      	movs	r1, #2
    7228:	f242 0016 	movw	r0, #8214	; 0x2016
    722c:	f7ff fd42 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    7230:	4605      	mov	r5, r0
    7232:	b158      	cbz	r0, 724c <enh_conn_complete+0x1a0>
	cp = net_buf_add(buf, sizeof(*cp));
    7234:	2102      	movs	r1, #2
    7236:	3008      	adds	r0, #8
    7238:	f01d fd48 	bl	24ccc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    723c:	8823      	ldrh	r3, [r4, #0]
    723e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    7240:	4629      	mov	r1, r5
    7242:	f242 0016 	movw	r0, #8214	; 0x2016
    7246:	f7ff fd65 	bl	6d14 <bt_hci_cmd_send>
		if (!err) {
    724a:	e747      	b.n	70dc <enh_conn_complete+0x30>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    724c:	78e3      	ldrb	r3, [r4, #3]
    724e:	2b01      	cmp	r3, #1
    7250:	f47f af44 	bne.w	70dc <enh_conn_complete+0x30>
		slave_update_conn_param(conn);
    7254:	4620      	mov	r0, r4
    7256:	f7ff fce7 	bl	6c28 <slave_update_conn_param>
    725a:	e73f      	b.n	70dc <enh_conn_complete+0x30>
    725c:	20006bf8 	.word	0x20006bf8
    7260:	00025880 	.word	0x00025880
    7264:	000258f0 	.word	0x000258f0
    7268:	000271ed 	.word	0x000271ed
    726c:	00027206 	.word	0x00027206
    7270:	20006b88 	.word	0x20006b88

00007274 <set_random_address>:
{
    7274:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    7276:	4d15      	ldr	r5, [pc, #84]	; (72cc <set_random_address+0x58>)
    7278:	2206      	movs	r2, #6
    727a:	f105 010a 	add.w	r1, r5, #10
    727e:	4606      	mov	r6, r0
    7280:	f01a fdda 	bl	21e38 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    7284:	4604      	mov	r4, r0
    7286:	b1d8      	cbz	r0, 72c0 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    7288:	2106      	movs	r1, #6
    728a:	f242 0005 	movw	r0, #8197	; 0x2005
    728e:	f7ff fd11 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    7292:	4604      	mov	r4, r0
    7294:	b1b0      	cbz	r0, 72c4 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    7296:	2206      	movs	r2, #6
    7298:	4631      	mov	r1, r6
    729a:	3008      	adds	r0, #8
    729c:	f01d fd1c 	bl	24cd8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    72a0:	4621      	mov	r1, r4
    72a2:	2200      	movs	r2, #0
    72a4:	f242 0005 	movw	r0, #8197	; 0x2005
    72a8:	f7ff fe04 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    72ac:	4604      	mov	r4, r0
    72ae:	b938      	cbnz	r0, 72c0 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    72b0:	2206      	movs	r2, #6
    72b2:	4631      	mov	r1, r6
    72b4:	f105 000a 	add.w	r0, r5, #10
    72b8:	f01a fde5 	bl	21e86 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    72bc:	2301      	movs	r3, #1
    72be:	726b      	strb	r3, [r5, #9]
}
    72c0:	4620      	mov	r0, r4
    72c2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    72c4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    72c8:	e7fa      	b.n	72c0 <set_random_address+0x4c>
    72ca:	bf00      	nop
    72cc:	20006b88 	.word	0x20006b88

000072d0 <set_ad>:
{
    72d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72d4:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    72d6:	2120      	movs	r1, #32
{
    72d8:	4682      	mov	sl, r0
    72da:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    72dc:	f7ff fcea 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    72e0:	4607      	mov	r7, r0
    72e2:	2800      	cmp	r0, #0
    72e4:	d05a      	beq.n	739c <set_ad+0xcc>
	set_data = net_buf_add(buf, sizeof(*set_data));
    72e6:	2120      	movs	r1, #32
    72e8:	3008      	adds	r0, #8
    72ea:	f01d fcef 	bl	24ccc <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    72ee:	2220      	movs	r2, #32
    72f0:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    72f2:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    72f4:	f01a fdf1 	bl	21eda <memset>
	for (c = 0; c < ad_len; c++) {
    72f8:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    72fc:	454c      	cmp	r4, r9
    72fe:	d106      	bne.n	730e <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7300:	4639      	mov	r1, r7
    7302:	4650      	mov	r0, sl
    7304:	2200      	movs	r2, #0
}
    7306:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    730a:	f7ff bdd3 	b.w	6eb4 <bt_hci_cmd_send_sync>
		for (i = 0; i < ad[c].len; i++) {
    730e:	6826      	ldr	r6, [r4, #0]
    7310:	f04f 0b00 	mov.w	fp, #0
    7314:	6863      	ldr	r3, [r4, #4]
    7316:	459b      	cmp	fp, r3
    7318:	d301      	bcc.n	731e <set_ad+0x4e>
    731a:	3408      	adds	r4, #8
    731c:	e7ee      	b.n	72fc <set_ad+0x2c>
			if (set_data->len + len + 2 > 31) {
    731e:	782b      	ldrb	r3, [r5, #0]
			int len = data[i].data_len;
    7320:	7872      	ldrb	r2, [r6, #1]
			u8_t type = data[i].type;
    7322:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
    7324:	1c98      	adds	r0, r3, #2
    7326:	eb00 0c02 	add.w	ip, r0, r2
    732a:	f1bc 0f1f 	cmp.w	ip, #31
    732e:	dd1a      	ble.n	7366 <set_ad+0x96>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7330:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
    7332:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7336:	d100      	bne.n	733a <set_ad+0x6a>
    7338:	b9a2      	cbnz	r2, 7364 <set_ad+0x94>
					net_buf_unref(buf);
    733a:	4638      	mov	r0, r7
    733c:	f016 fa14 	bl	1d768 <net_buf_unref>
					BT_ERR("Too big advertising data");
    7340:	2301      	movs	r3, #1
    7342:	f04f 0100 	mov.w	r1, #0
    7346:	f363 0107 	bfi	r1, r3, #0, #8
    734a:	4a16      	ldr	r2, [pc, #88]	; (73a4 <set_ad+0xd4>)
    734c:	4b16      	ldr	r3, [pc, #88]	; (73a8 <set_ad+0xd8>)
    734e:	4817      	ldr	r0, [pc, #92]	; (73ac <set_ad+0xdc>)
    7350:	1a9b      	subs	r3, r3, r2
    7352:	08db      	lsrs	r3, r3, #3
    7354:	f363 118f 	bfi	r1, r3, #6, #10
    7358:	f019 fc54 	bl	20c04 <log_0>
					return -EINVAL;
    735c:	f06f 0015 	mvn.w	r0, #21
}
    7360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    7364:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
    7366:	eb05 0c03 	add.w	ip, r5, r3
    736a:	3301      	adds	r3, #1
    736c:	fa4f f882 	sxtb.w	r8, r2
			set_data->data[set_data->len++] = type;
    7370:	fa55 f383 	uxtab	r3, r5, r3
			set_data->data[set_data->len++] = len + 1;
    7374:	f108 0e01 	add.w	lr, r8, #1
			set_data->data[set_data->len++] = type;
    7378:	b2c0      	uxtb	r0, r0
			set_data->data[set_data->len++] = len + 1;
    737a:	f88c e001 	strb.w	lr, [ip, #1]
			set_data->data[set_data->len++] = type;
    737e:	7028      	strb	r0, [r5, #0]
    7380:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
    7382:	3001      	adds	r0, #1
    7384:	6871      	ldr	r1, [r6, #4]
    7386:	4428      	add	r0, r5
    7388:	f01a fd7d 	bl	21e86 <memcpy>
			set_data->len += len;
    738c:	782b      	ldrb	r3, [r5, #0]
    738e:	4498      	add	r8, r3
    7390:	f885 8000 	strb.w	r8, [r5]
		for (i = 0; i < ad[c].len; i++) {
    7394:	f10b 0b01 	add.w	fp, fp, #1
    7398:	3608      	adds	r6, #8
    739a:	e7bb      	b.n	7314 <set_ad+0x44>
		return -ENOBUFS;
    739c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    73a0:	e7de      	b.n	7360 <set_ad+0x90>
    73a2:	bf00      	nop
    73a4:	00025880 	.word	0x00025880
    73a8:	000258f0 	.word	0x000258f0
    73ac:	00027428 	.word	0x00027428

000073b0 <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    73b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73b4:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    73b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    73ba:	4615      	mov	r5, r2
    73bc:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    73be:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    73c0:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    73c2:	a902      	add	r1, sp, #8
    73c4:	f242 0008 	movw	r0, #8200	; 0x2008
{
    73c8:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    73cc:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    73d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    73d4:	f7ff ff7c 	bl	72d0 <set_ad>
	if (err) {
    73d8:	4604      	mov	r4, r0
    73da:	bb10      	cbnz	r0, 7422 <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    73dc:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    73e0:	f1b8 0f00 	cmp.w	r8, #0
    73e4:	d011      	beq.n	740a <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    73e6:	b115      	cbz	r5, 73ee <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    73e8:	4602      	mov	r2, r0
    73ea:	42b2      	cmp	r2, r6
    73ec:	d11d      	bne.n	742a <le_adv_update+0x7a>
			}
		}

		name = bt_get_name();

		d[1].data = (&(struct bt_data)BT_DATA(
    73ee:	4d14      	ldr	r5, [pc, #80]	; (7440 <le_adv_update+0x90>)
    73f0:	2309      	movs	r3, #9
    73f2:	4628      	mov	r0, r5
    73f4:	f88d 3000 	strb.w	r3, [sp]
    73f8:	f01a fd0b 	bl	21e12 <strlen>
					BT_DATA_NAME_COMPLETE,
					name, strlen(name)));
		d[1].len = 1;
    73fc:	2301      	movs	r3, #1
		d[1].data = (&(struct bt_data)BT_DATA(
    73fe:	f88d 0001 	strb.w	r0, [sp, #1]
    7402:	9501      	str	r5, [sp, #4]
    7404:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    7408:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    740a:	9b02      	ldr	r3, [sp, #8]
    740c:	b913      	cbnz	r3, 7414 <le_adv_update+0x64>
    740e:	9b04      	ldr	r3, [sp, #16]
    7410:	b903      	cbnz	r3, 7414 <le_adv_update+0x64>
    7412:	b137      	cbz	r7, 7422 <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    7414:	2202      	movs	r2, #2
    7416:	a902      	add	r1, sp, #8
    7418:	f242 0009 	movw	r0, #8201	; 0x2009
    741c:	f7ff ff58 	bl	72d0 <set_ad>
    7420:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    7422:	4620      	mov	r0, r4
    7424:	b006      	add	sp, #24
    7426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    742a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    742e:	3908      	subs	r1, #8
    7430:	2901      	cmp	r1, #1
    7432:	d901      	bls.n	7438 <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    7434:	3201      	adds	r2, #1
    7436:	e7d8      	b.n	73ea <le_adv_update+0x3a>
				return -EINVAL;
    7438:	f06f 0415 	mvn.w	r4, #21
    743c:	e7f1      	b.n	7422 <le_adv_update+0x72>
    743e:	bf00      	nop
    7440:	000273e3 	.word	0x000273e3

00007444 <bt_le_scan_update>:
{
    7444:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7446:	210b      	movs	r1, #11
    7448:	4808      	ldr	r0, [pc, #32]	; (746c <bt_le_scan_update+0x28>)
    744a:	f01a fec6 	bl	221da <atomic_test_bit>
    744e:	4603      	mov	r3, r0
    7450:	b948      	cbnz	r0, 7466 <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    7452:	210a      	movs	r1, #10
    7454:	4805      	ldr	r0, [pc, #20]	; (746c <bt_le_scan_update+0x28>)
    7456:	f01a fec0 	bl	221da <atomic_test_bit>
    745a:	b120      	cbz	r0, 7466 <bt_le_scan_update+0x22>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    745c:	4618      	mov	r0, r3
}
    745e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    7462:	f7ff bd6d 	b.w	6f40 <set_le_scan_enable>
}
    7466:	2000      	movs	r0, #0
    7468:	bd08      	pop	{r3, pc}
    746a:	bf00      	nop
    746c:	20006bf8 	.word	0x20006bf8

00007470 <bt_init>:
{
    7470:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    7472:	4d5f      	ldr	r5, [pc, #380]	; (75f0 <bt_init+0x180>)
    7474:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    7478:	6899      	ldr	r1, [r3, #8]
    747a:	f011 0101 	ands.w	r1, r1, #1
{
    747e:	b08b      	sub	sp, #44	; 0x2c
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    7480:	d124      	bne.n	74cc <bt_init+0x5c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    7482:	aa05      	add	r2, sp, #20
    7484:	f640 4003 	movw	r0, #3075	; 0xc03
    7488:	f7ff fd14 	bl	6eb4 <bt_hci_cmd_send_sync>
		if (err) {
    748c:	4604      	mov	r4, r0
    748e:	2800      	cmp	r0, #0
    7490:	f040 80ab 	bne.w	75ea <bt_init+0x17a>
		hci_reset_complete(rsp);
    7494:	9b05      	ldr	r3, [sp, #20]
	u8_t status = buf->data[0];
    7496:	689b      	ldr	r3, [r3, #8]
	if (status) {
    7498:	781b      	ldrb	r3, [r3, #0]
    749a:	b9a3      	cbnz	r3, 74c6 <bt_init+0x56>
	scan_dev_found_cb = NULL;
    749c:	4a55      	ldr	r2, [pc, #340]	; (75f4 <bt_init+0x184>)
    749e:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    74a0:	462b      	mov	r3, r5
    74a2:	f3bf 8f5b 	dmb	ish
    74a6:	f853 2f70 	ldr.w	r2, [r3, #112]!
    74aa:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    74ae:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    74b2:	f3bf 8f5b 	dmb	ish
    74b6:	e853 1f00 	ldrex	r1, [r3]
    74ba:	e843 2000 	strex	r0, r2, [r3]
    74be:	2800      	cmp	r0, #0
    74c0:	d1f9      	bne.n	74b6 <bt_init+0x46>
    74c2:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    74c6:	9805      	ldr	r0, [sp, #20]
    74c8:	f016 f94e 	bl	1d768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    74cc:	aa05      	add	r2, sp, #20
    74ce:	2100      	movs	r1, #0
    74d0:	f241 0003 	movw	r0, #4099	; 0x1003
    74d4:	f7ff fcee 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    74d8:	4604      	mov	r4, r0
    74da:	2800      	cmp	r0, #0
    74dc:	f040 8085 	bne.w	75ea <bt_init+0x17a>
	read_local_features_complete(rsp);
    74e0:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    74e2:	4845      	ldr	r0, [pc, #276]	; (75f8 <bt_init+0x188>)
    74e4:	6899      	ldr	r1, [r3, #8]
    74e6:	2208      	movs	r2, #8
    74e8:	3101      	adds	r1, #1
    74ea:	f01a fccc 	bl	21e86 <memcpy>
	net_buf_unref(rsp);
    74ee:	9805      	ldr	r0, [sp, #20]
    74f0:	f016 f93a 	bl	1d768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    74f4:	4621      	mov	r1, r4
    74f6:	aa05      	add	r2, sp, #20
    74f8:	f241 0001 	movw	r0, #4097	; 0x1001
    74fc:	f7ff fcda 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    7500:	4604      	mov	r4, r0
    7502:	2800      	cmp	r0, #0
    7504:	d171      	bne.n	75ea <bt_init+0x17a>
	read_local_ver_complete(rsp);
    7506:	9805      	ldr	r0, [sp, #20]
    7508:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    750a:	785a      	ldrb	r2, [r3, #1]
    750c:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    750e:	78d9      	ldrb	r1, [r3, #3]
    7510:	789a      	ldrb	r2, [r3, #2]
    7512:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7516:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    7518:	791a      	ldrb	r2, [r3, #4]
    751a:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    751c:	7a19      	ldrb	r1, [r3, #8]
    751e:	79da      	ldrb	r2, [r3, #7]
    7520:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7524:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    7526:	795a      	ldrb	r2, [r3, #5]
    7528:	799b      	ldrb	r3, [r3, #6]
    752a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    752e:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    7530:	f016 f91a 	bl	1d768 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    7534:	2103      	movs	r1, #3
    7536:	4831      	ldr	r0, [pc, #196]	; (75fc <bt_init+0x18c>)
    7538:	f01a fe4f 	bl	221da <atomic_test_bit>
    753c:	4601      	mov	r1, r0
    753e:	bb48      	cbnz	r0, 7594 <bt_init+0x124>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    7540:	aa05      	add	r2, sp, #20
    7542:	f241 0009 	movw	r0, #4105	; 0x1009
    7546:	f7ff fcb5 	bl	6eb4 <bt_hci_cmd_send_sync>
		if (err) {
    754a:	4604      	mov	r4, r0
    754c:	2800      	cmp	r0, #0
    754e:	d14c      	bne.n	75ea <bt_init+0x17a>
		read_bdaddr_complete(rsp);
    7550:	9b05      	ldr	r3, [sp, #20]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7552:	9001      	str	r0, [sp, #4]
    7554:	689e      	ldr	r6, [r3, #8]
    7556:	f8ad 0008 	strh.w	r0, [sp, #8]
    755a:	3601      	adds	r6, #1
	return memcmp(a, b, sizeof(*a));
    755c:	2206      	movs	r2, #6
    755e:	a901      	add	r1, sp, #4
    7560:	4630      	mov	r0, r6
    7562:	f01a fc69 	bl	21e38 <memcmp>
    7566:	b190      	cbz	r0, 758e <bt_init+0x11e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    7568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    756c:	2206      	movs	r2, #6
    756e:	a903      	add	r1, sp, #12
    7570:	4630      	mov	r0, r6
    7572:	9303      	str	r3, [sp, #12]
    7574:	f8ad 3010 	strh.w	r3, [sp, #16]
    7578:	f01a fc5e 	bl	21e38 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    757c:	b138      	cbz	r0, 758e <bt_init+0x11e>
	memcpy(dst, src, sizeof(*dst));
    757e:	2206      	movs	r2, #6
    7580:	4631      	mov	r1, r6
    7582:	481f      	ldr	r0, [pc, #124]	; (7600 <bt_init+0x190>)
    7584:	f01a fc7f 	bl	21e86 <memcpy>
	bt_dev.id_count = 1U;
    7588:	2301      	movs	r3, #1
	bt_dev.id_addr[0].type = BT_ADDR_LE_PUBLIC;
    758a:	702c      	strb	r4, [r5, #0]
	bt_dev.id_count = 1U;
    758c:	71eb      	strb	r3, [r5, #7]
		net_buf_unref(rsp);
    758e:	9805      	ldr	r0, [sp, #20]
    7590:	f016 f8ea 	bl	1d768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    7594:	aa05      	add	r2, sp, #20
    7596:	2100      	movs	r1, #0
    7598:	f241 0002 	movw	r0, #4098	; 0x1002
    759c:	f7ff fc8a 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    75a0:	4604      	mov	r4, r0
    75a2:	bb10      	cbnz	r0, 75ea <bt_init+0x17a>
	read_supported_commands_complete(rsp);
    75a4:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.supported_commands, rp->commands,
    75a6:	4817      	ldr	r0, [pc, #92]	; (7604 <bt_init+0x194>)
    75a8:	6899      	ldr	r1, [r3, #8]
    75aa:	2240      	movs	r2, #64	; 0x40
    75ac:	3101      	adds	r1, #1
    75ae:	f01a fc6a 	bl	21e86 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    75b2:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
    75b6:	9805      	ldr	r0, [sp, #20]
		bt_dev.supported_commands[34] |= 0x04;
    75b8:	f043 0306 	orr.w	r3, r3, #6
    75bc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
    75c0:	f016 f8d2 	bl	1d768 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    75c4:	7f2b      	ldrb	r3, [r5, #28]
    75c6:	0659      	lsls	r1, r3, #25
    75c8:	d424      	bmi.n	7614 <bt_init+0x1a4>
		BT_ERR("Non-LE capable controller detected!");
    75ca:	2301      	movs	r3, #1
    75cc:	f04f 0100 	mov.w	r1, #0
    75d0:	f363 0107 	bfi	r1, r3, #0, #8
    75d4:	4a0c      	ldr	r2, [pc, #48]	; (7608 <bt_init+0x198>)
    75d6:	4b0d      	ldr	r3, [pc, #52]	; (760c <bt_init+0x19c>)
    75d8:	480d      	ldr	r0, [pc, #52]	; (7610 <bt_init+0x1a0>)
    75da:	1a9b      	subs	r3, r3, r2
    75dc:	08db      	lsrs	r3, r3, #3
    75de:	f363 118f 	bfi	r1, r3, #6, #10
    75e2:	f019 fb0f 	bl	20c04 <log_0>
		return -ENODEV;
    75e6:	f06f 0412 	mvn.w	r4, #18
}
    75ea:	4620      	mov	r0, r4
    75ec:	b00b      	add	sp, #44	; 0x2c
    75ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75f0:	20006b88 	.word	0x20006b88
    75f4:	2000086c 	.word	0x2000086c
    75f8:	20006ba0 	.word	0x20006ba0
    75fc:	20006bf8 	.word	0x20006bf8
    7600:	20006b89 	.word	0x20006b89
    7604:	20006ba8 	.word	0x20006ba8
    7608:	00025880 	.word	0x00025880
    760c:	000258f0 	.word	0x000258f0
    7610:	00026eef 	.word	0x00026eef
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    7614:	4621      	mov	r1, r4
    7616:	aa05      	add	r2, sp, #20
    7618:	f242 0003 	movw	r0, #8195	; 0x2003
    761c:	f7ff fc4a 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    7620:	4604      	mov	r4, r0
    7622:	2800      	cmp	r0, #0
    7624:	d1e1      	bne.n	75ea <bt_init+0x17a>
	read_le_features_complete(rsp);
    7626:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    7628:	48c0      	ldr	r0, [pc, #768]	; (792c <bt_init+0x4bc>)
    762a:	6899      	ldr	r1, [r3, #8]
    762c:	2208      	movs	r2, #8
    762e:	3101      	adds	r1, #1
    7630:	f01a fc29 	bl	21e86 <memcpy>
	net_buf_unref(rsp);
    7634:	9805      	ldr	r0, [sp, #20]
    7636:	f016 f897 	bl	1d768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    763a:	4621      	mov	r1, r4
    763c:	aa05      	add	r2, sp, #20
    763e:	f242 0002 	movw	r0, #8194	; 0x2002
    7642:	f7ff fc37 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    7646:	4604      	mov	r4, r0
    7648:	2800      	cmp	r0, #0
    764a:	d1ce      	bne.n	75ea <bt_init+0x17a>
	le_read_buffer_size_complete(rsp);
    764c:	9b05      	ldr	r3, [sp, #20]
    764e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    7650:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    7654:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
    7658:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
    765a:	b139      	cbz	r1, 766c <bt_init+0x1fc>
	le_max_num = MIN(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    765c:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    765e:	48b4      	ldr	r0, [pc, #720]	; (7930 <bt_init+0x4c0>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    7660:	2a03      	cmp	r2, #3
    7662:	bf28      	it	cs
    7664:	2203      	movcs	r2, #3
    7666:	4611      	mov	r1, r2
    7668:	f01d fe50 	bl	2530c <z_impl_k_sem_init>
	net_buf_unref(rsp);
    766c:	9805      	ldr	r0, [sp, #20]
    766e:	f016 f87b 	bl	1d768 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    7672:	7f2c      	ldrb	r4, [r5, #28]
    7674:	f014 0420 	ands.w	r4, r4, #32
    7678:	f000 80a7 	beq.w	77ca <bt_init+0x35a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    767c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    7680:	071a      	lsls	r2, r3, #28
    7682:	f100 80be 	bmi.w	7802 <bt_init+0x392>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    7686:	2108      	movs	r1, #8
    7688:	f242 0001 	movw	r0, #8193	; 0x2001
    768c:	f7ff fb12 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    7690:	4604      	mov	r4, r0
    7692:	2800      	cmp	r0, #0
    7694:	f000 80a0 	beq.w	77d8 <bt_init+0x368>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    7698:	2108      	movs	r1, #8
    769a:	4408      	add	r0, r1
    769c:	f01d fb16 	bl	24ccc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    76a0:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    76a4:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    76a8:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    76ac:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    76b0:	bf0c      	ite	eq
    76b2:	230f      	moveq	r3, #15
    76b4:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    76b6:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    76b8:	bf08      	it	eq
    76ba:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    76be:	2200      	movs	r2, #0
    76c0:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    76c2:	0a1b      	lsrs	r3, r3, #8
    76c4:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    76c6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    76c8:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    76ca:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    76cc:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    76ce:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    76d0:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    76d2:	4621      	mov	r1, r4
    76d4:	f242 0001 	movw	r0, #8193	; 0x2001
    76d8:	f7ff fbec 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    76dc:	4604      	mov	r4, r0
    76de:	2800      	cmp	r0, #0
    76e0:	d183      	bne.n	75ea <bt_init+0x17a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    76e2:	7f2b      	ldrb	r3, [r5, #28]
    76e4:	069b      	lsls	r3, r3, #26
    76e6:	d421      	bmi.n	772c <bt_init+0x2bc>
	if (bt_dev.le.mtu) {
    76e8:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    76ec:	b9f1      	cbnz	r1, 772c <bt_init+0x2bc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    76ee:	aa05      	add	r2, sp, #20
    76f0:	f241 0005 	movw	r0, #4101	; 0x1005
    76f4:	f7ff fbde 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    76f8:	4604      	mov	r4, r0
    76fa:	2800      	cmp	r0, #0
    76fc:	f47f af75 	bne.w	75ea <bt_init+0x17a>
	if (bt_dev.le.mtu) {
    7700:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    7704:	b97b      	cbnz	r3, 7726 <bt_init+0x2b6>
	read_buffer_size_complete(rsp);
    7706:	9b05      	ldr	r3, [sp, #20]
    7708:	4889      	ldr	r0, [pc, #548]	; (7930 <bt_init+0x4c0>)
    770a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    770c:	7899      	ldrb	r1, [r3, #2]
    770e:	785a      	ldrb	r2, [r3, #1]
    7710:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7714:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    7718:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    771a:	2a03      	cmp	r2, #3
    771c:	bf28      	it	cs
    771e:	2203      	movcs	r2, #3
    7720:	4611      	mov	r1, r2
    7722:	f01d fdf3 	bl	2530c <z_impl_k_sem_init>
	net_buf_unref(rsp);
    7726:	9805      	ldr	r0, [sp, #20]
    7728:	f016 f81e 	bl	1d768 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    772c:	2108      	movs	r1, #8
    772e:	f640 4001 	movw	r0, #3073	; 0xc01
    7732:	f7ff fabf 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    7736:	4604      	mov	r4, r0
    7738:	2800      	cmp	r0, #0
    773a:	d04d      	beq.n	77d8 <bt_init+0x368>
	ev = net_buf_add(buf, sizeof(*ev));
    773c:	2108      	movs	r1, #8
    773e:	4408      	add	r0, r1
    7740:	f01d fac4 	bl	24ccc <net_buf_simple_add>
	dst[0] = val;
    7744:	2310      	movs	r3, #16
    7746:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    7748:	2388      	movs	r3, #136	; 0x88
    774a:	7043      	strb	r3, [r0, #1]
    774c:	2302      	movs	r3, #2
	dst[0] = val;
    774e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    7750:	70c3      	strb	r3, [r0, #3]
    7752:	2320      	movs	r3, #32
	dst[0] = val;
    7754:	7082      	strb	r2, [r0, #2]
    7756:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    7758:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    775a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    775c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    775e:	4621      	mov	r1, r4
    7760:	f640 4001 	movw	r0, #3073	; 0xc01
    7764:	f7ff fba6 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    7768:	4604      	mov	r4, r0
    776a:	2800      	cmp	r0, #0
    776c:	f47f af3d 	bne.w	75ea <bt_init+0x17a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    7770:	4601      	mov	r1, r0
    7772:	466a      	mov	r2, sp
    7774:	f64f 4001 	movw	r0, #64513	; 0xfc01
    7778:	f7ff fb9c 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    777c:	4e6d      	ldr	r6, [pc, #436]	; (7934 <bt_init+0x4c4>)
    777e:	4b6e      	ldr	r3, [pc, #440]	; (7938 <bt_init+0x4c8>)
    7780:	1af6      	subs	r6, r6, r3
    7782:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    7786:	2800      	cmp	r0, #0
    7788:	d04f      	beq.n	782a <bt_init+0x3ba>
		BT_WARN("Vendor HCI extensions not available");
    778a:	f04f 0100 	mov.w	r1, #0
    778e:	2302      	movs	r3, #2
    7790:	f363 0107 	bfi	r1, r3, #0, #8
    7794:	4869      	ldr	r0, [pc, #420]	; (793c <bt_init+0x4cc>)
    7796:	f366 118f 	bfi	r1, r6, #6, #10
		BT_WARN("Failed to read supported vendor commands");
    779a:	f019 fa33 	bl	20c04 <log_0>
		err = bt_conn_init();
    779e:	f001 fba3 	bl	8ee8 <bt_conn_init>
		if (err) {
    77a2:	4604      	mov	r4, r0
    77a4:	2800      	cmp	r0, #0
    77a6:	f47f af20 	bne.w	75ea <bt_init+0x17a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    77aa:	2102      	movs	r1, #2
    77ac:	4864      	ldr	r0, [pc, #400]	; (7940 <bt_init+0x4d0>)
    77ae:	f01a fce9 	bl	22184 <atomic_or>
		bt_le_scan_update(false);
    77b2:	4620      	mov	r0, r4
    77b4:	f7ff fe46 	bl	7444 <bt_le_scan_update>
	if (bt_dev.id_count > 0) {
    77b8:	79eb      	ldrb	r3, [r5, #7]
    77ba:	2b00      	cmp	r3, #0
    77bc:	f000 80d8 	beq.w	7970 <bt_init+0x500>
    77c0:	2104      	movs	r1, #4
    77c2:	485f      	ldr	r0, [pc, #380]	; (7940 <bt_init+0x4d0>)
    77c4:	f01a fcde 	bl	22184 <atomic_or>
    77c8:	e70f      	b.n	75ea <bt_init+0x17a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    77ca:	2102      	movs	r1, #2
    77cc:	f640 406d 	movw	r0, #3181	; 0xc6d
    77d0:	f7ff fa70 	bl	6cb4 <bt_hci_cmd_create>
		if (!buf) {
    77d4:	4606      	mov	r6, r0
    77d6:	b910      	cbnz	r0, 77de <bt_init+0x36e>
		return -ENOBUFS;
    77d8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    77dc:	e705      	b.n	75ea <bt_init+0x17a>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    77de:	2102      	movs	r1, #2
    77e0:	3008      	adds	r0, #8
    77e2:	f01d fa73 	bl	24ccc <net_buf_simple_add>
		cp_le->le = 0x01;
    77e6:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    77e8:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    77ea:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    77ec:	4622      	mov	r2, r4
    77ee:	4631      	mov	r1, r6
    77f0:	f640 406d 	movw	r0, #3181	; 0xc6d
    77f4:	f7ff fb5e 	bl	6eb4 <bt_hci_cmd_send_sync>
		if (err) {
    77f8:	4604      	mov	r4, r0
    77fa:	2800      	cmp	r0, #0
    77fc:	f43f af3e 	beq.w	767c <bt_init+0x20c>
    7800:	e6f3      	b.n	75ea <bt_init+0x17a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    7802:	aa05      	add	r2, sp, #20
    7804:	2100      	movs	r1, #0
    7806:	f242 001c 	movw	r0, #8220	; 0x201c
    780a:	f7ff fb53 	bl	6eb4 <bt_hci_cmd_send_sync>
		if (err) {
    780e:	4604      	mov	r4, r0
    7810:	2800      	cmp	r0, #0
    7812:	f47f aeea 	bne.w	75ea <bt_init+0x17a>
		le_read_supp_states_complete(rsp);
    7816:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    7818:	6883      	ldr	r3, [r0, #8]
    781a:	f853 2f01 	ldr.w	r2, [r3, #1]!
    781e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    7820:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    7824:	f015 ffa0 	bl	1d768 <net_buf_unref>
    7828:	e72d      	b.n	7686 <bt_init+0x216>
	rp.info = (void *)rsp->data;
    782a:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
    782c:	4845      	ldr	r0, [pc, #276]	; (7944 <bt_init+0x4d4>)
	rp.info = (void *)rsp->data;
    782e:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    7830:	2203      	movs	r2, #3
    7832:	f04f 0300 	mov.w	r3, #0
    7836:	f362 0307 	bfi	r3, r2, #0, #8
    783a:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    783e:	2a03      	cmp	r2, #3
		return plat_str[platform];
    7840:	bf96      	itet	ls
    7842:	4941      	ldrls	r1, [pc, #260]	; (7948 <bt_init+0x4d8>)
	return "unknown";
    7844:	4941      	ldrhi	r1, [pc, #260]	; (794c <bt_init+0x4dc>)
		return plat_str[platform];
    7846:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    784a:	f366 138f 	bfi	r3, r6, #6, #10
    784e:	f019 f9fa 	bl	20c46 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    7852:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    7856:	2203      	movs	r2, #3
    7858:	f04f 0300 	mov.w	r3, #0
    785c:	f362 0307 	bfi	r3, r2, #0, #8
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    7860:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    7862:	f366 138f 	bfi	r3, r6, #6, #10
    7866:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    786a:	d138      	bne.n	78de <bt_init+0x46e>
	if (variant < ARRAY_SIZE(nordic_str)) {
    786c:	2a02      	cmp	r2, #2
    786e:	d836      	bhi.n	78de <bt_init+0x46e>
		return nordic_str[variant];
    7870:	4937      	ldr	r1, [pc, #220]	; (7950 <bt_init+0x4e0>)
    7872:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    7876:	4837      	ldr	r0, [pc, #220]	; (7954 <bt_init+0x4e4>)
    7878:	f019 f9e5 	bl	20c46 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    787c:	2203      	movs	r2, #3
    787e:	f04f 0300 	mov.w	r3, #0
    7882:	f362 0307 	bfi	r3, r2, #0, #8
    7886:	7962      	ldrb	r2, [r4, #5]
    7888:	4833      	ldr	r0, [pc, #204]	; (7958 <bt_init+0x4e8>)
	if (variant < ARRAY_SIZE(var_str)) {
    788a:	2a03      	cmp	r2, #3
		return var_str[variant];
    788c:	bf96      	itet	ls
    788e:	4933      	ldrls	r1, [pc, #204]	; (795c <bt_init+0x4ec>)
	return "unknown";
    7890:	492e      	ldrhi	r1, [pc, #184]	; (794c <bt_init+0x4dc>)
		return var_str[variant];
    7892:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    7896:	e9cd 1205 	strd	r1, r2, [sp, #20]
    789a:	79a2      	ldrb	r2, [r4, #6]
    789c:	9207      	str	r2, [sp, #28]
    789e:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    78a2:	9208      	str	r2, [sp, #32]
    78a4:	f8d4 2009 	ldr.w	r2, [r4, #9]
    78a8:	9209      	str	r2, [sp, #36]	; 0x24
    78aa:	f366 138f 	bfi	r3, r6, #6, #10
    78ae:	2205      	movs	r2, #5
    78b0:	a905      	add	r1, sp, #20
    78b2:	f019 f9fb 	bl	20cac <log_n>
	net_buf_unref(rsp);
    78b6:	9800      	ldr	r0, [sp, #0]
    78b8:	f015 ff56 	bl	1d768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    78bc:	466a      	mov	r2, sp
    78be:	2100      	movs	r1, #0
    78c0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    78c4:	f7ff faf6 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    78c8:	4604      	mov	r4, r0
    78ca:	b150      	cbz	r0, 78e2 <bt_init+0x472>
		BT_WARN("Failed to read supported vendor features");
    78cc:	f04f 0100 	mov.w	r1, #0
    78d0:	2302      	movs	r3, #2
    78d2:	f363 0107 	bfi	r1, r3, #0, #8
    78d6:	f366 118f 	bfi	r1, r6, #6, #10
    78da:	4821      	ldr	r0, [pc, #132]	; (7960 <bt_init+0x4f0>)
    78dc:	e75d      	b.n	779a <bt_init+0x32a>
		return "unknown";
    78de:	491b      	ldr	r1, [pc, #108]	; (794c <bt_init+0x4dc>)
    78e0:	e7c9      	b.n	7876 <bt_init+0x406>
	rp.cmds = (void *)rsp->data;
    78e2:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    78e4:	481f      	ldr	r0, [pc, #124]	; (7964 <bt_init+0x4f4>)
    78e6:	6899      	ldr	r1, [r3, #8]
    78e8:	2202      	movs	r2, #2
    78ea:	3101      	adds	r1, #1
    78ec:	f01a facb 	bl	21e86 <memcpy>
	net_buf_unref(rsp);
    78f0:	9800      	ldr	r0, [sp, #0]
    78f2:	f015 ff39 	bl	1d768 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    78f6:	466a      	mov	r2, sp
    78f8:	4621      	mov	r1, r4
    78fa:	f64f 4003 	movw	r0, #64515	; 0xfc03
    78fe:	f7ff fad9 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    7902:	b140      	cbz	r0, 7916 <bt_init+0x4a6>
		BT_WARN("Failed to read supported vendor commands");
    7904:	f04f 0100 	mov.w	r1, #0
    7908:	2302      	movs	r3, #2
    790a:	f363 0107 	bfi	r1, r3, #0, #8
    790e:	f366 118f 	bfi	r1, r6, #6, #10
    7912:	4815      	ldr	r0, [pc, #84]	; (7968 <bt_init+0x4f8>)
    7914:	e741      	b.n	779a <bt_init+0x32a>
	rp.feat = (void *)rsp->data;
    7916:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    7918:	4814      	ldr	r0, [pc, #80]	; (796c <bt_init+0x4fc>)
    791a:	6899      	ldr	r1, [r3, #8]
    791c:	2201      	movs	r2, #1
    791e:	4411      	add	r1, r2
    7920:	f01a fab1 	bl	21e86 <memcpy>
	net_buf_unref(rsp);
    7924:	9800      	ldr	r0, [sp, #0]
    7926:	f015 ff1f 	bl	1d768 <net_buf_unref>
	if (err) {
    792a:	e738      	b.n	779e <bt_init+0x32e>
    792c:	20006c00 	.word	0x20006c00
    7930:	20006c14 	.word	0x20006c14
    7934:	000258f0 	.word	0x000258f0
    7938:	00025880 	.word	0x00025880
    793c:	00026f13 	.word	0x00026f13
    7940:	20006bf8 	.word	0x20006bf8
    7944:	00026f37 	.word	0x00026f37
    7948:	00025e5c 	.word	0x00025e5c
    794c:	00027521 	.word	0x00027521
    7950:	00025e40 	.word	0x00025e40
    7954:	00026f50 	.word	0x00026f50
    7958:	00026f68 	.word	0x00026f68
    795c:	00025e84 	.word	0x00025e84
    7960:	00026f95 	.word	0x00026f95
    7964:	20006be9 	.word	0x20006be9
    7968:	00026fbe 	.word	0x00026fbe
    796c:	20006be8 	.word	0x20006be8
		BT_WARN("No ID address. Expecting one to come from storage.");
    7970:	2302      	movs	r3, #2
    7972:	f04f 0100 	mov.w	r1, #0
    7976:	f363 0107 	bfi	r1, r3, #0, #8
    797a:	f366 118f 	bfi	r1, r6, #6, #10
    797e:	4802      	ldr	r0, [pc, #8]	; (7988 <bt_init+0x518>)
    7980:	f019 f940 	bl	20c04 <log_0>
    7984:	e631      	b.n	75ea <bt_init+0x17a>
    7986:	bf00      	nop
    7988:	00026fe7 	.word	0x00026fe7

0000798c <init_work>:
{
    798c:	b510      	push	{r4, lr}
	err = bt_init();
    798e:	f7ff fd6f 	bl	7470 <bt_init>
	if (ready_cb) {
    7992:	4b03      	ldr	r3, [pc, #12]	; (79a0 <init_work+0x14>)
    7994:	681b      	ldr	r3, [r3, #0]
    7996:	b113      	cbz	r3, 799e <init_work+0x12>
}
    7998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    799c:	4718      	bx	r3
}
    799e:	bd10      	pop	{r4, pc}
    79a0:	20000868 	.word	0x20000868

000079a4 <id_create.isra.26>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    79a4:	b530      	push	{r4, r5, lr}
    79a6:	4d17      	ldr	r5, [pc, #92]	; (7a04 <id_create.isra.26+0x60>)
    79a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    79ac:	b085      	sub	sp, #20
    79ae:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    79b0:	460c      	mov	r4, r1
    79b2:	b1b1      	cbz	r1, 79e2 <id_create.isra.26+0x3e>
    79b4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    79b6:	2207      	movs	r2, #7
    79b8:	a902      	add	r1, sp, #8
    79ba:	4620      	mov	r0, r4
    79bc:	9302      	str	r3, [sp, #8]
    79be:	f8cd 300b 	str.w	r3, [sp, #11]
    79c2:	f01a fa39 	bl	21e38 <memcmp>
    79c6:	b160      	cbz	r0, 79e2 <id_create.isra.26+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    79c8:	4621      	mov	r1, r4
    79ca:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    79cc:	f01a fbd1 	bl	22172 <bt_addr_le_copy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    79d0:	2101      	movs	r1, #1
    79d2:	480d      	ldr	r0, [pc, #52]	; (7a08 <id_create.isra.26+0x64>)
    79d4:	f01a fc01 	bl	221da <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    79d8:	b108      	cbz	r0, 79de <id_create.isra.26+0x3a>
		bt_settings_save_id();
    79da:	f7fe fcb5 	bl	6348 <bt_settings_save_id>
}
    79de:	b005      	add	sp, #20
    79e0:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    79e2:	4668      	mov	r0, sp
    79e4:	f01a fc6f 	bl	222c6 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    79e8:	4668      	mov	r0, sp
    79ea:	f7ff f903 	bl	6bf4 <id_find>
    79ee:	2800      	cmp	r0, #0
    79f0:	daf7      	bge.n	79e2 <id_create.isra.26+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    79f2:	4669      	mov	r1, sp
    79f4:	4628      	mov	r0, r5
    79f6:	f01a fbbc 	bl	22172 <bt_addr_le_copy>
		if (addr) {
    79fa:	2c00      	cmp	r4, #0
    79fc:	d0e8      	beq.n	79d0 <id_create.isra.26+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    79fe:	4629      	mov	r1, r5
    7a00:	4620      	mov	r0, r4
    7a02:	e7e3      	b.n	79cc <id_create.isra.26+0x28>
    7a04:	20006b88 	.word	0x20006b88
    7a08:	20006bf8 	.word	0x20006bf8

00007a0c <bt_dev_show_info>:
{
    7a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7a10:	2303      	movs	r3, #3
    7a12:	f04f 0800 	mov.w	r8, #0
    7a16:	f363 0807 	bfi	r8, r3, #0, #8
    7a1a:	4c32      	ldr	r4, [pc, #200]	; (7ae4 <bt_dev_show_info+0xd8>)
    7a1c:	4b32      	ldr	r3, [pc, #200]	; (7ae8 <bt_dev_show_info+0xdc>)
    7a1e:	4d33      	ldr	r5, [pc, #204]	; (7aec <bt_dev_show_info+0xe0>)
    7a20:	4933      	ldr	r1, [pc, #204]	; (7af0 <bt_dev_show_info+0xe4>)
    7a22:	4e34      	ldr	r6, [pc, #208]	; (7af4 <bt_dev_show_info+0xe8>)
    7a24:	1aed      	subs	r5, r5, r3
    7a26:	79e3      	ldrb	r3, [r4, #7]
{
    7a28:	b086      	sub	sp, #24
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7a2a:	4620      	mov	r0, r4
    7a2c:	2b01      	cmp	r3, #1
    7a2e:	bf88      	it	hi
    7a30:	460e      	movhi	r6, r1
    7a32:	f7fe f98d 	bl	5d50 <bt_addr_le_str_real>
    7a36:	f7fb ffe1 	bl	39fc <log_strdup>
    7a3a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    7a3e:	f365 188f 	bfi	r8, r5, #6, #10
    7a42:	4643      	mov	r3, r8
    7a44:	4602      	mov	r2, r0
    7a46:	4631      	mov	r1, r6
    7a48:	482b      	ldr	r0, [pc, #172]	; (7af8 <bt_dev_show_info+0xec>)
		BT_INFO("Identity[%d]: %s",
    7a4a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 7b04 <bt_dev_show_info+0xf8>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    7a4e:	f019 f8fa 	bl	20c46 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    7a52:	2601      	movs	r6, #1
    7a54:	79e3      	ldrb	r3, [r4, #7]
    7a56:	42b3      	cmp	r3, r6
    7a58:	dc2c      	bgt.n	7ab4 <bt_dev_show_info+0xa8>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    7a5a:	7c27      	ldrb	r7, [r4, #16]
    7a5c:	2303      	movs	r3, #3
    7a5e:	4638      	mov	r0, r7
    7a60:	f04f 0600 	mov.w	r6, #0
    7a64:	f363 0607 	bfi	r6, r3, #0, #8
    7a68:	f7fe fd68 	bl	653c <ver_str>
    7a6c:	8a63      	ldrh	r3, [r4, #18]
    7a6e:	9304      	str	r3, [sp, #16]
    7a70:	f365 168f 	bfi	r6, r5, #6, #10
    7a74:	8ae3      	ldrh	r3, [r4, #22]
    7a76:	9305      	str	r3, [sp, #20]
    7a78:	a902      	add	r1, sp, #8
    7a7a:	e9cd 0702 	strd	r0, r7, [sp, #8]
    7a7e:	4633      	mov	r3, r6
    7a80:	2204      	movs	r2, #4
    7a82:	481e      	ldr	r0, [pc, #120]	; (7afc <bt_dev_show_info+0xf0>)
    7a84:	f019 f912 	bl	20cac <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    7a88:	f04f 0600 	mov.w	r6, #0
    7a8c:	2303      	movs	r3, #3
    7a8e:	f363 0607 	bfi	r6, r3, #0, #8
    7a92:	f365 168f 	bfi	r6, r5, #6, #10
    7a96:	7c65      	ldrb	r5, [r4, #17]
    7a98:	4628      	mov	r0, r5
    7a9a:	f7fe fd4f 	bl	653c <ver_str>
    7a9e:	f8ad 6000 	strh.w	r6, [sp]
    7aa2:	4601      	mov	r1, r0
    7aa4:	8aa3      	ldrh	r3, [r4, #20]
    7aa6:	4816      	ldr	r0, [pc, #88]	; (7b00 <bt_dev_show_info+0xf4>)
    7aa8:	462a      	mov	r2, r5
    7aaa:	f019 f8e4 	bl	20c76 <log_3>
}
    7aae:	b006      	add	sp, #24
    7ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_INFO("Identity[%d]: %s",
    7ab4:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    7ab8:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    7abc:	f043 0303 	orr.w	r3, r3, #3
    7ac0:	4420      	add	r0, r4
    7ac2:	f363 0707 	bfi	r7, r3, #0, #8
    7ac6:	f7fe f943 	bl	5d50 <bt_addr_le_str_real>
    7aca:	f7fb ff97 	bl	39fc <log_strdup>
    7ace:	f365 178f 	bfi	r7, r5, #6, #10
    7ad2:	4602      	mov	r2, r0
    7ad4:	4631      	mov	r1, r6
    7ad6:	463b      	mov	r3, r7
    7ad8:	4640      	mov	r0, r8
    7ada:	f019 f8b4 	bl	20c46 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    7ade:	3601      	adds	r6, #1
    7ae0:	e7b8      	b.n	7a54 <bt_dev_show_info+0x48>
    7ae2:	bf00      	nop
    7ae4:	20006b88 	.word	0x20006b88
    7ae8:	00025880 	.word	0x00025880
    7aec:	000258f0 	.word	0x000258f0
    7af0:	00026dfd 	.word	0x00026dfd
    7af4:	000290a7 	.word	0x000290a7
    7af8:	00026e01 	.word	0x00026e01
    7afc:	00026e21 	.word	0x00026e21
    7b00:	00026e5f 	.word	0x00026e5f
    7b04:	00026e10 	.word	0x00026e10

00007b08 <bt_recv>:
{
    7b08:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7b0a:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    7b0c:	2d01      	cmp	r5, #1
{
    7b0e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    7b10:	d059      	beq.n	7bc6 <bt_recv+0xbe>
    7b12:	2d03      	cmp	r5, #3
    7b14:	d178      	bne.n	7c08 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7b16:	8983      	ldrh	r3, [r0, #12]
    7b18:	2b03      	cmp	r3, #3
    7b1a:	d813      	bhi.n	7b44 <bt_recv+0x3c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7b1c:	2301      	movs	r3, #1
    7b1e:	f04f 0100 	mov.w	r1, #0
    7b22:	f363 0107 	bfi	r1, r3, #0, #8
    7b26:	4a43      	ldr	r2, [pc, #268]	; (7c34 <bt_recv+0x12c>)
    7b28:	4b43      	ldr	r3, [pc, #268]	; (7c38 <bt_recv+0x130>)
    7b2a:	4844      	ldr	r0, [pc, #272]	; (7c3c <bt_recv+0x134>)
    7b2c:	1a9b      	subs	r3, r3, r2
    7b2e:	08db      	lsrs	r3, r3, #3
    7b30:	f363 118f 	bfi	r1, r3, #6, #10
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7b34:	f019 f866 	bl	20c04 <log_0>
    7b38:	4040      	eors	r0, r0
    7b3a:	f380 8811 	msr	BASEPRI, r0
    7b3e:	f04f 0004 	mov.w	r0, #4
    7b42:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7b44:	2104      	movs	r1, #4
    7b46:	3008      	adds	r0, #8
    7b48:	f01d f935 	bl	24db6 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    7b4c:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    7b4e:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    7b50:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->id = BT_CONN_ID_INVALID;
    7b52:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    7b54:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    7b58:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    7b5a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    7b5c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    7b5e:	d011      	beq.n	7b84 <bt_recv+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    7b60:	2001      	movs	r0, #1
    7b62:	f04f 0300 	mov.w	r3, #0
    7b66:	f360 0307 	bfi	r3, r0, #0, #8
    7b6a:	4d32      	ldr	r5, [pc, #200]	; (7c34 <bt_recv+0x12c>)
    7b6c:	4832      	ldr	r0, [pc, #200]	; (7c38 <bt_recv+0x130>)
    7b6e:	1b40      	subs	r0, r0, r5
    7b70:	08c0      	lsrs	r0, r0, #3
    7b72:	f360 138f 	bfi	r3, r0, #6, #10
    7b76:	4832      	ldr	r0, [pc, #200]	; (7c40 <bt_recv+0x138>)
    7b78:	f019 f865 	bl	20c46 <log_2>
	net_buf_unref(buf);
    7b7c:	4620      	mov	r0, r4
    7b7e:	f015 fdf3 	bl	1d768 <net_buf_unref>
    7b82:	e01e      	b.n	7bc2 <bt_recv+0xba>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    7b84:	f001 f834 	bl	8bf0 <bt_conn_lookup_handle>
	if (!conn) {
    7b88:	4605      	mov	r5, r0
    7b8a:	b978      	cbnz	r0, 7bac <bt_recv+0xa4>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    7b8c:	2301      	movs	r3, #1
    7b8e:	f04f 0200 	mov.w	r2, #0
    7b92:	f363 0207 	bfi	r2, r3, #0, #8
    7b96:	4927      	ldr	r1, [pc, #156]	; (7c34 <bt_recv+0x12c>)
    7b98:	4b27      	ldr	r3, [pc, #156]	; (7c38 <bt_recv+0x130>)
    7b9a:	482a      	ldr	r0, [pc, #168]	; (7c44 <bt_recv+0x13c>)
    7b9c:	1a5b      	subs	r3, r3, r1
    7b9e:	08db      	lsrs	r3, r3, #3
    7ba0:	f363 128f 	bfi	r2, r3, #6, #10
    7ba4:	8ae1      	ldrh	r1, [r4, #22]
    7ba6:	f019 f83a 	bl	20c1e <log_1>
		net_buf_unref(buf);
    7baa:	e7e7      	b.n	7b7c <bt_recv+0x74>
	acl(buf)->id = bt_conn_index(conn);
    7bac:	f001 f990 	bl	8ed0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    7bb0:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_index(conn);
    7bb2:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    7bb4:	4621      	mov	r1, r4
    7bb6:	4628      	mov	r0, r5
    7bb8:	f000 fd4a 	bl	8650 <bt_conn_recv>
	bt_conn_unref(conn);
    7bbc:	4628      	mov	r0, r5
    7bbe:	f01a fc05 	bl	223cc <bt_conn_unref>
		return 0;
    7bc2:	2000      	movs	r0, #0
}
    7bc4:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7bc6:	8983      	ldrh	r3, [r0, #12]
    7bc8:	2b01      	cmp	r3, #1
    7bca:	d9a7      	bls.n	7b1c <bt_recv+0x14>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7bcc:	2102      	movs	r1, #2
    7bce:	3008      	adds	r0, #8
    7bd0:	f01d f8f1 	bl	24db6 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7bd4:	7800      	ldrb	r0, [r0, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    7bd6:	2813      	cmp	r0, #19
    7bd8:	d810      	bhi.n	7bfc <bt_recv+0xf4>
    7bda:	4085      	lsls	r5, r0
    7bdc:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    7be0:	d00c      	beq.n	7bfc <bt_recv+0xf4>
    7be2:	2301      	movs	r3, #1
    7be4:	f04f 0100 	mov.w	r1, #0
    7be8:	f363 0107 	bfi	r1, r3, #0, #8
    7bec:	4a11      	ldr	r2, [pc, #68]	; (7c34 <bt_recv+0x12c>)
    7bee:	4b12      	ldr	r3, [pc, #72]	; (7c38 <bt_recv+0x130>)
    7bf0:	4815      	ldr	r0, [pc, #84]	; (7c48 <bt_recv+0x140>)
    7bf2:	1a9b      	subs	r3, r3, r2
    7bf4:	08db      	lsrs	r3, r3, #3
    7bf6:	f363 118f 	bfi	r1, r3, #6, #10
    7bfa:	e79b      	b.n	7b34 <bt_recv+0x2c>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    7bfc:	2302      	movs	r3, #2
    7bfe:	4a13      	ldr	r2, [pc, #76]	; (7c4c <bt_recv+0x144>)
    7c00:	4621      	mov	r1, r4
    7c02:	f7fe fe37 	bl	6874 <handle_event>
    7c06:	e7b9      	b.n	7b7c <bt_recv+0x74>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    7c08:	2301      	movs	r3, #1
    7c0a:	f04f 0200 	mov.w	r2, #0
    7c0e:	f363 0207 	bfi	r2, r3, #0, #8
    7c12:	4908      	ldr	r1, [pc, #32]	; (7c34 <bt_recv+0x12c>)
    7c14:	4b08      	ldr	r3, [pc, #32]	; (7c38 <bt_recv+0x130>)
    7c16:	480e      	ldr	r0, [pc, #56]	; (7c50 <bt_recv+0x148>)
    7c18:	1a5b      	subs	r3, r3, r1
    7c1a:	08db      	lsrs	r3, r3, #3
    7c1c:	f363 128f 	bfi	r2, r3, #6, #10
    7c20:	4629      	mov	r1, r5
    7c22:	f018 fffc 	bl	20c1e <log_1>
		net_buf_unref(buf);
    7c26:	4620      	mov	r0, r4
    7c28:	f015 fd9e 	bl	1d768 <net_buf_unref>
		return -EINVAL;
    7c2c:	f06f 0015 	mvn.w	r0, #21
    7c30:	e7c8      	b.n	7bc4 <bt_recv+0xbc>
    7c32:	bf00      	nop
    7c34:	00025880 	.word	0x00025880
    7c38:	000258f0 	.word	0x000258f0
    7c3c:	00027063 	.word	0x00027063
    7c40:	0002708d 	.word	0x0002708d
    7c44:	000270b1 	.word	0x000270b1
    7c48:	000270d3 	.word	0x000270d3
    7c4c:	00025e4c 	.word	0x00025e4c
    7c50:	00027102 	.word	0x00027102

00007c54 <bt_recv_prio>:
{
    7c54:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7c56:	7d05      	ldrb	r5, [r0, #20]
    7c58:	2d01      	cmp	r5, #1
{
    7c5a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7c5c:	d013      	beq.n	7c86 <bt_recv_prio+0x32>
    7c5e:	2301      	movs	r3, #1
    7c60:	f04f 0100 	mov.w	r1, #0
    7c64:	f363 0107 	bfi	r1, r3, #0, #8
    7c68:	4a20      	ldr	r2, [pc, #128]	; (7cec <bt_recv_prio+0x98>)
    7c6a:	4b21      	ldr	r3, [pc, #132]	; (7cf0 <bt_recv_prio+0x9c>)
    7c6c:	4821      	ldr	r0, [pc, #132]	; (7cf4 <bt_recv_prio+0xa0>)
    7c6e:	1a9b      	subs	r3, r3, r2
    7c70:	08db      	lsrs	r3, r3, #3
    7c72:	f363 118f 	bfi	r1, r3, #6, #10
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7c76:	f018 ffc5 	bl	20c04 <log_0>
    7c7a:	4040      	eors	r0, r0
    7c7c:	f380 8811 	msr	BASEPRI, r0
    7c80:	f04f 0004 	mov.w	r0, #4
    7c84:	df02      	svc	2
    7c86:	8983      	ldrh	r3, [r0, #12]
    7c88:	2b01      	cmp	r3, #1
    7c8a:	d80c      	bhi.n	7ca6 <bt_recv_prio+0x52>
    7c8c:	2301      	movs	r3, #1
    7c8e:	f04f 0100 	mov.w	r1, #0
    7c92:	f363 0107 	bfi	r1, r3, #0, #8
    7c96:	4a15      	ldr	r2, [pc, #84]	; (7cec <bt_recv_prio+0x98>)
    7c98:	4b15      	ldr	r3, [pc, #84]	; (7cf0 <bt_recv_prio+0x9c>)
    7c9a:	4817      	ldr	r0, [pc, #92]	; (7cf8 <bt_recv_prio+0xa4>)
    7c9c:	1a9b      	subs	r3, r3, r2
    7c9e:	08db      	lsrs	r3, r3, #3
    7ca0:	f363 118f 	bfi	r1, r3, #6, #10
    7ca4:	e7e7      	b.n	7c76 <bt_recv_prio+0x22>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    7ca6:	2102      	movs	r1, #2
    7ca8:	3008      	adds	r0, #8
    7caa:	f01d f884 	bl	24db6 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    7cae:	7800      	ldrb	r0, [r0, #0]
    7cb0:	2813      	cmp	r0, #19
    7cb2:	d803      	bhi.n	7cbc <bt_recv_prio+0x68>
    7cb4:	4085      	lsls	r5, r0
    7cb6:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    7cba:	d10c      	bne.n	7cd6 <bt_recv_prio+0x82>
    7cbc:	2301      	movs	r3, #1
    7cbe:	f04f 0100 	mov.w	r1, #0
    7cc2:	f363 0107 	bfi	r1, r3, #0, #8
    7cc6:	4a09      	ldr	r2, [pc, #36]	; (7cec <bt_recv_prio+0x98>)
    7cc8:	4b09      	ldr	r3, [pc, #36]	; (7cf0 <bt_recv_prio+0x9c>)
    7cca:	480c      	ldr	r0, [pc, #48]	; (7cfc <bt_recv_prio+0xa8>)
    7ccc:	1a9b      	subs	r3, r3, r2
    7cce:	08db      	lsrs	r3, r3, #3
    7cd0:	f363 118f 	bfi	r1, r3, #6, #10
    7cd4:	e7cf      	b.n	7c76 <bt_recv_prio+0x22>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    7cd6:	2303      	movs	r3, #3
    7cd8:	4a09      	ldr	r2, [pc, #36]	; (7d00 <bt_recv_prio+0xac>)
    7cda:	4621      	mov	r1, r4
    7cdc:	f7fe fdca 	bl	6874 <handle_event>
	net_buf_unref(buf);
    7ce0:	4620      	mov	r0, r4
    7ce2:	f015 fd41 	bl	1d768 <net_buf_unref>
}
    7ce6:	2000      	movs	r0, #0
    7ce8:	bd38      	pop	{r3, r4, r5, pc}
    7cea:	bf00      	nop
    7cec:	00025880 	.word	0x00025880
    7cf0:	000258f0 	.word	0x000258f0
    7cf4:	00027116 	.word	0x00027116
    7cf8:	00027063 	.word	0x00027063
    7cfc:	0002714a 	.word	0x0002714a
    7d00:	00025e6c 	.word	0x00025e6c

00007d04 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    7d04:	4a08      	ldr	r2, [pc, #32]	; (7d28 <bt_hci_driver_register+0x24>)
    7d06:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    7d0a:	b93b      	cbnz	r3, 7d1c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    7d0c:	68c1      	ldr	r1, [r0, #12]
    7d0e:	b141      	cbz	r1, 7d22 <bt_hci_driver_register+0x1e>
    7d10:	6901      	ldr	r1, [r0, #16]
    7d12:	b131      	cbz	r1, 7d22 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    7d14:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    7d18:	4618      	mov	r0, r3
    7d1a:	4770      	bx	lr
		return -EALREADY;
    7d1c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    7d20:	4770      	bx	lr
		return -EINVAL;
    7d22:	f06f 0015 	mvn.w	r0, #21
}
    7d26:	4770      	bx	lr
    7d28:	20006b88 	.word	0x20006b88

00007d2c <bt_enable>:
{
    7d2c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    7d2e:	4d34      	ldr	r5, [pc, #208]	; (7e00 <bt_enable+0xd4>)
    7d30:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    7d34:	b086      	sub	sp, #24
    7d36:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    7d38:	b993      	cbnz	r3, 7d60 <bt_enable+0x34>
		BT_ERR("No HCI driver registered");
    7d3a:	2301      	movs	r3, #1
    7d3c:	f04f 0100 	mov.w	r1, #0
    7d40:	f363 0107 	bfi	r1, r3, #0, #8
    7d44:	4a2f      	ldr	r2, [pc, #188]	; (7e04 <bt_enable+0xd8>)
    7d46:	4b30      	ldr	r3, [pc, #192]	; (7e08 <bt_enable+0xdc>)
    7d48:	4830      	ldr	r0, [pc, #192]	; (7e0c <bt_enable+0xe0>)
    7d4a:	1a9b      	subs	r3, r3, r2
    7d4c:	08db      	lsrs	r3, r3, #3
    7d4e:	f363 118f 	bfi	r1, r3, #6, #10
    7d52:	f018 ff57 	bl	20c04 <log_0>
		return -ENODEV;
    7d56:	f06f 0412 	mvn.w	r4, #18
}
    7d5a:	4620      	mov	r0, r4
    7d5c:	b006      	add	sp, #24
    7d5e:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    7d60:	2101      	movs	r1, #1
    7d62:	f105 0070 	add.w	r0, r5, #112	; 0x70
    7d66:	f01a fa0d 	bl	22184 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7d6a:	07c2      	lsls	r2, r0, #31
    7d6c:	d444      	bmi.n	7df8 <bt_enable+0xcc>
		err = bt_settings_init();
    7d6e:	f7fe fb03 	bl	6378 <bt_settings_init>
		if (err) {
    7d72:	4604      	mov	r4, r0
    7d74:	2800      	cmp	r0, #0
    7d76:	d1f0      	bne.n	7d5a <bt_enable+0x2e>
	ready_cb = cb;
    7d78:	4b25      	ldr	r3, [pc, #148]	; (7e10 <bt_enable+0xe4>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    7d7a:	4926      	ldr	r1, [pc, #152]	; (7e14 <bt_enable+0xe8>)
    7d7c:	601e      	str	r6, [r3, #0]
    7d7e:	f06f 0308 	mvn.w	r3, #8
    7d82:	f44f 7220 	mov.w	r2, #640	; 0x280
    7d86:	e9cd 0302 	strd	r0, r3, [sp, #8]
    7d8a:	e9cd 0004 	strd	r0, r0, [sp, #16]
    7d8e:	4b22      	ldr	r3, [pc, #136]	; (7e18 <bt_enable+0xec>)
    7d90:	e9cd 0000 	strd	r0, r0, [sp]
    7d94:	4821      	ldr	r0, [pc, #132]	; (7e1c <bt_enable+0xf0>)
    7d96:	f016 ff59 	bl	1ec4c <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    7d9a:	4921      	ldr	r1, [pc, #132]	; (7e20 <bt_enable+0xf4>)
    7d9c:	481f      	ldr	r0, [pc, #124]	; (7e1c <bt_enable+0xf0>)
    7d9e:	f01d faca 	bl	25336 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    7da2:	f7fe f9bf 	bl	6124 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    7da6:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    7daa:	68db      	ldr	r3, [r3, #12]
    7dac:	4798      	blx	r3
	if (err) {
    7dae:	4604      	mov	r4, r0
    7db0:	b178      	cbz	r0, 7dd2 <bt_enable+0xa6>
		BT_ERR("HCI driver open failed (%d)", err);
    7db2:	2301      	movs	r3, #1
    7db4:	f04f 0200 	mov.w	r2, #0
    7db8:	f363 0207 	bfi	r2, r3, #0, #8
    7dbc:	4911      	ldr	r1, [pc, #68]	; (7e04 <bt_enable+0xd8>)
    7dbe:	4b12      	ldr	r3, [pc, #72]	; (7e08 <bt_enable+0xdc>)
    7dc0:	1a5b      	subs	r3, r3, r1
    7dc2:	08db      	lsrs	r3, r3, #3
    7dc4:	4601      	mov	r1, r0
    7dc6:	f363 128f 	bfi	r2, r3, #6, #10
    7dca:	4816      	ldr	r0, [pc, #88]	; (7e24 <bt_enable+0xf8>)
    7dcc:	f018 ff27 	bl	20c1e <log_1>
		return err;
    7dd0:	e7c3      	b.n	7d5a <bt_enable+0x2e>
	if (!cb) {
    7dd2:	b926      	cbnz	r6, 7dde <bt_enable+0xb2>
}
    7dd4:	b006      	add	sp, #24
    7dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    7dda:	f7ff bb49 	b.w	7470 <bt_init>
    7dde:	2101      	movs	r1, #1
    7de0:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    7de4:	f01a f9ce 	bl	22184 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7de8:	07c3      	lsls	r3, r0, #31
    7dea:	d4b6      	bmi.n	7d5a <bt_enable+0x2e>
		k_queue_append(&work_q->queue, work);
    7dec:	f105 0164 	add.w	r1, r5, #100	; 0x64
    7df0:	480d      	ldr	r0, [pc, #52]	; (7e28 <bt_enable+0xfc>)
    7df2:	f01d f925 	bl	25040 <k_queue_append>
    7df6:	e7b0      	b.n	7d5a <bt_enable+0x2e>
		return -EALREADY;
    7df8:	f06f 0444 	mvn.w	r4, #68	; 0x44
    7dfc:	e7ad      	b.n	7d5a <bt_enable+0x2e>
    7dfe:	bf00      	nop
    7e00:	20006b88 	.word	0x20006b88
    7e04:	00025880 	.word	0x00025880
    7e08:	000258f0 	.word	0x000258f0
    7e0c:	00026e86 	.word	0x00026e86
    7e10:	20000868 	.word	0x20000868
    7e14:	20002bd8 	.word	0x20002bd8
    7e18:	00006a55 	.word	0x00006a55
    7e1c:	20000870 	.word	0x20000870
    7e20:	00026e9f 	.word	0x00026e9f
    7e24:	00026ea5 	.word	0x00026ea5
    7e28:	20001d2c 	.word	0x20001d2c

00007e2c <bt_get_name>:
}
    7e2c:	4800      	ldr	r0, [pc, #0]	; (7e30 <bt_get_name+0x4>)
    7e2e:	4770      	bx	lr
    7e30:	000273e3 	.word	0x000273e3

00007e34 <bt_id_create>:
{
    7e34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7e36:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7e38:	4606      	mov	r6, r0
    7e3a:	b918      	cbnz	r0, 7e44 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    7e3c:	b35c      	cbz	r4, 7e96 <bt_id_create+0x62>
		return -EINVAL;
    7e3e:	f06f 0415 	mvn.w	r4, #21
    7e42:	e03f      	b.n	7ec4 <bt_id_create+0x90>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7e44:	2300      	movs	r3, #0
    7e46:	2207      	movs	r2, #7
    7e48:	4669      	mov	r1, sp
    7e4a:	9300      	str	r3, [sp, #0]
    7e4c:	f8cd 3003 	str.w	r3, [sp, #3]
    7e50:	f019 fff2 	bl	21e38 <memcmp>
    7e54:	2800      	cmp	r0, #0
    7e56:	d0f1      	beq.n	7e3c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    7e58:	7833      	ldrb	r3, [r6, #0]
    7e5a:	2b01      	cmp	r3, #1
    7e5c:	d104      	bne.n	7e68 <bt_id_create+0x34>
    7e5e:	79b3      	ldrb	r3, [r6, #6]
    7e60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7e64:	2bc0      	cmp	r3, #192	; 0xc0
    7e66:	d00e      	beq.n	7e86 <bt_id_create+0x52>
			BT_ERR("Only static random identity address supported");
    7e68:	2301      	movs	r3, #1
    7e6a:	f04f 0100 	mov.w	r1, #0
    7e6e:	f363 0107 	bfi	r1, r3, #0, #8
    7e72:	4a17      	ldr	r2, [pc, #92]	; (7ed0 <bt_id_create+0x9c>)
    7e74:	4b17      	ldr	r3, [pc, #92]	; (7ed4 <bt_id_create+0xa0>)
    7e76:	4818      	ldr	r0, [pc, #96]	; (7ed8 <bt_id_create+0xa4>)
    7e78:	1a9b      	subs	r3, r3, r2
    7e7a:	08db      	lsrs	r3, r3, #3
    7e7c:	f363 118f 	bfi	r1, r3, #6, #10
    7e80:	f018 fec0 	bl	20c04 <log_0>
			return -EINVAL;
    7e84:	e7db      	b.n	7e3e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    7e86:	4630      	mov	r0, r6
    7e88:	f7fe feb4 	bl	6bf4 <id_find>
    7e8c:	2800      	cmp	r0, #0
    7e8e:	dbd5      	blt.n	7e3c <bt_id_create+0x8>
			return -EALREADY;
    7e90:	f06f 0444 	mvn.w	r4, #68	; 0x44
    7e94:	e016      	b.n	7ec4 <bt_id_create+0x90>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    7e96:	4b11      	ldr	r3, [pc, #68]	; (7edc <bt_id_create+0xa8>)
    7e98:	79dd      	ldrb	r5, [r3, #7]
    7e9a:	2d01      	cmp	r5, #1
    7e9c:	d015      	beq.n	7eca <bt_id_create+0x96>
	new_id = bt_dev.id_count++;
    7e9e:	1c6a      	adds	r2, r5, #1
    7ea0:	71da      	strb	r2, [r3, #7]
    7ea2:	462c      	mov	r4, r5
	if (new_id == BT_ID_DEFAULT &&
    7ea4:	b955      	cbnz	r5, 7ebc <bt_id_create+0x88>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7ea6:	2101      	movs	r1, #1
    7ea8:	f103 0070 	add.w	r0, r3, #112	; 0x70
    7eac:	f01a f995 	bl	221da <atomic_test_bit>
	if (new_id == BT_ID_DEFAULT &&
    7eb0:	b920      	cbnz	r0, 7ebc <bt_id_create+0x88>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7eb2:	2108      	movs	r1, #8
    7eb4:	f103 0070 	add.w	r0, r3, #112	; 0x70
    7eb8:	f01a f964 	bl	22184 <atomic_or>
	id_create(new_id, addr, irk);
    7ebc:	4631      	mov	r1, r6
    7ebe:	4628      	mov	r0, r5
    7ec0:	f7ff fd70 	bl	79a4 <id_create.isra.26>
}
    7ec4:	4620      	mov	r0, r4
    7ec6:	b002      	add	sp, #8
    7ec8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    7eca:	f06f 040b 	mvn.w	r4, #11
    7ece:	e7f9      	b.n	7ec4 <bt_id_create+0x90>
    7ed0:	00025880 	.word	0x00025880
    7ed4:	000258f0 	.word	0x000258f0
    7ed8:	00026ec1 	.word	0x00026ec1
    7edc:	20006b88 	.word	0x20006b88

00007ee0 <bt_setup_id_addr>:
{
    7ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.id_count) {
    7ee4:	4d39      	ldr	r5, [pc, #228]	; (7fcc <bt_setup_id_addr+0xec>)
    7ee6:	79ef      	ldrb	r7, [r5, #7]
{
    7ee8:	b085      	sub	sp, #20
    7eea:	462e      	mov	r6, r5
	if (!bt_dev.id_count) {
    7eec:	b99f      	cbnz	r7, 7f16 <bt_setup_id_addr+0x36>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    7eee:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    7ef2:	f013 0401 	ands.w	r4, r3, #1
    7ef6:	d113      	bne.n	7f20 <bt_setup_id_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
    7ef8:	2302      	movs	r3, #2
    7efa:	f04f 0100 	mov.w	r1, #0
    7efe:	f363 0107 	bfi	r1, r3, #0, #8
    7f02:	4a33      	ldr	r2, [pc, #204]	; (7fd0 <bt_setup_id_addr+0xf0>)
    7f04:	4b33      	ldr	r3, [pc, #204]	; (7fd4 <bt_setup_id_addr+0xf4>)
    7f06:	4834      	ldr	r0, [pc, #208]	; (7fd8 <bt_setup_id_addr+0xf8>)
    7f08:	1a9b      	subs	r3, r3, r2
    7f0a:	08db      	lsrs	r3, r3, #3
    7f0c:	f363 118f 	bfi	r1, r3, #6, #10
    7f10:	f018 fe78 	bl	20c04 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    7f14:	71ec      	strb	r4, [r5, #7]
	return bt_id_create(NULL, NULL);
    7f16:	2100      	movs	r1, #0
    7f18:	4608      	mov	r0, r1
    7f1a:	f7ff ff8b 	bl	7e34 <bt_id_create>
    7f1e:	e047      	b.n	7fb0 <bt_setup_id_addr+0xd0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    7f20:	aa01      	add	r2, sp, #4
    7f22:	4639      	mov	r1, r7
    7f24:	f64f 4009 	movw	r0, #64521	; 0xfc09
    7f28:	f7fe ffc4 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    7f2c:	4604      	mov	r4, r0
    7f2e:	b178      	cbz	r0, 7f50 <bt_setup_id_addr+0x70>
		BT_WARN("Failed to read static addresses");
    7f30:	2302      	movs	r3, #2
    7f32:	f04f 0100 	mov.w	r1, #0
    7f36:	f363 0107 	bfi	r1, r3, #0, #8
    7f3a:	4a25      	ldr	r2, [pc, #148]	; (7fd0 <bt_setup_id_addr+0xf0>)
    7f3c:	4b25      	ldr	r3, [pc, #148]	; (7fd4 <bt_setup_id_addr+0xf4>)
    7f3e:	4827      	ldr	r0, [pc, #156]	; (7fdc <bt_setup_id_addr+0xfc>)
    7f40:	1a9b      	subs	r3, r3, r2
    7f42:	08db      	lsrs	r3, r3, #3
    7f44:	f363 118f 	bfi	r1, r3, #6, #10
    7f48:	f018 fe5c 	bl	20c04 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    7f4c:	71ef      	strb	r7, [r5, #7]
		if (bt_dev.id_count) {
    7f4e:	e7e2      	b.n	7f16 <bt_setup_id_addr+0x36>
	rp = (void *)rsp->data;
    7f50:	9b01      	ldr	r3, [sp, #4]
    7f52:	6899      	ldr	r1, [r3, #8]
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    7f54:	784d      	ldrb	r5, [r1, #1]
    7f56:	1c2f      	adds	r7, r5, #0
    7f58:	bf18      	it	ne
    7f5a:	2701      	movne	r7, #1
	for (i = 0; i < cnt; i++) {
    7f5c:	4603      	mov	r3, r0
		addr[i].type = BT_ADDR_LE_RANDOM;
    7f5e:	f04f 0901 	mov.w	r9, #1
		bt_addr_copy(&addr[i].a, &rp->a[i].bdaddr);
    7f62:	f101 0802 	add.w	r8, r1, #2
	for (i = 0; i < cnt; i++) {
    7f66:	429f      	cmp	r7, r3
    7f68:	dc25      	bgt.n	7fb6 <bt_setup_id_addr+0xd6>
	net_buf_unref(rsp);
    7f6a:	9801      	ldr	r0, [sp, #4]
    7f6c:	f015 fbfc 	bl	1d768 <net_buf_unref>
	if (!cnt) {
    7f70:	b96d      	cbnz	r5, 7f8e <bt_setup_id_addr+0xae>
		BT_WARN("No static addresses stored in controller");
    7f72:	2302      	movs	r3, #2
    7f74:	f04f 0100 	mov.w	r1, #0
    7f78:	f363 0107 	bfi	r1, r3, #0, #8
    7f7c:	4a14      	ldr	r2, [pc, #80]	; (7fd0 <bt_setup_id_addr+0xf0>)
    7f7e:	4b15      	ldr	r3, [pc, #84]	; (7fd4 <bt_setup_id_addr+0xf4>)
    7f80:	4817      	ldr	r0, [pc, #92]	; (7fe0 <bt_setup_id_addr+0x100>)
    7f82:	1a9b      	subs	r3, r3, r2
    7f84:	08db      	lsrs	r3, r3, #3
    7f86:	f363 118f 	bfi	r1, r3, #6, #10
    7f8a:	f018 fe3b 	bl	20c04 <log_0>
		bt_dev.id_count = bt_read_static_addr(addrs);
    7f8e:	71f7      	strb	r7, [r6, #7]
		if (bt_dev.id_count) {
    7f90:	2d00      	cmp	r5, #0
    7f92:	d0c0      	beq.n	7f16 <bt_setup_id_addr+0x36>
    7f94:	ad02      	add	r5, sp, #8
				id_create(i, &addrs[i], NULL);
    7f96:	4629      	mov	r1, r5
    7f98:	b2e0      	uxtb	r0, r4
    7f9a:	f7ff fd03 	bl	79a4 <id_create.isra.26>
			for (i = 0; i < bt_dev.id_count; i++) {
    7f9e:	79f3      	ldrb	r3, [r6, #7]
    7fa0:	3401      	adds	r4, #1
    7fa2:	42a3      	cmp	r3, r4
    7fa4:	f105 0507 	add.w	r5, r5, #7
    7fa8:	dcf5      	bgt.n	7f96 <bt_setup_id_addr+0xb6>
			return set_random_address(&bt_dev.id_addr[0].a);
    7faa:	480e      	ldr	r0, [pc, #56]	; (7fe4 <bt_setup_id_addr+0x104>)
    7fac:	f7ff f962 	bl	7274 <set_random_address>
}
    7fb0:	b005      	add	sp, #20
    7fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(dst, src, sizeof(*dst));
    7fb6:	2206      	movs	r2, #6
    7fb8:	4641      	mov	r1, r8
    7fba:	f10d 0009 	add.w	r0, sp, #9
		addr[i].type = BT_ADDR_LE_RANDOM;
    7fbe:	f88d 9008 	strb.w	r9, [sp, #8]
    7fc2:	f019 ff60 	bl	21e86 <memcpy>
	for (i = 0; i < cnt; i++) {
    7fc6:	2301      	movs	r3, #1
    7fc8:	e7cd      	b.n	7f66 <bt_setup_id_addr+0x86>
    7fca:	bf00      	nop
    7fcc:	20006b88 	.word	0x20006b88
    7fd0:	00025880 	.word	0x00025880
    7fd4:	000258f0 	.word	0x000258f0
    7fd8:	00027178 	.word	0x00027178
    7fdc:	000271a4 	.word	0x000271a4
    7fe0:	000271c4 	.word	0x000271c4
    7fe4:	20006b89 	.word	0x20006b89

00007fe8 <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    7fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (param->id >= bt_dev.id_count ||
    7fec:	4e78      	ldr	r6, [pc, #480]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
{
    7fee:	4605      	mov	r5, r0
    7ff0:	4698      	mov	r8, r3
	if (param->id >= bt_dev.id_count ||
    7ff2:	7800      	ldrb	r0, [r0, #0]
    7ff4:	79f3      	ldrb	r3, [r6, #7]
{
    7ff6:	b089      	sub	sp, #36	; 0x24
	if (param->id >= bt_dev.id_count ||
    7ff8:	4283      	cmp	r3, r0
{
    7ffa:	460c      	mov	r4, r1
    7ffc:	4617      	mov	r7, r2
    7ffe:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	if (param->id >= bt_dev.id_count ||
    8002:	d805      	bhi.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    8004:	f06f 0415 	mvn.w	r4, #21
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
		atomic_set_bit(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE);
	}

	return 0;
}
    8008:	4620      	mov	r0, r4
    800a:	b009      	add	sp, #36	; 0x24
    800c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    8010:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8014:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    8016:	2207      	movs	r2, #7
    8018:	a902      	add	r1, sp, #8
    801a:	4430      	add	r0, r6
    801c:	9302      	str	r3, [sp, #8]
    801e:	f8cd 300b 	str.w	r3, [sp, #11]
    8022:	f019 ff09 	bl	21e38 <memcmp>
	if (param->id >= bt_dev.id_count ||
    8026:	2800      	cmp	r0, #0
    8028:	d0ec      	beq.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    802a:	786b      	ldrb	r3, [r5, #1]
    802c:	07d9      	lsls	r1, r3, #31
    802e:	d405      	bmi.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    8030:	7c32      	ldrb	r2, [r6, #16]
    8032:	2a08      	cmp	r2, #8
    8034:	d802      	bhi.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
    8036:	886a      	ldrh	r2, [r5, #2]
    8038:	2a9f      	cmp	r2, #159	; 0x9f
    803a:	d9e3      	bls.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    803c:	06da      	lsls	r2, r3, #27
    803e:	d402      	bmi.n	8046 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46>
    8040:	f1b9 0f00 	cmp.w	r9, #0
    8044:	d108      	bne.n	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
		if (param->interval_min > param->interval_max ||
    8046:	886a      	ldrh	r2, [r5, #2]
    8048:	88ab      	ldrh	r3, [r5, #4]
    804a:	429a      	cmp	r2, r3
    804c:	d8da      	bhi.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    804e:	2a1f      	cmp	r2, #31
    8050:	d9d8      	bls.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
		    param->interval_min < 0x0020 ||
    8052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    8056:	d8d5      	bhi.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    8058:	2106      	movs	r1, #6
    805a:	485e      	ldr	r0, [pc, #376]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    805c:	f01a f8bd 	bl	221da <atomic_test_bit>
    8060:	2800      	cmp	r0, #0
    8062:	f040 80ae 	bne.w	81c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c2>
	if (!dir_adv) {
    8066:	f1b9 0f00 	cmp.w	r9, #0
    806a:	d031      	beq.n	80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>
	(void)memset(&set_param, 0, sizeof(set_param));
    806c:	220f      	movs	r2, #15
    806e:	2100      	movs	r1, #0
    8070:	a804      	add	r0, sp, #16
    8072:	f019 ff32 	bl	21eda <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    8076:	886b      	ldrh	r3, [r5, #2]
	bt_dev.adv_id = param->id;
    8078:	782f      	ldrb	r7, [r5, #0]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    807a:	f8ad 3010 	strh.w	r3, [sp, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    807e:	88ab      	ldrh	r3, [r5, #4]
	bt_dev.adv_id = param->id;
    8080:	7237      	strb	r7, [r6, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    8082:	f8ad 3012 	strh.w	r3, [sp, #18]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    8086:	786b      	ldrb	r3, [r5, #1]
	set_param.channel_map  = 0x07;
    8088:	2007      	movs	r0, #7
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    808a:	f013 0401 	ands.w	r4, r3, #1
	set_param.channel_map  = 0x07;
    808e:	f88d 001d 	strb.w	r0, [sp, #29]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    8092:	d12e      	bne.n	80f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf2>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    8094:	075b      	lsls	r3, r3, #29
    8096:	f140 808d 	bpl.w	81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    809a:	ea4f 09c7 	mov.w	r9, r7, lsl #3
    809e:	eba9 0307 	sub.w	r3, r9, r7
    80a2:	5cf3      	ldrb	r3, [r6, r3]
    80a4:	2b01      	cmp	r3, #1
    80a6:	d105      	bne.n	80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>
				err = set_random_address(&id_addr->a);
    80a8:	fb10 3007 	smlabb	r0, r0, r7, r3
    80ac:	4430      	add	r0, r6
    80ae:	f7ff f8e1 	bl	7274 <set_random_address>
    80b2:	4604      	mov	r4, r0
			set_param.own_addr_type = id_addr->type;
    80b4:	eba9 0707 	sub.w	r7, r9, r7
    80b8:	5df3      	ldrb	r3, [r6, r7]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    80ba:	f88d 3015 	strb.w	r3, [sp, #21]
		if (err) {
    80be:	2c00      	cmp	r4, #0
    80c0:	d1a2      	bne.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
		if (sd) {
    80c2:	f1b8 0f00 	cmp.w	r8, #0
    80c6:	d07a      	beq.n	81be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1be>
			set_param.type = BT_LE_ADV_SCAN_IND;
    80c8:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    80ca:	f88d 3014 	strb.w	r3, [sp, #20]
    80ce:	e037      	b.n	8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    80d0:	786b      	ldrb	r3, [r5, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    80d2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    80d6:	f003 0301 	and.w	r3, r3, #1
    80da:	9201      	str	r2, [sp, #4]
    80dc:	9300      	str	r3, [sp, #0]
    80de:	4620      	mov	r0, r4
    80e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    80e2:	4642      	mov	r2, r8
    80e4:	4639      	mov	r1, r7
    80e6:	f7ff f963 	bl	73b0 <le_adv_update>
		if (err) {
    80ea:	4604      	mov	r4, r0
    80ec:	2800      	cmp	r0, #0
    80ee:	d0bd      	beq.n	806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
    80f0:	e78a      	b.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    80f2:	ea4f 08c7 	mov.w	r8, r7, lsl #3
    80f6:	eba8 0307 	sub.w	r3, r8, r7
    80fa:	5cf3      	ldrb	r3, [r6, r3]
    80fc:	2b01      	cmp	r3, #1
    80fe:	d104      	bne.n	810a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10a>
				set_random_address(&id_addr->a);
    8100:	fb10 3007 	smlabb	r0, r0, r7, r3
    8104:	4430      	add	r0, r6
    8106:	f7ff f8b5 	bl	7274 <set_random_address>
			set_param.own_addr_type = id_addr->type;
    810a:	eba8 0707 	sub.w	r7, r8, r7
    810e:	5df3      	ldrb	r3, [r6, r7]
    8110:	f88d 3015 	strb.w	r3, [sp, #21]
		if (dir_adv) {
    8114:	f1b9 0f00 	cmp.w	r9, #0
    8118:	d049      	beq.n	81ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ae>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    811a:	786b      	ldrb	r3, [r5, #1]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    811c:	f013 0f10 	tst.w	r3, #16
			set_param.direct_addr = *peer;
    8120:	f8d9 3000 	ldr.w	r3, [r9]
    8124:	f8cd 3016 	str.w	r3, [sp, #22]
    8128:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    812c:	f8ad 301a 	strh.w	r3, [sp, #26]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    8130:	bf18      	it	ne
    8132:	2404      	movne	r4, #4
			set_param.direct_addr = *peer;
    8134:	f899 3006 	ldrb.w	r3, [r9, #6]
    8138:	f88d 4014 	strb.w	r4, [sp, #20]
    813c:	f88d 301c 	strb.w	r3, [sp, #28]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    8140:	210f      	movs	r1, #15
    8142:	f242 0006 	movw	r0, #8198	; 0x2006
    8146:	f7fe fdb5 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    814a:	4604      	mov	r4, r0
    814c:	2800      	cmp	r0, #0
    814e:	d03b      	beq.n	81c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8150:	220f      	movs	r2, #15
    8152:	a904      	add	r1, sp, #16
    8154:	3008      	adds	r0, #8
    8156:	f01c fdbf 	bl	24cd8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    815a:	4621      	mov	r1, r4
    815c:	2200      	movs	r2, #0
    815e:	f242 0006 	movw	r0, #8198	; 0x2006
    8162:	f7fe fea7 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    8166:	4604      	mov	r4, r0
    8168:	2800      	cmp	r0, #0
    816a:	f47f af4d 	bne.w	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
	err = set_advertise_enable(true);
    816e:	2001      	movs	r0, #1
    8170:	f7fe ff1c 	bl	6fac <set_advertise_enable>
	if (err) {
    8174:	4604      	mov	r4, r0
    8176:	2800      	cmp	r0, #0
    8178:	f47f af46 	bne.w	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    817c:	786b      	ldrb	r3, [r5, #1]
    817e:	0799      	lsls	r1, r3, #30
    8180:	d404      	bmi.n	818c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c>
    8182:	f44f 7100 	mov.w	r1, #512	; 0x200
    8186:	4813      	ldr	r0, [pc, #76]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    8188:	f019 fffc 	bl	22184 <atomic_or>
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
    818c:	786b      	ldrb	r3, [r5, #1]
    818e:	071a      	lsls	r2, r3, #28
    8190:	d503      	bpl.n	819a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19a>
    8192:	2180      	movs	r1, #128	; 0x80
    8194:	480f      	ldr	r0, [pc, #60]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    8196:	f019 fff5 	bl	22184 <atomic_or>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    819a:	786b      	ldrb	r3, [r5, #1]
    819c:	07db      	lsls	r3, r3, #31
    819e:	f57f af33 	bpl.w	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
    81a2:	f44f 7180 	mov.w	r1, #256	; 0x100
    81a6:	480b      	ldr	r0, [pc, #44]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    81a8:	f019 ffec 	bl	22184 <atomic_or>
    81ac:	e72c      	b.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
			set_param.type = BT_LE_ADV_IND;
    81ae:	f88d 9014 	strb.w	r9, [sp, #20]
    81b2:	e7c5      	b.n	8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>
			err = le_set_private_addr(param->id);
    81b4:	f01a f855 	bl	22262 <le_set_private_addr.isra.22>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    81b8:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    81ba:	4604      	mov	r4, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    81bc:	e77d      	b.n	80ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    81be:	2303      	movs	r3, #3
    81c0:	e783      	b.n	80ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca>
		return -EALREADY;
    81c2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    81c6:	e71f      	b.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
		return -ENOBUFS;
    81c8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    81cc:	e71c      	b.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
    81ce:	bf00      	nop
    81d0:	20006b88 	.word	0x20006b88
    81d4:	20006bf8 	.word	0x20006bf8

000081d8 <bt_le_adv_stop>:

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
}

int bt_le_adv_stop(void)
{
    81d8:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    81da:	f46f 7100 	mvn.w	r1, #512	; 0x200
    81de:	4810      	ldr	r0, [pc, #64]	; (8220 <bt_le_adv_stop+0x48>)
    81e0:	f019 ffdf 	bl	221a2 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    81e4:	2106      	movs	r1, #6
    81e6:	480e      	ldr	r0, [pc, #56]	; (8220 <bt_le_adv_stop+0x48>)
    81e8:	f019 fff7 	bl	221da <atomic_test_bit>
    81ec:	b910      	cbnz	r0, 81f4 <bt_le_adv_stop+0x1c>
		return 0;
    81ee:	2400      	movs	r4, #0
			le_set_private_addr(bt_dev.adv_id);
		}
	}

	return 0;
}
    81f0:	4620      	mov	r0, r4
    81f2:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    81f4:	2000      	movs	r0, #0
    81f6:	f7fe fed9 	bl	6fac <set_advertise_enable>
	if (err) {
    81fa:	4604      	mov	r4, r0
    81fc:	2800      	cmp	r0, #0
    81fe:	d1f7      	bne.n	81f0 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8200:	210a      	movs	r1, #10
    8202:	4807      	ldr	r0, [pc, #28]	; (8220 <bt_le_adv_stop+0x48>)
    8204:	f019 ffe9 	bl	221da <atomic_test_bit>
    8208:	2800      	cmp	r0, #0
    820a:	d0f0      	beq.n	81ee <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    820c:	210c      	movs	r1, #12
    820e:	4804      	ldr	r0, [pc, #16]	; (8220 <bt_le_adv_stop+0x48>)
    8210:	f019 ffe3 	bl	221da <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8214:	2800      	cmp	r0, #0
    8216:	d0ea      	beq.n	81ee <bt_le_adv_stop+0x16>
			le_set_private_addr(bt_dev.adv_id);
    8218:	f01a f823 	bl	22262 <le_set_private_addr.isra.22>
    821c:	e7e8      	b.n	81f0 <bt_le_adv_stop+0x18>
    821e:	bf00      	nop
    8220:	20006bf8 	.word	0x20006bf8

00008224 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    8224:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    8228:	7803      	ldrb	r3, [r0, #0]
    822a:	2b01      	cmp	r3, #1
{
    822c:	4605      	mov	r5, r0
    822e:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    8230:	f200 8093 	bhi.w	835a <bt_le_scan_start+0x136>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    8234:	7843      	ldrb	r3, [r0, #1]
    8236:	2b01      	cmp	r3, #1
    8238:	f200 808f 	bhi.w	835a <bt_le_scan_start+0x136>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    823c:	8841      	ldrh	r1, [r0, #2]
    823e:	1f0b      	subs	r3, r1, #4
    8240:	b29b      	uxth	r3, r3
    8242:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    8246:	4283      	cmp	r3, r0
    8248:	f200 8087 	bhi.w	835a <bt_le_scan_start+0x136>
	if (param->window < 0x0004 || param->window > 0x4000) {
    824c:	88aa      	ldrh	r2, [r5, #4]
    824e:	1f13      	subs	r3, r2, #4
    8250:	b29b      	uxth	r3, r3
    8252:	4283      	cmp	r3, r0
    8254:	f200 8081 	bhi.w	835a <bt_le_scan_start+0x136>
	if (param->window > param->interval) {
    8258:	4291      	cmp	r1, r2
    825a:	d37e      	bcc.n	835a <bt_le_scan_start+0x136>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    825c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8260:	4841      	ldr	r0, [pc, #260]	; (8368 <bt_le_scan_start+0x144>)
    8262:	f019 ff8f 	bl	22184 <atomic_or>
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8266:	f410 6300 	ands.w	r3, r0, #2048	; 0x800
    826a:	d179      	bne.n	8360 <bt_le_scan_start+0x13c>
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    826c:	210a      	movs	r1, #10
    826e:	483e      	ldr	r0, [pc, #248]	; (8368 <bt_le_scan_start+0x144>)
    8270:	f019 ffb3 	bl	221da <atomic_test_bit>
    8274:	b168      	cbz	r0, 8292 <bt_le_scan_start+0x6e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    8276:	4618      	mov	r0, r3
    8278:	f7fe fe62 	bl	6f40 <set_le_scan_enable>
		if (err) {
    827c:	4604      	mov	r4, r0
    827e:	b140      	cbz	r0, 8292 <bt_le_scan_start+0x6e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8280:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    8284:	4838      	ldr	r0, [pc, #224]	; (8368 <bt_le_scan_start+0x144>)
    8286:	f019 ff8c 	bl	221a2 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    828a:	4620      	mov	r0, r4
    828c:	b002      	add	sp, #8
    828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (val) {
    8292:	786b      	ldrb	r3, [r5, #1]
    8294:	2b00      	cmp	r3, #0
    8296:	d049      	beq.n	832c <bt_le_scan_start+0x108>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    829c:	4832      	ldr	r0, [pc, #200]	; (8368 <bt_le_scan_start+0x144>)
    829e:	f019 ff71 	bl	22184 <atomic_or>
	(void)memset(&set_param, 0, sizeof(set_param));
    82a2:	2207      	movs	r2, #7
    82a4:	2100      	movs	r1, #0
    82a6:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
    82a8:	782e      	ldrb	r6, [r5, #0]
    82aa:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    82ae:	88ac      	ldrh	r4, [r5, #4]
	(void)memset(&set_param, 0, sizeof(set_param));
    82b0:	f019 fe13 	bl	21eda <memset>
		set_param.addr_type =  bt_dev.id_addr[0].type;
    82b4:	482d      	ldr	r0, [pc, #180]	; (836c <bt_le_scan_start+0x148>)
	set_param.scan_type = scan_type;
    82b6:	f88d 6000 	strb.w	r6, [sp]
	set_param.filter_policy = 0x00;
    82ba:	2300      	movs	r3, #0
    82bc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    82c0:	2e01      	cmp	r6, #1
		set_param.addr_type =  bt_dev.id_addr[0].type;
    82c2:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    82c4:	f8ad 8001 	strh.w	r8, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    82c8:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr[0].type;
    82cc:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    82d0:	d132      	bne.n	8338 <bt_le_scan_start+0x114>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    82d2:	2106      	movs	r1, #6
    82d4:	3070      	adds	r0, #112	; 0x70
    82d6:	f019 ff80 	bl	221da <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    82da:	bb68      	cbnz	r0, 8338 <bt_le_scan_start+0x114>
			err = le_set_private_addr(BT_ID_DEFAULT);
    82dc:	f019 ffc1 	bl	22262 <le_set_private_addr.isra.22>
			if (err) {
    82e0:	4604      	mov	r4, r0
    82e2:	2800      	cmp	r0, #0
    82e4:	d1cc      	bne.n	8280 <bt_le_scan_start+0x5c>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    82e6:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    82ea:	2107      	movs	r1, #7
    82ec:	f242 000b 	movw	r0, #8203	; 0x200b
    82f0:	f7fe fce0 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    82f4:	4604      	mov	r4, r0
    82f6:	b368      	cbz	r0, 8354 <bt_le_scan_start+0x130>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    82f8:	2207      	movs	r2, #7
    82fa:	4669      	mov	r1, sp
    82fc:	3008      	adds	r0, #8
    82fe:	f01c fceb 	bl	24cd8 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    8302:	4621      	mov	r1, r4
    8304:	f242 000b 	movw	r0, #8203	; 0x200b
    8308:	f7fe fd04 	bl	6d14 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    830c:	2001      	movs	r0, #1
    830e:	f7fe fe17 	bl	6f40 <set_le_scan_enable>
	if (err) {
    8312:	4604      	mov	r4, r0
    8314:	2800      	cmp	r0, #0
    8316:	d1b3      	bne.n	8280 <bt_le_scan_start+0x5c>
	if (val) {
    8318:	2e01      	cmp	r6, #1
    831a:	d115      	bne.n	8348 <bt_le_scan_start+0x124>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    831c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    8320:	4811      	ldr	r0, [pc, #68]	; (8368 <bt_le_scan_start+0x144>)
    8322:	f019 ff2f 	bl	22184 <atomic_or>
	scan_dev_found_cb = cb;
    8326:	4b12      	ldr	r3, [pc, #72]	; (8370 <bt_le_scan_start+0x14c>)
    8328:	601f      	str	r7, [r3, #0]
	return 0;
    832a:	e7ae      	b.n	828a <bt_le_scan_start+0x66>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    832c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    8330:	480d      	ldr	r0, [pc, #52]	; (8368 <bt_le_scan_start+0x144>)
    8332:	f019 ff36 	bl	221a2 <atomic_and>
    8336:	e7b4      	b.n	82a2 <bt_le_scan_start+0x7e>
		} else if (set_param.addr_type == BT_ADDR_LE_RANDOM) {
    8338:	f89d 3005 	ldrb.w	r3, [sp, #5]
    833c:	2b01      	cmp	r3, #1
    833e:	d1d4      	bne.n	82ea <bt_le_scan_start+0xc6>
			set_random_address(&bt_dev.id_addr[0].a);
    8340:	480c      	ldr	r0, [pc, #48]	; (8374 <bt_le_scan_start+0x150>)
    8342:	f7fe ff97 	bl	7274 <set_random_address>
    8346:	e7d0      	b.n	82ea <bt_le_scan_start+0xc6>
    8348:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    834c:	4806      	ldr	r0, [pc, #24]	; (8368 <bt_le_scan_start+0x144>)
    834e:	f019 ff28 	bl	221a2 <atomic_and>
	if (err) {
    8352:	e7e8      	b.n	8326 <bt_le_scan_start+0x102>
		return -ENOBUFS;
    8354:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8358:	e792      	b.n	8280 <bt_le_scan_start+0x5c>
		return -EINVAL;
    835a:	f06f 0415 	mvn.w	r4, #21
    835e:	e794      	b.n	828a <bt_le_scan_start+0x66>
		return -EALREADY;
    8360:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8364:	e791      	b.n	828a <bt_le_scan_start+0x66>
    8366:	bf00      	nop
    8368:	20006bf8 	.word	0x20006bf8
    836c:	20006b88 	.word	0x20006b88
    8370:	2000086c 	.word	0x2000086c
    8374:	20006b89 	.word	0x20006b89

00008378 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    8378:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    837a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    837e:	4807      	ldr	r0, [pc, #28]	; (839c <bt_le_scan_stop+0x24>)
    8380:	f019 ff0f 	bl	221a2 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8384:	0503      	lsls	r3, r0, #20
    8386:	d506      	bpl.n	8396 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    8388:	4b05      	ldr	r3, [pc, #20]	; (83a0 <bt_le_scan_stop+0x28>)
    838a:	2000      	movs	r0, #0
    838c:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    838e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    8392:	f7ff b857 	b.w	7444 <bt_le_scan_update>
}
    8396:	f06f 0044 	mvn.w	r0, #68	; 0x44
    839a:	bd08      	pop	{r3, pc}
    839c:	20006bf8 	.word	0x20006bf8
    83a0:	2000086c 	.word	0x2000086c

000083a4 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    83a4:	b538      	push	{r3, r4, r5, lr}
    83a6:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    83a8:	4805      	ldr	r0, [pc, #20]	; (83c0 <bt_buf_get_rx+0x1c>)
    83aa:	f01c fc0b 	bl	24bc4 <net_buf_alloc_fixed>
#endif

	if (buf) {
    83ae:	4604      	mov	r4, r0
    83b0:	b120      	cbz	r0, 83bc <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    83b2:	2100      	movs	r1, #0
    83b4:	3008      	adds	r0, #8
    83b6:	f01c fc24 	bl	24c02 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    83ba:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    83bc:	4620      	mov	r0, r4
    83be:	bd38      	pop	{r3, r4, r5, pc}
    83c0:	200079ac 	.word	0x200079ac

000083c4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    83c4:	b510      	push	{r4, lr}
    83c6:	4601      	mov	r1, r0
	__asm__ volatile(
    83c8:	f04f 0320 	mov.w	r3, #32
    83cc:	f3ef 8011 	mrs	r0, BASEPRI
    83d0:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    83d4:	4a0c      	ldr	r2, [pc, #48]	; (8408 <bt_buf_get_cmd_complete+0x44>)
	bt_dev.sent_cmd = NULL;
    83d6:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    83d8:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    83dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile(
    83e0:	f380 8811 	msr	BASEPRI, r0
    83e4:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    83e8:	b924      	cbnz	r4, 83f4 <bt_buf_get_cmd_complete+0x30>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    83ea:	2001      	movs	r0, #1
}
    83ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    83f0:	f7ff bfd8 	b.w	83a4 <bt_buf_get_rx>
    83f4:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    83f6:	f104 0008 	add.w	r0, r4, #8
    83fa:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    83fc:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    83fe:	4619      	mov	r1, r3
    8400:	f01c fbff 	bl	24c02 <net_buf_simple_reserve>
}
    8404:	4620      	mov	r0, r4
    8406:	bd10      	pop	{r4, pc}
    8408:	20006b88 	.word	0x20006b88

0000840c <bt_pub_key_gen>:
	return cmd(buf)->opcode;
}

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    8410:	4e2b      	ldr	r6, [pc, #172]	; (84c0 <bt_pub_key_gen+0xb4>)
    8412:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
    8416:	f003 0306 	and.w	r3, r3, #6
    841a:	2b06      	cmp	r3, #6
{
    841c:	4607      	mov	r7, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    841e:	d012      	beq.n	8446 <bt_pub_key_gen+0x3a>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    8420:	2302      	movs	r3, #2
    8422:	f04f 0100 	mov.w	r1, #0
    8426:	f363 0107 	bfi	r1, r3, #0, #8
    842a:	4a26      	ldr	r2, [pc, #152]	; (84c4 <bt_pub_key_gen+0xb8>)
    842c:	4b26      	ldr	r3, [pc, #152]	; (84c8 <bt_pub_key_gen+0xbc>)
    842e:	4827      	ldr	r0, [pc, #156]	; (84cc <bt_pub_key_gen+0xc0>)
    8430:	1a9b      	subs	r3, r3, r2
    8432:	08db      	lsrs	r3, r3, #3
    8434:	f363 118f 	bfi	r1, r3, #6, #10
    8438:	f018 fbe4 	bl	20c04 <log_0>
		return -ENOTSUP;
    843c:	f06f 0422 	mvn.w	r4, #34	; 0x22
			cb->func(NULL);
		}
	}

	return 0;
}
    8440:	4620      	mov	r0, r4
    8442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	new_cb->_next = pub_key_cb;
    8446:	4d22      	ldr	r5, [pc, #136]	; (84d0 <bt_pub_key_gen+0xc4>)
    8448:	682b      	ldr	r3, [r5, #0]
    844a:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    844c:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    844e:	2120      	movs	r1, #32
    8450:	f106 0070 	add.w	r0, r6, #112	; 0x70
    8454:	f019 fe96 	bl	22184 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8458:	f010 0820 	ands.w	r8, r0, #32
    845c:	d001      	beq.n	8462 <bt_pub_key_gen+0x56>
		return 0;
    845e:	2400      	movs	r4, #0
    8460:	e7ee      	b.n	8440 <bt_pub_key_gen+0x34>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8462:	f06f 0110 	mvn.w	r1, #16
    8466:	f106 0070 	add.w	r0, r6, #112	; 0x70
    846a:	f019 fe9a 	bl	221a2 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    846e:	4642      	mov	r2, r8
    8470:	4641      	mov	r1, r8
    8472:	f242 0025 	movw	r0, #8229	; 0x2025
    8476:	f7fe fd1d 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    847a:	4604      	mov	r4, r0
    847c:	b1b0      	cbz	r0, 84ac <bt_pub_key_gen+0xa0>
		BT_ERR("Sending LE P256 Public Key command failed");
    847e:	2301      	movs	r3, #1
    8480:	f04f 0100 	mov.w	r1, #0
    8484:	4a0f      	ldr	r2, [pc, #60]	; (84c4 <bt_pub_key_gen+0xb8>)
    8486:	4813      	ldr	r0, [pc, #76]	; (84d4 <bt_pub_key_gen+0xc8>)
    8488:	f363 0107 	bfi	r1, r3, #0, #8
    848c:	4b0e      	ldr	r3, [pc, #56]	; (84c8 <bt_pub_key_gen+0xbc>)
    848e:	1a9b      	subs	r3, r3, r2
    8490:	08db      	lsrs	r3, r3, #3
    8492:	f363 118f 	bfi	r1, r3, #6, #10
    8496:	f018 fbb5 	bl	20c04 <log_0>
    849a:	f06f 0120 	mvn.w	r1, #32
    849e:	f106 0070 	add.w	r0, r6, #112	; 0x70
    84a2:	f019 fe7e 	bl	221a2 <atomic_and>
		pub_key_cb = NULL;
    84a6:	f8c5 8000 	str.w	r8, [r5]
		return err;
    84aa:	e7c9      	b.n	8440 <bt_pub_key_gen+0x34>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    84ac:	682c      	ldr	r4, [r5, #0]
    84ae:	2c00      	cmp	r4, #0
    84b0:	d0d5      	beq.n	845e <bt_pub_key_gen+0x52>
		if (cb != new_cb) {
    84b2:	42bc      	cmp	r4, r7
    84b4:	d002      	beq.n	84bc <bt_pub_key_gen+0xb0>
			cb->func(NULL);
    84b6:	6823      	ldr	r3, [r4, #0]
    84b8:	2000      	movs	r0, #0
    84ba:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    84bc:	6864      	ldr	r4, [r4, #4]
    84be:	e7f6      	b.n	84ae <bt_pub_key_gen+0xa2>
    84c0:	20006b88 	.word	0x20006b88
    84c4:	00025880 	.word	0x00025880
    84c8:	000258f0 	.word	0x000258f0
    84cc:	0002701a 	.word	0x0002701a
    84d0:	20000864 	.word	0x20000864
    84d4:	00027039 	.word	0x00027039

000084d8 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    84d8:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    84da:	2104      	movs	r1, #4
    84dc:	4803      	ldr	r0, [pc, #12]	; (84ec <bt_pub_key_get+0x14>)
    84de:	f019 fe7c 	bl	221da <atomic_test_bit>
    84e2:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    84e4:	4802      	ldr	r0, [pc, #8]	; (84f0 <bt_pub_key_get+0x18>)
    84e6:	bf08      	it	eq
    84e8:	2000      	moveq	r0, #0
    84ea:	bd08      	pop	{r3, pc}
    84ec:	20006bf8 	.word	0x20006bf8
    84f0:	200023e2 	.word	0x200023e2

000084f4 <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    84f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    84f6:	4c1a      	ldr	r4, [pc, #104]	; (8560 <bt_dh_key_gen+0x6c>)
    84f8:	6822      	ldr	r2, [r4, #0]
{
    84fa:	4607      	mov	r7, r0
    84fc:	460b      	mov	r3, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    84fe:	b112      	cbz	r2, 8506 <bt_dh_key_gen+0x12>
		return -EBUSY;
    8500:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    8504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8506:	2105      	movs	r1, #5
    8508:	4816      	ldr	r0, [pc, #88]	; (8564 <bt_dh_key_gen+0x70>)
    850a:	f019 fe66 	bl	221da <atomic_test_bit>
    850e:	4606      	mov	r6, r0
    8510:	2800      	cmp	r0, #0
    8512:	d1f5      	bne.n	8500 <bt_dh_key_gen+0xc>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    8514:	2104      	movs	r1, #4
    8516:	4813      	ldr	r0, [pc, #76]	; (8564 <bt_dh_key_gen+0x70>)
    8518:	f019 fe5f 	bl	221da <atomic_test_bit>
    851c:	b1e8      	cbz	r0, 855a <bt_dh_key_gen+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    851e:	2140      	movs	r1, #64	; 0x40
    8520:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    8524:	6023      	str	r3, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    8526:	f7fe fbc5 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
    852a:	4605      	mov	r5, r0
    852c:	b918      	cbnz	r0, 8536 <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    852e:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    8530:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8534:	e7e6      	b.n	8504 <bt_dh_key_gen+0x10>
	cp = net_buf_add(buf, sizeof(*cp));
    8536:	2140      	movs	r1, #64	; 0x40
    8538:	3008      	adds	r0, #8
    853a:	f01c fbc7 	bl	24ccc <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    853e:	2240      	movs	r2, #64	; 0x40
    8540:	4639      	mov	r1, r7
    8542:	f019 fca0 	bl	21e86 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    8546:	4632      	mov	r2, r6
    8548:	4629      	mov	r1, r5
    854a:	f242 0026 	movw	r0, #8230	; 0x2026
    854e:	f7fe fcb1 	bl	6eb4 <bt_hci_cmd_send_sync>
	if (err) {
    8552:	2800      	cmp	r0, #0
    8554:	d0d6      	beq.n	8504 <bt_dh_key_gen+0x10>
		dh_key_cb = NULL;
    8556:	6026      	str	r6, [r4, #0]
		return err;
    8558:	e7d4      	b.n	8504 <bt_dh_key_gen+0x10>
		return -EADDRNOTAVAIL;
    855a:	f06f 0030 	mvn.w	r0, #48	; 0x30
    855e:	e7d1      	b.n	8504 <bt_dh_key_gen+0x10>
    8560:	20000860 	.word	0x20000860
    8564:	20006bf8 	.word	0x20006bf8

00008568 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    8568:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    856a:	4b08      	ldr	r3, [pc, #32]	; (858c <notify_connected+0x24>)
    856c:	681c      	ldr	r4, [r3, #0]
{
    856e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    8570:	b924      	cbnz	r4, 857c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	bt_gatt_connected(conn);
    8572:	4628      	mov	r0, r5
}
    8574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_connected(conn);
    8578:	f002 bac4 	b.w	ab04 <bt_gatt_connected>
		if (cb->connected) {
    857c:	6823      	ldr	r3, [r4, #0]
    857e:	b113      	cbz	r3, 8586 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    8580:	7a69      	ldrb	r1, [r5, #9]
    8582:	4628      	mov	r0, r5
    8584:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8586:	6924      	ldr	r4, [r4, #16]
    8588:	e7f2      	b.n	8570 <notify_connected+0x8>
    858a:	bf00      	nop
    858c:	200008dc 	.word	0x200008dc

00008590 <bt_conn_get_pkts>:
}
    8590:	4800      	ldr	r0, [pc, #0]	; (8594 <bt_conn_get_pkts+0x4>)
    8592:	4770      	bx	lr
    8594:	20006c14 	.word	0x20006c14

00008598 <notify_le_param_updated>:
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send slave conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    8598:	1d03      	adds	r3, r0, #4
{
    859a:	b570      	push	{r4, r5, r6, lr}
    859c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    859e:	4618      	mov	r0, r3
    85a0:	f019 feb2 	bl	22308 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    85a4:	0582      	lsls	r2, r0, #22
    85a6:	d519      	bpl.n	85dc <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    85a8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    85ac:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    85b0:	4291      	cmp	r1, r2
    85b2:	d813      	bhi.n	85dc <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    85b4:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    85b8:	4291      	cmp	r1, r2
    85ba:	d30f      	bcc.n	85dc <notify_le_param_updated+0x44>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    85bc:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
    85c0:	4291      	cmp	r1, r2
    85c2:	d10b      	bne.n	85dc <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    85c4:	f3bf 8f5b 	dmb	ish
    85c8:	e853 2f00 	ldrex	r2, [r3]
    85cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    85d0:	e843 2100 	strex	r1, r2, [r3]
    85d4:	2900      	cmp	r1, #0
    85d6:	d1f7      	bne.n	85c8 <notify_le_param_updated+0x30>
    85d8:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    85dc:	4b07      	ldr	r3, [pc, #28]	; (85fc <notify_le_param_updated+0x64>)
    85de:	681d      	ldr	r5, [r3, #0]
    85e0:	b905      	cbnz	r5, 85e4 <notify_le_param_updated+0x4c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    85e2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    85e4:	68ee      	ldr	r6, [r5, #12]
    85e6:	b13e      	cbz	r6, 85f8 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    85e8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    85ec:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    85f0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    85f4:	4620      	mov	r0, r4
    85f6:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    85f8:	692d      	ldr	r5, [r5, #16]
    85fa:	e7f1      	b.n	85e0 <notify_le_param_updated+0x48>
    85fc:	200008dc 	.word	0x200008dc

00008600 <le_param_req>:

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    8600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8602:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    8604:	4608      	mov	r0, r1
{
    8606:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    8608:	f019 fe3d 	bl	22286 <bt_le_conn_params_valid>
    860c:	4605      	mov	r5, r0
    860e:	b910      	cbnz	r0, 8616 <le_param_req+0x16>
		return false;
    8610:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    8612:	4628      	mov	r0, r5
    8614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    8616:	4b09      	ldr	r3, [pc, #36]	; (863c <le_param_req+0x3c>)
    8618:	681c      	ldr	r4, [r3, #0]
    861a:	2c00      	cmp	r4, #0
    861c:	d0f9      	beq.n	8612 <le_param_req+0x12>
		if (!cb->le_param_req) {
    861e:	68a3      	ldr	r3, [r4, #8]
    8620:	b90b      	cbnz	r3, 8626 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    8622:	6924      	ldr	r4, [r4, #16]
    8624:	e7f9      	b.n	861a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    8626:	4631      	mov	r1, r6
    8628:	4638      	mov	r0, r7
    862a:	4798      	blx	r3
    862c:	2800      	cmp	r0, #0
    862e:	d0ef      	beq.n	8610 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    8630:	4630      	mov	r0, r6
    8632:	f019 fe28 	bl	22286 <bt_le_conn_params_valid>
    8636:	2800      	cmp	r0, #0
    8638:	d1f3      	bne.n	8622 <le_param_req+0x22>
    863a:	e7e9      	b.n	8610 <le_param_req+0x10>
    863c:	200008dc 	.word	0x200008dc

00008640 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    8640:	4b02      	ldr	r3, [pc, #8]	; (864c <bt_conn_cb_register+0xc>)
    8642:	681a      	ldr	r2, [r3, #0]
    8644:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    8646:	6018      	str	r0, [r3, #0]
}
    8648:	4770      	bx	lr
    864a:	bf00      	nop
    864c:	200008dc 	.word	0x200008dc

00008650 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    8650:	2a01      	cmp	r2, #1
{
    8652:	b570      	push	{r4, r5, r6, lr}
    8654:	460d      	mov	r5, r1
    8656:	4604      	mov	r4, r0
    8658:	4611      	mov	r1, r2
	switch (flags) {
    865a:	d020      	beq.n	869e <bt_conn_recv+0x4e>
    865c:	2a02      	cmp	r2, #2
    865e:	f040 8081 	bne.w	8764 <bt_conn_recv+0x114>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    8662:	68ab      	ldr	r3, [r5, #8]
    8664:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    8666:	8983      	ldrh	r3, [r0, #12]
    8668:	b183      	cbz	r3, 868c <bt_conn_recv+0x3c>
			BT_ERR("Unexpected first L2CAP frame");
    866a:	2301      	movs	r3, #1
    866c:	f04f 0100 	mov.w	r1, #0
    8670:	f363 0107 	bfi	r1, r3, #0, #8
    8674:	4a46      	ldr	r2, [pc, #280]	; (8790 <bt_conn_recv+0x140>)
    8676:	4b47      	ldr	r3, [pc, #284]	; (8794 <bt_conn_recv+0x144>)
    8678:	4847      	ldr	r0, [pc, #284]	; (8798 <bt_conn_recv+0x148>)
    867a:	1a9b      	subs	r3, r3, r2
    867c:	08db      	lsrs	r3, r3, #3
    867e:	f363 118f 	bfi	r1, r3, #6, #10
    8682:	f018 fabf 	bl	20c04 <log_0>
			bt_conn_reset_rx_state(conn);
    8686:	4620      	mov	r0, r4
    8688:	f019 fe44 	bl	22314 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    868c:	89ab      	ldrh	r3, [r5, #12]
    868e:	1af3      	subs	r3, r6, r3
    8690:	3304      	adds	r3, #4
    8692:	b29b      	uxth	r3, r3
    8694:	81a3      	strh	r3, [r4, #12]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    8696:	2b00      	cmp	r3, #0
    8698:	d04f      	beq.n	873a <bt_conn_recv+0xea>
			conn->rx = buf;
    869a:	6125      	str	r5, [r4, #16]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    869c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    869e:	8983      	ldrh	r3, [r0, #12]
    86a0:	b9ab      	cbnz	r3, 86ce <bt_conn_recv+0x7e>
			BT_ERR("Unexpected L2CAP continuation");
    86a2:	2301      	movs	r3, #1
    86a4:	f04f 0100 	mov.w	r1, #0
    86a8:	f363 0107 	bfi	r1, r3, #0, #8
    86ac:	4a38      	ldr	r2, [pc, #224]	; (8790 <bt_conn_recv+0x140>)
    86ae:	4b39      	ldr	r3, [pc, #228]	; (8794 <bt_conn_recv+0x144>)
    86b0:	483a      	ldr	r0, [pc, #232]	; (879c <bt_conn_recv+0x14c>)
    86b2:	1a9b      	subs	r3, r3, r2
    86b4:	08db      	lsrs	r3, r3, #3
    86b6:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("L2CAP data overflow");
    86ba:	f018 faa3 	bl	20c04 <log_0>
			bt_conn_reset_rx_state(conn);
    86be:	4620      	mov	r0, r4
    86c0:	f019 fe28 	bl	22314 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    86c4:	4628      	mov	r0, r5
}
    86c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    86ca:	f015 b84d 	b.w	1d768 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    86ce:	89ae      	ldrh	r6, [r5, #12]
    86d0:	42b3      	cmp	r3, r6
    86d2:	d20c      	bcs.n	86ee <bt_conn_recv+0x9e>
			BT_ERR("L2CAP data overflow");
    86d4:	2301      	movs	r3, #1
    86d6:	f04f 0100 	mov.w	r1, #0
    86da:	f363 0107 	bfi	r1, r3, #0, #8
    86de:	4a2c      	ldr	r2, [pc, #176]	; (8790 <bt_conn_recv+0x140>)
    86e0:	4b2c      	ldr	r3, [pc, #176]	; (8794 <bt_conn_recv+0x144>)
    86e2:	482f      	ldr	r0, [pc, #188]	; (87a0 <bt_conn_recv+0x150>)
    86e4:	1a9b      	subs	r3, r3, r2
    86e6:	08db      	lsrs	r3, r3, #3
    86e8:	f363 118f 	bfi	r1, r3, #6, #10
    86ec:	e7e5      	b.n	86ba <bt_conn_recv+0x6a>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    86ee:	6900      	ldr	r0, [r0, #16]
    86f0:	3008      	adds	r0, #8
    86f2:	f01c fb90 	bl	24e16 <net_buf_simple_tailroom>
    86f6:	4286      	cmp	r6, r0
    86f8:	d90c      	bls.n	8714 <bt_conn_recv+0xc4>
			BT_ERR("Not enough buffer space for L2CAP data");
    86fa:	2301      	movs	r3, #1
    86fc:	f04f 0100 	mov.w	r1, #0
    8700:	f363 0107 	bfi	r1, r3, #0, #8
    8704:	4a22      	ldr	r2, [pc, #136]	; (8790 <bt_conn_recv+0x140>)
    8706:	4b23      	ldr	r3, [pc, #140]	; (8794 <bt_conn_recv+0x144>)
    8708:	4826      	ldr	r0, [pc, #152]	; (87a4 <bt_conn_recv+0x154>)
    870a:	1a9b      	subs	r3, r3, r2
    870c:	08db      	lsrs	r3, r3, #3
    870e:	f363 118f 	bfi	r1, r3, #6, #10
    8712:	e7d2      	b.n	86ba <bt_conn_recv+0x6a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    8714:	6920      	ldr	r0, [r4, #16]
    8716:	89aa      	ldrh	r2, [r5, #12]
    8718:	68a9      	ldr	r1, [r5, #8]
    871a:	3008      	adds	r0, #8
    871c:	f01c fadc 	bl	24cd8 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    8720:	89a3      	ldrh	r3, [r4, #12]
    8722:	89aa      	ldrh	r2, [r5, #12]
    8724:	1a9b      	subs	r3, r3, r2
    8726:	81a3      	strh	r3, [r4, #12]
		net_buf_unref(buf);
    8728:	4628      	mov	r0, r5
    872a:	f015 f81d 	bl	1d768 <net_buf_unref>
		if (conn->rx_len) {
    872e:	89a3      	ldrh	r3, [r4, #12]
    8730:	2b00      	cmp	r3, #0
    8732:	d1b3      	bne.n	869c <bt_conn_recv+0x4c>
		buf = conn->rx;
    8734:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    8736:	81a3      	strh	r3, [r4, #12]
		conn->rx = NULL;
    8738:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    873a:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    873c:	89aa      	ldrh	r2, [r5, #12]
    873e:	8819      	ldrh	r1, [r3, #0]
    8740:	1d0b      	adds	r3, r1, #4
    8742:	4293      	cmp	r3, r2
    8744:	d01d      	beq.n	8782 <bt_conn_recv+0x132>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    8746:	2001      	movs	r0, #1
    8748:	f04f 0300 	mov.w	r3, #0
    874c:	f360 0307 	bfi	r3, r0, #0, #8
    8750:	4c0f      	ldr	r4, [pc, #60]	; (8790 <bt_conn_recv+0x140>)
    8752:	4810      	ldr	r0, [pc, #64]	; (8794 <bt_conn_recv+0x144>)
    8754:	1b00      	subs	r0, r0, r4
    8756:	08c0      	lsrs	r0, r0, #3
    8758:	f360 138f 	bfi	r3, r0, #6, #10
    875c:	4812      	ldr	r0, [pc, #72]	; (87a8 <bt_conn_recv+0x158>)
    875e:	f018 fa72 	bl	20c46 <log_2>
		net_buf_unref(buf);
    8762:	e7af      	b.n	86c4 <bt_conn_recv+0x74>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    8764:	2301      	movs	r3, #1
    8766:	f04f 0200 	mov.w	r2, #0
    876a:	f363 0207 	bfi	r2, r3, #0, #8
    876e:	4808      	ldr	r0, [pc, #32]	; (8790 <bt_conn_recv+0x140>)
    8770:	4b08      	ldr	r3, [pc, #32]	; (8794 <bt_conn_recv+0x144>)
    8772:	1a1b      	subs	r3, r3, r0
    8774:	08db      	lsrs	r3, r3, #3
    8776:	f363 128f 	bfi	r2, r3, #6, #10
    877a:	480c      	ldr	r0, [pc, #48]	; (87ac <bt_conn_recv+0x15c>)
    877c:	f018 fa4f 	bl	20c1e <log_1>
		bt_conn_reset_rx_state(conn);
    8780:	e79d      	b.n	86be <bt_conn_recv+0x6e>
	bt_l2cap_recv(conn, buf);
    8782:	4629      	mov	r1, r5
    8784:	4620      	mov	r0, r4
}
    8786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    878a:	f000 bcf1 	b.w	9170 <bt_l2cap_recv>
    878e:	bf00      	nop
    8790:	00025880 	.word	0x00025880
    8794:	00025888 	.word	0x00025888
    8798:	00027529 	.word	0x00027529
    879c:	00027546 	.word	0x00027546
    87a0:	00027564 	.word	0x00027564
    87a4:	00027578 	.word	0x00027578
    87a8:	000275bd 	.word	0x000275bd
    87ac:	0002759f 	.word	0x0002759f

000087b0 <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    87b0:	7a83      	ldrb	r3, [r0, #10]
    87b2:	2b04      	cmp	r3, #4
{
    87b4:	b510      	push	{r4, lr}
    87b6:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    87b8:	d013      	beq.n	87e2 <bt_conn_send_cb+0x32>
		BT_ERR("not connected!");
    87ba:	2301      	movs	r3, #1
    87bc:	f04f 0100 	mov.w	r1, #0
    87c0:	4a0b      	ldr	r2, [pc, #44]	; (87f0 <bt_conn_send_cb+0x40>)
    87c2:	480c      	ldr	r0, [pc, #48]	; (87f4 <bt_conn_send_cb+0x44>)
    87c4:	f363 0107 	bfi	r1, r3, #0, #8
    87c8:	4b0b      	ldr	r3, [pc, #44]	; (87f8 <bt_conn_send_cb+0x48>)
    87ca:	1a9b      	subs	r3, r3, r2
    87cc:	08db      	lsrs	r3, r3, #3
    87ce:	f363 118f 	bfi	r1, r3, #6, #10
    87d2:	f018 fa17 	bl	20c04 <log_0>
		net_buf_unref(buf);
    87d6:	4620      	mov	r0, r4
    87d8:	f014 ffc6 	bl	1d768 <net_buf_unref>
		return -ENOTCONN;
    87dc:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    87e0:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    87e2:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    87e4:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    87e6:	f01c fa60 	bl	24caa <net_buf_put>
	return 0;
    87ea:	2000      	movs	r0, #0
    87ec:	e7f8      	b.n	87e0 <bt_conn_send_cb+0x30>
    87ee:	bf00      	nop
    87f0:	00025880 	.word	0x00025880
    87f4:	000275d9 	.word	0x000275d9
    87f8:	00025888 	.word	0x00025888

000087fc <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    87fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
Z_GENLIST_PREPEND(slist, snode)
    8800:	4d0d      	ldr	r5, [pc, #52]	; (8838 <bt_conn_notify_tx+0x3c>)
    8802:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    8804:	f100 071c 	add.w	r7, r0, #28
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    8808:	f04f 0800 	mov.w	r8, #0
    880c:	2100      	movs	r1, #0
    880e:	4638      	mov	r0, r7
    8810:	f01c fc3d 	bl	2508e <z_impl_k_queue_get>
    8814:	4604      	mov	r4, r0
    8816:	b908      	cbnz	r0, 881c <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    8818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    881c:	6863      	ldr	r3, [r4, #4]
    881e:	b10b      	cbz	r3, 8824 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    8820:	4630      	mov	r0, r6
    8822:	4798      	blx	r3
    8824:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    8826:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    8828:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    882a:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    882e:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    8830:	2b00      	cmp	r3, #0
    8832:	d1eb      	bne.n	880c <bt_conn_notify_tx+0x10>
	list->tail = node;
    8834:	606c      	str	r4, [r5, #4]
    8836:	e7e7      	b.n	8808 <bt_conn_notify_tx+0xc>
    8838:	20000990 	.word	0x20000990

0000883c <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8840:	4605      	mov	r5, r0
    8842:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    8844:	4847      	ldr	r0, [pc, #284]	; (8964 <send_frag+0x128>)
    8846:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    884a:	4698      	mov	r8, r3
    884c:	4614      	mov	r4, r2
    884e:	f016 f971 	bl	1eb34 <z_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    8852:	4b45      	ldr	r3, [pc, #276]	; (8968 <send_frag+0x12c>)
    8854:	f103 0044 	add.w	r0, r3, #68	; 0x44
    8858:	f019 fd56 	bl	22308 <atomic_get>
    885c:	b130      	cbz	r0, 886c <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    885e:	7a9a      	ldrb	r2, [r3, #10]
    8860:	3a04      	subs	r2, #4
    8862:	2a01      	cmp	r2, #1
    8864:	d802      	bhi.n	886c <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    8866:	4618      	mov	r0, r3
    8868:	f7ff ffc8 	bl	87fc <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    886c:	7aa9      	ldrb	r1, [r5, #10]
    886e:	2904      	cmp	r1, #4
    8870:	d15b      	bne.n	892a <send_frag+0xee>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    8872:	f107 0008 	add.w	r0, r7, #8
    8876:	f01c fa70 	bl	24d5a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    887a:	89bb      	ldrh	r3, [r7, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    887c:	882a      	ldrh	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    887e:	4e3b      	ldr	r6, [pc, #236]	; (896c <send_frag+0x130>)
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8880:	3b04      	subs	r3, #4
    8882:	8043      	strh	r3, [r0, #2]
    8884:	6871      	ldr	r1, [r6, #4]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8886:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    888a:	2302      	movs	r3, #2
    888c:	6834      	ldr	r4, [r6, #0]
    888e:	8002      	strh	r2, [r0, #0]

	cb = conn_tx(buf)->cb;
    8890:	697a      	ldr	r2, [r7, #20]
    8892:	753b      	strb	r3, [r7, #20]
    8894:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    8896:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8898:	428c      	cmp	r4, r1
	list->tail = node;
    889a:	bf08      	it	eq
    889c:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    889e:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    88a0:	f04f 0320 	mov.w	r3, #32
    88a4:	f3ef 8211 	mrs	r2, BASEPRI
    88a8:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    88ac:	2300      	movs	r3, #0
    88ae:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    88b0:	69ab      	ldr	r3, [r5, #24]
    88b2:	2b00      	cmp	r3, #0
    88b4:	d147      	bne.n	8946 <send_frag+0x10a>
	list->head = node;
    88b6:	e9c5 4405 	strd	r4, r4, [r5, #20]
	__asm__ volatile(
    88ba:	f382 8811 	msr	BASEPRI, r2
    88be:	f3bf 8f6f 	isb	sy
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    88c2:	4638      	mov	r0, r7
    88c4:	f019 fd0d 	bl	222e2 <bt_send>
	if (err) {
    88c8:	4601      	mov	r1, r0
    88ca:	2800      	cmp	r0, #0
    88cc:	d047      	beq.n	895e <send_frag+0x122>
		BT_ERR("Unable to send to driver (err %d)", err);
    88ce:	2301      	movs	r3, #1
    88d0:	f04f 0200 	mov.w	r2, #0
    88d4:	f363 0207 	bfi	r2, r3, #0, #8
    88d8:	4825      	ldr	r0, [pc, #148]	; (8970 <send_frag+0x134>)
    88da:	4b26      	ldr	r3, [pc, #152]	; (8974 <send_frag+0x138>)
    88dc:	1a1b      	subs	r3, r3, r0
    88de:	08db      	lsrs	r3, r3, #3
    88e0:	f363 128f 	bfi	r2, r3, #6, #10
    88e4:	4824      	ldr	r0, [pc, #144]	; (8978 <send_frag+0x13c>)
    88e6:	f018 f99a 	bl	20c1e <log_1>
	__asm__ volatile(
    88ea:	f04f 0320 	mov.w	r3, #32
    88ee:	f3ef 8011 	mrs	r0, BASEPRI
    88f2:	f383 8811 	msr	BASEPRI, r3
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    88f6:	696b      	ldr	r3, [r5, #20]
    88f8:	2200      	movs	r2, #0
    88fa:	b153      	cbz	r3, 8912 <send_frag+0xd6>
    88fc:	429c      	cmp	r4, r3
    88fe:	6819      	ldr	r1, [r3, #0]
    8900:	d12a      	bne.n	8958 <send_frag+0x11c>
Z_GENLIST_REMOVE(slist, snode)
    8902:	bb1a      	cbnz	r2, 894c <send_frag+0x110>
    8904:	69aa      	ldr	r2, [r5, #24]
	list->head = node;
    8906:	6169      	str	r1, [r5, #20]
Z_GENLIST_REMOVE(slist, snode)
    8908:	4294      	cmp	r4, r2
    890a:	d100      	bne.n	890e <send_frag+0xd2>
	list->tail = node;
    890c:	61a9      	str	r1, [r5, #24]
	parent->next = child;
    890e:	2200      	movs	r2, #0
    8910:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    8912:	f380 8811 	msr	BASEPRI, r0
    8916:	f3bf 8f6f 	isb	sy
	tx->cb = NULL;
    891a:	2300      	movs	r3, #0
    891c:	6063      	str	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    891e:	6833      	ldr	r3, [r6, #0]
	parent->next = child;
    8920:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    8922:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    8924:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    8926:	b903      	cbnz	r3, 892a <send_frag+0xee>
	list->tail = node;
    8928:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    892a:	480e      	ldr	r0, [pc, #56]	; (8964 <send_frag+0x128>)
    892c:	f016 f8d8 	bl	1eae0 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    8930:	f1b8 0f00 	cmp.w	r8, #0
    8934:	d004      	beq.n	8940 <send_frag+0x104>
		net_buf_unref(buf);
    8936:	4638      	mov	r0, r7
    8938:	f014 ff16 	bl	1d768 <net_buf_unref>
	}
	return false;
    893c:	f04f 0800 	mov.w	r8, #0
}
    8940:	4640      	mov	r0, r8
    8942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    8946:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8948:	61ac      	str	r4, [r5, #24]
    894a:	e7b6      	b.n	88ba <send_frag+0x7e>
	parent->next = child;
    894c:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    894e:	69a9      	ldr	r1, [r5, #24]
    8950:	428c      	cmp	r4, r1
	list->tail = node;
    8952:	bf08      	it	eq
    8954:	61aa      	streq	r2, [r5, #24]
    8956:	e7da      	b.n	890e <send_frag+0xd2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8958:	461a      	mov	r2, r3
    895a:	460b      	mov	r3, r1
    895c:	e7cd      	b.n	88fa <send_frag+0xbe>
	return true;
    895e:	f04f 0801 	mov.w	r8, #1
    8962:	e7ed      	b.n	8940 <send_frag+0x104>
    8964:	20006c14 	.word	0x20006c14
    8968:	200008f8 	.word	0x200008f8
    896c:	20000990 	.word	0x20000990
    8970:	00025880 	.word	0x00025880
    8974:	00025888 	.word	0x00025888
    8978:	00027387 	.word	0x00027387

0000897c <bt_conn_prepare_events>:
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    897c:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    897e:	4b1f      	ldr	r3, [pc, #124]	; (89fc <bt_conn_prepare_events+0x80>)
    8980:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8982:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    8984:	609a      	str	r2, [r3, #8]
{
    8986:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8988:	f016 fb70 	bl	1f06c <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    898c:	4b1c      	ldr	r3, [pc, #112]	; (8a00 <bt_conn_prepare_events+0x84>)
    898e:	f103 0044 	add.w	r0, r3, #68	; 0x44
    8992:	f019 fcb9 	bl	22308 <atomic_get>
    8996:	4619      	mov	r1, r3
    8998:	b908      	cbnz	r0, 899e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    899a:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    899c:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    899e:	7a9a      	ldrb	r2, [r3, #10]
    89a0:	b99a      	cbnz	r2, 89ca <bt_conn_prepare_events+0x4e>
    89a2:	f3bf 8f5b 	dmb	ish
    89a6:	1d1a      	adds	r2, r3, #4
    89a8:	e852 0f00 	ldrex	r0, [r2]
    89ac:	f020 0540 	bic.w	r5, r0, #64	; 0x40
    89b0:	e842 5c00 	strex	ip, r5, [r2]
    89b4:	f1bc 0f00 	cmp.w	ip, #0
    89b8:	d1f6      	bne.n	89a8 <bt_conn_prepare_events+0x2c>
    89ba:	f3bf 8f5b 	dmb	ish
    89be:	0642      	lsls	r2, r0, #25
    89c0:	d503      	bpl.n	89ca <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    89c2:	4618      	mov	r0, r3
    89c4:	f019 fccb 	bl	2235e <conn_cleanup>
    89c8:	e7e7      	b.n	899a <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    89ca:	7a8d      	ldrb	r5, [r1, #10]
    89cc:	2d04      	cmp	r5, #4
    89ce:	d1e4      	bne.n	899a <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    89d0:	4b0c      	ldr	r3, [pc, #48]	; (8a04 <bt_conn_prepare_events+0x88>)
    89d2:	2200      	movs	r2, #0
    89d4:	4629      	mov	r1, r5
    89d6:	f104 0014 	add.w	r0, r4, #20
    89da:	f016 fb47 	bl	1f06c <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    89de:	2301      	movs	r3, #1
    89e0:	f884 3020 	strb.w	r3, [r4, #32]
		k_poll_event_init(&events[ev_count],
    89e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    89e8:	4b07      	ldr	r3, [pc, #28]	; (8a08 <bt_conn_prepare_events+0x8c>)
    89ea:	2200      	movs	r2, #0
    89ec:	4629      	mov	r1, r5
    89ee:	f016 fb3d 	bl	1f06c <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    89f2:	2302      	movs	r3, #2
    89f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    89f8:	2003      	movs	r0, #3
	return ev_count;
    89fa:	e7cf      	b.n	899c <bt_conn_prepare_events+0x20>
    89fc:	20006e64 	.word	0x20006e64
    8a00:	200008f8 	.word	0x200008f8
    8a04:	20000914 	.word	0x20000914
    8a08:	20000924 	.word	0x20000924

00008a0c <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    8a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    8a0e:	4c15      	ldr	r4, [pc, #84]	; (8a64 <bt_conn_add_le+0x58>)
    8a10:	f104 0644 	add.w	r6, r4, #68	; 0x44
{
    8a14:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    8a16:	4630      	mov	r0, r6
    8a18:	f019 fc76 	bl	22308 <atomic_get>
    8a1c:	4605      	mov	r5, r0
    8a1e:	b108      	cbz	r0, 8a24 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    8a20:	2000      	movs	r0, #0
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);

	return conn;
}
    8a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)memset(conn, 0, sizeof(*conn));
    8a24:	4601      	mov	r1, r0
    8a26:	2298      	movs	r2, #152	; 0x98
    8a28:	4620      	mov	r0, r4
    8a2a:	f019 fa56 	bl	21eda <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8a2e:	f3bf 8f5b 	dmb	ish
    8a32:	2301      	movs	r3, #1
    8a34:	e856 2f00 	ldrex	r2, [r6]
    8a38:	e846 3100 	strex	r1, r3, [r6]
    8a3c:	2900      	cmp	r1, #0
    8a3e:	d1f9      	bne.n	8a34 <bt_conn_add_le+0x28>
    8a40:	f3bf 8f5b 	dmb	ish
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8a44:	2207      	movs	r2, #7
    8a46:	4639      	mov	r1, r7
    8a48:	f104 0048 	add.w	r0, r4, #72	; 0x48
    8a4c:	f019 fa1b 	bl	21e86 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8a50:	4b05      	ldr	r3, [pc, #20]	; (8a68 <bt_conn_add_le+0x5c>)
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    8a52:	4906      	ldr	r1, [pc, #24]	; (8a6c <bt_conn_add_le+0x60>)
	conn->type = BT_CONN_TYPE_LE;
    8a54:	70a5      	strb	r5, [r4, #2]
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    8a56:	f104 0078 	add.w	r0, r4, #120	; 0x78
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8a5a:	6623      	str	r3, [r4, #96]	; 0x60
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    8a5c:	f01c fcf2 	bl	25444 <k_delayed_work_init>
			conn = &conns[i];
    8a60:	4620      	mov	r0, r4
	return conn;
    8a62:	e7de      	b.n	8a22 <bt_conn_add_le+0x16>
    8a64:	200008f8 	.word	0x200008f8
    8a68:	00280018 	.word	0x00280018
    8a6c:	00008cf5 	.word	0x00008cf5

00008a70 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    8a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    8a72:	7a85      	ldrb	r5, [r0, #10]
    8a74:	428d      	cmp	r5, r1
{
    8a76:	4604      	mov	r4, r0
    8a78:	460e      	mov	r6, r1
	if (conn->state == state) {
    8a7a:	d10f      	bne.n	8a9c <bt_conn_set_state+0x2c>
		BT_WARN("no transition");
    8a7c:	2302      	movs	r3, #2
    8a7e:	f04f 0100 	mov.w	r1, #0
    8a82:	f363 0107 	bfi	r1, r3, #0, #8
    8a86:	4a52      	ldr	r2, [pc, #328]	; (8bd0 <bt_conn_set_state+0x160>)
    8a88:	4b52      	ldr	r3, [pc, #328]	; (8bd4 <bt_conn_set_state+0x164>)
    8a8a:	4853      	ldr	r0, [pc, #332]	; (8bd8 <bt_conn_set_state+0x168>)
    8a8c:	1a9b      	subs	r3, r3, r2
    8a8e:	08db      	lsrs	r3, r3, #3
    8a90:	f363 118f 	bfi	r1, r3, #6, #10
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    8a94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("no transition");
    8a98:	f018 b8b4 	b.w	20c04 <log_0>
	conn->state = state;
    8a9c:	72a1      	strb	r1, [r4, #10]
	switch (old_state) {
    8a9e:	b915      	cbnz	r5, 8aa6 <bt_conn_set_state+0x36>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    8aa0:	3044      	adds	r0, #68	; 0x44
    8aa2:	f019 fc4f 	bl	22344 <atomic_inc>
	switch (conn->state) {
    8aa6:	7aa3      	ldrb	r3, [r4, #10]
    8aa8:	2b05      	cmp	r3, #5
    8aaa:	d87f      	bhi.n	8bac <bt_conn_set_state+0x13c>
    8aac:	e8df f003 	tbb	[pc, r3]
    8ab0:	7d7d7d1d 	.word	0x7d7d7d1d
    8ab4:	7d03      	.short	0x7d03
		if (conn->type == BT_CONN_TYPE_SCO) {
    8ab6:	78a3      	ldrb	r3, [r4, #2]
    8ab8:	2b02      	cmp	r3, #2
    8aba:	d076      	beq.n	8baa <bt_conn_set_state+0x13a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    8abc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8ac0:	f01c faa3 	bl	2500a <z_impl_k_queue_init>
    8ac4:	f104 001c 	add.w	r0, r4, #28
    8ac8:	f01c fa9f 	bl	2500a <z_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    8acc:	2100      	movs	r1, #0
    8ace:	4843      	ldr	r0, [pc, #268]	; (8bdc <bt_conn_set_state+0x16c>)
    8ad0:	f016 fb74 	bl	1f1bc <z_impl_k_poll_signal_raise>
	list->head = NULL;
    8ad4:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    8ad6:	4620      	mov	r0, r4
	list->tail = NULL;
    8ad8:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
    8adc:	f000 fa80 	bl	8fe0 <bt_l2cap_connected>
		notify_connected(conn);
    8ae0:	4620      	mov	r0, r4
}
    8ae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    8ae6:	f7ff bd3f 	b.w	8568 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8aea:	78a3      	ldrb	r3, [r4, #2]
    8aec:	2b02      	cmp	r3, #2
    8aee:	d105      	bne.n	8afc <bt_conn_set_state+0x8c>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    8af0:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    8af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    8af8:	f019 bc17 	b.w	2232a <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    8afc:	1f2b      	subs	r3, r5, #4
    8afe:	2b01      	cmp	r3, #1
    8b00:	d845      	bhi.n	8b8e <bt_conn_set_state+0x11e>
			bt_l2cap_disconnected(conn);
    8b02:	4620      	mov	r0, r4
    8b04:	f019 fcfb 	bl	224fe <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    8b08:	4b35      	ldr	r3, [pc, #212]	; (8be0 <bt_conn_set_state+0x170>)
    8b0a:	681d      	ldr	r5, [r3, #0]
    8b0c:	b9fd      	cbnz	r5, 8b4e <bt_conn_set_state+0xde>
Z_GENLIST_PREPEND(slist, snode)
    8b0e:	4e35      	ldr	r6, [pc, #212]	; (8be4 <bt_conn_set_state+0x174>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8b10:	4f35      	ldr	r7, [pc, #212]	; (8be8 <bt_conn_set_state+0x178>)
	__asm__ volatile(
    8b12:	f04f 0320 	mov.w	r3, #32
    8b16:	f3ef 8111 	mrs	r1, BASEPRI
    8b1a:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(slist)
    8b1e:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    8b20:	b12b      	cbz	r3, 8b2e <bt_conn_set_state+0xbe>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8b22:	69a0      	ldr	r0, [r4, #24]
    8b24:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    8b26:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8b28:	4283      	cmp	r3, r0
	list->tail = node;
    8b2a:	bf08      	it	eq
    8b2c:	61a2      	streq	r2, [r4, #24]
	__asm__ volatile(
    8b2e:	f381 8811 	msr	BASEPRI, r1
    8b32:	f3bf 8f6f 	isb	sy
		if (!node) {
    8b36:	b18b      	cbz	r3, 8b5c <bt_conn_set_state+0xec>
Z_GENLIST_PREPEND(slist, snode)
    8b38:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    8b3a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    8b3c:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    8b3e:	605d      	str	r5, [r3, #4]
	list->head = node;
    8b40:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    8b42:	b902      	cbnz	r2, 8b46 <bt_conn_set_state+0xd6>
	list->tail = node;
    8b44:	6073      	str	r3, [r6, #4]
    8b46:	4638      	mov	r0, r7
    8b48:	f015 ffca 	bl	1eae0 <z_impl_k_sem_give>
    8b4c:	e7e1      	b.n	8b12 <bt_conn_set_state+0xa2>
		if (cb->disconnected) {
    8b4e:	686b      	ldr	r3, [r5, #4]
    8b50:	b113      	cbz	r3, 8b58 <bt_conn_set_state+0xe8>
			cb->disconnected(conn, conn->err);
    8b52:	7a61      	ldrb	r1, [r4, #9]
    8b54:	4620      	mov	r0, r4
    8b56:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    8b58:	692d      	ldr	r5, [r5, #16]
    8b5a:	e7d7      	b.n	8b0c <bt_conn_set_state+0x9c>
			if (conn->type == BT_CONN_TYPE_LE) {
    8b5c:	78a3      	ldrb	r3, [r4, #2]
    8b5e:	b91b      	cbnz	r3, 8b68 <bt_conn_set_state+0xf8>
				k_delayed_work_cancel(&conn->le.update_work);
    8b60:	f104 0078 	add.w	r0, r4, #120	; 0x78
    8b64:	f01c fc76 	bl	25454 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8b68:	f3bf 8f5b 	dmb	ish
    8b6c:	3404      	adds	r4, #4
    8b6e:	e854 3f00 	ldrex	r3, [r4]
    8b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8b76:	e844 3200 	strex	r2, r3, [r4]
    8b7a:	2a00      	cmp	r2, #0
    8b7c:	d1f7      	bne.n	8b6e <bt_conn_set_state+0xfe>
    8b7e:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    8b82:	2100      	movs	r1, #0
    8b84:	4815      	ldr	r0, [pc, #84]	; (8bdc <bt_conn_set_state+0x16c>)
}
    8b86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8b8a:	f016 bb17 	b.w	1f1bc <z_impl_k_poll_signal_raise>
		} else if (old_state == BT_CONN_CONNECT) {
    8b8e:	2d03      	cmp	r5, #3
    8b90:	d103      	bne.n	8b9a <bt_conn_set_state+0x12a>
			notify_connected(conn);
    8b92:	4620      	mov	r0, r4
    8b94:	f7ff fce8 	bl	8568 <notify_connected>
    8b98:	e7aa      	b.n	8af0 <bt_conn_set_state+0x80>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    8b9a:	2d01      	cmp	r5, #1
    8b9c:	d103      	bne.n	8ba6 <bt_conn_set_state+0x136>
			if (conn->err) {
    8b9e:	7a63      	ldrb	r3, [r4, #9]
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d0a5      	beq.n	8af0 <bt_conn_set_state+0x80>
    8ba4:	e7f5      	b.n	8b92 <bt_conn_set_state+0x122>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    8ba6:	2d02      	cmp	r5, #2
    8ba8:	d0f9      	beq.n	8b9e <bt_conn_set_state+0x12e>
}
    8baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		BT_WARN("no valid (%u) state was set", state);
    8bac:	2302      	movs	r3, #2
    8bae:	f04f 0200 	mov.w	r2, #0
    8bb2:	f363 0207 	bfi	r2, r3, #0, #8
    8bb6:	4906      	ldr	r1, [pc, #24]	; (8bd0 <bt_conn_set_state+0x160>)
    8bb8:	4b06      	ldr	r3, [pc, #24]	; (8bd4 <bt_conn_set_state+0x164>)
    8bba:	480c      	ldr	r0, [pc, #48]	; (8bec <bt_conn_set_state+0x17c>)
    8bbc:	1a5b      	subs	r3, r3, r1
    8bbe:	08db      	lsrs	r3, r3, #3
    8bc0:	f363 128f 	bfi	r2, r3, #6, #10
    8bc4:	4631      	mov	r1, r6
}
    8bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("no valid (%u) state was set", state);
    8bca:	f018 b828 	b.w	20c1e <log_1>
    8bce:	bf00      	nop
    8bd0:	00025880 	.word	0x00025880
    8bd4:	00025888 	.word	0x00025888
    8bd8:	000275e8 	.word	0x000275e8
    8bdc:	20006e64 	.word	0x20006e64
    8be0:	200008dc 	.word	0x200008dc
    8be4:	20000990 	.word	0x20000990
    8be8:	20006c14 	.word	0x20006c14
    8bec:	000275f6 	.word	0x000275f6

00008bf0 <bt_conn_lookup_handle>:
{
    8bf0:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    8bf2:	4c0b      	ldr	r4, [pc, #44]	; (8c20 <bt_conn_lookup_handle+0x30>)
{
    8bf4:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    8bf6:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8bfa:	f019 fb85 	bl	22308 <atomic_get>
    8bfe:	b158      	cbz	r0, 8c18 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    8c00:	7aa3      	ldrb	r3, [r4, #10]
    8c02:	3b04      	subs	r3, #4
    8c04:	2b01      	cmp	r3, #1
    8c06:	d808      	bhi.n	8c1a <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    8c08:	8823      	ldrh	r3, [r4, #0]
    8c0a:	4293      	cmp	r3, r2
    8c0c:	d105      	bne.n	8c1a <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    8c0e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8c12:	f019 fb97 	bl	22344 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    8c16:	4620      	mov	r0, r4
}
    8c18:	bd10      	pop	{r4, pc}
	return NULL;
    8c1a:	2000      	movs	r0, #0
    8c1c:	e7fc      	b.n	8c18 <bt_conn_lookup_handle+0x28>
    8c1e:	bf00      	nop
    8c20:	200008f8 	.word	0x200008f8

00008c24 <bt_conn_lookup_addr_le>:
{
    8c24:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    8c26:	4c0d      	ldr	r4, [pc, #52]	; (8c5c <bt_conn_lookup_addr_le+0x38>)
{
    8c28:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    8c2a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8c2e:	f019 fb6b 	bl	22308 <atomic_get>
    8c32:	b908      	cbnz	r0, 8c38 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    8c34:	2000      	movs	r0, #0
}
    8c36:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    8c38:	78a2      	ldrb	r2, [r4, #2]
    8c3a:	2a00      	cmp	r2, #0
    8c3c:	d1fa      	bne.n	8c34 <bt_conn_lookup_addr_le+0x10>
		if (conns[i].id == id &&
    8c3e:	7a22      	ldrb	r2, [r4, #8]
    8c40:	429a      	cmp	r2, r3
    8c42:	d1f7      	bne.n	8c34 <bt_conn_lookup_addr_le+0x10>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    8c44:	4620      	mov	r0, r4
    8c46:	f019 fba2 	bl	2238e <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    8c4a:	2800      	cmp	r0, #0
    8c4c:	d1f2      	bne.n	8c34 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    8c4e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8c52:	f019 fb77 	bl	22344 <atomic_inc>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    8c56:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    8c58:	e7ed      	b.n	8c36 <bt_conn_lookup_addr_le+0x12>
    8c5a:	bf00      	nop
    8c5c:	200008f8 	.word	0x200008f8

00008c60 <bt_conn_lookup_state_le>:
{
    8c60:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    8c62:	4c0e      	ldr	r4, [pc, #56]	; (8c9c <bt_conn_lookup_state_le+0x3c>)
{
    8c64:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    8c66:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    8c6a:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    8c6c:	f019 fb4c 	bl	22308 <atomic_get>
    8c70:	b908      	cbnz	r0, 8c76 <bt_conn_lookup_state_le+0x16>
	return NULL;
    8c72:	2000      	movs	r0, #0
}
    8c74:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    8c76:	78a2      	ldrb	r2, [r4, #2]
    8c78:	2a00      	cmp	r2, #0
    8c7a:	d1fa      	bne.n	8c72 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    8c7c:	b93b      	cbnz	r3, 8c8e <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    8c7e:	7aa3      	ldrb	r3, [r4, #10]
    8c80:	42ab      	cmp	r3, r5
    8c82:	d1f6      	bne.n	8c72 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    8c84:	4806      	ldr	r0, [pc, #24]	; (8ca0 <bt_conn_lookup_state_le+0x40>)
    8c86:	f019 fb5d 	bl	22344 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    8c8a:	4804      	ldr	r0, [pc, #16]	; (8c9c <bt_conn_lookup_state_le+0x3c>)
    8c8c:	e7f2      	b.n	8c74 <bt_conn_lookup_state_le+0x14>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    8c8e:	4619      	mov	r1, r3
    8c90:	4620      	mov	r0, r4
    8c92:	f019 fb7c 	bl	2238e <bt_conn_addr_le_cmp>
    8c96:	2800      	cmp	r0, #0
    8c98:	d0f1      	beq.n	8c7e <bt_conn_lookup_state_le+0x1e>
    8c9a:	e7ea      	b.n	8c72 <bt_conn_lookup_state_le+0x12>
    8c9c:	200008f8 	.word	0x200008f8
    8ca0:	2000093c 	.word	0x2000093c

00008ca4 <send_conn_le_param_update>:
{
    8ca4:	b538      	push	{r3, r4, r5, lr}
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8ca6:	4b12      	ldr	r3, [pc, #72]	; (8cf0 <send_conn_le_param_update+0x4c>)
    8ca8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
{
    8cac:	460d      	mov	r5, r1
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8cae:	0799      	lsls	r1, r3, #30
{
    8cb0:	4604      	mov	r4, r0
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8cb2:	d407      	bmi.n	8cc4 <send_conn_le_param_update+0x20>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    8cb4:	78e3      	ldrb	r3, [r4, #3]
    8cb6:	b173      	cbz	r3, 8cd6 <send_conn_le_param_update+0x32>
	return bt_l2cap_update_conn_param(conn, param);
    8cb8:	4629      	mov	r1, r5
    8cba:	4620      	mov	r0, r4
}
    8cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    8cc0:	f000 ba98 	b.w	91f4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8cc4:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    8cc8:	079a      	lsls	r2, r3, #30
    8cca:	d5f3      	bpl.n	8cb4 <send_conn_le_param_update+0x10>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8ccc:	3004      	adds	r0, #4
    8cce:	f019 fb1b 	bl	22308 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    8cd2:	0543      	lsls	r3, r0, #21
    8cd4:	d4ee      	bmi.n	8cb4 <send_conn_le_param_update+0x10>
		rc = bt_conn_le_conn_update(conn, param);
    8cd6:	4629      	mov	r1, r5
    8cd8:	4620      	mov	r0, r4
    8cda:	f019 fbb6 	bl	2244a <bt_conn_le_conn_update>
		if (rc == 0) {
    8cde:	b928      	cbnz	r0, 8cec <send_conn_le_param_update+0x48>
			conn->le.pending_latency = param->latency;
    8ce0:	88ab      	ldrh	r3, [r5, #4]
    8ce2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
			conn->le.pending_timeout = param->timeout;
    8ce6:	88eb      	ldrh	r3, [r5, #6]
    8ce8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
}
    8cec:	bd38      	pop	{r3, r4, r5, pc}
    8cee:	bf00      	nop
    8cf0:	20006b88 	.word	0x20006b88

00008cf4 <conn_le_update_timeout>:
{
    8cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    8cf6:	f1a0 0278 	sub.w	r2, r0, #120	; 0x78
	if (atomic_test_and_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET)) {
    8cfa:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8cfe:	f3bf 8f5b 	dmb	ish
    8d02:	e854 3f00 	ldrex	r3, [r4]
    8d06:	f423 7100 	bic.w	r1, r3, #512	; 0x200
    8d0a:	e844 1c00 	strex	ip, r1, [r4]
    8d0e:	f1bc 0f00 	cmp.w	ip, #0
    8d12:	d1f6      	bne.n	8d02 <conn_le_update_timeout+0xe>
    8d14:	f3bf 8f5b 	dmb	ish
    8d18:	059b      	lsls	r3, r3, #22
    8d1a:	d517      	bpl.n	8d4c <conn_le_update_timeout+0x58>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    8d1c:	f850 3c18 	ldr.w	r3, [r0, #-24]
    8d20:	9300      	str	r3, [sp, #0]
    8d22:	f850 3c10 	ldr.w	r3, [r0, #-16]
    8d26:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    8d28:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    8d2a:	4610      	mov	r0, r2
    8d2c:	f7ff ffba 	bl	8ca4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8d30:	f3bf 8f5b 	dmb	ish
    8d34:	e854 3f00 	ldrex	r3, [r4]
    8d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8d3c:	e844 3200 	strex	r2, r3, [r4]
    8d40:	2a00      	cmp	r2, #0
    8d42:	d1f7      	bne.n	8d34 <conn_le_update_timeout+0x40>
    8d44:	f3bf 8f5b 	dmb	ish
}
    8d48:	b004      	add	sp, #16
    8d4a:	bd10      	pop	{r4, pc}
		param = BT_LE_CONN_PARAM(CONFIG_BT_PERIPHERAL_PREF_MIN_INT,
    8d4c:	4903      	ldr	r1, [pc, #12]	; (8d5c <conn_le_update_timeout+0x68>)
    8d4e:	6808      	ldr	r0, [r1, #0]
    8d50:	6849      	ldr	r1, [r1, #4]
    8d52:	ab02      	add	r3, sp, #8
    8d54:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    8d56:	a902      	add	r1, sp, #8
    8d58:	e7e7      	b.n	8d2a <conn_le_update_timeout+0x36>
    8d5a:	bf00      	nop
    8d5c:	00025a48 	.word	0x00025a48

00008d60 <bt_conn_create_pdu>:

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    8d60:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    8d62:	4b08      	ldr	r3, [pc, #32]	; (8d84 <bt_conn_create_pdu+0x24>)
{
    8d64:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    8d66:	2800      	cmp	r0, #0
    8d68:	bf08      	it	eq
    8d6a:	4618      	moveq	r0, r3
    8d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8d70:	f01b ff28 	bl	24bc4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    8d74:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    8d76:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    8d78:	3008      	adds	r0, #8
    8d7a:	f01b ff42 	bl	24c02 <net_buf_simple_reserve>

	return buf;
}
    8d7e:	4620      	mov	r0, r4
    8d80:	bd38      	pop	{r3, r4, r5, pc}
    8d82:	bf00      	nop
    8d84:	2000790c 	.word	0x2000790c

00008d88 <create_frag.isra.11>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    8d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d8c:	4606      	mov	r6, r0
    8d8e:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    8d90:	4816      	ldr	r0, [pc, #88]	; (8dec <create_frag.isra.11+0x64>)
    8d92:	2100      	movs	r1, #0
    8d94:	f7ff ffe4 	bl	8d60 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    8d98:	7833      	ldrb	r3, [r6, #0]
    8d9a:	2b04      	cmp	r3, #4
	frag = bt_conn_create_pdu(&frag_pool, 0);
    8d9c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    8d9e:	f04f 0600 	mov.w	r6, #0
    8da2:	d005      	beq.n	8db0 <create_frag.isra.11+0x28>
		net_buf_unref(frag);
    8da4:	f014 fce0 	bl	1d768 <net_buf_unref>
		return NULL;
    8da8:	4635      	mov	r5, r6
}
    8daa:	4628      	mov	r0, r5
    8dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    8db0:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8db2:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    8db6:	4e0e      	ldr	r6, [pc, #56]	; (8df0 <create_frag.isra.11+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8db8:	4638      	mov	r0, r7
    8dba:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    8dbe:	f01c f82a 	bl	24e16 <net_buf_simple_tailroom>
    8dc2:	4580      	cmp	r8, r0
    8dc4:	d20c      	bcs.n	8de0 <create_frag.isra.11+0x58>
	return bt_dev.le.mtu;
    8dc6:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    8dca:	f854 1f08 	ldr.w	r1, [r4, #8]!
    8dce:	4632      	mov	r2, r6
    8dd0:	4638      	mov	r0, r7
    8dd2:	f01b ff81 	bl	24cd8 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    8dd6:	4631      	mov	r1, r6
    8dd8:	4620      	mov	r0, r4
    8dda:	f01b ffe4 	bl	24da6 <net_buf_simple_pull>
	return frag;
    8dde:	e7e4      	b.n	8daa <create_frag.isra.11+0x22>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8de0:	4638      	mov	r0, r7
    8de2:	f01c f818 	bl	24e16 <net_buf_simple_tailroom>
    8de6:	b286      	uxth	r6, r0
    8de8:	e7ef      	b.n	8dca <create_frag.isra.11+0x42>
    8dea:	bf00      	nop
    8dec:	2000794c 	.word	0x2000794c
    8df0:	20006b88 	.word	0x20006b88

00008df4 <bt_conn_process_tx>:
{
    8df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    8df6:	7a83      	ldrb	r3, [r0, #10]
{
    8df8:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    8dfa:	b993      	cbnz	r3, 8e22 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8dfc:	f3bf 8f5b 	dmb	ish
    8e00:	1d03      	adds	r3, r0, #4
    8e02:	e853 2f00 	ldrex	r2, [r3]
    8e06:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    8e0a:	e843 1400 	strex	r4, r1, [r3]
    8e0e:	2c00      	cmp	r4, #0
    8e10:	d1f7      	bne.n	8e02 <bt_conn_process_tx+0xe>
    8e12:	f3bf 8f5b 	dmb	ish
    8e16:	0653      	lsls	r3, r2, #25
    8e18:	d503      	bpl.n	8e22 <bt_conn_process_tx+0x2e>
}
    8e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    8e1e:	f019 ba9e 	b.w	2235e <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    8e22:	2100      	movs	r1, #0
    8e24:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    8e28:	f01b fed2 	bl	24bd0 <net_buf_get>
	BT_ASSERT(buf);
    8e2c:	4604      	mov	r4, r0
    8e2e:	b998      	cbnz	r0, 8e58 <bt_conn_process_tx+0x64>
    8e30:	2301      	movs	r3, #1
    8e32:	f04f 0100 	mov.w	r1, #0
    8e36:	4a22      	ldr	r2, [pc, #136]	; (8ec0 <bt_conn_process_tx+0xcc>)
    8e38:	4822      	ldr	r0, [pc, #136]	; (8ec4 <bt_conn_process_tx+0xd0>)
    8e3a:	f363 0107 	bfi	r1, r3, #0, #8
    8e3e:	4b22      	ldr	r3, [pc, #136]	; (8ec8 <bt_conn_process_tx+0xd4>)
    8e40:	1a9b      	subs	r3, r3, r2
    8e42:	08db      	lsrs	r3, r3, #3
    8e44:	f363 118f 	bfi	r1, r3, #6, #10
    8e48:	f017 fedc 	bl	20c04 <log_0>
    8e4c:	4040      	eors	r0, r0
    8e4e:	f380 8811 	msr	BASEPRI, r0
    8e52:	f04f 0004 	mov.w	r0, #4
    8e56:	df02      	svc	2
	return bt_dev.le.mtu;
    8e58:	4e1c      	ldr	r6, [pc, #112]	; (8ecc <bt_conn_process_tx+0xd8>)
	if (buf->len <= conn_mtu(conn)) {
    8e5a:	8981      	ldrh	r1, [r0, #12]
    8e5c:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    8e60:	4291      	cmp	r1, r2
    8e62:	d807      	bhi.n	8e74 <bt_conn_process_tx+0x80>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    8e64:	2300      	movs	r3, #0
    8e66:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    8e68:	4621      	mov	r1, r4
    8e6a:	4628      	mov	r0, r5
    8e6c:	f7ff fce6 	bl	883c <send_frag>
	if (!send_buf(conn, buf)) {
    8e70:	b140      	cbz	r0, 8e84 <bt_conn_process_tx+0x90>
}
    8e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    8e74:	f105 070a 	add.w	r7, r5, #10
    8e78:	4601      	mov	r1, r0
    8e7a:	4638      	mov	r0, r7
    8e7c:	f7ff ff84 	bl	8d88 <create_frag.isra.11>
	if (!frag) {
    8e80:	4601      	mov	r1, r0
    8e82:	b920      	cbnz	r0, 8e8e <bt_conn_process_tx+0x9a>
		net_buf_unref(buf);
    8e84:	4620      	mov	r0, r4
}
    8e86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    8e8a:	f014 bc6d 	b.w	1d768 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    8e8e:	2301      	movs	r3, #1
    8e90:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    8e92:	4628      	mov	r0, r5
    8e94:	f7ff fcd2 	bl	883c <send_frag>
    8e98:	2800      	cmp	r0, #0
    8e9a:	d0f3      	beq.n	8e84 <bt_conn_process_tx+0x90>
	while (buf->len > conn_mtu(conn)) {
    8e9c:	89a2      	ldrh	r2, [r4, #12]
    8e9e:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    8ea2:	429a      	cmp	r2, r3
    8ea4:	d802      	bhi.n	8eac <bt_conn_process_tx+0xb8>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    8ea6:	2300      	movs	r3, #0
    8ea8:	2201      	movs	r2, #1
    8eaa:	e7dd      	b.n	8e68 <bt_conn_process_tx+0x74>
		frag = create_frag(conn, buf);
    8eac:	4621      	mov	r1, r4
    8eae:	4638      	mov	r0, r7
    8eb0:	f7ff ff6a 	bl	8d88 <create_frag.isra.11>
		if (!frag) {
    8eb4:	4601      	mov	r1, r0
    8eb6:	2800      	cmp	r0, #0
    8eb8:	d0e4      	beq.n	8e84 <bt_conn_process_tx+0x90>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    8eba:	2301      	movs	r3, #1
    8ebc:	461a      	mov	r2, r3
    8ebe:	e7e8      	b.n	8e92 <bt_conn_process_tx+0x9e>
    8ec0:	00025880 	.word	0x00025880
    8ec4:	00027357 	.word	0x00027357
    8ec8:	00025888 	.word	0x00025888
    8ecc:	20006b88 	.word	0x20006b88

00008ed0 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    8ed0:	4b03      	ldr	r3, [pc, #12]	; (8ee0 <bt_conn_index+0x10>)
    8ed2:	1ac0      	subs	r0, r0, r3
    8ed4:	4b03      	ldr	r3, [pc, #12]	; (8ee4 <bt_conn_index+0x14>)
    8ed6:	10c0      	asrs	r0, r0, #3
    8ed8:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    8eda:	b2c0      	uxtb	r0, r0
    8edc:	4770      	bx	lr
    8ede:	bf00      	nop
    8ee0:	200008f8 	.word	0x200008f8
    8ee4:	286bca1b 	.word	0x286bca1b

00008ee8 <bt_conn_init>:

int bt_conn_init(void)
{
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    8ee8:	4a0d      	ldr	r2, [pc, #52]	; (8f20 <bt_conn_init+0x38>)
	parent->next = child;
    8eea:	4b0e      	ldr	r3, [pc, #56]	; (8f24 <bt_conn_init+0x3c>)
    8eec:	6850      	ldr	r0, [r2, #4]
    8eee:	6811      	ldr	r1, [r2, #0]
{
    8ef0:	b510      	push	{r4, lr}
    8ef2:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    8ef4:	b188      	cbz	r0, 8f1a <bt_conn_init+0x32>
    8ef6:	2400      	movs	r4, #0
	parent->next = child;
    8ef8:	490b      	ldr	r1, [pc, #44]	; (8f28 <bt_conn_init+0x40>)
    8efa:	6119      	str	r1, [r3, #16]
    8efc:	3108      	adds	r1, #8
    8efe:	609b      	str	r3, [r3, #8]
	return list->tail;
    8f00:	6011      	str	r1, [r2, #0]
    8f02:	b104      	cbz	r4, 8f06 <bt_conn_init+0x1e>
    8f04:	6050      	str	r0, [r2, #4]
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    8f06:	f000 ff29 	bl	9d5c <bt_att_init>

	err = bt_smp_init();
    8f0a:	f001 ff2f 	bl	ad6c <bt_smp_init>
	if (err) {
    8f0e:	4604      	mov	r4, r0
    8f10:	b908      	cbnz	r0, 8f16 <bt_conn_init+0x2e>
		return err;
	}

	bt_l2cap_init();
    8f12:	f000 f9a5 	bl	9260 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    8f16:	4620      	mov	r0, r4
    8f18:	bd10      	pop	{r4, pc}
Z_GENLIST_PREPEND(slist, snode)
    8f1a:	2401      	movs	r4, #1
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    8f1c:	4618      	mov	r0, r3
    8f1e:	e7eb      	b.n	8ef8 <bt_conn_init+0x10>
    8f20:	20000990 	.word	0x20000990
    8f24:	200008e0 	.word	0x200008e0
    8f28:	200008e8 	.word	0x200008e8

00008f2c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    8f2c:	4a0d      	ldr	r2, [pc, #52]	; (8f64 <l2cap_accept+0x38>)
{
    8f2e:	b508      	push	{r3, lr}
		if (l2cap->chan.chan.conn) {
    8f30:	6813      	ldr	r3, [r2, #0]
    8f32:	b923      	cbnz	r3, 8f3e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    8f34:	480c      	ldr	r0, [pc, #48]	; (8f68 <l2cap_accept+0x3c>)
    8f36:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    8f38:	600a      	str	r2, [r1, #0]

		return 0;
    8f3a:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    8f3c:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    8f3e:	2301      	movs	r3, #1
    8f40:	f04f 0200 	mov.w	r2, #0
    8f44:	f363 0207 	bfi	r2, r3, #0, #8
    8f48:	4908      	ldr	r1, [pc, #32]	; (8f6c <l2cap_accept+0x40>)
    8f4a:	4b09      	ldr	r3, [pc, #36]	; (8f70 <l2cap_accept+0x44>)
    8f4c:	1a5b      	subs	r3, r3, r1
    8f4e:	08db      	lsrs	r3, r3, #3
    8f50:	4601      	mov	r1, r0
    8f52:	f363 128f 	bfi	r2, r3, #6, #10
    8f56:	4807      	ldr	r0, [pc, #28]	; (8f74 <l2cap_accept+0x48>)
    8f58:	f017 fe61 	bl	20c1e <log_1>
	return -ENOMEM;
    8f5c:	f06f 000b 	mvn.w	r0, #11
    8f60:	e7ec      	b.n	8f3c <l2cap_accept+0x10>
    8f62:	bf00      	nop
    8f64:	20000998 	.word	0x20000998
    8f68:	20006e80 	.word	0x20006e80
    8f6c:	00025880 	.word	0x00025880
    8f70:	00025900 	.word	0x00025900
    8f74:	0002765c 	.word	0x0002765c

00008f78 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    8f78:	2300      	movs	r3, #0
    8f7a:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    8f7c:	4b05      	ldr	r3, [pc, #20]	; (8f94 <bt_l2cap_le_fixed_chan_register+0x1c>)
    8f7e:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    8f80:	f100 0208 	add.w	r2, r0, #8
    8f84:	b911      	cbnz	r1, 8f8c <bt_l2cap_le_fixed_chan_register+0x14>
	list->head = node;
    8f86:	e9c3 2200 	strd	r2, r2, [r3]
    8f8a:	4770      	bx	lr
	parent->next = child;
    8f8c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    8f8e:	605a      	str	r2, [r3, #4]
}
    8f90:	4770      	bx	lr
    8f92:	bf00      	nop
    8f94:	20000a24 	.word	0x20000a24

00008f98 <l2cap_rtx_timeout>:
{
    8f98:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    8f9a:	f04f 0200 	mov.w	r2, #0
    8f9e:	2301      	movs	r3, #1
    8fa0:	f363 0207 	bfi	r2, r3, #0, #8
    8fa4:	490b      	ldr	r1, [pc, #44]	; (8fd4 <l2cap_rtx_timeout+0x3c>)
    8fa6:	4b0c      	ldr	r3, [pc, #48]	; (8fd8 <l2cap_rtx_timeout+0x40>)
    8fa8:	1a5b      	subs	r3, r3, r1
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    8faa:	f1a0 0410 	sub.w	r4, r0, #16
    8fae:	08db      	lsrs	r3, r3, #3
{
    8fb0:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    8fb2:	f363 128f 	bfi	r2, r3, #6, #10
    8fb6:	4621      	mov	r1, r4
    8fb8:	4808      	ldr	r0, [pc, #32]	; (8fdc <l2cap_rtx_timeout+0x44>)
    8fba:	f017 fe30 	bl	20c1e <log_1>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    8fbe:	f855 0c10 	ldr.w	r0, [r5, #-16]
    8fc2:	4621      	mov	r1, r4
    8fc4:	f019 fa6a 	bl	2249c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    8fc8:	4620      	mov	r0, r4
}
    8fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    8fce:	f019 ba85 	b.w	224dc <bt_l2cap_chan_del>
    8fd2:	bf00      	nop
    8fd4:	00025880 	.word	0x00025880
    8fd8:	00025900 	.word	0x00025900
    8fdc:	0002771d 	.word	0x0002771d

00008fe0 <bt_l2cap_connected>:
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8fe0:	4b1a      	ldr	r3, [pc, #104]	; (904c <bt_l2cap_connected+0x6c>)
{
    8fe2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8fe6:	681c      	ldr	r4, [r3, #0]
{
    8fe8:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8fea:	b12c      	cbz	r4, 8ff8 <bt_l2cap_connected+0x18>
	parent->next = child;
    8fec:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    8fee:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9050 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8ff2:	3c08      	subs	r4, #8
    8ff4:	46b9      	mov	r9, r7
    8ff6:	b914      	cbnz	r4, 8ffe <bt_l2cap_connected+0x1e>
}
    8ff8:	b003      	add	sp, #12
    8ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    8ffe:	6863      	ldr	r3, [r4, #4]
    9000:	a901      	add	r1, sp, #4
    9002:	4630      	mov	r0, r6
    9004:	4798      	blx	r3
    9006:	2800      	cmp	r0, #0
    9008:	db18      	blt.n	903c <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    900a:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    900c:	8823      	ldrh	r3, [r4, #0]
    900e:	862b      	strh	r3, [r5, #48]	; 0x30
		ch->tx.cid = fchan->cid;
    9010:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    9014:	4641      	mov	r1, r8
    9016:	f105 0010 	add.w	r0, r5, #16
    901a:	f01c fa13 	bl	25444 <k_delayed_work_init>
    901e:	60af      	str	r7, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    9020:	6c32      	ldr	r2, [r6, #64]	; 0x40
	sys_slist_append(&conn->channels, &chan->node);
    9022:	f105 0308 	add.w	r3, r5, #8
    9026:	b972      	cbnz	r2, 9046 <bt_l2cap_connected+0x66>
	list->head = node;
    9028:	e9c6 330f 	strd	r3, r3, [r6, #60]	; 0x3c
		if (chan->ops->connected) {
    902c:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    902e:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    9030:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    9032:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    9036:	681b      	ldr	r3, [r3, #0]
    9038:	b103      	cbz	r3, 903c <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    903a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    903c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    903e:	2c00      	cmp	r4, #0
    9040:	d0da      	beq.n	8ff8 <bt_l2cap_connected+0x18>
    9042:	3c08      	subs	r4, #8
    9044:	e7d7      	b.n	8ff6 <bt_l2cap_connected+0x16>
	parent->next = child;
    9046:	6013      	str	r3, [r2, #0]
	list->tail = node;
    9048:	6433      	str	r3, [r6, #64]	; 0x40
    904a:	e7ef      	b.n	902c <bt_l2cap_connected+0x4c>
    904c:	20000a24 	.word	0x20000a24
    9050:	00008f99 	.word	0x00008f99

00009054 <l2cap_recv>:
{
    9054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    9056:	898b      	ldrh	r3, [r1, #12]
    9058:	2b03      	cmp	r3, #3
{
    905a:	4605      	mov	r5, r0
    905c:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    905e:	d80e      	bhi.n	907e <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
    9060:	2301      	movs	r3, #1
    9062:	f04f 0100 	mov.w	r1, #0
    9066:	f363 0107 	bfi	r1, r3, #0, #8
    906a:	4a3a      	ldr	r2, [pc, #232]	; (9154 <l2cap_recv+0x100>)
    906c:	4b3a      	ldr	r3, [pc, #232]	; (9158 <l2cap_recv+0x104>)
    906e:	483b      	ldr	r0, [pc, #236]	; (915c <l2cap_recv+0x108>)
    9070:	1a9b      	subs	r3, r3, r2
    9072:	08db      	lsrs	r3, r3, #3
    9074:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid ident value in L2CAP PDU");
    9078:	f017 fdc4 	bl	20c04 <log_0>
		return 0;
    907c:	e017      	b.n	90ae <l2cap_recv+0x5a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    907e:	2104      	movs	r1, #4
    9080:	f106 0008 	add.w	r0, r6, #8
    9084:	f01b fe97 	bl	24db6 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    9088:	89b1      	ldrh	r1, [r6, #12]
	len = sys_le16_to_cpu(hdr->len);
    908a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    908c:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    908e:	4604      	mov	r4, r0
	if (buf->len != len) {
    9090:	d00f      	beq.n	90b2 <l2cap_recv+0x5e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    9092:	2001      	movs	r0, #1
    9094:	f04f 0300 	mov.w	r3, #0
    9098:	f360 0307 	bfi	r3, r0, #0, #8
    909c:	4c2d      	ldr	r4, [pc, #180]	; (9154 <l2cap_recv+0x100>)
    909e:	482e      	ldr	r0, [pc, #184]	; (9158 <l2cap_recv+0x104>)
    90a0:	1b00      	subs	r0, r0, r4
    90a2:	08c0      	lsrs	r0, r0, #3
    90a4:	f360 138f 	bfi	r3, r0, #6, #10
    90a8:	482d      	ldr	r0, [pc, #180]	; (9160 <l2cap_recv+0x10c>)
    90aa:	f017 fdcc 	bl	20c46 <log_2>
}
    90ae:	2000      	movs	r0, #0
    90b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    90b2:	7843      	ldrb	r3, [r0, #1]
    90b4:	b963      	cbnz	r3, 90d0 <l2cap_recv+0x7c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    90b6:	2301      	movs	r3, #1
    90b8:	f04f 0100 	mov.w	r1, #0
    90bc:	f363 0107 	bfi	r1, r3, #0, #8
    90c0:	4a24      	ldr	r2, [pc, #144]	; (9154 <l2cap_recv+0x100>)
    90c2:	4b25      	ldr	r3, [pc, #148]	; (9158 <l2cap_recv+0x104>)
    90c4:	4827      	ldr	r0, [pc, #156]	; (9164 <l2cap_recv+0x110>)
    90c6:	1a9b      	subs	r3, r3, r2
    90c8:	08db      	lsrs	r3, r3, #3
    90ca:	f363 118f 	bfi	r1, r3, #6, #10
    90ce:	e7d3      	b.n	9078 <l2cap_recv+0x24>
	switch (hdr->code) {
    90d0:	7801      	ldrb	r1, [r0, #0]
    90d2:	2901      	cmp	r1, #1
    90d4:	d0eb      	beq.n	90ae <l2cap_recv+0x5a>
    90d6:	2913      	cmp	r1, #19
    90d8:	d10e      	bne.n	90f8 <l2cap_recv+0xa4>
	if (buf->len < sizeof(*rsp)) {
    90da:	2a01      	cmp	r2, #1
    90dc:	d8e7      	bhi.n	90ae <l2cap_recv+0x5a>
		BT_ERR("Too small LE conn param rsp");
    90de:	2301      	movs	r3, #1
    90e0:	f04f 0100 	mov.w	r1, #0
    90e4:	f363 0107 	bfi	r1, r3, #0, #8
    90e8:	4a1a      	ldr	r2, [pc, #104]	; (9154 <l2cap_recv+0x100>)
    90ea:	4b1b      	ldr	r3, [pc, #108]	; (9158 <l2cap_recv+0x104>)
    90ec:	481e      	ldr	r0, [pc, #120]	; (9168 <l2cap_recv+0x114>)
    90ee:	1a9b      	subs	r3, r3, r2
    90f0:	08db      	lsrs	r3, r3, #3
    90f2:	f363 118f 	bfi	r1, r3, #6, #10
    90f6:	e7bf      	b.n	9078 <l2cap_recv+0x24>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    90f8:	2302      	movs	r3, #2
    90fa:	f04f 0200 	mov.w	r2, #0
    90fe:	f363 0207 	bfi	r2, r3, #0, #8
    9102:	4814      	ldr	r0, [pc, #80]	; (9154 <l2cap_recv+0x100>)
    9104:	4b14      	ldr	r3, [pc, #80]	; (9158 <l2cap_recv+0x104>)
    9106:	1a1b      	subs	r3, r3, r0
    9108:	08db      	lsrs	r3, r3, #3
    910a:	f363 128f 	bfi	r2, r3, #6, #10
    910e:	4817      	ldr	r0, [pc, #92]	; (916c <l2cap_recv+0x118>)
    9110:	f017 fd85 	bl	20c1e <log_1>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    9114:	2104      	movs	r1, #4
    9116:	2000      	movs	r0, #0
		l2cap_send_reject(chan->conn, hdr->ident,
    9118:	682f      	ldr	r7, [r5, #0]
    911a:	7864      	ldrb	r4, [r4, #1]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    911c:	f7ff fe20 	bl	8d60 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    9120:	f100 0608 	add.w	r6, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    9124:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9126:	2104      	movs	r1, #4
    9128:	4630      	mov	r0, r6
    912a:	f01b fdcf 	bl	24ccc <net_buf_simple_add>
	hdr->code = code;
    912e:	2301      	movs	r3, #1
	hdr->ident = ident;
    9130:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    9132:	2102      	movs	r1, #2
    9134:	2400      	movs	r4, #0
	hdr->code = code;
    9136:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
    9138:	7081      	strb	r1, [r0, #2]
    913a:	70c4      	strb	r4, [r0, #3]
	rej = net_buf_add(buf, sizeof(*rej));
    913c:	4630      	mov	r0, r6
    913e:	f01b fdc5 	bl	24ccc <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    9142:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
    9144:	7004      	strb	r4, [r0, #0]
    9146:	7044      	strb	r4, [r0, #1]
    9148:	462a      	mov	r2, r5
    914a:	2105      	movs	r1, #5
    914c:	4638      	mov	r0, r7
    914e:	f019 f9ec 	bl	2252a <bt_l2cap_send_cb>
    9152:	e7ac      	b.n	90ae <l2cap_recv+0x5a>
    9154:	00025880 	.word	0x00025880
    9158:	00025900 	.word	0x00025900
    915c:	00027683 	.word	0x00027683
    9160:	000276a1 	.word	0x000276a1
    9164:	000276c2 	.word	0x000276c2
    9168:	000276e3 	.word	0x000276e3
    916c:	000276ff 	.word	0x000276ff

00009170 <bt_l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    9170:	898b      	ldrh	r3, [r1, #12]
    9172:	2b03      	cmp	r3, #3
{
    9174:	b570      	push	{r4, r5, r6, lr}
    9176:	4606      	mov	r6, r0
    9178:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    917a:	d812      	bhi.n	91a2 <bt_l2cap_recv+0x32>
		BT_ERR("Too small L2CAP PDU received");
    917c:	2301      	movs	r3, #1
    917e:	f04f 0100 	mov.w	r1, #0
    9182:	f363 0107 	bfi	r1, r3, #0, #8
    9186:	4a17      	ldr	r2, [pc, #92]	; (91e4 <bt_l2cap_recv+0x74>)
    9188:	4b17      	ldr	r3, [pc, #92]	; (91e8 <bt_l2cap_recv+0x78>)
    918a:	4818      	ldr	r0, [pc, #96]	; (91ec <bt_l2cap_recv+0x7c>)
    918c:	1a9b      	subs	r3, r3, r2
    918e:	08db      	lsrs	r3, r3, #3
    9190:	f363 118f 	bfi	r1, r3, #6, #10
    9194:	f017 fd36 	bl	20c04 <log_0>
	net_buf_unref(buf);
    9198:	4620      	mov	r0, r4
}
    919a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    919e:	f014 bae3 	b.w	1d768 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    91a2:	2104      	movs	r1, #4
    91a4:	f104 0008 	add.w	r0, r4, #8
    91a8:	f01b fe05 	bl	24db6 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    91ac:	8845      	ldrh	r5, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    91ae:	4630      	mov	r0, r6
    91b0:	4629      	mov	r1, r5
    91b2:	f019 f9da 	bl	2256a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    91b6:	b978      	cbnz	r0, 91d8 <bt_l2cap_recv+0x68>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    91b8:	2302      	movs	r3, #2
    91ba:	f04f 0200 	mov.w	r2, #0
    91be:	f363 0207 	bfi	r2, r3, #0, #8
    91c2:	4908      	ldr	r1, [pc, #32]	; (91e4 <bt_l2cap_recv+0x74>)
    91c4:	4b08      	ldr	r3, [pc, #32]	; (91e8 <bt_l2cap_recv+0x78>)
    91c6:	480a      	ldr	r0, [pc, #40]	; (91f0 <bt_l2cap_recv+0x80>)
    91c8:	1a5b      	subs	r3, r3, r1
    91ca:	08db      	lsrs	r3, r3, #3
    91cc:	f363 128f 	bfi	r2, r3, #6, #10
    91d0:	4629      	mov	r1, r5
    91d2:	f017 fd24 	bl	20c1e <log_1>
		net_buf_unref(buf);
    91d6:	e7df      	b.n	9198 <bt_l2cap_recv+0x28>
	chan->ops->recv(chan, buf);
    91d8:	6843      	ldr	r3, [r0, #4]
    91da:	4621      	mov	r1, r4
    91dc:	691b      	ldr	r3, [r3, #16]
    91de:	4798      	blx	r3
    91e0:	e7da      	b.n	9198 <bt_l2cap_recv+0x28>
    91e2:	bf00      	nop
    91e4:	00025880 	.word	0x00025880
    91e8:	00025900 	.word	0x00025900
    91ec:	0002761a 	.word	0x0002761a
    91f0:	00027637 	.word	0x00027637

000091f4 <bt_l2cap_update_conn_param>:
{
    91f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ident++;
    91f8:	4b18      	ldr	r3, [pc, #96]	; (925c <bt_l2cap_update_conn_param+0x68>)
    91fa:	781a      	ldrb	r2, [r3, #0]
    91fc:	3201      	adds	r2, #1
	if (!ident) {
    91fe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    9202:	bf08      	it	eq
    9204:	2201      	moveq	r2, #1
{
    9206:	460c      	mov	r4, r1
		ident++;
    9208:	701a      	strb	r2, [r3, #0]
{
    920a:	4605      	mov	r5, r0
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    920c:	2104      	movs	r1, #4
    920e:	2000      	movs	r0, #0
	return ident;
    9210:	781e      	ldrb	r6, [r3, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    9212:	f7ff fda5 	bl	8d60 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    9216:	f100 0808 	add.w	r8, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    921a:	4607      	mov	r7, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    921c:	2104      	movs	r1, #4
    921e:	4640      	mov	r0, r8
    9220:	f01b fd54 	bl	24ccc <net_buf_simple_add>
	hdr->code = code;
    9224:	2312      	movs	r3, #18
	hdr->ident = ident;
    9226:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    9228:	2108      	movs	r1, #8
    922a:	2600      	movs	r6, #0
	hdr->code = code;
    922c:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
    922e:	7081      	strb	r1, [r0, #2]
    9230:	70c6      	strb	r6, [r0, #3]
	req = net_buf_add(buf, sizeof(*req));
    9232:	4640      	mov	r0, r8
    9234:	f01b fd4a 	bl	24ccc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    9238:	8823      	ldrh	r3, [r4, #0]
    923a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    923c:	8863      	ldrh	r3, [r4, #2]
    923e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    9240:	88a3      	ldrh	r3, [r4, #4]
    9242:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    9244:	88e3      	ldrh	r3, [r4, #6]
    9246:	80c3      	strh	r3, [r0, #6]
    9248:	463a      	mov	r2, r7
    924a:	4628      	mov	r0, r5
    924c:	4633      	mov	r3, r6
    924e:	2105      	movs	r1, #5
    9250:	f019 f96b 	bl	2252a <bt_l2cap_send_cb>
}
    9254:	4630      	mov	r0, r6
    9256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    925a:	bf00      	nop
    925c:	20002422 	.word	0x20002422

00009260 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    9260:	4801      	ldr	r0, [pc, #4]	; (9268 <bt_l2cap_init+0x8>)
    9262:	f7ff be89 	b.w	8f78 <bt_l2cap_le_fixed_chan_register>
    9266:	bf00      	nop
    9268:	20006e74 	.word	0x20006e74

0000926c <att_op_get_type>:
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    926c:	4a09      	ldr	r2, [pc, #36]	; (9294 <att_op_get_type+0x28>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    926e:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    9270:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    9274:	4281      	cmp	r1, r0
    9276:	d103      	bne.n	9280 <att_op_get_type+0x14>
			return handlers[i].type;
    9278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    927c:	7898      	ldrb	r0, [r3, #2]
    927e:	4770      	bx	lr
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9280:	3301      	adds	r3, #1
    9282:	2b0d      	cmp	r3, #13
    9284:	d1f4      	bne.n	9270 <att_op_get_type+0x4>
		}
	}

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
    9286:	f010 0f40 	tst.w	r0, #64	; 0x40
    928a:	bf0c      	ite	eq
    928c:	2006      	moveq	r0, #6
    928e:	2000      	movne	r0, #0
	}

	return ATT_UNKNOWN;
}
    9290:	4770      	bx	lr
    9292:	bf00      	nop
    9294:	00025ec8 	.word	0x00025ec8

00009298 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    9298:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    929a:	2317      	movs	r3, #23
    929c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    92a0:	8643      	strh	r3, [r0, #50]	; 0x32
{
    92a2:	4604      	mov	r4, r0

	k_delayed_work_init(&att->timeout_work, att_timeout);
    92a4:	4903      	ldr	r1, [pc, #12]	; (92b4 <bt_att_connected+0x1c>)
    92a6:	309c      	adds	r0, #156	; 0x9c
    92a8:	f01c f8cc 	bl	25444 <k_delayed_work_init>
	list->head = NULL;
    92ac:	2300      	movs	r3, #0
	list->tail = NULL;
    92ae:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
	sys_slist_init(&att->reqs);
}
    92b2:	bd10      	pop	{r4, pc}
    92b4:	0000951d 	.word	0x0000951d

000092b8 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    92b8:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    92ba:	4d13      	ldr	r5, [pc, #76]	; (9308 <bt_att_accept+0x50>)
    92bc:	682c      	ldr	r4, [r5, #0]
{
    92be:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    92c0:	b97c      	cbnz	r4, 92e2 <bt_att_accept+0x2a>
			continue;
		}

		(void)memset(att, 0, sizeof(*att));
    92c2:	22d4      	movs	r2, #212	; 0xd4
    92c4:	4621      	mov	r1, r4
    92c6:	4628      	mov	r0, r5
    92c8:	f018 fe07 	bl	21eda <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    92cc:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    92ce:	4b0f      	ldr	r3, [pc, #60]	; (930c <bt_att_accept+0x54>)
    92d0:	606b      	str	r3, [r5, #4]
    92d2:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    92d6:	4611      	mov	r1, r2
    92d8:	f01c f818 	bl	2530c <z_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    92dc:	6035      	str	r5, [r6, #0]
    92de:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    92e0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    92e2:	2301      	movs	r3, #1
    92e4:	f04f 0200 	mov.w	r2, #0
    92e8:	f363 0207 	bfi	r2, r3, #0, #8
    92ec:	4908      	ldr	r1, [pc, #32]	; (9310 <bt_att_accept+0x58>)
    92ee:	4b09      	ldr	r3, [pc, #36]	; (9314 <bt_att_accept+0x5c>)
    92f0:	1a5b      	subs	r3, r3, r1
    92f2:	08db      	lsrs	r3, r3, #3
    92f4:	4601      	mov	r1, r0
    92f6:	f363 128f 	bfi	r2, r3, #6, #10
    92fa:	4807      	ldr	r0, [pc, #28]	; (9318 <bt_att_accept+0x60>)
    92fc:	f017 fc8f 	bl	20c1e <log_1>
	return -ENOMEM;
    9300:	f06f 000b 	mvn.w	r0, #11
    9304:	e7ec      	b.n	92e0 <bt_att_accept+0x28>
    9306:	bf00      	nop
    9308:	20000a2c 	.word	0x20000a2c
    930c:	20006ea0 	.word	0x20006ea0
    9310:	00025880 	.word	0x00025880
    9314:	00025880 	.word	0x00025880
    9318:	000277c5 	.word	0x000277c5

0000931c <att_req_sent>:
{
    931c:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    931e:	2104      	movs	r1, #4
    9320:	f019 f918 	bl	22554 <bt_l2cap_le_lookup_tx_cid>
    9324:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    9326:	30bc      	adds	r0, #188	; 0xbc
    9328:	f015 fbda 	bl	1eae0 <z_impl_k_sem_give>
	if (att->req) {
    932c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    9330:	b143      	cbz	r3, 9344 <att_req_sent+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9332:	f104 019c 	add.w	r1, r4, #156	; 0x9c
    9336:	f247 5230 	movw	r2, #30000	; 0x7530
    933a:	4803      	ldr	r0, [pc, #12]	; (9348 <att_req_sent+0x2c>)
}
    933c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9340:	f015 bd36 	b.w	1edb0 <k_delayed_work_submit_to_queue>
    9344:	bd10      	pop	{r4, pc}
    9346:	bf00      	nop
    9348:	20001d2c 	.word	0x20001d2c

0000934c <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    934c:	7a81      	ldrb	r1, [r0, #10]
    934e:	2904      	cmp	r1, #4
{
    9350:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9352:	d00f      	beq.n	9374 <att_chan_get+0x28>
		BT_WARN("Not connected");
    9354:	2302      	movs	r3, #2
    9356:	f04f 0100 	mov.w	r1, #0
    935a:	f363 0107 	bfi	r1, r3, #0, #8
    935e:	4a1a      	ldr	r2, [pc, #104]	; (93c8 <att_chan_get+0x7c>)
    9360:	4b1a      	ldr	r3, [pc, #104]	; (93cc <att_chan_get+0x80>)
    9362:	481b      	ldr	r0, [pc, #108]	; (93d0 <att_chan_get+0x84>)
    9364:	1a9b      	subs	r3, r3, r2
    9366:	08db      	lsrs	r3, r3, #3
    9368:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("ATT context flagged as disconnected");
    936c:	f017 fc4a 	bl	20c04 <log_0>
		return NULL;
    9370:	2400      	movs	r4, #0
    9372:	e011      	b.n	9398 <att_chan_get+0x4c>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    9374:	f019 f8f9 	bl	2256a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9378:	4604      	mov	r4, r0
    937a:	b978      	cbnz	r0, 939c <att_chan_get+0x50>
		BT_ERR("Unable to find ATT channel");
    937c:	2301      	movs	r3, #1
    937e:	f04f 0100 	mov.w	r1, #0
    9382:	f363 0107 	bfi	r1, r3, #0, #8
    9386:	4a10      	ldr	r2, [pc, #64]	; (93c8 <att_chan_get+0x7c>)
    9388:	4b10      	ldr	r3, [pc, #64]	; (93cc <att_chan_get+0x80>)
    938a:	4812      	ldr	r0, [pc, #72]	; (93d4 <att_chan_get+0x88>)
    938c:	1a9b      	subs	r3, r3, r2
    938e:	08db      	lsrs	r3, r3, #3
    9390:	f363 118f 	bfi	r1, r3, #6, #10
    9394:	f017 fc36 	bl	20c04 <log_0>
}
    9398:	4620      	mov	r0, r4
    939a:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    939c:	f3bf 8f5b 	dmb	ish
    93a0:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    93a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    93a8:	075b      	lsls	r3, r3, #29
    93aa:	d5f5      	bpl.n	9398 <att_chan_get+0x4c>
		BT_WARN("ATT context flagged as disconnected");
    93ac:	2302      	movs	r3, #2
    93ae:	f04f 0100 	mov.w	r1, #0
    93b2:	f363 0107 	bfi	r1, r3, #0, #8
    93b6:	4a04      	ldr	r2, [pc, #16]	; (93c8 <att_chan_get+0x7c>)
    93b8:	4b04      	ldr	r3, [pc, #16]	; (93cc <att_chan_get+0x80>)
    93ba:	4807      	ldr	r0, [pc, #28]	; (93d8 <att_chan_get+0x8c>)
    93bc:	1a9b      	subs	r3, r3, r2
    93be:	08db      	lsrs	r3, r3, #3
    93c0:	f363 118f 	bfi	r1, r3, #6, #10
    93c4:	e7d2      	b.n	936c <att_chan_get+0x20>
    93c6:	bf00      	nop
    93c8:	00025880 	.word	0x00025880
    93cc:	00025880 	.word	0x00025880
    93d0:	00027748 	.word	0x00027748
    93d4:	00027756 	.word	0x00027756
    93d8:	00027771 	.word	0x00027771

000093dc <att_send_req>:
{
    93dc:	b570      	push	{r4, r5, r6, lr}
    93de:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    93e0:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
	att->req = req;
    93e4:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
{
    93e8:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    93ea:	4630      	mov	r0, r6
    93ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    93f0:	f015 fba0 	bl	1eb34 <z_impl_k_sem_take>
	if (!att_is_connected(att)) {
    93f4:	4628      	mov	r0, r5
    93f6:	f019 fa70 	bl	228da <att_is_connected>
    93fa:	b998      	cbnz	r0, 9424 <att_send_req+0x48>
		BT_WARN("Disconnected");
    93fc:	2302      	movs	r3, #2
    93fe:	f04f 0100 	mov.w	r1, #0
    9402:	4a19      	ldr	r2, [pc, #100]	; (9468 <att_send_req+0x8c>)
    9404:	4819      	ldr	r0, [pc, #100]	; (946c <att_send_req+0x90>)
    9406:	f363 0107 	bfi	r1, r3, #0, #8
    940a:	4b19      	ldr	r3, [pc, #100]	; (9470 <att_send_req+0x94>)
    940c:	1a9b      	subs	r3, r3, r2
    940e:	08db      	lsrs	r3, r3, #3
    9410:	f363 118f 	bfi	r1, r3, #6, #10
    9414:	f017 fbf6 	bl	20c04 <log_0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    9418:	4630      	mov	r0, r6
    941a:	f015 fb61 	bl	1eae0 <z_impl_k_sem_give>
		return -ENOTCONN;
    941e:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    9422:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    9424:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    9426:	f106 0008 	add.w	r0, r6, #8
    942a:	f01b fcf0 	bl	24e0e <net_buf_simple_headroom>
	state->len = buf->len;
    942e:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    9430:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    9432:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    9434:	6920      	ldr	r0, [r4, #16]
    9436:	682d      	ldr	r5, [r5, #0]
    9438:	f01b fc44 	bl	24cc4 <net_buf_ref>
    943c:	6923      	ldr	r3, [r4, #16]
	switch (att_op_get_type(buf->data[0])) {
    943e:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    9440:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    9442:	7818      	ldrb	r0, [r3, #0]
    9444:	f7ff ff12 	bl	926c <att_op_get_type>
    9448:	3801      	subs	r0, #1
    944a:	b2c0      	uxtb	r0, r0
    944c:	2804      	cmp	r0, #4
    944e:	bf96      	itet	ls
    9450:	4b08      	ldrls	r3, [pc, #32]	; (9474 <att_send_req+0x98>)
    9452:	4b09      	ldrhi	r3, [pc, #36]	; (9478 <att_send_req+0x9c>)
    9454:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    9458:	4632      	mov	r2, r6
    945a:	4628      	mov	r0, r5
    945c:	2104      	movs	r1, #4
    945e:	f019 f864 	bl	2252a <bt_l2cap_send_cb>
	return 0;
    9462:	2000      	movs	r0, #0
    9464:	e7dd      	b.n	9422 <att_send_req+0x46>
    9466:	bf00      	nop
    9468:	00025880 	.word	0x00025880
    946c:	000277ac 	.word	0x000277ac
    9470:	00025880 	.word	0x00025880
    9474:	00025eb4 	.word	0x00025eb4
    9478:	00022901 	.word	0x00022901

0000947c <att_handle_rsp>:
{
    947c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9480:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    9482:	309c      	adds	r0, #156	; 0x9c
{
    9484:	461e      	mov	r6, r3
    9486:	460f      	mov	r7, r1
    9488:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    948a:	f01b ffe3 	bl	25454 <k_delayed_work_cancel>
	if (!att->req) {
    948e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    9492:	bb03      	cbnz	r3, 94d6 <att_handle_rsp+0x5a>
		BT_WARN("No pending ATT request");
    9494:	2302      	movs	r3, #2
    9496:	f04f 0100 	mov.w	r1, #0
    949a:	f363 0107 	bfi	r1, r3, #0, #8
    949e:	4a1c      	ldr	r2, [pc, #112]	; (9510 <att_handle_rsp+0x94>)
    94a0:	4b1c      	ldr	r3, [pc, #112]	; (9514 <att_handle_rsp+0x98>)
    94a2:	481d      	ldr	r0, [pc, #116]	; (9518 <att_handle_rsp+0x9c>)
    94a4:	1a9b      	subs	r3, r3, r2
    94a6:	08db      	lsrs	r3, r3, #3
    94a8:	f363 118f 	bfi	r1, r3, #6, #10
    94ac:	f017 fbaa 	bl	20c04 <log_0>
Z_GENLIST_IS_EMPTY(slist)
    94b0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
Z_GENLIST_GET(slist, snode)
    94b4:	b159      	cbz	r1, 94ce <att_handle_rsp+0x52>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    94b6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    94ba:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    94bc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    94c0:	4291      	cmp	r1, r2
	list->tail = node;
    94c2:	bf08      	it	eq
    94c4:	f8c4 3098 	streq.w	r3, [r4, #152]	; 0x98
	att_send_req(att, ATT_REQ(node));
    94c8:	4620      	mov	r0, r4
    94ca:	f7ff ff87 	bl	93dc <att_send_req>
}
    94ce:	2000      	movs	r0, #0
    94d0:	b003      	add	sp, #12
    94d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    94d6:	6918      	ldr	r0, [r3, #16]
    94d8:	b128      	cbz	r0, 94e6 <att_handle_rsp+0x6a>
		net_buf_unref(att->req->buf);
    94da:	f014 f945 	bl	1d768 <net_buf_unref>
		att->req->buf = NULL;
    94de:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    94e2:	2200      	movs	r2, #0
    94e4:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    94e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	func(att->chan.chan.conn, err, pdu, len, att->req);
    94ea:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    94ec:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    94f0:	2500      	movs	r5, #0
    94f2:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    94f4:	463a      	mov	r2, r7
    94f6:	9300      	str	r3, [sp, #0]
    94f8:	4631      	mov	r1, r6
    94fa:	4643      	mov	r3, r8
    94fc:	47c8      	blx	r9
	if (!att->req->func) {
    94fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    9502:	6843      	ldr	r3, [r0, #4]
    9504:	b90b      	cbnz	r3, 950a <att_handle_rsp+0x8e>
		att_req_destroy(att->req);
    9506:	f019 f83c 	bl	22582 <att_req_destroy>
	att->req = NULL;
    950a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    950e:	e7cf      	b.n	94b0 <att_handle_rsp+0x34>
    9510:	00025880 	.word	0x00025880
    9514:	00025880 	.word	0x00025880
    9518:	00027795 	.word	0x00027795

0000951c <att_timeout>:
	BT_ERR("ATT Timeout");
    951c:	2301      	movs	r3, #1
    951e:	f04f 0100 	mov.w	r1, #0
    9522:	4a0c      	ldr	r2, [pc, #48]	; (9554 <att_timeout+0x38>)
    9524:	f363 0107 	bfi	r1, r3, #0, #8
    9528:	4b0b      	ldr	r3, [pc, #44]	; (9558 <att_timeout+0x3c>)
    952a:	1a9b      	subs	r3, r3, r2
    952c:	08db      	lsrs	r3, r3, #3
{
    952e:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
    9530:	f363 118f 	bfi	r1, r3, #6, #10
{
    9534:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    9536:	4809      	ldr	r0, [pc, #36]	; (955c <att_timeout+0x40>)
    9538:	f017 fb64 	bl	20c04 <log_0>
	att_reset(att);
    953c:	f1a4 009c 	sub.w	r0, r4, #156	; 0x9c
    9540:	f019 fa84 	bl	22a4c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9544:	f854 0c9c 	ldr.w	r0, [r4, #-156]
    9548:	f001 fb62 	bl	ac10 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    954c:	2300      	movs	r3, #0
    954e:	f844 3c9c 	str.w	r3, [r4, #-156]
}
    9552:	bd10      	pop	{r4, pc}
    9554:	00025880 	.word	0x00025880
    9558:	00025880 	.word	0x00025880
    955c:	000277b9 	.word	0x000277b9

00009560 <att_write_cmd>:
{
    9560:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9562:	6804      	ldr	r4, [r0, #0]
{
    9564:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    9566:	f101 0008 	add.w	r0, r1, #8
{
    956a:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    956c:	f01b fc33 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9570:	2100      	movs	r1, #0
	handle = net_buf_pull_le16(buf);
    9572:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9574:	4620      	mov	r0, r4
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    9576:	68af      	ldr	r7, [r5, #8]
    9578:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    957a:	f019 fcca 	bl	22f12 <bt_gatt_change_aware>
    957e:	b320      	cbz	r0, 95ca <att_write_cmd+0x6a>
	if (!handle) {
    9580:	b32e      	cbz	r6, 95ce <att_write_cmd+0x6e>
	(void)memset(&data, 0, sizeof(data));
    9582:	2218      	movs	r2, #24
    9584:	2100      	movs	r1, #0
    9586:	4668      	mov	r0, sp
    9588:	f018 fca7 	bl	21eda <memset>
	data.req = req;
    958c:	2300      	movs	r3, #0
    958e:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    9592:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9596:	2301      	movs	r3, #1
    9598:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    959c:	4a0d      	ldr	r2, [pc, #52]	; (95d4 <att_write_cmd+0x74>)
	data.conn = conn;
    959e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    95a0:	466b      	mov	r3, sp
    95a2:	4631      	mov	r1, r6
    95a4:	4630      	mov	r0, r6
	data.value = value;
    95a6:	9703      	str	r7, [sp, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    95a8:	f88d 5010 	strb.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    95ac:	f001 f90c 	bl	a7c8 <bt_gatt_foreach_attr>
	if (data.err) {
    95b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    95b4:	b933      	cbnz	r3, 95c4 <att_write_cmd+0x64>
	if (data.buf) {
    95b6:	9a01      	ldr	r2, [sp, #4]
    95b8:	b122      	cbz	r2, 95c4 <att_write_cmd+0x64>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    95ba:	4b07      	ldr	r3, [pc, #28]	; (95d8 <att_write_cmd+0x78>)
    95bc:	2104      	movs	r1, #4
    95be:	4620      	mov	r0, r4
    95c0:	f018 ffb3 	bl	2252a <bt_l2cap_send_cb>
    95c4:	2000      	movs	r0, #0
}
    95c6:	b007      	add	sp, #28
    95c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    95ca:	2012      	movs	r0, #18
    95cc:	e7fb      	b.n	95c6 <att_write_cmd+0x66>
		return BT_ATT_ERR_INVALID_HANDLE;
    95ce:	2001      	movs	r0, #1
    95d0:	e7f9      	b.n	95c6 <att_write_cmd+0x66>
    95d2:	bf00      	nop
    95d4:	0002296f 	.word	0x0002296f
    95d8:	00022941 	.word	0x00022941

000095dc <bt_att_create_pdu>:
{
    95dc:	b570      	push	{r4, r5, r6, lr}
    95de:	460e      	mov	r6, r1
    95e0:	4615      	mov	r5, r2
	att = att_chan_get(conn);
    95e2:	f7ff feb3 	bl	934c <att_chan_get>
	if (!att) {
    95e6:	4604      	mov	r4, r0
    95e8:	b198      	cbz	r0, 9612 <bt_att_create_pdu+0x36>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    95ea:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    95ee:	1c6a      	adds	r2, r5, #1
    95f0:	428a      	cmp	r2, r1
    95f2:	d910      	bls.n	9616 <bt_att_create_pdu+0x3a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    95f4:	2002      	movs	r0, #2
    95f6:	f04f 0300 	mov.w	r3, #0
    95fa:	f360 0307 	bfi	r3, r0, #0, #8
    95fe:	4c0b      	ldr	r4, [pc, #44]	; (962c <bt_att_create_pdu+0x50>)
    9600:	480b      	ldr	r0, [pc, #44]	; (9630 <bt_att_create_pdu+0x54>)
    9602:	1b00      	subs	r0, r0, r4
    9604:	08c0      	lsrs	r0, r0, #3
    9606:	f360 138f 	bfi	r3, r0, #6, #10
    960a:	480a      	ldr	r0, [pc, #40]	; (9634 <bt_att_create_pdu+0x58>)
    960c:	f017 fb1b 	bl	20c46 <log_2>
		return NULL;
    9610:	2400      	movs	r4, #0
}
    9612:	4620      	mov	r0, r4
    9614:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    9616:	2100      	movs	r1, #0
    9618:	4608      	mov	r0, r1
    961a:	f018 ff83 	bl	22524 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    961e:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    9620:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9622:	3008      	adds	r0, #8
    9624:	f01b fb52 	bl	24ccc <net_buf_simple_add>
	hdr->code = op;
    9628:	7006      	strb	r6, [r0, #0]
	return buf;
    962a:	e7f2      	b.n	9612 <bt_att_create_pdu+0x36>
    962c:	00025880 	.word	0x00025880
    9630:	00025880 	.word	0x00025880
    9634:	000277ea 	.word	0x000277ea

00009638 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    9638:	688b      	ldr	r3, [r1, #8]
{
    963a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    963e:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9640:	2d16      	cmp	r5, #22
{
    9642:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9644:	d91f      	bls.n	9686 <att_mtu_req+0x4e>
	struct bt_conn *conn = att->chan.chan.conn;
    9646:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    964a:	2202      	movs	r2, #2
    964c:	2103      	movs	r1, #3
    964e:	4640      	mov	r0, r8
    9650:	f7ff ffc4 	bl	95dc <bt_att_create_pdu>
	if (!pdu) {
    9654:	4607      	mov	r7, r0
    9656:	b1c0      	cbz	r0, 968a <att_mtu_req+0x52>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    9658:	2102      	movs	r1, #2
    965a:	3008      	adds	r0, #8
    965c:	f01b fb36 	bl	24ccc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    9660:	2400      	movs	r4, #0
    9662:	2345      	movs	r3, #69	; 0x45
    9664:	7003      	strb	r3, [r0, #0]
    9666:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    9668:	4b09      	ldr	r3, [pc, #36]	; (9690 <att_mtu_req+0x58>)
    966a:	4640      	mov	r0, r8
    966c:	463a      	mov	r2, r7
    966e:	2104      	movs	r1, #4
    9670:	f018 ff5b 	bl	2252a <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    9674:	2d45      	cmp	r5, #69	; 0x45
    9676:	bf28      	it	cs
    9678:	2545      	movcs	r5, #69	; 0x45
    967a:	8675      	strh	r5, [r6, #50]	; 0x32
	att->chan.tx.mtu = att->chan.rx.mtu;
    967c:	f8a6 5052 	strh.w	r5, [r6, #82]	; 0x52
	return 0;
    9680:	4620      	mov	r0, r4
}
    9682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    9686:	2004      	movs	r0, #4
    9688:	e7fb      	b.n	9682 <att_mtu_req+0x4a>
		return BT_ATT_ERR_UNLIKELY;
    968a:	200e      	movs	r0, #14
    968c:	e7f9      	b.n	9682 <att_mtu_req+0x4a>
    968e:	bf00      	nop
    9690:	00022941 	.word	0x00022941

00009694 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    9694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9698:	4688      	mov	r8, r1
    969a:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    969c:	2101      	movs	r1, #1
    969e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    96a0:	4605      	mov	r5, r0
    96a2:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    96a4:	f7ff ff9a 	bl	95dc <bt_att_create_pdu>
	if (!buf) {
    96a8:	4604      	mov	r4, r0
    96aa:	b180      	cbz	r0, 96ce <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    96ac:	2104      	movs	r1, #4
    96ae:	3008      	adds	r0, #8
    96b0:	f01b fb0c 	bl	24ccc <net_buf_simple_add>
	rsp->request = req;
    96b4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    96b8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    96ba:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    96be:	4622      	mov	r2, r4
    96c0:	4628      	mov	r0, r5
    96c2:	4b04      	ldr	r3, [pc, #16]	; (96d4 <send_err_rsp.part.11+0x40>)
    96c4:	2104      	movs	r1, #4
}
    96c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    96ca:	f018 bf2e 	b.w	2252a <bt_l2cap_send_cb>
}
    96ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96d2:	bf00      	nop
    96d4:	00022941 	.word	0x00022941

000096d8 <bt_att_recv>:
{
    96d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    96da:	898b      	ldrh	r3, [r1, #12]
{
    96dc:	4604      	mov	r4, r0
    96de:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    96e0:	b97b      	cbnz	r3, 9702 <bt_att_recv+0x2a>
		BT_ERR("Too small ATT PDU received");
    96e2:	2301      	movs	r3, #1
    96e4:	f04f 0100 	mov.w	r1, #0
    96e8:	f363 0107 	bfi	r1, r3, #0, #8
    96ec:	4a52      	ldr	r2, [pc, #328]	; (9838 <bt_att_recv+0x160>)
    96ee:	4b53      	ldr	r3, [pc, #332]	; (983c <bt_att_recv+0x164>)
    96f0:	4853      	ldr	r0, [pc, #332]	; (9840 <bt_att_recv+0x168>)
    96f2:	1a9b      	subs	r3, r3, r2
    96f4:	08db      	lsrs	r3, r3, #3
    96f6:	f363 118f 	bfi	r1, r3, #6, #10
			BT_WARN("Ignoring unexpected indication");
    96fa:	f017 fa83 	bl	20c04 <log_0>
}
    96fe:	2000      	movs	r0, #0
    9700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9702:	2101      	movs	r1, #1
    9704:	f107 0008 	add.w	r0, r7, #8
    9708:	f01b fb55 	bl	24db6 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    970c:	4a4d      	ldr	r2, [pc, #308]	; (9844 <bt_att_recv+0x16c>)
    970e:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9710:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9712:	2300      	movs	r3, #0
    9714:	4610      	mov	r0, r2
		if (hdr->code == handlers[i].op) {
    9716:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    971a:	428e      	cmp	r6, r1
    971c:	d122      	bne.n	9764 <bt_att_recv+0x8c>
		if (handler->type == ATT_REQUEST &&
    971e:	00db      	lsls	r3, r3, #3
    9720:	441a      	add	r2, r3
    9722:	7896      	ldrb	r6, [r2, #2]
    9724:	2e01      	cmp	r6, #1
    9726:	d13d      	bne.n	97a4 <bt_att_recv+0xcc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9728:	f3bf 8f5b 	dmb	ish
    972c:	f104 028c 	add.w	r2, r4, #140	; 0x8c
    9730:	e852 1f00 	ldrex	r1, [r2]
    9734:	f041 0c01 	orr.w	ip, r1, #1
    9738:	e842 ce00 	strex	lr, ip, [r2]
    973c:	f1be 0f00 	cmp.w	lr, #0
    9740:	d1f6      	bne.n	9730 <bt_att_recv+0x58>
    9742:	f3bf 8f5b 	dmb	ish
    9746:	07c9      	lsls	r1, r1, #31
    9748:	d54c      	bpl.n	97e4 <bt_att_recv+0x10c>
			BT_WARN("Ignoring unexpected request");
    974a:	2302      	movs	r3, #2
    974c:	f04f 0100 	mov.w	r1, #0
    9750:	f363 0107 	bfi	r1, r3, #0, #8
    9754:	4a38      	ldr	r2, [pc, #224]	; (9838 <bt_att_recv+0x160>)
    9756:	4b39      	ldr	r3, [pc, #228]	; (983c <bt_att_recv+0x164>)
    9758:	483b      	ldr	r0, [pc, #236]	; (9848 <bt_att_recv+0x170>)
    975a:	1a9b      	subs	r3, r3, r2
    975c:	08db      	lsrs	r3, r3, #3
    975e:	f363 118f 	bfi	r1, r3, #6, #10
    9762:	e7ca      	b.n	96fa <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9764:	3301      	adds	r3, #1
    9766:	2b0d      	cmp	r3, #13
    9768:	d1d5      	bne.n	9716 <bt_att_recv+0x3e>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    976a:	2302      	movs	r3, #2
    976c:	f04f 0200 	mov.w	r2, #0
    9770:	f363 0207 	bfi	r2, r3, #0, #8
    9774:	4830      	ldr	r0, [pc, #192]	; (9838 <bt_att_recv+0x160>)
    9776:	4b31      	ldr	r3, [pc, #196]	; (983c <bt_att_recv+0x164>)
    9778:	1a1b      	subs	r3, r3, r0
    977a:	08db      	lsrs	r3, r3, #3
    977c:	4833      	ldr	r0, [pc, #204]	; (984c <bt_att_recv+0x174>)
    977e:	f363 128f 	bfi	r2, r3, #6, #10
    9782:	f017 fa4c 	bl	20c1e <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9786:	782d      	ldrb	r5, [r5, #0]
    9788:	4628      	mov	r0, r5
    978a:	f7ff fd6f 	bl	926c <att_op_get_type>
    978e:	2800      	cmp	r0, #0
    9790:	d0b5      	beq.n	96fe <bt_att_recv+0x26>
	if (!req) {
    9792:	2d00      	cmp	r5, #0
    9794:	d0b3      	beq.n	96fe <bt_att_recv+0x26>
    9796:	2306      	movs	r3, #6
    9798:	2200      	movs	r2, #0
    979a:	4629      	mov	r1, r5
    979c:	6820      	ldr	r0, [r4, #0]
    979e:	f7ff ff79 	bl	9694 <send_err_rsp.part.11>
    97a2:	e7ac      	b.n	96fe <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
    97a4:	2e05      	cmp	r6, #5
    97a6:	d11d      	bne.n	97e4 <bt_att_recv+0x10c>
    97a8:	f3bf 8f5b 	dmb	ish
    97ac:	f104 028c 	add.w	r2, r4, #140	; 0x8c
    97b0:	e852 1f00 	ldrex	r1, [r2]
    97b4:	f041 0c02 	orr.w	ip, r1, #2
    97b8:	e842 ce00 	strex	lr, ip, [r2]
    97bc:	f1be 0f00 	cmp.w	lr, #0
    97c0:	d1f6      	bne.n	97b0 <bt_att_recv+0xd8>
    97c2:	f3bf 8f5b 	dmb	ish
    97c6:	078a      	lsls	r2, r1, #30
    97c8:	d50c      	bpl.n	97e4 <bt_att_recv+0x10c>
			BT_WARN("Ignoring unexpected indication");
    97ca:	2302      	movs	r3, #2
    97cc:	f04f 0100 	mov.w	r1, #0
    97d0:	f363 0107 	bfi	r1, r3, #0, #8
    97d4:	4a18      	ldr	r2, [pc, #96]	; (9838 <bt_att_recv+0x160>)
    97d6:	4b19      	ldr	r3, [pc, #100]	; (983c <bt_att_recv+0x164>)
    97d8:	481d      	ldr	r0, [pc, #116]	; (9850 <bt_att_recv+0x178>)
    97da:	1a9b      	subs	r3, r3, r2
    97dc:	08db      	lsrs	r3, r3, #3
    97de:	f363 118f 	bfi	r1, r3, #6, #10
    97e2:	e78a      	b.n	96fa <bt_att_recv+0x22>
	if (buf->len < handler->expect_len) {
    97e4:	4403      	add	r3, r0
    97e6:	89b9      	ldrh	r1, [r7, #12]
    97e8:	785a      	ldrb	r2, [r3, #1]
    97ea:	428a      	cmp	r2, r1
    97ec:	d913      	bls.n	9816 <bt_att_recv+0x13e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    97ee:	2201      	movs	r2, #1
    97f0:	f04f 0300 	mov.w	r3, #0
    97f4:	f362 0307 	bfi	r3, r2, #0, #8
    97f8:	480f      	ldr	r0, [pc, #60]	; (9838 <bt_att_recv+0x160>)
    97fa:	4a10      	ldr	r2, [pc, #64]	; (983c <bt_att_recv+0x164>)
    97fc:	1a12      	subs	r2, r2, r0
    97fe:	08d2      	lsrs	r2, r2, #3
    9800:	f362 138f 	bfi	r3, r2, #6, #10
    9804:	4813      	ldr	r0, [pc, #76]	; (9854 <bt_att_recv+0x17c>)
    9806:	782a      	ldrb	r2, [r5, #0]
    9808:	f017 fa1d 	bl	20c46 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    980c:	2e01      	cmp	r6, #1
    980e:	f47f af76 	bne.w	96fe <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
    9812:	2304      	movs	r3, #4
    9814:	e00a      	b.n	982c <bt_att_recv+0x154>
		err = handler->func(att, buf);
    9816:	685b      	ldr	r3, [r3, #4]
    9818:	4639      	mov	r1, r7
    981a:	4620      	mov	r0, r4
    981c:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    981e:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    9820:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    9822:	f47f af6c 	bne.w	96fe <bt_att_recv+0x26>
    9826:	2800      	cmp	r0, #0
    9828:	f43f af69 	beq.w	96fe <bt_att_recv+0x26>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    982c:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    982e:	2900      	cmp	r1, #0
    9830:	f43f af65 	beq.w	96fe <bt_att_recv+0x26>
    9834:	2200      	movs	r2, #0
    9836:	e7b1      	b.n	979c <bt_att_recv+0xc4>
    9838:	00025880 	.word	0x00025880
    983c:	00025880 	.word	0x00025880
    9840:	0002780f 	.word	0x0002780f
    9844:	00025ec8 	.word	0x00025ec8
    9848:	0002782a 	.word	0x0002782a
    984c:	00027884 	.word	0x00027884
    9850:	00027846 	.word	0x00027846
    9854:	00027865 	.word	0x00027865

00009858 <att_read_group_req>:
{
    9858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    985c:	898b      	ldrh	r3, [r1, #12]
    985e:	2b06      	cmp	r3, #6
{
    9860:	b08d      	sub	sp, #52	; 0x34
    9862:	4681      	mov	r9, r0
    9864:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9866:	d001      	beq.n	986c <att_read_group_req+0x14>
    9868:	2b14      	cmp	r3, #20
    986a:	d16d      	bne.n	9948 <att_read_group_req+0xf0>
	req = net_buf_pull_mem(buf, sizeof(*req));
    986c:	2104      	movs	r1, #4
    986e:	f104 0008 	add.w	r0, r4, #8
	struct bt_conn *conn = att->chan.chan.conn;
    9872:	f8d9 8000 	ldr.w	r8, [r9]
	req = net_buf_pull_mem(buf, sizeof(*req));
    9876:	f01b fa9e 	bl	24db6 <net_buf_simple_pull_mem>
	if (!uuid_create(&u.uuid, buf)) {
    987a:	af02      	add	r7, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    987c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    987e:	8846      	ldrh	r6, [r0, #2]
	if (!uuid_create(&u.uuid, buf)) {
    9880:	4621      	mov	r1, r4
    9882:	4638      	mov	r0, r7
    9884:	f019 f810 	bl	228a8 <uuid_create>
    9888:	2800      	cmp	r0, #0
    988a:	d05f      	beq.n	994c <att_read_group_req+0xf4>
	if (!start || !end) {
    988c:	2d00      	cmp	r5, #0
    988e:	d036      	beq.n	98fe <att_read_group_req+0xa6>
    9890:	2400      	movs	r4, #0
    9892:	b39e      	cbz	r6, 98fc <att_read_group_req+0xa4>
	if (start > end) {
    9894:	42b5      	cmp	r5, r6
    9896:	d832      	bhi.n	98fe <att_read_group_req+0xa6>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9898:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    989c:	4669      	mov	r1, sp
    989e:	4638      	mov	r0, r7
    98a0:	f88d 4000 	strb.w	r4, [sp]
    98a4:	f8ad 3002 	strh.w	r3, [sp, #2]
    98a8:	f018 fc39 	bl	2211e <bt_uuid_cmp>
    98ac:	bb90      	cbnz	r0, 9914 <att_read_group_req+0xbc>
	struct bt_conn *conn = att->chan.chan.conn;
    98ae:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    98b2:	2214      	movs	r2, #20
    98b4:	2100      	movs	r1, #0
    98b6:	a807      	add	r0, sp, #28
    98b8:	f018 fb0f 	bl	21eda <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    98bc:	2201      	movs	r2, #1
    98be:	2111      	movs	r1, #17
    98c0:	4640      	mov	r0, r8
    98c2:	f7ff fe8b 	bl	95dc <bt_att_create_pdu>
    98c6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    98c8:	2800      	cmp	r0, #0
    98ca:	d03f      	beq.n	994c <att_read_group_req+0xf4>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    98cc:	2101      	movs	r1, #1
    98ce:	3008      	adds	r0, #8
	data.uuid = uuid;
    98d0:	e9cd 9707 	strd	r9, r7, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    98d4:	f01b f9fa 	bl	24ccc <net_buf_simple_add>
	data.rsp->len = 0U;
    98d8:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    98da:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    98dc:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    98de:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    98e0:	4a1b      	ldr	r2, [pc, #108]	; (9950 <att_read_group_req+0xf8>)
	data.group = NULL;
    98e2:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    98e4:	4631      	mov	r1, r6
    98e6:	4628      	mov	r0, r5
    98e8:	f000 ff6e 	bl	a7c8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    98ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    98ee:	781c      	ldrb	r4, [r3, #0]
    98f0:	bb1c      	cbnz	r4, 993a <att_read_group_req+0xe2>
		net_buf_unref(data.buf);
    98f2:	9809      	ldr	r0, [sp, #36]	; 0x24
    98f4:	f013 ff38 	bl	1d768 <net_buf_unref>
	if (!req) {
    98f8:	230a      	movs	r3, #10
    98fa:	e018      	b.n	992e <att_read_group_req+0xd6>
			*err = 0U;
    98fc:	4635      	mov	r5, r6
	if (!req) {
    98fe:	2301      	movs	r3, #1
    9900:	462a      	mov	r2, r5
    9902:	2110      	movs	r1, #16
    9904:	4640      	mov	r0, r8
    9906:	f7ff fec5 	bl	9694 <send_err_rsp.part.11>
		return 0;
    990a:	2400      	movs	r4, #0
}
    990c:	4620      	mov	r0, r4
    990e:	b00d      	add	sp, #52	; 0x34
    9910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9914:	f642 0301 	movw	r3, #10241	; 0x2801
    9918:	a901      	add	r1, sp, #4
    991a:	4638      	mov	r0, r7
    991c:	f88d 4004 	strb.w	r4, [sp, #4]
    9920:	f8ad 3006 	strh.w	r3, [sp, #6]
    9924:	f018 fbfb 	bl	2211e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9928:	2800      	cmp	r0, #0
    992a:	d0c0      	beq.n	98ae <att_read_group_req+0x56>
	if (!req) {
    992c:	2310      	movs	r3, #16
    992e:	462a      	mov	r2, r5
    9930:	2110      	movs	r1, #16
    9932:	4640      	mov	r0, r8
    9934:	f7ff feae 	bl	9694 <send_err_rsp.part.11>
		return 0;
    9938:	e7e8      	b.n	990c <att_read_group_req+0xb4>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    993a:	4b06      	ldr	r3, [pc, #24]	; (9954 <att_read_group_req+0xfc>)
    993c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    993e:	2104      	movs	r1, #4
    9940:	4640      	mov	r0, r8
    9942:	f018 fdf2 	bl	2252a <bt_l2cap_send_cb>
	return 0;
    9946:	e7e0      	b.n	990a <att_read_group_req+0xb2>
		return BT_ATT_ERR_INVALID_PDU;
    9948:	2404      	movs	r4, #4
    994a:	e7df      	b.n	990c <att_read_group_req+0xb4>
		return BT_ATT_ERR_UNLIKELY;
    994c:	240e      	movs	r4, #14
    994e:	e7dd      	b.n	990c <att_read_group_req+0xb4>
    9950:	000225a5 	.word	0x000225a5
    9954:	00022941 	.word	0x00022941

00009958 <att_read_mult_req>:
{
    9958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    995c:	6804      	ldr	r4, [r0, #0]
{
    995e:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    9960:	2214      	movs	r2, #20
{
    9962:	4606      	mov	r6, r0
    9964:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    9966:	a801      	add	r0, sp, #4
    9968:	2100      	movs	r1, #0
    996a:	f018 fab6 	bl	21eda <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    996e:	2200      	movs	r2, #0
    9970:	210f      	movs	r1, #15
    9972:	4620      	mov	r0, r4
    9974:	f7ff fe32 	bl	95dc <bt_att_create_pdu>
    9978:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    997a:	b368      	cbz	r0, 99d8 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    997c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 99e0 <att_read_mult_req+0x88>
	data.att = att;
    9980:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    9982:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9986:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    998a:	89ab      	ldrh	r3, [r5, #12]
    998c:	2b01      	cmp	r3, #1
    998e:	d806      	bhi.n	999e <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9990:	4b12      	ldr	r3, [pc, #72]	; (99dc <att_read_mult_req+0x84>)
    9992:	9a03      	ldr	r2, [sp, #12]
    9994:	2104      	movs	r1, #4
    9996:	4620      	mov	r0, r4
    9998:	f018 fdc7 	bl	2252a <bt_l2cap_send_cb>
    999c:	e018      	b.n	99d0 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    999e:	4638      	mov	r0, r7
    99a0:	f01b fa19 	bl	24dd6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    99a4:	ab01      	add	r3, sp, #4
    99a6:	464a      	mov	r2, r9
    99a8:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    99aa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    99ac:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    99b0:	f000 ff0a 	bl	a7c8 <bt_gatt_foreach_attr>
		if (data.err) {
    99b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    99b8:	2b00      	cmp	r3, #0
    99ba:	d0e6      	beq.n	998a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    99bc:	9803      	ldr	r0, [sp, #12]
    99be:	f013 fed3 	bl	1d768 <net_buf_unref>
	if (!req) {
    99c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    99c6:	4632      	mov	r2, r6
    99c8:	210e      	movs	r1, #14
    99ca:	4620      	mov	r0, r4
    99cc:	f7ff fe62 	bl	9694 <send_err_rsp.part.11>
	return 0;
    99d0:	2000      	movs	r0, #0
}
    99d2:	b007      	add	sp, #28
    99d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    99d8:	200e      	movs	r0, #14
    99da:	e7fa      	b.n	99d2 <att_read_mult_req+0x7a>
    99dc:	00022941 	.word	0x00022941
    99e0:	000229cf 	.word	0x000229cf

000099e4 <att_read_rsp>:
{
    99e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    99e8:	6805      	ldr	r5, [r0, #0]
{
    99ea:	b086      	sub	sp, #24
    99ec:	4604      	mov	r4, r0
    99ee:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    99f0:	4628      	mov	r0, r5
    99f2:	2101      	movs	r1, #1
{
    99f4:	4690      	mov	r8, r2
    99f6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    99f8:	f019 fa8b 	bl	22f12 <bt_gatt_change_aware>
    99fc:	b398      	cbz	r0, 9a66 <att_read_rsp+0x82>
	if (!handle) {
    99fe:	b3a6      	cbz	r6, 9a6a <att_read_rsp+0x86>
	(void)memset(&data, 0, sizeof(data));
    9a00:	2214      	movs	r2, #20
    9a02:	2100      	movs	r1, #0
    9a04:	a801      	add	r0, sp, #4
    9a06:	f018 fa68 	bl	21eda <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    9a0a:	2200      	movs	r2, #0
    9a0c:	4641      	mov	r1, r8
    9a0e:	4628      	mov	r0, r5
    9a10:	f7ff fde4 	bl	95dc <bt_att_create_pdu>
    9a14:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9a16:	b350      	cbz	r0, 9a6e <att_read_rsp+0x8a>
	data.offset = offset;
    9a18:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9a1c:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9a20:	2301      	movs	r3, #1
    9a22:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9a26:	4a13      	ldr	r2, [pc, #76]	; (9a74 <att_read_rsp+0x90>)
	data.att = att;
    9a28:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9a2a:	ab01      	add	r3, sp, #4
    9a2c:	4631      	mov	r1, r6
    9a2e:	4630      	mov	r0, r6
    9a30:	f000 feca 	bl	a7c8 <bt_gatt_foreach_attr>
	if (data.err) {
    9a34:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9a38:	b174      	cbz	r4, 9a58 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    9a3a:	9803      	ldr	r0, [sp, #12]
    9a3c:	f013 fe94 	bl	1d768 <net_buf_unref>
	if (!req) {
    9a40:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9a44:	4632      	mov	r2, r6
    9a46:	4639      	mov	r1, r7
    9a48:	4628      	mov	r0, r5
    9a4a:	f7ff fe23 	bl	9694 <send_err_rsp.part.11>
		return 0;
    9a4e:	2400      	movs	r4, #0
}
    9a50:	4620      	mov	r0, r4
    9a52:	b006      	add	sp, #24
    9a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9a58:	4b07      	ldr	r3, [pc, #28]	; (9a78 <att_read_rsp+0x94>)
    9a5a:	9a03      	ldr	r2, [sp, #12]
    9a5c:	2104      	movs	r1, #4
    9a5e:	4628      	mov	r0, r5
    9a60:	f018 fd63 	bl	2252a <bt_l2cap_send_cb>
	return 0;
    9a64:	e7f4      	b.n	9a50 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9a66:	2412      	movs	r4, #18
    9a68:	e7f2      	b.n	9a50 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    9a6a:	2401      	movs	r4, #1
    9a6c:	e7f0      	b.n	9a50 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    9a6e:	240e      	movs	r4, #14
    9a70:	e7ee      	b.n	9a50 <att_read_rsp+0x6c>
    9a72:	bf00      	nop
    9a74:	000229cf 	.word	0x000229cf
    9a78:	00022941 	.word	0x00022941

00009a7c <att_read_type_req>:
{
    9a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9a80:	898b      	ldrh	r3, [r1, #12]
    9a82:	2b06      	cmp	r3, #6
{
    9a84:	b08d      	sub	sp, #52	; 0x34
    9a86:	4607      	mov	r7, r0
    9a88:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9a8a:	d001      	beq.n	9a90 <att_read_type_req+0x14>
    9a8c:	2b14      	cmp	r3, #20
    9a8e:	d154      	bne.n	9b3a <att_read_type_req+0xbe>
	req = net_buf_pull_mem(buf, sizeof(*req));
    9a90:	2104      	movs	r1, #4
    9a92:	f106 0008 	add.w	r0, r6, #8
	struct bt_conn *conn = att->chan.chan.conn;
    9a96:	f8d7 9000 	ldr.w	r9, [r7]
	req = net_buf_pull_mem(buf, sizeof(*req));
    9a9a:	f01b f98c 	bl	24db6 <net_buf_simple_pull_mem>
	if (!uuid_create(&u.uuid, buf)) {
    9a9e:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    9aa2:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9aa4:	8844      	ldrh	r4, [r0, #2]
	if (!uuid_create(&u.uuid, buf)) {
    9aa6:	4631      	mov	r1, r6
    9aa8:	4640      	mov	r0, r8
    9aaa:	f018 fefd 	bl	228a8 <uuid_create>
    9aae:	b188      	cbz	r0, 9ad4 <att_read_type_req+0x58>
	if (!start || !end) {
    9ab0:	b19d      	cbz	r5, 9ada <att_read_type_req+0x5e>
    9ab2:	b18c      	cbz	r4, 9ad8 <att_read_type_req+0x5c>
	if (start > end) {
    9ab4:	42ac      	cmp	r4, r5
    9ab6:	d310      	bcc.n	9ada <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    9ab8:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9aba:	683e      	ldr	r6, [r7, #0]
	(void)memset(&data, 0, sizeof(data));
    9abc:	2100      	movs	r1, #0
    9abe:	eb0d 0002 	add.w	r0, sp, r2
    9ac2:	f018 fa0a 	bl	21eda <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9ac6:	2201      	movs	r2, #1
    9ac8:	2109      	movs	r1, #9
    9aca:	4630      	mov	r0, r6
    9acc:	f7ff fd86 	bl	95dc <bt_att_create_pdu>
    9ad0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    9ad2:	b968      	cbnz	r0, 9af0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    9ad4:	240e      	movs	r4, #14
    9ad6:	e007      	b.n	9ae8 <att_read_type_req+0x6c>
			*err = 0U;
    9ad8:	4625      	mov	r5, r4
	if (!req) {
    9ada:	2301      	movs	r3, #1
    9adc:	462a      	mov	r2, r5
    9ade:	2108      	movs	r1, #8
    9ae0:	4648      	mov	r0, r9
    9ae2:	f7ff fdd7 	bl	9694 <send_err_rsp.part.11>
		return 0;
    9ae6:	2400      	movs	r4, #0
}
    9ae8:	4620      	mov	r0, r4
    9aea:	b00d      	add	sp, #52	; 0x34
    9aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9af0:	2101      	movs	r1, #1
    9af2:	3008      	adds	r0, #8
	data.uuid = uuid;
    9af4:	e9cd 7806 	strd	r7, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9af8:	f01b f8e8 	bl	24ccc <net_buf_simple_add>
	data.rsp->len = 0U;
    9afc:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9afe:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9b00:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9b02:	4621      	mov	r1, r4
	data.rsp->len = 0U;
    9b04:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9b06:	4a0e      	ldr	r2, [pc, #56]	; (9b40 <att_read_type_req+0xc4>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9b08:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9b0c:	4628      	mov	r0, r5
    9b0e:	ab06      	add	r3, sp, #24
    9b10:	f000 fe5a 	bl	a7c8 <bt_gatt_foreach_attr>
	if (data.err) {
    9b14:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    9b18:	b144      	cbz	r4, 9b2c <att_read_type_req+0xb0>
		net_buf_unref(data.buf);
    9b1a:	9808      	ldr	r0, [sp, #32]
    9b1c:	f013 fe24 	bl	1d768 <net_buf_unref>
	if (!req) {
    9b20:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    9b24:	462a      	mov	r2, r5
    9b26:	2108      	movs	r1, #8
    9b28:	4630      	mov	r0, r6
    9b2a:	e7da      	b.n	9ae2 <att_read_type_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9b2c:	4b05      	ldr	r3, [pc, #20]	; (9b44 <att_read_type_req+0xc8>)
    9b2e:	9a08      	ldr	r2, [sp, #32]
    9b30:	2104      	movs	r1, #4
    9b32:	4630      	mov	r0, r6
    9b34:	f018 fcf9 	bl	2252a <bt_l2cap_send_cb>
	return 0;
    9b38:	e7d6      	b.n	9ae8 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    9b3a:	2404      	movs	r4, #4
    9b3c:	e7d4      	b.n	9ae8 <att_read_type_req+0x6c>
    9b3e:	bf00      	nop
    9b40:	000227f1 	.word	0x000227f1
    9b44:	00022941 	.word	0x00022941

00009b48 <att_find_type_req>:
{
    9b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b4c:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9b4e:	f8d0 b000 	ldr.w	fp, [r0]
{
    9b52:	b089      	sub	sp, #36	; 0x24
    9b54:	4681      	mov	r9, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    9b56:	2106      	movs	r1, #6
    9b58:	f108 0008 	add.w	r0, r8, #8
    9b5c:	f01b f92b 	bl	24db6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9b60:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    9b62:	b1fd      	cbz	r5, 9ba4 <att_find_type_req+0x5c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9b64:	8847      	ldrh	r7, [r0, #2]
	if (!start || !end) {
    9b66:	b1e7      	cbz	r7, 9ba2 <att_find_type_req+0x5a>
	if (start > end) {
    9b68:	42af      	cmp	r7, r5
    9b6a:	d31b      	bcc.n	9ba4 <att_find_type_req+0x5c>
	type = sys_le16_to_cpu(req->type);
    9b6c:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9b6e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9b72:	2400      	movs	r4, #0
    9b74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9b78:	a902      	add	r1, sp, #8
    9b7a:	a801      	add	r0, sp, #4
	value = buf->data;
    9b7c:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9b80:	f88d 4004 	strb.w	r4, [sp, #4]
    9b84:	f88d 4008 	strb.w	r4, [sp, #8]
    9b88:	f8ad 300a 	strh.w	r3, [sp, #10]
    9b8c:	f018 fac7 	bl	2211e <bt_uuid_cmp>
    9b90:	4606      	mov	r6, r0
    9b92:	b190      	cbz	r0, 9bba <att_find_type_req+0x72>
	if (!req) {
    9b94:	230a      	movs	r3, #10
    9b96:	462a      	mov	r2, r5
    9b98:	2106      	movs	r1, #6
    9b9a:	4658      	mov	r0, fp
    9b9c:	f7ff fd7a 	bl	9694 <send_err_rsp.part.11>
		return 0;
    9ba0:	e007      	b.n	9bb2 <att_find_type_req+0x6a>
			*err = 0U;
    9ba2:	463d      	mov	r5, r7
	if (!req) {
    9ba4:	2301      	movs	r3, #1
    9ba6:	462a      	mov	r2, r5
    9ba8:	2106      	movs	r1, #6
    9baa:	4658      	mov	r0, fp
    9bac:	f7ff fd72 	bl	9694 <send_err_rsp.part.11>
		return 0;
    9bb0:	2400      	movs	r4, #0
}
    9bb2:	4620      	mov	r0, r4
    9bb4:	b009      	add	sp, #36	; 0x24
    9bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9bba:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    9bbe:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    9bc2:	4601      	mov	r1, r0
    9bc4:	2214      	movs	r2, #20
    9bc6:	a803      	add	r0, sp, #12
    9bc8:	f018 f987 	bl	21eda <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9bcc:	4632      	mov	r2, r6
    9bce:	2107      	movs	r1, #7
    9bd0:	4640      	mov	r0, r8
    9bd2:	f7ff fd03 	bl	95dc <bt_att_create_pdu>
    9bd6:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    9bd8:	b308      	cbz	r0, 9c1e <att_find_type_req+0xd6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9bda:	230a      	movs	r3, #10
    9bdc:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9be0:	4a10      	ldr	r2, [pc, #64]	; (9c24 <att_find_type_req+0xdc>)
	data.value_len = value_len;
    9be2:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9be6:	ab03      	add	r3, sp, #12
    9be8:	4639      	mov	r1, r7
    9bea:	4628      	mov	r0, r5
	data.att = att;
    9bec:	f8cd 900c 	str.w	r9, [sp, #12]
	data.value = value;
    9bf0:	e9cd 6a05 	strd	r6, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9bf4:	f000 fde8 	bl	a7c8 <bt_gatt_foreach_attr>
	if (data.err) {
    9bf8:	f89d 401d 	ldrb.w	r4, [sp, #29]
    9bfc:	b144      	cbz	r4, 9c10 <att_find_type_req+0xc8>
		net_buf_unref(data.buf);
    9bfe:	9804      	ldr	r0, [sp, #16]
    9c00:	f013 fdb2 	bl	1d768 <net_buf_unref>
	if (!req) {
    9c04:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9c08:	462a      	mov	r2, r5
    9c0a:	2106      	movs	r1, #6
    9c0c:	4640      	mov	r0, r8
    9c0e:	e7cd      	b.n	9bac <att_find_type_req+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9c10:	4b05      	ldr	r3, [pc, #20]	; (9c28 <att_find_type_req+0xe0>)
    9c12:	9a04      	ldr	r2, [sp, #16]
    9c14:	2104      	movs	r1, #4
    9c16:	4640      	mov	r0, r8
    9c18:	f018 fc87 	bl	2252a <bt_l2cap_send_cb>
	return 0;
    9c1c:	e7c9      	b.n	9bb2 <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    9c1e:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9c20:	e7c7      	b.n	9bb2 <att_find_type_req+0x6a>
    9c22:	bf00      	nop
    9c24:	0002270d 	.word	0x0002270d
    9c28:	00022941 	.word	0x00022941

00009c2c <att_find_info_req>:
{
    9c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    9c2e:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    9c30:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9c32:	881d      	ldrh	r5, [r3, #0]
{
    9c34:	b085      	sub	sp, #20
    9c36:	4607      	mov	r7, r0
	if (!start || !end) {
    9c38:	b195      	cbz	r5, 9c60 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9c3a:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    9c3c:	b17c      	cbz	r4, 9c5e <att_find_info_req+0x32>
	if (start > end) {
    9c3e:	42a5      	cmp	r5, r4
    9c40:	d80e      	bhi.n	9c60 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    9c42:	2210      	movs	r2, #16
    9c44:	2100      	movs	r1, #0
    9c46:	4668      	mov	r0, sp
    9c48:	f018 f947 	bl	21eda <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9c4c:	2200      	movs	r2, #0
    9c4e:	2105      	movs	r1, #5
    9c50:	4630      	mov	r0, r6
    9c52:	f7ff fcc3 	bl	95dc <bt_att_create_pdu>
    9c56:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9c58:	b958      	cbnz	r0, 9c72 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9c5a:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    9c5c:	e007      	b.n	9c6e <att_find_info_req+0x42>
			*err = 0U;
    9c5e:	4625      	mov	r5, r4
	if (!req) {
    9c60:	2301      	movs	r3, #1
    9c62:	462a      	mov	r2, r5
    9c64:	2104      	movs	r1, #4
    9c66:	4630      	mov	r0, r6
    9c68:	f7ff fd14 	bl	9694 <send_err_rsp.part.11>
	return 0;
    9c6c:	2000      	movs	r0, #0
}
    9c6e:	b005      	add	sp, #20
    9c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9c72:	4621      	mov	r1, r4
    9c74:	466b      	mov	r3, sp
    9c76:	4a09      	ldr	r2, [pc, #36]	; (9c9c <att_find_info_req+0x70>)
	data.att = att;
    9c78:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9c7a:	4628      	mov	r0, r5
    9c7c:	f000 fda4 	bl	a7c8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9c80:	9c02      	ldr	r4, [sp, #8]
    9c82:	b924      	cbnz	r4, 9c8e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    9c84:	9801      	ldr	r0, [sp, #4]
    9c86:	f013 fd6f 	bl	1d768 <net_buf_unref>
	if (!req) {
    9c8a:	230a      	movs	r3, #10
    9c8c:	e7e9      	b.n	9c62 <att_find_info_req+0x36>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9c8e:	4b04      	ldr	r3, [pc, #16]	; (9ca0 <att_find_info_req+0x74>)
    9c90:	9a01      	ldr	r2, [sp, #4]
    9c92:	2104      	movs	r1, #4
    9c94:	4630      	mov	r0, r6
    9c96:	f018 fc48 	bl	2252a <bt_l2cap_send_cb>
    9c9a:	e7e7      	b.n	9c6c <att_find_info_req+0x40>
    9c9c:	00022673 	.word	0x00022673
    9ca0:	00022941 	.word	0x00022941

00009ca4 <att_write_req>:
{
    9ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9ca8:	6805      	ldr	r5, [r0, #0]
{
    9caa:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    9cac:	f101 0008 	add.w	r0, r1, #8
{
    9cb0:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    9cb2:	f01b f890 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9cb6:	2101      	movs	r1, #1
	handle = net_buf_pull_le16(buf);
    9cb8:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9cba:	4628      	mov	r0, r5
			     handle, 0, buf->data, buf->len);
    9cbc:	f8d4 9008 	ldr.w	r9, [r4, #8]
    9cc0:	89a4      	ldrh	r4, [r4, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    9cc2:	f019 f926 	bl	22f12 <bt_gatt_change_aware>
    9cc6:	2800      	cmp	r0, #0
    9cc8:	d03f      	beq.n	9d4a <att_write_req+0xa6>
	if (!handle) {
    9cca:	2e00      	cmp	r6, #0
    9ccc:	d03f      	beq.n	9d4e <att_write_req+0xaa>
	(void)memset(&data, 0, sizeof(data));
    9cce:	2218      	movs	r2, #24
    9cd0:	2100      	movs	r1, #0
    9cd2:	4668      	mov	r0, sp
    9cd4:	f018 f901 	bl	21eda <memset>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    9cd8:	2200      	movs	r2, #0
    9cda:	2113      	movs	r1, #19
    9cdc:	4628      	mov	r0, r5
    9cde:	f7ff fc7d 	bl	95dc <bt_att_create_pdu>
    9ce2:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    9ce4:	b378      	cbz	r0, 9d46 <att_write_req+0xa2>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9ce6:	2301      	movs	r3, #1
    9ce8:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    9cec:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    9cf0:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9cf2:	466b      	mov	r3, sp
    9cf4:	4a17      	ldr	r2, [pc, #92]	; (9d54 <att_write_req+0xb0>)
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    9cf6:	f88d 4010 	strb.w	r4, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9cfa:	4631      	mov	r1, r6
    9cfc:	4630      	mov	r0, r6
	data.conn = conn;
    9cfe:	9500      	str	r5, [sp, #0]
	data.req = req;
    9d00:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    9d04:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    9d08:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9d0c:	f000 fd5c 	bl	a7c8 <bt_gatt_foreach_attr>
	if (data.err) {
    9d10:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9d14:	b174      	cbz	r4, 9d34 <att_write_req+0x90>
			net_buf_unref(data.buf);
    9d16:	9801      	ldr	r0, [sp, #4]
    9d18:	f013 fd26 	bl	1d768 <net_buf_unref>
	if (!req) {
    9d1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9d20:	4632      	mov	r2, r6
    9d22:	4641      	mov	r1, r8
    9d24:	4628      	mov	r0, r5
    9d26:	f7ff fcb5 	bl	9694 <send_err_rsp.part.11>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9d2a:	463c      	mov	r4, r7
}
    9d2c:	4620      	mov	r0, r4
    9d2e:	b007      	add	sp, #28
    9d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    9d34:	9a01      	ldr	r2, [sp, #4]
    9d36:	2a00      	cmp	r2, #0
    9d38:	d0f8      	beq.n	9d2c <att_write_req+0x88>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    9d3a:	4b07      	ldr	r3, [pc, #28]	; (9d58 <att_write_req+0xb4>)
    9d3c:	2104      	movs	r1, #4
    9d3e:	4628      	mov	r0, r5
    9d40:	f018 fbf3 	bl	2252a <bt_l2cap_send_cb>
    9d44:	e7f2      	b.n	9d2c <att_write_req+0x88>
			return BT_ATT_ERR_UNLIKELY;
    9d46:	240e      	movs	r4, #14
    9d48:	e7f0      	b.n	9d2c <att_write_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9d4a:	2412      	movs	r4, #18
    9d4c:	e7ee      	b.n	9d2c <att_write_req+0x88>
		return BT_ATT_ERR_INVALID_HANDLE;
    9d4e:	2401      	movs	r4, #1
    9d50:	e7ec      	b.n	9d2c <att_write_req+0x88>
    9d52:	bf00      	nop
    9d54:	0002296f 	.word	0x0002296f
    9d58:	00022941 	.word	0x00022941

00009d5c <bt_att_init>:

void bt_att_init(void)
{
    9d5c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    9d5e:	4803      	ldr	r0, [pc, #12]	; (9d6c <bt_att_init+0x10>)
    9d60:	f7ff f90a 	bl	8f78 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    9d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    9d68:	f000 bd9c 	b.w	a8a4 <bt_gatt_init>
    9d6c:	20006e94 	.word	0x20006e94

00009d70 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb)
{
    9d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d74:	460d      	mov	r5, r1
    9d76:	4616      	mov	r6, r2
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    9d78:	4680      	mov	r8, r0
    9d7a:	2800      	cmp	r0, #0
    9d7c:	d059      	beq.n	9e32 <bt_att_send+0xc2>
    9d7e:	2900      	cmp	r1, #0
    9d80:	d057      	beq.n	9e32 <bt_att_send+0xc2>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9d82:	f7ff fae3 	bl	934c <att_chan_get>
	if (!att) {
    9d86:	4607      	mov	r7, r0
    9d88:	b1e0      	cbz	r0, 9dc4 <bt_att_send+0x54>
		return -ENOTCONN;
	}

	/* Don't use tx_sem if caller has set it own callback */
	if (!cb) {
    9d8a:	b9f6      	cbnz	r6, 9dca <bt_att_send+0x5a>
		k_sem_take(&att->tx_sem, K_FOREVER);
    9d8c:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    9d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9d94:	4620      	mov	r0, r4
    9d96:	f014 fecd 	bl	1eb34 <z_impl_k_sem_take>
		if (!att_is_connected(att)) {
    9d9a:	4638      	mov	r0, r7
    9d9c:	f018 fd9d 	bl	228da <att_is_connected>
    9da0:	b998      	cbnz	r0, 9dca <bt_att_send+0x5a>
			BT_WARN("Disconnected");
    9da2:	2302      	movs	r3, #2
    9da4:	f04f 0100 	mov.w	r1, #0
    9da8:	f363 0107 	bfi	r1, r3, #0, #8
    9dac:	4a22      	ldr	r2, [pc, #136]	; (9e38 <bt_att_send+0xc8>)
    9dae:	4b23      	ldr	r3, [pc, #140]	; (9e3c <bt_att_send+0xcc>)
    9db0:	4823      	ldr	r0, [pc, #140]	; (9e40 <bt_att_send+0xd0>)
    9db2:	1a9b      	subs	r3, r3, r2
    9db4:	08db      	lsrs	r3, r3, #3
    9db6:	f363 118f 	bfi	r1, r3, #6, #10
    9dba:	f016 ff23 	bl	20c04 <log_0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    9dbe:	4620      	mov	r0, r4
    9dc0:	f014 fe8e 	bl	1eae0 <z_impl_k_sem_give>
		return -ENOTCONN;
    9dc4:	f06f 0438 	mvn.w	r4, #56	; 0x38
    9dc8:	e01b      	b.n	9e02 <bt_att_send+0x92>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9dca:	68ab      	ldr	r3, [r5, #8]
    9dcc:	781b      	ldrb	r3, [r3, #0]
    9dce:	2bd2      	cmp	r3, #210	; 0xd2
    9dd0:	d11a      	bne.n	9e08 <bt_att_send+0x98>
		int err;

		err = bt_smp_sign(conn, buf);
    9dd2:	4629      	mov	r1, r5
    9dd4:	4640      	mov	r0, r8
    9dd6:	f019 f8e7 	bl	22fa8 <bt_smp_sign>
		if (err) {
    9dda:	4604      	mov	r4, r0
    9ddc:	b1a0      	cbz	r0, 9e08 <bt_att_send+0x98>
			BT_ERR("Error signing data");
    9dde:	2301      	movs	r3, #1
    9de0:	f04f 0100 	mov.w	r1, #0
    9de4:	f363 0107 	bfi	r1, r3, #0, #8
    9de8:	4a13      	ldr	r2, [pc, #76]	; (9e38 <bt_att_send+0xc8>)
    9dea:	4b14      	ldr	r3, [pc, #80]	; (9e3c <bt_att_send+0xcc>)
    9dec:	4815      	ldr	r0, [pc, #84]	; (9e44 <bt_att_send+0xd4>)
    9dee:	1a9b      	subs	r3, r3, r2
    9df0:	08db      	lsrs	r3, r3, #3
    9df2:	f363 118f 	bfi	r1, r3, #6, #10
    9df6:	f016 ff05 	bl	20c04 <log_0>
    9dfa:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
    9dfe:	f014 fe6f 	bl	1eae0 <z_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf));

	return 0;
}
    9e02:	4620      	mov	r0, r4
    9e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf));
    9e08:	b95e      	cbnz	r6, 9e22 <bt_att_send+0xb2>
	switch (att_op_get_type(buf->data[0])) {
    9e0a:	68ab      	ldr	r3, [r5, #8]
    9e0c:	7818      	ldrb	r0, [r3, #0]
    9e0e:	f7ff fa2d 	bl	926c <att_op_get_type>
    9e12:	3801      	subs	r0, #1
    9e14:	b2c0      	uxtb	r0, r0
    9e16:	2804      	cmp	r0, #4
    9e18:	bf96      	itet	ls
    9e1a:	4b0b      	ldrls	r3, [pc, #44]	; (9e48 <bt_att_send+0xd8>)
    9e1c:	4e0b      	ldrhi	r6, [pc, #44]	; (9e4c <bt_att_send+0xdc>)
    9e1e:	f853 6020 	ldrls.w	r6, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf));
    9e22:	4633      	mov	r3, r6
    9e24:	462a      	mov	r2, r5
    9e26:	2104      	movs	r1, #4
    9e28:	4640      	mov	r0, r8
    9e2a:	f018 fb7e 	bl	2252a <bt_l2cap_send_cb>
	return 0;
    9e2e:	2400      	movs	r4, #0
    9e30:	e7e7      	b.n	9e02 <bt_att_send+0x92>
		return -EINVAL;
    9e32:	f06f 0415 	mvn.w	r4, #21
    9e36:	e7e4      	b.n	9e02 <bt_att_send+0x92>
    9e38:	00025880 	.word	0x00025880
    9e3c:	00025880 	.word	0x00025880
    9e40:	000277ac 	.word	0x000277ac
    9e44:	0002789c 	.word	0x0002789c
    9e48:	00025eb4 	.word	0x00025eb4
    9e4c:	00022901 	.word	0x00022901

00009e50 <gatt_notify>:
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len, bt_gatt_complete_func_t cb)
{
    9e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e54:	468b      	mov	fp, r1
    9e56:	4692      	mov	sl, r2
	if (!bt_gatt_change_aware(conn, false)) {
		return -EAGAIN;
	}
#endif

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    9e58:	211b      	movs	r1, #27
    9e5a:	1c9a      	adds	r2, r3, #2
{
    9e5c:	4680      	mov	r8, r0
    9e5e:	461e      	mov	r6, r3
    9e60:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    9e64:	f7ff fbba 	bl	95dc <bt_att_create_pdu>
	if (!buf) {
    9e68:	4604      	mov	r4, r0
    9e6a:	b1c0      	cbz	r0, 9e9e <gatt_notify+0x4e>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    9e6c:	f100 0708 	add.w	r7, r0, #8
    9e70:	2102      	movs	r1, #2
    9e72:	4638      	mov	r0, r7
    9e74:	f01a ff2a 	bl	24ccc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    9e78:	4605      	mov	r5, r0

	net_buf_add(buf, len);
    9e7a:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    9e7c:	f825 bb02 	strh.w	fp, [r5], #2
	net_buf_add(buf, len);
    9e80:	4638      	mov	r0, r7
    9e82:	f01a ff23 	bl	24ccc <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    9e86:	4632      	mov	r2, r6
    9e88:	4651      	mov	r1, sl
    9e8a:	4628      	mov	r0, r5
    9e8c:	f017 fffb 	bl	21e86 <memcpy>

	return bt_att_send(conn, buf, cb);
    9e90:	464a      	mov	r2, r9
    9e92:	4621      	mov	r1, r4
    9e94:	4640      	mov	r0, r8
}
    9e96:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_att_send(conn, buf, cb);
    9e9a:	f7ff bf69 	b.w	9d70 <bt_att_send>
		BT_WARN("No buffer available to send notification");
    9e9e:	2302      	movs	r3, #2
    9ea0:	f04f 0100 	mov.w	r1, #0
    9ea4:	4a07      	ldr	r2, [pc, #28]	; (9ec4 <gatt_notify+0x74>)
    9ea6:	4808      	ldr	r0, [pc, #32]	; (9ec8 <gatt_notify+0x78>)
    9ea8:	f363 0107 	bfi	r1, r3, #0, #8
    9eac:	4b07      	ldr	r3, [pc, #28]	; (9ecc <gatt_notify+0x7c>)
    9eae:	1a9b      	subs	r3, r3, r2
    9eb0:	08db      	lsrs	r3, r3, #3
    9eb2:	f363 118f 	bfi	r1, r3, #6, #10
    9eb6:	f016 fea5 	bl	20c04 <log_0>
}
    9eba:	f06f 000b 	mvn.w	r0, #11
    9ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ec2:	bf00      	nop
    9ec4:	00025880 	.word	0x00025880
    9ec8:	00027a3c 	.word	0x00027a3c
    9ecc:	000258e8 	.word	0x000258e8

00009ed0 <disconnected_cb>:

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    9ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ed4:	6882      	ldr	r2, [r0, #8]
    9ed6:	4b2b      	ldr	r3, [pc, #172]	; (9f84 <disconnected_cb+0xb4>)
    9ed8:	429a      	cmp	r2, r3
{
    9eda:	b085      	sub	sp, #20
    9edc:	4681      	mov	r9, r0
    9ede:	460f      	mov	r7, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ee0:	d110      	bne.n	9f04 <disconnected_cb+0x34>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    9ee2:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    9ee4:	892b      	ldrh	r3, [r5, #8]
    9ee6:	b16b      	cbz	r3, 9f04 <disconnected_cb+0x34>
	}

	/* Checking if all values are disabled */
	value_used = false;

	for (i = 0; i < ccc->cfg_len; i++) {
    9ee8:	2600      	movs	r6, #0
	value_used = false;
    9eea:	4634      	mov	r4, r6

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9eec:	f101 0b48 	add.w	fp, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    9ef0:	686b      	ldr	r3, [r5, #4]
    9ef2:	429e      	cmp	r6, r3
    9ef4:	d30a      	bcc.n	9f0c <disconnected_cb+0x3c>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    9ef6:	b92c      	cbnz	r4, 9f04 <disconnected_cb+0x34>
		ccc->value = 0;
		if (ccc->cfg_changed) {
    9ef8:	68eb      	ldr	r3, [r5, #12]
		ccc->value = 0;
    9efa:	812c      	strh	r4, [r5, #8]
		if (ccc->cfg_changed) {
    9efc:	b113      	cbz	r3, 9f04 <disconnected_cb+0x34>
			ccc->cfg_changed(attr, ccc->value);
    9efe:	4621      	mov	r1, r4
    9f00:	4648      	mov	r0, r9
    9f02:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    9f04:	2001      	movs	r0, #1
    9f06:	b005      	add	sp, #20
    9f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    9f0c:	682a      	ldr	r2, [r5, #0]
    9f0e:	0133      	lsls	r3, r6, #4
    9f10:	eb02 0a03 	add.w	sl, r2, r3
		if (!cfg->value) {
    9f14:	f8ba 1008 	ldrh.w	r1, [sl, #8]
    9f18:	b151      	cbz	r1, 9f30 <disconnected_cb+0x60>
		if (conn->id != cfg->id ||
    9f1a:	7a38      	ldrb	r0, [r7, #8]
    9f1c:	5cd1      	ldrb	r1, [r2, r3]
    9f1e:	4288      	cmp	r0, r1
    9f20:	f10a 0801 	add.w	r8, sl, #1
    9f24:	d006      	beq.n	9f34 <disconnected_cb+0x64>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9f26:	4641      	mov	r1, r8
    9f28:	5cd0      	ldrb	r0, [r2, r3]
    9f2a:	f7fe fe7b 	bl	8c24 <bt_conn_lookup_addr_le>
			if (tmp) {
    9f2e:	b9e0      	cbnz	r0, 9f6a <disconnected_cb+0x9a>
	for (i = 0; i < ccc->cfg_len; i++) {
    9f30:	3601      	adds	r6, #1
    9f32:	e7dd      	b.n	9ef0 <disconnected_cb+0x20>
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    9f34:	4641      	mov	r1, r8
    9f36:	4638      	mov	r0, r7
    9f38:	e9cd 3200 	strd	r3, r2, [sp]
    9f3c:	f018 fa27 	bl	2238e <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    9f40:	e9dd 3200 	ldrd	r3, r2, [sp]
    9f44:	2800      	cmp	r0, #0
    9f46:	d1ee      	bne.n	9f26 <disconnected_cb+0x56>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9f48:	4659      	mov	r1, fp
    9f4a:	7a38      	ldrb	r0, [r7, #8]
    9f4c:	f018 f9cb 	bl	222e6 <bt_addr_le_is_bonded>
    9f50:	b990      	cbnz	r0, 9f78 <disconnected_cb+0xa8>
				bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    9f52:	9002      	str	r0, [sp, #8]
    9f54:	9000      	str	r0, [sp, #0]
    9f56:	f8cd 000b 	str.w	r0, [sp, #11]
    9f5a:	a902      	add	r1, sp, #8
    9f5c:	4640      	mov	r0, r8
    9f5e:	f018 fe28 	bl	22bb2 <bt_addr_le_copy>
				cfg->value = 0;
    9f62:	9b00      	ldr	r3, [sp, #0]
    9f64:	f8aa 3008 	strh.w	r3, [sl, #8]
    9f68:	e7e2      	b.n	9f30 <disconnected_cb+0x60>
				if (tmp->state == BT_CONN_CONNECTED) {
    9f6a:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
    9f6c:	2b04      	cmp	r3, #4
    9f6e:	bf08      	it	eq
    9f70:	2401      	moveq	r4, #1
				bt_conn_unref(tmp);
    9f72:	f018 fa2b 	bl	223cc <bt_conn_unref>
    9f76:	e7db      	b.n	9f30 <disconnected_cb+0x60>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9f78:	4659      	mov	r1, fp
    9f7a:	4640      	mov	r0, r8
    9f7c:	f018 fe19 	bl	22bb2 <bt_addr_le_copy>
    9f80:	e7d6      	b.n	9f30 <disconnected_cb+0x60>
    9f82:	bf00      	nop
    9f84:	0000a41d 	.word	0x0000a41d

00009f88 <gatt_register>:
Z_GENLIST_IS_EMPTY(slist)
    9f88:	4a1e      	ldr	r2, [pc, #120]	; (a004 <gatt_register+0x7c>)
	if (sys_slist_is_empty(&db)) {
    9f8a:	6813      	ldr	r3, [r2, #0]
{
    9f8c:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_attr *attrs = svc->attrs;
    9f8e:	6805      	ldr	r5, [r0, #0]
	u16_t count = svc->attr_count;
    9f90:	8884      	ldrh	r4, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    9f92:	b143      	cbz	r3, 9fa6 <gatt_register+0x1e>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9f94:	6853      	ldr	r3, [r2, #4]
    9f96:	b393      	cbz	r3, 9ffe <gatt_register+0x76>
	handle = last->attrs[last->attr_count - 1].handle;
    9f98:	e953 3102 	ldrd	r3, r1, [r3, #-8]
    9f9c:	2614      	movs	r6, #20
    9f9e:	fb06 3301 	mla	r3, r6, r1, r3
    9fa2:	f833 3c04 	ldrh.w	r3, [r3, #-4]
	for (; attrs && count; attrs++, count--) {
    9fa6:	b105      	cbz	r5, 9faa <gatt_register+0x22>
    9fa8:	b944      	cbnz	r4, 9fbc <gatt_register+0x34>
	parent->next = child;
    9faa:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    9fac:	f100 0108 	add.w	r1, r0, #8
    9fb0:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    9fb2:	6850      	ldr	r0, [r2, #4]
    9fb4:	b9f8      	cbnz	r0, 9ff6 <gatt_register+0x6e>
	list->head = node;
    9fb6:	e9c2 1100 	strd	r1, r1, [r2]
    9fba:	e01b      	b.n	9ff4 <gatt_register+0x6c>
		if (!attrs->handle) {
    9fbc:	8a29      	ldrh	r1, [r5, #16]
    9fbe:	b939      	cbnz	r1, 9fd0 <gatt_register+0x48>
			attrs->handle = ++handle;
    9fc0:	3301      	adds	r3, #1
    9fc2:	b299      	uxth	r1, r3
    9fc4:	8229      	strh	r1, [r5, #16]
	for (; attrs && count; attrs++, count--) {
    9fc6:	3c01      	subs	r4, #1
    9fc8:	3514      	adds	r5, #20
    9fca:	b2a4      	uxth	r4, r4
    9fcc:	460b      	mov	r3, r1
    9fce:	e7ea      	b.n	9fa6 <gatt_register+0x1e>
		} else if (attrs->handle > handle) {
    9fd0:	4299      	cmp	r1, r3
    9fd2:	d8f8      	bhi.n	9fc6 <gatt_register+0x3e>
			BT_ERR("Unable to register handle 0x%04x",
    9fd4:	2301      	movs	r3, #1
    9fd6:	f04f 0200 	mov.w	r2, #0
    9fda:	f363 0207 	bfi	r2, r3, #0, #8
    9fde:	480a      	ldr	r0, [pc, #40]	; (a008 <gatt_register+0x80>)
    9fe0:	4b0a      	ldr	r3, [pc, #40]	; (a00c <gatt_register+0x84>)
    9fe2:	1a1b      	subs	r3, r3, r0
    9fe4:	08db      	lsrs	r3, r3, #3
    9fe6:	480a      	ldr	r0, [pc, #40]	; (a010 <gatt_register+0x88>)
    9fe8:	f363 128f 	bfi	r2, r3, #6, #10
    9fec:	f016 fe17 	bl	20c1e <log_1>
			return -EINVAL;
    9ff0:	f06f 0015 	mvn.w	r0, #21
}
    9ff4:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    9ff6:	6001      	str	r1, [r0, #0]
	list->tail = node;
    9ff8:	6051      	str	r1, [r2, #4]
	return 0;
    9ffa:	4618      	mov	r0, r3
    9ffc:	e7fa      	b.n	9ff4 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    9ffe:	681b      	ldr	r3, [r3, #0]
    a000:	deff      	udf	#255	; 0xff
    a002:	bf00      	nop
    a004:	20000b10 	.word	0x20000b10
    a008:	00025880 	.word	0x00025880
    a00c:	000258e8 	.word	0x000258e8
    a010:	00027a65 	.word	0x00027a65

0000a014 <gatt_indicate>:
{
    a014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    a018:	694b      	ldr	r3, [r1, #20]
{
    a01a:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    a01c:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    a01e:	6818      	ldr	r0, [r3, #0]
    a020:	2300      	movs	r3, #0
{
    a022:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    a024:	f88d 3004 	strb.w	r3, [sp, #4]
    a028:	a901      	add	r1, sp, #4
    a02a:	f642 0303 	movw	r3, #10243	; 0x2803
    a02e:	f8ad 3006 	strh.w	r3, [sp, #6]
    a032:	f018 f874 	bl	2211e <bt_uuid_cmp>
    a036:	b930      	cbnz	r0, a046 <gatt_indicate+0x32>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    a038:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    a03a:	68db      	ldr	r3, [r3, #12]
    a03c:	791b      	ldrb	r3, [r3, #4]
    a03e:	069b      	lsls	r3, r3, #26
    a040:	d54e      	bpl.n	a0e0 <gatt_indicate+0xcc>
		value_handle += 1;
    a042:	3501      	adds	r5, #1
    a044:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    a046:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a048:	211d      	movs	r1, #29
    a04a:	3202      	adds	r2, #2
    a04c:	4648      	mov	r0, r9
    a04e:	f7ff fac5 	bl	95dc <bt_att_create_pdu>
	if (!buf) {
    a052:	4606      	mov	r6, r0
    a054:	b998      	cbnz	r0, a07e <gatt_indicate+0x6a>
		BT_WARN("No buffer available to send indication");
    a056:	2302      	movs	r3, #2
    a058:	f04f 0100 	mov.w	r1, #0
    a05c:	f363 0107 	bfi	r1, r3, #0, #8
    a060:	4a21      	ldr	r2, [pc, #132]	; (a0e8 <gatt_indicate+0xd4>)
    a062:	4b22      	ldr	r3, [pc, #136]	; (a0ec <gatt_indicate+0xd8>)
    a064:	4822      	ldr	r0, [pc, #136]	; (a0f0 <gatt_indicate+0xdc>)
    a066:	1a9b      	subs	r3, r3, r2
    a068:	08db      	lsrs	r3, r3, #3
    a06a:	f363 118f 	bfi	r1, r3, #6, #10
    a06e:	f016 fdc9 	bl	20c04 <log_0>
		return -ENOMEM;
    a072:	f06f 040b 	mvn.w	r4, #11
}
    a076:	4620      	mov	r0, r4
    a078:	b003      	add	sp, #12
    a07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    a07e:	f100 0708 	add.w	r7, r0, #8
    a082:	2102      	movs	r1, #2
    a084:	4638      	mov	r0, r7
    a086:	f01a fe21 	bl	24ccc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    a08a:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    a08c:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    a08e:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    a092:	4638      	mov	r0, r7
    a094:	f01a fe1a 	bl	24ccc <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a098:	8c22      	ldrh	r2, [r4, #32]
    a09a:	69e1      	ldr	r1, [r4, #28]
    a09c:	4640      	mov	r0, r8
    a09e:	f017 fef2 	bl	21e86 <memcpy>
		req->func = func;
    a0a2:	4b14      	ldr	r3, [pc, #80]	; (a0f4 <gatt_indicate+0xe0>)
    a0a4:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    a0a6:	2300      	movs	r3, #0
		req->buf = buf;
    a0a8:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    a0aa:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    a0ac:	4621      	mov	r1, r4
    a0ae:	4648      	mov	r0, r9
    a0b0:	f018 fd30 	bl	22b14 <bt_att_req_send>
	if (err) {
    a0b4:	4604      	mov	r4, r0
    a0b6:	2800      	cmp	r0, #0
    a0b8:	d0dd      	beq.n	a076 <gatt_indicate+0x62>
		BT_ERR("Error sending ATT PDU: %d", err);
    a0ba:	2301      	movs	r3, #1
    a0bc:	f04f 0200 	mov.w	r2, #0
    a0c0:	f363 0207 	bfi	r2, r3, #0, #8
    a0c4:	4908      	ldr	r1, [pc, #32]	; (a0e8 <gatt_indicate+0xd4>)
    a0c6:	4b09      	ldr	r3, [pc, #36]	; (a0ec <gatt_indicate+0xd8>)
    a0c8:	1a5b      	subs	r3, r3, r1
    a0ca:	08db      	lsrs	r3, r3, #3
    a0cc:	4601      	mov	r1, r0
    a0ce:	f363 128f 	bfi	r2, r3, #6, #10
    a0d2:	4809      	ldr	r0, [pc, #36]	; (a0f8 <gatt_indicate+0xe4>)
    a0d4:	f016 fda3 	bl	20c1e <log_1>
		net_buf_unref(buf);
    a0d8:	4630      	mov	r0, r6
    a0da:	f013 fb45 	bl	1d768 <net_buf_unref>
    a0de:	e7ca      	b.n	a076 <gatt_indicate+0x62>
			return -EINVAL;
    a0e0:	f06f 0415 	mvn.w	r4, #21
    a0e4:	e7c7      	b.n	a076 <gatt_indicate+0x62>
    a0e6:	bf00      	nop
    a0e8:	00025880 	.word	0x00025880
    a0ec:	000258e8 	.word	0x000258e8
    a0f0:	000279fb 	.word	0x000279fb
    a0f4:	00022b91 	.word	0x00022b91
    a0f8:	00027a22 	.word	0x00027a22

0000a0fc <ccc_save>:
	struct ccc_store store[CCC_STORE_MAX];
	size_t count;
};

static u8_t ccc_save(const struct bt_gatt_attr *attr, void *user_data)
{
    a0fc:	b538      	push	{r3, r4, r5, lr}
	struct ccc_save *save = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a0fe:	6882      	ldr	r2, [r0, #8]
    a100:	4b0b      	ldr	r3, [pc, #44]	; (a130 <ccc_save+0x34>)
    a102:	429a      	cmp	r2, r3
{
    a104:	4605      	mov	r5, r0
    a106:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a108:	d10f      	bne.n	a12a <ccc_save+0x2e>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, save->addr);
    a10a:	6809      	ldr	r1, [r1, #0]
    a10c:	68c0      	ldr	r0, [r0, #12]
    a10e:	f018 fdb5 	bl	22c7c <ccc_find_cfg>
	if (!cfg) {
    a112:	b150      	cbz	r0, a12a <ccc_save+0x2e>
	}

	BT_DBG("Storing CCCs handle 0x%04x value 0x%04x", attr->handle,
	       cfg->value);

	save->store[save->count].handle = attr->handle;
    a114:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    a118:	8a29      	ldrh	r1, [r5, #16]
    a11a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->store[save->count].value = cfg->value;
	save->count++;
    a11e:	3301      	adds	r3, #1
	save->store[save->count].handle = attr->handle;
    a120:	8091      	strh	r1, [r2, #4]
	save->store[save->count].value = cfg->value;
    a122:	8901      	ldrh	r1, [r0, #8]
    a124:	80d1      	strh	r1, [r2, #6]
	save->count++;
    a126:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	return BT_GATT_ITER_CONTINUE;
}
    a12a:	2001      	movs	r0, #1
    a12c:	bd38      	pop	{r3, r4, r5, pc}
    a12e:	bf00      	nop
    a130:	0000a41d 	.word	0x0000a41d

0000a134 <ccc_load>:
	struct ccc_store *entry;
	size_t count;
};

static u8_t ccc_load(const struct bt_gatt_attr *attr, void *user_data)
{
    a134:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ccc_load *load = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a136:	6882      	ldr	r2, [r0, #8]
    a138:	4b23      	ldr	r3, [pc, #140]	; (a1c8 <ccc_load+0x94>)
    a13a:	429a      	cmp	r2, r3
{
    a13c:	b085      	sub	sp, #20
    a13e:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a140:	d002      	beq.n	a148 <ccc_load+0x14>
	ccc = attr->user_data;

	/* Clear if value was invalidade */
	if (!load->entry) {
		ccc_clear(ccc, &load->addr);
		return BT_GATT_ITER_CONTINUE;
    a142:	2001      	movs	r0, #1
next:
	load->entry++;
	load->count--;

	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
    a144:	b005      	add	sp, #20
    a146:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!load->entry) {
    a148:	688d      	ldr	r5, [r1, #8]
	ccc = attr->user_data;
    a14a:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    a14c:	b97d      	cbnz	r5, a16e <ccc_load+0x3a>
	cfg = ccc_find_cfg(ccc, addr);
    a14e:	3101      	adds	r1, #1
    a150:	4630      	mov	r0, r6
    a152:	f018 fd93 	bl	22c7c <ccc_find_cfg>
	if (!cfg) {
    a156:	4604      	mov	r4, r0
    a158:	2800      	cmp	r0, #0
    a15a:	d0f2      	beq.n	a142 <ccc_load+0xe>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    a15c:	a902      	add	r1, sp, #8
    a15e:	3001      	adds	r0, #1
    a160:	9502      	str	r5, [sp, #8]
    a162:	f8cd 500b 	str.w	r5, [sp, #11]
    a166:	f018 fd24 	bl	22bb2 <bt_addr_le_copy>
	cfg->value = 0;
    a16a:	8125      	strh	r5, [r4, #8]
    a16c:	e7e9      	b.n	a142 <ccc_load+0xe>
	} else if (!load->count) {
    a16e:	68cb      	ldr	r3, [r1, #12]
    a170:	b33b      	cbz	r3, a1c2 <ccc_load+0x8e>
	if (load->entry->handle != attr->handle) {
    a172:	882a      	ldrh	r2, [r5, #0]
    a174:	8a03      	ldrh	r3, [r0, #16]
    a176:	429a      	cmp	r2, r3
    a178:	d00a      	beq.n	a190 <ccc_load+0x5c>
		if (load->entry->handle < attr->handle) {
    a17a:	d2e2      	bcs.n	a142 <ccc_load+0xe>
	load->count--;
    a17c:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    a17e:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    a180:	3801      	subs	r0, #1
	load->entry++;
    a182:	3304      	adds	r3, #4
	load->count--;
    a184:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a186:	3000      	adds	r0, #0
	load->entry++;
    a188:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a18a:	bf18      	it	ne
    a18c:	2001      	movne	r0, #1
    a18e:	e7d9      	b.n	a144 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, &load->addr);
    a190:	1c4f      	adds	r7, r1, #1
    a192:	4639      	mov	r1, r7
    a194:	4630      	mov	r0, r6
    a196:	f018 fd71 	bl	22c7c <ccc_find_cfg>
	if (!cfg) {
    a19a:	4605      	mov	r5, r0
    a19c:	b968      	cbnz	r0, a1ba <ccc_load+0x86>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY);
    a19e:	9000      	str	r0, [sp, #0]
    a1a0:	4669      	mov	r1, sp
    a1a2:	f8cd 0003 	str.w	r0, [sp, #3]
    a1a6:	4630      	mov	r0, r6
    a1a8:	f018 fd68 	bl	22c7c <ccc_find_cfg>
		if (!cfg) {
    a1ac:	4605      	mov	r5, r0
    a1ae:	2800      	cmp	r0, #0
    a1b0:	d0e4      	beq.n	a17c <ccc_load+0x48>
		bt_addr_le_copy(&cfg->peer, &load->addr);
    a1b2:	4639      	mov	r1, r7
    a1b4:	3001      	adds	r0, #1
    a1b6:	f018 fcfc 	bl	22bb2 <bt_addr_le_copy>
	cfg->value = load->entry->value;
    a1ba:	68a3      	ldr	r3, [r4, #8]
    a1bc:	885b      	ldrh	r3, [r3, #2]
    a1be:	812b      	strh	r3, [r5, #8]
    a1c0:	e7dc      	b.n	a17c <ccc_load+0x48>
		return BT_GATT_ITER_STOP;
    a1c2:	4618      	mov	r0, r3
    a1c4:	e7be      	b.n	a144 <ccc_load+0x10>
    a1c6:	bf00      	nop
    a1c8:	0000a41d 	.word	0x0000a41d

0000a1cc <find_cf_cfg>:
{
    a1cc:	b507      	push	{r0, r1, r2, lr}
		if (!conn) {
    a1ce:	b960      	cbnz	r0, a1ea <find_cf_cfg+0x1e>
			if (!bt_addr_le_cmp(&cf_cfg[i].peer, BT_ADDR_LE_ANY)) {
    a1d0:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    a1d2:	2207      	movs	r2, #7
    a1d4:	f8cd 0003 	str.w	r0, [sp, #3]
    a1d8:	4669      	mov	r1, sp
    a1da:	4807      	ldr	r0, [pc, #28]	; (a1f8 <find_cf_cfg+0x2c>)
    a1dc:	f017 fe2c 	bl	21e38 <memcmp>
    a1e0:	b938      	cbnz	r0, a1f2 <find_cf_cfg+0x26>
				return &cf_cfg[i];
    a1e2:	4806      	ldr	r0, [pc, #24]	; (a1fc <find_cf_cfg+0x30>)
}
    a1e4:	b003      	add	sp, #12
    a1e6:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if (!bt_conn_addr_le_cmp(conn, &cf_cfg[i].peer)) {
    a1ea:	4903      	ldr	r1, [pc, #12]	; (a1f8 <find_cf_cfg+0x2c>)
    a1ec:	f018 f8cf 	bl	2238e <bt_conn_addr_le_cmp>
    a1f0:	e7f6      	b.n	a1e0 <find_cf_cfg+0x14>
	return NULL;
    a1f2:	2000      	movs	r0, #0
    a1f4:	e7f6      	b.n	a1e4 <find_cf_cfg+0x18>
    a1f6:	bf00      	nop
    a1f8:	20000b01 	.word	0x20000b01
    a1fc:	20000b00 	.word	0x20000b00

0000a200 <sc_indicate_rsp>:
{
    a200:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a202:	4b13      	ldr	r3, [pc, #76]	; (a250 <sc_indicate_rsp+0x50>)
    a204:	f3bf 8f5b 	dmb	ish
    a208:	4604      	mov	r4, r0
    a20a:	e853 2f00 	ldrex	r2, [r3]
    a20e:	f022 0202 	bic.w	r2, r2, #2
    a212:	e843 2100 	strex	r1, r2, [r3]
    a216:	2900      	cmp	r1, #0
    a218:	d1f7      	bne.n	a20a <sc_indicate_rsp+0xa>
    a21a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a21e:	2100      	movs	r1, #0
    a220:	4618      	mov	r0, r3
    a222:	f018 fcbd 	bl	22ba0 <atomic_test_bit>
    a226:	b128      	cbz	r0, a234 <sc_indicate_rsp+0x34>
    a228:	2200      	movs	r2, #0
    a22a:	f1a3 0120 	sub.w	r1, r3, #32
    a22e:	4809      	ldr	r0, [pc, #36]	; (a254 <sc_indicate_rsp+0x54>)
    a230:	f014 fdbe 	bl	1edb0 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    a234:	4620      	mov	r0, r4
    a236:	f7ff ffc9 	bl	a1cc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    a23a:	b140      	cbz	r0, a24e <sc_indicate_rsp+0x4e>
    a23c:	7a03      	ldrb	r3, [r0, #8]
    a23e:	07db      	lsls	r3, r3, #31
    a240:	d505      	bpl.n	a24e <sc_indicate_rsp+0x4e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a242:	2100      	movs	r1, #0
    a244:	300c      	adds	r0, #12
}
    a246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a24a:	f018 bcb5 	b.w	22bb8 <atomic_set_bit>
}
    a24e:	bd10      	pop	{r4, pc}
    a250:	20000b80 	.word	0x20000b80
    a254:	20001d2c 	.word	0x20001d2c

0000a258 <cf_write>:
{
    a258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a25c:	4690      	mov	r8, r2
    a25e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    a262:	2a01      	cmp	r2, #1
{
    a264:	4606      	mov	r6, r0
    a266:	461f      	mov	r7, r3
	if (offset > sizeof(cfg->data)) {
    a268:	d844      	bhi.n	a2f4 <cf_write+0x9c>
	if (offset + len > sizeof(cfg->data)) {
    a26a:	441a      	add	r2, r3
    a26c:	2a01      	cmp	r2, #1
    a26e:	461d      	mov	r5, r3
    a270:	dc43      	bgt.n	a2fa <cf_write+0xa2>
	cfg = find_cf_cfg(conn);
    a272:	f7ff ffab 	bl	a1cc <find_cf_cfg>
	if (!cfg) {
    a276:	4604      	mov	r4, r0
    a278:	b9b0      	cbnz	r0, a2a8 <cf_write+0x50>
		cfg = find_cf_cfg(NULL);
    a27a:	f7ff ffa7 	bl	a1cc <find_cf_cfg>
	if (!cfg) {
    a27e:	4604      	mov	r4, r0
    a280:	b990      	cbnz	r0, a2a8 <cf_write+0x50>
		BT_WARN("No space to store Client Supported Features");
    a282:	2302      	movs	r3, #2
    a284:	f04f 0100 	mov.w	r1, #0
    a288:	f363 0107 	bfi	r1, r3, #0, #8
    a28c:	4a1c      	ldr	r2, [pc, #112]	; (a300 <cf_write+0xa8>)
    a28e:	4b1d      	ldr	r3, [pc, #116]	; (a304 <cf_write+0xac>)
    a290:	481d      	ldr	r0, [pc, #116]	; (a308 <cf_write+0xb0>)
    a292:	1a9b      	subs	r3, r3, r2
    a294:	08db      	lsrs	r3, r3, #3
    a296:	f363 118f 	bfi	r1, r3, #6, #10
    a29a:	f016 fcb3 	bl	20c04 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a29e:	f06f 0510 	mvn.w	r5, #16
}
    a2a2:	4628      	mov	r0, r5
    a2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < len && i < last_byte; i++) {
    a2a8:	2300      	movs	r3, #0
    a2aa:	429f      	cmp	r7, r3
    a2ac:	d915      	bls.n	a2da <cf_write+0x82>
    a2ae:	b13b      	cbz	r3, a2c0 <cf_write+0x68>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
    a2b0:	f898 3000 	ldrb.w	r3, [r8]
    a2b4:	7a22      	ldrb	r2, [r4, #8]
    a2b6:	f003 0301 	and.w	r3, r3, #1
    a2ba:	4313      	orrs	r3, r2
    a2bc:	7223      	strb	r3, [r4, #8]
		BT_DBG("byte %u: data 0x%02x value 0x%02x", i, cfg->data[i],
    a2be:	e00e      	b.n	a2de <cf_write+0x86>
    a2c0:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
    a2c2:	f898 2000 	ldrb.w	r2, [r8]
    a2c6:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
    a2c8:	07d0      	lsls	r0, r2, #31
	for (i = 0; i < len && i < last_byte; i++) {
    a2ca:	f04f 0301 	mov.w	r3, #1
			if ((BIT(bit) & chg_bits) &&
    a2ce:	d5ec      	bpl.n	a2aa <cf_write+0x52>
    a2d0:	07ca      	lsls	r2, r1, #31
    a2d2:	d5ea      	bpl.n	a2aa <cf_write+0x52>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    a2d4:	f06f 0512 	mvn.w	r5, #18
    a2d8:	e7e3      	b.n	a2a2 <cf_write+0x4a>
	for (i = 0; i < len && i < last_byte; i++) {
    a2da:	2f00      	cmp	r7, #0
    a2dc:	d1e8      	bne.n	a2b0 <cf_write+0x58>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a2de:	f106 0148 	add.w	r1, r6, #72	; 0x48
    a2e2:	1c60      	adds	r0, r4, #1
    a2e4:	f018 fc65 	bl	22bb2 <bt_addr_le_copy>
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a2e8:	2100      	movs	r1, #0
    a2ea:	f104 000c 	add.w	r0, r4, #12
    a2ee:	f018 fc63 	bl	22bb8 <atomic_set_bit>
	return len;
    a2f2:	e7d6      	b.n	a2a2 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a2f4:	f06f 0506 	mvn.w	r5, #6
    a2f8:	e7d3      	b.n	a2a2 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a2fa:	f06f 050c 	mvn.w	r5, #12
    a2fe:	e7d0      	b.n	a2a2 <cf_write+0x4a>
    a300:	00025880 	.word	0x00025880
    a304:	000258e8 	.word	0x000258e8
    a308:	0002799d 	.word	0x0002799d

0000a30c <cf_set>:
{
	struct gatt_cf_cfg *cfg;
	bt_addr_le_t addr;
	int len, err;

	if (argc < 1) {
    a30c:	2800      	cmp	r0, #0
{
    a30e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    a312:	460d      	mov	r5, r1
    a314:	4617      	mov	r7, r2
	if (argc < 1) {
    a316:	dc13      	bgt.n	a340 <cf_set+0x34>
		BT_ERR("Insufficient number of arguments");
    a318:	2301      	movs	r3, #1
    a31a:	f04f 0100 	mov.w	r1, #0
    a31e:	f363 0107 	bfi	r1, r3, #0, #8
    a322:	4a36      	ldr	r2, [pc, #216]	; (a3fc <cf_set+0xf0>)
    a324:	4b36      	ldr	r3, [pc, #216]	; (a400 <cf_set+0xf4>)
    a326:	4837      	ldr	r0, [pc, #220]	; (a404 <cf_set+0xf8>)
    a328:	1a9b      	subs	r3, r3, r2
    a32a:	08db      	lsrs	r3, r3, #3
    a32c:	f363 118f 	bfi	r1, r3, #6, #10
    a330:	f016 fc68 	bl	20c04 <log_0>
	}

	err = bt_settings_decode_key(argv[0], &addr);
	if (err) {
		BT_ERR("Unable to decode address %s", argv[0]);
		return -EINVAL;
    a334:	f06f 0415 	mvn.w	r4, #21
	}

	BT_DBG("Restored CF for %s", bt_addr_le_str(&addr));

	return 0;
}
    a338:	4620      	mov	r0, r4
    a33a:	b004      	add	sp, #16
    a33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(argv[0], &addr);
    a340:	4669      	mov	r1, sp
    a342:	6828      	ldr	r0, [r5, #0]
    a344:	f017 feb8 	bl	220b8 <bt_settings_decode_key>
	if (err) {
    a348:	4604      	mov	r4, r0
    a34a:	b178      	cbz	r0, a36c <cf_set+0x60>
		BT_ERR("Unable to decode address %s", argv[0]);
    a34c:	2301      	movs	r3, #1
    a34e:	f04f 0200 	mov.w	r2, #0
    a352:	f363 0207 	bfi	r2, r3, #0, #8
    a356:	4929      	ldr	r1, [pc, #164]	; (a3fc <cf_set+0xf0>)
    a358:	4b29      	ldr	r3, [pc, #164]	; (a400 <cf_set+0xf4>)
    a35a:	482b      	ldr	r0, [pc, #172]	; (a408 <cf_set+0xfc>)
    a35c:	1a5b      	subs	r3, r3, r1
    a35e:	08db      	lsrs	r3, r3, #3
    a360:	f363 128f 	bfi	r2, r3, #6, #10
    a364:	6829      	ldr	r1, [r5, #0]
    a366:	f016 fc5a 	bl	20c1e <log_1>
    a36a:	e7e3      	b.n	a334 <cf_set+0x28>
    a36c:	2207      	movs	r2, #7
    a36e:	4927      	ldr	r1, [pc, #156]	; (a40c <cf_set+0x100>)
    a370:	4668      	mov	r0, sp
    a372:	f017 fd61 	bl	21e38 <memcmp>
		if (!bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
    a376:	b198      	cbz	r0, a3a0 <cf_set+0x94>
		cfg = find_cf_cfg(NULL);
    a378:	4620      	mov	r0, r4
    a37a:	f7ff ff27 	bl	a1cc <find_cf_cfg>
		if (!cfg) {
    a37e:	4605      	mov	r5, r0
    a380:	b978      	cbnz	r0, a3a2 <cf_set+0x96>
			BT_ERR("Unable to restore CF: no cfg left");
    a382:	2301      	movs	r3, #1
    a384:	f04f 0100 	mov.w	r1, #0
    a388:	f363 0107 	bfi	r1, r3, #0, #8
    a38c:	4a1b      	ldr	r2, [pc, #108]	; (a3fc <cf_set+0xf0>)
    a38e:	4b1c      	ldr	r3, [pc, #112]	; (a400 <cf_set+0xf4>)
    a390:	481f      	ldr	r0, [pc, #124]	; (a410 <cf_set+0x104>)
    a392:	1a9b      	subs	r3, r3, r2
    a394:	08db      	lsrs	r3, r3, #3
    a396:	f363 118f 	bfi	r1, r3, #6, #10
    a39a:	f016 fc33 	bl	20c04 <log_0>
			return 0;
    a39e:	e7cb      	b.n	a338 <cf_set+0x2c>
			return &cf_cfg[i];
    a3a0:	4d1c      	ldr	r5, [pc, #112]	; (a414 <cf_set+0x108>)
	if (settings_val_get_len_cb(val_ctx)) {
    a3a2:	4638      	mov	r0, r7
    a3a4:	f017 fbfd 	bl	21ba2 <settings_val_get_len_cb>
    a3a8:	f105 0808 	add.w	r8, r5, #8
    a3ac:	4606      	mov	r6, r0
    a3ae:	b1b8      	cbz	r0, a3e0 <cf_set+0xd4>
		len = settings_val_read_cb(val_ctx, cfg->data,
    a3b0:	2201      	movs	r2, #1
    a3b2:	4641      	mov	r1, r8
    a3b4:	4638      	mov	r0, r7
    a3b6:	f017 fbd7 	bl	21b68 <settings_val_read_cb>
		if (len < 0) {
    a3ba:	1e05      	subs	r5, r0, #0
    a3bc:	dabc      	bge.n	a338 <cf_set+0x2c>
			BT_ERR("Failed to decode value (err %d)", len);
    a3be:	2301      	movs	r3, #1
    a3c0:	f04f 0200 	mov.w	r2, #0
    a3c4:	f363 0207 	bfi	r2, r3, #0, #8
    a3c8:	490c      	ldr	r1, [pc, #48]	; (a3fc <cf_set+0xf0>)
    a3ca:	4b0d      	ldr	r3, [pc, #52]	; (a400 <cf_set+0xf4>)
    a3cc:	4812      	ldr	r0, [pc, #72]	; (a418 <cf_set+0x10c>)
    a3ce:	1a5b      	subs	r3, r3, r1
    a3d0:	08db      	lsrs	r3, r3, #3
    a3d2:	f363 128f 	bfi	r2, r3, #6, #10
    a3d6:	4629      	mov	r1, r5
    a3d8:	f016 fc21 	bl	20c1e <log_1>
			return len;
    a3dc:	462c      	mov	r4, r5
    a3de:	e7ab      	b.n	a338 <cf_set+0x2c>
		bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    a3e0:	9002      	str	r0, [sp, #8]
    a3e2:	a902      	add	r1, sp, #8
    a3e4:	f8cd 000b 	str.w	r0, [sp, #11]
    a3e8:	1c68      	adds	r0, r5, #1
    a3ea:	f018 fbe2 	bl	22bb2 <bt_addr_le_copy>
		memset(cfg->data, 0, sizeof(cfg->data));
    a3ee:	2201      	movs	r2, #1
    a3f0:	4631      	mov	r1, r6
    a3f2:	4640      	mov	r0, r8
    a3f4:	f017 fd71 	bl	21eda <memset>
    a3f8:	e79e      	b.n	a338 <cf_set+0x2c>
    a3fa:	bf00      	nop
    a3fc:	00025880 	.word	0x00025880
    a400:	000258e8 	.word	0x000258e8
    a404:	0002791e 	.word	0x0002791e
    a408:	0002793f 	.word	0x0002793f
    a40c:	20000b01 	.word	0x20000b01
    a410:	0002795b 	.word	0x0002795b
    a414:	20000b00 	.word	0x20000b00
    a418:	0002797d 	.word	0x0002797d

0000a41c <bt_gatt_attr_write_ccc>:
{
    a41c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a420:	4688      	mov	r8, r1
    a422:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a426:	f8d8 700c 	ldr.w	r7, [r8, #12]
	if (offset > sizeof(u16_t)) {
    a42a:	2902      	cmp	r1, #2
{
    a42c:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    a42e:	d849      	bhi.n	a4c4 <bt_gatt_attr_write_ccc+0xa8>
	if (offset + len > sizeof(u16_t)) {
    a430:	4419      	add	r1, r3
    a432:	2902      	cmp	r1, #2
    a434:	461d      	mov	r5, r3
    a436:	dc48      	bgt.n	a4ca <bt_gatt_attr_write_ccc+0xae>
	return ((u16_t)src[1] << 8) | src[0];
    a438:	7853      	ldrb	r3, [r2, #1]
    a43a:	7814      	ldrb	r4, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
    a43c:	4639      	mov	r1, r7
    a43e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    a442:	f018 fc32 	bl	22caa <find_ccc_cfg>
	if (!cfg) {
    a446:	4606      	mov	r6, r0
    a448:	b9f0      	cbnz	r0, a488 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
    a44a:	b1a4      	cbz	r4, a476 <bt_gatt_attr_write_ccc+0x5a>
		cfg = find_ccc_cfg(NULL, ccc);
    a44c:	4639      	mov	r1, r7
    a44e:	f018 fc2c 	bl	22caa <find_ccc_cfg>
		if (!cfg) {
    a452:	4606      	mov	r6, r0
    a454:	b998      	cbnz	r0, a47e <bt_gatt_attr_write_ccc+0x62>
			BT_WARN("No space to store CCC cfg");
    a456:	2302      	movs	r3, #2
    a458:	f04f 0100 	mov.w	r1, #0
    a45c:	f363 0107 	bfi	r1, r3, #0, #8
    a460:	4a1b      	ldr	r2, [pc, #108]	; (a4d0 <bt_gatt_attr_write_ccc+0xb4>)
    a462:	4b1c      	ldr	r3, [pc, #112]	; (a4d4 <bt_gatt_attr_write_ccc+0xb8>)
    a464:	481c      	ldr	r0, [pc, #112]	; (a4d8 <bt_gatt_attr_write_ccc+0xbc>)
    a466:	1a9b      	subs	r3, r3, r2
    a468:	08db      	lsrs	r3, r3, #3
    a46a:	f363 118f 	bfi	r1, r3, #6, #10
    a46e:	f016 fbc9 	bl	20c04 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a472:	f06f 0510 	mvn.w	r5, #16
}
    a476:	4628      	mov	r0, r5
    a478:	b003      	add	sp, #12
    a47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a47e:	f109 0148 	add.w	r1, r9, #72	; 0x48
    a482:	3001      	adds	r0, #1
    a484:	f018 fb95 	bl	22bb2 <bt_addr_le_copy>
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
    a488:	693b      	ldr	r3, [r7, #16]
    a48a:	b993      	cbnz	r3, a4b2 <bt_gatt_attr_write_ccc+0x96>
	if (cfg->value != ccc->value) {
    a48c:	893b      	ldrh	r3, [r7, #8]
	cfg->value = value;
    a48e:	8134      	strh	r4, [r6, #8]
	if (cfg->value != ccc->value) {
    a490:	42a3      	cmp	r3, r4
    a492:	d003      	beq.n	a49c <bt_gatt_attr_write_ccc+0x80>
		gatt_ccc_changed(attr, ccc);
    a494:	4639      	mov	r1, r7
    a496:	4640      	mov	r0, r8
    a498:	f018 fb60 	bl	22b5c <gatt_ccc_changed>
	if (!value) {
    a49c:	2c00      	cmp	r4, #0
    a49e:	d1ea      	bne.n	a476 <bt_gatt_attr_write_ccc+0x5a>
		bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    a4a0:	4669      	mov	r1, sp
    a4a2:	1c70      	adds	r0, r6, #1
    a4a4:	9400      	str	r4, [sp, #0]
    a4a6:	f8cd 4003 	str.w	r4, [sp, #3]
    a4aa:	f018 fb82 	bl	22bb2 <bt_addr_le_copy>
		cfg->value = 0;
    a4ae:	8134      	strh	r4, [r6, #8]
    a4b0:	e7e1      	b.n	a476 <bt_gatt_attr_write_ccc+0x5a>
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
    a4b2:	4622      	mov	r2, r4
    a4b4:	4641      	mov	r1, r8
    a4b6:	4648      	mov	r0, r9
    a4b8:	4798      	blx	r3
    a4ba:	2800      	cmp	r0, #0
    a4bc:	d1e6      	bne.n	a48c <bt_gatt_attr_write_ccc+0x70>
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_NOT_PERMITTED);
    a4be:	f06f 0502 	mvn.w	r5, #2
    a4c2:	e7d8      	b.n	a476 <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a4c4:	f06f 0506 	mvn.w	r5, #6
    a4c8:	e7d5      	b.n	a476 <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a4ca:	f06f 050c 	mvn.w	r5, #12
    a4ce:	e7d2      	b.n	a476 <bt_gatt_attr_write_ccc+0x5a>
    a4d0:	00025880 	.word	0x00025880
    a4d4:	000258e8 	.word	0x000258e8
    a4d8:	000278b6 	.word	0x000278b6

0000a4dc <db_changed>:
{
    a4dc:	b513      	push	{r0, r1, r4, lr}
    a4de:	4c11      	ldr	r4, [pc, #68]	; (a524 <db_changed+0x48>)
    a4e0:	4911      	ldr	r1, [pc, #68]	; (a528 <db_changed+0x4c>)
    a4e2:	4812      	ldr	r0, [pc, #72]	; (a52c <db_changed+0x50>)
    a4e4:	220a      	movs	r2, #10
    a4e6:	f014 fc63 	bl	1edb0 <k_delayed_work_submit_to_queue>
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a4ea:	2300      	movs	r3, #0
    a4ec:	2207      	movs	r2, #7
    a4ee:	4669      	mov	r1, sp
    a4f0:	1c60      	adds	r0, r4, #1
    a4f2:	9300      	str	r3, [sp, #0]
    a4f4:	f8cd 3003 	str.w	r3, [sp, #3]
    a4f8:	f017 fc9e 	bl	21e38 <memcmp>
    a4fc:	b178      	cbz	r0, a51e <db_changed+0x42>
		if (CF_ROBUST_CACHING(cfg) &&
    a4fe:	7a23      	ldrb	r3, [r4, #8]
    a500:	07db      	lsls	r3, r3, #31
    a502:	d50c      	bpl.n	a51e <db_changed+0x42>
    a504:	f3bf 8f5b 	dmb	ish
    a508:	340c      	adds	r4, #12
    a50a:	e854 3f00 	ldrex	r3, [r4]
    a50e:	f023 0301 	bic.w	r3, r3, #1
    a512:	e844 3200 	strex	r2, r3, [r4]
    a516:	2a00      	cmp	r2, #0
    a518:	d1f7      	bne.n	a50a <db_changed+0x2e>
    a51a:	f3bf 8f5b 	dmb	ish
}
    a51e:	b002      	add	sp, #8
    a520:	bd10      	pop	{r4, pc}
    a522:	bf00      	nop
    a524:	20000b00 	.word	0x20000b00
    a528:	20000b18 	.word	0x20000b18
    a52c:	20001d2c 	.word	0x20001d2c

0000a530 <read_ppcp>:
{
    a530:	b513      	push	{r0, r1, r4, lr}
    a532:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a536:	4c0b      	ldr	r4, [pc, #44]	; (a564 <read_ppcp+0x34>)
{
    a538:	4610      	mov	r0, r2
	if (offset > value_len) {
    a53a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a53c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    a540:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    a544:	d80b      	bhi.n	a55e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    a546:	f1c1 0408 	rsb	r4, r1, #8
    a54a:	429c      	cmp	r4, r3
    a54c:	bfa8      	it	ge
    a54e:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    a550:	4622      	mov	r2, r4
    a552:	4469      	add	r1, sp
    a554:	f017 fc97 	bl	21e86 <memcpy>
}
    a558:	4620      	mov	r0, r4
    a55a:	b002      	add	sp, #8
    a55c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a55e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    a562:	e7f9      	b.n	a558 <read_ppcp+0x28>
    a564:	00280018 	.word	0x00280018

0000a568 <sc_indicate.constprop.22>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    a568:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a56a:	4a17      	ldr	r2, [pc, #92]	; (a5c8 <sc_indicate.constprop.22+0x60>)
    a56c:	f3bf 8f5b 	dmb	ish
    a570:	f102 0348 	add.w	r3, r2, #72	; 0x48
    a574:	e853 4f00 	ldrex	r4, [r3]
    a578:	f044 0c01 	orr.w	ip, r4, #1
    a57c:	e843 ce00 	strex	lr, ip, [r3]
    a580:	f1be 0f00 	cmp.w	lr, #0
    a584:	d1f6      	bne.n	a574 <sc_indicate.constprop.22+0xc>
    a586:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    a58a:	f014 0f01 	tst.w	r4, #1
    a58e:	4613      	mov	r3, r2
    a590:	d10d      	bne.n	a5ae <sc_indicate.constprop.22+0x46>
		sc->start = start;
    a592:	8490      	strh	r0, [r2, #36]	; 0x24
		sc->end = end;
    a594:	84d1      	strh	r1, [r2, #38]	; 0x26
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    a596:	2101      	movs	r1, #1
    a598:	480c      	ldr	r0, [pc, #48]	; (a5cc <sc_indicate.constprop.22+0x64>)
    a59a:	f018 fb01 	bl	22ba0 <atomic_test_bit>
    a59e:	b990      	cbnz	r0, a5c6 <sc_indicate.constprop.22+0x5e>
    a5a0:	220a      	movs	r2, #10
    a5a2:	490b      	ldr	r1, [pc, #44]	; (a5d0 <sc_indicate.constprop.22+0x68>)
    a5a4:	480b      	ldr	r0, [pc, #44]	; (a5d4 <sc_indicate.constprop.22+0x6c>)
}
    a5a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5aa:	f014 bc01 	b.w	1edb0 <k_delayed_work_submit_to_queue>
	if (new_start >= *start && new_end <= *end) {
    a5ae:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    a5b0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
    a5b2:	4284      	cmp	r4, r0
    a5b4:	d803      	bhi.n	a5be <sc_indicate.constprop.22+0x56>
    a5b6:	428a      	cmp	r2, r1
    a5b8:	d205      	bcs.n	a5c6 <sc_indicate.constprop.22+0x5e>
		*end = new_end;
    a5ba:	84d9      	strh	r1, [r3, #38]	; 0x26
    a5bc:	e7eb      	b.n	a596 <sc_indicate.constprop.22+0x2e>
	if (*end < new_end) {
    a5be:	428a      	cmp	r2, r1
		*start = new_start;
    a5c0:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    a5c2:	d2e8      	bcs.n	a596 <sc_indicate.constprop.22+0x2e>
    a5c4:	e7f9      	b.n	a5ba <sc_indicate.constprop.22+0x52>
}
    a5c6:	bd10      	pop	{r4, pc}
    a5c8:	20000b38 	.word	0x20000b38
    a5cc:	20000b80 	.word	0x20000b80
    a5d0:	20000b60 	.word	0x20000b60
    a5d4:	20001d2c 	.word	0x20001d2c

0000a5d8 <connected_cb>:
{
    a5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a5dc:	6882      	ldr	r2, [r0, #8]
    a5de:	4b19      	ldr	r3, [pc, #100]	; (a644 <connected_cb+0x6c>)
    a5e0:	429a      	cmp	r2, r3
{
    a5e2:	4607      	mov	r7, r0
    a5e4:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a5e6:	d128      	bne.n	a63a <connected_cb+0x62>
	ccc = attr->user_data;
    a5e8:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a5ea:	2600      	movs	r6, #0
    a5ec:	686b      	ldr	r3, [r5, #4]
    a5ee:	429e      	cmp	r6, r3
    a5f0:	d223      	bcs.n	a63a <connected_cb+0x62>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a5f2:	6829      	ldr	r1, [r5, #0]
    a5f4:	ea4f 1806 	mov.w	r8, r6, lsl #4
    a5f8:	4441      	add	r1, r8
    a5fa:	3101      	adds	r1, #1
    a5fc:	4620      	mov	r0, r4
    a5fe:	f017 fec6 	bl	2238e <bt_conn_addr_le_cmp>
    a602:	4681      	mov	r9, r0
    a604:	b9e0      	cbnz	r0, a640 <connected_cb+0x68>
		if (ccc->cfg[i].value) {
    a606:	682b      	ldr	r3, [r5, #0]
    a608:	4443      	add	r3, r8
    a60a:	891b      	ldrh	r3, [r3, #8]
    a60c:	b1c3      	cbz	r3, a640 <connected_cb+0x68>
			gatt_ccc_changed(attr, ccc);
    a60e:	4629      	mov	r1, r5
    a610:	4638      	mov	r0, r7
    a612:	f018 faa3 	bl	22b5c <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    a616:	682c      	ldr	r4, [r5, #0]
    a618:	4b0b      	ldr	r3, [pc, #44]	; (a648 <connected_cb+0x70>)
    a61a:	429c      	cmp	r4, r3
    a61c:	d10d      	bne.n	a63a <connected_cb+0x62>
				sc_restore(&ccc->cfg[i]);
    a61e:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    a620:	89a0      	ldrh	r0, [r4, #12]
    a622:	89e1      	ldrh	r1, [r4, #14]
    a624:	ea50 0301 	orrs.w	r3, r0, r1
    a628:	d007      	beq.n	a63a <connected_cb+0x62>
	sc_indicate(&gatt_sc, data->start, data->end);
    a62a:	f7ff ff9d 	bl	a568 <sc_indicate.constprop.22>
	(void)memset(cfg->data, 0, sizeof(cfg->data));
    a62e:	2204      	movs	r2, #4
    a630:	4649      	mov	r1, r9
    a632:	f104 000c 	add.w	r0, r4, #12
    a636:	f017 fc50 	bl	21eda <memset>
}
    a63a:	2001      	movs	r0, #1
    a63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    a640:	3601      	adds	r6, #1
    a642:	e7d3      	b.n	a5ec <connected_cb+0x14>
    a644:	0000a41d 	.word	0x0000a41d
    a648:	20000b88 	.word	0x20000b88

0000a64c <notify_cb>:
{
    a64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a650:	b085      	sub	sp, #20
    a652:	4607      	mov	r7, r0
    a654:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    a656:	2500      	movs	r5, #0
    a658:	f642 1302 	movw	r3, #10498	; 0x2902
    a65c:	a902      	add	r1, sp, #8
    a65e:	6800      	ldr	r0, [r0, #0]
    a660:	f88d 5008 	strb.w	r5, [sp, #8]
    a664:	f8ad 300a 	strh.w	r3, [sp, #10]
    a668:	f017 fd59 	bl	2211e <bt_uuid_cmp>
    a66c:	b178      	cbz	r0, a68e <notify_cb+0x42>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    a66e:	f642 0303 	movw	r3, #10243	; 0x2803
    a672:	a903      	add	r1, sp, #12
    a674:	6838      	ldr	r0, [r7, #0]
    a676:	f88d 500c 	strb.w	r5, [sp, #12]
    a67a:	f8ad 300e 	strh.w	r3, [sp, #14]
    a67e:	f017 fd4e 	bl	2211e <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    a682:	1b40      	subs	r0, r0, r5
    a684:	bf18      	it	ne
    a686:	2001      	movne	r0, #1
}
    a688:	b005      	add	sp, #20
    a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a68e:	68ba      	ldr	r2, [r7, #8]
    a690:	4b34      	ldr	r3, [pc, #208]	; (a764 <notify_cb+0x118>)
    a692:	429a      	cmp	r2, r3
    a694:	d001      	beq.n	a69a <notify_cb+0x4e>
		return BT_GATT_ITER_CONTINUE;
    a696:	2001      	movs	r0, #1
    a698:	e7f6      	b.n	a688 <notify_cb+0x3c>
	ccc = attr->user_data;
    a69a:	f8d7 800c 	ldr.w	r8, [r7, #12]
			if (ccc->cfg == sc_ccc_cfg) {
    a69e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; a768 <notify_cb+0x11c>
	for (i = 0; i < ccc->cfg_len; i++) {
    a6a2:	4606      	mov	r6, r0
    a6a4:	4682      	mov	sl, r0
    a6a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a6aa:	429e      	cmp	r6, r3
    a6ac:	d2f3      	bcs.n	a696 <notify_cb+0x4a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    a6ae:	f8d8 2000 	ldr.w	r2, [r8]
		if (cfg->value != data->type) {
    a6b2:	88a1      	ldrh	r1, [r4, #4]
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    a6b4:	0133      	lsls	r3, r6, #4
    a6b6:	18d5      	adds	r5, r2, r3
		if (cfg->value != data->type) {
    a6b8:	8928      	ldrh	r0, [r5, #8]
    a6ba:	4288      	cmp	r0, r1
    a6bc:	d117      	bne.n	a6ee <notify_cb+0xa2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a6be:	1c69      	adds	r1, r5, #1
    a6c0:	5cd0      	ldrb	r0, [r2, r3]
    a6c2:	f7fe faaf 	bl	8c24 <bt_conn_lookup_addr_le>
		if (!conn) {
    a6c6:	4681      	mov	r9, r0
    a6c8:	bb08      	cbnz	r0, a70e <notify_cb+0xc2>
			if (ccc->cfg == sc_ccc_cfg) {
    a6ca:	f8d8 3000 	ldr.w	r3, [r8]
    a6ce:	455b      	cmp	r3, fp
    a6d0:	d10d      	bne.n	a6ee <notify_cb+0xa2>
				sc_save(cfg, data->params);
    a6d2:	69a3      	ldr	r3, [r4, #24]
	memcpy(&data, params->data, params->len);
    a6d4:	a803      	add	r0, sp, #12
    a6d6:	69d9      	ldr	r1, [r3, #28]
    a6d8:	8c1a      	ldrh	r2, [r3, #32]
    a6da:	f017 fbd4 	bl	21e86 <memcpy>
	if (!stored->start && !stored->end) {
    a6de:	89a9      	ldrh	r1, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    a6e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!stored->start && !stored->end) {
    a6e4:	b929      	cbnz	r1, a6f2 <notify_cb+0xa6>
    a6e6:	89ea      	ldrh	r2, [r5, #14]
    a6e8:	b942      	cbnz	r2, a6fc <notify_cb+0xb0>
		*stored = data;
    a6ea:	9803      	ldr	r0, [sp, #12]
    a6ec:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a6ee:	3601      	adds	r6, #1
    a6f0:	e7d9      	b.n	a6a6 <notify_cb+0x5a>
	data.start = sys_le16_to_cpu(data.start);
    a6f2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (new_start >= *start && new_end <= *end) {
    a6f6:	89e8      	ldrh	r0, [r5, #14]
    a6f8:	428a      	cmp	r2, r1
    a6fa:	d304      	bcc.n	a706 <notify_cb+0xba>
    a6fc:	89ea      	ldrh	r2, [r5, #14]
    a6fe:	429a      	cmp	r2, r3
    a700:	d2f5      	bcs.n	a6ee <notify_cb+0xa2>
		*end = new_end;
    a702:	81eb      	strh	r3, [r5, #14]
    a704:	e7f3      	b.n	a6ee <notify_cb+0xa2>
	if (*end < new_end) {
    a706:	4283      	cmp	r3, r0
		*start = new_start;
    a708:	81aa      	strh	r2, [r5, #12]
	if (*end < new_end) {
    a70a:	d9f0      	bls.n	a6ee <notify_cb+0xa2>
    a70c:	e7f9      	b.n	a702 <notify_cb+0xb6>
		if (conn->state != BT_CONN_CONNECTED) {
    a70e:	7a83      	ldrb	r3, [r0, #10]
    a710:	2b04      	cmp	r3, #4
    a712:	d002      	beq.n	a71a <notify_cb+0xce>
			bt_conn_unref(conn);
    a714:	f017 fe5a 	bl	223cc <bt_conn_unref>
			continue;
    a718:	e7e9      	b.n	a6ee <notify_cb+0xa2>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    a71a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    a71e:	b97b      	cbnz	r3, a740 <notify_cb+0xf4>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a720:	88a3      	ldrh	r3, [r4, #4]
    a722:	2b02      	cmp	r3, #2
    a724:	d111      	bne.n	a74a <notify_cb+0xfe>
			err = gatt_indicate(conn, data->params);
    a726:	69a1      	ldr	r1, [r4, #24]
    a728:	4648      	mov	r0, r9
    a72a:	f7ff fc73 	bl	a014 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    a72e:	4605      	mov	r5, r0
		bt_conn_unref(conn);
    a730:	4648      	mov	r0, r9
    a732:	f017 fe4b 	bl	223cc <bt_conn_unref>
		if (err < 0) {
    a736:	2d00      	cmp	r5, #0
    a738:	db11      	blt.n	a75e <notify_cb+0x112>
		data->err = 0;
    a73a:	f8c4 a000 	str.w	sl, [r4]
    a73e:	e7d6      	b.n	a6ee <notify_cb+0xa2>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    a740:	4639      	mov	r1, r7
    a742:	4798      	blx	r3
    a744:	2800      	cmp	r0, #0
    a746:	d1eb      	bne.n	a720 <notify_cb+0xd4>
    a748:	e7d1      	b.n	a6ee <notify_cb+0xa2>
			err = gatt_notify(conn, data->attr->handle,
    a74a:	68a3      	ldr	r3, [r4, #8]
    a74c:	6922      	ldr	r2, [r4, #16]
    a74e:	8a19      	ldrh	r1, [r3, #16]
    a750:	68e3      	ldr	r3, [r4, #12]
    a752:	9300      	str	r3, [sp, #0]
    a754:	4648      	mov	r0, r9
    a756:	8aa3      	ldrh	r3, [r4, #20]
    a758:	f7ff fb7a 	bl	9e50 <gatt_notify>
    a75c:	e7e7      	b.n	a72e <notify_cb+0xe2>
			return BT_GATT_ITER_STOP;
    a75e:	2000      	movs	r0, #0
    a760:	e792      	b.n	a688 <notify_cb+0x3c>
    a762:	bf00      	nop
    a764:	0000a41d 	.word	0x0000a41d
    a768:	20000b88 	.word	0x20000b88

0000a76c <bt_gatt_service_unregister>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a76c:	4b15      	ldr	r3, [pc, #84]	; (a7c4 <bt_gatt_service_unregister+0x58>)
    a76e:	681a      	ldr	r2, [r3, #0]
{
    a770:	b510      	push	{r4, lr}
    a772:	2100      	movs	r1, #0
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    a774:	f100 0408 	add.w	r4, r0, #8
    a778:	b912      	cbnz	r2, a780 <bt_gatt_service_unregister+0x14>
		return -ENOENT;
    a77a:	f06f 0001 	mvn.w	r0, #1
    a77e:	e017      	b.n	a7b0 <bt_gatt_service_unregister+0x44>
    a780:	4294      	cmp	r4, r2
    a782:	d11c      	bne.n	a7be <bt_gatt_service_unregister+0x52>
Z_GENLIST_REMOVE(slist, snode)
    a784:	6882      	ldr	r2, [r0, #8]
    a786:	b9a1      	cbnz	r1, a7b2 <bt_gatt_service_unregister+0x46>
    a788:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    a78a:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    a78c:	428c      	cmp	r4, r1
    a78e:	d100      	bne.n	a792 <bt_gatt_service_unregister+0x26>
	list->tail = node;
    a790:	605a      	str	r2, [r3, #4]
		    svc->attrs[svc->attr_count - 1].handle);
    a792:	e9d0 2300 	ldrd	r2, r3, [r0]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a796:	2114      	movs	r1, #20
    a798:	fb01 2303 	mla	r3, r1, r3, r2
	parent->next = child;
    a79c:	2400      	movs	r4, #0
    a79e:	6084      	str	r4, [r0, #8]
    a7a0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    a7a4:	8a10      	ldrh	r0, [r2, #16]
    a7a6:	f7ff fedf 	bl	a568 <sc_indicate.constprop.22>
	db_changed();
    a7aa:	f7ff fe97 	bl	a4dc <db_changed>
	return 0;
    a7ae:	4620      	mov	r0, r4
}
    a7b0:	bd10      	pop	{r4, pc}
    a7b2:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    a7b4:	685a      	ldr	r2, [r3, #4]
    a7b6:	4294      	cmp	r4, r2
	list->tail = node;
    a7b8:	bf08      	it	eq
    a7ba:	6059      	streq	r1, [r3, #4]
    a7bc:	e7e9      	b.n	a792 <bt_gatt_service_unregister+0x26>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a7be:	4611      	mov	r1, r2
    a7c0:	6812      	ldr	r2, [r2, #0]
    a7c2:	e7d9      	b.n	a778 <bt_gatt_service_unregister+0xc>
    a7c4:	20000b10 	.word	0x20000b10

0000a7c8 <bt_gatt_foreach_attr>:
{
    a7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a7cc:	4698      	mov	r8, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a7ce:	4b12      	ldr	r3, [pc, #72]	; (a818 <bt_gatt_foreach_attr+0x50>)
    a7d0:	681c      	ldr	r4, [r3, #0]
{
    a7d2:	4605      	mov	r5, r0
    a7d4:	460e      	mov	r6, r1
    a7d6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a7d8:	b1dc      	cbz	r4, a812 <bt_gatt_foreach_attr+0x4a>
    a7da:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a7dc:	f04f 0914 	mov.w	r9, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a7e0:	b1bc      	cbz	r4, a812 <bt_gatt_foreach_attr+0x4a>
		for (i = 0; i < svc->attr_count; i++) {
    a7e2:	f04f 0a00 	mov.w	sl, #0
    a7e6:	e007      	b.n	a7f8 <bt_gatt_foreach_attr+0x30>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a7e8:	6820      	ldr	r0, [r4, #0]
    a7ea:	fb09 000a 	mla	r0, r9, sl, r0
			if (attr->handle < start_handle ||
    a7ee:	8a01      	ldrh	r1, [r0, #16]
    a7f0:	42a9      	cmp	r1, r5
    a7f2:	d208      	bcs.n	a806 <bt_gatt_foreach_attr+0x3e>
		for (i = 0; i < svc->attr_count; i++) {
    a7f4:	f10a 0a01 	add.w	sl, sl, #1
    a7f8:	6863      	ldr	r3, [r4, #4]
    a7fa:	4553      	cmp	r3, sl
    a7fc:	d8f4      	bhi.n	a7e8 <bt_gatt_foreach_attr+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a7fe:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a800:	b13c      	cbz	r4, a812 <bt_gatt_foreach_attr+0x4a>
    a802:	3c08      	subs	r4, #8
    a804:	e7ec      	b.n	a7e0 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    a806:	42b1      	cmp	r1, r6
    a808:	d8f4      	bhi.n	a7f4 <bt_gatt_foreach_attr+0x2c>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    a80a:	4641      	mov	r1, r8
    a80c:	47b8      	blx	r7
    a80e:	2800      	cmp	r0, #0
    a810:	d1f0      	bne.n	a7f4 <bt_gatt_foreach_attr+0x2c>
}
    a812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a816:	bf00      	nop
    a818:	20000b10 	.word	0x20000b10

0000a81c <db_hash_gen>:
{
    a81c:	b500      	push	{lr}
    a81e:	b0c9      	sub	sp, #292	; 0x124
	u8_t key[16] = {};
    a820:	2210      	movs	r2, #16
    a822:	2100      	movs	r1, #0
    a824:	4668      	mov	r0, sp
    a826:	f017 fb58 	bl	21eda <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a82a:	aa1c      	add	r2, sp, #112	; 0x70
    a82c:	4669      	mov	r1, sp
    a82e:	a804      	add	r0, sp, #16
    a830:	f016 f8ab 	bl	2098a <tc_cmac_setup>
    a834:	b980      	cbnz	r0, a858 <db_hash_gen+0x3c>
		BT_ERR("Unable to setup AES CMAC");
    a836:	2301      	movs	r3, #1
    a838:	f04f 0100 	mov.w	r1, #0
    a83c:	f363 0107 	bfi	r1, r3, #0, #8
    a840:	4a12      	ldr	r2, [pc, #72]	; (a88c <db_hash_gen+0x70>)
    a842:	4b13      	ldr	r3, [pc, #76]	; (a890 <db_hash_gen+0x74>)
    a844:	4813      	ldr	r0, [pc, #76]	; (a894 <db_hash_gen+0x78>)
    a846:	1a9b      	subs	r3, r3, r2
    a848:	08db      	lsrs	r3, r3, #3
    a84a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to calculate hash");
    a84e:	f016 f9d9 	bl	20c04 <log_0>
}
    a852:	b049      	add	sp, #292	; 0x124
    a854:	f85d fb04 	ldr.w	pc, [sp], #4
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    a858:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a85c:	2001      	movs	r0, #1
    a85e:	ab04      	add	r3, sp, #16
    a860:	4a0d      	ldr	r2, [pc, #52]	; (a898 <db_hash_gen+0x7c>)
    a862:	f7ff ffb1 	bl	a7c8 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a866:	a904      	add	r1, sp, #16
    a868:	480c      	ldr	r0, [pc, #48]	; (a89c <db_hash_gen+0x80>)
    a86a:	f016 f924 	bl	20ab6 <tc_cmac_final>
    a86e:	2800      	cmp	r0, #0
    a870:	d1ef      	bne.n	a852 <db_hash_gen+0x36>
		BT_ERR("Unable to calculate hash");
    a872:	2301      	movs	r3, #1
    a874:	f04f 0100 	mov.w	r1, #0
    a878:	f363 0107 	bfi	r1, r3, #0, #8
    a87c:	4a03      	ldr	r2, [pc, #12]	; (a88c <db_hash_gen+0x70>)
    a87e:	4b04      	ldr	r3, [pc, #16]	; (a890 <db_hash_gen+0x74>)
    a880:	4807      	ldr	r0, [pc, #28]	; (a8a0 <db_hash_gen+0x84>)
    a882:	1a9b      	subs	r3, r3, r2
    a884:	08db      	lsrs	r3, r3, #3
    a886:	f363 118f 	bfi	r1, r3, #6, #10
    a88a:	e7e0      	b.n	a84e <db_hash_gen+0x32>
    a88c:	00025880 	.word	0x00025880
    a890:	000258e8 	.word	0x000258e8
    a894:	000279c9 	.word	0x000279c9
    a898:	00022bd7 	.word	0x00022bd7
    a89c:	20002423 	.word	0x20002423
    a8a0:	000279e2 	.word	0x000279e2

0000a8a4 <bt_gatt_init>:
{
    a8a4:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a8a6:	4b11      	ldr	r3, [pc, #68]	; (a8ec <bt_gatt_init+0x48>)
    a8a8:	f3bf 8f5b 	dmb	ish
    a8ac:	2201      	movs	r2, #1
    a8ae:	e853 1f00 	ldrex	r1, [r3]
    a8b2:	2900      	cmp	r1, #0
    a8b4:	d103      	bne.n	a8be <bt_gatt_init+0x1a>
    a8b6:	e843 2000 	strex	r0, r2, [r3]
    a8ba:	2800      	cmp	r0, #0
    a8bc:	d1f7      	bne.n	a8ae <bt_gatt_init+0xa>
    a8be:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    a8c2:	d111      	bne.n	a8e8 <bt_gatt_init+0x44>
	gatt_register(&gatt_svc);
    a8c4:	480a      	ldr	r0, [pc, #40]	; (a8f0 <bt_gatt_init+0x4c>)
    a8c6:	f7ff fb5f 	bl	9f88 <gatt_register>
	gatt_register(&gap_svc);
    a8ca:	480a      	ldr	r0, [pc, #40]	; (a8f4 <bt_gatt_init+0x50>)
    a8cc:	f7ff fb5c 	bl	9f88 <gatt_register>
	k_delayed_work_init(&db_hash_work, db_hash_process);
    a8d0:	4909      	ldr	r1, [pc, #36]	; (a8f8 <bt_gatt_init+0x54>)
    a8d2:	480a      	ldr	r0, [pc, #40]	; (a8fc <bt_gatt_init+0x58>)
    a8d4:	f01a fdb6 	bl	25444 <k_delayed_work_init>
	db_hash_gen();
    a8d8:	f7ff ffa0 	bl	a81c <db_hash_gen>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    a8dc:	4908      	ldr	r1, [pc, #32]	; (a900 <bt_gatt_init+0x5c>)
    a8de:	4809      	ldr	r0, [pc, #36]	; (a904 <bt_gatt_init+0x60>)
}
    a8e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    a8e4:	f01a bdae 	b.w	25444 <k_delayed_work_init>
}
    a8e8:	bd08      	pop	{r3, pc}
    a8ea:	bf00      	nop
    a8ec:	20000b84 	.word	0x20000b84
    a8f0:	20007034 	.word	0x20007034
    a8f4:	20006f88 	.word	0x20006f88
    a8f8:	00022f0b 	.word	0x00022f0b
    a8fc:	20000b18 	.word	0x20000b18
    a900:	0000aa21 	.word	0x0000aa21
    a904:	20000b60 	.word	0x20000b60

0000a908 <ccc_set>:
{
    a908:	b570      	push	{r4, r5, r6, lr}
	if (argc < 1) {
    a90a:	2800      	cmp	r0, #0
{
    a90c:	b0b4      	sub	sp, #208	; 0xd0
    a90e:	460c      	mov	r4, r1
    a910:	4616      	mov	r6, r2
	if (argc < 1) {
    a912:	dc12      	bgt.n	a93a <ccc_set+0x32>
		BT_ERR("Insufficient number of arguments");
    a914:	2301      	movs	r3, #1
    a916:	f04f 0100 	mov.w	r1, #0
    a91a:	f363 0107 	bfi	r1, r3, #0, #8
    a91e:	4a2e      	ldr	r2, [pc, #184]	; (a9d8 <ccc_set+0xd0>)
    a920:	4b2e      	ldr	r3, [pc, #184]	; (a9dc <ccc_set+0xd4>)
    a922:	482f      	ldr	r0, [pc, #188]	; (a9e0 <ccc_set+0xd8>)
    a924:	1a9b      	subs	r3, r3, r2
    a926:	08db      	lsrs	r3, r3, #3
    a928:	f363 118f 	bfi	r1, r3, #6, #10
    a92c:	f016 f96a 	bl	20c04 <log_0>
		return -EINVAL;
    a930:	f06f 0415 	mvn.w	r4, #21
}
    a934:	4620      	mov	r0, r4
    a936:	b034      	add	sp, #208	; 0xd0
    a938:	bd70      	pop	{r4, r5, r6, pc}
	} else if (argc == 1) {
    a93a:	2801      	cmp	r0, #1
    a93c:	d118      	bne.n	a970 <ccc_set+0x68>
		load.id = BT_ID_DEFAULT;
    a93e:	2300      	movs	r3, #0
    a940:	f88d 3000 	strb.w	r3, [sp]
	err = bt_settings_decode_key(argv[0], &load.addr);
    a944:	f10d 0101 	add.w	r1, sp, #1
    a948:	6820      	ldr	r0, [r4, #0]
    a94a:	f017 fbb5 	bl	220b8 <bt_settings_decode_key>
	if (err) {
    a94e:	b1b8      	cbz	r0, a980 <ccc_set+0x78>
		BT_ERR("Unable to decode address %s", argv[0]);
    a950:	2301      	movs	r3, #1
    a952:	f04f 0200 	mov.w	r2, #0
    a956:	f363 0207 	bfi	r2, r3, #0, #8
    a95a:	491f      	ldr	r1, [pc, #124]	; (a9d8 <ccc_set+0xd0>)
    a95c:	4b1f      	ldr	r3, [pc, #124]	; (a9dc <ccc_set+0xd4>)
    a95e:	4821      	ldr	r0, [pc, #132]	; (a9e4 <ccc_set+0xdc>)
    a960:	1a5b      	subs	r3, r3, r1
    a962:	08db      	lsrs	r3, r3, #3
    a964:	f363 128f 	bfi	r2, r3, #6, #10
    a968:	6821      	ldr	r1, [r4, #0]
    a96a:	f016 f958 	bl	20c1e <log_1>
    a96e:	e7df      	b.n	a930 <ccc_set+0x28>
		load.id = strtol(argv[1], NULL, 10);
    a970:	220a      	movs	r2, #10
    a972:	2100      	movs	r1, #0
    a974:	6860      	ldr	r0, [r4, #4]
    a976:	f017 f9ab 	bl	21cd0 <strtol>
    a97a:	f88d 0000 	strb.w	r0, [sp]
    a97e:	e7e1      	b.n	a944 <ccc_set+0x3c>
	if (settings_val_get_len_cb(val_ctx)) {
    a980:	4630      	mov	r0, r6
    a982:	f017 f90e 	bl	21ba2 <settings_val_get_len_cb>
    a986:	b318      	cbz	r0, a9d0 <ccc_set+0xc8>
		len = settings_val_read_cb(val_ctx, ccc_store,
    a988:	ad04      	add	r5, sp, #16
    a98a:	22c0      	movs	r2, #192	; 0xc0
    a98c:	4629      	mov	r1, r5
    a98e:	4630      	mov	r0, r6
    a990:	f017 f8ea 	bl	21b68 <settings_val_read_cb>
		if (len < 0) {
    a994:	1e04      	subs	r4, r0, #0
    a996:	da0f      	bge.n	a9b8 <ccc_set+0xb0>
			BT_ERR("Failed to decode value (err %d)", len);
    a998:	2301      	movs	r3, #1
    a99a:	f04f 0200 	mov.w	r2, #0
    a99e:	f363 0207 	bfi	r2, r3, #0, #8
    a9a2:	490d      	ldr	r1, [pc, #52]	; (a9d8 <ccc_set+0xd0>)
    a9a4:	4b0d      	ldr	r3, [pc, #52]	; (a9dc <ccc_set+0xd4>)
    a9a6:	4810      	ldr	r0, [pc, #64]	; (a9e8 <ccc_set+0xe0>)
    a9a8:	1a5b      	subs	r3, r3, r1
    a9aa:	08db      	lsrs	r3, r3, #3
    a9ac:	f363 128f 	bfi	r2, r3, #6, #10
    a9b0:	4621      	mov	r1, r4
    a9b2:	f016 f934 	bl	20c1e <log_1>
			return len;
    a9b6:	e7bd      	b.n	a934 <ccc_set+0x2c>
		load.count = len / sizeof(*ccc_store);
    a9b8:	08a4      	lsrs	r4, r4, #2
		load.entry = ccc_store;
    a9ba:	9502      	str	r5, [sp, #8]
		load.count = len / sizeof(*ccc_store);
    a9bc:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    a9be:	466b      	mov	r3, sp
    a9c0:	4a0a      	ldr	r2, [pc, #40]	; (a9ec <ccc_set+0xe4>)
    a9c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a9c6:	2001      	movs	r0, #1
    a9c8:	f7ff fefe 	bl	a7c8 <bt_gatt_foreach_attr>
	return 0;
    a9cc:	2400      	movs	r4, #0
    a9ce:	e7b1      	b.n	a934 <ccc_set+0x2c>
		load.count = 0;
    a9d0:	e9cd 0002 	strd	r0, r0, [sp, #8]
    a9d4:	e7f3      	b.n	a9be <ccc_set+0xb6>
    a9d6:	bf00      	nop
    a9d8:	00025880 	.word	0x00025880
    a9dc:	000258e8 	.word	0x000258e8
    a9e0:	0002791e 	.word	0x0002791e
    a9e4:	0002793f 	.word	0x0002793f
    a9e8:	0002797d 	.word	0x0002797d
    a9ec:	0000a135 	.word	0x0000a135

0000a9f0 <bt_gatt_indicate.part.15>:
int bt_gatt_indicate(struct bt_conn *conn,
    a9f0:	b500      	push	{lr}
    a9f2:	b089      	sub	sp, #36	; 0x24
	nfy.err = -ENOTCONN;
    a9f4:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    a9f8:	9007      	str	r0, [sp, #28]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    a9fa:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    a9fc:	9301      	str	r3, [sp, #4]
	nfy.type = BT_GATT_CCC_INDICATE;
    a9fe:	2302      	movs	r3, #2
    aa00:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    aa04:	4a05      	ldr	r2, [pc, #20]	; (aa1c <bt_gatt_indicate.part.15+0x2c>)
    aa06:	8a00      	ldrh	r0, [r0, #16]
    aa08:	ab01      	add	r3, sp, #4
    aa0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aa0e:	f7ff fedb 	bl	a7c8 <bt_gatt_foreach_attr>
}
    aa12:	9801      	ldr	r0, [sp, #4]
    aa14:	b009      	add	sp, #36	; 0x24
    aa16:	f85d fb04 	ldr.w	pc, [sp], #4
    aa1a:	bf00      	nop
    aa1c:	0000a64d 	.word	0x0000a64d

0000aa20 <sc_process>:
{
    aa20:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    aa22:	f850 2c04 	ldr.w	r2, [r0, #-4]
    aa26:	9201      	str	r2, [sp, #4]
{
    aa28:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    aa2a:	f103 0420 	add.w	r4, r3, #32
    aa2e:	3828      	subs	r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aa30:	f3bf 8f5b 	dmb	ish
    aa34:	e854 2f00 	ldrex	r2, [r4]
    aa38:	f022 0201 	bic.w	r2, r2, #1
    aa3c:	e844 2100 	strex	r1, r2, [r4]
    aa40:	2900      	cmp	r1, #0
    aa42:	d1f7      	bne.n	aa34 <sc_process+0x14>
    aa44:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
    aa48:	2200      	movs	r2, #0
    aa4a:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0U;
    aa4e:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    aa52:	4a0a      	ldr	r2, [pc, #40]	; (aa7c <sc_process+0x5c>)
    aa54:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    aa58:	4a09      	ldr	r2, [pc, #36]	; (aa80 <sc_process+0x60>)
    aa5a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    aa5e:	aa01      	add	r2, sp, #4
    aa60:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    aa64:	2204      	movs	r2, #4
    aa66:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (conn) {
    aa6a:	f7ff ffc1 	bl	a9f0 <bt_gatt_indicate.part.15>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    aa6e:	b918      	cbnz	r0, aa78 <sc_process+0x58>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    aa70:	2101      	movs	r1, #1
    aa72:	4620      	mov	r0, r4
    aa74:	f018 f8a0 	bl	22bb8 <atomic_set_bit>
}
    aa78:	b002      	add	sp, #8
    aa7a:	bd10      	pop	{r4, pc}
    aa7c:	20006fbc 	.word	0x20006fbc
    aa80:	0000a201 	.word	0x0000a201

0000aa84 <bt_gatt_notify_cb>:
{
    aa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa88:	460c      	mov	r4, r1
    aa8a:	b08a      	sub	sp, #40	; 0x28
    aa8c:	461d      	mov	r5, r3
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    aa8e:	2300      	movs	r3, #0
{
    aa90:	4680      	mov	r8, r0
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    aa92:	f88d 3008 	strb.w	r3, [sp, #8]
    aa96:	a902      	add	r1, sp, #8
    aa98:	f642 0303 	movw	r3, #10243	; 0x2803
    aa9c:	6820      	ldr	r0, [r4, #0]
{
    aa9e:	9f10      	ldr	r7, [sp, #64]	; 0x40
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    aaa0:	f8ad 300a 	strh.w	r3, [sp, #10]
{
    aaa4:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    aaa6:	f017 fb3a 	bl	2211e <bt_uuid_cmp>
    aaaa:	b920      	cbnz	r0, aab6 <bt_gatt_notify_cb+0x32>
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    aaac:	68e3      	ldr	r3, [r4, #12]
    aaae:	791b      	ldrb	r3, [r3, #4]
    aab0:	06db      	lsls	r3, r3, #27
    aab2:	d521      	bpl.n	aaf8 <bt_gatt_notify_cb+0x74>
		attr++;
    aab4:	3414      	adds	r4, #20
	if (conn) {
    aab6:	8a20      	ldrh	r0, [r4, #16]
    aab8:	f1b8 0f00 	cmp.w	r8, #0
    aabc:	d009      	beq.n	aad2 <bt_gatt_notify_cb+0x4e>
		return gatt_notify(conn, attr->handle, data,
    aabe:	4601      	mov	r1, r0
    aac0:	9700      	str	r7, [sp, #0]
    aac2:	462b      	mov	r3, r5
    aac4:	4632      	mov	r2, r6
    aac6:	4640      	mov	r0, r8
    aac8:	f7ff f9c2 	bl	9e50 <gatt_notify>
}
    aacc:	b00a      	add	sp, #40	; 0x28
    aace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nfy.err = -ENOTCONN;
    aad2:	f06f 0338 	mvn.w	r3, #56	; 0x38
    aad6:	9303      	str	r3, [sp, #12]
	nfy.type = BT_GATT_CCC_NOTIFY;
    aad8:	2301      	movs	r3, #1
    aada:	f8ad 3010 	strh.w	r3, [sp, #16]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    aade:	4a08      	ldr	r2, [pc, #32]	; (ab00 <bt_gatt_notify_cb+0x7c>)
	nfy.data = data;
    aae0:	9607      	str	r6, [sp, #28]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    aae2:	ab03      	add	r3, sp, #12
    aae4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	nfy.func = func;
    aae8:	e9cd 4705 	strd	r4, r7, [sp, #20]
	nfy.len = len;
    aaec:	f8ad 5020 	strh.w	r5, [sp, #32]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    aaf0:	f7ff fe6a 	bl	a7c8 <bt_gatt_foreach_attr>
	return nfy.err;
    aaf4:	9803      	ldr	r0, [sp, #12]
    aaf6:	e7e9      	b.n	aacc <bt_gatt_notify_cb+0x48>
			return -EINVAL;
    aaf8:	f06f 0015 	mvn.w	r0, #21
    aafc:	e7e6      	b.n	aacc <bt_gatt_notify_cb+0x48>
    aafe:	bf00      	nop
    ab00:	0000a64d 	.word	0x0000a64d

0000ab04 <bt_gatt_connected>:
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    ab04:	4603      	mov	r3, r0
    ab06:	4a03      	ldr	r2, [pc, #12]	; (ab14 <bt_gatt_connected+0x10>)
    ab08:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ab0c:	2001      	movs	r0, #1
    ab0e:	f7ff be5b 	b.w	a7c8 <bt_gatt_foreach_attr>
    ab12:	bf00      	nop
    ab14:	0000a5d9 	.word	0x0000a5d9

0000ab18 <db_hash_read>:
{
    ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab1a:	4604      	mov	r4, r0
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    ab1c:	4815      	ldr	r0, [pc, #84]	; (ab74 <db_hash_read+0x5c>)
    ab1e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    ab22:	4616      	mov	r6, r2
    ab24:	461f      	mov	r7, r3
    ab26:	f014 fa0b 	bl	1ef40 <z_timeout_remaining>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    ab2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ab2e:	2264      	movs	r2, #100	; 0x64
    ab30:	2300      	movs	r3, #0
    ab32:	fb80 0101 	smull	r0, r1, r0, r1
    ab36:	f7f5 fb23 	bl	180 <__aeabi_uldivmod>
	if (k_delayed_work_remaining_get(&db_hash_work)) {
    ab3a:	b120      	cbz	r0, ab46 <db_hash_read+0x2e>
		k_delayed_work_cancel(&db_hash_work);
    ab3c:	480e      	ldr	r0, [pc, #56]	; (ab78 <db_hash_read+0x60>)
    ab3e:	f01a fc89 	bl	25454 <k_delayed_work_cancel>
		db_hash_gen();
    ab42:	f7ff fe6b 	bl	a81c <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    ab46:	2101      	movs	r1, #1
    ab48:	4620      	mov	r0, r4
    ab4a:	f018 f9e2 	bl	22f12 <bt_gatt_change_aware>
	if (offset > value_len) {
    ab4e:	2d10      	cmp	r5, #16
    ab50:	d80c      	bhi.n	ab6c <db_hash_read+0x54>
	len = MIN(buf_len, value_len - offset);
    ab52:	f1c5 0410 	rsb	r4, r5, #16
    ab56:	42bc      	cmp	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    ab58:	4908      	ldr	r1, [pc, #32]	; (ab7c <db_hash_read+0x64>)
	len = MIN(buf_len, value_len - offset);
    ab5a:	bfa8      	it	ge
    ab5c:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    ab5e:	4622      	mov	r2, r4
    ab60:	4429      	add	r1, r5
    ab62:	4630      	mov	r0, r6
    ab64:	f017 f98f 	bl	21e86 <memcpy>
}
    ab68:	4620      	mov	r0, r4
    ab6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ab6c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    ab70:	e7fa      	b.n	ab68 <db_hash_read+0x50>
    ab72:	bf00      	nop
    ab74:	20000b24 	.word	0x20000b24
    ab78:	20000b18 	.word	0x20000b18
    ab7c:	20002423 	.word	0x20002423

0000ab80 <bt_gatt_store_ccc>:
{
    ab80:	b570      	push	{r4, r5, r6, lr}
    ab82:	b0be      	sub	sp, #248	; 0xf8
	save.count = 0;
    ab84:	2300      	movs	r3, #0
{
    ab86:	4605      	mov	r5, r0
    ab88:	460c      	mov	r4, r1
	save.addr = addr;
    ab8a:	910c      	str	r1, [sp, #48]	; 0x30
	save.count = 0;
    ab8c:	933d      	str	r3, [sp, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    ab8e:	4a1a      	ldr	r2, [pc, #104]	; (abf8 <bt_gatt_store_ccc+0x78>)
    ab90:	ab0c      	add	r3, sp, #48	; 0x30
    ab92:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ab96:	2001      	movs	r0, #1
    ab98:	f7ff fe16 	bl	a7c8 <bt_gatt_foreach_attr>
	if (id) {
    ab9c:	b345      	cbz	r5, abf0 <bt_gatt_store_ccc+0x70>
		snprintk(id_str, sizeof(id_str), "%u", id);
    ab9e:	ae02      	add	r6, sp, #8
    aba0:	462b      	mov	r3, r5
    aba2:	4a16      	ldr	r2, [pc, #88]	; (abfc <bt_gatt_store_ccc+0x7c>)
    aba4:	2104      	movs	r1, #4
    aba6:	4630      	mov	r0, r6
    aba8:	f7f8 f98e 	bl	2ec8 <snprintk>
		bt_settings_encode_key(key, sizeof(key), "ccc",
    abac:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc",
    abae:	4a14      	ldr	r2, [pc, #80]	; (ac00 <bt_gatt_store_ccc+0x80>)
    abb0:	4623      	mov	r3, r4
    abb2:	2124      	movs	r1, #36	; 0x24
    abb4:	a803      	add	r0, sp, #12
    abb6:	f7fb fb97 	bl	62e8 <bt_settings_encode_key>
	if (save.count) {
    abba:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    abbc:	b1d2      	cbz	r2, abf4 <bt_gatt_store_ccc+0x74>
		len = save.count * sizeof(*save.store);
    abbe:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    abc0:	a90d      	add	r1, sp, #52	; 0x34
	err = settings_save_one(key, str, len);
    abc2:	a803      	add	r0, sp, #12
    abc4:	f7f9 fac8 	bl	4158 <settings_save_one>
	if (err) {
    abc8:	4604      	mov	r4, r0
    abca:	b170      	cbz	r0, abea <bt_gatt_store_ccc+0x6a>
		BT_ERR("Failed to store CCCs (err %d)", err);
    abcc:	2301      	movs	r3, #1
    abce:	f04f 0200 	mov.w	r2, #0
    abd2:	f363 0207 	bfi	r2, r3, #0, #8
    abd6:	490b      	ldr	r1, [pc, #44]	; (ac04 <bt_gatt_store_ccc+0x84>)
    abd8:	4b0b      	ldr	r3, [pc, #44]	; (ac08 <bt_gatt_store_ccc+0x88>)
    abda:	1a5b      	subs	r3, r3, r1
    abdc:	08db      	lsrs	r3, r3, #3
    abde:	4601      	mov	r1, r0
    abe0:	f363 128f 	bfi	r2, r3, #6, #10
    abe4:	4809      	ldr	r0, [pc, #36]	; (ac0c <bt_gatt_store_ccc+0x8c>)
    abe6:	f016 f81a 	bl	20c1e <log_1>
}
    abea:	4620      	mov	r0, r4
    abec:	b03e      	add	sp, #248	; 0xf8
    abee:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc",
    abf0:	9500      	str	r5, [sp, #0]
    abf2:	e7dc      	b.n	abae <bt_gatt_store_ccc+0x2e>
		str = NULL;
    abf4:	4611      	mov	r1, r2
    abf6:	e7e4      	b.n	abc2 <bt_gatt_store_ccc+0x42>
    abf8:	0000a0fd 	.word	0x0000a0fd
    abfc:	0002c011 	.word	0x0002c011
    ac00:	000278fc 	.word	0x000278fc
    ac04:	00025880 	.word	0x00025880
    ac08:	000258e8 	.word	0x000258e8
    ac0c:	00027900 	.word	0x00027900

0000ac10 <bt_gatt_disconnected>:
{
    ac10:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac12:	4604      	mov	r4, r0
    ac14:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    ac16:	4603      	mov	r3, r0
    ac18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ac1c:	2001      	movs	r0, #1
    ac1e:	4a3a      	ldr	r2, [pc, #232]	; (ad08 <bt_gatt_disconnected+0xf8>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ac20:	f104 0648 	add.w	r6, r4, #72	; 0x48
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    ac24:	f7ff fdd0 	bl	a7c8 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ac28:	4631      	mov	r1, r6
    ac2a:	7a20      	ldrb	r0, [r4, #8]
    ac2c:	f017 fb5b 	bl	222e6 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    ac30:	2800      	cmp	r0, #0
    ac32:	d03a      	beq.n	acaa <bt_gatt_disconnected+0x9a>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    ac34:	4631      	mov	r1, r6
    ac36:	7a20      	ldrb	r0, [r4, #8]
    ac38:	f7ff ffa2 	bl	ab80 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    ac3c:	4620      	mov	r0, r4
    ac3e:	f7ff fac5 	bl	a1cc <find_cf_cfg>
	if (!cfg) {
    ac42:	4605      	mov	r5, r0
    ac44:	2800      	cmp	r0, #0
    ac46:	d056      	beq.n	acf6 <bt_gatt_disconnected+0xe6>
		if (conn->id) {
    ac48:	7a23      	ldrb	r3, [r4, #8]
		str = (char *)cfg->data;
    ac4a:	3508      	adds	r5, #8
		if (conn->id) {
    ac4c:	2b00      	cmp	r3, #0
    ac4e:	d054      	beq.n	acfa <bt_gatt_disconnected+0xea>
			snprintk(id_str, sizeof(id_str), "%u", conn->id);
    ac50:	af02      	add	r7, sp, #8
    ac52:	4a2e      	ldr	r2, [pc, #184]	; (ad0c <bt_gatt_disconnected+0xfc>)
    ac54:	2104      	movs	r1, #4
    ac56:	4638      	mov	r0, r7
    ac58:	f7f8 f936 	bl	2ec8 <snprintk>
			bt_settings_encode_key(key, sizeof(key), "cf",
    ac5c:	9700      	str	r7, [sp, #0]
    ac5e:	4633      	mov	r3, r6
    ac60:	4a2b      	ldr	r2, [pc, #172]	; (ad10 <bt_gatt_disconnected+0x100>)
    ac62:	2124      	movs	r1, #36	; 0x24
    ac64:	a803      	add	r0, sp, #12
    ac66:	f7fb fb3f 	bl	62e8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    ac6a:	7a23      	ldrb	r3, [r4, #8]
    ac6c:	2701      	movs	r7, #1
    ac6e:	b93b      	cbnz	r3, ac80 <bt_gatt_disconnected+0x70>
		bt_settings_encode_key(key, sizeof(key), "cf",
    ac70:	2300      	movs	r3, #0
    ac72:	9300      	str	r3, [sp, #0]
    ac74:	4a26      	ldr	r2, [pc, #152]	; (ad10 <bt_gatt_disconnected+0x100>)
    ac76:	4633      	mov	r3, r6
    ac78:	2124      	movs	r1, #36	; 0x24
    ac7a:	a803      	add	r0, sp, #12
    ac7c:	f7fb fb34 	bl	62e8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    ac80:	4629      	mov	r1, r5
    ac82:	463a      	mov	r2, r7
    ac84:	a803      	add	r0, sp, #12
    ac86:	f7f9 fa67 	bl	4158 <settings_save_one>
	if (err) {
    ac8a:	4601      	mov	r1, r0
    ac8c:	b168      	cbz	r0, acaa <bt_gatt_disconnected+0x9a>
		BT_ERR("Failed to store Client Features (err %d)", err);
    ac8e:	2301      	movs	r3, #1
    ac90:	f04f 0200 	mov.w	r2, #0
    ac94:	f363 0207 	bfi	r2, r3, #0, #8
    ac98:	481e      	ldr	r0, [pc, #120]	; (ad14 <bt_gatt_disconnected+0x104>)
    ac9a:	4b1f      	ldr	r3, [pc, #124]	; (ad18 <bt_gatt_disconnected+0x108>)
    ac9c:	1a1b      	subs	r3, r3, r0
    ac9e:	08db      	lsrs	r3, r3, #3
    aca0:	f363 128f 	bfi	r2, r3, #6, #10
    aca4:	481d      	ldr	r0, [pc, #116]	; (ad1c <bt_gatt_disconnected+0x10c>)
    aca6:	f015 ffba 	bl	20c1e <log_1>
	cfg = find_cf_cfg(conn);
    acaa:	4620      	mov	r0, r4
    acac:	f7ff fa8e 	bl	a1cc <find_cf_cfg>
	if (!cfg) {
    acb0:	4605      	mov	r5, r0
    acb2:	b1f0      	cbz	r0, acf2 <bt_gatt_disconnected+0xe2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    acb4:	7a20      	ldrb	r0, [r4, #8]
    acb6:	4631      	mov	r1, r6
    acb8:	f017 fb15 	bl	222e6 <bt_addr_le_is_bonded>
    acbc:	1c6b      	adds	r3, r5, #1
    acbe:	4604      	mov	r4, r0
    acc0:	b9e8      	cbnz	r0, acfe <bt_gatt_disconnected+0xee>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    acc2:	9003      	str	r0, [sp, #12]
    acc4:	a903      	add	r1, sp, #12
    acc6:	f8cd 000f 	str.w	r0, [sp, #15]
    acca:	4618      	mov	r0, r3
    accc:	f017 ff71 	bl	22bb2 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
    acd0:	f105 0008 	add.w	r0, r5, #8
    acd4:	2201      	movs	r2, #1
    acd6:	4621      	mov	r1, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    acd8:	350c      	adds	r5, #12
    acda:	f017 f8fe 	bl	21eda <memset>
    acde:	f3bf 8f5b 	dmb	ish
    ace2:	e855 3f00 	ldrex	r3, [r5]
    ace6:	e845 4200 	strex	r2, r4, [r5]
    acea:	2a00      	cmp	r2, #0
    acec:	d1f9      	bne.n	ace2 <bt_gatt_disconnected+0xd2>
    acee:	f3bf 8f5b 	dmb	ish
}
    acf2:	b00d      	add	sp, #52	; 0x34
    acf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    acf6:	4607      	mov	r7, r0
    acf8:	e7ba      	b.n	ac70 <bt_gatt_disconnected+0x60>
		if (conn->id) {
    acfa:	2701      	movs	r7, #1
    acfc:	e7b8      	b.n	ac70 <bt_gatt_disconnected+0x60>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    acfe:	4631      	mov	r1, r6
    ad00:	4618      	mov	r0, r3
    ad02:	f017 ff56 	bl	22bb2 <bt_addr_le_copy>
}
    ad06:	e7f4      	b.n	acf2 <bt_gatt_disconnected+0xe2>
    ad08:	00009ed1 	.word	0x00009ed1
    ad0c:	0002c011 	.word	0x0002c011
    ad10:	000278d0 	.word	0x000278d0
    ad14:	00025880 	.word	0x00025880
    ad18:	000258e8 	.word	0x000258e8
    ad1c:	000278d3 	.word	0x000278d3

0000ad20 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    ad20:	4a0d      	ldr	r2, [pc, #52]	; (ad58 <bt_smp_accept+0x38>)
{
    ad22:	b508      	push	{r3, lr}
		if (smp->chan.conn) {
    ad24:	6813      	ldr	r3, [r2, #0]
    ad26:	b923      	cbnz	r3, ad32 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    ad28:	480c      	ldr	r0, [pc, #48]	; (ad5c <bt_smp_accept+0x3c>)
    ad2a:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    ad2c:	600a      	str	r2, [r1, #0]

		return 0;
    ad2e:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    ad30:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    ad32:	2301      	movs	r3, #1
    ad34:	f04f 0200 	mov.w	r2, #0
    ad38:	f363 0207 	bfi	r2, r3, #0, #8
    ad3c:	4908      	ldr	r1, [pc, #32]	; (ad60 <bt_smp_accept+0x40>)
    ad3e:	4b09      	ldr	r3, [pc, #36]	; (ad64 <bt_smp_accept+0x44>)
    ad40:	1a5b      	subs	r3, r3, r1
    ad42:	08db      	lsrs	r3, r3, #3
    ad44:	4601      	mov	r1, r0
    ad46:	f363 128f 	bfi	r2, r3, #6, #10
    ad4a:	4807      	ldr	r0, [pc, #28]	; (ad68 <bt_smp_accept+0x48>)
    ad4c:	f015 ff67 	bl	20c1e <log_1>
	return -ENOMEM;
    ad50:	f06f 000b 	mvn.w	r0, #11
    ad54:	e7ec      	b.n	ad30 <bt_smp_accept+0x10>
    ad56:	bf00      	nop
    ad58:	20000b98 	.word	0x20000b98
    ad5c:	2000704c 	.word	0x2000704c
    ad60:	00025880 	.word	0x00025880
    ad64:	00025978 	.word	0x00025978
    ad68:	00027a8e 	.word	0x00027a8e

0000ad6c <bt_smp_init>:

int bt_smp_init(void)
{
    ad6c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    ad6e:	4802      	ldr	r0, [pc, #8]	; (ad78 <bt_smp_init+0xc>)
    ad70:	f7fe f902 	bl	8f78 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    ad74:	2000      	movs	r0, #0
    ad76:	bd08      	pop	{r3, pc}
    ad78:	20007040 	.word	0x20007040

0000ad7c <atomic_test_bit.constprop.3>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ad7c:	4b04      	ldr	r3, [pc, #16]	; (ad90 <atomic_test_bit.constprop.3+0x14>)
    ad7e:	f3bf 8f5b 	dmb	ish
    ad82:	6818      	ldr	r0, [r3, #0]
    ad84:	f3bf 8f5b 	dmb	ish
}
    ad88:	f000 0001 	and.w	r0, r0, #1
    ad8c:	4770      	bx	lr
    ad8e:	bf00      	nop
    ad90:	20007068 	.word	0x20007068

0000ad94 <bt_mesh_provision>:
#include "mesh.h"

int bt_mesh_provision(const u8_t net_key[16], u16_t net_idx,
		      u8_t flags, u32_t iv_index, u16_t addr,
		      const u8_t dev_key[16])
{
    ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad98:	4691      	mov	r9, r2
    ad9a:	469a      	mov	sl, r3
	bool pb_gatt_enabled;
	int err;

	BT_INFO("Primary Element: 0x%04x", addr);
    ad9c:	f04f 0200 	mov.w	r2, #0
    ada0:	2303      	movs	r3, #3
{
    ada2:	b087      	sub	sp, #28
	BT_INFO("Primary Element: 0x%04x", addr);
    ada4:	f363 0207 	bfi	r2, r3, #0, #8
    ada8:	4d38      	ldr	r5, [pc, #224]	; (ae8c <bt_mesh_provision+0xf8>)
    adaa:	4b39      	ldr	r3, [pc, #228]	; (ae90 <bt_mesh_provision+0xfc>)
{
    adac:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
    adb0:	4e38      	ldr	r6, [pc, #224]	; (ae94 <bt_mesh_provision+0x100>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    adb2:	4c39      	ldr	r4, [pc, #228]	; (ae98 <bt_mesh_provision+0x104>)
	BT_INFO("Primary Element: 0x%04x", addr);
    adb4:	1aed      	subs	r5, r5, r3
    adb6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
{
    adba:	4688      	mov	r8, r1
	BT_INFO("Primary Element: 0x%04x", addr);
    adbc:	f365 128f 	bfi	r2, r5, #6, #10
    adc0:	4639      	mov	r1, r7
{
    adc2:	4683      	mov	fp, r0
	BT_INFO("Primary Element: 0x%04x", addr);
    adc4:	4835      	ldr	r0, [pc, #212]	; (ae9c <bt_mesh_provision+0x108>)
    adc6:	f015 ff2a 	bl	20c1e <log_1>
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
    adca:	2204      	movs	r2, #4
    adcc:	f04f 0300 	mov.w	r3, #0
    add0:	f362 0307 	bfi	r3, r2, #0, #8
    add4:	f365 138f 	bfi	r3, r5, #6, #10
    add8:	a902      	add	r1, sp, #8
    adda:	4831      	ldr	r0, [pc, #196]	; (aea0 <bt_mesh_provision+0x10c>)
    addc:	e9cd 6802 	strd	r6, r8, [sp, #8]
    ade0:	e9cd 9a04 	strd	r9, sl, [sp, #16]
    ade4:	f015 ff62 	bl	20cac <log_n>
    ade8:	f3bf 8f5b 	dmb	ish
    adec:	e854 3f00 	ldrex	r3, [r4]
    adf0:	f043 0201 	orr.w	r2, r3, #1
    adf4:	e844 2100 	strex	r1, r2, [r4]
    adf8:	2900      	cmp	r1, #0
    adfa:	d1f7      	bne.n	adec <bt_mesh_provision+0x58>
    adfc:	f3bf 8f5b 	dmb	ish
	       net_idx, flags, iv_index);

	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    ae00:	07db      	lsls	r3, r3, #31
    ae02:	d440      	bmi.n	ae86 <bt_mesh_provision+0xf2>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		if (bt_mesh_proxy_prov_disable() == 0) {
    ae04:	f00d f934 	bl	18070 <bt_mesh_proxy_prov_disable>
		}
	} else {
		pb_gatt_enabled = false;
	}

	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    ae08:	4653      	mov	r3, sl
		if (bt_mesh_proxy_prov_disable() == 0) {
    ae0a:	9001      	str	r0, [sp, #4]
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    ae0c:	465a      	mov	r2, fp
    ae0e:	4640      	mov	r0, r8
    ae10:	4649      	mov	r1, r9
    ae12:	f001 fa17 	bl	c244 <bt_mesh_net_create>
	if (err) {
    ae16:	4680      	mov	r8, r0
    ae18:	b198      	cbz	r0, ae42 <bt_mesh_provision+0xae>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ae1a:	f3bf 8f5b 	dmb	ish
    ae1e:	e854 3f00 	ldrex	r3, [r4]
    ae22:	f023 0301 	bic.w	r3, r3, #1
    ae26:	e844 3200 	strex	r2, r3, [r4]
    ae2a:	2a00      	cmp	r2, #0
    ae2c:	d1f7      	bne.n	ae1e <bt_mesh_provision+0x8a>
    ae2e:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_mesh.flags, BT_MESH_VALID);

		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) && pb_gatt_enabled) {
    ae32:	9b01      	ldr	r3, [sp, #4]
    ae34:	b90b      	cbnz	r3, ae3a <bt_mesh_provision+0xa6>
			bt_mesh_proxy_prov_enable();
    ae36:	f00d f8f9 	bl	1802c <bt_mesh_proxy_prov_enable>
	}

	bt_mesh_net_start();

	return 0;
}
    ae3a:	4640      	mov	r0, r8
    ae3c:	b007      	add	sp, #28
    ae3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_mesh.seq = 0U;
    ae42:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    ae46:	4638      	mov	r0, r7
    ae48:	f004 fb20 	bl	f48c <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    ae4c:	9911      	ldr	r1, [sp, #68]	; 0x44
    ae4e:	2210      	movs	r2, #16
    ae50:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    ae54:	f017 f817 	bl	21e86 <memcpy>
		BT_DBG("Storing network information persistently");
    ae58:	2304      	movs	r3, #4
    ae5a:	f04f 0200 	mov.w	r2, #0
    ae5e:	f363 0207 	bfi	r2, r3, #0, #8
    ae62:	f365 128f 	bfi	r2, r5, #6, #10
    ae66:	4631      	mov	r1, r6
    ae68:	480e      	ldr	r0, [pc, #56]	; (aea4 <bt_mesh_provision+0x110>)
    ae6a:	f015 fed8 	bl	20c1e <log_1>
		bt_mesh_store_net();
    ae6e:	f019 f87f 	bl	23f70 <bt_mesh_store_net>
		bt_mesh_store_subnet(&bt_mesh.sub[0]);
    ae72:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
    ae76:	f009 fbd7 	bl	14628 <bt_mesh_store_subnet>
		bt_mesh_store_iv(false);
    ae7a:	4640      	mov	r0, r8
    ae7c:	f019 f87b 	bl	23f76 <bt_mesh_store_iv>
	bt_mesh_net_start();
    ae80:	f002 fb2c 	bl	d4dc <bt_mesh_net_start>
	return 0;
    ae84:	e7d9      	b.n	ae3a <bt_mesh_provision+0xa6>
		return -EALREADY;
    ae86:	f06f 0844 	mvn.w	r8, #68	; 0x44
    ae8a:	e7d6      	b.n	ae3a <bt_mesh_provision+0xa6>
    ae8c:	00025940 	.word	0x00025940
    ae90:	00025880 	.word	0x00025880
    ae94:	00027aba 	.word	0x00027aba
    ae98:	20007068 	.word	0x20007068
    ae9c:	00027adc 	.word	0x00027adc
    aea0:	00027af4 	.word	0x00027af4
    aea4:	00027b24 	.word	0x00027b24

0000aea8 <bt_mesh_reset>:

void bt_mesh_reset(void)
{
    aea8:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    aeaa:	f7ff ff67 	bl	ad7c <atomic_test_bit.constprop.3>
    aeae:	b358      	cbz	r0, af08 <bt_mesh_reset+0x60>
		return;
	}

	bt_mesh.iv_index = 0U;
    aeb0:	4c16      	ldr	r4, [pc, #88]	; (af0c <bt_mesh_reset+0x64>)
    aeb2:	2500      	movs	r5, #0
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    aeb4:	4629      	mov	r1, r5
    aeb6:	2204      	movs	r2, #4
    aeb8:	f104 0008 	add.w	r0, r4, #8
	bt_mesh.seq = 0U;
    aebc:	e9c4 5500 	strd	r5, r5, [r4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    aec0:	f017 f80b 	bl	21eda <memset>

	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    aec4:	f504 708a 	add.w	r0, r4, #276	; 0x114
    aec8:	f01a fac4 	bl	25454 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    aecc:	f007 fb7a 	bl	125c4 <bt_mesh_cfg_reset>

	bt_mesh_rx_reset();
    aed0:	f003 ffb0 	bl	ee34 <bt_mesh_rx_reset>
	bt_mesh_tx_reset();
    aed4:	f003 ffd0 	bl	ee78 <bt_mesh_tx_reset>
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_disable(true);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
    aed8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    aedc:	f00a fa4c 	bl	15378 <bt_mesh_friend_clear_net_idx>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
    aee0:	f00d f916 	bl	18110 <bt_mesh_proxy_gatt_disable>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_clear_net();
    aee4:	f019 f85e 	bl	23fa4 <bt_mesh_clear_net>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    aee8:	4629      	mov	r1, r5
    aeea:	2210      	movs	r2, #16
    aeec:	f504 709a 	add.w	r0, r4, #308	; 0x134
    aef0:	f016 fff3 	bl	21eda <memset>

	bt_mesh_scan_disable();
    aef4:	f018 f87d 	bl	22ff2 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    aef8:	f000 fcf2 	bl	b8e0 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    aefc:	f004 fadc 	bl	f4b8 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    af00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    af04:	f00c bcae 	b.w	17864 <bt_mesh_prov_reset>
}
    af08:	bd38      	pop	{r3, r4, r5, pc}
    af0a:	bf00      	nop
    af0c:	20007060 	.word	0x20007060

0000af10 <bt_mesh_prov_enable>:
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
    af10:	b570      	push	{r4, r5, r6, lr}
    af12:	b086      	sub	sp, #24
    af14:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
    af16:	f018 f84a 	bl	22fae <bt_mesh_is_provisioned>
    af1a:	4605      	mov	r5, r0
    af1c:	bb88      	cbnz	r0, af82 <bt_mesh_prov_enable+0x72>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_DEBUG)) {
		const struct bt_mesh_prov *prov = bt_mesh_prov_get();
    af1e:	f00c fbdb 	bl	176d8 <bt_mesh_prov_get>
		struct bt_uuid_128 uuid = { .uuid.type = BT_UUID_TYPE_128 };
    af22:	4629      	mov	r1, r5
		const struct bt_mesh_prov *prov = bt_mesh_prov_get();
    af24:	4606      	mov	r6, r0
		struct bt_uuid_128 uuid = { .uuid.type = BT_UUID_TYPE_128 };
    af26:	2211      	movs	r2, #17
    af28:	a801      	add	r0, sp, #4
    af2a:	f016 ffd6 	bl	21eda <memset>
    af2e:	2302      	movs	r3, #2
    af30:	f88d 3004 	strb.w	r3, [sp, #4]

		memcpy(uuid.val, prov->uuid, 16);
    af34:	6831      	ldr	r1, [r6, #0]
    af36:	2210      	movs	r2, #16
    af38:	f10d 0005 	add.w	r0, sp, #5
    af3c:	f016 ffa3 	bl	21e86 <memcpy>
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
    af40:	2303      	movs	r3, #3
    af42:	4a11      	ldr	r2, [pc, #68]	; (af88 <bt_mesh_prov_enable+0x78>)
    af44:	f363 0507 	bfi	r5, r3, #0, #8
    af48:	4b10      	ldr	r3, [pc, #64]	; (af8c <bt_mesh_prov_enable+0x7c>)
    af4a:	1a9b      	subs	r3, r3, r2
    af4c:	08db      	lsrs	r3, r3, #3
    af4e:	a801      	add	r0, sp, #4
    af50:	f363 158f 	bfi	r5, r3, #6, #10
    af54:	f7fb fad8 	bl	6508 <bt_uuid_str>
    af58:	462a      	mov	r2, r5
    af5a:	4601      	mov	r1, r0
    af5c:	480c      	ldr	r0, [pc, #48]	; (af90 <bt_mesh_prov_enable+0x80>)
    af5e:	f015 fe5e 	bl	20c1e <log_1>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
    af62:	07e3      	lsls	r3, r4, #31
    af64:	d503      	bpl.n	af6e <bt_mesh_prov_enable+0x5e>
	    (bearers & BT_MESH_PROV_ADV)) {
		/* Make sure we're scanning for provisioning inviations */
		bt_mesh_scan_enable();
    af66:	f000 f9dd 	bl	b324 <bt_mesh_scan_enable>
		/* Enable unprovisioned beacon sending */
		bt_mesh_beacon_enable();
    af6a:	f000 fc93 	bl	b894 <bt_mesh_beacon_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
    af6e:	f014 0002 	ands.w	r0, r4, #2
    af72:	d004      	beq.n	af7e <bt_mesh_prov_enable+0x6e>
	    (bearers & BT_MESH_PROV_GATT)) {
		bt_mesh_proxy_prov_enable();
    af74:	f00d f85a 	bl	1802c <bt_mesh_proxy_prov_enable>
		bt_mesh_adv_update();
    af78:	f000 f94a 	bl	b210 <bt_mesh_adv_update>
	}

	return 0;
    af7c:	2000      	movs	r0, #0
}
    af7e:	b006      	add	sp, #24
    af80:	bd70      	pop	{r4, r5, r6, pc}
		return -EALREADY;
    af82:	f06f 0044 	mvn.w	r0, #68	; 0x44
    af86:	e7fa      	b.n	af7e <bt_mesh_prov_enable+0x6e>
    af88:	00025880 	.word	0x00025880
    af8c:	00025940 	.word	0x00025940
    af90:	00027acc 	.word	0x00027acc

0000af94 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    af94:	4b02      	ldr	r3, [pc, #8]	; (afa0 <adv_alloc+0xc>)
    af96:	220c      	movs	r2, #12
    af98:	fb02 3000 	mla	r0, r2, r0, r3
    af9c:	4770      	bx	lr
    af9e:	bf00      	nop
    afa0:	20000c24 	.word	0x20000c24

0000afa4 <stack_analyze>:
{
    afa4:	b570      	push	{r4, r5, r6, lr}
	size_t unused = 0;
    afa6:	2400      	movs	r4, #0
{
    afa8:	b086      	sub	sp, #24
			for (size_t i = 0; i < size; i++) {
    afaa:	42a2      	cmp	r2, r4
    afac:	d101      	bne.n	afb2 <stack_analyze+0xe>
    afae:	4614      	mov	r4, r2
    afb0:	e002      	b.n	afb8 <stack_analyze+0x14>
				if (checked_stack[i] == 0xaaU) {
    afb2:	5d0b      	ldrb	r3, [r1, r4]
    afb4:	2baa      	cmp	r3, #170	; 0xaa
    afb6:	d01b      	beq.n	aff0 <stack_analyze+0x4c>
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    afb8:	2103      	movs	r1, #3
    afba:	f04f 0300 	mov.w	r3, #0
    afbe:	f361 0307 	bfi	r3, r1, #0, #8
    afc2:	4d0c      	ldr	r5, [pc, #48]	; (aff4 <stack_analyze+0x50>)
    afc4:	490c      	ldr	r1, [pc, #48]	; (aff8 <stack_analyze+0x54>)
    afc6:	1a6d      	subs	r5, r5, r1
		unsigned int pcnt = ((size - unused) * 100) / size;
    afc8:	1b16      	subs	r6, r2, r4
    afca:	08ed      	lsrs	r5, r5, #3
    afcc:	2164      	movs	r1, #100	; 0x64
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    afce:	e9cd 0401 	strd	r0, r4, [sp, #4]
    afd2:	e9cd 6203 	strd	r6, r2, [sp, #12]
		unsigned int pcnt = ((size - unused) * 100) / size;
    afd6:	4371      	muls	r1, r6
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    afd8:	f365 138f 	bfi	r3, r5, #6, #10
		unsigned int pcnt = ((size - unused) * 100) / size;
    afdc:	fbb1 f2f2 	udiv	r2, r1, r2
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
    afe0:	4806      	ldr	r0, [pc, #24]	; (affc <stack_analyze+0x58>)
    afe2:	9205      	str	r2, [sp, #20]
    afe4:	a901      	add	r1, sp, #4
    afe6:	2205      	movs	r2, #5
    afe8:	f015 fe60 	bl	20cac <log_n>
}
    afec:	b006      	add	sp, #24
    afee:	bd70      	pop	{r4, r5, r6, pc}
					unused++;
    aff0:	3401      	adds	r4, #1
    aff2:	e7da      	b.n	afaa <stack_analyze+0x6>
    aff4:	00025980 	.word	0x00025980
    aff8:	00025880 	.word	0x00025880
    affc:	00026c91 	.word	0x00026c91

0000b000 <adv_thread>:
						thread->stack_info.size);
#endif
}

static void adv_thread(void *p1, void *p2, void *p3)
{
    b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Stopping advertising failed: err %d", err);
    b004:	4b4d      	ldr	r3, [pc, #308]	; (b13c <adv_thread+0x13c>)
    b006:	4e4e      	ldr	r6, [pc, #312]	; (b140 <adv_thread+0x140>)
    b008:	1af6      	subs	r6, r6, r3
{
    b00a:	b087      	sub	sp, #28
		BT_ERR("Stopping advertising failed: err %d", err);
    b00c:	f3c6 06c9 	ubfx	r6, r6, #3, #10

	while (1) {
		struct net_buf *buf;

		if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
    b010:	2100      	movs	r1, #0
    b012:	484c      	ldr	r0, [pc, #304]	; (b144 <adv_thread+0x144>)
    b014:	f019 fddc 	bl	24bd0 <net_buf_get>
    b018:	4605      	mov	r5, r0
			while (!buf) {
    b01a:	2d00      	cmp	r5, #0
    b01c:	d06a      	beq.n	b0f4 <adv_thread+0xf4>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
    b01e:	696a      	ldr	r2, [r5, #20]
    b020:	7a13      	ldrb	r3, [r2, #8]
    b022:	0759      	lsls	r1, r3, #29
    b024:	d559      	bpl.n	b0da <adv_thread+0xda>
			BT_MESH_ADV(buf)->busy = 0U;
    b026:	f36f 0382 	bfc	r3, #2, #1
    b02a:	7213      	strb	r3, [r2, #8]
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
    b02c:	6969      	ldr	r1, [r5, #20]
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    b02e:	4b46      	ldr	r3, [pc, #280]	; (b148 <adv_thread+0x148>)
	adv_int = MAX(adv_int_min,
    b030:	7a4c      	ldrb	r4, [r1, #9]
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    b032:	7c1b      	ldrb	r3, [r3, #16]
    b034:	2b08      	cmp	r3, #8
	adv_int = MAX(adv_int_min,
    b036:	ea4f 03d4 	mov.w	r3, r4, lsr #3
    b03a:	f103 0301 	add.w	r3, r3, #1
    b03e:	f04f 000a 	mov.w	r0, #10
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    b042:	bf8c      	ite	hi
    b044:	2214      	movhi	r2, #20
    b046:	2264      	movls	r2, #100	; 0x64
	adv_int = MAX(adv_int_min,
    b048:	4358      	muls	r0, r3
    b04a:	4290      	cmp	r0, r2
    b04c:	bfa6      	itte	ge
    b04e:	eb03 0383 	addge.w	r3, r3, r3, lsl #2
    b052:	005a      	lslge	r2, r3, #1
    b054:	b292      	uxthlt	r2, r2
		    ((BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1) *
    b056:	f004 0307 	and.w	r3, r4, #7
		     (adv_int + 10)));
    b05a:	f102 040a 	add.w	r4, r2, #10
	duration = (MESH_SCAN_WINDOW_MS +
    b05e:	fb03 4404 	mla	r4, r3, r4, r4
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    b062:	7a0b      	ldrb	r3, [r1, #8]
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
    b064:	e9d1 7b00 	ldrd	r7, fp, [r1]
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    b068:	f003 0303 	and.w	r3, r3, #3
    b06c:	4937      	ldr	r1, [pc, #220]	; (b14c <adv_thread+0x14c>)
    b06e:	5ccb      	ldrb	r3, [r1, r3]
    b070:	f88d 3010 	strb.w	r3, [sp, #16]
	ad.data_len = buf->len;
    b074:	89ab      	ldrh	r3, [r5, #12]
    b076:	f88d 3011 	strb.w	r3, [sp, #17]
	ad.data = buf->data;
    b07a:	68ab      	ldr	r3, [r5, #8]
    b07c:	9305      	str	r3, [sp, #20]
	param.id = BT_ID_DEFAULT;
    b07e:	2300      	movs	r3, #0
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    b080:	2105      	movs	r1, #5
    b082:	00d2      	lsls	r2, r2, #3
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b084:	9300      	str	r3, [sp, #0]
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    b086:	fbb2 f2f1 	udiv	r2, r2, r1
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b08a:	a802      	add	r0, sp, #8
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    b08c:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.interval_max = param.interval_min;
    b090:	f8ad 200c 	strh.w	r2, [sp, #12]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b094:	a904      	add	r1, sp, #16
    b096:	2201      	movs	r2, #1
	param.id = BT_ID_DEFAULT;
    b098:	f8ad 3008 	strh.w	r3, [sp, #8]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b09c:	f017 f925 	bl	222ea <bt_le_adv_start>
	duration = (MESH_SCAN_WINDOW_MS +
    b0a0:	341e      	adds	r4, #30
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    b0a2:	4682      	mov	sl, r0
	net_buf_unref(buf);
    b0a4:	4628      	mov	r0, r5
	duration = (MESH_SCAN_WINDOW_MS +
    b0a6:	b224      	sxth	r4, r4
	net_buf_unref(buf);
    b0a8:	f012 fb5e 	bl	1d768 <net_buf_unref>
	if (cb && cb->start) {
    b0ac:	b12f      	cbz	r7, b0ba <adv_thread+0xba>
    b0ae:	683d      	ldr	r5, [r7, #0]
    b0b0:	b11d      	cbz	r5, b0ba <adv_thread+0xba>
		cb->start(duration, err, cb_data);
    b0b2:	b2a0      	uxth	r0, r4
    b0b4:	465a      	mov	r2, fp
    b0b6:	4651      	mov	r1, sl
    b0b8:	47a8      	blx	r5
	if (err) {
    b0ba:	f1ba 0f00 	cmp.w	sl, #0
    b0be:	d023      	beq.n	b108 <adv_thread+0x108>
		BT_ERR("Advertising failed: err %d", err);
    b0c0:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    b0c4:	f042 0201 	orr.w	r2, r2, #1
    b0c8:	f362 0807 	bfi	r8, r2, #0, #8
    b0cc:	f366 188f 	bfi	r8, r6, #6, #10
    b0d0:	481f      	ldr	r0, [pc, #124]	; (b150 <adv_thread+0x150>)
    b0d2:	4642      	mov	r2, r8
    b0d4:	4651      	mov	r1, sl
		BT_ERR("Stopping advertising failed: err %d", err);
    b0d6:	f015 fda2 	bl	20c1e <log_1>
			adv_send(buf);
		}

		STACK_ANALYZE("adv stack", adv_thread_stack);
    b0da:	f44f 7240 	mov.w	r2, #768	; 0x300
    b0de:	491d      	ldr	r1, [pc, #116]	; (b154 <adv_thread+0x154>)
    b0e0:	481d      	ldr	r0, [pc, #116]	; (b158 <adv_thread+0x158>)
    b0e2:	f7ff ff5f 	bl	afa4 <stack_analyze>
		k_thread_foreach(adv_stack_dump, "BT_MESH");
    b0e6:	491d      	ldr	r1, [pc, #116]	; (b15c <adv_thread+0x15c>)
    b0e8:	481d      	ldr	r0, [pc, #116]	; (b160 <adv_thread+0x160>)
    b0ea:	f01a f921 	bl	25330 <k_thread_foreach>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    b0ee:	f013 fc45 	bl	1e97c <z_impl_k_yield>
    b0f2:	e78d      	b.n	b010 <adv_thread+0x10>
				timeout = bt_mesh_proxy_adv_start();
    b0f4:	f00d f89e 	bl	18234 <bt_mesh_proxy_adv_start>
				buf = net_buf_get(&adv_queue, timeout);
    b0f8:	4601      	mov	r1, r0
    b0fa:	4812      	ldr	r0, [pc, #72]	; (b144 <adv_thread+0x144>)
    b0fc:	f019 fd68 	bl	24bd0 <net_buf_get>
    b100:	4605      	mov	r5, r0
				bt_mesh_proxy_adv_stop();
    b102:	f00d fa25 	bl	18550 <bt_mesh_proxy_adv_stop>
    b106:	e788      	b.n	b01a <adv_thread+0x1a>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    b108:	4620      	mov	r0, r4
    b10a:	f013 fc7d 	bl	1ea08 <z_impl_k_sleep>
	err = bt_le_adv_stop();
    b10e:	f7fd f863 	bl	81d8 <bt_le_adv_stop>
    b112:	4604      	mov	r4, r0
	if (cb && cb->end) {
    b114:	b11f      	cbz	r7, b11e <adv_thread+0x11e>
    b116:	687b      	ldr	r3, [r7, #4]
    b118:	b10b      	cbz	r3, b11e <adv_thread+0x11e>
		cb->end(err, cb_data);
    b11a:	4659      	mov	r1, fp
    b11c:	4798      	blx	r3
	if (err) {
    b11e:	2c00      	cmp	r4, #0
    b120:	d0db      	beq.n	b0da <adv_thread+0xda>
		BT_ERR("Stopping advertising failed: err %d", err);
    b122:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    b126:	f043 0301 	orr.w	r3, r3, #1
    b12a:	f363 0907 	bfi	r9, r3, #0, #8
    b12e:	f366 198f 	bfi	r9, r6, #6, #10
    b132:	464a      	mov	r2, r9
    b134:	4621      	mov	r1, r4
    b136:	480b      	ldr	r0, [pc, #44]	; (b164 <adv_thread+0x164>)
    b138:	e7cd      	b.n	b0d6 <adv_thread+0xd6>
    b13a:	bf00      	nop
    b13c:	00025880 	.word	0x00025880
    b140:	00025910 	.word	0x00025910
    b144:	200078ec 	.word	0x200078ec
    b148:	20006b88 	.word	0x20006b88
    b14c:	00027baf 	.word	0x00027baf
    b150:	00027b5e 	.word	0x00027b5e
    b154:	20002e58 	.word	0x20002e58
    b158:	00027b9d 	.word	0x00027b9d
    b15c:	00027ba7 	.word	0x00027ba7
    b160:	00022fe7 	.word	0x00022fe7
    b164:	00027b79 	.word	0x00027b79

0000b168 <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, s8_t rssi,
			    u8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
    b168:	2a03      	cmp	r2, #3
{
    b16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b16e:	460f      	mov	r7, r1
    b170:	461c      	mov	r4, r3
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
    b172:	d025      	beq.n	b1c0 <bt_mesh_scan_cb+0x58>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    b174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state->offset = net_buf_simple_headroom(buf);
    b178:	4620      	mov	r0, r4
    b17a:	f019 fe48 	bl	24e0e <net_buf_simple_headroom>
    b17e:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    b180:	4620      	mov	r0, r4
	state->len = buf->len;
    b182:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    b186:	f019 fe1e 	bl	24dc6 <net_buf_simple_pull_u8>
		buf->len = len - 1;
    b18a:	1e6b      	subs	r3, r5, #1
		switch (type) {
    b18c:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    b18e:	80a3      	strh	r3, [r4, #4]
		switch (type) {
    b190:	d007      	beq.n	b1a2 <bt_mesh_scan_cb+0x3a>
    b192:	282b      	cmp	r0, #43	; 0x2b
    b194:	d031      	beq.n	b1fa <bt_mesh_scan_cb+0x92>
    b196:	2829      	cmp	r0, #41	; 0x29
    b198:	d108      	bne.n	b1ac <bt_mesh_scan_cb+0x44>
			bt_mesh_pb_adv_recv(buf);
    b19a:	4620      	mov	r0, r4
    b19c:	f00c faa2 	bl	176e4 <bt_mesh_pb_adv_recv>
			break;
    b1a0:	e004      	b.n	b1ac <bt_mesh_scan_cb+0x44>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    b1a2:	2200      	movs	r2, #0
    b1a4:	4639      	mov	r1, r7
    b1a6:	4620      	mov	r0, r4
    b1a8:	f001 ffde 	bl	d168 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    b1ac:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    b1ae:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    b1b2:	fa13 f686 	uxtah	r6, r3, r6
    b1b6:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
    b1b8:	4629      	mov	r1, r5
    b1ba:	4620      	mov	r0, r4
    b1bc:	f019 fdf3 	bl	24da6 <net_buf_simple_pull>
	while (buf->len > 1) {
    b1c0:	88a3      	ldrh	r3, [r4, #4]
    b1c2:	2b01      	cmp	r3, #1
    b1c4:	d9d6      	bls.n	b174 <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
    b1c6:	4620      	mov	r0, r4
    b1c8:	f019 fdfd 	bl	24dc6 <net_buf_simple_pull_u8>
		if (len == 0) {
    b1cc:	4605      	mov	r5, r0
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d0d0      	beq.n	b174 <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
    b1d2:	88a2      	ldrh	r2, [r4, #4]
    b1d4:	b283      	uxth	r3, r0
    b1d6:	429a      	cmp	r2, r3
    b1d8:	d2ce      	bcs.n	b178 <bt_mesh_scan_cb+0x10>
			BT_WARN("AD malformed");
    b1da:	2302      	movs	r3, #2
    b1dc:	f04f 0100 	mov.w	r1, #0
    b1e0:	f363 0107 	bfi	r1, r3, #0, #8
    b1e4:	4a07      	ldr	r2, [pc, #28]	; (b204 <bt_mesh_scan_cb+0x9c>)
    b1e6:	4b08      	ldr	r3, [pc, #32]	; (b208 <bt_mesh_scan_cb+0xa0>)
    b1e8:	4808      	ldr	r0, [pc, #32]	; (b20c <bt_mesh_scan_cb+0xa4>)
    b1ea:	1a9b      	subs	r3, r3, r2
    b1ec:	08db      	lsrs	r3, r3, #3
    b1ee:	f363 118f 	bfi	r1, r3, #6, #10
}
    b1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("AD malformed");
    b1f6:	f015 bd05 	b.w	20c04 <log_0>
			bt_mesh_beacon_recv(buf);
    b1fa:	4620      	mov	r0, r4
    b1fc:	f000 fa52 	bl	b6a4 <bt_mesh_beacon_recv>
			break;
    b200:	e7d4      	b.n	b1ac <bt_mesh_scan_cb+0x44>
    b202:	bf00      	nop
    b204:	00025880 	.word	0x00025880
    b208:	00025910 	.word	0x00025910
    b20c:	00027beb 	.word	0x00027beb

0000b210 <bt_mesh_adv_update>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_CANCEL_WAIT, k_queue_cancel_wait, struct k_queue *, queue)
    b210:	4801      	ldr	r0, [pc, #4]	; (b218 <bt_mesh_adv_update+0x8>)
    b212:	f019 bf02 	b.w	2501a <z_impl_k_queue_cancel_wait>
    b216:	bf00      	nop
    b218:	200078ec 	.word	0x200078ec

0000b21c <bt_mesh_adv_create_from_pool>:
{
    b21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b220:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b222:	4b19      	ldr	r3, [pc, #100]	; (b288 <bt_mesh_adv_create_from_pool+0x6c>)
    b224:	f3bf 8f5b 	dmb	ish
    b228:	681d      	ldr	r5, [r3, #0]
    b22a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    b22e:	f3c5 0540 	ubfx	r5, r5, #1, #1
    b232:	460c      	mov	r4, r1
    b234:	4690      	mov	r8, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    b236:	b18d      	cbz	r5, b25c <bt_mesh_adv_create_from_pool+0x40>
		BT_WARN("Refusing to allocate buffer while suspended");
    b238:	2302      	movs	r3, #2
    b23a:	f04f 0100 	mov.w	r1, #0
    b23e:	f363 0107 	bfi	r1, r3, #0, #8
    b242:	4a12      	ldr	r2, [pc, #72]	; (b28c <bt_mesh_adv_create_from_pool+0x70>)
    b244:	4b12      	ldr	r3, [pc, #72]	; (b290 <bt_mesh_adv_create_from_pool+0x74>)
    b246:	4813      	ldr	r0, [pc, #76]	; (b294 <bt_mesh_adv_create_from_pool+0x78>)
    b248:	1a9b      	subs	r3, r3, r2
    b24a:	08db      	lsrs	r3, r3, #3
    b24c:	f363 118f 	bfi	r1, r3, #6, #10
    b250:	f015 fcd8 	bl	20c04 <log_0>
		return NULL;
    b254:	2600      	movs	r6, #0
}
    b256:	4630      	mov	r0, r6
    b258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = net_buf_alloc(pool, timeout);
    b25c:	9906      	ldr	r1, [sp, #24]
    b25e:	f019 fcb1 	bl	24bc4 <net_buf_alloc_fixed>
	if (!buf) {
    b262:	4606      	mov	r6, r0
    b264:	2800      	cmp	r0, #0
    b266:	d0f6      	beq.n	b256 <bt_mesh_adv_create_from_pool+0x3a>
	adv = get_id(net_buf_id(buf));
    b268:	f012 f9ea 	bl	1d640 <net_buf_id>
    b26c:	47a0      	blx	r4
    b26e:	4604      	mov	r4, r0
	BT_MESH_ADV(buf) = adv;
    b270:	6170      	str	r0, [r6, #20]
	(void)memset(adv, 0, sizeof(*adv));
    b272:	220c      	movs	r2, #12
    b274:	4629      	mov	r1, r5
    b276:	f016 fe30 	bl	21eda <memset>
	adv->type         = type;
    b27a:	7a23      	ldrb	r3, [r4, #8]
	adv->xmit         = xmit;
    b27c:	7267      	strb	r7, [r4, #9]
	adv->type         = type;
    b27e:	f368 0301 	bfi	r3, r8, #0, #2
    b282:	7223      	strb	r3, [r4, #8]
	return buf;
    b284:	e7e7      	b.n	b256 <bt_mesh_adv_create_from_pool+0x3a>
    b286:	bf00      	nop
    b288:	20007068 	.word	0x20007068
    b28c:	00025880 	.word	0x00025880
    b290:	00025910 	.word	0x00025910
    b294:	00027bb3 	.word	0x00027bb3

0000b298 <bt_mesh_adv_create>:
{
    b298:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    b29a:	460b      	mov	r3, r1
    b29c:	9200      	str	r2, [sp, #0]
    b29e:	4904      	ldr	r1, [pc, #16]	; (b2b0 <bt_mesh_adv_create+0x18>)
    b2a0:	4602      	mov	r2, r0
    b2a2:	4804      	ldr	r0, [pc, #16]	; (b2b4 <bt_mesh_adv_create+0x1c>)
    b2a4:	f7ff ffba 	bl	b21c <bt_mesh_adv_create_from_pool>
}
    b2a8:	b003      	add	sp, #12
    b2aa:	f85d fb04 	ldr.w	pc, [sp], #4
    b2ae:	bf00      	nop
    b2b0:	0000af95 	.word	0x0000af95
    b2b4:	2000792c 	.word	0x2000792c

0000b2b8 <bt_mesh_adv_send>:
{
    b2b8:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    b2ba:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    b2bc:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    b2c0:	6942      	ldr	r2, [r0, #20]
    b2c2:	7a13      	ldrb	r3, [r2, #8]
    b2c4:	f043 0304 	orr.w	r3, r3, #4
    b2c8:	7213      	strb	r3, [r2, #8]
	net_buf_put(&adv_queue, net_buf_ref(buf));
    b2ca:	f019 fcfb 	bl	24cc4 <net_buf_ref>
}
    b2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_put(&adv_queue, net_buf_ref(buf));
    b2d2:	4601      	mov	r1, r0
    b2d4:	4801      	ldr	r0, [pc, #4]	; (b2dc <bt_mesh_adv_send+0x24>)
    b2d6:	f019 bce8 	b.w	24caa <net_buf_put>
    b2da:	bf00      	nop
    b2dc:	200078ec 	.word	0x200078ec

0000b2e0 <bt_mesh_adv_init>:

void bt_mesh_adv_init(void)
{
    b2e0:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    b2e2:	4c0c      	ldr	r4, [pc, #48]	; (b314 <bt_mesh_adv_init+0x34>)
    b2e4:	490c      	ldr	r1, [pc, #48]	; (b318 <bt_mesh_adv_init+0x38>)
    b2e6:	b086      	sub	sp, #24
    b2e8:	2300      	movs	r3, #0
    b2ea:	f06f 0208 	mvn.w	r2, #8
    b2ee:	e9cd 3202 	strd	r3, r2, [sp, #8]
    b2f2:	e9cd 3304 	strd	r3, r3, [sp, #16]
    b2f6:	e9cd 3300 	strd	r3, r3, [sp]
    b2fa:	f44f 7240 	mov.w	r2, #768	; 0x300
    b2fe:	4b07      	ldr	r3, [pc, #28]	; (b31c <bt_mesh_adv_init+0x3c>)
    b300:	4620      	mov	r0, r4
    b302:	f013 fca3 	bl	1ec4c <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    b306:	4906      	ldr	r1, [pc, #24]	; (b320 <bt_mesh_adv_init+0x40>)
    b308:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_THREAD_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
    b30a:	b006      	add	sp, #24
    b30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b310:	f01a b811 	b.w	25336 <z_impl_k_thread_name_set>
    b314:	20000c6c 	.word	0x20000c6c
    b318:	20002e58 	.word	0x20002e58
    b31c:	0000b001 	.word	0x0000b001
    b320:	00027bdf 	.word	0x00027bdf

0000b324 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    b324:	b507      	push	{r0, r1, r2, lr}
	struct bt_le_scan_param scan_param = {
    b326:	4b06      	ldr	r3, [pc, #24]	; (b340 <bt_mesh_scan_enable+0x1c>)
			.interval   = MESH_SCAN_INTERVAL,
			.window     = MESH_SCAN_WINDOW };

	BT_DBG("");

	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    b328:	4906      	ldr	r1, [pc, #24]	; (b344 <bt_mesh_scan_enable+0x20>)
	struct bt_le_scan_param scan_param = {
    b32a:	6818      	ldr	r0, [r3, #0]
    b32c:	9000      	str	r0, [sp, #0]
    b32e:	889b      	ldrh	r3, [r3, #4]
    b330:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    b334:	4668      	mov	r0, sp
    b336:	f7fc ff75 	bl	8224 <bt_le_scan_start>
}
    b33a:	b003      	add	sp, #12
    b33c:	f85d fb04 	ldr.w	pc, [sp], #4
    b340:	00025a50 	.word	0x00025a50
    b344:	0000b169 	.word	0x0000b169

0000b348 <k_work_submit_to_queue.constprop.3>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b348:	4909      	ldr	r1, [pc, #36]	; (b370 <k_work_submit_to_queue.constprop.3+0x28>)
    b34a:	f3bf 8f5b 	dmb	ish
    b34e:	e851 3f00 	ldrex	r3, [r1]
    b352:	f043 0201 	orr.w	r2, r3, #1
    b356:	e841 2000 	strex	r0, r2, [r1]
    b35a:	2800      	cmp	r0, #0
    b35c:	d1f7      	bne.n	b34e <k_work_submit_to_queue.constprop.3+0x6>
    b35e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b362:	07db      	lsls	r3, r3, #31
    b364:	d403      	bmi.n	b36e <k_work_submit_to_queue.constprop.3+0x26>
		k_queue_append(&work_q->queue, work);
    b366:	3908      	subs	r1, #8
    b368:	4802      	ldr	r0, [pc, #8]	; (b374 <k_work_submit_to_queue.constprop.3+0x2c>)
    b36a:	f019 be69 	b.w	25040 <k_queue_append>
}
    b36e:	4770      	bx	lr
    b370:	20000ce0 	.word	0x20000ce0
    b374:	20001d2c 	.word	0x20001d2c

0000b378 <bt_mesh_beacon_create>:
	sub->beacon_sent = k_uptime_get_32();
}

void bt_mesh_beacon_create(struct bt_mesh_subnet *sub,
			   struct net_buf_simple *buf)
{
    b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b37a:	460c      	mov	r4, r1
    b37c:	4605      	mov	r5, r0
	u8_t flags = bt_mesh_net_flags(sub);
    b37e:	f017 fe4b 	bl	23018 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;

	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    b382:	2101      	movs	r1, #1
	u8_t flags = bt_mesh_net_flags(sub);
    b384:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    b386:	4620      	mov	r0, r4
    b388:	f019 fcaf 	bl	24cea <net_buf_simple_add_u8>

	if (sub->kr_flag) {
    b38c:	7fab      	ldrb	r3, [r5, #30]
    b38e:	b1c3      	cbz	r3, b3c2 <bt_mesh_beacon_create+0x4a>
		keys = &sub->keys[1];
    b390:	f105 0689 	add.w	r6, r5, #137	; 0x89
	} else {
		keys = &sub->keys[0];
	}

	net_buf_simple_add_u8(buf, flags);
    b394:	4639      	mov	r1, r7
    b396:	4620      	mov	r0, r4
    b398:	f019 fca7 	bl	24cea <net_buf_simple_add_u8>

	/* Network ID */
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    b39c:	2208      	movs	r2, #8
    b39e:	f106 0121 	add.w	r1, r6, #33	; 0x21
    b3a2:	4620      	mov	r0, r4
    b3a4:	f019 fc98 	bl	24cd8 <net_buf_simple_add_mem>

	/* IV Index */
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    b3a8:	4b07      	ldr	r3, [pc, #28]	; (b3c8 <bt_mesh_beacon_create+0x50>)
    b3aa:	4620      	mov	r0, r4
    b3ac:	6819      	ldr	r1, [r3, #0]
    b3ae:	f019 fcc5 	bl	24d3c <net_buf_simple_add_be32>

	net_buf_simple_add_mem(buf, sub->auth, 8);
    b3b2:	f105 0128 	add.w	r1, r5, #40	; 0x28
    b3b6:	4620      	mov	r0, r4
    b3b8:	2208      	movs	r2, #8

	BT_DBG("net_idx 0x%04x flags 0x%02x NetID %s", sub->net_idx,
	       flags, bt_hex(keys->net_id, 8));
	BT_DBG("IV Index 0x%08x Auth %s", bt_mesh.iv_index,
	       bt_hex(sub->auth, 8));
}
    b3ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    b3be:	f019 bc8b 	b.w	24cd8 <net_buf_simple_add_mem>
		keys = &sub->keys[0];
    b3c2:	f105 0630 	add.w	r6, r5, #48	; 0x30
    b3c6:	e7e5      	b.n	b394 <bt_mesh_beacon_create+0x1c>
    b3c8:	20007060 	.word	0x20007060

0000b3cc <beacon_send>:
		sub->beacons_cur = 0U;
	}
}

static void beacon_send(struct k_work *work)
{
    b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3d0:	b08b      	sub	sp, #44	; 0x2c
	/* Don't send anything if we have an active provisioning link */
	if (IS_ENABLED(CONFIG_BT_MESH_PROV) && bt_prov_active()) {
    b3d2:	f018 fe83 	bl	240dc <bt_prov_active>
    b3d6:	b110      	cbz	r0, b3de <beacon_send+0x12>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b3d8:	f241 3288 	movw	r2, #5000	; 0x1388
    b3dc:	e05f      	b.n	b49e <beacon_send+0xd2>
		return;
	}

	BT_DBG("");

	if (bt_mesh_is_provisioned()) {
    b3de:	f017 fde6 	bl	22fae <bt_mesh_is_provisioned>
    b3e2:	4605      	mov	r5, r0
    b3e4:	2800      	cmp	r0, #0
    b3e6:	d07f      	beq.n	b4e8 <beacon_send+0x11c>
	first_half = !first_half;
    b3e8:	4b89      	ldr	r3, [pc, #548]	; (b610 <beacon_send+0x244>)
    b3ea:	781a      	ldrb	r2, [r3, #0]
    b3ec:	f082 0201 	eor.w	r2, r2, #1
    b3f0:	701a      	strb	r2, [r3, #0]
	if (first_half) {
    b3f2:	4b88      	ldr	r3, [pc, #544]	; (b614 <beacon_send+0x248>)
    b3f4:	b9ca      	cbnz	r2, b42a <beacon_send+0x5e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b3f6:	f8b3 01b0 	ldrh.w	r0, [r3, #432]	; 0x1b0
    b3fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b3fe:	4288      	cmp	r0, r1
		sub->beacons_last = sub->beacons_cur;
    b400:	bf1c      	itt	ne
    b402:	f893 1199 	ldrbne.w	r1, [r3, #409]	; 0x199
    b406:	f883 1198 	strbne.w	r1, [r3, #408]	; 0x198
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b40a:	f8b3 1294 	ldrh.w	r1, [r3, #660]	; 0x294
		sub->beacons_cur = 0U;
    b40e:	bf18      	it	ne
    b410:	f883 2199 	strbne.w	r2, [r3, #409]	; 0x199
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b414:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b418:	4291      	cmp	r1, r2
		sub->beacons_last = sub->beacons_cur;
    b41a:	bf1f      	itttt	ne
    b41c:	f893 227d 	ldrbne.w	r2, [r3, #637]	; 0x27d
    b420:	f883 227c 	strbne.w	r2, [r3, #636]	; 0x27c
		sub->beacons_cur = 0U;
    b424:	2200      	movne	r2, #0
    b426:	f883 227d 	strbne.w	r2, [r3, #637]	; 0x27d
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    b42a:	f01a f864 	bl	254f6 <z_impl_k_uptime_get_32>
    b42e:	f8df 91e4 	ldr.w	r9, [pc, #484]	; b614 <beacon_send+0x248>
		if (time_diff < K_SECONDS(600) &&
    b432:	4f79      	ldr	r7, [pc, #484]	; (b618 <beacon_send+0x24c>)
		bt_mesh_adv_send(buf, &send_cb, sub);
    b434:	f8df 8204 	ldr.w	r8, [pc, #516]	; b63c <beacon_send+0x270>
    b438:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    b43a:	2400      	movs	r4, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b43c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    b440:	f8b9 31b0 	ldrh.w	r3, [r9, #432]	; 0x1b0
    b444:	42b3      	cmp	r3, r6
    b446:	d03e      	beq.n	b4c6 <beacon_send+0xfa>
		time_diff = now - sub->beacon_sent;
    b448:	f8d9 2194 	ldr.w	r2, [r9, #404]	; 0x194
    b44c:	1aaa      	subs	r2, r5, r2
		if (time_diff < K_SECONDS(600) &&
    b44e:	42ba      	cmp	r2, r7
    b450:	d80a      	bhi.n	b468 <beacon_send+0x9c>
		    time_diff < BEACON_THRESHOLD(sub)) {
    b452:	f899 1198 	ldrb.w	r1, [r9, #408]	; 0x198
    b456:	f242 7310 	movw	r3, #10000	; 0x2710
    b45a:	fb01 3303 	mla	r3, r1, r3, r3
    b45e:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    b462:	3b08      	subs	r3, #8
		if (time_diff < K_SECONDS(600) &&
    b464:	429a      	cmp	r2, r3
    b466:	d32e      	bcc.n	b4c6 <beacon_send+0xfa>
		buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT,
    b468:	2200      	movs	r2, #0
    b46a:	2108      	movs	r1, #8
    b46c:	2002      	movs	r0, #2
    b46e:	f7ff ff13 	bl	b298 <bt_mesh_adv_create>
		if (!buf) {
    b472:	4682      	mov	sl, r0
    b474:	b9c0      	cbnz	r0, b4a8 <beacon_send+0xdc>
			BT_ERR("Unable to allocate beacon buffer");
    b476:	2301      	movs	r3, #1
    b478:	f04f 0100 	mov.w	r1, #0
    b47c:	f363 0107 	bfi	r1, r3, #0, #8
    b480:	4a66      	ldr	r2, [pc, #408]	; (b61c <beacon_send+0x250>)
    b482:	4b67      	ldr	r3, [pc, #412]	; (b620 <beacon_send+0x254>)
    b484:	4867      	ldr	r0, [pc, #412]	; (b624 <beacon_send+0x258>)
    b486:	1a9b      	subs	r3, r3, r2
    b488:	08db      	lsrs	r3, r3, #3
    b48a:	f363 118f 	bfi	r1, r3, #6, #10
    b48e:	f015 fbb9 	bl	20c04 <log_0>
		update_beacon_observation();
		secure_beacon_send();

		/* Only resubmit if beaconing is still enabled */
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    b492:	f006 fb49 	bl	11b28 <bt_mesh_beacon_get>
    b496:	2801      	cmp	r0, #1
    b498:	d11b      	bne.n	b4d2 <beacon_send+0x106>
    b49a:	f242 7210 	movw	r2, #10000	; 0x2710
    b49e:	4962      	ldr	r1, [pc, #392]	; (b628 <beacon_send+0x25c>)
    b4a0:	4862      	ldr	r0, [pc, #392]	; (b62c <beacon_send+0x260>)
    b4a2:	f013 fc85 	bl	1edb0 <k_delayed_work_submit_to_queue>
    b4a6:	e01c      	b.n	b4e2 <beacon_send+0x116>
    b4a8:	f509 7bca 	add.w	fp, r9, #404	; 0x194
		bt_mesh_beacon_create(sub, &buf->b);
    b4ac:	f100 0108 	add.w	r1, r0, #8
    b4b0:	4658      	mov	r0, fp
    b4b2:	f7ff ff61 	bl	b378 <bt_mesh_beacon_create>
		bt_mesh_adv_send(buf, &send_cb, sub);
    b4b6:	4650      	mov	r0, sl
    b4b8:	465a      	mov	r2, fp
    b4ba:	4641      	mov	r1, r8
    b4bc:	f7ff fefc 	bl	b2b8 <bt_mesh_adv_send>
		net_buf_unref(buf);
    b4c0:	4650      	mov	r0, sl
    b4c2:	f012 f951 	bl	1d768 <net_buf_unref>
    b4c6:	f109 09e4 	add.w	r9, r9, #228	; 0xe4
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    b4ca:	2c00      	cmp	r4, #0
    b4cc:	d1e1      	bne.n	b492 <beacon_send+0xc6>
    b4ce:	2401      	movs	r4, #1
    b4d0:	e7b6      	b.n	b440 <beacon_send+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b4d2:	4b57      	ldr	r3, [pc, #348]	; (b630 <beacon_send+0x264>)
    b4d4:	f3bf 8f5b 	dmb	ish
    b4d8:	681b      	ldr	r3, [r3, #0]
    b4da:	f3bf 8f5b 	dmb	ish
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    b4de:	071b      	lsls	r3, r3, #28
    b4e0:	d4db      	bmi.n	b49a <beacon_send+0xce>
	} else {
		unprovisioned_beacon_send();
		k_delayed_work_submit(&beacon_timer, UNPROVISIONED_INTERVAL);
	}

}
    b4e2:	b00b      	add	sp, #44	; 0x2c
    b4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t uri_hash[16] = { 0 };
    b4e8:	4601      	mov	r1, r0
    b4ea:	2210      	movs	r2, #16
    b4ec:	a802      	add	r0, sp, #8
    b4ee:	f016 fcf4 	bl	21eda <memset>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    b4f2:	462a      	mov	r2, r5
    b4f4:	210a      	movs	r1, #10
    b4f6:	2002      	movs	r0, #2
    b4f8:	f7ff fece 	bl	b298 <bt_mesh_adv_create>
	if (!buf) {
    b4fc:	4606      	mov	r6, r0
    b4fe:	b970      	cbnz	r0, b51e <beacon_send+0x152>
		BT_ERR("Unable to allocate beacon buffer");
    b500:	2301      	movs	r3, #1
    b502:	f04f 0100 	mov.w	r1, #0
    b506:	f363 0107 	bfi	r1, r3, #0, #8
    b50a:	4a44      	ldr	r2, [pc, #272]	; (b61c <beacon_send+0x250>)
    b50c:	4b44      	ldr	r3, [pc, #272]	; (b620 <beacon_send+0x254>)
    b50e:	4845      	ldr	r0, [pc, #276]	; (b624 <beacon_send+0x258>)
    b510:	1a9b      	subs	r3, r3, r2
    b512:	08db      	lsrs	r3, r3, #3
    b514:	f363 118f 	bfi	r1, r3, #6, #10
			BT_ERR("Unable to allocate URI buffer");
    b518:	f015 fb74 	bl	20c04 <log_0>
			return -ENOBUFS;
    b51c:	e75c      	b.n	b3d8 <beacon_send+0xc>
	prov = bt_mesh_prov_get();
    b51e:	f00c f8db 	bl	176d8 <bt_mesh_prov_get>
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    b522:	f106 0708 	add.w	r7, r6, #8
	prov = bt_mesh_prov_get();
    b526:	4604      	mov	r4, r0
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    b528:	4629      	mov	r1, r5
    b52a:	4638      	mov	r0, r7
    b52c:	f019 fbdd 	bl	24cea <net_buf_simple_add_u8>
	net_buf_add_mem(buf, prov->uuid, 16);
    b530:	2210      	movs	r2, #16
    b532:	6821      	ldr	r1, [r4, #0]
    b534:	4638      	mov	r0, r7
    b536:	f019 fbcf 	bl	24cd8 <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    b53a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    b53e:	f1b8 0f00 	cmp.w	r8, #0
    b542:	d03b      	beq.n	b5bc <beacon_send+0x1f0>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
}

static inline bool bt_mesh_s1(const char *m, u8_t salt[16])
{
	const u8_t zero[16] = { 0 };
    b544:	2210      	movs	r2, #16
    b546:	4629      	mov	r1, r5
    b548:	a806      	add	r0, sp, #24
    b54a:	f016 fcc6 	bl	21eda <memset>

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    b54e:	4640      	mov	r0, r8
    b550:	f016 fc5f 	bl	21e12 <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    b554:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    b556:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    b55a:	2201      	movs	r2, #1
    b55c:	4669      	mov	r1, sp
    b55e:	a806      	add	r0, sp, #24
    b560:	f018 f842 	bl	235e8 <bt_mesh_aes_cmac>
    b564:	bb50      	cbnz	r0, b5bc <beacon_send+0x1f0>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    b566:	8921      	ldrh	r1, [r4, #8]
    b568:	f041 0102 	orr.w	r1, r1, #2
	net_buf_add_be16(buf, oob_info);
    b56c:	4638      	mov	r0, r7
    b56e:	f019 fbd3 	bl	24d18 <net_buf_simple_add_be16>
	net_buf_add_mem(buf, uri_hash, 4);
    b572:	2204      	movs	r2, #4
    b574:	a902      	add	r1, sp, #8
    b576:	4638      	mov	r0, r7
    b578:	f019 fbae 	bl	24cd8 <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    b57c:	2200      	movs	r2, #0
    b57e:	4611      	mov	r1, r2
    b580:	4630      	mov	r0, r6
    b582:	f7ff fe99 	bl	b2b8 <bt_mesh_adv_send>
	net_buf_unref(buf);
    b586:	4630      	mov	r0, r6
    b588:	f012 f8ee 	bl	1d768 <net_buf_unref>
	if (prov->uri) {
    b58c:	6863      	ldr	r3, [r4, #4]
    b58e:	2b00      	cmp	r3, #0
    b590:	f43f af22 	beq.w	b3d8 <beacon_send+0xc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    b594:	2200      	movs	r2, #0
    b596:	210a      	movs	r1, #10
    b598:	2003      	movs	r0, #3
    b59a:	f7ff fe7d 	bl	b298 <bt_mesh_adv_create>
		if (!buf) {
    b59e:	4605      	mov	r5, r0
    b5a0:	b970      	cbnz	r0, b5c0 <beacon_send+0x1f4>
			BT_ERR("Unable to allocate URI buffer");
    b5a2:	2301      	movs	r3, #1
    b5a4:	f04f 0100 	mov.w	r1, #0
    b5a8:	f363 0107 	bfi	r1, r3, #0, #8
    b5ac:	4a1b      	ldr	r2, [pc, #108]	; (b61c <beacon_send+0x250>)
    b5ae:	4b1c      	ldr	r3, [pc, #112]	; (b620 <beacon_send+0x254>)
    b5b0:	4820      	ldr	r0, [pc, #128]	; (b634 <beacon_send+0x268>)
    b5b2:	1a9b      	subs	r3, r3, r2
    b5b4:	08db      	lsrs	r3, r3, #3
    b5b6:	f363 118f 	bfi	r1, r3, #6, #10
    b5ba:	e7ad      	b.n	b518 <beacon_send+0x14c>
		oob_info = prov->oob_info;
    b5bc:	8921      	ldrh	r1, [r4, #8]
    b5be:	e7d5      	b.n	b56c <beacon_send+0x1a0>
		len = strlen(prov->uri);
    b5c0:	6860      	ldr	r0, [r4, #4]
    b5c2:	f016 fc26 	bl	21e12 <strlen>
		if (net_buf_tailroom(buf) < len) {
    b5c6:	f105 0608 	add.w	r6, r5, #8
		len = strlen(prov->uri);
    b5ca:	4607      	mov	r7, r0
		if (net_buf_tailroom(buf) < len) {
    b5cc:	4630      	mov	r0, r6
    b5ce:	f019 fc22 	bl	24e16 <net_buf_simple_tailroom>
    b5d2:	4287      	cmp	r7, r0
    b5d4:	d911      	bls.n	b5fa <beacon_send+0x22e>
			BT_WARN("Too long URI to fit advertising data");
    b5d6:	2302      	movs	r3, #2
    b5d8:	f04f 0100 	mov.w	r1, #0
    b5dc:	f363 0107 	bfi	r1, r3, #0, #8
    b5e0:	4a0e      	ldr	r2, [pc, #56]	; (b61c <beacon_send+0x250>)
    b5e2:	4b0f      	ldr	r3, [pc, #60]	; (b620 <beacon_send+0x254>)
    b5e4:	4814      	ldr	r0, [pc, #80]	; (b638 <beacon_send+0x26c>)
    b5e6:	1a9b      	subs	r3, r3, r2
    b5e8:	08db      	lsrs	r3, r3, #3
    b5ea:	f363 118f 	bfi	r1, r3, #6, #10
    b5ee:	f015 fb09 	bl	20c04 <log_0>
		net_buf_unref(buf);
    b5f2:	4628      	mov	r0, r5
    b5f4:	f012 f8b8 	bl	1d768 <net_buf_unref>
    b5f8:	e6ee      	b.n	b3d8 <beacon_send+0xc>
			net_buf_add_mem(buf, prov->uri, len);
    b5fa:	463a      	mov	r2, r7
    b5fc:	6861      	ldr	r1, [r4, #4]
    b5fe:	4630      	mov	r0, r6
    b600:	f019 fb6a 	bl	24cd8 <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    b604:	2200      	movs	r2, #0
    b606:	4611      	mov	r1, r2
    b608:	4628      	mov	r0, r5
    b60a:	f7ff fe55 	bl	b2b8 <bt_mesh_adv_send>
    b60e:	e7f0      	b.n	b5f2 <beacon_send+0x226>
    b610:	20002433 	.word	0x20002433
    b614:	20007060 	.word	0x20007060
    b618:	000927bf 	.word	0x000927bf
    b61c:	00025880 	.word	0x00025880
    b620:	00025918 	.word	0x00025918
    b624:	00027c04 	.word	0x00027c04
    b628:	20000cd8 	.word	0x20000cd8
    b62c:	20001d2c 	.word	0x20001d2c
    b630:	20007068 	.word	0x20007068
    b634:	00027c25 	.word	0x00027c25
    b638:	00027c43 	.word	0x00027c43
    b63c:	00025f40 	.word	0x00025f40

0000b640 <bt_mesh_beacon_init>:
	}
}

void bt_mesh_beacon_init(void)
{
	k_delayed_work_init(&beacon_timer, beacon_send);
    b640:	4901      	ldr	r1, [pc, #4]	; (b648 <bt_mesh_beacon_init+0x8>)
    b642:	4802      	ldr	r0, [pc, #8]	; (b64c <bt_mesh_beacon_init+0xc>)
    b644:	f019 befe 	b.w	25444 <k_delayed_work_init>
    b648:	0000b3cd 	.word	0x0000b3cd
    b64c:	20000cd8 	.word	0x20000cd8

0000b650 <bt_mesh_beacon_ivu_initiator>:
}

void bt_mesh_beacon_ivu_initiator(bool enable)
{
    b650:	b508      	push	{r3, lr}
    b652:	4b12      	ldr	r3, [pc, #72]	; (b69c <bt_mesh_beacon_ivu_initiator+0x4c>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b654:	f3bf 8f5b 	dmb	ish
	if (val) {
    b658:	b168      	cbz	r0, b676 <bt_mesh_beacon_ivu_initiator+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b65a:	e853 2f00 	ldrex	r2, [r3]
    b65e:	f042 0208 	orr.w	r2, r2, #8
    b662:	e843 2100 	strex	r1, r2, [r3]
    b666:	2900      	cmp	r1, #0
    b668:	d1f7      	bne.n	b65a <bt_mesh_beacon_ivu_initiator+0xa>
    b66a:	f3bf 8f5b 	dmb	ish
	if (enable) {
		k_work_submit(&beacon_timer.work);
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
		k_delayed_work_cancel(&beacon_timer);
	}
}
    b66e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_submit_to_queue(&k_sys_work_q, work);
    b672:	f7ff be69 	b.w	b348 <k_work_submit_to_queue.constprop.3>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b676:	e853 2f00 	ldrex	r2, [r3]
    b67a:	f022 0208 	bic.w	r2, r2, #8
    b67e:	e843 2100 	strex	r1, r2, [r3]
    b682:	2900      	cmp	r1, #0
    b684:	d1f7      	bne.n	b676 <bt_mesh_beacon_ivu_initiator+0x26>
    b686:	f3bf 8f5b 	dmb	ish
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
    b68a:	f006 fa4d 	bl	11b28 <bt_mesh_beacon_get>
    b68e:	b920      	cbnz	r0, b69a <bt_mesh_beacon_ivu_initiator+0x4a>
		k_delayed_work_cancel(&beacon_timer);
    b690:	4803      	ldr	r0, [pc, #12]	; (b6a0 <bt_mesh_beacon_ivu_initiator+0x50>)
}
    b692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    b696:	f019 bedd 	b.w	25454 <k_delayed_work_cancel>
}
    b69a:	bd08      	pop	{r3, pc}
    b69c:	20007068 	.word	0x20007068
    b6a0:	20000cd8 	.word	0x20000cd8

0000b6a4 <bt_mesh_beacon_recv>:
{
    b6a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (buf->len < 1) {
    b6a8:	8883      	ldrh	r3, [r0, #4]
{
    b6aa:	4605      	mov	r5, r0
	if (buf->len < 1) {
    b6ac:	b973      	cbnz	r3, b6cc <bt_mesh_beacon_recv+0x28>
		BT_ERR("Too short beacon");
    b6ae:	2301      	movs	r3, #1
    b6b0:	f04f 0100 	mov.w	r1, #0
    b6b4:	f363 0107 	bfi	r1, r3, #0, #8
    b6b8:	4a6b      	ldr	r2, [pc, #428]	; (b868 <bt_mesh_beacon_recv+0x1c4>)
    b6ba:	4b6c      	ldr	r3, [pc, #432]	; (b86c <bt_mesh_beacon_recv+0x1c8>)
    b6bc:	486c      	ldr	r0, [pc, #432]	; (b870 <bt_mesh_beacon_recv+0x1cc>)
    b6be:	1a9b      	subs	r3, r3, r2
    b6c0:	08db      	lsrs	r3, r3, #3
    b6c2:	f363 118f 	bfi	r1, r3, #6, #10
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    b6c6:	f015 fa9d 	bl	20c04 <log_0>
		return;
    b6ca:	e042      	b.n	b752 <bt_mesh_beacon_recv+0xae>
	type = net_buf_simple_pull_u8(buf);
    b6cc:	f019 fb7b 	bl	24dc6 <net_buf_simple_pull_u8>
	switch (type) {
    b6d0:	4601      	mov	r1, r0
    b6d2:	2800      	cmp	r0, #0
    b6d4:	d03d      	beq.n	b752 <bt_mesh_beacon_recv+0xae>
    b6d6:	2801      	cmp	r0, #1
    b6d8:	f040 80b6 	bne.w	b848 <bt_mesh_beacon_recv+0x1a4>
	if (buf->len < 21) {
    b6dc:	88a9      	ldrh	r1, [r5, #4]
    b6de:	2914      	cmp	r1, #20
    b6e0:	d80e      	bhi.n	b700 <bt_mesh_beacon_recv+0x5c>
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    b6e2:	2301      	movs	r3, #1
    b6e4:	f04f 0200 	mov.w	r2, #0
    b6e8:	f363 0207 	bfi	r2, r3, #0, #8
    b6ec:	485e      	ldr	r0, [pc, #376]	; (b868 <bt_mesh_beacon_recv+0x1c4>)
    b6ee:	4b5f      	ldr	r3, [pc, #380]	; (b86c <bt_mesh_beacon_recv+0x1c8>)
    b6f0:	1a1b      	subs	r3, r3, r0
    b6f2:	08db      	lsrs	r3, r3, #3
    b6f4:	485f      	ldr	r0, [pc, #380]	; (b874 <bt_mesh_beacon_recv+0x1d0>)
    b6f6:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("Unknown beacon type 0x%02x", type);
    b6fa:	f015 fa90 	bl	20c1e <log_1>
    b6fe:	e028      	b.n	b752 <bt_mesh_beacon_recv+0xae>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b700:	4c5d      	ldr	r4, [pc, #372]	; (b878 <bt_mesh_beacon_recv+0x1d4>)
	sub = cache_check(buf->data);
    b702:	682e      	ldr	r6, [r5, #0]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b704:	f8b4 21b0 	ldrh.w	r2, [r4, #432]	; 0x1b0
    b708:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b70c:	429a      	cmp	r2, r3
    b70e:	4627      	mov	r7, r4
    b710:	d122      	bne.n	b758 <bt_mesh_beacon_recv+0xb4>
    b712:	f8b7 2294 	ldrh.w	r2, [r7, #660]	; 0x294
    b716:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b71a:	429a      	cmp	r2, r3
    b71c:	d127      	bne.n	b76e <bt_mesh_beacon_recv+0xca>
	flags = net_buf_simple_pull_u8(buf);
    b71e:	4628      	mov	r0, r5
	data = buf->data;
    b720:	f8d5 8000 	ldr.w	r8, [r5]
	flags = net_buf_simple_pull_u8(buf);
    b724:	f019 fb4f 	bl	24dc6 <net_buf_simple_pull_u8>
	net_id = net_buf_simple_pull(buf, 8);
    b728:	2108      	movs	r1, #8
	flags = net_buf_simple_pull_u8(buf);
    b72a:	4606      	mov	r6, r0
	net_id = net_buf_simple_pull(buf, 8);
    b72c:	4628      	mov	r0, r5
    b72e:	f019 fb3a 	bl	24da6 <net_buf_simple_pull>
    b732:	4604      	mov	r4, r0
	iv_index = net_buf_simple_pull_be32(buf);
    b734:	4628      	mov	r0, r5
    b736:	f019 fb61 	bl	24dfc <net_buf_simple_pull_be32>
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    b73a:	f10d 030f 	add.w	r3, sp, #15
    b73e:	9300      	str	r3, [sp, #0]
    b740:	4602      	mov	r2, r0
	iv_index = net_buf_simple_pull_be32(buf);
    b742:	4607      	mov	r7, r0
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    b744:	682b      	ldr	r3, [r5, #0]
    b746:	4620      	mov	r0, r4
    b748:	4631      	mov	r1, r6
    b74a:	f001 fa73 	bl	cc34 <bt_mesh_subnet_find>
	if (!sub) {
    b74e:	4604      	mov	r4, r0
    b750:	b9b0      	cbnz	r0, b780 <bt_mesh_beacon_recv+0xdc>
}
    b752:	b004      	add	sp, #16
    b754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(sub->beacon_cache, data, 21)) {
    b758:	2215      	movs	r2, #21
    b75a:	4631      	mov	r1, r6
    b75c:	f504 70cd 	add.w	r0, r4, #410	; 0x19a
    b760:	f016 fb6a 	bl	21e38 <memcmp>
    b764:	2800      	cmp	r0, #0
    b766:	d1d4      	bne.n	b712 <bt_mesh_beacon_recv+0x6e>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    b768:	f504 74ca 	add.w	r4, r4, #404	; 0x194
    b76c:	e034      	b.n	b7d8 <bt_mesh_beacon_recv+0x134>
		if (!memcmp(sub->beacon_cache, data, 21)) {
    b76e:	2215      	movs	r2, #21
    b770:	4631      	mov	r1, r6
    b772:	4842      	ldr	r0, [pc, #264]	; (b87c <bt_mesh_beacon_recv+0x1d8>)
    b774:	f016 fb60 	bl	21e38 <memcmp>
    b778:	2800      	cmp	r0, #0
    b77a:	d1d0      	bne.n	b71e <bt_mesh_beacon_recv+0x7a>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    b77c:	4c40      	ldr	r4, [pc, #256]	; (b880 <bt_mesh_beacon_recv+0x1dc>)
    b77e:	e02b      	b.n	b7d8 <bt_mesh_beacon_recv+0x134>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !new_key) {
    b780:	7fc3      	ldrb	r3, [r0, #31]
    b782:	2b02      	cmp	r3, #2
    b784:	d10f      	bne.n	b7a6 <bt_mesh_beacon_recv+0x102>
    b786:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b78a:	b963      	cbnz	r3, b7a6 <bt_mesh_beacon_recv+0x102>
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    b78c:	2302      	movs	r3, #2
    b78e:	f04f 0100 	mov.w	r1, #0
    b792:	f363 0107 	bfi	r1, r3, #0, #8
    b796:	4a34      	ldr	r2, [pc, #208]	; (b868 <bt_mesh_beacon_recv+0x1c4>)
    b798:	4b34      	ldr	r3, [pc, #208]	; (b86c <bt_mesh_beacon_recv+0x1c8>)
    b79a:	483a      	ldr	r0, [pc, #232]	; (b884 <bt_mesh_beacon_recv+0x1e0>)
    b79c:	1a9b      	subs	r3, r3, r2
    b79e:	08db      	lsrs	r3, r3, #3
    b7a0:	f363 118f 	bfi	r1, r3, #6, #10
    b7a4:	e78f      	b.n	b6c6 <bt_mesh_beacon_recv+0x22>
	memcpy(sub->beacon_cache, data, 21);
    b7a6:	2215      	movs	r2, #21
    b7a8:	4641      	mov	r1, r8
    b7aa:	1da0      	adds	r0, r4, #6
    b7ac:	f016 fb6b 	bl	21e86 <memcpy>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    b7b0:	2000      	movs	r0, #0
    b7b2:	f000 f9f5 	bl	bba0 <bt_mesh_subnet_get>
    b7b6:	b1c8      	cbz	r0, b7ec <bt_mesh_beacon_recv+0x148>
    b7b8:	8ba3      	ldrh	r3, [r4, #28]
    b7ba:	b1bb      	cbz	r3, b7ec <bt_mesh_beacon_recv+0x148>
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    b7bc:	2302      	movs	r3, #2
    b7be:	f04f 0100 	mov.w	r1, #0
    b7c2:	f363 0107 	bfi	r1, r3, #0, #8
    b7c6:	4a28      	ldr	r2, [pc, #160]	; (b868 <bt_mesh_beacon_recv+0x1c4>)
    b7c8:	4b28      	ldr	r3, [pc, #160]	; (b86c <bt_mesh_beacon_recv+0x1c8>)
    b7ca:	482f      	ldr	r0, [pc, #188]	; (b888 <bt_mesh_beacon_recv+0x1e4>)
    b7cc:	1a9b      	subs	r3, r3, r2
    b7ce:	08db      	lsrs	r3, r3, #3
    b7d0:	f363 118f 	bfi	r1, r3, #6, #10
    b7d4:	f015 fa16 	bl	20c04 <log_0>
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    b7d8:	f006 f9a6 	bl	11b28 <bt_mesh_beacon_get>
    b7dc:	2801      	cmp	r0, #1
    b7de:	d1b8      	bne.n	b752 <bt_mesh_beacon_recv+0xae>
	    sub->beacons_cur < 0xff) {
    b7e0:	7963      	ldrb	r3, [r4, #5]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    b7e2:	2bff      	cmp	r3, #255	; 0xff
    b7e4:	d0b5      	beq.n	b752 <bt_mesh_beacon_recv+0xae>
		sub->beacons_cur++;
    b7e6:	3301      	adds	r3, #1
    b7e8:	7163      	strb	r3, [r4, #5]
    b7ea:	e7b2      	b.n	b752 <bt_mesh_beacon_recv+0xae>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b7ec:	4b27      	ldr	r3, [pc, #156]	; (b88c <bt_mesh_beacon_recv+0x1e8>)
    b7ee:	f3bf 8f5b 	dmb	ish
    b7f2:	681a      	ldr	r2, [r3, #0]
    b7f4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    b7f8:	f012 0f08 	tst.w	r2, #8
    b7fc:	f3c6 0540 	ubfx	r5, r6, #1, #1
    b800:	d00b      	beq.n	b81a <bt_mesh_beacon_recv+0x176>
    b802:	f3bf 8f5b 	dmb	ish
    b806:	681b      	ldr	r3, [r3, #0]
    b808:	f3bf 8f5b 	dmb	ish
    b80c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    b810:	42ab      	cmp	r3, r5
    b812:	d102      	bne.n	b81a <bt_mesh_beacon_recv+0x176>
		bt_mesh_beacon_ivu_initiator(false);
    b814:	2000      	movs	r0, #0
    b816:	f7ff ff1b 	bl	b650 <bt_mesh_beacon_ivu_initiator>
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    b81a:	4629      	mov	r1, r5
    b81c:	4638      	mov	r0, r7
    b81e:	f000 fe4d 	bl	c4bc <bt_mesh_net_iv_update>
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    b822:	f89d 200f 	ldrb.w	r2, [sp, #15]
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    b826:	4605      	mov	r5, r0
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    b828:	f006 0101 	and.w	r1, r6, #1
    b82c:	4620      	mov	r0, r4
    b82e:	f000 fdcb 	bl	c3c8 <bt_mesh_kr_update>
	if (kr_change) {
    b832:	b1b0      	cbz	r0, b862 <bt_mesh_beacon_recv+0x1be>
		bt_mesh_net_beacon_update(sub);
    b834:	4620      	mov	r0, r4
    b836:	f000 fcb3 	bl	c1a0 <bt_mesh_net_beacon_update>
	if (iv_change) {
    b83a:	b11d      	cbz	r5, b844 <bt_mesh_beacon_recv+0x1a0>
		bt_mesh_net_sec_update(NULL);
    b83c:	2000      	movs	r0, #0
		bt_mesh_net_sec_update(sub);
    b83e:	f017 fbf7 	bl	23030 <bt_mesh_net_sec_update>
    b842:	e7c9      	b.n	b7d8 <bt_mesh_beacon_recv+0x134>
    b844:	4620      	mov	r0, r4
    b846:	e7fa      	b.n	b83e <bt_mesh_beacon_recv+0x19a>
		BT_WARN("Unknown beacon type 0x%02x", type);
    b848:	2302      	movs	r3, #2
    b84a:	f04f 0200 	mov.w	r2, #0
    b84e:	f363 0207 	bfi	r2, r3, #0, #8
    b852:	4805      	ldr	r0, [pc, #20]	; (b868 <bt_mesh_beacon_recv+0x1c4>)
    b854:	4b05      	ldr	r3, [pc, #20]	; (b86c <bt_mesh_beacon_recv+0x1c8>)
    b856:	1a1b      	subs	r3, r3, r0
    b858:	08db      	lsrs	r3, r3, #3
    b85a:	f363 128f 	bfi	r2, r3, #6, #10
    b85e:	480c      	ldr	r0, [pc, #48]	; (b890 <bt_mesh_beacon_recv+0x1ec>)
    b860:	e74b      	b.n	b6fa <bt_mesh_beacon_recv+0x56>
	if (iv_change) {
    b862:	2d00      	cmp	r5, #0
    b864:	d0b8      	beq.n	b7d8 <bt_mesh_beacon_recv+0x134>
    b866:	e7e9      	b.n	b83c <bt_mesh_beacon_recv+0x198>
    b868:	00025880 	.word	0x00025880
    b86c:	00025918 	.word	0x00025918
    b870:	00027c68 	.word	0x00027c68
    b874:	00027c79 	.word	0x00027c79
    b878:	20007060 	.word	0x20007060
    b87c:	200072de 	.word	0x200072de
    b880:	200072d8 	.word	0x200072d8
    b884:	00027c9a 	.word	0x00027c9a
    b888:	00027ccb 	.word	0x00027ccb
    b88c:	20007068 	.word	0x20007068
    b890:	00027cf8 	.word	0x00027cf8

0000b894 <bt_mesh_beacon_enable>:

void bt_mesh_beacon_enable(void)
{
    b894:	b510      	push	{r4, lr}
	int i;

	if (!bt_mesh_is_provisioned()) {
    b896:	f017 fb8a 	bl	22fae <bt_mesh_is_provisioned>
    b89a:	b1c8      	cbz	r0, b8d0 <bt_mesh_beacon_enable+0x3c>
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b89c:	4c0e      	ldr	r4, [pc, #56]	; (b8d8 <bt_mesh_beacon_enable+0x44>)
    b89e:	f8b4 21b0 	ldrh.w	r2, [r4, #432]	; 0x1b0
    b8a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b8a6:	429a      	cmp	r2, r3
    b8a8:	d006      	beq.n	b8b8 <bt_mesh_beacon_enable+0x24>
			continue;
		}

		sub->beacons_last = 0U;
    b8aa:	2300      	movs	r3, #0
		sub->beacons_cur = 0U;

		bt_mesh_net_beacon_update(sub);
    b8ac:	f504 70ca 	add.w	r0, r4, #404	; 0x194
		sub->beacons_last = 0U;
    b8b0:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
		bt_mesh_net_beacon_update(sub);
    b8b4:	f000 fc74 	bl	c1a0 <bt_mesh_net_beacon_update>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b8b8:	f8b4 2294 	ldrh.w	r2, [r4, #660]	; 0x294
    b8bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b8c0:	429a      	cmp	r2, r3
    b8c2:	d005      	beq.n	b8d0 <bt_mesh_beacon_enable+0x3c>
		sub->beacons_last = 0U;
    b8c4:	2300      	movs	r3, #0
		bt_mesh_net_beacon_update(sub);
    b8c6:	4805      	ldr	r0, [pc, #20]	; (b8dc <bt_mesh_beacon_enable+0x48>)
		sub->beacons_last = 0U;
    b8c8:	f8a4 327c 	strh.w	r3, [r4, #636]	; 0x27c
		bt_mesh_net_beacon_update(sub);
    b8cc:	f000 fc68 	bl	c1a0 <bt_mesh_net_beacon_update>
	}

	k_work_submit(&beacon_timer.work);
}
    b8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8d4:	f7ff bd38 	b.w	b348 <k_work_submit_to_queue.constprop.3>
    b8d8:	20007060 	.word	0x20007060
    b8dc:	200072d8 	.word	0x200072d8

0000b8e0 <bt_mesh_beacon_disable>:
    b8e0:	4b05      	ldr	r3, [pc, #20]	; (b8f8 <bt_mesh_beacon_disable+0x18>)
    b8e2:	f3bf 8f5b 	dmb	ish
    b8e6:	681b      	ldr	r3, [r3, #0]
    b8e8:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    b8ec:	071b      	lsls	r3, r3, #28
    b8ee:	d402      	bmi.n	b8f6 <bt_mesh_beacon_disable+0x16>
		k_delayed_work_cancel(&beacon_timer);
    b8f0:	4802      	ldr	r0, [pc, #8]	; (b8fc <bt_mesh_beacon_disable+0x1c>)
    b8f2:	f019 bdaf 	b.w	25454 <k_delayed_work_cancel>
	}
}
    b8f6:	4770      	bx	lr
    b8f8:	20007068 	.word	0x20007068
    b8fc:	20000cd8 	.word	0x20000cd8

0000b900 <auth_match>:
}

static bool auth_match(struct bt_mesh_subnet_keys *keys,
		       const u8_t net_id[8], u8_t flags,
		       u32_t iv_index, const u8_t auth[8])
{
    b900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b904:	4605      	mov	r5, r0
	u8_t net_auth[8];

	if (memcmp(net_id, keys->net_id, 8)) {
    b906:	f105 0721 	add.w	r7, r5, #33	; 0x21
{
    b90a:	b085      	sub	sp, #20
    b90c:	4608      	mov	r0, r1
    b90e:	4690      	mov	r8, r2
	if (memcmp(net_id, keys->net_id, 8)) {
    b910:	4639      	mov	r1, r7
    b912:	2208      	movs	r2, #8
{
    b914:	4699      	mov	r9, r3
	if (memcmp(net_id, keys->net_id, 8)) {
    b916:	f016 fa8f 	bl	21e38 <memcmp>
    b91a:	bb60      	cbnz	r0, b976 <auth_match+0x76>
		return false;
	}

	bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id, iv_index,
    b91c:	ae02      	add	r6, sp, #8
    b91e:	463a      	mov	r2, r7
    b920:	4641      	mov	r1, r8
    b922:	9600      	str	r6, [sp, #0]
    b924:	464b      	mov	r3, r9
    b926:	f105 0049 	add.w	r0, r5, #73	; 0x49
    b92a:	f018 f838 	bl	2399e <bt_mesh_beacon_auth>
			    net_auth);

	if (memcmp(auth, net_auth, 8)) {
    b92e:	2208      	movs	r2, #8
    b930:	4631      	mov	r1, r6
    b932:	980c      	ldr	r0, [sp, #48]	; 0x30
    b934:	f016 fa80 	bl	21e38 <memcmp>
    b938:	b308      	cbz	r0, b97e <auth_match+0x7e>
		BT_WARN("Authentication Value %s != %s",
    b93a:	2302      	movs	r3, #2
    b93c:	f04f 0500 	mov.w	r5, #0
    b940:	f363 0507 	bfi	r5, r3, #0, #8
    b944:	4a0f      	ldr	r2, [pc, #60]	; (b984 <auth_match+0x84>)
    b946:	4b10      	ldr	r3, [pc, #64]	; (b988 <auth_match+0x88>)
    b948:	980c      	ldr	r0, [sp, #48]	; 0x30
    b94a:	1ad2      	subs	r2, r2, r3
    b94c:	08d2      	lsrs	r2, r2, #3
    b94e:	2108      	movs	r1, #8
    b950:	f362 158f 	bfi	r5, r2, #6, #10
    b954:	f7fa f9da 	bl	5d0c <bt_hex_real>
    b958:	f7f8 f850 	bl	39fc <log_strdup>
    b95c:	2108      	movs	r1, #8
    b95e:	4607      	mov	r7, r0
    b960:	4630      	mov	r0, r6
    b962:	f7fa f9d3 	bl	5d0c <bt_hex_real>
    b966:	f7f8 f849 	bl	39fc <log_strdup>
    b96a:	462b      	mov	r3, r5
    b96c:	4602      	mov	r2, r0
    b96e:	4639      	mov	r1, r7
    b970:	4806      	ldr	r0, [pc, #24]	; (b98c <auth_match+0x8c>)
    b972:	f015 f968 	bl	20c46 <log_2>
		return false;
    b976:	2000      	movs	r0, #0
			bt_hex(auth, 8), bt_hex(net_auth, 8));
		return false;
	}

	return true;
}
    b978:	b005      	add	sp, #20
    b97a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return true;
    b97e:	2001      	movs	r0, #1
    b980:	e7fa      	b.n	b978 <auth_match+0x78>
    b982:	bf00      	nop
    b984:	00025948 	.word	0x00025948
    b988:	00025880 	.word	0x00025880
    b98c:	00027ea8 	.word	0x00027ea8

0000b990 <net_decrypt.isra.1>:
	}

	return NULL;
}

static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    b990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    b994:	4699      	mov	r9, r3
    b996:	4692      	mov	sl, r2
		       const u8_t *priv, const u8_t *data,
		       size_t data_len, struct bt_mesh_net_rx *rx,
		       struct net_buf_simple *buf)
{
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
    b998:	f04f 0300 	mov.w	r3, #0
    b99c:	2204      	movs	r2, #4
    b99e:	f362 0307 	bfi	r3, r2, #0, #8
    b9a2:	4d61      	ldr	r5, [pc, #388]	; (bb28 <net_decrypt.isra.1+0x198>)
    b9a4:	4a61      	ldr	r2, [pc, #388]	; (bb2c <net_decrypt.isra.1+0x19c>)
	BT_DBG("IVI %u net->iv_index 0x%08x", IVI(data), bt_mesh.iv_index);
    b9a6:	4e62      	ldr	r6, [pc, #392]	; (bb30 <net_decrypt.isra.1+0x1a0>)
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
    b9a8:	1aad      	subs	r5, r5, r2
    b9aa:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    b9ae:	f899 2000 	ldrb.w	r2, [r9]
    b9b2:	f365 138f 	bfi	r3, r5, #6, #10
    b9b6:	f8ad 3000 	strh.w	r3, [sp]
    b9ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b9be:	4603      	mov	r3, r0
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    b9c0:	4688      	mov	r8, r1
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
    b9c2:	485c      	ldr	r0, [pc, #368]	; (bb34 <net_decrypt.isra.1+0x1a4>)
    b9c4:	495c      	ldr	r1, [pc, #368]	; (bb38 <net_decrypt.isra.1+0x1a8>)
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    b9c6:	e9dd 740d 	ldrd	r7, r4, [sp, #52]	; 0x34
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
    b9ca:	f015 f954 	bl	20c76 <log_3>
	BT_DBG("IVI %u net->iv_index 0x%08x", IVI(data), bt_mesh.iv_index);
    b9ce:	2204      	movs	r2, #4
    b9d0:	f04f 0300 	mov.w	r3, #0
    b9d4:	f362 0307 	bfi	r3, r2, #0, #8
    b9d8:	f899 2000 	ldrb.w	r2, [r9]
    b9dc:	4956      	ldr	r1, [pc, #344]	; (bb38 <net_decrypt.isra.1+0x1a8>)
    b9de:	4857      	ldr	r0, [pc, #348]	; (bb3c <net_decrypt.isra.1+0x1ac>)
    b9e0:	f365 138f 	bfi	r3, r5, #6, #10
    b9e4:	f8ad 3000 	strh.w	r3, [sp]
    b9e8:	09d2      	lsrs	r2, r2, #7
    b9ea:	6833      	ldr	r3, [r6, #0]
    b9ec:	f015 f943 	bl	20c76 <log_3>

	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    b9f0:	6833      	ldr	r3, [r6, #0]
    b9f2:	f899 2000 	ldrb.w	r2, [r9]

	net_buf_simple_reset(buf);
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
    b9f6:	990c      	ldr	r1, [sp, #48]	; 0x30
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    b9f8:	f003 0301 	and.w	r3, r3, #1
    b9fc:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    ba00:	7d3a      	ldrb	r2, [r7, #20]
    ba02:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0;
    ba06:	2300      	movs	r3, #0
    ba08:	753a      	strb	r2, [r7, #20]
    ba0a:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    ba0c:	68a3      	ldr	r3, [r4, #8]
    ba0e:	6023      	str	r3, [r4, #0]
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
    ba10:	4620      	mov	r0, r4
    ba12:	f019 f95b 	bl	24ccc <net_buf_simple_add>
    ba16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ba18:	4649      	mov	r1, r9
    ba1a:	f016 fa34 	bl	21e86 <memcpy>

	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    ba1e:	7d3b      	ldrb	r3, [r7, #20]
    ba20:	6831      	ldr	r1, [r6, #0]
    ba22:	6820      	ldr	r0, [r4, #0]
    ba24:	f003 0301 	and.w	r3, r3, #1
    ba28:	4652      	mov	r2, sl
    ba2a:	1ac9      	subs	r1, r1, r3
    ba2c:	f017 fe37 	bl	2369e <bt_mesh_net_obfuscate>
    ba30:	2800      	cmp	r0, #0
    ba32:	d175      	bne.n	bb20 <net_decrypt.isra.1+0x190>
		return -ENOENT;
	}

	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(rx, buf)) {
    ba34:	7d3b      	ldrb	r3, [r7, #20]
    ba36:	f013 0930 	ands.w	r9, r3, #48	; 0x30
    ba3a:	d12e      	bne.n	ba9a <net_decrypt.isra.1+0x10a>
    ba3c:	6821      	ldr	r1, [r4, #0]
	hash1 = (BT_MESH_NET_IVI_RX(rx) << 8) | pdu->data[2];
    ba3e:	6832      	ldr	r2, [r6, #0]
    ba40:	f891 a002 	ldrb.w	sl, [r1, #2]
    ba44:	f003 0301 	and.w	r3, r3, #1
    ba48:	1ad3      	subs	r3, r2, r3
    ba4a:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
	memcpy(&hash2, &pdu->data[3], 4);
    ba4e:	2204      	movs	r2, #4
    ba50:	3103      	adds	r1, #3
    ba52:	a803      	add	r0, sp, #12
    ba54:	f016 fa17 	bl	21e86 <memcpy>
	return (u64_t)hash1 << 32 | (u64_t)hash2;
    ba58:	4653      	mov	r3, sl
    ba5a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; bb50 <net_decrypt.isra.1+0x1c0>
    ba5e:	9a03      	ldr	r2, [sp, #12]
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    ba60:	46cc      	mov	ip, r9
    ba62:	46d6      	mov	lr, sl
		if (msg_cache[i] == hash) {
    ba64:	e8fa 0102 	ldrd	r0, r1, [sl], #8
    ba68:	4299      	cmp	r1, r3
    ba6a:	bf08      	it	eq
    ba6c:	4290      	cmpeq	r0, r2
    ba6e:	d02b      	beq.n	bac8 <net_decrypt.isra.1+0x138>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    ba70:	f10c 0c01 	add.w	ip, ip, #1
    ba74:	fa1f fc8c 	uxth.w	ip, ip
    ba78:	f1bc 0f0a 	cmp.w	ip, #10
    ba7c:	d1f2      	bne.n	ba64 <net_decrypt.isra.1+0xd4>
	msg_cache[msg_cache_next++] = hash;
    ba7e:	4830      	ldr	r0, [pc, #192]	; (bb40 <net_decrypt.isra.1+0x1b0>)
    ba80:	8801      	ldrh	r1, [r0, #0]
    ba82:	eb0e 0ec1 	add.w	lr, lr, r1, lsl #3
    ba86:	e9ce 2300 	strd	r2, r3, [lr]
    ba8a:	1c4b      	adds	r3, r1, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    ba8c:	b29b      	uxth	r3, r3
    ba8e:	fbb3 f2fc 	udiv	r2, r3, ip
    ba92:	fb0c 3c12 	mls	ip, ip, r2, r3
    ba96:	f8a0 c000 	strh.w	ip, [r0]
		BT_WARN("Duplicate found in Network Message Cache");
		return -EALREADY;
	}

	rx->ctx.addr = SRC(buf->data);
    ba9a:	6822      	ldr	r2, [r4, #0]
	return ((u16_t)src[0] << 8) | src[1];
    ba9c:	7951      	ldrb	r1, [r2, #5]
    ba9e:	7993      	ldrb	r3, [r2, #6]
    baa0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    baa4:	b21b      	sxth	r3, r3
    baa6:	b299      	uxth	r1, r3
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    baa8:	2b00      	cmp	r3, #0
	rx->ctx.addr = SRC(buf->data);
    baaa:	8139      	strh	r1, [r7, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    baac:	dc1b      	bgt.n	bae6 <net_decrypt.isra.1+0x156>
		BT_WARN("Ignoring non-unicast src addr 0x%04x", rx->ctx.addr);
    baae:	2302      	movs	r3, #2
    bab0:	f04f 0200 	mov.w	r2, #0
    bab4:	f363 0207 	bfi	r2, r3, #0, #8
    bab8:	4822      	ldr	r0, [pc, #136]	; (bb44 <net_decrypt.isra.1+0x1b4>)
    baba:	f365 128f 	bfi	r2, r5, #6, #10
    babe:	f015 f8ae 	bl	20c1e <log_1>
		return -EINVAL;
    bac2:	f06f 0015 	mvn.w	r0, #21
    bac6:	e00b      	b.n	bae0 <net_decrypt.isra.1+0x150>
		BT_WARN("Duplicate found in Network Message Cache");
    bac8:	2302      	movs	r3, #2
    baca:	f04f 0100 	mov.w	r1, #0
    bace:	f363 0107 	bfi	r1, r3, #0, #8
    bad2:	481d      	ldr	r0, [pc, #116]	; (bb48 <net_decrypt.isra.1+0x1b8>)
    bad4:	f365 118f 	bfi	r1, r5, #6, #10
    bad8:	f015 f894 	bl	20c04 <log_0>
		return -EALREADY;
    badc:	f06f 0044 	mvn.w	r0, #68	; 0x44
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
					   true);
	}

	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
}
    bae0:	b004      	add	sp, #16
    bae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	BT_DBG("src 0x%04x", rx->ctx.addr);
    bae6:	2204      	movs	r2, #4
    bae8:	f04f 0300 	mov.w	r3, #0
    baec:	f362 0307 	bfi	r3, r2, #0, #8
    baf0:	f365 138f 	bfi	r3, r5, #6, #10
    baf4:	460a      	mov	r2, r1
    baf6:	4815      	ldr	r0, [pc, #84]	; (bb4c <net_decrypt.isra.1+0x1bc>)
    baf8:	490f      	ldr	r1, [pc, #60]	; (bb38 <net_decrypt.isra.1+0x1a8>)
    bafa:	f015 f8a4 	bl	20c46 <log_2>
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
    bafe:	7d3a      	ldrb	r2, [r7, #20]
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
    bb00:	6831      	ldr	r1, [r6, #0]
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
    bb02:	f002 0330 	and.w	r3, r2, #48	; 0x30
    bb06:	2b30      	cmp	r3, #48	; 0x30
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
    bb08:	f002 0201 	and.w	r2, r2, #1
	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
    bb0c:	eba1 0202 	sub.w	r2, r1, r2
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
    bb10:	bf0c      	ite	eq
    bb12:	2301      	moveq	r3, #1
	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
    bb14:	2300      	movne	r3, #0
    bb16:	4621      	mov	r1, r4
    bb18:	4640      	mov	r0, r8
    bb1a:	f017 fe3c 	bl	23796 <bt_mesh_net_decrypt>
    bb1e:	e7df      	b.n	bae0 <net_decrypt.isra.1+0x150>
		return -ENOENT;
    bb20:	f06f 0001 	mvn.w	r0, #1
    bb24:	e7dc      	b.n	bae0 <net_decrypt.isra.1+0x150>
    bb26:	bf00      	nop
    bb28:	00025948 	.word	0x00025948
    bb2c:	00025880 	.word	0x00025880
    bb30:	20007060 	.word	0x20007060
    bb34:	0002867a 	.word	0x0002867a
    bb38:	00027e36 	.word	0x00027e36
    bb3c:	00028698 	.word	0x00028698
    bb40:	20001e40 	.word	0x20001e40
    bb44:	000286e1 	.word	0x000286e1
    bb48:	000286b8 	.word	0x000286b8
    bb4c:	00028706 	.word	0x00028706
    bb50:	20000000 	.word	0x20000000

0000bb54 <atomic_test_bit.constprop.8>:
    bb54:	4b04      	ldr	r3, [pc, #16]	; (bb68 <atomic_test_bit.constprop.8+0x14>)
    bb56:	f3bf 8f5b 	dmb	ish
    bb5a:	6898      	ldr	r0, [r3, #8]
    bb5c:	f3bf 8f5b 	dmb	ish
}
    bb60:	f3c0 0080 	ubfx	r0, r0, #2, #1
    bb64:	4770      	bx	lr
    bb66:	bf00      	nop
    bb68:	20007060 	.word	0x20007060

0000bb6c <atomic_set_bit_to.constprop.6>:
	if (val) {
    bb6c:	4b0b      	ldr	r3, [pc, #44]	; (bb9c <atomic_set_bit_to.constprop.6+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb6e:	f3bf 8f5b 	dmb	ish
	if (val) {
    bb72:	b150      	cbz	r0, bb8a <atomic_set_bit_to.constprop.6+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb74:	e853 2f00 	ldrex	r2, [r3]
    bb78:	f042 0204 	orr.w	r2, r2, #4
    bb7c:	e843 2100 	strex	r1, r2, [r3]
    bb80:	2900      	cmp	r1, #0
    bb82:	d1f7      	bne.n	bb74 <atomic_set_bit_to.constprop.6+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bb84:	f3bf 8f5b 	dmb	ish
	}
}
    bb88:	4770      	bx	lr
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bb8a:	e853 2f00 	ldrex	r2, [r3]
    bb8e:	f022 0204 	bic.w	r2, r2, #4
    bb92:	e843 2100 	strex	r1, r2, [r3]
    bb96:	2900      	cmp	r1, #0
    bb98:	d0f4      	beq.n	bb84 <atomic_set_bit_to.constprop.6+0x18>
    bb9a:	e7f6      	b.n	bb8a <atomic_set_bit_to.constprop.6+0x1e>
    bb9c:	20007068 	.word	0x20007068

0000bba0 <bt_mesh_subnet_get>:
	if (net_idx == BT_MESH_KEY_ANY) {
    bba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bba4:	4298      	cmp	r0, r3
    bba6:	d011      	beq.n	bbcc <bt_mesh_subnet_get+0x2c>
		if (bt_mesh.sub[i].net_idx == net_idx) {
    bba8:	4b0a      	ldr	r3, [pc, #40]	; (bbd4 <bt_mesh_subnet_get+0x34>)
    bbaa:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
    bbae:	4282      	cmp	r2, r0
    bbb0:	d00a      	beq.n	bbc8 <bt_mesh_subnet_get+0x28>
    bbb2:	f8b3 2294 	ldrh.w	r2, [r3, #660]	; 0x294
    bbb6:	4282      	cmp	r2, r0
    bbb8:	d10a      	bne.n	bbd0 <bt_mesh_subnet_get+0x30>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    bbba:	2001      	movs	r0, #1
			return &bt_mesh.sub[i];
    bbbc:	22e4      	movs	r2, #228	; 0xe4
    bbbe:	fb02 3000 	mla	r0, r2, r0, r3
    bbc2:	f500 70ca 	add.w	r0, r0, #404	; 0x194
    bbc6:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    bbc8:	2000      	movs	r0, #0
    bbca:	e7f7      	b.n	bbbc <bt_mesh_subnet_get+0x1c>
		return &bt_mesh.sub[0];
    bbcc:	4802      	ldr	r0, [pc, #8]	; (bbd8 <bt_mesh_subnet_get+0x38>)
    bbce:	4770      	bx	lr
	return NULL;
    bbd0:	2000      	movs	r0, #0
}
    bbd2:	4770      	bx	lr
    bbd4:	20007060 	.word	0x20007060
    bbd8:	200071f4 	.word	0x200071f4

0000bbdc <bt_mesh_net_keys_create>:
{
    bbdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    bbe0:	460f      	mov	r7, r1
	u8_t p[] = { 0 };
    bbe2:	2300      	movs	r3, #0
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    bbe4:	f100 0911 	add.w	r9, r0, #17
    bbe8:	f100 0839 	add.w	r8, r0, #57	; 0x39
	u8_t p[] = { 0 };
    bbec:	f88d 300c 	strb.w	r3, [sp, #12]
{
    bbf0:	4605      	mov	r5, r0
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    bbf2:	f10d 030f 	add.w	r3, sp, #15
    bbf6:	e9cd 9800 	strd	r9, r8, [sp]
    bbfa:	2201      	movs	r2, #1
    bbfc:	a903      	add	r1, sp, #12
    bbfe:	4638      	mov	r0, r7
    bc00:	f003 f974 	bl	eeec <bt_mesh_k2>
	if (err) {
    bc04:	4c59      	ldr	r4, [pc, #356]	; (bd6c <bt_mesh_net_keys_create+0x190>)
    bc06:	4b5a      	ldr	r3, [pc, #360]	; (bd70 <bt_mesh_net_keys_create+0x194>)
    bc08:	1ae4      	subs	r4, r4, r3
    bc0a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    bc0e:	4606      	mov	r6, r0
    bc10:	b168      	cbz	r0, bc2e <bt_mesh_net_keys_create+0x52>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    bc12:	f04f 0100 	mov.w	r1, #0
    bc16:	2301      	movs	r3, #1
    bc18:	f363 0107 	bfi	r1, r3, #0, #8
    bc1c:	4855      	ldr	r0, [pc, #340]	; (bd74 <bt_mesh_net_keys_create+0x198>)
    bc1e:	f364 118f 	bfi	r1, r4, #6, #10
		BT_ERR("Unable to generate beacon key");
    bc22:	f014 ffef 	bl	20c04 <log_0>
}
    bc26:	4630      	mov	r0, r6
    bc28:	b004      	add	sp, #16
    bc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(keys->net, key, 16);
    bc2e:	2210      	movs	r2, #16
    bc30:	4639      	mov	r1, r7
    bc32:	4628      	mov	r0, r5
    bc34:	f016 f927 	bl	21e86 <memcpy>
	keys->nid = nid;
    bc38:	f89d a00f 	ldrb.w	sl, [sp, #15]
    bc3c:	f885 a010 	strb.w	sl, [r5, #16]
	BT_DBG("NID 0x%02x EncKey %s", keys->nid, bt_hex(keys->enc, 16));
    bc40:	2304      	movs	r3, #4
    bc42:	2110      	movs	r1, #16
    bc44:	f04f 0600 	mov.w	r6, #0
    bc48:	4648      	mov	r0, r9
    bc4a:	f363 0607 	bfi	r6, r3, #0, #8
    bc4e:	f7fa f85d 	bl	5d0c <bt_hex_real>
    bc52:	f7f7 fed3 	bl	39fc <log_strdup>
    bc56:	f364 168f 	bfi	r6, r4, #6, #10
    bc5a:	4652      	mov	r2, sl
    bc5c:	4603      	mov	r3, r0
    bc5e:	f8ad 6000 	strh.w	r6, [sp]
    bc62:	4945      	ldr	r1, [pc, #276]	; (bd78 <bt_mesh_net_keys_create+0x19c>)
    bc64:	4845      	ldr	r0, [pc, #276]	; (bd7c <bt_mesh_net_keys_create+0x1a0>)
    bc66:	f015 f806 	bl	20c76 <log_3>
	BT_DBG("PrivacyKey %s", bt_hex(keys->privacy, 16));
    bc6a:	f04f 0600 	mov.w	r6, #0
    bc6e:	2304      	movs	r3, #4
    bc70:	2110      	movs	r1, #16
    bc72:	4640      	mov	r0, r8
    bc74:	f363 0607 	bfi	r6, r3, #0, #8
    bc78:	f7fa f848 	bl	5d0c <bt_hex_real>
    bc7c:	f7f7 febe 	bl	39fc <log_strdup>
    bc80:	f364 168f 	bfi	r6, r4, #6, #10
    bc84:	4633      	mov	r3, r6
    bc86:	4602      	mov	r2, r0
    bc88:	493b      	ldr	r1, [pc, #236]	; (bd78 <bt_mesh_net_keys_create+0x19c>)
    bc8a:	483d      	ldr	r0, [pc, #244]	; (bd80 <bt_mesh_net_keys_create+0x1a4>)
	err = bt_mesh_k3(key, keys->net_id);
    bc8c:	f105 0821 	add.w	r8, r5, #33	; 0x21
	BT_DBG("PrivacyKey %s", bt_hex(keys->privacy, 16));
    bc90:	f014 ffd9 	bl	20c46 <log_2>
	err = bt_mesh_k3(key, keys->net_id);
    bc94:	4641      	mov	r1, r8
    bc96:	4638      	mov	r0, r7
    bc98:	f003 f980 	bl	ef9c <bt_mesh_k3>
	if (err) {
    bc9c:	4606      	mov	r6, r0
    bc9e:	b140      	cbz	r0, bcb2 <bt_mesh_net_keys_create+0xd6>
		BT_ERR("Unable to generate Net ID");
    bca0:	f04f 0100 	mov.w	r1, #0
    bca4:	2301      	movs	r3, #1
    bca6:	f363 0107 	bfi	r1, r3, #0, #8
    bcaa:	f364 118f 	bfi	r1, r4, #6, #10
    bcae:	4835      	ldr	r0, [pc, #212]	; (bd84 <bt_mesh_net_keys_create+0x1a8>)
    bcb0:	e7b7      	b.n	bc22 <bt_mesh_net_keys_create+0x46>
	BT_DBG("NetID %s", bt_hex(keys->net_id, 8));
    bcb2:	2304      	movs	r3, #4
    bcb4:	2108      	movs	r1, #8
    bcb6:	4640      	mov	r0, r8
    bcb8:	f04f 0600 	mov.w	r6, #0
    bcbc:	f363 0607 	bfi	r6, r3, #0, #8
    bcc0:	f7fa f824 	bl	5d0c <bt_hex_real>
    bcc4:	f7f7 fe9a 	bl	39fc <log_strdup>
    bcc8:	f364 168f 	bfi	r6, r4, #6, #10
    bccc:	4633      	mov	r3, r6
    bcce:	4602      	mov	r2, r0
    bcd0:	4929      	ldr	r1, [pc, #164]	; (bd78 <bt_mesh_net_keys_create+0x19c>)
    bcd2:	482d      	ldr	r0, [pc, #180]	; (bd88 <bt_mesh_net_keys_create+0x1ac>)
	err = bt_mesh_identity_key(key, keys->identity);
    bcd4:	f105 0829 	add.w	r8, r5, #41	; 0x29
	BT_DBG("NetID %s", bt_hex(keys->net_id, 8));
    bcd8:	f014 ffb5 	bl	20c46 <log_2>
}

static inline int bt_mesh_identity_key(const u8_t net_key[16],
				       u8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    bcdc:	4642      	mov	r2, r8
    bcde:	492b      	ldr	r1, [pc, #172]	; (bd8c <bt_mesh_net_keys_create+0x1b0>)
    bce0:	4638      	mov	r0, r7
    bce2:	f003 f9b1 	bl	f048 <bt_mesh_id128>
	if (err) {
    bce6:	4606      	mov	r6, r0
    bce8:	b140      	cbz	r0, bcfc <bt_mesh_net_keys_create+0x120>
		BT_ERR("Unable to generate IdentityKey");
    bcea:	f04f 0100 	mov.w	r1, #0
    bcee:	2301      	movs	r3, #1
    bcf0:	f363 0107 	bfi	r1, r3, #0, #8
    bcf4:	f364 118f 	bfi	r1, r4, #6, #10
    bcf8:	4825      	ldr	r0, [pc, #148]	; (bd90 <bt_mesh_net_keys_create+0x1b4>)
    bcfa:	e792      	b.n	bc22 <bt_mesh_net_keys_create+0x46>
	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
    bcfc:	2304      	movs	r3, #4
    bcfe:	2110      	movs	r1, #16
    bd00:	f04f 0600 	mov.w	r6, #0
    bd04:	4640      	mov	r0, r8
    bd06:	f363 0607 	bfi	r6, r3, #0, #8
    bd0a:	f7f9 ffff 	bl	5d0c <bt_hex_real>
    bd0e:	f7f7 fe75 	bl	39fc <log_strdup>
    bd12:	f364 168f 	bfi	r6, r4, #6, #10
    bd16:	4633      	mov	r3, r6
    bd18:	4602      	mov	r2, r0
    bd1a:	4917      	ldr	r1, [pc, #92]	; (bd78 <bt_mesh_net_keys_create+0x19c>)
    bd1c:	481d      	ldr	r0, [pc, #116]	; (bd94 <bt_mesh_net_keys_create+0x1b8>)
	err = bt_mesh_beacon_key(key, keys->beacon);
    bd1e:	3549      	adds	r5, #73	; 0x49
	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
    bd20:	f014 ff91 	bl	20c46 <log_2>
}

static inline int bt_mesh_beacon_key(const u8_t net_key[16],
				     u8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    bd24:	462a      	mov	r2, r5
    bd26:	491c      	ldr	r1, [pc, #112]	; (bd98 <bt_mesh_net_keys_create+0x1bc>)
    bd28:	4638      	mov	r0, r7
    bd2a:	f003 f98d 	bl	f048 <bt_mesh_id128>
	if (err) {
    bd2e:	4606      	mov	r6, r0
    bd30:	b140      	cbz	r0, bd44 <bt_mesh_net_keys_create+0x168>
		BT_ERR("Unable to generate beacon key");
    bd32:	f04f 0100 	mov.w	r1, #0
    bd36:	2301      	movs	r3, #1
    bd38:	f363 0107 	bfi	r1, r3, #0, #8
    bd3c:	f364 118f 	bfi	r1, r4, #6, #10
    bd40:	4816      	ldr	r0, [pc, #88]	; (bd9c <bt_mesh_net_keys_create+0x1c0>)
    bd42:	e76e      	b.n	bc22 <bt_mesh_net_keys_create+0x46>
	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));
    bd44:	2304      	movs	r3, #4
    bd46:	2110      	movs	r1, #16
    bd48:	4628      	mov	r0, r5
    bd4a:	f04f 0700 	mov.w	r7, #0
    bd4e:	f363 0707 	bfi	r7, r3, #0, #8
    bd52:	f7f9 ffdb 	bl	5d0c <bt_hex_real>
    bd56:	f7f7 fe51 	bl	39fc <log_strdup>
    bd5a:	f364 178f 	bfi	r7, r4, #6, #10
    bd5e:	4602      	mov	r2, r0
    bd60:	463b      	mov	r3, r7
    bd62:	4905      	ldr	r1, [pc, #20]	; (bd78 <bt_mesh_net_keys_create+0x19c>)
    bd64:	480e      	ldr	r0, [pc, #56]	; (bda0 <bt_mesh_net_keys_create+0x1c4>)
    bd66:	f014 ff6e 	bl	20c46 <log_2>
	return 0;
    bd6a:	e75c      	b.n	bc26 <bt_mesh_net_keys_create+0x4a>
    bd6c:	00025948 	.word	0x00025948
    bd70:	00025880 	.word	0x00025880
    bd74:	000282f5 	.word	0x000282f5
    bd78:	00027d22 	.word	0x00027d22
    bd7c:	00028321 	.word	0x00028321
    bd80:	0002833a 	.word	0x0002833a
    bd84:	0002834c 	.word	0x0002834c
    bd88:	00028366 	.word	0x00028366
    bd8c:	00028373 	.word	0x00028373
    bd90:	00028378 	.word	0x00028378
    bd94:	00028397 	.word	0x00028397
    bd98:	000283aa 	.word	0x000283aa
    bd9c:	000283af 	.word	0x000283af
    bda0:	000283cd 	.word	0x000283cd

0000bda4 <friend_cred_set>:
{
    bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bda8:	b086      	sub	sp, #24
    bdaa:	4604      	mov	r4, r0
	lpn_addr = cred->addr;
    bdac:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    bdb0:	4d47      	ldr	r5, [pc, #284]	; (bed0 <friend_cred_set+0x12c>)
{
    bdb2:	4691      	mov	r9, r2
    bdb4:	460e      	mov	r6, r1
	frnd_addr = bt_mesh_primary_addr();
    bdb6:	f003 fb89 	bl	f4cc <bt_mesh_primary_addr>
	BT_DBG("LPNAddress 0x%04x FriendAddress 0x%04x", lpn_addr, frnd_addr);
    bdba:	2204      	movs	r2, #4
    bdbc:	f04f 0300 	mov.w	r3, #0
    bdc0:	f362 0307 	bfi	r3, r2, #0, #8
    bdc4:	4a43      	ldr	r2, [pc, #268]	; (bed4 <friend_cred_set+0x130>)
    bdc6:	4944      	ldr	r1, [pc, #272]	; (bed8 <friend_cred_set+0x134>)
    bdc8:	1aad      	subs	r5, r5, r2
    bdca:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    bdce:	f365 138f 	bfi	r3, r5, #6, #10
	frnd_addr = bt_mesh_primary_addr();
    bdd2:	4607      	mov	r7, r0
	BT_DBG("LPNAddress 0x%04x FriendAddress 0x%04x", lpn_addr, frnd_addr);
    bdd4:	4642      	mov	r2, r8
    bdd6:	f8ad 3000 	strh.w	r3, [sp]
    bdda:	4603      	mov	r3, r0
    bddc:	483f      	ldr	r0, [pc, #252]	; (bedc <friend_cred_set+0x138>)
    bdde:	f014 ff4a 	bl	20c76 <log_3>
	BT_DBG("LPNCounter 0x%04x FriendCounter 0x%04x", cred->lpn_counter,
    bde2:	2204      	movs	r2, #4
    bde4:	f04f 0300 	mov.w	r3, #0
    bde8:	f362 0307 	bfi	r3, r2, #0, #8
    bdec:	f365 138f 	bfi	r3, r5, #6, #10
    bdf0:	f8ad 3000 	strh.w	r3, [sp]
    bdf4:	88e3      	ldrh	r3, [r4, #6]
    bdf6:	88a2      	ldrh	r2, [r4, #4]
    bdf8:	4937      	ldr	r1, [pc, #220]	; (bed8 <friend_cred_set+0x134>)
    bdfa:	4839      	ldr	r0, [pc, #228]	; (bee0 <friend_cred_set+0x13c>)
    bdfc:	f014 ff3b 	bl	20c76 <log_3>
	p[0] = 0x01;
    be00:	2301      	movs	r3, #1
    be02:	f88d 300c 	strb.w	r3, [sp, #12]
	dst[0] = val >> 8;
    be06:	ea4f 2318 	mov.w	r3, r8, lsr #8
    be0a:	f88d 300d 	strb.w	r3, [sp, #13]
    be0e:	0a3b      	lsrs	r3, r7, #8
    be10:	f88d 300f 	strb.w	r3, [sp, #15]
	sys_put_be16(cred->lpn_counter, p + 5);
    be14:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
    be16:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
    be1a:	0a1a      	lsrs	r2, r3, #8
	sys_put_be16(cred->frnd_counter, p + 7);
    be1c:	88e3      	ldrh	r3, [r4, #6]
    be1e:	f88d 2011 	strb.w	r2, [sp, #17]
	dst[1] = val;
    be22:	f88d 3014 	strb.w	r3, [sp, #20]
	dst[0] = val >> 8;
    be26:	0a1a      	lsrs	r2, r3, #8
    be28:	eb06 1346 	add.w	r3, r6, r6, lsl #5
	dst[1] = val;
    be2c:	f88d 800e 	strb.w	r8, [sp, #14]
    be30:	f88d 7010 	strb.w	r7, [sp, #16]
			 cred->cred[idx].enc, cred->cred[idx].privacy);
    be34:	f103 0809 	add.w	r8, r3, #9
    be38:	f103 0719 	add.w	r7, r3, #25
    be3c:	44a0      	add	r8, r4
    be3e:	4427      	add	r7, r4
	err = bt_mesh_k2(net_key, p, sizeof(p), &cred->cred[idx].nid,
    be40:	3308      	adds	r3, #8
	dst[0] = val >> 8;
    be42:	f88d 2013 	strb.w	r2, [sp, #19]
    be46:	4648      	mov	r0, r9
    be48:	e9cd 8700 	strd	r8, r7, [sp]
    be4c:	4423      	add	r3, r4
    be4e:	2209      	movs	r2, #9
    be50:	a903      	add	r1, sp, #12
    be52:	f003 f84b 	bl	eeec <bt_mesh_k2>
	if (err) {
    be56:	4681      	mov	r9, r0
    be58:	b168      	cbz	r0, be76 <friend_cred_set+0xd2>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    be5a:	f04f 0100 	mov.w	r1, #0
    be5e:	2301      	movs	r3, #1
    be60:	f363 0107 	bfi	r1, r3, #0, #8
    be64:	f365 118f 	bfi	r1, r5, #6, #10
    be68:	481e      	ldr	r0, [pc, #120]	; (bee4 <friend_cred_set+0x140>)
    be6a:	f014 fecb 	bl	20c04 <log_0>
}
    be6e:	4648      	mov	r0, r9
    be70:	b006      	add	sp, #24
    be72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	BT_DBG("Friend NID 0x%02x EncKey %s", cred->cred[idx].nid,
    be76:	eb06 1646 	add.w	r6, r6, r6, lsl #5
    be7a:	4434      	add	r4, r6
    be7c:	2304      	movs	r3, #4
    be7e:	2110      	movs	r1, #16
    be80:	4640      	mov	r0, r8
    be82:	f04f 0a00 	mov.w	sl, #0
    be86:	f363 0a07 	bfi	sl, r3, #0, #8
    be8a:	7a24      	ldrb	r4, [r4, #8]
    be8c:	f7f9 ff3e 	bl	5d0c <bt_hex_real>
    be90:	f7f7 fdb4 	bl	39fc <log_strdup>
    be94:	f365 1a8f 	bfi	sl, r5, #6, #10
    be98:	4622      	mov	r2, r4
    be9a:	4603      	mov	r3, r0
    be9c:	f8ad a000 	strh.w	sl, [sp]
    bea0:	490d      	ldr	r1, [pc, #52]	; (bed8 <friend_cred_set+0x134>)
    bea2:	4811      	ldr	r0, [pc, #68]	; (bee8 <friend_cred_set+0x144>)
    bea4:	f014 fee7 	bl	20c76 <log_3>
	BT_DBG("Friend PrivacyKey %s", bt_hex(cred->cred[idx].privacy, 16));
    bea8:	f04f 0400 	mov.w	r4, #0
    beac:	2304      	movs	r3, #4
    beae:	2110      	movs	r1, #16
    beb0:	4638      	mov	r0, r7
    beb2:	f363 0407 	bfi	r4, r3, #0, #8
    beb6:	f7f9 ff29 	bl	5d0c <bt_hex_real>
    beba:	f7f7 fd9f 	bl	39fc <log_strdup>
    bebe:	f365 148f 	bfi	r4, r5, #6, #10
    bec2:	4602      	mov	r2, r0
    bec4:	4623      	mov	r3, r4
    bec6:	4904      	ldr	r1, [pc, #16]	; (bed8 <friend_cred_set+0x134>)
    bec8:	4808      	ldr	r0, [pc, #32]	; (beec <friend_cred_set+0x148>)
    beca:	f014 febc 	bl	20c46 <log_2>
	return 0;
    bece:	e7ce      	b.n	be6e <friend_cred_set+0xca>
    bed0:	00025948 	.word	0x00025948
    bed4:	00025880 	.word	0x00025880
    bed8:	00027d3a 	.word	0x00027d3a
    bedc:	000285a3 	.word	0x000285a3
    bee0:	000285ce 	.word	0x000285ce
    bee4:	000282f5 	.word	0x000282f5
    bee8:	000285f9 	.word	0x000285f9
    beec:	00028619 	.word	0x00028619

0000bef0 <friend_cred_refresh>:
{
    bef0:	b538      	push	{r3, r4, r5, lr}
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
    bef2:	4c0f      	ldr	r4, [pc, #60]	; (bf30 <friend_cred_refresh+0x40>)
    bef4:	8863      	ldrh	r3, [r4, #2]
{
    bef6:	4605      	mov	r5, r0
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
    bef8:	b14b      	cbz	r3, bf0e <friend_cred_refresh+0x1e>
    befa:	8823      	ldrh	r3, [r4, #0]
    befc:	4283      	cmp	r3, r0
    befe:	d106      	bne.n	bf0e <friend_cred_refresh+0x1e>
			memcpy(&cred->cred[0], &cred->cred[1],
    bf00:	2221      	movs	r2, #33	; 0x21
    bf02:	f104 0129 	add.w	r1, r4, #41	; 0x29
    bf06:	f104 0008 	add.w	r0, r4, #8
    bf0a:	f015 ffbc 	bl	21e86 <memcpy>
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
    bf0e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    bf12:	b15b      	cbz	r3, bf2c <friend_cred_refresh+0x3c>
    bf14:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    bf18:	42ab      	cmp	r3, r5
    bf1a:	d107      	bne.n	bf2c <friend_cred_refresh+0x3c>
			memcpy(&cred->cred[0], &cred->cred[1],
    bf1c:	4905      	ldr	r1, [pc, #20]	; (bf34 <friend_cred_refresh+0x44>)
    bf1e:	2221      	movs	r2, #33	; 0x21
    bf20:	f1a1 0021 	sub.w	r0, r1, #33	; 0x21
}
    bf24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(&cred->cred[0], &cred->cred[1],
    bf28:	f015 bfad 	b.w	21e86 <memcpy>
}
    bf2c:	bd38      	pop	{r3, r4, r5, pc}
    bf2e:	bf00      	nop
    bf30:	20001dac 	.word	0x20001dac
    bf34:	20001e1f 	.word	0x20001e1f

0000bf38 <friend_cred_update>:
{
    bf38:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("net_idx 0x%04x", sub->net_idx);
    bf3a:	2204      	movs	r2, #4
    bf3c:	f04f 0300 	mov.w	r3, #0
    bf40:	f362 0307 	bfi	r3, r2, #0, #8
    bf44:	4916      	ldr	r1, [pc, #88]	; (bfa0 <friend_cred_update+0x68>)
    bf46:	4a17      	ldr	r2, [pc, #92]	; (bfa4 <friend_cred_update+0x6c>)
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    bf48:	4c17      	ldr	r4, [pc, #92]	; (bfa8 <friend_cred_update+0x70>)
    bf4a:	1a52      	subs	r2, r2, r1
    bf4c:	08d2      	lsrs	r2, r2, #3
	BT_DBG("net_idx 0x%04x", sub->net_idx);
    bf4e:	f362 138f 	bfi	r3, r2, #6, #10
{
    bf52:	4605      	mov	r5, r0
	BT_DBG("net_idx 0x%04x", sub->net_idx);
    bf54:	8b82      	ldrh	r2, [r0, #28]
    bf56:	4915      	ldr	r1, [pc, #84]	; (bfac <friend_cred_update+0x74>)
    bf58:	4815      	ldr	r0, [pc, #84]	; (bfb0 <friend_cred_update+0x78>)
    bf5a:	f014 fe74 	bl	20c46 <log_2>
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    bf5e:	8863      	ldrh	r3, [r4, #2]
    bf60:	b153      	cbz	r3, bf78 <friend_cred_update+0x40>
    bf62:	8822      	ldrh	r2, [r4, #0]
    bf64:	8bab      	ldrh	r3, [r5, #28]
    bf66:	429a      	cmp	r2, r3
    bf68:	d106      	bne.n	bf78 <friend_cred_update+0x40>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
    bf6a:	f105 0289 	add.w	r2, r5, #137	; 0x89
    bf6e:	2101      	movs	r1, #1
    bf70:	4620      	mov	r0, r4
    bf72:	f7ff ff17 	bl	bda4 <friend_cred_set>
		if (err) {
    bf76:	b918      	cbnz	r0, bf80 <friend_cred_update+0x48>
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    bf78:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    bf7c:	b90b      	cbnz	r3, bf82 <friend_cred_update+0x4a>
	return 0;
    bf7e:	2000      	movs	r0, #0
}
    bf80:	bd38      	pop	{r3, r4, r5, pc}
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    bf82:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
    bf86:	8bab      	ldrh	r3, [r5, #28]
    bf88:	429a      	cmp	r2, r3
    bf8a:	d1f8      	bne.n	bf7e <friend_cred_update+0x46>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
    bf8c:	f105 0289 	add.w	r2, r5, #137	; 0x89
    bf90:	2101      	movs	r1, #1
    bf92:	4808      	ldr	r0, [pc, #32]	; (bfb4 <friend_cred_update+0x7c>)
    bf94:	f7ff ff06 	bl	bda4 <friend_cred_set>
		if (err) {
    bf98:	2800      	cmp	r0, #0
    bf9a:	d0f0      	beq.n	bf7e <friend_cred_update+0x46>
    bf9c:	e7f0      	b.n	bf80 <friend_cred_update+0x48>
    bf9e:	bf00      	nop
    bfa0:	00025880 	.word	0x00025880
    bfa4:	00025948 	.word	0x00025948
    bfa8:	20001dac 	.word	0x20001dac
    bfac:	00027d4a 	.word	0x00027d4a
    bfb0:	00028632 	.word	0x00028632
    bfb4:	20001df6 	.word	0x20001df6

0000bfb8 <friend_cred_create>:
{
    bfb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bfbc:	4690      	mov	r8, r2
    bfbe:	461f      	mov	r7, r3
	BT_DBG("net_idx 0x%04x addr 0x%04x", sub->net_idx, addr);
    bfc0:	2204      	movs	r2, #4
    bfc2:	f04f 0300 	mov.w	r3, #0
    bfc6:	f362 0307 	bfi	r3, r2, #0, #8
    bfca:	4c2d      	ldr	r4, [pc, #180]	; (c080 <friend_cred_create+0xc8>)
    bfcc:	4a2d      	ldr	r2, [pc, #180]	; (c084 <friend_cred_create+0xcc>)
    bfce:	1aa4      	subs	r4, r4, r2
    bfd0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    bfd4:	f364 138f 	bfi	r3, r4, #6, #10
    bfd8:	f8ad 3000 	strh.w	r3, [sp]
    bfdc:	8b82      	ldrh	r2, [r0, #28]
    bfde:	460b      	mov	r3, r1
{
    bfe0:	4605      	mov	r5, r0
    bfe2:	460e      	mov	r6, r1
	BT_DBG("net_idx 0x%04x addr 0x%04x", sub->net_idx, addr);
    bfe4:	4828      	ldr	r0, [pc, #160]	; (c088 <friend_cred_create+0xd0>)
    bfe6:	4929      	ldr	r1, [pc, #164]	; (c08c <friend_cred_create+0xd4>)
    bfe8:	f014 fe45 	bl	20c76 <log_3>
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
    bfec:	4b28      	ldr	r3, [pc, #160]	; (c090 <friend_cred_create+0xd8>)
    bfee:	885a      	ldrh	r2, [r3, #2]
    bff0:	b192      	cbz	r2, c018 <friend_cred_create+0x60>
    bff2:	4296      	cmp	r6, r2
    bff4:	d103      	bne.n	bffe <friend_cred_create+0x46>
		    (friend_cred[i].addr == addr &&
    bff6:	8819      	ldrh	r1, [r3, #0]
    bff8:	8baa      	ldrh	r2, [r5, #28]
    bffa:	4291      	cmp	r1, r2
    bffc:	d00b      	beq.n	c016 <friend_cred_create+0x5e>
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
    bffe:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    c002:	b132      	cbz	r2, c012 <friend_cred_create+0x5a>
    c004:	4296      	cmp	r6, r2
    c006:	d11c      	bne.n	c042 <friend_cred_create+0x8a>
		    (friend_cred[i].addr == addr &&
    c008:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
    c00c:	8baa      	ldrh	r2, [r5, #28]
    c00e:	4291      	cmp	r1, r2
    c010:	d117      	bne.n	c042 <friend_cred_create+0x8a>
	for (cred = NULL, i = 0; i < ARRAY_SIZE(friend_cred); i++) {
    c012:	2201      	movs	r2, #1
    c014:	e000      	b.n	c018 <friend_cred_create+0x60>
    c016:	2200      	movs	r2, #0
			cred = &friend_cred[i];
    c018:	214a      	movs	r1, #74	; 0x4a
    c01a:	434a      	muls	r2, r1
    c01c:	189c      	adds	r4, r3, r2
	cred->net_idx = sub->net_idx;
    c01e:	8ba9      	ldrh	r1, [r5, #28]
    c020:	5299      	strh	r1, [r3, r2]
	cred->addr = addr;
    c022:	8066      	strh	r6, [r4, #2]
	cred->lpn_counter = lpn_counter;
    c024:	f8a4 8004 	strh.w	r8, [r4, #4]
	cred->frnd_counter = frnd_counter;
    c028:	80e7      	strh	r7, [r4, #6]
	err = friend_cred_set(cred, 0, sub->keys[0].net);
    c02a:	f105 0230 	add.w	r2, r5, #48	; 0x30
    c02e:	2100      	movs	r1, #0
    c030:	4620      	mov	r0, r4
    c032:	f7ff feb7 	bl	bda4 <friend_cred_set>
	if (err) {
    c036:	4606      	mov	r6, r0
    c038:	b190      	cbz	r0, c060 <friend_cred_create+0xa8>
		friend_cred_clear(cred);
    c03a:	4620      	mov	r0, r4
    c03c:	f016 ffe1 	bl	23002 <friend_cred_clear>
    c040:	e009      	b.n	c056 <friend_cred_create+0x9e>
		BT_WARN("No free friend credential slots");
    c042:	f04f 0100 	mov.w	r1, #0
    c046:	2302      	movs	r3, #2
    c048:	f363 0107 	bfi	r1, r3, #0, #8
    c04c:	f364 118f 	bfi	r1, r4, #6, #10
    c050:	4810      	ldr	r0, [pc, #64]	; (c094 <friend_cred_create+0xdc>)
    c052:	f014 fdd7 	bl	20c04 <log_0>
		return NULL;
    c056:	2400      	movs	r4, #0
}
    c058:	4620      	mov	r0, r4
    c05a:	b002      	add	sp, #8
    c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sub->kr_flag) {
    c060:	7fab      	ldrb	r3, [r5, #30]
    c062:	2b00      	cmp	r3, #0
    c064:	d0f8      	beq.n	c058 <friend_cred_create+0xa0>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
    c066:	f105 0289 	add.w	r2, r5, #137	; 0x89
    c06a:	2101      	movs	r1, #1
    c06c:	4620      	mov	r0, r4
    c06e:	f7ff fe99 	bl	bda4 <friend_cred_set>
		if (err) {
    c072:	2800      	cmp	r0, #0
    c074:	d0f0      	beq.n	c058 <friend_cred_create+0xa0>
			friend_cred_clear(cred);
    c076:	4620      	mov	r0, r4
    c078:	f016 ffc3 	bl	23002 <friend_cred_clear>
			return NULL;
    c07c:	4634      	mov	r4, r6
    c07e:	e7eb      	b.n	c058 <friend_cred_create+0xa0>
    c080:	00025948 	.word	0x00025948
    c084:	00025880 	.word	0x00025880
    c088:	00028564 	.word	0x00028564
    c08c:	00027d5d 	.word	0x00027d5d
    c090:	20001dac 	.word	0x20001dac
    c094:	00028583 	.word	0x00028583

0000c098 <friend_cred_del>:
		if (cred->addr == addr && cred->net_idx == net_idx) {
    c098:	4b0d      	ldr	r3, [pc, #52]	; (c0d0 <friend_cred_del+0x38>)
    c09a:	885a      	ldrh	r2, [r3, #2]
    c09c:	428a      	cmp	r2, r1
{
    c09e:	b510      	push	{r4, lr}
    c0a0:	461a      	mov	r2, r3
		if (cred->addr == addr && cred->net_idx == net_idx) {
    c0a2:	d102      	bne.n	c0aa <friend_cred_del+0x12>
    c0a4:	881c      	ldrh	r4, [r3, #0]
    c0a6:	4284      	cmp	r4, r0
    c0a8:	d00c      	beq.n	c0c4 <friend_cred_del+0x2c>
    c0aa:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    c0ae:	428b      	cmp	r3, r1
    c0b0:	d10a      	bne.n	c0c8 <friend_cred_del+0x30>
    c0b2:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
    c0b6:	4283      	cmp	r3, r0
    c0b8:	d106      	bne.n	c0c8 <friend_cred_del+0x30>
		struct friend_cred *cred = &friend_cred[i];
    c0ba:	4806      	ldr	r0, [pc, #24]	; (c0d4 <friend_cred_del+0x3c>)
			friend_cred_clear(cred);
    c0bc:	f016 ffa1 	bl	23002 <friend_cred_clear>
			return 0;
    c0c0:	2000      	movs	r0, #0
}
    c0c2:	bd10      	pop	{r4, pc}
		struct friend_cred *cred = &friend_cred[i];
    c0c4:	4618      	mov	r0, r3
    c0c6:	e7f9      	b.n	c0bc <friend_cred_del+0x24>
	return -ENOENT;
    c0c8:	f06f 0001 	mvn.w	r0, #1
    c0cc:	e7f9      	b.n	c0c2 <friend_cred_del+0x2a>
    c0ce:	bf00      	nop
    c0d0:	20001dac 	.word	0x20001dac
    c0d4:	20001df6 	.word	0x20001df6

0000c0d8 <friend_cred_get>:
{
    c0d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c0dc:	4690      	mov	r8, r2
    c0de:	461f      	mov	r7, r3
	BT_DBG("net_idx 0x%04x addr 0x%04x", sub->net_idx, addr);
    c0e0:	f04f 0200 	mov.w	r2, #0
    c0e4:	2304      	movs	r3, #4
{
    c0e6:	460d      	mov	r5, r1
	BT_DBG("net_idx 0x%04x addr 0x%04x", sub->net_idx, addr);
    c0e8:	f363 0207 	bfi	r2, r3, #0, #8
    c0ec:	4927      	ldr	r1, [pc, #156]	; (c18c <friend_cred_get+0xb4>)
    c0ee:	4b28      	ldr	r3, [pc, #160]	; (c190 <friend_cred_get+0xb8>)
{
    c0f0:	9c08      	ldr	r4, [sp, #32]
    c0f2:	1a5b      	subs	r3, r3, r1
    c0f4:	08db      	lsrs	r3, r3, #3
	BT_DBG("net_idx 0x%04x addr 0x%04x", sub->net_idx, addr);
    c0f6:	f363 128f 	bfi	r2, r3, #6, #10
    c0fa:	f8ad 2000 	strh.w	r2, [sp]
    c0fe:	8b82      	ldrh	r2, [r0, #28]
    c100:	4924      	ldr	r1, [pc, #144]	; (c194 <friend_cred_get+0xbc>)
{
    c102:	4606      	mov	r6, r0
	BT_DBG("net_idx 0x%04x addr 0x%04x", sub->net_idx, addr);
    c104:	462b      	mov	r3, r5
    c106:	4824      	ldr	r0, [pc, #144]	; (c198 <friend_cred_get+0xc0>)
    c108:	f014 fdb5 	bl	20c76 <log_3>
		if (cred->net_idx != sub->net_idx) {
    c10c:	4923      	ldr	r1, [pc, #140]	; (c19c <friend_cred_get+0xc4>)
    c10e:	8bb3      	ldrh	r3, [r6, #28]
    c110:	880a      	ldrh	r2, [r1, #0]
    c112:	429a      	cmp	r2, r3
    c114:	d103      	bne.n	c11e <friend_cred_get+0x46>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
    c116:	b175      	cbz	r5, c136 <friend_cred_get+0x5e>
    c118:	884a      	ldrh	r2, [r1, #2]
    c11a:	42aa      	cmp	r2, r5
    c11c:	d00a      	beq.n	c134 <friend_cred_get+0x5c>
		if (cred->net_idx != sub->net_idx) {
    c11e:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
    c122:	429a      	cmp	r2, r3
    c124:	d12c      	bne.n	c180 <friend_cred_get+0xa8>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
    c126:	b11d      	cbz	r5, c130 <friend_cred_get+0x58>
    c128:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
    c12c:	42ab      	cmp	r3, r5
    c12e:	d127      	bne.n	c180 <friend_cred_get+0xa8>
	for (i = 0; i < ARRAY_SIZE(friend_cred); i++) {
    c130:	2501      	movs	r5, #1
    c132:	e000      	b.n	c136 <friend_cred_get+0x5e>
    c134:	2500      	movs	r5, #0
		if (nid) {
    c136:	f1b8 0f00 	cmp.w	r8, #0
    c13a:	d009      	beq.n	c150 <friend_cred_get+0x78>
			*nid = cred->cred[sub->kr_flag].nid;
    c13c:	7fb3      	ldrb	r3, [r6, #30]
    c13e:	eb03 1243 	add.w	r2, r3, r3, lsl #5
    c142:	234a      	movs	r3, #74	; 0x4a
    c144:	fb03 2305 	mla	r3, r3, r5, r2
    c148:	440b      	add	r3, r1
    c14a:	7a1b      	ldrb	r3, [r3, #8]
    c14c:	f888 3000 	strb.w	r3, [r8]
		if (enc) {
    c150:	b147      	cbz	r7, c164 <friend_cred_get+0x8c>
			*enc = cred->cred[sub->kr_flag].enc;
    c152:	7fb2      	ldrb	r2, [r6, #30]
    c154:	eb02 1242 	add.w	r2, r2, r2, lsl #5
    c158:	3209      	adds	r2, #9
    c15a:	234a      	movs	r3, #74	; 0x4a
    c15c:	fb03 2205 	mla	r2, r3, r5, r2
    c160:	440a      	add	r2, r1
    c162:	603a      	str	r2, [r7, #0]
		if (priv) {
    c164:	b17c      	cbz	r4, c186 <friend_cred_get+0xae>
			*priv = cred->cred[sub->kr_flag].privacy;
    c166:	7fb2      	ldrb	r2, [r6, #30]
    c168:	eb02 1242 	add.w	r2, r2, r2, lsl #5
    c16c:	3219      	adds	r2, #25
    c16e:	234a      	movs	r3, #74	; 0x4a
    c170:	fb03 2305 	mla	r3, r3, r5, r2
    c174:	4419      	add	r1, r3
    c176:	6021      	str	r1, [r4, #0]
		return 0;
    c178:	2000      	movs	r0, #0
}
    c17a:	b002      	add	sp, #8
    c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return -ENOENT;
    c180:	f06f 0001 	mvn.w	r0, #1
    c184:	e7f9      	b.n	c17a <friend_cred_get+0xa2>
		return 0;
    c186:	4620      	mov	r0, r4
    c188:	e7f7      	b.n	c17a <friend_cred_get+0xa2>
    c18a:	bf00      	nop
    c18c:	00025880 	.word	0x00025880
    c190:	00025948 	.word	0x00025948
    c194:	00027d70 	.word	0x00027d70
    c198:	00028564 	.word	0x00028564
    c19c:	20001dac 	.word	0x20001dac

0000c1a0 <bt_mesh_net_beacon_update>:
{
    c1a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c1a2:	4604      	mov	r4, r0
    c1a4:	4d20      	ldr	r5, [pc, #128]	; (c228 <bt_mesh_net_beacon_update+0x88>)
	u8_t flags = bt_mesh_net_flags(sub);
    c1a6:	f016 ff37 	bl	23018 <bt_mesh_net_flags>
    c1aa:	4b20      	ldr	r3, [pc, #128]	; (c22c <bt_mesh_net_beacon_update+0x8c>)
    c1ac:	8ba2      	ldrh	r2, [r4, #28]
    c1ae:	1aed      	subs	r5, r5, r3
	if (sub->kr_flag) {
    c1b0:	7fa3      	ldrb	r3, [r4, #30]
	u8_t flags = bt_mesh_net_flags(sub);
    c1b2:	4607      	mov	r7, r0
	if (sub->kr_flag) {
    c1b4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    c1b8:	b343      	cbz	r3, c20c <bt_mesh_net_beacon_update+0x6c>
		BT_DBG("NetIndex %u Using new key", sub->net_idx);
    c1ba:	2104      	movs	r1, #4
    c1bc:	f04f 0300 	mov.w	r3, #0
    c1c0:	f361 0307 	bfi	r3, r1, #0, #8
    c1c4:	f365 138f 	bfi	r3, r5, #6, #10
    c1c8:	4919      	ldr	r1, [pc, #100]	; (c230 <bt_mesh_net_beacon_update+0x90>)
    c1ca:	481a      	ldr	r0, [pc, #104]	; (c234 <bt_mesh_net_beacon_update+0x94>)
    c1cc:	f014 fd3b 	bl	20c46 <log_2>
		keys = &sub->keys[1];
    c1d0:	f104 0689 	add.w	r6, r4, #137	; 0x89
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);
    c1d4:	2204      	movs	r2, #4
    c1d6:	f04f 0300 	mov.w	r3, #0
    c1da:	f362 0307 	bfi	r3, r2, #0, #8
    c1de:	f365 138f 	bfi	r3, r5, #6, #10
    c1e2:	4d15      	ldr	r5, [pc, #84]	; (c238 <bt_mesh_net_beacon_update+0x98>)
    c1e4:	f8ad 3000 	strh.w	r3, [sp]
    c1e8:	682b      	ldr	r3, [r5, #0]
    c1ea:	4911      	ldr	r1, [pc, #68]	; (c230 <bt_mesh_net_beacon_update+0x90>)
    c1ec:	4813      	ldr	r0, [pc, #76]	; (c23c <bt_mesh_net_beacon_update+0x9c>)
    c1ee:	463a      	mov	r2, r7
				   bt_mesh.iv_index, sub->auth);
    c1f0:	3428      	adds	r4, #40	; 0x28
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);
    c1f2:	f014 fd40 	bl	20c76 <log_3>
	return bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    c1f6:	9400      	str	r4, [sp, #0]
    c1f8:	682b      	ldr	r3, [r5, #0]
    c1fa:	f106 0221 	add.w	r2, r6, #33	; 0x21
    c1fe:	4639      	mov	r1, r7
    c200:	f106 0049 	add.w	r0, r6, #73	; 0x49
    c204:	f017 fbcb 	bl	2399e <bt_mesh_beacon_auth>
}
    c208:	b003      	add	sp, #12
    c20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_DBG("NetIndex %u Using current key", sub->net_idx);
    c20c:	2104      	movs	r1, #4
    c20e:	f04f 0300 	mov.w	r3, #0
    c212:	f361 0307 	bfi	r3, r1, #0, #8
    c216:	f365 138f 	bfi	r3, r5, #6, #10
    c21a:	4905      	ldr	r1, [pc, #20]	; (c230 <bt_mesh_net_beacon_update+0x90>)
    c21c:	4808      	ldr	r0, [pc, #32]	; (c240 <bt_mesh_net_beacon_update+0xa0>)
    c21e:	f014 fd12 	bl	20c46 <log_2>
		keys = &sub->keys[0];
    c222:	f104 0630 	add.w	r6, r4, #48	; 0x30
    c226:	e7d5      	b.n	c1d4 <bt_mesh_net_beacon_update+0x34>
    c228:	00025948 	.word	0x00025948
    c22c:	00025880 	.word	0x00025880
    c230:	00027d80 	.word	0x00027d80
    c234:	00027f2e 	.word	0x00027f2e
    c238:	20007060 	.word	0x20007060
    c23c:	00027f6e 	.word	0x00027f6e
    c240:	00027f4c 	.word	0x00027f4c

0000c244 <bt_mesh_net_create>:
{
    c244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    c248:	4615      	mov	r5, r2
    c24a:	4698      	mov	r8, r3
	BT_DBG("idx %u flags 0x%02x iv_index %u", idx, flags, iv_index);
    c24c:	2204      	movs	r2, #4
    c24e:	f04f 0300 	mov.w	r3, #0
    c252:	f362 0307 	bfi	r3, r2, #0, #8
    c256:	4c2e      	ldr	r4, [pc, #184]	; (c310 <bt_mesh_net_create+0xcc>)
    c258:	4a2e      	ldr	r2, [pc, #184]	; (c314 <bt_mesh_net_create+0xd0>)
    c25a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; c330 <bt_mesh_net_create+0xec>
    c25e:	1aa4      	subs	r4, r4, r2
    c260:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    c264:	2204      	movs	r2, #4
    c266:	f364 138f 	bfi	r3, r4, #6, #10
{
    c26a:	460e      	mov	r6, r1
	BT_DBG("idx %u flags 0x%02x iv_index %u", idx, flags, iv_index);
    c26c:	e9cd a000 	strd	sl, r0, [sp]
    c270:	e9cd 1802 	strd	r1, r8, [sp, #8]
{
    c274:	4681      	mov	r9, r0
	BT_DBG("idx %u flags 0x%02x iv_index %u", idx, flags, iv_index);
    c276:	4669      	mov	r1, sp
    c278:	4827      	ldr	r0, [pc, #156]	; (c318 <bt_mesh_net_create+0xd4>)
    c27a:	f014 fd17 	bl	20cac <log_n>
	BT_DBG("NetKey %s", bt_hex(key, 16));
    c27e:	f04f 0700 	mov.w	r7, #0
    c282:	2304      	movs	r3, #4
    c284:	2110      	movs	r1, #16
    c286:	4628      	mov	r0, r5
    c288:	f363 0707 	bfi	r7, r3, #0, #8
    c28c:	f7f9 fd3e 	bl	5d0c <bt_hex_real>
    c290:	f7f7 fbb4 	bl	39fc <log_strdup>
    c294:	f364 178f 	bfi	r7, r4, #6, #10
    c298:	463b      	mov	r3, r7
    c29a:	4602      	mov	r2, r0
    c29c:	4651      	mov	r1, sl
    c29e:	481f      	ldr	r0, [pc, #124]	; (c31c <bt_mesh_net_create+0xd8>)
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
    c2a0:	4c1f      	ldr	r4, [pc, #124]	; (c320 <bt_mesh_net_create+0xdc>)
	BT_DBG("NetKey %s", bt_hex(key, 16));
    c2a2:	f014 fcd0 	bl	20c46 <log_2>
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    c2a6:	2250      	movs	r2, #80	; 0x50
    c2a8:	2100      	movs	r1, #0
    c2aa:	481e      	ldr	r0, [pc, #120]	; (c324 <bt_mesh_net_create+0xe0>)
    c2ac:	f015 fe15 	bl	21eda <memset>
	msg_cache_next = 0U;
    c2b0:	4b1d      	ldr	r3, [pc, #116]	; (c328 <bt_mesh_net_create+0xe4>)
    c2b2:	2200      	movs	r2, #0
    c2b4:	801a      	strh	r2, [r3, #0]
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
    c2b6:	f006 0301 	and.w	r3, r6, #1
    c2ba:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    c2be:	4629      	mov	r1, r5
	if (sub->kr_flag) {
    c2c0:	b1fb      	cbz	r3, c302 <bt_mesh_net_create+0xbe>
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    c2c2:	f204 201d 	addw	r0, r4, #541	; 0x21d
    c2c6:	f7ff fc89 	bl	bbdc <bt_mesh_net_keys_create>
		if (err) {
    c2ca:	b120      	cbz	r0, c2d6 <bt_mesh_net_create+0x92>
			return -EIO;
    c2cc:	f06f 0004 	mvn.w	r0, #4
}
    c2d0:	b004      	add	sp, #16
    c2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sub->kr_phase = BT_MESH_KR_PHASE_2;
    c2d6:	2302      	movs	r3, #2
    c2d8:	f884 31b3 	strb.w	r3, [r4, #435]	; 0x1b3
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    c2dc:	2500      	movs	r5, #0
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c2de:	f3c6 0040 	ubfx	r0, r6, #1, #1
	sub->net_idx = idx;
    c2e2:	f8a4 91b0 	strh.w	r9, [r4, #432]	; 0x1b0
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    c2e6:	f884 51b4 	strb.w	r5, [r4, #436]	; 0x1b4
	bt_mesh.iv_index = iv_index;
    c2ea:	f8c4 8000 	str.w	r8, [r4]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c2ee:	f7ff fc3d 	bl	bb6c <atomic_set_bit_to.constprop.6>
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    c2f2:	2360      	movs	r3, #96	; 0x60
	bt_mesh_net_beacon_update(sub);
    c2f4:	480d      	ldr	r0, [pc, #52]	; (c32c <bt_mesh_net_create+0xe8>)
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    c2f6:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	bt_mesh_net_beacon_update(sub);
    c2fa:	f7ff ff51 	bl	c1a0 <bt_mesh_net_beacon_update>
	return 0;
    c2fe:	4628      	mov	r0, r5
    c300:	e7e6      	b.n	c2d0 <bt_mesh_net_create+0x8c>
		err = bt_mesh_net_keys_create(&sub->keys[0], key);
    c302:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
    c306:	f7ff fc69 	bl	bbdc <bt_mesh_net_keys_create>
		if (err) {
    c30a:	2800      	cmp	r0, #0
    c30c:	d0e6      	beq.n	c2dc <bt_mesh_net_create+0x98>
    c30e:	e7dd      	b.n	c2cc <bt_mesh_net_create+0x88>
    c310:	00025948 	.word	0x00025948
    c314:	00025880 	.word	0x00025880
    c318:	00027f8b 	.word	0x00027f8b
    c31c:	00027faf 	.word	0x00027faf
    c320:	20007060 	.word	0x20007060
    c324:	20000000 	.word	0x20000000
    c328:	20001e40 	.word	0x20001e40
    c32c:	200071f4 	.word	0x200071f4
    c330:	00027d9a 	.word	0x00027d9a

0000c334 <bt_mesh_net_revoke_keys>:
{
    c334:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("idx 0x%04x", sub->net_idx);
    c336:	2204      	movs	r2, #4
    c338:	f04f 0300 	mov.w	r3, #0
    c33c:	f362 0307 	bfi	r3, r2, #0, #8
    c340:	491b      	ldr	r1, [pc, #108]	; (c3b0 <bt_mesh_net_revoke_keys+0x7c>)
    c342:	4a1c      	ldr	r2, [pc, #112]	; (c3b4 <bt_mesh_net_revoke_keys+0x80>)
		if (key->net_idx != sub->net_idx || !key->updated) {
    c344:	4c1c      	ldr	r4, [pc, #112]	; (c3b8 <bt_mesh_net_revoke_keys+0x84>)
    c346:	1a52      	subs	r2, r2, r1
    c348:	08d2      	lsrs	r2, r2, #3
{
    c34a:	4605      	mov	r5, r0
	BT_DBG("idx 0x%04x", sub->net_idx);
    c34c:	f362 138f 	bfi	r3, r2, #6, #10
    c350:	491a      	ldr	r1, [pc, #104]	; (c3bc <bt_mesh_net_revoke_keys+0x88>)
    c352:	8b82      	ldrh	r2, [r0, #28]
    c354:	481a      	ldr	r0, [pc, #104]	; (c3c0 <bt_mesh_net_revoke_keys+0x8c>)
    c356:	f014 fc76 	bl	20c46 <log_2>
	memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
    c35a:	2259      	movs	r2, #89	; 0x59
    c35c:	f105 0189 	add.w	r1, r5, #137	; 0x89
    c360:	f105 0030 	add.w	r0, r5, #48	; 0x30
    c364:	f015 fd8f 	bl	21e86 <memcpy>
		if (key->net_idx != sub->net_idx || !key->updated) {
    c368:	f8b4 2144 	ldrh.w	r2, [r4, #324]	; 0x144
    c36c:	8bab      	ldrh	r3, [r5, #28]
    c36e:	429a      	cmp	r2, r3
    c370:	d10c      	bne.n	c38c <bt_mesh_net_revoke_keys+0x58>
    c372:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
    c376:	b14b      	cbz	r3, c38c <bt_mesh_net_revoke_keys+0x58>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    c378:	2211      	movs	r2, #17
    c37a:	f504 71ad 	add.w	r1, r4, #346	; 0x15a
    c37e:	f204 1049 	addw	r0, r4, #329	; 0x149
    c382:	f015 fd80 	bl	21e86 <memcpy>
		key->updated = false;
    c386:	2300      	movs	r3, #0
    c388:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
		if (key->net_idx != sub->net_idx || !key->updated) {
    c38c:	f8b4 216c 	ldrh.w	r2, [r4, #364]	; 0x16c
    c390:	8bab      	ldrh	r3, [r5, #28]
    c392:	429a      	cmp	r2, r3
    c394:	d10b      	bne.n	c3ae <bt_mesh_net_revoke_keys+0x7a>
    c396:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    c39a:	b143      	cbz	r3, c3ae <bt_mesh_net_revoke_keys+0x7a>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    c39c:	4909      	ldr	r1, [pc, #36]	; (c3c4 <bt_mesh_net_revoke_keys+0x90>)
    c39e:	2211      	movs	r2, #17
    c3a0:	f1a1 0011 	sub.w	r0, r1, #17
    c3a4:	f015 fd6f 	bl	21e86 <memcpy>
		key->updated = false;
    c3a8:	2300      	movs	r3, #0
    c3aa:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
}
    c3ae:	bd38      	pop	{r3, r4, r5, pc}
    c3b0:	00025880 	.word	0x00025880
    c3b4:	00025948 	.word	0x00025948
    c3b8:	20007060 	.word	0x20007060
    c3bc:	00027dad 	.word	0x00027dad
    c3c0:	000284f4 	.word	0x000284f4
    c3c4:	200071e2 	.word	0x200071e2

0000c3c8 <bt_mesh_kr_update>:
{
    c3c8:	b538      	push	{r3, r4, r5, lr}
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
    c3ca:	7f83      	ldrb	r3, [r0, #30]
    c3cc:	7fc5      	ldrb	r5, [r0, #31]
    c3ce:	428b      	cmp	r3, r1
{
    c3d0:	4604      	mov	r4, r0
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
    c3d2:	d010      	beq.n	c3f6 <bt_mesh_kr_update+0x2e>
    c3d4:	b97d      	cbnz	r5, c3f6 <bt_mesh_kr_update+0x2e>
		BT_WARN("KR change in normal operation. Are we blacklisted?");
    c3d6:	2302      	movs	r3, #2
    c3d8:	f04f 0100 	mov.w	r1, #0
    c3dc:	f363 0107 	bfi	r1, r3, #0, #8
    c3e0:	4a22      	ldr	r2, [pc, #136]	; (c46c <bt_mesh_kr_update+0xa4>)
    c3e2:	4b23      	ldr	r3, [pc, #140]	; (c470 <bt_mesh_kr_update+0xa8>)
    c3e4:	4823      	ldr	r0, [pc, #140]	; (c474 <bt_mesh_kr_update+0xac>)
    c3e6:	1a9b      	subs	r3, r3, r2
    c3e8:	08db      	lsrs	r3, r3, #3
    c3ea:	f363 118f 	bfi	r1, r3, #6, #10
    c3ee:	f014 fc09 	bl	20c04 <log_0>
	return false;
    c3f2:	2200      	movs	r2, #0
    c3f4:	e038      	b.n	c468 <bt_mesh_kr_update+0xa0>
	sub->kr_flag = new_kr;
    c3f6:	2900      	cmp	r1, #0
    c3f8:	bf14      	ite	ne
    c3fa:	2301      	movne	r3, #1
    c3fc:	2300      	moveq	r3, #0
    c3fe:	77a3      	strb	r3, [r4, #30]
	if (sub->kr_flag) {
    c400:	d014      	beq.n	c42c <bt_mesh_kr_update+0x64>
		if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
    c402:	2d01      	cmp	r5, #1
    c404:	d1f5      	bne.n	c3f2 <bt_mesh_kr_update+0x2a>
			BT_DBG("Phase 1 -> Phase 2");
    c406:	2304      	movs	r3, #4
    c408:	f04f 0200 	mov.w	r2, #0
    c40c:	f363 0207 	bfi	r2, r3, #0, #8
    c410:	4916      	ldr	r1, [pc, #88]	; (c46c <bt_mesh_kr_update+0xa4>)
    c412:	4b17      	ldr	r3, [pc, #92]	; (c470 <bt_mesh_kr_update+0xa8>)
    c414:	4818      	ldr	r0, [pc, #96]	; (c478 <bt_mesh_kr_update+0xb0>)
    c416:	1a5b      	subs	r3, r3, r1
    c418:	08db      	lsrs	r3, r3, #3
    c41a:	f363 128f 	bfi	r2, r3, #6, #10
    c41e:	4917      	ldr	r1, [pc, #92]	; (c47c <bt_mesh_kr_update+0xb4>)
    c420:	f014 fbfd 	bl	20c1e <log_1>
			sub->kr_phase = BT_MESH_KR_PHASE_2;
    c424:	2302      	movs	r3, #2
			sub->kr_phase = BT_MESH_KR_NORMAL;
    c426:	77e3      	strb	r3, [r4, #31]
			return true;
    c428:	2201      	movs	r2, #1
    c42a:	e01d      	b.n	c468 <bt_mesh_kr_update+0xa0>
		switch (sub->kr_phase) {
    c42c:	2d01      	cmp	r5, #1
    c42e:	d019      	beq.n	c464 <bt_mesh_kr_update+0x9c>
    c430:	2d02      	cmp	r5, #2
    c432:	d1de      	bne.n	c3f2 <bt_mesh_kr_update+0x2a>
			BT_DBG("KR Phase 0x%02x -> Normal", sub->kr_phase);
    c434:	2204      	movs	r2, #4
    c436:	f04f 0300 	mov.w	r3, #0
    c43a:	f362 0307 	bfi	r3, r2, #0, #8
    c43e:	490b      	ldr	r1, [pc, #44]	; (c46c <bt_mesh_kr_update+0xa4>)
    c440:	4a0b      	ldr	r2, [pc, #44]	; (c470 <bt_mesh_kr_update+0xa8>)
    c442:	480f      	ldr	r0, [pc, #60]	; (c480 <bt_mesh_kr_update+0xb8>)
    c444:	1a52      	subs	r2, r2, r1
    c446:	08d2      	lsrs	r2, r2, #3
    c448:	f362 138f 	bfi	r3, r2, #6, #10
    c44c:	490b      	ldr	r1, [pc, #44]	; (c47c <bt_mesh_kr_update+0xb4>)
    c44e:	462a      	mov	r2, r5
    c450:	f014 fbf9 	bl	20c46 <log_2>
			bt_mesh_net_revoke_keys(sub);
    c454:	4620      	mov	r0, r4
    c456:	f7ff ff6d 	bl	c334 <bt_mesh_net_revoke_keys>
				friend_cred_refresh(sub->net_idx);
    c45a:	8ba0      	ldrh	r0, [r4, #28]
    c45c:	f7ff fd48 	bl	bef0 <friend_cred_refresh>
			sub->kr_phase = BT_MESH_KR_NORMAL;
    c460:	2300      	movs	r3, #0
    c462:	e7e0      	b.n	c426 <bt_mesh_kr_update+0x5e>
			if (!new_key) {
    c464:	2a00      	cmp	r2, #0
    c466:	d1e5      	bne.n	c434 <bt_mesh_kr_update+0x6c>
}
    c468:	4610      	mov	r0, r2
    c46a:	bd38      	pop	{r3, r4, r5, pc}
    c46c:	00025880 	.word	0x00025880
    c470:	00025948 	.word	0x00025948
    c474:	00027ec6 	.word	0x00027ec6
    c478:	00027ef9 	.word	0x00027ef9
    c47c:	00027dc5 	.word	0x00027dc5
    c480:	00027f10 	.word	0x00027f10

0000c484 <bt_mesh_rpl_reset>:
{
    c484:	b570      	push	{r4, r5, r6, lr}
    c486:	4c0c      	ldr	r4, [pc, #48]	; (c4b8 <bt_mesh_rpl_reset+0x34>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    c488:	2500      	movs	r5, #0
				rpl->old_iv = true;
    c48a:	2601      	movs	r6, #1
		if (rpl->src) {
    c48c:	f8b4 335c 	ldrh.w	r3, [r4, #860]	; 0x35c
    c490:	b143      	cbz	r3, c4a4 <bt_mesh_rpl_reset+0x20>
			if (rpl->old_iv) {
    c492:	f894 335e 	ldrb.w	r3, [r4, #862]	; 0x35e
    c496:	b15b      	cbz	r3, c4b0 <bt_mesh_rpl_reset+0x2c>
				(void)memset(rpl, 0, sizeof(*rpl));
    c498:	2208      	movs	r2, #8
    c49a:	2100      	movs	r1, #0
    c49c:	f504 7057 	add.w	r0, r4, #860	; 0x35c
    c4a0:	f015 fd1b 	bl	21eda <memset>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    c4a4:	3501      	adds	r5, #1
    c4a6:	2d0a      	cmp	r5, #10
    c4a8:	f104 0408 	add.w	r4, r4, #8
    c4ac:	d1ee      	bne.n	c48c <bt_mesh_rpl_reset+0x8>
}
    c4ae:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    c4b0:	f884 635e 	strb.w	r6, [r4, #862]	; 0x35e
    c4b4:	e7f6      	b.n	c4a4 <bt_mesh_rpl_reset+0x20>
    c4b6:	bf00      	nop
    c4b8:	20007060 	.word	0x20007060

0000c4bc <bt_mesh_net_iv_update>:
{
    c4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4c0:	4607      	mov	r7, r0
    c4c2:	460d      	mov	r5, r1
    c4c4:	4c6f      	ldr	r4, [pc, #444]	; (c684 <bt_mesh_net_iv_update+0x1c8>)
    c4c6:	4e70      	ldr	r6, [pc, #448]	; (c688 <bt_mesh_net_iv_update+0x1cc>)
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c4c8:	f7ff fb44 	bl	bb54 <atomic_test_bit.constprop.8>
    c4cc:	4b6f      	ldr	r3, [pc, #444]	; (c68c <bt_mesh_net_iv_update+0x1d0>)
		if (iv_index != bt_mesh.iv_index) {
    c4ce:	6832      	ldr	r2, [r6, #0]
    c4d0:	1ae4      	subs	r4, r4, r3
    c4d2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c4d6:	4680      	mov	r8, r0
    c4d8:	b1f8      	cbz	r0, c51a <bt_mesh_net_iv_update+0x5e>
		if (iv_index != bt_mesh.iv_index) {
    c4da:	42ba      	cmp	r2, r7
    c4dc:	d00b      	beq.n	c4f6 <bt_mesh_net_iv_update+0x3a>
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    c4de:	2102      	movs	r1, #2
    c4e0:	f04f 0300 	mov.w	r3, #0
    c4e4:	f361 0307 	bfi	r3, r1, #0, #8
    c4e8:	4869      	ldr	r0, [pc, #420]	; (c690 <bt_mesh_net_iv_update+0x1d4>)
    c4ea:	f364 138f 	bfi	r3, r4, #6, #10
    c4ee:	4639      	mov	r1, r7
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    c4f0:	f014 fba9 	bl	20c46 <log_2>
			return false;
    c4f4:	e00d      	b.n	c512 <bt_mesh_net_iv_update+0x56>
		if (iv_update) {
    c4f6:	2900      	cmp	r1, #0
    c4f8:	f000 808a 	beq.w	c610 <bt_mesh_net_iv_update+0x154>
			BT_DBG("Already in IV Update in Progress state");
    c4fc:	f04f 0200 	mov.w	r2, #0
    c500:	2304      	movs	r3, #4
    c502:	f363 0207 	bfi	r2, r3, #0, #8
    c506:	4963      	ldr	r1, [pc, #396]	; (c694 <bt_mesh_net_iv_update+0x1d8>)
    c508:	4863      	ldr	r0, [pc, #396]	; (c698 <bt_mesh_net_iv_update+0x1dc>)
    c50a:	f364 128f 	bfi	r2, r4, #6, #10
    c50e:	f014 fb86 	bl	20c1e <log_1>
			return false;
    c512:	2500      	movs	r5, #0
}
    c514:	4628      	mov	r0, r5
    c516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (iv_index == bt_mesh.iv_index) {
    c51a:	42ba      	cmp	r2, r7
    c51c:	d109      	bne.n	c532 <bt_mesh_net_iv_update+0x76>
			BT_DBG("Same IV Index in normal mode");
    c51e:	f04f 0200 	mov.w	r2, #0
    c522:	2304      	movs	r3, #4
    c524:	f363 0207 	bfi	r2, r3, #0, #8
    c528:	f364 128f 	bfi	r2, r4, #6, #10
    c52c:	4959      	ldr	r1, [pc, #356]	; (c694 <bt_mesh_net_iv_update+0x1d8>)
    c52e:	485b      	ldr	r0, [pc, #364]	; (c69c <bt_mesh_net_iv_update+0x1e0>)
    c530:	e7ed      	b.n	c50e <bt_mesh_net_iv_update+0x52>
		if (iv_index < bt_mesh.iv_index ||
    c532:	d803      	bhi.n	c53c <bt_mesh_net_iv_update+0x80>
		    iv_index > bt_mesh.iv_index + 42) {
    c534:	f102 032a 	add.w	r3, r2, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    c538:	42bb      	cmp	r3, r7
    c53a:	d209      	bcs.n	c550 <bt_mesh_net_iv_update+0x94>
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    c53c:	2101      	movs	r1, #1
    c53e:	f04f 0300 	mov.w	r3, #0
    c542:	f361 0307 	bfi	r3, r1, #0, #8
    c546:	f364 138f 	bfi	r3, r4, #6, #10
    c54a:	4639      	mov	r1, r7
    c54c:	4854      	ldr	r0, [pc, #336]	; (c6a0 <bt_mesh_net_iv_update+0x1e4>)
    c54e:	e7cf      	b.n	c4f0 <bt_mesh_net_iv_update+0x34>
		if (iv_index > bt_mesh.iv_index + 1) {
    c550:	3201      	adds	r2, #1
    c552:	42ba      	cmp	r2, r7
    c554:	d242      	bcs.n	c5dc <bt_mesh_net_iv_update+0x120>
			BT_WARN("Performing IV Index Recovery");
    c556:	2302      	movs	r3, #2
    c558:	f04f 0100 	mov.w	r1, #0
    c55c:	f363 0107 	bfi	r1, r3, #0, #8
    c560:	f364 118f 	bfi	r1, r4, #6, #10
    c564:	484f      	ldr	r0, [pc, #316]	; (c6a4 <bt_mesh_net_iv_update+0x1e8>)
    c566:	f014 fb4d 	bl	20c04 <log_0>
			(void)memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
    c56a:	2250      	movs	r2, #80	; 0x50
    c56c:	4641      	mov	r1, r8
    c56e:	f506 7057 	add.w	r0, r6, #860	; 0x35c
    c572:	f015 fcb2 	bl	21eda <memset>
			bt_mesh.seq = 0U;
    c576:	e9c6 7800 	strd	r7, r8, [r6]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    c57a:	4628      	mov	r0, r5
    c57c:	f7ff faf6 	bl	bb6c <atomic_set_bit_to.constprop.6>
	bt_mesh.ivu_duration = 0U;
    c580:	2300      	movs	r3, #0
    c582:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	if (iv_update) {
    c586:	2d00      	cmp	r5, #0
    c588:	d06f      	beq.n	c66a <bt_mesh_net_iv_update+0x1ae>
		BT_DBG("IV Update state entered. New index 0x%08x",
    c58a:	2204      	movs	r2, #4
    c58c:	f362 0307 	bfi	r3, r2, #0, #8
    c590:	f364 138f 	bfi	r3, r4, #6, #10
    c594:	463a      	mov	r2, r7
    c596:	493f      	ldr	r1, [pc, #252]	; (c694 <bt_mesh_net_iv_update+0x1d8>)
    c598:	4843      	ldr	r0, [pc, #268]	; (c6a8 <bt_mesh_net_iv_update+0x1ec>)
		bt_mesh.iv_index = iv_index;
    c59a:	6037      	str	r7, [r6, #0]
		BT_DBG("IV Update state entered. New index 0x%08x",
    c59c:	f014 fb53 	bl	20c46 <log_2>
		bt_mesh_rpl_reset();
    c5a0:	f7ff ff70 	bl	c484 <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c5a4:	4a41      	ldr	r2, [pc, #260]	; (c6ac <bt_mesh_net_iv_update+0x1f0>)
    c5a6:	4942      	ldr	r1, [pc, #264]	; (c6b0 <bt_mesh_net_iv_update+0x1f4>)
    c5a8:	4842      	ldr	r0, [pc, #264]	; (c6b4 <bt_mesh_net_iv_update+0x1f8>)
    c5aa:	f012 fc01 	bl	1edb0 <k_delayed_work_submit_to_queue>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    c5ae:	f8b6 21b0 	ldrh.w	r2, [r6, #432]	; 0x1b0
    c5b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c5b6:	429a      	cmp	r2, r3
    c5b8:	d002      	beq.n	c5c0 <bt_mesh_net_iv_update+0x104>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    c5ba:	483f      	ldr	r0, [pc, #252]	; (c6b8 <bt_mesh_net_iv_update+0x1fc>)
    c5bc:	f7ff fdf0 	bl	c1a0 <bt_mesh_net_beacon_update>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    c5c0:	f8b6 2294 	ldrh.w	r2, [r6, #660]	; 0x294
    c5c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c5c8:	429a      	cmp	r2, r3
    c5ca:	d002      	beq.n	c5d2 <bt_mesh_net_iv_update+0x116>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    c5cc:	483b      	ldr	r0, [pc, #236]	; (c6bc <bt_mesh_net_iv_update+0x200>)
    c5ce:	f7ff fde7 	bl	c1a0 <bt_mesh_net_beacon_update>
		bt_mesh_store_iv(false);
    c5d2:	2000      	movs	r0, #0
    c5d4:	f017 fccf 	bl	23f76 <bt_mesh_store_iv>
	return true;
    c5d8:	2501      	movs	r5, #1
    c5da:	e79b      	b.n	c514 <bt_mesh_net_iv_update+0x58>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    c5dc:	d10b      	bne.n	c5f6 <bt_mesh_net_iv_update+0x13a>
    c5de:	b9b9      	cbnz	r1, c610 <bt_mesh_net_iv_update+0x154>
			BT_WARN("Ignoring new index in normal mode");
    c5e0:	2302      	movs	r3, #2
    c5e2:	f04f 0100 	mov.w	r1, #0
    c5e6:	f363 0107 	bfi	r1, r3, #0, #8
    c5ea:	f364 118f 	bfi	r1, r4, #6, #10
    c5ee:	4834      	ldr	r0, [pc, #208]	; (c6c0 <bt_mesh_net_iv_update+0x204>)
    c5f0:	f014 fb08 	bl	20c04 <log_0>
			return false;
    c5f4:	e78e      	b.n	c514 <bt_mesh_net_iv_update+0x58>
		if (!iv_update) {
    c5f6:	b959      	cbnz	r1, c610 <bt_mesh_net_iv_update+0x154>
			BT_DBG("Already in Normal state");
    c5f8:	2304      	movs	r3, #4
    c5fa:	f04f 0200 	mov.w	r2, #0
    c5fe:	f363 0207 	bfi	r2, r3, #0, #8
    c602:	f364 128f 	bfi	r2, r4, #6, #10
    c606:	4923      	ldr	r1, [pc, #140]	; (c694 <bt_mesh_net_iv_update+0x1d8>)
    c608:	482e      	ldr	r0, [pc, #184]	; (c6c4 <bt_mesh_net_iv_update+0x208>)
    c60a:	f014 fb08 	bl	20c1e <log_1>
			return false;
    c60e:	e781      	b.n	c514 <bt_mesh_net_iv_update+0x58>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c610:	f896 3110 	ldrb.w	r3, [r6, #272]	; 0x110
    c614:	2b5f      	cmp	r3, #95	; 0x5f
    c616:	d80a      	bhi.n	c62e <bt_mesh_net_iv_update+0x172>
			BT_WARN("IV Update before minimum duration");
    c618:	2302      	movs	r3, #2
    c61a:	f04f 0100 	mov.w	r1, #0
    c61e:	f363 0107 	bfi	r1, r3, #0, #8
    c622:	f364 118f 	bfi	r1, r4, #6, #10
    c626:	4828      	ldr	r0, [pc, #160]	; (c6c8 <bt_mesh_net_iv_update+0x20c>)
    c628:	f014 faec 	bl	20c04 <log_0>
			return false;
    c62c:	e771      	b.n	c512 <bt_mesh_net_iv_update+0x56>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    c62e:	2d00      	cmp	r5, #0
    c630:	d1a3      	bne.n	c57a <bt_mesh_net_iv_update+0xbe>
    c632:	f001 fe05 	bl	e240 <bt_mesh_tx_in_progress>
    c636:	2800      	cmp	r0, #0
    c638:	d09f      	beq.n	c57a <bt_mesh_net_iv_update+0xbe>
		BT_WARN("IV Update deferred because of pending transfer");
    c63a:	2302      	movs	r3, #2
    c63c:	f04f 0100 	mov.w	r1, #0
    c640:	f363 0107 	bfi	r1, r3, #0, #8
    c644:	f364 118f 	bfi	r1, r4, #6, #10
    c648:	4820      	ldr	r0, [pc, #128]	; (c6cc <bt_mesh_net_iv_update+0x210>)
    c64a:	f014 fadb 	bl	20c04 <log_0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c64e:	f3bf 8f5b 	dmb	ish
    c652:	4b1f      	ldr	r3, [pc, #124]	; (c6d0 <bt_mesh_net_iv_update+0x214>)
    c654:	e853 2f00 	ldrex	r2, [r3]
    c658:	f042 0220 	orr.w	r2, r2, #32
    c65c:	e843 2100 	strex	r1, r2, [r3]
    c660:	2900      	cmp	r1, #0
    c662:	d1f7      	bne.n	c654 <bt_mesh_net_iv_update+0x198>
    c664:	f3bf 8f5b 	dmb	ish
    c668:	e754      	b.n	c514 <bt_mesh_net_iv_update+0x58>
		BT_DBG("Normal mode entered");
    c66a:	2304      	movs	r3, #4
    c66c:	f04f 0200 	mov.w	r2, #0
    c670:	f363 0207 	bfi	r2, r3, #0, #8
    c674:	f364 128f 	bfi	r2, r4, #6, #10
    c678:	4906      	ldr	r1, [pc, #24]	; (c694 <bt_mesh_net_iv_update+0x1d8>)
    c67a:	4816      	ldr	r0, [pc, #88]	; (c6d4 <bt_mesh_net_iv_update+0x218>)
    c67c:	f014 facf 	bl	20c1e <log_1>
		bt_mesh.seq = 0U;
    c680:	6075      	str	r5, [r6, #4]
    c682:	e78f      	b.n	c5a4 <bt_mesh_net_iv_update+0xe8>
    c684:	00025948 	.word	0x00025948
    c688:	20007060 	.word	0x20007060
    c68c:	00025880 	.word	0x00025880
    c690:	0002816c 	.word	0x0002816c
    c694:	00027dd7 	.word	0x00027dd7
    c698:	00028190 	.word	0x00028190
    c69c:	000281bb 	.word	0x000281bb
    c6a0:	000281dc 	.word	0x000281dc
    c6a4:	00028203 	.word	0x00028203
    c6a8:	000282af 	.word	0x000282af
    c6ac:	05265c00 	.word	0x05265c00
    c6b0:	20007174 	.word	0x20007174
    c6b4:	20001d2c 	.word	0x20001d2c
    c6b8:	200071f4 	.word	0x200071f4
    c6bc:	200072d8 	.word	0x200072d8
    c6c0:	00028220 	.word	0x00028220
    c6c4:	00028242 	.word	0x00028242
    c6c8:	0002825e 	.word	0x0002825e
    c6cc:	00028280 	.word	0x00028280
    c6d0:	20007068 	.word	0x20007068
    c6d4:	000282dd 	.word	0x000282dd

0000c6d8 <ivu_refresh>:
		bt_mesh_net_relay(&buf, &rx);
	}
}

static void ivu_refresh(struct k_work *work)
{
    c6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_mesh.ivu_duration += BT_MESH_IVU_HOURS;
    c6da:	4c24      	ldr	r4, [pc, #144]	; (c76c <ivu_refresh+0x94>)
    c6dc:	4a24      	ldr	r2, [pc, #144]	; (c770 <ivu_refresh+0x98>)
    c6de:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    c6e2:	3318      	adds	r3, #24
    c6e4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110

	BT_DBG("%s for %u hour%s",
    c6e8:	f04f 0100 	mov.w	r1, #0
    c6ec:	2304      	movs	r3, #4
    c6ee:	f363 0107 	bfi	r1, r3, #0, #8
    c6f2:	4b20      	ldr	r3, [pc, #128]	; (c774 <ivu_refresh+0x9c>)
    c6f4:	1ad2      	subs	r2, r2, r3
    c6f6:	08d2      	lsrs	r2, r2, #3
    c6f8:	4b1f      	ldr	r3, [pc, #124]	; (c778 <ivu_refresh+0xa0>)
    c6fa:	9300      	str	r3, [sp, #0]
    c6fc:	f362 118f 	bfi	r1, r2, #6, #10
    c700:	f7ff fa28 	bl	bb54 <atomic_test_bit.constprop.8>
    c704:	4b1d      	ldr	r3, [pc, #116]	; (c77c <ivu_refresh+0xa4>)
    c706:	4a1e      	ldr	r2, [pc, #120]	; (c780 <ivu_refresh+0xa8>)
    c708:	2800      	cmp	r0, #0
    c70a:	bf14      	ite	ne
    c70c:	4618      	movne	r0, r3
    c70e:	4610      	moveq	r0, r2
    c710:	9001      	str	r0, [sp, #4]
    c712:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    c716:	481b      	ldr	r0, [pc, #108]	; (c784 <ivu_refresh+0xac>)
    c718:	4b1b      	ldr	r3, [pc, #108]	; (c788 <ivu_refresh+0xb0>)
    c71a:	9202      	str	r2, [sp, #8]
    c71c:	2a01      	cmp	r2, #1
    c71e:	bf08      	it	eq
    c720:	4603      	moveq	r3, r0
    c722:	9303      	str	r3, [sp, #12]
    c724:	2204      	movs	r2, #4
    c726:	460b      	mov	r3, r1
    c728:	4818      	ldr	r0, [pc, #96]	; (c78c <ivu_refresh+0xb4>)
    c72a:	4669      	mov	r1, sp
    c72c:	f014 fabe 	bl	20cac <log_n>
	       atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) ?
	       "IVU in Progress" : "IVU Normal mode",
	       bt_mesh.ivu_duration, bt_mesh.ivu_duration == 1 ? "" : "s");

	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c730:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    c734:	2b5f      	cmp	r3, #95	; 0x5f
    c736:	d80a      	bhi.n	c74e <ivu_refresh+0x76>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			bt_mesh_store_iv(true);
    c738:	2001      	movs	r0, #1
    c73a:	f017 fc1c 	bl	23f76 <bt_mesh_store_iv>
    c73e:	4a14      	ldr	r2, [pc, #80]	; (c790 <ivu_refresh+0xb8>)
    c740:	4814      	ldr	r0, [pc, #80]	; (c794 <ivu_refresh+0xbc>)
    c742:	f504 718a 	add.w	r1, r4, #276	; 0x114
    c746:	f012 fb33 	bl	1edb0 <k_delayed_work_submit_to_queue>
		bt_mesh_beacon_ivu_initiator(true);
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_store_iv(true);
	}
}
    c74a:	b004      	add	sp, #16
    c74c:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c74e:	f7ff fa01 	bl	bb54 <atomic_test_bit.constprop.8>
    c752:	b138      	cbz	r0, c764 <ivu_refresh+0x8c>
		bt_mesh_beacon_ivu_initiator(true);
    c754:	2001      	movs	r0, #1
    c756:	f7fe ff7b 	bl	b650 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    c75a:	2100      	movs	r1, #0
    c75c:	6820      	ldr	r0, [r4, #0]
    c75e:	f7ff fead 	bl	c4bc <bt_mesh_net_iv_update>
    c762:	e7f2      	b.n	c74a <ivu_refresh+0x72>
		bt_mesh_store_iv(true);
    c764:	2001      	movs	r0, #1
    c766:	f017 fc06 	bl	23f76 <bt_mesh_store_iv>
    c76a:	e7ee      	b.n	c74a <ivu_refresh+0x72>
    c76c:	20007060 	.word	0x20007060
    c770:	00025948 	.word	0x00025948
    c774:	00025880 	.word	0x00025880
    c778:	00027e9c 	.word	0x00027e9c
    c77c:	00028645 	.word	0x00028645
    c780:	00028655 	.word	0x00028655
    c784:	000290a7 	.word	0x000290a7
    c788:	00027ada 	.word	0x00027ada
    c78c:	00028665 	.word	0x00028665
    c790:	05265c00 	.word	0x05265c00
    c794:	20001d2c 	.word	0x20001d2c

0000c798 <bt_mesh_next_seq>:
{
    c798:	b510      	push	{r4, lr}
	u32_t seq = bt_mesh.seq++;
    c79a:	4b04      	ldr	r3, [pc, #16]	; (c7ac <bt_mesh_next_seq+0x14>)
    c79c:	685c      	ldr	r4, [r3, #4]
    c79e:	1c62      	adds	r2, r4, #1
    c7a0:	605a      	str	r2, [r3, #4]
		bt_mesh_store_seq();
    c7a2:	f007 ff37 	bl	14614 <bt_mesh_store_seq>
}
    c7a6:	4620      	mov	r0, r4
    c7a8:	bd10      	pop	{r4, pc}
    c7aa:	bf00      	nop
    c7ac:	20007060 	.word	0x20007060

0000c7b0 <bt_mesh_net_resend>:
{
    c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7b4:	4614      	mov	r4, r2
    c7b6:	469a      	mov	sl, r3
	BT_DBG("net_idx 0x%04x new_key %u len %u", sub->net_idx, new_key,
    c7b8:	2204      	movs	r2, #4
    c7ba:	f04f 0300 	mov.w	r3, #0
    c7be:	f362 0307 	bfi	r3, r2, #0, #8
    c7c2:	4d51      	ldr	r5, [pc, #324]	; (c908 <bt_mesh_net_resend+0x158>)
    c7c4:	4a51      	ldr	r2, [pc, #324]	; (c90c <bt_mesh_net_resend+0x15c>)
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c7c6:	f8df 8164 	ldr.w	r8, [pc, #356]	; c92c <bt_mesh_net_resend+0x17c>
{
    c7ca:	b085      	sub	sp, #20
	BT_DBG("net_idx 0x%04x new_key %u len %u", sub->net_idx, new_key,
    c7cc:	1aad      	subs	r5, r5, r2
    c7ce:	4a50      	ldr	r2, [pc, #320]	; (c910 <bt_mesh_net_resend+0x160>)
    c7d0:	9200      	str	r2, [sp, #0]
    c7d2:	8b82      	ldrh	r2, [r0, #28]
{
    c7d4:	460f      	mov	r7, r1
	BT_DBG("net_idx 0x%04x new_key %u len %u", sub->net_idx, new_key,
    c7d6:	e9cd 2401 	strd	r2, r4, [sp, #4]
    c7da:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    c7de:	898a      	ldrh	r2, [r1, #12]
    c7e0:	9203      	str	r2, [sp, #12]
    c7e2:	f365 138f 	bfi	r3, r5, #6, #10
    c7e6:	2204      	movs	r2, #4
{
    c7e8:	4683      	mov	fp, r0
	BT_DBG("net_idx 0x%04x new_key %u len %u", sub->net_idx, new_key,
    c7ea:	4669      	mov	r1, sp
    c7ec:	4849      	ldr	r0, [pc, #292]	; (c914 <bt_mesh_net_resend+0x164>)
    c7ee:	2659      	movs	r6, #89	; 0x59
    c7f0:	f014 fa5c 	bl	20cac <log_n>
	enc = sub->keys[new_key].enc;
    c7f4:	4366      	muls	r6, r4
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c7f6:	f8d8 1000 	ldr.w	r1, [r8]
    c7fa:	68bc      	ldr	r4, [r7, #8]
    c7fc:	f7ff f9aa 	bl	bb54 <atomic_test_bit.constprop.8>
	priv = sub->keys[new_key].privacy;
    c800:	f106 0969 	add.w	r9, r6, #105	; 0x69
    c804:	44d9      	add	r9, fp
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c806:	1a09      	subs	r1, r1, r0
    c808:	464a      	mov	r2, r9
    c80a:	4620      	mov	r0, r4
    c80c:	f016 ff47 	bl	2369e <bt_mesh_net_obfuscate>
	if (err) {
    c810:	4604      	mov	r4, r0
    c812:	b170      	cbz	r0, c832 <bt_mesh_net_resend+0x82>
		BT_ERR("deobfuscate failed (err %d)", err);
    c814:	f04f 0200 	mov.w	r2, #0
    c818:	2301      	movs	r3, #1
    c81a:	f363 0207 	bfi	r2, r3, #0, #8
    c81e:	4601      	mov	r1, r0
    c820:	483d      	ldr	r0, [pc, #244]	; (c918 <bt_mesh_net_resend+0x168>)
    c822:	f365 128f 	bfi	r2, r5, #6, #10
		BT_ERR("decrypt failed (err %d)", err);
    c826:	f014 f9fa 	bl	20c1e <log_1>
}
    c82a:	4620      	mov	r0, r4
    c82c:	b005      	add	sp, #20
    c82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    c832:	f8d8 2000 	ldr.w	r2, [r8]
    c836:	f7ff f98d 	bl	bb54 <atomic_test_bit.constprop.8>
	enc = sub->keys[new_key].enc;
    c83a:	3641      	adds	r6, #65	; 0x41
    c83c:	445e      	add	r6, fp
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    c83e:	f107 0b08 	add.w	fp, r7, #8
    c842:	4623      	mov	r3, r4
    c844:	1a12      	subs	r2, r2, r0
    c846:	4659      	mov	r1, fp
    c848:	4630      	mov	r0, r6
    c84a:	f016 ffa4 	bl	23796 <bt_mesh_net_decrypt>
	if (err) {
    c84e:	4604      	mov	r4, r0
    c850:	b148      	cbz	r0, c866 <bt_mesh_net_resend+0xb6>
		BT_ERR("decrypt failed (err %d)", err);
    c852:	f04f 0200 	mov.w	r2, #0
    c856:	2301      	movs	r3, #1
    c858:	f363 0207 	bfi	r2, r3, #0, #8
    c85c:	4601      	mov	r1, r0
    c85e:	f365 128f 	bfi	r2, r5, #6, #10
    c862:	482e      	ldr	r0, [pc, #184]	; (c91c <bt_mesh_net_resend+0x16c>)
    c864:	e7df      	b.n	c826 <bt_mesh_net_resend+0x76>
	seq = bt_mesh_next_seq();
    c866:	f7ff ff97 	bl	c798 <bt_mesh_next_seq>
	buf->data[2] = seq >> 16;
    c86a:	68bb      	ldr	r3, [r7, #8]
    c86c:	0c02      	lsrs	r2, r0, #16
    c86e:	709a      	strb	r2, [r3, #2]
	buf->data[3] = seq >> 8;
    c870:	68bb      	ldr	r3, [r7, #8]
    c872:	0a02      	lsrs	r2, r0, #8
    c874:	70da      	strb	r2, [r3, #3]
	buf->data[4] = seq;
    c876:	68bb      	ldr	r3, [r7, #8]
	err = bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    c878:	f8d8 2000 	ldr.w	r2, [r8]
	buf->data[4] = seq;
    c87c:	7118      	strb	r0, [r3, #4]
	err = bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    c87e:	f7ff f969 	bl	bb54 <atomic_test_bit.constprop.8>
    c882:	4623      	mov	r3, r4
    c884:	1a12      	subs	r2, r2, r0
    c886:	4659      	mov	r1, fp
    c888:	4630      	mov	r0, r6
    c88a:	f016 ff31 	bl	236f0 <bt_mesh_net_encrypt>
	if (err) {
    c88e:	4604      	mov	r4, r0
    c890:	b148      	cbz	r0, c8a6 <bt_mesh_net_resend+0xf6>
		BT_ERR("encrypt failed (err %d)", err);
    c892:	f04f 0200 	mov.w	r2, #0
    c896:	2301      	movs	r3, #1
    c898:	f363 0207 	bfi	r2, r3, #0, #8
    c89c:	4601      	mov	r1, r0
    c89e:	f365 128f 	bfi	r2, r5, #6, #10
    c8a2:	481f      	ldr	r0, [pc, #124]	; (c920 <bt_mesh_net_resend+0x170>)
    c8a4:	e7bf      	b.n	c826 <bt_mesh_net_resend+0x76>
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    c8a6:	68bc      	ldr	r4, [r7, #8]
    c8a8:	f8d8 1000 	ldr.w	r1, [r8]
    c8ac:	f7ff f952 	bl	bb54 <atomic_test_bit.constprop.8>
    c8b0:	464a      	mov	r2, r9
    c8b2:	1a09      	subs	r1, r1, r0
    c8b4:	4620      	mov	r0, r4
    c8b6:	f016 fef2 	bl	2369e <bt_mesh_net_obfuscate>
	if (err) {
    c8ba:	4604      	mov	r4, r0
    c8bc:	b148      	cbz	r0, c8d2 <bt_mesh_net_resend+0x122>
		BT_ERR("obfuscate failed (err %d)", err);
    c8be:	f04f 0200 	mov.w	r2, #0
    c8c2:	2301      	movs	r3, #1
    c8c4:	f363 0207 	bfi	r2, r3, #0, #8
    c8c8:	4601      	mov	r1, r0
    c8ca:	f365 128f 	bfi	r2, r5, #6, #10
    c8ce:	4815      	ldr	r0, [pc, #84]	; (c924 <bt_mesh_net_resend+0x174>)
    c8d0:	e7a9      	b.n	c826 <bt_mesh_net_resend+0x76>
	bt_mesh_adv_send(buf, cb, cb_data);
    c8d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c8d4:	4651      	mov	r1, sl
    c8d6:	4638      	mov	r0, r7
    c8d8:	f7fe fcee 	bl	b2b8 <bt_mesh_adv_send>
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    c8dc:	f7ff f93a 	bl	bb54 <atomic_test_bit.constprop.8>
    c8e0:	2800      	cmp	r0, #0
    c8e2:	d1a2      	bne.n	c82a <bt_mesh_net_resend+0x7a>
    c8e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c8e8:	4b0f      	ldr	r3, [pc, #60]	; (c928 <bt_mesh_net_resend+0x178>)
    c8ea:	429a      	cmp	r2, r3
    c8ec:	d99d      	bls.n	c82a <bt_mesh_net_resend+0x7a>
		bt_mesh_beacon_ivu_initiator(true);
    c8ee:	2001      	movs	r0, #1
    c8f0:	f7fe feae 	bl	b650 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    c8f4:	f8d8 0000 	ldr.w	r0, [r8]
    c8f8:	2101      	movs	r1, #1
    c8fa:	4408      	add	r0, r1
    c8fc:	f7ff fdde 	bl	c4bc <bt_mesh_net_iv_update>
		bt_mesh_net_sec_update(NULL);
    c900:	4620      	mov	r0, r4
    c902:	f016 fb95 	bl	23030 <bt_mesh_net_sec_update>
    c906:	e790      	b.n	c82a <bt_mesh_net_resend+0x7a>
    c908:	00025948 	.word	0x00025948
    c90c:	00025880 	.word	0x00025880
    c910:	00027ded 	.word	0x00027ded
    c914:	00028483 	.word	0x00028483
    c918:	000284a8 	.word	0x000284a8
    c91c:	000284c4 	.word	0x000284c4
    c920:	000284dc 	.word	0x000284dc
    c924:	000284aa 	.word	0x000284aa
    c928:	007a1200 	.word	0x007a1200
    c92c:	20007060 	.word	0x20007060

0000c930 <bt_mesh_net_encode>:
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    c930:	6843      	ldr	r3, [r0, #4]
{
    c932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    c936:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    c93a:	4e4c      	ldr	r6, [pc, #304]	; (ca6c <bt_mesh_net_encode+0x13c>)
    c93c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c940:	4598      	cmp	r8, r3
    c942:	4b4b      	ldr	r3, [pc, #300]	; (ca70 <bt_mesh_net_encode+0x140>)
    c944:	eba6 0603 	sub.w	r6, r6, r3
{
    c948:	b087      	sub	sp, #28
    c94a:	4605      	mov	r5, r0
    c94c:	460c      	mov	r4, r1
    c94e:	4691      	mov	r9, r2
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    c950:	bf0c      	ite	eq
    c952:	2701      	moveq	r7, #1
    c954:	2700      	movne	r7, #0
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    c956:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    c95a:	d113      	bne.n	c984 <bt_mesh_net_encode+0x54>
    c95c:	4608      	mov	r0, r1
    c95e:	f018 fa5a 	bl	24e16 <net_buf_simple_tailroom>
    c962:	2807      	cmp	r0, #7
    c964:	d80e      	bhi.n	c984 <bt_mesh_net_encode+0x54>
		BT_ERR("Insufficient MIC space for CTL PDU");
    c966:	f04f 0100 	mov.w	r1, #0
    c96a:	2301      	movs	r3, #1
    c96c:	f363 0107 	bfi	r1, r3, #0, #8
    c970:	4840      	ldr	r0, [pc, #256]	; (ca74 <bt_mesh_net_encode+0x144>)
    c972:	f366 118f 	bfi	r1, r6, #6, #10
		BT_ERR("Insufficient MIC space for PDU");
    c976:	f014 f945 	bl	20c04 <log_0>
		return -EINVAL;
    c97a:	f06f 0015 	mvn.w	r0, #21
}
    c97e:	b007      	add	sp, #28
    c980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    c984:	4620      	mov	r0, r4
    c986:	f018 fa46 	bl	24e16 <net_buf_simple_tailroom>
    c98a:	2803      	cmp	r0, #3
    c98c:	d808      	bhi.n	c9a0 <bt_mesh_net_encode+0x70>
		BT_ERR("Insufficient MIC space for PDU");
    c98e:	f04f 0100 	mov.w	r1, #0
    c992:	2301      	movs	r3, #1
    c994:	f363 0107 	bfi	r1, r3, #0, #8
    c998:	f366 118f 	bfi	r1, r6, #6, #10
    c99c:	4836      	ldr	r0, [pc, #216]	; (ca78 <bt_mesh_net_encode+0x148>)
    c99e:	e7ea      	b.n	c976 <bt_mesh_net_encode+0x46>
	BT_DBG("src 0x%04x dst 0x%04x ctl %u seq 0x%06x",
    c9a0:	2204      	movs	r2, #4
    c9a2:	f04f 0300 	mov.w	r3, #0
    c9a6:	f362 0307 	bfi	r3, r2, #0, #8
    c9aa:	4a34      	ldr	r2, [pc, #208]	; (ca7c <bt_mesh_net_encode+0x14c>)
    c9ac:	9201      	str	r2, [sp, #4]
    c9ae:	892a      	ldrh	r2, [r5, #8]
    c9b0:	9202      	str	r2, [sp, #8]
    c9b2:	686a      	ldr	r2, [r5, #4]
    c9b4:	4832      	ldr	r0, [pc, #200]	; (ca80 <bt_mesh_net_encode+0x150>)
    c9b6:	8892      	ldrh	r2, [r2, #4]
    c9b8:	f366 138f 	bfi	r3, r6, #6, #10
    c9bc:	4e31      	ldr	r6, [pc, #196]	; (ca84 <bt_mesh_net_encode+0x154>)
    c9be:	e9cd 2703 	strd	r2, r7, [sp, #12]
    c9c2:	6872      	ldr	r2, [r6, #4]
    c9c4:	9205      	str	r2, [sp, #20]
    c9c6:	a901      	add	r1, sp, #4
    c9c8:	2205      	movs	r2, #5
    c9ca:	f014 f96f 	bl	20cac <log_n>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    c9ce:	686b      	ldr	r3, [r5, #4]
    c9d0:	4620      	mov	r0, r4
    c9d2:	8899      	ldrh	r1, [r3, #4]
    c9d4:	f018 f9c9 	bl	24d6a <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    c9d8:	8929      	ldrh	r1, [r5, #8]
    c9da:	4620      	mov	r0, r4
    c9dc:	f018 f9c5 	bl	24d6a <net_buf_simple_push_be16>
	seq = net_buf_simple_push(buf, 3);
    c9e0:	2103      	movs	r1, #3
    c9e2:	4620      	mov	r0, r4
    c9e4:	f018 f9b9 	bl	24d5a <net_buf_simple_push>
    c9e8:	4607      	mov	r7, r0
	seq_val = bt_mesh_next_seq();
    c9ea:	f7ff fed5 	bl	c798 <bt_mesh_next_seq>
	seq[0] = seq_val >> 16;
    c9ee:	0c03      	lsrs	r3, r0, #16
    c9f0:	703b      	strb	r3, [r7, #0]
	seq[1] = seq_val >> 8;
    c9f2:	0a03      	lsrs	r3, r0, #8
    c9f4:	707b      	strb	r3, [r7, #1]
	seq[2] = seq_val;
    c9f6:	70b8      	strb	r0, [r7, #2]
	if (ctl) {
    c9f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c9fc:	4598      	cmp	r8, r3
    c9fe:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    ca00:	7a59      	ldrb	r1, [r3, #9]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    ca02:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    ca04:	bf08      	it	eq
    ca06:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    ca0a:	f018 f9c3 	bl	24d94 <net_buf_simple_push_u8>
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    ca0e:	682f      	ldr	r7, [r5, #0]
		tx->friend_cred = 0U;
    ca10:	7aeb      	ldrb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    ca12:	7fba      	ldrb	r2, [r7, #30]
		tx->friend_cred = 0U;
    ca14:	f36f 0300 	bfc	r3, #0, #1
    ca18:	72eb      	strb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    ca1a:	2559      	movs	r5, #89	; 0x59
    ca1c:	4355      	muls	r5, r2
    ca1e:	197b      	adds	r3, r7, r5
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    ca20:	7832      	ldrb	r2, [r6, #0]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    ca22:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    ca26:	f7ff f895 	bl	bb54 <atomic_test_bit.constprop.8>
    ca2a:	1a10      	subs	r0, r2, r0
    ca2c:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    ca30:	b2c9      	uxtb	r1, r1
    ca32:	4620      	mov	r0, r4
    ca34:	f018 f9ae 	bl	24d94 <net_buf_simple_push_u8>
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
    ca38:	6832      	ldr	r2, [r6, #0]
    ca3a:	f7ff f88b 	bl	bb54 <atomic_test_bit.constprop.8>
		enc = tx->sub->keys[tx->sub->kr_flag].enc;
    ca3e:	f105 0841 	add.w	r8, r5, #65	; 0x41
    ca42:	44b8      	add	r8, r7
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
    ca44:	1a12      	subs	r2, r2, r0
    ca46:	464b      	mov	r3, r9
    ca48:	4621      	mov	r1, r4
    ca4a:	4640      	mov	r0, r8
    ca4c:	f016 fe50 	bl	236f0 <bt_mesh_net_encrypt>
	if (err) {
    ca50:	2800      	cmp	r0, #0
    ca52:	d194      	bne.n	c97e <bt_mesh_net_encode+0x4e>
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    ca54:	6824      	ldr	r4, [r4, #0]
    ca56:	6831      	ldr	r1, [r6, #0]
    ca58:	f7ff f87c 	bl	bb54 <atomic_test_bit.constprop.8>
		priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    ca5c:	f105 0269 	add.w	r2, r5, #105	; 0x69
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    ca60:	1a09      	subs	r1, r1, r0
    ca62:	443a      	add	r2, r7
    ca64:	4620      	mov	r0, r4
    ca66:	f016 fe1a 	bl	2369e <bt_mesh_net_obfuscate>
    ca6a:	e788      	b.n	c97e <bt_mesh_net_encode+0x4e>
    ca6c:	00025948 	.word	0x00025948
    ca70:	00025880 	.word	0x00025880
    ca74:	000280fe 	.word	0x000280fe
    ca78:	00028121 	.word	0x00028121
    ca7c:	00027e12 	.word	0x00027e12
    ca80:	00028140 	.word	0x00028140
    ca84:	20007060 	.word	0x20007060

0000ca88 <bt_mesh_net_send>:
{
    ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca8c:	4698      	mov	r8, r3
	BT_DBG("src 0x%04x dst 0x%04x len %u headroom %zu tailroom %zu",
    ca8e:	f04f 0b00 	mov.w	fp, #0
    ca92:	2304      	movs	r3, #4
    ca94:	f363 0b07 	bfi	fp, r3, #0, #8
    ca98:	4f5c      	ldr	r7, [pc, #368]	; (cc0c <bt_mesh_net_send+0x184>)
    ca9a:	4b5d      	ldr	r3, [pc, #372]	; (cc10 <bt_mesh_net_send+0x188>)
    ca9c:	f8df a190 	ldr.w	sl, [pc, #400]	; cc30 <bt_mesh_net_send+0x1a8>
{
    caa0:	b08b      	sub	sp, #44	; 0x2c
	BT_DBG("src 0x%04x dst 0x%04x len %u headroom %zu tailroom %zu",
    caa2:	1aff      	subs	r7, r7, r3
    caa4:	8903      	ldrh	r3, [r0, #8]
    caa6:	9305      	str	r3, [sp, #20]
    caa8:	6843      	ldr	r3, [r0, #4]
    caaa:	f8cd a010 	str.w	sl, [sp, #16]
    caae:	f101 0908 	add.w	r9, r1, #8
    cab2:	889b      	ldrh	r3, [r3, #4]
    cab4:	9306      	str	r3, [sp, #24]
{
    cab6:	4604      	mov	r4, r0
	BT_DBG("src 0x%04x dst 0x%04x len %u headroom %zu tailroom %zu",
    cab8:	898b      	ldrh	r3, [r1, #12]
    caba:	9307      	str	r3, [sp, #28]
    cabc:	4648      	mov	r0, r9
{
    cabe:	460e      	mov	r6, r1
    cac0:	4615      	mov	r5, r2
	BT_DBG("src 0x%04x dst 0x%04x len %u headroom %zu tailroom %zu",
    cac2:	f018 f9a4 	bl	24e0e <net_buf_simple_headroom>
    cac6:	9008      	str	r0, [sp, #32]
    cac8:	4648      	mov	r0, r9
    caca:	f018 f9a4 	bl	24e16 <net_buf_simple_tailroom>
    cace:	f3c7 07c9 	ubfx	r7, r7, #3, #10
    cad2:	f367 1b8f 	bfi	fp, r7, #6, #10
    cad6:	465b      	mov	r3, fp
    cad8:	9009      	str	r0, [sp, #36]	; 0x24
    cada:	2206      	movs	r2, #6
    cadc:	a904      	add	r1, sp, #16
    cade:	484d      	ldr	r0, [pc, #308]	; (cc14 <bt_mesh_net_send+0x18c>)
    cae0:	f014 f8e4 	bl	20cac <log_n>
	BT_DBG("Payload len %u: %s", buf->len, bt_hex(buf->data, buf->len));
    cae4:	89b2      	ldrh	r2, [r6, #12]
    cae6:	68b0      	ldr	r0, [r6, #8]
    cae8:	9203      	str	r2, [sp, #12]
    caea:	2304      	movs	r3, #4
    caec:	4611      	mov	r1, r2
    caee:	f04f 0b00 	mov.w	fp, #0
    caf2:	f363 0b07 	bfi	fp, r3, #0, #8
    caf6:	f7f9 f909 	bl	5d0c <bt_hex_real>
    cafa:	f7f6 ff7f 	bl	39fc <log_strdup>
    cafe:	f367 1b8f 	bfi	fp, r7, #6, #10
    cb02:	4603      	mov	r3, r0
    cb04:	9a03      	ldr	r2, [sp, #12]
    cb06:	4844      	ldr	r0, [pc, #272]	; (cc18 <bt_mesh_net_send+0x190>)
    cb08:	f8ad b000 	strh.w	fp, [sp]
    cb0c:	4651      	mov	r1, sl
    cb0e:	f014 f8b2 	bl	20c76 <log_3>
	BT_DBG("Seq 0x%06x", bt_mesh.seq);
    cb12:	2204      	movs	r2, #4
    cb14:	f04f 0300 	mov.w	r3, #0
    cb18:	f362 0307 	bfi	r3, r2, #0, #8
    cb1c:	4a3f      	ldr	r2, [pc, #252]	; (cc1c <bt_mesh_net_send+0x194>)
    cb1e:	4840      	ldr	r0, [pc, #256]	; (cc20 <bt_mesh_net_send+0x198>)
    cb20:	6852      	ldr	r2, [r2, #4]
    cb22:	f367 138f 	bfi	r3, r7, #6, #10
    cb26:	4651      	mov	r1, sl
    cb28:	f014 f88d 	bl	20c46 <log_2>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    cb2c:	6867      	ldr	r7, [r4, #4]
    cb2e:	7a7b      	ldrb	r3, [r7, #9]
    cb30:	2bff      	cmp	r3, #255	; 0xff
    cb32:	d102      	bne.n	cb3a <bt_mesh_net_send+0xb2>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    cb34:	f005 fadc 	bl	120f0 <bt_mesh_default_ttl_get>
    cb38:	7278      	strb	r0, [r7, #9]
	err = bt_mesh_net_encode(tx, &buf->b, false);
    cb3a:	2200      	movs	r2, #0
    cb3c:	4649      	mov	r1, r9
    cb3e:	4620      	mov	r0, r4
    cb40:	f7ff fef6 	bl	c930 <bt_mesh_net_encode>
	if (err) {
    cb44:	4607      	mov	r7, r0
    cb46:	b9c8      	cbnz	r0, cb7c <bt_mesh_net_send+0xf4>
	    tx->ctx->send_ttl != 1) {
    cb48:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cb4a:	7a5a      	ldrb	r2, [r3, #9]
    cb4c:	2a01      	cmp	r2, #1
    cb4e:	d01c      	beq.n	cb8a <bt_mesh_net_send+0x102>
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    cb50:	8899      	ldrh	r1, [r3, #4]
    cb52:	4648      	mov	r0, r9
    cb54:	f00b fb36 	bl	181c4 <bt_mesh_proxy_relay>
    cb58:	b1b8      	cbz	r0, cb8a <bt_mesh_net_send+0x102>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    cb5a:	6863      	ldr	r3, [r4, #4]
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    cb5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cb60:	2b00      	cmp	r3, #0
    cb62:	dd12      	ble.n	cb8a <bt_mesh_net_send+0x102>
			if (cb) {
    cb64:	b155      	cbz	r5, cb7c <bt_mesh_net_send+0xf4>
				if (cb->start) {
    cb66:	682b      	ldr	r3, [r5, #0]
    cb68:	b11b      	cbz	r3, cb72 <bt_mesh_net_send+0xea>
					cb->start(0, 0, cb_data);
    cb6a:	4642      	mov	r2, r8
    cb6c:	4639      	mov	r1, r7
    cb6e:	4638      	mov	r0, r7
    cb70:	4798      	blx	r3
				if (cb->end) {
    cb72:	686b      	ldr	r3, [r5, #4]
    cb74:	b113      	cbz	r3, cb7c <bt_mesh_net_send+0xf4>
					cb->end(0, cb_data);
    cb76:	4641      	mov	r1, r8
    cb78:	2000      	movs	r0, #0
    cb7a:	4798      	blx	r3
	net_buf_unref(buf);
    cb7c:	4630      	mov	r0, r6
    cb7e:	f010 fdf3 	bl	1d768 <net_buf_unref>
}
    cb82:	4638      	mov	r0, r7
    cb84:	b00b      	add	sp, #44	; 0x2c
    cb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    cb8a:	6863      	ldr	r3, [r4, #4]
    cb8c:	8898      	ldrh	r0, [r3, #4]
    cb8e:	f016 ff37 	bl	23a00 <bt_mesh_fixed_group_match>
    cb92:	b318      	cbz	r0, cbdc <bt_mesh_net_send+0x154>
		if (cb && cb->start) {
    cb94:	bb95      	cbnz	r5, cbfc <bt_mesh_net_send+0x174>
		net_buf_slist_put(&bt_mesh.local_queue, net_buf_ref(buf));
    cb96:	4630      	mov	r0, r6
    cb98:	f018 f894 	bl	24cc4 <net_buf_ref>
    cb9c:	4601      	mov	r1, r0
    cb9e:	4821      	ldr	r0, [pc, #132]	; (cc24 <bt_mesh_net_send+0x19c>)
    cba0:	f018 f833 	bl	24c0a <net_buf_slist_put>
		if (cb && cb->end) {
    cba4:	b125      	cbz	r5, cbb0 <bt_mesh_net_send+0x128>
    cba6:	686b      	ldr	r3, [r5, #4]
    cba8:	b113      	cbz	r3, cbb0 <bt_mesh_net_send+0x128>
			cb->end(0, cb_data);
    cbaa:	4641      	mov	r1, r8
    cbac:	2000      	movs	r0, #0
    cbae:	4798      	blx	r3
    cbb0:	f3bf 8f5b 	dmb	ish
    cbb4:	491c      	ldr	r1, [pc, #112]	; (cc28 <bt_mesh_net_send+0x1a0>)
    cbb6:	e851 3f00 	ldrex	r3, [r1]
    cbba:	f043 0201 	orr.w	r2, r3, #1
    cbbe:	e841 2000 	strex	r0, r2, [r1]
    cbc2:	2800      	cmp	r0, #0
    cbc4:	d1f7      	bne.n	cbb6 <bt_mesh_net_send+0x12e>
    cbc6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    cbca:	f013 0401 	ands.w	r4, r3, #1
    cbce:	d1d5      	bne.n	cb7c <bt_mesh_net_send+0xf4>
		k_queue_append(&work_q->queue, work);
    cbd0:	3908      	subs	r1, #8
    cbd2:	4816      	ldr	r0, [pc, #88]	; (cc2c <bt_mesh_net_send+0x1a4>)
    cbd4:	f018 fa34 	bl	25040 <k_queue_append>
	err = bt_mesh_net_encode(tx, &buf->b, false);
    cbd8:	4627      	mov	r7, r4
    cbda:	e7cf      	b.n	cb7c <bt_mesh_net_send+0xf4>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    cbdc:	6863      	ldr	r3, [r4, #4]
    cbde:	8898      	ldrh	r0, [r3, #4]
    cbe0:	f002 fc7a 	bl	f4d8 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    cbe4:	2800      	cmp	r0, #0
    cbe6:	d1d5      	bne.n	cb94 <bt_mesh_net_send+0x10c>
	} else if (tx->ctx->send_ttl != 1) {
    cbe8:	6863      	ldr	r3, [r4, #4]
    cbea:	7a5b      	ldrb	r3, [r3, #9]
    cbec:	2b01      	cmp	r3, #1
    cbee:	d0c5      	beq.n	cb7c <bt_mesh_net_send+0xf4>
		bt_mesh_adv_send(buf, cb, cb_data);
    cbf0:	4642      	mov	r2, r8
    cbf2:	4629      	mov	r1, r5
    cbf4:	4630      	mov	r0, r6
    cbf6:	f7fe fb5f 	bl	b2b8 <bt_mesh_adv_send>
    cbfa:	e7bf      	b.n	cb7c <bt_mesh_net_send+0xf4>
		if (cb && cb->start) {
    cbfc:	682b      	ldr	r3, [r5, #0]
    cbfe:	2b00      	cmp	r3, #0
    cc00:	d0c9      	beq.n	cb96 <bt_mesh_net_send+0x10e>
			cb->start(0, 0, cb_data);
    cc02:	2100      	movs	r1, #0
    cc04:	4642      	mov	r2, r8
    cc06:	4608      	mov	r0, r1
    cc08:	4798      	blx	r3
    cc0a:	e7c4      	b.n	cb96 <bt_mesh_net_send+0x10e>
    cc0c:	00025948 	.word	0x00025948
    cc10:	00025880 	.word	0x00025880
    cc14:	00028503 	.word	0x00028503
    cc18:	0002853e 	.word	0x0002853e
    cc1c:	20007060 	.word	0x20007060
    cc20:	00028555 	.word	0x00028555
    cc24:	20007078 	.word	0x20007078
    cc28:	20007074 	.word	0x20007074
    cc2c:	20001d2c 	.word	0x20001d2c
    cc30:	00027e25 	.word	0x00027e25

0000cc34 <bt_mesh_subnet_find>:
{
    cc34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    cc38:	4c28      	ldr	r4, [pc, #160]	; (ccdc <bt_mesh_subnet_find+0xa8>)
{
    cc3a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    cc3e:	4617      	mov	r7, r2
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    cc40:	f8b4 21b0 	ldrh.w	r2, [r4, #432]	; 0x1b0
{
    cc44:	4698      	mov	r8, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    cc46:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cc4a:	429a      	cmp	r2, r3
{
    cc4c:	4605      	mov	r5, r0
    cc4e:	460e      	mov	r6, r1
    cc50:	46a2      	mov	sl, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    cc52:	d016      	beq.n	cc82 <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    cc54:	460a      	mov	r2, r1
    cc56:	f8cd 8000 	str.w	r8, [sp]
    cc5a:	4601      	mov	r1, r0
    cc5c:	463b      	mov	r3, r7
    cc5e:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
    cc62:	f7fe fe4d 	bl	b900 <auth_match>
    cc66:	bb10      	cbnz	r0, ccae <bt_mesh_subnet_find+0x7a>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    cc68:	f894 31b3 	ldrb.w	r3, [r4, #435]	; 0x1b3
    cc6c:	b14b      	cbz	r3, cc82 <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    cc6e:	f8cd 8000 	str.w	r8, [sp]
    cc72:	463b      	mov	r3, r7
    cc74:	4632      	mov	r2, r6
    cc76:	4629      	mov	r1, r5
    cc78:	f204 201d 	addw	r0, r4, #541	; 0x21d
    cc7c:	f7fe fe40 	bl	b900 <auth_match>
    cc80:	bb38      	cbnz	r0, ccd2 <bt_mesh_subnet_find+0x9e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    cc82:	f8ba 2294 	ldrh.w	r2, [sl, #660]	; 0x294
    cc86:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cc8a:	429a      	cmp	r2, r3
    cc8c:	d024      	beq.n	ccd8 <bt_mesh_subnet_find+0xa4>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    cc8e:	f8cd 8000 	str.w	r8, [sp]
    cc92:	463b      	mov	r3, r7
    cc94:	4632      	mov	r2, r6
    cc96:	4629      	mov	r1, r5
    cc98:	4811      	ldr	r0, [pc, #68]	; (cce0 <bt_mesh_subnet_find+0xac>)
    cc9a:	f7fe fe31 	bl	b900 <auth_match>
    cc9e:	b148      	cbz	r0, ccb4 <bt_mesh_subnet_find+0x80>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    cca0:	4810      	ldr	r0, [pc, #64]	; (cce4 <bt_mesh_subnet_find+0xb0>)
			*new_key = false;
    cca2:	2300      	movs	r3, #0
			*new_key = true;
    cca4:	f889 3000 	strb.w	r3, [r9]
}
    cca8:	b002      	add	sp, #8
    ccaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    ccae:	f504 70ca 	add.w	r0, r4, #404	; 0x194
    ccb2:	e7f6      	b.n	cca2 <bt_mesh_subnet_find+0x6e>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    ccb4:	f89a 3297 	ldrb.w	r3, [sl, #663]	; 0x297
    ccb8:	b173      	cbz	r3, ccd8 <bt_mesh_subnet_find+0xa4>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    ccba:	f8cd 8000 	str.w	r8, [sp]
    ccbe:	463b      	mov	r3, r7
    ccc0:	4632      	mov	r2, r6
    ccc2:	4629      	mov	r1, r5
    ccc4:	4808      	ldr	r0, [pc, #32]	; (cce8 <bt_mesh_subnet_find+0xb4>)
    ccc6:	f7fe fe1b 	bl	b900 <auth_match>
    ccca:	b128      	cbz	r0, ccd8 <bt_mesh_subnet_find+0xa4>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    cccc:	4805      	ldr	r0, [pc, #20]	; (cce4 <bt_mesh_subnet_find+0xb0>)
			*new_key = true;
    ccce:	2301      	movs	r3, #1
    ccd0:	e7e8      	b.n	cca4 <bt_mesh_subnet_find+0x70>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    ccd2:	f504 70ca 	add.w	r0, r4, #404	; 0x194
    ccd6:	e7fa      	b.n	ccce <bt_mesh_subnet_find+0x9a>
	return NULL;
    ccd8:	2000      	movs	r0, #0
    ccda:	e7e5      	b.n	cca8 <bt_mesh_subnet_find+0x74>
    ccdc:	20007060 	.word	0x20007060
    cce0:	20007308 	.word	0x20007308
    cce4:	200072d8 	.word	0x200072d8
    cce8:	20007361 	.word	0x20007361

0000ccec <bt_mesh_net_decode>:
{
    ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    ccf0:	8887      	ldrh	r7, [r0, #4]
{
    ccf2:	b08d      	sub	sp, #52	; 0x34
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    ccf4:	2f11      	cmp	r7, #17
{
    ccf6:	4605      	mov	r5, r0
    ccf8:	9106      	str	r1, [sp, #24]
    ccfa:	4614      	mov	r4, r2
    ccfc:	4698      	mov	r8, r3
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    ccfe:	d824      	bhi.n	cd4a <bt_mesh_net_decode+0x5e>
		BT_WARN("Dropping too short mesh packet (len %u)", data->len);
    cd00:	2302      	movs	r3, #2
    cd02:	f04f 0200 	mov.w	r2, #0
    cd06:	f363 0207 	bfi	r2, r3, #0, #8
    cd0a:	4ccb      	ldr	r4, [pc, #812]	; (d038 <bt_mesh_net_decode+0x34c>)
    cd0c:	4bcb      	ldr	r3, [pc, #812]	; (d03c <bt_mesh_net_decode+0x350>)
    cd0e:	48cc      	ldr	r0, [pc, #816]	; (d040 <bt_mesh_net_decode+0x354>)
    cd10:	1ae4      	subs	r4, r4, r3
    cd12:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    cd16:	f364 128f 	bfi	r2, r4, #6, #10
    cd1a:	4639      	mov	r1, r7
    cd1c:	f013 ff7f 	bl	20c1e <log_1>
		BT_WARN("%s", bt_hex(data->data, data->len));
    cd20:	f04f 0600 	mov.w	r6, #0
    cd24:	2302      	movs	r3, #2
    cd26:	88a9      	ldrh	r1, [r5, #4]
    cd28:	6828      	ldr	r0, [r5, #0]
    cd2a:	f363 0607 	bfi	r6, r3, #0, #8
    cd2e:	f7f8 ffed 	bl	5d0c <bt_hex_real>
    cd32:	f7f6 fe63 	bl	39fc <log_strdup>
    cd36:	f364 168f 	bfi	r6, r4, #6, #10
    cd3a:	4601      	mov	r1, r0
    cd3c:	4632      	mov	r2, r6
    cd3e:	48c1      	ldr	r0, [pc, #772]	; (d044 <bt_mesh_net_decode+0x358>)
    cd40:	f013 ff6d 	bl	20c1e <log_1>
		return -EINVAL;
    cd44:	f06f 0015 	mvn.w	r0, #21
    cd48:	e1af      	b.n	d0aa <bt_mesh_net_decode+0x3be>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(data)) {
    cd4a:	9b06      	ldr	r3, [sp, #24]
    cd4c:	6800      	ldr	r0, [r0, #0]
    cd4e:	bb7b      	cbnz	r3, cdb0 <bt_mesh_net_decode+0xc4>
	return buf->data + buf->len;
    cd50:	19c6      	adds	r6, r0, r7
	return ((u16_t)src[0] << 8) | src[1];
    cd52:	f816 2c07 	ldrb.w	r2, [r6, #-7]
    cd56:	f816 3c08 	ldrb.w	r3, [r6, #-8]
    cd5a:	f816 1c06 	ldrb.w	r1, [r6, #-6]
    cd5e:	f816 cc02 	ldrb.w	ip, [r6, #-2]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cd62:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    cd66:	f816 2c05 	ldrb.w	r2, [r6, #-5]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cd6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    cd6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
    cd72:	f816 1c04 	ldrb.w	r1, [r6, #-4]
    cd76:	f816 3c03 	ldrb.w	r3, [r6, #-3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cd7a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    cd7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cd82:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    cd86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cd8a:	49af      	ldr	r1, [pc, #700]	; (d048 <bt_mesh_net_decode+0x35c>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    cd8c:	405a      	eors	r2, r3
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    cd8e:	9b06      	ldr	r3, [sp, #24]
    cd90:	460e      	mov	r6, r1
		if (dup_cache[i] == val) {
    cd92:	f851 cb04 	ldr.w	ip, [r1], #4
    cd96:	4562      	cmp	r2, ip
    cd98:	d0d4      	beq.n	cd44 <bt_mesh_net_decode+0x58>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    cd9a:	3301      	adds	r3, #1
    cd9c:	2b04      	cmp	r3, #4
    cd9e:	d1f8      	bne.n	cd92 <bt_mesh_net_decode+0xa6>
	dup_cache[dup_cache_next++] = val;
    cda0:	49aa      	ldr	r1, [pc, #680]	; (d04c <bt_mesh_net_decode+0x360>)
    cda2:	680b      	ldr	r3, [r1, #0]
    cda4:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cda8:	3301      	adds	r3, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    cdaa:	f003 0303 	and.w	r3, r3, #3
    cdae:	600b      	str	r3, [r1, #0]
	BT_DBG("%u bytes: %s", data->len, bt_hex(data->data, data->len));
    cdb0:	2304      	movs	r3, #4
    cdb2:	f04f 0900 	mov.w	r9, #0
    cdb6:	f363 0907 	bfi	r9, r3, #0, #8
    cdba:	4e9f      	ldr	r6, [pc, #636]	; (d038 <bt_mesh_net_decode+0x34c>)
    cdbc:	4b9f      	ldr	r3, [pc, #636]	; (d03c <bt_mesh_net_decode+0x350>)
		if (cred->net_idx != sub->net_idx) {
    cdbe:	f8df a2c4 	ldr.w	sl, [pc, #708]	; d084 <bt_mesh_net_decode+0x398>
	BT_DBG("%u bytes: %s", data->len, bt_hex(data->data, data->len));
    cdc2:	4639      	mov	r1, r7
    cdc4:	1af6      	subs	r6, r6, r3
    cdc6:	f7f8 ffa1 	bl	5d0c <bt_hex_real>
    cdca:	f7f6 fe17 	bl	39fc <log_strdup>
    cdce:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    cdd2:	f366 198f 	bfi	r9, r6, #6, #10
    cdd6:	4603      	mov	r3, r0
    cdd8:	463a      	mov	r2, r7
    cdda:	f8ad 9000 	strh.w	r9, [sp]
    cdde:	499c      	ldr	r1, [pc, #624]	; (d050 <bt_mesh_net_decode+0x364>)
    cde0:	489c      	ldr	r0, [pc, #624]	; (d054 <bt_mesh_net_decode+0x368>)
    cde2:	f013 ff48 	bl	20c76 <log_3>
	rx->net_if = net_if;
    cde6:	7d23      	ldrb	r3, [r4, #20]
    cde8:	9a06      	ldr	r2, [sp, #24]
	BT_DBG("");
    cdea:	499b      	ldr	r1, [pc, #620]	; (d058 <bt_mesh_net_decode+0x36c>)
    cdec:	489b      	ldr	r0, [pc, #620]	; (d05c <bt_mesh_net_decode+0x370>)
	if (!net_find_and_decrypt(data->data, data->len, rx, buf)) {
    cdee:	682f      	ldr	r7, [r5, #0]
	rx->net_if = net_if;
    cdf0:	f362 1305 	bfi	r3, r2, #4, #2
    cdf4:	7523      	strb	r3, [r4, #20]
	BT_DBG("");
    cdf6:	f04f 0200 	mov.w	r2, #0
    cdfa:	2304      	movs	r3, #4
    cdfc:	f363 0207 	bfi	r2, r3, #0, #8
    ce00:	f366 128f 	bfi	r2, r6, #6, #10
	if (!net_find_and_decrypt(data->data, data->len, rx, buf)) {
    ce04:	f8b5 9004 	ldrh.w	r9, [r5, #4]
	BT_DBG("");
    ce08:	4d95      	ldr	r5, [pc, #596]	; (d060 <bt_mesh_net_decode+0x374>)
    ce0a:	f013 ff08 	bl	20c1e <log_1>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    ce0e:	2300      	movs	r3, #0
    ce10:	9305      	str	r3, [sp, #20]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ce12:	f8b5 31b0 	ldrh.w	r3, [r5, #432]	; 0x1b0
    ce16:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ce1a:	4293      	cmp	r3, r2
    ce1c:	f000 8134 	beq.w	d088 <bt_mesh_net_decode+0x39c>
    ce20:	f505 72ca 	add.w	r2, r5, #404	; 0x194
    ce24:	9207      	str	r2, [sp, #28]
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
    ce26:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
    ce2a:	f042 0204 	orr.w	r2, r2, #4
    ce2e:	f362 0b07 	bfi	fp, r2, #0, #8
    ce32:	783a      	ldrb	r2, [r7, #0]
    ce34:	488b      	ldr	r0, [pc, #556]	; (d064 <bt_mesh_net_decode+0x378>)
    ce36:	498c      	ldr	r1, [pc, #560]	; (d068 <bt_mesh_net_decode+0x37c>)
    ce38:	f366 1b8f 	bfi	fp, r6, #6, #10
    ce3c:	f8ad b000 	strh.w	fp, [sp]
    ce40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ce44:	f013 ff17 	bl	20c76 <log_3>
		if (cred->net_idx != sub->net_idx) {
    ce48:	f8b5 31b0 	ldrh.w	r3, [r5, #432]	; 0x1b0
    ce4c:	f8ba 0000 	ldrh.w	r0, [sl]
    ce50:	4298      	cmp	r0, r3
    ce52:	d12c      	bne.n	ceae <bt_mesh_net_decode+0x1c2>
		if (NID(data) == cred->cred[0].nid &&
    ce54:	783b      	ldrb	r3, [r7, #0]
    ce56:	f89a 2008 	ldrb.w	r2, [sl, #8]
    ce5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ce5e:	429a      	cmp	r2, r3
    ce60:	d10c      	bne.n	ce7c <bt_mesh_net_decode+0x190>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
    ce62:	4a82      	ldr	r2, [pc, #520]	; (d06c <bt_mesh_net_decode+0x380>)
    ce64:	f8cd 9000 	str.w	r9, [sp]
    ce68:	e9cd 4801 	strd	r4, r8, [sp, #4]
    ce6c:	463b      	mov	r3, r7
    ce6e:	f1a2 0110 	sub.w	r1, r2, #16
    ce72:	f7fe fd8d 	bl	b990 <net_decrypt.isra.1>
		if (NID(data) == cred->cred[0].nid &&
    ce76:	2800      	cmp	r0, #0
    ce78:	f000 809f 	beq.w	cfba <bt_mesh_net_decode+0x2ce>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    ce7c:	f895 31b3 	ldrb.w	r3, [r5, #435]	; 0x1b3
    ce80:	b1ab      	cbz	r3, ceae <bt_mesh_net_decode+0x1c2>
		if (NID(data) == cred->cred[1].nid &&
    ce82:	783b      	ldrb	r3, [r7, #0]
    ce84:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
    ce88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ce8c:	429a      	cmp	r2, r3
    ce8e:	d10e      	bne.n	ceae <bt_mesh_net_decode+0x1c2>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
    ce90:	e9cd 4801 	strd	r4, r8, [sp, #4]
    ce94:	4a76      	ldr	r2, [pc, #472]	; (d070 <bt_mesh_net_decode+0x384>)
    ce96:	f8cd 9000 	str.w	r9, [sp]
    ce9a:	463b      	mov	r3, r7
    ce9c:	f1a2 0110 	sub.w	r1, r2, #16
    cea0:	f8b5 01b0 	ldrh.w	r0, [r5, #432]	; 0x1b0
    cea4:	f7fe fd74 	bl	b990 <net_decrypt.isra.1>
		if (NID(data) == cred->cred[1].nid &&
    cea8:	2800      	cmp	r0, #0
    ceaa:	f000 80a2 	beq.w	cff2 <bt_mesh_net_decode+0x306>
		if (cred->net_idx != sub->net_idx) {
    ceae:	f8b5 31b0 	ldrh.w	r3, [r5, #432]	; 0x1b0
    ceb2:	f8ba 004a 	ldrh.w	r0, [sl, #74]	; 0x4a
    ceb6:	4298      	cmp	r0, r3
    ceb8:	d10a      	bne.n	ced0 <bt_mesh_net_decode+0x1e4>
		if (NID(data) == cred->cred[0].nid &&
    ceba:	783b      	ldrb	r3, [r7, #0]
    cebc:	f89a 2052 	ldrb.w	r2, [sl, #82]	; 0x52
    cec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cec4:	429a      	cmp	r2, r3
    cec6:	d06c      	beq.n	cfa2 <bt_mesh_net_decode+0x2b6>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    cec8:	f895 31b3 	ldrb.w	r3, [r5, #435]	; 0x1b3
    cecc:	2b00      	cmp	r3, #0
    cece:	d179      	bne.n	cfc4 <bt_mesh_net_decode+0x2d8>
		if (NID(data) == sub->keys[0].nid &&
    ced0:	783b      	ldrb	r3, [r7, #0]
    ced2:	f895 21d4 	ldrb.w	r2, [r5, #468]	; 0x1d4
    ced6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ceda:	429a      	cmp	r2, r3
    cedc:	f040 808e 	bne.w	cffc <bt_mesh_net_decode+0x310>
		    !net_decrypt(sub, sub->keys[0].enc, sub->keys[0].privacy,
    cee0:	e9cd 4801 	strd	r4, r8, [sp, #4]
    cee4:	f8cd 9000 	str.w	r9, [sp]
    cee8:	463b      	mov	r3, r7
    ceea:	f205 12fd 	addw	r2, r5, #509	; 0x1fd
    ceee:	f205 11d5 	addw	r1, r5, #469	; 0x1d5
    cef2:	f8b5 01b0 	ldrh.w	r0, [r5, #432]	; 0x1b0
    cef6:	f7fe fd4b 	bl	b990 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[0].nid &&
    cefa:	2800      	cmp	r0, #0
    cefc:	d17e      	bne.n	cffc <bt_mesh_net_decode+0x310>
			rx->ctx.net_idx = sub->net_idx;
    cefe:	9905      	ldr	r1, [sp, #20]
    cf00:	4a57      	ldr	r2, [pc, #348]	; (d060 <bt_mesh_net_decode+0x374>)
	BT_DBG("Decryption successful. Payload len %u", buf->len);
    cf02:	485c      	ldr	r0, [pc, #368]	; (d074 <bt_mesh_net_decode+0x388>)
			rx->ctx.net_idx = sub->net_idx;
    cf04:	23e4      	movs	r3, #228	; 0xe4
    cf06:	fb03 2301 	mla	r3, r3, r1, r2
	rx->ctx.recv_ttl = TTL(buf->data);
    cf0a:	f8d8 2000 	ldr.w	r2, [r8]
			rx->ctx.net_idx = sub->net_idx;
    cf0e:	f8b3 31b0 	ldrh.w	r3, [r3, #432]	; 0x1b0
    cf12:	80a3      	strh	r3, [r4, #4]
			rx->sub = sub;
    cf14:	9b07      	ldr	r3, [sp, #28]
    cf16:	6023      	str	r3, [r4, #0]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    cf18:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cf1c:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(buf->data);
    cf1e:	7851      	ldrb	r1, [r2, #1]
    cf20:	7b23      	ldrb	r3, [r4, #12]
    cf22:	f361 0306 	bfi	r3, r1, #0, #7
    cf26:	7323      	strb	r3, [r4, #12]
	if (rx->ctx.recv_ttl == 0) {
    cf28:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
    cf2c:	bf18      	it	ne
    cf2e:	2301      	movne	r3, #1
    cf30:	425b      	negs	r3, r3
    cf32:	7363      	strb	r3, [r4, #13]
	rx->ctl = CTL(buf->data);
    cf34:	7853      	ldrb	r3, [r2, #1]
    cf36:	7d21      	ldrb	r1, [r4, #20]
    cf38:	09db      	lsrs	r3, r3, #7
    cf3a:	f363 01c3 	bfi	r1, r3, #3, #1
    cf3e:	7521      	strb	r1, [r4, #20]
	rx->seq = SEQ(buf->data);
    cf40:	78d3      	ldrb	r3, [r2, #3]
    cf42:	7891      	ldrb	r1, [r2, #2]
    cf44:	021b      	lsls	r3, r3, #8
    cf46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cf4a:	7911      	ldrb	r1, [r2, #4]
    cf4c:	430b      	orrs	r3, r1
    cf4e:	6123      	str	r3, [r4, #16]
	return ((u16_t)src[0] << 8) | src[1];
    cf50:	79d1      	ldrb	r1, [r2, #7]
    cf52:	7a13      	ldrb	r3, [r2, #8]
    cf54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rx->ctx.recv_dst = DST(buf->data);
    cf58:	8163      	strh	r3, [r4, #10]
	BT_DBG("Decryption successful. Payload len %u", buf->len);
    cf5a:	2204      	movs	r2, #4
    cf5c:	f04f 0300 	mov.w	r3, #0
    cf60:	f362 0307 	bfi	r3, r2, #0, #8
    cf64:	f366 138f 	bfi	r3, r6, #6, #10
    cf68:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    cf6c:	4938      	ldr	r1, [pc, #224]	; (d050 <bt_mesh_net_decode+0x364>)
    cf6e:	f013 fe6a 	bl	20c46 <log_2>
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    cf72:	9b06      	ldr	r3, [sp, #24]
    cf74:	2b03      	cmp	r3, #3
    cf76:	f000 809b 	beq.w	d0b0 <bt_mesh_net_decode+0x3c4>
    cf7a:	8963      	ldrh	r3, [r4, #10]
    cf7c:	2b00      	cmp	r3, #0
    cf7e:	f040 8097 	bne.w	d0b0 <bt_mesh_net_decode+0x3c4>
		BT_ERR("Destination address is unassigned; dropping packet");
    cf82:	f04f 0100 	mov.w	r1, #0
    cf86:	2301      	movs	r3, #1
    cf88:	f363 0107 	bfi	r1, r3, #0, #8
    cf8c:	483a      	ldr	r0, [pc, #232]	; (d078 <bt_mesh_net_decode+0x38c>)
    cf8e:	f366 118f 	bfi	r1, r6, #6, #10
		BT_ERR("Destination address is RFU; dropping packet");
    cf92:	f013 fe37 	bl	20c04 <log_0>
		return -EBADMSG;
    cf96:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    cf9a:	e086      	b.n	d0aa <bt_mesh_net_decode+0x3be>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    cf9c:	2301      	movs	r3, #1
    cf9e:	9305      	str	r3, [sp, #20]
    cfa0:	e737      	b.n	ce12 <bt_mesh_net_decode+0x126>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
    cfa2:	4a36      	ldr	r2, [pc, #216]	; (d07c <bt_mesh_net_decode+0x390>)
    cfa4:	f8cd 9000 	str.w	r9, [sp]
    cfa8:	e9cd 4801 	strd	r4, r8, [sp, #4]
    cfac:	463b      	mov	r3, r7
    cfae:	f1a2 0110 	sub.w	r1, r2, #16
    cfb2:	f7fe fced 	bl	b990 <net_decrypt.isra.1>
		if (NID(data) == cred->cred[0].nid &&
    cfb6:	2800      	cmp	r0, #0
    cfb8:	d186      	bne.n	cec8 <bt_mesh_net_decode+0x1dc>
			rx->friend_cred = 1U;
    cfba:	7d23      	ldrb	r3, [r4, #20]
    cfbc:	f043 0304 	orr.w	r3, r3, #4
			rx->new_key = 1U;
    cfc0:	7523      	strb	r3, [r4, #20]
    cfc2:	e79c      	b.n	cefe <bt_mesh_net_decode+0x212>
		if (NID(data) == cred->cred[1].nid &&
    cfc4:	783b      	ldrb	r3, [r7, #0]
    cfc6:	f89a 2073 	ldrb.w	r2, [sl, #115]	; 0x73
    cfca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cfce:	429a      	cmp	r2, r3
    cfd0:	f47f af7e 	bne.w	ced0 <bt_mesh_net_decode+0x1e4>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
    cfd4:	e9cd 4801 	strd	r4, r8, [sp, #4]
    cfd8:	4a29      	ldr	r2, [pc, #164]	; (d080 <bt_mesh_net_decode+0x394>)
    cfda:	f8cd 9000 	str.w	r9, [sp]
    cfde:	463b      	mov	r3, r7
    cfe0:	f1a2 0110 	sub.w	r1, r2, #16
    cfe4:	f8b5 01b0 	ldrh.w	r0, [r5, #432]	; 0x1b0
    cfe8:	f7fe fcd2 	bl	b990 <net_decrypt.isra.1>
		if (NID(data) == cred->cred[1].nid &&
    cfec:	2800      	cmp	r0, #0
    cfee:	f47f af6f 	bne.w	ced0 <bt_mesh_net_decode+0x1e4>
			rx->new_key = 1U;
    cff2:	7d23      	ldrb	r3, [r4, #20]
    cff4:	f043 0302 	orr.w	r3, r3, #2
    cff8:	7523      	strb	r3, [r4, #20]
			return 0;
    cffa:	e7de      	b.n	cfba <bt_mesh_net_decode+0x2ce>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    cffc:	f895 31b3 	ldrb.w	r3, [r5, #435]	; 0x1b3
    d000:	2b00      	cmp	r3, #0
    d002:	d041      	beq.n	d088 <bt_mesh_net_decode+0x39c>
		if (NID(data) == sub->keys[1].nid &&
    d004:	783b      	ldrb	r3, [r7, #0]
    d006:	f895 222d 	ldrb.w	r2, [r5, #557]	; 0x22d
    d00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d00e:	429a      	cmp	r2, r3
    d010:	d13a      	bne.n	d088 <bt_mesh_net_decode+0x39c>
		    !net_decrypt(sub, sub->keys[1].enc, sub->keys[1].privacy,
    d012:	e9cd 4801 	strd	r4, r8, [sp, #4]
    d016:	f8cd 9000 	str.w	r9, [sp]
    d01a:	463b      	mov	r3, r7
    d01c:	f205 2256 	addw	r2, r5, #598	; 0x256
    d020:	f205 212e 	addw	r1, r5, #558	; 0x22e
    d024:	f8b5 01b0 	ldrh.w	r0, [r5, #432]	; 0x1b0
    d028:	f7fe fcb2 	bl	b990 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[1].nid &&
    d02c:	bb60      	cbnz	r0, d088 <bt_mesh_net_decode+0x39c>
			rx->new_key = 1U;
    d02e:	7d23      	ldrb	r3, [r4, #20]
    d030:	f043 0302 	orr.w	r3, r3, #2
    d034:	e7c4      	b.n	cfc0 <bt_mesh_net_decode+0x2d4>
    d036:	bf00      	nop
    d038:	00025948 	.word	0x00025948
    d03c:	00025880 	.word	0x00025880
    d040:	00027fbd 	.word	0x00027fbd
    d044:	00027ad9 	.word	0x00027ad9
    d048:	20000cf8 	.word	0x20000cf8
    d04c:	20000d08 	.word	0x20000d08
    d050:	00027e78 	.word	0x00027e78
    d054:	00027fe5 	.word	0x00027fe5
    d058:	00027e51 	.word	0x00027e51
    d05c:	00026623 	.word	0x00026623
    d060:	20007060 	.word	0x20007060
    d064:	0002867a 	.word	0x0002867a
    d068:	00027e42 	.word	0x00027e42
    d06c:	20001dc5 	.word	0x20001dc5
    d070:	20001de6 	.word	0x20001de6
    d074:	00028021 	.word	0x00028021
    d078:	0002804b 	.word	0x0002804b
    d07c:	20001e0f 	.word	0x20001e0f
    d080:	20001e30 	.word	0x20001e30
    d084:	20001dac 	.word	0x20001dac
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    d088:	9b05      	ldr	r3, [sp, #20]
    d08a:	35e4      	adds	r5, #228	; 0xe4
    d08c:	2b00      	cmp	r3, #0
    d08e:	d085      	beq.n	cf9c <bt_mesh_net_decode+0x2b0>
		BT_DBG("Unable to find matching net for packet");
    d090:	2304      	movs	r3, #4
    d092:	f04f 0200 	mov.w	r2, #0
    d096:	f363 0207 	bfi	r2, r3, #0, #8
    d09a:	482d      	ldr	r0, [pc, #180]	; (d150 <bt_mesh_net_decode+0x464>)
    d09c:	492d      	ldr	r1, [pc, #180]	; (d154 <bt_mesh_net_decode+0x468>)
    d09e:	f366 128f 	bfi	r2, r6, #6, #10
    d0a2:	f013 fdbc 	bl	20c1e <log_1>
		return -ENOENT;
    d0a6:	f06f 0001 	mvn.w	r0, #1
}
    d0aa:	b00d      	add	sp, #52	; 0x34
    d0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (BT_MESH_ADDR_IS_RFU(rx->ctx.recv_dst)) {
    d0b0:	8963      	ldrh	r3, [r4, #10]
    d0b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    d0b6:	b29b      	uxth	r3, r3
    d0b8:	2bfb      	cmp	r3, #251	; 0xfb
    d0ba:	d808      	bhi.n	d0ce <bt_mesh_net_decode+0x3e2>
		BT_ERR("Destination address is RFU; dropping packet");
    d0bc:	f04f 0100 	mov.w	r1, #0
    d0c0:	2301      	movs	r3, #1
    d0c2:	f363 0107 	bfi	r1, r3, #0, #8
    d0c6:	f366 118f 	bfi	r1, r6, #6, #10
    d0ca:	4823      	ldr	r0, [pc, #140]	; (d158 <bt_mesh_net_decode+0x46c>)
    d0cc:	e761      	b.n	cf92 <bt_mesh_net_decode+0x2a6>
	if (net_if != BT_MESH_NET_IF_LOCAL && bt_mesh_elem_find(rx->ctx.addr)) {
    d0ce:	9b06      	ldr	r3, [sp, #24]
    d0d0:	2b01      	cmp	r3, #1
    d0d2:	d00f      	beq.n	d0f4 <bt_mesh_net_decode+0x408>
    d0d4:	8920      	ldrh	r0, [r4, #8]
    d0d6:	f002 f9ff 	bl	f4d8 <bt_mesh_elem_find>
    d0da:	b158      	cbz	r0, d0f4 <bt_mesh_net_decode+0x408>
		BT_DBG("Dropping locally originated packet");
    d0dc:	2304      	movs	r3, #4
    d0de:	f04f 0200 	mov.w	r2, #0
    d0e2:	f363 0207 	bfi	r2, r3, #0, #8
    d0e6:	f366 128f 	bfi	r2, r6, #6, #10
    d0ea:	491a      	ldr	r1, [pc, #104]	; (d154 <bt_mesh_net_decode+0x468>)
    d0ec:	481b      	ldr	r0, [pc, #108]	; (d15c <bt_mesh_net_decode+0x470>)
    d0ee:	f013 fd96 	bl	20c1e <log_1>
    d0f2:	e750      	b.n	cf96 <bt_mesh_net_decode+0x2aa>
	BT_DBG("src 0x%04x dst 0x%04x ttl %u", rx->ctx.addr, rx->ctx.recv_dst,
    d0f4:	2204      	movs	r2, #4
    d0f6:	f04f 0300 	mov.w	r3, #0
    d0fa:	f362 0307 	bfi	r3, r2, #0, #8
    d0fe:	4a15      	ldr	r2, [pc, #84]	; (d154 <bt_mesh_net_decode+0x468>)
    d100:	9208      	str	r2, [sp, #32]
    d102:	8922      	ldrh	r2, [r4, #8]
    d104:	9209      	str	r2, [sp, #36]	; 0x24
    d106:	8962      	ldrh	r2, [r4, #10]
    d108:	920a      	str	r2, [sp, #40]	; 0x28
    d10a:	7b22      	ldrb	r2, [r4, #12]
    d10c:	4814      	ldr	r0, [pc, #80]	; (d160 <bt_mesh_net_decode+0x474>)
    d10e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    d112:	f366 138f 	bfi	r3, r6, #6, #10
    d116:	920b      	str	r2, [sp, #44]	; 0x2c
    d118:	a908      	add	r1, sp, #32
    d11a:	2204      	movs	r2, #4
    d11c:	f013 fdc6 	bl	20cac <log_n>
	BT_DBG("PDU: %s", bt_hex(buf->data, buf->len));
    d120:	f04f 0400 	mov.w	r4, #0
    d124:	2304      	movs	r3, #4
    d126:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    d12a:	f8d8 0000 	ldr.w	r0, [r8]
    d12e:	f363 0407 	bfi	r4, r3, #0, #8
    d132:	f7f8 fdeb 	bl	5d0c <bt_hex_real>
    d136:	f7f6 fc61 	bl	39fc <log_strdup>
    d13a:	f366 148f 	bfi	r4, r6, #6, #10
    d13e:	4602      	mov	r2, r0
    d140:	4623      	mov	r3, r4
    d142:	4808      	ldr	r0, [pc, #32]	; (d164 <bt_mesh_net_decode+0x478>)
    d144:	4903      	ldr	r1, [pc, #12]	; (d154 <bt_mesh_net_decode+0x468>)
    d146:	f013 fd7e 	bl	20c46 <log_2>
	return 0;
    d14a:	2000      	movs	r0, #0
    d14c:	e7ad      	b.n	d0aa <bt_mesh_net_decode+0x3be>
    d14e:	bf00      	nop
    d150:	00027ff6 	.word	0x00027ff6
    d154:	00027e78 	.word	0x00027e78
    d158:	0002807e 	.word	0x0002807e
    d15c:	000280aa 	.word	0x000280aa
    d160:	000280d1 	.word	0x000280d1
    d164:	000280f2 	.word	0x000280f2

0000d168 <bt_mesh_net_recv>:
{
    d168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d16c:	b098      	sub	sp, #96	; 0x60
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d16e:	ab10      	add	r3, sp, #64	; 0x40
{
    d170:	4616      	mov	r6, r2
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d172:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
{
    d176:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d178:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    d17c:	2100      	movs	r1, #0
    d17e:	2218      	movs	r2, #24
{
    d180:	4680      	mov	r8, r0
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    d182:	a80a      	add	r0, sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d184:	9303      	str	r3, [sp, #12]
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    d186:	f014 fea8 	bl	21eda <memset>
	BT_DBG("rssi %d net_if %u", rssi, net_if);
    d18a:	2204      	movs	r2, #4
    d18c:	f04f 0300 	mov.w	r3, #0
    d190:	f362 0307 	bfi	r3, r2, #0, #8
    d194:	4ca5      	ldr	r4, [pc, #660]	; (d42c <bt_mesh_net_recv+0x2c4>)
    d196:	4aa6      	ldr	r2, [pc, #664]	; (d430 <bt_mesh_net_recv+0x2c8>)
    d198:	49a6      	ldr	r1, [pc, #664]	; (d434 <bt_mesh_net_recv+0x2cc>)
    d19a:	48a7      	ldr	r0, [pc, #668]	; (d438 <bt_mesh_net_recv+0x2d0>)
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    d19c:	f88d 503d 	strb.w	r5, [sp, #61]	; 0x3d
	BT_DBG("rssi %d net_if %u", rssi, net_if);
    d1a0:	1aa4      	subs	r4, r4, r2
    d1a2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    d1a6:	f364 138f 	bfi	r3, r4, #6, #10
    d1aa:	f8ad 3000 	strh.w	r3, [sp]
    d1ae:	462a      	mov	r2, r5
    d1b0:	4633      	mov	r3, r6
    d1b2:	f013 fd60 	bl	20c76 <log_3>
	if (!bt_mesh_is_provisioned()) {
    d1b6:	f015 fefa 	bl	22fae <bt_mesh_is_provisioned>
    d1ba:	2800      	cmp	r0, #0
    d1bc:	d075      	beq.n	d2aa <bt_mesh_net_recv+0x142>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    d1be:	ab03      	add	r3, sp, #12
    d1c0:	aa0a      	add	r2, sp, #40	; 0x28
    d1c2:	4631      	mov	r1, r6
    d1c4:	4640      	mov	r0, r8
    d1c6:	f7ff fd91 	bl	ccec <bt_mesh_net_decode>
    d1ca:	2800      	cmp	r0, #0
    d1cc:	d16d      	bne.n	d2aa <bt_mesh_net_recv+0x142>
	state->offset = net_buf_simple_headroom(buf);
    d1ce:	a803      	add	r0, sp, #12
    d1d0:	f017 fe1d 	bl	24e0e <net_buf_simple_headroom>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d1d4:	2e02      	cmp	r6, #2
    d1d6:	4605      	mov	r5, r0
	state->len = buf->len;
    d1d8:	f8bd 7010 	ldrh.w	r7, [sp, #16]
    d1dc:	d104      	bne.n	d1e8 <bt_mesh_net_recv+0x80>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    d1de:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
    d1e2:	4640      	mov	r0, r8
    d1e4:	f016 fffb 	bl	241de <bt_mesh_proxy_addr_add>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d1e8:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
    d1ec:	f016 fc08 	bl	23a00 <bt_mesh_fixed_group_match>
    d1f0:	2800      	cmp	r0, #0
    d1f2:	d14c      	bne.n	d28e <bt_mesh_net_recv+0x126>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    d1f4:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
    d1f8:	f002 f96e 	bl	f4d8 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d1fc:	3000      	adds	r0, #0
    d1fe:	bf18      	it	ne
    d200:	2001      	movne	r0, #1
    d202:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
	bt_mesh_trans_recv(&buf, &rx);
    d206:	a90a      	add	r1, sp, #40	; 0x28
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d208:	f360 1386 	bfi	r3, r0, #6, #1
	bt_mesh_trans_recv(&buf, &rx);
    d20c:	a803      	add	r0, sp, #12
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d20e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	bt_mesh_trans_recv(&buf, &rx);
    d212:	f001 fa6d 	bl	e6f0 <bt_mesh_trans_recv>
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    d216:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
    d21a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    d21e:	2b00      	cmp	r3, #0
    d220:	dd02      	ble.n	d228 <bt_mesh_net_recv+0xc0>
    d222:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    d226:	d140      	bne.n	d2aa <bt_mesh_net_recv+0x142>
	buf->data = buf->__buf + state->offset;
    d228:	9b05      	ldr	r3, [sp, #20]
	buf->len = state->len;
    d22a:	f8ad 7010 	strh.w	r7, [sp, #16]
	buf->data = buf->__buf + state->offset;
    d22e:	fa13 f585 	uxtah	r5, r3, r5
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d232:	f002 0230 	and.w	r2, r2, #48	; 0x30
    d236:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d23a:	9503      	str	r5, [sp, #12]
    d23c:	2a10      	cmp	r2, #16
		if (rx->ctx.recv_ttl == 1) {
    d23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d242:	d126      	bne.n	d292 <bt_mesh_net_recv+0x12a>
		if (rx->ctx.recv_ttl == 1) {
    d244:	2b01      	cmp	r3, #1
    d246:	d030      	beq.n	d2aa <bt_mesh_net_recv+0x142>
	BT_DBG("TTL %u CTL %u dst 0x%04x", rx->ctx.recv_ttl, rx->ctl,
    d248:	2204      	movs	r2, #4
    d24a:	f04f 0300 	mov.w	r3, #0
    d24e:	f362 0307 	bfi	r3, r2, #0, #8
    d252:	4a7a      	ldr	r2, [pc, #488]	; (d43c <bt_mesh_net_recv+0x2d4>)
    d254:	9206      	str	r2, [sp, #24]
    d256:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    d25a:	4879      	ldr	r0, [pc, #484]	; (d440 <bt_mesh_net_recv+0x2d8>)
    d25c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    d260:	9207      	str	r2, [sp, #28]
    d262:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    d266:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    d26a:	9208      	str	r2, [sp, #32]
    d26c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
    d270:	9209      	str	r2, [sp, #36]	; 0x24
    d272:	f364 138f 	bfi	r3, r4, #6, #10
    d276:	2204      	movs	r2, #4
    d278:	a906      	add	r1, sp, #24
    d27a:	f013 fd17 	bl	20cac <log_n>
	if (rx->net_if == BT_MESH_NET_IF_ADV) {
    d27e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    d282:	f013 0f30 	tst.w	r3, #48	; 0x30
    d286:	d013      	beq.n	d2b0 <bt_mesh_net_recv+0x148>
		transmit = bt_mesh_net_transmit_get();
    d288:	f004 fb70 	bl	1196c <bt_mesh_net_transmit_get>
    d28c:	e012      	b.n	d2b4 <bt_mesh_net_recv+0x14c>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d28e:	2001      	movs	r0, #1
    d290:	e7b7      	b.n	d202 <bt_mesh_net_recv+0x9a>
		if (rx->ctx.recv_ttl <= 1) {
    d292:	2b01      	cmp	r3, #1
    d294:	d909      	bls.n	d2aa <bt_mesh_net_recv+0x142>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    d296:	2a00      	cmp	r2, #0
    d298:	d1d6      	bne.n	d248 <bt_mesh_net_recv+0xe0>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    d29a:	f004 fbef 	bl	11a7c <bt_mesh_relay_get>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    d29e:	2801      	cmp	r0, #1
    d2a0:	d0d2      	beq.n	d248 <bt_mesh_net_recv+0xe0>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    d2a2:	f004 fce5 	bl	11c70 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    d2a6:	2801      	cmp	r0, #1
    d2a8:	d0ce      	beq.n	d248 <bt_mesh_net_recv+0xe0>
}
    d2aa:	b018      	add	sp, #96	; 0x60
    d2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		transmit = bt_mesh_relay_retransmit_get();
    d2b0:	f004 fbf8 	bl	11aa4 <bt_mesh_relay_retransmit_get>
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    d2b4:	4601      	mov	r1, r0
    d2b6:	2200      	movs	r2, #0
    d2b8:	2001      	movs	r0, #1
    d2ba:	f7fd ffed 	bl	b298 <bt_mesh_adv_create>
	if (!buf) {
    d2be:	4605      	mov	r5, r0
    d2c0:	b950      	cbnz	r0, d2d8 <bt_mesh_net_recv+0x170>
		BT_ERR("Out of relay buffers");
    d2c2:	2301      	movs	r3, #1
    d2c4:	f04f 0100 	mov.w	r1, #0
    d2c8:	f363 0107 	bfi	r1, r3, #0, #8
    d2cc:	f364 118f 	bfi	r1, r4, #6, #10
    d2d0:	485c      	ldr	r0, [pc, #368]	; (d444 <bt_mesh_net_recv+0x2dc>)
    d2d2:	f013 fc97 	bl	20c04 <log_0>
		return;
    d2d6:	e7e8      	b.n	d2aa <bt_mesh_net_recv+0x142>
	if (rx->net_if != BT_MESH_NET_IF_LOCAL) {
    d2d8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    d2dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d2e0:	2b10      	cmp	r3, #16
    d2e2:	d00d      	beq.n	d300 <bt_mesh_net_recv+0x198>
    d2e4:	9a03      	ldr	r2, [sp, #12]
		sbuf->data[1] &= 0x80;
    d2e6:	7853      	ldrb	r3, [r2, #1]
    d2e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d2ec:	7053      	strb	r3, [r2, #1]
		sbuf->data[1] |= rx->ctx.recv_ttl - 1;
    d2ee:	9a03      	ldr	r2, [sp, #12]
    d2f0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d2f4:	7851      	ldrb	r1, [r2, #1]
    d2f6:	f3c3 0306 	ubfx	r3, r3, #0, #7
    d2fa:	3b01      	subs	r3, #1
    d2fc:	430b      	orrs	r3, r1
    d2fe:	7053      	strb	r3, [r2, #1]
	net_buf_add_mem(buf, sbuf->data, sbuf->len);
    d300:	f105 0808 	add.w	r8, r5, #8
    d304:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    d308:	9903      	ldr	r1, [sp, #12]
    d30a:	4640      	mov	r0, r8
    d30c:	f017 fce4 	bl	24cd8 <net_buf_simple_add_mem>
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d310:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	BT_DBG("Relaying packet. TTL is now %u", TTL(buf->data));
    d312:	494a      	ldr	r1, [pc, #296]	; (d43c <bt_mesh_net_recv+0x2d4>)
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d314:	7fba      	ldrb	r2, [r7, #30]
	BT_DBG("Relaying packet. TTL is now %u", TTL(buf->data));
    d316:	484c      	ldr	r0, [pc, #304]	; (d448 <bt_mesh_net_recv+0x2e0>)
    d318:	2659      	movs	r6, #89	; 0x59
    d31a:	4356      	muls	r6, r2
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    d31c:	19bb      	adds	r3, r7, r6
	BT_DBG("Relaying packet. TTL is now %u", TTL(buf->data));
    d31e:	2204      	movs	r2, #4
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    d320:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
	BT_DBG("Relaying packet. TTL is now %u", TTL(buf->data));
    d324:	f04f 0300 	mov.w	r3, #0
    d328:	f362 0307 	bfi	r3, r2, #0, #8
    d32c:	68aa      	ldr	r2, [r5, #8]
    d32e:	7852      	ldrb	r2, [r2, #1]
    d330:	f364 138f 	bfi	r3, r4, #6, #10
    d334:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    d338:	f013 fc85 	bl	20c46 <log_2>
	if (rx->friend_cred) {
    d33c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d340:	f106 0a41 	add.w	sl, r6, #65	; 0x41
	if (rx->friend_cred) {
    d344:	075a      	lsls	r2, r3, #29
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d346:	44ba      	add	sl, r7
	if (rx->friend_cred) {
    d348:	d50a      	bpl.n	d360 <bt_mesh_net_recv+0x1f8>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    d34a:	68aa      	ldr	r2, [r5, #8]
    d34c:	7813      	ldrb	r3, [r2, #0]
    d34e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d352:	7013      	strb	r3, [r2, #0]
		buf->data[0] |= nid;
    d354:	68ab      	ldr	r3, [r5, #8]
    d356:	781a      	ldrb	r2, [r3, #0]
    d358:	ea49 0902 	orr.w	r9, r9, r2
    d35c:	f883 9000 	strb.w	r9, [r3]
	if (bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_RX(rx), false)) {
    d360:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d454 <bt_mesh_net_recv+0x2ec>
    d364:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    d368:	f8d9 1000 	ldr.w	r1, [r9]
    d36c:	f002 0201 	and.w	r2, r2, #1
    d370:	1a8a      	subs	r2, r1, r2
    d372:	2300      	movs	r3, #0
    d374:	4641      	mov	r1, r8
    d376:	4650      	mov	r0, sl
    d378:	f016 f9ba 	bl	236f0 <bt_mesh_net_encrypt>
    d37c:	b168      	cbz	r0, d39a <bt_mesh_net_recv+0x232>
		BT_ERR("Re-encrypting failed");
    d37e:	f04f 0100 	mov.w	r1, #0
    d382:	2301      	movs	r3, #1
    d384:	f363 0107 	bfi	r1, r3, #0, #8
    d388:	4830      	ldr	r0, [pc, #192]	; (d44c <bt_mesh_net_recv+0x2e4>)
    d38a:	f364 118f 	bfi	r1, r4, #6, #10
		BT_ERR("Re-obfuscating failed");
    d38e:	f013 fc39 	bl	20c04 <log_0>
	net_buf_unref(buf);
    d392:	4628      	mov	r0, r5
    d394:	f010 f9e8 	bl	1d768 <net_buf_unref>
    d398:	e787      	b.n	d2aa <bt_mesh_net_recv+0x142>
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    d39a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    d39e:	f8d9 1000 	ldr.w	r1, [r9]
    d3a2:	68a8      	ldr	r0, [r5, #8]
	priv = rx->sub->keys[rx->sub->kr_flag].privacy;
    d3a4:	f106 0269 	add.w	r2, r6, #105	; 0x69
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    d3a8:	f003 0301 	and.w	r3, r3, #1
    d3ac:	443a      	add	r2, r7
    d3ae:	1ac9      	subs	r1, r1, r3
    d3b0:	f016 f975 	bl	2369e <bt_mesh_net_obfuscate>
    d3b4:	b140      	cbz	r0, d3c8 <bt_mesh_net_recv+0x260>
		BT_ERR("Re-obfuscating failed");
    d3b6:	f04f 0100 	mov.w	r1, #0
    d3ba:	2301      	movs	r3, #1
    d3bc:	f363 0107 	bfi	r1, r3, #0, #8
    d3c0:	f364 118f 	bfi	r1, r4, #6, #10
    d3c4:	4822      	ldr	r0, [pc, #136]	; (d450 <bt_mesh_net_recv+0x2e8>)
    d3c6:	e7e2      	b.n	d38e <bt_mesh_net_recv+0x226>
	    (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED ||
    d3c8:	f004 fc52 	bl	11c70 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d3cc:	2801      	cmp	r0, #1
    d3ce:	d013      	beq.n	d3f8 <bt_mesh_net_recv+0x290>
	     rx->net_if == BT_MESH_NET_IF_LOCAL)) {
    d3d0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d3d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d3d8:	2b10      	cmp	r3, #16
    d3da:	d00d      	beq.n	d3f8 <bt_mesh_net_recv+0x290>
	if (relay_to_adv(rx->net_if)) {
    d3dc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    d3e0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d3e4:	b2da      	uxtb	r2, r3
	switch (net_if) {
    d3e6:	2a01      	cmp	r2, #1
    d3e8:	d019      	beq.n	d41e <bt_mesh_net_recv+0x2b6>
    d3ea:	b25b      	sxtb	r3, r3
    d3ec:	b183      	cbz	r3, d410 <bt_mesh_net_recv+0x2a8>
    d3ee:	2a02      	cmp	r2, #2
    d3f0:	d1cf      	bne.n	d392 <bt_mesh_net_recv+0x22a>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    d3f2:	f004 fc3d 	bl	11c70 <bt_mesh_gatt_proxy_get>
    d3f6:	e00d      	b.n	d414 <bt_mesh_net_recv+0x2ac>
		if (bt_mesh_proxy_relay(&buf->b, rx->ctx.recv_dst) &&
    d3f8:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
    d3fc:	4640      	mov	r0, r8
    d3fe:	f00a fee1 	bl	181c4 <bt_mesh_proxy_relay>
    d402:	2800      	cmp	r0, #0
    d404:	d0ea      	beq.n	d3dc <bt_mesh_net_recv+0x274>
    d406:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
    d40a:	2b00      	cmp	r3, #0
    d40c:	dde6      	ble.n	d3dc <bt_mesh_net_recv+0x274>
    d40e:	e7c0      	b.n	d392 <bt_mesh_net_recv+0x22a>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    d410:	f004 fb34 	bl	11a7c <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    d414:	1e43      	subs	r3, r0, #1
    d416:	4258      	negs	r0, r3
    d418:	4158      	adcs	r0, r3
	if (relay_to_adv(rx->net_if)) {
    d41a:	2800      	cmp	r0, #0
    d41c:	d0b9      	beq.n	d392 <bt_mesh_net_recv+0x22a>
		bt_mesh_adv_send(buf, NULL, NULL);
    d41e:	2200      	movs	r2, #0
    d420:	4611      	mov	r1, r2
    d422:	4628      	mov	r0, r5
    d424:	f7fd ff48 	bl	b2b8 <bt_mesh_adv_send>
    d428:	e7b3      	b.n	d392 <bt_mesh_net_recv+0x22a>
    d42a:	bf00      	nop
    d42c:	00025948 	.word	0x00025948
    d430:	00025880 	.word	0x00025880
    d434:	00027e8b 	.word	0x00027e8b
    d438:	000283ed 	.word	0x000283ed
    d43c:	00027e66 	.word	0x00027e66
    d440:	00028403 	.word	0x00028403
    d444:	00028420 	.word	0x00028420
    d448:	00028435 	.word	0x00028435
    d44c:	00028458 	.word	0x00028458
    d450:	0002846d 	.word	0x0002846d
    d454:	20007060 	.word	0x20007060

0000d458 <bt_mesh_net_local>:
{
    d458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));
    d45c:	4b1a      	ldr	r3, [pc, #104]	; (d4c8 <bt_mesh_net_local+0x70>)
    d45e:	4c1b      	ldr	r4, [pc, #108]	; (d4cc <bt_mesh_net_local+0x74>)
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    d460:	f8df 806c 	ldr.w	r8, [pc, #108]	; d4d0 <bt_mesh_net_local+0x78>
		BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));
    d464:	f8df 906c 	ldr.w	r9, [pc, #108]	; d4d4 <bt_mesh_net_local+0x7c>
    d468:	f8df a06c 	ldr.w	sl, [pc, #108]	; d4d8 <bt_mesh_net_local+0x80>
    d46c:	1ae4      	subs	r4, r4, r3
    d46e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    d472:	4640      	mov	r0, r8
    d474:	f017 fbe4 	bl	24c40 <net_buf_slist_get>
    d478:	4605      	mov	r5, r0
    d47a:	b910      	cbnz	r0, d482 <bt_mesh_net_local+0x2a>
}
    d47c:	b003      	add	sp, #12
    d47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));
    d482:	f8b5 b00c 	ldrh.w	fp, [r5, #12]
    d486:	462f      	mov	r7, r5
    d488:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
    d48c:	f043 0304 	orr.w	r3, r3, #4
    d490:	4659      	mov	r1, fp
    d492:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d496:	f363 0607 	bfi	r6, r3, #0, #8
    d49a:	f7f8 fc37 	bl	5d0c <bt_hex_real>
    d49e:	f7f6 faad 	bl	39fc <log_strdup>
    d4a2:	f364 168f 	bfi	r6, r4, #6, #10
    d4a6:	4603      	mov	r3, r0
    d4a8:	465a      	mov	r2, fp
    d4aa:	4649      	mov	r1, r9
    d4ac:	4650      	mov	r0, sl
    d4ae:	f8ad 6000 	strh.w	r6, [sp]
    d4b2:	f013 fbe0 	bl	20c76 <log_3>
		bt_mesh_net_recv(&buf->b, 0, BT_MESH_NET_IF_LOCAL);
    d4b6:	4638      	mov	r0, r7
    d4b8:	2201      	movs	r2, #1
    d4ba:	2100      	movs	r1, #0
    d4bc:	f7ff fe54 	bl	d168 <bt_mesh_net_recv>
		net_buf_unref(buf);
    d4c0:	4628      	mov	r0, r5
    d4c2:	f010 f951 	bl	1d768 <net_buf_unref>
    d4c6:	e7d4      	b.n	d472 <bt_mesh_net_local+0x1a>
    d4c8:	00025880 	.word	0x00025880
    d4cc:	00025948 	.word	0x00025948
    d4d0:	20007078 	.word	0x20007078
    d4d4:	00027e00 	.word	0x00027e00
    d4d8:	000283de 	.word	0x000283de

0000d4dc <bt_mesh_net_start>:

void bt_mesh_net_start(void)
{
    d4dc:	b510      	push	{r4, lr}
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED) {
    d4de:	f004 fb23 	bl	11b28 <bt_mesh_beacon_get>
    d4e2:	2801      	cmp	r0, #1
    d4e4:	d118      	bne.n	d518 <bt_mesh_net_start+0x3c>
		bt_mesh_beacon_enable();
    d4e6:	f7fe f9d5 	bl	b894 <bt_mesh_beacon_enable>
	} else {
		bt_mesh_beacon_disable();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    d4ea:	f004 fbc1 	bl	11c70 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d4ee:	2802      	cmp	r0, #2
    d4f0:	d003      	beq.n	d4fa <bt_mesh_net_start+0x1e>
		bt_mesh_proxy_gatt_enable();
    d4f2:	f00a fddf 	bl	180b4 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    d4f6:	f7fd fe8b 	bl	b210 <bt_mesh_adv_update>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_init();
	} else {
		bt_mesh_scan_enable();
    d4fa:	f7fd ff13 	bl	b324 <bt_mesh_scan_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_init();
    d4fe:	f008 fc47 	bl	15d90 <bt_mesh_friend_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		u16_t net_idx = bt_mesh.sub[0].net_idx;
    d502:	4b07      	ldr	r3, [pc, #28]	; (d520 <bt_mesh_net_start+0x44>)
    d504:	f8b3 41b0 	ldrh.w	r4, [r3, #432]	; 0x1b0
		u16_t addr = bt_mesh_primary_addr();
    d508:	f001 ffe0 	bl	f4cc <bt_mesh_primary_addr>

		bt_mesh_prov_complete(net_idx, addr);
    d50c:	4601      	mov	r1, r0
    d50e:	4620      	mov	r0, r4
	}
}
    d510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_complete(net_idx, addr);
    d514:	f00a b99e 	b.w	17854 <bt_mesh_prov_complete>
		bt_mesh_beacon_disable();
    d518:	f7fe f9e2 	bl	b8e0 <bt_mesh_beacon_disable>
    d51c:	e7e5      	b.n	d4ea <bt_mesh_net_start+0xe>
    d51e:	bf00      	nop
    d520:	20007060 	.word	0x20007060

0000d524 <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
    d524:	b510      	push	{r4, lr}
	k_delayed_work_init(&bt_mesh.ivu_timer, ivu_refresh);
    d526:	4c06      	ldr	r4, [pc, #24]	; (d540 <bt_mesh_net_init+0x1c>)
    d528:	4906      	ldr	r1, [pc, #24]	; (d544 <bt_mesh_net_init+0x20>)
    d52a:	f504 708a 	add.w	r0, r4, #276	; 0x114
    d52e:	f017 ff89 	bl	25444 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d532:	4a05      	ldr	r2, [pc, #20]	; (d548 <bt_mesh_net_init+0x24>)
    d534:	2300      	movs	r3, #0
    d536:	60e3      	str	r3, [r4, #12]
    d538:	e9c4 2304 	strd	r2, r3, [r4, #16]

	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
}
    d53c:	bd10      	pop	{r4, pc}
    d53e:	bf00      	nop
    d540:	20007060 	.word	0x20007060
    d544:	0000c6d9 	.word	0x0000c6d9
    d548:	0000d459 	.word	0x0000d459

0000d54c <send_unseg>:
	hb_sub_dst = addr;
}

static int send_unseg(struct bt_mesh_net_tx *tx, struct net_buf_simple *sdu,
		      const struct bt_mesh_send_cb *cb, void *cb_data)
{
    d54c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d550:	4690      	mov	r8, r2
    d552:	4699      	mov	r9, r3
	struct net_buf *buf;

	BT_DBG("src 0x%04x dst 0x%04x app_idx 0x%04x sdu_len %u",
    d554:	2204      	movs	r2, #4
    d556:	f04f 0300 	mov.w	r3, #0
    d55a:	f362 0307 	bfi	r3, r2, #0, #8
    d55e:	4d30      	ldr	r5, [pc, #192]	; (d620 <send_unseg+0xd4>)
    d560:	4a30      	ldr	r2, [pc, #192]	; (d624 <send_unseg+0xd8>)
{
    d562:	b087      	sub	sp, #28
	BT_DBG("src 0x%04x dst 0x%04x app_idx 0x%04x sdu_len %u",
    d564:	1aad      	subs	r5, r5, r2
    d566:	4a30      	ldr	r2, [pc, #192]	; (d628 <send_unseg+0xdc>)
    d568:	9201      	str	r2, [sp, #4]
    d56a:	8902      	ldrh	r2, [r0, #8]
    d56c:	9202      	str	r2, [sp, #8]
    d56e:	6842      	ldr	r2, [r0, #4]
{
    d570:	460f      	mov	r7, r1
	BT_DBG("src 0x%04x dst 0x%04x app_idx 0x%04x sdu_len %u",
    d572:	8891      	ldrh	r1, [r2, #4]
    d574:	8852      	ldrh	r2, [r2, #2]
    d576:	9204      	str	r2, [sp, #16]
{
    d578:	4604      	mov	r4, r0
	BT_DBG("src 0x%04x dst 0x%04x app_idx 0x%04x sdu_len %u",
    d57a:	88ba      	ldrh	r2, [r7, #4]
    d57c:	9103      	str	r1, [sp, #12]
    d57e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    d582:	f365 138f 	bfi	r3, r5, #6, #10
    d586:	9205      	str	r2, [sp, #20]
    d588:	a901      	add	r1, sp, #4
    d58a:	2205      	movs	r2, #5
    d58c:	4827      	ldr	r0, [pc, #156]	; (d62c <send_unseg+0xe0>)
    d58e:	f013 fb8d 	bl	20cac <log_n>
	       tx->src, tx->ctx->addr, tx->ctx->app_idx, sdu->len);

	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    d592:	2200      	movs	r2, #0
    d594:	7aa1      	ldrb	r1, [r4, #10]
    d596:	2001      	movs	r0, #1
    d598:	f7fd fe7e 	bl	b298 <bt_mesh_adv_create>
	if (!buf) {
    d59c:	4606      	mov	r6, r0
    d59e:	b970      	cbnz	r0, d5be <send_unseg+0x72>
		BT_ERR("Out of network buffers");
    d5a0:	2301      	movs	r3, #1
    d5a2:	f04f 0100 	mov.w	r1, #0
    d5a6:	f363 0107 	bfi	r1, r3, #0, #8
    d5aa:	4821      	ldr	r0, [pc, #132]	; (d630 <send_unseg+0xe4>)
    d5ac:	f365 118f 	bfi	r1, r5, #6, #10
    d5b0:	f013 fb28 	bl	20c04 <log_0>
		return -ENOBUFS;
    d5b4:	f06f 0036 	mvn.w	r0, #54	; 0x36
			return 0;
		}
	}

	return bt_mesh_net_send(tx, buf, cb, cb_data);
}
    d5b8:	b007      	add	sp, #28
    d5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
    d5be:	f100 0508 	add.w	r5, r0, #8
    d5c2:	2109      	movs	r1, #9
    d5c4:	4628      	mov	r0, r5
    d5c6:	f017 fb1c 	bl	24c02 <net_buf_simple_reserve>
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d5ca:	6863      	ldr	r3, [r4, #4]
    d5cc:	885a      	ldrh	r2, [r3, #2]
    d5ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    d5d2:	429a      	cmp	r2, r3
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    d5d4:	bf1b      	ittet	ne
    d5d6:	7ae1      	ldrbne	r1, [r4, #11]
    d5d8:	0889      	lsrne	r1, r1, #2
		net_buf_add_u8(buf, UNSEG_HDR(0, 0));
    d5da:	2100      	moveq	r1, #0
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    d5dc:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
    d5e0:	4628      	mov	r0, r5
    d5e2:	f017 fb82 	bl	24cea <net_buf_simple_add_u8>
	net_buf_add_mem(buf, sdu->data, sdu->len);
    d5e6:	88ba      	ldrh	r2, [r7, #4]
    d5e8:	6839      	ldr	r1, [r7, #0]
    d5ea:	4628      	mov	r0, r5
    d5ec:	f017 fb74 	bl	24cd8 <net_buf_simple_add_mem>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
    d5f0:	2200      	movs	r2, #0
    d5f2:	462b      	mov	r3, r5
    d5f4:	4611      	mov	r1, r2
    d5f6:	4620      	mov	r0, r4
    d5f8:	f008 fcca 	bl	15f90 <bt_mesh_friend_enqueue_tx>
    d5fc:	b148      	cbz	r0, d612 <send_unseg+0xc6>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    d5fe:	6863      	ldr	r3, [r4, #4]
					      NULL, &buf->b) &&
    d600:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    d604:	2b00      	cmp	r3, #0
    d606:	dd04      	ble.n	d612 <send_unseg+0xc6>
			net_buf_unref(buf);
    d608:	4630      	mov	r0, r6
    d60a:	f010 f8ad 	bl	1d768 <net_buf_unref>
			return 0;
    d60e:	2000      	movs	r0, #0
    d610:	e7d2      	b.n	d5b8 <send_unseg+0x6c>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    d612:	464b      	mov	r3, r9
    d614:	4642      	mov	r2, r8
    d616:	4631      	mov	r1, r6
    d618:	4620      	mov	r0, r4
    d61a:	f7ff fa35 	bl	ca88 <bt_mesh_net_send>
    d61e:	e7cb      	b.n	d5b8 <send_unseg+0x6c>
    d620:	00025968 	.word	0x00025968
    d624:	00025880 	.word	0x00025880
    d628:	00028721 	.word	0x00028721
    d62c:	00029044 	.word	0x00029044
    d630:	00029078 	.word	0x00029078

0000d634 <is_replay>:
static bool is_replay(struct bt_mesh_net_rx *rx)
{
	int i;

	/* Don't bother checking messages from ourselves */
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d634:	7d02      	ldrb	r2, [r0, #20]
{
    d636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d638:	f002 0330 	and.w	r3, r2, #48	; 0x30
    d63c:	2b10      	cmp	r3, #16
{
    d63e:	4605      	mov	r5, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d640:	d013      	beq.n	d66a <is_replay+0x36>
    d642:	491f      	ldr	r1, [pc, #124]	; (d6c0 <is_replay+0x8c>)
    d644:	8907      	ldrh	r7, [r0, #8]
		return false;
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    d646:	2300      	movs	r3, #0
    d648:	460e      	mov	r6, r1
		struct bt_mesh_rpl *rpl = &bt_mesh.rpl[i];

		/* Empty slot */
		if (!rpl->src) {
    d64a:	f8b1 435c 	ldrh.w	r4, [r1, #860]	; 0x35c
    d64e:	f501 7057 	add.w	r0, r1, #860	; 0x35c
    d652:	b964      	cbnz	r4, d66e <is_replay+0x3a>
			rpl->src = rx->ctx.addr;
    d654:	336b      	adds	r3, #107	; 0x6b
    d656:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    d65a:	809f      	strh	r7, [r3, #4]
				return true;
			}

			if ((!rx->old_iv && rpl->old_iv) ||
			    rpl->seq < rx->seq) {
				rpl->seq = rx->seq;
    d65c:	6929      	ldr	r1, [r5, #16]
    d65e:	6099      	str	r1, [r3, #8]
				rpl->old_iv = rx->old_iv;
    d660:	f3c2 0200 	ubfx	r2, r2, #0, #1
    d664:	719a      	strb	r2, [r3, #6]

				if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
					bt_mesh_store_rpl(rpl);
    d666:	f016 fc92 	bl	23f8e <bt_mesh_store_rpl>
				}

				return false;
    d66a:	2000      	movs	r0, #0
		}
	}

	BT_ERR("RPL is full!");
	return true;
}
    d66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    d66e:	42bc      	cmp	r4, r7
    d670:	d112      	bne.n	d698 <is_replay+0x64>
			if (rx->old_iv && !rpl->old_iv) {
    d672:	336b      	adds	r3, #107	; 0x6b
    d674:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
    d678:	07d4      	lsls	r4, r2, #31
    d67a:	7989      	ldrb	r1, [r1, #6]
    d67c:	d502      	bpl.n	d684 <is_replay+0x50>
    d67e:	b911      	cbnz	r1, d686 <is_replay+0x52>
				return true;
    d680:	2001      	movs	r0, #1
    d682:	e7f3      	b.n	d66c <is_replay+0x38>
			if ((!rx->old_iv && rpl->old_iv) ||
    d684:	b929      	cbnz	r1, d692 <is_replay+0x5e>
			    rpl->seq < rx->seq) {
    d686:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
			if ((!rx->old_iv && rpl->old_iv) ||
    d68a:	688c      	ldr	r4, [r1, #8]
    d68c:	6929      	ldr	r1, [r5, #16]
    d68e:	428c      	cmp	r4, r1
    d690:	d2f6      	bcs.n	d680 <is_replay+0x4c>
				rpl->seq = rx->seq;
    d692:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    d696:	e7e1      	b.n	d65c <is_replay+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    d698:	3301      	adds	r3, #1
    d69a:	2b0a      	cmp	r3, #10
    d69c:	f101 0108 	add.w	r1, r1, #8
    d6a0:	d1d3      	bne.n	d64a <is_replay+0x16>
	BT_ERR("RPL is full!");
    d6a2:	2301      	movs	r3, #1
    d6a4:	f04f 0100 	mov.w	r1, #0
    d6a8:	f363 0107 	bfi	r1, r3, #0, #8
    d6ac:	4a05      	ldr	r2, [pc, #20]	; (d6c4 <is_replay+0x90>)
    d6ae:	4b06      	ldr	r3, [pc, #24]	; (d6c8 <is_replay+0x94>)
    d6b0:	4806      	ldr	r0, [pc, #24]	; (d6cc <is_replay+0x98>)
    d6b2:	1a9b      	subs	r3, r3, r2
    d6b4:	08db      	lsrs	r3, r3, #3
    d6b6:	f363 118f 	bfi	r1, r3, #6, #10
    d6ba:	f013 faa3 	bl	20c04 <log_0>
	return true;
    d6be:	e7df      	b.n	d680 <is_replay+0x4c>
    d6c0:	20007060 	.word	0x20007060
    d6c4:	00025880 	.word	0x00025880
    d6c8:	00025968 	.word	0x00025968
    d6cc:	00028d56 	.word	0x00028d56

0000d6d0 <sdu_recv>:

static int sdu_recv(struct bt_mesh_net_rx *rx, u32_t seq, u8_t hdr,
		    u8_t aszmic, struct net_buf_simple *buf)
{
    d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6d4:	b0a3      	sub	sp, #140	; 0x8c
    d6d6:	4698      	mov	r8, r3
    d6d8:	9108      	str	r1, [sp, #32]
	NET_BUF_SIMPLE_DEFINE(sdu, CONFIG_BT_MESH_RX_SDU_MAX - 4);
    d6da:	ab11      	add	r3, sp, #68	; 0x44
    d6dc:	f44f 0188 	mov.w	r1, #4456448	; 0x440000
    d6e0:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    d6e4:	930a      	str	r3, [sp, #40]	; 0x28
	u8_t *ad;
	u16_t i;
	int err;

	BT_DBG("ASZMIC %u AKF %u AID 0x%02x", aszmic, AKF(&hdr), AID(&hdr));
    d6e6:	2104      	movs	r1, #4
    d6e8:	f04f 0300 	mov.w	r3, #0
    d6ec:	f361 0307 	bfi	r3, r1, #0, #8
    d6f0:	4e7f      	ldr	r6, [pc, #508]	; (d8f0 <sdu_recv+0x220>)
    d6f2:	4980      	ldr	r1, [pc, #512]	; (d8f4 <sdu_recv+0x224>)
{
    d6f4:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
	BT_DBG("ASZMIC %u AKF %u AID 0x%02x", aszmic, AKF(&hdr), AID(&hdr));
    d6f6:	f8df b220 	ldr.w	fp, [pc, #544]	; d918 <sdu_recv+0x248>
    d6fa:	1a76      	subs	r6, r6, r1
    d6fc:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    d700:	f3c2 1980 	ubfx	r9, r2, #6, #1
    d704:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    d708:	f366 138f 	bfi	r3, r6, #6, #10
    d70c:	9207      	str	r2, [sp, #28]
    d70e:	9210      	str	r2, [sp, #64]	; 0x40
    d710:	a90d      	add	r1, sp, #52	; 0x34
    d712:	2204      	movs	r2, #4
{
    d714:	4604      	mov	r4, r0
	BT_DBG("ASZMIC %u AKF %u AID 0x%02x", aszmic, AKF(&hdr), AID(&hdr));
    d716:	4878      	ldr	r0, [pc, #480]	; (d8f8 <sdu_recv+0x228>)
    d718:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    d71c:	e9cd b80d 	strd	fp, r8, [sp, #52]	; 0x34
    d720:	f013 fac4 	bl	20cac <log_n>
	BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));
    d724:	2204      	movs	r2, #4
    d726:	88bd      	ldrh	r5, [r7, #4]
    d728:	6838      	ldr	r0, [r7, #0]
    d72a:	f04f 0300 	mov.w	r3, #0
    d72e:	f362 0307 	bfi	r3, r2, #0, #8
    d732:	f366 138f 	bfi	r3, r6, #6, #10
    d736:	4629      	mov	r1, r5
    d738:	9309      	str	r3, [sp, #36]	; 0x24
    d73a:	9306      	str	r3, [sp, #24]
    d73c:	f7f8 fae6 	bl	5d0c <bt_hex_real>
    d740:	f7f6 f95c 	bl	39fc <log_strdup>
    d744:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d746:	f8ad 3000 	strh.w	r3, [sp]
    d74a:	462a      	mov	r2, r5
    d74c:	4603      	mov	r3, r0
    d74e:	4659      	mov	r1, fp
    d750:	486a      	ldr	r0, [pc, #424]	; (d8fc <sdu_recv+0x22c>)
    d752:	f013 fa90 	bl	20c76 <log_3>

	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
    d756:	f1b8 0f00 	cmp.w	r8, #0
    d75a:	88ba      	ldrh	r2, [r7, #4]
    d75c:	bf14      	ite	ne
    d75e:	2309      	movne	r3, #9
    d760:	2305      	moveq	r3, #5
    d762:	429a      	cmp	r2, r3
    d764:	da0c      	bge.n	d780 <sdu_recv+0xb0>
		BT_ERR("Too short SDU + MIC");
    d766:	f04f 0100 	mov.w	r1, #0
    d76a:	2301      	movs	r3, #1
    d76c:	f363 0107 	bfi	r1, r3, #0, #8
    d770:	4863      	ldr	r0, [pc, #396]	; (d900 <sdu_recv+0x230>)
    d772:	f366 118f 	bfi	r1, r6, #6, #10

		bt_mesh_model_recv(rx, &sdu);
		return 0;
	}

	BT_WARN("No matching AppKey");
    d776:	f013 fa45 	bl	20c04 <log_0>

	return -EINVAL;
    d77a:	f06f 0b15 	mvn.w	fp, #21
    d77e:	e010      	b.n	d7a2 <sdu_recv+0xd2>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
    d780:	7d25      	ldrb	r5, [r4, #20]
    d782:	8962      	ldrh	r2, [r4, #10]
    d784:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    d788:	d10f      	bne.n	d7aa <sdu_recv+0xda>
		BT_DBG("Ignoring PDU for LPN 0x%04x of this Friend",
    d78a:	2104      	movs	r1, #4
    d78c:	f04f 0300 	mov.w	r3, #0
    d790:	f361 0307 	bfi	r3, r1, #0, #8
    d794:	f366 138f 	bfi	r3, r6, #6, #10
    d798:	4659      	mov	r1, fp
    d79a:	485a      	ldr	r0, [pc, #360]	; (d904 <sdu_recv+0x234>)
    d79c:	f013 fa53 	bl	20c46 <log_2>
		return 0;
    d7a0:	46ab      	mov	fp, r5
}
    d7a2:	4658      	mov	r0, fp
    d7a4:	b023      	add	sp, #140	; 0x8c
    d7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    d7aa:	f482 4300 	eor.w	r3, r2, #32768	; 0x8000
    d7ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    d7b2:	d234      	bcs.n	d81e <sdu_recv+0x14e>
		ad = bt_mesh_label_uuid_get(rx->ctx.recv_dst);
    d7b4:	4610      	mov	r0, r2
    d7b6:	f004 fd3d 	bl	12234 <bt_mesh_label_uuid_get>
    d7ba:	9006      	str	r0, [sp, #24]
	buf->len -= APP_MIC_LEN(aszmic);
    d7bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    d7c0:	4d51      	ldr	r5, [pc, #324]	; (d908 <sdu_recv+0x238>)
    d7c2:	f1b8 0f00 	cmp.w	r8, #0
    d7c6:	bf14      	ite	ne
    d7c8:	2208      	movne	r2, #8
    d7ca:	2204      	moveq	r2, #4
    d7cc:	1a9b      	subs	r3, r3, r2
    d7ce:	80bb      	strh	r3, [r7, #4]
	if (!AKF(&hdr)) {
    d7d0:	f1b9 0f00 	cmp.w	r9, #0
    d7d4:	d12e      	bne.n	d834 <sdu_recv+0x164>
					  BT_MESH_NET_IVI_RX(rx));
    d7d6:	7d23      	ldrb	r3, [r4, #20]
    d7d8:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, buf,
    d7dc:	682b      	ldr	r3, [r5, #0]
    d7de:	1a9b      	subs	r3, r3, r2
    d7e0:	9305      	str	r3, [sp, #20]
    d7e2:	9b08      	ldr	r3, [sp, #32]
    d7e4:	9304      	str	r3, [sp, #16]
    d7e6:	8963      	ldrh	r3, [r4, #10]
    d7e8:	9303      	str	r3, [sp, #12]
    d7ea:	8923      	ldrh	r3, [r4, #8]
    d7ec:	9302      	str	r3, [sp, #8]
    d7ee:	f10d 0928 	add.w	r9, sp, #40	; 0x28
    d7f2:	9b06      	ldr	r3, [sp, #24]
    d7f4:	9301      	str	r3, [sp, #4]
    d7f6:	f8cd 9000 	str.w	r9, [sp]
    d7fa:	463b      	mov	r3, r7
    d7fc:	4642      	mov	r2, r8
    d7fe:	2101      	movs	r1, #1
    d800:	f505 709a 	add.w	r0, r5, #308	; 0x134
    d804:	f016 f85a 	bl	238bc <bt_mesh_app_decrypt>
		if (err) {
    d808:	4683      	mov	fp, r0
    d80a:	b158      	cbz	r0, d824 <sdu_recv+0x154>
			BT_ERR("Unable to decrypt with DevKey");
    d80c:	f04f 0100 	mov.w	r1, #0
    d810:	2301      	movs	r3, #1
    d812:	f363 0107 	bfi	r1, r3, #0, #8
    d816:	f366 118f 	bfi	r1, r6, #6, #10
    d81a:	483c      	ldr	r0, [pc, #240]	; (d90c <sdu_recv+0x23c>)
    d81c:	e7ab      	b.n	d776 <sdu_recv+0xa6>
		ad = NULL;
    d81e:	2300      	movs	r3, #0
    d820:	9306      	str	r3, [sp, #24]
    d822:	e7cb      	b.n	d7bc <sdu_recv+0xec>
		rx->ctx.app_idx = BT_MESH_KEY_DEV;
    d824:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    d828:	80e2      	strh	r2, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    d82a:	4649      	mov	r1, r9
		bt_mesh_model_recv(rx, &sdu);
    d82c:	4620      	mov	r0, r4
    d82e:	f001 fe99 	bl	f564 <bt_mesh_model_recv>
		return 0;
    d832:	e7b6      	b.n	d7a2 <sdu_recv+0xd2>
	if (!AKF(&hdr)) {
    d834:	f04f 0900 	mov.w	r9, #0
		if (key->net_idx != rx->sub->net_idx) {
    d838:	6823      	ldr	r3, [r4, #0]
    d83a:	f8b5 2144 	ldrh.w	r2, [r5, #324]	; 0x144
    d83e:	8b9b      	ldrh	r3, [r3, #28]
    d840:	429a      	cmp	r2, r3
    d842:	d139      	bne.n	d8b8 <sdu_recv+0x1e8>
		if (rx->new_key && key->updated) {
    d844:	7d23      	ldrb	r3, [r4, #20]
    d846:	079b      	lsls	r3, r3, #30
    d848:	d546      	bpl.n	d8d8 <sdu_recv+0x208>
    d84a:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
    d84e:	2b00      	cmp	r3, #0
    d850:	d042      	beq.n	d8d8 <sdu_recv+0x208>
			keys = &key->keys[1];
    d852:	f505 70ad 	add.w	r0, r5, #346	; 0x15a
		if (AID(&hdr) != keys->id) {
    d856:	7803      	ldrb	r3, [r0, #0]
    d858:	9a07      	ldr	r2, [sp, #28]
    d85a:	4293      	cmp	r3, r2
    d85c:	d12c      	bne.n	d8b8 <sdu_recv+0x1e8>
	buf->len  = 0;
    d85e:	f04f 0300 	mov.w	r3, #0
    d862:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	buf->data = buf->__buf;
    d866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d868:	930a      	str	r3, [sp, #40]	; 0x28
					  BT_MESH_NET_IVI_RX(rx));
    d86a:	7d23      	ldrb	r3, [r4, #20]
    d86c:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(keys->val, false, aszmic, buf,
    d870:	4b25      	ldr	r3, [pc, #148]	; (d908 <sdu_recv+0x238>)
    d872:	681b      	ldr	r3, [r3, #0]
    d874:	1a9b      	subs	r3, r3, r2
    d876:	9305      	str	r3, [sp, #20]
    d878:	9b08      	ldr	r3, [sp, #32]
    d87a:	9304      	str	r3, [sp, #16]
    d87c:	8963      	ldrh	r3, [r4, #10]
    d87e:	9303      	str	r3, [sp, #12]
    d880:	8923      	ldrh	r3, [r4, #8]
    d882:	9302      	str	r3, [sp, #8]
    d884:	9b06      	ldr	r3, [sp, #24]
    d886:	9301      	str	r3, [sp, #4]
    d888:	ab0a      	add	r3, sp, #40	; 0x28
    d88a:	9300      	str	r3, [sp, #0]
    d88c:	4642      	mov	r2, r8
    d88e:	463b      	mov	r3, r7
    d890:	2100      	movs	r1, #0
    d892:	3001      	adds	r0, #1
    d894:	f016 f812 	bl	238bc <bt_mesh_app_decrypt>
		if (err) {
    d898:	4683      	mov	fp, r0
    d89a:	b300      	cbz	r0, d8de <sdu_recv+0x20e>
			BT_WARN("Unable to decrypt with AppKey 0x%03x",
    d89c:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
    d8a0:	f043 0302 	orr.w	r3, r3, #2
    d8a4:	f363 0a07 	bfi	sl, r3, #0, #8
    d8a8:	f366 1a8f 	bfi	sl, r6, #6, #10
    d8ac:	4652      	mov	r2, sl
    d8ae:	f8b5 1146 	ldrh.w	r1, [r5, #326]	; 0x146
    d8b2:	4817      	ldr	r0, [pc, #92]	; (d910 <sdu_recv+0x240>)
    d8b4:	f013 f9b3 	bl	20c1e <log_1>
			continue;
    d8b8:	3528      	adds	r5, #40	; 0x28
	for (i = 0U; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
    d8ba:	f1b9 0f00 	cmp.w	r9, #0
    d8be:	d008      	beq.n	d8d2 <sdu_recv+0x202>
	BT_WARN("No matching AppKey");
    d8c0:	f04f 0100 	mov.w	r1, #0
    d8c4:	2302      	movs	r3, #2
    d8c6:	f363 0107 	bfi	r1, r3, #0, #8
    d8ca:	f366 118f 	bfi	r1, r6, #6, #10
    d8ce:	4811      	ldr	r0, [pc, #68]	; (d914 <sdu_recv+0x244>)
    d8d0:	e751      	b.n	d776 <sdu_recv+0xa6>
    d8d2:	f04f 0901 	mov.w	r9, #1
    d8d6:	e7af      	b.n	d838 <sdu_recv+0x168>
			keys = &key->keys[0];
    d8d8:	f205 1049 	addw	r0, r5, #329	; 0x149
    d8dc:	e7bb      	b.n	d856 <sdu_recv+0x186>
		rx->ctx.app_idx = key->app_idx;
    d8de:	4b0a      	ldr	r3, [pc, #40]	; (d908 <sdu_recv+0x238>)
    d8e0:	2228      	movs	r2, #40	; 0x28
    d8e2:	fb02 3909 	mla	r9, r2, r9, r3
		bt_mesh_model_recv(rx, &sdu);
    d8e6:	a90a      	add	r1, sp, #40	; 0x28
		rx->ctx.app_idx = key->app_idx;
    d8e8:	f8b9 2146 	ldrh.w	r2, [r9, #326]	; 0x146
    d8ec:	80e2      	strh	r2, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    d8ee:	e79d      	b.n	d82c <sdu_recv+0x15c>
    d8f0:	00025968 	.word	0x00025968
    d8f4:	00025880 	.word	0x00025880
    d8f8:	00028d63 	.word	0x00028d63
    d8fc:	000283de 	.word	0x000283de
    d900:	00028d83 	.word	0x00028d83
    d904:	00028d97 	.word	0x00028d97
    d908:	20007060 	.word	0x20007060
    d90c:	00028dc6 	.word	0x00028dc6
    d910:	00028de4 	.word	0x00028de4
    d914:	00028e09 	.word	0x00028e09
    d918:	00028769 	.word	0x00028769

0000d91c <seg_rx_reset>:
				NULL, NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
	BT_DBG("rx %p", rx);
    d91c:	2204      	movs	r2, #4
    d91e:	f04f 0300 	mov.w	r3, #0
{
    d922:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("rx %p", rx);
    d924:	f362 0307 	bfi	r3, r2, #0, #8
    d928:	4d1e      	ldr	r5, [pc, #120]	; (d9a4 <seg_rx_reset+0x88>)
    d92a:	4a1f      	ldr	r2, [pc, #124]	; (d9a8 <seg_rx_reset+0x8c>)
    d92c:	1aad      	subs	r5, r5, r2
    d92e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
{
    d932:	4604      	mov	r4, r0
	BT_DBG("rx %p", rx);
    d934:	f365 138f 	bfi	r3, r5, #6, #10
    d938:	4602      	mov	r2, r0
{
    d93a:	460e      	mov	r6, r1
	BT_DBG("rx %p", rx);
    d93c:	481b      	ldr	r0, [pc, #108]	; (d9ac <seg_rx_reset+0x90>)
    d93e:	491c      	ldr	r1, [pc, #112]	; (d9b0 <seg_rx_reset+0x94>)
    d940:	f013 f981 	bl	20c46 <log_2>

	k_delayed_work_cancel(&rx->ack);
    d944:	f104 0020 	add.w	r0, r4, #32
    d948:	f017 fd84 	bl	25454 <k_delayed_work_cancel>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    d94c:	f994 3010 	ldrsb.w	r3, [r4, #16]
    d950:	2b00      	cmp	r3, #0
    d952:	da1a      	bge.n	d98a <seg_rx_reset+0x6e>
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    d954:	7c23      	ldrb	r3, [r4, #16]
    d956:	f003 031f 	and.w	r3, r3, #31
    d95a:	1c5a      	adds	r2, r3, #1
    d95c:	2301      	movs	r3, #1
    d95e:	4093      	lsls	r3, r2
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    d960:	69a2      	ldr	r2, [r4, #24]
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    d962:	3b01      	subs	r3, #1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    d964:	429a      	cmp	r2, r3
    d966:	d010      	beq.n	d98a <seg_rx_reset+0x6e>
		BT_WARN("Clearing incomplete buffers from Friend queue");
    d968:	2302      	movs	r3, #2
    d96a:	f04f 0100 	mov.w	r1, #0
    d96e:	f363 0107 	bfi	r1, r3, #0, #8
    d972:	f365 118f 	bfi	r1, r5, #6, #10
    d976:	480f      	ldr	r0, [pc, #60]	; (d9b4 <seg_rx_reset+0x98>)
    d978:	f013 f944 	bl	20c04 <log_0>
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
    d97c:	f104 0308 	add.w	r3, r4, #8
    d980:	8ae2      	ldrh	r2, [r4, #22]
    d982:	8aa1      	ldrh	r1, [r4, #20]
    d984:	6820      	ldr	r0, [r4, #0]
    d986:	f008 fbd5 	bl	16134 <bt_mesh_friend_clear_incomplete>
						&rx->seq_auth);
	}

	rx->in_use = 0U;
    d98a:	7c23      	ldrb	r3, [r4, #16]
    d98c:	f36f 1386 	bfc	r3, #6, #1
    d990:	7423      	strb	r3, [r4, #16]

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
    d992:	b136      	cbz	r6, d9a2 <seg_rx_reset+0x86>
		rx->seq_auth = 0U;
    d994:	2300      	movs	r3, #0
    d996:	2200      	movs	r2, #0
    d998:	e9c4 2302 	strd	r2, r3, [r4, #8]
		rx->sub = NULL;
    d99c:	2300      	movs	r3, #0
    d99e:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    d9a0:	6163      	str	r3, [r4, #20]
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
    d9a2:	bd70      	pop	{r4, r5, r6, pc}
    d9a4:	00025968 	.word	0x00025968
    d9a8:	00025880 	.word	0x00025880
    d9ac:	00028e35 	.word	0x00028e35
    d9b0:	000287bb 	.word	0x000287bb
    d9b4:	00028e3f 	.word	0x00028e3f

0000d9b8 <seg_tx_reset>:
{
    d9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9ba:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
    d9bc:	3028      	adds	r0, #40	; 0x28
    d9be:	f017 fd49 	bl	25454 <k_delayed_work_cancel>
	if (!tx->nack_count) {
    d9c2:	7ee2      	ldrb	r2, [r4, #27]
	tx->cb = NULL;
    d9c4:	2500      	movs	r5, #0
	tx->seq_auth = 0U;
    d9c6:	2000      	movs	r0, #0
    d9c8:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    d9ca:	e9c4 5508 	strd	r5, r5, [r4, #32]
	tx->seq_auth = 0U;
    d9ce:	e9c4 0104 	strd	r0, r1, [r4, #16]
	tx->sub = NULL;
    d9d2:	6025      	str	r5, [r4, #0]
	tx->dst = BT_MESH_ADDR_UNASSIGNED;
    d9d4:	8325      	strh	r5, [r4, #24]
	if (!tx->nack_count) {
    d9d6:	2a00      	cmp	r2, #0
    d9d8:	d039      	beq.n	da4e <seg_tx_reset+0x96>
    d9da:	1d26      	adds	r6, r4, #4
		tx->seg[i] = NULL;
    d9dc:	462f      	mov	r7, r5
		if (!tx->seg[i]) {
    d9de:	f856 0b04 	ldr.w	r0, [r6], #4
    d9e2:	b118      	cbz	r0, d9ec <seg_tx_reset+0x34>
		net_buf_unref(tx->seg[i]);
    d9e4:	f00f fec0 	bl	1d768 <net_buf_unref>
		tx->seg[i] = NULL;
    d9e8:	f846 7c04 	str.w	r7, [r6, #-4]
	for (i = 0; i <= tx->seg_n; i++) {
    d9ec:	7ea3      	ldrb	r3, [r4, #26]
    d9ee:	3501      	adds	r5, #1
    d9f0:	f003 031f 	and.w	r3, r3, #31
    d9f4:	42ab      	cmp	r3, r5
    d9f6:	daf2      	bge.n	d9de <seg_tx_reset+0x26>
	tx->nack_count = 0U;
    d9f8:	2500      	movs	r5, #0
    d9fa:	76e5      	strb	r5, [r4, #27]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d9fc:	4c14      	ldr	r4, [pc, #80]	; (da50 <seg_tx_reset+0x98>)
    d9fe:	f3bf 8f5b 	dmb	ish
    da02:	e854 3f00 	ldrex	r3, [r4]
    da06:	f023 0220 	bic.w	r2, r3, #32
    da0a:	e844 2100 	strex	r1, r2, [r4]
    da0e:	2900      	cmp	r1, #0
    da10:	d1f7      	bne.n	da02 <seg_tx_reset+0x4a>
    da12:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    da16:	069b      	lsls	r3, r3, #26
    da18:	d519      	bpl.n	da4e <seg_tx_reset+0x96>
		BT_DBG("Proceding with pending IV Update");
    da1a:	2304      	movs	r3, #4
    da1c:	f04f 0200 	mov.w	r2, #0
    da20:	f363 0207 	bfi	r2, r3, #0, #8
    da24:	490b      	ldr	r1, [pc, #44]	; (da54 <seg_tx_reset+0x9c>)
    da26:	4b0c      	ldr	r3, [pc, #48]	; (da58 <seg_tx_reset+0xa0>)
    da28:	480c      	ldr	r0, [pc, #48]	; (da5c <seg_tx_reset+0xa4>)
    da2a:	1a5b      	subs	r3, r3, r1
    da2c:	08db      	lsrs	r3, r3, #3
    da2e:	490c      	ldr	r1, [pc, #48]	; (da60 <seg_tx_reset+0xa8>)
    da30:	f363 128f 	bfi	r2, r3, #6, #10
    da34:	f013 f8f3 	bl	20c1e <log_1>
		if (bt_mesh_net_iv_update(bt_mesh.iv_index, false)) {
    da38:	4629      	mov	r1, r5
    da3a:	f854 0c08 	ldr.w	r0, [r4, #-8]
    da3e:	f7fe fd3d 	bl	c4bc <bt_mesh_net_iv_update>
    da42:	b120      	cbz	r0, da4e <seg_tx_reset+0x96>
			bt_mesh_net_sec_update(NULL);
    da44:	4628      	mov	r0, r5
}
    da46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_mesh_net_sec_update(NULL);
    da4a:	f015 baf1 	b.w	23030 <bt_mesh_net_sec_update>
}
    da4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da50:	20007068 	.word	0x20007068
    da54:	00025880 	.word	0x00025880
    da58:	00025968 	.word	0x00025968
    da5c:	00028e6d 	.word	0x00028e6d
    da60:	0002872c 	.word	0x0002872c

0000da64 <seg_tx_send_unacked>:
{
    da64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_DBG("resending %u/%u", i, tx->seg_n);
    da68:	4b33      	ldr	r3, [pc, #204]	; (db38 <seg_tx_send_unacked+0xd4>)
    da6a:	4c34      	ldr	r4, [pc, #208]	; (db3c <seg_tx_send_unacked+0xd8>)
    da6c:	f8df b0e4 	ldr.w	fp, [pc, #228]	; db54 <seg_tx_send_unacked+0xf0>
    da70:	1ae4      	subs	r4, r4, r3
{
    da72:	4605      	mov	r5, r0
		BT_DBG("resending %u/%u", i, tx->seg_n);
    da74:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    da78:	f100 0a04 	add.w	sl, r0, #4
	for (i = 0; i <= tx->seg_n; i++) {
    da7c:	2600      	movs	r6, #0
    da7e:	7eab      	ldrb	r3, [r5, #26]
    da80:	f003 031f 	and.w	r3, r3, #31
    da84:	429e      	cmp	r6, r3
    da86:	dd02      	ble.n	da8e <seg_tx_send_unacked+0x2a>
}
    da88:	b003      	add	sp, #12
    da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct net_buf *seg = tx->seg[i];
    da8e:	f85a 9b04 	ldr.w	r9, [sl], #4
		if (!seg) {
    da92:	f1b9 0f00 	cmp.w	r9, #0
    da96:	d011      	beq.n	dabc <seg_tx_send_unacked+0x58>
		if (BT_MESH_ADV(seg)->busy) {
    da98:	f8d9 2014 	ldr.w	r2, [r9, #20]
    da9c:	7a11      	ldrb	r1, [r2, #8]
    da9e:	0749      	lsls	r1, r1, #29
    daa0:	d50e      	bpl.n	dac0 <seg_tx_send_unacked+0x5c>
			BT_DBG("Skipping segment that's still advertising");
    daa2:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    daa6:	f043 0304 	orr.w	r3, r3, #4
    daaa:	f363 0707 	bfi	r7, r3, #0, #8
    daae:	f364 178f 	bfi	r7, r4, #6, #10
    dab2:	463a      	mov	r2, r7
    dab4:	4659      	mov	r1, fp
    dab6:	4822      	ldr	r0, [pc, #136]	; (db40 <seg_tx_send_unacked+0xdc>)
    dab8:	f013 f8b1 	bl	20c1e <log_1>
	for (i = 0; i <= tx->seg_n; i++) {
    dabc:	3601      	adds	r6, #1
    dabe:	e7de      	b.n	da7e <seg_tx_send_unacked+0x1a>
		if (!(BT_MESH_ADV(seg)->seg.attempts--)) {
    dac0:	7a91      	ldrb	r1, [r2, #10]
    dac2:	1e48      	subs	r0, r1, #1
    dac4:	7290      	strb	r0, [r2, #10]
    dac6:	b979      	cbnz	r1, dae8 <seg_tx_send_unacked+0x84>
			BT_ERR("Ran out of retransmit attempts");
    dac8:	2301      	movs	r3, #1
    daca:	f363 0107 	bfi	r1, r3, #0, #8
    dace:	f364 118f 	bfi	r1, r4, #6, #10
    dad2:	481c      	ldr	r0, [pc, #112]	; (db44 <seg_tx_send_unacked+0xe0>)
    dad4:	f013 f896 	bl	20c04 <log_0>
			seg_tx_complete(tx, -ETIMEDOUT);
    dad8:	f06f 013b 	mvn.w	r1, #59	; 0x3b
			seg_tx_complete(tx, -EIO);
    dadc:	4628      	mov	r0, r5
}
    dade:	b003      	add	sp, #12
    dae0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			seg_tx_complete(tx, -EIO);
    dae4:	f015 bada 	b.w	2309c <seg_tx_complete>
		BT_DBG("resending %u/%u", i, tx->seg_n);
    dae8:	f028 023f 	bic.w	r2, r8, #63	; 0x3f
    daec:	f042 0204 	orr.w	r2, r2, #4
    daf0:	f362 0807 	bfi	r8, r2, #0, #8
    daf4:	f364 188f 	bfi	r8, r4, #6, #10
    daf8:	4632      	mov	r2, r6
    dafa:	4659      	mov	r1, fp
    dafc:	4812      	ldr	r0, [pc, #72]	; (db48 <seg_tx_send_unacked+0xe4>)
    dafe:	f8ad 8000 	strh.w	r8, [sp]
    db02:	f013 f8b8 	bl	20c76 <log_3>
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
    db06:	7eaa      	ldrb	r2, [r5, #26]
    db08:	9500      	str	r5, [sp, #0]
    db0a:	4b10      	ldr	r3, [pc, #64]	; (db4c <seg_tx_send_unacked+0xe8>)
    db0c:	6828      	ldr	r0, [r5, #0]
    db0e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    db12:	4649      	mov	r1, r9
    db14:	f7fe fe4c 	bl	c7b0 <bt_mesh_net_resend>
		if (err) {
    db18:	2800      	cmp	r0, #0
    db1a:	d0cf      	beq.n	dabc <seg_tx_send_unacked+0x58>
			BT_ERR("Sending segment failed");
    db1c:	2301      	movs	r3, #1
    db1e:	f04f 0100 	mov.w	r1, #0
    db22:	f363 0107 	bfi	r1, r3, #0, #8
    db26:	f364 118f 	bfi	r1, r4, #6, #10
    db2a:	4809      	ldr	r0, [pc, #36]	; (db50 <seg_tx_send_unacked+0xec>)
    db2c:	f013 f86a 	bl	20c04 <log_0>
			seg_tx_complete(tx, -EIO);
    db30:	f06f 0104 	mvn.w	r1, #4
    db34:	e7d2      	b.n	dadc <seg_tx_send_unacked+0x78>
    db36:	bf00      	nop
    db38:	00025880 	.word	0x00025880
    db3c:	00025968 	.word	0x00025968
    db40:	00028e92 	.word	0x00028e92
    db44:	00028ec0 	.word	0x00028ec0
    db48:	00028edf 	.word	0x00028edf
    db4c:	00025f50 	.word	0x00025f50
    db50:	00028ef3 	.word	0x00028ef3
    db54:	00028739 	.word	0x00028739

0000db58 <ctl_recv>:
{
    db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db5c:	4692      	mov	sl, r2
    db5e:	4698      	mov	r8, r3
	BT_DBG("OpCode 0x%02x len %u", ctl_op, buf->len);
    db60:	2204      	movs	r2, #4
    db62:	f04f 0300 	mov.w	r3, #0
    db66:	f362 0307 	bfi	r3, r2, #0, #8
    db6a:	4cc3      	ldr	r4, [pc, #780]	; (de78 <ctl_recv+0x320>)
    db6c:	4ac3      	ldr	r2, [pc, #780]	; (de7c <ctl_recv+0x324>)
    db6e:	1aa4      	subs	r4, r4, r2
{
    db70:	b08f      	sub	sp, #60	; 0x3c
	BT_DBG("OpCode 0x%02x len %u", ctl_op, buf->len);
    db72:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    db76:	f364 138f 	bfi	r3, r4, #6, #10
	u8_t ctl_op = TRANS_CTL_OP(&hdr);
    db7a:	f001 067f 	and.w	r6, r1, #127	; 0x7f
	BT_DBG("OpCode 0x%02x len %u", ctl_op, buf->len);
    db7e:	f8ad 3000 	strh.w	r3, [sp]
{
    db82:	4605      	mov	r5, r0
	BT_DBG("OpCode 0x%02x len %u", ctl_op, buf->len);
    db84:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    db88:	49bd      	ldr	r1, [pc, #756]	; (de80 <ctl_recv+0x328>)
    db8a:	48be      	ldr	r0, [pc, #760]	; (de84 <ctl_recv+0x32c>)
    db8c:	4632      	mov	r2, r6
    db8e:	f013 f872 	bl	20c76 <log_3>
	switch (ctl_op) {
    db92:	b1ae      	cbz	r6, dbc0 <ctl_recv+0x68>
    db94:	2e0a      	cmp	r6, #10
    db96:	f000 8102 	beq.w	dd9e <ctl_recv+0x246>
	if (!rx->local_match) {
    db9a:	f895 8014 	ldrb.w	r8, [r5, #20]
    db9e:	f018 0840 	ands.w	r8, r8, #64	; 0x40
    dba2:	d01d      	beq.n	dbe0 <ctl_recv+0x88>
		switch (ctl_op) {
    dba4:	1e73      	subs	r3, r6, #1
    dba6:	2b07      	cmp	r3, #7
    dba8:	f200 8192 	bhi.w	ded0 <ctl_recv+0x378>
    dbac:	e8df f013 	tbh	[pc, r3, lsl #1]
    dbb0:	01900145 	.word	0x01900145
    dbb4:	0190014b 	.word	0x0190014b
    dbb8:	01550150 	.word	0x01550150
    dbbc:	015f015a 	.word	0x015f015a
	if (buf->len < 6) {
    dbc0:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    dbc4:	2b05      	cmp	r3, #5
    dbc6:	d80f      	bhi.n	dbe8 <ctl_recv+0x90>
		BT_ERR("Too short ack message");
    dbc8:	f04f 0100 	mov.w	r1, #0
    dbcc:	2301      	movs	r3, #1
    dbce:	f363 0107 	bfi	r1, r3, #0, #8
    dbd2:	48ad      	ldr	r0, [pc, #692]	; (de88 <ctl_recv+0x330>)
    dbd4:	f364 118f 	bfi	r1, r4, #6, #10
		BT_ERR("Too large segment number in ack");
    dbd8:	f013 f814 	bl	20c04 <log_0>
		return -EINVAL;
    dbdc:	f06f 0815 	mvn.w	r8, #21
}
    dbe0:	4640      	mov	r0, r8
    dbe2:	b00f      	add	sp, #60	; 0x3c
    dbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    dbe8:	4650      	mov	r0, sl
    dbea:	f017 f8fc 	bl	24de6 <net_buf_simple_pull_be16>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    dbee:	f995 3014 	ldrsb.w	r3, [r5, #20]
    dbf2:	2b00      	cmp	r3, #0
	seq_zero = (seq_zero >> 2) & 0x1fff;
    dbf4:	f3c0 098c 	ubfx	r9, r0, #2, #13
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    dbf8:	da19      	bge.n	dc2e <ctl_recv+0xd6>
		BT_DBG("Ack for LPN 0x%04x of this Friend", rx->ctx.recv_dst);
    dbfa:	2204      	movs	r2, #4
    dbfc:	f04f 0300 	mov.w	r3, #0
    dc00:	f362 0307 	bfi	r3, r2, #0, #8
    dc04:	f364 138f 	bfi	r3, r4, #6, #10
    dc08:	896a      	ldrh	r2, [r5, #10]
    dc0a:	49a0      	ldr	r1, [pc, #640]	; (de8c <ctl_recv+0x334>)
    dc0c:	48a0      	ldr	r0, [pc, #640]	; (de90 <ctl_recv+0x338>)
    dc0e:	f013 f81a 	bl	20c46 <log_2>
		*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(rx), seq_zero);
    dc12:	7d2b      	ldrb	r3, [r5, #20]
    dc14:	f003 0201 	and.w	r2, r3, #1
    dc18:	4b9e      	ldr	r3, [pc, #632]	; (de94 <ctl_recv+0x33c>)
    dc1a:	681b      	ldr	r3, [r3, #0]
    dc1c:	1a9b      	subs	r3, r3, r2
    dc1e:	0a1a      	lsrs	r2, r3, #8
    dc20:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
    dc24:	e9c8 3200 	strd	r3, r2, [r8]
		return 0;
    dc28:	f04f 0800 	mov.w	r8, #0
    dc2c:	e7d8      	b.n	dbe0 <ctl_recv+0x88>
	obo = seq_zero >> 15;
    dc2e:	f3c0 33cf 	ubfx	r3, r0, #15, #16
	ack = net_buf_simple_pull_be32(buf);
    dc32:	4650      	mov	r0, sl
	obo = seq_zero >> 15;
    dc34:	9302      	str	r3, [sp, #8]
	ack = net_buf_simple_pull_be32(buf);
    dc36:	f017 f8e1 	bl	24dfc <net_buf_simple_pull_be32>
	BT_DBG("OBO %u seq_zero 0x%04x ack 0x%08x", obo, seq_zero, ack);
    dc3a:	2204      	movs	r2, #4
    dc3c:	f04f 0300 	mov.w	r3, #0
    dc40:	f362 0307 	bfi	r3, r2, #0, #8
    dc44:	4a91      	ldr	r2, [pc, #580]	; (de8c <ctl_recv+0x334>)
    dc46:	9207      	str	r2, [sp, #28]
    dc48:	9a02      	ldr	r2, [sp, #8]
    dc4a:	900a      	str	r0, [sp, #40]	; 0x28
    dc4c:	f364 138f 	bfi	r3, r4, #6, #10
    dc50:	e9cd 2908 	strd	r2, r9, [sp, #32]
    dc54:	a907      	add	r1, sp, #28
    dc56:	2204      	movs	r2, #4
	ack = net_buf_simple_pull_be32(buf);
    dc58:	4683      	mov	fp, r0
	BT_DBG("OBO %u seq_zero 0x%04x ack 0x%08x", obo, seq_zero, ack);
    dc5a:	488f      	ldr	r0, [pc, #572]	; (de98 <ctl_recv+0x340>)
    dc5c:	f013 f826 	bl	20cac <log_n>
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    dc60:	f8b5 e008 	ldrh.w	lr, [r5, #8]
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    dc64:	4d8d      	ldr	r5, [pc, #564]	; (de9c <ctl_recv+0x344>)
    dc66:	e9d5 c304 	ldrd	ip, r3, [r5, #16]
		if (obo && tx->nack_count == tx->seg_n + 1) {
    dc6a:	f895 a01a 	ldrb.w	sl, [r5, #26]
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    dc6e:	9305      	str	r3, [sp, #20]
    dc70:	2100      	movs	r1, #0
		if (tx->dst == addr) {
    dc72:	8b2b      	ldrh	r3, [r5, #24]
    dc74:	9303      	str	r3, [sp, #12]
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    dc76:	fa1f f089 	uxth.w	r0, r9
    dc7a:	f3cc 020c 	ubfx	r2, ip, #0, #13
    dc7e:	42b1      	cmp	r1, r6
		if (obo && tx->nack_count == tx->seg_n + 1) {
    dc80:	7eeb      	ldrb	r3, [r5, #27]
    dc82:	9304      	str	r3, [sp, #16]
    dc84:	f00a 0a1f 	and.w	sl, sl, #31
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    dc88:	bf08      	it	eq
    dc8a:	4290      	cmpeq	r0, r2
		if (obo && tx->nack_count == tx->seg_n + 1) {
    dc8c:	f10a 0a01 	add.w	sl, sl, #1
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    dc90:	f040 812c 	bne.w	deec <ctl_recv+0x394>
		if (tx->dst == addr) {
    dc94:	9b03      	ldr	r3, [sp, #12]
    dc96:	459e      	cmp	lr, r3
    dc98:	d009      	beq.n	dcae <ctl_recv+0x156>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    dc9a:	9b02      	ldr	r3, [sp, #8]
    dc9c:	2b00      	cmp	r3, #0
    dc9e:	f000 8125 	beq.w	deec <ctl_recv+0x394>
    dca2:	9b04      	ldr	r3, [sp, #16]
    dca4:	4553      	cmp	r3, sl
    dca6:	f040 8121 	bne.w	deec <ctl_recv+0x394>
			tx->dst = addr;
    dcaa:	f8a5 e018 	strh.w	lr, [r5, #24]
	*seq_auth = tx->seq_auth;
    dcae:	9b05      	ldr	r3, [sp, #20]
    dcb0:	f8c8 c000 	str.w	ip, [r8]
    dcb4:	f8c8 3004 	str.w	r3, [r8, #4]
	if (!ack) {
    dcb8:	f1bb 0f00 	cmp.w	fp, #0
    dcbc:	d10f      	bne.n	dcde <ctl_recv+0x186>
		BT_WARN("SDU canceled");
    dcbe:	2302      	movs	r3, #2
    dcc0:	f04f 0100 	mov.w	r1, #0
    dcc4:	f363 0107 	bfi	r1, r3, #0, #8
    dcc8:	f364 118f 	bfi	r1, r4, #6, #10
    dccc:	4874      	ldr	r0, [pc, #464]	; (dea0 <ctl_recv+0x348>)
    dcce:	f012 ff99 	bl	20c04 <log_0>
		seg_tx_complete(tx, -ECANCELED);
    dcd2:	f06f 0147 	mvn.w	r1, #71	; 0x47
    dcd6:	4871      	ldr	r0, [pc, #452]	; (de9c <ctl_recv+0x344>)
    dcd8:	f015 f9e0 	bl	2309c <seg_tx_complete>
		return 0;
    dcdc:	e7a4      	b.n	dc28 <ctl_recv+0xd0>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    dcde:	7eab      	ldrb	r3, [r5, #26]
	return 32 - __builtin_clz(op);
    dce0:	fabb f28b 	clz	r2, fp
    dce4:	f1c2 021f 	rsb	r2, r2, #31
    dce8:	f003 031f 	and.w	r3, r3, #31
    dcec:	429a      	cmp	r2, r3
    dcee:	d908      	bls.n	dd02 <ctl_recv+0x1aa>
		BT_ERR("Too large segment number in ack");
    dcf0:	f04f 0100 	mov.w	r1, #0
    dcf4:	2301      	movs	r3, #1
    dcf6:	f363 0107 	bfi	r1, r3, #0, #8
    dcfa:	f364 118f 	bfi	r1, r4, #6, #10
    dcfe:	4869      	ldr	r0, [pc, #420]	; (dea4 <ctl_recv+0x34c>)
    dd00:	e76a      	b.n	dbd8 <ctl_recv+0x80>
	k_delayed_work_cancel(&tx->retransmit);
    dd02:	4869      	ldr	r0, [pc, #420]	; (dea8 <ctl_recv+0x350>)
    dd04:	f017 fba6 	bl	25454 <k_delayed_work_cancel>
			tx->seg[bit - 1] = NULL;
    dd08:	f04f 0a00 	mov.w	sl, #0
		ack &= ~BIT(bit - 1);
    dd0c:	f04f 0901 	mov.w	r9, #1
	return __builtin_ffs(op);
    dd10:	f1bb 0f00 	cmp.w	fp, #0
    dd14:	fa9b f6ab 	rbit	r6, fp
    dd18:	fab6 f686 	clz	r6, r6
    dd1c:	bf08      	it	eq
    dd1e:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    dd22:	f116 0801 	adds.w	r8, r6, #1
    dd26:	d105      	bne.n	dd34 <ctl_recv+0x1dc>
	if (tx->nack_count) {
    dd28:	7eeb      	ldrb	r3, [r5, #27]
    dd2a:	b343      	cbz	r3, dd7e <ctl_recv+0x226>
		seg_tx_send_unacked(tx);
    dd2c:	485b      	ldr	r0, [pc, #364]	; (de9c <ctl_recv+0x344>)
    dd2e:	f7ff fe99 	bl	da64 <seg_tx_send_unacked>
    dd32:	e755      	b.n	dbe0 <ctl_recv+0x88>
		if (tx->seg[bit - 1]) {
    dd34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    dd38:	f8d8 3004 	ldr.w	r3, [r8, #4]
    dd3c:	b1d3      	cbz	r3, dd74 <ctl_recv+0x21c>
			BT_DBG("seg %u/%u acked", bit - 1, tx->seg_n);
    dd3e:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
    dd42:	f043 0304 	orr.w	r3, r3, #4
    dd46:	f363 0707 	bfi	r7, r3, #0, #8
    dd4a:	7eab      	ldrb	r3, [r5, #26]
    dd4c:	494f      	ldr	r1, [pc, #316]	; (de8c <ctl_recv+0x334>)
    dd4e:	4857      	ldr	r0, [pc, #348]	; (deac <ctl_recv+0x354>)
    dd50:	f364 178f 	bfi	r7, r4, #6, #10
    dd54:	f003 031f 	and.w	r3, r3, #31
    dd58:	4632      	mov	r2, r6
    dd5a:	f8ad 7000 	strh.w	r7, [sp]
    dd5e:	f012 ff8a 	bl	20c76 <log_3>
			net_buf_unref(tx->seg[bit - 1]);
    dd62:	f8d8 0004 	ldr.w	r0, [r8, #4]
    dd66:	f00f fcff 	bl	1d768 <net_buf_unref>
			tx->nack_count--;
    dd6a:	7eeb      	ldrb	r3, [r5, #27]
			tx->seg[bit - 1] = NULL;
    dd6c:	f8c8 a004 	str.w	sl, [r8, #4]
			tx->nack_count--;
    dd70:	3b01      	subs	r3, #1
    dd72:	76eb      	strb	r3, [r5, #27]
		ack &= ~BIT(bit - 1);
    dd74:	fa09 f606 	lsl.w	r6, r9, r6
    dd78:	ea2b 0b06 	bic.w	fp, fp, r6
    dd7c:	e7c8      	b.n	dd10 <ctl_recv+0x1b8>
		BT_DBG("SDU TX complete");
    dd7e:	2304      	movs	r3, #4
    dd80:	f04f 0200 	mov.w	r2, #0
    dd84:	f363 0207 	bfi	r2, r3, #0, #8
    dd88:	f364 128f 	bfi	r2, r4, #6, #10
    dd8c:	493f      	ldr	r1, [pc, #252]	; (de8c <ctl_recv+0x334>)
    dd8e:	4848      	ldr	r0, [pc, #288]	; (deb0 <ctl_recv+0x358>)
    dd90:	f012 ff45 	bl	20c1e <log_1>
		seg_tx_complete(tx, 0);
    dd94:	4641      	mov	r1, r8
    dd96:	4841      	ldr	r0, [pc, #260]	; (de9c <ctl_recv+0x344>)
    dd98:	f015 f980 	bl	2309c <seg_tx_complete>
    dd9c:	e720      	b.n	dbe0 <ctl_recv+0x88>
	if (buf->len < 3) {
    dd9e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    dda2:	2b02      	cmp	r3, #2
    dda4:	d808      	bhi.n	ddb8 <ctl_recv+0x260>
		BT_ERR("Too short heartbeat message");
    dda6:	f04f 0100 	mov.w	r1, #0
    ddaa:	2301      	movs	r3, #1
    ddac:	f363 0107 	bfi	r1, r3, #0, #8
    ddb0:	f364 118f 	bfi	r1, r4, #6, #10
    ddb4:	483f      	ldr	r0, [pc, #252]	; (deb4 <ctl_recv+0x35c>)
    ddb6:	e70f      	b.n	dbd8 <ctl_recv+0x80>
	if (rx->ctx.recv_dst != hb_sub_dst) {
    ddb8:	4b3f      	ldr	r3, [pc, #252]	; (deb8 <ctl_recv+0x360>)
    ddba:	896a      	ldrh	r2, [r5, #10]
    ddbc:	881b      	ldrh	r3, [r3, #0]
    ddbe:	429a      	cmp	r2, r3
    ddc0:	d00a      	beq.n	ddd8 <ctl_recv+0x280>
		BT_WARN("Ignoring heartbeat to non-subscribed destination");
    ddc2:	2302      	movs	r3, #2
    ddc4:	f04f 0100 	mov.w	r1, #0
    ddc8:	f363 0107 	bfi	r1, r3, #0, #8
    ddcc:	f364 118f 	bfi	r1, r4, #6, #10
    ddd0:	483a      	ldr	r0, [pc, #232]	; (debc <ctl_recv+0x364>)
    ddd2:	f012 ff17 	bl	20c04 <log_0>
    ddd6:	e727      	b.n	dc28 <ctl_recv+0xd0>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    ddd8:	4650      	mov	r0, sl
    ddda:	f016 fff4 	bl	24dc6 <net_buf_simple_pull_u8>
    ddde:	f000 087f 	and.w	r8, r0, #127	; 0x7f
	feat = net_buf_simple_pull_be16(buf);
    dde2:	4650      	mov	r0, sl
    dde4:	f016 ffff 	bl	24de6 <net_buf_simple_pull_be16>
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    dde8:	7b2a      	ldrb	r2, [r5, #12]
	BT_DBG("src 0x%04x TTL %u InitTTL %u (%u hop%s) feat 0x%04x",
    ddea:	2104      	movs	r1, #4
    ddec:	f04f 0300 	mov.w	r3, #0
    ddf0:	f361 0307 	bfi	r3, r1, #0, #8
    ddf4:	4932      	ldr	r1, [pc, #200]	; (dec0 <ctl_recv+0x368>)
    ddf6:	9107      	str	r1, [sp, #28]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    ddf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	BT_DBG("src 0x%04x TTL %u InitTTL %u (%u hop%s) feat 0x%04x",
    ddfc:	8929      	ldrh	r1, [r5, #8]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    ddfe:	eba8 0602 	sub.w	r6, r8, r2
	BT_DBG("src 0x%04x TTL %u InitTTL %u (%u hop%s) feat 0x%04x",
    de02:	e9cd 1208 	strd	r1, r2, [sp, #32]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    de06:	3601      	adds	r6, #1
	BT_DBG("src 0x%04x TTL %u InitTTL %u (%u hop%s) feat 0x%04x",
    de08:	492e      	ldr	r1, [pc, #184]	; (dec4 <ctl_recv+0x36c>)
    de0a:	4a2f      	ldr	r2, [pc, #188]	; (dec8 <ctl_recv+0x370>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    de0c:	b2f6      	uxtb	r6, r6
	BT_DBG("src 0x%04x TTL %u InitTTL %u (%u hop%s) feat 0x%04x",
    de0e:	2e01      	cmp	r6, #1
    de10:	bf08      	it	eq
    de12:	460a      	moveq	r2, r1
    de14:	e9cd 200c 	strd	r2, r0, [sp, #48]	; 0x30
	feat = net_buf_simple_pull_be16(buf);
    de18:	4607      	mov	r7, r0
	BT_DBG("src 0x%04x TTL %u InitTTL %u (%u hop%s) feat 0x%04x",
    de1a:	f364 138f 	bfi	r3, r4, #6, #10
    de1e:	a907      	add	r1, sp, #28
    de20:	2207      	movs	r2, #7
    de22:	482a      	ldr	r0, [pc, #168]	; (decc <ctl_recv+0x374>)
    de24:	e9cd 860a 	strd	r8, r6, [sp, #40]	; 0x28
    de28:	f012 ff40 	bl	20cac <log_n>
	bt_mesh_heartbeat(rx->ctx.addr, rx->ctx.recv_dst, hops, feat);
    de2c:	463b      	mov	r3, r7
    de2e:	4632      	mov	r2, r6
    de30:	8969      	ldrh	r1, [r5, #10]
    de32:	8928      	ldrh	r0, [r5, #8]
    de34:	f003 fd30 	bl	11898 <bt_mesh_heartbeat>
	return 0;
    de38:	e6f6      	b.n	dc28 <ctl_recv+0xd0>
			return bt_mesh_friend_poll(rx, buf);
    de3a:	4651      	mov	r1, sl
    de3c:	4628      	mov	r0, r5
    de3e:	f007 fca3 	bl	15788 <bt_mesh_friend_poll>
			return bt_mesh_friend_sub_rem(rx, buf);
    de42:	4680      	mov	r8, r0
    de44:	e6cc      	b.n	dbe0 <ctl_recv+0x88>
			return bt_mesh_friend_req(rx, buf);
    de46:	4651      	mov	r1, sl
    de48:	4628      	mov	r0, r5
    de4a:	f007 fdd3 	bl	159f4 <bt_mesh_friend_req>
    de4e:	e7f8      	b.n	de42 <ctl_recv+0x2ea>
			return bt_mesh_friend_clear(rx, buf);
    de50:	4651      	mov	r1, sl
    de52:	4628      	mov	r0, r5
    de54:	f007 fb0e 	bl	15474 <bt_mesh_friend_clear>
    de58:	e7f3      	b.n	de42 <ctl_recv+0x2ea>
			return bt_mesh_friend_clear_cfm(rx, buf);
    de5a:	4651      	mov	r1, sl
    de5c:	4628      	mov	r0, r5
    de5e:	f007 fd4d 	bl	158fc <bt_mesh_friend_clear_cfm>
    de62:	e7ee      	b.n	de42 <ctl_recv+0x2ea>
			return bt_mesh_friend_sub_add(rx, buf);
    de64:	4651      	mov	r1, sl
    de66:	4628      	mov	r0, r5
    de68:	f007 fba2 	bl	155b0 <bt_mesh_friend_sub_add>
    de6c:	e7e9      	b.n	de42 <ctl_recv+0x2ea>
			return bt_mesh_friend_sub_rem(rx, buf);
    de6e:	4651      	mov	r1, sl
    de70:	4628      	mov	r0, r5
    de72:	f007 fc17 	bl	156a4 <bt_mesh_friend_sub_rem>
    de76:	e7e4      	b.n	de42 <ctl_recv+0x2ea>
    de78:	00025968 	.word	0x00025968
    de7c:	00025880 	.word	0x00025880
    de80:	0002878c 	.word	0x0002878c
    de84:	00028bc5 	.word	0x00028bc5
    de88:	00028bde 	.word	0x00028bde
    de8c:	00028772 	.word	0x00028772
    de90:	00028bf4 	.word	0x00028bf4
    de94:	20007060 	.word	0x20007060
    de98:	00028c1a 	.word	0x00028c1a
    de9c:	20000050 	.word	0x20000050
    dea0:	00028c40 	.word	0x00028c40
    dea4:	00028c4d 	.word	0x00028c4d
    dea8:	20000078 	.word	0x20000078
    deac:	00028c6d 	.word	0x00028c6d
    deb0:	00028c81 	.word	0x00028c81
    deb4:	00028c95 	.word	0x00028c95
    deb8:	20001e42 	.word	0x20001e42
    debc:	00028cb1 	.word	0x00028cb1
    dec0:	0002877c 	.word	0x0002877c
    dec4:	000290a7 	.word	0x000290a7
    dec8:	00027ada 	.word	0x00027ada
    decc:	00028ce2 	.word	0x00028ce2
	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
    ded0:	2302      	movs	r3, #2
    ded2:	f04f 0200 	mov.w	r2, #0
    ded6:	f363 0207 	bfi	r2, r3, #0, #8
    deda:	f364 128f 	bfi	r2, r4, #6, #10
    dede:	4631      	mov	r1, r6
    dee0:	4807      	ldr	r0, [pc, #28]	; (df00 <ctl_recv+0x3a8>)
    dee2:	f012 fe9c 	bl	20c1e <log_1>
	return -ENOENT;
    dee6:	f06f 0801 	mvn.w	r8, #1
    deea:	e679      	b.n	dbe0 <ctl_recv+0x88>
		BT_WARN("No matching TX context for ack");
    deec:	f04f 0100 	mov.w	r1, #0
    def0:	2302      	movs	r3, #2
    def2:	f363 0107 	bfi	r1, r3, #0, #8
    def6:	f364 118f 	bfi	r1, r4, #6, #10
    defa:	4802      	ldr	r0, [pc, #8]	; (df04 <ctl_recv+0x3ac>)
    defc:	e66c      	b.n	dbd8 <ctl_recv+0x80>
    defe:	bf00      	nop
    df00:	00028d1a 	.word	0x00028d1a
    df04:	00028d37 	.word	0x00028d37

0000df08 <send_seg>:
{
    df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df0c:	4690      	mov	r8, r2
    df0e:	461e      	mov	r6, r3
	BT_DBG("src 0x%04x dst 0x%04x app_idx 0x%04x aszmic %u sdu_len %u",
    df10:	2204      	movs	r2, #4
    df12:	f04f 0300 	mov.w	r3, #0
    df16:	f362 0307 	bfi	r3, r2, #0, #8
    df1a:	4ca8      	ldr	r4, [pc, #672]	; (e1bc <send_seg+0x2b4>)
    df1c:	4aa8      	ldr	r2, [pc, #672]	; (e1c0 <send_seg+0x2b8>)
{
    df1e:	b08f      	sub	sp, #60	; 0x3c
	BT_DBG("src 0x%04x dst 0x%04x app_idx 0x%04x aszmic %u sdu_len %u",
    df20:	1aa4      	subs	r4, r4, r2
    df22:	4aa8      	ldr	r2, [pc, #672]	; (e1c4 <send_seg+0x2bc>)
    df24:	9208      	str	r2, [sp, #32]
    df26:	8902      	ldrh	r2, [r0, #8]
    df28:	9209      	str	r2, [sp, #36]	; 0x24
    df2a:	6842      	ldr	r2, [r0, #4]
{
    df2c:	460f      	mov	r7, r1
	BT_DBG("src 0x%04x dst 0x%04x app_idx 0x%04x aszmic %u sdu_len %u",
    df2e:	8891      	ldrh	r1, [r2, #4]
    df30:	8852      	ldrh	r2, [r2, #2]
    df32:	920b      	str	r2, [sp, #44]	; 0x2c
    df34:	7ac2      	ldrb	r2, [r0, #11]
    df36:	910a      	str	r1, [sp, #40]	; 0x28
    df38:	f3c2 0240 	ubfx	r2, r2, #1, #1
    df3c:	920c      	str	r2, [sp, #48]	; 0x30
    df3e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    df42:	88ba      	ldrh	r2, [r7, #4]
    df44:	920d      	str	r2, [sp, #52]	; 0x34
    df46:	a908      	add	r1, sp, #32
{
    df48:	4605      	mov	r5, r0
	BT_DBG("src 0x%04x dst 0x%04x app_idx 0x%04x aszmic %u sdu_len %u",
    df4a:	f364 138f 	bfi	r3, r4, #6, #10
    df4e:	2206      	movs	r2, #6
    df50:	489d      	ldr	r0, [pc, #628]	; (e1c8 <send_seg+0x2c0>)
    df52:	f012 feab 	bl	20cac <log_n>
	if (sdu->len < 1) {
    df56:	88b9      	ldrh	r1, [r7, #4]
    df58:	b969      	cbnz	r1, df76 <send_seg+0x6e>
		BT_ERR("Zero-length SDU not allowed");
    df5a:	2301      	movs	r3, #1
    df5c:	f363 0107 	bfi	r1, r3, #0, #8
    df60:	f364 118f 	bfi	r1, r4, #6, #10
    df64:	4899      	ldr	r0, [pc, #612]	; (e1cc <send_seg+0x2c4>)
    df66:	f012 fe4d 	bl	20c04 <log_0>
		return -EINVAL;
    df6a:	f06f 0615 	mvn.w	r6, #21
}
    df6e:	4630      	mov	r0, r6
    df70:	b00f      	add	sp, #60	; 0x3c
    df72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (sdu->len > BT_MESH_TX_SDU_MAX) {
    df76:	2924      	cmp	r1, #36	; 0x24
    df78:	d87a      	bhi.n	e070 <send_seg+0x168>
		if (!seg_tx[i].nack_count) {
    df7a:	4b95      	ldr	r3, [pc, #596]	; (e1d0 <send_seg+0x2c8>)
    df7c:	7eda      	ldrb	r2, [r3, #27]
    df7e:	4699      	mov	r9, r3
    df80:	2a00      	cmp	r2, #0
    df82:	f040 8082 	bne.w	e08a <send_seg+0x182>
	if (net_tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    df86:	686a      	ldr	r2, [r5, #4]
    df88:	8850      	ldrh	r0, [r2, #2]
    df8a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    df8e:	4298      	cmp	r0, r3
		seg_hdr = SEG_HDR(1, net_tx->aid);
    df90:	bf1d      	ittte	ne
    df92:	7aeb      	ldrbne	r3, [r5, #11]
    df94:	089b      	lsrne	r3, r3, #2
    df96:	f043 03c0 	orrne.w	r3, r3, #192	; 0xc0
		seg_hdr = SEG_HDR(0, 0);
    df9a:	2380      	moveq	r3, #128	; 0x80
    df9c:	9304      	str	r3, [sp, #16]
	tx->dst = net_tx->ctx->addr;
    df9e:	8893      	ldrh	r3, [r2, #4]
    dfa0:	f8a9 3018 	strh.w	r3, [r9, #24]
	tx->seg_n = (sdu->len - 1) / 12;
    dfa4:	3901      	subs	r1, #1
    dfa6:	230c      	movs	r3, #12
    dfa8:	fbb1 f1f3 	udiv	r1, r1, r3
    dfac:	f899 301a 	ldrb.w	r3, [r9, #26]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    dfb0:	4a88      	ldr	r2, [pc, #544]	; (e1d4 <send_seg+0x2cc>)
	tx->seg_n = (sdu->len - 1) / 12;
    dfb2:	f361 0304 	bfi	r3, r1, #0, #5
	tx->nack_count = tx->seg_n + 1;
    dfb6:	3101      	adds	r1, #1
	tx->seg_n = (sdu->len - 1) / 12;
    dfb8:	f889 301a 	strb.w	r3, [r9, #26]
	tx->nack_count = tx->seg_n + 1;
    dfbc:	f889 101b 	strb.w	r1, [r9, #27]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    dfc0:	6813      	ldr	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dfc2:	f3bf 8f5b 	dmb	ish
    dfc6:	6891      	ldr	r1, [r2, #8]
    dfc8:	f3bf 8f5b 	dmb	ish
    dfcc:	f3c1 0180 	ubfx	r1, r1, #2, #1
    dfd0:	6852      	ldr	r2, [r2, #4]
    dfd2:	1a5b      	subs	r3, r3, r1
    dfd4:	0a19      	lsrs	r1, r3, #8
    dfd6:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
	tx->sub = net_tx->sub;
    dfda:	682a      	ldr	r2, [r5, #0]
    dfdc:	f8c9 2000 	str.w	r2, [r9]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    dfe0:	e9c9 3104 	strd	r3, r1, [r9, #16]
	tx->new_key = net_tx->sub->kr_flag;
    dfe4:	7f92      	ldrb	r2, [r2, #30]
    dfe6:	f899 301a 	ldrb.w	r3, [r9, #26]
    dfea:	f362 1345 	bfi	r3, r2, #5, #1
    dfee:	f889 301a 	strb.w	r3, [r9, #26]
	tx->cb_data = cb_data;
    dff2:	e9c9 8608 	strd	r8, r6, [r9, #32]
	if (net_tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    dff6:	686b      	ldr	r3, [r5, #4]
    dff8:	7a5b      	ldrb	r3, [r3, #9]
    dffa:	2bff      	cmp	r3, #255	; 0xff
    dffc:	d152      	bne.n	e0a4 <send_seg+0x19c>
		tx->ttl = bt_mesh_default_ttl_get();
    dffe:	f004 f877 	bl	120f0 <bt_mesh_default_ttl_get>
    e002:	f889 001c 	strb.w	r0, [r9, #28]
	seq_zero = tx->seq_auth & 0x1fff;
    e006:	f8b9 6010 	ldrh.w	r6, [r9, #16]
	BT_DBG("SeqZero 0x%04x", seq_zero);
    e00a:	496e      	ldr	r1, [pc, #440]	; (e1c4 <send_seg+0x2bc>)
    e00c:	4872      	ldr	r0, [pc, #456]	; (e1d8 <send_seg+0x2d0>)
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
    e00e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; e1d0 <send_seg+0x2c8>
	BT_DBG("SeqZero 0x%04x", seq_zero);
    e012:	2204      	movs	r2, #4
    e014:	f04f 0300 	mov.w	r3, #0
	seq_zero = tx->seq_auth & 0x1fff;
    e018:	f3c6 060c 	ubfx	r6, r6, #0, #13
	BT_DBG("SeqZero 0x%04x", seq_zero);
    e01c:	f362 0307 	bfi	r3, r2, #0, #8
    e020:	f364 138f 	bfi	r3, r4, #6, #10
    e024:	4632      	mov	r2, r6
    e026:	f012 fe0e 	bl	20c46 <log_2>
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    e02a:	09b3      	lsrs	r3, r6, #6
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    e02c:	00b6      	lsls	r6, r6, #2
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    e02e:	9305      	str	r3, [sp, #20]
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    e030:	b273      	sxtb	r3, r6
    e032:	9306      	str	r3, [sp, #24]
	for (seg_o = 0U; sdu->len; seg_o++) {
    e034:	2300      	movs	r3, #0
    e036:	9303      	str	r3, [sp, #12]
    e038:	88be      	ldrh	r6, [r7, #4]
    e03a:	f89d a00c 	ldrb.w	sl, [sp, #12]
    e03e:	2e00      	cmp	r6, #0
    e040:	d095      	beq.n	df6e <send_seg+0x66>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, net_tx->xmit,
    e042:	2200      	movs	r2, #0
    e044:	7aa9      	ldrb	r1, [r5, #10]
    e046:	2001      	movs	r0, #1
    e048:	f7fd f926 	bl	b298 <bt_mesh_adv_create>
		if (!seg) {
    e04c:	4681      	mov	r9, r0
    e04e:	bb60      	cbnz	r0, e0aa <send_seg+0x1a2>
			BT_ERR("Out of segment buffers");
    e050:	2301      	movs	r3, #1
    e052:	f04f 0100 	mov.w	r1, #0
    e056:	f363 0107 	bfi	r1, r3, #0, #8
    e05a:	f364 118f 	bfi	r1, r4, #6, #10
    e05e:	485f      	ldr	r0, [pc, #380]	; (e1dc <send_seg+0x2d4>)
    e060:	f012 fdd0 	bl	20c04 <log_0>
			seg_tx_reset(tx);
    e064:	485a      	ldr	r0, [pc, #360]	; (e1d0 <send_seg+0x2c8>)
    e066:	f7ff fca7 	bl	d9b8 <seg_tx_reset>
			return -ENOBUFS;
    e06a:	f06f 0636 	mvn.w	r6, #54	; 0x36
    e06e:	e77e      	b.n	df6e <send_seg+0x66>
		BT_ERR("Not enough segment buffers for length %u", sdu->len);
    e070:	2301      	movs	r3, #1
    e072:	f04f 0200 	mov.w	r2, #0
    e076:	f363 0207 	bfi	r2, r3, #0, #8
    e07a:	f364 128f 	bfi	r2, r4, #6, #10
    e07e:	4858      	ldr	r0, [pc, #352]	; (e1e0 <send_seg+0x2d8>)
    e080:	f012 fdcd 	bl	20c1e <log_1>
		return -EMSGSIZE;
    e084:	f06f 0623 	mvn.w	r6, #35	; 0x23
    e088:	e771      	b.n	df6e <send_seg+0x66>
		BT_ERR("No multi-segment message contexts available");
    e08a:	2301      	movs	r3, #1
    e08c:	f04f 0100 	mov.w	r1, #0
    e090:	f363 0107 	bfi	r1, r3, #0, #8
    e094:	f364 118f 	bfi	r1, r4, #6, #10
    e098:	4852      	ldr	r0, [pc, #328]	; (e1e4 <send_seg+0x2dc>)
    e09a:	f012 fdb3 	bl	20c04 <log_0>
		return -EBUSY;
    e09e:	f06f 060f 	mvn.w	r6, #15
    e0a2:	e764      	b.n	df6e <send_seg+0x66>
		tx->ttl = net_tx->ctx->send_ttl;
    e0a4:	f889 301c 	strb.w	r3, [r9, #28]
    e0a8:	e7ad      	b.n	e006 <send_seg+0xfe>
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
    e0aa:	6943      	ldr	r3, [r0, #20]
    e0ac:	2204      	movs	r2, #4
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
    e0ae:	f100 0608 	add.w	r6, r0, #8
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
    e0b2:	729a      	strb	r2, [r3, #10]
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
    e0b4:	2109      	movs	r1, #9
    e0b6:	4630      	mov	r0, r6
    e0b8:	f016 fda3 	bl	24c02 <net_buf_simple_reserve>
		net_buf_add_u8(seg, seg_hdr);
    e0bc:	9904      	ldr	r1, [sp, #16]
    e0be:	4630      	mov	r0, r6
    e0c0:	f016 fe13 	bl	24cea <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    e0c4:	7ae9      	ldrb	r1, [r5, #11]
    e0c6:	9b05      	ldr	r3, [sp, #20]
    e0c8:	f3c1 0140 	ubfx	r1, r1, #1, #1
    e0cc:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
    e0d0:	4630      	mov	r0, r6
    e0d2:	f016 fe0a 	bl	24cea <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    e0d6:	9b06      	ldr	r3, [sp, #24]
    e0d8:	ea43 01da 	orr.w	r1, r3, sl, lsr #3
    e0dc:	b2c9      	uxtb	r1, r1
    e0de:	4630      	mov	r0, r6
    e0e0:	f016 fe03 	bl	24cea <net_buf_simple_add_u8>
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
    e0e4:	f898 101a 	ldrb.w	r1, [r8, #26]
    e0e8:	f3c1 0104 	ubfx	r1, r1, #0, #5
    e0ec:	ea41 114a 	orr.w	r1, r1, sl, lsl #5
    e0f0:	b2c9      	uxtb	r1, r1
    e0f2:	4630      	mov	r0, r6
    e0f4:	f016 fdf9 	bl	24cea <net_buf_simple_add_u8>
		len = MIN(sdu->len, 12);
    e0f8:	88bb      	ldrh	r3, [r7, #4]
		net_buf_add_mem(seg, sdu->data, len);
    e0fa:	6839      	ldr	r1, [r7, #0]
    e0fc:	2b0c      	cmp	r3, #12
    e0fe:	bf28      	it	cs
    e100:	230c      	movcs	r3, #12
    e102:	461a      	mov	r2, r3
    e104:	4630      	mov	r0, r6
    e106:	9307      	str	r3, [sp, #28]
    e108:	f016 fde6 	bl	24cd8 <net_buf_simple_add_mem>
		net_buf_simple_pull(sdu, len);
    e10c:	9b07      	ldr	r3, [sp, #28]
    e10e:	4638      	mov	r0, r7
    e110:	4619      	mov	r1, r3
    e112:	f016 fe48 	bl	24da6 <net_buf_simple_pull>
		tx->seg[seg_o] = net_buf_ref(seg);
    e116:	4648      	mov	r0, r9
    e118:	f016 fdd4 	bl	24cc4 <net_buf_ref>
			if (seg_o == tx->seg_n) {
    e11c:	f898 101a 	ldrb.w	r1, [r8, #26]
			if (bt_mesh_friend_enqueue_tx(net_tx, type,
    e120:	4a31      	ldr	r2, [pc, #196]	; (e1e8 <send_seg+0x2e0>)
		tx->seg[seg_o] = net_buf_ref(seg);
    e122:	eb08 038a 	add.w	r3, r8, sl, lsl #2
			if (seg_o == tx->seg_n) {
    e126:	f001 011f 	and.w	r1, r1, #31
		tx->seg[seg_o] = net_buf_ref(seg);
    e12a:	6058      	str	r0, [r3, #4]
			if (bt_mesh_friend_enqueue_tx(net_tx, type,
    e12c:	4551      	cmp	r1, sl
    e12e:	bf0c      	ite	eq
    e130:	2102      	moveq	r1, #2
    e132:	2101      	movne	r1, #1
    e134:	4633      	mov	r3, r6
    e136:	4628      	mov	r0, r5
    e138:	f007 ff2a 	bl	15f90 <bt_mesh_friend_enqueue_tx>
    e13c:	b148      	cbz	r0, e152 <send_seg+0x24a>
			    BT_MESH_ADDR_IS_UNICAST(net_tx->ctx->addr)) {
    e13e:	686b      	ldr	r3, [r5, #4]
						      &seg->b) &&
    e140:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    e144:	2b00      	cmp	r3, #0
    e146:	dd04      	ble.n	e152 <send_seg+0x24a>
				net_buf_unref(seg);
    e148:	4648      	mov	r0, r9
    e14a:	f00f fb0d 	bl	1d768 <net_buf_unref>
				return 0;
    e14e:	2600      	movs	r6, #0
    e150:	e70d      	b.n	df6e <send_seg+0x66>
		BT_DBG("Sending %u/%u", seg_o, tx->seg_n);
    e152:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
    e156:	f043 0304 	orr.w	r3, r3, #4
    e15a:	f363 0b07 	bfi	fp, r3, #0, #8
    e15e:	f898 301a 	ldrb.w	r3, [r8, #26]
    e162:	f89d 200c 	ldrb.w	r2, [sp, #12]
    e166:	4917      	ldr	r1, [pc, #92]	; (e1c4 <send_seg+0x2bc>)
    e168:	4820      	ldr	r0, [pc, #128]	; (e1ec <send_seg+0x2e4>)
    e16a:	f364 1b8f 	bfi	fp, r4, #6, #10
    e16e:	f003 031f 	and.w	r3, r3, #31
    e172:	f8ad b000 	strh.w	fp, [sp]
    e176:	f012 fd7e 	bl	20c76 <log_3>
		err = bt_mesh_net_send(net_tx, seg,
    e17a:	491d      	ldr	r1, [pc, #116]	; (e1f0 <send_seg+0x2e8>)
    e17c:	4a1d      	ldr	r2, [pc, #116]	; (e1f4 <send_seg+0x2ec>)
    e17e:	4643      	mov	r3, r8
    e180:	f1ba 0f00 	cmp.w	sl, #0
    e184:	bf18      	it	ne
    e186:	460a      	movne	r2, r1
    e188:	4628      	mov	r0, r5
    e18a:	4649      	mov	r1, r9
    e18c:	f7fe fc7c 	bl	ca88 <bt_mesh_net_send>
		if (err) {
    e190:	9b03      	ldr	r3, [sp, #12]
    e192:	3301      	adds	r3, #1
    e194:	9303      	str	r3, [sp, #12]
    e196:	4606      	mov	r6, r0
    e198:	2800      	cmp	r0, #0
    e19a:	f43f af4d 	beq.w	e038 <send_seg+0x130>
			BT_ERR("Sending segment failed");
    e19e:	2301      	movs	r3, #1
    e1a0:	f04f 0100 	mov.w	r1, #0
    e1a4:	f363 0107 	bfi	r1, r3, #0, #8
    e1a8:	f364 118f 	bfi	r1, r4, #6, #10
    e1ac:	4812      	ldr	r0, [pc, #72]	; (e1f8 <send_seg+0x2f0>)
    e1ae:	f012 fd29 	bl	20c04 <log_0>
			seg_tx_reset(tx);
    e1b2:	4807      	ldr	r0, [pc, #28]	; (e1d0 <send_seg+0x2c8>)
    e1b4:	f7ff fc00 	bl	d9b8 <seg_tx_reset>
			return err;
    e1b8:	e6d9      	b.n	df6e <send_seg+0x66>
    e1ba:	bf00      	nop
    e1bc:	00025968 	.word	0x00025968
    e1c0:	00025880 	.word	0x00025880
    e1c4:	0002874d 	.word	0x0002874d
    e1c8:	00028f59 	.word	0x00028f59
    e1cc:	00028f97 	.word	0x00028f97
    e1d0:	20000050 	.word	0x20000050
    e1d4:	20007060 	.word	0x20007060
    e1d8:	00029008 	.word	0x00029008
    e1dc:	0002901b 	.word	0x0002901b
    e1e0:	00028fb3 	.word	0x00028fb3
    e1e4:	00028fdc 	.word	0x00028fdc
    e1e8:	20000060 	.word	0x20000060
    e1ec:	00029032 	.word	0x00029032
    e1f0:	00025f50 	.word	0x00025f50
    e1f4:	00025f48 	.word	0x00025f48
    e1f8:	00028ef3 	.word	0x00028ef3

0000e1fc <seg_send_start>:
{
    e1fc:	4613      	mov	r3, r2
	if (err) {
    e1fe:	b151      	cbz	r1, e216 <seg_send_start+0x1a>
		k_delayed_work_submit(&tx->retransmit,
    e200:	7f12      	ldrb	r2, [r2, #28]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    e202:	2032      	movs	r0, #50	; 0x32
    e204:	f44f 71c8 	mov.w	r1, #400	; 0x190
    e208:	fb00 1202 	mla	r2, r0, r2, r1
    e20c:	f103 0128 	add.w	r1, r3, #40	; 0x28
    e210:	4801      	ldr	r0, [pc, #4]	; (e218 <seg_send_start+0x1c>)
    e212:	f010 bdcd 	b.w	1edb0 <k_delayed_work_submit_to_queue>
}
    e216:	4770      	bx	lr
    e218:	20001d2c 	.word	0x20001d2c

0000e21c <seg_sent>:
	k_delayed_work_submit(&tx->retransmit,
    e21c:	7f0a      	ldrb	r2, [r1, #28]
    e21e:	2032      	movs	r0, #50	; 0x32
    e220:	f44f 73c8 	mov.w	r3, #400	; 0x190
    e224:	fb00 3202 	mla	r2, r0, r2, r3
    e228:	3128      	adds	r1, #40	; 0x28
    e22a:	4801      	ldr	r0, [pc, #4]	; (e230 <seg_sent+0x14>)
    e22c:	f010 bdc0 	b.w	1edb0 <k_delayed_work_submit_to_queue>
    e230:	20001d2c 	.word	0x20001d2c

0000e234 <bt_mesh_set_hb_sub_dst>:
	hb_sub_dst = addr;
    e234:	4b01      	ldr	r3, [pc, #4]	; (e23c <bt_mesh_set_hb_sub_dst+0x8>)
    e236:	8018      	strh	r0, [r3, #0]
}
    e238:	4770      	bx	lr
    e23a:	bf00      	nop
    e23c:	20001e42 	.word	0x20001e42

0000e240 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    e240:	4b02      	ldr	r3, [pc, #8]	; (e24c <bt_mesh_tx_in_progress+0xc>)
    e242:	7ed8      	ldrb	r0, [r3, #27]
}
    e244:	3000      	adds	r0, #0
    e246:	bf18      	it	ne
    e248:	2001      	movne	r0, #1
    e24a:	4770      	bx	lr
    e24c:	20000050 	.word	0x20000050

0000e250 <bt_mesh_app_key_find>:
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    e250:	4b0f      	ldr	r3, [pc, #60]	; (e290 <bt_mesh_app_key_find+0x40>)
    e252:	f8b3 1144 	ldrh.w	r1, [r3, #324]	; 0x144
    e256:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e25a:	4291      	cmp	r1, r2
    e25c:	461a      	mov	r2, r3
    e25e:	d003      	beq.n	e268 <bt_mesh_app_key_find+0x18>
    e260:	f8b3 1146 	ldrh.w	r1, [r3, #326]	; 0x146
    e264:	4281      	cmp	r1, r0
    e266:	d00d      	beq.n	e284 <bt_mesh_app_key_find+0x34>
    e268:	f8b2 116c 	ldrh.w	r1, [r2, #364]	; 0x16c
    e26c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e270:	4299      	cmp	r1, r3
    e272:	d00a      	beq.n	e28a <bt_mesh_app_key_find+0x3a>
    e274:	f8b2 216e 	ldrh.w	r2, [r2, #366]	; 0x16e
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    e278:	4b06      	ldr	r3, [pc, #24]	; (e294 <bt_mesh_app_key_find+0x44>)
    e27a:	4282      	cmp	r2, r0
    e27c:	bf0c      	ite	eq
    e27e:	4618      	moveq	r0, r3
    e280:	2000      	movne	r0, #0
    e282:	4770      	bx	lr
    e284:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    e288:	4770      	bx	lr
	return NULL;
    e28a:	2000      	movs	r0, #0
}
    e28c:	4770      	bx	lr
    e28e:	bf00      	nop
    e290:	20007060 	.word	0x20007060
    e294:	200071cc 	.word	0x200071cc

0000e298 <bt_mesh_trans_send>:
{
    e298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e29c:	4604      	mov	r4, r0
    e29e:	b08a      	sub	sp, #40	; 0x28
	if (net_buf_simple_tailroom(msg) < 4) {
    e2a0:	4608      	mov	r0, r1
{
    e2a2:	4698      	mov	r8, r3
    e2a4:	460d      	mov	r5, r1
    e2a6:	4617      	mov	r7, r2
	if (net_buf_simple_tailroom(msg) < 4) {
    e2a8:	f016 fdb5 	bl	24e16 <net_buf_simple_tailroom>
    e2ac:	4e5f      	ldr	r6, [pc, #380]	; (e42c <bt_mesh_trans_send+0x194>)
    e2ae:	4b60      	ldr	r3, [pc, #384]	; (e430 <bt_mesh_trans_send+0x198>)
    e2b0:	2803      	cmp	r0, #3
    e2b2:	eba6 0603 	sub.w	r6, r6, r3
    e2b6:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    e2ba:	d80c      	bhi.n	e2d6 <bt_mesh_trans_send+0x3e>
		BT_ERR("Insufficient tailroom for Transport MIC");
    e2bc:	f04f 0100 	mov.w	r1, #0
    e2c0:	2301      	movs	r3, #1
    e2c2:	f363 0107 	bfi	r1, r3, #0, #8
    e2c6:	f366 118f 	bfi	r1, r6, #6, #10
    e2ca:	485a      	ldr	r0, [pc, #360]	; (e434 <bt_mesh_trans_send+0x19c>)
    e2cc:	f012 fc9a 	bl	20c04 <log_0>
			return -EINVAL;
    e2d0:	f06f 0015 	mvn.w	r0, #21
    e2d4:	e08a      	b.n	e3ec <bt_mesh_trans_send+0x154>
	if (msg->len > 11) {
    e2d6:	88ab      	ldrh	r3, [r5, #4]
    e2d8:	6862      	ldr	r2, [r4, #4]
	BT_DBG("net_idx 0x%04x app_idx 0x%04x dst 0x%04x", tx->sub->net_idx,
    e2da:	f8df a168 	ldr.w	sl, [pc, #360]	; e444 <bt_mesh_trans_send+0x1ac>
    e2de:	4856      	ldr	r0, [pc, #344]	; (e438 <bt_mesh_trans_send+0x1a0>)
	if (msg->len > 11) {
    e2e0:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = 1;
    e2e2:	bf82      	ittt	hi
    e2e4:	7a13      	ldrbhi	r3, [r2, #8]
    e2e6:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
    e2ea:	7213      	strbhi	r3, [r2, #8]
	BT_DBG("net_idx 0x%04x app_idx 0x%04x dst 0x%04x", tx->sub->net_idx,
    e2ec:	2104      	movs	r1, #4
    e2ee:	f04f 0300 	mov.w	r3, #0
    e2f2:	f361 0307 	bfi	r3, r1, #0, #8
    e2f6:	6821      	ldr	r1, [r4, #0]
    e2f8:	f8cd a018 	str.w	sl, [sp, #24]
    e2fc:	8b89      	ldrh	r1, [r1, #28]
    e2fe:	9107      	str	r1, [sp, #28]
    e300:	8851      	ldrh	r1, [r2, #2]
    e302:	8892      	ldrh	r2, [r2, #4]
    e304:	9108      	str	r1, [sp, #32]
    e306:	f366 138f 	bfi	r3, r6, #6, #10
    e30a:	9209      	str	r2, [sp, #36]	; 0x24
    e30c:	a906      	add	r1, sp, #24
    e30e:	2204      	movs	r2, #4
    e310:	f012 fccc 	bl	20cac <log_n>
	BT_DBG("len %u: %s", msg->len, bt_hex(msg->data, msg->len));
    e314:	f04f 0900 	mov.w	r9, #0
    e318:	2304      	movs	r3, #4
    e31a:	f363 0907 	bfi	r9, r3, #0, #8
    e31e:	f366 198f 	bfi	r9, r6, #6, #10
    e322:	88ae      	ldrh	r6, [r5, #4]
    e324:	6828      	ldr	r0, [r5, #0]
    e326:	4631      	mov	r1, r6
    e328:	f7f7 fcf0 	bl	5d0c <bt_hex_real>
    e32c:	f7f5 fb66 	bl	39fc <log_strdup>
    e330:	f8ad 9000 	strh.w	r9, [sp]
    e334:	4603      	mov	r3, r0
    e336:	4632      	mov	r2, r6
    e338:	4840      	ldr	r0, [pc, #256]	; (e43c <bt_mesh_trans_send+0x1a4>)
    e33a:	4651      	mov	r1, sl
    e33c:	f012 fc9b 	bl	20c76 <log_3>
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    e340:	f8d4 9004 	ldr.w	r9, [r4, #4]
    e344:	f8b9 0002 	ldrh.w	r0, [r9, #2]
    e348:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    e34c:	4298      	cmp	r0, r3
    e34e:	d150      	bne.n	e3f2 <bt_mesh_trans_send+0x15a>
		tx->aid = 0U;
    e350:	7ae3      	ldrb	r3, [r4, #11]
		key = bt_mesh.dev_key;
    e352:	4e3b      	ldr	r6, [pc, #236]	; (e440 <bt_mesh_trans_send+0x1a8>)
		tx->aid = 0U;
    e354:	f36f 0387 	bfc	r3, #2, #6
    e358:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    e35a:	f999 3008 	ldrsb.w	r3, [r9, #8]
    e35e:	2b00      	cmp	r3, #0
    e360:	da5d      	bge.n	e41e <bt_mesh_trans_send+0x186>
    e362:	4628      	mov	r0, r5
    e364:	f016 fd57 	bl	24e16 <net_buf_simple_tailroom>
    e368:	2807      	cmp	r0, #7
    e36a:	bf94      	ite	ls
    e36c:	2000      	movls	r0, #0
    e36e:	2001      	movhi	r0, #1
    e370:	7ae3      	ldrb	r3, [r4, #11]
    e372:	f360 0341 	bfi	r3, r0, #1, #1
    e376:	72e3      	strb	r3, [r4, #11]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    e378:	6863      	ldr	r3, [r4, #4]
    e37a:	8898      	ldrh	r0, [r3, #4]
    e37c:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    e380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e384:	d24d      	bcs.n	e422 <bt_mesh_trans_send+0x18a>
		ad = bt_mesh_label_uuid_get(tx->ctx->addr);
    e386:	f003 ff55 	bl	12234 <bt_mesh_label_uuid_get>
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    e38a:	6863      	ldr	r3, [r4, #4]
    e38c:	f8df c0b8 	ldr.w	ip, [pc, #184]	; e448 <bt_mesh_trans_send+0x1b0>
    e390:	8859      	ldrh	r1, [r3, #2]
    e392:	f8b3 9004 	ldrh.w	r9, [r3, #4]
				  tx->aszmic, msg, ad, tx->src,
    e396:	7ae2      	ldrb	r2, [r4, #11]
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    e398:	f8b4 e008 	ldrh.w	lr, [r4, #8]
				  BT_MESH_NET_IVI_TX);
    e39c:	e9dc 3a00 	ldrd	r3, sl, [ip]
    e3a0:	f3bf 8f5b 	dmb	ish
    e3a4:	f8dc c008 	ldr.w	ip, [ip, #8]
    e3a8:	f3bf 8f5b 	dmb	ish
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    e3ac:	9000      	str	r0, [sp, #0]
    e3ae:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    e3b2:	1a08      	subs	r0, r1, r0
				  BT_MESH_NET_IVI_TX);
    e3b4:	f3cc 0c80 	ubfx	ip, ip, #2, #1
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    e3b8:	4241      	negs	r1, r0
    e3ba:	eba3 030c 	sub.w	r3, r3, ip
    e3be:	4141      	adcs	r1, r0
    e3c0:	e9cd a303 	strd	sl, r3, [sp, #12]
    e3c4:	e9cd e901 	strd	lr, r9, [sp, #4]
    e3c8:	462b      	mov	r3, r5
    e3ca:	f3c2 0240 	ubfx	r2, r2, #1, #1
    e3ce:	4630      	mov	r0, r6
    e3d0:	f015 fa30 	bl	23834 <bt_mesh_app_encrypt>
	if (err) {
    e3d4:	b950      	cbnz	r0, e3ec <bt_mesh_trans_send+0x154>
	if (tx->ctx->send_rel) {
    e3d6:	6863      	ldr	r3, [r4, #4]
    e3d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
    e3dc:	2b00      	cmp	r3, #0
		err = send_seg(tx, msg, cb, cb_data);
    e3de:	463a      	mov	r2, r7
    e3e0:	4643      	mov	r3, r8
    e3e2:	4629      	mov	r1, r5
    e3e4:	4620      	mov	r0, r4
	if (tx->ctx->send_rel) {
    e3e6:	da1e      	bge.n	e426 <bt_mesh_trans_send+0x18e>
		err = send_seg(tx, msg, cb, cb_data);
    e3e8:	f7ff fd8e 	bl	df08 <send_seg>
}
    e3ec:	b00a      	add	sp, #40	; 0x28
    e3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		app_key = bt_mesh_app_key_find(tx->ctx->app_idx);
    e3f2:	f7ff ff2d 	bl	e250 <bt_mesh_app_key_find>
		if (!app_key) {
    e3f6:	2800      	cmp	r0, #0
    e3f8:	f43f af6a 	beq.w	e2d0 <bt_mesh_trans_send+0x38>
		if (tx->sub->kr_phase == BT_MESH_KR_PHASE_2 &&
    e3fc:	6823      	ldr	r3, [r4, #0]
    e3fe:	7fdb      	ldrb	r3, [r3, #31]
    e400:	2b02      	cmp	r3, #2
    e402:	7ae3      	ldrb	r3, [r4, #11]
    e404:	d108      	bne.n	e418 <bt_mesh_trans_send+0x180>
    e406:	7902      	ldrb	r2, [r0, #4]
    e408:	b132      	cbz	r2, e418 <bt_mesh_trans_send+0x180>
			tx->aid = app_key->keys[1].id;
    e40a:	7d82      	ldrb	r2, [r0, #22]
			key = app_key->keys[1].val;
    e40c:	f100 0617 	add.w	r6, r0, #23
			tx->aid = app_key->keys[0].id;
    e410:	f362 0387 	bfi	r3, r2, #2, #6
    e414:	72e3      	strb	r3, [r4, #11]
    e416:	e7a0      	b.n	e35a <bt_mesh_trans_send+0xc2>
			key = app_key->keys[0].val;
    e418:	1d86      	adds	r6, r0, #6
			tx->aid = app_key->keys[0].id;
    e41a:	7942      	ldrb	r2, [r0, #5]
    e41c:	e7f8      	b.n	e410 <bt_mesh_trans_send+0x178>
		tx->aszmic = 0U;
    e41e:	2000      	movs	r0, #0
    e420:	e7a6      	b.n	e370 <bt_mesh_trans_send+0xd8>
		ad = NULL;
    e422:	2000      	movs	r0, #0
    e424:	e7b1      	b.n	e38a <bt_mesh_trans_send+0xf2>
		err = send_unseg(tx, msg, cb, cb_data);
    e426:	f7ff f891 	bl	d54c <send_unseg>
    e42a:	e7df      	b.n	e3ec <bt_mesh_trans_send+0x154>
    e42c:	00025968 	.word	0x00025968
    e430:	00025880 	.word	0x00025880
    e434:	00028b70 	.word	0x00028b70
    e438:	00028b98 	.word	0x00028b98
    e43c:	000283de 	.word	0x000283de
    e440:	20007194 	.word	0x20007194
    e444:	00028756 	.word	0x00028756
    e448:	20007060 	.word	0x20007060

0000e44c <bt_mesh_ctl_send>:
{
    e44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e450:	461f      	mov	r7, r3
    e452:	4690      	mov	r8, r2
	BT_DBG("src 0x%04x dst 0x%04x ttl 0x%02x ctl 0x%02x", tx->src,
    e454:	f04f 0300 	mov.w	r3, #0
    e458:	2204      	movs	r2, #4
    e45a:	f362 0307 	bfi	r3, r2, #0, #8
    e45e:	4c37      	ldr	r4, [pc, #220]	; (e53c <bt_mesh_ctl_send+0xf0>)
    e460:	4a37      	ldr	r2, [pc, #220]	; (e540 <bt_mesh_ctl_send+0xf4>)
    e462:	f8df a0ec 	ldr.w	sl, [pc, #236]	; e550 <bt_mesh_ctl_send+0x104>
{
    e466:	b088      	sub	sp, #32
	BT_DBG("src 0x%04x dst 0x%04x ttl 0x%02x ctl 0x%02x", tx->src,
    e468:	1aa4      	subs	r4, r4, r2
    e46a:	8902      	ldrh	r2, [r0, #8]
    e46c:	9204      	str	r2, [sp, #16]
    e46e:	6842      	ldr	r2, [r0, #4]
    e470:	f8cd a00c 	str.w	sl, [sp, #12]
{
    e474:	4689      	mov	r9, r1
	BT_DBG("src 0x%04x dst 0x%04x ttl 0x%02x ctl 0x%02x", tx->src,
    e476:	8891      	ldrh	r1, [r2, #4]
    e478:	9105      	str	r1, [sp, #20]
    e47a:	7a52      	ldrb	r2, [r2, #9]
    e47c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
{
    e480:	4605      	mov	r5, r0
	BT_DBG("src 0x%04x dst 0x%04x ttl 0x%02x ctl 0x%02x", tx->src,
    e482:	f364 138f 	bfi	r3, r4, #6, #10
    e486:	e9cd 2906 	strd	r2, r9, [sp, #24]
    e48a:	a903      	add	r1, sp, #12
    e48c:	2205      	movs	r2, #5
    e48e:	482d      	ldr	r0, [pc, #180]	; (e544 <bt_mesh_ctl_send+0xf8>)
    e490:	f012 fc0c 	bl	20cac <log_n>
	BT_DBG("len %zu: %s", data_len, bt_hex(data, data_len));
    e494:	f04f 0600 	mov.w	r6, #0
    e498:	2304      	movs	r3, #4
    e49a:	4639      	mov	r1, r7
    e49c:	4640      	mov	r0, r8
    e49e:	f363 0607 	bfi	r6, r3, #0, #8
    e4a2:	f7f7 fc33 	bl	5d0c <bt_hex_real>
    e4a6:	f7f5 faa9 	bl	39fc <log_strdup>
    e4aa:	f364 168f 	bfi	r6, r4, #6, #10
    e4ae:	4603      	mov	r3, r0
    e4b0:	f8ad 6000 	strh.w	r6, [sp]
    e4b4:	463a      	mov	r2, r7
    e4b6:	4651      	mov	r1, sl
    e4b8:	4823      	ldr	r0, [pc, #140]	; (e548 <bt_mesh_ctl_send+0xfc>)
    e4ba:	f012 fbdc 	bl	20c76 <log_3>
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    e4be:	2200      	movs	r2, #0
    e4c0:	7aa9      	ldrb	r1, [r5, #10]
    e4c2:	2001      	movs	r0, #1
    e4c4:	f7fc fee8 	bl	b298 <bt_mesh_adv_create>
	if (!buf) {
    e4c8:	4606      	mov	r6, r0
    e4ca:	b970      	cbnz	r0, e4ea <bt_mesh_ctl_send+0x9e>
		BT_ERR("Out of transport buffers");
    e4cc:	2301      	movs	r3, #1
    e4ce:	f04f 0100 	mov.w	r1, #0
    e4d2:	f363 0107 	bfi	r1, r3, #0, #8
    e4d6:	481d      	ldr	r0, [pc, #116]	; (e54c <bt_mesh_ctl_send+0x100>)
    e4d8:	f364 118f 	bfi	r1, r4, #6, #10
    e4dc:	f012 fb92 	bl	20c04 <log_0>
		return -ENOBUFS;
    e4e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    e4e4:	b008      	add	sp, #32
    e4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
    e4ea:	f100 0408 	add.w	r4, r0, #8
    e4ee:	2109      	movs	r1, #9
    e4f0:	4620      	mov	r0, r4
    e4f2:	f016 fb86 	bl	24c02 <net_buf_simple_reserve>
	net_buf_add_u8(buf, TRANS_CTL_HDR(ctl_op, 0));
    e4f6:	f009 017f 	and.w	r1, r9, #127	; 0x7f
    e4fa:	4620      	mov	r0, r4
    e4fc:	f016 fbf5 	bl	24cea <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
    e500:	463a      	mov	r2, r7
    e502:	4641      	mov	r1, r8
    e504:	4620      	mov	r0, r4
    e506:	f016 fbe7 	bl	24cd8 <net_buf_simple_add_mem>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
    e50a:	4623      	mov	r3, r4
    e50c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e50e:	2100      	movs	r1, #0
    e510:	4628      	mov	r0, r5
    e512:	f007 fd3d 	bl	15f90 <bt_mesh_friend_enqueue_tx>
    e516:	b148      	cbz	r0, e52c <bt_mesh_ctl_send+0xe0>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    e518:	686b      	ldr	r3, [r5, #4]
					      seq_auth, &buf->b) &&
    e51a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    e51e:	2b00      	cmp	r3, #0
    e520:	dd04      	ble.n	e52c <bt_mesh_ctl_send+0xe0>
			net_buf_unref(buf);
    e522:	4630      	mov	r0, r6
    e524:	f00f f920 	bl	1d768 <net_buf_unref>
			return 0;
    e528:	2000      	movs	r0, #0
    e52a:	e7db      	b.n	e4e4 <bt_mesh_ctl_send+0x98>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    e52c:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	; 0x44
    e530:	4631      	mov	r1, r6
    e532:	4628      	mov	r0, r5
    e534:	f7fe faa8 	bl	ca88 <bt_mesh_net_send>
    e538:	e7d4      	b.n	e4e4 <bt_mesh_ctl_send+0x98>
    e53a:	bf00      	nop
    e53c:	00025968 	.word	0x00025968
    e540:	00025880 	.word	0x00025880
    e544:	0002881c 	.word	0x0002881c
    e548:	0002884c 	.word	0x0002884c
    e54c:	0002885c 	.word	0x0002885c
    e550:	000287a1 	.word	0x000287a1

0000e554 <send_ack>:
{
    e554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e558:	b08e      	sub	sp, #56	; 0x38
	struct bt_mesh_msg_ctx ctx = {
    e55a:	8b85      	ldrh	r5, [r0, #28]
{
    e55c:	f89d 4058 	ldrb.w	r4, [sp, #88]	; 0x58
	struct bt_mesh_msg_ctx ctx = {
    e560:	f8ad 5010 	strh.w	r5, [sp, #16]
{
    e564:	4688      	mov	r8, r1
	struct bt_mesh_msg_ctx ctx = {
    e566:	2100      	movs	r1, #0
    e568:	f8cd 1016 	str.w	r1, [sp, #22]
    e56c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    e570:	f88d 3019 	strb.w	r3, [sp, #25]
	struct bt_mesh_net_tx tx = {
    e574:	ab04      	add	r3, sp, #16
{
    e576:	9e15      	ldr	r6, [sp, #84]	; 0x54
	struct bt_mesh_msg_ctx ctx = {
    e578:	f8ad 5012 	strh.w	r5, [sp, #18]
    e57c:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
    e580:	9109      	str	r1, [sp, #36]	; 0x24
    e582:	9007      	str	r0, [sp, #28]
    e584:	9308      	str	r3, [sp, #32]
    e586:	b39c      	cbz	r4, e5f0 <send_ack+0x9c>
		.src = obo ? bt_mesh_primary_addr() : src,
    e588:	f000 ffa0 	bl	f4cc <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    e58c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    e590:	f003 f9ec 	bl	1196c <bt_mesh_net_transmit_get>
	u16_t seq_zero = *seq_auth & 0x1fff;
    e594:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e596:	4d24      	ldr	r5, [pc, #144]	; (e628 <send_ack+0xd4>)
    e598:	881f      	ldrh	r7, [r3, #0]
	struct bt_mesh_net_tx tx = {
    e59a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	BT_DBG("SeqZero 0x%04x Block 0x%08x OBO %u", seq_zero, block, obo);
    e59e:	2204      	movs	r2, #4
    e5a0:	f04f 0300 	mov.w	r3, #0
    e5a4:	f362 0307 	bfi	r3, r2, #0, #8
    e5a8:	4a20      	ldr	r2, [pc, #128]	; (e62c <send_ack+0xd8>)
    e5aa:	4821      	ldr	r0, [pc, #132]	; (e630 <send_ack+0xdc>)
    e5ac:	1aad      	subs	r5, r5, r2
    e5ae:	4a21      	ldr	r2, [pc, #132]	; (e634 <send_ack+0xe0>)
	u16_t seq_zero = *seq_auth & 0x1fff;
    e5b0:	f3c7 070c 	ubfx	r7, r7, #0, #13
	BT_DBG("SeqZero 0x%04x Block 0x%08x OBO %u", seq_zero, block, obo);
    e5b4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    e5b8:	e9cd 270a 	strd	r2, r7, [sp, #40]	; 0x28
    e5bc:	a90a      	add	r1, sp, #40	; 0x28
    e5be:	f365 138f 	bfi	r3, r5, #6, #10
    e5c2:	2204      	movs	r2, #4
    e5c4:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
    e5c8:	f012 fb70 	bl	20cac <log_n>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
    e5cc:	fa0f f188 	sxth.w	r1, r8
    e5d0:	2900      	cmp	r1, #0
    e5d2:	dc0f      	bgt.n	e5f4 <send_ack+0xa0>
		BT_WARN("Not sending ack for non-unicast address");
    e5d4:	2302      	movs	r3, #2
    e5d6:	f04f 0100 	mov.w	r1, #0
    e5da:	f363 0107 	bfi	r1, r3, #0, #8
    e5de:	4816      	ldr	r0, [pc, #88]	; (e638 <send_ack+0xe4>)
    e5e0:	f365 118f 	bfi	r1, r5, #6, #10
    e5e4:	f012 fb0e 	bl	20c04 <log_0>
		return 0;
    e5e8:	2000      	movs	r0, #0
}
    e5ea:	b00e      	add	sp, #56	; 0x38
    e5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_mesh_net_tx tx = {
    e5f0:	4640      	mov	r0, r8
    e5f2:	e7cb      	b.n	e58c <send_ack+0x38>
	sys_put_be16(val >> 16, dst);
    e5f4:	0c33      	lsrs	r3, r6, #16
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
    e5f6:	03e4      	lsls	r4, r4, #15
	dst[0] = val >> 8;
    e5f8:	0a1a      	lsrs	r2, r3, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
    e5fa:	2100      	movs	r1, #0
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
    e5fc:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    e600:	ba64      	rev16	r4, r4
    e602:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
	dst[1] = val;
    e606:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	dst[0] = val >> 8;
    e60a:	ba76      	rev16	r6, r6
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
    e60c:	e9cd 1101 	strd	r1, r1, [sp, #4]
    e610:	9100      	str	r1, [sp, #0]
    e612:	2306      	movs	r3, #6
    e614:	aa0a      	add	r2, sp, #40	; 0x28
    e616:	a807      	add	r0, sp, #28
    e618:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    e61c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
    e620:	f7ff ff14 	bl	e44c <bt_mesh_ctl_send>
    e624:	e7e1      	b.n	e5ea <send_ack+0x96>
    e626:	bf00      	nop
    e628:	00025968 	.word	0x00025968
    e62c:	00025880 	.word	0x00025880
    e630:	00028f0a 	.word	0x00028f0a
    e634:	000287b2 	.word	0x000287b2
    e638:	00028f31 	.word	0x00028f31

0000e63c <seg_ack>:

static void seg_ack(struct k_work *work)
{
    e63c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);

	BT_DBG("rx %p", rx);
    e63e:	2204      	movs	r2, #4
    e640:	f04f 0300 	mov.w	r3, #0
    e644:	f362 0307 	bfi	r3, r2, #0, #8
    e648:	4d23      	ldr	r5, [pc, #140]	; (e6d8 <seg_ack+0x9c>)
    e64a:	4a24      	ldr	r2, [pc, #144]	; (e6dc <seg_ack+0xa0>)
    e64c:	4924      	ldr	r1, [pc, #144]	; (e6e0 <seg_ack+0xa4>)
    e64e:	1aad      	subs	r5, r5, r2
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);
    e650:	f1a0 0620 	sub.w	r6, r0, #32
	BT_DBG("rx %p", rx);
    e654:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    e658:	f365 138f 	bfi	r3, r5, #6, #10
{
    e65c:	4604      	mov	r4, r0
	BT_DBG("rx %p", rx);
    e65e:	4632      	mov	r2, r6
    e660:	4820      	ldr	r0, [pc, #128]	; (e6e4 <seg_ack+0xa8>)
    e662:	f012 faf0 	bl	20c46 <log_2>
    e666:	f016 ff46 	bl	254f6 <z_impl_k_uptime_get_32>

	if (k_uptime_get_32() - rx->last > K_SECONDS(60)) {
    e66a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    e66e:	1ac0      	subs	r0, r0, r3
    e670:	f64e 2360 	movw	r3, #60000	; 0xea60
    e674:	4298      	cmp	r0, r3
    e676:	d910      	bls.n	e69a <seg_ack+0x5e>
		BT_WARN("Incomplete timer expired");
    e678:	2302      	movs	r3, #2
    e67a:	f04f 0100 	mov.w	r1, #0
    e67e:	f363 0107 	bfi	r1, r3, #0, #8
    e682:	f365 118f 	bfi	r1, r5, #6, #10
    e686:	4818      	ldr	r0, [pc, #96]	; (e6e8 <seg_ack+0xac>)
    e688:	f012 fabc 	bl	20c04 <log_0>
		seg_rx_reset(rx, false);
    e68c:	2100      	movs	r1, #0
    e68e:	4630      	mov	r0, r6

	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
		 rx->block, rx->obo);

	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
}
    e690:	b004      	add	sp, #16
    e692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		seg_rx_reset(rx, false);
    e696:	f7ff b941 	b.w	d91c <seg_rx_reset>
		 rx->block, rx->obo);
    e69a:	f814 3c10 	ldrb.w	r3, [r4, #-16]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
    e69e:	f834 2c0c 	ldrh.w	r2, [r4, #-12]
    e6a2:	f834 1c0a 	ldrh.w	r1, [r4, #-10]
    e6a6:	f854 0c20 	ldr.w	r0, [r4, #-32]
    e6aa:	09db      	lsrs	r3, r3, #7
    e6ac:	9302      	str	r3, [sp, #8]
    e6ae:	f854 3c08 	ldr.w	r3, [r4, #-8]
    e6b2:	9301      	str	r3, [sp, #4]
    e6b4:	f1a4 0318 	sub.w	r3, r4, #24
    e6b8:	9300      	str	r3, [sp, #0]
    e6ba:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
    e6be:	f7ff ff49 	bl	e554 <send_ack>
	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
    e6c2:	4630      	mov	r0, r6
    e6c4:	f014 fcce 	bl	23064 <ack_timeout>
    e6c8:	4602      	mov	r2, r0
    e6ca:	4808      	ldr	r0, [pc, #32]	; (e6ec <seg_ack+0xb0>)
    e6cc:	4621      	mov	r1, r4
}
    e6ce:	b004      	add	sp, #16
    e6d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e6d4:	f010 bb6c 	b.w	1edb0 <k_delayed_work_submit_to_queue>
    e6d8:	00025968 	.word	0x00025968
    e6dc:	00025880 	.word	0x00025880
    e6e0:	000287c8 	.word	0x000287c8
    e6e4:	00028e35 	.word	0x00028e35
    e6e8:	00028e1c 	.word	0x00028e1c
    e6ec:	20001d2c 	.word	0x20001d2c

0000e6f0 <bt_mesh_trans_recv>:

	return err;
}

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx)
{
    e6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    e6f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    e6f8:	b091      	sub	sp, #68	; 0x44
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    e6fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e6fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
	struct net_buf_simple_state state;
	int err;

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
    e702:	680b      	ldr	r3, [r1, #0]
    e704:	4ec0      	ldr	r6, [pc, #768]	; (ea08 <bt_mesh_trans_recv+0x318>)
							rx->ctx.recv_dst);
	} else {
		rx->friend_match = false;
	}

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
    e706:	f8df 834c 	ldr.w	r8, [pc, #844]	; ea54 <bt_mesh_trans_recv+0x364>
{
    e70a:	4607      	mov	r7, r0
    e70c:	460c      	mov	r4, r1
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
    e70e:	8b98      	ldrh	r0, [r3, #28]
    e710:	8949      	ldrh	r1, [r1, #10]
    e712:	f015 fca3 	bl	2405c <bt_mesh_friend_match>
    e716:	7d23      	ldrb	r3, [r4, #20]
	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
    e718:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
    e71c:	f360 13c7 	bfi	r3, r0, #7, #1
    e720:	7523      	strb	r3, [r4, #20]
	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
    e722:	2204      	movs	r2, #4
    e724:	f04f 0300 	mov.w	r3, #0
    e728:	f362 0307 	bfi	r3, r2, #0, #8
    e72c:	4ab7      	ldr	r2, [pc, #732]	; (ea0c <bt_mesh_trans_recv+0x31c>)
    e72e:	1ab6      	subs	r6, r6, r2
    e730:	8922      	ldrh	r2, [r4, #8]
    e732:	920c      	str	r2, [sp, #48]	; 0x30
    e734:	8962      	ldrh	r2, [r4, #10]
    e736:	920d      	str	r2, [sp, #52]	; 0x34
    e738:	6922      	ldr	r2, [r4, #16]
    e73a:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    e73e:	f366 138f 	bfi	r3, r6, #6, #10
    e742:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
    e746:	a90b      	add	r1, sp, #44	; 0x2c
    e748:	2205      	movs	r2, #5
    e74a:	48b1      	ldr	r0, [pc, #708]	; (ea10 <bt_mesh_trans_recv+0x320>)
    e74c:	f012 faae 	bl	20cac <log_n>
	       rx->ctx.addr, rx->ctx.recv_dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    e750:	2109      	movs	r1, #9
    e752:	4638      	mov	r0, r7
    e754:	f016 fb27 	bl	24da6 <net_buf_simple_pull>

	BT_DBG("Payload %s", bt_hex(buf->data, buf->len));
    e758:	f04f 0500 	mov.w	r5, #0
    e75c:	2304      	movs	r3, #4
    e75e:	88b9      	ldrh	r1, [r7, #4]
    e760:	6838      	ldr	r0, [r7, #0]
    e762:	f363 0507 	bfi	r5, r3, #0, #8
    e766:	f7f7 fad1 	bl	5d0c <bt_hex_real>
    e76a:	f7f5 f947 	bl	39fc <log_strdup>
    e76e:	f366 158f 	bfi	r5, r6, #6, #10
    e772:	4602      	mov	r2, r0
    e774:	462b      	mov	r3, r5
    e776:	4641      	mov	r1, r8
    e778:	48a6      	ldr	r0, [pc, #664]	; (ea14 <bt_mesh_trans_recv+0x324>)
    e77a:	f012 fa64 	bl	20c46 <log_2>
	state->offset = net_buf_simple_headroom(buf);
    e77e:	4638      	mov	r0, r7
    e780:	f016 fb45 	bl	24e0e <net_buf_simple_headroom>
	state->len = buf->len;
    e784:	88bb      	ldrh	r3, [r7, #4]
    e786:	9306      	str	r3, [sp, #24]
	/* Save the app-level state so the buffer can later be placed in
	 * the Friend Queue.
	 */
	net_buf_simple_save(buf, &state);

	if (SEG(buf->data)) {
    e788:	683b      	ldr	r3, [r7, #0]
	state->offset = net_buf_simple_headroom(buf);
    e78a:	9007      	str	r0, [sp, #28]
    e78c:	781a      	ldrb	r2, [r3, #0]
    e78e:	9305      	str	r3, [sp, #20]
    e790:	0610      	lsls	r0, r2, #24
    e792:	f140 82c8 	bpl.w	ed26 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x2c6>
		/* Segmented messages must match a local element or an
		 * LPN of this Friend.
		 */
		if (!rx->local_match && !rx->friend_match) {
    e796:	7d23      	ldrb	r3, [r4, #20]
    e798:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    e79c:	f000 8336 	beq.w	ee0c <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x3ac>
	if (buf->len < 5) {
    e7a0:	9b06      	ldr	r3, [sp, #24]
    e7a2:	2b04      	cmp	r3, #4
    e7a4:	d80c      	bhi.n	e7c0 <bt_mesh_trans_recv+0xd0>
		BT_ERR("Too short segmented message (len %u)", buf->len);
    e7a6:	f04f 0200 	mov.w	r2, #0
    e7aa:	2301      	movs	r3, #1
    e7ac:	f363 0207 	bfi	r2, r3, #0, #8
    e7b0:	f366 128f 	bfi	r2, r6, #6, #10
    e7b4:	9906      	ldr	r1, [sp, #24]
    e7b6:	4898      	ldr	r0, [pc, #608]	; (ea18 <bt_mesh_trans_recv+0x328>)
    e7b8:	f012 fa31 	bl	20c1e <log_1>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    e7bc:	2500      	movs	r5, #0
    e7be:	e120      	b.n	ea02 <bt_mesh_trans_recv+0x312>
	BT_DBG("ASZMIC %u AKF %u AID 0x%02x", ASZMIC(hdr), AKF(hdr), AID(hdr));
    e7c0:	2204      	movs	r2, #4
    e7c2:	f04f 0300 	mov.w	r3, #0
    e7c6:	9905      	ldr	r1, [sp, #20]
    e7c8:	4894      	ldr	r0, [pc, #592]	; (ea1c <bt_mesh_trans_recv+0x32c>)
    e7ca:	f362 0307 	bfi	r3, r2, #0, #8
    e7ce:	4a94      	ldr	r2, [pc, #592]	; (ea20 <bt_mesh_trans_recv+0x330>)
    e7d0:	920b      	str	r2, [sp, #44]	; 0x2c
    e7d2:	784a      	ldrb	r2, [r1, #1]
    e7d4:	09d2      	lsrs	r2, r2, #7
    e7d6:	920c      	str	r2, [sp, #48]	; 0x30
    e7d8:	780a      	ldrb	r2, [r1, #0]
    e7da:	f3c2 1280 	ubfx	r2, r2, #6, #1
    e7de:	920d      	str	r2, [sp, #52]	; 0x34
    e7e0:	780a      	ldrb	r2, [r1, #0]
    e7e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    e7e6:	f366 138f 	bfi	r3, r6, #6, #10
    e7ea:	920e      	str	r2, [sp, #56]	; 0x38
    e7ec:	a90b      	add	r1, sp, #44	; 0x2c
    e7ee:	2204      	movs	r2, #4
    e7f0:	f012 fa5c 	bl	20cac <log_n>
	net_buf_simple_pull(buf, 1);
    e7f4:	2101      	movs	r1, #1
    e7f6:	4638      	mov	r0, r7
    e7f8:	f016 fad5 	bl	24da6 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    e7fc:	4638      	mov	r0, r7
    e7fe:	f016 faf2 	bl	24de6 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    e802:	ea4f 08c0 	mov.w	r8, r0, lsl #3
	seq_zero = (seq_zero >> 2) & 0x1fff;
    e806:	f3c0 0a8f 	ubfx	sl, r0, #2, #16
	seg_n = net_buf_simple_pull_u8(buf);
    e80a:	4638      	mov	r0, r7
    e80c:	f016 fadb 	bl	24dc6 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    e810:	f008 0818 	and.w	r8, r8, #24
	BT_DBG("SeqZero 0x%04x SegO %u SegN %u", seq_zero, seg_o, seg_n);
    e814:	2204      	movs	r2, #4
    e816:	f04f 0300 	mov.w	r3, #0
	seg_o |= seg_n >> 5;
    e81a:	ea48 1850 	orr.w	r8, r8, r0, lsr #5
	BT_DBG("SeqZero 0x%04x SegO %u SegN %u", seq_zero, seg_o, seg_n);
    e81e:	f362 0307 	bfi	r3, r2, #0, #8
    e822:	4a7f      	ldr	r2, [pc, #508]	; (ea20 <bt_mesh_trans_recv+0x330>)
    e824:	920b      	str	r2, [sp, #44]	; 0x2c
	seg_n &= 0x1f;
    e826:	f000 091f 	and.w	r9, r0, #31
	seg_o |= seg_n >> 5;
    e82a:	fa5f f888 	uxtb.w	r8, r8
	seg_n = net_buf_simple_pull_u8(buf);
    e82e:	4605      	mov	r5, r0
	BT_DBG("SeqZero 0x%04x SegO %u SegN %u", seq_zero, seg_o, seg_n);
    e830:	f366 138f 	bfi	r3, r6, #6, #10
    e834:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
    e838:	2204      	movs	r2, #4
    e83a:	a90b      	add	r1, sp, #44	; 0x2c
    e83c:	4879      	ldr	r0, [pc, #484]	; (ea24 <bt_mesh_trans_recv+0x334>)
    e83e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    e842:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
    e846:	f012 fa31 	bl	20cac <log_n>
	if (seg_o > seg_n) {
    e84a:	45c8      	cmp	r8, r9
    e84c:	d90c      	bls.n	e868 <bt_mesh_trans_recv+0x178>
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
    e84e:	2201      	movs	r2, #1
    e850:	f04f 0300 	mov.w	r3, #0
    e854:	f362 0307 	bfi	r3, r2, #0, #8
    e858:	f366 138f 	bfi	r3, r6, #6, #10
    e85c:	464a      	mov	r2, r9
    e85e:	4641      	mov	r1, r8
    e860:	4871      	ldr	r0, [pc, #452]	; (ea28 <bt_mesh_trans_recv+0x338>)
    e862:	f012 f9f0 	bl	20c46 <log_2>
		return -EINVAL;
    e866:	e7a9      	b.n	e7bc <bt_mesh_trans_recv+0xcc>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e868:	4870      	ldr	r0, [pc, #448]	; (ea2c <bt_mesh_trans_recv+0x33c>)
    e86a:	6921      	ldr	r1, [r4, #16]
    e86c:	7d23      	ldrb	r3, [r4, #20]
    e86e:	6800      	ldr	r0, [r0, #0]
    e870:	eba1 0a0a 	sub.w	sl, r1, sl
    e874:	f003 0201 	and.w	r2, r3, #1
    e878:	1a82      	subs	r2, r0, r2
    e87a:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
		if (rx->src != net_rx->ctx.addr ||
    e87e:	486c      	ldr	r0, [pc, #432]	; (ea30 <bt_mesh_trans_recv+0x340>)
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e880:	eba1 0a0a 	sub.w	sl, r1, sl
    e884:	ea4a 6b02 	orr.w	fp, sl, r2, lsl #24
    e888:	ea4f 2c12 	mov.w	ip, r2, lsr #8
		if (rx->src != net_rx->ctx.addr ||
    e88c:	6941      	ldr	r1, [r0, #20]
    e88e:	68a2      	ldr	r2, [r4, #8]
    e890:	4291      	cmp	r1, r2
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e892:	e9cd bc08 	strd	fp, ip, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
    e896:	4682      	mov	sl, r0
    e898:	d119      	bne.n	e8ce <bt_mesh_trans_recv+0x1de>
		if (rx->seq_auth >= *seq_auth) {
    e89a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    e89e:	4561      	cmp	r1, ip
    e8a0:	bf08      	it	eq
    e8a2:	4558      	cmpeq	r0, fp
    e8a4:	f080 82b4 	bcs.w	ee10 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x3b0>
		if (rx->in_use) {
    e8a8:	f89a 3010 	ldrb.w	r3, [sl, #16]
    e8ac:	0659      	lsls	r1, r3, #25
    e8ae:	d50e      	bpl.n	e8ce <bt_mesh_trans_recv+0x1de>
			BT_WARN("Duplicate SDU from src 0x%04x",
    e8b0:	2302      	movs	r3, #2
    e8b2:	f04f 0200 	mov.w	r2, #0
    e8b6:	f363 0207 	bfi	r2, r3, #0, #8
    e8ba:	8921      	ldrh	r1, [r4, #8]
    e8bc:	485d      	ldr	r0, [pc, #372]	; (ea34 <bt_mesh_trans_recv+0x344>)
    e8be:	f366 128f 	bfi	r2, r6, #6, #10
    e8c2:	f012 f9ac 	bl	20c1e <log_1>
			seg_rx_reset(rx, true);
    e8c6:	2101      	movs	r1, #1
    e8c8:	4650      	mov	r0, sl
    e8ca:	f7ff f827 	bl	d91c <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    e8ce:	7d22      	ldrb	r2, [r4, #20]
    e8d0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		return 12;
    e8d4:	2a00      	cmp	r2, #0
    e8d6:	bf14      	ite	ne
    e8d8:	2308      	movne	r3, #8
    e8da:	230c      	moveq	r3, #12
	return ((seg_n * seg_len(ctl) + 1) <= CONFIG_BT_MESH_RX_SDU_MAX);
    e8dc:	fb19 f303 	smulbb	r3, r9, r3
    e8e0:	3301      	adds	r3, #1
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    e8e2:	2b48      	cmp	r3, #72	; 0x48
    e8e4:	f340 80fa 	ble.w	eadc <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x7c>
		BT_ERR("Too big incoming SDU length");
    e8e8:	2301      	movs	r3, #1
    e8ea:	f04f 0100 	mov.w	r1, #0
    e8ee:	f363 0107 	bfi	r1, r3, #0, #8
    e8f2:	f366 118f 	bfi	r1, r6, #6, #10
    e8f6:	4850      	ldr	r0, [pc, #320]	; (ea38 <bt_mesh_trans_recv+0x348>)
    e8f8:	f012 f984 	bl	20c04 <log_0>
			 net_rx->friend_match);
    e8fc:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    e8fe:	8922      	ldrh	r2, [r4, #8]
    e900:	8961      	ldrh	r1, [r4, #10]
    e902:	6820      	ldr	r0, [r4, #0]
    e904:	09db      	lsrs	r3, r3, #7
    e906:	9302      	str	r3, [sp, #8]
    e908:	2500      	movs	r5, #0
    e90a:	ab08      	add	r3, sp, #32
    e90c:	9300      	str	r3, [sp, #0]
    e90e:	9501      	str	r5, [sp, #4]
    e910:	7b63      	ldrb	r3, [r4, #13]
    e912:	f7ff fe1f 	bl	e554 <send_ack>
			return -EMSGSIZE;
    e916:	f06f 0623 	mvn.w	r6, #35	; 0x23
    e91a:	e0f1      	b.n	eb00 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xa0>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    e91c:	9a05      	ldr	r2, [sp, #20]
    e91e:	7811      	ldrb	r1, [r2, #0]
    e920:	f89a 2011 	ldrb.w	r2, [sl, #17]
    e924:	4291      	cmp	r1, r2
    e926:	d105      	bne.n	e934 <bt_mesh_trans_recv+0x244>
    e928:	f89a 2010 	ldrb.w	r2, [sl, #16]
    e92c:	f002 011f 	and.w	r1, r2, #31
    e930:	4549      	cmp	r1, r9
    e932:	d008      	beq.n	e946 <bt_mesh_trans_recv+0x256>
		BT_ERR("Invalid segment for ongoing session");
    e934:	f04f 0100 	mov.w	r1, #0
    e938:	2301      	movs	r3, #1
    e93a:	f363 0107 	bfi	r1, r3, #0, #8
    e93e:	f366 118f 	bfi	r1, r6, #6, #10
    e942:	483e      	ldr	r0, [pc, #248]	; (ea3c <bt_mesh_trans_recv+0x34c>)
    e944:	e271      	b.n	ee2a <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x3ca>
	if (rx->ctl != net_rx->ctl) {
    e946:	f3c2 1240 	ubfx	r2, r2, #5, #1
    e94a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    e94e:	429a      	cmp	r2, r3
    e950:	d008      	beq.n	e964 <bt_mesh_trans_recv+0x274>
		BT_ERR("Inconsistent CTL in segment");
    e952:	f04f 0100 	mov.w	r1, #0
    e956:	2301      	movs	r3, #1
    e958:	f363 0107 	bfi	r1, r3, #0, #8
    e95c:	f366 118f 	bfi	r1, r6, #6, #10
    e960:	4837      	ldr	r0, [pc, #220]	; (ea40 <bt_mesh_trans_recv+0x350>)
    e962:	e262      	b.n	ee2a <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x3ca>
		if (rx->in_use) {
    e964:	f89a 5010 	ldrb.w	r5, [sl, #16]
    e968:	f8da 2018 	ldr.w	r2, [sl, #24]
    e96c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    e970:	d021      	beq.n	e9b6 <bt_mesh_trans_recv+0x2c6>
			BT_DBG("Existing RX context. Block 0x%08x", rx->block);
    e972:	2104      	movs	r1, #4
    e974:	f04f 0300 	mov.w	r3, #0
    e978:	f361 0307 	bfi	r3, r1, #0, #8
    e97c:	f366 138f 	bfi	r3, r6, #6, #10
    e980:	4927      	ldr	r1, [pc, #156]	; (ea20 <bt_mesh_trans_recv+0x330>)
    e982:	4830      	ldr	r0, [pc, #192]	; (ea44 <bt_mesh_trans_recv+0x354>)
    e984:	f012 f95f 	bl	20c46 <log_2>
	if (BIT(seg_o) & rx->block) {
    e988:	f8df a0a4 	ldr.w	sl, [pc, #164]	; ea30 <bt_mesh_trans_recv+0x340>
    e98c:	f8da 5018 	ldr.w	r5, [sl, #24]
    e990:	fa25 f508 	lsr.w	r5, r5, r8
    e994:	f015 0501 	ands.w	r5, r5, #1
    e998:	46d3      	mov	fp, sl
    e99a:	f000 80cf 	beq.w	eb3c <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xdc>
		BT_WARN("Received already received fragment");
    e99e:	2302      	movs	r3, #2
    e9a0:	f04f 0100 	mov.w	r1, #0
    e9a4:	f363 0107 	bfi	r1, r3, #0, #8
    e9a8:	f366 118f 	bfi	r1, r6, #6, #10
    e9ac:	4826      	ldr	r0, [pc, #152]	; (ea48 <bt_mesh_trans_recv+0x358>)
    e9ae:	f012 f929 	bl	20c04 <log_0>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    e9b2:	2500      	movs	r5, #0
    e9b4:	e01f      	b.n	e9f6 <bt_mesh_trans_recv+0x306>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    e9b6:	3101      	adds	r1, #1
    e9b8:	2301      	movs	r3, #1
    e9ba:	408b      	lsls	r3, r1
    e9bc:	3b01      	subs	r3, #1
			BT_WARN("Got segment for already complete SDU");
    e9be:	f04f 0100 	mov.w	r1, #0
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    e9c2:	4293      	cmp	r3, r2
			BT_WARN("Got segment for already complete SDU");
    e9c4:	f04f 0302 	mov.w	r3, #2
    e9c8:	f363 0107 	bfi	r1, r3, #0, #8
    e9cc:	f366 118f 	bfi	r1, r6, #6, #10
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    e9d0:	d114      	bne.n	e9fc <bt_mesh_trans_recv+0x30c>
			BT_WARN("Got segment for already complete SDU");
    e9d2:	481e      	ldr	r0, [pc, #120]	; (ea4c <bt_mesh_trans_recv+0x35c>)
    e9d4:	f012 f916 	bl	20c04 <log_0>
				 seq_auth, rx->block, rx->obo);
    e9d8:	f89a 3010 	ldrb.w	r3, [sl, #16]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    e9dc:	8922      	ldrh	r2, [r4, #8]
    e9de:	8961      	ldrh	r1, [r4, #10]
    e9e0:	6820      	ldr	r0, [r4, #0]
    e9e2:	09db      	lsrs	r3, r3, #7
    e9e4:	9302      	str	r3, [sp, #8]
    e9e6:	f8da 3018 	ldr.w	r3, [sl, #24]
    e9ea:	9301      	str	r3, [sp, #4]
    e9ec:	ab08      	add	r3, sp, #32
    e9ee:	9300      	str	r3, [sp, #0]
    e9f0:	7b63      	ldrb	r3, [r4, #13]
    e9f2:	f7ff fdaf 	bl	e554 <send_ack>
		return -EALREADY;
    e9f6:	f06f 0644 	mvn.w	r6, #68	; 0x44
    e9fa:	e081      	b.n	eb00 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xa0>
		BT_WARN("Got segment for canceled SDU");
    e9fc:	4814      	ldr	r0, [pc, #80]	; (ea50 <bt_mesh_trans_recv+0x360>)
		BT_ERR("Too small unsegmented PDU");
    e9fe:	f012 f901 	bl	20c04 <log_0>
		return -EINVAL;
    ea02:	f06f 0615 	mvn.w	r6, #21
    ea06:	e07b      	b.n	eb00 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xa0>
    ea08:	00025968 	.word	0x00025968
    ea0c:	00025880 	.word	0x00025880
    ea10:	00028875 	.word	0x00028875
    ea14:	000288aa 	.word	0x000288aa
    ea18:	000288b9 	.word	0x000288b9
    ea1c:	00028d63 	.word	0x00028d63
    ea20:	000287dd 	.word	0x000287dd
    ea24:	000288de 	.word	0x000288de
    ea28:	00028901 	.word	0x00028901
    ea2c:	20007060 	.word	0x20007060
    ea30:	20006c60 	.word	0x20006c60
    ea34:	00028922 	.word	0x00028922
    ea38:	000289fd 	.word	0x000289fd
    ea3c:	00028955 	.word	0x00028955
    ea40:	00028979 	.word	0x00028979
    ea44:	00028995 	.word	0x00028995
    ea48:	00028a75 	.word	0x00028a75
    ea4c:	000289bb 	.word	0x000289bb
    ea50:	000289e0 	.word	0x000289e0
    ea54:	000287e7 	.word	0x000287e7
		rx->in_use = 1U;
    ea58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ea5c:	f88a 3010 	strb.w	r3, [sl, #16]
		rx->ctl = net_rx->ctl;
    ea60:	f89a 0010 	ldrb.w	r0, [sl, #16]
	buf->data = buf->__buf;
    ea64:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
    ea68:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
		rx->sub = net_rx->sub;
    ea6c:	6823      	ldr	r3, [r4, #0]
    ea6e:	f8ca 3000 	str.w	r3, [sl]
		rx->ctl = net_rx->ctl;
    ea72:	f362 1045 	bfi	r0, r2, #5, #1
		rx->seq_auth = *seq_auth;
    ea76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ea7a:	e9ca 2302 	strd	r2, r3, [sl, #8]
		rx->seg_n = seg_n;
    ea7e:	4603      	mov	r3, r0
    ea80:	f365 0304 	bfi	r3, r5, #0, #5
    ea84:	f88a 3010 	strb.w	r3, [sl, #16]
		rx->hdr = *hdr;
    ea88:	9b05      	ldr	r3, [sp, #20]
	buf->len  = 0;
    ea8a:	f8aa 1044 	strh.w	r1, [sl, #68]	; 0x44
    ea8e:	781b      	ldrb	r3, [r3, #0]
    ea90:	f88a 3011 	strb.w	r3, [sl, #17]
		rx->ttl = net_rx->ctx.send_ttl;
    ea94:	7b63      	ldrb	r3, [r4, #13]
    ea96:	f88a 3012 	strb.w	r3, [sl, #18]
		rx->src = net_rx->ctx.addr;
    ea9a:	8923      	ldrh	r3, [r4, #8]
    ea9c:	f8aa 3014 	strh.w	r3, [sl, #20]
		rx->dst = net_rx->ctx.recv_dst;
    eaa0:	8963      	ldrh	r3, [r4, #10]
    eaa2:	f8aa 3016 	strh.w	r3, [sl, #22]
		BT_DBG("New RX context. Block Complete 0x%08x",
    eaa6:	2204      	movs	r2, #4
    eaa8:	f04f 0300 	mov.w	r3, #0
		rx->block = 0U;
    eaac:	f8ca 1018 	str.w	r1, [sl, #24]
		BT_DBG("New RX context. Block Complete 0x%08x",
    eab0:	f362 0307 	bfi	r3, r2, #0, #8
    eab4:	f109 0101 	add.w	r1, r9, #1
    eab8:	2201      	movs	r2, #1
    eaba:	408a      	lsls	r2, r1
    eabc:	f366 138f 	bfi	r3, r6, #6, #10
    eac0:	3a01      	subs	r2, #1
    eac2:	49c0      	ldr	r1, [pc, #768]	; (edc4 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x364>)
    eac4:	48c0      	ldr	r0, [pc, #768]	; (edc8 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x368>)
    eac6:	f012 f8be 	bl	20c46 <log_2>
	rx->obo = net_rx->friend_match;
    eaca:	7d23      	ldrb	r3, [r4, #20]
    eacc:	f89a 2010 	ldrb.w	r2, [sl, #16]
    ead0:	09db      	lsrs	r3, r3, #7
    ead2:	f363 12c7 	bfi	r2, r3, #7, #1
    ead6:	f88a 2010 	strb.w	r2, [sl, #16]
    eada:	e755      	b.n	e988 <bt_mesh_trans_recv+0x298>
		if (rx->in_use) {
    eadc:	f89a 3010 	ldrb.w	r3, [sl, #16]
    eae0:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    eae4:	d0b8      	beq.n	ea58 <bt_mesh_trans_recv+0x368>
		BT_WARN("No free slots for new incoming segmented messages");
    eae6:	2302      	movs	r3, #2
    eae8:	f04f 0100 	mov.w	r1, #0
    eaec:	f363 0107 	bfi	r1, r3, #0, #8
    eaf0:	f366 118f 	bfi	r1, r6, #6, #10
    eaf4:	48b5      	ldr	r0, [pc, #724]	; (edcc <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x36c>)
    eaf6:	f012 f885 	bl	20c04 <log_0>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    eafa:	2500      	movs	r5, #0
		return -ENOMEM;
    eafc:	f06f 060b 	mvn.w	r6, #11
	buf->data = buf->__buf + state->offset;
    eb00:	68bb      	ldr	r3, [r7, #8]
    eb02:	9a07      	ldr	r2, [sp, #28]
    eb04:	fa13 f382 	uxtah	r3, r3, r2
    eb08:	603b      	str	r3, [r7, #0]
	buf->len = state->len;
    eb0a:	9b06      	ldr	r3, [sp, #24]
    eb0c:	80bb      	strh	r3, [r7, #4]
		bt_mesh_lpn_msg_received(rx);
	}

	net_buf_simple_restore(buf, &state);

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match && !err) {
    eb0e:	f994 3014 	ldrsb.w	r3, [r4, #20]
    eb12:	2b00      	cmp	r3, #0
    eb14:	da0e      	bge.n	eb34 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xd4>
    eb16:	b96e      	cbnz	r6, eb34 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xd4>
		if (seq_auth == TRANS_SEQ_AUTH_NVAL) {
    eb18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    eb1c:	3301      	adds	r3, #1
    eb1e:	bf08      	it	eq
    eb20:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL, buf);
    eb24:	463b      	mov	r3, r7
    eb26:	bf0c      	ite	eq
    eb28:	4632      	moveq	r2, r6
		} else {
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth, buf);
    eb2a:	aa08      	addne	r2, sp, #32
    eb2c:	4629      	mov	r1, r5
    eb2e:	4620      	mov	r0, r4
    eb30:	f007 f960 	bl	15df4 <bt_mesh_friend_enqueue_rx>
		}
	}

	return err;
}
    eb34:	4630      	mov	r0, r6
    eb36:	b011      	add	sp, #68	; 0x44
    eb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (seg_o == seg_n) {
    eb3c:	f89a 3010 	ldrb.w	r3, [sl, #16]
    eb40:	88ba      	ldrh	r2, [r7, #4]
    eb42:	45c8      	cmp	r8, r9
    eb44:	f3c3 1340 	ubfx	r3, r3, #5, #1
    eb48:	d13b      	bne.n	ebc2 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x162>
		return 12;
    eb4a:	2b00      	cmp	r3, #0
    eb4c:	bf14      	ite	ne
    eb4e:	2108      	movne	r1, #8
    eb50:	210c      	moveq	r1, #12
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
    eb52:	fb01 2208 	mla	r2, r1, r8, r2
    eb56:	b292      	uxth	r2, r2
    eb58:	f8aa 2044 	strh.w	r2, [sl, #68]	; 0x44
		BT_DBG("Target len %u * %u + %u = %u", seg_n, seg_len(rx->ctl),
    eb5c:	2004      	movs	r0, #4
    eb5e:	f04f 0300 	mov.w	r3, #0
    eb62:	f360 0307 	bfi	r3, r0, #0, #8
    eb66:	910d      	str	r1, [sp, #52]	; 0x34
    eb68:	4899      	ldr	r0, [pc, #612]	; (edd0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x370>)
    eb6a:	88b9      	ldrh	r1, [r7, #4]
    eb6c:	f366 138f 	bfi	r3, r6, #6, #10
    eb70:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
    eb74:	e9cd 080b 	strd	r0, r8, [sp, #44]	; 0x2c
    eb78:	2205      	movs	r2, #5
    eb7a:	a90b      	add	r1, sp, #44	; 0x2c
    eb7c:	4895      	ldr	r0, [pc, #596]	; (edd4 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x374>)
    eb7e:	f012 f895 	bl	20cac <log_n>
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
    eb82:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    eb86:	2b48      	cmp	r3, #72	; 0x48
    eb88:	d92a      	bls.n	ebe0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x180>
			BT_ERR("Too large SDU len");
    eb8a:	2301      	movs	r3, #1
    eb8c:	f04f 0100 	mov.w	r1, #0
    eb90:	f363 0107 	bfi	r1, r3, #0, #8
    eb94:	f366 118f 	bfi	r1, r6, #6, #10
    eb98:	488f      	ldr	r0, [pc, #572]	; (edd8 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x378>)
    eb9a:	f012 f833 	bl	20c04 <log_0>
				 seq_auth, 0, rx->obo);
    eb9e:	f89a 3010 	ldrb.w	r3, [sl, #16]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    eba2:	8961      	ldrh	r1, [r4, #10]
    eba4:	8922      	ldrh	r2, [r4, #8]
    eba6:	6820      	ldr	r0, [r4, #0]
    eba8:	09db      	lsrs	r3, r3, #7
    ebaa:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ebae:	ab08      	add	r3, sp, #32
    ebb0:	9300      	str	r3, [sp, #0]
    ebb2:	7b63      	ldrb	r3, [r4, #13]
    ebb4:	f7ff fcce 	bl	e554 <send_ack>
			seg_rx_reset(rx, true);
    ebb8:	2101      	movs	r1, #1
    ebba:	4650      	mov	r0, sl
    ebbc:	f7fe feae 	bl	d91c <seg_rx_reset>
    ebc0:	e6a9      	b.n	e916 <bt_mesh_trans_recv+0x226>
		return 12;
    ebc2:	2b00      	cmp	r3, #0
		if (buf->len != seg_len(rx->ctl)) {
    ebc4:	bf14      	ite	ne
    ebc6:	2308      	movne	r3, #8
    ebc8:	230c      	moveq	r3, #12
    ebca:	429a      	cmp	r2, r3
    ebcc:	d008      	beq.n	ebe0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x180>
			BT_ERR("Incorrect segment size for message type");
    ebce:	f04f 0100 	mov.w	r1, #0
    ebd2:	2301      	movs	r3, #1
    ebd4:	f363 0107 	bfi	r1, r3, #0, #8
    ebd8:	f366 118f 	bfi	r1, r6, #6, #10
    ebdc:	487f      	ldr	r0, [pc, #508]	; (eddc <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x37c>)
    ebde:	e70e      	b.n	e9fe <bt_mesh_trans_recv+0x30e>
    ebe0:	f016 fc89 	bl	254f6 <z_impl_k_uptime_get_32>
	rx->last = k_uptime_get_32();
    ebe4:	4d7e      	ldr	r5, [pc, #504]	; (ede0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x380>)
    ebe6:	61e8      	str	r0, [r5, #28]
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    ebe8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    ebec:	f010 f9a8 	bl	1ef40 <z_timeout_remaining>
    ebf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ebf4:	2264      	movs	r2, #100	; 0x64
    ebf6:	2300      	movs	r3, #0
    ebf8:	fb80 0101 	smull	r0, r1, r0, r1
    ebfc:	f7f1 fac0 	bl	180 <__aeabi_uldivmod>
    ec00:	46aa      	mov	sl, r5
	if (!k_delayed_work_remaining_get(&rx->ack) &&
    ec02:	b940      	cbnz	r0, ec16 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x1b6>
		k_delayed_work_submit(&rx->ack, ack_timeout(rx));
    ec04:	4628      	mov	r0, r5
    ec06:	f014 fa2d 	bl	23064 <ack_timeout>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ec0a:	f105 0120 	add.w	r1, r5, #32
    ec0e:	4602      	mov	r2, r0
    ec10:	4874      	ldr	r0, [pc, #464]	; (ede4 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x384>)
    ec12:	f010 f8cd 	bl	1edb0 <k_delayed_work_submit_to_queue>
	memcpy(rx->buf.data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
    ec16:	f89a 2010 	ldrb.w	r2, [sl, #16]
    ec1a:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
    ec1e:	6839      	ldr	r1, [r7, #0]
		return 12;
    ec20:	f012 0f20 	tst.w	r2, #32
    ec24:	bf14      	ite	ne
    ec26:	2008      	movne	r0, #8
    ec28:	200c      	moveq	r0, #12
	memcpy(rx->buf.data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
    ec2a:	fb08 3000 	mla	r0, r8, r0, r3
    ec2e:	88ba      	ldrh	r2, [r7, #4]
    ec30:	f013 f929 	bl	21e86 <memcpy>
	BT_DBG("Received %u/%u", seg_o, seg_n);
    ec34:	2204      	movs	r2, #4
    ec36:	f04f 0300 	mov.w	r3, #0
    ec3a:	f362 0307 	bfi	r3, r2, #0, #8
    ec3e:	f366 138f 	bfi	r3, r6, #6, #10
	rx->block |= BIT(seg_o);
    ec42:	2501      	movs	r5, #1
	BT_DBG("Received %u/%u", seg_o, seg_n);
    ec44:	f8ad 3000 	strh.w	r3, [sp]
    ec48:	4642      	mov	r2, r8
    ec4a:	464b      	mov	r3, r9
    ec4c:	4960      	ldr	r1, [pc, #384]	; (edd0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x370>)
    ec4e:	4866      	ldr	r0, [pc, #408]	; (ede8 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x388>)
    ec50:	f012 f811 	bl	20c76 <log_3>
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ec54:	44a9      	add	r9, r5
	rx->block |= BIT(seg_o);
    ec56:	f8da 3018 	ldr.w	r3, [sl, #24]
    ec5a:	fa05 f808 	lsl.w	r8, r5, r8
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ec5e:	fa05 f909 	lsl.w	r9, r5, r9
	rx->block |= BIT(seg_o);
    ec62:	ea48 0303 	orr.w	r3, r8, r3
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ec66:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ec6a:	454b      	cmp	r3, r9
	rx->block |= BIT(seg_o);
    ec6c:	f8ca 3018 	str.w	r3, [sl, #24]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ec70:	f040 80a6 	bne.w	edc0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x360>
	BT_DBG("Complete SDU");
    ec74:	2304      	movs	r3, #4
    ec76:	f04f 0200 	mov.w	r2, #0
    ec7a:	f363 0207 	bfi	r2, r3, #0, #8
    ec7e:	f366 128f 	bfi	r2, r6, #6, #10
    ec82:	4953      	ldr	r1, [pc, #332]	; (edd0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x370>)
    ec84:	4859      	ldr	r0, [pc, #356]	; (edec <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x38c>)
    ec86:	f011 ffca 	bl	20c1e <log_1>
	if (net_rx->local_match && is_replay(net_rx)) {
    ec8a:	7d23      	ldrb	r3, [r4, #20]
    ec8c:	065a      	lsls	r2, r3, #25
    ec8e:	d519      	bpl.n	ecc4 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x264>
    ec90:	4620      	mov	r0, r4
    ec92:	f7fe fccf 	bl	d634 <is_replay>
    ec96:	b1a8      	cbz	r0, ecc4 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x264>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    ec98:	2202      	movs	r2, #2
    ec9a:	f04f 0300 	mov.w	r3, #0
    ec9e:	f362 0307 	bfi	r3, r2, #0, #8
    eca2:	f366 138f 	bfi	r3, r6, #6, #10
    eca6:	f8ad 3000 	strh.w	r3, [sp]
    ecaa:	8962      	ldrh	r2, [r4, #10]
    ecac:	6923      	ldr	r3, [r4, #16]
    ecae:	8921      	ldrh	r1, [r4, #8]
    ecb0:	484f      	ldr	r0, [pc, #316]	; (edf0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x390>)
    ecb2:	f011 ffe0 	bl	20c76 <log_3>
		rx->block &= ~BIT(seg_o);
    ecb6:	f8da 3018 	ldr.w	r3, [sl, #24]
    ecba:	ea23 0308 	bic.w	r3, r3, r8
    ecbe:	f8ca 3018 	str.w	r3, [sl, #24]
		return -EINVAL;
    ecc2:	e57b      	b.n	e7bc <bt_mesh_trans_recv+0xcc>
	k_delayed_work_cancel(&rx->ack);
    ecc4:	484b      	ldr	r0, [pc, #300]	; (edf4 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x394>)
    ecc6:	f016 fbc5 	bl	25454 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    ecca:	f89b 3010 	ldrb.w	r3, [fp, #16]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    ecce:	8922      	ldrh	r2, [r4, #8]
    ecd0:	8961      	ldrh	r1, [r4, #10]
    ecd2:	6820      	ldr	r0, [r4, #0]
    ecd4:	09db      	lsrs	r3, r3, #7
    ecd6:	9302      	str	r3, [sp, #8]
    ecd8:	f8db 3018 	ldr.w	r3, [fp, #24]
    ecdc:	9301      	str	r3, [sp, #4]
    ecde:	ad08      	add	r5, sp, #32
    ece0:	7b63      	ldrb	r3, [r4, #13]
    ece2:	9500      	str	r5, [sp, #0]
    ece4:	f7ff fc36 	bl	e554 <send_ack>
	if (net_rx->ctl) {
    ece8:	7d23      	ldrb	r3, [r4, #20]
    ecea:	4a43      	ldr	r2, [pc, #268]	; (edf8 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x398>)
    ecec:	f013 0f08 	tst.w	r3, #8
    ecf0:	9b05      	ldr	r3, [sp, #20]
    ecf2:	7819      	ldrb	r1, [r3, #0]
    ecf4:	d00a      	beq.n	ed0c <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x2ac>
		err = ctl_recv(net_rx, *hdr, &rx->buf, seq_auth);
    ecf6:	462b      	mov	r3, r5
    ecf8:	4620      	mov	r0, r4
    ecfa:	f7fe ff2d 	bl	db58 <ctl_recv>
		err = sdu_recv(net_rx, (rx->seq_auth & 0xffffff), *hdr,
    ecfe:	4606      	mov	r6, r0
	seg_rx_reset(rx, false);
    ed00:	2100      	movs	r1, #0
    ed02:	4837      	ldr	r0, [pc, #220]	; (ede0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x380>)
    ed04:	f7fe fe0a 	bl	d91c <seg_rx_reset>
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
    ed08:	2502      	movs	r5, #2
    ed0a:	e6f9      	b.n	eb00 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xa0>
		err = sdu_recv(net_rx, (rx->seq_auth & 0xffffff), *hdr,
    ed0c:	9b05      	ldr	r3, [sp, #20]
    ed0e:	f8db 0008 	ldr.w	r0, [fp, #8]
    ed12:	785b      	ldrb	r3, [r3, #1]
    ed14:	9200      	str	r2, [sp, #0]
    ed16:	09db      	lsrs	r3, r3, #7
    ed18:	460a      	mov	r2, r1
    ed1a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    ed1e:	4620      	mov	r0, r4
    ed20:	f7fe fcd6 	bl	d6d0 <sdu_recv>
    ed24:	e7eb      	b.n	ecfe <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x29e>
	BT_DBG("AFK %u AID 0x%02x", AKF(buf->data), AID(buf->data));
    ed26:	2104      	movs	r1, #4
    ed28:	f04f 0300 	mov.w	r3, #0
    ed2c:	f361 0307 	bfi	r3, r1, #0, #8
    ed30:	f366 138f 	bfi	r3, r6, #6, #10
    ed34:	f8ad 3000 	strh.w	r3, [sp]
    ed38:	4930      	ldr	r1, [pc, #192]	; (edfc <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x39c>)
    ed3a:	4831      	ldr	r0, [pc, #196]	; (ee00 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x3a0>)
    ed3c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
    ed40:	0992      	lsrs	r2, r2, #6
    ed42:	f011 ff98 	bl	20c76 <log_3>
	if (buf->len < 1) {
    ed46:	88bd      	ldrh	r5, [r7, #4]
    ed48:	b945      	cbnz	r5, ed5c <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x2fc>
		BT_ERR("Too small unsegmented PDU");
    ed4a:	f04f 0100 	mov.w	r1, #0
    ed4e:	2301      	movs	r3, #1
    ed50:	f363 0107 	bfi	r1, r3, #0, #8
    ed54:	f366 118f 	bfi	r1, r6, #6, #10
    ed58:	482a      	ldr	r0, [pc, #168]	; (ee04 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x3a4>)
    ed5a:	e650      	b.n	e9fe <bt_mesh_trans_recv+0x30e>
	if (rx->local_match && is_replay(rx)) {
    ed5c:	7d23      	ldrb	r3, [r4, #20]
    ed5e:	065b      	lsls	r3, r3, #25
    ed60:	d513      	bpl.n	ed8a <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x32a>
    ed62:	4620      	mov	r0, r4
    ed64:	f7fe fc66 	bl	d634 <is_replay>
    ed68:	b178      	cbz	r0, ed8a <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x32a>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    ed6a:	2202      	movs	r2, #2
    ed6c:	f04f 0300 	mov.w	r3, #0
    ed70:	f362 0307 	bfi	r3, r2, #0, #8
    ed74:	f366 138f 	bfi	r3, r6, #6, #10
    ed78:	f8ad 3000 	strh.w	r3, [sp]
    ed7c:	8962      	ldrh	r2, [r4, #10]
    ed7e:	6923      	ldr	r3, [r4, #16]
    ed80:	8921      	ldrh	r1, [r4, #8]
    ed82:	481b      	ldr	r0, [pc, #108]	; (edf0 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x390>)
    ed84:	f011 ff77 	bl	20c76 <log_3>
    ed88:	e518      	b.n	e7bc <bt_mesh_trans_recv+0xcc>
	hdr = net_buf_simple_pull_u8(buf);
    ed8a:	4638      	mov	r0, r7
    ed8c:	f016 f81b 	bl	24dc6 <net_buf_simple_pull_u8>
	if (rx->ctl) {
    ed90:	7d25      	ldrb	r5, [r4, #20]
    ed92:	f015 0808 	ands.w	r8, r5, #8
	hdr = net_buf_simple_pull_u8(buf);
    ed96:	4601      	mov	r1, r0
	if (rx->ctl) {
    ed98:	d007      	beq.n	edaa <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x34a>
		return ctl_recv(rx, hdr, buf, seq_auth);
    ed9a:	ab08      	add	r3, sp, #32
    ed9c:	463a      	mov	r2, r7
    ed9e:	4620      	mov	r0, r4
    eda0:	f7fe feda 	bl	db58 <ctl_recv>
    eda4:	4606      	mov	r6, r0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    eda6:	2500      	movs	r5, #0
    eda8:	e6aa      	b.n	eb00 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xa0>
		if (!rx->local_match && !rx->friend_match) {
    edaa:	f015 05c0 	ands.w	r5, r5, #192	; 0xc0
    edae:	d02b      	beq.n	ee08 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x3a8>
		return sdu_recv(rx, rx->seq, hdr, 0, buf);
    edb0:	4602      	mov	r2, r0
    edb2:	9700      	str	r7, [sp, #0]
    edb4:	4643      	mov	r3, r8
    edb6:	6921      	ldr	r1, [r4, #16]
    edb8:	4620      	mov	r0, r4
    edba:	f7fe fc89 	bl	d6d0 <sdu_recv>
    edbe:	e7f1      	b.n	eda4 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x344>
		return 0;
    edc0:	2600      	movs	r6, #0
    edc2:	e69d      	b.n	eb00 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xa0>
    edc4:	000287d0 	.word	0x000287d0
    edc8:	00028a19 	.word	0x00028a19
    edcc:	00028a43 	.word	0x00028a43
    edd0:	000287dd 	.word	0x000287dd
    edd4:	00028a98 	.word	0x00028a98
    edd8:	00028ab9 	.word	0x00028ab9
    eddc:	00028acb 	.word	0x00028acb
    ede0:	20006c60 	.word	0x20006c60
    ede4:	20001d2c 	.word	0x20001d2c
    ede8:	00028af3 	.word	0x00028af3
    edec:	00028b06 	.word	0x00028b06
    edf0:	00028b17 	.word	0x00028b17
    edf4:	20006c80 	.word	0x20006c80
    edf8:	20006ca0 	.word	0x20006ca0
    edfc:	00028795 	.word	0x00028795
    ee00:	00028b40 	.word	0x00028b40
    ee04:	00028b56 	.word	0x00028b56
			return 0;
    ee08:	462e      	mov	r6, r5
    ee0a:	e679      	b.n	eb00 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xa0>
			return 0;
    ee0c:	461e      	mov	r6, r3
    ee0e:	e691      	b.n	eb34 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0xd4>
		if (rx->seq_auth > *seq_auth) {
    ee10:	458c      	cmp	ip, r1
    ee12:	bf08      	it	eq
    ee14:	4583      	cmpeq	fp, r0
    ee16:	f4bf ad81 	bcs.w	e91c <bt_mesh_trans_recv+0x22c>
			BT_WARN("Ignoring old SeqAuth");
    ee1a:	f04f 0100 	mov.w	r1, #0
    ee1e:	2302      	movs	r3, #2
    ee20:	f363 0107 	bfi	r1, r3, #0, #8
    ee24:	4802      	ldr	r0, [pc, #8]	; (ee30 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x3d0>)
    ee26:	f366 118f 	bfi	r1, r6, #6, #10
		BT_ERR("Inconsistent CTL in segment");
    ee2a:	f011 feeb 	bl	20c04 <log_0>
		return false;
    ee2e:	e4c5      	b.n	e7bc <bt_mesh_trans_recv+0xcc>
    ee30:	00028940 	.word	0x00028940

0000ee34 <bt_mesh_rx_reset>:

void bt_mesh_rx_reset(void)
{
    ee34:	b508      	push	{r3, lr}
	int i;

	BT_DBG("");
    ee36:	f04f 0200 	mov.w	r2, #0
    ee3a:	2304      	movs	r3, #4
    ee3c:	f363 0207 	bfi	r2, r3, #0, #8
    ee40:	4908      	ldr	r1, [pc, #32]	; (ee64 <bt_mesh_rx_reset+0x30>)
    ee42:	4b09      	ldr	r3, [pc, #36]	; (ee68 <bt_mesh_rx_reset+0x34>)
    ee44:	4809      	ldr	r0, [pc, #36]	; (ee6c <bt_mesh_rx_reset+0x38>)
    ee46:	1a5b      	subs	r3, r3, r1
    ee48:	08db      	lsrs	r3, r3, #3
    ee4a:	f363 128f 	bfi	r2, r3, #6, #10
    ee4e:	4908      	ldr	r1, [pc, #32]	; (ee70 <bt_mesh_rx_reset+0x3c>)
    ee50:	f011 fee5 	bl	20c1e <log_1>

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		seg_rx_reset(&seg_rx[i], true);
    ee54:	2101      	movs	r1, #1
    ee56:	4807      	ldr	r0, [pc, #28]	; (ee74 <bt_mesh_rx_reset+0x40>)
    ee58:	f7fe fd60 	bl	d91c <seg_rx_reset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_clear_rpl();
	} else {
		(void)memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
	}
}
    ee5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_clear_rpl();
    ee60:	f015 b8ac 	b.w	23fbc <bt_mesh_clear_rpl>
    ee64:	00025880 	.word	0x00025880
    ee68:	00025968 	.word	0x00025968
    ee6c:	00026623 	.word	0x00026623
    ee70:	000287fa 	.word	0x000287fa
    ee74:	20006c60 	.word	0x20006c60

0000ee78 <bt_mesh_tx_reset>:

void bt_mesh_tx_reset(void)
{
    ee78:	b508      	push	{r3, lr}
	int i;

	BT_DBG("");
    ee7a:	f04f 0200 	mov.w	r2, #0
    ee7e:	2304      	movs	r3, #4
    ee80:	f363 0207 	bfi	r2, r3, #0, #8
    ee84:	4907      	ldr	r1, [pc, #28]	; (eea4 <bt_mesh_tx_reset+0x2c>)
    ee86:	4b08      	ldr	r3, [pc, #32]	; (eea8 <bt_mesh_tx_reset+0x30>)
    ee88:	4808      	ldr	r0, [pc, #32]	; (eeac <bt_mesh_tx_reset+0x34>)
    ee8a:	1a5b      	subs	r3, r3, r1
    ee8c:	08db      	lsrs	r3, r3, #3
    ee8e:	f363 128f 	bfi	r2, r3, #6, #10
    ee92:	4907      	ldr	r1, [pc, #28]	; (eeb0 <bt_mesh_tx_reset+0x38>)
    ee94:	f011 fec3 	bl	20c1e <log_1>

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
    ee98:	4806      	ldr	r0, [pc, #24]	; (eeb4 <bt_mesh_tx_reset+0x3c>)
	}
}
    ee9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		seg_tx_reset(&seg_tx[i]);
    ee9e:	f7fe bd8b 	b.w	d9b8 <seg_tx_reset>
    eea2:	bf00      	nop
    eea4:	00025880 	.word	0x00025880
    eea8:	00025968 	.word	0x00025968
    eeac:	00026623 	.word	0x00026623
    eeb0:	0002880b 	.word	0x0002880b
    eeb4:	20000050 	.word	0x20000050

0000eeb8 <bt_mesh_trans_init>:

void bt_mesh_trans_init(void)
{
    eeb8:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    eeba:	4c07      	ldr	r4, [pc, #28]	; (eed8 <bt_mesh_trans_init+0x20>)
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    eebc:	4907      	ldr	r1, [pc, #28]	; (eedc <bt_mesh_trans_init+0x24>)
    eebe:	4808      	ldr	r0, [pc, #32]	; (eee0 <bt_mesh_trans_init+0x28>)
    eec0:	f016 fac0 	bl	25444 <k_delayed_work_init>
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    eec4:	4907      	ldr	r1, [pc, #28]	; (eee4 <bt_mesh_trans_init+0x2c>)
    eec6:	f104 0020 	add.w	r0, r4, #32
    eeca:	f016 fabb 	bl	25444 <k_delayed_work_init>
		seg_rx[i].buf.__buf = (seg_rx_buf_data +
    eece:	4b06      	ldr	r3, [pc, #24]	; (eee8 <bt_mesh_trans_init+0x30>)
    eed0:	64a3      	str	r3, [r4, #72]	; 0x48
				       (i * CONFIG_BT_MESH_RX_SDU_MAX));
		seg_rx[i].buf.data = seg_rx[i].buf.__buf;
    eed2:	6423      	str	r3, [r4, #64]	; 0x40
	}
}
    eed4:	bd10      	pop	{r4, pc}
    eed6:	bf00      	nop
    eed8:	20006c60 	.word	0x20006c60
    eedc:	000230b9 	.word	0x000230b9
    eee0:	20000078 	.word	0x20000078
    eee4:	0000e63d 	.word	0x0000e63d
    eee8:	200066cd 	.word	0x200066cd

0000eeec <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const u8_t n[16], const u8_t *p, size_t p_len,
	       u8_t net_id[1], u8_t enc_key[16], u8_t priv_key[16])
{
    eeec:	b5f0      	push	{r4, r5, r6, r7, lr}
    eeee:	b095      	sub	sp, #84	; 0x54
    eef0:	4604      	mov	r4, r0
    eef2:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    eef4:	4828      	ldr	r0, [pc, #160]	; (ef98 <bt_mesh_k2+0xac>)
    eef6:	a902      	add	r1, sp, #8
{
    eef8:	4615      	mov	r5, r2
    eefa:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    eefc:	f014 fba0 	bl	23640 <bt_mesh_s1>
	if (err) {
    ef00:	2800      	cmp	r0, #0
    ef02:	d146      	bne.n	ef92 <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    ef04:	4621      	mov	r1, r4
    ef06:	ab0a      	add	r3, sp, #40	; 0x28
    ef08:	2210      	movs	r2, #16
    ef0a:	a802      	add	r0, sp, #8
    ef0c:	f014 fb8e 	bl	2362c <bt_mesh_aes_cmac_one>
	if (err) {
    ef10:	4604      	mov	r4, r0
    ef12:	2800      	cmp	r0, #0
    ef14:	d13a      	bne.n	ef8c <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    ef16:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    ef18:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    ef1c:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ef20:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    ef22:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	pad = 0x01;
    ef26:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = 0;
    ef2a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ef2e:	462b      	mov	r3, r5
    ef30:	2203      	movs	r2, #3
    ef32:	a90e      	add	r1, sp, #56	; 0x38
    ef34:	a80a      	add	r0, sp, #40	; 0x28
    ef36:	f014 fb57 	bl	235e8 <bt_mesh_aes_cmac>
	if (err) {
    ef3a:	4604      	mov	r4, r0
    ef3c:	bb30      	cbnz	r0, ef8c <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    ef3e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    ef42:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    ef44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ef48:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    ef4a:	2302      	movs	r3, #2
    ef4c:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    ef50:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ef52:	462b      	mov	r3, r5
    ef54:	2203      	movs	r2, #3
    ef56:	a90e      	add	r1, sp, #56	; 0x38
    ef58:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    ef5a:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ef5c:	f014 fb44 	bl	235e8 <bt_mesh_aes_cmac>
	if (err) {
    ef60:	4604      	mov	r4, r0
    ef62:	b998      	cbnz	r0, ef8c <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    ef64:	4632      	mov	r2, r6
    ef66:	4629      	mov	r1, r5
    ef68:	981a      	ldr	r0, [sp, #104]	; 0x68
    ef6a:	f012 ff8c 	bl	21e86 <memcpy>

	pad = 0x03;
    ef6e:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ef70:	462b      	mov	r3, r5
    ef72:	a90e      	add	r1, sp, #56	; 0x38
    ef74:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    ef76:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ef7a:	f014 fb35 	bl	235e8 <bt_mesh_aes_cmac>
	if (err) {
    ef7e:	4604      	mov	r4, r0
    ef80:	b920      	cbnz	r0, ef8c <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    ef82:	4632      	mov	r2, r6
    ef84:	4629      	mov	r1, r5
    ef86:	981b      	ldr	r0, [sp, #108]	; 0x6c
    ef88:	f012 ff7d 	bl	21e86 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    ef8c:	4620      	mov	r0, r4
    ef8e:	b015      	add	sp, #84	; 0x54
    ef90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    ef92:	2401      	movs	r4, #1
    ef94:	e7fa      	b.n	ef8c <bt_mesh_k2+0xa0>
    ef96:	bf00      	nop
    ef98:	000290a8 	.word	0x000290a8

0000ef9c <bt_mesh_k3>:

int bt_mesh_k3(const u8_t n[16], u8_t out[8])
{
    ef9c:	b530      	push	{r4, r5, lr}
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    ef9e:	4b14      	ldr	r3, [pc, #80]	; (eff0 <bt_mesh_k3+0x54>)
{
    efa0:	b08b      	sub	sp, #44	; 0x2c
    efa2:	4604      	mov	r4, r0
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    efa4:	6818      	ldr	r0, [r3, #0]
    efa6:	9000      	str	r0, [sp, #0]
{
    efa8:	460d      	mov	r5, r1
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    efaa:	791b      	ldrb	r3, [r3, #4]
	u8_t tmp[16];
	u8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    efac:	4811      	ldr	r0, [pc, #68]	; (eff4 <bt_mesh_k3+0x58>)
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    efae:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
    efb2:	a902      	add	r1, sp, #8
    efb4:	f014 fb44 	bl	23640 <bt_mesh_s1>
	if (err) {
    efb8:	b9b8      	cbnz	r0, efea <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    efba:	4621      	mov	r1, r4
    efbc:	ab06      	add	r3, sp, #24
    efbe:	2210      	movs	r2, #16
    efc0:	a802      	add	r0, sp, #8
    efc2:	f014 fb33 	bl	2362c <bt_mesh_aes_cmac_one>
	if (err) {
    efc6:	4604      	mov	r4, r0
    efc8:	b960      	cbnz	r0, efe4 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    efca:	ab02      	add	r3, sp, #8
    efcc:	2205      	movs	r2, #5
    efce:	4669      	mov	r1, sp
    efd0:	a806      	add	r0, sp, #24
    efd2:	f014 fb2b 	bl	2362c <bt_mesh_aes_cmac_one>
	if (err) {
    efd6:	4604      	mov	r4, r0
    efd8:	b920      	cbnz	r0, efe4 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    efda:	2208      	movs	r2, #8
    efdc:	a904      	add	r1, sp, #16
    efde:	4628      	mov	r0, r5
    efe0:	f012 ff51 	bl	21e86 <memcpy>

	return 0;
}
    efe4:	4620      	mov	r0, r4
    efe6:	b00b      	add	sp, #44	; 0x2c
    efe8:	bd30      	pop	{r4, r5, pc}
		return err;
    efea:	2401      	movs	r4, #1
    efec:	e7fa      	b.n	efe4 <bt_mesh_k3+0x48>
    efee:	bf00      	nop
    eff0:	00025a56 	.word	0x00025a56
    eff4:	000290ad 	.word	0x000290ad

0000eff8 <bt_mesh_k4>:

int bt_mesh_k4(const u8_t n[16], u8_t out[1])
{
    eff8:	b530      	push	{r4, r5, lr}
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
    effa:	4b11      	ldr	r3, [pc, #68]	; (f040 <bt_mesh_k4+0x48>)
{
    effc:	b08b      	sub	sp, #44	; 0x2c
    effe:	4605      	mov	r5, r0
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
    f000:	6818      	ldr	r0, [r3, #0]
    f002:	9001      	str	r0, [sp, #4]
{
    f004:	460c      	mov	r4, r1
	u8_t tmp[16];
	u8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    f006:	480f      	ldr	r0, [pc, #60]	; (f044 <bt_mesh_k4+0x4c>)
    f008:	a902      	add	r1, sp, #8
    f00a:	f014 fb19 	bl	23640 <bt_mesh_s1>
	if (err) {
    f00e:	b9a8      	cbnz	r0, f03c <bt_mesh_k4+0x44>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    f010:	ab06      	add	r3, sp, #24
    f012:	2210      	movs	r2, #16
    f014:	4629      	mov	r1, r5
    f016:	a802      	add	r0, sp, #8
    f018:	f014 fb08 	bl	2362c <bt_mesh_aes_cmac_one>
	if (err) {
    f01c:	b960      	cbnz	r0, f038 <bt_mesh_k4+0x40>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    f01e:	2204      	movs	r2, #4
    f020:	ab02      	add	r3, sp, #8
    f022:	eb0d 0102 	add.w	r1, sp, r2
    f026:	a806      	add	r0, sp, #24
    f028:	f014 fb00 	bl	2362c <bt_mesh_aes_cmac_one>
	if (err) {
    f02c:	b920      	cbnz	r0, f038 <bt_mesh_k4+0x40>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    f02e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f036:	7023      	strb	r3, [r4, #0]

	return 0;
}
    f038:	b00b      	add	sp, #44	; 0x2c
    f03a:	bd30      	pop	{r4, r5, pc}
		return err;
    f03c:	2001      	movs	r0, #1
    f03e:	e7fb      	b.n	f038 <bt_mesh_k4+0x40>
    f040:	00025a5b 	.word	0x00025a5b
    f044:	000290b2 	.word	0x000290b2

0000f048 <bt_mesh_id128>:

int bt_mesh_id128(const u8_t n[16], const char *s, u8_t out[16])
{
    f048:	b530      	push	{r4, r5, lr}
    f04a:	b087      	sub	sp, #28
    f04c:	4604      	mov	r4, r0
    f04e:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	u8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    f050:	a902      	add	r1, sp, #8
{
    f052:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    f054:	f014 faf4 	bl	23640 <bt_mesh_s1>
	if (err) {
    f058:	b940      	cbnz	r0, f06c <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    f05a:	9500      	str	r5, [sp, #0]
    f05c:	4b04      	ldr	r3, [pc, #16]	; (f070 <bt_mesh_id128+0x28>)
    f05e:	aa02      	add	r2, sp, #8
    f060:	2110      	movs	r1, #16
    f062:	4620      	mov	r0, r4
    f064:	f014 fb03 	bl	2366e <bt_mesh_k1>
}
    f068:	b007      	add	sp, #28
    f06a:	bd30      	pop	{r4, r5, pc}
		return err;
    f06c:	2001      	movs	r0, #1
    f06e:	e7fb      	b.n	f068 <bt_mesh_id128+0x20>
    f070:	000290a1 	.word	0x000290a1

0000f074 <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

u8_t bt_mesh_fcs_calc(const u8_t *data, u8_t data_len)
{
    f074:	b510      	push	{r4, lr}
	u8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    f076:	4a06      	ldr	r2, [pc, #24]	; (f090 <bt_mesh_fcs_calc+0x1c>)
    f078:	4401      	add	r1, r0
	u8_t fcs = 0xff;
    f07a:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    f07c:	4288      	cmp	r0, r1
    f07e:	d102      	bne.n	f086 <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    f080:	43d8      	mvns	r0, r3
}
    f082:	b2c0      	uxtb	r0, r0
    f084:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    f086:	f810 4b01 	ldrb.w	r4, [r0], #1
    f08a:	4063      	eors	r3, r4
    f08c:	5cd3      	ldrb	r3, [r2, r3]
    f08e:	e7f5      	b.n	f07c <bt_mesh_fcs_calc+0x8>
    f090:	000290c1 	.word	0x000290c1

0000f094 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, u8_t received_fcs)
{
	const u8_t *data = buf->data;
    f094:	6802      	ldr	r2, [r0, #0]
	u16_t data_len = buf->len;
	u8_t fcs = 0xff;

	while (data_len--) {
    f096:	8880      	ldrh	r0, [r0, #4]
{
    f098:	b530      	push	{r4, r5, lr}
    f09a:	4c08      	ldr	r4, [pc, #32]	; (f0bc <bt_mesh_fcs_check+0x28>)
    f09c:	4410      	add	r0, r2
	u8_t fcs = 0xff;
    f09e:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    f0a0:	4282      	cmp	r2, r0
    f0a2:	d106      	bne.n	f0b2 <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    f0a4:	404b      	eors	r3, r1
    f0a6:	5ce0      	ldrb	r0, [r4, r3]
}
    f0a8:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    f0ac:	4258      	negs	r0, r3
    f0ae:	4158      	adcs	r0, r3
    f0b0:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    f0b2:	f812 5b01 	ldrb.w	r5, [r2], #1
    f0b6:	406b      	eors	r3, r5
    f0b8:	5ce3      	ldrb	r3, [r4, r3]
    f0ba:	e7f1      	b.n	f0a0 <bt_mesh_fcs_check+0xc>
    f0bc:	000290c1 	.word	0x000290c1

0000f0c0 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const u8_t virtual_label[16], u16_t *addr)
{
    f0c0:	b530      	push	{r4, r5, lr}
    f0c2:	b089      	sub	sp, #36	; 0x24
    f0c4:	4605      	mov	r5, r0
    f0c6:	460c      	mov	r4, r1
	u8_t salt[16];
	u8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
    f0c8:	480e      	ldr	r0, [pc, #56]	; (f104 <bt_mesh_virtual_addr+0x44>)
    f0ca:	4669      	mov	r1, sp
    f0cc:	f014 fab8 	bl	23640 <bt_mesh_s1>
	if (err) {
    f0d0:	b9a8      	cbnz	r0, f0fe <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
    f0d2:	ab04      	add	r3, sp, #16
    f0d4:	2210      	movs	r2, #16
    f0d6:	4629      	mov	r1, r5
    f0d8:	4668      	mov	r0, sp
    f0da:	f014 faa7 	bl	2362c <bt_mesh_aes_cmac_one>
	if (err) {
    f0de:	b960      	cbnz	r0, f0fa <bt_mesh_virtual_addr+0x3a>
	return ((u16_t)src[0] << 8) | src[1];
    f0e0:	f89d 201e 	ldrb.w	r2, [sp, #30]
    f0e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    f0e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
    f0ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f0f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    f0f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    f0f8:	8023      	strh	r3, [r4, #0]

	return 0;
}
    f0fa:	b009      	add	sp, #36	; 0x24
    f0fc:	bd30      	pop	{r4, r5, pc}
		return err;
    f0fe:	2001      	movs	r0, #1
    f100:	e7fb      	b.n	f0fa <bt_mesh_virtual_addr+0x3a>
    f102:	bf00      	nop
    f104:	000290bc 	.word	0x000290bc

0000f108 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const u8_t dhkey[32], const u8_t conf_salt[16],
			  u8_t conf_key[16])
{
    f108:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
    f10a:	4b04      	ldr	r3, [pc, #16]	; (f11c <bt_mesh_prov_conf_key+0x14>)
    f10c:	9200      	str	r2, [sp, #0]
    f10e:	460a      	mov	r2, r1
    f110:	2120      	movs	r1, #32
    f112:	f014 faac 	bl	2366e <bt_mesh_k1>
}
    f116:	b003      	add	sp, #12
    f118:	f85d fb04 	ldr.w	pc, [sp], #4
    f11c:	000290b7 	.word	0x000290b7

0000f120 <model_send>:

static int model_send(struct bt_mesh_model *model,
		      struct bt_mesh_net_tx *tx, bool implicit_bind,
		      struct net_buf_simple *msg,
		      const struct bt_mesh_send_cb *cb, void *cb_data)
{
    f120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f124:	4680      	mov	r8, r0
    f126:	460d      	mov	r5, r1
    f128:	4691      	mov	r9, r2
    f12a:	461c      	mov	r4, r3
    f12c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
	BT_DBG("net_idx 0x%04x app_idx 0x%04x dst 0x%04x", tx->ctx->net_idx,
	       tx->ctx->app_idx, tx->ctx->addr);
	BT_DBG("len %u: %s", msg->len, bt_hex(msg->data, msg->len));

	if (!bt_mesh_is_provisioned()) {
    f130:	f013 ff3d 	bl	22fae <bt_mesh_is_provisioned>
    f134:	b988      	cbnz	r0, f15a <model_send+0x3a>
		BT_ERR("Local node is not yet provisioned");
    f136:	2301      	movs	r3, #1
    f138:	f04f 0100 	mov.w	r1, #0
    f13c:	f363 0107 	bfi	r1, r3, #0, #8
    f140:	4a2b      	ldr	r2, [pc, #172]	; (f1f0 <model_send+0xd0>)
    f142:	4b2c      	ldr	r3, [pc, #176]	; (f1f4 <model_send+0xd4>)
    f144:	482c      	ldr	r0, [pc, #176]	; (f1f8 <model_send+0xd8>)
    f146:	1a9b      	subs	r3, r3, r2
    f148:	08db      	lsrs	r3, r3, #3
    f14a:	f363 118f 	bfi	r1, r3, #6, #10
    f14e:	f011 fd59 	bl	20c04 <log_0>
		return -EAGAIN;
    f152:	f06f 000a 	mvn.w	r0, #10
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
		return -EINVAL;
	}

	return bt_mesh_trans_send(tx, msg, cb, cb_data);
}
    f156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
    f15a:	4620      	mov	r0, r4
    f15c:	f015 fe5b 	bl	24e16 <net_buf_simple_tailroom>
    f160:	2803      	cmp	r0, #3
    f162:	d810      	bhi.n	f186 <model_send+0x66>
		BT_ERR("Not enough tailroom for TransMIC");
    f164:	2301      	movs	r3, #1
    f166:	f04f 0100 	mov.w	r1, #0
    f16a:	f363 0107 	bfi	r1, r3, #0, #8
    f16e:	4a20      	ldr	r2, [pc, #128]	; (f1f0 <model_send+0xd0>)
    f170:	4b20      	ldr	r3, [pc, #128]	; (f1f4 <model_send+0xd4>)
    f172:	4822      	ldr	r0, [pc, #136]	; (f1fc <model_send+0xdc>)
    f174:	1a9b      	subs	r3, r3, r2
    f176:	08db      	lsrs	r3, r3, #3
    f178:	f363 118f 	bfi	r1, r3, #6, #10
    f17c:	f011 fd42 	bl	20c04 <log_0>
		return -EINVAL;
    f180:	f06f 0015 	mvn.w	r0, #21
    f184:	e7e7      	b.n	f156 <model_send+0x36>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
    f186:	88a3      	ldrh	r3, [r4, #4]
    f188:	2b20      	cmp	r3, #32
    f18a:	d910      	bls.n	f1ae <model_send+0x8e>
		BT_ERR("Too big message");
    f18c:	2301      	movs	r3, #1
    f18e:	f04f 0100 	mov.w	r1, #0
    f192:	f363 0107 	bfi	r1, r3, #0, #8
    f196:	4a16      	ldr	r2, [pc, #88]	; (f1f0 <model_send+0xd0>)
    f198:	4b16      	ldr	r3, [pc, #88]	; (f1f4 <model_send+0xd4>)
    f19a:	4819      	ldr	r0, [pc, #100]	; (f200 <model_send+0xe0>)
    f19c:	1a9b      	subs	r3, r3, r2
    f19e:	08db      	lsrs	r3, r3, #3
    f1a0:	f363 118f 	bfi	r1, r3, #6, #10
    f1a4:	f011 fd2e 	bl	20c04 <log_0>
		return -EMSGSIZE;
    f1a8:	f06f 0023 	mvn.w	r0, #35	; 0x23
    f1ac:	e7d3      	b.n	f156 <model_send+0x36>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
    f1ae:	f1b9 0f00 	cmp.w	r9, #0
    f1b2:	d114      	bne.n	f1de <model_send+0xbe>
    f1b4:	686b      	ldr	r3, [r5, #4]
    f1b6:	8859      	ldrh	r1, [r3, #2]
		if (mod->keys[i] == key) {
    f1b8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    f1bc:	428b      	cmp	r3, r1
    f1be:	d00e      	beq.n	f1de <model_send+0xbe>
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
    f1c0:	2301      	movs	r3, #1
    f1c2:	f04f 0200 	mov.w	r2, #0
    f1c6:	f363 0207 	bfi	r2, r3, #0, #8
    f1ca:	4809      	ldr	r0, [pc, #36]	; (f1f0 <model_send+0xd0>)
    f1cc:	4b09      	ldr	r3, [pc, #36]	; (f1f4 <model_send+0xd4>)
    f1ce:	1a1b      	subs	r3, r3, r0
    f1d0:	08db      	lsrs	r3, r3, #3
    f1d2:	f363 128f 	bfi	r2, r3, #6, #10
    f1d6:	480b      	ldr	r0, [pc, #44]	; (f204 <model_send+0xe4>)
    f1d8:	f011 fd21 	bl	20c1e <log_1>
    f1dc:	e7d0      	b.n	f180 <model_send+0x60>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    f1de:	463b      	mov	r3, r7
    f1e0:	4632      	mov	r2, r6
    f1e2:	4621      	mov	r1, r4
    f1e4:	4628      	mov	r0, r5
}
    f1e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    f1ea:	f7ff b855 	b.w	e298 <bt_mesh_trans_send>
    f1ee:	bf00      	nop
    f1f0:	00025880 	.word	0x00025880
    f1f4:	00025908 	.word	0x00025908
    f1f8:	00029362 	.word	0x00029362
    f1fc:	00029384 	.word	0x00029384
    f200:	000293a5 	.word	0x000293a5
    f204:	000293b5 	.word	0x000293b5

0000f208 <mod_init>:
{
    f208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f20a:	4604      	mov	r4, r0
	if (mod->pub) {
    f20c:	6880      	ldr	r0, [r0, #8]
{
    f20e:	460e      	mov	r6, r1
    f210:	4617      	mov	r7, r2
    f212:	461d      	mov	r5, r3
	if (mod->pub) {
    f214:	b120      	cbz	r0, f220 <mod_init+0x18>
		mod->pub->mod = mod;
    f216:	f840 4b18 	str.w	r4, [r0], #24
		k_delayed_work_init(&mod->pub->timer, mod_publish);
    f21a:	4914      	ldr	r1, [pc, #80]	; (f26c <mod_init+0x64>)
    f21c:	f016 f912 	bl	25444 <k_delayed_work_init>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    f220:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f224:	81a3      	strh	r3, [r4, #12]
	mod->elem_idx = elem - dev_comp->elem;
    f226:	4b12      	ldr	r3, [pc, #72]	; (f270 <mod_init+0x68>)
    f228:	681b      	ldr	r3, [r3, #0]
    f22a:	68db      	ldr	r3, [r3, #12]
    f22c:	1af3      	subs	r3, r6, r3
    f22e:	111b      	asrs	r3, r3, #4
    f230:	7123      	strb	r3, [r4, #4]
	if (vnd) {
    f232:	4b10      	ldr	r3, [pc, #64]	; (f274 <mod_init+0x6c>)
    f234:	b12f      	cbz	r7, f242 <mod_init+0x3a>
		mod->mod_idx = mod - elem->vnd_models;
    f236:	68f2      	ldr	r2, [r6, #12]
    f238:	1aa2      	subs	r2, r4, r2
    f23a:	1092      	asrs	r2, r2, #2
    f23c:	4353      	muls	r3, r2
    f23e:	7163      	strb	r3, [r4, #5]
}
    f240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mod->mod_idx = mod - elem->models;
    f242:	68b2      	ldr	r2, [r6, #8]
    f244:	1aa2      	subs	r2, r4, r2
    f246:	1092      	asrs	r2, r2, #2
    f248:	4353      	muls	r3, r2
    f24a:	7163      	strb	r3, [r4, #5]
		if (model_init[i].id == mod->id) {
    f24c:	8823      	ldrh	r3, [r4, #0]
    f24e:	b91b      	cbnz	r3, f258 <mod_init+0x50>
			model_init[i].init(mod, primary);
    f250:	4629      	mov	r1, r5
    f252:	4620      	mov	r0, r4
    f254:	f002 fad4 	bl	11800 <bt_mesh_cfg_srv_init>
		if (model_init[i].id == mod->id) {
    f258:	8823      	ldrh	r3, [r4, #0]
    f25a:	2b02      	cmp	r3, #2
    f25c:	d1f0      	bne.n	f240 <mod_init+0x38>
			model_init[i].init(mod, primary);
    f25e:	4629      	mov	r1, r5
    f260:	4620      	mov	r0, r4
}
    f262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			model_init[i].init(mod, primary);
    f266:	f003 bbc5 	b.w	129f4 <bt_mesh_health_srv_init>
    f26a:	bf00      	nop
    f26c:	0000f85d 	.word	0x0000f85d
    f270:	20000d0c 	.word	0x20000d0c
    f274:	b6db6db7 	.word	0xb6db6db7

0000f278 <bt_mesh_model_foreach>:
{
    f278:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    f27c:	f8df a068 	ldr.w	sl, [pc, #104]	; f2e8 <bt_mesh_model_foreach+0x70>
{
    f280:	4607      	mov	r7, r0
    f282:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    f284:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
    f286:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
    f28a:	f8da 3000 	ldr.w	r3, [sl]
    f28e:	689a      	ldr	r2, [r3, #8]
    f290:	42aa      	cmp	r2, r5
    f292:	d802      	bhi.n	f29a <bt_mesh_model_foreach+0x22>
}
    f294:	b002      	add	sp, #8
    f296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f29a:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    f29c:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f29e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    f2a2:	7923      	ldrb	r3, [r4, #4]
    f2a4:	42b3      	cmp	r3, r6
    f2a6:	dc05      	bgt.n	f2b4 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
    f2a8:	2600      	movs	r6, #0
    f2aa:	7963      	ldrb	r3, [r4, #5]
    f2ac:	42b3      	cmp	r3, r6
    f2ae:	dc0e      	bgt.n	f2ce <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
    f2b0:	3501      	adds	r5, #1
    f2b2:	e7ea      	b.n	f28a <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
    f2b4:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    f2b6:	f8cd 8000 	str.w	r8, [sp]
    f2ba:	fab5 f385 	clz	r3, r5
    f2be:	fb09 0006 	mla	r0, r9, r6, r0
    f2c2:	095b      	lsrs	r3, r3, #5
    f2c4:	2200      	movs	r2, #0
    f2c6:	4621      	mov	r1, r4
    f2c8:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
    f2ca:	3601      	adds	r6, #1
    f2cc:	e7e9      	b.n	f2a2 <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    f2ce:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    f2d0:	f8cd 8000 	str.w	r8, [sp]
    f2d4:	fab5 f385 	clz	r3, r5
    f2d8:	fb09 0006 	mla	r0, r9, r6, r0
    f2dc:	095b      	lsrs	r3, r3, #5
    f2de:	2201      	movs	r2, #1
    f2e0:	4621      	mov	r1, r4
    f2e2:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
    f2e4:	3601      	adds	r6, #1
    f2e6:	e7e0      	b.n	f2aa <bt_mesh_model_foreach+0x32>
    f2e8:	20000d0c 	.word	0x20000d0c

0000f2ec <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
    f2ec:	6880      	ldr	r0, [r0, #8]
    f2ee:	b178      	cbz	r0, f310 <bt_mesh_model_pub_period_get+0x24>
	switch (mod->pub->period >> 6) {
    f2f0:	7a83      	ldrb	r3, [r0, #10]
    f2f2:	099a      	lsrs	r2, r3, #6
    f2f4:	2a02      	cmp	r2, #2
    f2f6:	d012      	beq.n	f31e <bt_mesh_model_pub_period_get+0x32>
    f2f8:	2a03      	cmp	r2, #3
    f2fa:	d015      	beq.n	f328 <bt_mesh_model_pub_period_get+0x3c>
    f2fc:	2a01      	cmp	r2, #1
    f2fe:	d008      	beq.n	f312 <bt_mesh_model_pub_period_get+0x26>
		period = K_MSEC((mod->pub->period & BIT_MASK(6)) * 100);
    f300:	2264      	movs	r2, #100	; 0x64
    f302:	fb13 f302 	smulbb	r3, r3, r2
	return period >> mod->pub->period_div;
    f306:	7ac0      	ldrb	r0, [r0, #11]
    f308:	f000 000f 	and.w	r0, r0, #15
    f30c:	fa43 f000 	asr.w	r0, r3, r0
}
    f310:	4770      	bx	lr
		period = K_SECONDS(mod->pub->period & BIT_MASK(6));
    f312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
    f31a:	4353      	muls	r3, r2
		break;
    f31c:	e7f3      	b.n	f306 <bt_mesh_model_pub_period_get+0x1a>
		period = K_SECONDS((mod->pub->period & BIT_MASK(6)) * 10);
    f31e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f322:	f242 7210 	movw	r2, #10000	; 0x2710
    f326:	e7f8      	b.n	f31a <bt_mesh_model_pub_period_get+0x2e>
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
    f328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f32c:	4a00      	ldr	r2, [pc, #0]	; (f330 <bt_mesh_model_pub_period_get+0x44>)
    f32e:	e7f4      	b.n	f31a <bt_mesh_model_pub_period_get+0x2e>
    f330:	000927c0 	.word	0x000927c0

0000f334 <publish_sent>:
{
    f334:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
    f336:	688e      	ldr	r6, [r1, #8]
    f338:	7af3      	ldrb	r3, [r6, #11]
    f33a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
    f33e:	460d      	mov	r5, r1
	if (mod->pub->count) {
    f340:	d00b      	beq.n	f35a <publish_sent+0x26>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
    f342:	7a72      	ldrb	r2, [r6, #9]
    f344:	08d0      	lsrs	r0, r2, #3
    f346:	2232      	movs	r2, #50	; 0x32
    f348:	fb00 2202 	mla	r2, r0, r2, r2
		k_delayed_work_submit(&mod->pub->timer, delay);
    f34c:	68a9      	ldr	r1, [r5, #8]
    f34e:	4812      	ldr	r0, [pc, #72]	; (f398 <publish_sent+0x64>)
    f350:	3118      	adds	r1, #24
}
    f352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f356:	f00f bd2b 	b.w	1edb0 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
    f35a:	4608      	mov	r0, r1
    f35c:	f7ff ffc6 	bl	f2ec <bt_mesh_model_pub_period_get>
	if (!period) {
    f360:	4604      	mov	r4, r0
    f362:	b1c0      	cbz	r0, f396 <publish_sent+0x62>
    f364:	f016 f8c7 	bl	254f6 <z_impl_k_uptime_get_32>
	elapsed = k_uptime_get_32() - pub->period_start;
    f368:	68f2      	ldr	r2, [r6, #12]
    f36a:	1a83      	subs	r3, r0, r2
	if (elapsed > period) {
    f36c:	429c      	cmp	r4, r3
    f36e:	d20f      	bcs.n	f390 <publish_sent+0x5c>
		BT_WARN("Publication sending took longer than the period");
    f370:	2302      	movs	r3, #2
    f372:	f04f 0100 	mov.w	r1, #0
    f376:	4a09      	ldr	r2, [pc, #36]	; (f39c <publish_sent+0x68>)
    f378:	4809      	ldr	r0, [pc, #36]	; (f3a0 <publish_sent+0x6c>)
    f37a:	f363 0107 	bfi	r1, r3, #0, #8
    f37e:	4b09      	ldr	r3, [pc, #36]	; (f3a4 <publish_sent+0x70>)
    f380:	1a9b      	subs	r3, r3, r2
    f382:	08db      	lsrs	r3, r3, #3
    f384:	f363 118f 	bfi	r1, r3, #6, #10
    f388:	f011 fc3c 	bl	20c04 <log_0>
		return K_MSEC(1);
    f38c:	2201      	movs	r2, #1
    f38e:	e7dd      	b.n	f34c <publish_sent+0x18>
	return period - elapsed;
    f390:	4414      	add	r4, r2
	if (delay) {
    f392:	1a22      	subs	r2, r4, r0
    f394:	d1da      	bne.n	f34c <publish_sent+0x18>
}
    f396:	bd70      	pop	{r4, r5, r6, pc}
    f398:	20001d2c 	.word	0x20001d2c
    f39c:	00025880 	.word	0x00025880
    f3a0:	000293d6 	.word	0x000293d6
    f3a4:	00025908 	.word	0x00025908

0000f3a8 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
    f3a8:	4b03      	ldr	r3, [pc, #12]	; (f3b8 <bt_mesh_model_elem+0x10>)
    f3aa:	7900      	ldrb	r0, [r0, #4]
    f3ac:	681b      	ldr	r3, [r3, #0]
    f3ae:	68db      	ldr	r3, [r3, #12]
}
    f3b0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    f3b4:	4770      	bx	lr
    f3b6:	bf00      	nop
    f3b8:	20000d0c 	.word	0x20000d0c

0000f3bc <bt_mesh_model_get>:
{
    f3bc:	b538      	push	{r3, r4, r5, lr}
    f3be:	4604      	mov	r4, r0
    f3c0:	4610      	mov	r0, r2
	if (elem_idx >= dev_comp->elem_count) {
    f3c2:	4a23      	ldr	r2, [pc, #140]	; (f450 <bt_mesh_model_get+0x94>)
    f3c4:	6812      	ldr	r2, [r2, #0]
    f3c6:	6895      	ldr	r5, [r2, #8]
    f3c8:	42a9      	cmp	r1, r5
{
    f3ca:	460b      	mov	r3, r1
	if (elem_idx >= dev_comp->elem_count) {
    f3cc:	d30f      	bcc.n	f3ee <bt_mesh_model_get+0x32>
		BT_ERR("Invalid element index %u", elem_idx);
    f3ce:	2301      	movs	r3, #1
    f3d0:	f04f 0200 	mov.w	r2, #0
    f3d4:	f363 0207 	bfi	r2, r3, #0, #8
    f3d8:	481e      	ldr	r0, [pc, #120]	; (f454 <bt_mesh_model_get+0x98>)
    f3da:	4b1f      	ldr	r3, [pc, #124]	; (f458 <bt_mesh_model_get+0x9c>)
    f3dc:	1a1b      	subs	r3, r3, r0
    f3de:	08db      	lsrs	r3, r3, #3
    f3e0:	481e      	ldr	r0, [pc, #120]	; (f45c <bt_mesh_model_get+0xa0>)
    f3e2:	f363 128f 	bfi	r2, r3, #6, #10
    f3e6:	f011 fc1a 	bl	20c1e <log_1>
		return NULL;
    f3ea:	2000      	movs	r0, #0
}
    f3ec:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
    f3ee:	68d1      	ldr	r1, [r2, #12]
    f3f0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
	if (vnd) {
    f3f4:	b1b4      	cbz	r4, f424 <bt_mesh_model_get+0x68>
		if (mod_idx >= elem->vnd_model_count) {
    f3f6:	794b      	ldrb	r3, [r1, #5]
    f3f8:	4283      	cmp	r3, r0
    f3fa:	d80d      	bhi.n	f418 <bt_mesh_model_get+0x5c>
			BT_ERR("Invalid vendor model index %u", mod_idx);
    f3fc:	2301      	movs	r3, #1
    f3fe:	f04f 0200 	mov.w	r2, #0
    f402:	f363 0207 	bfi	r2, r3, #0, #8
    f406:	4913      	ldr	r1, [pc, #76]	; (f454 <bt_mesh_model_get+0x98>)
    f408:	4b13      	ldr	r3, [pc, #76]	; (f458 <bt_mesh_model_get+0x9c>)
    f40a:	1a5b      	subs	r3, r3, r1
    f40c:	08db      	lsrs	r3, r3, #3
    f40e:	4601      	mov	r1, r0
    f410:	f363 128f 	bfi	r2, r3, #6, #10
    f414:	4812      	ldr	r0, [pc, #72]	; (f460 <bt_mesh_model_get+0xa4>)
    f416:	e7e6      	b.n	f3e6 <bt_mesh_model_get+0x2a>
		return &elem->vnd_models[mod_idx];
    f418:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    f41c:	68c8      	ldr	r0, [r1, #12]
		return &elem->models[mod_idx];
    f41e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    f422:	e7e3      	b.n	f3ec <bt_mesh_model_get+0x30>
		if (mod_idx >= elem->model_count) {
    f424:	790b      	ldrb	r3, [r1, #4]
    f426:	4283      	cmp	r3, r0
    f428:	d80d      	bhi.n	f446 <bt_mesh_model_get+0x8a>
			BT_ERR("Invalid SIG model index %u", mod_idx);
    f42a:	2301      	movs	r3, #1
    f42c:	f04f 0200 	mov.w	r2, #0
    f430:	f363 0207 	bfi	r2, r3, #0, #8
    f434:	4907      	ldr	r1, [pc, #28]	; (f454 <bt_mesh_model_get+0x98>)
    f436:	4b08      	ldr	r3, [pc, #32]	; (f458 <bt_mesh_model_get+0x9c>)
    f438:	1a5b      	subs	r3, r3, r1
    f43a:	08db      	lsrs	r3, r3, #3
    f43c:	4601      	mov	r1, r0
    f43e:	f363 128f 	bfi	r2, r3, #6, #10
    f442:	4808      	ldr	r0, [pc, #32]	; (f464 <bt_mesh_model_get+0xa8>)
    f444:	e7cf      	b.n	f3e6 <bt_mesh_model_get+0x2a>
		return &elem->models[mod_idx];
    f446:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    f44a:	6888      	ldr	r0, [r1, #8]
    f44c:	e7e7      	b.n	f41e <bt_mesh_model_get+0x62>
    f44e:	bf00      	nop
    f450:	20000d0c 	.word	0x20000d0c
    f454:	00025880 	.word	0x00025880
    f458:	00025908 	.word	0x00025908
    f45c:	000291d0 	.word	0x000291d0
    f460:	000291e9 	.word	0x000291e9
    f464:	00029207 	.word	0x00029207

0000f468 <bt_mesh_comp_register>:
{
    f468:	b508      	push	{r3, lr}
	if (!comp->elem_count) {
    f46a:	6883      	ldr	r3, [r0, #8]
    f46c:	b13b      	cbz	r3, f47e <bt_mesh_comp_register+0x16>
	dev_comp = comp;
    f46e:	4b05      	ldr	r3, [pc, #20]	; (f484 <bt_mesh_comp_register+0x1c>)
	bt_mesh_model_foreach(mod_init, NULL);
    f470:	2100      	movs	r1, #0
	dev_comp = comp;
    f472:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    f474:	4804      	ldr	r0, [pc, #16]	; (f488 <bt_mesh_comp_register+0x20>)
    f476:	f7ff feff 	bl	f278 <bt_mesh_model_foreach>
	return 0;
    f47a:	2000      	movs	r0, #0
}
    f47c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f47e:	f06f 0015 	mvn.w	r0, #21
    f482:	e7fb      	b.n	f47c <bt_mesh_comp_register+0x14>
    f484:	20000d0c 	.word	0x20000d0c
    f488:	0000f209 	.word	0x0000f209

0000f48c <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
    f48c:	4b08      	ldr	r3, [pc, #32]	; (f4b0 <bt_mesh_comp_provision+0x24>)
{
    f48e:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    f490:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f492:	4b08      	ldr	r3, [pc, #32]	; (f4b4 <bt_mesh_comp_provision+0x28>)
    f494:	6819      	ldr	r1, [r3, #0]
    f496:	688c      	ldr	r4, [r1, #8]
    f498:	2300      	movs	r3, #0
    f49a:	18c2      	adds	r2, r0, r3
    f49c:	42a3      	cmp	r3, r4
    f49e:	b292      	uxth	r2, r2
    f4a0:	d100      	bne.n	f4a4 <bt_mesh_comp_provision+0x18>
}
    f4a2:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    f4a4:	011d      	lsls	r5, r3, #4
    f4a6:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f4a8:	3301      	adds	r3, #1
		elem->addr = addr++;
    f4aa:	5372      	strh	r2, [r6, r5]
		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
    f4ac:	e7f5      	b.n	f49a <bt_mesh_comp_provision+0xe>
    f4ae:	bf00      	nop
    f4b0:	20001e44 	.word	0x20001e44
    f4b4:	20000d0c 	.word	0x20000d0c

0000f4b8 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    f4b8:	4b02      	ldr	r3, [pc, #8]	; (f4c4 <bt_mesh_comp_unprovision+0xc>)
	bt_mesh_model_foreach(mod_init, NULL);
    f4ba:	4803      	ldr	r0, [pc, #12]	; (f4c8 <bt_mesh_comp_unprovision+0x10>)
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    f4bc:	2100      	movs	r1, #0
    f4be:	8019      	strh	r1, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    f4c0:	f7ff beda 	b.w	f278 <bt_mesh_model_foreach>
    f4c4:	20001e44 	.word	0x20001e44
    f4c8:	0000f209 	.word	0x0000f209

0000f4cc <bt_mesh_primary_addr>:
}
    f4cc:	4b01      	ldr	r3, [pc, #4]	; (f4d4 <bt_mesh_primary_addr+0x8>)
    f4ce:	8818      	ldrh	r0, [r3, #0]
    f4d0:	4770      	bx	lr
    f4d2:	bf00      	nop
    f4d4:	20001e44 	.word	0x20001e44

0000f4d8 <bt_mesh_elem_find>:
	for (i = 0; i < dev_comp->elem_count; i++) {
    f4d8:	4b1e      	ldr	r3, [pc, #120]	; (f554 <bt_mesh_elem_find+0x7c>)
{
    f4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    f4de:	681d      	ldr	r5, [r3, #0]
    f4e0:	68af      	ldr	r7, [r5, #8]
    f4e2:	2200      	movs	r2, #0
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    f4e4:	f480 4c00 	eor.w	ip, r0, #32768	; 0x8000
		model = &elem->models[i];
    f4e8:	261c      	movs	r6, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
    f4ea:	42ba      	cmp	r2, r7
    f4ec:	d101      	bne.n	f4f2 <bt_mesh_elem_find+0x1a>
	return NULL;
    f4ee:	2300      	movs	r3, #0
    f4f0:	e02d      	b.n	f54e <bt_mesh_elem_find+0x76>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f4f2:	68ec      	ldr	r4, [r5, #12]
    f4f4:	0111      	lsls	r1, r2, #4
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    f4f6:	f5bc 4ffe 	cmp.w	ip, #32512	; 0x7f00
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f4fa:	eb04 0301 	add.w	r3, r4, r1
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    f4fe:	d823      	bhi.n	f548 <bt_mesh_elem_find+0x70>
	for (i = 0; i < elem->model_count; i++) {
    f500:	f893 e004 	ldrb.w	lr, [r3, #4]
    f504:	2100      	movs	r1, #0
    f506:	4571      	cmp	r1, lr
    f508:	db06      	blt.n	f518 <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
    f50a:	f893 e005 	ldrb.w	lr, [r3, #5]
    f50e:	2100      	movs	r1, #0
    f510:	4571      	cmp	r1, lr
    f512:	db0d      	blt.n	f530 <bt_mesh_elem_find+0x58>
	for (i = 0; i < dev_comp->elem_count; i++) {
    f514:	3201      	adds	r2, #1
    f516:	e7e8      	b.n	f4ea <bt_mesh_elem_find+0x12>
		model = &elem->models[i];
    f518:	689c      	ldr	r4, [r3, #8]
    f51a:	fb06 4401 	mla	r4, r6, r1, r4
		if (mod->groups[i] == addr) {
    f51e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
    f522:	4580      	cmp	r8, r0
    f524:	d013      	beq.n	f54e <bt_mesh_elem_find+0x76>
    f526:	8a24      	ldrh	r4, [r4, #16]
    f528:	4284      	cmp	r4, r0
    f52a:	d010      	beq.n	f54e <bt_mesh_elem_find+0x76>
	for (i = 0; i < elem->model_count; i++) {
    f52c:	3101      	adds	r1, #1
    f52e:	e7ea      	b.n	f506 <bt_mesh_elem_find+0x2e>
		model = &elem->vnd_models[i];
    f530:	68dc      	ldr	r4, [r3, #12]
    f532:	fb06 4401 	mla	r4, r6, r1, r4
		if (mod->groups[i] == addr) {
    f536:	f8b4 800e 	ldrh.w	r8, [r4, #14]
    f53a:	4580      	cmp	r8, r0
    f53c:	d007      	beq.n	f54e <bt_mesh_elem_find+0x76>
    f53e:	8a24      	ldrh	r4, [r4, #16]
    f540:	4284      	cmp	r4, r0
    f542:	d004      	beq.n	f54e <bt_mesh_elem_find+0x76>
	for (i = 0; i < elem->vnd_model_count; i++) {
    f544:	3101      	adds	r1, #1
    f546:	e7e3      	b.n	f510 <bt_mesh_elem_find+0x38>
		} else if (elem->addr == addr) {
    f548:	5a61      	ldrh	r1, [r4, r1]
    f54a:	4281      	cmp	r1, r0
    f54c:	d1e2      	bne.n	f514 <bt_mesh_elem_find+0x3c>
}
    f54e:	4618      	mov	r0, r3
    f550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f554:	20000d0c 	.word	0x20000d0c

0000f558 <bt_mesh_elem_count>:
	return dev_comp->elem_count;
    f558:	4b01      	ldr	r3, [pc, #4]	; (f560 <bt_mesh_elem_count+0x8>)
    f55a:	681b      	ldr	r3, [r3, #0]
}
    f55c:	7a18      	ldrb	r0, [r3, #8]
    f55e:	4770      	bx	lr
    f560:	20000d0c 	.word	0x20000d0c

0000f564 <bt_mesh_model_recv>:
{
    f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    f568:	680b      	ldr	r3, [r1, #0]
    f56a:	4e66      	ldr	r6, [pc, #408]	; (f704 <bt_mesh_model_recv+0x1a0>)
    f56c:	781b      	ldrb	r3, [r3, #0]
{
    f56e:	460c      	mov	r4, r1
    f570:	4965      	ldr	r1, [pc, #404]	; (f708 <bt_mesh_model_recv+0x1a4>)
	switch (buf->data[0] >> 6) {
    f572:	099a      	lsrs	r2, r3, #6
    f574:	1a76      	subs	r6, r6, r1
    f576:	2a02      	cmp	r2, #2
{
    f578:	b085      	sub	sp, #20
    f57a:	4683      	mov	fp, r0
    f57c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
	switch (buf->data[0] >> 6) {
    f580:	d02b      	beq.n	f5da <bt_mesh_model_recv+0x76>
    f582:	2a03      	cmp	r2, #3
    f584:	d039      	beq.n	f5fa <bt_mesh_model_recv+0x96>
		if (buf->data[0] == 0x7f) {
    f586:	2b7f      	cmp	r3, #127	; 0x7f
    f588:	d116      	bne.n	f5b8 <bt_mesh_model_recv+0x54>
			BT_ERR("Ignoring RFU OpCode");
    f58a:	f04f 0100 	mov.w	r1, #0
    f58e:	2301      	movs	r3, #1
    f590:	f363 0107 	bfi	r1, r3, #0, #8
    f594:	485d      	ldr	r0, [pc, #372]	; (f70c <bt_mesh_model_recv+0x1a8>)
    f596:	f366 118f 	bfi	r1, r6, #6, #10
			BT_ERR("Too short payload for 2-octet OpCode");
    f59a:	f011 fb33 	bl	20c04 <log_0>
		BT_WARN("Unable to decode OpCode");
    f59e:	2302      	movs	r3, #2
    f5a0:	f04f 0100 	mov.w	r1, #0
    f5a4:	f363 0107 	bfi	r1, r3, #0, #8
    f5a8:	4859      	ldr	r0, [pc, #356]	; (f710 <bt_mesh_model_recv+0x1ac>)
    f5aa:	f366 118f 	bfi	r1, r6, #6, #10
}
    f5ae:	b005      	add	sp, #20
    f5b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
    f5b4:	f011 bb26 	b.w	20c04 <log_0>
		*opcode = net_buf_simple_pull_u8(buf);
    f5b8:	4620      	mov	r0, r4
    f5ba:	f015 fc04 	bl	24dc6 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    f5be:	4607      	mov	r7, r0
			op->func(model, &rx->ctx, buf);
    f5c0:	f10b 0304 	add.w	r3, fp, #4
		op = find_op(models, count, rx->ctx.recv_dst, rx->ctx.app_idx,
    f5c4:	f04f 0800 	mov.w	r8, #0
			op->func(model, &rx->ctx, buf);
    f5c8:	9302      	str	r3, [sp, #8]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f5ca:	4b52      	ldr	r3, [pc, #328]	; (f714 <bt_mesh_model_recv+0x1b0>)
    f5cc:	681b      	ldr	r3, [r3, #0]
    f5ce:	689a      	ldr	r2, [r3, #8]
    f5d0:	4542      	cmp	r2, r8
    f5d2:	d828      	bhi.n	f626 <bt_mesh_model_recv+0xc2>
}
    f5d4:	b005      	add	sp, #20
    f5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    f5da:	88a3      	ldrh	r3, [r4, #4]
    f5dc:	2b01      	cmp	r3, #1
    f5de:	d808      	bhi.n	f5f2 <bt_mesh_model_recv+0x8e>
			BT_ERR("Too short payload for 2-octet OpCode");
    f5e0:	f04f 0100 	mov.w	r1, #0
    f5e4:	2301      	movs	r3, #1
    f5e6:	f363 0107 	bfi	r1, r3, #0, #8
    f5ea:	f366 118f 	bfi	r1, r6, #6, #10
    f5ee:	484a      	ldr	r0, [pc, #296]	; (f718 <bt_mesh_model_recv+0x1b4>)
    f5f0:	e7d3      	b.n	f59a <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_be16(buf);
    f5f2:	4620      	mov	r0, r4
    f5f4:	f015 fbf7 	bl	24de6 <net_buf_simple_pull_be16>
    f5f8:	e7e1      	b.n	f5be <bt_mesh_model_recv+0x5a>
		if (buf->len < 3) {
    f5fa:	88a3      	ldrh	r3, [r4, #4]
    f5fc:	2b02      	cmp	r3, #2
    f5fe:	d808      	bhi.n	f612 <bt_mesh_model_recv+0xae>
			BT_ERR("Too short payload for 3-octet OpCode");
    f600:	f04f 0100 	mov.w	r1, #0
    f604:	2301      	movs	r3, #1
    f606:	f363 0107 	bfi	r1, r3, #0, #8
    f60a:	f366 118f 	bfi	r1, r6, #6, #10
    f60e:	4843      	ldr	r0, [pc, #268]	; (f71c <bt_mesh_model_recv+0x1b8>)
    f610:	e7c3      	b.n	f59a <bt_mesh_model_recv+0x36>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    f612:	4620      	mov	r0, r4
    f614:	f015 fbd7 	bl	24dc6 <net_buf_simple_pull_u8>
    f618:	4607      	mov	r7, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    f61a:	4620      	mov	r0, r4
    f61c:	f015 fbdb 	bl	24dd6 <net_buf_simple_pull_le16>
    f620:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
		return 0;
    f624:	e7cc      	b.n	f5c0 <bt_mesh_model_recv+0x5c>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    f626:	f8bb 000a 	ldrh.w	r0, [fp, #10]
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f62a:	68db      	ldr	r3, [r3, #12]
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    f62c:	b201      	sxth	r1, r0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f62e:	ea4f 1208 	mov.w	r2, r8, lsl #4
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    f632:	2900      	cmp	r1, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f634:	eb03 0a02 	add.w	sl, r3, r2
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    f638:	dd0a      	ble.n	f650 <bt_mesh_model_recv+0xec>
			if (elem->addr != rx->ctx.recv_dst) {
    f63a:	5a9b      	ldrh	r3, [r3, r2]
    f63c:	4283      	cmp	r3, r0
    f63e:	d113      	bne.n	f668 <bt_mesh_model_recv+0x104>
		if (opcode < 0x10000) {
    f640:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
			models = elem->vnd_models;
    f644:	e9da 3502 	ldrd	r3, r5, [sl, #8]
		if (opcode < 0x10000) {
    f648:	d311      	bcc.n	f66e <bt_mesh_model_recv+0x10a>
			count = elem->vnd_model_count;
    f64a:	f89a c005 	ldrb.w	ip, [sl, #5]
    f64e:	e011      	b.n	f674 <bt_mesh_model_recv+0x110>
		} else if (BT_MESH_ADDR_IS_GROUP(rx->ctx.recv_dst) ||
    f650:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    f654:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
    f658:	d9f2      	bls.n	f640 <bt_mesh_model_recv+0xdc>
		} else if (i != 0 ||
    f65a:	f1b8 0f00 	cmp.w	r8, #0
    f65e:	d103      	bne.n	f668 <bt_mesh_model_recv+0x104>
			   !bt_mesh_fixed_group_match(rx->ctx.recv_dst)) {
    f660:	f014 f9ce 	bl	23a00 <bt_mesh_fixed_group_match>
		} else if (i != 0 ||
    f664:	2800      	cmp	r0, #0
    f666:	d1eb      	bne.n	f640 <bt_mesh_model_recv+0xdc>
	for (i = 0; i < dev_comp->elem_count; i++) {
    f668:	f108 0801 	add.w	r8, r8, #1
    f66c:	e7ad      	b.n	f5ca <bt_mesh_model_recv+0x66>
			count = elem->model_count;
    f66e:	f89a c004 	ldrb.w	ip, [sl, #4]
			models = elem->models;
    f672:	461d      	mov	r5, r3
		op = find_op(models, count, rx->ctx.recv_dst, rx->ctx.app_idx,
    f674:	f8bb 000a 	ldrh.w	r0, [fp, #10]
    f678:	f8bb a006 	ldrh.w	sl, [fp, #6]
    f67c:	2200      	movs	r2, #0
		if (BT_MESH_ADDR_IS_GROUP(dst) ||
    f67e:	f480 4e00 	eor.w	lr, r0, #32768	; 0x8000
	for (i = 0U; i < model_count; i++) {
    f682:	b2d3      	uxtb	r3, r2
    f684:	459c      	cmp	ip, r3
    f686:	d9ef      	bls.n	f668 <bt_mesh_model_recv+0x104>
		if (BT_MESH_ADDR_IS_GROUP(dst) ||
    f688:	f5be 4ffe 	cmp.w	lr, #32512	; 0x7f00
    f68c:	d805      	bhi.n	f69a <bt_mesh_model_recv+0x136>
		if (mod->groups[i] == addr) {
    f68e:	89eb      	ldrh	r3, [r5, #14]
    f690:	4283      	cmp	r3, r0
    f692:	d002      	beq.n	f69a <bt_mesh_model_recv+0x136>
    f694:	8a2b      	ldrh	r3, [r5, #16]
    f696:	4283      	cmp	r3, r0
    f698:	d105      	bne.n	f6a6 <bt_mesh_model_recv+0x142>
		if (mod->keys[i] == key) {
    f69a:	89ab      	ldrh	r3, [r5, #12]
    f69c:	4553      	cmp	r3, sl
    f69e:	d102      	bne.n	f6a6 <bt_mesh_model_recv+0x142>
		for (op = (*model)->op; op->func; op++) {
    f6a0:	696b      	ldr	r3, [r5, #20]
    f6a2:	6899      	ldr	r1, [r3, #8]
    f6a4:	b911      	cbnz	r1, f6ac <bt_mesh_model_recv+0x148>
    f6a6:	3201      	adds	r2, #1
    f6a8:	351c      	adds	r5, #28
    f6aa:	e7ea      	b.n	f682 <bt_mesh_model_recv+0x11e>
			if (op->opcode == opcode) {
    f6ac:	6819      	ldr	r1, [r3, #0]
    f6ae:	42b9      	cmp	r1, r7
    f6b0:	d015      	beq.n	f6de <bt_mesh_model_recv+0x17a>
		for (op = (*model)->op; op->func; op++) {
    f6b2:	330c      	adds	r3, #12
    f6b4:	e7f5      	b.n	f6a2 <bt_mesh_model_recv+0x13e>
	state->offset = net_buf_simple_headroom(buf);
    f6b6:	4620      	mov	r0, r4
    f6b8:	9303      	str	r3, [sp, #12]
    f6ba:	f015 fba8 	bl	24e0e <net_buf_simple_headroom>
	state->len = buf->len;
    f6be:	88a3      	ldrh	r3, [r4, #4]
    f6c0:	9301      	str	r3, [sp, #4]
			op->func(model, &rx->ctx, buf);
    f6c2:	9b03      	ldr	r3, [sp, #12]
    f6c4:	9902      	ldr	r1, [sp, #8]
    f6c6:	689b      	ldr	r3, [r3, #8]
	state->offset = net_buf_simple_headroom(buf);
    f6c8:	4682      	mov	sl, r0
    f6ca:	4622      	mov	r2, r4
    f6cc:	4628      	mov	r0, r5
    f6ce:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    f6d0:	68a3      	ldr	r3, [r4, #8]
    f6d2:	fa13 f38a 	uxtah	r3, r3, sl
    f6d6:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
    f6d8:	9b01      	ldr	r3, [sp, #4]
    f6da:	80a3      	strh	r3, [r4, #4]
    f6dc:	e7c4      	b.n	f668 <bt_mesh_model_recv+0x104>
			if (buf->len < op->min_len) {
    f6de:	88a1      	ldrh	r1, [r4, #4]
    f6e0:	685a      	ldr	r2, [r3, #4]
    f6e2:	4291      	cmp	r1, r2
    f6e4:	d2e7      	bcs.n	f6b6 <bt_mesh_model_recv+0x152>
				BT_ERR("Too short message for OpCode 0x%08x",
    f6e6:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
    f6ea:	f043 0301 	orr.w	r3, r3, #1
    f6ee:	f363 0907 	bfi	r9, r3, #0, #8
    f6f2:	f366 198f 	bfi	r9, r6, #6, #10
    f6f6:	464a      	mov	r2, r9
    f6f8:	4639      	mov	r1, r7
    f6fa:	4809      	ldr	r0, [pc, #36]	; (f720 <bt_mesh_model_recv+0x1bc>)
    f6fc:	f011 fa8f 	bl	20c1e <log_1>
				continue;
    f700:	e7b2      	b.n	f668 <bt_mesh_model_recv+0x104>
    f702:	bf00      	nop
    f704:	00025908 	.word	0x00025908
    f708:	00025880 	.word	0x00025880
    f70c:	0002926a 	.word	0x0002926a
    f710:	000292c8 	.word	0x000292c8
    f714:	20000d0c 	.word	0x20000d0c
    f718:	0002927e 	.word	0x0002927e
    f71c:	000292a3 	.word	0x000292a3
    f720:	000292e0 	.word	0x000292e0

0000f724 <bt_mesh_model_publish>:

	return model_send(model, &tx, false, msg, cb, cb_data);
}

int bt_mesh_model_publish(struct bt_mesh_model *model)
{
    f724:	b570      	push	{r4, r5, r6, lr}
    f726:	b094      	sub	sp, #80	; 0x50
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    f728:	ab0b      	add	r3, sp, #44	; 0x2c
    f72a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    f72e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f732:	9305      	str	r3, [sp, #20]
	struct bt_mesh_model_pub *pub = model->pub;
	struct bt_mesh_app_key *key;
	struct bt_mesh_msg_ctx ctx = {
    f734:	aa02      	add	r2, sp, #8
    f736:	2300      	movs	r3, #0
	};
	struct bt_mesh_net_tx tx = {
    f738:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	struct bt_mesh_model_pub *pub = model->pub;
    f73c:	6884      	ldr	r4, [r0, #8]
	struct bt_mesh_msg_ctx ctx = {
    f73e:	f8ad 3010 	strh.w	r3, [sp, #16]
    f742:	e9cd 3302 	strd	r3, r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
    f746:	9308      	str	r3, [sp, #32]
{
    f748:	4606      	mov	r6, r0
		.ctx = &ctx,
		.src = bt_mesh_model_elem(model)->addr,
    f74a:	f7ff fe2d 	bl	f3a8 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    f74e:	8803      	ldrh	r3, [r0, #0]
    f750:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		.xmit = bt_mesh_net_transmit_get(),
    f754:	f002 f90a 	bl	1196c <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    f758:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
	};
	int err;

	BT_DBG("");

	if (!pub) {
    f75c:	2c00      	cmp	r4, #0
    f75e:	d06f      	beq.n	f840 <bt_mesh_model_publish+0x11c>
		return -ENOTSUP;
	}

	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    f760:	88a3      	ldrh	r3, [r4, #4]
    f762:	b923      	cbnz	r3, f76e <bt_mesh_model_publish+0x4a>
		return -EADDRNOTAVAIL;
    f764:	f06f 0530 	mvn.w	r5, #48	; 0x30
		publish_sent(err, model);
		return err;
	}

	return 0;
}
    f768:	4628      	mov	r0, r5
    f76a:	b014      	add	sp, #80	; 0x50
    f76c:	bd70      	pop	{r4, r5, r6, pc}
	key = bt_mesh_app_key_find(pub->key);
    f76e:	88e0      	ldrh	r0, [r4, #6]
    f770:	f7fe fd6e 	bl	e250 <bt_mesh_app_key_find>
	if (!key) {
    f774:	4605      	mov	r5, r0
    f776:	2800      	cmp	r0, #0
    f778:	d0f4      	beq.n	f764 <bt_mesh_model_publish+0x40>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
    f77a:	6923      	ldr	r3, [r4, #16]
    f77c:	889b      	ldrh	r3, [r3, #4]
    f77e:	3304      	adds	r3, #4
    f780:	2b24      	cmp	r3, #36	; 0x24
    f782:	dd10      	ble.n	f7a6 <bt_mesh_model_publish+0x82>
		BT_ERR("Message does not fit maximum SDU size");
    f784:	2301      	movs	r3, #1
    f786:	f04f 0100 	mov.w	r1, #0
    f78a:	f363 0107 	bfi	r1, r3, #0, #8
    f78e:	4a2e      	ldr	r2, [pc, #184]	; (f848 <bt_mesh_model_publish+0x124>)
    f790:	4b2e      	ldr	r3, [pc, #184]	; (f84c <bt_mesh_model_publish+0x128>)
    f792:	482f      	ldr	r0, [pc, #188]	; (f850 <bt_mesh_model_publish+0x12c>)
    f794:	1a9b      	subs	r3, r3, r2
    f796:	08db      	lsrs	r3, r3, #3
    f798:	f363 118f 	bfi	r1, r3, #6, #10
    f79c:	f011 fa32 	bl	20c04 <log_0>
		return -EMSGSIZE;
    f7a0:	f06f 0523 	mvn.w	r5, #35	; 0x23
    f7a4:	e7e0      	b.n	f768 <bt_mesh_model_publish+0x44>
	if (pub->count) {
    f7a6:	7ae3      	ldrb	r3, [r4, #11]
    f7a8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    f7ac:	d011      	beq.n	f7d2 <bt_mesh_model_publish+0xae>
		BT_WARN("Clearing publish retransmit timer");
    f7ae:	2302      	movs	r3, #2
    f7b0:	f04f 0100 	mov.w	r1, #0
    f7b4:	f363 0107 	bfi	r1, r3, #0, #8
    f7b8:	4a23      	ldr	r2, [pc, #140]	; (f848 <bt_mesh_model_publish+0x124>)
    f7ba:	4b24      	ldr	r3, [pc, #144]	; (f84c <bt_mesh_model_publish+0x128>)
    f7bc:	4825      	ldr	r0, [pc, #148]	; (f854 <bt_mesh_model_publish+0x130>)
    f7be:	1a9b      	subs	r3, r3, r2
    f7c0:	08db      	lsrs	r3, r3, #3
    f7c2:	f363 118f 	bfi	r1, r3, #6, #10
    f7c6:	f011 fa1d 	bl	20c04 <log_0>
		k_delayed_work_cancel(&pub->timer);
    f7ca:	f104 0018 	add.w	r0, r4, #24
    f7ce:	f015 fe41 	bl	25454 <k_delayed_work_cancel>
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    f7d2:	6923      	ldr	r3, [r4, #16]
    f7d4:	a805      	add	r0, sp, #20
    f7d6:	6819      	ldr	r1, [r3, #0]
    f7d8:	889a      	ldrh	r2, [r3, #4]
    f7da:	f015 fa7d 	bl	24cd8 <net_buf_simple_add_mem>
	ctx.addr = pub->addr;
    f7de:	88a3      	ldrh	r3, [r4, #4]
    f7e0:	f8ad 300c 	strh.w	r3, [sp, #12]
	ctx.send_ttl = pub->ttl;
    f7e4:	7a23      	ldrb	r3, [r4, #8]
    f7e6:	f88d 3011 	strb.w	r3, [sp, #17]
	ctx.app_idx = key->app_idx;
    f7ea:	886b      	ldrh	r3, [r5, #2]
	ctx.net_idx = key->net_idx;
    f7ec:	8828      	ldrh	r0, [r5, #0]
	ctx.app_idx = key->app_idx;
    f7ee:	f8ad 300a 	strh.w	r3, [sp, #10]
	tx.friend_cred = pub->cred;
    f7f2:	7ae3      	ldrb	r3, [r4, #11]
    f7f4:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
	ctx.net_idx = key->net_idx;
    f7f8:	f8ad 0008 	strh.w	r0, [sp, #8]
	tx.friend_cred = pub->cred;
    f7fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
    f800:	f363 0200 	bfi	r2, r3, #0, #1
    f804:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    f808:	f7fc f9ca 	bl	bba0 <bt_mesh_subnet_get>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    f80c:	7ae3      	ldrb	r3, [r4, #11]
    f80e:	7a62      	ldrb	r2, [r4, #9]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    f810:	9008      	str	r0, [sp, #32]
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    f812:	f362 1347 	bfi	r3, r2, #5, #3
    f816:	72e3      	strb	r3, [r4, #11]
	err = model_send(model, &tx, true, &sdu, &pub_sent_cb, model);
    f818:	4b0f      	ldr	r3, [pc, #60]	; (f858 <bt_mesh_model_publish+0x134>)
    f81a:	9300      	str	r3, [sp, #0]
    f81c:	9601      	str	r6, [sp, #4]
    f81e:	ab05      	add	r3, sp, #20
    f820:	2201      	movs	r2, #1
    f822:	a908      	add	r1, sp, #32
    f824:	4630      	mov	r0, r6
    f826:	f7ff fc7b 	bl	f120 <model_send>
	if (err) {
    f82a:	4605      	mov	r5, r0
    f82c:	2800      	cmp	r0, #0
    f82e:	d09b      	beq.n	f768 <bt_mesh_model_publish+0x44>
		pub->count = 0;
    f830:	7ae3      	ldrb	r3, [r4, #11]
    f832:	f36f 1347 	bfc	r3, #5, #3
    f836:	72e3      	strb	r3, [r4, #11]
		publish_sent(err, model);
    f838:	4631      	mov	r1, r6
    f83a:	f7ff fd7b 	bl	f334 <publish_sent>
		return err;
    f83e:	e793      	b.n	f768 <bt_mesh_model_publish+0x44>
		return -ENOTSUP;
    f840:	f06f 0522 	mvn.w	r5, #34	; 0x22
    f844:	e790      	b.n	f768 <bt_mesh_model_publish+0x44>
    f846:	bf00      	nop
    f848:	00025880 	.word	0x00025880
    f84c:	00025908 	.word	0x00025908
    f850:	00029222 	.word	0x00029222
    f854:	00029248 	.word	0x00029248
    f858:	00025f58 	.word	0x00025f58

0000f85c <mod_publish>:
{
    f85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    f860:	f850 6c18 	ldr.w	r6, [r0, #-24]
{
    f864:	4604      	mov	r4, r0
    f866:	b092      	sub	sp, #72	; 0x48
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    f868:	4630      	mov	r0, r6
    f86a:	f7ff fd3f 	bl	f2ec <bt_mesh_model_pub_period_get>
	if (pub->count) {
    f86e:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    f872:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    f876:	4607      	mov	r7, r0
	if (pub->count) {
    f878:	d06b      	beq.n	f952 <mod_publish+0xf6>
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    f87a:	ab09      	add	r3, sp, #36	; 0x24
    f87c:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    f880:	e9cd 2304 	strd	r2, r3, [sp, #16]
    f884:	9303      	str	r3, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    f886:	2300      	movs	r3, #0
	struct bt_mesh_model_pub *pub = mod->pub;
    f888:	68b5      	ldr	r5, [r6, #8]
	struct bt_mesh_msg_ctx ctx = {
    f88a:	f8ad 3008 	strh.w	r3, [sp, #8]
    f88e:	e9cd 3300 	strd	r3, r3, [sp]
    f892:	88aa      	ldrh	r2, [r5, #4]
    f894:	f8ad 2004 	strh.w	r2, [sp, #4]
		.src = bt_mesh_model_elem(mod)->addr,
    f898:	4630      	mov	r0, r6
	struct bt_mesh_msg_ctx ctx = {
    f89a:	7a2a      	ldrb	r2, [r5, #8]
    f89c:	f88d 2009 	strb.w	r2, [sp, #9]
	struct bt_mesh_net_tx tx = {
    f8a0:	9306      	str	r3, [sp, #24]
    f8a2:	9308      	str	r3, [sp, #32]
    f8a4:	f8cd d01c 	str.w	sp, [sp, #28]
		.src = bt_mesh_model_elem(mod)->addr,
    f8a8:	f7ff fd7e 	bl	f3a8 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    f8ac:	8803      	ldrh	r3, [r0, #0]
    f8ae:	f8ad 3020 	strh.w	r3, [sp, #32]
		.xmit = bt_mesh_net_transmit_get(),
    f8b2:	f002 f85b 	bl	1196c <bt_mesh_net_transmit_get>
		.friend_cred = pub->cred,
    f8b6:	7aeb      	ldrb	r3, [r5, #11]
	struct bt_mesh_net_tx tx = {
    f8b8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    f8bc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
		.friend_cred = pub->cred,
    f8c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
    f8c4:	f363 0200 	bfi	r2, r3, #0, #1
	key = bt_mesh_app_key_find(pub->key);
    f8c8:	88e8      	ldrh	r0, [r5, #6]
	struct bt_mesh_net_tx tx = {
    f8ca:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	key = bt_mesh_app_key_find(pub->key);
    f8ce:	f7fe fcbf 	bl	e250 <bt_mesh_app_key_find>
	if (!key) {
    f8d2:	4680      	mov	r8, r0
    f8d4:	b9e0      	cbnz	r0, f910 <mod_publish+0xb4>
		return -EADDRNOTAVAIL;
    f8d6:	f06f 0130 	mvn.w	r1, #48	; 0x30
			BT_ERR("Failed to retransmit (err %d)", err);
    f8da:	2301      	movs	r3, #1
    f8dc:	f04f 0200 	mov.w	r2, #0
    f8e0:	f363 0207 	bfi	r2, r3, #0, #8
    f8e4:	4837      	ldr	r0, [pc, #220]	; (f9c4 <mod_publish+0x168>)
    f8e6:	4b38      	ldr	r3, [pc, #224]	; (f9c8 <mod_publish+0x16c>)
    f8e8:	1a1b      	subs	r3, r3, r0
    f8ea:	08db      	lsrs	r3, r3, #3
    f8ec:	f363 128f 	bfi	r2, r3, #6, #10
    f8f0:	4836      	ldr	r0, [pc, #216]	; (f9cc <mod_publish+0x170>)
    f8f2:	f011 f994 	bl	20c1e <log_1>
			pub->count = 0;
    f8f6:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    f8fa:	f36f 1347 	bfc	r3, #5, #3
    f8fe:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
    f902:	b31f      	cbz	r7, f94c <mod_publish+0xf0>
    f904:	463a      	mov	r2, r7
    f906:	4621      	mov	r1, r4
    f908:	4831      	ldr	r0, [pc, #196]	; (f9d0 <mod_publish+0x174>)
    f90a:	f00f fa51 	bl	1edb0 <k_delayed_work_submit_to_queue>
    f90e:	e01d      	b.n	f94c <mod_publish+0xf0>
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    f910:	8800      	ldrh	r0, [r0, #0]
    f912:	f7fc f945 	bl	bba0 <bt_mesh_subnet_get>
	ctx.net_idx = key->net_idx;
    f916:	f8b8 3000 	ldrh.w	r3, [r8]
    f91a:	f8ad 3000 	strh.w	r3, [sp]
	ctx.app_idx = key->app_idx;
    f91e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    f922:	f8ad 3002 	strh.w	r3, [sp, #2]
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    f926:	692b      	ldr	r3, [r5, #16]
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    f928:	9006      	str	r0, [sp, #24]
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    f92a:	889a      	ldrh	r2, [r3, #4]
    f92c:	6819      	ldr	r1, [r3, #0]
    f92e:	a803      	add	r0, sp, #12
    f930:	f015 f9d2 	bl	24cd8 <net_buf_simple_add_mem>
	pub->count--;
    f934:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    f936:	4a27      	ldr	r2, [pc, #156]	; (f9d4 <mod_publish+0x178>)
	pub->count--;
    f938:	33e0      	adds	r3, #224	; 0xe0
    f93a:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    f93c:	a903      	add	r1, sp, #12
    f93e:	4633      	mov	r3, r6
    f940:	a806      	add	r0, sp, #24
    f942:	f7fe fca9 	bl	e298 <bt_mesh_trans_send>
		if (err) {
    f946:	4601      	mov	r1, r0
    f948:	2800      	cmp	r0, #0
    f94a:	d1c6      	bne.n	f8da <mod_publish+0x7e>
}
    f94c:	b012      	add	sp, #72	; 0x48
    f94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!period_ms) {
    f952:	2800      	cmp	r0, #0
    f954:	d0fa      	beq.n	f94c <mod_publish+0xf0>
    f956:	f015 fdce 	bl	254f6 <z_impl_k_uptime_get_32>
	err = pub->update(pub->mod);
    f95a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	pub->period_start = k_uptime_get_32();
    f95e:	f844 0c0c 	str.w	r0, [r4, #-12]
	err = pub->update(pub->mod);
    f962:	f854 0c18 	ldr.w	r0, [r4, #-24]
    f966:	4798      	blx	r3
	if (err) {
    f968:	b170      	cbz	r0, f988 <mod_publish+0x12c>
		BT_ERR("Failed to update publication message");
    f96a:	2301      	movs	r3, #1
    f96c:	f04f 0100 	mov.w	r1, #0
    f970:	f363 0107 	bfi	r1, r3, #0, #8
    f974:	4a13      	ldr	r2, [pc, #76]	; (f9c4 <mod_publish+0x168>)
    f976:	4b14      	ldr	r3, [pc, #80]	; (f9c8 <mod_publish+0x16c>)
    f978:	4817      	ldr	r0, [pc, #92]	; (f9d8 <mod_publish+0x17c>)
    f97a:	1a9b      	subs	r3, r3, r2
    f97c:	08db      	lsrs	r3, r3, #3
    f97e:	f363 118f 	bfi	r1, r3, #6, #10
    f982:	f011 f93f 	bl	20c04 <log_0>
		return;
    f986:	e7e1      	b.n	f94c <mod_publish+0xf0>
	err = bt_mesh_model_publish(pub->mod);
    f988:	f854 0c18 	ldr.w	r0, [r4, #-24]
    f98c:	f7ff feca 	bl	f724 <bt_mesh_model_publish>
	if (err) {
    f990:	4601      	mov	r1, r0
    f992:	b168      	cbz	r0, f9b0 <mod_publish+0x154>
		BT_ERR("Publishing failed (err %d)", err);
    f994:	2301      	movs	r3, #1
    f996:	f04f 0200 	mov.w	r2, #0
    f99a:	f363 0207 	bfi	r2, r3, #0, #8
    f99e:	4809      	ldr	r0, [pc, #36]	; (f9c4 <mod_publish+0x168>)
    f9a0:	4b09      	ldr	r3, [pc, #36]	; (f9c8 <mod_publish+0x16c>)
    f9a2:	1a1b      	subs	r3, r3, r0
    f9a4:	08db      	lsrs	r3, r3, #3
    f9a6:	f363 128f 	bfi	r2, r3, #6, #10
    f9aa:	480c      	ldr	r0, [pc, #48]	; (f9dc <mod_publish+0x180>)
    f9ac:	f011 f937 	bl	20c1e <log_1>
	if (pub->count) {
    f9b0:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    f9b4:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    f9b8:	d0c8      	beq.n	f94c <mod_publish+0xf0>
		k_delayed_work_cancel(&pub->timer);
    f9ba:	4620      	mov	r0, r4
    f9bc:	f015 fd4a 	bl	25454 <k_delayed_work_cancel>
    f9c0:	e7c4      	b.n	f94c <mod_publish+0xf0>
    f9c2:	bf00      	nop
    f9c4:	00025880 	.word	0x00025880
    f9c8:	00025908 	.word	0x00025908
    f9cc:	00029304 	.word	0x00029304
    f9d0:	20001d2c 	.word	0x20001d2c
    f9d4:	00025f58 	.word	0x00025f58
    f9d8:	00029322 	.word	0x00029322
    f9dc:	00029347 	.word	0x00029347

0000f9e0 <bt_mesh_comp_get>:
}

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
    f9e0:	4b01      	ldr	r3, [pc, #4]	; (f9e8 <bt_mesh_comp_get+0x8>)
    f9e2:	6818      	ldr	r0, [r3, #0]
    f9e4:	4770      	bx	lr
    f9e6:	bf00      	nop
    f9e8:	20000d0c 	.word	0x20000d0c

0000f9ec <app_key_is_valid>:
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    f9ec:	4b0d      	ldr	r3, [pc, #52]	; (fa24 <app_key_is_valid+0x38>)
    f9ee:	f8b3 1144 	ldrh.w	r1, [r3, #324]	; 0x144
    f9f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f9f6:	4291      	cmp	r1, r2
    f9f8:	461a      	mov	r2, r3
    f9fa:	d003      	beq.n	fa04 <app_key_is_valid+0x18>
    f9fc:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
    fa00:	4283      	cmp	r3, r0
    fa02:	d00b      	beq.n	fa1c <app_key_is_valid+0x30>
    fa04:	f8b2 116c 	ldrh.w	r1, [r2, #364]	; 0x16c
    fa08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fa0c:	4299      	cmp	r1, r3
    fa0e:	d007      	beq.n	fa20 <app_key_is_valid+0x34>
    fa10:	f8b2 316e 	ldrh.w	r3, [r2, #366]	; 0x16e
    fa14:	1a1b      	subs	r3, r3, r0
    fa16:	4258      	negs	r0, r3
    fa18:	4158      	adcs	r0, r3
    fa1a:	4770      	bx	lr
		    key->app_idx == app_idx) {
			return true;
    fa1c:	2001      	movs	r0, #1
    fa1e:	4770      	bx	lr
		}
	}

	return false;
    fa20:	2000      	movs	r0, #0
}
    fa22:	4770      	bx	lr
    fa24:	20007060 	.word	0x20007060

0000fa28 <_mod_pub_set>:

static u8_t _mod_pub_set(struct bt_mesh_model *model, u16_t pub_addr,
			 u16_t app_idx, u8_t cred_flag, u8_t ttl, u8_t period,
			 u8_t retransmit, bool store)
{
    fa28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa2c:	4605      	mov	r5, r0
	if (!model->pub) {
    fa2e:	6880      	ldr	r0, [r0, #8]
{
    fa30:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
    fa34:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
    fa38:	460e      	mov	r6, r1
    fa3a:	4691      	mov	r9, r2
    fa3c:	461c      	mov	r4, r3
	if (!model->pub) {
    fa3e:	2800      	cmp	r0, #0
    fa40:	d040      	beq.n	fac4 <_mod_pub_set+0x9c>
		return STATUS_NVAL_PUB_PARAM;
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
    fa42:	2b00      	cmp	r3, #0
    fa44:	d13c      	bne.n	fac0 <_mod_pub_set+0x98>
		return STATUS_FEAT_NOT_SUPP;
	}

	if (!model->pub->update && period) {
    fa46:	6942      	ldr	r2, [r0, #20]
    fa48:	b912      	cbnz	r2, fa50 <_mod_pub_set+0x28>
    fa4a:	f1b8 0f00 	cmp.w	r8, #0
    fa4e:	d139      	bne.n	fac4 <_mod_pub_set+0x9c>
		return STATUS_NVAL_PUB_PARAM;
	}

	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
    fa50:	b98e      	cbnz	r6, fa76 <_mod_pub_set+0x4e>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    fa52:	8883      	ldrh	r3, [r0, #4]
    fa54:	b163      	cbz	r3, fa70 <_mod_pub_set+0x48>
		}

		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
		model->pub->key = 0;
		model->pub->cred = 0;
		model->pub->ttl = 0;
    fa56:	6883      	ldr	r3, [r0, #8]
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    fa58:	6046      	str	r6, [r0, #4]
		model->pub->ttl = 0;
    fa5a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    fa5e:	6083      	str	r3, [r0, #8]
		model->pub->period = 0;
		model->pub->retransmit = 0;
		model->pub->count = 0;

		if (model->pub->update) {
    fa60:	b112      	cbz	r2, fa68 <_mod_pub_set+0x40>
			k_delayed_work_cancel(&model->pub->timer);
    fa62:	3018      	adds	r0, #24
    fa64:	f015 fcf6 	bl	25454 <k_delayed_work_cancel>
		}

		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    fa68:	b117      	cbz	r7, fa70 <_mod_pub_set+0x48>
			bt_mesh_store_mod_pub(model);
    fa6a:	4628      	mov	r0, r5
    fa6c:	f014 fab7 	bl	23fde <bt_mesh_store_mod_pub>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
		bt_mesh_store_mod_pub(model);
	}

	return STATUS_SUCCESS;
}
    fa70:	4620      	mov	r0, r4
    fa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!bt_mesh_app_key_find(app_idx)) {
    fa76:	4648      	mov	r0, r9
    fa78:	f7fe fbea 	bl	e250 <bt_mesh_app_key_find>
    fa7c:	b320      	cbz	r0, fac8 <_mod_pub_set+0xa0>
	model->pub->addr = pub_addr;
    fa7e:	68ab      	ldr	r3, [r5, #8]
	model->pub->cred = cred_flag;
    fa80:	7ada      	ldrb	r2, [r3, #11]
	model->pub->addr = pub_addr;
    fa82:	809e      	strh	r6, [r3, #4]
	model->pub->cred = cred_flag;
    fa84:	f36f 1204 	bfc	r2, #4, #1
    fa88:	72da      	strb	r2, [r3, #11]
	model->pub->ttl = ttl;
    fa8a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    fa8e:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
    fa90:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	model->pub->key = app_idx;
    fa94:	f8a3 9006 	strh.w	r9, [r3, #6]
	model->pub->period = period;
    fa98:	f883 800a 	strb.w	r8, [r3, #10]
	model->pub->retransmit = retransmit;
    fa9c:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
    fa9e:	695b      	ldr	r3, [r3, #20]
    faa0:	2b00      	cmp	r3, #0
    faa2:	d0e1      	beq.n	fa68 <_mod_pub_set+0x40>
		period_ms = bt_mesh_model_pub_period_get(model);
    faa4:	4628      	mov	r0, r5
    faa6:	f7ff fc21 	bl	f2ec <bt_mesh_model_pub_period_get>
		if (period_ms) {
    faaa:	68a9      	ldr	r1, [r5, #8]
    faac:	4602      	mov	r2, r0
    faae:	b120      	cbz	r0, faba <_mod_pub_set+0x92>
    fab0:	3118      	adds	r1, #24
    fab2:	4806      	ldr	r0, [pc, #24]	; (facc <_mod_pub_set+0xa4>)
    fab4:	f00f f97c 	bl	1edb0 <k_delayed_work_submit_to_queue>
    fab8:	e7d6      	b.n	fa68 <_mod_pub_set+0x40>
			k_delayed_work_cancel(&model->pub->timer);
    faba:	f101 0018 	add.w	r0, r1, #24
    fabe:	e7d1      	b.n	fa64 <_mod_pub_set+0x3c>
		return STATUS_FEAT_NOT_SUPP;
    fac0:	240a      	movs	r4, #10
    fac2:	e7d5      	b.n	fa70 <_mod_pub_set+0x48>
		return STATUS_NVAL_PUB_PARAM;
    fac4:	2407      	movs	r4, #7
    fac6:	e7d3      	b.n	fa70 <_mod_pub_set+0x48>
		return STATUS_INVALID_APPKEY;
    fac8:	2403      	movs	r4, #3
    faca:	e7d1      	b.n	fa70 <_mod_pub_set+0x48>
    facc:	20001d2c 	.word	0x20001d2c

0000fad0 <node_identity_get>:
}

static void node_identity_get(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
    fad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fad2:	b089      	sub	sp, #36	; 0x24
	/* Needed size: opcode (2 bytes) + msg + MIC */
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
    fad4:	ab02      	add	r3, sp, #8
{
    fad6:	4606      	mov	r6, r0
    fad8:	460f      	mov	r7, r1

	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));

	idx = net_buf_simple_pull_le16(buf);
    fada:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
    fadc:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
    fae0:	9305      	str	r3, [sp, #20]
    fae2:	e9cd 1306 	strd	r1, r3, [sp, #24]
	idx = net_buf_simple_pull_le16(buf);
    fae6:	f015 f976 	bl	24dd6 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    faea:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    faee:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    faf0:	d310      	bcc.n	fb14 <node_identity_get+0x44>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
    faf2:	2301      	movs	r3, #1
    faf4:	f04f 0200 	mov.w	r2, #0
    faf8:	f363 0207 	bfi	r2, r3, #0, #8
    fafc:	4920      	ldr	r1, [pc, #128]	; (fb80 <node_identity_get+0xb0>)
    fafe:	4b21      	ldr	r3, [pc, #132]	; (fb84 <node_identity_get+0xb4>)
    fb00:	1a5b      	subs	r3, r3, r1
    fb02:	08db      	lsrs	r3, r3, #3
    fb04:	4601      	mov	r1, r0
    fb06:	f363 128f 	bfi	r2, r3, #6, #10
    fb0a:	481f      	ldr	r0, [pc, #124]	; (fb88 <node_identity_get+0xb8>)
    fb0c:	f011 f887 	bl	20c1e <log_1>
	net_buf_simple_add_u8(&msg, node_id);

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
		BT_ERR("Unable to send Node Identity Status");
	}
}
    fb10:	b009      	add	sp, #36	; 0x24
    fb12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
    fb14:	f248 0148 	movw	r1, #32840	; 0x8048
    fb18:	a805      	add	r0, sp, #20
    fb1a:	f013 ff88 	bl	23a2e <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
    fb1e:	4628      	mov	r0, r5
    fb20:	f7fc f83e 	bl	bba0 <bt_mesh_subnet_get>
	if (!sub) {
    fb24:	4604      	mov	r4, r0
    fb26:	bb18      	cbnz	r0, fb70 <node_identity_get+0xa0>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_NETKEY);
    fb28:	2104      	movs	r1, #4
    fb2a:	a805      	add	r0, sp, #20
    fb2c:	f015 f8dd 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
    fb30:	4629      	mov	r1, r5
    fb32:	a805      	add	r0, sp, #20
    fb34:	f015 f8e1 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
    fb38:	4621      	mov	r1, r4
    fb3a:	a805      	add	r0, sp, #20
    fb3c:	f015 f8d5 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fb40:	2300      	movs	r3, #0
    fb42:	9300      	str	r3, [sp, #0]
    fb44:	aa05      	add	r2, sp, #20
    fb46:	4639      	mov	r1, r7
    fb48:	4630      	mov	r0, r6
    fb4a:	f013 ff99 	bl	23a80 <bt_mesh_model_send>
    fb4e:	2800      	cmp	r0, #0
    fb50:	d0de      	beq.n	fb10 <node_identity_get+0x40>
		BT_ERR("Unable to send Node Identity Status");
    fb52:	2301      	movs	r3, #1
    fb54:	f04f 0100 	mov.w	r1, #0
    fb58:	f363 0107 	bfi	r1, r3, #0, #8
    fb5c:	4a08      	ldr	r2, [pc, #32]	; (fb80 <node_identity_get+0xb0>)
    fb5e:	4b09      	ldr	r3, [pc, #36]	; (fb84 <node_identity_get+0xb4>)
    fb60:	480a      	ldr	r0, [pc, #40]	; (fb8c <node_identity_get+0xbc>)
    fb62:	1a9b      	subs	r3, r3, r2
    fb64:	08db      	lsrs	r3, r3, #3
    fb66:	f363 118f 	bfi	r1, r3, #6, #10
    fb6a:	f011 f84b 	bl	20c04 <log_0>
    fb6e:	e7cf      	b.n	fb10 <node_identity_get+0x40>
		net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    fb70:	2100      	movs	r1, #0
    fb72:	a805      	add	r0, sp, #20
    fb74:	f015 f8b9 	bl	24cea <net_buf_simple_add_u8>
		node_id = sub->node_id;
    fb78:	f894 4020 	ldrb.w	r4, [r4, #32]
    fb7c:	e7d8      	b.n	fb30 <node_identity_get+0x60>
    fb7e:	bf00      	nop
    fb80:	00025880 	.word	0x00025880
    fb84:	00025920 	.word	0x00025920
    fb88:	000299de 	.word	0x000299de
    fb8c:	000299f9 	.word	0x000299f9

0000fb90 <app_key_get>:
{
    fb90:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb92:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4 +
    fb94:	ab02      	add	r3, sp, #8
{
    fb96:	4605      	mov	r5, r0
    fb98:	460e      	mov	r6, r1
	get_idx = net_buf_simple_pull_le16(buf);
    fb9a:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4 +
    fb9c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
    fba0:	9305      	str	r3, [sp, #20]
    fba2:	e9cd 1306 	strd	r1, r3, [sp, #24]
	get_idx = net_buf_simple_pull_le16(buf);
    fba6:	f015 f916 	bl	24dd6 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
    fbaa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
    fbae:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
    fbb0:	d310      	bcc.n	fbd4 <app_key_get+0x44>
		BT_ERR("Invalid NetKeyIndex 0x%04x", get_idx);
    fbb2:	2301      	movs	r3, #1
    fbb4:	f04f 0200 	mov.w	r2, #0
    fbb8:	f363 0207 	bfi	r2, r3, #0, #8
    fbbc:	492b      	ldr	r1, [pc, #172]	; (fc6c <app_key_get+0xdc>)
    fbbe:	4b2c      	ldr	r3, [pc, #176]	; (fc70 <app_key_get+0xe0>)
    fbc0:	1a5b      	subs	r3, r3, r1
    fbc2:	08db      	lsrs	r3, r3, #3
    fbc4:	4601      	mov	r1, r0
    fbc6:	f363 128f 	bfi	r2, r3, #6, #10
    fbca:	482a      	ldr	r0, [pc, #168]	; (fc74 <app_key_get+0xe4>)
    fbcc:	f011 f827 	bl	20c1e <log_1>
}
    fbd0:	b009      	add	sp, #36	; 0x24
    fbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
    fbd4:	f248 0102 	movw	r1, #32770	; 0x8002
    fbd8:	a805      	add	r0, sp, #20
    fbda:	f013 ff28 	bl	23a2e <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_get(get_idx)) {
    fbde:	4620      	mov	r0, r4
    fbe0:	f7fb ffde 	bl	bba0 <bt_mesh_subnet_get>
		status = STATUS_SUCCESS;
    fbe4:	2800      	cmp	r0, #0
    fbe6:	bf0c      	ite	eq
    fbe8:	2704      	moveq	r7, #4
    fbea:	2700      	movne	r7, #0
	net_buf_simple_add_u8(&msg, status);
    fbec:	4639      	mov	r1, r7
    fbee:	a805      	add	r0, sp, #20
    fbf0:	f015 f87b 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
    fbf4:	4621      	mov	r1, r4
    fbf6:	a805      	add	r0, sp, #20
    fbf8:	f015 f87f 	bl	24cfa <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
    fbfc:	b9af      	cbnz	r7, fc2a <app_key_get+0x9a>
		if (key->net_idx != get_idx) {
    fbfe:	4b1e      	ldr	r3, [pc, #120]	; (fc78 <app_key_get+0xe8>)
    fc00:	f8b3 2144 	ldrh.w	r2, [r3, #324]	; 0x144
    fc04:	42a2      	cmp	r2, r4
    fc06:	f8b3 216c 	ldrh.w	r2, [r3, #364]	; 0x16c
			prev = key->app_idx;
    fc0a:	bf0c      	ite	eq
    fc0c:	f8b3 1146 	ldrheq.w	r1, [r3, #326]	; 0x146
	prev = BT_MESH_KEY_UNUSED;
    fc10:	f64f 71ff 	movwne	r1, #65535	; 0xffff
		if (key->net_idx != get_idx) {
    fc14:	42a2      	cmp	r2, r4
    fc16:	d121      	bne.n	fc5c <app_key_get+0xcc>
		if (prev == BT_MESH_KEY_UNUSED) {
    fc18:	f8b3 216e 	ldrh.w	r2, [r3, #366]	; 0x16e
    fc1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fc20:	4299      	cmp	r1, r3
    fc22:	d01a      	beq.n	fc5a <app_key_get+0xca>
		key_idx_pack(&msg, prev, key->app_idx);
    fc24:	a805      	add	r0, sp, #20
    fc26:	f013 ff7c 	bl	23b22 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fc2a:	2300      	movs	r3, #0
    fc2c:	9300      	str	r3, [sp, #0]
    fc2e:	aa05      	add	r2, sp, #20
    fc30:	4631      	mov	r1, r6
    fc32:	4628      	mov	r0, r5
    fc34:	f013 ff24 	bl	23a80 <bt_mesh_model_send>
    fc38:	2800      	cmp	r0, #0
    fc3a:	d0c9      	beq.n	fbd0 <app_key_get+0x40>
		BT_ERR("Unable to send AppKey List");
    fc3c:	2301      	movs	r3, #1
    fc3e:	f04f 0100 	mov.w	r1, #0
    fc42:	f363 0107 	bfi	r1, r3, #0, #8
    fc46:	4a09      	ldr	r2, [pc, #36]	; (fc6c <app_key_get+0xdc>)
    fc48:	4b09      	ldr	r3, [pc, #36]	; (fc70 <app_key_get+0xe0>)
    fc4a:	480c      	ldr	r0, [pc, #48]	; (fc7c <app_key_get+0xec>)
    fc4c:	1a9b      	subs	r3, r3, r2
    fc4e:	08db      	lsrs	r3, r3, #3
    fc50:	f363 118f 	bfi	r1, r3, #6, #10
    fc54:	f010 ffd6 	bl	20c04 <log_0>
    fc58:	e7ba      	b.n	fbd0 <app_key_get+0x40>
			prev = key->app_idx;
    fc5a:	4611      	mov	r1, r2
	if (prev != BT_MESH_KEY_UNUSED) {
    fc5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fc60:	4299      	cmp	r1, r3
    fc62:	d0e2      	beq.n	fc2a <app_key_get+0x9a>
		net_buf_simple_add_le16(&msg, prev);
    fc64:	a805      	add	r0, sp, #20
    fc66:	f015 f848 	bl	24cfa <net_buf_simple_add_le16>
    fc6a:	e7de      	b.n	fc2a <app_key_get+0x9a>
    fc6c:	00025880 	.word	0x00025880
    fc70:	00025920 	.word	0x00025920
    fc74:	000299de 	.word	0x000299de
    fc78:	20007060 	.word	0x20007060
    fc7c:	00029415 	.word	0x00029415

0000fc80 <hb_pub_send_status>:
} __packed;

static void hb_pub_send_status(struct bt_mesh_model *model,
			       struct bt_mesh_msg_ctx *ctx, u8_t status,
			       struct hb_pub_param *orig_msg)
{
    fc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc84:	b08a      	sub	sp, #40	; 0x28
    fc86:	4690      	mov	r8, r2
    fc88:	461f      	mov	r7, r3
	/* Needed size: opcode (1 byte) + msg + MIC */
	NET_BUF_SIMPLE_DEFINE(msg, 1 + 10 + 4);
    fc8a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    fc8e:	ab06      	add	r3, sp, #24
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    fc90:	6984      	ldr	r4, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(msg, 1 + 10 + 4);
    fc92:	9303      	str	r3, [sp, #12]
{
    fc94:	4605      	mov	r5, r0
    fc96:	460e      	mov	r6, r1

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
    fc98:	a803      	add	r0, sp, #12
    fc9a:	2106      	movs	r1, #6
	NET_BUF_SIMPLE_DEFINE(msg, 1 + 10 + 4);
    fc9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
    fca0:	f013 fec5 	bl	23a2e <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(&msg, status);
    fca4:	4641      	mov	r1, r8
    fca6:	a803      	add	r0, sp, #12
    fca8:	f015 f81f 	bl	24cea <net_buf_simple_add_u8>

	if (orig_msg) {
    fcac:	b307      	cbz	r7, fcf0 <hb_pub_send_status+0x70>
		memcpy(net_buf_simple_add(&msg, sizeof(*orig_msg)), orig_msg,
    fcae:	2109      	movs	r1, #9
    fcb0:	a803      	add	r0, sp, #12
    fcb2:	f015 f80b 	bl	24ccc <net_buf_simple_add>
    fcb6:	2209      	movs	r2, #9
    fcb8:	4639      	mov	r1, r7
    fcba:	f012 f8e4 	bl	21e86 <memcpy>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.ttl);
	net_buf_simple_add_le16(&msg, cfg->hb_pub.feat);
	net_buf_simple_add_le16(&msg, cfg->hb_pub.net_idx);

send:
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fcbe:	2300      	movs	r3, #0
    fcc0:	9300      	str	r3, [sp, #0]
    fcc2:	aa03      	add	r2, sp, #12
    fcc4:	4631      	mov	r1, r6
    fcc6:	4628      	mov	r0, r5
    fcc8:	f013 feda 	bl	23a80 <bt_mesh_model_send>
    fccc:	b168      	cbz	r0, fcea <hb_pub_send_status+0x6a>
		BT_ERR("Unable to send Heartbeat Publication Status");
    fcce:	2301      	movs	r3, #1
    fcd0:	f04f 0100 	mov.w	r1, #0
    fcd4:	f363 0107 	bfi	r1, r3, #0, #8
    fcd8:	4a1b      	ldr	r2, [pc, #108]	; (fd48 <hb_pub_send_status+0xc8>)
    fcda:	4b1c      	ldr	r3, [pc, #112]	; (fd4c <hb_pub_send_status+0xcc>)
    fcdc:	481c      	ldr	r0, [pc, #112]	; (fd50 <hb_pub_send_status+0xd0>)
    fcde:	1a9b      	subs	r3, r3, r2
    fce0:	08db      	lsrs	r3, r3, #3
    fce2:	f363 118f 	bfi	r1, r3, #6, #10
    fce6:	f010 ff8d 	bl	20c04 <log_0>
	}
}
    fcea:	b00a      	add	sp, #40	; 0x28
    fcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_simple_add_le16(&msg, cfg->hb_pub.dst);
    fcf0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    fcf2:	a803      	add	r0, sp, #12
    fcf4:	f015 f801 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
    fcf8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (!val) {
    fcfa:	b171      	cbz	r1, fd1a <hb_pub_send_status+0x9a>
	} else if (val == 0x01) {
    fcfc:	2901      	cmp	r1, #1
    fcfe:	d00c      	beq.n	fd1a <hb_pub_send_status+0x9a>
	} else if (val == 0xffff) {
    fd00:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fd04:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
    fd06:	bf1f      	itttt	ne
    fd08:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    fd0c:	fab1 f181 	clzne	r1, r1
    fd10:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
    fd14:	b2c9      	uxtbne	r1, r1
		return 0xff;
    fd16:	bf08      	it	eq
    fd18:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
    fd1a:	a803      	add	r0, sp, #12
    fd1c:	f014 ffe5 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.period);
    fd20:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    fd24:	a803      	add	r0, sp, #12
    fd26:	f014 ffe0 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.ttl);
    fd2a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
    fd2e:	a803      	add	r0, sp, #12
    fd30:	f014 ffdb 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.feat);
    fd34:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    fd36:	a803      	add	r0, sp, #12
    fd38:	f014 ffdf 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.net_idx);
    fd3c:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    fd3e:	a803      	add	r0, sp, #12
    fd40:	f014 ffdb 	bl	24cfa <net_buf_simple_add_le16>
    fd44:	e7bb      	b.n	fcbe <hb_pub_send_status+0x3e>
    fd46:	bf00      	nop
    fd48:	00025880 	.word	0x00025880
    fd4c:	00025920 	.word	0x00025920
    fd50:	000296a7 	.word	0x000296a7

0000fd54 <send_mod_sub_status>:
{
    fd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd58:	b08a      	sub	sp, #40	; 0x28
    fd5a:	461f      	mov	r7, r3
    fd5c:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
    fd5e:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
    fd62:	a906      	add	r1, sp, #24
{
    fd64:	4690      	mov	r8, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
    fd66:	e9cd 3104 	strd	r3, r1, [sp, #16]
    fd6a:	9103      	str	r1, [sp, #12]
{
    fd6c:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
    fd6e:	f248 011f 	movw	r1, #32799	; 0x801f
    fd72:	a803      	add	r0, sp, #12
{
    fd74:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
    fd78:	f013 fe59 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
    fd7c:	4641      	mov	r1, r8
    fd7e:	a803      	add	r0, sp, #12
    fd80:	f014 ffb3 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
    fd84:	4639      	mov	r1, r7
    fd86:	a803      	add	r0, sp, #12
    fd88:	f014 ffb7 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
    fd8c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    fd90:	a803      	add	r0, sp, #12
    fd92:	f014 ffb2 	bl	24cfa <net_buf_simple_add_le16>
	if (vnd) {
    fd96:	b306      	cbz	r6, fdda <send_mod_sub_status+0x86>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
    fd98:	2104      	movs	r1, #4
    fd9a:	a803      	add	r0, sp, #12
    fd9c:	f014 ff96 	bl	24ccc <net_buf_simple_add>
    fda0:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
    fda2:	9911      	ldr	r1, [sp, #68]	; 0x44
    fda4:	f012 f86f 	bl	21e86 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fda8:	2300      	movs	r3, #0
    fdaa:	9300      	str	r3, [sp, #0]
    fdac:	aa03      	add	r2, sp, #12
    fdae:	4629      	mov	r1, r5
    fdb0:	4620      	mov	r0, r4
    fdb2:	f013 fe65 	bl	23a80 <bt_mesh_model_send>
    fdb6:	b168      	cbz	r0, fdd4 <send_mod_sub_status+0x80>
		BT_ERR("Unable to send Model Subscription Status");
    fdb8:	2301      	movs	r3, #1
    fdba:	f04f 0100 	mov.w	r1, #0
    fdbe:	f363 0107 	bfi	r1, r3, #0, #8
    fdc2:	4a09      	ldr	r2, [pc, #36]	; (fde8 <send_mod_sub_status+0x94>)
    fdc4:	4b09      	ldr	r3, [pc, #36]	; (fdec <send_mod_sub_status+0x98>)
    fdc6:	480a      	ldr	r0, [pc, #40]	; (fdf0 <send_mod_sub_status+0x9c>)
    fdc8:	1a9b      	subs	r3, r3, r2
    fdca:	08db      	lsrs	r3, r3, #3
    fdcc:	f363 118f 	bfi	r1, r3, #6, #10
    fdd0:	f010 ff18 	bl	20c04 <log_0>
}
    fdd4:	b00a      	add	sp, #40	; 0x28
    fdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
    fdda:	2102      	movs	r1, #2
    fddc:	a803      	add	r0, sp, #12
    fdde:	f014 ff75 	bl	24ccc <net_buf_simple_add>
    fde2:	2202      	movs	r2, #2
    fde4:	e7dd      	b.n	fda2 <send_mod_sub_status+0x4e>
    fde6:	bf00      	nop
    fde8:	00025880 	.word	0x00025880
    fdec:	00025920 	.word	0x00025920
    fdf0:	00029b55 	.word	0x00029b55

0000fdf4 <lpn_timeout_get>:
{
    fdf4:	b570      	push	{r4, r5, r6, lr}
    fdf6:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4);
    fdf8:	ab02      	add	r3, sp, #8
{
    fdfa:	4605      	mov	r5, r0
    fdfc:	460e      	mov	r6, r1
	lpn_addr = net_buf_simple_pull_le16(buf);
    fdfe:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4);
    fe00:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
    fe04:	9305      	str	r3, [sp, #20]
    fe06:	e9cd 1306 	strd	r1, r3, [sp, #24]
	lpn_addr = net_buf_simple_pull_le16(buf);
    fe0a:	f014 ffe4 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
    fe0e:	b203      	sxth	r3, r0
    fe10:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
    fe12:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
    fe14:	dc0f      	bgt.n	fe36 <lpn_timeout_get+0x42>
		BT_WARN("Invalid LPNAddress; ignoring msg");
    fe16:	2302      	movs	r3, #2
    fe18:	f04f 0100 	mov.w	r1, #0
    fe1c:	f363 0107 	bfi	r1, r3, #0, #8
    fe20:	4a27      	ldr	r2, [pc, #156]	; (fec0 <lpn_timeout_get+0xcc>)
    fe22:	4b28      	ldr	r3, [pc, #160]	; (fec4 <lpn_timeout_get+0xd0>)
    fe24:	4828      	ldr	r0, [pc, #160]	; (fec8 <lpn_timeout_get+0xd4>)
    fe26:	1a9b      	subs	r3, r3, r2
    fe28:	08db      	lsrs	r3, r3, #3
    fe2a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send LPN PollTimeout Status");
    fe2e:	f010 fee9 	bl	20c04 <log_0>
}
    fe32:	b008      	add	sp, #32
    fe34:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
    fe36:	f248 012e 	movw	r1, #32814	; 0x802e
    fe3a:	a805      	add	r0, sp, #20
    fe3c:	f013 fdf7 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
    fe40:	4621      	mov	r1, r4
    fe42:	a805      	add	r0, sp, #20
    fe44:	f014 ff59 	bl	24cfa <net_buf_simple_add_le16>
	frnd = bt_mesh_friend_find(BT_MESH_KEY_ANY, lpn_addr, true, true);
    fe48:	2301      	movs	r3, #1
    fe4a:	461a      	mov	r2, r3
    fe4c:	4621      	mov	r1, r4
    fe4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    fe52:	f005 fa3b 	bl	152cc <bt_mesh_friend_find>
	if (!frnd) {
    fe56:	b388      	cbz	r0, febc <lpn_timeout_get+0xc8>
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    fe58:	3024      	adds	r0, #36	; 0x24
    fe5a:	f00f f871 	bl	1ef40 <z_timeout_remaining>
    fe5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fe62:	2264      	movs	r2, #100	; 0x64
    fe64:	2300      	movs	r3, #0
    fe66:	fb80 0101 	smull	r0, r1, r0, r1
    fe6a:	f7f0 f989 	bl	180 <__aeabi_uldivmod>
	timeout = k_delayed_work_remaining_get(&frnd->timer) / 100;
    fe6e:	2464      	movs	r4, #100	; 0x64
    fe70:	fb90 f4f4 	sdiv	r4, r0, r4
	net_buf_simple_add_u8(&msg, timeout);
    fe74:	b2e1      	uxtb	r1, r4
    fe76:	a805      	add	r0, sp, #20
    fe78:	f014 ff37 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, timeout >> 8);
    fe7c:	f3c4 2107 	ubfx	r1, r4, #8, #8
    fe80:	a805      	add	r0, sp, #20
    fe82:	f014 ff32 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, timeout >> 16);
    fe86:	f3c4 4107 	ubfx	r1, r4, #16, #8
    fe8a:	a805      	add	r0, sp, #20
    fe8c:	f014 ff2d 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    fe90:	2300      	movs	r3, #0
    fe92:	9300      	str	r3, [sp, #0]
    fe94:	aa05      	add	r2, sp, #20
    fe96:	4631      	mov	r1, r6
    fe98:	4628      	mov	r0, r5
    fe9a:	f013 fdf1 	bl	23a80 <bt_mesh_model_send>
    fe9e:	2800      	cmp	r0, #0
    fea0:	d0c7      	beq.n	fe32 <lpn_timeout_get+0x3e>
		BT_ERR("Unable to send LPN PollTimeout Status");
    fea2:	2301      	movs	r3, #1
    fea4:	f04f 0100 	mov.w	r1, #0
    fea8:	f363 0107 	bfi	r1, r3, #0, #8
    feac:	4a04      	ldr	r2, [pc, #16]	; (fec0 <lpn_timeout_get+0xcc>)
    feae:	4b05      	ldr	r3, [pc, #20]	; (fec4 <lpn_timeout_get+0xd0>)
    feb0:	4806      	ldr	r0, [pc, #24]	; (fecc <lpn_timeout_get+0xd8>)
    feb2:	1a9b      	subs	r3, r3, r2
    feb4:	08db      	lsrs	r3, r3, #3
    feb6:	f363 118f 	bfi	r1, r3, #6, #10
    feba:	e7b8      	b.n	fe2e <lpn_timeout_get+0x3a>
		timeout = 0;
    febc:	4604      	mov	r4, r0
    febe:	e7d9      	b.n	fe74 <lpn_timeout_get+0x80>
    fec0:	00025880 	.word	0x00025880
    fec4:	00025920 	.word	0x00025920
    fec8:	000297a0 	.word	0x000297a0
    fecc:	000297c1 	.word	0x000297c1

0000fed0 <node_reset>:
{
    fed0:	b530      	push	{r4, r5, lr}
    fed2:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 0 + 4);
    fed4:	ab03      	add	r3, sp, #12
    fed6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
    feda:	4604      	mov	r4, r0
    fedc:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    fede:	a805      	add	r0, sp, #20
    fee0:	f248 014a 	movw	r1, #32842	; 0x804a
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 0 + 4);
    fee4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fee8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
    feea:	f013 fda0 	bl	23a2e <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    feee:	2300      	movs	r3, #0
    fef0:	9300      	str	r3, [sp, #0]
    fef2:	aa05      	add	r2, sp, #20
    fef4:	4629      	mov	r1, r5
    fef6:	4620      	mov	r0, r4
    fef8:	f013 fdc2 	bl	23a80 <bt_mesh_model_send>
    fefc:	b168      	cbz	r0, ff1a <node_reset+0x4a>
		BT_ERR("Unable to send Node Reset Status");
    fefe:	2301      	movs	r3, #1
    ff00:	f04f 0100 	mov.w	r1, #0
    ff04:	f363 0107 	bfi	r1, r3, #0, #8
    ff08:	4a06      	ldr	r2, [pc, #24]	; (ff24 <node_reset+0x54>)
    ff0a:	4b07      	ldr	r3, [pc, #28]	; (ff28 <node_reset+0x58>)
    ff0c:	4807      	ldr	r0, [pc, #28]	; (ff2c <node_reset+0x5c>)
    ff0e:	1a9b      	subs	r3, r3, r2
    ff10:	08db      	lsrs	r3, r3, #3
    ff12:	f363 118f 	bfi	r1, r3, #6, #10
    ff16:	f010 fe75 	bl	20c04 <log_0>
	bt_mesh_reset();
    ff1a:	f7fa ffc5 	bl	aea8 <bt_mesh_reset>
}
    ff1e:	b009      	add	sp, #36	; 0x24
    ff20:	bd30      	pop	{r4, r5, pc}
    ff22:	bf00      	nop
    ff24:	00025880 	.word	0x00025880
    ff28:	00025920 	.word	0x00025920
    ff2c:	00029a3a 	.word	0x00029a3a

0000ff30 <mod_sub_get>:
{
    ff30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff34:	4615      	mov	r5, r2
    ff36:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4 +
    ff38:	ab06      	add	r3, sp, #24
    ff3a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
    ff3e:	4607      	mov	r7, r0
	addr = net_buf_simple_pull_le16(buf);
    ff40:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4 +
    ff42:	9303      	str	r3, [sp, #12]
    ff44:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
    ff48:	4688      	mov	r8, r1
	addr = net_buf_simple_pull_le16(buf);
    ff4a:	f014 ff44 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    ff4e:	b203      	sxth	r3, r0
    ff50:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    ff52:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    ff54:	dc10      	bgt.n	ff78 <mod_sub_get+0x48>
		BT_WARN("Prohibited element address");
    ff56:	2302      	movs	r3, #2
    ff58:	f04f 0100 	mov.w	r1, #0
    ff5c:	f363 0107 	bfi	r1, r3, #0, #8
    ff60:	4a2b      	ldr	r2, [pc, #172]	; (10010 <__kernel_ram_size+0x10>)
    ff62:	4b2c      	ldr	r3, [pc, #176]	; (10014 <__kernel_ram_size+0x14>)
    ff64:	482c      	ldr	r0, [pc, #176]	; (10018 <__kernel_ram_size+0x18>)
    ff66:	1a9b      	subs	r3, r3, r2
    ff68:	08db      	lsrs	r3, r3, #3
    ff6a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Model Subscription List");
    ff6e:	f010 fe49 	bl	20c04 <log_0>
}
    ff72:	b00a      	add	sp, #40	; 0x28
    ff74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id = net_buf_simple_pull_le16(buf);
    ff78:	4628      	mov	r0, r5
    ff7a:	f014 ff2c 	bl	24dd6 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    ff7e:	f248 012a 	movw	r1, #32810	; 0x802a
	id = net_buf_simple_pull_le16(buf);
    ff82:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    ff84:	a803      	add	r0, sp, #12
    ff86:	f013 fd52 	bl	23a2e <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    ff8a:	4620      	mov	r0, r4
    ff8c:	f7ff faa4 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
    ff90:	b960      	cbnz	r0, ffac <mod_sub_get+0x7c>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
    ff92:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    ff94:	a803      	add	r0, sp, #12
    ff96:	f014 fea8 	bl	24cea <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
    ff9a:	4621      	mov	r1, r4
    ff9c:	a803      	add	r0, sp, #12
    ff9e:	f014 feac 	bl	24cfa <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
    ffa2:	4629      	mov	r1, r5
			net_buf_simple_add_le16(&msg, mod->groups[i]);
    ffa4:	a803      	add	r0, sp, #12
    ffa6:	f014 fea8 	bl	24cfa <net_buf_simple_add_le16>
    ffaa:	e01a      	b.n	ffe2 <mod_sub_get+0xb2>
	mod = bt_mesh_model_find(elem, id);
    ffac:	4629      	mov	r1, r5
    ffae:	f013 fda4 	bl	23afa <bt_mesh_model_find>
	if (!mod) {
    ffb2:	4606      	mov	r6, r0
    ffb4:	b908      	cbnz	r0, ffba <mod_sub_get+0x8a>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    ffb6:	2102      	movs	r1, #2
    ffb8:	e7ec      	b.n	ff94 <mod_sub_get+0x64>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    ffba:	2100      	movs	r1, #0
    ffbc:	a803      	add	r0, sp, #12
    ffbe:	f014 fe94 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
    ffc2:	4621      	mov	r1, r4
    ffc4:	a803      	add	r0, sp, #12
    ffc6:	f014 fe98 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
    ffca:	4629      	mov	r1, r5
    ffcc:	a803      	add	r0, sp, #12
    ffce:	f014 fe94 	bl	24cfa <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    ffd2:	89f1      	ldrh	r1, [r6, #14]
    ffd4:	b111      	cbz	r1, ffdc <mod_sub_get+0xac>
			net_buf_simple_add_le16(&msg, mod->groups[i]);
    ffd6:	a803      	add	r0, sp, #12
    ffd8:	f014 fe8f 	bl	24cfa <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    ffdc:	8a31      	ldrh	r1, [r6, #16]
    ffde:	2900      	cmp	r1, #0
    ffe0:	d1e0      	bne.n	ffa4 <mod_sub_get+0x74>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    ffe2:	2300      	movs	r3, #0
    ffe4:	9300      	str	r3, [sp, #0]
    ffe6:	aa03      	add	r2, sp, #12
    ffe8:	4641      	mov	r1, r8
    ffea:	4638      	mov	r0, r7
    ffec:	f013 fd48 	bl	23a80 <bt_mesh_model_send>
    fff0:	2800      	cmp	r0, #0
    fff2:	d0be      	beq.n	ff72 <mod_sub_get+0x42>
		BT_ERR("Unable to send Model Subscription List");
    fff4:	2301      	movs	r3, #1
    fff6:	f04f 0100 	mov.w	r1, #0
    fffa:	f363 0107 	bfi	r1, r3, #0, #8
    fffe:	4a04      	ldr	r2, [pc, #16]	; (10010 <__kernel_ram_size+0x10>)
   10000:	4b04      	ldr	r3, [pc, #16]	; (10014 <__kernel_ram_size+0x14>)
   10002:	4806      	ldr	r0, [pc, #24]	; (1001c <__kernel_ram_size+0x1c>)
   10004:	1a9b      	subs	r3, r3, r2
   10006:	08db      	lsrs	r3, r3, #3
   10008:	f363 118f 	bfi	r1, r3, #6, #10
   1000c:	e7af      	b.n	ff6e <mod_sub_get+0x3e>
   1000e:	bf00      	nop
   10010:	00025880 	.word	0x00025880
   10014:	00025920 	.word	0x00025920
   10018:	000298bf 	.word	0x000298bf
   1001c:	000298da 	.word	0x000298da

00010020 <mod_sub_get_vnd>:
{
   10020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10024:	4615      	mov	r5, r2
   10026:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 7 + 4 +
   10028:	ab05      	add	r3, sp, #20
   1002a:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   1002e:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   10030:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 7 + 4 +
   10032:	9302      	str	r3, [sp, #8]
   10034:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
   10038:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   1003a:	f014 fecc 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1003e:	b203      	sxth	r3, r0
   10040:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   10042:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   10044:	dc10      	bgt.n	10068 <mod_sub_get_vnd+0x48>
		BT_WARN("Prohibited element address");
   10046:	2302      	movs	r3, #2
   10048:	f04f 0100 	mov.w	r1, #0
   1004c:	f363 0107 	bfi	r1, r3, #0, #8
   10050:	4a31      	ldr	r2, [pc, #196]	; (10118 <mod_sub_get_vnd+0xf8>)
   10052:	4b32      	ldr	r3, [pc, #200]	; (1011c <mod_sub_get_vnd+0xfc>)
   10054:	4832      	ldr	r0, [pc, #200]	; (10120 <mod_sub_get_vnd+0x100>)
   10056:	1a9b      	subs	r3, r3, r2
   10058:	08db      	lsrs	r3, r3, #3
   1005a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Vendor Model Subscription List");
   1005e:	f010 fdd1 	bl	20c04 <log_0>
}
   10062:	b00b      	add	sp, #44	; 0x2c
   10064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	company = net_buf_simple_pull_le16(buf);
   10068:	4628      	mov	r0, r5
   1006a:	f014 feb4 	bl	24dd6 <net_buf_simple_pull_le16>
   1006e:	4606      	mov	r6, r0
	id = net_buf_simple_pull_le16(buf);
   10070:	4628      	mov	r0, r5
   10072:	f014 feb0 	bl	24dd6 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   10076:	f248 012c 	movw	r1, #32812	; 0x802c
	id = net_buf_simple_pull_le16(buf);
   1007a:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1007c:	a802      	add	r0, sp, #8
   1007e:	f013 fcd6 	bl	23a2e <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   10082:	4620      	mov	r0, r4
   10084:	f7ff fa28 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   10088:	b980      	cbnz	r0, 100ac <mod_sub_get_vnd+0x8c>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   1008a:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1008c:	a802      	add	r0, sp, #8
   1008e:	f014 fe2c 	bl	24cea <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   10092:	4621      	mov	r1, r4
   10094:	a802      	add	r0, sp, #8
   10096:	f014 fe30 	bl	24cfa <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   1009a:	4631      	mov	r1, r6
   1009c:	a802      	add	r0, sp, #8
   1009e:	f014 fe2c 	bl	24cfa <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   100a2:	4629      	mov	r1, r5
			net_buf_simple_add_le16(&msg, mod->groups[i]);
   100a4:	a802      	add	r0, sp, #8
   100a6:	f014 fe28 	bl	24cfa <net_buf_simple_add_le16>
   100aa:	e01f      	b.n	100ec <mod_sub_get_vnd+0xcc>
	mod = bt_mesh_model_find_vnd(elem, company, id);
   100ac:	462a      	mov	r2, r5
   100ae:	4631      	mov	r1, r6
   100b0:	f013 fd0c 	bl	23acc <bt_mesh_model_find_vnd>
	if (!mod) {
   100b4:	4607      	mov	r7, r0
   100b6:	b908      	cbnz	r0, 100bc <mod_sub_get_vnd+0x9c>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   100b8:	2102      	movs	r1, #2
   100ba:	e7e7      	b.n	1008c <mod_sub_get_vnd+0x6c>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   100bc:	2100      	movs	r1, #0
   100be:	a802      	add	r0, sp, #8
   100c0:	f014 fe13 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   100c4:	4621      	mov	r1, r4
   100c6:	a802      	add	r0, sp, #8
   100c8:	f014 fe17 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   100cc:	4631      	mov	r1, r6
   100ce:	a802      	add	r0, sp, #8
   100d0:	f014 fe13 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   100d4:	4629      	mov	r1, r5
   100d6:	a802      	add	r0, sp, #8
   100d8:	f014 fe0f 	bl	24cfa <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   100dc:	89f9      	ldrh	r1, [r7, #14]
   100de:	b111      	cbz	r1, 100e6 <mod_sub_get_vnd+0xc6>
			net_buf_simple_add_le16(&msg, mod->groups[i]);
   100e0:	a802      	add	r0, sp, #8
   100e2:	f014 fe0a 	bl	24cfa <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   100e6:	8a39      	ldrh	r1, [r7, #16]
   100e8:	2900      	cmp	r1, #0
   100ea:	d1db      	bne.n	100a4 <mod_sub_get_vnd+0x84>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   100ec:	2300      	movs	r3, #0
   100ee:	9300      	str	r3, [sp, #0]
   100f0:	aa02      	add	r2, sp, #8
   100f2:	4649      	mov	r1, r9
   100f4:	4640      	mov	r0, r8
   100f6:	f013 fcc3 	bl	23a80 <bt_mesh_model_send>
   100fa:	2800      	cmp	r0, #0
   100fc:	d0b1      	beq.n	10062 <mod_sub_get_vnd+0x42>
		BT_ERR("Unable to send Vendor Model Subscription List");
   100fe:	2301      	movs	r3, #1
   10100:	f04f 0100 	mov.w	r1, #0
   10104:	f363 0107 	bfi	r1, r3, #0, #8
   10108:	4a03      	ldr	r2, [pc, #12]	; (10118 <mod_sub_get_vnd+0xf8>)
   1010a:	4b04      	ldr	r3, [pc, #16]	; (1011c <mod_sub_get_vnd+0xfc>)
   1010c:	4805      	ldr	r0, [pc, #20]	; (10124 <mod_sub_get_vnd+0x104>)
   1010e:	1a9b      	subs	r3, r3, r2
   10110:	08db      	lsrs	r3, r3, #3
   10112:	f363 118f 	bfi	r1, r3, #6, #10
   10116:	e7a2      	b.n	1005e <mod_sub_get_vnd+0x3e>
   10118:	00025880 	.word	0x00025880
   1011c:	00025920 	.word	0x00025920
   10120:	000298bf 	.word	0x000298bf
   10124:	00029901 	.word	0x00029901

00010128 <va_add>:
{
   10128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1012c:	4c1c      	ldr	r4, [pc, #112]	; (101a0 <va_add+0x78>)
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   1012e:	2600      	movs	r6, #0
{
   10130:	4607      	mov	r7, r0
   10132:	4688      	mov	r8, r1
	struct label *free_slot = NULL;
   10134:	4635      	mov	r5, r6
   10136:	46a1      	mov	r9, r4
		if (!labels[i].ref) {
   10138:	8823      	ldrh	r3, [r4, #0]
   1013a:	b19b      	cbz	r3, 10164 <va_add+0x3c>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   1013c:	2210      	movs	r2, #16
   1013e:	4639      	mov	r1, r7
   10140:	1d20      	adds	r0, r4, #4
   10142:	f011 fe79 	bl	21e38 <memcmp>
   10146:	b970      	cbnz	r0, 10166 <va_add+0x3e>
			*addr = labels[i].addr;
   10148:	2314      	movs	r3, #20
   1014a:	435e      	muls	r6, r3
   1014c:	eb09 0306 	add.w	r3, r9, r6
   10150:	885b      	ldrh	r3, [r3, #2]
   10152:	f8a8 3000 	strh.w	r3, [r8]
			labels[i].ref++;
   10156:	f839 3006 	ldrh.w	r3, [r9, r6]
   1015a:	3301      	adds	r3, #1
   1015c:	f829 3006 	strh.w	r3, [r9, r6]
}
   10160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10164:	4625      	mov	r5, r4
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   10166:	3601      	adds	r6, #1
   10168:	2e03      	cmp	r6, #3
   1016a:	f104 0414 	add.w	r4, r4, #20
   1016e:	d1e3      	bne.n	10138 <va_add+0x10>
	if (!free_slot) {
   10170:	b18d      	cbz	r5, 10196 <va_add+0x6e>
	if (bt_mesh_virtual_addr(label_uuid, addr) < 0) {
   10172:	4641      	mov	r1, r8
   10174:	4638      	mov	r0, r7
   10176:	f7fe ffa3 	bl	f0c0 <bt_mesh_virtual_addr>
   1017a:	2800      	cmp	r0, #0
   1017c:	db0d      	blt.n	1019a <va_add+0x72>
	free_slot->ref = 1U;
   1017e:	2301      	movs	r3, #1
   10180:	802b      	strh	r3, [r5, #0]
	free_slot->addr = *addr;
   10182:	f8b8 3000 	ldrh.w	r3, [r8]
   10186:	806b      	strh	r3, [r5, #2]
	memcpy(free_slot->uuid, label_uuid, 16);
   10188:	2210      	movs	r2, #16
   1018a:	4639      	mov	r1, r7
   1018c:	1d28      	adds	r0, r5, #4
   1018e:	f011 fe7a 	bl	21e86 <memcpy>
	return STATUS_SUCCESS;
   10192:	2000      	movs	r0, #0
   10194:	e7e4      	b.n	10160 <va_add+0x38>
		return STATUS_INSUFF_RESOURCES;
   10196:	2005      	movs	r0, #5
   10198:	e7e2      	b.n	10160 <va_add+0x38>
		return STATUS_UNSPECIFIED;
   1019a:	2010      	movs	r0, #16
   1019c:	e7e0      	b.n	10160 <va_add+0x38>
   1019e:	bf00      	nop
   101a0:	20001e46 	.word	0x20001e46

000101a4 <send_krp_status>:
{
   101a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   101a6:	b089      	sub	sp, #36	; 0x24
   101a8:	460d      	mov	r5, r1
   101aa:	461e      	mov	r6, r3
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   101ac:	a902      	add	r1, sp, #8
   101ae:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   101b2:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   101b6:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   101b8:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   101ba:	a805      	add	r0, sp, #20
   101bc:	f248 0117 	movw	r1, #32791	; 0x8017
{
   101c0:	4617      	mov	r7, r2
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   101c2:	f013 fc34 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   101c6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   101ca:	a805      	add	r0, sp, #20
   101cc:	f014 fd8d 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   101d0:	4639      	mov	r1, r7
   101d2:	a805      	add	r0, sp, #20
   101d4:	f014 fd91 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   101d8:	4631      	mov	r1, r6
   101da:	a805      	add	r0, sp, #20
   101dc:	f014 fd85 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   101e0:	2300      	movs	r3, #0
   101e2:	9300      	str	r3, [sp, #0]
   101e4:	aa05      	add	r2, sp, #20
   101e6:	4629      	mov	r1, r5
   101e8:	4620      	mov	r0, r4
   101ea:	f013 fc49 	bl	23a80 <bt_mesh_model_send>
   101ee:	b168      	cbz	r0, 1020c <send_krp_status+0x68>
		BT_ERR("Unable to send Key Refresh State Status");
   101f0:	2301      	movs	r3, #1
   101f2:	f04f 0100 	mov.w	r1, #0
   101f6:	f363 0107 	bfi	r1, r3, #0, #8
   101fa:	4a05      	ldr	r2, [pc, #20]	; (10210 <send_krp_status+0x6c>)
   101fc:	4b05      	ldr	r3, [pc, #20]	; (10214 <send_krp_status+0x70>)
   101fe:	4806      	ldr	r0, [pc, #24]	; (10218 <send_krp_status+0x74>)
   10200:	1a9b      	subs	r3, r3, r2
   10202:	08db      	lsrs	r3, r3, #3
   10204:	f363 118f 	bfi	r1, r3, #6, #10
   10208:	f010 fcfc 	bl	20c04 <log_0>
}
   1020c:	b009      	add	sp, #36	; 0x24
   1020e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10210:	00025880 	.word	0x00025880
   10214:	00025920 	.word	0x00025920
   10218:	00029b05 	.word	0x00029b05

0001021c <krp_get>:
{
   1021c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1021e:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   10220:	4610      	mov	r0, r2
{
   10222:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   10224:	f014 fdd7 	bl	24dd6 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   10228:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1022c:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1022e:	d311      	bcc.n	10254 <krp_get+0x38>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10230:	2301      	movs	r3, #1
   10232:	f04f 0200 	mov.w	r2, #0
   10236:	f363 0207 	bfi	r2, r3, #0, #8
   1023a:	490e      	ldr	r1, [pc, #56]	; (10274 <krp_get+0x58>)
   1023c:	4b0e      	ldr	r3, [pc, #56]	; (10278 <krp_get+0x5c>)
   1023e:	1a5b      	subs	r3, r3, r1
   10240:	08db      	lsrs	r3, r3, #3
   10242:	4601      	mov	r1, r0
   10244:	480d      	ldr	r0, [pc, #52]	; (1027c <krp_get+0x60>)
   10246:	f363 128f 	bfi	r2, r3, #6, #10
}
   1024a:	b002      	add	sp, #8
   1024c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   10250:	f010 bce5 	b.w	20c1e <log_1>
	sub = bt_mesh_subnet_get(idx);
   10254:	f7fb fca4 	bl	bba0 <bt_mesh_subnet_get>
	if (!sub) {
   10258:	4603      	mov	r3, r0
   1025a:	b940      	cbnz	r0, 1026e <krp_get+0x52>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
   1025c:	2204      	movs	r2, #4
		send_krp_status(model, ctx, idx, sub->kr_phase,
   1025e:	9200      	str	r2, [sp, #0]
   10260:	4631      	mov	r1, r6
   10262:	4622      	mov	r2, r4
   10264:	4628      	mov	r0, r5
   10266:	f7ff ff9d 	bl	101a4 <send_krp_status>
}
   1026a:	b002      	add	sp, #8
   1026c:	bd70      	pop	{r4, r5, r6, pc}
		send_krp_status(model, ctx, idx, sub->kr_phase,
   1026e:	7fc3      	ldrb	r3, [r0, #31]
   10270:	2200      	movs	r2, #0
   10272:	e7f4      	b.n	1025e <krp_get+0x42>
   10274:	00025880 	.word	0x00025880
   10278:	00025920 	.word	0x00025920
   1027c:	000299de 	.word	0x000299de

00010280 <krp_set>:
{
   10280:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10284:	4680      	mov	r8, r0
	idx = net_buf_simple_pull_le16(buf);
   10286:	4610      	mov	r0, r2
{
   10288:	4614      	mov	r4, r2
   1028a:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   1028c:	f014 fda3 	bl	24dd6 <net_buf_simple_pull_le16>
   10290:	4605      	mov	r5, r0
	phase = net_buf_simple_pull_u8(buf);
   10292:	4620      	mov	r0, r4
   10294:	f014 fd97 	bl	24dc6 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   10298:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   1029c:	4606      	mov	r6, r0
	if (idx > 0xfff) {
   1029e:	d311      	bcc.n	102c4 <krp_set+0x44>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   102a0:	2301      	movs	r3, #1
   102a2:	f04f 0200 	mov.w	r2, #0
   102a6:	f363 0207 	bfi	r2, r3, #0, #8
   102aa:	4929      	ldr	r1, [pc, #164]	; (10350 <krp_set+0xd0>)
   102ac:	4b29      	ldr	r3, [pc, #164]	; (10354 <krp_set+0xd4>)
   102ae:	482a      	ldr	r0, [pc, #168]	; (10358 <krp_set+0xd8>)
   102b0:	1a5b      	subs	r3, r3, r1
   102b2:	08db      	lsrs	r3, r3, #3
   102b4:	f363 128f 	bfi	r2, r3, #6, #10
   102b8:	4629      	mov	r1, r5
}
   102ba:	b002      	add	sp, #8
   102bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   102c0:	f010 bcad 	b.w	20c1e <log_1>
	sub = bt_mesh_subnet_get(idx);
   102c4:	4628      	mov	r0, r5
   102c6:	f7fb fc6b 	bl	bba0 <bt_mesh_subnet_get>
	if (!sub) {
   102ca:	4604      	mov	r4, r0
   102cc:	b950      	cbnz	r0, 102e4 <krp_set+0x64>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
   102ce:	2304      	movs	r3, #4
   102d0:	9300      	str	r3, [sp, #0]
   102d2:	4603      	mov	r3, r0
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
   102d4:	462a      	mov	r2, r5
   102d6:	4639      	mov	r1, r7
   102d8:	4640      	mov	r0, r8
   102da:	f7ff ff63 	bl	101a4 <send_krp_status>
}
   102de:	b002      	add	sp, #8
   102e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
   102e4:	1eb3      	subs	r3, r6, #2
   102e6:	b2db      	uxtb	r3, r3
   102e8:	2b01      	cmp	r3, #1
   102ea:	7fc1      	ldrb	r1, [r0, #31]
   102ec:	d802      	bhi.n	102f4 <krp_set+0x74>
   102ee:	b999      	cbnz	r1, 10318 <krp_set+0x98>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
   102f0:	2e02      	cmp	r6, #2
   102f2:	d11a      	bne.n	1032a <krp_set+0xaa>
		BT_WARN("Prohibited transition %u -> %u", sub->kr_phase, phase);
   102f4:	2202      	movs	r2, #2
   102f6:	f04f 0300 	mov.w	r3, #0
   102fa:	f362 0307 	bfi	r3, r2, #0, #8
   102fe:	4814      	ldr	r0, [pc, #80]	; (10350 <krp_set+0xd0>)
   10300:	4a14      	ldr	r2, [pc, #80]	; (10354 <krp_set+0xd4>)
   10302:	1a12      	subs	r2, r2, r0
   10304:	08d2      	lsrs	r2, r2, #3
   10306:	4815      	ldr	r0, [pc, #84]	; (1035c <krp_set+0xdc>)
   10308:	f362 138f 	bfi	r3, r2, #6, #10
   1030c:	4632      	mov	r2, r6
}
   1030e:	b002      	add	sp, #8
   10310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Prohibited transition %u -> %u", sub->kr_phase, phase);
   10314:	f010 bc97 	b.w	20c46 <log_2>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1 &&
   10318:	2901      	cmp	r1, #1
   1031a:	d10a      	bne.n	10332 <krp_set+0xb2>
   1031c:	2e02      	cmp	r6, #2
   1031e:	d10a      	bne.n	10336 <krp_set+0xb6>
		sub->kr_flag = 1;
   10320:	f240 2301 	movw	r3, #513	; 0x201
   10324:	83c3      	strh	r3, [r0, #30]
		bt_mesh_net_beacon_update(sub);
   10326:	f7fb ff3b 	bl	c1a0 <bt_mesh_net_beacon_update>
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
   1032a:	2200      	movs	r2, #0
   1032c:	7fe3      	ldrb	r3, [r4, #31]
   1032e:	9200      	str	r2, [sp, #0]
   10330:	e7d0      	b.n	102d4 <krp_set+0x54>
	} else if ((sub->kr_phase == BT_MESH_KR_PHASE_1 ||
   10332:	2902      	cmp	r1, #2
   10334:	d1f9      	bne.n	1032a <krp_set+0xaa>
		    sub->kr_phase == BT_MESH_KR_PHASE_2) &&
   10336:	2e03      	cmp	r6, #3
   10338:	d1f7      	bne.n	1032a <krp_set+0xaa>
		bt_mesh_net_revoke_keys(sub);
   1033a:	4620      	mov	r0, r4
   1033c:	f7fb fffa 	bl	c334 <bt_mesh_net_revoke_keys>
			friend_cred_refresh(ctx->net_idx);
   10340:	8838      	ldrh	r0, [r7, #0]
   10342:	f7fb fdd5 	bl	bef0 <friend_cred_refresh>
		sub->kr_flag = 0;
   10346:	2300      	movs	r3, #0
   10348:	83e3      	strh	r3, [r4, #30]
		bt_mesh_net_beacon_update(sub);
   1034a:	4620      	mov	r0, r4
   1034c:	e7eb      	b.n	10326 <krp_set+0xa6>
   1034e:	bf00      	nop
   10350:	00025880 	.word	0x00025880
   10354:	00025920 	.word	0x00025920
   10358:	000299de 	.word	0x000299de
   1035c:	00029781 	.word	0x00029781

00010360 <send_friend_status>:
{
   10360:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   10362:	6986      	ldr	r6, [r0, #24]
{
   10364:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10366:	ab03      	add	r3, sp, #12
   10368:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1036c:	4604      	mov	r4, r0
   1036e:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   10370:	a805      	add	r0, sp, #20
   10372:	f248 0111 	movw	r1, #32785	; 0x8011
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   10376:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1037a:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   1037c:	f013 fb57 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, cfg->frnd);
   10380:	7a71      	ldrb	r1, [r6, #9]
   10382:	a805      	add	r0, sp, #20
   10384:	f014 fcb1 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10388:	2300      	movs	r3, #0
   1038a:	9300      	str	r3, [sp, #0]
   1038c:	aa05      	add	r2, sp, #20
   1038e:	4629      	mov	r1, r5
   10390:	4620      	mov	r0, r4
   10392:	f013 fb75 	bl	23a80 <bt_mesh_model_send>
   10396:	b168      	cbz	r0, 103b4 <send_friend_status+0x54>
		BT_ERR("Unable to send Friend Status");
   10398:	2301      	movs	r3, #1
   1039a:	f04f 0100 	mov.w	r1, #0
   1039e:	f363 0107 	bfi	r1, r3, #0, #8
   103a2:	4a05      	ldr	r2, [pc, #20]	; (103b8 <send_friend_status+0x58>)
   103a4:	4b05      	ldr	r3, [pc, #20]	; (103bc <send_friend_status+0x5c>)
   103a6:	4806      	ldr	r0, [pc, #24]	; (103c0 <send_friend_status+0x60>)
   103a8:	1a9b      	subs	r3, r3, r2
   103aa:	08db      	lsrs	r3, r3, #3
   103ac:	f363 118f 	bfi	r1, r3, #6, #10
   103b0:	f010 fc28 	bl	20c04 <log_0>
}
   103b4:	b008      	add	sp, #32
   103b6:	bd70      	pop	{r4, r5, r6, pc}
   103b8:	00025880 	.word	0x00025880
   103bc:	00025920 	.word	0x00025920
   103c0:	00029ac7 	.word	0x00029ac7

000103c4 <net_key_get>:
{
   103c4:	b530      	push	{r4, r5, lr}
   103c6:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg,
   103c8:	ab02      	add	r3, sp, #8
   103ca:	f44f 2210 	mov.w	r2, #589824	; 0x90000
{
   103ce:	4604      	mov	r4, r0
   103d0:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   103d2:	a805      	add	r0, sp, #20
   103d4:	f248 0143 	movw	r1, #32835	; 0x8043
	NET_BUF_SIMPLE_DEFINE(msg,
   103d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   103dc:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   103de:	f013 fb26 	bl	23a2e <bt_mesh_model_msg_init>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   103e2:	4b17      	ldr	r3, [pc, #92]	; (10440 <net_key_get+0x7c>)
   103e4:	f8b3 2294 	ldrh.w	r2, [r3, #660]	; 0x294
   103e8:	f8b3 11b0 	ldrh.w	r1, [r3, #432]	; 0x1b0
   103ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   103f0:	429a      	cmp	r2, r3
   103f2:	d01c      	beq.n	1042e <net_key_get+0x6a>
		if (prev == BT_MESH_KEY_UNUSED) {
   103f4:	4299      	cmp	r1, r3
   103f6:	d01d      	beq.n	10434 <net_key_get+0x70>
		key_idx_pack(&msg, prev, sub->net_idx);
   103f8:	a805      	add	r0, sp, #20
   103fa:	f013 fb92 	bl	23b22 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   103fe:	2300      	movs	r3, #0
   10400:	9300      	str	r3, [sp, #0]
   10402:	aa05      	add	r2, sp, #20
   10404:	4629      	mov	r1, r5
   10406:	4620      	mov	r0, r4
   10408:	f013 fb3a 	bl	23a80 <bt_mesh_model_send>
   1040c:	b168      	cbz	r0, 1042a <net_key_get+0x66>
		BT_ERR("Unable to send NetKey List");
   1040e:	2301      	movs	r3, #1
   10410:	f04f 0100 	mov.w	r1, #0
   10414:	f363 0107 	bfi	r1, r3, #0, #8
   10418:	4a0a      	ldr	r2, [pc, #40]	; (10444 <net_key_get+0x80>)
   1041a:	4b0b      	ldr	r3, [pc, #44]	; (10448 <net_key_get+0x84>)
   1041c:	480b      	ldr	r0, [pc, #44]	; (1044c <net_key_get+0x88>)
   1041e:	1a9b      	subs	r3, r3, r2
   10420:	08db      	lsrs	r3, r3, #3
   10422:	f363 118f 	bfi	r1, r3, #6, #10
   10426:	f010 fbed 	bl	20c04 <log_0>
}
   1042a:	b009      	add	sp, #36	; 0x24
   1042c:	bd30      	pop	{r4, r5, pc}
	if (prev != BT_MESH_KEY_UNUSED) {
   1042e:	4291      	cmp	r1, r2
   10430:	d0e5      	beq.n	103fe <net_key_get+0x3a>
   10432:	460a      	mov	r2, r1
		net_buf_simple_add_le16(&msg, prev);
   10434:	4611      	mov	r1, r2
   10436:	a805      	add	r0, sp, #20
   10438:	f014 fc5f 	bl	24cfa <net_buf_simple_add_le16>
   1043c:	e7df      	b.n	103fe <net_key_get+0x3a>
   1043e:	bf00      	nop
   10440:	20007060 	.word	0x20007060
   10444:	00025880 	.word	0x00025880
   10448:	00025920 	.word	0x00025920
   1044c:	00029944 	.word	0x00029944

00010450 <send_net_key_status>:
{
   10450:	b5f0      	push	{r4, r5, r6, r7, lr}
   10452:	b089      	sub	sp, #36	; 0x24
   10454:	460d      	mov	r5, r1
   10456:	461f      	mov	r7, r3
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4);
   10458:	a902      	add	r1, sp, #8
   1045a:	f44f 2310 	mov.w	r3, #589824	; 0x90000
   1045e:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   10462:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4);
   10464:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   10466:	a805      	add	r0, sp, #20
   10468:	f248 0144 	movw	r1, #32836	; 0x8044
{
   1046c:	4616      	mov	r6, r2
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1046e:	f013 fade 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   10472:	4639      	mov	r1, r7
   10474:	a805      	add	r0, sp, #20
   10476:	f014 fc38 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   1047a:	4631      	mov	r1, r6
   1047c:	a805      	add	r0, sp, #20
   1047e:	f014 fc3c 	bl	24cfa <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   10482:	2300      	movs	r3, #0
   10484:	9300      	str	r3, [sp, #0]
   10486:	aa05      	add	r2, sp, #20
   10488:	4629      	mov	r1, r5
   1048a:	4620      	mov	r0, r4
   1048c:	f013 faf8 	bl	23a80 <bt_mesh_model_send>
   10490:	b168      	cbz	r0, 104ae <send_net_key_status+0x5e>
		BT_ERR("Unable to send NetKey Status");
   10492:	2301      	movs	r3, #1
   10494:	f04f 0100 	mov.w	r1, #0
   10498:	f363 0107 	bfi	r1, r3, #0, #8
   1049c:	4a05      	ldr	r2, [pc, #20]	; (104b4 <send_net_key_status+0x64>)
   1049e:	4b06      	ldr	r3, [pc, #24]	; (104b8 <send_net_key_status+0x68>)
   104a0:	4806      	ldr	r0, [pc, #24]	; (104bc <send_net_key_status+0x6c>)
   104a2:	1a9b      	subs	r3, r3, r2
   104a4:	08db      	lsrs	r3, r3, #3
   104a6:	f363 118f 	bfi	r1, r3, #6, #10
   104aa:	f010 fbab 	bl	20c04 <log_0>
}
   104ae:	b009      	add	sp, #36	; 0x24
   104b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104b2:	bf00      	nop
   104b4:	00025880 	.word	0x00025880
   104b8:	00025920 	.word	0x00025920
   104bc:	00029b7e 	.word	0x00029b7e

000104c0 <net_key_update>:
{
   104c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104c4:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   104c6:	4610      	mov	r0, r2
{
   104c8:	460f      	mov	r7, r1
   104ca:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
   104cc:	f014 fc83 	bl	24dd6 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   104d0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   104d4:	4605      	mov	r5, r0
	if (idx > 0xfff) {
   104d6:	d310      	bcc.n	104fa <net_key_update+0x3a>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   104d8:	2301      	movs	r3, #1
   104da:	f04f 0200 	mov.w	r2, #0
   104de:	f363 0207 	bfi	r2, r3, #0, #8
   104e2:	4927      	ldr	r1, [pc, #156]	; (10580 <net_key_update+0xc0>)
   104e4:	4b27      	ldr	r3, [pc, #156]	; (10584 <net_key_update+0xc4>)
   104e6:	1a5b      	subs	r3, r3, r1
   104e8:	08db      	lsrs	r3, r3, #3
   104ea:	4601      	mov	r1, r0
   104ec:	f363 128f 	bfi	r2, r3, #6, #10
   104f0:	4825      	ldr	r0, [pc, #148]	; (10588 <net_key_update+0xc8>)
}
   104f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   104f6:	f010 bb92 	b.w	20c1e <log_1>
	sub = bt_mesh_subnet_get(idx);
   104fa:	f7fb fb51 	bl	bba0 <bt_mesh_subnet_get>
	if (!sub) {
   104fe:	4604      	mov	r4, r0
   10500:	b938      	cbnz	r0, 10512 <net_key_update+0x52>
		send_net_key_status(model, ctx, idx, STATUS_INVALID_NETKEY);
   10502:	2304      	movs	r3, #4
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   10504:	462a      	mov	r2, r5
   10506:	4639      	mov	r1, r7
   10508:	4630      	mov	r0, r6
}
   1050a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   1050e:	f7ff bf9f 	b.w	10450 <send_net_key_status>
	switch (sub->kr_phase) {
   10512:	7fc3      	ldrb	r3, [r0, #31]
   10514:	2b03      	cmp	r3, #3
   10516:	d819      	bhi.n	1054c <net_key_update+0x8c>
   10518:	e8df f003 	tbb	[pc, r3]
   1051c:	16160c02 	.word	0x16160c02
		if (!memcmp(buf->data, sub->keys[0].net, 16)) {
   10520:	f100 0130 	add.w	r1, r0, #48	; 0x30
   10524:	2210      	movs	r2, #16
   10526:	f8d8 0000 	ldr.w	r0, [r8]
   1052a:	f011 fc85 	bl	21e38 <memcmp>
   1052e:	b968      	cbnz	r0, 1054c <net_key_update+0x8c>
}
   10530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(buf->data, sub->keys[1].net, 16)) {
   10534:	f100 0189 	add.w	r1, r0, #137	; 0x89
   10538:	2210      	movs	r2, #16
   1053a:	f8d8 0000 	ldr.w	r0, [r8]
   1053e:	f011 fc7b 	bl	21e38 <memcmp>
   10542:	4603      	mov	r3, r0
   10544:	2800      	cmp	r0, #0
   10546:	d0dd      	beq.n	10504 <net_key_update+0x44>
		send_net_key_status(model, ctx, idx, STATUS_CANNOT_UPDATE);
   10548:	230b      	movs	r3, #11
   1054a:	e7db      	b.n	10504 <net_key_update+0x44>
	err = bt_mesh_net_keys_create(&sub->keys[1], buf->data);
   1054c:	f8d8 1000 	ldr.w	r1, [r8]
   10550:	f104 0089 	add.w	r0, r4, #137	; 0x89
   10554:	f7fb fb42 	bl	bbdc <bt_mesh_net_keys_create>
	if (!err && (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) ||
   10558:	b108      	cbz	r0, 1055e <net_key_update+0x9e>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
   1055a:	2310      	movs	r3, #16
   1055c:	e7d2      	b.n	10504 <net_key_update+0x44>
		err = friend_cred_update(sub);
   1055e:	4620      	mov	r0, r4
   10560:	f7fb fcea 	bl	bf38 <friend_cred_update>
	if (err) {
   10564:	4680      	mov	r8, r0
   10566:	2800      	cmp	r0, #0
   10568:	d1f7      	bne.n	1055a <net_key_update+0x9a>
	sub->kr_phase = BT_MESH_KR_PHASE_1;
   1056a:	2301      	movs	r3, #1
   1056c:	77e3      	strb	r3, [r4, #31]
		bt_mesh_store_subnet(sub);
   1056e:	4620      	mov	r0, r4
   10570:	f004 f85a 	bl	14628 <bt_mesh_store_subnet>
	bt_mesh_net_beacon_update(sub);
   10574:	4620      	mov	r0, r4
   10576:	f7fb fe13 	bl	c1a0 <bt_mesh_net_beacon_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   1057a:	4643      	mov	r3, r8
   1057c:	e7c2      	b.n	10504 <net_key_update+0x44>
   1057e:	bf00      	nop
   10580:	00025880 	.word	0x00025880
   10584:	00025920 	.word	0x00025920
   10588:	000299de 	.word	0x000299de

0001058c <net_key_add>:
{
   1058c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10590:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   10592:	4610      	mov	r0, r2
{
   10594:	460f      	mov	r7, r1
   10596:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
   10598:	f014 fc1d 	bl	24dd6 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1059c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   105a0:	4605      	mov	r5, r0
	if (idx > 0xfff) {
   105a2:	d310      	bcc.n	105c6 <net_key_add+0x3a>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   105a4:	2301      	movs	r3, #1
   105a6:	f04f 0200 	mov.w	r2, #0
   105aa:	f363 0207 	bfi	r2, r3, #0, #8
   105ae:	4928      	ldr	r1, [pc, #160]	; (10650 <net_key_add+0xc4>)
   105b0:	4b28      	ldr	r3, [pc, #160]	; (10654 <net_key_add+0xc8>)
   105b2:	1a5b      	subs	r3, r3, r1
   105b4:	08db      	lsrs	r3, r3, #3
   105b6:	4601      	mov	r1, r0
   105b8:	f363 128f 	bfi	r2, r3, #6, #10
   105bc:	4826      	ldr	r0, [pc, #152]	; (10658 <net_key_add+0xcc>)
}
   105be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   105c2:	f010 bb2c 	b.w	20c1e <log_1>
	sub = bt_mesh_subnet_get(idx);
   105c6:	f7fb faeb 	bl	bba0 <bt_mesh_subnet_get>
	if (!sub) {
   105ca:	4604      	mov	r4, r0
   105cc:	b980      	cbnz	r0, 105f0 <net_key_add+0x64>
			if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
   105ce:	4b23      	ldr	r3, [pc, #140]	; (1065c <net_key_add+0xd0>)
   105d0:	f8b3 11b0 	ldrh.w	r1, [r3, #432]	; 0x1b0
   105d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   105d8:	4291      	cmp	r1, r2
   105da:	d004      	beq.n	105e6 <net_key_add+0x5a>
   105dc:	f8b3 1294 	ldrh.w	r1, [r3, #660]	; 0x294
   105e0:	4291      	cmp	r1, r2
   105e2:	d115      	bne.n	10610 <net_key_add+0x84>
		for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   105e4:	2401      	movs	r4, #1
				sub = &bt_mesh.sub[i];
   105e6:	22e4      	movs	r2, #228	; 0xe4
   105e8:	fb02 3404 	mla	r4, r2, r4, r3
   105ec:	f504 74ca 	add.w	r4, r4, #404	; 0x194
	if (sub->net_idx == idx) {
   105f0:	8ba2      	ldrh	r2, [r4, #28]
   105f2:	f8d8 0000 	ldr.w	r0, [r8]
   105f6:	42aa      	cmp	r2, r5
   105f8:	f104 0330 	add.w	r3, r4, #48	; 0x30
   105fc:	d110      	bne.n	10620 <net_key_add+0x94>
		if (memcmp(buf->data, sub->keys[0].net, 16)) {
   105fe:	4619      	mov	r1, r3
   10600:	2210      	movs	r2, #16
   10602:	f011 fc19 	bl	21e38 <memcmp>
			status = STATUS_SUCCESS;
   10606:	2800      	cmp	r0, #0
		send_net_key_status(model, ctx, idx, status);
   10608:	bf14      	ite	ne
   1060a:	2306      	movne	r3, #6
   1060c:	2300      	moveq	r3, #0
   1060e:	e000      	b.n	10612 <net_key_add+0x86>
			send_net_key_status(model, ctx, idx,
   10610:	2305      	movs	r3, #5
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   10612:	462a      	mov	r2, r5
   10614:	4639      	mov	r1, r7
   10616:	4630      	mov	r0, r6
}
   10618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   1061c:	f7ff bf18 	b.w	10450 <send_net_key_status>
	err = bt_mesh_net_keys_create(&sub->keys[0], buf->data);
   10620:	4601      	mov	r1, r0
   10622:	4618      	mov	r0, r3
   10624:	f7fb fada 	bl	bbdc <bt_mesh_net_keys_create>
	if (err) {
   10628:	4680      	mov	r8, r0
   1062a:	b108      	cbz	r0, 10630 <net_key_add+0xa4>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
   1062c:	2310      	movs	r3, #16
   1062e:	e7f0      	b.n	10612 <net_key_add+0x86>
		bt_mesh_store_subnet(sub);
   10630:	4620      	mov	r0, r4
	sub->net_idx = idx;
   10632:	83a5      	strh	r5, [r4, #28]
		bt_mesh_store_subnet(sub);
   10634:	f003 fff8 	bl	14628 <bt_mesh_store_subnet>
	bt_mesh_net_beacon_update(sub);
   10638:	4620      	mov	r0, r4
   1063a:	f7fb fdb1 	bl	c1a0 <bt_mesh_net_beacon_update>
		bt_mesh_proxy_beacon_send(sub);
   1063e:	4620      	mov	r0, r4
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   10640:	f884 8020 	strb.w	r8, [r4, #32]
		bt_mesh_proxy_beacon_send(sub);
   10644:	f007 fc76 	bl	17f34 <bt_mesh_proxy_beacon_send>
		bt_mesh_adv_update();
   10648:	f7fa fde2 	bl	b210 <bt_mesh_adv_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   1064c:	4643      	mov	r3, r8
   1064e:	e7e0      	b.n	10612 <net_key_add+0x86>
   10650:	00025880 	.word	0x00025880
   10654:	00025920 	.word	0x00025920
   10658:	000299de 	.word	0x000299de
   1065c:	20007060 	.word	0x20007060

00010660 <send_mod_pub_status.isra.9>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   10660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10664:	b08a      	sub	sp, #40	; 0x28
   10666:	460f      	mov	r7, r1
   10668:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
   1066c:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   10670:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 14 + 4);
   10672:	a905      	add	r1, sp, #20
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   10674:	4699      	mov	r9, r3
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 14 + 4);
   10676:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   1067a:	e9cd 3103 	strd	r3, r1, [sp, #12]
   1067e:	9102      	str	r1, [sp, #8]
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   10680:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   10682:	f248 0119 	movw	r1, #32793	; 0x8019
   10686:	a802      	add	r0, sp, #8
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   10688:	4692      	mov	sl, r2
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   1068a:	f013 f9d0 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1068e:	4629      	mov	r1, r5
   10690:	a802      	add	r0, sp, #8
   10692:	f014 fb2a 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   10696:	4651      	mov	r1, sl
   10698:	a802      	add	r0, sp, #8
   1069a:	f014 fb2e 	bl	24cfa <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   1069e:	b35d      	cbz	r5, 106f8 <send_mod_pub_status.isra.9+0x98>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   106a0:	2107      	movs	r1, #7
   106a2:	a802      	add	r0, sp, #8
   106a4:	f014 fb12 	bl	24ccc <net_buf_simple_add>
   106a8:	2207      	movs	r2, #7
   106aa:	2100      	movs	r1, #0
   106ac:	f011 fc15 	bl	21eda <memset>
	if (vnd) {
   106b0:	f1b8 0f00 	cmp.w	r8, #0
   106b4:	d03e      	beq.n	10734 <send_mod_pub_status.isra.9+0xd4>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   106b6:	2104      	movs	r1, #4
   106b8:	a802      	add	r0, sp, #8
   106ba:	f014 fb07 	bl	24ccc <net_buf_simple_add>
   106be:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   106c0:	9915      	ldr	r1, [sp, #84]	; 0x54
   106c2:	f011 fbe0 	bl	21e86 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   106c6:	2300      	movs	r3, #0
   106c8:	9300      	str	r3, [sp, #0]
   106ca:	aa02      	add	r2, sp, #8
   106cc:	4639      	mov	r1, r7
   106ce:	4630      	mov	r0, r6
   106d0:	f013 f9d6 	bl	23a80 <bt_mesh_model_send>
   106d4:	b168      	cbz	r0, 106f2 <send_mod_pub_status.isra.9+0x92>
		BT_ERR("Unable to send Model Publication Status");
   106d6:	2301      	movs	r3, #1
   106d8:	f04f 0100 	mov.w	r1, #0
   106dc:	f363 0107 	bfi	r1, r3, #0, #8
   106e0:	4a17      	ldr	r2, [pc, #92]	; (10740 <send_mod_pub_status.isra.9+0xe0>)
   106e2:	4b18      	ldr	r3, [pc, #96]	; (10744 <send_mod_pub_status.isra.9+0xe4>)
   106e4:	4818      	ldr	r0, [pc, #96]	; (10748 <send_mod_pub_status.isra.9+0xe8>)
   106e6:	1a9b      	subs	r3, r3, r2
   106e8:	08db      	lsrs	r3, r3, #3
   106ea:	f363 118f 	bfi	r1, r3, #6, #10
   106ee:	f010 fa89 	bl	20c04 <log_0>
}
   106f2:	b00a      	add	sp, #40	; 0x28
   106f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   106f8:	4649      	mov	r1, r9
   106fa:	a802      	add	r0, sp, #8
   106fc:	f014 fafd 	bl	24cfa <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (u16_t)mod->pub->cred << 12;
   10700:	6822      	ldr	r2, [r4, #0]
   10702:	7ad3      	ldrb	r3, [r2, #11]
   10704:	88d1      	ldrh	r1, [r2, #6]
   10706:	f3c3 1300 	ubfx	r3, r3, #4, #1
		net_buf_simple_add_le16(&msg, idx_cred);
   1070a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
   1070e:	a802      	add	r0, sp, #8
   10710:	f014 faf3 	bl	24cfa <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   10714:	6823      	ldr	r3, [r4, #0]
   10716:	a802      	add	r0, sp, #8
   10718:	7a19      	ldrb	r1, [r3, #8]
   1071a:	f014 fae6 	bl	24cea <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   1071e:	6823      	ldr	r3, [r4, #0]
   10720:	a802      	add	r0, sp, #8
   10722:	7a99      	ldrb	r1, [r3, #10]
   10724:	f014 fae1 	bl	24cea <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   10728:	6823      	ldr	r3, [r4, #0]
   1072a:	a802      	add	r0, sp, #8
   1072c:	7a59      	ldrb	r1, [r3, #9]
   1072e:	f014 fadc 	bl	24cea <net_buf_simple_add_u8>
   10732:	e7bd      	b.n	106b0 <send_mod_pub_status.isra.9+0x50>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   10734:	2102      	movs	r1, #2
   10736:	a802      	add	r0, sp, #8
   10738:	f014 fac8 	bl	24ccc <net_buf_simple_add>
   1073c:	2202      	movs	r2, #2
   1073e:	e7bf      	b.n	106c0 <send_mod_pub_status.isra.9+0x60>
   10740:	00025880 	.word	0x00025880
   10744:	00025920 	.word	0x00025920
   10748:	00029b2d 	.word	0x00029b2d

0001074c <mod_app_get>:
{
   1074c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10750:	4614      	mov	r4, r2
   10752:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + KEY_LIST_LEN + 4);
   10754:	ab07      	add	r3, sp, #28
   10756:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   1075a:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1075c:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + KEY_LIST_LEN + 4);
   1075e:	9304      	str	r3, [sp, #16]
   10760:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   10764:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   10766:	f014 fb36 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1076a:	b203      	sxth	r3, r0
   1076c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1076e:	4681      	mov	r9, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10770:	dc10      	bgt.n	10794 <mod_app_get+0x48>
		BT_WARN("Prohibited element address");
   10772:	2302      	movs	r3, #2
   10774:	f04f 0100 	mov.w	r1, #0
   10778:	f363 0107 	bfi	r1, r3, #0, #8
   1077c:	4a30      	ldr	r2, [pc, #192]	; (10840 <mod_app_get+0xf4>)
   1077e:	4b31      	ldr	r3, [pc, #196]	; (10844 <mod_app_get+0xf8>)
   10780:	4831      	ldr	r0, [pc, #196]	; (10848 <mod_app_get+0xfc>)
   10782:	1a9b      	subs	r3, r3, r2
   10784:	08db      	lsrs	r3, r3, #3
   10786:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Model Application List message");
   1078a:	f010 fa3b 	bl	20c04 <log_0>
}
   1078e:	b00d      	add	sp, #52	; 0x34
   10790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_id = buf->data;
   10794:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10798:	f7fe fe9e 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   1079c:	4605      	mov	r5, r0
   1079e:	2800      	cmp	r0, #0
   107a0:	d136      	bne.n	10810 <mod_app_get+0xc4>
		vnd = (buf->len == 4);
   107a2:	88a3      	ldrh	r3, [r4, #4]
   107a4:	1f1a      	subs	r2, r3, #4
   107a6:	4253      	negs	r3, r2
   107a8:	4153      	adcs	r3, r2
   107aa:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   107ae:	2401      	movs	r4, #1
	if (vnd) {
   107b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   107b4:	2b00      	cmp	r3, #0
   107b6:	d035      	beq.n	10824 <mod_app_get+0xd8>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   107b8:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   107bc:	a804      	add	r0, sp, #16
   107be:	f013 f936 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   107c2:	4621      	mov	r1, r4
   107c4:	a804      	add	r0, sp, #16
   107c6:	f014 fa90 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   107ca:	4649      	mov	r1, r9
   107cc:	a804      	add	r0, sp, #16
   107ce:	f014 fa94 	bl	24cfa <net_buf_simple_add_le16>
	if (vnd) {
   107d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   107d6:	b343      	cbz	r3, 1082a <mod_app_get+0xde>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   107d8:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   107da:	4641      	mov	r1, r8
   107dc:	a804      	add	r0, sp, #16
   107de:	f014 fa7b 	bl	24cd8 <net_buf_simple_add_mem>
	if (mod) {
   107e2:	bb25      	cbnz	r5, 1082e <mod_app_get+0xe2>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   107e4:	2300      	movs	r3, #0
   107e6:	9300      	str	r3, [sp, #0]
   107e8:	aa04      	add	r2, sp, #16
   107ea:	4639      	mov	r1, r7
   107ec:	4630      	mov	r0, r6
   107ee:	f013 f947 	bl	23a80 <bt_mesh_model_send>
   107f2:	2800      	cmp	r0, #0
   107f4:	d0cb      	beq.n	1078e <mod_app_get+0x42>
		BT_ERR("Unable to send Model Application List message");
   107f6:	2301      	movs	r3, #1
   107f8:	f04f 0100 	mov.w	r1, #0
   107fc:	f363 0107 	bfi	r1, r3, #0, #8
   10800:	4a0f      	ldr	r2, [pc, #60]	; (10840 <mod_app_get+0xf4>)
   10802:	4b10      	ldr	r3, [pc, #64]	; (10844 <mod_app_get+0xf8>)
   10804:	4811      	ldr	r0, [pc, #68]	; (1084c <mod_app_get+0x100>)
   10806:	1a9b      	subs	r3, r3, r2
   10808:	08db      	lsrs	r3, r3, #3
   1080a:	f363 118f 	bfi	r1, r3, #6, #10
   1080e:	e7bc      	b.n	1078a <mod_app_get+0x3e>
	mod = get_model(elem, buf, &vnd);
   10810:	4621      	mov	r1, r4
   10812:	f10d 020f 	add.w	r2, sp, #15
   10816:	f013 f9f5 	bl	23c04 <get_model>
		status = STATUS_INVALID_MODEL;
   1081a:	1e05      	subs	r5, r0, #0
   1081c:	bf14      	ite	ne
   1081e:	2400      	movne	r4, #0
   10820:	2402      	moveq	r4, #2
   10822:	e7c5      	b.n	107b0 <mod_app_get+0x64>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   10824:	f248 014c 	movw	r1, #32844	; 0x804c
   10828:	e7c8      	b.n	107bc <mod_app_get+0x70>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   1082a:	2202      	movs	r2, #2
   1082c:	e7d5      	b.n	107da <mod_app_get+0x8e>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   1082e:	89a9      	ldrh	r1, [r5, #12]
   10830:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10834:	4299      	cmp	r1, r3
   10836:	d0d5      	beq.n	107e4 <mod_app_get+0x98>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   10838:	a804      	add	r0, sp, #16
   1083a:	f014 fa5e 	bl	24cfa <net_buf_simple_add_le16>
   1083e:	e7d1      	b.n	107e4 <mod_app_get+0x98>
   10840:	00025880 	.word	0x00025880
   10844:	00025920 	.word	0x00025920
   10848:	000298bf 	.word	0x000298bf
   1084c:	00029848 	.word	0x00029848

00010850 <mod_app_unbind>:
{
   10850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10854:	4614      	mov	r4, r2
   10856:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   10858:	ab06      	add	r3, sp, #24
   1085a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1085e:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   10860:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   10862:	9303      	str	r3, [sp, #12]
   10864:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   10868:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   1086a:	f014 fab4 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1086e:	b203      	sxth	r3, r0
   10870:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10872:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10874:	dc10      	bgt.n	10898 <mod_app_unbind+0x48>
		BT_WARN("Prohibited element address");
   10876:	2302      	movs	r3, #2
   10878:	f04f 0100 	mov.w	r1, #0
   1087c:	f363 0107 	bfi	r1, r3, #0, #8
   10880:	4a28      	ldr	r2, [pc, #160]	; (10924 <mod_app_unbind+0xd4>)
   10882:	4b29      	ldr	r3, [pc, #164]	; (10928 <mod_app_unbind+0xd8>)
   10884:	4829      	ldr	r0, [pc, #164]	; (1092c <mod_app_unbind+0xdc>)
   10886:	1a9b      	subs	r3, r3, r2
   10888:	08db      	lsrs	r3, r3, #3
   1088a:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Model App Unbind Status response");
   1088e:	f010 f9b9 	bl	20c04 <log_0>
}
   10892:	b00b      	add	sp, #44	; 0x2c
   10894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   10898:	4620      	mov	r0, r4
   1089a:	f014 fa9c 	bl	24dd6 <net_buf_simple_pull_le16>
   1089e:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   108a0:	4628      	mov	r0, r5
	mod_id = buf->data;
   108a2:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   108a6:	f7fe fe17 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   108aa:	bb28      	cbnz	r0, 108f8 <mod_app_unbind+0xa8>
		vnd = (buf->len == 4);
   108ac:	88a3      	ldrh	r3, [r4, #4]
   108ae:	1f1a      	subs	r2, r3, #4
   108b0:	4253      	negs	r3, r2
   108b2:	4153      	adcs	r3, r2
   108b4:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   108b8:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   108ba:	e9cd 0900 	strd	r0, r9, [sp]
   108be:	4633      	mov	r3, r6
   108c0:	462a      	mov	r2, r5
   108c2:	f89d 100b 	ldrb.w	r1, [sp, #11]
   108c6:	a803      	add	r0, sp, #12
   108c8:	f013 f972 	bl	23bb0 <create_mod_app_status.isra.7>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   108cc:	2300      	movs	r3, #0
   108ce:	9300      	str	r3, [sp, #0]
   108d0:	aa03      	add	r2, sp, #12
   108d2:	4641      	mov	r1, r8
   108d4:	4638      	mov	r0, r7
   108d6:	f013 f8d3 	bl	23a80 <bt_mesh_model_send>
   108da:	2800      	cmp	r0, #0
   108dc:	d0d9      	beq.n	10892 <mod_app_unbind+0x42>
		BT_ERR("Unable to send Model App Unbind Status response");
   108de:	2301      	movs	r3, #1
   108e0:	f04f 0100 	mov.w	r1, #0
   108e4:	f363 0107 	bfi	r1, r3, #0, #8
   108e8:	4a0e      	ldr	r2, [pc, #56]	; (10924 <mod_app_unbind+0xd4>)
   108ea:	4b0f      	ldr	r3, [pc, #60]	; (10928 <mod_app_unbind+0xd8>)
   108ec:	4810      	ldr	r0, [pc, #64]	; (10930 <mod_app_unbind+0xe0>)
   108ee:	1a9b      	subs	r3, r3, r2
   108f0:	08db      	lsrs	r3, r3, #3
   108f2:	f363 118f 	bfi	r1, r3, #6, #10
   108f6:	e7ca      	b.n	1088e <mod_app_unbind+0x3e>
	mod = get_model(elem, buf, &vnd);
   108f8:	4621      	mov	r1, r4
   108fa:	f10d 020b 	add.w	r2, sp, #11
   108fe:	f013 f981 	bl	23c04 <get_model>
	if (!mod) {
   10902:	4604      	mov	r4, r0
   10904:	b148      	cbz	r0, 1091a <mod_app_unbind+0xca>
	if (!app_key_is_valid(key_idx)) {
   10906:	4630      	mov	r0, r6
   10908:	f7ff f870 	bl	f9ec <app_key_is_valid>
   1090c:	b138      	cbz	r0, 1091e <mod_app_unbind+0xce>
   1090e:	2201      	movs	r2, #1
   10910:	4631      	mov	r1, r6
   10912:	4620      	mov	r0, r4
   10914:	f013 f92b 	bl	23b6e <mod_unbind.part.1>
   10918:	e7cf      	b.n	108ba <mod_app_unbind+0x6a>
		status = STATUS_INVALID_MODEL;
   1091a:	2002      	movs	r0, #2
   1091c:	e7cd      	b.n	108ba <mod_app_unbind+0x6a>
		return STATUS_INVALID_APPKEY;
   1091e:	2003      	movs	r0, #3
   10920:	e7cb      	b.n	108ba <mod_app_unbind+0x6a>
   10922:	bf00      	nop
   10924:	00025880 	.word	0x00025880
   10928:	00025920 	.word	0x00025920
   1092c:	000298bf 	.word	0x000298bf
   10930:	00029876 	.word	0x00029876

00010934 <mod_app_bind>:
{
   10934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10938:	4614      	mov	r4, r2
   1093a:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   1093c:	ab06      	add	r3, sp, #24
   1093e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   10942:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   10944:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   10946:	9303      	str	r3, [sp, #12]
   10948:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1094c:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   1094e:	f014 fa42 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10952:	b203      	sxth	r3, r0
   10954:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10956:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10958:	dc10      	bgt.n	1097c <mod_app_bind+0x48>
		BT_WARN("Prohibited element address");
   1095a:	2302      	movs	r3, #2
   1095c:	f04f 0100 	mov.w	r1, #0
   10960:	f363 0107 	bfi	r1, r3, #0, #8
   10964:	4a35      	ldr	r2, [pc, #212]	; (10a3c <mod_app_bind+0x108>)
   10966:	4b36      	ldr	r3, [pc, #216]	; (10a40 <mod_app_bind+0x10c>)
   10968:	4836      	ldr	r0, [pc, #216]	; (10a44 <mod_app_bind+0x110>)
   1096a:	1a9b      	subs	r3, r3, r2
   1096c:	08db      	lsrs	r3, r3, #3
   1096e:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to send Model App Bind Status response");
   10972:	f010 f947 	bl	20c04 <log_0>
}
   10976:	b00b      	add	sp, #44	; 0x2c
   10978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   1097c:	4620      	mov	r0, r4
   1097e:	f014 fa2a 	bl	24dd6 <net_buf_simple_pull_le16>
   10982:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   10984:	4630      	mov	r0, r6
	mod_id = buf->data;
   10986:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1098a:	f7fe fda5 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   1098e:	bb28      	cbnz	r0, 109dc <mod_app_bind+0xa8>
		vnd = (buf->len == 4);
   10990:	88a3      	ldrh	r3, [r4, #4]
   10992:	1f1a      	subs	r2, r3, #4
   10994:	4253      	negs	r3, r2
   10996:	4153      	adcs	r3, r2
   10998:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   1099c:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1099e:	e9cd 3900 	strd	r3, r9, [sp]
   109a2:	4632      	mov	r2, r6
   109a4:	462b      	mov	r3, r5
   109a6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   109aa:	a803      	add	r0, sp, #12
   109ac:	f013 f900 	bl	23bb0 <create_mod_app_status.isra.7>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   109b0:	2300      	movs	r3, #0
   109b2:	9300      	str	r3, [sp, #0]
   109b4:	aa03      	add	r2, sp, #12
   109b6:	4641      	mov	r1, r8
   109b8:	4638      	mov	r0, r7
   109ba:	f013 f861 	bl	23a80 <bt_mesh_model_send>
   109be:	2800      	cmp	r0, #0
   109c0:	d0d9      	beq.n	10976 <mod_app_bind+0x42>
		BT_ERR("Unable to send Model App Bind Status response");
   109c2:	2301      	movs	r3, #1
   109c4:	f04f 0100 	mov.w	r1, #0
   109c8:	f363 0107 	bfi	r1, r3, #0, #8
   109cc:	4a1b      	ldr	r2, [pc, #108]	; (10a3c <mod_app_bind+0x108>)
   109ce:	4b1c      	ldr	r3, [pc, #112]	; (10a40 <mod_app_bind+0x10c>)
   109d0:	481d      	ldr	r0, [pc, #116]	; (10a48 <mod_app_bind+0x114>)
   109d2:	1a9b      	subs	r3, r3, r2
   109d4:	08db      	lsrs	r3, r3, #3
   109d6:	f363 118f 	bfi	r1, r3, #6, #10
   109da:	e7ca      	b.n	10972 <mod_app_bind+0x3e>
	mod = get_model(elem, buf, &vnd);
   109dc:	4621      	mov	r1, r4
   109de:	f10d 020b 	add.w	r2, sp, #11
   109e2:	f013 f90f 	bl	23c04 <get_model>
	if (!mod) {
   109e6:	4604      	mov	r4, r0
   109e8:	b310      	cbz	r0, 10a30 <mod_app_bind+0xfc>
	if (model == mod) {
   109ea:	42b8      	cmp	r0, r7
   109ec:	d10f      	bne.n	10a0e <mod_app_bind+0xda>
		BT_ERR("Client tried to bind AppKey to Configuration Model");
   109ee:	2301      	movs	r3, #1
   109f0:	f04f 0100 	mov.w	r1, #0
   109f4:	f363 0107 	bfi	r1, r3, #0, #8
   109f8:	4a10      	ldr	r2, [pc, #64]	; (10a3c <mod_app_bind+0x108>)
   109fa:	4b11      	ldr	r3, [pc, #68]	; (10a40 <mod_app_bind+0x10c>)
   109fc:	4813      	ldr	r0, [pc, #76]	; (10a4c <mod_app_bind+0x118>)
   109fe:	1a9b      	subs	r3, r3, r2
   10a00:	08db      	lsrs	r3, r3, #3
   10a02:	f363 118f 	bfi	r1, r3, #6, #10
   10a06:	f010 f8fd 	bl	20c04 <log_0>
		status = STATUS_CANNOT_BIND;
   10a0a:	230d      	movs	r3, #13
		goto send_status;
   10a0c:	e7c7      	b.n	1099e <mod_app_bind+0x6a>
	if (!app_key_is_valid(key_idx)) {
   10a0e:	4628      	mov	r0, r5
   10a10:	f7fe ffec 	bl	f9ec <app_key_is_valid>
   10a14:	b170      	cbz	r0, 10a34 <mod_app_bind+0x100>
		if (model->keys[i] == key_idx) {
   10a16:	89a3      	ldrh	r3, [r4, #12]
   10a18:	429d      	cmp	r5, r3
   10a1a:	d007      	beq.n	10a2c <mod_app_bind+0xf8>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   10a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10a20:	4293      	cmp	r3, r2
   10a22:	d109      	bne.n	10a38 <mod_app_bind+0x104>
			model->keys[i] = key_idx;
   10a24:	81a5      	strh	r5, [r4, #12]
				bt_mesh_store_mod_bind(model);
   10a26:	4620      	mov	r0, r4
   10a28:	f013 facb 	bl	23fc2 <bt_mesh_store_mod_bind>
			return STATUS_SUCCESS;
   10a2c:	2300      	movs	r3, #0
   10a2e:	e7b6      	b.n	1099e <mod_app_bind+0x6a>
		status = STATUS_INVALID_MODEL;
   10a30:	2302      	movs	r3, #2
   10a32:	e7b4      	b.n	1099e <mod_app_bind+0x6a>
		return STATUS_INVALID_APPKEY;
   10a34:	2303      	movs	r3, #3
   10a36:	e7b2      	b.n	1099e <mod_app_bind+0x6a>
	return STATUS_INSUFF_RESOURCES;
   10a38:	2305      	movs	r3, #5
   10a3a:	e7b0      	b.n	1099e <mod_app_bind+0x6a>
   10a3c:	00025880 	.word	0x00025880
   10a40:	00025920 	.word	0x00025920
   10a44:	000298bf 	.word	0x000298bf
   10a48:	0002981a 	.word	0x0002981a
   10a4c:	000297e7 	.word	0x000297e7

00010a50 <mod_pub_set>:
{
   10a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a54:	4681      	mov	r9, r0
   10a56:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   10a58:	4610      	mov	r0, r2
{
   10a5a:	468a      	mov	sl, r1
   10a5c:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10a5e:	f014 f9ba 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10a62:	b203      	sxth	r3, r0
   10a64:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10a66:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10a68:	dc10      	bgt.n	10a8c <mod_pub_set+0x3c>
		BT_WARN("Prohibited element address");
   10a6a:	2302      	movs	r3, #2
   10a6c:	f04f 0100 	mov.w	r1, #0
   10a70:	f363 0107 	bfi	r1, r3, #0, #8
   10a74:	4a34      	ldr	r2, [pc, #208]	; (10b48 <mod_pub_set+0xf8>)
   10a76:	4b35      	ldr	r3, [pc, #212]	; (10b4c <mod_pub_set+0xfc>)
   10a78:	4835      	ldr	r0, [pc, #212]	; (10b50 <mod_pub_set+0x100>)
   10a7a:	1a9b      	subs	r3, r3, r2
   10a7c:	08db      	lsrs	r3, r3, #3
   10a7e:	f363 118f 	bfi	r1, r3, #6, #10
   10a82:	f010 f8bf 	bl	20c04 <log_0>
}
   10a86:	b00b      	add	sp, #44	; 0x2c
   10a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
   10a8c:	4620      	mov	r0, r4
   10a8e:	f014 f9a2 	bl	24dd6 <net_buf_simple_pull_le16>
   10a92:	4607      	mov	r7, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   10a94:	4620      	mov	r0, r4
   10a96:	f014 f99e 	bl	24dd6 <net_buf_simple_pull_le16>
   10a9a:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   10a9c:	4620      	mov	r0, r4
   10a9e:	f014 f992 	bl	24dc6 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   10aa2:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
   10aa6:	b2d2      	uxtb	r2, r2
   10aa8:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   10aaa:	4683      	mov	fp, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   10aac:	d80f      	bhi.n	10ace <mod_pub_set+0x7e>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   10aae:	2101      	movs	r1, #1
   10ab0:	f04f 0200 	mov.w	r2, #0
   10ab4:	f361 0207 	bfi	r2, r1, #0, #8
   10ab8:	4823      	ldr	r0, [pc, #140]	; (10b48 <mod_pub_set+0xf8>)
   10aba:	4924      	ldr	r1, [pc, #144]	; (10b4c <mod_pub_set+0xfc>)
   10abc:	1a09      	subs	r1, r1, r0
   10abe:	08c9      	lsrs	r1, r1, #3
   10ac0:	f361 128f 	bfi	r2, r1, #6, #10
   10ac4:	4823      	ldr	r0, [pc, #140]	; (10b54 <mod_pub_set+0x104>)
   10ac6:	4659      	mov	r1, fp
   10ac8:	f010 f8a9 	bl	20c1e <log_1>
		return;
   10acc:	e7db      	b.n	10a86 <mod_pub_set+0x36>
	pub_period = net_buf_simple_pull_u8(buf);
   10ace:	4620      	mov	r0, r4
   10ad0:	f014 f979 	bl	24dc6 <net_buf_simple_pull_u8>
   10ad4:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   10ad6:	4620      	mov	r0, r4
   10ad8:	f014 f975 	bl	24dc6 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   10adc:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   10ade:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   10ae0:	4630      	mov	r0, r6
	mod_id = buf->data;
   10ae2:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   10ae4:	f7fe fcf8 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   10ae8:	4605      	mov	r5, r0
   10aea:	b9a8      	cbnz	r0, 10b18 <mod_pub_set+0xc8>
		vnd = (buf->len == 4);
   10aec:	88a3      	ldrh	r3, [r4, #4]
   10aee:	1f1a      	subs	r2, r3, #4
   10af0:	4253      	negs	r3, r2
   10af2:	4153      	adcs	r3, r2
   10af4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   10af8:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   10afa:	9b05      	ldr	r3, [sp, #20]
   10afc:	3508      	adds	r5, #8
   10afe:	e9cd 0302 	strd	r0, r3, [sp, #8]
   10b02:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   10b06:	9300      	str	r3, [sp, #0]
   10b08:	9501      	str	r5, [sp, #4]
   10b0a:	463b      	mov	r3, r7
   10b0c:	4632      	mov	r2, r6
   10b0e:	4651      	mov	r1, sl
   10b10:	4648      	mov	r0, r9
   10b12:	f7ff fda5 	bl	10660 <send_mod_pub_status.isra.9>
   10b16:	e7b6      	b.n	10a86 <mod_pub_set+0x36>
	mod = get_model(elem, buf, &vnd);
   10b18:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   10b1c:	4621      	mov	r1, r4
   10b1e:	f013 f871 	bl	23c04 <get_model>
	if (!mod) {
   10b22:	4605      	mov	r5, r0
   10b24:	b170      	cbz	r0, 10b44 <mod_pub_set+0xf4>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   10b26:	9b07      	ldr	r3, [sp, #28]
   10b28:	9302      	str	r3, [sp, #8]
   10b2a:	9b06      	ldr	r3, [sp, #24]
   10b2c:	2201      	movs	r2, #1
   10b2e:	9203      	str	r2, [sp, #12]
   10b30:	e9cd b300 	strd	fp, r3, [sp]
   10b34:	f3c8 020b 	ubfx	r2, r8, #0, #12
   10b38:	f3c8 3300 	ubfx	r3, r8, #12, #1
   10b3c:	4639      	mov	r1, r7
   10b3e:	f7fe ff73 	bl	fa28 <_mod_pub_set>
   10b42:	e7da      	b.n	10afa <mod_pub_set+0xaa>
		status = STATUS_INVALID_MODEL;
   10b44:	2002      	movs	r0, #2
   10b46:	e7d8      	b.n	10afa <mod_pub_set+0xaa>
   10b48:	00025880 	.word	0x00025880
   10b4c:	00025920 	.word	0x00025920
   10b50:	000298bf 	.word	0x000298bf
   10b54:	000298a6 	.word	0x000298a6

00010b58 <mod_pub_va_set>:
{
   10b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b5c:	4681      	mov	r9, r0
   10b5e:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   10b60:	4610      	mov	r0, r2
{
   10b62:	468a      	mov	sl, r1
   10b64:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10b66:	f014 f936 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10b6a:	b203      	sxth	r3, r0
   10b6c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10b6e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10b70:	dc10      	bgt.n	10b94 <mod_pub_va_set+0x3c>
		BT_WARN("Prohibited element address");
   10b72:	2302      	movs	r3, #2
   10b74:	f04f 0100 	mov.w	r1, #0
   10b78:	f363 0107 	bfi	r1, r3, #0, #8
   10b7c:	4a3c      	ldr	r2, [pc, #240]	; (10c70 <mod_pub_va_set+0x118>)
   10b7e:	4b3d      	ldr	r3, [pc, #244]	; (10c74 <mod_pub_va_set+0x11c>)
   10b80:	483d      	ldr	r0, [pc, #244]	; (10c78 <mod_pub_va_set+0x120>)
   10b82:	1a9b      	subs	r3, r3, r2
   10b84:	08db      	lsrs	r3, r3, #3
   10b86:	f363 118f 	bfi	r1, r3, #6, #10
   10b8a:	f010 f83b 	bl	20c04 <log_0>
}
   10b8e:	b00b      	add	sp, #44	; 0x2c
   10b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   10b94:	2110      	movs	r1, #16
   10b96:	4620      	mov	r0, r4
   10b98:	f014 f90d 	bl	24db6 <net_buf_simple_pull_mem>
   10b9c:	4683      	mov	fp, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   10b9e:	4620      	mov	r0, r4
   10ba0:	f014 f919 	bl	24dd6 <net_buf_simple_pull_le16>
   10ba4:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   10ba6:	4620      	mov	r0, r4
   10ba8:	f014 f90d 	bl	24dc6 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   10bac:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   10bb0:	b2db      	uxtb	r3, r3
   10bb2:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   10bb4:	4607      	mov	r7, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   10bb6:	d80f      	bhi.n	10bd8 <mod_pub_va_set+0x80>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   10bb8:	2301      	movs	r3, #1
   10bba:	f04f 0200 	mov.w	r2, #0
   10bbe:	f363 0207 	bfi	r2, r3, #0, #8
   10bc2:	492b      	ldr	r1, [pc, #172]	; (10c70 <mod_pub_va_set+0x118>)
   10bc4:	4b2b      	ldr	r3, [pc, #172]	; (10c74 <mod_pub_va_set+0x11c>)
   10bc6:	1a5b      	subs	r3, r3, r1
   10bc8:	08db      	lsrs	r3, r3, #3
   10bca:	4601      	mov	r1, r0
   10bcc:	f363 128f 	bfi	r2, r3, #6, #10
   10bd0:	482a      	ldr	r0, [pc, #168]	; (10c7c <mod_pub_va_set+0x124>)
   10bd2:	f010 f824 	bl	20c1e <log_1>
		return;
   10bd6:	e7da      	b.n	10b8e <mod_pub_va_set+0x36>
	pub_period = net_buf_simple_pull_u8(buf);
   10bd8:	4620      	mov	r0, r4
   10bda:	f014 f8f4 	bl	24dc6 <net_buf_simple_pull_u8>
   10bde:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   10be0:	4620      	mov	r0, r4
   10be2:	f014 f8f0 	bl	24dc6 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   10be6:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   10be8:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   10bea:	4630      	mov	r0, r6
	mod_id = buf->data;
   10bec:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   10bee:	f7fe fc73 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   10bf2:	4605      	mov	r5, r0
   10bf4:	b9c0      	cbnz	r0, 10c28 <mod_pub_va_set+0xd0>
		vnd = (buf->len == 4);
   10bf6:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0U;
   10bf8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4);
   10bfc:	1f1a      	subs	r2, r3, #4
   10bfe:	4253      	negs	r3, r2
   10c00:	4153      	adcs	r3, r2
   10c02:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   10c06:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   10c08:	9b05      	ldr	r3, [sp, #20]
   10c0a:	3508      	adds	r5, #8
   10c0c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   10c10:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   10c14:	9300      	str	r3, [sp, #0]
   10c16:	9501      	str	r5, [sp, #4]
   10c18:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   10c1c:	4632      	mov	r2, r6
   10c1e:	4651      	mov	r1, sl
   10c20:	4648      	mov	r0, r9
   10c22:	f7ff fd1d 	bl	10660 <send_mod_pub_status.isra.9>
   10c26:	e7b2      	b.n	10b8e <mod_pub_va_set+0x36>
	mod = get_model(elem, buf, &vnd);
   10c28:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   10c2c:	4621      	mov	r1, r4
   10c2e:	f012 ffe9 	bl	23c04 <get_model>
	if (!mod) {
   10c32:	4605      	mov	r5, r0
   10c34:	b918      	cbnz	r0, 10c3e <mod_pub_va_set+0xe6>
		pub_addr = 0U;
   10c36:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   10c3a:	2002      	movs	r0, #2
		goto send_status;
   10c3c:	e7e4      	b.n	10c08 <mod_pub_va_set+0xb0>
	status = va_add(label_uuid, &pub_addr);
   10c3e:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   10c42:	4658      	mov	r0, fp
   10c44:	f7ff fa70 	bl	10128 <va_add>
	if (status == STATUS_SUCCESS) {
   10c48:	2800      	cmp	r0, #0
   10c4a:	d1dd      	bne.n	10c08 <mod_pub_va_set+0xb0>
		status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag,
   10c4c:	2301      	movs	r3, #1
   10c4e:	9303      	str	r3, [sp, #12]
   10c50:	9b07      	ldr	r3, [sp, #28]
   10c52:	9302      	str	r3, [sp, #8]
   10c54:	9b06      	ldr	r3, [sp, #24]
   10c56:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   10c5a:	e9cd 7300 	strd	r7, r3, [sp]
   10c5e:	f3c8 020b 	ubfx	r2, r8, #0, #12
   10c62:	f3c8 3300 	ubfx	r3, r8, #12, #1
   10c66:	4628      	mov	r0, r5
   10c68:	f7fe fede 	bl	fa28 <_mod_pub_set>
   10c6c:	e7cc      	b.n	10c08 <mod_pub_va_set+0xb0>
   10c6e:	bf00      	nop
   10c70:	00025880 	.word	0x00025880
   10c74:	00025920 	.word	0x00025920
   10c78:	000298bf 	.word	0x000298bf
   10c7c:	000298a6 	.word	0x000298a6

00010c80 <mod_sub_va_del>:
{
   10c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c84:	4607      	mov	r7, r0
   10c86:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10c88:	4610      	mov	r0, r2
{
   10c8a:	4688      	mov	r8, r1
   10c8c:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10c8e:	f014 f8a2 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10c92:	b203      	sxth	r3, r0
   10c94:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10c96:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10c98:	dc10      	bgt.n	10cbc <mod_sub_va_del+0x3c>
		BT_WARN("Prohibited element address");
   10c9a:	2302      	movs	r3, #2
   10c9c:	f04f 0100 	mov.w	r1, #0
   10ca0:	f363 0107 	bfi	r1, r3, #0, #8
   10ca4:	4a32      	ldr	r2, [pc, #200]	; (10d70 <mod_sub_va_del+0xf0>)
   10ca6:	4b33      	ldr	r3, [pc, #204]	; (10d74 <mod_sub_va_del+0xf4>)
   10ca8:	4833      	ldr	r0, [pc, #204]	; (10d78 <mod_sub_va_del+0xf8>)
   10caa:	1a9b      	subs	r3, r3, r2
   10cac:	08db      	lsrs	r3, r3, #3
   10cae:	f363 118f 	bfi	r1, r3, #6, #10
   10cb2:	f00f ffa7 	bl	20c04 <log_0>
}
   10cb6:	b007      	add	sp, #28
   10cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   10cbc:	2110      	movs	r1, #16
   10cbe:	4620      	mov	r0, r4
   10cc0:	f014 f879 	bl	24db6 <net_buf_simple_pull_mem>
   10cc4:	4683      	mov	fp, r0
	elem = bt_mesh_elem_find(elem_addr);
   10cc6:	4630      	mov	r0, r6
	mod_id = buf->data;
   10cc8:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10ccc:	f7fe fc04 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   10cd0:	4605      	mov	r5, r0
   10cd2:	b988      	cbnz	r0, 10cf8 <mod_sub_va_del+0x78>
		vnd = (buf->len == 4);
   10cd4:	88a3      	ldrh	r3, [r4, #4]
   10cd6:	1f1a      	subs	r2, r3, #4
   10cd8:	4253      	negs	r3, r2
   10cda:	4153      	adcs	r3, r2
   10cdc:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   10ce0:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10ce2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10ce6:	9500      	str	r5, [sp, #0]
   10ce8:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10cec:	4641      	mov	r1, r8
   10cee:	4633      	mov	r3, r6
   10cf0:	4638      	mov	r0, r7
   10cf2:	f7ff f82f 	bl	fd54 <send_mod_sub_status>
   10cf6:	e7de      	b.n	10cb6 <mod_sub_va_del+0x36>
	mod = get_model(elem, buf, &vnd);
   10cf8:	f10d 0217 	add.w	r2, sp, #23
   10cfc:	4621      	mov	r1, r4
   10cfe:	f012 ff81 	bl	23c04 <get_model>
	if (!mod) {
   10d02:	4682      	mov	sl, r0
   10d04:	b358      	cbz	r0, 10d5e <mod_sub_va_del+0xde>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   10d06:	2210      	movs	r2, #16
   10d08:	4659      	mov	r1, fp
   10d0a:	481c      	ldr	r0, [pc, #112]	; (10d7c <mod_sub_va_del+0xfc>)
   10d0c:	4c1c      	ldr	r4, [pc, #112]	; (10d80 <mod_sub_va_del+0x100>)
   10d0e:	f011 f893 	bl	21e38 <memcmp>
   10d12:	b170      	cbz	r0, 10d32 <mod_sub_va_del+0xb2>
   10d14:	2210      	movs	r2, #16
   10d16:	4659      	mov	r1, fp
   10d18:	f104 0018 	add.w	r0, r4, #24
   10d1c:	f011 f88c 	bl	21e38 <memcmp>
   10d20:	b1d8      	cbz	r0, 10d5a <mod_sub_va_del+0xda>
   10d22:	2210      	movs	r2, #16
   10d24:	4659      	mov	r1, fp
   10d26:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   10d2a:	f011 f885 	bl	21e38 <memcmp>
   10d2e:	b9c8      	cbnz	r0, 10d64 <mod_sub_va_del+0xe4>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   10d30:	2002      	movs	r0, #2
				*addr = labels[i].addr;
   10d32:	2314      	movs	r3, #20
   10d34:	4358      	muls	r0, r3
   10d36:	1823      	adds	r3, r4, r0
   10d38:	885d      	ldrh	r5, [r3, #2]
			labels[i].ref--;
   10d3a:	5a23      	ldrh	r3, [r4, r0]
   10d3c:	3b01      	subs	r3, #1
   10d3e:	5223      	strh	r3, [r4, r0]
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   10d40:	b19d      	cbz	r5, 10d6a <mod_sub_va_del+0xea>
	match = bt_mesh_model_find_group(mod, sub_addr);
   10d42:	4629      	mov	r1, r5
   10d44:	4650      	mov	r0, sl
   10d46:	f012 fe4c 	bl	239e2 <bt_mesh_model_find_group>
	if (match) {
   10d4a:	b160      	cbz	r0, 10d66 <mod_sub_va_del+0xe6>
		*match = BT_MESH_ADDR_UNASSIGNED;
   10d4c:	2400      	movs	r4, #0
   10d4e:	8004      	strh	r4, [r0, #0]
			bt_mesh_store_mod_sub(mod);
   10d50:	4650      	mov	r0, sl
   10d52:	f013 f93d 	bl	23fd0 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   10d56:	4622      	mov	r2, r4
   10d58:	e7c3      	b.n	10ce2 <mod_sub_va_del+0x62>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   10d5a:	2001      	movs	r0, #1
   10d5c:	e7e9      	b.n	10d32 <mod_sub_va_del+0xb2>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   10d5e:	4605      	mov	r5, r0
		status = STATUS_INVALID_MODEL;
   10d60:	2202      	movs	r2, #2
   10d62:	e7be      	b.n	10ce2 <mod_sub_va_del+0x62>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   10d64:	2500      	movs	r5, #0
		status = STATUS_CANNOT_REMOVE;
   10d66:	220c      	movs	r2, #12
   10d68:	e7bb      	b.n	10ce2 <mod_sub_va_del+0x62>
			return STATUS_SUCCESS;
   10d6a:	462a      	mov	r2, r5
   10d6c:	e7b9      	b.n	10ce2 <mod_sub_va_del+0x62>
   10d6e:	bf00      	nop
   10d70:	00025880 	.word	0x00025880
   10d74:	00025920 	.word	0x00025920
   10d78:	000298bf 	.word	0x000298bf
   10d7c:	20001e4a 	.word	0x20001e4a
   10d80:	20001e46 	.word	0x20001e46

00010d84 <mod_sub_del>:
{
   10d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d88:	4607      	mov	r7, r0
   10d8a:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   10d8c:	4610      	mov	r0, r2
{
   10d8e:	4688      	mov	r8, r1
   10d90:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10d92:	f014 f820 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10d96:	b203      	sxth	r3, r0
   10d98:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10d9a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10d9c:	dc10      	bgt.n	10dc0 <mod_sub_del+0x3c>
		BT_WARN("Prohibited element address");
   10d9e:	2302      	movs	r3, #2
   10da0:	f04f 0100 	mov.w	r1, #0
   10da4:	f363 0107 	bfi	r1, r3, #0, #8
   10da8:	4a21      	ldr	r2, [pc, #132]	; (10e30 <mod_sub_del+0xac>)
   10daa:	4b22      	ldr	r3, [pc, #136]	; (10e34 <mod_sub_del+0xb0>)
   10dac:	4822      	ldr	r0, [pc, #136]	; (10e38 <mod_sub_del+0xb4>)
   10dae:	1a9b      	subs	r3, r3, r2
   10db0:	08db      	lsrs	r3, r3, #3
   10db2:	f363 118f 	bfi	r1, r3, #6, #10
   10db6:	f00f ff25 	bl	20c04 <log_0>
}
   10dba:	b006      	add	sp, #24
   10dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   10dc0:	4620      	mov	r0, r4
   10dc2:	f014 f808 	bl	24dd6 <net_buf_simple_pull_le16>
   10dc6:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   10dc8:	4628      	mov	r0, r5
	mod_id = buf->data;
   10dca:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10dce:	f7fe fb83 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   10dd2:	b938      	cbnz	r0, 10de4 <mod_sub_del+0x60>
		vnd = (buf->len == 4);
   10dd4:	88a3      	ldrh	r3, [r4, #4]
   10dd6:	1f1a      	subs	r2, r3, #4
   10dd8:	4253      	negs	r3, r2
   10dda:	4153      	adcs	r3, r2
   10ddc:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   10de0:	2201      	movs	r2, #1
   10de2:	e016      	b.n	10e12 <mod_sub_del+0x8e>
	mod = get_model(elem, buf, &vnd);
   10de4:	f10d 0217 	add.w	r2, sp, #23
   10de8:	4621      	mov	r1, r4
   10dea:	f012 ff0b 	bl	23c04 <get_model>
	if (!mod) {
   10dee:	4682      	mov	sl, r0
   10df0:	b1d0      	cbz	r0, 10e28 <mod_sub_del+0xa4>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   10df2:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   10df6:	b29b      	uxth	r3, r3
   10df8:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   10dfc:	d8f0      	bhi.n	10de0 <mod_sub_del+0x5c>
	match = bt_mesh_model_find_group(mod, sub_addr);
   10dfe:	4631      	mov	r1, r6
   10e00:	f012 fdef 	bl	239e2 <bt_mesh_model_find_group>
	if (match) {
   10e04:	2400      	movs	r4, #0
   10e06:	b188      	cbz	r0, 10e2c <mod_sub_del+0xa8>
		*match = BT_MESH_ADDR_UNASSIGNED;
   10e08:	8004      	strh	r4, [r0, #0]
			bt_mesh_store_mod_sub(mod);
   10e0a:	4650      	mov	r0, sl
   10e0c:	f013 f8e0 	bl	23fd0 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   10e10:	4622      	mov	r2, r4
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10e12:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10e16:	9600      	str	r6, [sp, #0]
   10e18:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10e1c:	4641      	mov	r1, r8
   10e1e:	462b      	mov	r3, r5
   10e20:	4638      	mov	r0, r7
   10e22:	f7fe ff97 	bl	fd54 <send_mod_sub_status>
   10e26:	e7c8      	b.n	10dba <mod_sub_del+0x36>
		status = STATUS_INVALID_MODEL;
   10e28:	2202      	movs	r2, #2
   10e2a:	e7f2      	b.n	10e12 <mod_sub_del+0x8e>
	status = STATUS_SUCCESS;
   10e2c:	4602      	mov	r2, r0
   10e2e:	e7f0      	b.n	10e12 <mod_sub_del+0x8e>
   10e30:	00025880 	.word	0x00025880
   10e34:	00025920 	.word	0x00025920
   10e38:	000298bf 	.word	0x000298bf

00010e3c <mod_sub_va_add>:
{
   10e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e40:	4607      	mov	r7, r0
   10e42:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10e44:	4610      	mov	r0, r2
{
   10e46:	4688      	mov	r8, r1
   10e48:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10e4a:	f013 ffc4 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10e4e:	b203      	sxth	r3, r0
   10e50:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10e52:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10e54:	dc10      	bgt.n	10e78 <mod_sub_va_add+0x3c>
		BT_WARN("Prohibited element address");
   10e56:	2302      	movs	r3, #2
   10e58:	f04f 0100 	mov.w	r1, #0
   10e5c:	f363 0107 	bfi	r1, r3, #0, #8
   10e60:	4a2d      	ldr	r2, [pc, #180]	; (10f18 <mod_sub_va_add+0xdc>)
   10e62:	4b2e      	ldr	r3, [pc, #184]	; (10f1c <mod_sub_va_add+0xe0>)
   10e64:	482e      	ldr	r0, [pc, #184]	; (10f20 <mod_sub_va_add+0xe4>)
   10e66:	1a9b      	subs	r3, r3, r2
   10e68:	08db      	lsrs	r3, r3, #3
   10e6a:	f363 118f 	bfi	r1, r3, #6, #10
   10e6e:	f00f fec9 	bl	20c04 <log_0>
}
   10e72:	b007      	add	sp, #28
   10e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   10e78:	2110      	movs	r1, #16
   10e7a:	4620      	mov	r0, r4
   10e7c:	f013 ff9b 	bl	24db6 <net_buf_simple_pull_mem>
   10e80:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   10e82:	4630      	mov	r0, r6
	mod_id = buf->data;
   10e84:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   10e88:	f7fe fb26 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   10e8c:	b9b0      	cbnz	r0, 10ebc <mod_sub_va_add+0x80>
		vnd = (buf->len == 4);
   10e8e:	88a3      	ldrh	r3, [r4, #4]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   10e90:	f8ad 0016 	strh.w	r0, [sp, #22]
		vnd = (buf->len == 4);
   10e94:	1f19      	subs	r1, r3, #4
   10e96:	424b      	negs	r3, r1
   10e98:	414b      	adcs	r3, r1
   10e9a:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   10e9e:	2501      	movs	r5, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10ea0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   10ea4:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10ea8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   10eac:	9300      	str	r3, [sp, #0]
   10eae:	462a      	mov	r2, r5
   10eb0:	4633      	mov	r3, r6
   10eb2:	4641      	mov	r1, r8
   10eb4:	4638      	mov	r0, r7
   10eb6:	f7fe ff4d 	bl	fd54 <send_mod_sub_status>
   10eba:	e7da      	b.n	10e72 <mod_sub_va_add+0x36>
	mod = get_model(elem, buf, &vnd);
   10ebc:	4621      	mov	r1, r4
   10ebe:	f10d 0215 	add.w	r2, sp, #21
   10ec2:	f012 fe9f 	bl	23c04 <get_model>
	if (!mod) {
   10ec6:	4604      	mov	r4, r0
   10ec8:	b918      	cbnz	r0, 10ed2 <mod_sub_va_add+0x96>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   10eca:	f8ad 0016 	strh.w	r0, [sp, #22]
		status = STATUS_INVALID_MODEL;
   10ece:	2502      	movs	r5, #2
		goto send_status;
   10ed0:	e7e6      	b.n	10ea0 <mod_sub_va_add+0x64>
	status = va_add(label_uuid, &sub_addr);
   10ed2:	4628      	mov	r0, r5
   10ed4:	f10d 0116 	add.w	r1, sp, #22
   10ed8:	f7ff f926 	bl	10128 <va_add>
	if (status != STATUS_SUCCESS) {
   10edc:	4605      	mov	r5, r0
   10ede:	2800      	cmp	r0, #0
   10ee0:	d1de      	bne.n	10ea0 <mod_sub_va_add+0x64>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
   10ee2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   10ee6:	4620      	mov	r0, r4
   10ee8:	f012 fd7b 	bl	239e2 <bt_mesh_model_find_group>
   10eec:	2800      	cmp	r0, #0
   10eee:	d1d7      	bne.n	10ea0 <mod_sub_va_add+0x64>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   10ef0:	89e3      	ldrh	r3, [r4, #14]
   10ef2:	b163      	cbz	r3, 10f0e <mod_sub_va_add+0xd2>
   10ef4:	8a23      	ldrh	r3, [r4, #16]
   10ef6:	b963      	cbnz	r3, 10f12 <mod_sub_va_add+0xd6>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   10ef8:	2301      	movs	r3, #1
			mod->groups[i] = sub_addr;
   10efa:	3304      	adds	r3, #4
   10efc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   10f00:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   10f04:	80da      	strh	r2, [r3, #6]
			bt_mesh_store_mod_sub(mod);
   10f06:	4620      	mov	r0, r4
   10f08:	f013 f862 	bl	23fd0 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   10f0c:	e7c8      	b.n	10ea0 <mod_sub_va_add+0x64>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   10f0e:	462b      	mov	r3, r5
   10f10:	e7f3      	b.n	10efa <mod_sub_va_add+0xbe>
		status = STATUS_INSUFF_RESOURCES;
   10f12:	2505      	movs	r5, #5
   10f14:	e7c4      	b.n	10ea0 <mod_sub_va_add+0x64>
   10f16:	bf00      	nop
   10f18:	00025880 	.word	0x00025880
   10f1c:	00025920 	.word	0x00025920
   10f20:	000298bf 	.word	0x000298bf

00010f24 <mod_sub_add>:
{
   10f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10f28:	4607      	mov	r7, r0
   10f2a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   10f2c:	4610      	mov	r0, r2
{
   10f2e:	4688      	mov	r8, r1
   10f30:	4615      	mov	r5, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   10f32:	f013 ff50 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10f36:	b203      	sxth	r3, r0
   10f38:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   10f3a:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   10f3c:	dc10      	bgt.n	10f60 <mod_sub_add+0x3c>
		BT_WARN("Prohibited element address");
   10f3e:	2302      	movs	r3, #2
   10f40:	f04f 0100 	mov.w	r1, #0
   10f44:	f363 0107 	bfi	r1, r3, #0, #8
   10f48:	4a24      	ldr	r2, [pc, #144]	; (10fdc <mod_sub_add+0xb8>)
   10f4a:	4b25      	ldr	r3, [pc, #148]	; (10fe0 <mod_sub_add+0xbc>)
   10f4c:	4825      	ldr	r0, [pc, #148]	; (10fe4 <mod_sub_add+0xc0>)
   10f4e:	1a9b      	subs	r3, r3, r2
   10f50:	08db      	lsrs	r3, r3, #3
   10f52:	f363 118f 	bfi	r1, r3, #6, #10
   10f56:	f00f fe55 	bl	20c04 <log_0>
}
   10f5a:	b007      	add	sp, #28
   10f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   10f60:	4628      	mov	r0, r5
   10f62:	f013 ff38 	bl	24dd6 <net_buf_simple_pull_le16>
   10f66:	4604      	mov	r4, r0
	elem = bt_mesh_elem_find(elem_addr);
   10f68:	4630      	mov	r0, r6
	mod_id = buf->data;
   10f6a:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
   10f6e:	f7fe fab3 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   10f72:	b938      	cbnz	r0, 10f84 <mod_sub_add+0x60>
		vnd = (buf->len == 4);
   10f74:	88ab      	ldrh	r3, [r5, #4]
   10f76:	1f1a      	subs	r2, r3, #4
   10f78:	4253      	negs	r3, r2
   10f7a:	4153      	adcs	r3, r2
   10f7c:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   10f80:	2201      	movs	r2, #1
   10f82:	e01d      	b.n	10fc0 <mod_sub_add+0x9c>
	mod = get_model(elem, buf, &vnd);
   10f84:	4629      	mov	r1, r5
   10f86:	f10d 0217 	add.w	r2, sp, #23
   10f8a:	f012 fe3b 	bl	23c04 <get_model>
	if (!mod) {
   10f8e:	4605      	mov	r5, r0
   10f90:	b1a8      	cbz	r0, 10fbe <mod_sub_add+0x9a>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   10f92:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
   10f96:	b29b      	uxth	r3, r3
   10f98:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   10f9c:	d8f0      	bhi.n	10f80 <mod_sub_add+0x5c>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
   10f9e:	4621      	mov	r1, r4
   10fa0:	f012 fd1f 	bl	239e2 <bt_mesh_model_find_group>
   10fa4:	b938      	cbnz	r0, 10fb6 <mod_sub_add+0x92>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   10fa6:	89eb      	ldrh	r3, [r5, #14]
   10fa8:	b13b      	cbz	r3, 10fba <mod_sub_add+0x96>
   10faa:	8a2b      	ldrh	r3, [r5, #16]
   10fac:	b99b      	cbnz	r3, 10fd6 <mod_sub_add+0xb2>
			mod->groups[i] = sub_addr;
   10fae:	822c      	strh	r4, [r5, #16]
			bt_mesh_store_mod_sub(mod);
   10fb0:	4628      	mov	r0, r5
   10fb2:	f013 f80d 	bl	23fd0 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   10fb6:	2200      	movs	r2, #0
   10fb8:	e002      	b.n	10fc0 <mod_sub_add+0x9c>
			mod->groups[i] = sub_addr;
   10fba:	81ec      	strh	r4, [r5, #14]
	if (i == ARRAY_SIZE(mod->groups)) {
   10fbc:	e7f8      	b.n	10fb0 <mod_sub_add+0x8c>
		status = STATUS_INVALID_MODEL;
   10fbe:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   10fc0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10fc4:	9400      	str	r4, [sp, #0]
   10fc6:	e9cd 9301 	strd	r9, r3, [sp, #4]
   10fca:	4641      	mov	r1, r8
   10fcc:	4633      	mov	r3, r6
   10fce:	4638      	mov	r0, r7
   10fd0:	f7fe fec0 	bl	fd54 <send_mod_sub_status>
   10fd4:	e7c1      	b.n	10f5a <mod_sub_add+0x36>
		status = STATUS_INSUFF_RESOURCES;
   10fd6:	2205      	movs	r2, #5
   10fd8:	e7f2      	b.n	10fc0 <mod_sub_add+0x9c>
   10fda:	bf00      	nop
   10fdc:	00025880 	.word	0x00025880
   10fe0:	00025920 	.word	0x00025920
   10fe4:	000298bf 	.word	0x000298bf

00010fe8 <mod_pub_get.part.11>:
		BT_WARN("Prohibited element address");
   10fe8:	2302      	movs	r3, #2
   10fea:	f04f 0100 	mov.w	r1, #0
   10fee:	f363 0107 	bfi	r1, r3, #0, #8
   10ff2:	4a04      	ldr	r2, [pc, #16]	; (11004 <mod_pub_get.part.11+0x1c>)
   10ff4:	4b04      	ldr	r3, [pc, #16]	; (11008 <mod_pub_get.part.11+0x20>)
   10ff6:	4805      	ldr	r0, [pc, #20]	; (1100c <mod_pub_get.part.11+0x24>)
   10ff8:	1a9b      	subs	r3, r3, r2
   10ffa:	08db      	lsrs	r3, r3, #3
   10ffc:	f363 118f 	bfi	r1, r3, #6, #10
   11000:	f00f be00 	b.w	20c04 <log_0>
   11004:	00025880 	.word	0x00025880
   11008:	00025920 	.word	0x00025920
   1100c:	000298bf 	.word	0x000298bf

00011010 <dev_comp_data_get>:
{
   11010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11014:	b08f      	sub	sp, #60	; 0x3c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11016:	ab05      	add	r3, sp, #20
{
   11018:	4680      	mov	r8, r0
   1101a:	4689      	mov	r9, r1
	page = net_buf_simple_pull_u8(buf);
   1101c:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1101e:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   11022:	e9cd 1303 	strd	r1, r3, [sp, #12]
   11026:	9302      	str	r3, [sp, #8]
	page = net_buf_simple_pull_u8(buf);
   11028:	f013 fecd 	bl	24dc6 <net_buf_simple_pull_u8>
	if (page != 0) {
   1102c:	4601      	mov	r1, r0
   1102e:	b168      	cbz	r0, 1104c <dev_comp_data_get+0x3c>
		BT_WARN("Composition page %u not available", page);
   11030:	2302      	movs	r3, #2
   11032:	f04f 0200 	mov.w	r2, #0
   11036:	f363 0207 	bfi	r2, r3, #0, #8
   1103a:	484f      	ldr	r0, [pc, #316]	; (11178 <dev_comp_data_get+0x168>)
   1103c:	4b4f      	ldr	r3, [pc, #316]	; (1117c <dev_comp_data_get+0x16c>)
   1103e:	1a1b      	subs	r3, r3, r0
   11040:	08db      	lsrs	r3, r3, #3
   11042:	f363 128f 	bfi	r2, r3, #6, #10
   11046:	484e      	ldr	r0, [pc, #312]	; (11180 <dev_comp_data_get+0x170>)
   11048:	f00f fde9 	bl	20c1e <log_1>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   1104c:	2102      	movs	r1, #2
   1104e:	a802      	add	r0, sp, #8
   11050:	f012 fced 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   11054:	2100      	movs	r1, #0
   11056:	a802      	add	r0, sp, #8
   11058:	f013 fe47 	bl	24cea <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   1105c:	f7fe fcc0 	bl	f9e0 <bt_mesh_comp_get>
   11060:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   11062:	8801      	ldrh	r1, [r0, #0]
   11064:	a802      	add	r0, sp, #8
   11066:	f013 fe48 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   1106a:	8869      	ldrh	r1, [r5, #2]
   1106c:	a802      	add	r0, sp, #8
   1106e:	f013 fe44 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   11072:	88a9      	ldrh	r1, [r5, #4]
   11074:	a802      	add	r0, sp, #8
   11076:	f013 fe40 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   1107a:	210a      	movs	r1, #10
   1107c:	a802      	add	r0, sp, #8
   1107e:	f013 fe3c 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   11082:	2107      	movs	r1, #7
   11084:	a802      	add	r0, sp, #8
   11086:	f013 fe38 	bl	24cfa <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   1108a:	2600      	movs	r6, #0
		net_buf_simple_add_le16(buf, mod->id);
   1108c:	271c      	movs	r7, #28
	for (i = 0; i < comp->elem_count; i++) {
   1108e:	68ab      	ldr	r3, [r5, #8]
   11090:	429e      	cmp	r6, r3
   11092:	d314      	bcc.n	110be <dev_comp_data_get+0xae>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   11094:	2300      	movs	r3, #0
   11096:	9300      	str	r3, [sp, #0]
   11098:	aa02      	add	r2, sp, #8
   1109a:	4649      	mov	r1, r9
   1109c:	4640      	mov	r0, r8
   1109e:	f012 fcef 	bl	23a80 <bt_mesh_model_send>
   110a2:	b390      	cbz	r0, 1110a <dev_comp_data_get+0xfa>
		BT_ERR("Unable to send Device Composition Status response");
   110a4:	2301      	movs	r3, #1
   110a6:	f04f 0100 	mov.w	r1, #0
   110aa:	f363 0107 	bfi	r1, r3, #0, #8
   110ae:	4a32      	ldr	r2, [pc, #200]	; (11178 <dev_comp_data_get+0x168>)
   110b0:	4b32      	ldr	r3, [pc, #200]	; (1117c <dev_comp_data_get+0x16c>)
   110b2:	4834      	ldr	r0, [pc, #208]	; (11184 <dev_comp_data_get+0x174>)
   110b4:	1a9b      	subs	r3, r3, r2
   110b6:	08db      	lsrs	r3, r3, #3
   110b8:	f363 118f 	bfi	r1, r3, #6, #10
   110bc:	e023      	b.n	11106 <dev_comp_data_get+0xf6>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   110be:	68ec      	ldr	r4, [r5, #12]
   110c0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
   110c4:	a802      	add	r0, sp, #8
   110c6:	f013 fea6 	bl	24e16 <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2) + (elem->vnd_model_count * 2)) {
   110ca:	7923      	ldrb	r3, [r4, #4]
   110cc:	7962      	ldrb	r2, [r4, #5]
   110ce:	4413      	add	r3, r2
   110d0:	3302      	adds	r3, #2
	if (net_buf_simple_tailroom(buf) <
   110d2:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   110d6:	d21b      	bcs.n	11110 <dev_comp_data_get+0x100>
		BT_ERR("Too large device composition");
   110d8:	2301      	movs	r3, #1
   110da:	f04f 0100 	mov.w	r1, #0
   110de:	f363 0107 	bfi	r1, r3, #0, #8
   110e2:	4c26      	ldr	r4, [pc, #152]	; (1117c <dev_comp_data_get+0x16c>)
   110e4:	4b24      	ldr	r3, [pc, #144]	; (11178 <dev_comp_data_get+0x168>)
   110e6:	4828      	ldr	r0, [pc, #160]	; (11188 <dev_comp_data_get+0x178>)
   110e8:	1ae4      	subs	r4, r4, r3
   110ea:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   110ee:	f364 118f 	bfi	r1, r4, #6, #10
   110f2:	f00f fd87 	bl	20c04 <log_0>
		BT_ERR("Unable to get composition page 0");
   110f6:	f04f 0100 	mov.w	r1, #0
   110fa:	2301      	movs	r3, #1
   110fc:	f363 0107 	bfi	r1, r3, #0, #8
   11100:	4822      	ldr	r0, [pc, #136]	; (1118c <dev_comp_data_get+0x17c>)
   11102:	f364 118f 	bfi	r1, r4, #6, #10
		BT_ERR("Unable to send Device Composition Status response");
   11106:	f00f fd7d 	bl	20c04 <log_0>
}
   1110a:	b00f      	add	sp, #60	; 0x3c
   1110c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_simple_add_le16(buf, elem->loc);
   11110:	8861      	ldrh	r1, [r4, #2]
   11112:	a802      	add	r0, sp, #8
   11114:	f013 fdf1 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   11118:	7921      	ldrb	r1, [r4, #4]
   1111a:	a802      	add	r0, sp, #8
   1111c:	f013 fde5 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   11120:	7961      	ldrb	r1, [r4, #5]
   11122:	a802      	add	r0, sp, #8
   11124:	f013 fde1 	bl	24cea <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   11128:	f04f 0a00 	mov.w	sl, #0
   1112c:	7923      	ldrb	r3, [r4, #4]
   1112e:	459a      	cmp	sl, r3
   11130:	db06      	blt.n	11140 <dev_comp_data_get+0x130>
	for (i = 0; i < elem->vnd_model_count; i++) {
   11132:	f04f 0a00 	mov.w	sl, #0
   11136:	7963      	ldrb	r3, [r4, #5]
   11138:	459a      	cmp	sl, r3
   1113a:	db0b      	blt.n	11154 <dev_comp_data_get+0x144>
	for (i = 0; i < comp->elem_count; i++) {
   1113c:	3601      	adds	r6, #1
   1113e:	e7a6      	b.n	1108e <dev_comp_data_get+0x7e>
		net_buf_simple_add_le16(buf, mod->id);
   11140:	fb07 f30a 	mul.w	r3, r7, sl
   11144:	68a2      	ldr	r2, [r4, #8]
   11146:	a802      	add	r0, sp, #8
   11148:	5ad1      	ldrh	r1, [r2, r3]
   1114a:	f013 fdd6 	bl	24cfa <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   1114e:	f10a 0a01 	add.w	sl, sl, #1
   11152:	e7eb      	b.n	1112c <dev_comp_data_get+0x11c>
		mod = &elem->vnd_models[i];
   11154:	68e2      	ldr	r2, [r4, #12]
   11156:	fb07 f30a 	mul.w	r3, r7, sl
   1115a:	eb02 0b03 	add.w	fp, r2, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   1115e:	5ad1      	ldrh	r1, [r2, r3]
   11160:	a802      	add	r0, sp, #8
   11162:	f013 fdca 	bl	24cfa <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   11166:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   1116a:	a802      	add	r0, sp, #8
   1116c:	f013 fdc5 	bl	24cfa <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   11170:	f10a 0a01 	add.w	sl, sl, #1
   11174:	e7df      	b.n	11136 <dev_comp_data_get+0x126>
   11176:	bf00      	nop
   11178:	00025880 	.word	0x00025880
   1117c:	00025920 	.word	0x00025920
   11180:	000295d9 	.word	0x000295d9
   11184:	00029639 	.word	0x00029639
   11188:	000295fb 	.word	0x000295fb
   1118c:	00029618 	.word	0x00029618

00011190 <app_key_set>:
{
   11190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11194:	4680      	mov	r8, r0
   11196:	4689      	mov	r9, r1
   11198:	4616      	mov	r6, r2
   1119a:	469a      	mov	sl, r3
	sub = bt_mesh_subnet_get(net_idx);
   1119c:	f7fa fd00 	bl	bba0 <bt_mesh_subnet_get>
	if (!sub) {
   111a0:	4605      	mov	r5, r0
   111a2:	2800      	cmp	r0, #0
   111a4:	d046      	beq.n	11234 <app_key_set+0xa4>
	key = bt_mesh_app_key_find(app_idx);
   111a6:	4648      	mov	r0, r9
   111a8:	f7fd f852 	bl	e250 <bt_mesh_app_key_find>
   111ac:	4604      	mov	r4, r0
	if (update) {
   111ae:	f1ba 0f00 	cmp.w	sl, #0
   111b2:	d024      	beq.n	111fe <app_key_set+0x6e>
		if (!key) {
   111b4:	2800      	cmp	r0, #0
   111b6:	d04c      	beq.n	11252 <app_key_set+0xc2>
		if (key->net_idx != net_idx) {
   111b8:	8803      	ldrh	r3, [r0, #0]
   111ba:	4543      	cmp	r3, r8
   111bc:	d14b      	bne.n	11256 <app_key_set+0xc6>
		if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
   111be:	7feb      	ldrb	r3, [r5, #31]
   111c0:	2b01      	cmp	r3, #1
   111c2:	d002      	beq.n	111ca <app_key_set+0x3a>
			return STATUS_CANNOT_UPDATE;
   111c4:	200b      	movs	r0, #11
}
   111c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key->updated) {
   111ca:	7902      	ldrb	r2, [r0, #4]
   111cc:	b142      	cbz	r2, 111e0 <app_key_set+0x50>
			if (memcmp(keys->val, val, 16)) {
   111ce:	2210      	movs	r2, #16
   111d0:	4631      	mov	r1, r6
   111d2:	3017      	adds	r0, #23
   111d4:	f010 fe30 	bl	21e38 <memcmp>
   111d8:	2800      	cmp	r0, #0
   111da:	d1f3      	bne.n	111c4 <app_key_set+0x34>
				return STATUS_SUCCESS;
   111dc:	2000      	movs	r0, #0
   111de:	e7f2      	b.n	111c6 <app_key_set+0x36>
		keys = &key->keys[1];
   111e0:	f100 0716 	add.w	r7, r0, #22
		key->updated = true;
   111e4:	7103      	strb	r3, [r0, #4]
			const u8_t net_id[16], u32_t iv_index,
			u8_t auth[8]);

static inline int bt_mesh_app_id(const u8_t app_key[16], u8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
   111e6:	4639      	mov	r1, r7
   111e8:	4630      	mov	r0, r6
   111ea:	f7fd ff05 	bl	eff8 <bt_mesh_k4>
	if (bt_mesh_app_id(val, &keys->id)) {
   111ee:	b318      	cbz	r0, 11238 <app_key_set+0xa8>
		if (update) {
   111f0:	f1ba 0f00 	cmp.w	sl, #0
   111f4:	d001      	beq.n	111fa <app_key_set+0x6a>
			key->updated = false;
   111f6:	2300      	movs	r3, #0
   111f8:	7123      	strb	r3, [r4, #4]
		return STATUS_STORAGE_FAIL;
   111fa:	2009      	movs	r0, #9
   111fc:	e7e3      	b.n	111c6 <app_key_set+0x36>
		if (key) {
   111fe:	b960      	cbnz	r0, 1121a <app_key_set+0x8a>
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
   11200:	4c1a      	ldr	r4, [pc, #104]	; (1126c <app_key_set+0xdc>)
   11202:	f8b4 2144 	ldrh.w	r2, [r4, #324]	; 0x144
   11206:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1120a:	429a      	cmp	r2, r3
   1120c:	d027      	beq.n	1125e <app_key_set+0xce>
   1120e:	f8b4 216c 	ldrh.w	r2, [r4, #364]	; 0x16c
   11212:	429a      	cmp	r2, r3
   11214:	d027      	beq.n	11266 <app_key_set+0xd6>
			return STATUS_INSUFF_RESOURCES;
   11216:	2005      	movs	r0, #5
   11218:	e7d5      	b.n	111c6 <app_key_set+0x36>
			if (key->net_idx == net_idx &&
   1121a:	8805      	ldrh	r5, [r0, #0]
   1121c:	4545      	cmp	r5, r8
   1121e:	d109      	bne.n	11234 <app_key_set+0xa4>
			    !memcmp(key->keys[0].val, val, 16)) {
   11220:	2210      	movs	r2, #16
   11222:	4631      	mov	r1, r6
   11224:	3006      	adds	r0, #6
   11226:	f010 fe07 	bl	21e38 <memcmp>
			if (key->net_idx == net_idx &&
   1122a:	2800      	cmp	r0, #0
   1122c:	d0d6      	beq.n	111dc <app_key_set+0x4c>
			if (key->net_idx == net_idx) {
   1122e:	8823      	ldrh	r3, [r4, #0]
   11230:	42ab      	cmp	r3, r5
   11232:	d012      	beq.n	1125a <app_key_set+0xca>
				return STATUS_INVALID_NETKEY;
   11234:	2004      	movs	r0, #4
   11236:	e7c6      	b.n	111c6 <app_key_set+0x36>
	key->net_idx = net_idx;
   11238:	f8a4 8000 	strh.w	r8, [r4]
	key->app_idx = app_idx;
   1123c:	f8a4 9002 	strh.w	r9, [r4, #2]
	memcpy(keys->val, val, 16);
   11240:	2210      	movs	r2, #16
   11242:	4631      	mov	r1, r6
   11244:	1c78      	adds	r0, r7, #1
   11246:	f010 fe1e 	bl	21e86 <memcpy>
		bt_mesh_store_app_key(key);
   1124a:	4620      	mov	r0, r4
   1124c:	f003 fa28 	bl	146a0 <bt_mesh_store_app_key>
	return STATUS_SUCCESS;
   11250:	e7c4      	b.n	111dc <app_key_set+0x4c>
			return STATUS_INVALID_APPKEY;
   11252:	2003      	movs	r0, #3
   11254:	e7b7      	b.n	111c6 <app_key_set+0x36>
			return STATUS_INVALID_BINDING;
   11256:	2011      	movs	r0, #17
   11258:	e7b5      	b.n	111c6 <app_key_set+0x36>
				return STATUS_IDX_ALREADY_STORED;
   1125a:	2006      	movs	r0, #6
   1125c:	e7b3      	b.n	111c6 <app_key_set+0x36>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
   1125e:	f504 74a2 	add.w	r4, r4, #324	; 0x144
		keys = &key->keys[0];
   11262:	1d67      	adds	r7, r4, #5
   11264:	e7bf      	b.n	111e6 <app_key_set+0x56>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
   11266:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
   1126a:	e7fa      	b.n	11262 <app_key_set+0xd2>
   1126c:	20007060 	.word	0x20007060

00011270 <app_key_update>:
{
   11270:	b570      	push	{r4, r5, r6, lr}
   11272:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   11274:	ab04      	add	r3, sp, #16
{
   11276:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   11278:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1127c:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   11280:	4605      	mov	r5, r0
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11282:	f10d 020e 	add.w	r2, sp, #14
{
   11286:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11288:	4620      	mov	r0, r4
   1128a:	a903      	add	r1, sp, #12
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1128c:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1128e:	f012 fc5b 	bl	23b48 <key_idx_unpack>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   11292:	f248 0103 	movw	r1, #32771	; 0x8003
   11296:	a807      	add	r0, sp, #28
   11298:	f012 fbc9 	bl	23a2e <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, true);
   1129c:	2301      	movs	r3, #1
   1129e:	6822      	ldr	r2, [r4, #0]
   112a0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   112a4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   112a8:	f7ff ff72 	bl	11190 <app_key_set>
	net_buf_simple_add_u8(&msg, status);
   112ac:	4601      	mov	r1, r0
   112ae:	a807      	add	r0, sp, #28
   112b0:	f013 fd1b 	bl	24cea <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   112b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   112b8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   112bc:	a807      	add	r0, sp, #28
   112be:	f012 fc30 	bl	23b22 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   112c2:	2300      	movs	r3, #0
   112c4:	9300      	str	r3, [sp, #0]
   112c6:	aa07      	add	r2, sp, #28
   112c8:	4631      	mov	r1, r6
   112ca:	4628      	mov	r0, r5
   112cc:	f012 fbd8 	bl	23a80 <bt_mesh_model_send>
   112d0:	b168      	cbz	r0, 112ee <app_key_update+0x7e>
		BT_ERR("Unable to send App Key Status response");
   112d2:	2301      	movs	r3, #1
   112d4:	f04f 0100 	mov.w	r1, #0
   112d8:	f363 0107 	bfi	r1, r3, #0, #8
   112dc:	4a05      	ldr	r2, [pc, #20]	; (112f4 <app_key_update+0x84>)
   112de:	4b06      	ldr	r3, [pc, #24]	; (112f8 <app_key_update+0x88>)
   112e0:	4806      	ldr	r0, [pc, #24]	; (112fc <app_key_update+0x8c>)
   112e2:	1a9b      	subs	r3, r3, r2
   112e4:	08db      	lsrs	r3, r3, #3
   112e6:	f363 118f 	bfi	r1, r3, #6, #10
   112ea:	f00f fc8b 	bl	20c04 <log_0>
}
   112ee:	b00a      	add	sp, #40	; 0x28
   112f0:	bd70      	pop	{r4, r5, r6, pc}
   112f2:	bf00      	nop
   112f4:	00025880 	.word	0x00025880
   112f8:	00025920 	.word	0x00025920
   112fc:	00029430 	.word	0x00029430

00011300 <app_key_add>:
{
   11300:	b570      	push	{r4, r5, r6, lr}
   11302:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   11304:	ab04      	add	r3, sp, #16
{
   11306:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   11308:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1130c:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   11310:	4605      	mov	r5, r0
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11312:	f10d 020e 	add.w	r2, sp, #14
{
   11316:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11318:	4620      	mov	r0, r4
   1131a:	a903      	add	r1, sp, #12
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1131c:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1131e:	f012 fc13 	bl	23b48 <key_idx_unpack>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   11322:	f248 0103 	movw	r1, #32771	; 0x8003
   11326:	a807      	add	r0, sp, #28
   11328:	f012 fb81 	bl	23a2e <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, false);
   1132c:	2300      	movs	r3, #0
   1132e:	6822      	ldr	r2, [r4, #0]
   11330:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   11334:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   11338:	f7ff ff2a 	bl	11190 <app_key_set>
	net_buf_simple_add_u8(&msg, status);
   1133c:	4601      	mov	r1, r0
   1133e:	a807      	add	r0, sp, #28
   11340:	f013 fcd3 	bl	24cea <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   11344:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   11348:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1134c:	a807      	add	r0, sp, #28
   1134e:	f012 fbe8 	bl	23b22 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11352:	2300      	movs	r3, #0
   11354:	9300      	str	r3, [sp, #0]
   11356:	aa07      	add	r2, sp, #28
   11358:	4631      	mov	r1, r6
   1135a:	4628      	mov	r0, r5
   1135c:	f012 fb90 	bl	23a80 <bt_mesh_model_send>
   11360:	b168      	cbz	r0, 1137e <app_key_add+0x7e>
		BT_ERR("Unable to send App Key Status response");
   11362:	2301      	movs	r3, #1
   11364:	f04f 0100 	mov.w	r1, #0
   11368:	f363 0107 	bfi	r1, r3, #0, #8
   1136c:	4a05      	ldr	r2, [pc, #20]	; (11384 <app_key_add+0x84>)
   1136e:	4b06      	ldr	r3, [pc, #24]	; (11388 <app_key_add+0x88>)
   11370:	4806      	ldr	r0, [pc, #24]	; (1138c <app_key_add+0x8c>)
   11372:	1a9b      	subs	r3, r3, r2
   11374:	08db      	lsrs	r3, r3, #3
   11376:	f363 118f 	bfi	r1, r3, #6, #10
   1137a:	f00f fc43 	bl	20c04 <log_0>
}
   1137e:	b00a      	add	sp, #40	; 0x28
   11380:	bd70      	pop	{r4, r5, r6, pc}
   11382:	bf00      	nop
   11384:	00025880 	.word	0x00025880
   11388:	00025920 	.word	0x00025920
   1138c:	00029430 	.word	0x00029430

00011390 <heartbeat_pub_set>:
}

static void heartbeat_pub_set(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
   11390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct hb_pub_param *param = (void *)buf->data;
   11394:	6815      	ldr	r5, [r2, #0]
	u16_t dst, feat, idx;
	u8_t status;

	BT_DBG("src 0x%04x", ctx->addr);

	dst = sys_le16_to_cpu(param->dst);
   11396:	f8b5 8000 	ldrh.w	r8, [r5]
   1139a:	fa1f f988 	uxth.w	r9, r8
	/* All other address types but virtual are valid */
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   1139e:	f489 4300 	eor.w	r3, r9, #32768	; 0x8000
   113a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
   113a6:	4606      	mov	r6, r0
   113a8:	460f      	mov	r7, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   113aa:	d37c      	bcc.n	114a6 <heartbeat_pub_set+0x116>
		status = STATUS_INVALID_ADDRESS;
		goto failed;
	}

	if (param->count_log > 0x11 && param->count_log != 0xff) {
   113ac:	78ab      	ldrb	r3, [r5, #2]
   113ae:	3b12      	subs	r3, #18
   113b0:	b2db      	uxtb	r3, r3
   113b2:	2bec      	cmp	r3, #236	; 0xec
   113b4:	d97a      	bls.n	114ac <heartbeat_pub_set+0x11c>
		status = STATUS_CANNOT_SET;
		goto failed;
	}

	if (param->period_log > 0x10) {
   113b6:	78eb      	ldrb	r3, [r5, #3]
   113b8:	2b10      	cmp	r3, #16
   113ba:	d877      	bhi.n	114ac <heartbeat_pub_set+0x11c>
		status = STATUS_CANNOT_SET;
		goto failed;
	}

	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   113bc:	7929      	ldrb	r1, [r5, #4]
   113be:	f081 0380 	eor.w	r3, r1, #128	; 0x80
   113c2:	2b7e      	cmp	r3, #126	; 0x7e
   113c4:	d810      	bhi.n	113e8 <heartbeat_pub_set+0x58>
		BT_ERR("Invalid TTL value 0x%02x", param->ttl);
   113c6:	2301      	movs	r3, #1
   113c8:	f04f 0200 	mov.w	r2, #0
   113cc:	f363 0207 	bfi	r2, r3, #0, #8
   113d0:	4838      	ldr	r0, [pc, #224]	; (114b4 <heartbeat_pub_set+0x124>)
   113d2:	4b39      	ldr	r3, [pc, #228]	; (114b8 <heartbeat_pub_set+0x128>)
   113d4:	1a1b      	subs	r3, r3, r0
   113d6:	08db      	lsrs	r3, r3, #3
   113d8:	4838      	ldr	r0, [pc, #224]	; (114bc <heartbeat_pub_set+0x12c>)
   113da:	f363 128f 	bfi	r2, r3, #6, #10

	return;

failed:
	hb_pub_send_status(model, ctx, status, param);
}
   113de:	b003      	add	sp, #12
   113e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   113e4:	f00f bc1b 	b.w	20c1e <log_1>
	idx = sys_le16_to_cpu(param->net_idx);
   113e8:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   113ec:	b299      	uxth	r1, r3
	if (idx > 0xfff) {
   113ee:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   113f2:	d30c      	bcc.n	1140e <heartbeat_pub_set+0x7e>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   113f4:	2301      	movs	r3, #1
   113f6:	f04f 0200 	mov.w	r2, #0
   113fa:	f363 0207 	bfi	r2, r3, #0, #8
   113fe:	482d      	ldr	r0, [pc, #180]	; (114b4 <heartbeat_pub_set+0x124>)
   11400:	4b2d      	ldr	r3, [pc, #180]	; (114b8 <heartbeat_pub_set+0x128>)
   11402:	1a1b      	subs	r3, r3, r0
   11404:	08db      	lsrs	r3, r3, #3
   11406:	f363 128f 	bfi	r2, r3, #6, #10
   1140a:	482d      	ldr	r0, [pc, #180]	; (114c0 <heartbeat_pub_set+0x130>)
   1140c:	e7e7      	b.n	113de <heartbeat_pub_set+0x4e>
   1140e:	9301      	str	r3, [sp, #4]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   11410:	6984      	ldr	r4, [r0, #24]
	feat = sys_le16_to_cpu(param->feat);
   11412:	f8b5 a005 	ldrh.w	sl, [r5, #5]
	if (!bt_mesh_subnet_get(idx)) {
   11416:	4608      	mov	r0, r1
   11418:	f7fa fbc2 	bl	bba0 <bt_mesh_subnet_get>
   1141c:	2800      	cmp	r0, #0
   1141e:	d047      	beq.n	114b0 <heartbeat_pub_set+0x120>
	cfg->hb_pub.dst = dst;
   11420:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
	cfg->hb_pub.period = param->period_log;
   11424:	f895 b003 	ldrb.w	fp, [r5, #3]
	cfg->hb_pub.net_idx = idx;
   11428:	9b01      	ldr	r3, [sp, #4]
	cfg->hb_pub.period = param->period_log;
   1142a:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
	cfg->hb_pub.feat = feat & BT_MESH_FEAT_SUPPORTED;
   1142e:	f00a 0a0f 	and.w	sl, sl, #15
   11432:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
	cfg->hb_pub.net_idx = idx;
   11436:	86a3      	strh	r3, [r4, #52]	; 0x34
	if (dst == BT_MESH_ADDR_UNASSIGNED) {
   11438:	f104 010c 	add.w	r1, r4, #12
   1143c:	f1b9 0f00 	cmp.w	r9, #0
   11440:	d107      	bne.n	11452 <heartbeat_pub_set+0xc2>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
   11442:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	cfg->hb_pub.period = 0;
   11446:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
			k_delayed_work_cancel(&cfg->hb_pub.timer);
   1144a:	4608      	mov	r0, r1
   1144c:	f014 f802 	bl	25454 <k_delayed_work_cancel>
   11450:	e01e      	b.n	11490 <heartbeat_pub_set+0x100>
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
   11452:	78aa      	ldrb	r2, [r5, #2]
   11454:	4610      	mov	r0, r2
   11456:	f012 fc34 	bl	23cc2 <hb_pwr2.constprop.22>
   1145a:	85e0      	strh	r0, [r4, #46]	; 0x2e
		cfg->hb_pub.ttl = param->ttl;
   1145c:	792b      	ldrb	r3, [r5, #4]
   1145e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		if (param->period_log && param->count_log) {
   11462:	f1bb 0f00 	cmp.w	fp, #0
   11466:	d0f0      	beq.n	1144a <heartbeat_pub_set+0xba>
   11468:	2a00      	cmp	r2, #0
   1146a:	d0ee      	beq.n	1144a <heartbeat_pub_set+0xba>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1146c:	f3bf 8f5b 	dmb	ish
   11470:	3414      	adds	r4, #20
   11472:	e854 3f00 	ldrex	r3, [r4]
   11476:	f043 0201 	orr.w	r2, r3, #1
   1147a:	e844 2000 	strex	r0, r2, [r4]
   1147e:	2800      	cmp	r0, #0
   11480:	d1f7      	bne.n	11472 <heartbeat_pub_set+0xe2>
   11482:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11486:	07db      	lsls	r3, r3, #31
   11488:	d402      	bmi.n	11490 <heartbeat_pub_set+0x100>
		k_queue_append(&work_q->queue, work);
   1148a:	480e      	ldr	r0, [pc, #56]	; (114c4 <heartbeat_pub_set+0x134>)
   1148c:	f013 fdd8 	bl	25040 <k_queue_append>
		bt_mesh_store_hb_pub();
   11490:	f012 fd82 	bl	23f98 <bt_mesh_store_hb_pub>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
   11494:	2300      	movs	r3, #0
   11496:	461a      	mov	r2, r3
	hb_pub_send_status(model, ctx, status, param);
   11498:	4639      	mov	r1, r7
   1149a:	4630      	mov	r0, r6
}
   1149c:	b003      	add	sp, #12
   1149e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hb_pub_send_status(model, ctx, status, param);
   114a2:	f7fe bbed 	b.w	fc80 <hb_pub_send_status>
		status = STATUS_INVALID_ADDRESS;
   114a6:	2201      	movs	r2, #1
	hb_pub_send_status(model, ctx, status, param);
   114a8:	462b      	mov	r3, r5
   114aa:	e7f5      	b.n	11498 <heartbeat_pub_set+0x108>
		status = STATUS_CANNOT_SET;
   114ac:	220f      	movs	r2, #15
   114ae:	e7fb      	b.n	114a8 <heartbeat_pub_set+0x118>
		status = STATUS_INVALID_NETKEY;
   114b0:	2204      	movs	r2, #4
   114b2:	e7f9      	b.n	114a8 <heartbeat_pub_set+0x118>
   114b4:	00025880 	.word	0x00025880
   114b8:	00025920 	.word	0x00025920
   114bc:	000298a6 	.word	0x000298a6
   114c0:	000299de 	.word	0x000299de
   114c4:	20001d2c 	.word	0x20001d2c

000114c8 <hb_sub_send_status.constprop.21>:

static void hb_sub_send_status(struct bt_mesh_model *model,
   114c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			       struct bt_mesh_msg_ctx *ctx, u8_t status)
{
	/* Needed size: opcode (2 bytes) + msg + MIC */
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   114cc:	6985      	ldr	r5, [r0, #24]
static void hb_sub_send_status(struct bt_mesh_model *model,
   114ce:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   114d0:	ab06      	add	r3, sp, #24
   114d2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   114d6:	9303      	str	r3, [sp, #12]
   114d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
static void hb_sub_send_status(struct bt_mesh_model *model,
   114dc:	4682      	mov	sl, r0
   114de:	468b      	mov	fp, r1
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   114e0:	f014 f815 	bl	2550e <z_impl_k_uptime_get>
	s64_t uptime;

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	uptime = k_uptime_get();
	if (uptime > cfg->hb_sub.expiry) {
   114e4:	e9d5 890e 	ldrd	r8, r9, [r5, #56]	; 0x38
   114e8:	4580      	cmp	r8, r0
   114ea:	eb79 0301 	sbcs.w	r3, r9, r1
   114ee:	db5e      	blt.n	115ae <hb_sub_send_status.constprop.21+0xe6>
		period = 0U;
	} else {
		period = (cfg->hb_sub.expiry - uptime) / 1000;
   114f0:	ebb8 0000 	subs.w	r0, r8, r0
   114f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   114f8:	f04f 0300 	mov.w	r3, #0
   114fc:	eb69 0101 	sbc.w	r1, r9, r1
   11500:	f7ee fdee 	bl	e0 <__aeabi_ldivmod>
   11504:	b284      	uxth	r4, r0
	}

	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   11506:	f248 013c 	movw	r1, #32828	; 0x803c
   1150a:	a803      	add	r0, sp, #12
   1150c:	f012 fa8f 	bl	23a2e <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(&msg, status);
   11510:	2100      	movs	r1, #0
   11512:	a803      	add	r0, sp, #12
   11514:	f013 fbe9 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.src);
   11518:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
   1151c:	a803      	add	r0, sp, #12
   1151e:	f013 fbec 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.dst);
   11522:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
   11526:	a803      	add	r0, sp, #12
   11528:	f013 fbe7 	bl	24cfa <net_buf_simple_add_le16>
	if (!val) {
   1152c:	2c00      	cmp	r4, #0
   1152e:	d040      	beq.n	115b2 <hb_sub_send_status.constprop.21+0xea>
	} else if (val == 0xffff) {
   11530:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11534:	429c      	cmp	r4, r3
   11536:	d03e      	beq.n	115b6 <hb_sub_send_status.constprop.21+0xee>
		return 32 - __builtin_clz(val);
   11538:	fab4 f484 	clz	r4, r4
   1153c:	f1c4 0420 	rsb	r4, r4, #32
   11540:	b2e1      	uxtb	r1, r4
	net_buf_simple_add_u8(&msg, hb_log(period));
   11542:	a803      	add	r0, sp, #12
   11544:	f013 fbd1 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   11548:	f8b5 1044 	ldrh.w	r1, [r5, #68]	; 0x44
	if (!val) {
   1154c:	b149      	cbz	r1, 11562 <hb_sub_send_status.constprop.21+0x9a>
	} else if (val == 0xffff) {
   1154e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11552:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   11554:	bf1d      	ittte	ne
   11556:	fab1 f181 	clzne	r1, r1
   1155a:	f1c1 0120 	rsbne	r1, r1, #32
   1155e:	b2c9      	uxtbne	r1, r1
		return 0xff;
   11560:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   11562:	a803      	add	r0, sp, #12
   11564:	f013 fbc1 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.min_hops);
   11568:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
   1156c:	a803      	add	r0, sp, #12
   1156e:	f013 fbbc 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.max_hops);
   11572:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
   11576:	a803      	add	r0, sp, #12
   11578:	f013 fbb7 	bl	24cea <net_buf_simple_add_u8>

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1157c:	2300      	movs	r3, #0
   1157e:	9300      	str	r3, [sp, #0]
   11580:	aa03      	add	r2, sp, #12
   11582:	4659      	mov	r1, fp
   11584:	4650      	mov	r0, sl
   11586:	f012 fa7b 	bl	23a80 <bt_mesh_model_send>
   1158a:	b168      	cbz	r0, 115a8 <hb_sub_send_status.constprop.21+0xe0>
		BT_ERR("Unable to send Heartbeat Subscription Status");
   1158c:	2301      	movs	r3, #1
   1158e:	f04f 0100 	mov.w	r1, #0
   11592:	f363 0107 	bfi	r1, r3, #0, #8
   11596:	4a09      	ldr	r2, [pc, #36]	; (115bc <hb_sub_send_status.constprop.21+0xf4>)
   11598:	4b09      	ldr	r3, [pc, #36]	; (115c0 <hb_sub_send_status.constprop.21+0xf8>)
   1159a:	480a      	ldr	r0, [pc, #40]	; (115c4 <hb_sub_send_status.constprop.21+0xfc>)
   1159c:	1a9b      	subs	r3, r3, r2
   1159e:	08db      	lsrs	r3, r3, #3
   115a0:	f363 118f 	bfi	r1, r3, #6, #10
   115a4:	f00f fb2e 	bl	20c04 <log_0>
	}
}
   115a8:	b00b      	add	sp, #44	; 0x2c
   115aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period = 0U;
   115ae:	2400      	movs	r4, #0
   115b0:	e7a9      	b.n	11506 <hb_sub_send_status.constprop.21+0x3e>
		return 0x00;
   115b2:	4621      	mov	r1, r4
   115b4:	e7c5      	b.n	11542 <hb_sub_send_status.constprop.21+0x7a>
		return 0xff;
   115b6:	21ff      	movs	r1, #255	; 0xff
   115b8:	e7c3      	b.n	11542 <hb_sub_send_status.constprop.21+0x7a>
   115ba:	bf00      	nop
   115bc:	00025880 	.word	0x00025880
   115c0:	00025920 	.word	0x00025920
   115c4:	000296f5 	.word	0x000296f5

000115c8 <heartbeat_sub_set>:
}

static void heartbeat_sub_set(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
   115c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   115cc:	6985      	ldr	r5, [r0, #24]
{
   115ce:	4607      	mov	r7, r0
	u8_t sub_period;
	s32_t period_ms;

	BT_DBG("src 0x%04x", ctx->addr);

	sub_src = net_buf_simple_pull_le16(buf);
   115d0:	4610      	mov	r0, r2
{
   115d2:	4614      	mov	r4, r2
   115d4:	4688      	mov	r8, r1
	sub_src = net_buf_simple_pull_le16(buf);
   115d6:	f013 fbfe 	bl	24dd6 <net_buf_simple_pull_le16>
   115da:	4681      	mov	r9, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   115dc:	4620      	mov	r0, r4
   115de:	f013 fbfa 	bl	24dd6 <net_buf_simple_pull_le16>
   115e2:	4606      	mov	r6, r0
	sub_period = net_buf_simple_pull_u8(buf);
   115e4:	4620      	mov	r0, r4
   115e6:	f013 fbee 	bl	24dc6 <net_buf_simple_pull_u8>

	BT_DBG("sub_src 0x%04x sub_dst 0x%04x period 0x%02x",
	       sub_src, sub_dst, sub_period);

	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   115ea:	f419 4f00 	tst.w	r9, #32768	; 0x8000
	sub_period = net_buf_simple_pull_u8(buf);
   115ee:	4604      	mov	r4, r0
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   115f0:	d00f      	beq.n	11612 <heartbeat_sub_set+0x4a>
	    !BT_MESH_ADDR_IS_UNICAST(sub_src)) {
		BT_WARN("Prohibited source address");
   115f2:	2302      	movs	r3, #2
   115f4:	f04f 0100 	mov.w	r1, #0
   115f8:	f363 0107 	bfi	r1, r3, #0, #8
   115fc:	4a36      	ldr	r2, [pc, #216]	; (116d8 <heartbeat_sub_set+0x110>)
   115fe:	4b37      	ldr	r3, [pc, #220]	; (116dc <heartbeat_sub_set+0x114>)
   11600:	4837      	ldr	r0, [pc, #220]	; (116e0 <heartbeat_sub_set+0x118>)
   11602:	1a9b      	subs	r3, r3, r2
   11604:	08db      	lsrs	r3, r3, #3
   11606:	f363 118f 	bfi	r1, r3, #6, #10
	 * disabling subscription, but 0x00 for subsequent Get requests.
	 */
	if (!period_ms) {
		cfg->hb_sub.min_hops = 0;
	}
}
   1160a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Prohibited destination address");
   1160e:	f00f baf9 	b.w	20c04 <log_0>
	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
   11612:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
   11616:	b29b      	uxth	r3, r3
   11618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1161c:	d20c      	bcs.n	11638 <heartbeat_sub_set+0x70>
		BT_WARN("Prohibited destination address");
   1161e:	2302      	movs	r3, #2
   11620:	f04f 0100 	mov.w	r1, #0
   11624:	f363 0107 	bfi	r1, r3, #0, #8
   11628:	4a2b      	ldr	r2, [pc, #172]	; (116d8 <heartbeat_sub_set+0x110>)
   1162a:	4b2c      	ldr	r3, [pc, #176]	; (116dc <heartbeat_sub_set+0x114>)
   1162c:	482d      	ldr	r0, [pc, #180]	; (116e4 <heartbeat_sub_set+0x11c>)
   1162e:	1a9b      	subs	r3, r3, r2
   11630:	08db      	lsrs	r3, r3, #3
   11632:	f363 118f 	bfi	r1, r3, #6, #10
   11636:	e7e8      	b.n	1160a <heartbeat_sub_set+0x42>
	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
   11638:	f506 7380 	add.w	r3, r6, #256	; 0x100
   1163c:	b29b      	uxth	r3, r3
   1163e:	2bfb      	cmp	r3, #251	; 0xfb
   11640:	d9ed      	bls.n	1161e <heartbeat_sub_set+0x56>
   11642:	b233      	sxth	r3, r6
   11644:	2b00      	cmp	r3, #0
   11646:	dd03      	ble.n	11650 <heartbeat_sub_set+0x88>
	     sub_dst != bt_mesh_primary_addr())) {
   11648:	f7fd ff40 	bl	f4cc <bt_mesh_primary_addr>
	    (BT_MESH_ADDR_IS_UNICAST(sub_dst) &&
   1164c:	4286      	cmp	r6, r0
   1164e:	d1e6      	bne.n	1161e <heartbeat_sub_set+0x56>
	if (sub_period > 0x11) {
   11650:	2c11      	cmp	r4, #17
   11652:	d910      	bls.n	11676 <heartbeat_sub_set+0xae>
		BT_WARN("Prohibited subscription period 0x%02x", sub_period);
   11654:	2302      	movs	r3, #2
   11656:	f04f 0200 	mov.w	r2, #0
   1165a:	f363 0207 	bfi	r2, r3, #0, #8
   1165e:	491e      	ldr	r1, [pc, #120]	; (116d8 <heartbeat_sub_set+0x110>)
   11660:	4b1e      	ldr	r3, [pc, #120]	; (116dc <heartbeat_sub_set+0x114>)
   11662:	4821      	ldr	r0, [pc, #132]	; (116e8 <heartbeat_sub_set+0x120>)
   11664:	1a5b      	subs	r3, r3, r1
   11666:	08db      	lsrs	r3, r3, #3
   11668:	f363 128f 	bfi	r2, r3, #6, #10
   1166c:	4621      	mov	r1, r4
}
   1166e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Prohibited subscription period 0x%02x", sub_period);
   11672:	f00f bad4 	b.w	20c1e <log_1>
	if (sub_src == BT_MESH_ADDR_UNASSIGNED ||
   11676:	f1b9 0f00 	cmp.w	r9, #0
   1167a:	d00f      	beq.n	1169c <heartbeat_sub_set+0xd4>
   1167c:	b176      	cbz	r6, 1169c <heartbeat_sub_set+0xd4>
	    sub_dst == BT_MESH_ADDR_UNASSIGNED ||
   1167e:	b194      	cbz	r4, 116a6 <heartbeat_sub_set+0xde>
		cfg->hb_sub.count = 0;
   11680:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
		period_ms = hb_pwr2(sub_period, 1) * 1000;
   11684:	4620      	mov	r0, r4
		cfg->hb_sub.src = sub_src;
   11686:	f8a5 9040 	strh.w	r9, [r5, #64]	; 0x40
		cfg->hb_sub.dst = sub_dst;
   1168a:	f8a5 6042 	strh.w	r6, [r5, #66]	; 0x42
		cfg->hb_sub.count = 0;
   1168e:	646b      	str	r3, [r5, #68]	; 0x44
		period_ms = hb_pwr2(sub_period, 1) * 1000;
   11690:	f012 fb17 	bl	23cc2 <hb_pwr2.constprop.22>
   11694:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   11698:	4344      	muls	r4, r0
   1169a:	e004      	b.n	116a6 <heartbeat_sub_set+0xde>
			cfg->hb_sub.count = 0;
   1169c:	2400      	movs	r4, #0
   1169e:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
   116a2:	e9c5 4310 	strd	r4, r3, [r5, #64]	; 0x40
	bt_mesh_set_hb_sub_dst(cfg->hb_sub.dst);
   116a6:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
   116aa:	f7fc fdc3 	bl	e234 <bt_mesh_set_hb_sub_dst>
	if (period_ms) {
   116ae:	b17c      	cbz	r4, 116d0 <heartbeat_sub_set+0x108>
   116b0:	f013 ff2d 	bl	2550e <z_impl_k_uptime_get>
		cfg->hb_sub.expiry = k_uptime_get() + period_ms;
   116b4:	1902      	adds	r2, r0, r4
   116b6:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
		cfg->hb_sub.expiry = 0;
   116ba:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   116be:	4641      	mov	r1, r8
   116c0:	4638      	mov	r0, r7
   116c2:	f7ff ff01 	bl	114c8 <hb_sub_send_status.constprop.21>
	if (!period_ms) {
   116c6:	b90c      	cbnz	r4, 116cc <heartbeat_sub_set+0x104>
		cfg->hb_sub.min_hops = 0;
   116c8:	f885 4046 	strb.w	r4, [r5, #70]	; 0x46
}
   116cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg->hb_sub.expiry = 0;
   116d0:	2200      	movs	r2, #0
   116d2:	2300      	movs	r3, #0
   116d4:	e7f1      	b.n	116ba <heartbeat_sub_set+0xf2>
   116d6:	bf00      	nop
   116d8:	00025880 	.word	0x00025880
   116dc:	00025920 	.word	0x00025920
   116e0:	00029722 	.word	0x00029722
   116e4:	0002973c 	.word	0x0002973c
   116e8:	0002975b 	.word	0x0002975b

000116ec <bt_mesh_app_key_alloc>:
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
   116ec:	4808      	ldr	r0, [pc, #32]	; (11710 <bt_mesh_app_key_alloc+0x24>)
   116ee:	f8b0 2144 	ldrh.w	r2, [r0, #324]	; 0x144
   116f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   116f6:	429a      	cmp	r2, r3
   116f8:	d007      	beq.n	1170a <bt_mesh_app_key_alloc+0x1e>
   116fa:	f8b0 216c 	ldrh.w	r2, [r0, #364]	; 0x16c
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
   116fe:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   11702:	429a      	cmp	r2, r3
   11704:	bf18      	it	ne
   11706:	2000      	movne	r0, #0
   11708:	4770      	bx	lr
   1170a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
}
   1170e:	4770      	bx	lr
   11710:	20007060 	.word	0x20007060

00011714 <bt_mesh_app_key_del>:
{
   11714:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct unbind_data data = { .app_idx = key->app_idx, .store = store };
   11716:	8843      	ldrh	r3, [r0, #2]
   11718:	f88d 1006 	strb.w	r1, [sp, #6]
{
   1171c:	460d      	mov	r5, r1
   1171e:	4604      	mov	r4, r0
	bt_mesh_model_foreach(_mod_unbind, &data);
   11720:	a901      	add	r1, sp, #4
   11722:	480a      	ldr	r0, [pc, #40]	; (1174c <bt_mesh_app_key_del+0x38>)
	struct unbind_data data = { .app_idx = key->app_idx, .store = store };
   11724:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_mesh_model_foreach(_mod_unbind, &data);
   11728:	f7fd fda6 	bl	f278 <bt_mesh_model_foreach>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1172c:	b115      	cbz	r5, 11734 <bt_mesh_app_key_del+0x20>
		bt_mesh_clear_app_key(key);
   1172e:	4620      	mov	r0, r4
   11730:	f003 f82e 	bl	14790 <bt_mesh_clear_app_key>
	key->net_idx = BT_MESH_KEY_UNUSED;
   11734:	4620      	mov	r0, r4
   11736:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1173a:	f820 3b05 	strh.w	r3, [r0], #5
	(void)memset(key->keys, 0, sizeof(key->keys));
   1173e:	2222      	movs	r2, #34	; 0x22
   11740:	2100      	movs	r1, #0
   11742:	f010 fbca 	bl	21eda <memset>
}
   11746:	b003      	add	sp, #12
   11748:	bd30      	pop	{r4, r5, pc}
   1174a:	bf00      	nop
   1174c:	00023cdf 	.word	0x00023cdf

00011750 <app_key_del>:
{
   11750:	b570      	push	{r4, r5, r6, lr}
   11752:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   11754:	ab04      	add	r3, sp, #16
{
   11756:	4605      	mov	r5, r0
   11758:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1175a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1175e:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   11762:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   11764:	f10d 020e 	add.w	r2, sp, #14
   11768:	a903      	add	r1, sp, #12
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1176a:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1176c:	f012 f9ec 	bl	23b48 <key_idx_unpack>
	if (!bt_mesh_subnet_get(key_net_idx)) {
   11770:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   11774:	f7fa fa14 	bl	bba0 <bt_mesh_subnet_get>
   11778:	2800      	cmp	r0, #0
   1177a:	d036      	beq.n	117ea <app_key_del+0x9a>
	key = bt_mesh_app_key_find(key_app_idx);
   1177c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   11780:	f7fc fd66 	bl	e250 <bt_mesh_app_key_find>
	if (!key) {
   11784:	4604      	mov	r4, r0
   11786:	b140      	cbz	r0, 1179a <app_key_del+0x4a>
	if (key->net_idx != key_net_idx) {
   11788:	8802      	ldrh	r2, [r0, #0]
   1178a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1178e:	429a      	cmp	r2, r3
   11790:	d12d      	bne.n	117ee <app_key_del+0x9e>
	bt_mesh_app_key_del(key, true);
   11792:	2101      	movs	r1, #1
   11794:	f7ff ffbe 	bl	11714 <bt_mesh_app_key_del>
	status = STATUS_SUCCESS;
   11798:	2400      	movs	r4, #0
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1179a:	f248 0103 	movw	r1, #32771	; 0x8003
   1179e:	a807      	add	r0, sp, #28
   117a0:	f012 f945 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   117a4:	4621      	mov	r1, r4
   117a6:	a807      	add	r0, sp, #28
   117a8:	f013 fa9f 	bl	24cea <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   117ac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   117b0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   117b4:	a807      	add	r0, sp, #28
   117b6:	f012 f9b4 	bl	23b22 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   117ba:	2300      	movs	r3, #0
   117bc:	9300      	str	r3, [sp, #0]
   117be:	aa07      	add	r2, sp, #28
   117c0:	4631      	mov	r1, r6
   117c2:	4628      	mov	r0, r5
   117c4:	f012 f95c 	bl	23a80 <bt_mesh_model_send>
   117c8:	b168      	cbz	r0, 117e6 <app_key_del+0x96>
		BT_ERR("Unable to send App Key Status response");
   117ca:	2301      	movs	r3, #1
   117cc:	f04f 0100 	mov.w	r1, #0
   117d0:	f363 0107 	bfi	r1, r3, #0, #8
   117d4:	4a07      	ldr	r2, [pc, #28]	; (117f4 <app_key_del+0xa4>)
   117d6:	4b08      	ldr	r3, [pc, #32]	; (117f8 <app_key_del+0xa8>)
   117d8:	4808      	ldr	r0, [pc, #32]	; (117fc <app_key_del+0xac>)
   117da:	1a9b      	subs	r3, r3, r2
   117dc:	08db      	lsrs	r3, r3, #3
   117de:	f363 118f 	bfi	r1, r3, #6, #10
   117e2:	f00f fa0f 	bl	20c04 <log_0>
}
   117e6:	b00a      	add	sp, #40	; 0x28
   117e8:	bd70      	pop	{r4, r5, r6, pc}
		status = STATUS_INVALID_NETKEY;
   117ea:	2404      	movs	r4, #4
   117ec:	e7d5      	b.n	1179a <app_key_del+0x4a>
		status = STATUS_INVALID_BINDING;
   117ee:	2411      	movs	r4, #17
   117f0:	e7d3      	b.n	1179a <app_key_del+0x4a>
   117f2:	bf00      	nop
   117f4:	00025880 	.word	0x00025880
   117f8:	00025920 	.word	0x00025920
   117fc:	00029430 	.word	0x00029430

00011800 <bt_mesh_cfg_srv_init>:

	return true;
}

int bt_mesh_cfg_srv_init(struct bt_mesh_model *model, bool primary)
{
   11800:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   11802:	6984      	ldr	r4, [r0, #24]
{
   11804:	4605      	mov	r5, r0

	if (!cfg) {
   11806:	b984      	cbnz	r4, 1182a <bt_mesh_cfg_srv_init+0x2a>
		BT_ERR("No Configuration Server context provided");
   11808:	2301      	movs	r3, #1
   1180a:	f04f 0100 	mov.w	r1, #0
   1180e:	f363 0107 	bfi	r1, r3, #0, #8
   11812:	4a1b      	ldr	r2, [pc, #108]	; (11880 <bt_mesh_cfg_srv_init+0x80>)
   11814:	4b1b      	ldr	r3, [pc, #108]	; (11884 <bt_mesh_cfg_srv_init+0x84>)
   11816:	481c      	ldr	r0, [pc, #112]	; (11888 <bt_mesh_cfg_srv_init+0x88>)
   11818:	1a9b      	subs	r3, r3, r2
   1181a:	08db      	lsrs	r3, r3, #3
   1181c:	f363 118f 	bfi	r1, r3, #6, #10
		return -EINVAL;
	}

	if (!conf_is_valid(cfg)) {
		BT_ERR("Invalid values in configuration");
   11820:	f00f f9f0 	bl	20c04 <log_0>
		return -EINVAL;
   11824:	f06f 0015 	mvn.w	r0, #21
   11828:	e01c      	b.n	11864 <bt_mesh_cfg_srv_init+0x64>
	if (cfg->relay > 0x02) {
   1182a:	7963      	ldrb	r3, [r4, #5]
   1182c:	2b02      	cmp	r3, #2
   1182e:	d81a      	bhi.n	11866 <bt_mesh_cfg_srv_init+0x66>
	if (cfg->beacon > 0x01) {
   11830:	79e3      	ldrb	r3, [r4, #7]
   11832:	2b01      	cmp	r3, #1
   11834:	d817      	bhi.n	11866 <bt_mesh_cfg_srv_init+0x66>
	if (cfg->default_ttl > BT_MESH_TTL_MAX) {
   11836:	f994 300a 	ldrsb.w	r3, [r4, #10]
   1183a:	2b00      	cmp	r3, #0
   1183c:	db13      	blt.n	11866 <bt_mesh_cfg_srv_init+0x66>
	}

	/* Configuration Model security is device-key based */
	model->keys[0] = BT_MESH_KEY_DEV;
   1183e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   11842:	8183      	strh	r3, [r0, #12]

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		cfg->gatt_proxy = BT_MESH_GATT_PROXY_NOT_SUPPORTED;
	}

	k_delayed_work_init(&cfg->hb_pub.timer, hb_publish);
   11844:	4911      	ldr	r1, [pc, #68]	; (1188c <bt_mesh_cfg_srv_init+0x8c>)
   11846:	f104 000c 	add.w	r0, r4, #12
   1184a:	f013 fdfb 	bl	25444 <k_delayed_work_init>
	cfg->hb_pub.net_idx = BT_MESH_KEY_UNUSED;
   1184e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11852:	86a3      	strh	r3, [r4, #52]	; 0x34
	cfg->hb_sub.expiry = 0;
   11854:	2200      	movs	r2, #0
   11856:	2300      	movs	r3, #0
   11858:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38

	cfg->model = model;

	conf = cfg;
   1185c:	4b0c      	ldr	r3, [pc, #48]	; (11890 <bt_mesh_cfg_srv_init+0x90>)
	cfg->model = model;
   1185e:	6025      	str	r5, [r4, #0]
	conf = cfg;
   11860:	601c      	str	r4, [r3, #0]

	return 0;
   11862:	2000      	movs	r0, #0
}
   11864:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid values in configuration");
   11866:	2301      	movs	r3, #1
   11868:	f04f 0100 	mov.w	r1, #0
   1186c:	f363 0107 	bfi	r1, r3, #0, #8
   11870:	4a03      	ldr	r2, [pc, #12]	; (11880 <bt_mesh_cfg_srv_init+0x80>)
   11872:	4b04      	ldr	r3, [pc, #16]	; (11884 <bt_mesh_cfg_srv_init+0x84>)
   11874:	4807      	ldr	r0, [pc, #28]	; (11894 <bt_mesh_cfg_srv_init+0x94>)
   11876:	1a9b      	subs	r3, r3, r2
   11878:	08db      	lsrs	r3, r3, #3
   1187a:	f363 118f 	bfi	r1, r3, #6, #10
   1187e:	e7cf      	b.n	11820 <bt_mesh_cfg_srv_init+0x20>
   11880:	00025880 	.word	0x00025880
   11884:	00025920 	.word	0x00025920
   11888:	000294a7 	.word	0x000294a7
   1188c:	00011e1d 	.word	0x00011e1d
   11890:	20000d10 	.word	0x20000d10
   11894:	000294d0 	.word	0x000294d0

00011898 <bt_mesh_heartbeat>:

	(void)memset(labels, 0, sizeof(labels));
}

void bt_mesh_heartbeat(u16_t src, u16_t dst, u8_t hops, u16_t feat)
{
   11898:	b570      	push	{r4, r5, r6, lr}
   1189a:	461e      	mov	r6, r3
	struct bt_mesh_cfg_srv *cfg = conf;
   1189c:	4b2d      	ldr	r3, [pc, #180]	; (11954 <bt_mesh_heartbeat+0xbc>)
   1189e:	681c      	ldr	r4, [r3, #0]
{
   118a0:	4615      	mov	r5, r2

	if (!cfg) {
   118a2:	b97c      	cbnz	r4, 118c4 <bt_mesh_heartbeat+0x2c>
		BT_WARN("No configuaration server context available");
   118a4:	2302      	movs	r3, #2
   118a6:	f04f 0100 	mov.w	r1, #0
   118aa:	f363 0107 	bfi	r1, r3, #0, #8
   118ae:	4a2a      	ldr	r2, [pc, #168]	; (11958 <bt_mesh_heartbeat+0xc0>)
   118b0:	4b2a      	ldr	r3, [pc, #168]	; (1195c <bt_mesh_heartbeat+0xc4>)
   118b2:	482b      	ldr	r0, [pc, #172]	; (11960 <bt_mesh_heartbeat+0xc8>)
   118b4:	1a9b      	subs	r3, r3, r2
   118b6:	08db      	lsrs	r3, r3, #3
   118b8:	f363 118f 	bfi	r1, r3, #6, #10
	       cfg->hb_sub.count);

	if (cfg->hb_sub.func) {
		cfg->hb_sub.func(hops, feat);
	}
}
   118bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("No subscription for received heartbeat");
   118c0:	f00f b9a0 	b.w	20c04 <log_0>
	if (src != cfg->hb_sub.src || dst != cfg->hb_sub.dst) {
   118c4:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
   118c8:	4283      	cmp	r3, r0
   118ca:	d103      	bne.n	118d4 <bt_mesh_heartbeat+0x3c>
   118cc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   118d0:	428b      	cmp	r3, r1
   118d2:	d00c      	beq.n	118ee <bt_mesh_heartbeat+0x56>
		BT_WARN("No subscription for received heartbeat");
   118d4:	2302      	movs	r3, #2
   118d6:	f04f 0100 	mov.w	r1, #0
   118da:	f363 0107 	bfi	r1, r3, #0, #8
   118de:	4a1e      	ldr	r2, [pc, #120]	; (11958 <bt_mesh_heartbeat+0xc0>)
   118e0:	4b1e      	ldr	r3, [pc, #120]	; (1195c <bt_mesh_heartbeat+0xc4>)
   118e2:	4820      	ldr	r0, [pc, #128]	; (11964 <bt_mesh_heartbeat+0xcc>)
   118e4:	1a9b      	subs	r3, r3, r2
   118e6:	08db      	lsrs	r3, r3, #3
   118e8:	f363 118f 	bfi	r1, r3, #6, #10
   118ec:	e7e6      	b.n	118bc <bt_mesh_heartbeat+0x24>
   118ee:	f013 fe0e 	bl	2550e <z_impl_k_uptime_get>
	if (k_uptime_get() > cfg->hb_sub.expiry) {
   118f2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   118f6:	4282      	cmp	r2, r0
   118f8:	418b      	sbcs	r3, r1
   118fa:	da0c      	bge.n	11916 <bt_mesh_heartbeat+0x7e>
		BT_WARN("Heartbeat subscription period expired");
   118fc:	2302      	movs	r3, #2
   118fe:	f04f 0100 	mov.w	r1, #0
   11902:	f363 0107 	bfi	r1, r3, #0, #8
   11906:	4a14      	ldr	r2, [pc, #80]	; (11958 <bt_mesh_heartbeat+0xc0>)
   11908:	4b14      	ldr	r3, [pc, #80]	; (1195c <bt_mesh_heartbeat+0xc4>)
   1190a:	4817      	ldr	r0, [pc, #92]	; (11968 <bt_mesh_heartbeat+0xd0>)
   1190c:	1a9b      	subs	r3, r3, r2
   1190e:	08db      	lsrs	r3, r3, #3
   11910:	f363 118f 	bfi	r1, r3, #6, #10
   11914:	e7d2      	b.n	118bc <bt_mesh_heartbeat+0x24>
	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
   11916:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	if (cfg->hb_sub.count < 0xffff) {
   1191a:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
   1191e:	42aa      	cmp	r2, r5
   11920:	bf28      	it	cs
   11922:	462a      	movcs	r2, r5
   11924:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
   11928:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
	if (cfg->hb_sub.count < 0xffff) {
   1192c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
   11930:	42aa      	cmp	r2, r5
   11932:	bf38      	it	cc
   11934:	462a      	movcc	r2, r5
	if (cfg->hb_sub.count < 0xffff) {
   11936:	4299      	cmp	r1, r3
	if (cfg->hb_sub.func) {
   11938:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
   1193a:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
		cfg->hb_sub.count++;
   1193e:	bf1c      	itt	ne
   11940:	3101      	addne	r1, #1
   11942:	f8a4 1044 	strhne.w	r1, [r4, #68]	; 0x44
	if (cfg->hb_sub.func) {
   11946:	b123      	cbz	r3, 11952 <bt_mesh_heartbeat+0xba>
		cfg->hb_sub.func(hops, feat);
   11948:	4631      	mov	r1, r6
   1194a:	4628      	mov	r0, r5
}
   1194c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cfg->hb_sub.func(hops, feat);
   11950:	4718      	bx	r3
}
   11952:	bd70      	pop	{r4, r5, r6, pc}
   11954:	20000d10 	.word	0x20000d10
   11958:	00025880 	.word	0x00025880
   1195c:	00025920 	.word	0x00025920
   11960:	000294f0 	.word	0x000294f0
   11964:	0002951b 	.word	0x0002951b
   11968:	00029542 	.word	0x00029542

0001196c <bt_mesh_net_transmit_get>:

u8_t bt_mesh_net_transmit_get(void)
{
	if (conf) {
   1196c:	4b02      	ldr	r3, [pc, #8]	; (11978 <bt_mesh_net_transmit_get+0xc>)
   1196e:	6818      	ldr	r0, [r3, #0]
   11970:	b100      	cbz	r0, 11974 <bt_mesh_net_transmit_get+0x8>
		return conf->net_transmit;
   11972:	7900      	ldrb	r0, [r0, #4]
	}

	return 0;
}
   11974:	4770      	bx	lr
   11976:	bf00      	nop
   11978:	20000d10 	.word	0x20000d10

0001197c <net_transmit_set>:
{
   1197c:	b530      	push	{r4, r5, lr}
   1197e:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11980:	ab03      	add	r3, sp, #12
{
   11982:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11984:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   11988:	9305      	str	r3, [sp, #20]
   1198a:	e9cd 1306 	strd	r1, r3, [sp, #24]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1198e:	6983      	ldr	r3, [r0, #24]
{
   11990:	4604      	mov	r4, r0
	if (!cfg) {
   11992:	bb83      	cbnz	r3, 119f6 <net_transmit_set+0x7a>
		BT_WARN("No Configuration Server context available");
   11994:	2302      	movs	r3, #2
   11996:	f04f 0100 	mov.w	r1, #0
   1199a:	f363 0107 	bfi	r1, r3, #0, #8
   1199e:	4a19      	ldr	r2, [pc, #100]	; (11a04 <net_transmit_set+0x88>)
   119a0:	4b19      	ldr	r3, [pc, #100]	; (11a08 <net_transmit_set+0x8c>)
   119a2:	481a      	ldr	r0, [pc, #104]	; (11a0c <net_transmit_set+0x90>)
   119a4:	1a9b      	subs	r3, r3, r2
   119a6:	08db      	lsrs	r3, r3, #3
   119a8:	f363 118f 	bfi	r1, r3, #6, #10
   119ac:	f00f f92a 	bl	20c04 <log_0>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   119b0:	f248 0125 	movw	r1, #32805	; 0x8025
   119b4:	a805      	add	r0, sp, #20
   119b6:	f012 f83a 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   119ba:	f7ff ffd7 	bl	1196c <bt_mesh_net_transmit_get>
   119be:	4601      	mov	r1, r0
   119c0:	a805      	add	r0, sp, #20
   119c2:	f013 f992 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   119c6:	2300      	movs	r3, #0
   119c8:	9300      	str	r3, [sp, #0]
   119ca:	aa05      	add	r2, sp, #20
   119cc:	4629      	mov	r1, r5
   119ce:	4620      	mov	r0, r4
   119d0:	f012 f856 	bl	23a80 <bt_mesh_model_send>
   119d4:	b168      	cbz	r0, 119f2 <net_transmit_set+0x76>
		BT_ERR("Unable to send Network Transmit Status");
   119d6:	2301      	movs	r3, #1
   119d8:	f04f 0100 	mov.w	r1, #0
   119dc:	f363 0107 	bfi	r1, r3, #0, #8
   119e0:	4a08      	ldr	r2, [pc, #32]	; (11a04 <net_transmit_set+0x88>)
   119e2:	4b09      	ldr	r3, [pc, #36]	; (11a08 <net_transmit_set+0x8c>)
   119e4:	480a      	ldr	r0, [pc, #40]	; (11a10 <net_transmit_set+0x94>)
   119e6:	1a9b      	subs	r3, r3, r2
   119e8:	08db      	lsrs	r3, r3, #3
   119ea:	f363 118f 	bfi	r1, r3, #6, #10
   119ee:	f00f f909 	bl	20c04 <log_0>
}
   119f2:	b009      	add	sp, #36	; 0x24
   119f4:	bd30      	pop	{r4, r5, pc}
		cfg->net_transmit = buf->data[0];
   119f6:	6812      	ldr	r2, [r2, #0]
   119f8:	7812      	ldrb	r2, [r2, #0]
   119fa:	711a      	strb	r2, [r3, #4]
			bt_mesh_store_cfg();
   119fc:	f012 facf 	bl	23f9e <bt_mesh_store_cfg>
   11a00:	e7d6      	b.n	119b0 <net_transmit_set+0x34>
   11a02:	bf00      	nop
   11a04:	00025880 	.word	0x00025880
   11a08:	00025920 	.word	0x00025920
   11a0c:	0002998d 	.word	0x0002998d
   11a10:	000299b7 	.word	0x000299b7

00011a14 <net_transmit_get>:
{
   11a14:	b530      	push	{r4, r5, lr}
   11a16:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11a18:	ab03      	add	r3, sp, #12
   11a1a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   11a1e:	4604      	mov	r4, r0
   11a20:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   11a22:	a805      	add	r0, sp, #20
   11a24:	f248 0125 	movw	r1, #32805	; 0x8025
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11a28:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11a2c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   11a2e:	f011 fffe 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   11a32:	f7ff ff9b 	bl	1196c <bt_mesh_net_transmit_get>
   11a36:	4601      	mov	r1, r0
   11a38:	a805      	add	r0, sp, #20
   11a3a:	f013 f956 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11a3e:	2300      	movs	r3, #0
   11a40:	9300      	str	r3, [sp, #0]
   11a42:	aa05      	add	r2, sp, #20
   11a44:	4629      	mov	r1, r5
   11a46:	4620      	mov	r0, r4
   11a48:	f012 f81a 	bl	23a80 <bt_mesh_model_send>
   11a4c:	b168      	cbz	r0, 11a6a <net_transmit_get+0x56>
		BT_ERR("Unable to send Config Network Transmit Status");
   11a4e:	2301      	movs	r3, #1
   11a50:	f04f 0100 	mov.w	r1, #0
   11a54:	f363 0107 	bfi	r1, r3, #0, #8
   11a58:	4a05      	ldr	r2, [pc, #20]	; (11a70 <net_transmit_get+0x5c>)
   11a5a:	4b06      	ldr	r3, [pc, #24]	; (11a74 <net_transmit_get+0x60>)
   11a5c:	4806      	ldr	r0, [pc, #24]	; (11a78 <net_transmit_get+0x64>)
   11a5e:	1a9b      	subs	r3, r3, r2
   11a60:	08db      	lsrs	r3, r3, #3
   11a62:	f363 118f 	bfi	r1, r3, #6, #10
   11a66:	f00f f8cd 	bl	20c04 <log_0>
}
   11a6a:	b009      	add	sp, #36	; 0x24
   11a6c:	bd30      	pop	{r4, r5, pc}
   11a6e:	bf00      	nop
   11a70:	00025880 	.word	0x00025880
   11a74:	00025920 	.word	0x00025920
   11a78:	0002995f 	.word	0x0002995f

00011a7c <bt_mesh_relay_get>:

u8_t bt_mesh_relay_get(void)
{
	if (conf) {
   11a7c:	4b03      	ldr	r3, [pc, #12]	; (11a8c <bt_mesh_relay_get+0x10>)
   11a7e:	681b      	ldr	r3, [r3, #0]
   11a80:	b10b      	cbz	r3, 11a86 <bt_mesh_relay_get+0xa>
		return conf->relay;
   11a82:	7958      	ldrb	r0, [r3, #5]
   11a84:	4770      	bx	lr
	}

	return BT_MESH_RELAY_NOT_SUPPORTED;
   11a86:	2002      	movs	r0, #2
}
   11a88:	4770      	bx	lr
   11a8a:	bf00      	nop
   11a8c:	20000d10 	.word	0x20000d10

00011a90 <bt_mesh_friend_get>:

u8_t bt_mesh_friend_get(void)
{
	BT_DBG("conf %p conf->frnd 0x%02x", conf, conf->frnd);

	if (conf) {
   11a90:	4b03      	ldr	r3, [pc, #12]	; (11aa0 <bt_mesh_friend_get+0x10>)
   11a92:	681b      	ldr	r3, [r3, #0]
   11a94:	b10b      	cbz	r3, 11a9a <bt_mesh_friend_get+0xa>
		return conf->frnd;
   11a96:	7a58      	ldrb	r0, [r3, #9]
   11a98:	4770      	bx	lr
	}

	return BT_MESH_FRIEND_NOT_SUPPORTED;
   11a9a:	2002      	movs	r0, #2
}
   11a9c:	4770      	bx	lr
   11a9e:	bf00      	nop
   11aa0:	20000d10 	.word	0x20000d10

00011aa4 <bt_mesh_relay_retransmit_get>:

u8_t bt_mesh_relay_retransmit_get(void)
{
	if (conf) {
   11aa4:	4b02      	ldr	r3, [pc, #8]	; (11ab0 <bt_mesh_relay_retransmit_get+0xc>)
   11aa6:	6818      	ldr	r0, [r3, #0]
   11aa8:	b100      	cbz	r0, 11aac <bt_mesh_relay_retransmit_get+0x8>
		return conf->relay_retransmit;
   11aaa:	7980      	ldrb	r0, [r0, #6]
	}

	return 0;
}
   11aac:	4770      	bx	lr
   11aae:	bf00      	nop
   11ab0:	20000d10 	.word	0x20000d10

00011ab4 <relay_get>:
{
   11ab4:	b530      	push	{r4, r5, lr}
   11ab6:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   11ab8:	ab03      	add	r3, sp, #12
   11aba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   11abe:	4604      	mov	r4, r0
   11ac0:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   11ac2:	a805      	add	r0, sp, #20
   11ac4:	f248 0128 	movw	r1, #32808	; 0x8028
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   11ac8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11acc:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   11ace:	f011 ffae 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   11ad2:	f7ff ffd3 	bl	11a7c <bt_mesh_relay_get>
   11ad6:	4601      	mov	r1, r0
   11ad8:	a805      	add	r0, sp, #20
   11ada:	f013 f906 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   11ade:	f7ff ffe1 	bl	11aa4 <bt_mesh_relay_retransmit_get>
   11ae2:	4601      	mov	r1, r0
   11ae4:	a805      	add	r0, sp, #20
   11ae6:	f013 f900 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11aea:	2300      	movs	r3, #0
   11aec:	9300      	str	r3, [sp, #0]
   11aee:	aa05      	add	r2, sp, #20
   11af0:	4629      	mov	r1, r5
   11af2:	4620      	mov	r0, r4
   11af4:	f011 ffc4 	bl	23a80 <bt_mesh_model_send>
   11af8:	b168      	cbz	r0, 11b16 <relay_get+0x62>
		BT_ERR("Unable to send Config Relay Status response");
   11afa:	2301      	movs	r3, #1
   11afc:	f04f 0100 	mov.w	r1, #0
   11b00:	f363 0107 	bfi	r1, r3, #0, #8
   11b04:	4a05      	ldr	r2, [pc, #20]	; (11b1c <relay_get+0x68>)
   11b06:	4b06      	ldr	r3, [pc, #24]	; (11b20 <relay_get+0x6c>)
   11b08:	4806      	ldr	r0, [pc, #24]	; (11b24 <relay_get+0x70>)
   11b0a:	1a9b      	subs	r3, r3, r2
   11b0c:	08db      	lsrs	r3, r3, #3
   11b0e:	f363 118f 	bfi	r1, r3, #6, #10
   11b12:	f00f f877 	bl	20c04 <log_0>
}
   11b16:	b009      	add	sp, #36	; 0x24
   11b18:	bd30      	pop	{r4, r5, pc}
   11b1a:	bf00      	nop
   11b1c:	00025880 	.word	0x00025880
   11b20:	00025920 	.word	0x00025920
   11b24:	00029a5b 	.word	0x00029a5b

00011b28 <bt_mesh_beacon_get>:

u8_t bt_mesh_beacon_get(void)
{
	if (conf) {
   11b28:	4b02      	ldr	r3, [pc, #8]	; (11b34 <bt_mesh_beacon_get+0xc>)
   11b2a:	6818      	ldr	r0, [r3, #0]
   11b2c:	b100      	cbz	r0, 11b30 <bt_mesh_beacon_get+0x8>
		return conf->beacon;
   11b2e:	79c0      	ldrb	r0, [r0, #7]
	}

	return BT_MESH_BEACON_DISABLED;
}
   11b30:	4770      	bx	lr
   11b32:	bf00      	nop
   11b34:	20000d10 	.word	0x20000d10

00011b38 <beacon_set>:
{
   11b38:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   11b3a:	6984      	ldr	r4, [r0, #24]
{
   11b3c:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11b3e:	ab03      	add	r3, sp, #12
{
   11b40:	460e      	mov	r6, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11b42:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
{
   11b46:	4605      	mov	r5, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11b48:	9305      	str	r3, [sp, #20]
   11b4a:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (!cfg) {
   11b4e:	bb7c      	cbnz	r4, 11bb0 <beacon_set+0x78>
		BT_WARN("No Configuration Server context available");
   11b50:	2302      	movs	r3, #2
   11b52:	f04f 0100 	mov.w	r1, #0
   11b56:	f363 0107 	bfi	r1, r3, #0, #8
   11b5a:	4a26      	ldr	r2, [pc, #152]	; (11bf4 <beacon_set+0xbc>)
   11b5c:	4b26      	ldr	r3, [pc, #152]	; (11bf8 <beacon_set+0xc0>)
   11b5e:	4827      	ldr	r0, [pc, #156]	; (11bfc <beacon_set+0xc4>)
   11b60:	1a9b      	subs	r3, r3, r2
   11b62:	08db      	lsrs	r3, r3, #3
   11b64:	f363 118f 	bfi	r1, r3, #6, #10
   11b68:	f00f f84c 	bl	20c04 <log_0>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   11b6c:	f248 010b 	movw	r1, #32779	; 0x800b
   11b70:	a805      	add	r0, sp, #20
   11b72:	f011 ff5c 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   11b76:	f7ff ffd7 	bl	11b28 <bt_mesh_beacon_get>
   11b7a:	4601      	mov	r1, r0
   11b7c:	a805      	add	r0, sp, #20
   11b7e:	f013 f8b4 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11b82:	2300      	movs	r3, #0
   11b84:	9300      	str	r3, [sp, #0]
   11b86:	aa05      	add	r2, sp, #20
   11b88:	4631      	mov	r1, r6
   11b8a:	4628      	mov	r0, r5
   11b8c:	f011 ff78 	bl	23a80 <bt_mesh_model_send>
   11b90:	b370      	cbz	r0, 11bf0 <beacon_set+0xb8>
		BT_ERR("Unable to send Config Beacon Status response");
   11b92:	2301      	movs	r3, #1
   11b94:	f04f 0100 	mov.w	r1, #0
   11b98:	f363 0107 	bfi	r1, r3, #0, #8
   11b9c:	4a15      	ldr	r2, [pc, #84]	; (11bf4 <beacon_set+0xbc>)
   11b9e:	4b16      	ldr	r3, [pc, #88]	; (11bf8 <beacon_set+0xc0>)
   11ba0:	4817      	ldr	r0, [pc, #92]	; (11c00 <beacon_set+0xc8>)
   11ba2:	1a9b      	subs	r3, r3, r2
   11ba4:	08db      	lsrs	r3, r3, #3
   11ba6:	f363 118f 	bfi	r1, r3, #6, #10
   11baa:	f00f f82b 	bl	20c04 <log_0>
   11bae:	e01f      	b.n	11bf0 <beacon_set+0xb8>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   11bb0:	6813      	ldr	r3, [r2, #0]
   11bb2:	7819      	ldrb	r1, [r3, #0]
   11bb4:	2901      	cmp	r1, #1
   11bb6:	d80d      	bhi.n	11bd4 <beacon_set+0x9c>
		if (buf->data[0] != cfg->beacon) {
   11bb8:	79e3      	ldrb	r3, [r4, #7]
   11bba:	428b      	cmp	r3, r1
   11bbc:	d0d6      	beq.n	11b6c <beacon_set+0x34>
			cfg->beacon = buf->data[0];
   11bbe:	71e1      	strb	r1, [r4, #7]
				bt_mesh_store_cfg();
   11bc0:	f012 f9ed 	bl	23f9e <bt_mesh_store_cfg>
			if (cfg->beacon) {
   11bc4:	79e3      	ldrb	r3, [r4, #7]
   11bc6:	b113      	cbz	r3, 11bce <beacon_set+0x96>
				bt_mesh_beacon_enable();
   11bc8:	f7f9 fe64 	bl	b894 <bt_mesh_beacon_enable>
   11bcc:	e7ce      	b.n	11b6c <beacon_set+0x34>
				bt_mesh_beacon_disable();
   11bce:	f7f9 fe87 	bl	b8e0 <bt_mesh_beacon_disable>
   11bd2:	e7cb      	b.n	11b6c <beacon_set+0x34>
		BT_WARN("Invalid Config Beacon value 0x%02x", buf->data[0]);
   11bd4:	2302      	movs	r3, #2
   11bd6:	f04f 0200 	mov.w	r2, #0
   11bda:	f363 0207 	bfi	r2, r3, #0, #8
   11bde:	4805      	ldr	r0, [pc, #20]	; (11bf4 <beacon_set+0xbc>)
   11be0:	4b05      	ldr	r3, [pc, #20]	; (11bf8 <beacon_set+0xc0>)
   11be2:	1a1b      	subs	r3, r3, r0
   11be4:	08db      	lsrs	r3, r3, #3
   11be6:	f363 128f 	bfi	r2, r3, #6, #10
   11bea:	4806      	ldr	r0, [pc, #24]	; (11c04 <beacon_set+0xcc>)
   11bec:	f00f f817 	bl	20c1e <log_1>
}
   11bf0:	b008      	add	sp, #32
   11bf2:	bd70      	pop	{r4, r5, r6, pc}
   11bf4:	00025880 	.word	0x00025880
   11bf8:	00025920 	.word	0x00025920
   11bfc:	0002998d 	.word	0x0002998d
   11c00:	0002947a 	.word	0x0002947a
   11c04:	00029457 	.word	0x00029457

00011c08 <beacon_get>:
{
   11c08:	b530      	push	{r4, r5, lr}
   11c0a:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11c0c:	ab03      	add	r3, sp, #12
   11c0e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   11c12:	4604      	mov	r4, r0
   11c14:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   11c16:	a805      	add	r0, sp, #20
   11c18:	f248 010b 	movw	r1, #32779	; 0x800b
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11c1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11c20:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   11c22:	f011 ff04 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   11c26:	f7ff ff7f 	bl	11b28 <bt_mesh_beacon_get>
   11c2a:	4601      	mov	r1, r0
   11c2c:	a805      	add	r0, sp, #20
   11c2e:	f013 f85c 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11c32:	2300      	movs	r3, #0
   11c34:	9300      	str	r3, [sp, #0]
   11c36:	aa05      	add	r2, sp, #20
   11c38:	4629      	mov	r1, r5
   11c3a:	4620      	mov	r0, r4
   11c3c:	f011 ff20 	bl	23a80 <bt_mesh_model_send>
   11c40:	b168      	cbz	r0, 11c5e <beacon_get+0x56>
		BT_ERR("Unable to send Config Beacon Status response");
   11c42:	2301      	movs	r3, #1
   11c44:	f04f 0100 	mov.w	r1, #0
   11c48:	f363 0107 	bfi	r1, r3, #0, #8
   11c4c:	4a05      	ldr	r2, [pc, #20]	; (11c64 <beacon_get+0x5c>)
   11c4e:	4b06      	ldr	r3, [pc, #24]	; (11c68 <beacon_get+0x60>)
   11c50:	4806      	ldr	r0, [pc, #24]	; (11c6c <beacon_get+0x64>)
   11c52:	1a9b      	subs	r3, r3, r2
   11c54:	08db      	lsrs	r3, r3, #3
   11c56:	f363 118f 	bfi	r1, r3, #6, #10
   11c5a:	f00e ffd3 	bl	20c04 <log_0>
}
   11c5e:	b009      	add	sp, #36	; 0x24
   11c60:	bd30      	pop	{r4, r5, pc}
   11c62:	bf00      	nop
   11c64:	00025880 	.word	0x00025880
   11c68:	00025920 	.word	0x00025920
   11c6c:	0002947a 	.word	0x0002947a

00011c70 <bt_mesh_gatt_proxy_get>:

u8_t bt_mesh_gatt_proxy_get(void)
{
	if (conf) {
   11c70:	4b03      	ldr	r3, [pc, #12]	; (11c80 <bt_mesh_gatt_proxy_get+0x10>)
   11c72:	681b      	ldr	r3, [r3, #0]
   11c74:	b10b      	cbz	r3, 11c7a <bt_mesh_gatt_proxy_get+0xa>
		return conf->gatt_proxy;
   11c76:	7a18      	ldrb	r0, [r3, #8]
   11c78:	4770      	bx	lr
	}

	return BT_MESH_GATT_PROXY_NOT_SUPPORTED;
   11c7a:	2002      	movs	r0, #2
}
   11c7c:	4770      	bx	lr
   11c7e:	bf00      	nop
   11c80:	20000d10 	.word	0x20000d10

00011c84 <friend_set>:
{
   11c84:	b570      	push	{r4, r5, r6, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11c86:	6813      	ldr	r3, [r2, #0]
{
   11c88:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11c8a:	7819      	ldrb	r1, [r3, #0]
   11c8c:	2901      	cmp	r1, #1
{
   11c8e:	4605      	mov	r5, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11c90:	d90f      	bls.n	11cb2 <friend_set+0x2e>
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   11c92:	2302      	movs	r3, #2
   11c94:	f04f 0200 	mov.w	r2, #0
   11c98:	f363 0207 	bfi	r2, r3, #0, #8
   11c9c:	481c      	ldr	r0, [pc, #112]	; (11d10 <friend_set+0x8c>)
   11c9e:	4b1d      	ldr	r3, [pc, #116]	; (11d14 <friend_set+0x90>)
   11ca0:	1a1b      	subs	r3, r3, r0
   11ca2:	08db      	lsrs	r3, r3, #3
   11ca4:	f363 128f 	bfi	r2, r3, #6, #10
   11ca8:	481b      	ldr	r0, [pc, #108]	; (11d18 <friend_set+0x94>)
}
   11caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   11cae:	f00e bfb6 	b.w	20c1e <log_1>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   11cb2:	6984      	ldr	r4, [r0, #24]
	if (!cfg) {
   11cb4:	b99c      	cbnz	r4, 11cde <friend_set+0x5a>
		BT_WARN("No Configuration Server context available");
   11cb6:	2302      	movs	r3, #2
   11cb8:	f04f 0100 	mov.w	r1, #0
   11cbc:	f363 0107 	bfi	r1, r3, #0, #8
   11cc0:	4a13      	ldr	r2, [pc, #76]	; (11d10 <friend_set+0x8c>)
   11cc2:	4b14      	ldr	r3, [pc, #80]	; (11d14 <friend_set+0x90>)
   11cc4:	4815      	ldr	r0, [pc, #84]	; (11d1c <friend_set+0x98>)
   11cc6:	1a9b      	subs	r3, r3, r2
   11cc8:	08db      	lsrs	r3, r3, #3
   11cca:	f363 118f 	bfi	r1, r3, #6, #10
   11cce:	f00e ff99 	bl	20c04 <log_0>
	send_friend_status(model, ctx);
   11cd2:	4631      	mov	r1, r6
   11cd4:	4628      	mov	r0, r5
}
   11cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_friend_status(model, ctx);
   11cda:	f7fe bb41 	b.w	10360 <send_friend_status>
	if (cfg->frnd == buf->data[0]) {
   11cde:	7a63      	ldrb	r3, [r4, #9]
   11ce0:	428b      	cmp	r3, r1
   11ce2:	d0f6      	beq.n	11cd2 <friend_set+0x4e>
		cfg->frnd = buf->data[0];
   11ce4:	7261      	strb	r1, [r4, #9]
			bt_mesh_store_cfg();
   11ce6:	f012 f95a 	bl	23f9e <bt_mesh_store_cfg>
		if (cfg->frnd == BT_MESH_FRIEND_DISABLED) {
   11cea:	7a63      	ldrb	r3, [r4, #9]
   11cec:	b91b      	cbnz	r3, 11cf6 <friend_set+0x72>
			bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
   11cee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   11cf2:	f003 fb41 	bl	15378 <bt_mesh_friend_clear_net_idx>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   11cf6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
   11cf8:	f7f9 ff52 	bl	bba0 <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_FRIEND) && sub) {
   11cfc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   11cfe:	075b      	lsls	r3, r3, #29
   11d00:	d5e7      	bpl.n	11cd2 <friend_set+0x4e>
   11d02:	2800      	cmp	r0, #0
   11d04:	d0e5      	beq.n	11cd2 <friend_set+0x4e>
		hb_send(model);
   11d06:	4628      	mov	r0, r5
   11d08:	f011 fffb 	bl	23d02 <hb_send>
   11d0c:	e7e1      	b.n	11cd2 <friend_set+0x4e>
   11d0e:	bf00      	nop
   11d10:	00025880 	.word	0x00025880
   11d14:	00025920 	.word	0x00025920
   11d18:	0002966b 	.word	0x0002966b
   11d1c:	0002998d 	.word	0x0002998d

00011d20 <relay_set>:
{
   11d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   11d22:	6984      	ldr	r4, [r0, #24]
{
   11d24:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   11d26:	ab03      	add	r3, sp, #12
{
   11d28:	460f      	mov	r7, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   11d2a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
{
   11d2e:	4606      	mov	r6, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   11d30:	9305      	str	r3, [sp, #20]
   11d32:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (!cfg) {
   11d36:	2c00      	cmp	r4, #0
   11d38:	d136      	bne.n	11da8 <relay_set+0x88>
		BT_WARN("No Configuration Server context available");
   11d3a:	2302      	movs	r3, #2
   11d3c:	f04f 0100 	mov.w	r1, #0
   11d40:	f363 0107 	bfi	r1, r3, #0, #8
   11d44:	4a30      	ldr	r2, [pc, #192]	; (11e08 <relay_set+0xe8>)
   11d46:	4b31      	ldr	r3, [pc, #196]	; (11e0c <relay_set+0xec>)
   11d48:	4831      	ldr	r0, [pc, #196]	; (11e10 <relay_set+0xf0>)
   11d4a:	1a9b      	subs	r3, r3, r2
   11d4c:	08db      	lsrs	r3, r3, #3
   11d4e:	f363 118f 	bfi	r1, r3, #6, #10
   11d52:	f00e ff57 	bl	20c04 <log_0>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   11d56:	f248 0128 	movw	r1, #32808	; 0x8028
   11d5a:	a805      	add	r0, sp, #20
   11d5c:	f011 fe67 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   11d60:	f7ff fe8c 	bl	11a7c <bt_mesh_relay_get>
   11d64:	4601      	mov	r1, r0
   11d66:	a805      	add	r0, sp, #20
   11d68:	f012 ffbf 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   11d6c:	f7ff fe9a 	bl	11aa4 <bt_mesh_relay_retransmit_get>
   11d70:	4601      	mov	r1, r0
   11d72:	a805      	add	r0, sp, #20
   11d74:	f012 ffb9 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11d78:	2300      	movs	r3, #0
   11d7a:	9300      	str	r3, [sp, #0]
   11d7c:	aa05      	add	r2, sp, #20
   11d7e:	4639      	mov	r1, r7
   11d80:	4630      	mov	r0, r6
   11d82:	f011 fe7d 	bl	23a80 <bt_mesh_model_send>
   11d86:	2800      	cmp	r0, #0
   11d88:	d03b      	beq.n	11e02 <relay_set+0xe2>
		BT_ERR("Unable to send Relay Status response");
   11d8a:	2301      	movs	r3, #1
   11d8c:	f04f 0100 	mov.w	r1, #0
   11d90:	f363 0107 	bfi	r1, r3, #0, #8
   11d94:	4a1c      	ldr	r2, [pc, #112]	; (11e08 <relay_set+0xe8>)
   11d96:	4b1d      	ldr	r3, [pc, #116]	; (11e0c <relay_set+0xec>)
   11d98:	481e      	ldr	r0, [pc, #120]	; (11e14 <relay_set+0xf4>)
   11d9a:	1a9b      	subs	r3, r3, r2
   11d9c:	08db      	lsrs	r3, r3, #3
   11d9e:	f363 118f 	bfi	r1, r3, #6, #10
   11da2:	f00e ff2f 	bl	20c04 <log_0>
   11da6:	e02c      	b.n	11e02 <relay_set+0xe2>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   11da8:	6813      	ldr	r3, [r2, #0]
   11daa:	7819      	ldrb	r1, [r3, #0]
   11dac:	2901      	cmp	r1, #1
   11dae:	d81a      	bhi.n	11de6 <relay_set+0xc6>
		if (cfg->relay == BT_MESH_RELAY_NOT_SUPPORTED) {
   11db0:	7965      	ldrb	r5, [r4, #5]
   11db2:	2d02      	cmp	r5, #2
   11db4:	d015      	beq.n	11de2 <relay_set+0xc2>
			cfg->relay = buf->data[0];
   11db6:	7161      	strb	r1, [r4, #5]
			cfg->relay_retransmit = buf->data[1];
   11db8:	785b      	ldrb	r3, [r3, #1]
   11dba:	71a3      	strb	r3, [r4, #6]
			change = (cfg->relay != buf->data[0]);
   11dbc:	1b4d      	subs	r5, r1, r5
   11dbe:	bf18      	it	ne
   11dc0:	2501      	movne	r5, #1
				bt_mesh_store_cfg();
   11dc2:	f012 f8ec 	bl	23f9e <bt_mesh_store_cfg>
		sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   11dc6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
   11dc8:	f7f9 feea 	bl	bba0 <bt_mesh_subnet_get>
		if ((cfg->hb_pub.feat & BT_MESH_FEAT_RELAY) && sub && change) {
   11dcc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   11dce:	07db      	lsls	r3, r3, #31
   11dd0:	d5c1      	bpl.n	11d56 <relay_set+0x36>
   11dd2:	2800      	cmp	r0, #0
   11dd4:	d0bf      	beq.n	11d56 <relay_set+0x36>
   11dd6:	2d00      	cmp	r5, #0
   11dd8:	d0bd      	beq.n	11d56 <relay_set+0x36>
			hb_send(model);
   11dda:	4630      	mov	r0, r6
   11ddc:	f011 ff91 	bl	23d02 <hb_send>
   11de0:	e7b9      	b.n	11d56 <relay_set+0x36>
			change = false;
   11de2:	2500      	movs	r5, #0
   11de4:	e7ef      	b.n	11dc6 <relay_set+0xa6>
		BT_WARN("Invalid Relay value 0x%02x", buf->data[0]);
   11de6:	2302      	movs	r3, #2
   11de8:	f04f 0200 	mov.w	r2, #0
   11dec:	f363 0207 	bfi	r2, r3, #0, #8
   11df0:	4805      	ldr	r0, [pc, #20]	; (11e08 <relay_set+0xe8>)
   11df2:	4b06      	ldr	r3, [pc, #24]	; (11e0c <relay_set+0xec>)
   11df4:	1a1b      	subs	r3, r3, r0
   11df6:	08db      	lsrs	r3, r3, #3
   11df8:	f363 128f 	bfi	r2, r3, #6, #10
   11dfc:	4806      	ldr	r0, [pc, #24]	; (11e18 <relay_set+0xf8>)
   11dfe:	f00e ff0e 	bl	20c1e <log_1>
}
   11e02:	b009      	add	sp, #36	; 0x24
   11e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e06:	bf00      	nop
   11e08:	00025880 	.word	0x00025880
   11e0c:	00025920 	.word	0x00025920
   11e10:	0002998d 	.word	0x0002998d
   11e14:	00029aa2 	.word	0x00029aa2
   11e18:	00029a87 	.word	0x00029a87

00011e1c <hb_publish>:
{
   11e1c:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_model *model = cfg->model;
   11e1e:	f850 6c0c 	ldr.w	r6, [r0, #-12]
{
   11e22:	4604      	mov	r4, r0
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   11e24:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   11e26:	f7f9 febb 	bl	bba0 <bt_mesh_subnet_get>
	if (!sub) {
   11e2a:	4605      	mov	r5, r0
   11e2c:	b980      	cbnz	r0, 11e50 <hb_publish+0x34>
		BT_ERR("No matching subnet for idx 0x%02x",
   11e2e:	2301      	movs	r3, #1
   11e30:	f04f 0200 	mov.w	r2, #0
   11e34:	f363 0207 	bfi	r2, r3, #0, #8
   11e38:	4915      	ldr	r1, [pc, #84]	; (11e90 <hb_publish+0x74>)
   11e3a:	4b16      	ldr	r3, [pc, #88]	; (11e94 <hb_publish+0x78>)
   11e3c:	4816      	ldr	r0, [pc, #88]	; (11e98 <hb_publish+0x7c>)
   11e3e:	1a5b      	subs	r3, r3, r1
   11e40:	08db      	lsrs	r3, r3, #3
   11e42:	f363 128f 	bfi	r2, r3, #6, #10
   11e46:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   11e48:	f00e fee9 	bl	20c1e <log_1>
		cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
   11e4c:	8425      	strh	r5, [r4, #32]
}
   11e4e:	bd70      	pop	{r4, r5, r6, pc}
	if (cfg->hb_pub.count == 0) {
   11e50:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   11e52:	2900      	cmp	r1, #0
   11e54:	d0fb      	beq.n	11e4e <hb_publish+0x32>
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000;
   11e56:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   11e5a:	f011 ff32 	bl	23cc2 <hb_pwr2.constprop.22>
   11e5e:	ebc0 1240 	rsb	r2, r0, r0, lsl #5
   11e62:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   11e66:	00d2      	lsls	r2, r2, #3
   11e68:	b292      	uxth	r2, r2
	if (period_ms && cfg->hb_pub.count > 1) {
   11e6a:	b12a      	cbz	r2, 11e78 <hb_publish+0x5c>
   11e6c:	2901      	cmp	r1, #1
   11e6e:	d903      	bls.n	11e78 <hb_publish+0x5c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11e70:	4621      	mov	r1, r4
   11e72:	480a      	ldr	r0, [pc, #40]	; (11e9c <hb_publish+0x80>)
   11e74:	f00c ff9c 	bl	1edb0 <k_delayed_work_submit_to_queue>
	hb_send(model);
   11e78:	4630      	mov	r0, r6
   11e7a:	f011 ff42 	bl	23d02 <hb_send>
	if (cfg->hb_pub.count != 0xffff) {
   11e7e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   11e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11e84:	4293      	cmp	r3, r2
		cfg->hb_pub.count--;
   11e86:	bf1c      	itt	ne
   11e88:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
   11e8c:	8463      	strhne	r3, [r4, #34]	; 0x22
   11e8e:	e7de      	b.n	11e4e <hb_publish+0x32>
   11e90:	00025880 	.word	0x00025880
   11e94:	00025920 	.word	0x00025920
   11e98:	000296d3 	.word	0x000296d3
   11e9c:	20001d2c 	.word	0x20001d2c

00011ea0 <node_identity_set>:
{
   11ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ea4:	4615      	mov	r5, r2
   11ea6:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   11ea8:	ab02      	add	r3, sp, #8
   11eaa:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
{
   11eae:	4607      	mov	r7, r0
	idx = net_buf_simple_pull_le16(buf);
   11eb0:	4628      	mov	r0, r5
{
   11eb2:	4688      	mov	r8, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   11eb4:	9305      	str	r3, [sp, #20]
   11eb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
	idx = net_buf_simple_pull_le16(buf);
   11eba:	f012 ff8c 	bl	24dd6 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   11ebe:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   11ec2:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   11ec4:	d311      	bcc.n	11eea <node_identity_set+0x4a>
		BT_WARN("Invalid NetKeyIndex 0x%04x", idx);
   11ec6:	2302      	movs	r3, #2
   11ec8:	f04f 0200 	mov.w	r2, #0
   11ecc:	f363 0207 	bfi	r2, r3, #0, #8
   11ed0:	4933      	ldr	r1, [pc, #204]	; (11fa0 <node_identity_set+0x100>)
   11ed2:	4b34      	ldr	r3, [pc, #208]	; (11fa4 <node_identity_set+0x104>)
   11ed4:	1a5b      	subs	r3, r3, r1
   11ed6:	08db      	lsrs	r3, r3, #3
   11ed8:	4601      	mov	r1, r0
   11eda:	4833      	ldr	r0, [pc, #204]	; (11fa8 <node_identity_set+0x108>)
   11edc:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   11ee0:	f00e fe9d 	bl	20c1e <log_1>
}
   11ee4:	b008      	add	sp, #32
   11ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node_id = net_buf_simple_pull_u8(buf);
   11eea:	4628      	mov	r0, r5
   11eec:	f012 ff6b 	bl	24dc6 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   11ef0:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   11ef2:	4606      	mov	r6, r0
	if (node_id != 0x00 && node_id != 0x01) {
   11ef4:	d90d      	bls.n	11f12 <node_identity_set+0x72>
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   11ef6:	2302      	movs	r3, #2
   11ef8:	f04f 0200 	mov.w	r2, #0
   11efc:	f363 0207 	bfi	r2, r3, #0, #8
   11f00:	4927      	ldr	r1, [pc, #156]	; (11fa0 <node_identity_set+0x100>)
   11f02:	4b28      	ldr	r3, [pc, #160]	; (11fa4 <node_identity_set+0x104>)
   11f04:	1a5b      	subs	r3, r3, r1
   11f06:	08db      	lsrs	r3, r3, #3
   11f08:	4601      	mov	r1, r0
   11f0a:	f363 128f 	bfi	r2, r3, #6, #10
   11f0e:	4827      	ldr	r0, [pc, #156]	; (11fac <node_identity_set+0x10c>)
   11f10:	e7e6      	b.n	11ee0 <node_identity_set+0x40>
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   11f12:	f248 0148 	movw	r1, #32840	; 0x8048
   11f16:	a805      	add	r0, sp, #20
   11f18:	f011 fd89 	bl	23a2e <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
   11f1c:	4620      	mov	r0, r4
   11f1e:	f7f9 fe3f 	bl	bba0 <bt_mesh_subnet_get>
	if (!sub) {
   11f22:	4605      	mov	r5, r0
   11f24:	bb18      	cbnz	r0, 11f6e <node_identity_set+0xce>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_NETKEY);
   11f26:	2104      	movs	r1, #4
   11f28:	a805      	add	r0, sp, #20
   11f2a:	f012 fede 	bl	24cea <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, idx);
   11f2e:	4621      	mov	r1, r4
   11f30:	a805      	add	r0, sp, #20
   11f32:	f012 fee2 	bl	24cfa <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, node_id);
   11f36:	4631      	mov	r1, r6
		net_buf_simple_add_u8(&msg, sub->node_id);
   11f38:	a805      	add	r0, sp, #20
   11f3a:	f012 fed6 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11f3e:	2300      	movs	r3, #0
   11f40:	9300      	str	r3, [sp, #0]
   11f42:	aa05      	add	r2, sp, #20
   11f44:	4641      	mov	r1, r8
   11f46:	4638      	mov	r0, r7
   11f48:	f011 fd9a 	bl	23a80 <bt_mesh_model_send>
   11f4c:	2800      	cmp	r0, #0
   11f4e:	d0c9      	beq.n	11ee4 <node_identity_set+0x44>
		BT_ERR("Unable to send Node Identity Status");
   11f50:	2301      	movs	r3, #1
   11f52:	f04f 0100 	mov.w	r1, #0
   11f56:	f363 0107 	bfi	r1, r3, #0, #8
   11f5a:	4a11      	ldr	r2, [pc, #68]	; (11fa0 <node_identity_set+0x100>)
   11f5c:	4b11      	ldr	r3, [pc, #68]	; (11fa4 <node_identity_set+0x104>)
   11f5e:	4814      	ldr	r0, [pc, #80]	; (11fb0 <node_identity_set+0x110>)
   11f60:	1a9b      	subs	r3, r3, r2
   11f62:	08db      	lsrs	r3, r3, #3
   11f64:	f363 118f 	bfi	r1, r3, #6, #10
   11f68:	f00e fe4c 	bl	20c04 <log_0>
   11f6c:	e7ba      	b.n	11ee4 <node_identity_set+0x44>
		net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   11f6e:	2100      	movs	r1, #0
   11f70:	a805      	add	r0, sp, #20
   11f72:	f012 feba 	bl	24cea <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, idx);
   11f76:	4621      	mov	r1, r4
   11f78:	a805      	add	r0, sp, #20
   11f7a:	f012 febe 	bl	24cfa <net_buf_simple_add_le16>
		    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   11f7e:	f7ff fe77 	bl	11c70 <bt_mesh_gatt_proxy_get>
		if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   11f82:	2801      	cmp	r0, #1
   11f84:	d105      	bne.n	11f92 <node_identity_set+0xf2>
				bt_mesh_proxy_identity_start(sub);
   11f86:	4628      	mov	r0, r5
			if (node_id) {
   11f88:	b136      	cbz	r6, 11f98 <node_identity_set+0xf8>
				bt_mesh_proxy_identity_start(sub);
   11f8a:	f005 fff9 	bl	17f80 <bt_mesh_proxy_identity_start>
			bt_mesh_adv_update();
   11f8e:	f7f9 f93f 	bl	b210 <bt_mesh_adv_update>
		net_buf_simple_add_u8(&msg, sub->node_id);
   11f92:	f895 1020 	ldrb.w	r1, [r5, #32]
   11f96:	e7cf      	b.n	11f38 <node_identity_set+0x98>
				bt_mesh_proxy_identity_stop(sub);
   11f98:	f012 f91c 	bl	241d4 <bt_mesh_proxy_identity_stop>
   11f9c:	e7f7      	b.n	11f8e <node_identity_set+0xee>
   11f9e:	bf00      	nop
   11fa0:	00025880 	.word	0x00025880
   11fa4:	00025920 	.word	0x00025920
   11fa8:	000299de 	.word	0x000299de
   11fac:	00029a1d 	.word	0x00029a1d
   11fb0:	000299f9 	.word	0x000299f9

00011fb4 <send_gatt_proxy_status>:
{
   11fb4:	b530      	push	{r4, r5, lr}
   11fb6:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11fb8:	ab03      	add	r3, sp, #12
   11fba:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   11fbe:	4604      	mov	r4, r0
   11fc0:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   11fc2:	a805      	add	r0, sp, #20
   11fc4:	f248 0114 	movw	r1, #32788	; 0x8014
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   11fc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11fcc:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   11fce:	f011 fd2e 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   11fd2:	f7ff fe4d 	bl	11c70 <bt_mesh_gatt_proxy_get>
   11fd6:	4601      	mov	r1, r0
   11fd8:	a805      	add	r0, sp, #20
   11fda:	f012 fe86 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11fde:	2300      	movs	r3, #0
   11fe0:	9300      	str	r3, [sp, #0]
   11fe2:	aa05      	add	r2, sp, #20
   11fe4:	4629      	mov	r1, r5
   11fe6:	4620      	mov	r0, r4
   11fe8:	f011 fd4a 	bl	23a80 <bt_mesh_model_send>
   11fec:	b168      	cbz	r0, 1200a <send_gatt_proxy_status+0x56>
		BT_ERR("Unable to send GATT Proxy Status");
   11fee:	2301      	movs	r3, #1
   11ff0:	f04f 0100 	mov.w	r1, #0
   11ff4:	f363 0107 	bfi	r1, r3, #0, #8
   11ff8:	4a05      	ldr	r2, [pc, #20]	; (12010 <send_gatt_proxy_status+0x5c>)
   11ffa:	4b06      	ldr	r3, [pc, #24]	; (12014 <send_gatt_proxy_status+0x60>)
   11ffc:	4806      	ldr	r0, [pc, #24]	; (12018 <send_gatt_proxy_status+0x64>)
   11ffe:	1a9b      	subs	r3, r3, r2
   12000:	08db      	lsrs	r3, r3, #3
   12002:	f363 118f 	bfi	r1, r3, #6, #10
   12006:	f00e fdfd 	bl	20c04 <log_0>
}
   1200a:	b009      	add	sp, #36	; 0x24
   1200c:	bd30      	pop	{r4, r5, pc}
   1200e:	bf00      	nop
   12010:	00025880 	.word	0x00025880
   12014:	00025920 	.word	0x00025920
   12018:	00029ae4 	.word	0x00029ae4

0001201c <gatt_proxy_set>:
{
   1201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1201e:	6813      	ldr	r3, [r2, #0]
{
   12020:	460f      	mov	r7, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12022:	7819      	ldrb	r1, [r3, #0]
   12024:	2901      	cmp	r1, #1
{
   12026:	4606      	mov	r6, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12028:	d90f      	bls.n	1204a <gatt_proxy_set+0x2e>
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   1202a:	2302      	movs	r3, #2
   1202c:	f04f 0200 	mov.w	r2, #0
   12030:	f363 0207 	bfi	r2, r3, #0, #8
   12034:	4828      	ldr	r0, [pc, #160]	; (120d8 <gatt_proxy_set+0xbc>)
   12036:	4b29      	ldr	r3, [pc, #164]	; (120dc <gatt_proxy_set+0xc0>)
   12038:	1a1b      	subs	r3, r3, r0
   1203a:	08db      	lsrs	r3, r3, #3
   1203c:	f363 128f 	bfi	r2, r3, #6, #10
   12040:	4827      	ldr	r0, [pc, #156]	; (120e0 <gatt_proxy_set+0xc4>)
}
   12042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   12046:	f00e bdea 	b.w	20c1e <log_1>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
   1204a:	f7ff fe11 	bl	11c70 <bt_mesh_gatt_proxy_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) ||
   1204e:	2802      	cmp	r0, #2
   12050:	d00f      	beq.n	12072 <gatt_proxy_set+0x56>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   12052:	69b4      	ldr	r4, [r6, #24]
	if (!cfg) {
   12054:	b99c      	cbnz	r4, 1207e <gatt_proxy_set+0x62>
		BT_WARN("No Configuration Server context available");
   12056:	2302      	movs	r3, #2
   12058:	f04f 0100 	mov.w	r1, #0
   1205c:	f363 0107 	bfi	r1, r3, #0, #8
   12060:	4a1d      	ldr	r2, [pc, #116]	; (120d8 <gatt_proxy_set+0xbc>)
   12062:	4b1e      	ldr	r3, [pc, #120]	; (120dc <gatt_proxy_set+0xc0>)
   12064:	481f      	ldr	r0, [pc, #124]	; (120e4 <gatt_proxy_set+0xc8>)
   12066:	1a9b      	subs	r3, r3, r2
   12068:	08db      	lsrs	r3, r3, #3
   1206a:	f363 118f 	bfi	r1, r3, #6, #10
   1206e:	f00e fdc9 	bl	20c04 <log_0>
	send_gatt_proxy_status(model, ctx);
   12072:	4639      	mov	r1, r7
   12074:	4630      	mov	r0, r6
}
   12076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	send_gatt_proxy_status(model, ctx);
   1207a:	f7ff bf9b 	b.w	11fb4 <send_gatt_proxy_status>
	if (cfg->gatt_proxy == buf->data[0]) {
   1207e:	7a23      	ldrb	r3, [r4, #8]
   12080:	428b      	cmp	r3, r1
   12082:	d0f6      	beq.n	12072 <gatt_proxy_set+0x56>
	cfg->gatt_proxy = buf->data[0];
   12084:	7221      	strb	r1, [r4, #8]
		bt_mesh_store_cfg();
   12086:	f011 ff8a 	bl	23f9e <bt_mesh_store_cfg>
	if (cfg->gatt_proxy == BT_MESH_GATT_PROXY_DISABLED) {
   1208a:	7a23      	ldrb	r3, [r4, #8]
   1208c:	b9ab      	cbnz	r3, 120ba <gatt_proxy_set+0x9e>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   1208e:	4d16      	ldr	r5, [pc, #88]	; (120e8 <gatt_proxy_set+0xcc>)
   12090:	f8b5 21b0 	ldrh.w	r2, [r5, #432]	; 0x1b0
   12094:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12098:	429a      	cmp	r2, r3
   1209a:	d003      	beq.n	120a4 <gatt_proxy_set+0x88>
				bt_mesh_proxy_identity_stop(sub);
   1209c:	f505 70ca 	add.w	r0, r5, #404	; 0x194
   120a0:	f012 f898 	bl	241d4 <bt_mesh_proxy_identity_stop>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   120a4:	f8b5 2294 	ldrh.w	r2, [r5, #660]	; 0x294
   120a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   120ac:	429a      	cmp	r2, r3
   120ae:	d002      	beq.n	120b6 <gatt_proxy_set+0x9a>
				bt_mesh_proxy_identity_stop(sub);
   120b0:	480e      	ldr	r0, [pc, #56]	; (120ec <gatt_proxy_set+0xd0>)
   120b2:	f012 f88f 	bl	241d4 <bt_mesh_proxy_identity_stop>
		bt_mesh_proxy_gatt_disconnect();
   120b6:	f006 f81b 	bl	180f0 <bt_mesh_proxy_gatt_disconnect>
	bt_mesh_adv_update();
   120ba:	f7f9 f8a9 	bl	b210 <bt_mesh_adv_update>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   120be:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
   120c0:	f7f9 fd6e 	bl	bba0 <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_PROXY) && sub) {
   120c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   120c6:	079b      	lsls	r3, r3, #30
   120c8:	d5d3      	bpl.n	12072 <gatt_proxy_set+0x56>
   120ca:	2800      	cmp	r0, #0
   120cc:	d0d1      	beq.n	12072 <gatt_proxy_set+0x56>
		hb_send(model);
   120ce:	4630      	mov	r0, r6
   120d0:	f011 fe17 	bl	23d02 <hb_send>
   120d4:	e7cd      	b.n	12072 <gatt_proxy_set+0x56>
   120d6:	bf00      	nop
   120d8:	00025880 	.word	0x00025880
   120dc:	00025920 	.word	0x00025920
   120e0:	00029687 	.word	0x00029687
   120e4:	0002998d 	.word	0x0002998d
   120e8:	20007060 	.word	0x20007060
   120ec:	200072d8 	.word	0x200072d8

000120f0 <bt_mesh_default_ttl_get>:

u8_t bt_mesh_default_ttl_get(void)
{
	if (conf) {
   120f0:	4b03      	ldr	r3, [pc, #12]	; (12100 <bt_mesh_default_ttl_get+0x10>)
   120f2:	681b      	ldr	r3, [r3, #0]
   120f4:	b10b      	cbz	r3, 120fa <bt_mesh_default_ttl_get+0xa>
		return conf->default_ttl;
   120f6:	7a98      	ldrb	r0, [r3, #10]
   120f8:	4770      	bx	lr
	}

	return DEFAULT_TTL;
   120fa:	2007      	movs	r0, #7
}
   120fc:	4770      	bx	lr
   120fe:	bf00      	nop
   12100:	20000d10 	.word	0x20000d10

00012104 <default_ttl_set>:
{
   12104:	b530      	push	{r4, r5, lr}
   12106:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   12108:	ab03      	add	r3, sp, #12
{
   1210a:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1210c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   12110:	9305      	str	r3, [sp, #20]
   12112:	e9cd 1306 	strd	r1, r3, [sp, #24]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   12116:	6983      	ldr	r3, [r0, #24]
{
   12118:	4604      	mov	r4, r0
	if (!cfg) {
   1211a:	bb7b      	cbnz	r3, 1217c <default_ttl_set+0x78>
		BT_WARN("No Configuration Server context available");
   1211c:	2302      	movs	r3, #2
   1211e:	f04f 0100 	mov.w	r1, #0
   12122:	f363 0107 	bfi	r1, r3, #0, #8
   12126:	4a24      	ldr	r2, [pc, #144]	; (121b8 <default_ttl_set+0xb4>)
   12128:	4b24      	ldr	r3, [pc, #144]	; (121bc <default_ttl_set+0xb8>)
   1212a:	4825      	ldr	r0, [pc, #148]	; (121c0 <default_ttl_set+0xbc>)
   1212c:	1a9b      	subs	r3, r3, r2
   1212e:	08db      	lsrs	r3, r3, #3
   12130:	f363 118f 	bfi	r1, r3, #6, #10
   12134:	f00e fd66 	bl	20c04 <log_0>
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   12138:	f248 010e 	movw	r1, #32782	; 0x800e
   1213c:	a805      	add	r0, sp, #20
   1213e:	f011 fc76 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   12142:	f7ff ffd5 	bl	120f0 <bt_mesh_default_ttl_get>
   12146:	4601      	mov	r1, r0
   12148:	a805      	add	r0, sp, #20
   1214a:	f012 fdce 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1214e:	2300      	movs	r3, #0
   12150:	9300      	str	r3, [sp, #0]
   12152:	aa05      	add	r2, sp, #20
   12154:	4629      	mov	r1, r5
   12156:	4620      	mov	r0, r4
   12158:	f011 fc92 	bl	23a80 <bt_mesh_model_send>
   1215c:	b348      	cbz	r0, 121b2 <default_ttl_set+0xae>
		BT_ERR("Unable to send Default TTL Status response");
   1215e:	2301      	movs	r3, #1
   12160:	f04f 0100 	mov.w	r1, #0
   12164:	f363 0107 	bfi	r1, r3, #0, #8
   12168:	4a13      	ldr	r2, [pc, #76]	; (121b8 <default_ttl_set+0xb4>)
   1216a:	4b14      	ldr	r3, [pc, #80]	; (121bc <default_ttl_set+0xb8>)
   1216c:	4815      	ldr	r0, [pc, #84]	; (121c4 <default_ttl_set+0xc0>)
   1216e:	1a9b      	subs	r3, r3, r2
   12170:	08db      	lsrs	r3, r3, #3
   12172:	f363 118f 	bfi	r1, r3, #6, #10
   12176:	f00e fd45 	bl	20c04 <log_0>
   1217a:	e01a      	b.n	121b2 <default_ttl_set+0xae>
	} else if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
   1217c:	6812      	ldr	r2, [r2, #0]
   1217e:	7811      	ldrb	r1, [r2, #0]
   12180:	060a      	lsls	r2, r1, #24
   12182:	d408      	bmi.n	12196 <default_ttl_set+0x92>
   12184:	2901      	cmp	r1, #1
   12186:	d006      	beq.n	12196 <default_ttl_set+0x92>
		if (cfg->default_ttl != buf->data[0]) {
   12188:	7a9a      	ldrb	r2, [r3, #10]
   1218a:	428a      	cmp	r2, r1
   1218c:	d0d4      	beq.n	12138 <default_ttl_set+0x34>
			cfg->default_ttl = buf->data[0];
   1218e:	7299      	strb	r1, [r3, #10]
				bt_mesh_store_cfg();
   12190:	f011 ff05 	bl	23f9e <bt_mesh_store_cfg>
   12194:	e7d0      	b.n	12138 <default_ttl_set+0x34>
		BT_WARN("Prohibited Default TTL value 0x%02x", buf->data[0]);
   12196:	2302      	movs	r3, #2
   12198:	f04f 0200 	mov.w	r2, #0
   1219c:	f363 0207 	bfi	r2, r3, #0, #8
   121a0:	4805      	ldr	r0, [pc, #20]	; (121b8 <default_ttl_set+0xb4>)
   121a2:	4b06      	ldr	r3, [pc, #24]	; (121bc <default_ttl_set+0xb8>)
   121a4:	1a1b      	subs	r3, r3, r0
   121a6:	08db      	lsrs	r3, r3, #3
   121a8:	f363 128f 	bfi	r2, r3, #6, #10
   121ac:	4806      	ldr	r0, [pc, #24]	; (121c8 <default_ttl_set+0xc4>)
   121ae:	f00e fd36 	bl	20c1e <log_1>
}
   121b2:	b009      	add	sp, #36	; 0x24
   121b4:	bd30      	pop	{r4, r5, pc}
   121b6:	bf00      	nop
   121b8:	00025880 	.word	0x00025880
   121bc:	00025920 	.word	0x00025920
   121c0:	0002998d 	.word	0x0002998d
   121c4:	000295ae 	.word	0x000295ae
   121c8:	0002958a 	.word	0x0002958a

000121cc <default_ttl_get>:
{
   121cc:	b530      	push	{r4, r5, lr}
   121ce:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   121d0:	ab03      	add	r3, sp, #12
   121d2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   121d6:	4604      	mov	r4, r0
   121d8:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   121da:	a805      	add	r0, sp, #20
   121dc:	f248 010e 	movw	r1, #32782	; 0x800e
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   121e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   121e4:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   121e6:	f011 fc22 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   121ea:	f7ff ff81 	bl	120f0 <bt_mesh_default_ttl_get>
   121ee:	4601      	mov	r1, r0
   121f0:	a805      	add	r0, sp, #20
   121f2:	f012 fd7a 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   121f6:	2300      	movs	r3, #0
   121f8:	9300      	str	r3, [sp, #0]
   121fa:	aa05      	add	r2, sp, #20
   121fc:	4629      	mov	r1, r5
   121fe:	4620      	mov	r0, r4
   12200:	f011 fc3e 	bl	23a80 <bt_mesh_model_send>
   12204:	b168      	cbz	r0, 12222 <default_ttl_get+0x56>
		BT_ERR("Unable to send Default TTL Status response");
   12206:	2301      	movs	r3, #1
   12208:	f04f 0100 	mov.w	r1, #0
   1220c:	f363 0107 	bfi	r1, r3, #0, #8
   12210:	4a05      	ldr	r2, [pc, #20]	; (12228 <default_ttl_get+0x5c>)
   12212:	4b06      	ldr	r3, [pc, #24]	; (1222c <default_ttl_get+0x60>)
   12214:	4806      	ldr	r0, [pc, #24]	; (12230 <default_ttl_get+0x64>)
   12216:	1a9b      	subs	r3, r3, r2
   12218:	08db      	lsrs	r3, r3, #3
   1221a:	f363 118f 	bfi	r1, r3, #6, #10
   1221e:	f00e fcf1 	bl	20c04 <log_0>
}
   12222:	b009      	add	sp, #36	; 0x24
   12224:	bd30      	pop	{r4, r5, pc}
   12226:	bf00      	nop
   12228:	00025880 	.word	0x00025880
   1222c:	00025920 	.word	0x00025920
   12230:	000295ae 	.word	0x000295ae

00012234 <bt_mesh_label_uuid_get>:

u8_t *bt_mesh_label_uuid_get(u16_t addr)
{
   12234:	b508      	push	{r3, lr}
	int i;

	BT_DBG("addr 0x%04x", addr);

	for (i = 0; i < ARRAY_SIZE(labels); i++) {
		if (labels[i].addr == addr) {
   12236:	4b13      	ldr	r3, [pc, #76]	; (12284 <bt_mesh_label_uuid_get+0x50>)
   12238:	885a      	ldrh	r2, [r3, #2]
   1223a:	4282      	cmp	r2, r0
{
   1223c:	4601      	mov	r1, r0
   1223e:	461a      	mov	r2, r3
		if (labels[i].addr == addr) {
   12240:	d015      	beq.n	1226e <bt_mesh_label_uuid_get+0x3a>
   12242:	8ad8      	ldrh	r0, [r3, #22]
   12244:	4288      	cmp	r0, r1
   12246:	d018      	beq.n	1227a <bt_mesh_label_uuid_get+0x46>
   12248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   1224a:	428b      	cmp	r3, r1
   1224c:	d017      	beq.n	1227e <bt_mesh_label_uuid_get+0x4a>
			       bt_hex(labels[i].uuid, 16));
			return labels[i].uuid;
		}
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);
   1224e:	2302      	movs	r3, #2
   12250:	f04f 0200 	mov.w	r2, #0
   12254:	f363 0207 	bfi	r2, r3, #0, #8
   12258:	480b      	ldr	r0, [pc, #44]	; (12288 <bt_mesh_label_uuid_get+0x54>)
   1225a:	4b0c      	ldr	r3, [pc, #48]	; (1228c <bt_mesh_label_uuid_get+0x58>)
   1225c:	1a1b      	subs	r3, r3, r0
   1225e:	08db      	lsrs	r3, r3, #3
   12260:	480b      	ldr	r0, [pc, #44]	; (12290 <bt_mesh_label_uuid_get+0x5c>)
   12262:	f363 128f 	bfi	r2, r3, #6, #10
   12266:	f00e fcda 	bl	20c1e <log_1>

	return NULL;
   1226a:	2000      	movs	r0, #0
}
   1226c:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   1226e:	2000      	movs	r0, #0
			return labels[i].uuid;
   12270:	2314      	movs	r3, #20
   12272:	fb03 2000 	mla	r0, r3, r0, r2
   12276:	3004      	adds	r0, #4
   12278:	e7f8      	b.n	1226c <bt_mesh_label_uuid_get+0x38>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   1227a:	2001      	movs	r0, #1
   1227c:	e7f8      	b.n	12270 <bt_mesh_label_uuid_get+0x3c>
   1227e:	2002      	movs	r0, #2
   12280:	e7f6      	b.n	12270 <bt_mesh_label_uuid_get+0x3c>
   12282:	bf00      	nop
   12284:	20001e46 	.word	0x20001e46
   12288:	00025880 	.word	0x00025880
   1228c:	00025920 	.word	0x00025920
   12290:	00029568 	.word	0x00029568

00012294 <mod_sub_list_clear>:
{
   12294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Label UUID not found");
   12298:	4b27      	ldr	r3, [pc, #156]	; (12338 <mod_sub_list_clear+0xa4>)
   1229a:	4c28      	ldr	r4, [pc, #160]	; (1233c <mod_sub_list_clear+0xa8>)
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   1229c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 12348 <mod_sub_list_clear+0xb4>
			BT_ERR("Label UUID not found");
   122a0:	1ae4      	subs	r4, r4, r3
   122a2:	f100 050e 	add.w	r5, r0, #14
   122a6:	f100 0312 	add.w	r3, r0, #18
   122aa:	f1a8 0704 	sub.w	r7, r8, #4
   122ae:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   122b2:	9301      	str	r3, [sp, #4]
   122b4:	46a9      	mov	r9, r5
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   122b6:	f107 0a18 	add.w	sl, r7, #24
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   122ba:	f835 0b02 	ldrh.w	r0, [r5], #2
   122be:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   122c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   122c6:	d20f      	bcs.n	122e8 <mod_sub_list_clear+0x54>
		label_uuid = bt_mesh_label_uuid_get(mod->groups[i]);
   122c8:	f7ff ffb4 	bl	12234 <bt_mesh_label_uuid_get>
		if (!label_uuid) {
   122cc:	4606      	mov	r6, r0
   122ce:	b9b0      	cbnz	r0, 122fe <mod_sub_list_clear+0x6a>
			BT_ERR("Label UUID not found");
   122d0:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   122d4:	f043 0301 	orr.w	r3, r3, #1
   122d8:	f363 0b07 	bfi	fp, r3, #0, #8
   122dc:	f364 1b8f 	bfi	fp, r4, #6, #10
   122e0:	4659      	mov	r1, fp
   122e2:	4817      	ldr	r0, [pc, #92]	; (12340 <mod_sub_list_clear+0xac>)
   122e4:	f00e fc8e 	bl	20c04 <log_0>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   122e8:	9b01      	ldr	r3, [sp, #4]
   122ea:	42ab      	cmp	r3, r5
   122ec:	d1e5      	bne.n	122ba <mod_sub_list_clear+0x26>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   122ee:	2204      	movs	r2, #4
   122f0:	2100      	movs	r1, #0
   122f2:	4648      	mov	r0, r9
}
   122f4:	b003      	add	sp, #12
   122f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   122fa:	f00f bdee 	b.w	21eda <memset>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
   122fe:	4601      	mov	r1, r0
   12300:	2210      	movs	r2, #16
   12302:	4640      	mov	r0, r8
   12304:	f00f fd98 	bl	21e38 <memcmp>
   12308:	b168      	cbz	r0, 12326 <mod_sub_list_clear+0x92>
   1230a:	2210      	movs	r2, #16
   1230c:	4631      	mov	r1, r6
   1230e:	4650      	mov	r0, sl
   12310:	f00f fd92 	bl	21e38 <memcmp>
   12314:	b168      	cbz	r0, 12332 <mod_sub_list_clear+0x9e>
   12316:	2210      	movs	r2, #16
   12318:	4631      	mov	r1, r6
   1231a:	480a      	ldr	r0, [pc, #40]	; (12344 <mod_sub_list_clear+0xb0>)
   1231c:	f00f fd8c 	bl	21e38 <memcmp>
   12320:	2800      	cmp	r0, #0
   12322:	d1e1      	bne.n	122e8 <mod_sub_list_clear+0x54>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   12324:	2002      	movs	r0, #2
			labels[i].ref--;
   12326:	2314      	movs	r3, #20
   12328:	4358      	muls	r0, r3
   1232a:	5a3b      	ldrh	r3, [r7, r0]
   1232c:	3b01      	subs	r3, #1
   1232e:	523b      	strh	r3, [r7, r0]
			return STATUS_SUCCESS;
   12330:	e7da      	b.n	122e8 <mod_sub_list_clear+0x54>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
   12332:	2001      	movs	r0, #1
   12334:	e7f7      	b.n	12326 <mod_sub_list_clear+0x92>
   12336:	bf00      	nop
   12338:	00025880 	.word	0x00025880
   1233c:	00025920 	.word	0x00025920
   12340:	0002992f 	.word	0x0002992f
   12344:	20001e72 	.word	0x20001e72
   12348:	20001e4a 	.word	0x20001e4a

0001234c <mod_sub_va_overwrite>:
{
   1234c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12350:	b086      	sub	sp, #24
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   12352:	2300      	movs	r3, #0
{
   12354:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   12356:	4610      	mov	r0, r2
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   12358:	f8ad 3016 	strh.w	r3, [sp, #22]
{
   1235c:	460f      	mov	r7, r1
   1235e:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   12360:	f012 fd39 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12364:	b203      	sxth	r3, r0
   12366:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12368:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1236a:	dc10      	bgt.n	1238e <mod_sub_va_overwrite+0x42>
		BT_WARN("Prohibited element address");
   1236c:	2302      	movs	r3, #2
   1236e:	f04f 0100 	mov.w	r1, #0
   12372:	f363 0107 	bfi	r1, r3, #0, #8
   12376:	4a23      	ldr	r2, [pc, #140]	; (12404 <mod_sub_va_overwrite+0xb8>)
   12378:	4b23      	ldr	r3, [pc, #140]	; (12408 <mod_sub_va_overwrite+0xbc>)
   1237a:	4824      	ldr	r0, [pc, #144]	; (1240c <mod_sub_va_overwrite+0xc0>)
   1237c:	1a9b      	subs	r3, r3, r2
   1237e:	08db      	lsrs	r3, r3, #3
   12380:	f363 118f 	bfi	r1, r3, #6, #10
   12384:	f00e fc3e 	bl	20c04 <log_0>
}
   12388:	b006      	add	sp, #24
   1238a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1238e:	2110      	movs	r1, #16
   12390:	4620      	mov	r0, r4
   12392:	f012 fd10 	bl	24db6 <net_buf_simple_pull_mem>
   12396:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   12398:	4628      	mov	r0, r5
	mod_id = buf->data;
   1239a:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1239e:	f7fd f89b 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   123a2:	b9a0      	cbnz	r0, 123ce <mod_sub_va_overwrite+0x82>
		vnd = (buf->len == 4);
   123a4:	88a3      	ldrh	r3, [r4, #4]
   123a6:	1f1a      	subs	r2, r3, #4
   123a8:	4253      	negs	r3, r2
   123aa:	4153      	adcs	r3, r2
   123ac:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   123b0:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   123b2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   123b6:	e9cd 8301 	strd	r8, r3, [sp, #4]
   123ba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   123be:	9300      	str	r3, [sp, #0]
   123c0:	4622      	mov	r2, r4
   123c2:	462b      	mov	r3, r5
   123c4:	4639      	mov	r1, r7
   123c6:	4630      	mov	r0, r6
   123c8:	f7fd fcc4 	bl	fd54 <send_mod_sub_status>
   123cc:	e7dc      	b.n	12388 <mod_sub_va_overwrite+0x3c>
	mod = get_model(elem, buf, &vnd);
   123ce:	f10d 0215 	add.w	r2, sp, #21
   123d2:	4621      	mov	r1, r4
   123d4:	f011 fc16 	bl	23c04 <get_model>
	if (!mod) {
   123d8:	4681      	mov	r9, r0
   123da:	b188      	cbz	r0, 12400 <mod_sub_va_overwrite+0xb4>
	mod_sub_list_clear(mod);
   123dc:	f7ff ff5a 	bl	12294 <mod_sub_list_clear>
		status = va_add(label_uuid, &sub_addr);
   123e0:	f10d 0116 	add.w	r1, sp, #22
   123e4:	4650      	mov	r0, sl
   123e6:	f7fd fe9f 	bl	10128 <va_add>
		if (status == STATUS_SUCCESS) {
   123ea:	4604      	mov	r4, r0
   123ec:	2800      	cmp	r0, #0
   123ee:	d1e0      	bne.n	123b2 <mod_sub_va_overwrite+0x66>
			mod->groups[0] = sub_addr;
   123f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   123f4:	f8a9 300e 	strh.w	r3, [r9, #14]
				bt_mesh_store_mod_sub(mod);
   123f8:	4648      	mov	r0, r9
   123fa:	f011 fde9 	bl	23fd0 <bt_mesh_store_mod_sub>
   123fe:	e7d8      	b.n	123b2 <mod_sub_va_overwrite+0x66>
		status = STATUS_INVALID_MODEL;
   12400:	2402      	movs	r4, #2
   12402:	e7d6      	b.n	123b2 <mod_sub_va_overwrite+0x66>
   12404:	00025880 	.word	0x00025880
   12408:	00025920 	.word	0x00025920
   1240c:	000298bf 	.word	0x000298bf

00012410 <mod_sub_overwrite>:
{
   12410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12414:	4607      	mov	r7, r0
   12416:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   12418:	4610      	mov	r0, r2
{
   1241a:	4688      	mov	r8, r1
   1241c:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1241e:	f012 fcda 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12422:	b203      	sxth	r3, r0
   12424:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12426:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12428:	dc10      	bgt.n	1244c <mod_sub_overwrite+0x3c>
		BT_WARN("Prohibited element address");
   1242a:	2302      	movs	r3, #2
   1242c:	f04f 0100 	mov.w	r1, #0
   12430:	f363 0107 	bfi	r1, r3, #0, #8
   12434:	4a1f      	ldr	r2, [pc, #124]	; (124b4 <mod_sub_overwrite+0xa4>)
   12436:	4b20      	ldr	r3, [pc, #128]	; (124b8 <mod_sub_overwrite+0xa8>)
   12438:	4820      	ldr	r0, [pc, #128]	; (124bc <mod_sub_overwrite+0xac>)
   1243a:	1a9b      	subs	r3, r3, r2
   1243c:	08db      	lsrs	r3, r3, #3
   1243e:	f363 118f 	bfi	r1, r3, #6, #10
   12442:	f00e fbdf 	bl	20c04 <log_0>
}
   12446:	b007      	add	sp, #28
   12448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   1244c:	4620      	mov	r0, r4
   1244e:	f012 fcc2 	bl	24dd6 <net_buf_simple_pull_le16>
   12452:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   12454:	4628      	mov	r0, r5
	mod_id = buf->data;
   12456:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1245a:	f7fd f83d 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   1245e:	b938      	cbnz	r0, 12470 <mod_sub_overwrite+0x60>
		vnd = (buf->len == 4);
   12460:	88a3      	ldrh	r3, [r4, #4]
   12462:	1f1a      	subs	r2, r3, #4
   12464:	4253      	negs	r3, r2
   12466:	4153      	adcs	r3, r2
   12468:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1246c:	2201      	movs	r2, #1
   1246e:	e013      	b.n	12498 <mod_sub_overwrite+0x88>
	mod = get_model(elem, buf, &vnd);
   12470:	4621      	mov	r1, r4
   12472:	f10d 0217 	add.w	r2, sp, #23
   12476:	f011 fbc5 	bl	23c04 <get_model>
	if (!mod) {
   1247a:	4604      	mov	r4, r0
   1247c:	b1b8      	cbz	r0, 124ae <mod_sub_overwrite+0x9e>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   1247e:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   12482:	b29b      	uxth	r3, r3
   12484:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   12488:	d8f0      	bhi.n	1246c <mod_sub_overwrite+0x5c>
	mod_sub_list_clear(mod);
   1248a:	f7ff ff03 	bl	12294 <mod_sub_list_clear>
		mod->groups[0] = sub_addr;
   1248e:	81e6      	strh	r6, [r4, #14]
			bt_mesh_store_mod_sub(mod);
   12490:	4620      	mov	r0, r4
   12492:	f011 fd9d 	bl	23fd0 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   12496:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   12498:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1249c:	9600      	str	r6, [sp, #0]
   1249e:	e9cd 9301 	strd	r9, r3, [sp, #4]
   124a2:	4641      	mov	r1, r8
   124a4:	462b      	mov	r3, r5
   124a6:	4638      	mov	r0, r7
   124a8:	f7fd fc54 	bl	fd54 <send_mod_sub_status>
   124ac:	e7cb      	b.n	12446 <mod_sub_overwrite+0x36>
		status = STATUS_INVALID_MODEL;
   124ae:	2202      	movs	r2, #2
   124b0:	e7f2      	b.n	12498 <mod_sub_overwrite+0x88>
   124b2:	bf00      	nop
   124b4:	00025880 	.word	0x00025880
   124b8:	00025920 	.word	0x00025920
   124bc:	000298bf 	.word	0x000298bf

000124c0 <bt_mesh_hb_pub_get>:

struct bt_mesh_hb_pub *bt_mesh_hb_pub_get(void)
{
	if (!conf) {
   124c0:	4b02      	ldr	r3, [pc, #8]	; (124cc <bt_mesh_hb_pub_get+0xc>)
   124c2:	6818      	ldr	r0, [r3, #0]
   124c4:	b100      	cbz	r0, 124c8 <bt_mesh_hb_pub_get+0x8>
		return NULL;
	}

	return &conf->hb_pub;
   124c6:	300c      	adds	r0, #12
}
   124c8:	4770      	bx	lr
   124ca:	bf00      	nop
   124cc:	20000d10 	.word	0x20000d10

000124d0 <bt_mesh_cfg_get>:
}

struct bt_mesh_cfg_srv *bt_mesh_cfg_get(void)
{
	return conf;
}
   124d0:	4b01      	ldr	r3, [pc, #4]	; (124d8 <bt_mesh_cfg_get+0x8>)
   124d2:	6818      	ldr	r0, [r3, #0]
   124d4:	4770      	bx	lr
   124d6:	bf00      	nop
   124d8:	20000d10 	.word	0x20000d10

000124dc <bt_mesh_subnet_del>:
{
	int i;

	BT_DBG("NetIdx 0x%03x store %u", sub->net_idx, store);

	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
   124dc:	4b1b      	ldr	r3, [pc, #108]	; (1254c <bt_mesh_subnet_del+0x70>)
{
   124de:	b570      	push	{r4, r5, r6, lr}
   124e0:	4604      	mov	r4, r0
	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
   124e2:	6818      	ldr	r0, [r3, #0]
{
   124e4:	460e      	mov	r6, r1
	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
   124e6:	b160      	cbz	r0, 12502 <bt_mesh_subnet_del+0x26>
   124e8:	8e82      	ldrh	r2, [r0, #52]	; 0x34
   124ea:	8ba3      	ldrh	r3, [r4, #28]
   124ec:	429a      	cmp	r2, r3
   124ee:	d108      	bne.n	12502 <bt_mesh_subnet_del+0x26>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
   124f0:	2300      	movs	r3, #0
   124f2:	62c3      	str	r3, [r0, #44]	; 0x2c
	cfg->hb_pub.period = 0;
   124f4:	8603      	strh	r3, [r0, #48]	; 0x30
	k_delayed_work_cancel(&cfg->hb_pub.timer);
   124f6:	300c      	adds	r0, #12
   124f8:	f012 ffac 	bl	25454 <k_delayed_work_cancel>
		hb_pub_disable(conf);

		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   124fc:	b10e      	cbz	r6, 12502 <bt_mesh_subnet_del+0x26>
			bt_mesh_store_hb_pub();
   124fe:	f011 fd4b 	bl	23f98 <bt_mesh_store_hb_pub>

	/* Delete any app keys bound to this NetKey index */
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx == sub->net_idx) {
   12502:	4d13      	ldr	r5, [pc, #76]	; (12550 <bt_mesh_subnet_del+0x74>)
   12504:	8ba3      	ldrh	r3, [r4, #28]
   12506:	f8b5 2144 	ldrh.w	r2, [r5, #324]	; 0x144
   1250a:	429a      	cmp	r2, r3
   1250c:	d104      	bne.n	12518 <bt_mesh_subnet_del+0x3c>
			bt_mesh_app_key_del(key, store);
   1250e:	4631      	mov	r1, r6
   12510:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   12514:	f7ff f8fe 	bl	11714 <bt_mesh_app_key_del>
		if (key->net_idx == sub->net_idx) {
   12518:	f8b5 216c 	ldrh.w	r2, [r5, #364]	; 0x16c
   1251c:	8ba3      	ldrh	r3, [r4, #28]
   1251e:	429a      	cmp	r2, r3
   12520:	d103      	bne.n	1252a <bt_mesh_subnet_del+0x4e>
			bt_mesh_app_key_del(key, store);
   12522:	4631      	mov	r1, r6
   12524:	480b      	ldr	r0, [pc, #44]	; (12554 <bt_mesh_subnet_del+0x78>)
   12526:	f7ff f8f5 	bl	11714 <bt_mesh_app_key_del>
		}
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(sub->net_idx);
   1252a:	8ba0      	ldrh	r0, [r4, #28]
   1252c:	f002 ff24 	bl	15378 <bt_mesh_friend_clear_net_idx>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   12530:	b116      	cbz	r6, 12538 <bt_mesh_subnet_del+0x5c>
		bt_mesh_clear_subnet(sub);
   12532:	4620      	mov	r0, r4
   12534:	f002 f8f0 	bl	14718 <bt_mesh_clear_subnet>
	}

	(void)memset(sub, 0, sizeof(*sub));
   12538:	22e4      	movs	r2, #228	; 0xe4
   1253a:	2100      	movs	r1, #0
   1253c:	4620      	mov	r0, r4
   1253e:	f00f fccc 	bl	21eda <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   12542:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12546:	83a3      	strh	r3, [r4, #28]
}
   12548:	bd70      	pop	{r4, r5, r6, pc}
   1254a:	bf00      	nop
   1254c:	20000d10 	.word	0x20000d10
   12550:	20007060 	.word	0x20007060
   12554:	200071cc 	.word	0x200071cc

00012558 <net_key_del>:
{
   12558:	b570      	push	{r4, r5, r6, lr}
   1255a:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   1255c:	4610      	mov	r0, r2
{
   1255e:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   12560:	f012 fc39 	bl	24dd6 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   12564:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   12568:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   1256a:	d310      	bcc.n	1258e <net_key_del+0x36>
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   1256c:	2301      	movs	r3, #1
   1256e:	f04f 0200 	mov.w	r2, #0
   12572:	f363 0207 	bfi	r2, r3, #0, #8
   12576:	4910      	ldr	r1, [pc, #64]	; (125b8 <net_key_del+0x60>)
   12578:	4b10      	ldr	r3, [pc, #64]	; (125bc <net_key_del+0x64>)
   1257a:	1a5b      	subs	r3, r3, r1
   1257c:	08db      	lsrs	r3, r3, #3
   1257e:	4601      	mov	r1, r0
   12580:	f363 128f 	bfi	r2, r3, #6, #10
   12584:	480e      	ldr	r0, [pc, #56]	; (125c0 <net_key_del+0x68>)
}
   12586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   1258a:	f00e bb48 	b.w	20c1e <log_1>
	sub = bt_mesh_subnet_get(del_idx);
   1258e:	f7f9 fb07 	bl	bba0 <bt_mesh_subnet_get>
	if (!sub) {
   12592:	4603      	mov	r3, r0
   12594:	b130      	cbz	r0, 125a4 <net_key_del+0x4c>
	if (ctx->net_idx == del_idx) {
   12596:	882b      	ldrh	r3, [r5, #0]
   12598:	42a3      	cmp	r3, r4
   1259a:	d00a      	beq.n	125b2 <net_key_del+0x5a>
	bt_mesh_subnet_del(sub, true);
   1259c:	2101      	movs	r1, #1
   1259e:	f7ff ff9d 	bl	124dc <bt_mesh_subnet_del>
	status = STATUS_SUCCESS;
   125a2:	2300      	movs	r3, #0
	send_net_key_status(model, ctx, del_idx, status);
   125a4:	4622      	mov	r2, r4
   125a6:	4629      	mov	r1, r5
   125a8:	4630      	mov	r0, r6
}
   125aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_net_key_status(model, ctx, del_idx, status);
   125ae:	f7fd bf4f 	b.w	10450 <send_net_key_status>
		status = STATUS_CANNOT_REMOVE;
   125b2:	230c      	movs	r3, #12
   125b4:	e7f6      	b.n	125a4 <net_key_del+0x4c>
   125b6:	bf00      	nop
   125b8:	00025880 	.word	0x00025880
   125bc:	00025920 	.word	0x00025920
   125c0:	000299de 	.word	0x000299de

000125c4 <bt_mesh_cfg_reset>:
	struct bt_mesh_cfg_srv *cfg = conf;
   125c4:	4b17      	ldr	r3, [pc, #92]	; (12624 <bt_mesh_cfg_reset+0x60>)
{
   125c6:	b510      	push	{r4, lr}
	struct bt_mesh_cfg_srv *cfg = conf;
   125c8:	681c      	ldr	r4, [r3, #0]
	if (!cfg) {
   125ca:	b34c      	cbz	r4, 12620 <bt_mesh_cfg_reset+0x5c>
	bt_mesh_set_hb_sub_dst(BT_MESH_ADDR_UNASSIGNED);
   125cc:	2000      	movs	r0, #0
   125ce:	f7fb fe31 	bl	e234 <bt_mesh_set_hb_sub_dst>
	cfg->hb_sub.expiry = 0;
   125d2:	2200      	movs	r2, #0
   125d4:	2300      	movs	r3, #0
   125d6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
   125da:	2300      	movs	r3, #0
   125dc:	6423      	str	r3, [r4, #64]	; 0x40
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   125de:	4c12      	ldr	r4, [pc, #72]	; (12628 <bt_mesh_cfg_reset+0x64>)
   125e0:	f8b4 21b0 	ldrh.w	r2, [r4, #432]	; 0x1b0
   125e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   125e8:	429a      	cmp	r2, r3
   125ea:	d004      	beq.n	125f6 <bt_mesh_cfg_reset+0x32>
			bt_mesh_subnet_del(sub, true);
   125ec:	2101      	movs	r1, #1
   125ee:	f504 70ca 	add.w	r0, r4, #404	; 0x194
   125f2:	f7ff ff73 	bl	124dc <bt_mesh_subnet_del>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   125f6:	f8b4 2294 	ldrh.w	r2, [r4, #660]	; 0x294
   125fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   125fe:	429a      	cmp	r2, r3
   12600:	d003      	beq.n	1260a <bt_mesh_cfg_reset+0x46>
			bt_mesh_subnet_del(sub, true);
   12602:	2101      	movs	r1, #1
   12604:	4809      	ldr	r0, [pc, #36]	; (1262c <bt_mesh_cfg_reset+0x68>)
   12606:	f7ff ff69 	bl	124dc <bt_mesh_subnet_del>
	bt_mesh_model_foreach(mod_reset, NULL);
   1260a:	2100      	movs	r1, #0
   1260c:	4808      	ldr	r0, [pc, #32]	; (12630 <bt_mesh_cfg_reset+0x6c>)
   1260e:	f7fc fe33 	bl	f278 <bt_mesh_model_foreach>
	(void)memset(labels, 0, sizeof(labels));
   12612:	223c      	movs	r2, #60	; 0x3c
   12614:	2100      	movs	r1, #0
   12616:	4807      	ldr	r0, [pc, #28]	; (12634 <bt_mesh_cfg_reset+0x70>)
}
   12618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(labels, 0, sizeof(labels));
   1261c:	f00f bc5d 	b.w	21eda <memset>
}
   12620:	bd10      	pop	{r4, pc}
   12622:	bf00      	nop
   12624:	20000d10 	.word	0x20000d10
   12628:	20007060 	.word	0x20007060
   1262c:	200072d8 	.word	0x200072d8
   12630:	00023e11 	.word	0x00023e11
   12634:	20001e46 	.word	0x20001e46

00012638 <health_period_set_unrel>:
}

static void health_period_set_unrel(struct bt_mesh_model *model,
				    struct bt_mesh_msg_ctx *ctx,
				    struct net_buf_simple *buf)
{
   12638:	b510      	push	{r4, lr}
   1263a:	4604      	mov	r4, r0
	u8_t period;

	period = net_buf_simple_pull_u8(buf);
   1263c:	4610      	mov	r0, r2
   1263e:	f012 fbc2 	bl	24dc6 <net_buf_simple_pull_u8>
	if (period > 15) {
   12642:	280f      	cmp	r0, #15
	period = net_buf_simple_pull_u8(buf);
   12644:	4601      	mov	r1, r0
	if (period > 15) {
   12646:	d90f      	bls.n	12668 <health_period_set_unrel+0x30>
		BT_WARN("Prohibited period value %u", period);
   12648:	2302      	movs	r3, #2
   1264a:	f04f 0200 	mov.w	r2, #0
   1264e:	f363 0207 	bfi	r2, r3, #0, #8
   12652:	4808      	ldr	r0, [pc, #32]	; (12674 <health_period_set_unrel+0x3c>)
   12654:	4b08      	ldr	r3, [pc, #32]	; (12678 <health_period_set_unrel+0x40>)
   12656:	1a1b      	subs	r3, r3, r0
   12658:	08db      	lsrs	r3, r3, #3
   1265a:	f363 128f 	bfi	r2, r3, #6, #10
   1265e:	4807      	ldr	r0, [pc, #28]	; (1267c <health_period_set_unrel+0x44>)
	}

	BT_DBG("period %u", period);

	model->pub->period_div = period;
}
   12660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Prohibited period value %u", period);
   12664:	f00e badb 	b.w	20c1e <log_1>
	model->pub->period_div = period;
   12668:	68a3      	ldr	r3, [r4, #8]
   1266a:	7ada      	ldrb	r2, [r3, #11]
   1266c:	f360 0203 	bfi	r2, r0, #0, #4
   12670:	72da      	strb	r2, [r3, #11]
}
   12672:	bd10      	pop	{r4, pc}
   12674:	00025880 	.word	0x00025880
   12678:	00025938 	.word	0x00025938
   1267c:	00029ca2 	.word	0x00029ca2

00012680 <health_get_registered>:
{
   12680:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12684:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   12686:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
   1268a:	460f      	mov	r7, r1
   1268c:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   1268e:	2105      	movs	r1, #5
   12690:	4610      	mov	r0, r2
   12692:	f011 f9cc 	bl	23a2e <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   12696:	2101      	movs	r1, #1
   12698:	4620      	mov	r0, r4
   1269a:	f012 fb17 	bl	24ccc <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   1269e:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   126a0:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   126a2:	4620      	mov	r0, r4
   126a4:	f012 fb29 	bl	24cfa <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   126a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   126ac:	b383      	cbz	r3, 12710 <health_get_registered+0x90>
   126ae:	685b      	ldr	r3, [r3, #4]
   126b0:	b373      	cbz	r3, 12710 <health_get_registered+0x90>
		u8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   126b2:	4620      	mov	r0, r4
   126b4:	f012 fbaf 	bl	24e16 <net_buf_simple_tailroom>
   126b8:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   126ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   126be:	6822      	ldr	r2, [r4, #0]
		u8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   126c0:	f88d 000f 	strb.w	r0, [sp, #15]
   126c4:	88a3      	ldrh	r3, [r4, #4]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   126c6:	f10d 000f 	add.w	r0, sp, #15
   126ca:	9000      	str	r0, [sp, #0]
   126cc:	f8d1 8004 	ldr.w	r8, [r1, #4]
   126d0:	4413      	add	r3, r2
   126d2:	4639      	mov	r1, r7
   126d4:	462a      	mov	r2, r5
   126d6:	4630      	mov	r0, r6
   126d8:	47c0      	blx	r8
		if (err) {
   126da:	4601      	mov	r1, r0
   126dc:	b180      	cbz	r0, 12700 <health_get_registered+0x80>
			BT_ERR("Failed to get faults (err %d)", err);
   126de:	2301      	movs	r3, #1
   126e0:	f04f 0200 	mov.w	r2, #0
   126e4:	f363 0207 	bfi	r2, r3, #0, #8
   126e8:	4811      	ldr	r0, [pc, #68]	; (12730 <health_get_registered+0xb0>)
   126ea:	4b12      	ldr	r3, [pc, #72]	; (12734 <health_get_registered+0xb4>)
   126ec:	1a1b      	subs	r3, r3, r0
   126ee:	08db      	lsrs	r3, r3, #3
   126f0:	f363 128f 	bfi	r2, r3, #6, #10
   126f4:	4810      	ldr	r0, [pc, #64]	; (12738 <health_get_registered+0xb8>)
   126f6:	f00e fa92 	bl	20c1e <log_1>
		*test_id = HEALTH_TEST_STANDARD;
   126fa:	2300      	movs	r3, #0
   126fc:	702b      	strb	r3, [r5, #0]
}
   126fe:	e004      	b.n	1270a <health_get_registered+0x8a>
			net_buf_simple_add(msg, fault_count);
   12700:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12704:	4620      	mov	r0, r4
   12706:	f012 fae1 	bl	24ccc <net_buf_simple_add>
}
   1270a:	b004      	add	sp, #16
   1270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No callback for getting faults");
   12710:	2302      	movs	r3, #2
   12712:	f04f 0100 	mov.w	r1, #0
   12716:	f363 0107 	bfi	r1, r3, #0, #8
   1271a:	4a05      	ldr	r2, [pc, #20]	; (12730 <health_get_registered+0xb0>)
   1271c:	4b05      	ldr	r3, [pc, #20]	; (12734 <health_get_registered+0xb4>)
   1271e:	4807      	ldr	r0, [pc, #28]	; (1273c <health_get_registered+0xbc>)
   12720:	1a9b      	subs	r3, r3, r2
   12722:	08db      	lsrs	r3, r3, #3
   12724:	f363 118f 	bfi	r1, r3, #6, #10
   12728:	f00e fa6c 	bl	20c04 <log_0>
   1272c:	e7e5      	b.n	126fa <health_get_registered+0x7a>
   1272e:	bf00      	nop
   12730:	00025880 	.word	0x00025880
   12734:	00025938 	.word	0x00025938
   12738:	00029c65 	.word	0x00029c65
   1273c:	00029c83 	.word	0x00029c83

00012740 <health_fault_test>:
{
   12740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12744:	4615      	mov	r5, r2
   12746:	b08e      	sub	sp, #56	; 0x38
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12748:	ab05      	add	r3, sp, #20
   1274a:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
	struct bt_mesh_health_srv *srv = model->user_data;
   1274e:	f8d0 8018 	ldr.w	r8, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12752:	9302      	str	r3, [sp, #8]
{
   12754:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   12756:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12758:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
   1275c:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   1275e:	f012 fb32 	bl	24dc6 <net_buf_simple_pull_u8>
   12762:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   12764:	4628      	mov	r0, r5
   12766:	f012 fb36 	bl	24dd6 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   1276a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1276e:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_test) {
   12770:	b1c3      	cbz	r3, 127a4 <health_fault_test+0x64>
   12772:	68db      	ldr	r3, [r3, #12]
   12774:	b1b3      	cbz	r3, 127a4 <health_fault_test+0x64>
		err = srv->cb->fault_test(model, test_id, company_id);
   12776:	4602      	mov	r2, r0
   12778:	4639      	mov	r1, r7
   1277a:	4620      	mov	r0, r4
   1277c:	4798      	blx	r3
		if (err) {
   1277e:	4601      	mov	r1, r0
   12780:	b180      	cbz	r0, 127a4 <health_fault_test+0x64>
			BT_WARN("Running fault test failed with err %d", err);
   12782:	2302      	movs	r3, #2
   12784:	f04f 0200 	mov.w	r2, #0
   12788:	f363 0207 	bfi	r2, r3, #0, #8
   1278c:	4814      	ldr	r0, [pc, #80]	; (127e0 <health_fault_test+0xa0>)
   1278e:	4b15      	ldr	r3, [pc, #84]	; (127e4 <health_fault_test+0xa4>)
   12790:	1a1b      	subs	r3, r3, r0
   12792:	08db      	lsrs	r3, r3, #3
   12794:	f363 128f 	bfi	r2, r3, #6, #10
   12798:	4813      	ldr	r0, [pc, #76]	; (127e8 <health_fault_test+0xa8>)
   1279a:	f00e fa40 	bl	20c1e <log_1>
}
   1279e:	b00e      	add	sp, #56	; 0x38
   127a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	health_get_registered(model, company_id, &sdu);
   127a4:	aa02      	add	r2, sp, #8
   127a6:	4629      	mov	r1, r5
   127a8:	4620      	mov	r0, r4
   127aa:	f7ff ff69 	bl	12680 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   127ae:	2300      	movs	r3, #0
   127b0:	9300      	str	r3, [sp, #0]
   127b2:	aa02      	add	r2, sp, #8
   127b4:	4631      	mov	r1, r6
   127b6:	4620      	mov	r0, r4
   127b8:	f011 f962 	bl	23a80 <bt_mesh_model_send>
   127bc:	2800      	cmp	r0, #0
   127be:	d0ee      	beq.n	1279e <health_fault_test+0x5e>
		BT_ERR("Unable to send Health Current Status response");
   127c0:	2301      	movs	r3, #1
   127c2:	f04f 0100 	mov.w	r1, #0
   127c6:	f363 0107 	bfi	r1, r3, #0, #8
   127ca:	4a05      	ldr	r2, [pc, #20]	; (127e0 <health_fault_test+0xa0>)
   127cc:	4b05      	ldr	r3, [pc, #20]	; (127e4 <health_fault_test+0xa4>)
   127ce:	4807      	ldr	r0, [pc, #28]	; (127ec <health_fault_test+0xac>)
   127d0:	1a9b      	subs	r3, r3, r2
   127d2:	08db      	lsrs	r3, r3, #3
   127d4:	f363 118f 	bfi	r1, r3, #6, #10
   127d8:	f00e fa14 	bl	20c04 <log_0>
   127dc:	e7df      	b.n	1279e <health_fault_test+0x5e>
   127de:	bf00      	nop
   127e0:	00025880 	.word	0x00025880
   127e4:	00025938 	.word	0x00025938
   127e8:	00029c11 	.word	0x00029c11
   127ec:	00029c37 	.word	0x00029c37

000127f0 <health_pub_update>:
	{ OP_ATTENTION_SET_UNREL,      1,   attention_set_unrel },
	BT_MESH_MODEL_OP_END,
};

static int health_pub_update(struct bt_mesh_model *mod)
{
   127f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   127f4:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   127f6:	f8d0 a018 	ldr.w	sl, [r0, #24]
	size_t count;

	BT_DBG("");

	count = health_get_current(mod, pub->msg);
   127fa:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   127fc:	2104      	movs	r1, #4
{
   127fe:	4681      	mov	r9, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   12800:	4620      	mov	r0, r4
   12802:	f011 f914 	bl	23a2e <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   12806:	2101      	movs	r1, #1
   12808:	4620      	mov	r0, r4
   1280a:	f012 fa5f 	bl	24ccc <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   1280e:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   12810:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   12812:	4620      	mov	r0, r4
   12814:	f012 fa5a 	bl	24ccc <net_buf_simple_add>
   12818:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
   1281a:	f7fd f8e1 	bl	f9e0 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   1281e:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   12822:	4680      	mov	r8, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   12824:	2b00      	cmp	r3, #0
   12826:	d045      	beq.n	128b4 <health_pub_update+0xc4>
   12828:	681b      	ldr	r3, [r3, #0]
   1282a:	2b00      	cmp	r3, #0
   1282c:	d042      	beq.n	128b4 <health_pub_update+0xc4>
		fault_count = net_buf_simple_tailroom(msg);
   1282e:	4620      	mov	r0, r4
   12830:	f012 faf1 	bl	24e16 <net_buf_simple_tailroom>
   12834:	f88d 000d 	strb.w	r0, [sp, #13]
   12838:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   1283a:	f8da 1004 	ldr.w	r1, [sl, #4]
   1283e:	88a3      	ldrh	r3, [r4, #4]
   12840:	f10d 000d 	add.w	r0, sp, #13
   12844:	9000      	str	r0, [sp, #0]
   12846:	f8d1 a000 	ldr.w	sl, [r1]
   1284a:	4413      	add	r3, r2
   1284c:	4639      	mov	r1, r7
   1284e:	f10d 020e 	add.w	r2, sp, #14
   12852:	4648      	mov	r0, r9
   12854:	47d0      	blx	sl
		if (err) {
   12856:	4601      	mov	r1, r0
   12858:	b1b8      	cbz	r0, 1288a <health_pub_update+0x9a>
			BT_ERR("Failed to get faults (err %d)", err);
   1285a:	2301      	movs	r3, #1
   1285c:	f04f 0200 	mov.w	r2, #0
   12860:	f363 0207 	bfi	r2, r3, #0, #8
   12864:	481b      	ldr	r0, [pc, #108]	; (128d4 <health_pub_update+0xe4>)
   12866:	4b1c      	ldr	r3, [pc, #112]	; (128d8 <health_pub_update+0xe8>)
   12868:	1a1b      	subs	r3, r3, r0
   1286a:	08db      	lsrs	r3, r3, #3
   1286c:	f363 128f 	bfi	r2, r3, #6, #10
   12870:	481a      	ldr	r0, [pc, #104]	; (128dc <health_pub_update+0xec>)
   12872:	f00e f9d4 	bl	20c1e <log_1>
		sys_put_le16(comp->cid, company_ptr);
   12876:	f8b8 3000 	ldrh.w	r3, [r8]
	dst[0] = val;
   1287a:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   1287c:	0a1b      	lsrs	r3, r3, #8
   1287e:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
   12880:	2300      	movs	r3, #0
   12882:	703b      	strb	r3, [r7, #0]
		fault_count = 0U;
   12884:	f88d 300d 	strb.w	r3, [sp, #13]
   12888:	e009      	b.n	1289e <health_pub_update+0xae>
			sys_put_le16(company_id, company_ptr);
   1288a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   1288e:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   12890:	0a1b      	lsrs	r3, r3, #8
   12892:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
   12894:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12898:	4620      	mov	r0, r4
   1289a:	f012 fa17 	bl	24ccc <net_buf_simple_add>
	return fault_count;
   1289e:	f89d 200d 	ldrb.w	r2, [sp, #13]
	if (!count) {
   128a2:	b91a      	cbnz	r2, 128ac <health_pub_update+0xbc>
		pub->period_div = 0;
   128a4:	7af3      	ldrb	r3, [r6, #11]
   128a6:	f362 0303 	bfi	r3, r2, #0, #4
   128aa:	72f3      	strb	r3, [r6, #11]
	}

	return 0;
}
   128ac:	2000      	movs	r0, #0
   128ae:	b004      	add	sp, #16
   128b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No callback for getting faults");
   128b4:	2302      	movs	r3, #2
   128b6:	f04f 0100 	mov.w	r1, #0
   128ba:	f363 0107 	bfi	r1, r3, #0, #8
   128be:	4a05      	ldr	r2, [pc, #20]	; (128d4 <health_pub_update+0xe4>)
   128c0:	4b05      	ldr	r3, [pc, #20]	; (128d8 <health_pub_update+0xe8>)
   128c2:	4807      	ldr	r0, [pc, #28]	; (128e0 <health_pub_update+0xf0>)
   128c4:	1a9b      	subs	r3, r3, r2
   128c6:	08db      	lsrs	r3, r3, #3
   128c8:	f363 118f 	bfi	r1, r3, #6, #10
   128cc:	f00e f99a 	bl	20c04 <log_0>
   128d0:	e7d1      	b.n	12876 <health_pub_update+0x86>
   128d2:	bf00      	nop
   128d4:	00025880 	.word	0x00025880
   128d8:	00025938 	.word	0x00025938
   128dc:	00029c65 	.word	0x00029c65
   128e0:	00029c83 	.word	0x00029c83

000128e4 <send_health_period_status>:
{
   128e4:	b530      	push	{r4, r5, lr}
   128e6:	4604      	mov	r4, r0
   128e8:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   128ea:	ab03      	add	r3, sp, #12
   128ec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   128f0:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   128f2:	a805      	add	r0, sp, #20
   128f4:	f248 0137 	movw	r1, #32823	; 0x8037
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   128f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   128fc:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   128fe:	f011 f896 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   12902:	68a3      	ldr	r3, [r4, #8]
   12904:	7ad9      	ldrb	r1, [r3, #11]
   12906:	a805      	add	r0, sp, #20
   12908:	f001 010f 	and.w	r1, r1, #15
   1290c:	f012 f9ed 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12910:	2300      	movs	r3, #0
   12912:	9300      	str	r3, [sp, #0]
   12914:	aa05      	add	r2, sp, #20
   12916:	4629      	mov	r1, r5
   12918:	4620      	mov	r0, r4
   1291a:	f011 f8b1 	bl	23a80 <bt_mesh_model_send>
   1291e:	b168      	cbz	r0, 1293c <send_health_period_status+0x58>
		BT_ERR("Unable to send Health Period Status");
   12920:	2301      	movs	r3, #1
   12922:	f04f 0100 	mov.w	r1, #0
   12926:	f363 0107 	bfi	r1, r3, #0, #8
   1292a:	4a05      	ldr	r2, [pc, #20]	; (12940 <send_health_period_status+0x5c>)
   1292c:	4b05      	ldr	r3, [pc, #20]	; (12944 <send_health_period_status+0x60>)
   1292e:	4806      	ldr	r0, [pc, #24]	; (12948 <send_health_period_status+0x64>)
   12930:	1a9b      	subs	r3, r3, r2
   12932:	08db      	lsrs	r3, r3, #3
   12934:	f363 118f 	bfi	r1, r3, #6, #10
   12938:	f00e f964 	bl	20c04 <log_0>
}
   1293c:	b009      	add	sp, #36	; 0x24
   1293e:	bd30      	pop	{r4, r5, pc}
   12940:	00025880 	.word	0x00025880
   12944:	00025938 	.word	0x00025938
   12948:	00029cdd 	.word	0x00029cdd

0001294c <send_attention_status>:
{
   1294c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1294e:	4605      	mov	r5, r0
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   12950:	6980      	ldr	r0, [r0, #24]
   12952:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   12954:	ab03      	add	r3, sp, #12
   12956:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1295a:	3014      	adds	r0, #20
   1295c:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   12960:	460e      	mov	r6, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   12962:	9305      	str	r3, [sp, #20]
   12964:	f00c faec 	bl	1ef40 <z_timeout_remaining>
   12968:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1296c:	4607      	mov	r7, r0
	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   1296e:	f248 0107 	movw	r1, #32775	; 0x8007
   12972:	a805      	add	r0, sp, #20
   12974:	f011 f85b 	bl	23a2e <bt_mesh_model_msg_init>
   12978:	2264      	movs	r2, #100	; 0x64
   1297a:	2300      	movs	r3, #0
   1297c:	fb87 0104 	smull	r0, r1, r7, r4
   12980:	f7ed fbfe 	bl	180 <__aeabi_uldivmod>
	time = k_delayed_work_remaining_get(&srv->attn_timer) / 1000;
   12984:	fb90 f1f4 	sdiv	r1, r0, r4
	net_buf_simple_add_u8(&msg, time);
   12988:	a805      	add	r0, sp, #20
   1298a:	b2c9      	uxtb	r1, r1
   1298c:	f012 f9ad 	bl	24cea <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12990:	2300      	movs	r3, #0
   12992:	9300      	str	r3, [sp, #0]
   12994:	aa05      	add	r2, sp, #20
   12996:	4631      	mov	r1, r6
   12998:	4628      	mov	r0, r5
   1299a:	f011 f871 	bl	23a80 <bt_mesh_model_send>
   1299e:	b168      	cbz	r0, 129bc <send_attention_status+0x70>
		BT_ERR("Unable to send Attention Status");
   129a0:	2301      	movs	r3, #1
   129a2:	f04f 0100 	mov.w	r1, #0
   129a6:	f363 0107 	bfi	r1, r3, #0, #8
   129aa:	4a05      	ldr	r2, [pc, #20]	; (129c0 <send_attention_status+0x74>)
   129ac:	4b05      	ldr	r3, [pc, #20]	; (129c4 <send_attention_status+0x78>)
   129ae:	4806      	ldr	r0, [pc, #24]	; (129c8 <send_attention_status+0x7c>)
   129b0:	1a9b      	subs	r3, r3, r2
   129b2:	08db      	lsrs	r3, r3, #3
   129b4:	f363 118f 	bfi	r1, r3, #6, #10
   129b8:	f00e f924 	bl	20c04 <log_0>
}
   129bc:	b009      	add	sp, #36	; 0x24
   129be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129c0:	00025880 	.word	0x00025880
   129c4:	00025938 	.word	0x00025938
   129c8:	00029cbd 	.word	0x00029cbd

000129cc <health_fault_clear.part.2>:
		BT_ERR("Unable to send Health Current Status response");
   129cc:	2301      	movs	r3, #1
   129ce:	f04f 0100 	mov.w	r1, #0
   129d2:	f363 0107 	bfi	r1, r3, #0, #8
   129d6:	4a04      	ldr	r2, [pc, #16]	; (129e8 <health_fault_clear.part.2+0x1c>)
   129d8:	4b04      	ldr	r3, [pc, #16]	; (129ec <health_fault_clear.part.2+0x20>)
   129da:	4805      	ldr	r0, [pc, #20]	; (129f0 <health_fault_clear.part.2+0x24>)
   129dc:	1a9b      	subs	r3, r3, r2
   129de:	08db      	lsrs	r3, r3, #3
   129e0:	f363 118f 	bfi	r1, r3, #6, #10
   129e4:	f00e b90e 	b.w	20c04 <log_0>
   129e8:	00025880 	.word	0x00025880
   129ec:	00025938 	.word	0x00025938
   129f0:	00029c37 	.word	0x00029c37

000129f4 <bt_mesh_health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

int bt_mesh_health_srv_init(struct bt_mesh_model *model, bool primary)
{
   129f4:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   129f6:	6984      	ldr	r4, [r0, #24]
{
   129f8:	4605      	mov	r5, r0
   129fa:	460e      	mov	r6, r1

	if (!srv) {
   129fc:	b99c      	cbnz	r4, 12a26 <bt_mesh_health_srv_init+0x32>
		if (!primary) {
   129fe:	b909      	cbnz	r1, 12a04 <bt_mesh_health_srv_init+0x10>

	if (primary) {
		health_srv = srv;
	}

	return 0;
   12a00:	2000      	movs	r0, #0
   12a02:	e00f      	b.n	12a24 <bt_mesh_health_srv_init+0x30>
		BT_ERR("No Health Server context provided");
   12a04:	2301      	movs	r3, #1
   12a06:	f04f 0100 	mov.w	r1, #0
   12a0a:	f363 0107 	bfi	r1, r3, #0, #8
   12a0e:	4a14      	ldr	r2, [pc, #80]	; (12a60 <bt_mesh_health_srv_init+0x6c>)
   12a10:	4b14      	ldr	r3, [pc, #80]	; (12a64 <bt_mesh_health_srv_init+0x70>)
   12a12:	4815      	ldr	r0, [pc, #84]	; (12a68 <bt_mesh_health_srv_init+0x74>)
   12a14:	1a9b      	subs	r3, r3, r2
   12a16:	08db      	lsrs	r3, r3, #3
   12a18:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Health Server has no publication support");
   12a1c:	f00e f8f2 	bl	20c04 <log_0>
		return -EINVAL;
   12a20:	f06f 0015 	mvn.w	r0, #21
}
   12a24:	bd70      	pop	{r4, r5, r6, pc}
	if (!model->pub) {
   12a26:	6883      	ldr	r3, [r0, #8]
   12a28:	b963      	cbnz	r3, 12a44 <bt_mesh_health_srv_init+0x50>
		BT_ERR("Health Server has no publication support");
   12a2a:	2301      	movs	r3, #1
   12a2c:	f04f 0100 	mov.w	r1, #0
   12a30:	f363 0107 	bfi	r1, r3, #0, #8
   12a34:	4a0a      	ldr	r2, [pc, #40]	; (12a60 <bt_mesh_health_srv_init+0x6c>)
   12a36:	4b0b      	ldr	r3, [pc, #44]	; (12a64 <bt_mesh_health_srv_init+0x70>)
   12a38:	480c      	ldr	r0, [pc, #48]	; (12a6c <bt_mesh_health_srv_init+0x78>)
   12a3a:	1a9b      	subs	r3, r3, r2
   12a3c:	08db      	lsrs	r3, r3, #3
   12a3e:	f363 118f 	bfi	r1, r3, #6, #10
   12a42:	e7eb      	b.n	12a1c <bt_mesh_health_srv_init+0x28>
	model->pub->update = health_pub_update;
   12a44:	4a0a      	ldr	r2, [pc, #40]	; (12a70 <bt_mesh_health_srv_init+0x7c>)
   12a46:	615a      	str	r2, [r3, #20]
	k_delayed_work_init(&srv->attn_timer, attention_off);
   12a48:	490a      	ldr	r1, [pc, #40]	; (12a74 <bt_mesh_health_srv_init+0x80>)
   12a4a:	f104 0008 	add.w	r0, r4, #8
   12a4e:	f012 fcf9 	bl	25444 <k_delayed_work_init>
	srv->model = model;
   12a52:	6025      	str	r5, [r4, #0]
	if (primary) {
   12a54:	2e00      	cmp	r6, #0
   12a56:	d0d3      	beq.n	12a00 <bt_mesh_health_srv_init+0xc>
		health_srv = srv;
   12a58:	4b07      	ldr	r3, [pc, #28]	; (12a78 <bt_mesh_health_srv_init+0x84>)
   12a5a:	601c      	str	r4, [r3, #0]
   12a5c:	e7d0      	b.n	12a00 <bt_mesh_health_srv_init+0xc>
   12a5e:	bf00      	nop
   12a60:	00025880 	.word	0x00025880
   12a64:	00025938 	.word	0x00025938
   12a68:	00029bc6 	.word	0x00029bc6
   12a6c:	00029be8 	.word	0x00029be8
   12a70:	000127f1 	.word	0x000127f1
   12a74:	00023e23 	.word	0x00023e23
   12a78:	20000d14 	.word	0x20000d14

00012a7c <bt_mesh_attention>:

void bt_mesh_attention(struct bt_mesh_model *model, u8_t time)
{
   12a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a80:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   12a82:	4605      	mov	r5, r0
   12a84:	bb28      	cbnz	r0, 12ad2 <bt_mesh_attention+0x56>
		srv = health_srv;
   12a86:	4b1a      	ldr	r3, [pc, #104]	; (12af0 <bt_mesh_attention+0x74>)
   12a88:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
   12a8a:	b97c      	cbnz	r4, 12aac <bt_mesh_attention+0x30>
			BT_WARN("No Health Server available");
   12a8c:	2302      	movs	r3, #2
   12a8e:	f04f 0100 	mov.w	r1, #0
   12a92:	f363 0107 	bfi	r1, r3, #0, #8
   12a96:	4a17      	ldr	r2, [pc, #92]	; (12af4 <bt_mesh_attention+0x78>)
   12a98:	4b17      	ldr	r3, [pc, #92]	; (12af8 <bt_mesh_attention+0x7c>)
   12a9a:	4818      	ldr	r0, [pc, #96]	; (12afc <bt_mesh_attention+0x80>)
   12a9c:	1a9b      	subs	r3, r3, r2
   12a9e:	08db      	lsrs	r3, r3, #3
   12aa0:	f363 118f 	bfi	r1, r3, #6, #10

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
   12aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("No Health Server available");
   12aa8:	f00e b8ac 	b.w	20c04 <log_0>
		model = srv->model;
   12aac:	6825      	ldr	r5, [r4, #0]
	if (time) {
   12aae:	f104 0608 	add.w	r6, r4, #8
   12ab2:	b187      	cbz	r7, 12ad6 <bt_mesh_attention+0x5a>
		if (srv->cb && srv->cb->attn_on) {
   12ab4:	6863      	ldr	r3, [r4, #4]
   12ab6:	b11b      	cbz	r3, 12ac0 <bt_mesh_attention+0x44>
   12ab8:	691b      	ldr	r3, [r3, #16]
   12aba:	b10b      	cbz	r3, 12ac0 <bt_mesh_attention+0x44>
			srv->cb->attn_on(model);
   12abc:	4628      	mov	r0, r5
   12abe:	4798      	blx	r3
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12ac4:	437a      	muls	r2, r7
   12ac6:	4631      	mov	r1, r6
   12ac8:	480d      	ldr	r0, [pc, #52]	; (12b00 <bt_mesh_attention+0x84>)
}
   12aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12ace:	f00c b96f 	b.w	1edb0 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
   12ad2:	6984      	ldr	r4, [r0, #24]
   12ad4:	e7eb      	b.n	12aae <bt_mesh_attention+0x32>
		k_delayed_work_cancel(&srv->attn_timer);
   12ad6:	4630      	mov	r0, r6
   12ad8:	f012 fcbc 	bl	25454 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
   12adc:	6863      	ldr	r3, [r4, #4]
   12ade:	b12b      	cbz	r3, 12aec <bt_mesh_attention+0x70>
   12ae0:	695b      	ldr	r3, [r3, #20]
   12ae2:	b11b      	cbz	r3, 12aec <bt_mesh_attention+0x70>
			srv->cb->attn_off(model);
   12ae4:	4628      	mov	r0, r5
}
   12ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
   12aea:	4718      	bx	r3
}
   12aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12af0:	20000d14 	.word	0x20000d14
   12af4:	00025880 	.word	0x00025880
   12af8:	00025938 	.word	0x00025938
   12afc:	00029bab 	.word	0x00029bab
   12b00:	20001d2c 	.word	0x20001d2c

00012b04 <key_update_find>:
	schedule_store(BT_MESH_RPL_PENDING);
}

static struct key_update *key_update_find(bool app_key, u16_t key_idx,
					  struct key_update **free_slot)
{
   12b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b06:	4c0f      	ldr	r4, [pc, #60]	; (12b44 <key_update_find+0x40>)
	struct key_update *match;
	int i;

	match = NULL;
	*free_slot = NULL;
   12b08:	2300      	movs	r3, #0
{
   12b0a:	4607      	mov	r7, r0
	*free_slot = NULL;
   12b0c:	6013      	str	r3, [r2, #0]
	match = NULL;
   12b0e:	4618      	mov	r0, r3
   12b10:	4626      	mov	r6, r4

	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
		struct key_update *update = &key_updates[i];

		if (!update->valid) {
   12b12:	eb06 0543 	add.w	r5, r6, r3, lsl #1
   12b16:	786d      	ldrb	r5, [r5, #1]
   12b18:	f015 0f10 	tst.w	r5, #16
   12b1c:	d106      	bne.n	12b2c <key_update_find+0x28>
			*free_slot = update;
   12b1e:	6014      	str	r4, [r2, #0]
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   12b20:	3301      	adds	r3, #1
   12b22:	2b04      	cmp	r3, #4
   12b24:	f104 0402 	add.w	r4, r4, #2
   12b28:	d1f3      	bne.n	12b12 <key_update_find+0xe>
			match = update;
		}
	}

	return match;
}
   12b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (update->app_key != app_key) {
   12b2c:	f3c5 1540 	ubfx	r5, r5, #5, #1
   12b30:	42bd      	cmp	r5, r7
   12b32:	d1f5      	bne.n	12b20 <key_update_find+0x1c>
		if (update->key_idx == key_idx) {
   12b34:	f836 5013 	ldrh.w	r5, [r6, r3, lsl #1]
   12b38:	f3c5 050b 	ubfx	r5, r5, #0, #12
			match = update;
   12b3c:	428d      	cmp	r5, r1
   12b3e:	bf08      	it	eq
   12b40:	4620      	moveq	r0, r4
   12b42:	e7ed      	b.n	12b20 <key_update_find+0x1c>
   12b44:	20001e82 	.word	0x20001e82

00012b48 <mesh_x_set>:
{
   12b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b4a:	460f      	mov	r7, r1
   12b4c:	4616      	mov	r6, r2
	len = settings_val_read_cb(val_ctx, out, read_len);
   12b4e:	f00f f80b 	bl	21b68 <settings_val_read_cb>
	if (len < 0) {
   12b52:	4d1a      	ldr	r5, [pc, #104]	; (12bbc <mesh_x_set+0x74>)
   12b54:	4b1a      	ldr	r3, [pc, #104]	; (12bc0 <mesh_x_set+0x78>)
   12b56:	1e04      	subs	r4, r0, #0
   12b58:	eba5 0503 	sub.w	r5, r5, r3
   12b5c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   12b60:	da0c      	bge.n	12b7c <mesh_x_set+0x34>
		BT_ERR("Failed to read value (err %d)", len);
   12b62:	f04f 0200 	mov.w	r2, #0
   12b66:	2301      	movs	r3, #1
   12b68:	f363 0207 	bfi	r2, r3, #0, #8
   12b6c:	f365 128f 	bfi	r2, r5, #6, #10
   12b70:	4621      	mov	r1, r4
   12b72:	4814      	ldr	r0, [pc, #80]	; (12bc4 <mesh_x_set+0x7c>)
   12b74:	f00e f853 	bl	20c1e <log_1>
}
   12b78:	4620      	mov	r0, r4
   12b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_HEXDUMP_DBG(out, len, "val");
   12b7c:	2204      	movs	r2, #4
   12b7e:	f04f 0300 	mov.w	r3, #0
   12b82:	f362 0307 	bfi	r3, r2, #0, #8
   12b86:	f365 138f 	bfi	r3, r5, #6, #10
   12b8a:	4622      	mov	r2, r4
   12b8c:	4639      	mov	r1, r7
   12b8e:	480e      	ldr	r0, [pc, #56]	; (12bc8 <mesh_x_set+0x80>)
   12b90:	f00e f897 	bl	20cc2 <log_hexdump>
	if (len != read_len) {
   12b94:	42b4      	cmp	r4, r6
   12b96:	d00e      	beq.n	12bb6 <mesh_x_set+0x6e>
		BT_ERR("Unexpected value length (%d != %zu)", len, read_len);
   12b98:	2201      	movs	r2, #1
   12b9a:	f04f 0300 	mov.w	r3, #0
   12b9e:	f362 0307 	bfi	r3, r2, #0, #8
   12ba2:	4621      	mov	r1, r4
   12ba4:	f365 138f 	bfi	r3, r5, #6, #10
   12ba8:	4632      	mov	r2, r6
   12baa:	4808      	ldr	r0, [pc, #32]	; (12bcc <mesh_x_set+0x84>)
   12bac:	f00e f84b 	bl	20c46 <log_2>
		return -EINVAL;
   12bb0:	f06f 0415 	mvn.w	r4, #21
   12bb4:	e7e0      	b.n	12b78 <mesh_x_set+0x30>
	return 0;
   12bb6:	2400      	movs	r4, #0
   12bb8:	e7de      	b.n	12b78 <mesh_x_set+0x30>
   12bba:	bf00      	nop
   12bbc:	00025960 	.word	0x00025960
   12bc0:	00025880 	.word	0x00025880
   12bc4:	0002a255 	.word	0x0002a255
   12bc8:	0002a273 	.word	0x0002a273
   12bcc:	0002a277 	.word	0x0002a277

00012bd0 <rpl_set>:
{
   12bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bd4:	4617      	mov	r7, r2
   12bd6:	4e51      	ldr	r6, [pc, #324]	; (12d1c <rpl_set+0x14c>)
   12bd8:	4a51      	ldr	r2, [pc, #324]	; (12d20 <rpl_set+0x150>)
   12bda:	460b      	mov	r3, r1
   12bdc:	1ab6      	subs	r6, r6, r2
	if (argc < 1) {
   12bde:	1e01      	subs	r1, r0, #0
{
   12be0:	b086      	sub	sp, #24
   12be2:	f3c6 06c9 	ubfx	r6, r6, #3, #10
	if (argc < 1) {
   12be6:	dc0f      	bgt.n	12c08 <rpl_set+0x38>
		BT_ERR("Invalid argc (%d)", argc);
   12be8:	2301      	movs	r3, #1
   12bea:	f04f 0200 	mov.w	r2, #0
   12bee:	f363 0207 	bfi	r2, r3, #0, #8
   12bf2:	f366 128f 	bfi	r2, r6, #6, #10
   12bf6:	484b      	ldr	r0, [pc, #300]	; (12d24 <rpl_set+0x154>)
   12bf8:	f00e f811 	bl	20c1e <log_1>
		return -ENOENT;
   12bfc:	f06f 0501 	mvn.w	r5, #1
}
   12c00:	4628      	mov	r0, r5
   12c02:	b006      	add	sp, #24
   12c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	src = strtol(argv[0], NULL, 16);
   12c08:	2210      	movs	r2, #16
   12c0a:	6818      	ldr	r0, [r3, #0]
   12c0c:	2100      	movs	r1, #0
   12c0e:	f00f f85f 	bl	21cd0 <strtol>
		if (bt_mesh.rpl[i].src == src) {
   12c12:	4a45      	ldr	r2, [pc, #276]	; (12d28 <rpl_set+0x158>)
	src = strtol(argv[0], NULL, 16);
   12c14:	4680      	mov	r8, r0
   12c16:	fa1f f980 	uxth.w	r9, r0
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   12c1a:	2300      	movs	r3, #0
   12c1c:	4692      	mov	sl, r2
		if (bt_mesh.rpl[i].src == src) {
   12c1e:	f832 1033 	ldrh.w	r1, [r2, r3, lsl #3]
   12c22:	4549      	cmp	r1, r9
   12c24:	d119      	bne.n	12c5a <rpl_set+0x8a>
			return &bt_mesh.rpl[i];
   12c26:	4c40      	ldr	r4, [pc, #256]	; (12d28 <rpl_set+0x158>)
   12c28:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (settings_val_get_len_cb(val_ctx) == 0) {
   12c2c:	4638      	mov	r0, r7
   12c2e:	f00e ffb8 	bl	21ba2 <settings_val_get_len_cb>
   12c32:	4605      	mov	r5, r0
   12c34:	bb20      	cbnz	r0, 12c80 <rpl_set+0xb0>
		BT_DBG("val (null)");
   12c36:	f04f 0200 	mov.w	r2, #0
   12c3a:	2304      	movs	r3, #4
   12c3c:	f363 0207 	bfi	r2, r3, #0, #8
   12c40:	f366 128f 	bfi	r2, r6, #6, #10
   12c44:	4939      	ldr	r1, [pc, #228]	; (12d2c <rpl_set+0x15c>)
   12c46:	483a      	ldr	r0, [pc, #232]	; (12d30 <rpl_set+0x160>)
   12c48:	f00d ffe9 	bl	20c1e <log_1>
		if (entry) {
   12c4c:	b154      	cbz	r4, 12c64 <rpl_set+0x94>
			(void)memset(entry, 0, sizeof(*entry));
   12c4e:	2208      	movs	r2, #8
   12c50:	4629      	mov	r1, r5
   12c52:	4620      	mov	r0, r4
   12c54:	f00f f941 	bl	21eda <memset>
   12c58:	e7d2      	b.n	12c00 <rpl_set+0x30>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   12c5a:	3301      	adds	r3, #1
   12c5c:	2b0a      	cmp	r3, #10
   12c5e:	d1de      	bne.n	12c1e <rpl_set+0x4e>
	return NULL;
   12c60:	2400      	movs	r4, #0
   12c62:	e7e3      	b.n	12c2c <rpl_set+0x5c>
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
   12c64:	2302      	movs	r3, #2
   12c66:	f04f 0200 	mov.w	r2, #0
   12c6a:	f363 0207 	bfi	r2, r3, #0, #8
   12c6e:	f366 128f 	bfi	r2, r6, #6, #10
   12c72:	fa1f f188 	uxth.w	r1, r8
   12c76:	482f      	ldr	r0, [pc, #188]	; (12d34 <rpl_set+0x164>)
   12c78:	f00d ffd1 	bl	20c1e <log_1>
		return 0;
   12c7c:	4625      	mov	r5, r4
   12c7e:	e7bf      	b.n	12c00 <rpl_set+0x30>
	if (!entry) {
   12c80:	b954      	cbnz	r4, 12c98 <rpl_set+0xc8>
		if (!bt_mesh.rpl[i].src) {
   12c82:	f83a 3034 	ldrh.w	r3, [sl, r4, lsl #3]
   12c86:	b9d3      	cbnz	r3, 12cbe <rpl_set+0xee>
			bt_mesh.rpl[i].src = src;
   12c88:	4b2b      	ldr	r3, [pc, #172]	; (12d38 <rpl_set+0x168>)
   12c8a:	346b      	adds	r4, #107	; 0x6b
   12c8c:	00e4      	lsls	r4, r4, #3
   12c8e:	191a      	adds	r2, r3, r4
			return &bt_mesh.rpl[i];
   12c90:	3404      	adds	r4, #4
			bt_mesh.rpl[i].src = src;
   12c92:	f8a2 9004 	strh.w	r9, [r2, #4]
			return &bt_mesh.rpl[i];
   12c96:	441c      	add	r4, r3
	err = mesh_x_set(val_ctx, &rpl, sizeof(rpl));
   12c98:	2204      	movs	r2, #4
   12c9a:	eb0d 0102 	add.w	r1, sp, r2
   12c9e:	4638      	mov	r0, r7
   12ca0:	f7ff ff52 	bl	12b48 <mesh_x_set>
	if (err) {
   12ca4:	4605      	mov	r5, r0
   12ca6:	b1e0      	cbz	r0, 12ce2 <rpl_set+0x112>
		BT_ERR("Failed to set `net`");
   12ca8:	2301      	movs	r3, #1
   12caa:	f04f 0100 	mov.w	r1, #0
   12cae:	f363 0107 	bfi	r1, r3, #0, #8
   12cb2:	f366 118f 	bfi	r1, r6, #6, #10
   12cb6:	4821      	ldr	r0, [pc, #132]	; (12d3c <rpl_set+0x16c>)
   12cb8:	f00d ffa4 	bl	20c04 <log_0>
		return err;
   12cbc:	e7a0      	b.n	12c00 <rpl_set+0x30>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   12cbe:	3401      	adds	r4, #1
   12cc0:	2c0a      	cmp	r4, #10
   12cc2:	d1de      	bne.n	12c82 <rpl_set+0xb2>
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
   12cc4:	2301      	movs	r3, #1
   12cc6:	f04f 0200 	mov.w	r2, #0
   12cca:	f363 0207 	bfi	r2, r3, #0, #8
   12cce:	f366 128f 	bfi	r2, r6, #6, #10
   12cd2:	fa1f f188 	uxth.w	r1, r8
   12cd6:	481a      	ldr	r0, [pc, #104]	; (12d40 <rpl_set+0x170>)
   12cd8:	f00d ffa1 	bl	20c1e <log_1>
			return -ENOMEM;
   12cdc:	f06f 050b 	mvn.w	r5, #11
   12ce0:	e78e      	b.n	12c00 <rpl_set+0x30>
	entry->old_iv = rpl.old_iv;
   12ce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	entry->seq = rpl.seq;
   12ce6:	9a01      	ldr	r2, [sp, #4]
	entry->old_iv = rpl.old_iv;
   12ce8:	f3c3 0300 	ubfx	r3, r3, #0, #1
   12cec:	b2d9      	uxtb	r1, r3
   12cee:	70a3      	strb	r3, [r4, #2]
	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
   12cf0:	2004      	movs	r0, #4
   12cf2:	f04f 0300 	mov.w	r3, #0
   12cf6:	f360 0307 	bfi	r3, r0, #0, #8
   12cfa:	480c      	ldr	r0, [pc, #48]	; (12d2c <rpl_set+0x15c>)
   12cfc:	9002      	str	r0, [sp, #8]
   12cfe:	8820      	ldrh	r0, [r4, #0]
   12d00:	9105      	str	r1, [sp, #20]
	entry->seq = rpl.seq;
   12d02:	f3c2 0217 	ubfx	r2, r2, #0, #24
	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
   12d06:	e9cd 0203 	strd	r0, r2, [sp, #12]
	entry->seq = rpl.seq;
   12d0a:	6062      	str	r2, [r4, #4]
	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
   12d0c:	f366 138f 	bfi	r3, r6, #6, #10
   12d10:	2204      	movs	r2, #4
   12d12:	a902      	add	r1, sp, #8
   12d14:	480b      	ldr	r0, [pc, #44]	; (12d44 <rpl_set+0x174>)
   12d16:	f00d ffc9 	bl	20cac <log_n>
	return 0;
   12d1a:	e771      	b.n	12c00 <rpl_set+0x30>
   12d1c:	00025960 	.word	0x00025960
   12d20:	00025880 	.word	0x00025880
   12d24:	0002a594 	.word	0x0002a594
   12d28:	200073bc 	.word	0x200073bc
   12d2c:	00029d2b 	.word	0x00029d2b
   12d30:	0002a5a6 	.word	0x0002a5a6
   12d34:	0002a5b5 	.word	0x0002a5b5
   12d38:	20007060 	.word	0x20007060
   12d3c:	0002a5d9 	.word	0x0002a5d9
   12d40:	0002a61c 	.word	0x0002a61c
   12d44:	0002a5ed 	.word	0x0002a5ed

00012d48 <hb_pub_set>:
{
   12d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12d4a:	4617      	mov	r7, r2
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
   12d4c:	f7ff fbb8 	bl	124c0 <bt_mesh_hb_pub_get>
	if (!pub) {
   12d50:	4606      	mov	r6, r0
   12d52:	2800      	cmp	r0, #0
   12d54:	d053      	beq.n	12dfe <hb_pub_set+0xb6>
	if (settings_val_get_len_cb(val_ctx) == 0) {
   12d56:	4638      	mov	r0, r7
   12d58:	f00e ff23 	bl	21ba2 <settings_val_get_len_cb>
   12d5c:	4d29      	ldr	r5, [pc, #164]	; (12e04 <hb_pub_set+0xbc>)
   12d5e:	4b2a      	ldr	r3, [pc, #168]	; (12e08 <hb_pub_set+0xc0>)
   12d60:	1aed      	subs	r5, r5, r3
   12d62:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   12d66:	4604      	mov	r4, r0
   12d68:	b9c0      	cbnz	r0, 12d9c <hb_pub_set+0x54>
		BT_DBG("val (null)");
   12d6a:	2304      	movs	r3, #4
   12d6c:	f04f 0200 	mov.w	r2, #0
   12d70:	f363 0207 	bfi	r2, r3, #0, #8
   12d74:	f365 128f 	bfi	r2, r5, #6, #10
   12d78:	4924      	ldr	r1, [pc, #144]	; (12e0c <hb_pub_set+0xc4>)
   12d7a:	4825      	ldr	r0, [pc, #148]	; (12e10 <hb_pub_set+0xc8>)
   12d7c:	f00d ff4f 	bl	20c1e <log_1>
		BT_DBG("Cleared heartbeat publication");
   12d80:	f04f 0200 	mov.w	r2, #0
   12d84:	2304      	movs	r3, #4
		pub->period = 0;
   12d86:	e9c6 4408 	strd	r4, r4, [r6, #32]
		BT_DBG("Cleared heartbeat publication");
   12d8a:	f363 0207 	bfi	r2, r3, #0, #8
   12d8e:	491f      	ldr	r1, [pc, #124]	; (12e0c <hb_pub_set+0xc4>)
   12d90:	4820      	ldr	r0, [pc, #128]	; (12e14 <hb_pub_set+0xcc>)
   12d92:	f365 128f 	bfi	r2, r5, #6, #10
	BT_DBG("Restored heartbeat publication");
   12d96:	f00d ff42 	bl	20c1e <log_1>
	return 0;
   12d9a:	e010      	b.n	12dbe <hb_pub_set+0x76>
	err = mesh_x_set(val_ctx, &hb_val, sizeof(hb_val));
   12d9c:	2208      	movs	r2, #8
   12d9e:	4669      	mov	r1, sp
   12da0:	4638      	mov	r0, r7
   12da2:	f7ff fed1 	bl	12b48 <mesh_x_set>
	if (err) {
   12da6:	4604      	mov	r4, r0
   12da8:	b160      	cbz	r0, 12dc4 <hb_pub_set+0x7c>
		BT_ERR("Failed to set \'hb_val\'");
   12daa:	f04f 0100 	mov.w	r1, #0
   12dae:	2301      	movs	r3, #1
   12db0:	f363 0107 	bfi	r1, r3, #0, #8
   12db4:	f365 118f 	bfi	r1, r5, #6, #10
   12db8:	4817      	ldr	r0, [pc, #92]	; (12e18 <hb_pub_set+0xd0>)
   12dba:	f00d ff23 	bl	20c04 <log_0>
}
   12dbe:	4620      	mov	r0, r4
   12dc0:	b003      	add	sp, #12
   12dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pub->dst = hb_val.dst;
   12dc4:	f8bd 3000 	ldrh.w	r3, [sp]
   12dc8:	8433      	strh	r3, [r6, #32]
	pub->feat = hb_val.feat;
   12dca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   12dce:	84f3      	strh	r3, [r6, #38]	; 0x26
	pub->net_idx = hb_val.net_idx;
   12dd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	pub->period = hb_val.period;
   12dd4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12dd8:	84b2      	strh	r2, [r6, #36]	; 0x24
	pub->net_idx = hb_val.net_idx;
   12dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
   12dde:	8533      	strh	r3, [r6, #40]	; 0x28
	if (hb_val.indefinite) {
   12de0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	BT_DBG("Restored heartbeat publication");
   12de4:	4909      	ldr	r1, [pc, #36]	; (12e0c <hb_pub_set+0xc4>)
   12de6:	480d      	ldr	r0, [pc, #52]	; (12e1c <hb_pub_set+0xd4>)
	if (hb_val.indefinite) {
   12de8:	f343 1300 	sbfx	r3, r3, #4, #1
   12dec:	8473      	strh	r3, [r6, #34]	; 0x22
	BT_DBG("Restored heartbeat publication");
   12dee:	f04f 0200 	mov.w	r2, #0
   12df2:	2304      	movs	r3, #4
   12df4:	f363 0207 	bfi	r2, r3, #0, #8
   12df8:	f365 128f 	bfi	r2, r5, #6, #10
   12dfc:	e7cb      	b.n	12d96 <hb_pub_set+0x4e>
		return -ENOENT;
   12dfe:	f06f 0401 	mvn.w	r4, #1
   12e02:	e7dc      	b.n	12dbe <hb_pub_set+0x76>
   12e04:	00025960 	.word	0x00025960
   12e08:	00025880 	.word	0x00025880
   12e0c:	00029d4b 	.word	0x00029d4b
   12e10:	0002a5a6 	.word	0x0002a5a6
   12e14:	0002a101 	.word	0x0002a101
   12e18:	0002a123 	.word	0x0002a123
   12e1c:	0002a13a 	.word	0x0002a13a

00012e20 <net_key_set>:
{
   12e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12e24:	460b      	mov	r3, r1
   12e26:	b08b      	sub	sp, #44	; 0x2c
	net_idx = strtol(argv[0], NULL, 16);
   12e28:	6818      	ldr	r0, [r3, #0]
   12e2a:	4c61      	ldr	r4, [pc, #388]	; (12fb0 <net_key_set+0x190>)
   12e2c:	2100      	movs	r1, #0
{
   12e2e:	4690      	mov	r8, r2
	net_idx = strtol(argv[0], NULL, 16);
   12e30:	2210      	movs	r2, #16
   12e32:	f00e ff4d 	bl	21cd0 <strtol>
   12e36:	fa1f f980 	uxth.w	r9, r0
   12e3a:	4606      	mov	r6, r0
	sub = bt_mesh_subnet_get(net_idx);
   12e3c:	4648      	mov	r0, r9
   12e3e:	f7f8 feaf 	bl	bba0 <bt_mesh_subnet_get>
   12e42:	4607      	mov	r7, r0
	if (settings_val_get_len_cb(val_ctx) == 0) {
   12e44:	4640      	mov	r0, r8
   12e46:	f00e feac 	bl	21ba2 <settings_val_get_len_cb>
   12e4a:	4b5a      	ldr	r3, [pc, #360]	; (12fb4 <net_key_set+0x194>)
   12e4c:	1ae4      	subs	r4, r4, r3
   12e4e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   12e52:	4605      	mov	r5, r0
   12e54:	bb68      	cbnz	r0, 12eb2 <net_key_set+0x92>
		BT_DBG("val (null)");
   12e56:	2304      	movs	r3, #4
   12e58:	f04f 0200 	mov.w	r2, #0
   12e5c:	f363 0207 	bfi	r2, r3, #0, #8
   12e60:	4955      	ldr	r1, [pc, #340]	; (12fb8 <net_key_set+0x198>)
   12e62:	4856      	ldr	r0, [pc, #344]	; (12fbc <net_key_set+0x19c>)
   12e64:	f364 128f 	bfi	r2, r4, #6, #10
   12e68:	f00d fed9 	bl	20c1e <log_1>
		if (!sub) {
   12e6c:	4649      	mov	r1, r9
   12e6e:	b97f      	cbnz	r7, 12e90 <net_key_set+0x70>
			BT_ERR("No subnet with NetKeyIndex 0x%03x", net_idx);
   12e70:	2301      	movs	r3, #1
   12e72:	f04f 0200 	mov.w	r2, #0
   12e76:	f363 0207 	bfi	r2, r3, #0, #8
   12e7a:	f364 128f 	bfi	r2, r4, #6, #10
   12e7e:	4850      	ldr	r0, [pc, #320]	; (12fc0 <net_key_set+0x1a0>)
   12e80:	f00d fecd 	bl	20c1e <log_1>
			return -ENOENT;
   12e84:	f06f 0501 	mvn.w	r5, #1
}
   12e88:	4628      	mov	r0, r5
   12e8a:	b00b      	add	sp, #44	; 0x2c
   12e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_DBG("Deleting NetKeyIndex 0x%03x", net_idx);
   12e90:	2204      	movs	r2, #4
   12e92:	f04f 0300 	mov.w	r3, #0
   12e96:	f362 0307 	bfi	r3, r2, #0, #8
   12e9a:	f364 138f 	bfi	r3, r4, #6, #10
   12e9e:	464a      	mov	r2, r9
   12ea0:	4945      	ldr	r1, [pc, #276]	; (12fb8 <net_key_set+0x198>)
   12ea2:	4848      	ldr	r0, [pc, #288]	; (12fc4 <net_key_set+0x1a4>)
   12ea4:	f00d fecf 	bl	20c46 <log_2>
		bt_mesh_subnet_del(sub, false);
   12ea8:	4629      	mov	r1, r5
   12eaa:	4638      	mov	r0, r7
   12eac:	f7ff fb16 	bl	124dc <bt_mesh_subnet_del>
		return 0;
   12eb0:	e7ea      	b.n	12e88 <net_key_set+0x68>
	err = mesh_x_set(val_ctx, &key, sizeof(key));
   12eb2:	2221      	movs	r2, #33	; 0x21
   12eb4:	a901      	add	r1, sp, #4
   12eb6:	4640      	mov	r0, r8
   12eb8:	f7ff fe46 	bl	12b48 <mesh_x_set>
	if (err) {
   12ebc:	4605      	mov	r5, r0
   12ebe:	b150      	cbz	r0, 12ed6 <net_key_set+0xb6>
		BT_ERR("Failed to set \'net-key\'");
   12ec0:	2301      	movs	r3, #1
   12ec2:	f04f 0100 	mov.w	r1, #0
   12ec6:	f363 0107 	bfi	r1, r3, #0, #8
   12eca:	f364 118f 	bfi	r1, r4, #6, #10
   12ece:	483e      	ldr	r0, [pc, #248]	; (12fc8 <net_key_set+0x1a8>)
   12ed0:	f00d fe98 	bl	20c04 <log_0>
		return err;
   12ed4:	e7d8      	b.n	12e88 <net_key_set+0x68>
	if (sub) {
   12ed6:	bbcf      	cbnz	r7, 12f4c <net_key_set+0x12c>
		if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
   12ed8:	4b3c      	ldr	r3, [pc, #240]	; (12fcc <net_key_set+0x1ac>)
   12eda:	f8b3 11b0 	ldrh.w	r1, [r3, #432]	; 0x1b0
   12ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12ee2:	4291      	cmp	r1, r2
   12ee4:	4698      	mov	r8, r3
   12ee6:	d004      	beq.n	12ef2 <net_key_set+0xd2>
   12ee8:	f8b3 3294 	ldrh.w	r3, [r3, #660]	; 0x294
   12eec:	4293      	cmp	r3, r2
   12eee:	d152      	bne.n	12f96 <net_key_set+0x176>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   12ef0:	2001      	movs	r0, #1
			sub = &bt_mesh.sub[i];
   12ef2:	27e4      	movs	r7, #228	; 0xe4
   12ef4:	4347      	muls	r7, r0
	sub->kr_flag = key.kr_flag;
   12ef6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	sub->net_idx = net_idx;
   12efa:	eb08 0207 	add.w	r2, r8, r7
	sub->kr_flag = key.kr_flag;
   12efe:	f3c3 0100 	ubfx	r1, r3, #0, #1
	memcpy(sub->keys[0].net, &key.val[0], 16);
   12f02:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
	sub->kr_phase = key.kr_phase;
   12f06:	f3c3 0346 	ubfx	r3, r3, #1, #7
   12f0a:	f882 31b3 	strb.w	r3, [r2, #435]	; 0x1b3
	sub->net_idx = net_idx;
   12f0e:	f8a2 91b0 	strh.w	r9, [r2, #432]	; 0x1b0
	sub->kr_flag = key.kr_flag;
   12f12:	f882 11b2 	strb.w	r1, [r2, #434]	; 0x1b2
	memcpy(sub->keys[0].net, &key.val[0], 16);
   12f16:	4440      	add	r0, r8
   12f18:	f10d 0105 	add.w	r1, sp, #5
   12f1c:	2210      	movs	r2, #16
   12f1e:	f00e ffb2 	bl	21e86 <memcpy>
	memcpy(sub->keys[1].net, &key.val[1], 16);
   12f22:	f207 201d 	addw	r0, r7, #541	; 0x21d
   12f26:	f10d 0115 	add.w	r1, sp, #21
   12f2a:	2210      	movs	r2, #16
   12f2c:	4440      	add	r0, r8
   12f2e:	f00e ffaa 	bl	21e86 <memcpy>
	BT_DBG("NetKeyIndex 0x%03x recovered from storage", net_idx);
   12f32:	2204      	movs	r2, #4
   12f34:	f04f 0300 	mov.w	r3, #0
   12f38:	f362 0307 	bfi	r3, r2, #0, #8
   12f3c:	f364 138f 	bfi	r3, r4, #6, #10
   12f40:	b2b2      	uxth	r2, r6
   12f42:	491d      	ldr	r1, [pc, #116]	; (12fb8 <net_key_set+0x198>)
   12f44:	4822      	ldr	r0, [pc, #136]	; (12fd0 <net_key_set+0x1b0>)
   12f46:	f00d fe7e 	bl	20c46 <log_2>
	return 0;
   12f4a:	e79d      	b.n	12e88 <net_key_set+0x68>
		BT_DBG("Updating existing NetKeyIndex 0x%03x", net_idx);
   12f4c:	2204      	movs	r2, #4
   12f4e:	f04f 0300 	mov.w	r3, #0
   12f52:	f362 0307 	bfi	r3, r2, #0, #8
   12f56:	f364 138f 	bfi	r3, r4, #6, #10
   12f5a:	b2b2      	uxth	r2, r6
   12f5c:	4916      	ldr	r1, [pc, #88]	; (12fb8 <net_key_set+0x198>)
   12f5e:	481d      	ldr	r0, [pc, #116]	; (12fd4 <net_key_set+0x1b4>)
   12f60:	f00d fe71 	bl	20c46 <log_2>
		sub->kr_flag = key.kr_flag;
   12f64:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12f68:	f3c3 0300 	ubfx	r3, r3, #0, #1
   12f6c:	77bb      	strb	r3, [r7, #30]
		sub->kr_phase = key.kr_phase;
   12f6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12f72:	f3c3 0346 	ubfx	r3, r3, #1, #7
		memcpy(sub->keys[0].net, &key.val[0], 16);
   12f76:	f10d 0105 	add.w	r1, sp, #5
		sub->kr_phase = key.kr_phase;
   12f7a:	77fb      	strb	r3, [r7, #31]
		memcpy(sub->keys[0].net, &key.val[0], 16);
   12f7c:	2210      	movs	r2, #16
   12f7e:	f107 0030 	add.w	r0, r7, #48	; 0x30
   12f82:	f00e ff80 	bl	21e86 <memcpy>
		memcpy(sub->keys[1].net, &key.val[1], 16);
   12f86:	2210      	movs	r2, #16
   12f88:	f10d 0115 	add.w	r1, sp, #21
   12f8c:	f107 0089 	add.w	r0, r7, #137	; 0x89
   12f90:	f00e ff79 	bl	21e86 <memcpy>
		return 0;
   12f94:	e778      	b.n	12e88 <net_key_set+0x68>
		BT_ERR("No space to allocate a new subnet");
   12f96:	2301      	movs	r3, #1
   12f98:	f04f 0100 	mov.w	r1, #0
   12f9c:	f363 0107 	bfi	r1, r3, #0, #8
   12fa0:	f364 118f 	bfi	r1, r4, #6, #10
   12fa4:	480c      	ldr	r0, [pc, #48]	; (12fd8 <net_key_set+0x1b8>)
   12fa6:	f00d fe2d 	bl	20c04 <log_0>
		return -ENOMEM;
   12faa:	f06f 050b 	mvn.w	r5, #11
   12fae:	e76b      	b.n	12e88 <net_key_set+0x68>
   12fb0:	00025960 	.word	0x00025960
   12fb4:	00025880 	.word	0x00025880
   12fb8:	00029d33 	.word	0x00029d33
   12fbc:	0002a5a6 	.word	0x0002a5a6
   12fc0:	0002a469 	.word	0x0002a469
   12fc4:	0002a48b 	.word	0x0002a48b
   12fc8:	0002a4ab 	.word	0x0002a4ab
   12fcc:	20007060 	.word	0x20007060
   12fd0:	0002a4ec 	.word	0x0002a4ec
   12fd4:	0002a4c3 	.word	0x0002a4c3
   12fd8:	0002a51a 	.word	0x0002a51a

00012fdc <store_net_key>:
{
   12fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_DBG("NetKeyIndex 0x%03x NetKey %s", sub->net_idx,
   12fe0:	2304      	movs	r3, #4
   12fe2:	f04f 0600 	mov.w	r6, #0
   12fe6:	f363 0607 	bfi	r6, r3, #0, #8
   12fea:	f100 0730 	add.w	r7, r0, #48	; 0x30
   12fee:	4b2a      	ldr	r3, [pc, #168]	; (13098 <store_net_key+0xbc>)
   12ff0:	4c2a      	ldr	r4, [pc, #168]	; (1309c <store_net_key+0xc0>)
   12ff2:	f8b0 801c 	ldrh.w	r8, [r0, #28]
{
   12ff6:	b090      	sub	sp, #64	; 0x40
   12ff8:	4605      	mov	r5, r0
	BT_DBG("NetKeyIndex 0x%03x NetKey %s", sub->net_idx,
   12ffa:	2110      	movs	r1, #16
   12ffc:	4638      	mov	r0, r7
   12ffe:	1ae4      	subs	r4, r4, r3
   13000:	f7f2 fe84 	bl	5d0c <bt_hex_real>
   13004:	f7f0 fcfa 	bl	39fc <log_strdup>
   13008:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1300c:	f364 168f 	bfi	r6, r4, #6, #10
   13010:	4603      	mov	r3, r0
   13012:	4642      	mov	r2, r8
   13014:	4922      	ldr	r1, [pc, #136]	; (130a0 <store_net_key+0xc4>)
   13016:	4823      	ldr	r0, [pc, #140]	; (130a4 <store_net_key+0xc8>)
   13018:	f8ad 6000 	strh.w	r6, [sp]
   1301c:	f00d fe2b 	bl	20c76 <log_3>
	memcpy(&key.val[0], sub->keys[0].net, 16);
   13020:	2210      	movs	r2, #16
   13022:	4639      	mov	r1, r7
   13024:	f10d 001d 	add.w	r0, sp, #29
   13028:	f00e ff2d 	bl	21e86 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
   1302c:	2210      	movs	r2, #16
   1302e:	f105 0189 	add.w	r1, r5, #137	; 0x89
   13032:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
   13036:	f00e ff26 	bl	21e86 <memcpy>
	key.kr_flag = sub->kr_flag;
   1303a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1303e:	7faa      	ldrb	r2, [r5, #30]
   13040:	f362 0300 	bfi	r3, r2, #0, #1
	key.kr_phase = sub->kr_phase;
   13044:	7fea      	ldrb	r2, [r5, #31]
   13046:	f362 0347 	bfi	r3, r2, #1, #7
   1304a:	f88d 301c 	strb.w	r3, [sp, #28]
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", sub->net_idx);
   1304e:	4a16      	ldr	r2, [pc, #88]	; (130a8 <store_net_key+0xcc>)
   13050:	8bab      	ldrh	r3, [r5, #28]
   13052:	2114      	movs	r1, #20
   13054:	a802      	add	r0, sp, #8
   13056:	f7ef ff37 	bl	2ec8 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   1305a:	2221      	movs	r2, #33	; 0x21
   1305c:	a907      	add	r1, sp, #28
   1305e:	a802      	add	r0, sp, #8
   13060:	f7f1 f87a 	bl	4158 <settings_save_one>
	if (err) {
   13064:	b160      	cbz	r0, 13080 <store_net_key+0xa4>
		BT_ERR("Failed to store NetKey value");
   13066:	f04f 0100 	mov.w	r1, #0
   1306a:	2301      	movs	r3, #1
   1306c:	f363 0107 	bfi	r1, r3, #0, #8
   13070:	f364 118f 	bfi	r1, r4, #6, #10
   13074:	480d      	ldr	r0, [pc, #52]	; (130ac <store_net_key+0xd0>)
   13076:	f00d fdc5 	bl	20c04 <log_0>
}
   1307a:	b010      	add	sp, #64	; 0x40
   1307c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_DBG("Stored NetKey value");
   13080:	2304      	movs	r3, #4
   13082:	f04f 0200 	mov.w	r2, #0
   13086:	f363 0207 	bfi	r2, r3, #0, #8
   1308a:	f364 128f 	bfi	r2, r4, #6, #10
   1308e:	4904      	ldr	r1, [pc, #16]	; (130a0 <store_net_key+0xc4>)
   13090:	4807      	ldr	r0, [pc, #28]	; (130b0 <store_net_key+0xd4>)
   13092:	f00d fdc4 	bl	20c1e <log_1>
}
   13096:	e7f0      	b.n	1307a <store_net_key+0x9e>
   13098:	00025880 	.word	0x00025880
   1309c:	00025960 	.word	0x00025960
   130a0:	00029e6c 	.word	0x00029e6c
   130a4:	0002a6d7 	.word	0x0002a6d7
   130a8:	0002a6f8 	.word	0x0002a6f8
   130ac:	0002a70a 	.word	0x0002a70a
   130b0:	0002a727 	.word	0x0002a727

000130b4 <store_app_key>:
{
   130b4:	b510      	push	{r4, lr}
   130b6:	b08e      	sub	sp, #56	; 0x38
	key.net_idx = app->net_idx;
   130b8:	8803      	ldrh	r3, [r0, #0]
   130ba:	f8ad 3014 	strh.w	r3, [sp, #20]
{
   130be:	4604      	mov	r4, r0
	key.updated = app->updated;
   130c0:	7903      	ldrb	r3, [r0, #4]
   130c2:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
   130c6:	1d81      	adds	r1, r0, #6
   130c8:	2210      	movs	r2, #16
   130ca:	f10d 0017 	add.w	r0, sp, #23
   130ce:	f00e feda 	bl	21e86 <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
   130d2:	f104 0117 	add.w	r1, r4, #23
   130d6:	2210      	movs	r2, #16
   130d8:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   130dc:	f00e fed3 	bl	21e86 <memcpy>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app->app_idx);
   130e0:	8863      	ldrh	r3, [r4, #2]
   130e2:	4a18      	ldr	r2, [pc, #96]	; (13144 <store_app_key+0x90>)
   130e4:	2114      	movs	r1, #20
   130e6:	4668      	mov	r0, sp
   130e8:	f7ef feee 	bl	2ec8 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   130ec:	a905      	add	r1, sp, #20
   130ee:	2223      	movs	r2, #35	; 0x23
   130f0:	4668      	mov	r0, sp
   130f2:	f7f1 f831 	bl	4158 <settings_save_one>
	if (err) {
   130f6:	4914      	ldr	r1, [pc, #80]	; (13148 <store_app_key+0x94>)
   130f8:	4b14      	ldr	r3, [pc, #80]	; (1314c <store_app_key+0x98>)
   130fa:	1ac9      	subs	r1, r1, r3
   130fc:	f3c1 01c9 	ubfx	r1, r1, #3, #10
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
   13100:	f04f 0400 	mov.w	r4, #0
	if (err) {
   13104:	b170      	cbz	r0, 13124 <store_app_key+0x70>
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
   13106:	2301      	movs	r3, #1
   13108:	f363 0407 	bfi	r4, r3, #0, #8
   1310c:	4668      	mov	r0, sp
   1310e:	f361 148f 	bfi	r4, r1, #6, #10
   13112:	f7f0 fc73 	bl	39fc <log_strdup>
   13116:	4622      	mov	r2, r4
   13118:	4601      	mov	r1, r0
   1311a:	480d      	ldr	r0, [pc, #52]	; (13150 <store_app_key+0x9c>)
   1311c:	f00d fd7f 	bl	20c1e <log_1>
}
   13120:	b00e      	add	sp, #56	; 0x38
   13122:	bd10      	pop	{r4, pc}
		BT_DBG("Stored AppKey %s value", log_strdup(path));
   13124:	2304      	movs	r3, #4
   13126:	f363 0407 	bfi	r4, r3, #0, #8
   1312a:	4668      	mov	r0, sp
   1312c:	f361 148f 	bfi	r4, r1, #6, #10
   13130:	f7f0 fc64 	bl	39fc <log_strdup>
   13134:	4623      	mov	r3, r4
   13136:	4602      	mov	r2, r0
   13138:	4906      	ldr	r1, [pc, #24]	; (13154 <store_app_key+0xa0>)
   1313a:	4807      	ldr	r0, [pc, #28]	; (13158 <store_app_key+0xa4>)
   1313c:	f00d fd83 	bl	20c46 <log_2>
}
   13140:	e7ee      	b.n	13120 <store_app_key+0x6c>
   13142:	bf00      	nop
   13144:	0002a68a 	.word	0x0002a68a
   13148:	00025960 	.word	0x00025960
   1314c:	00025880 	.word	0x00025880
   13150:	0002a69c 	.word	0x0002a69c
   13154:	00029e7a 	.word	0x00029e7a
   13158:	0002a6bc 	.word	0x0002a6bc

0001315c <clear_net_key>:
{
   1315c:	b530      	push	{r4, r5, lr}
	BT_DBG("NetKeyIndex 0x%03x", net_idx);
   1315e:	2204      	movs	r2, #4
   13160:	f04f 0300 	mov.w	r3, #0
   13164:	f362 0307 	bfi	r3, r2, #0, #8
   13168:	4c18      	ldr	r4, [pc, #96]	; (131cc <clear_net_key+0x70>)
   1316a:	4a19      	ldr	r2, [pc, #100]	; (131d0 <clear_net_key+0x74>)
   1316c:	4919      	ldr	r1, [pc, #100]	; (131d4 <clear_net_key+0x78>)
   1316e:	1aa4      	subs	r4, r4, r2
   13170:	f3c4 04c9 	ubfx	r4, r4, #3, #10
{
   13174:	b087      	sub	sp, #28
	BT_DBG("NetKeyIndex 0x%03x", net_idx);
   13176:	4602      	mov	r2, r0
{
   13178:	4605      	mov	r5, r0
	BT_DBG("NetKeyIndex 0x%03x", net_idx);
   1317a:	f364 138f 	bfi	r3, r4, #6, #10
   1317e:	4816      	ldr	r0, [pc, #88]	; (131d8 <clear_net_key+0x7c>)
   13180:	f00d fd61 	bl	20c46 <log_2>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   13184:	462b      	mov	r3, r5
   13186:	4a15      	ldr	r2, [pc, #84]	; (131dc <clear_net_key+0x80>)
   13188:	2114      	movs	r1, #20
   1318a:	a801      	add	r0, sp, #4
   1318c:	f7ef fe9c 	bl	2ec8 <snprintk>
	err = settings_delete(path);
   13190:	a801      	add	r0, sp, #4
   13192:	f00e fcac 	bl	21aee <settings_delete>
	if (err) {
   13196:	b160      	cbz	r0, 131b2 <clear_net_key+0x56>
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
   13198:	f04f 0200 	mov.w	r2, #0
   1319c:	2301      	movs	r3, #1
   1319e:	f363 0207 	bfi	r2, r3, #0, #8
   131a2:	f364 128f 	bfi	r2, r4, #6, #10
   131a6:	4629      	mov	r1, r5
   131a8:	480d      	ldr	r0, [pc, #52]	; (131e0 <clear_net_key+0x84>)
   131aa:	f00d fd38 	bl	20c1e <log_1>
}
   131ae:	b007      	add	sp, #28
   131b0:	bd30      	pop	{r4, r5, pc}
		BT_DBG("Cleared NetKeyIndex 0x%03x", net_idx);
   131b2:	2204      	movs	r2, #4
   131b4:	f04f 0300 	mov.w	r3, #0
   131b8:	f362 0307 	bfi	r3, r2, #0, #8
   131bc:	f364 138f 	bfi	r3, r4, #6, #10
   131c0:	462a      	mov	r2, r5
   131c2:	4904      	ldr	r1, [pc, #16]	; (131d4 <clear_net_key+0x78>)
   131c4:	4807      	ldr	r0, [pc, #28]	; (131e4 <clear_net_key+0x88>)
   131c6:	f00d fd3e 	bl	20c46 <log_2>
}
   131ca:	e7f0      	b.n	131ae <clear_net_key+0x52>
   131cc:	00025960 	.word	0x00025960
   131d0:	00025880 	.word	0x00025880
   131d4:	00029e5e 	.word	0x00029e5e
   131d8:	0002a05e 	.word	0x0002a05e
   131dc:	0002a6f8 	.word	0x0002a6f8
   131e0:	0002a075 	.word	0x0002a075
   131e4:	0002a098 	.word	0x0002a098

000131e8 <mod_set>:
{
   131e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   131ec:	461f      	mov	r7, r3
   131ee:	4ca0      	ldr	r4, [pc, #640]	; (13470 <mod_set+0x288>)
   131f0:	4ba0      	ldr	r3, [pc, #640]	; (13474 <mod_set+0x28c>)
	if (argc < 2) {
   131f2:	2901      	cmp	r1, #1
   131f4:	eba4 0403 	sub.w	r4, r4, r3
{
   131f8:	b087      	sub	sp, #28
   131fa:	4606      	mov	r6, r0
   131fc:	4690      	mov	r8, r2
   131fe:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (argc < 2) {
   13202:	dc0a      	bgt.n	1321a <mod_set+0x32>
		BT_ERR("Too small argc (%d)", argc);
   13204:	f04f 0200 	mov.w	r2, #0
   13208:	2301      	movs	r3, #1
   1320a:	f363 0207 	bfi	r2, r3, #0, #8
   1320e:	489a      	ldr	r0, [pc, #616]	; (13478 <mod_set+0x290>)
   13210:	f364 128f 	bfi	r2, r4, #6, #10
	BT_WARN("Unknown module key %s", argv[1]);
   13214:	f00d fd03 	bl	20c1e <log_1>
   13218:	e02d      	b.n	13276 <mod_set+0x8e>
	mod_key = strtol(argv[0], NULL, 16);
   1321a:	2210      	movs	r2, #16
   1321c:	2100      	movs	r1, #0
   1321e:	f8d8 0000 	ldr.w	r0, [r8]
   13222:	f00e fd55 	bl	21cd0 <strtol>
	BT_DBG("Decoded mod_key 0x%04x as elem_idx %u mod_idx %u",
   13226:	2204      	movs	r2, #4
   13228:	f04f 0300 	mov.w	r3, #0
   1322c:	f362 0307 	bfi	r3, r2, #0, #8
   13230:	4a92      	ldr	r2, [pc, #584]	; (1347c <mod_set+0x294>)
   13232:	9202      	str	r2, [sp, #8]
	elem_idx = mod_key >> 8;
   13234:	f3c0 2907 	ubfx	r9, r0, #8, #8
	BT_DBG("Decoded mod_key 0x%04x as elem_idx %u mod_idx %u",
   13238:	b282      	uxth	r2, r0
   1323a:	b2c5      	uxtb	r5, r0
   1323c:	f364 138f 	bfi	r3, r4, #6, #10
   13240:	e9cd 2903 	strd	r2, r9, [sp, #12]
   13244:	a902      	add	r1, sp, #8
   13246:	2204      	movs	r2, #4
   13248:	488d      	ldr	r0, [pc, #564]	; (13480 <mod_set+0x298>)
   1324a:	9505      	str	r5, [sp, #20]
   1324c:	f00d fd2e 	bl	20cac <log_n>
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   13250:	4630      	mov	r0, r6
   13252:	462a      	mov	r2, r5
   13254:	4649      	mov	r1, r9
   13256:	f7fc f8b1 	bl	f3bc <bt_mesh_model_get>
	if (!mod) {
   1325a:	4606      	mov	r6, r0
   1325c:	b970      	cbnz	r0, 1327c <mod_set+0x94>
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
   1325e:	2201      	movs	r2, #1
   13260:	f04f 0300 	mov.w	r3, #0
   13264:	f362 0307 	bfi	r3, r2, #0, #8
   13268:	f364 138f 	bfi	r3, r4, #6, #10
   1326c:	462a      	mov	r2, r5
   1326e:	4649      	mov	r1, r9
   13270:	4884      	ldr	r0, [pc, #528]	; (13484 <mod_set+0x29c>)
   13272:	f00d fce8 	bl	20c46 <log_2>
	return -ENOENT;
   13276:	f06f 0501 	mvn.w	r5, #1
   1327a:	e039      	b.n	132f0 <mod_set+0x108>
	if (!strcmp(argv[1], "bind")) {
   1327c:	4982      	ldr	r1, [pc, #520]	; (13488 <mod_set+0x2a0>)
   1327e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   13282:	f00e fdcd 	bl	21e20 <strcmp>
   13286:	4605      	mov	r5, r0
   13288:	2800      	cmp	r0, #0
   1328a:	d142      	bne.n	13312 <mod_set+0x12a>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   1328c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13290:	81b3      	strh	r3, [r6, #12]
	if (settings_val_get_len_cb(val_ctx) == 0) {
   13292:	4638      	mov	r0, r7
   13294:	f00e fc85 	bl	21ba2 <settings_val_get_len_cb>
   13298:	b9b0      	cbnz	r0, 132c8 <mod_set+0xe0>
		BT_DBG("val (null)");
   1329a:	2304      	movs	r3, #4
   1329c:	f04f 0200 	mov.w	r2, #0
   132a0:	f363 0207 	bfi	r2, r3, #0, #8
   132a4:	f364 128f 	bfi	r2, r4, #6, #10
   132a8:	4978      	ldr	r1, [pc, #480]	; (1348c <mod_set+0x2a4>)
   132aa:	4879      	ldr	r0, [pc, #484]	; (13490 <mod_set+0x2a8>)
   132ac:	f00d fcb7 	bl	20c1e <log_1>
		BT_DBG("Cleared bindings for model");
   132b0:	f04f 0200 	mov.w	r2, #0
   132b4:	2304      	movs	r3, #4
   132b6:	f363 0207 	bfi	r2, r3, #0, #8
   132ba:	4974      	ldr	r1, [pc, #464]	; (1348c <mod_set+0x2a4>)
   132bc:	4875      	ldr	r0, [pc, #468]	; (13494 <mod_set+0x2ac>)
   132be:	f364 128f 	bfi	r2, r4, #6, #10
		BT_DBG("Cleared publication for model");
   132c2:	f00d fcac 	bl	20c1e <log_1>
		return 0;
   132c6:	e013      	b.n	132f0 <mod_set+0x108>
	len = settings_val_read_cb(val_ctx, mod->keys, sizeof(mod->keys));
   132c8:	f106 010c 	add.w	r1, r6, #12
   132cc:	2202      	movs	r2, #2
   132ce:	4638      	mov	r0, r7
   132d0:	f00e fc4a 	bl	21b68 <settings_val_read_cb>
	if (len < 0) {
   132d4:	1e06      	subs	r6, r0, #0
   132d6:	da0f      	bge.n	132f8 <mod_set+0x110>
		BT_ERR("Failed to read value (err %d)", len);
   132d8:	2301      	movs	r3, #1
   132da:	f04f 0200 	mov.w	r2, #0
   132de:	f363 0207 	bfi	r2, r3, #0, #8
   132e2:	f364 128f 	bfi	r2, r4, #6, #10
   132e6:	4631      	mov	r1, r6
   132e8:	486b      	ldr	r0, [pc, #428]	; (13498 <mod_set+0x2b0>)
   132ea:	f00d fc98 	bl	20c1e <log_1>
		return len;
   132ee:	4635      	mov	r5, r6
}
   132f0:	4628      	mov	r0, r5
   132f2:	b007      	add	sp, #28
   132f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	BT_DBG("Decoded %u bound keys for model", len / sizeof(mod->keys[0]));
   132f8:	2204      	movs	r2, #4
   132fa:	f04f 0300 	mov.w	r3, #0
   132fe:	f362 0307 	bfi	r3, r2, #0, #8
   13302:	4962      	ldr	r1, [pc, #392]	; (1348c <mod_set+0x2a4>)
   13304:	4865      	ldr	r0, [pc, #404]	; (1349c <mod_set+0x2b4>)
   13306:	f364 138f 	bfi	r3, r4, #6, #10
   1330a:	0872      	lsrs	r2, r6, #1
	BT_DBG("Decoded %u subscribed group addresses for model",
   1330c:	f00d fc9b 	bl	20c46 <log_2>
	return 0;
   13310:	e7ee      	b.n	132f0 <mod_set+0x108>
	if (!strcmp(argv[1], "sub")) {
   13312:	4963      	ldr	r1, [pc, #396]	; (134a0 <mod_set+0x2b8>)
   13314:	f8d8 0004 	ldr.w	r0, [r8, #4]
   13318:	f00e fd82 	bl	21e20 <strcmp>
   1331c:	4605      	mov	r5, r0
   1331e:	bb80      	cbnz	r0, 13382 <mod_set+0x19a>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   13320:	360e      	adds	r6, #14
   13322:	4601      	mov	r1, r0
   13324:	2204      	movs	r2, #4
   13326:	4630      	mov	r0, r6
   13328:	f00e fdd7 	bl	21eda <memset>
	if (settings_val_get_len_cb(val_ctx) == 0) {
   1332c:	4638      	mov	r0, r7
   1332e:	f00e fc38 	bl	21ba2 <settings_val_get_len_cb>
   13332:	b9a0      	cbnz	r0, 1335e <mod_set+0x176>
		BT_DBG("val (null)");
   13334:	2304      	movs	r3, #4
   13336:	f04f 0200 	mov.w	r2, #0
   1333a:	f363 0207 	bfi	r2, r3, #0, #8
   1333e:	f364 128f 	bfi	r2, r4, #6, #10
   13342:	4958      	ldr	r1, [pc, #352]	; (134a4 <mod_set+0x2bc>)
   13344:	4852      	ldr	r0, [pc, #328]	; (13490 <mod_set+0x2a8>)
   13346:	f00d fc6a 	bl	20c1e <log_1>
		BT_DBG("Cleared subscriptions for model");
   1334a:	f04f 0200 	mov.w	r2, #0
   1334e:	2304      	movs	r3, #4
   13350:	f363 0207 	bfi	r2, r3, #0, #8
   13354:	f364 128f 	bfi	r2, r4, #6, #10
   13358:	4952      	ldr	r1, [pc, #328]	; (134a4 <mod_set+0x2bc>)
   1335a:	4853      	ldr	r0, [pc, #332]	; (134a8 <mod_set+0x2c0>)
   1335c:	e7b1      	b.n	132c2 <mod_set+0xda>
	len = settings_val_read_cb(val_ctx, mod->groups, sizeof(mod->groups));
   1335e:	4631      	mov	r1, r6
   13360:	2204      	movs	r2, #4
   13362:	4638      	mov	r0, r7
   13364:	f00e fc00 	bl	21b68 <settings_val_read_cb>
	if (len < 0) {
   13368:	1e06      	subs	r6, r0, #0
   1336a:	dbb5      	blt.n	132d8 <mod_set+0xf0>
	BT_DBG("Decoded %u subscribed group addresses for model",
   1336c:	2204      	movs	r2, #4
   1336e:	f04f 0300 	mov.w	r3, #0
   13372:	f362 0307 	bfi	r3, r2, #0, #8
   13376:	f364 138f 	bfi	r3, r4, #6, #10
   1337a:	0872      	lsrs	r2, r6, #1
   1337c:	4949      	ldr	r1, [pc, #292]	; (134a4 <mod_set+0x2bc>)
   1337e:	484b      	ldr	r0, [pc, #300]	; (134ac <mod_set+0x2c4>)
   13380:	e7c4      	b.n	1330c <mod_set+0x124>
	if (!strcmp(argv[1], "pub")) {
   13382:	494b      	ldr	r1, [pc, #300]	; (134b0 <mod_set+0x2c8>)
   13384:	f8d8 0004 	ldr.w	r0, [r8, #4]
   13388:	f00e fd4a 	bl	21e20 <strcmp>
   1338c:	4605      	mov	r5, r0
   1338e:	2800      	cmp	r0, #0
   13390:	d162      	bne.n	13458 <mod_set+0x270>
	if (!mod->pub) {
   13392:	68b3      	ldr	r3, [r6, #8]
   13394:	b963      	cbnz	r3, 133b0 <mod_set+0x1c8>
		BT_WARN("Model has no publication context!");
   13396:	2302      	movs	r3, #2
   13398:	f04f 0100 	mov.w	r1, #0
   1339c:	f363 0107 	bfi	r1, r3, #0, #8
   133a0:	f364 118f 	bfi	r1, r4, #6, #10
   133a4:	4843      	ldr	r0, [pc, #268]	; (134b4 <mod_set+0x2cc>)
   133a6:	f00d fc2d 	bl	20c04 <log_0>
		return -EINVAL;
   133aa:	f06f 0515 	mvn.w	r5, #21
   133ae:	e79f      	b.n	132f0 <mod_set+0x108>
	if (settings_val_get_len_cb(val_ctx) == 0) {
   133b0:	4638      	mov	r0, r7
   133b2:	f00e fbf6 	bl	21ba2 <settings_val_get_len_cb>
   133b6:	b9d0      	cbnz	r0, 133ee <mod_set+0x206>
		BT_DBG("val (null)");
   133b8:	2304      	movs	r3, #4
   133ba:	f04f 0200 	mov.w	r2, #0
   133be:	f363 0207 	bfi	r2, r3, #0, #8
   133c2:	f364 128f 	bfi	r2, r4, #6, #10
   133c6:	493c      	ldr	r1, [pc, #240]	; (134b8 <mod_set+0x2d0>)
   133c8:	4831      	ldr	r0, [pc, #196]	; (13490 <mod_set+0x2a8>)
   133ca:	f00d fc28 	bl	20c1e <log_1>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   133ce:	68b3      	ldr	r3, [r6, #8]
		BT_DBG("Cleared publication for model");
   133d0:	4939      	ldr	r1, [pc, #228]	; (134b8 <mod_set+0x2d0>)
		mod->pub->ttl = 0;
   133d2:	689a      	ldr	r2, [r3, #8]
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   133d4:	605d      	str	r5, [r3, #4]
		mod->pub->ttl = 0;
   133d6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
   133da:	609a      	str	r2, [r3, #8]
		BT_DBG("Cleared publication for model");
   133dc:	f04f 0200 	mov.w	r2, #0
   133e0:	2304      	movs	r3, #4
   133e2:	f363 0207 	bfi	r2, r3, #0, #8
   133e6:	f364 128f 	bfi	r2, r4, #6, #10
   133ea:	4834      	ldr	r0, [pc, #208]	; (134bc <mod_set+0x2d4>)
   133ec:	e769      	b.n	132c2 <mod_set+0xda>
	err = mesh_x_set(val_ctx, &pub, sizeof(pub));
   133ee:	2208      	movs	r2, #8
   133f0:	eb0d 0102 	add.w	r1, sp, r2
   133f4:	4638      	mov	r0, r7
   133f6:	f7ff fba7 	bl	12b48 <mesh_x_set>
	if (err) {
   133fa:	4605      	mov	r5, r0
   133fc:	b150      	cbz	r0, 13414 <mod_set+0x22c>
		BT_ERR("Failed to set \'model-pub\'");
   133fe:	2301      	movs	r3, #1
   13400:	f04f 0100 	mov.w	r1, #0
   13404:	f363 0107 	bfi	r1, r3, #0, #8
   13408:	f364 118f 	bfi	r1, r4, #6, #10
   1340c:	482c      	ldr	r0, [pc, #176]	; (134c0 <mod_set+0x2d8>)
   1340e:	f00d fbf9 	bl	20c04 <log_0>
		return err;
   13412:	e76d      	b.n	132f0 <mod_set+0x108>
	mod->pub->addr = pub.addr;
   13414:	68b0      	ldr	r0, [r6, #8]
   13416:	f8bd 2008 	ldrh.w	r2, [sp, #8]
	mod->pub->key = pub.key;
   1341a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	mod->pub->addr = pub.addr;
   1341e:	8082      	strh	r2, [r0, #4]
	mod->pub->key = pub.key;
   13420:	80c3      	strh	r3, [r0, #6]
	mod->pub->ttl = pub.ttl;
   13422:	6881      	ldr	r1, [r0, #8]
   13424:	9e03      	ldr	r6, [sp, #12]
   13426:	f001 416f 	and.w	r1, r1, #4009754624	; 0xef000000
   1342a:	f026 466f 	bic.w	r6, r6, #4009754624	; 0xef000000
   1342e:	4331      	orrs	r1, r6
   13430:	6081      	str	r1, [r0, #8]
	mod->pub->count = 0;
   13432:	f3c1 6107 	ubfx	r1, r1, #24, #8
   13436:	f365 1147 	bfi	r1, r5, #5, #3
   1343a:	72c1      	strb	r1, [r0, #11]
	BT_DBG("Restored model publication, dst 0x%04x app_idx 0x%03x",
   1343c:	2004      	movs	r0, #4
   1343e:	f04f 0100 	mov.w	r1, #0
   13442:	f360 0107 	bfi	r1, r0, #0, #8
   13446:	f364 118f 	bfi	r1, r4, #6, #10
   1344a:	f8ad 1000 	strh.w	r1, [sp]
   1344e:	481d      	ldr	r0, [pc, #116]	; (134c4 <mod_set+0x2dc>)
   13450:	4919      	ldr	r1, [pc, #100]	; (134b8 <mod_set+0x2d0>)
   13452:	f00d fc10 	bl	20c76 <log_3>
		return mod_set_pub(mod, val_ctx);
   13456:	e74b      	b.n	132f0 <mod_set+0x108>
	BT_WARN("Unknown module key %s", argv[1]);
   13458:	f04f 0200 	mov.w	r2, #0
   1345c:	2302      	movs	r3, #2
   1345e:	f363 0207 	bfi	r2, r3, #0, #8
   13462:	f364 128f 	bfi	r2, r4, #6, #10
   13466:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1346a:	4817      	ldr	r0, [pc, #92]	; (134c8 <mod_set+0x2e0>)
   1346c:	e6d2      	b.n	13214 <mod_set+0x2c>
   1346e:	bf00      	nop
   13470:	00025960 	.word	0x00025960
   13474:	00025880 	.word	0x00025880
   13478:	0002a29b 	.word	0x0002a29b
   1347c:	00029d83 	.word	0x00029d83
   13480:	0002a2af 	.word	0x0002a2af
   13484:	0002a2e4 	.word	0x0002a2e4
   13488:	0002a313 	.word	0x0002a313
   1348c:	00029d5e 	.word	0x00029d5e
   13490:	0002a5a6 	.word	0x0002a5a6
   13494:	0002a318 	.word	0x0002a318
   13498:	0002a255 	.word	0x0002a255
   1349c:	0002a337 	.word	0x0002a337
   134a0:	0002a35b 	.word	0x0002a35b
   134a4:	00029d6b 	.word	0x00029d6b
   134a8:	0002a35f 	.word	0x0002a35f
   134ac:	0002a383 	.word	0x0002a383
   134b0:	0002a3b7 	.word	0x0002a3b7
   134b4:	0002a3bb 	.word	0x0002a3bb
   134b8:	00029d77 	.word	0x00029d77
   134bc:	0002a3dd 	.word	0x0002a3dd
   134c0:	0002a3ff 	.word	0x0002a3ff
   134c4:	0002a419 	.word	0x0002a419
   134c8:	0002a453 	.word	0x0002a453

000134cc <seq_set>:
{
   134cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (settings_val_get_len_cb(val_ctx) == 0) {
   134ce:	4610      	mov	r0, r2
{
   134d0:	4616      	mov	r6, r2
   134d2:	4d23      	ldr	r5, [pc, #140]	; (13560 <seq_set+0x94>)
	if (settings_val_get_len_cb(val_ctx) == 0) {
   134d4:	f00e fb65 	bl	21ba2 <settings_val_get_len_cb>
   134d8:	4b22      	ldr	r3, [pc, #136]	; (13564 <seq_set+0x98>)
   134da:	1aed      	subs	r5, r5, r3
   134dc:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   134e0:	4604      	mov	r4, r0
   134e2:	b978      	cbnz	r0, 13504 <seq_set+0x38>
		BT_DBG("val (null)");
   134e4:	2304      	movs	r3, #4
   134e6:	f04f 0200 	mov.w	r2, #0
   134ea:	f363 0207 	bfi	r2, r3, #0, #8
   134ee:	f365 128f 	bfi	r2, r5, #6, #10
   134f2:	491d      	ldr	r1, [pc, #116]	; (13568 <seq_set+0x9c>)
   134f4:	481d      	ldr	r0, [pc, #116]	; (1356c <seq_set+0xa0>)
   134f6:	f00d fb92 	bl	20c1e <log_1>
		bt_mesh.seq = 0U;
   134fa:	4b1d      	ldr	r3, [pc, #116]	; (13570 <seq_set+0xa4>)
   134fc:	605c      	str	r4, [r3, #4]
}
   134fe:	4620      	mov	r0, r4
   13500:	b002      	add	sp, #8
   13502:	bd70      	pop	{r4, r5, r6, pc}
	err = mesh_x_set(val_ctx, &seq, sizeof(seq));
   13504:	2203      	movs	r2, #3
   13506:	a901      	add	r1, sp, #4
   13508:	4630      	mov	r0, r6
   1350a:	f7ff fb1d 	bl	12b48 <mesh_x_set>
	if (err) {
   1350e:	4604      	mov	r4, r0
   13510:	b150      	cbz	r0, 13528 <seq_set+0x5c>
		BT_ERR("Failed to set \'seq\'");
   13512:	2301      	movs	r3, #1
   13514:	f04f 0100 	mov.w	r1, #0
   13518:	f363 0107 	bfi	r1, r3, #0, #8
   1351c:	f365 118f 	bfi	r1, r5, #6, #10
   13520:	4814      	ldr	r0, [pc, #80]	; (13574 <seq_set+0xa8>)
   13522:	f00d fb6f 	bl	20c04 <log_0>
		return err;
   13526:	e7ea      	b.n	134fe <seq_set+0x32>
		       ((u32_t)seq.val[2] << 16));
   13528:	f89d 2006 	ldrb.w	r2, [sp, #6]
	bt_mesh.seq = ((u32_t)seq.val[0] | ((u32_t)seq.val[1] << 8) |
   1352c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);
   13530:	4811      	ldr	r0, [pc, #68]	; (13578 <seq_set+0xac>)
		       ((u32_t)seq.val[2] << 16));
   13532:	0412      	lsls	r2, r2, #16
	bt_mesh.seq = ((u32_t)seq.val[0] | ((u32_t)seq.val[1] << 8) |
   13534:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   13538:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1353c:	431a      	orrs	r2, r3
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
   1353e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		bt_mesh.seq--;
   13542:	4b0b      	ldr	r3, [pc, #44]	; (13570 <seq_set+0xa4>)
   13544:	327f      	adds	r2, #127	; 0x7f
   13546:	605a      	str	r2, [r3, #4]
	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);
   13548:	2104      	movs	r1, #4
   1354a:	f04f 0300 	mov.w	r3, #0
   1354e:	f361 0307 	bfi	r3, r1, #0, #8
   13552:	f365 138f 	bfi	r3, r5, #6, #10
   13556:	4904      	ldr	r1, [pc, #16]	; (13568 <seq_set+0x9c>)
   13558:	f00d fb75 	bl	20c46 <log_2>
	return 0;
   1355c:	e7cf      	b.n	134fe <seq_set+0x32>
   1355e:	bf00      	nop
   13560:	00025960 	.word	0x00025960
   13564:	00025880 	.word	0x00025880
   13568:	00029d23 	.word	0x00029d23
   1356c:	0002a5a6 	.word	0x0002a5a6
   13570:	20007060 	.word	0x20007060
   13574:	0002a65b 	.word	0x0002a65b
   13578:	0002a66f 	.word	0x0002a66f

0001357c <cfg_set>:
{
   1357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1357e:	4617      	mov	r7, r2
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   13580:	f7fe ffa6 	bl	124d0 <bt_mesh_cfg_get>
	if (!cfg) {
   13584:	2800      	cmp	r0, #0
   13586:	d041      	beq.n	1360c <cfg_set+0x90>
	if (settings_val_get_len_cb(val_ctx) == 0) {
   13588:	4638      	mov	r0, r7
   1358a:	f00e fb0a 	bl	21ba2 <settings_val_get_len_cb>
   1358e:	4d21      	ldr	r5, [pc, #132]	; (13614 <cfg_set+0x98>)
   13590:	4b21      	ldr	r3, [pc, #132]	; (13618 <cfg_set+0x9c>)
   13592:	4e22      	ldr	r6, [pc, #136]	; (1361c <cfg_set+0xa0>)
   13594:	1aed      	subs	r5, r5, r3
   13596:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1359a:	4604      	mov	r4, r0
   1359c:	b9b8      	cbnz	r0, 135ce <cfg_set+0x52>
		BT_DBG("val (null)");
   1359e:	2304      	movs	r3, #4
   135a0:	f04f 0200 	mov.w	r2, #0
   135a4:	f363 0207 	bfi	r2, r3, #0, #8
   135a8:	f365 128f 	bfi	r2, r5, #6, #10
   135ac:	491c      	ldr	r1, [pc, #112]	; (13620 <cfg_set+0xa4>)
   135ae:	481d      	ldr	r0, [pc, #116]	; (13624 <cfg_set+0xa8>)
   135b0:	f00d fb35 	bl	20c1e <log_1>
		BT_DBG("Cleared configuration state");
   135b4:	f04f 0200 	mov.w	r2, #0
   135b8:	2304      	movs	r3, #4
   135ba:	f363 0207 	bfi	r2, r3, #0, #8
   135be:	4918      	ldr	r1, [pc, #96]	; (13620 <cfg_set+0xa4>)
   135c0:	4819      	ldr	r0, [pc, #100]	; (13628 <cfg_set+0xac>)
		stored_cfg.valid = false;
   135c2:	7034      	strb	r4, [r6, #0]
		BT_DBG("Cleared configuration state");
   135c4:	f365 128f 	bfi	r2, r5, #6, #10
	BT_DBG("Restored configuration state");
   135c8:	f00d fb29 	bl	20c1e <log_1>
	return 0;
   135cc:	e010      	b.n	135f0 <cfg_set+0x74>
	err = mesh_x_set(val_ctx, &stored_cfg.cfg, sizeof(stored_cfg.cfg));
   135ce:	2207      	movs	r2, #7
   135d0:	1c71      	adds	r1, r6, #1
   135d2:	4638      	mov	r0, r7
   135d4:	f7ff fab8 	bl	12b48 <mesh_x_set>
	if (err) {
   135d8:	4604      	mov	r4, r0
   135da:	b158      	cbz	r0, 135f4 <cfg_set+0x78>
		BT_ERR("Failed to set \'cfg\'");
   135dc:	f04f 0100 	mov.w	r1, #0
   135e0:	2301      	movs	r3, #1
   135e2:	f363 0107 	bfi	r1, r3, #0, #8
   135e6:	f365 118f 	bfi	r1, r5, #6, #10
   135ea:	4810      	ldr	r0, [pc, #64]	; (1362c <cfg_set+0xb0>)
   135ec:	f00d fb0a 	bl	20c04 <log_0>
}
   135f0:	4620      	mov	r0, r4
   135f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	stored_cfg.valid = true;
   135f4:	2301      	movs	r3, #1
   135f6:	7033      	strb	r3, [r6, #0]
	BT_DBG("Restored configuration state");
   135f8:	f04f 0200 	mov.w	r2, #0
   135fc:	2304      	movs	r3, #4
   135fe:	f363 0207 	bfi	r2, r3, #0, #8
   13602:	f365 128f 	bfi	r2, r5, #6, #10
   13606:	4906      	ldr	r1, [pc, #24]	; (13620 <cfg_set+0xa4>)
   13608:	4809      	ldr	r0, [pc, #36]	; (13630 <cfg_set+0xb4>)
   1360a:	e7dd      	b.n	135c8 <cfg_set+0x4c>
		return -ENOENT;
   1360c:	f06f 0401 	mvn.w	r4, #1
   13610:	e7ee      	b.n	135f0 <cfg_set+0x74>
   13612:	bf00      	nop
   13614:	00025960 	.word	0x00025960
   13618:	00025880 	.word	0x00025880
   1361c:	20002434 	.word	0x20002434
   13620:	00029d56 	.word	0x00029d56
   13624:	0002a5a6 	.word	0x0002a5a6
   13628:	00029fc7 	.word	0x00029fc7
   1362c:	00029fe7 	.word	0x00029fe7
   13630:	00029ffb 	.word	0x00029ffb

00013634 <net_set>:
{
   13634:	b570      	push	{r4, r5, r6, lr}
	if (settings_val_get_len_cb(val_ctx) == 0) {
   13636:	4610      	mov	r0, r2
{
   13638:	b086      	sub	sp, #24
   1363a:	4616      	mov	r6, r2
   1363c:	4c2d      	ldr	r4, [pc, #180]	; (136f4 <net_set+0xc0>)
	if (settings_val_get_len_cb(val_ctx) == 0) {
   1363e:	f00e fab0 	bl	21ba2 <settings_val_get_len_cb>
   13642:	4b2d      	ldr	r3, [pc, #180]	; (136f8 <net_set+0xc4>)
   13644:	1ae4      	subs	r4, r4, r3
   13646:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1364a:	4605      	mov	r5, r0
   1364c:	b9a0      	cbnz	r0, 13678 <net_set+0x44>
		BT_DBG("val (null)");
   1364e:	2304      	movs	r3, #4
   13650:	f04f 0200 	mov.w	r2, #0
   13654:	f363 0207 	bfi	r2, r3, #0, #8
   13658:	f364 128f 	bfi	r2, r4, #6, #10
   1365c:	4927      	ldr	r1, [pc, #156]	; (136fc <net_set+0xc8>)
   1365e:	4828      	ldr	r0, [pc, #160]	; (13700 <net_set+0xcc>)
   13660:	f00d fadd 	bl	20c1e <log_1>
		bt_mesh_comp_unprovision();
   13664:	f7fb ff28 	bl	f4b8 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
   13668:	2210      	movs	r2, #16
   1366a:	4629      	mov	r1, r5
   1366c:	4825      	ldr	r0, [pc, #148]	; (13704 <net_set+0xd0>)
   1366e:	f00e fc34 	bl	21eda <memset>
}
   13672:	4628      	mov	r0, r5
   13674:	b006      	add	sp, #24
   13676:	bd70      	pop	{r4, r5, r6, pc}
	err = mesh_x_set(val_ctx, &net, sizeof(net));
   13678:	2212      	movs	r2, #18
   1367a:	a901      	add	r1, sp, #4
   1367c:	4630      	mov	r0, r6
   1367e:	f7ff fa63 	bl	12b48 <mesh_x_set>
	if (err) {
   13682:	4605      	mov	r5, r0
   13684:	b150      	cbz	r0, 1369c <net_set+0x68>
		BT_ERR("Failed to set \'net\'");
   13686:	2301      	movs	r3, #1
   13688:	f04f 0100 	mov.w	r1, #0
   1368c:	f363 0107 	bfi	r1, r3, #0, #8
   13690:	f364 118f 	bfi	r1, r4, #6, #10
   13694:	481c      	ldr	r0, [pc, #112]	; (13708 <net_set+0xd4>)
   13696:	f00d fab5 	bl	20c04 <log_0>
		return err;
   1369a:	e7ea      	b.n	13672 <net_set+0x3e>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
   1369c:	f10d 0106 	add.w	r1, sp, #6
   136a0:	2210      	movs	r2, #16
   136a2:	4818      	ldr	r0, [pc, #96]	; (13704 <net_set+0xd0>)
   136a4:	f00e fbef 	bl	21e86 <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
   136a8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   136ac:	f7fb feee 	bl	f48c <bt_mesh_comp_provision>
	BT_DBG("Provisioned with primary address 0x%04x", net.primary_addr);
   136b0:	2204      	movs	r2, #4
   136b2:	f04f 0300 	mov.w	r3, #0
   136b6:	f362 0307 	bfi	r3, r2, #0, #8
   136ba:	f364 138f 	bfi	r3, r4, #6, #10
   136be:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   136c2:	490e      	ldr	r1, [pc, #56]	; (136fc <net_set+0xc8>)
   136c4:	4811      	ldr	r0, [pc, #68]	; (1370c <net_set+0xd8>)
   136c6:	f00d fabe 	bl	20c46 <log_2>
	BT_DBG("Recovered DevKey %s", bt_hex(bt_mesh.dev_key, 16));
   136ca:	f04f 0600 	mov.w	r6, #0
   136ce:	2304      	movs	r3, #4
   136d0:	2110      	movs	r1, #16
   136d2:	480c      	ldr	r0, [pc, #48]	; (13704 <net_set+0xd0>)
   136d4:	f363 0607 	bfi	r6, r3, #0, #8
   136d8:	f7f2 fb18 	bl	5d0c <bt_hex_real>
   136dc:	f7f0 f98e 	bl	39fc <log_strdup>
   136e0:	f364 168f 	bfi	r6, r4, #6, #10
   136e4:	4602      	mov	r2, r0
   136e6:	4633      	mov	r3, r6
   136e8:	4904      	ldr	r1, [pc, #16]	; (136fc <net_set+0xc8>)
   136ea:	4809      	ldr	r0, [pc, #36]	; (13710 <net_set+0xdc>)
   136ec:	f00d faab 	bl	20c46 <log_2>
	return 0;
   136f0:	e7bf      	b.n	13672 <net_set+0x3e>
   136f2:	bf00      	nop
   136f4:	00025960 	.word	0x00025960
   136f8:	00025880 	.word	0x00025880
   136fc:	00029d14 	.word	0x00029d14
   13700:	0002a5a6 	.word	0x0002a5a6
   13704:	20007194 	.word	0x20007194
   13708:	0002a53c 	.word	0x0002a53c
   1370c:	0002a550 	.word	0x0002a550
   13710:	0002a57c 	.word	0x0002a57c

00013714 <mesh_set>:
{
   13714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (argc < 1) {
   13718:	1e07      	subs	r7, r0, #0
{
   1371a:	460e      	mov	r6, r1
   1371c:	4690      	mov	r8, r2
	if (argc < 1) {
   1371e:	dc11      	bgt.n	13744 <mesh_set+0x30>
		BT_ERR("Insufficient number of arguments");
   13720:	2301      	movs	r3, #1
   13722:	f04f 0100 	mov.w	r1, #0
   13726:	f363 0107 	bfi	r1, r3, #0, #8
   1372a:	4a1b      	ldr	r2, [pc, #108]	; (13798 <mesh_set+0x84>)
   1372c:	4b1b      	ldr	r3, [pc, #108]	; (1379c <mesh_set+0x88>)
   1372e:	481c      	ldr	r0, [pc, #112]	; (137a0 <mesh_set+0x8c>)
   13730:	1a9b      	subs	r3, r3, r2
   13732:	08db      	lsrs	r3, r3, #3
   13734:	f363 118f 	bfi	r1, r3, #6, #10
   13738:	f00d fa64 	bl	20c04 <log_0>
		return -EINVAL;
   1373c:	f06f 0015 	mvn.w	r0, #21
}
   13740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!strcmp(settings[i].name, argv[0])) {
   13744:	4d17      	ldr	r5, [pc, #92]	; (137a4 <mesh_set+0x90>)
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
   13746:	2400      	movs	r4, #0
		if (!strcmp(settings[i].name, argv[0])) {
   13748:	6831      	ldr	r1, [r6, #0]
   1374a:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   1374e:	f00e fb67 	bl	21e20 <strcmp>
   13752:	b940      	cbnz	r0, 13766 <mesh_set+0x52>
			return settings[i].func(argc, argv, val_ctx);
   13754:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   13758:	4642      	mov	r2, r8
   1375a:	6863      	ldr	r3, [r4, #4]
   1375c:	1d31      	adds	r1, r6, #4
   1375e:	1e78      	subs	r0, r7, #1
}
   13760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return settings[i].func(argc, argv, val_ctx);
   13764:	4718      	bx	r3
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
   13766:	3401      	adds	r4, #1
   13768:	2c0a      	cmp	r4, #10
   1376a:	d1ed      	bne.n	13748 <mesh_set+0x34>
	BT_WARN("No matching handler for key %s", log_strdup(argv[0]));
   1376c:	2302      	movs	r3, #2
   1376e:	f04f 0400 	mov.w	r4, #0
   13772:	4a09      	ldr	r2, [pc, #36]	; (13798 <mesh_set+0x84>)
   13774:	6830      	ldr	r0, [r6, #0]
   13776:	f363 0407 	bfi	r4, r3, #0, #8
   1377a:	4b08      	ldr	r3, [pc, #32]	; (1379c <mesh_set+0x88>)
   1377c:	1a9b      	subs	r3, r3, r2
   1377e:	08db      	lsrs	r3, r3, #3
   13780:	f363 148f 	bfi	r4, r3, #6, #10
   13784:	f7f0 f93a 	bl	39fc <log_strdup>
   13788:	4622      	mov	r2, r4
   1378a:	4601      	mov	r1, r0
   1378c:	4806      	ldr	r0, [pc, #24]	; (137a8 <mesh_set+0x94>)
   1378e:	f00d fa46 	bl	20c1e <log_1>
	return -ENOENT;
   13792:	f06f 0001 	mvn.w	r0, #1
   13796:	e7d3      	b.n	13740 <mesh_set+0x2c>
   13798:	00025880 	.word	0x00025880
   1379c:	00025960 	.word	0x00025960
   137a0:	0002791e 	.word	0x0002791e
   137a4:	00026230 	.word	0x00026230
   137a8:	0002a236 	.word	0x0002a236

000137ac <clear_app_key>:
{
   137ac:	b510      	push	{r4, lr}
   137ae:	b086      	sub	sp, #24
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   137b0:	4603      	mov	r3, r0
   137b2:	2114      	movs	r1, #20
   137b4:	4a13      	ldr	r2, [pc, #76]	; (13804 <clear_app_key+0x58>)
{
   137b6:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   137b8:	a801      	add	r0, sp, #4
   137ba:	f7ef fb85 	bl	2ec8 <snprintk>
	err = settings_delete(path);
   137be:	a801      	add	r0, sp, #4
   137c0:	f00e f995 	bl	21aee <settings_delete>
	if (err) {
   137c4:	4910      	ldr	r1, [pc, #64]	; (13808 <clear_app_key+0x5c>)
   137c6:	4b11      	ldr	r3, [pc, #68]	; (1380c <clear_app_key+0x60>)
   137c8:	1ac9      	subs	r1, r1, r3
   137ca:	f3c1 01c9 	ubfx	r1, r1, #3, #10
   137ce:	b160      	cbz	r0, 137ea <clear_app_key+0x3e>
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
   137d0:	f04f 0200 	mov.w	r2, #0
   137d4:	2301      	movs	r3, #1
   137d6:	f363 0207 	bfi	r2, r3, #0, #8
   137da:	f361 128f 	bfi	r2, r1, #6, #10
   137de:	480c      	ldr	r0, [pc, #48]	; (13810 <clear_app_key+0x64>)
   137e0:	4621      	mov	r1, r4
   137e2:	f00d fa1c 	bl	20c1e <log_1>
}
   137e6:	b006      	add	sp, #24
   137e8:	bd10      	pop	{r4, pc}
		BT_DBG("Cleared AppKeyIndex 0x%03x", app_idx);
   137ea:	2204      	movs	r2, #4
   137ec:	f04f 0300 	mov.w	r3, #0
   137f0:	f362 0307 	bfi	r3, r2, #0, #8
   137f4:	f361 138f 	bfi	r3, r1, #6, #10
   137f8:	4622      	mov	r2, r4
   137fa:	4906      	ldr	r1, [pc, #24]	; (13814 <clear_app_key+0x68>)
   137fc:	4806      	ldr	r0, [pc, #24]	; (13818 <clear_app_key+0x6c>)
   137fe:	f00d fa22 	bl	20c46 <log_2>
}
   13802:	e7f0      	b.n	137e6 <clear_app_key+0x3a>
   13804:	0002a68a 	.word	0x0002a68a
   13808:	00025960 	.word	0x00025960
   1380c:	00025880 	.word	0x00025880
   13810:	0002a01c 	.word	0x0002a01c
   13814:	00029e50 	.word	0x00029e50
   13818:	0002a03f 	.word	0x0002a03f

0001381c <atomic_test_bit.constprop.13>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1381c:	4b05      	ldr	r3, [pc, #20]	; (13834 <atomic_test_bit.constprop.13+0x18>)
   1381e:	f3bf 8f5b 	dmb	ish
   13822:	681b      	ldr	r3, [r3, #0]
   13824:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13828:	fa43 f000 	asr.w	r0, r3, r0
}
   1382c:	f000 0001 	and.w	r0, r0, #1
   13830:	4770      	bx	lr
   13832:	bf00      	nop
   13834:	20007068 	.word	0x20007068

00013838 <encode_mod_path.constprop.14>:
static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
   13838:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1383a:	4604      	mov	r4, r0
   1383c:	4618      	mov	r0, r3
	u16_t mod_key = (((u16_t)mod->elem_idx << 8) | mod->mod_idx);
   1383e:	7925      	ldrb	r5, [r4, #4]
   13840:	7963      	ldrb	r3, [r4, #5]
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   13842:	9200      	str	r2, [sp, #0]
   13844:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (vnd) {
   13848:	b129      	cbz	r1, 13856 <encode_mod_path.constprop.14+0x1e>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   1384a:	4a04      	ldr	r2, [pc, #16]	; (1385c <encode_mod_path.constprop.14+0x24>)
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   1384c:	2114      	movs	r1, #20
   1384e:	f7ef fb3b 	bl	2ec8 <snprintk>
}
   13852:	b003      	add	sp, #12
   13854:	bd30      	pop	{r4, r5, pc}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   13856:	4a02      	ldr	r2, [pc, #8]	; (13860 <encode_mod_path.constprop.14+0x28>)
   13858:	e7f8      	b.n	1384c <encode_mod_path.constprop.14+0x14>
   1385a:	bf00      	nop
   1385c:	0002a0e1 	.word	0x0002a0e1
   13860:	0002a0f1 	.word	0x0002a0f1

00013864 <store_pending_mod>:
{
   13864:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!mod->flags) {
   13866:	88c3      	ldrh	r3, [r0, #6]
{
   13868:	b089      	sub	sp, #36	; 0x24
   1386a:	4604      	mov	r4, r0
   1386c:	4617      	mov	r7, r2
	if (!mod->flags) {
   1386e:	2b00      	cmp	r3, #0
   13870:	f000 80a6 	beq.w	139c0 <store_pending_mod+0x15c>
	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
   13874:	07d8      	lsls	r0, r3, #31
   13876:	d537      	bpl.n	138e8 <store_pending_mod+0x84>
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
   13878:	f023 0301 	bic.w	r3, r3, #1
   1387c:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   1387e:	4d6b      	ldr	r5, [pc, #428]	; (13a2c <store_pending_mod+0x1c8>)
   13880:	4b6b      	ldr	r3, [pc, #428]	; (13a30 <store_pending_mod+0x1cc>)
   13882:	89a2      	ldrh	r2, [r4, #12]
   13884:	1aed      	subs	r5, r5, r3
   13886:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1388a:	429a      	cmp	r2, r3
   1388c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   13890:	f000 8098 	beq.w	139c4 <store_pending_mod+0x160>
			BT_DBG("model key 0x%04x", mod->keys[i]);
   13894:	2104      	movs	r1, #4
   13896:	f04f 0300 	mov.w	r3, #0
   1389a:	f361 0307 	bfi	r3, r1, #0, #8
   1389e:	f365 138f 	bfi	r3, r5, #6, #10
   138a2:	4964      	ldr	r1, [pc, #400]	; (13a34 <store_pending_mod+0x1d0>)
   138a4:	4864      	ldr	r0, [pc, #400]	; (13a38 <store_pending_mod+0x1d4>)
			keys[count++] = mod->keys[i];
   138a6:	f8ad 2004 	strh.w	r2, [sp, #4]
			BT_DBG("model key 0x%04x", mod->keys[i]);
   138aa:	f00d f9cc 	bl	20c46 <log_2>
			keys[count++] = mod->keys[i];
   138ae:	2601      	movs	r6, #1
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   138b0:	ab03      	add	r3, sp, #12
   138b2:	4a62      	ldr	r2, [pc, #392]	; (13a3c <store_pending_mod+0x1d8>)
   138b4:	4639      	mov	r1, r7
   138b6:	4620      	mov	r0, r4
   138b8:	f7ff ffbe 	bl	13838 <encode_mod_path.constprop.14>
	err = settings_save_one(path, keys, count * sizeof(keys[0]));
   138bc:	0072      	lsls	r2, r6, #1
   138be:	a901      	add	r1, sp, #4
   138c0:	a803      	add	r0, sp, #12
   138c2:	f7f0 fc49 	bl	4158 <settings_save_one>
		BT_ERR("Failed to store %s value", log_strdup(path));
   138c6:	f04f 0600 	mov.w	r6, #0
	if (err) {
   138ca:	2800      	cmp	r0, #0
   138cc:	d07c      	beq.n	139c8 <store_pending_mod+0x164>
		BT_ERR("Failed to store %s value", log_strdup(path));
   138ce:	2301      	movs	r3, #1
   138d0:	a803      	add	r0, sp, #12
   138d2:	f363 0607 	bfi	r6, r3, #0, #8
   138d6:	f7f0 f891 	bl	39fc <log_strdup>
   138da:	f365 168f 	bfi	r6, r5, #6, #10
   138de:	4601      	mov	r1, r0
   138e0:	4632      	mov	r2, r6
   138e2:	4857      	ldr	r0, [pc, #348]	; (13a40 <store_pending_mod+0x1dc>)
   138e4:	f00d f99b 	bl	20c1e <log_1>
	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
   138e8:	88e3      	ldrh	r3, [r4, #6]
   138ea:	0799      	lsls	r1, r3, #30
   138ec:	d530      	bpl.n	13950 <store_pending_mod+0xec>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   138ee:	89e5      	ldrh	r5, [r4, #14]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
   138f0:	f023 0302 	bic.w	r3, r3, #2
   138f4:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   138f6:	b115      	cbz	r5, 138fe <store_pending_mod+0x9a>
			groups[count++] = mod->groups[i];
   138f8:	f8ad 5004 	strh.w	r5, [sp, #4]
   138fc:	2501      	movs	r5, #1
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   138fe:	8a23      	ldrh	r3, [r4, #16]
   13900:	b12b      	cbz	r3, 1390e <store_pending_mod+0xaa>
			groups[count++] = mod->groups[i];
   13902:	aa08      	add	r2, sp, #32
   13904:	eb02 0245 	add.w	r2, r2, r5, lsl #1
   13908:	3501      	adds	r5, #1
   1390a:	f822 3c1c 	strh.w	r3, [r2, #-28]
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
   1390e:	ab03      	add	r3, sp, #12
   13910:	4a4c      	ldr	r2, [pc, #304]	; (13a44 <store_pending_mod+0x1e0>)
   13912:	4639      	mov	r1, r7
   13914:	4620      	mov	r0, r4
   13916:	f7ff ff8f 	bl	13838 <encode_mod_path.constprop.14>
	err = settings_save_one(path, groups, count * sizeof(groups[0]));
   1391a:	006a      	lsls	r2, r5, #1
   1391c:	a901      	add	r1, sp, #4
   1391e:	a803      	add	r0, sp, #12
   13920:	f7f0 fc1a 	bl	4158 <settings_save_one>
	if (err) {
   13924:	4941      	ldr	r1, [pc, #260]	; (13a2c <store_pending_mod+0x1c8>)
   13926:	4b42      	ldr	r3, [pc, #264]	; (13a30 <store_pending_mod+0x1cc>)
   13928:	1ac9      	subs	r1, r1, r3
   1392a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
		BT_ERR("Failed to store %s value", log_strdup(path));
   1392e:	f04f 0500 	mov.w	r5, #0
	if (err) {
   13932:	2800      	cmp	r0, #0
   13934:	d057      	beq.n	139e6 <store_pending_mod+0x182>
		BT_ERR("Failed to store %s value", log_strdup(path));
   13936:	2301      	movs	r3, #1
   13938:	f363 0507 	bfi	r5, r3, #0, #8
   1393c:	a803      	add	r0, sp, #12
   1393e:	f361 158f 	bfi	r5, r1, #6, #10
   13942:	f7f0 f85b 	bl	39fc <log_strdup>
   13946:	462a      	mov	r2, r5
   13948:	4601      	mov	r1, r0
   1394a:	483d      	ldr	r0, [pc, #244]	; (13a40 <store_pending_mod+0x1dc>)
   1394c:	f00d f967 	bl	20c1e <log_1>
	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
   13950:	88e3      	ldrh	r3, [r4, #6]
   13952:	075a      	lsls	r2, r3, #29
   13954:	d534      	bpl.n	139c0 <store_pending_mod+0x15c>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   13956:	68a5      	ldr	r5, [r4, #8]
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
   13958:	f023 0304 	bic.w	r3, r3, #4
   1395c:	80e3      	strh	r3, [r4, #6]
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1395e:	2d00      	cmp	r5, #0
   13960:	d050      	beq.n	13a04 <store_pending_mod+0x1a0>
   13962:	88ae      	ldrh	r6, [r5, #4]
   13964:	2e00      	cmp	r6, #0
   13966:	d04f      	beq.n	13a08 <store_pending_mod+0x1a4>
		pub.addr = mod->pub->addr;
   13968:	686b      	ldr	r3, [r5, #4]
   1396a:	9301      	str	r3, [sp, #4]
		pub.ttl = mod->pub->ttl;
   1396c:	68aa      	ldr	r2, [r5, #8]
   1396e:	9b02      	ldr	r3, [sp, #8]
   13970:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
   13974:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   13978:	4313      	orrs	r3, r2
   1397a:	9302      	str	r3, [sp, #8]
		len = sizeof(pub);
   1397c:	2608      	movs	r6, #8
		val = &pub;
   1397e:	ad01      	add	r5, sp, #4
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
   13980:	ab03      	add	r3, sp, #12
   13982:	4620      	mov	r0, r4
   13984:	4a30      	ldr	r2, [pc, #192]	; (13a48 <store_pending_mod+0x1e4>)
   13986:	4639      	mov	r1, r7
   13988:	f7ff ff56 	bl	13838 <encode_mod_path.constprop.14>
	err = settings_save_one(path, val, len);
   1398c:	4629      	mov	r1, r5
   1398e:	4632      	mov	r2, r6
   13990:	a803      	add	r0, sp, #12
   13992:	f7f0 fbe1 	bl	4158 <settings_save_one>
	if (err) {
   13996:	4925      	ldr	r1, [pc, #148]	; (13a2c <store_pending_mod+0x1c8>)
   13998:	4b25      	ldr	r3, [pc, #148]	; (13a30 <store_pending_mod+0x1cc>)
   1399a:	1ac9      	subs	r1, r1, r3
   1399c:	f3c1 01c9 	ubfx	r1, r1, #3, #10
		BT_ERR("Failed to store %s value", log_strdup(path));
   139a0:	f04f 0400 	mov.w	r4, #0
	if (err) {
   139a4:	b390      	cbz	r0, 13a0c <store_pending_mod+0x1a8>
		BT_ERR("Failed to store %s value", log_strdup(path));
   139a6:	2301      	movs	r3, #1
   139a8:	f363 0407 	bfi	r4, r3, #0, #8
   139ac:	a803      	add	r0, sp, #12
   139ae:	f361 148f 	bfi	r4, r1, #6, #10
   139b2:	f7f0 f823 	bl	39fc <log_strdup>
   139b6:	4622      	mov	r2, r4
   139b8:	4601      	mov	r1, r0
   139ba:	4821      	ldr	r0, [pc, #132]	; (13a40 <store_pending_mod+0x1dc>)
   139bc:	f00d f92f 	bl	20c1e <log_1>
}
   139c0:	b009      	add	sp, #36	; 0x24
   139c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0, count = 0; i < ARRAY_SIZE(mod->keys); i++) {
   139c4:	2600      	movs	r6, #0
   139c6:	e773      	b.n	138b0 <store_pending_mod+0x4c>
		BT_DBG("Stored %s value", log_strdup(path));
   139c8:	2304      	movs	r3, #4
   139ca:	a803      	add	r0, sp, #12
   139cc:	f363 0607 	bfi	r6, r3, #0, #8
   139d0:	f7f0 f814 	bl	39fc <log_strdup>
   139d4:	f365 168f 	bfi	r6, r5, #6, #10
   139d8:	4602      	mov	r2, r0
   139da:	4633      	mov	r3, r6
   139dc:	4915      	ldr	r1, [pc, #84]	; (13a34 <store_pending_mod+0x1d0>)
   139de:	481b      	ldr	r0, [pc, #108]	; (13a4c <store_pending_mod+0x1e8>)
   139e0:	f00d f931 	bl	20c46 <log_2>
   139e4:	e780      	b.n	138e8 <store_pending_mod+0x84>
		BT_DBG("Stored %s value", log_strdup(path));
   139e6:	2304      	movs	r3, #4
   139e8:	f363 0507 	bfi	r5, r3, #0, #8
   139ec:	a803      	add	r0, sp, #12
   139ee:	f361 158f 	bfi	r5, r1, #6, #10
   139f2:	f7f0 f803 	bl	39fc <log_strdup>
   139f6:	462b      	mov	r3, r5
   139f8:	4602      	mov	r2, r0
   139fa:	4915      	ldr	r1, [pc, #84]	; (13a50 <store_pending_mod+0x1ec>)
   139fc:	4813      	ldr	r0, [pc, #76]	; (13a4c <store_pending_mod+0x1e8>)
   139fe:	f00d f922 	bl	20c46 <log_2>
   13a02:	e7a5      	b.n	13950 <store_pending_mod+0xec>
		len = 0;
   13a04:	462e      	mov	r6, r5
   13a06:	e7bb      	b.n	13980 <store_pending_mod+0x11c>
		val = NULL;
   13a08:	4635      	mov	r5, r6
   13a0a:	e7b9      	b.n	13980 <store_pending_mod+0x11c>
		BT_DBG("Stored %s value", log_strdup(path));
   13a0c:	2304      	movs	r3, #4
   13a0e:	f363 0407 	bfi	r4, r3, #0, #8
   13a12:	a803      	add	r0, sp, #12
   13a14:	f361 148f 	bfi	r4, r1, #6, #10
   13a18:	f7ef fff0 	bl	39fc <log_strdup>
   13a1c:	4623      	mov	r3, r4
   13a1e:	4602      	mov	r2, r0
   13a20:	490c      	ldr	r1, [pc, #48]	; (13a54 <store_pending_mod+0x1f0>)
   13a22:	480a      	ldr	r0, [pc, #40]	; (13a4c <store_pending_mod+0x1e8>)
   13a24:	f00d f90f 	bl	20c46 <log_2>
   13a28:	e7ca      	b.n	139c0 <store_pending_mod+0x15c>
   13a2a:	bf00      	nop
   13a2c:	00025960 	.word	0x00025960
   13a30:	00025880 	.word	0x00025880
   13a34:	00029e88 	.word	0x00029e88
   13a38:	0002aa08 	.word	0x0002aa08
   13a3c:	0002a313 	.word	0x0002a313
   13a40:	0002aa1d 	.word	0x0002aa1d
   13a44:	0002a35b 	.word	0x0002a35b
   13a48:	0002a3b7 	.word	0x0002a3b7
   13a4c:	0002aa36 	.word	0x0002aa36
   13a50:	00029e9f 	.word	0x00029e9f
   13a54:	00029eb5 	.word	0x00029eb5

00013a58 <mesh_commit>:
{
   13a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("sub[0].net_idx 0x%03x", bt_mesh.sub[0].net_idx);
   13a5c:	f04f 0300 	mov.w	r3, #0
   13a60:	2204      	movs	r2, #4
   13a62:	f362 0307 	bfi	r3, r2, #0, #8
   13a66:	4c65      	ldr	r4, [pc, #404]	; (13bfc <mesh_commit+0x1a4>)
   13a68:	4a65      	ldr	r2, [pc, #404]	; (13c00 <mesh_commit+0x1a8>)
   13a6a:	4d66      	ldr	r5, [pc, #408]	; (13c04 <mesh_commit+0x1ac>)
   13a6c:	4966      	ldr	r1, [pc, #408]	; (13c08 <mesh_commit+0x1b0>)
   13a6e:	4867      	ldr	r0, [pc, #412]	; (13c0c <mesh_commit+0x1b4>)
   13a70:	1aa4      	subs	r4, r4, r2
   13a72:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   13a76:	f364 138f 	bfi	r3, r4, #6, #10
   13a7a:	f8b5 21b0 	ldrh.w	r2, [r5, #432]	; 0x1b0
   13a7e:	f00d f8e2 	bl	20c46 <log_2>
	if (bt_mesh.sub[0].net_idx == BT_MESH_KEY_UNUSED) {
   13a82:	f8b5 31b0 	ldrh.w	r3, [r5, #432]	; 0x1b0
   13a86:	f64f 79ff 	movw	r9, #65535	; 0xffff
   13a8a:	454b      	cmp	r3, r9
   13a8c:	46aa      	mov	sl, r5
   13a8e:	f000 80b0 	beq.w	13bf2 <mesh_commit+0x19a>
		bt_mesh_proxy_prov_disable();
   13a92:	f004 faed 	bl	18070 <bt_mesh_proxy_prov_disable>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   13a96:	2300      	movs	r3, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   13a98:	e9cd 3900 	strd	r3, r9, [sp]
   13a9c:	f8b5 31b0 	ldrh.w	r3, [r5, #432]	; 0x1b0
   13aa0:	9a01      	ldr	r2, [sp, #4]
   13aa2:	4293      	cmp	r3, r2
   13aa4:	d047      	beq.n	13b36 <mesh_commit+0xde>
	err = bt_mesh_net_keys_create(&sub->keys[0], sub->keys[0].net);
   13aa6:	f505 79e2 	add.w	r9, r5, #452	; 0x1c4
   13aaa:	4649      	mov	r1, r9
   13aac:	4648      	mov	r0, r9
   13aae:	f7f8 f895 	bl	bbdc <bt_mesh_net_keys_create>
	if (err) {
   13ab2:	4683      	mov	fp, r0
   13ab4:	b1e8      	cbz	r0, 13af2 <mesh_commit+0x9a>
		BT_ERR("Unable to generate keys for subnet");
   13ab6:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   13aba:	f043 0301 	orr.w	r3, r3, #1
   13abe:	f363 0607 	bfi	r6, r3, #0, #8
   13ac2:	f364 168f 	bfi	r6, r4, #6, #10
   13ac6:	4631      	mov	r1, r6
   13ac8:	4851      	ldr	r0, [pc, #324]	; (13c10 <mesh_commit+0x1b8>)
   13aca:	f00d f89b 	bl	20c04 <log_0>
			BT_ERR("Failed to init subnet 0x%03x", sub->net_idx);
   13ace:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   13ad2:	f043 0301 	orr.w	r3, r3, #1
   13ad6:	f363 0807 	bfi	r8, r3, #0, #8
   13ada:	f364 188f 	bfi	r8, r4, #6, #10
   13ade:	4642      	mov	r2, r8
   13ae0:	f8b5 11b0 	ldrh.w	r1, [r5, #432]	; 0x1b0
   13ae4:	484b      	ldr	r0, [pc, #300]	; (13c14 <mesh_commit+0x1bc>)
   13ae6:	f00d f89a 	bl	20c1e <log_1>
   13aea:	e024      	b.n	13b36 <mesh_commit+0xde>
   13aec:	2301      	movs	r3, #1
   13aee:	9300      	str	r3, [sp, #0]
   13af0:	e7d4      	b.n	13a9c <mesh_commit+0x44>
	if (sub->kr_phase != BT_MESH_KR_NORMAL) {
   13af2:	f895 31b3 	ldrb.w	r3, [r5, #435]	; 0x1b3
   13af6:	b1bb      	cbz	r3, 13b28 <mesh_commit+0xd0>
		err = bt_mesh_net_keys_create(&sub->keys[1], sub->keys[1].net);
   13af8:	f205 211d 	addw	r1, r5, #541	; 0x21d
   13afc:	4608      	mov	r0, r1
   13afe:	f7f8 f86d 	bl	bbdc <bt_mesh_net_keys_create>
		if (err) {
   13b02:	b188      	cbz	r0, 13b28 <mesh_commit+0xd0>
			BT_ERR("Unable to generate keys for subnet");
   13b04:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   13b08:	f043 0301 	orr.w	r3, r3, #1
   13b0c:	f363 0707 	bfi	r7, r3, #0, #8
   13b10:	f364 178f 	bfi	r7, r4, #6, #10
   13b14:	4639      	mov	r1, r7
   13b16:	483e      	ldr	r0, [pc, #248]	; (13c10 <mesh_commit+0x1b8>)
   13b18:	f00d f874 	bl	20c04 <log_0>
			(void)memset(&sub->keys[0], 0, sizeof(sub->keys[0]));
   13b1c:	2259      	movs	r2, #89	; 0x59
   13b1e:	4659      	mov	r1, fp
   13b20:	4648      	mov	r0, r9
   13b22:	f00e f9da 	bl	21eda <memset>
		if (err) {
   13b26:	e7d2      	b.n	13ace <mesh_commit+0x76>
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   13b28:	2300      	movs	r3, #0
   13b2a:	f885 31b4 	strb.w	r3, [r5, #436]	; 0x1b4
	bt_mesh_net_beacon_update(sub);
   13b2e:	f505 70ca 	add.w	r0, r5, #404	; 0x194
   13b32:	f7f8 fb35 	bl	c1a0 <bt_mesh_net_beacon_update>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   13b36:	9b00      	ldr	r3, [sp, #0]
   13b38:	35e4      	adds	r5, #228	; 0xe4
   13b3a:	2b00      	cmp	r3, #0
   13b3c:	d0d6      	beq.n	13aec <mesh_commit+0x94>
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   13b3e:	f89a 3110 	ldrb.w	r3, [sl, #272]	; 0x110
   13b42:	2b5f      	cmp	r3, #95	; 0x5f
   13b44:	d804      	bhi.n	13b50 <mesh_commit+0xf8>
   13b46:	4a34      	ldr	r2, [pc, #208]	; (13c18 <mesh_commit+0x1c0>)
   13b48:	4934      	ldr	r1, [pc, #208]	; (13c1c <mesh_commit+0x1c4>)
   13b4a:	4835      	ldr	r0, [pc, #212]	; (13c20 <mesh_commit+0x1c8>)
   13b4c:	f00b f930 	bl	1edb0 <k_delayed_work_submit_to_queue>
	bt_mesh_model_foreach(commit_mod, NULL);
   13b50:	2100      	movs	r1, #0
   13b52:	4834      	ldr	r0, [pc, #208]	; (13c24 <mesh_commit+0x1cc>)
   13b54:	f7fb fb90 	bl	f278 <bt_mesh_model_foreach>
	hb_pub = bt_mesh_hb_pub_get();
   13b58:	f7fe fcb2 	bl	124c0 <bt_mesh_hb_pub_get>
	if (hb_pub && hb_pub->dst != BT_MESH_ADDR_UNASSIGNED &&
   13b5c:	4605      	mov	r5, r0
   13b5e:	b328      	cbz	r0, 13bac <mesh_commit+0x154>
   13b60:	8c03      	ldrh	r3, [r0, #32]
   13b62:	b31b      	cbz	r3, 13bac <mesh_commit+0x154>
   13b64:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   13b66:	b30b      	cbz	r3, 13bac <mesh_commit+0x154>
	    hb_pub->count && hb_pub->period) {
   13b68:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   13b6c:	b1f3      	cbz	r3, 13bac <mesh_commit+0x154>
		BT_DBG("Starting heartbeat publication");
   13b6e:	2304      	movs	r3, #4
   13b70:	f04f 0200 	mov.w	r2, #0
   13b74:	f363 0207 	bfi	r2, r3, #0, #8
   13b78:	f364 128f 	bfi	r2, r4, #6, #10
   13b7c:	4922      	ldr	r1, [pc, #136]	; (13c08 <mesh_commit+0x1b0>)
   13b7e:	482a      	ldr	r0, [pc, #168]	; (13c28 <mesh_commit+0x1d0>)
   13b80:	f00d f84d 	bl	20c1e <log_1>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13b84:	f3bf 8f5b 	dmb	ish
   13b88:	f105 0308 	add.w	r3, r5, #8
   13b8c:	e853 2f00 	ldrex	r2, [r3]
   13b90:	f042 0101 	orr.w	r1, r2, #1
   13b94:	e843 1000 	strex	r0, r1, [r3]
   13b98:	2800      	cmp	r0, #0
   13b9a:	d1f7      	bne.n	13b8c <mesh_commit+0x134>
   13b9c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13ba0:	07d3      	lsls	r3, r2, #31
   13ba2:	d403      	bmi.n	13bac <mesh_commit+0x154>
		k_queue_append(&work_q->queue, work);
   13ba4:	4629      	mov	r1, r5
   13ba6:	481e      	ldr	r0, [pc, #120]	; (13c20 <mesh_commit+0x1c8>)
   13ba8:	f011 fa4a 	bl	25040 <k_queue_append>
	cfg = bt_mesh_cfg_get();
   13bac:	f7fe fc90 	bl	124d0 <bt_mesh_cfg_get>
	if (cfg && stored_cfg.valid) {
   13bb0:	b180      	cbz	r0, 13bd4 <mesh_commit+0x17c>
   13bb2:	4b1e      	ldr	r3, [pc, #120]	; (13c2c <mesh_commit+0x1d4>)
   13bb4:	781a      	ldrb	r2, [r3, #0]
   13bb6:	b16a      	cbz	r2, 13bd4 <mesh_commit+0x17c>
		cfg->net_transmit = stored_cfg.cfg.net_transmit;
   13bb8:	785a      	ldrb	r2, [r3, #1]
   13bba:	7102      	strb	r2, [r0, #4]
		cfg->relay = stored_cfg.cfg.relay;
   13bbc:	789a      	ldrb	r2, [r3, #2]
   13bbe:	7142      	strb	r2, [r0, #5]
		cfg->relay_retransmit = stored_cfg.cfg.relay_retransmit;
   13bc0:	78da      	ldrb	r2, [r3, #3]
   13bc2:	7182      	strb	r2, [r0, #6]
		cfg->beacon = stored_cfg.cfg.beacon;
   13bc4:	791a      	ldrb	r2, [r3, #4]
   13bc6:	71c2      	strb	r2, [r0, #7]
		cfg->gatt_proxy = stored_cfg.cfg.gatt_proxy;
   13bc8:	795a      	ldrb	r2, [r3, #5]
   13bca:	7202      	strb	r2, [r0, #8]
		cfg->frnd = stored_cfg.cfg.frnd;
   13bcc:	799a      	ldrb	r2, [r3, #6]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
   13bce:	79db      	ldrb	r3, [r3, #7]
		cfg->frnd = stored_cfg.cfg.frnd;
   13bd0:	7242      	strb	r2, [r0, #9]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
   13bd2:	7283      	strb	r3, [r0, #10]
   13bd4:	4b16      	ldr	r3, [pc, #88]	; (13c30 <mesh_commit+0x1d8>)
   13bd6:	f3bf 8f5b 	dmb	ish
   13bda:	e853 2f00 	ldrex	r2, [r3]
   13bde:	f042 0201 	orr.w	r2, r2, #1
   13be2:	e843 2100 	strex	r1, r2, [r3]
   13be6:	2900      	cmp	r1, #0
   13be8:	d1f7      	bne.n	13bda <mesh_commit+0x182>
   13bea:	f3bf 8f5b 	dmb	ish
	bt_mesh_net_start();
   13bee:	f7f9 fc75 	bl	d4dc <bt_mesh_net_start>
}
   13bf2:	2000      	movs	r0, #0
   13bf4:	b003      	add	sp, #12
   13bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bfa:	bf00      	nop
   13bfc:	00025960 	.word	0x00025960
   13c00:	00025880 	.word	0x00025880
   13c04:	20007060 	.word	0x20007060
   13c08:	00029d96 	.word	0x00029d96
   13c0c:	0002a1b9 	.word	0x0002a1b9
   13c10:	0002a1d3 	.word	0x0002a1d3
   13c14:	0002a1f6 	.word	0x0002a1f6
   13c18:	05265c00 	.word	0x05265c00
   13c1c:	20007174 	.word	0x20007174
   13c20:	20001d2c 	.word	0x20001d2c
   13c24:	00014471 	.word	0x00014471
   13c28:	0002a213 	.word	0x0002a213
   13c2c:	20002434 	.word	0x20002434
   13c30:	20007068 	.word	0x20007068

00013c34 <atomic_test_and_clear_bit.constprop.12>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   13c34:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   13c36:	2301      	movs	r3, #1
   13c38:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c3c:	4b0a      	ldr	r3, [pc, #40]	; (13c68 <atomic_test_and_clear_bit.constprop.12+0x34>)
   13c3e:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c42:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c44:	e853 2f00 	ldrex	r2, [r3]
   13c48:	ea02 0c01 	and.w	ip, r2, r1
   13c4c:	e843 ce00 	strex	lr, ip, [r3]
   13c50:	f1be 0f00 	cmp.w	lr, #0
   13c54:	d1f6      	bne.n	13c44 <atomic_test_and_clear_bit.constprop.12+0x10>
   13c56:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   13c5a:	4202      	tst	r2, r0
}
   13c5c:	bf14      	ite	ne
   13c5e:	2001      	movne	r0, #1
   13c60:	2000      	moveq	r0, #0
   13c62:	f85d fb04 	ldr.w	pc, [sp], #4
   13c66:	bf00      	nop
   13c68:	20007068 	.word	0x20007068

00013c6c <store_pending>:
{
   13c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("");
   13c70:	2304      	movs	r3, #4
   13c72:	f04f 0200 	mov.w	r2, #0
   13c76:	f363 0207 	bfi	r2, r3, #0, #8
   13c7a:	4cc1      	ldr	r4, [pc, #772]	; (13f80 <store_pending+0x314>)
   13c7c:	4bc1      	ldr	r3, [pc, #772]	; (13f84 <store_pending+0x318>)
   13c7e:	48c2      	ldr	r0, [pc, #776]	; (13f88 <store_pending+0x31c>)
   13c80:	49c2      	ldr	r1, [pc, #776]	; (13f8c <store_pending+0x320>)
   13c82:	1ae4      	subs	r4, r4, r3
   13c84:	f3c4 04c9 	ubfx	r4, r4, #3, #10
{
   13c88:	b08b      	sub	sp, #44	; 0x2c
	BT_DBG("");
   13c8a:	f364 128f 	bfi	r2, r4, #6, #10
   13c8e:	f00c ffc6 	bl	20c1e <log_1>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_RPL_PENDING)) {
   13c92:	2006      	movs	r0, #6
   13c94:	f7ff ffce 	bl	13c34 <atomic_test_and_clear_bit.constprop.12>
   13c98:	2800      	cmp	r0, #0
   13c9a:	f040 80f8 	bne.w	13e8e <store_pending+0x222>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_KEYS_PENDING)) {
   13c9e:	2007      	movs	r0, #7
   13ca0:	f7ff ffc8 	bl	13c34 <atomic_test_and_clear_bit.constprop.12>
   13ca4:	b320      	cbz	r0, 13cf0 <store_pending+0x84>
		if (!update->valid) {
   13ca6:	f8df 8338 	ldr.w	r8, [pc, #824]	; 13fe0 <store_pending+0x374>
					BT_WARN("NetKeyIndex 0x%03x not found",
   13caa:	f8df b338 	ldr.w	fp, [pc, #824]	; 13fe4 <store_pending+0x378>
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   13cae:	2500      	movs	r5, #0
   13cb0:	46c2      	mov	sl, r8
		if (!update->valid) {
   13cb2:	ea4f 0945 	mov.w	r9, r5, lsl #1
   13cb6:	eb08 0309 	add.w	r3, r8, r9
   13cba:	785b      	ldrb	r3, [r3, #1]
   13cbc:	06da      	lsls	r2, r3, #27
   13cbe:	d514      	bpl.n	13cea <store_pending+0x7e>
		if (update->clear) {
   13cc0:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
   13cc4:	f003 0220 	and.w	r2, r3, #32
   13cc8:	065b      	lsls	r3, r3, #25
   13cca:	f3c0 000b 	ubfx	r0, r0, #0, #12
   13cce:	f140 81d4 	bpl.w	1407a <store_pending+0x40e>
			if (update->app_key) {
   13cd2:	2a00      	cmp	r2, #0
   13cd4:	f000 81ce 	beq.w	14074 <store_pending+0x408>
				clear_app_key(update->key_idx);
   13cd8:	f7ff fd68 	bl	137ac <clear_app_key>
		update->valid = 0U;
   13cdc:	44d1      	add	r9, sl
   13cde:	f899 3001 	ldrb.w	r3, [r9, #1]
   13ce2:	f36f 1304 	bfc	r3, #4, #1
   13ce6:	f889 3001 	strb.w	r3, [r9, #1]
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   13cea:	3501      	adds	r5, #1
   13cec:	2d04      	cmp	r5, #4
   13cee:	d1e0      	bne.n	13cb2 <store_pending+0x46>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_NET_PENDING)) {
   13cf0:	2008      	movs	r0, #8
   13cf2:	f7ff ff9f 	bl	13c34 <atomic_test_and_clear_bit.constprop.12>
   13cf6:	2800      	cmp	r0, #0
   13cf8:	d039      	beq.n	13d6e <store_pending+0x102>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   13cfa:	2000      	movs	r0, #0
   13cfc:	f7ff fd8e 	bl	1381c <atomic_test_bit.constprop.13>
   13d00:	2800      	cmp	r0, #0
   13d02:	f000 81f3 	beq.w	140ec <store_pending+0x480>
	BT_DBG("addr 0x%04x DevKey %s", bt_mesh_primary_addr(),
   13d06:	2304      	movs	r3, #4
   13d08:	f04f 0500 	mov.w	r5, #0
   13d0c:	f363 0507 	bfi	r5, r3, #0, #8
   13d10:	f7fb fbdc 	bl	f4cc <bt_mesh_primary_addr>
   13d14:	2110      	movs	r1, #16
   13d16:	4606      	mov	r6, r0
   13d18:	489d      	ldr	r0, [pc, #628]	; (13f90 <store_pending+0x324>)
   13d1a:	f7f1 fff7 	bl	5d0c <bt_hex_real>
   13d1e:	f7ef fe6d 	bl	39fc <log_strdup>
   13d22:	f364 158f 	bfi	r5, r4, #6, #10
   13d26:	4603      	mov	r3, r0
   13d28:	4632      	mov	r2, r6
   13d2a:	499a      	ldr	r1, [pc, #616]	; (13f94 <store_pending+0x328>)
   13d2c:	489a      	ldr	r0, [pc, #616]	; (13f98 <store_pending+0x32c>)
   13d2e:	f8ad 5000 	strh.w	r5, [sp]
   13d32:	f00c ffa0 	bl	20c76 <log_3>
	net.primary_addr = bt_mesh_primary_addr();
   13d36:	f7fb fbc9 	bl	f4cc <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   13d3a:	2210      	movs	r2, #16
	net.primary_addr = bt_mesh_primary_addr();
   13d3c:	f8ad 0014 	strh.w	r0, [sp, #20]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   13d40:	4993      	ldr	r1, [pc, #588]	; (13f90 <store_pending+0x324>)
   13d42:	f10d 0016 	add.w	r0, sp, #22
   13d46:	f00e f89e 	bl	21e86 <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
   13d4a:	2212      	movs	r2, #18
   13d4c:	a905      	add	r1, sp, #20
   13d4e:	4893      	ldr	r0, [pc, #588]	; (13f9c <store_pending+0x330>)
   13d50:	f7f0 fa02 	bl	4158 <settings_save_one>
	if (err) {
   13d54:	2800      	cmp	r0, #0
   13d56:	f000 81bd 	beq.w	140d4 <store_pending+0x468>
		BT_ERR("Failed to store Network value");
   13d5a:	f04f 0100 	mov.w	r1, #0
   13d5e:	2301      	movs	r3, #1
   13d60:	f363 0107 	bfi	r1, r3, #0, #8
   13d64:	488e      	ldr	r0, [pc, #568]	; (13fa0 <store_pending+0x334>)
   13d66:	f364 118f 	bfi	r1, r4, #6, #10
		BT_ERR("Failed to clear Network");
   13d6a:	f00c ff4b 	bl	20c04 <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IV_PENDING)) {
   13d6e:	2009      	movs	r0, #9
   13d70:	f7ff ff60 	bl	13c34 <atomic_test_and_clear_bit.constprop.12>
   13d74:	b338      	cbz	r0, 13dc6 <store_pending+0x15a>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   13d76:	2000      	movs	r0, #0
   13d78:	f7ff fd50 	bl	1381c <atomic_test_bit.constprop.13>
   13d7c:	2800      	cmp	r0, #0
   13d7e:	f000 81d8 	beq.w	14132 <store_pending+0x4c6>
	iv.iv_index = bt_mesh.iv_index;
   13d82:	4a88      	ldr	r2, [pc, #544]	; (13fa4 <store_pending+0x338>)
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   13d84:	2002      	movs	r0, #2
	iv.iv_index = bt_mesh.iv_index;
   13d86:	6813      	ldr	r3, [r2, #0]
   13d88:	9305      	str	r3, [sp, #20]
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   13d8a:	f7ff fd47 	bl	1381c <atomic_test_bit.constprop.13>
   13d8e:	f89d 3018 	ldrb.w	r3, [sp, #24]
	iv.iv_duration = bt_mesh.ivu_duration;
   13d92:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   13d96:	f360 0300 	bfi	r3, r0, #0, #1
	iv.iv_duration = bt_mesh.ivu_duration;
   13d9a:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
   13d9e:	a905      	add	r1, sp, #20
   13da0:	2205      	movs	r2, #5
   13da2:	4881      	ldr	r0, [pc, #516]	; (13fa8 <store_pending+0x33c>)
	iv.iv_duration = bt_mesh.ivu_duration;
   13da4:	f88d 3018 	strb.w	r3, [sp, #24]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
   13da8:	f7f0 f9d6 	bl	4158 <settings_save_one>
	if (err) {
   13dac:	2800      	cmp	r0, #0
   13dae:	f000 81b4 	beq.w	1411a <store_pending+0x4ae>
		BT_ERR("Failed to store IV value");
   13db2:	f04f 0100 	mov.w	r1, #0
   13db6:	2301      	movs	r3, #1
   13db8:	f363 0107 	bfi	r1, r3, #0, #8
   13dbc:	487b      	ldr	r0, [pc, #492]	; (13fac <store_pending+0x340>)
   13dbe:	f364 118f 	bfi	r1, r4, #6, #10
		BT_ERR("Failed to clear IV");
   13dc2:	f00c ff1f 	bl	20c04 <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_SEQ_PENDING)) {
   13dc6:	200a      	movs	r0, #10
   13dc8:	f7ff ff34 	bl	13c34 <atomic_test_and_clear_bit.constprop.12>
   13dcc:	b1c0      	cbz	r0, 13e00 <store_pending+0x194>
	seq.val[0] = bt_mesh.seq;
   13dce:	4b75      	ldr	r3, [pc, #468]	; (13fa4 <store_pending+0x338>)
	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
   13dd0:	4877      	ldr	r0, [pc, #476]	; (13fb0 <store_pending+0x344>)
	seq.val[0] = bt_mesh.seq;
   13dd2:	889a      	ldrh	r2, [r3, #4]
   13dd4:	f8ad 2014 	strh.w	r2, [sp, #20]
	seq.val[2] = bt_mesh.seq >> 16;
   13dd8:	88db      	ldrh	r3, [r3, #6]
   13dda:	f88d 3016 	strb.w	r3, [sp, #22]
	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
   13dde:	2203      	movs	r2, #3
   13de0:	a905      	add	r1, sp, #20
   13de2:	f7f0 f9b9 	bl	4158 <settings_save_one>
	if (err) {
   13de6:	2800      	cmp	r0, #0
   13de8:	f000 81ba 	beq.w	14160 <store_pending+0x4f4>
		BT_ERR("Failed to stor Seq value");
   13dec:	f04f 0100 	mov.w	r1, #0
   13df0:	2301      	movs	r3, #1
   13df2:	f363 0107 	bfi	r1, r3, #0, #8
   13df6:	f364 118f 	bfi	r1, r4, #6, #10
   13dfa:	486e      	ldr	r0, [pc, #440]	; (13fb4 <store_pending+0x348>)
   13dfc:	f00c ff02 	bl	20c04 <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_HB_PUB_PENDING)) {
   13e00:	200b      	movs	r0, #11
   13e02:	f7ff ff17 	bl	13c34 <atomic_test_and_clear_bit.constprop.12>
   13e06:	b1b0      	cbz	r0, 13e36 <store_pending+0x1ca>
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
   13e08:	f7fe fb5a 	bl	124c0 <bt_mesh_hb_pub_get>
	if (!pub) {
   13e0c:	b198      	cbz	r0, 13e36 <store_pending+0x1ca>
	if (pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   13e0e:	8c02      	ldrh	r2, [r0, #32]
   13e10:	2a00      	cmp	r2, #0
   13e12:	f040 81b1 	bne.w	14178 <store_pending+0x50c>
		err = settings_delete("bt/mesh/HBPub");
   13e16:	4868      	ldr	r0, [pc, #416]	; (13fb8 <store_pending+0x34c>)
   13e18:	f00d fe69 	bl	21aee <settings_delete>
	if (err) {
   13e1c:	2800      	cmp	r0, #0
   13e1e:	f000 81cc 	beq.w	141ba <store_pending+0x54e>
		BT_ERR("Failed to store Heartbeat Publication");
   13e22:	f04f 0100 	mov.w	r1, #0
   13e26:	2301      	movs	r3, #1
   13e28:	f363 0107 	bfi	r1, r3, #0, #8
   13e2c:	f364 118f 	bfi	r1, r4, #6, #10
   13e30:	4862      	ldr	r0, [pc, #392]	; (13fbc <store_pending+0x350>)
   13e32:	f00c fee7 	bl	20c04 <log_0>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_CFG_PENDING)) {
   13e36:	200c      	movs	r0, #12
   13e38:	f7ff fefc 	bl	13c34 <atomic_test_and_clear_bit.constprop.12>
   13e3c:	2800      	cmp	r0, #0
   13e3e:	f000 81df 	beq.w	14200 <store_pending+0x594>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   13e42:	2000      	movs	r0, #0
   13e44:	f7ff fcea 	bl	1381c <atomic_test_bit.constprop.13>
   13e48:	2800      	cmp	r0, #0
   13e4a:	f000 81e4 	beq.w	14216 <store_pending+0x5aa>
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   13e4e:	f7fe fb3f 	bl	124d0 <bt_mesh_cfg_get>
	if (!cfg) {
   13e52:	2800      	cmp	r0, #0
   13e54:	f000 81d4 	beq.w	14200 <store_pending+0x594>
	val.net_transmit = cfg->net_transmit;
   13e58:	6843      	ldr	r3, [r0, #4]
   13e5a:	9305      	str	r3, [sp, #20]
	val.gatt_proxy = cfg->gatt_proxy;
   13e5c:	8902      	ldrh	r2, [r0, #8]
	val.default_ttl = cfg->default_ttl;
   13e5e:	7a83      	ldrb	r3, [r0, #10]
	val.gatt_proxy = cfg->gatt_proxy;
   13e60:	f8ad 2018 	strh.w	r2, [sp, #24]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   13e64:	a905      	add	r1, sp, #20
   13e66:	2207      	movs	r2, #7
   13e68:	4855      	ldr	r0, [pc, #340]	; (13fc0 <store_pending+0x354>)
	val.default_ttl = cfg->default_ttl;
   13e6a:	f88d 301a 	strb.w	r3, [sp, #26]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   13e6e:	f7f0 f973 	bl	4158 <settings_save_one>
	if (err) {
   13e72:	2800      	cmp	r0, #0
   13e74:	f000 81ad 	beq.w	141d2 <store_pending+0x566>
		BT_ERR("Failed to store configuration value");
   13e78:	f04f 0100 	mov.w	r1, #0
   13e7c:	2301      	movs	r3, #1
   13e7e:	f363 0107 	bfi	r1, r3, #0, #8
   13e82:	4850      	ldr	r0, [pc, #320]	; (13fc4 <store_pending+0x358>)
   13e84:	f364 118f 	bfi	r1, r4, #6, #10
		BT_ERR("Failed to clear configuration");
   13e88:	f00c febc 	bl	20c04 <log_0>
   13e8c:	e1b8      	b.n	14200 <store_pending+0x594>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   13e8e:	2000      	movs	r0, #0
   13e90:	f7ff fcc4 	bl	1381c <atomic_test_bit.constprop.13>
   13e94:	2800      	cmp	r0, #0
   13e96:	f000 80a7 	beq.w	13fe8 <store_pending+0x37c>
	BT_DBG("");
   13e9a:	2304      	movs	r3, #4
   13e9c:	f04f 0200 	mov.w	r2, #0
   13ea0:	f363 0207 	bfi	r2, r3, #0, #8
   13ea4:	f364 128f 	bfi	r2, r4, #6, #10
   13ea8:	4947      	ldr	r1, [pc, #284]	; (13fc8 <store_pending+0x35c>)
   13eaa:	4837      	ldr	r0, [pc, #220]	; (13f88 <store_pending+0x31c>)
   13eac:	4d3d      	ldr	r5, [pc, #244]	; (13fa4 <store_pending+0x338>)
   13eae:	f00c feb6 	bl	20c1e <log_1>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   13eb2:	f04f 0800 	mov.w	r8, #0
		if (rpl->store) {
   13eb6:	f895 335f 	ldrb.w	r3, [r5, #863]	; 0x35f
   13eba:	2b00      	cmp	r3, #0
   13ebc:	d046      	beq.n	13f4c <store_pending+0x2e0>
			rpl->store = false;
   13ebe:	2300      	movs	r3, #0
   13ec0:	f885 335f 	strb.w	r3, [r5, #863]	; 0x35f
	BT_DBG("src 0x%04x seq 0x%06x old_iv %u", entry->src, entry->seq,
   13ec4:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   13ec8:	f043 0304 	orr.w	r3, r3, #4
   13ecc:	f363 0907 	bfi	r9, r3, #0, #8
   13ed0:	4b3e      	ldr	r3, [pc, #248]	; (13fcc <store_pending+0x360>)
   13ed2:	9305      	str	r3, [sp, #20]
   13ed4:	f8b5 335c 	ldrh.w	r3, [r5, #860]	; 0x35c
   13ed8:	9306      	str	r3, [sp, #24]
   13eda:	f8d5 3360 	ldr.w	r3, [r5, #864]	; 0x360
   13ede:	9307      	str	r3, [sp, #28]
   13ee0:	f364 198f 	bfi	r9, r4, #6, #10
   13ee4:	f895 335e 	ldrb.w	r3, [r5, #862]	; 0x35e
   13ee8:	9308      	str	r3, [sp, #32]
   13eea:	2204      	movs	r2, #4
   13eec:	464b      	mov	r3, r9
   13eee:	a905      	add	r1, sp, #20
   13ef0:	4837      	ldr	r0, [pc, #220]	; (13fd0 <store_pending+0x364>)
   13ef2:	f00c fedb 	bl	20cac <log_n>
	rpl.seq = entry->seq;
   13ef6:	9b04      	ldr	r3, [sp, #16]
   13ef8:	f8d5 2360 	ldr.w	r2, [r5, #864]	; 0x360
   13efc:	f362 0317 	bfi	r3, r2, #0, #24
   13f00:	9304      	str	r3, [sp, #16]
	rpl.old_iv = entry->old_iv;
   13f02:	f895 235e 	ldrb.w	r2, [r5, #862]	; 0x35e
   13f06:	f3c3 6307 	ubfx	r3, r3, #24, #8
   13f0a:	f362 0300 	bfi	r3, r2, #0, #1
   13f0e:	f88d 3013 	strb.w	r3, [sp, #19]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   13f12:	4a30      	ldr	r2, [pc, #192]	; (13fd4 <store_pending+0x368>)
   13f14:	f8b5 335c 	ldrh.w	r3, [r5, #860]	; 0x35c
   13f18:	2112      	movs	r1, #18
   13f1a:	a805      	add	r0, sp, #20
   13f1c:	f7ee ffd4 	bl	2ec8 <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
   13f20:	2204      	movs	r2, #4
   13f22:	a904      	add	r1, sp, #16
   13f24:	a805      	add	r0, sp, #20
   13f26:	f7f0 f917 	bl	4158 <settings_save_one>
	if (err) {
   13f2a:	b1b8      	cbz	r0, 13f5c <store_pending+0x2f0>
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
   13f2c:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   13f30:	f043 0301 	orr.w	r3, r3, #1
   13f34:	a805      	add	r0, sp, #20
   13f36:	f363 0a07 	bfi	sl, r3, #0, #8
   13f3a:	f7ef fd5f 	bl	39fc <log_strdup>
   13f3e:	f364 1a8f 	bfi	sl, r4, #6, #10
   13f42:	4601      	mov	r1, r0
   13f44:	4652      	mov	r2, sl
   13f46:	4824      	ldr	r0, [pc, #144]	; (13fd8 <store_pending+0x36c>)
   13f48:	f00c fe69 	bl	20c1e <log_1>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   13f4c:	f108 0801 	add.w	r8, r8, #1
   13f50:	f1b8 0f0a 	cmp.w	r8, #10
   13f54:	f105 0508 	add.w	r5, r5, #8
   13f58:	d1ad      	bne.n	13eb6 <store_pending+0x24a>
   13f5a:	e6a0      	b.n	13c9e <store_pending+0x32>
		BT_DBG("Stored RPL %s value", log_strdup(path));
   13f5c:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   13f60:	f043 0304 	orr.w	r3, r3, #4
   13f64:	a805      	add	r0, sp, #20
   13f66:	f363 0b07 	bfi	fp, r3, #0, #8
   13f6a:	f7ef fd47 	bl	39fc <log_strdup>
   13f6e:	f364 1b8f 	bfi	fp, r4, #6, #10
   13f72:	4602      	mov	r2, r0
   13f74:	465b      	mov	r3, fp
   13f76:	4915      	ldr	r1, [pc, #84]	; (13fcc <store_pending+0x360>)
   13f78:	4818      	ldr	r0, [pc, #96]	; (13fdc <store_pending+0x370>)
   13f7a:	f00c fe64 	bl	20c46 <log_2>
   13f7e:	e7e5      	b.n	13f4c <store_pending+0x2e0>
   13f80:	00025960 	.word	0x00025960
   13f84:	00025880 	.word	0x00025880
   13f88:	00026623 	.word	0x00026623
   13f8c:	00029ecb 	.word	0x00029ecb
   13f90:	20007194 	.word	0x20007194
   13f94:	00029dc4 	.word	0x00029dc4
   13f98:	0002a805 	.word	0x0002a805
   13f9c:	0002a81f 	.word	0x0002a81f
   13fa0:	0002a82b 	.word	0x0002a82b
   13fa4:	20007060 	.word	0x20007060
   13fa8:	0002a88e 	.word	0x0002a88e
   13fac:	0002a899 	.word	0x0002a899
   13fb0:	0002a8e8 	.word	0x0002a8e8
   13fb4:	0002a8f4 	.word	0x0002a8f4
   13fb8:	0002a922 	.word	0x0002a922
   13fbc:	0002a930 	.word	0x0002a930
   13fc0:	0002a977 	.word	0x0002a977
   13fc4:	0002a983 	.word	0x0002a983
   13fc8:	00029e0d 	.word	0x00029e0d
   13fcc:	00029df9 	.word	0x00029df9
   13fd0:	0002a73f 	.word	0x0002a73f
   13fd4:	0002a763 	.word	0x0002a763
   13fd8:	0002a772 	.word	0x0002a772
   13fdc:	0002a78f 	.word	0x0002a78f
   13fe0:	20001e82 	.word	0x20001e82
   13fe4:	0002a7e8 	.word	0x0002a7e8
	BT_DBG("");
   13fe8:	2104      	movs	r1, #4
   13fea:	f04f 0200 	mov.w	r2, #0
   13fee:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 142c0 <store_pending+0x654>
   13ff2:	9003      	str	r0, [sp, #12]
   13ff4:	f361 0207 	bfi	r2, r1, #0, #8
   13ff8:	f364 128f 	bfi	r2, r4, #6, #10
   13ffc:	4659      	mov	r1, fp
   13ffe:	4892      	ldr	r0, [pc, #584]	; (14248 <store_pending+0x5dc>)
   14000:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 142c4 <store_pending+0x658>
   14004:	f00c fe0b 	bl	20c1e <log_1>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   14008:	9b03      	ldr	r3, [sp, #12]
   1400a:	4699      	mov	r9, r3
		if (!rpl->src) {
   1400c:	f8ba 335c 	ldrh.w	r3, [sl, #860]	; 0x35c
   14010:	b1d3      	cbz	r3, 14048 <store_pending+0x3dc>
		snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   14012:	4a8e      	ldr	r2, [pc, #568]	; (1424c <store_pending+0x5e0>)
   14014:	2112      	movs	r1, #18
   14016:	a805      	add	r0, sp, #20
   14018:	f7ee ff56 	bl	2ec8 <snprintk>
		err = settings_delete(path);
   1401c:	a805      	add	r0, sp, #20
   1401e:	f00d fd66 	bl	21aee <settings_delete>
		if (err) {
   14022:	b1c8      	cbz	r0, 14058 <store_pending+0x3ec>
			BT_ERR("Failed to clear RPL");
   14024:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   14028:	f043 0301 	orr.w	r3, r3, #1
   1402c:	f363 0507 	bfi	r5, r3, #0, #8
   14030:	f364 158f 	bfi	r5, r4, #6, #10
   14034:	4629      	mov	r1, r5
   14036:	4886      	ldr	r0, [pc, #536]	; (14250 <store_pending+0x5e4>)
   14038:	f00c fde4 	bl	20c04 <log_0>
		(void)memset(rpl, 0, sizeof(*rpl));
   1403c:	2208      	movs	r2, #8
   1403e:	2100      	movs	r1, #0
   14040:	f50a 7057 	add.w	r0, sl, #860	; 0x35c
   14044:	f00d ff49 	bl	21eda <memset>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
   14048:	f109 0901 	add.w	r9, r9, #1
   1404c:	f1b9 0f0a 	cmp.w	r9, #10
   14050:	f10a 0a08 	add.w	sl, sl, #8
   14054:	d1da      	bne.n	1400c <store_pending+0x3a0>
   14056:	e622      	b.n	13c9e <store_pending+0x32>
			BT_DBG("Cleared RPL");
   14058:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   1405c:	f043 0304 	orr.w	r3, r3, #4
   14060:	f363 0807 	bfi	r8, r3, #0, #8
   14064:	f364 188f 	bfi	r8, r4, #6, #10
   14068:	4642      	mov	r2, r8
   1406a:	4659      	mov	r1, fp
   1406c:	4879      	ldr	r0, [pc, #484]	; (14254 <store_pending+0x5e8>)
   1406e:	f00c fdd6 	bl	20c1e <log_1>
   14072:	e7e3      	b.n	1403c <store_pending+0x3d0>
				clear_net_key(update->key_idx);
   14074:	f7ff f872 	bl	1315c <clear_net_key>
   14078:	e630      	b.n	13cdc <store_pending+0x70>
			if (update->app_key) {
   1407a:	b1b2      	cbz	r2, 140aa <store_pending+0x43e>
				key = bt_mesh_app_key_find(update->key_idx);
   1407c:	f7fa f8e8 	bl	e250 <bt_mesh_app_key_find>
				if (key) {
   14080:	b110      	cbz	r0, 14088 <store_pending+0x41c>
					store_app_key(key);
   14082:	f7ff f817 	bl	130b4 <store_app_key>
   14086:	e629      	b.n	13cdc <store_pending+0x70>
					BT_WARN("AppKeyIndex 0x%03x not found",
   14088:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   1408c:	f043 0302 	orr.w	r3, r3, #2
   14090:	f363 0607 	bfi	r6, r3, #0, #8
   14094:	f838 1015 	ldrh.w	r1, [r8, r5, lsl #1]
   14098:	486f      	ldr	r0, [pc, #444]	; (14258 <store_pending+0x5ec>)
   1409a:	f364 168f 	bfi	r6, r4, #6, #10
   1409e:	4632      	mov	r2, r6
   140a0:	f3c1 010b 	ubfx	r1, r1, #0, #12
					BT_WARN("NetKeyIndex 0x%03x not found",
   140a4:	f00c fdbb 	bl	20c1e <log_1>
   140a8:	e618      	b.n	13cdc <store_pending+0x70>
				sub = bt_mesh_subnet_get(update->key_idx);
   140aa:	f7f7 fd79 	bl	bba0 <bt_mesh_subnet_get>
				if (sub) {
   140ae:	b110      	cbz	r0, 140b6 <store_pending+0x44a>
					store_net_key(sub);
   140b0:	f7fe ff94 	bl	12fdc <store_net_key>
   140b4:	e612      	b.n	13cdc <store_pending+0x70>
					BT_WARN("NetKeyIndex 0x%03x not found",
   140b6:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   140ba:	f043 0302 	orr.w	r3, r3, #2
   140be:	f363 0707 	bfi	r7, r3, #0, #8
   140c2:	f838 1015 	ldrh.w	r1, [r8, r5, lsl #1]
   140c6:	f364 178f 	bfi	r7, r4, #6, #10
   140ca:	463a      	mov	r2, r7
   140cc:	f3c1 010b 	ubfx	r1, r1, #0, #12
   140d0:	4658      	mov	r0, fp
   140d2:	e7e7      	b.n	140a4 <store_pending+0x438>
		BT_DBG("Stored Network value");
   140d4:	f04f 0200 	mov.w	r2, #0
   140d8:	2304      	movs	r3, #4
   140da:	f363 0207 	bfi	r2, r3, #0, #8
   140de:	495f      	ldr	r1, [pc, #380]	; (1425c <store_pending+0x5f0>)
   140e0:	485f      	ldr	r0, [pc, #380]	; (14260 <store_pending+0x5f4>)
   140e2:	f364 128f 	bfi	r2, r4, #6, #10
		BT_DBG("Cleared Network");
   140e6:	f00c fd9a 	bl	20c1e <log_1>
   140ea:	e640      	b.n	13d6e <store_pending+0x102>
	err = settings_delete("bt/mesh/Net");
   140ec:	485d      	ldr	r0, [pc, #372]	; (14264 <store_pending+0x5f8>)
   140ee:	f00d fcfe 	bl	21aee <settings_delete>
	if (err) {
   140f2:	b140      	cbz	r0, 14106 <store_pending+0x49a>
		BT_ERR("Failed to clear Network");
   140f4:	f04f 0100 	mov.w	r1, #0
   140f8:	2301      	movs	r3, #1
   140fa:	f363 0107 	bfi	r1, r3, #0, #8
   140fe:	f364 118f 	bfi	r1, r4, #6, #10
   14102:	4859      	ldr	r0, [pc, #356]	; (14268 <store_pending+0x5fc>)
   14104:	e631      	b.n	13d6a <store_pending+0xfe>
		BT_DBG("Cleared Network");
   14106:	f04f 0200 	mov.w	r2, #0
   1410a:	2304      	movs	r3, #4
   1410c:	f363 0207 	bfi	r2, r3, #0, #8
   14110:	f364 128f 	bfi	r2, r4, #6, #10
   14114:	4955      	ldr	r1, [pc, #340]	; (1426c <store_pending+0x600>)
   14116:	4856      	ldr	r0, [pc, #344]	; (14270 <store_pending+0x604>)
   14118:	e7e5      	b.n	140e6 <store_pending+0x47a>
		BT_DBG("Stored IV value");
   1411a:	f04f 0200 	mov.w	r2, #0
   1411e:	2304      	movs	r3, #4
   14120:	f363 0207 	bfi	r2, r3, #0, #8
   14124:	4953      	ldr	r1, [pc, #332]	; (14274 <store_pending+0x608>)
   14126:	4854      	ldr	r0, [pc, #336]	; (14278 <store_pending+0x60c>)
   14128:	f364 128f 	bfi	r2, r4, #6, #10
		BT_DBG("Cleared IV");
   1412c:	f00c fd77 	bl	20c1e <log_1>
   14130:	e649      	b.n	13dc6 <store_pending+0x15a>
	err = settings_delete("bt/mesh/IV");
   14132:	4852      	ldr	r0, [pc, #328]	; (1427c <store_pending+0x610>)
   14134:	f00d fcdb 	bl	21aee <settings_delete>
	if (err) {
   14138:	b140      	cbz	r0, 1414c <store_pending+0x4e0>
		BT_ERR("Failed to clear IV");
   1413a:	f04f 0100 	mov.w	r1, #0
   1413e:	2301      	movs	r3, #1
   14140:	f363 0107 	bfi	r1, r3, #0, #8
   14144:	f364 118f 	bfi	r1, r4, #6, #10
   14148:	484d      	ldr	r0, [pc, #308]	; (14280 <store_pending+0x614>)
   1414a:	e63a      	b.n	13dc2 <store_pending+0x156>
		BT_DBG("Cleared IV");
   1414c:	f04f 0200 	mov.w	r2, #0
   14150:	2304      	movs	r3, #4
   14152:	f363 0207 	bfi	r2, r3, #0, #8
   14156:	f364 128f 	bfi	r2, r4, #6, #10
   1415a:	494a      	ldr	r1, [pc, #296]	; (14284 <store_pending+0x618>)
   1415c:	484a      	ldr	r0, [pc, #296]	; (14288 <store_pending+0x61c>)
   1415e:	e7e5      	b.n	1412c <store_pending+0x4c0>
		BT_DBG("Stored Seq value");
   14160:	2304      	movs	r3, #4
   14162:	f04f 0200 	mov.w	r2, #0
   14166:	f363 0207 	bfi	r2, r3, #0, #8
   1416a:	f364 128f 	bfi	r2, r4, #6, #10
   1416e:	4947      	ldr	r1, [pc, #284]	; (1428c <store_pending+0x620>)
   14170:	4847      	ldr	r0, [pc, #284]	; (14290 <store_pending+0x624>)
   14172:	f00c fd54 	bl	20c1e <log_1>
   14176:	e643      	b.n	13e00 <store_pending+0x194>
		val.indefinite = (pub->count == 0xffff);
   14178:	8c43      	ldrh	r3, [r0, #34]	; 0x22
		val.dst = pub->dst;
   1417a:	f8ad 2014 	strh.w	r2, [sp, #20]
		val.indefinite = (pub->count == 0xffff);
   1417e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14182:	1a59      	subs	r1, r3, r1
   14184:	424b      	negs	r3, r1
   14186:	414b      	adcs	r3, r1
   14188:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1418c:	f363 1104 	bfi	r1, r3, #4, #1
   14190:	f88d 101b 	strb.w	r1, [sp, #27]
		val.period = pub->period;
   14194:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		val.feat = pub->feat;
   14196:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
		val.period = pub->period;
   14198:	f8ad 2016 	strh.w	r2, [sp, #22]
		val.net_idx = pub->net_idx;
   1419c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		val.feat = pub->feat;
   1419e:	f8ad 3018 	strh.w	r3, [sp, #24]
		val.net_idx = pub->net_idx;
   141a2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   141a6:	483b      	ldr	r0, [pc, #236]	; (14294 <store_pending+0x628>)
		val.net_idx = pub->net_idx;
   141a8:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   141ac:	a905      	add	r1, sp, #20
   141ae:	2208      	movs	r2, #8
		val.net_idx = pub->net_idx;
   141b0:	f8ad 301a 	strh.w	r3, [sp, #26]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   141b4:	f7ef ffd0 	bl	4158 <settings_save_one>
   141b8:	e630      	b.n	13e1c <store_pending+0x1b0>
		BT_DBG("Stored Heartbeat Publication");
   141ba:	2304      	movs	r3, #4
   141bc:	f04f 0200 	mov.w	r2, #0
   141c0:	f363 0207 	bfi	r2, r3, #0, #8
   141c4:	f364 128f 	bfi	r2, r4, #6, #10
   141c8:	4933      	ldr	r1, [pc, #204]	; (14298 <store_pending+0x62c>)
   141ca:	4834      	ldr	r0, [pc, #208]	; (1429c <store_pending+0x630>)
   141cc:	f00c fd27 	bl	20c1e <log_1>
   141d0:	e631      	b.n	13e36 <store_pending+0x1ca>
		BT_DBG("Stored configuration value");
   141d2:	2304      	movs	r3, #4
   141d4:	f04f 0200 	mov.w	r2, #0
   141d8:	f363 0207 	bfi	r2, r3, #0, #8
   141dc:	f364 128f 	bfi	r2, r4, #6, #10
   141e0:	492f      	ldr	r1, [pc, #188]	; (142a0 <store_pending+0x634>)
   141e2:	4830      	ldr	r0, [pc, #192]	; (142a4 <store_pending+0x638>)
   141e4:	f00c fd1b 	bl	20c1e <log_1>
		BT_HEXDUMP_DBG(&val, sizeof(val), "raw value");
   141e8:	2204      	movs	r2, #4
   141ea:	f04f 0300 	mov.w	r3, #0
   141ee:	f362 0307 	bfi	r3, r2, #0, #8
   141f2:	f364 138f 	bfi	r3, r4, #6, #10
   141f6:	2207      	movs	r2, #7
   141f8:	a905      	add	r1, sp, #20
   141fa:	482b      	ldr	r0, [pc, #172]	; (142a8 <store_pending+0x63c>)
   141fc:	f00c fd61 	bl	20cc2 <log_hexdump>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_MOD_PENDING)) {
   14200:	200d      	movs	r0, #13
   14202:	f7ff fd17 	bl	13c34 <atomic_test_and_clear_bit.constprop.12>
   14206:	b118      	cbz	r0, 14210 <store_pending+0x5a4>
		bt_mesh_model_foreach(store_pending_mod, NULL);
   14208:	2100      	movs	r1, #0
   1420a:	4828      	ldr	r0, [pc, #160]	; (142ac <store_pending+0x640>)
   1420c:	f7fb f834 	bl	f278 <bt_mesh_model_foreach>
}
   14210:	b00b      	add	sp, #44	; 0x2c
   14212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = settings_delete("bt/mesh/Cfg");
   14216:	4826      	ldr	r0, [pc, #152]	; (142b0 <store_pending+0x644>)
   14218:	f00d fc69 	bl	21aee <settings_delete>
	if (err) {
   1421c:	b140      	cbz	r0, 14230 <store_pending+0x5c4>
		BT_ERR("Failed to clear configuration");
   1421e:	f04f 0100 	mov.w	r1, #0
   14222:	2301      	movs	r3, #1
   14224:	f363 0107 	bfi	r1, r3, #0, #8
   14228:	f364 118f 	bfi	r1, r4, #6, #10
   1422c:	4821      	ldr	r0, [pc, #132]	; (142b4 <store_pending+0x648>)
   1422e:	e62b      	b.n	13e88 <store_pending+0x21c>
		BT_DBG("Cleared configuration");
   14230:	2304      	movs	r3, #4
   14232:	f04f 0200 	mov.w	r2, #0
   14236:	f363 0207 	bfi	r2, r3, #0, #8
   1423a:	f364 128f 	bfi	r2, r4, #6, #10
   1423e:	491e      	ldr	r1, [pc, #120]	; (142b8 <store_pending+0x64c>)
   14240:	481e      	ldr	r0, [pc, #120]	; (142bc <store_pending+0x650>)
   14242:	f00c fcec 	bl	20c1e <log_1>
   14246:	e7db      	b.n	14200 <store_pending+0x594>
   14248:	00026623 	.word	0x00026623
   1424c:	0002a763 	.word	0x0002a763
   14250:	0002a7a7 	.word	0x0002a7a7
   14254:	0002a7bb 	.word	0x0002a7bb
   14258:	0002a7cb 	.word	0x0002a7cb
   1425c:	00029dc4 	.word	0x00029dc4
   14260:	0002a849 	.word	0x0002a849
   14264:	0002a81f 	.word	0x0002a81f
   14268:	0002a862 	.word	0x0002a862
   1426c:	00029dba 	.word	0x00029dba
   14270:	0002a87a 	.word	0x0002a87a
   14274:	00029dd6 	.word	0x00029dd6
   14278:	0002a8b2 	.word	0x0002a8b2
   1427c:	0002a88e 	.word	0x0002a88e
   14280:	0002a8c6 	.word	0x0002a8c6
   14284:	00029db1 	.word	0x00029db1
   14288:	0002a8d9 	.word	0x0002a8d9
   1428c:	00029de7 	.word	0x00029de7
   14290:	0002a90d 	.word	0x0002a90d
   14294:	0002a922 	.word	0x0002a922
   14298:	00029e1f 	.word	0x00029e1f
   1429c:	0002a956 	.word	0x0002a956
   142a0:	00029e34 	.word	0x00029e34
   142a4:	0002a9a7 	.word	0x0002a9a7
   142a8:	0002a9c6 	.word	0x0002a9c6
   142ac:	00013865 	.word	0x00013865
   142b0:	0002a977 	.word	0x0002a977
   142b4:	0002a9d0 	.word	0x0002a9d0
   142b8:	00029e46 	.word	0x00029e46
   142bc:	0002a9ee 	.word	0x0002a9ee
   142c0:	00029e03 	.word	0x00029e03
   142c4:	20007060 	.word	0x20007060

000142c8 <schedule_store>:
{
   142c8:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   142ca:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   142cc:	4a1e      	ldr	r2, [pc, #120]	; (14348 <schedule_store+0x80>)
   142ce:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   142d2:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   142d6:	e852 3f00 	ldrex	r3, [r2]
   142da:	4303      	orrs	r3, r0
   142dc:	e842 3100 	strex	r1, r3, [r2]
   142e0:	2900      	cmp	r1, #0
   142e2:	d1f8      	bne.n	142d6 <schedule_store+0xe>
   142e4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_NET_PENDING) ||
   142e8:	2008      	movs	r0, #8
   142ea:	f7ff fa97 	bl	1381c <atomic_test_bit.constprop.13>
   142ee:	b1d0      	cbz	r0, 14326 <schedule_store+0x5e>
		timeout = K_NO_WAIT;
   142f0:	2400      	movs	r4, #0
	BT_DBG("Waiting %d seconds", timeout / MSEC_PER_SEC);
   142f2:	2204      	movs	r2, #4
   142f4:	f04f 0300 	mov.w	r3, #0
   142f8:	f362 0307 	bfi	r3, r2, #0, #8
   142fc:	4913      	ldr	r1, [pc, #76]	; (1434c <schedule_store+0x84>)
   142fe:	4a14      	ldr	r2, [pc, #80]	; (14350 <schedule_store+0x88>)
   14300:	4814      	ldr	r0, [pc, #80]	; (14354 <schedule_store+0x8c>)
   14302:	1a52      	subs	r2, r2, r1
   14304:	08d2      	lsrs	r2, r2, #3
   14306:	f362 138f 	bfi	r3, r2, #6, #10
   1430a:	4913      	ldr	r1, [pc, #76]	; (14358 <schedule_store+0x90>)
   1430c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14310:	fbb4 f2f2 	udiv	r2, r4, r2
   14314:	f00c fc97 	bl	20c46 <log_2>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   14318:	4622      	mov	r2, r4
   1431a:	4910      	ldr	r1, [pc, #64]	; (1435c <schedule_store+0x94>)
   1431c:	4810      	ldr	r0, [pc, #64]	; (14360 <schedule_store+0x98>)
}
   1431e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14322:	f00a bd45 	b.w	1edb0 <k_delayed_work_submit_to_queue>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_IV_PENDING) ||
   14326:	2009      	movs	r0, #9
   14328:	f7ff fa78 	bl	1381c <atomic_test_bit.constprop.13>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_NET_PENDING) ||
   1432c:	2800      	cmp	r0, #0
   1432e:	d1df      	bne.n	142f0 <schedule_store+0x28>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_SEQ_PENDING)) {
   14330:	200a      	movs	r0, #10
   14332:	f7ff fa73 	bl	1381c <atomic_test_bit.constprop.13>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_IV_PENDING) ||
   14336:	2800      	cmp	r0, #0
   14338:	d1da      	bne.n	142f0 <schedule_store+0x28>
	} else if (atomic_test_bit(bt_mesh.flags, BT_MESH_RPL_PENDING) &&
   1433a:	2006      	movs	r0, #6
   1433c:	f7ff fa6e 	bl	1381c <atomic_test_bit.constprop.13>
		timeout = K_SECONDS(CONFIG_BT_MESH_STORE_TIMEOUT);
   14340:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
   14344:	e7d5      	b.n	142f2 <schedule_store+0x2a>
   14346:	bf00      	nop
   14348:	20007068 	.word	0x20007068
   1434c:	00025880 	.word	0x00025880
   14350:	00025960 	.word	0x00025960
   14354:	0002a644 	.word	0x0002a644
   14358:	00029da2 	.word	0x00029da2
   1435c:	20000d18 	.word	0x20000d18
   14360:	20001d2c 	.word	0x20001d2c

00014364 <iv_set>:
{
   14364:	b570      	push	{r4, r5, r6, lr}
	if (settings_val_get_len_cb(val_ctx) == 0) {
   14366:	4610      	mov	r0, r2
{
   14368:	b086      	sub	sp, #24
   1436a:	4616      	mov	r6, r2
   1436c:	4d39      	ldr	r5, [pc, #228]	; (14454 <iv_set+0xf0>)
	if (settings_val_get_len_cb(val_ctx) == 0) {
   1436e:	f00d fc18 	bl	21ba2 <settings_val_get_len_cb>
   14372:	4b39      	ldr	r3, [pc, #228]	; (14458 <iv_set+0xf4>)
   14374:	1aed      	subs	r5, r5, r3
   14376:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1437a:	4604      	mov	r4, r0
   1437c:	b9e0      	cbnz	r0, 143b8 <iv_set+0x54>
		BT_DBG("IV deleted");
   1437e:	2304      	movs	r3, #4
   14380:	f04f 0200 	mov.w	r2, #0
   14384:	f363 0207 	bfi	r2, r3, #0, #8
   14388:	f365 128f 	bfi	r2, r5, #6, #10
   1438c:	4933      	ldr	r1, [pc, #204]	; (1445c <iv_set+0xf8>)
   1438e:	4834      	ldr	r0, [pc, #208]	; (14460 <iv_set+0xfc>)
   14390:	f00c fc45 	bl	20c1e <log_1>
		bt_mesh.iv_index = 0U;
   14394:	4b33      	ldr	r3, [pc, #204]	; (14464 <iv_set+0x100>)
   14396:	f843 4b08 	str.w	r4, [r3], #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1439a:	f3bf 8f5b 	dmb	ish
   1439e:	e853 2f00 	ldrex	r2, [r3]
   143a2:	f022 0204 	bic.w	r2, r2, #4
   143a6:	e843 2100 	strex	r1, r2, [r3]
   143aa:	2900      	cmp	r1, #0
   143ac:	d1f7      	bne.n	1439e <iv_set+0x3a>
   143ae:	f3bf 8f5b 	dmb	ish
}
   143b2:	4620      	mov	r0, r4
   143b4:	b006      	add	sp, #24
   143b6:	bd70      	pop	{r4, r5, r6, pc}
	err = mesh_x_set(val_ctx, &iv, sizeof(iv));
   143b8:	2205      	movs	r2, #5
   143ba:	4669      	mov	r1, sp
   143bc:	4630      	mov	r0, r6
   143be:	f7fe fbc3 	bl	12b48 <mesh_x_set>
	if (err) {
   143c2:	4604      	mov	r4, r0
   143c4:	b150      	cbz	r0, 143dc <iv_set+0x78>
		BT_ERR("Failed to set \'iv\'");
   143c6:	2301      	movs	r3, #1
   143c8:	f04f 0100 	mov.w	r1, #0
   143cc:	f363 0107 	bfi	r1, r3, #0, #8
   143d0:	f365 118f 	bfi	r1, r5, #6, #10
   143d4:	4824      	ldr	r0, [pc, #144]	; (14468 <iv_set+0x104>)
   143d6:	f00c fc15 	bl	20c04 <log_0>
		return err;
   143da:	e7ea      	b.n	143b2 <iv_set+0x4e>
	bt_mesh.iv_index = iv.iv_index;
   143dc:	4b21      	ldr	r3, [pc, #132]	; (14464 <iv_set+0x100>)
   143de:	9a00      	ldr	r2, [sp, #0]
   143e0:	601a      	str	r2, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
   143e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   143e6:	f3bf 8f5b 	dmb	ish
	if (val) {
   143ea:	f012 0f01 	tst.w	r2, #1
   143ee:	f103 0208 	add.w	r2, r3, #8
   143f2:	d025      	beq.n	14440 <iv_set+0xdc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   143f4:	e852 1f00 	ldrex	r1, [r2]
   143f8:	f041 0104 	orr.w	r1, r1, #4
   143fc:	e842 1000 	strex	r0, r1, [r2]
   14400:	2800      	cmp	r0, #0
   14402:	d1f7      	bne.n	143f4 <iv_set+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14404:	f3bf 8f5b 	dmb	ish
	bt_mesh.ivu_duration = iv.iv_duration;
   14408:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1440c:	f3c2 0146 	ubfx	r1, r2, #1, #7
   14410:	b2c8      	uxtb	r0, r1
   14412:	f883 1110 	strb.w	r1, [r3, #272]	; 0x110
	BT_DBG("IV Index 0x%04x (IV Update Flag %u) duration %u hours",
   14416:	2104      	movs	r1, #4
   14418:	f04f 0300 	mov.w	r3, #0
   1441c:	f361 0307 	bfi	r3, r1, #0, #8
   14420:	490e      	ldr	r1, [pc, #56]	; (1445c <iv_set+0xf8>)
   14422:	9102      	str	r1, [sp, #8]
   14424:	f002 0201 	and.w	r2, r2, #1
   14428:	9900      	ldr	r1, [sp, #0]
   1442a:	9103      	str	r1, [sp, #12]
   1442c:	e9cd 2004 	strd	r2, r0, [sp, #16]
   14430:	f365 138f 	bfi	r3, r5, #6, #10
   14434:	2204      	movs	r2, #4
   14436:	a902      	add	r1, sp, #8
   14438:	480c      	ldr	r0, [pc, #48]	; (1446c <iv_set+0x108>)
   1443a:	f00c fc37 	bl	20cac <log_n>
	return 0;
   1443e:	e7b8      	b.n	143b2 <iv_set+0x4e>
   14440:	e852 1f00 	ldrex	r1, [r2]
   14444:	f021 0104 	bic.w	r1, r1, #4
   14448:	e842 1000 	strex	r0, r1, [r2]
   1444c:	2800      	cmp	r0, #0
   1444e:	d0d9      	beq.n	14404 <iv_set+0xa0>
   14450:	e7f6      	b.n	14440 <iv_set+0xdc>
   14452:	bf00      	nop
   14454:	00025960 	.word	0x00025960
   14458:	00025880 	.word	0x00025880
   1445c:	00029d1c 	.word	0x00029d1c
   14460:	0002a15d 	.word	0x0002a15d
   14464:	20007060 	.word	0x20007060
   14468:	0002a16c 	.word	0x0002a16c
   1446c:	0002a17f 	.word	0x0002a17f

00014470 <commit_mod>:
{
   14470:	b538      	push	{r3, r4, r5, lr}
	if (mod->pub && mod->pub->update &&
   14472:	6883      	ldr	r3, [r0, #8]
{
   14474:	4605      	mov	r5, r0
	if (mod->pub && mod->pub->update &&
   14476:	b1fb      	cbz	r3, 144b8 <commit_mod+0x48>
   14478:	695a      	ldr	r2, [r3, #20]
   1447a:	b1ea      	cbz	r2, 144b8 <commit_mod+0x48>
   1447c:	889b      	ldrh	r3, [r3, #4]
   1447e:	b1db      	cbz	r3, 144b8 <commit_mod+0x48>
		s32_t ms = bt_mesh_model_pub_period_get(mod);
   14480:	f7fa ff34 	bl	f2ec <bt_mesh_model_pub_period_get>
		if (ms) {
   14484:	4604      	mov	r4, r0
   14486:	b1b8      	cbz	r0, 144b8 <commit_mod+0x48>
			BT_DBG("Starting publish timer (period %u ms)", ms);
   14488:	2204      	movs	r2, #4
   1448a:	f04f 0300 	mov.w	r3, #0
   1448e:	f362 0307 	bfi	r3, r2, #0, #8
   14492:	490a      	ldr	r1, [pc, #40]	; (144bc <commit_mod+0x4c>)
   14494:	4a0a      	ldr	r2, [pc, #40]	; (144c0 <commit_mod+0x50>)
   14496:	1a52      	subs	r2, r2, r1
   14498:	08d2      	lsrs	r2, r2, #3
   1449a:	f362 138f 	bfi	r3, r2, #6, #10
   1449e:	4909      	ldr	r1, [pc, #36]	; (144c4 <commit_mod+0x54>)
   144a0:	4602      	mov	r2, r0
   144a2:	4809      	ldr	r0, [pc, #36]	; (144c8 <commit_mod+0x58>)
   144a4:	f00c fbcf 	bl	20c46 <log_2>
			k_delayed_work_submit(&mod->pub->timer, ms);
   144a8:	68a9      	ldr	r1, [r5, #8]
   144aa:	4808      	ldr	r0, [pc, #32]	; (144cc <commit_mod+0x5c>)
   144ac:	4622      	mov	r2, r4
   144ae:	3118      	adds	r1, #24
}
   144b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   144b4:	f00a bc7c 	b.w	1edb0 <k_delayed_work_submit_to_queue>
   144b8:	bd38      	pop	{r3, r4, r5, pc}
   144ba:	bf00      	nop
   144bc:	00025880 	.word	0x00025880
   144c0:	00025960 	.word	0x00025960
   144c4:	00029d8b 	.word	0x00029d8b
   144c8:	0002a0b7 	.word	0x0002a0b7
   144cc:	20001d2c 	.word	0x20001d2c

000144d0 <app_key_set>:
{
   144d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   144d4:	460b      	mov	r3, r1
   144d6:	b08b      	sub	sp, #44	; 0x2c
	app_idx = strtol(argv[0], NULL, 16);
   144d8:	6818      	ldr	r0, [r3, #0]
   144da:	4d46      	ldr	r5, [pc, #280]	; (145f4 <app_key_set+0x124>)
{
   144dc:	4616      	mov	r6, r2
	app_idx = strtol(argv[0], NULL, 16);
   144de:	2100      	movs	r1, #0
   144e0:	2210      	movs	r2, #16
   144e2:	f00d fbf5 	bl	21cd0 <strtol>
   144e6:	4680      	mov	r8, r0
   144e8:	b287      	uxth	r7, r0
	if (settings_val_get_len_cb(val_ctx) == 0) {
   144ea:	4630      	mov	r0, r6
   144ec:	f00d fb59 	bl	21ba2 <settings_val_get_len_cb>
   144f0:	4b41      	ldr	r3, [pc, #260]	; (145f8 <app_key_set+0x128>)
   144f2:	1aed      	subs	r5, r5, r3
   144f4:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   144f8:	4604      	mov	r4, r0
   144fa:	bb18      	cbnz	r0, 14544 <app_key_set+0x74>
		BT_DBG("val (null)");
   144fc:	2304      	movs	r3, #4
   144fe:	f04f 0200 	mov.w	r2, #0
   14502:	f363 0207 	bfi	r2, r3, #0, #8
   14506:	f365 128f 	bfi	r2, r5, #6, #10
   1450a:	493c      	ldr	r1, [pc, #240]	; (145fc <app_key_set+0x12c>)
   1450c:	483c      	ldr	r0, [pc, #240]	; (14600 <app_key_set+0x130>)
   1450e:	f00c fb86 	bl	20c1e <log_1>
		BT_DBG("Deleting AppKeyIndex 0x%03x", app_idx);
   14512:	2204      	movs	r2, #4
   14514:	f04f 0300 	mov.w	r3, #0
   14518:	f362 0307 	bfi	r3, r2, #0, #8
   1451c:	f365 138f 	bfi	r3, r5, #6, #10
   14520:	463a      	mov	r2, r7
   14522:	4936      	ldr	r1, [pc, #216]	; (145fc <app_key_set+0x12c>)
   14524:	4837      	ldr	r0, [pc, #220]	; (14604 <app_key_set+0x134>)
   14526:	f00c fb8e 	bl	20c46 <log_2>
		app = bt_mesh_app_key_find(app_idx);
   1452a:	4638      	mov	r0, r7
   1452c:	f7f9 fe90 	bl	e250 <bt_mesh_app_key_find>
		if (app) {
   14530:	4606      	mov	r6, r0
   14532:	b118      	cbz	r0, 1453c <app_key_set+0x6c>
			bt_mesh_app_key_del(app, false);
   14534:	4621      	mov	r1, r4
   14536:	f7fd f8ed 	bl	11714 <bt_mesh_app_key_del>
		return 0;
   1453a:	4626      	mov	r6, r4
}
   1453c:	4630      	mov	r0, r6
   1453e:	b00b      	add	sp, #44	; 0x2c
   14540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = mesh_x_set(val_ctx, &key, sizeof(key));
   14544:	4630      	mov	r0, r6
   14546:	2223      	movs	r2, #35	; 0x23
   14548:	a901      	add	r1, sp, #4
   1454a:	f7fe fafd 	bl	12b48 <mesh_x_set>
	if (err) {
   1454e:	4606      	mov	r6, r0
   14550:	b150      	cbz	r0, 14568 <app_key_set+0x98>
		BT_ERR("Failed to set \'app-key\'");
   14552:	2301      	movs	r3, #1
   14554:	f04f 0100 	mov.w	r1, #0
   14558:	f363 0107 	bfi	r1, r3, #0, #8
   1455c:	f365 118f 	bfi	r1, r5, #6, #10
   14560:	4829      	ldr	r0, [pc, #164]	; (14608 <app_key_set+0x138>)
   14562:	f00c fb4f 	bl	20c04 <log_0>
		return err;
   14566:	e7e9      	b.n	1453c <app_key_set+0x6c>
	app = bt_mesh_app_key_find(app_idx);
   14568:	4638      	mov	r0, r7
   1456a:	f7f9 fe71 	bl	e250 <bt_mesh_app_key_find>
	if (!app) {
   1456e:	4604      	mov	r4, r0
   14570:	b988      	cbnz	r0, 14596 <app_key_set+0xc6>
		app = bt_mesh_app_key_alloc(app_idx);
   14572:	4638      	mov	r0, r7
   14574:	f7fd f8ba 	bl	116ec <bt_mesh_app_key_alloc>
	if (!app) {
   14578:	4604      	mov	r4, r0
   1457a:	b960      	cbnz	r0, 14596 <app_key_set+0xc6>
		BT_ERR("No space for a new app key");
   1457c:	2301      	movs	r3, #1
   1457e:	f04f 0100 	mov.w	r1, #0
   14582:	f363 0107 	bfi	r1, r3, #0, #8
   14586:	f365 118f 	bfi	r1, r5, #6, #10
   1458a:	4820      	ldr	r0, [pc, #128]	; (1460c <app_key_set+0x13c>)
   1458c:	f00c fb3a 	bl	20c04 <log_0>
		return -ENOMEM;
   14590:	f06f 060b 	mvn.w	r6, #11
   14594:	e7d2      	b.n	1453c <app_key_set+0x6c>
	app->net_idx = key.net_idx;
   14596:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1459a:	8023      	strh	r3, [r4, #0]
	memcpy(app->keys[0].val, key.val[0], 16);
   1459c:	f104 0906 	add.w	r9, r4, #6
	app->updated = key.updated;
   145a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   145a4:	7123      	strb	r3, [r4, #4]
	app->app_idx = app_idx;
   145a6:	8067      	strh	r7, [r4, #2]
	memcpy(app->keys[0].val, key.val[0], 16);
   145a8:	f10d 0107 	add.w	r1, sp, #7
	memcpy(app->keys[1].val, key.val[1], 16);
   145ac:	f104 0717 	add.w	r7, r4, #23
	memcpy(app->keys[0].val, key.val[0], 16);
   145b0:	2210      	movs	r2, #16
   145b2:	4648      	mov	r0, r9
   145b4:	f00d fc67 	bl	21e86 <memcpy>
	memcpy(app->keys[1].val, key.val[1], 16);
   145b8:	2210      	movs	r2, #16
   145ba:	f10d 0117 	add.w	r1, sp, #23
   145be:	4638      	mov	r0, r7
   145c0:	f00d fc61 	bl	21e86 <memcpy>
   145c4:	1d61      	adds	r1, r4, #5
   145c6:	4648      	mov	r0, r9
   145c8:	f7fa fd16 	bl	eff8 <bt_mesh_k4>
   145cc:	f104 0116 	add.w	r1, r4, #22
   145d0:	4638      	mov	r0, r7
   145d2:	f7fa fd11 	bl	eff8 <bt_mesh_k4>
	BT_DBG("AppKeyIndex 0x%03x recovered from storage", app_idx);
   145d6:	2204      	movs	r2, #4
   145d8:	f04f 0300 	mov.w	r3, #0
   145dc:	f362 0307 	bfi	r3, r2, #0, #8
   145e0:	f365 138f 	bfi	r3, r5, #6, #10
   145e4:	fa1f f288 	uxth.w	r2, r8
   145e8:	4904      	ldr	r1, [pc, #16]	; (145fc <app_key_set+0x12c>)
   145ea:	4809      	ldr	r0, [pc, #36]	; (14610 <app_key_set+0x140>)
   145ec:	f00c fb2b 	bl	20c46 <log_2>
	return 0;
   145f0:	e7a4      	b.n	1453c <app_key_set+0x6c>
   145f2:	bf00      	nop
   145f4:	00025960 	.word	0x00025960
   145f8:	00025880 	.word	0x00025880
   145fc:	00029d3f 	.word	0x00029d3f
   14600:	0002a5a6 	.word	0x0002a5a6
   14604:	00029f2f 	.word	0x00029f2f
   14608:	00029f4f 	.word	0x00029f4f
   1460c:	00029f67 	.word	0x00029f67
   14610:	00029f82 	.word	0x00029f82

00014614 <bt_mesh_store_seq>:
	    (bt_mesh.seq % CONFIG_BT_MESH_SEQ_STORE_RATE)) {
   14614:	4b03      	ldr	r3, [pc, #12]	; (14624 <bt_mesh_store_seq+0x10>)
   14616:	685b      	ldr	r3, [r3, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
   14618:	065b      	lsls	r3, r3, #25
   1461a:	d102      	bne.n	14622 <bt_mesh_store_seq+0xe>
	schedule_store(BT_MESH_SEQ_PENDING);
   1461c:	200a      	movs	r0, #10
   1461e:	f7ff be53 	b.w	142c8 <schedule_store>
}
   14622:	4770      	bx	lr
   14624:	20007060 	.word	0x20007060

00014628 <bt_mesh_store_subnet>:

void bt_mesh_store_subnet(struct bt_mesh_subnet *sub)
{
	struct key_update *update, *free_slot;

	BT_DBG("NetKeyIndex 0x%03x", sub->net_idx);
   14628:	2204      	movs	r2, #4
   1462a:	f04f 0300 	mov.w	r3, #0
{
   1462e:	b513      	push	{r0, r1, r4, lr}
	BT_DBG("NetKeyIndex 0x%03x", sub->net_idx);
   14630:	f362 0307 	bfi	r3, r2, #0, #8
   14634:	4916      	ldr	r1, [pc, #88]	; (14690 <bt_mesh_store_subnet+0x68>)
   14636:	4a17      	ldr	r2, [pc, #92]	; (14694 <bt_mesh_store_subnet+0x6c>)
   14638:	1a52      	subs	r2, r2, r1
{
   1463a:	4604      	mov	r4, r0
   1463c:	08d2      	lsrs	r2, r2, #3
	BT_DBG("NetKeyIndex 0x%03x", sub->net_idx);
   1463e:	f362 138f 	bfi	r3, r2, #6, #10
   14642:	4915      	ldr	r1, [pc, #84]	; (14698 <bt_mesh_store_subnet+0x70>)
   14644:	8b82      	ldrh	r2, [r0, #28]
   14646:	4815      	ldr	r0, [pc, #84]	; (1469c <bt_mesh_store_subnet+0x74>)
   14648:	f00c fafd 	bl	20c46 <log_2>

	update = key_update_find(false, sub->net_idx, &free_slot);
   1464c:	aa01      	add	r2, sp, #4
   1464e:	8ba1      	ldrh	r1, [r4, #28]
   14650:	2000      	movs	r0, #0
   14652:	f7fe fa57 	bl	12b04 <key_update_find>
	if (update) {
   14656:	b138      	cbz	r0, 14668 <bt_mesh_store_subnet+0x40>
		update->clear = 0U;
   14658:	7843      	ldrb	r3, [r0, #1]
   1465a:	f36f 1386 	bfc	r3, #6, #1
   1465e:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = sub->net_idx;
	free_slot->app_key = 0U;
	free_slot->clear = 0U;

	schedule_store(BT_MESH_KEYS_PENDING);
   14660:	2007      	movs	r0, #7
   14662:	f7ff fe31 	bl	142c8 <schedule_store>
   14666:	e004      	b.n	14672 <bt_mesh_store_subnet+0x4a>
	if (!free_slot) {
   14668:	9a01      	ldr	r2, [sp, #4]
   1466a:	b922      	cbnz	r2, 14676 <bt_mesh_store_subnet+0x4e>
		store_net_key(sub);
   1466c:	4620      	mov	r0, r4
   1466e:	f7fe fcb5 	bl	12fdc <store_net_key>
}
   14672:	b002      	add	sp, #8
   14674:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
   14676:	8813      	ldrh	r3, [r2, #0]
   14678:	8ba1      	ldrh	r1, [r4, #28]
   1467a:	f361 030b 	bfi	r3, r1, #0, #12
   1467e:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   14680:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   14688:	f043 0310 	orr.w	r3, r3, #16
   1468c:	7053      	strb	r3, [r2, #1]
   1468e:	e7e7      	b.n	14660 <bt_mesh_store_subnet+0x38>
   14690:	00025880 	.word	0x00025880
   14694:	00025960 	.word	0x00025960
   14698:	00029ed9 	.word	0x00029ed9
   1469c:	0002a05e 	.word	0x0002a05e

000146a0 <bt_mesh_store_app_key>:

void bt_mesh_store_app_key(struct bt_mesh_app_key *key)
{
	struct key_update *update, *free_slot;

	BT_DBG("AppKeyIndex 0x%03x", key->app_idx);
   146a0:	2204      	movs	r2, #4
   146a2:	f04f 0300 	mov.w	r3, #0
{
   146a6:	b513      	push	{r0, r1, r4, lr}
	BT_DBG("AppKeyIndex 0x%03x", key->app_idx);
   146a8:	f362 0307 	bfi	r3, r2, #0, #8
   146ac:	4916      	ldr	r1, [pc, #88]	; (14708 <bt_mesh_store_app_key+0x68>)
   146ae:	4a17      	ldr	r2, [pc, #92]	; (1470c <bt_mesh_store_app_key+0x6c>)
   146b0:	1a52      	subs	r2, r2, r1
{
   146b2:	4604      	mov	r4, r0
   146b4:	08d2      	lsrs	r2, r2, #3
	BT_DBG("AppKeyIndex 0x%03x", key->app_idx);
   146b6:	f362 138f 	bfi	r3, r2, #6, #10
   146ba:	4915      	ldr	r1, [pc, #84]	; (14710 <bt_mesh_store_app_key+0x70>)
   146bc:	8842      	ldrh	r2, [r0, #2]
   146be:	4815      	ldr	r0, [pc, #84]	; (14714 <bt_mesh_store_app_key+0x74>)
   146c0:	f00c fac1 	bl	20c46 <log_2>

	update = key_update_find(true, key->app_idx, &free_slot);
   146c4:	aa01      	add	r2, sp, #4
   146c6:	8861      	ldrh	r1, [r4, #2]
   146c8:	2001      	movs	r0, #1
   146ca:	f7fe fa1b 	bl	12b04 <key_update_find>
	if (update) {
   146ce:	b138      	cbz	r0, 146e0 <bt_mesh_store_app_key+0x40>
		update->clear = 0U;
   146d0:	7843      	ldrb	r3, [r0, #1]
   146d2:	f36f 1386 	bfc	r3, #6, #1
   146d6:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = key->app_idx;
	free_slot->app_key = 1U;
	free_slot->clear = 0U;

	schedule_store(BT_MESH_KEYS_PENDING);
   146d8:	2007      	movs	r0, #7
   146da:	f7ff fdf5 	bl	142c8 <schedule_store>
   146de:	e004      	b.n	146ea <bt_mesh_store_app_key+0x4a>
	if (!free_slot) {
   146e0:	9a01      	ldr	r2, [sp, #4]
   146e2:	b922      	cbnz	r2, 146ee <bt_mesh_store_app_key+0x4e>
		store_app_key(key);
   146e4:	4620      	mov	r0, r4
   146e6:	f7fe fce5 	bl	130b4 <store_app_key>
}
   146ea:	b002      	add	sp, #8
   146ec:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
   146ee:	8813      	ldrh	r3, [r2, #0]
   146f0:	8861      	ldrh	r1, [r4, #2]
   146f2:	f361 030b 	bfi	r3, r1, #0, #12
   146f6:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   146f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   146fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   14700:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   14704:	7053      	strb	r3, [r2, #1]
   14706:	e7e7      	b.n	146d8 <bt_mesh_store_app_key+0x38>
   14708:	00025880 	.word	0x00025880
   1470c:	00025960 	.word	0x00025960
   14710:	00029eee 	.word	0x00029eee
   14714:	00029fb0 	.word	0x00029fb0

00014718 <bt_mesh_clear_subnet>:

void bt_mesh_clear_subnet(struct bt_mesh_subnet *sub)
{
	struct key_update *update, *free_slot;

	BT_DBG("NetKeyIndex 0x%03x", sub->net_idx);
   14718:	2204      	movs	r2, #4
   1471a:	f04f 0300 	mov.w	r3, #0
{
   1471e:	b513      	push	{r0, r1, r4, lr}
	BT_DBG("NetKeyIndex 0x%03x", sub->net_idx);
   14720:	f362 0307 	bfi	r3, r2, #0, #8
   14724:	4916      	ldr	r1, [pc, #88]	; (14780 <bt_mesh_clear_subnet+0x68>)
   14726:	4a17      	ldr	r2, [pc, #92]	; (14784 <bt_mesh_clear_subnet+0x6c>)
   14728:	1a52      	subs	r2, r2, r1
{
   1472a:	4604      	mov	r4, r0
   1472c:	08d2      	lsrs	r2, r2, #3
	BT_DBG("NetKeyIndex 0x%03x", sub->net_idx);
   1472e:	f362 138f 	bfi	r3, r2, #6, #10
   14732:	4915      	ldr	r1, [pc, #84]	; (14788 <bt_mesh_clear_subnet+0x70>)
   14734:	8b82      	ldrh	r2, [r0, #28]
   14736:	4815      	ldr	r0, [pc, #84]	; (1478c <bt_mesh_clear_subnet+0x74>)
   14738:	f00c fa85 	bl	20c46 <log_2>

	update = key_update_find(false, sub->net_idx, &free_slot);
   1473c:	aa01      	add	r2, sp, #4
   1473e:	8ba1      	ldrh	r1, [r4, #28]
   14740:	2000      	movs	r0, #0
   14742:	f7fe f9df 	bl	12b04 <key_update_find>
	if (update) {
   14746:	b138      	cbz	r0, 14758 <bt_mesh_clear_subnet+0x40>
		update->clear = 1U;
   14748:	7843      	ldrb	r3, [r0, #1]
   1474a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1474e:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = sub->net_idx;
	free_slot->app_key = 0U;
	free_slot->clear = 1U;

	schedule_store(BT_MESH_KEYS_PENDING);
   14750:	2007      	movs	r0, #7
   14752:	f7ff fdb9 	bl	142c8 <schedule_store>
   14756:	e004      	b.n	14762 <bt_mesh_clear_subnet+0x4a>
	if (!free_slot) {
   14758:	9a01      	ldr	r2, [sp, #4]
   1475a:	8ba0      	ldrh	r0, [r4, #28]
   1475c:	b91a      	cbnz	r2, 14766 <bt_mesh_clear_subnet+0x4e>
		clear_net_key(sub->net_idx);
   1475e:	f7fe fcfd 	bl	1315c <clear_net_key>
}
   14762:	b002      	add	sp, #8
   14764:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
   14766:	8813      	ldrh	r3, [r2, #0]
   14768:	f360 030b 	bfi	r3, r0, #0, #12
   1476c:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   1476e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   14776:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   1477a:	7053      	strb	r3, [r2, #1]
   1477c:	e7e8      	b.n	14750 <bt_mesh_clear_subnet+0x38>
   1477e:	bf00      	nop
   14780:	00025880 	.word	0x00025880
   14784:	00025960 	.word	0x00025960
   14788:	00029f04 	.word	0x00029f04
   1478c:	0002a05e 	.word	0x0002a05e

00014790 <bt_mesh_clear_app_key>:

void bt_mesh_clear_app_key(struct bt_mesh_app_key *key)
{
	struct key_update *update, *free_slot;

	BT_DBG("AppKeyIndex 0x%03x", key->app_idx);
   14790:	2204      	movs	r2, #4
   14792:	f04f 0300 	mov.w	r3, #0
{
   14796:	b513      	push	{r0, r1, r4, lr}
	BT_DBG("AppKeyIndex 0x%03x", key->app_idx);
   14798:	f362 0307 	bfi	r3, r2, #0, #8
   1479c:	4916      	ldr	r1, [pc, #88]	; (147f8 <bt_mesh_clear_app_key+0x68>)
   1479e:	4a17      	ldr	r2, [pc, #92]	; (147fc <bt_mesh_clear_app_key+0x6c>)
   147a0:	1a52      	subs	r2, r2, r1
{
   147a2:	4604      	mov	r4, r0
   147a4:	08d2      	lsrs	r2, r2, #3
	BT_DBG("AppKeyIndex 0x%03x", key->app_idx);
   147a6:	f362 138f 	bfi	r3, r2, #6, #10
   147aa:	4915      	ldr	r1, [pc, #84]	; (14800 <bt_mesh_clear_app_key+0x70>)
   147ac:	8842      	ldrh	r2, [r0, #2]
   147ae:	4815      	ldr	r0, [pc, #84]	; (14804 <bt_mesh_clear_app_key+0x74>)
   147b0:	f00c fa49 	bl	20c46 <log_2>

	update = key_update_find(true, key->app_idx, &free_slot);
   147b4:	aa01      	add	r2, sp, #4
   147b6:	8861      	ldrh	r1, [r4, #2]
   147b8:	2001      	movs	r0, #1
   147ba:	f7fe f9a3 	bl	12b04 <key_update_find>
	if (update) {
   147be:	b138      	cbz	r0, 147d0 <bt_mesh_clear_app_key+0x40>
		update->clear = 1U;
   147c0:	7843      	ldrb	r3, [r0, #1]
   147c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   147c6:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = key->app_idx;
	free_slot->app_key = 1U;
	free_slot->clear = 1U;

	schedule_store(BT_MESH_KEYS_PENDING);
   147c8:	2007      	movs	r0, #7
   147ca:	f7ff fd7d 	bl	142c8 <schedule_store>
   147ce:	e004      	b.n	147da <bt_mesh_clear_app_key+0x4a>
	if (!free_slot) {
   147d0:	9a01      	ldr	r2, [sp, #4]
   147d2:	8860      	ldrh	r0, [r4, #2]
   147d4:	b91a      	cbnz	r2, 147de <bt_mesh_clear_app_key+0x4e>
		clear_app_key(key->app_idx);
   147d6:	f7fe ffe9 	bl	137ac <clear_app_key>
}
   147da:	b002      	add	sp, #8
   147dc:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
   147de:	8813      	ldrh	r3, [r2, #0]
   147e0:	f360 030b 	bfi	r3, r0, #0, #12
   147e4:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   147e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   147ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   147ee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
   147f2:	7053      	strb	r3, [r2, #1]
   147f4:	e7e8      	b.n	147c8 <bt_mesh_clear_app_key+0x38>
   147f6:	bf00      	nop
   147f8:	00025880 	.word	0x00025880
   147fc:	00025960 	.word	0x00025960
   14800:	00029f19 	.word	0x00029f19
   14804:	00029fb0 	.word	0x00029fb0

00014808 <bt_mesh_settings_init>:
	schedule_store(BT_MESH_MOD_PENDING);
}

void bt_mesh_settings_init(void)
{
	k_delayed_work_init(&pending_store, store_pending);
   14808:	4901      	ldr	r1, [pc, #4]	; (14810 <bt_mesh_settings_init+0x8>)
   1480a:	4802      	ldr	r0, [pc, #8]	; (14814 <bt_mesh_settings_init+0xc>)
   1480c:	f010 be1a 	b.w	25444 <k_delayed_work_init>
   14810:	00013c6d 	.word	0x00013c6d
   14814:	20000d18 	.word	0x20000d18

00014818 <adv_alloc>:
} adv_pool[FRIEND_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id].adv;
}
   14818:	4b02      	ldr	r3, [pc, #8]	; (14824 <adv_alloc+0xc>)
   1481a:	2218      	movs	r2, #24
   1481c:	fb02 3000 	mla	r0, r2, r0, r3
   14820:	4770      	bx	lr
   14822:	bf00      	nop
   14824:	20000098 	.word	0x20000098

00014828 <friend_clear>:
	return frnd->recv_delay;
#endif
}

static void friend_clear(struct bt_mesh_friend *frnd)
{
   14828:	b538      	push	{r3, r4, r5, lr}
	int i;

	BT_DBG("LPN 0x%04x", frnd->lpn);
   1482a:	2204      	movs	r2, #4
   1482c:	f04f 0300 	mov.w	r3, #0
   14830:	f362 0307 	bfi	r3, r2, #0, #8
   14834:	4921      	ldr	r1, [pc, #132]	; (148bc <friend_clear+0x94>)
   14836:	4a22      	ldr	r2, [pc, #136]	; (148c0 <friend_clear+0x98>)
   14838:	4605      	mov	r5, r0
   1483a:	1a52      	subs	r2, r2, r1
   1483c:	08d2      	lsrs	r2, r2, #3
   1483e:	f362 138f 	bfi	r3, r2, #6, #10
   14842:	f835 2b18 	ldrh.w	r2, [r5], #24
   14846:	491f      	ldr	r1, [pc, #124]	; (148c4 <friend_clear+0x9c>)
{
   14848:	4604      	mov	r4, r0
	BT_DBG("LPN 0x%04x", frnd->lpn);
   1484a:	481f      	ldr	r0, [pc, #124]	; (148c8 <friend_clear+0xa0>)
   1484c:	f00c f9fb 	bl	20c46 <log_2>

	k_delayed_work_cancel(&frnd->timer);
   14850:	4628      	mov	r0, r5
   14852:	f010 fdff 	bl	25454 <k_delayed_work_cancel>

	friend_cred_del(frnd->net_idx, frnd->lpn);
   14856:	8821      	ldrh	r1, [r4, #0]
   14858:	89e0      	ldrh	r0, [r4, #14]
   1485a:	f7f7 fc1d 	bl	c098 <friend_cred_del>

	if (frnd->last) {
   1485e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14860:	b158      	cbz	r0, 1487a <friend_clear+0x52>
		/* Cancel the sending if necessary */
		if (frnd->pending_buf) {
   14862:	78e3      	ldrb	r3, [r4, #3]
   14864:	06db      	lsls	r3, r3, #27
			BT_MESH_ADV(frnd->last)->busy = 0U;
   14866:	bf41      	itttt	mi
   14868:	6943      	ldrmi	r3, [r0, #20]
   1486a:	7a1a      	ldrbmi	r2, [r3, #8]
   1486c:	f36f 0282 	bfcmi	r2, #2, #1
   14870:	721a      	strbmi	r2, [r3, #8]
		}

		net_buf_unref(frnd->last);
   14872:	f008 ff79 	bl	1d768 <net_buf_unref>
		frnd->last = NULL;
   14876:	2300      	movs	r3, #0
   14878:	6423      	str	r3, [r4, #64]	; 0x40
	}

	while (!sys_slist_is_empty(&frnd->queue)) {
		net_buf_unref(net_buf_slist_get(&frnd->queue));
   1487a:	f104 0544 	add.w	r5, r4, #68	; 0x44
	while (!sys_slist_is_empty(&frnd->queue)) {
   1487e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14880:	b97b      	cbnz	r3, 148a2 <friend_clear+0x7a>
	}

	for (i = 0; i < ARRAY_SIZE(frnd->seg); i++) {
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];

		while (!sys_slist_is_empty(&seg->queue)) {
   14882:	f104 0538 	add.w	r5, r4, #56	; 0x38
   14886:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   14888:	b989      	cbnz	r1, 148ae <friend_clear+0x86>
	}

	frnd->valid = 0U;
	frnd->established = 0U;
	frnd->pending_buf = 0U;
	frnd->fsn = 0U;
   1488a:	78e3      	ldrb	r3, [r4, #3]
	frnd->queue_size = 0U;
   1488c:	64e1      	str	r1, [r4, #76]	; 0x4c
	frnd->fsn = 0U;
   1488e:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   14892:	70e3      	strb	r3, [r4, #3]
	frnd->pending_req = 0U;
	(void)memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
   14894:	f104 0010 	add.w	r0, r4, #16
   14898:	2206      	movs	r2, #6
}
   1489a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
   1489e:	f00d bb1c 	b.w	21eda <memset>
		net_buf_unref(net_buf_slist_get(&frnd->queue));
   148a2:	4628      	mov	r0, r5
   148a4:	f010 f9cc 	bl	24c40 <net_buf_slist_get>
   148a8:	f008 ff5e 	bl	1d768 <net_buf_unref>
   148ac:	e7e7      	b.n	1487e <friend_clear+0x56>
			net_buf_unref(net_buf_slist_get(&seg->queue));
   148ae:	4628      	mov	r0, r5
   148b0:	f010 f9c6 	bl	24c40 <net_buf_slist_get>
   148b4:	f008 ff58 	bl	1d768 <net_buf_unref>
   148b8:	e7e5      	b.n	14886 <friend_clear+0x5e>
   148ba:	bf00      	nop
   148bc:	00025880 	.word	0x00025880
   148c0:	00025930 	.word	0x00025930
   148c4:	0002aa8c 	.word	0x0002aa8c
   148c8:	0002b490 	.word	0x0002b490

000148cc <friend_purge_old_ack>:
	return 0;
}

static void friend_purge_old_ack(struct bt_mesh_friend *frnd, u64_t *seq_auth,
				 u16_t src)
{
   148cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	sys_snode_t *cur, *prev = NULL;

	BT_DBG("SeqAuth %llx src 0x%04x", *seq_auth, src);
   148d0:	f04f 0300 	mov.w	r3, #0
{
   148d4:	4617      	mov	r7, r2
	BT_DBG("SeqAuth %llx src 0x%04x", *seq_auth, src);
   148d6:	2204      	movs	r2, #4
{
   148d8:	460e      	mov	r6, r1
	BT_DBG("SeqAuth %llx src 0x%04x", *seq_auth, src);
   148da:	f362 0307 	bfi	r3, r2, #0, #8
   148de:	4927      	ldr	r1, [pc, #156]	; (1497c <friend_purge_old_ack+0xb0>)
   148e0:	4a27      	ldr	r2, [pc, #156]	; (14980 <friend_purge_old_ack+0xb4>)
   148e2:	eba2 0901 	sub.w	r9, r2, r1
   148e6:	f3c9 09c9 	ubfx	r9, r9, #3, #10
{
   148ea:	4605      	mov	r5, r0
	BT_DBG("SeqAuth %llx src 0x%04x", *seq_auth, src);
   148ec:	f369 138f 	bfi	r3, r9, #6, #10
   148f0:	f8ad 3000 	strh.w	r3, [sp]
   148f4:	6832      	ldr	r2, [r6, #0]
   148f6:	4923      	ldr	r1, [pc, #140]	; (14984 <friend_purge_old_ack+0xb8>)
   148f8:	4823      	ldr	r0, [pc, #140]	; (14988 <friend_purge_old_ack+0xbc>)
   148fa:	463b      	mov	r3, r7
   148fc:	f00c f9bb 	bl	20c76 <log_3>

	for (cur = sys_slist_peek_head(&frnd->queue);
   14900:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sys_snode_t *cur, *prev = NULL;
   14902:	f04f 0800 	mov.w	r8, #0
	for (cur = sys_slist_peek_head(&frnd->queue);
   14906:	b914      	cbnz	r4, 1490e <friend_purge_old_ack+0x42>

			net_buf_unref(buf);
			break;
		}
	}
}
   14908:	b003      	add	sp, #12
   1490a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (BT_MESH_ADV(buf)->addr == src &&
   1490e:	6963      	ldr	r3, [r4, #20]
   14910:	895a      	ldrh	r2, [r3, #10]
   14912:	42ba      	cmp	r2, r7
   14914:	d12e      	bne.n	14974 <friend_purge_old_ack+0xa8>
   14916:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   1491a:	e9d6 2300 	ldrd	r2, r3, [r6]
   1491e:	4299      	cmp	r1, r3
   14920:	bf08      	it	eq
   14922:	4290      	cmpeq	r0, r2
   14924:	d126      	bne.n	14974 <friend_purge_old_ack+0xa8>
			BT_DBG("Removing old ack from Friend Queue");
   14926:	2304      	movs	r3, #4
   14928:	f04f 0200 	mov.w	r2, #0
   1492c:	f363 0207 	bfi	r2, r3, #0, #8
   14930:	f369 128f 	bfi	r2, r9, #6, #10
   14934:	4913      	ldr	r1, [pc, #76]	; (14984 <friend_purge_old_ack+0xb8>)
   14936:	4815      	ldr	r0, [pc, #84]	; (1498c <friend_purge_old_ack+0xc0>)
   14938:	f00c f971 	bl	20c1e <log_1>
Z_GENLIST_REMOVE(slist, snode)
   1493c:	6823      	ldr	r3, [r4, #0]
   1493e:	f1b8 0f00 	cmp.w	r8, #0
   14942:	d10f      	bne.n	14964 <friend_purge_old_ack+0x98>
   14944:	6caa      	ldr	r2, [r5, #72]	; 0x48
	list->head = node;
   14946:	646b      	str	r3, [r5, #68]	; 0x44
Z_GENLIST_REMOVE(slist, snode)
   14948:	4294      	cmp	r4, r2
   1494a:	d100      	bne.n	1494e <friend_purge_old_ack+0x82>
	list->tail = node;
   1494c:	64ab      	str	r3, [r5, #72]	; 0x48
			frnd->queue_size--;
   1494e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   14950:	3b01      	subs	r3, #1
   14952:	64eb      	str	r3, [r5, #76]	; 0x4c
			net_buf_unref(buf);
   14954:	4620      	mov	r0, r4
			buf->frags = NULL;
   14956:	2300      	movs	r3, #0
   14958:	6023      	str	r3, [r4, #0]
}
   1495a:	b003      	add	sp, #12
   1495c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			net_buf_unref(buf);
   14960:	f008 bf02 	b.w	1d768 <net_buf_unref>
	parent->next = child;
   14964:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_REMOVE(slist, snode)
   14968:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1496a:	429c      	cmp	r4, r3
	list->tail = node;
   1496c:	bf08      	it	eq
   1496e:	f8c5 8048 	streq.w	r8, [r5, #72]	; 0x48
   14972:	e7ec      	b.n	1494e <friend_purge_old_ack+0x82>
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
   14974:	46a0      	mov	r8, r4
   14976:	6824      	ldr	r4, [r4, #0]
   14978:	e7c5      	b.n	14906 <friend_purge_old_ack+0x3a>
   1497a:	bf00      	nop
   1497c:	00025880 	.word	0x00025880
   14980:	00025930 	.word	0x00025930
   14984:	0002abf5 	.word	0x0002abf5
   14988:	0002b49f 	.word	0x0002b49f
   1498c:	0002b4bb 	.word	0x0002b4bb

00014990 <send_friend_clear>:
{
   14990:	b530      	push	{r4, r5, lr}
   14992:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
   14994:	89c3      	ldrh	r3, [r0, #14]
   14996:	f8ad 3018 	strh.w	r3, [sp, #24]
   1499a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1499e:	f8ad 301a 	strh.w	r3, [sp, #26]
   149a2:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   149a6:	f8ad 301c 	strh.w	r3, [sp, #28]
   149aa:	2500      	movs	r5, #0
   149ac:	237f      	movs	r3, #127	; 0x7f
   149ae:	f8cd 501e 	str.w	r5, [sp, #30]
   149b2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	struct bt_mesh_net_tx tx = {
   149b6:	4b1a      	ldr	r3, [pc, #104]	; (14a20 <send_friend_clear+0x90>)
   149b8:	9309      	str	r3, [sp, #36]	; 0x24
   149ba:	ab06      	add	r3, sp, #24
{
   149bc:	4604      	mov	r4, r0
	struct bt_mesh_net_tx tx = {
   149be:	930a      	str	r3, [sp, #40]	; 0x28
   149c0:	950b      	str	r5, [sp, #44]	; 0x2c
		.src  = bt_mesh_primary_addr(),
   149c2:	f7fa fd83 	bl	f4cc <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   149c6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
   149ca:	f7fc ffcf 	bl	1196c <bt_mesh_net_transmit_get>
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
   149ce:	8822      	ldrh	r2, [r4, #0]
   149d0:	4914      	ldr	r1, [pc, #80]	; (14a24 <send_friend_clear+0x94>)
	struct bt_mesh_net_tx tx = {
   149d2:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
   149d6:	0213      	lsls	r3, r2, #8
   149d8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
   149dc:	8962      	ldrh	r2, [r4, #10]
	struct bt_mesh_ctl_friend_clear req = {
   149de:	f8ad 3014 	strh.w	r3, [sp, #20]
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
   149e2:	0213      	lsls	r3, r2, #8
   149e4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	struct bt_mesh_ctl_friend_clear req = {
   149e8:	f8ad 3016 	strh.w	r3, [sp, #22]
	BT_DBG("");
   149ec:	f04f 0200 	mov.w	r2, #0
   149f0:	2304      	movs	r3, #4
   149f2:	f363 0207 	bfi	r2, r3, #0, #8
   149f6:	4b0c      	ldr	r3, [pc, #48]	; (14a28 <send_friend_clear+0x98>)
   149f8:	480c      	ldr	r0, [pc, #48]	; (14a2c <send_friend_clear+0x9c>)
   149fa:	1a5b      	subs	r3, r3, r1
   149fc:	08db      	lsrs	r3, r3, #3
   149fe:	f363 128f 	bfi	r2, r3, #6, #10
   14a02:	490b      	ldr	r1, [pc, #44]	; (14a30 <send_friend_clear+0xa0>)
   14a04:	f00c f90b 	bl	20c1e <log_1>
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
   14a08:	4b0a      	ldr	r3, [pc, #40]	; (14a34 <send_friend_clear+0xa4>)
   14a0a:	9402      	str	r4, [sp, #8]
   14a0c:	e9cd 5300 	strd	r5, r3, [sp]
   14a10:	aa05      	add	r2, sp, #20
   14a12:	2304      	movs	r3, #4
   14a14:	2105      	movs	r1, #5
   14a16:	a809      	add	r0, sp, #36	; 0x24
   14a18:	f7f9 fd18 	bl	e44c <bt_mesh_ctl_send>
}
   14a1c:	b00d      	add	sp, #52	; 0x34
   14a1e:	bd30      	pop	{r4, r5, pc}
   14a20:	200071f4 	.word	0x200071f4
   14a24:	00025880 	.word	0x00025880
   14a28:	00025930 	.word	0x00025930
   14a2c:	00026623 	.word	0x00026623
   14a30:	0002ab3b 	.word	0x0002ab3b
   14a34:	00026288 	.word	0x00026288

00014a38 <k_delayed_work_submit>:
   14a38:	460a      	mov	r2, r1
   14a3a:	4601      	mov	r1, r0
   14a3c:	4801      	ldr	r0, [pc, #4]	; (14a44 <k_delayed_work_submit+0xc>)
   14a3e:	f00a b9b7 	b.w	1edb0 <k_delayed_work_submit_to_queue>
   14a42:	bf00      	nop
   14a44:	20001d2c 	.word	0x20001d2c

00014a48 <friend_recv_delay>:
{
   14a48:	b510      	push	{r4, lr}
	frnd->pending_req = 1U;
   14a4a:	78c3      	ldrb	r3, [r0, #3]
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   14a4c:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1U;
   14a4e:	f043 0304 	orr.w	r3, r3, #4
{
   14a52:	4604      	mov	r4, r0
	frnd->pending_req = 1U;
   14a54:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
   14a56:	3133      	adds	r1, #51	; 0x33
   14a58:	3018      	adds	r0, #24
   14a5a:	f7ff ffed 	bl	14a38 <k_delayed_work_submit>
	BT_DBG("Waiting RecvDelay of %d ms", recv_delay(frnd));
   14a5e:	2204      	movs	r2, #4
   14a60:	f04f 0300 	mov.w	r3, #0
   14a64:	f362 0307 	bfi	r3, r2, #0, #8
   14a68:	4906      	ldr	r1, [pc, #24]	; (14a84 <friend_recv_delay+0x3c>)
   14a6a:	4a07      	ldr	r2, [pc, #28]	; (14a88 <friend_recv_delay+0x40>)
   14a6c:	4807      	ldr	r0, [pc, #28]	; (14a8c <friend_recv_delay+0x44>)
   14a6e:	1a52      	subs	r2, r2, r1
   14a70:	08d2      	lsrs	r2, r2, #3
   14a72:	f362 138f 	bfi	r3, r2, #6, #10
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
   14a76:	78a2      	ldrb	r2, [r4, #2]
	BT_DBG("Waiting RecvDelay of %d ms", recv_delay(frnd));
   14a78:	4905      	ldr	r1, [pc, #20]	; (14a90 <friend_recv_delay+0x48>)
   14a7a:	3233      	adds	r2, #51	; 0x33
}
   14a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BT_DBG("Waiting RecvDelay of %d ms", recv_delay(frnd));
   14a80:	f00c b8e1 	b.w	20c46 <log_2>
   14a84:	00025880 	.word	0x00025880
   14a88:	00025930 	.word	0x00025930
   14a8c:	0002b4e2 	.word	0x0002b4e2
   14a90:	0002ab15 	.word	0x0002ab15

00014a94 <buf_send_end>:
	BT_DBG("err %d", err);
   14a94:	2204      	movs	r2, #4
   14a96:	f04f 0300 	mov.w	r3, #0
{
   14a9a:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("err %d", err);
   14a9c:	f362 0307 	bfi	r3, r2, #0, #8
   14aa0:	4c20      	ldr	r4, [pc, #128]	; (14b24 <buf_send_end+0x90>)
   14aa2:	4a21      	ldr	r2, [pc, #132]	; (14b28 <buf_send_end+0x94>)
   14aa4:	1aa4      	subs	r4, r4, r2
{
   14aa6:	460d      	mov	r5, r1
	BT_DBG("err %d", err);
   14aa8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   14aac:	4602      	mov	r2, r0
   14aae:	f364 138f 	bfi	r3, r4, #6, #10
   14ab2:	491e      	ldr	r1, [pc, #120]	; (14b2c <buf_send_end+0x98>)
   14ab4:	481e      	ldr	r0, [pc, #120]	; (14b30 <buf_send_end+0x9c>)
   14ab6:	f00c f8c6 	bl	20c46 <log_2>
	if (frnd->pending_req) {
   14aba:	78eb      	ldrb	r3, [r5, #3]
   14abc:	075a      	lsls	r2, r3, #29
   14abe:	d50b      	bpl.n	14ad8 <buf_send_end+0x44>
		BT_WARN("Another request before previous completed sending");
   14ac0:	f04f 0100 	mov.w	r1, #0
   14ac4:	2302      	movs	r3, #2
   14ac6:	f363 0107 	bfi	r1, r3, #0, #8
   14aca:	f364 118f 	bfi	r1, r4, #6, #10
   14ace:	4819      	ldr	r0, [pc, #100]	; (14b34 <buf_send_end+0xa0>)
}
   14ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Another request before previous completed sending");
   14ad4:	f00c b896 	b.w	20c04 <log_0>
	if (frnd->established) {
   14ad8:	065b      	lsls	r3, r3, #25
   14ada:	f105 0018 	add.w	r0, r5, #24
   14ade:	d510      	bpl.n	14b02 <buf_send_end+0x6e>
		k_delayed_work_submit(&frnd->timer, frnd->poll_to);
   14ae0:	6869      	ldr	r1, [r5, #4]
   14ae2:	f7ff ffa9 	bl	14a38 <k_delayed_work_submit>
		BT_DBG("Waiting %u ms for next poll", frnd->poll_to);
   14ae6:	2204      	movs	r2, #4
   14ae8:	f04f 0300 	mov.w	r3, #0
   14aec:	f362 0307 	bfi	r3, r2, #0, #8
   14af0:	f364 138f 	bfi	r3, r4, #6, #10
   14af4:	686a      	ldr	r2, [r5, #4]
   14af6:	490d      	ldr	r1, [pc, #52]	; (14b2c <buf_send_end+0x98>)
   14af8:	480f      	ldr	r0, [pc, #60]	; (14b38 <buf_send_end+0xa4>)
}
   14afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_DBG("Waiting %u ms for next poll", frnd->poll_to);
   14afe:	f00c b8a2 	b.w	20c46 <log_2>
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
   14b02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14b06:	f7ff ff97 	bl	14a38 <k_delayed_work_submit>
		BT_DBG("Waiting for first poll");
   14b0a:	f04f 0200 	mov.w	r2, #0
   14b0e:	2304      	movs	r3, #4
   14b10:	f363 0207 	bfi	r2, r3, #0, #8
   14b14:	f364 128f 	bfi	r2, r4, #6, #10
   14b18:	4904      	ldr	r1, [pc, #16]	; (14b2c <buf_send_end+0x98>)
   14b1a:	4808      	ldr	r0, [pc, #32]	; (14b3c <buf_send_end+0xa8>)
}
   14b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_DBG("Waiting for first poll");
   14b20:	f00c b87d 	b.w	20c1e <log_1>
   14b24:	00025930 	.word	0x00025930
   14b28:	00025880 	.word	0x00025880
   14b2c:	0002abd9 	.word	0x0002abd9
   14b30:	0002b2aa 	.word	0x0002b2aa
   14b34:	0002b2b5 	.word	0x0002b2b5
   14b38:	0002b2e7 	.word	0x0002b2e7
   14b3c:	0002b307 	.word	0x0002b307

00014b40 <create_friend_pdu>:
{
   14b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b44:	460d      	mov	r5, r1
   14b46:	b089      	sub	sp, #36	; 0x24
   14b48:	4682      	mov	sl, r0
	sub = bt_mesh_subnet_get(frnd->net_idx);
   14b4a:	89c0      	ldrh	r0, [r0, #14]
   14b4c:	4c70      	ldr	r4, [pc, #448]	; (14d10 <create_friend_pdu+0x1d0>)
		if (bt_mesh.frnd[i].queue_size > frnd->queue_size) {
   14b4e:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 14d40 <create_friend_pdu+0x200>
{
   14b52:	4690      	mov	r8, r2
	sub = bt_mesh_subnet_get(frnd->net_idx);
   14b54:	f7f7 f824 	bl	bba0 <bt_mesh_subnet_get>
	buf = friend_buf_alloc(info->src);
   14b58:	882b      	ldrh	r3, [r5, #0]
   14b5a:	9302      	str	r3, [sp, #8]
	BT_DBG("src 0x%04x", src);
   14b5c:	2204      	movs	r2, #4
   14b5e:	f04f 0300 	mov.w	r3, #0
   14b62:	f362 0307 	bfi	r3, r2, #0, #8
   14b66:	4a6b      	ldr	r2, [pc, #428]	; (14d14 <create_friend_pdu+0x1d4>)
   14b68:	496b      	ldr	r1, [pc, #428]	; (14d18 <create_friend_pdu+0x1d8>)
   14b6a:	1aa4      	subs	r4, r4, r2
   14b6c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	sub = bt_mesh_subnet_get(frnd->net_idx);
   14b70:	4607      	mov	r7, r0
	BT_DBG("src 0x%04x", src);
   14b72:	f364 138f 	bfi	r3, r4, #6, #10
   14b76:	9a02      	ldr	r2, [sp, #8]
   14b78:	4868      	ldr	r0, [pc, #416]	; (14d1c <create_friend_pdu+0x1dc>)
   14b7a:	f00c f864 	bl	20c46 <log_2>
		buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
   14b7e:	2300      	movs	r3, #0
   14b80:	9300      	str	r3, [sp, #0]
   14b82:	2201      	movs	r2, #1
   14b84:	2308      	movs	r3, #8
   14b86:	4966      	ldr	r1, [pc, #408]	; (14d20 <create_friend_pdu+0x1e0>)
   14b88:	4866      	ldr	r0, [pc, #408]	; (14d24 <create_friend_pdu+0x1e4>)
   14b8a:	f7f6 fb47 	bl	b21c <bt_mesh_adv_create_from_pool>
		if (!buf) {
   14b8e:	4606      	mov	r6, r0
   14b90:	2800      	cmp	r0, #0
   14b92:	f040 8085 	bne.w	14ca0 <create_friend_pdu+0x160>
		if (bt_mesh.frnd[i].queue_size > frnd->queue_size) {
   14b96:	4a64      	ldr	r2, [pc, #400]	; (14d28 <create_friend_pdu+0x1e8>)
   14b98:	f8db 006c 	ldr.w	r0, [fp, #108]	; 0x6c
   14b9c:	f8db 10e4 	ldr.w	r1, [fp, #228]	; 0xe4
   14ba0:	f1a2 0378 	sub.w	r3, r2, #120	; 0x78
   14ba4:	4288      	cmp	r0, r1
   14ba6:	bf28      	it	cs
   14ba8:	461a      	movcs	r2, r3
	buf = net_buf_slist_get(&frnd->queue);
   14baa:	f102 0044 	add.w	r0, r2, #68	; 0x44
   14bae:	9203      	str	r2, [sp, #12]
   14bb0:	f010 f846 	bl	24c40 <net_buf_slist_get>
	BT_WARN("Discarding buffer %p for LPN 0x%04x", buf, frnd->lpn);
   14bb4:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   14bb8:	f043 0302 	orr.w	r3, r3, #2
   14bbc:	9a03      	ldr	r2, [sp, #12]
   14bbe:	f363 0907 	bfi	r9, r3, #0, #8
   14bc2:	f364 198f 	bfi	r9, r4, #6, #10
	buf = net_buf_slist_get(&frnd->queue);
   14bc6:	4606      	mov	r6, r0
	BT_WARN("Discarding buffer %p for LPN 0x%04x", buf, frnd->lpn);
   14bc8:	4601      	mov	r1, r0
   14bca:	464b      	mov	r3, r9
   14bcc:	8812      	ldrh	r2, [r2, #0]
   14bce:	4857      	ldr	r0, [pc, #348]	; (14d2c <create_friend_pdu+0x1ec>)
   14bd0:	f00c f839 	bl	20c46 <log_2>
	net_buf_unref(buf);
   14bd4:	4630      	mov	r0, r6
   14bd6:	f008 fdc7 	bl	1d768 <net_buf_unref>
   14bda:	e7d0      	b.n	14b7e <create_friend_pdu+0x3e>
	if (info->ctl && TRANS_CTL_OP(sdu->data) == TRANS_CTL_OP_FRIEND_OFFER) {
   14bdc:	f8d8 3000 	ldr.w	r3, [r8]
   14be0:	781b      	ldrb	r3, [r3, #0]
   14be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14be6:	2b04      	cmp	r3, #4
   14be8:	d173      	bne.n	14cd2 <create_friend_pdu+0x192>
		enc = sub->keys[sub->kr_flag].enc;
   14bea:	7fba      	ldrb	r2, [r7, #30]
   14bec:	2359      	movs	r3, #89	; 0x59
   14bee:	4353      	muls	r3, r2
   14bf0:	f103 0241 	add.w	r2, r3, #65	; 0x41
   14bf4:	443a      	add	r2, r7
   14bf6:	9206      	str	r2, [sp, #24]
		priv = sub->keys[sub->kr_flag].privacy;
   14bf8:	f103 0269 	add.w	r2, r3, #105	; 0x69
   14bfc:	443a      	add	r2, r7
		nid = sub->keys[sub->kr_flag].nid;
   14bfe:	441f      	add	r7, r3
		priv = sub->keys[sub->kr_flag].privacy;
   14c00:	9207      	str	r2, [sp, #28]
		nid = sub->keys[sub->kr_flag].nid;
   14c02:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   14c06:	f88d 3017 	strb.w	r3, [sp, #23]
	net_buf_add_u8(buf, (nid | (info->iv_index & 1) << 7));
   14c0a:	68ab      	ldr	r3, [r5, #8]
   14c0c:	f89d 1017 	ldrb.w	r1, [sp, #23]
   14c10:	f106 0708 	add.w	r7, r6, #8
   14c14:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
   14c18:	b2c9      	uxtb	r1, r1
   14c1a:	4638      	mov	r0, r7
   14c1c:	f010 f865 	bl	24cea <net_buf_simple_add_u8>
	if (info->ctl) {
   14c20:	f995 3007 	ldrsb.w	r3, [r5, #7]
   14c24:	79e9      	ldrb	r1, [r5, #7]
   14c26:	2b00      	cmp	r3, #0
		net_buf_add_u8(buf, info->ttl | 0x80);
   14c28:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   14c2c:	bfb8      	it	lt
   14c2e:	f041 0180 	orrlt.w	r1, r1, #128	; 0x80
		net_buf_add_u8(buf, info->ttl);
   14c32:	4638      	mov	r0, r7
   14c34:	f010 f859 	bl	24cea <net_buf_simple_add_u8>
	net_buf_add_mem(buf, info->seq, sizeof(info->seq));
   14c38:	2203      	movs	r2, #3
   14c3a:	1d29      	adds	r1, r5, #4
   14c3c:	4638      	mov	r0, r7
   14c3e:	f010 f84b 	bl	24cd8 <net_buf_simple_add_mem>
	net_buf_add_be16(buf, info->src);
   14c42:	8829      	ldrh	r1, [r5, #0]
   14c44:	4638      	mov	r0, r7
   14c46:	f010 f867 	bl	24d18 <net_buf_simple_add_be16>
	net_buf_add_be16(buf, info->dst);
   14c4a:	8869      	ldrh	r1, [r5, #2]
   14c4c:	4638      	mov	r0, r7
   14c4e:	f010 f863 	bl	24d18 <net_buf_simple_add_be16>
	net_buf_add_mem(buf, sdu->data, sdu->len);
   14c52:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   14c56:	f8d8 1000 	ldr.w	r1, [r8]
   14c5a:	4638      	mov	r0, r7
   14c5c:	f010 f83c 	bl	24cd8 <net_buf_simple_add_mem>
	if (bt_mesh_net_encrypt(enc, &buf->b, info->iv_index, false)) {
   14c60:	2300      	movs	r3, #0
   14c62:	68aa      	ldr	r2, [r5, #8]
   14c64:	9806      	ldr	r0, [sp, #24]
   14c66:	4639      	mov	r1, r7
   14c68:	f00e fd42 	bl	236f0 <bt_mesh_net_encrypt>
   14c6c:	b140      	cbz	r0, 14c80 <create_friend_pdu+0x140>
		BT_ERR("Re-encrypting failed");
   14c6e:	f04f 0100 	mov.w	r1, #0
   14c72:	2301      	movs	r3, #1
   14c74:	f363 0107 	bfi	r1, r3, #0, #8
   14c78:	f364 118f 	bfi	r1, r4, #6, #10
   14c7c:	482c      	ldr	r0, [pc, #176]	; (14d30 <create_friend_pdu+0x1f0>)
   14c7e:	e03c      	b.n	14cfa <create_friend_pdu+0x1ba>
	if (bt_mesh_net_obfuscate(buf->data, info->iv_index, priv)) {
   14c80:	9a07      	ldr	r2, [sp, #28]
   14c82:	68a9      	ldr	r1, [r5, #8]
   14c84:	68b0      	ldr	r0, [r6, #8]
   14c86:	f00e fd0a 	bl	2369e <bt_mesh_net_obfuscate>
   14c8a:	2800      	cmp	r0, #0
   14c8c:	d03b      	beq.n	14d06 <create_friend_pdu+0x1c6>
		BT_ERR("Re-obfuscating failed");
   14c8e:	f04f 0100 	mov.w	r1, #0
   14c92:	2301      	movs	r3, #1
   14c94:	f363 0107 	bfi	r1, r3, #0, #8
   14c98:	f364 118f 	bfi	r1, r4, #6, #10
   14c9c:	4825      	ldr	r0, [pc, #148]	; (14d34 <create_friend_pdu+0x1f4>)
   14c9e:	e02c      	b.n	14cfa <create_friend_pdu+0x1ba>
	BT_MESH_ADV(buf)->addr = src;
   14ca0:	6943      	ldr	r3, [r0, #20]
   14ca2:	9a02      	ldr	r2, [sp, #8]
   14ca4:	815a      	strh	r2, [r3, #10]
	FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
   14ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14caa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14cae:	e9c3 0104 	strd	r0, r1, [r3, #16]
	BT_DBG("allocated buf %p", buf);
   14cb2:	2204      	movs	r2, #4
   14cb4:	f04f 0300 	mov.w	r3, #0
   14cb8:	f362 0307 	bfi	r3, r2, #0, #8
   14cbc:	f364 138f 	bfi	r3, r4, #6, #10
   14cc0:	4632      	mov	r2, r6
   14cc2:	4915      	ldr	r1, [pc, #84]	; (14d18 <create_friend_pdu+0x1d8>)
   14cc4:	481c      	ldr	r0, [pc, #112]	; (14d38 <create_friend_pdu+0x1f8>)
   14cc6:	f00b ffbe 	bl	20c46 <log_2>
	if (info->ctl && TRANS_CTL_OP(sdu->data) == TRANS_CTL_OP_FRIEND_OFFER) {
   14cca:	f995 3007 	ldrsb.w	r3, [r5, #7]
   14cce:	2b00      	cmp	r3, #0
   14cd0:	db84      	blt.n	14bdc <create_friend_pdu+0x9c>
		if (friend_cred_get(sub, frnd->lpn, &nid, &enc, &priv)) {
   14cd2:	ab07      	add	r3, sp, #28
   14cd4:	9300      	str	r3, [sp, #0]
   14cd6:	f10d 0217 	add.w	r2, sp, #23
   14cda:	ab06      	add	r3, sp, #24
   14cdc:	f8ba 1000 	ldrh.w	r1, [sl]
   14ce0:	4638      	mov	r0, r7
   14ce2:	f7f7 f9f9 	bl	c0d8 <friend_cred_get>
   14ce6:	2800      	cmp	r0, #0
   14ce8:	d08f      	beq.n	14c0a <create_friend_pdu+0xca>
			BT_ERR("friend_cred_get failed");
   14cea:	f04f 0100 	mov.w	r1, #0
   14cee:	2301      	movs	r3, #1
   14cf0:	f363 0107 	bfi	r1, r3, #0, #8
   14cf4:	4811      	ldr	r0, [pc, #68]	; (14d3c <create_friend_pdu+0x1fc>)
   14cf6:	f364 118f 	bfi	r1, r4, #6, #10
		BT_ERR("Re-obfuscating failed");
   14cfa:	f00b ff83 	bl	20c04 <log_0>
	net_buf_unref(buf);
   14cfe:	4630      	mov	r0, r6
   14d00:	f008 fd32 	bl	1d768 <net_buf_unref>
	return NULL;
   14d04:	2600      	movs	r6, #0
}
   14d06:	4630      	mov	r0, r6
   14d08:	b009      	add	sp, #36	; 0x24
   14d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d0e:	bf00      	nop
   14d10:	00025930 	.word	0x00025930
   14d14:	00025880 	.word	0x00025880
   14d18:	0002aa67 	.word	0x0002aa67
   14d1c:	00028706 	.word	0x00028706
   14d20:	00014819 	.word	0x00014819
   14d24:	2000796c 	.word	0x2000796c
   14d28:	200070f8 	.word	0x200070f8
   14d2c:	0002b367 	.word	0x0002b367
   14d30:	00028458 	.word	0x00028458
   14d34:	0002846d 	.word	0x0002846d
   14d38:	0002b3a2 	.word	0x0002b3a2
   14d3c:	0002b38b 	.word	0x0002b38b
   14d40:	20007060 	.word	0x20007060

00014d44 <clear_timeout>:
{
   14d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_DBG("LPN 0x%04x (old) Friend 0x%04x", frnd->lpn, frnd->clear.frnd);
   14d46:	f04f 0300 	mov.w	r3, #0
   14d4a:	2204      	movs	r2, #4
   14d4c:	f362 0307 	bfi	r3, r2, #0, #8
   14d50:	4d19      	ldr	r5, [pc, #100]	; (14db8 <clear_timeout+0x74>)
   14d52:	4a1a      	ldr	r2, [pc, #104]	; (14dbc <clear_timeout+0x78>)
   14d54:	491a      	ldr	r1, [pc, #104]	; (14dc0 <clear_timeout+0x7c>)
   14d56:	1aad      	subs	r5, r5, r2
   14d58:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   14d5c:	f365 138f 	bfi	r3, r5, #6, #10
   14d60:	f8ad 3000 	strh.w	r3, [sp]
   14d64:	f830 3c04 	ldrh.w	r3, [r0, #-4]
   14d68:	f830 2c58 	ldrh.w	r2, [r0, #-88]
{
   14d6c:	4604      	mov	r4, r0
	BT_DBG("LPN 0x%04x (old) Friend 0x%04x", frnd->lpn, frnd->clear.frnd);
   14d6e:	4815      	ldr	r0, [pc, #84]	; (14dc4 <clear_timeout+0x80>)
   14d70:	f00b ff81 	bl	20c76 <log_3>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   14d74:	f010 fbbf 	bl	254f6 <z_impl_k_uptime_get_32>
	duration = k_uptime_get_32() - frnd->clear.start;
   14d78:	f854 3c08 	ldr.w	r3, [r4, #-8]
   14d7c:	1ac0      	subs	r0, r0, r3
	if (duration > 2 * frnd->poll_to) {
   14d7e:	f854 3c54 	ldr.w	r3, [r4, #-84]
   14d82:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   14d86:	d90f      	bls.n	14da8 <clear_timeout+0x64>
		BT_DBG("Clear Procedure timer expired");
   14d88:	2304      	movs	r3, #4
   14d8a:	f04f 0200 	mov.w	r2, #0
   14d8e:	f363 0207 	bfi	r2, r3, #0, #8
   14d92:	f365 128f 	bfi	r2, r5, #6, #10
   14d96:	490a      	ldr	r1, [pc, #40]	; (14dc0 <clear_timeout+0x7c>)
   14d98:	480b      	ldr	r0, [pc, #44]	; (14dc8 <clear_timeout+0x84>)
   14d9a:	f00b ff40 	bl	20c1e <log_1>
		frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   14d9e:	2300      	movs	r3, #0
   14da0:	f824 3c04 	strh.w	r3, [r4, #-4]
}
   14da4:	b003      	add	sp, #12
   14da6:	bd30      	pop	{r4, r5, pc}
	send_friend_clear(frnd);
   14da8:	f1a4 0058 	sub.w	r0, r4, #88	; 0x58
}
   14dac:	b003      	add	sp, #12
   14dae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	send_friend_clear(frnd);
   14db2:	f7ff bded 	b.w	14990 <send_friend_clear>
   14db6:	bf00      	nop
   14db8:	00025930 	.word	0x00025930
   14dbc:	00025880 	.word	0x00025880
   14dc0:	0002ab4d 	.word	0x0002ab4d
   14dc4:	0002b322 	.word	0x0002b322
   14dc8:	0002b345 	.word	0x0002b345

00014dcc <friend_timeout>:
{
   14dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("lpn 0x%04x send_last %u last %p", frnd->lpn,
   14dce:	2204      	movs	r2, #4
   14dd0:	f04f 0300 	mov.w	r3, #0
   14dd4:	f362 0307 	bfi	r3, r2, #0, #8
   14dd8:	4d3b      	ldr	r5, [pc, #236]	; (14ec8 <friend_timeout+0xfc>)
   14dda:	4a3c      	ldr	r2, [pc, #240]	; (14ecc <friend_timeout+0x100>)
   14ddc:	4f3c      	ldr	r7, [pc, #240]	; (14ed0 <friend_timeout+0x104>)
{
   14dde:	b087      	sub	sp, #28
	BT_DBG("lpn 0x%04x send_last %u last %p", frnd->lpn,
   14de0:	1aad      	subs	r5, r5, r2
   14de2:	f830 2c18 	ldrh.w	r2, [r0, #-24]
   14de6:	9203      	str	r2, [sp, #12]
   14de8:	f810 2c15 	ldrb.w	r2, [r0, #-21]
   14dec:	9702      	str	r7, [sp, #8]
   14dee:	f3c2 0240 	ubfx	r2, r2, #1, #1
{
   14df2:	4604      	mov	r4, r0
	BT_DBG("lpn 0x%04x send_last %u last %p", frnd->lpn,
   14df4:	9204      	str	r2, [sp, #16]
   14df6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   14dfa:	6a82      	ldr	r2, [r0, #40]	; 0x28
   14dfc:	9205      	str	r2, [sp, #20]
   14dfe:	f365 138f 	bfi	r3, r5, #6, #10
   14e02:	2204      	movs	r2, #4
	struct bt_mesh_friend *frnd = CONTAINER_OF(work, struct bt_mesh_friend,
   14e04:	f1a0 0618 	sub.w	r6, r0, #24
	BT_DBG("lpn 0x%04x send_last %u last %p", frnd->lpn,
   14e08:	a902      	add	r1, sp, #8
   14e0a:	4832      	ldr	r0, [pc, #200]	; (14ed4 <friend_timeout+0x108>)
   14e0c:	f00b ff4e 	bl	20cac <log_n>
	if (frnd->send_last && frnd->last) {
   14e10:	f814 3c15 	ldrb.w	r3, [r4, #-21]
   14e14:	079a      	lsls	r2, r3, #30
   14e16:	d520      	bpl.n	14e5a <friend_timeout+0x8e>
   14e18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14e1a:	b1f2      	cbz	r2, 14e5a <friend_timeout+0x8e>
		BT_DBG("Sending frnd->last %p", frnd->last);
   14e1c:	2104      	movs	r1, #4
   14e1e:	f04f 0300 	mov.w	r3, #0
   14e22:	f361 0307 	bfi	r3, r1, #0, #8
   14e26:	f365 138f 	bfi	r3, r5, #6, #10
   14e2a:	4639      	mov	r1, r7
   14e2c:	482a      	ldr	r0, [pc, #168]	; (14ed8 <friend_timeout+0x10c>)
   14e2e:	f00b ff0a 	bl	20c46 <log_2>
		frnd->send_last = 0U;
   14e32:	f814 3c15 	ldrb.w	r3, [r4, #-21]
   14e36:	f36f 0341 	bfc	r3, #1, #1
   14e3a:	f804 3c15 	strb.w	r3, [r4, #-21]
	frnd->pending_req = 0U;
   14e3e:	f814 3c15 	ldrb.w	r3, [r4, #-21]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   14e42:	4926      	ldr	r1, [pc, #152]	; (14edc <friend_timeout+0x110>)
   14e44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	frnd->pending_buf = 1U;
   14e46:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   14e4a:	f043 0310 	orr.w	r3, r3, #16
   14e4e:	f804 3c15 	strb.w	r3, [r4, #-21]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
   14e52:	4632      	mov	r2, r6
   14e54:	f7f6 fa30 	bl	b2b8 <bt_mesh_adv_send>
   14e58:	e012      	b.n	14e80 <friend_timeout+0xb4>
	if (frnd->established && !frnd->pending_req) {
   14e5a:	f003 0344 	and.w	r3, r3, #68	; 0x44
   14e5e:	2b40      	cmp	r3, #64	; 0x40
   14e60:	d110      	bne.n	14e84 <friend_timeout+0xb8>
		BT_WARN("Friendship lost with 0x%04x", frnd->lpn);
   14e62:	f04f 0200 	mov.w	r2, #0
   14e66:	2302      	movs	r3, #2
   14e68:	f363 0207 	bfi	r2, r3, #0, #8
   14e6c:	f834 1c18 	ldrh.w	r1, [r4, #-24]
   14e70:	481b      	ldr	r0, [pc, #108]	; (14ee0 <friend_timeout+0x114>)
   14e72:	f365 128f 	bfi	r2, r5, #6, #10
		BT_WARN("Friendship not established with 0x%04x", frnd->lpn);
   14e76:	f00b fed2 	bl	20c1e <log_1>
		friend_clear(frnd);
   14e7a:	4630      	mov	r0, r6
   14e7c:	f7ff fcd4 	bl	14828 <friend_clear>
}
   14e80:	b007      	add	sp, #28
   14e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	frnd->last = net_buf_slist_get(&frnd->queue);
   14e84:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14e88:	f00f feda 	bl	24c40 <net_buf_slist_get>
   14e8c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
   14e90:	62a0      	str	r0, [r4, #40]	; 0x28
   14e92:	4602      	mov	r2, r0
	if (!frnd->last) {
   14e94:	b938      	cbnz	r0, 14ea6 <friend_timeout+0xda>
		BT_WARN("Friendship not established with 0x%04x", frnd->lpn);
   14e96:	2102      	movs	r1, #2
   14e98:	f361 0207 	bfi	r2, r1, #0, #8
   14e9c:	f365 128f 	bfi	r2, r5, #6, #10
   14ea0:	4619      	mov	r1, r3
   14ea2:	4810      	ldr	r0, [pc, #64]	; (14ee4 <friend_timeout+0x118>)
   14ea4:	e7e7      	b.n	14e76 <friend_timeout+0xaa>
	BT_DBG("Sending buf %p from Friend Queue of LPN 0x%04x",
   14ea6:	2104      	movs	r1, #4
   14ea8:	f04f 0000 	mov.w	r0, #0
   14eac:	f361 0007 	bfi	r0, r1, #0, #8
   14eb0:	f365 108f 	bfi	r0, r5, #6, #10
   14eb4:	f8ad 0000 	strh.w	r0, [sp]
   14eb8:	4905      	ldr	r1, [pc, #20]	; (14ed0 <friend_timeout+0x104>)
   14eba:	480b      	ldr	r0, [pc, #44]	; (14ee8 <friend_timeout+0x11c>)
   14ebc:	f00b fedb 	bl	20c76 <log_3>
	frnd->queue_size--;
   14ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14ec2:	3b01      	subs	r3, #1
   14ec4:	6363      	str	r3, [r4, #52]	; 0x34
   14ec6:	e7ba      	b.n	14e3e <friend_timeout+0x72>
   14ec8:	00025930 	.word	0x00025930
   14ecc:	00025880 	.word	0x00025880
   14ed0:	0002abe6 	.word	0x0002abe6
   14ed4:	0002b501 	.word	0x0002b501
   14ed8:	0002b525 	.word	0x0002b525
   14edc:	00026280 	.word	0x00026280
   14ee0:	0002b53f 	.word	0x0002b53f
   14ee4:	0002b55b 	.word	0x0002b55b
   14ee8:	0002b582 	.word	0x0002b582

00014eec <buf_send_start>:
{
   14eec:	b538      	push	{r3, r4, r5, lr}
   14eee:	4615      	mov	r5, r2
	BT_DBG("err %d", err);
   14ef0:	f04f 0300 	mov.w	r3, #0
   14ef4:	2204      	movs	r2, #4
   14ef6:	f362 0307 	bfi	r3, r2, #0, #8
   14efa:	480b      	ldr	r0, [pc, #44]	; (14f28 <buf_send_start+0x3c>)
   14efc:	4a0b      	ldr	r2, [pc, #44]	; (14f2c <buf_send_start+0x40>)
   14efe:	1a12      	subs	r2, r2, r0
   14f00:	08d2      	lsrs	r2, r2, #3
   14f02:	f362 138f 	bfi	r3, r2, #6, #10
   14f06:	480a      	ldr	r0, [pc, #40]	; (14f30 <buf_send_start+0x44>)
   14f08:	460a      	mov	r2, r1
   14f0a:	490a      	ldr	r1, [pc, #40]	; (14f34 <buf_send_start+0x48>)
   14f0c:	f00b fe9b 	bl	20c46 <log_2>
	frnd->pending_buf = 0U;
   14f10:	78eb      	ldrb	r3, [r5, #3]
   14f12:	f36f 1304 	bfc	r3, #4, #1
	if (!frnd->established) {
   14f16:	f013 0440 	ands.w	r4, r3, #64	; 0x40
	frnd->pending_buf = 0U;
   14f1a:	70eb      	strb	r3, [r5, #3]
	if (!frnd->established) {
   14f1c:	d103      	bne.n	14f26 <buf_send_start+0x3a>
		net_buf_unref(frnd->last);
   14f1e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   14f20:	f008 fc22 	bl	1d768 <net_buf_unref>
		frnd->last = NULL;
   14f24:	642c      	str	r4, [r5, #64]	; 0x40
}
   14f26:	bd38      	pop	{r3, r4, r5, pc}
   14f28:	00025880 	.word	0x00025880
   14f2c:	00025930 	.word	0x00025930
   14f30:	0002b2aa 	.word	0x0002b2aa
   14f34:	0002abca 	.word	0x0002abca

00014f38 <bt_mesh_friend_match.part.12>:
	}

	return false;
}

bool bt_mesh_friend_match(u16_t net_idx, u16_t addr)
   14f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (friend_lpn_matches(frnd, net_idx, addr)) {
   14f3a:	460a      	mov	r2, r1
bool bt_mesh_friend_match(u16_t net_idx, u16_t addr)
   14f3c:	460d      	mov	r5, r1
		if (friend_lpn_matches(frnd, net_idx, addr)) {
   14f3e:	4601      	mov	r1, r0
   14f40:	481a      	ldr	r0, [pc, #104]	; (14fac <bt_mesh_friend_match.part.12+0x74>)
   14f42:	4c1b      	ldr	r4, [pc, #108]	; (14fb0 <bt_mesh_friend_match.part.12+0x78>)
   14f44:	f00f f863 	bl	2400e <friend_lpn_matches>
   14f48:	4b1a      	ldr	r3, [pc, #104]	; (14fb4 <bt_mesh_friend_match.part.12+0x7c>)
   14f4a:	1ae4      	subs	r4, r4, r3
   14f4c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   14f50:	b998      	cbnz	r0, 14f7a <bt_mesh_friend_match.part.12+0x42>
   14f52:	4819      	ldr	r0, [pc, #100]	; (14fb8 <bt_mesh_friend_match.part.12+0x80>)
   14f54:	f00f f85b 	bl	2400e <friend_lpn_matches>
   14f58:	4606      	mov	r6, r0
   14f5a:	bb20      	cbnz	r0, 14fa6 <bt_mesh_friend_match.part.12+0x6e>
			       frnd->lpn, addr);
			return true;
		}
	}

	BT_DBG("No matching LPN for address 0x%04x", addr);
   14f5c:	2204      	movs	r2, #4
   14f5e:	f04f 0300 	mov.w	r3, #0
   14f62:	f362 0307 	bfi	r3, r2, #0, #8
   14f66:	f364 138f 	bfi	r3, r4, #6, #10
   14f6a:	462a      	mov	r2, r5
   14f6c:	4913      	ldr	r1, [pc, #76]	; (14fbc <bt_mesh_friend_match.part.12+0x84>)
   14f6e:	4814      	ldr	r0, [pc, #80]	; (14fc0 <bt_mesh_friend_match.part.12+0x88>)
   14f70:	f00b fe69 	bl	20c46 <log_2>

	return false;
}
   14f74:	4630      	mov	r0, r6
   14f76:	b002      	add	sp, #8
   14f78:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   14f7a:	2300      	movs	r3, #0
			BT_DBG("LPN 0x%04x matched address 0x%04x",
   14f7c:	2204      	movs	r2, #4
   14f7e:	f04f 0100 	mov.w	r1, #0
   14f82:	f362 0107 	bfi	r1, r2, #0, #8
   14f86:	4a0f      	ldr	r2, [pc, #60]	; (14fc4 <bt_mesh_friend_match.part.12+0x8c>)
   14f88:	2078      	movs	r0, #120	; 0x78
   14f8a:	fb00 2203 	mla	r2, r0, r3, r2
   14f8e:	f364 118f 	bfi	r1, r4, #6, #10
   14f92:	f8ad 1000 	strh.w	r1, [sp]
   14f96:	462b      	mov	r3, r5
   14f98:	8c12      	ldrh	r2, [r2, #32]
   14f9a:	4908      	ldr	r1, [pc, #32]	; (14fbc <bt_mesh_friend_match.part.12+0x84>)
   14f9c:	480a      	ldr	r0, [pc, #40]	; (14fc8 <bt_mesh_friend_match.part.12+0x90>)
   14f9e:	f00b fe6a 	bl	20c76 <log_3>
			return true;
   14fa2:	2601      	movs	r6, #1
   14fa4:	e7e6      	b.n	14f74 <bt_mesh_friend_match.part.12+0x3c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   14fa6:	2301      	movs	r3, #1
   14fa8:	e7e8      	b.n	14f7c <bt_mesh_friend_match.part.12+0x44>
   14faa:	bf00      	nop
   14fac:	20007080 	.word	0x20007080
   14fb0:	00025930 	.word	0x00025930
   14fb4:	00025880 	.word	0x00025880
   14fb8:	200070f8 	.word	0x200070f8
   14fbc:	0002ac36 	.word	0x0002ac36
   14fc0:	0002aeeb 	.word	0x0002aeeb
   14fc4:	20007060 	.word	0x20007060
   14fc8:	0002af12 	.word	0x0002af12

00014fcc <encode_friend_ctl>:
{
   14fcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14fce:	4615      	mov	r5, r2
	BT_DBG("LPN 0x%04x", frnd->lpn);
   14fd0:	f04f 0300 	mov.w	r3, #0
   14fd4:	2204      	movs	r2, #4
{
   14fd6:	460e      	mov	r6, r1
	BT_DBG("LPN 0x%04x", frnd->lpn);
   14fd8:	f362 0307 	bfi	r3, r2, #0, #8
   14fdc:	491a      	ldr	r1, [pc, #104]	; (15048 <encode_friend_ctl+0x7c>)
   14fde:	4a1b      	ldr	r2, [pc, #108]	; (1504c <encode_friend_ctl+0x80>)
   14fe0:	1a52      	subs	r2, r2, r1
   14fe2:	08d2      	lsrs	r2, r2, #3
   14fe4:	f362 138f 	bfi	r3, r2, #6, #10
{
   14fe8:	4604      	mov	r4, r0
	BT_DBG("LPN 0x%04x", frnd->lpn);
   14fea:	8802      	ldrh	r2, [r0, #0]
   14fec:	4918      	ldr	r1, [pc, #96]	; (15050 <encode_friend_ctl+0x84>)
   14fee:	4819      	ldr	r0, [pc, #100]	; (15054 <encode_friend_ctl+0x88>)
   14ff0:	f00b fe29 	bl	20c46 <log_2>
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
   14ff4:	4631      	mov	r1, r6
   14ff6:	4628      	mov	r0, r5
   14ff8:	f00f fecc 	bl	24d94 <net_buf_simple_push_u8>
	info.src = bt_mesh_primary_addr();
   14ffc:	f7fa fa66 	bl	f4cc <bt_mesh_primary_addr>
	info.dst = frnd->lpn;
   15000:	8823      	ldrh	r3, [r4, #0]
   15002:	f8ad 3006 	strh.w	r3, [sp, #6]
	info.ttl = 0U;
   15006:	2380      	movs	r3, #128	; 0x80
   15008:	f88d 300b 	strb.w	r3, [sp, #11]
	info.src = bt_mesh_primary_addr();
   1500c:	f8ad 0004 	strh.w	r0, [sp, #4]
	seq = bt_mesh_next_seq();
   15010:	f7f7 fbc2 	bl	c798 <bt_mesh_next_seq>
	info.seq[0] = seq >> 16;
   15014:	0c03      	lsrs	r3, r0, #16
   15016:	f88d 3008 	strb.w	r3, [sp, #8]
	info.iv_index = BT_MESH_NET_IVI_TX;
   1501a:	4a0f      	ldr	r2, [pc, #60]	; (15058 <encode_friend_ctl+0x8c>)
	info.seq[2] = seq;
   1501c:	f88d 000a 	strb.w	r0, [sp, #10]
	info.seq[1] = seq >> 8;
   15020:	0a03      	lsrs	r3, r0, #8
   15022:	f88d 3009 	strb.w	r3, [sp, #9]
	info.iv_index = BT_MESH_NET_IVI_TX;
   15026:	6813      	ldr	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15028:	f3bf 8f5b 	dmb	ish
   1502c:	6892      	ldr	r2, [r2, #8]
   1502e:	f3bf 8f5b 	dmb	ish
   15032:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15036:	1a9b      	subs	r3, r3, r2
	return create_friend_pdu(frnd, &info, sdu);
   15038:	a901      	add	r1, sp, #4
   1503a:	462a      	mov	r2, r5
   1503c:	4620      	mov	r0, r4
	info.iv_index = BT_MESH_NET_IVI_TX;
   1503e:	9303      	str	r3, [sp, #12]
	return create_friend_pdu(frnd, &info, sdu);
   15040:	f7ff fd7e 	bl	14b40 <create_friend_pdu>
}
   15044:	b004      	add	sp, #16
   15046:	bd70      	pop	{r4, r5, r6, pc}
   15048:	00025880 	.word	0x00025880
   1504c:	00025930 	.word	0x00025930
   15050:	0002aae5 	.word	0x0002aae5
   15054:	0002b490 	.word	0x0002b490
   15058:	20007060 	.word	0x20007060

0001505c <enqueue_sub_cfm>:
{
   1505c:	b570      	push	{r4, r5, r6, lr}
   1505e:	b086      	sub	sp, #24
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*cfm));
   15060:	ab02      	add	r3, sp, #8
   15062:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   15066:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1506a:	9303      	str	r3, [sp, #12]
	BT_DBG("lpn 0x%04x xact 0x%02x", frnd->lpn, xact);
   1506c:	2204      	movs	r2, #4
   1506e:	f04f 0300 	mov.w	r3, #0
   15072:	f362 0307 	bfi	r3, r2, #0, #8
   15076:	4d21      	ldr	r5, [pc, #132]	; (150fc <enqueue_sub_cfm+0xa0>)
   15078:	4a21      	ldr	r2, [pc, #132]	; (15100 <enqueue_sub_cfm+0xa4>)
   1507a:	1aad      	subs	r5, r5, r2
   1507c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   15080:	f365 138f 	bfi	r3, r5, #6, #10
   15084:	f8ad 3000 	strh.w	r3, [sp]
   15088:	8802      	ldrh	r2, [r0, #0]
   1508a:	460b      	mov	r3, r1
{
   1508c:	460e      	mov	r6, r1
   1508e:	4604      	mov	r4, r0
	BT_DBG("lpn 0x%04x xact 0x%02x", frnd->lpn, xact);
   15090:	491c      	ldr	r1, [pc, #112]	; (15104 <enqueue_sub_cfm+0xa8>)
   15092:	481d      	ldr	r0, [pc, #116]	; (15108 <enqueue_sub_cfm+0xac>)
   15094:	f00b fdef 	bl	20c76 <log_3>
	net_buf_simple_reserve(&sdu, 1);
   15098:	2101      	movs	r1, #1
   1509a:	a803      	add	r0, sp, #12
   1509c:	f00f fdb1 	bl	24c02 <net_buf_simple_reserve>
	cfm = net_buf_simple_add(&sdu, sizeof(*cfm));
   150a0:	2101      	movs	r1, #1
   150a2:	a803      	add	r0, sp, #12
   150a4:	f00f fe12 	bl	24ccc <net_buf_simple_add>
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   150a8:	aa03      	add	r2, sp, #12
	cfm->xact = xact;
   150aa:	7006      	strb	r6, [r0, #0]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, &sdu);
   150ac:	2109      	movs	r1, #9
   150ae:	4620      	mov	r0, r4
   150b0:	f7ff ff8c 	bl	14fcc <encode_friend_ctl>
	if (!buf) {
   150b4:	4606      	mov	r6, r0
   150b6:	b958      	cbnz	r0, 150d0 <enqueue_sub_cfm+0x74>
		BT_ERR("Unable to encode Subscription List Confirmation");
   150b8:	f04f 0100 	mov.w	r1, #0
   150bc:	2301      	movs	r3, #1
   150be:	f363 0107 	bfi	r1, r3, #0, #8
   150c2:	f365 118f 	bfi	r1, r5, #6, #10
   150c6:	4811      	ldr	r0, [pc, #68]	; (1510c <enqueue_sub_cfm+0xb0>)
   150c8:	f00b fd9c 	bl	20c04 <log_0>
}
   150cc:	b006      	add	sp, #24
   150ce:	bd70      	pop	{r4, r5, r6, pc}
	if (frnd->last) {
   150d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   150d2:	b16b      	cbz	r3, 150f0 <enqueue_sub_cfm+0x94>
		BT_DBG("Discarding last PDU");
   150d4:	2304      	movs	r3, #4
   150d6:	f04f 0200 	mov.w	r2, #0
   150da:	f363 0207 	bfi	r2, r3, #0, #8
   150de:	480c      	ldr	r0, [pc, #48]	; (15110 <enqueue_sub_cfm+0xb4>)
   150e0:	4908      	ldr	r1, [pc, #32]	; (15104 <enqueue_sub_cfm+0xa8>)
   150e2:	f365 128f 	bfi	r2, r5, #6, #10
   150e6:	f00b fd9a 	bl	20c1e <log_1>
		net_buf_unref(frnd->last);
   150ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
   150ec:	f008 fb3c 	bl	1d768 <net_buf_unref>
	frnd->send_last = 1U;
   150f0:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   150f2:	6426      	str	r6, [r4, #64]	; 0x40
	frnd->send_last = 1U;
   150f4:	f043 0302 	orr.w	r3, r3, #2
   150f8:	70e3      	strb	r3, [r4, #3]
   150fa:	e7e7      	b.n	150cc <enqueue_sub_cfm+0x70>
   150fc:	00025930 	.word	0x00025930
   15100:	00025880 	.word	0x00025880
   15104:	0002ab05 	.word	0x0002ab05
   15108:	0002b3f1 	.word	0x0002b3f1
   1510c:	0002b40c 	.word	0x0002b40c
   15110:	0002b43c 	.word	0x0002b43c

00015114 <enqueue_update>:
{
   15114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15118:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
   1511a:	ab03      	add	r3, sp, #12
{
   1511c:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
   1511e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
   15122:	89c0      	ldrh	r0, [r0, #14]
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
   15124:	9305      	str	r3, [sp, #20]
{
   15126:	460f      	mov	r7, r1
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*upd));
   15128:	e9cd 2306 	strd	r2, r3, [sp, #24]
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
   1512c:	f7f6 fd38 	bl	bba0 <bt_mesh_subnet_get>
	BT_DBG("lpn 0x%04x md 0x%02x", frnd->lpn, md);
   15130:	2204      	movs	r2, #4
   15132:	f04f 0300 	mov.w	r3, #0
   15136:	f362 0307 	bfi	r3, r2, #0, #8
   1513a:	4d20      	ldr	r5, [pc, #128]	; (151bc <enqueue_update+0xa8>)
   1513c:	4a20      	ldr	r2, [pc, #128]	; (151c0 <enqueue_update+0xac>)
   1513e:	4921      	ldr	r1, [pc, #132]	; (151c4 <enqueue_update+0xb0>)
   15140:	1aad      	subs	r5, r5, r2
   15142:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   15146:	f365 138f 	bfi	r3, r5, #6, #10
   1514a:	8822      	ldrh	r2, [r4, #0]
   1514c:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
   15150:	4680      	mov	r8, r0
	BT_DBG("lpn 0x%04x md 0x%02x", frnd->lpn, md);
   15152:	463b      	mov	r3, r7
   15154:	481c      	ldr	r0, [pc, #112]	; (151c8 <enqueue_update+0xb4>)
   15156:	f00b fd8e 	bl	20c76 <log_3>
	net_buf_simple_reserve(&sdu, 1);
   1515a:	2101      	movs	r1, #1
   1515c:	a805      	add	r0, sp, #20
   1515e:	f00f fd50 	bl	24c02 <net_buf_simple_reserve>
	upd = net_buf_simple_add(&sdu, sizeof(*upd));
   15162:	2106      	movs	r1, #6
   15164:	a805      	add	r0, sp, #20
   15166:	f00f fdb1 	bl	24ccc <net_buf_simple_add>
   1516a:	4606      	mov	r6, r0
	upd->flags = bt_mesh_net_flags(sub);
   1516c:	4640      	mov	r0, r8
   1516e:	f00d ff53 	bl	23018 <bt_mesh_net_flags>
   15172:	4b16      	ldr	r3, [pc, #88]	; (151cc <enqueue_update+0xb8>)
   15174:	7030      	strb	r0, [r6, #0]
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
   15176:	681b      	ldr	r3, [r3, #0]
	upd->md = md;
   15178:	7177      	strb	r7, [r6, #5]
   1517a:	ba1b      	rev	r3, r3
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   1517c:	2102      	movs	r1, #2
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
   1517e:	f8c6 3001 	str.w	r3, [r6, #1]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, &sdu);
   15182:	aa05      	add	r2, sp, #20
   15184:	4620      	mov	r0, r4
   15186:	f7ff ff21 	bl	14fcc <encode_friend_ctl>
	if (!buf) {
   1518a:	4601      	mov	r1, r0
   1518c:	b950      	cbnz	r0, 151a4 <enqueue_update+0x90>
		BT_ERR("Unable to encode Friend Update");
   1518e:	2301      	movs	r3, #1
   15190:	f363 0107 	bfi	r1, r3, #0, #8
   15194:	f365 118f 	bfi	r1, r5, #6, #10
   15198:	480d      	ldr	r0, [pc, #52]	; (151d0 <enqueue_update+0xbc>)
   1519a:	f00b fd33 	bl	20c04 <log_0>
}
   1519e:	b008      	add	sp, #32
   151a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	frnd->sec_update = 0U;
   151a4:	78e3      	ldrb	r3, [r4, #3]
   151a6:	f36f 03c3 	bfc	r3, #3, #1
   151aa:	70e3      	strb	r3, [r4, #3]
	net_buf_slist_put(&frnd->queue, buf);
   151ac:	f104 0044 	add.w	r0, r4, #68	; 0x44
   151b0:	f00f fd2b 	bl	24c0a <net_buf_slist_put>
	frnd->queue_size++;
   151b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   151b6:	3301      	adds	r3, #1
   151b8:	64e3      	str	r3, [r4, #76]	; 0x4c
   151ba:	e7f0      	b.n	1519e <enqueue_update+0x8a>
   151bc:	00025930 	.word	0x00025930
   151c0:	00025880 	.word	0x00025880
   151c4:	0002aaf7 	.word	0x0002aaf7
   151c8:	0002b454 	.word	0x0002b454
   151cc:	20007060 	.word	0x20007060
   151d0:	0002b46d 	.word	0x0002b46d

000151d4 <enqueue_friend_pdu>:
{
   151d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151d6:	4616      	mov	r6, r2
	BT_DBG("type %u", type);
   151d8:	f04f 0300 	mov.w	r3, #0
   151dc:	2204      	movs	r2, #4
   151de:	f362 0307 	bfi	r3, r2, #0, #8
   151e2:	4d35      	ldr	r5, [pc, #212]	; (152b8 <enqueue_friend_pdu+0xe4>)
   151e4:	4a35      	ldr	r2, [pc, #212]	; (152bc <enqueue_friend_pdu+0xe8>)
   151e6:	1aad      	subs	r5, r5, r2
   151e8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
{
   151ec:	460f      	mov	r7, r1
   151ee:	4604      	mov	r4, r0
	BT_DBG("type %u", type);
   151f0:	460a      	mov	r2, r1
   151f2:	f365 138f 	bfi	r3, r5, #6, #10
   151f6:	4932      	ldr	r1, [pc, #200]	; (152c0 <enqueue_friend_pdu+0xec>)
   151f8:	4832      	ldr	r0, [pc, #200]	; (152c4 <enqueue_friend_pdu+0xf0>)
   151fa:	f00b fd24 	bl	20c46 <log_2>
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
   151fe:	b97f      	cbnz	r7, 15220 <enqueue_friend_pdu+0x4c>
		if (frnd->sec_update) {
   15200:	78e3      	ldrb	r3, [r4, #3]
   15202:	071a      	lsls	r2, r3, #28
   15204:	d503      	bpl.n	1520e <enqueue_friend_pdu+0x3a>
			enqueue_update(frnd, 1);
   15206:	2101      	movs	r1, #1
   15208:	4620      	mov	r0, r4
   1520a:	f7ff ff83 	bl	15114 <enqueue_update>
	net_buf_slist_put(&frnd->queue, buf);
   1520e:	4631      	mov	r1, r6
   15210:	f104 0044 	add.w	r0, r4, #68	; 0x44
   15214:	f00f fcf9 	bl	24c0a <net_buf_slist_put>
	frnd->queue_size++;
   15218:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1521a:	3301      	adds	r3, #1
   1521c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   1521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	adv = FRIEND_ADV(buf);
   15220:	6973      	ldr	r3, [r6, #20]
		struct net_buf *buf = (void *)sys_slist_peek_head(&seg->queue);
   15222:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	seg = get_seg(frnd, BT_MESH_ADV(buf)->addr, &adv->seq_auth);
   15224:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
		if (buf && BT_MESH_ADV(buf)->addr == src &&
   15228:	b1da      	cbz	r2, 15262 <enqueue_friend_pdu+0x8e>
   1522a:	6952      	ldr	r2, [r2, #20]
   1522c:	8951      	ldrh	r1, [r2, #10]
   1522e:	4561      	cmp	r1, ip
   15230:	d107      	bne.n	15242 <enqueue_friend_pdu+0x6e>
   15232:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   15236:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1523a:	4299      	cmp	r1, r3
   1523c:	bf08      	it	eq
   1523e:	4290      	cmpeq	r0, r2
   15240:	d00f      	beq.n	15262 <enqueue_friend_pdu+0x8e>
		BT_ERR("No free friend segment RX contexts for 0x%04x",
   15242:	2301      	movs	r3, #1
   15244:	f04f 0200 	mov.w	r2, #0
   15248:	f363 0207 	bfi	r2, r3, #0, #8
   1524c:	f365 128f 	bfi	r2, r5, #6, #10
   15250:	481d      	ldr	r0, [pc, #116]	; (152c8 <enqueue_friend_pdu+0xf4>)
   15252:	4661      	mov	r1, ip
   15254:	f00b fce3 	bl	20c1e <log_1>
		net_buf_unref(buf);
   15258:	4630      	mov	r0, r6
}
   1525a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   1525e:	f008 ba83 	b.w	1d768 <net_buf_unref>
	net_buf_slist_put(&seg->queue, buf);
   15262:	4631      	mov	r1, r6
   15264:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15268:	f00f fccf 	bl	24c0a <net_buf_slist_put>
	if (type == BT_MESH_FRIEND_PDU_COMPLETE) {
   1526c:	2f02      	cmp	r7, #2
   1526e:	d1d6      	bne.n	1521e <enqueue_friend_pdu+0x4a>
		if (frnd->sec_update) {
   15270:	78e3      	ldrb	r3, [r4, #3]
   15272:	071b      	lsls	r3, r3, #28
   15274:	d503      	bpl.n	1527e <enqueue_friend_pdu+0xaa>
			enqueue_update(frnd, 1);
   15276:	2101      	movs	r1, #1
   15278:	4620      	mov	r0, r4
   1527a:	f7ff ff4b 	bl	15114 <enqueue_update>
		SYS_SLIST_FOR_EACH_CONTAINER(&seg->queue, buf, node) {
   1527e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   15280:	b16a      	cbz	r2, 1529e <enqueue_friend_pdu+0xca>
   15282:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15284:	4611      	mov	r1, r2
   15286:	3301      	adds	r3, #1
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
   15288:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1528c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15290:	6948      	ldr	r0, [r1, #20]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15292:	6809      	ldr	r1, [r1, #0]
   15294:	e9c0 6704 	strd	r6, r7, [r0, #16]
	return node->next;
   15298:	1c58      	adds	r0, r3, #1
		SYS_SLIST_FOR_EACH_CONTAINER(&seg->queue, buf, node) {
   1529a:	b949      	cbnz	r1, 152b0 <enqueue_friend_pdu+0xdc>
   1529c:	64e3      	str	r3, [r4, #76]	; 0x4c
Z_GENLIST_APPEND_LIST(slist, snode)
   1529e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
Z_GENLIST_MERGE_LIST(slist, snode)
   152a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
Z_GENLIST_APPEND_LIST(slist, snode)
   152a2:	b93b      	cbnz	r3, 152b4 <enqueue_friend_pdu+0xe0>
	list->head = node;
   152a4:	6462      	str	r2, [r4, #68]	; 0x44
	list->head = NULL;
   152a6:	2300      	movs	r3, #0
	list->tail = node;
   152a8:	64a1      	str	r1, [r4, #72]	; 0x48
	list->tail = NULL;
   152aa:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
   152ae:	e7b6      	b.n	1521e <enqueue_friend_pdu+0x4a>
   152b0:	4603      	mov	r3, r0
   152b2:	e7ed      	b.n	15290 <enqueue_friend_pdu+0xbc>
	parent->next = child;
   152b4:	601a      	str	r2, [r3, #0]
   152b6:	e7f6      	b.n	152a6 <enqueue_friend_pdu+0xd2>
   152b8:	00025930 	.word	0x00025930
   152bc:	00025880 	.word	0x00025880
   152c0:	0002abb7 	.word	0x0002abb7
   152c4:	0002b3b7 	.word	0x0002b3b7
   152c8:	0002b3c3 	.word	0x0002b3c3

000152cc <bt_mesh_friend_find>:
{
   152cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   152d0:	4616      	mov	r6, r2
   152d2:	461f      	mov	r7, r3
	BT_DBG("net_idx 0x%04x lpn_addr 0x%04x", net_idx, lpn_addr);
   152d4:	f04f 0200 	mov.w	r2, #0
   152d8:	2304      	movs	r3, #4
{
   152da:	460d      	mov	r5, r1
	BT_DBG("net_idx 0x%04x lpn_addr 0x%04x", net_idx, lpn_addr);
   152dc:	f363 0207 	bfi	r2, r3, #0, #8
   152e0:	4920      	ldr	r1, [pc, #128]	; (15364 <bt_mesh_friend_find+0x98>)
   152e2:	4b21      	ldr	r3, [pc, #132]	; (15368 <bt_mesh_friend_find+0x9c>)
   152e4:	1a5b      	subs	r3, r3, r1
   152e6:	08db      	lsrs	r3, r3, #3
   152e8:	f363 128f 	bfi	r2, r3, #6, #10
   152ec:	f8ad 2000 	strh.w	r2, [sp]
   152f0:	462b      	mov	r3, r5
   152f2:	4602      	mov	r2, r0
{
   152f4:	4604      	mov	r4, r0
	BT_DBG("net_idx 0x%04x lpn_addr 0x%04x", net_idx, lpn_addr);
   152f6:	491d      	ldr	r1, [pc, #116]	; (1536c <bt_mesh_friend_find+0xa0>)
   152f8:	481d      	ldr	r0, [pc, #116]	; (15370 <bt_mesh_friend_find+0xa4>)
   152fa:	f00b fcbc 	bl	20c76 <log_3>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   152fe:	4b1d      	ldr	r3, [pc, #116]	; (15374 <bt_mesh_friend_find+0xa8>)
   15300:	2000      	movs	r0, #0
   15302:	461a      	mov	r2, r3
		if (net_idx != BT_MESH_KEY_ANY && frnd->net_idx != net_idx) {
   15304:	f64f 78ff 	movw	r8, #65535	; 0xffff
		if (established && !frnd->established) {
   15308:	f04f 0e78 	mov.w	lr, #120	; 0x78
		if (valid && !frnd->valid) {
   1530c:	b12e      	cbz	r6, 1531a <bt_mesh_friend_find+0x4e>
   1530e:	fb0e 2100 	mla	r1, lr, r0, r2
   15312:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   15316:	0689      	lsls	r1, r1, #26
   15318:	d517      	bpl.n	1534a <bt_mesh_friend_find+0x7e>
		if (established && !frnd->established) {
   1531a:	b12f      	cbz	r7, 15328 <bt_mesh_friend_find+0x5c>
   1531c:	fb0e 2100 	mla	r1, lr, r0, r2
   15320:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   15324:	0649      	lsls	r1, r1, #25
   15326:	d510      	bpl.n	1534a <bt_mesh_friend_find+0x7e>
		if (net_idx != BT_MESH_KEY_ANY && frnd->net_idx != net_idx) {
   15328:	4544      	cmp	r4, r8
   1532a:	d002      	beq.n	15332 <bt_mesh_friend_find+0x66>
   1532c:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   1532e:	42a1      	cmp	r1, r4
   15330:	d10b      	bne.n	1534a <bt_mesh_friend_find+0x7e>
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   15332:	f8b3 c020 	ldrh.w	ip, [r3, #32]
   15336:	f1bc 0f00 	cmp.w	ip, #0
   1533a:	d006      	beq.n	1534a <bt_mesh_friend_find+0x7e>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   1533c:	4565      	cmp	r5, ip
   1533e:	d304      	bcc.n	1534a <bt_mesh_friend_find+0x7e>
   15340:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
   15344:	4461      	add	r1, ip
   15346:	428d      	cmp	r5, r1
   15348:	db07      	blt.n	1535a <bt_mesh_friend_find+0x8e>
   1534a:	3378      	adds	r3, #120	; 0x78
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1534c:	b118      	cbz	r0, 15356 <bt_mesh_friend_find+0x8a>
	return NULL;
   1534e:	2000      	movs	r0, #0
}
   15350:	b002      	add	sp, #8
   15352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15356:	2001      	movs	r0, #1
   15358:	e7d8      	b.n	1530c <bt_mesh_friend_find+0x40>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   1535a:	2378      	movs	r3, #120	; 0x78
   1535c:	fb03 2000 	mla	r0, r3, r0, r2
   15360:	3020      	adds	r0, #32
   15362:	e7f5      	b.n	15350 <bt_mesh_friend_find+0x84>
   15364:	00025880 	.word	0x00025880
   15368:	00025930 	.word	0x00025930
   1536c:	0002aa78 	.word	0x0002aa78
   15370:	0002aec8 	.word	0x0002aec8
   15374:	20007060 	.word	0x20007060

00015378 <bt_mesh_friend_clear_net_idx>:
{
   15378:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("net_idx 0x%04x", net_idx);
   1537a:	2204      	movs	r2, #4
   1537c:	f04f 0300 	mov.w	r3, #0
   15380:	f362 0307 	bfi	r3, r2, #0, #8
   15384:	4914      	ldr	r1, [pc, #80]	; (153d8 <bt_mesh_friend_clear_net_idx+0x60>)
   15386:	4a15      	ldr	r2, [pc, #84]	; (153dc <bt_mesh_friend_clear_net_idx+0x64>)
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
   15388:	4d15      	ldr	r5, [pc, #84]	; (153e0 <bt_mesh_friend_clear_net_idx+0x68>)
   1538a:	1a52      	subs	r2, r2, r1
   1538c:	08d2      	lsrs	r2, r2, #3
	BT_DBG("net_idx 0x%04x", net_idx);
   1538e:	f362 138f 	bfi	r3, r2, #6, #10
   15392:	4914      	ldr	r1, [pc, #80]	; (153e4 <bt_mesh_friend_clear_net_idx+0x6c>)
   15394:	4602      	mov	r2, r0
{
   15396:	4604      	mov	r4, r0
	BT_DBG("net_idx 0x%04x", net_idx);
   15398:	4813      	ldr	r0, [pc, #76]	; (153e8 <bt_mesh_friend_clear_net_idx+0x70>)
   1539a:	f00b fc54 	bl	20c46 <log_2>
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
   1539e:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
   153a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   153a4:	428a      	cmp	r2, r1
   153a6:	d004      	beq.n	153b2 <bt_mesh_friend_clear_net_idx+0x3a>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
   153a8:	428c      	cmp	r4, r1
   153aa:	d10f      	bne.n	153cc <bt_mesh_friend_clear_net_idx+0x54>
			friend_clear(frnd);
   153ac:	480f      	ldr	r0, [pc, #60]	; (153ec <bt_mesh_friend_clear_net_idx+0x74>)
   153ae:	f7ff fa3b 	bl	14828 <friend_clear>
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
   153b2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   153b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   153ba:	4293      	cmp	r3, r2
   153bc:	d00b      	beq.n	153d6 <bt_mesh_friend_clear_net_idx+0x5e>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
   153be:	4294      	cmp	r4, r2
   153c0:	d107      	bne.n	153d2 <bt_mesh_friend_clear_net_idx+0x5a>
			friend_clear(frnd);
   153c2:	480b      	ldr	r0, [pc, #44]	; (153f0 <bt_mesh_friend_clear_net_idx+0x78>)
}
   153c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			friend_clear(frnd);
   153c8:	f7ff ba2e 	b.w	14828 <friend_clear>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
   153cc:	4294      	cmp	r4, r2
   153ce:	d1f0      	bne.n	153b2 <bt_mesh_friend_clear_net_idx+0x3a>
   153d0:	e7ec      	b.n	153ac <bt_mesh_friend_clear_net_idx+0x34>
   153d2:	429c      	cmp	r4, r3
   153d4:	d0f5      	beq.n	153c2 <bt_mesh_friend_clear_net_idx+0x4a>
}
   153d6:	bd38      	pop	{r3, r4, r5, pc}
   153d8:	00025880 	.word	0x00025880
   153dc:	00025930 	.word	0x00025930
   153e0:	20007060 	.word	0x20007060
   153e4:	0002aa99 	.word	0x0002aa99
   153e8:	00028632 	.word	0x00028632
   153ec:	20007080 	.word	0x20007080
   153f0:	200070f8 	.word	0x200070f8

000153f4 <bt_mesh_friend_sec_update>:
	BT_DBG("net_idx 0x%04x", net_idx);
   153f4:	2204      	movs	r2, #4
   153f6:	f04f 0300 	mov.w	r3, #0
   153fa:	f362 0307 	bfi	r3, r2, #0, #8
   153fe:	4918      	ldr	r1, [pc, #96]	; (15460 <bt_mesh_friend_sec_update+0x6c>)
   15400:	4a18      	ldr	r2, [pc, #96]	; (15464 <bt_mesh_friend_sec_update+0x70>)
   15402:	1a52      	subs	r2, r2, r1
   15404:	08d2      	lsrs	r2, r2, #3
   15406:	f362 138f 	bfi	r3, r2, #6, #10
{
   1540a:	b510      	push	{r4, lr}
	BT_DBG("net_idx 0x%04x", net_idx);
   1540c:	4602      	mov	r2, r0
   1540e:	4916      	ldr	r1, [pc, #88]	; (15468 <bt_mesh_friend_sec_update+0x74>)
{
   15410:	4604      	mov	r4, r0
	BT_DBG("net_idx 0x%04x", net_idx);
   15412:	4816      	ldr	r0, [pc, #88]	; (1546c <bt_mesh_friend_sec_update+0x78>)
   15414:	f00b fc17 	bl	20c46 <log_2>
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
   15418:	4b15      	ldr	r3, [pc, #84]	; (15470 <bt_mesh_friend_sec_update+0x7c>)
   1541a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
   1541c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15420:	428a      	cmp	r2, r1
   15422:	d007      	beq.n	15434 <bt_mesh_friend_sec_update+0x40>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
   15424:	428c      	cmp	r4, r1
   15426:	d114      	bne.n	15452 <bt_mesh_friend_sec_update+0x5e>
			frnd->sec_update = 1U;
   15428:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   1542c:	f042 0208 	orr.w	r2, r2, #8
   15430:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
   15434:	f8b3 20a6 	ldrh.w	r2, [r3, #166]	; 0xa6
   15438:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1543c:	428a      	cmp	r2, r1
   1543e:	d007      	beq.n	15450 <bt_mesh_friend_sec_update+0x5c>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
   15440:	428c      	cmp	r4, r1
   15442:	d109      	bne.n	15458 <bt_mesh_friend_sec_update+0x64>
			frnd->sec_update = 1U;
   15444:	f893 209b 	ldrb.w	r2, [r3, #155]	; 0x9b
   15448:	f042 0208 	orr.w	r2, r2, #8
   1544c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
}
   15450:	bd10      	pop	{r4, pc}
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
   15452:	4294      	cmp	r4, r2
   15454:	d1ee      	bne.n	15434 <bt_mesh_friend_sec_update+0x40>
   15456:	e7e7      	b.n	15428 <bt_mesh_friend_sec_update+0x34>
   15458:	4294      	cmp	r4, r2
   1545a:	d1f9      	bne.n	15450 <bt_mesh_friend_sec_update+0x5c>
   1545c:	e7f2      	b.n	15444 <bt_mesh_friend_sec_update+0x50>
   1545e:	bf00      	nop
   15460:	00025880 	.word	0x00025880
   15464:	00025930 	.word	0x00025930
   15468:	0002aab6 	.word	0x0002aab6
   1546c:	00028632 	.word	0x00028632
   15470:	20007060 	.word	0x20007060

00015474 <bt_mesh_friend_clear>:
{
   15474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_net_tx tx = {
   15478:	4603      	mov	r3, r0
{
   1547a:	b089      	sub	sp, #36	; 0x24
	struct bt_mesh_net_tx tx = {
   1547c:	f853 2b04 	ldr.w	r2, [r3], #4
	struct bt_mesh_ctl_friend_clear *msg = (void *)buf->data;
   15480:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_mesh_net_tx tx = {
   15484:	4d43      	ldr	r5, [pc, #268]	; (15594 <bt_mesh_friend_clear+0x120>)
   15486:	2400      	movs	r4, #0
{
   15488:	460e      	mov	r6, r1
	struct bt_mesh_net_tx tx = {
   1548a:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   1548e:	4681      	mov	r9, r0
	struct bt_mesh_net_tx tx = {
   15490:	9407      	str	r4, [sp, #28]
		.src  = bt_mesh_primary_addr(),
   15492:	f7fa f81b 	bl	f4cc <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   15496:	f8ad 001c 	strh.w	r0, [sp, #28]
		.xmit = bt_mesh_net_transmit_get(),
   1549a:	f7fc fa67 	bl	1196c <bt_mesh_net_transmit_get>
   1549e:	4b3e      	ldr	r3, [pc, #248]	; (15598 <bt_mesh_friend_clear+0x124>)
	struct bt_mesh_net_tx tx = {
   154a0:	f88d 001e 	strb.w	r0, [sp, #30]
	if (buf->len < sizeof(*msg)) {
   154a4:	1aed      	subs	r5, r5, r3
   154a6:	88b3      	ldrh	r3, [r6, #4]
   154a8:	2b03      	cmp	r3, #3
   154aa:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   154ae:	d80e      	bhi.n	154ce <bt_mesh_friend_clear+0x5a>
		BT_WARN("Too short Friend Clear");
   154b0:	2302      	movs	r3, #2
   154b2:	f04f 0100 	mov.w	r1, #0
   154b6:	f363 0107 	bfi	r1, r3, #0, #8
   154ba:	4838      	ldr	r0, [pc, #224]	; (1559c <bt_mesh_friend_clear+0x128>)
   154bc:	f365 118f 	bfi	r1, r5, #6, #10
   154c0:	f00b fba0 	bl	20c04 <log_0>
		return -EINVAL;
   154c4:	f06f 0015 	mvn.w	r0, #21
}
   154c8:	b009      	add	sp, #36	; 0x24
   154ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   154ce:	f8b8 3000 	ldrh.w	r3, [r8]
	BT_DBG("LPN addr 0x%04x counter 0x%04x", lpn_addr, lpn_counter);
   154d2:	4933      	ldr	r1, [pc, #204]	; (155a0 <bt_mesh_friend_clear+0x12c>)
   154d4:	4833      	ldr	r0, [pc, #204]	; (155a4 <bt_mesh_friend_clear+0x130>)
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   154d6:	021f      	lsls	r7, r3, #8
   154d8:	ea47 2713 	orr.w	r7, r7, r3, lsr #8
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   154dc:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   154e0:	021e      	lsls	r6, r3, #8
   154e2:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
	BT_DBG("LPN addr 0x%04x counter 0x%04x", lpn_addr, lpn_counter);
   154e6:	2204      	movs	r2, #4
   154e8:	f04f 0300 	mov.w	r3, #0
   154ec:	f362 0307 	bfi	r3, r2, #0, #8
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   154f0:	b2bf      	uxth	r7, r7
	BT_DBG("LPN addr 0x%04x counter 0x%04x", lpn_addr, lpn_counter);
   154f2:	f365 138f 	bfi	r3, r5, #6, #10
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   154f6:	b2b6      	uxth	r6, r6
	BT_DBG("LPN addr 0x%04x counter 0x%04x", lpn_addr, lpn_counter);
   154f8:	f8ad 3000 	strh.w	r3, [sp]
   154fc:	463a      	mov	r2, r7
   154fe:	4633      	mov	r3, r6
   15500:	f00b fbb9 	bl	20c76 <log_3>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
   15504:	f8d9 0000 	ldr.w	r0, [r9]
   15508:	4623      	mov	r3, r4
   1550a:	4622      	mov	r2, r4
   1550c:	4639      	mov	r1, r7
   1550e:	8b80      	ldrh	r0, [r0, #28]
   15510:	f7ff fedc 	bl	152cc <bt_mesh_friend_find>
	if (!frnd) {
   15514:	4681      	mov	r9, r0
   15516:	b960      	cbnz	r0, 15532 <bt_mesh_friend_clear+0xbe>
		BT_WARN("No matching LPN addr 0x%04x", lpn_addr);
   15518:	2302      	movs	r3, #2
   1551a:	f04f 0200 	mov.w	r2, #0
   1551e:	f363 0207 	bfi	r2, r3, #0, #8
   15522:	4821      	ldr	r0, [pc, #132]	; (155a8 <bt_mesh_friend_clear+0x134>)
   15524:	f365 128f 	bfi	r2, r5, #6, #10
   15528:	4639      	mov	r1, r7
   1552a:	f00b fb78 	bl	20c1e <log_1>
		return 0;
   1552e:	4648      	mov	r0, r9
   15530:	e7ca      	b.n	154c8 <bt_mesh_friend_clear+0x54>
	if (lpn_counter - frnd->lpn_counter > 255) {
   15532:	8941      	ldrh	r1, [r0, #10]
   15534:	1a73      	subs	r3, r6, r1
   15536:	2bff      	cmp	r3, #255	; 0xff
   15538:	dd0c      	ble.n	15554 <bt_mesh_friend_clear+0xe0>
		BT_WARN("LPN Counter out of range (old %u new %u)",
   1553a:	2202      	movs	r2, #2
   1553c:	f04f 0300 	mov.w	r3, #0
   15540:	f362 0307 	bfi	r3, r2, #0, #8
   15544:	f365 138f 	bfi	r3, r5, #6, #10
   15548:	4632      	mov	r2, r6
   1554a:	4818      	ldr	r0, [pc, #96]	; (155ac <bt_mesh_friend_clear+0x138>)
   1554c:	f00b fb7b 	bl	20c46 <log_2>
	return 0;
   15550:	4620      	mov	r0, r4
   15552:	e7b9      	b.n	154c8 <bt_mesh_friend_clear+0x54>
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
   15554:	9b06      	ldr	r3, [sp, #24]
   15556:	227f      	movs	r2, #127	; 0x7f
   15558:	725a      	strb	r2, [r3, #9]
	cfm.lpn_addr    = msg->lpn_addr;
   1555a:	f898 2001 	ldrb.w	r2, [r8, #1]
   1555e:	f898 3000 	ldrb.w	r3, [r8]
   15562:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15566:	f8ad 3010 	strh.w	r3, [sp, #16]
	cfm.lpn_counter = msg->lpn_counter;
   1556a:	f898 2003 	ldrb.w	r2, [r8, #3]
   1556e:	f898 3002 	ldrb.w	r3, [r8, #2]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   15572:	9400      	str	r4, [sp, #0]
	cfm.lpn_counter = msg->lpn_counter;
   15574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15578:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
   1557c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15580:	2304      	movs	r3, #4
   15582:	aa04      	add	r2, sp, #16
   15584:	2106      	movs	r1, #6
   15586:	a805      	add	r0, sp, #20
   15588:	f7f8 ff60 	bl	e44c <bt_mesh_ctl_send>
	friend_clear(frnd);
   1558c:	4648      	mov	r0, r9
   1558e:	f7ff f94b 	bl	14828 <friend_clear>
   15592:	e7dd      	b.n	15550 <bt_mesh_friend_clear+0xdc>
   15594:	00025930 	.word	0x00025930
   15598:	00025880 	.word	0x00025880
   1559c:	0002ac9f 	.word	0x0002ac9f
   155a0:	0002aad0 	.word	0x0002aad0
   155a4:	0002acb6 	.word	0x0002acb6
   155a8:	0002acd9 	.word	0x0002acd9
   155ac:	0002acf5 	.word	0x0002acf5

000155b0 <bt_mesh_friend_sub_add>:
{
   155b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   155b4:	4b35      	ldr	r3, [pc, #212]	; (1568c <bt_mesh_friend_sub_add+0xdc>)
   155b6:	4d36      	ldr	r5, [pc, #216]	; (15690 <bt_mesh_friend_sub_add+0xe0>)
   155b8:	1aed      	subs	r5, r5, r3
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   155ba:	888b      	ldrh	r3, [r1, #4]
   155bc:	2b02      	cmp	r3, #2
{
   155be:	4680      	mov	r8, r0
   155c0:	460e      	mov	r6, r1
   155c2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   155c6:	d80d      	bhi.n	155e4 <bt_mesh_friend_sub_add+0x34>
		BT_WARN("Too short Friend Subscription Add");
   155c8:	2302      	movs	r3, #2
   155ca:	f04f 0100 	mov.w	r1, #0
   155ce:	f363 0107 	bfi	r1, r3, #0, #8
   155d2:	4830      	ldr	r0, [pc, #192]	; (15694 <bt_mesh_friend_sub_add+0xe4>)
   155d4:	f365 118f 	bfi	r1, r5, #6, #10
   155d8:	f00b fb14 	bl	20c04 <log_0>
		return -EINVAL;
   155dc:	f06f 0015 	mvn.w	r0, #21
}
   155e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   155e4:	6800      	ldr	r0, [r0, #0]
   155e6:	f8b8 1008 	ldrh.w	r1, [r8, #8]
   155ea:	8b80      	ldrh	r0, [r0, #28]
   155ec:	2301      	movs	r3, #1
   155ee:	461a      	mov	r2, r3
   155f0:	f7ff fe6c 	bl	152cc <bt_mesh_friend_find>
	if (!frnd) {
   155f4:	4604      	mov	r4, r0
   155f6:	b968      	cbnz	r0, 15614 <bt_mesh_friend_sub_add+0x64>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   155f8:	f04f 0200 	mov.w	r2, #0
   155fc:	2302      	movs	r3, #2
   155fe:	f363 0207 	bfi	r2, r3, #0, #8
   15602:	f365 128f 	bfi	r2, r5, #6, #10
   15606:	f8b8 1008 	ldrh.w	r1, [r8, #8]
   1560a:	4823      	ldr	r0, [pc, #140]	; (15698 <bt_mesh_friend_sub_add+0xe8>)
   1560c:	f00b fb07 	bl	20c1e <log_1>
	return 0;
   15610:	2000      	movs	r0, #0
   15612:	e7e5      	b.n	155e0 <bt_mesh_friend_sub_add+0x30>
	if (frnd->pending_buf) {
   15614:	78c3      	ldrb	r3, [r0, #3]
   15616:	06db      	lsls	r3, r3, #27
   15618:	d50a      	bpl.n	15630 <bt_mesh_friend_sub_add+0x80>
		BT_WARN("Previous buffer not yet sent!");
   1561a:	2302      	movs	r3, #2
   1561c:	f04f 0100 	mov.w	r1, #0
   15620:	f363 0107 	bfi	r1, r3, #0, #8
   15624:	f365 118f 	bfi	r1, r5, #6, #10
   15628:	481c      	ldr	r0, [pc, #112]	; (1569c <bt_mesh_friend_sub_add+0xec>)
   1562a:	f00b faeb 	bl	20c04 <log_0>
		return 0;
   1562e:	e7ef      	b.n	15610 <bt_mesh_friend_sub_add+0x60>
	friend_recv_delay(frnd);
   15630:	f7ff fa0a 	bl	14a48 <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   15634:	4630      	mov	r0, r6
   15636:	f00f fbc6 	bl	24dc6 <net_buf_simple_pull_u8>
	BT_WARN("No space in friend subscription list");
   1563a:	f8df 9064 	ldr.w	r9, [pc, #100]	; 156a0 <bt_mesh_friend_sub_add+0xf0>
	xact = net_buf_simple_pull_u8(buf);
   1563e:	4680      	mov	r8, r0
	while (buf->len >= 2) {
   15640:	88b3      	ldrh	r3, [r6, #4]
   15642:	2b01      	cmp	r3, #1
   15644:	d804      	bhi.n	15650 <bt_mesh_friend_sub_add+0xa0>
	enqueue_sub_cfm(frnd, xact);
   15646:	4641      	mov	r1, r8
   15648:	4620      	mov	r0, r4
   1564a:	f7ff fd07 	bl	1505c <enqueue_sub_cfm>
   1564e:	e7df      	b.n	15610 <bt_mesh_friend_sub_add+0x60>
		friend_sub_add(frnd, net_buf_simple_pull_be16(buf));
   15650:	4630      	mov	r0, r6
   15652:	f00f fbc8 	bl	24de6 <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == BT_MESH_ADDR_UNASSIGNED) {
   15656:	8a23      	ldrh	r3, [r4, #16]
   15658:	b123      	cbz	r3, 15664 <bt_mesh_friend_sub_add+0xb4>
   1565a:	8a63      	ldrh	r3, [r4, #18]
   1565c:	b133      	cbz	r3, 1566c <bt_mesh_friend_sub_add+0xbc>
   1565e:	8aa3      	ldrh	r3, [r4, #20]
   15660:	b933      	cbnz	r3, 15670 <bt_mesh_friend_sub_add+0xc0>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   15662:	2302      	movs	r3, #2
			frnd->sub_list[i] = addr;
   15664:	3308      	adds	r3, #8
   15666:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
			return;
   1566a:	e7e9      	b.n	15640 <bt_mesh_friend_sub_add+0x90>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   1566c:	2301      	movs	r3, #1
   1566e:	e7f9      	b.n	15664 <bt_mesh_friend_sub_add+0xb4>
	BT_WARN("No space in friend subscription list");
   15670:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   15674:	f043 0302 	orr.w	r3, r3, #2
   15678:	f363 0707 	bfi	r7, r3, #0, #8
   1567c:	f365 178f 	bfi	r7, r5, #6, #10
   15680:	4639      	mov	r1, r7
   15682:	4648      	mov	r0, r9
   15684:	f00b fabe 	bl	20c04 <log_0>
   15688:	e7da      	b.n	15640 <bt_mesh_friend_sub_add+0x90>
   1568a:	bf00      	nop
   1568c:	00025880 	.word	0x00025880
   15690:	00025930 	.word	0x00025930
   15694:	0002b220 	.word	0x0002b220
   15698:	0002acd9 	.word	0x0002acd9
   1569c:	0002b242 	.word	0x0002b242
   156a0:	0002b260 	.word	0x0002b260

000156a4 <bt_mesh_friend_sub_rem>:
{
   156a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   156a6:	888b      	ldrh	r3, [r1, #4]
   156a8:	2b02      	cmp	r3, #2
{
   156aa:	4605      	mov	r5, r0
   156ac:	460e      	mov	r6, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
   156ae:	d810      	bhi.n	156d2 <bt_mesh_friend_sub_rem+0x2e>
		BT_WARN("Too short Friend Subscription Remove");
   156b0:	2302      	movs	r3, #2
   156b2:	f04f 0100 	mov.w	r1, #0
   156b6:	f363 0107 	bfi	r1, r3, #0, #8
   156ba:	4a2e      	ldr	r2, [pc, #184]	; (15774 <bt_mesh_friend_sub_rem+0xd0>)
   156bc:	4b2e      	ldr	r3, [pc, #184]	; (15778 <bt_mesh_friend_sub_rem+0xd4>)
   156be:	482f      	ldr	r0, [pc, #188]	; (1577c <bt_mesh_friend_sub_rem+0xd8>)
   156c0:	1a9b      	subs	r3, r3, r2
   156c2:	08db      	lsrs	r3, r3, #3
   156c4:	f363 118f 	bfi	r1, r3, #6, #10
   156c8:	f00b fa9c 	bl	20c04 <log_0>
		return -EINVAL;
   156cc:	f06f 0015 	mvn.w	r0, #21
}
   156d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
   156d2:	6800      	ldr	r0, [r0, #0]
   156d4:	8929      	ldrh	r1, [r5, #8]
   156d6:	8b80      	ldrh	r0, [r0, #28]
   156d8:	2301      	movs	r3, #1
   156da:	461a      	mov	r2, r3
   156dc:	f7ff fdf6 	bl	152cc <bt_mesh_friend_find>
	if (!frnd) {
   156e0:	4604      	mov	r4, r0
   156e2:	b980      	cbnz	r0, 15706 <bt_mesh_friend_sub_rem+0x62>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   156e4:	2302      	movs	r3, #2
   156e6:	f04f 0200 	mov.w	r2, #0
   156ea:	f363 0207 	bfi	r2, r3, #0, #8
   156ee:	4921      	ldr	r1, [pc, #132]	; (15774 <bt_mesh_friend_sub_rem+0xd0>)
   156f0:	4b21      	ldr	r3, [pc, #132]	; (15778 <bt_mesh_friend_sub_rem+0xd4>)
   156f2:	4823      	ldr	r0, [pc, #140]	; (15780 <bt_mesh_friend_sub_rem+0xdc>)
   156f4:	1a5b      	subs	r3, r3, r1
   156f6:	08db      	lsrs	r3, r3, #3
   156f8:	f363 128f 	bfi	r2, r3, #6, #10
   156fc:	8929      	ldrh	r1, [r5, #8]
   156fe:	f00b fa8e 	bl	20c1e <log_1>
	return 0;
   15702:	2000      	movs	r0, #0
   15704:	e7e4      	b.n	156d0 <bt_mesh_friend_sub_rem+0x2c>
	if (frnd->pending_buf) {
   15706:	78c3      	ldrb	r3, [r0, #3]
   15708:	f013 0510 	ands.w	r5, r3, #16
   1570c:	d00e      	beq.n	1572c <bt_mesh_friend_sub_rem+0x88>
		BT_WARN("Previous buffer not yet sent!");
   1570e:	2302      	movs	r3, #2
   15710:	f04f 0100 	mov.w	r1, #0
   15714:	f363 0107 	bfi	r1, r3, #0, #8
   15718:	4a16      	ldr	r2, [pc, #88]	; (15774 <bt_mesh_friend_sub_rem+0xd0>)
   1571a:	4b17      	ldr	r3, [pc, #92]	; (15778 <bt_mesh_friend_sub_rem+0xd4>)
   1571c:	4819      	ldr	r0, [pc, #100]	; (15784 <bt_mesh_friend_sub_rem+0xe0>)
   1571e:	1a9b      	subs	r3, r3, r2
   15720:	08db      	lsrs	r3, r3, #3
   15722:	f363 118f 	bfi	r1, r3, #6, #10
   15726:	f00b fa6d 	bl	20c04 <log_0>
		return 0;
   1572a:	e7ea      	b.n	15702 <bt_mesh_friend_sub_rem+0x5e>
	friend_recv_delay(frnd);
   1572c:	f7ff f98c 	bl	14a48 <friend_recv_delay>
	xact = net_buf_simple_pull_u8(buf);
   15730:	4630      	mov	r0, r6
   15732:	f00f fb48 	bl	24dc6 <net_buf_simple_pull_u8>
   15736:	4607      	mov	r7, r0
	while (buf->len >= 2) {
   15738:	88b3      	ldrh	r3, [r6, #4]
   1573a:	2b01      	cmp	r3, #1
   1573c:	d804      	bhi.n	15748 <bt_mesh_friend_sub_rem+0xa4>
	enqueue_sub_cfm(frnd, xact);
   1573e:	4639      	mov	r1, r7
   15740:	4620      	mov	r0, r4
   15742:	f7ff fc8b 	bl	1505c <enqueue_sub_cfm>
   15746:	e7dc      	b.n	15702 <bt_mesh_friend_sub_rem+0x5e>
		friend_sub_rem(frnd, net_buf_simple_pull_be16(buf));
   15748:	4630      	mov	r0, r6
   1574a:	f00f fb4c 	bl	24de6 <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == addr) {
   1574e:	8a23      	ldrh	r3, [r4, #16]
   15750:	4283      	cmp	r3, r0
   15752:	d00a      	beq.n	1576a <bt_mesh_friend_sub_rem+0xc6>
   15754:	8a63      	ldrh	r3, [r4, #18]
   15756:	4283      	cmp	r3, r0
   15758:	d009      	beq.n	1576e <bt_mesh_friend_sub_rem+0xca>
   1575a:	8aa3      	ldrh	r3, [r4, #20]
   1575c:	4283      	cmp	r3, r0
   1575e:	d1eb      	bne.n	15738 <bt_mesh_friend_sub_rem+0x94>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   15760:	2302      	movs	r3, #2
			frnd->sub_list[i] = BT_MESH_ADDR_UNASSIGNED;
   15762:	3308      	adds	r3, #8
   15764:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
			return;
   15768:	e7e6      	b.n	15738 <bt_mesh_friend_sub_rem+0x94>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
   1576a:	2300      	movs	r3, #0
   1576c:	e7f9      	b.n	15762 <bt_mesh_friend_sub_rem+0xbe>
   1576e:	2301      	movs	r3, #1
   15770:	e7f7      	b.n	15762 <bt_mesh_friend_sub_rem+0xbe>
   15772:	bf00      	nop
   15774:	00025880 	.word	0x00025880
   15778:	00025930 	.word	0x00025930
   1577c:	0002b285 	.word	0x0002b285
   15780:	0002acd9 	.word	0x0002acd9
   15784:	0002b242 	.word	0x0002b242

00015788 <bt_mesh_friend_poll>:
{
   15788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1578a:	4b51      	ldr	r3, [pc, #324]	; (158d0 <bt_mesh_friend_poll+0x148>)
   1578c:	4d51      	ldr	r5, [pc, #324]	; (158d4 <bt_mesh_friend_poll+0x14c>)
	struct bt_mesh_ctl_friend_poll *msg = (void *)buf->data;
   1578e:	680f      	ldr	r7, [r1, #0]
	if (buf->len < sizeof(*msg)) {
   15790:	1aed      	subs	r5, r5, r3
   15792:	888b      	ldrh	r3, [r1, #4]
{
   15794:	4606      	mov	r6, r0
   15796:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (buf->len < sizeof(*msg)) {
   1579a:	b963      	cbnz	r3, 157b6 <bt_mesh_friend_poll+0x2e>
		BT_WARN("Too short Friend Poll");
   1579c:	f04f 0100 	mov.w	r1, #0
   157a0:	2302      	movs	r3, #2
   157a2:	f363 0107 	bfi	r1, r3, #0, #8
   157a6:	484c      	ldr	r0, [pc, #304]	; (158d8 <bt_mesh_friend_poll+0x150>)
   157a8:	f365 118f 	bfi	r1, r5, #6, #10
		BT_WARN("Prohibited (non-zero) padding bits");
   157ac:	f00b fa2a 	bl	20c04 <log_0>
		return -EINVAL;
   157b0:	f06f 0615 	mvn.w	r6, #21
   157b4:	e014      	b.n	157e0 <bt_mesh_friend_poll+0x58>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   157b6:	6800      	ldr	r0, [r0, #0]
   157b8:	8931      	ldrh	r1, [r6, #8]
   157ba:	8b80      	ldrh	r0, [r0, #28]
   157bc:	2300      	movs	r3, #0
   157be:	2201      	movs	r2, #1
   157c0:	f7ff fd84 	bl	152cc <bt_mesh_friend_find>
	if (!frnd) {
   157c4:	4604      	mov	r4, r0
   157c6:	b970      	cbnz	r0, 157e6 <bt_mesh_friend_poll+0x5e>
		BT_WARN("No matching LPN addr 0x%04x", rx->ctx.addr);
   157c8:	2302      	movs	r3, #2
   157ca:	f04f 0200 	mov.w	r2, #0
   157ce:	f363 0207 	bfi	r2, r3, #0, #8
   157d2:	8931      	ldrh	r1, [r6, #8]
   157d4:	4841      	ldr	r0, [pc, #260]	; (158dc <bt_mesh_friend_poll+0x154>)
   157d6:	f365 128f 	bfi	r2, r5, #6, #10
   157da:	f00b fa20 	bl	20c1e <log_1>
		return 0;
   157de:	4626      	mov	r6, r4
}
   157e0:	4630      	mov	r0, r6
   157e2:	b003      	add	sp, #12
   157e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->fsn & ~1) {
   157e6:	783a      	ldrb	r2, [r7, #0]
   157e8:	f032 0601 	bics.w	r6, r2, #1
   157ec:	d008      	beq.n	15800 <bt_mesh_friend_poll+0x78>
		BT_WARN("Prohibited (non-zero) padding bits");
   157ee:	f04f 0100 	mov.w	r1, #0
   157f2:	2302      	movs	r3, #2
   157f4:	f363 0107 	bfi	r1, r3, #0, #8
   157f8:	f365 118f 	bfi	r1, r5, #6, #10
   157fc:	4838      	ldr	r0, [pc, #224]	; (158e0 <bt_mesh_friend_poll+0x158>)
   157fe:	e7d5      	b.n	157ac <bt_mesh_friend_poll+0x24>
	if (frnd->pending_buf) {
   15800:	78c3      	ldrb	r3, [r0, #3]
   15802:	06d8      	lsls	r0, r3, #27
		BT_WARN("Previous buffer not yet sent");
   15804:	f04f 0100 	mov.w	r1, #0
	if (frnd->pending_buf) {
   15808:	d508      	bpl.n	1581c <bt_mesh_friend_poll+0x94>
		BT_WARN("Previous buffer not yet sent");
   1580a:	2302      	movs	r3, #2
   1580c:	f363 0107 	bfi	r1, r3, #0, #8
   15810:	f365 118f 	bfi	r1, r5, #6, #10
   15814:	4833      	ldr	r0, [pc, #204]	; (158e4 <bt_mesh_friend_poll+0x15c>)
   15816:	f00b f9f5 	bl	20c04 <log_0>
		return 0;
   1581a:	e7e1      	b.n	157e0 <bt_mesh_friend_poll+0x58>
	BT_DBG("msg->fsn %u frnd->fsn %u", (msg->fsn & 1), frnd->fsn);
   1581c:	2004      	movs	r0, #4
   1581e:	f360 0107 	bfi	r1, r0, #0, #8
   15822:	f365 118f 	bfi	r1, r5, #6, #10
   15826:	f003 0301 	and.w	r3, r3, #1
   1582a:	f8ad 1000 	strh.w	r1, [sp]
   1582e:	f002 0201 	and.w	r2, r2, #1
   15832:	492d      	ldr	r1, [pc, #180]	; (158e8 <bt_mesh_friend_poll+0x160>)
   15834:	482d      	ldr	r0, [pc, #180]	; (158ec <bt_mesh_friend_poll+0x164>)
   15836:	f00b fa1e 	bl	20c76 <log_3>
	friend_recv_delay(frnd);
   1583a:	4620      	mov	r0, r4
   1583c:	f7ff f904 	bl	14a48 <friend_recv_delay>
	if (!frnd->established) {
   15840:	78e3      	ldrb	r3, [r4, #3]
   15842:	065b      	lsls	r3, r3, #25
   15844:	d40f      	bmi.n	15866 <bt_mesh_friend_poll+0xde>
		BT_DBG("Friendship established with 0x%04x", frnd->lpn);
   15846:	2204      	movs	r2, #4
   15848:	f04f 0300 	mov.w	r3, #0
   1584c:	f362 0307 	bfi	r3, r2, #0, #8
   15850:	f365 138f 	bfi	r3, r5, #6, #10
   15854:	8822      	ldrh	r2, [r4, #0]
   15856:	4924      	ldr	r1, [pc, #144]	; (158e8 <bt_mesh_friend_poll+0x160>)
   15858:	4825      	ldr	r0, [pc, #148]	; (158f0 <bt_mesh_friend_poll+0x168>)
   1585a:	f00b f9f4 	bl	20c46 <log_2>
		frnd->established = 1U;
   1585e:	78e3      	ldrb	r3, [r4, #3]
   15860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15864:	70e3      	strb	r3, [r4, #3]
	if (msg->fsn == frnd->fsn && frnd->last) {
   15866:	78e3      	ldrb	r3, [r4, #3]
   15868:	783a      	ldrb	r2, [r7, #0]
   1586a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1586c:	f003 0301 	and.w	r3, r3, #1
   15870:	429a      	cmp	r2, r3
   15872:	d110      	bne.n	15896 <bt_mesh_friend_poll+0x10e>
   15874:	b1a0      	cbz	r0, 158a0 <bt_mesh_friend_poll+0x118>
		BT_DBG("Re-sending last PDU");
   15876:	2304      	movs	r3, #4
   15878:	f04f 0200 	mov.w	r2, #0
   1587c:	f363 0207 	bfi	r2, r3, #0, #8
   15880:	f365 128f 	bfi	r2, r5, #6, #10
   15884:	4918      	ldr	r1, [pc, #96]	; (158e8 <bt_mesh_friend_poll+0x160>)
   15886:	481b      	ldr	r0, [pc, #108]	; (158f4 <bt_mesh_friend_poll+0x16c>)
   15888:	f00b f9c9 	bl	20c1e <log_1>
		frnd->send_last = 1U;
   1588c:	78e3      	ldrb	r3, [r4, #3]
   1588e:	f043 0302 	orr.w	r3, r3, #2
   15892:	70e3      	strb	r3, [r4, #3]
   15894:	e7a4      	b.n	157e0 <bt_mesh_friend_poll+0x58>
		if (frnd->last) {
   15896:	b118      	cbz	r0, 158a0 <bt_mesh_friend_poll+0x118>
			net_buf_unref(frnd->last);
   15898:	f007 ff66 	bl	1d768 <net_buf_unref>
			frnd->last = NULL;
   1589c:	2300      	movs	r3, #0
   1589e:	6423      	str	r3, [r4, #64]	; 0x40
		frnd->fsn = msg->fsn;
   158a0:	78e3      	ldrb	r3, [r4, #3]
   158a2:	783a      	ldrb	r2, [r7, #0]
		if (sys_slist_is_empty(&frnd->queue)) {
   158a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
		frnd->fsn = msg->fsn;
   158a6:	f362 0300 	bfi	r3, r2, #0, #1
   158aa:	70e3      	strb	r3, [r4, #3]
		if (sys_slist_is_empty(&frnd->queue)) {
   158ac:	2900      	cmp	r1, #0
   158ae:	d197      	bne.n	157e0 <bt_mesh_friend_poll+0x58>
			enqueue_update(frnd, 0);
   158b0:	4620      	mov	r0, r4
   158b2:	f7ff fc2f 	bl	15114 <enqueue_update>
			BT_DBG("Enqueued Friend Update to empty queue");
   158b6:	2304      	movs	r3, #4
   158b8:	f04f 0200 	mov.w	r2, #0
   158bc:	f363 0207 	bfi	r2, r3, #0, #8
   158c0:	f365 128f 	bfi	r2, r5, #6, #10
   158c4:	4908      	ldr	r1, [pc, #32]	; (158e8 <bt_mesh_friend_poll+0x160>)
   158c6:	480c      	ldr	r0, [pc, #48]	; (158f8 <bt_mesh_friend_poll+0x170>)
   158c8:	f00b f9a9 	bl	20c1e <log_1>
   158cc:	e788      	b.n	157e0 <bt_mesh_friend_poll+0x58>
   158ce:	bf00      	nop
   158d0:	00025880 	.word	0x00025880
   158d4:	00025930 	.word	0x00025930
   158d8:	0002af38 	.word	0x0002af38
   158dc:	0002acd9 	.word	0x0002acd9
   158e0:	0002af4e 	.word	0x0002af4e
   158e4:	0002af71 	.word	0x0002af71
   158e8:	0002ab27 	.word	0x0002ab27
   158ec:	0002af8e 	.word	0x0002af8e
   158f0:	0002afab 	.word	0x0002afab
   158f4:	0002afd2 	.word	0x0002afd2
   158f8:	0002afea 	.word	0x0002afea

000158fc <bt_mesh_friend_clear_cfm>:
{
   158fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_DBG("");
   158fe:	f04f 0200 	mov.w	r2, #0
   15902:	2304      	movs	r3, #4
   15904:	f363 0207 	bfi	r2, r3, #0, #8
   15908:	4d31      	ldr	r5, [pc, #196]	; (159d0 <bt_mesh_friend_clear_cfm+0xd4>)
   1590a:	4b32      	ldr	r3, [pc, #200]	; (159d4 <bt_mesh_friend_clear_cfm+0xd8>)
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
   1590c:	680e      	ldr	r6, [r1, #0]
	BT_DBG("");
   1590e:	1aed      	subs	r5, r5, r3
{
   15910:	460c      	mov	r4, r1
	BT_DBG("");
   15912:	f3c5 05c9 	ubfx	r5, r5, #3, #10
{
   15916:	4607      	mov	r7, r0
	BT_DBG("");
   15918:	f365 128f 	bfi	r2, r5, #6, #10
   1591c:	492e      	ldr	r1, [pc, #184]	; (159d8 <bt_mesh_friend_clear_cfm+0xdc>)
   1591e:	482f      	ldr	r0, [pc, #188]	; (159dc <bt_mesh_friend_clear_cfm+0xe0>)
   15920:	f00b f97d 	bl	20c1e <log_1>
	if (buf->len < sizeof(*msg)) {
   15924:	88a3      	ldrh	r3, [r4, #4]
   15926:	2b03      	cmp	r3, #3
   15928:	d80c      	bhi.n	15944 <bt_mesh_friend_clear_cfm+0x48>
		BT_WARN("Too short Friend Clear Confirm");
   1592a:	2302      	movs	r3, #2
   1592c:	f04f 0100 	mov.w	r1, #0
   15930:	f363 0107 	bfi	r1, r3, #0, #8
   15934:	482a      	ldr	r0, [pc, #168]	; (159e0 <bt_mesh_friend_clear_cfm+0xe4>)
   15936:	f365 118f 	bfi	r1, r5, #6, #10
   1593a:	f00b f963 	bl	20c04 <log_0>
		return -EINVAL;
   1593e:	f06f 0015 	mvn.w	r0, #21
}
   15942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (frnd->clear.frnd == prev_friend) {
   15944:	4c27      	ldr	r4, [pc, #156]	; (159e4 <bt_mesh_friend_clear_cfm+0xe8>)
	frnd = find_clear(rx->ctx.addr);
   15946:	8939      	ldrh	r1, [r7, #8]
		if (frnd->clear.frnd == prev_friend) {
   15948:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   1594c:	428b      	cmp	r3, r1
   1594e:	d028      	beq.n	159a2 <bt_mesh_friend_clear_cfm+0xa6>
   15950:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   15954:	428b      	cmp	r3, r1
   15956:	d038      	beq.n	159ca <bt_mesh_friend_clear_cfm+0xce>
		BT_WARN("No pending clear procedure for 0x%02x", rx->ctx.addr);
   15958:	f04f 0200 	mov.w	r2, #0
   1595c:	2302      	movs	r3, #2
   1595e:	f363 0207 	bfi	r2, r3, #0, #8
   15962:	f365 128f 	bfi	r2, r5, #6, #10
   15966:	4820      	ldr	r0, [pc, #128]	; (159e8 <bt_mesh_friend_clear_cfm+0xec>)
   15968:	f00b f959 	bl	20c1e <log_1>
		return 0;
   1596c:	2000      	movs	r0, #0
   1596e:	e7e8      	b.n	15942 <bt_mesh_friend_clear_cfm+0x46>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   15970:	8873      	ldrh	r3, [r6, #2]
	if (lpn_counter != frnd->lpn_counter) {
   15972:	8962      	ldrh	r2, [r4, #10]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   15974:	0219      	lsls	r1, r3, #8
   15976:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   1597a:	b289      	uxth	r1, r1
	if (lpn_counter != frnd->lpn_counter) {
   1597c:	428a      	cmp	r2, r1
   1597e:	d008      	beq.n	15992 <bt_mesh_friend_clear_cfm+0x96>
		BT_WARN("LPN counter mismatch (0x%04x != 0x%04x)",
   15980:	2002      	movs	r0, #2
   15982:	f04f 0300 	mov.w	r3, #0
   15986:	f360 0307 	bfi	r3, r0, #0, #8
   1598a:	f365 138f 	bfi	r3, r5, #6, #10
   1598e:	4817      	ldr	r0, [pc, #92]	; (159ec <bt_mesh_friend_clear_cfm+0xf0>)
   15990:	e018      	b.n	159c4 <bt_mesh_friend_clear_cfm+0xc8>
	k_delayed_work_cancel(&frnd->clear.timer);
   15992:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15996:	f00f fd5d 	bl	25454 <k_delayed_work_cancel>
	frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
   1599a:	2000      	movs	r0, #0
   1599c:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
	return 0;
   159a0:	e7cf      	b.n	15942 <bt_mesh_friend_clear_cfm+0x46>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   159a2:	3420      	adds	r4, #32
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   159a4:	8833      	ldrh	r3, [r6, #0]
	if (lpn_addr != frnd->lpn) {
   159a6:	8822      	ldrh	r2, [r4, #0]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
   159a8:	0219      	lsls	r1, r3, #8
   159aa:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
   159ae:	b289      	uxth	r1, r1
	if (lpn_addr != frnd->lpn) {
   159b0:	4291      	cmp	r1, r2
   159b2:	d0dd      	beq.n	15970 <bt_mesh_friend_clear_cfm+0x74>
		BT_WARN("LPN address mismatch (0x%04x != 0x%04x)",
   159b4:	2002      	movs	r0, #2
   159b6:	f04f 0300 	mov.w	r3, #0
   159ba:	f360 0307 	bfi	r3, r0, #0, #8
   159be:	480c      	ldr	r0, [pc, #48]	; (159f0 <bt_mesh_friend_clear_cfm+0xf4>)
   159c0:	f365 138f 	bfi	r3, r5, #6, #10
		BT_WARN("LPN counter mismatch (0x%04x != 0x%04x)",
   159c4:	f00b f93f 	bl	20c46 <log_2>
   159c8:	e7d0      	b.n	1596c <bt_mesh_friend_clear_cfm+0x70>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
   159ca:	3498      	adds	r4, #152	; 0x98
   159cc:	e7ea      	b.n	159a4 <bt_mesh_friend_clear_cfm+0xa8>
   159ce:	bf00      	nop
   159d0:	00025930 	.word	0x00025930
   159d4:	00025880 	.word	0x00025880
   159d8:	0002ab71 	.word	0x0002ab71
   159dc:	00026623 	.word	0x00026623
   159e0:	0002ad1e 	.word	0x0002ad1e
   159e4:	20007060 	.word	0x20007060
   159e8:	0002ad3d 	.word	0x0002ad3d
   159ec:	0002ad8b 	.word	0x0002ad8b
   159f0:	0002ad63 	.word	0x0002ad63

000159f4 <bt_mesh_friend_req>:
{
   159f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159f8:	4bc6      	ldr	r3, [pc, #792]	; (15d14 <bt_mesh_friend_req+0x320>)
   159fa:	4dc7      	ldr	r5, [pc, #796]	; (15d18 <bt_mesh_friend_req+0x324>)
	struct bt_mesh_ctl_friend_req *msg = (void *)buf->data;
   159fc:	680f      	ldr	r7, [r1, #0]
	if (buf->len < sizeof(*msg)) {
   159fe:	1aed      	subs	r5, r5, r3
   15a00:	888b      	ldrh	r3, [r1, #4]
   15a02:	2b09      	cmp	r3, #9
{
   15a04:	b08b      	sub	sp, #44	; 0x2c
   15a06:	4606      	mov	r6, r0
   15a08:	f3c5 05c9 	ubfx	r5, r5, #3, #10
	if (buf->len < sizeof(*msg)) {
   15a0c:	d80a      	bhi.n	15a24 <bt_mesh_friend_req+0x30>
		BT_WARN("Too short Friend Request");
   15a0e:	f04f 0100 	mov.w	r1, #0
   15a12:	2302      	movs	r3, #2
   15a14:	f363 0107 	bfi	r1, r3, #0, #8
   15a18:	48c0      	ldr	r0, [pc, #768]	; (15d1c <bt_mesh_friend_req+0x328>)
   15a1a:	f365 118f 	bfi	r1, r5, #6, #10
		BT_WARN("Prohibited Minimum Queue Size in Friend Request");
   15a1e:	f00b f8f1 	bl	20c04 <log_0>
		return -EINVAL;
   15a22:	e00c      	b.n	15a3e <bt_mesh_friend_req+0x4a>
	if (msg->recv_delay <= 0x09) {
   15a24:	7879      	ldrb	r1, [r7, #1]
   15a26:	2909      	cmp	r1, #9
   15a28:	d80e      	bhi.n	15a48 <bt_mesh_friend_req+0x54>
		BT_WARN("Prohibited ReceiveDelay (0x%02x)", msg->recv_delay);
   15a2a:	f04f 0200 	mov.w	r2, #0
   15a2e:	2302      	movs	r3, #2
   15a30:	f363 0207 	bfi	r2, r3, #0, #8
   15a34:	48ba      	ldr	r0, [pc, #744]	; (15d20 <bt_mesh_friend_req+0x32c>)
   15a36:	f365 128f 	bfi	r2, r5, #6, #10
   15a3a:	f00b f8f0 	bl	20c1e <log_1>
		return -EINVAL;
   15a3e:	f06f 0015 	mvn.w	r0, #21
}
   15a42:	b00b      	add	sp, #44	; 0x2c
   15a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		   ((u32_t)msg->poll_to[1] << 8) |
   15a48:	f897 8003 	ldrb.w	r8, [r7, #3]
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
   15a4c:	78bb      	ldrb	r3, [r7, #2]
		   ((u32_t)msg->poll_to[1] << 8) |
   15a4e:	ea4f 2808 	mov.w	r8, r8, lsl #8
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
   15a52:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
		   ((u32_t)msg->poll_to[2]));
   15a56:	793b      	ldrb	r3, [r7, #4]
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
   15a58:	ea48 0803 	orr.w	r8, r8, r3
	if (poll_to <= 0x000009 || poll_to >= 0x34bc00) {
   15a5c:	4bb1      	ldr	r3, [pc, #708]	; (15d24 <bt_mesh_friend_req+0x330>)
   15a5e:	f1a8 020a 	sub.w	r2, r8, #10
   15a62:	429a      	cmp	r2, r3
   15a64:	d909      	bls.n	15a7a <bt_mesh_friend_req+0x86>
		BT_WARN("Prohibited PollTimeout (0x%06x)", poll_to);
   15a66:	f04f 0200 	mov.w	r2, #0
   15a6a:	2302      	movs	r3, #2
   15a6c:	f363 0207 	bfi	r2, r3, #0, #8
   15a70:	f365 128f 	bfi	r2, r5, #6, #10
   15a74:	4641      	mov	r1, r8
   15a76:	48ac      	ldr	r0, [pc, #688]	; (15d28 <bt_mesh_friend_req+0x334>)
   15a78:	e7df      	b.n	15a3a <bt_mesh_friend_req+0x46>
	if (msg->num_elem == 0x00) {
   15a7a:	79fb      	ldrb	r3, [r7, #7]
   15a7c:	b943      	cbnz	r3, 15a90 <bt_mesh_friend_req+0x9c>
		BT_WARN("Prohibited NumElements value (0x00)");
   15a7e:	f04f 0100 	mov.w	r1, #0
   15a82:	2302      	movs	r3, #2
   15a84:	f363 0107 	bfi	r1, r3, #0, #8
   15a88:	f365 118f 	bfi	r1, r5, #6, #10
   15a8c:	48a7      	ldr	r0, [pc, #668]	; (15d2c <bt_mesh_friend_req+0x338>)
   15a8e:	e7c6      	b.n	15a1e <bt_mesh_friend_req+0x2a>
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr + msg->num_elem - 1)) {
   15a90:	8901      	ldrh	r1, [r0, #8]
   15a92:	440b      	add	r3, r1
   15a94:	2b01      	cmp	r3, #1
   15a96:	d003      	beq.n	15aa0 <bt_mesh_friend_req+0xac>
   15a98:	3b01      	subs	r3, #1
   15a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15a9e:	db08      	blt.n	15ab2 <bt_mesh_friend_req+0xbe>
		BT_WARN("LPN elements stretch outside of unicast range");
   15aa0:	f04f 0100 	mov.w	r1, #0
   15aa4:	2302      	movs	r3, #2
   15aa6:	f363 0107 	bfi	r1, r3, #0, #8
   15aaa:	f365 118f 	bfi	r1, r5, #6, #10
   15aae:	48a0      	ldr	r0, [pc, #640]	; (15d30 <bt_mesh_friend_req+0x33c>)
   15ab0:	e7b5      	b.n	15a1e <bt_mesh_friend_req+0x2a>
	if (!MIN_QUEUE_SIZE_LOG(msg->criteria)) {
   15ab2:	783a      	ldrb	r2, [r7, #0]
   15ab4:	f012 0307 	ands.w	r3, r2, #7
   15ab8:	d108      	bne.n	15acc <bt_mesh_friend_req+0xd8>
		BT_WARN("Prohibited Minimum Queue Size in Friend Request");
   15aba:	f04f 0100 	mov.w	r1, #0
   15abe:	2302      	movs	r3, #2
   15ac0:	f363 0107 	bfi	r1, r3, #0, #8
   15ac4:	f365 118f 	bfi	r1, r5, #6, #10
   15ac8:	489a      	ldr	r0, [pc, #616]	; (15d34 <bt_mesh_friend_req+0x340>)
   15aca:	e7a8      	b.n	15a1e <bt_mesh_friend_req+0x2a>
	if (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE < MIN_QUEUE_SIZE(msg->criteria)) {
   15acc:	2401      	movs	r4, #1
   15ace:	fa04 f203 	lsl.w	r2, r4, r3
   15ad2:	2a10      	cmp	r2, #16
   15ad4:	d90c      	bls.n	15af0 <bt_mesh_friend_req+0xfc>
		BT_WARN("We have a too small Friend Queue size (%u < %u)",
   15ad6:	2102      	movs	r1, #2
   15ad8:	f04f 0300 	mov.w	r3, #0
   15adc:	f361 0307 	bfi	r3, r1, #0, #8
   15ae0:	f365 138f 	bfi	r3, r5, #6, #10
   15ae4:	2110      	movs	r1, #16
   15ae6:	4894      	ldr	r0, [pc, #592]	; (15d38 <bt_mesh_friend_req+0x344>)
   15ae8:	f00b f8ad 	bl	20c46 <log_2>
	return 0;
   15aec:	2000      	movs	r0, #0
   15aee:	e7a8      	b.n	15a42 <bt_mesh_friend_req+0x4e>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
   15af0:	6800      	ldr	r0, [r0, #0]
   15af2:	4622      	mov	r2, r4
   15af4:	2300      	movs	r3, #0
   15af6:	8b80      	ldrh	r0, [r0, #28]
   15af8:	f7ff fbe8 	bl	152cc <bt_mesh_friend_find>
	if (frnd) {
   15afc:	4604      	mov	r4, r0
   15afe:	b9b8      	cbnz	r0, 15b30 <bt_mesh_friend_req+0x13c>
		if (!bt_mesh.frnd[i].valid) {
   15b00:	4b8e      	ldr	r3, [pc, #568]	; (15d3c <bt_mesh_friend_req+0x348>)
   15b02:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   15b06:	0691      	lsls	r1, r2, #26
   15b08:	f140 80f3 	bpl.w	15cf2 <bt_mesh_friend_req+0x2fe>
   15b0c:	f893 209b 	ldrb.w	r2, [r3, #155]	; 0x9b
   15b10:	0692      	lsls	r2, r2, #26
   15b12:	f140 80fc 	bpl.w	15d0e <bt_mesh_friend_req+0x31a>
		BT_WARN("No free Friend contexts for new LPN");
   15b16:	2302      	movs	r3, #2
   15b18:	f04f 0100 	mov.w	r1, #0
   15b1c:	f363 0107 	bfi	r1, r3, #0, #8
   15b20:	4887      	ldr	r0, [pc, #540]	; (15d40 <bt_mesh_friend_req+0x34c>)
   15b22:	f365 118f 	bfi	r1, r5, #6, #10
   15b26:	f00b f86d 	bl	20c04 <log_0>
		return -ENOMEM;
   15b2a:	f06f 000b 	mvn.w	r0, #11
   15b2e:	e788      	b.n	15a42 <bt_mesh_friend_req+0x4e>
		BT_WARN("Existing LPN re-requesting Friendship");
   15b30:	2302      	movs	r3, #2
   15b32:	f04f 0100 	mov.w	r1, #0
   15b36:	f363 0107 	bfi	r1, r3, #0, #8
   15b3a:	4882      	ldr	r0, [pc, #520]	; (15d44 <bt_mesh_friend_req+0x350>)
   15b3c:	f365 118f 	bfi	r1, r5, #6, #10
   15b40:	f00b f860 	bl	20c04 <log_0>
		friend_clear(frnd);
   15b44:	4620      	mov	r0, r4
   15b46:	f7fe fe6f 	bl	14828 <friend_clear>
	frnd->lpn = rx->ctx.addr;
   15b4a:	8930      	ldrh	r0, [r6, #8]
   15b4c:	8020      	strh	r0, [r4, #0]
	frnd->num_elem = msg->num_elem;
   15b4e:	79fb      	ldrb	r3, [r7, #7]
   15b50:	7223      	strb	r3, [r4, #8]
	frnd->net_idx = rx->sub->net_idx;
   15b52:	6833      	ldr	r3, [r6, #0]
   15b54:	8b9b      	ldrh	r3, [r3, #28]
   15b56:	81e3      	strh	r3, [r4, #14]
	frnd->poll_to = poll_to * 100;
   15b58:	2264      	movs	r2, #100	; 0x64
	frnd->recv_delay = msg->recv_delay;
   15b5a:	7879      	ldrb	r1, [r7, #1]
   15b5c:	70a1      	strb	r1, [r4, #2]
	frnd->poll_to = poll_to * 100;
   15b5e:	fb02 f208 	mul.w	r2, r2, r8
   15b62:	6062      	str	r2, [r4, #4]
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
   15b64:	f8b7 c008 	ldrh.w	ip, [r7, #8]
   15b68:	ea4f 230c 	mov.w	r3, ip, lsl #8
   15b6c:	ea43 231c 	orr.w	r3, r3, ip, lsr #8
   15b70:	8163      	strh	r3, [r4, #10]
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
   15b72:	f8b7 c005 	ldrh.w	ip, [r7, #5]
   15b76:	ea4f 230c 	mov.w	r3, ip, lsl #8
   15b7a:	ea43 231c 	orr.w	r3, r3, ip, lsr #8
   15b7e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	BT_DBG("LPN 0x%04x rssi %d recv_delay %u poll_to %ums",
   15b82:	f04f 0c04 	mov.w	ip, #4
   15b86:	f04f 0300 	mov.w	r3, #0
   15b8a:	f36c 0307 	bfi	r3, ip, #0, #8
   15b8e:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 15d6c <bt_mesh_friend_req+0x378>
   15b92:	9209      	str	r2, [sp, #36]	; 0x24
   15b94:	e9cd c005 	strd	ip, r0, [sp, #20]
   15b98:	f996 0015 	ldrsb.w	r0, [r6, #21]
   15b9c:	f365 138f 	bfi	r3, r5, #6, #10
   15ba0:	e9cd 0107 	strd	r0, r1, [sp, #28]
   15ba4:	2205      	movs	r2, #5
   15ba6:	4868      	ldr	r0, [pc, #416]	; (15d48 <bt_mesh_friend_req+0x354>)
   15ba8:	a905      	add	r1, sp, #20
   15baa:	f00b f87f 	bl	20cac <log_n>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   15bae:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   15bb2:	b203      	sxth	r3, r0
   15bb4:	2b00      	cmp	r3, #0
   15bb6:	dd1e      	ble.n	15bf6 <bt_mesh_friend_req+0x202>
	    !bt_mesh_elem_find(frnd->clear.frnd)) {
   15bb8:	f7f9 fc8e 	bl	f4d8 <bt_mesh_elem_find>
	if (BT_MESH_ADDR_IS_UNICAST(frnd->clear.frnd) &&
   15bbc:	b9d8      	cbnz	r0, 15bf6 <bt_mesh_friend_req+0x202>
	BT_DBG("LPN 0x%04x (old) Friend 0x%04x", frnd->lpn, frnd->clear.frnd);
   15bbe:	2304      	movs	r3, #4
   15bc0:	f04f 0100 	mov.w	r1, #0
   15bc4:	f363 0107 	bfi	r1, r3, #0, #8
   15bc8:	f365 118f 	bfi	r1, r5, #6, #10
   15bcc:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
   15bd0:	8822      	ldrh	r2, [r4, #0]
   15bd2:	485e      	ldr	r0, [pc, #376]	; (15d4c <bt_mesh_friend_req+0x358>)
   15bd4:	f8ad 1000 	strh.w	r1, [sp]
   15bd8:	495d      	ldr	r1, [pc, #372]	; (15d50 <bt_mesh_friend_req+0x35c>)
   15bda:	f00b f84c 	bl	20c76 <log_3>
   15bde:	f00f fc8a 	bl	254f6 <z_impl_k_uptime_get_32>
	frnd->clear.start = k_uptime_get_32() + (2 * frnd->poll_to);
   15be2:	6863      	ldr	r3, [r4, #4]
   15be4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
	frnd->clear.repeat_sec = 1U;
   15be8:	2301      	movs	r3, #1
	frnd->clear.start = k_uptime_get_32() + (2 * frnd->poll_to);
   15bea:	6520      	str	r0, [r4, #80]	; 0x50
	frnd->clear.repeat_sec = 1U;
   15bec:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
	send_friend_clear(frnd);
   15bf0:	4620      	mov	r0, r4
   15bf2:	f7fe fecd 	bl	14990 <send_friend_clear>
	k_delayed_work_submit(&frnd->timer,
   15bf6:	783a      	ldrb	r2, [r7, #0]
   15bf8:	f996 a015 	ldrsb.w	sl, [r6, #21]
	BT_DBG("ReceiveWindowFactor %u ReceiveWindow %u RSSIFactor %u RSSI %d",
   15bfc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 15d70 <bt_mesh_friend_req+0x37c>
   15c00:	f8cd 9014 	str.w	r9, [sp, #20]
   15c04:	2104      	movs	r1, #4
   15c06:	f04f 0300 	mov.w	r3, #0
   15c0a:	f3c2 00c1 	ubfx	r0, r2, #3, #2
   15c0e:	f361 0307 	bfi	r3, r1, #0, #8
   15c12:	f3c2 1241 	ubfx	r2, r2, #5, #2
   15c16:	494f      	ldr	r1, [pc, #316]	; (15d54 <bt_mesh_friend_req+0x360>)
   15c18:	f811 b002 	ldrb.w	fp, [r1, r2]
   15c1c:	5c0f      	ldrb	r7, [r1, r0]
   15c1e:	484e      	ldr	r0, [pc, #312]	; (15d58 <bt_mesh_friend_req+0x364>)
   15c20:	9706      	str	r7, [sp, #24]
   15c22:	f365 138f 	bfi	r3, r5, #6, #10
   15c26:	f04f 08ff 	mov.w	r8, #255	; 0xff
   15c2a:	2205      	movs	r2, #5
   15c2c:	a905      	add	r1, sp, #20
   15c2e:	e9cd ba08 	strd	fp, sl, [sp, #32]
   15c32:	f8cd 801c 	str.w	r8, [sp, #28]
   15c36:	f00b f839 	bl	20cac <log_n>
	BT_DBG("Local Delay calculated as %d ms", delay);
   15c3a:	2204      	movs	r2, #4
   15c3c:	f04f 0300 	mov.w	r3, #0
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
   15c40:	ebc7 2707 	rsb	r7, r7, r7, lsl #8
	BT_DBG("Local Delay calculated as %d ms", delay);
   15c44:	f362 0307 	bfi	r3, r2, #0, #8
   15c48:	4649      	mov	r1, r9
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
   15c4a:	fb0b 7a1a 	mls	sl, fp, sl, r7
	BT_DBG("Local Delay calculated as %d ms", delay);
   15c4e:	f365 138f 	bfi	r3, r5, #6, #10
   15c52:	4842      	ldr	r0, [pc, #264]	; (15d5c <bt_mesh_friend_req+0x368>)
	delay /= 10;
   15c54:	270a      	movs	r7, #10
   15c56:	fb9a f7f7 	sdiv	r7, sl, r7
	BT_DBG("Local Delay calculated as %d ms", delay);
   15c5a:	463a      	mov	r2, r7
   15c5c:	f00a fff3 	bl	20c46 <log_2>
		return K_MSEC(100);
   15c60:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
	k_delayed_work_submit(&frnd->timer,
   15c64:	bfac      	ite	ge
   15c66:	4639      	movge	r1, r7
   15c68:	2164      	movlt	r1, #100	; 0x64
   15c6a:	f104 0018 	add.w	r0, r4, #24
   15c6e:	f7fe fee3 	bl	14a38 <k_delayed_work_submit>
	friend_cred_create(rx->sub, frnd->lpn, frnd->lpn_counter,
   15c72:	89a3      	ldrh	r3, [r4, #12]
   15c74:	8962      	ldrh	r2, [r4, #10]
   15c76:	8821      	ldrh	r1, [r4, #0]
   15c78:	6830      	ldr	r0, [r6, #0]
   15c7a:	f7f6 f99d 	bl	bfb8 <friend_cred_create>
	NET_BUF_SIMPLE_DEFINE(sdu, 1 + sizeof(*off));
   15c7e:	ab03      	add	r3, sp, #12
   15c80:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   15c84:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15c88:	9305      	str	r3, [sp, #20]
	BT_DBG("");
   15c8a:	f04f 0200 	mov.w	r2, #0
   15c8e:	2304      	movs	r3, #4
   15c90:	f363 0207 	bfi	r2, r3, #0, #8
   15c94:	f365 128f 	bfi	r2, r5, #6, #10
   15c98:	4931      	ldr	r1, [pc, #196]	; (15d60 <bt_mesh_friend_req+0x36c>)
   15c9a:	4832      	ldr	r0, [pc, #200]	; (15d64 <bt_mesh_friend_req+0x370>)
	enqueue_offer(frnd, rx->rssi);
   15c9c:	f996 6015 	ldrsb.w	r6, [r6, #21]
	BT_DBG("");
   15ca0:	f00a ffbd 	bl	20c1e <log_1>
	net_buf_simple_reserve(&sdu, 1);
   15ca4:	2101      	movs	r1, #1
   15ca6:	a805      	add	r0, sp, #20
   15ca8:	f00e ffab 	bl	24c02 <net_buf_simple_reserve>
	off = net_buf_simple_add(&sdu, sizeof(*off));
   15cac:	2106      	movs	r1, #6
   15cae:	a805      	add	r0, sp, #20
   15cb0:	f00f f80c 	bl	24ccc <net_buf_simple_add>
	off->queue_size = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE,
   15cb4:	2310      	movs	r3, #16
   15cb6:	7043      	strb	r3, [r0, #1]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
   15cb8:	2303      	movs	r3, #3
   15cba:	7083      	strb	r3, [r0, #2]
	off->rssi = rssi,
   15cbc:	70c6      	strb	r6, [r0, #3]
	off->recv_win = CONFIG_BT_MESH_FRIEND_RECV_WIN,
   15cbe:	f880 8000 	strb.w	r8, [r0]
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
   15cc2:	89a2      	ldrh	r2, [r4, #12]
   15cc4:	0213      	lsls	r3, r2, #8
   15cc6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   15cca:	8083      	strh	r3, [r0, #4]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, &sdu);
   15ccc:	aa05      	add	r2, sp, #20
   15cce:	2104      	movs	r1, #4
   15cd0:	4620      	mov	r0, r4
   15cd2:	f7ff f97b 	bl	14fcc <encode_friend_ctl>
	if (!buf) {
   15cd6:	4606      	mov	r6, r0
   15cd8:	2800      	cmp	r0, #0
   15cda:	d14b      	bne.n	15d74 <bt_mesh_friend_req+0x380>
		BT_ERR("Unable to encode Friend Offer");
   15cdc:	2301      	movs	r3, #1
   15cde:	f04f 0100 	mov.w	r1, #0
   15ce2:	f363 0107 	bfi	r1, r3, #0, #8
   15ce6:	f365 118f 	bfi	r1, r5, #6, #10
   15cea:	481f      	ldr	r0, [pc, #124]	; (15d68 <bt_mesh_friend_req+0x374>)
   15cec:	f00a ff8a 	bl	20c04 <log_0>
		return;
   15cf0:	e6fc      	b.n	15aec <bt_mesh_friend_req+0xf8>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15cf2:	2100      	movs	r1, #0
			frnd = &bt_mesh.frnd[i];
   15cf4:	2278      	movs	r2, #120	; 0x78
   15cf6:	434a      	muls	r2, r1
   15cf8:	f102 0420 	add.w	r4, r2, #32
   15cfc:	441c      	add	r4, r3
			frnd->valid = 1U;
   15cfe:	4413      	add	r3, r2
   15d00:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   15d04:	f042 0220 	orr.w	r2, r2, #32
   15d08:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
init_friend:
   15d0c:	e71d      	b.n	15b4a <bt_mesh_friend_req+0x156>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15d0e:	2101      	movs	r1, #1
   15d10:	e7f0      	b.n	15cf4 <bt_mesh_friend_req+0x300>
   15d12:	bf00      	nop
   15d14:	00025880 	.word	0x00025880
   15d18:	00025930 	.word	0x00025930
   15d1c:	0002b014 	.word	0x0002b014
   15d20:	0002b02d 	.word	0x0002b02d
   15d24:	0034bbf5 	.word	0x0034bbf5
   15d28:	0002b04e 	.word	0x0002b04e
   15d2c:	0002b06e 	.word	0x0002b06e
   15d30:	0002b092 	.word	0x0002b092
   15d34:	0002b0c0 	.word	0x0002b0c0
   15d38:	0002b0f0 	.word	0x0002b0f0
   15d3c:	20007060 	.word	0x20007060
   15d40:	0002b120 	.word	0x0002b120
   15d44:	0002b144 	.word	0x0002b144
   15d48:	0002b16a 	.word	0x0002b16a
   15d4c:	0002b322 	.word	0x0002b322
   15d50:	0002ab5b 	.word	0x0002ab5b
   15d54:	0002b48c 	.word	0x0002b48c
   15d58:	0002b19c 	.word	0x0002b19c
   15d5c:	0002b1de 	.word	0x0002b1de
   15d60:	0002ab8a 	.word	0x0002ab8a
   15d64:	00026623 	.word	0x00026623
   15d68:	0002b202 	.word	0x0002b202
   15d6c:	0002aba4 	.word	0x0002aba4
   15d70:	0002ab98 	.word	0x0002ab98
	frnd->counter++;
   15d74:	89a3      	ldrh	r3, [r4, #12]
	if (frnd->last) {
   15d76:	6c20      	ldr	r0, [r4, #64]	; 0x40
	frnd->counter++;
   15d78:	3301      	adds	r3, #1
   15d7a:	81a3      	strh	r3, [r4, #12]
	if (frnd->last) {
   15d7c:	b108      	cbz	r0, 15d82 <bt_mesh_friend_req+0x38e>
		net_buf_unref(frnd->last);
   15d7e:	f007 fcf3 	bl	1d768 <net_buf_unref>
	frnd->send_last = 1U;
   15d82:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
   15d84:	6426      	str	r6, [r4, #64]	; 0x40
	frnd->send_last = 1U;
   15d86:	f043 0302 	orr.w	r3, r3, #2
   15d8a:	70e3      	strb	r3, [r4, #3]
   15d8c:	e6ae      	b.n	15aec <bt_mesh_friend_req+0xf8>
   15d8e:	bf00      	nop

00015d90 <bt_mesh_friend_init>:
{
   15d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		frnd->net_idx = BT_MESH_KEY_UNUSED;
   15d94:	4c14      	ldr	r4, [pc, #80]	; (15de8 <bt_mesh_friend_init+0x58>)
		k_delayed_work_init(&frnd->timer, friend_timeout);
   15d96:	4f15      	ldr	r7, [pc, #84]	; (15dec <bt_mesh_friend_init+0x5c>)
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
   15d98:	4e15      	ldr	r6, [pc, #84]	; (15df0 <bt_mesh_friend_init+0x60>)
	list->head = NULL;
   15d9a:	2500      	movs	r5, #0
		frnd->net_idx = BT_MESH_KEY_UNUSED;
   15d9c:	f64f 78ff 	movw	r8, #65535	; 0xffff
		k_delayed_work_init(&frnd->timer, friend_timeout);
   15da0:	4639      	mov	r1, r7
   15da2:	f104 0038 	add.w	r0, r4, #56	; 0x38
		frnd->net_idx = BT_MESH_KEY_UNUSED;
   15da6:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
	list->tail = NULL;
   15daa:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
		k_delayed_work_init(&frnd->timer, friend_timeout);
   15dae:	f00f fb49 	bl	25444 <k_delayed_work_init>
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
   15db2:	4631      	mov	r1, r6
   15db4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   15db8:	f00f fb44 	bl	25444 <k_delayed_work_init>
		k_delayed_work_init(&frnd->timer, friend_timeout);
   15dbc:	4639      	mov	r1, r7
   15dbe:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   15dc2:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
		frnd->net_idx = BT_MESH_KEY_UNUSED;
   15dc6:	f8a4 80a6 	strh.w	r8, [r4, #166]	; 0xa6
   15dca:	e9c4 5537 	strd	r5, r5, [r4, #220]	; 0xdc
		k_delayed_work_init(&frnd->timer, friend_timeout);
   15dce:	f00f fb39 	bl	25444 <k_delayed_work_init>
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
   15dd2:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   15dd6:	4631      	mov	r1, r6
   15dd8:	f00f fb34 	bl	25444 <k_delayed_work_init>
   15ddc:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
}
   15de0:	4628      	mov	r0, r5
   15de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15de6:	bf00      	nop
   15de8:	20007060 	.word	0x20007060
   15dec:	00014dcd 	.word	0x00014dcd
   15df0:	00014d45 	.word	0x00014d45

00015df4 <bt_mesh_friend_enqueue_rx>:

void bt_mesh_friend_enqueue_rx(struct bt_mesh_net_rx *rx,
			       enum bt_mesh_friend_pdu_type type,
			       u64_t *seq_auth, struct net_buf_simple *sbuf)
{
   15df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15df8:	b08d      	sub	sp, #52	; 0x34
   15dfa:	4617      	mov	r7, r2
   15dfc:	9305      	str	r3, [sp, #20]
	int i;

	if (!rx->friend_match ||
   15dfe:	7d03      	ldrb	r3, [r0, #20]
{
   15e00:	9104      	str	r1, [sp, #16]
	if (!rx->friend_match ||
   15e02:	061a      	lsls	r2, r3, #24
{
   15e04:	4604      	mov	r4, r0
	if (!rx->friend_match ||
   15e06:	f140 8091 	bpl.w	15f2c <bt_mesh_friend_enqueue_rx+0x138>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   15e0a:	7b02      	ldrb	r2, [r0, #12]
	if (!rx->friend_match ||
   15e0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15e10:	2a01      	cmp	r2, #1
   15e12:	d804      	bhi.n	15e1e <bt_mesh_friend_enqueue_rx+0x2a>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   15e14:	f003 0330 	and.w	r3, r3, #48	; 0x30
   15e18:	2b10      	cmp	r3, #16
   15e1a:	f040 8087 	bne.w	15f2c <bt_mesh_friend_enqueue_rx+0x138>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   15e1e:	f7fb fe37 	bl	11a90 <bt_mesh_friend_get>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
   15e22:	2801      	cmp	r0, #1
   15e24:	f040 8082 	bne.w	15f2c <bt_mesh_friend_enqueue_rx+0x138>
		return;
	}

	BT_DBG("recv_ttl %u net_idx 0x%04x src 0x%04x dst 0x%04x",
   15e28:	2204      	movs	r2, #4
   15e2a:	f04f 0300 	mov.w	r3, #0
   15e2e:	f362 0307 	bfi	r3, r2, #0, #8
   15e32:	4e4e      	ldr	r6, [pc, #312]	; (15f6c <bt_mesh_friend_enqueue_rx+0x178>)
   15e34:	4a4e      	ldr	r2, [pc, #312]	; (15f70 <bt_mesh_friend_enqueue_rx+0x17c>)
   15e36:	484f      	ldr	r0, [pc, #316]	; (15f74 <bt_mesh_friend_enqueue_rx+0x180>)
   15e38:	4d4f      	ldr	r5, [pc, #316]	; (15f78 <bt_mesh_friend_enqueue_rx+0x184>)
   15e3a:	1ab6      	subs	r6, r6, r2
   15e3c:	4a4f      	ldr	r2, [pc, #316]	; (15f7c <bt_mesh_friend_enqueue_rx+0x188>)
   15e3e:	9207      	str	r2, [sp, #28]
   15e40:	7b22      	ldrb	r2, [r4, #12]
   15e42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15e46:	9208      	str	r2, [sp, #32]
   15e48:	6822      	ldr	r2, [r4, #0]
   15e4a:	8b92      	ldrh	r2, [r2, #28]
   15e4c:	9209      	str	r2, [sp, #36]	; 0x24
   15e4e:	8922      	ldrh	r2, [r4, #8]
   15e50:	920a      	str	r2, [sp, #40]	; 0x28
   15e52:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   15e56:	8962      	ldrh	r2, [r4, #10]
   15e58:	920b      	str	r2, [sp, #44]	; 0x2c
   15e5a:	f366 138f 	bfi	r3, r6, #6, #10
   15e5e:	2205      	movs	r2, #5
   15e60:	a907      	add	r1, sp, #28
   15e62:	f00a ff23 	bl	20cac <log_n>
	       rx->ctx.recv_ttl, rx->sub->net_idx, rx->ctx.addr,
	       rx->ctx.recv_dst);

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15e66:	2300      	movs	r3, #0
   15e68:	9303      	str	r3, [sp, #12]
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (friend_lpn_matches(frnd, rx->sub->net_idx,
   15e6a:	6823      	ldr	r3, [r4, #0]
   15e6c:	8962      	ldrh	r2, [r4, #10]
   15e6e:	8b99      	ldrh	r1, [r3, #28]
   15e70:	f105 0820 	add.w	r8, r5, #32
   15e74:	4640      	mov	r0, r8
   15e76:	f00e f8ca 	bl	2400e <friend_lpn_matches>
   15e7a:	2800      	cmp	r0, #0
   15e7c:	d053      	beq.n	15f26 <bt_mesh_friend_enqueue_rx+0x132>
	BT_DBG("LPN 0x%04x queue_size %u", frnd->lpn, frnd->queue_size);
   15e7e:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   15e82:	f043 0304 	orr.w	r3, r3, #4
   15e86:	f363 0907 	bfi	r9, r3, #0, #8
   15e8a:	f366 198f 	bfi	r9, r6, #6, #10
   15e8e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   15e90:	f8ad 9000 	strh.w	r9, [sp]
   15e94:	8c2a      	ldrh	r2, [r5, #32]
   15e96:	493a      	ldr	r1, [pc, #232]	; (15f80 <bt_mesh_friend_enqueue_rx+0x18c>)
   15e98:	483a      	ldr	r0, [pc, #232]	; (15f84 <bt_mesh_friend_enqueue_rx+0x190>)
   15e9a:	f00a feec 	bl	20c76 <log_3>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   15e9e:	9b04      	ldr	r3, [sp, #16]
   15ea0:	b92b      	cbnz	r3, 15eae <bt_mesh_friend_enqueue_rx+0xba>
   15ea2:	b127      	cbz	r7, 15eae <bt_mesh_friend_enqueue_rx+0xba>
		friend_purge_old_ack(frnd, seq_auth, rx->ctx.addr);
   15ea4:	8922      	ldrh	r2, [r4, #8]
   15ea6:	4639      	mov	r1, r7
   15ea8:	4640      	mov	r0, r8
   15eaa:	f7fe fd0f 	bl	148cc <friend_purge_old_ack>
	info.src = rx->ctx.addr;
   15eae:	68a3      	ldr	r3, [r4, #8]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   15eb0:	7d22      	ldrb	r2, [r4, #20]
	info.src = rx->ctx.addr;
   15eb2:	9307      	str	r3, [sp, #28]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   15eb4:	7b23      	ldrb	r3, [r4, #12]
   15eb6:	f002 0230 	and.w	r2, r2, #48	; 0x30
   15eba:	f3c3 0306 	ubfx	r3, r3, #0, #7
   15ebe:	2a10      	cmp	r2, #16
	info.ctl = rx->ctl;
   15ec0:	b2d9      	uxtb	r1, r3
		info.ttl = rx->ctx.recv_ttl - 1;
   15ec2:	bf1c      	itt	ne
   15ec4:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
   15ec8:	f003 017f 	andne.w	r1, r3, #127	; 0x7f
	info.ctl = rx->ctl;
   15ecc:	7d22      	ldrb	r2, [r4, #20]
   15ece:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   15ed2:	f361 0306 	bfi	r3, r1, #0, #7
   15ed6:	f3c2 01c0 	ubfx	r1, r2, #3, #1
   15eda:	f361 13c7 	bfi	r3, r1, #7, #1
   15ede:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	info.seq[0] = (rx->seq >> 16);
   15ee2:	6923      	ldr	r3, [r4, #16]
	info.seq[2] = rx->seq;
   15ee4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	info.seq[0] = (rx->seq >> 16);
   15ee8:	0c19      	lsrs	r1, r3, #16
   15eea:	f88d 1020 	strb.w	r1, [sp, #32]
	info.seq[1] = (rx->seq >> 8);
   15eee:	0a19      	lsrs	r1, r3, #8
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   15ef0:	4b21      	ldr	r3, [pc, #132]	; (15f78 <bt_mesh_friend_enqueue_rx+0x184>)
	info.seq[1] = (rx->seq >> 8);
   15ef2:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
   15ef6:	681b      	ldr	r3, [r3, #0]
   15ef8:	f002 0201 	and.w	r2, r2, #1
   15efc:	1a9a      	subs	r2, r3, r2
   15efe:	9209      	str	r2, [sp, #36]	; 0x24
	buf = create_friend_pdu(frnd, &info, sbuf);
   15f00:	a907      	add	r1, sp, #28
   15f02:	9a05      	ldr	r2, [sp, #20]
   15f04:	4640      	mov	r0, r8
   15f06:	f7fe fe1b 	bl	14b40 <create_friend_pdu>
	if (!buf) {
   15f0a:	4602      	mov	r2, r0
   15f0c:	b998      	cbnz	r0, 15f36 <bt_mesh_friend_enqueue_rx+0x142>
		BT_ERR("Failed to encode Friend buffer");
   15f0e:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   15f12:	f043 0301 	orr.w	r3, r3, #1
   15f16:	f363 0a07 	bfi	sl, r3, #0, #8
   15f1a:	f366 1a8f 	bfi	sl, r6, #6, #10
   15f1e:	4651      	mov	r1, sl
   15f20:	4819      	ldr	r0, [pc, #100]	; (15f88 <bt_mesh_friend_enqueue_rx+0x194>)
   15f22:	f00a fe6f 	bl	20c04 <log_0>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15f26:	9b03      	ldr	r3, [sp, #12]
   15f28:	3578      	adds	r5, #120	; 0x78
   15f2a:	b113      	cbz	r3, 15f32 <bt_mesh_friend_enqueue_rx+0x13e>
				       rx->ctx.recv_dst)) {
			friend_lpn_enqueue_rx(frnd, rx, type, seq_auth, sbuf);
		}
	}
}
   15f2c:	b00d      	add	sp, #52	; 0x34
   15f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f32:	2301      	movs	r3, #1
   15f34:	e798      	b.n	15e68 <bt_mesh_friend_enqueue_rx+0x74>
	if (seq_auth) {
   15f36:	b127      	cbz	r7, 15f42 <bt_mesh_friend_enqueue_rx+0x14e>
		FRIEND_ADV(buf)->seq_auth = *seq_auth;
   15f38:	6943      	ldr	r3, [r0, #20]
   15f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
   15f3e:	e9c3 0104 	strd	r0, r1, [r3, #16]
	enqueue_friend_pdu(frnd, type, buf);
   15f42:	9904      	ldr	r1, [sp, #16]
   15f44:	4640      	mov	r0, r8
   15f46:	f7ff f945 	bl	151d4 <enqueue_friend_pdu>
	BT_DBG("Queued message for LPN 0x%04x, queue_size %u",
   15f4a:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   15f4e:	f043 0304 	orr.w	r3, r3, #4
   15f52:	f363 0b07 	bfi	fp, r3, #0, #8
   15f56:	f366 1b8f 	bfi	fp, r6, #6, #10
   15f5a:	f8ad b000 	strh.w	fp, [sp]
   15f5e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   15f60:	8c2a      	ldrh	r2, [r5, #32]
   15f62:	4907      	ldr	r1, [pc, #28]	; (15f80 <bt_mesh_friend_enqueue_rx+0x18c>)
   15f64:	4809      	ldr	r0, [pc, #36]	; (15f8c <bt_mesh_friend_enqueue_rx+0x198>)
   15f66:	f00a fe86 	bl	20c76 <log_3>
   15f6a:	e7dc      	b.n	15f26 <bt_mesh_friend_enqueue_rx+0x132>
   15f6c:	00025930 	.word	0x00025930
   15f70:	00025880 	.word	0x00025880
   15f74:	0002addb 	.word	0x0002addb
   15f78:	20007060 	.word	0x20007060
   15f7c:	0002ac4b 	.word	0x0002ac4b
   15f80:	0002ac0a 	.word	0x0002ac0a
   15f84:	0002ae10 	.word	0x0002ae10
   15f88:	0002ae2d 	.word	0x0002ae2d
   15f8c:	0002ae4c 	.word	0x0002ae4c

00015f90 <bt_mesh_friend_enqueue_tx>:

bool bt_mesh_friend_enqueue_tx(struct bt_mesh_net_tx *tx,
			       enum bt_mesh_friend_pdu_type type,
			       u64_t *seq_auth, struct net_buf_simple *sbuf)
{
   15f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f94:	b08b      	sub	sp, #44	; 0x2c
   15f96:	4617      	mov	r7, r2
   15f98:	9304      	str	r3, [sp, #16]
	bool matched = false;
	int i;

	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   15f9a:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   15f9e:	4604      	mov	r4, r0
   15fa0:	9103      	str	r1, [sp, #12]
   15fa2:	8b98      	ldrh	r0, [r3, #28]
   15fa4:	8891      	ldrh	r1, [r2, #4]
   15fa6:	f7fe ffc7 	bl	14f38 <bt_mesh_friend_match.part.12>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   15faa:	b920      	cbnz	r0, 15fb6 <bt_mesh_friend_enqueue_tx+0x26>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
		return matched;
   15fac:	2300      	movs	r3, #0
			matched = true;
		}
	}

	return matched;
}
   15fae:	4618      	mov	r0, r3
   15fb0:	b00b      	add	sp, #44	; 0x2c
   15fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
   15fb6:	f7fb fd6b 	bl	11a90 <bt_mesh_friend_get>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
   15fba:	2801      	cmp	r0, #1
   15fbc:	d1f6      	bne.n	15fac <bt_mesh_friend_enqueue_tx+0x1c>
	BT_DBG("net_idx 0x%04x dst 0x%04x src 0x%04x", tx->sub->net_idx,
   15fbe:	2204      	movs	r2, #4
   15fc0:	f04f 0300 	mov.w	r3, #0
   15fc4:	f362 0307 	bfi	r3, r2, #0, #8
   15fc8:	4d50      	ldr	r5, [pc, #320]	; (1610c <bt_mesh_friend_enqueue_tx+0x17c>)
   15fca:	4a51      	ldr	r2, [pc, #324]	; (16110 <bt_mesh_friend_enqueue_tx+0x180>)
   15fcc:	4851      	ldr	r0, [pc, #324]	; (16114 <bt_mesh_friend_enqueue_tx+0x184>)
   15fce:	4e52      	ldr	r6, [pc, #328]	; (16118 <bt_mesh_friend_enqueue_tx+0x188>)
   15fd0:	1aad      	subs	r5, r5, r2
   15fd2:	4a52      	ldr	r2, [pc, #328]	; (1611c <bt_mesh_friend_enqueue_tx+0x18c>)
   15fd4:	9206      	str	r2, [sp, #24]
   15fd6:	6822      	ldr	r2, [r4, #0]
   15fd8:	8b92      	ldrh	r2, [r2, #28]
   15fda:	9207      	str	r2, [sp, #28]
   15fdc:	6862      	ldr	r2, [r4, #4]
   15fde:	8892      	ldrh	r2, [r2, #4]
   15fe0:	9208      	str	r2, [sp, #32]
   15fe2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   15fe6:	8922      	ldrh	r2, [r4, #8]
   15fe8:	9209      	str	r2, [sp, #36]	; 0x24
   15fea:	f365 138f 	bfi	r3, r5, #6, #10
   15fee:	2204      	movs	r2, #4
   15ff0:	a906      	add	r1, sp, #24
   15ff2:	f00a fe5b 	bl	20cac <log_n>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   15ff6:	2300      	movs	r3, #0
   15ff8:	9302      	str	r3, [sp, #8]
		if (friend_lpn_matches(frnd, tx->sub->net_idx, tx->ctx->addr)) {
   15ffa:	e9d4 1200 	ldrd	r1, r2, [r4]
   15ffe:	f106 0820 	add.w	r8, r6, #32
   16002:	8892      	ldrh	r2, [r2, #4]
   16004:	8b89      	ldrh	r1, [r1, #28]
   16006:	9305      	str	r3, [sp, #20]
   16008:	4640      	mov	r0, r8
   1600a:	f00e f800 	bl	2400e <friend_lpn_matches>
   1600e:	9b05      	ldr	r3, [sp, #20]
   16010:	9001      	str	r0, [sp, #4]
   16012:	2800      	cmp	r0, #0
   16014:	d059      	beq.n	160ca <bt_mesh_friend_enqueue_tx+0x13a>
	BT_DBG("LPN 0x%04x", frnd->lpn);
   16016:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   1601a:	f043 0304 	orr.w	r3, r3, #4
   1601e:	f363 0907 	bfi	r9, r3, #0, #8
   16022:	f365 198f 	bfi	r9, r5, #6, #10
   16026:	464b      	mov	r3, r9
   16028:	8c32      	ldrh	r2, [r6, #32]
   1602a:	493d      	ldr	r1, [pc, #244]	; (16120 <bt_mesh_friend_enqueue_tx+0x190>)
   1602c:	483d      	ldr	r0, [pc, #244]	; (16124 <bt_mesh_friend_enqueue_tx+0x194>)
   1602e:	f00a fe0a 	bl	20c46 <log_2>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
   16032:	9b03      	ldr	r3, [sp, #12]
   16034:	b92b      	cbnz	r3, 16042 <bt_mesh_friend_enqueue_tx+0xb2>
   16036:	b127      	cbz	r7, 16042 <bt_mesh_friend_enqueue_tx+0xb2>
		friend_purge_old_ack(frnd, seq_auth, tx->src);
   16038:	8922      	ldrh	r2, [r4, #8]
   1603a:	4639      	mov	r1, r7
   1603c:	4640      	mov	r0, r8
   1603e:	f7fe fc45 	bl	148cc <friend_purge_old_ack>
	info.src = tx->src;
   16042:	8923      	ldrh	r3, [r4, #8]
   16044:	f8ad 3018 	strh.w	r3, [sp, #24]
	info.dst = tx->ctx->addr;
   16048:	6863      	ldr	r3, [r4, #4]
   1604a:	889a      	ldrh	r2, [r3, #4]
   1604c:	f8ad 201a 	strh.w	r2, [sp, #26]
	info.ttl = tx->ctx->send_ttl;
   16050:	7a59      	ldrb	r1, [r3, #9]
   16052:	f89d 201f 	ldrb.w	r2, [sp, #31]
   16056:	f361 0206 	bfi	r2, r1, #0, #7
   1605a:	f88d 201f 	strb.w	r2, [sp, #31]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
   1605e:	885b      	ldrh	r3, [r3, #2]
   16060:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16064:	1a9a      	subs	r2, r3, r2
   16066:	4253      	negs	r3, r2
   16068:	4153      	adcs	r3, r2
   1606a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1606e:	f363 12c7 	bfi	r2, r3, #7, #1
   16072:	f88d 201f 	strb.w	r2, [sp, #31]
	seq = bt_mesh_next_seq();
   16076:	f7f6 fb8f 	bl	c798 <bt_mesh_next_seq>
	info.seq[0] = seq >> 16;
   1607a:	0c03      	lsrs	r3, r0, #16
   1607c:	f88d 301c 	strb.w	r3, [sp, #28]
	info.seq[1] = seq >> 8;
   16080:	0a03      	lsrs	r3, r0, #8
   16082:	f88d 301d 	strb.w	r3, [sp, #29]
   16086:	4a28      	ldr	r2, [pc, #160]	; (16128 <bt_mesh_friend_enqueue_tx+0x198>)
	info.iv_index = BT_MESH_NET_IVI_TX;
   16088:	4b23      	ldr	r3, [pc, #140]	; (16118 <bt_mesh_friend_enqueue_tx+0x188>)
	info.seq[2] = seq;
   1608a:	f88d 001e 	strb.w	r0, [sp, #30]
	info.iv_index = BT_MESH_NET_IVI_TX;
   1608e:	681b      	ldr	r3, [r3, #0]
   16090:	f3bf 8f5b 	dmb	ish
   16094:	6812      	ldr	r2, [r2, #0]
   16096:	f3bf 8f5b 	dmb	ish
   1609a:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1609e:	1a9b      	subs	r3, r3, r2
	buf = create_friend_pdu(frnd, &info, sbuf);
   160a0:	a906      	add	r1, sp, #24
   160a2:	9a04      	ldr	r2, [sp, #16]
	info.iv_index = BT_MESH_NET_IVI_TX;
   160a4:	9308      	str	r3, [sp, #32]
	buf = create_friend_pdu(frnd, &info, sbuf);
   160a6:	4640      	mov	r0, r8
   160a8:	f7fe fd4a 	bl	14b40 <create_friend_pdu>
	if (!buf) {
   160ac:	4602      	mov	r2, r0
   160ae:	b9a0      	cbnz	r0, 160da <bt_mesh_friend_enqueue_tx+0x14a>
		BT_ERR("Failed to encode Friend buffer");
   160b0:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   160b4:	f043 0301 	orr.w	r3, r3, #1
   160b8:	f363 0a07 	bfi	sl, r3, #0, #8
   160bc:	f365 1a8f 	bfi	sl, r5, #6, #10
   160c0:	4651      	mov	r1, sl
   160c2:	481a      	ldr	r0, [pc, #104]	; (1612c <bt_mesh_friend_enqueue_tx+0x19c>)
   160c4:	f00a fd9e 	bl	20c04 <log_0>
			matched = true;
   160c8:	9b01      	ldr	r3, [sp, #4]
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   160ca:	9a02      	ldr	r2, [sp, #8]
   160cc:	3678      	adds	r6, #120	; 0x78
   160ce:	2a00      	cmp	r2, #0
   160d0:	f47f af6d 	bne.w	15fae <bt_mesh_friend_enqueue_tx+0x1e>
   160d4:	2201      	movs	r2, #1
   160d6:	9202      	str	r2, [sp, #8]
   160d8:	e78f      	b.n	15ffa <bt_mesh_friend_enqueue_tx+0x6a>
	if (seq_auth) {
   160da:	b127      	cbz	r7, 160e6 <bt_mesh_friend_enqueue_tx+0x156>
		FRIEND_ADV(buf)->seq_auth = *seq_auth;
   160dc:	6943      	ldr	r3, [r0, #20]
   160de:	e9d7 0100 	ldrd	r0, r1, [r7]
   160e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
	enqueue_friend_pdu(frnd, type, buf);
   160e6:	9903      	ldr	r1, [sp, #12]
   160e8:	4640      	mov	r0, r8
   160ea:	f7ff f873 	bl	151d4 <enqueue_friend_pdu>
	BT_DBG("Queued message for LPN 0x%04x", frnd->lpn);
   160ee:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   160f2:	f043 0304 	orr.w	r3, r3, #4
   160f6:	f363 0b07 	bfi	fp, r3, #0, #8
   160fa:	f365 1b8f 	bfi	fp, r5, #6, #10
   160fe:	465b      	mov	r3, fp
   16100:	8c32      	ldrh	r2, [r6, #32]
   16102:	4907      	ldr	r1, [pc, #28]	; (16120 <bt_mesh_friend_enqueue_tx+0x190>)
   16104:	480a      	ldr	r0, [pc, #40]	; (16130 <bt_mesh_friend_enqueue_tx+0x1a0>)
   16106:	f00a fd9e 	bl	20c46 <log_2>
   1610a:	e7dd      	b.n	160c8 <bt_mesh_friend_enqueue_tx+0x138>
   1610c:	00025930 	.word	0x00025930
   16110:	00025880 	.word	0x00025880
   16114:	0002ae7d 	.word	0x0002ae7d
   16118:	20007060 	.word	0x20007060
   1611c:	0002ac65 	.word	0x0002ac65
   16120:	0002ac20 	.word	0x0002ac20
   16124:	0002b490 	.word	0x0002b490
   16128:	20007068 	.word	0x20007068
   1612c:	0002ae2d 	.word	0x0002ae2d
   16130:	0002aea6 	.word	0x0002aea6

00016134 <bt_mesh_friend_clear_incomplete>:

void bt_mesh_friend_clear_incomplete(struct bt_mesh_subnet *sub, u16_t src,
				     u16_t dst, u64_t *seq_auth)
{
   16134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16138:	4692      	mov	sl, r2
   1613a:	461f      	mov	r7, r3
	int i;

	BT_DBG("");
   1613c:	f04f 0200 	mov.w	r2, #0
   16140:	2304      	movs	r3, #4
   16142:	f363 0207 	bfi	r2, r3, #0, #8
{
   16146:	460e      	mov	r6, r1
   16148:	4b24      	ldr	r3, [pc, #144]	; (161dc <bt_mesh_friend_clear_incomplete+0xa8>)
	BT_DBG("");
   1614a:	4925      	ldr	r1, [pc, #148]	; (161e0 <bt_mesh_friend_clear_incomplete+0xac>)
   1614c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 161f0 <bt_mesh_friend_clear_incomplete+0xbc>
   16150:	eba3 0901 	sub.w	r9, r3, r1
   16154:	f3c9 09c9 	ubfx	r9, r9, #3, #10
{
   16158:	4683      	mov	fp, r0
	BT_DBG("");
   1615a:	f369 128f 	bfi	r2, r9, #6, #10
   1615e:	4921      	ldr	r1, [pc, #132]	; (161e4 <bt_mesh_friend_clear_incomplete+0xb0>)
   16160:	4821      	ldr	r0, [pc, #132]	; (161e8 <bt_mesh_friend_clear_incomplete+0xb4>)
   16162:	f00a fd5c 	bl	20c1e <log_1>

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   16166:	2500      	movs	r5, #0
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
		int j;

		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
   16168:	4652      	mov	r2, sl
   1616a:	f8bb 101c 	ldrh.w	r1, [fp, #28]
   1616e:	4640      	mov	r0, r8
   16170:	f00d ff4d 	bl	2400e <friend_lpn_matches>
   16174:	b938      	cbnz	r0, 16186 <bt_mesh_friend_clear_incomplete+0x52>
   16176:	f108 0878 	add.w	r8, r8, #120	; 0x78
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   1617a:	b115      	cbz	r5, 16182 <bt_mesh_friend_clear_incomplete+0x4e>
			while (!sys_slist_is_empty(&seg->queue)) {
				net_buf_unref(net_buf_slist_get(&seg->queue));
			}
		}
	}
}
   1617c:	b003      	add	sp, #12
   1617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16182:	2501      	movs	r5, #1
   16184:	e7f0      	b.n	16168 <bt_mesh_friend_clear_incomplete+0x34>
   16186:	f108 0338 	add.w	r3, r8, #56	; 0x38
   1618a:	9301      	str	r3, [sp, #4]
			buf = (void *)sys_slist_peek_head(&seg->queue);
   1618c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
			if (!buf) {
   16190:	2b00      	cmp	r3, #0
   16192:	d0f0      	beq.n	16176 <bt_mesh_friend_clear_incomplete+0x42>
			if (BT_MESH_ADV(buf)->addr != src) {
   16194:	695b      	ldr	r3, [r3, #20]
   16196:	895a      	ldrh	r2, [r3, #10]
   16198:	42b2      	cmp	r2, r6
   1619a:	d1ec      	bne.n	16176 <bt_mesh_friend_clear_incomplete+0x42>
			if (FRIEND_ADV(buf)->seq_auth != *seq_auth) {
   1619c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   161a0:	e9d7 2300 	ldrd	r2, r3, [r7]
   161a4:	4299      	cmp	r1, r3
   161a6:	bf08      	it	eq
   161a8:	4290      	cmpeq	r0, r2
   161aa:	d1e4      	bne.n	16176 <bt_mesh_friend_clear_incomplete+0x42>
			BT_WARN("Clearing incomplete segments for 0x%04x", src);
   161ac:	f024 033f 	bic.w	r3, r4, #63	; 0x3f
   161b0:	f043 0302 	orr.w	r3, r3, #2
   161b4:	f363 0407 	bfi	r4, r3, #0, #8
   161b8:	f369 148f 	bfi	r4, r9, #6, #10
   161bc:	4622      	mov	r2, r4
   161be:	4631      	mov	r1, r6
   161c0:	480a      	ldr	r0, [pc, #40]	; (161ec <bt_mesh_friend_clear_incomplete+0xb8>)
   161c2:	f00a fd2c 	bl	20c1e <log_1>
			while (!sys_slist_is_empty(&seg->queue)) {
   161c6:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   161ca:	2b00      	cmp	r3, #0
   161cc:	d0d3      	beq.n	16176 <bt_mesh_friend_clear_incomplete+0x42>
				net_buf_unref(net_buf_slist_get(&seg->queue));
   161ce:	9801      	ldr	r0, [sp, #4]
   161d0:	f00e fd36 	bl	24c40 <net_buf_slist_get>
   161d4:	f007 fac8 	bl	1d768 <net_buf_unref>
   161d8:	e7f5      	b.n	161c6 <bt_mesh_friend_clear_incomplete+0x92>
   161da:	bf00      	nop
   161dc:	00025930 	.word	0x00025930
   161e0:	00025880 	.word	0x00025880
   161e4:	0002ac7f 	.word	0x0002ac7f
   161e8:	00026623 	.word	0x00026623
   161ec:	0002adb3 	.word	0x0002adb3
   161f0:	20007080 	.word	0x20007080

000161f4 <ack_complete>:
static u8_t pending_ack = XACT_NVAL;

static void ack_complete(u16_t duration, int err, void *user_data)
{
	BT_DBG("xact %u complete", (u8_t)pending_ack);
	pending_ack = XACT_NVAL;
   161f4:	4b01      	ldr	r3, [pc, #4]	; (161fc <ack_complete+0x8>)
   161f6:	22ff      	movs	r2, #255	; 0xff
   161f8:	701a      	strb	r2, [r3, #0]
}
   161fa:	4770      	bx	lr
   161fc:	200077a0 	.word	0x200077a0

00016200 <free_segments>:
{
   16200:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   16202:	2400      	movs	r4, #0
   16204:	4d08      	ldr	r5, [pc, #32]	; (16228 <free_segments+0x28>)
		link.tx.buf[i] = NULL;
   16206:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   16208:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   1620c:	b158      	cbz	r0, 16226 <free_segments+0x26>
		BT_MESH_ADV(buf)->busy = 0U;
   1620e:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   16210:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   16214:	7a1a      	ldrb	r2, [r3, #8]
   16216:	f366 0282 	bfi	r2, r6, #2, #1
   1621a:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1621c:	3401      	adds	r4, #1
		net_buf_unref(buf);
   1621e:	f007 faa3 	bl	1d768 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   16222:	2c03      	cmp	r4, #3
   16224:	d1f0      	bne.n	16208 <free_segments+0x8>
}
   16226:	bd70      	pop	{r4, r5, r6, pc}
   16228:	20000504 	.word	0x20000504

0001622c <prov_clear_tx>:
{
   1622c:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&link.tx.retransmit);
   1622e:	4803      	ldr	r0, [pc, #12]	; (1623c <prov_clear_tx+0x10>)
   16230:	f00f f910 	bl	25454 <k_delayed_work_cancel>
}
   16234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   16238:	f7ff bfe2 	b.w	16200 <free_segments>
   1623c:	20000510 	.word	0x20000510

00016240 <gen_prov_ack>:

static void gen_prov_ack(struct prov_rx *rx, struct net_buf_simple *buf)
{
	BT_DBG("len %u", buf->len);

	if (!link.tx.buf[0]) {
   16240:	4b05      	ldr	r3, [pc, #20]	; (16258 <gen_prov_ack+0x18>)
   16242:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   16246:	b132      	cbz	r2, 16256 <gen_prov_ack+0x16>
		return;
	}

	if (rx->xact_id == link.tx.id) {
   16248:	7902      	ldrb	r2, [r0, #4]
   1624a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
   1624e:	429a      	cmp	r2, r3
   16250:	d101      	bne.n	16256 <gen_prov_ack+0x16>
		prov_clear_tx();
   16252:	f7ff bfeb 	b.w	1622c <prov_clear_tx>
	}
}
   16256:	4770      	bx	lr
   16258:	200003c8 	.word	0x200003c8

0001625c <send_reliable>:
{
   1625c:	b570      	push	{r4, r5, r6, lr}
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1625e:	f00f f956 	bl	2550e <z_impl_k_uptime_get>
	link.tx.start = k_uptime_get();
   16262:	4c0d      	ldr	r4, [pc, #52]	; (16298 <send_reliable+0x3c>)
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   16264:	4e0d      	ldr	r6, [pc, #52]	; (1629c <send_reliable+0x40>)
	link.tx.start = k_uptime_get();
   16266:	e9c4 014c 	strd	r0, r1, [r4, #304]	; 0x130
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1626a:	2500      	movs	r5, #0
   1626c:	f504 749e 	add.w	r4, r4, #316	; 0x13c
		struct net_buf *buf = link.tx.buf[i];
   16270:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   16274:	b178      	cbz	r0, 16296 <send_reliable+0x3a>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   16276:	3501      	adds	r5, #1
   16278:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
   1627a:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   1627e:	d005      	beq.n	1628c <send_reliable+0x30>
   16280:	6823      	ldr	r3, [r4, #0]
   16282:	b11b      	cbz	r3, 1628c <send_reliable+0x30>
			bt_mesh_adv_send(buf, NULL, NULL);
   16284:	4611      	mov	r1, r2
   16286:	f7f5 f817 	bl	b2b8 <bt_mesh_adv_send>
   1628a:	e7f1      	b.n	16270 <send_reliable+0x14>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   1628c:	4631      	mov	r1, r6
   1628e:	f7f5 f813 	bl	b2b8 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   16292:	2d03      	cmp	r5, #3
   16294:	d1ec      	bne.n	16270 <send_reliable+0x14>
}
   16296:	bd70      	pop	{r4, r5, r6, pc}
   16298:	200003c8 	.word	0x200003c8
   1629c:	2000740c 	.word	0x2000740c

000162a0 <prov_failed>:
	BT_WARN("Error: 0x%02x", data[0]);
   162a0:	2302      	movs	r3, #2
   162a2:	f04f 0200 	mov.w	r2, #0
   162a6:	f363 0207 	bfi	r2, r3, #0, #8
   162aa:	4905      	ldr	r1, [pc, #20]	; (162c0 <prov_failed+0x20>)
   162ac:	4b05      	ldr	r3, [pc, #20]	; (162c4 <prov_failed+0x24>)
   162ae:	1a5b      	subs	r3, r3, r1
   162b0:	08db      	lsrs	r3, r3, #3
   162b2:	7801      	ldrb	r1, [r0, #0]
   162b4:	4804      	ldr	r0, [pc, #16]	; (162c8 <prov_failed+0x28>)
   162b6:	f363 128f 	bfi	r2, r3, #6, #10
   162ba:	f00a bcb0 	b.w	20c1e <log_1>
   162be:	bf00      	nop
   162c0:	00025880 	.word	0x00025880
   162c4:	00025950 	.word	0x00025950
   162c8:	0002b966 	.word	0x0002b966

000162cc <adv_buf_create>:
{
   162cc:	b510      	push	{r4, lr}
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV, PROV_XMIT, BUF_TIMEOUT);
   162ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
   162d2:	210a      	movs	r1, #10
   162d4:	2000      	movs	r0, #0
   162d6:	f7f4 ffdf 	bl	b298 <bt_mesh_adv_create>
	if (!buf) {
   162da:	4604      	mov	r4, r0
   162dc:	b968      	cbnz	r0, 162fa <adv_buf_create+0x2e>
		BT_ERR("Out of provisioning buffers");
   162de:	2301      	movs	r3, #1
   162e0:	f04f 0100 	mov.w	r1, #0
   162e4:	f363 0107 	bfi	r1, r3, #0, #8
   162e8:	4a05      	ldr	r2, [pc, #20]	; (16300 <adv_buf_create+0x34>)
   162ea:	4b06      	ldr	r3, [pc, #24]	; (16304 <adv_buf_create+0x38>)
   162ec:	4806      	ldr	r0, [pc, #24]	; (16308 <adv_buf_create+0x3c>)
   162ee:	1a9b      	subs	r3, r3, r2
   162f0:	08db      	lsrs	r3, r3, #3
   162f2:	f363 118f 	bfi	r1, r3, #6, #10
   162f6:	f00a fc85 	bl	20c04 <log_0>
}
   162fa:	4620      	mov	r0, r4
   162fc:	bd10      	pop	{r4, pc}
   162fe:	bf00      	nop
   16300:	00025880 	.word	0x00025880
   16304:	00025950 	.word	0x00025950
   16308:	0002b5cd 	.word	0x0002b5cd

0001630c <prov_send>:
{
   1630c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (link.conn) {
   16310:	4e54      	ldr	r6, [pc, #336]	; (16464 <prov_send+0x158>)
{
   16312:	4604      	mov	r4, r0
	if (link.conn) {
   16314:	6870      	ldr	r0, [r6, #4]
   16316:	b128      	cbz	r0, 16324 <prov_send+0x18>
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
   16318:	4622      	mov	r2, r4
   1631a:	2103      	movs	r1, #3
}
   1631c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
   16320:	f001 bf0e 	b.w	18140 <bt_mesh_proxy_send>
	prov_clear_tx();
   16324:	f7ff ff82 	bl	1622c <prov_clear_tx>
	start = adv_buf_create();
   16328:	f7ff ffd0 	bl	162cc <adv_buf_create>
	if (!start) {
   1632c:	4680      	mov	r8, r0
   1632e:	2800      	cmp	r0, #0
   16330:	d070      	beq.n	16414 <prov_send+0x108>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
   16332:	f896 5138 	ldrb.w	r5, [r6, #312]	; 0x138
	net_buf_add_be32(start, link.id);
   16336:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
   1633a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 16474 <prov_send+0x168>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
   1633e:	1e6b      	subs	r3, r5, #1
   16340:	b2db      	uxtb	r3, r3
   16342:	2bfd      	cmp	r3, #253	; 0xfd
		return ++link.tx.id;
   16344:	bf98      	it	ls
   16346:	3501      	addls	r5, #1
	net_buf_add_be32(start, link.id);
   16348:	f100 0708 	add.w	r7, r0, #8
		return ++link.tx.id;
   1634c:	bf94      	ite	ls
   1634e:	b2ed      	uxtbls	r5, r5
	return link.tx.id;
   16350:	2580      	movhi	r5, #128	; 0x80
	net_buf_add_be32(start, link.id);
   16352:	4638      	mov	r0, r7
   16354:	f886 5138 	strb.w	r5, [r6, #312]	; 0x138
   16358:	f00e fcf0 	bl	24d3c <net_buf_simple_add_be32>
	net_buf_add_u8(start, xact_id);
   1635c:	4629      	mov	r1, r5
   1635e:	4638      	mov	r0, r7
   16360:	f00e fcc3 	bl	24cea <net_buf_simple_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   16364:	88a3      	ldrh	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
   16366:	b2da      	uxtb	r2, r3
   16368:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
   1636a:	bf81      	itttt	hi
   1636c:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   16370:	b2c9      	uxtbhi	r1, r1
   16372:	2317      	movhi	r3, #23
   16374:	fbb1 f1f3 	udivhi	r1, r1, r3
   16378:	bf86      	itte	hi
   1637a:	3101      	addhi	r1, #1
   1637c:	b2c9      	uxtbhi	r1, r1
		return 0;
   1637e:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   16380:	0089      	lsls	r1, r1, #2
   16382:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   16386:	4638      	mov	r0, r7
   16388:	f00e fcaf 	bl	24cea <net_buf_simple_add_u8>
	net_buf_add_be16(start, msg->len);
   1638c:	88a1      	ldrh	r1, [r4, #4]
   1638e:	4638      	mov	r0, r7
   16390:	f00e fcc2 	bl	24d18 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   16394:	7921      	ldrb	r1, [r4, #4]
   16396:	6820      	ldr	r0, [r4, #0]
   16398:	f7f8 fe6c 	bl	f074 <bt_mesh_fcs_calc>
   1639c:	4601      	mov	r1, r0
   1639e:	4638      	mov	r0, r7
   163a0:	f00e fca3 	bl	24cea <net_buf_simple_add_u8>
	link.tx.buf[0] = start;
   163a4:	f8c6 813c 	str.w	r8, [r6, #316]	; 0x13c
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   163a8:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	net_buf_add_mem(start, msg->data, seg_len);
   163ac:	6821      	ldr	r1, [r4, #0]
   163ae:	f1b8 0f14 	cmp.w	r8, #20
   163b2:	bf28      	it	cs
   163b4:	f04f 0814 	movcs.w	r8, #20
   163b8:	4642      	mov	r2, r8
   163ba:	4638      	mov	r0, r7
   163bc:	f00e fc8c 	bl	24cd8 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   163c0:	4641      	mov	r1, r8
   163c2:	4620      	mov	r0, r4
   163c4:	f00e fcef 	bl	24da6 <net_buf_simple_pull>
   163c8:	f04f 0800 	mov.w	r8, #0
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   163cc:	88a7      	ldrh	r7, [r4, #4]
   163ce:	b91f      	cbnz	r7, 163d8 <prov_send+0xcc>
	send_reliable();
   163d0:	f7ff ff44 	bl	1625c <send_reliable>
	return 0;
   163d4:	4638      	mov	r0, r7
   163d6:	e014      	b.n	16402 <prov_send+0xf6>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   163d8:	f1b8 0f08 	cmp.w	r8, #8
   163dc:	d113      	bne.n	16406 <prov_send+0xfa>
			BT_ERR("Too big message");
   163de:	2301      	movs	r3, #1
   163e0:	f04f 0100 	mov.w	r1, #0
   163e4:	4a20      	ldr	r2, [pc, #128]	; (16468 <prov_send+0x15c>)
   163e6:	4821      	ldr	r0, [pc, #132]	; (1646c <prov_send+0x160>)
   163e8:	f363 0107 	bfi	r1, r3, #0, #8
   163ec:	4b20      	ldr	r3, [pc, #128]	; (16470 <prov_send+0x164>)
   163ee:	1a9b      	subs	r3, r3, r2
   163f0:	08db      	lsrs	r3, r3, #3
   163f2:	f363 118f 	bfi	r1, r3, #6, #10
   163f6:	f00a fc05 	bl	20c04 <log_0>
			free_segments();
   163fa:	f7ff ff01 	bl	16200 <free_segments>
			return -E2BIG;
   163fe:	f06f 0006 	mvn.w	r0, #6
}
   16402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create();
   16406:	f7ff ff61 	bl	162cc <adv_buf_create>
		if (!buf) {
   1640a:	f108 0804 	add.w	r8, r8, #4
   1640e:	b920      	cbnz	r0, 1641a <prov_send+0x10e>
			free_segments();
   16410:	f7ff fef6 	bl	16200 <free_segments>
		return -ENOBUFS;
   16414:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16418:	e7f3      	b.n	16402 <prov_send+0xf6>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   1641a:	f8b4 a004 	ldrh.w	sl, [r4, #4]
		link.tx.buf[seg_id] = buf;
   1641e:	f849 0b04 	str.w	r0, [r9], #4
		net_buf_add_be32(buf, link.id);
   16422:	f100 0708 	add.w	r7, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   16426:	f1ba 0f17 	cmp.w	sl, #23
		net_buf_add_be32(buf, link.id);
   1642a:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
   1642e:	4638      	mov	r0, r7
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   16430:	bf28      	it	cs
   16432:	f04f 0a17 	movcs.w	sl, #23
		net_buf_add_be32(buf, link.id);
   16436:	f00e fc81 	bl	24d3c <net_buf_simple_add_be32>
		net_buf_add_u8(buf, xact_id);
   1643a:	4629      	mov	r1, r5
   1643c:	4638      	mov	r0, r7
   1643e:	f00e fc54 	bl	24cea <net_buf_simple_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   16442:	f048 0102 	orr.w	r1, r8, #2
   16446:	b2c9      	uxtb	r1, r1
   16448:	4638      	mov	r0, r7
   1644a:	f00e fc4e 	bl	24cea <net_buf_simple_add_u8>
		net_buf_add_mem(buf, msg->data, seg_len);
   1644e:	6821      	ldr	r1, [r4, #0]
   16450:	4652      	mov	r2, sl
   16452:	4638      	mov	r0, r7
   16454:	f00e fc40 	bl	24cd8 <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   16458:	4651      	mov	r1, sl
   1645a:	4620      	mov	r0, r4
   1645c:	f00e fca3 	bl	24da6 <net_buf_simple_pull>
   16460:	e7b4      	b.n	163cc <prov_send+0xc0>
   16462:	bf00      	nop
   16464:	200003c8 	.word	0x200003c8
   16468:	00025880 	.word	0x00025880
   1646c:	000293a5 	.word	0x000293a5
   16470:	00025950 	.word	0x00025950
   16474:	20000508 	.word	0x20000508

00016478 <bearer_ctl_send>:
{
   16478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1647c:	4604      	mov	r4, r0
   1647e:	4688      	mov	r8, r1
   16480:	4691      	mov	r9, r2
	prov_clear_tx();
   16482:	f7ff fed3 	bl	1622c <prov_clear_tx>
	buf = adv_buf_create();
   16486:	f7ff ff21 	bl	162cc <adv_buf_create>
	if (!buf) {
   1648a:	4606      	mov	r6, r0
   1648c:	b1f0      	cbz	r0, 164cc <bearer_ctl_send+0x54>
	net_buf_add_be32(buf, link.id);
   1648e:	4f11      	ldr	r7, [pc, #68]	; (164d4 <bearer_ctl_send+0x5c>)
   16490:	f100 0508 	add.w	r5, r0, #8
   16494:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
   16498:	4628      	mov	r0, r5
   1649a:	f00e fc4f 	bl	24d3c <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
   1649e:	2100      	movs	r1, #0
   164a0:	4628      	mov	r0, r5
   164a2:	f00e fc22 	bl	24cea <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
   164a6:	00a1      	lsls	r1, r4, #2
   164a8:	f041 0103 	orr.w	r1, r1, #3
   164ac:	b2c9      	uxtb	r1, r1
   164ae:	4628      	mov	r0, r5
   164b0:	f00e fc1b 	bl	24cea <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
   164b4:	464a      	mov	r2, r9
   164b6:	4641      	mov	r1, r8
   164b8:	4628      	mov	r0, r5
   164ba:	f00e fc0d 	bl	24cd8 <net_buf_simple_add_mem>
	link.tx.buf[0] = buf;
   164be:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
	send_reliable();
   164c2:	f7ff fecb 	bl	1625c <send_reliable>
	return 0;
   164c6:	2000      	movs	r0, #0
}
   164c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
   164cc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   164d0:	e7fa      	b.n	164c8 <bearer_ctl_send+0x50>
   164d2:	bf00      	nop
   164d4:	200003c8 	.word	0x200003c8

000164d8 <gen_prov_ack_send>:
{
   164d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (pending_ack == xact_id) {
   164da:	4d16      	ldr	r5, [pc, #88]	; (16534 <gen_prov_ack_send+0x5c>)
   164dc:	782b      	ldrb	r3, [r5, #0]
   164de:	4283      	cmp	r3, r0
{
   164e0:	4606      	mov	r6, r0
	if (pending_ack == xact_id) {
   164e2:	d025      	beq.n	16530 <gen_prov_ack_send+0x58>
	buf = adv_buf_create();
   164e4:	f7ff fef2 	bl	162cc <adv_buf_create>
	if (!buf) {
   164e8:	4604      	mov	r4, r0
   164ea:	b308      	cbz	r0, 16530 <gen_prov_ack_send+0x58>
	if (pending_ack == XACT_NVAL) {
   164ec:	782b      	ldrb	r3, [r5, #0]
   164ee:	2bff      	cmp	r3, #255	; 0xff
	net_buf_add_be32(buf, link.id);
   164f0:	4b11      	ldr	r3, [pc, #68]	; (16538 <gen_prov_ack_send+0x60>)
		pending_ack = xact_id;
   164f2:	bf08      	it	eq
   164f4:	702e      	strbeq	r6, [r5, #0]
	net_buf_add_be32(buf, link.id);
   164f6:	f100 0508 	add.w	r5, r0, #8
   164fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
		complete = &cb;
   164fe:	bf08      	it	eq
   16500:	4f0e      	ldreq	r7, [pc, #56]	; (1653c <gen_prov_ack_send+0x64>)
	net_buf_add_be32(buf, link.id);
   16502:	4628      	mov	r0, r5
		complete = NULL;
   16504:	bf18      	it	ne
   16506:	2700      	movne	r7, #0
	net_buf_add_be32(buf, link.id);
   16508:	f00e fc18 	bl	24d3c <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   1650c:	4631      	mov	r1, r6
   1650e:	4628      	mov	r0, r5
   16510:	f00e fbeb 	bl	24cea <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
   16514:	2101      	movs	r1, #1
   16516:	4628      	mov	r0, r5
   16518:	f00e fbe7 	bl	24cea <net_buf_simple_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
   1651c:	4620      	mov	r0, r4
   1651e:	4639      	mov	r1, r7
   16520:	2200      	movs	r2, #0
   16522:	f7f4 fec9 	bl	b2b8 <bt_mesh_adv_send>
	net_buf_unref(buf);
   16526:	4620      	mov	r0, r4
}
   16528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
   1652c:	f007 b91c 	b.w	1d768 <net_buf_unref>
}
   16530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16532:	bf00      	nop
   16534:	200077a0 	.word	0x200077a0
   16538:	200003c8 	.word	0x200003c8
   1653c:	000262a0 	.word	0x000262a0

00016540 <prov_start>:
{
   16540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (data[0] != PROV_ALG_P256) {
   16544:	7801      	ldrb	r1, [r0, #0]
{
   16546:	b08c      	sub	sp, #48	; 0x30
   16548:	4607      	mov	r7, r0
	if (data[0] != PROV_ALG_P256) {
   1654a:	b189      	cbz	r1, 16570 <prov_start+0x30>
		BT_ERR("Unknown algorithm 0x%02x", data[0]);
   1654c:	2301      	movs	r3, #1
   1654e:	f04f 0200 	mov.w	r2, #0
   16552:	f363 0207 	bfi	r2, r3, #0, #8
   16556:	4875      	ldr	r0, [pc, #468]	; (1672c <prov_start+0x1ec>)
   16558:	4b75      	ldr	r3, [pc, #468]	; (16730 <prov_start+0x1f0>)
   1655a:	1a1b      	subs	r3, r3, r0
   1655c:	08db      	lsrs	r3, r3, #3
   1655e:	4875      	ldr	r0, [pc, #468]	; (16734 <prov_start+0x1f4>)
   16560:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Invalid public key value: 0x%02x", data[1]);
   16564:	f00a fb5b 	bl	20c1e <log_1>
		prov_send_fail_msg(PROV_ERR_NVAL_FMT);
   16568:	2002      	movs	r0, #2
   1656a:	f00d fd95 	bl	24098 <prov_send_fail_msg>
   1656e:	e029      	b.n	165c4 <prov_start+0x84>
	if (data[1] > 0x01) {
   16570:	7841      	ldrb	r1, [r0, #1]
   16572:	2901      	cmp	r1, #1
   16574:	d90c      	bls.n	16590 <prov_start+0x50>
		BT_ERR("Invalid public key value: 0x%02x", data[1]);
   16576:	2301      	movs	r3, #1
   16578:	f04f 0200 	mov.w	r2, #0
   1657c:	f363 0207 	bfi	r2, r3, #0, #8
   16580:	486a      	ldr	r0, [pc, #424]	; (1672c <prov_start+0x1ec>)
   16582:	4b6b      	ldr	r3, [pc, #428]	; (16730 <prov_start+0x1f0>)
   16584:	1a1b      	subs	r3, r3, r0
   16586:	08db      	lsrs	r3, r3, #3
   16588:	f363 128f 	bfi	r2, r3, #6, #10
   1658c:	486a      	ldr	r0, [pc, #424]	; (16738 <prov_start+0x1f8>)
   1658e:	e7e9      	b.n	16564 <prov_start+0x24>
	memcpy(&link.conf_inputs[12], data, 5);
   16590:	4d6a      	ldr	r5, [pc, #424]	; (1673c <prov_start+0x1fc>)
   16592:	4601      	mov	r1, r0
   16594:	2205      	movs	r2, #5
   16596:	f105 0088 	add.w	r0, r5, #136	; 0x88
   1659a:	f00b fc74 	bl	21e86 <memcpy>
	link.expect = PROV_PUB_KEY;
   1659e:	2303      	movs	r3, #3
   165a0:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	switch (method) {
   165a4:	78bb      	ldrb	r3, [r7, #2]
	if (prov_auth(data[2], data[3], data[4]) < 0) {
   165a6:	78f9      	ldrb	r1, [r7, #3]
   165a8:	793c      	ldrb	r4, [r7, #4]
	switch (method) {
   165aa:	46a8      	mov	r8, r5
   165ac:	2b03      	cmp	r3, #3
   165ae:	d858      	bhi.n	16662 <prov_start+0x122>
   165b0:	e8df f003 	tbb	[pc, r3]
   165b4:	a11e0b02 	.word	0xa11e0b02
		if (action || size) {
   165b8:	4321      	orrs	r1, r4
   165ba:	d152      	bne.n	16662 <prov_start+0x122>
		(void)memset(link.auth, 0, sizeof(link.auth));
   165bc:	4860      	ldr	r0, [pc, #384]	; (16740 <prov_start+0x200>)
   165be:	2210      	movs	r2, #16
		(void)memset(link.auth, 0,
   165c0:	f00b fc8b 	bl	21eda <memset>
}
   165c4:	b00c      	add	sp, #48	; 0x30
   165c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (action || size) {
   165ca:	430c      	orrs	r4, r1
   165cc:	d149      	bne.n	16662 <prov_start+0x122>
		memcpy(link.auth + 16 - prov->static_val_len,
   165ce:	4e5d      	ldr	r6, [pc, #372]	; (16744 <prov_start+0x204>)
   165d0:	4d5b      	ldr	r5, [pc, #364]	; (16740 <prov_start+0x200>)
   165d2:	6833      	ldr	r3, [r6, #0]
   165d4:	7c1a      	ldrb	r2, [r3, #16]
   165d6:	68d9      	ldr	r1, [r3, #12]
   165d8:	f1c2 0010 	rsb	r0, r2, #16
   165dc:	4428      	add	r0, r5
   165de:	f00b fc52 	bl	21e86 <memcpy>
			     sizeof(link.auth) - prov->static_val_len);
   165e2:	6833      	ldr	r3, [r6, #0]
   165e4:	7c1a      	ldrb	r2, [r3, #16]
		(void)memset(link.auth, 0,
   165e6:	4621      	mov	r1, r4
   165e8:	f1c2 0210 	rsb	r2, r2, #16
   165ec:	4628      	mov	r0, r5
   165ee:	e7e7      	b.n	165c0 <prov_start+0x80>
	switch (action) {
   165f0:	2904      	cmp	r1, #4
   165f2:	d836      	bhi.n	16662 <prov_start+0x122>
   165f4:	4b54      	ldr	r3, [pc, #336]	; (16748 <prov_start+0x208>)
   165f6:	f813 9001 	ldrb.w	r9, [r3, r1]
		if (!output) {
   165fa:	f1b9 0f00 	cmp.w	r9, #0
   165fe:	d030      	beq.n	16662 <prov_start+0x122>
		if (!(prov->output_actions & output)) {
   16600:	f8df a140 	ldr.w	sl, [pc, #320]	; 16744 <prov_start+0x204>
   16604:	f8da 3000 	ldr.w	r3, [sl]
   16608:	8a5a      	ldrh	r2, [r3, #18]
   1660a:	ea12 0f09 	tst.w	r2, r9
   1660e:	4655      	mov	r5, sl
   16610:	d027      	beq.n	16662 <prov_start+0x122>
		if (size > prov->output_size) {
   16612:	7c5b      	ldrb	r3, [r3, #17]
   16614:	42a3      	cmp	r3, r4
   16616:	d324      	bcc.n	16662 <prov_start+0x122>
		if (output == BT_MESH_DISPLAY_STRING) {
   16618:	f1b9 0f10 	cmp.w	r9, #16
   1661c:	d145      	bne.n	166aa <prov_start+0x16a>
			bt_rand(str, size);
   1661e:	4621      	mov	r1, r4
   16620:	a804      	add	r0, sp, #16
   16622:	f00d ffa8 	bl	24576 <bt_rand>
				str[i] %= 36;
   16626:	2624      	movs	r6, #36	; 0x24
   16628:	a804      	add	r0, sp, #16
			bt_rand(str, size);
   1662a:	2100      	movs	r1, #0
			for (i = 0U; i < size; i++) {
   1662c:	b2cb      	uxtb	r3, r1
   1662e:	429c      	cmp	r4, r3
   16630:	d82b      	bhi.n	1668a <prov_start+0x14a>
			memcpy(link.auth, str, size);
   16632:	4e43      	ldr	r6, [pc, #268]	; (16740 <prov_start+0x200>)
			str[size] = '\0';
   16634:	ab0c      	add	r3, sp, #48	; 0x30
   16636:	4423      	add	r3, r4
   16638:	f04f 0800 	mov.w	r8, #0
			memcpy(link.auth, str, size);
   1663c:	4622      	mov	r2, r4
   1663e:	a904      	add	r1, sp, #16
   16640:	4630      	mov	r0, r6
			str[size] = '\0';
   16642:	f803 8c20 	strb.w	r8, [r3, #-32]
			memcpy(link.auth, str, size);
   16646:	f00b fc1e 	bl	21e86 <memcpy>
			(void)memset(link.auth + size, 0,
   1664a:	f1c4 0210 	rsb	r2, r4, #16
   1664e:	4641      	mov	r1, r8
   16650:	1930      	adds	r0, r6, r4
   16652:	f00b fc42 	bl	21eda <memset>
			return prov->output_string((char *)str);
   16656:	682b      	ldr	r3, [r5, #0]
   16658:	a804      	add	r0, sp, #16
   1665a:	69db      	ldr	r3, [r3, #28]
   1665c:	4798      	blx	r3
	if (prov_auth(data[2], data[3], data[4]) < 0) {
   1665e:	2800      	cmp	r0, #0
   16660:	dab0      	bge.n	165c4 <prov_start+0x84>
		BT_ERR("Invalid authentication method: 0x%02x; "
   16662:	2301      	movs	r3, #1
   16664:	f04f 0200 	mov.w	r2, #0
   16668:	f363 0207 	bfi	r2, r3, #0, #8
   1666c:	492f      	ldr	r1, [pc, #188]	; (1672c <prov_start+0x1ec>)
   1666e:	4b30      	ldr	r3, [pc, #192]	; (16730 <prov_start+0x1f0>)
   16670:	4836      	ldr	r0, [pc, #216]	; (1674c <prov_start+0x20c>)
   16672:	1a5b      	subs	r3, r3, r1
   16674:	08db      	lsrs	r3, r3, #3
   16676:	f363 128f 	bfi	r2, r3, #6, #10
   1667a:	f8ad 2000 	strh.w	r2, [sp]
   1667e:	793b      	ldrb	r3, [r7, #4]
   16680:	78fa      	ldrb	r2, [r7, #3]
   16682:	78b9      	ldrb	r1, [r7, #2]
   16684:	f00a faf7 	bl	20c76 <log_3>
   16688:	e76e      	b.n	16568 <prov_start+0x28>
				str[i] %= 36;
   1668a:	7803      	ldrb	r3, [r0, #0]
   1668c:	fbb3 f2f6 	udiv	r2, r3, r6
   16690:	fb06 3212 	mls	r2, r6, r2, r3
   16694:	b2d2      	uxtb	r2, r2
				if (str[i] < 10) {
   16696:	b253      	sxtb	r3, r2
   16698:	2a09      	cmp	r2, #9
					str[i] += '0';
   1669a:	bf94      	ite	ls
   1669c:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   1669e:	3337      	addhi	r3, #55	; 0x37
   166a0:	b2db      	uxtb	r3, r3
   166a2:	f800 3b01 	strb.w	r3, [r0], #1
   166a6:	3101      	adds	r1, #1
   166a8:	e7c0      	b.n	1662c <prov_start+0xec>
			u32_t div[8] = { 10, 100, 1000, 10000, 100000,
   166aa:	4e29      	ldr	r6, [pc, #164]	; (16750 <prov_start+0x210>)
   166ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   166ae:	ad04      	add	r5, sp, #16
   166b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   166b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   166b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   166ba:	2104      	movs	r1, #4
   166bc:	a803      	add	r0, sp, #12
   166be:	f00d ff5a 	bl	24576 <bt_rand>
			num %= div[size - 1];
   166c2:	ab0c      	add	r3, sp, #48	; 0x30
   166c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   166c8:	9803      	ldr	r0, [sp, #12]
   166ca:	f854 2c24 	ldr.w	r2, [r4, #-36]
   166ce:	fbb0 f3f2 	udiv	r3, r0, r2
   166d2:	fb02 0313 	mls	r3, r2, r3, r0
   166d6:	9303      	str	r3, [sp, #12]
	dst[1] = val;
   166d8:	ba1b      	rev	r3, r3
	dst[0] = val >> 8;
   166da:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
			(void)memset(link.auth, 0, 12);
   166de:	220c      	movs	r2, #12
   166e0:	2100      	movs	r1, #0
   166e2:	4817      	ldr	r0, [pc, #92]	; (16740 <prov_start+0x200>)
   166e4:	f00b fbf9 	bl	21eda <memset>
			return prov->output_number(output, num);
   166e8:	f8da 3000 	ldr.w	r3, [sl]
   166ec:	9903      	ldr	r1, [sp, #12]
   166ee:	699b      	ldr	r3, [r3, #24]
   166f0:	4648      	mov	r0, r9
   166f2:	4798      	blx	r3
   166f4:	e7b3      	b.n	1665e <prov_start+0x11e>
	switch (action) {
   166f6:	2903      	cmp	r1, #3
   166f8:	d8b3      	bhi.n	16662 <prov_start+0x122>
   166fa:	4b16      	ldr	r3, [pc, #88]	; (16754 <prov_start+0x214>)
   166fc:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   166fe:	2d00      	cmp	r5, #0
   16700:	d0af      	beq.n	16662 <prov_start+0x122>
		if (!(prov->input_actions & input)) {
   16702:	4b10      	ldr	r3, [pc, #64]	; (16744 <prov_start+0x204>)
   16704:	681e      	ldr	r6, [r3, #0]
   16706:	8af3      	ldrh	r3, [r6, #22]
   16708:	422b      	tst	r3, r5
   1670a:	d0aa      	beq.n	16662 <prov_start+0x122>
		if (size > prov->input_size) {
   1670c:	7d33      	ldrb	r3, [r6, #20]
   1670e:	42a3      	cmp	r3, r4
   16710:	d3a7      	bcc.n	16662 <prov_start+0x122>
		if (input == BT_MESH_ENTER_STRING) {
   16712:	2d08      	cmp	r5, #8
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16714:	bf0c      	ite	eq
   16716:	2140      	moveq	r1, #64	; 0x40
   16718:	2120      	movne	r1, #32
   1671a:	4808      	ldr	r0, [pc, #32]	; (1673c <prov_start+0x1fc>)
   1671c:	f00d fcad 	bl	2407a <atomic_or>
		return prov->input(input, size);
   16720:	6a33      	ldr	r3, [r6, #32]
   16722:	4621      	mov	r1, r4
   16724:	4628      	mov	r0, r5
   16726:	4798      	blx	r3
   16728:	e799      	b.n	1665e <prov_start+0x11e>
   1672a:	bf00      	nop
   1672c:	00025880 	.word	0x00025880
   16730:	00025950 	.word	0x00025950
   16734:	0002ba72 	.word	0x0002ba72
   16738:	0002ba8b 	.word	0x0002ba8b
   1673c:	200003c8 	.word	0x200003c8
   16740:	20000414 	.word	0x20000414
   16744:	20000d38 	.word	0x20000d38
   16748:	0002b5c4 	.word	0x0002b5c4
   1674c:	0002baac 	.word	0x0002baac
   16750:	00025a28 	.word	0x00025a28
   16754:	0002b5c9 	.word	0x0002b5c9

00016758 <atomic_test_bit.constprop.26>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16758:	4b05      	ldr	r3, [pc, #20]	; (16770 <atomic_test_bit.constprop.26+0x18>)
   1675a:	f3bf 8f5b 	dmb	ish
   1675e:	681b      	ldr	r3, [r3, #0]
   16760:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16764:	fa43 f000 	asr.w	r0, r3, r0
}
   16768:	f000 0001 	and.w	r0, r0, #1
   1676c:	4770      	bx	lr
   1676e:	bf00      	nop
   16770:	200003c8 	.word	0x200003c8

00016774 <buf_sent>:
	if (!link.tx.buf[0]) {
   16774:	4905      	ldr	r1, [pc, #20]	; (1678c <buf_sent+0x18>)
   16776:	f8d1 313c 	ldr.w	r3, [r1, #316]	; 0x13c
   1677a:	b133      	cbz	r3, 1678a <buf_sent+0x16>
   1677c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   16780:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   16784:	4802      	ldr	r0, [pc, #8]	; (16790 <buf_sent+0x1c>)
   16786:	f008 bb13 	b.w	1edb0 <k_delayed_work_submit_to_queue>
}
   1678a:	4770      	bx	lr
   1678c:	200003c8 	.word	0x200003c8
   16790:	20001d2c 	.word	0x20001d2c

00016794 <atomic_test_and_clear_bit.constprop.24>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   16794:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   16796:	2301      	movs	r3, #1
   16798:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1679c:	4b0a      	ldr	r3, [pc, #40]	; (167c8 <atomic_test_and_clear_bit.constprop.24+0x34>)
   1679e:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   167a2:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   167a4:	e853 2f00 	ldrex	r2, [r3]
   167a8:	ea02 0c01 	and.w	ip, r2, r1
   167ac:	e843 ce00 	strex	lr, ip, [r3]
   167b0:	f1be 0f00 	cmp.w	lr, #0
   167b4:	d1f6      	bne.n	167a4 <atomic_test_and_clear_bit.constprop.24+0x10>
   167b6:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   167ba:	4202      	tst	r2, r0
}
   167bc:	bf14      	ite	ne
   167be:	2001      	movne	r0, #1
   167c0:	2000      	moveq	r0, #0
   167c2:	f85d fb04 	ldr.w	pc, [sp], #4
   167c6:	bf00      	nop
   167c8:	200003c8 	.word	0x200003c8

000167cc <reset_link>:
{
   167cc:	b510      	push	{r4, lr}
	prov_clear_tx();
   167ce:	f7ff fd2d 	bl	1622c <prov_clear_tx>
	if (prov->link_close) {
   167d2:	4b12      	ldr	r3, [pc, #72]	; (1681c <reset_link+0x50>)
   167d4:	681b      	ldr	r3, [r3, #0]
   167d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   167d8:	b10b      	cbz	r3, 167de <reset_link+0x12>
		prov->link_close(BT_MESH_PROV_ADV);
   167da:	2001      	movs	r0, #1
   167dc:	4798      	blx	r3
	(void)memset(&link, 0, offsetof(struct prov_link, tx.retransmit));
   167de:	4c10      	ldr	r4, [pc, #64]	; (16820 <reset_link+0x54>)
   167e0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   167e4:	2100      	movs	r1, #0
   167e6:	4620      	mov	r0, r4
   167e8:	f00b fb77 	bl	21eda <memset>
	link.rx.prev_id = XACT_NVAL;
   167ec:	23ff      	movs	r3, #255	; 0xff
   167ee:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (bt_pub_key_get()) {
   167f2:	f7f1 fe71 	bl	84d8 <bt_pub_key_get>
   167f6:	b118      	cbz	r0, 16800 <reset_link+0x34>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   167f8:	2102      	movs	r1, #2
   167fa:	4620      	mov	r0, r4
   167fc:	f00d fc3d 	bl	2407a <atomic_or>
	link.rx.buf = bt_mesh_proxy_get_buf();
   16800:	f001 fc0a 	bl	18018 <bt_mesh_proxy_get_buf>
	if (link.conf_inputs[0]) {
   16804:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	link.rx.buf = bt_mesh_proxy_get_buf();
   16808:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
	if (link.conf_inputs[0]) {
   1680c:	b12b      	cbz	r3, 1681a <reset_link+0x4e>
		bt_mesh_attention(NULL, 0);
   1680e:	2100      	movs	r1, #0
   16810:	4608      	mov	r0, r1
}
   16812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_attention(NULL, 0);
   16816:	f7fc b931 	b.w	12a7c <bt_mesh_attention>
}
   1681a:	bd10      	pop	{r4, pc}
   1681c:	20000d38 	.word	0x20000d38
   16820:	200003c8 	.word	0x200003c8

00016824 <gen_prov_ctl>:
{
   16824:	b570      	push	{r4, r5, r6, lr}
   16826:	460e      	mov	r6, r1
	switch (BEARER_CTL(rx->gpc)) {
   16828:	7941      	ldrb	r1, [r0, #5]
   1682a:	0889      	lsrs	r1, r1, #2
   1682c:	2901      	cmp	r1, #1
{
   1682e:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
   16830:	d068      	beq.n	16904 <gen_prov_ctl+0xe0>
   16832:	b171      	cbz	r1, 16852 <gen_prov_ctl+0x2e>
   16834:	2902      	cmp	r1, #2
   16836:	d06a      	beq.n	1690e <gen_prov_ctl+0xea>
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   16838:	2301      	movs	r3, #1
   1683a:	f04f 0200 	mov.w	r2, #0
   1683e:	f363 0207 	bfi	r2, r3, #0, #8
   16842:	4837      	ldr	r0, [pc, #220]	; (16920 <gen_prov_ctl+0xfc>)
   16844:	4b37      	ldr	r3, [pc, #220]	; (16924 <gen_prov_ctl+0x100>)
   16846:	1a1b      	subs	r3, r3, r0
   16848:	08db      	lsrs	r3, r3, #3
   1684a:	f363 128f 	bfi	r2, r3, #6, #10
   1684e:	4836      	ldr	r0, [pc, #216]	; (16928 <gen_prov_ctl+0x104>)
   16850:	e00e      	b.n	16870 <gen_prov_ctl+0x4c>
	if (buf->len < 16) {
   16852:	88b1      	ldrh	r1, [r6, #4]
   16854:	290f      	cmp	r1, #15
   16856:	d80f      	bhi.n	16878 <gen_prov_ctl+0x54>
		BT_ERR("Too short bearer open message (len %u)", buf->len);
   16858:	2301      	movs	r3, #1
   1685a:	f04f 0200 	mov.w	r2, #0
   1685e:	f363 0207 	bfi	r2, r3, #0, #8
   16862:	482f      	ldr	r0, [pc, #188]	; (16920 <gen_prov_ctl+0xfc>)
   16864:	4b2f      	ldr	r3, [pc, #188]	; (16924 <gen_prov_ctl+0x100>)
   16866:	1a1b      	subs	r3, r3, r0
   16868:	08db      	lsrs	r3, r3, #3
   1686a:	4830      	ldr	r0, [pc, #192]	; (1692c <gen_prov_ctl+0x108>)
   1686c:	f363 128f 	bfi	r2, r3, #6, #10
}
   16870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   16874:	f00a b9d3 	b.w	20c1e <log_1>
	if (atomic_test_bit(link.flags, LINK_ACTIVE)) {
   16878:	2002      	movs	r0, #2
   1687a:	f7ff ff6d 	bl	16758 <atomic_test_bit.constprop.26>
   1687e:	b1f0      	cbz	r0, 168be <gen_prov_ctl+0x9a>
		if (link.id == rx->link_id && link.expect == PROV_INVITE) {
   16880:	4b2b      	ldr	r3, [pc, #172]	; (16930 <gen_prov_ctl+0x10c>)
   16882:	6822      	ldr	r2, [r4, #0]
   16884:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   16888:	4291      	cmp	r1, r2
   1688a:	d108      	bne.n	1689e <gen_prov_ctl+0x7a>
   1688c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   16890:	b92a      	cbnz	r2, 1689e <gen_prov_ctl+0x7a>
			bearer_ctl_send(LINK_ACK, NULL, 0);
   16892:	4611      	mov	r1, r2
   16894:	2001      	movs	r0, #1
}
   16896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0);
   1689a:	f7ff bded 	b.w	16478 <bearer_ctl_send>
			BT_WARN("Ignoring bearer open: link already active");
   1689e:	2302      	movs	r3, #2
   168a0:	f04f 0100 	mov.w	r1, #0
   168a4:	f363 0107 	bfi	r1, r3, #0, #8
   168a8:	4a1d      	ldr	r2, [pc, #116]	; (16920 <gen_prov_ctl+0xfc>)
   168aa:	4b1e      	ldr	r3, [pc, #120]	; (16924 <gen_prov_ctl+0x100>)
   168ac:	4821      	ldr	r0, [pc, #132]	; (16934 <gen_prov_ctl+0x110>)
   168ae:	1a9b      	subs	r3, r3, r2
   168b0:	08db      	lsrs	r3, r3, #3
   168b2:	f363 118f 	bfi	r1, r3, #6, #10
}
   168b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_WARN("Ignoring bearer open: link already active");
   168ba:	f00a b9a3 	b.w	20c04 <log_0>
	if (memcmp(buf->data, prov->uuid, 16)) {
   168be:	4d1e      	ldr	r5, [pc, #120]	; (16938 <gen_prov_ctl+0x114>)
   168c0:	6830      	ldr	r0, [r6, #0]
   168c2:	682b      	ldr	r3, [r5, #0]
   168c4:	2210      	movs	r2, #16
   168c6:	6819      	ldr	r1, [r3, #0]
   168c8:	f00b fab6 	bl	21e38 <memcmp>
   168cc:	b9c8      	cbnz	r0, 16902 <gen_prov_ctl+0xde>
	if (prov->link_open) {
   168ce:	682b      	ldr	r3, [r5, #0]
   168d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   168d2:	b10b      	cbz	r3, 168d8 <gen_prov_ctl+0xb4>
		prov->link_open(BT_MESH_PROV_ADV);
   168d4:	2001      	movs	r0, #1
   168d6:	4798      	blx	r3
	link.id = rx->link_id;
   168d8:	6823      	ldr	r3, [r4, #0]
   168da:	4c15      	ldr	r4, [pc, #84]	; (16930 <gen_prov_ctl+0x10c>)
   168dc:	2104      	movs	r1, #4
   168de:	4620      	mov	r0, r4
   168e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   168e4:	f00d fbc9 	bl	2407a <atomic_or>
	net_buf_simple_reset(link.rx.buf);
   168e8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	buf->len  = 0;
   168ec:	2500      	movs	r5, #0
	buf->data = buf->__buf;
   168ee:	689a      	ldr	r2, [r3, #8]
   168f0:	601a      	str	r2, [r3, #0]
	buf->len  = 0;
   168f2:	809d      	strh	r5, [r3, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0);
   168f4:	462a      	mov	r2, r5
   168f6:	4629      	mov	r1, r5
   168f8:	2001      	movs	r0, #1
   168fa:	f7ff fdbd 	bl	16478 <bearer_ctl_send>
	link.expect = PROV_INVITE;
   168fe:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
}
   16902:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   16904:	2002      	movs	r0, #2
}
   16906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   1690a:	f7ff bf25 	b.w	16758 <atomic_test_bit.constprop.26>
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   1690e:	4608      	mov	r0, r1
   16910:	f7ff ff22 	bl	16758 <atomic_test_bit.constprop.26>
   16914:	2800      	cmp	r0, #0
   16916:	d0f4      	beq.n	16902 <gen_prov_ctl+0xde>
}
   16918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	reset_link();
   1691c:	f7ff bf56 	b.w	167cc <reset_link>
   16920:	00025880 	.word	0x00025880
   16924:	00025950 	.word	0x00025950
   16928:	0002b7db 	.word	0x0002b7db
   1692c:	0002b78a 	.word	0x0002b78a
   16930:	200003c8 	.word	0x200003c8
   16934:	0002b7b1 	.word	0x0002b7b1
   16938:	20000d38 	.word	0x20000d38

0001693c <prov_retransmit>:
{
   1693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   1693e:	2002      	movs	r0, #2
   16940:	f7ff ff0a 	bl	16758 <atomic_test_bit.constprop.26>
   16944:	b978      	cbnz	r0, 16966 <prov_retransmit+0x2a>
		BT_WARN("Link not active");
   16946:	2302      	movs	r3, #2
   16948:	f04f 0100 	mov.w	r1, #0
   1694c:	f363 0107 	bfi	r1, r3, #0, #8
   16950:	4a23      	ldr	r2, [pc, #140]	; (169e0 <prov_retransmit+0xa4>)
   16952:	4b24      	ldr	r3, [pc, #144]	; (169e4 <prov_retransmit+0xa8>)
   16954:	4824      	ldr	r0, [pc, #144]	; (169e8 <prov_retransmit+0xac>)
   16956:	1a9b      	subs	r3, r3, r2
   16958:	08db      	lsrs	r3, r3, #3
   1695a:	f363 118f 	bfi	r1, r3, #6, #10
}
   1695e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Link not active");
   16962:	f00a b94f 	b.w	20c04 <log_0>
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
   16966:	4c21      	ldr	r4, [pc, #132]	; (169ec <prov_retransmit+0xb0>)
   16968:	f00e fdd1 	bl	2550e <z_impl_k_uptime_get>
   1696c:	e9d4 324c 	ldrd	r3, r2, [r4, #304]	; 0x130
   16970:	1ac6      	subs	r6, r0, r3
   16972:	eb61 0702 	sbc.w	r7, r1, r2
   16976:	f247 5230 	movw	r2, #30000	; 0x7530
   1697a:	2300      	movs	r3, #0
   1697c:	42b2      	cmp	r2, r6
   1697e:	41bb      	sbcs	r3, r7
   16980:	da11      	bge.n	169a6 <prov_retransmit+0x6a>
		BT_WARN("Giving up transaction");
   16982:	2302      	movs	r3, #2
   16984:	f04f 0100 	mov.w	r1, #0
   16988:	f363 0107 	bfi	r1, r3, #0, #8
   1698c:	4a14      	ldr	r2, [pc, #80]	; (169e0 <prov_retransmit+0xa4>)
   1698e:	4b15      	ldr	r3, [pc, #84]	; (169e4 <prov_retransmit+0xa8>)
   16990:	4817      	ldr	r0, [pc, #92]	; (169f0 <prov_retransmit+0xb4>)
   16992:	1a9b      	subs	r3, r3, r2
   16994:	08db      	lsrs	r3, r3, #3
   16996:	f363 118f 	bfi	r1, r3, #6, #10
   1699a:	f00a f933 	bl	20c04 <log_0>
}
   1699e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		reset_link();
   169a2:	f7ff bf13 	b.w	167cc <reset_link>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   169a6:	4e13      	ldr	r6, [pc, #76]	; (169f4 <prov_retransmit+0xb8>)
   169a8:	f504 749e 	add.w	r4, r4, #316	; 0x13c
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   169ac:	2500      	movs	r5, #0
		struct net_buf *buf = link.tx.buf[i];
   169ae:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   169b2:	b1a0      	cbz	r0, 169de <prov_retransmit+0xa2>
		if (BT_MESH_ADV(buf)->busy) {
   169b4:	6943      	ldr	r3, [r0, #20]
   169b6:	7a1a      	ldrb	r2, [r3, #8]
   169b8:	f012 0204 	ands.w	r2, r2, #4
   169bc:	f105 0501 	add.w	r5, r5, #1
   169c0:	d10b      	bne.n	169da <prov_retransmit+0x9e>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   169c2:	2d03      	cmp	r5, #3
   169c4:	d005      	beq.n	169d2 <prov_retransmit+0x96>
   169c6:	6823      	ldr	r3, [r4, #0]
   169c8:	b11b      	cbz	r3, 169d2 <prov_retransmit+0x96>
			bt_mesh_adv_send(buf, NULL, NULL);
   169ca:	4611      	mov	r1, r2
   169cc:	f7f4 fc74 	bl	b2b8 <bt_mesh_adv_send>
   169d0:	e7ed      	b.n	169ae <prov_retransmit+0x72>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   169d2:	2200      	movs	r2, #0
   169d4:	4631      	mov	r1, r6
   169d6:	f7f4 fc6f 	bl	b2b8 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   169da:	2d03      	cmp	r5, #3
   169dc:	d1e7      	bne.n	169ae <prov_retransmit+0x72>
}
   169de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   169e0:	00025880 	.word	0x00025880
   169e4:	00025950 	.word	0x00025950
   169e8:	0002ba4c 	.word	0x0002ba4c
   169ec:	200003c8 	.word	0x200003c8
   169f0:	0002ba5c 	.word	0x0002ba5c
   169f4:	2000740c 	.word	0x2000740c

000169f8 <bt_mesh_pb_gatt_recv>:
}
#endif /* CONFIG_BT_MESH_PB_ADV */

#if defined(CONFIG_BT_MESH_PB_GATT)
int bt_mesh_pb_gatt_recv(struct bt_conn *conn, struct net_buf_simple *buf)
{
   169f8:	b538      	push	{r3, r4, r5, lr}
	u8_t type;

	BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

	if (link.conn != conn) {
   169fa:	4d39      	ldr	r5, [pc, #228]	; (16ae0 <bt_mesh_pb_gatt_recv+0xe8>)
   169fc:	686b      	ldr	r3, [r5, #4]
   169fe:	4283      	cmp	r3, r0
{
   16a00:	460c      	mov	r4, r1
	if (link.conn != conn) {
   16a02:	d010      	beq.n	16a26 <bt_mesh_pb_gatt_recv+0x2e>
		BT_WARN("Data for unexpected connection");
   16a04:	2302      	movs	r3, #2
   16a06:	f04f 0100 	mov.w	r1, #0
   16a0a:	f363 0107 	bfi	r1, r3, #0, #8
   16a0e:	4a35      	ldr	r2, [pc, #212]	; (16ae4 <bt_mesh_pb_gatt_recv+0xec>)
   16a10:	4b35      	ldr	r3, [pc, #212]	; (16ae8 <bt_mesh_pb_gatt_recv+0xf0>)
   16a12:	4836      	ldr	r0, [pc, #216]	; (16aec <bt_mesh_pb_gatt_recv+0xf4>)
   16a14:	1a9b      	subs	r3, r3, r2
   16a16:	08db      	lsrs	r3, r3, #3
   16a18:	f363 118f 	bfi	r1, r3, #6, #10
   16a1c:	f00a f8f2 	bl	20c04 <log_0>
		return -ENOTCONN;
   16a20:	f06f 0038 	mvn.w	r0, #56	; 0x38
	}

	prov_handlers[type].func(buf->data);

	return 0;
}
   16a24:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
   16a26:	8889      	ldrh	r1, [r1, #4]
   16a28:	b971      	cbnz	r1, 16a48 <bt_mesh_pb_gatt_recv+0x50>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   16a2a:	2302      	movs	r3, #2
   16a2c:	f04f 0200 	mov.w	r2, #0
   16a30:	f363 0207 	bfi	r2, r3, #0, #8
   16a34:	482b      	ldr	r0, [pc, #172]	; (16ae4 <bt_mesh_pb_gatt_recv+0xec>)
   16a36:	4b2c      	ldr	r3, [pc, #176]	; (16ae8 <bt_mesh_pb_gatt_recv+0xf0>)
   16a38:	1a1b      	subs	r3, r3, r0
   16a3a:	08db      	lsrs	r3, r3, #3
   16a3c:	482c      	ldr	r0, [pc, #176]	; (16af0 <bt_mesh_pb_gatt_recv+0xf8>)
   16a3e:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   16a42:	f00a f8ec 	bl	20c1e <log_1>
		return -EINVAL;
   16a46:	e01b      	b.n	16a80 <bt_mesh_pb_gatt_recv+0x88>
	type = net_buf_simple_pull_u8(buf);
   16a48:	4620      	mov	r0, r4
   16a4a:	f00e f9bc 	bl	24dc6 <net_buf_simple_pull_u8>
	if (type != PROV_FAILED && type != link.expect) {
   16a4e:	2809      	cmp	r0, #9
   16a50:	d028      	beq.n	16aa4 <bt_mesh_pb_gatt_recv+0xac>
   16a52:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   16a56:	4281      	cmp	r1, r0
   16a58:	d015      	beq.n	16a86 <bt_mesh_pb_gatt_recv+0x8e>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, link.expect);
   16a5a:	2202      	movs	r2, #2
   16a5c:	f04f 0300 	mov.w	r3, #0
   16a60:	f362 0307 	bfi	r3, r2, #0, #8
   16a64:	4c1f      	ldr	r4, [pc, #124]	; (16ae4 <bt_mesh_pb_gatt_recv+0xec>)
   16a66:	4a20      	ldr	r2, [pc, #128]	; (16ae8 <bt_mesh_pb_gatt_recv+0xf0>)
   16a68:	1b12      	subs	r2, r2, r4
   16a6a:	08d2      	lsrs	r2, r2, #3
   16a6c:	f362 138f 	bfi	r3, r2, #6, #10
   16a70:	460a      	mov	r2, r1
   16a72:	4601      	mov	r1, r0
   16a74:	481f      	ldr	r0, [pc, #124]	; (16af4 <bt_mesh_pb_gatt_recv+0xfc>)
   16a76:	f00a f8e6 	bl	20c46 <log_2>
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
   16a7a:	2003      	movs	r0, #3
   16a7c:	f00d fb0c 	bl	24098 <prov_send_fail_msg>
		return -EINVAL;
   16a80:	f06f 0015 	mvn.w	r0, #21
   16a84:	e7ce      	b.n	16a24 <bt_mesh_pb_gatt_recv+0x2c>
	if (type >= ARRAY_SIZE(prov_handlers)) {
   16a86:	2909      	cmp	r1, #9
   16a88:	d90c      	bls.n	16aa4 <bt_mesh_pb_gatt_recv+0xac>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   16a8a:	2301      	movs	r3, #1
   16a8c:	f04f 0200 	mov.w	r2, #0
   16a90:	f363 0207 	bfi	r2, r3, #0, #8
   16a94:	4813      	ldr	r0, [pc, #76]	; (16ae4 <bt_mesh_pb_gatt_recv+0xec>)
   16a96:	4b14      	ldr	r3, [pc, #80]	; (16ae8 <bt_mesh_pb_gatt_recv+0xf0>)
   16a98:	1a1b      	subs	r3, r3, r0
   16a9a:	08db      	lsrs	r3, r3, #3
   16a9c:	f363 128f 	bfi	r2, r3, #6, #10
   16aa0:	4815      	ldr	r0, [pc, #84]	; (16af8 <bt_mesh_pb_gatt_recv+0x100>)
   16aa2:	e7ce      	b.n	16a42 <bt_mesh_pb_gatt_recv+0x4a>
	if (prov_handlers[type].len != buf->len) {
   16aa4:	4b15      	ldr	r3, [pc, #84]	; (16afc <bt_mesh_pb_gatt_recv+0x104>)
   16aa6:	88a1      	ldrh	r1, [r4, #4]
   16aa8:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   16aac:	8892      	ldrh	r2, [r2, #4]
   16aae:	428a      	cmp	r2, r1
   16ab0:	d00f      	beq.n	16ad2 <bt_mesh_pb_gatt_recv+0xda>
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
   16ab2:	2201      	movs	r2, #1
   16ab4:	f04f 0300 	mov.w	r3, #0
   16ab8:	f362 0307 	bfi	r3, r2, #0, #8
   16abc:	4c09      	ldr	r4, [pc, #36]	; (16ae4 <bt_mesh_pb_gatt_recv+0xec>)
   16abe:	4a0a      	ldr	r2, [pc, #40]	; (16ae8 <bt_mesh_pb_gatt_recv+0xf0>)
   16ac0:	1b12      	subs	r2, r2, r4
   16ac2:	08d2      	lsrs	r2, r2, #3
   16ac4:	f362 138f 	bfi	r3, r2, #6, #10
   16ac8:	4602      	mov	r2, r0
   16aca:	480d      	ldr	r0, [pc, #52]	; (16b00 <bt_mesh_pb_gatt_recv+0x108>)
   16acc:	f00a f8bb 	bl	20c46 <log_2>
   16ad0:	e7d6      	b.n	16a80 <bt_mesh_pb_gatt_recv+0x88>
	prov_handlers[type].func(buf->data);
   16ad2:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   16ad6:	6820      	ldr	r0, [r4, #0]
   16ad8:	4798      	blx	r3
	return 0;
   16ada:	2000      	movs	r0, #0
   16adc:	e7a2      	b.n	16a24 <bt_mesh_pb_gatt_recv+0x2c>
   16ade:	bf00      	nop
   16ae0:	200003c8 	.word	0x200003c8
   16ae4:	00025880 	.word	0x00025880
   16ae8:	00025950 	.word	0x00025950
   16aec:	0002b607 	.word	0x0002b607
   16af0:	0002b626 	.word	0x0002b626
   16af4:	0002b64d 	.word	0x0002b64d
   16af8:	0002b66d 	.word	0x0002b66d
   16afc:	000262c8 	.word	0x000262c8
   16b00:	0002b692 	.word	0x0002b692

00016b04 <bt_mesh_pb_gatt_open>:

int bt_mesh_pb_gatt_open(struct bt_conn *conn)
{
   16b04:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16b06:	4d0d      	ldr	r5, [pc, #52]	; (16b3c <bt_mesh_pb_gatt_open+0x38>)
   16b08:	4606      	mov	r6, r0
   16b0a:	2104      	movs	r1, #4
   16b0c:	4628      	mov	r0, r5
   16b0e:	f00d fab4 	bl	2407a <atomic_or>
	BT_DBG("conn %p", conn);

	if (atomic_test_and_set_bit(link.flags, LINK_ACTIVE)) {
   16b12:	f010 0404 	ands.w	r4, r0, #4
   16b16:	d10d      	bne.n	16b34 <bt_mesh_pb_gatt_open+0x30>
		return -EBUSY;
	}

	link.conn = bt_conn_ref(conn);
   16b18:	4630      	mov	r0, r6
   16b1a:	f00b fc50 	bl	223be <bt_conn_ref>
	link.expect = PROV_INVITE;

	if (prov->link_open) {
   16b1e:	4b08      	ldr	r3, [pc, #32]	; (16b40 <bt_mesh_pb_gatt_open+0x3c>)
	link.expect = PROV_INVITE;
   16b20:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
	if (prov->link_open) {
   16b24:	681b      	ldr	r3, [r3, #0]
	link.conn = bt_conn_ref(conn);
   16b26:	6068      	str	r0, [r5, #4]
	if (prov->link_open) {
   16b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16b2a:	b10b      	cbz	r3, 16b30 <bt_mesh_pb_gatt_open+0x2c>
		prov->link_open(BT_MESH_PROV_GATT);
   16b2c:	2002      	movs	r0, #2
   16b2e:	4798      	blx	r3
	}

	return 0;
}
   16b30:	4620      	mov	r0, r4
   16b32:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   16b34:	f06f 040f 	mvn.w	r4, #15
   16b38:	e7fa      	b.n	16b30 <bt_mesh_pb_gatt_open+0x2c>
   16b3a:	bf00      	nop
   16b3c:	200003c8 	.word	0x200003c8
   16b40:	20000d38 	.word	0x20000d38

00016b44 <bt_mesh_pb_gatt_close>:

int bt_mesh_pb_gatt_close(struct bt_conn *conn)
{
   16b44:	b510      	push	{r4, lr}
	bool pub_key;

	BT_DBG("conn %p", conn);

	if (link.conn != conn) {
   16b46:	4c1c      	ldr	r4, [pc, #112]	; (16bb8 <bt_mesh_pb_gatt_close+0x74>)
   16b48:	6863      	ldr	r3, [r4, #4]
   16b4a:	4283      	cmp	r3, r0
   16b4c:	d010      	beq.n	16b70 <bt_mesh_pb_gatt_close+0x2c>
		BT_ERR("Not connected");
   16b4e:	2301      	movs	r3, #1
   16b50:	f04f 0100 	mov.w	r1, #0
   16b54:	f363 0107 	bfi	r1, r3, #0, #8
   16b58:	4a18      	ldr	r2, [pc, #96]	; (16bbc <bt_mesh_pb_gatt_close+0x78>)
   16b5a:	4b19      	ldr	r3, [pc, #100]	; (16bc0 <bt_mesh_pb_gatt_close+0x7c>)
   16b5c:	4819      	ldr	r0, [pc, #100]	; (16bc4 <bt_mesh_pb_gatt_close+0x80>)
   16b5e:	1a9b      	subs	r3, r3, r2
   16b60:	08db      	lsrs	r3, r3, #3
   16b62:	f363 118f 	bfi	r1, r3, #6, #10
   16b66:	f00a f84d 	bl	20c04 <log_0>
		return -ENOTCONN;
   16b6a:	f06f 0038 	mvn.w	r0, #56	; 0x38
	if (pub_key) {
		atomic_set_bit(link.flags, LOCAL_PUB_KEY);
	}

	return 0;
}
   16b6e:	bd10      	pop	{r4, pc}
	if (link.conf_inputs[0]) {
   16b70:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   16b74:	b11b      	cbz	r3, 16b7e <bt_mesh_pb_gatt_close+0x3a>
		bt_mesh_attention(NULL, 0);
   16b76:	2100      	movs	r1, #0
   16b78:	4608      	mov	r0, r1
   16b7a:	f7fb ff7f 	bl	12a7c <bt_mesh_attention>
	if (prov->link_close) {
   16b7e:	4b12      	ldr	r3, [pc, #72]	; (16bc8 <bt_mesh_pb_gatt_close+0x84>)
   16b80:	681b      	ldr	r3, [r3, #0]
   16b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16b84:	b10b      	cbz	r3, 16b8a <bt_mesh_pb_gatt_close+0x46>
		prov->link_close(BT_MESH_PROV_GATT);
   16b86:	2002      	movs	r0, #2
   16b88:	4798      	blx	r3
	bt_conn_unref(link.conn);
   16b8a:	6860      	ldr	r0, [r4, #4]
   16b8c:	f00b fc1e 	bl	223cc <bt_conn_unref>
	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
   16b90:	2001      	movs	r0, #1
   16b92:	f7ff fde1 	bl	16758 <atomic_test_bit.constprop.26>
	(void)memset(&link, 0, sizeof(link));
   16b96:	f44f 72b4 	mov.w	r2, #360	; 0x168
	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
   16b9a:	4604      	mov	r4, r0
	(void)memset(&link, 0, sizeof(link));
   16b9c:	2100      	movs	r1, #0
   16b9e:	4806      	ldr	r0, [pc, #24]	; (16bb8 <bt_mesh_pb_gatt_close+0x74>)
   16ba0:	f00b f99b 	bl	21eda <memset>
	if (pub_key) {
   16ba4:	b12c      	cbz	r4, 16bb2 <bt_mesh_pb_gatt_close+0x6e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16ba6:	2102      	movs	r1, #2
   16ba8:	4803      	ldr	r0, [pc, #12]	; (16bb8 <bt_mesh_pb_gatt_close+0x74>)
   16baa:	f00d fa66 	bl	2407a <atomic_or>
	return 0;
   16bae:	2000      	movs	r0, #0
   16bb0:	e7dd      	b.n	16b6e <bt_mesh_pb_gatt_close+0x2a>
   16bb2:	4620      	mov	r0, r4
   16bb4:	e7db      	b.n	16b6e <bt_mesh_pb_gatt_close+0x2a>
   16bb6:	bf00      	nop
   16bb8:	200003c8 	.word	0x200003c8
   16bbc:	00025880 	.word	0x00025880
   16bc0:	00025950 	.word	0x00025950
   16bc4:	00027748 	.word	0x00027748
   16bc8:	20000d38 	.word	0x20000d38

00016bcc <close_link.constprop.22>:
static void close_link(u8_t err, u8_t reason)
   16bcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (link.conn) {
   16bce:	4c15      	ldr	r4, [pc, #84]	; (16c24 <close_link.constprop.22+0x58>)
   16bd0:	6865      	ldr	r5, [r4, #4]
   16bd2:	2602      	movs	r6, #2
   16bd4:	f88d 6007 	strb.w	r6, [sp, #7]
   16bd8:	b125      	cbz	r5, 16be4 <close_link.constprop.22+0x18>
		bt_mesh_pb_gatt_close(link.conn);
   16bda:	4628      	mov	r0, r5
   16bdc:	f7ff ffb2 	bl	16b44 <bt_mesh_pb_gatt_close>
}
   16be0:	b002      	add	sp, #8
   16be2:	bd70      	pop	{r4, r5, r6, pc}
		prov_send_fail_msg(err);
   16be4:	f00d fa58 	bl	24098 <prov_send_fail_msg>
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
   16be8:	2201      	movs	r2, #1
   16bea:	f10d 0107 	add.w	r1, sp, #7
   16bee:	4630      	mov	r0, r6
	link.rx.seg = 0U;
   16bf0:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
   16bf4:	f7ff fc40 	bl	16478 <bearer_ctl_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16bf8:	f3bf 8f5b 	dmb	ish
   16bfc:	e854 3f00 	ldrex	r3, [r4]
   16c00:	f023 0304 	bic.w	r3, r3, #4
   16c04:	e844 3200 	strex	r2, r3, [r4]
   16c08:	2a00      	cmp	r2, #0
   16c0a:	d1f7      	bne.n	16bfc <close_link.constprop.22+0x30>
   16c0c:	f3bf 8f5b 	dmb	ish
	if (link.conf_inputs[0]) {
   16c10:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   16c14:	2b00      	cmp	r3, #0
   16c16:	d0e3      	beq.n	16be0 <close_link.constprop.22+0x14>
		bt_mesh_attention(NULL, 0);
   16c18:	4629      	mov	r1, r5
   16c1a:	4628      	mov	r0, r5
   16c1c:	f7fb ff2e 	bl	12a7c <bt_mesh_attention>
   16c20:	e7de      	b.n	16be0 <close_link.constprop.22+0x14>
   16c22:	bf00      	nop
   16c24:	200003c8 	.word	0x200003c8

00016c28 <prov_invite>:
{
   16c28:	b530      	push	{r4, r5, lr}
   16c2a:	b089      	sub	sp, #36	; 0x24
	if (data[0]) {
   16c2c:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, 12);
   16c2e:	ab03      	add	r3, sp, #12
   16c30:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   16c34:	4604      	mov	r4, r0
	PROV_BUF(buf, 12);
   16c36:	9300      	str	r3, [sp, #0]
   16c38:	e9cd 2301 	strd	r2, r3, [sp, #4]
	if (data[0]) {
   16c3c:	b111      	cbz	r1, 16c44 <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   16c3e:	2000      	movs	r0, #0
   16c40:	f7fb ff1c 	bl	12a7c <bt_mesh_attention>
	link.conf_inputs[0] = data[0];
   16c44:	4d2a      	ldr	r5, [pc, #168]	; (16cf0 <prov_invite+0xc8>)
   16c46:	7823      	ldrb	r3, [r4, #0]
   16c48:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
	prov_buf_init(&buf, PROV_CAPABILITIES);
   16c4c:	2101      	movs	r1, #1
   16c4e:	4668      	mov	r0, sp
   16c50:	f00d fa07 	bl	24062 <prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   16c54:	f7f8 fc80 	bl	f558 <bt_mesh_elem_count>
   16c58:	4601      	mov	r1, r0
   16c5a:	4668      	mov	r0, sp
   16c5c:	f00e f845 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->static_val ? BIT(0) : 0x00);
   16c60:	4c24      	ldr	r4, [pc, #144]	; (16cf4 <prov_invite+0xcc>)
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   16c62:	2101      	movs	r1, #1
   16c64:	4668      	mov	r0, sp
   16c66:	f00e f857 	bl	24d18 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, 0x00);
   16c6a:	2100      	movs	r1, #0
   16c6c:	4668      	mov	r0, sp
   16c6e:	f00e f83c 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->static_val ? BIT(0) : 0x00);
   16c72:	6823      	ldr	r3, [r4, #0]
   16c74:	68d9      	ldr	r1, [r3, #12]
   16c76:	3100      	adds	r1, #0
   16c78:	bf18      	it	ne
   16c7a:	2101      	movne	r1, #1
   16c7c:	4668      	mov	r0, sp
   16c7e:	f00e f834 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->output_size);
   16c82:	6823      	ldr	r3, [r4, #0]
   16c84:	4668      	mov	r0, sp
   16c86:	7c59      	ldrb	r1, [r3, #17]
   16c88:	f00e f82f 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, prov->output_actions);
   16c8c:	6823      	ldr	r3, [r4, #0]
   16c8e:	4668      	mov	r0, sp
   16c90:	8a59      	ldrh	r1, [r3, #18]
   16c92:	f00e f841 	bl	24d18 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, prov->input_size);
   16c96:	6823      	ldr	r3, [r4, #0]
   16c98:	4668      	mov	r0, sp
   16c9a:	7d19      	ldrb	r1, [r3, #20]
   16c9c:	f00e f825 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, prov->input_actions);
   16ca0:	6823      	ldr	r3, [r4, #0]
   16ca2:	4668      	mov	r0, sp
   16ca4:	8ad9      	ldrh	r1, [r3, #22]
   16ca6:	f00e f837 	bl	24d18 <net_buf_simple_add_be16>
	memcpy(&link.conf_inputs[1], &buf.data[1], 11);
   16caa:	9900      	ldr	r1, [sp, #0]
   16cac:	220b      	movs	r2, #11
   16cae:	3101      	adds	r1, #1
   16cb0:	f105 007d 	add.w	r0, r5, #125	; 0x7d
   16cb4:	f00b f8e7 	bl	21e86 <memcpy>
	if (prov_send(&buf)) {
   16cb8:	4668      	mov	r0, sp
   16cba:	f7ff fb27 	bl	1630c <prov_send>
   16cbe:	b190      	cbz	r0, 16ce6 <prov_invite+0xbe>
		BT_ERR("Failed to send capabilities");
   16cc0:	2301      	movs	r3, #1
   16cc2:	f04f 0100 	mov.w	r1, #0
   16cc6:	f363 0107 	bfi	r1, r3, #0, #8
   16cca:	4a0b      	ldr	r2, [pc, #44]	; (16cf8 <prov_invite+0xd0>)
   16ccc:	4b0b      	ldr	r3, [pc, #44]	; (16cfc <prov_invite+0xd4>)
   16cce:	480c      	ldr	r0, [pc, #48]	; (16d00 <prov_invite+0xd8>)
   16cd0:	1a9b      	subs	r3, r3, r2
   16cd2:	08db      	lsrs	r3, r3, #3
   16cd4:	f363 118f 	bfi	r1, r3, #6, #10
   16cd8:	f009 ff94 	bl	20c04 <log_0>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   16cdc:	2005      	movs	r0, #5
   16cde:	f7ff ff75 	bl	16bcc <close_link.constprop.22>
}
   16ce2:	b009      	add	sp, #36	; 0x24
   16ce4:	bd30      	pop	{r4, r5, pc}
	link.expect = PROV_START;
   16ce6:	2302      	movs	r3, #2
   16ce8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   16cec:	e7f9      	b.n	16ce2 <prov_invite+0xba>
   16cee:	bf00      	nop
   16cf0:	200003c8 	.word	0x200003c8
   16cf4:	20000d38 	.word	0x20000d38
   16cf8:	00025880 	.word	0x00025880
   16cfc:	00025950 	.word	0x00025950
   16d00:	0002b974 	.word	0x0002b974

00016d04 <send_pub_key>:
{
   16d04:	b510      	push	{r4, lr}
   16d06:	b096      	sub	sp, #88	; 0x58
	PROV_BUF(buf, 65);
   16d08:	ab04      	add	r3, sp, #16
   16d0a:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   16d0e:	9301      	str	r3, [sp, #4]
   16d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
	key = bt_pub_key_get();
   16d14:	f7f1 fbe0 	bl	84d8 <bt_pub_key_get>
	if (!key) {
   16d18:	4604      	mov	r4, r0
   16d1a:	b990      	cbnz	r0, 16d42 <send_pub_key+0x3e>
		BT_ERR("No public key available");
   16d1c:	2301      	movs	r3, #1
   16d1e:	f04f 0100 	mov.w	r1, #0
   16d22:	f363 0107 	bfi	r1, r3, #0, #8
   16d26:	4a2a      	ldr	r2, [pc, #168]	; (16dd0 <send_pub_key+0xcc>)
   16d28:	4b2a      	ldr	r3, [pc, #168]	; (16dd4 <send_pub_key+0xd0>)
   16d2a:	482b      	ldr	r0, [pc, #172]	; (16dd8 <send_pub_key+0xd4>)
   16d2c:	1a9b      	subs	r3, r3, r2
   16d2e:	08db      	lsrs	r3, r3, #3
   16d30:	f363 118f 	bfi	r1, r3, #6, #10
   16d34:	f009 ff66 	bl	20c04 <log_0>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   16d38:	2005      	movs	r0, #5
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   16d3a:	f7ff ff47 	bl	16bcc <close_link.constprop.22>
}
   16d3e:	b016      	add	sp, #88	; 0x58
   16d40:	bd10      	pop	{r4, pc}
	prov_buf_init(&buf, PROV_PUB_KEY);
   16d42:	2103      	movs	r1, #3
   16d44:	a801      	add	r0, sp, #4
   16d46:	f00d f98c 	bl	24062 <prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), key, 32);
   16d4a:	2120      	movs	r1, #32
   16d4c:	a801      	add	r0, sp, #4
   16d4e:	f00d ffbd 	bl	24ccc <net_buf_simple_add>
   16d52:	4621      	mov	r1, r4
   16d54:	f00d f9b6 	bl	240c4 <sys_memcpy_swap.constprop.21>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), &key[32], 32);
   16d58:	2120      	movs	r1, #32
   16d5a:	a801      	add	r0, sp, #4
   16d5c:	f00d ffb6 	bl	24ccc <net_buf_simple_add>
   16d60:	f104 0120 	add.w	r1, r4, #32
   16d64:	f00d f9ae 	bl	240c4 <sys_memcpy_swap.constprop.21>
	memcpy(&link.conf_inputs[81], &buf.data[1], 64);
   16d68:	4c1c      	ldr	r4, [pc, #112]	; (16ddc <send_pub_key+0xd8>)
   16d6a:	9901      	ldr	r1, [sp, #4]
   16d6c:	2240      	movs	r2, #64	; 0x40
   16d6e:	3101      	adds	r1, #1
   16d70:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
   16d74:	f00b f887 	bl	21e86 <memcpy>
	prov_send(&buf);
   16d78:	a801      	add	r0, sp, #4
   16d7a:	f7ff fac7 	bl	1630c <prov_send>
   16d7e:	2300      	movs	r3, #0
	buf->data = buf->__buf;
   16d80:	9803      	ldr	r0, [sp, #12]
	buf->len  = 0;
   16d82:	f8ad 3008 	strh.w	r3, [sp, #8]
	sys_memcpy_swap(buf.data, &link.conf_inputs[17], 32);
   16d86:	f104 018d 	add.w	r1, r4, #141	; 0x8d
	buf->data = buf->__buf;
   16d8a:	9001      	str	r0, [sp, #4]
   16d8c:	f00d f99a 	bl	240c4 <sys_memcpy_swap.constprop.21>
	sys_memcpy_swap(&buf.data[32], &link.conf_inputs[49], 32);
   16d90:	9801      	ldr	r0, [sp, #4]
   16d92:	f104 01ad 	add.w	r1, r4, #173	; 0xad
   16d96:	3020      	adds	r0, #32
   16d98:	f00d f994 	bl	240c4 <sys_memcpy_swap.constprop.21>
	if (bt_dh_key_gen(buf.data, prov_dh_key_cb)) {
   16d9c:	4910      	ldr	r1, [pc, #64]	; (16de0 <send_pub_key+0xdc>)
   16d9e:	9801      	ldr	r0, [sp, #4]
   16da0:	f7f1 fba8 	bl	84f4 <bt_dh_key_gen>
   16da4:	b178      	cbz	r0, 16dc6 <send_pub_key+0xc2>
		BT_ERR("Failed to generate DHKey");
   16da6:	2301      	movs	r3, #1
   16da8:	f04f 0100 	mov.w	r1, #0
   16dac:	f363 0107 	bfi	r1, r3, #0, #8
   16db0:	4a07      	ldr	r2, [pc, #28]	; (16dd0 <send_pub_key+0xcc>)
   16db2:	4b08      	ldr	r3, [pc, #32]	; (16dd4 <send_pub_key+0xd0>)
   16db4:	480b      	ldr	r0, [pc, #44]	; (16de4 <send_pub_key+0xe0>)
   16db6:	1a9b      	subs	r3, r3, r2
   16db8:	08db      	lsrs	r3, r3, #3
   16dba:	f363 118f 	bfi	r1, r3, #6, #10
   16dbe:	f009 ff21 	bl	20c04 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   16dc2:	2007      	movs	r0, #7
   16dc4:	e7b9      	b.n	16d3a <send_pub_key+0x36>
	link.expect = PROV_CONFIRM;
   16dc6:	2305      	movs	r3, #5
   16dc8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   16dcc:	e7b7      	b.n	16d3e <send_pub_key+0x3a>
   16dce:	bf00      	nop
   16dd0:	00025880 	.word	0x00025880
   16dd4:	00025950 	.word	0x00025950
   16dd8:	0002bbbd 	.word	0x0002bbbd
   16ddc:	200003c8 	.word	0x200003c8
   16de0:	0001766d 	.word	0x0001766d
   16de4:	0002bbd5 	.word	0x0002bbd5

00016de8 <prov_pub_key>:
{
   16de8:	b508      	push	{r3, lr}
	memcpy(&link.conf_inputs[17], data, 64);
   16dea:	4601      	mov	r1, r0
   16dec:	2240      	movs	r2, #64	; 0x40
   16dee:	4810      	ldr	r0, [pc, #64]	; (16e30 <prov_pub_key+0x48>)
   16df0:	f00b f849 	bl	21e86 <memcpy>
	if (!atomic_test_bit(link.flags, LOCAL_PUB_KEY)) {
   16df4:	2001      	movs	r0, #1
   16df6:	f7ff fcaf 	bl	16758 <atomic_test_bit.constprop.26>
   16dfa:	b9a8      	cbnz	r0, 16e28 <prov_pub_key+0x40>
		prov_clear_tx();
   16dfc:	f7ff fa16 	bl	1622c <prov_clear_tx>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16e00:	2101      	movs	r1, #1
   16e02:	480c      	ldr	r0, [pc, #48]	; (16e34 <prov_pub_key+0x4c>)
   16e04:	f00d f939 	bl	2407a <atomic_or>
		BT_WARN("Waiting for local public key");
   16e08:	2302      	movs	r3, #2
   16e0a:	f04f 0100 	mov.w	r1, #0
   16e0e:	f363 0107 	bfi	r1, r3, #0, #8
   16e12:	4a09      	ldr	r2, [pc, #36]	; (16e38 <prov_pub_key+0x50>)
   16e14:	4b09      	ldr	r3, [pc, #36]	; (16e3c <prov_pub_key+0x54>)
   16e16:	480a      	ldr	r0, [pc, #40]	; (16e40 <prov_pub_key+0x58>)
   16e18:	1a9b      	subs	r3, r3, r2
   16e1a:	08db      	lsrs	r3, r3, #3
   16e1c:	f363 118f 	bfi	r1, r3, #6, #10
}
   16e20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Waiting for local public key");
   16e24:	f009 beee 	b.w	20c04 <log_0>
}
   16e28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_pub_key();
   16e2c:	f7ff bf6a 	b.w	16d04 <send_pub_key>
   16e30:	20000455 	.word	0x20000455
   16e34:	200003c8 	.word	0x200003c8
   16e38:	00025880 	.word	0x00025880
   16e3c:	00025950 	.word	0x00025950
   16e40:	0002b99e 	.word	0x0002b99e

00016e44 <pub_key_ready>:
{
   16e44:	b508      	push	{r3, lr}
	if (!pkey) {
   16e46:	b978      	cbnz	r0, 16e68 <pub_key_ready+0x24>
		BT_WARN("Public key not available");
   16e48:	2302      	movs	r3, #2
   16e4a:	f04f 0100 	mov.w	r1, #0
   16e4e:	f363 0107 	bfi	r1, r3, #0, #8
   16e52:	4a0c      	ldr	r2, [pc, #48]	; (16e84 <pub_key_ready+0x40>)
   16e54:	4b0c      	ldr	r3, [pc, #48]	; (16e88 <pub_key_ready+0x44>)
   16e56:	480d      	ldr	r0, [pc, #52]	; (16e8c <pub_key_ready+0x48>)
   16e58:	1a9b      	subs	r3, r3, r2
   16e5a:	08db      	lsrs	r3, r3, #3
   16e5c:	f363 118f 	bfi	r1, r3, #6, #10
}
   16e60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Public key not available");
   16e64:	f009 bece 	b.w	20c04 <log_0>
   16e68:	2102      	movs	r1, #2
   16e6a:	4809      	ldr	r0, [pc, #36]	; (16e90 <pub_key_ready+0x4c>)
   16e6c:	f00d f905 	bl	2407a <atomic_or>
	if (atomic_test_and_clear_bit(link.flags, REMOTE_PUB_KEY)) {
   16e70:	2000      	movs	r0, #0
   16e72:	f7ff fc8f 	bl	16794 <atomic_test_and_clear_bit.constprop.24>
   16e76:	b118      	cbz	r0, 16e80 <pub_key_ready+0x3c>
}
   16e78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_pub_key();
   16e7c:	f7ff bf42 	b.w	16d04 <send_pub_key>
}
   16e80:	bd08      	pop	{r3, pc}
   16e82:	bf00      	nop
   16e84:	00025880 	.word	0x00025880
   16e88:	00025950 	.word	0x00025950
   16e8c:	0002baf0 	.word	0x0002baf0
   16e90:	200003c8 	.word	0x200003c8

00016e94 <prov_random>:
{
   16e94:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
   16e96:	4c41      	ldr	r4, [pc, #260]	; (16f9c <prov_random+0x108>)
{
   16e98:	b099      	sub	sp, #100	; 0x64
	PROV_BUF(rnd, 16);
   16e9a:	ab0c      	add	r3, sp, #48	; 0x30
   16e9c:	f44f 12a8 	mov.w	r2, #1376256	; 0x150000
   16ea0:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
   16ea4:	4607      	mov	r7, r0
	PROV_BUF(rnd, 16);
   16ea6:	9301      	str	r3, [sp, #4]
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
   16ea8:	4601      	mov	r1, r0
   16eaa:	ab04      	add	r3, sp, #16
   16eac:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   16eb0:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   16eb4:	f00c fd5a 	bl	2396c <bt_mesh_prov_conf>
   16eb8:	b178      	cbz	r0, 16eda <prov_random+0x46>
		BT_ERR("Unable to calculate confirmation verification");
   16eba:	2301      	movs	r3, #1
   16ebc:	f04f 0100 	mov.w	r1, #0
   16ec0:	f363 0107 	bfi	r1, r3, #0, #8
   16ec4:	4a36      	ldr	r2, [pc, #216]	; (16fa0 <prov_random+0x10c>)
   16ec6:	4b37      	ldr	r3, [pc, #220]	; (16fa4 <prov_random+0x110>)
   16ec8:	4837      	ldr	r0, [pc, #220]	; (16fa8 <prov_random+0x114>)
   16eca:	1a9b      	subs	r3, r3, r2
   16ecc:	08db      	lsrs	r3, r3, #3
   16ece:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Failed to generate provisioning salt");
   16ed2:	f009 fe97 	bl	20c04 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   16ed6:	2007      	movs	r0, #7
   16ed8:	e016      	b.n	16f08 <prov_random+0x74>
	if (memcmp(conf_verify, link.conf, 16)) {
   16eda:	2210      	movs	r2, #16
   16edc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   16ee0:	eb0d 0002 	add.w	r0, sp, r2
   16ee4:	f00a ffa8 	bl	21e38 <memcmp>
   16ee8:	b190      	cbz	r0, 16f10 <prov_random+0x7c>
		BT_ERR("Invalid confirmation value");
   16eea:	2301      	movs	r3, #1
   16eec:	f04f 0100 	mov.w	r1, #0
   16ef0:	f363 0107 	bfi	r1, r3, #0, #8
   16ef4:	4a2a      	ldr	r2, [pc, #168]	; (16fa0 <prov_random+0x10c>)
   16ef6:	4b2b      	ldr	r3, [pc, #172]	; (16fa4 <prov_random+0x110>)
   16ef8:	482c      	ldr	r0, [pc, #176]	; (16fac <prov_random+0x118>)
   16efa:	1a9b      	subs	r3, r3, r2
   16efc:	08db      	lsrs	r3, r3, #3
   16efe:	f363 118f 	bfi	r1, r3, #6, #10
   16f02:	f009 fe7f 	bl	20c04 <log_0>
		close_link(PROV_ERR_CFM_FAILED, CLOSE_REASON_FAILED);
   16f06:	2004      	movs	r0, #4
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   16f08:	f7ff fe60 	bl	16bcc <close_link.constprop.22>
}
   16f0c:	b019      	add	sp, #100	; 0x64
   16f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	prov_buf_init(&rnd, PROV_RANDOM);
   16f10:	2106      	movs	r1, #6
   16f12:	a801      	add	r0, sp, #4
	net_buf_simple_add_mem(&rnd, link.rand, 16);
   16f14:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	prov_buf_init(&rnd, PROV_RANDOM);
   16f18:	f00d f8a3 	bl	24062 <prov_buf_init>
	net_buf_simple_add_mem(&rnd, link.rand, 16);
   16f1c:	4631      	mov	r1, r6
   16f1e:	2210      	movs	r2, #16
   16f20:	a801      	add	r0, sp, #4
   16f22:	f00d fed9 	bl	24cd8 <net_buf_simple_add_mem>
	if (prov_send(&rnd)) {
   16f26:	a801      	add	r0, sp, #4
   16f28:	f7ff f9f0 	bl	1630c <prov_send>
   16f2c:	4601      	mov	r1, r0
   16f2e:	b178      	cbz	r0, 16f50 <prov_random+0xbc>
		BT_ERR("Failed to send Provisioning Random");
   16f30:	2301      	movs	r3, #1
   16f32:	f04f 0100 	mov.w	r1, #0
   16f36:	f363 0107 	bfi	r1, r3, #0, #8
   16f3a:	4a19      	ldr	r2, [pc, #100]	; (16fa0 <prov_random+0x10c>)
   16f3c:	4b19      	ldr	r3, [pc, #100]	; (16fa4 <prov_random+0x110>)
   16f3e:	481c      	ldr	r0, [pc, #112]	; (16fb0 <prov_random+0x11c>)
   16f40:	1a9b      	subs	r3, r3, r2
   16f42:	08db      	lsrs	r3, r3, #3
   16f44:	f363 118f 	bfi	r1, r3, #6, #10
   16f48:	f009 fe5c 	bl	20c04 <log_0>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   16f4c:	2005      	movs	r0, #5
   16f4e:	e7db      	b.n	16f08 <prov_random+0x74>
static inline int bt_mesh_prov_salt(const u8_t conf_salt[16],
				    const u8_t prov_rand[16],
				    const u8_t dev_rand[16],
				    u8_t prov_salt[16])
{
	const u8_t prov_salt_key[16] = { 0 };
   16f50:	2510      	movs	r5, #16
   16f52:	462a      	mov	r2, r5
   16f54:	a808      	add	r0, sp, #32
   16f56:	f00a ffc0 	bl	21eda <memset>
	struct bt_mesh_sg sg[] = {
   16f5a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   16f5e:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   16f62:	2203      	movs	r2, #3
   16f64:	f204 130d 	addw	r3, r4, #269	; 0x10d
   16f68:	a912      	add	r1, sp, #72	; 0x48
   16f6a:	a808      	add	r0, sp, #32
	struct bt_mesh_sg sg[] = {
   16f6c:	e9cd 7514 	strd	r7, r5, [sp, #80]	; 0x50
   16f70:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   16f74:	f00c fb38 	bl	235e8 <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(link.conf_salt, data, link.rand,
   16f78:	b160      	cbz	r0, 16f94 <prov_random+0x100>
		BT_ERR("Failed to generate provisioning salt");
   16f7a:	2301      	movs	r3, #1
   16f7c:	f04f 0100 	mov.w	r1, #0
   16f80:	f363 0107 	bfi	r1, r3, #0, #8
   16f84:	4a06      	ldr	r2, [pc, #24]	; (16fa0 <prov_random+0x10c>)
   16f86:	4b07      	ldr	r3, [pc, #28]	; (16fa4 <prov_random+0x110>)
   16f88:	480a      	ldr	r0, [pc, #40]	; (16fb4 <prov_random+0x120>)
   16f8a:	1a9b      	subs	r3, r3, r2
   16f8c:	08db      	lsrs	r3, r3, #3
   16f8e:	f363 118f 	bfi	r1, r3, #6, #10
   16f92:	e79e      	b.n	16ed2 <prov_random+0x3e>
	link.expect = PROV_DATA;
   16f94:	2307      	movs	r3, #7
   16f96:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   16f9a:	e7b7      	b.n	16f0c <prov_random+0x78>
   16f9c:	200003c8 	.word	0x200003c8
   16fa0:	00025880 	.word	0x00025880
   16fa4:	00025950 	.word	0x00025950
   16fa8:	0002b9bb 	.word	0x0002b9bb
   16fac:	0002b9e9 	.word	0x0002b9e9
   16fb0:	0002ba04 	.word	0x0002ba04
   16fb4:	0002ba27 	.word	0x0002ba27

00016fb8 <prov_data>:
{
   16fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   16fbc:	4c5e      	ldr	r4, [pc, #376]	; (17138 <prov_data+0x180>)
   16fbe:	b09b      	sub	sp, #108	; 0x6c
	PROV_BUF(msg, 1);
   16fc0:	ab02      	add	r3, sp, #8
   16fc2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   16fc6:	ad0b      	add	r5, sp, #44	; 0x2c
   16fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   16fcc:	4606      	mov	r6, r0
	PROV_BUF(msg, 1);
   16fce:	9304      	str	r3, [sp, #16]
   16fd0:	9500      	str	r5, [sp, #0]
   16fd2:	4b5a      	ldr	r3, [pc, #360]	; (1713c <prov_data+0x184>)
   16fd4:	f204 120d 	addw	r2, r4, #269	; 0x10d
   16fd8:	2120      	movs	r1, #32
   16fda:	f104 0008 	add.w	r0, r4, #8
   16fde:	f00c fb46 	bl	2366e <bt_mesh_k1>
	if (err) {
   16fe2:	b178      	cbz	r0, 17004 <prov_data+0x4c>
		BT_ERR("Unable to generate session key");
   16fe4:	2301      	movs	r3, #1
   16fe6:	f04f 0100 	mov.w	r1, #0
   16fea:	f363 0107 	bfi	r1, r3, #0, #8
   16fee:	4a54      	ldr	r2, [pc, #336]	; (17140 <prov_data+0x188>)
   16ff0:	4b54      	ldr	r3, [pc, #336]	; (17144 <prov_data+0x18c>)
   16ff2:	4855      	ldr	r0, [pc, #340]	; (17148 <prov_data+0x190>)
   16ff4:	1a9b      	subs	r3, r3, r2
   16ff6:	08db      	lsrs	r3, r3, #3
   16ff8:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to generate session nonce");
   16ffc:	f009 fe02 	bl	20c04 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   17000:	2007      	movs	r0, #7
   17002:	e029      	b.n	17058 <prov_data+0xa0>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   17004:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   17008:	f8cd 8000 	str.w	r8, [sp]
   1700c:	4b4f      	ldr	r3, [pc, #316]	; (1714c <prov_data+0x194>)
   1700e:	f204 120d 	addw	r2, r4, #269	; 0x10d
   17012:	2120      	movs	r1, #32
   17014:	f104 0008 	add.w	r0, r4, #8
   17018:	f00c fb29 	bl	2366e <bt_mesh_k1>
	if (!err) {
   1701c:	2800      	cmp	r0, #0
   1701e:	d17d      	bne.n	1711c <prov_data+0x164>
		memcpy(nonce, tmp + 3, 13);
   17020:	220d      	movs	r2, #13
   17022:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
   17026:	a807      	add	r0, sp, #28
   17028:	f00a ff2d 	bl	21e86 <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   1702c:	4643      	mov	r3, r8
   1702e:	4632      	mov	r2, r6
   17030:	a907      	add	r1, sp, #28
   17032:	4628      	mov	r0, r5
   17034:	f00c fca7 	bl	23986 <bt_mesh_prov_decrypt>
	if (err) {
   17038:	b188      	cbz	r0, 1705e <prov_data+0xa6>
		BT_ERR("Unable to decrypt provisioning data");
   1703a:	2301      	movs	r3, #1
   1703c:	f04f 0100 	mov.w	r1, #0
   17040:	f363 0107 	bfi	r1, r3, #0, #8
   17044:	4a3e      	ldr	r2, [pc, #248]	; (17140 <prov_data+0x188>)
   17046:	4b3f      	ldr	r3, [pc, #252]	; (17144 <prov_data+0x18c>)
   17048:	4841      	ldr	r0, [pc, #260]	; (17150 <prov_data+0x198>)
   1704a:	1a9b      	subs	r3, r3, r2
   1704c:	08db      	lsrs	r3, r3, #3
   1704e:	f363 118f 	bfi	r1, r3, #6, #10
   17052:	f009 fdd7 	bl	20c04 <log_0>
		close_link(PROV_ERR_DECRYPT, CLOSE_REASON_FAILED);
   17056:	2006      	movs	r0, #6
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   17058:	f7ff fdb8 	bl	16bcc <close_link.constprop.22>
		return;
   1705c:	e056      	b.n	1710c <prov_data+0x154>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   1705e:	af0f      	add	r7, sp, #60	; 0x3c
   17060:	9700      	str	r7, [sp, #0]
   17062:	4b3c      	ldr	r3, [pc, #240]	; (17154 <prov_data+0x19c>)
   17064:	f204 120d 	addw	r2, r4, #269	; 0x10d
   17068:	2120      	movs	r1, #32
   1706a:	f104 0008 	add.w	r0, r4, #8
   1706e:	f00c fafe 	bl	2366e <bt_mesh_k1>
	if (err) {
   17072:	4683      	mov	fp, r0
   17074:	b160      	cbz	r0, 17090 <prov_data+0xd8>
		BT_ERR("Unable to generate device key");
   17076:	2301      	movs	r3, #1
   17078:	f04f 0100 	mov.w	r1, #0
   1707c:	f363 0107 	bfi	r1, r3, #0, #8
   17080:	4a2f      	ldr	r2, [pc, #188]	; (17140 <prov_data+0x188>)
   17082:	4b30      	ldr	r3, [pc, #192]	; (17144 <prov_data+0x18c>)
   17084:	4834      	ldr	r0, [pc, #208]	; (17158 <prov_data+0x1a0>)
   17086:	1a9b      	subs	r3, r3, r2
   17088:	08db      	lsrs	r3, r3, #3
   1708a:	f363 118f 	bfi	r1, r3, #6, #10
   1708e:	e7b5      	b.n	16ffc <prov_data+0x44>
	return ((u16_t)src[0] << 8) | src[1];
   17090:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   17094:	f89d 905d 	ldrb.w	r9, [sp, #93]	; 0x5d
   17098:	f89d 505f 	ldrb.w	r5, [sp, #95]	; 0x5f
   1709c:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   170a0:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
	flags = pdu[18];
   170a4:	f89d a05e 	ldrb.w	sl, [sp, #94]	; 0x5e
   170a8:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
   170ac:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   170b0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   170b4:	f89d 5062 	ldrb.w	r5, [sp, #98]	; 0x62
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   170b8:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
   170bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
   170c0:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
	prov_buf_init(&msg, PROV_COMPLETE);
   170c4:	2108      	movs	r1, #8
   170c6:	a804      	add	r0, sp, #16
   170c8:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
   170cc:	f00c ffc9 	bl	24062 <prov_buf_init>
	prov_send(&msg);
   170d0:	a804      	add	r0, sp, #16
   170d2:	f7ff f91b 	bl	1630c <prov_send>
	link.expect = 0U;
   170d6:	f884 b028 	strb.w	fp, [r4, #40]	; 0x28
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   170da:	4649      	mov	r1, r9
	return !!link.conn;
   170dc:	6864      	ldr	r4, [r4, #4]
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   170de:	462b      	mov	r3, r5
   170e0:	e9cd 6700 	strd	r6, r7, [sp]
   170e4:	4652      	mov	r2, sl
   170e6:	4640      	mov	r0, r8
   170e8:	f7f3 fe54 	bl	ad94 <bt_mesh_provision>
	if (err) {
   170ec:	4601      	mov	r1, r0
   170ee:	b180      	cbz	r0, 17112 <prov_data+0x15a>
		BT_ERR("Failed to provision (err %d)", err);
   170f0:	2301      	movs	r3, #1
   170f2:	f04f 0200 	mov.w	r2, #0
   170f6:	f363 0207 	bfi	r2, r3, #0, #8
   170fa:	4811      	ldr	r0, [pc, #68]	; (17140 <prov_data+0x188>)
   170fc:	4b11      	ldr	r3, [pc, #68]	; (17144 <prov_data+0x18c>)
   170fe:	1a1b      	subs	r3, r3, r0
   17100:	08db      	lsrs	r3, r3, #3
   17102:	f363 128f 	bfi	r2, r3, #6, #10
   17106:	4815      	ldr	r0, [pc, #84]	; (1715c <prov_data+0x1a4>)
   17108:	f009 fd89 	bl	20c1e <log_1>
}
   1710c:	b01b      	add	sp, #108	; 0x6c
   1710e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) && identity_enable) {
   17112:	2c00      	cmp	r4, #0
   17114:	d0fa      	beq.n	1710c <prov_data+0x154>
		bt_mesh_proxy_identity_enable();
   17116:	f000 ff4d 	bl	17fb4 <bt_mesh_proxy_identity_enable>
   1711a:	e7f7      	b.n	1710c <prov_data+0x154>
		BT_ERR("Unable to generate session nonce");
   1711c:	2301      	movs	r3, #1
   1711e:	f04f 0100 	mov.w	r1, #0
   17122:	f363 0107 	bfi	r1, r3, #0, #8
   17126:	4a06      	ldr	r2, [pc, #24]	; (17140 <prov_data+0x188>)
   17128:	4b06      	ldr	r3, [pc, #24]	; (17144 <prov_data+0x18c>)
   1712a:	480d      	ldr	r0, [pc, #52]	; (17160 <prov_data+0x1a8>)
   1712c:	1a9b      	subs	r3, r3, r2
   1712e:	08db      	lsrs	r3, r3, #3
   17130:	f363 118f 	bfi	r1, r3, #6, #10
   17134:	e762      	b.n	16ffc <prov_data+0x44>
   17136:	bf00      	nop
   17138:	200003c8 	.word	0x200003c8
   1713c:	0002b8a0 	.word	0x0002b8a0
   17140:	00025880 	.word	0x00025880
   17144:	00025950 	.word	0x00025950
   17148:	0002b8a5 	.word	0x0002b8a5
   1714c:	0002b8c4 	.word	0x0002b8c4
   17150:	0002b8c9 	.word	0x0002b8c9
   17154:	0002b8ed 	.word	0x0002b8ed
   17158:	0002b8f2 	.word	0x0002b8f2
   1715c:	0002b910 	.word	0x0002b910
   17160:	0002b92d 	.word	0x0002b92d

00017164 <prov_msg_recv>:
{
   17164:	b570      	push	{r4, r5, r6, lr}
	u8_t type = link.rx.buf->data[0];
   17166:	4c3b      	ldr	r4, [pc, #236]	; (17254 <prov_msg_recv+0xf0>)
   17168:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   1716c:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
	u8_t type = link.rx.buf->data[0];
   17170:	6803      	ldr	r3, [r0, #0]
   17172:	781d      	ldrb	r5, [r3, #0]
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   17174:	f7f7 ff8e 	bl	f094 <bt_mesh_fcs_check>
   17178:	4626      	mov	r6, r4
   1717a:	b978      	cbnz	r0, 1719c <prov_msg_recv+0x38>
		BT_ERR("Incorrect FCS");
   1717c:	2301      	movs	r3, #1
   1717e:	f04f 0100 	mov.w	r1, #0
   17182:	f363 0107 	bfi	r1, r3, #0, #8
   17186:	4a34      	ldr	r2, [pc, #208]	; (17258 <prov_msg_recv+0xf4>)
   17188:	4b34      	ldr	r3, [pc, #208]	; (1725c <prov_msg_recv+0xf8>)
   1718a:	4835      	ldr	r0, [pc, #212]	; (17260 <prov_msg_recv+0xfc>)
   1718c:	1a9b      	subs	r3, r3, r2
   1718e:	08db      	lsrs	r3, r3, #3
   17190:	f363 118f 	bfi	r1, r3, #6, #10
}
   17194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Incorrect FCS");
   17198:	f009 bd34 	b.w	20c04 <log_0>
	gen_prov_ack_send(link.rx.id);
   1719c:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
   171a0:	f7ff f99a 	bl	164d8 <gen_prov_ack_send>
	link.rx.prev_id = link.rx.id;
   171a4:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   171a8:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (type != PROV_FAILED && type != link.expect) {
   171ac:	2d09      	cmp	r5, #9
	link.rx.id = 0U;
   171ae:	f04f 0300 	mov.w	r3, #0
   171b2:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	if (type != PROV_FAILED && type != link.expect) {
   171b6:	d02b      	beq.n	17210 <prov_msg_recv+0xac>
   171b8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   171bc:	42a9      	cmp	r1, r5
   171be:	d012      	beq.n	171e6 <prov_msg_recv+0x82>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, link.expect);
   171c0:	2202      	movs	r2, #2
   171c2:	f362 0307 	bfi	r3, r2, #0, #8
   171c6:	4824      	ldr	r0, [pc, #144]	; (17258 <prov_msg_recv+0xf4>)
   171c8:	4a24      	ldr	r2, [pc, #144]	; (1725c <prov_msg_recv+0xf8>)
   171ca:	1a12      	subs	r2, r2, r0
   171cc:	08d2      	lsrs	r2, r2, #3
   171ce:	f362 138f 	bfi	r3, r2, #6, #10
   171d2:	4824      	ldr	r0, [pc, #144]	; (17264 <prov_msg_recv+0x100>)
   171d4:	460a      	mov	r2, r1
   171d6:	4629      	mov	r1, r5
   171d8:	f009 fd35 	bl	20c46 <log_2>
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
   171dc:	2003      	movs	r0, #3
}
   171de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
   171e2:	f00c bf59 	b.w	24098 <prov_send_fail_msg>
	if (type >= ARRAY_SIZE(prov_handlers)) {
   171e6:	2909      	cmp	r1, #9
   171e8:	d912      	bls.n	17210 <prov_msg_recv+0xac>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   171ea:	2301      	movs	r3, #1
   171ec:	f04f 0200 	mov.w	r2, #0
   171f0:	f363 0207 	bfi	r2, r3, #0, #8
   171f4:	4818      	ldr	r0, [pc, #96]	; (17258 <prov_msg_recv+0xf4>)
   171f6:	4b19      	ldr	r3, [pc, #100]	; (1725c <prov_msg_recv+0xf8>)
   171f8:	1a1b      	subs	r3, r3, r0
   171fa:	08db      	lsrs	r3, r3, #3
   171fc:	481a      	ldr	r0, [pc, #104]	; (17268 <prov_msg_recv+0x104>)
   171fe:	f363 128f 	bfi	r2, r3, #6, #10
   17202:	f009 fd0c 	bl	20c1e <log_1>
		close_link(PROV_ERR_NVAL_PDU, CLOSE_REASON_FAILED);
   17206:	2001      	movs	r0, #1
}
   17208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   1720c:	f7ff bcde 	b.w	16bcc <close_link.constprop.22>
	if (1 + prov_handlers[type].len != link.rx.buf->len) {
   17210:	4a16      	ldr	r2, [pc, #88]	; (1726c <prov_msg_recv+0x108>)
   17212:	f8d6 012c 	ldr.w	r0, [r6, #300]	; 0x12c
   17216:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
   1721a:	8881      	ldrh	r1, [r0, #4]
   1721c:	889b      	ldrh	r3, [r3, #4]
   1721e:	3301      	adds	r3, #1
   17220:	428b      	cmp	r3, r1
   17222:	d010      	beq.n	17246 <prov_msg_recv+0xe2>
		BT_ERR("Invalid length %u for type 0x%02x",
   17224:	2201      	movs	r2, #1
   17226:	f04f 0300 	mov.w	r3, #0
   1722a:	f362 0307 	bfi	r3, r2, #0, #8
   1722e:	480a      	ldr	r0, [pc, #40]	; (17258 <prov_msg_recv+0xf4>)
   17230:	4a0a      	ldr	r2, [pc, #40]	; (1725c <prov_msg_recv+0xf8>)
   17232:	1a12      	subs	r2, r2, r0
   17234:	08d2      	lsrs	r2, r2, #3
   17236:	f362 138f 	bfi	r3, r2, #6, #10
   1723a:	480d      	ldr	r0, [pc, #52]	; (17270 <prov_msg_recv+0x10c>)
   1723c:	462a      	mov	r2, r5
   1723e:	f009 fd02 	bl	20c46 <log_2>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   17242:	2002      	movs	r0, #2
   17244:	e7e0      	b.n	17208 <prov_msg_recv+0xa4>
	prov_handlers[type].func(&link.rx.buf->data[1]);
   17246:	6800      	ldr	r0, [r0, #0]
   17248:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
   1724c:	3001      	adds	r0, #1
}
   1724e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prov_handlers[type].func(&link.rx.buf->data[1]);
   17252:	4718      	bx	r3
   17254:	200003c8 	.word	0x200003c8
   17258:	00025880 	.word	0x00025880
   1725c:	00025950 	.word	0x00025950
   17260:	0002b990 	.word	0x0002b990
   17264:	0002b64d 	.word	0x0002b64d
   17268:	0002b66d 	.word	0x0002b66d
   1726c:	000262c8 	.word	0x000262c8
   17270:	0002b692 	.word	0x0002b692

00017274 <gen_prov_cont>:
{
   17274:	b570      	push	{r4, r5, r6, lr}
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
   17276:	4b4c      	ldr	r3, [pc, #304]	; (173a8 <gen_prov_cont+0x134>)
{
   17278:	4604      	mov	r4, r0
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
   1727a:	f893 0126 	ldrb.w	r0, [r3, #294]	; 0x126
{
   1727e:	460e      	mov	r6, r1
   17280:	461d      	mov	r5, r3
   17282:	7921      	ldrb	r1, [r4, #4]
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
   17284:	b9b0      	cbnz	r0, 172b4 <gen_prov_cont+0x40>
   17286:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
   1728a:	428b      	cmp	r3, r1
   1728c:	d112      	bne.n	172b4 <gen_prov_cont+0x40>
		BT_WARN("Resending ack");
   1728e:	2302      	movs	r3, #2
   17290:	f04f 0100 	mov.w	r1, #0
   17294:	f363 0107 	bfi	r1, r3, #0, #8
   17298:	4a44      	ldr	r2, [pc, #272]	; (173ac <gen_prov_cont+0x138>)
   1729a:	4b45      	ldr	r3, [pc, #276]	; (173b0 <gen_prov_cont+0x13c>)
   1729c:	4845      	ldr	r0, [pc, #276]	; (173b4 <gen_prov_cont+0x140>)
   1729e:	1a9b      	subs	r3, r3, r2
   172a0:	08db      	lsrs	r3, r3, #3
   172a2:	f363 118f 	bfi	r1, r3, #6, #10
   172a6:	f009 fcad 	bl	20c04 <log_0>
		gen_prov_ack_send(rx->xact_id);
   172aa:	7920      	ldrb	r0, [r4, #4]
}
   172ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gen_prov_ack_send(rx->xact_id);
   172b0:	f7ff b912 	b.w	164d8 <gen_prov_ack_send>
	if (rx->xact_id != link.rx.id) {
   172b4:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
   172b8:	428a      	cmp	r2, r1
   172ba:	d00f      	beq.n	172dc <gen_prov_cont+0x68>
		BT_WARN("Data for unknown transaction (%u != %u)",
   172bc:	2002      	movs	r0, #2
   172be:	f04f 0300 	mov.w	r3, #0
   172c2:	f360 0307 	bfi	r3, r0, #0, #8
   172c6:	4c39      	ldr	r4, [pc, #228]	; (173ac <gen_prov_cont+0x138>)
   172c8:	4839      	ldr	r0, [pc, #228]	; (173b0 <gen_prov_cont+0x13c>)
   172ca:	1b00      	subs	r0, r0, r4
   172cc:	08c0      	lsrs	r0, r0, #3
   172ce:	f360 138f 	bfi	r3, r0, #6, #10
}
   172d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Data for unknown transaction (%u != %u)",
   172d6:	4838      	ldr	r0, [pc, #224]	; (173b8 <gen_prov_cont+0x144>)
   172d8:	f009 bcb5 	b.w	20c46 <log_2>
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
   172dc:	7964      	ldrb	r4, [r4, #5]
	if (seg > link.rx.last_seg) {
   172de:	f895 3127 	ldrb.w	r3, [r5, #295]	; 0x127
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
   172e2:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
   172e4:	42a3      	cmp	r3, r4
   172e6:	d213      	bcs.n	17310 <gen_prov_cont+0x9c>
		BT_ERR("Invalid segment index %u", seg);
   172e8:	2301      	movs	r3, #1
   172ea:	f04f 0200 	mov.w	r2, #0
   172ee:	f363 0207 	bfi	r2, r3, #0, #8
   172f2:	492e      	ldr	r1, [pc, #184]	; (173ac <gen_prov_cont+0x138>)
   172f4:	4b2e      	ldr	r3, [pc, #184]	; (173b0 <gen_prov_cont+0x13c>)
   172f6:	4831      	ldr	r0, [pc, #196]	; (173bc <gen_prov_cont+0x148>)
   172f8:	1a5b      	subs	r3, r3, r1
   172fa:	08db      	lsrs	r3, r3, #3
   172fc:	f363 128f 	bfi	r2, r3, #6, #10
   17300:	4621      	mov	r1, r4
   17302:	f009 fc8c 	bl	20c1e <log_1>
			close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   17306:	2002      	movs	r0, #2
}
   17308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   1730c:	f7ff bc5e 	b.w	16bcc <close_link.constprop.22>
	} else if (seg == link.rx.last_seg) {
   17310:	d11d      	bne.n	1734e <gen_prov_cont+0xda>
		expect_len = (link.rx.buf->len - 20 -
   17312:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
   17316:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
   1731a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1731e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   17322:	7911      	ldrb	r1, [r2, #4]
		if (expect_len != buf->len) {
   17324:	88b2      	ldrh	r2, [r6, #4]
		expect_len = (link.rx.buf->len - 20 -
   17326:	440b      	add	r3, r1
   17328:	3303      	adds	r3, #3
   1732a:	b2d9      	uxtb	r1, r3
		if (expect_len != buf->len) {
   1732c:	4291      	cmp	r1, r2
   1732e:	d00e      	beq.n	1734e <gen_prov_cont+0xda>
			BT_ERR("Incorrect last seg len: %u != %u",
   17330:	2001      	movs	r0, #1
   17332:	f04f 0300 	mov.w	r3, #0
   17336:	f360 0307 	bfi	r3, r0, #0, #8
   1733a:	4c1c      	ldr	r4, [pc, #112]	; (173ac <gen_prov_cont+0x138>)
   1733c:	481c      	ldr	r0, [pc, #112]	; (173b0 <gen_prov_cont+0x13c>)
   1733e:	1b00      	subs	r0, r0, r4
   17340:	08c0      	lsrs	r0, r0, #3
   17342:	f360 138f 	bfi	r3, r0, #6, #10
   17346:	481e      	ldr	r0, [pc, #120]	; (173c0 <gen_prov_cont+0x14c>)
   17348:	f009 fc7d 	bl	20c46 <log_2>
   1734c:	e7db      	b.n	17306 <gen_prov_cont+0x92>
	if (!(link.rx.seg & BIT(seg))) {
   1734e:	40e0      	lsrs	r0, r4
   17350:	07c3      	lsls	r3, r0, #31
   17352:	d40f      	bmi.n	17374 <gen_prov_cont+0x100>
		BT_WARN("Ignoring already received segment");
   17354:	2302      	movs	r3, #2
   17356:	f04f 0100 	mov.w	r1, #0
   1735a:	f363 0107 	bfi	r1, r3, #0, #8
   1735e:	4a13      	ldr	r2, [pc, #76]	; (173ac <gen_prov_cont+0x138>)
   17360:	4b13      	ldr	r3, [pc, #76]	; (173b0 <gen_prov_cont+0x13c>)
   17362:	4818      	ldr	r0, [pc, #96]	; (173c4 <gen_prov_cont+0x150>)
   17364:	1a9b      	subs	r3, r3, r2
   17366:	08db      	lsrs	r3, r3, #3
   17368:	f363 118f 	bfi	r1, r3, #6, #10
}
   1736c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("Ignoring already received segment");
   17370:	f009 bc48 	b.w	20c04 <log_0>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   17374:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
   17378:	6831      	ldr	r1, [r6, #0]
   1737a:	1e60      	subs	r0, r4, #1
   1737c:	2317      	movs	r3, #23
   1737e:	4343      	muls	r3, r0
   17380:	6810      	ldr	r0, [r2, #0]
   17382:	88b2      	ldrh	r2, [r6, #4]
   17384:	3314      	adds	r3, #20
   17386:	4418      	add	r0, r3
   17388:	f00a fd7d 	bl	21e86 <memcpy>
	XACT_SEG_RECV(seg);
   1738c:	2301      	movs	r3, #1
   1738e:	40a3      	lsls	r3, r4
   17390:	f895 4126 	ldrb.w	r4, [r5, #294]	; 0x126
   17394:	ea24 0403 	bic.w	r4, r4, r3
   17398:	f885 4126 	strb.w	r4, [r5, #294]	; 0x126
	if (!link.rx.seg) {
   1739c:	b91c      	cbnz	r4, 173a6 <gen_prov_cont+0x132>
}
   1739e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_msg_recv();
   173a2:	f7ff bedf 	b.w	17164 <prov_msg_recv>
}
   173a6:	bd70      	pop	{r4, r5, r6, pc}
   173a8:	200003c8 	.word	0x200003c8
   173ac:	00025880 	.word	0x00025880
   173b0:	00025950 	.word	0x00025950
   173b4:	0002b6f8 	.word	0x0002b6f8
   173b8:	0002b706 	.word	0x0002b706
   173bc:	0002b72e 	.word	0x0002b72e
   173c0:	0002b747 	.word	0x0002b747
   173c4:	0002b768 	.word	0x0002b768

000173c8 <gen_prov_start>:
{
   173c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (link.rx.seg) {
   173cc:	4c48      	ldr	r4, [pc, #288]	; (174f0 <gen_prov_start+0x128>)
   173ce:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
{
   173d2:	4607      	mov	r7, r0
   173d4:	460e      	mov	r6, r1
   173d6:	4625      	mov	r5, r4
	if (link.rx.seg) {
   173d8:	b17b      	cbz	r3, 173fa <gen_prov_start+0x32>
		BT_WARN("Got Start while there are unreceived segments");
   173da:	2302      	movs	r3, #2
   173dc:	f04f 0100 	mov.w	r1, #0
   173e0:	f363 0107 	bfi	r1, r3, #0, #8
   173e4:	4a43      	ldr	r2, [pc, #268]	; (174f4 <gen_prov_start+0x12c>)
   173e6:	4b44      	ldr	r3, [pc, #272]	; (174f8 <gen_prov_start+0x130>)
   173e8:	4844      	ldr	r0, [pc, #272]	; (174fc <gen_prov_start+0x134>)
   173ea:	1a9b      	subs	r3, r3, r2
   173ec:	08db      	lsrs	r3, r3, #3
   173ee:	f363 118f 	bfi	r1, r3, #6, #10
}
   173f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Got Start while there are unreceived segments");
   173f6:	f009 bc05 	b.w	20c04 <log_0>
	if (link.rx.prev_id == rx->xact_id) {
   173fa:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
   173fe:	7903      	ldrb	r3, [r0, #4]
   17400:	429a      	cmp	r2, r3
   17402:	d112      	bne.n	1742a <gen_prov_start+0x62>
		BT_WARN("Resending ack");
   17404:	2302      	movs	r3, #2
   17406:	f04f 0100 	mov.w	r1, #0
   1740a:	f363 0107 	bfi	r1, r3, #0, #8
   1740e:	4a39      	ldr	r2, [pc, #228]	; (174f4 <gen_prov_start+0x12c>)
   17410:	4b39      	ldr	r3, [pc, #228]	; (174f8 <gen_prov_start+0x130>)
   17412:	483b      	ldr	r0, [pc, #236]	; (17500 <gen_prov_start+0x138>)
   17414:	1a9b      	subs	r3, r3, r2
   17416:	08db      	lsrs	r3, r3, #3
   17418:	f363 118f 	bfi	r1, r3, #6, #10
   1741c:	f009 fbf2 	bl	20c04 <log_0>
		gen_prov_ack_send(rx->xact_id);
   17420:	7938      	ldrb	r0, [r7, #4]
}
   17422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		gen_prov_ack_send(rx->xact_id);
   17426:	f7ff b857 	b.w	164d8 <gen_prov_ack_send>
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   1742a:	4608      	mov	r0, r1
   1742c:	f8d4 812c 	ldr.w	r8, [r4, #300]	; 0x12c
   17430:	f00d fcd9 	bl	24de6 <net_buf_simple_pull_be16>
   17434:	f8a8 0004 	strh.w	r0, [r8, #4]
	link.rx.id  = rx->xact_id;
   17438:	793b      	ldrb	r3, [r7, #4]
   1743a:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   1743e:	4630      	mov	r0, r6
   17440:	f00d fcc1 	bl	24dc6 <net_buf_simple_pull_u8>
   17444:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
	if (link.rx.buf->len < 1) {
   17448:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   1744c:	8881      	ldrh	r1, [r0, #4]
   1744e:	b961      	cbnz	r1, 1746a <gen_prov_start+0xa2>
		BT_ERR("Ignoring zero-length provisioning PDU");
   17450:	2301      	movs	r3, #1
   17452:	f363 0107 	bfi	r1, r3, #0, #8
   17456:	4a27      	ldr	r2, [pc, #156]	; (174f4 <gen_prov_start+0x12c>)
   17458:	4b27      	ldr	r3, [pc, #156]	; (174f8 <gen_prov_start+0x130>)
   1745a:	482a      	ldr	r0, [pc, #168]	; (17504 <gen_prov_start+0x13c>)
   1745c:	1a9b      	subs	r3, r3, r2
   1745e:	08db      	lsrs	r3, r3, #3
   17460:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Too small total length for multi-segment PDU");
   17464:	f009 fbce 	bl	20c04 <log_0>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   17468:	e010      	b.n	1748c <gen_prov_start+0xc4>
	if (link.rx.buf->len > link.rx.buf->size) {
   1746a:	88c3      	ldrh	r3, [r0, #6]
   1746c:	428b      	cmp	r3, r1
   1746e:	d212      	bcs.n	17496 <gen_prov_start+0xce>
		BT_ERR("Too large provisioning PDU (%u bytes)",
   17470:	2301      	movs	r3, #1
   17472:	f04f 0200 	mov.w	r2, #0
   17476:	f363 0207 	bfi	r2, r3, #0, #8
   1747a:	481e      	ldr	r0, [pc, #120]	; (174f4 <gen_prov_start+0x12c>)
   1747c:	4b1e      	ldr	r3, [pc, #120]	; (174f8 <gen_prov_start+0x130>)
   1747e:	1a1b      	subs	r3, r3, r0
   17480:	08db      	lsrs	r3, r3, #3
   17482:	f363 128f 	bfi	r2, r3, #6, #10
   17486:	4820      	ldr	r0, [pc, #128]	; (17508 <gen_prov_start+0x140>)
   17488:	f009 fbc9 	bl	20c1e <log_1>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   1748c:	2002      	movs	r0, #2
}
   1748e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   17492:	f7ff bb9b 	b.w	16bcc <close_link.constprop.22>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20) {
   17496:	797b      	ldrb	r3, [r7, #5]
   17498:	089b      	lsrs	r3, r3, #2
   1749a:	d00e      	beq.n	174ba <gen_prov_start+0xf2>
   1749c:	2914      	cmp	r1, #20
   1749e:	d80c      	bhi.n	174ba <gen_prov_start+0xf2>
		BT_ERR("Too small total length for multi-segment PDU");
   174a0:	2301      	movs	r3, #1
   174a2:	f04f 0100 	mov.w	r1, #0
   174a6:	f363 0107 	bfi	r1, r3, #0, #8
   174aa:	4a12      	ldr	r2, [pc, #72]	; (174f4 <gen_prov_start+0x12c>)
   174ac:	4b12      	ldr	r3, [pc, #72]	; (174f8 <gen_prov_start+0x130>)
   174ae:	4817      	ldr	r0, [pc, #92]	; (1750c <gen_prov_start+0x144>)
   174b0:	1a9b      	subs	r3, r3, r2
   174b2:	08db      	lsrs	r3, r3, #3
   174b4:	f363 118f 	bfi	r1, r3, #6, #10
   174b8:	e7d4      	b.n	17464 <gen_prov_start+0x9c>
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
   174ba:	1c59      	adds	r1, r3, #1
   174bc:	2201      	movs	r2, #1
   174be:	408a      	lsls	r2, r1
   174c0:	3a01      	subs	r2, #1
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   174c2:	f885 3127 	strb.w	r3, [r5, #295]	; 0x127
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
   174c6:	f885 2126 	strb.w	r2, [r5, #294]	; 0x126
	memcpy(link.rx.buf->data, buf->data, buf->len);
   174ca:	88b2      	ldrh	r2, [r6, #4]
   174cc:	6831      	ldr	r1, [r6, #0]
   174ce:	6800      	ldr	r0, [r0, #0]
   174d0:	f00a fcd9 	bl	21e86 <memcpy>
	XACT_SEG_RECV(0);
   174d4:	f895 3126 	ldrb.w	r3, [r5, #294]	; 0x126
   174d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   174dc:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
	if (!link.rx.seg) {
   174e0:	b91b      	cbnz	r3, 174ea <gen_prov_start+0x122>
}
   174e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   174e6:	f7ff be3d 	b.w	17164 <prov_msg_recv>
}
   174ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   174ee:	bf00      	nop
   174f0:	200003c8 	.word	0x200003c8
   174f4:	00025880 	.word	0x00025880
   174f8:	00025950 	.word	0x00025950
   174fc:	0002b7f9 	.word	0x0002b7f9
   17500:	0002b6f8 	.word	0x0002b6f8
   17504:	0002b827 	.word	0x0002b827
   17508:	0002b84d 	.word	0x0002b84d
   1750c:	0002b873 	.word	0x0002b873

00017510 <send_confirm>:
{
   17510:	b510      	push	{r4, lr}
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   17512:	4c41      	ldr	r4, [pc, #260]	; (17618 <send_confirm+0x108>)
{
   17514:	b08a      	sub	sp, #40	; 0x28
	PROV_BUF(cfm, 17);
   17516:	ab04      	add	r3, sp, #16
   17518:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   1751c:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   17520:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	PROV_BUF(cfm, 17);
   17524:	9301      	str	r3, [sp, #4]
   17526:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   1752a:	f00c fa0e 	bl	2394a <bt_mesh_prov_conf_salt>
   1752e:	b190      	cbz	r0, 17556 <send_confirm+0x46>
		BT_ERR("Unable to generate confirmation salt");
   17530:	2301      	movs	r3, #1
   17532:	f04f 0100 	mov.w	r1, #0
   17536:	f363 0107 	bfi	r1, r3, #0, #8
   1753a:	4a38      	ldr	r2, [pc, #224]	; (1761c <send_confirm+0x10c>)
   1753c:	4b38      	ldr	r3, [pc, #224]	; (17620 <send_confirm+0x110>)
   1753e:	4839      	ldr	r0, [pc, #228]	; (17624 <send_confirm+0x114>)
   17540:	1a9b      	subs	r3, r3, r2
   17542:	08db      	lsrs	r3, r3, #3
   17544:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Unable to generate confirmation value");
   17548:	f009 fb5c 	bl	20c04 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   1754c:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   1754e:	f7ff fb3d 	bl	16bcc <close_link.constprop.22>
}
   17552:	b00a      	add	sp, #40	; 0x28
   17554:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(link.dhkey, link.conf_salt, link.conf_key)) {
   17556:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   1755a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   1755e:	f104 0008 	add.w	r0, r4, #8
   17562:	f7f7 fdd1 	bl	f108 <bt_mesh_prov_conf_key>
   17566:	b160      	cbz	r0, 17582 <send_confirm+0x72>
		BT_ERR("Unable to generate confirmation key");
   17568:	2301      	movs	r3, #1
   1756a:	f04f 0100 	mov.w	r1, #0
   1756e:	f363 0107 	bfi	r1, r3, #0, #8
   17572:	4a2a      	ldr	r2, [pc, #168]	; (1761c <send_confirm+0x10c>)
   17574:	4b2a      	ldr	r3, [pc, #168]	; (17620 <send_confirm+0x110>)
   17576:	482c      	ldr	r0, [pc, #176]	; (17628 <send_confirm+0x118>)
   17578:	1a9b      	subs	r3, r3, r2
   1757a:	08db      	lsrs	r3, r3, #3
   1757c:	f363 118f 	bfi	r1, r3, #6, #10
   17580:	e7e2      	b.n	17548 <send_confirm+0x38>
	if (bt_rand(link.rand, 16)) {
   17582:	2110      	movs	r1, #16
   17584:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   17588:	f00c fff5 	bl	24576 <bt_rand>
   1758c:	b160      	cbz	r0, 175a8 <send_confirm+0x98>
		BT_ERR("Unable to generate random number");
   1758e:	2301      	movs	r3, #1
   17590:	f04f 0100 	mov.w	r1, #0
   17594:	f363 0107 	bfi	r1, r3, #0, #8
   17598:	4a20      	ldr	r2, [pc, #128]	; (1761c <send_confirm+0x10c>)
   1759a:	4b21      	ldr	r3, [pc, #132]	; (17620 <send_confirm+0x110>)
   1759c:	4823      	ldr	r0, [pc, #140]	; (1762c <send_confirm+0x11c>)
   1759e:	1a9b      	subs	r3, r3, r2
   175a0:	08db      	lsrs	r3, r3, #3
   175a2:	f363 118f 	bfi	r1, r3, #6, #10
   175a6:	e7cf      	b.n	17548 <send_confirm+0x38>
	prov_buf_init(&cfm, PROV_CONFIRM);
   175a8:	2105      	movs	r1, #5
   175aa:	a801      	add	r0, sp, #4
   175ac:	f00c fd59 	bl	24062 <prov_buf_init>
			      net_buf_simple_add(&cfm, 16))) {
   175b0:	2110      	movs	r1, #16
   175b2:	a801      	add	r0, sp, #4
   175b4:	f00d fb8a 	bl	24ccc <net_buf_simple_add>
	if (bt_mesh_prov_conf(link.conf_key, link.rand, link.auth,
   175b8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   175bc:	4603      	mov	r3, r0
   175be:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   175c2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   175c6:	f00c f9d1 	bl	2396c <bt_mesh_prov_conf>
   175ca:	b160      	cbz	r0, 175e6 <send_confirm+0xd6>
		BT_ERR("Unable to generate confirmation value");
   175cc:	2301      	movs	r3, #1
   175ce:	f04f 0100 	mov.w	r1, #0
   175d2:	f363 0107 	bfi	r1, r3, #0, #8
   175d6:	4a11      	ldr	r2, [pc, #68]	; (1761c <send_confirm+0x10c>)
   175d8:	4b11      	ldr	r3, [pc, #68]	; (17620 <send_confirm+0x110>)
   175da:	4815      	ldr	r0, [pc, #84]	; (17630 <send_confirm+0x120>)
   175dc:	1a9b      	subs	r3, r3, r2
   175de:	08db      	lsrs	r3, r3, #3
   175e0:	f363 118f 	bfi	r1, r3, #6, #10
   175e4:	e7b0      	b.n	17548 <send_confirm+0x38>
	if (prov_send(&cfm)) {
   175e6:	a801      	add	r0, sp, #4
   175e8:	f7fe fe90 	bl	1630c <prov_send>
   175ec:	b178      	cbz	r0, 1760e <send_confirm+0xfe>
		BT_ERR("Failed to send Provisioning Confirm");
   175ee:	2301      	movs	r3, #1
   175f0:	f04f 0100 	mov.w	r1, #0
   175f4:	f363 0107 	bfi	r1, r3, #0, #8
   175f8:	4a08      	ldr	r2, [pc, #32]	; (1761c <send_confirm+0x10c>)
   175fa:	4b09      	ldr	r3, [pc, #36]	; (17620 <send_confirm+0x110>)
   175fc:	480d      	ldr	r0, [pc, #52]	; (17634 <send_confirm+0x124>)
   175fe:	1a9b      	subs	r3, r3, r2
   17600:	08db      	lsrs	r3, r3, #3
   17602:	f363 118f 	bfi	r1, r3, #6, #10
   17606:	f009 fafd 	bl	20c04 <log_0>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   1760a:	2005      	movs	r0, #5
   1760c:	e79f      	b.n	1754e <send_confirm+0x3e>
	link.expect = PROV_RANDOM;
   1760e:	2306      	movs	r3, #6
   17610:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   17614:	e79d      	b.n	17552 <send_confirm+0x42>
   17616:	bf00      	nop
   17618:	200003c8 	.word	0x200003c8
   1761c:	00025880 	.word	0x00025880
   17620:	00025950 	.word	0x00025950
   17624:	0002bb09 	.word	0x0002bb09
   17628:	0002bb2e 	.word	0x0002bb2e
   1762c:	0002bb52 	.word	0x0002bb52
   17630:	0002bb73 	.word	0x0002bb73
   17634:	0002bb99 	.word	0x0002bb99

00017638 <prov_confirm>:
{
   17638:	b508      	push	{r3, lr}
	memcpy(link.conf, data, 16);
   1763a:	4601      	mov	r1, r0
   1763c:	2210      	movs	r2, #16
   1763e:	4809      	ldr	r0, [pc, #36]	; (17664 <prov_confirm+0x2c>)
   17640:	f00a fc21 	bl	21e86 <memcpy>
	if (!atomic_test_bit(link.flags, HAVE_DHKEY)) {
   17644:	2003      	movs	r0, #3
   17646:	f7ff f887 	bl	16758 <atomic_test_bit.constprop.26>
   1764a:	b938      	cbnz	r0, 1765c <prov_confirm+0x24>
		prov_clear_tx();
   1764c:	f7fe fdee 	bl	1622c <prov_clear_tx>
   17650:	2110      	movs	r1, #16
   17652:	4805      	ldr	r0, [pc, #20]	; (17668 <prov_confirm+0x30>)
}
   17654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17658:	f00c bd0f 	b.w	2407a <atomic_or>
   1765c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
   17660:	f7ff bf56 	b.w	17510 <send_confirm>
   17664:	200003f4 	.word	0x200003f4
   17668:	200003c8 	.word	0x200003c8

0001766c <prov_dh_key_cb>:
{
   1766c:	b508      	push	{r3, lr}
	if (!key) {
   1766e:	4601      	mov	r1, r0
   17670:	b980      	cbnz	r0, 17694 <prov_dh_key_cb+0x28>
		BT_ERR("DHKey generation failed");
   17672:	2301      	movs	r3, #1
   17674:	f363 0107 	bfi	r1, r3, #0, #8
   17678:	4a12      	ldr	r2, [pc, #72]	; (176c4 <prov_dh_key_cb+0x58>)
   1767a:	4b13      	ldr	r3, [pc, #76]	; (176c8 <prov_dh_key_cb+0x5c>)
   1767c:	4813      	ldr	r0, [pc, #76]	; (176cc <prov_dh_key_cb+0x60>)
   1767e:	1a9b      	subs	r3, r3, r2
   17680:	08db      	lsrs	r3, r3, #3
   17682:	f363 118f 	bfi	r1, r3, #6, #10
   17686:	f009 fabd 	bl	20c04 <log_0>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   1768a:	2007      	movs	r0, #7
}
   1768c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   17690:	f7ff ba9c 	b.w	16bcc <close_link.constprop.22>
	sys_memcpy_swap(link.dhkey, key, 32);
   17694:	480e      	ldr	r0, [pc, #56]	; (176d0 <prov_dh_key_cb+0x64>)
   17696:	f00c fd15 	bl	240c4 <sys_memcpy_swap.constprop.21>
   1769a:	2108      	movs	r1, #8
   1769c:	480d      	ldr	r0, [pc, #52]	; (176d4 <prov_dh_key_cb+0x68>)
   1769e:	f00c fcec 	bl	2407a <atomic_or>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
   176a2:	2005      	movs	r0, #5
   176a4:	f7ff f858 	bl	16758 <atomic_test_bit.constprop.26>
   176a8:	b958      	cbnz	r0, 176c2 <prov_dh_key_cb+0x56>
	    atomic_test_bit(link.flags, WAIT_STRING)) {
   176aa:	2006      	movs	r0, #6
   176ac:	f7ff f854 	bl	16758 <atomic_test_bit.constprop.26>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
   176b0:	b938      	cbnz	r0, 176c2 <prov_dh_key_cb+0x56>
	if (atomic_test_and_clear_bit(link.flags, SEND_CONFIRM)) {
   176b2:	2004      	movs	r0, #4
   176b4:	f7ff f86e 	bl	16794 <atomic_test_and_clear_bit.constprop.24>
   176b8:	b118      	cbz	r0, 176c2 <prov_dh_key_cb+0x56>
}
   176ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
   176be:	f7ff bf27 	b.w	17510 <send_confirm>
}
   176c2:	bd08      	pop	{r3, pc}
   176c4:	00025880 	.word	0x00025880
   176c8:	00025950 	.word	0x00025950
   176cc:	0002b94e 	.word	0x0002b94e
   176d0:	200003d0 	.word	0x200003d0
   176d4:	200003c8 	.word	0x200003c8

000176d8 <bt_mesh_prov_get>:
#endif /* CONFIG_BT_MESH_PB_GATT */

const struct bt_mesh_prov *bt_mesh_prov_get(void)
{
	return prov;
}
   176d8:	4b01      	ldr	r3, [pc, #4]	; (176e0 <bt_mesh_prov_get+0x8>)
   176da:	6818      	ldr	r0, [r3, #0]
   176dc:	4770      	bx	lr
   176de:	bf00      	nop
   176e0:	20000d38 	.word	0x20000d38

000176e4 <bt_mesh_pb_adv_recv>:
{
   176e4:	b513      	push	{r0, r1, r4, lr}
   176e6:	4604      	mov	r4, r0
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
   176e8:	f00c fcf8 	bl	240dc <bt_prov_active>
   176ec:	b188      	cbz	r0, 17712 <bt_mesh_pb_adv_recv+0x2e>
	if (buf->len < 6) {
   176ee:	88a1      	ldrh	r1, [r4, #4]
   176f0:	2905      	cmp	r1, #5
   176f2:	d814      	bhi.n	1771e <bt_mesh_pb_adv_recv+0x3a>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   176f4:	2302      	movs	r3, #2
   176f6:	f04f 0200 	mov.w	r2, #0
   176fa:	f363 0207 	bfi	r2, r3, #0, #8
   176fe:	482a      	ldr	r0, [pc, #168]	; (177a8 <bt_mesh_pb_adv_recv+0xc4>)
   17700:	4b2a      	ldr	r3, [pc, #168]	; (177ac <bt_mesh_pb_adv_recv+0xc8>)
   17702:	1a1b      	subs	r3, r3, r0
   17704:	08db      	lsrs	r3, r3, #3
   17706:	482a      	ldr	r0, [pc, #168]	; (177b0 <bt_mesh_pb_adv_recv+0xcc>)
   17708:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   1770c:	f009 fa87 	bl	20c1e <log_1>
		return;
   17710:	e003      	b.n	1771a <bt_mesh_pb_adv_recv+0x36>
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
   17712:	f00b fc4c 	bl	22fae <bt_mesh_is_provisioned>
   17716:	2800      	cmp	r0, #0
   17718:	d0e9      	beq.n	176ee <bt_mesh_pb_adv_recv+0xa>
}
   1771a:	b002      	add	sp, #8
   1771c:	bd10      	pop	{r4, pc}
	rx.link_id = net_buf_simple_pull_be32(buf);
   1771e:	4620      	mov	r0, r4
   17720:	f00d fb6c 	bl	24dfc <net_buf_simple_pull_be32>
   17724:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   17726:	4620      	mov	r0, r4
   17728:	f00d fb4d 	bl	24dc6 <net_buf_simple_pull_u8>
   1772c:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   17730:	4620      	mov	r0, r4
   17732:	f00d fb48 	bl	24dc6 <net_buf_simple_pull_u8>
   17736:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, LINK_ACTIVE) && link.id != rx.link_id) {
   1773a:	2002      	movs	r0, #2
   1773c:	f7ff f80c 	bl	16758 <atomic_test_bit.constprop.26>
   17740:	b128      	cbz	r0, 1774e <bt_mesh_pb_adv_recv+0x6a>
   17742:	4b1c      	ldr	r3, [pc, #112]	; (177b4 <bt_mesh_pb_adv_recv+0xd0>)
   17744:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   17748:	9b00      	ldr	r3, [sp, #0]
   1774a:	429a      	cmp	r2, r3
   1774c:	d1e5      	bne.n	1771a <bt_mesh_pb_adv_recv+0x36>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   1774e:	f89d 1005 	ldrb.w	r1, [sp, #5]
   17752:	4a19      	ldr	r2, [pc, #100]	; (177b8 <bt_mesh_pb_adv_recv+0xd4>)
   17754:	88a0      	ldrh	r0, [r4, #4]
   17756:	f001 0103 	and.w	r1, r1, #3
   1775a:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
   1775e:	795b      	ldrb	r3, [r3, #5]
   17760:	4298      	cmp	r0, r3
   17762:	d20c      	bcs.n	1777e <bt_mesh_pb_adv_recv+0x9a>
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   17764:	2301      	movs	r3, #1
   17766:	f04f 0200 	mov.w	r2, #0
   1776a:	f363 0207 	bfi	r2, r3, #0, #8
   1776e:	480e      	ldr	r0, [pc, #56]	; (177a8 <bt_mesh_pb_adv_recv+0xc4>)
   17770:	4b0e      	ldr	r3, [pc, #56]	; (177ac <bt_mesh_pb_adv_recv+0xc8>)
   17772:	1a1b      	subs	r3, r3, r0
   17774:	08db      	lsrs	r3, r3, #3
   17776:	f363 128f 	bfi	r2, r3, #6, #10
   1777a:	4810      	ldr	r0, [pc, #64]	; (177bc <bt_mesh_pb_adv_recv+0xd8>)
   1777c:	e7c6      	b.n	1770c <bt_mesh_pb_adv_recv+0x28>
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
   1777e:	2002      	movs	r0, #2
   17780:	f7fe ffea 	bl	16758 <atomic_test_bit.constprop.26>
   17784:	f89d 3005 	ldrb.w	r3, [sp, #5]
   17788:	b930      	cbnz	r0, 17798 <bt_mesh_pb_adv_recv+0xb4>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   1778a:	f003 0103 	and.w	r1, r3, #3
   1778e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
   17792:	7909      	ldrb	r1, [r1, #4]
   17794:	2900      	cmp	r1, #0
   17796:	d1c0      	bne.n	1771a <bt_mesh_pb_adv_recv+0x36>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   17798:	f003 0303 	and.w	r3, r3, #3
   1779c:	4621      	mov	r1, r4
   1779e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   177a2:	4668      	mov	r0, sp
   177a4:	4798      	blx	r3
   177a6:	e7b8      	b.n	1771a <bt_mesh_pb_adv_recv+0x36>
   177a8:	00025880 	.word	0x00025880
   177ac:	00025950 	.word	0x00025950
   177b0:	0002b626 	.word	0x0002b626
   177b4:	200003c8 	.word	0x200003c8
   177b8:	000262a8 	.word	0x000262a8
   177bc:	0002b5e9 	.word	0x0002b5e9

000177c0 <bt_mesh_prov_init>:
{
	return atomic_test_bit(link.flags, LINK_ACTIVE);
}

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   177c0:	b538      	push	{r3, r4, r5, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func = pub_key_ready,
	};
	int err;

	if (!prov_info) {
   177c2:	4605      	mov	r5, r0
   177c4:	b988      	cbnz	r0, 177ea <bt_mesh_prov_init+0x2a>
		BT_ERR("No provisioning context provided");
   177c6:	2301      	movs	r3, #1
   177c8:	f04f 0100 	mov.w	r1, #0
   177cc:	f363 0107 	bfi	r1, r3, #0, #8
   177d0:	4a18      	ldr	r2, [pc, #96]	; (17834 <bt_mesh_prov_init+0x74>)
   177d2:	4b19      	ldr	r3, [pc, #100]	; (17838 <bt_mesh_prov_init+0x78>)
   177d4:	4819      	ldr	r0, [pc, #100]	; (1783c <bt_mesh_prov_init+0x7c>)
   177d6:	1a9b      	subs	r3, r3, r2
   177d8:	08db      	lsrs	r3, r3, #3
   177da:	f363 118f 	bfi	r1, r3, #6, #10
   177de:	f009 fa11 	bl	20c04 <log_0>
		return -EINVAL;
   177e2:	f06f 0415 	mvn.w	r4, #21
#endif

#endif /* CONFIG_BT_MESH_PB_ADV */

	return 0;
}
   177e6:	4620      	mov	r0, r4
   177e8:	bd38      	pop	{r3, r4, r5, pc}
	err = bt_pub_key_gen(&pub_key_cb);
   177ea:	4815      	ldr	r0, [pc, #84]	; (17840 <bt_mesh_prov_init+0x80>)
   177ec:	f7f0 fe0e 	bl	840c <bt_pub_key_gen>
	if (err) {
   177f0:	4604      	mov	r4, r0
   177f2:	b178      	cbz	r0, 17814 <bt_mesh_prov_init+0x54>
		BT_ERR("Failed to generate public key (%d)", err);
   177f4:	2301      	movs	r3, #1
   177f6:	f04f 0200 	mov.w	r2, #0
   177fa:	f363 0207 	bfi	r2, r3, #0, #8
   177fe:	490d      	ldr	r1, [pc, #52]	; (17834 <bt_mesh_prov_init+0x74>)
   17800:	4b0d      	ldr	r3, [pc, #52]	; (17838 <bt_mesh_prov_init+0x78>)
   17802:	1a5b      	subs	r3, r3, r1
   17804:	08db      	lsrs	r3, r3, #3
   17806:	4601      	mov	r1, r0
   17808:	f363 128f 	bfi	r2, r3, #6, #10
   1780c:	480d      	ldr	r0, [pc, #52]	; (17844 <bt_mesh_prov_init+0x84>)
   1780e:	f009 fa06 	bl	20c1e <log_1>
		return err;
   17812:	e7e8      	b.n	177e6 <bt_mesh_prov_init+0x26>
	prov = prov_info;
   17814:	4b0c      	ldr	r3, [pc, #48]	; (17848 <bt_mesh_prov_init+0x88>)
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   17816:	490d      	ldr	r1, [pc, #52]	; (1784c <bt_mesh_prov_init+0x8c>)
	prov = prov_info;
   17818:	601d      	str	r5, [r3, #0]
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   1781a:	4d0d      	ldr	r5, [pc, #52]	; (17850 <bt_mesh_prov_init+0x90>)
   1781c:	f505 70a4 	add.w	r0, r5, #328	; 0x148
   17820:	f00d fe10 	bl	25444 <k_delayed_work_init>
	link.rx.prev_id = XACT_NVAL;
   17824:	23ff      	movs	r3, #255	; 0xff
   17826:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125
	link.rx.buf = bt_mesh_proxy_get_buf();
   1782a:	f000 fbf5 	bl	18018 <bt_mesh_proxy_get_buf>
   1782e:	f8c5 012c 	str.w	r0, [r5, #300]	; 0x12c
	return 0;
   17832:	e7d8      	b.n	177e6 <bt_mesh_prov_init+0x26>
   17834:	00025880 	.word	0x00025880
   17838:	00025950 	.word	0x00025950
   1783c:	0002b6b4 	.word	0x0002b6b4
   17840:	20007414 	.word	0x20007414
   17844:	0002b6d5 	.word	0x0002b6d5
   17848:	20000d38 	.word	0x20000d38
   1784c:	0001693d 	.word	0x0001693d
   17850:	200003c8 	.word	0x200003c8

00017854 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(u16_t net_idx, u16_t addr)
{
	if (prov->complete) {
   17854:	4b02      	ldr	r3, [pc, #8]	; (17860 <bt_mesh_prov_complete+0xc>)
   17856:	681b      	ldr	r3, [r3, #0]
   17858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1785a:	b103      	cbz	r3, 1785e <bt_mesh_prov_complete+0xa>
		prov->complete(net_idx, addr);
   1785c:	4718      	bx	r3
	}
}
   1785e:	4770      	bx	lr
   17860:	20000d38 	.word	0x20000d38

00017864 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
	if (prov->reset) {
   17864:	4b02      	ldr	r3, [pc, #8]	; (17870 <bt_mesh_prov_reset+0xc>)
   17866:	681b      	ldr	r3, [r3, #0]
   17868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1786a:	b103      	cbz	r3, 1786e <bt_mesh_prov_reset+0xa>
		prov->reset();
   1786c:	4718      	bx	r3
	}
}
   1786e:	4770      	bx	lr
   17870:	20000d38 	.word	0x20000d38

00017874 <proxy_disconnected>:
{
	int i;

	BT_DBG("conn %p reason 0x%02x", conn, reason);

	conn_count--;
   17874:	4a0b      	ldr	r2, [pc, #44]	; (178a4 <proxy_disconnected+0x30>)
   17876:	6813      	ldr	r3, [r2, #0]
{
   17878:	b510      	push	{r4, lr}

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		if (client->conn == conn) {
   1787a:	4c0b      	ldr	r4, [pc, #44]	; (178a8 <proxy_disconnected+0x34>)
	conn_count--;
   1787c:	3b01      	subs	r3, #1
   1787e:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
   17880:	6823      	ldr	r3, [r4, #0]
   17882:	4283      	cmp	r3, r0
   17884:	d109      	bne.n	1789a <proxy_disconnected+0x26>
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   17886:	7aa3      	ldrb	r3, [r4, #10]
   17888:	2b03      	cmp	r3, #3
   1788a:	d101      	bne.n	17890 <proxy_disconnected+0x1c>
			    client->filter_type == PROV) {
				bt_mesh_pb_gatt_close(conn);
   1788c:	f7ff f95a 	bl	16b44 <bt_mesh_pb_gatt_close>
			}

			bt_conn_unref(client->conn);
   17890:	6820      	ldr	r0, [r4, #0]
   17892:	f00a fd9b 	bl	223cc <bt_conn_unref>
			client->conn = NULL;
   17896:	2300      	movs	r3, #0
   17898:	6023      	str	r3, [r4, #0]
			break;
		}
	}

	bt_mesh_adv_update();
}
   1789a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_update();
   1789e:	f7f3 bcb7 	b.w	b210 <bt_mesh_adv_update>
   178a2:	bf00      	nop
   178a4:	20000d3c 	.word	0x20000d3c
   178a8:	2000746c 	.word	0x2000746c

000178ac <prov_ccc_write.part.2>:
static void prov_ccc_changed(const struct bt_gatt_attr *attr, u16_t value)
{
	BT_DBG("value 0x%04x", value);
}

static bool prov_ccc_write(struct bt_conn *conn,
   178ac:	b508      	push	{r3, lr}
	struct bt_mesh_proxy_client *client;

	BT_DBG("value 0x%04x", value);

	if (value != BT_GATT_CCC_NOTIFY) {
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   178ae:	f04f 0200 	mov.w	r2, #0
   178b2:	2302      	movs	r3, #2
   178b4:	f363 0207 	bfi	r2, r3, #0, #8
   178b8:	4905      	ldr	r1, [pc, #20]	; (178d0 <prov_ccc_write.part.2+0x24>)
   178ba:	4b06      	ldr	r3, [pc, #24]	; (178d4 <prov_ccc_write.part.2+0x28>)
   178bc:	1a5b      	subs	r3, r3, r1
   178be:	08db      	lsrs	r3, r3, #3
   178c0:	4601      	mov	r1, r0
   178c2:	f363 128f 	bfi	r2, r3, #6, #10
   178c6:	4804      	ldr	r0, [pc, #16]	; (178d8 <prov_ccc_write.part.2+0x2c>)
   178c8:	f009 f9a9 	bl	20c1e <log_1>
		client->filter_type = PROV;
		bt_mesh_pb_gatt_open(conn);
	}

	return true;
}
   178cc:	2000      	movs	r0, #0
   178ce:	bd08      	pop	{r3, pc}
   178d0:	00025880 	.word	0x00025880
   178d4:	00025958 	.word	0x00025958
   178d8:	0002bd25 	.word	0x0002bd25

000178dc <next_sub.part.5>:

	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
}

static struct bt_mesh_subnet *next_sub(void)
   178dc:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub;

		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   178de:	4d1c      	ldr	r5, [pc, #112]	; (17950 <next_sub.part.5+0x74>)
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   178e0:	4e1c      	ldr	r6, [pc, #112]	; (17954 <next_sub.part.5+0x78>)
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   178e2:	682c      	ldr	r4, [r5, #0]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   178e4:	23e4      	movs	r3, #228	; 0xe4
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   178e6:	f004 0401 	and.w	r4, r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   178ea:	fb03 6304 	mla	r3, r3, r4, r6
   178ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   178f2:	f8b3 11b0 	ldrh.w	r1, [r3, #432]	; 0x1b0
   178f6:	4291      	cmp	r1, r2
   178f8:	d007      	beq.n	1790a <next_sub.part.5+0x2e>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   178fa:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
   178fe:	2b01      	cmp	r3, #1
   17900:	d014      	beq.n	1792c <next_sub.part.5+0x50>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   17902:	f7fa f9b5 	bl	11c70 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   17906:	2801      	cmp	r0, #1
   17908:	d010      	beq.n	1792c <next_sub.part.5+0x50>
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   1790a:	682b      	ldr	r3, [r5, #0]
   1790c:	1c5c      	adds	r4, r3, #1
   1790e:	f004 0401 	and.w	r4, r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   17912:	23e4      	movs	r3, #228	; 0xe4
   17914:	fb03 6304 	mla	r3, r3, r4, r6
   17918:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1791c:	f8b3 11b0 	ldrh.w	r1, [r3, #432]	; 0x1b0
   17920:	4291      	cmp	r1, r2
   17922:	d012      	beq.n	1794a <next_sub.part.5+0x6e>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   17924:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
   17928:	2b01      	cmp	r3, #1
   1792a:	d10a      	bne.n	17942 <next_sub.part.5+0x66>
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   1792c:	682b      	ldr	r3, [r5, #0]
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   1792e:	20e4      	movs	r0, #228	; 0xe4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   17930:	3301      	adds	r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   17932:	fb00 6004 	mla	r0, r0, r4, r6
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   17936:	f003 0301 	and.w	r3, r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   1793a:	f500 70ca 	add.w	r0, r0, #404	; 0x194
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   1793e:	602b      	str	r3, [r5, #0]
			return sub;
		}
	}

	return NULL;
}
   17940:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   17942:	f7fa f995 	bl	11c70 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   17946:	2801      	cmp	r0, #1
   17948:	d0f0      	beq.n	1792c <next_sub.part.5+0x50>
	return NULL;
   1794a:	2000      	movs	r0, #0
   1794c:	e7f8      	b.n	17940 <next_sub.part.5+0x64>
   1794e:	bf00      	nop
   17950:	20000d40 	.word	0x20000d40
   17954:	20007060 	.word	0x20007060

00017958 <proxy_connected>:
	conn_count++;
   17958:	4a16      	ldr	r2, [pc, #88]	; (179b4 <proxy_connected+0x5c>)
   1795a:	6813      	ldr	r3, [r2, #0]
   1795c:	3301      	adds	r3, #1
{
   1795e:	b570      	push	{r4, r5, r6, lr}
	proxy_adv_enabled = false;
   17960:	2100      	movs	r1, #0
	conn_count++;
   17962:	6013      	str	r3, [r2, #0]
	proxy_adv_enabled = false;
   17964:	4a14      	ldr	r2, [pc, #80]	; (179b8 <proxy_connected+0x60>)
	if (conn_count < CONFIG_BT_MAX_CONN) {
   17966:	428b      	cmp	r3, r1
{
   17968:	4606      	mov	r6, r0
	proxy_adv_enabled = false;
   1796a:	7011      	strb	r1, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
   1796c:	dc01      	bgt.n	17972 <proxy_connected+0x1a>
		bt_mesh_adv_update();
   1796e:	f7f3 fc4f 	bl	b210 <bt_mesh_adv_update>
		if (!clients[i].conn) {
   17972:	4c12      	ldr	r4, [pc, #72]	; (179bc <proxy_connected+0x64>)
   17974:	6825      	ldr	r5, [r4, #0]
   17976:	b17d      	cbz	r5, 17998 <proxy_connected+0x40>
		BT_ERR("No free Proxy Client objects");
   17978:	2301      	movs	r3, #1
   1797a:	f04f 0100 	mov.w	r1, #0
   1797e:	f363 0107 	bfi	r1, r3, #0, #8
   17982:	4a0f      	ldr	r2, [pc, #60]	; (179c0 <proxy_connected+0x68>)
   17984:	4b0f      	ldr	r3, [pc, #60]	; (179c4 <proxy_connected+0x6c>)
   17986:	4810      	ldr	r0, [pc, #64]	; (179c8 <proxy_connected+0x70>)
   17988:	1a9b      	subs	r3, r3, r2
   1798a:	08db      	lsrs	r3, r3, #3
   1798c:	f363 118f 	bfi	r1, r3, #6, #10
}
   17990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("No free Proxy Client objects");
   17994:	f009 b936 	b.w	20c04 <log_0>
	client->conn = bt_conn_ref(conn);
   17998:	4630      	mov	r0, r6
   1799a:	f00a fd10 	bl	223be <bt_conn_ref>
	(void)memset(client->filter, 0, sizeof(client->filter));
   1799e:	2206      	movs	r2, #6
	client->conn = bt_conn_ref(conn);
   179a0:	6020      	str	r0, [r4, #0]
	(void)memset(client->filter, 0, sizeof(client->filter));
   179a2:	4629      	mov	r1, r5
   179a4:	1d20      	adds	r0, r4, #4
	client->filter_type = NONE;
   179a6:	72a5      	strb	r5, [r4, #10]
	(void)memset(client->filter, 0, sizeof(client->filter));
   179a8:	f00a fa97 	bl	21eda <memset>
   179ac:	6a23      	ldr	r3, [r4, #32]
	buf->len  = 0;
   179ae:	83a5      	strh	r5, [r4, #28]
	buf->data = buf->__buf;
   179b0:	61a3      	str	r3, [r4, #24]
}
   179b2:	bd70      	pop	{r4, r5, r6, pc}
   179b4:	20000d3c 	.word	0x20000d3c
   179b8:	2000243e 	.word	0x2000243e
   179bc:	2000746c 	.word	0x2000746c
   179c0:	00025880 	.word	0x00025880
   179c4:	00025958 	.word	0x00025958
   179c8:	0002be20 	.word	0x0002be20

000179cc <proxy_send>:
{
   179cc:	4613      	mov	r3, r2
	if (gatt_svc == MESH_GATT_PROXY) {
   179ce:	4a0b      	ldr	r2, [pc, #44]	; (179fc <proxy_send+0x30>)
   179d0:	7812      	ldrb	r2, [r2, #0]
   179d2:	2a02      	cmp	r2, #2
{
   179d4:	b513      	push	{r0, r1, r4, lr}
   179d6:	f04f 0400 	mov.w	r4, #0
	if (gatt_svc == MESH_GATT_PROXY) {
   179da:	d106      	bne.n	179ea <proxy_send+0x1e>
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
				 const struct bt_gatt_attr *attr,
				 const void *data, u16_t len)
{
	return bt_gatt_notify_cb(conn, attr, data, len, NULL);
   179dc:	460a      	mov	r2, r1
   179de:	4908      	ldr	r1, [pc, #32]	; (17a00 <proxy_send+0x34>)
   179e0:	9400      	str	r4, [sp, #0]
   179e2:	f7f3 f84f 	bl	aa84 <bt_gatt_notify_cb>
}
   179e6:	b002      	add	sp, #8
   179e8:	bd10      	pop	{r4, pc}
	if (gatt_svc == MESH_GATT_PROV) {
   179ea:	2a01      	cmp	r2, #1
   179ec:	d103      	bne.n	179f6 <proxy_send+0x2a>
   179ee:	460a      	mov	r2, r1
   179f0:	9400      	str	r4, [sp, #0]
   179f2:	4904      	ldr	r1, [pc, #16]	; (17a04 <proxy_send+0x38>)
   179f4:	e7f5      	b.n	179e2 <proxy_send+0x16>
	return 0;
   179f6:	4620      	mov	r0, r4
   179f8:	e7f5      	b.n	179e6 <proxy_send+0x1a>
   179fa:	bf00      	nop
   179fc:	2000243c 	.word	0x2000243c
   17a00:	20007564 	.word	0x20007564
   17a04:	200074e0 	.word	0x200074e0

00017a08 <proxy_send_beacons>:
{
   17a08:	b538      	push	{r3, r4, r5, lr}
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   17a0a:	4c0e      	ldr	r4, [pc, #56]	; (17a44 <proxy_send_beacons+0x3c>)
   17a0c:	f8b4 21b0 	ldrh.w	r2, [r4, #432]	; 0x1b0
   17a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17a14:	429a      	cmp	r2, r3
{
   17a16:	4605      	mov	r5, r0
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   17a18:	d005      	beq.n	17a26 <proxy_send_beacons+0x1e>
			beacon_send(client->conn, sub);
   17a1a:	f504 71ca 	add.w	r1, r4, #404	; 0x194
   17a1e:	f850 0c0c 	ldr.w	r0, [r0, #-12]
   17a22:	f00c fbbe 	bl	241a2 <beacon_send>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   17a26:	f8b4 2294 	ldrh.w	r2, [r4, #660]	; 0x294
   17a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17a2e:	429a      	cmp	r2, r3
   17a30:	d006      	beq.n	17a40 <proxy_send_beacons+0x38>
			beacon_send(client->conn, sub);
   17a32:	f855 0c0c 	ldr.w	r0, [r5, #-12]
   17a36:	4904      	ldr	r1, [pc, #16]	; (17a48 <proxy_send_beacons+0x40>)
}
   17a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(client->conn, sub);
   17a3c:	f00c bbb1 	b.w	241a2 <beacon_send>
}
   17a40:	bd38      	pop	{r3, r4, r5, pc}
   17a42:	bf00      	nop
   17a44:	20007060 	.word	0x20007060
   17a48:	200072d8 	.word	0x200072d8

00017a4c <send_filter_status>:
{
   17a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
   17a4e:	f851 3b04 	ldr.w	r3, [r1], #4
   17a52:	2600      	movs	r6, #0
{
   17a54:	4614      	mov	r4, r2
   17a56:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   17a58:	e9cd 3101 	strd	r3, r1, [sp, #4]
   17a5c:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
   17a5e:	f7f7 fd35 	bl	f4cc <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   17a62:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
   17a64:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   17a68:	809e      	strh	r6, [r3, #4]
   17a6a:	68a3      	ldr	r3, [r4, #8]
   17a6c:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
   17a6e:	210a      	movs	r1, #10
   17a70:	4620      	mov	r0, r4
	buf->len  = 0;
   17a72:	80a6      	strh	r6, [r4, #4]
   17a74:	f00d f8c5 	bl	24c02 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   17a78:	2103      	movs	r1, #3
   17a7a:	4620      	mov	r0, r4
   17a7c:	f00d f935 	bl	24cea <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
   17a80:	7aab      	ldrb	r3, [r5, #10]
   17a82:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   17a84:	bf0c      	ite	eq
   17a86:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
   17a88:	2101      	movne	r1, #1
   17a8a:	4620      	mov	r0, r4
   17a8c:	f00d f92d 	bl	24cea <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   17a90:	88a9      	ldrh	r1, [r5, #4]
   17a92:	88eb      	ldrh	r3, [r5, #6]
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   17a94:	3100      	adds	r1, #0
   17a96:	bf18      	it	ne
   17a98:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   17a9a:	b103      	cbz	r3, 17a9e <send_filter_status+0x52>
			filter_size++;
   17a9c:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   17a9e:	892b      	ldrh	r3, [r5, #8]
   17aa0:	b10b      	cbz	r3, 17aa6 <send_filter_status+0x5a>
			filter_size++;
   17aa2:	3101      	adds	r1, #1
   17aa4:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
   17aa6:	4620      	mov	r0, r4
   17aa8:	f00d f936 	bl	24d18 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   17aac:	4621      	mov	r1, r4
   17aae:	2201      	movs	r2, #1
   17ab0:	a801      	add	r0, sp, #4
   17ab2:	f7f4 ff3d 	bl	c930 <bt_mesh_net_encode>
	if (err) {
   17ab6:	4601      	mov	r1, r0
   17ab8:	b178      	cbz	r0, 17ada <send_filter_status+0x8e>
		BT_ERR("Encoding Proxy cfg message failed (err %d)", err);
   17aba:	2301      	movs	r3, #1
   17abc:	f04f 0200 	mov.w	r2, #0
   17ac0:	f363 0207 	bfi	r2, r3, #0, #8
   17ac4:	480f      	ldr	r0, [pc, #60]	; (17b04 <send_filter_status+0xb8>)
   17ac6:	4b10      	ldr	r3, [pc, #64]	; (17b08 <send_filter_status+0xbc>)
   17ac8:	1a1b      	subs	r3, r3, r0
   17aca:	08db      	lsrs	r3, r3, #3
   17acc:	480f      	ldr	r0, [pc, #60]	; (17b0c <send_filter_status+0xc0>)
   17ace:	f363 128f 	bfi	r2, r3, #6, #10
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   17ad2:	f009 f8a4 	bl	20c1e <log_1>
}
   17ad6:	b004      	add	sp, #16
   17ad8:	bd70      	pop	{r4, r5, r6, pc}
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
   17ada:	2102      	movs	r1, #2
   17adc:	4622      	mov	r2, r4
   17ade:	6828      	ldr	r0, [r5, #0]
   17ae0:	f00c fb16 	bl	24110 <proxy_segment_and_send>
	if (err) {
   17ae4:	4601      	mov	r1, r0
   17ae6:	2800      	cmp	r0, #0
   17ae8:	d0f5      	beq.n	17ad6 <send_filter_status+0x8a>
		BT_ERR("Failed to send proxy cfg message (err %d)", err);
   17aea:	2301      	movs	r3, #1
   17aec:	f04f 0200 	mov.w	r2, #0
   17af0:	f363 0207 	bfi	r2, r3, #0, #8
   17af4:	4803      	ldr	r0, [pc, #12]	; (17b04 <send_filter_status+0xb8>)
   17af6:	4b04      	ldr	r3, [pc, #16]	; (17b08 <send_filter_status+0xbc>)
   17af8:	1a1b      	subs	r3, r3, r0
   17afa:	08db      	lsrs	r3, r3, #3
   17afc:	f363 128f 	bfi	r2, r3, #6, #10
   17b00:	4803      	ldr	r0, [pc, #12]	; (17b10 <send_filter_status+0xc4>)
   17b02:	e7e6      	b.n	17ad2 <send_filter_status+0x86>
   17b04:	00025880 	.word	0x00025880
   17b08:	00025958 	.word	0x00025958
   17b0c:	0002bf72 	.word	0x0002bf72
   17b10:	0002bf9d 	.word	0x0002bf9d

00017b14 <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   17b14:	2a01      	cmp	r2, #1
{
   17b16:	b508      	push	{r3, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   17b18:	d106      	bne.n	17b28 <proxy_ccc_write+0x14>
		if (clients[i].conn == conn) {
   17b1a:	4913      	ldr	r1, [pc, #76]	; (17b68 <proxy_ccc_write+0x54>)
   17b1c:	680b      	ldr	r3, [r1, #0]
   17b1e:	4298      	cmp	r0, r3
   17b20:	d007      	beq.n	17b32 <proxy_ccc_write+0x1e>
	if (client->filter_type == NONE) {
   17b22:	2300      	movs	r3, #0
   17b24:	7a9b      	ldrb	r3, [r3, #10]
   17b26:	deff      	udf	#255	; 0xff
   17b28:	4610      	mov	r0, r2
}
   17b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17b2e:	f7ff bebd 	b.w	178ac <prov_ccc_write.part.2>
	if (client->filter_type == NONE) {
   17b32:	7a8b      	ldrb	r3, [r1, #10]
   17b34:	b9ab      	cbnz	r3, 17b62 <proxy_ccc_write+0x4e>
		client->filter_type = WHITELIST;
   17b36:	728a      	strb	r2, [r1, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17b38:	f101 0314 	add.w	r3, r1, #20
   17b3c:	f3bf 8f5b 	dmb	ish
   17b40:	e853 2f00 	ldrex	r2, [r3]
   17b44:	f042 0001 	orr.w	r0, r2, #1
   17b48:	e843 0c00 	strex	ip, r0, [r3]
   17b4c:	f1bc 0f00 	cmp.w	ip, #0
   17b50:	d1f6      	bne.n	17b40 <proxy_ccc_write+0x2c>
   17b52:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   17b56:	07d3      	lsls	r3, r2, #31
   17b58:	d403      	bmi.n	17b62 <proxy_ccc_write+0x4e>
		k_queue_append(&work_q->queue, work);
   17b5a:	310c      	adds	r1, #12
   17b5c:	4803      	ldr	r0, [pc, #12]	; (17b6c <proxy_ccc_write+0x58>)
   17b5e:	f00d fa6f 	bl	25040 <k_queue_append>
}
   17b62:	2001      	movs	r0, #1
   17b64:	bd08      	pop	{r3, pc}
   17b66:	bf00      	nop
   17b68:	2000746c 	.word	0x2000746c
   17b6c:	20001d2c 	.word	0x20001d2c

00017b70 <prov_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   17b70:	2a01      	cmp	r2, #1
{
   17b72:	b508      	push	{r3, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   17b74:	d106      	bne.n	17b84 <prov_ccc_write+0x14>
		if (clients[i].conn == conn) {
   17b76:	4b0a      	ldr	r3, [pc, #40]	; (17ba0 <prov_ccc_write+0x30>)
   17b78:	681a      	ldr	r2, [r3, #0]
   17b7a:	4290      	cmp	r0, r2
   17b7c:	d007      	beq.n	17b8e <prov_ccc_write+0x1e>
	if (client->filter_type == NONE) {
   17b7e:	2300      	movs	r3, #0
   17b80:	7a9b      	ldrb	r3, [r3, #10]
   17b82:	deff      	udf	#255	; 0xff
   17b84:	4610      	mov	r0, r2
}
   17b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17b8a:	f7ff be8f 	b.w	178ac <prov_ccc_write.part.2>
	if (client->filter_type == NONE) {
   17b8e:	7a9a      	ldrb	r2, [r3, #10]
   17b90:	b91a      	cbnz	r2, 17b9a <prov_ccc_write+0x2a>
		client->filter_type = PROV;
   17b92:	2203      	movs	r2, #3
   17b94:	729a      	strb	r2, [r3, #10]
		bt_mesh_pb_gatt_open(conn);
   17b96:	f7fe ffb5 	bl	16b04 <bt_mesh_pb_gatt_open>
}
   17b9a:	2001      	movs	r0, #1
   17b9c:	bd08      	pop	{r3, pc}
   17b9e:	bf00      	nop
   17ba0:	2000746c 	.word	0x2000746c

00017ba4 <proxy_complete_pdu>:
{
   17ba4:	b570      	push	{r4, r5, r6, lr}
	switch (client->msg_type) {
   17ba6:	7ac1      	ldrb	r1, [r0, #11]
{
   17ba8:	b092      	sub	sp, #72	; 0x48
   17baa:	4604      	mov	r4, r0
	switch (client->msg_type) {
   17bac:	2903      	cmp	r1, #3
   17bae:	f200 80c6 	bhi.w	17d3e <proxy_complete_pdu+0x19a>
   17bb2:	e8df f001 	tbb	[pc, r1]
   17bb6:	0d02      	.short	0x0d02
   17bb8:	be11      	.short	0xbe11
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
   17bba:	2202      	movs	r2, #2
   17bbc:	2100      	movs	r1, #0
   17bbe:	3018      	adds	r0, #24
   17bc0:	f7f5 fad2 	bl	d168 <bt_mesh_net_recv>
   17bc4:	2300      	movs	r3, #0
   17bc6:	83a3      	strh	r3, [r4, #28]
	buf->data = buf->__buf;
   17bc8:	6a23      	ldr	r3, [r4, #32]
   17bca:	61a3      	str	r3, [r4, #24]
}
   17bcc:	b012      	add	sp, #72	; 0x48
   17bce:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_beacon_recv(&client->buf);
   17bd0:	3018      	adds	r0, #24
   17bd2:	f7f3 fd67 	bl	b6a4 <bt_mesh_beacon_recv>
		break;
   17bd6:	e7f5      	b.n	17bc4 <proxy_complete_pdu+0x20>
	NET_BUF_SIMPLE_DEFINE(buf, 29);
   17bd8:	ab0a      	add	r3, sp, #40	; 0x28
   17bda:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   17bde:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17be2:	9301      	str	r3, [sp, #4]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
   17be4:	aa04      	add	r2, sp, #16
   17be6:	ab01      	add	r3, sp, #4
   17be8:	2103      	movs	r1, #3
   17bea:	3018      	adds	r0, #24
   17bec:	f7f5 f87e 	bl	ccec <bt_mesh_net_decode>
	if (err) {
   17bf0:	4605      	mov	r5, r0
   17bf2:	b178      	cbz	r0, 17c14 <proxy_complete_pdu+0x70>
		BT_ERR("Failed to decode Proxy Configuration (err %d)", err);
   17bf4:	2301      	movs	r3, #1
   17bf6:	f04f 0200 	mov.w	r2, #0
   17bfa:	f363 0207 	bfi	r2, r3, #0, #8
   17bfe:	4956      	ldr	r1, [pc, #344]	; (17d58 <proxy_complete_pdu+0x1b4>)
   17c00:	4b56      	ldr	r3, [pc, #344]	; (17d5c <proxy_complete_pdu+0x1b8>)
   17c02:	1a5b      	subs	r3, r3, r1
   17c04:	08db      	lsrs	r3, r3, #3
   17c06:	4601      	mov	r1, r0
   17c08:	4855      	ldr	r0, [pc, #340]	; (17d60 <proxy_complete_pdu+0x1bc>)
   17c0a:	f363 128f 	bfi	r2, r3, #6, #10
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   17c0e:	f009 f806 	bl	20c1e <log_1>
   17c12:	e7d7      	b.n	17bc4 <proxy_complete_pdu+0x20>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
   17c14:	2109      	movs	r1, #9
   17c16:	a801      	add	r0, sp, #4
   17c18:	f00d f8c5 	bl	24da6 <net_buf_simple_pull>
	if (buf.len < 1) {
   17c1c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   17c20:	b973      	cbnz	r3, 17c40 <proxy_complete_pdu+0x9c>
		BT_WARN("Too short proxy configuration PDU");
   17c22:	2302      	movs	r3, #2
   17c24:	f04f 0100 	mov.w	r1, #0
   17c28:	f363 0107 	bfi	r1, r3, #0, #8
   17c2c:	4a4a      	ldr	r2, [pc, #296]	; (17d58 <proxy_complete_pdu+0x1b4>)
   17c2e:	4b4b      	ldr	r3, [pc, #300]	; (17d5c <proxy_complete_pdu+0x1b8>)
   17c30:	484c      	ldr	r0, [pc, #304]	; (17d64 <proxy_complete_pdu+0x1c0>)
   17c32:	1a9b      	subs	r3, r3, r2
   17c34:	08db      	lsrs	r3, r3, #3
   17c36:	f363 118f 	bfi	r1, r3, #6, #10
   17c3a:	f008 ffe3 	bl	20c04 <log_0>
		return;
   17c3e:	e7c1      	b.n	17bc4 <proxy_complete_pdu+0x20>
	opcode = net_buf_simple_pull_u8(&buf);
   17c40:	a801      	add	r0, sp, #4
   17c42:	f00d f8c0 	bl	24dc6 <net_buf_simple_pull_u8>
	switch (opcode) {
   17c46:	2801      	cmp	r0, #1
   17c48:	d05c      	beq.n	17d04 <proxy_complete_pdu+0x160>
   17c4a:	b246      	sxtb	r6, r0
   17c4c:	b1c6      	cbz	r6, 17c80 <proxy_complete_pdu+0xdc>
   17c4e:	2802      	cmp	r0, #2
   17c50:	d161      	bne.n	17d16 <proxy_complete_pdu+0x172>
		while (buf.len >= 2) {
   17c52:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   17c56:	2b01      	cmp	r3, #1
   17c58:	d923      	bls.n	17ca2 <proxy_complete_pdu+0xfe>
			addr = net_buf_simple_pull_be16(&buf);
   17c5a:	a801      	add	r0, sp, #4
   17c5c:	f00d f8c3 	bl	24de6 <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   17c60:	2800      	cmp	r0, #0
   17c62:	d0f6      	beq.n	17c52 <proxy_complete_pdu+0xae>
		if (client->filter[i] == addr) {
   17c64:	88a3      	ldrh	r3, [r4, #4]
   17c66:	4283      	cmp	r3, r0
   17c68:	d051      	beq.n	17d0e <proxy_complete_pdu+0x16a>
   17c6a:	88e3      	ldrh	r3, [r4, #6]
   17c6c:	4283      	cmp	r3, r0
   17c6e:	d050      	beq.n	17d12 <proxy_complete_pdu+0x16e>
   17c70:	8923      	ldrh	r3, [r4, #8]
   17c72:	4283      	cmp	r3, r0
   17c74:	d1ed      	bne.n	17c52 <proxy_complete_pdu+0xae>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   17c76:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   17c78:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   17c7c:	809d      	strh	r5, [r3, #4]
			return;
   17c7e:	e7e8      	b.n	17c52 <proxy_complete_pdu+0xae>
	if (buf->len < 1) {
   17c80:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   17c84:	b99b      	cbnz	r3, 17cae <proxy_complete_pdu+0x10a>
		BT_WARN("Too short Filter Set message");
   17c86:	2302      	movs	r3, #2
   17c88:	f04f 0100 	mov.w	r1, #0
   17c8c:	f363 0107 	bfi	r1, r3, #0, #8
   17c90:	4a31      	ldr	r2, [pc, #196]	; (17d58 <proxy_complete_pdu+0x1b4>)
   17c92:	4b32      	ldr	r3, [pc, #200]	; (17d5c <proxy_complete_pdu+0x1b8>)
   17c94:	4834      	ldr	r0, [pc, #208]	; (17d68 <proxy_complete_pdu+0x1c4>)
   17c96:	1a9b      	subs	r3, r3, r2
   17c98:	08db      	lsrs	r3, r3, #3
   17c9a:	f363 118f 	bfi	r1, r3, #6, #10
   17c9e:	f008 ffb1 	bl	20c04 <log_0>
		send_filter_status(client, &rx, &buf);
   17ca2:	aa01      	add	r2, sp, #4
   17ca4:	a904      	add	r1, sp, #16
   17ca6:	4620      	mov	r0, r4
   17ca8:	f7ff fed0 	bl	17a4c <send_filter_status>
		break;
   17cac:	e78a      	b.n	17bc4 <proxy_complete_pdu+0x20>
	type = net_buf_simple_pull_u8(buf);
   17cae:	a801      	add	r0, sp, #4
   17cb0:	f00d f889 	bl	24dc6 <net_buf_simple_pull_u8>
	switch (type) {
   17cb4:	4601      	mov	r1, r0
   17cb6:	b180      	cbz	r0, 17cda <proxy_complete_pdu+0x136>
   17cb8:	2801      	cmp	r0, #1
   17cba:	d015      	beq.n	17ce8 <proxy_complete_pdu+0x144>
		BT_WARN("Prohibited Filter Type 0x%02x", type);
   17cbc:	2302      	movs	r3, #2
   17cbe:	f04f 0200 	mov.w	r2, #0
   17cc2:	f363 0207 	bfi	r2, r3, #0, #8
   17cc6:	4824      	ldr	r0, [pc, #144]	; (17d58 <proxy_complete_pdu+0x1b4>)
   17cc8:	4b24      	ldr	r3, [pc, #144]	; (17d5c <proxy_complete_pdu+0x1b8>)
   17cca:	1a1b      	subs	r3, r3, r0
   17ccc:	08db      	lsrs	r3, r3, #3
   17cce:	f363 128f 	bfi	r2, r3, #6, #10
   17cd2:	4826      	ldr	r0, [pc, #152]	; (17d6c <proxy_complete_pdu+0x1c8>)
   17cd4:	f008 ffa3 	bl	20c1e <log_1>
		return -EINVAL;
   17cd8:	e7e3      	b.n	17ca2 <proxy_complete_pdu+0xfe>
		(void)memset(client->filter, 0, sizeof(client->filter));
   17cda:	2206      	movs	r2, #6
   17cdc:	1d20      	adds	r0, r4, #4
   17cde:	f00a f8fc 	bl	21eda <memset>
		client->filter_type = WHITELIST;
   17ce2:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
   17ce4:	72a3      	strb	r3, [r4, #10]
		break;
   17ce6:	e7dc      	b.n	17ca2 <proxy_complete_pdu+0xfe>
		(void)memset(client->filter, 0, sizeof(client->filter));
   17ce8:	2206      	movs	r2, #6
   17cea:	4631      	mov	r1, r6
   17cec:	1d20      	adds	r0, r4, #4
   17cee:	f00a f8f4 	bl	21eda <memset>
		client->filter_type = BLACKLIST;
   17cf2:	2302      	movs	r3, #2
   17cf4:	e7f6      	b.n	17ce4 <proxy_complete_pdu+0x140>
			addr = net_buf_simple_pull_be16(&buf);
   17cf6:	a801      	add	r0, sp, #4
   17cf8:	f00d f875 	bl	24de6 <net_buf_simple_pull_be16>
			filter_add(client, addr);
   17cfc:	4601      	mov	r1, r0
   17cfe:	4620      	mov	r0, r4
   17d00:	f00c f9f0 	bl	240e4 <filter_add>
		while (buf.len >= 2) {
   17d04:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   17d08:	2b01      	cmp	r3, #1
   17d0a:	d8f4      	bhi.n	17cf6 <proxy_complete_pdu+0x152>
   17d0c:	e7c9      	b.n	17ca2 <proxy_complete_pdu+0xfe>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   17d0e:	2300      	movs	r3, #0
   17d10:	e7b2      	b.n	17c78 <proxy_complete_pdu+0xd4>
   17d12:	2301      	movs	r3, #1
   17d14:	e7b0      	b.n	17c78 <proxy_complete_pdu+0xd4>
		BT_WARN("Unhandled configuration OpCode 0x%02x", opcode);
   17d16:	2302      	movs	r3, #2
   17d18:	f04f 0200 	mov.w	r2, #0
   17d1c:	f363 0207 	bfi	r2, r3, #0, #8
   17d20:	490d      	ldr	r1, [pc, #52]	; (17d58 <proxy_complete_pdu+0x1b4>)
   17d22:	4b0e      	ldr	r3, [pc, #56]	; (17d5c <proxy_complete_pdu+0x1b8>)
   17d24:	1a5b      	subs	r3, r3, r1
   17d26:	08db      	lsrs	r3, r3, #3
   17d28:	4601      	mov	r1, r0
   17d2a:	f363 128f 	bfi	r2, r3, #6, #10
   17d2e:	4810      	ldr	r0, [pc, #64]	; (17d70 <proxy_complete_pdu+0x1cc>)
   17d30:	e76d      	b.n	17c0e <proxy_complete_pdu+0x6a>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
   17d32:	f100 0118 	add.w	r1, r0, #24
   17d36:	6800      	ldr	r0, [r0, #0]
   17d38:	f7fe fe5e 	bl	169f8 <bt_mesh_pb_gatt_recv>
		break;
   17d3c:	e742      	b.n	17bc4 <proxy_complete_pdu+0x20>
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   17d3e:	2302      	movs	r3, #2
   17d40:	f04f 0200 	mov.w	r2, #0
   17d44:	f363 0207 	bfi	r2, r3, #0, #8
   17d48:	4803      	ldr	r0, [pc, #12]	; (17d58 <proxy_complete_pdu+0x1b4>)
   17d4a:	4b04      	ldr	r3, [pc, #16]	; (17d5c <proxy_complete_pdu+0x1b8>)
   17d4c:	1a1b      	subs	r3, r3, r0
   17d4e:	08db      	lsrs	r3, r3, #3
   17d50:	f363 128f 	bfi	r2, r3, #6, #10
   17d54:	4807      	ldr	r0, [pc, #28]	; (17d74 <proxy_complete_pdu+0x1d0>)
   17d56:	e75a      	b.n	17c0e <proxy_complete_pdu+0x6a>
   17d58:	00025880 	.word	0x00025880
   17d5c:	00025958 	.word	0x00025958
   17d60:	0002bd51 	.word	0x0002bd51
   17d64:	0002bd7f 	.word	0x0002bd7f
   17d68:	0002bda1 	.word	0x0002bda1
   17d6c:	0002bdbe 	.word	0x0002bdbe
   17d70:	0002bddc 	.word	0x0002bddc
   17d74:	0002be02 	.word	0x0002be02

00017d78 <proxy_recv>:
{
   17d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (clients[i].conn == conn) {
   17d7a:	4d62      	ldr	r5, [pc, #392]	; (17f04 <proxy_recv+0x18c>)
{
   17d7c:	4616      	mov	r6, r2
		if (clients[i].conn == conn) {
   17d7e:	682a      	ldr	r2, [r5, #0]
   17d80:	4282      	cmp	r2, r0
   17d82:	f040 80bc 	bne.w	17efe <proxy_recv+0x186>
	if (len < 1) {
   17d86:	b983      	cbnz	r3, 17daa <proxy_recv+0x32>
		BT_WARN("Too small Proxy PDU");
   17d88:	2302      	movs	r3, #2
   17d8a:	f04f 0100 	mov.w	r1, #0
   17d8e:	f363 0107 	bfi	r1, r3, #0, #8
   17d92:	4a5d      	ldr	r2, [pc, #372]	; (17f08 <proxy_recv+0x190>)
   17d94:	4b5d      	ldr	r3, [pc, #372]	; (17f0c <proxy_recv+0x194>)
   17d96:	485e      	ldr	r0, [pc, #376]	; (17f10 <proxy_recv+0x198>)
   17d98:	1a9b      	subs	r3, r3, r2
   17d9a:	08db      	lsrs	r3, r3, #3
   17d9c:	f363 118f 	bfi	r1, r3, #6, #10
			BT_WARN("Unexpected message type in last SAR PDU");
   17da0:	f008 ff30 	bl	20c04 <log_0>
			return -EINVAL;
   17da4:	f06f 0415 	mvn.w	r4, #21
   17da8:	e067      	b.n	17e7a <proxy_recv+0x102>
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
   17daa:	7832      	ldrb	r2, [r6, #0]
   17dac:	68c9      	ldr	r1, [r1, #12]
   17dae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   17db2:	3100      	adds	r1, #0
   17db4:	f1a2 0003 	sub.w	r0, r2, #3
   17db8:	bf18      	it	ne
   17dba:	2101      	movne	r1, #1
   17dbc:	4242      	negs	r2, r0
   17dbe:	4142      	adcs	r2, r0
   17dc0:	4291      	cmp	r1, r2
   17dc2:	d00c      	beq.n	17dde <proxy_recv+0x66>
		BT_WARN("Proxy PDU type doesn't match GATT service");
   17dc4:	2302      	movs	r3, #2
   17dc6:	f04f 0100 	mov.w	r1, #0
   17dca:	f363 0107 	bfi	r1, r3, #0, #8
   17dce:	4a4e      	ldr	r2, [pc, #312]	; (17f08 <proxy_recv+0x190>)
   17dd0:	4b4e      	ldr	r3, [pc, #312]	; (17f0c <proxy_recv+0x194>)
   17dd2:	4850      	ldr	r0, [pc, #320]	; (17f14 <proxy_recv+0x19c>)
   17dd4:	1a9b      	subs	r3, r3, r2
   17dd6:	08db      	lsrs	r3, r3, #3
   17dd8:	f363 118f 	bfi	r1, r3, #6, #10
   17ddc:	e7e0      	b.n	17da0 <proxy_recv+0x28>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
   17dde:	f105 0018 	add.w	r0, r5, #24
   17de2:	1e5f      	subs	r7, r3, #1
   17de4:	461c      	mov	r4, r3
   17de6:	f00d f816 	bl	24e16 <net_buf_simple_tailroom>
   17dea:	4287      	cmp	r7, r0
   17dec:	d90c      	bls.n	17e08 <proxy_recv+0x90>
		BT_WARN("Too big proxy PDU");
   17dee:	2302      	movs	r3, #2
   17df0:	f04f 0100 	mov.w	r1, #0
   17df4:	f363 0107 	bfi	r1, r3, #0, #8
   17df8:	4a43      	ldr	r2, [pc, #268]	; (17f08 <proxy_recv+0x190>)
   17dfa:	4b44      	ldr	r3, [pc, #272]	; (17f0c <proxy_recv+0x194>)
   17dfc:	4846      	ldr	r0, [pc, #280]	; (17f18 <proxy_recv+0x1a0>)
   17dfe:	1a9b      	subs	r3, r3, r2
   17e00:	08db      	lsrs	r3, r3, #3
   17e02:	f363 118f 	bfi	r1, r3, #6, #10
   17e06:	e7cb      	b.n	17da0 <proxy_recv+0x28>
	switch (PDU_SAR(data)) {
   17e08:	7833      	ldrb	r3, [r6, #0]
   17e0a:	8baa      	ldrh	r2, [r5, #28]
   17e0c:	0999      	lsrs	r1, r3, #6
   17e0e:	2902      	cmp	r1, #2
   17e10:	d035      	beq.n	17e7e <proxy_recv+0x106>
   17e12:	2903      	cmp	r1, #3
   17e14:	d053      	beq.n	17ebe <proxy_recv+0x146>
   17e16:	2901      	cmp	r1, #1
   17e18:	d018      	beq.n	17e4c <proxy_recv+0xd4>
		if (client->buf.len) {
   17e1a:	b162      	cbz	r2, 17e36 <proxy_recv+0xbe>
			BT_WARN("Complete PDU while a pending incomplete one");
   17e1c:	2302      	movs	r3, #2
   17e1e:	f04f 0100 	mov.w	r1, #0
   17e22:	f363 0107 	bfi	r1, r3, #0, #8
   17e26:	4a38      	ldr	r2, [pc, #224]	; (17f08 <proxy_recv+0x190>)
   17e28:	4b38      	ldr	r3, [pc, #224]	; (17f0c <proxy_recv+0x194>)
   17e2a:	483c      	ldr	r0, [pc, #240]	; (17f1c <proxy_recv+0x1a4>)
   17e2c:	1a9b      	subs	r3, r3, r2
   17e2e:	08db      	lsrs	r3, r3, #3
   17e30:	f363 118f 	bfi	r1, r3, #6, #10
   17e34:	e7b4      	b.n	17da0 <proxy_recv+0x28>
		client->msg_type = PDU_TYPE(data);
   17e36:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   17e38:	463a      	mov	r2, r7
   17e3a:	1c71      	adds	r1, r6, #1
   17e3c:	f105 0018 	add.w	r0, r5, #24
   17e40:	f00c ff4a 	bl	24cd8 <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
   17e44:	4628      	mov	r0, r5
   17e46:	f7ff fead 	bl	17ba4 <proxy_complete_pdu>
		break;
   17e4a:	e016      	b.n	17e7a <proxy_recv+0x102>
		if (client->buf.len) {
   17e4c:	b162      	cbz	r2, 17e68 <proxy_recv+0xf0>
			BT_WARN("First PDU while a pending incomplete one");
   17e4e:	2302      	movs	r3, #2
   17e50:	f04f 0100 	mov.w	r1, #0
   17e54:	f363 0107 	bfi	r1, r3, #0, #8
   17e58:	4a2b      	ldr	r2, [pc, #172]	; (17f08 <proxy_recv+0x190>)
   17e5a:	4b2c      	ldr	r3, [pc, #176]	; (17f0c <proxy_recv+0x194>)
   17e5c:	4830      	ldr	r0, [pc, #192]	; (17f20 <proxy_recv+0x1a8>)
   17e5e:	1a9b      	subs	r3, r3, r2
   17e60:	08db      	lsrs	r3, r3, #3
   17e62:	f363 118f 	bfi	r1, r3, #6, #10
   17e66:	e79b      	b.n	17da0 <proxy_recv+0x28>
		client->msg_type = PDU_TYPE(data);
   17e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17e6c:	72eb      	strb	r3, [r5, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   17e6e:	463a      	mov	r2, r7
   17e70:	1c71      	adds	r1, r6, #1
   17e72:	f105 0018 	add.w	r0, r5, #24
   17e76:	f00c ff2f 	bl	24cd8 <net_buf_simple_add_mem>
}
   17e7a:	4620      	mov	r0, r4
   17e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!client->buf.len) {
   17e7e:	b962      	cbnz	r2, 17e9a <proxy_recv+0x122>
			BT_WARN("Continuation with no prior data");
   17e80:	2302      	movs	r3, #2
   17e82:	f04f 0100 	mov.w	r1, #0
   17e86:	f363 0107 	bfi	r1, r3, #0, #8
   17e8a:	4a1f      	ldr	r2, [pc, #124]	; (17f08 <proxy_recv+0x190>)
   17e8c:	4b1f      	ldr	r3, [pc, #124]	; (17f0c <proxy_recv+0x194>)
   17e8e:	4825      	ldr	r0, [pc, #148]	; (17f24 <proxy_recv+0x1ac>)
   17e90:	1a9b      	subs	r3, r3, r2
   17e92:	08db      	lsrs	r3, r3, #3
   17e94:	f363 118f 	bfi	r1, r3, #6, #10
   17e98:	e782      	b.n	17da0 <proxy_recv+0x28>
		if (client->msg_type != PDU_TYPE(data)) {
   17e9a:	7aea      	ldrb	r2, [r5, #11]
   17e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17ea0:	429a      	cmp	r2, r3
   17ea2:	d0e4      	beq.n	17e6e <proxy_recv+0xf6>
			BT_WARN("Unexpected message type in continuation");
   17ea4:	2302      	movs	r3, #2
   17ea6:	f04f 0100 	mov.w	r1, #0
   17eaa:	f363 0107 	bfi	r1, r3, #0, #8
   17eae:	4a16      	ldr	r2, [pc, #88]	; (17f08 <proxy_recv+0x190>)
   17eb0:	4b16      	ldr	r3, [pc, #88]	; (17f0c <proxy_recv+0x194>)
   17eb2:	481d      	ldr	r0, [pc, #116]	; (17f28 <proxy_recv+0x1b0>)
   17eb4:	1a9b      	subs	r3, r3, r2
   17eb6:	08db      	lsrs	r3, r3, #3
   17eb8:	f363 118f 	bfi	r1, r3, #6, #10
   17ebc:	e770      	b.n	17da0 <proxy_recv+0x28>
		if (!client->buf.len) {
   17ebe:	b962      	cbnz	r2, 17eda <proxy_recv+0x162>
			BT_WARN("Last SAR PDU with no prior data");
   17ec0:	2302      	movs	r3, #2
   17ec2:	f04f 0100 	mov.w	r1, #0
   17ec6:	f363 0107 	bfi	r1, r3, #0, #8
   17eca:	4a0f      	ldr	r2, [pc, #60]	; (17f08 <proxy_recv+0x190>)
   17ecc:	4b0f      	ldr	r3, [pc, #60]	; (17f0c <proxy_recv+0x194>)
   17ece:	4817      	ldr	r0, [pc, #92]	; (17f2c <proxy_recv+0x1b4>)
   17ed0:	1a9b      	subs	r3, r3, r2
   17ed2:	08db      	lsrs	r3, r3, #3
   17ed4:	f363 118f 	bfi	r1, r3, #6, #10
   17ed8:	e762      	b.n	17da0 <proxy_recv+0x28>
		if (client->msg_type != PDU_TYPE(data)) {
   17eda:	7aea      	ldrb	r2, [r5, #11]
   17edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17ee0:	429a      	cmp	r2, r3
   17ee2:	d0a9      	beq.n	17e38 <proxy_recv+0xc0>
			BT_WARN("Unexpected message type in last SAR PDU");
   17ee4:	2302      	movs	r3, #2
   17ee6:	f04f 0100 	mov.w	r1, #0
   17eea:	f363 0107 	bfi	r1, r3, #0, #8
   17eee:	4a06      	ldr	r2, [pc, #24]	; (17f08 <proxy_recv+0x190>)
   17ef0:	4b06      	ldr	r3, [pc, #24]	; (17f0c <proxy_recv+0x194>)
   17ef2:	480f      	ldr	r0, [pc, #60]	; (17f30 <proxy_recv+0x1b8>)
   17ef4:	1a9b      	subs	r3, r3, r2
   17ef6:	08db      	lsrs	r3, r3, #3
   17ef8:	f363 118f 	bfi	r1, r3, #6, #10
   17efc:	e750      	b.n	17da0 <proxy_recv+0x28>
		return -ENOTCONN;
   17efe:	f06f 0438 	mvn.w	r4, #56	; 0x38
   17f02:	e7ba      	b.n	17e7a <proxy_recv+0x102>
   17f04:	2000746c 	.word	0x2000746c
   17f08:	00025880 	.word	0x00025880
   17f0c:	00025958 	.word	0x00025958
   17f10:	0002be3d 	.word	0x0002be3d
   17f14:	0002be51 	.word	0x0002be51
   17f18:	0002be7b 	.word	0x0002be7b
   17f1c:	0002be8d 	.word	0x0002be8d
   17f20:	0002beb9 	.word	0x0002beb9
   17f24:	0002bee2 	.word	0x0002bee2
   17f28:	0002bf02 	.word	0x0002bf02
   17f2c:	0002bf2a 	.word	0x0002bf2a
   17f30:	0002bf4a 	.word	0x0002bf4a

00017f34 <bt_mesh_proxy_beacon_send>:
{
   17f34:	b538      	push	{r3, r4, r5, lr}
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   17f36:	4c0f      	ldr	r4, [pc, #60]	; (17f74 <bt_mesh_proxy_beacon_send+0x40>)
{
   17f38:	4601      	mov	r1, r0
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   17f3a:	f504 75ca 	add.w	r5, r4, #404	; 0x194
	if (!sub) {
   17f3e:	b981      	cbnz	r1, 17f62 <bt_mesh_proxy_beacon_send+0x2e>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   17f40:	f8b4 21b0 	ldrh.w	r2, [r4, #432]	; 0x1b0
   17f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17f48:	429a      	cmp	r2, r3
   17f4a:	d002      	beq.n	17f52 <bt_mesh_proxy_beacon_send+0x1e>
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   17f4c:	4628      	mov	r0, r5
   17f4e:	f7ff fff1 	bl	17f34 <bt_mesh_proxy_beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   17f52:	f8b4 2294 	ldrh.w	r2, [r4, #660]	; 0x294
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   17f56:	4908      	ldr	r1, [pc, #32]	; (17f78 <bt_mesh_proxy_beacon_send+0x44>)
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   17f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17f5c:	429a      	cmp	r2, r3
   17f5e:	d1ee      	bne.n	17f3e <bt_mesh_proxy_beacon_send+0xa>
}
   17f60:	bd38      	pop	{r3, r4, r5, pc}
		if (clients[i].conn) {
   17f62:	4b06      	ldr	r3, [pc, #24]	; (17f7c <bt_mesh_proxy_beacon_send+0x48>)
   17f64:	6818      	ldr	r0, [r3, #0]
   17f66:	2800      	cmp	r0, #0
   17f68:	d0fa      	beq.n	17f60 <bt_mesh_proxy_beacon_send+0x2c>
}
   17f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(clients[i].conn, sub);
   17f6e:	f00c b918 	b.w	241a2 <beacon_send>
   17f72:	bf00      	nop
   17f74:	20007060 	.word	0x20007060
   17f78:	200072d8 	.word	0x200072d8
   17f7c:	2000746c 	.word	0x2000746c

00017f80 <bt_mesh_proxy_identity_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   17f80:	2301      	movs	r3, #1
{
   17f82:	b510      	push	{r4, lr}
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   17f84:	f880 3020 	strb.w	r3, [r0, #32]
{
   17f88:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   17f8a:	f00d fab4 	bl	254f6 <z_impl_k_uptime_get_32>
	next_idx = sub - bt_mesh.sub;
   17f8e:	4b07      	ldr	r3, [pc, #28]	; (17fac <bt_mesh_proxy_identity_start+0x2c>)
	sub->node_id_start = k_uptime_get_32();
   17f90:	6260      	str	r0, [r4, #36]	; 0x24
	next_idx = sub - bt_mesh.sub;
   17f92:	1ae4      	subs	r4, r4, r3
   17f94:	10a4      	asrs	r4, r4, #2
   17f96:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   17f9a:	ebc4 2444 	rsb	r4, r4, r4, lsl #9
   17f9e:	eb04 4484 	add.w	r4, r4, r4, lsl #18
   17fa2:	4b03      	ldr	r3, [pc, #12]	; (17fb0 <bt_mesh_proxy_identity_start+0x30>)
   17fa4:	4264      	negs	r4, r4
   17fa6:	601c      	str	r4, [r3, #0]
}
   17fa8:	bd10      	pop	{r4, pc}
   17faa:	bf00      	nop
   17fac:	200071f4 	.word	0x200071f4
   17fb0:	20000d40 	.word	0x20000d40

00017fb4 <bt_mesh_proxy_identity_enable>:
{
   17fb4:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
   17fb6:	f00a fffa 	bl	22fae <bt_mesh_is_provisioned>
   17fba:	b328      	cbz	r0, 18008 <bt_mesh_proxy_identity_enable+0x54>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   17fbc:	4c14      	ldr	r4, [pc, #80]	; (18010 <bt_mesh_proxy_identity_enable+0x5c>)
   17fbe:	f8b4 21b0 	ldrh.w	r2, [r4, #432]	; 0x1b0
   17fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17fc6:	429a      	cmp	r2, r3
   17fc8:	d019      	beq.n	17ffe <bt_mesh_proxy_identity_enable+0x4a>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_NOT_SUPPORTED) {
   17fca:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   17fce:	2b02      	cmp	r3, #2
   17fd0:	d015      	beq.n	17ffe <bt_mesh_proxy_identity_enable+0x4a>
		bt_mesh_proxy_identity_start(sub);
   17fd2:	f504 70ca 	add.w	r0, r4, #404	; 0x194
   17fd6:	f7ff ffd3 	bl	17f80 <bt_mesh_proxy_identity_start>
		count++;
   17fda:	2001      	movs	r0, #1
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   17fdc:	f8b4 2294 	ldrh.w	r2, [r4, #660]	; 0x294
   17fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17fe4:	429a      	cmp	r2, r3
   17fe6:	d00c      	beq.n	18002 <bt_mesh_proxy_identity_enable+0x4e>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_NOT_SUPPORTED) {
   17fe8:	f894 3298 	ldrb.w	r3, [r4, #664]	; 0x298
   17fec:	2b02      	cmp	r3, #2
   17fee:	d008      	beq.n	18002 <bt_mesh_proxy_identity_enable+0x4e>
		bt_mesh_proxy_identity_start(sub);
   17ff0:	4808      	ldr	r0, [pc, #32]	; (18014 <bt_mesh_proxy_identity_enable+0x60>)
   17ff2:	f7ff ffc5 	bl	17f80 <bt_mesh_proxy_identity_start>
		bt_mesh_adv_update();
   17ff6:	f7f3 f90b 	bl	b210 <bt_mesh_adv_update>
	return 0;
   17ffa:	2000      	movs	r0, #0
   17ffc:	e003      	b.n	18006 <bt_mesh_proxy_identity_enable+0x52>
	int i, count = 0;
   17ffe:	2000      	movs	r0, #0
   18000:	e7ec      	b.n	17fdc <bt_mesh_proxy_identity_enable+0x28>
	if (count) {
   18002:	2800      	cmp	r0, #0
   18004:	d1f7      	bne.n	17ff6 <bt_mesh_proxy_identity_enable+0x42>
}
   18006:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   18008:	f06f 000a 	mvn.w	r0, #10
   1800c:	e7fb      	b.n	18006 <bt_mesh_proxy_identity_enable+0x52>
   1800e:	bf00      	nop
   18010:	20007060 	.word	0x20007060
   18014:	200072d8 	.word	0x200072d8

00018018 <bt_mesh_proxy_get_buf>:
	buf->len  = 0;
   18018:	4803      	ldr	r0, [pc, #12]	; (18028 <bt_mesh_proxy_get_buf+0x10>)
   1801a:	2300      	movs	r3, #0
   1801c:	8383      	strh	r3, [r0, #28]
	buf->data = buf->__buf;
   1801e:	6a03      	ldr	r3, [r0, #32]
   18020:	f840 3f18 	str.w	r3, [r0, #24]!
}
   18024:	4770      	bx	lr
   18026:	bf00      	nop
   18028:	2000746c 	.word	0x2000746c

0001802c <bt_mesh_proxy_prov_enable>:
{
   1802c:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROV) {
   1802e:	4d0c      	ldr	r5, [pc, #48]	; (18060 <bt_mesh_proxy_prov_enable+0x34>)
   18030:	782c      	ldrb	r4, [r5, #0]
   18032:	2c01      	cmp	r4, #1
   18034:	d00e      	beq.n	18054 <bt_mesh_proxy_prov_enable+0x28>
	if (gatt_svc != MESH_GATT_NONE) {
   18036:	b984      	cbnz	r4, 1805a <bt_mesh_proxy_prov_enable+0x2e>
	bt_gatt_service_register(&prov_svc);
   18038:	480a      	ldr	r0, [pc, #40]	; (18064 <bt_mesh_proxy_prov_enable+0x38>)
   1803a:	f00a ff31 	bl	22ea0 <bt_gatt_service_register>
	prov_fast_adv = true;
   1803e:	4a0a      	ldr	r2, [pc, #40]	; (18068 <bt_mesh_proxy_prov_enable+0x3c>)
	gatt_svc = MESH_GATT_PROV;
   18040:	2301      	movs	r3, #1
   18042:	702b      	strb	r3, [r5, #0]
	prov_fast_adv = true;
   18044:	7013      	strb	r3, [r2, #0]
		if (clients[i].conn) {
   18046:	4b09      	ldr	r3, [pc, #36]	; (1806c <bt_mesh_proxy_prov_enable+0x40>)
   18048:	6818      	ldr	r0, [r3, #0]
   1804a:	b110      	cbz	r0, 18052 <bt_mesh_proxy_prov_enable+0x26>
			clients[i].filter_type = PROV;
   1804c:	2203      	movs	r2, #3
   1804e:	729a      	strb	r2, [r3, #10]
	return 0;
   18050:	4620      	mov	r0, r4
}
   18052:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   18054:	f06f 0044 	mvn.w	r0, #68	; 0x44
   18058:	e7fb      	b.n	18052 <bt_mesh_proxy_prov_enable+0x26>
		return -EBUSY;
   1805a:	f06f 000f 	mvn.w	r0, #15
   1805e:	e7f8      	b.n	18052 <bt_mesh_proxy_prov_enable+0x26>
   18060:	2000243c 	.word	0x2000243c
   18064:	2000751c 	.word	0x2000751c
   18068:	2000243d 	.word	0x2000243d
   1806c:	2000746c 	.word	0x2000746c

00018070 <bt_mesh_proxy_prov_disable>:
{
   18070:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   18072:	4d0d      	ldr	r5, [pc, #52]	; (180a8 <bt_mesh_proxy_prov_disable+0x38>)
   18074:	782b      	ldrb	r3, [r5, #0]
   18076:	b18b      	cbz	r3, 1809c <bt_mesh_proxy_prov_disable+0x2c>
	if (gatt_svc != MESH_GATT_PROV) {
   18078:	2b01      	cmp	r3, #1
   1807a:	d112      	bne.n	180a2 <bt_mesh_proxy_prov_disable+0x32>
	bt_gatt_service_unregister(&prov_svc);
   1807c:	480b      	ldr	r0, [pc, #44]	; (180ac <bt_mesh_proxy_prov_disable+0x3c>)
	gatt_svc = MESH_GATT_NONE;
   1807e:	2400      	movs	r4, #0
	bt_gatt_service_unregister(&prov_svc);
   18080:	f7f2 fb74 	bl	a76c <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   18084:	702c      	strb	r4, [r5, #0]
		if (client->conn && client->filter_type == PROV) {
   18086:	4d0a      	ldr	r5, [pc, #40]	; (180b0 <bt_mesh_proxy_prov_disable+0x40>)
   18088:	6828      	ldr	r0, [r5, #0]
   1808a:	b148      	cbz	r0, 180a0 <bt_mesh_proxy_prov_disable+0x30>
   1808c:	7aab      	ldrb	r3, [r5, #10]
   1808e:	2b03      	cmp	r3, #3
   18090:	d102      	bne.n	18098 <bt_mesh_proxy_prov_disable+0x28>
			bt_mesh_pb_gatt_close(client->conn);
   18092:	f7fe fd57 	bl	16b44 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
   18096:	72ac      	strb	r4, [r5, #10]
	return 0;
   18098:	4620      	mov	r0, r4
   1809a:	e001      	b.n	180a0 <bt_mesh_proxy_prov_disable+0x30>
		return -EALREADY;
   1809c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   180a0:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   180a2:	f06f 000f 	mvn.w	r0, #15
   180a6:	e7fb      	b.n	180a0 <bt_mesh_proxy_prov_disable+0x30>
   180a8:	2000243c 	.word	0x2000243c
   180ac:	2000751c 	.word	0x2000751c
   180b0:	2000746c 	.word	0x2000746c

000180b4 <bt_mesh_proxy_gatt_enable>:
{
   180b4:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
   180b6:	4d0b      	ldr	r5, [pc, #44]	; (180e4 <bt_mesh_proxy_gatt_enable+0x30>)
   180b8:	782c      	ldrb	r4, [r5, #0]
   180ba:	2c02      	cmp	r4, #2
   180bc:	d00c      	beq.n	180d8 <bt_mesh_proxy_gatt_enable+0x24>
	if (gatt_svc != MESH_GATT_NONE) {
   180be:	b974      	cbnz	r4, 180de <bt_mesh_proxy_gatt_enable+0x2a>
	bt_gatt_service_register(&proxy_svc);
   180c0:	4809      	ldr	r0, [pc, #36]	; (180e8 <bt_mesh_proxy_gatt_enable+0x34>)
   180c2:	f00a feed 	bl	22ea0 <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
   180c6:	2302      	movs	r3, #2
   180c8:	702b      	strb	r3, [r5, #0]
		if (clients[i].conn) {
   180ca:	4b08      	ldr	r3, [pc, #32]	; (180ec <bt_mesh_proxy_gatt_enable+0x38>)
   180cc:	6818      	ldr	r0, [r3, #0]
   180ce:	b110      	cbz	r0, 180d6 <bt_mesh_proxy_gatt_enable+0x22>
			clients[i].filter_type = WHITELIST;
   180d0:	2201      	movs	r2, #1
   180d2:	729a      	strb	r2, [r3, #10]
	return 0;
   180d4:	4620      	mov	r0, r4
}
   180d6:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   180d8:	f06f 0044 	mvn.w	r0, #68	; 0x44
   180dc:	e7fb      	b.n	180d6 <bt_mesh_proxy_gatt_enable+0x22>
		return -EBUSY;
   180de:	f06f 000f 	mvn.w	r0, #15
   180e2:	e7f8      	b.n	180d6 <bt_mesh_proxy_gatt_enable+0x22>
   180e4:	2000243c 	.word	0x2000243c
   180e8:	200075a0 	.word	0x200075a0
   180ec:	2000746c 	.word	0x2000746c

000180f0 <bt_mesh_proxy_gatt_disconnect>:
		if (client->conn && (client->filter_type == WHITELIST ||
   180f0:	4b06      	ldr	r3, [pc, #24]	; (1810c <bt_mesh_proxy_gatt_disconnect+0x1c>)
   180f2:	6818      	ldr	r0, [r3, #0]
   180f4:	b140      	cbz	r0, 18108 <bt_mesh_proxy_gatt_disconnect+0x18>
   180f6:	7a9a      	ldrb	r2, [r3, #10]
   180f8:	3a01      	subs	r2, #1
   180fa:	2a01      	cmp	r2, #1
   180fc:	d804      	bhi.n	18108 <bt_mesh_proxy_gatt_disconnect+0x18>
			client->filter_type = NONE;
   180fe:	2200      	movs	r2, #0
   18100:	729a      	strb	r2, [r3, #10]
			bt_conn_disconnect(client->conn,
   18102:	2113      	movs	r1, #19
   18104:	f00a b965 	b.w	223d2 <bt_conn_disconnect>
}
   18108:	4770      	bx	lr
   1810a:	bf00      	nop
   1810c:	2000746c 	.word	0x2000746c

00018110 <bt_mesh_proxy_gatt_disable>:
{
   18110:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   18112:	4c09      	ldr	r4, [pc, #36]	; (18138 <bt_mesh_proxy_gatt_disable+0x28>)
   18114:	7823      	ldrb	r3, [r4, #0]
   18116:	b14b      	cbz	r3, 1812c <bt_mesh_proxy_gatt_disable+0x1c>
	if (gatt_svc != MESH_GATT_PROXY) {
   18118:	2b02      	cmp	r3, #2
   1811a:	d10a      	bne.n	18132 <bt_mesh_proxy_gatt_disable+0x22>
	bt_mesh_proxy_gatt_disconnect();
   1811c:	f7ff ffe8 	bl	180f0 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
   18120:	4806      	ldr	r0, [pc, #24]	; (1813c <bt_mesh_proxy_gatt_disable+0x2c>)
   18122:	f7f2 fb23 	bl	a76c <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   18126:	2000      	movs	r0, #0
   18128:	7020      	strb	r0, [r4, #0]
}
   1812a:	bd10      	pop	{r4, pc}
		return -EALREADY;
   1812c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   18130:	e7fb      	b.n	1812a <bt_mesh_proxy_gatt_disable+0x1a>
		return -EBUSY;
   18132:	f06f 000f 	mvn.w	r0, #15
   18136:	e7f8      	b.n	1812a <bt_mesh_proxy_gatt_disable+0x1a>
   18138:	2000243c 	.word	0x2000243c
   1813c:	200075a0 	.word	0x200075a0

00018140 <bt_mesh_proxy_send>:
{
   18140:	b538      	push	{r3, r4, r5, lr}
		if (clients[i].conn == conn) {
   18142:	4c1b      	ldr	r4, [pc, #108]	; (181b0 <bt_mesh_proxy_send+0x70>)
   18144:	6825      	ldr	r5, [r4, #0]
   18146:	4285      	cmp	r5, r0
   18148:	d010      	beq.n	1816c <bt_mesh_proxy_send+0x2c>
		BT_ERR("No Proxy Client found");
   1814a:	2301      	movs	r3, #1
   1814c:	f04f 0100 	mov.w	r1, #0
   18150:	f363 0107 	bfi	r1, r3, #0, #8
   18154:	4a17      	ldr	r2, [pc, #92]	; (181b4 <bt_mesh_proxy_send+0x74>)
   18156:	4b18      	ldr	r3, [pc, #96]	; (181b8 <bt_mesh_proxy_send+0x78>)
   18158:	4818      	ldr	r0, [pc, #96]	; (181bc <bt_mesh_proxy_send+0x7c>)
   1815a:	1a9b      	subs	r3, r3, r2
   1815c:	08db      	lsrs	r3, r3, #3
   1815e:	f363 118f 	bfi	r1, r3, #6, #10
   18162:	f008 fd4f 	bl	20c04 <log_0>
		return -ENOTCONN;
   18166:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   1816a:	bd38      	pop	{r3, r4, r5, pc}
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
   1816c:	7aa4      	ldrb	r4, [r4, #10]
   1816e:	1ee5      	subs	r5, r4, #3
   18170:	426c      	negs	r4, r5
   18172:	f1a1 0c03 	sub.w	ip, r1, #3
   18176:	416c      	adcs	r4, r5
   18178:	f1dc 0300 	rsbs	r3, ip, #0
   1817c:	eb43 030c 	adc.w	r3, r3, ip
   18180:	429c      	cmp	r4, r3
   18182:	d010      	beq.n	181a6 <bt_mesh_proxy_send+0x66>
		BT_ERR("Invalid PDU type for Proxy Client");
   18184:	2301      	movs	r3, #1
   18186:	f04f 0100 	mov.w	r1, #0
   1818a:	f363 0107 	bfi	r1, r3, #0, #8
   1818e:	4a09      	ldr	r2, [pc, #36]	; (181b4 <bt_mesh_proxy_send+0x74>)
   18190:	4b09      	ldr	r3, [pc, #36]	; (181b8 <bt_mesh_proxy_send+0x78>)
   18192:	480b      	ldr	r0, [pc, #44]	; (181c0 <bt_mesh_proxy_send+0x80>)
   18194:	1a9b      	subs	r3, r3, r2
   18196:	08db      	lsrs	r3, r3, #3
   18198:	f363 118f 	bfi	r1, r3, #6, #10
   1819c:	f008 fd32 	bl	20c04 <log_0>
		return -EINVAL;
   181a0:	f06f 0015 	mvn.w	r0, #21
   181a4:	e7e1      	b.n	1816a <bt_mesh_proxy_send+0x2a>
}
   181a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
   181aa:	f00b bfb1 	b.w	24110 <proxy_segment_and_send>
   181ae:	bf00      	nop
   181b0:	2000746c 	.word	0x2000746c
   181b4:	00025880 	.word	0x00025880
   181b8:	00025958 	.word	0x00025958
   181bc:	0002bced 	.word	0x0002bced
   181c0:	0002bd03 	.word	0x0002bd03

000181c4 <bt_mesh_proxy_relay>:
{
   181c4:	b530      	push	{r4, r5, lr}
		if (!client->conn) {
   181c6:	4c1a      	ldr	r4, [pc, #104]	; (18230 <bt_mesh_proxy_relay+0x6c>)
{
   181c8:	b08d      	sub	sp, #52	; 0x34
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   181ca:	ab04      	add	r3, sp, #16
   181cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   181d0:	9301      	str	r3, [sp, #4]
   181d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
		if (!client->conn) {
   181d6:	6823      	ldr	r3, [r4, #0]
{
   181d8:	4605      	mov	r5, r0
		if (!client->conn) {
   181da:	b33b      	cbz	r3, 1822c <bt_mesh_proxy_relay+0x68>
	if (client->filter_type == WHITELIST) {
   181dc:	7aa3      	ldrb	r3, [r4, #10]
   181de:	2b01      	cmp	r3, #1
   181e0:	d119      	bne.n	18216 <bt_mesh_proxy_relay+0x52>
			if (client->filter[i] == addr) {
   181e2:	88a3      	ldrh	r3, [r4, #4]
   181e4:	428b      	cmp	r3, r1
   181e6:	d005      	beq.n	181f4 <bt_mesh_proxy_relay+0x30>
   181e8:	88e3      	ldrh	r3, [r4, #6]
   181ea:	428b      	cmp	r3, r1
   181ec:	d002      	beq.n	181f4 <bt_mesh_proxy_relay+0x30>
   181ee:	8923      	ldrh	r3, [r4, #8]
   181f0:	428b      	cmp	r3, r1
   181f2:	d11b      	bne.n	1822c <bt_mesh_proxy_relay+0x68>
		net_buf_simple_reserve(&msg, 1);
   181f4:	2101      	movs	r1, #1
   181f6:	a801      	add	r0, sp, #4
   181f8:	f00c fd03 	bl	24c02 <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
   181fc:	88aa      	ldrh	r2, [r5, #4]
   181fe:	6829      	ldr	r1, [r5, #0]
   18200:	a801      	add	r0, sp, #4
   18202:	f00c fd69 	bl	24cd8 <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, &msg);
   18206:	aa01      	add	r2, sp, #4
   18208:	2100      	movs	r1, #0
   1820a:	6820      	ldr	r0, [r4, #0]
   1820c:	f7ff ff98 	bl	18140 <bt_mesh_proxy_send>
		relayed = true;
   18210:	2001      	movs	r0, #1
}
   18212:	b00d      	add	sp, #52	; 0x34
   18214:	bd30      	pop	{r4, r5, pc}
	if (client->filter_type == BLACKLIST) {
   18216:	2b02      	cmp	r3, #2
   18218:	d108      	bne.n	1822c <bt_mesh_proxy_relay+0x68>
			if (client->filter[i] == addr) {
   1821a:	88a3      	ldrh	r3, [r4, #4]
   1821c:	428b      	cmp	r3, r1
   1821e:	d005      	beq.n	1822c <bt_mesh_proxy_relay+0x68>
   18220:	88e3      	ldrh	r3, [r4, #6]
   18222:	428b      	cmp	r3, r1
   18224:	d002      	beq.n	1822c <bt_mesh_proxy_relay+0x68>
   18226:	8923      	ldrh	r3, [r4, #8]
   18228:	428b      	cmp	r3, r1
   1822a:	d1e3      	bne.n	181f4 <bt_mesh_proxy_relay+0x30>
	bool relayed = false;
   1822c:	2000      	movs	r0, #0
   1822e:	e7f0      	b.n	18212 <bt_mesh_proxy_relay+0x4e>
   18230:	2000746c 	.word	0x2000746c

00018234 <bt_mesh_proxy_adv_start>:
	return prov_sd_len;
}
#endif /* CONFIG_BT_MESH_PB_GATT */

s32_t bt_mesh_proxy_adv_start(void)
{
   18234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("");

	if (gatt_svc == MESH_GATT_NONE) {
   18238:	4bb0      	ldr	r3, [pc, #704]	; (184fc <bt_mesh_proxy_adv_start+0x2c8>)
   1823a:	781b      	ldrb	r3, [r3, #0]
{
   1823c:	b087      	sub	sp, #28
	if (gatt_svc == MESH_GATT_NONE) {
   1823e:	b913      	cbnz	r3, 18246 <bt_mesh_proxy_adv_start+0x12>
		return remaining;
   18240:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18244:	e06f      	b.n	18326 <bt_mesh_proxy_adv_start+0xf2>
		return K_FOREVER;
	}

#if defined(CONFIG_BT_MESH_PB_GATT)
	if (!bt_mesh_is_provisioned()) {
   18246:	f00a feb2 	bl	22fae <bt_mesh_is_provisioned>
   1824a:	4681      	mov	r9, r0
   1824c:	2800      	cmp	r0, #0
   1824e:	d170      	bne.n	18332 <bt_mesh_proxy_adv_start+0xfe>
		const struct bt_le_adv_param *param;
		struct bt_data prov_sd[2];
		size_t prov_sd_len;

		if (prov_fast_adv) {
   18250:	4cab      	ldr	r4, [pc, #684]	; (18500 <bt_mesh_proxy_adv_start+0x2cc>)
			param = &fast_adv_param;
		} else {
			param = &slow_adv_param;
   18252:	4bac      	ldr	r3, [pc, #688]	; (18504 <bt_mesh_proxy_adv_start+0x2d0>)
		if (prov_fast_adv) {
   18254:	7822      	ldrb	r2, [r4, #0]
			param = &slow_adv_param;
   18256:	4dac      	ldr	r5, [pc, #688]	; (18508 <bt_mesh_proxy_adv_start+0x2d4>)
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   18258:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 18548 <bt_mesh_proxy_adv_start+0x314>
			param = &slow_adv_param;
   1825c:	2a00      	cmp	r2, #0
   1825e:	bf08      	it	eq
   18260:	461d      	moveq	r5, r3
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   18262:	f7ff fa39 	bl	176d8 <bt_mesh_prov_get>
   18266:	4683      	mov	fp, r0
	const char *name = bt_get_name();
   18268:	f7ef fde0 	bl	7e2c <bt_get_name>
   1826c:	4680      	mov	r8, r0
	size_t name_len = strlen(name);
   1826e:	f009 fdd0 	bl	21e12 <strlen>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   18272:	2210      	movs	r2, #16
	size_t name_len = strlen(name);
   18274:	4607      	mov	r7, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   18276:	f8db 1000 	ldr.w	r1, [fp]
   1827a:	f10a 0002 	add.w	r0, sl, #2
   1827e:	f009 fe02 	bl	21e86 <memcpy>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   18282:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	dst[1] = val;
   18286:	f88a 3013 	strb.w	r3, [sl, #19]
	dst[0] = val >> 8;
   1828a:	0a1a      	lsrs	r2, r3, #8
   1828c:	f88a 2012 	strb.w	r2, [sl, #18]
	if (prov->uri) {
   18290:	f8db 0004 	ldr.w	r0, [fp, #4]
   18294:	f10d 0a08 	add.w	sl, sp, #8
   18298:	2800      	cmp	r0, #0
   1829a:	d048      	beq.n	1832e <bt_mesh_proxy_adv_start+0xfa>
		size_t uri_len = strlen(prov->uri);
   1829c:	f009 fdb9 	bl	21e12 <strlen>
		if (uri_len > 29) {
   182a0:	281d      	cmp	r0, #29
   182a2:	d922      	bls.n	182ea <bt_mesh_proxy_adv_start+0xb6>
			BT_WARN("Too long URI to fit advertising packet");
   182a4:	2302      	movs	r3, #2
   182a6:	f04f 0100 	mov.w	r1, #0
   182aa:	4a98      	ldr	r2, [pc, #608]	; (1850c <bt_mesh_proxy_adv_start+0x2d8>)
   182ac:	4898      	ldr	r0, [pc, #608]	; (18510 <bt_mesh_proxy_adv_start+0x2dc>)
   182ae:	f363 0107 	bfi	r1, r3, #0, #8
   182b2:	4b98      	ldr	r3, [pc, #608]	; (18514 <bt_mesh_proxy_adv_start+0x2e0>)
   182b4:	1a9b      	subs	r3, r3, r2
   182b6:	08db      	lsrs	r3, r3, #3
   182b8:	f363 118f 	bfi	r1, r3, #6, #10
   182bc:	f008 fca2 	bl	20c04 <log_0>
	size_t sd_space = 31;
   182c0:	221f      	movs	r2, #31
	size_t prov_sd_len = 0;
   182c2:	4648      	mov	r0, r9
	if (sd_space > 2 && name_len > 0) {
   182c4:	b1ff      	cbz	r7, 18306 <bt_mesh_proxy_adv_start+0xd2>
		sd_space -= 2;
   182c6:	3a02      	subs	r2, #2
		if (sd_space < name_len) {
   182c8:	4297      	cmp	r7, r2
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   182ca:	eb0a 03c0 	add.w	r3, sl, r0, lsl #3
   182ce:	bf8b      	itete	hi
   182d0:	2108      	movhi	r1, #8
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   182d2:	2209      	movls	r2, #9
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   182d4:	f80a 1030 	strbhi.w	r1, [sl, r0, lsl #3]
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   182d8:	f80a 2030 	strbls.w	r2, [sl, r0, lsl #3]
			prov_sd[prov_sd_len].data_len = sd_space;
   182dc:	bf8c      	ite	hi
   182de:	705a      	strbhi	r2, [r3, #1]
			prov_sd[prov_sd_len].data_len = name_len;
   182e0:	705f      	strbls	r7, [r3, #1]
		prov_sd[prov_sd_len].data = name;
   182e2:	f8c3 8004 	str.w	r8, [r3, #4]
		prov_sd_len++;
   182e6:	3001      	adds	r0, #1
   182e8:	e00d      	b.n	18306 <bt_mesh_proxy_adv_start+0xd2>
			prov_sd[0].type = BT_DATA_URI;
   182ea:	2324      	movs	r3, #36	; 0x24
			prov_sd[0].data_len = uri_len;
   182ec:	f88d 0009 	strb.w	r0, [sp, #9]
			sd_space -= 2 + uri_len;
   182f0:	f1c0 021d 	rsb	r2, r0, #29
			prov_sd[0].type = BT_DATA_URI;
   182f4:	f88d 3008 	strb.w	r3, [sp, #8]
			prov_sd[0].data = prov->uri;
   182f8:	f8db 3004 	ldr.w	r3, [fp, #4]
   182fc:	9303      	str	r3, [sp, #12]
	if (sd_space > 2 && name_len > 0) {
   182fe:	2a02      	cmp	r2, #2
			prov_sd_len++;
   18300:	f04f 0001 	mov.w	r0, #1
	if (sd_space > 2 && name_len > 0) {
   18304:	d8de      	bhi.n	182c4 <bt_mesh_proxy_adv_start+0x90>
		}

		prov_sd_len = gatt_prov_adv_create(prov_sd);

		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
   18306:	9000      	str	r0, [sp, #0]
   18308:	4653      	mov	r3, sl
   1830a:	2203      	movs	r2, #3
   1830c:	4982      	ldr	r1, [pc, #520]	; (18518 <bt_mesh_proxy_adv_start+0x2e4>)
   1830e:	4628      	mov	r0, r5
   18310:	f009 ffeb 	bl	222ea <bt_le_adv_start>
   18314:	b968      	cbnz	r0, 18332 <bt_mesh_proxy_adv_start+0xfe>
				    prov_sd, prov_sd_len) == 0) {
			proxy_adv_enabled = true;
   18316:	4b81      	ldr	r3, [pc, #516]	; (1851c <bt_mesh_proxy_adv_start+0x2e8>)
   18318:	2201      	movs	r2, #1
   1831a:	701a      	strb	r2, [r3, #0]

			/* Advertise 60 seconds using fast interval */
			if (prov_fast_adv) {
   1831c:	7823      	ldrb	r3, [r4, #0]
   1831e:	b143      	cbz	r3, 18332 <bt_mesh_proxy_adv_start+0xfe>
				prov_fast_adv = false;
   18320:	7020      	strb	r0, [r4, #0]
				return K_SECONDS(60);
   18322:	f64e 2460 	movw	r4, #60000	; 0xea60
		return gatt_proxy_advertise(next_sub());
	}
#endif /* GATT_PROXY */

	return K_FOREVER;
}
   18326:	4620      	mov	r0, r4
   18328:	b007      	add	sp, #28
   1832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t sd_space = 31;
   1832e:	221f      	movs	r2, #31
   18330:	e7c8      	b.n	182c4 <bt_mesh_proxy_adv_start+0x90>
	if (bt_mesh_is_provisioned()) {
   18332:	f00a fe3c 	bl	22fae <bt_mesh_is_provisioned>
   18336:	2800      	cmp	r0, #0
   18338:	d082      	beq.n	18240 <bt_mesh_proxy_adv_start+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   1833a:	f7ff facf 	bl	178dc <next_sub.part.5>
   1833e:	4f75      	ldr	r7, [pc, #468]	; (18514 <bt_mesh_proxy_adv_start+0x2e0>)
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   18340:	4b72      	ldr	r3, [pc, #456]	; (1850c <bt_mesh_proxy_adv_start+0x2d8>)
	if (conn_count == CONFIG_BT_MAX_CONN) {
   18342:	f8df a208 	ldr.w	sl, [pc, #520]	; 1854c <bt_mesh_proxy_adv_start+0x318>
	proxy_svc_data[2] = ID_TYPE_NODE;
   18346:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 18538 <bt_mesh_proxy_adv_start+0x304>
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   1834a:	1aff      	subs	r7, r7, r3
   1834c:	4605      	mov	r5, r0
   1834e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
	if (conn_count == CONFIG_BT_MAX_CONN) {
   18352:	f8da 3000 	ldr.w	r3, [sl]
   18356:	2b01      	cmp	r3, #1
   18358:	d10a      	bne.n	18370 <bt_mesh_proxy_adv_start+0x13c>
		BT_WARN("Connectable advertising deferred (max connections)");
   1835a:	f04f 0100 	mov.w	r1, #0
   1835e:	2302      	movs	r3, #2
   18360:	f363 0107 	bfi	r1, r3, #0, #8
   18364:	486e      	ldr	r0, [pc, #440]	; (18520 <bt_mesh_proxy_adv_start+0x2ec>)
   18366:	f367 118f 	bfi	r1, r7, #6, #10
   1836a:	f008 fc4b 	bl	20c04 <log_0>
   1836e:	e767      	b.n	18240 <bt_mesh_proxy_adv_start+0xc>
	if (!sub) {
   18370:	b945      	cbnz	r5, 18384 <bt_mesh_proxy_adv_start+0x150>
		BT_WARN("No subnets to advertise on");
   18372:	f04f 0100 	mov.w	r1, #0
   18376:	2302      	movs	r3, #2
   18378:	f363 0107 	bfi	r1, r3, #0, #8
   1837c:	f367 118f 	bfi	r1, r7, #6, #10
   18380:	4868      	ldr	r0, [pc, #416]	; (18524 <bt_mesh_proxy_adv_start+0x2f0>)
   18382:	e7f2      	b.n	1836a <bt_mesh_proxy_adv_start+0x136>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
   18384:	f895 8020 	ldrb.w	r8, [r5, #32]
   18388:	f1b8 0f01 	cmp.w	r8, #1
   1838c:	f040 80a2 	bne.w	184d4 <bt_mesh_proxy_adv_start+0x2a0>
   18390:	f00d f8b1 	bl	254f6 <z_impl_k_uptime_get_32>
		u32_t active = k_uptime_get_32() - sub->node_id_start;
   18394:	6a6c      	ldr	r4, [r5, #36]	; 0x24
		if (active < NODE_ID_TIMEOUT) {
   18396:	f64e 235f 	movw	r3, #59999	; 0xea5f
		u32_t active = k_uptime_get_32() - sub->node_id_start;
   1839a:	1b02      	subs	r2, r0, r4
		if (active < NODE_ID_TIMEOUT) {
   1839c:	429a      	cmp	r2, r3
   1839e:	f200 8095 	bhi.w	184cc <bt_mesh_proxy_adv_start+0x298>
			remaining = NODE_ID_TIMEOUT - active;
   183a2:	f504 446a 	add.w	r4, r4, #59904	; 0xea00
   183a6:	3460      	adds	r4, #96	; 0x60
	err = bt_rand(proxy_svc_data + 11, 8);
   183a8:	2108      	movs	r1, #8
			remaining = NODE_ID_TIMEOUT - active;
   183aa:	1a24      	subs	r4, r4, r0
	err = bt_rand(proxy_svc_data + 11, 8);
   183ac:	485e      	ldr	r0, [pc, #376]	; (18528 <bt_mesh_proxy_adv_start+0x2f4>)
	proxy_svc_data[2] = ID_TYPE_NODE;
   183ae:	f889 8002 	strb.w	r8, [r9, #2]
	err = bt_rand(proxy_svc_data + 11, 8);
   183b2:	f00c f8e0 	bl	24576 <bt_rand>
	if (err) {
   183b6:	4601      	mov	r1, r0
   183b8:	2800      	cmp	r0, #0
   183ba:	d135      	bne.n	18428 <bt_mesh_proxy_adv_start+0x1f4>
	(void)memset(tmp, 0, 6);
   183bc:	2206      	movs	r2, #6
   183be:	a802      	add	r0, sp, #8
   183c0:	f009 fd8b 	bl	21eda <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
   183c4:	2208      	movs	r2, #8
   183c6:	4958      	ldr	r1, [pc, #352]	; (18528 <bt_mesh_proxy_adv_start+0x2f4>)
   183c8:	f10d 000e 	add.w	r0, sp, #14
   183cc:	f009 fd5b 	bl	21e86 <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
   183d0:	f7f7 f87c 	bl	f4cc <bt_mesh_primary_addr>
   183d4:	ba40      	rev16	r0, r0
   183d6:	f8ad 0016 	strh.w	r0, [sp, #22]
	err = bt_encrypt_be(sub->keys[sub->kr_flag].identity, tmp, tmp);
   183da:	7fab      	ldrb	r3, [r5, #30]
   183dc:	2059      	movs	r0, #89	; 0x59
   183de:	fb03 0000 	mla	r0, r3, r0, r0
   183e2:	aa02      	add	r2, sp, #8
   183e4:	4611      	mov	r1, r2
   183e6:	4428      	add	r0, r5
   183e8:	f00c f8df 	bl	245aa <bt_encrypt_be>
	if (err) {
   183ec:	4683      	mov	fp, r0
   183ee:	b9d8      	cbnz	r0, 18428 <bt_mesh_proxy_adv_start+0x1f4>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   183f0:	2208      	movs	r2, #8
   183f2:	a904      	add	r1, sp, #16
   183f4:	484d      	ldr	r0, [pc, #308]	; (1852c <bt_mesh_proxy_adv_start+0x2f8>)
   183f6:	f009 fd46 	bl	21e86 <memcpy>
	err = bt_le_adv_start(&fast_adv_param, node_id_ad,
   183fa:	494d      	ldr	r1, [pc, #308]	; (18530 <bt_mesh_proxy_adv_start+0x2fc>)
   183fc:	f8cd b000 	str.w	fp, [sp]
   18400:	465b      	mov	r3, fp
   18402:	2203      	movs	r2, #3
   18404:	4840      	ldr	r0, [pc, #256]	; (18508 <bt_mesh_proxy_adv_start+0x2d4>)
   18406:	f009 ff70 	bl	222ea <bt_le_adv_start>
	if (err) {
   1840a:	4601      	mov	r1, r0
   1840c:	2800      	cmp	r0, #0
   1840e:	d059      	beq.n	184c4 <bt_mesh_proxy_adv_start+0x290>
		BT_WARN("Failed to advertise using Node ID (err %d)", err);
   18410:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   18414:	f043 0302 	orr.w	r3, r3, #2
   18418:	f363 0607 	bfi	r6, r3, #0, #8
   1841c:	f367 168f 	bfi	r6, r7, #6, #10
   18420:	4632      	mov	r2, r6
   18422:	4844      	ldr	r0, [pc, #272]	; (18534 <bt_mesh_proxy_adv_start+0x300>)
   18424:	f008 fbfb 	bl	20c1e <log_1>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
   18428:	f895 b020 	ldrb.w	fp, [r5, #32]
   1842c:	f1bb 0f00 	cmp.w	fp, #0
   18430:	d124      	bne.n	1847c <bt_mesh_proxy_adv_start+0x248>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   18432:	f7f9 fc1d 	bl	11c70 <bt_mesh_gatt_proxy_get>
   18436:	2801      	cmp	r0, #1
   18438:	4680      	mov	r8, r0
   1843a:	d152      	bne.n	184e2 <bt_mesh_proxy_adv_start+0x2ae>
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   1843c:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
   1843e:	483e      	ldr	r0, [pc, #248]	; (18538 <bt_mesh_proxy_adv_start+0x304>)
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   18440:	2259      	movs	r2, #89	; 0x59
   18442:	fb02 5101 	mla	r1, r2, r1, r5
	proxy_svc_data[2] = ID_TYPE_NET;
   18446:	f880 b002 	strb.w	fp, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   1844a:	2208      	movs	r2, #8
   1844c:	3151      	adds	r1, #81	; 0x51
   1844e:	3003      	adds	r0, #3
   18450:	f009 fd19 	bl	21e86 <memcpy>
	err = bt_le_adv_start(&slow_adv_param, net_id_ad,
   18454:	4939      	ldr	r1, [pc, #228]	; (1853c <bt_mesh_proxy_adv_start+0x308>)
   18456:	f8cd b000 	str.w	fp, [sp]
   1845a:	465b      	mov	r3, fp
   1845c:	2203      	movs	r2, #3
   1845e:	4829      	ldr	r0, [pc, #164]	; (18504 <bt_mesh_proxy_adv_start+0x2d0>)
   18460:	f009 ff43 	bl	222ea <bt_le_adv_start>
	if (err) {
   18464:	4601      	mov	r1, r0
   18466:	b3c0      	cbz	r0, 184da <bt_mesh_proxy_adv_start+0x2a6>
		BT_WARN("Failed to advertise using Network ID (err %d)", err);
   18468:	f04f 0200 	mov.w	r2, #0
   1846c:	2302      	movs	r3, #2
   1846e:	f363 0207 	bfi	r2, r3, #0, #8
   18472:	f367 128f 	bfi	r2, r7, #6, #10
   18476:	4832      	ldr	r0, [pc, #200]	; (18540 <bt_mesh_proxy_adv_start+0x30c>)
   18478:	f008 fbd1 	bl	20c1e <log_1>
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   1847c:	4d31      	ldr	r5, [pc, #196]	; (18544 <bt_mesh_proxy_adv_start+0x310>)
   1847e:	f8b5 21b0 	ldrh.w	r2, [r5, #432]	; 0x1b0
   18482:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18486:	429a      	cmp	r2, r3
   18488:	d035      	beq.n	184f6 <bt_mesh_proxy_adv_start+0x2c2>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   1848a:	f895 31b4 	ldrb.w	r3, [r5, #436]	; 0x1b4
   1848e:	2b01      	cmp	r3, #1
   18490:	d003      	beq.n	1849a <bt_mesh_proxy_adv_start+0x266>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   18492:	f7f9 fbed 	bl	11c70 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   18496:	2801      	cmp	r0, #1
   18498:	d12d      	bne.n	184f6 <bt_mesh_proxy_adv_start+0x2c2>
			count++;
   1849a:	2601      	movs	r6, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   1849c:	f8b5 2294 	ldrh.w	r2, [r5, #660]	; 0x294
   184a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   184a4:	429a      	cmp	r2, r3
   184a6:	f43f af3e 	beq.w	18326 <bt_mesh_proxy_adv_start+0xf2>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   184aa:	f895 3298 	ldrb.w	r3, [r5, #664]	; 0x298
   184ae:	2b01      	cmp	r3, #1
   184b0:	d11b      	bne.n	184ea <bt_mesh_proxy_adv_start+0x2b6>
	if (subnet_count > 1) {
   184b2:	2e00      	cmp	r6, #0
   184b4:	f43f af37 	beq.w	18326 <bt_mesh_proxy_adv_start+0xf2>
		max_timeout = MAX(max_timeout, K_SECONDS(1));
   184b8:	f242 7310 	movw	r3, #10000	; 0x2710
   184bc:	429c      	cmp	r4, r3
   184be:	bf28      	it	cs
   184c0:	461c      	movcs	r4, r3
   184c2:	e730      	b.n	18326 <bt_mesh_proxy_adv_start+0xf2>
	proxy_adv_enabled = true;
   184c4:	4b15      	ldr	r3, [pc, #84]	; (1851c <bt_mesh_proxy_adv_start+0x2e8>)
   184c6:	f883 8000 	strb.w	r8, [r3]
	return 0;
   184ca:	e7ad      	b.n	18428 <bt_mesh_proxy_adv_start+0x1f4>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   184cc:	2300      	movs	r3, #0
   184ce:	f885 3020 	strb.w	r3, [r5, #32]
	sub->node_id_start = 0U;
   184d2:	626b      	str	r3, [r5, #36]	; 0x24
	s32_t remaining = K_FOREVER;
   184d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   184d8:	e7a6      	b.n	18428 <bt_mesh_proxy_adv_start+0x1f4>
	proxy_adv_enabled = true;
   184da:	4b10      	ldr	r3, [pc, #64]	; (1851c <bt_mesh_proxy_adv_start+0x2e8>)
   184dc:	f883 8000 	strb.w	r8, [r3]
	return 0;
   184e0:	e7cc      	b.n	1847c <bt_mesh_proxy_adv_start+0x248>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   184e2:	f7ff f9fb 	bl	178dc <next_sub.part.5>
   184e6:	4605      	mov	r5, r0
   184e8:	e733      	b.n	18352 <bt_mesh_proxy_adv_start+0x11e>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   184ea:	f7f9 fbc1 	bl	11c70 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   184ee:	2801      	cmp	r0, #1
   184f0:	f47f af19 	bne.w	18326 <bt_mesh_proxy_adv_start+0xf2>
   184f4:	e7dd      	b.n	184b2 <bt_mesh_proxy_adv_start+0x27e>
   184f6:	2600      	movs	r6, #0
   184f8:	e7d0      	b.n	1849c <bt_mesh_proxy_adv_start+0x268>
   184fa:	bf00      	nop
   184fc:	2000243c 	.word	0x2000243c
   18500:	2000243d 	.word	0x2000243d
   18504:	000263d6 	.word	0x000263d6
   18508:	000263d0 	.word	0x000263d0
   1850c:	00025880 	.word	0x00025880
   18510:	0002bbfb 	.word	0x0002bbfb
   18514:	00025958 	.word	0x00025958
   18518:	00026348 	.word	0x00026348
   1851c:	2000243e 	.word	0x2000243e
   18520:	0002bc22 	.word	0x0002bc22
   18524:	0002bc55 	.word	0x0002bc55
   18528:	200077c9 	.word	0x200077c9
   1852c:	200077c1 	.word	0x200077c1
   18530:	00026330 	.word	0x00026330
   18534:	0002bc70 	.word	0x0002bc70
   18538:	200077be 	.word	0x200077be
   1853c:	00026318 	.word	0x00026318
   18540:	0002bc9b 	.word	0x0002bc9b
   18544:	20007060 	.word	0x20007060
   18548:	200077aa 	.word	0x200077aa
   1854c:	20000d3c 	.word	0x20000d3c

00018550 <bt_mesh_proxy_adv_stop>:

void bt_mesh_proxy_adv_stop(void)
{
   18550:	b510      	push	{r4, lr}
	int err;

	BT_DBG("adv_enabled %u", proxy_adv_enabled);

	if (!proxy_adv_enabled) {
   18552:	4c0c      	ldr	r4, [pc, #48]	; (18584 <bt_mesh_proxy_adv_stop+0x34>)
   18554:	7823      	ldrb	r3, [r4, #0]
   18556:	b1a3      	cbz	r3, 18582 <bt_mesh_proxy_adv_stop+0x32>
		return;
	}

	err = bt_le_adv_stop();
   18558:	f7ef fe3e 	bl	81d8 <bt_le_adv_stop>
	if (err) {
   1855c:	4601      	mov	r1, r0
   1855e:	b178      	cbz	r0, 18580 <bt_mesh_proxy_adv_stop+0x30>
		BT_ERR("Failed to stop advertising (err %d)", err);
   18560:	2301      	movs	r3, #1
   18562:	f04f 0200 	mov.w	r2, #0
   18566:	f363 0207 	bfi	r2, r3, #0, #8
   1856a:	4807      	ldr	r0, [pc, #28]	; (18588 <bt_mesh_proxy_adv_stop+0x38>)
   1856c:	4b07      	ldr	r3, [pc, #28]	; (1858c <bt_mesh_proxy_adv_stop+0x3c>)
   1856e:	1a1b      	subs	r3, r3, r0
   18570:	08db      	lsrs	r3, r3, #3
   18572:	f363 128f 	bfi	r2, r3, #6, #10
   18576:	4806      	ldr	r0, [pc, #24]	; (18590 <bt_mesh_proxy_adv_stop+0x40>)
	} else {
		proxy_adv_enabled = false;
	}
}
   18578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to stop advertising (err %d)", err);
   1857c:	f008 bb4f 	b.w	20c1e <log_1>
		proxy_adv_enabled = false;
   18580:	7020      	strb	r0, [r4, #0]
}
   18582:	bd10      	pop	{r4, pc}
   18584:	2000243e 	.word	0x2000243e
   18588:	00025880 	.word	0x00025880
   1858c:	00025958 	.word	0x00025958
   18590:	0002bcc9 	.word	0x0002bcc9

00018594 <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
   18594:	b508      	push	{r3, lr}

	/* Initialize the client receive buffers */
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		client->buf.size = CLIENT_BUF_SIZE;
   18596:	4b05      	ldr	r3, [pc, #20]	; (185ac <bt_mesh_proxy_init+0x18>)
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
	}

	bt_conn_cb_register(&conn_callbacks);
   18598:	4805      	ldr	r0, [pc, #20]	; (185b0 <bt_mesh_proxy_init+0x1c>)
		client->buf.size = CLIENT_BUF_SIZE;
   1859a:	2244      	movs	r2, #68	; 0x44
   1859c:	83da      	strh	r2, [r3, #30]
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   1859e:	4a05      	ldr	r2, [pc, #20]	; (185b4 <bt_mesh_proxy_init+0x20>)
   185a0:	621a      	str	r2, [r3, #32]
	bt_conn_cb_register(&conn_callbacks);
   185a2:	f7f0 f84d 	bl	8640 <bt_conn_cb_register>

	return 0;
}
   185a6:	2000      	movs	r0, #0
   185a8:	bd08      	pop	{r3, pc}
   185aa:	bf00      	nop
   185ac:	2000746c 	.word	0x2000746c
   185b0:	20007490 	.word	0x20007490
   185b4:	20006aef 	.word	0x20006aef

000185b8 <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   185b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   185bc:	4f11      	ldr	r7, [pc, #68]	; (18604 <mayfly_init+0x4c>)
   185be:	f8df 9048 	ldr.w	r9, [pc, #72]	; 18608 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   185c2:	2604      	movs	r6, #4
	while (callee_id--) {
   185c4:	3e01      	subs	r6, #1
   185c6:	b2f6      	uxtb	r6, r6
   185c8:	2eff      	cmp	r6, #255	; 0xff
   185ca:	d019      	beq.n	18600 <mayfly_init+0x48>
   185cc:	b233      	sxth	r3, r6
   185ce:	ea4f 0883 	mov.w	r8, r3, lsl #2
   185d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   185d6:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
   185d8:	2404      	movs	r4, #4
   185da:	f04f 0a0c 	mov.w	sl, #12
   185de:	e00a      	b.n	185f6 <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
   185e0:	fb1a 5104 	smlabb	r1, sl, r4, r5
   185e4:	1d0a      	adds	r2, r1, #4
   185e6:	eb04 0008 	add.w	r0, r4, r8
   185ea:	443a      	add	r2, r7
   185ec:	4439      	add	r1, r7
   185ee:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
   185f2:	f00b fe7e 	bl	242f2 <memq_init>
		while (caller_id--) {
   185f6:	3c01      	subs	r4, #1
   185f8:	b2e4      	uxtb	r4, r4
   185fa:	2cff      	cmp	r4, #255	; 0xff
   185fc:	d1f0      	bne.n	185e0 <mayfly_init+0x28>
   185fe:	e7e1      	b.n	185c4 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   18600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18604:	20000de4 	.word	0x20000de4
   18608:	20000d64 	.word	0x20000d64

0001860c <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   1860c:	b4f0      	push	{r4, r5, r6, r7}
   1860e:	4b12      	ldr	r3, [pc, #72]	; (18658 <mayfly_enable+0x4c>)
   18610:	4605      	mov	r5, r0
   18612:	460f      	mov	r7, r1
   18614:	260c      	movs	r6, #12
   18616:	2430      	movs	r4, #48	; 0x30
	if (enable) {
   18618:	b172      	cbz	r2, 18638 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
   1861a:	4361      	muls	r1, r4
   1861c:	fb06 1400 	mla	r4, r6, r0, r1
   18620:	4423      	add	r3, r4
   18622:	7a59      	ldrb	r1, [r3, #9]
   18624:	7a18      	ldrb	r0, [r3, #8]
   18626:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   18628:	bf04      	itt	eq
   1862a:	3101      	addeq	r1, #1
   1862c:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   1862e:	4628      	mov	r0, r5
   18630:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
   18632:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   18634:	f004 bf02 	b.w	1d43c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   18638:	434c      	muls	r4, r1
   1863a:	fb06 4400 	mla	r4, r6, r0, r4
   1863e:	4423      	add	r3, r4
   18640:	7a9c      	ldrb	r4, [r3, #10]
   18642:	7ada      	ldrb	r2, [r3, #11]
   18644:	42a2      	cmp	r2, r4
   18646:	d104      	bne.n	18652 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
   18648:	3201      	adds	r2, #1
   1864a:	729a      	strb	r2, [r3, #10]
}
   1864c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   1864e:	f004 bf43 	b.w	1d4d8 <mayfly_pend>
}
   18652:	bcf0      	pop	{r4, r5, r6, r7}
   18654:	4770      	bx	lr
   18656:	bf00      	nop
   18658:	20000de4 	.word	0x20000de4

0001865c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
   1865c:	b570      	push	{r4, r5, r6, lr}
   1865e:	4606      	mov	r6, r0
   18660:	460d      	mov	r5, r1
   18662:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   18664:	b1a2      	cbz	r2, 18690 <mayfly_enqueue+0x34>
   18666:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   18668:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1866a:	7820      	ldrb	r0, [r4, #0]
   1866c:	1a80      	subs	r0, r0, r2
	if (state != 0) {
   1866e:	f010 0003 	ands.w	r0, r0, #3
   18672:	d02c      	beq.n	186ce <mayfly_enqueue+0x72>
		if (chain) {
   18674:	b31b      	cbz	r3, 186be <mayfly_enqueue+0x62>
			if (state != 1) {
   18676:	2801      	cmp	r0, #1
   18678:	d028      	beq.n	186cc <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
   1867a:	3201      	adds	r2, #1
   1867c:	b2d2      	uxtb	r2, r2
   1867e:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1;
   18680:	4b1c      	ldr	r3, [pc, #112]	; (186f4 <mayfly_enqueue+0x98>)
   18682:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   18684:	4629      	mov	r1, r5
   18686:	4630      	mov	r0, r6
	mfp[callee_id] = 1;
   18688:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   1868a:	f004 ff25 	bl	1d4d8 <mayfly_pend>
   1868e:	e01c      	b.n	186ca <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   18690:	f00c fa82 	bl	24b98 <mayfly_prio_is_equal>
   18694:	2800      	cmp	r0, #0
   18696:	d0e6      	beq.n	18666 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   18698:	4629      	mov	r1, r5
   1869a:	4630      	mov	r0, r6
   1869c:	f004 fef6 	bl	1d48c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   186a0:	2800      	cmp	r0, #0
   186a2:	d0e0      	beq.n	18666 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   186a4:	2330      	movs	r3, #48	; 0x30
   186a6:	220c      	movs	r2, #12
   186a8:	436b      	muls	r3, r5
   186aa:	fb02 3306 	mla	r3, r2, r6, r3
   186ae:	4a12      	ldr	r2, [pc, #72]	; (186f8 <mayfly_enqueue+0x9c>)
   186b0:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   186b2:	7a93      	ldrb	r3, [r2, #10]
   186b4:	7ad2      	ldrb	r2, [r2, #11]
   186b6:	1a9b      	subs	r3, r3, r2
   186b8:	bf18      	it	ne
   186ba:	2301      	movne	r3, #1
   186bc:	e7d4      	b.n	18668 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   186be:	3202      	adds	r2, #2
   186c0:	b2d2      	uxtb	r2, r2
   186c2:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   186c4:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   186c8:	4798      	blx	r3

	return 0;
   186ca:	2000      	movs	r0, #0
}
   186cc:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
   186ce:	2b00      	cmp	r3, #0
   186d0:	d0f8      	beq.n	186c4 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
   186d2:	3201      	adds	r2, #1
   186d4:	b2d2      	uxtb	r2, r2
   186d6:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   186d8:	2304      	movs	r3, #4
   186da:	2230      	movs	r2, #48	; 0x30
   186dc:	fb12 3205 	smlabb	r2, r2, r5, r3
   186e0:	230c      	movs	r3, #12
   186e2:	fb13 2306 	smlabb	r3, r3, r6, r2
   186e6:	4a04      	ldr	r2, [pc, #16]	; (186f8 <mayfly_enqueue+0x9c>)
   186e8:	6860      	ldr	r0, [r4, #4]
   186ea:	441a      	add	r2, r3
   186ec:	4621      	mov	r1, r4
   186ee:	f00b fe03 	bl	242f8 <memq_enqueue>
   186f2:	e7c5      	b.n	18680 <mayfly_enqueue+0x24>
   186f4:	2000243f 	.word	0x2000243f
   186f8:	20000de4 	.word	0x20000de4

000186fc <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
   186fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
   18700:	4b56      	ldr	r3, [pc, #344]	; (1885c <mayfly_run+0x160>)
   18702:	5c1a      	ldrb	r2, [r3, r0]
{
   18704:	b089      	sub	sp, #36	; 0x24
   18706:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
   18708:	2a00      	cmp	r2, #0
   1870a:	f000 80a0 	beq.w	1884e <mayfly_run+0x152>
		return;
	}
	mfp[callee_id] = 1;
   1870e:	2201      	movs	r2, #1
   18710:	541a      	strb	r2, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   18712:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18716:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   18718:	f8df b144 	ldr.w	fp, [pc, #324]	; 18860 <mayfly_run+0x164>
   1871c:	9304      	str	r3, [sp, #16]
   1871e:	2404      	movs	r4, #4
   18720:	233c      	movs	r3, #60	; 0x3c
   18722:	fb13 4300 	smlabb	r3, r3, r0, r4
   18726:	445b      	add	r3, fp
	u8_t enable = 0U;
   18728:	f04f 0800 	mov.w	r8, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1872c:	9303      	str	r3, [sp, #12]
	u8_t disable = 0U;
   1872e:	f8cd 8000 	str.w	r8, [sp]
   18732:	46d9      	mov	r9, fp
	while (caller_id--) {
   18734:	3c01      	subs	r4, #1
   18736:	b2e4      	uxtb	r4, r4
   18738:	2cff      	cmp	r4, #255	; 0xff
   1873a:	d10d      	bne.n	18758 <mayfly_run+0x5c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   1873c:	9b00      	ldr	r3, [sp, #0]
   1873e:	2b00      	cmp	r3, #0
   18740:	f000 8085 	beq.w	1884e <mayfly_run+0x152>
   18744:	f1b8 0f00 	cmp.w	r8, #0
   18748:	f040 8081 	bne.w	1884e <mayfly_run+0x152>
		mayfly_enable_cb(callee_id, callee_id, 0);
   1874c:	4642      	mov	r2, r8
   1874e:	4629      	mov	r1, r5
   18750:	4628      	mov	r0, r5
   18752:	f004 fe73 	bl	1d43c <mayfly_enable_cb>
   18756:	e07a      	b.n	1884e <mayfly_run+0x152>
		struct mayfly *m = 0;
   18758:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   1875a:	260c      	movs	r6, #12
		struct mayfly *m = 0;
   1875c:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   1875e:	4366      	muls	r6, r4
   18760:	2330      	movs	r3, #48	; 0x30
   18762:	fb03 6305 	mla	r3, r3, r5, r6
   18766:	eb09 0103 	add.w	r1, r9, r3
   1876a:	aa07      	add	r2, sp, #28
   1876c:	f859 0003 	ldr.w	r0, [r9, r3]
   18770:	6849      	ldr	r1, [r1, #4]
   18772:	f00b fdc8 	bl	24306 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
   18776:	9a04      	ldr	r2, [sp, #16]
   18778:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1877c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18780:	444b      	add	r3, r9
   18782:	e9cd 6301 	strd	r6, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
   18786:	4682      	mov	sl, r0
		while (link) {
   18788:	f1ba 0f00 	cmp.w	sl, #0
   1878c:	d043      	beq.n	18816 <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
   1878e:	9b07      	ldr	r3, [sp, #28]
   18790:	781f      	ldrb	r7, [r3, #0]
   18792:	785a      	ldrb	r2, [r3, #1]
   18794:	1abf      	subs	r7, r7, r2
   18796:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
   1879a:	2f01      	cmp	r7, #1
   1879c:	d104      	bne.n	187a8 <mayfly_run+0xac>
				m->_ack--;
   1879e:	3a01      	subs	r2, #1
   187a0:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   187a2:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   187a6:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
   187a8:	9e07      	ldr	r6, [sp, #28]
	req = m->_req;
   187aa:	7833      	ldrb	r3, [r6, #0]
	if (((req - m->_ack) & 0x03) != 1) {
   187ac:	7872      	ldrb	r2, [r6, #1]
	req = m->_req;
   187ae:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1) {
   187b0:	1a9a      	subs	r2, r3, r2
   187b2:	f002 0203 	and.w	r2, r2, #3
   187b6:	2a01      	cmp	r2, #1
   187b8:	9305      	str	r3, [sp, #20]
   187ba:	d01b      	beq.n	187f4 <mayfly_run+0xf8>
		memq_dequeue(mft[callee_id][caller_id].tail,
   187bc:	9b01      	ldr	r3, [sp, #4]
   187be:	9902      	ldr	r1, [sp, #8]
   187c0:	2030      	movs	r0, #48	; 0x30
   187c2:	fb00 3005 	mla	r0, r0, r5, r3
   187c6:	4b26      	ldr	r3, [pc, #152]	; (18860 <mayfly_run+0x164>)
   187c8:	4418      	add	r0, r3
   187ca:	2200      	movs	r2, #0
   187cc:	6840      	ldr	r0, [r0, #4]
   187ce:	f00b fda2 	bl	24316 <memq_dequeue>
		m->_ack = req;
   187d2:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
   187d4:	7872      	ldrb	r2, [r6, #1]
		m->_ack = req;
   187d6:	7073      	strb	r3, [r6, #1]
		if (((m->_req - ack) & 0x03) == 1) {
   187d8:	7833      	ldrb	r3, [r6, #0]
		m->_link = link;
   187da:	f8c6 a004 	str.w	sl, [r6, #4]
		if (((m->_req - ack) & 0x03) == 1) {
   187de:	1a9b      	subs	r3, r3, r2
   187e0:	f003 0303 	and.w	r3, r3, #3
   187e4:	2b01      	cmp	r3, #1
   187e6:	d105      	bne.n	187f4 <mayfly_run+0xf8>
			m->_ack = ack;
   187e8:	7072      	strb	r2, [r6, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   187ea:	4631      	mov	r1, r6
   187ec:	9a03      	ldr	r2, [sp, #12]
   187ee:	4650      	mov	r0, sl
   187f0:	f00b fd82 	bl	242f8 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
   187f4:	9a01      	ldr	r2, [sp, #4]
   187f6:	2330      	movs	r3, #48	; 0x30
   187f8:	fb03 2305 	mla	r3, r3, r5, r2
   187fc:	eb09 0103 	add.w	r1, r9, r3
   18800:	aa07      	add	r2, sp, #28
   18802:	6849      	ldr	r1, [r1, #4]
   18804:	f859 0003 	ldr.w	r0, [r9, r3]
   18808:	f00b fd7d 	bl	24306 <memq_peek>
			if (state == 1) {
   1880c:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   1880e:	4682      	mov	sl, r0
			if (state == 1) {
   18810:	d1ba      	bne.n	18788 <mayfly_run+0x8c>
				if (caller_id || link) {
   18812:	b9c4      	cbnz	r4, 18846 <mayfly_run+0x14a>
   18814:	b9b8      	cbnz	r0, 18846 <mayfly_run+0x14a>
		if (mft[callee_id][caller_id].disable_req !=
   18816:	2230      	movs	r2, #48	; 0x30
   18818:	4911      	ldr	r1, [pc, #68]	; (18860 <mayfly_run+0x164>)
   1881a:	230c      	movs	r3, #12
   1881c:	436a      	muls	r2, r5
   1881e:	fb03 2204 	mla	r2, r3, r4, r2
   18822:	440a      	add	r2, r1
   18824:	7a91      	ldrb	r1, [r2, #10]
   18826:	7ad0      	ldrb	r0, [r2, #11]
   18828:	4288      	cmp	r0, r1
   1882a:	d113      	bne.n	18854 <mayfly_run+0x158>
		if (mft[callee_id][caller_id].enable_req !=
   1882c:	2230      	movs	r2, #48	; 0x30
   1882e:	436a      	muls	r2, r5
   18830:	fb03 2304 	mla	r3, r3, r4, r2
   18834:	445b      	add	r3, fp
   18836:	7a1a      	ldrb	r2, [r3, #8]
   18838:	7a59      	ldrb	r1, [r3, #9]
   1883a:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   1883c:	bf1c      	itt	ne
   1883e:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
   18840:	f04f 0801 	movne.w	r8, #1
   18844:	e776      	b.n	18734 <mayfly_run+0x38>
					mayfly_pend(callee_id, callee_id);
   18846:	4629      	mov	r1, r5
   18848:	4628      	mov	r0, r5
   1884a:	f004 fe45 	bl	1d4d8 <mayfly_pend>
	}
}
   1884e:	b009      	add	sp, #36	; 0x24
   18850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   18854:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
   18856:	2201      	movs	r2, #1
   18858:	9200      	str	r2, [sp, #0]
   1885a:	e7e7      	b.n	1882c <mayfly_run+0x130>
   1885c:	2000243f 	.word	0x2000243f
   18860:	20000de4 	.word	0x20000de4

00018864 <ticker_job>:
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
		  ticker_ticks_diff_get(cc, ctr));
}

void ticker_job(void *param)
{
   18864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
   18868:	7fc2      	ldrb	r2, [r0, #31]
{
   1886a:	b093      	sub	sp, #76	; 0x4c
   1886c:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
   1886e:	2a00      	cmp	r2, #0
   18870:	f040 83be 	bne.w	18ff0 <ticker_job+0x78c>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
   18874:	6943      	ldr	r3, [r0, #20]
   18876:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1U;
   18878:	2101      	movs	r1, #1

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1887a:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
   1887c:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1887e:	7ac0      	ldrb	r0, [r0, #11]
   18880:	4298      	cmp	r0, r3
   18882:	f000 8088 	beq.w	18996 <ticker_job+0x132>
		u8_t first;

		first = instance->ticks_elapsed_first + 1;
   18886:	440b      	add	r3, r1
   18888:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0U;
   1888a:	2b02      	cmp	r3, #2
   1888c:	bf08      	it	eq
   1888e:	2300      	moveq	r3, #0
		}
		instance->ticks_elapsed_first = first;
   18890:	f88b 300a 	strb.w	r3, [fp, #10]

		ticks_elapsed =
   18894:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
   18898:	9102      	str	r1, [sp, #8]
		ticks_elapsed =
   1889a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		instance->ticks_current += ticks_elapsed;
   1889e:	9b05      	ldr	r3, [sp, #20]
   188a0:	4453      	add	r3, sl
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   188a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   188a6:	f8cb 3014 	str.w	r3, [fp, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
   188aa:	f89b 301d 	ldrb.w	r3, [fp, #29]
   188ae:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
   188b0:	f8db 3000 	ldr.w	r3, [fp]
   188b4:	9303      	str	r3, [sp, #12]
	users = &instance->user[0];
   188b6:	f8db 3004 	ldr.w	r3, [fp, #4]
   188ba:	930b      	str	r3, [sp, #44]	; 0x2c
	pending = 0U;
   188bc:	2300      	movs	r3, #0
   188be:	9306      	str	r3, [sp, #24]
	count_user = instance->count_user;
   188c0:	f89b 8009 	ldrb.w	r8, [fp, #9]
	insert_head = TICKER_NULL;
   188c4:	23ff      	movs	r3, #255	; 0xff
   188c6:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   188c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   188cc:	fa5f f883 	uxtb.w	r8, r3
   188d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   188d4:	d162      	bne.n	1899c <ticker_job+0x138>

	/* Manage updates and deletions in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
   188d6:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   188da:	9a04      	ldr	r2, [sp, #16]
   188dc:	1a9b      	subs	r3, r3, r2
   188de:	bf18      	it	ne
   188e0:	2301      	movne	r3, #1
   188e2:	9303      	str	r3, [sp, #12]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
   188e4:	9b02      	ldr	r3, [sp, #8]
   188e6:	b1db      	cbz	r3, 18920 <ticker_job+0xbc>
   188e8:	f8db 8000 	ldr.w	r8, [fp]
	if ((ticker->remainder_current < BIT(31)) &&
   188ec:	f8df 93fc 	ldr.w	r9, [pc, #1020]	; 18cec <ticker_job+0x488>
	ticks_expired = 0U;
   188f0:	2700      	movs	r7, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   188f2:	f89b 501d 	ldrb.w	r5, [fp, #29]
   188f6:	2dff      	cmp	r5, #255	; 0xff
   188f8:	d00b      	beq.n	18912 <ticker_job+0xae>
		ticker = &node[id_expired];
   188fa:	b22e      	sxth	r6, r5
   188fc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   18900:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   18904:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   18906:	4553      	cmp	r3, sl
   18908:	f240 812f 	bls.w	18b6a <ticker_job+0x306>
			ticker->ticks_to_expire -= ticks_elapsed;
   1890c:	eba3 030a 	sub.w	r3, r3, sl
   18910:	60a3      	str	r3, [r4, #8]
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1U;
   18912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18916:	9904      	ldr	r1, [sp, #16]
   18918:	42a9      	cmp	r1, r5
   1891a:	bf18      	it	ne
   1891c:	4613      	movne	r3, r2
   1891e:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
   18920:	f8db 3000 	ldr.w	r3, [fp]
   18924:	9307      	str	r3, [sp, #28]
	users = &instance->user[0];
   18926:	f8db 3004 	ldr.w	r3, [fp, #4]
   1892a:	9310      	str	r3, [sp, #64]	; 0x40
	count_user = instance->count_user;
   1892c:	f89b 3009 	ldrb.w	r3, [fp, #9]
   18930:	9302      	str	r3, [sp, #8]
	while (count_user--) {
   18932:	9b02      	ldr	r3, [sp, #8]
   18934:	3b01      	subs	r3, #1
   18936:	b2db      	uxtb	r3, r3
   18938:	2bff      	cmp	r3, #255	; 0xff
   1893a:	9302      	str	r3, [sp, #8]
   1893c:	f040 8166 	bne.w	18c0c <ticker_job+0x3a8>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1U;
   18940:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
	if (instance->ticker_id_head != ticker_id_old_head) {
   18944:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   18948:	428b      	cmp	r3, r1
   1894a:	bf18      	it	ne
   1894c:	2201      	movne	r2, #1
	}

	/* Processing any list inquiries */
	if (!pending) {
   1894e:	9b06      	ldr	r3, [sp, #24]
		flag_compare_update = 1U;
   18950:	9203      	str	r2, [sp, #12]
	if (!pending) {
   18952:	2b00      	cmp	r3, #0
   18954:	f000 8299 	beq.w	18e8a <ticker_job+0x626>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0U;
   18958:	2300      	movs	r3, #0
   1895a:	f88b 301e 	strb.w	r3, [fp, #30]

	/* update compare if head changed */
	if (flag_compare_update) {
   1895e:	9b03      	ldr	r3, [sp, #12]
   18960:	b14b      	cbz	r3, 18976 <ticker_job+0x112>
	if (instance->ticker_id_head == TICKER_NULL) {
   18962:	f89b 301d 	ldrb.w	r3, [fp, #29]
   18966:	2bff      	cmp	r3, #255	; 0xff
   18968:	f040 82e9 	bne.w	18f3e <ticker_job+0x6da>
		if (cntr_stop() == 0) {
   1896c:	f004 f940 	bl	1cbf0 <cntr_stop>
   18970:	b908      	cbnz	r0, 18976 <ticker_job+0x112>
			instance->ticks_slot_previous = 0U;
   18972:	f8cb 0018 	str.w	r0, [fp, #24]
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
   18976:	f89b 301f 	ldrb.w	r3, [fp, #31]
   1897a:	2b00      	cmp	r3, #0
   1897c:	f000 8338 	beq.w	18ff0 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   18980:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   18984:	465b      	mov	r3, fp
   18986:	2201      	movs	r2, #1
   18988:	2103      	movs	r1, #3
   1898a:	2004      	movs	r0, #4
   1898c:	46a4      	mov	ip, r4
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
   1898e:	b013      	add	sp, #76	; 0x4c
   18990:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   18994:	4760      	bx	ip
		flag_elapsed = 0U;
   18996:	9202      	str	r2, [sp, #8]
		ticks_elapsed = 0U;
   18998:	4692      	mov	sl, r2
   1899a:	e786      	b.n	188aa <ticker_job+0x46>
		user = &users[count_user];
   1899c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1899e:	eb03 07c8 	add.w	r7, r3, r8, lsl #3
		user_ops = &user->user_op[0];
   189a2:	687b      	ldr	r3, [r7, #4]
   189a4:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
   189a6:	78f9      	ldrb	r1, [r7, #3]
   189a8:	78be      	ldrb	r6, [r7, #2]
   189aa:	428e      	cmp	r6, r1
   189ac:	d08c      	beq.n	188c8 <ticker_job+0x64>
			user_op = &user_ops[user->middle];
   189ae:	9b07      	ldr	r3, [sp, #28]
			if (middle == user->count_user_op) {
   189b0:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
   189b2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   189b6:	0112      	lsls	r2, r2, #4
   189b8:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
   189ba:	1c73      	adds	r3, r6, #1
   189bc:	b2db      	uxtb	r3, r3
				middle = 0U;
   189be:	4298      	cmp	r0, r3
   189c0:	bf08      	it	eq
   189c2:	2300      	moveq	r3, #0
			user->middle = middle;
   189c4:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   189c6:	9b07      	ldr	r3, [sp, #28]
   189c8:	5c9a      	ldrb	r2, [r3, r2]
   189ca:	2a03      	cmp	r2, #3
   189cc:	d9ec      	bls.n	189a8 <ticker_job+0x144>
			ticker = &node[user_op->id];
   189ce:	7869      	ldrb	r1, [r5, #1]
   189d0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   189d4:	930a      	str	r3, [sp, #40]	; 0x28
   189d6:	980a      	ldr	r0, [sp, #40]	; 0x28
   189d8:	9b03      	ldr	r3, [sp, #12]
   189da:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   189de:	2a05      	cmp	r2, #5
			state = (ticker->req - ticker->ack) & 0xff;
   189e0:	7863      	ldrb	r3, [r4, #1]
   189e2:	78a0      	ldrb	r0, [r4, #2]
   189e4:	eba3 0300 	sub.w	r3, r3, r0
   189e8:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   189ea:	d80e      	bhi.n	18a0a <ticker_job+0x1a6>
   189ec:	b16b      	cbz	r3, 18a0a <ticker_job+0x1a6>
			    (state == 0) ||
   189ee:	2a04      	cmp	r2, #4
   189f0:	d110      	bne.n	18a14 <ticker_job+0x1b0>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   189f2:	686a      	ldr	r2, [r5, #4]
   189f4:	b972      	cbnz	r2, 18a14 <ticker_job+0x1b0>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   189f6:	68aa      	ldr	r2, [r5, #8]
   189f8:	b962      	cbnz	r2, 18a14 <ticker_job+0x1b0>
			     (user_op->params.update.ticks_drift_minus == 0) &&
   189fa:	68ea      	ldr	r2, [r5, #12]
   189fc:	b952      	cbnz	r2, 18a14 <ticker_job+0x1b0>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   189fe:	692a      	ldr	r2, [r5, #16]
   18a00:	b942      	cbnz	r2, 18a14 <ticker_job+0x1b0>
			     (user_op->params.update.lazy == 0) &&
   18a02:	696a      	ldr	r2, [r5, #20]
   18a04:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   18a08:	d104      	bne.n	18a14 <ticker_job+0x1b0>
				ticker_job_op_cb(user_op,
   18a0a:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   18a0c:	4628      	mov	r0, r5
   18a0e:	f00b fced 	bl	243ec <ticker_job_op_cb>
   18a12:	e7c8      	b.n	189a6 <ticker_job+0x142>
			if (state == 1) {
   18a14:	2b01      	cmp	r3, #1
   18a16:	f040 809d 	bne.w	18b54 <ticker_job+0x2f0>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   18a1a:	4658      	mov	r0, fp
   18a1c:	f00b fc9d 	bl	2435a <ticker_dequeue>
   18a20:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   18a22:	782b      	ldrb	r3, [r5, #0]
   18a24:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   18a26:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   18a28:	f040 8086 	bne.w	18b38 <ticker_job+0x2d4>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   18a2c:	f8db 3014 	ldr.w	r3, [fp, #20]
   18a30:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   18a32:	f004 f909 	bl	1cc48 <cntr_cnt_get>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18a36:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   18a38:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18a3a:	1ac3      	subs	r3, r0, r3
   18a3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   18a40:	4453      	add	r3, sl
	if (ticks_to_expire > ticks_elapsed) {
   18a42:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18a44:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
   18a46:	bf9e      	ittt	ls
   18a48:	6962      	ldrls	r2, [r4, #20]
   18a4a:	1b92      	subls	r2, r2, r6
   18a4c:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
   18a4e:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   18a50:	bf96      	itet	ls
   18a52:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
   18a54:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0U;
   18a56:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
   18a58:	2a00      	cmp	r2, #0
   18a5a:	d049      	beq.n	18af0 <ticker_job+0x28c>
	    (user_op->params.update.lazy != 0)) {
   18a5c:	8aa9      	ldrh	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0) &&
   18a5e:	2900      	cmp	r1, #0
   18a60:	d046      	beq.n	18af0 <ticker_job+0x28c>
		user_op->params.update.lazy--;
   18a62:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   18a66:	fa1f fc8c 	uxth.w	ip, ip
   18a6a:	f8a5 c014 	strh.w	ip, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   18a6e:	429a      	cmp	r2, r3
   18a70:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   18a74:	d201      	bcs.n	18a7a <ticker_job+0x216>
   18a76:	45f4      	cmp	ip, lr
   18a78:	d302      	bcc.n	18a80 <ticker_job+0x21c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18a7a:	f8df 9278 	ldr.w	r9, [pc, #632]	; 18cf4 <ticker_job+0x490>
   18a7e:	e031      	b.n	18ae4 <ticker_job+0x280>
	if ((ticker->remainder_current >= BIT(31)) ||
   18a80:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18a82:	4e9a      	ldr	r6, [pc, #616]	; (18cec <ticker_job+0x488>)
   18a84:	489a      	ldr	r0, [pc, #616]	; (18cf0 <ticker_job+0x48c>)
   18a86:	198e      	adds	r6, r1, r6
   18a88:	4286      	cmp	r6, r0
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   18a8a:	bf81      	itttt	hi
   18a8c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   18a90:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   18a94:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   18a98:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   18a9a:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
		decrement++;
   18a9e:	bf8c      	ite	hi
   18aa0:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0U;
   18aa4:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   18aa8:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
   18aaa:	4491      	add	r9, r2
			ticker->lazy_current--;
   18aac:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
   18ab0:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   18ab2:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
   18ab6:	f8a4 e01e 	strh.w	lr, [r4, #30]
   18aba:	e7d8      	b.n	18a6e <ticker_job+0x20a>
	ticker->remainder_current += ticker->remainder_periodic;
   18abc:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
   18ac0:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
   18ac2:	498a      	ldr	r1, [pc, #552]	; (18cec <ticker_job+0x488>)
   18ac4:	488a      	ldr	r0, [pc, #552]	; (18cf0 <ticker_job+0x48c>)
   18ac6:	1871      	adds	r1, r6, r1
   18ac8:	4281      	cmp	r1, r0
	return 0;
   18aca:	bf8e      	itee	hi
   18acc:	2100      	movhi	r1, #0
		return 1;
   18ace:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18ad0:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
   18ad2:	4411      	add	r1, r2
			ticker->lazy_current++;
   18ad4:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
   18ad8:	bf8c      	ite	hi
   18ada:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18adc:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
   18ade:	440b      	add	r3, r1
			ticker->lazy_current++;
   18ae0:	f8a4 e01e 	strh.w	lr, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   18ae4:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   18ae8:	45f4      	cmp	ip, lr
   18aea:	d8e7      	bhi.n	18abc <ticker_job+0x258>
		ticker->lazy_periodic = user_op->params.update.lazy;
   18aec:	f8a4 c01c 	strh.w	ip, [r4, #28]
	ticker->ticks_to_expire = ticks_to_expire +
   18af0:	686a      	ldr	r2, [r5, #4]
   18af2:	4413      	add	r3, r2
   18af4:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   18af6:	68aa      	ldr	r2, [r5, #8]
   18af8:	6963      	ldr	r3, [r4, #20]
   18afa:	4413      	add	r3, r2
   18afc:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   18afe:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   18b02:	4620      	mov	r0, r4
   18b04:	f00b fc54 	bl	243b0 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   18b08:	68ea      	ldr	r2, [r5, #12]
   18b0a:	69a3      	ldr	r3, [r4, #24]
   18b0c:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   18b0e:	692a      	ldr	r2, [r5, #16]
   18b10:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   18b12:	bf8c      	ite	hi
   18b14:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   18b16:	2300      	movls	r3, #0
   18b18:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
   18b1a:	7dab      	ldrb	r3, [r5, #22]
   18b1c:	b103      	cbz	r3, 18b20 <ticker_job+0x2bc>
		ticker->force = user_op->params.update.force;
   18b1e:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
   18b20:	9b03      	ldr	r3, [sp, #12]
   18b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18b24:	9901      	ldr	r1, [sp, #4]
   18b26:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
	*insert_head = user_op->id;
   18b2a:	786b      	ldrb	r3, [r5, #1]
   18b2c:	9301      	str	r3, [sp, #4]
		ticker->req++;
   18b2e:	7863      	ldrb	r3, [r4, #1]
   18b30:	3301      	adds	r3, #1
   18b32:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   18b34:	2100      	movs	r1, #0
   18b36:	e769      	b.n	18a0c <ticker_job+0x1a8>
		ticker->req = ticker->ack;
   18b38:	78a3      	ldrb	r3, [r4, #2]
   18b3a:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   18b3c:	786b      	ldrb	r3, [r5, #1]
   18b3e:	f89b 201c 	ldrb.w	r2, [fp, #28]
   18b42:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   18b44:	bf01      	itttt	eq
   18b46:	23ff      	moveq	r3, #255	; 0xff
   18b48:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
   18b4c:	2300      	moveq	r3, #0
   18b4e:	f8cb 3018 	streq.w	r3, [fp, #24]
   18b52:	e7ef      	b.n	18b34 <ticker_job+0x2d0>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   18b54:	2104      	movs	r1, #4
   18b56:	465b      	mov	r3, fp
   18b58:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   18b5c:	2201      	movs	r2, #1
   18b5e:	4608      	mov	r0, r1
   18b60:	47a0      	blx	r4
				pending = 1U;
   18b62:	2301      	movs	r3, #1
				user->middle = prev;
   18b64:	70be      	strb	r6, [r7, #2]
				pending = 1U;
   18b66:	9306      	str	r3, [sp, #24]
   18b68:	e6ae      	b.n	188c8 <ticker_job+0x64>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   18b6a:	f8db 2018 	ldr.w	r2, [fp, #24]
   18b6e:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   18b70:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
   18b74:	441f      	add	r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   18b76:	bf29      	itett	cs
   18b78:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
   18b7a:	1ad3      	subcc	r3, r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   18b7c:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
   18b80:	2300      	movcs	r3, #0
   18b82:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
   18b86:	69a3      	ldr	r3, [r4, #24]
   18b88:	b11b      	cbz	r3, 18b92 <ticker_job+0x32e>
			instance->ticker_id_slot_previous = id_expired;
   18b8a:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   18b8e:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0U;
   18b92:	2200      	movs	r2, #0
   18b94:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   18b96:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   18b9a:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
   18b9e:	f8d4 c004 	ldr.w	ip, [r4, #4]
   18ba2:	f1bc 0f00 	cmp.w	ip, #0
   18ba6:	d02d      	beq.n	18c04 <ticker_job+0x3a0>
			while (count--) {
   18ba8:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
   18baa:	f8df e144 	ldr.w	lr, [pc, #324]	; 18cf0 <ticker_job+0x48c>
	ticker->remainder_current += ticker->remainder_periodic;
   18bae:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   18bb2:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
   18bb4:	eb03 0109 	add.w	r1, r3, r9
   18bb8:	4571      	cmp	r1, lr
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18bba:	bf9f      	itttt	ls
   18bbc:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   18bc0:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   18bc4:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
   18bc8:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
   18bca:	bf92      	itee	ls
   18bcc:	9b02      	ldrls	r3, [sp, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   18bce:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
   18bd0:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
   18bd2:	4463      	add	r3, ip
			while (count--) {
   18bd4:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
   18bd8:	441a      	add	r2, r3
			while (count--) {
   18bda:	d2e8      	bcs.n	18bae <ticker_job+0x34a>
			ticks_to_expire_prep(ticker, instance->ticks_current,
   18bdc:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
   18bde:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   18be0:	f8db 1014 	ldr.w	r1, [fp, #20]
   18be4:	19da      	adds	r2, r3, r7
   18be6:	4620      	mov	r0, r4
   18be8:	f00b fbe2 	bl	243b0 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   18bec:	8ba3      	ldrh	r3, [r4, #28]
   18bee:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0U;
   18bf0:	2300      	movs	r3, #0
   18bf2:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
   18bf4:	9b01      	ldr	r3, [sp, #4]
   18bf6:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
			ticker->req++;
   18bfa:	7863      	ldrb	r3, [r4, #1]
   18bfc:	3301      	adds	r3, #1
   18bfe:	7063      	strb	r3, [r4, #1]
			ticker->req = ticker->ack;
   18c00:	9501      	str	r5, [sp, #4]
   18c02:	e676      	b.n	188f2 <ticker_job+0x8e>
   18c04:	78a3      	ldrb	r3, [r4, #2]
   18c06:	7063      	strb	r3, [r4, #1]
   18c08:	9d01      	ldr	r5, [sp, #4]
   18c0a:	e7f9      	b.n	18c00 <ticker_job+0x39c>
		user = &users[count_user];
   18c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18c0e:	9a02      	ldr	r2, [sp, #8]
   18c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   18c14:	9305      	str	r3, [sp, #20]
		user_ops = (void *)&user->user_op[0];
   18c16:	685b      	ldr	r3, [r3, #4]
   18c18:	9309      	str	r3, [sp, #36]	; 0x24
		user_ops_first = user->first;
   18c1a:	9b05      	ldr	r3, [sp, #20]
   18c1c:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   18c20:	9b01      	ldr	r3, [sp, #4]
   18c22:	2bff      	cmp	r3, #255	; 0xff
   18c24:	d041      	beq.n	18caa <ticker_job+0x446>
				ticker = &node[id_insert];
   18c26:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   18c2a:	9a07      	ldr	r2, [sp, #28]
				insert_head = ticker->next;
   18c2c:	f8dd a004 	ldr.w	sl, [sp, #4]
				ticker = &node[id_insert];
   18c30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18c34:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				insert_head = ticker->next;
   18c38:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   18c3c:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   18c3e:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
   18c40:	f8db 3000 	ldr.w	r3, [fp]
   18c44:	930a      	str	r3, [sp, #40]	; 0x28
	ticker->next = TICKER_NULL;
   18c46:	23ff      	movs	r3, #255	; 0xff
   18c48:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   18c4a:	8ba2      	ldrh	r2, [r4, #28]
   18c4c:	8be3      	ldrh	r3, [r4, #30]
   18c4e:	4293      	cmp	r3, r2
   18c50:	d97e      	bls.n	18d50 <ticker_job+0x4ec>
		skip = ticker->lazy_current -
   18c52:	1a9b      	subs	r3, r3, r2
   18c54:	b29b      	uxth	r3, r3
		skip = 0U;
   18c56:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_new = &node[id];
   18c58:	fa0f f38a 	sxth.w	r3, sl
   18c5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18c60:	00db      	lsls	r3, r3, #3
   18c62:	9311      	str	r3, [sp, #68]	; 0x44
   18c64:	e0c6      	b.n	18df4 <ticker_job+0x590>
				user_op = &user_ops[user_ops_first];
   18c66:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   18c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18c6c:	011b      	lsls	r3, r3, #4
   18c6e:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   18c70:	f109 0201 	add.w	r2, r9, #1
   18c74:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
   18c78:	9a05      	ldr	r2, [sp, #20]
   18c7a:	7812      	ldrb	r2, [r2, #0]
					first = 0U;
   18c7c:	454a      	cmp	r2, r9
   18c7e:	bf08      	it	eq
   18c80:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   18c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18c86:	5cd3      	ldrb	r3, [r2, r3]
   18c88:	2b03      	cmp	r3, #3
   18c8a:	d10e      	bne.n	18caa <ticker_job+0x446>
				id_insert = user_op->id;
   18c8c:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   18c90:	9b07      	ldr	r3, [sp, #28]
   18c92:	eb0a 048a 	add.w	r4, sl, sl, lsl #2
   18c96:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   18c9a:	7862      	ldrb	r2, [r4, #1]
   18c9c:	78a3      	ldrb	r3, [r4, #2]
   18c9e:	429a      	cmp	r2, r3
   18ca0:	d008      	beq.n	18cb4 <ticker_job+0x450>
					ticker_job_op_cb(user_op,
   18ca2:	2101      	movs	r1, #1
   18ca4:	4628      	mov	r0, r5
   18ca6:	f00b fba1 	bl	243ec <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   18caa:	9b05      	ldr	r3, [sp, #20]
   18cac:	789b      	ldrb	r3, [r3, #2]
   18cae:	454b      	cmp	r3, r9
   18cb0:	d1d9      	bne.n	18c66 <ticker_job+0x402>
   18cb2:	e63e      	b.n	18932 <ticker_job+0xce>
	ticker->ticks_periodic = start->ticks_periodic;
   18cb4:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
   18cb6:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   18cba:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   18cbc:	692b      	ldr	r3, [r5, #16]
   18cbe:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
   18cc0:	8aab      	ldrh	r3, [r5, #20]
   18cc2:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   18cc4:	69ab      	ldr	r3, [r5, #24]
   18cc6:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   18cc8:	69eb      	ldr	r3, [r5, #28]
   18cca:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   18ccc:	6a2b      	ldr	r3, [r5, #32]
   18cce:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   18cd0:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
   18cd2:	68ab      	ldr	r3, [r5, #8]
   18cd4:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   18cd6:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   18cd8:	686a      	ldr	r2, [r5, #4]
   18cda:	4620      	mov	r0, r4
   18cdc:	f00b fb68 	bl	243b0 <ticks_to_expire_prep>
	ticker->force = 1U;
   18ce0:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
   18ce2:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   18ce4:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1U;
   18ce6:	70e3      	strb	r3, [r4, #3]
   18ce8:	e7aa      	b.n	18c40 <ticker_job+0x3dc>
   18cea:	bf00      	nop
   18cec:	ff172b5a 	.word	0xff172b5a
   18cf0:	7f172b59 	.word	0x7f172b59
   18cf4:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
   18cf8:	6860      	ldr	r0, [r4, #4]
   18cfa:	2800      	cmp	r0, #0
   18cfc:	f000 80c3 	beq.w	18e86 <ticker_job+0x622>
	ticker->remainder_current += ticker->remainder_periodic;
   18d00:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   18d04:	4bb3      	ldr	r3, [pc, #716]	; (18fd4 <ticker_job+0x770>)
	ticker->remainder_current += ticker->remainder_periodic;
   18d06:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   18d08:	49b3      	ldr	r1, [pc, #716]	; (18fd8 <ticker_job+0x774>)
   18d0a:	18d3      	adds	r3, r2, r3
   18d0c:	428b      	cmp	r3, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18d0e:	bf9c      	itt	ls
   18d10:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   18d14:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
   18d18:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   18d1a:	bf8b      	itete	hi
   18d1c:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18d1e:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
   18d22:	2200      	movhi	r2, #0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18d24:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
   18d26:	4403      	add	r3, r0
		return 1;
   18d28:	bf98      	it	ls
   18d2a:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
   18d2c:	4413      	add	r3, r2
			ticker->lazy_current++;
   18d2e:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
   18d30:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
   18d32:	3201      	adds	r2, #1
   18d34:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
   18d36:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
   18d38:	4293      	cmp	r3, r2
   18d3a:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
   18d3e:	bf89      	itett	hi
   18d40:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
   18d42:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
   18d44:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0U;
   18d46:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
   18d48:	bf9c      	itt	ls
   18d4a:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0U;
   18d4c:	60a1      	strls	r1, [r4, #8]
   18d4e:	e051      	b.n	18df4 <ticker_job+0x590>
		skip = 0U;
   18d50:	2300      	movs	r3, #0
   18d52:	e780      	b.n	18c56 <ticker_job+0x3f2>
		if (ticker_current->ticks_slot != 0) {
   18d54:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
   18d56:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
   18d58:	b946      	cbnz	r6, 18d6c <ticker_job+0x508>
			if (ticks_slot_previous > ticks_to_expire_current) {
   18d5a:	4560      	cmp	r0, ip
   18d5c:	d201      	bcs.n	18d62 <ticker_job+0x4fe>
				ticks_slot_previous -= ticks_to_expire_current;
   18d5e:	ebac 0600 	sub.w	r6, ip, r0
		current = ticker_current->next;
   18d62:	9308      	str	r3, [sp, #32]
   18d64:	46b4      	mov	ip, r6
   18d66:	f812 303e 	ldrb.w	r3, [r2, lr, lsl #3]
   18d6a:	e050      	b.n	18e0e <ticker_job+0x5aa>
		if (ticker_current->ticks_slot != 0) {
   18d6c:	461f      	mov	r7, r3
   18d6e:	e7f8      	b.n	18d62 <ticker_job+0x4fe>
		ticker = &node[ticker_id_head];
   18d70:	b230      	sxth	r0, r6
   18d72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18d76:	900f      	str	r0, [sp, #60]	; 0x3c
   18d78:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   18d7c:	900d      	str	r0, [sp, #52]	; 0x34
		ticks_to_expire = ticker->ticks_to_expire;
   18d7e:	6880      	ldr	r0, [r0, #8]
   18d80:	900e      	str	r0, [sp, #56]	; 0x38
		if (ticks_slot <= ticks_to_expire) {
   18d82:	4570      	cmp	r0, lr
   18d84:	d20a      	bcs.n	18d9c <ticker_job+0x538>
		if (ticker->ticks_slot) {
   18d86:	980d      	ldr	r0, [sp, #52]	; 0x34
   18d88:	6980      	ldr	r0, [r0, #24]
   18d8a:	2800      	cmp	r0, #0
   18d8c:	d150      	bne.n	18e30 <ticker_job+0x5cc>
		ticks_slot -= ticks_to_expire;
   18d8e:	980e      	ldr	r0, [sp, #56]	; 0x38
   18d90:	ebae 0e00 	sub.w	lr, lr, r0
		ticker_id_head = ticker->next;
   18d94:	980f      	ldr	r0, [sp, #60]	; 0x3c
   18d96:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
   18d9a:	e047      	b.n	18e2c <ticker_job+0x5c8>
			return TICKER_NULL;
   18d9c:	26ff      	movs	r6, #255	; 0xff
   18d9e:	e047      	b.n	18e30 <ticker_job+0x5cc>
	while (id_insert !=
   18da0:	45ba      	cmp	sl, r7
   18da2:	d065      	beq.n	18e70 <ticker_job+0x60c>
		if (id_collide != TICKER_NULL) {
   18da4:	2fff      	cmp	r7, #255	; 0xff
   18da6:	d0a7      	beq.n	18cf8 <ticker_job+0x494>
   18da8:	463e      	mov	r6, r7
			struct ticker_node *ticker_collide = &node[id_collide];
   18daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18dac:	fa0f f886 	sxth.w	r8, r6
   18db0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   18db4:	eb03 07c8 	add.w	r7, r3, r8, lsl #3
			if (ticker_collide->lazy_current >
   18db8:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
   18dba:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
   18dbc:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
   18dbe:	bf88      	it	hi
   18dc0:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
   18dc2:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
   18dc4:	bf8c      	ite	hi
   18dc6:	b29b      	uxthhi	r3, r3
				skip_collide = 0U;
   18dc8:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
   18dca:	2a00      	cmp	r2, #0
   18dcc:	d094      	beq.n	18cf8 <ticker_job+0x494>
   18dce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18dd0:	4293      	cmp	r3, r2
   18dd2:	d891      	bhi.n	18cf8 <ticker_job+0x494>
			    skip_collide <= skip &&
   18dd4:	78fa      	ldrb	r2, [r7, #3]
   18dd6:	78e3      	ldrb	r3, [r4, #3]
   18dd8:	429a      	cmp	r2, r3
   18dda:	d28d      	bcs.n	18cf8 <ticker_job+0x494>
					ticker_dequeue(instance, id_collide);
   18ddc:	4631      	mov	r1, r6
   18dde:	4658      	mov	r0, fp
   18de0:	f00b fabb 	bl	2435a <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
   18de4:	78bb      	ldrb	r3, [r7, #2]
   18de6:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
   18de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18dea:	9a01      	ldr	r2, [sp, #4]
				ticker_collide->ticks_to_expire =
   18dec:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
   18dee:	f803 2038 	strb.w	r2, [r3, r8, lsl #3]
   18df2:	9601      	str	r6, [sp, #4]
	ticker_new = &node[id];
   18df4:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
   18df6:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
   18dfa:	f8db c018 	ldr.w	ip, [fp, #24]
	ticker_new = &node[id];
   18dfe:	eb02 0803 	add.w	r8, r2, r3
	current = instance->ticker_id_head;
   18e02:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
   18e06:	f8d8 1008 	ldr.w	r1, [r8, #8]
	previous = current;
   18e0a:	9308      	str	r3, [sp, #32]
	collide = ticker_id_slot_previous = TICKER_NULL;
   18e0c:	27ff      	movs	r7, #255	; 0xff
	while ((current != TICKER_NULL) &&
   18e0e:	2bff      	cmp	r3, #255	; 0xff
   18e10:	d006      	beq.n	18e20 <ticker_job+0x5bc>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   18e12:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   18e16:	eb02 06ce 	add.w	r6, r2, lr, lsl #3
		(ticks_to_expire_current =
   18e1a:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
   18e1c:	4281      	cmp	r1, r0
   18e1e:	d899      	bhi.n	18d54 <ticker_job+0x4f0>
				     ticks_to_expire + ticker_new->ticks_slot);
   18e20:	f8d8 0018 	ldr.w	r0, [r8, #24]
   18e24:	900c      	str	r0, [sp, #48]	; 0x30
	collide = ticker_by_slot_get(&node[0], current,
   18e26:	eb01 0e00 	add.w	lr, r1, r0
   18e2a:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
   18e2c:	2eff      	cmp	r6, #255	; 0xff
   18e2e:	d19f      	bne.n	18d70 <ticker_job+0x50c>
	if ((ticker_new->ticks_slot == 0) ||
   18e30:	980c      	ldr	r0, [sp, #48]	; 0x30
   18e32:	b120      	cbz	r0, 18e3e <ticker_job+0x5da>
   18e34:	4561      	cmp	r1, ip
   18e36:	d3b3      	bcc.n	18da0 <ticker_job+0x53c>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   18e38:	2eff      	cmp	r6, #255	; 0xff
   18e3a:	f040 80d5 	bne.w	18fe8 <ticker_job+0x784>
		if (previous == current) {
   18e3e:	9808      	ldr	r0, [sp, #32]
		ticker_new->ticks_to_expire = ticks_to_expire;
   18e40:	f8c8 1008 	str.w	r1, [r8, #8]
		if (previous == current) {
   18e44:	4283      	cmp	r3, r0
			node[previous].next = id;
   18e46:	bf18      	it	ne
   18e48:	f9bd 0020 	ldrshne.w	r0, [sp, #32]
		ticker_new->next = current;
   18e4c:	f888 3000 	strb.w	r3, [r8]
			node[previous].next = id;
   18e50:	bf16      	itet	ne
   18e52:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
   18e56:	f88b a01d 	strbeq.w	sl, [fp, #29]
			node[previous].next = id;
   18e5a:	f802 a030 	strbne.w	sl, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
   18e5e:	2bff      	cmp	r3, #255	; 0xff
   18e60:	d006      	beq.n	18e70 <ticker_job+0x60c>
			node[current].ticks_to_expire -= ticks_to_expire;
   18e62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18e66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18e6a:	689a      	ldr	r2, [r3, #8]
   18e6c:	1a51      	subs	r1, r2, r1
   18e6e:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
   18e70:	78a3      	ldrb	r3, [r4, #2]
   18e72:	3301      	adds	r3, #1
   18e74:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   18e76:	2100      	movs	r1, #0
			if (user_op) {
   18e78:	2d00      	cmp	r5, #0
   18e7a:	f43f aed1 	beq.w	18c20 <ticker_job+0x3bc>
				ticker_job_op_cb(user_op, status);
   18e7e:	4628      	mov	r0, r5
   18e80:	f00b fab4 	bl	243ec <ticker_job_op_cb>
   18e84:	e6cc      	b.n	18c20 <ticker_job+0x3bc>
			return TICKER_STATUS_FAILURE;
   18e86:	2101      	movs	r1, #1
   18e88:	e7f6      	b.n	18e78 <ticker_job+0x614>
	users = &instance->user[0];
   18e8a:	f8db 3004 	ldr.w	r3, [fp, #4]
   18e8e:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   18e90:	f89b 4009 	ldrb.w	r4, [fp, #9]
		uop->status = TICKER_STATUS_SUCCESS;
   18e94:	9b06      	ldr	r3, [sp, #24]
   18e96:	9302      	str	r3, [sp, #8]
	while (count_user--) {
   18e98:	3c01      	subs	r4, #1
   18e9a:	b2e4      	uxtb	r4, r4
   18e9c:	2cff      	cmp	r4, #255	; 0xff
   18e9e:	f43f ad5b 	beq.w	18958 <ticker_job+0xf4>
		user = &users[count_user];
   18ea2:	9b01      	ldr	r3, [sp, #4]
   18ea4:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
   18ea8:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
   18eaa:	786b      	ldrb	r3, [r5, #1]
   18eac:	78ea      	ldrb	r2, [r5, #3]
   18eae:	429a      	cmp	r2, r3
   18eb0:	d0f2      	beq.n	18e98 <ticker_job+0x634>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   18eb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18eb6:	011a      	lsls	r2, r3, #4
   18eb8:	18b3      	adds	r3, r6, r2
	switch (uop->op) {
   18eba:	5cb2      	ldrb	r2, [r6, r2]
   18ebc:	2a01      	cmp	r2, #1
   18ebe:	d024      	beq.n	18f0a <ticker_job+0x6a6>
   18ec0:	2a02      	cmp	r2, #2
   18ec2:	d129      	bne.n	18f18 <ticker_job+0x6b4>
		ticker_by_next_slot_get(instance,
   18ec4:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   18ec8:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   18ecc:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->node;
   18ed0:	f8db c000 	ldr.w	ip, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   18ed4:	f8db 1014 	ldr.w	r1, [fp, #20]
   18ed8:	2aff      	cmp	r2, #255	; 0xff
   18eda:	d002      	beq.n	18ee2 <ticker_job+0x67e>
   18edc:	6807      	ldr	r7, [r0, #0]
   18ede:	428f      	cmp	r7, r1
   18ee0:	d023      	beq.n	18f2a <ticker_job+0x6c6>
		_ticker_id_head = instance->ticker_id_head;
   18ee2:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   18ee6:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   18ee8:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   18eea:	2aff      	cmp	r2, #255	; 0xff
   18eec:	d009      	beq.n	18f02 <ticker_job+0x69e>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   18eee:	eb02 0882 	add.w	r8, r2, r2, lsl #2
   18ef2:	eb0c 0ac8 	add.w	sl, ip, r8, lsl #3
   18ef6:	f8da 0008 	ldr.w	r0, [sl, #8]
   18efa:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   18efc:	f8da 0018 	ldr.w	r0, [sl, #24]
   18f00:	b1d0      	cbz	r0, 18f38 <ticker_job+0x6d4>
	*ticker_id_head = _ticker_id_head;
   18f02:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   18f06:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   18f0a:	9a02      	ldr	r2, [sp, #8]
   18f0c:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
   18f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
   18f10:	b112      	cbz	r2, 18f18 <ticker_job+0x6b4>
		fp_op_func(uop->status, uop->op_context);
   18f12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   18f14:	2000      	movs	r0, #0
   18f16:	4790      	blx	r2
			first = user->first + 1;
   18f18:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
   18f1a:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
   18f1c:	3301      	adds	r3, #1
   18f1e:	b2db      	uxtb	r3, r3
				first = 0U;
   18f20:	429a      	cmp	r2, r3
   18f22:	bf08      	it	eq
   18f24:	2300      	moveq	r3, #0
			user->first = first;
   18f26:	706b      	strb	r3, [r5, #1]
   18f28:	e7bf      	b.n	18eaa <ticker_job+0x646>
		ticker = &node[_ticker_id_head];
   18f2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
   18f2e:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   18f32:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
   18f36:	e7d8      	b.n	18eea <ticker_job+0x686>
		_ticker_id_head = ticker->next;
   18f38:	f81c 2038 	ldrb.w	r2, [ip, r8, lsl #3]
   18f3c:	e7d5      	b.n	18eea <ticker_job+0x686>
	if (ticker_id_old_head == TICKER_NULL) {
   18f3e:	9b04      	ldr	r3, [sp, #16]
   18f40:	2bff      	cmp	r3, #255	; 0xff
   18f42:	d107      	bne.n	18f54 <ticker_job+0x6f0>
		ticks_current = cntr_cnt_get();
   18f44:	f003 fe80 	bl	1cc48 <cntr_cnt_get>
   18f48:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   18f4a:	f003 fe43 	bl	1cbd4 <cntr_start>
   18f4e:	b908      	cbnz	r0, 18f54 <ticker_job+0x6f0>
			instance->ticks_current = ticks_current;
   18f50:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
   18f54:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   18f58:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
   18f5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
   18f60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18f64:	260a      	movs	r6, #10
   18f66:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
   18f68:	f003 fe6e 	bl	1cc48 <cntr_cnt_get>
		cc = instance->ticks_current;
   18f6c:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18f70:	1b03      	subs	r3, r0, r4
   18f72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   18f76:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   18f78:	42ab      	cmp	r3, r5
   18f7a:	bf2c      	ite	cs
   18f7c:	18e4      	addcs	r4, r4, r3
   18f7e:	1964      	addcc	r4, r4, r5
		cc &= HAL_TICKER_CNTR_MASK;
   18f80:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   18f84:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
   18f86:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   18f8a:	4620      	mov	r0, r4
   18f8c:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   18f8e:	f003 fe5b 	bl	1cc48 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18f92:	1bc0      	subs	r0, r0, r7
   18f94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18f98:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   18f9a:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18f9c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   18fa0:	42a0      	cmp	r0, r4
   18fa2:	f67f ace8 	bls.w	18976 <ticker_job+0x112>
		LL_ASSERT(i);
   18fa6:	3e01      	subs	r6, #1
   18fa8:	d1de      	bne.n	18f68 <ticker_job+0x704>
   18faa:	2301      	movs	r3, #1
   18fac:	f04f 0100 	mov.w	r1, #0
   18fb0:	4a0a      	ldr	r2, [pc, #40]	; (18fdc <ticker_job+0x778>)
   18fb2:	480b      	ldr	r0, [pc, #44]	; (18fe0 <ticker_job+0x77c>)
   18fb4:	f363 0107 	bfi	r1, r3, #0, #8
   18fb8:	4b0a      	ldr	r3, [pc, #40]	; (18fe4 <ticker_job+0x780>)
   18fba:	1a9b      	subs	r3, r3, r2
   18fbc:	08db      	lsrs	r3, r3, #3
   18fbe:	f363 118f 	bfi	r1, r3, #6, #10
   18fc2:	f007 fe1f 	bl	20c04 <log_0>
   18fc6:	4040      	eors	r0, r0
   18fc8:	f380 8811 	msr	BASEPRI, r0
   18fcc:	f04f 0004 	mov.w	r0, #4
   18fd0:	df02      	svc	2
   18fd2:	bf00      	nop
   18fd4:	ff172b5a 	.word	0xff172b5a
   18fd8:	7f172b59 	.word	0x7f172b59
   18fdc:	00025880 	.word	0x00025880
   18fe0:	0002bfe4 	.word	0x0002bfe4
   18fe4:	000258e0 	.word	0x000258e0
	while (id_insert !=
   18fe8:	45b2      	cmp	sl, r6
   18fea:	f47f aede 	bne.w	18daa <ticker_job+0x546>
   18fee:	e73f      	b.n	18e70 <ticker_job+0x60c>
}
   18ff0:	b013      	add	sp, #76	; 0x4c
   18ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff6:	bf00      	nop

00018ff8 <ticker_init>:
{
   18ff8:	b570      	push	{r4, r5, r6, lr}
   18ffa:	9d04      	ldr	r5, [sp, #16]
   18ffc:	f89d 4014 	ldrb.w	r4, [sp, #20]
   19000:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   19002:	b108      	cbz	r0, 19008 <ticker_init+0x10>
		return TICKER_STATUS_FAILURE;
   19004:	2001      	movs	r0, #1
}
   19006:	bd70      	pop	{r4, r5, r6, pc}
	instance->count_node = count_node;
   19008:	4813      	ldr	r0, [pc, #76]	; (19058 <ticker_init+0x60>)
	instance->node = node;
   1900a:	6002      	str	r2, [r0, #0]
	instance->count_node = count_node;
   1900c:	7201      	strb	r1, [r0, #8]
	instance->count_user = count_user;
   1900e:	7243      	strb	r3, [r0, #9]
	instance->user = user;
   19010:	6045      	str	r5, [r0, #4]
	while (count_user--) {
   19012:	4602      	mov	r2, r0
   19014:	3b01      	subs	r3, #1
   19016:	b2db      	uxtb	r3, r3
   19018:	2bff      	cmp	r3, #255	; 0xff
   1901a:	d10f      	bne.n	1903c <ticker_init+0x44>
	if (count_op) {
   1901c:	2c00      	cmp	r4, #0
   1901e:	d1f1      	bne.n	19004 <ticker_init+0xc>
	instance->caller_id_get_cb = caller_id_get_cb;
   19020:	9b07      	ldr	r3, [sp, #28]
   19022:	6213      	str	r3, [r2, #32]
	instance->sched_cb = sched_cb;
   19024:	9b08      	ldr	r3, [sp, #32]
   19026:	6253      	str	r3, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   19028:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1902a:	6293      	str	r3, [r2, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   1902c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   19030:	e9c2 4405 	strd	r4, r4, [r2, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   19034:	8393      	strh	r3, [r2, #28]
	instance->ticks_elapsed_first = 0U;
   19036:	8154      	strh	r4, [r2, #10]
	return TICKER_STATUS_SUCCESS;
   19038:	4620      	mov	r0, r4
   1903a:	e7e4      	b.n	19006 <ticker_init+0xe>
		users[count_user].user_op = user_op_;
   1903c:	b219      	sxth	r1, r3
   1903e:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   19042:	6046      	str	r6, [r0, #4]
		user_op_ += users[count_user].count_user_op;
   19044:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   19048:	eb00 0140 	add.w	r1, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
   1904c:	1a20      	subs	r0, r4, r0
		user_op_ += users[count_user].count_user_op;
   1904e:	eb06 1601 	add.w	r6, r6, r1, lsl #4
		count_op -= users[count_user].count_user_op;
   19052:	b2c4      	uxtb	r4, r0
   19054:	e7de      	b.n	19014 <ticker_init+0x1c>
   19056:	bf00      	nop
   19058:	20000ea4 	.word	0x20000ea4

0001905c <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   1905c:	4a04      	ldr	r2, [pc, #16]	; (19070 <ticker_is_initialized+0x14>)
   1905e:	232c      	movs	r3, #44	; 0x2c
   19060:	fb03 2000 	mla	r0, r3, r0, r2
   19064:	7a00      	ldrb	r0, [r0, #8]
}
   19066:	3000      	adds	r0, #0
   19068:	bf18      	it	ne
   1906a:	2001      	movne	r0, #1
   1906c:	4770      	bx	lr
   1906e:	bf00      	nop
   19070:	20000ea4 	.word	0x20000ea4

00019074 <ticker_trigger>:
	if (instance->sched_cb) {
   19074:	4a07      	ldr	r2, [pc, #28]	; (19094 <ticker_trigger+0x20>)
   19076:	232c      	movs	r3, #44	; 0x2c
   19078:	fb03 2100 	mla	r1, r3, r0, r2
{
   1907c:	b410      	push	{r4}
	if (instance->sched_cb) {
   1907e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   19080:	b134      	cbz	r4, 19090 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   19082:	460b      	mov	r3, r1
   19084:	46a4      	mov	ip, r4
   19086:	2201      	movs	r2, #1
   19088:	2103      	movs	r1, #3
   1908a:	2002      	movs	r0, #2
}
   1908c:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1908e:	4760      	bx	ip
}
   19090:	bc10      	pop	{r4}
   19092:	4770      	bx	lr
   19094:	20000ea4 	.word	0x20000ea4

00019098 <ticker_start>:
{
   19098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1909c:	4c22      	ldr	r4, [pc, #136]	; (19128 <ticker_start+0x90>)
   1909e:	272c      	movs	r7, #44	; 0x2c
   190a0:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   190a4:	b20d      	sxth	r5, r1
   190a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   190aa:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   190ae:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   190b2:	f89c 4003 	ldrb.w	r4, [ip, #3]
   190b6:	1c66      	adds	r6, r4, #1
   190b8:	b2f6      	uxtb	r6, r6
		last = 0U;
   190ba:	42b0      	cmp	r0, r6
   190bc:	bf98      	it	ls
   190be:	2600      	movls	r6, #0
	if (last == user->first) {
   190c0:	f89c 0001 	ldrb.w	r0, [ip, #1]
   190c4:	42b0      	cmp	r0, r6
   190c6:	d02d      	beq.n	19124 <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
   190c8:	f8dc 0004 	ldr.w	r0, [ip, #4]
   190cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   190d0:	0125      	lsls	r5, r4, #4
   190d2:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
   190d4:	f04f 0e03 	mov.w	lr, #3
   190d8:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
   190dc:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   190de:	9b06      	ldr	r3, [sp, #24]
   190e0:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   190e2:	9b07      	ldr	r3, [sp, #28]
   190e4:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   190e6:	9b08      	ldr	r3, [sp, #32]
   190e8:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   190ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   190ec:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   190ee:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   190f2:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   190f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   190f6:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   190f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   190fa:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   190fc:	2302      	movs	r3, #2
   190fe:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   19100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19102:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   19104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   19106:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   19108:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   1910a:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1910e:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   19112:	4608      	mov	r0, r1
   19114:	4798      	blx	r3
   19116:	4643      	mov	r3, r8
   19118:	2200      	movs	r2, #0
   1911a:	2104      	movs	r1, #4
   1911c:	47a8      	blx	r5
	return user_op->status;
   1911e:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   19120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   19124:	2001      	movs	r0, #1
   19126:	e7fb      	b.n	19120 <ticker_start+0x88>
   19128:	20000ea4 	.word	0x20000ea4

0001912c <ticker_update>:
{
   1912c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   19130:	4c21      	ldr	r4, [pc, #132]	; (191b8 <ticker_update+0x8c>)
   19132:	272c      	movs	r7, #44	; 0x2c
   19134:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->user[user_id];
   19138:	b20d      	sxth	r5, r1
   1913a:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1913e:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   19142:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   19146:	f89c 4003 	ldrb.w	r4, [ip, #3]
   1914a:	1c66      	adds	r6, r4, #1
   1914c:	b2f6      	uxtb	r6, r6
		last = 0U;
   1914e:	42b0      	cmp	r0, r6
   19150:	bf98      	it	ls
   19152:	2600      	movls	r6, #0
	if (last == user->first) {
   19154:	f89c 0001 	ldrb.w	r0, [ip, #1]
   19158:	42b0      	cmp	r0, r6
   1915a:	d02a      	beq.n	191b2 <ticker_update+0x86>
	user_op = &user->user_op[user->last];
   1915c:	f8dc 0004 	ldr.w	r0, [ip, #4]
   19160:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   19164:	0125      	lsls	r5, r4, #4
   19166:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   19168:	f04f 0804 	mov.w	r8, #4
   1916c:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   19170:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   19172:	9b08      	ldr	r3, [sp, #32]
   19174:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   19176:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19178:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   1917a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1917c:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   1917e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   19182:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   19184:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   19188:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
   1918a:	2302      	movs	r3, #2
   1918c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   1918e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19190:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   19192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   19194:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   19196:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   19198:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1919c:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   191a0:	4608      	mov	r0, r1
   191a2:	4798      	blx	r3
   191a4:	464b      	mov	r3, r9
   191a6:	2200      	movs	r2, #0
   191a8:	4641      	mov	r1, r8
   191aa:	47a8      	blx	r5
	return user_op->status;
   191ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   191ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   191b2:	2001      	movs	r0, #1
   191b4:	e7fb      	b.n	191ae <ticker_update+0x82>
   191b6:	bf00      	nop
   191b8:	20000ea4 	.word	0x20000ea4

000191bc <ticker_stop>:
{
   191bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   191c0:	4c1a      	ldr	r4, [pc, #104]	; (1922c <ticker_stop+0x70>)
   191c2:	262c      	movs	r6, #44	; 0x2c
   191c4:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   191c8:	b20f      	sxth	r7, r1
   191ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
   191ce:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   191d2:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   191d6:	f89c 4003 	ldrb.w	r4, [ip, #3]
   191da:	1c65      	adds	r5, r4, #1
   191dc:	b2ed      	uxtb	r5, r5
		last = 0U;
   191de:	42a8      	cmp	r0, r5
   191e0:	bf98      	it	ls
   191e2:	2500      	movls	r5, #0
	if (last == user->first) {
   191e4:	f89c 0001 	ldrb.w	r0, [ip, #1]
   191e8:	42a8      	cmp	r0, r5
   191ea:	d01c      	beq.n	19226 <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
   191ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
   191f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   191f4:	0124      	lsls	r4, r4, #4
   191f6:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   191f8:	f04f 0e05 	mov.w	lr, #5
   191fc:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
   19200:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
   19202:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   19204:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   19208:	9b06      	ldr	r3, [sp, #24]
   1920a:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   1920c:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   19210:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   19214:	4608      	mov	r0, r1
   19216:	4798      	blx	r3
   19218:	4643      	mov	r3, r8
   1921a:	2200      	movs	r2, #0
   1921c:	2104      	movs	r1, #4
   1921e:	47a0      	blx	r4
	return user_op->status;
   19220:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   19222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   19226:	2001      	movs	r0, #1
   19228:	e7fb      	b.n	19222 <ticker_stop+0x66>
   1922a:	bf00      	nop
   1922c:	20000ea4 	.word	0x20000ea4

00019230 <ticker_next_slot_get>:
{
   19230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   19234:	4c1c      	ldr	r4, [pc, #112]	; (192a8 <ticker_next_slot_get+0x78>)
   19236:	272c      	movs	r7, #44	; 0x2c
   19238:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   1923c:	b20d      	sxth	r5, r1
   1923e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   19242:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   19246:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   1924a:	f89c 4003 	ldrb.w	r4, [ip, #3]
   1924e:	1c66      	adds	r6, r4, #1
   19250:	b2f6      	uxtb	r6, r6
		last = 0U;
   19252:	42b0      	cmp	r0, r6
   19254:	bf98      	it	ls
   19256:	2600      	movls	r6, #0
	if (last == user->first) {
   19258:	f89c 0001 	ldrb.w	r0, [ip, #1]
   1925c:	42b0      	cmp	r0, r6
   1925e:	d020      	beq.n	192a2 <ticker_next_slot_get+0x72>
	user_op = &user->user_op[user->last];
   19260:	f8dc 0004 	ldr.w	r0, [ip, #4]
   19264:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   19268:	0124      	lsls	r4, r4, #4
   1926a:	1905      	adds	r5, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   1926c:	f64f 7e02 	movw	lr, #65282	; 0xff02
   19270:	f820 e004 	strh.w	lr, [r0, r4]
	user_op->params.slot_get.ticks_current = ticks_current;
   19274:	e9c5 2301 	strd	r2, r3, [r5, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   19278:	9b06      	ldr	r3, [sp, #24]
   1927a:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   1927c:	2302      	movs	r3, #2
   1927e:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   19280:	9b07      	ldr	r3, [sp, #28]
   19282:	62ab      	str	r3, [r5, #40]	; 0x28
	user_op->op_context = op_context;
   19284:	9b08      	ldr	r3, [sp, #32]
   19286:	62eb      	str	r3, [r5, #44]	; 0x2c
	user->last = last;
   19288:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1928c:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   19290:	4608      	mov	r0, r1
   19292:	4798      	blx	r3
   19294:	4643      	mov	r3, r8
   19296:	2200      	movs	r2, #0
   19298:	2104      	movs	r1, #4
   1929a:	47a0      	blx	r4
	return user_op->status;
   1929c:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1929e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   192a2:	2001      	movs	r0, #1
   192a4:	e7fb      	b.n	1929e <ticker_next_slot_get+0x6e>
   192a6:	bf00      	nop
   192a8:	20000ea4 	.word	0x20000ea4

000192ac <ticker_job_idle_get>:
{
   192ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   192b0:	4c19      	ldr	r4, [pc, #100]	; (19318 <ticker_job_idle_get+0x6c>)
   192b2:	262c      	movs	r6, #44	; 0x2c
   192b4:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   192b8:	b20f      	sxth	r7, r1
   192ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
   192be:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   192c2:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   192c6:	f89c 4003 	ldrb.w	r4, [ip, #3]
   192ca:	1c65      	adds	r5, r4, #1
   192cc:	b2ed      	uxtb	r5, r5
		last = 0U;
   192ce:	42a8      	cmp	r0, r5
   192d0:	bf98      	it	ls
   192d2:	2500      	movls	r5, #0
	if (last == user->first) {
   192d4:	f89c 0001 	ldrb.w	r0, [ip, #1]
   192d8:	42a8      	cmp	r0, r5
   192da:	d01a      	beq.n	19312 <ticker_job_idle_get+0x66>
	user_op = &user->user_op[user->last];
   192dc:	f8dc 0004 	ldr.w	r0, [ip, #4]
   192e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   192e4:	0124      	lsls	r4, r4, #4
   192e6:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   192e8:	f64f 7e01 	movw	lr, #65281	; 0xff01
   192ec:	f820 e004 	strh.w	lr, [r0, r4]
	user_op->status = TICKER_STATUS_BUSY;
   192f0:	2002      	movs	r0, #2
	user_op->fp_op_func = fp_op_func;
   192f2:	e9c7 0209 	strd	r0, r2, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   192f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   192f8:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   192fc:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   19300:	4608      	mov	r0, r1
   19302:	4798      	blx	r3
   19304:	4643      	mov	r3, r8
   19306:	2200      	movs	r2, #0
   19308:	2104      	movs	r1, #4
   1930a:	47a0      	blx	r4
	return user_op->status;
   1930c:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   1930e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   19312:	2001      	movs	r0, #1
   19314:	e7fb      	b.n	1930e <ticker_job_idle_get+0x62>
   19316:	bf00      	nop
   19318:	20000ea4 	.word	0x20000ea4

0001931c <ticker_job_sched>:
{
   1931c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   19320:	4c08      	ldr	r4, [pc, #32]	; (19344 <ticker_job_sched+0x28>)
   19322:	252c      	movs	r5, #44	; 0x2c
   19324:	fb05 4300 	mla	r3, r5, r0, r4
   19328:	e9d3 3708 	ldrd	r3, r7, [r3, #32]
{
   1932c:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1932e:	4608      	mov	r0, r1
   19330:	4798      	blx	r3
   19332:	fb06 4305 	mla	r3, r6, r5, r4
   19336:	46bc      	mov	ip, r7
   19338:	2200      	movs	r2, #0
   1933a:	2104      	movs	r1, #4
}
   1933c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   19340:	4760      	bx	ip
   19342:	bf00      	nop
   19344:	20000ea4 	.word	0x20000ea4

00019348 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   19348:	b508      	push	{r3, lr}
   1934a:	4603      	mov	r3, r0
	if (addr_type > 1) {
   1934c:	2b01      	cmp	r3, #1
{
   1934e:	4608      	mov	r0, r1
	if (addr_type > 1) {
   19350:	d80e      	bhi.n	19370 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
   19352:	b133      	cbz	r3, 19362 <ll_addr_get+0x1a>
		if (bdaddr) {
   19354:	b119      	cbz	r1, 1935e <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   19356:	2206      	movs	r2, #6
   19358:	4906      	ldr	r1, [pc, #24]	; (19374 <ll_addr_get+0x2c>)
   1935a:	f008 fd94 	bl	21e86 <memcpy>
		}

		return rnd_addr;
   1935e:	4805      	ldr	r0, [pc, #20]	; (19374 <ll_addr_get+0x2c>)
   19360:	e007      	b.n	19372 <ll_addr_get+0x2a>
	}

	if (bdaddr) {
   19362:	b119      	cbz	r1, 1936c <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   19364:	2206      	movs	r2, #6
   19366:	4904      	ldr	r1, [pc, #16]	; (19378 <ll_addr_get+0x30>)
   19368:	f008 fd8d 	bl	21e86 <memcpy>
	}

	return pub_addr;
   1936c:	4802      	ldr	r0, [pc, #8]	; (19378 <ll_addr_get+0x30>)
   1936e:	e000      	b.n	19372 <ll_addr_get+0x2a>
		return NULL;
   19370:	2000      	movs	r0, #0
}
   19372:	bd08      	pop	{r3, pc}
   19374:	20002449 	.word	0x20002449
   19378:	20002443 	.word	0x20002443

0001937c <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   1937c:	b570      	push	{r4, r5, r6, lr}
   1937e:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
   19380:	2000      	movs	r0, #0
{
   19382:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
   19384:	f002 feee 	bl	1c164 <ll_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   19388:	b110      	cbz	r0, 19390 <ll_addr_set+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1938a:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   1938c:	4620      	mov	r0, r4
   1938e:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   19390:	f002 fefe 	bl	1c190 <ll_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   19394:	f010 0406 	ands.w	r4, r0, #6
   19398:	d1f7      	bne.n	1938a <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1939a:	2206      	movs	r2, #6
   1939c:	4629      	mov	r1, r5
	if (addr_type) {
   1939e:	b11e      	cbz	r6, 193a8 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   193a0:	4802      	ldr	r0, [pc, #8]	; (193ac <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   193a2:	f008 fd70 	bl	21e86 <memcpy>
   193a6:	e7f1      	b.n	1938c <ll_addr_set+0x10>
   193a8:	4801      	ldr	r0, [pc, #4]	; (193b0 <ll_addr_set+0x34>)
   193aa:	e7fa      	b.n	193a2 <ll_addr_set+0x26>
   193ac:	20002449 	.word	0x20002449
   193b0:	20002443 	.word	0x20002443

000193b4 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
   193b4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   193b6:	4802      	ldr	r0, [pc, #8]	; (193c0 <_hci_driver_init+0xc>)
   193b8:	f7ee fca4 	bl	7d04 <bt_hci_driver_register>

	return 0;
}
   193bc:	2000      	movs	r0, #0
   193be:	bd08      	pop	{r3, pc}
   193c0:	00026360 	.word	0x00026360

000193c4 <stack_analyze>:
{
   193c4:	b570      	push	{r4, r5, r6, lr}
	size_t unused = 0;
   193c6:	2400      	movs	r4, #0
{
   193c8:	b086      	sub	sp, #24
				if (checked_stack[i] == 0xaaU) {
   193ca:	5d0b      	ldrb	r3, [r1, r4]
   193cc:	2baa      	cmp	r3, #170	; 0xaa
   193ce:	d102      	bne.n	193d6 <stack_analyze+0x12>
					unused++;
   193d0:	3401      	adds	r4, #1
			for (size_t i = 0; i < size; i++) {
   193d2:	42a2      	cmp	r2, r4
   193d4:	d1f9      	bne.n	193ca <stack_analyze+0x6>
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
   193d6:	2103      	movs	r1, #3
   193d8:	f04f 0300 	mov.w	r3, #0
   193dc:	f361 0307 	bfi	r3, r1, #0, #8
   193e0:	4d0b      	ldr	r5, [pc, #44]	; (19410 <stack_analyze+0x4c>)
   193e2:	490c      	ldr	r1, [pc, #48]	; (19414 <stack_analyze+0x50>)
   193e4:	1a6d      	subs	r5, r5, r1
		unsigned int pcnt = ((size - unused) * 100) / size;
   193e6:	1b16      	subs	r6, r2, r4
   193e8:	08ed      	lsrs	r5, r5, #3
   193ea:	2164      	movs	r1, #100	; 0x64
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
   193ec:	e9cd 0401 	strd	r0, r4, [sp, #4]
   193f0:	e9cd 6203 	strd	r6, r2, [sp, #12]
   193f4:	f365 138f 	bfi	r3, r5, #6, #10
		unsigned int pcnt = ((size - unused) * 100) / size;
   193f8:	4371      	muls	r1, r6
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
   193fa:	4807      	ldr	r0, [pc, #28]	; (19418 <stack_analyze+0x54>)
		unsigned int pcnt = ((size - unused) * 100) / size;
   193fc:	fbb1 f1f2 	udiv	r1, r1, r2
		LOG_INF("%s :\tunused %u\tusage %u / %u (%u %%)",
   19400:	2205      	movs	r2, #5
   19402:	9105      	str	r1, [sp, #20]
   19404:	a901      	add	r1, sp, #4
   19406:	f007 fc51 	bl	20cac <log_n>
}
   1940a:	b006      	add	sp, #24
   1940c:	bd70      	pop	{r4, r5, r6, pc}
   1940e:	bf00      	nop
   19410:	00025980 	.word	0x00025980
   19414:	00025880 	.word	0x00025880
   19418:	00026c91 	.word	0x00026c91

0001941c <recv_thread>:
{
   1941c:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1941e:	4e33      	ldr	r6, [pc, #204]	; (194ec <recv_thread+0xd0>)
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
   19420:	4d33      	ldr	r5, [pc, #204]	; (194f0 <recv_thread+0xd4>)
   19422:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19426:	4630      	mov	r0, r6
   19428:	f00b fe31 	bl	2508e <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1942c:	4604      	mov	r4, r0
   1942e:	2800      	cmp	r0, #0
   19430:	d03b      	beq.n	194aa <recv_thread+0x8e>
	s8_t class = hci_get_class(node_rx);
   19432:	f00b f883 	bl	2453c <hci_get_class>
	switch (class) {
   19436:	1e03      	subs	r3, r0, #0
   19438:	9401      	str	r4, [sp, #4]
   1943a:	db03      	blt.n	19444 <recv_thread+0x28>
   1943c:	2b02      	cmp	r3, #2
   1943e:	dd15      	ble.n	1946c <recv_thread+0x50>
   19440:	2b03      	cmp	r3, #3
   19442:	d046      	beq.n	194d2 <recv_thread+0xb6>
		LL_ASSERT(0);
   19444:	2301      	movs	r3, #1
   19446:	f04f 0100 	mov.w	r1, #0
   1944a:	4a2a      	ldr	r2, [pc, #168]	; (194f4 <recv_thread+0xd8>)
   1944c:	482a      	ldr	r0, [pc, #168]	; (194f8 <recv_thread+0xdc>)
   1944e:	f363 0107 	bfi	r1, r3, #0, #8
   19452:	4b2a      	ldr	r3, [pc, #168]	; (194fc <recv_thread+0xe0>)
   19454:	1a9b      	subs	r3, r3, r2
   19456:	08db      	lsrs	r3, r3, #3
   19458:	f363 118f 	bfi	r1, r3, #6, #10
   1945c:	f007 fbd2 	bl	20c04 <log_0>
   19460:	4040      	eors	r0, r0
   19462:	f380 8811 	msr	BASEPRI, r0
   19466:	f04f 0004 	mov.w	r0, #4
   1946a:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   1946c:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
   1946e:	bf0e      	itee	eq
   19470:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19472:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   19476:	2001      	movne	r0, #1
   19478:	f7ee ff94 	bl	83a4 <bt_buf_get_rx>
   1947c:	4604      	mov	r4, r0
		if (buf) {
   1947e:	b118      	cbz	r0, 19488 <recv_thread+0x6c>
			hci_evt_encode(node_rx, buf);
   19480:	4601      	mov	r1, r0
   19482:	9801      	ldr	r0, [sp, #4]
   19484:	f000 fe08 	bl	1a098 <hci_evt_encode>
		radio_rx_fc_set(node_rx->hdr.handle, 0);
   19488:	9b01      	ldr	r3, [sp, #4]
   1948a:	2100      	movs	r1, #0
   1948c:	88d8      	ldrh	r0, [r3, #6]
   1948e:	f002 ff1d 	bl	1c2cc <radio_rx_fc_set>
	node_rx->hdr.next = NULL;
   19492:	9b01      	ldr	r3, [sp, #4]
   19494:	2200      	movs	r2, #0
   19496:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   19498:	a801      	add	r0, sp, #4
   1949a:	f002 fed1 	bl	1c240 <ll_rx_mem_release>
		if (buf) {
   1949e:	b124      	cbz	r4, 194aa <recv_thread+0x8e>
			if (buf->len) {
   194a0:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   194a2:	4620      	mov	r0, r4
			if (buf->len) {
   194a4:	b1fb      	cbz	r3, 194e6 <recv_thread+0xca>
				bt_recv(buf);
   194a6:	f7ee fb2f 	bl	7b08 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   194aa:	f005 fa67 	bl	1e97c <z_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   194ae:	f00c f822 	bl	254f6 <z_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
   194b2:	682b      	ldr	r3, [r5, #0]
   194b4:	1ac0      	subs	r0, r0, r3
   194b6:	f241 3388 	movw	r3, #5000	; 0x1388
   194ba:	4298      	cmp	r0, r3
   194bc:	d9b1      	bls.n	19422 <recv_thread+0x6>
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
   194be:	f44f 6200 	mov.w	r2, #2048	; 0x800
   194c2:	490f      	ldr	r1, [pc, #60]	; (19500 <recv_thread+0xe4>)
   194c4:	480f      	ldr	r0, [pc, #60]	; (19504 <recv_thread+0xe8>)
   194c6:	f7ff ff7d 	bl	193c4 <stack_analyze>
   194ca:	f00c f814 	bl	254f6 <z_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
   194ce:	6028      	str	r0, [r5, #0]
   194d0:	e7a7      	b.n	19422 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   194d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194d6:	f7ee ff65 	bl	83a4 <bt_buf_get_rx>
   194da:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   194dc:	4601      	mov	r1, r0
   194de:	9801      	ldr	r0, [sp, #4]
   194e0:	f000 fd9a 	bl	1a018 <hci_acl_encode>
		break;
   194e4:	e7d0      	b.n	19488 <recv_thread+0x6c>
				net_buf_unref(buf);
   194e6:	f004 f93f 	bl	1d768 <net_buf_unref>
   194ea:	e7de      	b.n	194aa <recv_thread+0x8e>
   194ec:	200078fc 	.word	0x200078fc
   194f0:	20000fac 	.word	0x20000fac
   194f4:	00025880 	.word	0x00025880
   194f8:	0002c060 	.word	0x0002c060
   194fc:	000258a8 	.word	0x000258a8
   19500:	20003318 	.word	0x20003318
   19504:	0002c04e 	.word	0x0002c04e

00019508 <hci_driver_send>:
	if (!buf->len) {
   19508:	8983      	ldrh	r3, [r0, #12]
{
   1950a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1950c:	4605      	mov	r5, r0
	if (!buf->len) {
   1950e:	b993      	cbnz	r3, 19536 <hci_driver_send+0x2e>
		BT_ERR("Empty HCI packet");
   19510:	2301      	movs	r3, #1
   19512:	f04f 0100 	mov.w	r1, #0
   19516:	f363 0107 	bfi	r1, r3, #0, #8
   1951a:	4a1f      	ldr	r2, [pc, #124]	; (19598 <hci_driver_send+0x90>)
   1951c:	4b1f      	ldr	r3, [pc, #124]	; (1959c <hci_driver_send+0x94>)
   1951e:	4820      	ldr	r0, [pc, #128]	; (195a0 <hci_driver_send+0x98>)
   19520:	1a9b      	subs	r3, r3, r2
   19522:	08db      	lsrs	r3, r3, #3
   19524:	f363 118f 	bfi	r1, r3, #6, #10
   19528:	f007 fb6c 	bl	20c04 <log_0>
		return -EINVAL;
   1952c:	f06f 0415 	mvn.w	r4, #21
}
   19530:	4620      	mov	r0, r4
   19532:	b003      	add	sp, #12
   19534:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
   19536:	7d01      	ldrb	r1, [r0, #20]
	switch (type) {
   19538:	b181      	cbz	r1, 1955c <hci_driver_send+0x54>
   1953a:	2902      	cmp	r1, #2
   1953c:	d11d      	bne.n	1957a <hci_driver_send+0x72>
	err = hci_acl_handle(buf, &evt);
   1953e:	a901      	add	r1, sp, #4
   19540:	f000 fccc 	bl	19edc <hci_acl_handle>
   19544:	4604      	mov	r4, r0
	if (evt) {
   19546:	9801      	ldr	r0, [sp, #4]
   19548:	b108      	cbz	r0, 1954e <hci_driver_send+0x46>
		bt_recv_prio(evt);
   1954a:	f7ee fb83 	bl	7c54 <bt_recv_prio>
	if (!err) {
   1954e:	2c00      	cmp	r4, #0
   19550:	d1ee      	bne.n	19530 <hci_driver_send+0x28>
		net_buf_unref(buf);
   19552:	4628      	mov	r0, r5
   19554:	f004 f908 	bl	1d768 <net_buf_unref>
   19558:	2400      	movs	r4, #0
   1955a:	e7e9      	b.n	19530 <hci_driver_send+0x28>
	void *node_rx = NULL;
   1955c:	9101      	str	r1, [sp, #4]
	evt = hci_cmd_handle(buf, &node_rx);
   1955e:	a901      	add	r1, sp, #4
   19560:	f000 f930 	bl	197c4 <hci_cmd_handle>
	if (evt) {
   19564:	2800      	cmp	r0, #0
   19566:	d0f4      	beq.n	19552 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   19568:	f7ee fb74 	bl	7c54 <bt_recv_prio>
		if (node_rx) {
   1956c:	9901      	ldr	r1, [sp, #4]
   1956e:	2900      	cmp	r1, #0
   19570:	d0ef      	beq.n	19552 <hci_driver_send+0x4a>
			k_fifo_put(&recv_fifo, node_rx);
   19572:	480c      	ldr	r0, [pc, #48]	; (195a4 <hci_driver_send+0x9c>)
   19574:	f00b fd64 	bl	25040 <k_queue_append>
	if (!err) {
   19578:	e7eb      	b.n	19552 <hci_driver_send+0x4a>
		BT_ERR("Unknown HCI type %u", type);
   1957a:	2301      	movs	r3, #1
   1957c:	f04f 0200 	mov.w	r2, #0
   19580:	f363 0207 	bfi	r2, r3, #0, #8
   19584:	4804      	ldr	r0, [pc, #16]	; (19598 <hci_driver_send+0x90>)
   19586:	4b05      	ldr	r3, [pc, #20]	; (1959c <hci_driver_send+0x94>)
   19588:	1a1b      	subs	r3, r3, r0
   1958a:	08db      	lsrs	r3, r3, #3
   1958c:	f363 128f 	bfi	r2, r3, #6, #10
   19590:	4805      	ldr	r0, [pc, #20]	; (195a8 <hci_driver_send+0xa0>)
   19592:	f007 fb44 	bl	20c1e <log_1>
   19596:	e7c9      	b.n	1952c <hci_driver_send+0x24>
   19598:	00025880 	.word	0x00025880
   1959c:	000258a8 	.word	0x000258a8
   195a0:	0002c024 	.word	0x0002c024
   195a4:	200078fc 	.word	0x200078fc
   195a8:	0002c035 	.word	0x0002c035

000195ac <prio_recv_thread>:
{
   195ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   195b0:	4f1d      	ldr	r7, [pc, #116]	; (19628 <prio_recv_thread+0x7c>)
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
   195b2:	4c1e      	ldr	r4, [pc, #120]	; (1962c <prio_recv_thread+0x80>)
			STACK_ANALYZE("prio recv thread stack",
   195b4:	4e1e      	ldr	r6, [pc, #120]	; (19630 <prio_recv_thread+0x84>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
   195b6:	f10d 0102 	add.w	r1, sp, #2
   195ba:	a801      	add	r0, sp, #4
   195bc:	f002 fe0c 	bl	1c1d8 <ll_rx_get>
   195c0:	4605      	mov	r5, r0
   195c2:	b940      	cbnz	r0, 195d6 <prio_recv_thread+0x2a>
		if (node_rx) {
   195c4:	9b01      	ldr	r3, [sp, #4]
   195c6:	b1bb      	cbz	r3, 195f8 <prio_recv_thread+0x4c>
			ll_rx_dequeue();
   195c8:	f002 ffac 	bl	1c524 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
   195cc:	9901      	ldr	r1, [sp, #4]
   195ce:	4819      	ldr	r0, [pc, #100]	; (19634 <prio_recv_thread+0x88>)
   195d0:	f00b fd36 	bl	25040 <k_queue_append>
			continue;
   195d4:	e7ef      	b.n	195b6 <prio_recv_thread+0xa>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   195d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   195da:	2001      	movs	r0, #1
   195dc:	f7ee fee2 	bl	83a4 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   195e0:	462a      	mov	r2, r5
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   195e2:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   195e4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   195e8:	f00a ff94 	bl	24514 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   195ec:	4640      	mov	r0, r8
   195ee:	f7ee fb31 	bl	7c54 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   195f2:	f005 f9c3 	bl	1e97c <z_impl_k_yield>
   195f6:	e7de      	b.n	195b6 <prio_recv_thread+0xa>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   195f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   195fc:	4638      	mov	r0, r7
   195fe:	f005 fa99 	bl	1eb34 <z_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   19602:	f00b ff78 	bl	254f6 <z_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
   19606:	6823      	ldr	r3, [r4, #0]
   19608:	1ac0      	subs	r0, r0, r3
   1960a:	f241 3388 	movw	r3, #5000	; 0x1388
   1960e:	4298      	cmp	r0, r3
   19610:	d9d1      	bls.n	195b6 <prio_recv_thread+0xa>
			STACK_ANALYZE("prio recv thread stack",
   19612:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   19616:	4631      	mov	r1, r6
   19618:	4807      	ldr	r0, [pc, #28]	; (19638 <prio_recv_thread+0x8c>)
   1961a:	f7ff fed3 	bl	193c4 <stack_analyze>
   1961e:	f00b ff6a 	bl	254f6 <z_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
   19622:	6020      	str	r0, [r4, #0]
   19624:	e7c7      	b.n	195b6 <prio_recv_thread+0xa>
   19626:	bf00      	nop
   19628:	200078ac 	.word	0x200078ac
   1962c:	20000f3c 	.word	0x20000f3c
   19630:	20003158 	.word	0x20003158
   19634:	200078fc 	.word	0x200078fc
   19638:	0002c049 	.word	0x0002c049

0001963c <hci_driver_open>:
{
   1963c:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
   1963e:	4820      	ldr	r0, [pc, #128]	; (196c0 <hci_driver_open+0x84>)
{
   19640:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
   19642:	f003 f845 	bl	1c6d0 <ll_init>
	if (err) {
   19646:	4604      	mov	r4, r0
   19648:	b188      	cbz	r0, 1966e <hci_driver_open+0x32>
		BT_ERR("LL initialization failed: %u", err);
   1964a:	2301      	movs	r3, #1
   1964c:	f04f 0200 	mov.w	r2, #0
   19650:	f363 0207 	bfi	r2, r3, #0, #8
   19654:	491b      	ldr	r1, [pc, #108]	; (196c4 <hci_driver_open+0x88>)
   19656:	4b1c      	ldr	r3, [pc, #112]	; (196c8 <hci_driver_open+0x8c>)
   19658:	1a5b      	subs	r3, r3, r1
   1965a:	08db      	lsrs	r3, r3, #3
   1965c:	4601      	mov	r1, r0
   1965e:	f363 128f 	bfi	r2, r3, #6, #10
   19662:	481a      	ldr	r0, [pc, #104]	; (196cc <hci_driver_open+0x90>)
   19664:	f007 fadb 	bl	20c1e <log_1>
}
   19668:	4620      	mov	r0, r4
   1966a:	b006      	add	sp, #24
   1966c:	bd10      	pop	{r4, pc}
	hci_init(NULL);
   1966e:	f000 fecf 	bl	1a410 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   19672:	f06f 0309 	mvn.w	r3, #9
   19676:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1967a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1967e:	4b14      	ldr	r3, [pc, #80]	; (196d0 <hci_driver_open+0x94>)
   19680:	4914      	ldr	r1, [pc, #80]	; (196d4 <hci_driver_open+0x98>)
   19682:	4815      	ldr	r0, [pc, #84]	; (196d8 <hci_driver_open+0x9c>)
   19684:	e9cd 4404 	strd	r4, r4, [sp, #16]
   19688:	e9cd 4400 	strd	r4, r4, [sp]
   1968c:	f005 fade 	bl	1ec4c <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   19690:	4912      	ldr	r1, [pc, #72]	; (196dc <hci_driver_open+0xa0>)
   19692:	4811      	ldr	r0, [pc, #68]	; (196d8 <hci_driver_open+0x9c>)
   19694:	f00b fe4f 	bl	25336 <z_impl_k_thread_name_set>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   19698:	f06f 0307 	mvn.w	r3, #7
   1969c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   196a0:	e9cd 4404 	strd	r4, r4, [sp, #16]
   196a4:	e9cd 4400 	strd	r4, r4, [sp]
   196a8:	4b0d      	ldr	r3, [pc, #52]	; (196e0 <hci_driver_open+0xa4>)
   196aa:	490e      	ldr	r1, [pc, #56]	; (196e4 <hci_driver_open+0xa8>)
   196ac:	480e      	ldr	r0, [pc, #56]	; (196e8 <hci_driver_open+0xac>)
   196ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
   196b2:	f005 facb 	bl	1ec4c <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   196b6:	490d      	ldr	r1, [pc, #52]	; (196ec <hci_driver_open+0xb0>)
   196b8:	480b      	ldr	r0, [pc, #44]	; (196e8 <hci_driver_open+0xac>)
   196ba:	f00b fe3c 	bl	25336 <z_impl_k_thread_name_set>
	return 0;
   196be:	e7d3      	b.n	19668 <hci_driver_open+0x2c>
   196c0:	200078ac 	.word	0x200078ac
   196c4:	00025880 	.word	0x00025880
   196c8:	000258a8 	.word	0x000258a8
   196cc:	0002bff7 	.word	0x0002bff7
   196d0:	000195ad 	.word	0x000195ad
   196d4:	20003158 	.word	0x20003158
   196d8:	20000ed0 	.word	0x20000ed0
   196dc:	0002c014 	.word	0x0002c014
   196e0:	0001941d 	.word	0x0001941d
   196e4:	20003318 	.word	0x20003318
   196e8:	20000f40 	.word	0x20000f40
   196ec:	0002c01e 	.word	0x0002c01e

000196f0 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
   196f0:	b538      	push	{r3, r4, r5, lr}
   196f2:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
   196f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196f8:	f7ee fe64 	bl	83c4 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   196fc:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   196fe:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   19700:	210f      	movs	r1, #15
   19702:	f00a fee4 	bl	244ce <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   19706:	2104      	movs	r1, #4
   19708:	f104 0008 	add.w	r0, r4, #8
   1970c:	f00b fade 	bl	24ccc <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
   19710:	2301      	movs	r3, #1
   19712:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
   19714:	4b02      	ldr	r3, [pc, #8]	; (19720 <cmd_status+0x30>)
	cs->status = status;
   19716:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
   19718:	881b      	ldrh	r3, [r3, #0]
   1971a:	8043      	strh	r3, [r0, #2]

	return buf;
}
   1971c:	4620      	mov	r0, r4
   1971e:	bd38      	pop	{r3, r4, r5, pc}
   19720:	20001e8a 	.word	0x20001e8a

00019724 <cmd_complete>:
{
   19724:	b538      	push	{r3, r4, r5, lr}
   19726:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   19728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   1972c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   1972e:	f7ee fe49 	bl	83c4 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   19732:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   19734:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   19736:	b2d2      	uxtb	r2, r2
   19738:	210e      	movs	r1, #14
   1973a:	f00a fec8 	bl	244ce <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
   1973e:	6820      	ldr	r0, [r4, #0]
   19740:	2103      	movs	r1, #3
   19742:	3008      	adds	r0, #8
   19744:	f00b fac2 	bl	24ccc <net_buf_simple_add>
	cc->ncmd = 1;
   19748:	2301      	movs	r3, #1
   1974a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
   1974c:	4b05      	ldr	r3, [pc, #20]	; (19764 <cmd_complete+0x40>)
   1974e:	881b      	ldrh	r3, [r3, #0]
   19750:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
   19754:	6820      	ldr	r0, [r4, #0]
   19756:	4629      	mov	r1, r5
   19758:	3008      	adds	r0, #8
}
   1975a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   1975e:	f00b bab5 	b.w	24ccc <net_buf_simple_add>
   19762:	bf00      	nop
   19764:	20001e8a 	.word	0x20001e8a

00019768 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
   19768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1976a:	4605      	mov	r5, r0
   1976c:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1976e:	4b13      	ldr	r3, [pc, #76]	; (197bc <le_remote_feat_complete+0x54>)
{
   19770:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19772:	6859      	ldr	r1, [r3, #4]
   19774:	2400      	movs	r4, #0
{
   19776:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19778:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   1977c:	4622      	mov	r2, r4
   1977e:	4313      	orrs	r3, r2
   19780:	d01a      	beq.n	197b8 <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   19782:	4b0f      	ldr	r3, [pc, #60]	; (197c0 <le_remote_feat_complete+0x58>)
   19784:	6819      	ldr	r1, [r3, #0]
   19786:	4623      	mov	r3, r4
   19788:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1978c:	4313      	orrs	r3, r2
   1978e:	d013      	beq.n	197b8 <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   19790:	220b      	movs	r2, #11
   19792:	2104      	movs	r1, #4
   19794:	f00a fea5 	bl	244e2 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   19798:	2208      	movs	r2, #8
	sep->status = status;
   1979a:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1979c:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   197a0:	3003      	adds	r0, #3
   197a2:	b925      	cbnz	r5, 197ae <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
   197a4:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   197a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   197aa:	f008 bb6c 	b.w	21e86 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   197ae:	4621      	mov	r1, r4
}
   197b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   197b4:	f008 bb91 	b.w	21eda <memset>
}
   197b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197ba:	bf00      	nop
   197bc:	20006cb0 	.word	0x20006cb0
   197c0:	20006cb8 	.word	0x20006cb8

000197c4 <hci_cmd_handle>:
{
   197c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   197c6:	8983      	ldrh	r3, [r0, #12]
{
   197c8:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   197ca:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   197cc:	2b02      	cmp	r3, #2
{
   197ce:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   197d0:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   197d2:	d810      	bhi.n	197f6 <hci_cmd_handle+0x32>
		BT_ERR("No HCI Command header");
   197d4:	2301      	movs	r3, #1
   197d6:	f04f 0100 	mov.w	r1, #0
   197da:	f363 0107 	bfi	r1, r3, #0, #8
   197de:	4ac7      	ldr	r2, [pc, #796]	; (19afc <hci_cmd_handle+0x338>)
   197e0:	4bc7      	ldr	r3, [pc, #796]	; (19b00 <hci_cmd_handle+0x33c>)
   197e2:	48c8      	ldr	r0, [pc, #800]	; (19b04 <hci_cmd_handle+0x340>)
   197e4:	1a9b      	subs	r3, r3, r2
   197e6:	08db      	lsrs	r3, r3, #3
   197e8:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI CMD packet length");
   197ec:	f007 fa0a 	bl	20c04 <log_0>
		return NULL;
   197f0:	4628      	mov	r0, r5
}
   197f2:	b00d      	add	sp, #52	; 0x34
   197f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   197f6:	2103      	movs	r1, #3
   197f8:	3008      	adds	r0, #8
   197fa:	f00b fadc 	bl	24db6 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   197fe:	89a2      	ldrh	r2, [r4, #12]
   19800:	7883      	ldrb	r3, [r0, #2]
   19802:	429a      	cmp	r2, r3
   19804:	d20c      	bcs.n	19820 <hci_cmd_handle+0x5c>
		BT_ERR("Invalid HCI CMD packet length");
   19806:	2301      	movs	r3, #1
   19808:	f04f 0100 	mov.w	r1, #0
   1980c:	f363 0107 	bfi	r1, r3, #0, #8
   19810:	4aba      	ldr	r2, [pc, #744]	; (19afc <hci_cmd_handle+0x338>)
   19812:	4bbb      	ldr	r3, [pc, #748]	; (19b00 <hci_cmd_handle+0x33c>)
   19814:	48bc      	ldr	r0, [pc, #752]	; (19b08 <hci_cmd_handle+0x344>)
   19816:	1a9b      	subs	r3, r3, r2
   19818:	08db      	lsrs	r3, r3, #3
   1981a:	f363 118f 	bfi	r1, r3, #6, #10
   1981e:	e7e5      	b.n	197ec <hci_cmd_handle+0x28>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   19820:	8802      	ldrh	r2, [r0, #0]
   19822:	49ba      	ldr	r1, [pc, #744]	; (19b0c <hci_cmd_handle+0x348>)
   19824:	b293      	uxth	r3, r2
   19826:	800a      	strh	r2, [r1, #0]
	ocf = BT_OCF(_opcode);
   19828:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   1982c:	0a9b      	lsrs	r3, r3, #10
   1982e:	2b04      	cmp	r3, #4
   19830:	d07a      	beq.n	19928 <hci_cmd_handle+0x164>
   19832:	d809      	bhi.n	19848 <hci_cmd_handle+0x84>
   19834:	2b01      	cmp	r3, #1
   19836:	d027      	beq.n	19888 <hci_cmd_handle+0xc4>
   19838:	2b03      	cmp	r3, #3
   1983a:	d037      	beq.n	198ac <hci_cmd_handle+0xe8>
		ccst = cmd_complete(&evt, sizeof(*ccst));
   1983c:	2101      	movs	r1, #1
   1983e:	a805      	add	r0, sp, #20
   19840:	f7ff ff70 	bl	19724 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   19844:	2301      	movs	r3, #1
   19846:	e04c      	b.n	198e2 <hci_cmd_handle+0x11e>
	switch (BT_OGF(_opcode)) {
   19848:	2b08      	cmp	r3, #8
   1984a:	f000 80f8 	beq.w	19a3e <hci_cmd_handle+0x27a>
   1984e:	2b3f      	cmp	r3, #63	; 0x3f
   19850:	d1f4      	bne.n	1983c <hci_cmd_handle+0x78>
	switch (ocf) {
   19852:	3a01      	subs	r2, #1
   19854:	2a09      	cmp	r2, #9
   19856:	d8f1      	bhi.n	1983c <hci_cmd_handle+0x78>
   19858:	a301      	add	r3, pc, #4	; (adr r3, 19860 <hci_cmd_handle+0x9c>)
   1985a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1985e:	bf00      	nop
   19860:	00019cef 	.word	0x00019cef
   19864:	00019d1b 	.word	0x00019d1b
   19868:	00019d43 	.word	0x00019d43
   1986c:	0001983d 	.word	0x0001983d
   19870:	0001983d 	.word	0x0001983d
   19874:	00019d8f 	.word	0x00019d8f
   19878:	0001983d 	.word	0x0001983d
   1987c:	00019d59 	.word	0x00019d59
   19880:	00019d99 	.word	0x00019d99
   19884:	00019e05 	.word	0x00019e05
	switch (ocf) {
   19888:	2a06      	cmp	r2, #6
   1988a:	d006      	beq.n	1989a <hci_cmd_handle+0xd6>
   1988c:	2a1d      	cmp	r2, #29
   1988e:	d1d5      	bne.n	1983c <hci_cmd_handle+0x78>
	handle = sys_le16_to_cpu(cmd->handle);
   19890:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   19892:	8818      	ldrh	r0, [r3, #0]
   19894:	f00b f83a 	bl	2490c <ll_version_ind_send>
	*evt = cmd_status(status);
   19898:	e004      	b.n	198a4 <hci_cmd_handle+0xe0>
		disconnect(cmd, evt);
   1989a:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1989c:	7899      	ldrb	r1, [r3, #2]
   1989e:	8818      	ldrh	r0, [r3, #0]
   198a0:	f00b f84a 	bl	24938 <ll_terminate_ind_send>
	*evt = cmd_status(status);
   198a4:	f7ff ff24 	bl	196f0 <cmd_status>
   198a8:	9005      	str	r0, [sp, #20]
	if (err == -EINVAL) {
   198aa:	e00f      	b.n	198cc <hci_cmd_handle+0x108>
	switch (ocf) {
   198ac:	2a03      	cmp	r2, #3
   198ae:	d01a      	beq.n	198e6 <hci_cmd_handle+0x122>
   198b0:	d80e      	bhi.n	198d0 <hci_cmd_handle+0x10c>
   198b2:	2a01      	cmp	r2, #1
   198b4:	d1c2      	bne.n	1983c <hci_cmd_handle+0x78>
	event_mask = sys_get_le64(cmd->events);
   198b6:	68a0      	ldr	r0, [r4, #8]
   198b8:	f00a fe28 	bl	2450c <sys_get_le64>
   198bc:	4b94      	ldr	r3, [pc, #592]	; (19b10 <hci_cmd_handle+0x34c>)
   198be:	e9c3 0100 	strd	r0, r1, [r3]
		ccst = cmd_complete(evt, sizeof(*ccst));
   198c2:	2101      	movs	r1, #1
   198c4:	a805      	add	r0, sp, #20
   198c6:	f7ff ff2d 	bl	19724 <cmd_complete>
		ccst->status = 0x00;
   198ca:	7005      	strb	r5, [r0, #0]
	return evt;
   198cc:	9805      	ldr	r0, [sp, #20]
   198ce:	e790      	b.n	197f2 <hci_cmd_handle+0x2e>
	switch (ocf) {
   198d0:	2a2d      	cmp	r2, #45	; 0x2d
   198d2:	d017      	beq.n	19904 <hci_cmd_handle+0x140>
   198d4:	2a63      	cmp	r2, #99	; 0x63
   198d6:	d1b1      	bne.n	1983c <hci_cmd_handle+0x78>
	ccst = cmd_complete(evt, sizeof(*ccst));
   198d8:	2101      	movs	r1, #1
   198da:	a805      	add	r0, sp, #20
   198dc:	f7ff ff22 	bl	19724 <cmd_complete>
	ccst->status = 0x00;
   198e0:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   198e2:	7003      	strb	r3, [r0, #0]
   198e4:	e7f2      	b.n	198cc <hci_cmd_handle+0x108>
	event_mask = DEFAULT_EVENT_MASK;
   198e6:	4b8a      	ldr	r3, [pc, #552]	; (19b10 <hci_cmd_handle+0x34c>)
   198e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   198ec:	f641 71ff 	movw	r1, #8191	; 0x1fff
   198f0:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   198f4:	4b87      	ldr	r3, [pc, #540]	; (19b14 <hci_cmd_handle+0x350>)
   198f6:	201f      	movs	r0, #31
   198f8:	2100      	movs	r1, #0
   198fa:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   198fe:	f002 fbdd 	bl	1c0bc <ll_reset>
   19902:	e7de      	b.n	198c2 <hci_cmd_handle+0xfe>
		read_tx_power_level(cmd, evt);
   19904:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   19906:	2104      	movs	r1, #4
   19908:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   1990a:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   1990c:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
   1990e:	f7ff ff09 	bl	19724 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   19912:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   19914:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
   19916:	1cc2      	adds	r2, r0, #3
   19918:	4639      	mov	r1, r7
   1991a:	4630      	mov	r0, r6
   1991c:	f00b f822 	bl	24964 <ll_tx_pwr_lvl_get>
	rp->status = status;
   19920:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   19922:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   19926:	e7d1      	b.n	198cc <hci_cmd_handle+0x108>
	switch (ocf) {
   19928:	3a01      	subs	r2, #1
   1992a:	2a08      	cmp	r2, #8
   1992c:	d886      	bhi.n	1983c <hci_cmd_handle+0x78>
   1992e:	a301      	add	r3, pc, #4	; (adr r3, 19934 <hci_cmd_handle+0x170>)
   19930:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   19934:	00019959 	.word	0x00019959
   19938:	00019983 	.word	0x00019983
   1993c:	00019a0b 	.word	0x00019a0b
   19940:	0001983d 	.word	0x0001983d
   19944:	0001983d 	.word	0x0001983d
   19948:	0001983d 	.word	0x0001983d
   1994c:	0001983d 	.word	0x0001983d
   19950:	0001983d 	.word	0x0001983d
   19954:	00019a27 	.word	0x00019a27
	rp = cmd_complete(evt, sizeof(*rp));
   19958:	2109      	movs	r1, #9
   1995a:	a805      	add	r0, sp, #20
   1995c:	f7ff fee2 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19960:	2300      	movs	r3, #0
   19962:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   19964:	7083      	strb	r3, [r0, #2]
   19966:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
   19968:	f06f 030e 	mvn.w	r3, #14
   1996c:	7143      	strb	r3, [r0, #5]
   1996e:	2305      	movs	r3, #5
	rp->hci_version = LL_VERSION_NUMBER;
   19970:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
   19972:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
   19974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = LL_VERSION_NUMBER;
   19978:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   1997a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
   1997c:	71c3      	strb	r3, [r0, #7]
   1997e:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   19980:	e7a4      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19982:	2141      	movs	r1, #65	; 0x41
   19984:	a805      	add	r0, sp, #20
   19986:	f7ff fecd 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   1998a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1998c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1998e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   19990:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   19994:	f008 faa1 	bl	21eda <memset>
	rp->commands[2] |= BIT(7);
   19998:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(6) | BIT(7);
   1999a:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   1999c:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
   1999e:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[2] |= BIT(7);
   199a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   199a4:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
   199a6:	79a3      	ldrb	r3, [r4, #6]
   199a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   199ac:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   199ae:	7ae3      	ldrb	r3, [r4, #11]
   199b0:	f043 0304 	orr.w	r3, r3, #4
   199b4:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   199b6:	7be3      	ldrb	r3, [r4, #15]
   199b8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   199bc:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   199be:	7c23      	ldrb	r3, [r4, #16]
   199c0:	f043 0302 	orr.w	r3, r3, #2
   199c4:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   199c6:	7de3      	ldrb	r3, [r4, #23]
   199c8:	f043 0304 	orr.w	r3, r3, #4
   199cc:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
   199ce:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   199d0:	f063 0308 	orn	r3, r3, #8
   199d4:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   199d6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
   199da:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
   199de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
   199e2:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
   199e4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   199e8:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   199ea:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
   199ee:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   199f2:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
   199f6:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
   199fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
   199fe:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   19a00:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
   19a02:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   19a04:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   19a08:	e760      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19a0a:	2109      	movs	r1, #9
   19a0c:	a805      	add	r0, sp, #20
   19a0e:	f7ff fe89 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19a12:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   19a14:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   19a16:	2208      	movs	r2, #8
	rp->status = 0x00;
   19a18:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   19a1c:	f008 fa5d 	bl	21eda <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   19a20:	2360      	movs	r3, #96	; 0x60
   19a22:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   19a24:	e752      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19a26:	2107      	movs	r1, #7
   19a28:	a805      	add	r0, sp, #20
   19a2a:	f7ff fe7b 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19a2e:	4601      	mov	r1, r0
   19a30:	2300      	movs	r3, #0
   19a32:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   19a36:	4618      	mov	r0, r3
   19a38:	f7ff fc86 	bl	19348 <ll_addr_get>
	if (err == -EINVAL) {
   19a3c:	e746      	b.n	198cc <hci_cmd_handle+0x108>
	switch (ocf) {
   19a3e:	2a0f      	cmp	r2, #15
   19a40:	f000 80d4 	beq.w	19bec <hci_cmd_handle+0x428>
   19a44:	d848      	bhi.n	19ad8 <hci_cmd_handle+0x314>
   19a46:	2a07      	cmp	r2, #7
   19a48:	f000 810c 	beq.w	19c64 <hci_cmd_handle+0x4a0>
   19a4c:	d829      	bhi.n	19aa2 <hci_cmd_handle+0x2de>
   19a4e:	2a03      	cmp	r2, #3
   19a50:	f000 80af 	beq.w	19bb2 <hci_cmd_handle+0x3ee>
   19a54:	d811      	bhi.n	19a7a <hci_cmd_handle+0x2b6>
   19a56:	2a01      	cmp	r2, #1
   19a58:	f000 80a4 	beq.w	19ba4 <hci_cmd_handle+0x3e0>
   19a5c:	2a02      	cmp	r2, #2
   19a5e:	f47f aeed 	bne.w	1983c <hci_cmd_handle+0x78>
	rp = cmd_complete(evt, sizeof(*rp));
   19a62:	2104      	movs	r1, #4
   19a64:	a805      	add	r0, sp, #20
   19a66:	f7ff fe5d 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19a6a:	2300      	movs	r3, #0
   19a6c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   19a6e:	221b      	movs	r2, #27
   19a70:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   19a72:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   19a74:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   19a76:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   19a78:	e728      	b.n	198cc <hci_cmd_handle+0x108>
	switch (ocf) {
   19a7a:	2a05      	cmp	r2, #5
   19a7c:	f000 80ab 	beq.w	19bd6 <hci_cmd_handle+0x412>
   19a80:	2a06      	cmp	r2, #6
   19a82:	f47f aedb 	bne.w	1983c <hci_cmd_handle+0x78>
		le_set_adv_param(cmd, evt);
   19a86:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   19a88:	7ba5      	ldrb	r5, [r4, #14]
   19a8a:	79a3      	ldrb	r3, [r4, #6]
   19a8c:	7962      	ldrb	r2, [r4, #5]
   19a8e:	7921      	ldrb	r1, [r4, #4]
   19a90:	8820      	ldrh	r0, [r4, #0]
   19a92:	9502      	str	r5, [sp, #8]
   19a94:	7b65      	ldrb	r5, [r4, #13]
   19a96:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   19a98:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   19a9a:	9400      	str	r4, [sp, #0]
   19a9c:	f002 fec4 	bl	1c828 <ll_adv_params_set>
   19aa0:	e09d      	b.n	19bde <hci_cmd_handle+0x41a>
	switch (ocf) {
   19aa2:	2a0a      	cmp	r2, #10
   19aa4:	f000 80eb 	beq.w	19c7e <hci_cmd_handle+0x4ba>
   19aa8:	d80b      	bhi.n	19ac2 <hci_cmd_handle+0x2fe>
   19aaa:	2a08      	cmp	r2, #8
   19aac:	f000 80e1 	beq.w	19c72 <hci_cmd_handle+0x4ae>
   19ab0:	2a09      	cmp	r2, #9
   19ab2:	f47f aec3 	bne.w	1983c <hci_cmd_handle+0x78>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   19ab6:	68a1      	ldr	r1, [r4, #8]
   19ab8:	f811 0b01 	ldrb.w	r0, [r1], #1
   19abc:	f00a ffc2 	bl	24a44 <ll_adv_scan_rsp_set>
   19ac0:	e08d      	b.n	19bde <hci_cmd_handle+0x41a>
	switch (ocf) {
   19ac2:	2a0b      	cmp	r2, #11
   19ac4:	f000 80e0 	beq.w	19c88 <hci_cmd_handle+0x4c4>
   19ac8:	2a0c      	cmp	r2, #12
   19aca:	f47f aeb7 	bne.w	1983c <hci_cmd_handle+0x78>
	status = ll_scan_enable(cmd->enable);
   19ace:	68a3      	ldr	r3, [r4, #8]
   19ad0:	7818      	ldrb	r0, [r3, #0]
   19ad2:	f002 ff7d 	bl	1c9d0 <ll_scan_enable>
   19ad6:	e082      	b.n	19bde <hci_cmd_handle+0x41a>
	switch (ocf) {
   19ad8:	2a16      	cmp	r2, #22
   19ada:	f000 80e1 	beq.w	19ca0 <hci_cmd_handle+0x4dc>
   19ade:	d82e      	bhi.n	19b3e <hci_cmd_handle+0x37a>
   19ae0:	2a12      	cmp	r2, #18
   19ae2:	f000 8096 	beq.w	19c12 <hci_cmd_handle+0x44e>
   19ae6:	d817      	bhi.n	19b18 <hci_cmd_handle+0x354>
   19ae8:	2a10      	cmp	r2, #16
   19aea:	f000 8089 	beq.w	19c00 <hci_cmd_handle+0x43c>
   19aee:	2a11      	cmp	r2, #17
   19af0:	f47f aea4 	bne.w	1983c <hci_cmd_handle+0x78>
	status = ll_wl_add(&cmd->addr);
   19af4:	68a0      	ldr	r0, [r4, #8]
   19af6:	f002 ffd3 	bl	1caa0 <ll_wl_add>
   19afa:	e070      	b.n	19bde <hci_cmd_handle+0x41a>
   19afc:	00025880 	.word	0x00025880
   19b00:	000258a0 	.word	0x000258a0
   19b04:	0002c0e7 	.word	0x0002c0e7
   19b08:	0002c0fd 	.word	0x0002c0fd
   19b0c:	20001e8a 	.word	0x20001e8a
   19b10:	20006cb0 	.word	0x20006cb0
   19b14:	20006cb8 	.word	0x20006cb8
	switch (ocf) {
   19b18:	2a13      	cmp	r2, #19
   19b1a:	f000 80c6 	beq.w	19caa <hci_cmd_handle+0x4e6>
   19b1e:	2a15      	cmp	r2, #21
   19b20:	f47f ae8c 	bne.w	1983c <hci_cmd_handle+0x78>
	handle = sys_le16_to_cpu(cmd->handle);
   19b24:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   19b26:	2108      	movs	r1, #8
   19b28:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   19b2a:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   19b2c:	f7ff fdfa 	bl	19724 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   19b30:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   19b32:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   19b34:	1cc1      	adds	r1, r0, #3
   19b36:	4630      	mov	r0, r6
   19b38:	f00a febd 	bl	248b6 <ll_chm_get>
   19b3c:	e6f0      	b.n	19920 <hci_cmd_handle+0x15c>
	switch (ocf) {
   19b3e:	2a1c      	cmp	r2, #28
   19b40:	d07e      	beq.n	19c40 <hci_cmd_handle+0x47c>
   19b42:	d80f      	bhi.n	19b64 <hci_cmd_handle+0x3a0>
   19b44:	2a17      	cmp	r2, #23
   19b46:	d068      	beq.n	19c1a <hci_cmd_handle+0x456>
   19b48:	2a18      	cmp	r2, #24
   19b4a:	f47f ae77 	bne.w	1983c <hci_cmd_handle+0x78>
	rp = cmd_complete(evt, sizeof(*rp));
   19b4e:	2109      	movs	r1, #9
   19b50:	a805      	add	r0, sp, #20
   19b52:	f7ff fde7 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19b56:	2300      	movs	r3, #0
   19b58:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
   19b5c:	2108      	movs	r1, #8
   19b5e:	f00a fd0a 	bl	24576 <bt_rand>
	if (err == -EINVAL) {
   19b62:	e6b3      	b.n	198cc <hci_cmd_handle+0x108>
	switch (ocf) {
   19b64:	2a21      	cmp	r2, #33	; 0x21
   19b66:	f000 80ae 	beq.w	19cc6 <hci_cmd_handle+0x502>
   19b6a:	2a4b      	cmp	r2, #75	; 0x4b
   19b6c:	f000 80b3 	beq.w	19cd6 <hci_cmd_handle+0x512>
   19b70:	2a20      	cmp	r2, #32
   19b72:	f47f ae63 	bne.w	1983c <hci_cmd_handle+0x78>
		le_conn_param_req_reply(cmd, evt);
   19b76:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   19b78:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   19b7a:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   19b7c:	8853      	ldrh	r3, [r2, #2]
   19b7e:	9102      	str	r1, [sp, #8]
   19b80:	88d1      	ldrh	r1, [r2, #6]
   19b82:	9101      	str	r1, [sp, #4]
   19b84:	8892      	ldrh	r2, [r2, #4]
   19b86:	9200      	str	r2, [sp, #0]
   19b88:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   19b8a:	2102      	movs	r1, #2
   19b8c:	4620      	mov	r0, r4
   19b8e:	f00a fe1b 	bl	247c8 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
   19b92:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   19b94:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   19b96:	a805      	add	r0, sp, #20
   19b98:	f7ff fdc4 	bl	19724 <cmd_complete>
	rp->status = status;
   19b9c:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   19b9e:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   19ba2:	e693      	b.n	198cc <hci_cmd_handle+0x108>
	le_event_mask = sys_get_le64(cmd->events);
   19ba4:	68a0      	ldr	r0, [r4, #8]
   19ba6:	f00a fcb1 	bl	2450c <sys_get_le64>
   19baa:	4bc9      	ldr	r3, [pc, #804]	; (19ed0 <hci_cmd_handle+0x70c>)
   19bac:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
   19bb0:	e692      	b.n	198d8 <hci_cmd_handle+0x114>
	rp = cmd_complete(evt, sizeof(*rp));
   19bb2:	2109      	movs	r1, #9
   19bb4:	a805      	add	r0, sp, #20
   19bb6:	f7ff fdb5 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19bba:	2500      	movs	r5, #0
	rp = cmd_complete(evt, sizeof(*rp));
   19bbc:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   19bbe:	2208      	movs	r2, #8
	rp->status = 0x00;
   19bc0:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   19bc4:	4629      	mov	r1, r5
   19bc6:	f008 f988 	bl	21eda <memset>
	rp->features[0] = LL_FEAT & 0xFF;
   19bca:	238e      	movs	r3, #142	; 0x8e
   19bcc:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (LL_FEAT >> 8)  & 0xFF;
   19bce:	2301      	movs	r3, #1
   19bd0:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (LL_FEAT >> 16)  & 0xFF;
   19bd2:	70e5      	strb	r5, [r4, #3]
	if (err == -EINVAL) {
   19bd4:	e67a      	b.n	198cc <hci_cmd_handle+0x108>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   19bd6:	68a1      	ldr	r1, [r4, #8]
   19bd8:	2001      	movs	r0, #1
   19bda:	f7ff fbcf 	bl	1937c <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
   19bde:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   19be0:	2101      	movs	r1, #1
   19be2:	a805      	add	r0, sp, #20
   19be4:	f7ff fd9e 	bl	19724 <cmd_complete>
	ccst->status = status;
   19be8:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   19bea:	e66f      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19bec:	2102      	movs	r1, #2
   19bee:	a805      	add	r0, sp, #20
   19bf0:	f7ff fd98 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19bf4:	7005      	strb	r5, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   19bf6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   19bf8:	f00a ff67 	bl	24aca <ll_wl_size_get>
   19bfc:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   19bfe:	e665      	b.n	198cc <hci_cmd_handle+0x108>
	ccst = cmd_complete(evt, sizeof(*ccst));
   19c00:	2101      	movs	r1, #1
   19c02:	a805      	add	r0, sp, #20
   19c04:	f7ff fd8e 	bl	19724 <cmd_complete>
   19c08:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   19c0a:	f002 ff33 	bl	1ca74 <ll_wl_clear>
   19c0e:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   19c10:	e65c      	b.n	198cc <hci_cmd_handle+0x108>
	status = ll_wl_remove(&cmd->addr);
   19c12:	68a0      	ldr	r0, [r4, #8]
   19c14:	f002 ff7c 	bl	1cb10 <ll_wl_remove>
   19c18:	e7e1      	b.n	19bde <hci_cmd_handle+0x41a>
		le_encrypt(cmd, evt);
   19c1a:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   19c1c:	2300      	movs	r3, #0
   19c1e:	aa06      	add	r2, sp, #24
   19c20:	f100 0110 	add.w	r1, r0, #16
   19c24:	f00a ff6c 	bl	24b00 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
   19c28:	2111      	movs	r1, #17
   19c2a:	a805      	add	r0, sp, #20
   19c2c:	f7ff fd7a 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19c30:	2300      	movs	r3, #0
   19c32:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   19c36:	2210      	movs	r2, #16
   19c38:	a906      	add	r1, sp, #24
	memcpy(rp->info, build_info, sizeof(build_info));
   19c3a:	f008 f924 	bl	21e86 <memcpy>
	if (err == -EINVAL) {
   19c3e:	e645      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19c40:	2109      	movs	r1, #9
   19c42:	a805      	add	r0, sp, #20
   19c44:	f7ff fd6e 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19c48:	4601      	mov	r1, r0
   19c4a:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
   19c4c:	4602      	mov	r2, r0
	rp->status = 0x00;
   19c4e:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
   19c52:	48a0      	ldr	r0, [pc, #640]	; (19ed4 <hci_cmd_handle+0x710>)
   19c54:	f00a fc32 	bl	244bc <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
   19c58:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
   19c5c:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   19c5e:	f00a fc2d 	bl	244bc <sys_put_le32>
	if (err == -EINVAL) {
   19c62:	e633      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19c64:	2102      	movs	r1, #2
   19c66:	a805      	add	r0, sp, #20
   19c68:	f7ff fd5c 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19c6c:	7005      	strb	r5, [r0, #0]
	rp->tx_power_level = 0;
   19c6e:	7045      	strb	r5, [r0, #1]
	if (err == -EINVAL) {
   19c70:	e62c      	b.n	198cc <hci_cmd_handle+0x108>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   19c72:	68a1      	ldr	r1, [r4, #8]
   19c74:	f811 0b01 	ldrb.w	r0, [r1], #1
   19c78:	f00a fe99 	bl	249ae <ll_adv_data_set>
   19c7c:	e7af      	b.n	19bde <hci_cmd_handle+0x41a>
	status = ll_adv_enable(cmd->enable);
   19c7e:	68a3      	ldr	r3, [r4, #8]
   19c80:	7818      	ldrb	r0, [r3, #0]
   19c82:	f002 fe3f 	bl	1c904 <ll_adv_enable>
   19c86:	e7aa      	b.n	19bde <hci_cmd_handle+0x41a>
		le_set_scan_param(cmd, evt);
   19c88:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   19c8a:	7963      	ldrb	r3, [r4, #5]
   19c8c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   19c90:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   19c94:	7820      	ldrb	r0, [r4, #0]
   19c96:	79a4      	ldrb	r4, [r4, #6]
   19c98:	9400      	str	r4, [sp, #0]
   19c9a:	f002 fe7b 	bl	1c994 <ll_scan_params_set>
   19c9e:	e79e      	b.n	19bde <hci_cmd_handle+0x41a>
	handle = sys_le16_to_cpu(cmd->handle);
   19ca0:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   19ca2:	8818      	ldrh	r0, [r3, #0]
   19ca4:	f00a fe1c 	bl	248e0 <ll_feature_req_send>
   19ca8:	e5fc      	b.n	198a4 <hci_cmd_handle+0xe0>
		le_conn_update(cmd, evt);
   19caa:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   19cac:	8911      	ldrh	r1, [r2, #8]
   19cae:	8853      	ldrh	r3, [r2, #2]
   19cb0:	8810      	ldrh	r0, [r2, #0]
   19cb2:	9102      	str	r1, [sp, #8]
   19cb4:	88d1      	ldrh	r1, [r2, #6]
   19cb6:	9101      	str	r1, [sp, #4]
   19cb8:	8892      	ldrh	r2, [r2, #4]
   19cba:	9200      	str	r2, [sp, #0]
   19cbc:	2200      	movs	r2, #0
   19cbe:	4611      	mov	r1, r2
   19cc0:	f00a fd82 	bl	247c8 <ll_conn_update>
	*evt = cmd_status(status);
   19cc4:	e5ee      	b.n	198a4 <hci_cmd_handle+0xe0>
		le_conn_param_req_neg_reply(cmd, evt);
   19cc6:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   19cc8:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   19cca:	789a      	ldrb	r2, [r3, #2]
   19ccc:	2300      	movs	r3, #0
   19cce:	e9cd 3301 	strd	r3, r3, [sp, #4]
   19cd2:	9300      	str	r3, [sp, #0]
   19cd4:	e759      	b.n	19b8a <hci_cmd_handle+0x3c6>
	rp = cmd_complete(evt, sizeof(*rp));
   19cd6:	2103      	movs	r1, #3
   19cd8:	a805      	add	r0, sp, #20
   19cda:	f7ff fd23 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19cde:	4601      	mov	r1, r0
   19ce0:	2300      	movs	r3, #0
   19ce2:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   19ce6:	3001      	adds	r0, #1
   19ce8:	f00a fbe4 	bl	244b4 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   19cec:	e5ee      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19cee:	210d      	movs	r1, #13
   19cf0:	a805      	add	r0, sp, #20
   19cf2:	f7ff fd17 	bl	19724 <cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   19cf6:	2202      	movs	r2, #2
   19cf8:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   19cfa:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   19cfc:	2201      	movs	r2, #1
	rp->status = 0x00;
   19cfe:	2300      	movs	r3, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   19d00:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19d02:	220e      	movs	r2, #14
	rp->status = 0x00;
   19d04:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   19d06:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   19d08:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
   19d0a:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19d0c:	71c2      	strb	r2, [r0, #7]
   19d0e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   19d10:	7243      	strb	r3, [r0, #9]
   19d12:	7283      	strb	r3, [r0, #10]
   19d14:	72c3      	strb	r3, [r0, #11]
   19d16:	7303      	strb	r3, [r0, #12]
	if (err == -EINVAL) {
   19d18:	e5d8      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19d1a:	2141      	movs	r1, #65	; 0x41
   19d1c:	a805      	add	r0, sp, #20
   19d1e:	f7ff fd01 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19d22:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   19d24:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   19d26:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   19d28:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   19d2c:	f008 f8d5 	bl	21eda <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   19d30:	7863      	ldrb	r3, [r4, #1]
   19d32:	f063 0358 	orn	r3, r3, #88	; 0x58
   19d36:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   19d38:	78a3      	ldrb	r3, [r4, #2]
   19d3a:	f043 0303 	orr.w	r3, r3, #3
   19d3e:	70a3      	strb	r3, [r4, #2]
	if (err == -EINVAL) {
   19d40:	e5c4      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19d42:	2109      	movs	r1, #9
   19d44:	a805      	add	r0, sp, #20
   19d46:	f7ff fced 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19d4a:	2100      	movs	r1, #0
   19d4c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   19d50:	2208      	movs	r2, #8
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   19d52:	f008 f8c2 	bl	21eda <memset>
	if (err == -EINVAL) {
   19d56:	e5b9      	b.n	198cc <hci_cmd_handle+0x108>
	const char build_info[] = HCI_VS_BUILD_INFO;
   19d58:	4b5f      	ldr	r3, [pc, #380]	; (19ed8 <hci_cmd_handle+0x714>)
   19d5a:	aa06      	add	r2, sp, #24
   19d5c:	f103 0610 	add.w	r6, r3, #16
   19d60:	4615      	mov	r5, r2
   19d62:	6818      	ldr	r0, [r3, #0]
   19d64:	6859      	ldr	r1, [r3, #4]
   19d66:	4614      	mov	r4, r2
   19d68:	c403      	stmia	r4!, {r0, r1}
   19d6a:	3308      	adds	r3, #8
   19d6c:	42b3      	cmp	r3, r6
   19d6e:	4622      	mov	r2, r4
   19d70:	d1f7      	bne.n	19d62 <hci_cmd_handle+0x59e>
   19d72:	6818      	ldr	r0, [r3, #0]
   19d74:	889b      	ldrh	r3, [r3, #4]
   19d76:	6020      	str	r0, [r4, #0]
   19d78:	80a3      	strh	r3, [r4, #4]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   19d7a:	2117      	movs	r1, #23
   19d7c:	a805      	add	r0, sp, #20
   19d7e:	f7ff fcd1 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19d82:	2300      	movs	r3, #0
   19d84:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   19d88:	2216      	movs	r2, #22
   19d8a:	4629      	mov	r1, r5
   19d8c:	e755      	b.n	19c3a <hci_cmd_handle+0x476>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   19d8e:	68a1      	ldr	r1, [r4, #8]
   19d90:	2000      	movs	r0, #0
   19d92:	f7ff faf3 	bl	1937c <ll_addr_set>
   19d96:	e59f      	b.n	198d8 <hci_cmd_handle+0x114>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19d9c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   19da0:	3201      	adds	r2, #1
   19da2:	d106      	bne.n	19db2 <hci_cmd_handle+0x5ee>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19da4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19dac:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19dae:	4293      	cmp	r3, r2
   19db0:	d020      	beq.n	19df4 <hci_cmd_handle+0x630>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   19db2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   19db6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19dba:	07db      	lsls	r3, r3, #31
   19dbc:	d51a      	bpl.n	19df4 <hci_cmd_handle+0x630>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   19dbe:	2118      	movs	r1, #24
   19dc0:	a805      	add	r0, sp, #20
   19dc2:	f7ff fcaf 	bl	19724 <cmd_complete>
		rp->status = 0x00;
   19dc6:	2600      	movs	r6, #0
		rp->num_addrs = 1;
   19dc8:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   19dca:	4604      	mov	r4, r0
		rp->num_addrs = 1;
   19dcc:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
   19dce:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
   19dd0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   19dd4:	1ca1      	adds	r1, r4, #2
   19dd6:	f00a fb71 	bl	244bc <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
   19dda:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
   19dde:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
   19de0:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
   19de4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19de8:	71e3      	strb	r3, [r4, #7]
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
   19dea:	2210      	movs	r2, #16
   19dec:	4631      	mov	r1, r6
   19dee:	f104 0008 	add.w	r0, r4, #8
   19df2:	e7ae      	b.n	19d52 <hci_cmd_handle+0x58e>
	rp = cmd_complete(evt, sizeof(*rp));
   19df4:	2102      	movs	r1, #2
   19df6:	a805      	add	r0, sp, #20
   19df8:	f7ff fc94 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19dfc:	2300      	movs	r3, #0
   19dfe:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
   19e00:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   19e02:	e563      	b.n	198cc <hci_cmd_handle+0x108>
	rp = cmd_complete(evt, sizeof(*rp));
   19e04:	2121      	movs	r1, #33	; 0x21
   19e06:	a805      	add	r0, sp, #20
   19e08:	f7ff fc8c 	bl	19724 <cmd_complete>
	rp->status = 0x00;
   19e0c:	4603      	mov	r3, r0
   19e0e:	2200      	movs	r2, #0
   19e10:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
   19e18:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19e1a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   19e1e:	3101      	adds	r1, #1
   19e20:	d04b      	beq.n	19eba <hci_cmd_handle+0x6f6>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19e22:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19e26:	3101      	adds	r1, #1
   19e28:	d047      	beq.n	19eba <hci_cmd_handle+0x6f6>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19e2a:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19e2e:	3101      	adds	r1, #1
   19e30:	d043      	beq.n	19eba <hci_cmd_handle+0x6f6>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
   19e32:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19e36:	3101      	adds	r1, #1
   19e38:	d03f      	beq.n	19eba <hci_cmd_handle+0x6f6>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
   19e3a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   19e3e:	4619      	mov	r1, r3
   19e40:	f00a fb3c 	bl	244bc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
   19e44:	1d61      	adds	r1, r4, #5
   19e46:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   19e4a:	f00a fb37 	bl	244bc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
   19e4e:	f104 0109 	add.w	r1, r4, #9
   19e52:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   19e56:	f00a fb31 	bl	244bc <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
   19e5a:	f104 010d 	add.w	r1, r4, #13
   19e5e:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   19e62:	f00a fb2b 	bl	244bc <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19e6a:	f104 0311 	add.w	r3, r4, #17
   19e6e:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
   19e72:	3101      	adds	r1, #1
   19e74:	d027      	beq.n	19ec6 <hci_cmd_handle+0x702>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19e76:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19e7a:	3101      	adds	r1, #1
   19e7c:	d023      	beq.n	19ec6 <hci_cmd_handle+0x702>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19e7e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19e82:	3101      	adds	r1, #1
   19e84:	d01f      	beq.n	19ec6 <hci_cmd_handle+0x702>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   19e86:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19e8a:	3101      	adds	r1, #1
   19e8c:	d01b      	beq.n	19ec6 <hci_cmd_handle+0x702>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
   19e8e:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   19e92:	4619      	mov	r1, r3
   19e94:	f00a fb12 	bl	244bc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
   19e98:	f104 0115 	add.w	r1, r4, #21
   19e9c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   19ea0:	f00a fb0c 	bl	244bc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
   19ea4:	f104 0119 	add.w	r1, r4, #25
   19ea8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   19eac:	f00a fb06 	bl	244bc <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   19eb0:	f104 011d 	add.w	r1, r4, #29
   19eb4:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
   19eb8:	e6d1      	b.n	19c5e <hci_cmd_handle+0x49a>
		(void)memset(rp->ir, 0x00, sizeof(rp->ir));
   19eba:	2210      	movs	r2, #16
   19ebc:	2100      	movs	r1, #0
   19ebe:	4618      	mov	r0, r3
   19ec0:	f008 f80b 	bl	21eda <memset>
   19ec4:	e7cf      	b.n	19e66 <hci_cmd_handle+0x6a2>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   19ec6:	2210      	movs	r2, #16
   19ec8:	2100      	movs	r1, #0
   19eca:	4618      	mov	r0, r3
   19ecc:	e741      	b.n	19d52 <hci_cmd_handle+0x58e>
   19ece:	bf00      	nop
   19ed0:	20006cb8 	.word	0x20006cb8
   19ed4:	ec30ffbf 	.word	0xec30ffbf
   19ed8:	0002c11b 	.word	0x0002c11b

00019edc <hci_acl_handle>:
{
   19edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   19ee0:	2300      	movs	r3, #0
   19ee2:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   19ee4:	8983      	ldrh	r3, [r0, #12]
   19ee6:	2b03      	cmp	r3, #3
{
   19ee8:	4606      	mov	r6, r0
   19eea:	460f      	mov	r7, r1
	if (buf->len < sizeof(*acl)) {
   19eec:	d811      	bhi.n	19f12 <hci_acl_handle+0x36>
		BT_ERR("No HCI ACL header");
   19eee:	2301      	movs	r3, #1
   19ef0:	f04f 0100 	mov.w	r1, #0
   19ef4:	f363 0107 	bfi	r1, r3, #0, #8
   19ef8:	4a40      	ldr	r2, [pc, #256]	; (19ffc <hci_acl_handle+0x120>)
   19efa:	4b41      	ldr	r3, [pc, #260]	; (1a000 <hci_acl_handle+0x124>)
   19efc:	4841      	ldr	r0, [pc, #260]	; (1a004 <hci_acl_handle+0x128>)
   19efe:	1a9b      	subs	r3, r3, r2
   19f00:	08db      	lsrs	r3, r3, #3
   19f02:	f363 118f 	bfi	r1, r3, #6, #10
		BT_ERR("Invalid HCI ACL packet length");
   19f06:	f006 fe7d 	bl	20c04 <log_0>
		return -EINVAL;
   19f0a:	f06f 0015 	mvn.w	r0, #21
}
   19f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   19f12:	2104      	movs	r1, #4
   19f14:	3008      	adds	r0, #8
   19f16:	f00a ff4e 	bl	24db6 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   19f1a:	89b3      	ldrh	r3, [r6, #12]
	len = sys_le16_to_cpu(acl->len);
   19f1c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   19f20:	8800      	ldrh	r0, [r0, #0]
	if (buf->len < len) {
   19f22:	4543      	cmp	r3, r8
   19f24:	d20c      	bcs.n	19f40 <hci_acl_handle+0x64>
		BT_ERR("Invalid HCI ACL packet length");
   19f26:	2301      	movs	r3, #1
   19f28:	f04f 0100 	mov.w	r1, #0
   19f2c:	f363 0107 	bfi	r1, r3, #0, #8
   19f30:	4a32      	ldr	r2, [pc, #200]	; (19ffc <hci_acl_handle+0x120>)
   19f32:	4b33      	ldr	r3, [pc, #204]	; (1a000 <hci_acl_handle+0x124>)
   19f34:	4834      	ldr	r0, [pc, #208]	; (1a008 <hci_acl_handle+0x12c>)
   19f36:	1a9b      	subs	r3, r3, r2
   19f38:	08db      	lsrs	r3, r3, #3
   19f3a:	f363 118f 	bfi	r1, r3, #6, #10
   19f3e:	e7e2      	b.n	19f06 <hci_acl_handle+0x2a>
	flags = bt_acl_flags(handle);
   19f40:	ea4f 3910 	mov.w	r9, r0, lsr #12
	handle = bt_acl_handle(handle);
   19f44:	f3c0 050b 	ubfx	r5, r0, #0, #12
	node_tx = ll_tx_mem_acquire();
   19f48:	f002 fa10 	bl	1c36c <ll_tx_mem_acquire>
	if (!node_tx) {
   19f4c:	4604      	mov	r4, r0
   19f4e:	bb40      	cbnz	r0, 19fa2 <hci_acl_handle+0xc6>
		BT_ERR("Tx Buffer Overflow");
   19f50:	2301      	movs	r3, #1
   19f52:	f04f 0100 	mov.w	r1, #0
   19f56:	4a29      	ldr	r2, [pc, #164]	; (19ffc <hci_acl_handle+0x120>)
   19f58:	482c      	ldr	r0, [pc, #176]	; (1a00c <hci_acl_handle+0x130>)
   19f5a:	f363 0107 	bfi	r1, r3, #0, #8
   19f5e:	4b28      	ldr	r3, [pc, #160]	; (1a000 <hci_acl_handle+0x124>)
   19f60:	1a9b      	subs	r3, r3, r2
   19f62:	08db      	lsrs	r3, r3, #3
   19f64:	f363 118f 	bfi	r1, r3, #6, #10
   19f68:	f006 fe4c 	bl	20c04 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   19f6c:	4b28      	ldr	r3, [pc, #160]	; (1a010 <hci_acl_handle+0x134>)
   19f6e:	6819      	ldr	r1, [r3, #0]
   19f70:	4623      	mov	r3, r4
   19f72:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   19f76:	4313      	orrs	r3, r2
   19f78:	d010      	beq.n	19f9c <hci_acl_handle+0xc0>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19f7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19f7e:	2001      	movs	r0, #1
   19f80:	f7ee fa10 	bl	83a4 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   19f84:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19f86:	6038      	str	r0, [r7, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   19f88:	211a      	movs	r1, #26
   19f8a:	f00a faa0 	bl	244ce <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
   19f8e:	6838      	ldr	r0, [r7, #0]
   19f90:	2101      	movs	r1, #1
   19f92:	3008      	adds	r0, #8
   19f94:	f00a fe9a 	bl	24ccc <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   19f98:	2301      	movs	r3, #1
   19f9a:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   19f9c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   19fa0:	e7b5      	b.n	19f0e <hci_acl_handle+0x32>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
   19fa2:	f1b9 0f00 	cmp.w	r9, #0
   19fa6:	d027      	beq.n	19ff8 <hci_acl_handle+0x11c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   19fa8:	f1b9 0f02 	cmp.w	r9, #2
   19fac:	bf0c      	ite	eq
   19fae:	2202      	moveq	r2, #2
   19fb0:	2201      	movne	r2, #1
   19fb2:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   19fb4:	f884 8005 	strb.w	r8, [r4, #5]
   19fb8:	f362 0301 	bfi	r3, r2, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   19fbc:	68b1      	ldr	r1, [r6, #8]
   19fbe:	7123      	strb	r3, [r4, #4]
   19fc0:	4642      	mov	r2, r8
   19fc2:	1de0      	adds	r0, r4, #7
   19fc4:	f007 ff5f 	bl	21e86 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   19fc8:	4621      	mov	r1, r4
   19fca:	4628      	mov	r0, r5
   19fcc:	f002 f9da 	bl	1c384 <ll_tx_mem_enqueue>
   19fd0:	2800      	cmp	r0, #0
   19fd2:	d09c      	beq.n	19f0e <hci_acl_handle+0x32>
		BT_ERR("Invalid Tx Enqueue");
   19fd4:	2301      	movs	r3, #1
   19fd6:	f04f 0100 	mov.w	r1, #0
   19fda:	4a08      	ldr	r2, [pc, #32]	; (19ffc <hci_acl_handle+0x120>)
   19fdc:	480d      	ldr	r0, [pc, #52]	; (1a014 <hci_acl_handle+0x138>)
   19fde:	f363 0107 	bfi	r1, r3, #0, #8
   19fe2:	4b07      	ldr	r3, [pc, #28]	; (1a000 <hci_acl_handle+0x124>)
   19fe4:	1a9b      	subs	r3, r3, r2
   19fe6:	08db      	lsrs	r3, r3, #3
   19fe8:	f363 118f 	bfi	r1, r3, #6, #10
   19fec:	f006 fe0a 	bl	20c04 <log_0>
		ll_tx_mem_release(node_tx);
   19ff0:	4620      	mov	r0, r4
   19ff2:	f002 f9c1 	bl	1c378 <ll_tx_mem_release>
   19ff6:	e788      	b.n	19f0a <hci_acl_handle+0x2e>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   19ff8:	2202      	movs	r2, #2
   19ffa:	e7da      	b.n	19fb2 <hci_acl_handle+0xd6>
   19ffc:	00025880 	.word	0x00025880
   1a000:	000258a0 	.word	0x000258a0
   1a004:	0002c091 	.word	0x0002c091
   1a008:	0002c0a3 	.word	0x0002c0a3
   1a00c:	0002c0c1 	.word	0x0002c0c1
   1a010:	20006cb0 	.word	0x20006cb0
   1a014:	0002c0d4 	.word	0x0002c0d4

0001a018 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   1a018:	7a03      	ldrb	r3, [r0, #8]
   1a01a:	f003 0303 	and.w	r3, r3, #3
   1a01e:	3b01      	subs	r3, #1
   1a020:	2b01      	cmp	r3, #1
{
   1a022:	b570      	push	{r4, r5, r6, lr}
   1a024:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
   1a026:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
   1a028:	d81b      	bhi.n	1a062 <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   1a02a:	f101 0608 	add.w	r6, r1, #8
   1a02e:	4630      	mov	r0, r6
   1a030:	2104      	movs	r1, #4
   1a032:	f00a fe4b 	bl	24ccc <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1a036:	7a23      	ldrb	r3, [r4, #8]
   1a038:	f003 0303 	and.w	r3, r3, #3
   1a03c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1a03e:	bf0c      	ite	eq
   1a040:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1a044:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   1a048:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   1a04a:	7a61      	ldrb	r1, [r4, #9]
   1a04c:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   1a04e:	4630      	mov	r0, r6
   1a050:	f00a fe3c 	bl	24ccc <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1a054:	7a62      	ldrb	r2, [r4, #9]
   1a056:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
   1a05a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1a05e:	f007 bf12 	b.w	21e86 <memcpy>
		LL_ASSERT(0);
   1a062:	2301      	movs	r3, #1
   1a064:	f04f 0100 	mov.w	r1, #0
   1a068:	4a08      	ldr	r2, [pc, #32]	; (1a08c <hci_acl_encode+0x74>)
   1a06a:	4809      	ldr	r0, [pc, #36]	; (1a090 <hci_acl_encode+0x78>)
   1a06c:	f363 0107 	bfi	r1, r3, #0, #8
   1a070:	4b08      	ldr	r3, [pc, #32]	; (1a094 <hci_acl_encode+0x7c>)
   1a072:	1a9b      	subs	r3, r3, r2
   1a074:	08db      	lsrs	r3, r3, #3
   1a076:	f363 118f 	bfi	r1, r3, #6, #10
   1a07a:	f006 fdc3 	bl	20c04 <log_0>
   1a07e:	4040      	eors	r0, r0
   1a080:	f380 8811 	msr	BASEPRI, r0
   1a084:	f04f 0004 	mov.w	r0, #4
   1a088:	df02      	svc	2
   1a08a:	bf00      	nop
   1a08c:	00025880 	.word	0x00025880
   1a090:	0002c060 	.word	0x0002c060
   1a094:	000258a0 	.word	0x000258a0

0001a098 <hci_evt_encode>:
#endif

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   1a098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1a09c:	7903      	ldrb	r3, [r0, #4]
   1a09e:	88c6      	ldrh	r6, [r0, #6]
   1a0a0:	2b02      	cmp	r3, #2
{
   1a0a2:	b086      	sub	sp, #24
   1a0a4:	4604      	mov	r4, r0
   1a0a6:	460d      	mov	r5, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1a0a8:	f000 811b 	beq.w	1a2e2 <hci_evt_encode+0x24a>
	switch (node_rx->hdr.type) {
   1a0ac:	3b04      	subs	r3, #4
   1a0ae:	4aba      	ldr	r2, [pc, #744]	; (1a398 <hci_evt_encode+0x300>)
   1a0b0:	2700      	movs	r7, #0
   1a0b2:	2b06      	cmp	r3, #6
   1a0b4:	f200 8197 	bhi.w	1a3e6 <hci_evt_encode+0x34e>
   1a0b8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a0bc:	01950007 	.word	0x01950007
   1a0c0:	01950195 	.word	0x01950195
   1a0c4:	00d7009e 	.word	0x00d7009e
   1a0c8:	00f1      	.short	0x00f1
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   1a0ca:	4bb4      	ldr	r3, [pc, #720]	; (1a39c <hci_evt_encode+0x304>)
   1a0cc:	9304      	str	r3, [sp, #16]
   1a0ce:	f64f 7304 	movw	r3, #65284	; 0xff04
   1a0d2:	f8ad 3014 	strh.w	r3, [sp, #20]
   1a0d6:	2302      	movs	r3, #2
   1a0d8:	f88d 3016 	strb.w	r3, [sp, #22]
		   offsetof(struct pdu_adv, payload) + adv->len];
   1a0dc:	7a43      	ldrb	r3, [r0, #9]
   1a0de:	6852      	ldr	r2, [r2, #4]
   1a0e0:	f103 010a 	add.w	r1, r3, #10
	extra = &b[offsetof(struct node_rx_pdu, pdu) +
   1a0e4:	4408      	add	r0, r1
	rssi = -(*extra);
   1a0e6:	5c67      	ldrb	r7, [r4, r1]
	direct = *extra;
   1a0e8:	7846      	ldrb	r6, [r0, #1]
	rssi = -(*extra);
   1a0ea:	427f      	negs	r7, r7
   1a0ec:	f04f 0c00 	mov.w	ip, #0
   1a0f0:	b27f      	sxtb	r7, r7
	if (direct) {
   1a0f2:	4660      	mov	r0, ip
   1a0f4:	f002 5100 	and.w	r1, r2, #536870912	; 0x20000000
   1a0f8:	2e00      	cmp	r6, #0
   1a0fa:	d042      	beq.n	1a182 <hci_evt_encode+0xea>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a0fc:	ea50 0301 	orrs.w	r3, r0, r1
   1a100:	d03c      	beq.n	1a17c <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   1a102:	4ba7      	ldr	r3, [pc, #668]	; (1a3a0 <hci_evt_encode+0x308>)
   1a104:	6819      	ldr	r1, [r3, #0]
   1a106:	4663      	mov	r3, ip
   1a108:	f401 6280 	and.w	r2, r1, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a10c:	4313      	orrs	r3, r2
   1a10e:	d035      	beq.n	1a17c <hci_evt_encode+0xe4>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   1a110:	7a26      	ldrb	r6, [r4, #8]
   1a112:	f006 060f 	and.w	r6, r6, #15
   1a116:	2e01      	cmp	r6, #1
   1a118:	d013      	beq.n	1a142 <hci_evt_encode+0xaa>
   1a11a:	2301      	movs	r3, #1
   1a11c:	f04f 0100 	mov.w	r1, #0
   1a120:	f363 0107 	bfi	r1, r3, #0, #8
   1a124:	4a9f      	ldr	r2, [pc, #636]	; (1a3a4 <hci_evt_encode+0x30c>)
   1a126:	4ba0      	ldr	r3, [pc, #640]	; (1a3a8 <hci_evt_encode+0x310>)
   1a128:	48a0      	ldr	r0, [pc, #640]	; (1a3ac <hci_evt_encode+0x314>)
   1a12a:	1a9b      	subs	r3, r3, r2
   1a12c:	08db      	lsrs	r3, r3, #3
   1a12e:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(0);
   1a132:	f006 fd67 	bl	20c04 <log_0>
   1a136:	4040      	eors	r0, r0
   1a138:	f380 8811 	msr	BASEPRI, r0
   1a13c:	f04f 0004 	mov.w	r0, #4
   1a140:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1a142:	2211      	movs	r2, #17
   1a144:	210b      	movs	r1, #11
   1a146:	4628      	mov	r0, r5
   1a148:	f00a f9cb 	bl	244e2 <meta_evt>
		dir_info->addr.type = adv->tx_addr;
   1a14c:	46a0      	mov	r8, r4
	drp->num_reports = 1;
   1a14e:	7006      	strb	r6, [r0, #0]
	dir_info->evt_type = BT_LE_ADV_DIRECT_IND;
   1a150:	7046      	strb	r6, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
   1a152:	f818 3f08 	ldrb.w	r3, [r8, #8]!
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   1a156:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
   1a158:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a15c:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   1a15e:	2206      	movs	r2, #6
   1a160:	f104 010a 	add.w	r1, r4, #10
   1a164:	3003      	adds	r0, #3
   1a166:	f007 fe8e 	bl	21e86 <memcpy>
	dir_info->dir_addr.type = 0x1;
   1a16a:	726e      	strb	r6, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   1a16c:	2206      	movs	r2, #6
   1a16e:	f108 0108 	add.w	r1, r8, #8
   1a172:	f105 000a 	add.w	r0, r5, #10
   1a176:	f007 fe86 	bl	21e86 <memcpy>
	dir_info->rssi = rssi;
   1a17a:	742f      	strb	r7, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   1a17c:	b006      	add	sp, #24
   1a17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a182:	ea50 0201 	orrs.w	r2, r0, r1
   1a186:	d0f9      	beq.n	1a17c <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   1a188:	4a85      	ldr	r2, [pc, #532]	; (1a3a0 <hci_evt_encode+0x308>)
   1a18a:	6812      	ldr	r2, [r2, #0]
   1a18c:	4631      	mov	r1, r6
   1a18e:	f002 0002 	and.w	r0, r2, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a192:	ea50 0201 	orrs.w	r2, r0, r1
   1a196:	d0f1      	beq.n	1a17c <hci_evt_encode+0xe4>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   1a198:	7a22      	ldrb	r2, [r4, #8]
   1a19a:	f002 020f 	and.w	r2, r2, #15
   1a19e:	2a01      	cmp	r2, #1
		data_len = (adv->len - BDADDR_SIZE);
   1a1a0:	bf1c      	itt	ne
   1a1a2:	1f9e      	subne	r6, r3, #6
   1a1a4:	b2f6      	uxtbne	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1a1a6:	f106 020b 	add.w	r2, r6, #11
   1a1aa:	b2d2      	uxtb	r2, r2
   1a1ac:	2102      	movs	r1, #2
   1a1ae:	4628      	mov	r0, r5
   1a1b0:	f00a f997 	bl	244e2 <meta_evt>
	sep->num_reports = 1;
   1a1b4:	2301      	movs	r3, #1
   1a1b6:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   1a1b8:	7a23      	ldrb	r3, [r4, #8]
   1a1ba:	aa06      	add	r2, sp, #24
   1a1bc:	f003 030f 	and.w	r3, r3, #15
   1a1c0:	4413      	add	r3, r2
		adv_info->addr.type = adv->tx_addr;
   1a1c2:	46a0      	mov	r8, r4
	adv_info->evt_type = c_adv_type[adv->type];
   1a1c4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1a1c8:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   1a1ca:	f818 3f08 	ldrb.w	r3, [r8, #8]!
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1a1ce:	4605      	mov	r5, r0
		adv_info->addr.type = adv->tx_addr;
   1a1d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a1d4:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   1a1d6:	2206      	movs	r2, #6
   1a1d8:	f104 010a 	add.w	r1, r4, #10
   1a1dc:	3003      	adds	r0, #3
   1a1de:	f007 fe52 	bl	21e86 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1a1e2:	350a      	adds	r5, #10
	adv_info->length = data_len;
   1a1e4:	f805 6c01 	strb.w	r6, [r5, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1a1e8:	4632      	mov	r2, r6
   1a1ea:	f108 0108 	add.w	r1, r8, #8
   1a1ee:	4628      	mov	r0, r5
   1a1f0:	f007 fe49 	bl	21e86 <memcpy>
	*prssi = rssi;
   1a1f4:	55af      	strb	r7, [r5, r6]
   1a1f6:	e7c1      	b.n	1a17c <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a1f8:	6851      	ldr	r1, [r2, #4]
   1a1fa:	463a      	mov	r2, r7
   1a1fc:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   1a200:	4313      	orrs	r3, r2
   1a202:	d0bb      	beq.n	1a17c <hci_evt_encode+0xe4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1a204:	4b66      	ldr	r3, [pc, #408]	; (1a3a0 <hci_evt_encode+0x308>)
   1a206:	6819      	ldr	r1, [r3, #0]
   1a208:	463b      	mov	r3, r7
   1a20a:	f001 0201 	and.w	r2, r1, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a20e:	4313      	orrs	r3, r2
   1a210:	d0b4      	beq.n	1a17c <hci_evt_encode+0xe4>
	u8_t status = node_rx->status;
   1a212:	7a07      	ldrb	r7, [r0, #8]
	if (!status) {
   1a214:	b91f      	cbnz	r7, 1a21e <hci_evt_encode+0x186>
		conn_count++;
   1a216:	4a66      	ldr	r2, [pc, #408]	; (1a3b0 <hci_evt_encode+0x318>)
   1a218:	6813      	ldr	r3, [r2, #0]
   1a21a:	3301      	adds	r3, #1
   1a21c:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   1a21e:	4628      	mov	r0, r5
   1a220:	2212      	movs	r2, #18
   1a222:	2101      	movs	r1, #1
   1a224:	f00a f95d 	bl	244e2 <meta_evt>
   1a228:	4605      	mov	r5, r0
	if (status) {
   1a22a:	b12f      	cbz	r7, 1a238 <hci_evt_encode+0x1a0>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1a22c:	2212      	movs	r2, #18
   1a22e:	2100      	movs	r1, #0
   1a230:	f007 fe53 	bl	21eda <memset>
		lecc->status = status;
   1a234:	702f      	strb	r7, [r5, #0]
		return;
   1a236:	e7a1      	b.n	1a17c <hci_evt_encode+0xe4>
	lecc->status = 0x00;
   1a238:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   1a23a:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = node_rx->role;
   1a23e:	7a63      	ldrb	r3, [r4, #9]
   1a240:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type;
   1a242:	7aa3      	ldrb	r3, [r4, #10]
   1a244:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   1a246:	2206      	movs	r2, #6
   1a248:	f104 010b 	add.w	r1, r4, #11
   1a24c:	3005      	adds	r0, #5
   1a24e:	f007 fe1a 	bl	21e86 <memcpy>
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   1a252:	8a63      	ldrh	r3, [r4, #18]
   1a254:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   1a258:	8aa3      	ldrh	r3, [r4, #20]
   1a25a:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   1a25e:	8ae3      	ldrh	r3, [r4, #22]
   1a260:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = node_rx->sca;
   1a264:	7e23      	ldrb	r3, [r4, #24]
   1a266:	746b      	strb	r3, [r5, #17]
   1a268:	e788      	b.n	1a17c <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1a26a:	6811      	ldr	r1, [r2, #0]
   1a26c:	463b      	mov	r3, r7
   1a26e:	f001 0210 	and.w	r2, r1, #16
   1a272:	4313      	orrs	r3, r2
   1a274:	d082      	beq.n	1a17c <hci_evt_encode+0xe4>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
   1a276:	2204      	movs	r2, #4
   1a278:	2105      	movs	r1, #5
   1a27a:	4628      	mov	r0, r5
   1a27c:	f00a f927 	bl	244ce <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1a280:	2104      	movs	r1, #4
   1a282:	f105 0008 	add.w	r0, r5, #8
   1a286:	f00a fd21 	bl	24ccc <net_buf_simple_add>
	conn_count--;
   1a28a:	4a49      	ldr	r2, [pc, #292]	; (1a3b0 <hci_evt_encode+0x318>)
	ep->status = 0x00;
   1a28c:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1a28e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
   1a292:	7a23      	ldrb	r3, [r4, #8]
   1a294:	70c3      	strb	r3, [r0, #3]
	conn_count--;
   1a296:	6813      	ldr	r3, [r2, #0]
   1a298:	3b01      	subs	r3, #1
   1a29a:	6013      	str	r3, [r2, #0]
   1a29c:	e76e      	b.n	1a17c <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a29e:	6851      	ldr	r1, [r2, #4]
   1a2a0:	463a      	mov	r2, r7
   1a2a2:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   1a2a6:	4313      	orrs	r3, r2
   1a2a8:	f43f af68 	beq.w	1a17c <hci_evt_encode+0xe4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1a2ac:	4b3c      	ldr	r3, [pc, #240]	; (1a3a0 <hci_evt_encode+0x308>)
   1a2ae:	6819      	ldr	r1, [r3, #0]
   1a2b0:	463b      	mov	r3, r7
   1a2b2:	f001 0204 	and.w	r2, r1, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a2b6:	4313      	orrs	r3, r2
   1a2b8:	f43f af60 	beq.w	1a17c <hci_evt_encode+0xe4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   1a2bc:	2209      	movs	r2, #9
   1a2be:	2103      	movs	r1, #3
   1a2c0:	4628      	mov	r0, r5
   1a2c2:	f00a f90e 	bl	244e2 <meta_evt>
	sep->status = cu->status;
   1a2c6:	7a23      	ldrb	r3, [r4, #8]
   1a2c8:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1a2ca:	8963      	ldrh	r3, [r4, #10]
   1a2cc:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1a2d0:	89a3      	ldrh	r3, [r4, #12]
   1a2d2:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1a2d6:	89e3      	ldrh	r3, [r4, #14]
	sep->handle = sys_cpu_to_le16(handle);
   1a2d8:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1a2dc:	f8a0 3007 	strh.w	r3, [r0, #7]
   1a2e0:	e74c      	b.n	1a17c <hci_evt_encode+0xe4>
	switch (pdu_data->llctrl.opcode) {
   1a2e2:	7ac3      	ldrb	r3, [r0, #11]
   1a2e4:	3b07      	subs	r3, #7
   1a2e6:	2b08      	cmp	r3, #8
   1a2e8:	d87d      	bhi.n	1a3e6 <hci_evt_encode+0x34e>
   1a2ea:	e8df f003 	tbb	[pc, r3]
   1a2ee:	7c63      	.short	0x7c63
   1a2f0:	0f7c7c05 	.word	0x0f7c7c05
   1a2f4:	7c7c      	.short	0x7c7c
   1a2f6:	2d          	.byte	0x2d
   1a2f7:	00          	.byte	0x00
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1a2f8:	460b      	mov	r3, r1
   1a2fa:	4632      	mov	r2, r6
   1a2fc:	f100 0108 	add.w	r1, r0, #8
   1a300:	2000      	movs	r0, #0
}
   1a302:	b006      	add	sp, #24
   1a304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1a308:	f7ff ba2e 	b.w	19768 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
   1a30c:	4b22      	ldr	r3, [pc, #136]	; (1a398 <hci_evt_encode+0x300>)
   1a30e:	6819      	ldr	r1, [r3, #0]
   1a310:	2700      	movs	r7, #0
   1a312:	f401 6200 	and.w	r2, r1, #2048	; 0x800
   1a316:	463b      	mov	r3, r7
   1a318:	4313      	orrs	r3, r2
   1a31a:	f43f af2f 	beq.w	1a17c <hci_evt_encode+0xe4>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
   1a31e:	2208      	movs	r2, #8
   1a320:	210c      	movs	r1, #12
   1a322:	4628      	mov	r0, r5
   1a324:	f00a f8d3 	bl	244ce <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1a328:	2108      	movs	r1, #8
   1a32a:	1868      	adds	r0, r5, r1
   1a32c:	f00a fcce 	bl	24ccc <net_buf_simple_add>
	ep->status = 0x00;
   1a330:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1a332:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
   1a336:	7b23      	ldrb	r3, [r4, #12]
   1a338:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = ver_ind->company_id;
   1a33a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1a33e:	8083      	strh	r3, [r0, #4]
	ep->subversion = ver_ind->sub_version_number;
   1a340:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   1a344:	80c3      	strh	r3, [r0, #6]
   1a346:	e719      	b.n	1a17c <hci_evt_encode+0xe4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a348:	4b13      	ldr	r3, [pc, #76]	; (1a398 <hci_evt_encode+0x300>)
   1a34a:	6858      	ldr	r0, [r3, #4]
   1a34c:	2100      	movs	r1, #0
   1a34e:	460a      	mov	r2, r1
   1a350:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1a354:	4313      	orrs	r3, r2
   1a356:	d006      	beq.n	1a366 <hci_evt_encode+0x2ce>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1a358:	4b11      	ldr	r3, [pc, #68]	; (1a3a0 <hci_evt_encode+0x308>)
   1a35a:	6818      	ldr	r0, [r3, #0]
   1a35c:	460b      	mov	r3, r1
   1a35e:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1a362:	4313      	orrs	r3, r2
   1a364:	d109      	bne.n	1a37a <hci_evt_encode+0x2e2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1a366:	2300      	movs	r3, #0
   1a368:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1a36c:	9300      	str	r3, [sp, #0]
   1a36e:	221a      	movs	r2, #26
   1a370:	2102      	movs	r1, #2
   1a372:	4630      	mov	r0, r6
   1a374:	f00a fa28 	bl	247c8 <ll_conn_update>
		return;
   1a378:	e700      	b.n	1a17c <hci_evt_encode+0xe4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   1a37a:	220a      	movs	r2, #10
   1a37c:	2106      	movs	r1, #6
   1a37e:	4628      	mov	r0, r5
   1a380:	f00a f8af 	bl	244e2 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1a384:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1a386:	89a3      	ldrh	r3, [r4, #12]
   1a388:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1a38a:	89e3      	ldrh	r3, [r4, #14]
   1a38c:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1a38e:	8a23      	ldrh	r3, [r4, #16]
   1a390:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1a392:	8a63      	ldrh	r3, [r4, #18]
   1a394:	8103      	strh	r3, [r0, #8]
   1a396:	e6f1      	b.n	1a17c <hci_evt_encode+0xe4>
   1a398:	20006cb0 	.word	0x20006cb0
   1a39c:	ff030100 	.word	0xff030100
   1a3a0:	20006cb8 	.word	0x20006cb8
   1a3a4:	00025880 	.word	0x00025880
   1a3a8:	000258a0 	.word	0x000258a0
   1a3ac:	0002c131 	.word	0x0002c131
   1a3b0:	20000fb0 	.word	0x20000fb0
		le_unknown_rsp(pdu_data, handle, buf);
   1a3b4:	7b01      	ldrb	r1, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1a3b6:	290e      	cmp	r1, #14
   1a3b8:	d104      	bne.n	1a3c4 <hci_evt_encode+0x32c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1a3ba:	462b      	mov	r3, r5
   1a3bc:	4632      	mov	r2, r6
   1a3be:	2100      	movs	r1, #0
   1a3c0:	201a      	movs	r0, #26
   1a3c2:	e79e      	b.n	1a302 <hci_evt_encode+0x26a>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1a3c4:	2302      	movs	r3, #2
   1a3c6:	f04f 0200 	mov.w	r2, #0
   1a3ca:	f363 0207 	bfi	r2, r3, #0, #8
   1a3ce:	480c      	ldr	r0, [pc, #48]	; (1a400 <hci_evt_encode+0x368>)
   1a3d0:	4b0c      	ldr	r3, [pc, #48]	; (1a404 <hci_evt_encode+0x36c>)
   1a3d2:	1a1b      	subs	r3, r3, r0
   1a3d4:	08db      	lsrs	r3, r3, #3
   1a3d6:	480c      	ldr	r0, [pc, #48]	; (1a408 <hci_evt_encode+0x370>)
   1a3d8:	f363 128f 	bfi	r2, r3, #6, #10
}
   1a3dc:	b006      	add	sp, #24
   1a3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1a3e2:	f006 bc1c 	b.w	20c1e <log_1>
		LL_ASSERT(0);
   1a3e6:	2301      	movs	r3, #1
   1a3e8:	f04f 0100 	mov.w	r1, #0
   1a3ec:	f363 0107 	bfi	r1, r3, #0, #8
   1a3f0:	4a03      	ldr	r2, [pc, #12]	; (1a400 <hci_evt_encode+0x368>)
   1a3f2:	4b04      	ldr	r3, [pc, #16]	; (1a404 <hci_evt_encode+0x36c>)
   1a3f4:	4805      	ldr	r0, [pc, #20]	; (1a40c <hci_evt_encode+0x374>)
   1a3f6:	1a9b      	subs	r3, r3, r2
   1a3f8:	08db      	lsrs	r3, r3, #3
   1a3fa:	f363 118f 	bfi	r1, r3, #6, #10
   1a3fe:	e698      	b.n	1a132 <hci_evt_encode+0x9a>
   1a400:	00025880 	.word	0x00025880
   1a404:	000258a0 	.word	0x000258a0
   1a408:	0002c167 	.word	0x0002c167
   1a40c:	0002c060 	.word	0x0002c060

0001a410 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   1a410:	4b06      	ldr	r3, [pc, #24]	; (1a42c <hci_init+0x1c>)
   1a412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a416:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1a41a:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1a41e:	4b04      	ldr	r3, [pc, #16]	; (1a430 <hci_init+0x20>)
   1a420:	201f      	movs	r0, #31
   1a422:	2100      	movs	r1, #0
   1a424:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1a428:	4770      	bx	lr
   1a42a:	bf00      	nop
   1a42c:	20006cb0 	.word	0x20006cb0
   1a430:	20006cb8 	.word	0x20006cb8

0001a434 <pdu_len_cmp>:
{
   1a434:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
   1a436:	4b0d      	ldr	r3, [pc, #52]	; (1a46c <pdu_len_cmp+0x38>)
{
   1a438:	b089      	sub	sp, #36	; 0x24
   1a43a:	4605      	mov	r5, r0
   1a43c:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
   1a43e:	aa01      	add	r2, sp, #4
   1a440:	f103 0718 	add.w	r7, r3, #24
   1a444:	6818      	ldr	r0, [r3, #0]
   1a446:	6859      	ldr	r1, [r3, #4]
   1a448:	4614      	mov	r4, r2
   1a44a:	c403      	stmia	r4!, {r0, r1}
   1a44c:	3308      	adds	r3, #8
   1a44e:	42bb      	cmp	r3, r7
   1a450:	4622      	mov	r2, r4
   1a452:	d1f7      	bne.n	1a444 <pdu_len_cmp+0x10>
   1a454:	881b      	ldrh	r3, [r3, #0]
   1a456:	8023      	strh	r3, [r4, #0]
	return ctrl_len_lut[opcode] == len;
   1a458:	ab08      	add	r3, sp, #32
   1a45a:	441d      	add	r5, r3
   1a45c:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   1a460:	1b83      	subs	r3, r0, r6
   1a462:	4258      	negs	r0, r3
   1a464:	4158      	adcs	r0, r3
   1a466:	b009      	add	sp, #36	; 0x24
   1a468:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a46a:	bf00      	nop
   1a46c:	00025a5f 	.word	0x00025a5f

0001a470 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
   1a470:	4b02      	ldr	r3, [pc, #8]	; (1a47c <mayfly_xtal_start+0xc>)
   1a472:	6818      	ldr	r0, [r3, #0]
   1a474:	6843      	ldr	r3, [r0, #4]
   1a476:	2100      	movs	r1, #0
   1a478:	681b      	ldr	r3, [r3, #0]
   1a47a:	4718      	bx	r3
   1a47c:	20000fb4 	.word	0x20000fb4

0001a480 <packet_rx_reserve_get>:
{
   1a480:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   1a482:	4b0e      	ldr	r3, [pc, #56]	; (1a4bc <packet_rx_reserve_get+0x3c>)
	    _radio.packet_rx_last) {
   1a484:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
	if (_radio.packet_rx_acquire >=
   1a488:	f893 113a 	ldrb.w	r1, [r3, #314]	; 0x13a
   1a48c:	4291      	cmp	r1, r2
		return (_radio.packet_rx_count -
   1a48e:	bf3b      	ittet	cc
   1a490:	f893 2138 	ldrbcc.w	r2, [r3, #312]	; 0x138
			_radio.packet_rx_last +
   1a494:	f893 4139 	ldrbcc.w	r4, [r3, #313]	; 0x139
			_radio.packet_rx_last);
   1a498:	f893 2139 	ldrbcs.w	r2, [r3, #313]	; 0x139
		return (_radio.packet_rx_count -
   1a49c:	1b12      	subcc	r2, r2, r4
		return (_radio.packet_rx_acquire -
   1a49e:	bf2c      	ite	cs
   1a4a0:	1a8a      	subcs	r2, r1, r2
			_radio.packet_rx_last +
   1a4a2:	1852      	addcc	r2, r2, r1
   1a4a4:	b2d2      	uxtb	r2, r2
	if (count > packet_rx_acquired_count_get()) {
   1a4a6:	4290      	cmp	r0, r2
	return _radio.packet_rx[_radio.packet_rx_last];
   1a4a8:	bf9b      	ittet	ls
   1a4aa:	f893 2139 	ldrbls.w	r2, [r3, #313]	; 0x139
   1a4ae:	f8d3 3134 	ldrls.w	r3, [r3, #308]	; 0x134
		return 0;
   1a4b2:	2000      	movhi	r0, #0
	return _radio.packet_rx[_radio.packet_rx_last];
   1a4b4:	f853 0022 	ldrls.w	r0, [r3, r2, lsl #2]
}
   1a4b8:	bd10      	pop	{r4, pc}
   1a4ba:	bf00      	nop
   1a4bc:	20000fb4 	.word	0x20000fb4

0001a4c0 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_PHY */
#endif /* CONFIG_BT_CONN */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
   1a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
   1a4c4:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   1a4c6:	4294      	cmp	r4, r2
{
   1a4c8:	4681      	mov	r9, r0
   1a4ca:	460f      	mov	r7, r1
   1a4cc:	4690      	mov	r8, r2
	if (_first == last) {
   1a4ce:	d03a      	beq.n	1a546 <tx_cmplt_get+0x86>
		return 0;
	}

	cmplt = 0U;
	*handle = _radio.pkt_release[_first].handle;
   1a4d0:	4e1e      	ldr	r6, [pc, #120]	; (1a54c <tx_cmplt_get+0x8c>)
   1a4d2:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
   1a4d6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   1a4da:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   1a4dc:	2500      	movs	r5, #0
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   1a4de:	f506 7aae 	add.w	sl, r6, #348	; 0x15c
		if (*handle != _radio.pkt_release[_first].handle) {
   1a4e2:	b223      	sxth	r3, r4
   1a4e4:	f8d6 1168 	ldr.w	r1, [r6, #360]	; 0x168
   1a4e8:	f8b9 0000 	ldrh.w	r0, [r9]
   1a4ec:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   1a4f0:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   1a4f4:	4298      	cmp	r0, r3
   1a4f6:	d120      	bne.n	1a53a <tx_cmplt_get+0x7a>
		node_tx = _radio.pkt_release[_first].node_tx;
   1a4f8:	6850      	ldr	r0, [r2, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
   1a4fa:	2801      	cmp	r0, #1
   1a4fc:	f020 0103 	bic.w	r1, r0, #3
   1a500:	d90a      	bls.n	1a518 <tx_cmplt_get+0x58>
   1a502:	b1f1      	cbz	r1, 1a542 <tx_cmplt_get+0x82>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   1a504:	1d03      	adds	r3, r0, #4
   1a506:	d01c      	beq.n	1a542 <tx_cmplt_get+0x82>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   1a508:	7943      	ldrb	r3, [r0, #5]
   1a50a:	b1d3      	cbz	r3, 1a542 <tx_cmplt_get+0x82>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   1a50c:	7903      	ldrb	r3, [r0, #4]
   1a50e:	f003 0303 	and.w	r3, r3, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   1a512:	3b01      	subs	r3, #1
   1a514:	2b01      	cmp	r3, #1
   1a516:	d814      	bhi.n	1a542 <tx_cmplt_get+0x82>
			cmplt++;
   1a518:	3501      	adds	r5, #1
   1a51a:	b2ed      	uxtb	r5, r5
			_radio.pkt_release[_first].node_tx = (void *)1;
   1a51c:	2301      	movs	r3, #1
   1a51e:	6053      	str	r3, [r2, #4]
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   1a520:	b111      	cbz	r1, 1a528 <tx_cmplt_get+0x68>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   1a522:	4651      	mov	r1, sl
   1a524:	f009 feb9 	bl	2429a <mem_release>
		}

		_first = _first + 1;
   1a528:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
   1a52a:	f896 316c 	ldrb.w	r3, [r6, #364]	; 0x16c
		_first = _first + 1;
   1a52e:	b2e4      	uxtb	r4, r4
			_first = 0U;
   1a530:	42a3      	cmp	r3, r4
   1a532:	bf08      	it	eq
   1a534:	2400      	moveq	r4, #0
		}

	} while (_first != last);
   1a536:	4544      	cmp	r4, r8
   1a538:	d1d3      	bne.n	1a4e2 <tx_cmplt_get+0x22>

	*first = _first;
   1a53a:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
   1a53c:	4628      	mov	r0, r5
   1a53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
   1a542:	2302      	movs	r3, #2
   1a544:	e7eb      	b.n	1a51e <tx_cmplt_get+0x5e>
		return 0;
   1a546:	2500      	movs	r5, #0
   1a548:	e7f8      	b.n	1a53c <tx_cmplt_get+0x7c>
   1a54a:	bf00      	nop
   1a54c:	20000fb4 	.word	0x20000fb4

0001a550 <mayfly_xtal_retain>:
{
   1a550:	b538      	push	{r3, r4, r5, lr}
   1a552:	4b1c      	ldr	r3, [pc, #112]	; (1a5c4 <mayfly_xtal_retain+0x74>)
   1a554:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
   1a556:	b351      	cbz	r1, 1a5ae <mayfly_xtal_retain+0x5e>
		if (!s_xtal_retained) {
   1a558:	2a00      	cmp	r2, #0
   1a55a:	d132      	bne.n	1a5c2 <mayfly_xtal_retain+0x72>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   1a55c:	2801      	cmp	r0, #1
   1a55e:	d013      	beq.n	1a588 <mayfly_xtal_retain+0x38>
   1a560:	2301      	movs	r3, #1
   1a562:	f04f 0100 	mov.w	r1, #0
   1a566:	f363 0107 	bfi	r1, r3, #0, #8
   1a56a:	4a17      	ldr	r2, [pc, #92]	; (1a5c8 <mayfly_xtal_retain+0x78>)
   1a56c:	4b17      	ldr	r3, [pc, #92]	; (1a5cc <mayfly_xtal_retain+0x7c>)
   1a56e:	4818      	ldr	r0, [pc, #96]	; (1a5d0 <mayfly_xtal_retain+0x80>)
   1a570:	1a9b      	subs	r3, r3, r2
   1a572:	08db      	lsrs	r3, r3, #3
   1a574:	f363 118f 	bfi	r1, r3, #6, #10
			LL_ASSERT(!retval);
   1a578:	f006 fb44 	bl	20c04 <log_0>
   1a57c:	4040      	eors	r0, r0
   1a57e:	f380 8811 	msr	BASEPRI, r0
   1a582:	f04f 0004 	mov.w	r0, #4
   1a586:	df02      	svc	2
			s_xtal_retained = 1U;
   1a588:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   1a58a:	4b12      	ldr	r3, [pc, #72]	; (1a5d4 <mayfly_xtal_retain+0x84>)
   1a58c:	4611      	mov	r1, r2
   1a58e:	f7fe f865 	bl	1865c <mayfly_enqueue>
			LL_ASSERT(!retval);
   1a592:	b1b0      	cbz	r0, 1a5c2 <mayfly_xtal_retain+0x72>
   1a594:	2301      	movs	r3, #1
   1a596:	f04f 0100 	mov.w	r1, #0
   1a59a:	f363 0107 	bfi	r1, r3, #0, #8
   1a59e:	4a0a      	ldr	r2, [pc, #40]	; (1a5c8 <mayfly_xtal_retain+0x78>)
   1a5a0:	4b0a      	ldr	r3, [pc, #40]	; (1a5cc <mayfly_xtal_retain+0x7c>)
   1a5a2:	480d      	ldr	r0, [pc, #52]	; (1a5d8 <mayfly_xtal_retain+0x88>)
   1a5a4:	1a9b      	subs	r3, r3, r2
   1a5a6:	08db      	lsrs	r3, r3, #3
   1a5a8:	f363 118f 	bfi	r1, r3, #6, #10
   1a5ac:	e7e4      	b.n	1a578 <mayfly_xtal_retain+0x28>
		if (s_xtal_retained) {
   1a5ae:	b142      	cbz	r2, 1a5c2 <mayfly_xtal_retain+0x72>
			s_xtal_retained = 0U;
   1a5b0:	7019      	strb	r1, [r3, #0]
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   1a5b2:	4b0a      	ldr	r3, [pc, #40]	; (1a5dc <mayfly_xtal_retain+0x8c>)
   1a5b4:	f103 0210 	add.w	r2, r3, #16
			retval = mayfly_enqueue(caller_id,
   1a5b8:	2801      	cmp	r0, #1
   1a5ba:	bf08      	it	eq
   1a5bc:	4613      	moveq	r3, r2
   1a5be:	460a      	mov	r2, r1
   1a5c0:	e7e5      	b.n	1a58e <mayfly_xtal_retain+0x3e>
}
   1a5c2:	bd38      	pop	{r3, r4, r5, pc}
   1a5c4:	20002451 	.word	0x20002451
   1a5c8:	00025880 	.word	0x00025880
   1a5cc:	000258b0 	.word	0x000258b0
   1a5d0:	0002c63f 	.word	0x0002c63f
   1a5d4:	2000763c 	.word	0x2000763c
   1a5d8:	0002c65f 	.word	0x0002c65f
   1a5dc:	2000764c 	.word	0x2000764c

0001a5e0 <adv_scan_conn_configure>:
{
   1a5e0:	b508      	push	{r3, lr}
	radio_reset();
   1a5e2:	f002 fc15 	bl	1ce10 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1a5e6:	2000      	movs	r0, #0
   1a5e8:	f002 fc3c 	bl	1ce64 <radio_tx_power_set>
	radio_isr_set(isr, NULL);
   1a5ec:	2100      	movs	r1, #0
   1a5ee:	4802      	ldr	r0, [pc, #8]	; (1a5f8 <adv_scan_conn_configure+0x18>)
}
   1a5f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_isr_set(isr, NULL);
   1a5f4:	f002 bbec 	b.w	1cdd0 <radio_isr_set>
   1a5f8:	00000dd9 	.word	0x00000dd9

0001a5fc <packet_rx_enqueue>:
{
   1a5fc:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   1a5fe:	4a23      	ldr	r2, [pc, #140]	; (1a68c <packet_rx_enqueue+0x90>)
   1a600:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
   1a604:	f892 113a 	ldrb.w	r1, [r2, #314]	; 0x13a
   1a608:	4299      	cmp	r1, r3
   1a60a:	d113      	bne.n	1a634 <packet_rx_enqueue+0x38>
   1a60c:	2301      	movs	r3, #1
   1a60e:	f04f 0100 	mov.w	r1, #0
   1a612:	f363 0107 	bfi	r1, r3, #0, #8
   1a616:	4a1e      	ldr	r2, [pc, #120]	; (1a690 <packet_rx_enqueue+0x94>)
   1a618:	4b1e      	ldr	r3, [pc, #120]	; (1a694 <packet_rx_enqueue+0x98>)
   1a61a:	481f      	ldr	r0, [pc, #124]	; (1a698 <packet_rx_enqueue+0x9c>)
   1a61c:	1a9b      	subs	r3, r3, r2
   1a61e:	08db      	lsrs	r3, r3, #3
   1a620:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(link);
   1a624:	f006 faee 	bl	20c04 <log_0>
   1a628:	4040      	eors	r0, r0
   1a62a:	f380 8811 	msr	BASEPRI, r0
   1a62e:	f04f 0004 	mov.w	r0, #4
   1a632:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1a634:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
   1a638:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1a63c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   1a640:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	link = node_rx->hdr.link;
   1a644:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   1a646:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
   1a648:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
	if (last == _radio.packet_rx_count) {
   1a64c:	f892 4138 	ldrb.w	r4, [r2, #312]	; 0x138
	last = _radio.packet_rx_last + 1;
   1a650:	3301      	adds	r3, #1
   1a652:	b2db      	uxtb	r3, r3
		last = 0U;
   1a654:	429c      	cmp	r4, r3
   1a656:	bf08      	it	eq
   1a658:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
   1a65a:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   1a65e:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   1a662:	f009 fe49 	bl	242f8 <memq_enqueue>
	LL_ASSERT(link);
   1a666:	b960      	cbnz	r0, 1a682 <packet_rx_enqueue+0x86>
   1a668:	2301      	movs	r3, #1
   1a66a:	f04f 0100 	mov.w	r1, #0
   1a66e:	f363 0107 	bfi	r1, r3, #0, #8
   1a672:	4a07      	ldr	r2, [pc, #28]	; (1a690 <packet_rx_enqueue+0x94>)
   1a674:	4b07      	ldr	r3, [pc, #28]	; (1a694 <packet_rx_enqueue+0x98>)
   1a676:	4809      	ldr	r0, [pc, #36]	; (1a69c <packet_rx_enqueue+0xa0>)
   1a678:	1a9b      	subs	r3, r3, r2
   1a67a:	08db      	lsrs	r3, r3, #3
   1a67c:	f363 118f 	bfi	r1, r3, #6, #10
   1a680:	e7d0      	b.n	1a624 <packet_rx_enqueue+0x28>
}
   1a682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   1a686:	f002 b81d 	b.w	1c6c4 <radio_event_callback>
   1a68a:	bf00      	nop
   1a68c:	20000fb4 	.word	0x20000fb4
   1a690:	00025880 	.word	0x00025880
   1a694:	000258b0 	.word	0x000258b0
   1a698:	0002c6c9 	.word	0x0002c6c9
   1a69c:	0002c70c 	.word	0x0002c70c

0001a6a0 <rx_fc_lock>:
}

#if defined(CONFIG_BT_CONN)
static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   1a6a0:	4a0b      	ldr	r2, [pc, #44]	; (1a6d0 <rx_fc_lock+0x30>)
   1a6a2:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
   1a6a6:	f892 1179 	ldrb.w	r1, [r2, #377]	; 0x179
   1a6aa:	4299      	cmp	r1, r3
   1a6ac:	d10e      	bne.n	1a6cc <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   1a6ae:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
   1a6b2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1a6b6:	f8a3 0172 	strh.w	r0, [r3, #370]	; 0x172
		req = _radio.fc_req + 1;
   1a6ba:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
   1a6be:	3301      	adds	r3, #1
   1a6c0:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0U;
   1a6c2:	2b03      	cmp	r3, #3
   1a6c4:	bf08      	it	eq
   1a6c6:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
   1a6c8:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
	}
}
   1a6cc:	4770      	bx	lr
   1a6ce:	bf00      	nop
   1a6d0:	20000fb4 	.word	0x20000fb4

0001a6d4 <ticker_start_conn_assert.part.7>:
static void ticker_success_assert(u32_t status, void *params)
   1a6d4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a6d6:	f04f 0100 	mov.w	r1, #0
   1a6da:	2301      	movs	r3, #1
   1a6dc:	4a08      	ldr	r2, [pc, #32]	; (1a700 <ticker_start_conn_assert.part.7+0x2c>)
   1a6de:	4809      	ldr	r0, [pc, #36]	; (1a704 <ticker_start_conn_assert.part.7+0x30>)
   1a6e0:	f363 0107 	bfi	r1, r3, #0, #8
   1a6e4:	4b08      	ldr	r3, [pc, #32]	; (1a708 <ticker_start_conn_assert.part.7+0x34>)
   1a6e6:	1a9b      	subs	r3, r3, r2
   1a6e8:	08db      	lsrs	r3, r3, #3
   1a6ea:	f363 118f 	bfi	r1, r3, #6, #10
   1a6ee:	f006 fa89 	bl	20c04 <log_0>
   1a6f2:	4040      	eors	r0, r0
   1a6f4:	f380 8811 	msr	BASEPRI, r0
   1a6f8:	f04f 0004 	mov.w	r0, #4
   1a6fc:	df02      	svc	2
   1a6fe:	bf00      	nop
   1a700:	00025880 	.word	0x00025880
   1a704:	0002c96b 	.word	0x0002c96b
   1a708:	000258b0 	.word	0x000258b0

0001a70c <ticker_start_conn_assert>:
{
   1a70c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a70e:	b108      	cbz	r0, 1a714 <ticker_start_conn_assert+0x8>
   1a710:	f7ff ffe0 	bl	1a6d4 <ticker_start_conn_assert.part.7>
	_radio.ticker_id_upd = 0;
   1a714:	4b01      	ldr	r3, [pc, #4]	; (1a71c <ticker_start_conn_assert+0x10>)
   1a716:	74d8      	strb	r0, [r3, #19]
}
   1a718:	bd08      	pop	{r3, pc}
   1a71a:	bf00      	nop
   1a71c:	20000fb4 	.word	0x20000fb4

0001a720 <ticker_stop_conn_assert>:
{
   1a720:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a722:	b108      	cbz	r0, 1a728 <ticker_stop_conn_assert+0x8>
   1a724:	f7ff ffd6 	bl	1a6d4 <ticker_start_conn_assert.part.7>
	_radio.ticker_id_upd = (u8_t)((u32_t)params & 0xFF);
   1a728:	4b01      	ldr	r3, [pc, #4]	; (1a730 <ticker_stop_conn_assert+0x10>)
   1a72a:	b2c9      	uxtb	r1, r1
   1a72c:	74d9      	strb	r1, [r3, #19]
}
   1a72e:	bd08      	pop	{r3, pc}
   1a730:	20000fb4 	.word	0x20000fb4

0001a734 <chan_set.part.25>:
static void ticker_stop_adv_assert(u32_t status, void *params)
   1a734:	b508      	push	{r3, lr}
			LL_ASSERT(0);
   1a736:	f04f 0100 	mov.w	r1, #0
   1a73a:	2301      	movs	r3, #1
   1a73c:	4a08      	ldr	r2, [pc, #32]	; (1a760 <chan_set.part.25+0x2c>)
   1a73e:	4809      	ldr	r0, [pc, #36]	; (1a764 <chan_set.part.25+0x30>)
   1a740:	f363 0107 	bfi	r1, r3, #0, #8
   1a744:	4b08      	ldr	r3, [pc, #32]	; (1a768 <chan_set.part.25+0x34>)
   1a746:	1a9b      	subs	r3, r3, r2
   1a748:	08db      	lsrs	r3, r3, #3
   1a74a:	f363 118f 	bfi	r1, r3, #6, #10
   1a74e:	f006 fa59 	bl	20c04 <log_0>
   1a752:	4040      	eors	r0, r0
   1a754:	f380 8811 	msr	BASEPRI, r0
   1a758:	f04f 0004 	mov.w	r0, #4
   1a75c:	df02      	svc	2
   1a75e:	bf00      	nop
   1a760:	00025880 	.word	0x00025880
   1a764:	0002c060 	.word	0x0002c060
   1a768:	000258b0 	.word	0x000258b0

0001a76c <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   1a76c:	2801      	cmp	r0, #1
{
   1a76e:	b508      	push	{r3, lr}
   1a770:	4b10      	ldr	r3, [pc, #64]	; (1a7b4 <ticker_stop_adv_assert+0x48>)
	if (status == TICKER_STATUS_FAILURE) {
   1a772:	d107      	bne.n	1a784 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   1a774:	7c9a      	ldrb	r2, [r3, #18]
   1a776:	2a05      	cmp	r2, #5
   1a778:	d102      	bne.n	1a780 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0U;
   1a77a:	2200      	movs	r2, #0
   1a77c:	749a      	strb	r2, [r3, #18]
}
   1a77e:	bd08      	pop	{r3, pc}
   1a780:	f7ff ffd8 	bl	1a734 <chan_set.part.25>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   1a784:	7c1b      	ldrb	r3, [r3, #16]
   1a786:	2b05      	cmp	r3, #5
   1a788:	d1f9      	bne.n	1a77e <ticker_stop_adv_assert+0x12>
   1a78a:	2301      	movs	r3, #1
   1a78c:	f04f 0100 	mov.w	r1, #0
   1a790:	4a09      	ldr	r2, [pc, #36]	; (1a7b8 <ticker_stop_adv_assert+0x4c>)
   1a792:	480a      	ldr	r0, [pc, #40]	; (1a7bc <ticker_stop_adv_assert+0x50>)
   1a794:	f363 0107 	bfi	r1, r3, #0, #8
   1a798:	4b09      	ldr	r3, [pc, #36]	; (1a7c0 <ticker_stop_adv_assert+0x54>)
   1a79a:	1a9b      	subs	r3, r3, r2
   1a79c:	08db      	lsrs	r3, r3, #3
   1a79e:	f363 118f 	bfi	r1, r3, #6, #10
   1a7a2:	f006 fa2f 	bl	20c04 <log_0>
   1a7a6:	4040      	eors	r0, r0
   1a7a8:	f380 8811 	msr	BASEPRI, r0
   1a7ac:	f04f 0004 	mov.w	r0, #4
   1a7b0:	df02      	svc	2
   1a7b2:	bf00      	nop
   1a7b4:	20000fb4 	.word	0x20000fb4
   1a7b8:	00025880 	.word	0x00025880
   1a7bc:	0002c910 	.word	0x0002c910
   1a7c0:	000258b0 	.word	0x000258b0

0001a7c4 <ticker_update_adv_assert>:
{
   1a7c4:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a7c6:	b1b8      	cbz	r0, 1a7f8 <ticker_update_adv_assert+0x34>
   1a7c8:	4b0c      	ldr	r3, [pc, #48]	; (1a7fc <ticker_update_adv_assert+0x38>)
   1a7ca:	7c9b      	ldrb	r3, [r3, #18]
   1a7cc:	2b05      	cmp	r3, #5
   1a7ce:	d013      	beq.n	1a7f8 <ticker_update_adv_assert+0x34>
   1a7d0:	2301      	movs	r3, #1
   1a7d2:	f04f 0100 	mov.w	r1, #0
   1a7d6:	4a0a      	ldr	r2, [pc, #40]	; (1a800 <ticker_update_adv_assert+0x3c>)
   1a7d8:	480a      	ldr	r0, [pc, #40]	; (1a804 <ticker_update_adv_assert+0x40>)
   1a7da:	f363 0107 	bfi	r1, r3, #0, #8
   1a7de:	4b0a      	ldr	r3, [pc, #40]	; (1a808 <ticker_update_adv_assert+0x44>)
   1a7e0:	1a9b      	subs	r3, r3, r2
   1a7e2:	08db      	lsrs	r3, r3, #3
   1a7e4:	f363 118f 	bfi	r1, r3, #6, #10
   1a7e8:	f006 fa0c 	bl	20c04 <log_0>
   1a7ec:	4040      	eors	r0, r0
   1a7ee:	f380 8811 	msr	BASEPRI, r0
   1a7f2:	f04f 0004 	mov.w	r0, #4
   1a7f6:	df02      	svc	2
}
   1a7f8:	bd08      	pop	{r3, pc}
   1a7fa:	bf00      	nop
   1a7fc:	20000fb4 	.word	0x20000fb4
   1a800:	00025880 	.word	0x00025880
   1a804:	0002c988 	.word	0x0002c988
   1a808:	000258b0 	.word	0x000258b0

0001a80c <ticker_update_slave_assert>:
{
   1a80c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a80e:	b1d8      	cbz	r0, 1a848 <ticker_update_slave_assert+0x3c>
   1a810:	4b0e      	ldr	r3, [pc, #56]	; (1a84c <ticker_update_slave_assert+0x40>)
   1a812:	7c9a      	ldrb	r2, [r3, #18]
	u8_t ticker_id = (u32_t)params & 0xFF;
   1a814:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a816:	428a      	cmp	r2, r1
   1a818:	d016      	beq.n	1a848 <ticker_update_slave_assert+0x3c>
   1a81a:	7cdb      	ldrb	r3, [r3, #19]
   1a81c:	428b      	cmp	r3, r1
   1a81e:	d013      	beq.n	1a848 <ticker_update_slave_assert+0x3c>
   1a820:	2301      	movs	r3, #1
   1a822:	f04f 0100 	mov.w	r1, #0
   1a826:	4a0a      	ldr	r2, [pc, #40]	; (1a850 <ticker_update_slave_assert+0x44>)
   1a828:	480a      	ldr	r0, [pc, #40]	; (1a854 <ticker_update_slave_assert+0x48>)
   1a82a:	f363 0107 	bfi	r1, r3, #0, #8
   1a82e:	4b0a      	ldr	r3, [pc, #40]	; (1a858 <ticker_update_slave_assert+0x4c>)
   1a830:	1a9b      	subs	r3, r3, r2
   1a832:	08db      	lsrs	r3, r3, #3
   1a834:	f363 118f 	bfi	r1, r3, #6, #10
   1a838:	f006 f9e4 	bl	20c04 <log_0>
   1a83c:	4040      	eors	r0, r0
   1a83e:	f380 8811 	msr	BASEPRI, r0
   1a842:	f04f 0004 	mov.w	r0, #4
   1a846:	df02      	svc	2
}
   1a848:	bd08      	pop	{r3, pc}
   1a84a:	bf00      	nop
   1a84c:	20000fb4 	.word	0x20000fb4
   1a850:	00025880 	.word	0x00025880
   1a854:	0002c9c7 	.word	0x0002c9c7
   1a858:	000258b0 	.word	0x000258b0

0001a85c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
   1a85c:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1a85e:	b198      	cbz	r0, 1a888 <ticker_op_latency_cancelled+0x2c>
   1a860:	2301      	movs	r3, #1
   1a862:	f04f 0100 	mov.w	r1, #0
   1a866:	4a0c      	ldr	r2, [pc, #48]	; (1a898 <ticker_op_latency_cancelled+0x3c>)
   1a868:	480c      	ldr	r0, [pc, #48]	; (1a89c <ticker_op_latency_cancelled+0x40>)
   1a86a:	f363 0107 	bfi	r1, r3, #0, #8
   1a86e:	4b0c      	ldr	r3, [pc, #48]	; (1a8a0 <ticker_op_latency_cancelled+0x44>)
   1a870:	1a9b      	subs	r3, r3, r2
   1a872:	08db      	lsrs	r3, r3, #3
   1a874:	f363 118f 	bfi	r1, r3, #6, #10
   1a878:	f006 f9c4 	bl	20c04 <log_0>
   1a87c:	4040      	eors	r0, r0
   1a87e:	f380 8811 	msr	BASEPRI, r0
   1a882:	f04f 0004 	mov.w	r0, #4
   1a886:	df02      	svc	2

	conn->slave.latency_cancel = 0U;
   1a888:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1a88c:	f360 0341 	bfi	r3, r0, #1, #1
   1a890:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
}
   1a894:	bd08      	pop	{r3, pc}
   1a896:	bf00      	nop
   1a898:	00025880 	.word	0x00025880
   1a89c:	0002c8ec 	.word	0x0002c8ec
   1a8a0:	000258b0 	.word	0x000258b0

0001a8a4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
   1a8a4:	4b04      	ldr	r3, [pc, #16]	; (1a8b8 <ticker_job_disable+0x14>)
   1a8a6:	7d5b      	ldrb	r3, [r3, #21]
   1a8a8:	b123      	cbz	r3, 1a8b4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1a8aa:	2101      	movs	r1, #1
   1a8ac:	2200      	movs	r2, #0
   1a8ae:	4608      	mov	r0, r1
   1a8b0:	f7fd beac 	b.w	1860c <mayfly_enable>
}
   1a8b4:	4770      	bx	lr
   1a8b6:	bf00      	nop
   1a8b8:	20000fb4 	.word	0x20000fb4

0001a8bc <connection_get>:
{
   1a8bc:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
   1a8be:	4b0a      	ldr	r3, [pc, #40]	; (1a8e8 <connection_get+0x2c>)
   1a8c0:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
   1a8c4:	4282      	cmp	r2, r0
{
   1a8c6:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
   1a8c8:	d801      	bhi.n	1a8ce <connection_get+0x12>
	return 0;
   1a8ca:	2000      	movs	r0, #0
}
   1a8cc:	bd10      	pop	{r4, pc}
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   1a8ce:	4602      	mov	r2, r0
   1a8d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1a8d4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   1a8d8:	f009 fcf4 	bl	242c4 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   1a8dc:	2800      	cmp	r0, #0
   1a8de:	d0f4      	beq.n	1a8ca <connection_get+0xe>
   1a8e0:	8c03      	ldrh	r3, [r0, #32]
   1a8e2:	42a3      	cmp	r3, r4
   1a8e4:	d1f1      	bne.n	1a8ca <connection_get+0xe>
   1a8e6:	e7f1      	b.n	1a8cc <connection_get+0x10>
   1a8e8:	20000fb4 	.word	0x20000fb4

0001a8ec <role_disable>:
{
   1a8ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a8f0:	b087      	sub	sp, #28
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1a8f2:	2502      	movs	r5, #2
	switch (ticker_id_primary) {
   1a8f4:	2805      	cmp	r0, #5
{
   1a8f6:	4606      	mov	r6, r0
   1a8f8:	4688      	mov	r8, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1a8fa:	9502      	str	r5, [sp, #8]
	switch (ticker_id_primary) {
   1a8fc:	d00b      	beq.n	1a916 <role_disable+0x2a>
   1a8fe:	2806      	cmp	r0, #6
   1a900:	d048      	beq.n	1a994 <role_disable+0xa8>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1a902:	d94b      	bls.n	1a99c <role_disable+0xb0>
			conn_handle = ticker_id_primary -
   1a904:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   1a906:	b280      	uxth	r0, r0
   1a908:	f7ff ffd8 	bl	1a8bc <connection_get>
			if (!conn) {
   1a90c:	2800      	cmp	r0, #0
   1a90e:	d067      	beq.n	1a9e0 <role_disable+0xf4>
			ticks_active_to_start =
   1a910:	e9d0 7900 	ldrd	r7, r9, [r0]
		break;
   1a914:	e00e      	b.n	1a934 <role_disable+0x48>
		ticks_xtal_to_start =
   1a916:	4ba6      	ldr	r3, [pc, #664]	; (1abb0 <role_disable+0x2c4>)
		ticks_active_to_start =
   1a918:	e9d3 7906 	ldrd	r7, r9, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a91c:	ab02      	add	r3, sp, #8
   1a91e:	9300      	str	r3, [sp, #0]
   1a920:	460a      	mov	r2, r1
   1a922:	4ba4      	ldr	r3, [pc, #656]	; (1abb4 <role_disable+0x2c8>)
   1a924:	2103      	movs	r1, #3
   1a926:	2000      	movs	r0, #0
   1a928:	f7fe fc48 	bl	191bc <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1a92c:	2802      	cmp	r0, #2
   1a92e:	d016      	beq.n	1a95e <role_disable+0x72>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   1a930:	9b02      	ldr	r3, [sp, #8]
   1a932:	b9c3      	cbnz	r3, 1a966 <role_disable+0x7a>
	LL_ASSERT(!_radio.ticker_id_stop);
   1a934:	4c9e      	ldr	r4, [pc, #632]	; (1abb0 <role_disable+0x2c4>)
   1a936:	7ca3      	ldrb	r3, [r4, #18]
   1a938:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   1a93c:	2b00      	cmp	r3, #0
   1a93e:	d03a      	beq.n	1a9b6 <role_disable+0xca>
   1a940:	2301      	movs	r3, #1
   1a942:	f04f 0100 	mov.w	r1, #0
   1a946:	f363 0107 	bfi	r1, r3, #0, #8
   1a94a:	4a9b      	ldr	r2, [pc, #620]	; (1abb8 <role_disable+0x2cc>)
   1a94c:	4b9b      	ldr	r3, [pc, #620]	; (1abbc <role_disable+0x2d0>)
   1a94e:	489c      	ldr	r0, [pc, #624]	; (1abc0 <role_disable+0x2d4>)
   1a950:	1a9b      	subs	r3, r3, r2
   1a952:	08db      	lsrs	r3, r3, #3
   1a954:	f363 118f 	bfi	r1, r3, #6, #10
   1a958:	e014      	b.n	1a984 <role_disable+0x98>
				cpu_sleep();
   1a95a:	f009 fe2b 	bl	245b4 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1a95e:	9b02      	ldr	r3, [sp, #8]
   1a960:	2b02      	cmp	r3, #2
   1a962:	d0fa      	beq.n	1a95a <role_disable+0x6e>
   1a964:	e7e4      	b.n	1a930 <role_disable+0x44>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   1a966:	9b02      	ldr	r3, [sp, #8]
   1a968:	2b01      	cmp	r3, #1
   1a96a:	d0e3      	beq.n	1a934 <role_disable+0x48>
   1a96c:	2301      	movs	r3, #1
   1a96e:	f04f 0100 	mov.w	r1, #0
   1a972:	f363 0107 	bfi	r1, r3, #0, #8
   1a976:	4a90      	ldr	r2, [pc, #576]	; (1abb8 <role_disable+0x2cc>)
   1a978:	4b90      	ldr	r3, [pc, #576]	; (1abbc <role_disable+0x2d0>)
   1a97a:	4892      	ldr	r0, [pc, #584]	; (1abc4 <role_disable+0x2d8>)
   1a97c:	1a9b      	subs	r3, r3, r2
   1a97e:	08db      	lsrs	r3, r3, #3
   1a980:	f363 118f 	bfi	r1, r3, #6, #10
			LL_ASSERT(0);
   1a984:	f006 f93e 	bl	20c04 <log_0>
   1a988:	4040      	eors	r0, r0
   1a98a:	f380 8811 	msr	BASEPRI, r0
   1a98e:	f04f 0004 	mov.w	r0, #4
   1a992:	df02      	svc	2
		ticks_xtal_to_start =
   1a994:	4b86      	ldr	r3, [pc, #536]	; (1abb0 <role_disable+0x2c4>)
		ticks_active_to_start =
   1a996:	e9d3 7934 	ldrd	r7, r9, [r3, #208]	; 0xd0
		break;
   1a99a:	e7cb      	b.n	1a934 <role_disable+0x48>
			LL_ASSERT(0);
   1a99c:	2301      	movs	r3, #1
   1a99e:	f04f 0100 	mov.w	r1, #0
   1a9a2:	f363 0107 	bfi	r1, r3, #0, #8
   1a9a6:	4a84      	ldr	r2, [pc, #528]	; (1abb8 <role_disable+0x2cc>)
   1a9a8:	4b84      	ldr	r3, [pc, #528]	; (1abbc <role_disable+0x2d0>)
   1a9aa:	4887      	ldr	r0, [pc, #540]	; (1abc8 <role_disable+0x2dc>)
   1a9ac:	1a9b      	subs	r3, r3, r2
   1a9ae:	08db      	lsrs	r3, r3, #3
   1a9b0:	f363 118f 	bfi	r1, r3, #6, #10
   1a9b4:	e7e6      	b.n	1a984 <role_disable+0x98>
	ret_cb = TICKER_STATUS_BUSY;
   1a9b6:	2302      	movs	r3, #2
	_radio.ticker_id_stop = ticker_id_primary;
   1a9b8:	74a6      	strb	r6, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
   1a9ba:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a9bc:	ab02      	add	r3, sp, #8
   1a9be:	9300      	str	r3, [sp, #0]
   1a9c0:	4632      	mov	r2, r6
   1a9c2:	4b7c      	ldr	r3, [pc, #496]	; (1abb4 <role_disable+0x2c8>)
   1a9c4:	2103      	movs	r1, #3
   1a9c6:	4628      	mov	r0, r5
   1a9c8:	f7fe fbf8 	bl	191bc <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1a9cc:	2802      	cmp	r0, #2
   1a9ce:	d00b      	beq.n	1a9e8 <role_disable+0xfc>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1a9d0:	9b02      	ldr	r3, [sp, #8]
   1a9d2:	b1bb      	cbz	r3, 1aa04 <role_disable+0x118>
	_radio.ticker_id_stop = 0U;
   1a9d4:	2300      	movs	r3, #0
   1a9d6:	74a3      	strb	r3, [r4, #18]
	return ret_cb ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1a9d8:	9b02      	ldr	r3, [sp, #8]
   1a9da:	2b00      	cmp	r3, #0
   1a9dc:	bf18      	it	ne
   1a9de:	250c      	movne	r5, #12
}
   1a9e0:	4628      	mov	r0, r5
   1a9e2:	b007      	add	sp, #28
   1a9e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (_radio.ticker_id_event == ticker_id_primary) {
   1a9e8:	7c63      	ldrb	r3, [r4, #17]
   1a9ea:	42b3      	cmp	r3, r6
   1a9ec:	d104      	bne.n	1a9f8 <role_disable+0x10c>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1a9ee:	2201      	movs	r2, #1
   1a9f0:	4611      	mov	r1, r2
   1a9f2:	2003      	movs	r0, #3
   1a9f4:	f7fd fe0a 	bl	1860c <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1a9f8:	9b02      	ldr	r3, [sp, #8]
   1a9fa:	2b02      	cmp	r3, #2
   1a9fc:	d1e8      	bne.n	1a9d0 <role_disable+0xe4>
			cpu_sleep();
   1a9fe:	f009 fdd9 	bl	245b4 <cpu_sleep>
   1aa02:	e7f9      	b.n	1a9f8 <role_disable+0x10c>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   1aa04:	7c23      	ldrb	r3, [r4, #16]
   1aa06:	42b3      	cmp	r3, r6
   1aa08:	d002      	beq.n	1aa10 <role_disable+0x124>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   1aa0a:	7c63      	ldrb	r3, [r4, #17]
   1aa0c:	42b3      	cmp	r3, r6
   1aa0e:	d15f      	bne.n	1aad0 <role_disable+0x1e4>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   1aa10:	2302      	movs	r3, #2
   1aa12:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1aa14:	2200      	movs	r2, #0
   1aa16:	ab03      	add	r3, sp, #12
   1aa18:	9300      	str	r3, [sp, #0]
   1aa1a:	2103      	movs	r1, #3
   1aa1c:	4b65      	ldr	r3, [pc, #404]	; (1abb4 <role_disable+0x2c8>)
   1aa1e:	4610      	mov	r0, r2
   1aa20:	f7fe fbcc 	bl	191bc <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1aa24:	2802      	cmp	r0, #2
   1aa26:	d114      	bne.n	1aa52 <role_disable+0x166>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1aa28:	2201      	movs	r2, #1
   1aa2a:	4611      	mov	r1, r2
   1aa2c:	2003      	movs	r0, #3
   1aa2e:	f7fd fded 	bl	1860c <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
   1aa32:	9b03      	ldr	r3, [sp, #12]
   1aa34:	2b02      	cmp	r3, #2
   1aa36:	d10c      	bne.n	1aa52 <role_disable+0x166>
   1aa38:	2301      	movs	r3, #1
   1aa3a:	f04f 0100 	mov.w	r1, #0
   1aa3e:	f363 0107 	bfi	r1, r3, #0, #8
   1aa42:	4a5d      	ldr	r2, [pc, #372]	; (1abb8 <role_disable+0x2cc>)
   1aa44:	4b5d      	ldr	r3, [pc, #372]	; (1abbc <role_disable+0x2d0>)
   1aa46:	4861      	ldr	r0, [pc, #388]	; (1abcc <role_disable+0x2e0>)
   1aa48:	1a9b      	subs	r3, r3, r2
   1aa4a:	08db      	lsrs	r3, r3, #3
   1aa4c:	f363 118f 	bfi	r1, r3, #6, #10
   1aa50:	e798      	b.n	1a984 <role_disable+0x98>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   1aa52:	9803      	ldr	r0, [sp, #12]
   1aa54:	2800      	cmp	r0, #0
   1aa56:	d15d      	bne.n	1ab14 <role_disable+0x228>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   1aa58:	2302      	movs	r3, #2
   1aa5a:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
   1aa5c:	7c23      	ldrb	r3, [r4, #16]
   1aa5e:	b963      	cbnz	r3, 1aa7a <role_disable+0x18e>
   1aa60:	2301      	movs	r3, #1
   1aa62:	f04f 0100 	mov.w	r1, #0
   1aa66:	f363 0107 	bfi	r1, r3, #0, #8
   1aa6a:	4a53      	ldr	r2, [pc, #332]	; (1abb8 <role_disable+0x2cc>)
   1aa6c:	4b53      	ldr	r3, [pc, #332]	; (1abbc <role_disable+0x2d0>)
   1aa6e:	4858      	ldr	r0, [pc, #352]	; (1abd0 <role_disable+0x2e4>)
   1aa70:	1a9b      	subs	r3, r3, r2
   1aa72:	08db      	lsrs	r3, r3, #3
   1aa74:	f363 118f 	bfi	r1, r3, #6, #10
   1aa78:	e784      	b.n	1a984 <role_disable+0x98>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1aa7a:	ab04      	add	r3, sp, #16
   1aa7c:	9300      	str	r3, [sp, #0]
   1aa7e:	2201      	movs	r2, #1
   1aa80:	4b4c      	ldr	r3, [pc, #304]	; (1abb4 <role_disable+0x2c8>)
		_radio.ticker_id_prepare = 0U;
   1aa82:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1aa84:	2103      	movs	r1, #3
   1aa86:	f7fe fb99 	bl	191bc <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1aa8a:	2802      	cmp	r0, #2
   1aa8c:	d114      	bne.n	1aab8 <role_disable+0x1cc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1aa8e:	2201      	movs	r2, #1
   1aa90:	4611      	mov	r1, r2
   1aa92:	2003      	movs	r0, #3
   1aa94:	f7fd fdba 	bl	1860c <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
   1aa98:	9b04      	ldr	r3, [sp, #16]
   1aa9a:	2b02      	cmp	r3, #2
   1aa9c:	d10c      	bne.n	1aab8 <role_disable+0x1cc>
   1aa9e:	2301      	movs	r3, #1
   1aaa0:	f04f 0100 	mov.w	r1, #0
   1aaa4:	f363 0107 	bfi	r1, r3, #0, #8
   1aaa8:	4a43      	ldr	r2, [pc, #268]	; (1abb8 <role_disable+0x2cc>)
   1aaaa:	4b44      	ldr	r3, [pc, #272]	; (1abbc <role_disable+0x2d0>)
   1aaac:	4849      	ldr	r0, [pc, #292]	; (1abd4 <role_disable+0x2e8>)
   1aaae:	1a9b      	subs	r3, r3, r2
   1aab0:	08db      	lsrs	r3, r3, #3
   1aab2:	f363 118f 	bfi	r1, r3, #6, #10
   1aab6:	e765      	b.n	1a984 <role_disable+0x98>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   1aab8:	9a04      	ldr	r2, [sp, #16]
   1aaba:	b982      	cbnz	r2, 1aade <role_disable+0x1f2>
			ticks_xtal_to_start &= ~XON_BITMASK;
   1aabc:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   1aac0:	45b9      	cmp	r9, r7
   1aac2:	d925      	bls.n	1ab10 <role_disable+0x224>
				ret = mayfly_enqueue(
   1aac4:	4b44      	ldr	r3, [pc, #272]	; (1abd8 <role_disable+0x2ec>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1aac6:	4611      	mov	r1, r2
   1aac8:	2003      	movs	r0, #3
   1aaca:	f7fd fdc7 	bl	1865c <mayfly_enqueue>
			LL_ASSERT(!ret);
   1aace:	b990      	cbnz	r0, 1aaf6 <role_disable+0x20a>
	if (!_radio.ticker_id_stop) {
   1aad0:	7ca3      	ldrb	r3, [r4, #18]
   1aad2:	2b00      	cmp	r3, #0
   1aad4:	f47f af7e 	bne.w	1a9d4 <role_disable+0xe8>
		ret_cb = TICKER_STATUS_FAILURE;
   1aad8:	2301      	movs	r3, #1
   1aada:	9302      	str	r3, [sp, #8]
   1aadc:	e77a      	b.n	1a9d4 <role_disable+0xe8>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   1aade:	9b04      	ldr	r3, [sp, #16]
   1aae0:	2b01      	cmp	r3, #1
   1aae2:	f47f af5b 	bne.w	1a99c <role_disable+0xb0>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1aae6:	2200      	movs	r2, #0
   1aae8:	4611      	mov	r1, r2
   1aaea:	4b3b      	ldr	r3, [pc, #236]	; (1abd8 <role_disable+0x2ec>)
   1aaec:	2003      	movs	r0, #3
   1aaee:	f7fd fdb5 	bl	1865c <mayfly_enqueue>
			LL_ASSERT(!ret);
   1aaf2:	4602      	mov	r2, r0
   1aaf4:	b160      	cbz	r0, 1ab10 <role_disable+0x224>
			LL_ASSERT(!ret);
   1aaf6:	2301      	movs	r3, #1
   1aaf8:	f04f 0100 	mov.w	r1, #0
   1aafc:	f363 0107 	bfi	r1, r3, #0, #8
   1ab00:	4a2d      	ldr	r2, [pc, #180]	; (1abb8 <role_disable+0x2cc>)
   1ab02:	4b2e      	ldr	r3, [pc, #184]	; (1abbc <role_disable+0x2d0>)
   1ab04:	4835      	ldr	r0, [pc, #212]	; (1abdc <role_disable+0x2f0>)
   1ab06:	1a9b      	subs	r3, r3, r2
   1ab08:	08db      	lsrs	r3, r3, #3
   1ab0a:	f363 118f 	bfi	r1, r3, #6, #10
   1ab0e:	e739      	b.n	1a984 <role_disable+0x98>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1ab10:	4b33      	ldr	r3, [pc, #204]	; (1abe0 <role_disable+0x2f4>)
   1ab12:	e7d8      	b.n	1aac6 <role_disable+0x1da>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   1ab14:	9e03      	ldr	r6, [sp, #12]
   1ab16:	2e01      	cmp	r6, #1
   1ab18:	f47f af40 	bne.w	1a99c <role_disable+0xb0>
		if (ticker_id_stop != TICKER_NULL) {
   1ab1c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1ab20:	d032      	beq.n	1ab88 <role_disable+0x29c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
   1ab22:	2302      	movs	r3, #2
   1ab24:	9305      	str	r3, [sp, #20]
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1ab26:	ab05      	add	r3, sp, #20
   1ab28:	9300      	str	r3, [sp, #0]
   1ab2a:	4642      	mov	r2, r8
   1ab2c:	4b21      	ldr	r3, [pc, #132]	; (1abb4 <role_disable+0x2c8>)
   1ab2e:	2103      	movs	r1, #3
   1ab30:	2000      	movs	r0, #0
   1ab32:	f7fe fb43 	bl	191bc <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   1ab36:	2802      	cmp	r0, #2
   1ab38:	d114      	bne.n	1ab64 <role_disable+0x278>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1ab3a:	4632      	mov	r2, r6
   1ab3c:	4631      	mov	r1, r6
   1ab3e:	2003      	movs	r0, #3
   1ab40:	f7fd fd64 	bl	1860c <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
   1ab44:	9b05      	ldr	r3, [sp, #20]
   1ab46:	2b02      	cmp	r3, #2
   1ab48:	d10c      	bne.n	1ab64 <role_disable+0x278>
   1ab4a:	2301      	movs	r3, #1
   1ab4c:	f04f 0100 	mov.w	r1, #0
   1ab50:	f363 0107 	bfi	r1, r3, #0, #8
   1ab54:	4a18      	ldr	r2, [pc, #96]	; (1abb8 <role_disable+0x2cc>)
   1ab56:	4b19      	ldr	r3, [pc, #100]	; (1abbc <role_disable+0x2d0>)
   1ab58:	4822      	ldr	r0, [pc, #136]	; (1abe4 <role_disable+0x2f8>)
   1ab5a:	1a9b      	subs	r3, r3, r2
   1ab5c:	08db      	lsrs	r3, r3, #3
   1ab5e:	f363 118f 	bfi	r1, r3, #6, #10
   1ab62:	e70f      	b.n	1a984 <role_disable+0x98>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
   1ab64:	9b05      	ldr	r3, [sp, #20]
   1ab66:	b17b      	cbz	r3, 1ab88 <role_disable+0x29c>
   1ab68:	9b05      	ldr	r3, [sp, #20]
   1ab6a:	2b01      	cmp	r3, #1
   1ab6c:	d00c      	beq.n	1ab88 <role_disable+0x29c>
   1ab6e:	2301      	movs	r3, #1
   1ab70:	f04f 0100 	mov.w	r1, #0
   1ab74:	f363 0107 	bfi	r1, r3, #0, #8
   1ab78:	4a0f      	ldr	r2, [pc, #60]	; (1abb8 <role_disable+0x2cc>)
   1ab7a:	4b10      	ldr	r3, [pc, #64]	; (1abbc <role_disable+0x2d0>)
   1ab7c:	481a      	ldr	r0, [pc, #104]	; (1abe8 <role_disable+0x2fc>)
   1ab7e:	1a9b      	subs	r3, r3, r2
   1ab80:	08db      	lsrs	r3, r3, #3
   1ab82:	f363 118f 	bfi	r1, r3, #6, #10
   1ab86:	e6fd      	b.n	1a984 <role_disable+0x98>
		if (_radio.role != ROLE_NONE) {
   1ab88:	7d23      	ldrb	r3, [r4, #20]
   1ab8a:	2b00      	cmp	r3, #0
   1ab8c:	d0a0      	beq.n	1aad0 <role_disable+0x1e4>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   1ab8e:	4b17      	ldr	r3, [pc, #92]	; (1abec <role_disable+0x300>)
   1ab90:	2204      	movs	r2, #4
   1ab92:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1ab94:	2200      	movs	r2, #0
   1ab96:	4611      	mov	r1, r2
   1ab98:	2003      	movs	r0, #3
   1ab9a:	f7fd fd5f 	bl	1865c <mayfly_enqueue>
			LL_ASSERT(!ret);
   1ab9e:	2800      	cmp	r0, #0
   1aba0:	d1a9      	bne.n	1aaf6 <role_disable+0x20a>
			while (_radio.role != ROLE_NONE) {
   1aba2:	7d23      	ldrb	r3, [r4, #20]
   1aba4:	2b00      	cmp	r3, #0
   1aba6:	d093      	beq.n	1aad0 <role_disable+0x1e4>
				cpu_sleep();
   1aba8:	f009 fd04 	bl	245b4 <cpu_sleep>
   1abac:	e7f9      	b.n	1aba2 <role_disable+0x2b6>
   1abae:	bf00      	nop
   1abb0:	20000fb4 	.word	0x20000fb4
   1abb4:	000245bd 	.word	0x000245bd
   1abb8:	00025880 	.word	0x00025880
   1abbc:	000258b0 	.word	0x000258b0
   1abc0:	0002c7b2 	.word	0x0002c7b2
   1abc4:	0002c782 	.word	0x0002c782
   1abc8:	0002c060 	.word	0x0002c060
   1abcc:	0002c7da 	.word	0x0002c7da
   1abd0:	0002c7fb 	.word	0x0002c7fb
   1abd4:	0002c825 	.word	0x0002c825
   1abd8:	200075ec 	.word	0x200075ec
   1abdc:	0002c845 	.word	0x0002c845
   1abe0:	2000767c 	.word	0x2000767c
   1abe4:	0002c85b 	.word	0x0002c85b
   1abe8:	0002c87d 	.word	0x0002c87d
   1abec:	2000761c 	.word	0x2000761c

0001abf0 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1abf0:	2806      	cmp	r0, #6
{
   1abf2:	b510      	push	{r4, lr}
   1abf4:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1abf6:	d90a      	bls.n	1ac0e <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1abf8:	4b09      	ldr	r3, [pc, #36]	; (1ac20 <hdr_conn_get+0x30>)
				(ticker_id -
   1abfa:	1fc2      	subs	r2, r0, #7
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1abfc:	b292      	uxth	r2, r2
   1abfe:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1ac02:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   1ac06:	f009 fb5d 	bl	242c4 <mem_get>
   1ac0a:	6020      	str	r0, [r4, #0]
}
   1ac0c:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   1ac0e:	2805      	cmp	r0, #5
   1ac10:	d004      	beq.n	1ac1c <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   1ac12:	2806      	cmp	r0, #6
		return &_radio.scanner.hdr;
   1ac14:	4803      	ldr	r0, [pc, #12]	; (1ac24 <hdr_conn_get+0x34>)
   1ac16:	bf18      	it	ne
   1ac18:	2000      	movne	r0, #0
   1ac1a:	e7f7      	b.n	1ac0c <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
   1ac1c:	4802      	ldr	r0, [pc, #8]	; (1ac28 <hdr_conn_get+0x38>)
   1ac1e:	e7f5      	b.n	1ac0c <hdr_conn_get+0x1c>
   1ac20:	20000fb4 	.word	0x20000fb4
   1ac24:	20001084 	.word	0x20001084
   1ac28:	20000fcc 	.word	0x20000fcc

0001ac2c <event_active.part.19>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   1ac2c:	b508      	push	{r3, lr}
	LL_ASSERT(!retval);
   1ac2e:	f04f 0100 	mov.w	r1, #0
   1ac32:	2301      	movs	r3, #1
   1ac34:	4a08      	ldr	r2, [pc, #32]	; (1ac58 <event_active.part.19+0x2c>)
   1ac36:	4809      	ldr	r0, [pc, #36]	; (1ac5c <event_active.part.19+0x30>)
   1ac38:	f363 0107 	bfi	r1, r3, #0, #8
   1ac3c:	4b08      	ldr	r3, [pc, #32]	; (1ac60 <event_active.part.19+0x34>)
   1ac3e:	1a9b      	subs	r3, r3, r2
   1ac40:	08db      	lsrs	r3, r3, #3
   1ac42:	f363 118f 	bfi	r1, r3, #6, #10
   1ac46:	f005 ffdd 	bl	20c04 <log_0>
   1ac4a:	4040      	eors	r0, r0
   1ac4c:	f380 8811 	msr	BASEPRI, r0
   1ac50:	f04f 0004 	mov.w	r0, #4
   1ac54:	df02      	svc	2
   1ac56:	bf00      	nop
   1ac58:	00025880 	.word	0x00025880
   1ac5c:	0002c65f 	.word	0x0002c65f
   1ac60:	000258b0 	.word	0x000258b0

0001ac64 <event_stop>:
	s_mfy_radio_stop.param = context;
   1ac64:	4a06      	ldr	r2, [pc, #24]	; (1ac80 <event_stop+0x1c>)
{
   1ac66:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   1ac68:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1ac6a:	4613      	mov	r3, r2
   1ac6c:	2200      	movs	r2, #0
   1ac6e:	4611      	mov	r1, r2
   1ac70:	4610      	mov	r0, r2
   1ac72:	f7fd fcf3 	bl	1865c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1ac76:	b108      	cbz	r0, 1ac7c <event_stop+0x18>
   1ac78:	f7ff ffd8 	bl	1ac2c <event_active.part.19>
}
   1ac7c:	bd08      	pop	{r3, pc}
   1ac7e:	bf00      	nop
   1ac80:	200075fc 	.word	0x200075fc

0001ac84 <event_adv_stop.part.17>:
void event_adv_stop(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
   1ac84:	b508      	push	{r3, lr}
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1ac86:	f04f 0100 	mov.w	r1, #0
   1ac8a:	2301      	movs	r3, #1
   1ac8c:	4a08      	ldr	r2, [pc, #32]	; (1acb0 <event_adv_stop.part.17+0x2c>)
   1ac8e:	4809      	ldr	r0, [pc, #36]	; (1acb4 <event_adv_stop.part.17+0x30>)
   1ac90:	f363 0107 	bfi	r1, r3, #0, #8
   1ac94:	4b08      	ldr	r3, [pc, #32]	; (1acb8 <event_adv_stop.part.17+0x34>)
   1ac96:	1a9b      	subs	r3, r3, r2
   1ac98:	08db      	lsrs	r3, r3, #3
   1ac9a:	f363 118f 	bfi	r1, r3, #6, #10
   1ac9e:	f005 ffb1 	bl	20c04 <log_0>
   1aca2:	4040      	eors	r0, r0
   1aca4:	f380 8811 	msr	BASEPRI, r0
   1aca8:	f04f 0004 	mov.w	r0, #4
   1acac:	df02      	svc	2
   1acae:	bf00      	nop
   1acb0:	00025880 	.word	0x00025880
   1acb4:	0002c1be 	.word	0x0002c1be
   1acb8:	000258b0 	.word	0x000258b0

0001acbc <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1acbc:	2200      	movs	r2, #0
{
   1acbe:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1acc0:	4611      	mov	r1, r2
   1acc2:	4b04      	ldr	r3, [pc, #16]	; (1acd4 <event_active+0x18>)
   1acc4:	4610      	mov	r0, r2
   1acc6:	f7fd fcc9 	bl	1865c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1acca:	b108      	cbz	r0, 1acd0 <event_active+0x14>
   1accc:	f7ff ffae 	bl	1ac2c <event_active.part.19>
}
   1acd0:	bd08      	pop	{r3, pc}
   1acd2:	bf00      	nop
   1acd4:	200075bc 	.word	0x200075bc

0001acd8 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1acd8:	2200      	movs	r2, #0
{
   1acda:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1acdc:	4611      	mov	r1, r2
   1acde:	4b04      	ldr	r3, [pc, #16]	; (1acf0 <event_xtal+0x18>)
   1ace0:	4610      	mov	r0, r2
   1ace2:	f7fd fcbb 	bl	1865c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1ace6:	b108      	cbz	r0, 1acec <event_xtal+0x14>
   1ace8:	f7ff ffa0 	bl	1ac2c <event_active.part.19>
}
   1acec:	bd08      	pop	{r3, pc}
   1acee:	bf00      	nop
   1acf0:	2000762c 	.word	0x2000762c

0001acf4 <mayfly_radio_active>:
{
   1acf4:	b508      	push	{r3, lr}
   1acf6:	4a13      	ldr	r2, [pc, #76]	; (1ad44 <mayfly_radio_active+0x50>)
   1acf8:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
   1acfa:	b138      	cbz	r0, 1ad0c <mayfly_radio_active+0x18>
		if (s_active++) {
   1acfc:	1c59      	adds	r1, r3, #1
   1acfe:	7011      	strb	r1, [r2, #0]
   1ad00:	b9f3      	cbnz	r3, 1ad40 <mayfly_radio_active+0x4c>
		radio_active_callback(1);
   1ad02:	2001      	movs	r0, #1
}
   1ad04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
   1ad08:	f009 be4b 	b.w	249a2 <radio_active_callback>
		LL_ASSERT(s_active);
   1ad0c:	b99b      	cbnz	r3, 1ad36 <mayfly_radio_active+0x42>
   1ad0e:	2301      	movs	r3, #1
   1ad10:	f04f 0100 	mov.w	r1, #0
   1ad14:	4a0c      	ldr	r2, [pc, #48]	; (1ad48 <mayfly_radio_active+0x54>)
   1ad16:	480d      	ldr	r0, [pc, #52]	; (1ad4c <mayfly_radio_active+0x58>)
   1ad18:	f363 0107 	bfi	r1, r3, #0, #8
   1ad1c:	4b0c      	ldr	r3, [pc, #48]	; (1ad50 <mayfly_radio_active+0x5c>)
   1ad1e:	1a9b      	subs	r3, r3, r2
   1ad20:	08db      	lsrs	r3, r3, #3
   1ad22:	f363 118f 	bfi	r1, r3, #6, #10
   1ad26:	f005 ff6d 	bl	20c04 <log_0>
   1ad2a:	4040      	eors	r0, r0
   1ad2c:	f380 8811 	msr	BASEPRI, r0
   1ad30:	f04f 0004 	mov.w	r0, #4
   1ad34:	df02      	svc	2
		if (--s_active) {
   1ad36:	3b01      	subs	r3, #1
   1ad38:	b2db      	uxtb	r3, r3
   1ad3a:	7013      	strb	r3, [r2, #0]
   1ad3c:	2b00      	cmp	r3, #0
   1ad3e:	d0e1      	beq.n	1ad04 <mayfly_radio_active+0x10>
}
   1ad40:	bd08      	pop	{r3, pc}
   1ad42:	bf00      	nop
   1ad44:	20002450 	.word	0x20002450
   1ad48:	00025880 	.word	0x00025880
   1ad4c:	0002c5e4 	.word	0x0002c5e4
   1ad50:	000258b0 	.word	0x000258b0

0001ad54 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
   1ad54:	b2c0      	uxtb	r0, r0
{
   1ad56:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   1ad58:	1f03      	subs	r3, r0, #4
   1ad5a:	2b01      	cmp	r3, #1
   1ad5c:	d913      	bls.n	1ad86 <mayfly_radio_stop+0x32>
   1ad5e:	2301      	movs	r3, #1
   1ad60:	f04f 0100 	mov.w	r1, #0
   1ad64:	4a10      	ldr	r2, [pc, #64]	; (1ada8 <mayfly_radio_stop+0x54>)
   1ad66:	4811      	ldr	r0, [pc, #68]	; (1adac <mayfly_radio_stop+0x58>)
   1ad68:	f363 0107 	bfi	r1, r3, #0, #8
   1ad6c:	4b10      	ldr	r3, [pc, #64]	; (1adb0 <mayfly_radio_stop+0x5c>)
   1ad6e:	1a9b      	subs	r3, r3, r2
   1ad70:	08db      	lsrs	r3, r3, #3
   1ad72:	f363 118f 	bfi	r1, r3, #6, #10
   1ad76:	f005 ff45 	bl	20c04 <log_0>
   1ad7a:	4040      	eors	r0, r0
   1ad7c:	f380 8811 	msr	BASEPRI, r0
   1ad80:	f04f 0004 	mov.w	r0, #4
   1ad84:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
   1ad86:	4a0b      	ldr	r2, [pc, #44]	; (1adb4 <mayfly_radio_stop+0x60>)
   1ad88:	7d53      	ldrb	r3, [r2, #21]
		      (_radio.state != STATE_STOP) &&
   1ad8a:	b13b      	cbz	r3, 1ad9c <mayfly_radio_stop+0x48>
	radio_used = ((_radio.state != STATE_NONE) &&
   1ad8c:	3b04      	subs	r3, #4
   1ad8e:	2b01      	cmp	r3, #1
   1ad90:	d904      	bls.n	1ad9c <mayfly_radio_stop+0x48>
			_radio.state = state;
   1ad92:	7550      	strb	r0, [r2, #21]
}
   1ad94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
   1ad98:	f002 b8de 	b.w	1cf58 <radio_disable>
	if (radio_used || !radio_is_idle()) {
   1ad9c:	f002 f90e 	bl	1cfbc <radio_is_idle>
   1ada0:	2800      	cmp	r0, #0
   1ada2:	d0f7      	beq.n	1ad94 <mayfly_radio_stop+0x40>
}
   1ada4:	bd08      	pop	{r3, pc}
   1ada6:	bf00      	nop
   1ada8:	00025880 	.word	0x00025880
   1adac:	0002c5fe 	.word	0x0002c5fe
   1adb0:	000258b0 	.word	0x000258b0
   1adb4:	20000fb4 	.word	0x20000fb4

0001adb8 <pdu_node_tx_release>:
{
   1adb8:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   1adba:	4a19      	ldr	r2, [pc, #100]	; (1ae20 <pdu_node_tx_release+0x68>)
   1adbc:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	if (last == _radio.packet_tx_count) {
   1adc0:	f892 416c 	ldrb.w	r4, [r2, #364]	; 0x16c
	last = _radio.packet_release_last + 1;
   1adc4:	3301      	adds	r3, #1
   1adc6:	b2db      	uxtb	r3, r3
		last = 0U;
   1adc8:	429c      	cmp	r4, r3
   1adca:	bf08      	it	eq
   1adcc:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
   1adce:	f892 416f 	ldrb.w	r4, [r2, #367]	; 0x16f
   1add2:	429c      	cmp	r4, r3
   1add4:	d113      	bne.n	1adfe <pdu_node_tx_release+0x46>
   1add6:	2301      	movs	r3, #1
   1add8:	f04f 0100 	mov.w	r1, #0
   1addc:	4a11      	ldr	r2, [pc, #68]	; (1ae24 <pdu_node_tx_release+0x6c>)
   1adde:	4812      	ldr	r0, [pc, #72]	; (1ae28 <pdu_node_tx_release+0x70>)
   1ade0:	f363 0107 	bfi	r1, r3, #0, #8
   1ade4:	4b11      	ldr	r3, [pc, #68]	; (1ae2c <pdu_node_tx_release+0x74>)
   1ade6:	1a9b      	subs	r3, r3, r2
   1ade8:	08db      	lsrs	r3, r3, #3
   1adea:	f363 118f 	bfi	r1, r3, #6, #10
   1adee:	f005 ff09 	bl	20c04 <log_0>
   1adf2:	4040      	eors	r0, r0
   1adf4:	f380 8811 	msr	BASEPRI, r0
   1adf8:	f04f 0004 	mov.w	r0, #4
   1adfc:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   1adfe:	f892 5170 	ldrb.w	r5, [r2, #368]	; 0x170
   1ae02:	f8d2 4168 	ldr.w	r4, [r2, #360]	; 0x168
   1ae06:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   1ae0a:	f892 0170 	ldrb.w	r0, [r2, #368]	; 0x170
   1ae0e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   1ae12:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
   1ae14:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
}
   1ae18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
   1ae1c:	f001 bc52 	b.w	1c6c4 <radio_event_callback>
   1ae20:	20000fb4 	.word	0x20000fb4
   1ae24:	00025880 	.word	0x00025880
   1ae28:	0002c722 	.word	0x0002c722
   1ae2c:	000258b0 	.word	0x000258b0

0001ae30 <packet_tx_enqueue>:
{
   1ae30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1ae34:	4d25      	ldr	r5, [pc, #148]	; (1aecc <packet_tx_enqueue+0x9c>)
{
   1ae36:	4606      	mov	r6, r0
   1ae38:	46a8      	mov	r8, r5
		node_tx_new->next = NULL;
   1ae3a:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1ae3c:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
   1ae40:	f895 216e 	ldrb.w	r2, [r5, #366]	; 0x16e
   1ae44:	429a      	cmp	r2, r3
   1ae46:	d036      	beq.n	1aeb6 <packet_tx_enqueue+0x86>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   1ae48:	f895 916d 	ldrb.w	r9, [r5, #365]	; 0x16d
   1ae4c:	f8d5 a164 	ldr.w	sl, [r5, #356]	; 0x164
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1ae50:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   1ae54:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   1ae58:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1ae5c:	f44f 7196 	mov.w	r1, #300	; 0x12c
		node_tx_new = pdu_data_q_tx->node_tx;
   1ae60:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
   1ae62:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1ae64:	f009 fa2e 	bl	242c4 <mem_get>
   1ae68:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
   1ae6a:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
   1ae6e:	8c1a      	ldrh	r2, [r3, #32]
   1ae70:	4282      	cmp	r2, r0
   1ae72:	d122      	bne.n	1aeba <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
   1ae74:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1ae78:	b942      	cbnz	r2, 1ae8c <packet_tx_enqueue+0x5c>
				if (conn->pkt_tx_head == 0) {
   1ae7a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
				conn->pkt_tx_data = node_tx_new;
   1ae7e:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
				if (conn->pkt_tx_head == 0) {
   1ae82:	b91a      	cbnz	r2, 1ae8c <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
   1ae84:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
					conn->pkt_tx_last = NULL;
   1ae88:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			if (conn->pkt_tx_last) {
   1ae8c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1ae90:	b102      	cbz	r2, 1ae94 <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
   1ae92:	6014      	str	r4, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
   1ae94:	f8c3 4124 	str.w	r4, [r3, #292]	; 0x124
		first = _radio.packet_tx_first + 1;
   1ae98:	f898 316d 	ldrb.w	r3, [r8, #365]	; 0x16d
		if (first == _radio.packet_tx_count) {
   1ae9c:	f898 216c 	ldrb.w	r2, [r8, #364]	; 0x16c
		first = _radio.packet_tx_first + 1;
   1aea0:	3301      	adds	r3, #1
   1aea2:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   1aea4:	3e01      	subs	r6, #1
			first = 0U;
   1aea6:	429a      	cmp	r2, r3
   1aea8:	bf08      	it	eq
   1aeaa:	2300      	moveq	r3, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1aeac:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		_radio.packet_tx_first = first;
   1aeb0:	f888 316d 	strb.w	r3, [r8, #365]	; 0x16d
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1aeb4:	d1c2      	bne.n	1ae3c <packet_tx_enqueue+0xc>
}
   1aeb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   1aeba:	7923      	ldrb	r3, [r4, #4]
   1aebc:	f367 0301 	bfi	r3, r7, #0, #2
   1aec0:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   1aec2:	4621      	mov	r1, r4
   1aec4:	f7ff ff78 	bl	1adb8 <pdu_node_tx_release>
   1aec8:	e7e6      	b.n	1ae98 <packet_tx_enqueue+0x68>
   1aeca:	bf00      	nop
   1aecc:	20000fb4 	.word	0x20000fb4

0001aed0 <connection_release>:
{
   1aed0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1aed2:	2201      	movs	r2, #1
{
   1aed4:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1aed6:	4611      	mov	r1, r2
   1aed8:	2000      	movs	r0, #0
   1aeda:	f7fd fb97 	bl	1860c <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   1aede:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1aee2:	2100      	movs	r1, #0
   1aee4:	f242 43e3 	movw	r3, #9443	; 0x24e3
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   1aee8:	3207      	adds	r2, #7
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1aeea:	9300      	str	r3, [sp, #0]
   1aeec:	4608      	mov	r0, r1
   1aeee:	4b3e      	ldr	r3, [pc, #248]	; (1afe8 <connection_release+0x118>)
   1aef0:	b2d2      	uxtb	r2, r2
   1aef2:	f7fe f963 	bl	191bc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1aef6:	f030 0102 	bics.w	r1, r0, #2
   1aefa:	d013      	beq.n	1af24 <connection_release+0x54>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1aefc:	2301      	movs	r3, #1
   1aefe:	f04f 0100 	mov.w	r1, #0
   1af02:	4a3a      	ldr	r2, [pc, #232]	; (1afec <connection_release+0x11c>)
   1af04:	483a      	ldr	r0, [pc, #232]	; (1aff0 <connection_release+0x120>)
   1af06:	f363 0107 	bfi	r1, r3, #0, #8
   1af0a:	4b3a      	ldr	r3, [pc, #232]	; (1aff4 <connection_release+0x124>)
   1af0c:	1a9b      	subs	r3, r3, r2
   1af0e:	08db      	lsrs	r3, r3, #3
   1af10:	f363 118f 	bfi	r1, r3, #6, #10
   1af14:	f005 fe76 	bl	20c04 <log_0>
   1af18:	4040      	eors	r0, r0
   1af1a:	f380 8811 	msr	BASEPRI, r0
   1af1e:	f04f 0004 	mov.w	r0, #4
   1af22:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
   1af24:	4b34      	ldr	r3, [pc, #208]	; (1aff8 <connection_release+0x128>)
   1af26:	7d5a      	ldrb	r2, [r3, #21]
   1af28:	2a05      	cmp	r2, #5
   1af2a:	461d      	mov	r5, r3
   1af2c:	d11b      	bne.n	1af66 <connection_release+0x96>
					  conn->handle))) {
   1af2e:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   1af30:	7c18      	ldrb	r0, [r3, #16]
   1af32:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
   1af34:	4290      	cmp	r0, r2
   1af36:	d116      	bne.n	1af66 <connection_release+0x96>
		_radio.ticker_id_prepare = 0U;
   1af38:	7419      	strb	r1, [r3, #16]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1af3a:	f242 43f4 	movw	r3, #9460	; 0x24f4
   1af3e:	9300      	str	r3, [sp, #0]
   1af40:	2201      	movs	r2, #1
   1af42:	4b29      	ldr	r3, [pc, #164]	; (1afe8 <connection_release+0x118>)
   1af44:	4608      	mov	r0, r1
   1af46:	f7fe f939 	bl	191bc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1af4a:	f030 0202 	bics.w	r2, r0, #2
   1af4e:	d1d5      	bne.n	1aefc <connection_release+0x2c>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1af50:	f242 43fb 	movw	r3, #9467	; 0x24fb
   1af54:	9300      	str	r3, [sp, #0]
   1af56:	4611      	mov	r1, r2
   1af58:	4b23      	ldr	r3, [pc, #140]	; (1afe8 <connection_release+0x118>)
   1af5a:	4610      	mov	r0, r2
   1af5c:	f7fe f92e 	bl	191bc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1af60:	f030 0302 	bics.w	r3, r0, #2
   1af64:	d1ca      	bne.n	1aefc <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   1af66:	e9d4 1345 	ldrd	r1, r3, [r4, #276]	; 0x114
   1af6a:	4299      	cmp	r1, r3
   1af6c:	d003      	beq.n	1af76 <connection_release+0xa6>
   1af6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1af72:	4299      	cmp	r1, r3
   1af74:	d101      	bne.n	1af7a <connection_release+0xaa>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1af76:	4e21      	ldr	r6, [pc, #132]	; (1affc <connection_release+0x12c>)
   1af78:	e010      	b.n	1af9c <connection_release+0xcc>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   1af7a:	790b      	ldrb	r3, [r1, #4]
   1af7c:	f36f 0301 	bfc	r3, #0, #2
   1af80:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1af82:	680b      	ldr	r3, [r1, #0]
   1af84:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		pdu_node_tx_release(conn->handle, node_tx);
   1af88:	8c20      	ldrh	r0, [r4, #32]
   1af8a:	f7ff ff15 	bl	1adb8 <pdu_node_tx_release>
   1af8e:	e7ea      	b.n	1af66 <connection_release+0x96>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1af90:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1af92:	4631      	mov	r1, r6
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   1af94:	e9c4 3345 	strd	r3, r3, [r4, #276]	; 0x114
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1af98:	f009 f97f 	bl	2429a <mem_release>
	while ((conn->pkt_tx_head) &&
   1af9c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1afa0:	b118      	cbz	r0, 1afaa <connection_release+0xda>
   1afa2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1afa6:	4298      	cmp	r0, r3
   1afa8:	d1f2      	bne.n	1af90 <connection_release+0xc0>
	conn->pkt_tx_ctrl = NULL;
   1afaa:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
   1afac:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
	while (conn->pkt_tx_head) {
   1afb0:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   1afb4:	b951      	cbnz	r1, 1afcc <connection_release+0xfc>
	conn->handle = 0xffff;
   1afb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1afba:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   1afbc:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
   1afc0:	42a3      	cmp	r3, r4
		_radio.conn_upd = NULL;
   1afc2:	bf08      	it	eq
   1afc4:	f8c5 1180 	streq.w	r1, [r5, #384]	; 0x180
}
   1afc8:	b002      	add	sp, #8
   1afca:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   1afcc:	790b      	ldrb	r3, [r1, #4]
   1afce:	f36f 0301 	bfc	r3, #0, #2
   1afd2:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1afd4:	680b      	ldr	r3, [r1, #0]
   1afd6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		conn->pkt_tx_data = conn->pkt_tx_head;
   1afda:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		pdu_node_tx_release(conn->handle, node_tx);
   1afde:	8c20      	ldrh	r0, [r4, #32]
   1afe0:	f7ff feea 	bl	1adb8 <pdu_node_tx_release>
   1afe4:	e7e4      	b.n	1afb0 <connection_release+0xe0>
   1afe6:	bf00      	nop
   1afe8:	00024621 	.word	0x00024621
   1afec:	00025880 	.word	0x00025880
   1aff0:	0002c1be 	.word	0x0002c1be
   1aff4:	000258b0 	.word	0x000258b0
   1aff8:	20000fb4 	.word	0x20000fb4
   1affc:	20001108 	.word	0x20001108

0001b000 <adv_setup>:
{
   1b000:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   1b002:	4c29      	ldr	r4, [pc, #164]	; (1b0a8 <adv_setup+0xa8>)
   1b004:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1b008:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
   1b00c:	429a      	cmp	r2, r3
   1b00e:	d006      	beq.n	1b01e <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
   1b010:	3301      	adds	r3, #1
   1b012:	b2db      	uxtb	r3, r3
			first = 0U;
   1b014:	2b02      	cmp	r3, #2
   1b016:	bf08      	it	eq
   1b018:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
   1b01a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (_radio.advertiser.scan_data.first != _radio.
   1b01e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1b022:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
   1b026:	429a      	cmp	r2, r3
   1b028:	d006      	beq.n	1b038 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
   1b02a:	3301      	adds	r3, #1
   1b02c:	b2db      	uxtb	r3, r3
			first = 0U;
   1b02e:	2b02      	cmp	r3, #2
   1b030:	bf08      	it	eq
   1b032:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
   1b034:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	pdu = (void *)_radio.advertiser.adv_data.data
   1b038:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1b03c:	232a      	movs	r3, #42	; 0x2a
   1b03e:	2527      	movs	r5, #39	; 0x27
   1b040:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
   1b044:	1960      	adds	r0, r4, r5
   1b046:	f001 ff75 	bl	1cf34 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1b04a:	5d63      	ldrb	r3, [r4, r5]
   1b04c:	f003 030f 	and.w	r3, r3, #15
   1b050:	2b02      	cmp	r3, #2
   1b052:	d020      	beq.n	1b096 <adv_setup+0x96>
		_radio.state = STATE_TX;
   1b054:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
   1b056:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   1b058:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
   1b05a:	f002 f86b 	bl	1d134 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1b05e:	2000      	movs	r0, #0
   1b060:	f001 ffd4 	bl	1d00c <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
   1b064:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1b068:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1b06c:	b2da      	uxtb	r2, r3
	while ((bitmap & 0x01) == 0) {
   1b06e:	2000      	movs	r0, #0
   1b070:	07d5      	lsls	r5, r2, #31
   1b072:	f100 0101 	add.w	r1, r0, #1
   1b076:	d513      	bpl.n	1b0a0 <adv_setup+0xa0>
	_radio.advertiser.chan_map_current &=
   1b078:	b25b      	sxtb	r3, r3
		(_radio.advertiser.chan_map_current - 1);
   1b07a:	1e5a      	subs	r2, r3, #1
	_radio.advertiser.chan_map_current &=
   1b07c:	4013      	ands	r3, r2
   1b07e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   1b082:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
   1b084:	f363 0202 	bfi	r2, r3, #0, #3
   1b088:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   1b08c:	3025      	adds	r0, #37	; 0x25
}
   1b08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
   1b092:	f009 baee 	b.w	24672 <chan_set>
		_radio.state = STATE_CLOSE;
   1b096:	2303      	movs	r3, #3
   1b098:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
   1b09a:	f001 ffcd 	bl	1d038 <radio_switch_complete_and_disable>
   1b09e:	e7e1      	b.n	1b064 <adv_setup+0x64>
		bitmap >>= 1;
   1b0a0:	0852      	lsrs	r2, r2, #1
   1b0a2:	4608      	mov	r0, r1
   1b0a4:	e7e4      	b.n	1b070 <adv_setup+0x70>
   1b0a6:	bf00      	nop
   1b0a8:	20000fb4 	.word	0x20000fb4

0001b0ac <mayfly_adv_stop>:
{
   1b0ac:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
   1b0ae:	2001      	movs	r0, #1
   1b0b0:	f7ff f9e6 	bl	1a480 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
   1b0b4:	4604      	mov	r4, r0
   1b0b6:	b998      	cbnz	r0, 1b0e0 <mayfly_adv_stop+0x34>
   1b0b8:	2301      	movs	r3, #1
   1b0ba:	f04f 0100 	mov.w	r1, #0
   1b0be:	4a10      	ldr	r2, [pc, #64]	; (1b100 <mayfly_adv_stop+0x54>)
   1b0c0:	4810      	ldr	r0, [pc, #64]	; (1b104 <mayfly_adv_stop+0x58>)
   1b0c2:	f363 0107 	bfi	r1, r3, #0, #8
   1b0c6:	4b10      	ldr	r3, [pc, #64]	; (1b108 <mayfly_adv_stop+0x5c>)
   1b0c8:	1a9b      	subs	r3, r3, r2
   1b0ca:	08db      	lsrs	r3, r3, #3
   1b0cc:	f363 118f 	bfi	r1, r3, #6, #10
   1b0d0:	f005 fd98 	bl	20c04 <log_0>
   1b0d4:	4040      	eors	r0, r0
   1b0d6:	f380 8811 	msr	BASEPRI, r0
   1b0da:	f04f 0004 	mov.w	r0, #4
   1b0de:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
   1b0e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b0e4:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1b0e6:	2308      	movs	r3, #8
   1b0e8:	7103      	strb	r3, [r0, #4]
	(void)memset(radio_le_conn_cmplt, 0x00,
   1b0ea:	2212      	movs	r2, #18
   1b0ec:	4418      	add	r0, r3
   1b0ee:	2100      	movs	r1, #0
   1b0f0:	f006 fef3 	bl	21eda <memset>
	radio_le_conn_cmplt->status = BT_HCI_ERR_ADV_TIMEOUT;
   1b0f4:	233c      	movs	r3, #60	; 0x3c
   1b0f6:	7223      	strb	r3, [r4, #8]
}
   1b0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
   1b0fc:	f7ff ba7e 	b.w	1a5fc <packet_rx_enqueue>
   1b100:	00025880 	.word	0x00025880
   1b104:	0002c5cb 	.word	0x0002c5cb
   1b108:	000258b0 	.word	0x000258b0

0001b10c <terminate_ind_rx_enqueue>:
{
   1b10c:	4603      	mov	r3, r0
   1b10e:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   1b110:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.link);
   1b114:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
{
   1b118:	b510      	push	{r4, lr}
	LL_ASSERT(node_rx->hdr.link);
   1b11a:	b998      	cbnz	r0, 1b144 <terminate_ind_rx_enqueue+0x38>
   1b11c:	2301      	movs	r3, #1
   1b11e:	f04f 0100 	mov.w	r1, #0
   1b122:	f363 0107 	bfi	r1, r3, #0, #8
   1b126:	4a19      	ldr	r2, [pc, #100]	; (1b18c <terminate_ind_rx_enqueue+0x80>)
   1b128:	4b19      	ldr	r3, [pc, #100]	; (1b190 <terminate_ind_rx_enqueue+0x84>)
   1b12a:	481a      	ldr	r0, [pc, #104]	; (1b194 <terminate_ind_rx_enqueue+0x88>)
   1b12c:	1a9b      	subs	r3, r3, r2
   1b12e:	08db      	lsrs	r3, r3, #3
   1b130:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(link);
   1b134:	f005 fd66 	bl	20c04 <log_0>
   1b138:	4040      	eors	r0, r0
   1b13a:	f380 8811 	msr	BASEPRI, r0
   1b13e:	f04f 0004 	mov.w	r0, #4
   1b142:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
   1b144:	8c1c      	ldrh	r4, [r3, #32]
   1b146:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
   1b14a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1b14e:	2409      	movs	r4, #9
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   1b150:	4a11      	ldr	r2, [pc, #68]	; (1b198 <terminate_ind_rx_enqueue+0x8c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1b152:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   1b156:	f892 4170 	ldrb.w	r4, [r2, #368]	; 0x170
   1b15a:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   1b15e:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   1b162:	f009 f8c9 	bl	242f8 <memq_enqueue>
	LL_ASSERT(link);
   1b166:	b960      	cbnz	r0, 1b182 <terminate_ind_rx_enqueue+0x76>
   1b168:	2301      	movs	r3, #1
   1b16a:	f04f 0100 	mov.w	r1, #0
   1b16e:	f363 0107 	bfi	r1, r3, #0, #8
   1b172:	4a06      	ldr	r2, [pc, #24]	; (1b18c <terminate_ind_rx_enqueue+0x80>)
   1b174:	4b06      	ldr	r3, [pc, #24]	; (1b190 <terminate_ind_rx_enqueue+0x84>)
   1b176:	4809      	ldr	r0, [pc, #36]	; (1b19c <terminate_ind_rx_enqueue+0x90>)
   1b178:	1a9b      	subs	r3, r3, r2
   1b17a:	08db      	lsrs	r3, r3, #3
   1b17c:	f363 118f 	bfi	r1, r3, #6, #10
   1b180:	e7d8      	b.n	1b134 <terminate_ind_rx_enqueue+0x28>
}
   1b182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   1b186:	f001 ba9d 	b.w	1c6c4 <radio_event_callback>
   1b18a:	bf00      	nop
   1b18c:	00025880 	.word	0x00025880
   1b190:	000258b0 	.word	0x000258b0
   1b194:	0002c8c9 	.word	0x0002c8c9
   1b198:	20000fb4 	.word	0x20000fb4
   1b19c:	0002c70c 	.word	0x0002c70c

0001b1a0 <prepare_normal_set>:
{
   1b1a0:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   1b1a2:	6804      	ldr	r4, [r0, #0]
   1b1a4:	2c00      	cmp	r4, #0
{
   1b1a6:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   1b1a8:	da19      	bge.n	1b1de <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
   1b1aa:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   1b1ae:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   1b1b2:	429d      	cmp	r5, r3
   1b1b4:	bf38      	it	cc
   1b1b6:	1ae4      	subcc	r4, r4, r3
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b1b8:	4b0a      	ldr	r3, [pc, #40]	; (1b1e4 <prepare_normal_set+0x44>)
   1b1ba:	9305      	str	r3, [sp, #20]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   1b1bc:	bf28      	it	cs
   1b1be:	1b64      	subcs	r4, r4, r5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b1c0:	2300      	movs	r3, #0
   1b1c2:	9006      	str	r0, [sp, #24]
   1b1c4:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1b1c8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b1cc:	4618      	mov	r0, r3
   1b1ce:	9400      	str	r4, [sp, #0]
   1b1d0:	f7fd ffac 	bl	1912c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1b1d4:	f030 0302 	bics.w	r3, r0, #2
   1b1d8:	d001      	beq.n	1b1de <prepare_normal_set+0x3e>
   1b1da:	f7ff fd53 	bl	1ac84 <event_adv_stop.part.17>
}
   1b1de:	b009      	add	sp, #36	; 0x24
   1b1e0:	bd30      	pop	{r4, r5, pc}
   1b1e2:	bf00      	nop
   1b1e4:	000245cd 	.word	0x000245cd

0001b1e8 <event_slave>:
{
   1b1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   1b1ec:	4d81      	ldr	r5, [pc, #516]	; (1b3f4 <event_slave+0x20c>)
{
   1b1ee:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   1b1f0:	7d2b      	ldrb	r3, [r5, #20]
{
   1b1f2:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   1b1f4:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   1b1f8:	462f      	mov	r7, r5
   1b1fa:	b19b      	cbz	r3, 1b224 <event_slave+0x3c>
   1b1fc:	2301      	movs	r3, #1
   1b1fe:	f04f 0100 	mov.w	r1, #0
   1b202:	f363 0107 	bfi	r1, r3, #0, #8
   1b206:	4a7c      	ldr	r2, [pc, #496]	; (1b3f8 <event_slave+0x210>)
   1b208:	4b7c      	ldr	r3, [pc, #496]	; (1b3fc <event_slave+0x214>)
   1b20a:	487d      	ldr	r0, [pc, #500]	; (1b400 <event_slave+0x218>)
   1b20c:	1a9b      	subs	r3, r3, r2
   1b20e:	08db      	lsrs	r3, r3, #3
   1b210:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(_radio.ticker_id_prepare ==
   1b214:	f005 fcf6 	bl	20c04 <log_0>
   1b218:	4040      	eors	r0, r0
   1b21a:	f380 8811 	msr	BASEPRI, r0
   1b21e:	f04f 0004 	mov.w	r0, #4
   1b222:	df02      	svc	2
   1b224:	7c2a      	ldrb	r2, [r5, #16]
   1b226:	8c23      	ldrh	r3, [r4, #32]
   1b228:	b2d2      	uxtb	r2, r2
   1b22a:	3307      	adds	r3, #7
   1b22c:	429a      	cmp	r2, r3
   1b22e:	d00c      	beq.n	1b24a <event_slave+0x62>
   1b230:	2301      	movs	r3, #1
   1b232:	f04f 0100 	mov.w	r1, #0
   1b236:	f363 0107 	bfi	r1, r3, #0, #8
   1b23a:	4a6f      	ldr	r2, [pc, #444]	; (1b3f8 <event_slave+0x210>)
   1b23c:	4b6f      	ldr	r3, [pc, #444]	; (1b3fc <event_slave+0x214>)
   1b23e:	4871      	ldr	r0, [pc, #452]	; (1b404 <event_slave+0x21c>)
   1b240:	1a9b      	subs	r3, r3, r2
   1b242:	08db      	lsrs	r3, r3, #3
   1b244:	f363 118f 	bfi	r1, r3, #6, #10
   1b248:	e7e4      	b.n	1b214 <event_slave+0x2c>
	_radio.role = ROLE_SLAVE;
   1b24a:	2303      	movs	r3, #3
   1b24c:	752b      	strb	r3, [r5, #20]
	_radio.packet_counter = 0U;
   1b24e:	f8a5 8118 	strh.w	r8, [r5, #280]	; 0x118
	_radio.state = STATE_RX;
   1b252:	2301      	movs	r3, #1
   1b254:	756b      	strb	r3, [r5, #21]
	conn->latency_event = conn->latency_prepare;
   1b256:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   1b258:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   1b25c:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
   1b25e:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0U;
   1b260:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
	_radio.ticker_id_prepare = 0U;
   1b264:	f885 8010 	strb.w	r8, [r5, #16]
	_radio.ticks_anchor = ticks_at_expire;
   1b268:	60a8      	str	r0, [r5, #8]
	_radio.ticker_id_event =
   1b26a:	746a      	strb	r2, [r5, #17]
	adv_scan_conn_configure();
   1b26c:	f7ff f9b8 	bl	1a5e0 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   1b270:	f104 0010 	add.w	r0, r4, #16
   1b274:	f001 fe14 	bl	1cea0 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   1b278:	7d62      	ldrb	r2, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   1b27a:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   1b27c:	0212      	lsls	r2, r2, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   1b27e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   1b282:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b284:	f240 605b 	movw	r0, #1627	; 0x65b
   1b288:	4311      	orrs	r1, r2
   1b28a:	f001 fea1 	bl	1cfd0 <radio_crc_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   1b28e:	2096      	movs	r0, #150	; 0x96
   1b290:	f001 ff50 	bl	1d134 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b294:	4643      	mov	r3, r8
   1b296:	4642      	mov	r2, r8
   1b298:	4641      	mov	r1, r8
   1b29a:	4640      	mov	r0, r8
   1b29c:	f001 fec2 	bl	1d024 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1b2a0:	f895 2139 	ldrb.w	r2, [r5, #313]	; 0x139
   1b2a4:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   1b2a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   1b2ac:	4620      	mov	r0, r4
   1b2ae:	3108      	adds	r1, #8
   1b2b0:	f009 f9be 	bl	24630 <rx_packet_set>
	if (conn->data_chan_sel) {
   1b2b4:	7f63      	ldrb	r3, [r4, #29]
   1b2b6:	065a      	lsls	r2, r3, #25
   1b2b8:	d50c      	bpl.n	1b2d4 <event_slave+0xec>
		LL_ASSERT(0);
   1b2ba:	2301      	movs	r3, #1
   1b2bc:	f04f 0100 	mov.w	r1, #0
   1b2c0:	f363 0107 	bfi	r1, r3, #0, #8
   1b2c4:	4a4c      	ldr	r2, [pc, #304]	; (1b3f8 <event_slave+0x210>)
   1b2c6:	4b4d      	ldr	r3, [pc, #308]	; (1b3fc <event_slave+0x214>)
   1b2c8:	484f      	ldr	r0, [pc, #316]	; (1b408 <event_slave+0x220>)
   1b2ca:	1a9b      	subs	r3, r3, r2
   1b2cc:	08db      	lsrs	r3, r3, #3
   1b2ce:	f363 118f 	bfi	r1, r3, #6, #10
   1b2d2:	e79f      	b.n	1b214 <event_slave+0x2c>
					   conn->data_chan_count);
   1b2d4:	f003 053f 	and.w	r5, r3, #63	; 0x3f
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1b2d8:	7fa2      	ldrb	r2, [r4, #30]
   1b2da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1b2dc:	fb03 2202 	mla	r2, r3, r2, r2
   1b2e0:	7fe3      	ldrb	r3, [r4, #31]
   1b2e2:	441a      	add	r2, r3
   1b2e4:	2325      	movs	r3, #37	; 0x25
   1b2e6:	fbb2 f1f3 	udiv	r1, r2, r3
   1b2ea:	fb03 2111 	mls	r1, r3, r1, r2
   1b2ee:	b2c8      	uxtb	r0, r1
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1b2f0:	eb04 03d0 	add.w	r3, r4, r0, lsr #3
	*chan_use = chan_next;
   1b2f4:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1b2f6:	7dda      	ldrb	r2, [r3, #23]
   1b2f8:	f001 0107 	and.w	r1, r1, #7
   1b2fc:	410a      	asrs	r2, r1
   1b2fe:	f012 0201 	ands.w	r2, r2, #1
   1b302:	d10b      	bne.n	1b31c <event_slave+0x134>
		chan_index = chan_next % chan_count;
   1b304:	fbb0 f3f5 	udiv	r3, r0, r5
   1b308:	fb05 0313 	mls	r3, r5, r3, r0
   1b30c:	b2db      	uxtb	r3, r3
	while (byte_count--) {
   1b30e:	f104 0516 	add.w	r5, r4, #22
   1b312:	f104 0e1b 	add.w	lr, r4, #27
	chan_next = 0U;
   1b316:	4610      	mov	r0, r2
	while (byte_count--) {
   1b318:	45ae      	cmp	lr, r5
   1b31a:	d141      	bne.n	1b3a0 <event_slave+0x1b8>
	chan_set(data_chan_use);
   1b31c:	f009 f9a9 	bl	24672 <chan_set>
	conn->slave.window_widening_event_us +=
   1b320:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1b324:	4413      	add	r3, r2
	    conn->slave.window_widening_max_us) {
   1b326:	6c22      	ldr	r2, [r4, #64]	; 0x40
		conn->slave.window_widening_event_us =
   1b328:	429a      	cmp	r2, r3
   1b32a:	bf94      	ite	ls
   1b32c:	64a2      	strls	r2, [r4, #72]	; 0x48
   1b32e:	64a3      	strhi	r3, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
   1b330:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
	conn->slave.window_widening_prepare_us = 0U;
   1b334:	2500      	movs	r5, #0
	conn->slave.window_size_event_us +=
   1b336:	4413      	add	r3, r2
	conn->slave.window_size_prepare_us = 0U;
   1b338:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   1b33c:	68fa      	ldr	r2, [r7, #12]
	conn->slave.window_widening_prepare_us = 0U;
   1b33e:	6465      	str	r5, [r4, #68]	; 0x44
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   1b340:	f106 0109 	add.w	r1, r6, #9
   1b344:	4628      	mov	r0, r5
   1b346:	f001 ff01 	bl	1d14c <radio_tmr_start>
   1b34a:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   1b34c:	f001 ff8e 	bl	1d26c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1b350:	4628      	mov	r0, r5
   1b352:	f001 ffa5 	bl	1d2a0 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   1b356:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
   1b358:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b35a:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
   1b35c:	4629      	mov	r1, r5
   1b35e:	4628      	mov	r0, r5
   1b360:	eb03 0942 	add.w	r9, r3, r2, lsl #1
   1b364:	f009 fc11 	bl	24b8a <radio_rx_ready_delay_get>
	switch (phy) {
   1b368:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
   1b36a:	4629      	mov	r1, r5
   1b36c:	4480      	add	r8, r0
   1b36e:	4628      	mov	r0, r5
   1b370:	f009 fc0d 	bl	24b8e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1b374:	4440      	add	r0, r8
   1b376:	f001 ff6d 	bl	1d254 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   1b37a:	f894 1020 	ldrb.w	r1, [r4, #32]
   1b37e:	3107      	adds	r1, #7
   1b380:	4632      	mov	r2, r6
   1b382:	b2c9      	uxtb	r1, r1
   1b384:	4620      	mov	r0, r4
   1b386:	f009 f9b7 	bl	246f8 <preempt_calc>
   1b38a:	4603      	mov	r3, r0
   1b38c:	b1f0      	cbz	r0, 1b3cc <event_slave+0x1e4>
		_radio.state = STATE_STOP;
   1b38e:	2304      	movs	r3, #4
   1b390:	757b      	strb	r3, [r7, #21]
		radio_disable();
   1b392:	f001 fde1 	bl	1cf58 <radio_disable>
	packet_tx_enqueue(2);
   1b396:	2002      	movs	r0, #2
}
   1b398:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
   1b39c:	f7ff bd48 	b.w	1ae30 <packet_tx_enqueue>
		bite = *chan_map;
   1b3a0:	f100 0108 	add.w	r1, r0, #8
   1b3a4:	f815 cf01 	ldrb.w	ip, [r5, #1]!
		while (bit_count--) {
   1b3a8:	b2c9      	uxtb	r1, r1
		bite = *chan_map;
   1b3aa:	4602      	mov	r2, r0
		while (bit_count--) {
   1b3ac:	428a      	cmp	r2, r1
   1b3ae:	4608      	mov	r0, r1
   1b3b0:	d0b2      	beq.n	1b318 <event_slave+0x130>
			if (bite & 0x01) {
   1b3b2:	f01c 0f01 	tst.w	ip, #1
   1b3b6:	d002      	beq.n	1b3be <event_slave+0x1d6>
				if (chan_index == 0) {
   1b3b8:	b133      	cbz	r3, 1b3c8 <event_slave+0x1e0>
				chan_index--;
   1b3ba:	3b01      	subs	r3, #1
   1b3bc:	b2db      	uxtb	r3, r3
			chan_next++;
   1b3be:	3201      	adds	r2, #1
   1b3c0:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   1b3c2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1b3c6:	e7f1      	b.n	1b3ac <event_slave+0x1c4>
				if (chan_index == 0) {
   1b3c8:	4610      	mov	r0, r2
   1b3ca:	e7a7      	b.n	1b31c <event_slave+0x134>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b3cc:	4a0f      	ldr	r2, [pc, #60]	; (1b40c <event_slave+0x224>)
   1b3ce:	4601      	mov	r1, r0
   1b3d0:	f7fd ff6c 	bl	192ac <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1b3d4:	f030 0302 	bics.w	r3, r0, #2
   1b3d8:	d0dd      	beq.n	1b396 <event_slave+0x1ae>
   1b3da:	2301      	movs	r3, #1
   1b3dc:	f04f 0100 	mov.w	r1, #0
   1b3e0:	f363 0107 	bfi	r1, r3, #0, #8
   1b3e4:	4a04      	ldr	r2, [pc, #16]	; (1b3f8 <event_slave+0x210>)
   1b3e6:	4b05      	ldr	r3, [pc, #20]	; (1b3fc <event_slave+0x214>)
   1b3e8:	4809      	ldr	r0, [pc, #36]	; (1b410 <event_slave+0x228>)
   1b3ea:	1a9b      	subs	r3, r3, r2
   1b3ec:	08db      	lsrs	r3, r3, #3
   1b3ee:	f363 118f 	bfi	r1, r3, #6, #10
   1b3f2:	e70f      	b.n	1b214 <event_slave+0x2c>
   1b3f4:	20000fb4 	.word	0x20000fb4
   1b3f8:	00025880 	.word	0x00025880
   1b3fc:	000258b0 	.word	0x000258b0
   1b400:	0002c255 	.word	0x0002c255
   1b404:	0002c27f 	.word	0x0002c27f
   1b408:	0002c060 	.word	0x0002c060
   1b40c:	0001a8a5 	.word	0x0001a8a5
   1b410:	0002c1be 	.word	0x0002c1be

0001b414 <mayfly_xtal_stop_calc>:
{
   1b414:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b416:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1b418:	2302      	movs	r3, #2
   1b41a:	9309      	str	r3, [sp, #36]	; 0x24
	struct connection *conn_curr = NULL;
   1b41c:	2300      	movs	r3, #0
	struct connection *conn_next = NULL;
   1b41e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	ticker_id_next = 0xff;
   1b422:	22ff      	movs	r2, #255	; 0xff
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b424:	4e5f      	ldr	r6, [pc, #380]	; (1b5a4 <mayfly_xtal_stop_calc+0x190>)
				    _radio.connection_count));
   1b426:	4d60      	ldr	r5, [pc, #384]	; (1b5a8 <mayfly_xtal_stop_calc+0x194>)
	ticker_id_next = 0xff;
   1b428:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	u8_t ticker_id_curr = ((u32_t)params & 0xff);
   1b42c:	b2c4      	uxtb	r4, r0
	ticks_to_expire = 0U;
   1b42e:	930a      	str	r3, [sp, #40]	; 0x28
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b430:	ab09      	add	r3, sp, #36	; 0x24
   1b432:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1b436:	ab0a      	add	r3, sp, #40	; 0x28
   1b438:	9300      	str	r3, [sp, #0]
   1b43a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   1b43e:	ab0b      	add	r3, sp, #44	; 0x2c
   1b440:	2101      	movs	r1, #1
   1b442:	2000      	movs	r0, #0
   1b444:	f7fd fef4 	bl	19230 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1b448:	2802      	cmp	r0, #2
   1b44a:	d019      	beq.n	1b480 <mayfly_xtal_stop_calc+0x6c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1b44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b44e:	b1db      	cbz	r3, 1b488 <mayfly_xtal_stop_calc+0x74>
   1b450:	2301      	movs	r3, #1
   1b452:	f04f 0100 	mov.w	r1, #0
   1b456:	f363 0107 	bfi	r1, r3, #0, #8
   1b45a:	4a54      	ldr	r2, [pc, #336]	; (1b5ac <mayfly_xtal_stop_calc+0x198>)
   1b45c:	4b54      	ldr	r3, [pc, #336]	; (1b5b0 <mayfly_xtal_stop_calc+0x19c>)
   1b45e:	4855      	ldr	r0, [pc, #340]	; (1b5b4 <mayfly_xtal_stop_calc+0x1a0>)
   1b460:	1a9b      	subs	r3, r3, r2
   1b462:	08db      	lsrs	r3, r3, #3
   1b464:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(hdr_curr);
   1b468:	f005 fbcc 	bl	20c04 <log_0>
   1b46c:	4040      	eors	r0, r0
   1b46e:	f380 8811 	msr	BASEPRI, r0
   1b472:	f04f 0004 	mov.w	r0, #4
   1b476:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b478:	2101      	movs	r1, #1
   1b47a:	2000      	movs	r0, #0
   1b47c:	f7fd ff4e 	bl	1931c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1b480:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b482:	2b02      	cmp	r3, #2
   1b484:	d0f8      	beq.n	1b478 <mayfly_xtal_stop_calc+0x64>
   1b486:	e7e1      	b.n	1b44c <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
   1b488:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
   1b48c:	2bff      	cmp	r3, #255	; 0xff
   1b48e:	d01a      	beq.n	1b4c6 <mayfly_xtal_stop_calc+0xb2>
   1b490:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1b494:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
   1b496:	4293      	cmp	r3, r2
   1b498:	daca      	bge.n	1b430 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
   1b49a:	3b05      	subs	r3, #5
   1b49c:	b2db      	uxtb	r3, r3
   1b49e:	2bf9      	cmp	r3, #249	; 0xf9
   1b4a0:	d811      	bhi.n	1b4c6 <mayfly_xtal_stop_calc+0xb2>
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
   1b4a2:	a90c      	add	r1, sp, #48	; 0x30
   1b4a4:	4620      	mov	r0, r4
   1b4a6:	f7ff fba3 	bl	1abf0 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
   1b4aa:	b990      	cbnz	r0, 1b4d2 <mayfly_xtal_stop_calc+0xbe>
   1b4ac:	2301      	movs	r3, #1
   1b4ae:	f04f 0100 	mov.w	r1, #0
   1b4b2:	f363 0107 	bfi	r1, r3, #0, #8
   1b4b6:	4a3d      	ldr	r2, [pc, #244]	; (1b5ac <mayfly_xtal_stop_calc+0x198>)
   1b4b8:	4b3d      	ldr	r3, [pc, #244]	; (1b5b0 <mayfly_xtal_stop_calc+0x19c>)
   1b4ba:	483f      	ldr	r0, [pc, #252]	; (1b5b8 <mayfly_xtal_stop_calc+0x1a4>)
   1b4bc:	1a9b      	subs	r3, r3, r2
   1b4be:	08db      	lsrs	r3, r3, #3
   1b4c0:	f363 118f 	bfi	r1, r3, #6, #10
   1b4c4:	e7d0      	b.n	1b468 <mayfly_xtal_stop_calc+0x54>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   1b4c6:	2100      	movs	r1, #0
   1b4c8:	2001      	movs	r0, #1
   1b4ca:	f7ff f841 	bl	1a550 <mayfly_xtal_retain>
}
   1b4ce:	b00f      	add	sp, #60	; 0x3c
   1b4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
   1b4d2:	e9d0 7600 	ldrd	r7, r6, [r0]
   1b4d6:	2f00      	cmp	r7, #0
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
   1b4d8:	bfb8      	it	lt
   1b4da:	6887      	ldrlt	r7, [r0, #8]
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
   1b4dc:	42b7      	cmp	r7, r6
   1b4de:	bf38      	it	cc
   1b4e0:	4637      	movcc	r7, r6
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   1b4e2:	a90d      	add	r1, sp, #52	; 0x34
   1b4e4:	68c6      	ldr	r6, [r0, #12]
   1b4e6:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1b4ea:	f7ff fb81 	bl	1abf0 <hdr_conn_get>
   1b4ee:	3631      	adds	r6, #49	; 0x31
	LL_ASSERT(hdr_next);
   1b4f0:	4604      	mov	r4, r0
   1b4f2:	b960      	cbnz	r0, 1b50e <mayfly_xtal_stop_calc+0xfa>
   1b4f4:	2301      	movs	r3, #1
   1b4f6:	f04f 0100 	mov.w	r1, #0
   1b4fa:	f363 0107 	bfi	r1, r3, #0, #8
   1b4fe:	4a2b      	ldr	r2, [pc, #172]	; (1b5ac <mayfly_xtal_stop_calc+0x198>)
   1b500:	4b2b      	ldr	r3, [pc, #172]	; (1b5b0 <mayfly_xtal_stop_calc+0x19c>)
   1b502:	482e      	ldr	r0, [pc, #184]	; (1b5bc <mayfly_xtal_stop_calc+0x1a8>)
   1b504:	1a9b      	subs	r3, r3, r2
   1b506:	08db      	lsrs	r3, r3, #3
   1b508:	f363 118f 	bfi	r1, r3, #6, #10
   1b50c:	e7ac      	b.n	1b468 <mayfly_xtal_stop_calc+0x54>
	ticks_prepare_to_start_next =
   1b50e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   1b512:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
   1b514:	429d      	cmp	r5, r3
   1b516:	bf38      	it	cc
   1b518:	461d      	movcc	r5, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   1b51a:	2a00      	cmp	r2, #0
   1b51c:	da08      	bge.n	1b530 <mayfly_xtal_stop_calc+0x11c>
   1b51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		u32_t ticks_reduced = (hdr_next->ticks_xtal_to_start &
   1b520:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   1b524:	1b51      	subs	r1, r2, r5
		if (ticks_to_expire > ticks_reduced) {
   1b526:	428b      	cmp	r3, r1
   1b528:	d911      	bls.n	1b54e <mayfly_xtal_stop_calc+0x13a>
			ticks_to_expire -= ticks_reduced;
   1b52a:	442b      	add	r3, r5
   1b52c:	1a9b      	subs	r3, r3, r2
   1b52e:	930a      	str	r3, [sp, #40]	; 0x28
	if (ticks_to_expire >
   1b530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	    (ticks_slot_abs +
   1b532:	443e      	add	r6, r7
	if (ticks_to_expire >
   1b534:	429e      	cmp	r6, r3
   1b536:	d20c      	bcs.n	1b552 <mayfly_xtal_stop_calc+0x13e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   1b538:	2100      	movs	r1, #0
   1b53a:	2001      	movs	r0, #1
   1b53c:	f7ff f808 	bl	1a550 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
   1b540:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1b544:	2101      	movs	r1, #1
   1b546:	4620      	mov	r0, r4
   1b548:	f7ff fe2a 	bl	1b1a0 <prepare_normal_set>
   1b54c:	e7bf      	b.n	1b4ce <mayfly_xtal_stop_calc+0xba>
			ticks_to_expire = 0U;
   1b54e:	2300      	movs	r3, #0
   1b550:	930a      	str	r3, [sp, #40]	; 0x28
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   1b552:	2101      	movs	r1, #1
   1b554:	4608      	mov	r0, r1
   1b556:	f7fe fffb 	bl	1a550 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
   1b55a:	6823      	ldr	r3, [r4, #0]
   1b55c:	2b00      	cmp	r3, #0
   1b55e:	dbb6      	blt.n	1b4ce <mayfly_xtal_stop_calc+0xba>
   1b560:	42ab      	cmp	r3, r5
   1b562:	d9b4      	bls.n	1b4ce <mayfly_xtal_stop_calc+0xba>
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b564:	2000      	movs	r0, #0
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
   1b566:	1b5b      	subs	r3, r3, r5
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b568:	4a15      	ldr	r2, [pc, #84]	; (1b5c0 <mayfly_xtal_stop_calc+0x1ac>)
   1b56a:	9205      	str	r2, [sp, #20]
   1b56c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1b570:	9406      	str	r4, [sp, #24]
   1b572:	e9cd 0003 	strd	r0, r0, [sp, #12]
   1b576:	9000      	str	r0, [sp, #0]
   1b578:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1b57c:	2101      	movs	r1, #1
   1b57e:	f7fd fdd5 	bl	1912c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1b582:	f030 0302 	bics.w	r3, r0, #2
   1b586:	d0a2      	beq.n	1b4ce <mayfly_xtal_stop_calc+0xba>
   1b588:	2301      	movs	r3, #1
   1b58a:	f04f 0100 	mov.w	r1, #0
   1b58e:	f363 0107 	bfi	r1, r3, #0, #8
   1b592:	4a06      	ldr	r2, [pc, #24]	; (1b5ac <mayfly_xtal_stop_calc+0x198>)
   1b594:	4b06      	ldr	r3, [pc, #24]	; (1b5b0 <mayfly_xtal_stop_calc+0x19c>)
   1b596:	480b      	ldr	r0, [pc, #44]	; (1b5c4 <mayfly_xtal_stop_calc+0x1b0>)
   1b598:	1a9b      	subs	r3, r3, r2
   1b59a:	08db      	lsrs	r3, r3, #3
   1b59c:	f363 118f 	bfi	r1, r3, #6, #10
   1b5a0:	e762      	b.n	1b468 <mayfly_xtal_stop_calc+0x54>
   1b5a2:	bf00      	nop
   1b5a4:	000245bd 	.word	0x000245bd
   1b5a8:	20000fb4 	.word	0x20000fb4
   1b5ac:	00025880 	.word	0x00025880
   1b5b0:	000258b0 	.word	0x000258b0
   1b5b4:	0002c678 	.word	0x0002c678
   1b5b8:	0002c695 	.word	0x0002c695
   1b5bc:	0002c6af 	.word	0x0002c6af
   1b5c0:	000245c1 	.word	0x000245c1
   1b5c4:	0002c1be 	.word	0x0002c1be

0001b5c8 <event_scan_prepare.part.41>:
void radio_event_adv_prepare(u32_t ticks_at_expire, u32_t remainder,
   1b5c8:	b508      	push	{r3, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   1b5ca:	f04f 0100 	mov.w	r1, #0
   1b5ce:	2301      	movs	r3, #1
   1b5d0:	4a08      	ldr	r2, [pc, #32]	; (1b5f4 <event_scan_prepare.part.41+0x2c>)
   1b5d2:	4809      	ldr	r0, [pc, #36]	; (1b5f8 <event_scan_prepare.part.41+0x30>)
   1b5d4:	f363 0107 	bfi	r1, r3, #0, #8
   1b5d8:	4b08      	ldr	r3, [pc, #32]	; (1b5fc <event_scan_prepare.part.41+0x34>)
   1b5da:	1a9b      	subs	r3, r3, r2
   1b5dc:	08db      	lsrs	r3, r3, #3
   1b5de:	f363 118f 	bfi	r1, r3, #6, #10
   1b5e2:	f005 fb0f 	bl	20c04 <log_0>
   1b5e6:	4040      	eors	r0, r0
   1b5e8:	f380 8811 	msr	BASEPRI, r0
   1b5ec:	f04f 0004 	mov.w	r0, #4
   1b5f0:	df02      	svc	2
   1b5f2:	bf00      	nop
   1b5f4:	00025880 	.word	0x00025880
   1b5f8:	0002c757 	.word	0x0002c757
   1b5fc:	000258b0 	.word	0x000258b0

0001b600 <ticker_stop_adv_stop>:
{
   1b600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1b602:	4c5e      	ldr	r4, [pc, #376]	; (1b77c <ticker_stop_adv_stop+0x17c>)
	if (status != TICKER_STATUS_SUCCESS) {
   1b604:	b1b8      	cbz	r0, 1b636 <ticker_stop_adv_stop+0x36>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   1b606:	7ca3      	ldrb	r3, [r4, #18]
   1b608:	2b05      	cmp	r3, #5
   1b60a:	f000 80b4 	beq.w	1b776 <ticker_stop_adv_stop+0x176>
   1b60e:	2301      	movs	r3, #1
   1b610:	f04f 0100 	mov.w	r1, #0
   1b614:	f363 0107 	bfi	r1, r3, #0, #8
   1b618:	4a59      	ldr	r2, [pc, #356]	; (1b780 <ticker_stop_adv_stop+0x180>)
   1b61a:	4b5a      	ldr	r3, [pc, #360]	; (1b784 <ticker_stop_adv_stop+0x184>)
   1b61c:	485a      	ldr	r0, [pc, #360]	; (1b788 <ticker_stop_adv_stop+0x188>)
   1b61e:	1a9b      	subs	r3, r3, r2
   1b620:	08db      	lsrs	r3, r3, #3
   1b622:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(_radio.ticker_id_prepare);
   1b626:	f005 faed 	bl	20c04 <log_0>
   1b62a:	4040      	eors	r0, r0
   1b62c:	f380 8811 	msr	BASEPRI, r0
   1b630:	f04f 0004 	mov.w	r0, #4
   1b634:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   1b636:	7c23      	ldrb	r3, [r4, #16]
   1b638:	2b05      	cmp	r3, #5
   1b63a:	d002      	beq.n	1b642 <ticker_stop_adv_stop+0x42>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   1b63c:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   1b63e:	2b05      	cmp	r3, #5
   1b640:	d176      	bne.n	1b730 <ticker_stop_adv_stop+0x130>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   1b642:	2302      	movs	r3, #2
   1b644:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b646:	2200      	movs	r2, #0
   1b648:	ab02      	add	r3, sp, #8
   1b64a:	9300      	str	r3, [sp, #0]
   1b64c:	2101      	movs	r1, #1
   1b64e:	4b4f      	ldr	r3, [pc, #316]	; (1b78c <ticker_stop_adv_stop+0x18c>)
   1b650:	4610      	mov	r0, r2
   1b652:	f7fd fdb3 	bl	191bc <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1b656:	2802      	cmp	r0, #2
   1b658:	d00d      	beq.n	1b676 <ticker_stop_adv_stop+0x76>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   1b65a:	9802      	ldr	r0, [sp, #8]
   1b65c:	b1c0      	cbz	r0, 1b690 <ticker_stop_adv_stop+0x90>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   1b65e:	9802      	ldr	r0, [sp, #8]
   1b660:	2801      	cmp	r0, #1
   1b662:	d17b      	bne.n	1b75c <ticker_stop_adv_stop+0x15c>
		if (_radio.role != ROLE_NONE) {
   1b664:	7d23      	ldrb	r3, [r4, #20]
   1b666:	2b00      	cmp	r3, #0
   1b668:	d062      	beq.n	1b730 <ticker_stop_adv_stop+0x130>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   1b66a:	4b49      	ldr	r3, [pc, #292]	; (1b790 <ticker_stop_adv_stop+0x190>)
   1b66c:	2204      	movs	r2, #4
   1b66e:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1b670:	2200      	movs	r2, #0
   1b672:	4611      	mov	r1, r2
   1b674:	e058      	b.n	1b728 <ticker_stop_adv_stop+0x128>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1b676:	2201      	movs	r2, #1
   1b678:	4611      	mov	r1, r2
   1b67a:	4610      	mov	r0, r2
   1b67c:	f7fc ffc6 	bl	1860c <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
   1b680:	9b02      	ldr	r3, [sp, #8]
   1b682:	2b02      	cmp	r3, #2
   1b684:	d1e9      	bne.n	1b65a <ticker_stop_adv_stop+0x5a>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b686:	2101      	movs	r1, #1
   1b688:	2000      	movs	r0, #0
   1b68a:	f7fd fe47 	bl	1931c <ticker_job_sched>
   1b68e:	e7f7      	b.n	1b680 <ticker_stop_adv_stop+0x80>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   1b690:	2302      	movs	r3, #2
   1b692:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   1b694:	7c23      	ldrb	r3, [r4, #16]
   1b696:	b963      	cbnz	r3, 1b6b2 <ticker_stop_adv_stop+0xb2>
   1b698:	2301      	movs	r3, #1
   1b69a:	f04f 0100 	mov.w	r1, #0
   1b69e:	f363 0107 	bfi	r1, r3, #0, #8
   1b6a2:	4a37      	ldr	r2, [pc, #220]	; (1b780 <ticker_stop_adv_stop+0x180>)
   1b6a4:	4b37      	ldr	r3, [pc, #220]	; (1b784 <ticker_stop_adv_stop+0x184>)
   1b6a6:	483b      	ldr	r0, [pc, #236]	; (1b794 <ticker_stop_adv_stop+0x194>)
   1b6a8:	1a9b      	subs	r3, r3, r2
   1b6aa:	08db      	lsrs	r3, r3, #3
   1b6ac:	f363 118f 	bfi	r1, r3, #6, #10
   1b6b0:	e7b9      	b.n	1b626 <ticker_stop_adv_stop+0x26>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b6b2:	ab03      	add	r3, sp, #12
   1b6b4:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0U;
   1b6b6:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b6b8:	4611      	mov	r1, r2
   1b6ba:	9300      	str	r3, [sp, #0]
   1b6bc:	4b33      	ldr	r3, [pc, #204]	; (1b78c <ticker_stop_adv_stop+0x18c>)
   1b6be:	f7fd fd7d 	bl	191bc <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1b6c2:	2802      	cmp	r0, #2
   1b6c4:	d01a      	beq.n	1b6fc <ticker_stop_adv_stop+0xfc>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   1b6c6:	9a03      	ldr	r2, [sp, #12]
   1b6c8:	b32a      	cbz	r2, 1b716 <ticker_stop_adv_stop+0x116>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   1b6ca:	9c03      	ldr	r4, [sp, #12]
   1b6cc:	2c01      	cmp	r4, #1
   1b6ce:	d145      	bne.n	1b75c <ticker_stop_adv_stop+0x15c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1b6d0:	2200      	movs	r2, #0
   1b6d2:	4611      	mov	r1, r2
   1b6d4:	4b30      	ldr	r3, [pc, #192]	; (1b798 <ticker_stop_adv_stop+0x198>)
   1b6d6:	4620      	mov	r0, r4
   1b6d8:	f7fc ffc0 	bl	1865c <mayfly_enqueue>
			LL_ASSERT(!ret);
   1b6dc:	4602      	mov	r2, r0
   1b6de:	2800      	cmp	r0, #0
   1b6e0:	d03a      	beq.n	1b758 <ticker_stop_adv_stop+0x158>
			LL_ASSERT(!ret);
   1b6e2:	2301      	movs	r3, #1
   1b6e4:	f04f 0100 	mov.w	r1, #0
   1b6e8:	f363 0107 	bfi	r1, r3, #0, #8
   1b6ec:	4a24      	ldr	r2, [pc, #144]	; (1b780 <ticker_stop_adv_stop+0x180>)
   1b6ee:	4b25      	ldr	r3, [pc, #148]	; (1b784 <ticker_stop_adv_stop+0x184>)
   1b6f0:	482a      	ldr	r0, [pc, #168]	; (1b79c <ticker_stop_adv_stop+0x19c>)
   1b6f2:	1a9b      	subs	r3, r3, r2
   1b6f4:	08db      	lsrs	r3, r3, #3
   1b6f6:	f363 118f 	bfi	r1, r3, #6, #10
   1b6fa:	e794      	b.n	1b626 <ticker_stop_adv_stop+0x26>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1b6fc:	2201      	movs	r2, #1
   1b6fe:	4611      	mov	r1, r2
   1b700:	4610      	mov	r0, r2
   1b702:	f7fc ff83 	bl	1860c <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
   1b706:	9b03      	ldr	r3, [sp, #12]
   1b708:	2b02      	cmp	r3, #2
   1b70a:	d1dc      	bne.n	1b6c6 <ticker_stop_adv_stop+0xc6>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b70c:	2101      	movs	r1, #1
   1b70e:	2000      	movs	r0, #0
   1b710:	f7fd fe04 	bl	1931c <ticker_job_sched>
   1b714:	e7f7      	b.n	1b706 <ticker_stop_adv_stop+0x106>
			u32_t ticks_xtal_to_start =
   1b716:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
   1b718:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
   1b71a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   1b71e:	428b      	cmp	r3, r1
   1b720:	d21a      	bcs.n	1b758 <ticker_stop_adv_stop+0x158>
				ret = mayfly_enqueue(
   1b722:	4b1d      	ldr	r3, [pc, #116]	; (1b798 <ticker_stop_adv_stop+0x198>)
				ret = mayfly_enqueue(
   1b724:	4611      	mov	r1, r2
   1b726:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1b728:	f7fc ff98 	bl	1865c <mayfly_enqueue>
			LL_ASSERT(!ret);
   1b72c:	2800      	cmp	r0, #0
   1b72e:	d1d8      	bne.n	1b6e2 <ticker_stop_adv_stop+0xe2>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1b730:	2200      	movs	r2, #0
   1b732:	4b1b      	ldr	r3, [pc, #108]	; (1b7a0 <ticker_stop_adv_stop+0x1a0>)
   1b734:	4611      	mov	r1, r2
   1b736:	2001      	movs	r0, #1
   1b738:	f7fc ff90 	bl	1865c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1b73c:	b1d8      	cbz	r0, 1b776 <ticker_stop_adv_stop+0x176>
   1b73e:	2301      	movs	r3, #1
   1b740:	f04f 0100 	mov.w	r1, #0
   1b744:	f363 0107 	bfi	r1, r3, #0, #8
   1b748:	4a0d      	ldr	r2, [pc, #52]	; (1b780 <ticker_stop_adv_stop+0x180>)
   1b74a:	4b0e      	ldr	r3, [pc, #56]	; (1b784 <ticker_stop_adv_stop+0x184>)
   1b74c:	4815      	ldr	r0, [pc, #84]	; (1b7a4 <ticker_stop_adv_stop+0x1a4>)
   1b74e:	1a9b      	subs	r3, r3, r2
   1b750:	08db      	lsrs	r3, r3, #3
   1b752:	f363 118f 	bfi	r1, r3, #6, #10
   1b756:	e766      	b.n	1b626 <ticker_stop_adv_stop+0x26>
				ret = mayfly_enqueue(
   1b758:	4b13      	ldr	r3, [pc, #76]	; (1b7a8 <ticker_stop_adv_stop+0x1a8>)
   1b75a:	e7e3      	b.n	1b724 <ticker_stop_adv_stop+0x124>
		LL_ASSERT(0);
   1b75c:	2301      	movs	r3, #1
   1b75e:	f04f 0100 	mov.w	r1, #0
   1b762:	f363 0107 	bfi	r1, r3, #0, #8
   1b766:	4a06      	ldr	r2, [pc, #24]	; (1b780 <ticker_stop_adv_stop+0x180>)
   1b768:	4b06      	ldr	r3, [pc, #24]	; (1b784 <ticker_stop_adv_stop+0x184>)
   1b76a:	4810      	ldr	r0, [pc, #64]	; (1b7ac <ticker_stop_adv_stop+0x1ac>)
   1b76c:	1a9b      	subs	r3, r3, r2
   1b76e:	08db      	lsrs	r3, r3, #3
   1b770:	f363 118f 	bfi	r1, r3, #6, #10
   1b774:	e757      	b.n	1b626 <ticker_stop_adv_stop+0x26>
}
   1b776:	b004      	add	sp, #16
   1b778:	bd10      	pop	{r4, pc}
   1b77a:	bf00      	nop
   1b77c:	20000fb4 	.word	0x20000fb4
   1b780:	00025880 	.word	0x00025880
   1b784:	000258b0 	.word	0x000258b0
   1b788:	0002c93f 	.word	0x0002c93f
   1b78c:	000245bd 	.word	0x000245bd
   1b790:	2000760c 	.word	0x2000760c
   1b794:	0002c7fb 	.word	0x0002c7fb
   1b798:	200075dc 	.word	0x200075dc
   1b79c:	0002c845 	.word	0x0002c845
   1b7a0:	200075ac 	.word	0x200075ac
   1b7a4:	0002c65f 	.word	0x0002c65f
   1b7a8:	2000766c 	.word	0x2000766c
   1b7ac:	0002c060 	.word	0x0002c060

0001b7b0 <adv_scan_configure.constprop.45>:
static void adv_scan_configure(u8_t phy, u8_t flags)
   1b7b0:	b507      	push	{r0, r1, r2, lr}
	u32_t aa = 0x8e89bed6;
   1b7b2:	4b0c      	ldr	r3, [pc, #48]	; (1b7e4 <adv_scan_configure.constprop.45+0x34>)
   1b7b4:	9301      	str	r3, [sp, #4]
	adv_scan_conn_configure();
   1b7b6:	f7fe ff13 	bl	1a5e0 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   1b7ba:	2100      	movs	r1, #0
   1b7bc:	4608      	mov	r0, r1
   1b7be:	f001 fb41 	bl	1ce44 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   1b7c2:	a801      	add	r0, sp, #4
   1b7c4:	f001 fb6c 	bl	1cea0 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   1b7c8:	2200      	movs	r2, #0
   1b7ca:	2125      	movs	r1, #37	; 0x25
   1b7cc:	2008      	movs	r0, #8
   1b7ce:	f001 fb7f 	bl	1ced0 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b7d2:	4905      	ldr	r1, [pc, #20]	; (1b7e8 <adv_scan_configure.constprop.45+0x38>)
   1b7d4:	f240 605b 	movw	r0, #1627	; 0x65b
   1b7d8:	f001 fbfa 	bl	1cfd0 <radio_crc_configure>
}
   1b7dc:	b003      	add	sp, #12
   1b7de:	f85d fb04 	ldr.w	pc, [sp], #4
   1b7e2:	bf00      	nop
   1b7e4:	8e89bed6 	.word	0x8e89bed6
   1b7e8:	00555555 	.word	0x00555555

0001b7ec <event_scan>:
{
   1b7ec:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   1b7ee:	4b5c      	ldr	r3, [pc, #368]	; (1b960 <event_scan+0x174>)
   1b7f0:	7d1a      	ldrb	r2, [r3, #20]
{
   1b7f2:	b08a      	sub	sp, #40	; 0x28
   1b7f4:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   1b7f6:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   1b7fa:	461c      	mov	r4, r3
   1b7fc:	b19a      	cbz	r2, 1b826 <event_scan+0x3a>
   1b7fe:	2301      	movs	r3, #1
   1b800:	f04f 0100 	mov.w	r1, #0
   1b804:	f363 0107 	bfi	r1, r3, #0, #8
   1b808:	4a56      	ldr	r2, [pc, #344]	; (1b964 <event_scan+0x178>)
   1b80a:	4b57      	ldr	r3, [pc, #348]	; (1b968 <event_scan+0x17c>)
   1b80c:	4857      	ldr	r0, [pc, #348]	; (1b96c <event_scan+0x180>)
   1b80e:	1a9b      	subs	r3, r3, r2
   1b810:	08db      	lsrs	r3, r3, #3
   1b812:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   1b816:	f005 f9f5 	bl	20c04 <log_0>
   1b81a:	4040      	eors	r0, r0
   1b81c:	f380 8811 	msr	BASEPRI, r0
   1b820:	f04f 0004 	mov.w	r0, #4
   1b824:	df02      	svc	2
   1b826:	7c1b      	ldrb	r3, [r3, #16]
   1b828:	b2db      	uxtb	r3, r3
   1b82a:	2b06      	cmp	r3, #6
   1b82c:	d00c      	beq.n	1b848 <event_scan+0x5c>
   1b82e:	2301      	movs	r3, #1
   1b830:	f04f 0100 	mov.w	r1, #0
   1b834:	f363 0107 	bfi	r1, r3, #0, #8
   1b838:	4a4a      	ldr	r2, [pc, #296]	; (1b964 <event_scan+0x178>)
   1b83a:	4b4b      	ldr	r3, [pc, #300]	; (1b968 <event_scan+0x17c>)
   1b83c:	484c      	ldr	r0, [pc, #304]	; (1b970 <event_scan+0x184>)
   1b83e:	1a9b      	subs	r3, r3, r2
   1b840:	08db      	lsrs	r3, r3, #3
   1b842:	f363 118f 	bfi	r1, r3, #6, #10
   1b846:	e7e6      	b.n	1b816 <event_scan+0x2a>
	_radio.role = ROLE_SCAN;
   1b848:	2202      	movs	r2, #2
   1b84a:	7522      	strb	r2, [r4, #20]
	_radio.ticker_id_prepare = 0U;
   1b84c:	7426      	strb	r6, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   1b84e:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0U;
   1b850:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.ticks_anchor = ticks_at_expire;
   1b854:	60a0      	str	r0, [r4, #8]
	_radio.state = STATE_RX;
   1b856:	2201      	movs	r2, #1
	_radio.scanner.state = 0U;
   1b858:	f366 0341 	bfi	r3, r6, #1, #1
	_radio.state = STATE_RX;
   1b85c:	7562      	strb	r2, [r4, #21]
	_radio.scanner.state = 0U;
   1b85e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(0, 0);
   1b862:	f7ff ffa5 	bl	1b7b0 <adv_scan_configure.constprop.45>
	chan_set(37 + _radio.scanner.chan++);
   1b866:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1b86a:	f3c3 0081 	ubfx	r0, r3, #2, #2
   1b86e:	1c42      	adds	r2, r0, #1
   1b870:	f362 0383 	bfi	r3, r2, #2, #2
   1b874:	3025      	adds	r0, #37	; 0x25
   1b876:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   1b87a:	f008 fefa 	bl	24672 <chan_set>
	if (_radio.scanner.chan == 3) {
   1b87e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1b882:	f003 020c 	and.w	r2, r3, #12
   1b886:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0U;
   1b888:	bf08      	it	eq
   1b88a:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
   1b88e:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0U;
   1b892:	bf08      	it	eq
   1b894:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
   1b898:	f001 fc4c 	bl	1d134 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b89c:	2300      	movs	r3, #0
   1b89e:	4619      	mov	r1, r3
   1b8a0:	461a      	mov	r2, r3
   1b8a2:	4618      	mov	r0, r3
   1b8a4:	f001 fbbe 	bl	1d024 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1b8a8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   1b8ac:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
   1b8b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1b8b4:	3008      	adds	r0, #8
   1b8b6:	f001 fb37 	bl	1cf28 <radio_pkt_rx_set>
	radio_rssi_measure();
   1b8ba:	f001 fbcb 	bl	1d054 <radio_rssi_measure>
	if (_radio.scanner.filter_policy) {
   1b8be:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1b8c2:	f013 0f06 	tst.w	r3, #6
   1b8c6:	d007      	beq.n	1b8d8 <event_scan+0xec>
		struct ll_filter *wl = ctrl_filter_get(true);
   1b8c8:	2001      	movs	r0, #1
   1b8ca:	f001 f8b3 	bl	1ca34 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   1b8ce:	1c82      	adds	r2, r0, #2
   1b8d0:	7841      	ldrb	r1, [r0, #1]
   1b8d2:	7800      	ldrb	r0, [r0, #0]
   1b8d4:	f001 fbe0 	bl	1d098 <radio_filter_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   1b8d8:	68e2      	ldr	r2, [r4, #12]
   1b8da:	f105 0109 	add.w	r1, r5, #9
   1b8de:	2000      	movs	r0, #0
   1b8e0:	f001 fc34 	bl	1d14c <radio_tmr_start>
	radio_tmr_end_capture();
   1b8e4:	f001 fcee 	bl	1d2c4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   1b8e8:	2106      	movs	r1, #6
   1b8ea:	462a      	mov	r2, r5
   1b8ec:	4821      	ldr	r0, [pc, #132]	; (1b974 <event_scan+0x188>)
   1b8ee:	f008 ff03 	bl	246f8 <preempt_calc>
   1b8f2:	4601      	mov	r1, r0
   1b8f4:	b130      	cbz	r0, 1b904 <event_scan+0x118>
		_radio.state = STATE_STOP;
   1b8f6:	2304      	movs	r3, #4
   1b8f8:	7563      	strb	r3, [r4, #21]
}
   1b8fa:	b00a      	add	sp, #40	; 0x28
   1b8fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   1b900:	f001 bb2a 	b.w	1cf58 <radio_disable>
		ret = ticker_start(
   1b904:	f641 23f1 	movw	r3, #6897	; 0x1af1
   1b908:	9308      	str	r3, [sp, #32]
   1b90a:	4b1b      	ldr	r3, [pc, #108]	; (1b978 <event_scan+0x18c>)
   1b90c:	9307      	str	r3, [sp, #28]
   1b90e:	4b1b      	ldr	r3, [pc, #108]	; (1b97c <event_scan+0x190>)
   1b910:	9001      	str	r0, [sp, #4]
   1b912:	e9cd 0304 	strd	r0, r3, [sp, #16]
   1b916:	e9cd 0002 	strd	r0, r0, [sp, #8]
   1b91a:	2204      	movs	r2, #4
   1b91c:	9206      	str	r2, [sp, #24]
   1b91e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1b922:	3309      	adds	r3, #9
   1b924:	9300      	str	r3, [sp, #0]
   1b926:	462b      	mov	r3, r5
   1b928:	f7fd fbb6 	bl	19098 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1b92c:	f030 0302 	bics.w	r3, r0, #2
   1b930:	d00c      	beq.n	1b94c <event_scan+0x160>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1b932:	2301      	movs	r3, #1
   1b934:	f04f 0100 	mov.w	r1, #0
   1b938:	f363 0107 	bfi	r1, r3, #0, #8
   1b93c:	4a09      	ldr	r2, [pc, #36]	; (1b964 <event_scan+0x178>)
   1b93e:	4b0a      	ldr	r3, [pc, #40]	; (1b968 <event_scan+0x17c>)
   1b940:	480f      	ldr	r0, [pc, #60]	; (1b980 <event_scan+0x194>)
   1b942:	1a9b      	subs	r3, r3, r2
   1b944:	08db      	lsrs	r3, r3, #3
   1b946:	f363 118f 	bfi	r1, r3, #6, #10
   1b94a:	e764      	b.n	1b816 <event_scan+0x2a>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1b94c:	4619      	mov	r1, r3
   1b94e:	4618      	mov	r0, r3
   1b950:	4a0c      	ldr	r2, [pc, #48]	; (1b984 <event_scan+0x198>)
   1b952:	f7fd fcab 	bl	192ac <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1b956:	f030 0302 	bics.w	r3, r0, #2
   1b95a:	d1ea      	bne.n	1b932 <event_scan+0x146>
}
   1b95c:	b00a      	add	sp, #40	; 0x28
   1b95e:	bd70      	pop	{r4, r5, r6, pc}
   1b960:	20000fb4 	.word	0x20000fb4
   1b964:	00025880 	.word	0x00025880
   1b968:	000258b0 	.word	0x000258b0
   1b96c:	0002c255 	.word	0x0002c255
   1b970:	0002c1fc 	.word	0x0002c1fc
   1b974:	20001084 	.word	0x20001084
   1b978:	00024621 	.word	0x00024621
   1b97c:	0001ac65 	.word	0x0001ac65
   1b980:	0002c22b 	.word	0x0002c22b
   1b984:	0001a8a5 	.word	0x0001a8a5

0001b988 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   1b988:	4b3b      	ldr	r3, [pc, #236]	; (1ba78 <event_adv+0xf0>)
   1b98a:	7d1a      	ldrb	r2, [r3, #20]
{
   1b98c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   1b98e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
   1b992:	4605      	mov	r5, r0
   1b994:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   1b996:	b19a      	cbz	r2, 1b9c0 <event_adv+0x38>
   1b998:	2301      	movs	r3, #1
   1b99a:	f04f 0100 	mov.w	r1, #0
   1b99e:	f363 0107 	bfi	r1, r3, #0, #8
   1b9a2:	4a36      	ldr	r2, [pc, #216]	; (1ba7c <event_adv+0xf4>)
   1b9a4:	4b36      	ldr	r3, [pc, #216]	; (1ba80 <event_adv+0xf8>)
   1b9a6:	4837      	ldr	r0, [pc, #220]	; (1ba84 <event_adv+0xfc>)
   1b9a8:	1a9b      	subs	r3, r3, r2
   1b9aa:	08db      	lsrs	r3, r3, #3
   1b9ac:	f363 118f 	bfi	r1, r3, #6, #10
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   1b9b0:	f005 f928 	bl	20c04 <log_0>
   1b9b4:	4040      	eors	r0, r0
   1b9b6:	f380 8811 	msr	BASEPRI, r0
   1b9ba:	f04f 0004 	mov.w	r0, #4
   1b9be:	df02      	svc	2
   1b9c0:	7c1b      	ldrb	r3, [r3, #16]
   1b9c2:	b2db      	uxtb	r3, r3
   1b9c4:	2b05      	cmp	r3, #5
   1b9c6:	d00c      	beq.n	1b9e2 <event_adv+0x5a>
   1b9c8:	2301      	movs	r3, #1
   1b9ca:	f04f 0100 	mov.w	r1, #0
   1b9ce:	f363 0107 	bfi	r1, r3, #0, #8
   1b9d2:	4a2a      	ldr	r2, [pc, #168]	; (1ba7c <event_adv+0xf4>)
   1b9d4:	4b2a      	ldr	r3, [pc, #168]	; (1ba80 <event_adv+0xf8>)
   1b9d6:	482c      	ldr	r0, [pc, #176]	; (1ba88 <event_adv+0x100>)
   1b9d8:	1a9b      	subs	r3, r3, r2
   1b9da:	08db      	lsrs	r3, r3, #3
   1b9dc:	f363 118f 	bfi	r1, r3, #6, #10
   1b9e0:	e7e6      	b.n	1b9b0 <event_adv+0x28>
	_radio.role = ROLE_ADV;
   1b9e2:	2601      	movs	r6, #1
   1b9e4:	7526      	strb	r6, [r4, #20]
	_radio.ticks_anchor = ticks_at_expire;
   1b9e6:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0U;
   1b9e8:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   1b9ea:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(0, 0);
   1b9ec:	f7ff fee0 	bl	1b7b0 <adv_scan_configure.constprop.45>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   1b9f0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1b9f4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1b9f8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1b9fc:	f363 0202 	bfi	r2, r3, #0, #3
   1ba00:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
   1ba04:	f7ff fafc 	bl	1b000 <adv_setup>
	if (_radio.advertiser.filter_policy) {
   1ba08:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1ba0c:	f013 0f18 	tst.w	r3, #24
   1ba10:	d007      	beq.n	1ba22 <event_adv+0x9a>
		struct ll_filter *wl = ctrl_filter_get(true);
   1ba12:	4630      	mov	r0, r6
   1ba14:	f001 f80e 	bl	1ca34 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   1ba18:	1c82      	adds	r2, r0, #2
   1ba1a:	7841      	ldrb	r1, [r0, #1]
   1ba1c:	7800      	ldrb	r0, [r0, #0]
   1ba1e:	f001 fb3b 	bl	1d098 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
   1ba22:	68e2      	ldr	r2, [r4, #12]
   1ba24:	f105 0109 	add.w	r1, r5, #9
   1ba28:	2001      	movs	r0, #1
   1ba2a:	f001 fb8f 	bl	1d14c <radio_tmr_start>
	radio_tmr_end_capture();
   1ba2e:	f001 fc49 	bl	1d2c4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   1ba32:	462a      	mov	r2, r5
   1ba34:	2105      	movs	r1, #5
   1ba36:	4815      	ldr	r0, [pc, #84]	; (1ba8c <event_adv+0x104>)
   1ba38:	f008 fe5e 	bl	246f8 <preempt_calc>
   1ba3c:	4603      	mov	r3, r0
   1ba3e:	b128      	cbz	r0, 1ba4c <event_adv+0xc4>
		_radio.state = STATE_STOP;
   1ba40:	2304      	movs	r3, #4
   1ba42:	7563      	strb	r3, [r4, #21]
}
   1ba44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   1ba48:	f001 ba86 	b.w	1cf58 <radio_disable>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1ba4c:	4a10      	ldr	r2, [pc, #64]	; (1ba90 <event_adv+0x108>)
   1ba4e:	4601      	mov	r1, r0
   1ba50:	f7fd fc2c 	bl	192ac <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1ba54:	f030 0302 	bics.w	r3, r0, #2
   1ba58:	d00c      	beq.n	1ba74 <event_adv+0xec>
   1ba5a:	2301      	movs	r3, #1
   1ba5c:	f04f 0100 	mov.w	r1, #0
   1ba60:	f363 0107 	bfi	r1, r3, #0, #8
   1ba64:	4a05      	ldr	r2, [pc, #20]	; (1ba7c <event_adv+0xf4>)
   1ba66:	4b06      	ldr	r3, [pc, #24]	; (1ba80 <event_adv+0xf8>)
   1ba68:	480a      	ldr	r0, [pc, #40]	; (1ba94 <event_adv+0x10c>)
   1ba6a:	1a9b      	subs	r3, r3, r2
   1ba6c:	08db      	lsrs	r3, r3, #3
   1ba6e:	f363 118f 	bfi	r1, r3, #6, #10
   1ba72:	e79d      	b.n	1b9b0 <event_adv+0x28>
}
   1ba74:	bd70      	pop	{r4, r5, r6, pc}
   1ba76:	bf00      	nop
   1ba78:	20000fb4 	.word	0x20000fb4
   1ba7c:	00025880 	.word	0x00025880
   1ba80:	000258b0 	.word	0x000258b0
   1ba84:	0002c255 	.word	0x0002c255
   1ba88:	0002c18f 	.word	0x0002c18f
   1ba8c:	20000fcc 	.word	0x20000fcc
   1ba90:	0001a8a5 	.word	0x0001a8a5
   1ba94:	0002c1be 	.word	0x0002c1be

0001ba98 <event_stop.constprop.46>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   1ba98:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   1ba9a:	4b05      	ldr	r3, [pc, #20]	; (1bab0 <event_stop.constprop.46+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1ba9c:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
   1ba9e:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1baa0:	4611      	mov	r1, r2
   1baa2:	4610      	mov	r0, r2
   1baa4:	f7fc fdda 	bl	1865c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1baa8:	b108      	cbz	r0, 1baae <event_stop.constprop.46+0x16>
   1baaa:	f7ff f8bf 	bl	1ac2c <event_active.part.19>
}
   1baae:	bd08      	pop	{r3, pc}
   1bab0:	200075fc 	.word	0x200075fc

0001bab4 <event_common_prepare>:
{
   1bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   1bab8:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   1baba:	681d      	ldr	r5, [r3, #0]
{
   1babc:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
   1babe:	2c00      	cmp	r4, #0
{
   1bac0:	4681      	mov	r9, r0
   1bac2:	910b      	str	r1, [sp, #44]	; 0x2c
   1bac4:	4690      	mov	r8, r2
   1bac6:	469b      	mov	fp, r3
   1bac8:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
   1bacc:	da03      	bge.n	1bad6 <event_common_prepare+0x22>
		_ticks_xtal_to_start = MAX(_ticks_active_to_start,
   1bace:	9c16      	ldr	r4, [sp, #88]	; 0x58
   1bad0:	42ac      	cmp	r4, r5
   1bad2:	bf38      	it	cc
   1bad4:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   1bad6:	42ac      	cmp	r4, r5
   1bad8:	4f5b      	ldr	r7, [pc, #364]	; (1bc48 <event_common_prepare+0x194>)
   1bada:	d929      	bls.n	1bb30 <event_common_prepare+0x7c>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1badc:	f241 63d7 	movw	r3, #5847	; 0x16d7
   1bae0:	e9cd 7307 	strd	r7, r3, [sp, #28]
   1bae4:	4b59      	ldr	r3, [pc, #356]	; (1bc4c <event_common_prepare+0x198>)
   1bae6:	2100      	movs	r1, #0
   1bae8:	e9cd 1304 	strd	r1, r3, [sp, #16]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   1baec:	1b63      	subs	r3, r4, r5
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1baee:	9300      	str	r3, [sp, #0]
   1baf0:	9106      	str	r1, [sp, #24]
   1baf2:	464b      	mov	r3, r9
   1baf4:	e9cd 1102 	strd	r1, r1, [sp, #8]
   1baf8:	9101      	str	r1, [sp, #4]
   1bafa:	2201      	movs	r2, #1
   1bafc:	4608      	mov	r0, r1
   1bafe:	f7fd facb 	bl	19098 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1bb02:	f030 0302 	bics.w	r3, r0, #2
   1bb06:	d039      	beq.n	1bb7c <event_common_prepare+0xc8>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1bb08:	2301      	movs	r3, #1
   1bb0a:	f04f 0100 	mov.w	r1, #0
   1bb0e:	f363 0107 	bfi	r1, r3, #0, #8
   1bb12:	4a4f      	ldr	r2, [pc, #316]	; (1bc50 <event_common_prepare+0x19c>)
   1bb14:	4b4f      	ldr	r3, [pc, #316]	; (1bc54 <event_common_prepare+0x1a0>)
   1bb16:	4850      	ldr	r0, [pc, #320]	; (1bc58 <event_common_prepare+0x1a4>)
   1bb18:	1a9b      	subs	r3, r3, r2
   1bb1a:	08db      	lsrs	r3, r3, #3
   1bb1c:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(!retval);
   1bb20:	f005 f870 	bl	20c04 <log_0>
   1bb24:	4040      	eors	r0, r0
   1bb26:	f380 8811 	msr	BASEPRI, r0
   1bb2a:	f04f 0004 	mov.w	r0, #4
   1bb2e:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   1bb30:	d21d      	bcs.n	1bb6e <event_common_prepare+0xba>
		event_active(0, 0, 0, NULL);
   1bb32:	2300      	movs	r3, #0
   1bb34:	461a      	mov	r2, r3
   1bb36:	4619      	mov	r1, r3
   1bb38:	4618      	mov	r0, r3
   1bb3a:	f7ff f8bf 	bl	1acbc <event_active>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1bb3e:	f241 63ec 	movw	r3, #5868	; 0x16ec
   1bb42:	e9cd 7307 	strd	r7, r3, [sp, #28]
   1bb46:	4b45      	ldr	r3, [pc, #276]	; (1bc5c <event_common_prepare+0x1a8>)
   1bb48:	2100      	movs	r1, #0
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   1bb4a:	1b2c      	subs	r4, r5, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1bb4c:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1bb50:	9106      	str	r1, [sp, #24]
   1bb52:	464b      	mov	r3, r9
   1bb54:	e9cd 1102 	strd	r1, r1, [sp, #8]
   1bb58:	e9cd 4100 	strd	r4, r1, [sp]
   1bb5c:	2201      	movs	r2, #1
   1bb5e:	4608      	mov	r0, r1
   1bb60:	f7fd fa9a 	bl	19098 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1bb64:	f030 0302 	bics.w	r3, r0, #2
   1bb68:	d1ce      	bne.n	1bb08 <event_common_prepare+0x54>
   1bb6a:	462c      	mov	r4, r5
   1bb6c:	e00b      	b.n	1bb86 <event_common_prepare+0xd2>
		event_active(0, 0, 0, NULL);
   1bb6e:	2300      	movs	r3, #0
   1bb70:	461a      	mov	r2, r3
   1bb72:	4619      	mov	r1, r3
   1bb74:	4618      	mov	r0, r3
   1bb76:	f7ff f8a1 	bl	1acbc <event_active>
		event_xtal(0, 0, 0, NULL);
   1bb7a:	2300      	movs	r3, #0
   1bb7c:	461a      	mov	r2, r3
   1bb7e:	4619      	mov	r1, r3
   1bb80:	4618      	mov	r0, r3
   1bb82:	f7ff f8a9 	bl	1acd8 <event_xtal>
	_radio.remainder_anchor = remainder;
   1bb86:	4e36      	ldr	r6, [pc, #216]	; (1bc60 <event_common_prepare+0x1ac>)
   1bb88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bb8a:	60f3      	str	r3, [r6, #12]
		ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1bb8c:	f241 7304 	movw	r3, #5892	; 0x1704
   1bb90:	e9cd 7307 	strd	r7, r3, [sp, #28]
   1bb94:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1bb96:	9306      	str	r3, [sp, #24]
   1bb98:	2200      	movs	r2, #0
   1bb9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1bb9c:	9305      	str	r3, [sp, #20]
   1bb9e:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1bba2:	464b      	mov	r3, r9
   1bba4:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1bba8:	9400      	str	r4, [sp, #0]
   1bbaa:	4611      	mov	r1, r2
   1bbac:	4610      	mov	r0, r2
   1bbae:	f7fd fa73 	bl	19098 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1bbb2:	f030 0302 	bics.w	r3, r0, #2
   1bbb6:	d1a7      	bne.n	1bb08 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   1bbb8:	2005      	movs	r0, #5
   1bbba:	f7ff ff6d 	bl	1ba98 <event_stop.constprop.46>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   1bbbe:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
   1bbc2:	42ab      	cmp	r3, r5
   1bbc4:	d023      	beq.n	1bc0e <event_common_prepare+0x15a>
		*ticks_active_to_start = _radio.ticks_active_to_start;
   1bbc6:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
   1bbca:	f8d8 3000 	ldr.w	r3, [r8]
   1bbce:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
   1bbd0:	bfbc      	itt	lt
   1bbd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1bbd6:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = MAX(_radio.ticks_active_to_start,
   1bbda:	f8d8 3000 	ldr.w	r3, [r8]
   1bbde:	f8d6 217c 	ldr.w	r2, [r6, #380]	; 0x17c
   1bbe2:	4293      	cmp	r3, r2
   1bbe4:	bf38      	it	cc
   1bbe6:	4613      	movcc	r3, r2
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1bbe8:	2100      	movs	r1, #0
   1bbea:	f241 7232 	movw	r2, #5938	; 0x1732
   1bbee:	e9cd 7205 	strd	r7, r2, [sp, #20]
   1bbf2:	e9cd 3401 	strd	r3, r4, [sp, #4]
   1bbf6:	9300      	str	r3, [sp, #0]
   1bbf8:	e9cd 1103 	strd	r1, r1, [sp, #12]
   1bbfc:	4623      	mov	r3, r4
   1bbfe:	4652      	mov	r2, sl
   1bc00:	4608      	mov	r0, r1
   1bc02:	f7fd fa93 	bl	1912c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1bc06:	f030 0302 	bics.w	r3, r0, #2
   1bc0a:	f47f af7d 	bne.w	1bb08 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
   1bc0e:	20ff      	movs	r0, #255	; 0xff
   1bc10:	f7ff f90e 	bl	1ae30 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   1bc14:	4b13      	ldr	r3, [pc, #76]	; (1bc64 <event_common_prepare+0x1b0>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1bc16:	2201      	movs	r2, #1
   1bc18:	4611      	mov	r1, r2
   1bc1a:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   1bc1c:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1bc20:	f7fc fd1c 	bl	1865c <mayfly_enqueue>
		LL_ASSERT(!retval);
   1bc24:	b160      	cbz	r0, 1bc40 <event_common_prepare+0x18c>
   1bc26:	2301      	movs	r3, #1
   1bc28:	f04f 0100 	mov.w	r1, #0
   1bc2c:	f363 0107 	bfi	r1, r3, #0, #8
   1bc30:	4a07      	ldr	r2, [pc, #28]	; (1bc50 <event_common_prepare+0x19c>)
   1bc32:	4b08      	ldr	r3, [pc, #32]	; (1bc54 <event_common_prepare+0x1a0>)
   1bc34:	480c      	ldr	r0, [pc, #48]	; (1bc68 <event_common_prepare+0x1b4>)
   1bc36:	1a9b      	subs	r3, r3, r2
   1bc38:	08db      	lsrs	r3, r3, #3
   1bc3a:	f363 118f 	bfi	r1, r3, #6, #10
   1bc3e:	e76f      	b.n	1bb20 <event_common_prepare+0x6c>
}
   1bc40:	b00d      	add	sp, #52	; 0x34
   1bc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc46:	bf00      	nop
   1bc48:	00024621 	.word	0x00024621
   1bc4c:	0001acbd 	.word	0x0001acbd
   1bc50:	00025880 	.word	0x00025880
   1bc54:	000258b0 	.word	0x000258b0
   1bc58:	0002c1be 	.word	0x0002c1be
   1bc5c:	0001acd9 	.word	0x0001acd9
   1bc60:	20000fb4 	.word	0x20000fb4
   1bc64:	2000768c 	.word	0x2000768c
   1bc68:	0002c65f 	.word	0x0002c65f

0001bc6c <radio_event_adv_prepare>:
{
   1bc6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   1bc6e:	4a0b      	ldr	r2, [pc, #44]	; (1bc9c <radio_event_adv_prepare+0x30>)
   1bc70:	7c13      	ldrb	r3, [r2, #16]
   1bc72:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1bc76:	b10b      	cbz	r3, 1bc7c <radio_event_adv_prepare+0x10>
   1bc78:	f7ff fca6 	bl	1b5c8 <event_scan_prepare.part.41>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   1bc7c:	2305      	movs	r3, #5
   1bc7e:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   1bc80:	9403      	str	r4, [sp, #12]
   1bc82:	4c07      	ldr	r4, [pc, #28]	; (1bca0 <radio_event_adv_prepare+0x34>)
   1bc84:	e9cd 3401 	strd	r3, r4, [sp, #4]
   1bc88:	6a13      	ldr	r3, [r2, #32]
   1bc8a:	9300      	str	r3, [sp, #0]
   1bc8c:	f102 031c 	add.w	r3, r2, #28
   1bc90:	3218      	adds	r2, #24
   1bc92:	f7ff ff0f 	bl	1bab4 <event_common_prepare>
}
   1bc96:	b004      	add	sp, #16
   1bc98:	bd10      	pop	{r4, pc}
   1bc9a:	bf00      	nop
   1bc9c:	20000fb4 	.word	0x20000fb4
   1bca0:	0001b989 	.word	0x0001b989

0001bca4 <event_scan_prepare>:
{
   1bca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   1bca6:	4a0b      	ldr	r2, [pc, #44]	; (1bcd4 <event_scan_prepare+0x30>)
   1bca8:	7c13      	ldrb	r3, [r2, #16]
   1bcaa:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1bcae:	b10b      	cbz	r3, 1bcb4 <event_scan_prepare+0x10>
   1bcb0:	f7ff fc8a 	bl	1b5c8 <event_scan_prepare.part.41>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   1bcb4:	2306      	movs	r3, #6
   1bcb6:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   1bcb8:	9403      	str	r4, [sp, #12]
   1bcba:	4c07      	ldr	r4, [pc, #28]	; (1bcd8 <event_scan_prepare+0x34>)
   1bcbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
   1bcc0:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   1bcc4:	9300      	str	r3, [sp, #0]
   1bcc6:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
   1bcca:	32d0      	adds	r2, #208	; 0xd0
   1bccc:	f7ff fef2 	bl	1bab4 <event_common_prepare>
}
   1bcd0:	b004      	add	sp, #16
   1bcd2:	bd10      	pop	{r4, pc}
   1bcd4:	20000fb4 	.word	0x20000fb4
   1bcd8:	0001b7ed 	.word	0x0001b7ed

0001bcdc <event_adv_stop>:
{
   1bcdc:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   1bcde:	2005      	movs	r0, #5
   1bce0:	f7ff feda 	bl	1ba98 <event_stop.constprop.46>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1bce4:	2100      	movs	r1, #0
   1bce6:	4b07      	ldr	r3, [pc, #28]	; (1bd04 <event_adv_stop+0x28>)
   1bce8:	9100      	str	r1, [sp, #0]
   1bcea:	2205      	movs	r2, #5
   1bcec:	4608      	mov	r0, r1
   1bcee:	f7fd fa65 	bl	191bc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1bcf2:	f030 0302 	bics.w	r3, r0, #2
   1bcf6:	d001      	beq.n	1bcfc <event_adv_stop+0x20>
   1bcf8:	f7fe ffc4 	bl	1ac84 <event_adv_stop.part.17>
}
   1bcfc:	b003      	add	sp, #12
   1bcfe:	f85d fb04 	ldr.w	pc, [sp], #4
   1bd02:	bf00      	nop
   1bd04:	0001b601 	.word	0x0001b601

0001bd08 <packet_rx_allocate.constprop.47>:
static void packet_rx_allocate(u8_t max)
   1bd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
   1bd0c:	4d21      	ldr	r5, [pc, #132]	; (1bd94 <packet_rx_allocate.constprop.47+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
   1bd0e:	f895 413a 	ldrb.w	r4, [r5, #314]	; 0x13a
	if (acquire == _radio.packet_rx_count) {
   1bd12:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
	if (max > _radio.link_rx_data_quota) {
   1bd16:	f895 914c 	ldrb.w	r9, [r5, #332]	; 0x14c
	acquire = _radio.packet_rx_acquire + 1;
   1bd1a:	3401      	adds	r4, #1
   1bd1c:	b2e4      	uxtb	r4, r4
		acquire = 0U;
   1bd1e:	42a3      	cmp	r3, r4
   1bd20:	bf08      	it	eq
   1bd22:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
   1bd24:	f505 77a0 	add.w	r7, r5, #320	; 0x140
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   1bd28:	f505 7894 	add.w	r8, r5, #296	; 0x128
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   1bd2c:	f1b9 0f00 	cmp.w	r9, #0
   1bd30:	d003      	beq.n	1bd3a <packet_rx_allocate.constprop.47+0x32>
   1bd32:	f895 3139 	ldrb.w	r3, [r5, #313]	; 0x139
   1bd36:	429c      	cmp	r4, r3
   1bd38:	d101      	bne.n	1bd3e <packet_rx_allocate.constprop.47+0x36>
}
   1bd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
   1bd3e:	4638      	mov	r0, r7
   1bd40:	f008 fa92 	bl	24268 <mem_acquire>
		if (!link) {
   1bd44:	4606      	mov	r6, r0
   1bd46:	2800      	cmp	r0, #0
   1bd48:	d0f7      	beq.n	1bd3a <packet_rx_allocate.constprop.47+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   1bd4a:	4640      	mov	r0, r8
   1bd4c:	f008 fa8c 	bl	24268 <mem_acquire>
		if (!node_rx) {
   1bd50:	b928      	cbnz	r0, 1bd5e <packet_rx_allocate.constprop.47+0x56>
			mem_release(link, &_radio.link_rx_free);
   1bd52:	4630      	mov	r0, r6
   1bd54:	4910      	ldr	r1, [pc, #64]	; (1bd98 <packet_rx_allocate.constprop.47+0x90>)
}
   1bd56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
   1bd5a:	f008 ba9e 	b.w	2429a <mem_release>
		node_rx->hdr.link = link;
   1bd5e:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
   1bd60:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
   1bd64:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   1bd68:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
   1bd6c:	f885 413a 	strb.w	r4, [r5, #314]	; 0x13a
		if (acquire == _radio.packet_rx_count) {
   1bd70:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
		acquire = _radio.packet_rx_acquire + 1;
   1bd74:	3401      	adds	r4, #1
   1bd76:	b2e4      	uxtb	r4, r4
			acquire = 0U;
   1bd78:	42a3      	cmp	r3, r4
   1bd7a:	bf08      	it	eq
   1bd7c:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
   1bd7e:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
   1bd82:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1bd86:	3b01      	subs	r3, #1
   1bd88:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
   1bd8c:	fa5f f989 	uxtb.w	r9, r9
   1bd90:	e7cc      	b.n	1bd2c <packet_rx_allocate.constprop.47+0x24>
   1bd92:	bf00      	nop
   1bd94:	20000fb4 	.word	0x20000fb4
   1bd98:	200010f4 	.word	0x200010f4

0001bd9c <common_init>:
{
   1bd9c:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
   1bd9e:	4c31      	ldr	r4, [pc, #196]	; (1be64 <common_init+0xc8>)
   1bda0:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1bda4:	2a00      	cmp	r2, #0
   1bda6:	d045      	beq.n	1be34 <common_init+0x98>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
   1bda8:	f504 7386 	add.w	r3, r4, #268	; 0x10c
   1bdac:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1bdb0:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   1bdb4:	f008 fa34 	bl	24220 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
   1bdb8:	4b2b      	ldr	r3, [pc, #172]	; (1be68 <common_init+0xcc>)
   1bdba:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   1bdbe:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
   1bdc2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bdc6:	f008 fa2b 	bl	24220 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
   1bdca:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   1bdce:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
   1bdd2:	4b26      	ldr	r3, [pc, #152]	; (1be6c <common_init+0xd0>)
   1bdd4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   1bdd8:	440a      	add	r2, r1
   1bdda:	2108      	movs	r1, #8
   1bddc:	f008 fa20 	bl	24220 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
   1bde0:	4b23      	ldr	r3, [pc, #140]	; (1be70 <common_init+0xd4>)
   1bde2:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   1bde6:	2202      	movs	r2, #2
   1bde8:	2124      	movs	r1, #36	; 0x24
   1bdea:	f008 fa19 	bl	24220 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
   1bdee:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
   1bdf2:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
   1bdf6:	4b1f      	ldr	r3, [pc, #124]	; (1be74 <common_init+0xd8>)
   1bdf8:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
   1bdfc:	3a01      	subs	r2, #1
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
   1bdfe:	b292      	uxth	r2, r2
   1be00:	f008 fa0e 	bl	24220 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
   1be04:	4819      	ldr	r0, [pc, #100]	; (1be6c <common_init+0xd0>)
   1be06:	f008 fa2f 	bl	24268 <mem_acquire>
	LL_ASSERT(link);
   1be0a:	b9b0      	cbnz	r0, 1be3a <common_init+0x9e>
   1be0c:	2301      	movs	r3, #1
   1be0e:	f04f 0100 	mov.w	r1, #0
   1be12:	4a19      	ldr	r2, [pc, #100]	; (1be78 <common_init+0xdc>)
   1be14:	4819      	ldr	r0, [pc, #100]	; (1be7c <common_init+0xe0>)
   1be16:	f363 0107 	bfi	r1, r3, #0, #8
   1be1a:	4b19      	ldr	r3, [pc, #100]	; (1be80 <common_init+0xe4>)
   1be1c:	1a9b      	subs	r3, r3, r2
   1be1e:	08db      	lsrs	r3, r3, #3
   1be20:	f363 118f 	bfi	r1, r3, #6, #10
   1be24:	f004 feee 	bl	20c04 <log_0>
   1be28:	4040      	eors	r0, r0
   1be2a:	f380 8811 	msr	BASEPRI, r0
   1be2e:	f04f 0004 	mov.w	r0, #4
   1be32:	df02      	svc	2
		_radio.conn_free = NULL;
   1be34:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
   1be38:	e7be      	b.n	1bdb8 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
   1be3a:	4a12      	ldr	r2, [pc, #72]	; (1be84 <common_init+0xe8>)
   1be3c:	1f11      	subs	r1, r2, #4
   1be3e:	f008 fa58 	bl	242f2 <memq_init>
	_radio.advertiser.chan_map = 0x07;
   1be42:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1be46:	f043 0307 	orr.w	r3, r3, #7
   1be4a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
   1be4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1be52:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[2] = 0xFF;
   1be56:	4b0c      	ldr	r3, [pc, #48]	; (1be88 <common_init+0xec>)
   1be58:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
}
   1be5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
   1be60:	f7ff bf52 	b.w	1bd08 <packet_rx_allocate.constprop.47>
   1be64:	20000fb4 	.word	0x20000fb4
   1be68:	200010dc 	.word	0x200010dc
   1be6c:	200010f4 	.word	0x200010f4
   1be70:	20001108 	.word	0x20001108
   1be74:	20001110 	.word	0x20001110
   1be78:	00025880 	.word	0x00025880
   1be7c:	0002c70c 	.word	0x0002c70c
   1be80:	000258b0 	.word	0x000258b0
   1be84:	200010fc 	.word	0x200010fc
   1be88:	251fffff 	.word	0x251fffff

0001be8c <k32src_wait>:
	if (done) {
   1be8c:	4b14      	ldr	r3, [pc, #80]	; (1bee0 <k32src_wait+0x54>)
   1be8e:	781a      	ldrb	r2, [r3, #0]
{
   1be90:	b510      	push	{r4, lr}
	if (done) {
   1be92:	bb1a      	cbnz	r2, 1bedc <k32src_wait+0x50>
	done = true;
   1be94:	2201      	movs	r2, #1
   1be96:	4813      	ldr	r0, [pc, #76]	; (1bee4 <k32src_wait+0x58>)
   1be98:	701a      	strb	r2, [r3, #0]
   1be9a:	f002 f849 	bl	1df30 <z_impl_device_get_binding>
	LL_ASSERT(lf_clock);
   1be9e:	4604      	mov	r4, r0
   1bea0:	b9a8      	cbnz	r0, 1bece <k32src_wait+0x42>
   1bea2:	2301      	movs	r3, #1
   1bea4:	f04f 0100 	mov.w	r1, #0
   1bea8:	4a0f      	ldr	r2, [pc, #60]	; (1bee8 <k32src_wait+0x5c>)
   1beaa:	4810      	ldr	r0, [pc, #64]	; (1beec <k32src_wait+0x60>)
   1beac:	f363 0107 	bfi	r1, r3, #0, #8
   1beb0:	4b0f      	ldr	r3, [pc, #60]	; (1bef0 <k32src_wait+0x64>)
   1beb2:	1a9b      	subs	r3, r3, r2
   1beb4:	08db      	lsrs	r3, r3, #3
   1beb6:	f363 118f 	bfi	r1, r3, #6, #10
   1beba:	f004 fea3 	bl	20c04 <log_0>
   1bebe:	4040      	eors	r0, r0
   1bec0:	f380 8811 	msr	BASEPRI, r0
   1bec4:	f04f 0004 	mov.w	r0, #4
   1bec8:	df02      	svc	2
		cpu_sleep();
   1beca:	f008 fb73 	bl	245b4 <cpu_sleep>
   1bece:	6863      	ldr	r3, [r4, #4]
   1bed0:	2101      	movs	r1, #1
   1bed2:	681b      	ldr	r3, [r3, #0]
   1bed4:	4620      	mov	r0, r4
   1bed6:	4798      	blx	r3
	while (clock_control_on(lf_clock, (void *)CLOCK_CONTROL_NRF_K32SRC)) {
   1bed8:	2800      	cmp	r0, #0
   1beda:	d1f6      	bne.n	1beca <k32src_wait+0x3e>
}
   1bedc:	bd10      	pop	{r4, pc}
   1bede:	bf00      	nop
   1bee0:	2000244f 	.word	0x2000244f
   1bee4:	00026722 	.word	0x00026722
   1bee8:	00025880 	.word	0x00025880
   1beec:	0002c466 	.word	0x0002c466
   1bef0:	000258b0 	.word	0x000258b0

0001bef4 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
   1bef4:	4b02      	ldr	r3, [pc, #8]	; (1bf00 <mayfly_xtal_stop+0xc>)
   1bef6:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
   1bef8:	6843      	ldr	r3, [r0, #4]
   1befa:	2100      	movs	r1, #0
   1befc:	685b      	ldr	r3, [r3, #4]
   1befe:	4718      	bx	r3
   1bf00:	20000fb4 	.word	0x20000fb4

0001bf04 <feature_rsp_send>:
{
   1bf04:	b570      	push	{r4, r5, r6, lr}
   1bf06:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1bf08:	481e      	ldr	r0, [pc, #120]	; (1bf84 <feature_rsp_send+0x80>)
{
   1bf0a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1bf0c:	f008 f9ac 	bl	24268 <mem_acquire>
	if (!node_tx) {
   1bf10:	4604      	mov	r4, r0
   1bf12:	b3a0      	cbz	r0, 1bf7e <feature_rsp_send+0x7a>
	       (features[1] << 8) | (features[2] << 16);
   1bf14:	79b3      	ldrb	r3, [r6, #6]
   1bf16:	7972      	ldrb	r2, [r6, #5]
   1bf18:	041b      	lsls	r3, r3, #16
   1bf1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1bf1e:	7932      	ldrb	r2, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
   1bf20:	4313      	orrs	r3, r2
   1bf22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1bf26:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_features &= feat_get(&req->features[0]);
   1bf2a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	       (features[1] << 8) | (features[2] << 16);
   1bf2e:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   1bf32:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_features &= feat_get(&req->features[0]);
   1bf36:	4013      	ands	r3, r2
   1bf38:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1bf3c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	conn->common.fex_valid = 1U;
   1bf40:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1bf44:	f043 0320 	orr.w	r3, r3, #32
   1bf48:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bf4c:	7903      	ldrb	r3, [r0, #4]
   1bf4e:	f043 0303 	orr.w	r3, r3, #3
   1bf52:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   1bf54:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1bf56:	2309      	movs	r3, #9
   1bf58:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1bf5a:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   1bf5c:	2100      	movs	r1, #0
   1bf5e:	4410      	add	r0, r2
   1bf60:	f005 ffbb 	bl	21eda <memset>
		conn->llcp_features & 0xFF;
   1bf64:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
   1bf68:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   1bf6a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
   1bf6c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
   1bf6e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
   1bf70:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
   1bf72:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   1bf74:	4621      	mov	r1, r4
   1bf76:	f008 fc0b 	bl	24790 <ctrl_tx_sec_enqueue>
	return 0;
   1bf7a:	2000      	movs	r0, #0
}
   1bf7c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1bf7e:	2001      	movs	r0, #1
   1bf80:	e7fc      	b.n	1bf7c <feature_rsp_send+0x78>
   1bf82:	bf00      	nop
   1bf84:	20001108 	.word	0x20001108

0001bf88 <reject_ext_ind_send>:
{
   1bf88:	b570      	push	{r4, r5, r6, lr}
   1bf8a:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1bf8c:	480b      	ldr	r0, [pc, #44]	; (1bfbc <reject_ext_ind_send+0x34>)
{
   1bf8e:	460e      	mov	r6, r1
   1bf90:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1bf92:	f008 f969 	bl	24268 <mem_acquire>
	if (!node_tx) {
   1bf96:	b178      	cbz	r0, 1bfb8 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bf98:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1bf9a:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1bf9c:	f043 0303 	orr.w	r3, r3, #3
   1bfa0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1bfa2:	2303      	movs	r3, #3
   1bfa4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1bfa6:	2311      	movs	r3, #17
   1bfa8:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1bfaa:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   1bfac:	4601      	mov	r1, r0
   1bfae:	4620      	mov	r0, r4
   1bfb0:	f008 fbc0 	bl	24734 <ctrl_tx_enqueue>
	return 0;
   1bfb4:	2000      	movs	r0, #0
}
   1bfb6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1bfb8:	2001      	movs	r0, #1
   1bfba:	e7fc      	b.n	1bfb6 <reject_ext_ind_send+0x2e>
   1bfbc:	20001108 	.word	0x20001108

0001bfc0 <radio_init>:
{
   1bfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   1bfc4:	4c3c      	ldr	r4, [pc, #240]	; (1c0b8 <radio_init+0xf8>)
{
   1bfc6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	_radio.entropy = entropy;
   1bfc8:	6062      	str	r2, [r4, #4]
	rx_count_max += 3;
   1bfca:	f99d e018 	ldrsb.w	lr, [sp, #24]
	tx_count_max += 1;
   1bfce:	f99d 201c 	ldrsb.w	r2, [sp, #28]
{
   1bfd2:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
	_radio.sca = sca;
   1bfd6:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   1bfda:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1bfde:	fb01 5103 	mla	r1, r1, r3, r5
	_radio.hf_clock = hf_clock;
   1bfe2:	6020      	str	r0, [r4, #0]
	_radio.conn_pool = mem_radio;
   1bfe4:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   1bfe8:	19a8      	adds	r0, r5, r6
	tx_count_max += 1;
   1bfea:	f102 0c01 	add.w	ip, r2, #1
	rx_count_max += 3;
   1bfee:	f10e 0503 	add.w	r5, lr, #3
	_radio.packet_tx_count = (tx_count_max + 1);
   1bff2:	3202      	adds	r2, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   1bff4:	f10e 0e04 	add.w	lr, lr, #4
   1bff8:	fa5f fe8e 	uxtb.w	lr, lr
	_radio.packet_tx_count = (tx_count_max + 1);
   1bffc:	b2d2      	uxtb	r2, r2
{
   1bffe:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	_radio.packet_tx_count = (tx_count_max + 1);
   1c002:	f884 216c 	strb.w	r2, [r4, #364]	; 0x16c
	_radio.packet_rx = (void *)mem_radio;
   1c006:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1c00a:	00d2      	lsls	r2, r2, #3
	mem_radio +=
   1c00c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   1c010:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1c014:	4411      	add	r1, r2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1c016:	188f      	adds	r7, r1, r2
	    (offsetof(struct pdu_data, lldata) +
   1c018:	f108 0203 	add.w	r2, r8, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   1c01c:	2a29      	cmp	r2, #41	; 0x29
	rx_count_max += 3;
   1c01e:	b2ed      	uxtb	r5, r5
	_radio.pkt_release = (void *)mem_radio;
   1c020:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	_radio.link_rx_data_quota = rx_count_max;
   1c024:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
		_radio.packet_rx_data_pool_size =
   1c028:	bf88      	it	hi
   1c02a:	f108 010e 	addhi.w	r1, r8, #14
   1c02e:	b2ad      	uxth	r5, r5
   1c030:	bf8b      	itete	hi
   1c032:	f021 0103 	bichi.w	r1, r1, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1c036:	eb05 0145 	addls.w	r1, r5, r5, lsl #1
		_radio.packet_rx_data_pool_size =
   1c03a:	fb11 f105 	smulbbhi	r1, r1, r5
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1c03e:	eb05 0181 	addls.w	r1, r5, r1, lsl #2
   1c042:	4622      	mov	r2, r4
		_radio.packet_rx_data_pool_size =
   1c044:	bf8c      	ite	hi
   1c046:	b289      	uxthhi	r1, r1
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1c048:	0089      	lslls	r1, r1, #2
	_radio.connection_count = connection_count_max;
   1c04a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	tx_count_max += 1;
   1c04e:	f8a4 112e 	strh.w	r1, [r4, #302]	; 0x12e
	_radio.packet_rx_count = (rx_count_max + 1);
   1c052:	f884 e138 	strb.w	lr, [r4, #312]	; 0x138
	_radio.packet_data_octets_max = packet_data_octets_max;
   1c056:	f8a4 812c 	strh.w	r8, [r4, #300]	; 0x12c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1c05a:	2434      	movs	r4, #52	; 0x34
   1c05c:	f8a2 4130 	strh.w	r4, [r2, #304]	; 0x130
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1c060:	fbb1 f4f4 	udiv	r4, r1, r4
   1c064:	f882 4132 	strb.w	r4, [r2, #306]	; 0x132
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1c068:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_rx_data_pool = mem_radio;
   1c06c:	f8c2 7124 	str.w	r7, [r2, #292]	; 0x124
	mem_radio += _radio.packet_rx_data_pool_size;
   1c070:	4439      	add	r1, r7
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1c072:	4473      	add	r3, lr
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1c074:	340a      	adds	r4, #10
	_radio.link_rx_pool = mem_radio;
   1c076:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1c07a:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1c07e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1c082:	b2a4      	uxth	r4, r4
	tx_count_max += 1;
   1c084:	fa5f fc8c 	uxtb.w	ip, ip
	_radio.pkt_tx_ctrl_pool = mem_radio;
   1c088:	f8c2 1150 	str.w	r1, [r2, #336]	; 0x150
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   1c08c:	3148      	adds	r1, #72	; 0x48
	_radio.packet_tx_data_size =
   1c08e:	f8a2 4160 	strh.w	r4, [r2, #352]	; 0x160
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   1c092:	fb0c 1404 	mla	r4, ip, r4, r1
	if (retcode) {
   1c096:	1a24      	subs	r4, r4, r0
	_radio.pkt_tx_data_pool = mem_radio;
   1c098:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	if (retcode) {
   1c09c:	d003      	beq.n	1c0a6 <radio_init+0xe6>
		return (retcode + mem_size);
   1c09e:	4434      	add	r4, r6
}
   1c0a0:	4620      	mov	r0, r4
   1c0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1U;
   1c0a6:	2301      	movs	r3, #1
   1c0a8:	f882 317a 	strb.w	r3, [r2, #378]	; 0x17a
	common_init();
   1c0ac:	f7ff fe76 	bl	1bd9c <common_init>
	radio_setup();
   1c0b0:	f008 fd47 	bl	24b42 <radio_setup>
	return retcode;
   1c0b4:	e7f4      	b.n	1c0a0 <radio_init+0xe0>
   1c0b6:	bf00      	nop
   1c0b8:	20000fb4 	.word	0x20000fb4

0001c0bc <ll_reset>:
{
   1c0bc:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   1c0be:	2103      	movs	r1, #3
   1c0c0:	2005      	movs	r0, #5
   1c0c2:	f7fe fc13 	bl	1a8ec <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   1c0c6:	2104      	movs	r1, #4
   1c0c8:	2006      	movs	r0, #6
   1c0ca:	f7fe fc0f 	bl	1a8ec <role_disable>
	for (conn_handle = 0U; conn_handle < _radio.connection_count;
   1c0ce:	4c20      	ldr	r4, [pc, #128]	; (1c150 <ll_reset+0x94>)
   1c0d0:	2500      	movs	r5, #0
   1c0d2:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1c0d6:	b2ab      	uxth	r3, r5
   1c0d8:	429a      	cmp	r2, r3
   1c0da:	d832      	bhi.n	1c142 <ll_reset+0x86>
	_radio.advertiser.is_enabled = 0U;
   1c0dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1c0e0:	f36f 13c7 	bfc	r3, #7, #1
   1c0e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0U;
   1c0e8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   1c0ec:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0U;
   1c0ee:	f360 0300 	bfi	r3, r0, #0, #1
   1c0f2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1c0f6:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1c0f8:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
   1c0fc:	fbb3 f3f2 	udiv	r3, r3, r2
   1c100:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   1c104:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
	_radio.packet_rx_last = 0U;
   1c108:	f884 0139 	strb.w	r0, [r4, #313]	; 0x139
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   1c10c:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0U;
   1c10e:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
	_radio.packet_release_last = 0U;
   1c112:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   1c116:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
	_radio.fc_ack = _radio.fc_req;
   1c11a:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	_radio.advertiser.conn = NULL;
   1c11e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   1c122:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1c126:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
	_radio.packet_rx_acquire = 0U;
   1c12a:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
	_radio.packet_tx_last = 0U;
   1c12e:	f8a4 016e 	strh.w	r0, [r4, #366]	; 0x16e
	_radio.fc_ack = _radio.fc_req;
   1c132:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	ll_filter_reset(false);
   1c136:	f000 fd33 	bl	1cba0 <ll_filter_reset>
}
   1c13a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   1c13e:	f7ff be2d 	b.w	1bd9c <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   1c142:	1de8      	adds	r0, r5, #7
   1c144:	21ff      	movs	r1, #255	; 0xff
   1c146:	b2c0      	uxtb	r0, r0
   1c148:	f7fe fbd0 	bl	1a8ec <role_disable>
   1c14c:	3501      	adds	r5, #1
   1c14e:	e7c0      	b.n	1c0d2 <ll_reset+0x16>
   1c150:	20000fb4 	.word	0x20000fb4

0001c154 <radio_adv_data_get>:
}
   1c154:	4800      	ldr	r0, [pc, #0]	; (1c158 <radio_adv_data_get+0x4>)
   1c156:	4770      	bx	lr
   1c158:	20000fde 	.word	0x20000fde

0001c15c <radio_scan_data_get>:
}
   1c15c:	4800      	ldr	r0, [pc, #0]	; (1c160 <radio_scan_data_get+0x4>)
   1c15e:	4770      	bx	lr
   1c160:	2000102e 	.word	0x2000102e

0001c164 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   1c164:	4b02      	ldr	r3, [pc, #8]	; (1c170 <ll_adv_is_enabled+0xc>)
   1c166:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   1c16a:	09c0      	lsrs	r0, r0, #7
   1c16c:	4770      	bx	lr
   1c16e:	bf00      	nop
   1c170:	20000fb4 	.word	0x20000fb4

0001c174 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   1c174:	4b05      	ldr	r3, [pc, #20]	; (1c18c <radio_adv_filter_pol_get+0x18>)
   1c176:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   1c17a:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   1c17c:	bfba      	itte	lt
   1c17e:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   1c182:	f3c0 00c1 	ubfxlt	r0, r0, #3, #2
	return 0;
   1c186:	2000      	movge	r0, #0
}
   1c188:	4770      	bx	lr
   1c18a:	bf00      	nop
   1c18c:	20000fb4 	.word	0x20000fb4

0001c190 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1c190:	4a09      	ldr	r2, [pc, #36]	; (1c1b8 <ll_scan_is_enabled+0x28>)
   1c192:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   1c196:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1c19a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1c19e:	f000 0001 	and.w	r0, r0, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1c1a2:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1c1a4:	f003 0301 	and.w	r3, r3, #1
   1c1a8:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   1c1ac:	bf14      	ite	ne
   1c1ae:	2004      	movne	r0, #4
   1c1b0:	2000      	moveq	r0, #0
}
   1c1b2:	4318      	orrs	r0, r3
   1c1b4:	4770      	bx	lr
   1c1b6:	bf00      	nop
   1c1b8:	20000fb4 	.word	0x20000fb4

0001c1bc <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   1c1bc:	4b05      	ldr	r3, [pc, #20]	; (1c1d4 <radio_scan_filter_pol_get+0x18>)
   1c1be:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1c1c2:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   1c1c6:	bf1c      	itt	ne
   1c1c8:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   1c1cc:	f3c0 0041 	ubfxne	r0, r0, #1, #2
}
   1c1d0:	4770      	bx	lr
   1c1d2:	bf00      	nop
   1c1d4:	20000fb4 	.word	0x20000fb4

0001c1d8 <ll_rx_get>:
{
   1c1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c1da:	4605      	mov	r5, r0
   1c1dc:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   1c1de:	4917      	ldr	r1, [pc, #92]	; (1c23c <ll_rx_get+0x64>)
   1c1e0:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
   1c1e4:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
   1c1e8:	4293      	cmp	r3, r2
   1c1ea:	460e      	mov	r6, r1
   1c1ec:	d01b      	beq.n	1c226 <ll_rx_get+0x4e>
		_node_rx = _radio.link_rx_head->mem;
   1c1ee:	685f      	ldr	r7, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1c1f0:	f201 116f 	addw	r1, r1, #367	; 0x16f
   1c1f4:	783a      	ldrb	r2, [r7, #0]
   1c1f6:	f7fe f963 	bl	1a4c0 <tx_cmplt_get>
		if (!cmplt) {
   1c1fa:	4604      	mov	r4, r0
   1c1fc:	b9d0      	cbnz	r0, 1c234 <ll_rx_get+0x5c>
			first = _radio.packet_release_first;
   1c1fe:	f896 316f 	ldrb.w	r3, [r6, #367]	; 0x16f
   1c202:	f88d 3005 	strb.w	r3, [sp, #5]
				cmplt_curr = tx_cmplt_get(&h, &first,
   1c206:	f896 2170 	ldrb.w	r2, [r6, #368]	; 0x170
   1c20a:	f10d 0105 	add.w	r1, sp, #5
   1c20e:	f10d 0006 	add.w	r0, sp, #6
   1c212:	f7fe f955 	bl	1a4c0 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   1c216:	b924      	cbnz	r4, 1c222 <ll_rx_get+0x4a>
			} while ((cmplt_prev != 0) ||
   1c218:	b918      	cbnz	r0, 1c222 <ll_rx_get+0x4a>
			*node_rx = _node_rx;
   1c21a:	602f      	str	r7, [r5, #0]
}
   1c21c:	4620      	mov	r0, r4
   1c21e:	b003      	add	sp, #12
   1c220:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
   1c222:	4604      	mov	r4, r0
   1c224:	e7ef      	b.n	1c206 <ll_rx_get+0x2e>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1c226:	f891 2170 	ldrb.w	r2, [r1, #368]	; 0x170
   1c22a:	f201 116f 	addw	r1, r1, #367	; 0x16f
   1c22e:	f7fe f947 	bl	1a4c0 <tx_cmplt_get>
   1c232:	4604      	mov	r4, r0
		*node_rx = NULL;
   1c234:	2300      	movs	r3, #0
   1c236:	602b      	str	r3, [r5, #0]
   1c238:	e7f0      	b.n	1c21c <ll_rx_get+0x44>
   1c23a:	bf00      	nop
   1c23c:	20000fb4 	.word	0x20000fb4

0001c240 <ll_rx_mem_release>:
{
   1c240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   1c244:	4c1d      	ldr	r4, [pc, #116]	; (1c2bc <ll_rx_mem_release+0x7c>)
{
   1c246:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   1c248:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1c24a:	f5a4 7694 	sub.w	r6, r4, #296	; 0x128
			mem_release(conn, &_radio.conn_free);
   1c24e:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
   1c252:	b920      	cbnz	r0, 1c25e <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
   1c254:	6028      	str	r0, [r5, #0]
}
   1c256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   1c25a:	f7ff bd55 	b.w	1bd08 <packet_rx_allocate.constprop.47>
		switch (_node_rx_free->hdr.type) {
   1c25e:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.next;
   1c260:	f8d0 8000 	ldr.w	r8, [r0]
		switch (_node_rx_free->hdr.type) {
   1c264:	2a0d      	cmp	r2, #13
   1c266:	d807      	bhi.n	1c278 <ll_rx_mem_release+0x38>
   1c268:	2301      	movs	r3, #1
   1c26a:	4093      	lsls	r3, r2
   1c26c:	f642 5214 	movw	r2, #11540	; 0x2d14
   1c270:	4213      	tst	r3, r2
   1c272:	d115      	bne.n	1c2a0 <ll_rx_mem_release+0x60>
   1c274:	059b      	lsls	r3, r3, #22
   1c276:	d418      	bmi.n	1c2aa <ll_rx_mem_release+0x6a>
			LL_ASSERT(0);
   1c278:	2301      	movs	r3, #1
   1c27a:	f04f 0100 	mov.w	r1, #0
   1c27e:	4a10      	ldr	r2, [pc, #64]	; (1c2c0 <ll_rx_mem_release+0x80>)
   1c280:	4810      	ldr	r0, [pc, #64]	; (1c2c4 <ll_rx_mem_release+0x84>)
   1c282:	f363 0107 	bfi	r1, r3, #0, #8
   1c286:	4b10      	ldr	r3, [pc, #64]	; (1c2c8 <ll_rx_mem_release+0x88>)
   1c288:	1a9b      	subs	r3, r3, r2
   1c28a:	08db      	lsrs	r3, r3, #3
   1c28c:	f363 118f 	bfi	r1, r3, #6, #10
   1c290:	f004 fcb8 	bl	20c04 <log_0>
   1c294:	4040      	eors	r0, r0
   1c296:	f380 8811 	msr	BASEPRI, r0
   1c29a:	f04f 0004 	mov.w	r0, #4
   1c29e:	df02      	svc	2
			mem_release(_node_rx_free,
   1c2a0:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   1c2a2:	f007 fffa 	bl	2429a <mem_release>
{
   1c2a6:	4640      	mov	r0, r8
   1c2a8:	e7d3      	b.n	1c252 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1c2aa:	88c2      	ldrh	r2, [r0, #6]
   1c2ac:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   1c2b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1c2b4:	f008 f806 	bl	242c4 <mem_get>
			mem_release(conn, &_radio.conn_free);
   1c2b8:	4639      	mov	r1, r7
   1c2ba:	e7f2      	b.n	1c2a2 <ll_rx_mem_release+0x62>
   1c2bc:	200010dc 	.word	0x200010dc
   1c2c0:	00025880 	.word	0x00025880
   1c2c4:	0002c060 	.word	0x0002c060
   1c2c8:	000258b0 	.word	0x000258b0

0001c2cc <radio_rx_fc_set>:
{
   1c2cc:	b530      	push	{r4, r5, lr}
	if (_radio.fc_ena) {
   1c2ce:	4b26      	ldr	r3, [pc, #152]	; (1c368 <radio_rx_fc_set+0x9c>)
   1c2d0:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
   1c2d4:	b912      	cbnz	r2, 1c2dc <radio_rx_fc_set+0x10>
	return 0;
   1c2d6:	2100      	movs	r1, #0
}
   1c2d8:	4608      	mov	r0, r1
   1c2da:	bd30      	pop	{r4, r5, pc}
		u8_t req = _radio.fc_req;
   1c2dc:	f893 5178 	ldrb.w	r5, [r3, #376]	; 0x178
		u8_t ack = _radio.fc_ack;
   1c2e0:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
		u8_t req = _radio.fc_req;
   1c2e4:	b2ed      	uxtb	r5, r5
		if (fc) {
   1c2e6:	b351      	cbz	r1, 1c33e <radio_rx_fc_set+0x72>
			if (handle != 0xffff) {
   1c2e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c2ec:	4288      	cmp	r0, r1
   1c2ee:	d0f2      	beq.n	1c2d6 <radio_rx_fc_set+0xa>
	if (req == ack) {
   1c2f0:	4295      	cmp	r5, r2
   1c2f2:	d119      	bne.n	1c328 <radio_rx_fc_set+0x5c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   1c2f4:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   1c2f8:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
   1c2fc:	4291      	cmp	r1, r2
   1c2fe:	d111      	bne.n	1c324 <radio_rx_fc_set+0x58>
				ack1 = TRIPLE_BUFFER_SIZE;
   1c300:	2d00      	cmp	r5, #0
   1c302:	bf14      	ite	ne
   1c304:	462a      	movne	r2, r5
   1c306:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   1c308:	3a01      	subs	r2, #1
   1c30a:	b2d2      	uxtb	r2, r2
   1c30c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   1c310:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
			if (req != _radio.fc_req) {
   1c314:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
			_radio.fc_handle[--ack1] = handle;
   1c318:	f8a1 0172 	strh.w	r0, [r1, #370]	; 0x172
			if (req != _radio.fc_req) {
   1c31c:	4295      	cmp	r5, r2
   1c31e:	d0da      	beq.n	1c2d6 <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
   1c320:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
		return 1;
   1c324:	2101      	movs	r1, #1
   1c326:	e7d7      	b.n	1c2d8 <radio_rx_fc_set+0xc>
	} else if (((req == 0) &&
   1c328:	b925      	cbnz	r5, 1c334 <radio_rx_fc_set+0x68>
   1c32a:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   1c32e:	4283      	cmp	r3, r0
   1c330:	d1f8      	bne.n	1c324 <radio_rx_fc_set+0x58>
   1c332:	e7d0      	b.n	1c2d6 <radio_rx_fc_set+0xa>
   1c334:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   1c338:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
   1c33c:	e7f7      	b.n	1c32e <radio_rx_fc_set+0x62>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1c33e:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   1c342:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   1c346:	42a0      	cmp	r0, r4
   1c348:	d1c5      	bne.n	1c2d6 <radio_rx_fc_set+0xa>
   1c34a:	4295      	cmp	r5, r2
   1c34c:	d0c3      	beq.n	1c2d6 <radio_rx_fc_set+0xa>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1c34e:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
			_radio.fc_ack = req;
   1c352:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1c356:	42a0      	cmp	r0, r4
   1c358:	d0bd      	beq.n	1c2d6 <radio_rx_fc_set+0xa>
			    (req == _radio.fc_req)) {
   1c35a:	f893 0178 	ldrb.w	r0, [r3, #376]	; 0x178
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1c35e:	42a8      	cmp	r0, r5
   1c360:	d1b9      	bne.n	1c2d6 <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
   1c362:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
   1c366:	e7b7      	b.n	1c2d8 <radio_rx_fc_set+0xc>
   1c368:	20000fb4 	.word	0x20000fb4

0001c36c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   1c36c:	4801      	ldr	r0, [pc, #4]	; (1c374 <ll_tx_mem_acquire+0x8>)
   1c36e:	f007 bf7b 	b.w	24268 <mem_acquire>
   1c372:	bf00      	nop
   1c374:	20001110 	.word	0x20001110

0001c378 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   1c378:	4901      	ldr	r1, [pc, #4]	; (1c380 <ll_tx_mem_release+0x8>)
   1c37a:	f007 bf8e 	b.w	2429a <mem_release>
   1c37e:	bf00      	nop
   1c380:	20001110 	.word	0x20001110

0001c384 <ll_tx_mem_enqueue>:

int ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   1c384:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   1c386:	4d3a      	ldr	r5, [pc, #232]	; (1c470 <ll_tx_mem_enqueue+0xec>)
   1c388:	f895 416e 	ldrb.w	r4, [r5, #366]	; 0x16e
	if (last == _radio.packet_tx_count) {
   1c38c:	f895 316c 	ldrb.w	r3, [r5, #364]	; 0x16c
	last = _radio.packet_tx_last + 1;
   1c390:	3401      	adds	r4, #1
{
   1c392:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   1c394:	b2e4      	uxtb	r4, r4
{
   1c396:	4607      	mov	r7, r0
   1c398:	460e      	mov	r6, r1
		last = 0U;
   1c39a:	42a3      	cmp	r3, r4
   1c39c:	bf08      	it	eq
   1c39e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   1c3a0:	f7fe fa8c 	bl	1a8bc <connection_get>
	if (!conn) {
   1c3a4:	2800      	cmp	r0, #0
   1c3a6:	d05c      	beq.n	1c462 <ll_tx_mem_enqueue+0xde>
		return -EINVAL;
	}

	if (last == _radio.packet_tx_first) {
   1c3a8:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
   1c3ac:	42a3      	cmp	r3, r4
   1c3ae:	d05b      	beq.n	1c468 <ll_tx_mem_enqueue+0xe4>
		return -ENOBUFS;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   1c3b0:	f8b5 3160 	ldrh.w	r3, [r5, #352]	; 0x160
   1c3b4:	7972      	ldrb	r2, [r6, #5]
   1c3b6:	3b07      	subs	r3, #7
   1c3b8:	429a      	cmp	r2, r3
   1c3ba:	d913      	bls.n	1c3e4 <ll_tx_mem_enqueue+0x60>
   1c3bc:	2301      	movs	r3, #1
   1c3be:	f04f 0100 	mov.w	r1, #0
   1c3c2:	f363 0107 	bfi	r1, r3, #0, #8
   1c3c6:	4a2b      	ldr	r2, [pc, #172]	; (1c474 <ll_tx_mem_enqueue+0xf0>)
   1c3c8:	4b2b      	ldr	r3, [pc, #172]	; (1c478 <ll_tx_mem_enqueue+0xf4>)
   1c3ca:	482c      	ldr	r0, [pc, #176]	; (1c47c <ll_tx_mem_enqueue+0xf8>)
   1c3cc:	1a9b      	subs	r3, r3, r2
   1c3ce:	08db      	lsrs	r3, r3, #3
   1c3d0:	f363 118f 	bfi	r1, r3, #6, #10
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1c3d4:	f004 fc16 	bl	20c04 <log_0>
   1c3d8:	4040      	eors	r0, r0
   1c3da:	f380 8811 	msr	BASEPRI, r0
   1c3de:	f04f 0004 	mov.w	r0, #4
   1c3e2:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   1c3e4:	f895 216e 	ldrb.w	r2, [r5, #366]	; 0x16e
   1c3e8:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1c3ec:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   1c3f0:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   1c3f4:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   1c3f6:	f885 416e 	strb.w	r4, [r5, #366]	; 0x16e
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1c3fa:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1c3fe:	2b00      	cmp	r3, #0
   1c400:	db02      	blt.n	1c408 <ll_tx_mem_enqueue+0x84>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   1c402:	2000      	movs	r0, #0
}
   1c404:	b009      	add	sp, #36	; 0x24
   1c406:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1c408:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1c40a:	2b00      	cmp	r3, #0
   1c40c:	d0f9      	beq.n	1c402 <ll_tx_mem_enqueue+0x7e>
   1c40e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   1c412:	f012 0302 	ands.w	r3, r2, #2
   1c416:	d1f4      	bne.n	1c402 <ll_tx_mem_enqueue+0x7e>
		conn->slave.latency_cancel = 1U;
   1c418:	f042 0202 	orr.w	r2, r2, #2
   1c41c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1c420:	4917      	ldr	r1, [pc, #92]	; (1c480 <ll_tx_mem_enqueue+0xfc>)
				 RADIO_TICKER_ID_FIRST_CONNECTION +
   1c422:	f890 2020 	ldrb.w	r2, [r0, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1c426:	9006      	str	r0, [sp, #24]
   1c428:	e9cd 3104 	strd	r3, r1, [sp, #16]
				 RADIO_TICKER_ID_FIRST_CONNECTION +
   1c42c:	3207      	adds	r2, #7
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1c42e:	2101      	movs	r1, #1
   1c430:	e9cd 3102 	strd	r3, r1, [sp, #8]
   1c434:	e9cd 3300 	strd	r3, r3, [sp]
   1c438:	4618      	mov	r0, r3
   1c43a:	b2d2      	uxtb	r2, r2
   1c43c:	2103      	movs	r1, #3
   1c43e:	f7fc fe75 	bl	1912c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1c442:	f030 0302 	bics.w	r3, r0, #2
   1c446:	d0dc      	beq.n	1c402 <ll_tx_mem_enqueue+0x7e>
   1c448:	2301      	movs	r3, #1
   1c44a:	f04f 0100 	mov.w	r1, #0
   1c44e:	f363 0107 	bfi	r1, r3, #0, #8
   1c452:	4a08      	ldr	r2, [pc, #32]	; (1c474 <ll_tx_mem_enqueue+0xf0>)
   1c454:	4b08      	ldr	r3, [pc, #32]	; (1c478 <ll_tx_mem_enqueue+0xf4>)
   1c456:	480b      	ldr	r0, [pc, #44]	; (1c484 <ll_tx_mem_enqueue+0x100>)
   1c458:	1a9b      	subs	r3, r3, r2
   1c45a:	08db      	lsrs	r3, r3, #3
   1c45c:	f363 118f 	bfi	r1, r3, #6, #10
   1c460:	e7b8      	b.n	1c3d4 <ll_tx_mem_enqueue+0x50>
		return -EINVAL;
   1c462:	f06f 0015 	mvn.w	r0, #21
   1c466:	e7cd      	b.n	1c404 <ll_tx_mem_enqueue+0x80>
		return -ENOBUFS;
   1c468:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c46c:	e7ca      	b.n	1c404 <ll_tx_mem_enqueue+0x80>
   1c46e:	bf00      	nop
   1c470:	20000fb4 	.word	0x20000fb4
   1c474:	00025880 	.word	0x00025880
   1c478:	000258b0 	.word	0x000258b0
   1c47c:	0002c523 	.word	0x0002c523
   1c480:	0001a85d 	.word	0x0001a85d
   1c484:	0002c1be 	.word	0x0002c1be

0001c488 <radio_adv_disable>:
{
   1c488:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   1c48a:	2103      	movs	r1, #3
   1c48c:	2005      	movs	r0, #5
   1c48e:	f7fe fa2d 	bl	1a8ec <role_disable>
	if (!status) {
   1c492:	4606      	mov	r6, r0
   1c494:	b9d8      	cbnz	r0, 1c4ce <radio_adv_disable+0x46>
		_radio.advertiser.is_enabled = 0U;
   1c496:	4c0f      	ldr	r4, [pc, #60]	; (1c4d4 <radio_adv_disable+0x4c>)
   1c498:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1c49c:	f360 12c7 	bfi	r2, r0, #7, #1
   1c4a0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   1c4a4:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   1c4a8:	07d3      	lsls	r3, r2, #31
   1c4aa:	d401      	bmi.n	1c4b0 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   1c4ac:	f008 fa64 	bl	24978 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   1c4b0:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		if (conn) {
   1c4b4:	b15d      	cbz	r5, 1c4ce <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   1c4b6:	2300      	movs	r3, #0
			mem_release(hdr->link, &_radio.link_rx_free);
   1c4b8:	4907      	ldr	r1, [pc, #28]	; (1c4d8 <radio_adv_disable+0x50>)
   1c4ba:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
			_radio.advertiser.conn = NULL;
   1c4be:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(hdr->link, &_radio.link_rx_free);
   1c4c2:	f007 feea 	bl	2429a <mem_release>
			mem_release(conn, &_radio.conn_free);
   1c4c6:	4905      	ldr	r1, [pc, #20]	; (1c4dc <radio_adv_disable+0x54>)
   1c4c8:	4628      	mov	r0, r5
   1c4ca:	f007 fee6 	bl	2429a <mem_release>
}
   1c4ce:	4630      	mov	r0, r6
   1c4d0:	bd70      	pop	{r4, r5, r6, pc}
   1c4d2:	bf00      	nop
   1c4d4:	20000fb4 	.word	0x20000fb4
   1c4d8:	200010f4 	.word	0x200010f4
   1c4dc:	200010c0 	.word	0x200010c0

0001c4e0 <radio_scan_disable>:
{
   1c4e0:	b510      	push	{r4, lr}
	if (scanner && _radio.scanner.conn) {
   1c4e2:	b118      	cbz	r0, 1c4ec <radio_scan_disable+0xc>
   1c4e4:	4b0e      	ldr	r3, [pc, #56]	; (1c520 <radio_scan_disable+0x40>)
   1c4e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1c4ea:	b9bb      	cbnz	r3, 1c51c <radio_scan_disable+0x3c>
	status = role_disable(RADIO_TICKER_ID_SCAN,
   1c4ec:	2104      	movs	r1, #4
   1c4ee:	2006      	movs	r0, #6
   1c4f0:	f7fe f9fc 	bl	1a8ec <role_disable>
	if (!status && !_radio.scanner.conn) {
   1c4f4:	4604      	mov	r4, r0
   1c4f6:	b978      	cbnz	r0, 1c518 <radio_scan_disable+0x38>
   1c4f8:	4b09      	ldr	r3, [pc, #36]	; (1c520 <radio_scan_disable+0x40>)
   1c4fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1c4fe:	b95a      	cbnz	r2, 1c518 <radio_scan_disable+0x38>
		_radio.scanner.is_enabled = 0U;
   1c500:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   1c504:	f360 0200 	bfi	r2, r0, #0, #1
   1c508:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   1c50c:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
   1c510:	2b00      	cmp	r3, #0
   1c512:	db01      	blt.n	1c518 <radio_scan_disable+0x38>
			ll_adv_scan_state_cb(0);
   1c514:	f008 fa30 	bl	24978 <ll_adv_scan_state_cb>
}
   1c518:	4620      	mov	r0, r4
   1c51a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c51c:	240c      	movs	r4, #12
   1c51e:	e7fb      	b.n	1c518 <radio_scan_disable+0x38>
   1c520:	20000fb4 	.word	0x20000fb4

0001c524 <ll_rx_dequeue>:
{
   1c524:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1c526:	4d54      	ldr	r5, [pc, #336]	; (1c678 <ll_rx_dequeue+0x154>)
	struct radio_pdu_node_rx *node_rx = NULL;
   1c528:	2300      	movs	r3, #0
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1c52a:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
	struct radio_pdu_node_rx *node_rx = NULL;
   1c52e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1c530:	aa01      	add	r2, sp, #4
   1c532:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1c536:	f007 feee 	bl	24316 <memq_dequeue>
	LL_ASSERT(link);
   1c53a:	462c      	mov	r4, r5
   1c53c:	b998      	cbnz	r0, 1c566 <ll_rx_dequeue+0x42>
   1c53e:	2301      	movs	r3, #1
   1c540:	f04f 0100 	mov.w	r1, #0
   1c544:	f363 0107 	bfi	r1, r3, #0, #8
   1c548:	4a4c      	ldr	r2, [pc, #304]	; (1c67c <ll_rx_dequeue+0x158>)
   1c54a:	4b4d      	ldr	r3, [pc, #308]	; (1c680 <ll_rx_dequeue+0x15c>)
   1c54c:	484d      	ldr	r0, [pc, #308]	; (1c684 <ll_rx_dequeue+0x160>)
   1c54e:	1a9b      	subs	r3, r3, r2
   1c550:	08db      	lsrs	r3, r3, #3
   1c552:	f363 118f 	bfi	r1, r3, #6, #10
		LL_ASSERT(_radio.link_rx_data_quota <
   1c556:	f004 fb55 	bl	20c04 <log_0>
   1c55a:	4040      	eors	r0, r0
   1c55c:	f380 8811 	msr	BASEPRI, r0
   1c560:	f04f 0004 	mov.w	r0, #4
   1c564:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   1c566:	f505 71a0 	add.w	r1, r5, #320	; 0x140
   1c56a:	f007 fe96 	bl	2429a <mem_release>
	switch (node_rx->hdr.type) {
   1c56e:	9a01      	ldr	r2, [sp, #4]
   1c570:	7911      	ldrb	r1, [r2, #4]
   1c572:	290d      	cmp	r1, #13
   1c574:	d807      	bhi.n	1c586 <ll_rx_dequeue+0x62>
   1c576:	2301      	movs	r3, #1
   1c578:	408b      	lsls	r3, r1
   1c57a:	f642 5014 	movw	r0, #11540	; 0x2d14
   1c57e:	4203      	tst	r3, r0
   1c580:	d10e      	bne.n	1c5a0 <ll_rx_dequeue+0x7c>
   1c582:	0598      	lsls	r0, r3, #22
   1c584:	d423      	bmi.n	1c5ce <ll_rx_dequeue+0xaa>
		LL_ASSERT(0);
   1c586:	2301      	movs	r3, #1
   1c588:	f04f 0100 	mov.w	r1, #0
   1c58c:	f363 0107 	bfi	r1, r3, #0, #8
   1c590:	4a3a      	ldr	r2, [pc, #232]	; (1c67c <ll_rx_dequeue+0x158>)
   1c592:	4b3b      	ldr	r3, [pc, #236]	; (1c680 <ll_rx_dequeue+0x15c>)
   1c594:	483c      	ldr	r0, [pc, #240]	; (1c688 <ll_rx_dequeue+0x164>)
   1c596:	1a9b      	subs	r3, r3, r2
   1c598:	08db      	lsrs	r3, r3, #3
   1c59a:	f363 118f 	bfi	r1, r3, #6, #10
   1c59e:	e7da      	b.n	1c556 <ll_rx_dequeue+0x32>
		LL_ASSERT(_radio.link_rx_data_quota <
   1c5a0:	f895 0138 	ldrb.w	r0, [r5, #312]	; 0x138
   1c5a4:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
   1c5a8:	3801      	subs	r0, #1
   1c5aa:	4283      	cmp	r3, r0
   1c5ac:	db0c      	blt.n	1c5c8 <ll_rx_dequeue+0xa4>
   1c5ae:	2301      	movs	r3, #1
   1c5b0:	f04f 0100 	mov.w	r1, #0
   1c5b4:	f363 0107 	bfi	r1, r3, #0, #8
   1c5b8:	4a30      	ldr	r2, [pc, #192]	; (1c67c <ll_rx_dequeue+0x158>)
   1c5ba:	4b31      	ldr	r3, [pc, #196]	; (1c680 <ll_rx_dequeue+0x15c>)
   1c5bc:	4833      	ldr	r0, [pc, #204]	; (1c68c <ll_rx_dequeue+0x168>)
   1c5be:	1a9b      	subs	r3, r3, r2
   1c5c0:	08db      	lsrs	r3, r3, #3
   1c5c2:	f363 118f 	bfi	r1, r3, #6, #10
   1c5c6:	e7c6      	b.n	1c556 <ll_rx_dequeue+0x32>
		_radio.link_rx_data_quota++;
   1c5c8:	3301      	adds	r3, #1
   1c5ca:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1c5ce:	2908      	cmp	r1, #8
   1c5d0:	d140      	bne.n	1c654 <ll_rx_dequeue+0x130>
		if ((radio_le_conn_cmplt->status == BT_HCI_ERR_ADV_TIMEOUT) ||
   1c5d2:	7a13      	ldrb	r3, [r2, #8]
   1c5d4:	2b3c      	cmp	r3, #60	; 0x3c
   1c5d6:	d012      	beq.n	1c5fe <ll_rx_dequeue+0xda>
   1c5d8:	7a52      	ldrb	r2, [r2, #9]
   1c5da:	bb32      	cbnz	r2, 1c62a <ll_rx_dequeue+0x106>
			LL_ASSERT(_radio.scanner.is_enabled);
   1c5dc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1c5e0:	07d9      	lsls	r1, r3, #31
   1c5e2:	d439      	bmi.n	1c658 <ll_rx_dequeue+0x134>
   1c5e4:	2301      	movs	r3, #1
   1c5e6:	f04f 0100 	mov.w	r1, #0
   1c5ea:	f363 0107 	bfi	r1, r3, #0, #8
   1c5ee:	4a23      	ldr	r2, [pc, #140]	; (1c67c <ll_rx_dequeue+0x158>)
   1c5f0:	4b23      	ldr	r3, [pc, #140]	; (1c680 <ll_rx_dequeue+0x15c>)
   1c5f2:	4827      	ldr	r0, [pc, #156]	; (1c690 <ll_rx_dequeue+0x16c>)
   1c5f4:	1a9b      	subs	r3, r3, r2
   1c5f6:	08db      	lsrs	r3, r3, #3
   1c5f8:	f363 118f 	bfi	r1, r3, #6, #10
   1c5fc:	e7ab      	b.n	1c556 <ll_rx_dequeue+0x32>
				_radio.advertiser.conn = NULL;
   1c5fe:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   1c600:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   1c604:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   1c608:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1c60c:	2b00      	cmp	r3, #0
   1c60e:	db0e      	blt.n	1c62e <ll_rx_dequeue+0x10a>
   1c610:	2301      	movs	r3, #1
   1c612:	f04f 0100 	mov.w	r1, #0
   1c616:	f363 0107 	bfi	r1, r3, #0, #8
   1c61a:	4a18      	ldr	r2, [pc, #96]	; (1c67c <ll_rx_dequeue+0x158>)
   1c61c:	4b18      	ldr	r3, [pc, #96]	; (1c680 <ll_rx_dequeue+0x15c>)
   1c61e:	481d      	ldr	r0, [pc, #116]	; (1c694 <ll_rx_dequeue+0x170>)
   1c620:	1a9b      	subs	r3, r3, r2
   1c622:	08db      	lsrs	r3, r3, #3
   1c624:	f363 118f 	bfi	r1, r3, #6, #10
   1c628:	e795      	b.n	1c556 <ll_rx_dequeue+0x32>
		struct connection *conn = NULL;
   1c62a:	2500      	movs	r5, #0
   1c62c:	e7ec      	b.n	1c608 <ll_rx_dequeue+0xe4>
			_radio.advertiser.is_enabled = 0U;
   1c62e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1c632:	f36f 13c7 	bfc	r3, #7, #1
   1c636:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   1c63a:	b995      	cbnz	r5, 1c662 <ll_rx_dequeue+0x13e>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   1c63c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   1c640:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   1c644:	f000 0001 	and.w	r0, r0, #1
   1c648:	0040      	lsls	r0, r0, #1
		if (!bm) {
   1c64a:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   1c64e:	d101      	bne.n	1c654 <ll_rx_dequeue+0x130>
			ll_adv_scan_state_cb(0);
   1c650:	f008 f992 	bl	24978 <ll_adv_scan_state_cb>
}
   1c654:	b003      	add	sp, #12
   1c656:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0U;
   1c658:	f362 0300 	bfi	r3, r2, #0, #1
   1c65c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		if (conn) {
   1c660:	e7ec      	b.n	1c63c <ll_rx_dequeue+0x118>
			mem_release(node_rx->hdr.link,
   1c662:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   1c666:	490c      	ldr	r1, [pc, #48]	; (1c698 <ll_rx_dequeue+0x174>)
   1c668:	f007 fe17 	bl	2429a <mem_release>
			mem_release(conn, &_radio.conn_free);
   1c66c:	490b      	ldr	r1, [pc, #44]	; (1c69c <ll_rx_dequeue+0x178>)
   1c66e:	4628      	mov	r0, r5
   1c670:	f007 fe13 	bl	2429a <mem_release>
   1c674:	e7e2      	b.n	1c63c <ll_rx_dequeue+0x118>
   1c676:	bf00      	nop
   1c678:	20000fb4 	.word	0x20000fb4
   1c67c:	00025880 	.word	0x00025880
   1c680:	000258b0 	.word	0x000258b0
   1c684:	0002c70c 	.word	0x0002c70c
   1c688:	0002c060 	.word	0x0002c060
   1c68c:	0002c480 	.word	0x0002c480
   1c690:	0002c4f8 	.word	0x0002c4f8
   1c694:	0002c4ca 	.word	0x0002c4ca
   1c698:	200010f4 	.word	0x200010f4
   1c69c:	200010c0 	.word	0x200010c0

0001c6a0 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1c6a0:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1c6a2:	4b07      	ldr	r3, [pc, #28]	; (1c6c0 <rtc0_nrf5_isr+0x20>)
   1c6a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1c6a8:	b122      	cbz	r2, 1c6b4 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1c6aa:	2000      	movs	r0, #0
   1c6ac:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   1c6b0:	f7fc fce0 	bl	19074 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1c6b4:	2000      	movs	r0, #0

	DEBUG_TICKER_ISR(0);
}
   1c6b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   1c6ba:	f7fc b81f 	b.w	186fc <mayfly_run>
   1c6be:	bf00      	nop
   1c6c0:	4000b000 	.word	0x4000b000

0001c6c4 <radio_event_callback>:
	k_sem_give(sem_recv);
   1c6c4:	4b01      	ldr	r3, [pc, #4]	; (1c6cc <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1c6c6:	6818      	ldr	r0, [r3, #0]
   1c6c8:	f002 ba0a 	b.w	1eae0 <z_impl_k_sem_give>
   1c6cc:	20001940 	.word	0x20001940

0001c6d0 <ll_init>:

	DEBUG_TICKER_JOB(0);
}

int ll_init(struct k_sem *sem_rx)
{
   1c6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   1c6d2:	4b46      	ldr	r3, [pc, #280]	; (1c7ec <ll_init+0x11c>)
{
   1c6d4:	b087      	sub	sp, #28
	sem_recv = sem_rx;
   1c6d6:	6018      	str	r0, [r3, #0]
   1c6d8:	4845      	ldr	r0, [pc, #276]	; (1c7f0 <ll_init+0x120>)
   1c6da:	f001 fc29 	bl	1df30 <z_impl_device_get_binding>

	clk_k32 = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clk_k32) {
   1c6de:	b918      	cbnz	r0, 1c6e8 <ll_init+0x18>
		return -ENODEV;
   1c6e0:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI5_IRQn);

	return 0;
}
   1c6e4:	b007      	add	sp, #28
   1c6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->on(dev, sys);
   1c6e8:	6843      	ldr	r3, [r0, #4]
   1c6ea:	2101      	movs	r1, #1
   1c6ec:	681b      	ldr	r3, [r3, #0]
   1c6ee:	4798      	blx	r3
   1c6f0:	4840      	ldr	r0, [pc, #256]	; (1c7f4 <ll_init+0x124>)
   1c6f2:	f001 fc1d 	bl	1df30 <z_impl_device_get_binding>
	if (!entropy) {
   1c6f6:	4607      	mov	r7, r0
   1c6f8:	2800      	cmp	r0, #0
   1c6fa:	d0f1      	beq.n	1c6e0 <ll_init+0x10>
	cntr_init();
   1c6fc:	f000 fa5c 	bl	1cbb8 <cntr_init>
	mayfly_init();
   1c700:	f7fb ff5a 	bl	185b8 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1c704:	4b3c      	ldr	r3, [pc, #240]	; (1c7f8 <ll_init+0x128>)
   1c706:	2208      	movs	r2, #8
   1c708:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1c70a:	2403      	movs	r4, #3
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   1c70c:	4a3b      	ldr	r2, [pc, #236]	; (1c7fc <ll_init+0x12c>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1c70e:	721c      	strb	r4, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1c710:	2000      	movs	r0, #0
   1c712:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1c714:	761c      	strb	r4, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   1c716:	9205      	str	r2, [sp, #20]
   1c718:	4a39      	ldr	r2, [pc, #228]	; (1c800 <ll_init+0x130>)
   1c71a:	9204      	str	r2, [sp, #16]
   1c71c:	4a39      	ldr	r2, [pc, #228]	; (1c804 <ll_init+0x134>)
   1c71e:	9203      	str	r2, [sp, #12]
   1c720:	4a39      	ldr	r2, [pc, #228]	; (1c808 <ll_init+0x138>)
   1c722:	9202      	str	r2, [sp, #8]
   1c724:	220e      	movs	r2, #14
   1c726:	e9cd 3200 	strd	r3, r2, [sp]
   1c72a:	2109      	movs	r1, #9
   1c72c:	2304      	movs	r3, #4
   1c72e:	4a37      	ldr	r2, [pc, #220]	; (1c80c <ll_init+0x13c>)
   1c730:	f7fc fc62 	bl	18ff8 <ticker_init>
	LL_ASSERT(!err);
   1c734:	b198      	cbz	r0, 1c75e <ll_init+0x8e>
   1c736:	2301      	movs	r3, #1
   1c738:	f04f 0100 	mov.w	r1, #0
   1c73c:	4a34      	ldr	r2, [pc, #208]	; (1c810 <ll_init+0x140>)
   1c73e:	4835      	ldr	r0, [pc, #212]	; (1c814 <ll_init+0x144>)
   1c740:	f363 0107 	bfi	r1, r3, #0, #8
   1c744:	4b34      	ldr	r3, [pc, #208]	; (1c818 <ll_init+0x148>)
   1c746:	1a9b      	subs	r3, r3, r2
   1c748:	40e3      	lsrs	r3, r4
   1c74a:	f363 118f 	bfi	r1, r3, #6, #10
   1c74e:	f004 fa59 	bl	20c04 <log_0>
   1c752:	4040      	eors	r0, r0
   1c754:	f380 8811 	msr	BASEPRI, r0
   1c758:	f04f 0004 	mov.w	r0, #4
   1c75c:	df02      	svc	2
   1c75e:	482f      	ldr	r0, [pc, #188]	; (1c81c <ll_init+0x14c>)
   1c760:	f001 fbe6 	bl	1df30 <z_impl_device_get_binding>
	if (!clk_m16) {
   1c764:	2800      	cmp	r0, #0
   1c766:	d0bb      	beq.n	1c6e0 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF_K32SRC_ACCURACY, entropy,
   1c768:	4b2d      	ldr	r3, [pc, #180]	; (1c820 <ll_init+0x150>)
   1c76a:	9304      	str	r3, [sp, #16]
   1c76c:	2501      	movs	r5, #1
   1c76e:	231b      	movs	r3, #27
   1c770:	f44f 765a 	mov.w	r6, #872	; 0x368
   1c774:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1c778:	9401      	str	r4, [sp, #4]
   1c77a:	9605      	str	r6, [sp, #20]
   1c77c:	9500      	str	r5, [sp, #0]
   1c77e:	462b      	mov	r3, r5
   1c780:	463a      	mov	r2, r7
   1c782:	2107      	movs	r1, #7
   1c784:	f7ff fc1c 	bl	1bfc0 <radio_init>
	if (err) {
   1c788:	4604      	mov	r4, r0
   1c78a:	b188      	cbz	r0, 1c7b0 <ll_init+0xe0>
   1c78c:	4920      	ldr	r1, [pc, #128]	; (1c810 <ll_init+0x140>)
   1c78e:	4a22      	ldr	r2, [pc, #136]	; (1c818 <ll_init+0x148>)
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   1c790:	f04f 0300 	mov.w	r3, #0
   1c794:	1a52      	subs	r2, r2, r1
   1c796:	08d2      	lsrs	r2, r2, #3
   1c798:	f365 0307 	bfi	r3, r5, #0, #8
   1c79c:	f362 138f 	bfi	r3, r2, #6, #10
   1c7a0:	4601      	mov	r1, r0
   1c7a2:	4632      	mov	r2, r6
   1c7a4:	481f      	ldr	r0, [pc, #124]	; (1c824 <ll_init+0x154>)
   1c7a6:	f004 fa4e 	bl	20c46 <log_2>
		return -ENOMEM;
   1c7aa:	f06f 000b 	mvn.w	r0, #11
   1c7ae:	e799      	b.n	1c6e4 <ll_init+0x14>
	ll_filter_reset(true);
   1c7b0:	4628      	mov	r0, r5
   1c7b2:	f000 f9f5 	bl	1cba0 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1c7b6:	4622      	mov	r2, r4
   1c7b8:	4621      	mov	r1, r4
   1c7ba:	4628      	mov	r0, r5
   1c7bc:	f7e8 fcb4 	bl	5128 <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1c7c0:	4622      	mov	r2, r4
   1c7c2:	4621      	mov	r1, r4
   1c7c4:	200b      	movs	r0, #11
   1c7c6:	f7e8 fcaf 	bl	5128 <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI5_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi5_nrf5_isr,
   1c7ca:	4622      	mov	r2, r4
   1c7cc:	4621      	mov	r1, r4
   1c7ce:	2019      	movs	r0, #25
   1c7d0:	f7e8 fcaa 	bl	5128 <z_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1c7d4:	4628      	mov	r0, r5
   1c7d6:	f7e8 fc75 	bl	50c4 <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   1c7da:	200b      	movs	r0, #11
   1c7dc:	f7e8 fc72 	bl	50c4 <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI5_IRQn);
   1c7e0:	2019      	movs	r0, #25
   1c7e2:	f7e8 fc6f 	bl	50c4 <z_arch_irq_enable>
	return 0;
   1c7e6:	4620      	mov	r0, r4
   1c7e8:	e77c      	b.n	1c6e4 <ll_init+0x14>
   1c7ea:	bf00      	nop
   1c7ec:	20001940 	.word	0x20001940
   1c7f0:	00026722 	.word	0x00026722
   1c7f4:	0002669f 	.word	0x0002669f
   1c7f8:	20001920 	.word	0x20001920
   1c7fc:	00024bbb 	.word	0x00024bbb
   1c800:	0001d591 	.word	0x0001d591
   1c804:	0001d52d 	.word	0x0001d52d
   1c808:	20001680 	.word	0x20001680
   1c80c:	20001518 	.word	0x20001518
   1c810:	00025880 	.word	0x00025880
   1c814:	0002ca35 	.word	0x0002ca35
   1c818:	000258b8 	.word	0x000258b8
   1c81c:	0002672c 	.word	0x0002672c
   1c820:	200011b0 	.word	0x200011b0
   1c824:	0002ca4b 	.word	0x0002ca4b

0001c828 <ll_adv_params_set>:
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u8_t ll_adv_params_set(u16_t interval, u8_t adv_type,
		       u8_t own_addr_type, u8_t direct_addr_type,
		       u8_t const *const direct_addr, u8_t chan_map,
		       u8_t filter_policy)
{
   1c828:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c82c:	461e      	mov	r6, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1c82e:	4b33      	ldr	r3, [pc, #204]	; (1c8fc <ll_adv_params_set+0xd4>)
   1c830:	9300      	str	r3, [sp, #0]
{
   1c832:	4604      	mov	r4, r0
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1c834:	2301      	movs	r3, #1
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled(0)) {
   1c836:	2000      	movs	r0, #0
{
   1c838:	4688      	mov	r8, r1
   1c83a:	4615      	mov	r5, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1c83c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (ll_adv_is_enabled(0)) {
   1c840:	f7ff fc90 	bl	1c164 <ll_adv_is_enabled>
   1c844:	2800      	cmp	r0, #0
   1c846:	d154      	bne.n	1c8f2 <ll_adv_params_set+0xca>
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
   1c848:	4a2d      	ldr	r2, [pc, #180]	; (1c900 <ll_adv_params_set+0xd8>)
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chan_map = chan_map;
   1c84a:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   1c84e:	7813      	ldrb	r3, [r2, #0]
   1c850:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   1c854:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
	if (adv_type != 0x01) {
   1c858:	f1b8 0f01 	cmp.w	r8, #1
		ll_adv.interval = 0;
   1c85c:	bf08      	it	eq
   1c85e:	2400      	moveq	r4, #0
	ll_adv.filter_policy = filter_policy;
   1c860:	f361 03c4 	bfi	r3, r1, #3, #2
   1c864:	8054      	strh	r4, [r2, #2]
   1c866:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   1c868:	f7ff fc74 	bl	1c154 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c86c:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   1c870:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c874:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
   1c878:	ab02      	add	r3, sp, #8
   1c87a:	eb03 0108 	add.w	r1, r3, r8
   1c87e:	5d03      	ldrb	r3, [r0, r4]
   1c880:	f811 2c08 	ldrb.w	r2, [r1, #-8]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   1c884:	f005 0501 	and.w	r5, r5, #1
	pdu->type = pdu_adv_type[adv_type];
   1c888:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   1c88c:	f365 1386 	bfi	r3, r5, #6, #1
	pdu->rfu = 0;
   1c890:	f003 034f 	and.w	r3, r3, #79	; 0x4f
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c894:	f003 020f 	and.w	r2, r3, #15
   1c898:	2a01      	cmp	r2, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c89a:	eb00 0704 	add.w	r7, r0, r4
	pdu->rfu = 0;
   1c89e:	5503      	strb	r3, [r0, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c8a0:	d122      	bne.n	1c8e8 <ll_adv_params_set+0xc0>
		pdu->rx_addr = direct_addr_type;
   1c8a2:	f366 13c7 	bfi	r3, r6, #7, #1
   1c8a6:	5503      	strb	r3, [r0, r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1c8a8:	2206      	movs	r2, #6
   1c8aa:	9908      	ldr	r1, [sp, #32]
   1c8ac:	f107 0008 	add.w	r0, r7, #8
   1c8b0:	f005 fae9 	bl	21e86 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1c8b4:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   1c8b6:	707b      	strb	r3, [r7, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   1c8b8:	f7ff fc50 	bl	1c15c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1c8bc:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1c8c0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1c8c4:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1c8c8:	18c1      	adds	r1, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   1c8ca:	5cc2      	ldrb	r2, [r0, r3]
   1c8cc:	f365 1286 	bfi	r2, r5, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1c8d0:	f002 0240 	and.w	r2, r2, #64	; 0x40
   1c8d4:	f042 0204 	orr.w	r2, r2, #4
   1c8d8:	54c2      	strb	r2, [r0, r3]
	pdu->rx_addr = 0;
	if (pdu->len == 0) {
   1c8da:	7848      	ldrb	r0, [r1, #1]
   1c8dc:	b958      	cbnz	r0, 1c8f6 <ll_adv_params_set+0xce>
		pdu->len = BDADDR_SIZE;
   1c8de:	2306      	movs	r3, #6
   1c8e0:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   1c8e2:	b002      	add	sp, #8
   1c8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (pdu->len == 0) {
   1c8e8:	787b      	ldrb	r3, [r7, #1]
   1c8ea:	2b00      	cmp	r3, #0
   1c8ec:	d1e4      	bne.n	1c8b8 <ll_adv_params_set+0x90>
		pdu->len = BDADDR_SIZE;
   1c8ee:	2306      	movs	r3, #6
   1c8f0:	e7e1      	b.n	1c8b6 <ll_adv_params_set+0x8e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c8f2:	200c      	movs	r0, #12
   1c8f4:	e7f5      	b.n	1c8e2 <ll_adv_params_set+0xba>
	return 0;
   1c8f6:	2000      	movs	r0, #0
   1c8f8:	e7f3      	b.n	1c8e2 <ll_adv_params_set+0xba>
   1c8fa:	bf00      	nop
   1c8fc:	02060100 	.word	0x02060100
   1c900:	20001e8c 	.word	0x20001e8c

0001c904 <ll_adv_enable>:
u8_t ll_adv_enable(u16_t handle, u8_t enable)
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
{
   1c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1c908:	b918      	cbnz	r0, 1c912 <ll_adv_enable+0xe>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
#endif /* !CONFIG_BT_HCI_MESH_EXT */
	return status;
}
   1c90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return radio_adv_disable();
   1c90e:	f7ff bdbb 	b.w	1c488 <radio_adv_disable>
	} else if (ll_adv_is_enabled(0)) {
   1c912:	2000      	movs	r0, #0
   1c914:	f7ff fc26 	bl	1c164 <ll_adv_is_enabled>
   1c918:	4607      	mov	r7, r0
   1c91a:	bbb8      	cbnz	r0, 1c98c <ll_adv_enable+0x88>
	radio_adv_data = radio_adv_data_get();
   1c91c:	f7ff fc1a 	bl	1c154 <radio_adv_data_get>
   1c920:	4606      	mov	r6, r0
	radio_scan_data = radio_scan_data_get();
   1c922:	f7ff fc1b 	bl	1c15c <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1c926:	f896 404f 	ldrb.w	r4, [r6, #79]	; 0x4f
   1c92a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c92e:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1c932:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1c936:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1c93a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1c93e:	18c5      	adds	r5, r0, r3
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1c940:	5d30      	ldrb	r0, [r6, r4]
   1c942:	4639      	mov	r1, r7
   1c944:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1c948:	f7fc fcfe 	bl	19348 <ll_addr_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1c94c:	eb06 0804 	add.w	r8, r6, r4
			memcpy(&pdu_adv->adv_ind.addr[0],
   1c950:	2206      	movs	r2, #6
   1c952:	4601      	mov	r1, r0
   1c954:	f108 0002 	add.w	r0, r8, #2
   1c958:	f005 fa95 	bl	21e86 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1c95c:	5d30      	ldrb	r0, [r6, r4]
   1c95e:	4639      	mov	r1, r7
   1c960:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1c964:	f7fc fcf0 	bl	19348 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   1c968:	2206      	movs	r2, #6
   1c96a:	4601      	mov	r1, r0
   1c96c:	1ca8      	adds	r0, r5, #2
   1c96e:	f005 fa8a 	bl	21e86 <memcpy>
				  ll_adv.filter_policy, rl_idx);
   1c972:	4807      	ldr	r0, [pc, #28]	; (1c990 <ll_adv_enable+0x8c>)
   1c974:	7801      	ldrb	r1, [r0, #0]
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   1c976:	8840      	ldrh	r0, [r0, #2]
   1c978:	f3c1 02c1 	ubfx	r2, r1, #3, #2
   1c97c:	23ff      	movs	r3, #255	; 0xff
   1c97e:	f001 0107 	and.w	r1, r1, #7
   1c982:	f7e5 fe75 	bl	2670 <radio_adv_enable>
	return status;
   1c986:	b2c0      	uxtb	r0, r0
}
   1c988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   1c98c:	2000      	movs	r0, #0
   1c98e:	e7fb      	b.n	1c988 <ll_adv_enable+0x84>
   1c990:	20001e8c 	.word	0x20001e8c

0001c994 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u8_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1c994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c998:	4681      	mov	r9, r0
	if (ll_scan_is_enabled(0)) {
   1c99a:	2000      	movs	r0, #0
{
   1c99c:	4688      	mov	r8, r1
   1c99e:	4617      	mov	r7, r2
   1c9a0:	461e      	mov	r6, r3
	if (ll_scan_is_enabled(0)) {
   1c9a2:	f7ff fbf5 	bl	1c190 <ll_scan_is_enabled>
   1c9a6:	b978      	cbnz	r0, 1c9c8 <ll_scan_params_set+0x34>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   1c9a8:	4d08      	ldr	r5, [pc, #32]	; (1c9cc <ll_scan_params_set+0x38>)
	ll_scan.interval = interval;
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;
   1c9aa:	f89d 3020 	ldrb.w	r3, [sp, #32]
	ll_scan.type = type;
   1c9ae:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   1c9b0:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   1c9b4:	f369 0400 	bfi	r4, r9, #0, #1
	ll_scan.own_addr_type = own_addr_type;
   1c9b8:	f366 0442 	bfi	r4, r6, #1, #2
	ll_scan.filter_policy = filter_policy;
   1c9bc:	f363 04c4 	bfi	r4, r3, #3, #2
	ll_scan.window = window;
   1c9c0:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   1c9c2:	712c      	strb	r4, [r5, #4]

	return 0;
}
   1c9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c9c8:	200c      	movs	r0, #12
   1c9ca:	e7fb      	b.n	1c9c4 <ll_scan_params_set+0x30>
   1c9cc:	20001e90 	.word	0x20001e90

0001c9d0 <ll_scan_enable>:

u8_t ll_scan_enable(u8_t enable)
{
   1c9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c9d2:	b085      	sub	sp, #20
	u8_t rpa_gen = 0U;
	u32_t status;
	u32_t scan;

	if (!enable) {
   1c9d4:	b928      	cbnz	r0, 1c9e2 <ll_scan_enable+0x12>
		return radio_scan_disable(true);
   1c9d6:	2001      	movs	r0, #1
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1c9d8:	b005      	add	sp, #20
   1c9da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable(true);
   1c9de:	f7ff bd7f 	b.w	1c4e0 <radio_scan_disable>
	scan = ll_scan_is_enabled(0);
   1c9e2:	2000      	movs	r0, #0
   1c9e4:	f7ff fbd4 	bl	1c190 <ll_scan_is_enabled>
   1c9e8:	4605      	mov	r5, r0
	if (scan & BIT(2)) {
   1c9ea:	f010 0004 	ands.w	r0, r0, #4
   1c9ee:	d11c      	bne.n	1ca2a <ll_scan_enable+0x5a>
	if (scan) {
   1c9f0:	b9cd      	cbnz	r5, 1ca26 <ll_scan_enable+0x56>
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1c9f2:	4e0f      	ldr	r6, [pc, #60]	; (1ca30 <ll_scan_enable+0x60>)
   1c9f4:	7934      	ldrb	r4, [r6, #4]
   1c9f6:	f004 0701 	and.w	r7, r4, #1
   1c9fa:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1c9fe:	4629      	mov	r1, r5
   1ca00:	4620      	mov	r0, r4
   1ca02:	f7fc fca1 	bl	19348 <ll_addr_get>
   1ca06:	23ff      	movs	r3, #255	; 0xff
   1ca08:	e9cd 5302 	strd	r5, r3, [sp, #8]
				   ll_scan.filter_policy, rpa_gen,
   1ca0c:	7933      	ldrb	r3, [r6, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1ca0e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1ca12:	9301      	str	r3, [sp, #4]
   1ca14:	8873      	ldrh	r3, [r6, #2]
   1ca16:	9300      	str	r3, [sp, #0]
   1ca18:	4602      	mov	r2, r0
   1ca1a:	8833      	ldrh	r3, [r6, #0]
   1ca1c:	4621      	mov	r1, r4
   1ca1e:	4638      	mov	r0, r7
   1ca20:	f7e5 ff7a 	bl	2918 <radio_scan_enable>
	return status;
   1ca24:	b2c0      	uxtb	r0, r0
}
   1ca26:	b005      	add	sp, #20
   1ca28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	       return BT_HCI_ERR_CMD_DISALLOWED;
   1ca2a:	200c      	movs	r0, #12
   1ca2c:	e7fb      	b.n	1ca26 <ll_scan_enable+0x56>
   1ca2e:	bf00      	nop
   1ca30:	20001e90 	.word	0x20001e90

0001ca34 <ctrl_filter_get>:
	return rl[rl_idx].wl;
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
   1ca34:	b508      	push	{r3, lr}
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
   1ca36:	b998      	cbnz	r0, 1ca60 <ctrl_filter_get+0x2c>
   1ca38:	2301      	movs	r3, #1
   1ca3a:	f04f 0100 	mov.w	r1, #0
   1ca3e:	4a09      	ldr	r2, [pc, #36]	; (1ca64 <ctrl_filter_get+0x30>)
   1ca40:	4809      	ldr	r0, [pc, #36]	; (1ca68 <ctrl_filter_get+0x34>)
   1ca42:	f363 0107 	bfi	r1, r3, #0, #8
   1ca46:	4b09      	ldr	r3, [pc, #36]	; (1ca6c <ctrl_filter_get+0x38>)
   1ca48:	1a9b      	subs	r3, r3, r2
   1ca4a:	08db      	lsrs	r3, r3, #3
   1ca4c:	f363 118f 	bfi	r1, r3, #6, #10
   1ca50:	f004 f8d8 	bl	20c04 <log_0>
   1ca54:	4040      	eors	r0, r0
   1ca56:	f380 8811 	msr	BASEPRI, r0
   1ca5a:	f04f 0004 	mov.w	r0, #4
   1ca5e:	df02      	svc	2
	return &wl_filter;
#endif
}
   1ca60:	4803      	ldr	r0, [pc, #12]	; (1ca70 <ctrl_filter_get+0x3c>)
   1ca62:	bd08      	pop	{r3, pc}
   1ca64:	00025880 	.word	0x00025880
   1ca68:	0002ca80 	.word	0x0002ca80
   1ca6c:	000258c0 	.word	0x000258c0
   1ca70:	20002453 	.word	0x20002453

0001ca74 <ll_wl_clear>:
{
	return WL_SIZE;
}

u8_t ll_wl_clear(void)
{
   1ca74:	b508      	push	{r3, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1ca76:	f7ff fb7d 	bl	1c174 <radio_adv_filter_pol_get>
   1ca7a:	b108      	cbz	r0, 1ca80 <ll_wl_clear+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ca7c:	200c      	movs	r0, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0U;

	return 0;
}
   1ca7e:	bd08      	pop	{r3, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1ca80:	f7ff fb9c 	bl	1c1bc <radio_scan_filter_pol_get>
   1ca84:	f010 0001 	ands.w	r0, r0, #1
   1ca88:	d1f8      	bne.n	1ca7c <ll_wl_clear+0x8>
	filter->enable_bitmask = 0U;
   1ca8a:	4b03      	ldr	r3, [pc, #12]	; (1ca98 <ll_wl_clear+0x24>)
   1ca8c:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0U;
   1ca8e:	7058      	strb	r0, [r3, #1]
	wl_anon = 0U;
   1ca90:	4b02      	ldr	r3, [pc, #8]	; (1ca9c <ll_wl_clear+0x28>)
   1ca92:	7018      	strb	r0, [r3, #0]
	return 0;
   1ca94:	e7f3      	b.n	1ca7e <ll_wl_clear+0xa>
   1ca96:	bf00      	nop
   1ca98:	20002453 	.word	0x20002453
   1ca9c:	20002452 	.word	0x20002452

0001caa0 <ll_wl_add>:

u8_t ll_wl_add(bt_addr_le_t *addr)
{
   1caa0:	b570      	push	{r4, r5, r6, lr}
   1caa2:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1caa4:	f7ff fb66 	bl	1c174 <radio_adv_filter_pol_get>
   1caa8:	b108      	cbz	r0, 1caae <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1caaa:	200c      	movs	r0, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
   1caac:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1caae:	f7ff fb85 	bl	1c1bc <radio_scan_filter_pol_get>
   1cab2:	f010 0001 	ands.w	r0, r0, #1
   1cab6:	d1f8      	bne.n	1caaa <ll_wl_add+0xa>
	if (addr->type == ADDR_TYPE_ANON) {
   1cab8:	7823      	ldrb	r3, [r4, #0]
   1caba:	2bff      	cmp	r3, #255	; 0xff
   1cabc:	d103      	bne.n	1cac6 <ll_wl_add+0x26>
		wl_anon = 1U;
   1cabe:	4b12      	ldr	r3, [pc, #72]	; (1cb08 <ll_wl_add+0x68>)
   1cac0:	2201      	movs	r2, #1
   1cac2:	701a      	strb	r2, [r3, #0]
		return 0;
   1cac4:	e7f2      	b.n	1caac <ll_wl_add+0xc>
	if (filter->enable_bitmask == 0xFF) {
   1cac6:	4d11      	ldr	r5, [pc, #68]	; (1cb0c <ll_wl_add+0x6c>)
   1cac8:	782a      	ldrb	r2, [r5, #0]
   1caca:	2aff      	cmp	r2, #255	; 0xff
	return filter_add(&wl_filter, addr->type, addr->a.val);
   1cacc:	f104 0101 	add.w	r1, r4, #1
	if (filter->enable_bitmask == 0xFF) {
   1cad0:	d018      	beq.n	1cb04 <ll_wl_add+0x64>
	     (filter->enable_bitmask & BIT(index));
   1cad2:	fa22 f400 	lsr.w	r4, r2, r0
	for (index = 0;
   1cad6:	f014 0401 	ands.w	r4, r4, #1
   1cada:	d111      	bne.n	1cb00 <ll_wl_add+0x60>
	filter->enable_bitmask |= BIT(index);
   1cadc:	2601      	movs	r6, #1
   1cade:	4086      	lsls	r6, r0
   1cae0:	4332      	orrs	r2, r6
   1cae2:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1cae4:	f003 0301 	and.w	r3, r3, #1
   1cae8:	786a      	ldrb	r2, [r5, #1]
   1caea:	4083      	lsls	r3, r0
   1caec:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1caee:	2206      	movs	r2, #6
   1caf0:	fb02 5000 	mla	r0, r2, r0, r5
   1caf4:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1caf6:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1caf8:	f005 f9c5 	bl	21e86 <memcpy>
	return filter_add(&wl_filter, addr->type, addr->a.val);
   1cafc:	b2e0      	uxtb	r0, r4
   1cafe:	e7d5      	b.n	1caac <ll_wl_add+0xc>
	     index++) {
   1cb00:	3001      	adds	r0, #1
   1cb02:	e7e6      	b.n	1cad2 <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1cb04:	2407      	movs	r4, #7
   1cb06:	e7f9      	b.n	1cafc <ll_wl_add+0x5c>
   1cb08:	20002452 	.word	0x20002452
   1cb0c:	20002453 	.word	0x20002453

0001cb10 <ll_wl_remove>:

u8_t ll_wl_remove(bt_addr_le_t *addr)
{
   1cb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb14:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1cb16:	f7ff fb2d 	bl	1c174 <radio_adv_filter_pol_get>
   1cb1a:	b110      	cbz	r0, 1cb22 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1cb1c:	200c      	movs	r0, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
   1cb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1cb22:	f7ff fb4b 	bl	1c1bc <radio_scan_filter_pol_get>
   1cb26:	f010 0501 	ands.w	r5, r0, #1
   1cb2a:	d1f7      	bne.n	1cb1c <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1cb2c:	f897 8000 	ldrb.w	r8, [r7]
   1cb30:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1cb34:	d103      	bne.n	1cb3e <ll_wl_remove+0x2e>
		wl_anon = 0U;
   1cb36:	4b18      	ldr	r3, [pc, #96]	; (1cb98 <ll_wl_remove+0x88>)
		return 0;
   1cb38:	4628      	mov	r0, r5
		wl_anon = 0U;
   1cb3a:	701d      	strb	r5, [r3, #0]
		return 0;
   1cb3c:	e7ef      	b.n	1cb1e <ll_wl_remove+0xe>
	if (!filter->enable_bitmask) {
   1cb3e:	4c17      	ldr	r4, [pc, #92]	; (1cb9c <ll_wl_remove+0x8c>)
   1cb40:	7823      	ldrb	r3, [r4, #0]
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1cb42:	3701      	adds	r7, #1
	if (!filter->enable_bitmask) {
   1cb44:	b913      	cbnz	r3, 1cb4c <ll_wl_remove+0x3c>
		return BT_HCI_ERR_INVALID_PARAM;
   1cb46:	2512      	movs	r5, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1cb48:	b2e8      	uxtb	r0, r5
   1cb4a:	e7e8      	b.n	1cb1e <ll_wl_remove+0xe>
	index = 8;
   1cb4c:	2608      	movs	r6, #8
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1cb4e:	f104 0902 	add.w	r9, r4, #2
   1cb52:	f04f 0a06 	mov.w	sl, #6
	while (index--) {
   1cb56:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   1cb5a:	d3f4      	bcc.n	1cb46 <ll_wl_remove+0x36>
		if ((filter->enable_bitmask & BIT(index)) &&
   1cb5c:	7823      	ldrb	r3, [r4, #0]
   1cb5e:	40f3      	lsrs	r3, r6
   1cb60:	07da      	lsls	r2, r3, #31
   1cb62:	d5f8      	bpl.n	1cb56 <ll_wl_remove+0x46>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   1cb64:	7863      	ldrb	r3, [r4, #1]
   1cb66:	4133      	asrs	r3, r6
   1cb68:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   1cb6c:	07db      	lsls	r3, r3, #31
   1cb6e:	d4f2      	bmi.n	1cb56 <ll_wl_remove+0x46>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1cb70:	2206      	movs	r2, #6
   1cb72:	4639      	mov	r1, r7
   1cb74:	fb0a 9006 	mla	r0, sl, r6, r9
   1cb78:	f005 f95e 	bl	21e38 <memcmp>
		     (addr_type & 0x01)) &&
   1cb7c:	2800      	cmp	r0, #0
   1cb7e:	d1ea      	bne.n	1cb56 <ll_wl_remove+0x46>
			filter->enable_bitmask &= ~BIT(index);
   1cb80:	2301      	movs	r3, #1
   1cb82:	40b3      	lsls	r3, r6
   1cb84:	7822      	ldrb	r2, [r4, #0]
   1cb86:	43db      	mvns	r3, r3
   1cb88:	b2db      	uxtb	r3, r3
   1cb8a:	401a      	ands	r2, r3
   1cb8c:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   1cb8e:	7862      	ldrb	r2, [r4, #1]
   1cb90:	4013      	ands	r3, r2
   1cb92:	7063      	strb	r3, [r4, #1]
			return 0;
   1cb94:	e7d8      	b.n	1cb48 <ll_wl_remove+0x38>
   1cb96:	bf00      	nop
   1cb98:	20002452 	.word	0x20002452
   1cb9c:	20002453 	.word	0x20002453

0001cba0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0U;
   1cba0:	4a03      	ldr	r2, [pc, #12]	; (1cbb0 <ll_filter_reset+0x10>)
   1cba2:	2300      	movs	r3, #0
   1cba4:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0U;
   1cba6:	4a03      	ldr	r2, [pc, #12]	; (1cbb4 <ll_filter_reset+0x14>)
   1cba8:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0U;
   1cbaa:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   1cbac:	4770      	bx	lr
   1cbae:	bf00      	nop
   1cbb0:	20002452 	.word	0x20002452
   1cbb4:	20002453 	.word	0x20002453

0001cbb8 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1cbb8:	4b05      	ldr	r3, [pc, #20]	; (1cbd0 <cntr_init+0x18>)
   1cbba:	2200      	movs	r2, #0
   1cbbc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
   1cbc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1cbc4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1cbc8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1cbcc:	4770      	bx	lr
   1cbce:	bf00      	nop
   1cbd0:	4000b000 	.word	0x4000b000

0001cbd4 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   1cbd4:	4a04      	ldr	r2, [pc, #16]	; (1cbe8 <cntr_start+0x14>)
   1cbd6:	7813      	ldrb	r3, [r2, #0]
   1cbd8:	1c59      	adds	r1, r3, #1
   1cbda:	7011      	strb	r1, [r2, #0]
   1cbdc:	2001      	movs	r0, #1
   1cbde:	b913      	cbnz	r3, 1cbe6 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1cbe0:	4a02      	ldr	r2, [pc, #8]	; (1cbec <cntr_start+0x18>)
   1cbe2:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1cbe4:	4618      	mov	r0, r3
}
   1cbe6:	4770      	bx	lr
   1cbe8:	20002485 	.word	0x20002485
   1cbec:	4000b000 	.word	0x4000b000

0001cbf0 <cntr_stop>:

u32_t cntr_stop(void)
{
   1cbf0:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
   1cbf2:	4b10      	ldr	r3, [pc, #64]	; (1cc34 <cntr_stop+0x44>)
   1cbf4:	7818      	ldrb	r0, [r3, #0]
   1cbf6:	b998      	cbnz	r0, 1cc20 <cntr_stop+0x30>
   1cbf8:	2301      	movs	r3, #1
   1cbfa:	f04f 0100 	mov.w	r1, #0
   1cbfe:	4a0e      	ldr	r2, [pc, #56]	; (1cc38 <cntr_stop+0x48>)
   1cc00:	480e      	ldr	r0, [pc, #56]	; (1cc3c <cntr_stop+0x4c>)
   1cc02:	f363 0107 	bfi	r1, r3, #0, #8
   1cc06:	4b0e      	ldr	r3, [pc, #56]	; (1cc40 <cntr_stop+0x50>)
   1cc08:	1a9b      	subs	r3, r3, r2
   1cc0a:	08db      	lsrs	r3, r3, #3
   1cc0c:	f363 118f 	bfi	r1, r3, #6, #10
   1cc10:	f003 fff8 	bl	20c04 <log_0>
   1cc14:	4040      	eors	r0, r0
   1cc16:	f380 8811 	msr	BASEPRI, r0
   1cc1a:	f04f 0004 	mov.w	r0, #4
   1cc1e:	df02      	svc	2

	if (--_refcount) {
   1cc20:	3801      	subs	r0, #1
   1cc22:	b2c0      	uxtb	r0, r0
   1cc24:	7018      	strb	r0, [r3, #0]
   1cc26:	2301      	movs	r3, #1
   1cc28:	b910      	cbnz	r0, 1cc30 <cntr_stop+0x40>
   1cc2a:	4a06      	ldr	r2, [pc, #24]	; (1cc44 <cntr_stop+0x54>)
   1cc2c:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1cc2e:	bd08      	pop	{r3, pc}
		return 1;
   1cc30:	4618      	mov	r0, r3
   1cc32:	e7fc      	b.n	1cc2e <cntr_stop+0x3e>
   1cc34:	20002485 	.word	0x20002485
   1cc38:	00025880 	.word	0x00025880
   1cc3c:	0002cab1 	.word	0x0002cab1
   1cc40:	00025890 	.word	0x00025890
   1cc44:	4000b004 	.word	0x4000b004

0001cc48 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1cc48:	4b01      	ldr	r3, [pc, #4]	; (1cc50 <cntr_cnt_get+0x8>)
   1cc4a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1cc4e:	4770      	bx	lr
   1cc50:	4000b000 	.word	0x4000b000

0001cc54 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1cc54:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1cc58:	4b01      	ldr	r3, [pc, #4]	; (1cc60 <cntr_cmp_set+0xc>)
   1cc5a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1cc5e:	4770      	bx	lr
   1cc60:	4000b000 	.word	0x4000b000

0001cc64 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1cc64:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1cc66:	4b13      	ldr	r3, [pc, #76]	; (1ccb4 <do_ecb+0x50>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc68:	4c13      	ldr	r4, [pc, #76]	; (1ccb8 <do_ecb+0x54>)
   1cc6a:	2501      	movs	r5, #1
{
   1cc6c:	4684      	mov	ip, r0
   1cc6e:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   1cc70:	2700      	movs	r7, #0
   1cc72:	46a6      	mov	lr, r4
   1cc74:	461a      	mov	r2, r3
   1cc76:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1cc78:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1cc7c:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1cc80:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   1cc84:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1cc86:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1cc8a:	b931      	cbnz	r1, 1cc9a <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1cc8c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1cc90:	b919      	cbnz	r1, 1cc9a <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1cc92:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1cc96:	2900      	cmp	r1, #0
   1cc98:	d1f5      	bne.n	1cc86 <do_ecb+0x22>
   1cc9a:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1cc9e:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1cca2:	2900      	cmp	r1, #0
   1cca4:	d1e7      	bne.n	1cc76 <do_ecb+0x12>
   1cca6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   1ccaa:	2800      	cmp	r0, #0
   1ccac:	d0e3      	beq.n	1cc76 <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   1ccae:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1ccb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ccb4:	4000e000 	.word	0x4000e000
   1ccb8:	4000e004 	.word	0x4000e004

0001ccbc <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   1ccbc:	2800      	cmp	r0, #0
    NRF_PPI->CHENSET = mask;
}

__STATIC_INLINE void nrf_ppi_channels_disable(uint32_t mask)
{
    NRF_PPI->CHENCLR = mask;
   1ccbe:	4b08      	ldr	r3, [pc, #32]	; (1cce0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1ccc0:	bf14      	ite	ne
   1ccc2:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   1ccc6:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   1ccca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   1ccce:	bf14      	ite	ne
   1ccd0:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   1ccd4:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    NRF_PPI->CHENSET = mask;
   1ccd8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   1ccdc:	4770      	bx	lr
   1ccde:	bf00      	nop
   1cce0:	4001f000 	.word	0x4001f000

0001cce4 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1cce4:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1cce6:	4e2d      	ldr	r6, [pc, #180]	; (1cd9c <sw_switch.isra.10+0xb8>)

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1cce8:	4f2d      	ldr	r7, [pc, #180]	; (1cda0 <sw_switch.isra.10+0xbc>)
   1ccea:	7833      	ldrb	r3, [r6, #0]
   1ccec:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1cdac <sw_switch.isra.10+0xc8>
   1ccf0:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
   1ccf4:	b25d      	sxtb	r5, r3
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle));
   1ccf6:	b21b      	sxth	r3, r3
   1ccf8:	00dc      	lsls	r4, r3, #3
   1ccfa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1ccfe:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1cd02:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1cd06:	f105 040b 	add.w	r4, r5, #11
   1cd0a:	b2e4      	uxtb	r4, r4
   1cd0c:	00e4      	lsls	r4, r4, #3

	nrf_ppi_event_endpoint_setup(ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc));
   1cd0e:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   1cd12:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1cd16:	3fc0      	subs	r7, #192	; 0xc0
   1cd18:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1cd1c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
}

__STATIC_INLINE void nrf_ppi_event_endpoint_setup(nrf_ppi_channel_t channel,
                                                  uint32_t          eep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1cd20:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   1cd24:	2800      	cmp	r0, #0
   1cd26:	d034      	beq.n	1cd92 <sw_switch.isra.10+0xae>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   1cd28:	f649 4740 	movw	r7, #40000	; 0x9c40
   1cd2c:	f24a 005a 	movw	r0, #41050	; 0xa05a
   1cd30:	2a02      	cmp	r2, #2
   1cd32:	bf08      	it	eq
   1cd34:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1cd36:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1cd3a:	f241 574a 	movw	r7, #5450	; 0x154a
   1cd3e:	2902      	cmp	r1, #2
   1cd40:	bf14      	ite	ne
   1cd42:	4611      	movne	r1, r2
   1cd44:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1cd46:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   1cd4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cd4e:	4401      	add	r1, r0
   1cd50:	fbb1 f1f2 	udiv	r1, r1, r2
}

__STATIC_INLINE void nrf_ppi_task_endpoint_setup(nrf_ppi_channel_t channel,
                                                 uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1cd54:	4a13      	ldr	r2, [pc, #76]	; (1cda4 <sw_switch.isra.10+0xc0>)
   1cd56:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1cd5a:	009b      	lsls	r3, r3, #2
   1cd5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cd60:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   1cd64:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1cd68:	428a      	cmp	r2, r1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
   1cd6a:	bf8b      	itete	hi
   1cd6c:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1cd70:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
   1cd72:	1a51      	subhi	r1, r2, r1
   1cd74:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   1cd78:	bf88      	it	hi
   1cd7a:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
   1cd7e:	4b08      	ldr	r3, [pc, #32]	; (1cda0 <sw_switch.isra.10+0xbc>)
   1cd80:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1cd84:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   1cd88:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1cd8a:	f003 0301 	and.w	r3, r3, #1
   1cd8e:	7033      	strb	r3, [r6, #0]
}
   1cd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1cd92:	4a05      	ldr	r2, [pc, #20]	; (1cda8 <sw_switch.isra.10+0xc4>)
   1cd94:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1cd98:	212d      	movs	r1, #45	; 0x2d
   1cd9a:	e7de      	b.n	1cd5a <sw_switch.isra.10+0x76>
   1cd9c:	20002486 	.word	0x20002486
   1cda0:	4001f000 	.word	0x4001f000
   1cda4:	40001000 	.word	0x40001000
   1cda8:	40001004 	.word	0x40001004
   1cdac:	4000110c 	.word	0x4000110c

0001cdb0 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1cdb0:	4b04      	ldr	r3, [pc, #16]	; (1cdc4 <isr_radio+0x14>)
   1cdb2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1cdb6:	b123      	cbz	r3, 1cdc2 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1cdb8:	4b03      	ldr	r3, [pc, #12]	; (1cdc8 <isr_radio+0x18>)
   1cdba:	4a04      	ldr	r2, [pc, #16]	; (1cdcc <isr_radio+0x1c>)
   1cdbc:	681b      	ldr	r3, [r3, #0]
   1cdbe:	6810      	ldr	r0, [r2, #0]
   1cdc0:	4718      	bx	r3
}
   1cdc2:	4770      	bx	lr
   1cdc4:	40001000 	.word	0x40001000
   1cdc8:	20001b58 	.word	0x20001b58
   1cdcc:	20001b5c 	.word	0x20001b5c

0001cdd0 <radio_isr_set>:
{
   1cdd0:	b538      	push	{r3, r4, r5, lr}
   1cdd2:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1cdd4:	2001      	movs	r0, #1
{
   1cdd6:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1cdd8:	f7e8 f984 	bl	50e4 <z_arch_irq_disable>
	isr_cb_param = param;
   1cddc:	4b08      	ldr	r3, [pc, #32]	; (1ce00 <radio_isr_set+0x30>)
   1cdde:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   1cde0:	4b08      	ldr	r3, [pc, #32]	; (1ce04 <radio_isr_set+0x34>)
   1cde2:	601c      	str	r4, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t radio_int_mask)
{
    NRF_RADIO->INTENSET = radio_int_mask;
   1cde4:	4b08      	ldr	r3, [pc, #32]	; (1ce08 <radio_isr_set+0x38>)
   1cde6:	2210      	movs	r2, #16
   1cde8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cdec:	4b07      	ldr	r3, [pc, #28]	; (1ce0c <radio_isr_set+0x3c>)
   1cdee:	2202      	movs	r2, #2
   1cdf0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1cdf4:	2001      	movs	r0, #1
}
   1cdf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1cdfa:	f7e8 b963 	b.w	50c4 <z_arch_irq_enable>
   1cdfe:	bf00      	nop
   1ce00:	20001b5c 	.word	0x20001b5c
   1ce04:	20001b58 	.word	0x20001b58
   1ce08:	40001000 	.word	0x40001000
   1ce0c:	e000e100 	.word	0xe000e100

0001ce10 <radio_reset>:
{
   1ce10:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1ce12:	2001      	movs	r0, #1
   1ce14:	f7e8 f966 	bl	50e4 <z_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
   1ce18:	4b08      	ldr	r3, [pc, #32]	; (1ce3c <radio_reset+0x2c>)
   1ce1a:	2200      	movs	r2, #0
   1ce1c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   1ce20:	2201      	movs	r2, #1
   1ce22:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1ce26:	4a06      	ldr	r2, [pc, #24]	; (1ce40 <radio_reset+0x30>)
   1ce28:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1ce2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1ce2e:	f023 0301 	bic.w	r3, r3, #1
   1ce32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1ce36:	6013      	str	r3, [r2, #0]
}
   1ce38:	bd08      	pop	{r3, pc}
   1ce3a:	bf00      	nop
   1ce3c:	40001000 	.word	0x40001000
   1ce40:	40001774 	.word	0x40001774

0001ce44 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1ce44:	4b06      	ldr	r3, [pc, #24]	; (1ce60 <radio_phy_set+0x1c>)
	switch (phy) {
   1ce46:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1ce48:	bf14      	ite	ne
   1ce4a:	2203      	movne	r2, #3
   1ce4c:	2204      	moveq	r2, #4
   1ce4e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1ce52:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1ce56:	f042 0201 	orr.w	r2, r2, #1
   1ce5a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1ce5e:	4770      	bx	lr
   1ce60:	40001000 	.word	0x40001000

0001ce64 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   1ce64:	4b01      	ldr	r3, [pc, #4]	; (1ce6c <radio_tx_power_set+0x8>)
   1ce66:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1ce6a:	4770      	bx	lr
   1ce6c:	40001000 	.word	0x40001000

0001ce70 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1ce70:	4b01      	ldr	r3, [pc, #4]	; (1ce78 <radio_freq_chan_set+0x8>)
   1ce72:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1ce76:	4770      	bx	lr
   1ce78:	40001000 	.word	0x40001000

0001ce7c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1ce7c:	4b07      	ldr	r3, [pc, #28]	; (1ce9c <radio_whiten_iv_set+0x20>)
   1ce7e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1ce82:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ce86:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1ce8a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1ce8e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ce92:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1ce96:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1ce9a:	4770      	bx	lr
   1ce9c:	40001000 	.word	0x40001000

0001cea0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1cea0:	4a0a      	ldr	r2, [pc, #40]	; (1cecc <radio_aa_set+0x2c>)
   1cea2:	2300      	movs	r3, #0
   1cea4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1cea8:	2301      	movs	r3, #1
   1ceaa:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1ceae:	78c3      	ldrb	r3, [r0, #3]
   1ceb0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1ceb4:	7843      	ldrb	r3, [r0, #1]
   1ceb6:	7881      	ldrb	r1, [r0, #2]
   1ceb8:	041b      	lsls	r3, r3, #16
   1ceba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1cebe:	7801      	ldrb	r1, [r0, #0]
   1cec0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1cec4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1cec8:	4770      	bx	lr
   1ceca:	bf00      	nop
   1cecc:	40001000 	.word	0x40001000

0001ced0 <radio_pkt_configure>:
	switch (phy) {
   1ced0:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1ced4:	2b02      	cmp	r3, #2
{
   1ced6:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1ced8:	bf14      	ite	ne
   1ceda:	2400      	movne	r4, #0
   1cedc:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1cee0:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1cee2:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1cee6:	bf48      	it	mi
   1cee8:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1ceec:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1ceee:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1cef2:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1cef4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1cef8:	4a09      	ldr	r2, [pc, #36]	; (1cf20 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1cefa:	4303      	orrs	r3, r0
   1cefc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1cf00:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1cf04:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1cf08:	4b06      	ldr	r3, [pc, #24]	; (1cf24 <radio_pkt_configure+0x54>)
   1cf0a:	4003      	ands	r3, r0
   1cf0c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1cf10:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1cf14:	4319      	orrs	r1, r3
   1cf16:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1cf1a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1cf1e:	bd10      	pop	{r4, pc}
   1cf20:	40001000 	.word	0x40001000
   1cf24:	fef80000 	.word	0xfef80000

0001cf28 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   1cf28:	4b01      	ldr	r3, [pc, #4]	; (1cf30 <radio_pkt_rx_set+0x8>)
   1cf2a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1cf2e:	4770      	bx	lr
   1cf30:	40001000 	.word	0x40001000

0001cf34 <radio_pkt_tx_set>:
   1cf34:	4b01      	ldr	r3, [pc, #4]	; (1cf3c <radio_pkt_tx_set+0x8>)
   1cf36:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1cf3a:	4770      	bx	lr
   1cf3c:	40001000 	.word	0x40001000

0001cf40 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + radio_task)) = 0x1UL;
   1cf40:	4b01      	ldr	r3, [pc, #4]	; (1cf48 <radio_rx_enable+0x8>)
   1cf42:	2201      	movs	r2, #1
   1cf44:	601a      	str	r2, [r3, #0]
}
   1cf46:	4770      	bx	lr
   1cf48:	40001004 	.word	0x40001004

0001cf4c <radio_tx_enable>:
   1cf4c:	4b01      	ldr	r3, [pc, #4]	; (1cf54 <radio_tx_enable+0x8>)
   1cf4e:	2201      	movs	r2, #1
   1cf50:	601a      	str	r2, [r3, #0]
}
   1cf52:	4770      	bx	lr
   1cf54:	40001000 	.word	0x40001000

0001cf58 <radio_disable>:
    NRF_PPI->CHENCLR = mask;
   1cf58:	4a07      	ldr	r2, [pc, #28]	; (1cf78 <radio_disable+0x20>)
   1cf5a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1cf5e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = NRF_PPI_TASK_SET;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = NRF_PPI_TASK_SET;
   1cf62:	2301      	movs	r3, #1
   1cf64:	6053      	str	r3, [r2, #4]
   1cf66:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1cf68:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1cf6c:	2100      	movs	r1, #0
   1cf6e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1cf72:	6113      	str	r3, [r2, #16]
}
   1cf74:	4770      	bx	lr
   1cf76:	bf00      	nop
   1cf78:	4001f000 	.word	0x4001f000

0001cf7c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1cf7c:	4b04      	ldr	r3, [pc, #16]	; (1cf90 <radio_status_reset+0x14>)
   1cf7e:	2200      	movs	r2, #0
   1cf80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1cf84:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1cf88:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1cf8c:	4770      	bx	lr
   1cf8e:	bf00      	nop
   1cf90:	40001000 	.word	0x40001000

0001cf94 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1cf94:	4b03      	ldr	r3, [pc, #12]	; (1cfa4 <radio_is_ready+0x10>)
   1cf96:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1cf9a:	3000      	adds	r0, #0
   1cf9c:	bf18      	it	ne
   1cf9e:	2001      	movne	r0, #1
   1cfa0:	4770      	bx	lr
   1cfa2:	bf00      	nop
   1cfa4:	40001000 	.word	0x40001000

0001cfa8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1cfa8:	4b03      	ldr	r3, [pc, #12]	; (1cfb8 <radio_is_done+0x10>)
   1cfaa:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1cfae:	3000      	adds	r0, #0
   1cfb0:	bf18      	it	ne
   1cfb2:	2001      	movne	r0, #1
   1cfb4:	4770      	bx	lr
   1cfb6:	bf00      	nop
   1cfb8:	40001000 	.word	0x40001000

0001cfbc <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1cfbc:	4b03      	ldr	r3, [pc, #12]	; (1cfcc <radio_is_idle+0x10>)
   1cfbe:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1cfc2:	fab0 f080 	clz	r0, r0
   1cfc6:	0940      	lsrs	r0, r0, #5
   1cfc8:	4770      	bx	lr
   1cfca:	bf00      	nop
   1cfcc:	40001000 	.word	0x40001000

0001cfd0 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1cfd0:	4b04      	ldr	r3, [pc, #16]	; (1cfe4 <radio_crc_configure+0x14>)
   1cfd2:	f240 1203 	movw	r2, #259	; 0x103
   1cfd6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1cfda:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1cfde:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1cfe2:	4770      	bx	lr
   1cfe4:	40001000 	.word	0x40001000

0001cfe8 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1cfe8:	4b03      	ldr	r3, [pc, #12]	; (1cff8 <radio_crc_is_valid+0x10>)
   1cfea:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1cfee:	3000      	adds	r0, #0
   1cff0:	bf18      	it	ne
   1cff2:	2001      	movne	r0, #1
   1cff4:	4770      	bx	lr
   1cff6:	bf00      	nop
   1cff8:	40001000 	.word	0x40001000

0001cffc <radio_pkt_empty_get>:
}
   1cffc:	4800      	ldr	r0, [pc, #0]	; (1d000 <radio_pkt_empty_get+0x4>)
   1cffe:	4770      	bx	lr
   1d000:	20001a50 	.word	0x20001a50

0001d004 <radio_pkt_scratch_get>:
}
   1d004:	4800      	ldr	r0, [pc, #0]	; (1d008 <radio_pkt_scratch_get+0x4>)
   1d006:	4770      	bx	lr
   1d008:	20001a54 	.word	0x20001a54

0001d00c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d00c:	4b04      	ldr	r3, [pc, #16]	; (1d020 <radio_switch_complete_and_rx+0x14>)
   1d00e:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1d010:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d012:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1d016:	4602      	mov	r2, r0
   1d018:	4608      	mov	r0, r1
   1d01a:	f7ff be63 	b.w	1cce4 <sw_switch.isra.10>
   1d01e:	bf00      	nop
   1d020:	40001000 	.word	0x40001000

0001d024 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1d024:	4b03      	ldr	r3, [pc, #12]	; (1d034 <radio_switch_complete_and_tx+0x10>)
   1d026:	2103      	movs	r1, #3
   1d028:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1d02c:	4601      	mov	r1, r0
   1d02e:	2001      	movs	r0, #1
   1d030:	f7ff be58 	b.w	1cce4 <sw_switch.isra.10>
   1d034:	40001000 	.word	0x40001000

0001d038 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1d038:	4b05      	ldr	r3, [pc, #20]	; (1d050 <radio_switch_complete_and_disable+0x18>)
   1d03a:	2203      	movs	r2, #3
   1d03c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
   1d040:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1d044:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1d048:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_ppi_channels_disable(BIT(HAL_SW_SWITCH_TIMER_CLEAR_PPI) |
				 BIT(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI));
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d04c:	4770      	bx	lr
   1d04e:	bf00      	nop
   1d050:	40001000 	.word	0x40001000

0001d054 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1d054:	4a03      	ldr	r2, [pc, #12]	; (1d064 <radio_rssi_measure+0x10>)
   1d056:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1d05a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1d05e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1d062:	4770      	bx	lr
   1d064:	40001000 	.word	0x40001000

0001d068 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1d068:	4b01      	ldr	r3, [pc, #4]	; (1d070 <radio_rssi_get+0x8>)
   1d06a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1d06e:	4770      	bx	lr
   1d070:	40001000 	.word	0x40001000

0001d074 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1d074:	4b02      	ldr	r3, [pc, #8]	; (1d080 <radio_rssi_status_reset+0xc>)
   1d076:	2200      	movs	r2, #0
   1d078:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1d07c:	4770      	bx	lr
   1d07e:	bf00      	nop
   1d080:	40001000 	.word	0x40001000

0001d084 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1d084:	4b03      	ldr	r3, [pc, #12]	; (1d094 <radio_rssi_is_ready+0x10>)
   1d086:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1d08a:	3000      	adds	r0, #0
   1d08c:	bf18      	it	ne
   1d08e:	2001      	movne	r0, #1
   1d090:	4770      	bx	lr
   1d092:	bf00      	nop
   1d094:	40001000 	.word	0x40001000

0001d098 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   1d098:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d09a:	2400      	movs	r4, #0
   1d09c:	2706      	movs	r7, #6
   1d09e:	00a3      	lsls	r3, r4, #2
   1d0a0:	fb07 2504 	mla	r5, r7, r4, r2
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1d0a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d0a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1d0ac:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1d0ae:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   1d0b2:	3401      	adds	r4, #1
   1d0b4:	88ad      	ldrh	r5, [r5, #4]
   1d0b6:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1d0ba:	2c08      	cmp	r4, #8
   1d0bc:	d1ef      	bne.n	1d09e <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   1d0be:	4b03      	ldr	r3, [pc, #12]	; (1d0cc <radio_filter_configure+0x34>)
   1d0c0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1d0c4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1d0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d0ca:	bf00      	nop
   1d0cc:	40001000 	.word	0x40001000

0001d0d0 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1d0d0:	4a03      	ldr	r2, [pc, #12]	; (1d0e0 <radio_filter_disable+0x10>)
   1d0d2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1d0d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d0da:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1d0de:	4770      	bx	lr
   1d0e0:	40001000 	.word	0x40001000

0001d0e4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1d0e4:	4b02      	ldr	r3, [pc, #8]	; (1d0f0 <radio_filter_status_reset+0xc>)
   1d0e6:	2200      	movs	r2, #0
   1d0e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1d0ec:	4770      	bx	lr
   1d0ee:	bf00      	nop
   1d0f0:	40001000 	.word	0x40001000

0001d0f4 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1d0f4:	4b03      	ldr	r3, [pc, #12]	; (1d104 <radio_filter_has_match+0x10>)
   1d0f6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1d0fa:	3000      	adds	r0, #0
   1d0fc:	bf18      	it	ne
   1d0fe:	2001      	movne	r0, #1
   1d100:	4770      	bx	lr
   1d102:	bf00      	nop
   1d104:	40001000 	.word	0x40001000

0001d108 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1d108:	4b01      	ldr	r3, [pc, #4]	; (1d110 <radio_filter_match_get+0x8>)
   1d10a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1d10e:	4770      	bx	lr
   1d110:	40001000 	.word	0x40001000

0001d114 <radio_tmr_status_reset>:
{
    p_reg->EVTENSET = mask;
}
__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d114:	4b05      	ldr	r3, [pc, #20]	; (1d12c <radio_tmr_status_reset+0x18>)
   1d116:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1d11a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1d11e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1d122:	4a03      	ldr	r2, [pc, #12]	; (1d130 <radio_tmr_status_reset+0x1c>)
   1d124:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1d128:	4770      	bx	lr
   1d12a:	bf00      	nop
   1d12c:	4000b000 	.word	0x4000b000
   1d130:	0e700060 	.word	0x0e700060

0001d134 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
   1d134:	4b03      	ldr	r3, [pc, #12]	; (1d144 <radio_tmr_tifs_set+0x10>)
   1d136:	4a04      	ldr	r2, [pc, #16]	; (1d148 <radio_tmr_tifs_set+0x14>)
   1d138:	781b      	ldrb	r3, [r3, #0]
   1d13a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1d13e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d142:	4770      	bx	lr
   1d144:	20002486 	.word	0x20002486
   1d148:	40009000 	.word	0x40009000

0001d14c <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   1d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1d14e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1d152:	4c33      	ldr	r4, [pc, #204]	; (1d220 <radio_tmr_start+0xd4>)
   1d154:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1d158:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1d15a:	bf88      	it	hi
   1d15c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d160:	4b30      	ldr	r3, [pc, #192]	; (1d224 <radio_tmr_start+0xd8>)
	}
	remainder /= 1000000UL;
   1d162:	4c31      	ldr	r4, [pc, #196]	; (1d228 <radio_tmr_start+0xdc>)
		remainder += 30517578UL;
   1d164:	bf84      	itt	hi
   1d166:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1d16a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1d16e:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   1d172:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1d176:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   1d17a:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1d17e:	f04f 0202 	mov.w	r2, #2
   1d182:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   1d184:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1d188:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1d18c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   1d190:	4a26      	ldr	r2, [pc, #152]	; (1d22c <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   1d192:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   1d196:	bf88      	it	hi
   1d198:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   1d19c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1d1a0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1d1a4:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1d1a8:	4921      	ldr	r1, [pc, #132]	; (1d230 <radio_tmr_start+0xe4>)
   1d1aa:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   1d1ae:	3b0c      	subs	r3, #12
   1d1b0:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1d1b4:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
   1d1b8:	2320      	movs	r3, #32
   1d1ba:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1d1be:	f7ff fd7d 	bl	1ccbc <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1d1c2:	4b1c      	ldr	r3, [pc, #112]	; (1d234 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d1c4:	4a1c      	ldr	r2, [pc, #112]	; (1d238 <radio_tmr_start+0xec>)
   1d1c6:	6015      	str	r5, [r2, #0]
   1d1c8:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1d1cc:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1d1d0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1d1d4:	601d      	str	r5, [r3, #0]
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1d1d6:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1d1da:	3b74      	subs	r3, #116	; 0x74
   1d1dc:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
   1d1e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1d1e4:	3334      	adds	r3, #52	; 0x34
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1d1e6:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1d1ea:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1d1ee:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1d1f2:	33c4      	adds	r3, #196	; 0xc4
   1d1f4:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1d1f8:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1d1fc:	3bc0      	subs	r3, #192	; 0xc0
   1d1fe:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1d202:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1d206:	33c8      	adds	r3, #200	; 0xc8
   1d208:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
			SW_SWITCH_TIMER_EVTS_COMP(1)),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1));

#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1d20c:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1d210:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1d214:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   1d218:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1d21c:	4620      	mov	r0, r4
   1d21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d220:	7ff0bdbf 	.word	0x7ff0bdbf
   1d224:	4000800c 	.word	0x4000800c
   1d228:	000f4240 	.word	0x000f4240
   1d22c:	4000b000 	.word	0x4000b000
   1d230:	4001f000 	.word	0x4001f000
   1d234:	40009000 	.word	0x40009000
   1d238:	4000900c 	.word	0x4000900c

0001d23c <radio_tmr_stop>:
   1d23c:	4a04      	ldr	r2, [pc, #16]	; (1d250 <radio_tmr_stop+0x14>)
   1d23e:	2301      	movs	r3, #1
   1d240:	6013      	str	r3, [r2, #0]
   1d242:	60d3      	str	r3, [r2, #12]
   1d244:	320c      	adds	r2, #12
   1d246:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1d24a:	6013      	str	r3, [r2, #0]
   1d24c:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1d24e:	4770      	bx	lr
   1d250:	40008004 	.word	0x40008004

0001d254 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1d254:	4b04      	ldr	r3, [pc, #16]	; (1d268 <radio_tmr_hcto_configure+0x14>)
   1d256:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   1d25a:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1d25e:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1d262:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
				BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1d266:	4770      	bx	lr
   1d268:	40008000 	.word	0x40008000

0001d26c <radio_tmr_aa_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1d26c:	4b06      	ldr	r3, [pc, #24]	; (1d288 <radio_tmr_aa_capture+0x1c>)
   1d26e:	4a07      	ldr	r2, [pc, #28]	; (1d28c <radio_tmr_aa_capture+0x20>)
   1d270:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   1d274:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1d278:	3240      	adds	r2, #64	; 0x40
   1d27a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   1d27e:	4a04      	ldr	r2, [pc, #16]	; (1d290 <radio_tmr_aa_capture+0x24>)
   1d280:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
{
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
				BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1d284:	4770      	bx	lr
   1d286:	bf00      	nop
   1d288:	4001f000 	.word	0x4001f000
   1d28c:	40001100 	.word	0x40001100
   1d290:	04000040 	.word	0x04000040

0001d294 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1d294:	4b01      	ldr	r3, [pc, #4]	; (1d29c <radio_tmr_aa_get+0x8>)
   1d296:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1d29a:	4770      	bx	lr
   1d29c:	40008000 	.word	0x40008000

0001d2a0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1d2a0:	4b01      	ldr	r3, [pc, #4]	; (1d2a8 <radio_tmr_aa_save+0x8>)
   1d2a2:	6018      	str	r0, [r3, #0]
}
   1d2a4:	4770      	bx	lr
   1d2a6:	bf00      	nop
   1d2a8:	20001b60 	.word	0x20001b60

0001d2ac <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1d2ac:	4b01      	ldr	r3, [pc, #4]	; (1d2b4 <radio_tmr_aa_restore+0x8>)
   1d2ae:	6818      	ldr	r0, [r3, #0]
   1d2b0:	4770      	bx	lr
   1d2b2:	bf00      	nop
   1d2b4:	20001b60 	.word	0x20001b60

0001d2b8 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1d2b8:	4b01      	ldr	r3, [pc, #4]	; (1d2c0 <radio_tmr_ready_get+0x8>)
   1d2ba:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1d2be:	4770      	bx	lr
   1d2c0:	40008000 	.word	0x40008000

0001d2c4 <radio_tmr_end_capture>:
   1d2c4:	4b02      	ldr	r3, [pc, #8]	; (1d2d0 <radio_tmr_end_capture+0xc>)
   1d2c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1d2ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1d2ce:	4770      	bx	lr
   1d2d0:	4001f000 	.word	0x4001f000

0001d2d4 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1d2d4:	4b01      	ldr	r3, [pc, #4]	; (1d2dc <radio_tmr_end_get+0x8>)
   1d2d6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1d2da:	4770      	bx	lr
   1d2dc:	40008000 	.word	0x40008000

0001d2e0 <radio_tmr_tifs_base_get>:
   1d2e0:	4b01      	ldr	r3, [pc, #4]	; (1d2e8 <radio_tmr_tifs_base_get+0x8>)
   1d2e2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1d2e6:	4770      	bx	lr
   1d2e8:	40008000 	.word	0x40008000

0001d2ec <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d2ec:	4b13      	ldr	r3, [pc, #76]	; (1d33c <radio_ccm_rx_pkt_set+0x50>)
{
   1d2ee:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d2f0:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d2f2:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d2f4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1d2f8:	4e11      	ldr	r6, [pc, #68]	; (1d340 <radio_ccm_rx_pkt_set+0x54>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d2fa:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1d2fe:	4d11      	ldr	r5, [pc, #68]	; (1d344 <radio_ccm_rx_pkt_set+0x58>)
   1d300:	2902      	cmp	r1, #2
   1d302:	bf14      	ite	ne
   1d304:	4629      	movne	r1, r5
   1d306:	4631      	moveq	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1d308:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1d30c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1d310:	480d      	ldr	r0, [pc, #52]	; (1d348 <radio_ccm_rx_pkt_set+0x5c>)
   1d312:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1d316:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1d31a:	4a0c      	ldr	r2, [pc, #48]	; (1d34c <radio_ccm_rx_pkt_set+0x60>)
   1d31c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   1d320:	4a0b      	ldr	r2, [pc, #44]	; (1d350 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->SHORTS = 0;
   1d322:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
   1d326:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1d32a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1d32e:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1d332:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d336:	2201      	movs	r2, #1
   1d338:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1d33a:	bd70      	pop	{r4, r5, r6, pc}
   1d33c:	4000f000 	.word	0x4000f000
   1d340:	01010001 	.word	0x01010001
   1d344:	01000001 	.word	0x01000001
   1d348:	20001a54 	.word	0x20001a54
   1d34c:	20001944 	.word	0x20001944
   1d350:	4001f000 	.word	0x4001f000

0001d354 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1d354:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d356:	4b0e      	ldr	r3, [pc, #56]	; (1d390 <radio_ccm_tx_pkt_set+0x3c>)
   1d358:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d35a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1d35c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1d360:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1d364:	4c0b      	ldr	r4, [pc, #44]	; (1d394 <radio_ccm_tx_pkt_set+0x40>)
   1d366:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1d36a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1d36e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1d372:	4809      	ldr	r0, [pc, #36]	; (1d398 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1d374:	4909      	ldr	r1, [pc, #36]	; (1d39c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1d376:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1d37a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1d37e:	2101      	movs	r1, #1
   1d380:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1d384:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1d388:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d38c:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1d38e:	bd10      	pop	{r4, pc}
   1d390:	4000f000 	.word	0x4000f000
   1d394:	01010000 	.word	0x01010000
   1d398:	20001a54 	.word	0x20001a54
   1d39c:	20001944 	.word	0x20001944

0001d3a0 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

__STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d3a0:	4b0c      	ldr	r3, [pc, #48]	; (1d3d4 <radio_ccm_is_done+0x34>)
   1d3a2:	2202      	movs	r2, #2
   1d3a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1d3a8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1d3ac:	b16a      	cbz	r2, 1d3ca <radio_ccm_is_done+0x2a>
}

__STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1d3ae:	2202      	movs	r2, #2
   1d3b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1d3b4:	4a08      	ldr	r2, [pc, #32]	; (1d3d8 <radio_ccm_is_done+0x38>)
   1d3b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d3ba:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1d3be:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1d3c2:	fab0 f080 	clz	r0, r0
   1d3c6:	0940      	lsrs	r0, r0, #5
   1d3c8:	4770      	bx	lr
		__WFE();
   1d3ca:	bf20      	wfe
		__SEV();
   1d3cc:	bf40      	sev
		__WFE();
   1d3ce:	bf20      	wfe
   1d3d0:	e7ea      	b.n	1d3a8 <radio_ccm_is_done+0x8>
   1d3d2:	bf00      	nop
   1d3d4:	4000f000 	.word	0x4000f000
   1d3d8:	e000e100 	.word	0xe000e100

0001d3dc <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1d3dc:	4b03      	ldr	r3, [pc, #12]	; (1d3ec <radio_ccm_mic_is_valid+0x10>)
   1d3de:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d3e2:	3000      	adds	r0, #0
   1d3e4:	bf18      	it	ne
   1d3e6:	2001      	movne	r0, #1
   1d3e8:	4770      	bx	lr
   1d3ea:	bf00      	nop
   1d3ec:	4000f000 	.word	0x4000f000

0001d3f0 <radio_ar_match_get>:
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1d3f0:	4b01      	ldr	r3, [pc, #4]	; (1d3f8 <radio_ar_match_get+0x8>)
   1d3f2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d3f6:	4770      	bx	lr
   1d3f8:	4000f000 	.word	0x4000f000

0001d3fc <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1d3fc:	4a04      	ldr	r2, [pc, #16]	; (1d410 <radio_ar_status_reset+0x14>)
   1d3fe:	2300      	movs	r3, #0
   1d400:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1d404:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1d408:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1d40c:	4770      	bx	lr
   1d40e:	bf00      	nop
   1d410:	40001000 	.word	0x40001000

0001d414 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1d414:	4b08      	ldr	r3, [pc, #32]	; (1d438 <radio_ar_has_match+0x24>)
   1d416:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1d41a:	b160      	cbz	r0, 1d436 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1d41c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1d420:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1d424:	b138      	cbz	r0, 1d436 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1d426:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1d42a:	b120      	cbz	r0, 1d436 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1d42c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1d430:	fab0 f080 	clz	r0, r0
   1d434:	0940      	lsrs	r0, r0, #5
}
   1d436:	4770      	bx	lr
   1d438:	40001000 	.word	0x40001000

0001d43c <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1d43c:	2901      	cmp	r1, #1
{
   1d43e:	b508      	push	{r3, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1d440:	d013      	beq.n	1d46a <mayfly_enable_cb+0x2e>
   1d442:	2301      	movs	r3, #1
   1d444:	f04f 0100 	mov.w	r1, #0
   1d448:	4a0d      	ldr	r2, [pc, #52]	; (1d480 <mayfly_enable_cb+0x44>)
   1d44a:	480e      	ldr	r0, [pc, #56]	; (1d484 <mayfly_enable_cb+0x48>)
   1d44c:	f363 0107 	bfi	r1, r3, #0, #8
   1d450:	4b0d      	ldr	r3, [pc, #52]	; (1d488 <mayfly_enable_cb+0x4c>)
   1d452:	1a9b      	subs	r3, r3, r2
   1d454:	08db      	lsrs	r3, r3, #3
   1d456:	f363 118f 	bfi	r1, r3, #6, #10
   1d45a:	f003 fbd3 	bl	20c04 <log_0>
   1d45e:	4040      	eors	r0, r0
   1d460:	f380 8811 	msr	BASEPRI, r0
   1d464:	f04f 0004 	mov.w	r0, #4
   1d468:	df02      	svc	2

	if (enable) {
		irq_enable(SWI5_IRQn);
   1d46a:	2019      	movs	r0, #25
	if (enable) {
   1d46c:	b11a      	cbz	r2, 1d476 <mayfly_enable_cb+0x3a>
	} else {
		irq_disable(SWI5_IRQn);
	}
}
   1d46e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_enable(SWI5_IRQn);
   1d472:	f7e7 be27 	b.w	50c4 <z_arch_irq_enable>
}
   1d476:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_disable(SWI5_IRQn);
   1d47a:	f7e7 be33 	b.w	50e4 <z_arch_irq_disable>
   1d47e:	bf00      	nop
   1d480:	00025880 	.word	0x00025880
   1d484:	0002caea 	.word	0x0002caea
   1d488:	000258d0 	.word	0x000258d0

0001d48c <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   1d48c:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   1d48e:	b1a9      	cbz	r1, 1d4bc <mayfly_is_enabled+0x30>
   1d490:	2901      	cmp	r1, #1
   1d492:	d018      	beq.n	1d4c6 <mayfly_is_enabled+0x3a>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI5_IRQn);

	default:
		LL_ASSERT(0);
   1d494:	2301      	movs	r3, #1
   1d496:	f04f 0100 	mov.w	r1, #0
   1d49a:	4a0c      	ldr	r2, [pc, #48]	; (1d4cc <mayfly_is_enabled+0x40>)
   1d49c:	480c      	ldr	r0, [pc, #48]	; (1d4d0 <mayfly_is_enabled+0x44>)
   1d49e:	f363 0107 	bfi	r1, r3, #0, #8
   1d4a2:	4b0c      	ldr	r3, [pc, #48]	; (1d4d4 <mayfly_is_enabled+0x48>)
   1d4a4:	1a9b      	subs	r3, r3, r2
   1d4a6:	08db      	lsrs	r3, r3, #3
   1d4a8:	f363 118f 	bfi	r1, r3, #6, #10
   1d4ac:	f003 fbaa 	bl	20c04 <log_0>
   1d4b0:	4040      	eors	r0, r0
   1d4b2:	f380 8811 	msr	BASEPRI, r0
   1d4b6:	f04f 0004 	mov.w	r0, #4
   1d4ba:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1d4bc:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   1d4be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI5_IRQn);
   1d4c2:	f7e7 be23 	b.w	510c <z_arch_irq_is_enabled>
   1d4c6:	2019      	movs	r0, #25
   1d4c8:	e7f9      	b.n	1d4be <mayfly_is_enabled+0x32>
   1d4ca:	bf00      	nop
   1d4cc:	00025880 	.word	0x00025880
   1d4d0:	0002c060 	.word	0x0002c060
   1d4d4:	000258d0 	.word	0x000258d0

0001d4d8 <mayfly_pend>:
#endif
	       0;
}

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   1d4d8:	b508      	push	{r3, lr}
   1d4da:	4b10      	ldr	r3, [pc, #64]	; (1d51c <mayfly_pend+0x44>)
	(void)caller_id;

	switch (callee_id) {
   1d4dc:	b1a9      	cbz	r1, 1d50a <mayfly_pend+0x32>
   1d4de:	2901      	cmp	r1, #1
   1d4e0:	d018      	beq.n	1d514 <mayfly_pend+0x3c>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI5_IRQn);
		break;

	default:
		LL_ASSERT(0);
   1d4e2:	2301      	movs	r3, #1
   1d4e4:	f04f 0100 	mov.w	r1, #0
   1d4e8:	4a0d      	ldr	r2, [pc, #52]	; (1d520 <mayfly_pend+0x48>)
   1d4ea:	480e      	ldr	r0, [pc, #56]	; (1d524 <mayfly_pend+0x4c>)
   1d4ec:	f363 0107 	bfi	r1, r3, #0, #8
   1d4f0:	4b0d      	ldr	r3, [pc, #52]	; (1d528 <mayfly_pend+0x50>)
   1d4f2:	1a9b      	subs	r3, r3, r2
   1d4f4:	08db      	lsrs	r3, r3, #3
   1d4f6:	f363 118f 	bfi	r1, r3, #6, #10
   1d4fa:	f003 fb83 	bl	20c04 <log_0>
   1d4fe:	4040      	eors	r0, r0
   1d500:	f380 8811 	msr	BASEPRI, r0
   1d504:	f04f 0004 	mov.w	r0, #4
   1d508:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d50a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d50e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   1d512:	bd08      	pop	{r3, pc}
   1d514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1d518:	e7f9      	b.n	1d50e <mayfly_pend+0x36>
   1d51a:	bf00      	nop
   1d51c:	e000e100 	.word	0xe000e100
   1d520:	00025880 	.word	0x00025880
   1d524:	0002c060 	.word	0x0002c060
   1d528:	000258d0 	.word	0x000258d0

0001d52c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d52c:	2803      	cmp	r0, #3
{
   1d52e:	b508      	push	{r3, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d530:	d913      	bls.n	1d55a <hal_ticker_instance0_caller_id_get+0x2e>
   1d532:	2301      	movs	r3, #1
   1d534:	f04f 0100 	mov.w	r1, #0
   1d538:	f363 0107 	bfi	r1, r3, #0, #8
   1d53c:	4a0f      	ldr	r2, [pc, #60]	; (1d57c <hal_ticker_instance0_caller_id_get+0x50>)
   1d53e:	4b10      	ldr	r3, [pc, #64]	; (1d580 <hal_ticker_instance0_caller_id_get+0x54>)
   1d540:	4810      	ldr	r0, [pc, #64]	; (1d584 <hal_ticker_instance0_caller_id_get+0x58>)
   1d542:	1a9b      	subs	r3, r3, r2
   1d544:	08db      	lsrs	r3, r3, #3
   1d546:	f363 118f 	bfi	r1, r3, #6, #10

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d54a:	f003 fb5b 	bl	20c04 <log_0>
   1d54e:	4040      	eors	r0, r0
   1d550:	f380 8811 	msr	BASEPRI, r0
   1d554:	f04f 0004 	mov.w	r0, #4
   1d558:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1d55a:	4b0b      	ldr	r3, [pc, #44]	; (1d588 <hal_ticker_instance0_caller_id_get+0x5c>)
   1d55c:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d55e:	b960      	cbnz	r0, 1d57a <hal_ticker_instance0_caller_id_get+0x4e>
   1d560:	2301      	movs	r3, #1
   1d562:	f04f 0100 	mov.w	r1, #0
   1d566:	f363 0107 	bfi	r1, r3, #0, #8
   1d56a:	4a04      	ldr	r2, [pc, #16]	; (1d57c <hal_ticker_instance0_caller_id_get+0x50>)
   1d56c:	4b04      	ldr	r3, [pc, #16]	; (1d580 <hal_ticker_instance0_caller_id_get+0x54>)
   1d56e:	4807      	ldr	r0, [pc, #28]	; (1d58c <hal_ticker_instance0_caller_id_get+0x60>)
   1d570:	1a9b      	subs	r3, r3, r2
   1d572:	08db      	lsrs	r3, r3, #3
   1d574:	f363 118f 	bfi	r1, r3, #6, #10
   1d578:	e7e7      	b.n	1d54a <hal_ticker_instance0_caller_id_get+0x1e>

	return caller_id;
}
   1d57a:	bd08      	pop	{r3, pc}
   1d57c:	00025880 	.word	0x00025880
   1d580:	000258d8 	.word	0x000258d8
   1d584:	0002cb22 	.word	0x0002cb22
   1d588:	0002cb1e 	.word	0x0002cb1e
   1d58c:	0002cb53 	.word	0x0002cb53

0001d590 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1d590:	3802      	subs	r0, #2
{
   1d592:	b510      	push	{r4, lr}
   1d594:	461c      	mov	r4, r3
	switch (caller_id) {
   1d596:	2803      	cmp	r0, #3
   1d598:	d817      	bhi.n	1d5ca <hal_ticker_instance0_sched+0x3a>
   1d59a:	e8df f000 	tbb	[pc, r0]
   1d59e:	0c02      	.short	0x0c02
   1d5a0:	3312      	.short	0x3312
		}
		break;
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   1d5a2:	2903      	cmp	r1, #3
   1d5a4:	d111      	bne.n	1d5ca <hal_ticker_instance0_sched+0x3a>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1d5a6:	4b1b      	ldr	r3, [pc, #108]	; (1d614 <hal_ticker_instance0_sched+0x84>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d5a8:	2100      	movs	r1, #0
			m.param = instance;
   1d5aa:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d5ac:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1d5ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d5b2:	f7fb b853 	b.w	1865c <mayfly_enqueue>
		switch (callee_id) {
   1d5b6:	2904      	cmp	r1, #4
   1d5b8:	d107      	bne.n	1d5ca <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   1d5ba:	4b17      	ldr	r3, [pc, #92]	; (1d618 <hal_ticker_instance0_sched+0x88>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d5bc:	2101      	movs	r1, #1
			m.param = instance;
   1d5be:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d5c0:	e7f4      	b.n	1d5ac <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   1d5c2:	2903      	cmp	r1, #3
   1d5c4:	d015      	beq.n	1d5f2 <hal_ticker_instance0_sched+0x62>
   1d5c6:	2904      	cmp	r1, #4
   1d5c8:	d018      	beq.n	1d5fc <hal_ticker_instance0_sched+0x6c>
		LL_ASSERT(0);
   1d5ca:	2301      	movs	r3, #1
   1d5cc:	f04f 0100 	mov.w	r1, #0
   1d5d0:	4a12      	ldr	r2, [pc, #72]	; (1d61c <hal_ticker_instance0_sched+0x8c>)
   1d5d2:	4813      	ldr	r0, [pc, #76]	; (1d620 <hal_ticker_instance0_sched+0x90>)
   1d5d4:	f363 0107 	bfi	r1, r3, #0, #8
   1d5d8:	4b12      	ldr	r3, [pc, #72]	; (1d624 <hal_ticker_instance0_sched+0x94>)
   1d5da:	1a9b      	subs	r3, r3, r2
   1d5dc:	08db      	lsrs	r3, r3, #3
   1d5de:	f363 118f 	bfi	r1, r3, #6, #10
   1d5e2:	f003 fb0f 	bl	20c04 <log_0>
   1d5e6:	4040      	eors	r0, r0
   1d5e8:	f380 8811 	msr	BASEPRI, r0
   1d5ec:	f04f 0004 	mov.w	r0, #4
   1d5f0:	df02      	svc	2
			m.param = instance;
   1d5f2:	4b0d      	ldr	r3, [pc, #52]	; (1d628 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d5f4:	2100      	movs	r1, #0
			m.param = instance;
   1d5f6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d5f8:	2001      	movs	r0, #1
   1d5fa:	e7d8      	b.n	1d5ae <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   1d5fc:	4b0b      	ldr	r3, [pc, #44]	; (1d62c <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d5fe:	2101      	movs	r1, #1
			m.param = instance;
   1d600:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d602:	e7f9      	b.n	1d5f8 <hal_ticker_instance0_sched+0x68>
		switch (callee_id) {
   1d604:	2904      	cmp	r1, #4
   1d606:	d1e0      	bne.n	1d5ca <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   1d608:	4b09      	ldr	r3, [pc, #36]	; (1d630 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d60a:	2101      	movs	r1, #1
			m.param = instance;
   1d60c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d60e:	2003      	movs	r0, #3
   1d610:	e7cd      	b.n	1d5ae <hal_ticker_instance0_sched+0x1e>
   1d612:	bf00      	nop
   1d614:	2000769c 	.word	0x2000769c
   1d618:	200076ac 	.word	0x200076ac
   1d61c:	00025880 	.word	0x00025880
   1d620:	0002c060 	.word	0x0002c060
   1d624:	000258d8 	.word	0x000258d8
   1d628:	200076bc 	.word	0x200076bc
   1d62c:	200076cc 	.word	0x200076cc
   1d630:	200076dc 	.word	0x200076dc

0001d634 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d634:	4b01      	ldr	r3, [pc, #4]	; (1d63c <net_buf_pool_get+0x8>)
   1d636:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1d63a:	4770      	bx	lr
   1d63c:	2000790c 	.word	0x2000790c

0001d640 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d640:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1d642:	4b04      	ldr	r3, [pc, #16]	; (1d654 <net_buf_id+0x14>)
   1d644:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1d648:	69db      	ldr	r3, [r3, #28]
   1d64a:	1ac0      	subs	r0, r0, r3
}
   1d64c:	4b02      	ldr	r3, [pc, #8]	; (1d658 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1d64e:	10c0      	asrs	r0, r0, #3
}
   1d650:	4358      	muls	r0, r3
   1d652:	4770      	bx	lr
   1d654:	2000790c 	.word	0x2000790c
   1d658:	aaaaaaab 	.word	0xaaaaaaab

0001d65c <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   1d65c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d65e:	4b09      	ldr	r3, [pc, #36]	; (1d684 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d660:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d662:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
   1d666:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d668:	699b      	ldr	r3, [r3, #24]
   1d66a:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1d66c:	6823      	ldr	r3, [r4, #0]
   1d66e:	429a      	cmp	r2, r3
   1d670:	bf94      	ite	ls
   1d672:	600a      	strls	r2, [r1, #0]
   1d674:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1d676:	f7ff ffe3 	bl	1d640 <net_buf_id>
   1d67a:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1d67e:	fb02 3000 	mla	r0, r2, r0, r3
   1d682:	bd10      	pop	{r4, pc}
   1d684:	2000790c 	.word	0x2000790c

0001d688 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   1d688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d68c:	4605      	mov	r5, r0
   1d68e:	9101      	str	r1, [sp, #4]
   1d690:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1d692:	f007 ff30 	bl	254f6 <z_impl_k_uptime_get_32>
   1d696:	4607      	mov	r7, r0
	__asm__ volatile(
   1d698:	f04f 0320 	mov.w	r3, #32
   1d69c:	f3ef 8811 	mrs	r8, BASEPRI
   1d6a0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d6a4:	8a6b      	ldrh	r3, [r5, #18]
   1d6a6:	2b00      	cmp	r3, #0
   1d6a8:	d041      	beq.n	1d72e <net_buf_alloc_len+0xa6>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d6aa:	8a2a      	ldrh	r2, [r5, #16]
   1d6ac:	429a      	cmp	r2, r3
   1d6ae:	d92c      	bls.n	1d70a <net_buf_alloc_len+0x82>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1d6b0:	2100      	movs	r1, #0
   1d6b2:	4628      	mov	r0, r5
   1d6b4:	f007 fceb 	bl	2508e <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d6b8:	4604      	mov	r4, r0
   1d6ba:	b330      	cbz	r0, 1d70a <net_buf_alloc_len+0x82>
	__asm__ volatile(
   1d6bc:	f388 8811 	msr	BASEPRI, r8
   1d6c0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d6c4:	9b01      	ldr	r3, [sp, #4]
   1d6c6:	2b00      	cmp	r3, #0
   1d6c8:	d040      	beq.n	1d74c <net_buf_alloc_len+0xc4>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   1d6ca:	1c73      	adds	r3, r6, #1
   1d6cc:	2b01      	cmp	r3, #1
   1d6ce:	d906      	bls.n	1d6de <net_buf_alloc_len+0x56>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1d6d0:	f007 ff11 	bl	254f6 <z_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   1d6d4:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
   1d6d6:	42b0      	cmp	r0, r6
   1d6d8:	bf94      	ite	ls
   1d6da:	1a36      	subls	r6, r6, r0
   1d6dc:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d6de:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d6e0:	4f20      	ldr	r7, [pc, #128]	; (1d764 <net_buf_alloc_len+0xdc>)
   1d6e2:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   1d6e6:	4632      	mov	r2, r6
   1d6e8:	699b      	ldr	r3, [r3, #24]
   1d6ea:	681b      	ldr	r3, [r3, #0]
   1d6ec:	a901      	add	r1, sp, #4
   1d6ee:	681b      	ldr	r3, [r3, #0]
   1d6f0:	4620      	mov	r0, r4
   1d6f2:	4798      	blx	r3
   1d6f4:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d6f6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d6f8:	bb48      	cbnz	r0, 1d74e <net_buf_alloc_len+0xc6>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1d6fa:	79a0      	ldrb	r0, [r4, #6]
   1d6fc:	4621      	mov	r1, r4
   1d6fe:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1d702:	f007 fca2 	bl	2504a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d706:	462c      	mov	r4, r5
   1d708:	e01c      	b.n	1d744 <net_buf_alloc_len+0xbc>
		uninit_count = pool->uninit_count--;
   1d70a:	8a6b      	ldrh	r3, [r5, #18]
   1d70c:	1e5a      	subs	r2, r3, #1
   1d70e:	826a      	strh	r2, [r5, #18]
   1d710:	f388 8811 	msr	BASEPRI, r8
   1d714:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1d718:	8a2c      	ldrh	r4, [r5, #16]
   1d71a:	1ae4      	subs	r4, r4, r3
   1d71c:	69eb      	ldr	r3, [r5, #28]
   1d71e:	2218      	movs	r2, #24
   1d720:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1d724:	4b0f      	ldr	r3, [pc, #60]	; (1d764 <net_buf_alloc_len+0xdc>)
   1d726:	1aed      	subs	r5, r5, r3
   1d728:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   1d72a:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d72c:	e7ca      	b.n	1d6c4 <net_buf_alloc_len+0x3c>
   1d72e:	f388 8811 	msr	BASEPRI, r8
   1d732:	f3bf 8f6f 	isb	sy
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1d736:	4631      	mov	r1, r6
   1d738:	4628      	mov	r0, r5
   1d73a:	f007 fca8 	bl	2508e <z_impl_k_queue_get>
	if (!buf) {
   1d73e:	4604      	mov	r4, r0
   1d740:	2800      	cmp	r0, #0
   1d742:	d1bf      	bne.n	1d6c4 <net_buf_alloc_len+0x3c>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1d744:	4620      	mov	r0, r4
   1d746:	b002      	add	sp, #8
   1d748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   1d74c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1d74e:	2300      	movs	r3, #0
	buf->ref   = 1;
   1d750:	2201      	movs	r2, #1
	buf->frags = NULL;
   1d752:	6023      	str	r3, [r4, #0]
	buf->ref   = 1;
   1d754:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0;
   1d756:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1d758:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1d75a:	6923      	ldr	r3, [r4, #16]
   1d75c:	81e2      	strh	r2, [r4, #14]
   1d75e:	60a3      	str	r3, [r4, #8]
	return buf;
   1d760:	e7f0      	b.n	1d744 <net_buf_alloc_len+0xbc>
   1d762:	bf00      	nop
   1d764:	2000790c 	.word	0x2000790c

0001d768 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d76a:	4d15      	ldr	r5, [pc, #84]	; (1d7c0 <net_buf_unref+0x58>)
   1d76c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d76e:	2600      	movs	r6, #0
	while (buf) {
   1d770:	b904      	cbnz	r4, 1d774 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   1d774:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1d776:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   1d778:	3b01      	subs	r3, #1
   1d77a:	b2db      	uxtb	r3, r3
   1d77c:	7123      	strb	r3, [r4, #4]
   1d77e:	2b00      	cmp	r3, #0
   1d780:	d1f7      	bne.n	1d772 <net_buf_unref+0xa>
		if (buf->__buf) {
   1d782:	6921      	ldr	r1, [r4, #16]
   1d784:	b159      	cbz	r1, 1d79e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d786:	7963      	ldrb	r3, [r4, #5]
   1d788:	079b      	lsls	r3, r3, #30
   1d78a:	d407      	bmi.n	1d79c <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
   1d78c:	79a3      	ldrb	r3, [r4, #6]
   1d78e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1d792:	4620      	mov	r0, r4
   1d794:	699b      	ldr	r3, [r3, #24]
   1d796:	681b      	ldr	r3, [r3, #0]
   1d798:	689b      	ldr	r3, [r3, #8]
   1d79a:	4798      	blx	r3
			buf->__buf = NULL;
   1d79c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1d79e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d7a0:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1d7a2:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   1d7a6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1d7a8:	695b      	ldr	r3, [r3, #20]
   1d7aa:	b11b      	cbz	r3, 1d7b4 <net_buf_unref+0x4c>
			pool->destroy(buf);
   1d7ac:	4620      	mov	r0, r4
   1d7ae:	4798      	blx	r3
{
   1d7b0:	463c      	mov	r4, r7
   1d7b2:	e7dd      	b.n	1d770 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   1d7b4:	4621      	mov	r1, r4
   1d7b6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1d7ba:	f007 fc46 	bl	2504a <k_queue_prepend>
   1d7be:	e7f7      	b.n	1d7b0 <net_buf_unref+0x48>
   1d7c0:	2000790c 	.word	0x2000790c

0001d7c4 <nvmc_wait_ready>:
	while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   1d7c4:	4a02      	ldr	r2, [pc, #8]	; (1d7d0 <nvmc_wait_ready+0xc>)
   1d7c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1d7ca:	2b00      	cmp	r3, #0
   1d7cc:	d0fb      	beq.n	1d7c6 <nvmc_wait_ready+0x2>
}
   1d7ce:	4770      	bx	lr
   1d7d0:	4001e000 	.word	0x4001e000

0001d7d4 <flash_nrf_pages_layout>:
	*layout = &dev_layout;
   1d7d4:	4b02      	ldr	r3, [pc, #8]	; (1d7e0 <flash_nrf_pages_layout+0xc>)
   1d7d6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d7d8:	2301      	movs	r3, #1
   1d7da:	6013      	str	r3, [r2, #0]
}
   1d7dc:	4770      	bx	lr
   1d7de:	bf00      	nop
   1d7e0:	20001b8c 	.word	0x20001b8c

0001d7e4 <nrf_flash_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1d7e4:	2201      	movs	r2, #1
{
   1d7e6:	b508      	push	{r3, lr}
   1d7e8:	4611      	mov	r1, r2
   1d7ea:	4808      	ldr	r0, [pc, #32]	; (1d80c <nrf_flash_init+0x28>)
   1d7ec:	f007 fd8e 	bl	2530c <z_impl_k_sem_init>
   1d7f0:	2201      	movs	r2, #1
   1d7f2:	2100      	movs	r1, #0
   1d7f4:	4806      	ldr	r0, [pc, #24]	; (1d810 <nrf_flash_init+0x2c>)
   1d7f6:	f007 fd89 	bl	2530c <z_impl_k_sem_init>
	dev_layout.pages_count = NRF_FICR->CODESIZE;
   1d7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d7fe:	4b05      	ldr	r3, [pc, #20]	; (1d814 <nrf_flash_init+0x30>)
   1d800:	6951      	ldr	r1, [r2, #20]
   1d802:	6019      	str	r1, [r3, #0]
	dev_layout.pages_size = NRF_FICR->CODEPAGESIZE;
   1d804:	6912      	ldr	r2, [r2, #16]
   1d806:	605a      	str	r2, [r3, #4]
}
   1d808:	2000      	movs	r0, #0
   1d80a:	bd08      	pop	{r3, pc}
   1d80c:	20001b94 	.word	0x20001b94
   1d810:	20001bac 	.word	0x20001bac
   1d814:	20001b8c 	.word	0x20001b8c

0001d818 <time_slot_callback_helper>:
{
   1d818:	b570      	push	{r4, r5, r6, lr}
   1d81a:	b08c      	sub	sp, #48	; 0x30
   1d81c:	461d      	mov	r5, r3
   1d81e:	4606      	mov	r6, r0
	ll_radio_state_abort();
   1d820:	f006 ffcf 	bl	247c2 <ll_radio_state_abort>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1d824:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   1d828:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1d82c:	f007 f8ba 	bl	249a4 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   1d830:	4b13      	ldr	r3, [pc, #76]	; (1d880 <time_slot_callback_helper+0x68>)
   1d832:	9506      	str	r5, [sp, #24]
   1d834:	2400      	movs	r4, #0
   1d836:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1d83a:	2310      	movs	r3, #16
   1d83c:	9300      	str	r3, [sp, #0]
   1d83e:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1d842:	4633      	mov	r3, r6
   1d844:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1d848:	9401      	str	r4, [sp, #4]
   1d84a:	4622      	mov	r2, r4
   1d84c:	4621      	mov	r1, r4
   1d84e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1d852:	f7fb fc21 	bl	19098 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1d856:	f030 0302 	bics.w	r3, r0, #2
   1d85a:	d00e      	beq.n	1d87a <time_slot_callback_helper+0x62>
		((struct flash_op_desc *)context)->result = -ECANCELED;
   1d85c:	f06f 0347 	mvn.w	r3, #71	; 0x47
   1d860:	60ab      	str	r3, [r5, #8]
		err = ticker_stop(instance_index, 0, ticker_id, NULL, NULL);
   1d862:	9400      	str	r4, [sp, #0]
   1d864:	4623      	mov	r3, r4
   1d866:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1d86a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1d86e:	4621      	mov	r1, r4
   1d870:	f7fb fca4 	bl	191bc <ticker_stop>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1d874:	4803      	ldr	r0, [pc, #12]	; (1d884 <time_slot_callback_helper+0x6c>)
   1d876:	f001 f933 	bl	1eae0 <z_impl_k_sem_give>
}
   1d87a:	b00c      	add	sp, #48	; 0x30
   1d87c:	bd70      	pop	{r4, r5, r6, pc}
   1d87e:	bf00      	nop
   1d880:	0001d889 	.word	0x0001d889
   1d884:	20001bac 	.word	0x20001bac

0001d888 <time_slot_callback_work>:
{
   1d888:	b530      	push	{r4, r5, lr}
   1d88a:	461d      	mov	r5, r3
   1d88c:	b085      	sub	sp, #20
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1d88e:	e9d3 3000 	ldrd	r3, r0, [r3]
   1d892:	4798      	blx	r3
   1d894:	4604      	mov	r4, r0
   1d896:	b990      	cbnz	r0, 1d8be <time_slot_callback_work+0x36>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1d898:	f10d 010f 	add.w	r1, sp, #15
   1d89c:	f10d 000e 	add.w	r0, sp, #14
   1d8a0:	f007 f880 	bl	249a4 <ll_timeslice_ticker_id_get>
		result = ticker_stop(instance_index,
   1d8a4:	9400      	str	r4, [sp, #0]
   1d8a6:	4623      	mov	r3, r4
   1d8a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1d8ac:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1d8b0:	4621      	mov	r1, r4
   1d8b2:	f7fb fc83 	bl	191bc <ticker_stop>
		((struct flash_op_desc *)context)->result = 0;
   1d8b6:	60ac      	str	r4, [r5, #8]
   1d8b8:	4802      	ldr	r0, [pc, #8]	; (1d8c4 <time_slot_callback_work+0x3c>)
   1d8ba:	f001 f911 	bl	1eae0 <z_impl_k_sem_give>
}
   1d8be:	b005      	add	sp, #20
   1d8c0:	bd30      	pop	{r4, r5, pc}
   1d8c2:	bf00      	nop
   1d8c4:	20001bac 	.word	0x20001bac

0001d8c8 <flash_nrf_erase>:
{
   1d8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
   1d8ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   1d8ce:	460e      	mov	r6, r1
   1d8d0:	b08b      	sub	sp, #44	; 0x2c
	if (is_regular_addr_valid(addr, size)) {
   1d8d2:	4611      	mov	r1, r2
   1d8d4:	4630      	mov	r0, r6
{
   1d8d6:	4615      	mov	r5, r2
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
   1d8d8:	691f      	ldr	r7, [r3, #16]
	if (is_regular_addr_valid(addr, size)) {
   1d8da:	f007 faa4 	bl	24e26 <is_regular_addr_valid>
   1d8de:	2800      	cmp	r0, #0
   1d8e0:	d03a      	beq.n	1d958 <flash_nrf_erase+0x90>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d8e2:	fbb6 f3f7 	udiv	r3, r6, r7
   1d8e6:	fb07 6313 	mls	r3, r7, r3, r6
   1d8ea:	bbab      	cbnz	r3, 1d958 <flash_nrf_erase+0x90>
   1d8ec:	fbb5 f4f7 	udiv	r4, r5, r7
   1d8f0:	fb07 5414 	mls	r4, r7, r4, r5
   1d8f4:	bb84      	cbnz	r4, 1d958 <flash_nrf_erase+0x90>
		if (!n_pages) {
   1d8f6:	42af      	cmp	r7, r5
   1d8f8:	d822      	bhi.n	1d940 <flash_nrf_erase+0x78>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1d8fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d8fe:	4818      	ldr	r0, [pc, #96]	; (1d960 <flash_nrf_erase+0x98>)
   1d900:	f001 f918 	bl	1eb34 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1d904:	4620      	mov	r0, r4
   1d906:	f7fb fba9 	bl	1905c <ticker_is_initialized>
   1d90a:	ab04      	add	r3, sp, #16
   1d90c:	4601      	mov	r1, r0
   1d90e:	b1d0      	cbz	r0, 1d946 <flash_nrf_erase+0x7e>
	struct flash_context context = {
   1d910:	2210      	movs	r2, #16
   1d912:	4621      	mov	r1, r4
   1d914:	4618      	mov	r0, r3
   1d916:	f004 fae0 	bl	21eda <memset>
   1d91a:	2201      	movs	r2, #1
   1d91c:	f88d 201c 	strb.w	r2, [sp, #28]
   1d920:	4a10      	ldr	r2, [pc, #64]	; (1d964 <flash_nrf_erase+0x9c>)
	struct flash_op_desc flash_op_desc = {
   1d922:	9403      	str	r4, [sp, #12]
	struct flash_context context = {
   1d924:	e9cd 2208 	strd	r2, r2, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   1d928:	4a0f      	ldr	r2, [pc, #60]	; (1d968 <flash_nrf_erase+0xa0>)
   1d92a:	e9cd 2001 	strd	r2, r0, [sp, #4]
	return work_in_time_slice(&flash_op_desc);
   1d92e:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1d930:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return work_in_time_slice(&flash_op_desc);
   1d934:	f7e5 f8f0 	bl	2b18 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return	erase_op(&context);
   1d938:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1d93a:	4809      	ldr	r0, [pc, #36]	; (1d960 <flash_nrf_erase+0x98>)
   1d93c:	f001 f8d0 	bl	1eae0 <z_impl_k_sem_give>
}
   1d940:	4620      	mov	r0, r4
   1d942:	b00b      	add	sp, #44	; 0x2c
   1d944:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1d946:	2218      	movs	r2, #24
   1d948:	4618      	mov	r0, r3
   1d94a:	f004 fac6 	bl	21eda <memset>
   1d94e:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return	erase_op(&context);
   1d952:	f7e5 f88d 	bl	2a70 <erase_op>
   1d956:	e7ef      	b.n	1d938 <flash_nrf_erase+0x70>
		return -EINVAL;
   1d958:	f06f 0415 	mvn.w	r4, #21
   1d95c:	e7f0      	b.n	1d940 <flash_nrf_erase+0x78>
   1d95e:	bf00      	nop
   1d960:	20001b94 	.word	0x20001b94
   1d964:	00015e64 	.word	0x00015e64
   1d968:	00002a71 	.word	0x00002a71

0001d96c <flash_nrf_write_protection>:
{
   1d96c:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1d96e:	480a      	ldr	r0, [pc, #40]	; (1d998 <flash_nrf_write_protection+0x2c>)
   1d970:	460c      	mov	r4, r1
   1d972:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d976:	f001 f8dd 	bl	1eb34 <z_impl_k_sem_take>
	if (enable) {
   1d97a:	4b08      	ldr	r3, [pc, #32]	; (1d99c <flash_nrf_write_protection+0x30>)
   1d97c:	b14c      	cbz	r4, 1d992 <flash_nrf_write_protection+0x26>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1d97e:	2200      	movs	r2, #0
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1d980:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nvmc_wait_ready();
   1d984:	f7ff ff1e 	bl	1d7c4 <nvmc_wait_ready>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1d988:	4803      	ldr	r0, [pc, #12]	; (1d998 <flash_nrf_write_protection+0x2c>)
   1d98a:	f001 f8a9 	bl	1eae0 <z_impl_k_sem_give>
}
   1d98e:	2000      	movs	r0, #0
   1d990:	bd10      	pop	{r4, pc}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1d992:	2201      	movs	r2, #1
   1d994:	e7f4      	b.n	1d980 <flash_nrf_write_protection+0x14>
   1d996:	bf00      	nop
   1d998:	20001b94 	.word	0x20001b94
   1d99c:	4001e000 	.word	0x4001e000

0001d9a0 <flash_nrf_write>:
{
   1d9a0:	b570      	push	{r4, r5, r6, lr}
   1d9a2:	460d      	mov	r5, r1
   1d9a4:	b08a      	sub	sp, #40	; 0x28
	return is_regular_addr_valid(addr, len) ||
   1d9a6:	4619      	mov	r1, r3
   1d9a8:	4628      	mov	r0, r5
{
   1d9aa:	4616      	mov	r6, r2
   1d9ac:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   1d9ae:	f007 fa3a 	bl	24e26 <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   1d9b2:	b368      	cbz	r0, 1da10 <flash_nrf_write+0x70>
	if (!len) {
   1d9b4:	b304      	cbz	r4, 1d9f8 <flash_nrf_write+0x58>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1d9b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d9ba:	4817      	ldr	r0, [pc, #92]	; (1da18 <flash_nrf_write+0x78>)
   1d9bc:	f001 f8ba 	bl	1eb34 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1d9c0:	2000      	movs	r0, #0
   1d9c2:	f7fb fb4b 	bl	1905c <ticker_is_initialized>
   1d9c6:	4603      	mov	r3, r0
   1d9c8:	a804      	add	r0, sp, #16
   1d9ca:	b1c3      	cbz	r3, 1d9fe <flash_nrf_write+0x5e>
	struct flash_context context = {
   1d9cc:	2301      	movs	r3, #1
   1d9ce:	f88d 301c 	strb.w	r3, [sp, #28]
   1d9d2:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1d9d6:	e9cd 3308 	strd	r3, r3, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   1d9da:	2300      	movs	r3, #0
   1d9dc:	9303      	str	r3, [sp, #12]
   1d9de:	4b0f      	ldr	r3, [pc, #60]	; (1da1c <flash_nrf_write+0x7c>)
	struct flash_context context = {
   1d9e0:	9406      	str	r4, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   1d9e2:	e9cd 3001 	strd	r3, r0, [sp, #4]
	return  work_in_time_slice(&flash_op_desc);
   1d9e6:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1d9e8:	e9cd 6504 	strd	r6, r5, [sp, #16]
	return  work_in_time_slice(&flash_op_desc);
   1d9ec:	f7e5 f894 	bl	2b18 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
   1d9f0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1d9f2:	4809      	ldr	r0, [pc, #36]	; (1da18 <flash_nrf_write+0x78>)
   1d9f4:	f001 f874 	bl	1eae0 <z_impl_k_sem_give>
}
   1d9f8:	4620      	mov	r0, r4
   1d9fa:	b00a      	add	sp, #40	; 0x28
   1d9fc:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   1d9fe:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1da02:	9309      	str	r3, [sp, #36]	; 0x24
   1da04:	e9cd 6504 	strd	r6, r5, [sp, #16]
   1da08:	9406      	str	r4, [sp, #24]
	return write_op(&context);
   1da0a:	f7e5 f8f9 	bl	2c00 <write_op>
   1da0e:	e7ef      	b.n	1d9f0 <flash_nrf_write+0x50>
		return -EINVAL;
   1da10:	f06f 0415 	mvn.w	r4, #21
   1da14:	e7f0      	b.n	1d9f8 <flash_nrf_write+0x58>
   1da16:	bf00      	nop
   1da18:	20001b94 	.word	0x20001b94
   1da1c:	00002c01 	.word	0x00002c01

0001da20 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da20:	4b03      	ldr	r3, [pc, #12]	; (1da30 <uart_nrfx_err_check+0x10>)
   1da22:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   1da24:	b118      	cbz	r0, 1da2e <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1da26:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   1da2a:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
   1da2e:	4770      	bx	lr
   1da30:	40002124 	.word	0x40002124

0001da34 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
   1da34:	b530      	push	{r4, r5, lr}
	nrf_uart_parity_t parity;
	nrf_uart_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1da36:	794b      	ldrb	r3, [r1, #5]
   1da38:	2b01      	cmp	r3, #1
   1da3a:	d120      	bne.n	1da7e <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1da3c:	798b      	ldrb	r3, [r1, #6]
   1da3e:	2b03      	cmp	r3, #3
   1da40:	d11d      	bne.n	1da7e <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1da42:	79cc      	ldrb	r4, [r1, #7]
   1da44:	b12c      	cbz	r4, 1da52 <uart_nrfx_configure+0x1e>
   1da46:	2c01      	cmp	r4, #1
   1da48:	d119      	bne.n	1da7e <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
   1da4a:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1da4c:	689b      	ldr	r3, [r3, #8]
   1da4e:	781b      	ldrb	r3, [r3, #0]
   1da50:	b1ab      	cbz	r3, 1da7e <uart_nrfx_configure+0x4a>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   1da52:	790a      	ldrb	r2, [r1, #4]
   1da54:	b112      	cbz	r2, 1da5c <uart_nrfx_configure+0x28>
   1da56:	2a02      	cmp	r2, #2
   1da58:	d111      	bne.n	1da7e <uart_nrfx_configure+0x4a>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UART_PARITY_INCLUDED;
   1da5a:	220e      	movs	r2, #14
		break;
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1da5c:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1da5e:	f647 2512 	movw	r5, #31250	; 0x7a12
   1da62:	42ab      	cmp	r3, r5
   1da64:	d05f      	beq.n	1db26 <uart_nrfx_configure+0xf2>
   1da66:	d827      	bhi.n	1dab8 <uart_nrfx_configure+0x84>
   1da68:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1da6c:	d05e      	beq.n	1db2c <uart_nrfx_configure+0xf8>
   1da6e:	d812      	bhi.n	1da96 <uart_nrfx_configure+0x62>
   1da70:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1da74:	d05c      	beq.n	1db30 <uart_nrfx_configure+0xfc>
   1da76:	d805      	bhi.n	1da84 <uart_nrfx_configure+0x50>
   1da78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1da7c:	d05b      	beq.n	1db36 <uart_nrfx_configure+0x102>
		return -ENOTSUP;
   1da7e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1da82:	e04f      	b.n	1db24 <uart_nrfx_configure+0xf0>
	switch (baudrate) {
   1da84:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1da88:	d058      	beq.n	1db3c <uart_nrfx_configure+0x108>
   1da8a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1da8e:	d1f6      	bne.n	1da7e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1da90:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1da94:	e03b      	b.n	1db0e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1da96:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1da9a:	d052      	beq.n	1db42 <uart_nrfx_configure+0x10e>
   1da9c:	d804      	bhi.n	1daa8 <uart_nrfx_configure+0x74>
   1da9e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1daa2:	d1ec      	bne.n	1da7e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1daa4:	4b30      	ldr	r3, [pc, #192]	; (1db68 <uart_nrfx_configure+0x134>)
   1daa6:	e032      	b.n	1db0e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1daa8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1daac:	d04c      	beq.n	1db48 <uart_nrfx_configure+0x114>
   1daae:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1dab2:	d1e4      	bne.n	1da7e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1dab4:	4b2d      	ldr	r3, [pc, #180]	; (1db6c <uart_nrfx_configure+0x138>)
   1dab6:	e02a      	b.n	1db0e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1dab8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1dabc:	d046      	beq.n	1db4c <uart_nrfx_configure+0x118>
   1dabe:	d811      	bhi.n	1dae4 <uart_nrfx_configure+0xb0>
   1dac0:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1dac4:	42ab      	cmp	r3, r5
   1dac6:	d043      	beq.n	1db50 <uart_nrfx_configure+0x11c>
   1dac8:	d804      	bhi.n	1dad4 <uart_nrfx_configure+0xa0>
   1daca:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1dace:	d1d6      	bne.n	1da7e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1dad0:	4b27      	ldr	r3, [pc, #156]	; (1db70 <uart_nrfx_configure+0x13c>)
   1dad2:	e01c      	b.n	1db0e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1dad4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1dad8:	d03d      	beq.n	1db56 <uart_nrfx_configure+0x122>
   1dada:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1dade:	d1ce      	bne.n	1da7e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1dae0:	4b24      	ldr	r3, [pc, #144]	; (1db74 <uart_nrfx_configure+0x140>)
   1dae2:	e014      	b.n	1db0e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1dae4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1dae8:	d037      	beq.n	1db5a <uart_nrfx_configure+0x126>
   1daea:	d808      	bhi.n	1dafe <uart_nrfx_configure+0xca>
   1daec:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1daf0:	d035      	beq.n	1db5e <uart_nrfx_configure+0x12a>
   1daf2:	4d21      	ldr	r5, [pc, #132]	; (1db78 <uart_nrfx_configure+0x144>)
   1daf4:	42ab      	cmp	r3, r5
   1daf6:	d1c2      	bne.n	1da7e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1daf8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1dafc:	e007      	b.n	1db0e <uart_nrfx_configure+0xda>
	switch (baudrate) {
   1dafe:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1db02:	d02e      	beq.n	1db62 <uart_nrfx_configure+0x12e>
   1db04:	4d1d      	ldr	r5, [pc, #116]	; (1db7c <uart_nrfx_configure+0x148>)
   1db06:	42ab      	cmp	r3, r5
   1db08:	d1b9      	bne.n	1da7e <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1db0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1db0e:	4d1c      	ldr	r5, [pc, #112]	; (1db80 <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   1db10:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1db12:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   1db16:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
   1db1a:	6883      	ldr	r3, [r0, #8]
   1db1c:	c903      	ldmia	r1, {r0, r1}
   1db1e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1db22:	2000      	movs	r0, #0
}
   1db24:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1db26:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1db2a:	e7f0      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1db2c:	4b15      	ldr	r3, [pc, #84]	; (1db84 <uart_nrfx_configure+0x150>)
   1db2e:	e7ee      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
   1db30:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1db34:	e7eb      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1db36:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1db3a:	e7e8      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1db3c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1db40:	e7e5      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1db42:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1db46:	e7e2      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1db48:	4b0f      	ldr	r3, [pc, #60]	; (1db88 <uart_nrfx_configure+0x154>)
   1db4a:	e7e0      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1db4c:	4b0f      	ldr	r3, [pc, #60]	; (1db8c <uart_nrfx_configure+0x158>)
   1db4e:	e7de      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1db50:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1db54:	e7db      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1db56:	4b0e      	ldr	r3, [pc, #56]	; (1db90 <uart_nrfx_configure+0x15c>)
   1db58:	e7d9      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1db5a:	4b0e      	ldr	r3, [pc, #56]	; (1db94 <uart_nrfx_configure+0x160>)
   1db5c:	e7d7      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1db5e:	4b0e      	ldr	r3, [pc, #56]	; (1db98 <uart_nrfx_configure+0x164>)
   1db60:	e7d5      	b.n	1db0e <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1db62:	4b0e      	ldr	r3, [pc, #56]	; (1db9c <uart_nrfx_configure+0x168>)
   1db64:	e7d3      	b.n	1db0e <uart_nrfx_configure+0xda>
   1db66:	bf00      	nop
   1db68:	00275000 	.word	0x00275000
   1db6c:	0075f000 	.word	0x0075f000
   1db70:	009d5000 	.word	0x009d5000
   1db74:	013a9000 	.word	0x013a9000
   1db78:	0003d090 	.word	0x0003d090
   1db7c:	000f4240 	.word	0x000f4240
   1db80:	40002000 	.word	0x40002000
   1db84:	0013b000 	.word	0x0013b000
   1db88:	004ea000 	.word	0x004ea000
   1db8c:	01d7e000 	.word	0x01d7e000
   1db90:	00ebf000 	.word	0x00ebf000
   1db94:	075f7000 	.word	0x075f7000
   1db98:	03afb000 	.word	0x03afb000
   1db9c:	0ebed000 	.word	0x0ebed000

0001dba0 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dba0:	4b08      	ldr	r3, [pc, #32]	; (1dbc4 <uart_nrfx_poll_in+0x24>)
   1dba2:	681a      	ldr	r2, [r3, #0]
{
   1dba4:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1dba6:	b152      	cbz	r2, 1dbbe <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dba8:	2000      	movs	r0, #0
   1dbaa:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1dbac:	681b      	ldr	r3, [r3, #0]
   1dbae:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1dbb0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1dbb2:	4b05      	ldr	r3, [pc, #20]	; (1dbc8 <uart_nrfx_poll_in+0x28>)
   1dbb4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1dbb8:	700b      	strb	r3, [r1, #0]
}
   1dbba:	b002      	add	sp, #8
   1dbbc:	4770      	bx	lr
		return -1;
   1dbbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dbc2:	e7fa      	b.n	1dbba <uart_nrfx_poll_in+0x1a>
   1dbc4:	40002108 	.word	0x40002108
   1dbc8:	40002000 	.word	0x40002000

0001dbcc <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbcc:	4b09      	ldr	r3, [pc, #36]	; (1dbf4 <uart_nrfx_poll_out+0x28>)
   1dbce:	2200      	movs	r2, #0
   1dbd0:	601a      	str	r2, [r3, #0]
{
   1dbd2:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1dbd4:	681a      	ldr	r2, [r3, #0]
   1dbd6:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1dbd8:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbda:	4a07      	ldr	r2, [pc, #28]	; (1dbf8 <uart_nrfx_poll_out+0x2c>)
   1dbdc:	2001      	movs	r0, #1
   1dbde:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
   1dbe0:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbe4:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
   1dbe6:	2a00      	cmp	r2, #0
   1dbe8:	d0fc      	beq.n	1dbe4 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbea:	4b04      	ldr	r3, [pc, #16]	; (1dbfc <uart_nrfx_poll_out+0x30>)
   1dbec:	2201      	movs	r2, #1
   1dbee:	601a      	str	r2, [r3, #0]
}
   1dbf0:	b002      	add	sp, #8
   1dbf2:	4770      	bx	lr
   1dbf4:	4000211c 	.word	0x4000211c
   1dbf8:	40002008 	.word	0x40002008
   1dbfc:	4000200c 	.word	0x4000200c

0001dc00 <uart_nrfx_init>:
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1dc00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1dc04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
   1dc06:	4c16      	ldr	r4, [pc, #88]	; (1dc60 <uart_nrfx_init+0x60>)
   1dc08:	2240      	movs	r2, #64	; 0x40
   1dc0a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1dc0e:	2103      	movs	r1, #3
   1dc10:	2200      	movs	r2, #0
   1dc12:	2508      	movs	r5, #8
   1dc14:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1dc18:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1dc1c:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   1dc20:	2506      	movs	r5, #6
   1dc22:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1dc26:	2520      	movs	r5, #32
   1dc28:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1dc2c:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1dc30:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
   1dc34:	2305      	movs	r3, #5
   1dc36:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
   1dc3a:	2307      	movs	r3, #7
   1dc3c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1dc40:	6881      	ldr	r1, [r0, #8]
   1dc42:	f7ff fef7 	bl	1da34 <uart_nrfx_configure>
	if (err) {
   1dc46:	b948      	cbnz	r0, 1dc5c <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1dc48:	2304      	movs	r3, #4
   1dc4a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc4e:	4b05      	ldr	r3, [pc, #20]	; (1dc64 <uart_nrfx_init+0x64>)
   1dc50:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1dc52:	681b      	ldr	r3, [r3, #0]
   1dc54:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1dc56:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc58:	2301      	movs	r3, #1
   1dc5a:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1dc5c:	b003      	add	sp, #12
   1dc5e:	bd30      	pop	{r4, r5, pc}
   1dc60:	40002000 	.word	0x40002000
   1dc64:	40002108 	.word	0x40002108

0001dc68 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   1dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
   1dc6a:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
   1dc6c:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1dc6e:	f04f 0420 	mov.w	r4, #32
   1dc72:	f3ef 8e11 	mrs	lr, BASEPRI
   1dc76:	f384 8811 	msr	BASEPRI, r4
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1dc7a:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1dc7c:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   1dc80:	1b9b      	subs	r3, r3, r6
   1dc82:	403b      	ands	r3, r7
	if (available < len) {
   1dc84:	429a      	cmp	r2, r3
		len = available;
   1dc86:	bf88      	it	hi
   1dc88:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1dc8a:	18b4      	adds	r4, r6, r2
   1dc8c:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   1dc8e:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1dc90:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   1dc92:	f38e 8811 	msr	BASEPRI, lr
   1dc96:	f3bf 8f6f 	isb	sy
   1dc9a:	440a      	add	r2, r1
	u8_t *dst   = buf;
   1dc9c:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   1dc9e:	42a2      	cmp	r2, r4
   1dca0:	d118      	bne.n	1dcd4 <rng_pool_get+0x6c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1dca2:	4566      	cmp	r6, ip
   1dca4:	d10b      	bne.n	1dcbe <rng_pool_get+0x56>
	__asm__ volatile(
   1dca6:	f04f 0520 	mov.w	r5, #32
   1dcaa:	f3ef 8211 	mrs	r2, BASEPRI
   1dcae:	f385 8811 	msr	BASEPRI, r5
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1dcb2:	7805      	ldrb	r5, [r0, #0]
   1dcb4:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   1dcb6:	f382 8811 	msr	BASEPRI, r2
   1dcba:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1dcbe:	1a64      	subs	r4, r4, r1
   1dcc0:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   1dcc2:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   1dcc4:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   1dcc6:	42a1      	cmp	r1, r4
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   1dcc8:	bf22      	ittt	cs
   1dcca:	4b07      	ldrcs	r3, [pc, #28]	; (1dce8 <rng_pool_get+0x80>)
   1dccc:	2101      	movcs	r1, #1
   1dcce:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
   1dcd0:	4610      	mov	r0, r2
   1dcd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1dcd4:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   1dcd8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1dcda:	f89e e005 	ldrb.w	lr, [lr, #5]
   1dcde:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   1dce2:	403d      	ands	r5, r7
   1dce4:	e7db      	b.n	1dc9e <rng_pool_get+0x36>
   1dce6:	bf00      	nop
   1dce8:	4000d000 	.word	0x4000d000

0001dcec <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   1dcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1dcf0:	4d11      	ldr	r5, [pc, #68]	; (1dd38 <entropy_nrf5_get_entropy+0x4c>)
   1dcf2:	460e      	mov	r6, r1
   1dcf4:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1dcf6:	f105 0845 	add.w	r8, r5, #69	; 0x45
   1dcfa:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   1dcfe:	b914      	cbnz	r4, 1dd06 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   1dd00:	4620      	mov	r0, r4
   1dd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dd06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dd0a:	4628      	mov	r0, r5
   1dd0c:	f000 ff12 	bl	1eb34 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1dd10:	4622      	mov	r2, r4
   1dd12:	4631      	mov	r1, r6
   1dd14:	4640      	mov	r0, r8
   1dd16:	f7ff ffa7 	bl	1dc68 <rng_pool_get>
   1dd1a:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1dd1c:	4628      	mov	r0, r5
   1dd1e:	f000 fedf 	bl	1eae0 <z_impl_k_sem_give>
		if (bytes == 0) {
   1dd22:	b92f      	cbnz	r7, 1dd30 <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1dd24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dd28:	4648      	mov	r0, r9
   1dd2a:	f000 ff03 	bl	1eb34 <z_impl_k_sem_take>
   1dd2e:	e7e6      	b.n	1dcfe <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1dd30:	1be4      	subs	r4, r4, r7
   1dd32:	b2a4      	uxth	r4, r4
		buf += bytes;
   1dd34:	443e      	add	r6, r7
   1dd36:	e7e2      	b.n	1dcfe <entropy_nrf5_get_entropy+0x12>
   1dd38:	20001bc4 	.word	0x20001bc4

0001dd3c <random_byte_get>:
{
   1dd3c:	b082      	sub	sp, #8
	__asm__ volatile(
   1dd3e:	f04f 0320 	mov.w	r3, #32
   1dd42:	f3ef 8211 	mrs	r2, BASEPRI
   1dd46:	f383 8811 	msr	BASEPRI, r3
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1dd4a:	4b0a      	ldr	r3, [pc, #40]	; (1dd74 <random_byte_get+0x38>)
   1dd4c:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   1dd4e:	b171      	cbz	r1, 1dd6e <random_byte_get+0x32>
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
   1dd50:	4909      	ldr	r1, [pc, #36]	; (1dd78 <random_byte_get+0x3c>)
   1dd52:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   1dd56:	2100      	movs	r1, #0
   1dd58:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1dd5a:	681b      	ldr	r3, [r3, #0]
   1dd5c:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1dd5e:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
   1dd60:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1dd62:	f382 8811 	msr	BASEPRI, r2
   1dd66:	f3bf 8f6f 	isb	sy
}
   1dd6a:	b002      	add	sp, #8
   1dd6c:	4770      	bx	lr
	int retval = -EAGAIN;
   1dd6e:	f06f 000a 	mvn.w	r0, #10
   1dd72:	e7f6      	b.n	1dd62 <random_byte_get+0x26>
   1dd74:	4000d100 	.word	0x4000d100
   1dd78:	4000d000 	.word	0x4000d000

0001dd7c <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1dd7c:	07db      	lsls	r3, r3, #31
{
   1dd7e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1dd82:	4688      	mov	r8, r1
   1dd84:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   1dd86:	d405      	bmi.n	1dd94 <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1dd88:	481e      	ldr	r0, [pc, #120]	; (1de04 <entropy_nrf5_get_entropy_isr+0x88>)
   1dd8a:	f7ff ff6d 	bl	1dc68 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   1dd8e:	b002      	add	sp, #8
   1dd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1dd94:	b382      	cbz	r2, 1ddf8 <entropy_nrf5_get_entropy_isr+0x7c>
	__asm__ volatile(
   1dd96:	f04f 0320 	mov.w	r3, #32
   1dd9a:	f3ef 8511 	mrs	r5, BASEPRI
   1dd9e:	f383 8811 	msr	BASEPRI, r3
		irq_enabled = irq_is_enabled(RNG_IRQn);
   1dda2:	200d      	movs	r0, #13
   1dda4:	f7e7 f9b2 	bl	510c <z_arch_irq_is_enabled>
   1dda8:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
   1ddaa:	200d      	movs	r0, #13
   1ddac:	f7e7 f99a 	bl	50e4 <z_arch_irq_disable>
	__asm__ volatile(
   1ddb0:	f385 8811 	msr	BASEPRI, r5
   1ddb4:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   1ddb8:	4e13      	ldr	r6, [pc, #76]	; (1de08 <entropy_nrf5_get_entropy_isr+0x8c>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ddba:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1de10 <entropy_nrf5_get_entropy_isr+0x94>
   1ddbe:	2200      	movs	r2, #0
   1ddc0:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1ddc2:	6832      	ldr	r2, [r6, #0]
   1ddc4:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1ddc6:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   1ddc8:	4a10      	ldr	r2, [pc, #64]	; (1de0c <entropy_nrf5_get_entropy_isr+0x90>)
   1ddca:	2101      	movs	r1, #1
   1ddcc:	6011      	str	r1, [r2, #0]
   1ddce:	4625      	mov	r5, r4
   1ddd0:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1ddd4:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   1ddd6:	b18b      	cbz	r3, 1ddfc <entropy_nrf5_get_entropy_isr+0x80>
			byte = random_byte_get();
   1ddd8:	f7ff ffb0 	bl	1dd3c <random_byte_get>
			if (byte < 0) {
   1dddc:	2800      	cmp	r0, #0
   1ddde:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1dde2:	dbf7      	blt.n	1ddd4 <entropy_nrf5_get_entropy_isr+0x58>
   1dde4:	3d01      	subs	r5, #1
   1dde6:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1dde8:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   1ddec:	2d00      	cmp	r5, #0
   1ddee:	d1f1      	bne.n	1ddd4 <entropy_nrf5_get_entropy_isr+0x58>
		if (irq_enabled) {
   1ddf0:	b117      	cbz	r7, 1ddf8 <entropy_nrf5_get_entropy_isr+0x7c>
			irq_enable(RNG_IRQn);
   1ddf2:	200d      	movs	r0, #13
   1ddf4:	f7e7 f966 	bl	50c4 <z_arch_irq_enable>
	return cnt;
   1ddf8:	4620      	mov	r0, r4
   1ddfa:	e7c8      	b.n	1dd8e <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
   1ddfc:	bf20      	wfe
				__SEV();
   1ddfe:	bf40      	sev
				__WFE();
   1de00:	bf20      	wfe
   1de02:	e7e7      	b.n	1ddd4 <entropy_nrf5_get_entropy_isr+0x58>
   1de04:	20001bf4 	.word	0x20001bf4
   1de08:	4000d100 	.word	0x4000d100
   1de0c:	4000d000 	.word	0x4000d000
   1de10:	e000e100 	.word	0xe000e100

0001de14 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1de14:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1de16:	4c1b      	ldr	r4, [pc, #108]	; (1de84 <entropy_nrf5_init+0x70>)
   1de18:	2201      	movs	r2, #1
   1de1a:	4611      	mov	r1, r2
   1de1c:	4620      	mov	r0, r4
   1de1e:	f007 fa75 	bl	2530c <z_impl_k_sem_init>
   1de22:	f104 0018 	add.w	r0, r4, #24
   1de26:	2201      	movs	r2, #1
   1de28:	2100      	movs	r1, #0
   1de2a:	f007 fa6f 	bl	2530c <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1de2e:	f240 4307 	movw	r3, #1031	; 0x407
   1de32:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1de36:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1de3a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1de3c:	230c      	movs	r3, #12
   1de3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1de42:	2500      	movs	r5, #0
}

__STATIC_INLINE void nrf_rng_error_correction_enable(void)
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1de44:	4b10      	ldr	r3, [pc, #64]	; (1de88 <entropy_nrf5_init+0x74>)
   1de46:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1de4a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1de4e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1de52:	f042 0201 	orr.w	r2, r2, #1
   1de56:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   1de5a:	4a0c      	ldr	r2, [pc, #48]	; (1de8c <entropy_nrf5_init+0x78>)
   1de5c:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1de5e:	6812      	ldr	r2, [r2, #0]
   1de60:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1de62:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = rng_int_mask;
   1de64:	2201      	movs	r2, #1
   1de66:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   1de6a:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   1de6c:	601a      	str	r2, [r3, #0]
   1de6e:	200d      	movs	r0, #13
   1de70:	462a      	mov	r2, r5
   1de72:	f7e7 f959 	bl	5128 <z_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   1de76:	200d      	movs	r0, #13
   1de78:	f7e7 f924 	bl	50c4 <z_arch_irq_enable>

	return 0;
}
   1de7c:	4628      	mov	r0, r5
   1de7e:	b003      	add	sp, #12
   1de80:	bd30      	pop	{r4, r5, pc}
   1de82:	bf00      	nop
   1de84:	20001bc4 	.word	0x20001bc4
   1de88:	4000d000 	.word	0x4000d000
   1de8c:	4000d100 	.word	0x4000d100

0001de90 <isr>:
{
   1de90:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1de92:	f7ff ff53 	bl	1dd3c <random_byte_get>
	if (byte < 0) {
   1de96:	2800      	cmp	r0, #0
   1de98:	db20      	blt.n	1dedc <isr+0x4c>
	u8_t last  = rngp->last;
   1de9a:	4b17      	ldr	r3, [pc, #92]	; (1def8 <isr+0x68>)
   1de9c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1dea0:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   1dea4:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1dea8:	1a51      	subs	r1, r2, r1
   1deaa:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1deae:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1deb0:	d10d      	bne.n	1dece <isr+0x3e>
	u8_t last  = rngp->last;
   1deb2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1deb6:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   1deba:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1debe:	1a51      	subs	r1, r2, r1
   1dec0:	ea34 0101 	bics.w	r1, r4, r1
   1dec4:	d10b      	bne.n	1dede <isr+0x4e>
   1dec6:	4b0d      	ldr	r3, [pc, #52]	; (1defc <isr+0x6c>)
   1dec8:	2201      	movs	r2, #1
   1deca:	601a      	str	r2, [r3, #0]
   1decc:	e00e      	b.n	1deec <isr+0x5c>
	rngp->buffer[last] = byte;
   1dece:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ded0:	3201      	adds	r2, #1
   1ded2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ded4:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ded8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1dedc:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1dede:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1dee0:	3201      	adds	r2, #1
   1dee2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1dee4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1dee8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1deec:	4804      	ldr	r0, [pc, #16]	; (1df00 <isr+0x70>)
}
   1deee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1def2:	f000 bdf5 	b.w	1eae0 <z_impl_k_sem_give>
   1def6:	bf00      	nop
   1def8:	20001bc4 	.word	0x20001bc4
   1defc:	4000d004 	.word	0x4000d004
   1df00:	20001bdc 	.word	0x20001bdc

0001df04 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   1df04:	4b09      	ldr	r3, [pc, #36]	; (1df2c <z_sys_device_do_config_level+0x28>)
{
   1df06:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
   1df08:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1df0c:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   1df0e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   1df10:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1df14:	42a5      	cmp	r5, r4
   1df16:	d800      	bhi.n	1df1a <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   1df18:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1df1a:	6823      	ldr	r3, [r4, #0]
   1df1c:	4620      	mov	r0, r4
   1df1e:	685b      	ldr	r3, [r3, #4]
   1df20:	4798      	blx	r3
		if (retval != 0) {
   1df22:	b100      	cbz	r0, 1df26 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1df24:	6066      	str	r6, [r4, #4]
								info++) {
   1df26:	340c      	adds	r4, #12
   1df28:	e7f4      	b.n	1df14 <z_sys_device_do_config_level+0x10>
   1df2a:	bf00      	nop
   1df2c:	000263b4 	.word	0x000263b4

0001df30 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1df30:	4b10      	ldr	r3, [pc, #64]	; (1df74 <z_impl_device_get_binding+0x44>)
{
   1df32:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1df34:	4c10      	ldr	r4, [pc, #64]	; (1df78 <z_impl_device_get_binding+0x48>)
{
   1df36:	4605      	mov	r5, r0
   1df38:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   1df3a:	429c      	cmp	r4, r3
   1df3c:	d104      	bne.n	1df48 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1df3e:	4c0e      	ldr	r4, [pc, #56]	; (1df78 <z_impl_device_get_binding+0x48>)
   1df40:	42b4      	cmp	r4, r6
   1df42:	d109      	bne.n	1df58 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1df44:	2400      	movs	r4, #0
   1df46:	e012      	b.n	1df6e <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   1df48:	6862      	ldr	r2, [r4, #4]
   1df4a:	b11a      	cbz	r2, 1df54 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1df4c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1df4e:	6812      	ldr	r2, [r2, #0]
   1df50:	42aa      	cmp	r2, r5
   1df52:	d00c      	beq.n	1df6e <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1df54:	340c      	adds	r4, #12
   1df56:	e7f0      	b.n	1df3a <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   1df58:	6863      	ldr	r3, [r4, #4]
   1df5a:	b90b      	cbnz	r3, 1df60 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1df5c:	340c      	adds	r4, #12
   1df5e:	e7ef      	b.n	1df40 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   1df60:	6823      	ldr	r3, [r4, #0]
   1df62:	4628      	mov	r0, r5
   1df64:	6819      	ldr	r1, [r3, #0]
   1df66:	f003 ff5b 	bl	21e20 <strcmp>
   1df6a:	2800      	cmp	r0, #0
   1df6c:	d1f6      	bne.n	1df5c <z_impl_device_get_binding+0x2c>
}
   1df6e:	4620      	mov	r0, r4
   1df70:	bd70      	pop	{r4, r5, r6, pc}
   1df72:	bf00      	nop
   1df74:	20007894 	.word	0x20007894
   1df78:	200077d4 	.word	0x200077d4

0001df7c <z_impl_z_errno>:

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1df7c:	4b01      	ldr	r3, [pc, #4]	; (1df84 <z_impl_z_errno+0x8>)
   1df7e:	6898      	ldr	r0, [r3, #8]
}
   1df80:	3054      	adds	r0, #84	; 0x54
   1df82:	4770      	bx	lr
   1df84:	20001cf0 	.word	0x20001cf0

0001df88 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1df88:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1df8a:	4d0a      	ldr	r5, [pc, #40]	; (1dfb4 <idle+0x2c>)
	__asm__ volatile(
   1df8c:	f04f 0220 	mov.w	r2, #32
   1df90:	f3ef 8311 	mrs	r3, BASEPRI
   1df94:	f382 8811 	msr	BASEPRI, r2
	s32_t ticks = z_get_next_timeout_expiry();
   1df98:	f007 fa83 	bl	254a2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1df9c:	2101      	movs	r1, #1
   1df9e:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   1dfa0:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1dfa2:	bfd8      	it	le
   1dfa4:	4608      	movle	r0, r1
   1dfa6:	f007 fa8a 	bl	254be <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1dfaa:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
   1dfac:	f7e7 f916 	bl	51dc <k_cpu_idle>
   1dfb0:	e7ec      	b.n	1df8c <idle+0x4>
   1dfb2:	bf00      	nop
   1dfb4:	20001cf0 	.word	0x20001cf0

0001dfb8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(&__bss_start, 0,
   1dfb8:	4802      	ldr	r0, [pc, #8]	; (1dfc4 <z_bss_zero+0xc>)
   1dfba:	4a03      	ldr	r2, [pc, #12]	; (1dfc8 <z_bss_zero+0x10>)
   1dfbc:	2100      	movs	r1, #0
   1dfbe:	1a12      	subs	r2, r2, r0
   1dfc0:	f003 bf8b 	b.w	21eda <memset>
   1dfc4:	20000000 	.word	0x20000000
   1dfc8:	20002488 	.word	0x20002488

0001dfcc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1dfcc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1dfce:	4806      	ldr	r0, [pc, #24]	; (1dfe8 <z_data_copy+0x1c>)
   1dfd0:	4a06      	ldr	r2, [pc, #24]	; (1dfec <z_data_copy+0x20>)
   1dfd2:	4907      	ldr	r1, [pc, #28]	; (1dff0 <z_data_copy+0x24>)
   1dfd4:	1a12      	subs	r2, r2, r0
   1dfd6:	f003 ff56 	bl	21e86 <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1dfda:	4a06      	ldr	r2, [pc, #24]	; (1dff4 <z_data_copy+0x28>)
   1dfdc:	4906      	ldr	r1, [pc, #24]	; (1dff8 <z_data_copy+0x2c>)
   1dfde:	4807      	ldr	r0, [pc, #28]	; (1dffc <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 ((u32_t) &_app_smem_end - (u32_t) &_app_smem_start));
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1dfe0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1dfe4:	f003 bf4f 	b.w	21e86 <memcpy>
   1dfe8:	20006b38 	.word	0x20006b38
   1dfec:	200079cc 	.word	0x200079cc
   1dff0:	0002cbf5 	.word	0x0002cbf5
   1dff4:	00000000 	.word	0x00000000
   1dff8:	0002cbf0 	.word	0x0002cbf0
   1dffc:	20000000 	.word	0x20000000

0001e000 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1e000:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e002:	2002      	movs	r0, #2
   1e004:	f7ff ff7e 	bl	1df04 <z_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   1e008:	4807      	ldr	r0, [pc, #28]	; (1e028 <bg_thread_main+0x28>)
   1e00a:	f001 fcb4 	bl	1f976 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1e00e:	2003      	movs	r0, #3
   1e010:	f7ff ff78 	bl	1df04 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1e014:	f000 fe4c 	bl	1ecb0 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1e018:	f7e4 febe 	bl	2d98 <main>

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   1e01c:	4a03      	ldr	r2, [pc, #12]	; (1e02c <bg_thread_main+0x2c>)
   1e01e:	7b13      	ldrb	r3, [r2, #12]
   1e020:	f023 0301 	bic.w	r3, r3, #1
   1e024:	7313      	strb	r3, [r2, #12]
}
   1e026:	bd08      	pop	{r3, pc}
   1e028:	0002cb90 	.word	0x0002cb90
   1e02c:	20001c84 	.word	0x20001c84

0001e030 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1e030:	b580      	push	{r7, lr}
   1e032:	b0a2      	sub	sp, #136	; 0x88
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
   1e034:	f7e5 fb70 	bl	3718 <log_core_init>
#if defined(CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT) && \
	defined(CONFIG_USERSPACE)
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1e038:	4b3c      	ldr	r3, [pc, #240]	; (1e12c <z_cstart+0xfc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1e03a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1e03e:	4b3c      	ldr	r3, [pc, #240]	; (1e130 <z_cstart+0x100>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   1e040:	4e3c      	ldr	r6, [pc, #240]	; (1e134 <z_cstart+0x104>)
   1e042:	695a      	ldr	r2, [r3, #20]
	_kernel.ready_q.cache = _main_thread;
   1e044:	4d3c      	ldr	r5, [pc, #240]	; (1e138 <z_cstart+0x108>)
   1e046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1e04a:	615a      	str	r2, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e04c:	2400      	movs	r4, #0
   1e04e:	22e0      	movs	r2, #224	; 0xe0
   1e050:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   1e054:	77dc      	strb	r4, [r3, #31]
   1e056:	761c      	strb	r4, [r3, #24]
   1e058:	765c      	strb	r4, [r3, #25]
   1e05a:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1e05c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1e05e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   1e062:	625a      	str	r2, [r3, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   1e064:	f7e7 f826 	bl	50b4 <_FaultInit>
	_CpuIdleInit();
   1e068:	f7e7 f8b2 	bl	51d0 <_CpuIdleInit>
	struct k_thread dummy_thread = {
   1e06c:	ab07      	add	r3, sp, #28
   1e06e:	4621      	mov	r1, r4
   1e070:	226c      	movs	r2, #108	; 0x6c
   1e072:	4618      	mov	r0, r3
   1e074:	f003 ff31 	bl	21eda <memset>
   1e078:	2701      	movs	r7, #1
	_current = &dummy_thread;
   1e07a:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1e07c:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   1e07e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1e082:	f7ff ff3f 	bl	1df04 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1e086:	4638      	mov	r0, r7
   1e088:	f7ff ff3c 	bl	1df04 <z_sys_device_do_config_level>
	z_sched_init();
   1e08c:	f000 fc6a 	bl	1e964 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
   1e090:	4b2a      	ldr	r3, [pc, #168]	; (1e13c <z_cstart+0x10c>)
	_kernel.ready_q.cache = _main_thread;
   1e092:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
   1e094:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e098:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1e09c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   1e0a0:	e9cd 4400 	strd	r4, r4, [sp]
   1e0a4:	4b26      	ldr	r3, [pc, #152]	; (1e140 <z_cstart+0x110>)
   1e0a6:	4927      	ldr	r1, [pc, #156]	; (1e144 <z_cstart+0x114>)
   1e0a8:	4628      	mov	r0, r5
   1e0aa:	f000 fdb7 	bl	1ec1c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e0ae:	7b6b      	ldrb	r3, [r5, #13]
   1e0b0:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e0b4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e0b8:	736a      	strb	r2, [r5, #13]
	return state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   1e0ba:	4634      	mov	r4, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e0bc:	d104      	bne.n	1e0c8 <z_cstart+0x98>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   1e0be:	69ab      	ldr	r3, [r5, #24]
   1e0c0:	b913      	cbnz	r3, 1e0c8 <z_cstart+0x98>
		z_add_thread_to_ready_q(thread);
   1e0c2:	4628      	mov	r0, r5
   1e0c4:	f000 fac2 	bl	1e64c <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1e0c8:	4b1f      	ldr	r3, [pc, #124]	; (1e148 <z_cstart+0x118>)
   1e0ca:	4e20      	ldr	r6, [pc, #128]	; (1e14c <z_cstart+0x11c>)
   1e0cc:	9305      	str	r3, [sp, #20]
   1e0ce:	2201      	movs	r2, #1
   1e0d0:	230f      	movs	r3, #15
   1e0d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1e0d6:	2300      	movs	r3, #0
   1e0d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1e0dc:	491c      	ldr	r1, [pc, #112]	; (1e150 <z_cstart+0x120>)
   1e0de:	9300      	str	r3, [sp, #0]
   1e0e0:	4630      	mov	r0, r6
   1e0e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1e0e6:	4b1b      	ldr	r3, [pc, #108]	; (1e154 <z_cstart+0x124>)
   1e0e8:	f000 fd98 	bl	1ec1c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e0ec:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
   1e0ee:	60e6      	str	r6, [r4, #12]
   1e0f0:	f023 0304 	bic.w	r3, r3, #4
   1e0f4:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1e0f6:	4b18      	ldr	r3, [pc, #96]	; (1e158 <z_cstart+0x128>)
	list->tail = (sys_dnode_t *)list;
   1e0f8:	e9c4 3306 	strd	r3, r3, [r4, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
   1e0fc:	f7e7 f960 	bl	53c0 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
   1e100:	480d      	ldr	r0, [pc, #52]	; (1e138 <z_cstart+0x108>)
	_current = main_thread;
   1e102:	60a5      	str	r5, [r4, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
   1e104:	f003 fddc 	bl	21cc0 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1e108:	4b0d      	ldr	r3, [pc, #52]	; (1e140 <z_cstart+0x110>)
   1e10a:	4a14      	ldr	r2, [pc, #80]	; (1e15c <z_cstart+0x12c>)
   1e10c:	4618      	mov	r0, r3
   1e10e:	f382 8809 	msr	PSP, r2
   1e112:	b663      	cpsie	if
   1e114:	f04f 0100 	mov.w	r1, #0
   1e118:	f381 8811 	msr	BASEPRI, r1
   1e11c:	f3bf 8f6f 	isb	sy
   1e120:	2100      	movs	r1, #0
   1e122:	2200      	movs	r2, #0
   1e124:	2300      	movs	r3, #0
   1e126:	f001 fa89 	bl	1f63c <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
   1e12a:	bf00      	nop
   1e12c:	20004658 	.word	0x20004658
   1e130:	e000ed00 	.word	0xe000ed00
   1e134:	20001cf0 	.word	0x20001cf0
   1e138:	20001c84 	.word	0x20001c84
   1e13c:	00027b59 	.word	0x00027b59
   1e140:	0001e001 	.word	0x0001e001
   1e144:	20003b18 	.word	0x20003b18
   1e148:	0002cbd5 	.word	0x0002cbd5
   1e14c:	20001c18 	.word	0x20001c18
   1e150:	20003d18 	.word	0x20003d18
   1e154:	0001df89 	.word	0x0001df89
   1e158:	20001d08 	.word	0x20001d08
   1e15c:	20003d18 	.word	0x20003d18

0001e160 <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   1e160:	4b0b      	ldr	r3, [pc, #44]	; (1e190 <init_mem_slab_module+0x30>)
   1e162:	480c      	ldr	r0, [pc, #48]	; (1e194 <init_mem_slab_module+0x34>)
{
   1e164:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   1e166:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
   1e168:	4283      	cmp	r3, r0
   1e16a:	d301      	bcc.n	1e170 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   1e16c:	2000      	movs	r0, #0
   1e16e:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   1e170:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e172:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1e174:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e176:	2100      	movs	r1, #0
   1e178:	42a9      	cmp	r1, r5
   1e17a:	d101      	bne.n	1e180 <init_mem_slab_module+0x20>
	     slab++) {
   1e17c:	331c      	adds	r3, #28
   1e17e:	e7f3      	b.n	1e168 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   1e180:	695e      	ldr	r6, [r3, #20]
   1e182:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   1e184:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   1e186:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e188:	3101      	adds	r1, #1
		p += slab->block_size;
   1e18a:	4432      	add	r2, r6
   1e18c:	e7f4      	b.n	1e178 <init_mem_slab_module+0x18>
   1e18e:	bf00      	nop
   1e190:	20007894 	.word	0x20007894
   1e194:	20007894 	.word	0x20007894

0001e198 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   1e198:	b510      	push	{r4, lr}
   1e19a:	4613      	mov	r3, r2
   1e19c:	460c      	mov	r4, r1
   1e19e:	f04f 0220 	mov.w	r2, #32
   1e1a2:	f3ef 8111 	mrs	r1, BASEPRI
   1e1a6:	f382 8811 	msr	BASEPRI, r2

	/* block size must be word aligned */
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
		 "block size not word aligned");

	if (slab->free_list != NULL) {
   1e1aa:	6942      	ldr	r2, [r0, #20]
   1e1ac:	b15a      	cbz	r2, 1e1c6 <k_mem_slab_alloc+0x2e>
		/* take a free block */
		*mem = slab->free_list;
   1e1ae:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1e1b0:	6813      	ldr	r3, [r2, #0]
   1e1b2:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1e1b4:	6983      	ldr	r3, [r0, #24]
   1e1b6:	3301      	adds	r3, #1
   1e1b8:	6183      	str	r3, [r0, #24]
		result = 0;
   1e1ba:	2000      	movs	r0, #0
	__asm__ volatile(
   1e1bc:	f381 8811 	msr	BASEPRI, r1
   1e1c0:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1e1c4:	e00d      	b.n	1e1e2 <k_mem_slab_alloc+0x4a>
	} else if (timeout == K_NO_WAIT) {
   1e1c6:	b91b      	cbnz	r3, 1e1d0 <k_mem_slab_alloc+0x38>
		*mem = NULL;
   1e1c8:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1e1ca:	f06f 000b 	mvn.w	r0, #11
   1e1ce:	e7f5      	b.n	1e1bc <k_mem_slab_alloc+0x24>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1e1d0:	4602      	mov	r2, r0
   1e1d2:	4804      	ldr	r0, [pc, #16]	; (1e1e4 <k_mem_slab_alloc+0x4c>)
   1e1d4:	f000 fb68 	bl	1e8a8 <z_pend_curr>
		if (result == 0) {
   1e1d8:	b918      	cbnz	r0, 1e1e2 <k_mem_slab_alloc+0x4a>
			*mem = _current->base.swap_data;
   1e1da:	4b03      	ldr	r3, [pc, #12]	; (1e1e8 <k_mem_slab_alloc+0x50>)
   1e1dc:	689b      	ldr	r3, [r3, #8]
   1e1de:	695b      	ldr	r3, [r3, #20]
   1e1e0:	6023      	str	r3, [r4, #0]
}
   1e1e2:	bd10      	pop	{r4, pc}
   1e1e4:	20002487 	.word	0x20002487
   1e1e8:	20001cf0 	.word	0x20001cf0

0001e1ec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1e1ec:	b570      	push	{r4, r5, r6, lr}
   1e1ee:	4604      	mov	r4, r0
   1e1f0:	460d      	mov	r5, r1
	__asm__ volatile(
   1e1f2:	f04f 0320 	mov.w	r3, #32
   1e1f6:	f3ef 8611 	mrs	r6, BASEPRI
   1e1fa:	f383 8811 	msr	BASEPRI, r3
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1e1fe:	f007 f846 	bl	2528e <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1e202:	b180      	cbz	r0, 1e226 <k_mem_slab_free+0x3a>
		z_set_thread_return_value_with_data(pending_thread, 0, *mem);
   1e204:	682a      	ldr	r2, [r5, #0]
	thread->base.swap_data = data;
   1e206:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e208:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1e20a:	2100      	movs	r1, #0
   1e20c:	06d2      	lsls	r2, r2, #27
   1e20e:	6681      	str	r1, [r0, #104]	; 0x68
   1e210:	d103      	bne.n	1e21a <k_mem_slab_free+0x2e>
	if (z_is_thread_ready(thread)) {
   1e212:	6983      	ldr	r3, [r0, #24]
   1e214:	b90b      	cbnz	r3, 1e21a <k_mem_slab_free+0x2e>
		z_add_thread_to_ready_q(thread);
   1e216:	f000 fa19 	bl	1e64c <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1e21a:	4631      	mov	r1, r6
   1e21c:	4808      	ldr	r0, [pc, #32]	; (1e240 <k_mem_slab_free+0x54>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1e21e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1e222:	f006 bfbe 	b.w	251a2 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1e226:	682b      	ldr	r3, [r5, #0]
   1e228:	6962      	ldr	r2, [r4, #20]
   1e22a:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1e22c:	682b      	ldr	r3, [r5, #0]
   1e22e:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1e230:	69a3      	ldr	r3, [r4, #24]
   1e232:	3b01      	subs	r3, #1
   1e234:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1e236:	f386 8811 	msr	BASEPRI, r6
   1e23a:	f3bf 8f6f 	isb	sy
}
   1e23e:	bd70      	pop	{r4, r5, r6, pc}
   1e240:	20002487 	.word	0x20002487

0001e244 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1e244:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1e246:	4c07      	ldr	r4, [pc, #28]	; (1e264 <init_static_pools+0x20>)
   1e248:	4d07      	ldr	r5, [pc, #28]	; (1e268 <init_static_pools+0x24>)
   1e24a:	42ac      	cmp	r4, r5
   1e24c:	d301      	bcc.n	1e252 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1e24e:	2000      	movs	r0, #0
   1e250:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1e252:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   1e256:	4620      	mov	r0, r4
   1e258:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1e25c:	f001 f81f 	bl	1f29e <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1e260:	341c      	adds	r4, #28
   1e262:	e7f2      	b.n	1e24a <init_static_pools+0x6>
   1e264:	20007894 	.word	0x20007894
   1e268:	20007894 	.word	0x20007894

0001e26c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   1e26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1e270:	1e1e      	subs	r6, r3, #0
{
   1e272:	4680      	mov	r8, r0
   1e274:	460c      	mov	r4, r1
   1e276:	4691      	mov	r9, r2
	if (timeout > 0) {
   1e278:	dd52      	ble.n	1e320 <k_mem_pool_alloc+0xb4>
		end = z_tick_get() + z_ms_to_ticks(timeout);
   1e27a:	f000 fedb 	bl	1f034 <z_tick_get>
   1e27e:	4605      	mov	r5, r0
	return (s32_t)ceiling_fraction(
   1e280:	4828      	ldr	r0, [pc, #160]	; (1e324 <k_mem_pool_alloc+0xb8>)
   1e282:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1e286:	2100      	movs	r1, #0
   1e288:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1e28c:	2300      	movs	r3, #0
   1e28e:	fbc7 0106 	smlal	r0, r1, r7, r6
   1e292:	f7e1 ff25 	bl	e0 <__aeabi_ldivmod>
   1e296:	1945      	adds	r5, r0, r5
	return pool - &_k_mem_pool_list_start[0];
   1e298:	4b23      	ldr	r3, [pc, #140]	; (1e328 <k_mem_pool_alloc+0xbc>)
   1e29a:	4f24      	ldr	r7, [pc, #144]	; (1e32c <k_mem_pool_alloc+0xc0>)
   1e29c:	eba8 0303 	sub.w	r3, r8, r3
   1e2a0:	109b      	asrs	r3, r3, #2
   1e2a2:	435f      	muls	r7, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   1e2a4:	b2ff      	uxtb	r7, r7
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   1e2a6:	f108 0a14 	add.w	sl, r8, #20
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1e2aa:	9400      	str	r4, [sp, #0]
   1e2ac:	ab03      	add	r3, sp, #12
   1e2ae:	aa02      	add	r2, sp, #8
   1e2b0:	4649      	mov	r1, r9
   1e2b2:	4640      	mov	r0, r8
   1e2b4:	f001 f83d 	bl	1f332 <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   1e2b8:	f110 0f0b 	cmn.w	r0, #11
   1e2bc:	d10b      	bne.n	1e2d6 <k_mem_pool_alloc+0x6a>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1e2be:	9400      	str	r4, [sp, #0]
   1e2c0:	ab03      	add	r3, sp, #12
   1e2c2:	aa02      	add	r2, sp, #8
   1e2c4:	4649      	mov	r1, r9
   1e2c6:	4640      	mov	r0, r8
   1e2c8:	f001 f833 	bl	1f332 <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   1e2cc:	f110 0f0b 	cmn.w	r0, #11
   1e2d0:	bf08      	it	eq
   1e2d2:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   1e2d6:	7963      	ldrb	r3, [r4, #5]
   1e2d8:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1e2da:	7127      	strb	r7, [r4, #4]
		block->id.level = level_num;
   1e2dc:	f362 0303 	bfi	r3, r2, #0, #4
   1e2e0:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   1e2e2:	6863      	ldr	r3, [r4, #4]
   1e2e4:	9a03      	ldr	r2, [sp, #12]
   1e2e6:	f362 331f 	bfi	r3, r2, #12, #20
   1e2ea:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1e2ec:	b1a8      	cbz	r0, 1e31a <k_mem_pool_alloc+0xae>
   1e2ee:	b1a6      	cbz	r6, 1e31a <k_mem_pool_alloc+0xae>
   1e2f0:	f110 0f0c 	cmn.w	r0, #12
   1e2f4:	d111      	bne.n	1e31a <k_mem_pool_alloc+0xae>
	__asm__ volatile(
   1e2f6:	f04f 0320 	mov.w	r3, #32
   1e2fa:	f3ef 8011 	mrs	r0, BASEPRI
   1e2fe:	f383 8811 	msr	BASEPRI, r3
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   1e302:	4632      	mov	r2, r6
   1e304:	4651      	mov	r1, sl
   1e306:	f000 faad 	bl	1e864 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1e30a:	1c73      	adds	r3, r6, #1
   1e30c:	d0cd      	beq.n	1e2aa <k_mem_pool_alloc+0x3e>
			timeout = end - z_tick_get();
   1e30e:	f000 fe91 	bl	1f034 <z_tick_get>

			if (timeout < 0) {
   1e312:	1a2e      	subs	r6, r5, r0
   1e314:	d5c9      	bpl.n	1e2aa <k_mem_pool_alloc+0x3e>
				break;
			}
		}
	}

	return -EAGAIN;
   1e316:	f06f 000a 	mvn.w	r0, #10
}
   1e31a:	b004      	add	sp, #16
   1e31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	s64_t end = 0;
   1e320:	2500      	movs	r5, #0
   1e322:	e7b9      	b.n	1e298 <k_mem_pool_alloc+0x2c>
   1e324:	0004ffff 	.word	0x0004ffff
   1e328:	20007894 	.word	0x20007894
   1e32c:	b6db6db7 	.word	0xb6db6db7

0001e330 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   1e330:	b570      	push	{r4, r5, r6, lr}
   1e332:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   1e334:	6802      	ldr	r2, [r0, #0]
   1e336:	7841      	ldrb	r1, [r0, #1]
   1e338:	4e10      	ldr	r6, [pc, #64]	; (1e37c <k_mem_pool_free_id+0x4c>)
   1e33a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1e33e:	00a4      	lsls	r4, r4, #2
   1e340:	0b12      	lsrs	r2, r2, #12
   1e342:	f001 010f 	and.w	r1, r1, #15
   1e346:	1930      	adds	r0, r6, r4
   1e348:	f001 f8c9 	bl	1f4de <z_sys_mem_pool_block_free>
   1e34c:	f04f 0320 	mov.w	r3, #32
   1e350:	f3ef 8511 	mrs	r5, BASEPRI
   1e354:	f383 8811 	msr	BASEPRI, r3
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   1e358:	f104 0014 	add.w	r0, r4, #20
   1e35c:	4430      	add	r0, r6
   1e35e:	f006 ffbf 	bl	252e0 <z_unpend_all>

	if (need_sched) {
   1e362:	b128      	cbz	r0, 1e370 <k_mem_pool_free_id+0x40>
		z_reschedule(&lock, key);
   1e364:	4629      	mov	r1, r5
   1e366:	4806      	ldr	r0, [pc, #24]	; (1e380 <k_mem_pool_free_id+0x50>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   1e368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1e36c:	f006 bf19 	b.w	251a2 <z_reschedule>
	__asm__ volatile(
   1e370:	f385 8811 	msr	BASEPRI, r5
   1e374:	f3bf 8f6f 	isb	sy
}
   1e378:	bd70      	pop	{r4, r5, r6, pc}
   1e37a:	bf00      	nop
   1e37c:	20007894 	.word	0x20007894
   1e380:	20002487 	.word	0x20002487

0001e384 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   1e384:	4b03      	ldr	r3, [pc, #12]	; (1e394 <z_thread_malloc+0x10>)
   1e386:	689b      	ldr	r3, [r3, #8]
{
   1e388:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   1e38a:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1e38c:	b108      	cbz	r0, 1e392 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1e38e:	f006 bdc2 	b.w	24f16 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1e392:	4770      	bx	lr
   1e394:	20001cf0 	.word	0x20001cf0

0001e398 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   1e398:	b570      	push	{r4, r5, r6, lr}
   1e39a:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1e39c:	4932      	ldr	r1, [pc, #200]	; (1e468 <z_impl_k_mutex_lock+0xd0>)
   1e39e:	688b      	ldr	r3, [r1, #8]
   1e3a0:	7bda      	ldrb	r2, [r3, #15]
   1e3a2:	3a01      	subs	r2, #1
   1e3a4:	4604      	mov	r4, r0
   1e3a6:	73da      	strb	r2, [r3, #15]
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1e3a8:	68c2      	ldr	r2, [r0, #12]
   1e3aa:	4608      	mov	r0, r1
   1e3ac:	b14a      	cbz	r2, 1e3c2 <z_impl_k_mutex_lock+0x2a>
   1e3ae:	68a3      	ldr	r3, [r4, #8]
   1e3b0:	6889      	ldr	r1, [r1, #8]
   1e3b2:	428b      	cmp	r3, r1
   1e3b4:	d012      	beq.n	1e3dc <z_impl_k_mutex_lock+0x44>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1e3b6:	b99d      	cbnz	r5, 1e3e0 <z_impl_k_mutex_lock+0x48>
		k_sched_unlock();
   1e3b8:	f000 f92e 	bl	1e618 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1e3bc:	f06f 050f 	mvn.w	r5, #15
   1e3c0:	e00a      	b.n	1e3d8 <z_impl_k_mutex_lock+0x40>
					_current->base.prio :
   1e3c2:	688b      	ldr	r3, [r1, #8]
   1e3c4:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1e3c8:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
   1e3ca:	3201      	adds	r2, #1
		mutex->owner = _current;
   1e3cc:	6883      	ldr	r3, [r0, #8]
		mutex->lock_count++;
   1e3ce:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   1e3d0:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
   1e3d2:	f000 f921 	bl	1e618 <k_sched_unlock>
		return 0;
   1e3d6:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1e3d8:	4628      	mov	r0, r5
   1e3da:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   1e3dc:	6923      	ldr	r3, [r4, #16]
   1e3de:	e7f3      	b.n	1e3c8 <z_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1e3e0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1e3e4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e3e8:	4299      	cmp	r1, r3
   1e3ea:	bfa8      	it	ge
   1e3ec:	4619      	movge	r1, r3
   1e3ee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	__asm__ volatile(
   1e3f2:	f04f 0320 	mov.w	r3, #32
   1e3f6:	f3ef 8611 	mrs	r6, BASEPRI
   1e3fa:	f383 8811 	msr	BASEPRI, r3
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1e3fe:	68a0      	ldr	r0, [r4, #8]
   1e400:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e404:	4299      	cmp	r1, r3
   1e406:	da01      	bge.n	1e40c <z_impl_k_mutex_lock+0x74>
		z_thread_priority_set(mutex->owner, new_prio);
   1e408:	f000 fa62 	bl	1e8d0 <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1e40c:	462b      	mov	r3, r5
   1e40e:	4622      	mov	r2, r4
   1e410:	4631      	mov	r1, r6
   1e412:	4816      	ldr	r0, [pc, #88]	; (1e46c <z_impl_k_mutex_lock+0xd4>)
   1e414:	f000 fa48 	bl	1e8a8 <z_pend_curr>
	if (got_mutex == 0) {
   1e418:	4605      	mov	r5, r0
   1e41a:	b910      	cbnz	r0, 1e422 <z_impl_k_mutex_lock+0x8a>
		k_sched_unlock();
   1e41c:	f000 f8fc 	bl	1e618 <k_sched_unlock>
		return 0;
   1e420:	e7da      	b.n	1e3d8 <z_impl_k_mutex_lock+0x40>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1e422:	6823      	ldr	r3, [r4, #0]
   1e424:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e426:	429c      	cmp	r4, r3
   1e428:	d007      	beq.n	1e43a <z_impl_k_mutex_lock+0xa2>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1e42a:	b133      	cbz	r3, 1e43a <z_impl_k_mutex_lock+0xa2>
   1e42c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e430:	4299      	cmp	r1, r3
   1e432:	bfa8      	it	ge
   1e434:	4619      	movge	r1, r3
   1e436:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1e43a:	f04f 0320 	mov.w	r3, #32
   1e43e:	f3ef 8511 	mrs	r5, BASEPRI
   1e442:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, new_prio);
   1e446:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1e448:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e44c:	4299      	cmp	r1, r3
   1e44e:	d001      	beq.n	1e454 <z_impl_k_mutex_lock+0xbc>
		z_thread_priority_set(mutex->owner, new_prio);
   1e450:	f000 fa3e 	bl	1e8d0 <z_thread_priority_set>
	__asm__ volatile(
   1e454:	f385 8811 	msr	BASEPRI, r5
   1e458:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
   1e45c:	f000 f8dc 	bl	1e618 <k_sched_unlock>
	return -EAGAIN;
   1e460:	f06f 050a 	mvn.w	r5, #10
   1e464:	e7b8      	b.n	1e3d8 <z_impl_k_mutex_lock+0x40>
   1e466:	bf00      	nop
   1e468:	20001cf0 	.word	0x20001cf0
   1e46c:	20002487 	.word	0x20002487

0001e470 <z_impl_k_mutex_unlock>:
   1e470:	4b1d      	ldr	r3, [pc, #116]	; (1e4e8 <z_impl_k_mutex_unlock+0x78>)
   1e472:	689a      	ldr	r2, [r3, #8]
   1e474:	7bd3      	ldrb	r3, [r2, #15]
   1e476:	3b01      	subs	r3, #1
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1e478:	b570      	push	{r4, r5, r6, lr}
   1e47a:	4604      	mov	r4, r0
   1e47c:	73d3      	strb	r3, [r2, #15]
	RECORD_STATE_CHANGE();


	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   1e47e:	68c3      	ldr	r3, [r0, #12]
   1e480:	2b01      	cmp	r3, #1
   1e482:	d005      	beq.n	1e490 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   1e484:	3b01      	subs	r3, #1
   1e486:	60c3      	str	r3, [r0, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
   1e488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   1e48c:	f000 b8c4 	b.w	1e618 <k_sched_unlock>
	__asm__ volatile(
   1e490:	f04f 0320 	mov.w	r3, #32
   1e494:	f3ef 8611 	mrs	r6, BASEPRI
   1e498:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1e49c:	6901      	ldr	r1, [r0, #16]
   1e49e:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1e4a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e4a4:	4299      	cmp	r1, r3
   1e4a6:	d001      	beq.n	1e4ac <z_impl_k_mutex_unlock+0x3c>
		z_thread_priority_set(mutex->owner, new_prio);
   1e4a8:	f000 fa12 	bl	1e8d0 <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1e4ac:	4620      	mov	r0, r4
   1e4ae:	f006 feee 	bl	2528e <z_unpend_first_thread>
   1e4b2:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   1e4b4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1e4b6:	b180      	cbz	r0, 1e4da <z_impl_k_mutex_unlock+0x6a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1e4b8:	7b43      	ldrb	r3, [r0, #13]
   1e4ba:	06db      	lsls	r3, r3, #27
   1e4bc:	d103      	bne.n	1e4c6 <z_impl_k_mutex_unlock+0x56>
	if (z_is_thread_ready(thread)) {
   1e4be:	6983      	ldr	r3, [r0, #24]
   1e4c0:	b90b      	cbnz	r3, 1e4c6 <z_impl_k_mutex_unlock+0x56>
		z_add_thread_to_ready_q(thread);
   1e4c2:	f000 f8c3 	bl	1e64c <z_add_thread_to_ready_q>
	__asm__ volatile(
   1e4c6:	f386 8811 	msr	BASEPRI, r6
   1e4ca:	f3bf 8f6f 	isb	sy
   1e4ce:	2300      	movs	r3, #0
   1e4d0:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   1e4d2:	f995 300e 	ldrsb.w	r3, [r5, #14]
   1e4d6:	6123      	str	r3, [r4, #16]
   1e4d8:	e7d6      	b.n	1e488 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0;
   1e4da:	60e0      	str	r0, [r4, #12]
   1e4dc:	f386 8811 	msr	BASEPRI, r6
   1e4e0:	f3bf 8f6f 	isb	sy
   1e4e4:	e7d0      	b.n	1e488 <z_impl_k_mutex_unlock+0x18>
   1e4e6:	bf00      	nop
   1e4e8:	20001cf0 	.word	0x20001cf0

0001e4ec <resched>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e4ec:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   1e4f0:	280d      	cmp	r0, #13
   1e4f2:	d809      	bhi.n	1e508 <resched+0x1c>
   1e4f4:	b128      	cbz	r0, 1e502 <resched+0x16>
   1e4f6:	4b05      	ldr	r3, [pc, #20]	; (1e50c <resched+0x20>)
   1e4f8:	6858      	ldr	r0, [r3, #4]
   1e4fa:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   1e4fe:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
   1e502:	f080 0001 	eor.w	r0, r0, #1
   1e506:	4770      	bx	lr
   1e508:	2001      	movs	r0, #1
   1e50a:	e7fa      	b.n	1e502 <resched+0x16>
   1e50c:	e000ed00 	.word	0xe000ed00

0001e510 <reset_time_slice>:
{
   1e510:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1e512:	f7e6 fbe3 	bl	4cdc <z_clock_elapsed>
   1e516:	4b05      	ldr	r3, [pc, #20]	; (1e52c <reset_time_slice+0x1c>)
   1e518:	4a05      	ldr	r2, [pc, #20]	; (1e530 <reset_time_slice+0x20>)
   1e51a:	681b      	ldr	r3, [r3, #0]
   1e51c:	4418      	add	r0, r3
   1e51e:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
   1e520:	2100      	movs	r1, #0
   1e522:	4618      	mov	r0, r3
}
   1e524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
   1e528:	f006 bfc9 	b.w	254be <z_set_timeout_expiry>
   1e52c:	20001d28 	.word	0x20001d28
   1e530:	20001cf0 	.word	0x20001cf0

0001e534 <k_sched_time_slice_set>:
{
   1e534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e536:	460d      	mov	r5, r1
	__asm__ volatile(
   1e538:	f04f 0320 	mov.w	r3, #32
   1e53c:	f3ef 8411 	mrs	r4, BASEPRI
   1e540:	f383 8811 	msr	BASEPRI, r3
   1e544:	4e0d      	ldr	r6, [pc, #52]	; (1e57c <k_sched_time_slice_set+0x48>)
		_current_cpu->slice_ticks = 0;
   1e546:	4b0e      	ldr	r3, [pc, #56]	; (1e580 <k_sched_time_slice_set+0x4c>)
   1e548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1e54c:	2700      	movs	r7, #0
   1e54e:	fbc1 6700 	smlal	r6, r7, r1, r0
   1e552:	2200      	movs	r2, #0
   1e554:	611a      	str	r2, [r3, #16]
   1e556:	4630      	mov	r0, r6
   1e558:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1e55c:	2300      	movs	r3, #0
   1e55e:	4639      	mov	r1, r7
   1e560:	f7e1 fdbe 	bl	e0 <__aeabi_ldivmod>
   1e564:	4b07      	ldr	r3, [pc, #28]	; (1e584 <k_sched_time_slice_set+0x50>)
   1e566:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1e568:	4b07      	ldr	r3, [pc, #28]	; (1e588 <k_sched_time_slice_set+0x54>)
   1e56a:	601d      	str	r5, [r3, #0]
		reset_time_slice();
   1e56c:	f7ff ffd0 	bl	1e510 <reset_time_slice>
	__asm__ volatile(
   1e570:	f384 8811 	msr	BASEPRI, r4
   1e574:	f3bf 8f6f 	isb	sy
}
   1e578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e57a:	bf00      	nop
   1e57c:	0004ffff 	.word	0x0004ffff
   1e580:	20001cf0 	.word	0x20001cf0
   1e584:	20001d28 	.word	0x20001d28
   1e588:	20001d24 	.word	0x20001d24

0001e58c <k_sched_lock>:
	__asm__ volatile(
   1e58c:	f04f 0320 	mov.w	r3, #32
   1e590:	f3ef 8111 	mrs	r1, BASEPRI
   1e594:	f383 8811 	msr	BASEPRI, r3
	--_current->base.sched_locked;
   1e598:	4b04      	ldr	r3, [pc, #16]	; (1e5ac <k_sched_lock+0x20>)
   1e59a:	689a      	ldr	r2, [r3, #8]
   1e59c:	7bd3      	ldrb	r3, [r2, #15]
   1e59e:	3b01      	subs	r3, #1
   1e5a0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1e5a2:	f381 8811 	msr	BASEPRI, r1
   1e5a6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1e5aa:	4770      	bx	lr
   1e5ac:	20001cf0 	.word	0x20001cf0

0001e5b0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1e5b0:	4b09      	ldr	r3, [pc, #36]	; (1e5d8 <z_priq_dumb_remove+0x28>)
   1e5b2:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1e5b6:	4282      	cmp	r2, r0
   1e5b8:	d105      	bne.n	1e5c6 <z_priq_dumb_remove+0x16>
   1e5ba:	689b      	ldr	r3, [r3, #8]
   1e5bc:	428b      	cmp	r3, r1
   1e5be:	d102      	bne.n	1e5c6 <z_priq_dumb_remove+0x16>
   1e5c0:	7b4b      	ldrb	r3, [r1, #13]
   1e5c2:	06db      	lsls	r3, r3, #27
   1e5c4:	d106      	bne.n	1e5d4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1e5c6:	e9d1 3200 	ldrd	r3, r2, [r1]
   1e5ca:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e5cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e5ce:	2300      	movs	r3, #0
	node->prev = NULL;
   1e5d0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1e5d4:	4770      	bx	lr
   1e5d6:	bf00      	nop
   1e5d8:	20001cf0 	.word	0x20001cf0

0001e5dc <update_cache>:
{
   1e5dc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1e5de:	4c0d      	ldr	r4, [pc, #52]	; (1e614 <update_cache+0x38>)
{
   1e5e0:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1e5e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1e5e6:	f006 fe1d 	bl	25224 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1e5ea:	4605      	mov	r5, r0
   1e5ec:	b900      	cbnz	r0, 1e5f0 <update_cache+0x14>
   1e5ee:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1e5f0:	68a3      	ldr	r3, [r4, #8]
   1e5f2:	b94a      	cbnz	r2, 1e608 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1e5f4:	7b5a      	ldrb	r2, [r3, #13]
   1e5f6:	06d2      	lsls	r2, r2, #27
   1e5f8:	d106      	bne.n	1e608 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1e5fa:	69aa      	ldr	r2, [r5, #24]
   1e5fc:	b922      	cbnz	r2, 1e608 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1e5fe:	89da      	ldrh	r2, [r3, #14]
   1e600:	2a7f      	cmp	r2, #127	; 0x7f
   1e602:	d901      	bls.n	1e608 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1e604:	6263      	str	r3, [r4, #36]	; 0x24
}
   1e606:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   1e608:	429d      	cmp	r5, r3
   1e60a:	d001      	beq.n	1e610 <update_cache+0x34>
			reset_time_slice();
   1e60c:	f7ff ff80 	bl	1e510 <reset_time_slice>
		_kernel.ready_q.cache = th;
   1e610:	6265      	str	r5, [r4, #36]	; 0x24
}
   1e612:	e7f8      	b.n	1e606 <update_cache+0x2a>
   1e614:	20001cf0 	.word	0x20001cf0

0001e618 <k_sched_unlock>:
{
   1e618:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e61a:	f04f 0320 	mov.w	r3, #32
   1e61e:	f3ef 8411 	mrs	r4, BASEPRI
   1e622:	f383 8811 	msr	BASEPRI, r3
		++_current->base.sched_locked;
   1e626:	4b08      	ldr	r3, [pc, #32]	; (1e648 <k_sched_unlock+0x30>)
   1e628:	689a      	ldr	r2, [r3, #8]
   1e62a:	7bd3      	ldrb	r3, [r2, #15]
   1e62c:	3301      	adds	r3, #1
   1e62e:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
   1e630:	2001      	movs	r0, #1
   1e632:	f7ff ffd3 	bl	1e5dc <update_cache>
	__asm__ volatile(
   1e636:	f384 8811 	msr	BASEPRI, r4
   1e63a:	f3bf 8f6f 	isb	sy
}
   1e63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1e642:	f006 bdcb 	b.w	251dc <z_reschedule_unlocked>
   1e646:	bf00      	nop
   1e648:	20001cf0 	.word	0x20001cf0

0001e64c <z_add_thread_to_ready_q>:
{
   1e64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1e64e:	f04f 0320 	mov.w	r3, #32
   1e652:	f3ef 8411 	mrs	r4, BASEPRI
   1e656:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1e65a:	4a15      	ldr	r2, [pc, #84]	; (1e6b0 <z_add_thread_to_ready_q+0x64>)
   1e65c:	4611      	mov	r1, r2
   1e65e:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e662:	428b      	cmp	r3, r1
   1e664:	d01d      	beq.n	1e6a2 <z_add_thread_to_ready_q+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e666:	b1e3      	cbz	r3, 1e6a2 <z_add_thread_to_ready_q+0x56>
   1e668:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1e66a:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1e66e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1e672:	42af      	cmp	r7, r5
   1e674:	dd10      	ble.n	1e698 <z_add_thread_to_ready_q+0x4c>
	node->prev = successor->prev;
   1e676:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e678:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1e67c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1e67e:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1e680:	7b43      	ldrb	r3, [r0, #13]
   1e682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e686:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   1e688:	2000      	movs	r0, #0
   1e68a:	f7ff ffa7 	bl	1e5dc <update_cache>
	__asm__ volatile(
   1e68e:	f384 8811 	msr	BASEPRI, r4
   1e692:	f3bf 8f6f 	isb	sy
}
   1e696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1e698:	42b3      	cmp	r3, r6
   1e69a:	d002      	beq.n	1e6a2 <z_add_thread_to_ready_q+0x56>
   1e69c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e69e:	2b00      	cmp	r3, #0
   1e6a0:	d1e5      	bne.n	1e66e <z_add_thread_to_ready_q+0x22>
	node->prev = list->tail;
   1e6a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1e6a4:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   1e6a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1e6a8:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
   1e6aa:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1e6ac:	62d0      	str	r0, [r2, #44]	; 0x2c
   1e6ae:	e7e7      	b.n	1e680 <z_add_thread_to_ready_q+0x34>
   1e6b0:	20001cf0 	.word	0x20001cf0

0001e6b4 <z_move_thread_to_end_of_prio_q>:
{
   1e6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e6b6:	4604      	mov	r4, r0
	__asm__ volatile(
   1e6b8:	f04f 0320 	mov.w	r3, #32
   1e6bc:	f3ef 8711 	mrs	r7, BASEPRI
   1e6c0:	f383 8811 	msr	BASEPRI, r3
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e6c4:	4d19      	ldr	r5, [pc, #100]	; (1e72c <z_move_thread_to_end_of_prio_q+0x78>)
   1e6c6:	f105 0628 	add.w	r6, r5, #40	; 0x28
   1e6ca:	4601      	mov	r1, r0
   1e6cc:	4630      	mov	r0, r6
   1e6ce:	f7ff ff6f 	bl	1e5b0 <z_priq_dumb_remove>
	return list->head == list;
   1e6d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e6d4:	42b3      	cmp	r3, r6
   1e6d6:	462a      	mov	r2, r5
   1e6d8:	d020      	beq.n	1e71c <z_move_thread_to_end_of_prio_q+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e6da:	b1fb      	cbz	r3, 1e71c <z_move_thread_to_end_of_prio_q+0x68>
   1e6dc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1e6de:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1e6e2:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1e6e6:	428d      	cmp	r5, r1
   1e6e8:	dd13      	ble.n	1e712 <z_move_thread_to_end_of_prio_q+0x5e>
	node->prev = successor->prev;
   1e6ea:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1e6ec:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   1e6f0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1e6f2:	605c      	str	r4, [r3, #4]
   1e6f4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   1e6f6:	6890      	ldr	r0, [r2, #8]
   1e6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e6fc:	7363      	strb	r3, [r4, #13]
   1e6fe:	1b03      	subs	r3, r0, r4
   1e700:	4258      	negs	r0, r3
   1e702:	4158      	adcs	r0, r3
   1e704:	f7ff ff6a 	bl	1e5dc <update_cache>
	__asm__ volatile(
   1e708:	f387 8811 	msr	BASEPRI, r7
   1e70c:	f3bf 8f6f 	isb	sy
}
   1e710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1e712:	4283      	cmp	r3, r0
   1e714:	d002      	beq.n	1e71c <z_move_thread_to_end_of_prio_q+0x68>
   1e716:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e718:	2b00      	cmp	r3, #0
   1e71a:	d1e2      	bne.n	1e6e2 <z_move_thread_to_end_of_prio_q+0x2e>
	node->prev = list->tail;
   1e71c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1e71e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1e720:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1e722:	6026      	str	r6, [r4, #0]
	list->tail->next = node;
   1e724:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e726:	62d4      	str	r4, [r2, #44]	; 0x2c
   1e728:	e7e4      	b.n	1e6f4 <z_move_thread_to_end_of_prio_q+0x40>
   1e72a:	bf00      	nop
   1e72c:	20001cf0 	.word	0x20001cf0

0001e730 <z_time_slice>:
	if (pending_current == _current) {
   1e730:	4914      	ldr	r1, [pc, #80]	; (1e784 <z_time_slice+0x54>)
   1e732:	4a15      	ldr	r2, [pc, #84]	; (1e788 <z_time_slice+0x58>)
   1e734:	688b      	ldr	r3, [r1, #8]
{
   1e736:	b510      	push	{r4, lr}
	if (pending_current == _current) {
   1e738:	6814      	ldr	r4, [r2, #0]
   1e73a:	42a3      	cmp	r3, r4
   1e73c:	d103      	bne.n	1e746 <z_time_slice+0x16>
}
   1e73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
   1e742:	f7ff bee5 	b.w	1e510 <reset_time_slice>
	pending_current = NULL;
   1e746:	2400      	movs	r4, #0
   1e748:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1e74a:	4a10      	ldr	r2, [pc, #64]	; (1e78c <z_time_slice+0x5c>)
   1e74c:	6812      	ldr	r2, [r2, #0]
   1e74e:	b1ba      	cbz	r2, 1e780 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   1e750:	89da      	ldrh	r2, [r3, #14]
   1e752:	2a7f      	cmp	r2, #127	; 0x7f
   1e754:	d814      	bhi.n	1e780 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   1e756:	4a0e      	ldr	r2, [pc, #56]	; (1e790 <z_time_slice+0x60>)
   1e758:	f993 400e 	ldrsb.w	r4, [r3, #14]
   1e75c:	6812      	ldr	r2, [r2, #0]
   1e75e:	4294      	cmp	r4, r2
   1e760:	db0e      	blt.n	1e780 <z_time_slice+0x50>
	return thread == _idle_thread;
   1e762:	4a0c      	ldr	r2, [pc, #48]	; (1e794 <z_time_slice+0x64>)
		&& !is_idle(t)
   1e764:	6812      	ldr	r2, [r2, #0]
   1e766:	4293      	cmp	r3, r2
   1e768:	d00a      	beq.n	1e780 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   1e76a:	699a      	ldr	r2, [r3, #24]
   1e76c:	b942      	cbnz	r2, 1e780 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
   1e76e:	690a      	ldr	r2, [r1, #16]
   1e770:	4282      	cmp	r2, r0
   1e772:	dc03      	bgt.n	1e77c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1e774:	4618      	mov	r0, r3
   1e776:	f7ff ff9d 	bl	1e6b4 <z_move_thread_to_end_of_prio_q>
   1e77a:	e7e0      	b.n	1e73e <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
   1e77c:	1a12      	subs	r2, r2, r0
   1e77e:	610a      	str	r2, [r1, #16]
}
   1e780:	bd10      	pop	{r4, pc}
   1e782:	bf00      	nop
   1e784:	20001cf0 	.word	0x20001cf0
   1e788:	20001d20 	.word	0x20001d20
   1e78c:	20001d28 	.word	0x20001d28
   1e790:	20001d24 	.word	0x20001d24
   1e794:	000263cc 	.word	0x000263cc

0001e798 <z_remove_thread_from_ready_q>:
{
   1e798:	b538      	push	{r3, r4, r5, lr}
   1e79a:	4604      	mov	r4, r0
	__asm__ volatile(
   1e79c:	f04f 0320 	mov.w	r3, #32
   1e7a0:	f3ef 8511 	mrs	r5, BASEPRI
   1e7a4:	f383 8811 	msr	BASEPRI, r3
		if (z_is_thread_queued(thread)) {
   1e7a8:	7b43      	ldrb	r3, [r0, #13]
   1e7aa:	065a      	lsls	r2, r3, #25
   1e7ac:	d507      	bpl.n	1e7be <z_remove_thread_from_ready_q+0x26>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e7ae:	4601      	mov	r1, r0
   1e7b0:	4809      	ldr	r0, [pc, #36]	; (1e7d8 <z_remove_thread_from_ready_q+0x40>)
   1e7b2:	f7ff fefd 	bl	1e5b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1e7b6:	7b63      	ldrb	r3, [r4, #13]
   1e7b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1e7bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1e7be:	4b07      	ldr	r3, [pc, #28]	; (1e7dc <z_remove_thread_from_ready_q+0x44>)
   1e7c0:	6898      	ldr	r0, [r3, #8]
   1e7c2:	1b03      	subs	r3, r0, r4
   1e7c4:	4258      	negs	r0, r3
   1e7c6:	4158      	adcs	r0, r3
   1e7c8:	f7ff ff08 	bl	1e5dc <update_cache>
	__asm__ volatile(
   1e7cc:	f385 8811 	msr	BASEPRI, r5
   1e7d0:	f3bf 8f6f 	isb	sy
}
   1e7d4:	bd38      	pop	{r3, r4, r5, pc}
   1e7d6:	bf00      	nop
   1e7d8:	20001d18 	.word	0x20001d18
   1e7dc:	20001cf0 	.word	0x20001cf0

0001e7e0 <pend>:
{
   1e7e0:	b570      	push	{r4, r5, r6, lr}
   1e7e2:	4604      	mov	r4, r0
   1e7e4:	460d      	mov	r5, r1
   1e7e6:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   1e7e8:	f7ff ffd6 	bl	1e798 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   1e7ec:	7b63      	ldrb	r3, [r4, #13]
   1e7ee:	f043 0302 	orr.w	r3, r3, #2
   1e7f2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1e7f4:	b17d      	cbz	r5, 1e816 <pend+0x36>
	return list->head == list;
   1e7f6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1e7f8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e7fa:	429d      	cmp	r5, r3
   1e7fc:	d026      	beq.n	1e84c <pend+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e7fe:	b32b      	cbz	r3, 1e84c <pend+0x6c>
	if (t1->base.prio < t2->base.prio) {
   1e800:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1e804:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1e808:	4291      	cmp	r1, r2
   1e80a:	dd19      	ble.n	1e840 <pend+0x60>
	node->prev = successor->prev;
   1e80c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e80e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1e812:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1e814:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   1e816:	1c73      	adds	r3, r6, #1
   1e818:	d01f      	beq.n	1e85a <pend+0x7a>
   1e81a:	4810      	ldr	r0, [pc, #64]	; (1e85c <pend+0x7c>)
   1e81c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1e820:	2100      	movs	r1, #0
   1e822:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1e826:	fbc5 0106 	smlal	r0, r1, r5, r6
   1e82a:	2300      	movs	r3, #0
   1e82c:	f7e1 fc58 	bl	e0 <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1e830:	490b      	ldr	r1, [pc, #44]	; (1e860 <pend+0x80>)
   1e832:	1c42      	adds	r2, r0, #1
   1e834:	f104 0018 	add.w	r0, r4, #24
}
   1e838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e83c:	f000 bb40 	b.w	1eec0 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1e840:	6869      	ldr	r1, [r5, #4]
   1e842:	428b      	cmp	r3, r1
   1e844:	d002      	beq.n	1e84c <pend+0x6c>
   1e846:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e848:	2b00      	cmp	r3, #0
   1e84a:	d1db      	bne.n	1e804 <pend+0x24>
	node->prev = list->tail;
   1e84c:	686b      	ldr	r3, [r5, #4]
   1e84e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1e850:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1e852:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1e854:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e856:	606c      	str	r4, [r5, #4]
   1e858:	e7dd      	b.n	1e816 <pend+0x36>
}
   1e85a:	bd70      	pop	{r4, r5, r6, pc}
   1e85c:	0004ffff 	.word	0x0004ffff
   1e860:	00025231 	.word	0x00025231

0001e864 <z_pend_curr_irqlock>:
{
   1e864:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
   1e866:	4d0e      	ldr	r5, [pc, #56]	; (1e8a0 <z_pend_curr_irqlock+0x3c>)
	pending_current = _current;
   1e868:	4c0e      	ldr	r4, [pc, #56]	; (1e8a4 <z_pend_curr_irqlock+0x40>)
{
   1e86a:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   1e86c:	68a8      	ldr	r0, [r5, #8]
   1e86e:	f7ff ffb7 	bl	1e7e0 <pend>
	pending_current = _current;
   1e872:	68ab      	ldr	r3, [r5, #8]
   1e874:	6023      	str	r3, [r4, #0]
   1e876:	4630      	mov	r0, r6
   1e878:	f7e6 fa7e 	bl	4d78 <__swap>
	__asm__ volatile(
   1e87c:	f04f 0220 	mov.w	r2, #32
   1e880:	f3ef 8311 	mrs	r3, BASEPRI
   1e884:	f382 8811 	msr	BASEPRI, r2
		if (pending_current == _current) {
   1e888:	6822      	ldr	r2, [r4, #0]
   1e88a:	68a9      	ldr	r1, [r5, #8]
   1e88c:	4291      	cmp	r1, r2
			pending_current = NULL;
   1e88e:	bf04      	itt	eq
   1e890:	2200      	moveq	r2, #0
   1e892:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   1e894:	f383 8811 	msr	BASEPRI, r3
   1e898:	f3bf 8f6f 	isb	sy
}
   1e89c:	bd70      	pop	{r4, r5, r6, pc}
   1e89e:	bf00      	nop
   1e8a0:	20001cf0 	.word	0x20001cf0
   1e8a4:	20001d20 	.word	0x20001d20

0001e8a8 <z_pend_curr>:
{
   1e8a8:	b510      	push	{r4, lr}
   1e8aa:	460c      	mov	r4, r1
   1e8ac:	4611      	mov	r1, r2
	pending_current = _current;
   1e8ae:	4a06      	ldr	r2, [pc, #24]	; (1e8c8 <z_pend_curr+0x20>)
   1e8b0:	6890      	ldr	r0, [r2, #8]
   1e8b2:	4a06      	ldr	r2, [pc, #24]	; (1e8cc <z_pend_curr+0x24>)
   1e8b4:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   1e8b6:	461a      	mov	r2, r3
   1e8b8:	f7ff ff92 	bl	1e7e0 <pend>
   1e8bc:	4620      	mov	r0, r4
}
   1e8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e8c2:	f7e6 ba59 	b.w	4d78 <__swap>
   1e8c6:	bf00      	nop
   1e8c8:	20001cf0 	.word	0x20001cf0
   1e8cc:	20001d20 	.word	0x20001d20

0001e8d0 <z_thread_priority_set>:
{
   1e8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e8d4:	4604      	mov	r4, r0
	__asm__ volatile(
   1e8d6:	f04f 0320 	mov.w	r3, #32
   1e8da:	f3ef 8911 	mrs	r9, BASEPRI
   1e8de:	f383 8811 	msr	BASEPRI, r3
		need_sched = z_is_thread_ready(thread);
   1e8e2:	f006 fc35 	bl	25150 <z_is_thread_ready>
		if (need_sched) {
   1e8e6:	b24e      	sxtb	r6, r1
   1e8e8:	4680      	mov	r8, r0
   1e8ea:	2800      	cmp	r0, #0
   1e8ec:	d034      	beq.n	1e958 <z_thread_priority_set+0x88>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e8ee:	4d1c      	ldr	r5, [pc, #112]	; (1e960 <z_thread_priority_set+0x90>)
   1e8f0:	f105 0728 	add.w	r7, r5, #40	; 0x28
   1e8f4:	4621      	mov	r1, r4
   1e8f6:	4638      	mov	r0, r7
   1e8f8:	f7ff fe5a 	bl	1e5b0 <z_priq_dumb_remove>
	return list->head == list;
   1e8fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
			thread->base.prio = prio;
   1e8fe:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e900:	42bb      	cmp	r3, r7
   1e902:	462a      	mov	r2, r5
   1e904:	d021      	beq.n	1e94a <z_thread_priority_set+0x7a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e906:	b303      	cbz	r3, 1e94a <z_thread_priority_set+0x7a>
   1e908:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1e90a:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1e90e:	42b0      	cmp	r0, r6
   1e910:	dd16      	ble.n	1e940 <z_thread_priority_set+0x70>
	node->prev = successor->prev;
   1e912:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e914:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1e918:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1e91a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1e91c:	2001      	movs	r0, #1
   1e91e:	f7ff fe5d 	bl	1e5dc <update_cache>
	__asm__ volatile(
   1e922:	f389 8811 	msr	BASEPRI, r9
   1e926:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
   1e92a:	f1b8 0f00 	cmp.w	r8, #0
   1e92e:	d015      	beq.n	1e95c <z_thread_priority_set+0x8c>
   1e930:	4b0b      	ldr	r3, [pc, #44]	; (1e960 <z_thread_priority_set+0x90>)
   1e932:	689b      	ldr	r3, [r3, #8]
   1e934:	7bdb      	ldrb	r3, [r3, #15]
   1e936:	b98b      	cbnz	r3, 1e95c <z_thread_priority_set+0x8c>
}
   1e938:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		z_reschedule_unlocked();
   1e93c:	f006 bc4e 	b.w	251dc <z_reschedule_unlocked>
	return (node == list->tail) ? NULL : node->next;
   1e940:	4299      	cmp	r1, r3
   1e942:	d002      	beq.n	1e94a <z_thread_priority_set+0x7a>
   1e944:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e946:	2b00      	cmp	r3, #0
   1e948:	d1df      	bne.n	1e90a <z_thread_priority_set+0x3a>
	node->prev = list->tail;
   1e94a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1e94c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1e94e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   1e950:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
   1e952:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e954:	62d4      	str	r4, [r2, #44]	; 0x2c
   1e956:	e7e1      	b.n	1e91c <z_thread_priority_set+0x4c>
			thread->base.prio = prio;
   1e958:	73a6      	strb	r6, [r4, #14]
   1e95a:	e7e2      	b.n	1e922 <z_thread_priority_set+0x52>
}
   1e95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e960:	20001cf0 	.word	0x20001cf0

0001e964 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1e964:	4b04      	ldr	r3, [pc, #16]	; (1e978 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1e966:	2100      	movs	r1, #0
   1e968:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1e96c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1e970:	4608      	mov	r0, r1
   1e972:	f7ff bddf 	b.w	1e534 <k_sched_time_slice_set>
   1e976:	bf00      	nop
   1e978:	20001cf0 	.word	0x20001cf0

0001e97c <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
   1e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!z_is_in_isr(), "");

	if (!is_idle(_current)) {
   1e97e:	4c20      	ldr	r4, [pc, #128]	; (1ea00 <z_impl_k_yield+0x84>)
   1e980:	4b20      	ldr	r3, [pc, #128]	; (1ea04 <z_impl_k_yield+0x88>)
   1e982:	68a2      	ldr	r2, [r4, #8]
   1e984:	681b      	ldr	r3, [r3, #0]
   1e986:	429a      	cmp	r2, r3
   1e988:	d023      	beq.n	1e9d2 <z_impl_k_yield+0x56>
	__asm__ volatile(
   1e98a:	f04f 0320 	mov.w	r3, #32
   1e98e:	f3ef 8611 	mrs	r6, BASEPRI
   1e992:	f383 8811 	msr	BASEPRI, r3
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1e996:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1e99a:	68a1      	ldr	r1, [r4, #8]
   1e99c:	4628      	mov	r0, r5
   1e99e:	f7ff fe07 	bl	1e5b0 <z_priq_dumb_remove>
	return list->head == list;
   1e9a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
   1e9a4:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e9a6:	42ab      	cmp	r3, r5
   1e9a8:	d022      	beq.n	1e9f0 <z_impl_k_yield+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e9aa:	b30b      	cbz	r3, 1e9f0 <z_impl_k_yield+0x74>
   1e9ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   1e9ae:	f992 000e 	ldrsb.w	r0, [r2, #14]
   1e9b2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1e9b6:	4287      	cmp	r7, r0
   1e9b8:	dd15      	ble.n	1e9e6 <z_impl_k_yield+0x6a>
	node->prev = successor->prev;
   1e9ba:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1e9bc:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1e9c0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1e9c2:	605a      	str	r2, [r3, #4]
					      _current);
			}
			update_cache(1);
   1e9c4:	2001      	movs	r0, #1
   1e9c6:	f7ff fe09 	bl	1e5dc <update_cache>
	__asm__ volatile(
   1e9ca:	f386 8811 	msr	BASEPRI, r6
   1e9ce:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e9d2:	f04f 0320 	mov.w	r3, #32
   1e9d6:	f3ef 8011 	mrs	r0, BASEPRI
   1e9da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	z_swap_unlocked();
}
   1e9de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e9e2:	f7e6 b9c9 	b.w	4d78 <__swap>
	return (node == list->tail) ? NULL : node->next;
   1e9e6:	4299      	cmp	r1, r3
   1e9e8:	d002      	beq.n	1e9f0 <z_impl_k_yield+0x74>
   1e9ea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e9ec:	2b00      	cmp	r3, #0
   1e9ee:	d1e0      	bne.n	1e9b2 <z_impl_k_yield+0x36>
	node->prev = list->tail;
   1e9f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e9f2:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
   1e9f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
   1e9f6:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
   1e9f8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1e9fa:	62e2      	str	r2, [r4, #44]	; 0x2c
   1e9fc:	e7e2      	b.n	1e9c4 <z_impl_k_yield+0x48>
   1e9fe:	bf00      	nop
   1ea00:	20001cf0 	.word	0x20001cf0
   1ea04:	000263cc 	.word	0x000263cc

0001ea08 <z_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t z_impl_k_sleep(s32_t duration)
{
   1ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   1ea0a:	4604      	mov	r4, r0
   1ea0c:	b918      	cbnz	r0, 1ea16 <z_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1ea0e:	f7ff ffb5 	bl	1e97c <z_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
   1ea12:	4620      	mov	r0, r4
   1ea14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ea16:	481a      	ldr	r0, [pc, #104]	; (1ea80 <z_impl_k_sleep+0x78>)
   1ea18:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1ea1c:	2100      	movs	r1, #0
   1ea1e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1ea22:	2300      	movs	r3, #0
   1ea24:	fbc5 0104 	smlal	r0, r1, r5, r4
   1ea28:	f7e1 fb5a 	bl	e0 <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + z_ms_to_ticks(duration);
   1ea2c:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   1ea2e:	f006 fd5e 	bl	254ee <z_tick_get_32>
   1ea32:	182c      	adds	r4, r5, r0
   1ea34:	f04f 0320 	mov.w	r3, #32
   1ea38:	f3ef 8711 	mrs	r7, BASEPRI
   1ea3c:	f383 8811 	msr	BASEPRI, r3
	pending_current = _current;
   1ea40:	4e10      	ldr	r6, [pc, #64]	; (1ea84 <z_impl_k_sleep+0x7c>)
   1ea42:	4b11      	ldr	r3, [pc, #68]	; (1ea88 <z_impl_k_sleep+0x80>)
   1ea44:	68b0      	ldr	r0, [r6, #8]
   1ea46:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   1ea48:	f7ff fea6 	bl	1e798 <z_remove_thread_from_ready_q>
   1ea4c:	68b0      	ldr	r0, [r6, #8]
   1ea4e:	490f      	ldr	r1, [pc, #60]	; (1ea8c <z_impl_k_sleep+0x84>)
   1ea50:	462a      	mov	r2, r5
   1ea52:	3018      	adds	r0, #24
   1ea54:	f000 fa34 	bl	1eec0 <z_add_timeout>
   1ea58:	4638      	mov	r0, r7
   1ea5a:	f7e6 f98d 	bl	4d78 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
   1ea5e:	f006 fd46 	bl	254ee <z_tick_get_32>
   1ea62:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
   1ea64:	2800      	cmp	r0, #0
   1ea66:	dd09      	ble.n	1ea7c <z_impl_k_sleep+0x74>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   1ea68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1ea6c:	2264      	movs	r2, #100	; 0x64
   1ea6e:	2300      	movs	r3, #0
   1ea70:	fb80 0101 	smull	r0, r1, r0, r1
   1ea74:	f7e1 fb84 	bl	180 <__aeabi_uldivmod>
   1ea78:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
   1ea7a:	e7ca      	b.n	1ea12 <z_impl_k_sleep+0xa>
	return 0;
   1ea7c:	2400      	movs	r4, #0
   1ea7e:	e7c8      	b.n	1ea12 <z_impl_k_sleep+0xa>
   1ea80:	0004ffff 	.word	0x0004ffff
   1ea84:	20001cf0 	.word	0x20001cf0
   1ea88:	20001d20 	.word	0x20001d20
   1ea8c:	00025231 	.word	0x00025231

0001ea90 <z_impl_k_wakeup>:
	return z_impl_k_sleep(duration);
}
#endif

void z_impl_k_wakeup(k_tid_t thread)
{
   1ea90:	b510      	push	{r4, lr}
	if (z_is_thread_pending(thread)) {
   1ea92:	7b43      	ldrb	r3, [r0, #13]
   1ea94:	079a      	lsls	r2, r3, #30
{
   1ea96:	4604      	mov	r4, r0
	if (z_is_thread_pending(thread)) {
   1ea98:	d418      	bmi.n	1eacc <z_impl_k_wakeup+0x3c>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ea9a:	3018      	adds	r0, #24
   1ea9c:	f006 fced 	bl	2547a <z_abort_timeout>
		return;
	}

	if (z_abort_thread_timeout(thread) < 0) {
   1eaa0:	2800      	cmp	r0, #0
   1eaa2:	db13      	blt.n	1eacc <z_impl_k_wakeup+0x3c>
	if (z_is_thread_ready(thread)) {
   1eaa4:	4620      	mov	r0, r4
   1eaa6:	f006 fb53 	bl	25150 <z_is_thread_ready>
   1eaaa:	b110      	cbz	r0, 1eab2 <z_impl_k_wakeup+0x22>
		z_add_thread_to_ready_q(thread);
   1eaac:	4620      	mov	r0, r4
   1eaae:	f7ff fdcd 	bl	1e64c <z_add_thread_to_ready_q>
   1eab2:	f3ef 8305 	mrs	r3, IPSR
   1eab6:	2b0d      	cmp	r3, #13
   1eab8:	d808      	bhi.n	1eacc <z_impl_k_wakeup+0x3c>
   1eaba:	b11b      	cbz	r3, 1eac4 <z_impl_k_wakeup+0x34>
   1eabc:	4b04      	ldr	r3, [pc, #16]	; (1ead0 <z_impl_k_wakeup+0x40>)
   1eabe:	685b      	ldr	r3, [r3, #4]
   1eac0:	051b      	lsls	r3, r3, #20
   1eac2:	d503      	bpl.n	1eacc <z_impl_k_wakeup+0x3c>

	if (IS_ENABLED(CONFIG_SMP) &&
	    !IS_ENABLED(CONFIG_SCHED_IPI_SUPPORTED)) {
		z_sched_ipi();
	}
}
   1eac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_reschedule_unlocked();
   1eac8:	f006 bb88 	b.w	251dc <z_reschedule_unlocked>
}
   1eacc:	bd10      	pop	{r4, pc}
   1eace:	bf00      	nop
   1ead0:	e000ed00 	.word	0xe000ed00

0001ead4 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   1ead4:	4b01      	ldr	r3, [pc, #4]	; (1eadc <z_impl_k_current_get+0x8>)
   1ead6:	6898      	ldr	r0, [r3, #8]
   1ead8:	4770      	bx	lr
   1eada:	bf00      	nop
   1eadc:	20001cf0 	.word	0x20001cf0

0001eae0 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1eae0:	b570      	push	{r4, r5, r6, lr}
   1eae2:	4604      	mov	r4, r0
   1eae4:	f04f 0320 	mov.w	r3, #32
   1eae8:	f3ef 8611 	mrs	r6, BASEPRI
   1eaec:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1eaf0:	f006 fbcd 	bl	2528e <z_unpend_first_thread>
	if (thread != NULL) {
   1eaf4:	4605      	mov	r5, r0
   1eaf6:	b170      	cbz	r0, 1eb16 <z_impl_k_sem_give+0x36>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1eaf8:	7b43      	ldrb	r3, [r0, #13]
   1eafa:	06db      	lsls	r3, r3, #27
   1eafc:	d103      	bne.n	1eb06 <z_impl_k_sem_give+0x26>
	if (z_is_thread_ready(thread)) {
   1eafe:	6983      	ldr	r3, [r0, #24]
   1eb00:	b90b      	cbnz	r3, 1eb06 <z_impl_k_sem_give+0x26>
		z_add_thread_to_ready_q(thread);
   1eb02:	f7ff fda3 	bl	1e64c <z_add_thread_to_ready_q>
   1eb06:	2300      	movs	r3, #0
   1eb08:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1eb0a:	4631      	mov	r1, r6
   1eb0c:	4808      	ldr	r0, [pc, #32]	; (1eb30 <z_impl_k_sem_give+0x50>)
}
   1eb0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1eb12:	f006 bb46 	b.w	251a2 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1eb16:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1eb1a:	429a      	cmp	r2, r3
   1eb1c:	bf18      	it	ne
   1eb1e:	3301      	addne	r3, #1
   1eb20:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1eb22:	2102      	movs	r1, #2
   1eb24:	f104 0010 	add.w	r0, r4, #16
   1eb28:	f006 fd83 	bl	25632 <z_handle_obj_poll_events>
   1eb2c:	e7ed      	b.n	1eb0a <z_impl_k_sem_give+0x2a>
   1eb2e:	bf00      	nop
   1eb30:	20002487 	.word	0x20002487

0001eb34 <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1eb34:	b410      	push	{r4}
   1eb36:	4602      	mov	r2, r0
   1eb38:	460b      	mov	r3, r1
   1eb3a:	f04f 0020 	mov.w	r0, #32
   1eb3e:	f3ef 8111 	mrs	r1, BASEPRI
   1eb42:	f380 8811 	msr	BASEPRI, r0
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1eb46:	6894      	ldr	r4, [r2, #8]
   1eb48:	b144      	cbz	r4, 1eb5c <z_impl_k_sem_take+0x28>
		sem->count--;
   1eb4a:	3c01      	subs	r4, #1
   1eb4c:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   1eb4e:	f381 8811 	msr	BASEPRI, r1
   1eb52:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   1eb56:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   1eb58:	bc10      	pop	{r4}
   1eb5a:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1eb5c:	b933      	cbnz	r3, 1eb6c <z_impl_k_sem_take+0x38>
   1eb5e:	f381 8811 	msr	BASEPRI, r1
   1eb62:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1eb66:	f06f 000f 	mvn.w	r0, #15
   1eb6a:	e7f5      	b.n	1eb58 <z_impl_k_sem_take+0x24>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1eb6c:	4801      	ldr	r0, [pc, #4]	; (1eb74 <z_impl_k_sem_take+0x40>)
}
   1eb6e:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1eb70:	f7ff be9a 	b.w	1e8a8 <z_pend_curr>
   1eb74:	20002487 	.word	0x20002487

0001eb78 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1eb78:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1eb7a:	4c08      	ldr	r4, [pc, #32]	; (1eb9c <k_sys_work_q_init+0x24>)
   1eb7c:	4908      	ldr	r1, [pc, #32]	; (1eba0 <k_sys_work_q_init+0x28>)
   1eb7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eb82:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1eb86:	4620      	mov	r0, r4
   1eb88:	f000 f8ee 	bl	1ed68 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   1eb8c:	f104 0010 	add.w	r0, r4, #16
   1eb90:	4904      	ldr	r1, [pc, #16]	; (1eba4 <k_sys_work_q_init+0x2c>)
   1eb92:	f006 fbd0 	bl	25336 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1eb96:	2000      	movs	r0, #0
   1eb98:	bd10      	pop	{r4, pc}
   1eb9a:	bf00      	nop
   1eb9c:	20001d2c 	.word	0x20001d2c
   1eba0:	20004658 	.word	0x20004658
   1eba4:	0002cbda 	.word	0x0002cbda

0001eba8 <k_is_in_isr>:
   1eba8:	f3ef 8005 	mrs	r0, IPSR
   1ebac:	280d      	cmp	r0, #13
   1ebae:	d807      	bhi.n	1ebc0 <k_is_in_isr+0x18>
   1ebb0:	b138      	cbz	r0, 1ebc2 <k_is_in_isr+0x1a>
   1ebb2:	4b04      	ldr	r3, [pc, #16]	; (1ebc4 <k_is_in_isr+0x1c>)
   1ebb4:	6858      	ldr	r0, [r3, #4]
   1ebb6:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   1ebba:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   1ebbe:	4770      	bx	lr
   1ebc0:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
   1ebc2:	4770      	bx	lr
   1ebc4:	e000ed00 	.word	0xe000ed00

0001ebc8 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
   1ebc8:	4b02      	ldr	r3, [pc, #8]	; (1ebd4 <z_is_thread_essential+0xc>)
   1ebca:	689b      	ldr	r3, [r3, #8]
   1ebcc:	7b18      	ldrb	r0, [r3, #12]
}
   1ebce:	f000 0001 	and.w	r0, r0, #1
   1ebd2:	4770      	bx	lr
   1ebd4:	20001cf0 	.word	0x20001cf0

0001ebd8 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   1ebd8:	b510      	push	{r4, lr}
   1ebda:	4602      	mov	r2, r0
	__asm__ volatile(
   1ebdc:	f04f 0320 	mov.w	r3, #32
   1ebe0:	f3ef 8411 	mrs	r4, BASEPRI
   1ebe4:	f383 8811 	msr	BASEPRI, r3
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   1ebe8:	7b43      	ldrb	r3, [r0, #13]
   1ebea:	0759      	lsls	r1, r3, #29
   1ebec:	d404      	bmi.n	1ebf8 <z_impl_k_thread_start+0x20>
	__asm__ volatile(
   1ebee:	f384 8811 	msr	BASEPRI, r4
   1ebf2:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   1ebf6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ebf8:	f023 0304 	bic.w	r3, r3, #4
   1ebfc:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   1ebfe:	f006 fb8e 	bl	2531e <z_is_thread_ready>
   1ec02:	b110      	cbz	r0, 1ec0a <z_impl_k_thread_start+0x32>
		z_add_thread_to_ready_q(thread);
   1ec04:	4610      	mov	r0, r2
   1ec06:	f7ff fd21 	bl	1e64c <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   1ec0a:	4621      	mov	r1, r4
   1ec0c:	4802      	ldr	r0, [pc, #8]	; (1ec18 <z_impl_k_thread_start+0x40>)
}
   1ec0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   1ec12:	f006 bac6 	b.w	251a2 <z_reschedule>
   1ec16:	bf00      	nop
   1ec18:	20002487 	.word	0x20002487

0001ec1c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1ec1c:	b530      	push	{r4, r5, lr}
   1ec1e:	b087      	sub	sp, #28
   1ec20:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ec22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1ec24:	9504      	str	r5, [sp, #16]
   1ec26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1ec28:	9503      	str	r5, [sp, #12]
   1ec2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1ec2c:	9502      	str	r5, [sp, #8]
   1ec2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1ec30:	9501      	str	r5, [sp, #4]
   1ec32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1ec34:	9500      	str	r5, [sp, #0]
   1ec36:	f7e6 fa9d 	bl	5174 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1ec3a:	4b03      	ldr	r3, [pc, #12]	; (1ec48 <z_setup_new_thread+0x2c>)
   1ec3c:	689b      	ldr	r3, [r3, #8]
   1ec3e:	b103      	cbz	r3, 1ec42 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1ec40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1ec42:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   1ec44:	b007      	add	sp, #28
   1ec46:	bd30      	pop	{r4, r5, pc}
   1ec48:	20001cf0 	.word	0x20001cf0

0001ec4c <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   1ec4c:	b570      	push	{r4, r5, r6, lr}
   1ec4e:	b086      	sub	sp, #24
	__ASSERT(!z_is_in_isr(), "Threads may not be created in ISRs");

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ec50:	2600      	movs	r6, #0
   1ec52:	9605      	str	r6, [sp, #20]
   1ec54:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1ec56:	9604      	str	r6, [sp, #16]
   1ec58:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1ec5a:	9603      	str	r6, [sp, #12]
   1ec5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1ec5e:	9602      	str	r6, [sp, #8]
   1ec60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   1ec62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ec64:	9601      	str	r6, [sp, #4]
   1ec66:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1ec68:	9600      	str	r6, [sp, #0]
{
   1ec6a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ec6c:	f7ff ffd6 	bl	1ec1c <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   1ec70:	1c6b      	adds	r3, r5, #1
   1ec72:	d003      	beq.n	1ec7c <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   1ec74:	b92d      	cbnz	r5, 1ec82 <z_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   1ec76:	4620      	mov	r0, r4
   1ec78:	f7ff ffae 	bl	1ebd8 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   1ec7c:	4620      	mov	r0, r4
   1ec7e:	b006      	add	sp, #24
   1ec80:	bd70      	pop	{r4, r5, r6, pc}
	return (s32_t)ceiling_fraction(
   1ec82:	4809      	ldr	r0, [pc, #36]	; (1eca8 <z_impl_k_thread_create+0x5c>)
   1ec84:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ec88:	2100      	movs	r1, #0
   1ec8a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1ec8e:	2300      	movs	r3, #0
   1ec90:	fbc6 0105 	smlal	r0, r1, r6, r5
   1ec94:	f7e1 fa24 	bl	e0 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1ec98:	4904      	ldr	r1, [pc, #16]	; (1ecac <z_impl_k_thread_create+0x60>)
   1ec9a:	1c42      	adds	r2, r0, #1
   1ec9c:	f104 0018 	add.w	r0, r4, #24
   1eca0:	f000 f90e 	bl	1eec0 <z_add_timeout>
   1eca4:	e7ea      	b.n	1ec7c <z_impl_k_thread_create+0x30>
   1eca6:	bf00      	nop
   1eca8:	0004ffff 	.word	0x0004ffff
   1ecac:	00025231 	.word	0x00025231

0001ecb0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1ecb4:	4e28      	ldr	r6, [pc, #160]	; (1ed58 <z_init_static_threads+0xa8>)
   1ecb6:	4d29      	ldr	r5, [pc, #164]	; (1ed5c <z_init_static_threads+0xac>)
{
   1ecb8:	b087      	sub	sp, #28
   1ecba:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1ecbc:	42b5      	cmp	r5, r6
   1ecbe:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1ecc2:	d30f      	bcc.n	1ece4 <z_init_static_threads+0x34>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1ecc4:	f7ff fc62 	bl	1e58c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ecc8:	4c24      	ldr	r4, [pc, #144]	; (1ed5c <z_init_static_threads+0xac>)
   1ecca:	4e25      	ldr	r6, [pc, #148]	; (1ed60 <z_init_static_threads+0xb0>)
   1eccc:	f8df a094 	ldr.w	sl, [pc, #148]	; 1ed64 <z_init_static_threads+0xb4>
   1ecd0:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1ecd4:	2700      	movs	r7, #0
   1ecd6:	4544      	cmp	r4, r8
   1ecd8:	d321      	bcc.n	1ed1e <z_init_static_threads+0x6e>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   1ecda:	b007      	add	sp, #28
   1ecdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1ece0:	f7ff bc9a 	b.w	1e618 <k_sched_unlock>
		z_setup_new_thread(
   1ece4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ece8:	9305      	str	r3, [sp, #20]
   1ecea:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ecee:	9304      	str	r3, [sp, #16]
   1ecf0:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ecf4:	9303      	str	r3, [sp, #12]
   1ecf6:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1ecfa:	9302      	str	r3, [sp, #8]
   1ecfc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1ed00:	9301      	str	r3, [sp, #4]
   1ed02:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1ed06:	9300      	str	r3, [sp, #0]
   1ed08:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1ed0c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1ed10:	f7ff ff84 	bl	1ec1c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1ed14:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1ed18:	64dd      	str	r5, [r3, #76]	; 0x4c
   1ed1a:	4625      	mov	r5, r4
   1ed1c:	e7ce      	b.n	1ecbc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1ed1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ed20:	1c4b      	adds	r3, r1, #1
   1ed22:	d004      	beq.n	1ed2e <z_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
   1ed24:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   1ed26:	b921      	cbnz	r1, 1ed32 <z_init_static_threads+0x82>
   1ed28:	4628      	mov	r0, r5
   1ed2a:	f7ff ff55 	bl	1ebd8 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ed2e:	3430      	adds	r4, #48	; 0x30
   1ed30:	e7d1      	b.n	1ecd6 <z_init_static_threads+0x26>
   1ed32:	46b3      	mov	fp, r6
   1ed34:	46bc      	mov	ip, r7
   1ed36:	fbc9 bc01 	smlal	fp, ip, r9, r1
   1ed3a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1ed3e:	2300      	movs	r3, #0
   1ed40:	4658      	mov	r0, fp
   1ed42:	4661      	mov	r1, ip
   1ed44:	f7e1 f9cc 	bl	e0 <__aeabi_ldivmod>
   1ed48:	4651      	mov	r1, sl
   1ed4a:	1c42      	adds	r2, r0, #1
   1ed4c:	f105 0018 	add.w	r0, r5, #24
   1ed50:	f000 f8b6 	bl	1eec0 <z_add_timeout>
   1ed54:	e7eb      	b.n	1ed2e <z_init_static_threads+0x7e>
   1ed56:	bf00      	nop
   1ed58:	20007894 	.word	0x20007894
   1ed5c:	20007894 	.word	0x20007894
   1ed60:	0004ffff 	.word	0x0004ffff
   1ed64:	00025231 	.word	0x00025231

0001ed68 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed6c:	4605      	mov	r5, r0
   1ed6e:	b086      	sub	sp, #24
   1ed70:	4698      	mov	r8, r3
   1ed72:	460e      	mov	r6, r1
   1ed74:	4617      	mov	r7, r2
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1ed76:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   1ed7a:	f006 f946 	bl	2500a <z_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1ed7e:	2000      	movs	r0, #0
   1ed80:	e9cd 0004 	strd	r0, r0, [sp, #16]
   1ed84:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1ed88:	e9cd 5000 	strd	r5, r0, [sp]
   1ed8c:	4631      	mov	r1, r6
   1ed8e:	4b06      	ldr	r3, [pc, #24]	; (1eda8 <k_work_q_start+0x40>)
   1ed90:	463a      	mov	r2, r7
   1ed92:	4620      	mov	r0, r4
   1ed94:	f7ff ff5a 	bl	1ec4c <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   1ed98:	4904      	ldr	r1, [pc, #16]	; (1edac <k_work_q_start+0x44>)
   1ed9a:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1ed9c:	b006      	add	sp, #24
   1ed9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1eda2:	f006 bac8 	b.w	25336 <z_impl_k_thread_name_set>
   1eda6:	bf00      	nop
   1eda8:	0001f651 	.word	0x0001f651
   1edac:	0002cbe3 	.word	0x0002cbe3

0001edb0 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   1edb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1edb4:	4606      	mov	r6, r0
   1edb6:	460d      	mov	r5, r1
   1edb8:	4617      	mov	r7, r2
	__asm__ volatile(
   1edba:	f04f 0320 	mov.w	r3, #32
   1edbe:	f3ef 8811 	mrs	r8, BASEPRI
   1edc2:	f383 8811 	msr	BASEPRI, r3
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
   1edc6:	69cc      	ldr	r4, [r1, #28]
   1edc8:	b15c      	cbz	r4, 1ede2 <k_delayed_work_submit_to_queue+0x32>
   1edca:	4284      	cmp	r4, r0
   1edcc:	d12b      	bne.n	1ee26 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1edce:	4628      	mov	r0, r5
   1edd0:	f006 faf6 	bl	253c0 <work_cancel>
		if (err < 0) {
   1edd4:	1e04      	subs	r4, r0, #0
   1edd6:	da06      	bge.n	1ede6 <k_delayed_work_submit_to_queue+0x36>
	__asm__ volatile(
   1edd8:	f388 8811 	msr	BASEPRI, r8
   1eddc:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   1ede0:	e00c      	b.n	1edfc <k_delayed_work_submit_to_queue+0x4c>
	if (work->work_q == work_q) {
   1ede2:	2800      	cmp	r0, #0
   1ede4:	d0f3      	beq.n	1edce <k_delayed_work_submit_to_queue+0x1e>
	work->work_q = work_q;
   1ede6:	61ee      	str	r6, [r5, #28]
	if (!delay) {
   1ede8:	b95f      	cbnz	r7, 1ee02 <k_delayed_work_submit_to_queue+0x52>
   1edea:	f388 8811 	msr	BASEPRI, r8
   1edee:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1edf2:	4629      	mov	r1, r5
   1edf4:	4630      	mov	r0, r6
   1edf6:	f006 fac6 	bl	25386 <k_work_submit_to_queue>
		return 0;
   1edfa:	463c      	mov	r4, r7
}
   1edfc:	4620      	mov	r0, r4
   1edfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee02:	480a      	ldr	r0, [pc, #40]	; (1ee2c <k_delayed_work_submit_to_queue+0x7c>)
   1ee04:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ee08:	2100      	movs	r1, #0
   1ee0a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1ee0e:	2300      	movs	r3, #0
   1ee10:	fbc6 0107 	smlal	r0, r1, r6, r7
   1ee14:	f7e1 f964 	bl	e0 <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   1ee18:	4905      	ldr	r1, [pc, #20]	; (1ee30 <k_delayed_work_submit_to_queue+0x80>)
   1ee1a:	1c42      	adds	r2, r0, #1
   1ee1c:	f105 000c 	add.w	r0, r5, #12
   1ee20:	f000 f84e 	bl	1eec0 <z_add_timeout>
   1ee24:	e7d8      	b.n	1edd8 <k_delayed_work_submit_to_queue+0x28>
		err = -EADDRINUSE;
   1ee26:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1ee2a:	e7d5      	b.n	1edd8 <k_delayed_work_submit_to_queue+0x28>
   1ee2c:	0004ffff 	.word	0x0004ffff
   1ee30:	000253b7 	.word	0x000253b7

0001ee34 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1ee34:	4b03      	ldr	r3, [pc, #12]	; (1ee44 <elapsed+0x10>)
   1ee36:	681b      	ldr	r3, [r3, #0]
   1ee38:	b90b      	cbnz	r3, 1ee3e <elapsed+0xa>
   1ee3a:	f7e5 bf4f 	b.w	4cdc <z_clock_elapsed>
}
   1ee3e:	2000      	movs	r0, #0
   1ee40:	4770      	bx	lr
   1ee42:	bf00      	nop
   1ee44:	20001da8 	.word	0x20001da8

0001ee48 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ee48:	6803      	ldr	r3, [r0, #0]
   1ee4a:	b140      	cbz	r0, 1ee5e <remove_timeout+0x16>
   1ee4c:	4a07      	ldr	r2, [pc, #28]	; (1ee6c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1ee4e:	6852      	ldr	r2, [r2, #4]
   1ee50:	4290      	cmp	r0, r2
   1ee52:	d004      	beq.n	1ee5e <remove_timeout+0x16>
	if (next(t) != NULL) {
   1ee54:	b11b      	cbz	r3, 1ee5e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1ee56:	689a      	ldr	r2, [r3, #8]
   1ee58:	6881      	ldr	r1, [r0, #8]
   1ee5a:	440a      	add	r2, r1
   1ee5c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1ee5e:	6842      	ldr	r2, [r0, #4]
   1ee60:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ee62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ee64:	2300      	movs	r3, #0
	node->prev = NULL;
   1ee66:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ee6a:	4770      	bx	lr
   1ee6c:	200076f4 	.word	0x200076f4

0001ee70 <next_timeout>:

static s32_t next_timeout(void)
{
   1ee70:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   1ee72:	4b10      	ldr	r3, [pc, #64]	; (1eeb4 <next_timeout+0x44>)
   1ee74:	781b      	ldrb	r3, [r3, #0]
   1ee76:	2b00      	cmp	r3, #0
	return list->head == list;
   1ee78:	4b0f      	ldr	r3, [pc, #60]	; (1eeb8 <next_timeout+0x48>)
   1ee7a:	681c      	ldr	r4, [r3, #0]
   1ee7c:	bf14      	ite	ne
   1ee7e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1ee82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ee86:	429c      	cmp	r4, r3
   1ee88:	d00a      	beq.n	1eea0 <next_timeout+0x30>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   1ee8a:	b14c      	cbz	r4, 1eea0 <next_timeout+0x30>
   1ee8c:	68a5      	ldr	r5, [r4, #8]
   1ee8e:	f7ff ffd1 	bl	1ee34 <elapsed>
   1ee92:	1a28      	subs	r0, r5, r0
   1ee94:	2800      	cmp	r0, #0
   1ee96:	db0a      	blt.n	1eeae <next_timeout+0x3e>
   1ee98:	68a4      	ldr	r4, [r4, #8]
   1ee9a:	f7ff ffcb 	bl	1ee34 <elapsed>
   1ee9e:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1eea0:	4b06      	ldr	r3, [pc, #24]	; (1eebc <next_timeout+0x4c>)
   1eea2:	691b      	ldr	r3, [r3, #16]
   1eea4:	b113      	cbz	r3, 1eeac <next_timeout+0x3c>
   1eea6:	4298      	cmp	r0, r3
   1eea8:	bfa8      	it	ge
   1eeaa:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1eeac:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   1eeae:	2000      	movs	r0, #0
   1eeb0:	e7f6      	b.n	1eea0 <next_timeout+0x30>
   1eeb2:	bf00      	nop
   1eeb4:	20002487 	.word	0x20002487
   1eeb8:	200076f4 	.word	0x200076f4
   1eebc:	20001cf0 	.word	0x20001cf0

0001eec0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   1eec0:	b570      	push	{r4, r5, r6, lr}
   1eec2:	4604      	mov	r4, r0
   1eec4:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1eec6:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   1eec8:	f04f 0320 	mov.w	r3, #32
   1eecc:	f3ef 8511 	mrs	r5, BASEPRI
   1eed0:	f383 8811 	msr	BASEPRI, r3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1eed4:	f7ff ffae 	bl	1ee34 <elapsed>
	return list->head == list;
   1eed8:	4b18      	ldr	r3, [pc, #96]	; (1ef3c <z_add_timeout+0x7c>)
   1eeda:	681a      	ldr	r2, [r3, #0]
   1eedc:	2e01      	cmp	r6, #1
   1eede:	bfac      	ite	ge
   1eee0:	1980      	addge	r0, r0, r6
   1eee2:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1eee4:	429a      	cmp	r2, r3
   1eee6:	60a0      	str	r0, [r4, #8]
   1eee8:	d001      	beq.n	1eeee <z_add_timeout+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1eeea:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1eeec:	b932      	cbnz	r2, 1eefc <z_add_timeout+0x3c>
	node->prev = list->tail;
   1eeee:	685a      	ldr	r2, [r3, #4]
   1eef0:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1eef2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1eef4:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
   1eef6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1eef8:	605c      	str	r4, [r3, #4]
   1eefa:	e00a      	b.n	1ef12 <z_add_timeout+0x52>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1eefc:	6890      	ldr	r0, [r2, #8]
   1eefe:	68a1      	ldr	r1, [r4, #8]
   1ef00:	4288      	cmp	r0, r1
   1ef02:	dd15      	ble.n	1ef30 <z_add_timeout+0x70>
				t->dticks -= to->dticks;
   1ef04:	1a41      	subs	r1, r0, r1
   1ef06:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1ef08:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1ef0a:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1ef0e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1ef10:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1ef12:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef14:	429a      	cmp	r2, r3
   1ef16:	d006      	beq.n	1ef26 <z_add_timeout+0x66>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1ef18:	4294      	cmp	r4, r2
   1ef1a:	d104      	bne.n	1ef26 <z_add_timeout+0x66>
			z_clock_set_timeout(next_timeout(), false);
   1ef1c:	f7ff ffa8 	bl	1ee70 <next_timeout>
   1ef20:	2100      	movs	r1, #0
   1ef22:	f7e5 fea1 	bl	4c68 <z_clock_set_timeout>
	__asm__ volatile(
   1ef26:	f385 8811 	msr	BASEPRI, r5
   1ef2a:	f3bf 8f6f 	isb	sy
		}
	}
}
   1ef2e:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1ef30:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1ef32:	42b2      	cmp	r2, r6
   1ef34:	60a1      	str	r1, [r4, #8]
   1ef36:	d0da      	beq.n	1eeee <z_add_timeout+0x2e>
   1ef38:	6812      	ldr	r2, [r2, #0]
   1ef3a:	e7d7      	b.n	1eeec <z_add_timeout+0x2c>
   1ef3c:	200076f4 	.word	0x200076f4

0001ef40 <z_timeout_remaining>:

	return ret;
}

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   1ef40:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1ef42:	6804      	ldr	r4, [r0, #0]
   1ef44:	b304      	cbz	r4, 1ef88 <z_timeout_remaining+0x48>
	__asm__ volatile(
   1ef46:	f04f 0320 	mov.w	r3, #32
   1ef4a:	f3ef 8111 	mrs	r1, BASEPRI
   1ef4e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1ef52:	4a0e      	ldr	r2, [pc, #56]	; (1ef8c <z_timeout_remaining+0x4c>)
   1ef54:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef56:	4293      	cmp	r3, r2
   1ef58:	d014      	beq.n	1ef84 <z_timeout_remaining+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ef5a:	6852      	ldr	r2, [r2, #4]
   1ef5c:	2400      	movs	r4, #0
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1ef5e:	b93b      	cbnz	r3, 1ef70 <z_timeout_remaining+0x30>
	__asm__ volatile(
   1ef60:	f381 8811 	msr	BASEPRI, r1
   1ef64:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
   1ef68:	f7ff ff64 	bl	1ee34 <elapsed>
   1ef6c:	1a20      	subs	r0, r4, r0
}
   1ef6e:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
   1ef70:	689d      	ldr	r5, [r3, #8]
			if (timeout == t) {
   1ef72:	4283      	cmp	r3, r0
			ticks += t->dticks;
   1ef74:	442c      	add	r4, r5
			if (timeout == t) {
   1ef76:	d0f3      	beq.n	1ef60 <z_timeout_remaining+0x20>
   1ef78:	2b00      	cmp	r3, #0
   1ef7a:	d0f1      	beq.n	1ef60 <z_timeout_remaining+0x20>
	return (node == list->tail) ? NULL : node->next;
   1ef7c:	4293      	cmp	r3, r2
   1ef7e:	d0ef      	beq.n	1ef60 <z_timeout_remaining+0x20>
   1ef80:	681b      	ldr	r3, [r3, #0]
   1ef82:	e7ec      	b.n	1ef5e <z_timeout_remaining+0x1e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ef84:	2400      	movs	r4, #0
   1ef86:	e7eb      	b.n	1ef60 <z_timeout_remaining+0x20>
		return 0;
   1ef88:	4620      	mov	r0, r4
   1ef8a:	e7f0      	b.n	1ef6e <z_timeout_remaining+0x2e>
   1ef8c:	200076f4 	.word	0x200076f4

0001ef90 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1ef90:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   1ef94:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1ef96:	f7ff fbcb 	bl	1e730 <z_time_slice>
	__asm__ volatile(
   1ef9a:	f04f 0320 	mov.w	r3, #32
   1ef9e:	f3ef 8511 	mrs	r5, BASEPRI
   1efa2:	f383 8811 	msr	BASEPRI, r3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1efa6:	4e20      	ldr	r6, [pc, #128]	; (1f028 <z_clock_announce+0x98>)
   1efa8:	4f20      	ldr	r7, [pc, #128]	; (1f02c <z_clock_announce+0x9c>)
	return list->head == list;
   1efaa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1f030 <z_clock_announce+0xa0>
   1efae:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1efb0:	46b8      	mov	r8, r7
   1efb2:	f8d9 4000 	ldr.w	r4, [r9]
   1efb6:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1efb8:	454c      	cmp	r4, r9
   1efba:	e9d7 bc00 	ldrd	fp, ip, [r7]
   1efbe:	d005      	beq.n	1efcc <z_clock_announce+0x3c>
   1efc0:	b124      	cbz	r4, 1efcc <z_clock_announce+0x3c>
   1efc2:	68a3      	ldr	r3, [r4, #8]
   1efc4:	4293      	cmp	r3, r2
   1efc6:	dd14      	ble.n	1eff2 <z_clock_announce+0x62>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1efc8:	1a9b      	subs	r3, r3, r2
   1efca:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
   1efcc:	eb1b 0002 	adds.w	r0, fp, r2
   1efd0:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
   1efd4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1efd6:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   1efda:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   1efdc:	f7ff ff48 	bl	1ee70 <next_timeout>
   1efe0:	4621      	mov	r1, r4
   1efe2:	f7e5 fe41 	bl	4c68 <z_clock_set_timeout>
	__asm__ volatile(
   1efe6:	f385 8811 	msr	BASEPRI, r5
   1efea:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1efee:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1eff2:	eb1b 0003 	adds.w	r0, fp, r3
   1eff6:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   1effa:	1ad3      	subs	r3, r2, r3
   1effc:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1effe:	2300      	movs	r3, #0
		curr_tick += dt;
   1f000:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   1f004:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   1f006:	4620      	mov	r0, r4
   1f008:	f7ff ff1e 	bl	1ee48 <remove_timeout>
   1f00c:	f385 8811 	msr	BASEPRI, r5
   1f010:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1f014:	68e3      	ldr	r3, [r4, #12]
   1f016:	4798      	blx	r3
	__asm__ volatile(
   1f018:	f04f 0320 	mov.w	r3, #32
   1f01c:	f3ef 8511 	mrs	r5, BASEPRI
   1f020:	f383 8811 	msr	BASEPRI, r3
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1f024:	e7c5      	b.n	1efb2 <z_clock_announce+0x22>
   1f026:	bf00      	nop
   1f028:	20001da8 	.word	0x20001da8
   1f02c:	20000530 	.word	0x20000530
   1f030:	200076f4 	.word	0x200076f4

0001f034 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
   1f034:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   1f038:	f04f 0320 	mov.w	r3, #32
   1f03c:	f3ef 8411 	mrs	r4, BASEPRI
   1f040:	f383 8811 	msr	BASEPRI, r3
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1f044:	f7e5 fe4a 	bl	4cdc <z_clock_elapsed>
   1f048:	4b07      	ldr	r3, [pc, #28]	; (1f068 <z_tick_get+0x34>)
   1f04a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f04e:	eb12 0b00 	adds.w	fp, r2, r0
   1f052:	f143 0c00 	adc.w	ip, r3, #0
   1f056:	4658      	mov	r0, fp
   1f058:	4661      	mov	r1, ip
	__asm__ volatile(
   1f05a:	f384 8811 	msr	BASEPRI, r4
   1f05e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1f062:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   1f066:	bf00      	nop
   1f068:	20000530 	.word	0x20000530

0001f06c <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   1f06c:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   1f06e:	7b44      	ldrb	r4, [r0, #13]
   1f070:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   1f074:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1f076:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1f078:	f362 0141 	bfi	r1, r2, #1, #1
   1f07c:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
   1f07e:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
   1f080:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   1f082:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1f084:	4a02      	ldr	r2, [pc, #8]	; (1f090 <k_poll_event_init+0x24>)
   1f086:	400a      	ands	r2, r1
	event->unused = 0;
	event->obj = obj;
   1f088:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1f08c:	bd10      	pop	{r4, pc}
   1f08e:	bf00      	nop
   1f090:	00020fff 	.word	0x00020fff

0001f094 <z_impl_k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   1f094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, rc;
	k_spinlock_key_t key;

	struct _poller poller = { .thread = _current, .is_polling = true, };
   1f098:	4b46      	ldr	r3, [pc, #280]	; (1f1b4 <z_impl_k_poll+0x120>)
{
   1f09a:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
   1f09c:	689b      	ldr	r3, [r3, #8]
   1f09e:	9300      	str	r3, [sp, #0]

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   1f0a0:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
   1f0a2:	2301      	movs	r3, #1
{
   1f0a4:	4607      	mov	r7, r0
   1f0a6:	468a      	mov	sl, r1
   1f0a8:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
   1f0aa:	f88d 3004 	strb.w	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1f0ae:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   1f0b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   1f0b4:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   1f0b6:	4556      	cmp	r6, sl
   1f0b8:	db15      	blt.n	1f0e6 <z_impl_k_poll+0x52>
	__asm__ volatile(
   1f0ba:	f04f 0320 	mov.w	r3, #32
   1f0be:	f3ef 8611 	mrs	r6, BASEPRI
   1f0c2:	f383 8811 	msr	BASEPRI, r3
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1f0c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f0ca:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1f0ce:	2b00      	cmp	r3, #0
   1f0d0:	d150      	bne.n	1f174 <z_impl_k_poll+0xe0>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, last_registered, key);
   1f0d2:	4632      	mov	r2, r6
   1f0d4:	4629      	mov	r1, r5
   1f0d6:	4638      	mov	r0, r7
   1f0d8:	f006 fa29 	bl	2552e <clear_event_registrations>
	__asm__ volatile(
   1f0dc:	f386 8811 	msr	BASEPRI, r6
   1f0e0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   1f0e4:	e052      	b.n	1f18c <z_impl_k_poll+0xf8>
	__asm__ volatile(
   1f0e6:	f04f 0320 	mov.w	r3, #32
   1f0ea:	f3ef 8b11 	mrs	fp, BASEPRI
   1f0ee:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   1f0f2:	7b63      	ldrb	r3, [r4, #13]
   1f0f4:	f003 030f 	and.w	r3, r3, #15
   1f0f8:	2b02      	cmp	r3, #2
   1f0fa:	d003      	beq.n	1f104 <z_impl_k_poll+0x70>
   1f0fc:	2b04      	cmp	r3, #4
   1f0fe:	d004      	beq.n	1f10a <z_impl_k_poll+0x76>
   1f100:	2b01      	cmp	r3, #1
   1f102:	d117      	bne.n	1f134 <z_impl_k_poll+0xa0>
		if (event->signal->signaled != 0) {
   1f104:	6922      	ldr	r2, [r4, #16]
   1f106:	6892      	ldr	r2, [r2, #8]
   1f108:	e001      	b.n	1f10e <z_impl_k_poll+0x7a>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1f10a:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   1f10c:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0) {
   1f10e:	b18a      	cbz	r2, 1f134 <z_impl_k_poll+0xa0>
	event->state |= state;
   1f110:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   1f112:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
   1f116:	f3c2 3104 	ubfx	r1, r2, #12, #5
   1f11a:	430b      	orrs	r3, r1
   1f11c:	f363 3210 	bfi	r2, r3, #12, #5
   1f120:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
   1f122:	f88d 9004 	strb.w	r9, [sp, #4]
	__asm__ volatile(
   1f126:	f38b 8811 	msr	BASEPRI, fp
   1f12a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1f12e:	3601      	adds	r6, #1
   1f130:	3414      	adds	r4, #20
   1f132:	e7c0      	b.n	1f0b6 <z_impl_k_poll+0x22>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   1f134:	f1b8 0f00 	cmp.w	r8, #0
   1f138:	d0f5      	beq.n	1f126 <z_impl_k_poll+0x92>
   1f13a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1f13e:	2a00      	cmp	r2, #0
   1f140:	d0f1      	beq.n	1f126 <z_impl_k_poll+0x92>
	switch (event->type) {
   1f142:	2b02      	cmp	r3, #2
   1f144:	d007      	beq.n	1f156 <z_impl_k_poll+0xc2>
   1f146:	2b04      	cmp	r3, #4
   1f148:	d00f      	beq.n	1f16a <z_impl_k_poll+0xd6>
   1f14a:	2b01      	cmp	r3, #1
   1f14c:	d109      	bne.n	1f162 <z_impl_k_poll+0xce>
		add_event(&event->signal->poll_events, event, poller);
   1f14e:	466a      	mov	r2, sp
   1f150:	4621      	mov	r1, r4
   1f152:	6920      	ldr	r0, [r4, #16]
   1f154:	e003      	b.n	1f15e <z_impl_k_poll+0xca>
		add_event(&event->sem->poll_events, event, poller);
   1f156:	6920      	ldr	r0, [r4, #16]
   1f158:	466a      	mov	r2, sp
   1f15a:	4621      	mov	r1, r4
   1f15c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1f15e:	f006 fa3a 	bl	255d6 <add_event>
	event->poller = poller;
   1f162:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   1f166:	3501      	adds	r5, #1
   1f168:	e7dd      	b.n	1f126 <z_impl_k_poll+0x92>
		add_event(&event->queue->poll_events, event, poller);
   1f16a:	6920      	ldr	r0, [r4, #16]
   1f16c:	466a      	mov	r2, sp
   1f16e:	4621      	mov	r1, r4
   1f170:	3008      	adds	r0, #8
   1f172:	e7f4      	b.n	1f15e <z_impl_k_poll+0xca>
	poller.is_polling = false;
   1f174:	2300      	movs	r3, #0
   1f176:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   1f17a:	f1b8 0f00 	cmp.w	r8, #0
   1f17e:	d109      	bne.n	1f194 <z_impl_k_poll+0x100>
   1f180:	f386 8811 	msr	BASEPRI, r6
   1f184:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1f188:	f06f 040a 	mvn.w	r4, #10
}
   1f18c:	4620      	mov	r0, r4
   1f18e:	b005      	add	sp, #20
   1f190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1f194:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f196:	4643      	mov	r3, r8
   1f198:	4631      	mov	r1, r6
   1f19a:	4807      	ldr	r0, [pc, #28]	; (1f1b8 <z_impl_k_poll+0x124>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1f19c:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f1a0:	f7ff fb82 	bl	1e8a8 <z_pend_curr>
   1f1a4:	4604      	mov	r4, r0
	__asm__ volatile(
   1f1a6:	f04f 0320 	mov.w	r3, #32
   1f1aa:	f3ef 8611 	mrs	r6, BASEPRI
   1f1ae:	f383 8811 	msr	BASEPRI, r3
   1f1b2:	e78e      	b.n	1f0d2 <z_impl_k_poll+0x3e>
   1f1b4:	20001cf0 	.word	0x20001cf0
   1f1b8:	20002488 	.word	0x20002488

0001f1bc <z_impl_k_poll_signal_raise>:
	return 0;
}
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1f1bc:	b538      	push	{r3, r4, r5, lr}
   1f1be:	f04f 0320 	mov.w	r3, #32
   1f1c2:	f3ef 8511 	mrs	r5, BASEPRI
   1f1c6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1f1ca:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1f1cc:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1f1ce:	4298      	cmp	r0, r3
	signal->signaled = 1;
   1f1d0:	f04f 0101 	mov.w	r1, #1
   1f1d4:	6081      	str	r1, [r0, #8]
   1f1d6:	d106      	bne.n	1f1e6 <z_impl_k_poll_signal_raise+0x2a>
	__asm__ volatile(
   1f1d8:	f385 8811 	msr	BASEPRI, r5
   1f1dc:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1f1e0:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1f1e2:	4620      	mov	r0, r4
   1f1e4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1f1e6:	e9d3 2000 	ldrd	r2, r0, [r3]
   1f1ea:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1f1ec:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1f1ee:	2200      	movs	r2, #0
	node->prev = NULL;
   1f1f0:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f1f4:	4618      	mov	r0, r3
   1f1f6:	f006 f9c2 	bl	2557e <signal_poll_event>
	z_reschedule(&lock, key);
   1f1fa:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f1fc:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1f1fe:	4802      	ldr	r0, [pc, #8]	; (1f208 <z_impl_k_poll_signal_raise+0x4c>)
   1f200:	f005 ffcf 	bl	251a2 <z_reschedule>
	return rc;
   1f204:	e7ed      	b.n	1f1e2 <z_impl_k_poll_signal_raise+0x26>
   1f206:	bf00      	nop
   1f208:	20002488 	.word	0x20002488

0001f20c <gen_onoff_get>:
}
   1f20c:	4770      	bx	lr

0001f20e <prov_complete>:
}
   1f20e:	4770      	bx	lr

0001f210 <prov_reset>:
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   1f210:	2003      	movs	r0, #3
   1f212:	f7eb be7d 	b.w	af10 <bt_mesh_prov_enable>

0001f216 <gen_move_set>:
   1f216:	4770      	bx	lr

0001f218 <gen_move_set_unack>:
   1f218:	4770      	bx	lr

0001f21a <gen_onoff_set>:
   1f21a:	4770      	bx	lr

0001f21c <gen_onoff_set_unack>:
   1f21c:	4770      	bx	lr

0001f21e <gen_level_get>:
   1f21e:	4770      	bx	lr

0001f220 <gen_level_set>:
   1f220:	4770      	bx	lr

0001f222 <gen_level_set_unack>:
   1f222:	4770      	bx	lr

0001f224 <gen_delta_set>:
   1f224:	4770      	bx	lr

0001f226 <gen_delta_set_unack>:
   1f226:	4770      	bx	lr

0001f228 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   1f228:	b570      	push	{r4, r5, r6, lr}
   1f22a:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   1f22c:	f990 000b 	ldrsb.w	r0, [r0, #11]
   1f230:	250c      	movs	r5, #12
   1f232:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
   1f234:	4288      	cmp	r0, r1
   1f236:	eb06 0405 	add.w	r4, r6, r5
   1f23a:	bfb8      	it	lt
   1f23c:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
   1f23e:	2a00      	cmp	r2, #0
   1f240:	4610      	mov	r0, r2
   1f242:	bfb8      	it	lt
   1f244:	f102 001f 	addlt.w	r0, r2, #31
   1f248:	1140      	asrs	r0, r0, #5
   1f24a:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   1f24e:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   1f250:	f002 001f 	and.w	r0, r2, #31
   1f254:	bd70      	pop	{r4, r5, r6, pc}

0001f256 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   1f256:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   1f258:	ab01      	add	r3, sp, #4
   1f25a:	f7ff ffe5 	bl	1f228 <get_bit_ptr>

	*word |= (1<<bit);
   1f25e:	9a01      	ldr	r2, [sp, #4]
   1f260:	2301      	movs	r3, #1
   1f262:	fa03 f000 	lsl.w	r0, r3, r0
   1f266:	6813      	ldr	r3, [r2, #0]
   1f268:	4303      	orrs	r3, r0
   1f26a:	6013      	str	r3, [r2, #0]
}
   1f26c:	b003      	add	sp, #12
   1f26e:	f85d fb04 	ldr.w	pc, [sp], #4

0001f272 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   1f272:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   1f274:	ab01      	add	r3, sp, #4
   1f276:	f7ff ffd7 	bl	1f228 <get_bit_ptr>

	*word &= ~(1<<bit);
   1f27a:	9a01      	ldr	r2, [sp, #4]
   1f27c:	2301      	movs	r3, #1
   1f27e:	fa03 f000 	lsl.w	r0, r3, r0
   1f282:	6813      	ldr	r3, [r2, #0]
   1f284:	ea23 0300 	bic.w	r3, r3, r0
   1f288:	6013      	str	r3, [r2, #0]
}
   1f28a:	b003      	add	sp, #12
   1f28c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f290 <pool_irq_unlock.isra.5>:
	}
}

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1f290:	07c3      	lsls	r3, r0, #31
   1f292:	d503      	bpl.n	1f29c <pool_irq_unlock.isra.5+0xc>
   1f294:	f381 8811 	msr	BASEPRI, r1
   1f298:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   1f29c:	4770      	bx	lr

0001f29e <z_sys_mem_pool_base_init>:
{
   1f29e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1f2a2:	6843      	ldr	r3, [r0, #4]
   1f2a4:	8906      	ldrh	r6, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1f2a6:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
   1f2a8:	f890 c00a 	ldrb.w	ip, [r0, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   1f2ac:	435e      	muls	r6, r3
	p->max_inline_level = -1;
   1f2ae:	22ff      	movs	r2, #255	; 0xff
{
   1f2b0:	4604      	mov	r4, r0
	p->max_inline_level = -1;
   1f2b2:	72c2      	strb	r2, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   1f2b4:	4435      	add	r5, r6
	for (i = 0; i < p->n_levels; i++) {
   1f2b6:	2000      	movs	r0, #0
		sys_dlist_init(&p->levels[i].free_list);
   1f2b8:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
   1f2bc:	4584      	cmp	ip, r0
   1f2be:	dc05      	bgt.n	1f2cc <z_sys_mem_pool_base_init+0x2e>
	for (i = 0; i < p->n_max; i++) {
   1f2c0:	2500      	movs	r5, #0
   1f2c2:	8923      	ldrh	r3, [r4, #8]
   1f2c4:	42ab      	cmp	r3, r5
   1f2c6:	dc21      	bgt.n	1f30c <z_sys_mem_pool_base_init+0x6e>
}
   1f2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
   1f2cc:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
   1f2d0:	fbb6 f1f3 	udiv	r1, r6, r3
		sys_dlist_init(&p->levels[i].free_list);
   1f2d4:	fb0e f700 	mul.w	r7, lr, r0
   1f2d8:	eb08 0207 	add.w	r2, r8, r7
   1f2dc:	f102 0904 	add.w	r9, r2, #4
		if (nblocks < 32) {
   1f2e0:	291f      	cmp	r1, #31
	list->tail = (sys_dnode_t *)list;
   1f2e2:	e9c2 9901 	strd	r9, r9, [r2, #4]
   1f2e6:	dc06      	bgt.n	1f2f6 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   1f2e8:	72e0      	strb	r0, [r4, #11]
		sz = _ALIGN4(sz / 4);
   1f2ea:	089b      	lsrs	r3, r3, #2
   1f2ec:	3303      	adds	r3, #3
   1f2ee:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
   1f2f2:	3001      	adds	r0, #1
   1f2f4:	e7e2      	b.n	1f2bc <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
   1f2f6:	f111 021f 	adds.w	r2, r1, #31
   1f2fa:	bf48      	it	mi
   1f2fc:	f101 023e 	addmi.w	r2, r1, #62	; 0x3e
   1f300:	1152      	asrs	r2, r2, #5
			p->levels[i].bits_p = bits;
   1f302:	f848 5007 	str.w	r5, [r8, r7]
			bits += (nblocks + 31)/32;
   1f306:	eb05 0582 	add.w	r5, r5, r2, lsl #2
   1f30a:	e7ee      	b.n	1f2ea <z_sys_mem_pool_base_init+0x4c>
	return (u8_t *)p->buf + lsz * block;
   1f30c:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
   1f30e:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
   1f310:	6820      	ldr	r0, [r4, #0]
   1f312:	436a      	muls	r2, r5
   1f314:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
   1f316:	1d1e      	adds	r6, r3, #4
	node->next = list;
   1f318:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
   1f31a:	689a      	ldr	r2, [r3, #8]
   1f31c:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   1f31e:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   1f320:	4620      	mov	r0, r4
   1f322:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1f324:	6099      	str	r1, [r3, #8]
   1f326:	462a      	mov	r2, r5
   1f328:	2100      	movs	r1, #0
   1f32a:	f7ff ff94 	bl	1f256 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   1f32e:	3501      	adds	r5, #1
   1f330:	e7c7      	b.n	1f2c2 <z_sys_mem_pool_base_init+0x24>

0001f332 <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   1f332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f336:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1, free_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1f338:	7a85      	ldrb	r5, [r0, #10]
{
   1f33a:	af00      	add	r7, sp, #0
   1f33c:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1f340:	00ab      	lsls	r3, r5, #2
   1f342:	3307      	adds	r3, #7
   1f344:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1f348:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
   1f34c:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1f34e:	46ea      	mov	sl, sp
{
   1f350:	4604      	mov	r4, r0
	lsizes[0] = _ALIGN4(p->max_sz);
   1f352:	3303      	adds	r3, #3
   1f354:	4650      	mov	r0, sl
   1f356:	f023 0303 	bic.w	r3, r3, #3
   1f35a:	f840 3904 	str.w	r3, [r0], #-4
	int i, from_l, alloc_l = -1, free_l = -1;
   1f35e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
   1f362:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
   1f364:	f04f 0c0c 	mov.w	ip, #12
	for (i = 0; i < p->n_levels; i++) {
   1f368:	429d      	cmp	r5, r3
   1f36a:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
   1f36e:	dd0a      	ble.n	1f386 <z_sys_mem_pool_block_alloc+0x54>
		if (i > 0) {
   1f370:	b12b      	cbz	r3, 1f37e <z_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   1f372:	6802      	ldr	r2, [r0, #0]
   1f374:	0892      	lsrs	r2, r2, #2
   1f376:	3203      	adds	r2, #3
   1f378:	f022 0203 	bic.w	r2, r2, #3
   1f37c:	6042      	str	r2, [r0, #4]
		}

		if (lsizes[i] < size) {
   1f37e:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1f382:	428a      	cmp	r2, r1
   1f384:	d20b      	bcs.n	1f39e <z_sys_mem_pool_block_alloc+0x6c>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
   1f386:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1f38a:	d113      	bne.n	1f3b4 <z_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
   1f38c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1f38e:	2300      	movs	r3, #0
   1f390:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   1f392:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
   1f396:	3724      	adds	r7, #36	; 0x24
   1f398:	46bd      	mov	sp, r7
   1f39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
   1f39e:	68e2      	ldr	r2, [r4, #12]
   1f3a0:	fb0c 2203 	mla	r2, ip, r3, r2
   1f3a4:	f102 0e04 	add.w	lr, r2, #4
		if (!level_empty(p, i)) {
   1f3a8:	6852      	ldr	r2, [r2, #4]
   1f3aa:	4572      	cmp	r2, lr
   1f3ac:	bf18      	it	ne
   1f3ae:	461e      	movne	r6, r3
	for (i = 0; i < p->n_levels; i++) {
   1f3b0:	3301      	adds	r3, #1
   1f3b2:	e7d9      	b.n	1f368 <z_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
   1f3b4:	1c71      	adds	r1, r6, #1
   1f3b6:	d0e9      	beq.n	1f38c <z_sys_mem_pool_block_alloc+0x5a>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1f3b8:	7c23      	ldrb	r3, [r4, #16]
   1f3ba:	f013 0301 	ands.w	r3, r3, #1
   1f3be:	d005      	beq.n	1f3cc <z_sys_mem_pool_block_alloc+0x9a>
	__asm__ volatile(
   1f3c0:	f04f 0220 	mov.w	r2, #32
   1f3c4:	f3ef 8311 	mrs	r3, BASEPRI
   1f3c8:	f382 8811 	msr	BASEPRI, r2
	return key;
   1f3cc:	68e2      	ldr	r2, [r4, #12]
	key = pool_irq_lock(p);
   1f3ce:	61fb      	str	r3, [r7, #28]
	for (i = free_l; i >= 0; i--) {
   1f3d0:	230c      	movs	r3, #12
   1f3d2:	fb03 2306 	mla	r3, r3, r6, r2
	return list->head == list;
   1f3d6:	461a      	mov	r2, r3
   1f3d8:	f852 5f04 	ldr.w	r5, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   1f3dc:	4295      	cmp	r5, r2
   1f3de:	d076      	beq.n	1f4ce <z_sys_mem_pool_block_alloc+0x19c>
	node->prev->next = node->next;
   1f3e0:	e9d5 3100 	ldrd	r3, r1, [r5]
   1f3e4:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
   1f3e6:	6059      	str	r1, [r3, #4]
	node->next = NULL;
   1f3e8:	2300      	movs	r3, #0
	node->prev = NULL;
   1f3ea:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1f3ee:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   1f3f0:	f85a 2026 	ldr.w	r2, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1f3f4:	1aeb      	subs	r3, r5, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
   1f3f6:	4631      	mov	r1, r6
   1f3f8:	fb93 f2f2 	sdiv	r2, r3, r2
   1f3fc:	4620      	mov	r0, r4
   1f3fe:	f7ff ff38 	bl	1f272 <clear_free_bit>
		if (data != NULL) {
   1f402:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
   1f406:	f106 0801 	add.w	r8, r6, #1
   1f40a:	61bb      	str	r3, [r7, #24]
			for (from_l = i; from_l < alloc_l; from_l++) {
   1f40c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1f410:	459b      	cmp	fp, r3
   1f412:	dc12      	bgt.n	1f43a <z_sys_mem_pool_block_alloc+0x108>
	pool_irq_unlock(p, key);
   1f414:	7c20      	ldrb	r0, [r4, #16]
   1f416:	69f9      	ldr	r1, [r7, #28]
   1f418:	f7ff ff3a 	bl	1f290 <pool_irq_unlock.isra.5>
	*level_p = alloc_l;
   1f41c:	68bb      	ldr	r3, [r7, #8]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1f41e:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
	*level_p = alloc_l;
   1f422:	f8c3 b000 	str.w	fp, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1f426:	6823      	ldr	r3, [r4, #0]
   1f428:	1aeb      	subs	r3, r5, r3
   1f42a:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
   1f42e:	687a      	ldr	r2, [r7, #4]
   1f430:	6013      	str	r3, [r2, #0]
	*data_p = data;
   1f432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	return 0;
   1f434:	2000      	movs	r0, #0
	*data_p = data;
   1f436:	601d      	str	r5, [r3, #0]
	return 0;
   1f438:	e7ad      	b.n	1f396 <z_sys_mem_pool_block_alloc+0x64>
	bn = block_num(p, block, lsizes[l]);
   1f43a:	69bb      	ldr	r3, [r7, #24]
   1f43c:	f853 2b04 	ldr.w	r2, [r3], #4
   1f440:	61bb      	str	r3, [r7, #24]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   1f442:	6823      	ldr	r3, [r4, #0]
   1f444:	1aeb      	subs	r3, r5, r3
   1f446:	fb93 f3f2 	sdiv	r3, r3, r2
		int lbn = 4*bn + i;
   1f44a:	009b      	lsls	r3, r3, #2
   1f44c:	60fb      	str	r3, [r7, #12]
   1f44e:	230c      	movs	r3, #12
   1f450:	fb03 f308 	mul.w	r3, r3, r8
   1f454:	613b      	str	r3, [r7, #16]
	for (i = 1; i < 4; i++) {
   1f456:	f04f 0901 	mov.w	r9, #1
		int lsz = lsizes[l + 1];
   1f45a:	69bb      	ldr	r3, [r7, #24]
   1f45c:	681e      	ldr	r6, [r3, #0]
		void *block2 = (lsz * i) + (char *)block;
   1f45e:	fb09 f306 	mul.w	r3, r9, r6
   1f462:	617b      	str	r3, [r7, #20]
   1f464:	18eb      	adds	r3, r5, r3
   1f466:	603b      	str	r3, [r7, #0]
		set_free_bit(p, l + 1, lbn);
   1f468:	68fb      	ldr	r3, [r7, #12]
   1f46a:	4641      	mov	r1, r8
   1f46c:	eb09 0203 	add.w	r2, r9, r3
   1f470:	4620      	mov	r0, r4
   1f472:	f7ff fef0 	bl	1f256 <set_free_bit>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   1f476:	683b      	ldr	r3, [r7, #0]
   1f478:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
   1f47a:	8921      	ldrh	r1, [r4, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   1f47c:	3e01      	subs	r6, #1
   1f47e:	441e      	add	r6, r3
   1f480:	1ab6      	subs	r6, r6, r2
	return p->n_max * p->max_sz;
   1f482:	6862      	ldr	r2, [r4, #4]
   1f484:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
   1f486:	4296      	cmp	r6, r2
   1f488:	d20a      	bcs.n	1f4a0 <z_sys_mem_pool_block_alloc+0x16e>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
   1f48a:	68e2      	ldr	r2, [r4, #12]
   1f48c:	6939      	ldr	r1, [r7, #16]
	node->next = list;
   1f48e:	6978      	ldr	r0, [r7, #20]
   1f490:	440a      	add	r2, r1
   1f492:	1d11      	adds	r1, r2, #4
   1f494:	5029      	str	r1, [r5, r0]
	node->prev = list->tail;
   1f496:	6891      	ldr	r1, [r2, #8]
   1f498:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
   1f49a:	6891      	ldr	r1, [r2, #8]
   1f49c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1f49e:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
   1f4a0:	f109 0901 	add.w	r9, r9, #1
   1f4a4:	f1b9 0f04 	cmp.w	r9, #4
   1f4a8:	d1d7      	bne.n	1f45a <z_sys_mem_pool_block_alloc+0x128>
				pool_irq_unlock(p, key);
   1f4aa:	69f9      	ldr	r1, [r7, #28]
   1f4ac:	7c20      	ldrb	r0, [r4, #16]
   1f4ae:	f7ff feef 	bl	1f290 <pool_irq_unlock.isra.5>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1f4b2:	7c23      	ldrb	r3, [r4, #16]
   1f4b4:	f013 0301 	ands.w	r3, r3, #1
   1f4b8:	d005      	beq.n	1f4c6 <z_sys_mem_pool_block_alloc+0x194>
	__asm__ volatile(
   1f4ba:	f04f 0220 	mov.w	r2, #32
   1f4be:	f3ef 8311 	mrs	r3, BASEPRI
   1f4c2:	f382 8811 	msr	BASEPRI, r2
				key = pool_irq_lock(p);
   1f4c6:	61fb      	str	r3, [r7, #28]
   1f4c8:	f108 0801 	add.w	r8, r8, #1
   1f4cc:	e79e      	b.n	1f40c <z_sys_mem_pool_block_alloc+0xda>
	for (i = free_l; i >= 0; i--) {
   1f4ce:	3e01      	subs	r6, #1
   1f4d0:	1c72      	adds	r2, r6, #1
   1f4d2:	f1a3 030c 	sub.w	r3, r3, #12
   1f4d6:	f47f af7e 	bne.w	1f3d6 <z_sys_mem_pool_block_alloc+0xa4>
   1f4da:	2500      	movs	r5, #0
   1f4dc:	e79a      	b.n	1f414 <z_sys_mem_pool_block_alloc+0xe2>

0001f4de <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1f4de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4e2:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1f4e4:	7a83      	ldrb	r3, [r0, #10]
   1f4e6:	009b      	lsls	r3, r3, #2
   1f4e8:	3307      	adds	r3, #7
   1f4ea:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
   1f4ee:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1f4f0:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
   1f4f4:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1f4f6:	46e9      	mov	r9, sp
	lsizes[0] = _ALIGN4(p->max_sz);
   1f4f8:	3303      	adds	r3, #3
   1f4fa:	f023 0303 	bic.w	r3, r3, #3
{
   1f4fe:	4605      	mov	r5, r0
	lsizes[0] = _ALIGN4(p->max_sz);
   1f500:	f8c9 3000 	str.w	r3, [r9]
	for (i = 1; i <= level; i++) {
   1f504:	464c      	mov	r4, r9
   1f506:	2001      	movs	r0, #1
   1f508:	4281      	cmp	r1, r0
   1f50a:	d218      	bcs.n	1f53e <z_sys_mem_pool_block_free+0x60>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1f50c:	7c2c      	ldrb	r4, [r5, #16]
   1f50e:	f014 0401 	ands.w	r4, r4, #1
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1f512:	4688      	mov	r8, r1
   1f514:	4616      	mov	r6, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1f516:	d005      	beq.n	1f524 <z_sys_mem_pool_block_free+0x46>
   1f518:	f04f 0320 	mov.w	r3, #32
   1f51c:	f3ef 8411 	mrs	r4, BASEPRI
   1f520:	f383 8811 	msr	BASEPRI, r3
	while (level >= 0) {
   1f524:	f1b8 0f00 	cmp.w	r8, #0
   1f528:	da12      	bge.n	1f550 <z_sys_mem_pool_block_free+0x72>
	return -1;
   1f52a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1f52e:	4621      	mov	r1, r4
   1f530:	7c28      	ldrb	r0, [r5, #16]
   1f532:	f7ff fead 	bl	1f290 <pool_irq_unlock.isra.5>
}
   1f536:	371c      	adds	r7, #28
   1f538:	46bd      	mov	sp, r7
   1f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   1f53e:	6823      	ldr	r3, [r4, #0]
   1f540:	089b      	lsrs	r3, r3, #2
   1f542:	3303      	adds	r3, #3
   1f544:	f023 0303 	bic.w	r3, r3, #3
   1f548:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
   1f54c:	3001      	adds	r0, #1
   1f54e:	e7db      	b.n	1f508 <z_sys_mem_pool_block_free+0x2a>
		int i, lsz = lsizes[level];
   1f550:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
   1f554:	60fb      	str	r3, [r7, #12]
	return (u8_t *)p->buf + lsz * block;
   1f556:	fb03 fb06 	mul.w	fp, r3, r6
   1f55a:	682b      	ldr	r3, [r5, #0]
   1f55c:	60bb      	str	r3, [r7, #8]
		set_free_bit(p, level, bn);
   1f55e:	4632      	mov	r2, r6
   1f560:	4641      	mov	r1, r8
   1f562:	4628      	mov	r0, r5
	return (u8_t *)p->buf + lsz * block;
   1f564:	eb03 0a0b 	add.w	sl, r3, fp
		set_free_bit(p, level, bn);
   1f568:	f7ff fe75 	bl	1f256 <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
   1f56c:	68ea      	ldr	r2, [r5, #12]
   1f56e:	230c      	movs	r3, #12
   1f570:	fb03 2208 	mla	r2, r3, r8, r2
	node->next = list;
   1f574:	68bb      	ldr	r3, [r7, #8]
   1f576:	1d11      	adds	r1, r2, #4
   1f578:	f843 100b 	str.w	r1, [r3, fp]
	node->prev = list->tail;
   1f57c:	6893      	ldr	r3, [r2, #8]
   1f57e:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
   1f582:	6893      	ldr	r3, [r2, #8]
   1f584:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
   1f588:	f8c2 a008 	str.w	sl, [r2, #8]
		pool_irq_unlock(p, key);
   1f58c:	4621      	mov	r1, r4
   1f58e:	7c28      	ldrb	r0, [r5, #16]
   1f590:	f7ff fe7e 	bl	1f290 <pool_irq_unlock.isra.5>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1f594:	7c2c      	ldrb	r4, [r5, #16]
   1f596:	f014 0401 	ands.w	r4, r4, #1
   1f59a:	d005      	beq.n	1f5a8 <z_sys_mem_pool_block_free+0xca>
   1f59c:	f04f 0320 	mov.w	r3, #32
   1f5a0:	f3ef 8411 	mrs	r4, BASEPRI
   1f5a4:	f383 8811 	msr	BASEPRI, r3
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   1f5a8:	f1b8 0f00 	cmp.w	r8, #0
   1f5ac:	d0bf      	beq.n	1f52e <z_sys_mem_pool_block_free+0x50>
	int bit = get_bit_ptr(p, level, bn, &word);
   1f5ae:	f107 0314 	add.w	r3, r7, #20
   1f5b2:	4632      	mov	r2, r6
   1f5b4:	4641      	mov	r1, r8
   1f5b6:	4628      	mov	r0, r5
   1f5b8:	f7ff fe36 	bl	1f228 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1f5bc:	697a      	ldr	r2, [r7, #20]
   1f5be:	2800      	cmp	r0, #0
   1f5c0:	bfb8      	it	lt
   1f5c2:	3003      	addlt	r0, #3
   1f5c4:	f020 0303 	bic.w	r3, r0, #3
   1f5c8:	6810      	ldr	r0, [r2, #0]
   1f5ca:	40d8      	lsrs	r0, r3
   1f5cc:	f000 000f 	and.w	r0, r0, #15
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   1f5d0:	280f      	cmp	r0, #15
   1f5d2:	d1ac      	bne.n	1f52e <z_sys_mem_pool_block_free+0x50>
			int b = (bn & ~3) + i;
   1f5d4:	f026 0303 	bic.w	r3, r6, #3
   1f5d8:	60bb      	str	r3, [r7, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   1f5da:	68fb      	ldr	r3, [r7, #12]
   1f5dc:	3b01      	subs	r3, #1
		for (i = 0; i < 4; i++) {
   1f5de:	f04f 0a00 	mov.w	sl, #0
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   1f5e2:	607b      	str	r3, [r7, #4]
			int b = (bn & ~3) + i;
   1f5e4:	68bb      	ldr	r3, [r7, #8]
	return p->n_max * p->max_sz;
   1f5e6:	f8b5 c008 	ldrh.w	ip, [r5, #8]
   1f5ea:	6869      	ldr	r1, [r5, #4]
			int b = (bn & ~3) + i;
   1f5ec:	eb03 020a 	add.w	r2, r3, sl
	return (u8_t *)p->buf + lsz * block;
   1f5f0:	68fb      	ldr	r3, [r7, #12]
   1f5f2:	fb03 fb02 	mul.w	fp, r3, r2
			if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
   1f5f6:	687b      	ldr	r3, [r7, #4]
	return p->n_max * p->max_sz;
   1f5f8:	fb01 f10c 	mul.w	r1, r1, ip
			if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
   1f5fc:	eb03 000b 	add.w	r0, r3, fp
   1f600:	4288      	cmp	r0, r1
   1f602:	d20f      	bcs.n	1f624 <z_sys_mem_pool_block_free+0x146>
				clear_free_bit(p, level, b);
   1f604:	4641      	mov	r1, r8
   1f606:	4628      	mov	r0, r5
   1f608:	f7ff fe33 	bl	1f272 <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
   1f60c:	682a      	ldr	r2, [r5, #0]
   1f60e:	eb02 010b 	add.w	r1, r2, fp
	node->prev->next = node->next;
   1f612:	f852 000b 	ldr.w	r0, [r2, fp]
   1f616:	684b      	ldr	r3, [r1, #4]
   1f618:	6018      	str	r0, [r3, #0]
	node->next->prev = node->prev;
   1f61a:	6043      	str	r3, [r0, #4]
	node->next = NULL;
   1f61c:	2300      	movs	r3, #0
   1f61e:	f842 300b 	str.w	r3, [r2, fp]
	node->prev = NULL;
   1f622:	604b      	str	r3, [r1, #4]
		for (i = 0; i < 4; i++) {
   1f624:	f10a 0a01 	add.w	sl, sl, #1
   1f628:	f1ba 0f04 	cmp.w	sl, #4
   1f62c:	d1da      	bne.n	1f5e4 <z_sys_mem_pool_block_free+0x106>
		bn = bn / 4;
   1f62e:	2e00      	cmp	r6, #0
   1f630:	bfb8      	it	lt
   1f632:	3603      	addlt	r6, #3
		level = level - 1;
   1f634:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1f638:	10b6      	asrs	r6, r6, #2
   1f63a:	e773      	b.n	1f524 <z_sys_mem_pool_block_free+0x46>

0001f63c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1f63c:	b508      	push	{r3, lr}
   1f63e:	4604      	mov	r4, r0
   1f640:	4608      	mov	r0, r1
   1f642:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1f644:	461a      	mov	r2, r3
   1f646:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   1f648:	f7ff fa44 	bl	1ead4 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   1f64c:	f7e5 fe40 	bl	52d0 <z_impl_k_thread_abort>

0001f650 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1f650:	b510      	push	{r4, lr}
   1f652:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1f654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f658:	4620      	mov	r0, r4
   1f65a:	f005 fd18 	bl	2508e <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1f65e:	4603      	mov	r3, r0
   1f660:	2800      	cmp	r0, #0
   1f662:	d0f7      	beq.n	1f654 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f664:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1f666:	6842      	ldr	r2, [r0, #4]
   1f668:	f3bf 8f5b 	dmb	ish
   1f66c:	e853 1f00 	ldrex	r1, [r3]
   1f670:	f021 0c01 	bic.w	ip, r1, #1
   1f674:	e843 ce00 	strex	lr, ip, [r3]
   1f678:	f1be 0f00 	cmp.w	lr, #0
   1f67c:	d1f6      	bne.n	1f66c <z_work_q_main+0x1c>
   1f67e:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1f682:	07cb      	lsls	r3, r1, #31
   1f684:	d500      	bpl.n	1f688 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1f686:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   1f688:	f7ff f978 	bl	1e97c <z_impl_k_yield>
   1f68c:	e7e2      	b.n	1f654 <z_work_q_main+0x4>

0001f68e <z_arch_printk_char_out>:
}
   1f68e:	2000      	movs	r0, #0
   1f690:	4770      	bx	lr

0001f692 <print_err>:
{
   1f692:	b570      	push	{r4, r5, r6, lr}
   1f694:	4604      	mov	r4, r0
   1f696:	460d      	mov	r5, r1
	out('E', ctx);
   1f698:	2045      	movs	r0, #69	; 0x45
   1f69a:	47a0      	blx	r4
	out('R', ctx);
   1f69c:	4629      	mov	r1, r5
   1f69e:	2052      	movs	r0, #82	; 0x52
   1f6a0:	47a0      	blx	r4
	out('R', ctx);
   1f6a2:	4629      	mov	r1, r5
   1f6a4:	4623      	mov	r3, r4
   1f6a6:	2052      	movs	r0, #82	; 0x52
}
   1f6a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   1f6ac:	4718      	bx	r3

0001f6ae <str_out>:
{
   1f6ae:	b530      	push	{r4, r5, lr}
   1f6b0:	688a      	ldr	r2, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
   1f6b2:	680c      	ldr	r4, [r1, #0]
   1f6b4:	1c55      	adds	r5, r2, #1
   1f6b6:	b114      	cbz	r4, 1f6be <str_out+0x10>
   1f6b8:	684b      	ldr	r3, [r1, #4]
   1f6ba:	4293      	cmp	r3, r2
   1f6bc:	dc01      	bgt.n	1f6c2 <str_out+0x14>
		ctx->count++;
   1f6be:	608d      	str	r5, [r1, #8]
}
   1f6c0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1f6c2:	3b01      	subs	r3, #1
   1f6c4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1f6c6:	bf08      	it	eq
   1f6c8:	2200      	moveq	r2, #0
   1f6ca:	608d      	str	r5, [r1, #8]
   1f6cc:	bf0c      	ite	eq
   1f6ce:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1f6d0:	54a0      	strbne	r0, [r4, r2]
   1f6d2:	e7f5      	b.n	1f6c0 <str_out+0x12>

0001f6d4 <_vprintk>:
{
   1f6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6d8:	b08b      	sub	sp, #44	; 0x2c
   1f6da:	461c      	mov	r4, r3
	int long_ctr = 0;
   1f6dc:	f04f 0900 	mov.w	r9, #0
   1f6e0:	1e53      	subs	r3, r2, #1
{
   1f6e2:	4605      	mov	r5, r0
   1f6e4:	460e      	mov	r6, r1
   1f6e6:	9303      	str	r3, [sp, #12]
	int min_width = -1;
   1f6e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1f6ec:	464f      	mov	r7, r9
			might_format = 0;
   1f6ee:	f04f 0b00 	mov.w	fp, #0
						break;
   1f6f2:	e007      	b.n	1f704 <_vprintk+0x30>
		if (!might_format) {
   1f6f4:	f1bb 0f00 	cmp.w	fp, #0
   1f6f8:	d10d      	bne.n	1f716 <_vprintk+0x42>
			if (*fmt != '%') {
   1f6fa:	2825      	cmp	r0, #37	; 0x25
   1f6fc:	f000 812e 	beq.w	1f95c <_vprintk+0x288>
				out((int)*fmt, ctx);
   1f700:	4631      	mov	r1, r6
   1f702:	47a8      	blx	r5
	while (*fmt) {
   1f704:	9b03      	ldr	r3, [sp, #12]
   1f706:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1f70a:	9303      	str	r3, [sp, #12]
   1f70c:	2800      	cmp	r0, #0
   1f70e:	d1f1      	bne.n	1f6f4 <_vprintk+0x20>
}
   1f710:	b00b      	add	sp, #44	; 0x2c
   1f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1f716:	2864      	cmp	r0, #100	; 0x64
   1f718:	d05f      	beq.n	1f7da <_vprintk+0x106>
   1f71a:	d819      	bhi.n	1f750 <_vprintk+0x7c>
   1f71c:	2839      	cmp	r0, #57	; 0x39
   1f71e:	d80a      	bhi.n	1f736 <_vprintk+0x62>
   1f720:	2831      	cmp	r0, #49	; 0x31
   1f722:	d24e      	bcs.n	1f7c2 <_vprintk+0xee>
   1f724:	282d      	cmp	r0, #45	; 0x2d
   1f726:	f000 8120 	beq.w	1f96a <_vprintk+0x296>
   1f72a:	2830      	cmp	r0, #48	; 0x30
   1f72c:	d03d      	beq.n	1f7aa <_vprintk+0xd6>
   1f72e:	2825      	cmp	r0, #37	; 0x25
   1f730:	d107      	bne.n	1f742 <_vprintk+0x6e>
				out((int)'%', ctx);
   1f732:	4631      	mov	r1, r6
   1f734:	e110      	b.n	1f958 <_vprintk+0x284>
			switch (*fmt) {
   1f736:	2858      	cmp	r0, #88	; 0x58
   1f738:	f000 80a3 	beq.w	1f882 <_vprintk+0x1ae>
   1f73c:	2863      	cmp	r0, #99	; 0x63
   1f73e:	f000 8108 	beq.w	1f952 <_vprintk+0x27e>
				out((int)'%', ctx);
   1f742:	4631      	mov	r1, r6
   1f744:	2025      	movs	r0, #37	; 0x25
   1f746:	47a8      	blx	r5
				out((int)*fmt, ctx);
   1f748:	9b03      	ldr	r3, [sp, #12]
   1f74a:	4631      	mov	r1, r6
   1f74c:	7818      	ldrb	r0, [r3, #0]
   1f74e:	e103      	b.n	1f958 <_vprintk+0x284>
			switch (*fmt) {
   1f750:	2870      	cmp	r0, #112	; 0x70
   1f752:	f000 808d 	beq.w	1f870 <_vprintk+0x19c>
   1f756:	d806      	bhi.n	1f766 <_vprintk+0x92>
   1f758:	2869      	cmp	r0, #105	; 0x69
   1f75a:	d03e      	beq.n	1f7da <_vprintk+0x106>
   1f75c:	286c      	cmp	r0, #108	; 0x6c
   1f75e:	d039      	beq.n	1f7d4 <_vprintk+0x100>
   1f760:	2868      	cmp	r0, #104	; 0x68
   1f762:	d0cf      	beq.n	1f704 <_vprintk+0x30>
   1f764:	e7ed      	b.n	1f742 <_vprintk+0x6e>
   1f766:	2875      	cmp	r0, #117	; 0x75
   1f768:	d06b      	beq.n	1f842 <_vprintk+0x16e>
   1f76a:	d81a      	bhi.n	1f7a2 <_vprintk+0xce>
   1f76c:	2873      	cmp	r0, #115	; 0x73
   1f76e:	d1e8      	bne.n	1f742 <_vprintk+0x6e>
				char *s = va_arg(ap, char *);
   1f770:	f854 bb04 	ldr.w	fp, [r4], #4
				while (*s)
   1f774:	46da      	mov	sl, fp
   1f776:	4652      	mov	r2, sl
   1f778:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1f77c:	2800      	cmp	r0, #0
   1f77e:	f040 80e5 	bne.w	1f94c <_vprintk+0x278>
				if (padding == PAD_SPACE_AFTER) {
   1f782:	2f03      	cmp	r7, #3
   1f784:	f040 80f5 	bne.w	1f972 <_vprintk+0x29e>
					int remaining = min_width - (s - start);
   1f788:	eba2 0b0b 	sub.w	fp, r2, fp
   1f78c:	eba8 0b0b 	sub.w	fp, r8, fp
					while (remaining-- > 0) {
   1f790:	f1bb 0f00 	cmp.w	fp, #0
   1f794:	ddab      	ble.n	1f6ee <_vprintk+0x1a>
						out(' ', ctx);
   1f796:	4631      	mov	r1, r6
   1f798:	2020      	movs	r0, #32
   1f79a:	47a8      	blx	r5
   1f79c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1f7a0:	e7f6      	b.n	1f790 <_vprintk+0xbc>
			switch (*fmt) {
   1f7a2:	2878      	cmp	r0, #120	; 0x78
   1f7a4:	d06d      	beq.n	1f882 <_vprintk+0x1ae>
   1f7a6:	287a      	cmp	r0, #122	; 0x7a
   1f7a8:	e7db      	b.n	1f762 <_vprintk+0x8e>
				if (min_width < 0 && padding == PAD_NONE) {
   1f7aa:	f1b8 0f00 	cmp.w	r8, #0
   1f7ae:	da0b      	bge.n	1f7c8 <_vprintk+0xf4>
   1f7b0:	2f00      	cmp	r7, #0
   1f7b2:	f000 80dc 	beq.w	1f96e <_vprintk+0x29a>
					min_width = *fmt - '0';
   1f7b6:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1f7ba:	2f00      	cmp	r7, #0
   1f7bc:	bf08      	it	eq
   1f7be:	2702      	moveq	r7, #2
   1f7c0:	e7a0      	b.n	1f704 <_vprintk+0x30>
				if (min_width < 0) {
   1f7c2:	f1b8 0f00 	cmp.w	r8, #0
   1f7c6:	dbf6      	blt.n	1f7b6 <_vprintk+0xe2>
					min_width = 10 * min_width + *fmt - '0';
   1f7c8:	220a      	movs	r2, #10
   1f7ca:	fb02 0808 	mla	r8, r2, r8, r0
   1f7ce:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   1f7d2:	e7f2      	b.n	1f7ba <_vprintk+0xe6>
				long_ctr++;
   1f7d4:	f109 0901 	add.w	r9, r9, #1
   1f7d8:	e794      	b.n	1f704 <_vprintk+0x30>
				if (long_ctr == 0) {
   1f7da:	f1b9 0f00 	cmp.w	r9, #0
   1f7de:	d114      	bne.n	1f80a <_vprintk+0x136>
					long ld = va_arg(ap, long);
   1f7e0:	f854 ab04 	ldr.w	sl, [r4], #4
				if (d < 0) {
   1f7e4:	f1ba 0f00 	cmp.w	sl, #0
   1f7e8:	da06      	bge.n	1f7f8 <_vprintk+0x124>
					out((int)'-', ctx);
   1f7ea:	4631      	mov	r1, r6
   1f7ec:	202d      	movs	r0, #45	; 0x2d
   1f7ee:	47a8      	blx	r5
					d = -d;
   1f7f0:	f1ca 0a00 	rsb	sl, sl, #0
					min_width--;
   1f7f4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1f7f8:	f8cd 8000 	str.w	r8, [sp]
   1f7fc:	463b      	mov	r3, r7
   1f7fe:	4652      	mov	r2, sl
				_printk_dec_ulong(out, ctx, u, padding,
   1f800:	4631      	mov	r1, r6
   1f802:	4628      	mov	r0, r5
   1f804:	f7e3 fafc 	bl	2e00 <_printk_dec_ulong>
				break;
   1f808:	e771      	b.n	1f6ee <_vprintk+0x1a>
				} else if (long_ctr == 1) {
   1f80a:	f1b9 0f01 	cmp.w	r9, #1
   1f80e:	d0e7      	beq.n	1f7e0 <_vprintk+0x10c>
					long long lld = va_arg(ap, long long);
   1f810:	3407      	adds	r4, #7
   1f812:	f024 0407 	bic.w	r4, r4, #7
   1f816:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
					if (lld > INT32_MAX ||
   1f81a:	f11a 4300 	adds.w	r3, sl, #2147483648	; 0x80000000
   1f81e:	9306      	str	r3, [sp, #24]
   1f820:	f14b 0300 	adc.w	r3, fp, #0
   1f824:	9307      	str	r3, [sp, #28]
   1f826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f82a:	2300      	movs	r3, #0
   1f82c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f830:	428b      	cmp	r3, r1
   1f832:	bf08      	it	eq
   1f834:	4282      	cmpeq	r2, r0
   1f836:	d2d5      	bcs.n	1f7e4 <_vprintk+0x110>
						print_err(out, ctx);
   1f838:	4631      	mov	r1, r6
   1f83a:	4628      	mov	r0, r5
   1f83c:	f7ff ff29 	bl	1f692 <print_err>
   1f840:	e755      	b.n	1f6ee <_vprintk+0x1a>
				if (long_ctr == 0) {
   1f842:	f1b9 0f00 	cmp.w	r9, #0
   1f846:	d105      	bne.n	1f854 <_vprintk+0x180>
					long lu = va_arg(ap, unsigned long);
   1f848:	f854 2b04 	ldr.w	r2, [r4], #4
				_printk_dec_ulong(out, ctx, u, padding,
   1f84c:	f8cd 8000 	str.w	r8, [sp]
   1f850:	463b      	mov	r3, r7
   1f852:	e7d5      	b.n	1f800 <_vprintk+0x12c>
				} else if (long_ctr == 1) {
   1f854:	f1b9 0f01 	cmp.w	r9, #1
   1f858:	d0f6      	beq.n	1f848 <_vprintk+0x174>
					unsigned long long llu =
   1f85a:	3407      	adds	r4, #7
   1f85c:	f024 0407 	bic.w	r4, r4, #7
   1f860:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > INT32_MAX) {
   1f864:	2b00      	cmp	r3, #0
   1f866:	bf08      	it	eq
   1f868:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
   1f86c:	d3ee      	bcc.n	1f84c <_vprintk+0x178>
   1f86e:	e7e3      	b.n	1f838 <_vprintk+0x164>
				  out('0', ctx);
   1f870:	4631      	mov	r1, r6
   1f872:	2030      	movs	r0, #48	; 0x30
   1f874:	47a8      	blx	r5
				  out('x', ctx);
   1f876:	4631      	mov	r1, r6
   1f878:	2078      	movs	r0, #120	; 0x78
   1f87a:	47a8      	blx	r5
				  min_width = 8;
   1f87c:	f04f 0808 	mov.w	r8, #8
				  padding = PAD_ZERO_BEFORE;
   1f880:	2701      	movs	r7, #1
				if (long_ctr < 2) {
   1f882:	f1b9 0f01 	cmp.w	r9, #1
   1f886:	dc26      	bgt.n	1f8d6 <_vprintk+0x202>
					x = va_arg(ap, unsigned long);
   1f888:	f854 3b04 	ldr.w	r3, [r4], #4
   1f88c:	9308      	str	r3, [sp, #32]
   1f88e:	2300      	movs	r3, #0
	int remaining = 16; /* 16 digits max */
   1f890:	2210      	movs	r2, #16
	int digits = 0;
   1f892:	f04f 0a00 	mov.w	sl, #0
					x = va_arg(ap, unsigned long long);
   1f896:	9304      	str	r3, [sp, #16]
	int found_largest_digit = 0;
   1f898:	f8cd a014 	str.w	sl, [sp, #20]
	int size = sizeof(num) * 2;
   1f89c:	4611      	mov	r1, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   1f89e:	1e4b      	subs	r3, r1, #1
   1f8a0:	0098      	lsls	r0, r3, #2
   1f8a2:	9302      	str	r3, [sp, #8]
   1f8a4:	9b08      	ldr	r3, [sp, #32]
   1f8a6:	f1c0 0e20 	rsb	lr, r0, #32
   1f8aa:	f1a0 0c20 	sub.w	ip, r0, #32
   1f8ae:	fa23 f000 	lsr.w	r0, r3, r0
   1f8b2:	9b04      	ldr	r3, [sp, #16]
   1f8b4:	fa03 fe0e 	lsl.w	lr, r3, lr
   1f8b8:	ea40 000e 	orr.w	r0, r0, lr
   1f8bc:	fa23 fc0c 	lsr.w	ip, r3, ip
   1f8c0:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble || found_largest_digit || size == 1) {
   1f8c4:	f010 000f 	ands.w	r0, r0, #15
   1f8c8:	d112      	bne.n	1f8f0 <_vprintk+0x21c>
   1f8ca:	9b05      	ldr	r3, [sp, #20]
   1f8cc:	b90b      	cbnz	r3, 1f8d2 <_vprintk+0x1fe>
   1f8ce:	2901      	cmp	r1, #1
   1f8d0:	d12c      	bne.n	1f92c <_vprintk+0x258>
			nibble += nibble > 9 ? 87 : 48;
   1f8d2:	2130      	movs	r1, #48	; 0x30
   1f8d4:	e010      	b.n	1f8f8 <_vprintk+0x224>
					x = va_arg(ap, unsigned long long);
   1f8d6:	3407      	adds	r4, #7
   1f8d8:	f024 0207 	bic.w	r2, r4, #7
   1f8dc:	4614      	mov	r4, r2
   1f8de:	f854 3b08 	ldr.w	r3, [r4], #8
   1f8e2:	9308      	str	r3, [sp, #32]
   1f8e4:	6853      	ldr	r3, [r2, #4]
   1f8e6:	e7d3      	b.n	1f890 <_vprintk+0x1bc>
			found_largest_digit = 1;
   1f8e8:	f8cd b014 	str.w	fp, [sp, #20]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   1f8ec:	9902      	ldr	r1, [sp, #8]
   1f8ee:	e7d6      	b.n	1f89e <_vprintk+0x1ca>
			nibble += nibble > 9 ? 87 : 48;
   1f8f0:	2809      	cmp	r0, #9
   1f8f2:	bf8c      	ite	hi
   1f8f4:	2157      	movhi	r1, #87	; 0x57
   1f8f6:	2130      	movls	r1, #48	; 0x30
   1f8f8:	4408      	add	r0, r1
			out((int)nibble, ctx);
   1f8fa:	b240      	sxtb	r0, r0
   1f8fc:	4631      	mov	r1, r6
   1f8fe:	9205      	str	r2, [sp, #20]
   1f900:	47a8      	blx	r5
	for (; size; size--) {
   1f902:	9b02      	ldr	r3, [sp, #8]
   1f904:	9a05      	ldr	r2, [sp, #20]
			digits++;
   1f906:	f10a 0a01 	add.w	sl, sl, #1
	for (; size; size--) {
   1f90a:	2b00      	cmp	r3, #0
   1f90c:	d1ec      	bne.n	1f8e8 <_vprintk+0x214>
	if (padding == PAD_SPACE_AFTER) {
   1f90e:	2f03      	cmp	r7, #3
   1f910:	f47f aeed 	bne.w	1f6ee <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   1f914:	ebca 0a48 	rsb	sl, sl, r8, lsl #1
		while (remaining-- > 0) {
   1f918:	f1ba 0f00 	cmp.w	sl, #0
   1f91c:	f77f aee7 	ble.w	1f6ee <_vprintk+0x1a>
			out(' ', ctx);
   1f920:	4631      	mov	r1, r6
   1f922:	2020      	movs	r0, #32
   1f924:	47a8      	blx	r5
   1f926:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1f92a:	e7f5      	b.n	1f918 <_vprintk+0x244>
		if (remaining-- <= min_width) {
   1f92c:	1e53      	subs	r3, r2, #1
   1f92e:	4590      	cmp	r8, r2
   1f930:	9309      	str	r3, [sp, #36]	; 0x24
   1f932:	db04      	blt.n	1f93e <_vprintk+0x26a>
			if (padding == PAD_ZERO_BEFORE) {
   1f934:	2f01      	cmp	r7, #1
   1f936:	d104      	bne.n	1f942 <_vprintk+0x26e>
				out('0', ctx);
   1f938:	4631      	mov	r1, r6
   1f93a:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   1f93c:	47a8      	blx	r5
					x = va_arg(ap, unsigned long);
   1f93e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f940:	e7d4      	b.n	1f8ec <_vprintk+0x218>
			} else if (padding == PAD_SPACE_BEFORE) {
   1f942:	2f02      	cmp	r7, #2
   1f944:	d1fb      	bne.n	1f93e <_vprintk+0x26a>
				out(' ', ctx);
   1f946:	4631      	mov	r1, r6
   1f948:	2020      	movs	r0, #32
   1f94a:	e7f7      	b.n	1f93c <_vprintk+0x268>
					out((int)(*s++), ctx);
   1f94c:	4631      	mov	r1, r6
   1f94e:	47a8      	blx	r5
   1f950:	e711      	b.n	1f776 <_vprintk+0xa2>
				out(c, ctx);
   1f952:	f854 0b04 	ldr.w	r0, [r4], #4
   1f956:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   1f958:	47a8      	blx	r5
				break;
   1f95a:	e6c8      	b.n	1f6ee <_vprintk+0x1a>
				long_ctr = 0;
   1f95c:	46d9      	mov	r9, fp
				padding = PAD_NONE;
   1f95e:	465f      	mov	r7, fp
				min_width = -1;
   1f960:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
   1f964:	f04f 0b01 	mov.w	fp, #1
   1f968:	e6cc      	b.n	1f704 <_vprintk+0x30>
				padding = PAD_SPACE_AFTER;
   1f96a:	2703      	movs	r7, #3
   1f96c:	e6ca      	b.n	1f704 <_vprintk+0x30>
					padding = PAD_ZERO_BEFORE;
   1f96e:	2701      	movs	r7, #1
   1f970:	e6c8      	b.n	1f704 <_vprintk+0x30>
			might_format = 0;
   1f972:	4683      	mov	fp, r0
		++fmt;
   1f974:	e6c6      	b.n	1f704 <_vprintk+0x30>

0001f976 <printk>:
{
   1f976:	b40f      	push	{r0, r1, r2, r3}
   1f978:	b507      	push	{r0, r1, r2, lr}
   1f97a:	a904      	add	r1, sp, #16
   1f97c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1f980:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1f982:	f7e3 fa93 	bl	2eac <vprintk>
}
   1f986:	b003      	add	sp, #12
   1f988:	f85d eb04 	ldr.w	lr, [sp], #4
   1f98c:	b004      	add	sp, #16
   1f98e:	4770      	bx	lr

0001f990 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
   1f990:	4770      	bx	lr

0001f992 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   1f992:	428b      	cmp	r3, r1
{
   1f994:	b538      	push	{r3, r4, r5, lr}
   1f996:	4615      	mov	r5, r2
   1f998:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1f99a:	d805      	bhi.n	1f9a8 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1f99c:	461a      	mov	r2, r3
   1f99e:	4629      	mov	r1, r5
   1f9a0:	f002 fa71 	bl	21e86 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1f9a4:	4620      	mov	r0, r4
   1f9a6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1f9a8:	2400      	movs	r4, #0
   1f9aa:	e7fb      	b.n	1f9a4 <_copy+0x12>

0001f9ac <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1f9ac:	f002 ba95 	b.w	21eda <memset>

0001f9b0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1f9b0:	09c3      	lsrs	r3, r0, #7
   1f9b2:	005a      	lsls	r2, r3, #1
   1f9b4:	4413      	add	r3, r2
   1f9b6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1f9ba:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1f9be:	b2c0      	uxtb	r0, r0
   1f9c0:	4770      	bx	lr

0001f9c2 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1f9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9c6:	4606      	mov	r6, r0
   1f9c8:	b0a8      	sub	sp, #160	; 0xa0
   1f9ca:	460f      	mov	r7, r1
   1f9cc:	4614      	mov	r4, r2
   1f9ce:	2540      	movs	r5, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1f9d0:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1f9d4:	f7e3 fabe 	bl	2f54 <uECC_get_rng>
		if (!rng_function ||
   1f9d8:	4603      	mov	r3, r0
   1f9da:	2800      	cmp	r0, #0
   1f9dc:	d03d      	beq.n	1fa5a <uECC_make_key+0x98>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1f9de:	2140      	movs	r1, #64	; 0x40
   1f9e0:	a808      	add	r0, sp, #32
   1f9e2:	4798      	blx	r3
		if (!rng_function ||
   1f9e4:	b3c8      	cbz	r0, 1fa5a <uECC_make_key+0x98>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1f9e6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1f9ea:	f112 031f 	adds.w	r3, r2, #31
   1f9ee:	bf48      	it	mi
   1f9f0:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1f9f4:	a908      	add	r1, sp, #32
   1f9f6:	4642      	mov	r2, r8
   1f9f8:	4668      	mov	r0, sp
   1f9fa:	f343 1347 	sbfx	r3, r3, #5, #8
   1f9fe:	f000 fa00 	bl	1fe02 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1fa02:	4622      	mov	r2, r4
   1fa04:	4669      	mov	r1, sp
   1fa06:	a818      	add	r0, sp, #96	; 0x60
   1fa08:	f000 fe16 	bl	20638 <EccPoint_compute_public_key>
   1fa0c:	b318      	cbz	r0, 1fa56 <uECC_make_key+0x94>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1fa0e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1fa12:	1dd9      	adds	r1, r3, #7
   1fa14:	bf48      	it	mi
   1fa16:	f103 010e 	addmi.w	r1, r3, #14
   1fa1a:	466a      	mov	r2, sp
   1fa1c:	10c9      	asrs	r1, r1, #3
   1fa1e:	4638      	mov	r0, r7
   1fa20:	f000 fe32 	bl	20688 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1fa24:	aa18      	add	r2, sp, #96	; 0x60
   1fa26:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1fa2a:	4630      	mov	r0, r6
   1fa2c:	f000 fe2c 	bl	20688 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1fa30:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1fa34:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1fa38:	ab18      	add	r3, sp, #96	; 0x60
   1fa3a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1fa3e:	1870      	adds	r0, r6, r1
   1fa40:	f000 fe22 	bl	20688 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			memset(_private, 0, NUM_ECC_BYTES);
   1fa44:	2220      	movs	r2, #32
   1fa46:	2100      	movs	r1, #0
   1fa48:	4668      	mov	r0, sp
   1fa4a:	f002 fa46 	bl	21eda <memset>

      			return 1;
   1fa4e:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1fa50:	b028      	add	sp, #160	; 0xa0
   1fa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1fa56:	3d01      	subs	r5, #1
   1fa58:	d1bc      	bne.n	1f9d4 <uECC_make_key+0x12>
        		return 0;
   1fa5a:	2000      	movs	r0, #0
   1fa5c:	e7f8      	b.n	1fa50 <uECC_make_key+0x8e>

0001fa5e <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1fa5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fa62:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1fa64:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1fa68:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1fa6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1fa70:	b0a4      	sub	sp, #144	; 0x90
   1fa72:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1fa74:	1dda      	adds	r2, r3, #7
   1fa76:	bf48      	it	mi
   1fa78:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1fa7c:	ad04      	add	r5, sp, #16
{
   1fa7e:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1fa80:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1fa82:	4628      	mov	r0, r5
   1fa84:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1fa86:	9502      	str	r5, [sp, #8]
   1fa88:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1fa8a:	f000 fe11 	bl	206b0 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1fa8e:	463a      	mov	r2, r7
   1fa90:	4649      	mov	r1, r9
   1fa92:	a814      	add	r0, sp, #80	; 0x50
   1fa94:	f000 fe0c 	bl	206b0 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1fa98:	ab14      	add	r3, sp, #80	; 0x50
   1fa9a:	eb09 0107 	add.w	r1, r9, r7
   1fa9e:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1faa2:	463a      	mov	r2, r7
   1faa4:	f000 fe04 	bl	206b0 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1faa8:	4623      	mov	r3, r4
   1faaa:	4632      	mov	r2, r6
   1faac:	4629      	mov	r1, r5
   1faae:	4628      	mov	r0, r5
   1fab0:	f000 fd95 	bl	205de <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1fab4:	fab0 f080 	clz	r0, r0
   1fab8:	9401      	str	r4, [sp, #4]
   1faba:	ab24      	add	r3, sp, #144	; 0x90
   1fabc:	0940      	lsrs	r0, r0, #5
   1fabe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1fac2:	8863      	ldrh	r3, [r4, #2]
   1fac4:	3301      	adds	r3, #1
   1fac6:	b21b      	sxth	r3, r3
   1fac8:	9300      	str	r3, [sp, #0]
   1faca:	a914      	add	r1, sp, #80	; 0x50
   1facc:	2300      	movs	r3, #0
   1face:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1fad2:	4608      	mov	r0, r1
   1fad4:	f000 fcb4 	bl	20440 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1fad8:	aa14      	add	r2, sp, #80	; 0x50
   1fada:	4639      	mov	r1, r7
   1fadc:	4640      	mov	r0, r8
   1fade:	f000 fdd3 	bl	20688 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1fae2:	4621      	mov	r1, r4
   1fae4:	a814      	add	r0, sp, #80	; 0x50
   1fae6:	f000 fc22 	bl	2032e <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	memset(p2, 0, sizeof(p2));
   1faea:	ac02      	add	r4, sp, #8
	r = !EccPoint_isZero(_public, curve);
   1faec:	4607      	mov	r7, r0
	memset(p2, 0, sizeof(p2));
   1faee:	2208      	movs	r2, #8
   1faf0:	2100      	movs	r1, #0
   1faf2:	4620      	mov	r0, r4
   1faf4:	f002 f9f1 	bl	21eda <memset>
	__asm__ __volatile__("" :: "g"(p2) : "memory");
	memset(tmp, 0, sizeof(tmp));
   1faf8:	2220      	movs	r2, #32
   1fafa:	2100      	movs	r1, #0
   1fafc:	4630      	mov	r0, r6
   1fafe:	f002 f9ec 	bl	21eda <memset>
	__asm__ __volatile__("" :: "g"(tmp) : "memory");
	memset(_private, 0, sizeof(_private));
   1fb02:	2220      	movs	r2, #32
   1fb04:	2100      	movs	r1, #0
   1fb06:	4628      	mov	r0, r5
   1fb08:	f002 f9e7 	bl	21eda <memset>
	__asm__ __volatile__("" :: "g"(_private) : "memory");

	return r;
}
   1fb0c:	fab7 f087 	clz	r0, r7
   1fb10:	0940      	lsrs	r0, r0, #5
   1fb12:	b024      	add	sp, #144	; 0x90
   1fb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001fb18 <uECC_vli_add>:
{
   1fb18:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1fb1a:	2400      	movs	r4, #0
{
   1fb1c:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   1fb1e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1fb20:	b265      	sxtb	r5, r4
   1fb22:	42ab      	cmp	r3, r5
   1fb24:	dc00      	bgt.n	1fb28 <uECC_vli_add+0x10>
}
   1fb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1fb28:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   1fb2c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1fb30:	4435      	add	r5, r6
   1fb32:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1fb34:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   1fb36:	bf8c      	ite	hi
   1fb38:	2601      	movhi	r6, #1
   1fb3a:	2600      	movls	r6, #0
		result[i] = sum;
   1fb3c:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1fb40:	bf18      	it	ne
   1fb42:	4630      	movne	r0, r6
		result[i] = sum;
   1fb44:	3401      	adds	r4, #1
   1fb46:	e7eb      	b.n	1fb20 <uECC_vli_add+0x8>

0001fb48 <uECC_vli_rshift1>:
	vli += num_words;
   1fb48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1fb4c:	2300      	movs	r3, #0
	while (vli-- > end) {
   1fb4e:	4288      	cmp	r0, r1
   1fb50:	d300      	bcc.n	1fb54 <uECC_vli_rshift1+0xc>
}
   1fb52:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1fb54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1fb58:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1fb5c:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1fb5e:	07d3      	lsls	r3, r2, #31
   1fb60:	e7f5      	b.n	1fb4e <uECC_vli_rshift1+0x6>

0001fb62 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1fb62:	6803      	ldr	r3, [r0, #0]
{
   1fb64:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1fb66:	f013 0601 	ands.w	r6, r3, #1
{
   1fb6a:	4605      	mov	r5, r0
   1fb6c:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1fb6e:	d005      	beq.n	1fb7c <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1fb70:	4613      	mov	r3, r2
   1fb72:	460a      	mov	r2, r1
   1fb74:	4601      	mov	r1, r0
   1fb76:	f7ff ffcf 	bl	1fb18 <uECC_vli_add>
   1fb7a:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1fb7c:	4621      	mov	r1, r4
   1fb7e:	4628      	mov	r0, r5
   1fb80:	f7ff ffe2 	bl	1fb48 <uECC_vli_rshift1>
	if (carry) {
   1fb84:	b146      	cbz	r6, 1fb98 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1fb86:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1fb8a:	3a01      	subs	r2, #1
   1fb8c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1fb90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1fb94:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1fb98:	bd70      	pop	{r4, r5, r6, pc}

0001fb9a <uECC_vli_mult>:
{
   1fb9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1fb9e:	2500      	movs	r5, #0
{
   1fba0:	b087      	sub	sp, #28
   1fba2:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1fba6:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1fba8:	462a      	mov	r2, r5
   1fbaa:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   1fbae:	4543      	cmp	r3, r8
   1fbb0:	dc16      	bgt.n	1fbe0 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1fbb2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1fbb6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1fbba:	9502      	str	r5, [sp, #8]
   1fbbc:	f04f 0a00 	mov.w	sl, #0
   1fbc0:	fa5f f58a 	uxtb.w	r5, sl
   1fbc4:	eb05 0c03 	add.w	ip, r5, r3
   1fbc8:	9e02      	ldr	r6, [sp, #8]
   1fbca:	fa4f fc8c 	sxtb.w	ip, ip
   1fbce:	45b4      	cmp	ip, r6
   1fbd0:	db2d      	blt.n	1fc2e <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1fbd2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1fbd6:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1fbda:	b007      	add	sp, #28
   1fbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbe0:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1fbe2:	f04f 0c00 	mov.w	ip, #0
   1fbe6:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1fbea:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1fbec:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1fbf0:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1fbf2:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1fbf6:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1fbfa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1fbfe:	fba7 ab06 	umull	sl, fp, r7, r6
   1fc02:	eb1a 0601 	adds.w	r6, sl, r1
   1fc06:	f10c 0c01 	add.w	ip, ip, #1
   1fc0a:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1fc0e:	fa4f fa8c 	sxtb.w	sl, ip
   1fc12:	bf2c      	ite	cs
   1fc14:	2201      	movcs	r2, #1
   1fc16:	2200      	movcc	r2, #0
   1fc18:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1fc1a:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1fc1c:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1fc1e:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1fc20:	dde4      	ble.n	1fbec <uECC_vli_mult+0x52>
		result[k] = r0;
   1fc22:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1fc26:	463a      	mov	r2, r7
   1fc28:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1fc2a:	4674      	mov	r4, lr
   1fc2c:	e7bd      	b.n	1fbaa <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1fc2e:	3501      	adds	r5, #1
   1fc30:	b26d      	sxtb	r5, r5
   1fc32:	9e01      	ldr	r6, [sp, #4]
   1fc34:	9900      	ldr	r1, [sp, #0]
   1fc36:	ebac 0e05 	sub.w	lr, ip, r5
   1fc3a:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   1fc3e:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   1fc42:	4626      	mov	r6, r4
   1fc44:	2400      	movs	r4, #0
   1fc46:	429d      	cmp	r5, r3
   1fc48:	db05      	blt.n	1fc56 <uECC_vli_mult+0xbc>
		result[k] = r0;
   1fc4a:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   1fc4e:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1fc52:	4632      	mov	r2, r6
   1fc54:	e7b4      	b.n	1fbc0 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1fc56:	e9cd 2604 	strd	r2, r6, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1fc5a:	f85e 7904 	ldr.w	r7, [lr], #-4
   1fc5e:	f85b 8b04 	ldr.w	r8, [fp], #4
	r01 += p;
   1fc62:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1fc66:	fba8 8907 	umull	r8, r9, r8, r7
   1fc6a:	eb18 0601 	adds.w	r6, r8, r1
   1fc6e:	eb59 0702 	adcs.w	r7, r9, r2
   1fc72:	bf2c      	ite	cs
   1fc74:	2201      	movcs	r2, #1
   1fc76:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1fc78:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1fc7a:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1fc7c:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   1fc7e:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   1fc80:	463e      	mov	r6, r7
   1fc82:	e7e0      	b.n	1fc46 <uECC_vli_mult+0xac>

0001fc84 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1fc84:	2300      	movs	r3, #0
{
   1fc86:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1fc88:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1fc8a:	b25a      	sxtb	r2, r3
   1fc8c:	4291      	cmp	r1, r2
   1fc8e:	dc00      	bgt.n	1fc92 <uECC_vli_clear+0xe>
}
   1fc90:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1fc92:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   1fc96:	3301      	adds	r3, #1
   1fc98:	e7f7      	b.n	1fc8a <uECC_vli_clear+0x6>

0001fc9a <uECC_vli_isZero>:
{
   1fc9a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1fc9c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1fc9e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1fca0:	b25c      	sxtb	r4, r3
   1fca2:	42a1      	cmp	r1, r4
   1fca4:	dc03      	bgt.n	1fcae <uECC_vli_isZero+0x14>
}
   1fca6:	fab2 f082 	clz	r0, r2
   1fcaa:	0940      	lsrs	r0, r0, #5
   1fcac:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1fcae:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1fcb2:	3301      	adds	r3, #1
   1fcb4:	4322      	orrs	r2, r4
   1fcb6:	e7f3      	b.n	1fca0 <uECC_vli_isZero+0x6>

0001fcb8 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1fcb8:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1fcba:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1fcbc:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1fcc0:	f001 011f 	and.w	r1, r1, #31
   1fcc4:	fa03 f101 	lsl.w	r1, r3, r1
}
   1fcc8:	4008      	ands	r0, r1
   1fcca:	4770      	bx	lr

0001fccc <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1fccc:	3901      	subs	r1, #1
   1fcce:	b249      	sxtb	r1, r1
   1fcd0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   1fcd4:	2900      	cmp	r1, #0
   1fcd6:	da04      	bge.n	1fce2 <uECC_vli_numBits+0x16>
	return (i + 1);
   1fcd8:	3101      	adds	r1, #1
   1fcda:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   1fcdc:	b941      	cbnz	r1, 1fcf0 <uECC_vli_numBits+0x24>
		return 0;
   1fcde:	4608      	mov	r0, r1
}
   1fce0:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1fce2:	f853 2904 	ldr.w	r2, [r3], #-4
   1fce6:	2a00      	cmp	r2, #0
   1fce8:	d1f6      	bne.n	1fcd8 <uECC_vli_numBits+0xc>
   1fcea:	3901      	subs	r1, #1
   1fcec:	b249      	sxtb	r1, r1
   1fcee:	e7f1      	b.n	1fcd4 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   1fcf0:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   1fcf4:	3b01      	subs	r3, #1
   1fcf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1fcfa:	2000      	movs	r0, #0
   1fcfc:	b923      	cbnz	r3, 1fd08 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1fcfe:	3901      	subs	r1, #1
   1fd00:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   1fd04:	b208      	sxth	r0, r1
   1fd06:	4770      	bx	lr
		digit >>= 1;
   1fd08:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   1fd0a:	3001      	adds	r0, #1
   1fd0c:	e7f6      	b.n	1fcfc <uECC_vli_numBits+0x30>

0001fd0e <uECC_vli_set>:
{
   1fd0e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1fd10:	2300      	movs	r3, #0
   1fd12:	b25c      	sxtb	r4, r3
   1fd14:	42a2      	cmp	r2, r4
   1fd16:	dc00      	bgt.n	1fd1a <uECC_vli_set+0xc>
}
   1fd18:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1fd1a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1fd1e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   1fd22:	3301      	adds	r3, #1
   1fd24:	e7f5      	b.n	1fd12 <uECC_vli_set+0x4>

0001fd26 <uECC_vli_cmp_unsafe>:
{
   1fd26:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1fd28:	3a01      	subs	r2, #1
   1fd2a:	b252      	sxtb	r2, r2
   1fd2c:	0093      	lsls	r3, r2, #2
   1fd2e:	2a00      	cmp	r2, #0
   1fd30:	da01      	bge.n	1fd36 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1fd32:	2000      	movs	r0, #0
}
   1fd34:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1fd36:	58c5      	ldr	r5, [r0, r3]
   1fd38:	58cc      	ldr	r4, [r1, r3]
   1fd3a:	42a5      	cmp	r5, r4
   1fd3c:	d805      	bhi.n	1fd4a <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1fd3e:	f1a3 0304 	sub.w	r3, r3, #4
   1fd42:	d304      	bcc.n	1fd4e <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1fd44:	3a01      	subs	r2, #1
   1fd46:	b252      	sxtb	r2, r2
   1fd48:	e7f1      	b.n	1fd2e <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1fd4a:	2001      	movs	r0, #1
   1fd4c:	e7f2      	b.n	1fd34 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1fd4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fd52:	e7ef      	b.n	1fd34 <uECC_vli_cmp_unsafe+0xe>

0001fd54 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1fd54:	3a01      	subs	r2, #1
   1fd56:	b252      	sxtb	r2, r2
{
   1fd58:	b570      	push	{r4, r5, r6, lr}
   1fd5a:	0093      	lsls	r3, r2, #2
	uECC_word_t diff = 0;
   1fd5c:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1fd5e:	2a00      	cmp	r2, #0
   1fd60:	da03      	bge.n	1fd6a <uECC_vli_equal+0x16>
}
   1fd62:	1c20      	adds	r0, r4, #0
   1fd64:	bf18      	it	ne
   1fd66:	2001      	movne	r0, #1
   1fd68:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1fd6a:	58c5      	ldr	r5, [r0, r3]
   1fd6c:	58ce      	ldr	r6, [r1, r3]
	for (i = num_words - 1; i >= 0; --i) {
   1fd6e:	3a01      	subs	r2, #1
		diff |= (left[i] ^ right[i]);
   1fd70:	4075      	eors	r5, r6
   1fd72:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1fd74:	b252      	sxtb	r2, r2
   1fd76:	3b04      	subs	r3, #4
   1fd78:	e7f1      	b.n	1fd5e <uECC_vli_equal+0xa>

0001fd7a <uECC_vli_sub>:
{
   1fd7a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1fd7c:	2400      	movs	r4, #0
{
   1fd7e:	4607      	mov	r7, r0
   1fd80:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1fd82:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1fd84:	b265      	sxtb	r5, r4
   1fd86:	45ac      	cmp	ip, r5
   1fd88:	dc00      	bgt.n	1fd8c <uECC_vli_sub+0x12>
}
   1fd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1fd8c:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   1fd90:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1fd94:	1a35      	subs	r5, r6, r0
   1fd96:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1fd98:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   1fd9a:	bf34      	ite	cc
   1fd9c:	2601      	movcc	r6, #1
   1fd9e:	2600      	movcs	r6, #0
		result[i] = diff;
   1fda0:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1fda4:	bf18      	it	ne
   1fda6:	4630      	movne	r0, r6
		result[i] = diff;
   1fda8:	3401      	adds	r4, #1
   1fdaa:	e7eb      	b.n	1fd84 <uECC_vli_sub+0xa>

0001fdac <uECC_vli_modAdd>:
{
   1fdac:	b570      	push	{r4, r5, r6, lr}
   1fdae:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   1fdb2:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1fdb4:	4623      	mov	r3, r4
{
   1fdb6:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1fdb8:	f7ff feae 	bl	1fb18 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1fdbc:	b930      	cbnz	r0, 1fdcc <uECC_vli_modAdd+0x20>
   1fdbe:	4622      	mov	r2, r4
   1fdc0:	4629      	mov	r1, r5
   1fdc2:	4630      	mov	r0, r6
   1fdc4:	f7ff ffaf 	bl	1fd26 <uECC_vli_cmp_unsafe>
   1fdc8:	2801      	cmp	r0, #1
   1fdca:	d007      	beq.n	1fddc <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1fdcc:	4623      	mov	r3, r4
   1fdce:	4632      	mov	r2, r6
   1fdd0:	4629      	mov	r1, r5
   1fdd2:	4628      	mov	r0, r5
}
   1fdd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1fdd8:	f7ff bfcf 	b.w	1fd7a <uECC_vli_sub>
}
   1fddc:	bd70      	pop	{r4, r5, r6, pc}

0001fdde <uECC_vli_modSub>:
{
   1fdde:	b570      	push	{r4, r5, r6, lr}
   1fde0:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   1fde4:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1fde6:	4623      	mov	r3, r4
{
   1fde8:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1fdea:	f7ff ffc6 	bl	1fd7a <uECC_vli_sub>
	if (l_borrow) {
   1fdee:	b138      	cbz	r0, 1fe00 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1fdf0:	4623      	mov	r3, r4
   1fdf2:	4632      	mov	r2, r6
   1fdf4:	4629      	mov	r1, r5
   1fdf6:	4628      	mov	r0, r5
}
   1fdf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1fdfc:	f7ff be8c 	b.w	1fb18 <uECC_vli_add>
}
   1fe00:	bd70      	pop	{r4, r5, r6, pc}

0001fe02 <uECC_vli_mmod>:
{
   1fe02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe06:	b0a5      	sub	sp, #148	; 0x94
   1fe08:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1fe0a:	ab14      	add	r3, sp, #80	; 0x50
   1fe0c:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1fe10:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   1fe12:	4629      	mov	r1, r5
   1fe14:	4610      	mov	r0, r2
{
   1fe16:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   1fe18:	f7ff ff58 	bl	1fccc <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1fe1c:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   1fe20:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1fe22:	2c00      	cmp	r4, #0
   1fe24:	4626      	mov	r6, r4
   1fe26:	bfb8      	it	lt
   1fe28:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1fe2c:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1fe2e:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1fe32:	f003 031f 	and.w	r3, r3, #31
   1fe36:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1fe3a:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1fe3c:	bf58      	it	pl
   1fe3e:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   1fe42:	4631      	mov	r1, r6
   1fe44:	f7ff ff1e 	bl	1fc84 <uECC_vli_clear>
	if (bit_shift > 0) {
   1fe48:	f1b8 0f00 	cmp.w	r8, #0
   1fe4c:	b230      	sxth	r0, r6
   1fe4e:	dd2d      	ble.n	1feac <uECC_vli_mmod+0xaa>
   1fe50:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1fe52:	2200      	movs	r2, #0
   1fe54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1fe58:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1fe5c:	4613      	mov	r3, r2
   1fe5e:	429d      	cmp	r5, r3
   1fe60:	d819      	bhi.n	1fe96 <uECC_vli_mmod+0x94>
		for (i = 0; i < num_words * 2; ++i) {
   1fe62:	b22f      	sxth	r7, r5
   1fe64:	007b      	lsls	r3, r7, #1
   1fe66:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1fe68:	ab04      	add	r3, sp, #16
   1fe6a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1fe6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   1fe72:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1fe74:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1fe76:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1fe7a:	2c00      	cmp	r4, #0
   1fe7c:	da54      	bge.n	1ff28 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   1fe7e:	ab24      	add	r3, sp, #144	; 0x90
   1fe80:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1fe84:	462a      	mov	r2, r5
   1fe86:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1fe8a:	4648      	mov	r0, r9
   1fe8c:	f7ff ff3f 	bl	1fd0e <uECC_vli_set>
}
   1fe90:	b025      	add	sp, #148	; 0x94
   1fe92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1fe96:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   1fe9a:	fa06 f108 	lsl.w	r1, r6, r8
   1fe9e:	430a      	orrs	r2, r1
   1fea0:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1fea4:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1fea6:	fa26 f20c 	lsr.w	r2, r6, ip
   1feaa:	e7d8      	b.n	1fe5e <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1feac:	ab04      	add	r3, sp, #16
   1feae:	462a      	mov	r2, r5
   1feb0:	4639      	mov	r1, r7
   1feb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1feb6:	f7ff ff2a 	bl	1fd0e <uECC_vli_set>
   1feba:	e7d2      	b.n	1fe62 <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1febc:	fa0f fe82 	sxth.w	lr, r2
   1fec0:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1fec4:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1fec8:	ab24      	add	r3, sp, #144	; 0x90
   1feca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1fece:	3001      	adds	r0, #1
   1fed0:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1fed4:	440b      	add	r3, r1
   1fed6:	ebbb 0303 	subs.w	r3, fp, r3
   1feda:	bf34      	ite	cc
   1fedc:	2201      	movcc	r2, #1
   1fede:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1fee0:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1fee2:	bf18      	it	ne
   1fee4:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1fee6:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1feea:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1feee:	9b01      	ldr	r3, [sp, #4]
   1fef0:	b242      	sxtb	r2, r0
   1fef2:	429a      	cmp	r2, r3
   1fef4:	dbe2      	blt.n	1febc <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   1fef6:	1a73      	subs	r3, r6, r1
   1fef8:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1fefa:	4629      	mov	r1, r5
   1fefc:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1fefe:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1ff00:	f7ff fe22 	bl	1fb48 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ff04:	ab24      	add	r3, sp, #144	; 0x90
   1ff06:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ff0a:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ff0c:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1ff10:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ff14:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ff16:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1ff1a:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ff1c:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   1ff20:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ff22:	f7ff fe11 	bl	1fb48 <uECC_vli_rshift1>
   1ff26:	e7a8      	b.n	1fe7a <uECC_vli_mmod+0x78>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ff28:	ab24      	add	r3, sp, #144	; 0x90
   1ff2a:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1ff2c:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1ff30:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ff32:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1ff36:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1ff3a:	e7d8      	b.n	1feee <uECC_vli_mmod+0xec>

0001ff3c <uECC_vli_modMult_fast>:
{
   1ff3c:	b530      	push	{r4, r5, lr}
   1ff3e:	461c      	mov	r4, r3
   1ff40:	b091      	sub	sp, #68	; 0x44
   1ff42:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1ff44:	f993 3000 	ldrsb.w	r3, [r3]
   1ff48:	4668      	mov	r0, sp
   1ff4a:	f7ff fe26 	bl	1fb9a <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1ff4e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1ff52:	4669      	mov	r1, sp
   1ff54:	4628      	mov	r0, r5
   1ff56:	4798      	blx	r3
}
   1ff58:	b011      	add	sp, #68	; 0x44
   1ff5a:	bd30      	pop	{r4, r5, pc}

0001ff5c <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   1ff5c:	4613      	mov	r3, r2
   1ff5e:	460a      	mov	r2, r1
   1ff60:	f7ff bfec 	b.w	1ff3c <uECC_vli_modMult_fast>

0001ff64 <double_jacobian_default>:
{
   1ff64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1ff68:	f993 6000 	ldrsb.w	r6, [r3]
{
   1ff6c:	b092      	sub	sp, #72	; 0x48
   1ff6e:	4604      	mov	r4, r0
   1ff70:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1ff72:	4610      	mov	r0, r2
   1ff74:	4631      	mov	r1, r6
{
   1ff76:	4615      	mov	r5, r2
   1ff78:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1ff7a:	f7ff fe8e 	bl	1fc9a <uECC_vli_isZero>
   1ff7e:	2800      	cmp	r0, #0
   1ff80:	f040 8091 	bne.w	200a6 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1ff84:	4642      	mov	r2, r8
   1ff86:	4649      	mov	r1, r9
   1ff88:	a802      	add	r0, sp, #8
   1ff8a:	f7ff ffe7 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1ff8e:	4643      	mov	r3, r8
   1ff90:	aa02      	add	r2, sp, #8
   1ff92:	4621      	mov	r1, r4
   1ff94:	a80a      	add	r0, sp, #40	; 0x28
   1ff96:	f7ff ffd1 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1ff9a:	a902      	add	r1, sp, #8
   1ff9c:	4608      	mov	r0, r1
   1ff9e:	4642      	mov	r2, r8
   1ffa0:	f7ff ffdc 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1ffa4:	4643      	mov	r3, r8
   1ffa6:	462a      	mov	r2, r5
   1ffa8:	4649      	mov	r1, r9
   1ffaa:	4648      	mov	r0, r9
   1ffac:	f7ff ffc6 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1ffb0:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1ffb4:	4642      	mov	r2, r8
   1ffb6:	4629      	mov	r1, r5
   1ffb8:	4628      	mov	r0, r5
   1ffba:	f7ff ffcf 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1ffbe:	463b      	mov	r3, r7
   1ffc0:	462a      	mov	r2, r5
   1ffc2:	4621      	mov	r1, r4
   1ffc4:	4620      	mov	r0, r4
   1ffc6:	9600      	str	r6, [sp, #0]
   1ffc8:	f7ff fef0 	bl	1fdac <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1ffcc:	463b      	mov	r3, r7
   1ffce:	462a      	mov	r2, r5
   1ffd0:	4629      	mov	r1, r5
   1ffd2:	4628      	mov	r0, r5
   1ffd4:	9600      	str	r6, [sp, #0]
   1ffd6:	f7ff fee9 	bl	1fdac <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1ffda:	463b      	mov	r3, r7
   1ffdc:	462a      	mov	r2, r5
   1ffde:	4621      	mov	r1, r4
   1ffe0:	4628      	mov	r0, r5
   1ffe2:	9600      	str	r6, [sp, #0]
   1ffe4:	f7ff fefb 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1ffe8:	4643      	mov	r3, r8
   1ffea:	462a      	mov	r2, r5
   1ffec:	4621      	mov	r1, r4
   1ffee:	4620      	mov	r0, r4
   1fff0:	f7ff ffa4 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1fff4:	463b      	mov	r3, r7
   1fff6:	4622      	mov	r2, r4
   1fff8:	4621      	mov	r1, r4
   1fffa:	4628      	mov	r0, r5
   1fffc:	9600      	str	r6, [sp, #0]
   1fffe:	f7ff fed5 	bl	1fdac <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   20002:	463b      	mov	r3, r7
   20004:	9600      	str	r6, [sp, #0]
   20006:	462a      	mov	r2, r5
   20008:	4621      	mov	r1, r4
   2000a:	4620      	mov	r0, r4
   2000c:	f7ff fece 	bl	1fdac <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20010:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   20012:	07db      	lsls	r3, r3, #31
   20014:	d54a      	bpl.n	200ac <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20016:	4633      	mov	r3, r6
   20018:	463a      	mov	r2, r7
   2001a:	4621      	mov	r1, r4
   2001c:	4620      	mov	r0, r4
   2001e:	f7ff fd7b 	bl	1fb18 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   20022:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20024:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   20026:	4620      	mov	r0, r4
   20028:	f7ff fd8e 	bl	1fb48 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2002c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   20030:	3b01      	subs	r3, #1
   20032:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   20036:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   2003a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2003e:	4642      	mov	r2, r8
   20040:	4621      	mov	r1, r4
   20042:	4628      	mov	r0, r5
   20044:	f7ff ff8a 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   20048:	463b      	mov	r3, r7
   2004a:	aa0a      	add	r2, sp, #40	; 0x28
   2004c:	4629      	mov	r1, r5
   2004e:	4628      	mov	r0, r5
   20050:	9600      	str	r6, [sp, #0]
   20052:	f7ff fec4 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   20056:	463b      	mov	r3, r7
   20058:	aa0a      	add	r2, sp, #40	; 0x28
   2005a:	4629      	mov	r1, r5
   2005c:	4628      	mov	r0, r5
   2005e:	9600      	str	r6, [sp, #0]
   20060:	f7ff febd 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   20064:	a90a      	add	r1, sp, #40	; 0x28
   20066:	4608      	mov	r0, r1
   20068:	463b      	mov	r3, r7
   2006a:	462a      	mov	r2, r5
   2006c:	9600      	str	r6, [sp, #0]
   2006e:	f7ff feb6 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   20072:	4643      	mov	r3, r8
   20074:	aa0a      	add	r2, sp, #40	; 0x28
   20076:	4621      	mov	r1, r4
   20078:	4620      	mov	r0, r4
   2007a:	f7ff ff5f 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2007e:	aa02      	add	r2, sp, #8
   20080:	463b      	mov	r3, r7
   20082:	4610      	mov	r0, r2
   20084:	4621      	mov	r1, r4
   20086:	9600      	str	r6, [sp, #0]
   20088:	f7ff fea9 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2008c:	4632      	mov	r2, r6
   2008e:	4629      	mov	r1, r5
   20090:	4620      	mov	r0, r4
   20092:	f7ff fe3c 	bl	1fd0e <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   20096:	4649      	mov	r1, r9
   20098:	4628      	mov	r0, r5
   2009a:	f7ff fe38 	bl	1fd0e <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2009e:	a902      	add	r1, sp, #8
   200a0:	4648      	mov	r0, r9
   200a2:	f7ff fe34 	bl	1fd0e <uECC_vli_set>
}
   200a6:	b012      	add	sp, #72	; 0x48
   200a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   200ac:	4631      	mov	r1, r6
   200ae:	4620      	mov	r0, r4
   200b0:	f7ff fd4a 	bl	1fb48 <uECC_vli_rshift1>
   200b4:	e7c3      	b.n	2003e <double_jacobian_default+0xda>

000200b6 <x_side_default>:
{
   200b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   200ba:	4615      	mov	r5, r2
   200bc:	b08a      	sub	sp, #40	; 0x28
   200be:	4604      	mov	r4, r0
   200c0:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   200c2:	221c      	movs	r2, #28
   200c4:	2100      	movs	r1, #0
   200c6:	a803      	add	r0, sp, #12
   200c8:	f001 ff07 	bl	21eda <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   200cc:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
   200ce:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   200d2:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   200d4:	462a      	mov	r2, r5
   200d6:	4641      	mov	r1, r8
   200d8:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   200da:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   200dc:	f7ff ff3e 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   200e0:	4633      	mov	r3, r6
   200e2:	aa02      	add	r2, sp, #8
   200e4:	4621      	mov	r1, r4
   200e6:	4620      	mov	r0, r4
   200e8:	9700      	str	r7, [sp, #0]
   200ea:	f7ff fe78 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   200ee:	462b      	mov	r3, r5
   200f0:	4642      	mov	r2, r8
   200f2:	4621      	mov	r1, r4
   200f4:	4620      	mov	r0, r4
   200f6:	f7ff ff21 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   200fa:	9700      	str	r7, [sp, #0]
   200fc:	4633      	mov	r3, r6
   200fe:	f105 0284 	add.w	r2, r5, #132	; 0x84
   20102:	4621      	mov	r1, r4
   20104:	4620      	mov	r0, r4
   20106:	f7ff fe51 	bl	1fdac <uECC_vli_modAdd>
}
   2010a:	b00a      	add	sp, #40	; 0x28
   2010c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020110 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   20110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20114:	b09b      	sub	sp, #108	; 0x6c
   20116:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   20118:	9c22      	ldr	r4, [sp, #136]	; 0x88
   2011a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2011e:	9500      	str	r5, [sp, #0]
{
   20120:	4698      	mov	r8, r3
   20122:	4607      	mov	r7, r0
   20124:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20126:	4623      	mov	r3, r4
   20128:	4602      	mov	r2, r0
   2012a:	4631      	mov	r1, r6
   2012c:	a802      	add	r0, sp, #8
   2012e:	f7ff fe56 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20132:	a902      	add	r1, sp, #8
   20134:	9a22      	ldr	r2, [sp, #136]	; 0x88
   20136:	4608      	mov	r0, r1
   20138:	f7ff ff10 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2013c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2013e:	aa02      	add	r2, sp, #8
   20140:	4639      	mov	r1, r7
   20142:	4638      	mov	r0, r7
   20144:	f7ff fefa 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   20148:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2014a:	aa02      	add	r2, sp, #8
   2014c:	4631      	mov	r1, r6
   2014e:	4630      	mov	r0, r6
   20150:	f7ff fef4 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   20154:	4623      	mov	r3, r4
   20156:	464a      	mov	r2, r9
   20158:	4641      	mov	r1, r8
   2015a:	a802      	add	r0, sp, #8
   2015c:	9500      	str	r5, [sp, #0]
   2015e:	f7ff fe25 	bl	1fdac <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   20162:	4623      	mov	r3, r4
   20164:	464a      	mov	r2, r9
   20166:	4641      	mov	r1, r8
   20168:	4640      	mov	r0, r8
   2016a:	9500      	str	r5, [sp, #0]
   2016c:	f7ff fe37 	bl	1fdde <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   20170:	4623      	mov	r3, r4
   20172:	463a      	mov	r2, r7
   20174:	4631      	mov	r1, r6
   20176:	a80a      	add	r0, sp, #40	; 0x28
   20178:	9500      	str	r5, [sp, #0]
   2017a:	f7ff fe30 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2017e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20180:	aa0a      	add	r2, sp, #40	; 0x28
   20182:	4649      	mov	r1, r9
   20184:	4648      	mov	r0, r9
   20186:	f7ff fed9 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2018a:	4623      	mov	r3, r4
   2018c:	4632      	mov	r2, r6
   2018e:	4639      	mov	r1, r7
   20190:	a80a      	add	r0, sp, #40	; 0x28
   20192:	9500      	str	r5, [sp, #0]
   20194:	f7ff fe0a 	bl	1fdac <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   20198:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2019a:	4641      	mov	r1, r8
   2019c:	4630      	mov	r0, r6
   2019e:	f7ff fedd 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   201a2:	4623      	mov	r3, r4
   201a4:	aa0a      	add	r2, sp, #40	; 0x28
   201a6:	4631      	mov	r1, r6
   201a8:	4630      	mov	r0, r6
   201aa:	9500      	str	r5, [sp, #0]
   201ac:	f7ff fe17 	bl	1fdde <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   201b0:	4623      	mov	r3, r4
   201b2:	4632      	mov	r2, r6
   201b4:	4639      	mov	r1, r7
   201b6:	a812      	add	r0, sp, #72	; 0x48
   201b8:	9500      	str	r5, [sp, #0]
   201ba:	f7ff fe10 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   201be:	9b22      	ldr	r3, [sp, #136]	; 0x88
   201c0:	aa12      	add	r2, sp, #72	; 0x48
   201c2:	4641      	mov	r1, r8
   201c4:	4640      	mov	r0, r8
   201c6:	f7ff feb9 	bl	1ff3c <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   201ca:	4623      	mov	r3, r4
   201cc:	464a      	mov	r2, r9
   201ce:	4641      	mov	r1, r8
   201d0:	4640      	mov	r0, r8
   201d2:	9500      	str	r5, [sp, #0]
   201d4:	f7ff fe03 	bl	1fdde <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   201d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   201da:	a902      	add	r1, sp, #8
   201dc:	a812      	add	r0, sp, #72	; 0x48
   201de:	f7ff febd 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   201e2:	a912      	add	r1, sp, #72	; 0x48
   201e4:	4623      	mov	r3, r4
   201e6:	aa0a      	add	r2, sp, #40	; 0x28
   201e8:	4608      	mov	r0, r1
   201ea:	9500      	str	r5, [sp, #0]
   201ec:	f7ff fdf7 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   201f0:	4623      	mov	r3, r4
   201f2:	463a      	mov	r2, r7
   201f4:	a912      	add	r1, sp, #72	; 0x48
   201f6:	a80a      	add	r0, sp, #40	; 0x28
   201f8:	9500      	str	r5, [sp, #0]
   201fa:	f7ff fdf0 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   201fe:	a90a      	add	r1, sp, #40	; 0x28
   20200:	9b22      	ldr	r3, [sp, #136]	; 0x88
   20202:	aa02      	add	r2, sp, #8
   20204:	4608      	mov	r0, r1
   20206:	f7ff fe99 	bl	1ff3c <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   2020a:	4623      	mov	r3, r4
   2020c:	464a      	mov	r2, r9
   2020e:	a90a      	add	r1, sp, #40	; 0x28
   20210:	4648      	mov	r0, r9
   20212:	9500      	str	r5, [sp, #0]
   20214:	f7ff fde3 	bl	1fdde <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   20218:	462a      	mov	r2, r5
   2021a:	a912      	add	r1, sp, #72	; 0x48
   2021c:	4638      	mov	r0, r7
   2021e:	f7ff fd76 	bl	1fd0e <uECC_vli_set>
}
   20222:	b01b      	add	sp, #108	; 0x6c
   20224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00020228 <uECC_vli_modInv>:
{
   20228:	b5f0      	push	{r4, r5, r6, r7, lr}
   2022a:	460f      	mov	r7, r1
   2022c:	b0a1      	sub	sp, #132	; 0x84
   2022e:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   20230:	4619      	mov	r1, r3
   20232:	4638      	mov	r0, r7
{
   20234:	4615      	mov	r5, r2
   20236:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   20238:	f7ff fd2f 	bl	1fc9a <uECC_vli_isZero>
   2023c:	b120      	cbz	r0, 20248 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   2023e:	4630      	mov	r0, r6
   20240:	f7ff fd20 	bl	1fc84 <uECC_vli_clear>
}
   20244:	b021      	add	sp, #132	; 0x84
   20246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   20248:	4622      	mov	r2, r4
   2024a:	4639      	mov	r1, r7
   2024c:	4668      	mov	r0, sp
   2024e:	f7ff fd5e 	bl	1fd0e <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   20252:	4629      	mov	r1, r5
   20254:	a808      	add	r0, sp, #32
   20256:	f7ff fd5a 	bl	1fd0e <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2025a:	a810      	add	r0, sp, #64	; 0x40
   2025c:	4621      	mov	r1, r4
   2025e:	f7ff fd11 	bl	1fc84 <uECC_vli_clear>
	u[0] = 1;
   20262:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   20264:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   20266:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   20268:	f7ff fd0c 	bl	1fc84 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2026c:	4622      	mov	r2, r4
   2026e:	a908      	add	r1, sp, #32
   20270:	4668      	mov	r0, sp
   20272:	f7ff fd58 	bl	1fd26 <uECC_vli_cmp_unsafe>
   20276:	b928      	cbnz	r0, 20284 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   20278:	4622      	mov	r2, r4
   2027a:	a910      	add	r1, sp, #64	; 0x40
   2027c:	4630      	mov	r0, r6
   2027e:	f7ff fd46 	bl	1fd0e <uECC_vli_set>
   20282:	e7df      	b.n	20244 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   20284:	9b00      	ldr	r3, [sp, #0]
   20286:	07da      	lsls	r2, r3, #31
   20288:	d409      	bmi.n	2029e <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   2028a:	4621      	mov	r1, r4
   2028c:	4668      	mov	r0, sp
   2028e:	f7ff fc5b 	bl	1fb48 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   20292:	4622      	mov	r2, r4
   20294:	4629      	mov	r1, r5
   20296:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   20298:	f7ff fc63 	bl	1fb62 <vli_modInv_update>
   2029c:	e7e6      	b.n	2026c <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   2029e:	9b08      	ldr	r3, [sp, #32]
   202a0:	07db      	lsls	r3, r3, #31
   202a2:	d407      	bmi.n	202b4 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   202a4:	4621      	mov	r1, r4
   202a6:	a808      	add	r0, sp, #32
   202a8:	f7ff fc4e 	bl	1fb48 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   202ac:	4622      	mov	r2, r4
   202ae:	4629      	mov	r1, r5
   202b0:	a818      	add	r0, sp, #96	; 0x60
   202b2:	e7f1      	b.n	20298 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   202b4:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   202b6:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   202b8:	dd1c      	ble.n	202f4 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   202ba:	aa08      	add	r2, sp, #32
   202bc:	4669      	mov	r1, sp
   202be:	4668      	mov	r0, sp
   202c0:	f7ff fd5b 	bl	1fd7a <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   202c4:	4621      	mov	r1, r4
   202c6:	4668      	mov	r0, sp
   202c8:	f7ff fc3e 	bl	1fb48 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   202cc:	4622      	mov	r2, r4
   202ce:	a918      	add	r1, sp, #96	; 0x60
   202d0:	a810      	add	r0, sp, #64	; 0x40
   202d2:	f7ff fd28 	bl	1fd26 <uECC_vli_cmp_unsafe>
   202d6:	2800      	cmp	r0, #0
   202d8:	da05      	bge.n	202e6 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   202da:	a910      	add	r1, sp, #64	; 0x40
   202dc:	4623      	mov	r3, r4
   202de:	462a      	mov	r2, r5
   202e0:	4608      	mov	r0, r1
   202e2:	f7ff fc19 	bl	1fb18 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   202e6:	a910      	add	r1, sp, #64	; 0x40
   202e8:	4623      	mov	r3, r4
   202ea:	aa18      	add	r2, sp, #96	; 0x60
   202ec:	4608      	mov	r0, r1
   202ee:	f7ff fd44 	bl	1fd7a <uECC_vli_sub>
   202f2:	e7ce      	b.n	20292 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   202f4:	a908      	add	r1, sp, #32
   202f6:	466a      	mov	r2, sp
   202f8:	4608      	mov	r0, r1
   202fa:	f7ff fd3e 	bl	1fd7a <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   202fe:	4621      	mov	r1, r4
   20300:	a808      	add	r0, sp, #32
   20302:	f7ff fc21 	bl	1fb48 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   20306:	4622      	mov	r2, r4
   20308:	a910      	add	r1, sp, #64	; 0x40
   2030a:	a818      	add	r0, sp, #96	; 0x60
   2030c:	f7ff fd0b 	bl	1fd26 <uECC_vli_cmp_unsafe>
   20310:	2800      	cmp	r0, #0
   20312:	da05      	bge.n	20320 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   20314:	a918      	add	r1, sp, #96	; 0x60
   20316:	4623      	mov	r3, r4
   20318:	462a      	mov	r2, r5
   2031a:	4608      	mov	r0, r1
   2031c:	f7ff fbfc 	bl	1fb18 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   20320:	a918      	add	r1, sp, #96	; 0x60
   20322:	4623      	mov	r3, r4
   20324:	aa10      	add	r2, sp, #64	; 0x40
   20326:	4608      	mov	r0, r1
   20328:	f7ff fd27 	bl	1fd7a <uECC_vli_sub>
   2032c:	e7be      	b.n	202ac <uECC_vli_modInv+0x84>

0002032e <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2032e:	7809      	ldrb	r1, [r1, #0]
   20330:	0049      	lsls	r1, r1, #1
   20332:	b249      	sxtb	r1, r1
   20334:	f7ff bcb1 	b.w	1fc9a <uECC_vli_isZero>

00020338 <apply_z>:
{
   20338:	b5f0      	push	{r4, r5, r6, r7, lr}
   2033a:	4615      	mov	r5, r2
   2033c:	b089      	sub	sp, #36	; 0x24
   2033e:	461c      	mov	r4, r3
   20340:	4607      	mov	r7, r0
   20342:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   20344:	461a      	mov	r2, r3
   20346:	4629      	mov	r1, r5
   20348:	4668      	mov	r0, sp
   2034a:	f7ff fe07 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2034e:	4623      	mov	r3, r4
   20350:	466a      	mov	r2, sp
   20352:	4639      	mov	r1, r7
   20354:	4638      	mov	r0, r7
   20356:	f7ff fdf1 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2035a:	4623      	mov	r3, r4
   2035c:	462a      	mov	r2, r5
   2035e:	4669      	mov	r1, sp
   20360:	4668      	mov	r0, sp
   20362:	f7ff fdeb 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   20366:	4623      	mov	r3, r4
   20368:	466a      	mov	r2, sp
   2036a:	4631      	mov	r1, r6
   2036c:	4630      	mov	r0, r6
   2036e:	f7ff fde5 	bl	1ff3c <uECC_vli_modMult_fast>
}
   20372:	b009      	add	sp, #36	; 0x24
   20374:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020376 <XYcZ_add>:
{
   20376:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2037a:	b08b      	sub	sp, #44	; 0x2c
   2037c:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   2037e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   20380:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20384:	9600      	str	r6, [sp, #0]
{
   20386:	461f      	mov	r7, r3
   20388:	4680      	mov	r8, r0
   2038a:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2038c:	462b      	mov	r3, r5
   2038e:	4602      	mov	r2, r0
   20390:	4621      	mov	r1, r4
   20392:	a802      	add	r0, sp, #8
   20394:	f7ff fd23 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20398:	a902      	add	r1, sp, #8
   2039a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2039c:	4608      	mov	r0, r1
   2039e:	f7ff fddd 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   203a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   203a4:	aa02      	add	r2, sp, #8
   203a6:	4641      	mov	r1, r8
   203a8:	4640      	mov	r0, r8
   203aa:	f7ff fdc7 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   203ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   203b0:	aa02      	add	r2, sp, #8
   203b2:	4621      	mov	r1, r4
   203b4:	4620      	mov	r0, r4
   203b6:	f7ff fdc1 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   203ba:	462b      	mov	r3, r5
   203bc:	464a      	mov	r2, r9
   203be:	4639      	mov	r1, r7
   203c0:	4638      	mov	r0, r7
   203c2:	9600      	str	r6, [sp, #0]
   203c4:	f7ff fd0b 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   203c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   203ca:	4639      	mov	r1, r7
   203cc:	a802      	add	r0, sp, #8
   203ce:	f7ff fdc5 	bl	1ff5c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   203d2:	a902      	add	r1, sp, #8
   203d4:	462b      	mov	r3, r5
   203d6:	4642      	mov	r2, r8
   203d8:	4608      	mov	r0, r1
   203da:	9600      	str	r6, [sp, #0]
   203dc:	f7ff fcff 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   203e0:	a902      	add	r1, sp, #8
   203e2:	462b      	mov	r3, r5
   203e4:	4622      	mov	r2, r4
   203e6:	4608      	mov	r0, r1
   203e8:	9600      	str	r6, [sp, #0]
   203ea:	f7ff fcf8 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   203ee:	462b      	mov	r3, r5
   203f0:	4642      	mov	r2, r8
   203f2:	4621      	mov	r1, r4
   203f4:	4620      	mov	r0, r4
   203f6:	9600      	str	r6, [sp, #0]
   203f8:	f7ff fcf1 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   203fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   203fe:	4622      	mov	r2, r4
   20400:	4649      	mov	r1, r9
   20402:	4648      	mov	r0, r9
   20404:	f7ff fd9a 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   20408:	462b      	mov	r3, r5
   2040a:	aa02      	add	r2, sp, #8
   2040c:	4641      	mov	r1, r8
   2040e:	4620      	mov	r0, r4
   20410:	9600      	str	r6, [sp, #0]
   20412:	f7ff fce4 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   20416:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20418:	4622      	mov	r2, r4
   2041a:	4639      	mov	r1, r7
   2041c:	4638      	mov	r0, r7
   2041e:	f7ff fd8d 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   20422:	462b      	mov	r3, r5
   20424:	464a      	mov	r2, r9
   20426:	4639      	mov	r1, r7
   20428:	4638      	mov	r0, r7
   2042a:	9600      	str	r6, [sp, #0]
   2042c:	f7ff fcd7 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   20430:	4632      	mov	r2, r6
   20432:	a902      	add	r1, sp, #8
   20434:	4620      	mov	r0, r4
   20436:	f7ff fc6a 	bl	1fd0e <uECC_vli_set>
}
   2043a:	b00b      	add	sp, #44	; 0x2c
   2043c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00020440 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   20440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20444:	b0b1      	sub	sp, #196	; 0xc4
   20446:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2044a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   2044c:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2044e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   20452:	a818      	add	r0, sp, #96	; 0x60
   20454:	463a      	mov	r2, r7
{
   20456:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   20458:	f7ff fc59 	bl	1fd0e <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2045c:	00bb      	lsls	r3, r7, #2
   2045e:	9307      	str	r3, [sp, #28]
   20460:	9b05      	ldr	r3, [sp, #20]
   20462:	00ba      	lsls	r2, r7, #2
   20464:	4413      	add	r3, r2
   20466:	4619      	mov	r1, r3
   20468:	463a      	mov	r2, r7
   2046a:	a828      	add	r0, sp, #160	; 0xa0
   2046c:	9302      	str	r3, [sp, #8]
   2046e:	f7ff fc4e 	bl	1fd0e <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   20472:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   20476:	2e00      	cmp	r6, #0
   20478:	f000 8087 	beq.w	2058a <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   2047c:	462a      	mov	r2, r5
   2047e:	4631      	mov	r1, r6
   20480:	a808      	add	r0, sp, #32
   20482:	f7ff fc44 	bl	1fd0e <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   20486:	ae10      	add	r6, sp, #64	; 0x40
   20488:	462a      	mov	r2, r5
   2048a:	a918      	add	r1, sp, #96	; 0x60
   2048c:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   2048e:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   20492:	f7ff fc3c 	bl	1fd0e <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   20496:	a928      	add	r1, sp, #160	; 0xa0
   20498:	4648      	mov	r0, r9
   2049a:	f7ff fc38 	bl	1fd0e <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2049e:	4623      	mov	r3, r4
   204a0:	aa08      	add	r2, sp, #32
   204a2:	a928      	add	r1, sp, #160	; 0xa0
   204a4:	a818      	add	r0, sp, #96	; 0x60
   204a6:	f7ff ff47 	bl	20338 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   204aa:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   204ae:	4623      	mov	r3, r4
   204b0:	aa08      	add	r2, sp, #32
   204b2:	a928      	add	r1, sp, #160	; 0xa0
   204b4:	a818      	add	r0, sp, #96	; 0x60
   204b6:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   204b8:	4623      	mov	r3, r4
   204ba:	aa08      	add	r2, sp, #32
   204bc:	4649      	mov	r1, r9
   204be:	4630      	mov	r0, r6
   204c0:	f7ff ff3a 	bl	20338 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   204c4:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   204c8:	3d02      	subs	r5, #2
   204ca:	b22d      	sxth	r5, r5
   204cc:	2d00      	cmp	r5, #0
   204ce:	dc63      	bgt.n	20598 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   204d0:	9b06      	ldr	r3, [sp, #24]
   204d2:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   204d4:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   204d6:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   204da:	ab10      	add	r3, sp, #64	; 0x40
   204dc:	0176      	lsls	r6, r6, #5
   204de:	43ed      	mvns	r5, r5
   204e0:	eb03 0806 	add.w	r8, r3, r6
   204e4:	f005 0501 	and.w	r5, r5, #1
   204e8:	ab20      	add	r3, sp, #128	; 0x80
   204ea:	441e      	add	r6, r3
   204ec:	016d      	lsls	r5, r5, #5
   204ee:	ab10      	add	r3, sp, #64	; 0x40
   204f0:	eb03 0905 	add.w	r9, r3, r5
   204f4:	ab20      	add	r3, sp, #128	; 0x80
   204f6:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   204f8:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   204fc:	462b      	mov	r3, r5
   204fe:	464a      	mov	r2, r9
   20500:	4631      	mov	r1, r6
   20502:	4640      	mov	r0, r8
   20504:	f7ff fe04 	bl	20110 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   20508:	4653      	mov	r3, sl
   2050a:	aa10      	add	r2, sp, #64	; 0x40
   2050c:	a918      	add	r1, sp, #96	; 0x60
   2050e:	a808      	add	r0, sp, #32
   20510:	9700      	str	r7, [sp, #0]
   20512:	f7ff fc64 	bl	1fdde <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   20516:	a908      	add	r1, sp, #32
   20518:	4623      	mov	r3, r4
   2051a:	4632      	mov	r2, r6
   2051c:	4608      	mov	r0, r1
   2051e:	f7ff fd0d 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   20522:	a908      	add	r1, sp, #32
   20524:	4623      	mov	r3, r4
   20526:	9a05      	ldr	r2, [sp, #20]
   20528:	4608      	mov	r0, r1
   2052a:	f7ff fd07 	bl	1ff3c <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2052e:	a908      	add	r1, sp, #32
   20530:	463b      	mov	r3, r7
   20532:	4652      	mov	r2, sl
   20534:	4608      	mov	r0, r1
   20536:	f7ff fe77 	bl	20228 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2053a:	a908      	add	r1, sp, #32
   2053c:	4623      	mov	r3, r4
   2053e:	9a02      	ldr	r2, [sp, #8]
   20540:	4608      	mov	r0, r1
   20542:	f7ff fcfb 	bl	1ff3c <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   20546:	a908      	add	r1, sp, #32
   20548:	4623      	mov	r3, r4
   2054a:	4642      	mov	r2, r8
   2054c:	4608      	mov	r0, r1
   2054e:	f7ff fcf5 	bl	1ff3c <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   20552:	9400      	str	r4, [sp, #0]
   20554:	4633      	mov	r3, r6
   20556:	4642      	mov	r2, r8
   20558:	4629      	mov	r1, r5
   2055a:	4648      	mov	r0, r9
   2055c:	f7ff ff0b 	bl	20376 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   20560:	4623      	mov	r3, r4
   20562:	aa08      	add	r2, sp, #32
   20564:	a920      	add	r1, sp, #128	; 0x80
   20566:	a810      	add	r0, sp, #64	; 0x40
   20568:	f7ff fee6 	bl	20338 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2056c:	463a      	mov	r2, r7
   2056e:	a910      	add	r1, sp, #64	; 0x40
   20570:	9804      	ldr	r0, [sp, #16]
   20572:	f7ff fbcc 	bl	1fd0e <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   20576:	9b04      	ldr	r3, [sp, #16]
   20578:	9c07      	ldr	r4, [sp, #28]
   2057a:	4423      	add	r3, r4
   2057c:	a920      	add	r1, sp, #128	; 0x80
   2057e:	4618      	mov	r0, r3
   20580:	f7ff fbc5 	bl	1fd0e <uECC_vli_set>
}
   20584:	b031      	add	sp, #196	; 0xc4
   20586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2058a:	4629      	mov	r1, r5
   2058c:	a808      	add	r0, sp, #32
   2058e:	f7ff fb79 	bl	1fc84 <uECC_vli_clear>
		z[0] = 1;
   20592:	2301      	movs	r3, #1
   20594:	9308      	str	r3, [sp, #32]
   20596:	e776      	b.n	20486 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   20598:	4629      	mov	r1, r5
   2059a:	9806      	ldr	r0, [sp, #24]
   2059c:	f7ff fb8c 	bl	1fcb8 <uECC_vli_testBit>
   205a0:	fab0 f080 	clz	r0, r0
   205a4:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   205a6:	f1c0 0801 	rsb	r8, r0, #1
   205aa:	ea4f 1848 	mov.w	r8, r8, lsl #5
   205ae:	0140      	lsls	r0, r0, #5
   205b0:	eb06 0b08 	add.w	fp, r6, r8
   205b4:	eb06 0a00 	add.w	sl, r6, r0
   205b8:	44c8      	add	r8, r9
   205ba:	eb09 0300 	add.w	r3, r9, r0
   205be:	4652      	mov	r2, sl
   205c0:	4641      	mov	r1, r8
   205c2:	4658      	mov	r0, fp
   205c4:	9400      	str	r4, [sp, #0]
   205c6:	9303      	str	r3, [sp, #12]
   205c8:	f7ff fda2 	bl	20110 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   205cc:	9400      	str	r4, [sp, #0]
   205ce:	4643      	mov	r3, r8
   205d0:	465a      	mov	r2, fp
   205d2:	9903      	ldr	r1, [sp, #12]
   205d4:	4650      	mov	r0, sl
   205d6:	f7ff fece 	bl	20376 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   205da:	3d01      	subs	r5, #1
   205dc:	e775      	b.n	204ca <EccPoint_mult+0x8a>

000205de <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   205de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   205e2:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
   205e6:	f114 051f 	adds.w	r5, r4, #31
   205ea:	bf48      	it	mi
   205ec:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
{
   205f0:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   205f2:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   205f6:	f345 1547 	sbfx	r5, r5, #5, #8
{
   205fa:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   205fc:	4601      	mov	r1, r0
   205fe:	462b      	mov	r3, r5
   20600:	4632      	mov	r2, r6
   20602:	4638      	mov	r0, r7
   20604:	f7ff fa88 	bl	1fb18 <uECC_vli_add>
   20608:	b990      	cbnz	r0, 20630 <regularize_k+0x52>
   2060a:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   2060e:	da11      	bge.n	20634 <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   20610:	4621      	mov	r1, r4
   20612:	4638      	mov	r0, r7
   20614:	f7ff fb50 	bl	1fcb8 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   20618:	1c04      	adds	r4, r0, #0
   2061a:	bf18      	it	ne
   2061c:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2061e:	462b      	mov	r3, r5
   20620:	4632      	mov	r2, r6
   20622:	4639      	mov	r1, r7
   20624:	4640      	mov	r0, r8
   20626:	f7ff fa77 	bl	1fb18 <uECC_vli_add>

	return carry;
}
   2062a:	4620      	mov	r0, r4
   2062c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   20630:	2401      	movs	r4, #1
   20632:	e7f4      	b.n	2061e <regularize_k+0x40>
   20634:	4604      	mov	r4, r0
   20636:	e7f2      	b.n	2061e <regularize_k+0x40>

00020638 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   20638:	b530      	push	{r4, r5, lr}
   2063a:	4614      	mov	r4, r2
   2063c:	b095      	sub	sp, #84	; 0x54
   2063e:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   20640:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   20642:	4623      	mov	r3, r4
{
   20644:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   20646:	a904      	add	r1, sp, #16
   20648:	9102      	str	r1, [sp, #8]
   2064a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2064c:	f7ff ffc7 	bl	205de <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   20650:	fab0 f080 	clz	r0, r0
   20654:	ab14      	add	r3, sp, #80	; 0x50
   20656:	0940      	lsrs	r0, r0, #5
   20658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2065c:	8863      	ldrh	r3, [r4, #2]
   2065e:	9401      	str	r4, [sp, #4]
   20660:	3301      	adds	r3, #1
   20662:	b21b      	sxth	r3, r3
   20664:	9300      	str	r3, [sp, #0]
   20666:	f850 2c48 	ldr.w	r2, [r0, #-72]
   2066a:	2300      	movs	r3, #0
   2066c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   20670:	4628      	mov	r0, r5
   20672:	f7ff fee5 	bl	20440 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   20676:	4621      	mov	r1, r4
   20678:	4628      	mov	r0, r5
   2067a:	f7ff fe58 	bl	2032e <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2067e:	fab0 f080 	clz	r0, r0
   20682:	0940      	lsrs	r0, r0, #5
   20684:	b015      	add	sp, #84	; 0x54
   20686:	bd30      	pop	{r4, r5, pc}

00020688 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   20688:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2068a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2068c:	1e4f      	subs	r7, r1, #1
   2068e:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   20690:	428c      	cmp	r4, r1
   20692:	f105 0501 	add.w	r5, r5, #1
   20696:	db00      	blt.n	2069a <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   20698:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2069a:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2069c:	f023 0603 	bic.w	r6, r3, #3
   206a0:	f003 0303 	and.w	r3, r3, #3
   206a4:	5996      	ldr	r6, [r2, r6]
   206a6:	00db      	lsls	r3, r3, #3
   206a8:	fa26 f303 	lsr.w	r3, r6, r3
   206ac:	5503      	strb	r3, [r0, r4]
   206ae:	e7ee      	b.n	2068e <uECC_vli_nativeToBytes+0x6>

000206b0 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   206b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   206b2:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   206b4:	1cd1      	adds	r1, r2, #3
   206b6:	bf48      	it	mi
   206b8:	1d91      	addmi	r1, r2, #6
{
   206ba:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   206bc:	f341 0187 	sbfx	r1, r1, #2, #8
{
   206c0:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   206c2:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   206c4:	f7ff fade 	bl	1fc84 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   206c8:	2100      	movs	r1, #0
   206ca:	b24a      	sxtb	r2, r1
   206cc:	42a2      	cmp	r2, r4
   206ce:	f101 0101 	add.w	r1, r1, #1
   206d2:	db00      	blt.n	206d6 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   206d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   206d6:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   206d8:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   206dc:	5cb2      	ldrb	r2, [r6, r2]
   206de:	f003 0303 	and.w	r3, r3, #3
   206e2:	00db      	lsls	r3, r3, #3
   206e4:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   206e8:	582a      	ldr	r2, [r5, r0]
   206ea:	431a      	orrs	r2, r3
   206ec:	502a      	str	r2, [r5, r0]
   206ee:	e7ec      	b.n	206ca <uECC_vli_bytesToNative+0x1a>

000206f0 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   206f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206f4:	b090      	sub	sp, #64	; 0x40
   206f6:	4606      	mov	r6, r0
   206f8:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   206fa:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   206fe:	f7ff fe16 	bl	2032e <EccPoint_isZero>
   20702:	bb40      	cbnz	r0, 20756 <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   20704:	f104 0804 	add.w	r8, r4, #4
   20708:	462a      	mov	r2, r5
   2070a:	4631      	mov	r1, r6
   2070c:	4640      	mov	r0, r8
   2070e:	f7ff fb0a 	bl	1fd26 <uECC_vli_cmp_unsafe>
   20712:	2801      	cmp	r0, #1
   20714:	d122      	bne.n	2075c <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   20716:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   2071a:	462a      	mov	r2, r5
   2071c:	4639      	mov	r1, r7
   2071e:	4640      	mov	r0, r8
   20720:	f7ff fb01 	bl	1fd26 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   20724:	2801      	cmp	r0, #1
   20726:	d119      	bne.n	2075c <uECC_valid_point+0x6c>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   20728:	4622      	mov	r2, r4
   2072a:	4668      	mov	r0, sp
   2072c:	f7ff fc16 	bl	1ff5c <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   20730:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   20734:	4622      	mov	r2, r4
   20736:	4631      	mov	r1, r6
   20738:	a808      	add	r0, sp, #32
   2073a:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2073c:	462a      	mov	r2, r5
   2073e:	a908      	add	r1, sp, #32
   20740:	4668      	mov	r0, sp
   20742:	f7ff fb07 	bl	1fd54 <uECC_vli_equal>
   20746:	2800      	cmp	r0, #0
		return -3;
   20748:	bf0c      	ite	eq
   2074a:	2000      	moveq	r0, #0
   2074c:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   20750:	b010      	add	sp, #64	; 0x40
   20752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   20756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2075a:	e7f9      	b.n	20750 <uECC_valid_point+0x60>
		return -2;
   2075c:	f06f 0001 	mvn.w	r0, #1
   20760:	e7f6      	b.n	20750 <uECC_valid_point+0x60>

00020762 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   20762:	b570      	push	{r4, r5, r6, lr}
   20764:	460c      	mov	r4, r1
   20766:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   20768:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2076a:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2076e:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   20770:	4601      	mov	r1, r0
   20772:	4668      	mov	r0, sp
   20774:	f7ff ff9c 	bl	206b0 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   20778:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2077c:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   20780:	18b1      	adds	r1, r6, r2
   20782:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   20786:	f7ff ff93 	bl	206b0 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2078a:	2210      	movs	r2, #16
   2078c:	4629      	mov	r1, r5
   2078e:	4668      	mov	r0, sp
   20790:	f7ff fac9 	bl	1fd26 <uECC_vli_cmp_unsafe>
   20794:	b128      	cbz	r0, 207a2 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   20796:	4621      	mov	r1, r4
   20798:	4668      	mov	r0, sp
   2079a:	f7ff ffa9 	bl	206f0 <uECC_valid_point>
}
   2079e:	b010      	add	sp, #64	; 0x40
   207a0:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   207a2:	f06f 0003 	mvn.w	r0, #3
   207a6:	e7fa      	b.n	2079e <uECC_valid_public_key+0x3c>

000207a8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   207a8:	78cb      	ldrb	r3, [r1, #3]
   207aa:	7802      	ldrb	r2, [r0, #0]
   207ac:	4053      	eors	r3, r2
   207ae:	7003      	strb	r3, [r0, #0]
   207b0:	884b      	ldrh	r3, [r1, #2]
   207b2:	7842      	ldrb	r2, [r0, #1]
   207b4:	4053      	eors	r3, r2
   207b6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   207b8:	680a      	ldr	r2, [r1, #0]
   207ba:	7883      	ldrb	r3, [r0, #2]
   207bc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   207c0:	7083      	strb	r3, [r0, #2]
   207c2:	680a      	ldr	r2, [r1, #0]
   207c4:	78c3      	ldrb	r3, [r0, #3]
   207c6:	4053      	eors	r3, r2
   207c8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   207ca:	79cb      	ldrb	r3, [r1, #7]
   207cc:	7902      	ldrb	r2, [r0, #4]
   207ce:	4053      	eors	r3, r2
   207d0:	7103      	strb	r3, [r0, #4]
   207d2:	88cb      	ldrh	r3, [r1, #6]
   207d4:	7942      	ldrb	r2, [r0, #5]
   207d6:	4053      	eors	r3, r2
   207d8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   207da:	684a      	ldr	r2, [r1, #4]
   207dc:	7983      	ldrb	r3, [r0, #6]
   207de:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   207e2:	7183      	strb	r3, [r0, #6]
   207e4:	684a      	ldr	r2, [r1, #4]
   207e6:	79c3      	ldrb	r3, [r0, #7]
   207e8:	4053      	eors	r3, r2
   207ea:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   207ec:	7acb      	ldrb	r3, [r1, #11]
   207ee:	7a02      	ldrb	r2, [r0, #8]
   207f0:	4053      	eors	r3, r2
   207f2:	7203      	strb	r3, [r0, #8]
   207f4:	7a42      	ldrb	r2, [r0, #9]
   207f6:	894b      	ldrh	r3, [r1, #10]
   207f8:	4053      	eors	r3, r2
   207fa:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   207fc:	688a      	ldr	r2, [r1, #8]
   207fe:	7a83      	ldrb	r3, [r0, #10]
   20800:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20804:	7283      	strb	r3, [r0, #10]
   20806:	688a      	ldr	r2, [r1, #8]
   20808:	7ac3      	ldrb	r3, [r0, #11]
   2080a:	4053      	eors	r3, r2
   2080c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2080e:	7bcb      	ldrb	r3, [r1, #15]
   20810:	7b02      	ldrb	r2, [r0, #12]
   20812:	4053      	eors	r3, r2
   20814:	7303      	strb	r3, [r0, #12]
   20816:	89cb      	ldrh	r3, [r1, #14]
   20818:	7b42      	ldrb	r2, [r0, #13]
   2081a:	4053      	eors	r3, r2
   2081c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2081e:	68ca      	ldr	r2, [r1, #12]
   20820:	7b83      	ldrb	r3, [r0, #14]
   20822:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20826:	7383      	strb	r3, [r0, #14]
   20828:	68ca      	ldr	r2, [r1, #12]
   2082a:	7bc3      	ldrb	r3, [r0, #15]
   2082c:	4053      	eors	r3, r2
   2082e:	73c3      	strb	r3, [r0, #15]
}
   20830:	4770      	bx	lr

00020832 <shift_rows>:
{
   20832:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   20834:	7802      	ldrb	r2, [r0, #0]
   20836:	f88d 2000 	strb.w	r2, [sp]
   2083a:	7942      	ldrb	r2, [r0, #5]
   2083c:	f88d 2001 	strb.w	r2, [sp, #1]
   20840:	7a82      	ldrb	r2, [r0, #10]
   20842:	f88d 2002 	strb.w	r2, [sp, #2]
   20846:	7bc2      	ldrb	r2, [r0, #15]
   20848:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2084c:	7902      	ldrb	r2, [r0, #4]
   2084e:	f88d 2004 	strb.w	r2, [sp, #4]
   20852:	7a42      	ldrb	r2, [r0, #9]
   20854:	f88d 2005 	strb.w	r2, [sp, #5]
   20858:	7b82      	ldrb	r2, [r0, #14]
   2085a:	f88d 2006 	strb.w	r2, [sp, #6]
   2085e:	78c2      	ldrb	r2, [r0, #3]
   20860:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   20864:	7a02      	ldrb	r2, [r0, #8]
   20866:	f88d 2008 	strb.w	r2, [sp, #8]
   2086a:	7b42      	ldrb	r2, [r0, #13]
   2086c:	f88d 2009 	strb.w	r2, [sp, #9]
   20870:	7882      	ldrb	r2, [r0, #2]
   20872:	f88d 200a 	strb.w	r2, [sp, #10]
   20876:	79c2      	ldrb	r2, [r0, #7]
   20878:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2087c:	7b02      	ldrb	r2, [r0, #12]
   2087e:	f88d 200c 	strb.w	r2, [sp, #12]
   20882:	7842      	ldrb	r2, [r0, #1]
   20884:	f88d 200d 	strb.w	r2, [sp, #13]
   20888:	7ac3      	ldrb	r3, [r0, #11]
   2088a:	7982      	ldrb	r2, [r0, #6]
   2088c:	f88d 200e 	strb.w	r2, [sp, #14]
   20890:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   20894:	2310      	movs	r3, #16
   20896:	466a      	mov	r2, sp
   20898:	4619      	mov	r1, r3
   2089a:	f7ff f87a 	bl	1f992 <_copy>
}
   2089e:	b005      	add	sp, #20
   208a0:	f85d fb04 	ldr.w	pc, [sp], #4

000208a4 <mult_row_column>:
{
   208a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   208a6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   208a8:	7808      	ldrb	r0, [r1, #0]
{
   208aa:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   208ac:	f7ff f880 	bl	1f9b0 <_double_byte>
   208b0:	4605      	mov	r5, r0
   208b2:	7860      	ldrb	r0, [r4, #1]
   208b4:	f7ff f87c 	bl	1f9b0 <_double_byte>
   208b8:	78a2      	ldrb	r2, [r4, #2]
   208ba:	7863      	ldrb	r3, [r4, #1]
   208bc:	4053      	eors	r3, r2
   208be:	78e2      	ldrb	r2, [r4, #3]
   208c0:	4053      	eors	r3, r2
   208c2:	405d      	eors	r5, r3
   208c4:	4045      	eors	r5, r0
   208c6:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   208c8:	7860      	ldrb	r0, [r4, #1]
   208ca:	7827      	ldrb	r7, [r4, #0]
   208cc:	f7ff f870 	bl	1f9b0 <_double_byte>
   208d0:	4605      	mov	r5, r0
   208d2:	78a0      	ldrb	r0, [r4, #2]
   208d4:	f7ff f86c 	bl	1f9b0 <_double_byte>
   208d8:	78a3      	ldrb	r3, [r4, #2]
   208da:	405f      	eors	r7, r3
   208dc:	78e3      	ldrb	r3, [r4, #3]
   208de:	405f      	eors	r7, r3
   208e0:	407d      	eors	r5, r7
   208e2:	4045      	eors	r5, r0
   208e4:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   208e6:	78a0      	ldrb	r0, [r4, #2]
   208e8:	7865      	ldrb	r5, [r4, #1]
   208ea:	7827      	ldrb	r7, [r4, #0]
   208ec:	f7ff f860 	bl	1f9b0 <_double_byte>
   208f0:	406f      	eors	r7, r5
   208f2:	4605      	mov	r5, r0
   208f4:	78e0      	ldrb	r0, [r4, #3]
   208f6:	f7ff f85b 	bl	1f9b0 <_double_byte>
   208fa:	78e3      	ldrb	r3, [r4, #3]
   208fc:	405f      	eors	r7, r3
   208fe:	407d      	eors	r5, r7
   20900:	4045      	eors	r5, r0
   20902:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   20904:	7820      	ldrb	r0, [r4, #0]
   20906:	f7ff f853 	bl	1f9b0 <_double_byte>
   2090a:	7863      	ldrb	r3, [r4, #1]
   2090c:	7825      	ldrb	r5, [r4, #0]
   2090e:	405d      	eors	r5, r3
   20910:	78a3      	ldrb	r3, [r4, #2]
   20912:	405d      	eors	r5, r3
   20914:	4045      	eors	r5, r0
   20916:	78e0      	ldrb	r0, [r4, #3]
   20918:	f7ff f84a 	bl	1f9b0 <_double_byte>
   2091c:	b2ed      	uxtb	r5, r5
   2091e:	4068      	eors	r0, r5
   20920:	70f0      	strb	r0, [r6, #3]
}
   20922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020924 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20924:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20926:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   20928:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2092a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2092e:	2b00      	cmp	r3, #0
   20930:	bfb4      	ite	lt
   20932:	2387      	movlt	r3, #135	; 0x87
   20934:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   20936:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2093a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2093e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   20940:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   20944:	d002      	beq.n	2094c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   20946:	7813      	ldrb	r3, [r2, #0]
   20948:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2094a:	e7f4      	b.n	20936 <gf_double+0x12>
	}
}
   2094c:	bd10      	pop	{r4, pc}

0002094e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2094e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   20950:	b120      	cbz	r0, 2095c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   20952:	2258      	movs	r2, #88	; 0x58
   20954:	2100      	movs	r1, #0
   20956:	f7ff f829 	bl	1f9ac <_set>
   2095a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2095c:	bd08      	pop	{r3, pc}

0002095e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2095e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20960:	4604      	mov	r4, r0
   20962:	b188      	cbz	r0, 20988 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   20964:	2210      	movs	r2, #16
   20966:	2100      	movs	r1, #0
   20968:	f7ff f820 	bl	1f9ac <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2096c:	2210      	movs	r2, #16
   2096e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20972:	2100      	movs	r1, #0
   20974:	f7ff f81a 	bl	1f9ac <_set>
	s->leftover_offset = 0;
   20978:	2300      	movs	r3, #0
   2097a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2097c:	2200      	movs	r2, #0
   2097e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20982:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   20986:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   20988:	bd10      	pop	{r4, pc}

0002098a <tc_cmac_setup>:
{
   2098a:	b570      	push	{r4, r5, r6, lr}
   2098c:	460d      	mov	r5, r1
   2098e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   20990:	4604      	mov	r4, r0
   20992:	b310      	cbz	r0, 209da <tc_cmac_setup+0x50>
   20994:	b311      	cbz	r1, 209dc <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   20996:	2258      	movs	r2, #88	; 0x58
   20998:	2100      	movs	r1, #0
   2099a:	f7ff f807 	bl	1f9ac <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2099e:	4629      	mov	r1, r5
	s->sched = sched;
   209a0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   209a2:	4630      	mov	r0, r6
   209a4:	f7e2 fbac 	bl	3100 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   209a8:	2210      	movs	r2, #16
   209aa:	2100      	movs	r1, #0
   209ac:	4620      	mov	r0, r4
   209ae:	f7fe fffd 	bl	1f9ac <_set>
	gf_double (s->K1, s->iv);
   209b2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   209b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   209b8:	4621      	mov	r1, r4
   209ba:	4620      	mov	r0, r4
   209bc:	f7e2 fbf6 	bl	31ac <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   209c0:	4621      	mov	r1, r4
   209c2:	4628      	mov	r0, r5
   209c4:	f7ff ffae 	bl	20924 <gf_double>
	gf_double (s->K2, s->K1);
   209c8:	4629      	mov	r1, r5
   209ca:	f104 0020 	add.w	r0, r4, #32
   209ce:	f7ff ffa9 	bl	20924 <gf_double>
	tc_cmac_init(s);
   209d2:	4620      	mov	r0, r4
   209d4:	f7ff ffc3 	bl	2095e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   209d8:	2001      	movs	r0, #1
}
   209da:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   209dc:	4608      	mov	r0, r1
   209de:	e7fc      	b.n	209da <tc_cmac_setup+0x50>

000209e0 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   209e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   209e4:	460d      	mov	r5, r1
   209e6:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   209e8:	4604      	mov	r4, r0
   209ea:	2800      	cmp	r0, #0
   209ec:	d061      	beq.n	20ab2 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   209ee:	b912      	cbnz	r2, 209f6 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   209f0:	2001      	movs	r0, #1
}
   209f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   209f6:	2900      	cmp	r1, #0
   209f8:	d05b      	beq.n	20ab2 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   209fa:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   209fe:	ea50 0301 	orrs.w	r3, r0, r1
   20a02:	d056      	beq.n	20ab2 <tc_cmac_update+0xd2>
	s->countdown--;
   20a04:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   20a08:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   20a0c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   20a10:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   20a14:	f1b8 0f00 	cmp.w	r8, #0
   20a18:	d02a      	beq.n	20a70 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   20a1a:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   20a1e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   20a22:	42be      	cmp	r6, r7
   20a24:	4420      	add	r0, r4
   20a26:	d208      	bcs.n	20a3a <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   20a28:	4633      	mov	r3, r6
   20a2a:	4631      	mov	r1, r6
   20a2c:	462a      	mov	r2, r5
   20a2e:	f7fe ffb0 	bl	1f992 <_copy>
			s->leftover_offset += data_length;
   20a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20a34:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   20a36:	6466      	str	r6, [r4, #68]	; 0x44
   20a38:	e7da      	b.n	209f0 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   20a3a:	463b      	mov	r3, r7
   20a3c:	462a      	mov	r2, r5
   20a3e:	4639      	mov	r1, r7
   20a40:	f7fe ffa7 	bl	1f992 <_copy>
		data_length -= remaining_space;
   20a44:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   20a46:	2300      	movs	r3, #0
   20a48:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   20a4a:	4446      	add	r6, r8
		data += remaining_space;
   20a4c:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a4e:	1e63      	subs	r3, r4, #1
   20a50:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   20a54:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20a58:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a5c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   20a5e:	ea82 0200 	eor.w	r2, r2, r0
   20a62:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a64:	d1f6      	bne.n	20a54 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   20a66:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20a68:	4621      	mov	r1, r4
   20a6a:	4620      	mov	r0, r4
   20a6c:	f7e2 fb9e 	bl	31ac <tc_aes_encrypt>
   20a70:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   20a74:	2e10      	cmp	r6, #16
   20a76:	d809      	bhi.n	20a8c <tc_cmac_update+0xac>
	if (data_length > 0) {
   20a78:	2e00      	cmp	r6, #0
   20a7a:	d0b9      	beq.n	209f0 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   20a7c:	4633      	mov	r3, r6
   20a7e:	462a      	mov	r2, r5
   20a80:	4631      	mov	r1, r6
   20a82:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20a86:	f7fe ff84 	bl	1f992 <_copy>
   20a8a:	e7d4      	b.n	20a36 <tc_cmac_update+0x56>
   20a8c:	1e63      	subs	r3, r4, #1
   20a8e:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   20a90:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20a94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20a98:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   20a9a:	ea82 0200 	eor.w	r2, r2, r0
   20a9e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20aa0:	d1f6      	bne.n	20a90 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   20aa2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20aa4:	4621      	mov	r1, r4
   20aa6:	4620      	mov	r0, r4
   20aa8:	f7e2 fb80 	bl	31ac <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   20aac:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   20aae:	3e10      	subs	r6, #16
   20ab0:	e7e0      	b.n	20a74 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   20ab2:	2000      	movs	r0, #0
   20ab4:	e79d      	b.n	209f2 <tc_cmac_update+0x12>

00020ab6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   20ab6:	b570      	push	{r4, r5, r6, lr}
   20ab8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   20aba:	4605      	mov	r5, r0
   20abc:	b1e8      	cbz	r0, 20afa <tc_cmac_final+0x44>
   20abe:	b369      	cbz	r1, 20b1c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   20ac0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   20ac2:	2a10      	cmp	r2, #16
   20ac4:	d11a      	bne.n	20afc <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   20ac6:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20ac8:	1e63      	subs	r3, r4, #1
   20aca:	3901      	subs	r1, #1
   20acc:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20ad0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20ad4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   20ad8:	4072      	eors	r2, r6
   20ada:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20ade:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20ae0:	ea82 0206 	eor.w	r2, r2, r6
   20ae4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20ae6:	d1f3      	bne.n	20ad0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   20ae8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20aea:	4621      	mov	r1, r4
   20aec:	4628      	mov	r0, r5
   20aee:	f7e2 fb5d 	bl	31ac <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20af2:	4620      	mov	r0, r4
   20af4:	f7ff ff2b 	bl	2094e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   20af8:	2001      	movs	r0, #1
}
   20afa:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20afc:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20b00:	2100      	movs	r1, #0
   20b02:	f1c2 0210 	rsb	r2, r2, #16
   20b06:	4420      	add	r0, r4
   20b08:	f7fe ff50 	bl	1f9ac <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20b0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20b0e:	4423      	add	r3, r4
   20b10:	2280      	movs	r2, #128	; 0x80
   20b12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   20b16:	f104 0120 	add.w	r1, r4, #32
   20b1a:	e7d5      	b.n	20ac8 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20b1c:	4608      	mov	r0, r1
   20b1e:	e7ec      	b.n	20afa <tc_cmac_final+0x44>

00020b20 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   20b20:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   20b22:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   20b24:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   20b26:	bf9d      	ittte	ls
   20b28:	6882      	ldrls	r2, [r0, #8]
   20b2a:	18d2      	addls	r2, r2, r3
   20b2c:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
   20b30:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   20b34:	bf94      	ite	ls
   20b36:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   20b38:	1a58      	subhi	r0, r3, r1
}
   20b3a:	4770      	bx	lr

00020b3c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   20b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   20b40:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   20b44:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   20b46:	1b3e      	subs	r6, r7, r4
  if (Rem > NumBytes) {
   20b48:	6840      	ldr	r0, [r0, #4]
   20b4a:	4296      	cmp	r6, r2
   20b4c:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   20b4e:	4688      	mov	r8, r1
   20b50:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   20b52:	d904      	bls.n	20b5e <_WriteNoCheck+0x22>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   20b54:	f001 f997 	bl	21e86 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   20b58:	60ec      	str	r4, [r5, #12]
}
   20b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   20b5e:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   20b60:	1be4      	subs	r4, r4, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   20b62:	f001 f990 	bl	21e86 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   20b66:	4622      	mov	r2, r4
   20b68:	eb08 0106 	add.w	r1, r8, r6
   20b6c:	6868      	ldr	r0, [r5, #4]
   20b6e:	e7f1      	b.n	20b54 <_WriteNoCheck+0x18>

00020b70 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   20b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   20b74:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   20b76:	4606      	mov	r6, r0
   20b78:	4689      	mov	r9, r1
   20b7a:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   20b7c:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   20b80:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   20b82:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   20b84:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   20b86:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   20b88:	bf28      	it	cs
   20b8a:	18e4      	addcs	r4, r4, r3
   20b8c:	3c01      	subs	r4, #1
   20b8e:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   20b90:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   20b92:	42bc      	cmp	r4, r7
   20b94:	bf28      	it	cs
   20b96:	463c      	movcs	r4, r7
   20b98:	4294      	cmp	r4, r2
   20b9a:	bf28      	it	cs
   20b9c:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   20b9e:	4649      	mov	r1, r9
   20ba0:	4428      	add	r0, r5
   20ba2:	4622      	mov	r2, r4
   20ba4:	f001 f96f 	bl	21e86 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   20ba8:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   20baa:	4425      	add	r5, r4
      WrOff = 0u;
   20bac:	42ab      	cmp	r3, r5
   20bae:	bf08      	it	eq
   20bb0:	2500      	moveq	r5, #0
  } while (NumBytes);
   20bb2:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   20bb4:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   20bb6:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   20bb8:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   20bba:	d1e1      	bne.n	20b80 <_WriteBlocking+0x10>
}
   20bbc:	4640      	mov	r0, r8
   20bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020bc2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   20bc2:	f7e2 bcbb 	b.w	353c <_DoInit>

00020bc6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   20bc6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   20bc8:	f7ff fffb 	bl	20bc2 <SEGGER_RTT_Init>

	return 0;
}
   20bcc:	2000      	movs	r0, #0
   20bce:	bd08      	pop	{r3, pc}

00020bd0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   20bd0:	2300      	movs	r3, #0
	list->head = NULL;
   20bd2:	e9c0 3300 	strd	r3, r3, [r0]
}
   20bd6:	4770      	bx	lr

00020bd8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   20bd8:	6803      	ldr	r3, [r0, #0]
   20bda:	b923      	cbnz	r3, 20be6 <log_list_add_tail+0xe>
		list->head = msg;
   20bdc:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   20bde:	2300      	movs	r3, #0
	list->tail = msg;
   20be0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   20be2:	600b      	str	r3, [r1, #0]
}
   20be4:	4770      	bx	lr
		list->tail->next = msg;
   20be6:	6843      	ldr	r3, [r0, #4]
   20be8:	6019      	str	r1, [r3, #0]
   20bea:	e7f8      	b.n	20bde <log_list_add_tail+0x6>

00020bec <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   20bec:	6800      	ldr	r0, [r0, #0]
   20bee:	4770      	bx	lr

00020bf0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   20bf0:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   20bf2:	b10b      	cbz	r3, 20bf8 <log_list_head_get+0x8>
		list->head = list->head->next;
   20bf4:	681a      	ldr	r2, [r3, #0]
   20bf6:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   20bf8:	4618      	mov	r0, r3
   20bfa:	4770      	bx	lr

00020bfc <dummy_timestamp>:
}
   20bfc:	2000      	movs	r0, #0
   20bfe:	4770      	bx	lr

00020c00 <timestamp_get>:
		return k_cycle_get_32();
   20c00:	f7e4 b888 	b.w	4d14 <z_timer_cycle_get_32>

00020c04 <log_0>:
{
   20c04:	b538      	push	{r3, r4, r5, lr}
   20c06:	4605      	mov	r5, r0
   20c08:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   20c0a:	f7e2 fd4d 	bl	36a8 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20c0e:	b128      	cbz	r0, 20c1c <log_0+0x18>
		msg->str = str;
   20c10:	6105      	str	r5, [r0, #16]
	msg_finalize(msg, src_level);
   20c12:	4621      	mov	r1, r4
}
   20c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	msg_finalize(msg, src_level);
   20c18:	f7e2 be18 	b.w	384c <msg_finalize>
}
   20c1c:	bd38      	pop	{r3, r4, r5, pc}

00020c1e <log_1>:
{
   20c1e:	b570      	push	{r4, r5, r6, lr}
   20c20:	4604      	mov	r4, r0
   20c22:	460e      	mov	r6, r1
   20c24:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       u32_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   20c26:	f7e2 fd3f 	bl	36a8 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20c2a:	b158      	cbz	r0, 20c44 <log_1+0x26>
		msg->str = str;
   20c2c:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1;
   20c2e:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
   20c30:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1;
   20c32:	2201      	movs	r2, #1
   20c34:	f362 1407 	bfi	r4, r2, #4, #4
   20c38:	7244      	strb	r4, [r0, #9]
	msg_finalize(msg, src_level);
   20c3a:	4629      	mov	r1, r5
}
   20c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	msg_finalize(msg, src_level);
   20c40:	f7e2 be04 	b.w	384c <msg_finalize>
}
   20c44:	bd70      	pop	{r4, r5, r6, pc}

00020c46 <log_2>:
{
   20c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c4a:	4605      	mov	r5, r0
   20c4c:	4688      	mov	r8, r1
   20c4e:	4617      	mov	r7, r2
   20c50:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       u32_t arg1,
					       u32_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   20c52:	f7e2 fd29 	bl	36a8 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20c56:	b160      	cbz	r0, 20c72 <log_2+0x2c>
		msg->str = str;
   20c58:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2;
   20c5a:	7a45      	ldrb	r5, [r0, #9]
   20c5c:	2302      	movs	r3, #2
   20c5e:	f363 1507 	bfi	r5, r3, #4, #4
   20c62:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   20c64:	e9c0 8705 	strd	r8, r7, [r0, #20]
	msg_finalize(msg, src_level);
   20c68:	4631      	mov	r1, r6
}
   20c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	msg_finalize(msg, src_level);
   20c6e:	f7e2 bded 	b.w	384c <msg_finalize>
}
   20c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020c76 <log_3>:
{
   20c76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20c7a:	4605      	mov	r5, r0
   20c7c:	4689      	mov	r9, r1
   20c7e:	4690      	mov	r8, r2
   20c80:	461f      	mov	r7, r3
   20c82:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       u32_t arg1,
					       u32_t arg2,
					       u32_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   20c86:	f7e2 fd0f 	bl	36a8 <z_log_msg_std_alloc>

	if (msg != NULL) {
   20c8a:	b168      	cbz	r0, 20ca8 <log_3+0x32>
		msg->str = str;
   20c8c:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3;
   20c8e:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
   20c90:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3;
   20c92:	2303      	movs	r3, #3
   20c94:	f363 1507 	bfi	r5, r3, #4, #4
   20c98:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
   20c9a:	e9c0 9805 	strd	r9, r8, [r0, #20]
	msg_finalize(msg, src_level);
   20c9e:	4631      	mov	r1, r6
}
   20ca0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	msg_finalize(msg, src_level);
   20ca4:	f7e2 bdd2 	b.w	384c <msg_finalize>
}
   20ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020cac <log_n>:
{
   20cac:	b510      	push	{r4, lr}
   20cae:	461c      	mov	r4, r3
	struct log_msg *msg = log_msg_create_n(str, args, narg);
   20cb0:	f000 f8a6 	bl	20e00 <log_msg_create_n>
	if (msg == NULL) {
   20cb4:	b120      	cbz	r0, 20cc0 <log_n+0x14>
	msg_finalize(msg, src_level);
   20cb6:	4621      	mov	r1, r4
}
   20cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	msg_finalize(msg, src_level);
   20cbc:	f7e2 bdc6 	b.w	384c <msg_finalize>
}
   20cc0:	bd10      	pop	{r4, pc}

00020cc2 <log_hexdump>:
{
   20cc2:	b510      	push	{r4, lr}
   20cc4:	461c      	mov	r4, r3
	struct log_msg *msg = log_msg_hexdump_create(str, data, length);
   20cc6:	f000 f8ef 	bl	20ea8 <log_msg_hexdump_create>
	if (msg == NULL) {
   20cca:	b120      	cbz	r0, 20cd6 <log_hexdump+0x14>
	msg_finalize(msg, src_level);
   20ccc:	4621      	mov	r1, r4
}
   20cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	msg_finalize(msg, src_level);
   20cd2:	f7e2 bdbb 	b.w	384c <msg_finalize>
}
   20cd6:	bd10      	pop	{r4, pc}

00020cd8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   20cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20cdc:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
   20cde:	8903      	ldrh	r3, [r0, #8]
{
   20ce0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
   20ce4:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   20ce6:	42a3      	cmp	r3, r4
{
   20ce8:	460e      	mov	r6, r1
	if (offset >= available_len) {
   20cea:	d803      	bhi.n	20cf4 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
   20cec:	2300      	movs	r3, #0
   20cee:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   20cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   20cf4:	6811      	ldr	r1, [r2, #0]
   20cf6:	4421      	add	r1, r4
   20cf8:	4299      	cmp	r1, r3
		*length = available_len - offset;
   20cfa:	bf84      	itt	hi
   20cfc:	1b19      	subhi	r1, r3, r4
   20cfe:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20d00:	2b0c      	cmp	r3, #12
	req_len = *length;
   20d02:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20d06:	d928      	bls.n	20d5a <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
   20d08:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   20d0a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   20d0e:	d82b      	bhi.n	20d68 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
   20d10:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20d12:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   20d14:	454b      	cmp	r3, r9
   20d16:	bf28      	it	cs
   20d18:	464b      	movcs	r3, r9
   20d1a:	461d      	mov	r5, r3
		if (put_op) {
   20d1c:	4420      	add	r0, r4
			(void)memcpy(&head_data[offset], data, cpy_len);
   20d1e:	461a      	mov	r2, r3
		if (put_op) {
   20d20:	b1ff      	cbz	r7, 20d62 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
   20d22:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   20d24:	f001 f8af 	bl	21e86 <memcpy>
		req_len -= cpy_len;
   20d28:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   20d2c:	442e      	add	r6, r5
	while (req_len > 0) {
   20d2e:	f1b9 0f00 	cmp.w	r9, #0
   20d32:	d0dd      	beq.n	20cf0 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   20d34:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   20d38:	454d      	cmp	r5, r9
   20d3a:	bf28      	it	cs
   20d3c:	464d      	movcs	r5, r9
		if (put_op) {
   20d3e:	1d20      	adds	r0, r4, #4
   20d40:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   20d42:	462a      	mov	r2, r5
		if (put_op) {
   20d44:	b1bf      	cbz	r7, 20d76 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
   20d46:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   20d48:	f001 f89d 	bl	21e86 <memcpy>
		req_len -= cpy_len;
   20d4c:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   20d50:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   20d54:	442e      	add	r6, r5
		offset = 0;
   20d56:	2400      	movs	r4, #0
   20d58:	e7e9      	b.n	20d2e <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
   20d5a:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   20d5c:	f04f 0800 	mov.w	r8, #0
   20d60:	e7d8      	b.n	20d14 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
   20d62:	4601      	mov	r1, r0
   20d64:	4630      	mov	r0, r6
   20d66:	e7dd      	b.n	20d24 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
   20d68:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   20d6a:	2c1b      	cmp	r4, #27
   20d6c:	d9df      	bls.n	20d2e <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
   20d6e:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   20d72:	3c1c      	subs	r4, #28
   20d74:	e7f9      	b.n	20d6a <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
   20d76:	4601      	mov	r1, r0
   20d78:	4630      	mov	r0, r6
   20d7a:	e7e5      	b.n	20d48 <log_msg_hexdump_data_op+0x70>

00020d7c <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20d7c:	3004      	adds	r0, #4
   20d7e:	f3bf 8f5b 	dmb	ish
   20d82:	e850 3f00 	ldrex	r3, [r0]
   20d86:	3301      	adds	r3, #1
   20d88:	e840 3200 	strex	r2, r3, [r0]
   20d8c:	2a00      	cmp	r2, #0
   20d8e:	d1f8      	bne.n	20d82 <log_msg_get+0x6>
   20d90:	f3bf 8f5b 	dmb	ish
}
   20d94:	4770      	bx	lr

00020d96 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   20d96:	7a40      	ldrb	r0, [r0, #9]
}
   20d98:	0900      	lsrs	r0, r0, #4
   20d9a:	4770      	bx	lr

00020d9c <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   20d9c:	7a43      	ldrb	r3, [r0, #9]
   20d9e:	091b      	lsrs	r3, r3, #4
   20da0:	428b      	cmp	r3, r1
   20da2:	d916      	bls.n	20dd2 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   20da4:	2b03      	cmp	r3, #3
   20da6:	d803      	bhi.n	20db0 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
   20da8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   20dac:	6948      	ldr	r0, [r1, #20]
   20dae:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   20db0:	2901      	cmp	r1, #1
   20db2:	d803      	bhi.n	20dbc <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
   20db4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   20db8:	6988      	ldr	r0, [r1, #24]
   20dba:	4770      	bx	lr
	cont = msg->payload.ext.next;
   20dbc:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   20dbe:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   20dc0:	2906      	cmp	r1, #6
   20dc2:	d803      	bhi.n	20dcc <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
   20dc4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   20dc8:	6848      	ldr	r0, [r1, #4]
   20dca:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
   20dcc:	3907      	subs	r1, #7
		cont = cont->next;
   20dce:	681b      	ldr	r3, [r3, #0]
   20dd0:	e7f6      	b.n	20dc0 <log_msg_arg_get+0x24>
		return 0;
   20dd2:	2000      	movs	r0, #0
}
   20dd4:	4770      	bx	lr

00020dd6 <log_msg_put>:
{
   20dd6:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20dd8:	1d02      	adds	r2, r0, #4
   20dda:	f3bf 8f5b 	dmb	ish
   20dde:	e852 1f00 	ldrex	r1, [r2]
   20de2:	3901      	subs	r1, #1
   20de4:	e842 1c00 	strex	ip, r1, [r2]
   20de8:	f1bc 0f00 	cmp.w	ip, #0
   20dec:	d1f7      	bne.n	20dde <log_msg_put+0x8>
   20dee:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   20df2:	685b      	ldr	r3, [r3, #4]
   20df4:	b90b      	cbnz	r3, 20dfa <log_msg_put+0x24>
		msg_free(msg);
   20df6:	f7e2 be87 	b.w	3b08 <msg_free>
}
   20dfa:	4770      	bx	lr

00020dfc <log_msg_str_get>:
}
   20dfc:	6900      	ldr	r0, [r0, #16]
   20dfe:	4770      	bx	lr

00020e00 <log_msg_create_n>:
{
   20e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e04:	4682      	mov	sl, r0
   20e06:	4688      	mov	r8, r1
   20e08:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   20e0a:	f7e2 fe6b 	bl	3ae4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   20e0e:	4604      	mov	r4, r0
   20e10:	b330      	cbz	r0, 20e60 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   20e12:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0;
   20e14:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   20e16:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   20e18:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0;
   20e1a:	8106      	strh	r6, [r0, #8]
   20e1c:	d909      	bls.n	20e32 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   20e1e:	2202      	movs	r2, #2
   20e20:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   20e22:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   20e26:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   20e2a:	6146      	str	r6, [r0, #20]
	while (n > 0) {
   20e2c:	f1b9 0f00 	cmp.w	r9, #0
   20e30:	dc0e      	bgt.n	20e50 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   20e32:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   20e34:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   20e38:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   20e3c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   20e3e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   20e40:	d818      	bhi.n	20e74 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   20e42:	00aa      	lsls	r2, r5, #2
   20e44:	4641      	mov	r1, r8
   20e46:	f104 0014 	add.w	r0, r4, #20
   20e4a:	f001 f81c 	bl	21e86 <memcpy>
		nargs  = 0U;
   20e4e:	e007      	b.n	20e60 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   20e50:	f7e2 fe48 	bl	3ae4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   20e54:	4607      	mov	r7, r0
   20e56:	b930      	cbnz	r0, 20e66 <log_msg_create_n+0x66>
			msg_free(msg);
   20e58:	4620      	mov	r0, r4
   20e5a:	f7e2 fe55 	bl	3b08 <msg_free>
			return NULL;
   20e5e:	463c      	mov	r4, r7
}
   20e60:	4620      	mov	r0, r4
   20e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   20e66:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   20e6a:	f1a9 0907 	sub.w	r9, r9, #7
   20e6e:	6006      	str	r6, [r0, #0]
		next = &cont->next;
   20e70:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   20e72:	e7db      	b.n	20e2c <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   20e74:	4641      	mov	r1, r8
   20e76:	2208      	movs	r2, #8
   20e78:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   20e7c:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   20e7e:	f001 f802 	bl	21e86 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   20e82:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   20e84:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   20e88:	2d07      	cmp	r5, #7
   20e8a:	462e      	mov	r6, r5
   20e8c:	bf28      	it	cs
   20e8e:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   20e90:	ea4f 0986 	mov.w	r9, r6, lsl #2
   20e94:	4641      	mov	r1, r8
   20e96:	1d38      	adds	r0, r7, #4
   20e98:	464a      	mov	r2, r9
   20e9a:	f000 fff4 	bl	21e86 <memcpy>
	while (nargs != 0) {
   20e9e:	1bad      	subs	r5, r5, r6
		args += cpy_args;
   20ea0:	44c8      	add	r8, r9
		cont = cont->next;
   20ea2:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0) {
   20ea4:	d1f0      	bne.n	20e88 <log_msg_create_n+0x88>
   20ea6:	e7db      	b.n	20e60 <log_msg_create_n+0x60>

00020ea8 <log_msg_hexdump_create>:
{
   20ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   20eac:	f643 75ff 	movw	r5, #16383	; 0x3fff
   20eb0:	4295      	cmp	r5, r2
{
   20eb2:	4680      	mov	r8, r0
   20eb4:	460e      	mov	r6, r1
   20eb6:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   20eb8:	bf28      	it	cs
   20eba:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   20ebc:	f7e2 fe12 	bl	3ae4 <log_msg_chunk_alloc>
	if (msg == NULL) {
   20ec0:	4604      	mov	r4, r0
   20ec2:	b380      	cbz	r0, 20f26 <log_msg_hexdump_create+0x7e>
	msg->hdr.ref_cnt = 1;
   20ec4:	2301      	movs	r3, #1
   20ec6:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   20ec8:	7a03      	ldrb	r3, [r0, #8]
	msg->str = str;
   20eca:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   20ece:	f043 0301 	orr.w	r3, r3, #1
   20ed2:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   20ed4:	8903      	ldrh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20ed6:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.length = length;
   20ed8:	f365 038f 	bfi	r3, r5, #2, #14
   20edc:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20ede:	f100 0814 	add.w	r8, r0, #20
   20ee2:	d917      	bls.n	20f14 <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   20ee4:	2208      	movs	r2, #8
   20ee6:	4631      	mov	r1, r6
   20ee8:	3018      	adds	r0, #24
   20eea:	f000 ffcc 	bl	21e86 <memcpy>
		msg->hdr.params.generic.ext = 1;
   20eee:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   20ef0:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   20ef2:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   20ef6:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   20ef8:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20efa:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20efc:	3d08      	subs	r5, #8
	while (length > 0) {
   20efe:	4699      	mov	r9, r3
   20f00:	b18d      	cbz	r5, 20f26 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   20f02:	f7e2 fdef 	bl	3ae4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   20f06:	4607      	mov	r7, r0
   20f08:	b980      	cbnz	r0, 20f2c <log_msg_hexdump_create+0x84>
			msg_free(msg);
   20f0a:	4620      	mov	r0, r4
   20f0c:	f7e2 fdfc 	bl	3b08 <msg_free>
			return NULL;
   20f10:	463c      	mov	r4, r7
   20f12:	e008      	b.n	20f26 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   20f14:	462a      	mov	r2, r5
   20f16:	4631      	mov	r1, r6
   20f18:	4640      	mov	r0, r8
   20f1a:	f000 ffb4 	bl	21e86 <memcpy>
		msg->hdr.params.generic.ext = 0;
   20f1e:	7a23      	ldrb	r3, [r4, #8]
   20f20:	f36f 0341 	bfc	r3, #1, #1
   20f24:	7223      	strb	r3, [r4, #8]
}
   20f26:	4620      	mov	r0, r4
   20f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   20f2c:	2d1c      	cmp	r5, #28
   20f2e:	462f      	mov	r7, r5
   20f30:	bf28      	it	cs
   20f32:	271c      	movcs	r7, #28
		*prev_cont = cont;
   20f34:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   20f38:	4631      	mov	r1, r6
		cont->next = NULL;
   20f3a:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   20f3e:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   20f40:	463a      	mov	r2, r7
   20f42:	3004      	adds	r0, #4
   20f44:	f000 ff9f 	bl	21e86 <memcpy>
		data += chunk_length;
   20f48:	443e      	add	r6, r7
		length -= chunk_length;
   20f4a:	1bed      	subs	r5, r5, r7
   20f4c:	e7d8      	b.n	20f00 <log_msg_hexdump_create+0x58>

00020f4e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   20f4e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   20f50:	2400      	movs	r4, #0
   20f52:	9400      	str	r4, [sp, #0]
   20f54:	f7ff fec0 	bl	20cd8 <log_msg_hexdump_data_op>
}
   20f58:	b002      	add	sp, #8
   20f5a:	bd10      	pop	{r4, pc}

00020f5c <buffer_write>:
{
   20f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f5e:	4606      	mov	r6, r0
   20f60:	460d      	mov	r5, r1
   20f62:	4614      	mov	r4, r2
   20f64:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   20f66:	4621      	mov	r1, r4
   20f68:	4628      	mov	r0, r5
   20f6a:	463a      	mov	r2, r7
   20f6c:	47b0      	blx	r6
	} while (len != 0);
   20f6e:	1a24      	subs	r4, r4, r0
		buf += processed;
   20f70:	4405      	add	r5, r0
	} while (len != 0);
   20f72:	d1f8      	bne.n	20f66 <buffer_write+0xa>
}
   20f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020f76 <std_print>:
{
   20f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f7a:	b08e      	sub	sp, #56	; 0x38
   20f7c:	af0e      	add	r7, sp, #56	; 0x38
   20f7e:	4681      	mov	r9, r0
   20f80:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   20f82:	f7ff ff3b 	bl	20dfc <log_msg_str_get>
   20f86:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   20f88:	4648      	mov	r0, r9
   20f8a:	f7ff ff04 	bl	20d96 <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   20f8e:	0083      	lsls	r3, r0, #2
   20f90:	3307      	adds	r3, #7
   20f92:	f023 0307 	bic.w	r3, r3, #7
   20f96:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
   20f9a:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   20f9c:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   20f9e:	f04f 0800 	mov.w	r8, #0
   20fa2:	45d0      	cmp	r8, sl
   20fa4:	d116      	bne.n	20fd4 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   20fa6:	4648      	mov	r0, r9
   20fa8:	f7ff fef5 	bl	20d96 <log_msg_nargs_get>
   20fac:	280f      	cmp	r0, #15
   20fae:	d81e      	bhi.n	20fee <std_print+0x78>
   20fb0:	e8df f010 	tbh	[pc, r0, lsl #1]
   20fb4:	00200019 	.word	0x00200019
   20fb8:	002d0026 	.word	0x002d0026
   20fbc:	00410036 	.word	0x00410036
   20fc0:	005d004e 	.word	0x005d004e
   20fc4:	0081006e 	.word	0x0081006e
   20fc8:	00ad0096 	.word	0x00ad0096
   20fcc:	00e100c6 	.word	0x00e100c6
   20fd0:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   20fd4:	4641      	mov	r1, r8
   20fd6:	4648      	mov	r0, r9
   20fd8:	f7ff fee0 	bl	20d9c <log_msg_arg_get>
   20fdc:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
   20fe0:	f108 0801 	add.w	r8, r8, #1
   20fe4:	e7dd      	b.n	20fa2 <std_print+0x2c>
		print_formatted(log_output, str);
   20fe6:	4631      	mov	r1, r6
   20fe8:	4628      	mov	r0, r5
   20fea:	f7e2 fdbf 	bl	3b6c <print_formatted>
}
   20fee:	46bd      	mov	sp, r7
   20ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   20ff4:	6822      	ldr	r2, [r4, #0]
   20ff6:	4631      	mov	r1, r6
   20ff8:	4628      	mov	r0, r5
   20ffa:	f7e2 fdb7 	bl	3b6c <print_formatted>
		break;
   20ffe:	e7f6      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   21000:	e9d4 2300 	ldrd	r2, r3, [r4]
   21004:	4631      	mov	r1, r6
   21006:	4628      	mov	r0, r5
   21008:	f7e2 fdb0 	bl	3b6c <print_formatted>
		break;
   2100c:	e7ef      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   2100e:	68a3      	ldr	r3, [r4, #8]
   21010:	9300      	str	r3, [sp, #0]
   21012:	e9d4 2300 	ldrd	r2, r3, [r4]
   21016:	4631      	mov	r1, r6
   21018:	4628      	mov	r0, r5
   2101a:	f7e2 fda7 	bl	3b6c <print_formatted>
		break;
   2101e:	e7e6      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21020:	68e3      	ldr	r3, [r4, #12]
   21022:	9301      	str	r3, [sp, #4]
   21024:	68a3      	ldr	r3, [r4, #8]
   21026:	9300      	str	r3, [sp, #0]
   21028:	e9d4 2300 	ldrd	r2, r3, [r4]
   2102c:	4631      	mov	r1, r6
   2102e:	4628      	mov	r0, r5
   21030:	f7e2 fd9c 	bl	3b6c <print_formatted>
		break;
   21034:	e7db      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21036:	6923      	ldr	r3, [r4, #16]
   21038:	9302      	str	r3, [sp, #8]
   2103a:	68e3      	ldr	r3, [r4, #12]
   2103c:	9301      	str	r3, [sp, #4]
   2103e:	68a3      	ldr	r3, [r4, #8]
   21040:	9300      	str	r3, [sp, #0]
   21042:	e9d4 2300 	ldrd	r2, r3, [r4]
   21046:	4631      	mov	r1, r6
   21048:	4628      	mov	r0, r5
   2104a:	f7e2 fd8f 	bl	3b6c <print_formatted>
		break;
   2104e:	e7ce      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21050:	6963      	ldr	r3, [r4, #20]
   21052:	9303      	str	r3, [sp, #12]
   21054:	6923      	ldr	r3, [r4, #16]
   21056:	9302      	str	r3, [sp, #8]
   21058:	68e3      	ldr	r3, [r4, #12]
   2105a:	9301      	str	r3, [sp, #4]
   2105c:	68a3      	ldr	r3, [r4, #8]
   2105e:	9300      	str	r3, [sp, #0]
   21060:	e9d4 2300 	ldrd	r2, r3, [r4]
   21064:	4631      	mov	r1, r6
   21066:	4628      	mov	r0, r5
   21068:	f7e2 fd80 	bl	3b6c <print_formatted>
		break;
   2106c:	e7bf      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2106e:	69a3      	ldr	r3, [r4, #24]
   21070:	9304      	str	r3, [sp, #16]
   21072:	6963      	ldr	r3, [r4, #20]
   21074:	9303      	str	r3, [sp, #12]
   21076:	6923      	ldr	r3, [r4, #16]
   21078:	9302      	str	r3, [sp, #8]
   2107a:	68e3      	ldr	r3, [r4, #12]
   2107c:	9301      	str	r3, [sp, #4]
   2107e:	68a3      	ldr	r3, [r4, #8]
   21080:	9300      	str	r3, [sp, #0]
   21082:	e9d4 2300 	ldrd	r2, r3, [r4]
   21086:	4631      	mov	r1, r6
   21088:	4628      	mov	r0, r5
   2108a:	f7e2 fd6f 	bl	3b6c <print_formatted>
		break;
   2108e:	e7ae      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21090:	69e3      	ldr	r3, [r4, #28]
   21092:	9305      	str	r3, [sp, #20]
   21094:	69a3      	ldr	r3, [r4, #24]
   21096:	9304      	str	r3, [sp, #16]
   21098:	6963      	ldr	r3, [r4, #20]
   2109a:	9303      	str	r3, [sp, #12]
   2109c:	6923      	ldr	r3, [r4, #16]
   2109e:	9302      	str	r3, [sp, #8]
   210a0:	68e3      	ldr	r3, [r4, #12]
   210a2:	9301      	str	r3, [sp, #4]
   210a4:	68a3      	ldr	r3, [r4, #8]
   210a6:	9300      	str	r3, [sp, #0]
   210a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   210ac:	4631      	mov	r1, r6
   210ae:	4628      	mov	r0, r5
   210b0:	f7e2 fd5c 	bl	3b6c <print_formatted>
		break;
   210b4:	e79b      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   210b6:	6a23      	ldr	r3, [r4, #32]
   210b8:	9306      	str	r3, [sp, #24]
   210ba:	69e3      	ldr	r3, [r4, #28]
   210bc:	9305      	str	r3, [sp, #20]
   210be:	69a3      	ldr	r3, [r4, #24]
   210c0:	9304      	str	r3, [sp, #16]
   210c2:	6963      	ldr	r3, [r4, #20]
   210c4:	9303      	str	r3, [sp, #12]
   210c6:	6923      	ldr	r3, [r4, #16]
   210c8:	9302      	str	r3, [sp, #8]
   210ca:	68e3      	ldr	r3, [r4, #12]
   210cc:	9301      	str	r3, [sp, #4]
   210ce:	68a3      	ldr	r3, [r4, #8]
   210d0:	9300      	str	r3, [sp, #0]
   210d2:	e9d4 2300 	ldrd	r2, r3, [r4]
   210d6:	4631      	mov	r1, r6
   210d8:	4628      	mov	r0, r5
   210da:	f7e2 fd47 	bl	3b6c <print_formatted>
		break;
   210de:	e786      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   210e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   210e2:	9307      	str	r3, [sp, #28]
   210e4:	6a23      	ldr	r3, [r4, #32]
   210e6:	9306      	str	r3, [sp, #24]
   210e8:	69e3      	ldr	r3, [r4, #28]
   210ea:	9305      	str	r3, [sp, #20]
   210ec:	69a3      	ldr	r3, [r4, #24]
   210ee:	9304      	str	r3, [sp, #16]
   210f0:	6963      	ldr	r3, [r4, #20]
   210f2:	9303      	str	r3, [sp, #12]
   210f4:	6923      	ldr	r3, [r4, #16]
   210f6:	9302      	str	r3, [sp, #8]
   210f8:	68e3      	ldr	r3, [r4, #12]
   210fa:	9301      	str	r3, [sp, #4]
   210fc:	68a3      	ldr	r3, [r4, #8]
   210fe:	9300      	str	r3, [sp, #0]
   21100:	e9d4 2300 	ldrd	r2, r3, [r4]
   21104:	4631      	mov	r1, r6
   21106:	4628      	mov	r0, r5
   21108:	f7e2 fd30 	bl	3b6c <print_formatted>
		break;
   2110c:	e76f      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2110e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21110:	9308      	str	r3, [sp, #32]
   21112:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21114:	9307      	str	r3, [sp, #28]
   21116:	6a23      	ldr	r3, [r4, #32]
   21118:	9306      	str	r3, [sp, #24]
   2111a:	69e3      	ldr	r3, [r4, #28]
   2111c:	9305      	str	r3, [sp, #20]
   2111e:	69a3      	ldr	r3, [r4, #24]
   21120:	9304      	str	r3, [sp, #16]
   21122:	6963      	ldr	r3, [r4, #20]
   21124:	9303      	str	r3, [sp, #12]
   21126:	6923      	ldr	r3, [r4, #16]
   21128:	9302      	str	r3, [sp, #8]
   2112a:	68e3      	ldr	r3, [r4, #12]
   2112c:	9301      	str	r3, [sp, #4]
   2112e:	68a3      	ldr	r3, [r4, #8]
   21130:	9300      	str	r3, [sp, #0]
   21132:	e9d4 2300 	ldrd	r2, r3, [r4]
   21136:	4631      	mov	r1, r6
   21138:	4628      	mov	r0, r5
   2113a:	f7e2 fd17 	bl	3b6c <print_formatted>
		break;
   2113e:	e756      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21140:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21142:	9309      	str	r3, [sp, #36]	; 0x24
   21144:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21146:	9308      	str	r3, [sp, #32]
   21148:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2114a:	9307      	str	r3, [sp, #28]
   2114c:	6a23      	ldr	r3, [r4, #32]
   2114e:	9306      	str	r3, [sp, #24]
   21150:	69e3      	ldr	r3, [r4, #28]
   21152:	9305      	str	r3, [sp, #20]
   21154:	69a3      	ldr	r3, [r4, #24]
   21156:	9304      	str	r3, [sp, #16]
   21158:	6963      	ldr	r3, [r4, #20]
   2115a:	9303      	str	r3, [sp, #12]
   2115c:	6923      	ldr	r3, [r4, #16]
   2115e:	9302      	str	r3, [sp, #8]
   21160:	68e3      	ldr	r3, [r4, #12]
   21162:	9301      	str	r3, [sp, #4]
   21164:	68a3      	ldr	r3, [r4, #8]
   21166:	9300      	str	r3, [sp, #0]
   21168:	e9d4 2300 	ldrd	r2, r3, [r4]
   2116c:	4631      	mov	r1, r6
   2116e:	4628      	mov	r0, r5
   21170:	f7e2 fcfc 	bl	3b6c <print_formatted>
		break;
   21174:	e73b      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21176:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21178:	930a      	str	r3, [sp, #40]	; 0x28
   2117a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2117c:	9309      	str	r3, [sp, #36]	; 0x24
   2117e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21180:	9308      	str	r3, [sp, #32]
   21182:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21184:	9307      	str	r3, [sp, #28]
   21186:	6a23      	ldr	r3, [r4, #32]
   21188:	9306      	str	r3, [sp, #24]
   2118a:	69e3      	ldr	r3, [r4, #28]
   2118c:	9305      	str	r3, [sp, #20]
   2118e:	69a3      	ldr	r3, [r4, #24]
   21190:	9304      	str	r3, [sp, #16]
   21192:	6963      	ldr	r3, [r4, #20]
   21194:	9303      	str	r3, [sp, #12]
   21196:	6923      	ldr	r3, [r4, #16]
   21198:	9302      	str	r3, [sp, #8]
   2119a:	68e3      	ldr	r3, [r4, #12]
   2119c:	9301      	str	r3, [sp, #4]
   2119e:	68a3      	ldr	r3, [r4, #8]
   211a0:	9300      	str	r3, [sp, #0]
   211a2:	e9d4 2300 	ldrd	r2, r3, [r4]
   211a6:	4631      	mov	r1, r6
   211a8:	4628      	mov	r0, r5
   211aa:	f7e2 fcdf 	bl	3b6c <print_formatted>
		break;
   211ae:	e71e      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   211b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   211b2:	930b      	str	r3, [sp, #44]	; 0x2c
   211b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   211b6:	930a      	str	r3, [sp, #40]	; 0x28
   211b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   211ba:	9309      	str	r3, [sp, #36]	; 0x24
   211bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   211be:	9308      	str	r3, [sp, #32]
   211c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   211c2:	9307      	str	r3, [sp, #28]
   211c4:	6a23      	ldr	r3, [r4, #32]
   211c6:	9306      	str	r3, [sp, #24]
   211c8:	69e3      	ldr	r3, [r4, #28]
   211ca:	9305      	str	r3, [sp, #20]
   211cc:	69a3      	ldr	r3, [r4, #24]
   211ce:	9304      	str	r3, [sp, #16]
   211d0:	6963      	ldr	r3, [r4, #20]
   211d2:	9303      	str	r3, [sp, #12]
   211d4:	6923      	ldr	r3, [r4, #16]
   211d6:	9302      	str	r3, [sp, #8]
   211d8:	68e3      	ldr	r3, [r4, #12]
   211da:	9301      	str	r3, [sp, #4]
   211dc:	68a3      	ldr	r3, [r4, #8]
   211de:	9300      	str	r3, [sp, #0]
   211e0:	e9d4 2300 	ldrd	r2, r3, [r4]
   211e4:	4631      	mov	r1, r6
   211e6:	4628      	mov	r0, r5
   211e8:	f7e2 fcc0 	bl	3b6c <print_formatted>
		break;
   211ec:	e6ff      	b.n	20fee <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   211ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   211f0:	930c      	str	r3, [sp, #48]	; 0x30
   211f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   211f4:	930b      	str	r3, [sp, #44]	; 0x2c
   211f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   211f8:	930a      	str	r3, [sp, #40]	; 0x28
   211fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   211fc:	9309      	str	r3, [sp, #36]	; 0x24
   211fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21200:	9308      	str	r3, [sp, #32]
   21202:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21204:	9307      	str	r3, [sp, #28]
   21206:	6a23      	ldr	r3, [r4, #32]
   21208:	9306      	str	r3, [sp, #24]
   2120a:	69e3      	ldr	r3, [r4, #28]
   2120c:	9305      	str	r3, [sp, #20]
   2120e:	69a3      	ldr	r3, [r4, #24]
   21210:	9304      	str	r3, [sp, #16]
   21212:	6963      	ldr	r3, [r4, #20]
   21214:	9303      	str	r3, [sp, #12]
   21216:	6923      	ldr	r3, [r4, #16]
   21218:	9302      	str	r3, [sp, #8]
   2121a:	68e3      	ldr	r3, [r4, #12]
   2121c:	9301      	str	r3, [sp, #4]
   2121e:	68a3      	ldr	r3, [r4, #8]
   21220:	9300      	str	r3, [sp, #0]
   21222:	e9d4 2300 	ldrd	r2, r3, [r4]
   21226:	4631      	mov	r1, r6
   21228:	4628      	mov	r0, r5
   2122a:	f7e2 fc9f 	bl	3b6c <print_formatted>
}
   2122e:	e6de      	b.n	20fee <std_print+0x78>

00021230 <log_output_flush>:
		     log_output->control_block->offset,
   21230:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   21232:	6881      	ldr	r1, [r0, #8]
{
   21234:	b510      	push	{r4, lr}
   21236:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   21238:	e9d2 2300 	ldrd	r2, r3, [r2]
   2123c:	6800      	ldr	r0, [r0, #0]
   2123e:	f7ff fe8d 	bl	20f5c <buffer_write>
	log_output->control_block->offset = 0;
   21242:	6863      	ldr	r3, [r4, #4]
   21244:	2200      	movs	r2, #0
   21246:	601a      	str	r2, [r3, #0]
}
   21248:	bd10      	pop	{r4, pc}

0002124a <out_func>:
{
   2124a:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   2124c:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   21250:	681b      	ldr	r3, [r3, #0]
   21252:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   21254:	684a      	ldr	r2, [r1, #4]
   21256:	6813      	ldr	r3, [r2, #0]
   21258:	3301      	adds	r3, #1
   2125a:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
   2125c:	68ca      	ldr	r2, [r1, #12]
   2125e:	4293      	cmp	r3, r2
   21260:	d102      	bne.n	21268 <out_func+0x1e>
		log_output_flush(out_ctx);
   21262:	4608      	mov	r0, r1
   21264:	f7ff ffe4 	bl	21230 <log_output_flush>
}
   21268:	2000      	movs	r0, #0
   2126a:	bd08      	pop	{r3, pc}

0002126c <char_out>:
{
   2126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2126e:	460d      	mov	r5, r1
   21270:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   21272:	4604      	mov	r4, r0
   21274:	1847      	adds	r7, r0, r1
   21276:	42bc      	cmp	r4, r7
   21278:	d101      	bne.n	2127e <char_out+0x12>
}
   2127a:	4628      	mov	r0, r5
   2127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2127e:	6873      	ldr	r3, [r6, #4]
   21280:	f814 1b01 	ldrb.w	r1, [r4], #1
   21284:	685b      	ldr	r3, [r3, #4]
   21286:	4630      	mov	r0, r6
   21288:	4798      	blx	r3
   2128a:	e7f4      	b.n	21276 <char_out+0xa>

0002128c <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   2128c:	b538      	push	{r3, r4, r5, lr}
		cur = fcb_getnext_sector(fcb, cur);
   2128e:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
   21290:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   21292:	f000 fa8e 	bl	217b2 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   21296:	6a23      	ldr	r3, [r4, #32]
   21298:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   2129a:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   2129c:	d00f      	beq.n	212be <fcb_append_to_scratch+0x32>
	struct flash_sector *sector;
	int rc;

	sector = fcb_new_sector(fcb, 0);
	if (!sector) {
   2129e:	b170      	cbz	r0, 212be <fcb_append_to_scratch+0x32>
		return FCB_ERR_NOSPACE;
	}
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   212a0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   212a2:	3201      	adds	r2, #1
   212a4:	4601      	mov	r1, r0
   212a6:	b292      	uxth	r2, r2
   212a8:	4620      	mov	r0, r4
   212aa:	f000 f932 	bl	21512 <fcb_sector_hdr_init>
	if (rc) {
   212ae:	b928      	cbnz	r0, 212bc <fcb_append_to_scratch+0x30>
		return rc;
	}
	fcb->f_active.fe_sector = sector;
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   212b0:	2308      	movs	r3, #8
   212b2:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   212b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   212b6:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   212b8:	3301      	adds	r3, #1
   212ba:	86a3      	strh	r3, [r4, #52]	; 0x34
	return FCB_OK;
}
   212bc:	bd38      	pop	{r3, r4, r5, pc}
		return FCB_ERR_NOSPACE;
   212be:	f06f 0003 	mvn.w	r0, #3
   212c2:	e7fb      	b.n	212bc <fcb_append_to_scratch+0x30>

000212c4 <fcb_append>:

int
fcb_append(struct fcb *fcb, u16_t len, struct fcb_entry *append_loc)
{
   212c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212c8:	b085      	sub	sp, #20
   212ca:	4604      	mov	r4, r0
	struct fcb_entry *active;
	u8_t tmp_str[2];
	int cnt;
	int rc;

	cnt = fcb_put_len(tmp_str, len);
   212cc:	a803      	add	r0, sp, #12
{
   212ce:	460d      	mov	r5, r1
   212d0:	4616      	mov	r6, r2
	cnt = fcb_put_len(tmp_str, len);
   212d2:	f000 f8f6 	bl	214c2 <fcb_put_len>
	if (cnt < 0) {
   212d6:	f1b0 0800 	subs.w	r8, r0, #0
   212da:	db67      	blt.n	213ac <fcb_append+0xe8>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   212dc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(u8_t *buf, u16_t len);
int fcb_get_len(u8_t *buf, u16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, u16_t len)
{
	if (fcb->f_align <= 1) {
   212e0:	2b01      	cmp	r3, #1
   212e2:	4629      	mov	r1, r5
   212e4:	fa1f f788 	uxth.w	r7, r8
   212e8:	d906      	bls.n	212f8 <fcb_append+0x34>
		return len;
	}
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   212ea:	1e5d      	subs	r5, r3, #1
   212ec:	4419      	add	r1, r3
   212ee:	425a      	negs	r2, r3
   212f0:	442f      	add	r7, r5
   212f2:	3901      	subs	r1, #1
   212f4:	4017      	ands	r7, r2
   212f6:	4011      	ands	r1, r2
	if (fcb->f_align <= 1) {
   212f8:	2b01      	cmp	r3, #1
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   212fa:	b20d      	sxth	r5, r1

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   212fc:	f104 0a0c 	add.w	sl, r4, #12
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   21300:	bf86      	itte	hi
   21302:	4259      	neghi	r1, r3
   21304:	400b      	andhi	r3, r1
		return len;
   21306:	2301      	movls	r3, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   21308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2130c:	4650      	mov	r0, sl
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2130e:	441d      	add	r5, r3
   21310:	f7fd f842 	bl	1e398 <z_impl_k_mutex_lock>
   21314:	b2ad      	uxth	r5, r5
	if (rc) {
   21316:	4680      	mov	r8, r0
   21318:	2800      	cmp	r0, #0
   2131a:	d153      	bne.n	213c4 <fcb_append+0x100>
		return FCB_ERR_ARGS;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   2131c:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   21320:	443b      	add	r3, r7
   21322:	684a      	ldr	r2, [r1, #4]
   21324:	442b      	add	r3, r5
   21326:	4293      	cmp	r3, r2
   21328:	d92b      	bls.n	21382 <fcb_append+0xbe>
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   2132a:	f894 b006 	ldrb.w	fp, [r4, #6]
	prev = NULL;
   2132e:	4681      	mov	r9, r0
		cur = fcb_getnext_sector(fcb, cur);
   21330:	4620      	mov	r0, r4
   21332:	f000 fa3e 	bl	217b2 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   21336:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   21338:	f1b9 0f00 	cmp.w	r9, #0
   2133c:	bf08      	it	eq
   2133e:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   21340:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   21342:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   21344:	d038      	beq.n	213b8 <fcb_append+0xf4>
	} while (i++ < cnt);
   21346:	45c3      	cmp	fp, r8
   21348:	f108 0301 	add.w	r3, r8, #1
   2134c:	dc32      	bgt.n	213b4 <fcb_append+0xf0>
		if (!sector || (sector->fs_size <
   2134e:	f1b9 0f00 	cmp.w	r9, #0
   21352:	d031      	beq.n	213b8 <fcb_append+0xf4>
			sizeof(struct fcb_disk_area) + len + cnt)) {
   21354:	f107 0308 	add.w	r3, r7, #8
		if (!sector || (sector->fs_size <
   21358:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   2135c:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   2135e:	429a      	cmp	r2, r3
   21360:	d32a      	bcc.n	213b8 <fcb_append+0xf4>
			rc = FCB_ERR_NOSPACE;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   21362:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   21364:	3201      	adds	r2, #1
   21366:	b292      	uxth	r2, r2
   21368:	4649      	mov	r1, r9
   2136a:	4620      	mov	r0, r4
   2136c:	f000 f8d1 	bl	21512 <fcb_sector_hdr_init>
		if (rc) {
   21370:	4680      	mov	r8, r0
   21372:	b9c0      	cbnz	r0, 213a6 <fcb_append+0xe2>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   21374:	2308      	movs	r3, #8
   21376:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   21378:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   2137a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   2137e:	3301      	adds	r3, #1
   21380:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   21382:	9700      	str	r7, [sp, #0]
   21384:	ab03      	add	r3, sp, #12
   21386:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   2138a:	4620      	mov	r0, r4
   2138c:	f000 f867 	bl	2145e <fcb_flash_write>
	if (rc) {
   21390:	4680      	mov	r8, r0
   21392:	b9a0      	cbnz	r0, 213be <fcb_append+0xfa>
		rc = FCB_ERR_FLASH;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   21394:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21396:	6033      	str	r3, [r6, #0]
	append_loc->fe_elem_off = active->fe_elem_off;
   21398:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2139a:	6073      	str	r3, [r6, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   2139c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2139e:	441f      	add	r7, r3
   213a0:	60b7      	str	r7, [r6, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   213a2:	442f      	add	r7, r5
   213a4:	62a7      	str	r7, [r4, #40]	; 0x28
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   213a6:	4650      	mov	r0, sl
   213a8:	f7fd f862 	bl	1e470 <z_impl_k_mutex_unlock>

	return FCB_OK;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   213ac:	4640      	mov	r0, r8
   213ae:	b005      	add	sp, #20
   213b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   213b4:	4698      	mov	r8, r3
   213b6:	e7bb      	b.n	21330 <fcb_append+0x6c>
			rc = FCB_ERR_NOSPACE;
   213b8:	f06f 0803 	mvn.w	r8, #3
   213bc:	e7f3      	b.n	213a6 <fcb_append+0xe2>
		rc = FCB_ERR_FLASH;
   213be:	f06f 0801 	mvn.w	r8, #1
   213c2:	e7f0      	b.n	213a6 <fcb_append+0xe2>
		return FCB_ERR_ARGS;
   213c4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   213c8:	e7f0      	b.n	213ac <fcb_append+0xe8>

000213ca <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   213ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   213cc:	b083      	sub	sp, #12
	int rc;
	u8_t crc8[fcb->f_align];
   213ce:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
   213d2:	1dd3      	adds	r3, r2, #7
   213d4:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
{
   213d8:	af02      	add	r7, sp, #8
	u8_t crc8[fcb->f_align];
   213da:	ebad 0d03 	sub.w	sp, sp, r3
   213de:	ae02      	add	r6, sp, #8
{
   213e0:	4604      	mov	r4, r0
   213e2:	460d      	mov	r5, r1
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));
   213e4:	4630      	mov	r0, r6
   213e6:	21ff      	movs	r1, #255	; 0xff
   213e8:	f000 fd77 	bl	21eda <memset>

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   213ec:	4632      	mov	r2, r6
   213ee:	4629      	mov	r1, r5
   213f0:	4620      	mov	r0, r4
   213f2:	f000 f937 	bl	21664 <fcb_elem_crc8>
	if (rc) {
   213f6:	b9a8      	cbnz	r0, 21424 <fcb_append_finish+0x5a>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   213f8:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
	if (fcb->f_align <= 1) {
   213fc:	89aa      	ldrh	r2, [r5, #12]
   213fe:	68a8      	ldr	r0, [r5, #8]

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   21400:	9100      	str	r1, [sp, #0]
   21402:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   21404:	bf81      	itttt	hi
   21406:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   2140a:	1852      	addhi	r2, r2, r1
   2140c:	424b      	neghi	r3, r1
   2140e:	401a      	andhi	r2, r3
   21410:	4402      	add	r2, r0
   21412:	4633      	mov	r3, r6
   21414:	6829      	ldr	r1, [r5, #0]
   21416:	4620      	mov	r0, r4
   21418:	f000 f821 	bl	2145e <fcb_flash_write>
	if (rc) {
   2141c:	2800      	cmp	r0, #0
		return FCB_ERR_FLASH;
   2141e:	bf18      	it	ne
   21420:	f06f 0001 	mvnne.w	r0, #1
	}
	return 0;
}
   21424:	3704      	adds	r7, #4
   21426:	46bd      	mov	sp, r7
   21428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002142a <fcb_get_align>:
u8_t
fcb_get_align(const struct fcb *fcb)
{
	u8_t align;

	if (fcb->fap == NULL) {
   2142a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2142c:	b108      	cbz	r0, 21432 <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   2142e:	f000 bb15 	b.w	21a5c <flash_area_align>

	return align;
}
   21432:	4770      	bx	lr

00021434 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   21434:	b570      	push	{r4, r5, r6, lr}
   21436:	4614      	mov	r4, r2
   21438:	461a      	mov	r2, r3
   2143a:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   2143c:	684d      	ldr	r5, [r1, #4]
   2143e:	18e6      	adds	r6, r4, r3
   21440:	42ae      	cmp	r6, r5
   21442:	d809      	bhi.n	21458 <fcb_flash_read+0x24>
		return FCB_ERR_ARGS;
	}

	if (fcb->fap == NULL) {
   21444:	6b80      	ldr	r0, [r0, #56]	; 0x38
   21446:	b120      	cbz	r0, 21452 <fcb_flash_read+0x1e>
		return FCB_ERR_FLASH;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   21448:	6809      	ldr	r1, [r1, #0]
   2144a:	4421      	add	r1, r4
   2144c:	f000 fa9a 	bl	21984 <flash_area_read>

	if (rc != 0) {
   21450:	b108      	cbz	r0, 21456 <fcb_flash_read+0x22>
		return FCB_ERR_FLASH;
   21452:	f06f 0001 	mvn.w	r0, #1
	}

	return 0;
}
   21456:	bd70      	pop	{r4, r5, r6, pc}
		return FCB_ERR_ARGS;
   21458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2145c:	e7fb      	b.n	21456 <fcb_flash_read+0x22>

0002145e <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   2145e:	b570      	push	{r4, r5, r6, lr}
   21460:	4614      	mov	r4, r2
   21462:	461a      	mov	r2, r3
   21464:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   21466:	684d      	ldr	r5, [r1, #4]
   21468:	18e6      	adds	r6, r4, r3
   2146a:	42ae      	cmp	r6, r5
   2146c:	d809      	bhi.n	21482 <fcb_flash_write+0x24>
		return FCB_ERR_ARGS;
	}

	if (fcb->fap == NULL) {
   2146e:	6b80      	ldr	r0, [r0, #56]	; 0x38
   21470:	b120      	cbz	r0, 2147c <fcb_flash_write+0x1e>
		return FCB_ERR_FLASH;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   21472:	6809      	ldr	r1, [r1, #0]
   21474:	4421      	add	r1, r4
   21476:	f000 faa2 	bl	219be <flash_area_write>

	if (rc != 0) {
   2147a:	b108      	cbz	r0, 21480 <fcb_flash_write+0x22>
		return FCB_ERR_FLASH;
   2147c:	f06f 0001 	mvn.w	r0, #1
	}

	return 0;
}
   21480:	bd70      	pop	{r4, r5, r6, pc}
		return FCB_ERR_ARGS;
   21482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21486:	e7fb      	b.n	21480 <fcb_flash_write+0x22>

00021488 <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   21488:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   2148a:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   2148c:	b120      	cbz	r0, 21498 <fcb_erase_sector+0x10>
		return FCB_ERR_FLASH;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   2148e:	e9d1 1200 	ldrd	r1, r2, [r1]
   21492:	f000 fabd 	bl	21a10 <flash_area_erase>

	if (rc != 0) {
   21496:	b108      	cbz	r0, 2149c <fcb_erase_sector+0x14>
		return FCB_ERR_FLASH;
   21498:	f06f 0001 	mvn.w	r0, #1
	}

	return 0;
}
   2149c:	bd08      	pop	{r3, pc}

0002149e <fcb_free_sector_cnt>:
fcb_free_sector_cnt(struct fcb *fcb)
{
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
   2149e:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
   214a0:	b538      	push	{r3, r4, r5, lr}
   214a2:	4605      	mov	r5, r0
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   214a4:	2400      	movs	r4, #0
   214a6:	796b      	ldrb	r3, [r5, #5]
   214a8:	42a3      	cmp	r3, r4
   214aa:	dc01      	bgt.n	214b0 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   214ac:	4620      	mov	r0, r4
   214ae:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   214b0:	4628      	mov	r0, r5
   214b2:	f000 f97e 	bl	217b2 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   214b6:	6a2b      	ldr	r3, [r5, #32]
   214b8:	4283      	cmp	r3, r0
		fa = fcb_getnext_sector(fcb, fa);
   214ba:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   214bc:	d0f6      	beq.n	214ac <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   214be:	3401      	adds	r4, #1
   214c0:	e7f1      	b.n	214a6 <fcb_free_sector_cnt+0x8>

000214c2 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(u8_t *buf, u16_t len)
{
	if (len < 0x80) {
   214c2:	297f      	cmp	r1, #127	; 0x7f
   214c4:	d802      	bhi.n	214cc <fcb_put_len+0xa>
		buf[0] = len;
   214c6:	7001      	strb	r1, [r0, #0]
		return 1;
   214c8:	2001      	movs	r0, #1
   214ca:	4770      	bx	lr
	} else if (len < FCB_MAX_LEN) {
   214cc:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   214d0:	4299      	cmp	r1, r3
		buf[0] = (len & 0x7f) | 0x80;
   214d2:	bf9f      	itttt	ls
   214d4:	f061 037f 	ornls	r3, r1, #127	; 0x7f
		buf[1] = len >> 7;
   214d8:	09c9      	lsrls	r1, r1, #7
		buf[0] = (len & 0x7f) | 0x80;
   214da:	7003      	strbls	r3, [r0, #0]
		buf[1] = len >> 7;
   214dc:	7041      	strbls	r1, [r0, #1]
		return 2;
   214de:	bf94      	ite	ls
   214e0:	2002      	movls	r0, #2
	} else {
		return FCB_ERR_ARGS;
   214e2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}
}
   214e6:	4770      	bx	lr

000214e8 <fcb_get_len>:
int
fcb_get_len(u8_t *buf, u16_t *len)
{
	int rc;

	if (buf[0] & 0x80) {
   214e8:	7803      	ldrb	r3, [r0, #0]
   214ea:	061a      	lsls	r2, r3, #24
   214ec:	d50b      	bpl.n	21506 <fcb_get_len+0x1e>
		if (buf[0] == 0xff && buf[1] == 0xff) {
   214ee:	7842      	ldrb	r2, [r0, #1]
   214f0:	ea03 0002 	and.w	r0, r3, r2
   214f4:	28ff      	cmp	r0, #255	; 0xff
   214f6:	d009      	beq.n	2150c <fcb_get_len+0x24>
			return FCB_ERR_NOVAR;
		}
		*len = (buf[0] & 0x7f) | (buf[1] << 7);
   214f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   214fc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   21500:	800b      	strh	r3, [r1, #0]
		rc = 2;
   21502:	2002      	movs	r0, #2
   21504:	4770      	bx	lr
	} else {
		*len = buf[0];
   21506:	800b      	strh	r3, [r1, #0]
		rc = 1;
   21508:	2001      	movs	r0, #1
   2150a:	4770      	bx	lr
			return FCB_ERR_NOVAR;
   2150c:	f06f 0002 	mvn.w	r0, #2
	}
	return rc;
}
   21510:	4770      	bx	lr

00021512 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, u16_t id)
{
   21512:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb->f_magic;
	fda.fd_ver = fcb->f_version;
   21514:	7903      	ldrb	r3, [r0, #4]
   21516:	f88d 300c 	strb.w	r3, [sp, #12]
	fda._pad = 0xff;
   2151a:	23ff      	movs	r3, #255	; 0xff
   2151c:	f88d 300d 	strb.w	r3, [sp, #13]
	fda.fd_id = id;

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   21520:	2308      	movs	r3, #8
	fda.fd_magic = fcb->f_magic;
   21522:	6804      	ldr	r4, [r0, #0]
	fda.fd_id = id;
   21524:	f8ad 200e 	strh.w	r2, [sp, #14]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   21528:	9300      	str	r3, [sp, #0]
   2152a:	2200      	movs	r2, #0
   2152c:	446b      	add	r3, sp
	fda.fd_magic = fcb->f_magic;
   2152e:	9402      	str	r4, [sp, #8]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   21530:	f7ff ff95 	bl	2145e <fcb_flash_write>
	if (rc != 0) {
   21534:	2800      	cmp	r0, #0
		return FCB_ERR_FLASH;
	}
	return 0;
}
   21536:	bf18      	it	ne
   21538:	f06f 0001 	mvnne.w	r0, #1
   2153c:	b004      	add	sp, #16
   2153e:	bd10      	pop	{r4, pc}

00021540 <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   21540:	b530      	push	{r4, r5, lr}
   21542:	4605      	mov	r5, r0
   21544:	b085      	sub	sp, #20
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   21546:	4614      	mov	r4, r2
   21548:	b902      	cbnz	r2, 2154c <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   2154a:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   2154c:	2308      	movs	r3, #8
   2154e:	9300      	str	r3, [sp, #0]
   21550:	2200      	movs	r2, #0
   21552:	4623      	mov	r3, r4
   21554:	4628      	mov	r0, r5
   21556:	f7ff ff6d 	bl	21434 <fcb_flash_read>
	if (rc) {
   2155a:	b950      	cbnz	r0, 21572 <fcb_sector_hdr_read+0x32>
		return FCB_ERR_FLASH;
	}
	if (fdap->fd_magic == 0xffffffff) {
   2155c:	6823      	ldr	r3, [r4, #0]
   2155e:	1c5a      	adds	r2, r3, #1
   21560:	d005      	beq.n	2156e <fcb_sector_hdr_read+0x2e>
		return 0;
	}
	if (fdap->fd_magic != fcb->f_magic) {
   21562:	682a      	ldr	r2, [r5, #0]
		return FCB_ERR_MAGIC;
   21564:	4293      	cmp	r3, r2
   21566:	bf0c      	ite	eq
   21568:	2001      	moveq	r0, #1
   2156a:	f06f 0006 	mvnne.w	r0, #6
	}
	return 1;
}
   2156e:	b005      	add	sp, #20
   21570:	bd30      	pop	{r4, r5, pc}
		return FCB_ERR_FLASH;
   21572:	f06f 0001 	mvn.w	r0, #1
   21576:	e7fa      	b.n	2156e <fcb_sector_hdr_read+0x2e>

00021578 <fcb_init>:
{
   21578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   2157c:	688b      	ldr	r3, [r1, #8]
{
   2157e:	b085      	sub	sp, #20
   21580:	460c      	mov	r4, r1
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   21582:	b92b      	cbnz	r3, 21590 <fcb_init+0x18>
		return FCB_ERR_ARGS;
   21584:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   21588:	4628      	mov	r0, r5
   2158a:	b005      	add	sp, #20
   2158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   21590:	794b      	ldrb	r3, [r1, #5]
   21592:	798a      	ldrb	r2, [r1, #6]
   21594:	1a9b      	subs	r3, r3, r2
   21596:	2b00      	cmp	r3, #0
   21598:	ddf4      	ble.n	21584 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   2159a:	3138      	adds	r1, #56	; 0x38
   2159c:	b2c0      	uxtb	r0, r0
   2159e:	f7e2 fda3 	bl	40e8 <flash_area_open>
	if (rc != 0) {
   215a2:	4606      	mov	r6, r0
   215a4:	2800      	cmp	r0, #0
   215a6:	d1ed      	bne.n	21584 <fcb_init+0xc>
	align = fcb_get_align(fcb);
   215a8:	4620      	mov	r0, r4
   215aa:	f7ff ff3e 	bl	2142a <fcb_get_align>
	if (align == 0) {
   215ae:	4683      	mov	fp, r0
   215b0:	2800      	cmp	r0, #0
   215b2:	d0e7      	beq.n	21584 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   215b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   215b8:	46b2      	mov	sl, r6
   215ba:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   215bc:	4698      	mov	r8, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   215be:	7962      	ldrb	r2, [r4, #5]
   215c0:	42b2      	cmp	r2, r6
   215c2:	dc23      	bgt.n	2160c <fcb_init+0x94>
	if (oldest < 0) {
   215c4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   215c8:	d148      	bne.n	2165c <fcb_init+0xe4>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   215ca:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   215cc:	2200      	movs	r2, #0
   215ce:	4639      	mov	r1, r7
   215d0:	4620      	mov	r0, r4
   215d2:	f7ff ff9e 	bl	21512 <fcb_sector_hdr_init>
		if (rc) {
   215d6:	4605      	mov	r5, r0
   215d8:	2800      	cmp	r0, #0
   215da:	d1d5      	bne.n	21588 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   215dc:	46ba      	mov	sl, r7
	fcb->f_active.fe_sector = newest_sector;
   215de:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   215e2:	2308      	movs	r3, #8
	fcb->f_align = align;
   215e4:	f884 b036 	strb.w	fp, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   215e8:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   215ea:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   215ec:	f104 0624 	add.w	r6, r4, #36	; 0x24
   215f0:	4631      	mov	r1, r6
   215f2:	4620      	mov	r0, r4
   215f4:	f000 f8bc 	bl	21770 <fcb_getnext_in_sector>
		if (rc == FCB_ERR_NOVAR) {
   215f8:	1cc3      	adds	r3, r0, #3
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   215fa:	4605      	mov	r5, r0
		if (rc == FCB_ERR_NOVAR) {
   215fc:	d030      	beq.n	21660 <fcb_init+0xe8>
		if (rc != 0) {
   215fe:	2800      	cmp	r0, #0
   21600:	d0f6      	beq.n	215f0 <fcb_init+0x78>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
   21602:	f104 000c 	add.w	r0, r4, #12
   21606:	f003 fc9f 	bl	24f48 <z_impl_k_mutex_init>
	return rc;
   2160a:	e7bd      	b.n	21588 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   2160c:	68a2      	ldr	r2, [r4, #8]
   2160e:	9301      	str	r3, [sp, #4]
   21610:	eb02 09c6 	add.w	r9, r2, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   21614:	4649      	mov	r1, r9
   21616:	aa02      	add	r2, sp, #8
   21618:	4620      	mov	r0, r4
   2161a:	f7ff ff91 	bl	21540 <fcb_sector_hdr_read>
		if (rc < 0) {
   2161e:	1e05      	subs	r5, r0, #0
   21620:	dbb2      	blt.n	21588 <fcb_init+0x10>
		if (rc == 0) {
   21622:	9b01      	ldr	r3, [sp, #4]
   21624:	d008      	beq.n	21638 <fcb_init+0xc0>
		if (oldest < 0) {
   21626:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2162a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2162e:	d105      	bne.n	2163c <fcb_init+0xc4>
			oldest = newest = fda.fd_id;
   21630:	4690      	mov	r8, r2
			oldest_sector = newest_sector = sector;
   21632:	46ca      	mov	sl, r9
   21634:	464f      	mov	r7, r9
			oldest = newest = fda.fd_id;
   21636:	4613      	mov	r3, r2
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   21638:	3601      	adds	r6, #1
   2163a:	e7c0      	b.n	215be <fcb_init+0x46>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   2163c:	b215      	sxth	r5, r2
   2163e:	b218      	sxth	r0, r3
   21640:	1a28      	subs	r0, r5, r0
   21642:	2800      	cmp	r0, #0
   21644:	dd02      	ble.n	2164c <fcb_init+0xd4>
			newest = fda.fd_id;
   21646:	4613      	mov	r3, r2
			newest_sector = sector;
   21648:	46ca      	mov	sl, r9
   2164a:	e7f5      	b.n	21638 <fcb_init+0xc0>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   2164c:	fa0f f188 	sxth.w	r1, r8
   21650:	1b49      	subs	r1, r1, r5
			oldest = fda.fd_id;
   21652:	2900      	cmp	r1, #0
   21654:	bfc4      	itt	gt
   21656:	4690      	movgt	r8, r2
   21658:	464f      	movgt	r7, r9
   2165a:	e7ed      	b.n	21638 <fcb_init+0xc0>
   2165c:	461d      	mov	r5, r3
   2165e:	e7be      	b.n	215de <fcb_init+0x66>
			rc = FCB_OK;
   21660:	2500      	movs	r5, #0
   21662:	e7ce      	b.n	21602 <fcb_init+0x8a>

00021664 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, u8_t *c8p)
{
   21664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21668:	460c      	mov	r4, r1
   2166a:	4617      	mov	r7, r2
	u16_t len;
	u32_t off;
	u32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   2166c:	e9d1 1200 	ldrd	r1, r2, [r1]
   21670:	684b      	ldr	r3, [r1, #4]
   21672:	1c95      	adds	r5, r2, #2
   21674:	429d      	cmp	r5, r3
{
   21676:	b08c      	sub	sp, #48	; 0x30
   21678:	4606      	mov	r6, r0
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   2167a:	d84b      	bhi.n	21714 <fcb_elem_crc8+0xb0>
		return FCB_ERR_NOVAR;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   2167c:	2302      	movs	r3, #2
   2167e:	9300      	str	r3, [sp, #0]
   21680:	ab04      	add	r3, sp, #16
   21682:	f7ff fed7 	bl	21434 <fcb_flash_read>
	if (rc) {
   21686:	b120      	cbz	r0, 21692 <fcb_elem_crc8+0x2e>
		return FCB_ERR_FLASH;
   21688:	f06f 0001 	mvn.w	r0, #1
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   2168c:	b00c      	add	sp, #48	; 0x30
   2168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(tmp_str, &len);
   21692:	f10d 010e 	add.w	r1, sp, #14
   21696:	a804      	add	r0, sp, #16
   21698:	f7ff ff26 	bl	214e8 <fcb_get_len>
	if (cnt < 0) {
   2169c:	2800      	cmp	r0, #0
   2169e:	dbf5      	blt.n	2168c <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   216a0:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
   216a4:	6861      	ldr	r1, [r4, #4]
	if (fcb->f_align <= 1) {
   216a6:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   216a8:	bf88      	it	hi
   216aa:	f102 35ff 	addhi.w	r5, r2, #4294967295	; 0xffffffff
   216ae:	b283      	uxth	r3, r0
   216b0:	bf82      	ittt	hi
   216b2:	195b      	addhi	r3, r3, r5
   216b4:	4252      	neghi	r2, r2
   216b6:	4013      	andhi	r3, r2
   216b8:	440b      	add	r3, r1
   216ba:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   216bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   216c0:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   216c2:	4602      	mov	r2, r0
   216c4:	a904      	add	r1, sp, #16
   216c6:	20ff      	movs	r0, #255	; 0xff
   216c8:	f7e1 fb7c 	bl	2dc4 <crc8_ccitt>
	off = loc->fe_data_off;
   216cc:	68a5      	ldr	r5, [r4, #8]
	end = loc->fe_data_off + len;
   216ce:	f8bd 900e 	ldrh.w	r9, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   216d2:	4682      	mov	sl, r0
	end = loc->fe_data_off + len;
   216d4:	44a9      	add	r9, r5
	for (; off < end; off += blk_sz) {
   216d6:	454d      	cmp	r5, r9
   216d8:	d303      	bcc.n	216e2 <fcb_elem_crc8+0x7e>
	*c8p = crc8;
   216da:	f887 a000 	strb.w	sl, [r7]
	return 0;
   216de:	2000      	movs	r0, #0
   216e0:	e7d4      	b.n	2168c <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   216e2:	eba9 0805 	sub.w	r8, r9, r5
   216e6:	f1b8 0f20 	cmp.w	r8, #32
   216ea:	bf28      	it	cs
   216ec:	f04f 0820 	movcs.w	r8, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   216f0:	f8cd 8000 	str.w	r8, [sp]
   216f4:	ab04      	add	r3, sp, #16
   216f6:	462a      	mov	r2, r5
   216f8:	6821      	ldr	r1, [r4, #0]
   216fa:	4630      	mov	r0, r6
   216fc:	f7ff fe9a 	bl	21434 <fcb_flash_read>
		if (rc) {
   21700:	2800      	cmp	r0, #0
   21702:	d1c1      	bne.n	21688 <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   21704:	4650      	mov	r0, sl
   21706:	4642      	mov	r2, r8
   21708:	a904      	add	r1, sp, #16
   2170a:	f7e1 fb5b 	bl	2dc4 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   2170e:	4445      	add	r5, r8
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   21710:	4682      	mov	sl, r0
   21712:	e7e0      	b.n	216d6 <fcb_elem_crc8+0x72>
		return FCB_ERR_NOVAR;
   21714:	f06f 0002 	mvn.w	r0, #2
   21718:	e7b8      	b.n	2168c <fcb_elem_crc8+0x28>

0002171a <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   2171a:	b530      	push	{r4, r5, lr}
   2171c:	b085      	sub	sp, #20
	int rc;
	u8_t crc8;
	u8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   2171e:	f10d 020e 	add.w	r2, sp, #14
{
   21722:	4605      	mov	r5, r0
   21724:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   21726:	f7ff ff9d 	bl	21664 <fcb_elem_crc8>
	if (rc) {
   2172a:	b9e0      	cbnz	r0, 21766 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   2172c:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
	if (fcb->f_align <= 1) {
   21730:	89a1      	ldrh	r1, [r4, #12]
   21732:	68a2      	ldr	r2, [r4, #8]
   21734:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   21736:	bf81      	itttt	hi
   21738:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   2173c:	18c9      	addhi	r1, r1, r3
   2173e:	425b      	neghi	r3, r3
   21740:	4019      	andhi	r1, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   21742:	2301      	movs	r3, #1
   21744:	9300      	str	r3, [sp, #0]
   21746:	440a      	add	r2, r1
   21748:	f10d 030f 	add.w	r3, sp, #15
   2174c:	6821      	ldr	r1, [r4, #0]
   2174e:	4628      	mov	r0, r5
   21750:	f7ff fe70 	bl	21434 <fcb_flash_read>
	if (rc) {
   21754:	b948      	cbnz	r0, 2176a <fcb_elem_info+0x50>
		return FCB_ERR_FLASH;
	}

	if (fl_crc8 != crc8) {
   21756:	f89d 200f 	ldrb.w	r2, [sp, #15]
   2175a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2175e:	429a      	cmp	r2, r3
		return FCB_ERR_CRC;
   21760:	bf18      	it	ne
   21762:	f06f 0005 	mvnne.w	r0, #5
	}
	return 0;
}
   21766:	b005      	add	sp, #20
   21768:	bd30      	pop	{r4, r5, pc}
		return FCB_ERR_FLASH;
   2176a:	f06f 0001 	mvn.w	r0, #1
   2176e:	e7fa      	b.n	21766 <fcb_elem_info+0x4c>

00021770 <fcb_getnext_in_sector>:
#include "fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   21770:	b538      	push	{r3, r4, r5, lr}
   21772:	4604      	mov	r4, r0
   21774:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   21776:	f7ff ffd0 	bl	2171a <fcb_elem_info>
	if (rc == 0 || rc == FCB_ERR_CRC) {
   2177a:	b108      	cbz	r0, 21780 <fcb_getnext_in_sector+0x10>
   2177c:	1d83      	adds	r3, r0, #6
   2177e:	d117      	bne.n	217b0 <fcb_getnext_in_sector+0x40>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   21780:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   21784:	89ab      	ldrh	r3, [r5, #12]
			loc->fe_elem_off = loc->fe_data_off +
   21786:	68aa      	ldr	r2, [r5, #8]
	if (fcb->f_align <= 1) {
   21788:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2178a:	bf81      	itttt	hi
   2178c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   21790:	185b      	addhi	r3, r3, r1
   21792:	4248      	neghi	r0, r1
   21794:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1) {
   21796:	2901      	cmp	r1, #1
   21798:	4413      	add	r3, r2
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2179a:	bf86      	itte	hi
   2179c:	424a      	neghi	r2, r1
   2179e:	400a      	andhi	r2, r1
		return len;
   217a0:	2201      	movls	r2, #1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   217a2:	4413      	add	r3, r2
			loc->fe_elem_off = loc->fe_data_off +
   217a4:	606b      	str	r3, [r5, #4]
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   217a6:	4629      	mov	r1, r5
   217a8:	4620      	mov	r0, r4
   217aa:	f7ff ffb6 	bl	2171a <fcb_elem_info>
			if (rc != FCB_ERR_CRC) {
   217ae:	e7e5      	b.n	2177c <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == FCB_ERR_CRC);
	}
	return rc;
}
   217b0:	bd38      	pop	{r3, r4, r5, pc}

000217b2 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   217b2:	6882      	ldr	r2, [r0, #8]
   217b4:	7943      	ldrb	r3, [r0, #5]
	sector++;
   217b6:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   217b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   217bc:	4299      	cmp	r1, r3
   217be:	bf34      	ite	cc
   217c0:	4608      	movcc	r0, r1
   217c2:	4610      	movcs	r0, r2
   217c4:	4770      	bx	lr

000217c6 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   217c6:	680b      	ldr	r3, [r1, #0]
{
   217c8:	b570      	push	{r4, r5, r6, lr}
   217ca:	4605      	mov	r5, r0
   217cc:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   217ce:	b90b      	cbnz	r3, 217d4 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   217d0:	6a03      	ldr	r3, [r0, #32]
   217d2:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0) {
   217d4:	6863      	ldr	r3, [r4, #4]
   217d6:	b953      	cbnz	r3, 217ee <fcb_getnext_nolock+0x28>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   217d8:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   217da:	4621      	mov	r1, r4
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   217dc:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   217de:	4628      	mov	r0, r5
   217e0:	f7ff ff9b 	bl	2171a <fcb_elem_info>
		switch (rc) {
   217e4:	1d81      	adds	r1, r0, #6
   217e6:	d01f      	beq.n	21828 <fcb_getnext_nolock+0x62>
   217e8:	b948      	cbnz	r0, 217fe <fcb_getnext_nolock+0x38>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   217ea:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   217ec:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   217ee:	4621      	mov	r1, r4
   217f0:	4628      	mov	r0, r5
   217f2:	f7ff ffbd 	bl	21770 <fcb_getnext_in_sector>
		if (rc == 0) {
   217f6:	2800      	cmp	r0, #0
   217f8:	d0f7      	beq.n	217ea <fcb_getnext_nolock+0x24>
		if (rc == FCB_ERR_NOVAR) {
   217fa:	1cc2      	adds	r2, r0, #3
   217fc:	d112      	bne.n	21824 <fcb_getnext_nolock+0x5e>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   217fe:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   21800:	6821      	ldr	r1, [r4, #0]
   21802:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21804:	4299      	cmp	r1, r3
   21806:	d018      	beq.n	2183a <fcb_getnext_nolock+0x74>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   21808:	4628      	mov	r0, r5
   2180a:	f7ff ffd2 	bl	217b2 <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   2180e:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   21810:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   21814:	4628      	mov	r0, r5
   21816:	f7ff ff80 	bl	2171a <fcb_elem_info>
			switch (rc) {
   2181a:	1d83      	adds	r3, r0, #6
   2181c:	d004      	beq.n	21828 <fcb_getnext_nolock+0x62>
   2181e:	2800      	cmp	r0, #0
   21820:	d0e3      	beq.n	217ea <fcb_getnext_nolock+0x24>
   21822:	e7ed      	b.n	21800 <fcb_getnext_nolock+0x3a>
	while (rc == FCB_ERR_CRC) {
   21824:	3006      	adds	r0, #6
   21826:	d1e0      	bne.n	217ea <fcb_getnext_nolock+0x24>
		rc = fcb_getnext_in_sector(fcb, loc);
   21828:	4621      	mov	r1, r4
   2182a:	4628      	mov	r0, r5
   2182c:	f7ff ffa0 	bl	21770 <fcb_getnext_in_sector>
		if (rc == 0) {
   21830:	2800      	cmp	r0, #0
   21832:	d0da      	beq.n	217ea <fcb_getnext_nolock+0x24>
		if (rc != FCB_ERR_CRC) {
   21834:	3006      	adds	r0, #6
   21836:	d0f7      	beq.n	21828 <fcb_getnext_nolock+0x62>
   21838:	e7e1      	b.n	217fe <fcb_getnext_nolock+0x38>
				return FCB_ERR_NOVAR;
   2183a:	f06f 0002 	mvn.w	r0, #2
   2183e:	e7d5      	b.n	217ec <fcb_getnext_nolock+0x26>

00021840 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   21840:	b570      	push	{r4, r5, r6, lr}
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   21842:	f100 050c 	add.w	r5, r0, #12
{
   21846:	4604      	mov	r4, r0
   21848:	460e      	mov	r6, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   2184a:	4628      	mov	r0, r5
   2184c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21850:	f7fc fda2 	bl	1e398 <z_impl_k_mutex_lock>
	if (rc) {
   21854:	b948      	cbnz	r0, 2186a <fcb_getnext+0x2a>
		return FCB_ERR_ARGS;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   21856:	4620      	mov	r0, r4
   21858:	4631      	mov	r1, r6
   2185a:	f7ff ffb4 	bl	217c6 <fcb_getnext_nolock>
   2185e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   21860:	4628      	mov	r0, r5
   21862:	f7fc fe05 	bl	1e470 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   21866:	4620      	mov	r0, r4
   21868:	bd70      	pop	{r4, r5, r6, pc}
		return FCB_ERR_ARGS;
   2186a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2186e:	e7fa      	b.n	21866 <fcb_getnext+0x26>

00021870 <fcb_rotate>:
#include "fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   21870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   21872:	f100 060c 	add.w	r6, r0, #12
{
   21876:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   21878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2187c:	4630      	mov	r0, r6
   2187e:	f7fc fd8b 	bl	1e398 <z_impl_k_mutex_lock>
	if (rc) {
   21882:	bb48      	cbnz	r0, 218d8 <fcb_rotate+0x68>
		return FCB_ERR_ARGS;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   21884:	6a21      	ldr	r1, [r4, #32]
   21886:	4620      	mov	r0, r4
   21888:	f7ff fdfe 	bl	21488 <fcb_erase_sector>
	if (rc) {
   2188c:	bb08      	cbnz	r0, 218d2 <fcb_rotate+0x62>
		rc = FCB_ERR_FLASH;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   2188e:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   21892:	4299      	cmp	r1, r3
   21894:	d112      	bne.n	218bc <fcb_rotate+0x4c>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   21896:	4620      	mov	r0, r4
   21898:	f7ff ff8b 	bl	217b2 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   2189c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   2189e:	3201      	adds	r2, #1
   218a0:	4601      	mov	r1, r0
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   218a2:	4607      	mov	r7, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   218a4:	b292      	uxth	r2, r2
   218a6:	4620      	mov	r0, r4
   218a8:	f7ff fe33 	bl	21512 <fcb_sector_hdr_init>
		if (rc) {
   218ac:	4605      	mov	r5, r0
   218ae:	b958      	cbnz	r0, 218c8 <fcb_rotate+0x58>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   218b0:	2308      	movs	r3, #8
   218b2:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   218b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   218b6:	6267      	str	r7, [r4, #36]	; 0x24
		fcb->f_active_id++;
   218b8:	3301      	adds	r3, #1
   218ba:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   218bc:	6a21      	ldr	r1, [r4, #32]
   218be:	4620      	mov	r0, r4
   218c0:	f7ff ff77 	bl	217b2 <fcb_getnext_sector>
   218c4:	2500      	movs	r5, #0
   218c6:	6220      	str	r0, [r4, #32]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   218c8:	4630      	mov	r0, r6
   218ca:	f7fc fdd1 	bl	1e470 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   218ce:	4628      	mov	r0, r5
   218d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = FCB_ERR_FLASH;
   218d2:	f06f 0501 	mvn.w	r5, #1
   218d6:	e7f7      	b.n	218c8 <fcb_rotate+0x58>
		return FCB_ERR_ARGS;
   218d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   218dc:	e7f7      	b.n	218ce <fcb_rotate+0x5e>

000218de <fcb_walk>:
 * only elements with that flash_sector are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_sector *sector, fcb_walk_cb cb,
	 void *cb_arg)
{
   218de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   218e2:	b086      	sub	sp, #24
   218e4:	4698      	mov	r8, r3
	struct fcb_entry_ctx entry_ctx;
	int rc;

	entry_ctx.loc.fe_sector = sector;
	entry_ctx.loc.fe_elem_off = 0;
   218e6:	2300      	movs	r3, #0
{
   218e8:	4605      	mov	r5, r0
   218ea:	460e      	mov	r6, r1
   218ec:	4617      	mov	r7, r2
	entry_ctx.loc.fe_sector = sector;
   218ee:	9101      	str	r1, [sp, #4]
	entry_ctx.loc.fe_elem_off = 0;
   218f0:	9302      	str	r3, [sp, #8]

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   218f2:	f100 040c 	add.w	r4, r0, #12
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   218f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   218fa:	4620      	mov	r0, r4
   218fc:	f7fc fd4c 	bl	1e398 <z_impl_k_mutex_lock>
	if (rc < 0) {
   21900:	2800      	cmp	r0, #0
   21902:	da12      	bge.n	2192a <fcb_walk+0x4c>
		return FCB_ERR_ARGS;
   21904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return FCB_ERR_ARGS;
		}
	}
	k_mutex_unlock(&fcb->f_mtx);
	return 0;
}
   21908:	b006      	add	sp, #24
   2190a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   2190e:	f7fc fdaf 	bl	1e470 <z_impl_k_mutex_unlock>
		if (sector && entry_ctx.loc.fe_sector != sector) {
   21912:	b116      	cbz	r6, 2191a <fcb_walk+0x3c>
   21914:	9b01      	ldr	r3, [sp, #4]
   21916:	42b3      	cmp	r3, r6
   21918:	d110      	bne.n	2193c <fcb_walk+0x5e>
		entry_ctx.fap = fcb->fap;
   2191a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2191c:	9305      	str	r3, [sp, #20]
		rc = cb(&entry_ctx, cb_arg);
   2191e:	4641      	mov	r1, r8
   21920:	a801      	add	r0, sp, #4
   21922:	47b8      	blx	r7
		if (rc) {
   21924:	2800      	cmp	r0, #0
   21926:	d0e6      	beq.n	218f6 <fcb_walk+0x18>
   21928:	e7ee      	b.n	21908 <fcb_walk+0x2a>
	while ((rc = fcb_getnext_nolock(fcb, &entry_ctx.loc)) !=
   2192a:	a901      	add	r1, sp, #4
   2192c:	4628      	mov	r0, r5
   2192e:	f7ff ff4a 	bl	217c6 <fcb_getnext_nolock>
   21932:	3003      	adds	r0, #3
   21934:	4620      	mov	r0, r4
   21936:	d1ea      	bne.n	2190e <fcb_walk+0x30>
   21938:	f7fc fd9a 	bl	1e470 <z_impl_k_mutex_unlock>
			return 0;
   2193c:	2000      	movs	r0, #0
   2193e:	e7e3      	b.n	21908 <fcb_walk+0x2a>

00021940 <z_impl_flash_write_protection_set>:
static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_protection(dev, enable);
   21940:	6843      	ldr	r3, [r0, #4]
   21942:	68db      	ldr	r3, [r3, #12]
   21944:	4718      	bx	r3

00021946 <get_sectors_cb>:
{
   21946:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   21948:	6802      	ldr	r2, [r0, #0]
   2194a:	684c      	ldr	r4, [r1, #4]
   2194c:	42a2      	cmp	r2, r4
   2194e:	d316      	bcc.n	2197e <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   21950:	688b      	ldr	r3, [r1, #8]
   21952:	4423      	add	r3, r4
   21954:	429a      	cmp	r2, r3
   21956:	d206      	bcs.n	21966 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   21958:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   2195c:	42ab      	cmp	r3, r5
   2195e:	d304      	bcc.n	2196a <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   21960:	f06f 030b 	mvn.w	r3, #11
   21964:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   21966:	2000      	movs	r0, #0
   21968:	e00a      	b.n	21980 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2196a:	68cd      	ldr	r5, [r1, #12]
   2196c:	1b12      	subs	r2, r2, r4
   2196e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   21972:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   21976:	6842      	ldr	r2, [r0, #4]
   21978:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   2197a:	3301      	adds	r3, #1
   2197c:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   2197e:	2001      	movs	r0, #1
}
   21980:	bd70      	pop	{r4, r5, r6, pc}

00021982 <flash_area_close>:
}
   21982:	4770      	bx	lr

00021984 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   21984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21988:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   2198a:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   2198c:	428b      	cmp	r3, r1
{
   2198e:	4605      	mov	r5, r0
   21990:	460c      	mov	r4, r1
   21992:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   21994:	d30f      	bcc.n	219b6 <flash_area_read+0x32>
   21996:	1872      	adds	r2, r6, r1
   21998:	4293      	cmp	r3, r2
   2199a:	d30c      	bcc.n	219b6 <flash_area_read+0x32>
   2199c:	68c0      	ldr	r0, [r0, #12]
   2199e:	f7fc fac7 	bl	1df30 <z_impl_device_get_binding>
	return api->read(dev, offset, data, len);
   219a2:	6843      	ldr	r3, [r0, #4]
		return -1;
	}

	dev = device_get_binding(fa->fa_dev_name);

	return flash_read(dev, fa->fa_off + off, dst, len);
   219a4:	6869      	ldr	r1, [r5, #4]
   219a6:	681d      	ldr	r5, [r3, #0]
   219a8:	463a      	mov	r2, r7
   219aa:	4633      	mov	r3, r6
   219ac:	4421      	add	r1, r4
   219ae:	46ac      	mov	ip, r5
}
   219b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   219b4:	4760      	bx	ip
   219b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   219ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000219be <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   219be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   219c2:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   219c4:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   219c6:	428b      	cmp	r3, r1
{
   219c8:	4607      	mov	r7, r0
   219ca:	460e      	mov	r6, r1
   219cc:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   219ce:	d31c      	bcc.n	21a0a <flash_area_write+0x4c>
   219d0:	eb08 0201 	add.w	r2, r8, r1
   219d4:	4293      	cmp	r3, r2
   219d6:	d318      	bcc.n	21a0a <flash_area_write+0x4c>
   219d8:	68c0      	ldr	r0, [r0, #12]
   219da:	f7fc faa9 	bl	1df30 <z_impl_device_get_binding>

K_SYSCALL_DECLARE4(K_SYSCALL_FLASH_WRITE, flash_write, int, struct device *, dev, off_t, offset, const void *, data, size_t, len)

K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_ERASE, flash_erase, int, struct device *, dev, off_t, offset, size_t, size)

K_SYSCALL_DECLARE2(K_SYSCALL_FLASH_WRITE_PROTECTION_SET, flash_write_protection_set, int, struct device *, dev, bool, enable)
   219de:	2100      	movs	r1, #0
   219e0:	4605      	mov	r5, r0
   219e2:	f7ff ffad 	bl	21940 <z_impl_flash_write_protection_set>
	}

	flash_dev = device_get_binding(fa->fa_dev_name);

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   219e6:	4604      	mov	r4, r0
   219e8:	b960      	cbnz	r0, 21a04 <flash_area_write+0x46>
	return api->write(dev, offset, data, len);
   219ea:	686b      	ldr	r3, [r5, #4]
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   219ec:	6879      	ldr	r1, [r7, #4]
   219ee:	685c      	ldr	r4, [r3, #4]
   219f0:	4431      	add	r1, r6
   219f2:	4643      	mov	r3, r8
   219f4:	464a      	mov	r2, r9
   219f6:	4628      	mov	r0, r5
   219f8:	47a0      	blx	r4
   219fa:	2101      	movs	r1, #1
   219fc:	4604      	mov	r4, r0
   219fe:	4628      	mov	r0, r5
   21a00:	f7ff ff9e 	bl	21940 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   21a04:	4620      	mov	r0, r4
   21a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
   21a0a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21a0e:	e7f9      	b.n	21a04 <flash_area_write+0x46>

00021a10 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   21a10:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   21a12:	428b      	cmp	r3, r1
{
   21a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a18:	4607      	mov	r7, r0
   21a1a:	460e      	mov	r6, r1
   21a1c:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   21a1e:	d31a      	bcc.n	21a56 <flash_area_erase+0x46>
   21a20:	440a      	add	r2, r1
   21a22:	4293      	cmp	r3, r2
   21a24:	d317      	bcc.n	21a56 <flash_area_erase+0x46>
   21a26:	68c0      	ldr	r0, [r0, #12]
   21a28:	f7fc fa82 	bl	1df30 <z_impl_device_get_binding>
   21a2c:	2100      	movs	r1, #0
   21a2e:	4605      	mov	r5, r0
   21a30:	f7ff ff86 	bl	21940 <z_impl_flash_write_protection_set>
	}

	flash_dev = device_get_binding(fa->fa_dev_name);

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   21a34:	4604      	mov	r4, r0
   21a36:	b958      	cbnz	r0, 21a50 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   21a38:	6879      	ldr	r1, [r7, #4]
	return api->erase(dev, offset, size);
   21a3a:	686b      	ldr	r3, [r5, #4]
   21a3c:	4431      	add	r1, r6
   21a3e:	689b      	ldr	r3, [r3, #8]
   21a40:	4642      	mov	r2, r8
   21a42:	4628      	mov	r0, r5
   21a44:	4798      	blx	r3
   21a46:	2101      	movs	r1, #1
   21a48:	4604      	mov	r4, r0
   21a4a:	4628      	mov	r0, r5
   21a4c:	f7ff ff78 	bl	21940 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   21a50:	4620      	mov	r0, r4
   21a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   21a56:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21a5a:	e7f9      	b.n	21a50 <flash_area_erase+0x40>

00021a5c <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   21a5c:	b508      	push	{r3, lr}
   21a5e:	68c0      	ldr	r0, [r0, #12]
   21a60:	f7fc fa66 	bl	1df30 <z_impl_device_get_binding>

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_block_size;
   21a64:	6843      	ldr	r3, [r0, #4]
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);

	return flash_get_write_block_size(dev);
}
   21a66:	7d18      	ldrb	r0, [r3, #20]
   21a68:	bd08      	pop	{r3, pc}

00021a6a <settings_dup_check_cb>:
{
   21a6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a6e:	4689      	mov	r9, r1
   21a70:	b089      	sub	sp, #36	; 0x24
	if (strcmp(name, cdca->name)) {
   21a72:	6819      	ldr	r1, [r3, #0]
{
   21a74:	4692      	mov	sl, r2
   21a76:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   21a78:	f000 f9d2 	bl	21e20 <strcmp>
   21a7c:	4607      	mov	r7, r0
   21a7e:	b960      	cbnz	r0, 21a9a <settings_dup_check_cb+0x30>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   21a80:	4649      	mov	r1, r9
   21a82:	4650      	mov	r0, sl
   21a84:	f7e2 fd52 	bl	452c <settings_line_val_get_len>
	if (len_read == 0) {
   21a88:	6865      	ldr	r5, [r4, #4]
   21a8a:	b948      	cbnz	r0, 21aa0 <settings_dup_check_cb+0x36>
		if (!cdca->val || cdca->val_len == 0) {
   21a8c:	b10d      	cbz	r5, 21a92 <settings_dup_check_cb+0x28>
   21a8e:	68a3      	ldr	r3, [r4, #8]
   21a90:	b90b      	cbnz	r3, 21a96 <settings_dup_check_cb+0x2c>
			cdca->is_dup = 1;
   21a92:	2301      	movs	r3, #1
   21a94:	e000      	b.n	21a98 <settings_dup_check_cb+0x2e>
			cdca->is_dup = 0;
   21a96:	2300      	movs	r3, #0
			cdca->is_dup = 1;
   21a98:	60e3      	str	r3, [r4, #12]
}
   21a9a:	b009      	add	sp, #36	; 0x24
   21a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cdca->val && !settings_cmp(cdca->val, cdca->val_len,
   21aa0:	2d00      	cmp	r5, #0
   21aa2:	d0f8      	beq.n	21a96 <settings_dup_check_cb+0x2c>
   21aa4:	68a6      	ldr	r6, [r4, #8]
		rc = settings_line_val_read(val_off, off, buf, len_read,
   21aa6:	f10d 0b0c 	add.w	fp, sp, #12
	for (rem = val_len; rem > 0; rem -= len_read) {
   21aaa:	2e00      	cmp	r6, #0
   21aac:	d0f1      	beq.n	21a92 <settings_dup_check_cb+0x28>
		len_read = exp_len = MIN(sizeof(buf), rem);
   21aae:	2e10      	cmp	r6, #16
   21ab0:	46b0      	mov	r8, r6
   21ab2:	bf28      	it	cs
   21ab4:	f04f 0810 	movcs.w	r8, #16
		rc = settings_line_val_read(val_off, off, buf, len_read,
   21ab8:	e9cd b900 	strd	fp, r9, [sp]
   21abc:	4643      	mov	r3, r8
   21abe:	aa04      	add	r2, sp, #16
   21ac0:	4639      	mov	r1, r7
   21ac2:	4650      	mov	r0, sl
		len_read = exp_len = MIN(sizeof(buf), rem);
   21ac4:	f8cd 800c 	str.w	r8, [sp, #12]
		rc = settings_line_val_read(val_off, off, buf, len_read,
   21ac8:	f000 f883 	bl	21bd2 <settings_line_val_read>
		if (rc) {
   21acc:	2800      	cmp	r0, #0
   21ace:	d1e2      	bne.n	21a96 <settings_dup_check_cb+0x2c>
		if (len_read != exp_len) {
   21ad0:	9b03      	ldr	r3, [sp, #12]
   21ad2:	4598      	cmp	r8, r3
   21ad4:	d1df      	bne.n	21a96 <settings_dup_check_cb+0x2c>
		rc = memcmp(val, buf, len_read);
   21ad6:	4642      	mov	r2, r8
   21ad8:	a904      	add	r1, sp, #16
   21ada:	4628      	mov	r0, r5
   21adc:	f000 f9ac 	bl	21e38 <memcmp>
		if (rc) {
   21ae0:	2800      	cmp	r0, #0
   21ae2:	d1d8      	bne.n	21a96 <settings_dup_check_cb+0x2c>
		val += len_read;
   21ae4:	9b03      	ldr	r3, [sp, #12]
   21ae6:	441d      	add	r5, r3
		off += len_read;
   21ae8:	441f      	add	r7, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   21aea:	1af6      	subs	r6, r6, r3
   21aec:	e7dd      	b.n	21aaa <settings_dup_check_cb+0x40>

00021aee <settings_delete>:
	return settings_save_one(name, NULL, 0);
   21aee:	2200      	movs	r2, #0
   21af0:	4611      	mov	r1, r2
   21af2:	f7e2 bb31 	b.w	4158 <settings_save_one>

00021af6 <settings_parse_name>:
	while (name) {
   21af6:	2300      	movs	r3, #0
{
   21af8:	b5f0      	push	{r4, r5, r6, r7, lr}
				name = NULL;
   21afa:	461e      	mov	r6, r3
	while (name) {
   21afc:	b908      	cbnz	r0, 21b02 <settings_parse_name+0xc>
	*name_argc = i;
   21afe:	600b      	str	r3, [r1, #0]
}
   21b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		name_argv[i++] = name;
   21b02:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   21b06:	4604      	mov	r4, r0
   21b08:	4627      	mov	r7, r4
			if (*name == '\0') {
   21b0a:	f814 5b01 	ldrb.w	r5, [r4], #1
   21b0e:	b12d      	cbz	r5, 21b1c <settings_parse_name+0x26>
			if (*name == *SETTINGS_NAME_SEPARATOR) {
   21b10:	2d2f      	cmp	r5, #47	; 0x2f
   21b12:	4620      	mov	r0, r4
   21b14:	d1f8      	bne.n	21b08 <settings_parse_name+0x12>
				*name = '\0';
   21b16:	703e      	strb	r6, [r7, #0]
				break;
   21b18:	3301      	adds	r3, #1
   21b1a:	e7ef      	b.n	21afc <settings_parse_name+0x6>
				name = NULL;
   21b1c:	4628      	mov	r0, r5
   21b1e:	e7fb      	b.n	21b18 <settings_parse_name+0x22>

00021b20 <settings_parse_and_lookup>:
{
   21b20:	b510      	push	{r4, lr}
	rc = settings_parse_name(name, name_argc, name_argv);
   21b22:	f7ff ffe8 	bl	21af6 <settings_parse_name>
	if (rc) {
   21b26:	b920      	cbnz	r0, 21b32 <settings_parse_and_lookup+0x12>
	return settings_handler_lookup(name_argv[0]);
   21b28:	6810      	ldr	r0, [r2, #0]
}
   21b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return settings_handler_lookup(name_argv[0]);
   21b2e:	f7e2 bba3 	b.w	4278 <settings_handler_lookup>
}
   21b32:	2000      	movs	r0, #0
   21b34:	bd10      	pop	{r4, pc}

00021b36 <settings_set_value_priv>:
{
   21b36:	b570      	push	{r4, r5, r6, lr}
   21b38:	b08c      	sub	sp, #48	; 0x30
   21b3a:	460e      	mov	r6, r1
   21b3c:	4615      	mov	r5, r2
	ch = settings_parse_and_lookup(name, &name_argc, name_argv);
   21b3e:	4669      	mov	r1, sp
   21b40:	aa04      	add	r2, sp, #16
{
   21b42:	461c      	mov	r4, r3
	ch = settings_parse_and_lookup(name, &name_argc, name_argv);
   21b44:	f7ff ffec 	bl	21b20 <settings_parse_and_lookup>
	if (!ch) {
   21b48:	b158      	cbz	r0, 21b62 <settings_set_value_priv+0x2c>
	return ch->h_set(name_argc - 1, &name_argv[1], (void *)&value_ctx);
   21b4a:	68c3      	ldr	r3, [r0, #12]
   21b4c:	9800      	ldr	r0, [sp, #0]
	value_ctx.runtime = is_runtime;
   21b4e:	f88d 400c 	strb.w	r4, [sp, #12]
	value_ctx.off = off;
   21b52:	e9cd 6501 	strd	r6, r5, [sp, #4]
	return ch->h_set(name_argc - 1, &name_argv[1], (void *)&value_ctx);
   21b56:	aa01      	add	r2, sp, #4
   21b58:	a905      	add	r1, sp, #20
   21b5a:	3801      	subs	r0, #1
   21b5c:	4798      	blx	r3
}
   21b5e:	b00c      	add	sp, #48	; 0x30
   21b60:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21b62:	f06f 0015 	mvn.w	r0, #21
   21b66:	e7fa      	b.n	21b5e <settings_set_value_priv+0x28>

00021b68 <settings_val_read_cb>:
{
   21b68:	b530      	push	{r4, r5, lr}
   21b6a:	460d      	mov	r5, r1
	if (value_context->runtime) {
   21b6c:	7a01      	ldrb	r1, [r0, #8]
   21b6e:	6804      	ldr	r4, [r0, #0]
{
   21b70:	b085      	sub	sp, #20
	if (value_context->runtime) {
   21b72:	b151      	cbz	r1, 21b8a <settings_val_read_cb+0x22>
		len_read = MIN(len, rt_ctx->size);
   21b74:	6863      	ldr	r3, [r4, #4]
		memcpy(buf, rt_ctx->p_value, len_read);
   21b76:	6821      	ldr	r1, [r4, #0]
		len_read = MIN(len, rt_ctx->size);
   21b78:	429a      	cmp	r2, r3
   21b7a:	bf28      	it	cs
   21b7c:	461a      	movcs	r2, r3
		memcpy(buf, rt_ctx->p_value, len_read);
   21b7e:	4628      	mov	r0, r5
		len_read = MIN(len, rt_ctx->size);
   21b80:	9203      	str	r2, [sp, #12]
		memcpy(buf, rt_ctx->p_value, len_read);
   21b82:	f000 f980 	bl	21e86 <memcpy>
		return len_read;
   21b86:	9803      	ldr	r0, [sp, #12]
   21b88:	e009      	b.n	21b9e <settings_val_read_cb+0x36>
		rc = settings_line_val_read(value_context->off, 0, buf, len,
   21b8a:	ab03      	add	r3, sp, #12
   21b8c:	9300      	str	r3, [sp, #0]
   21b8e:	9401      	str	r4, [sp, #4]
   21b90:	4613      	mov	r3, r2
   21b92:	6840      	ldr	r0, [r0, #4]
   21b94:	462a      	mov	r2, r5
   21b96:	f000 f81c 	bl	21bd2 <settings_line_val_read>
	if (rc == 0) {
   21b9a:	2800      	cmp	r0, #0
   21b9c:	d0f3      	beq.n	21b86 <settings_val_read_cb+0x1e>
}
   21b9e:	b005      	add	sp, #20
   21ba0:	bd30      	pop	{r4, r5, pc}

00021ba2 <settings_val_get_len_cb>:
	if (value_context->runtime) {
   21ba2:	7a03      	ldrb	r3, [r0, #8]
   21ba4:	6801      	ldr	r1, [r0, #0]
   21ba6:	b913      	cbnz	r3, 21bae <settings_val_get_len_cb+0xc>
		return settings_line_val_get_len(value_context->off,
   21ba8:	6840      	ldr	r0, [r0, #4]
   21baa:	f7e2 bcbf 	b.w	452c <settings_line_val_get_len>
		return rt_ctx->size;
   21bae:	6848      	ldr	r0, [r1, #4]
}
   21bb0:	4770      	bx	lr

00021bb2 <settings_line_len_calc>:
{
   21bb2:	b510      	push	{r4, lr}
   21bb4:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   21bb6:	f000 f92c 	bl	21e12 <strlen>
   21bba:	3401      	adds	r4, #1
}
   21bbc:	4420      	add	r0, r4
   21bbe:	bd10      	pop	{r4, pc}

00021bc0 <settings_line_raw_read>:
{
   21bc0:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   21bc2:	9c04      	ldr	r4, [sp, #16]
   21bc4:	9401      	str	r4, [sp, #4]
   21bc6:	2400      	movs	r4, #0
   21bc8:	9400      	str	r4, [sp, #0]
   21bca:	f7e2 fbf9 	bl	43c0 <settings_line_raw_read_until>
}
   21bce:	b002      	add	sp, #8
   21bd0:	bd10      	pop	{r4, pc}

00021bd2 <settings_line_val_read>:
{
   21bd2:	b410      	push	{r4}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   21bd4:	4408      	add	r0, r1
{
   21bd6:	4614      	mov	r4, r2
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   21bd8:	9902      	ldr	r1, [sp, #8]
{
   21bda:	461a      	mov	r2, r3
   21bdc:	9b01      	ldr	r3, [sp, #4]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   21bde:	9101      	str	r1, [sp, #4]
   21be0:	4621      	mov	r1, r4
}
   21be2:	bc10      	pop	{r4}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   21be4:	f7ff bfec 	b.w	21bc0 <settings_line_raw_read>

00021be8 <settings_line_name_read>:
{
   21be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read_until(0, out, len_req, len_read,
   21bea:	9301      	str	r3, [sp, #4]
   21bec:	f10d 030f 	add.w	r3, sp, #15
   21bf0:	9300      	str	r3, [sp, #0]
	char const until_char = '=';
   21bf2:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   21bf4:	4613      	mov	r3, r2
   21bf6:	460a      	mov	r2, r1
   21bf8:	4601      	mov	r1, r0
   21bfa:	2000      	movs	r0, #0
	char const until_char = '=';
   21bfc:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   21c00:	f7e2 fbde 	bl	43c0 <settings_line_raw_read_until>
}
   21c04:	b004      	add	sp, #16
   21c06:	bd10      	pop	{r4, pc}

00021c08 <get_len_cb>:
}
   21c08:	8980      	ldrh	r0, [r0, #12]
   21c0a:	4770      	bx	lr

00021c0c <settings_fcb_load_cb>:
{
   21c0c:	b570      	push	{r4, r5, r6, lr}
   21c0e:	b094      	sub	sp, #80	; 0x50
   21c10:	4604      	mov	r4, r0
   21c12:	460d      	mov	r5, r1
	rc = settings_line_name_read(buf, sizeof(buf), &len_read,
   21c14:	4603      	mov	r3, r0
   21c16:	466a      	mov	r2, sp
   21c18:	214a      	movs	r1, #74	; 0x4a
   21c1a:	a801      	add	r0, sp, #4
   21c1c:	f7ff ffe4 	bl	21be8 <settings_line_name_read>
	if (rc) {
   21c20:	b950      	cbnz	r0, 21c38 <settings_fcb_load_cb+0x2c>
	buf[len_read] = '\0';
   21c22:	9a00      	ldr	r2, [sp, #0]
   21c24:	ab14      	add	r3, sp, #80	; 0x50
   21c26:	4413      	add	r3, r2
	argp->cb(buf, (void *)&entry_ctx->loc, len_read + 1, argp->cb_arg);
   21c28:	4621      	mov	r1, r4
	buf[len_read] = '\0';
   21c2a:	f803 0c4c 	strb.w	r0, [r3, #-76]
	argp->cb(buf, (void *)&entry_ctx->loc, len_read + 1, argp->cb_arg);
   21c2e:	3201      	adds	r2, #1
   21c30:	e9d5 6300 	ldrd	r6, r3, [r5]
   21c34:	a801      	add	r0, sp, #4
   21c36:	47b0      	blx	r6
}
   21c38:	2000      	movs	r0, #0
   21c3a:	b014      	add	sp, #80	; 0x50
   21c3c:	bd70      	pop	{r4, r5, r6, pc}

00021c3e <write_handler>:
{
   21c3e:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   21c40:	6805      	ldr	r5, [r0, #0]
   21c42:	6884      	ldr	r4, [r0, #8]
	return flash_area_write(entry_ctx->fap,
   21c44:	6900      	ldr	r0, [r0, #16]
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   21c46:	4421      	add	r1, r4
   21c48:	682c      	ldr	r4, [r5, #0]
	return flash_area_write(entry_ctx->fap,
   21c4a:	4421      	add	r1, r4
}
   21c4c:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   21c4e:	f7ff beb6 	b.w	219be <flash_area_write>

00021c52 <read_handler>:
{
   21c52:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   21c54:	8984      	ldrh	r4, [r0, #12]
   21c56:	428c      	cmp	r4, r1
   21c58:	dd0f      	ble.n	21c7a <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   21c5a:	681d      	ldr	r5, [r3, #0]
   21c5c:	440d      	add	r5, r1
   21c5e:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   21c60:	bf84      	itt	hi
   21c62:	1a64      	subhi	r4, r4, r1
   21c64:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   21c66:	6804      	ldr	r4, [r0, #0]
   21c68:	6885      	ldr	r5, [r0, #8]
   21c6a:	6824      	ldr	r4, [r4, #0]
	return flash_area_read(entry_ctx->fap,
   21c6c:	681b      	ldr	r3, [r3, #0]
   21c6e:	6900      	ldr	r0, [r0, #16]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   21c70:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   21c72:	4421      	add	r1, r4
}
   21c74:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   21c76:	f7ff be85 	b.w	21984 <flash_area_read>
		*len = 0;
   21c7a:	2000      	movs	r0, #0
   21c7c:	6018      	str	r0, [r3, #0]
}
   21c7e:	bc30      	pop	{r4, r5}
   21c80:	4770      	bx	lr

00021c82 <_clock_control_init>:

static int _clock_control_init(struct device *dev)
{
   21c82:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
   21c84:	2200      	movs	r2, #0
   21c86:	4610      	mov	r0, r2
   21c88:	2101      	movs	r1, #1
   21c8a:	f7e3 fa4d 	bl	5128 <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   21c8e:	2000      	movs	r0, #0
   21c90:	f7e3 fa18 	bl	50c4 <z_arch_irq_enable>

	return 0;
}
   21c94:	2000      	movs	r0, #0
   21c96:	bd08      	pop	{r3, pc}

00021c98 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   21c98:	4770      	bx	lr

00021c9a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   21c9a:	4770      	bx	lr

00021c9c <z_irq_spurious>:
	__reserved();
   21c9c:	f7e3 baa4 	b.w	51e8 <__bus_fault>

00021ca0 <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	z_sys_trace_isr_enter();
}
   21ca0:	4770      	bx	lr

00021ca2 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
   21ca2:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->r0, esf);
   21ca4:	6800      	ldr	r0, [r0, #0]
   21ca6:	f7e3 bab3 	b.w	5210 <z_NanoFatalErrorHandler>

00021caa <lock_interrupts>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
   21caa:	2320      	movs	r3, #32
   21cac:	f383 8811 	msr	BASEPRI, r3
}
   21cb0:	4770      	bx	lr

00021cb2 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   21cb2:	b508      	push	{r3, lr}
	handler();
   21cb4:	f7e3 fb54 	bl	5360 <_SysNmiOnReset>
	z_ExcExit();
}
   21cb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
   21cbc:	f7e3 b842 	b.w	4d44 <_IntExit>

00021cc0 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   21cc0:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   21cc2:	2100      	movs	r1, #0
   21cc4:	a801      	add	r0, sp, #4
   21cc6:	f7e3 fc49 	bl	555c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   21cca:	b003      	add	sp, #12
   21ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00021cd0 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   21cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21cd4:	4684      	mov	ip, r0
   21cd6:	460f      	mov	r7, r1
	register const char *s = nptr;
   21cd8:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   21cda:	462c      	mov	r4, r5
   21cdc:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   21ce0:	2b20      	cmp	r3, #32
   21ce2:	d036      	beq.n	21d52 <strtol+0x82>
   21ce4:	f1a3 0109 	sub.w	r1, r3, #9
   21ce8:	2904      	cmp	r1, #4
   21cea:	d932      	bls.n	21d52 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   21cec:	2b2d      	cmp	r3, #45	; 0x2d
   21cee:	d132      	bne.n	21d56 <strtol+0x86>
		neg = 1;
		c = *s++;
   21cf0:	786b      	ldrb	r3, [r5, #1]
   21cf2:	1cac      	adds	r4, r5, #2
		neg = 1;
   21cf4:	2101      	movs	r1, #1
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
   21cf6:	2a00      	cmp	r2, #0
   21cf8:	d05c      	beq.n	21db4 <strtol+0xe4>
   21cfa:	2a10      	cmp	r2, #16
   21cfc:	d109      	bne.n	21d12 <strtol+0x42>
   21cfe:	2b30      	cmp	r3, #48	; 0x30
   21d00:	d107      	bne.n	21d12 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   21d02:	7823      	ldrb	r3, [r4, #0]
   21d04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   21d08:	2b58      	cmp	r3, #88	; 0x58
   21d0a:	d14e      	bne.n	21daa <strtol+0xda>
		c = s[1];
   21d0c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   21d0e:	2210      	movs	r2, #16
		s += 2;
   21d10:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   21d12:	2900      	cmp	r1, #0
   21d14:	bf14      	ite	ne
   21d16:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   21d1a:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   21d1e:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   21d20:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   21d24:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   21d26:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   21d2a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   21d2e:	2d09      	cmp	r5, #9
   21d30:	d817      	bhi.n	21d62 <strtol+0x92>
			c -= '0';
   21d32:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   21d34:	429a      	cmp	r2, r3
   21d36:	dd24      	ble.n	21d82 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   21d38:	1c75      	adds	r5, r6, #1
   21d3a:	d007      	beq.n	21d4c <strtol+0x7c>
   21d3c:	4570      	cmp	r0, lr
   21d3e:	d81d      	bhi.n	21d7c <strtol+0xac>
   21d40:	d101      	bne.n	21d46 <strtol+0x76>
   21d42:	454b      	cmp	r3, r9
   21d44:	dc1a      	bgt.n	21d7c <strtol+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   21d46:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   21d4a:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   21d4c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   21d50:	e7eb      	b.n	21d2a <strtol+0x5a>
{
   21d52:	4625      	mov	r5, r4
   21d54:	e7c1      	b.n	21cda <strtol+0xa>
	} else if (c == '+')
   21d56:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   21d58:	bf04      	itt	eq
   21d5a:	1cac      	addeq	r4, r5, #2
   21d5c:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   21d5e:	2100      	movs	r1, #0
   21d60:	e7c9      	b.n	21cf6 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   21d62:	f043 0520 	orr.w	r5, r3, #32
   21d66:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   21d68:	2d19      	cmp	r5, #25
   21d6a:	d80a      	bhi.n	21d82 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   21d6c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   21d70:	2d1a      	cmp	r5, #26
   21d72:	bf34      	ite	cc
   21d74:	2537      	movcc	r5, #55	; 0x37
   21d76:	2557      	movcs	r5, #87	; 0x57
   21d78:	1b5b      	subs	r3, r3, r5
   21d7a:	e7db      	b.n	21d34 <strtol+0x64>
			any = -1;
   21d7c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   21d80:	e7e4      	b.n	21d4c <strtol+0x7c>
		}
	}
	if (any < 0) {
   21d82:	1c73      	adds	r3, r6, #1
   21d84:	d107      	bne.n	21d96 <strtol+0xc6>
   21d86:	f7fc f8f9 	bl	1df7c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   21d8a:	2326      	movs	r3, #38	; 0x26
   21d8c:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   21d8e:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != NULL) {
   21d90:	b937      	cbnz	r7, 21da0 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   21d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
   21d96:	b101      	cbz	r1, 21d9a <strtol+0xca>
		acc = -acc;
   21d98:	4240      	negs	r0, r0
	if (endptr != NULL) {
   21d9a:	2f00      	cmp	r7, #0
   21d9c:	d0f9      	beq.n	21d92 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   21d9e:	b10e      	cbz	r6, 21da4 <strtol+0xd4>
   21da0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   21da4:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   21da8:	e7f3      	b.n	21d92 <strtol+0xc2>
	if (base == 0) {
   21daa:	2330      	movs	r3, #48	; 0x30
   21dac:	2a00      	cmp	r2, #0
   21dae:	d1b0      	bne.n	21d12 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   21db0:	2208      	movs	r2, #8
   21db2:	e7ae      	b.n	21d12 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   21db4:	2b30      	cmp	r3, #48	; 0x30
   21db6:	d0a4      	beq.n	21d02 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   21db8:	220a      	movs	r2, #10
   21dba:	e7aa      	b.n	21d12 <strtol+0x42>

00021dbc <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   21dbc:	3901      	subs	r1, #1
   21dbe:	4603      	mov	r3, r0
   21dc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   21dc4:	b90a      	cbnz	r2, 21dca <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   21dc6:	701a      	strb	r2, [r3, #0]

	return dest;
}
   21dc8:	4770      	bx	lr
		*d = *s;
   21dca:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   21dce:	e7f7      	b.n	21dc0 <strcpy+0x4>

00021dd0 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   21dd0:	b570      	push	{r4, r5, r6, lr}
   21dd2:	3901      	subs	r1, #1
   21dd4:	4605      	mov	r5, r0
   21dd6:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   21dd8:	b142      	cbz	r2, 21dec <strncpy+0x1c>
   21dda:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   21dde:	1e56      	subs	r6, r2, #1
   21de0:	b92b      	cbnz	r3, 21dee <strncpy+0x1e>
   21de2:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   21de4:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   21de8:	42a2      	cmp	r2, r4
   21dea:	d1fb      	bne.n	21de4 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   21dec:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   21dee:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   21df2:	4632      	mov	r2, r6
   21df4:	e7ef      	b.n	21dd6 <strncpy+0x6>

00021df6 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   21df6:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
   21df8:	7802      	ldrb	r2, [r0, #0]
   21dfa:	428a      	cmp	r2, r1
   21dfc:	4603      	mov	r3, r0
   21dfe:	f100 0001 	add.w	r0, r0, #1
   21e02:	d004      	beq.n	21e0e <strchr+0x18>
   21e04:	2a00      	cmp	r2, #0
   21e06:	d1f7      	bne.n	21df8 <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
   21e08:	2900      	cmp	r1, #0
   21e0a:	bf18      	it	ne
   21e0c:	2300      	movne	r3, #0
}
   21e0e:	4618      	mov	r0, r3
   21e10:	4770      	bx	lr

00021e12 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   21e12:	2300      	movs	r3, #0

	while (*s != '\0') {
   21e14:	5cc2      	ldrb	r2, [r0, r3]
   21e16:	b90a      	cbnz	r2, 21e1c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   21e18:	4618      	mov	r0, r3
   21e1a:	4770      	bx	lr
		n++;
   21e1c:	3301      	adds	r3, #1
   21e1e:	e7f9      	b.n	21e14 <strlen+0x2>

00021e20 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   21e20:	3801      	subs	r0, #1
   21e22:	3901      	subs	r1, #1
   21e24:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   21e28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   21e2c:	4293      	cmp	r3, r2
   21e2e:	d101      	bne.n	21e34 <strcmp+0x14>
   21e30:	2b00      	cmp	r3, #0
   21e32:	d1f7      	bne.n	21e24 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   21e34:	1a98      	subs	r0, r3, r2
   21e36:	4770      	bx	lr

00021e38 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   21e38:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
   21e3a:	b15a      	cbz	r2, 21e54 <memcmp+0x1c>
   21e3c:	3901      	subs	r1, #1
   21e3e:	1884      	adds	r4, r0, r2
   21e40:	f810 2b01 	ldrb.w	r2, [r0], #1
   21e44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
   21e48:	42a0      	cmp	r0, r4
   21e4a:	d001      	beq.n	21e50 <memcmp+0x18>
   21e4c:	429a      	cmp	r2, r3
   21e4e:	d0f7      	beq.n	21e40 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   21e50:	1ad0      	subs	r0, r2, r3
}
   21e52:	bd10      	pop	{r4, pc}
		return 0;
   21e54:	4610      	mov	r0, r2
   21e56:	e7fc      	b.n	21e52 <memcmp+0x1a>

00021e58 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   21e58:	1a43      	subs	r3, r0, r1
   21e5a:	4293      	cmp	r3, r2
{
   21e5c:	b510      	push	{r4, lr}
   21e5e:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   21e62:	d308      	bcc.n	21e76 <memmove+0x1e>
   21e64:	3901      	subs	r1, #1
	char *dest = d;
   21e66:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   21e68:	429a      	cmp	r2, r3
   21e6a:	d00b      	beq.n	21e84 <memmove+0x2c>
			*dest = *src;
   21e6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   21e70:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   21e74:	e7f8      	b.n	21e68 <memmove+0x10>
   21e76:	440a      	add	r2, r1
			dest[n] = src[n];
   21e78:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21e7c:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   21e80:	428a      	cmp	r2, r1
   21e82:	d1f9      	bne.n	21e78 <memmove+0x20>
		}
	}

	return d;
}
   21e84:	bd10      	pop	{r4, pc}

00021e86 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   21e86:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
   21e88:	ea81 0400 	eor.w	r4, r1, r0
   21e8c:	07a5      	lsls	r5, r4, #30
   21e8e:	4603      	mov	r3, r0
   21e90:	d00b      	beq.n	21eaa <memcpy+0x24>
   21e92:	3b01      	subs	r3, #1
   21e94:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   21e96:	4291      	cmp	r1, r2
   21e98:	d11a      	bne.n	21ed0 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   21e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   21e9c:	2a00      	cmp	r2, #0
   21e9e:	d0fc      	beq.n	21e9a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   21ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
   21ea4:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   21ea8:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
   21eaa:	079c      	lsls	r4, r3, #30
   21eac:	d1f6      	bne.n	21e9c <memcpy+0x16>
   21eae:	0895      	lsrs	r5, r2, #2
   21eb0:	00ac      	lsls	r4, r5, #2
   21eb2:	1f1e      	subs	r6, r3, #4
   21eb4:	190f      	adds	r7, r1, r4
		while (n >= sizeof(unsigned int)) {
   21eb6:	42b9      	cmp	r1, r7
   21eb8:	d105      	bne.n	21ec6 <memcpy+0x40>
   21eba:	f06f 0603 	mvn.w	r6, #3
   21ebe:	fb06 2205 	mla	r2, r6, r5, r2
   21ec2:	4423      	add	r3, r4
   21ec4:	e7e5      	b.n	21e92 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   21ec6:	f851 cb04 	ldr.w	ip, [r1], #4
   21eca:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(unsigned int);
   21ece:	e7f2      	b.n	21eb6 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   21ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
   21ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   21ed8:	e7dd      	b.n	21e96 <memcpy+0x10>

00021eda <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   21eda:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   21edc:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   21ede:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
   21ee0:	079c      	lsls	r4, r3, #30
   21ee2:	d110      	bne.n	21f06 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
   21ee4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   21ee8:	ea44 4504 	orr.w	r5, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
   21eec:	0894      	lsrs	r4, r2, #2
   21eee:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   21ef2:	42b3      	cmp	r3, r6
   21ef4:	d10d      	bne.n	21f12 <memset+0x38>
   21ef6:	f06f 0503 	mvn.w	r5, #3
   21efa:	fb05 2404 	mla	r4, r5, r4, r2
   21efe:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   21f00:	42a3      	cmp	r3, r4
   21f02:	d109      	bne.n	21f18 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   21f04:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   21f06:	2a00      	cmp	r2, #0
   21f08:	d0fc      	beq.n	21f04 <memset+0x2a>
		*(d_byte++) = c_byte;
   21f0a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   21f0e:	3a01      	subs	r2, #1
   21f10:	e7e6      	b.n	21ee0 <memset+0x6>
		*(d_word++) = c_word;
   21f12:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(unsigned int);
   21f16:	e7ec      	b.n	21ef2 <memset+0x18>
		*(d_byte++) = c_byte;
   21f18:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   21f1c:	e7f0      	b.n	21f00 <memset+0x26>

00021f1e <memchr>:
 *
 * @return pointer to start of found byte
 */

void *memchr(const void *s, unsigned char c, size_t n)
{
   21f1e:	b510      	push	{r4, lr}
	if (n != 0) {
   21f20:	b152      	cbz	r2, 21f38 <memchr+0x1a>
   21f22:	4402      	add	r2, r0
		const unsigned char *p = s;

		do {
			if (*p++ == c) {
   21f24:	4603      	mov	r3, r0
   21f26:	f813 4b01 	ldrb.w	r4, [r3], #1
   21f2a:	428c      	cmp	r4, r1
   21f2c:	d003      	beq.n	21f36 <memchr+0x18>
				return ((void *)(p - 1));
			}

		} while (--n != 0);
   21f2e:	429a      	cmp	r2, r3
   21f30:	4618      	mov	r0, r3
   21f32:	d1f7      	bne.n	21f24 <memchr+0x6>
	}

	return NULL;
   21f34:	2000      	movs	r0, #0
}
   21f36:	bd10      	pop	{r4, pc}
	return NULL;
   21f38:	4610      	mov	r0, r2
   21f3a:	e7fc      	b.n	21f36 <memchr+0x18>

00021f3c <_to_x>:
{
   21f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21f3e:	4604      	mov	r4, r0
		int d = n % base;
   21f40:	fbb1 f7f2 	udiv	r7, r1, r2
   21f44:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   21f48:	2d09      	cmp	r5, #9
   21f4a:	bf8c      	ite	hi
   21f4c:	2627      	movhi	r6, #39	; 0x27
   21f4e:	2600      	movls	r6, #0
   21f50:	3530      	adds	r5, #48	; 0x30
   21f52:	4435      	add	r5, r6
	} while (n);
   21f54:	428a      	cmp	r2, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   21f56:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
   21f5a:	d90a      	bls.n	21f72 <_to_x+0x36>
		*end++ = '0';
   21f5c:	2130      	movs	r1, #48	; 0x30
	while (end - start < minlen) {
   21f5e:	1a22      	subs	r2, r4, r0
   21f60:	4293      	cmp	r3, r2
   21f62:	dc08      	bgt.n	21f76 <_to_x+0x3a>
	*end = 0;
   21f64:	2300      	movs	r3, #0
   21f66:	f804 3901 	strb.w	r3, [r4], #-1
	for (end--; end > start; end--, start++) {
   21f6a:	4284      	cmp	r4, r0
   21f6c:	d806      	bhi.n	21f7c <_to_x+0x40>
}
   21f6e:	4610      	mov	r0, r2
   21f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
   21f72:	4639      	mov	r1, r7
   21f74:	e7e4      	b.n	21f40 <_to_x+0x4>
		*end++ = '0';
   21f76:	f804 1b01 	strb.w	r1, [r4], #1
   21f7a:	e7f0      	b.n	21f5e <_to_x+0x22>
		char tmp = *end;
   21f7c:	7823      	ldrb	r3, [r4, #0]
		*end = *start;
   21f7e:	7801      	ldrb	r1, [r0, #0]
   21f80:	f804 1901 	strb.w	r1, [r4], #-1
		*start = tmp;
   21f84:	f800 3b01 	strb.w	r3, [r0], #1
   21f88:	e7ef      	b.n	21f6a <_to_x+0x2e>

00021f8a <_rlrshift>:
{
   21f8a:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   21f8c:	e9d0 6500 	ldrd	r6, r5, [r0]
   21f90:	0872      	lsrs	r2, r6, #1
   21f92:	f006 0301 	and.w	r3, r6, #1
   21f96:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   21f9a:	189b      	adds	r3, r3, r2
   21f9c:	f04f 0100 	mov.w	r1, #0
   21fa0:	ea4f 0455 	mov.w	r4, r5, lsr #1
   21fa4:	eb44 0101 	adc.w	r1, r4, r1
   21fa8:	e9c0 3100 	strd	r3, r1, [r0]
}
   21fac:	bd70      	pop	{r4, r5, r6, pc}

00021fae <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
   21fae:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   21fb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2;
   21fb6:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5) << shifts[i];
   21fb8:	f04f 0705 	mov.w	r7, #5
   21fbc:	f04f 0c00 	mov.w	ip, #0
	rem += 2;
   21fc0:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5;
   21fc4:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5) << shifts[i];
   21fc8:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5;
   21fcc:	fb07 f10e 	mul.w	r1, r7, lr
   21fd0:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   21fd4:	08f2      	lsrs	r2, r6, #3
   21fd6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5) << shifts[i];
   21fda:	fbb2 f1f7 	udiv	r1, r2, r7
   21fde:	00ca      	lsls	r2, r1, #3
		quot += q;
   21fe0:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5) << shifts[i];
   21fe4:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   21fe8:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5;
   21fec:	fba2 2307 	umull	r2, r3, r2, r7
   21ff0:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5) << shifts[i];
   21ff2:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   21ff6:	eb18 0403 	adds.w	r4, r8, r3
   21ffa:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
   21ffe:	e9c0 4500 	strd	r4, r5, [r0]
}
   22002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00022006 <_get_digit>:
	if (*digit_count > 0) {
   22006:	680b      	ldr	r3, [r1, #0]
   22008:	2b00      	cmp	r3, #0
{
   2200a:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   2200c:	dd10      	ble.n	22030 <_get_digit+0x2a>
		*digit_count -= 1;
   2200e:	3b01      	subs	r3, #1
		*fr = *fr * 10;
   22010:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
   22012:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
   22014:	6844      	ldr	r4, [r0, #4]
   22016:	210a      	movs	r1, #10
   22018:	fba2 5601 	umull	r5, r6, r2, r1
   2201c:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   22020:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   22024:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   22028:	0f31      	lsrs	r1, r6, #28
   2202a:	3130      	adds	r1, #48	; 0x30
}
   2202c:	b2c8      	uxtb	r0, r1
   2202e:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   22030:	2130      	movs	r1, #48	; 0x30
   22032:	e7fb      	b.n	2202c <_get_digit+0x26>

00022034 <_stdout_hook_default>:
}
   22034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22038:	4770      	bx	lr

0002203a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   2203a:	684b      	ldr	r3, [r1, #4]
   2203c:	2b01      	cmp	r3, #1
   2203e:	dd07      	ble.n	22050 <sprintf_out+0x16>
		*(p->ptr) = c;
   22040:	680b      	ldr	r3, [r1, #0]
   22042:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   22044:	680b      	ldr	r3, [r1, #0]
   22046:	3301      	adds	r3, #1
   22048:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   2204a:	684b      	ldr	r3, [r1, #4]
   2204c:	3b01      	subs	r3, #1
   2204e:	604b      	str	r3, [r1, #4]
}
   22050:	2000      	movs	r0, #0
   22052:	4770      	bx	lr

00022054 <send_cmd_status>:
{
   22054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22058:	4680      	mov	r8, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   2205a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   2205e:	460f      	mov	r7, r1
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   22060:	f7e6 f9b0 	bl	83c4 <bt_buf_get_cmd_complete>
	*(u8_t *)net_buf_user_data(buf) = type;
   22064:	2501      	movs	r5, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   22066:	f100 0608 	add.w	r6, r0, #8
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   2206a:	4604      	mov	r4, r0
   2206c:	7505      	strb	r5, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   2206e:	2102      	movs	r1, #2
   22070:	4630      	mov	r0, r6
   22072:	f002 fe2b 	bl	24ccc <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   22076:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   22078:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2207a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   2207c:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   2207e:	4630      	mov	r0, r6
   22080:	f002 fe24 	bl	24ccc <net_buf_simple_add>
	evt->ncmd = 1;
   22084:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   22086:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   22088:	f8a0 8002 	strh.w	r8, [r0, #2]
	bt_recv_prio(buf);
   2208c:	4620      	mov	r0, r4
}
   2208e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   22092:	f7e5 bddf 	b.w	7c54 <bt_recv_prio>

00022096 <sys_memcpy_swap.constprop.1>:
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   22096:	f101 0320 	add.w	r3, r1, #32
   2209a:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2209c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   220a0:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   220a4:	428b      	cmp	r3, r1
   220a6:	d1f9      	bne.n	2209c <sys_memcpy_swap.constprop.1+0x6>
	}
}
   220a8:	4770      	bx	lr

000220aa <default_CSPRNG>:
{
   220aa:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   220ac:	f002 fa63 	bl	24576 <bt_rand>
}
   220b0:	fab0 f080 	clz	r0, r0
   220b4:	0940      	lsrs	r0, r0, #5
   220b6:	bd08      	pop	{r3, pc}

000220b8 <bt_settings_decode_key>:
{
   220b8:	b570      	push	{r4, r5, r6, lr}
   220ba:	4604      	mov	r4, r0
   220bc:	460e      	mov	r6, r1
	if (strlen(key) != 13) {
   220be:	f7ff fea8 	bl	21e12 <strlen>
   220c2:	280d      	cmp	r0, #13
   220c4:	d128      	bne.n	22118 <bt_settings_decode_key+0x60>
	if (key[12] == '0') {
   220c6:	7b23      	ldrb	r3, [r4, #12]
   220c8:	2b30      	cmp	r3, #48	; 0x30
   220ca:	d11c      	bne.n	22106 <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_PUBLIC;
   220cc:	2300      	movs	r3, #0
		addr->type = BT_ADDR_LE_RANDOM;
   220ce:	7033      	strb	r3, [r6, #0]
   220d0:	1e60      	subs	r0, r4, #1
{
   220d2:	2501      	movs	r5, #1
   220d4:	2205      	movs	r2, #5
		if (*key >= '0' && *key <= '9') {
   220d6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   220da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   220de:	b2db      	uxtb	r3, r3
   220e0:	2b09      	cmp	r3, #9
   220e2:	d906      	bls.n	220f2 <bt_settings_decode_key+0x3a>
		} else if (*key >= 'a' && *key <= 'f') {
   220e4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   220e8:	2b05      	cmp	r3, #5
   220ea:	d815      	bhi.n	22118 <bt_settings_decode_key+0x60>
			nibble = *key - 'a' + 10;
   220ec:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   220f0:	b2db      	uxtb	r3, r3
		if (high) {
   220f2:	18b1      	adds	r1, r6, r2
   220f4:	b15d      	cbz	r5, 2210e <bt_settings_decode_key+0x56>
			addr->a.val[i] = nibble << 4;
   220f6:	011b      	lsls	r3, r3, #4
   220f8:	b2db      	uxtb	r3, r3
			high = false;
   220fa:	2500      	movs	r5, #0
   220fc:	704b      	strb	r3, [r1, #1]
	for (i = 5, high = true; i >= 0; key++) {
   220fe:	1c53      	adds	r3, r2, #1
   22100:	d1e9      	bne.n	220d6 <bt_settings_decode_key+0x1e>
	return 0;
   22102:	2000      	movs	r0, #0
}
   22104:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   22106:	2b31      	cmp	r3, #49	; 0x31
   22108:	d106      	bne.n	22118 <bt_settings_decode_key+0x60>
		addr->type = BT_ADDR_LE_RANDOM;
   2210a:	2301      	movs	r3, #1
   2210c:	e7df      	b.n	220ce <bt_settings_decode_key+0x16>
			addr->a.val[i] |= nibble;
   2210e:	784c      	ldrb	r4, [r1, #1]
			i--;
   22110:	3a01      	subs	r2, #1
			addr->a.val[i] |= nibble;
   22112:	4323      	orrs	r3, r4
			high = true;
   22114:	2501      	movs	r5, #1
   22116:	e7f1      	b.n	220fc <bt_settings_decode_key+0x44>
		return -EINVAL;
   22118:	f06f 0015 	mvn.w	r0, #21
   2211c:	e7f2      	b.n	22104 <bt_settings_decode_key+0x4c>

0002211e <bt_uuid_cmp>:
{
   2211e:	b510      	push	{r4, lr}
   22120:	460c      	mov	r4, r1
	if (u1->type != u2->type)
   22122:	7801      	ldrb	r1, [r0, #0]
   22124:	7822      	ldrb	r2, [r4, #0]
   22126:	428a      	cmp	r2, r1
{
   22128:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
   2212a:	d00e      	beq.n	2214a <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2212c:	4669      	mov	r1, sp
   2212e:	f7e4 f957 	bl	63e0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   22132:	a905      	add	r1, sp, #20
   22134:	4620      	mov	r0, r4
   22136:	f7e4 f953 	bl	63e0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2213a:	2210      	movs	r2, #16
   2213c:	f10d 0115 	add.w	r1, sp, #21
   22140:	f10d 0001 	add.w	r0, sp, #1
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   22144:	f7ff fe78 	bl	21e38 <memcmp>
   22148:	e006      	b.n	22158 <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   2214a:	2a01      	cmp	r2, #1
   2214c:	d00a      	beq.n	22164 <bt_uuid_cmp+0x46>
   2214e:	b12a      	cbz	r2, 2215c <bt_uuid_cmp+0x3e>
   22150:	2a02      	cmp	r2, #2
   22152:	d00a      	beq.n	2216a <bt_uuid_cmp+0x4c>
	return -EINVAL;
   22154:	f06f 0015 	mvn.w	r0, #21
}
   22158:	b00a      	add	sp, #40	; 0x28
   2215a:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2215c:	8840      	ldrh	r0, [r0, #2]
   2215e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   22160:	1ac0      	subs	r0, r0, r3
   22162:	e7f9      	b.n	22158 <bt_uuid_cmp+0x3a>
   22164:	6840      	ldr	r0, [r0, #4]
   22166:	6863      	ldr	r3, [r4, #4]
   22168:	e7fa      	b.n	22160 <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2216a:	2210      	movs	r2, #16
   2216c:	1c61      	adds	r1, r4, #1
   2216e:	3001      	adds	r0, #1
   22170:	e7e8      	b.n	22144 <bt_uuid_cmp+0x26>

00022172 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   22172:	2207      	movs	r2, #7
   22174:	f7ff be87 	b.w	21e86 <memcpy>

00022178 <hci_stack_dump>:
{
   22178:	4603      	mov	r3, r0
   2217a:	4608      	mov	r0, r1
	stack_analyze((char *)user_data, (char *)thread->stack_info.start,
   2217c:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
   22180:	f7e4 b9f8 	b.w	6574 <stack_analyze>

00022184 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22184:	f3bf 8f5b 	dmb	ish
   22188:	e850 3f00 	ldrex	r3, [r0]
   2218c:	ea43 0201 	orr.w	r2, r3, r1
   22190:	e840 2c00 	strex	ip, r2, [r0]
   22194:	f1bc 0f00 	cmp.w	ip, #0
   22198:	d1f6      	bne.n	22188 <atomic_or+0x4>
   2219a:	f3bf 8f5b 	dmb	ish
}
   2219e:	4618      	mov	r0, r3
   221a0:	4770      	bx	lr

000221a2 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   221a2:	f3bf 8f5b 	dmb	ish
   221a6:	e850 3f00 	ldrex	r3, [r0]
   221aa:	ea03 0201 	and.w	r2, r3, r1
   221ae:	e840 2c00 	strex	ip, r2, [r0]
   221b2:	f1bc 0f00 	cmp.w	ip, #0
   221b6:	d1f6      	bne.n	221a6 <atomic_and+0x4>
   221b8:	f3bf 8f5b 	dmb	ish
}
   221bc:	4618      	mov	r0, r3
   221be:	4770      	bx	lr

000221c0 <find_pending_connect>:
{
   221c0:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   221c2:	2103      	movs	r1, #3
{
   221c4:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   221c6:	f7e6 fd4b 	bl	8c60 <bt_conn_lookup_state_le>
	if (conn) {
   221ca:	b928      	cbnz	r0, 221d8 <find_pending_connect+0x18>
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   221cc:	4620      	mov	r0, r4
   221ce:	2102      	movs	r1, #2
}
   221d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   221d4:	f7e6 bd44 	b.w	8c60 <bt_conn_lookup_state_le>
}
   221d8:	bd10      	pop	{r4, pc}

000221da <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   221da:	f3bf 8f5b 	dmb	ish
   221de:	6800      	ldr	r0, [r0, #0]
   221e0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   221e4:	4108      	asrs	r0, r1
}
   221e6:	f000 0001 	and.w	r0, r0, #1
   221ea:	4770      	bx	lr

000221ec <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   221ec:	6880      	ldr	r0, [r0, #8]
   221ee:	f7e4 bf5d 	b.w	70ac <enh_conn_complete>

000221f2 <le_legacy_conn_complete>:
{
   221f2:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   221f4:	6881      	ldr	r1, [r0, #8]
{
   221f6:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
   221f8:	780b      	ldrb	r3, [r1, #0]
   221fa:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   221fe:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   22202:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   22206:	78cb      	ldrb	r3, [r1, #3]
   22208:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   2220c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   22210:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   22214:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   22218:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   2221c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   22220:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   22224:	7c4b      	ldrb	r3, [r1, #17]
   22226:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2222a:	a805      	add	r0, sp, #20
   2222c:	3104      	adds	r1, #4
   2222e:	f7ff ffa0 	bl	22172 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   22232:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   22234:	4669      	mov	r1, sp
   22236:	2206      	movs	r2, #6
   22238:	f10d 001b 	add.w	r0, sp, #27
   2223c:	9400      	str	r4, [sp, #0]
   2223e:	f8ad 4004 	strh.w	r4, [sp, #4]
   22242:	f7ff fe20 	bl	21e86 <memcpy>
   22246:	2206      	movs	r2, #6
   22248:	a902      	add	r1, sp, #8
   2224a:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2224e:	9402      	str	r4, [sp, #8]
   22250:	f8ad 400c 	strh.w	r4, [sp, #12]
   22254:	f7ff fe17 	bl	21e86 <memcpy>
	enh_conn_complete(&enh);
   22258:	a804      	add	r0, sp, #16
   2225a:	f7e4 ff27 	bl	70ac <enh_conn_complete>
}
   2225e:	b00c      	add	sp, #48	; 0x30
   22260:	bd10      	pop	{r4, pc}

00022262 <le_set_private_addr.isra.22>:
static int le_set_private_addr(u8_t id)
   22262:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   22264:	2106      	movs	r1, #6
   22266:	4668      	mov	r0, sp
   22268:	f002 f985 	bl	24576 <bt_rand>
	if (err) {
   2226c:	b940      	cbnz	r0, 22280 <le_set_private_addr.isra.22+0x1e>
	nrpa.val[5] &= 0x3f;
   2226e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   22272:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   22274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22278:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   2227c:	f7e4 fffa 	bl	7274 <set_random_address>
}
   22280:	b003      	add	sp, #12
   22282:	f85d fb04 	ldr.w	pc, [sp], #4

00022286 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   22286:	8802      	ldrh	r2, [r0, #0]
   22288:	8843      	ldrh	r3, [r0, #2]
   2228a:	429a      	cmp	r2, r3
{
   2228c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2228e:	d818      	bhi.n	222c2 <bt_le_conn_params_valid+0x3c>
   22290:	2a05      	cmp	r2, #5
   22292:	d916      	bls.n	222c2 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   22294:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   22298:	d813      	bhi.n	222c2 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   2229a:	8884      	ldrh	r4, [r0, #4]
   2229c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   222a0:	d20f      	bcs.n	222c2 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   222a2:	88c1      	ldrh	r1, [r0, #6]
   222a4:	f1a1 020a 	sub.w	r2, r1, #10
   222a8:	b292      	uxth	r2, r2
   222aa:	f640 4076 	movw	r0, #3190	; 0xc76
   222ae:	4282      	cmp	r2, r0
   222b0:	d807      	bhi.n	222c2 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
   222b2:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   222b6:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   222ba:	bfb4      	ite	lt
   222bc:	2001      	movlt	r0, #1
   222be:	2000      	movge	r0, #0
}
   222c0:	bd10      	pop	{r4, pc}
		return false;
   222c2:	2000      	movs	r0, #0
   222c4:	e7fc      	b.n	222c0 <bt_le_conn_params_valid+0x3a>

000222c6 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   222c6:	2301      	movs	r3, #1
{
   222c8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   222ca:	2106      	movs	r1, #6
{
   222cc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   222ce:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   222d2:	f002 f950 	bl	24576 <bt_rand>
	if (err) {
   222d6:	b918      	cbnz	r0, 222e0 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   222d8:	79a3      	ldrb	r3, [r4, #6]
   222da:	f063 033f 	orn	r3, r3, #63	; 0x3f
   222de:	71a3      	strb	r3, [r4, #6]
}
   222e0:	bd10      	pop	{r4, pc}

000222e2 <bt_send>:
		return bt_hci_ecc_send(buf);
   222e2:	f7e3 be95 	b.w	6010 <bt_hci_ecc_send>

000222e6 <bt_addr_le_is_bonded>:
}
   222e6:	2000      	movs	r0, #0
   222e8:	4770      	bx	lr

000222ea <bt_le_adv_start>:
{
   222ea:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   222ec:	7844      	ldrb	r4, [r0, #1]
   222ee:	f014 0410 	ands.w	r4, r4, #16
   222f2:	d106      	bne.n	22302 <bt_le_adv_start+0x18>
	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
   222f4:	9401      	str	r4, [sp, #4]
   222f6:	9c04      	ldr	r4, [sp, #16]
   222f8:	9400      	str	r4, [sp, #0]
   222fa:	f7e5 fe75 	bl	7fe8 <bt_le_adv_start_internal>
}
   222fe:	b002      	add	sp, #8
   22300:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22302:	f06f 0015 	mvn.w	r0, #21
   22306:	e7fa      	b.n	222fe <bt_le_adv_start+0x14>

00022308 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22308:	f3bf 8f5b 	dmb	ish
   2230c:	6800      	ldr	r0, [r0, #0]
   2230e:	f3bf 8f5b 	dmb	ish
}
   22312:	4770      	bx	lr

00022314 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   22314:	8983      	ldrh	r3, [r0, #12]
{
   22316:	b510      	push	{r4, lr}
   22318:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   2231a:	b12b      	cbz	r3, 22328 <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   2231c:	6900      	ldr	r0, [r0, #16]
   2231e:	f7fb fa23 	bl	1d768 <net_buf_unref>
	conn->rx = NULL;
   22322:	2300      	movs	r3, #0
   22324:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   22326:	81a3      	strh	r3, [r4, #12]
}
   22328:	bd10      	pop	{r4, pc}

0002232a <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2232a:	f3bf 8f5b 	dmb	ish
   2232e:	e850 3f00 	ldrex	r3, [r0]
   22332:	1e5a      	subs	r2, r3, #1
   22334:	e840 2100 	strex	r1, r2, [r0]
   22338:	2900      	cmp	r1, #0
   2233a:	d1f8      	bne.n	2232e <atomic_dec+0x4>
   2233c:	f3bf 8f5b 	dmb	ish
}
   22340:	4618      	mov	r0, r3
   22342:	4770      	bx	lr

00022344 <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22344:	f3bf 8f5b 	dmb	ish
   22348:	e850 3f00 	ldrex	r3, [r0]
   2234c:	1c5a      	adds	r2, r3, #1
   2234e:	e840 2100 	strex	r1, r2, [r0]
   22352:	2900      	cmp	r1, #0
   22354:	d1f8      	bne.n	22348 <atomic_inc+0x4>
   22356:	f3bf 8f5b 	dmb	ish
}
   2235a:	4618      	mov	r0, r3
   2235c:	4770      	bx	lr

0002235e <conn_cleanup>:
{
   2235e:	b538      	push	{r3, r4, r5, lr}
   22360:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   22362:	f100 052c 	add.w	r5, r0, #44	; 0x2c
   22366:	2100      	movs	r1, #0
   22368:	4628      	mov	r0, r5
   2236a:	f002 fc31 	bl	24bd0 <net_buf_get>
   2236e:	b958      	cbnz	r0, 22388 <conn_cleanup+0x2a>
	bt_conn_notify_tx(conn);
   22370:	4620      	mov	r0, r4
   22372:	f7e6 fa43 	bl	87fc <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
   22376:	4620      	mov	r0, r4
   22378:	f7ff ffcc 	bl	22314 <bt_conn_reset_rx_state>
	atomic_dec(&conn->ref);
   2237c:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
   22380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
   22384:	f7ff bfd1 	b.w	2232a <atomic_dec>
		net_buf_unref(buf);
   22388:	f7fb f9ee 	bl	1d768 <net_buf_unref>
   2238c:	e7eb      	b.n	22366 <conn_cleanup+0x8>

0002238e <bt_conn_addr_le_cmp>:
{
   2238e:	b538      	push	{r3, r4, r5, lr}
   22390:	460d      	mov	r5, r1
   22392:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   22394:	f100 0148 	add.w	r1, r0, #72	; 0x48
   22398:	2207      	movs	r2, #7
   2239a:	4628      	mov	r0, r5
   2239c:	f7ff fd4c 	bl	21e38 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   223a0:	b160      	cbz	r0, 223bc <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   223a2:	78e3      	ldrb	r3, [r4, #3]
   223a4:	2207      	movs	r2, #7
   223a6:	b933      	cbnz	r3, 223b6 <bt_conn_addr_le_cmp+0x28>
   223a8:	f104 0156 	add.w	r1, r4, #86	; 0x56
   223ac:	4628      	mov	r0, r5
}
   223ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   223b2:	f7ff bd41 	b.w	21e38 <memcmp>
   223b6:	f104 014f 	add.w	r1, r4, #79	; 0x4f
   223ba:	e7f7      	b.n	223ac <bt_conn_addr_le_cmp+0x1e>
   223bc:	bd38      	pop	{r3, r4, r5, pc}

000223be <bt_conn_ref>:
{
   223be:	b510      	push	{r4, lr}
   223c0:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
   223c2:	3044      	adds	r0, #68	; 0x44
   223c4:	f7ff ffbe 	bl	22344 <atomic_inc>
}
   223c8:	4620      	mov	r0, r4
   223ca:	bd10      	pop	{r4, pc}

000223cc <bt_conn_unref>:
	atomic_dec(&conn->ref);
   223cc:	3044      	adds	r0, #68	; 0x44
   223ce:	f7ff bfac 	b.w	2232a <atomic_dec>

000223d2 <bt_conn_disconnect>:
	switch (conn->state) {
   223d2:	7a83      	ldrb	r3, [r0, #10]
   223d4:	3b01      	subs	r3, #1
{
   223d6:	b570      	push	{r4, r5, r6, lr}
   223d8:	4604      	mov	r4, r0
   223da:	460e      	mov	r6, r1
	switch (conn->state) {
   223dc:	2b04      	cmp	r3, #4
   223de:	d804      	bhi.n	223ea <bt_conn_disconnect+0x18>
   223e0:	e8df f003 	tbb	[pc, r3]
   223e4:	150b0d07 	.word	0x150b0d07
   223e8:	0b          	.byte	0x0b
   223e9:	00          	.byte	0x00
		return -ENOTCONN;
   223ea:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   223ee:	4628      	mov	r0, r5
   223f0:	bd70      	pop	{r4, r5, r6, pc}
		conn->err = reason;
   223f2:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   223f4:	2100      	movs	r1, #0
   223f6:	f7e6 fb3b 	bl	8a70 <bt_conn_set_state>
		return 0;
   223fa:	2500      	movs	r5, #0
   223fc:	e7f7      	b.n	223ee <bt_conn_disconnect+0x1c>
		conn->err = reason;
   223fe:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   22400:	2100      	movs	r1, #0
   22402:	f7e6 fb35 	bl	8a70 <bt_conn_set_state>
}
   22406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_le_adv_stop();
   2240a:	f7e5 bee5 	b.w	81d8 <bt_le_adv_stop>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2240e:	2103      	movs	r1, #3
   22410:	f240 4006 	movw	r0, #1030	; 0x406
   22414:	f7e4 fc4e 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
   22418:	4605      	mov	r5, r0
   2241a:	b198      	cbz	r0, 22444 <bt_conn_disconnect+0x72>
	disconn = net_buf_add(buf, sizeof(*disconn));
   2241c:	2103      	movs	r1, #3
   2241e:	3008      	adds	r0, #8
   22420:	f002 fc54 	bl	24ccc <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
   22424:	8823      	ldrh	r3, [r4, #0]
   22426:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
   22428:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   2242a:	4629      	mov	r1, r5
   2242c:	f240 4006 	movw	r0, #1030	; 0x406
   22430:	f7e4 fc70 	bl	6d14 <bt_hci_cmd_send>
	if (err) {
   22434:	4605      	mov	r5, r0
   22436:	2800      	cmp	r0, #0
   22438:	d1d9      	bne.n	223ee <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2243a:	2105      	movs	r1, #5
   2243c:	4620      	mov	r0, r4
   2243e:	f7e6 fb17 	bl	8a70 <bt_conn_set_state>
	return 0;
   22442:	e7d4      	b.n	223ee <bt_conn_disconnect+0x1c>
		return -ENOBUFS;
   22444:	f06f 0536 	mvn.w	r5, #54	; 0x36
   22448:	e7d1      	b.n	223ee <bt_conn_disconnect+0x1c>

0002244a <bt_conn_le_conn_update>:
{
   2244a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2244c:	4607      	mov	r7, r0
   2244e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   22450:	f242 0013 	movw	r0, #8211	; 0x2013
   22454:	210e      	movs	r1, #14
   22456:	f7e4 fc2d 	bl	6cb4 <bt_hci_cmd_create>
	if (!buf) {
   2245a:	4606      	mov	r6, r0
   2245c:	b1c8      	cbz	r0, 22492 <bt_conn_le_conn_update+0x48>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   2245e:	210e      	movs	r1, #14
   22460:	3008      	adds	r0, #8
   22462:	f002 fc33 	bl	24ccc <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   22466:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   22468:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2246a:	220e      	movs	r2, #14
   2246c:	f7ff fd35 	bl	21eda <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   22470:	883b      	ldrh	r3, [r7, #0]
   22472:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   22474:	882b      	ldrh	r3, [r5, #0]
   22476:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   22478:	886b      	ldrh	r3, [r5, #2]
   2247a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2247c:	88ab      	ldrh	r3, [r5, #4]
   2247e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   22480:	88eb      	ldrh	r3, [r5, #6]
   22482:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   22484:	4631      	mov	r1, r6
   22486:	f242 0013 	movw	r0, #8211	; 0x2013
}
   2248a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   2248e:	f7e4 bc41 	b.w	6d14 <bt_hci_cmd_send>
}
   22492:	f06f 0036 	mvn.w	r0, #54	; 0x36
   22496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022498 <l2cap_connected>:
}
   22498:	4770      	bx	lr

0002249a <l2cap_disconnected>:
   2249a:	4770      	bx	lr

0002249c <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2249c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   2249e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   224a0:	b17b      	cbz	r3, 224c2 <bt_l2cap_chan_remove+0x26>
   224a2:	3b08      	subs	r3, #8
   224a4:	2200      	movs	r2, #0
   224a6:	b163      	cbz	r3, 224c2 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   224a8:	428b      	cmp	r3, r1
   224aa:	f103 0408 	add.w	r4, r3, #8
   224ae:	d10f      	bne.n	224d0 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   224b0:	688b      	ldr	r3, [r1, #8]
   224b2:	b93a      	cbnz	r2, 224c4 <bt_l2cap_chan_remove+0x28>
   224b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
	list->head = node;
   224b6:	63c3      	str	r3, [r0, #60]	; 0x3c
Z_GENLIST_REMOVE(slist, snode)
   224b8:	4294      	cmp	r4, r2
   224ba:	d100      	bne.n	224be <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   224bc:	6403      	str	r3, [r0, #64]	; 0x40
	parent->next = child;
   224be:	2300      	movs	r3, #0
   224c0:	608b      	str	r3, [r1, #8]
}
   224c2:	bd10      	pop	{r4, pc}
   224c4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   224c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   224c8:	429c      	cmp	r4, r3
	list->tail = node;
   224ca:	bf08      	it	eq
   224cc:	6402      	streq	r2, [r0, #64]	; 0x40
   224ce:	e7f6      	b.n	224be <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   224d0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   224d2:	2b00      	cmp	r3, #0
   224d4:	d0f5      	beq.n	224c2 <bt_l2cap_chan_remove+0x26>
   224d6:	3b08      	subs	r3, #8
   224d8:	4622      	mov	r2, r4
   224da:	e7e4      	b.n	224a6 <bt_l2cap_chan_remove+0xa>

000224dc <bt_l2cap_chan_del>:
	if (!chan->conn) {
   224dc:	6803      	ldr	r3, [r0, #0]
{
   224de:	b510      	push	{r4, lr}
   224e0:	4604      	mov	r4, r0
	if (!chan->conn) {
   224e2:	b12b      	cbz	r3, 224f0 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   224e4:	6843      	ldr	r3, [r0, #4]
   224e6:	685b      	ldr	r3, [r3, #4]
   224e8:	b103      	cbz	r3, 224ec <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   224ea:	4798      	blx	r3
	chan->conn = NULL;
   224ec:	2300      	movs	r3, #0
   224ee:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   224f0:	68e3      	ldr	r3, [r4, #12]
   224f2:	b11b      	cbz	r3, 224fc <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
   224f4:	4620      	mov	r0, r4
}
   224f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
   224fa:	4718      	bx	r3
}
   224fc:	bd10      	pop	{r4, pc}

000224fe <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   224fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   22500:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22502:	b173      	cbz	r3, 22522 <bt_l2cap_disconnected+0x24>
   22504:	f1b3 0008 	subs.w	r0, r3, #8
   22508:	d00b      	beq.n	22522 <bt_l2cap_disconnected+0x24>
   2250a:	681c      	ldr	r4, [r3, #0]
   2250c:	b104      	cbz	r4, 22510 <bt_l2cap_disconnected+0x12>
   2250e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   22510:	f7ff ffe4 	bl	224dc <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22514:	b12c      	cbz	r4, 22522 <bt_l2cap_disconnected+0x24>
   22516:	68a3      	ldr	r3, [r4, #8]
   22518:	b103      	cbz	r3, 2251c <bt_l2cap_disconnected+0x1e>
   2251a:	3b08      	subs	r3, #8
{
   2251c:	4620      	mov	r0, r4
   2251e:	461c      	mov	r4, r3
   22520:	e7f6      	b.n	22510 <bt_l2cap_disconnected+0x12>
}
   22522:	bd10      	pop	{r4, pc}

00022524 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   22524:	3104      	adds	r1, #4
   22526:	f7e6 bc1b 	b.w	8d60 <bt_conn_create_pdu>

0002252a <bt_l2cap_send_cb>:
{
   2252a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2252c:	4614      	mov	r4, r2
   2252e:	4605      	mov	r5, r0
   22530:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   22532:	f102 0008 	add.w	r0, r2, #8
   22536:	2104      	movs	r1, #4
{
   22538:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
   2253a:	f002 fc0e 	bl	24d5a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2253e:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   22540:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   22542:	3904      	subs	r1, #4
   22544:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
   22546:	4632      	mov	r2, r6
   22548:	4621      	mov	r1, r4
   2254a:	4628      	mov	r0, r5
}
   2254c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
   22550:	f7e6 b92e 	b.w	87b0 <bt_conn_send_cb>

00022554 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22554:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   22556:	b108      	cbz	r0, 2255c <bt_l2cap_le_lookup_tx_cid+0x8>
   22558:	3808      	subs	r0, #8
   2255a:	b900      	cbnz	r0, 2255e <bt_l2cap_le_lookup_tx_cid+0xa>
}
   2255c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2255e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   22562:	428b      	cmp	r3, r1
   22564:	d0fa      	beq.n	2255c <bt_l2cap_le_lookup_tx_cid+0x8>
   22566:	6880      	ldr	r0, [r0, #8]
   22568:	e7f5      	b.n	22556 <bt_l2cap_le_lookup_tx_cid+0x2>

0002256a <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2256a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   2256c:	b108      	cbz	r0, 22572 <bt_l2cap_le_lookup_rx_cid+0x8>
   2256e:	3808      	subs	r0, #8
   22570:	b900      	cbnz	r0, 22574 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   22572:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   22574:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   22576:	428b      	cmp	r3, r1
   22578:	d0fb      	beq.n	22572 <bt_l2cap_le_lookup_rx_cid+0x8>
   2257a:	6880      	ldr	r0, [r0, #8]
   2257c:	e7f6      	b.n	2256c <bt_l2cap_le_lookup_rx_cid+0x2>

0002257e <att_prepare_write_req>:
}
   2257e:	2006      	movs	r0, #6
   22580:	4770      	bx	lr

00022582 <att_req_destroy>:
{
   22582:	b510      	push	{r4, lr}
   22584:	4604      	mov	r4, r0
	if (req->buf) {
   22586:	6900      	ldr	r0, [r0, #16]
   22588:	b108      	cbz	r0, 2258e <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   2258a:	f7fb f8ed 	bl	1d768 <net_buf_unref>
	if (req->destroy) {
   2258e:	68a3      	ldr	r3, [r4, #8]
   22590:	b10b      	cbz	r3, 22596 <att_req_destroy+0x14>
		req->destroy(req);
   22592:	4620      	mov	r0, r4
   22594:	4798      	blx	r3
	(void)memset(req, 0, sizeof(*req));
   22596:	4620      	mov	r0, r4
   22598:	2214      	movs	r2, #20
   2259a:	2100      	movs	r1, #0
}
   2259c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(req, 0, sizeof(*req));
   225a0:	f7ff bc9b 	b.w	21eda <memset>

000225a4 <read_group_cb>:
{
   225a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   225a8:	680c      	ldr	r4, [r1, #0]
{
   225aa:	4606      	mov	r6, r0
   225ac:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   225ae:	f04f 0800 	mov.w	r8, #0
   225b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   225b6:	a902      	add	r1, sp, #8
   225b8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   225ba:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   225bc:	f88d 8008 	strb.w	r8, [sp, #8]
   225c0:	f8ad 300a 	strh.w	r3, [sp, #10]
   225c4:	f7ff fdab 	bl	2211e <bt_uuid_cmp>
   225c8:	b198      	cbz	r0, 225f2 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   225ca:	f642 0301 	movw	r3, #10241	; 0x2801
   225ce:	a903      	add	r1, sp, #12
   225d0:	6830      	ldr	r0, [r6, #0]
   225d2:	f88d 800c 	strb.w	r8, [sp, #12]
   225d6:	f8ad 300e 	strh.w	r3, [sp, #14]
   225da:	f7ff fda0 	bl	2211e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   225de:	b140      	cbz	r0, 225f2 <read_group_cb+0x4e>
		if (data->group &&
   225e0:	692b      	ldr	r3, [r5, #16]
   225e2:	b123      	cbz	r3, 225ee <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   225e4:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
   225e6:	8859      	ldrh	r1, [r3, #2]
   225e8:	4291      	cmp	r1, r2
   225ea:	d200      	bcs.n	225ee <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   225ec:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   225ee:	2001      	movs	r0, #1
   225f0:	e012      	b.n	22618 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   225f2:	6869      	ldr	r1, [r5, #4]
   225f4:	6830      	ldr	r0, [r6, #0]
   225f6:	f7ff fd92 	bl	2211e <bt_uuid_cmp>
   225fa:	b110      	cbz	r0, 22602 <read_group_cb+0x5e>
		data->group = NULL;
   225fc:	2300      	movs	r3, #0
   225fe:	612b      	str	r3, [r5, #16]
		return BT_GATT_ITER_CONTINUE;
   22600:	e7f5      	b.n	225ee <read_group_cb+0x4a>
	if (data->rsp->len &&
   22602:	68eb      	ldr	r3, [r5, #12]
   22604:	68a8      	ldr	r0, [r5, #8]
   22606:	781a      	ldrb	r2, [r3, #0]
   22608:	b14a      	cbz	r2, 2261e <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2260a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   2260e:	8981      	ldrh	r1, [r0, #12]
   22610:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   22612:	4293      	cmp	r3, r2
   22614:	da03      	bge.n	2261e <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   22616:	2000      	movs	r0, #0
}
   22618:	b004      	add	sp, #16
   2261a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2261e:	2104      	movs	r1, #4
   22620:	3008      	adds	r0, #8
   22622:	f002 fb53 	bl	24ccc <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   22626:	68a9      	ldr	r1, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   22628:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   2262a:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2262c:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   2262e:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   22630:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   22632:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   22636:	6889      	ldr	r1, [r1, #8]
   22638:	2400      	movs	r4, #0
   2263a:	1a9b      	subs	r3, r3, r2
   2263c:	9400      	str	r4, [sp, #0]
   2263e:	440a      	add	r2, r1
   22640:	f8d6 8004 	ldr.w	r8, [r6, #4]
   22644:	4631      	mov	r1, r6
   22646:	b29b      	uxth	r3, r3
   22648:	4638      	mov	r0, r7
   2264a:	47c0      	blx	r8
	if (read < 0) {
   2264c:	1e01      	subs	r1, r0, #0
   2264e:	dbe2      	blt.n	22616 <read_group_cb+0x72>
	if (!data->rsp->len) {
   22650:	68ee      	ldr	r6, [r5, #12]
   22652:	68ab      	ldr	r3, [r5, #8]
   22654:	7830      	ldrb	r0, [r6, #0]
   22656:	1d0a      	adds	r2, r1, #4
   22658:	b928      	cbnz	r0, 22666 <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
   2265a:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
   2265c:	f103 0008 	add.w	r0, r3, #8
   22660:	f002 fb34 	bl	24ccc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   22664:	e7c3      	b.n	225ee <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   22666:	4290      	cmp	r0, r2
   22668:	d0f8      	beq.n	2265c <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   2266a:	899a      	ldrh	r2, [r3, #12]
   2266c:	3a04      	subs	r2, #4
   2266e:	819a      	strh	r2, [r3, #12]
		return false;
   22670:	e7d1      	b.n	22616 <read_group_cb+0x72>

00022672 <find_info_cb>:
	if (!data->rsp) {
   22672:	688b      	ldr	r3, [r1, #8]
{
   22674:	b570      	push	{r4, r5, r6, lr}
   22676:	4605      	mov	r5, r0
   22678:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   2267a:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   2267c:	b963      	cbnz	r3, 22698 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2267e:	6848      	ldr	r0, [r1, #4]
   22680:	2101      	movs	r1, #1
   22682:	3008      	adds	r0, #8
   22684:	f002 fb22 	bl	24ccc <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   22688:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2268a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2268c:	781b      	ldrb	r3, [r3, #0]
   2268e:	2b00      	cmp	r3, #0
   22690:	bf0c      	ite	eq
   22692:	2301      	moveq	r3, #1
   22694:	2302      	movne	r3, #2
   22696:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   22698:	68a3      	ldr	r3, [r4, #8]
   2269a:	781b      	ldrb	r3, [r3, #0]
   2269c:	2b01      	cmp	r3, #1
   2269e:	d003      	beq.n	226a8 <find_info_cb+0x36>
   226a0:	2b02      	cmp	r3, #2
   226a2:	d01a      	beq.n	226da <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   226a4:	2000      	movs	r0, #0
   226a6:	e017      	b.n	226d8 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   226a8:	682b      	ldr	r3, [r5, #0]
   226aa:	781b      	ldrb	r3, [r3, #0]
   226ac:	2b00      	cmp	r3, #0
   226ae:	d1f9      	bne.n	226a4 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   226b0:	6860      	ldr	r0, [r4, #4]
   226b2:	2104      	movs	r1, #4
   226b4:	3008      	adds	r0, #8
   226b6:	f002 fb09 	bl	24ccc <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   226ba:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   226bc:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   226be:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   226c0:	682b      	ldr	r3, [r5, #0]
   226c2:	885b      	ldrh	r3, [r3, #2]
   226c4:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   226c6:	6863      	ldr	r3, [r4, #4]
   226c8:	f8b6 0052 	ldrh.w	r0, [r6, #82]	; 0x52
   226cc:	899b      	ldrh	r3, [r3, #12]
   226ce:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   226d0:	2804      	cmp	r0, #4
   226d2:	bf94      	ite	ls
   226d4:	2000      	movls	r0, #0
   226d6:	2001      	movhi	r0, #1
}
   226d8:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   226da:	682b      	ldr	r3, [r5, #0]
   226dc:	781b      	ldrb	r3, [r3, #0]
   226de:	2b02      	cmp	r3, #2
   226e0:	d1e0      	bne.n	226a4 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   226e2:	6860      	ldr	r0, [r4, #4]
   226e4:	2112      	movs	r1, #18
   226e6:	3008      	adds	r0, #8
   226e8:	f002 faf0 	bl	24ccc <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   226ec:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   226ee:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   226f0:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   226f2:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   226f4:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   226f8:	3101      	adds	r1, #1
   226fa:	f7ff fbc4 	bl	21e86 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   226fe:	6863      	ldr	r3, [r4, #4]
   22700:	f8b6 0052 	ldrh.w	r0, [r6, #82]	; 0x52
   22704:	899b      	ldrh	r3, [r3, #12]
   22706:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   22708:	2812      	cmp	r0, #18
   2270a:	e7e2      	b.n	226d2 <find_info_cb+0x60>

0002270c <find_type_cb>:
{
   2270c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   22710:	680e      	ldr	r6, [r1, #0]
{
   22712:	b088      	sub	sp, #32
   22714:	4605      	mov	r5, r0
   22716:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   22718:	2700      	movs	r7, #0
   2271a:	f642 0301 	movw	r3, #10241	; 0x2801
   2271e:	a902      	add	r1, sp, #8
   22720:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   22722:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   22726:	f88d 7008 	strb.w	r7, [sp, #8]
   2272a:	f8ad 300a 	strh.w	r3, [sp, #10]
   2272e:	f7ff fcf6 	bl	2211e <bt_uuid_cmp>
   22732:	b928      	cbnz	r0, 22740 <find_type_cb+0x34>
		data->group = NULL;
   22734:	2300      	movs	r3, #0
   22736:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   22738:	2001      	movs	r0, #1
}
   2273a:	b008      	add	sp, #32
   2273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   22740:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   22744:	a903      	add	r1, sp, #12
   22746:	6828      	ldr	r0, [r5, #0]
   22748:	f88d 700c 	strb.w	r7, [sp, #12]
   2274c:	f8ad 300e 	strh.w	r3, [sp, #14]
   22750:	f7ff fce5 	bl	2211e <bt_uuid_cmp>
   22754:	b140      	cbz	r0, 22768 <find_type_cb+0x5c>
		if (data->group &&
   22756:	68a3      	ldr	r3, [r4, #8]
   22758:	2b00      	cmp	r3, #0
   2275a:	d0ed      	beq.n	22738 <find_type_cb+0x2c>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   2275c:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
   2275e:	8859      	ldrh	r1, [r3, #2]
   22760:	4291      	cmp	r1, r2
   22762:	d2e9      	bcs.n	22738 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   22764:	805a      	strh	r2, [r3, #2]
   22766:	e7e7      	b.n	22738 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
   22768:	6862      	ldr	r2, [r4, #4]
   2276a:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
   2276e:	8992      	ldrh	r2, [r2, #12]
   22770:	1a9b      	subs	r3, r3, r2
   22772:	2b03      	cmp	r3, #3
   22774:	d9e1      	bls.n	2273a <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   22776:	2310      	movs	r3, #16
   22778:	9000      	str	r0, [sp, #0]
   2277a:	686e      	ldr	r6, [r5, #4]
   2277c:	eb0d 0203 	add.w	r2, sp, r3
   22780:	4629      	mov	r1, r5
   22782:	4640      	mov	r0, r8
   22784:	47b0      	blx	r6
	if (read < 0) {
   22786:	2800      	cmp	r0, #0
   22788:	dbd4      	blt.n	22734 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
   2278a:	7c22      	ldrb	r2, [r4, #16]
   2278c:	4282      	cmp	r2, r0
   2278e:	d1d1      	bne.n	22734 <find_type_cb+0x28>
   22790:	a904      	add	r1, sp, #16
   22792:	68e0      	ldr	r0, [r4, #12]
   22794:	f7ff fb50 	bl	21e38 <memcmp>
   22798:	2800      	cmp	r0, #0
   2279a:	d1cb      	bne.n	22734 <find_type_cb+0x28>
	data->err = 0x00;
   2279c:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2279e:	6860      	ldr	r0, [r4, #4]
   227a0:	2104      	movs	r1, #4
   227a2:	3008      	adds	r0, #8
   227a4:	f002 fa92 	bl	24ccc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   227a8:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   227aa:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   227ac:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   227ae:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   227b0:	e7c2      	b.n	22738 <find_type_cb+0x2c>

000227b2 <check_perm.isra.6>:
	if ((mask & BT_GATT_PERM_READ) &&
   227b2:	07ca      	lsls	r2, r1, #31
   227b4:	7c83      	ldrb	r3, [r0, #18]
   227b6:	d504      	bpl.n	227c2 <check_perm.isra.6+0x10>
   227b8:	f013 0f15 	tst.w	r3, #21
   227bc:	d012      	beq.n	227e4 <check_perm.isra.6+0x32>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   227be:	6842      	ldr	r2, [r0, #4]
   227c0:	b182      	cbz	r2, 227e4 <check_perm.isra.6+0x32>
	if ((mask & BT_GATT_PERM_WRITE) &&
   227c2:	078a      	lsls	r2, r1, #30
   227c4:	d504      	bpl.n	227d0 <check_perm.isra.6+0x1e>
   227c6:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   227ca:	d00d      	beq.n	227e8 <check_perm.isra.6+0x36>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   227cc:	6882      	ldr	r2, [r0, #8]
   227ce:	b15a      	cbz	r2, 227e8 <check_perm.isra.6+0x36>
	mask &= attr->perm;
   227d0:	ea01 0003 	and.w	r0, r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   227d4:	f010 0f30 	tst.w	r0, #48	; 0x30
   227d8:	d108      	bne.n	227ec <check_perm.isra.6+0x3a>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   227da:	f010 000c 	ands.w	r0, r0, #12
   227de:	bf18      	it	ne
   227e0:	200f      	movne	r0, #15
   227e2:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   227e4:	2002      	movs	r0, #2
   227e6:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   227e8:	2003      	movs	r0, #3
   227ea:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
   227ec:	2005      	movs	r0, #5
}
   227ee:	4770      	bx	lr

000227f0 <read_type_cb>:
{
   227f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   227f4:	680f      	ldr	r7, [r1, #0]
{
   227f6:	4605      	mov	r5, r0
   227f8:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   227fa:	6800      	ldr	r0, [r0, #0]
   227fc:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   227fe:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   22802:	f7ff fc8c 	bl	2211e <bt_uuid_cmp>
   22806:	4680      	mov	r8, r0
   22808:	2800      	cmp	r0, #0
   2280a:	d14b      	bne.n	228a4 <read_type_cb+0xb4>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2280c:	2115      	movs	r1, #21
   2280e:	4628      	mov	r0, r5
   22810:	f7ff ffcf 	bl	227b2 <check_perm.isra.6>
   22814:	4604      	mov	r4, r0
   22816:	7530      	strb	r0, [r6, #20]
	if (data->err) {
   22818:	b148      	cbz	r0, 2282e <read_type_cb+0x3e>
		if (data->rsp->len) {
   2281a:	68f3      	ldr	r3, [r6, #12]
   2281c:	781c      	ldrb	r4, [r3, #0]
   2281e:	b114      	cbz	r4, 22826 <read_type_cb+0x36>
			data->err = 0x00;
   22820:	f886 8014 	strb.w	r8, [r6, #20]
		return BT_GATT_ITER_STOP;
   22824:	4644      	mov	r4, r8
}
   22826:	4620      	mov	r0, r4
   22828:	b003      	add	sp, #12
   2282a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   2282e:	68b0      	ldr	r0, [r6, #8]
   22830:	2102      	movs	r1, #2
   22832:	3008      	adds	r0, #8
   22834:	f002 fa4a 	bl	24ccc <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   22838:	68b1      	ldr	r1, [r6, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   2283a:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   2283c:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   2283e:	6130      	str	r0, [r6, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   22840:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   22842:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
   22846:	6889      	ldr	r1, [r1, #8]
   22848:	9400      	str	r4, [sp, #0]
   2284a:	1a9b      	subs	r3, r3, r2
   2284c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   22850:	440a      	add	r2, r1
   22852:	b29b      	uxth	r3, r3
   22854:	4629      	mov	r1, r5
   22856:	4648      	mov	r0, r9
   22858:	47c0      	blx	r8
	if (read < 0) {
   2285a:	1e01      	subs	r1, r0, #0
   2285c:	da07      	bge.n	2286e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   2285e:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   22862:	bf26      	itte	cs
   22864:	4249      	negcs	r1, r1
   22866:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   22868:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   2286a:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
   2286c:	e7db      	b.n	22826 <read_type_cb+0x36>
	if (!data->rsp->len) {
   2286e:	68f5      	ldr	r5, [r6, #12]
   22870:	68b0      	ldr	r0, [r6, #8]
   22872:	782a      	ldrb	r2, [r5, #0]
   22874:	1c8b      	adds	r3, r1, #2
   22876:	b97a      	cbnz	r2, 22898 <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
   22878:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   2287a:	3008      	adds	r0, #8
   2287c:	f002 fa26 	bl	24ccc <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   22880:	68b3      	ldr	r3, [r6, #8]
   22882:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
   22886:	899b      	ldrh	r3, [r3, #12]
   22888:	1ae4      	subs	r4, r4, r3
   2288a:	68f3      	ldr	r3, [r6, #12]
   2288c:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2288e:	429c      	cmp	r4, r3
   22890:	bfd4      	ite	le
   22892:	2400      	movle	r4, #0
   22894:	2401      	movgt	r4, #1
   22896:	e7c6      	b.n	22826 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   22898:	429a      	cmp	r2, r3
   2289a:	d0ee      	beq.n	2287a <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
   2289c:	8983      	ldrh	r3, [r0, #12]
   2289e:	3b02      	subs	r3, #2
   228a0:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   228a2:	e7c0      	b.n	22826 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
   228a4:	2401      	movs	r4, #1
   228a6:	e7be      	b.n	22826 <read_type_cb+0x36>

000228a8 <uuid_create>:
	switch (buf->len) {
   228a8:	898a      	ldrh	r2, [r1, #12]
   228aa:	2a02      	cmp	r2, #2
{
   228ac:	b510      	push	{r4, lr}
   228ae:	4604      	mov	r4, r0
	switch (buf->len) {
   228b0:	d003      	beq.n	228ba <uuid_create+0x12>
   228b2:	2a10      	cmp	r2, #16
   228b4:	d00a      	beq.n	228cc <uuid_create+0x24>
	return false;
   228b6:	2000      	movs	r0, #0
}
   228b8:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
   228ba:	2300      	movs	r3, #0
   228bc:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
   228be:	f101 0008 	add.w	r0, r1, #8
   228c2:	f002 fa88 	bl	24dd6 <net_buf_simple_pull_le16>
   228c6:	8060      	strh	r0, [r4, #2]
		return true;
   228c8:	2001      	movs	r0, #1
   228ca:	e7f5      	b.n	228b8 <uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   228cc:	2302      	movs	r3, #2
   228ce:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
   228d2:	6889      	ldr	r1, [r1, #8]
   228d4:	f7ff fad7 	bl	21e86 <memcpy>
   228d8:	e7f6      	b.n	228c8 <uuid_create+0x20>

000228da <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
   228da:	6803      	ldr	r3, [r0, #0]
   228dc:	7a9b      	ldrb	r3, [r3, #10]
   228de:	2b04      	cmp	r3, #4
   228e0:	d10a      	bne.n	228f8 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   228e2:	f3bf 8f5b 	dmb	ish
   228e6:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   228ea:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   228ee:	ea6f 00a0 	mvn.w	r0, r0, asr #2
   228f2:	f000 0001 	and.w	r0, r0, #1
   228f6:	4770      	bx	lr
   228f8:	2001      	movs	r0, #1
}
   228fa:	4770      	bx	lr

000228fc <att_exec_write_req>:
   228fc:	2006      	movs	r0, #6
   228fe:	4770      	bx	lr

00022900 <att_pdu_sent>:
{
   22900:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   22902:	2104      	movs	r1, #4
   22904:	f7ff fe26 	bl	22554 <bt_l2cap_le_lookup_tx_cid>
}
   22908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   2290c:	30bc      	adds	r0, #188	; 0xbc
   2290e:	f7fc b8e7 	b.w	1eae0 <z_impl_k_sem_give>

00022912 <att_cfm_sent>:
{
   22912:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   22914:	2104      	movs	r1, #4
   22916:	f7ff fe1d 	bl	22554 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2291a:	f3bf 8f5b 	dmb	ish
   2291e:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   22922:	e853 2f00 	ldrex	r2, [r3]
   22926:	f022 0202 	bic.w	r2, r2, #2
   2292a:	e843 2100 	strex	r1, r2, [r3]
   2292e:	2900      	cmp	r1, #0
   22930:	d1f7      	bne.n	22922 <att_cfm_sent+0x10>
   22932:	f3bf 8f5b 	dmb	ish
   22936:	30bc      	adds	r0, #188	; 0xbc
}
   22938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2293c:	f7fc b8d0 	b.w	1eae0 <z_impl_k_sem_give>

00022940 <att_rsp_sent>:
{
   22940:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   22942:	2104      	movs	r1, #4
   22944:	f7ff fe06 	bl	22554 <bt_l2cap_le_lookup_tx_cid>
   22948:	f3bf 8f5b 	dmb	ish
   2294c:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   22950:	e853 2f00 	ldrex	r2, [r3]
   22954:	f022 0201 	bic.w	r2, r2, #1
   22958:	e843 2100 	strex	r1, r2, [r3]
   2295c:	2900      	cmp	r1, #0
   2295e:	d1f7      	bne.n	22950 <att_rsp_sent+0x10>
   22960:	f3bf 8f5b 	dmb	ish
   22964:	30bc      	adds	r0, #188	; 0xbc
}
   22966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2296a:	f7fc b8b9 	b.w	1eae0 <z_impl_k_sem_give>

0002296e <write_cb>:
{
   2296e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22972:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   22974:	f8d1 8000 	ldr.w	r8, [r1]
   22978:	212a      	movs	r1, #42	; 0x2a
{
   2297a:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   2297c:	f7ff ff19 	bl	227b2 <check_perm.isra.6>
   22980:	4605      	mov	r5, r0
   22982:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   22984:	bb08      	cbnz	r0, 229ca <write_cb+0x5c>
	if (!data->req) {
   22986:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   22988:	68b7      	ldr	r7, [r6, #8]
   2298a:	68e2      	ldr	r2, [r4, #12]
	if (!data->req) {
   2298c:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2298e:	bf14      	ite	ne
   22990:	2300      	movne	r3, #0
   22992:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   22994:	9301      	str	r3, [sp, #4]
   22996:	8a63      	ldrh	r3, [r4, #18]
   22998:	9300      	str	r3, [sp, #0]
   2299a:	4631      	mov	r1, r6
   2299c:	7c23      	ldrb	r3, [r4, #16]
   2299e:	4640      	mov	r0, r8
   229a0:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   229a2:	2800      	cmp	r0, #0
   229a4:	db05      	blt.n	229b2 <write_cb+0x44>
   229a6:	7c23      	ldrb	r3, [r4, #16]
   229a8:	4298      	cmp	r0, r3
   229aa:	d10c      	bne.n	229c6 <write_cb+0x58>
	data->err = 0U;
   229ac:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   229ae:	2501      	movs	r5, #1
   229b0:	e005      	b.n	229be <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
   229b2:	f110 0fff 	cmn.w	r0, #255	; 0xff
   229b6:	d306      	bcc.n	229c6 <write_cb+0x58>
		return -err;
   229b8:	4240      	negs	r0, r0
   229ba:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   229bc:	7520      	strb	r0, [r4, #20]
}
   229be:	4628      	mov	r0, r5
   229c0:	b002      	add	sp, #8
   229c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_ATT_ERR_UNLIKELY;
   229c6:	200e      	movs	r0, #14
   229c8:	e7f8      	b.n	229bc <write_cb+0x4e>
		return BT_GATT_ITER_STOP;
   229ca:	2500      	movs	r5, #0
   229cc:	e7f7      	b.n	229be <write_cb+0x50>

000229ce <read_cb>:
{
   229ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   229d2:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   229d4:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   229d6:	f8d1 9000 	ldr.w	r9, [r1]
{
   229da:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   229dc:	3008      	adds	r0, #8
   229de:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   229e0:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   229e4:	f002 f972 	bl	24ccc <net_buf_simple_add>
	data->err = 0x00;
   229e8:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   229ea:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   229ec:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   229ee:	2115      	movs	r1, #21
   229f0:	4630      	mov	r0, r6
   229f2:	f7ff fede 	bl	227b2 <check_perm.isra.6>
   229f6:	4605      	mov	r5, r0
   229f8:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   229fa:	bb00      	cbnz	r0, 22a3e <read_cb+0x70>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   229fc:	68a1      	ldr	r1, [r4, #8]
   229fe:	f8b9 3052 	ldrh.w	r3, [r9, #82]	; 0x52
   22a02:	898a      	ldrh	r2, [r1, #12]
   22a04:	6889      	ldr	r1, [r1, #8]
   22a06:	88a0      	ldrh	r0, [r4, #4]
   22a08:	9000      	str	r0, [sp, #0]
   22a0a:	1a9b      	subs	r3, r3, r2
   22a0c:	6877      	ldr	r7, [r6, #4]
   22a0e:	440a      	add	r2, r1
   22a10:	b29b      	uxth	r3, r3
   22a12:	4631      	mov	r1, r6
   22a14:	4640      	mov	r0, r8
   22a16:	47b8      	blx	r7
	if (read < 0) {
   22a18:	1e01      	subs	r1, r0, #0
   22a1a:	da0a      	bge.n	22a32 <read_cb+0x64>
	if (err < 0 && err >= -0xff) {
   22a1c:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   22a20:	bf26      	itte	cs
   22a22:	4249      	negcs	r1, r1
   22a24:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   22a26:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   22a28:	7421      	strb	r1, [r4, #16]
}
   22a2a:	4628      	mov	r0, r5
   22a2c:	b003      	add	sp, #12
   22a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   22a32:	68a0      	ldr	r0, [r4, #8]
   22a34:	3008      	adds	r0, #8
   22a36:	f002 f949 	bl	24ccc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   22a3a:	2501      	movs	r5, #1
   22a3c:	e7f5      	b.n	22a2a <read_cb+0x5c>
		return BT_GATT_ITER_STOP;
   22a3e:	463d      	mov	r5, r7
   22a40:	e7f3      	b.n	22a2a <read_cb+0x5c>

00022a42 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   22a42:	898a      	ldrh	r2, [r1, #12]
   22a44:	6889      	ldr	r1, [r1, #8]
   22a46:	2300      	movs	r3, #0
   22a48:	f7e6 bd18 	b.w	947c <att_handle_rsp>

00022a4c <att_reset>:
{
   22a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22a4e:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   22a52:	4604      	mov	r4, r0
   22a54:	f3bf 8f5b 	dmb	ish
   22a58:	e853 2f00 	ldrex	r2, [r3]
   22a5c:	f042 0204 	orr.w	r2, r2, #4
   22a60:	e843 2100 	strex	r1, r2, [r3]
   22a64:	2900      	cmp	r1, #0
   22a66:	d1f7      	bne.n	22a58 <att_reset+0xc>
   22a68:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
   22a6c:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
   22a70:	4628      	mov	r0, r5
   22a72:	f7fc f835 	bl	1eae0 <z_impl_k_sem_give>
   22a76:	4628      	mov	r0, r5
   22a78:	f7fc f832 	bl	1eae0 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   22a7c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   22a80:	b93d      	cbnz	r5, 22a92 <att_reset+0x46>
	if (!att->req) {
   22a82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	list->head = NULL;
   22a86:	2200      	movs	r2, #0
	list->tail = NULL;
   22a88:	e9c4 2225 	strd	r2, r2, [r4, #148]	; 0x94
   22a8c:	b993      	cbnz	r3, 22ab4 <att_reset+0x68>
}
   22a8e:	b003      	add	sp, #12
   22a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22a92:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   22a94:	686f      	ldr	r7, [r5, #4]
   22a96:	b12f      	cbz	r7, 22aa4 <att_reset+0x58>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
   22a98:	2300      	movs	r3, #0
   22a9a:	9500      	str	r5, [sp, #0]
   22a9c:	461a      	mov	r2, r3
   22a9e:	210e      	movs	r1, #14
   22aa0:	4618      	mov	r0, r3
   22aa2:	47b8      	blx	r7
		att_req_destroy(req);
   22aa4:	4628      	mov	r0, r5
   22aa6:	f7ff fd6c 	bl	22582 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   22aaa:	2e00      	cmp	r6, #0
   22aac:	d0e9      	beq.n	22a82 <att_reset+0x36>
   22aae:	4635      	mov	r5, r6
   22ab0:	6836      	ldr	r6, [r6, #0]
   22ab2:	e7ef      	b.n	22a94 <att_reset+0x48>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   22ab4:	230e      	movs	r3, #14
   22ab6:	4611      	mov	r1, r2
   22ab8:	4620      	mov	r0, r4
}
   22aba:	b003      	add	sp, #12
   22abc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   22ac0:	f7e6 bcdc 	b.w	947c <att_handle_rsp>

00022ac4 <bt_att_disconnected>:
{
   22ac4:	b510      	push	{r4, lr}
   22ac6:	4604      	mov	r4, r0
	att_reset(att);
   22ac8:	f7ff ffc0 	bl	22a4c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   22acc:	6820      	ldr	r0, [r4, #0]
}
   22ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   22ad2:	f7e8 b89d 	b.w	ac10 <bt_gatt_disconnected>

00022ad6 <att_read_blob_req>:
{
   22ad6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   22ad8:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   22ada:	8813      	ldrh	r3, [r2, #0]
   22adc:	8852      	ldrh	r2, [r2, #2]
   22ade:	9200      	str	r2, [sp, #0]
   22ae0:	210c      	movs	r1, #12
   22ae2:	220d      	movs	r2, #13
   22ae4:	f7e6 ff7e 	bl	99e4 <att_read_rsp>
}
   22ae8:	b003      	add	sp, #12
   22aea:	f85d fb04 	ldr.w	pc, [sp], #4

00022aee <att_read_req>:
{
   22aee:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   22af0:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   22af2:	2200      	movs	r2, #0
   22af4:	881b      	ldrh	r3, [r3, #0]
   22af6:	9200      	str	r2, [sp, #0]
   22af8:	210a      	movs	r1, #10
   22afa:	220b      	movs	r2, #11
   22afc:	f7e6 ff72 	bl	99e4 <att_read_rsp>
}
   22b00:	b003      	add	sp, #12
   22b02:	f85d fb04 	ldr.w	pc, [sp], #4

00022b06 <bt_att_get_mtu>:
{
   22b06:	b508      	push	{r3, lr}
	att = att_chan_get(conn);
   22b08:	f7e6 fc20 	bl	934c <att_chan_get>
	if (!att) {
   22b0c:	b108      	cbz	r0, 22b12 <bt_att_get_mtu+0xc>
	return att->chan.tx.mtu;
   22b0e:	f8b0 0052 	ldrh.w	r0, [r0, #82]	; 0x52
}
   22b12:	bd08      	pop	{r3, pc}

00022b14 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   22b14:	b510      	push	{r4, lr}
   22b16:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
   22b18:	b1c8      	cbz	r0, 22b4e <bt_att_req_send+0x3a>
   22b1a:	b1c1      	cbz	r1, 22b4e <bt_att_req_send+0x3a>
		return -EINVAL;
	}

	att = att_chan_get(conn);
   22b1c:	f7e6 fc16 	bl	934c <att_chan_get>
	if (!att) {
   22b20:	4603      	mov	r3, r0
   22b22:	b1b8      	cbz	r0, 22b54 <bt_att_req_send+0x40>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
   22b24:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   22b28:	b162      	cbz	r2, 22b44 <bt_att_req_send+0x30>
	parent->next = child;
   22b2a:	2000      	movs	r0, #0
   22b2c:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   22b2e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
   22b32:	b91a      	cbnz	r2, 22b3c <bt_att_req_send+0x28>
	list->head = node;
   22b34:	e9c3 4425 	strd	r4, r4, [r3, #148]	; 0x94
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
   22b38:	4610      	mov	r0, r2
	}

	return att_send_req(att, req);
}
   22b3a:	bd10      	pop	{r4, pc}
	parent->next = child;
   22b3c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22b3e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
   22b42:	e7fa      	b.n	22b3a <bt_att_req_send+0x26>
	return att_send_req(att, req);
   22b44:	4621      	mov	r1, r4
}
   22b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
   22b4a:	f7e6 bc47 	b.w	93dc <att_send_req>
		return -EINVAL;
   22b4e:	f06f 0015 	mvn.w	r0, #21
   22b52:	e7f2      	b.n	22b3a <bt_att_req_send+0x26>
		return -ENOTCONN;
   22b54:	f06f 0038 	mvn.w	r0, #56	; 0x38
   22b58:	e7ef      	b.n	22b3a <bt_att_req_send+0x26>

00022b5a <sc_ccc_cfg_changed>:
}
   22b5a:	4770      	bx	lr

00022b5c <gatt_ccc_changed>:
{
   22b5c:	b430      	push	{r4, r5}
	u16_t value = 0x0000;
   22b5e:	2300      	movs	r3, #0
   22b60:	684d      	ldr	r5, [r1, #4]
	for (i = 0; i < ccc->cfg_len; i++) {
   22b62:	461a      	mov	r2, r3
   22b64:	42aa      	cmp	r2, r5
   22b66:	d108      	bne.n	22b7a <gatt_ccc_changed+0x1e>
	if (value != ccc->value) {
   22b68:	890a      	ldrh	r2, [r1, #8]
   22b6a:	429a      	cmp	r2, r3
   22b6c:	d00e      	beq.n	22b8c <gatt_ccc_changed+0x30>
		if (ccc->cfg_changed) {
   22b6e:	68ca      	ldr	r2, [r1, #12]
		ccc->value = value;
   22b70:	810b      	strh	r3, [r1, #8]
		if (ccc->cfg_changed) {
   22b72:	b15a      	cbz	r2, 22b8c <gatt_ccc_changed+0x30>
			ccc->cfg_changed(attr, value);
   22b74:	4619      	mov	r1, r3
}
   22b76:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   22b78:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
   22b7a:	680c      	ldr	r4, [r1, #0]
   22b7c:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
   22b80:	3201      	adds	r2, #1
   22b82:	8924      	ldrh	r4, [r4, #8]
   22b84:	42a3      	cmp	r3, r4
   22b86:	bf38      	it	cc
   22b88:	4623      	movcc	r3, r4
   22b8a:	e7eb      	b.n	22b64 <gatt_ccc_changed+0x8>
}
   22b8c:	bc30      	pop	{r4, r5}
   22b8e:	4770      	bx	lr

00022b90 <gatt_indicate_rsp>:
{
   22b90:	b410      	push	{r4}
   22b92:	9b01      	ldr	r3, [sp, #4]
	params->func(conn, params->attr, err);
   22b94:	699c      	ldr	r4, [r3, #24]
   22b96:	460a      	mov	r2, r1
   22b98:	6959      	ldr	r1, [r3, #20]
   22b9a:	4623      	mov	r3, r4
}
   22b9c:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   22b9e:	4718      	bx	r3

00022ba0 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22ba0:	f3bf 8f5b 	dmb	ish
   22ba4:	6800      	ldr	r0, [r0, #0]
   22ba6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   22baa:	4108      	asrs	r0, r1
}
   22bac:	f000 0001 	and.w	r0, r0, #1
   22bb0:	4770      	bx	lr

00022bb2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   22bb2:	2207      	movs	r2, #7
   22bb4:	f7ff b967 	b.w	21e86 <memcpy>

00022bb8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22bb8:	2301      	movs	r3, #1
   22bba:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22bbe:	f3bf 8f5b 	dmb	ish
   22bc2:	e850 3f00 	ldrex	r3, [r0]
   22bc6:	430b      	orrs	r3, r1
   22bc8:	e840 3200 	strex	r2, r3, [r0]
   22bcc:	2a00      	cmp	r2, #0
   22bce:	d1f8      	bne.n	22bc2 <atomic_set_bit+0xa>
   22bd0:	f3bf 8f5b 	dmb	ish
}
   22bd4:	4770      	bx	lr

00022bd6 <gen_hash_m>:
{
   22bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22bd8:	6807      	ldr	r7, [r0, #0]
   22bda:	783d      	ldrb	r5, [r7, #0]
{
   22bdc:	b089      	sub	sp, #36	; 0x24
   22bde:	4606      	mov	r6, r0
   22be0:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22be2:	b10d      	cbz	r5, 22be8 <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   22be4:	2501      	movs	r5, #1
   22be6:	e015      	b.n	22c14 <gen_hash_m+0x3e>
	switch (u16->val) {
   22be8:	887b      	ldrh	r3, [r7, #2]
   22bea:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   22bee:	d004      	beq.n	22bfa <gen_hash_m+0x24>
   22bf0:	d813      	bhi.n	22c1a <gen_hash_m+0x44>
   22bf2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   22bf6:	2b03      	cmp	r3, #3
   22bf8:	d8f4      	bhi.n	22be4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   22bfa:	8a33      	ldrh	r3, [r6, #16]
   22bfc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22c00:	2202      	movs	r2, #2
   22c02:	f10d 010e 	add.w	r1, sp, #14
   22c06:	4620      	mov	r0, r4
   22c08:	f7fd feea 	bl	209e0 <tc_cmac_update>
   22c0c:	b9d8      	cbnz	r0, 22c46 <gen_hash_m+0x70>
			state->err = -EINVAL;
   22c0e:	f06f 0315 	mvn.w	r3, #21
   22c12:	65a3      	str	r3, [r4, #88]	; 0x58
}
   22c14:	4628      	mov	r0, r5
   22c16:	b009      	add	sp, #36	; 0x24
   22c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   22c1a:	f642 1205 	movw	r2, #10501	; 0x2905
   22c1e:	4293      	cmp	r3, r2
   22c20:	d8e0      	bhi.n	22be4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   22c22:	8a03      	ldrh	r3, [r0, #16]
   22c24:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22c28:	2202      	movs	r2, #2
   22c2a:	f10d 010e 	add.w	r1, sp, #14
   22c2e:	4620      	mov	r0, r4
   22c30:	f7fd fed6 	bl	209e0 <tc_cmac_update>
   22c34:	2800      	cmp	r0, #0
   22c36:	d0ea      	beq.n	22c0e <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   22c38:	887b      	ldrh	r3, [r7, #2]
   22c3a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22c3e:	2202      	movs	r2, #2
   22c40:	f10d 010e 	add.w	r1, sp, #14
   22c44:	e014      	b.n	22c70 <gen_hash_m+0x9a>
		value = sys_cpu_to_le16(u16->val);
   22c46:	887b      	ldrh	r3, [r7, #2]
   22c48:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22c4c:	2202      	movs	r2, #2
   22c4e:	f10d 010e 	add.w	r1, sp, #14
   22c52:	4620      	mov	r0, r4
   22c54:	f7fd fec4 	bl	209e0 <tc_cmac_update>
   22c58:	2800      	cmp	r0, #0
   22c5a:	d0d8      	beq.n	22c0e <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   22c5c:	2000      	movs	r0, #0
   22c5e:	2310      	movs	r3, #16
   22c60:	eb0d 0203 	add.w	r2, sp, r3
   22c64:	4631      	mov	r1, r6
   22c66:	9000      	str	r0, [sp, #0]
   22c68:	6877      	ldr	r7, [r6, #4]
   22c6a:	47b8      	blx	r7
		if (tc_cmac_update(&state->state, data, len) ==
   22c6c:	a904      	add	r1, sp, #16
   22c6e:	4602      	mov	r2, r0
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22c70:	4620      	mov	r0, r4
   22c72:	f7fd feb5 	bl	209e0 <tc_cmac_update>
   22c76:	2800      	cmp	r0, #0
   22c78:	d1b4      	bne.n	22be4 <gen_hash_m+0xe>
   22c7a:	e7c8      	b.n	22c0e <gen_hash_m+0x38>

00022c7c <ccc_find_cfg>:
{
   22c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c7e:	4605      	mov	r5, r0
   22c80:	460f      	mov	r7, r1
	for (i = 0; i < ccc->cfg_len; i++) {
   22c82:	2400      	movs	r4, #0
   22c84:	686b      	ldr	r3, [r5, #4]
   22c86:	429c      	cmp	r4, r3
   22c88:	d301      	bcc.n	22c8e <ccc_find_cfg+0x12>
	return NULL;
   22c8a:	2000      	movs	r0, #0
   22c8c:	e00a      	b.n	22ca4 <ccc_find_cfg+0x28>
		if (!bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   22c8e:	6828      	ldr	r0, [r5, #0]
   22c90:	0126      	lsls	r6, r4, #4
   22c92:	4430      	add	r0, r6
	return memcmp(a, b, sizeof(*a));
   22c94:	2207      	movs	r2, #7
   22c96:	4639      	mov	r1, r7
   22c98:	3001      	adds	r0, #1
   22c9a:	f7ff f8cd 	bl	21e38 <memcmp>
   22c9e:	b910      	cbnz	r0, 22ca6 <ccc_find_cfg+0x2a>
			return &ccc->cfg[i];
   22ca0:	6828      	ldr	r0, [r5, #0]
   22ca2:	4430      	add	r0, r6
}
   22ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
   22ca6:	3401      	adds	r4, #1
   22ca8:	e7ec      	b.n	22c84 <ccc_find_cfg+0x8>

00022caa <find_ccc_cfg>:
{
   22caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22cac:	4605      	mov	r5, r0
   22cae:	460f      	mov	r7, r1
	for (i = 0; i < ccc->cfg_len; i++) {
   22cb0:	2600      	movs	r6, #0
   22cb2:	687b      	ldr	r3, [r7, #4]
   22cb4:	42b3      	cmp	r3, r6
   22cb6:	d801      	bhi.n	22cbc <find_ccc_cfg+0x12>
	return NULL;
   22cb8:	2000      	movs	r0, #0
   22cba:	e00e      	b.n	22cda <find_ccc_cfg+0x30>
		if (conn) {
   22cbc:	683b      	ldr	r3, [r7, #0]
   22cbe:	0134      	lsls	r4, r6, #4
   22cc0:	1918      	adds	r0, r3, r4
   22cc2:	b165      	cbz	r5, 22cde <find_ccc_cfg+0x34>
			if (conn->id == ccc->cfg[i].id &&
   22cc4:	7a2a      	ldrb	r2, [r5, #8]
   22cc6:	5d1b      	ldrb	r3, [r3, r4]
   22cc8:	429a      	cmp	r2, r3
   22cca:	d111      	bne.n	22cf0 <find_ccc_cfg+0x46>
			    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
   22ccc:	1c41      	adds	r1, r0, #1
   22cce:	4628      	mov	r0, r5
   22cd0:	f7ff fb5d 	bl	2238e <bt_conn_addr_le_cmp>
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   22cd4:	b960      	cbnz	r0, 22cf0 <find_ccc_cfg+0x46>
			return &ccc->cfg[i];
   22cd6:	6838      	ldr	r0, [r7, #0]
   22cd8:	4420      	add	r0, r4
}
   22cda:	b003      	add	sp, #12
   22cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22cde:	2207      	movs	r2, #7
   22ce0:	4669      	mov	r1, sp
   22ce2:	3001      	adds	r0, #1
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   22ce4:	9500      	str	r5, [sp, #0]
   22ce6:	f8cd 5003 	str.w	r5, [sp, #3]
   22cea:	f7ff f8a5 	bl	21e38 <memcmp>
   22cee:	e7f1      	b.n	22cd4 <find_ccc_cfg+0x2a>
	for (i = 0; i < ccc->cfg_len; i++) {
   22cf0:	3601      	adds	r6, #1
   22cf2:	e7de      	b.n	22cb2 <find_ccc_cfg+0x8>

00022cf4 <read_appearance>:
{
   22cf4:	b513      	push	{r0, r1, r4, lr}
   22cf6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   22cfa:	4610      	mov	r0, r2
	if (offset > value_len) {
   22cfc:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   22cfe:	f04f 0200 	mov.w	r2, #0
   22d02:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   22d06:	d80d      	bhi.n	22d24 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   22d08:	f1c1 0402 	rsb	r4, r1, #2
   22d0c:	429c      	cmp	r4, r3
   22d0e:	bfa8      	it	ge
   22d10:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   22d12:	f10d 0306 	add.w	r3, sp, #6
   22d16:	4622      	mov	r2, r4
   22d18:	4419      	add	r1, r3
   22d1a:	f7ff f8b4 	bl	21e86 <memcpy>
}
   22d1e:	4620      	mov	r0, r4
   22d20:	b002      	add	sp, #8
   22d22:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22d24:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   22d28:	e7f9      	b.n	22d1e <read_appearance+0x2a>

00022d2a <read_name>:
{
   22d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d2e:	4698      	mov	r8, r3
   22d30:	4616      	mov	r6, r2
   22d32:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   22d36:	f7e5 f879 	bl	7e2c <bt_get_name>
   22d3a:	4607      	mov	r7, r0
				 strlen(name));
   22d3c:	f7ff f869 	bl	21e12 <strlen>
	if (offset > value_len) {
   22d40:	b283      	uxth	r3, r0
   22d42:	42ab      	cmp	r3, r5
   22d44:	d30c      	bcc.n	22d60 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   22d46:	1b5c      	subs	r4, r3, r5
   22d48:	4544      	cmp	r4, r8
   22d4a:	bfa8      	it	ge
   22d4c:	4644      	movge	r4, r8
   22d4e:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   22d50:	4622      	mov	r2, r4
   22d52:	1979      	adds	r1, r7, r5
   22d54:	4630      	mov	r0, r6
   22d56:	f7ff f896 	bl	21e86 <memcpy>
}
   22d5a:	4620      	mov	r0, r4
   22d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22d60:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   22d64:	e7f9      	b.n	22d5a <read_name+0x30>

00022d66 <cf_read>:
{
   22d66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22d68:	461f      	mov	r7, r3
	u8_t data[1] = {};
   22d6a:	2300      	movs	r3, #0
{
   22d6c:	4616      	mov	r6, r2
   22d6e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	u8_t data[1] = {};
   22d72:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   22d76:	f7e7 fa29 	bl	a1cc <find_cf_cfg>
	if (cfg) {
   22d7a:	b128      	cbz	r0, 22d88 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   22d7c:	f100 0108 	add.w	r1, r0, #8
   22d80:	2201      	movs	r2, #1
   22d82:	a801      	add	r0, sp, #4
   22d84:	f7ff f87f 	bl	21e86 <memcpy>
	if (offset > value_len) {
   22d88:	2d01      	cmp	r5, #1
   22d8a:	d80d      	bhi.n	22da8 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   22d8c:	f1c5 0401 	rsb	r4, r5, #1
   22d90:	42bc      	cmp	r4, r7
   22d92:	bfa8      	it	ge
   22d94:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   22d96:	ab01      	add	r3, sp, #4
   22d98:	4622      	mov	r2, r4
   22d9a:	1959      	adds	r1, r3, r5
   22d9c:	4630      	mov	r0, r6
   22d9e:	f7ff f872 	bl	21e86 <memcpy>
}
   22da2:	4620      	mov	r0, r4
   22da4:	b003      	add	sp, #12
   22da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22da8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   22dac:	e7f9      	b.n	22da2 <cf_read+0x3c>

00022dae <bt_gatt_attr_read_ccc>:
{
   22dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   22db0:	68c9      	ldr	r1, [r1, #12]
{
   22db2:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   22db6:	4616      	mov	r6, r2
   22db8:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   22dba:	f7ff ff76 	bl	22caa <find_ccc_cfg>
	if (cfg) {
   22dbe:	b100      	cbz	r0, 22dc2 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   22dc0:	8900      	ldrh	r0, [r0, #8]
   22dc2:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   22dc6:	2d02      	cmp	r5, #2
   22dc8:	d80e      	bhi.n	22de8 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   22dca:	f1c5 0402 	rsb	r4, r5, #2
   22dce:	42bc      	cmp	r4, r7
   22dd0:	bfa8      	it	ge
   22dd2:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   22dd4:	f10d 0306 	add.w	r3, sp, #6
   22dd8:	4622      	mov	r2, r4
   22dda:	1959      	adds	r1, r3, r5
   22ddc:	4630      	mov	r0, r6
   22dde:	f7ff f852 	bl	21e86 <memcpy>
}
   22de2:	4620      	mov	r0, r4
   22de4:	b003      	add	sp, #12
   22de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22de8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   22dec:	e7f9      	b.n	22de2 <bt_gatt_attr_read_ccc+0x34>

00022dee <bt_gatt_attr_read_chrc>:
{
   22dee:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   22df0:	68c8      	ldr	r0, [r1, #12]
{
   22df2:	b087      	sub	sp, #28
   22df4:	4616      	mov	r6, r2
   22df6:	461f      	mov	r7, r3
	pdu.value_handle = sys_cpu_to_le16(attr->handle + 1);
   22df8:	8a0a      	ldrh	r2, [r1, #16]
	pdu.properties = chrc->properties;
   22dfa:	7903      	ldrb	r3, [r0, #4]
   22dfc:	f88d 3004 	strb.w	r3, [sp, #4]
	pdu.value_handle = sys_cpu_to_le16(attr->handle + 1);
   22e00:	3201      	adds	r2, #1
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22e02:	6801      	ldr	r1, [r0, #0]
	pdu.value_handle = sys_cpu_to_le16(attr->handle + 1);
   22e04:	f8ad 2005 	strh.w	r2, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22e08:	780b      	ldrb	r3, [r1, #0]
{
   22e0a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22e0e:	b99b      	cbnz	r3, 22e38 <bt_gatt_attr_read_chrc+0x4a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   22e10:	884b      	ldrh	r3, [r1, #2]
   22e12:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
   22e16:	2205      	movs	r2, #5
	if (offset > value_len) {
   22e18:	42aa      	cmp	r2, r5
   22e1a:	d315      	bcc.n	22e48 <bt_gatt_attr_read_chrc+0x5a>
	len = MIN(buf_len, value_len - offset);
   22e1c:	1b54      	subs	r4, r2, r5
   22e1e:	42bc      	cmp	r4, r7
   22e20:	bfa8      	it	ge
   22e22:	463c      	movge	r4, r7
   22e24:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   22e26:	ab01      	add	r3, sp, #4
   22e28:	4622      	mov	r2, r4
   22e2a:	1959      	adds	r1, r3, r5
   22e2c:	4630      	mov	r0, r6
   22e2e:	f7ff f82a 	bl	21e86 <memcpy>
}
   22e32:	4620      	mov	r0, r4
   22e34:	b007      	add	sp, #28
   22e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   22e38:	2210      	movs	r2, #16
   22e3a:	3101      	adds	r1, #1
   22e3c:	f10d 0007 	add.w	r0, sp, #7
   22e40:	f7ff f821 	bl	21e86 <memcpy>
		value_len += 16;
   22e44:	2213      	movs	r2, #19
   22e46:	e7e7      	b.n	22e18 <bt_gatt_attr_read_chrc+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22e48:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   22e4c:	e7f1      	b.n	22e32 <bt_gatt_attr_read_chrc+0x44>

00022e4e <bt_gatt_attr_read_service>:
{
   22e4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   22e50:	68c9      	ldr	r1, [r1, #12]
{
   22e52:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   22e56:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   22e58:	780a      	ldrb	r2, [r1, #0]
   22e5a:	b992      	cbnz	r2, 22e82 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   22e5c:	884a      	ldrh	r2, [r1, #2]
   22e5e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   22e62:	2d02      	cmp	r5, #2
   22e64:	d819      	bhi.n	22e9a <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   22e66:	f1c5 0402 	rsb	r4, r5, #2
   22e6a:	429c      	cmp	r4, r3
   22e6c:	bfa8      	it	ge
   22e6e:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   22e70:	f10d 0306 	add.w	r3, sp, #6
   22e74:	4622      	mov	r2, r4
   22e76:	1959      	adds	r1, r3, r5
   22e78:	f7ff f805 	bl	21e86 <memcpy>
}
   22e7c:	4620      	mov	r0, r4
   22e7e:	b003      	add	sp, #12
   22e80:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   22e82:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   22e84:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   22e88:	d807      	bhi.n	22e9a <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   22e8a:	f1c5 0410 	rsb	r4, r5, #16
   22e8e:	429c      	cmp	r4, r3
   22e90:	bfa8      	it	ge
   22e92:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   22e94:	4622      	mov	r2, r4
   22e96:	4429      	add	r1, r5
   22e98:	e7ee      	b.n	22e78 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22e9a:	f06f 0406 	mvn.w	r4, #6
   22e9e:	e7ed      	b.n	22e7c <bt_gatt_attr_read_service+0x2e>

00022ea0 <bt_gatt_service_register>:
{
   22ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22ea2:	4604      	mov	r4, r0
	bt_gatt_init();
   22ea4:	f7e7 fcfe 	bl	a8a4 <bt_gatt_init>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   22ea8:	6823      	ldr	r3, [r4, #0]
   22eaa:	2500      	movs	r5, #0
   22eac:	6818      	ldr	r0, [r3, #0]
   22eae:	f88d 5000 	strb.w	r5, [sp]
   22eb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   22eb6:	4669      	mov	r1, sp
   22eb8:	f8ad 3002 	strh.w	r3, [sp, #2]
   22ebc:	f7ff f92f 	bl	2211e <bt_uuid_cmp>
   22ec0:	b918      	cbnz	r0, 22eca <bt_gatt_service_register+0x2a>
		return -EALREADY;
   22ec2:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   22ec6:	b003      	add	sp, #12
   22ec8:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
   22eca:	6823      	ldr	r3, [r4, #0]
   22ecc:	a901      	add	r1, sp, #4
   22ece:	6818      	ldr	r0, [r3, #0]
   22ed0:	f88d 5004 	strb.w	r5, [sp, #4]
   22ed4:	f641 0301 	movw	r3, #6145	; 0x1801
   22ed8:	f8ad 3006 	strh.w	r3, [sp, #6]
   22edc:	f7ff f91f 	bl	2211e <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   22ee0:	2800      	cmp	r0, #0
   22ee2:	d0ee      	beq.n	22ec2 <bt_gatt_service_register+0x22>
	err = gatt_register(svc);
   22ee4:	4620      	mov	r0, r4
   22ee6:	f7e7 f84f 	bl	9f88 <gatt_register>
	if (err < 0) {
   22eea:	2800      	cmp	r0, #0
   22eec:	dbeb      	blt.n	22ec6 <bt_gatt_service_register+0x26>
		    svc->attrs[svc->attr_count - 1].handle);
   22eee:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
   22ef2:	2114      	movs	r1, #20
   22ef4:	fb01 2303 	mla	r3, r1, r3, r2
   22ef8:	8a10      	ldrh	r0, [r2, #16]
   22efa:	f833 1c04 	ldrh.w	r1, [r3, #-4]
   22efe:	f7e7 fb33 	bl	a568 <sc_indicate.constprop.22>
	db_changed();
   22f02:	f7e7 faeb 	bl	a4dc <db_changed>
	return 0;
   22f06:	4628      	mov	r0, r5
   22f08:	e7dd      	b.n	22ec6 <bt_gatt_service_register+0x26>

00022f0a <db_hash_process>:
	db_hash_gen();
   22f0a:	f7e7 bc87 	b.w	a81c <db_hash_gen>

00022f0e <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   22f0e:	f7ff bdfa 	b.w	22b06 <bt_att_get_mtu>

00022f12 <bt_gatt_change_aware>:
{
   22f12:	b510      	push	{r4, lr}
   22f14:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   22f16:	f7e7 f959 	bl	a1cc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   22f1a:	b910      	cbnz	r0, 22f22 <bt_gatt_change_aware+0x10>
		return true;
   22f1c:	2401      	movs	r4, #1
}
   22f1e:	4620      	mov	r0, r4
   22f20:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   22f22:	7a03      	ldrb	r3, [r0, #8]
   22f24:	07db      	lsls	r3, r3, #31
   22f26:	d5f9      	bpl.n	22f1c <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   22f28:	f100 030c 	add.w	r3, r0, #12
   22f2c:	2100      	movs	r1, #0
   22f2e:	4618      	mov	r0, r3
   22f30:	f7ff fe36 	bl	22ba0 <atomic_test_bit>
   22f34:	4602      	mov	r2, r0
   22f36:	2800      	cmp	r0, #0
   22f38:	d1f0      	bne.n	22f1c <bt_gatt_change_aware+0xa>
	if (!req) {
   22f3a:	2c00      	cmp	r4, #0
   22f3c:	d0ef      	beq.n	22f1e <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   22f3e:	2101      	movs	r1, #1
   22f40:	4618      	mov	r0, r3
   22f42:	f7ff fe2d 	bl	22ba0 <atomic_test_bit>
   22f46:	4604      	mov	r4, r0
   22f48:	b180      	cbz	r0, 22f6c <bt_gatt_change_aware+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22f4a:	f3bf 8f5b 	dmb	ish
   22f4e:	e853 1f00 	ldrex	r1, [r3]
   22f52:	f021 0102 	bic.w	r1, r1, #2
   22f56:	e843 1000 	strex	r0, r1, [r3]
   22f5a:	2800      	cmp	r0, #0
   22f5c:	d1f7      	bne.n	22f4e <bt_gatt_change_aware+0x3c>
   22f5e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   22f62:	4611      	mov	r1, r2
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   22f64:	4618      	mov	r0, r3
   22f66:	f7ff fe27 	bl	22bb8 <atomic_set_bit>
	return false;
   22f6a:	e7d8      	b.n	22f1e <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   22f6c:	2101      	movs	r1, #1
   22f6e:	e7f9      	b.n	22f64 <bt_gatt_change_aware+0x52>

00022f70 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
   22f70:	2100      	movs	r1, #0
{
   22f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   22f74:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   22f76:	4608      	mov	r0, r1
   22f78:	f7ff fad4 	bl	22524 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
   22f7c:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
   22f80:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   22f82:	2101      	movs	r1, #1
   22f84:	4630      	mov	r0, r6
   22f86:	f001 fea1 	bl	24ccc <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   22f8a:	2505      	movs	r5, #5
   22f8c:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
   22f8e:	2101      	movs	r1, #1
   22f90:	4630      	mov	r0, r6
   22f92:	f001 fe9b 	bl	24ccc <net_buf_simple_add>
   22f96:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   22f98:	7005      	strb	r5, [r0, #0]
   22f9a:	4622      	mov	r2, r4
   22f9c:	4638      	mov	r0, r7
   22f9e:	2106      	movs	r1, #6
   22fa0:	f7ff fac3 	bl	2252a <bt_l2cap_send_cb>
}
   22fa4:	2000      	movs	r0, #0
   22fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022fa8 <bt_smp_sign>:
   22fa8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   22fac:	4770      	bx	lr

00022fae <bt_mesh_is_provisioned>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
   22fae:	f7e7 bee5 	b.w	ad7c <atomic_test_bit.constprop.3>

00022fb2 <bt_mesh_init>:
	return err;
}

int bt_mesh_init(const struct bt_mesh_prov *prov,
		 const struct bt_mesh_comp *comp)
{
   22fb2:	b538      	push	{r3, r4, r5, lr}
   22fb4:	4605      	mov	r5, r0
	err = bt_mesh_test();
	if (err) {
		return err;
	}

	err = bt_mesh_comp_register(comp);
   22fb6:	4608      	mov	r0, r1
   22fb8:	f7ec fa56 	bl	f468 <bt_mesh_comp_register>
	if (err) {
   22fbc:	4604      	mov	r4, r0
   22fbe:	b980      	cbnz	r0, 22fe2 <bt_mesh_init+0x30>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		err = bt_mesh_prov_init(prov);
   22fc0:	4628      	mov	r0, r5
   22fc2:	f7f4 fbfd 	bl	177c0 <bt_mesh_prov_init>
		if (err) {
   22fc6:	4604      	mov	r4, r0
   22fc8:	b958      	cbnz	r0, 22fe2 <bt_mesh_init+0x30>
			return err;
		}
	}

	bt_mesh_net_init();
   22fca:	f7ea faab 	bl	d524 <bt_mesh_net_init>
	bt_mesh_trans_init();
   22fce:	f7eb ff73 	bl	eeb8 <bt_mesh_trans_init>
	bt_mesh_beacon_init();
   22fd2:	f7e8 fb35 	bl	b640 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   22fd6:	f7e8 f983 	bl	b2e0 <bt_mesh_adv_init>

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
		bt_mesh_proxy_init();
   22fda:	f7f5 fadb 	bl	18594 <bt_mesh_proxy_init>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_init();
   22fde:	f7f1 fc13 	bl	14808 <bt_mesh_settings_init>
	}

	return 0;
}
   22fe2:	4620      	mov	r0, r4
   22fe4:	bd38      	pop	{r3, r4, r5, pc}

00022fe6 <adv_stack_dump>:
{
   22fe6:	4603      	mov	r3, r0
   22fe8:	4608      	mov	r0, r1
	stack_analyze((char *)user_data, (char *)thread->stack_info.start,
   22fea:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
   22fee:	f7e7 bfd9 	b.w	afa4 <stack_analyze>

00022ff2 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
	BT_DBG("");

	return bt_le_scan_stop();
   22ff2:	f7e5 b9c1 	b.w	8378 <bt_le_scan_stop>

00022ff6 <beacon_complete>:
{
   22ff6:	b510      	push	{r4, lr}
   22ff8:	460c      	mov	r4, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   22ffa:	f002 fa7c 	bl	254f6 <z_impl_k_uptime_get_32>
	sub->beacon_sent = k_uptime_get_32();
   22ffe:	6020      	str	r0, [r4, #0]
}
   23000:	bd10      	pop	{r4, pc}

00023002 <friend_cred_clear>:
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
   23002:	2100      	movs	r1, #0
	cred->net_idx = BT_MESH_KEY_UNUSED;
   23004:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23008:	8003      	strh	r3, [r0, #0]
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
   2300a:	8041      	strh	r1, [r0, #2]
	cred->lpn_counter = 0U;
   2300c:	8081      	strh	r1, [r0, #4]
	cred->frnd_counter = 0U;
   2300e:	80c1      	strh	r1, [r0, #6]
	(void)memset(cred->cred, 0, sizeof(cred->cred));
   23010:	2242      	movs	r2, #66	; 0x42
   23012:	3008      	adds	r0, #8
   23014:	f7fe bf61 	b.w	21eda <memset>

00023018 <bt_mesh_net_flags>:
{
   23018:	b508      	push	{r3, lr}
	if (sub && sub->kr_flag) {
   2301a:	b138      	cbz	r0, 2302c <bt_mesh_net_flags+0x14>
	u8_t flags = 0x00;
   2301c:	7f82      	ldrb	r2, [r0, #30]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
   2301e:	f7e8 fd99 	bl	bb54 <atomic_test_bit.constprop.8>
   23022:	b108      	cbz	r0, 23028 <bt_mesh_net_flags+0x10>
		flags |= BT_MESH_NET_FLAG_IVU;
   23024:	f042 0202 	orr.w	r2, r2, #2
}
   23028:	4610      	mov	r0, r2
   2302a:	bd08      	pop	{r3, pc}
	u8_t flags = 0x00;
   2302c:	4602      	mov	r2, r0
   2302e:	e7f6      	b.n	2301e <bt_mesh_net_flags+0x6>

00023030 <bt_mesh_net_sec_update>:
{
   23030:	b510      	push	{r4, lr}
		bt_mesh_friend_sec_update(sub ? sub->net_idx : BT_MESH_KEY_ANY);
   23032:	4604      	mov	r4, r0
   23034:	b158      	cbz	r0, 2304e <bt_mesh_net_sec_update+0x1e>
   23036:	8b80      	ldrh	r0, [r0, #28]
   23038:	f7f2 f9dc 	bl	153f4 <bt_mesh_friend_sec_update>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   2303c:	f7ee fe18 	bl	11c70 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   23040:	2801      	cmp	r0, #1
   23042:	d107      	bne.n	23054 <bt_mesh_net_sec_update+0x24>
		bt_mesh_proxy_beacon_send(sub);
   23044:	4620      	mov	r0, r4
}
   23046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_proxy_beacon_send(sub);
   2304a:	f7f4 bf73 	b.w	17f34 <bt_mesh_proxy_beacon_send>
		bt_mesh_friend_sec_update(sub ? sub->net_idx : BT_MESH_KEY_ANY);
   2304e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   23052:	e7f1      	b.n	23038 <bt_mesh_net_sec_update+0x8>
}
   23054:	bd10      	pop	{r4, pc}

00023056 <seg_first_send_start>:
	if (tx->cb && tx->cb->start) {
   23056:	6a13      	ldr	r3, [r2, #32]
   23058:	b11b      	cbz	r3, 23062 <seg_first_send_start+0xc>
   2305a:	681b      	ldr	r3, [r3, #0]
   2305c:	b10b      	cbz	r3, 23062 <seg_first_send_start+0xc>
		tx->cb->start(duration, err, tx->cb_data);
   2305e:	6a52      	ldr	r2, [r2, #36]	; 0x24
   23060:	4718      	bx	r3
}
   23062:	4770      	bx	lr

00023064 <ack_timeout>:
{
   23064:	b538      	push	{r3, r4, r5, lr}
   23066:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   23068:	7c80      	ldrb	r0, [r0, #18]
   2306a:	28ff      	cmp	r0, #255	; 0xff
   2306c:	d101      	bne.n	23072 <ack_timeout+0xe>
		ttl = bt_mesh_default_ttl_get();
   2306e:	f7ef f83f 	bl	120f0 <bt_mesh_default_ttl_get>
	to = K_MSEC(150 + (50 * ttl));
   23072:	2396      	movs	r3, #150	; 0x96
   23074:	2432      	movs	r4, #50	; 0x32
   23076:	fb14 3400 	smlabb	r4, r4, r0, r3
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
   2307a:	69a8      	ldr	r0, [r5, #24]
   2307c:	f7dd f89a 	bl	1b4 <__popcountsi2>
   23080:	7c2b      	ldrb	r3, [r5, #16]
   23082:	f003 031f 	and.w	r3, r3, #31
   23086:	1a18      	subs	r0, r3, r0
   23088:	2364      	movs	r3, #100	; 0x64
   2308a:	fb00 3303 	mla	r3, r0, r3, r3
   2308e:	1918      	adds	r0, r3, r4
}
   23090:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   23094:	bfb8      	it	lt
   23096:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   2309a:	bd38      	pop	{r3, r4, r5, pc}

0002309c <seg_tx_complete>:
{
   2309c:	b510      	push	{r4, lr}
   2309e:	4604      	mov	r4, r0
   230a0:	4608      	mov	r0, r1
	if (tx->cb && tx->cb->end) {
   230a2:	6a23      	ldr	r3, [r4, #32]
   230a4:	b11b      	cbz	r3, 230ae <seg_tx_complete+0x12>
   230a6:	685b      	ldr	r3, [r3, #4]
   230a8:	b10b      	cbz	r3, 230ae <seg_tx_complete+0x12>
		tx->cb->end(err, tx->cb_data);
   230aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   230ac:	4798      	blx	r3
	seg_tx_reset(tx);
   230ae:	4620      	mov	r0, r4
}
   230b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seg_tx_reset(tx);
   230b4:	f7ea bc80 	b.w	d9b8 <seg_tx_reset>

000230b8 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   230b8:	3828      	subs	r0, #40	; 0x28
   230ba:	f7ea bcd3 	b.w	da64 <seg_tx_send_unacked>

000230be <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   230be:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   230c0:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   230c2:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   230c4:	f3c0 2307 	ubfx	r3, r0, #8, #8
   230c8:	700a      	strb	r2, [r1, #0]
   230ca:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   230cc:	70c8      	strb	r0, [r1, #3]
}
   230ce:	4770      	bx	lr

000230d0 <bt_mesh_ccm_encrypt>:
{
   230d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230d4:	b099      	sub	sp, #100	; 0x64
   230d6:	4607      	mov	r7, r0
   230d8:	9300      	str	r3, [sp, #0]
   230da:	4690      	mov	r8, r2
	pmsg[0] = 0x01;
   230dc:	2301      	movs	r3, #1
	memcpy(pmsg + 1, nonce, 13);
   230de:	220d      	movs	r2, #13
   230e0:	f10d 0910 	add.w	r9, sp, #16
   230e4:	f10d 0011 	add.w	r0, sp, #17
{
   230e8:	9101      	str	r1, [sp, #4]
	pmsg[0] = 0x01;
   230ea:	f88d 3010 	strb.w	r3, [sp, #16]
{
   230ee:	e9dd a522 	ldrd	sl, r5, [sp, #136]	; 0x88
	memcpy(pmsg + 1, nonce, 13);
   230f2:	f7fe fec8 	bl	21e86 <memcpy>
	dst[0] = val >> 8;
   230f6:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, pmsg, cmic);
   230f8:	aa08      	add	r2, sp, #32
   230fa:	4649      	mov	r1, r9
   230fc:	4638      	mov	r0, r7
   230fe:	f8ad 301e 	strh.w	r3, [sp, #30]
   23102:	f001 fa52 	bl	245aa <bt_encrypt_be>
	if (err) {
   23106:	4604      	mov	r4, r0
   23108:	2800      	cmp	r0, #0
   2310a:	d139      	bne.n	23180 <bt_mesh_ccm_encrypt+0xb0>
	if (mic_size == sizeof(u64_t)) {
   2310c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2310e:	2b08      	cmp	r3, #8
   23110:	d13a      	bne.n	23188 <bt_mesh_ccm_encrypt+0xb8>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
   23112:	2d00      	cmp	r5, #0
   23114:	bf14      	ite	ne
   23116:	2359      	movne	r3, #89	; 0x59
   23118:	2319      	moveq	r3, #25
	memcpy(pmsg + 1, nonce, 13);
   2311a:	220d      	movs	r2, #13
   2311c:	9901      	ldr	r1, [sp, #4]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   2311e:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(pmsg + 1, nonce, 13);
   23122:	f10d 0011 	add.w	r0, sp, #17
   23126:	f7fe feae 	bl	21e86 <memcpy>
   2312a:	9b00      	ldr	r3, [sp, #0]
	sys_put_be16(msg_len, pmsg + 14);
   2312c:	f8bd 6000 	ldrh.w	r6, [sp]
	err = bt_encrypt_be(key, pmsg, Xn);
   23130:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   23134:	ba5b      	rev16	r3, r3
   23136:	465a      	mov	r2, fp
   23138:	4649      	mov	r1, r9
   2313a:	4638      	mov	r0, r7
   2313c:	f8ad 301e 	strh.w	r3, [sp, #30]
   23140:	f001 fa33 	bl	245aa <bt_encrypt_be>
	if (err) {
   23144:	4604      	mov	r4, r0
   23146:	b9d8      	cbnz	r0, 23180 <bt_mesh_ccm_encrypt+0xb0>
	if (aad_len) {
   23148:	bb1d      	cbnz	r5, 23192 <bt_mesh_ccm_encrypt+0xc2>
	blk_cnt = (msg_len + 15) / 16;
   2314a:	9b00      	ldr	r3, [sp, #0]
   2314c:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   23150:	330f      	adds	r3, #15
   23152:	091b      	lsrs	r3, r3, #4
		last_blk = 16U;
   23154:	f016 060f 	ands.w	r6, r6, #15
	blk_cnt = (msg_len + 15) / 16;
   23158:	9302      	str	r3, [sp, #8]
		last_blk = 16U;
   2315a:	bf08      	it	eq
   2315c:	2610      	moveq	r6, #16
	for (j = 0; j < blk_cnt; j++) {
   2315e:	f108 0810 	add.w	r8, r8, #16
   23162:	f04f 0900 	mov.w	r9, #0
			err = bt_encrypt_be(key, pmsg, Xn);
   23166:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
	for (j = 0; j < blk_cnt; j++) {
   2316a:	9b02      	ldr	r3, [sp, #8]
   2316c:	4599      	cmp	r9, r3
   2316e:	d15c      	bne.n	2322a <bt_mesh_ccm_encrypt+0x15a>
	memcpy(out_msg + msg_len, mic, mic_size);
   23170:	9b00      	ldr	r3, [sp, #0]
   23172:	9d24      	ldr	r5, [sp, #144]	; 0x90
   23174:	9a25      	ldr	r2, [sp, #148]	; 0x94
   23176:	442b      	add	r3, r5
   23178:	a910      	add	r1, sp, #64	; 0x40
   2317a:	4618      	mov	r0, r3
   2317c:	f7fe fe83 	bl	21e86 <memcpy>
}
   23180:	4620      	mov	r0, r4
   23182:	b019      	add	sp, #100	; 0x64
   23184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   23188:	2d00      	cmp	r5, #0
   2318a:	bf14      	ite	ne
   2318c:	2349      	movne	r3, #73	; 0x49
   2318e:	2309      	moveq	r3, #9
   23190:	e7c3      	b.n	2311a <bt_mesh_ccm_encrypt+0x4a>
			pmsg[i] = Xn[i] ^ pmsg[i];
   23192:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   23196:	f88d 3010 	strb.w	r3, [sp, #16]
   2319a:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   2319e:	406b      	eors	r3, r5
   231a0:	f88d 3011 	strb.w	r3, [sp, #17]
		while (aad_len > 16) {
   231a4:	2202      	movs	r2, #2
		aad_len += sizeof(u16_t);
   231a6:	1cab      	adds	r3, r5, #2
		j = 0;
   231a8:	4605      	mov	r5, r0
		while (aad_len > 16) {
   231aa:	2b10      	cmp	r3, #16
   231ac:	eb0a 0005 	add.w	r0, sl, r5
   231b0:	d81a      	bhi.n	231e8 <bt_mesh_ccm_encrypt+0x118>
   231b2:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
   231b6:	f10d 0c10 	add.w	ip, sp, #16
   231ba:	441d      	add	r5, r3
   231bc:	44aa      	add	sl, r5
   231be:	4661      	mov	r1, ip
   231c0:	4672      	mov	r2, lr
			pmsg[i] = Xn[i] ^ aad[j];
   231c2:	f810 9b01 	ldrb.w	r9, [r0], #1
   231c6:	f81e 5b01 	ldrb.w	r5, [lr], #1
		for (i = 0; i < aad_len; i++, j++) {
   231ca:	4550      	cmp	r0, sl
			pmsg[i] = Xn[i] ^ aad[j];
   231cc:	ea85 0509 	eor.w	r5, r5, r9
   231d0:	f80c 5b01 	strb.w	r5, [ip], #1
		for (i = 0; i < aad_len; i++, j++) {
   231d4:	d1f5      	bne.n	231c2 <bt_mesh_ccm_encrypt+0xf2>
			pmsg[i] = Xn[i];
   231d6:	a814      	add	r0, sp, #80	; 0x50
		for (i = aad_len; i < 16; i++) {
   231d8:	2b10      	cmp	r3, #16
   231da:	d11f      	bne.n	2321c <bt_mesh_ccm_encrypt+0x14c>
		err = bt_encrypt_be(key, pmsg, Xn);
   231dc:	4638      	mov	r0, r7
   231de:	f001 f9e4 	bl	245aa <bt_encrypt_be>
		if (err) {
   231e2:	2800      	cmp	r0, #0
   231e4:	d0b1      	beq.n	2314a <bt_mesh_ccm_encrypt+0x7a>
   231e6:	e017      	b.n	23218 <bt_mesh_ccm_encrypt+0x148>
		while (aad_len > 16) {
   231e8:	4613      	mov	r3, r2
				pmsg[i] = Xn[i] ^ aad[j];
   231ea:	f813 c00b 	ldrb.w	ip, [r3, fp]
   231ee:	f810 1b01 	ldrb.w	r1, [r0], #1
   231f2:	ea81 010c 	eor.w	r1, r1, ip
   231f6:	f803 1009 	strb.w	r1, [r3, r9]
				i++, j++;
   231fa:	3301      	adds	r3, #1
			} while (i < 16);
   231fc:	2b10      	cmp	r3, #16
   231fe:	d1f4      	bne.n	231ea <bt_mesh_ccm_encrypt+0x11a>
   23200:	f1c2 0210 	rsb	r2, r2, #16
   23204:	4415      	add	r5, r2
			err = bt_encrypt_be(key, pmsg, Xn);
   23206:	4649      	mov	r1, r9
   23208:	465a      	mov	r2, fp
   2320a:	4638      	mov	r0, r7
   2320c:	f001 f9cd 	bl	245aa <bt_encrypt_be>
			aad_len -= 16;
   23210:	2302      	movs	r3, #2
			i = 0;
   23212:	2200      	movs	r2, #0
			if (err) {
   23214:	2800      	cmp	r0, #0
   23216:	d0c8      	beq.n	231aa <bt_mesh_ccm_encrypt+0xda>
			err = bt_encrypt_be(key, pmsg, cmsg);
   23218:	4604      	mov	r4, r0
   2321a:	e7b1      	b.n	23180 <bt_mesh_ccm_encrypt+0xb0>
			pmsg[i] = Xn[i];
   2321c:	f10d 0c10 	add.w	ip, sp, #16
   23220:	5c1d      	ldrb	r5, [r3, r0]
   23222:	f80c 5003 	strb.w	r5, [ip, r3]
		for (i = aad_len; i < 16; i++) {
   23226:	3301      	adds	r3, #1
   23228:	e7d6      	b.n	231d8 <bt_mesh_ccm_encrypt+0x108>
		if (j + 1 == blk_cnt) {
   2322a:	9b02      	ldr	r3, [sp, #8]
   2322c:	f109 0901 	add.w	r9, r9, #1
   23230:	454b      	cmp	r3, r9
   23232:	f1a8 0510 	sub.w	r5, r8, #16
   23236:	d155      	bne.n	232e4 <bt_mesh_ccm_encrypt+0x214>
   23238:	4629      	mov	r1, r5
			for (i = 0; i < last_blk; i++) {
   2323a:	2300      	movs	r3, #0
   2323c:	42b3      	cmp	r3, r6
   2323e:	d342      	bcc.n	232c6 <bt_mesh_ccm_encrypt+0x1f6>
   23240:	4633      	mov	r3, r6
			for (i = last_blk; i < 16; i++) {
   23242:	2b10      	cmp	r3, #16
   23244:	d148      	bne.n	232d8 <bt_mesh_ccm_encrypt+0x208>
			err = bt_encrypt_be(key, pmsg, Xn);
   23246:	4652      	mov	r2, sl
   23248:	a904      	add	r1, sp, #16
   2324a:	4638      	mov	r0, r7
   2324c:	9303      	str	r3, [sp, #12]
   2324e:	f001 f9ac 	bl	245aa <bt_encrypt_be>
			if (err) {
   23252:	2800      	cmp	r0, #0
   23254:	d1e0      	bne.n	23218 <bt_mesh_ccm_encrypt+0x148>
   23256:	9b03      	ldr	r3, [sp, #12]
   23258:	f10d 0c20 	add.w	ip, sp, #32
   2325c:	4650      	mov	r0, sl
   2325e:	a910      	add	r1, sp, #64	; 0x40
				mic[i] = cmic[i] ^ Xn[i];
   23260:	f81c 2b01 	ldrb.w	r2, [ip], #1
   23264:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < sizeof(mic); i++) {
   23268:	3b01      	subs	r3, #1
				mic[i] = cmic[i] ^ Xn[i];
   2326a:	ea82 020e 	eor.w	r2, r2, lr
   2326e:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < sizeof(mic); i++) {
   23272:	d1f5      	bne.n	23260 <bt_mesh_ccm_encrypt+0x190>
   23274:	9303      	str	r3, [sp, #12]
			memcpy(pmsg + 1, nonce, 13);
   23276:	220d      	movs	r2, #13
			pmsg[0] = 0x01;
   23278:	f04f 0301 	mov.w	r3, #1
			memcpy(pmsg + 1, nonce, 13);
   2327c:	9901      	ldr	r1, [sp, #4]
			pmsg[0] = 0x01;
   2327e:	f88d 3010 	strb.w	r3, [sp, #16]
			memcpy(pmsg + 1, nonce, 13);
   23282:	f10d 0011 	add.w	r0, sp, #17
   23286:	f7fe fdfe 	bl	21e86 <memcpy>
   2328a:	fa99 f299 	rev16.w	r2, r9
   2328e:	f8ad 201e 	strh.w	r2, [sp, #30]
			err = bt_encrypt_be(key, pmsg, cmsg);
   23292:	a904      	add	r1, sp, #16
   23294:	aa0c      	add	r2, sp, #48	; 0x30
   23296:	4638      	mov	r0, r7
   23298:	f001 f987 	bl	245aa <bt_encrypt_be>
			if (err) {
   2329c:	2800      	cmp	r0, #0
   2329e:	d1bb      	bne.n	23218 <bt_mesh_ccm_encrypt+0x148>
   232a0:	9b03      	ldr	r3, [sp, #12]
   232a2:	aa0c      	add	r2, sp, #48	; 0x30
   232a4:	4658      	mov	r0, fp
					msg[(j * 16) + i] ^ cmsg[i];
   232a6:	f815 1b01 	ldrb.w	r1, [r5], #1
   232aa:	f812 cb01 	ldrb.w	ip, [r2], #1
			for (i = 0; i < last_blk; i++) {
   232ae:	3301      	adds	r3, #1
				out_msg[(j * 16) + i] =
   232b0:	ea81 010c 	eor.w	r1, r1, ip
			for (i = 0; i < last_blk; i++) {
   232b4:	429e      	cmp	r6, r3
				out_msg[(j * 16) + i] =
   232b6:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < last_blk; i++) {
   232ba:	d8f4      	bhi.n	232a6 <bt_mesh_ccm_encrypt+0x1d6>
   232bc:	f10b 0b10 	add.w	fp, fp, #16
   232c0:	f108 0810 	add.w	r8, r8, #16
   232c4:	e751      	b.n	2316a <bt_mesh_ccm_encrypt+0x9a>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
   232c6:	f813 000a 	ldrb.w	r0, [r3, sl]
   232ca:	f811 2b01 	ldrb.w	r2, [r1], #1
   232ce:	4042      	eors	r2, r0
   232d0:	a804      	add	r0, sp, #16
   232d2:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < last_blk; i++) {
   232d4:	3301      	adds	r3, #1
   232d6:	e7b1      	b.n	2323c <bt_mesh_ccm_encrypt+0x16c>
				pmsg[i] = Xn[i] ^ 0x00;
   232d8:	a904      	add	r1, sp, #16
   232da:	f81a 2003 	ldrb.w	r2, [sl, r3]
   232de:	54ca      	strb	r2, [r1, r3]
			for (i = last_blk; i < 16; i++) {
   232e0:	3301      	adds	r3, #1
   232e2:	e7ae      	b.n	23242 <bt_mesh_ccm_encrypt+0x172>
   232e4:	a914      	add	r1, sp, #80	; 0x50
   232e6:	a804      	add	r0, sp, #16
		if (j + 1 == blk_cnt) {
   232e8:	462b      	mov	r3, r5
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
   232ea:	f813 cb01 	ldrb.w	ip, [r3], #1
   232ee:	f811 2b01 	ldrb.w	r2, [r1], #1
			for (i = 0; i < 16; i++) {
   232f2:	4543      	cmp	r3, r8
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
   232f4:	ea82 020c 	eor.w	r2, r2, ip
   232f8:	f800 2b01 	strb.w	r2, [r0], #1
			for (i = 0; i < 16; i++) {
   232fc:	d1f5      	bne.n	232ea <bt_mesh_ccm_encrypt+0x21a>
			err = bt_encrypt_be(key, pmsg, Xn);
   232fe:	4652      	mov	r2, sl
   23300:	a904      	add	r1, sp, #16
   23302:	4638      	mov	r0, r7
   23304:	f001 f951 	bl	245aa <bt_encrypt_be>
			if (err) {
   23308:	2800      	cmp	r0, #0
   2330a:	d185      	bne.n	23218 <bt_mesh_ccm_encrypt+0x148>
			pmsg[0] = 0x01;
   2330c:	f04f 0301 	mov.w	r3, #1
			memcpy(pmsg + 1, nonce, 13);
   23310:	220d      	movs	r2, #13
   23312:	9901      	ldr	r1, [sp, #4]
			pmsg[0] = 0x01;
   23314:	f88d 3010 	strb.w	r3, [sp, #16]
			memcpy(pmsg + 1, nonce, 13);
   23318:	f10d 0011 	add.w	r0, sp, #17
   2331c:	f7fe fdb3 	bl	21e86 <memcpy>
   23320:	fa99 f399 	rev16.w	r3, r9
			err = bt_encrypt_be(key, pmsg, cmsg);
   23324:	aa0c      	add	r2, sp, #48	; 0x30
   23326:	a904      	add	r1, sp, #16
   23328:	4638      	mov	r0, r7
   2332a:	f8ad 301e 	strh.w	r3, [sp, #30]
   2332e:	f001 f93c 	bl	245aa <bt_encrypt_be>
			if (err) {
   23332:	2800      	cmp	r0, #0
   23334:	f47f af70 	bne.w	23218 <bt_mesh_ccm_encrypt+0x148>
   23338:	ab0c      	add	r3, sp, #48	; 0x30
   2333a:	4659      	mov	r1, fp
					msg[(j * 16) + i] ^ cmsg[i];
   2333c:	f815 2b01 	ldrb.w	r2, [r5], #1
   23340:	f813 0b01 	ldrb.w	r0, [r3], #1
			for (i = 0; i < 16; i++) {
   23344:	4545      	cmp	r5, r8
				out_msg[(j * 16) + i] =
   23346:	ea82 0200 	eor.w	r2, r2, r0
   2334a:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < 16; i++) {
   2334e:	d1f5      	bne.n	2333c <bt_mesh_ccm_encrypt+0x26c>
   23350:	e7b4      	b.n	232bc <bt_mesh_ccm_encrypt+0x1ec>

00023352 <bt_mesh_ccm_decrypt>:
{
   23352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23356:	b09d      	sub	sp, #116	; 0x74
   23358:	4605      	mov	r5, r0
   2335a:	e9cd 1202 	strd	r1, r2, [sp, #8]
   2335e:	e9dd a626 	ldrd	sl, r6, [sp, #152]	; 0x98
	if (msg_len < 1 || aad_len >= 0xff00) {
   23362:	461f      	mov	r7, r3
   23364:	2b00      	cmp	r3, #0
   23366:	f000 813c 	beq.w	235e2 <bt_mesh_ccm_decrypt+0x290>
	pmsg[0] = 0x01;
   2336a:	2301      	movs	r3, #1
	memcpy(pmsg + 1, nonce, 13);
   2336c:	220d      	movs	r2, #13
   2336e:	f10d 0920 	add.w	r9, sp, #32
   23372:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	pmsg[0] = 0x01;
   23376:	f88d 3020 	strb.w	r3, [sp, #32]
	memcpy(pmsg + 1, nonce, 13);
   2337a:	f7fe fd84 	bl	21e86 <memcpy>
   2337e:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, pmsg, cmic);
   23380:	aa0c      	add	r2, sp, #48	; 0x30
   23382:	4649      	mov	r1, r9
   23384:	4628      	mov	r0, r5
   23386:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2338a:	f001 f90e 	bl	245aa <bt_encrypt_be>
	if (err) {
   2338e:	2800      	cmp	r0, #0
   23390:	f040 8086 	bne.w	234a0 <bt_mesh_ccm_decrypt+0x14e>
	if (mic_size == sizeof(u64_t)) {
   23394:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   23396:	2b08      	cmp	r3, #8
   23398:	d13a      	bne.n	23410 <bt_mesh_ccm_decrypt+0xbe>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
   2339a:	2e00      	cmp	r6, #0
   2339c:	bf14      	ite	ne
   2339e:	2359      	movne	r3, #89	; 0x59
   233a0:	2319      	moveq	r3, #25
	memcpy(pmsg + 1, nonce, 13);
   233a2:	220d      	movs	r2, #13
   233a4:	9902      	ldr	r1, [sp, #8]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   233a6:	f88d 3020 	strb.w	r3, [sp, #32]
	memcpy(pmsg + 1, nonce, 13);
   233aa:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	err = bt_encrypt_be(key, pmsg, Xn);
   233ae:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
	memcpy(pmsg + 1, nonce, 13);
   233b2:	f7fe fd68 	bl	21e86 <memcpy>
   233b6:	ba7b      	rev16	r3, r7
	err = bt_encrypt_be(key, pmsg, Xn);
   233b8:	465a      	mov	r2, fp
   233ba:	4649      	mov	r1, r9
   233bc:	4628      	mov	r0, r5
	sys_put_be16(msg_len, pmsg + 14);
   233be:	b2bc      	uxth	r4, r7
   233c0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	err = bt_encrypt_be(key, pmsg, Xn);
   233c4:	f001 f8f1 	bl	245aa <bt_encrypt_be>
	if (err) {
   233c8:	2800      	cmp	r0, #0
   233ca:	d169      	bne.n	234a0 <bt_mesh_ccm_decrypt+0x14e>
	if (aad_len) {
   233cc:	bb2e      	cbnz	r6, 2341a <bt_mesh_ccm_decrypt+0xc8>
	blk_cnt = (msg_len + 15) / 16;
   233ce:	f107 030f 	add.w	r3, r7, #15
   233d2:	9a03      	ldr	r2, [sp, #12]
   233d4:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
		last_blk = 16U;
   233d8:	f014 040f 	ands.w	r4, r4, #15
   233dc:	f3c3 130f 	ubfx	r3, r3, #4, #16
   233e0:	bf08      	it	eq
   233e2:	2410      	moveq	r4, #16
	for (j = 0; j < blk_cnt; j++) {
   233e4:	f102 0910 	add.w	r9, r2, #16
   233e8:	f04f 0800 	mov.w	r8, #0
   233ec:	9300      	str	r3, [sp, #0]
   233ee:	f10d 0a20 	add.w	sl, sp, #32
   233f2:	9b00      	ldr	r3, [sp, #0]
   233f4:	4543      	cmp	r3, r8
   233f6:	d85a      	bhi.n	234ae <bt_mesh_ccm_decrypt+0x15c>
	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   233f8:	9b03      	ldr	r3, [sp, #12]
   233fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   233fc:	443b      	add	r3, r7
   233fe:	4619      	mov	r1, r3
   23400:	a818      	add	r0, sp, #96	; 0x60
   23402:	f7fe fd19 	bl	21e38 <memcmp>
		return -EBADMSG;
   23406:	2800      	cmp	r0, #0
   23408:	bf18      	it	ne
   2340a:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
   2340e:	e047      	b.n	234a0 <bt_mesh_ccm_decrypt+0x14e>
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   23410:	2e00      	cmp	r6, #0
   23412:	bf14      	ite	ne
   23414:	2349      	movne	r3, #73	; 0x49
   23416:	2309      	moveq	r3, #9
   23418:	e7c3      	b.n	233a2 <bt_mesh_ccm_decrypt+0x50>
			pmsg[i] = Xn[i] ^ pmsg[i];
   2341a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   2341e:	f88d 3020 	strb.w	r3, [sp, #32]
   23422:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   23426:	4073      	eors	r3, r6
		aad_len += sizeof(u16_t);
   23428:	1cb1      	adds	r1, r6, #2
			pmsg[i] = Xn[i] ^ pmsg[i];
   2342a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		j = 0;
   2342e:	4680      	mov	r8, r0
		while (aad_len > 16) {
   23430:	2202      	movs	r2, #2
				pmsg[i] = Xn[i] ^ aad[j];
   23432:	464e      	mov	r6, r9
		while (aad_len > 16) {
   23434:	2910      	cmp	r1, #16
   23436:	eb0a 0308 	add.w	r3, sl, r8
   2343a:	d81a      	bhi.n	23472 <bt_mesh_ccm_decrypt+0x120>
   2343c:	ae14      	add	r6, sp, #80	; 0x50
   2343e:	4488      	add	r8, r1
   23440:	f10d 0c20 	add.w	ip, sp, #32
   23444:	44c2      	add	sl, r8
   23446:	4632      	mov	r2, r6
			pmsg[i] = Xn[i] ^ aad[j];
   23448:	f813 eb01 	ldrb.w	lr, [r3], #1
   2344c:	f816 0b01 	ldrb.w	r0, [r6], #1
		for (i = 0; i < aad_len; i++, j++) {
   23450:	4553      	cmp	r3, sl
			pmsg[i] = Xn[i] ^ aad[j];
   23452:	ea80 000e 	eor.w	r0, r0, lr
   23456:	f80c 0b01 	strb.w	r0, [ip], #1
		for (i = 0; i < aad_len; i++, j++) {
   2345a:	d1f5      	bne.n	23448 <bt_mesh_ccm_decrypt+0xf6>
			pmsg[i] = Xn[i];
   2345c:	ab08      	add	r3, sp, #32
   2345e:	a814      	add	r0, sp, #80	; 0x50
		for (i = aad_len; i < 16; i++) {
   23460:	2910      	cmp	r1, #16
   23462:	d120      	bne.n	234a6 <bt_mesh_ccm_decrypt+0x154>
		err = bt_encrypt_be(key, pmsg, Xn);
   23464:	4649      	mov	r1, r9
   23466:	4628      	mov	r0, r5
   23468:	f001 f89f 	bl	245aa <bt_encrypt_be>
		if (err) {
   2346c:	2800      	cmp	r0, #0
   2346e:	d0ae      	beq.n	233ce <bt_mesh_ccm_decrypt+0x7c>
   23470:	e016      	b.n	234a0 <bt_mesh_ccm_decrypt+0x14e>
		while (aad_len > 16) {
   23472:	4611      	mov	r1, r2
				pmsg[i] = Xn[i] ^ aad[j];
   23474:	f811 c00b 	ldrb.w	ip, [r1, fp]
   23478:	f813 0b01 	ldrb.w	r0, [r3], #1
   2347c:	ea80 000c 	eor.w	r0, r0, ip
   23480:	5588      	strb	r0, [r1, r6]
				i++, j++;
   23482:	3101      	adds	r1, #1
			} while (i < 16);
   23484:	2910      	cmp	r1, #16
   23486:	d1f5      	bne.n	23474 <bt_mesh_ccm_decrypt+0x122>
   23488:	f1c2 0210 	rsb	r2, r2, #16
			err = bt_encrypt_be(key, pmsg, Xn);
   2348c:	4631      	mov	r1, r6
   2348e:	4490      	add	r8, r2
   23490:	4628      	mov	r0, r5
   23492:	465a      	mov	r2, fp
   23494:	f001 f889 	bl	245aa <bt_encrypt_be>
			aad_len -= 16;
   23498:	2102      	movs	r1, #2
			i = 0;
   2349a:	2200      	movs	r2, #0
			if (err) {
   2349c:	2800      	cmp	r0, #0
   2349e:	d0c9      	beq.n	23434 <bt_mesh_ccm_decrypt+0xe2>
}
   234a0:	b01d      	add	sp, #116	; 0x74
   234a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pmsg[i] = Xn[i];
   234a6:	5c0e      	ldrb	r6, [r1, r0]
   234a8:	54ce      	strb	r6, [r1, r3]
		for (i = aad_len; i < 16; i++) {
   234aa:	3101      	adds	r1, #1
   234ac:	e7d8      	b.n	23460 <bt_mesh_ccm_decrypt+0x10e>
		if (j + 1 == blk_cnt) {
   234ae:	9b00      	ldr	r3, [sp, #0]
			memcpy(pmsg + 1, nonce, 13);
   234b0:	9902      	ldr	r1, [sp, #8]
		if (j + 1 == blk_cnt) {
   234b2:	f108 0801 	add.w	r8, r8, #1
   234b6:	4543      	cmp	r3, r8
			pmsg[0] = 0x01;
   234b8:	f04f 0301 	mov.w	r3, #1
   234bc:	f88d 3020 	strb.w	r3, [sp, #32]
			memcpy(pmsg + 1, nonce, 13);
   234c0:	f04f 020d 	mov.w	r2, #13
   234c4:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		if (j + 1 == blk_cnt) {
   234c8:	d153      	bne.n	23572 <bt_mesh_ccm_decrypt+0x220>
			memcpy(pmsg + 1, nonce, 13);
   234ca:	f7fe fcdc 	bl	21e86 <memcpy>
   234ce:	9b00      	ldr	r3, [sp, #0]
			err = bt_encrypt_be(key, pmsg, cmsg);
   234d0:	ae10      	add	r6, sp, #64	; 0x40
   234d2:	ba5b      	rev16	r3, r3
   234d4:	4632      	mov	r2, r6
   234d6:	4651      	mov	r1, sl
   234d8:	4628      	mov	r0, r5
   234da:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   234de:	f001 f864 	bl	245aa <bt_encrypt_be>
			if (err) {
   234e2:	2800      	cmp	r0, #0
   234e4:	d1dc      	bne.n	234a0 <bt_mesh_ccm_decrypt+0x14e>
   234e6:	f1a9 0210 	sub.w	r2, r9, #16
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   234ea:	4631      	mov	r1, r6
			for (i = 0; i < last_blk; i++) {
   234ec:	4284      	cmp	r4, r0
   234ee:	4626      	mov	r6, r4
   234f0:	d832      	bhi.n	23558 <bt_mesh_ccm_decrypt+0x206>
			memcpy(out_msg + (j * 16), msg, last_blk);
   234f2:	4622      	mov	r2, r4
   234f4:	a904      	add	r1, sp, #16
   234f6:	4658      	mov	r0, fp
   234f8:	f7fe fcc5 	bl	21e86 <memcpy>
			for (i = 0; i < last_blk; i++) {
   234fc:	ab14      	add	r3, sp, #80	; 0x50
   234fe:	9301      	str	r3, [sp, #4]
			memcpy(out_msg + (j * 16), msg, last_blk);
   23500:	f8dd c004 	ldr.w	ip, [sp, #4]
   23504:	ab04      	add	r3, sp, #16
   23506:	a808      	add	r0, sp, #32
			for (i = 0; i < last_blk; i++) {
   23508:	2200      	movs	r2, #0
				pmsg[i] = Xn[i] ^ msg[i];
   2350a:	f81c 1b01 	ldrb.w	r1, [ip], #1
   2350e:	f813 eb01 	ldrb.w	lr, [r3], #1
			for (i = 0; i < last_blk; i++) {
   23512:	3201      	adds	r2, #1
				pmsg[i] = Xn[i] ^ msg[i];
   23514:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   23518:	4294      	cmp	r4, r2
				pmsg[i] = Xn[i] ^ msg[i];
   2351a:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < last_blk; i++) {
   2351e:	d8f4      	bhi.n	2350a <bt_mesh_ccm_decrypt+0x1b8>
   23520:	aa14      	add	r2, sp, #80	; 0x50
			for (i = last_blk; i < 16; i++) {
   23522:	2e10      	cmp	r6, #16
   23524:	d120      	bne.n	23568 <bt_mesh_ccm_decrypt+0x216>
			err = bt_encrypt_be(key, pmsg, Xn);
   23526:	4651      	mov	r1, sl
   23528:	4628      	mov	r0, r5
   2352a:	f001 f83e 	bl	245aa <bt_encrypt_be>
			if (err) {
   2352e:	2800      	cmp	r0, #0
   23530:	d1b6      	bne.n	234a0 <bt_mesh_ccm_decrypt+0x14e>
   23532:	a90c      	add	r1, sp, #48	; 0x30
   23534:	aa18      	add	r2, sp, #96	; 0x60
				mic[i] = cmic[i] ^ Xn[i];
   23536:	9b01      	ldr	r3, [sp, #4]
   23538:	f811 cb01 	ldrb.w	ip, [r1], #1
   2353c:	f813 0b01 	ldrb.w	r0, [r3], #1
   23540:	9301      	str	r3, [sp, #4]
			for (i = 0; i < sizeof(mic); i++) {
   23542:	3e01      	subs	r6, #1
				mic[i] = cmic[i] ^ Xn[i];
   23544:	ea8c 0300 	eor.w	r3, ip, r0
   23548:	f802 3b01 	strb.w	r3, [r2], #1
			for (i = 0; i < sizeof(mic); i++) {
   2354c:	d1f3      	bne.n	23536 <bt_mesh_ccm_decrypt+0x1e4>
   2354e:	f10b 0b10 	add.w	fp, fp, #16
   23552:	f109 0910 	add.w	r9, r9, #16
   23556:	e74c      	b.n	233f2 <bt_mesh_ccm_decrypt+0xa0>
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   23558:	5c46      	ldrb	r6, [r0, r1]
   2355a:	f812 3b01 	ldrb.w	r3, [r2], #1
   2355e:	4073      	eors	r3, r6
   23560:	ae04      	add	r6, sp, #16
   23562:	5433      	strb	r3, [r6, r0]
			for (i = 0; i < last_blk; i++) {
   23564:	3001      	adds	r0, #1
   23566:	e7c1      	b.n	234ec <bt_mesh_ccm_decrypt+0x19a>
				pmsg[i] = Xn[i] ^ 0x00;
   23568:	5d93      	ldrb	r3, [r2, r6]
   2356a:	f80a 3006 	strb.w	r3, [sl, r6]
			for (i = last_blk; i < 16; i++) {
   2356e:	3601      	adds	r6, #1
   23570:	e7d7      	b.n	23522 <bt_mesh_ccm_decrypt+0x1d0>
			memcpy(pmsg + 1, nonce, 13);
   23572:	f7fe fc88 	bl	21e86 <memcpy>
   23576:	fa98 f398 	rev16.w	r3, r8
			err = bt_encrypt_be(key, pmsg, cmsg);
   2357a:	aa10      	add	r2, sp, #64	; 0x40
   2357c:	4651      	mov	r1, sl
   2357e:	4628      	mov	r0, r5
   23580:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   23584:	f001 f811 	bl	245aa <bt_encrypt_be>
			if (err) {
   23588:	2800      	cmp	r0, #0
   2358a:	d189      	bne.n	234a0 <bt_mesh_ccm_decrypt+0x14e>
   2358c:	ae04      	add	r6, sp, #16
   2358e:	f1a9 0210 	sub.w	r2, r9, #16
   23592:	ab10      	add	r3, sp, #64	; 0x40
   23594:	4630      	mov	r0, r6
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   23596:	f812 1b01 	ldrb.w	r1, [r2], #1
   2359a:	f813 cb01 	ldrb.w	ip, [r3], #1
			for (i = 0; i < 16; i++) {
   2359e:	4591      	cmp	r9, r2
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   235a0:	ea81 010c 	eor.w	r1, r1, ip
   235a4:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < 16; i++) {
   235a8:	d1f5      	bne.n	23596 <bt_mesh_ccm_decrypt+0x244>
			memcpy(out_msg + (j * 16), msg, 16);
   235aa:	2210      	movs	r2, #16
   235ac:	eb0d 0102 	add.w	r1, sp, r2
   235b0:	4658      	mov	r0, fp
   235b2:	f7fe fc68 	bl	21e86 <memcpy>
			for (i = 0; i < 16; i++) {
   235b6:	aa08      	add	r2, sp, #32
   235b8:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
			memcpy(out_msg + (j * 16), msg, 16);
   235bc:	2310      	movs	r3, #16
   235be:	4611      	mov	r1, r2
				pmsg[i] = Xn[i] ^ msg[i];
   235c0:	f81c 0b01 	ldrb.w	r0, [ip], #1
   235c4:	f816 eb01 	ldrb.w	lr, [r6], #1
			for (i = 0; i < 16; i++) {
   235c8:	3b01      	subs	r3, #1
				pmsg[i] = Xn[i] ^ msg[i];
   235ca:	ea80 000e 	eor.w	r0, r0, lr
   235ce:	f802 0b01 	strb.w	r0, [r2], #1
			for (i = 0; i < 16; i++) {
   235d2:	d1f5      	bne.n	235c0 <bt_mesh_ccm_decrypt+0x26e>
			err = bt_encrypt_be(key, pmsg, Xn);
   235d4:	aa14      	add	r2, sp, #80	; 0x50
   235d6:	4628      	mov	r0, r5
   235d8:	f000 ffe7 	bl	245aa <bt_encrypt_be>
			if (err) {
   235dc:	2800      	cmp	r0, #0
   235de:	d0b6      	beq.n	2354e <bt_mesh_ccm_decrypt+0x1fc>
   235e0:	e75e      	b.n	234a0 <bt_mesh_ccm_decrypt+0x14e>
		return -EINVAL;
   235e2:	f06f 0015 	mvn.w	r0, #21
   235e6:	e75b      	b.n	234a0 <bt_mesh_ccm_decrypt+0x14e>

000235e8 <bt_mesh_aes_cmac>:
{
   235e8:	b570      	push	{r4, r5, r6, lr}
   235ea:	b0c2      	sub	sp, #264	; 0x108
   235ec:	460d      	mov	r5, r1
   235ee:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   235f0:	4601      	mov	r1, r0
   235f2:	aa16      	add	r2, sp, #88	; 0x58
   235f4:	4668      	mov	r0, sp
{
   235f6:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   235f8:	f7fd f9c7 	bl	2098a <tc_cmac_setup>
   235fc:	b130      	cbz	r0, 2360c <bt_mesh_aes_cmac+0x24>
   235fe:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   23600:	b944      	cbnz	r4, 23614 <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   23602:	4669      	mov	r1, sp
   23604:	4630      	mov	r0, r6
   23606:	f7fd fa56 	bl	20ab6 <tc_cmac_final>
   2360a:	b968      	cbnz	r0, 23628 <bt_mesh_aes_cmac+0x40>
		return -EIO;
   2360c:	f06f 0004 	mvn.w	r0, #4
}
   23610:	b042      	add	sp, #264	; 0x108
   23612:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   23614:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   23618:	4668      	mov	r0, sp
   2361a:	f7fd f9e1 	bl	209e0 <tc_cmac_update>
   2361e:	3508      	adds	r5, #8
   23620:	2800      	cmp	r0, #0
   23622:	d0f3      	beq.n	2360c <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   23624:	3c01      	subs	r4, #1
   23626:	e7eb      	b.n	23600 <bt_mesh_aes_cmac+0x18>
	return 0;
   23628:	4620      	mov	r0, r4
   2362a:	e7f1      	b.n	23610 <bt_mesh_aes_cmac+0x28>

0002362c <bt_mesh_aes_cmac_one>:
{
   2362c:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   2362e:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   23632:	2201      	movs	r2, #1
   23634:	4669      	mov	r1, sp
   23636:	f7ff ffd7 	bl	235e8 <bt_mesh_aes_cmac>
}
   2363a:	b003      	add	sp, #12
   2363c:	f85d fb04 	ldr.w	pc, [sp], #4

00023640 <bt_mesh_s1>:
{
   23640:	b530      	push	{r4, r5, lr}
   23642:	b085      	sub	sp, #20
   23644:	4604      	mov	r4, r0
   23646:	460d      	mov	r5, r1
	const u8_t zero[16] = { 0 };
   23648:	2210      	movs	r2, #16
   2364a:	2100      	movs	r1, #0
   2364c:	4668      	mov	r0, sp
   2364e:	f7fe fc44 	bl	21eda <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   23652:	4620      	mov	r0, r4
   23654:	f7fe fbdd 	bl	21e12 <strlen>
   23658:	462b      	mov	r3, r5
   2365a:	4602      	mov	r2, r0
   2365c:	4621      	mov	r1, r4
   2365e:	4668      	mov	r0, sp
   23660:	f7ff ffe4 	bl	2362c <bt_mesh_aes_cmac_one>
}
   23664:	3000      	adds	r0, #0
   23666:	bf18      	it	ne
   23668:	2001      	movne	r0, #1
   2366a:	b005      	add	sp, #20
   2366c:	bd30      	pop	{r4, r5, pc}

0002366e <bt_mesh_k1>:
{
   2366e:	b570      	push	{r4, r5, r6, lr}
   23670:	9d04      	ldr	r5, [sp, #16]
   23672:	4616      	mov	r6, r2
   23674:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   23676:	460a      	mov	r2, r1
   23678:	462b      	mov	r3, r5
   2367a:	4601      	mov	r1, r0
   2367c:	4630      	mov	r0, r6
   2367e:	f7ff ffd5 	bl	2362c <bt_mesh_aes_cmac_one>
	if (err < 0) {
   23682:	2800      	cmp	r0, #0
   23684:	db0a      	blt.n	2369c <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   23686:	4620      	mov	r0, r4
   23688:	f7fe fbc3 	bl	21e12 <strlen>
   2368c:	462b      	mov	r3, r5
   2368e:	4602      	mov	r2, r0
   23690:	4621      	mov	r1, r4
   23692:	4628      	mov	r0, r5
}
   23694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   23698:	f7ff bfc8 	b.w	2362c <bt_mesh_aes_cmac_one>
}
   2369c:	bd70      	pop	{r4, r5, r6, pc}

0002369e <bt_mesh_net_obfuscate>:
{
   2369e:	b570      	push	{r4, r5, r6, lr}
   236a0:	b088      	sub	sp, #32
   236a2:	4604      	mov	r4, r0
   236a4:	460e      	mov	r6, r1
   236a6:	4615      	mov	r5, r2
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   236a8:	2100      	movs	r1, #0
   236aa:	2210      	movs	r2, #16
   236ac:	4668      	mov	r0, sp
   236ae:	f7fe fc14 	bl	21eda <memset>
	sys_put_be32(iv_index, &priv_rand[5]);
   236b2:	f10d 0105 	add.w	r1, sp, #5
   236b6:	4630      	mov	r0, r6
   236b8:	f7ff fd01 	bl	230be <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
   236bc:	2207      	movs	r2, #7
   236be:	18a1      	adds	r1, r4, r2
   236c0:	f10d 0009 	add.w	r0, sp, #9
   236c4:	f7fe fbdf 	bl	21e86 <memcpy>
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   236c8:	aa04      	add	r2, sp, #16
   236ca:	4669      	mov	r1, sp
   236cc:	4628      	mov	r0, r5
   236ce:	f000 ff6c 	bl	245aa <bt_encrypt_be>
	if (err) {
   236d2:	b958      	cbnz	r0, 236ec <bt_mesh_net_obfuscate+0x4e>
   236d4:	4623      	mov	r3, r4
   236d6:	aa04      	add	r2, sp, #16
   236d8:	3406      	adds	r4, #6
		pdu[1 + i] ^= tmp[i];
   236da:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   236de:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
   236e2:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
   236e4:	ea81 0105 	eor.w	r1, r1, r5
   236e8:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
   236ea:	d1f6      	bne.n	236da <bt_mesh_net_obfuscate+0x3c>
}
   236ec:	b008      	add	sp, #32
   236ee:	bd70      	pop	{r4, r5, r6, pc}

000236f0 <bt_mesh_net_encrypt>:
{
   236f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   236f4:	460c      	mov	r4, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
   236f6:	6809      	ldr	r1, [r1, #0]
   236f8:	f891 9001 	ldrb.w	r9, [r1, #1]
   236fc:	f891 8002 	ldrb.w	r8, [r1, #2]
   23700:	f891 e003 	ldrb.w	lr, [r1, #3]
   23704:	f891 c004 	ldrb.w	ip, [r1, #4]
   23708:	794f      	ldrb	r7, [r1, #5]
   2370a:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   2370e:	4605      	mov	r5, r0
   23710:	b089      	sub	sp, #36	; 0x24
   23712:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
   23714:	bf14      	ite	ne
   23716:	2608      	movne	r6, #8
   23718:	2604      	moveq	r6, #4
	if (proxy) {
   2371a:	798a      	ldrb	r2, [r1, #6]
   2371c:	b363      	cbz	r3, 23778 <bt_mesh_net_encrypt+0x88>
	nonce[0] = 0x03;
   2371e:	2303      	movs	r3, #3
   23720:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   23724:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   23728:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   2372c:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   23730:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   23734:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   23738:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   2373a:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   2373e:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   23742:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   23746:	f7ff fcba 	bl	230be <sys_put_be32>
	err = bt_mesh_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7,
   2374a:	6822      	ldr	r2, [r4, #0]
   2374c:	88a3      	ldrh	r3, [r4, #4]
   2374e:	3207      	adds	r2, #7
   23750:	2100      	movs	r1, #0
   23752:	e9cd 1100 	strd	r1, r1, [sp]
   23756:	4628      	mov	r0, r5
   23758:	e9cd 2602 	strd	r2, r6, [sp, #8]
   2375c:	3b07      	subs	r3, #7
   2375e:	a904      	add	r1, sp, #16
   23760:	f7ff fcb6 	bl	230d0 <bt_mesh_ccm_encrypt>
	if (!err) {
   23764:	4605      	mov	r5, r0
   23766:	b918      	cbnz	r0, 23770 <bt_mesh_net_encrypt+0x80>
		net_buf_simple_add(buf, mic_len);
   23768:	4631      	mov	r1, r6
   2376a:	4620      	mov	r0, r4
   2376c:	f001 faae 	bl	24ccc <net_buf_simple_add>
}
   23770:	4628      	mov	r0, r5
   23772:	b009      	add	sp, #36	; 0x24
   23774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   23778:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2377c:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   23780:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   23784:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   23788:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2378c:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   23790:	f88d 2016 	strb.w	r2, [sp, #22]
   23794:	e7d1      	b.n	2373a <bt_mesh_net_encrypt+0x4a>

00023796 <bt_mesh_net_decrypt>:
{
   23796:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2379a:	460e      	mov	r6, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
   2379c:	6809      	ldr	r1, [r1, #0]
   2379e:	f891 9001 	ldrb.w	r9, [r1, #1]
   237a2:	f891 8002 	ldrb.w	r8, [r1, #2]
   237a6:	f891 e003 	ldrb.w	lr, [r1, #3]
   237aa:	f891 c004 	ldrb.w	ip, [r1, #4]
   237ae:	794f      	ldrb	r7, [r1, #5]
   237b0:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   237b4:	4605      	mov	r5, r0
   237b6:	b089      	sub	sp, #36	; 0x24
   237b8:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
   237ba:	bf14      	ite	ne
   237bc:	2408      	movne	r4, #8
   237be:	2404      	moveq	r4, #4
	if (proxy) {
   237c0:	798a      	ldrb	r2, [r1, #6]
   237c2:	b343      	cbz	r3, 23816 <bt_mesh_net_decrypt+0x80>
	nonce[0] = 0x03;
   237c4:	2303      	movs	r3, #3
   237c6:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   237ca:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   237ce:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   237d2:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   237d6:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   237da:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   237de:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   237e0:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   237e4:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   237e8:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   237ec:	f7ff fc67 	bl	230be <sys_put_be32>
	buf->len -= mic_len;
   237f0:	88b3      	ldrh	r3, [r6, #4]
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   237f2:	6832      	ldr	r2, [r6, #0]
	buf->len -= mic_len;
   237f4:	1b1b      	subs	r3, r3, r4
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   237f6:	3207      	adds	r2, #7
	buf->len -= mic_len;
   237f8:	b29b      	uxth	r3, r3
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   237fa:	2100      	movs	r1, #0
	buf->len -= mic_len;
   237fc:	80b3      	strh	r3, [r6, #4]
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   237fe:	e9cd 1100 	strd	r1, r1, [sp]
   23802:	e9cd 2402 	strd	r2, r4, [sp, #8]
   23806:	3b07      	subs	r3, #7
   23808:	a904      	add	r1, sp, #16
   2380a:	4628      	mov	r0, r5
   2380c:	f7ff fda1 	bl	23352 <bt_mesh_ccm_decrypt>
}
   23810:	b009      	add	sp, #36	; 0x24
   23812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   23816:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   2381a:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   2381e:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   23822:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   23826:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   2382a:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   2382e:	f88d 2016 	strb.w	r2, [sp, #22]
   23832:	e7d5      	b.n	237e0 <bt_mesh_net_decrypt+0x4a>

00023834 <bt_mesh_app_encrypt>:
{
   23834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23838:	b089      	sub	sp, #36	; 0x24
   2383a:	4681      	mov	r9, r0
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   2383c:	9813      	ldr	r0, [sp, #76]	; 0x4c
{
   2383e:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
   23842:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
   23846:	9d10      	ldr	r5, [sp, #64]	; 0x40
	if (dev_key) {
   23848:	2900      	cmp	r1, #0
{
   2384a:	461c      	mov	r4, r3
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   2384c:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
		nonce[0] = 0x01;
   23850:	bf14      	ite	ne
   23852:	2302      	movne	r3, #2
   23854:	2301      	moveq	r3, #1
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   23856:	f10d 0111 	add.w	r1, sp, #17
{
   2385a:	4616      	mov	r6, r2
   2385c:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   23860:	f7ff fc2d 	bl	230be <sys_put_be32>
   23864:	ea4f 2318 	mov.w	r3, r8, lsr #8
   23868:	f88d 3015 	strb.w	r3, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
   2386c:	f10d 0119 	add.w	r1, sp, #25
   23870:	0a3b      	lsrs	r3, r7, #8
   23872:	9814      	ldr	r0, [sp, #80]	; 0x50
   23874:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
   23878:	f88d 8016 	strb.w	r8, [sp, #22]
   2387c:	f88d 7018 	strb.w	r7, [sp, #24]
   23880:	f7ff fc1d 	bl	230be <sys_put_be32>
	err = bt_mesh_ccm_encrypt(key, nonce, buf->data, buf->len, ad,
   23884:	2d00      	cmp	r5, #0
   23886:	bf14      	ite	ne
   23888:	2310      	movne	r3, #16
   2388a:	2300      	moveq	r3, #0
   2388c:	6822      	ldr	r2, [r4, #0]
   2388e:	2e00      	cmp	r6, #0
   23890:	bf14      	ite	ne
   23892:	2608      	movne	r6, #8
   23894:	2604      	moveq	r6, #4
   23896:	e9cd 5300 	strd	r5, r3, [sp]
   2389a:	e9cd 2602 	strd	r2, r6, [sp, #8]
   2389e:	88a3      	ldrh	r3, [r4, #4]
   238a0:	a904      	add	r1, sp, #16
   238a2:	4648      	mov	r0, r9
   238a4:	f7ff fc14 	bl	230d0 <bt_mesh_ccm_encrypt>
	if (!err) {
   238a8:	4605      	mov	r5, r0
   238aa:	b918      	cbnz	r0, 238b4 <bt_mesh_app_encrypt+0x80>
		net_buf_simple_add(buf, APP_MIC_LEN(aszmic));
   238ac:	4631      	mov	r1, r6
   238ae:	4620      	mov	r0, r4
   238b0:	f001 fa0c 	bl	24ccc <net_buf_simple_add>
}
   238b4:	4628      	mov	r0, r5
   238b6:	b009      	add	sp, #36	; 0x24
   238b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000238bc <bt_mesh_app_decrypt>:
{
   238bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   238c0:	b088      	sub	sp, #32
   238c2:	4682      	mov	sl, r0
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   238c4:	9814      	ldr	r0, [sp, #80]	; 0x50
{
   238c6:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
   238ca:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
	if (dev_key) {
   238ce:	2900      	cmp	r1, #0
{
   238d0:	461c      	mov	r4, r3
   238d2:	e9dd 6510 	ldrd	r6, r5, [sp, #64]	; 0x40
		nonce[0] = 0x01;
   238d6:	bf14      	ite	ne
   238d8:	2302      	movne	r3, #2
   238da:	2301      	moveq	r3, #1
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   238dc:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
   238e0:	f10d 0111 	add.w	r1, sp, #17
{
   238e4:	4617      	mov	r7, r2
   238e6:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   238ea:	f7ff fbe8 	bl	230be <sys_put_be32>
	dst[0] = val >> 8;
   238ee:	ea4f 2319 	mov.w	r3, r9, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
   238f2:	f10d 0119 	add.w	r1, sp, #25
   238f6:	f88d 3015 	strb.w	r3, [sp, #21]
   238fa:	9815      	ldr	r0, [sp, #84]	; 0x54
	dst[1] = val;
   238fc:	f88d 9016 	strb.w	r9, [sp, #22]
	dst[0] = val >> 8;
   23900:	ea4f 2318 	mov.w	r3, r8, lsr #8
   23904:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
   23908:	f88d 8018 	strb.w	r8, [sp, #24]
   2390c:	f7ff fbd7 	bl	230be <sys_put_be32>
	err = bt_mesh_ccm_decrypt(key, nonce, buf->data, buf->len, ad,
   23910:	2d00      	cmp	r5, #0
   23912:	6832      	ldr	r2, [r6, #0]
   23914:	bf14      	ite	ne
   23916:	2310      	movne	r3, #16
   23918:	2300      	moveq	r3, #0
   2391a:	2f00      	cmp	r7, #0
   2391c:	bf14      	ite	ne
   2391e:	2108      	movne	r1, #8
   23920:	2104      	moveq	r1, #4
   23922:	e9cd 2102 	strd	r2, r1, [sp, #8]
   23926:	e9cd 5300 	strd	r5, r3, [sp]
   2392a:	6822      	ldr	r2, [r4, #0]
   2392c:	88a3      	ldrh	r3, [r4, #4]
   2392e:	a904      	add	r1, sp, #16
   23930:	4650      	mov	r0, sl
   23932:	f7ff fd0e 	bl	23352 <bt_mesh_ccm_decrypt>
	if (!err) {
   23936:	4605      	mov	r5, r0
   23938:	b918      	cbnz	r0, 23942 <bt_mesh_app_decrypt+0x86>
		net_buf_simple_add(out, buf->len);
   2393a:	88a1      	ldrh	r1, [r4, #4]
   2393c:	4630      	mov	r0, r6
   2393e:	f001 f9c5 	bl	24ccc <net_buf_simple_add>
}
   23942:	4628      	mov	r0, r5
   23944:	b008      	add	sp, #32
   23946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002394a <bt_mesh_prov_conf_salt>:
{
   2394a:	b530      	push	{r4, r5, lr}
   2394c:	b085      	sub	sp, #20
   2394e:	4604      	mov	r4, r0
   23950:	460d      	mov	r5, r1
	const u8_t conf_salt_key[16] = { 0 };
   23952:	2210      	movs	r2, #16
   23954:	2100      	movs	r1, #0
   23956:	4668      	mov	r0, sp
   23958:	f7fe fabf 	bl	21eda <memset>
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   2395c:	462b      	mov	r3, r5
   2395e:	2291      	movs	r2, #145	; 0x91
   23960:	4621      	mov	r1, r4
   23962:	4668      	mov	r0, sp
   23964:	f7ff fe62 	bl	2362c <bt_mesh_aes_cmac_one>
}
   23968:	b005      	add	sp, #20
   2396a:	bd30      	pop	{r4, r5, pc}

0002396c <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const u8_t conf_key[16], const u8_t rand[16],
		      const u8_t auth[16], u8_t conf[16])
{
   2396c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   2396e:	9100      	str	r1, [sp, #0]
   23970:	2110      	movs	r1, #16
   23972:	e9cd 1201 	strd	r1, r2, [sp, #4]
   23976:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   23978:	2202      	movs	r2, #2
   2397a:	4669      	mov	r1, sp
   2397c:	f7ff fe34 	bl	235e8 <bt_mesh_aes_cmac>
}
   23980:	b005      	add	sp, #20
   23982:	f85d fb04 	ldr.w	pc, [sp], #4

00023986 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const u8_t key[16], u8_t nonce[13],
			 const u8_t data[25 + 8], u8_t out[25])
{
   23986:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_mesh_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   23988:	2408      	movs	r4, #8
   2398a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2398e:	2300      	movs	r3, #0
   23990:	e9cd 3300 	strd	r3, r3, [sp]
   23994:	2319      	movs	r3, #25
   23996:	f7ff fcdc 	bl	23352 <bt_mesh_ccm_decrypt>
}
   2399a:	b004      	add	sp, #16
   2399c:	bd10      	pop	{r4, pc}

0002399e <bt_mesh_beacon_auth>:

int bt_mesh_beacon_auth(const u8_t beacon_key[16], u8_t flags,
			const u8_t net_id[8], u32_t iv_index,
			u8_t auth[8])
{
   2399e:	b530      	push	{r4, r5, lr}
   239a0:	b089      	sub	sp, #36	; 0x24
   239a2:	4604      	mov	r4, r0
   239a4:	4610      	mov	r0, r2
   239a6:	461d      	mov	r5, r3
	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
	memcpy(&msg[1], net_id, 8);
   239a8:	2208      	movs	r2, #8
	msg[0] = flags;
   239aa:	f88d 1000 	strb.w	r1, [sp]
	memcpy(&msg[1], net_id, 8);
   239ae:	4601      	mov	r1, r0
   239b0:	f10d 0001 	add.w	r0, sp, #1
   239b4:	f7fe fa67 	bl	21e86 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   239b8:	f10d 0109 	add.w	r1, sp, #9
   239bc:	4628      	mov	r0, r5
   239be:	f7ff fb7e 	bl	230be <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   239c2:	4620      	mov	r0, r4
   239c4:	ab04      	add	r3, sp, #16
   239c6:	220d      	movs	r2, #13
   239c8:	4669      	mov	r1, sp
   239ca:	f7ff fe2f 	bl	2362c <bt_mesh_aes_cmac_one>
	if (!err) {
   239ce:	4604      	mov	r4, r0
   239d0:	b920      	cbnz	r0, 239dc <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   239d2:	2208      	movs	r2, #8
   239d4:	a904      	add	r1, sp, #16
   239d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   239d8:	f7fe fa55 	bl	21e86 <memcpy>
	}

	return err;
}
   239dc:	4620      	mov	r0, r4
   239de:	b009      	add	sp, #36	; 0x24
   239e0:	bd30      	pop	{r4, r5, pc}

000239e2 <bt_mesh_model_find_group>:
		if (mod->groups[i] == addr) {
   239e2:	89c3      	ldrh	r3, [r0, #14]
   239e4:	428b      	cmp	r3, r1
   239e6:	d007      	beq.n	239f8 <bt_mesh_model_find_group+0x16>
   239e8:	8a03      	ldrh	r3, [r0, #16]
   239ea:	428b      	cmp	r3, r1
   239ec:	d106      	bne.n	239fc <bt_mesh_model_find_group+0x1a>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   239ee:	2301      	movs	r3, #1
			return &mod->groups[i];
   239f0:	3307      	adds	r3, #7
   239f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   239f6:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   239f8:	2300      	movs	r3, #0
   239fa:	e7f9      	b.n	239f0 <bt_mesh_model_find_group+0xe>
	return NULL;
   239fc:	2000      	movs	r0, #0
}
   239fe:	4770      	bx	lr

00023a00 <bt_mesh_fixed_group_match>:
{
   23a00:	b508      	push	{r3, lr}
	switch (addr) {
   23a02:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   23a06:	4298      	cmp	r0, r3
   23a08:	d00a      	beq.n	23a20 <bt_mesh_fixed_group_match+0x20>
   23a0a:	d80c      	bhi.n	23a26 <bt_mesh_fixed_group_match+0x26>
   23a0c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   23a10:	4298      	cmp	r0, r3
   23a12:	d10a      	bne.n	23a2a <bt_mesh_fixed_group_match+0x2a>
		return (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED);
   23a14:	f7ee f83c 	bl	11a90 <bt_mesh_friend_get>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   23a18:	1e43      	subs	r3, r0, #1
   23a1a:	4258      	negs	r0, r3
   23a1c:	4158      	adcs	r0, r3
}
   23a1e:	bd08      	pop	{r3, pc}
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   23a20:	f7ee f82c 	bl	11a7c <bt_mesh_relay_get>
   23a24:	e7f8      	b.n	23a18 <bt_mesh_fixed_group_match+0x18>
		return true;
   23a26:	2001      	movs	r0, #1
   23a28:	e7f9      	b.n	23a1e <bt_mesh_fixed_group_match+0x1e>
		return false;
   23a2a:	2000      	movs	r0, #0
   23a2c:	e7f7      	b.n	23a1e <bt_mesh_fixed_group_match+0x1e>

00023a2e <bt_mesh_model_msg_init>:
{
   23a2e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   23a30:	6883      	ldr	r3, [r0, #8]
   23a32:	4604      	mov	r4, r0
   23a34:	b913      	cbnz	r3, 23a3c <bt_mesh_model_msg_init+0xe>
		buf->__buf = (u8_t *)buf + sizeof(*buf);
   23a36:	f100 030c 	add.w	r3, r0, #12
   23a3a:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   23a3c:	68a3      	ldr	r3, [r4, #8]
   23a3e:	6023      	str	r3, [r4, #0]
	if (opcode < 0x100) {
   23a40:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0;
   23a42:	f04f 0300 	mov.w	r3, #0
   23a46:	80a3      	strh	r3, [r4, #4]
   23a48:	d805      	bhi.n	23a56 <bt_mesh_model_msg_init+0x28>
		net_buf_simple_add_u8(msg, opcode);
   23a4a:	4620      	mov	r0, r4
   23a4c:	b2c9      	uxtb	r1, r1
}
   23a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   23a52:	f001 b94a 	b.w	24cea <net_buf_simple_add_u8>
	if (opcode < 0x10000) {
   23a56:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   23a5a:	b28d      	uxth	r5, r1
   23a5c:	d205      	bcs.n	23a6a <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   23a5e:	4629      	mov	r1, r5
   23a60:	4620      	mov	r0, r4
}
   23a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   23a66:	f001 b957 	b.w	24d18 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   23a6a:	f3c1 4107 	ubfx	r1, r1, #16, #8
   23a6e:	4620      	mov	r0, r4
   23a70:	f001 f93b 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, opcode & 0xffff);
   23a74:	4629      	mov	r1, r5
   23a76:	4620      	mov	r0, r4
}
   23a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_le16(msg, opcode & 0xffff);
   23a7c:	f001 b93d 	b.w	24cfa <net_buf_simple_add_le16>

00023a80 <bt_mesh_model_send>:
{
   23a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a84:	b086      	sub	sp, #24
   23a86:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   23a88:	2400      	movs	r4, #0
		.sub = bt_mesh_subnet_get(ctx->net_idx),
   23a8a:	8808      	ldrh	r0, [r1, #0]
	struct bt_mesh_net_tx tx = {
   23a8c:	9405      	str	r4, [sp, #20]
{
   23a8e:	460e      	mov	r6, r1
   23a90:	4617      	mov	r7, r2
   23a92:	4698      	mov	r8, r3
	struct bt_mesh_net_tx tx = {
   23a94:	e9cd 4403 	strd	r4, r4, [sp, #12]
		.sub = bt_mesh_subnet_get(ctx->net_idx),
   23a98:	f7e8 f882 	bl	bba0 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   23a9c:	e9cd 0603 	strd	r0, r6, [sp, #12]
		.src = bt_mesh_model_elem(model)->addr,
   23aa0:	4628      	mov	r0, r5
   23aa2:	f7eb fc81 	bl	f3a8 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   23aa6:	8803      	ldrh	r3, [r0, #0]
   23aa8:	f8ad 3014 	strh.w	r3, [sp, #20]
		.xmit = bt_mesh_net_transmit_get(),
   23aac:	f7ed ff5e 	bl	1196c <bt_mesh_net_transmit_get>
	return model_send(model, &tx, false, msg, cb, cb_data);
   23ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	struct bt_mesh_net_tx tx = {
   23ab2:	f88d 0016 	strb.w	r0, [sp, #22]
	return model_send(model, &tx, false, msg, cb, cb_data);
   23ab6:	e9cd 8300 	strd	r8, r3, [sp]
   23aba:	4622      	mov	r2, r4
   23abc:	463b      	mov	r3, r7
   23abe:	a903      	add	r1, sp, #12
   23ac0:	4628      	mov	r0, r5
   23ac2:	f7eb fb2d 	bl	f120 <model_send>
}
   23ac6:	b006      	add	sp, #24
   23ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023acc <bt_mesh_model_find_vnd>:
{
   23acc:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   23ace:	7947      	ldrb	r7, [r0, #5]
{
   23ad0:	4605      	mov	r5, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   23ad2:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
   23ad4:	f04f 0c1c 	mov.w	ip, #28
	for (i = 0U; i < elem->vnd_model_count; i++) {
   23ad8:	b2d8      	uxtb	r0, r3
   23ada:	4287      	cmp	r7, r0
   23adc:	d801      	bhi.n	23ae2 <bt_mesh_model_find_vnd+0x16>
	return NULL;
   23ade:	2000      	movs	r0, #0
}
   23ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   23ae2:	fb0c f403 	mul.w	r4, ip, r3
   23ae6:	68ee      	ldr	r6, [r5, #12]
   23ae8:	1930      	adds	r0, r6, r4
   23aea:	5b34      	ldrh	r4, [r6, r4]
   23aec:	428c      	cmp	r4, r1
   23aee:	d102      	bne.n	23af6 <bt_mesh_model_find_vnd+0x2a>
   23af0:	8844      	ldrh	r4, [r0, #2]
   23af2:	4294      	cmp	r4, r2
   23af4:	d0f4      	beq.n	23ae0 <bt_mesh_model_find_vnd+0x14>
   23af6:	3301      	adds	r3, #1
   23af8:	e7ee      	b.n	23ad8 <bt_mesh_model_find_vnd+0xc>

00023afa <bt_mesh_model_find>:
{
   23afa:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->model_count; i++) {
   23afc:	7906      	ldrb	r6, [r0, #4]
   23afe:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   23b00:	271c      	movs	r7, #28
	for (i = 0U; i < elem->model_count; i++) {
   23b02:	b2da      	uxtb	r2, r3
   23b04:	4296      	cmp	r6, r2
   23b06:	d801      	bhi.n	23b0c <bt_mesh_model_find+0x12>
	return NULL;
   23b08:	2200      	movs	r2, #0
   23b0a:	e008      	b.n	23b1e <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   23b0c:	fb07 f403 	mul.w	r4, r7, r3
   23b10:	6885      	ldr	r5, [r0, #8]
   23b12:	192a      	adds	r2, r5, r4
   23b14:	5b2c      	ldrh	r4, [r5, r4]
   23b16:	428c      	cmp	r4, r1
   23b18:	f103 0301 	add.w	r3, r3, #1
   23b1c:	d1f1      	bne.n	23b02 <bt_mesh_model_find+0x8>
}
   23b1e:	4610      	mov	r0, r2
   23b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023b22 <key_idx_pack>:

#include <misc/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				u16_t idx1, u16_t idx2)
{
   23b22:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   23b24:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   23b28:	4605      	mov	r5, r0
   23b2a:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   23b2c:	b289      	uxth	r1, r1
   23b2e:	f001 f8e4 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   23b32:	f3c4 1107 	ubfx	r1, r4, #4, #8
   23b36:	4628      	mov	r0, r5
}
   23b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   23b3c:	f001 b8d5 	b.w	24cea <net_buf_simple_add_u8>

00023b40 <heartbeat_pub_get>:
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
   23b40:	2300      	movs	r3, #0
   23b42:	461a      	mov	r2, r3
   23b44:	f7ec b89c 	b.w	fc80 <hb_pub_send_status>

00023b48 <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  u16_t *idx1, u16_t *idx2)
{
   23b48:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   23b4a:	6804      	ldr	r4, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   23b4c:	7865      	ldrb	r5, [r4, #1]
   23b4e:	7823      	ldrb	r3, [r4, #0]
   23b50:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   23b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
   23b58:	800b      	strh	r3, [r1, #0]
   23b5a:	78a1      	ldrb	r1, [r4, #2]
   23b5c:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   23b5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   23b62:	091b      	lsrs	r3, r3, #4
   23b64:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   23b66:	2103      	movs	r1, #3
}
   23b68:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
   23b6a:	f001 b91c 	b.w	24da6 <net_buf_simple_pull>

00023b6e <mod_unbind.part.1>:
static u8_t mod_unbind(struct bt_mesh_model *model, u16_t key_idx, bool store)
   23b6e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (model->keys[i] != key_idx) {
   23b70:	8983      	ldrh	r3, [r0, #12]
   23b72:	428b      	cmp	r3, r1
static u8_t mod_unbind(struct bt_mesh_model *model, u16_t key_idx, bool store)
   23b74:	4604      	mov	r4, r0
   23b76:	460e      	mov	r6, r1
   23b78:	4615      	mov	r5, r2
		if (model->keys[i] != key_idx) {
   23b7a:	d114      	bne.n	23ba6 <mod_unbind.part.1+0x38>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   23b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23b80:	8183      	strh	r3, [r0, #12]
		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   23b82:	b10a      	cbz	r2, 23b88 <mod_unbind.part.1+0x1a>
			bt_mesh_store_mod_bind(model);
   23b84:	f000 fa1d 	bl	23fc2 <bt_mesh_store_mod_bind>
		if (model->pub && model->pub->key == key_idx) {
   23b88:	68a3      	ldr	r3, [r4, #8]
   23b8a:	b163      	cbz	r3, 23ba6 <mod_unbind.part.1+0x38>
   23b8c:	88db      	ldrh	r3, [r3, #6]
   23b8e:	42b3      	cmp	r3, r6
   23b90:	d109      	bne.n	23ba6 <mod_unbind.part.1+0x38>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   23b92:	2300      	movs	r3, #0
   23b94:	9503      	str	r5, [sp, #12]
   23b96:	e9cd 3301 	strd	r3, r3, [sp, #4]
   23b9a:	9300      	str	r3, [sp, #0]
   23b9c:	461a      	mov	r2, r3
   23b9e:	4619      	mov	r1, r3
   23ba0:	4620      	mov	r0, r4
   23ba2:	f7eb ff41 	bl	fa28 <_mod_pub_set>
}
   23ba6:	2000      	movs	r0, #0
   23ba8:	b004      	add	sp, #16
   23baa:	bd70      	pop	{r4, r5, r6, pc}

00023bac <friend_get>:
	send_friend_status(model, ctx);
   23bac:	f7ec bbd8 	b.w	10360 <send_friend_status>

00023bb0 <create_mod_app_status.isra.7>:
static void create_mod_app_status(struct net_buf_simple *msg,
   23bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23bb4:	f89d 9020 	ldrb.w	r9, [sp, #32]
   23bb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   23bba:	4604      	mov	r4, r0
   23bbc:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   23bbe:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   23bc2:	4690      	mov	r8, r2
   23bc4:	461f      	mov	r7, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   23bc6:	f7ff ff32 	bl	23a2e <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   23bca:	4649      	mov	r1, r9
   23bcc:	4620      	mov	r0, r4
   23bce:	f001 f88c 	bl	24cea <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   23bd2:	4641      	mov	r1, r8
   23bd4:	4620      	mov	r0, r4
   23bd6:	f001 f890 	bl	24cfa <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   23bda:	4639      	mov	r1, r7
   23bdc:	4620      	mov	r0, r4
   23bde:	f001 f88c 	bl	24cfa <net_buf_simple_add_le16>
	if (vnd) {
   23be2:	b14e      	cbz	r6, 23bf8 <create_mod_app_status.isra.7+0x48>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   23be4:	2104      	movs	r1, #4
   23be6:	4620      	mov	r0, r4
   23be8:	f001 f870 	bl	24ccc <net_buf_simple_add>
   23bec:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   23bee:	4629      	mov	r1, r5
}
   23bf0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   23bf4:	f7fe b947 	b.w	21e86 <memcpy>
   23bf8:	2102      	movs	r1, #2
   23bfa:	4620      	mov	r0, r4
   23bfc:	f001 f866 	bl	24ccc <net_buf_simple_add>
   23c00:	2202      	movs	r2, #2
   23c02:	e7f4      	b.n	23bee <create_mod_app_status.isra.7+0x3e>

00023c04 <get_model>:
{
   23c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   23c06:	888b      	ldrh	r3, [r1, #4]
   23c08:	2b03      	cmp	r3, #3
{
   23c0a:	4605      	mov	r5, r0
   23c0c:	460c      	mov	r4, r1
   23c0e:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   23c10:	4608      	mov	r0, r1
	if (buf->len < 4) {
   23c12:	d809      	bhi.n	23c28 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   23c14:	f001 f8df 	bl	24dd6 <net_buf_simple_pull_le16>
		*vnd = false;
   23c18:	2300      	movs	r3, #0
   23c1a:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   23c1c:	4601      	mov	r1, r0
   23c1e:	4628      	mov	r0, r5
}
   23c20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   23c24:	f7ff bf69 	b.w	23afa <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   23c28:	f001 f8d5 	bl	24dd6 <net_buf_simple_pull_le16>
   23c2c:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   23c2e:	4620      	mov	r0, r4
   23c30:	f001 f8d1 	bl	24dd6 <net_buf_simple_pull_le16>
		*vnd = true;
   23c34:	2301      	movs	r3, #1
   23c36:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   23c38:	4602      	mov	r2, r0
   23c3a:	4639      	mov	r1, r7
   23c3c:	4628      	mov	r0, r5
}
   23c3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   23c42:	f7ff bf43 	b.w	23acc <bt_mesh_model_find_vnd>

00023c46 <mod_pub_get>:
{
   23c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c4a:	4605      	mov	r5, r0
   23c4c:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   23c4e:	4610      	mov	r0, r2
{
   23c50:	460e      	mov	r6, r1
   23c52:	4690      	mov	r8, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   23c54:	f001 f8bf 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23c58:	b203      	sxth	r3, r0
   23c5a:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   23c5c:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23c5e:	dc04      	bgt.n	23c6a <mod_pub_get+0x24>
   23c60:	f7ed f9c2 	bl	10fe8 <mod_pub_get.part.11>
}
   23c64:	b006      	add	sp, #24
   23c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   23c6a:	f8d8 7000 	ldr.w	r7, [r8]
	elem = bt_mesh_elem_find(elem_addr);
   23c6e:	f7eb fc33 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   23c72:	4602      	mov	r2, r0
   23c74:	b948      	cbnz	r0, 23c8a <mod_pub_get+0x44>
		vnd = (buf->len == 4);
   23c76:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   23c7a:	1f19      	subs	r1, r3, #4
   23c7c:	424b      	negs	r3, r1
   23c7e:	414b      	adcs	r3, r1
   23c80:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   23c84:	2101      	movs	r1, #1
	u16_t elem_addr, pub_addr = 0U;
   23c86:	4613      	mov	r3, r2
   23c88:	e00a      	b.n	23ca0 <mod_pub_get+0x5a>
	mod = get_model(elem, buf, &vnd);
   23c8a:	f10d 0217 	add.w	r2, sp, #23
   23c8e:	4641      	mov	r1, r8
   23c90:	f7ff ffb8 	bl	23c04 <get_model>
	if (!mod) {
   23c94:	4602      	mov	r2, r0
   23c96:	b180      	cbz	r0, 23cba <mod_pub_get+0x74>
	if (!mod->pub) {
   23c98:	6883      	ldr	r3, [r0, #8]
   23c9a:	b183      	cbz	r3, 23cbe <mod_pub_get+0x78>
	pub_addr = mod->pub->addr;
   23c9c:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   23c9e:	2100      	movs	r1, #0
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   23ca0:	3208      	adds	r2, #8
   23ca2:	9201      	str	r2, [sp, #4]
   23ca4:	f89d 2017 	ldrb.w	r2, [sp, #23]
   23ca8:	9200      	str	r2, [sp, #0]
   23caa:	e9cd 1702 	strd	r1, r7, [sp, #8]
   23cae:	4622      	mov	r2, r4
   23cb0:	4631      	mov	r1, r6
   23cb2:	4628      	mov	r0, r5
   23cb4:	f7ec fcd4 	bl	10660 <send_mod_pub_status.isra.9>
   23cb8:	e7d4      	b.n	23c64 <mod_pub_get+0x1e>
		status = STATUS_INVALID_MODEL;
   23cba:	2102      	movs	r1, #2
   23cbc:	e7e3      	b.n	23c86 <mod_pub_get+0x40>
		status = STATUS_NVAL_PUB_PARAM;
   23cbe:	2107      	movs	r1, #7
   23cc0:	e7ee      	b.n	23ca0 <mod_pub_get+0x5a>

00023cc2 <hb_pwr2.constprop.22>:
	if (!val) {
   23cc2:	b158      	cbz	r0, 23cdc <hb_pwr2.constprop.22+0x1a>
	} else if (val == 0xff || val == 0x11) {
   23cc4:	28ff      	cmp	r0, #255	; 0xff
   23cc6:	d007      	beq.n	23cd8 <hb_pwr2.constprop.22+0x16>
   23cc8:	2811      	cmp	r0, #17
   23cca:	d005      	beq.n	23cd8 <hb_pwr2.constprop.22+0x16>
		return (1 << (val - sub));
   23ccc:	2301      	movs	r3, #1
   23cce:	3801      	subs	r0, #1
   23cd0:	fa03 f000 	lsl.w	r0, r3, r0
   23cd4:	b280      	uxth	r0, r0
   23cd6:	4770      	bx	lr
		return 0xffff;
   23cd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   23cdc:	4770      	bx	lr

00023cde <_mod_unbind>:
{
   23cde:	b570      	push	{r4, r5, r6, lr}
   23ce0:	9d04      	ldr	r5, [sp, #16]
	mod_unbind(mod, data->app_idx, data->store);
   23ce2:	882c      	ldrh	r4, [r5, #0]
{
   23ce4:	4606      	mov	r6, r0
	if (!app_key_is_valid(key_idx)) {
   23ce6:	4620      	mov	r0, r4
   23ce8:	f7eb fe80 	bl	f9ec <app_key_is_valid>
   23cec:	b130      	cbz	r0, 23cfc <_mod_unbind+0x1e>
   23cee:	78aa      	ldrb	r2, [r5, #2]
   23cf0:	4621      	mov	r1, r4
   23cf2:	4630      	mov	r0, r6
}
   23cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23cf8:	f7ff bf39 	b.w	23b6e <mod_unbind.part.1>
   23cfc:	bd70      	pop	{r4, r5, r6, pc}

00023cfe <heartbeat_sub_get>:
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   23cfe:	f7ed bbe3 	b.w	114c8 <hb_sub_send_status.constprop.21>

00023d02 <hb_send>:
{
   23d02:	b530      	push	{r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   23d04:	6984      	ldr	r4, [r0, #24]
{
   23d06:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
   23d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23d0c:	f8ad 201a 	strh.w	r2, [sp, #26]
   23d10:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   23d12:	f8ad 201c 	strh.w	r2, [sp, #28]
   23d16:	2300      	movs	r3, #0
   23d18:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   23d1c:	f8cd 301e 	str.w	r3, [sp, #30]
{
   23d20:	4605      	mov	r5, r0
		.net_idx = cfg->hb_pub.net_idx,
   23d22:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
	struct bt_mesh_msg_ctx ctx = {
   23d24:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	struct bt_mesh_net_tx tx = {
   23d28:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   23d2c:	930b      	str	r3, [sp, #44]	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   23d2e:	f8ad 0018 	strh.w	r0, [sp, #24]
		.sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx),
   23d32:	f7e7 ff35 	bl	bba0 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   23d36:	ab06      	add	r3, sp, #24
   23d38:	9009      	str	r0, [sp, #36]	; 0x24
		.src = bt_mesh_model_elem(model)->addr,
   23d3a:	4628      	mov	r0, r5
	struct bt_mesh_net_tx tx = {
   23d3c:	930a      	str	r3, [sp, #40]	; 0x28
		.src = bt_mesh_model_elem(model)->addr,
   23d3e:	f7eb fb33 	bl	f3a8 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   23d42:	8803      	ldrh	r3, [r0, #0]
   23d44:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
   23d48:	f7ed fe10 	bl	1196c <bt_mesh_net_transmit_get>
	hb.init_ttl = cfg->hb_pub.ttl;
   23d4c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   23d50:	f88d 3014 	strb.w	r3, [sp, #20]
	struct bt_mesh_net_tx tx = {
   23d54:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
   23d58:	f7ed fe90 	bl	11a7c <bt_mesh_relay_get>
	u16_t feat = 0U;
   23d5c:	1e43      	subs	r3, r0, #1
   23d5e:	425a      	negs	r2, r3
   23d60:	415a      	adcs	r2, r3
	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   23d62:	f7ed ff85 	bl	11c70 <bt_mesh_gatt_proxy_get>
   23d66:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
   23d68:	bf08      	it	eq
   23d6a:	f042 0202 	orreq.w	r2, r2, #2
	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   23d6e:	f7ed fe8f 	bl	11a90 <bt_mesh_friend_get>
   23d72:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
   23d74:	bf08      	it	eq
   23d76:	f042 0204 	orreq.w	r2, r2, #4
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   23d7a:	2300      	movs	r3, #0
	hb.feat = sys_cpu_to_be16(feat);
   23d7c:	0212      	lsls	r2, r2, #8
   23d7e:	f8ad 2015 	strh.w	r2, [sp, #21]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   23d82:	e9cd 3301 	strd	r3, r3, [sp, #4]
   23d86:	9300      	str	r3, [sp, #0]
   23d88:	aa05      	add	r2, sp, #20
   23d8a:	2303      	movs	r3, #3
   23d8c:	210a      	movs	r1, #10
   23d8e:	a809      	add	r0, sp, #36	; 0x24
   23d90:	f7ea fb5c 	bl	e44c <bt_mesh_ctl_send>
}
   23d94:	b00d      	add	sp, #52	; 0x34
   23d96:	bd30      	pop	{r4, r5, pc}

00023d98 <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
   23d98:	f7ee b90c 	b.w	11fb4 <send_gatt_proxy_status>

00023d9c <mod_sub_del_all>:
{
   23d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23da0:	4606      	mov	r6, r0
   23da2:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   23da4:	4610      	mov	r0, r2
{
   23da6:	460f      	mov	r7, r1
   23da8:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   23daa:	f001 f814 	bl	24dd6 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23dae:	b203      	sxth	r3, r0
   23db0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   23db2:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   23db4:	dc04      	bgt.n	23dc0 <mod_sub_del_all+0x24>
   23db6:	f7ed f917 	bl	10fe8 <mod_pub_get.part.11>
}
   23dba:	b006      	add	sp, #24
   23dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   23dc0:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   23dc4:	f7eb fb88 	bl	f4d8 <bt_mesh_elem_find>
	if (!elem) {
   23dc8:	b990      	cbnz	r0, 23df0 <mod_sub_del_all+0x54>
		vnd = (buf->len == 4);
   23dca:	88a3      	ldrh	r3, [r4, #4]
   23dcc:	1f1a      	subs	r2, r3, #4
   23dce:	4253      	negs	r3, r2
   23dd0:	4153      	adcs	r3, r2
   23dd2:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   23dd6:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
   23dd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   23ddc:	e9cd 8301 	strd	r8, r3, [sp, #4]
   23de0:	2300      	movs	r3, #0
   23de2:	9300      	str	r3, [sp, #0]
   23de4:	4639      	mov	r1, r7
   23de6:	462b      	mov	r3, r5
   23de8:	4630      	mov	r0, r6
   23dea:	f7eb ffb3 	bl	fd54 <send_mod_sub_status>
   23dee:	e7e4      	b.n	23dba <mod_sub_del_all+0x1e>
	mod = get_model(elem, buf, &vnd);
   23df0:	4621      	mov	r1, r4
   23df2:	f10d 0217 	add.w	r2, sp, #23
   23df6:	f7ff ff05 	bl	23c04 <get_model>
	if (!mod) {
   23dfa:	4604      	mov	r4, r0
   23dfc:	b130      	cbz	r0, 23e0c <mod_sub_del_all+0x70>
	mod_sub_list_clear(mod);
   23dfe:	f7ee fa49 	bl	12294 <mod_sub_list_clear>
		bt_mesh_store_mod_sub(mod);
   23e02:	4620      	mov	r0, r4
   23e04:	f000 f8e4 	bl	23fd0 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   23e08:	2200      	movs	r2, #0
   23e0a:	e7e5      	b.n	23dd8 <mod_sub_del_all+0x3c>
		status = STATUS_INVALID_MODEL;
   23e0c:	2202      	movs	r2, #2
   23e0e:	e7e3      	b.n	23dd8 <mod_sub_del_all+0x3c>

00023e10 <mod_reset>:
{
   23e10:	b510      	push	{r4, lr}
   23e12:	4604      	mov	r4, r0
	mod_sub_list_clear(mod);
   23e14:	f7ee fa3e 	bl	12294 <mod_sub_list_clear>
		bt_mesh_store_mod_sub(mod);
   23e18:	4620      	mov	r0, r4
}
   23e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_store_mod_sub(mod);
   23e1e:	f000 b8d7 	b.w	23fd0 <bt_mesh_store_mod_sub>

00023e22 <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   23e22:	f850 3c04 	ldr.w	r3, [r0, #-4]
   23e26:	b123      	cbz	r3, 23e32 <attention_off+0x10>
   23e28:	695b      	ldr	r3, [r3, #20]
   23e2a:	b113      	cbz	r3, 23e32 <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   23e2c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   23e30:	4718      	bx	r3
}
   23e32:	4770      	bx	lr

00023e34 <health_fault_test_unrel>:
{
   23e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   23e38:	6987      	ldr	r7, [r0, #24]
{
   23e3a:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   23e3c:	4610      	mov	r0, r2
{
   23e3e:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   23e40:	f000 ffc1 	bl	24dc6 <net_buf_simple_pull_u8>
   23e44:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   23e46:	4628      	mov	r0, r5
   23e48:	f000 ffc5 	bl	24dd6 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   23e4c:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   23e4e:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   23e50:	b133      	cbz	r3, 23e60 <health_fault_test_unrel+0x2c>
   23e52:	68db      	ldr	r3, [r3, #12]
   23e54:	b123      	cbz	r3, 23e60 <health_fault_test_unrel+0x2c>
		srv->cb->fault_test(model, test_id, company_id);
   23e56:	4631      	mov	r1, r6
   23e58:	4620      	mov	r0, r4
}
   23e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		srv->cb->fault_test(model, test_id, company_id);
   23e5e:	4718      	bx	r3
}
   23e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023e64 <health_fault_clear_unrel>:
{
   23e64:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   23e66:	6985      	ldr	r5, [r0, #24]
{
   23e68:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   23e6a:	4610      	mov	r0, r2
   23e6c:	f000 ffb3 	bl	24dd6 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   23e70:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   23e72:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   23e74:	b12b      	cbz	r3, 23e82 <health_fault_clear_unrel+0x1e>
   23e76:	689b      	ldr	r3, [r3, #8]
   23e78:	b11b      	cbz	r3, 23e82 <health_fault_clear_unrel+0x1e>
		srv->cb->fault_clear(model, company_id);
   23e7a:	4620      	mov	r0, r4
}
   23e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		srv->cb->fault_clear(model, company_id);
   23e80:	4718      	bx	r3
}
   23e82:	bd70      	pop	{r4, r5, r6, pc}

00023e84 <health_period_get>:
	send_health_period_status(model, ctx);
   23e84:	f7ee bd2e 	b.w	128e4 <send_health_period_status>

00023e88 <health_period_set>:
{
   23e88:	b538      	push	{r3, r4, r5, lr}
   23e8a:	4604      	mov	r4, r0
   23e8c:	460d      	mov	r5, r1
	health_period_set_unrel(model, ctx, buf);
   23e8e:	f7ee fbd3 	bl	12638 <health_period_set_unrel>
	send_health_period_status(model, ctx);
   23e92:	4629      	mov	r1, r5
   23e94:	4620      	mov	r0, r4
}
   23e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_health_period_status(model, ctx);
   23e9a:	f7ee bd23 	b.w	128e4 <send_health_period_status>

00023e9e <attention_get>:
	send_attention_status(model, ctx);
   23e9e:	f7ee bd55 	b.w	1294c <send_attention_status>

00023ea2 <health_fault_clear>:
{
   23ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
   23ea4:	b08f      	sub	sp, #60	; 0x3c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   23ea6:	ab05      	add	r3, sp, #20
	struct bt_mesh_health_srv *srv = model->user_data;
   23ea8:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   23eaa:	9302      	str	r3, [sp, #8]
{
   23eac:	4604      	mov	r4, r0
   23eae:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   23eb0:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   23eb2:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   23eb6:	e9cd 1303 	strd	r1, r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   23eba:	f000 ff8c 	bl	24dd6 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   23ebe:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   23ec0:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
   23ec2:	b123      	cbz	r3, 23ece <health_fault_clear+0x2c>
   23ec4:	689b      	ldr	r3, [r3, #8]
   23ec6:	b113      	cbz	r3, 23ece <health_fault_clear+0x2c>
		srv->cb->fault_clear(model, company_id);
   23ec8:	4601      	mov	r1, r0
   23eca:	4620      	mov	r0, r4
   23ecc:	4798      	blx	r3
	health_get_registered(model, company_id, &sdu);
   23ece:	aa02      	add	r2, sp, #8
   23ed0:	4629      	mov	r1, r5
   23ed2:	4620      	mov	r0, r4
   23ed4:	f7ee fbd4 	bl	12680 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   23ed8:	2300      	movs	r3, #0
   23eda:	9300      	str	r3, [sp, #0]
   23edc:	aa02      	add	r2, sp, #8
   23ede:	4631      	mov	r1, r6
   23ee0:	4620      	mov	r0, r4
   23ee2:	f7ff fdcd 	bl	23a80 <bt_mesh_model_send>
   23ee6:	b108      	cbz	r0, 23eec <health_fault_clear+0x4a>
   23ee8:	f7ee fd70 	bl	129cc <health_fault_clear.part.2>
}
   23eec:	b00f      	add	sp, #60	; 0x3c
   23eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023ef0 <health_fault_get>:
{
   23ef0:	b530      	push	{r4, r5, lr}
   23ef2:	b08f      	sub	sp, #60	; 0x3c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   23ef4:	ab05      	add	r3, sp, #20
{
   23ef6:	4604      	mov	r4, r0
   23ef8:	460d      	mov	r5, r1
	company_id = net_buf_simple_pull_le16(buf);
   23efa:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   23efc:	f44f 1110 	mov.w	r1, #2359296	; 0x240000
   23f00:	e9cd 1303 	strd	r1, r3, [sp, #12]
   23f04:	9302      	str	r3, [sp, #8]
	company_id = net_buf_simple_pull_le16(buf);
   23f06:	f000 ff66 	bl	24dd6 <net_buf_simple_pull_le16>
	health_get_registered(model, company_id, &sdu);
   23f0a:	aa02      	add	r2, sp, #8
   23f0c:	4601      	mov	r1, r0
   23f0e:	4620      	mov	r0, r4
   23f10:	f7ee fbb6 	bl	12680 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   23f14:	2300      	movs	r3, #0
   23f16:	9300      	str	r3, [sp, #0]
   23f18:	aa02      	add	r2, sp, #8
   23f1a:	4629      	mov	r1, r5
   23f1c:	4620      	mov	r0, r4
   23f1e:	f7ff fdaf 	bl	23a80 <bt_mesh_model_send>
   23f22:	b108      	cbz	r0, 23f28 <health_fault_get+0x38>
   23f24:	f7ee fd52 	bl	129cc <health_fault_clear.part.2>
}
   23f28:	b00f      	add	sp, #60	; 0x3c
   23f2a:	bd30      	pop	{r4, r5, pc}

00023f2c <attention_set_unrel>:
{
   23f2c:	b510      	push	{r4, lr}
   23f2e:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   23f30:	4610      	mov	r0, r2
   23f32:	f000 ff48 	bl	24dc6 <net_buf_simple_pull_u8>
	bt_mesh_attention(model, time);
   23f36:	4601      	mov	r1, r0
   23f38:	4620      	mov	r0, r4
}
   23f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_attention(model, time);
   23f3e:	f7ee bd9d 	b.w	12a7c <bt_mesh_attention>

00023f42 <attention_set>:
{
   23f42:	b538      	push	{r3, r4, r5, lr}
   23f44:	4604      	mov	r4, r0
   23f46:	460d      	mov	r5, r1
	attention_set_unrel(model, ctx, buf);
   23f48:	f7ff fff0 	bl	23f2c <attention_set_unrel>
	send_attention_status(model, ctx);
   23f4c:	4629      	mov	r1, r5
   23f4e:	4620      	mov	r0, r4
}
   23f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_attention_status(model, ctx);
   23f54:	f7ee bcfa 	b.w	1294c <send_attention_status>

00023f58 <vnd_mod_set>:
	return mod_set(true, argc, argv, val_ctx);
   23f58:	4613      	mov	r3, r2
   23f5a:	460a      	mov	r2, r1
   23f5c:	4601      	mov	r1, r0
   23f5e:	2001      	movs	r0, #1
   23f60:	f7ef b942 	b.w	131e8 <mod_set>

00023f64 <sig_mod_set>:
	return mod_set(false, argc, argv, val_ctx);
   23f64:	4613      	mov	r3, r2
   23f66:	460a      	mov	r2, r1
   23f68:	4601      	mov	r1, r0
   23f6a:	2000      	movs	r0, #0
   23f6c:	f7ef b93c 	b.w	131e8 <mod_set>

00023f70 <bt_mesh_store_net>:
	schedule_store(BT_MESH_NET_PENDING);
   23f70:	2008      	movs	r0, #8
   23f72:	f7f0 b9a9 	b.w	142c8 <schedule_store>

00023f76 <bt_mesh_store_iv>:
{
   23f76:	b510      	push	{r4, lr}
   23f78:	4604      	mov	r4, r0
	schedule_store(BT_MESH_IV_PENDING);
   23f7a:	2009      	movs	r0, #9
   23f7c:	f7f0 f9a4 	bl	142c8 <schedule_store>
	if (!only_duration) {
   23f80:	b924      	cbnz	r4, 23f8c <bt_mesh_store_iv+0x16>
		schedule_store(BT_MESH_SEQ_PENDING);
   23f82:	200a      	movs	r0, #10
}
   23f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		schedule_store(BT_MESH_SEQ_PENDING);
   23f88:	f7f0 b99e 	b.w	142c8 <schedule_store>
}
   23f8c:	bd10      	pop	{r4, pc}

00023f8e <bt_mesh_store_rpl>:
	entry->store = true;
   23f8e:	2301      	movs	r3, #1
   23f90:	70c3      	strb	r3, [r0, #3]
	schedule_store(BT_MESH_RPL_PENDING);
   23f92:	2006      	movs	r0, #6
   23f94:	f7f0 b998 	b.w	142c8 <schedule_store>

00023f98 <bt_mesh_store_hb_pub>:
	schedule_store(BT_MESH_HB_PUB_PENDING);
   23f98:	200b      	movs	r0, #11
   23f9a:	f7f0 b995 	b.w	142c8 <schedule_store>

00023f9e <bt_mesh_store_cfg>:
	schedule_store(BT_MESH_CFG_PENDING);
   23f9e:	200c      	movs	r0, #12
   23fa0:	f7f0 b992 	b.w	142c8 <schedule_store>

00023fa4 <bt_mesh_clear_net>:
{
   23fa4:	b508      	push	{r3, lr}
	schedule_store(BT_MESH_NET_PENDING);
   23fa6:	2008      	movs	r0, #8
   23fa8:	f7f0 f98e 	bl	142c8 <schedule_store>
	schedule_store(BT_MESH_IV_PENDING);
   23fac:	2009      	movs	r0, #9
   23fae:	f7f0 f98b 	bl	142c8 <schedule_store>
	schedule_store(BT_MESH_CFG_PENDING);
   23fb2:	200c      	movs	r0, #12
}
   23fb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	schedule_store(BT_MESH_CFG_PENDING);
   23fb8:	f7f0 b986 	b.w	142c8 <schedule_store>

00023fbc <bt_mesh_clear_rpl>:
	schedule_store(BT_MESH_RPL_PENDING);
   23fbc:	2006      	movs	r0, #6
   23fbe:	f7f0 b983 	b.w	142c8 <schedule_store>

00023fc2 <bt_mesh_store_mod_bind>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   23fc2:	88c3      	ldrh	r3, [r0, #6]
   23fc4:	f043 0301 	orr.w	r3, r3, #1
   23fc8:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   23fca:	200d      	movs	r0, #13
   23fcc:	f7f0 b97c 	b.w	142c8 <schedule_store>

00023fd0 <bt_mesh_store_mod_sub>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   23fd0:	88c3      	ldrh	r3, [r0, #6]
   23fd2:	f043 0302 	orr.w	r3, r3, #2
   23fd6:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   23fd8:	200d      	movs	r0, #13
   23fda:	f7f0 b975 	b.w	142c8 <schedule_store>

00023fde <bt_mesh_store_mod_pub>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   23fde:	88c3      	ldrh	r3, [r0, #6]
   23fe0:	f043 0304 	orr.w	r3, r3, #4
   23fe4:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   23fe6:	200d      	movs	r0, #13
   23fe8:	f7f0 b96e 	b.w	142c8 <schedule_store>

00023fec <friend_clear_sent>:
			      K_SECONDS(frnd->clear.repeat_sec));
   23fec:	f8b1 3056 	ldrh.w	r3, [r1, #86]	; 0x56
{
   23ff0:	b510      	push	{r4, lr}
   23ff2:	460c      	mov	r4, r1
	k_delayed_work_submit(&frnd->clear.timer,
   23ff4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   23ff8:	4359      	muls	r1, r3
   23ffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
   23ffe:	f7f0 fd1b 	bl	14a38 <k_delayed_work_submit>
	frnd->clear.repeat_sec *= 2;
   24002:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
   24006:	005b      	lsls	r3, r3, #1
   24008:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
}
   2400c:	bd10      	pop	{r4, pc}

0002400e <friend_lpn_matches>:
{
   2400e:	b510      	push	{r4, lr}
	if (!frnd->established) {
   24010:	78c4      	ldrb	r4, [r0, #3]
   24012:	f014 0440 	ands.w	r4, r4, #64	; 0x40
   24016:	d01b      	beq.n	24050 <friend_lpn_matches+0x42>
	if (net_idx != frnd->net_idx) {
   24018:	89c3      	ldrh	r3, [r0, #14]
   2401a:	428b      	cmp	r3, r1
   2401c:	d118      	bne.n	24050 <friend_lpn_matches+0x42>
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   2401e:	b213      	sxth	r3, r2
   24020:	2b00      	cmp	r3, #0
   24022:	dc0a      	bgt.n	2403a <friend_lpn_matches+0x2c>
		if (frnd->sub_list[i] == addr) {
   24024:	8a03      	ldrh	r3, [r0, #16]
   24026:	4293      	cmp	r3, r2
   24028:	d014      	beq.n	24054 <friend_lpn_matches+0x46>
   2402a:	8a43      	ldrh	r3, [r0, #18]
   2402c:	4293      	cmp	r3, r2
   2402e:	d011      	beq.n	24054 <friend_lpn_matches+0x46>
   24030:	8a80      	ldrh	r0, [r0, #20]
   24032:	1a83      	subs	r3, r0, r2
   24034:	4258      	negs	r0, r3
   24036:	4158      	adcs	r0, r3
}
   24038:	bd10      	pop	{r4, pc}
	if (frnd->lpn == BT_MESH_ADDR_UNASSIGNED) {
   2403a:	8803      	ldrh	r3, [r0, #0]
   2403c:	b163      	cbz	r3, 24058 <friend_lpn_matches+0x4a>
	return (addr >= frnd->lpn && addr < (frnd->lpn + frnd->num_elem));
   2403e:	429a      	cmp	r2, r3
   24040:	d306      	bcc.n	24050 <friend_lpn_matches+0x42>
   24042:	7a00      	ldrb	r0, [r0, #8]
   24044:	4418      	add	r0, r3
   24046:	4282      	cmp	r2, r0
   24048:	bfac      	ite	ge
   2404a:	2000      	movge	r0, #0
   2404c:	2001      	movlt	r0, #1
   2404e:	e7f3      	b.n	24038 <friend_lpn_matches+0x2a>
		return false;
   24050:	2000      	movs	r0, #0
   24052:	e7f1      	b.n	24038 <friend_lpn_matches+0x2a>
			return true;
   24054:	2001      	movs	r0, #1
   24056:	e7ef      	b.n	24038 <friend_lpn_matches+0x2a>
		return false;
   24058:	4618      	mov	r0, r3
   2405a:	e7ed      	b.n	24038 <friend_lpn_matches+0x2a>

0002405c <bt_mesh_friend_match>:
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
   2405c:	f7f0 bf6c 	b.w	14f38 <bt_mesh_friend_match.part.12>

00024060 <prov_capabilities>:
}
   24060:	4770      	bx	lr

00024062 <prov_buf_init>:
{
   24062:	b538      	push	{r3, r4, r5, lr}
   24064:	4604      	mov	r4, r0
   24066:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BUF_HEADROOM);
   24068:	2105      	movs	r1, #5
   2406a:	f000 fdca 	bl	24c02 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   2406e:	4629      	mov	r1, r5
   24070:	4620      	mov	r0, r4
}
   24072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   24076:	f000 be38 	b.w	24cea <net_buf_simple_add_u8>

0002407a <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2407a:	f3bf 8f5b 	dmb	ish
   2407e:	e850 3f00 	ldrex	r3, [r0]
   24082:	ea43 0201 	orr.w	r2, r3, r1
   24086:	e840 2c00 	strex	ip, r2, [r0]
   2408a:	f1bc 0f00 	cmp.w	ip, #0
   2408e:	d1f6      	bne.n	2407e <atomic_or+0x4>
   24090:	f3bf 8f5b 	dmb	ish
}
   24094:	4618      	mov	r0, r3
   24096:	4770      	bx	lr

00024098 <prov_send_fail_msg>:
{
   24098:	b510      	push	{r4, lr}
   2409a:	b086      	sub	sp, #24
	PROV_BUF(buf, 2);
   2409c:	ab01      	add	r3, sp, #4
   2409e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   240a2:	4604      	mov	r4, r0
	prov_buf_init(&buf, PROV_FAILED);
   240a4:	2109      	movs	r1, #9
   240a6:	a803      	add	r0, sp, #12
	PROV_BUF(buf, 2);
   240a8:	9303      	str	r3, [sp, #12]
   240aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
	prov_buf_init(&buf, PROV_FAILED);
   240ae:	f7ff ffd8 	bl	24062 <prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   240b2:	4621      	mov	r1, r4
   240b4:	a803      	add	r0, sp, #12
   240b6:	f000 fe18 	bl	24cea <net_buf_simple_add_u8>
	prov_send(&buf);
   240ba:	a803      	add	r0, sp, #12
   240bc:	f7f2 f926 	bl	1630c <prov_send>
}
   240c0:	b006      	add	sp, #24
   240c2:	bd10      	pop	{r4, pc}

000240c4 <sys_memcpy_swap.constprop.21>:
	for (; length > 0; length--) {
   240c4:	f101 0320 	add.w	r3, r1, #32
   240c8:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   240ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   240ce:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   240d2:	428b      	cmp	r3, r1
   240d4:	d1f9      	bne.n	240ca <sys_memcpy_swap.constprop.21+0x6>
}
   240d6:	4770      	bx	lr

000240d8 <prov_complete>:
   240d8:	4770      	bx	lr

000240da <prov_input_complete>:
   240da:	4770      	bx	lr

000240dc <bt_prov_active>:
	return atomic_test_bit(link.flags, LINK_ACTIVE);
   240dc:	2002      	movs	r0, #2
   240de:	f7f2 bb3b 	b.w	16758 <atomic_test_bit.constprop.26>

000240e2 <prov_ccc_changed>:
}
   240e2:	4770      	bx	lr

000240e4 <filter_add>:
{
   240e4:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   240e6:	b179      	cbz	r1, 24108 <filter_add+0x24>
		if (client->filter[i] == addr) {
   240e8:	8883      	ldrh	r3, [r0, #4]
   240ea:	4299      	cmp	r1, r3
   240ec:	d00c      	beq.n	24108 <filter_add+0x24>
   240ee:	88c4      	ldrh	r4, [r0, #6]
   240f0:	42a1      	cmp	r1, r4
   240f2:	d009      	beq.n	24108 <filter_add+0x24>
   240f4:	8902      	ldrh	r2, [r0, #8]
   240f6:	4291      	cmp	r1, r2
   240f8:	d006      	beq.n	24108 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   240fa:	b113      	cbz	r3, 24102 <filter_add+0x1e>
   240fc:	b12c      	cbz	r4, 2410a <filter_add+0x26>
   240fe:	b91a      	cbnz	r2, 24108 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   24100:	2302      	movs	r3, #2
			client->filter[i] = addr;
   24102:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   24106:	8081      	strh	r1, [r0, #4]
}
   24108:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   2410a:	2301      	movs	r3, #1
   2410c:	e7f9      	b.n	24102 <filter_add+0x1e>

0002410e <proxy_ccc_changed>:
   2410e:	4770      	bx	lr

00024110 <proxy_segment_and_send>:
{
   24110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24114:	4688      	mov	r8, r1
   24116:	4614      	mov	r4, r2
   24118:	4607      	mov	r7, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
   2411a:	f7fe fef8 	bl	22f0e <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   2411e:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   24120:	3803      	subs	r0, #3
   24122:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
   24124:	42ab      	cmp	r3, r5
   24126:	f008 063f 	and.w	r6, r8, #63	; 0x3f
   2412a:	d20a      	bcs.n	24142 <proxy_segment_and_send+0x32>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   2412c:	4631      	mov	r1, r6
   2412e:	4620      	mov	r0, r4
   24130:	f000 fe30 	bl	24d94 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
   24134:	88a2      	ldrh	r2, [r4, #4]
   24136:	6821      	ldr	r1, [r4, #0]
   24138:	4638      	mov	r0, r7
}
   2413a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
   2413e:	f7f3 bc45 	b.w	179cc <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   24142:	f046 0140 	orr.w	r1, r6, #64	; 0x40
   24146:	4620      	mov	r0, r4
   24148:	f000 fe24 	bl	24d94 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
   2414c:	462a      	mov	r2, r5
   2414e:	6821      	ldr	r1, [r4, #0]
   24150:	4638      	mov	r0, r7
   24152:	f7f3 fc3b 	bl	179cc <proxy_send>
	net_buf_simple_pull(msg, mtu);
   24156:	4629      	mov	r1, r5
   24158:	4620      	mov	r0, r4
   2415a:	f000 fe24 	bl	24da6 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   2415e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
	while (msg->len) {
   24162:	88a3      	ldrh	r3, [r4, #4]
   24164:	b163      	cbz	r3, 24180 <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
   24166:	3301      	adds	r3, #1
   24168:	42ab      	cmp	r3, r5
   2416a:	da0c      	bge.n	24186 <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   2416c:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   24170:	4620      	mov	r0, r4
   24172:	f000 fe0f 	bl	24d94 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
   24176:	88a2      	ldrh	r2, [r4, #4]
   24178:	6821      	ldr	r1, [r4, #0]
   2417a:	4638      	mov	r0, r7
   2417c:	f7f3 fc26 	bl	179cc <proxy_send>
}
   24180:	2000      	movs	r0, #0
   24182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   24186:	4631      	mov	r1, r6
   24188:	4620      	mov	r0, r4
   2418a:	f000 fe03 	bl	24d94 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
   2418e:	6821      	ldr	r1, [r4, #0]
   24190:	462a      	mov	r2, r5
   24192:	4638      	mov	r0, r7
   24194:	f7f3 fc1a 	bl	179cc <proxy_send>
		net_buf_simple_pull(msg, mtu);
   24198:	4629      	mov	r1, r5
   2419a:	4620      	mov	r0, r4
   2419c:	f000 fe03 	bl	24da6 <net_buf_simple_pull>
   241a0:	e7df      	b.n	24162 <proxy_segment_and_send+0x52>

000241a2 <beacon_send>:
{
   241a2:	b530      	push	{r4, r5, lr}
   241a4:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   241a6:	ab04      	add	r3, sp, #16
   241a8:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   241ac:	4604      	mov	r4, r0
   241ae:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   241b0:	a801      	add	r0, sp, #4
   241b2:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   241b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   241b8:	9301      	str	r3, [sp, #4]
	net_buf_simple_reserve(&buf, 1);
   241ba:	f000 fd22 	bl	24c02 <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   241be:	a901      	add	r1, sp, #4
   241c0:	4628      	mov	r0, r5
   241c2:	f7e7 f8d9 	bl	b378 <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, &buf);
   241c6:	aa01      	add	r2, sp, #4
   241c8:	2101      	movs	r1, #1
   241ca:	4620      	mov	r0, r4
   241cc:	f7ff ffa0 	bl	24110 <proxy_segment_and_send>
}
   241d0:	b00b      	add	sp, #44	; 0x2c
   241d2:	bd30      	pop	{r4, r5, pc}

000241d4 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   241d4:	2300      	movs	r3, #0
   241d6:	f880 3020 	strb.w	r3, [r0, #32]
	sub->node_id_start = 0U;
   241da:	6243      	str	r3, [r0, #36]	; 0x24
}
   241dc:	4770      	bx	lr

000241de <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
   241de:	f810 3c0e 	ldrb.w	r3, [r0, #-14]
   241e2:	2b01      	cmp	r3, #1
{
   241e4:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
   241e6:	d102      	bne.n	241ee <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
   241e8:	3818      	subs	r0, #24
   241ea:	f7ff bf7b 	b.w	240e4 <filter_add>
	} else if (client->filter_type == BLACKLIST) {
   241ee:	2b02      	cmp	r3, #2
   241f0:	d111      	bne.n	24216 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   241f2:	b181      	cbz	r1, 24216 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
   241f4:	f830 1c14 	ldrh.w	r1, [r0, #-20]
   241f8:	4291      	cmp	r1, r2
   241fa:	d00d      	beq.n	24218 <bt_mesh_proxy_addr_add+0x3a>
   241fc:	f830 1c12 	ldrh.w	r1, [r0, #-18]
   24200:	4291      	cmp	r1, r2
   24202:	d00b      	beq.n	2421c <bt_mesh_proxy_addr_add+0x3e>
   24204:	f830 1c10 	ldrh.w	r1, [r0, #-16]
   24208:	4291      	cmp	r1, r2
   2420a:	d104      	bne.n	24216 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   2420c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   24210:	2300      	movs	r3, #0
   24212:	f820 3c14 	strh.w	r3, [r0, #-20]
}
   24216:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   24218:	2300      	movs	r3, #0
   2421a:	e7f7      	b.n	2420c <bt_mesh_proxy_addr_add+0x2e>
   2421c:	2301      	movs	r3, #1
   2421e:	e7f5      	b.n	2420c <bt_mesh_proxy_addr_add+0x2e>

00024220 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   24220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   24222:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   24224:	1dc3      	adds	r3, r0, #7
   24226:	f023 0303 	bic.w	r3, r3, #3
{
   2422a:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2422c:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2422e:	3a01      	subs	r2, #1
   24230:	b294      	uxth	r4, r2
{
   24232:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   24234:	2204      	movs	r2, #4
   24236:	2100      	movs	r1, #0
   24238:	fb06 0004 	mla	r0, r6, r4, r0
   2423c:	f7fd fe4d 	bl	21eda <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   24240:	f64f 77ff 	movw	r7, #65535	; 0xffff
   24244:	3c01      	subs	r4, #1
   24246:	b2a4      	uxth	r4, r4
   24248:	42bc      	cmp	r4, r7
   2424a:	d101      	bne.n	24250 <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   2424c:	b003      	add	sp, #12
   2424e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   24250:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   24254:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   24256:	2204      	movs	r2, #4
   24258:	1b80      	subs	r0, r0, r6
   2425a:	eb0d 0102 	add.w	r1, sp, r2
   2425e:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   24260:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   24262:	f7fd fe10 	bl	21e86 <memcpy>
   24266:	e7ed      	b.n	24244 <mem_init+0x24>

00024268 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   24268:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   2426a:	6804      	ldr	r4, [r0, #0]
{
   2426c:	4606      	mov	r6, r0
	if (*mem_head) {
   2426e:	b18c      	cbz	r4, 24294 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   24270:	1de3      	adds	r3, r4, #7
   24272:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   24276:	2204      	movs	r2, #4
   24278:	4621      	mov	r1, r4
   2427a:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   2427e:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   24280:	f7fd fe01 	bl	21e86 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   24284:	9b01      	ldr	r3, [sp, #4]
   24286:	b123      	cbz	r3, 24292 <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   24288:	1dda      	adds	r2, r3, #7
   2428a:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   2428e:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   24290:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   24292:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   24294:	4620      	mov	r0, r4
   24296:	b002      	add	sp, #8
   24298:	bd70      	pop	{r4, r5, r6, pc}

0002429a <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   2429a:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   2429c:	680c      	ldr	r4, [r1, #0]
{
   2429e:	4606      	mov	r6, r0
   242a0:	460d      	mov	r5, r1
	if (*mem_head) {
   242a2:	b11c      	cbz	r4, 242ac <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   242a4:	1de3      	adds	r3, r4, #7
   242a6:	f023 0303 	bic.w	r3, r3, #3
   242aa:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   242ac:	2204      	movs	r2, #4
   242ae:	4629      	mov	r1, r5
   242b0:	4630      	mov	r0, r6
   242b2:	f7fd fde8 	bl	21e86 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   242b6:	1df2      	adds	r2, r6, #7
   242b8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   242bc:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   242be:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   242c0:	602e      	str	r6, [r5, #0]
}
   242c2:	bd70      	pop	{r4, r5, r6, pc}

000242c4 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   242c4:	fb02 0001 	mla	r0, r2, r1, r0
   242c8:	4770      	bx	lr

000242ca <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   242ca:	1a40      	subs	r0, r0, r1
   242cc:	b280      	uxth	r0, r0
}
   242ce:	fbb0 f0f2 	udiv	r0, r0, r2
   242d2:	4770      	bx	lr

000242d4 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   242d4:	b510      	push	{r4, lr}
	src += len;
   242d6:	4411      	add	r1, r2
	while (len--) {
   242d8:	3801      	subs	r0, #1
   242da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   242de:	3a01      	subs	r2, #1
   242e0:	b292      	uxth	r2, r2
   242e2:	429a      	cmp	r2, r3
   242e4:	d100      	bne.n	242e8 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   242e6:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   242e8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   242ec:	f800 4f01 	strb.w	r4, [r0, #1]!
   242f0:	e7f5      	b.n	242de <mem_rcopy+0xa>

000242f2 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   242f2:	6010      	str	r0, [r2, #0]
   242f4:	6008      	str	r0, [r1, #0]

	return link;
}
   242f6:	4770      	bx	lr

000242f8 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   242f8:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   242fa:	6814      	ldr	r4, [r2, #0]
   242fc:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   242fe:	6814      	ldr	r4, [r2, #0]
   24300:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   24302:	6010      	str	r0, [r2, #0]

	return link;
}
   24304:	bd10      	pop	{r4, pc}

00024306 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   24306:	4288      	cmp	r0, r1
   24308:	d003      	beq.n	24312 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   2430a:	b11a      	cbz	r2, 24314 <memq_peek+0xe>
		*mem = head->mem;
   2430c:	6843      	ldr	r3, [r0, #4]
   2430e:	6013      	str	r3, [r2, #0]
   24310:	4770      	bx	lr
		return NULL;
   24312:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   24314:	4770      	bx	lr

00024316 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   24316:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   24318:	4283      	cmp	r3, r0
   2431a:	d009      	beq.n	24330 <memq_dequeue+0x1a>
	if (mem) {
   2431c:	b122      	cbz	r2, 24328 <memq_dequeue+0x12>
		*mem = head->mem;
   2431e:	6858      	ldr	r0, [r3, #4]
   24320:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   24322:	681a      	ldr	r2, [r3, #0]
   24324:	600a      	str	r2, [r1, #0]

	return old_head;
   24326:	e001      	b.n	2432c <memq_dequeue+0x16>
	if (old_head == NULL) {
   24328:	2b00      	cmp	r3, #0
   2432a:	d1fa      	bne.n	24322 <memq_dequeue+0xc>
}
   2432c:	4618      	mov	r0, r3
   2432e:	4770      	bx	lr
		return NULL; /* queue is empty */
   24330:	2300      	movs	r3, #0
   24332:	e7fb      	b.n	2432c <memq_dequeue+0x16>

00024334 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   24334:	b510      	push	{r4, lr}
   24336:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
   24338:	2000      	movs	r0, #0

	while (octets_len--) {
   2433a:	3901      	subs	r1, #1
   2433c:	b2c9      	uxtb	r1, r1
   2433e:	29ff      	cmp	r1, #255	; 0xff
   24340:	d100      	bne.n	24344 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   24342:	bd10      	pop	{r4, pc}
		bite = *octets;
   24344:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   24348:	2b00      	cmp	r3, #0
   2434a:	d0f6      	beq.n	2433a <util_ones_count_get+0x6>
			bite &= (bite - 1);
   2434c:	b25b      	sxtb	r3, r3
   2434e:	1e5c      	subs	r4, r3, #1
   24350:	4023      	ands	r3, r4
			one_count++;
   24352:	3001      	adds	r0, #1
			bite &= (bite - 1);
   24354:	b2db      	uxtb	r3, r3
			one_count++;
   24356:	b2c0      	uxtb	r0, r0
   24358:	e7f6      	b.n	24348 <util_ones_count_get+0x14>

0002435a <ticker_dequeue>:
{
   2435a:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
   2435c:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->node[0];
   2435e:	6804      	ldr	r4, [r0, #0]
{
   24360:	4606      	mov	r6, r0
	previous = instance->ticker_id_head;
   24362:	4613      	mov	r3, r2
	total = 0U;
   24364:	2000      	movs	r0, #0
	while (current != TICKER_NULL) {
   24366:	2aff      	cmp	r2, #255	; 0xff
   24368:	d101      	bne.n	2436e <ticker_dequeue+0x14>
		return 0;
   2436a:	2000      	movs	r0, #0
}
   2436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   2436e:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   24372:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
		if (current == id) {
   24376:	428a      	cmp	r2, r1
   24378:	f8d7 c008 	ldr.w	ip, [r7, #8]
   2437c:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   24380:	4460      	add	r0, ip
   24382:	d002      	beq.n	2438a <ticker_dequeue+0x30>
   24384:	4613      	mov	r3, r2
   24386:	462a      	mov	r2, r5
   24388:	e7ed      	b.n	24366 <ticker_dequeue+0xc>
	if (previous == current) {
   2438a:	4293      	cmp	r3, r2
   2438c:	d100      	bne.n	24390 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   2438e:	7775      	strb	r5, [r6, #29]
	node[previous].next = ticker_current->next;
   24390:	b21b      	sxth	r3, r3
   24392:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   24396:	f804 5033 	strb.w	r5, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
   2439a:	783b      	ldrb	r3, [r7, #0]
   2439c:	2bff      	cmp	r3, #255	; 0xff
   2439e:	d0e5      	beq.n	2436c <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
   243a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   243a4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   243a8:	68a3      	ldr	r3, [r4, #8]
   243aa:	4463      	add	r3, ip
   243ac:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
   243ae:	e7dd      	b.n	2436c <ticker_dequeue+0x12>

000243b0 <ticks_to_expire_prep>:
{
   243b0:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   243b2:	1a55      	subs	r5, r2, r1
   243b4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   243b8:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   243ba:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   243bc:	d109      	bne.n	243d2 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   243be:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   243c2:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   243c4:	42a2      	cmp	r2, r4
   243c6:	d90e      	bls.n	243e6 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   243c8:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   243ca:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   243cc:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   243ce:	6144      	str	r4, [r0, #20]
}
   243d0:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   243d2:	1a8a      	subs	r2, r1, r2
   243d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   243d8:	4293      	cmp	r3, r2
   243da:	d901      	bls.n	243e0 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   243dc:	1a9a      	subs	r2, r3, r2
   243de:	e7f1      	b.n	243c4 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   243e0:	4422      	add	r2, r4
   243e2:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   243e4:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   243e6:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   243e8:	2200      	movs	r2, #0
   243ea:	e7ef      	b.n	243cc <ticks_to_expire_prep+0x1c>

000243ec <ticker_job_op_cb>:
{
   243ec:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   243ee:	2200      	movs	r2, #0
   243f0:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   243f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   243f4:	6259      	str	r1, [r3, #36]	; 0x24
{
   243f6:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   243f8:	b10a      	cbz	r2, 243fe <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   243fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   243fc:	4710      	bx	r2
}
   243fe:	4770      	bx	lr

00024400 <ticker_worker>:
{
   24400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
   24404:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
   24406:	2301      	movs	r3, #1
{
   24408:	4604      	mov	r4, r0
	instance->worker_trigger = 1U;
   2440a:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   2440c:	b91d      	cbnz	r5, 24416 <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
   2440e:	7f43      	ldrb	r3, [r0, #29]
   24410:	2bff      	cmp	r3, #255	; 0xff
   24412:	d102      	bne.n	2441a <ticker_worker+0x1a>
		instance->worker_trigger = 0U;
   24414:	77c5      	strb	r5, [r0, #31]
}
   24416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   2441a:	f7f8 fc15 	bl	1cc48 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2441e:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
   24420:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
   24422:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   24426:	1bc7      	subs	r7, r0, r7
   24428:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
   2442c:	2eff      	cmp	r6, #255	; 0xff
   2442e:	d006      	beq.n	2443e <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
   24430:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   24434:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   24438:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   2443a:	429f      	cmp	r7, r3
   2443c:	d218      	bcs.n	24470 <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   2443e:	7ae2      	ldrb	r2, [r4, #11]
   24440:	7aa3      	ldrb	r3, [r4, #10]
   24442:	4293      	cmp	r3, r2
   24444:	d105      	bne.n	24452 <ticker_worker+0x52>
		last = instance->ticks_elapsed_last + 1;
   24446:	3301      	adds	r3, #1
   24448:	b2db      	uxtb	r3, r3
			last = 0U;
   2444a:	2b02      	cmp	r3, #2
   2444c:	bf08      	it	eq
   2444e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
   24450:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   24452:	7ae3      	ldrb	r3, [r4, #11]
   24454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   24458:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   2445a:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2445c:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0U;
   2445e:	2300      	movs	r3, #0
   24460:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   24462:	46ac      	mov	ip, r5
   24464:	4623      	mov	r3, r4
   24466:	2104      	movs	r1, #4
   24468:	2003      	movs	r0, #3
}
   2446a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   2446e:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
   24470:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   24472:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   24474:	788a      	ldrb	r2, [r1, #2]
   24476:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
   24478:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   2447c:	1a9b      	subs	r3, r3, r2
   2447e:	b2db      	uxtb	r3, r3
   24480:	2b01      	cmp	r3, #1
   24482:	d1d3      	bne.n	2442c <ticker_worker+0x2c>
		if (ticker->timeout_func) {
   24484:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
   24488:	3a01      	subs	r2, #1
   2448a:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   2448c:	f1b9 0f00 	cmp.w	r9, #0
   24490:	d0cc      	beq.n	2442c <ticker_worker+0x2c>
					   ticks_expired -
   24492:	6948      	ldr	r0, [r1, #20]
   24494:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   24496:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
   24498:	1a28      	subs	r0, r5, r0
   2449a:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   2449c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   244a0:	690b      	ldr	r3, [r1, #16]
   244a2:	6a49      	ldr	r1, [r1, #36]	; 0x24
   244a4:	47c8      	blx	r9
   244a6:	e7c1      	b.n	2442c <ticker_worker+0x2c>

000244a8 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   244a8:	f7f8 bbce 	b.w	1cc48 <cntr_cnt_get>

000244ac <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   244ac:	1a40      	subs	r0, r0, r1
}
   244ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   244b2:	4770      	bx	lr

000244b4 <ll_tx_pwr_get>:
void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than default when dynamic
	 *       updates is implemented.
	 */
	*min = RADIO_TXP_DEFAULT;
   244b4:	2300      	movs	r3, #0
   244b6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   244b8:	700b      	strb	r3, [r1, #0]
}
   244ba:	4770      	bx	lr

000244bc <sys_put_le32>:
	dst[1] = val >> 8;
   244bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   244c0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   244c2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   244c4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   244c6:	0a00      	lsrs	r0, r0, #8
   244c8:	704b      	strb	r3, [r1, #1]
   244ca:	70c8      	strb	r0, [r1, #3]
}
   244cc:	4770      	bx	lr

000244ce <evt_create>:
{
   244ce:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   244d0:	3008      	adds	r0, #8
{
   244d2:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   244d4:	2102      	movs	r1, #2
{
   244d6:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   244d8:	f000 fbf8 	bl	24ccc <net_buf_simple_add>
	hdr->evt = evt;
   244dc:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   244de:	7044      	strb	r4, [r0, #1]
}
   244e0:	bd38      	pop	{r3, r4, r5, pc}

000244e2 <meta_evt>:
{
   244e2:	b570      	push	{r4, r5, r6, lr}
   244e4:	4604      	mov	r4, r0
   244e6:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   244e8:	3201      	adds	r2, #1
{
   244ea:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   244ec:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   244ee:	b2d2      	uxtb	r2, r2
   244f0:	213e      	movs	r1, #62	; 0x3e
   244f2:	f7ff ffec 	bl	244ce <evt_create>
	me = net_buf_add(buf, sizeof(*me));
   244f6:	2101      	movs	r1, #1
   244f8:	4620      	mov	r0, r4
   244fa:	f000 fbe7 	bl	24ccc <net_buf_simple_add>
	me->subevent = subevt;
   244fe:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
   24500:	4629      	mov	r1, r5
   24502:	4620      	mov	r0, r4
}
   24504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   24508:	f000 bbe0 	b.w	24ccc <net_buf_simple_add>

0002450c <sys_get_le64>:
{
   2450c:	4603      	mov	r3, r0
}
   2450e:	6800      	ldr	r0, [r0, #0]
   24510:	6859      	ldr	r1, [r3, #4]
   24512:	4770      	bx	lr

00024514 <hci_num_cmplt_encode>:
{
   24514:	b570      	push	{r4, r5, r6, lr}
   24516:	4606      	mov	r6, r0
   24518:	460d      	mov	r5, r1
   2451a:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   2451c:	2113      	movs	r1, #19
   2451e:	2205      	movs	r2, #5
   24520:	f7ff ffd5 	bl	244ce <evt_create>
	ep = net_buf_add(buf, len);
   24524:	2105      	movs	r1, #5
   24526:	f106 0008 	add.w	r0, r6, #8
   2452a:	f000 fbcf 	bl	24ccc <net_buf_simple_add>
	ep->num_handles = num_handles;
   2452e:	2301      	movs	r3, #1
   24530:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   24532:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   24536:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   2453a:	bd70      	pop	{r4, r5, r6, pc}

0002453c <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   2453c:	7903      	ldrb	r3, [r0, #4]
   2453e:	2b02      	cmp	r3, #2
   24540:	d00f      	beq.n	24562 <hci_get_class+0x26>
		switch (node_rx->hdr.type) {
   24542:	3b04      	subs	r3, #4
   24544:	2b06      	cmp	r3, #6
   24546:	d809      	bhi.n	2455c <hci_get_class+0x20>
   24548:	e8df f003 	tbb	[pc, r3]
   2454c:	08080813 	.word	0x08080813
   24550:	0604      	.short	0x0604
   24552:	06          	.byte	0x06
   24553:	00          	.byte	0x00
			return HCI_CLASS_EVT_REQUIRED;
   24554:	2000      	movs	r0, #0
   24556:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
   24558:	2002      	movs	r0, #2
   2455a:	4770      	bx	lr
			return -1;
   2455c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24560:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   24562:	7a03      	ldrb	r3, [r0, #8]
   24564:	f003 0303 	and.w	r3, r3, #3
   24568:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   2456a:	bf0c      	ite	eq
   2456c:	2002      	moveq	r0, #2
   2456e:	2003      	movne	r0, #3
   24570:	4770      	bx	lr
			return HCI_CLASS_EVT_DISCARDABLE;
   24572:	2001      	movs	r0, #1
}
   24574:	4770      	bx	lr

00024576 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
   24576:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24578:	460c      	mov	r4, r1
   2457a:	1846      	adds	r6, r0, r1
   2457c:	1b35      	subs	r5, r6, r4
	u8_t *buf8 = buf;

	while (len) {
   2457e:	b18c      	cbz	r4, 245a4 <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
   24580:	f7df fd74 	bl	406c <sys_rand32_get>

		if (len >= sizeof(v)) {
   24584:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
   24586:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
   24588:	d907      	bls.n	2459a <bt_rand+0x24>
			memcpy(buf8, &v, sizeof(v));
   2458a:	2204      	movs	r2, #4
   2458c:	eb0d 0102 	add.w	r1, sp, r2
   24590:	4628      	mov	r0, r5
   24592:	f7fd fc78 	bl	21e86 <memcpy>

			buf8 += sizeof(v);
			len -= sizeof(v);
   24596:	3c04      	subs	r4, #4
   24598:	e7f0      	b.n	2457c <bt_rand+0x6>
		} else {
			memcpy(buf8, &v, len);
   2459a:	4622      	mov	r2, r4
   2459c:	a901      	add	r1, sp, #4
   2459e:	4628      	mov	r0, r5
   245a0:	f7fd fc71 	bl	21e86 <memcpy>
			break;
		}
	}

	return 0;
}
   245a4:	2000      	movs	r0, #0
   245a6:	b002      	add	sp, #8
   245a8:	bd70      	pop	{r4, r5, r6, pc}

000245aa <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   245aa:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   245ac:	f000 fa8f 	bl	24ace <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   245b0:	2000      	movs	r0, #0
   245b2:	bd08      	pop	{r3, pc}

000245b4 <cpu_sleep>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline void cpu_sleep(void)
{
	__WFE();
   245b4:	bf20      	wfe
	__SEV();
   245b6:	bf40      	sev
	__WFE();
   245b8:	bf20      	wfe
}
   245ba:	4770      	bx	lr

000245bc <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   245bc:	6008      	str	r0, [r1, #0]
}
   245be:	4770      	bx	lr

000245c0 <prepare_reduced>:
	if (status == 0) {
   245c0:	b918      	cbnz	r0, 245ca <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= XON_BITMASK;
   245c2:	680b      	ldr	r3, [r1, #0]
   245c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   245c8:	600b      	str	r3, [r1, #0]
}
   245ca:	4770      	bx	lr

000245cc <prepare_normal>:
	if (status == 0) {
   245cc:	b918      	cbnz	r0, 245d6 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
   245ce:	680b      	ldr	r3, [r1, #0]
   245d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   245d4:	600b      	str	r3, [r1, #0]
}
   245d6:	4770      	bx	lr

000245d8 <isr_adv_ci_adva_check>:
{
   245d8:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   245da:	7804      	ldrb	r4, [r0, #0]
   245dc:	780a      	ldrb	r2, [r1, #0]
   245de:	f3c4 1380 	ubfx	r3, r4, #6, #1
   245e2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   245e6:	d119      	bne.n	2461c <isr_adv_ci_adva_check+0x44>
   245e8:	f004 040f 	and.w	r4, r4, #15
   245ec:	2c01      	cmp	r4, #1
   245ee:	f100 0502 	add.w	r5, r0, #2
   245f2:	f101 0608 	add.w	r6, r1, #8
   245f6:	d008      	beq.n	2460a <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   245f8:	2206      	movs	r2, #6
   245fa:	4631      	mov	r1, r6
   245fc:	4628      	mov	r0, r5
   245fe:	f7fd fc1b 	bl	21e38 <memcmp>
			 BDADDR_SIZE)) ||
   24602:	fab0 f080 	clz	r0, r0
   24606:	0940      	lsrs	r0, r0, #5
}
   24608:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   2460a:	2206      	movs	r2, #6
   2460c:	4631      	mov	r1, r6
   2460e:	4628      	mov	r0, r5
   24610:	f7fd fc12 	bl	21e38 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   24614:	2800      	cmp	r0, #0
   24616:	d1ef      	bne.n	245f8 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   24618:	4620      	mov	r0, r4
   2461a:	e7f5      	b.n	24608 <isr_adv_ci_adva_check+0x30>
   2461c:	2000      	movs	r0, #0
   2461e:	e7f3      	b.n	24608 <isr_adv_ci_adva_check+0x30>

00024620 <ticker_success_assert>:
{
   24620:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   24622:	b108      	cbz	r0, 24628 <ticker_success_assert+0x8>
   24624:	f7f6 f856 	bl	1a6d4 <ticker_start_conn_assert.part.7>
}
   24628:	bd08      	pop	{r3, pc}

0002462a <mayfly_radio_inactive>:
	mayfly_radio_active(0);
   2462a:	2000      	movs	r0, #0
   2462c:	f7f6 bb62 	b.w	1acf4 <mayfly_radio_active>

00024630 <rx_packet_set>:
{
   24630:	b538      	push	{r3, r4, r5, lr}
   24632:	4605      	mov	r5, r0
   24634:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
   24636:	2100      	movs	r1, #0
   24638:	4608      	mov	r0, r1
   2463a:	f7f8 fc03 	bl	1ce44 <radio_phy_set>
	if (conn->enc_rx) {
   2463e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   24642:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   24644:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
   24648:	d50d      	bpl.n	24666 <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   2464a:	211f      	movs	r1, #31
   2464c:	2008      	movs	r0, #8
   2464e:	f7f8 fc3f 	bl	1ced0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   24652:	4622      	mov	r2, r4
   24654:	2100      	movs	r1, #0
   24656:	f105 00d1 	add.w	r0, r5, #209	; 0xd1
   2465a:	f7f8 fe47 	bl	1d2ec <radio_ccm_rx_pkt_set>
}
   2465e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
   24662:	f7f8 bc61 	b.w	1cf28 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   24666:	2008      	movs	r0, #8
   24668:	211b      	movs	r1, #27
   2466a:	f7f8 fc31 	bl	1ced0 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   2466e:	4620      	mov	r0, r4
   24670:	e7f5      	b.n	2465e <rx_packet_set+0x2e>

00024672 <chan_set>:
	switch (chan) {
   24672:	2826      	cmp	r0, #38	; 0x26
{
   24674:	b510      	push	{r4, lr}
   24676:	4604      	mov	r4, r0
	switch (chan) {
   24678:	d00b      	beq.n	24692 <chan_set+0x20>
   2467a:	2827      	cmp	r0, #39	; 0x27
   2467c:	d00b      	beq.n	24696 <chan_set+0x24>
   2467e:	2825      	cmp	r0, #37	; 0x25
   24680:	d10b      	bne.n	2469a <chan_set+0x28>
		radio_freq_chan_set(2);
   24682:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
   24684:	f7f8 fbf4 	bl	1ce70 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   24688:	4620      	mov	r0, r4
}
   2468a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   2468e:	f7f8 bbf5 	b.w	1ce7c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   24692:	201a      	movs	r0, #26
   24694:	e7f6      	b.n	24684 <chan_set+0x12>
		radio_freq_chan_set(80);
   24696:	2050      	movs	r0, #80	; 0x50
   24698:	e7f4      	b.n	24684 <chan_set+0x12>
		if (chan < 11) {
   2469a:	280a      	cmp	r0, #10
   2469c:	d802      	bhi.n	246a4 <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
   2469e:	3002      	adds	r0, #2
   246a0:	0040      	lsls	r0, r0, #1
   246a2:	e7ef      	b.n	24684 <chan_set+0x12>
		} else if (chan < 40) {
   246a4:	2827      	cmp	r0, #39	; 0x27
   246a6:	d801      	bhi.n	246ac <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   246a8:	3003      	adds	r0, #3
   246aa:	e7f9      	b.n	246a0 <chan_set+0x2e>
   246ac:	f7f6 f842 	bl	1a734 <chan_set.part.25>

000246b0 <isr_rx_scan_report.isra.35>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
   246b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   246b4:	4680      	mov	r8, r0
	node_rx = packet_rx_reserve_get(3);
   246b6:	2003      	movs	r0, #3
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
   246b8:	460f      	mov	r7, r1
	node_rx = packet_rx_reserve_get(3);
   246ba:	f7f5 fee1 	bl	1a480 <packet_rx_reserve_get>
	if (node_rx == 0) {
   246be:	b1c8      	cbz	r0, 246f4 <isr_rx_scan_report.isra.35+0x44>
				      pdu_adv_rx->len];
   246c0:	7a44      	ldrb	r4, [r0, #9]
	node_rx->hdr.handle = 0xffff;
   246c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   246c6:	80c3      	strh	r3, [r0, #6]
	pdu_adv_rx = (void *)node_rx->pdu_data;
   246c8:	f100 0508 	add.w	r5, r0, #8
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   246cc:	2304      	movs	r3, #4
	extra = &((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   246ce:	3402      	adds	r4, #2
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   246d0:	7103      	strb	r3, [r0, #4]
	extra = &((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   246d2:	192e      	adds	r6, r5, r4
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   246d4:	f1b8 0f00 	cmp.w	r8, #0
   246d8:	d00a      	beq.n	246f0 <isr_rx_scan_report.isra.35+0x40>
   246da:	f7f8 fcc5 	bl	1d068 <radio_rssi_get>
   246de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   246e2:	5528      	strb	r0, [r5, r4]
	*extra = dir_report ? 1 : 0;
   246e4:	7077      	strb	r7, [r6, #1]
	packet_rx_enqueue();
   246e6:	f7f5 ff89 	bl	1a5fc <packet_rx_enqueue>
	return 0;
   246ea:	2000      	movs	r0, #0
}
   246ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   246f0:	207f      	movs	r0, #127	; 0x7f
   246f2:	e7f6      	b.n	246e2 <isr_rx_scan_report.isra.35+0x32>
		return 1;
   246f4:	2001      	movs	r0, #1
   246f6:	e7f9      	b.n	246ec <isr_rx_scan_report.isra.35+0x3c>

000246f8 <preempt_calc>:
{
   246f8:	b570      	push	{r4, r5, r6, lr}
   246fa:	4614      	mov	r4, r2
   246fc:	460e      	mov	r6, r1
   246fe:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   24700:	f7ff fed2 	bl	244a8 <ticker_ticks_now_get>
   24704:	4621      	mov	r1, r4
   24706:	f7ff fed1 	bl	244ac <ticker_ticks_diff_get>
	diff += 3;
   2470a:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   2470c:	2c09      	cmp	r4, #9
   2470e:	d90f      	bls.n	24730 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   24710:	2100      	movs	r1, #0
   24712:	4608      	mov	r0, r1
   24714:	f7f5 ff1c 	bl	1a550 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   24718:	4632      	mov	r2, r6
   2471a:	2100      	movs	r1, #0
   2471c:	4628      	mov	r0, r5
   2471e:	f7f6 fd3f 	bl	1b1a0 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   24722:	68ab      	ldr	r3, [r5, #8]
   24724:	441c      	add	r4, r3
		if (diff <
   24726:	2c26      	cmp	r4, #38	; 0x26
   24728:	d800      	bhi.n	2472c <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
   2472a:	60ac      	str	r4, [r5, #8]
		return 1;
   2472c:	2001      	movs	r0, #1
   2472e:	e000      	b.n	24732 <preempt_calc+0x3a>
	return 0;
   24730:	2000      	movs	r0, #0
}
   24732:	bd70      	pop	{r4, r5, r6, pc}

00024734 <ctrl_tx_enqueue>:
{
   24734:	b510      	push	{r4, lr}
	    !conn->empty &&
   24736:	f890 40d0 	ldrb.w	r4, [r0, #208]	; 0xd0
   2473a:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
	if (
   2473e:	f014 0f80 	tst.w	r4, #128	; 0x80
   24742:	d118      	bne.n	24776 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   24744:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
	    !conn->empty &&
   24748:	b1ab      	cbz	r3, 24776 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   2474a:	0724      	lsls	r4, r4, #28
   2474c:	d413      	bmi.n	24776 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   2474e:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
   24752:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   24754:	bf04      	itt	eq
   24756:	681c      	ldreq	r4, [r3, #0]
   24758:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
		if (!conn->pkt_tx_ctrl) {
   2475c:	b992      	cbnz	r2, 24784 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
   2475e:	681a      	ldr	r2, [r3, #0]
   24760:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
   24762:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   24764:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	conn->pkt_tx_ctrl_last = node_tx;
   24768:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
	if (node_tx->next == 0) {
   2476c:	680b      	ldr	r3, [r1, #0]
   2476e:	b90b      	cbnz	r3, 24774 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
   24770:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
}
   24774:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
   24776:	b92a      	cbnz	r2, 24784 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
   24778:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   2477c:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   2477e:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   24782:	e7ef      	b.n	24764 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   24784:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   24788:	681a      	ldr	r2, [r3, #0]
   2478a:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   2478c:	6019      	str	r1, [r3, #0]
   2478e:	e7eb      	b.n	24768 <ctrl_tx_enqueue+0x34>

00024790 <ctrl_tx_sec_enqueue>:
{
   24790:	b410      	push	{r4}
	if (conn->pause_tx) {
   24792:	f890 40d0 	ldrb.w	r4, [r0, #208]	; 0xd0
   24796:	0724      	lsls	r4, r4, #28
{
   24798:	460a      	mov	r2, r1
	if (conn->pause_tx) {
   2479a:	d50f      	bpl.n	247bc <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
   2479c:	f8d0 1118 	ldr.w	r1, [r0, #280]	; 0x118
   247a0:	b931      	cbnz	r1, 247b0 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
   247a2:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   247a6:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
   247a8:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
}
   247ac:	bc10      	pop	{r4}
   247ae:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   247b0:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   247b4:	6819      	ldr	r1, [r3, #0]
   247b6:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   247b8:	601a      	str	r2, [r3, #0]
   247ba:	e7f7      	b.n	247ac <ctrl_tx_sec_enqueue+0x1c>
}
   247bc:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
   247be:	f7ff bfb9 	b.w	24734 <ctrl_tx_enqueue>

000247c2 <ll_radio_state_abort>:
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   247c2:	2005      	movs	r0, #5
   247c4:	f7f7 b968 	b.w	1ba98 <event_stop.constprop.46>

000247c8 <ll_conn_update>:
{
   247c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   247cc:	460c      	mov	r4, r1
   247ce:	4691      	mov	r9, r2
   247d0:	469a      	mov	sl, r3
   247d2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   247d6:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
   247da:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	conn = connection_get(handle);
   247de:	f7f6 f86d 	bl	1a8bc <connection_get>
	if (!conn) {
   247e2:	2800      	cmp	r0, #0
   247e4:	d061      	beq.n	248aa <ll_conn_update+0xe2>
	if (!cmd) {
   247e6:	bb84      	cbnz	r4, 2484a <ll_conn_update+0x82>
		if (!conn->llcp_conn_param.disabled &&
   247e8:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   247ec:	06d9      	lsls	r1, r3, #27
   247ee:	d407      	bmi.n	24800 <ll_conn_update+0x38>
		    (!conn->common.fex_valid ||
   247f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		if (!conn->llcp_conn_param.disabled &&
   247f4:	069a      	lsls	r2, r3, #26
   247f6:	d527      	bpl.n	24848 <ll_conn_update+0x80>
		     (conn->llcp_features &
   247f8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
		    (!conn->common.fex_valid ||
   247fc:	079b      	lsls	r3, r3, #30
   247fe:	d423      	bmi.n	24848 <ll_conn_update+0x80>
		} else if (conn->role) {
   24800:	f990 301d 	ldrsb.w	r3, [r0, #29]
   24804:	2b00      	cmp	r3, #0
   24806:	db52      	blt.n	248ae <ll_conn_update+0xe6>
		if (conn->llcp_req != conn->llcp_ack) {
   24808:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
   2480c:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   24810:	429a      	cmp	r2, r3
   24812:	d14e      	bne.n	248b2 <ll_conn_update+0xea>
		conn->llcp.conn_upd.win_offset_us = 0U;
   24814:	2300      	movs	r3, #0
   24816:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   24818:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
		conn->llcp.conn_upd.interval = interval_max;
   2481c:	f8a0 8062 	strh.w	r8, [r0, #98]	; 0x62
		conn->llcp.conn_upd.win_size = 1U;
   24820:	2101      	movs	r1, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   24822:	f023 0307 	bic.w	r3, r3, #7
   24826:	430b      	orrs	r3, r1
		conn->llcp_req++;
   24828:	440a      	add	r2, r1
		conn->llcp.conn_upd.win_size = 1U;
   2482a:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
		conn->llcp.conn_upd.latency = latency;
   2482e:	f8a0 7064 	strh.w	r7, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = timeout;
   24832:	f8a0 6066 	strh.w	r6, [r0, #102]	; 0x66
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   24836:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
		conn->llcp_type = LLCP_CONN_UPD;
   2483a:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
		conn->llcp_req++;
   2483e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
   24842:	4620      	mov	r0, r4
   24844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cmd++;
   24848:	2401      	movs	r4, #1
		cmd--;
   2484a:	3c01      	subs	r4, #1
		if (cmd) {
   2484c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   24850:	f890 50a8 	ldrb.w	r5, [r0, #168]	; 0xa8
   24854:	f890 c0a9 	ldrb.w	ip, [r0, #169]	; 0xa9
   24858:	d011      	beq.n	2487e <ll_conn_update+0xb6>
			if ((conn->llcp_conn_param.req ==
   2485a:	4565      	cmp	r5, ip
   2485c:	d029      	beq.n	248b2 <ll_conn_update+0xea>
			    (conn->llcp_conn_param.state !=
   2485e:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
			     conn->llcp_conn_param.ack) ||
   24862:	f003 0207 	and.w	r2, r3, #7
   24866:	2a03      	cmp	r2, #3
   24868:	d123      	bne.n	248b2 <ll_conn_update+0xea>
			conn->llcp_conn_param.state = cmd;
   2486a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   2486e:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   24872:	f880 90ab 	strb.w	r9, [r0, #171]	; 0xab
			conn->llcp_conn_param.cmd = 1U;
   24876:	f880 30aa 	strb.w	r3, [r0, #170]	; 0xaa
	return 0;
   2487a:	2400      	movs	r4, #0
   2487c:	e7e1      	b.n	24842 <ll_conn_update+0x7a>
			if (conn->llcp_conn_param.req !=
   2487e:	4565      	cmp	r5, ip
   24880:	d117      	bne.n	248b2 <ll_conn_update+0xea>
			conn->llcp_conn_param.state = cmd;
   24882:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
			conn->llcp_conn_param.interval_min = interval_min;
   24886:	f8a0 a0ac 	strh.w	sl, [r0, #172]	; 0xac
			conn->llcp_conn_param.state = cmd;
   2488a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2488e:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   24892:	3501      	adds	r5, #1
			conn->llcp_conn_param.interval_max = interval_max;
   24894:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
			conn->llcp_conn_param.latency = latency;
   24898:	f8a0 70b0 	strh.w	r7, [r0, #176]	; 0xb0
			conn->llcp_conn_param.timeout = timeout;
   2489c:	f8a0 60b2 	strh.w	r6, [r0, #178]	; 0xb2
			conn->llcp_conn_param.state = cmd;
   248a0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
			conn->llcp_conn_param.req++;
   248a4:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
   248a8:	e7cb      	b.n	24842 <ll_conn_update+0x7a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   248aa:	2402      	movs	r4, #2
   248ac:	e7c9      	b.n	24842 <ll_conn_update+0x7a>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   248ae:	241a      	movs	r4, #26
   248b0:	e7c7      	b.n	24842 <ll_conn_update+0x7a>
			return BT_HCI_ERR_CMD_DISALLOWED;
   248b2:	240c      	movs	r4, #12
   248b4:	e7c5      	b.n	24842 <ll_conn_update+0x7a>

000248b6 <ll_chm_get>:
{
   248b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248b8:	460d      	mov	r5, r1
	conn = connection_get(handle);
   248ba:	f7f5 ffff 	bl	1a8bc <connection_get>
	if (!conn) {
   248be:	4604      	mov	r4, r0
   248c0:	b160      	cbz	r0, 248dc <ll_chm_get+0x26>
		conn->chm_update = 0U;
   248c2:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   248c4:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0U;
   248c8:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   248ca:	2205      	movs	r2, #5
   248cc:	4631      	mov	r1, r6
   248ce:	4628      	mov	r0, r5
   248d0:	f7fd fad9 	bl	21e86 <memcpy>
	} while (conn->chm_update);
   248d4:	7f20      	ldrb	r0, [r4, #28]
   248d6:	2800      	cmp	r0, #0
   248d8:	d1f6      	bne.n	248c8 <ll_chm_get+0x12>
}
   248da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   248dc:	2002      	movs	r0, #2
   248de:	e7fc      	b.n	248da <ll_chm_get+0x24>

000248e0 <ll_feature_req_send>:
{
   248e0:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   248e2:	f7f5 ffeb 	bl	1a8bc <connection_get>
	if (!conn) {
   248e6:	b168      	cbz	r0, 24904 <ll_feature_req_send+0x24>
	if (conn->llcp_req != conn->llcp_ack) {
   248e8:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   248ec:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   248f0:	4293      	cmp	r3, r2
   248f2:	d109      	bne.n	24908 <ll_feature_req_send+0x28>
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   248f4:	2203      	movs	r2, #3
	conn->llcp_req++;
   248f6:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   248f8:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
	conn->llcp_req++;
   248fc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	return 0;
   24900:	2000      	movs	r0, #0
}
   24902:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   24904:	2002      	movs	r0, #2
   24906:	e7fc      	b.n	24902 <ll_feature_req_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   24908:	200c      	movs	r0, #12
   2490a:	e7fa      	b.n	24902 <ll_feature_req_send+0x22>

0002490c <ll_version_ind_send>:
{
   2490c:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   2490e:	f7f5 ffd5 	bl	1a8bc <connection_get>
	if (!conn) {
   24912:	b168      	cbz	r0, 24930 <ll_version_ind_send+0x24>
	if (conn->llcp_req != conn->llcp_ack) {
   24914:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   24918:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   2491c:	4293      	cmp	r3, r2
   2491e:	d109      	bne.n	24934 <ll_version_ind_send+0x28>
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   24920:	2204      	movs	r2, #4
	conn->llcp_req++;
   24922:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   24924:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
	conn->llcp_req++;
   24928:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	return 0;
   2492c:	2000      	movs	r0, #0
}
   2492e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   24930:	2002      	movs	r0, #2
   24932:	e7fc      	b.n	2492e <ll_version_ind_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   24934:	200c      	movs	r0, #12
   24936:	e7fa      	b.n	2492e <ll_version_ind_send+0x22>

00024938 <ll_terminate_ind_send>:
{
   24938:	b510      	push	{r4, lr}
   2493a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   2493c:	f7f5 ffbe 	bl	1a8bc <connection_get>
	if (!conn) {
   24940:	b160      	cbz	r0, 2495c <ll_terminate_ind_send+0x24>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   24942:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
   24946:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
   2494a:	4293      	cmp	r3, r2
   2494c:	d108      	bne.n	24960 <ll_terminate_ind_send+0x28>
	conn->llcp_terminate.req++;
   2494e:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   24950:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
	conn->llcp_terminate.req++;
   24954:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
	return 0;
   24958:	2000      	movs	r0, #0
}
   2495a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2495c:	2002      	movs	r0, #2
   2495e:	e7fc      	b.n	2495a <ll_terminate_ind_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   24960:	200c      	movs	r0, #12
   24962:	e7fa      	b.n	2495a <ll_terminate_ind_send+0x22>

00024964 <ll_tx_pwr_lvl_get>:
{
   24964:	b510      	push	{r4, lr}
   24966:	4614      	mov	r4, r2
	conn = connection_get(handle);
   24968:	f7f5 ffa8 	bl	1a8bc <connection_get>
	if (!conn) {
   2496c:	b110      	cbz	r0, 24974 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   2496e:	2000      	movs	r0, #0
   24970:	7020      	strb	r0, [r4, #0]
}
   24972:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   24974:	2002      	movs	r0, #2
   24976:	e7fc      	b.n	24972 <ll_tx_pwr_lvl_get+0xe>

00024978 <ll_adv_scan_state_cb>:

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
   24978:	4770      	bx	lr

0002497a <swi5_nrf5_isr>:
	mayfly_run(MAYFLY_CALL_ID_1);
   2497a:	2001      	movs	r0, #1
   2497c:	f7f3 bebe 	b.w	186fc <mayfly_run>

00024980 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   24980:	4668      	mov	r0, sp
   24982:	f020 0107 	bic.w	r1, r0, #7
   24986:	468d      	mov	sp, r1
   24988:	b501      	push	{r0, lr}
   2498a:	f7fd f989 	bl	21ca0 <z_arch_isr_direct_header>
	isr_radio();
   2498e:	f7f8 fa0f 	bl	1cdb0 <isr_radio>
	ISR_DIRECT_PM();
   24992:	f7e0 fbe1 	bl	5158 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	z_sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		_IntExit();
   24996:	f7e0 f9d5 	bl	4d44 <_IntExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2499a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2499e:	4685      	mov	sp, r0
   249a0:	4770      	bx	lr

000249a2 <radio_active_callback>:
}
   249a2:	4770      	bx	lr

000249a4 <ll_timeslice_ticker_id_get>:

void ll_timeslice_ticker_id_get(u8_t * const instance_index, u8_t * const user_id)
{
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES); /* The last index in the total tickers */
   249a4:	2308      	movs	r3, #8
   249a6:	700b      	strb	r3, [r1, #0]
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
   249a8:	2300      	movs	r3, #0
   249aa:	7003      	strb	r3, [r0, #0]
}
   249ac:	4770      	bx	lr

000249ae <ll_adv_data_set>:
{
   249ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   249b2:	4688      	mov	r8, r1
   249b4:	4606      	mov	r6, r0
	radio_adv_data = radio_adv_data_get();
   249b6:	f7f7 fbcd 	bl	1c154 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   249ba:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   249be:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   249c2:	ebc4 02c2 	rsb	r2, r4, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
   249c6:	4605      	mov	r5, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   249c8:	f810 c002 	ldrb.w	ip, [r0, r2]
   249cc:	f00c 030f 	and.w	r3, ip, #15
   249d0:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   249d2:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   249d6:	d032      	beq.n	24a3e <ll_adv_data_set+0x90>
	if (radio_adv_data->first == radio_adv_data->last) {
   249d8:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   249dc:	42a3      	cmp	r3, r4
   249de:	d104      	bne.n	249ea <ll_adv_data_set+0x3c>
		last = radio_adv_data->last + 1;
   249e0:	3401      	adds	r4, #1
   249e2:	b2e4      	uxtb	r4, r4
			last = 0U;
   249e4:	2c02      	cmp	r4, #2
   249e6:	bf08      	it	eq
   249e8:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   249ea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   249ee:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   249f2:	18ef      	adds	r7, r5, r3
	pdu->type = prev->type;
   249f4:	5ce8      	ldrb	r0, [r5, r3]
   249f6:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0U;
   249fa:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
   249fe:	54e8      	strb	r0, [r5, r3]
	pdu->tx_addr = prev->tx_addr;
   24a00:	5ca8      	ldrb	r0, [r5, r2]
   24a02:	f815 c003 	ldrb.w	ip, [r5, r3]
   24a06:	f3c0 1080 	ubfx	r0, r0, #6, #1
   24a0a:	f360 1c86 	bfi	ip, r0, #6, #1
   24a0e:	f805 c003 	strb.w	ip, [r5, r3]
	pdu->rx_addr = prev->rx_addr;
   24a12:	5caa      	ldrb	r2, [r5, r2]
   24a14:	fa5f f08c 	uxtb.w	r0, ip
   24a18:	09d2      	lsrs	r2, r2, #7
   24a1a:	f362 10c7 	bfi	r0, r2, #7, #1
   24a1e:	54e8      	strb	r0, [r5, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   24a20:	2206      	movs	r2, #6
   24a22:	3102      	adds	r1, #2
   24a24:	1cb8      	adds	r0, r7, #2
   24a26:	f7fd fa2e 	bl	21e86 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   24a2a:	4632      	mov	r2, r6
   24a2c:	4641      	mov	r1, r8
   24a2e:	f107 0008 	add.w	r0, r7, #8
	pdu->len = BDADDR_SIZE + len;
   24a32:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   24a34:	f7fd fa27 	bl	21e86 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   24a38:	707e      	strb	r6, [r7, #1]
	radio_adv_data->last = last;
   24a3a:	f885 404f 	strb.w	r4, [r5, #79]	; 0x4f
}
   24a3e:	2000      	movs	r0, #0
   24a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024a44 <ll_adv_scan_rsp_set>:
{
   24a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a48:	4606      	mov	r6, r0
   24a4a:	460f      	mov	r7, r1
	radio_scan_data = radio_scan_data_get();
   24a4c:	f7f7 fb86 	bl	1c15c <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   24a50:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   24a54:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   24a58:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   24a5a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   24a5c:	d133      	bne.n	24ac6 <ll_adv_scan_rsp_set+0x82>
		last = radio_scan_data->last + 1;
   24a5e:	1c5d      	adds	r5, r3, #1
   24a60:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   24a62:	2d02      	cmp	r5, #2
			last = 0;
   24a64:	bf08      	it	eq
   24a66:	2500      	moveq	r5, #0
	prev = (struct pdu_adv *)
   24a68:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   24a6c:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   24a70:	b22b      	sxth	r3, r5
   24a72:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   24a76:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	prev = (struct pdu_adv *)
   24a7a:	18a1      	adds	r1, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   24a7c:	5ce0      	ldrb	r0, [r4, r3]
   24a7e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   24a82:	f040 0004 	orr.w	r0, r0, #4
   24a86:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   24a88:	5ca0      	ldrb	r0, [r4, r2]
   24a8a:	5ce2      	ldrb	r2, [r4, r3]
   24a8c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   24a90:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   24a94:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
   24a98:	f36f 12c7 	bfc	r2, #7, #1
   24a9c:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
   24a9e:	1db3      	adds	r3, r6, #6
   24aa0:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   24aa4:	2206      	movs	r2, #6
   24aa6:	3102      	adds	r1, #2
   24aa8:	f108 0002 	add.w	r0, r8, #2
   24aac:	f7fd f9eb 	bl	21e86 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   24ab0:	4632      	mov	r2, r6
   24ab2:	4639      	mov	r1, r7
   24ab4:	f108 0008 	add.w	r0, r8, #8
   24ab8:	f7fd f9e5 	bl	21e86 <memcpy>
	radio_scan_data->last = last;
   24abc:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
   24ac0:	2000      	movs	r0, #0
   24ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24ac6:	461d      	mov	r5, r3
   24ac8:	e7ce      	b.n	24a68 <ll_adv_scan_rsp_set+0x24>

00024aca <ll_wl_size_get>:
}
   24aca:	2008      	movs	r0, #8
   24acc:	4770      	bx	lr

00024ace <ecb_encrypt_be>:

void ecb_encrypt_be(u8_t const *const key_be, u8_t const *const clear_text_be,
		    u8_t * const cipher_text_be)
{
   24ace:	b530      	push	{r4, r5, lr}
   24ad0:	b08d      	sub	sp, #52	; 0x34
   24ad2:	460d      	mov	r5, r1
   24ad4:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   24ad6:	4601      	mov	r1, r0
   24ad8:	2210      	movs	r2, #16
   24ada:	4668      	mov	r0, sp
   24adc:	f7fd f9d3 	bl	21e86 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   24ae0:	2210      	movs	r2, #16
   24ae2:	4629      	mov	r1, r5
   24ae4:	eb0d 0002 	add.w	r0, sp, r2
   24ae8:	f7fd f9cd 	bl	21e86 <memcpy>

	do_ecb(&ecb);
   24aec:	4668      	mov	r0, sp
   24aee:	f7f8 f8b9 	bl	1cc64 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   24af2:	2210      	movs	r2, #16
   24af4:	a908      	add	r1, sp, #32
   24af6:	4620      	mov	r0, r4
   24af8:	f7fd f9c5 	bl	21e86 <memcpy>
}
   24afc:	b00d      	add	sp, #52	; 0x34
   24afe:	bd30      	pop	{r4, r5, pc}

00024b00 <ecb_encrypt>:

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   24b00:	b570      	push	{r4, r5, r6, lr}
   24b02:	b08c      	sub	sp, #48	; 0x30
   24b04:	460e      	mov	r6, r1
   24b06:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   24b08:	4601      	mov	r1, r0
   24b0a:	2210      	movs	r2, #16
   24b0c:	4668      	mov	r0, sp
{
   24b0e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   24b10:	f7ff fbe0 	bl	242d4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   24b14:	2210      	movs	r2, #16
   24b16:	eb0d 0002 	add.w	r0, sp, r2
   24b1a:	4631      	mov	r1, r6
   24b1c:	f7ff fbda 	bl	242d4 <mem_rcopy>

	do_ecb(&ecb);
   24b20:	4668      	mov	r0, sp
   24b22:	f7f8 f89f 	bl	1cc64 <do_ecb>

	if (cipher_text_le) {
   24b26:	b125      	cbz	r5, 24b32 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   24b28:	2210      	movs	r2, #16
   24b2a:	a908      	add	r1, sp, #32
   24b2c:	4628      	mov	r0, r5
   24b2e:	f7ff fbd1 	bl	242d4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   24b32:	b124      	cbz	r4, 24b3e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   24b34:	2210      	movs	r2, #16
   24b36:	a908      	add	r1, sp, #32
   24b38:	4620      	mov	r0, r4
   24b3a:	f7fd f9a4 	bl	21e86 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   24b3e:	b00c      	add	sp, #48	; 0x30
   24b40:	bd70      	pop	{r4, r5, r6, pc}

00024b42 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   24b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   24b4a:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   24b4c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   24b50:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   24b54:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   24b58:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   24b5c:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   24b60:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   24b64:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   24b68:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   24b6c:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   24b70:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   24b74:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   24b78:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   24b7c:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   24b80:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   24b84:	4770      	bx	lr

00024b86 <radio_tx_chain_delay_get>:
}
   24b86:	2001      	movs	r0, #1
   24b88:	4770      	bx	lr

00024b8a <radio_rx_ready_delay_get>:
}
   24b8a:	2029      	movs	r0, #41	; 0x29
   24b8c:	4770      	bx	lr

00024b8e <radio_rx_chain_delay_get>:
	switch (phy) {
   24b8e:	2802      	cmp	r0, #2
}
   24b90:	bf14      	ite	ne
   24b92:	200a      	movne	r0, #10
   24b94:	2006      	moveq	r0, #6
   24b96:	4770      	bx	lr

00024b98 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   24b98:	4288      	cmp	r0, r1
   24b9a:	d00a      	beq.n	24bb2 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   24b9c:	b918      	cbnz	r0, 24ba6 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   24b9e:	1e4b      	subs	r3, r1, #1
   24ba0:	4258      	negs	r0, r3
   24ba2:	4158      	adcs	r0, r3
   24ba4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   24ba6:	2801      	cmp	r0, #1
   24ba8:	d105      	bne.n	24bb6 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   24baa:	fab1 f081 	clz	r0, r1
   24bae:	0940      	lsrs	r0, r0, #5
   24bb0:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   24bb2:	2001      	movs	r0, #1
   24bb4:	4770      	bx	lr
   24bb6:	2000      	movs	r0, #0
}
   24bb8:	4770      	bx	lr

00024bba <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   24bba:	4601      	mov	r1, r0
   24bbc:	2000      	movs	r0, #0
   24bbe:	f7f8 b849 	b.w	1cc54 <cntr_cmp_set>

00024bc2 <fixed_data_unref>:
}
   24bc2:	4770      	bx	lr

00024bc4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   24bc4:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   24bc6:	685b      	ldr	r3, [r3, #4]
   24bc8:	460a      	mov	r2, r1
   24bca:	6819      	ldr	r1, [r3, #0]
   24bcc:	f7f8 bd5c 	b.w	1d688 <net_buf_alloc_len>

00024bd0 <net_buf_get>:
{
   24bd0:	b570      	push	{r4, r5, r6, lr}
   24bd2:	4606      	mov	r6, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   24bd4:	f000 fa5b 	bl	2508e <z_impl_k_queue_get>
	if (!buf) {
   24bd8:	4605      	mov	r5, r0
   24bda:	b128      	cbz	r0, 24be8 <net_buf_get+0x18>
   24bdc:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24bde:	7963      	ldrb	r3, [r4, #5]
   24be0:	f013 0301 	ands.w	r3, r3, #1
   24be4:	d102      	bne.n	24bec <net_buf_get+0x1c>
	frag->frags = NULL;
   24be6:	6023      	str	r3, [r4, #0]
}
   24be8:	4628      	mov	r0, r5
   24bea:	bd70      	pop	{r4, r5, r6, pc}
   24bec:	2100      	movs	r1, #0
   24bee:	4630      	mov	r0, r6
   24bf0:	f000 fa4d 	bl	2508e <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   24bf4:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   24bf6:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   24bf8:	f023 0301 	bic.w	r3, r3, #1
   24bfc:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24bfe:	4604      	mov	r4, r0
   24c00:	e7ed      	b.n	24bde <net_buf_get+0xe>

00024c02 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   24c02:	6883      	ldr	r3, [r0, #8]
   24c04:	4419      	add	r1, r3
   24c06:	6001      	str	r1, [r0, #0]
}
   24c08:	4770      	bx	lr

00024c0a <net_buf_slist_put>:
{
   24c0a:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   24c0c:	460b      	mov	r3, r1
   24c0e:	681c      	ldr	r4, [r3, #0]
   24c10:	b974      	cbnz	r4, 24c30 <net_buf_slist_put+0x26>
   24c12:	f04f 0220 	mov.w	r2, #32
   24c16:	f3ef 8411 	mrs	r4, BASEPRI
   24c1a:	f382 8811 	msr	BASEPRI, r2
Z_GENLIST_APPEND_LIST(slist, snode)
   24c1e:	6842      	ldr	r2, [r0, #4]
   24c20:	b962      	cbnz	r2, 24c3c <net_buf_slist_put+0x32>
	list->head = node;
   24c22:	6001      	str	r1, [r0, #0]
	list->tail = node;
   24c24:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   24c26:	f384 8811 	msr	BASEPRI, r4
   24c2a:	f3bf 8f6f 	isb	sy
}
   24c2e:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   24c30:	795a      	ldrb	r2, [r3, #5]
   24c32:	f042 0201 	orr.w	r2, r2, #1
   24c36:	715a      	strb	r2, [r3, #5]
   24c38:	4623      	mov	r3, r4
   24c3a:	e7e8      	b.n	24c0e <net_buf_slist_put+0x4>
	parent->next = child;
   24c3c:	6011      	str	r1, [r2, #0]
   24c3e:	e7f1      	b.n	24c24 <net_buf_slist_put+0x1a>

00024c40 <net_buf_slist_get>:
{
   24c40:	b570      	push	{r4, r5, r6, lr}
   24c42:	4603      	mov	r3, r0
	__asm__ volatile(
   24c44:	f04f 0220 	mov.w	r2, #32
   24c48:	f3ef 8111 	mrs	r1, BASEPRI
   24c4c:	f382 8811 	msr	BASEPRI, r2
Z_GENLIST_IS_EMPTY(slist)
   24c50:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24c52:	b128      	cbz	r0, 24c60 <net_buf_slist_get+0x20>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24c54:	685c      	ldr	r4, [r3, #4]
   24c56:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24c58:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24c5a:	42a0      	cmp	r0, r4
	list->tail = node;
   24c5c:	bf08      	it	eq
   24c5e:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   24c60:	f381 8811 	msr	BASEPRI, r1
   24c64:	f3bf 8f6f 	isb	sy
	if (!buf) {
   24c68:	b128      	cbz	r0, 24c76 <net_buf_slist_get+0x36>
   24c6a:	4602      	mov	r2, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24c6c:	7951      	ldrb	r1, [r2, #5]
   24c6e:	f011 0101 	ands.w	r1, r1, #1
   24c72:	d101      	bne.n	24c78 <net_buf_slist_get+0x38>
	frag->frags = NULL;
   24c74:	6011      	str	r1, [r2, #0]
}
   24c76:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   24c78:	f04f 0120 	mov.w	r1, #32
   24c7c:	f3ef 8511 	mrs	r5, BASEPRI
   24c80:	f381 8811 	msr	BASEPRI, r1
Z_GENLIST_IS_EMPTY(slist)
   24c84:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   24c86:	b129      	cbz	r1, 24c94 <net_buf_slist_get+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24c88:	685e      	ldr	r6, [r3, #4]
   24c8a:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   24c8c:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24c8e:	42b1      	cmp	r1, r6
	list->tail = node;
   24c90:	bf08      	it	eq
   24c92:	605c      	streq	r4, [r3, #4]
		frag->frags = (void *)sys_slist_get(list);
   24c94:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   24c96:	f385 8811 	msr	BASEPRI, r5
   24c9a:	f3bf 8f6f 	isb	sy
		frag->flags &= ~NET_BUF_FRAGS;
   24c9e:	7951      	ldrb	r1, [r2, #5]
   24ca0:	f021 0101 	bic.w	r1, r1, #1
   24ca4:	7151      	strb	r1, [r2, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   24ca6:	6812      	ldr	r2, [r2, #0]
   24ca8:	e7e0      	b.n	24c6c <net_buf_slist_get+0x2c>

00024caa <net_buf_put>:
{
   24caa:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   24cac:	460a      	mov	r2, r1
   24cae:	6814      	ldr	r4, [r2, #0]
   24cb0:	b914      	cbnz	r4, 24cb8 <net_buf_put+0xe>
}
   24cb2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   24cb4:	f000 b9ce 	b.w	25054 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   24cb8:	7953      	ldrb	r3, [r2, #5]
   24cba:	f043 0301 	orr.w	r3, r3, #1
   24cbe:	7153      	strb	r3, [r2, #5]
   24cc0:	4622      	mov	r2, r4
   24cc2:	e7f4      	b.n	24cae <net_buf_put+0x4>

00024cc4 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   24cc4:	7903      	ldrb	r3, [r0, #4]
   24cc6:	3301      	adds	r3, #1
   24cc8:	7103      	strb	r3, [r0, #4]
	return buf;
}
   24cca:	4770      	bx	lr

00024ccc <net_buf_simple_add>:
	return buf->data + buf->len;
   24ccc:	8883      	ldrh	r3, [r0, #4]
   24cce:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   24cd0:	4419      	add	r1, r3
   24cd2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   24cd4:	18d0      	adds	r0, r2, r3
   24cd6:	4770      	bx	lr

00024cd8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   24cd8:	b430      	push	{r4, r5}
   24cda:	8883      	ldrh	r3, [r0, #4]
   24cdc:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   24cde:	189d      	adds	r5, r3, r2
   24ce0:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24ce2:	18e0      	adds	r0, r4, r3
}
   24ce4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24ce6:	f7fd b8ce 	b.w	21e86 <memcpy>

00024cea <net_buf_simple_add_u8>:
   24cea:	8883      	ldrh	r3, [r0, #4]
   24cec:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   24cee:	b510      	push	{r4, lr}
	buf->len += len;
   24cf0:	1c5c      	adds	r4, r3, #1
   24cf2:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   24cf4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   24cf6:	18d0      	adds	r0, r2, r3
   24cf8:	bd10      	pop	{r4, pc}

00024cfa <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   24cfa:	b513      	push	{r0, r1, r4, lr}
   24cfc:	8883      	ldrh	r3, [r0, #4]
   24cfe:	6804      	ldr	r4, [r0, #0]
   24d00:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->len += len;
   24d04:	1c9a      	adds	r2, r3, #2
   24d06:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   24d08:	f10d 0106 	add.w	r1, sp, #6
   24d0c:	2202      	movs	r2, #2
   24d0e:	18e0      	adds	r0, r4, r3
   24d10:	f7fd f8b9 	bl	21e86 <memcpy>
}
   24d14:	b002      	add	sp, #8
   24d16:	bd10      	pop	{r4, pc}

00024d18 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   24d18:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   24d1a:	020b      	lsls	r3, r1, #8
   24d1c:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
   24d20:	8883      	ldrh	r3, [r0, #4]
   24d22:	6804      	ldr	r4, [r0, #0]
   24d24:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->len += len;
   24d28:	1c9a      	adds	r2, r3, #2
   24d2a:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   24d2c:	f10d 0106 	add.w	r1, sp, #6
   24d30:	2202      	movs	r2, #2
   24d32:	18e0      	adds	r0, r4, r3
   24d34:	f7fd f8a7 	bl	21e86 <memcpy>
}
   24d38:	b002      	add	sp, #8
   24d3a:	bd10      	pop	{r4, pc}

00024d3c <net_buf_simple_add_be32>:
	val = sys_cpu_to_le32(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, u32_t val)
{
   24d3c:	b513      	push	{r0, r1, r4, lr}
   24d3e:	8883      	ldrh	r3, [r0, #4]
   24d40:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   24d42:	1d1a      	adds	r2, r3, #4
   24d44:	8082      	strh	r2, [r0, #4]
   24d46:	ba09      	rev	r1, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be32(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   24d48:	2204      	movs	r2, #4
	val = sys_cpu_to_be32(val);
   24d4a:	9101      	str	r1, [sp, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   24d4c:	18e0      	adds	r0, r4, r3
   24d4e:	eb0d 0102 	add.w	r1, sp, r2
   24d52:	f7fd f898 	bl	21e86 <memcpy>
}
   24d56:	b002      	add	sp, #8
   24d58:	bd10      	pop	{r4, pc}

00024d5a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   24d5a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   24d5c:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   24d5e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   24d60:	4411      	add	r1, r2
	buf->data -= len;
   24d62:	6003      	str	r3, [r0, #0]
	buf->len += len;
   24d64:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   24d66:	4618      	mov	r0, r3
   24d68:	4770      	bx	lr

00024d6a <net_buf_simple_push_be16>:
	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_push_be16(struct net_buf_simple *buf, u16_t val)
{
   24d6a:	b507      	push	{r0, r1, r2, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   24d6c:	020b      	lsls	r3, r1, #8
	buf->len += len;
   24d6e:	8882      	ldrh	r2, [r0, #4]
	val = sys_cpu_to_be16(val);
   24d70:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
	buf->data -= len;
   24d74:	6803      	ldr	r3, [r0, #0]
	val = sys_cpu_to_be16(val);
   24d76:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->data -= len;
   24d7a:	3b02      	subs	r3, #2
	buf->len += len;
   24d7c:	3202      	adds	r2, #2
	buf->data -= len;
   24d7e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   24d80:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   24d82:	f10d 0106 	add.w	r1, sp, #6
   24d86:	2202      	movs	r2, #2
   24d88:	4618      	mov	r0, r3
   24d8a:	f7fd f87c 	bl	21e86 <memcpy>
}
   24d8e:	b003      	add	sp, #12
   24d90:	f85d fb04 	ldr.w	pc, [sp], #4

00024d94 <net_buf_simple_push_u8>:
	buf->data -= len;
   24d94:	6802      	ldr	r2, [r0, #0]
   24d96:	1e53      	subs	r3, r2, #1
   24d98:	6003      	str	r3, [r0, #0]
	buf->len += len;
   24d9a:	8883      	ldrh	r3, [r0, #4]
   24d9c:	3301      	adds	r3, #1
   24d9e:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, u8_t val)
{
	u8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   24da0:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   24da4:	4770      	bx	lr

00024da6 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   24da6:	8883      	ldrh	r3, [r0, #4]
   24da8:	1a5b      	subs	r3, r3, r1
   24daa:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   24dac:	6803      	ldr	r3, [r0, #0]
   24dae:	4419      	add	r1, r3
   24db0:	6001      	str	r1, [r0, #0]
}
   24db2:	4608      	mov	r0, r1
   24db4:	4770      	bx	lr

00024db6 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   24db6:	4603      	mov	r3, r0
	void *data = buf->data;
   24db8:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   24dba:	889a      	ldrh	r2, [r3, #4]
   24dbc:	1a52      	subs	r2, r2, r1
	buf->data += len;
   24dbe:	4401      	add	r1, r0
	buf->len -= len;
   24dc0:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   24dc2:	6019      	str	r1, [r3, #0]

	return data;
}
   24dc4:	4770      	bx	lr

00024dc6 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   24dc6:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   24dc8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   24dca:	2101      	movs	r1, #1
	val = buf->data[0];
   24dcc:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   24dce:	f7ff ffea 	bl	24da6 <net_buf_simple_pull>

	return val;
}
   24dd2:	4610      	mov	r0, r2
   24dd4:	bd08      	pop	{r3, pc}

00024dd6 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   24dd6:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   24dd8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   24dda:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   24ddc:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   24dde:	f7ff ffe2 	bl	24da6 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   24de2:	4610      	mov	r0, r2
   24de4:	bd08      	pop	{r3, pc}

00024de6 <net_buf_simple_pull_be16>:

u16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
   24de6:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   24de8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   24dea:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   24dec:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   24dee:	f7ff ffda 	bl	24da6 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
   24df2:	0210      	lsls	r0, r2, #8
   24df4:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
}
   24df8:	b280      	uxth	r0, r0
   24dfa:	bd08      	pop	{r3, pc}

00024dfc <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

u32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   24dfc:	b508      	push	{r3, lr}
   24dfe:	6803      	ldr	r3, [r0, #0]
   24e00:	681a      	ldr	r2, [r3, #0]
	u32_t val;

	val = UNALIGNED_GET((u32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   24e02:	2104      	movs	r1, #4
   24e04:	ba12      	rev	r2, r2
   24e06:	f7ff ffce 	bl	24da6 <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   24e0a:	4610      	mov	r0, r2
   24e0c:	bd08      	pop	{r3, pc}

00024e0e <net_buf_simple_headroom>:

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   24e0e:	6802      	ldr	r2, [r0, #0]
   24e10:	6880      	ldr	r0, [r0, #8]
}
   24e12:	1a10      	subs	r0, r2, r0
   24e14:	4770      	bx	lr

00024e16 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   24e16:	8883      	ldrh	r3, [r0, #4]
   24e18:	88c2      	ldrh	r2, [r0, #6]
   24e1a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   24e1c:	6803      	ldr	r3, [r0, #0]
   24e1e:	6880      	ldr	r0, [r0, #8]
   24e20:	1a18      	subs	r0, r3, r0
}
   24e22:	1a10      	subs	r0, r2, r0
   24e24:	4770      	bx	lr

00024e26 <is_regular_addr_valid>:
	if (addr >= NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   24e26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   24e2a:	b510      	push	{r4, lr}
	if (addr >= NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   24e2c:	691c      	ldr	r4, [r3, #16]
   24e2e:	695a      	ldr	r2, [r3, #20]
   24e30:	4362      	muls	r2, r4
   24e32:	4282      	cmp	r2, r0
   24e34:	d90f      	bls.n	24e56 <is_regular_addr_valid+0x30>
   24e36:	2800      	cmp	r0, #0
   24e38:	db0d      	blt.n	24e56 <is_regular_addr_valid+0x30>
	    len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   24e3a:	691c      	ldr	r4, [r3, #16]
   24e3c:	695a      	ldr	r2, [r3, #20]
   24e3e:	4362      	muls	r2, r4
	    addr < 0 ||
   24e40:	428a      	cmp	r2, r1
   24e42:	d308      	bcc.n	24e56 <is_regular_addr_valid+0x30>
	    addr + len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE) {
   24e44:	691a      	ldr	r2, [r3, #16]
   24e46:	695b      	ldr	r3, [r3, #20]
   24e48:	4408      	add	r0, r1
   24e4a:	4353      	muls	r3, r2
	    len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   24e4c:	4298      	cmp	r0, r3
   24e4e:	bf8c      	ite	hi
   24e50:	2000      	movhi	r0, #0
   24e52:	2001      	movls	r0, #1
}
   24e54:	bd10      	pop	{r4, pc}
		return false;
   24e56:	2000      	movs	r0, #0
   24e58:	e7fc      	b.n	24e54 <is_regular_addr_valid+0x2e>

00024e5a <flash_nrf_read>:
{
   24e5a:	b570      	push	{r4, r5, r6, lr}
   24e5c:	460d      	mov	r5, r1
	return is_regular_addr_valid(addr, len) ||
   24e5e:	4628      	mov	r0, r5
   24e60:	4619      	mov	r1, r3
{
   24e62:	4616      	mov	r6, r2
   24e64:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   24e66:	f7ff ffde 	bl	24e26 <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   24e6a:	b138      	cbz	r0, 24e7c <flash_nrf_read+0x22>
	if (!len) {
   24e6c:	b14c      	cbz	r4, 24e82 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   24e6e:	4622      	mov	r2, r4
   24e70:	4629      	mov	r1, r5
   24e72:	4630      	mov	r0, r6
   24e74:	f7fd f807 	bl	21e86 <memcpy>
	return 0;
   24e78:	2000      	movs	r0, #0
}
   24e7a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   24e7c:	f06f 0015 	mvn.w	r0, #21
   24e80:	e7fb      	b.n	24e7a <flash_nrf_read+0x20>
		return 0;
   24e82:	4620      	mov	r0, r4
   24e84:	e7f9      	b.n	24e7a <flash_nrf_read+0x20>

00024e86 <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   24e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   24e8a:	6843      	ldr	r3, [r0, #4]
{
   24e8c:	b086      	sub	sp, #24
   24e8e:	4689      	mov	r9, r1
   24e90:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   24e92:	691b      	ldr	r3, [r3, #16]
   24e94:	aa02      	add	r2, sp, #8
   24e96:	a901      	add	r1, sp, #4
   24e98:	4798      	blx	r3
	off_t off = 0;
   24e9a:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   24e9c:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   24e9e:	4625      	mov	r5, r4
   24ea0:	9b02      	ldr	r3, [sp, #8]
   24ea2:	42ab      	cmp	r3, r5
   24ea4:	d802      	bhi.n	24eac <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   24ea6:	b006      	add	sp, #24
   24ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   24eac:	9f01      	ldr	r7, [sp, #4]
   24eae:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   24eb2:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   24eb4:	687b      	ldr	r3, [r7, #4]
   24eb6:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   24eb8:	683a      	ldr	r2, [r7, #0]
   24eba:	42b2      	cmp	r2, r6
   24ebc:	eb08 0306 	add.w	r3, r8, r6
   24ec0:	d802      	bhi.n	24ec8 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   24ec2:	3501      	adds	r5, #1
   24ec4:	4698      	mov	r8, r3
   24ec6:	e7eb      	b.n	24ea0 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   24ec8:	4651      	mov	r1, sl
   24eca:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   24ecc:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   24ece:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   24ed0:	47c8      	blx	r9
   24ed2:	2800      	cmp	r0, #0
   24ed4:	d0e7      	beq.n	24ea6 <flash_page_foreach+0x20>
			off += page_info.size;
   24ed6:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   24ed8:	3601      	adds	r6, #1
			off += page_info.size;
   24eda:	441c      	add	r4, r3
			page++;
   24edc:	e7ec      	b.n	24eb8 <flash_page_foreach+0x32>

00024ede <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   24ede:	6882      	ldr	r2, [r0, #8]
{
   24ee0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   24ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
   24ee6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   24eea:	2000      	movs	r0, #0
   24eec:	4770      	bx	lr

00024eee <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   24eee:	f7fc bed4 	b.w	21c9a <z_clock_idle_exit>

00024ef2 <k_mem_slab_init>:
{
   24ef2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0;
   24ef4:	2400      	movs	r4, #0
	slab->block_size = block_size;
   24ef6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
   24efa:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
   24efe:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   24f00:	42a3      	cmp	r3, r4
   24f02:	d102      	bne.n	24f0a <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
   24f04:	e9c0 0000 	strd	r0, r0, [r0]
}
   24f08:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   24f0a:	6945      	ldr	r5, [r0, #20]
   24f0c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   24f0e:	3401      	adds	r4, #1
		slab->free_list = p;
   24f10:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   24f12:	4411      	add	r1, r2
   24f14:	e7f4      	b.n	24f00 <k_mem_slab_init+0xe>

00024f16 <k_mem_pool_malloc>:
{
   24f16:	b513      	push	{r0, r1, r4, lr}
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   24f18:	2404      	movs	r4, #4
   24f1a:	190a      	adds	r2, r1, r4
   24f1c:	d204      	bcs.n	24f28 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   24f1e:	2300      	movs	r3, #0
   24f20:	4669      	mov	r1, sp
   24f22:	f7f9 f9a3 	bl	1e26c <k_mem_pool_alloc>
   24f26:	b110      	cbz	r0, 24f2e <k_mem_pool_malloc+0x18>
		return NULL;
   24f28:	2000      	movs	r0, #0
}
   24f2a:	b002      	add	sp, #8
   24f2c:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   24f2e:	4622      	mov	r2, r4
   24f30:	a901      	add	r1, sp, #4
   24f32:	9800      	ldr	r0, [sp, #0]
   24f34:	f7fc ffa7 	bl	21e86 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   24f38:	9800      	ldr	r0, [sp, #0]
   24f3a:	3004      	adds	r0, #4
   24f3c:	e7f5      	b.n	24f2a <k_mem_pool_malloc+0x14>

00024f3e <k_free>:
	if (ptr != NULL) {
   24f3e:	b110      	cbz	r0, 24f46 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   24f40:	3804      	subs	r0, #4
   24f42:	f7f9 b9f5 	b.w	1e330 <k_mem_pool_free_id>
}
   24f46:	4770      	bx	lr

00024f48 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   24f48:	2300      	movs	r3, #0
	mutex->lock_count = 0;
   24f4a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   24f4e:	e9c0 0000 	strd	r0, r0, [r0]
}
   24f52:	4770      	bx	lr

00024f54 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   24f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f58:	4604      	mov	r4, r0
   24f5a:	460f      	mov	r7, r1
   24f5c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24f5e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24f62:	f04f 0220 	mov.w	r2, #32
   24f66:	f3ef 8611 	mrs	r6, BASEPRI
   24f6a:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   24f6e:	b1db      	cbz	r3, 24fa8 <queue_insert+0x54>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   24f70:	2008      	movs	r0, #8
   24f72:	f7f9 fa07 	bl	1e384 <z_thread_malloc>
		if (anode == NULL) {
   24f76:	b938      	cbnz	r0, 24f88 <queue_insert+0x34>
	__asm__ volatile(
   24f78:	f386 8811 	msr	BASEPRI, r6
   24f7c:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   24f80:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   24f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->next_and_flags = flags;
   24f88:	2301      	movs	r3, #1
		anode->data = data;
   24f8a:	f8c0 8004 	str.w	r8, [r0, #4]
   24f8e:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   24f90:	6803      	ldr	r3, [r0, #0]
   24f92:	f003 0203 	and.w	r2, r3, #3
   24f96:	b95f      	cbnz	r7, 24fb0 <queue_insert+0x5c>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24f98:	6823      	ldr	r3, [r4, #0]
   24f9a:	4313      	orrs	r3, r2
   24f9c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24f9e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   24fa0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24fa2:	b973      	cbnz	r3, 24fc2 <queue_insert+0x6e>
	list->tail = node;
   24fa4:	6060      	str	r0, [r4, #4]
   24fa6:	e00c      	b.n	24fc2 <queue_insert+0x6e>
	node->next_and_flags = flags;
   24fa8:	f8c8 3000 	str.w	r3, [r8]
   24fac:	4640      	mov	r0, r8
   24fae:	e7ef      	b.n	24f90 <queue_insert+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24fb0:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24fb2:	f033 0303 	bics.w	r3, r3, #3
   24fb6:	d114      	bne.n	24fe2 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24fb8:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   24fba:	6862      	ldr	r2, [r4, #4]
   24fbc:	b95a      	cbnz	r2, 24fd6 <queue_insert+0x82>
	list->head = node;
   24fbe:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24fc2:	2104      	movs	r1, #4
   24fc4:	4628      	mov	r0, r5
   24fc6:	f000 fb34 	bl	25632 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   24fca:	4628      	mov	r0, r5
   24fcc:	4631      	mov	r1, r6
   24fce:	f000 f8e8 	bl	251a2 <z_reschedule>
	return 0;
   24fd2:	2000      	movs	r0, #0
   24fd4:	e7d6      	b.n	24f84 <queue_insert+0x30>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24fd6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24fd8:	f003 0303 	and.w	r3, r3, #3
   24fdc:	4303      	orrs	r3, r0
   24fde:	6013      	str	r3, [r2, #0]
   24fe0:	e7e0      	b.n	24fa4 <queue_insert+0x50>
   24fe2:	4313      	orrs	r3, r2
   24fe4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24fe6:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24fe8:	f003 0303 	and.w	r3, r3, #3
   24fec:	4318      	orrs	r0, r3
   24fee:	6038      	str	r0, [r7, #0]
   24ff0:	e7e7      	b.n	24fc2 <queue_insert+0x6e>

00024ff2 <z_queue_node_peek>:
{
   24ff2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   24ff4:	4604      	mov	r4, r0
   24ff6:	b130      	cbz	r0, 25006 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24ff8:	6802      	ldr	r2, [r0, #0]
   24ffa:	0793      	lsls	r3, r2, #30
   24ffc:	d003      	beq.n	25006 <z_queue_node_peek+0x14>
		ret = anode->data;
   24ffe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25000:	b109      	cbz	r1, 25006 <z_queue_node_peek+0x14>
			k_free(anode);
   25002:	f7ff ff9c 	bl	24f3e <k_free>
}
   25006:	4620      	mov	r0, r4
   25008:	bd10      	pop	{r4, pc}

0002500a <z_impl_k_queue_init>:
	list->head = NULL;
   2500a:	2300      	movs	r3, #0
	list->tail = NULL;
   2500c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   25010:	f100 0308 	add.w	r3, r0, #8
   25014:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   25018:	4770      	bx	lr

0002501a <z_impl_k_queue_cancel_wait>:
{
   2501a:	b538      	push	{r3, r4, r5, lr}
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2501c:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   25020:	f04f 0320 	mov.w	r3, #32
   25024:	f3ef 8511 	mrs	r5, BASEPRI
   25028:	f383 8811 	msr	BASEPRI, r3
	z_handle_obj_poll_events(&queue->poll_events, state);
   2502c:	2108      	movs	r1, #8
   2502e:	4620      	mov	r0, r4
   25030:	f000 faff 	bl	25632 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   25034:	4629      	mov	r1, r5
   25036:	4620      	mov	r0, r4
}
   25038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&queue->lock, key);
   2503c:	f000 b8b1 	b.w	251a2 <z_reschedule>

00025040 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   25040:	460a      	mov	r2, r1
   25042:	2300      	movs	r3, #0
   25044:	6841      	ldr	r1, [r0, #4]
   25046:	f7ff bf85 	b.w	24f54 <queue_insert>

0002504a <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   2504a:	2300      	movs	r3, #0
   2504c:	460a      	mov	r2, r1
   2504e:	4619      	mov	r1, r3
   25050:	f7ff bf80 	b.w	24f54 <queue_insert>

00025054 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   25054:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(head && tail, "invalid head or tail");

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25056:	f100 0508 	add.w	r5, r0, #8
   2505a:	f04f 0320 	mov.w	r3, #32
   2505e:	f3ef 8611 	mrs	r6, BASEPRI
   25062:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25066:	6843      	ldr	r3, [r0, #4]
   25068:	b95b      	cbnz	r3, 25082 <k_queue_append_list+0x2e>
	list->head = node;
   2506a:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2506c:	6042      	str	r2, [r0, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2506e:	2104      	movs	r1, #4
   25070:	4628      	mov	r0, r5
   25072:	f000 fade 	bl	25632 <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   25076:	4631      	mov	r1, r6
   25078:	4628      	mov	r0, r5
}
   2507a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   2507e:	f000 b890 	b.w	251a2 <z_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25082:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25084:	f004 0403 	and.w	r4, r4, #3
   25088:	4321      	orrs	r1, r4
   2508a:	6019      	str	r1, [r3, #0]
   2508c:	e7ee      	b.n	2506c <k_queue_append_list+0x18>

0002508e <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25092:	4604      	mov	r4, r0
   25094:	b086      	sub	sp, #24
   25096:	460d      	mov	r5, r1
   25098:	f04f 0320 	mov.w	r3, #32
   2509c:	f3ef 8711 	mrs	r7, BASEPRI
   250a0:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   250a4:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   250a6:	b188      	cbz	r0, 250cc <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   250a8:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   250aa:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   250ac:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   250b0:	4290      	cmp	r0, r2
	list->head = node;
   250b2:	6023      	str	r3, [r4, #0]
	list->tail = node;
   250b4:	bf08      	it	eq
   250b6:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   250b8:	2101      	movs	r1, #1
   250ba:	f7ff ff9a 	bl	24ff2 <z_queue_node_peek>
	__asm__ volatile(
   250be:	f387 8811 	msr	BASEPRI, r7
   250c2:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   250c6:	b006      	add	sp, #24
   250c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   250cc:	2900      	cmp	r1, #0
   250ce:	d0f6      	beq.n	250be <z_impl_k_queue_get+0x30>
   250d0:	f387 8811 	msr	BASEPRI, r7
   250d4:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   250d8:	2104      	movs	r1, #4
   250da:	4602      	mov	r2, r0
   250dc:	4623      	mov	r3, r4
   250de:	eb0d 0001 	add.w	r0, sp, r1
   250e2:	f7f9 ffc3 	bl	1f06c <k_poll_event_init>
	if (timeout != K_FOREVER) {
   250e6:	1c6a      	adds	r2, r5, #1
   250e8:	d002      	beq.n	250f0 <z_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   250ea:	f000 fa04 	bl	254f6 <z_impl_k_uptime_get_32>
   250ee:	4606      	mov	r6, r0
{
   250f0:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   250f2:	9b04      	ldr	r3, [sp, #16]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   250f4:	1bea      	subs	r2, r5, r7
   250f6:	f36f 3310 	bfc	r3, #12, #5
   250fa:	2101      	movs	r1, #1
   250fc:	a801      	add	r0, sp, #4
   250fe:	9304      	str	r3, [sp, #16]
   25100:	f7f9 ffc8 	bl	1f094 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   25104:	b118      	cbz	r0, 2510e <z_impl_k_queue_get+0x80>
   25106:	300b      	adds	r0, #11
   25108:	d001      	beq.n	2510e <z_impl_k_queue_get+0x80>
			return NULL;
   2510a:	2000      	movs	r0, #0
   2510c:	e7db      	b.n	250c6 <z_impl_k_queue_get+0x38>
	__asm__ volatile(
   2510e:	f04f 0320 	mov.w	r3, #32
   25112:	f3ef 8811 	mrs	r8, BASEPRI
   25116:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   2511a:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   2511c:	b138      	cbz	r0, 2512e <z_impl_k_queue_get+0xa0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2511e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25120:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25122:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25126:	4290      	cmp	r0, r2
	list->head = node;
   25128:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2512a:	bf08      	it	eq
   2512c:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   2512e:	2101      	movs	r1, #1
   25130:	f7ff ff5f 	bl	24ff2 <z_queue_node_peek>
	__asm__ volatile(
   25134:	f388 8811 	msr	BASEPRI, r8
   25138:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   2513c:	2800      	cmp	r0, #0
   2513e:	d1c2      	bne.n	250c6 <z_impl_k_queue_get+0x38>
   25140:	1c6b      	adds	r3, r5, #1
   25142:	d0d6      	beq.n	250f2 <z_impl_k_queue_get+0x64>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   25144:	f000 f9d7 	bl	254f6 <z_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   25148:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   2514a:	42bd      	cmp	r5, r7
   2514c:	dad1      	bge.n	250f2 <z_impl_k_queue_get+0x64>
   2514e:	e7dc      	b.n	2510a <z_impl_k_queue_get+0x7c>

00025150 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   25150:	7b43      	ldrb	r3, [r0, #13]
   25152:	06db      	lsls	r3, r3, #27
   25154:	bf03      	ittte	eq
   25156:	6980      	ldreq	r0, [r0, #24]
   25158:	fab0 f080 	clzeq	r0, r0
   2515c:	0940      	lsreq	r0, r0, #5
   2515e:	2000      	movne	r0, #0
}
   25160:	4770      	bx	lr

00025162 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   25162:	f990 000e 	ldrsb.w	r0, [r0, #14]
   25166:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2516a:	4298      	cmp	r0, r3
   2516c:	bfac      	ite	ge
   2516e:	2000      	movge	r0, #0
   25170:	2001      	movlt	r0, #1
   25172:	4770      	bx	lr

00025174 <z_unpend_thread_no_timeout>:
{
   25174:	b538      	push	{r3, r4, r5, lr}
   25176:	4604      	mov	r4, r0
	__asm__ volatile(
   25178:	f04f 0320 	mov.w	r3, #32
   2517c:	f3ef 8511 	mrs	r5, BASEPRI
   25180:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   25184:	4601      	mov	r1, r0
   25186:	6880      	ldr	r0, [r0, #8]
   25188:	f7f9 fa12 	bl	1e5b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2518c:	7b63      	ldrb	r3, [r4, #13]
   2518e:	f023 0302 	bic.w	r3, r3, #2
   25192:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   25194:	f385 8811 	msr	BASEPRI, r5
   25198:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2519c:	2300      	movs	r3, #0
   2519e:	60a3      	str	r3, [r4, #8]
}
   251a0:	bd38      	pop	{r3, r4, r5, pc}

000251a2 <z_reschedule>:
{
   251a2:	b508      	push	{r3, lr}
	if (resched()) {
   251a4:	f7f9 f9a2 	bl	1e4ec <resched>
   251a8:	b120      	cbz	r0, 251b4 <z_reschedule+0x12>
   251aa:	4608      	mov	r0, r1
}
   251ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   251b0:	f7df bde2 	b.w	4d78 <__swap>
   251b4:	f381 8811 	msr	BASEPRI, r1
   251b8:	f3bf 8f6f 	isb	sy
   251bc:	bd08      	pop	{r3, pc}

000251be <z_reschedule_irqlock>:
{
   251be:	b508      	push	{r3, lr}
   251c0:	4602      	mov	r2, r0
	if (resched()) {
   251c2:	f7f9 f993 	bl	1e4ec <resched>
   251c6:	b120      	cbz	r0, 251d2 <z_reschedule_irqlock+0x14>
   251c8:	4610      	mov	r0, r2
}
   251ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   251ce:	f7df bdd3 	b.w	4d78 <__swap>
   251d2:	f382 8811 	msr	BASEPRI, r2
   251d6:	f3bf 8f6f 	isb	sy
   251da:	bd08      	pop	{r3, pc}

000251dc <z_reschedule_unlocked>:
	__asm__ volatile(
   251dc:	f04f 0320 	mov.w	r3, #32
   251e0:	f3ef 8011 	mrs	r0, BASEPRI
   251e4:	f383 8811 	msr	BASEPRI, r3
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   251e8:	f7ff bfe9 	b.w	251be <z_reschedule_irqlock>

000251ec <z_unpend_thread>:
{
   251ec:	b538      	push	{r3, r4, r5, lr}
   251ee:	4604      	mov	r4, r0
   251f0:	f04f 0320 	mov.w	r3, #32
   251f4:	f3ef 8511 	mrs	r5, BASEPRI
   251f8:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   251fc:	4601      	mov	r1, r0
   251fe:	6880      	ldr	r0, [r0, #8]
   25200:	f7f9 f9d6 	bl	1e5b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25204:	7b63      	ldrb	r3, [r4, #13]
   25206:	f023 0302 	bic.w	r3, r3, #2
   2520a:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   2520c:	f385 8811 	msr	BASEPRI, r5
   25210:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25214:	2300      	movs	r3, #0
   25216:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   25218:	f104 0018 	add.w	r0, r4, #24
}
   2521c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25220:	f000 b92b 	b.w	2547a <z_abort_timeout>

00025224 <z_priq_dumb_best>:
	return list->head == list;
   25224:	6803      	ldr	r3, [r0, #0]
}
   25226:	4298      	cmp	r0, r3
   25228:	bf14      	ite	ne
   2522a:	4618      	movne	r0, r3
   2522c:	2000      	moveq	r0, #0
   2522e:	4770      	bx	lr

00025230 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   25230:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   25234:	b570      	push	{r4, r5, r6, lr}
   25236:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   25238:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   2523c:	b1bb      	cbz	r3, 2526e <z_thread_timeout+0x3e>
	__asm__ volatile(
   2523e:	f04f 0320 	mov.w	r3, #32
   25242:	f3ef 8611 	mrs	r6, BASEPRI
   25246:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2524a:	4629      	mov	r1, r5
   2524c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   25250:	f7f9 f9ae 	bl	1e5b0 <z_priq_dumb_remove>
   25254:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25258:	f023 0302 	bic.w	r3, r3, #2
   2525c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   25260:	f386 8811 	msr	BASEPRI, r6
   25264:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   25268:	2300      	movs	r3, #0
   2526a:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2526e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25272:	f023 0304 	bic.w	r3, r3, #4
   25276:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   2527a:	4628      	mov	r0, r5
   2527c:	f7ff ff68 	bl	25150 <z_is_thread_ready>
   25280:	b120      	cbz	r0, 2528c <z_thread_timeout+0x5c>
		z_add_thread_to_ready_q(thread);
   25282:	4628      	mov	r0, r5
}
   25284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25288:	f7f9 b9e0 	b.w	1e64c <z_add_thread_to_ready_q>
   2528c:	bd70      	pop	{r4, r5, r6, pc}

0002528e <z_unpend_first_thread>:
{
   2528e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25290:	f04f 0320 	mov.w	r3, #32
   25294:	f3ef 8211 	mrs	r2, BASEPRI
   25298:	f383 8811 	msr	BASEPRI, r3
		ret = _priq_wait_best(&wait_q->waitq);
   2529c:	f7ff ffc2 	bl	25224 <z_priq_dumb_best>
   252a0:	4604      	mov	r4, r0
	__asm__ volatile(
   252a2:	f382 8811 	msr	BASEPRI, r2
   252a6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   252aa:	b1b8      	cbz	r0, 252dc <z_unpend_first_thread+0x4e>
	__asm__ volatile(
   252ac:	f04f 0320 	mov.w	r3, #32
   252b0:	f3ef 8511 	mrs	r5, BASEPRI
   252b4:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   252b8:	4601      	mov	r1, r0
   252ba:	6880      	ldr	r0, [r0, #8]
   252bc:	f7f9 f978 	bl	1e5b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   252c0:	7b63      	ldrb	r3, [r4, #13]
   252c2:	f023 0302 	bic.w	r3, r3, #2
   252c6:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   252c8:	f385 8811 	msr	BASEPRI, r5
   252cc:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   252d0:	2300      	movs	r3, #0
   252d2:	60a3      	str	r3, [r4, #8]
   252d4:	f104 0018 	add.w	r0, r4, #24
   252d8:	f000 f8cf 	bl	2547a <z_abort_timeout>
}
   252dc:	4620      	mov	r0, r4
   252de:	bd38      	pop	{r3, r4, r5, pc}

000252e0 <z_unpend_all>:
{
   252e0:	b570      	push	{r4, r5, r6, lr}
   252e2:	4606      	mov	r6, r0
	int need_sched = 0;
   252e4:	2500      	movs	r5, #0
   252e6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   252e8:	42a6      	cmp	r6, r4
   252ea:	d000      	beq.n	252ee <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   252ec:	b90c      	cbnz	r4, 252f2 <z_unpend_all+0x12>
}
   252ee:	4628      	mov	r0, r5
   252f0:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   252f2:	4620      	mov	r0, r4
   252f4:	f7ff ff7a 	bl	251ec <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   252f8:	4620      	mov	r0, r4
   252fa:	f7ff ff29 	bl	25150 <z_is_thread_ready>
		need_sched = 1;
   252fe:	2501      	movs	r5, #1
   25300:	2800      	cmp	r0, #0
   25302:	d0f0      	beq.n	252e6 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   25304:	4620      	mov	r0, r4
   25306:	f7f9 f9a1 	bl	1e64c <z_add_thread_to_ready_q>
   2530a:	e7ec      	b.n	252e6 <z_unpend_all+0x6>

0002530c <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   2530c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25310:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   25314:	e9c0 0000 	strd	r0, r0, [r0]
   25318:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2531c:	4770      	bx	lr

0002531e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2531e:	7b43      	ldrb	r3, [r0, #13]
   25320:	06db      	lsls	r3, r3, #27
   25322:	bf03      	ittte	eq
   25324:	6980      	ldreq	r0, [r0, #24]
   25326:	fab0 f080 	clzeq	r0, r0
   2532a:	0940      	lsreq	r0, r0, #5
   2532c:	2000      	movne	r0, #0
}
   2532e:	4770      	bx	lr

00025330 <k_thread_foreach>:
}
   25330:	4770      	bx	lr

00025332 <z_impl_k_busy_wait>:
	z_arch_busy_wait(usec_to_wait);
   25332:	f7dd be05 	b.w	2f40 <z_arch_busy_wait>

00025336 <z_impl_k_thread_name_set>:
}
   25336:	4770      	bx	lr

00025338 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   25338:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2533a:	b510      	push	{r4, lr}
   2533c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   2533e:	b103      	cbz	r3, 25342 <z_thread_single_abort+0xa>
		thread->fn_abort();
   25340:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   25342:	4620      	mov	r0, r4
   25344:	f7ff ffeb 	bl	2531e <z_is_thread_ready>
   25348:	b138      	cbz	r0, 2535a <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   2534a:	4620      	mov	r0, r4
   2534c:	f7f9 fa24 	bl	1e798 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   25350:	7b63      	ldrb	r3, [r4, #13]
   25352:	f043 0308 	orr.w	r3, r3, #8
   25356:	7363      	strb	r3, [r4, #13]
}
   25358:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   2535a:	7b63      	ldrb	r3, [r4, #13]
   2535c:	079b      	lsls	r3, r3, #30
   2535e:	d502      	bpl.n	25366 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   25360:	4620      	mov	r0, r4
   25362:	f7ff ff07 	bl	25174 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   25366:	69a3      	ldr	r3, [r4, #24]
   25368:	2b00      	cmp	r3, #0
   2536a:	d0f1      	beq.n	25350 <z_thread_single_abort+0x18>
   2536c:	f104 0018 	add.w	r0, r4, #24
   25370:	f000 f883 	bl	2547a <z_abort_timeout>
   25374:	e7ec      	b.n	25350 <z_thread_single_abort+0x18>

00025376 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   25376:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   25378:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   2537a:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   2537c:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0;
   2537e:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   25380:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   25384:	4770      	bx	lr

00025386 <k_work_submit_to_queue>:
{
   25386:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25388:	f101 0308 	add.w	r3, r1, #8
   2538c:	f3bf 8f5b 	dmb	ish
   25390:	e853 2f00 	ldrex	r2, [r3]
   25394:	f042 0c01 	orr.w	ip, r2, #1
   25398:	e843 ce00 	strex	lr, ip, [r3]
   2539c:	f1be 0f00 	cmp.w	lr, #0
   253a0:	d1f6      	bne.n	25390 <k_work_submit_to_queue+0xa>
   253a2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   253a6:	07d3      	lsls	r3, r2, #31
   253a8:	d403      	bmi.n	253b2 <k_work_submit_to_queue+0x2c>
}
   253aa:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   253ae:	f7ff be47 	b.w	25040 <k_queue_append>
}
   253b2:	f85d fb04 	ldr.w	pc, [sp], #4

000253b6 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   253b6:	f1a0 010c 	sub.w	r1, r0, #12
   253ba:	6900      	ldr	r0, [r0, #16]
   253bc:	f7ff bfe3 	b.w	25386 <k_work_submit_to_queue>

000253c0 <work_cancel>:
{
   253c0:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   253c2:	f3bf 8f5b 	dmb	ish
   253c6:	6883      	ldr	r3, [r0, #8]
   253c8:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   253cc:	07db      	lsls	r3, r3, #31
{
   253ce:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   253d0:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   253d4:	d532      	bpl.n	2543c <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   253d6:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   253d8:	6813      	ldr	r3, [r2, #0]
   253da:	2100      	movs	r1, #0
   253dc:	b913      	cbnz	r3, 253e4 <work_cancel+0x24>
			return -EINVAL;
   253de:	f06f 0015 	mvn.w	r0, #21
}
   253e2:	bd70      	pop	{r4, r5, r6, pc}
   253e4:	429c      	cmp	r4, r3
   253e6:	d124      	bne.n	25432 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   253e8:	6823      	ldr	r3, [r4, #0]
   253ea:	6856      	ldr	r6, [r2, #4]
   253ec:	f023 0003 	bic.w	r0, r3, #3
   253f0:	b9b1      	cbnz	r1, 25420 <work_cancel+0x60>
   253f2:	42b4      	cmp	r4, r6
	list->head = node;
   253f4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   253f6:	d100      	bne.n	253fa <work_cancel+0x3a>
	list->tail = node;
   253f8:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   253fa:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   253fc:	f003 0303 	and.w	r3, r3, #3
   25400:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   25402:	2000      	movs	r0, #0
   25404:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25406:	f3bf 8f5b 	dmb	ish
   2540a:	e855 3f00 	ldrex	r3, [r5]
   2540e:	f023 0301 	bic.w	r3, r3, #1
   25412:	e845 3200 	strex	r2, r3, [r5]
   25416:	2a00      	cmp	r2, #0
   25418:	d1f7      	bne.n	2540a <work_cancel+0x4a>
   2541a:	f3bf 8f5b 	dmb	ish
   2541e:	e7e0      	b.n	253e2 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25420:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25422:	f003 0303 	and.w	r3, r3, #3
   25426:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   25428:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2542a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2542c:	bf08      	it	eq
   2542e:	6051      	streq	r1, [r2, #4]
   25430:	e7e3      	b.n	253fa <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25432:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   25434:	4619      	mov	r1, r3
   25436:	f020 0303 	bic.w	r3, r0, #3
   2543a:	e7cf      	b.n	253dc <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   2543c:	300c      	adds	r0, #12
   2543e:	f000 f81c 	bl	2547a <z_abort_timeout>
   25442:	e7de      	b.n	25402 <work_cancel+0x42>

00025444 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25444:	2300      	movs	r3, #0
   25446:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   2544a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   2544e:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   25450:	61c3      	str	r3, [r0, #28]
}
   25452:	4770      	bx	lr

00025454 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   25454:	69c3      	ldr	r3, [r0, #28]
{
   25456:	b510      	push	{r4, lr}
	if (!work->work_q) {
   25458:	b163      	cbz	r3, 25474 <k_delayed_work_cancel+0x20>
	__asm__ volatile(
   2545a:	f04f 0320 	mov.w	r3, #32
   2545e:	f3ef 8411 	mrs	r4, BASEPRI
   25462:	f383 8811 	msr	BASEPRI, r3
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   25466:	f7ff ffab 	bl	253c0 <work_cancel>
	__asm__ volatile(
   2546a:	f384 8811 	msr	BASEPRI, r4
   2546e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   25472:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25474:	f06f 0015 	mvn.w	r0, #21
   25478:	e7fb      	b.n	25472 <k_delayed_work_cancel+0x1e>

0002547a <z_abort_timeout>:
{
   2547a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2547c:	f04f 0220 	mov.w	r2, #32
   25480:	f3ef 8411 	mrs	r4, BASEPRI
   25484:	f382 8811 	msr	BASEPRI, r2
		if (sys_dnode_is_linked(&to->node)) {
   25488:	6803      	ldr	r3, [r0, #0]
   2548a:	b13b      	cbz	r3, 2549c <z_abort_timeout+0x22>
			remove_timeout(to);
   2548c:	f7f9 fcdc 	bl	1ee48 <remove_timeout>
			ret = 0;
   25490:	2000      	movs	r0, #0
	__asm__ volatile(
   25492:	f384 8811 	msr	BASEPRI, r4
   25496:	f3bf 8f6f 	isb	sy
}
   2549a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2549c:	f06f 0015 	mvn.w	r0, #21
   254a0:	e7f7      	b.n	25492 <z_abort_timeout+0x18>

000254a2 <z_get_next_timeout_expiry>:
{
   254a2:	b510      	push	{r4, lr}
	__asm__ volatile(
   254a4:	f04f 0320 	mov.w	r3, #32
   254a8:	f3ef 8411 	mrs	r4, BASEPRI
   254ac:	f383 8811 	msr	BASEPRI, r3
		ret = next_timeout();
   254b0:	f7f9 fcde 	bl	1ee70 <next_timeout>
	__asm__ volatile(
   254b4:	f384 8811 	msr	BASEPRI, r4
   254b8:	f3bf 8f6f 	isb	sy
}
   254bc:	bd10      	pop	{r4, pc}

000254be <z_set_timeout_expiry>:
{
   254be:	b570      	push	{r4, r5, r6, lr}
   254c0:	4604      	mov	r4, r0
   254c2:	460e      	mov	r6, r1
	__asm__ volatile(
   254c4:	f04f 0320 	mov.w	r3, #32
   254c8:	f3ef 8511 	mrs	r5, BASEPRI
   254cc:	f383 8811 	msr	BASEPRI, r3
		int next = next_timeout();
   254d0:	f7f9 fcce 	bl	1ee70 <next_timeout>
		if (sooner && !imminent) {
   254d4:	42a0      	cmp	r0, r4
   254d6:	dd05      	ble.n	254e4 <z_set_timeout_expiry+0x26>
   254d8:	2801      	cmp	r0, #1
   254da:	dd03      	ble.n	254e4 <z_set_timeout_expiry+0x26>
			z_clock_set_timeout(ticks, idle);
   254dc:	4631      	mov	r1, r6
   254de:	4620      	mov	r0, r4
   254e0:	f7df fbc2 	bl	4c68 <z_clock_set_timeout>
	__asm__ volatile(
   254e4:	f385 8811 	msr	BASEPRI, r5
   254e8:	f3bf 8f6f 	isb	sy
}
   254ec:	bd70      	pop	{r4, r5, r6, pc}

000254ee <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   254ee:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   254f0:	f7f9 fda0 	bl	1f034 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   254f4:	bd08      	pop	{r3, pc}

000254f6 <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
   254f6:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
   254f8:	f7ff fff9 	bl	254ee <z_tick_get_32>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   254fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   25500:	2264      	movs	r2, #100	; 0x64
   25502:	2300      	movs	r3, #0
   25504:	fba0 0101 	umull	r0, r1, r0, r1
   25508:	f7da fe3a 	bl	180 <__aeabi_uldivmod>
}
   2550c:	bd08      	pop	{r3, pc}

0002550e <z_impl_k_uptime_get>:
	return z_impl_k_uptime_get_32();
}
#endif

s64_t z_impl_k_uptime_get(void)
{
   2550e:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(z_tick_get());
   25510:	f7f9 fd90 	bl	1f034 <z_tick_get>
   25514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25518:	fba0 4503 	umull	r4, r5, r0, r3
   2551c:	fb03 5501 	mla	r5, r3, r1, r5
   25520:	2264      	movs	r2, #100	; 0x64
   25522:	2300      	movs	r3, #0
   25524:	4620      	mov	r0, r4
   25526:	4629      	mov	r1, r5
   25528:	f7da fe2a 	bl	180 <__aeabi_uldivmod>
}
   2552c:	bd38      	pop	{r3, r4, r5, pc}

0002552e <clear_event_registrations>:
	for (; last_registered >= 0; last_registered--) {
   2552e:	2314      	movs	r3, #20
{
   25530:	b570      	push	{r4, r5, r6, lr}
   25532:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   25536:	2400      	movs	r4, #0
   25538:	2601      	movs	r6, #1
	for (; last_registered >= 0; last_registered--) {
   2553a:	2900      	cmp	r1, #0
   2553c:	da00      	bge.n	25540 <clear_event_registrations+0x12>
}
   2553e:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   25540:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   25542:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   25544:	f003 030f 	and.w	r3, r3, #15
   25548:	2b04      	cmp	r3, #4
   2554a:	d80b      	bhi.n	25564 <clear_event_registrations+0x36>
   2554c:	fa06 f303 	lsl.w	r3, r6, r3
   25550:	f013 0f16 	tst.w	r3, #22
   25554:	d006      	beq.n	25564 <clear_event_registrations+0x36>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   25556:	6803      	ldr	r3, [r0, #0]
   25558:	b123      	cbz	r3, 25564 <clear_event_registrations+0x36>
	node->prev->next = node->next;
   2555a:	6845      	ldr	r5, [r0, #4]
   2555c:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   2555e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   25560:	e9c0 4400 	strd	r4, r4, [r0]
   25564:	f382 8811 	msr	BASEPRI, r2
   25568:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2556c:	f04f 0320 	mov.w	r3, #32
   25570:	f3ef 8211 	mrs	r2, BASEPRI
   25574:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   25578:	3901      	subs	r1, #1
   2557a:	3814      	subs	r0, #20
   2557c:	e7dd      	b.n	2553a <clear_event_registrations+0xc>

0002557e <signal_poll_event>:
	if (!event->poller) {
   2557e:	6883      	ldr	r3, [r0, #8]
{
   25580:	b570      	push	{r4, r5, r6, lr}
   25582:	4605      	mov	r5, r0
   25584:	460e      	mov	r6, r1
	if (!event->poller) {
   25586:	b1cb      	cbz	r3, 255bc <signal_poll_event+0x3e>
	event->poller->is_polling = false;
   25588:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   2558a:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
   2558c:	711a      	strb	r2, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   2558e:	7b63      	ldrb	r3, [r4, #13]
   25590:	079a      	lsls	r2, r3, #30
   25592:	d513      	bpl.n	255bc <signal_poll_event+0x3e>
	if (z_is_thread_timeout_expired(thread)) {
   25594:	6a23      	ldr	r3, [r4, #32]
   25596:	3302      	adds	r3, #2
   25598:	d01a      	beq.n	255d0 <signal_poll_event+0x52>
	z_unpend_thread(thread);
   2559a:	4620      	mov	r0, r4
   2559c:	f7ff fe26 	bl	251ec <z_unpend_thread>
	z_set_thread_return_value(thread,
   255a0:	2e08      	cmp	r6, #8
   255a2:	bf0c      	ite	eq
   255a4:	f06f 0303 	mvneq.w	r3, #3
   255a8:	2300      	movne	r3, #0
   255aa:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   255ac:	7b63      	ldrb	r3, [r4, #13]
   255ae:	06db      	lsls	r3, r3, #27
   255b0:	d104      	bne.n	255bc <signal_poll_event+0x3e>
	if (!z_is_thread_ready(thread)) {
   255b2:	69a3      	ldr	r3, [r4, #24]
   255b4:	b913      	cbnz	r3, 255bc <signal_poll_event+0x3e>
		z_add_thread_to_ready_q(thread);
   255b6:	4620      	mov	r0, r4
   255b8:	f7f9 f848 	bl	1e64c <z_add_thread_to_ready_q>
	event->state |= state;
   255bc:	68eb      	ldr	r3, [r5, #12]
   255be:	f3c3 3204 	ubfx	r2, r3, #12, #5
   255c2:	4316      	orrs	r6, r2
	event->poller = NULL;
   255c4:	2000      	movs	r0, #0
	event->state |= state;
   255c6:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   255ca:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   255cc:	60eb      	str	r3, [r5, #12]
}
   255ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   255d0:	f06f 000a 	mvn.w	r0, #10
   255d4:	e7fb      	b.n	255ce <signal_poll_event+0x50>

000255d6 <add_event>:
{
   255d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   255d8:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   255da:	e9d0 2300 	ldrd	r2, r3, [r0]
   255de:	4290      	cmp	r0, r2
   255e0:	4604      	mov	r4, r0
   255e2:	460d      	mov	r5, r1
   255e4:	d106      	bne.n	255f4 <add_event+0x1e>
	node->prev = list->tail;
   255e6:	6863      	ldr	r3, [r4, #4]
   255e8:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   255ea:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   255ec:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   255ee:	601d      	str	r5, [r3, #0]
	list->tail = node;
   255f0:	6065      	str	r5, [r4, #4]
}
   255f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   255f4:	2b00      	cmp	r3, #0
   255f6:	d0f6      	beq.n	255e6 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   255f8:	689b      	ldr	r3, [r3, #8]
   255fa:	6839      	ldr	r1, [r7, #0]
   255fc:	6818      	ldr	r0, [r3, #0]
   255fe:	f7ff fdb0 	bl	25162 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   25602:	2800      	cmp	r0, #0
   25604:	d1ef      	bne.n	255e6 <add_event+0x10>
	return list->head == list;
   25606:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25608:	42b4      	cmp	r4, r6
   2560a:	d0ec      	beq.n	255e6 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2560c:	2e00      	cmp	r6, #0
   2560e:	d0ea      	beq.n	255e6 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   25610:	68b3      	ldr	r3, [r6, #8]
   25612:	6838      	ldr	r0, [r7, #0]
   25614:	6819      	ldr	r1, [r3, #0]
   25616:	f7ff fda4 	bl	25162 <z_is_t1_higher_prio_than_t2>
   2561a:	b128      	cbz	r0, 25628 <add_event+0x52>
	node->prev = successor->prev;
   2561c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2561e:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   25622:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   25624:	6075      	str	r5, [r6, #4]
			return;
   25626:	e7e4      	b.n	255f2 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   25628:	6863      	ldr	r3, [r4, #4]
   2562a:	429e      	cmp	r6, r3
   2562c:	d0db      	beq.n	255e6 <add_event+0x10>
   2562e:	6836      	ldr	r6, [r6, #0]
   25630:	e7ec      	b.n	2560c <add_event+0x36>

00025632 <z_handle_obj_poll_events>:
	return list->head == list;
   25632:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   25634:	4298      	cmp	r0, r3
   25636:	d009      	beq.n	2564c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   25638:	e9d3 2000 	ldrd	r2, r0, [r3]
   2563c:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   2563e:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   25640:	2200      	movs	r2, #0
	node->prev = NULL;
   25642:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   25646:	4618      	mov	r0, r3
   25648:	f7ff bf99 	b.w	2557e <signal_poll_event>
}
   2564c:	4770      	bx	lr

0002564e <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   2564e:	4770      	bx	lr
