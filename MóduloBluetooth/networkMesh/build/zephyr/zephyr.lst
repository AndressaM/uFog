
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20004360 	.word	0x20004360

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	000085b1 	.word	0x000085b1
   8:	00019f45 	.word	0x00019f45
		if (fdtable[fd].obj == NULL) {
   c:	00008445 	.word	0x00008445
  10:	00008445 	.word	0x00008445
  14:	00008445 	.word	0x00008445
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00008445 	.word	0x00008445

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	00008445 	.word	0x00008445
	errno = ENFILE;
  20:	00008445 	.word	0x00008445
	return -1;
  24:	00008445 	.word	0x00008445

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	00008445 	.word	0x00008445
  2c:	00008069 	.word	0x00008069
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00008445 	.word	0x00008445
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00008445 	.word	0x00008445
  38:	00008015 	.word	0x00008015
  3c:	00019f2b 	.word	0x00019f2b

00000040 <_irq_vector_table>:
  40:	00008571 0001ed79 00008571 00008571     q...y...q...q...
  50:	00008571 00008571 00008571 00008571     q...q...q...q...
  60:	00008571 00008571 00008571 00008571     q...q...q...q...
  70:	00008571 00008571 00008571 00008571     q...q...q...q...
  80:	00008571 00008571 00008571 00008571     q...q...q...q...
  90:	00008571 00008571 00008571 00008571     q...q...q...q...
  a0:	00008571 00008571 00008571 00008571     q...q...q...q...
  b0:	00008571 00008571 00008571 00008571     q...q...q...q...
  c0:	00008571 00008571 00008571 00008571     q...q...q...q...
  d0:	00008571 00008571 00008571              q...q...q...

Disassembly of section _TEXT_SECTION_NAME_2:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_IDLE_STACK_SIZE+0x1c>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_IDLE_STACK_SIZE+0x30>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_IDLE_STACK_SIZE+0x5e>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_IDLE_STACK_SIZE+0x7c>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x38>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     21e:	f1a4 0401 	sub.w	r4, r4, #1
     222:	d1e9      	bne.n	1f8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x38>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_IDLE_STACK_SIZE+0x38>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_BT_HCI_TX_STACK_SIZE+0xba>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     456:	bf00      	nop

00000458 <__gedf2>:
     458:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     45c:	e006      	b.n	46c <__cmpdf2+0x4>
     45e:	bf00      	nop

00000460 <__ledf2>:
     460:	f04f 0c01 	mov.w	ip, #1
     464:	e002      	b.n	46c <__cmpdf2+0x4>
     466:	bf00      	nop

00000468 <__cmpdf2>:
     468:	f04f 0c01 	mov.w	ip, #1
     46c:	f84d cd04 	str.w	ip, [sp, #-4]!
     470:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     474:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     478:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     47c:	bf18      	it	ne
     47e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     482:	d01b      	beq.n	4bc <__cmpdf2+0x54>
     484:	b001      	add	sp, #4
     486:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     48a:	bf0c      	ite	eq
     48c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     490:	ea91 0f03 	teqne	r1, r3
     494:	bf02      	ittt	eq
     496:	ea90 0f02 	teqeq	r0, r2
     49a:	2000      	moveq	r0, #0
     49c:	4770      	bxeq	lr
     49e:	f110 0f00 	cmn.w	r0, #0
     4a2:	ea91 0f03 	teq	r1, r3
     4a6:	bf58      	it	pl
     4a8:	4299      	cmppl	r1, r3
     4aa:	bf08      	it	eq
     4ac:	4290      	cmpeq	r0, r2
     4ae:	bf2c      	ite	cs
     4b0:	17d8      	asrcs	r0, r3, #31
     4b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     4b6:	f040 0001 	orr.w	r0, r0, #1
     4ba:	4770      	bx	lr
     4bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     4c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     4c4:	d102      	bne.n	4cc <__cmpdf2+0x64>
     4c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     4ca:	d107      	bne.n	4dc <__cmpdf2+0x74>
     4cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     4d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     4d4:	d1d6      	bne.n	484 <__cmpdf2+0x1c>
     4d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     4da:	d0d3      	beq.n	484 <__cmpdf2+0x1c>
     4dc:	f85d 0b04 	ldr.w	r0, [sp], #4
     4e0:	4770      	bx	lr
     4e2:	bf00      	nop

000004e4 <__aeabi_cdrcmple>:
     4e4:	4684      	mov	ip, r0
     4e6:	4610      	mov	r0, r2
     4e8:	4662      	mov	r2, ip
     4ea:	468c      	mov	ip, r1
     4ec:	4619      	mov	r1, r3
     4ee:	4663      	mov	r3, ip
     4f0:	e000      	b.n	4f4 <__aeabi_cdcmpeq>
     4f2:	bf00      	nop

000004f4 <__aeabi_cdcmpeq>:
     4f4:	b501      	push	{r0, lr}
     4f6:	f7ff ffb7 	bl	468 <__cmpdf2>
     4fa:	2800      	cmp	r0, #0
     4fc:	bf48      	it	mi
     4fe:	f110 0f00 	cmnmi.w	r0, #0
     502:	bd01      	pop	{r0, pc}

00000504 <__aeabi_dcmpeq>:
     504:	f84d ed08 	str.w	lr, [sp, #-8]!
     508:	f7ff fff4 	bl	4f4 <__aeabi_cdcmpeq>
     50c:	bf0c      	ite	eq
     50e:	2001      	moveq	r0, #1
     510:	2000      	movne	r0, #0
     512:	f85d fb08 	ldr.w	pc, [sp], #8
     516:	bf00      	nop

00000518 <__aeabi_dcmplt>:
     518:	f84d ed08 	str.w	lr, [sp, #-8]!
     51c:	f7ff ffea 	bl	4f4 <__aeabi_cdcmpeq>
     520:	bf34      	ite	cc
     522:	2001      	movcc	r0, #1
     524:	2000      	movcs	r0, #0
     526:	f85d fb08 	ldr.w	pc, [sp], #8
     52a:	bf00      	nop

0000052c <__aeabi_dcmple>:
     52c:	f84d ed08 	str.w	lr, [sp, #-8]!
     530:	f7ff ffe0 	bl	4f4 <__aeabi_cdcmpeq>
     534:	bf94      	ite	ls
     536:	2001      	movls	r0, #1
     538:	2000      	movhi	r0, #0
     53a:	f85d fb08 	ldr.w	pc, [sp], #8
     53e:	bf00      	nop

00000540 <__aeabi_dcmpge>:
     540:	f84d ed08 	str.w	lr, [sp, #-8]!
     544:	f7ff ffce 	bl	4e4 <__aeabi_cdrcmple>
     548:	bf94      	ite	ls
     54a:	2001      	movls	r0, #1
     54c:	2000      	movhi	r0, #0
     54e:	f85d fb08 	ldr.w	pc, [sp], #8
     552:	bf00      	nop

00000554 <__aeabi_dcmpgt>:
     554:	f84d ed08 	str.w	lr, [sp, #-8]!
     558:	f7ff ffc4 	bl	4e4 <__aeabi_cdrcmple>
     55c:	bf34      	ite	cc
     55e:	2001      	movcc	r0, #1
     560:	2000      	movcs	r0, #0
     562:	f85d fb08 	ldr.w	pc, [sp], #8
     566:	bf00      	nop

00000568 <__aeabi_frsub>:
     568:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     56c:	e002      	b.n	574 <__addsf3>
     56e:	bf00      	nop

00000570 <__aeabi_fsub>:
     570:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000574 <__addsf3>:
     574:	0042      	lsls	r2, r0, #1
     576:	bf1f      	itttt	ne
     578:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     57c:	ea92 0f03 	teqne	r2, r3
     580:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     584:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     588:	d06a      	beq.n	660 <CONFIG_BT_CTLR_COMPANY_ID+0x6f>
     58a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     58e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     592:	bfc1      	itttt	gt
     594:	18d2      	addgt	r2, r2, r3
     596:	4041      	eorgt	r1, r0
     598:	4048      	eorgt	r0, r1
     59a:	4041      	eorgt	r1, r0
     59c:	bfb8      	it	lt
     59e:	425b      	neglt	r3, r3
     5a0:	2b19      	cmp	r3, #25
     5a2:	bf88      	it	hi
     5a4:	4770      	bxhi	lr
     5a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     5aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     5ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     5b2:	bf18      	it	ne
     5b4:	4240      	negne	r0, r0
     5b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     5ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     5be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     5c2:	bf18      	it	ne
     5c4:	4249      	negne	r1, r1
     5c6:	ea92 0f03 	teq	r2, r3
     5ca:	d03f      	beq.n	64c <CONFIG_BT_CTLR_COMPANY_ID+0x5b>
     5cc:	f1a2 0201 	sub.w	r2, r2, #1
     5d0:	fa41 fc03 	asr.w	ip, r1, r3
     5d4:	eb10 000c 	adds.w	r0, r0, ip
     5d8:	f1c3 0320 	rsb	r3, r3, #32
     5dc:	fa01 f103 	lsl.w	r1, r1, r3
     5e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     5e4:	d502      	bpl.n	5ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x10>
     5e6:	4249      	negs	r1, r1
     5e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     5ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     5f0:	d313      	bcc.n	61a <CONFIG_BT_CTLR_COMPANY_ID+0x29>
     5f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     5f6:	d306      	bcc.n	606 <CONFIG_BT_CTLR_COMPANY_ID+0x15>
     5f8:	0840      	lsrs	r0, r0, #1
     5fa:	ea4f 0131 	mov.w	r1, r1, rrx
     5fe:	f102 0201 	add.w	r2, r2, #1
     602:	2afe      	cmp	r2, #254	; 0xfe
     604:	d251      	bcs.n	6aa <CONFIG_BT_CTLR_COMPANY_ID+0xb9>
     606:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     60a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     60e:	bf08      	it	eq
     610:	f020 0001 	biceq.w	r0, r0, #1
     614:	ea40 0003 	orr.w	r0, r0, r3
     618:	4770      	bx	lr
     61a:	0049      	lsls	r1, r1, #1
     61c:	eb40 0000 	adc.w	r0, r0, r0
     620:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
     624:	f1a2 0201 	sub.w	r2, r2, #1
     628:	d1ed      	bne.n	606 <CONFIG_BT_CTLR_COMPANY_ID+0x15>
     62a:	fab0 fc80 	clz	ip, r0
     62e:	f1ac 0c08 	sub.w	ip, ip, #8
     632:	ebb2 020c 	subs.w	r2, r2, ip
     636:	fa00 f00c 	lsl.w	r0, r0, ip
     63a:	bfaa      	itet	ge
     63c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     640:	4252      	neglt	r2, r2
     642:	4318      	orrge	r0, r3
     644:	bfbc      	itt	lt
     646:	40d0      	lsrlt	r0, r2
     648:	4318      	orrlt	r0, r3
     64a:	4770      	bx	lr
     64c:	f092 0f00 	teq	r2, #0
     650:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     654:	bf06      	itte	eq
     656:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     65a:	3201      	addeq	r2, #1
     65c:	3b01      	subne	r3, #1
     65e:	e7b5      	b.n	5cc <__addsf3+0x58>
     660:	ea4f 0341 	mov.w	r3, r1, lsl #1
     664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     668:	bf18      	it	ne
     66a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     66e:	d021      	beq.n	6b4 <CONFIG_BT_CTLR_COMPANY_ID+0xc3>
     670:	ea92 0f03 	teq	r2, r3
     674:	d004      	beq.n	680 <CONFIG_BT_CTLR_COMPANY_ID+0x8f>
     676:	f092 0f00 	teq	r2, #0
     67a:	bf08      	it	eq
     67c:	4608      	moveq	r0, r1
     67e:	4770      	bx	lr
     680:	ea90 0f01 	teq	r0, r1
     684:	bf1c      	itt	ne
     686:	2000      	movne	r0, #0
     688:	4770      	bxne	lr
     68a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     68e:	d104      	bne.n	69a <CONFIG_BT_CTLR_COMPANY_ID+0xa9>
     690:	0040      	lsls	r0, r0, #1
     692:	bf28      	it	cs
     694:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     698:	4770      	bx	lr
     69a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     69e:	bf3c      	itt	cc
     6a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     6a4:	4770      	bxcc	lr
     6a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     6aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     6ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     6b2:	4770      	bx	lr
     6b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     6b8:	bf16      	itet	ne
     6ba:	4608      	movne	r0, r1
     6bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     6c0:	4601      	movne	r1, r0
     6c2:	0242      	lsls	r2, r0, #9
     6c4:	bf06      	itte	eq
     6c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     6ca:	ea90 0f01 	teqeq	r0, r1
     6ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     6d2:	4770      	bx	lr

000006d4 <__aeabi_ui2f>:
     6d4:	f04f 0300 	mov.w	r3, #0
     6d8:	e004      	b.n	6e4 <__aeabi_i2f+0x8>
     6da:	bf00      	nop

000006dc <__aeabi_i2f>:
     6dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     6e0:	bf48      	it	mi
     6e2:	4240      	negmi	r0, r0
     6e4:	ea5f 0c00 	movs.w	ip, r0
     6e8:	bf08      	it	eq
     6ea:	4770      	bxeq	lr
     6ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     6f0:	4601      	mov	r1, r0
     6f2:	f04f 0000 	mov.w	r0, #0
     6f6:	e01c      	b.n	732 <__aeabi_l2f+0x2a>

000006f8 <__aeabi_ul2f>:
     6f8:	ea50 0201 	orrs.w	r2, r0, r1
     6fc:	bf08      	it	eq
     6fe:	4770      	bxeq	lr
     700:	f04f 0300 	mov.w	r3, #0
     704:	e00a      	b.n	71c <__aeabi_l2f+0x14>
     706:	bf00      	nop

00000708 <__aeabi_l2f>:
     708:	ea50 0201 	orrs.w	r2, r0, r1
     70c:	bf08      	it	eq
     70e:	4770      	bxeq	lr
     710:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     714:	d502      	bpl.n	71c <__aeabi_l2f+0x14>
     716:	4240      	negs	r0, r0
     718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     71c:	ea5f 0c01 	movs.w	ip, r1
     720:	bf02      	ittt	eq
     722:	4684      	moveq	ip, r0
     724:	4601      	moveq	r1, r0
     726:	2000      	moveq	r0, #0
     728:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     72c:	bf08      	it	eq
     72e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     732:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     736:	fabc f28c 	clz	r2, ip
     73a:	3a08      	subs	r2, #8
     73c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     740:	db10      	blt.n	764 <__aeabi_l2f+0x5c>
     742:	fa01 fc02 	lsl.w	ip, r1, r2
     746:	4463      	add	r3, ip
     748:	fa00 fc02 	lsl.w	ip, r0, r2
     74c:	f1c2 0220 	rsb	r2, r2, #32
     750:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     754:	fa20 f202 	lsr.w	r2, r0, r2
     758:	eb43 0002 	adc.w	r0, r3, r2
     75c:	bf08      	it	eq
     75e:	f020 0001 	biceq.w	r0, r0, #1
     762:	4770      	bx	lr
     764:	f102 0220 	add.w	r2, r2, #32
     768:	fa01 fc02 	lsl.w	ip, r1, r2
     76c:	f1c2 0220 	rsb	r2, r2, #32
     770:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     774:	fa21 f202 	lsr.w	r2, r1, r2
     778:	eb43 0002 	adc.w	r0, r3, r2
     77c:	bf08      	it	eq
     77e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     782:	4770      	bx	lr

00000784 <__aeabi_fmul>:
     784:	f04f 0cff 	mov.w	ip, #255	; 0xff
     788:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     78c:	bf1e      	ittt	ne
     78e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     792:	ea92 0f0c 	teqne	r2, ip
     796:	ea93 0f0c 	teqne	r3, ip
     79a:	d06f      	beq.n	87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
     79c:	441a      	add	r2, r3
     79e:	ea80 0c01 	eor.w	ip, r0, r1
     7a2:	0240      	lsls	r0, r0, #9
     7a4:	bf18      	it	ne
     7a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     7aa:	d01e      	beq.n	7ea <__aeabi_fmul+0x66>
     7ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     7b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     7b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     7b8:	fba0 3101 	umull	r3, r1, r0, r1
     7bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     7c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     7c4:	bf3e      	ittt	cc
     7c6:	0049      	lslcc	r1, r1, #1
     7c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     7cc:	005b      	lslcc	r3, r3, #1
     7ce:	ea40 0001 	orr.w	r0, r0, r1
     7d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     7d6:	2afd      	cmp	r2, #253	; 0xfd
     7d8:	d81d      	bhi.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     7da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     7de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     7e2:	bf08      	it	eq
     7e4:	f020 0001 	biceq.w	r0, r0, #1
     7e8:	4770      	bx	lr
     7ea:	f090 0f00 	teq	r0, #0
     7ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     7f2:	bf08      	it	eq
     7f4:	0249      	lsleq	r1, r1, #9
     7f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     7fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     7fe:	3a7f      	subs	r2, #127	; 0x7f
     800:	bfc2      	ittt	gt
     802:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     806:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     80a:	4770      	bxgt	lr
     80c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     810:	f04f 0300 	mov.w	r3, #0
     814:	3a01      	subs	r2, #1
     816:	dc5d      	bgt.n	8d4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd4>
     818:	f112 0f19 	cmn.w	r2, #25
     81c:	bfdc      	itt	le
     81e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     822:	4770      	bxle	lr
     824:	f1c2 0200 	rsb	r2, r2, #0
     828:	0041      	lsls	r1, r0, #1
     82a:	fa21 f102 	lsr.w	r1, r1, r2
     82e:	f1c2 0220 	rsb	r2, r2, #32
     832:	fa00 fc02 	lsl.w	ip, r0, r2
     836:	ea5f 0031 	movs.w	r0, r1, rrx
     83a:	f140 0000 	adc.w	r0, r0, #0
     83e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     842:	bf08      	it	eq
     844:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     848:	4770      	bx	lr
     84a:	f092 0f00 	teq	r2, #0
     84e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     852:	bf02      	ittt	eq
     854:	0040      	lsleq	r0, r0, #1
     856:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     85a:	3a01      	subeq	r2, #1
     85c:	d0f9      	beq.n	852 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x52>
     85e:	ea40 000c 	orr.w	r0, r0, ip
     862:	f093 0f00 	teq	r3, #0
     866:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     86a:	bf02      	ittt	eq
     86c:	0049      	lsleq	r1, r1, #1
     86e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     872:	3b01      	subeq	r3, #1
     874:	d0f9      	beq.n	86a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6a>
     876:	ea41 010c 	orr.w	r1, r1, ip
     87a:	e78f      	b.n	79c <__aeabi_fmul+0x18>
     87c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     880:	ea92 0f0c 	teq	r2, ip
     884:	bf18      	it	ne
     886:	ea93 0f0c 	teqne	r3, ip
     88a:	d00a      	beq.n	8a2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa2>
     88c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     890:	bf18      	it	ne
     892:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     896:	d1d8      	bne.n	84a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4a>
     898:	ea80 0001 	eor.w	r0, r0, r1
     89c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     8a0:	4770      	bx	lr
     8a2:	f090 0f00 	teq	r0, #0
     8a6:	bf17      	itett	ne
     8a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     8ac:	4608      	moveq	r0, r1
     8ae:	f091 0f00 	teqne	r1, #0
     8b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     8b6:	d014      	beq.n	8e2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe2>
     8b8:	ea92 0f0c 	teq	r2, ip
     8bc:	d101      	bne.n	8c2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc2>
     8be:	0242      	lsls	r2, r0, #9
     8c0:	d10f      	bne.n	8e2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe2>
     8c2:	ea93 0f0c 	teq	r3, ip
     8c6:	d103      	bne.n	8d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd0>
     8c8:	024b      	lsls	r3, r1, #9
     8ca:	bf18      	it	ne
     8cc:	4608      	movne	r0, r1
     8ce:	d108      	bne.n	8e2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe2>
     8d0:	ea80 0001 	eor.w	r0, r0, r1
     8d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     8d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     8dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     8e0:	4770      	bx	lr
     8e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     8e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     8ea:	4770      	bx	lr

000008ec <__aeabi_fdiv>:
     8ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
     8f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     8f4:	bf1e      	ittt	ne
     8f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     8fa:	ea92 0f0c 	teqne	r2, ip
     8fe:	ea93 0f0c 	teqne	r3, ip
     902:	d069      	beq.n	9d8 <__aeabi_fdiv+0xec>
     904:	eba2 0203 	sub.w	r2, r2, r3
     908:	ea80 0c01 	eor.w	ip, r0, r1
     90c:	0249      	lsls	r1, r1, #9
     90e:	ea4f 2040 	mov.w	r0, r0, lsl #9
     912:	d037      	beq.n	984 <__aeabi_fdiv+0x98>
     914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     918:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     91c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     920:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     924:	428b      	cmp	r3, r1
     926:	bf38      	it	cc
     928:	005b      	lslcc	r3, r3, #1
     92a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     92e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     932:	428b      	cmp	r3, r1
     934:	bf24      	itt	cs
     936:	1a5b      	subcs	r3, r3, r1
     938:	ea40 000c 	orrcs.w	r0, r0, ip
     93c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     940:	bf24      	itt	cs
     942:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     946:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     94a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     94e:	bf24      	itt	cs
     950:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     958:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     95c:	bf24      	itt	cs
     95e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     962:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     966:	011b      	lsls	r3, r3, #4
     968:	bf18      	it	ne
     96a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     96e:	d1e0      	bne.n	932 <__aeabi_fdiv+0x46>
     970:	2afd      	cmp	r2, #253	; 0xfd
     972:	f63f af50 	bhi.w	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     976:	428b      	cmp	r3, r1
     978:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     97c:	bf08      	it	eq
     97e:	f020 0001 	biceq.w	r0, r0, #1
     982:	4770      	bx	lr
     984:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     988:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     98c:	327f      	adds	r2, #127	; 0x7f
     98e:	bfc2      	ittt	gt
     990:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     994:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     998:	4770      	bxgt	lr
     99a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     99e:	f04f 0300 	mov.w	r3, #0
     9a2:	3a01      	subs	r2, #1
     9a4:	e737      	b.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     9a6:	f092 0f00 	teq	r2, #0
     9aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     9ae:	bf02      	ittt	eq
     9b0:	0040      	lsleq	r0, r0, #1
     9b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     9b6:	3a01      	subeq	r2, #1
     9b8:	d0f9      	beq.n	9ae <__aeabi_fdiv+0xc2>
     9ba:	ea40 000c 	orr.w	r0, r0, ip
     9be:	f093 0f00 	teq	r3, #0
     9c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9c6:	bf02      	ittt	eq
     9c8:	0049      	lsleq	r1, r1, #1
     9ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     9ce:	3b01      	subeq	r3, #1
     9d0:	d0f9      	beq.n	9c6 <__aeabi_fdiv+0xda>
     9d2:	ea41 010c 	orr.w	r1, r1, ip
     9d6:	e795      	b.n	904 <__aeabi_fdiv+0x18>
     9d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     9dc:	ea92 0f0c 	teq	r2, ip
     9e0:	d108      	bne.n	9f4 <__aeabi_fdiv+0x108>
     9e2:	0242      	lsls	r2, r0, #9
     9e4:	f47f af7d 	bne.w	8e2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe2>
     9e8:	ea93 0f0c 	teq	r3, ip
     9ec:	f47f af70 	bne.w	8d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd0>
     9f0:	4608      	mov	r0, r1
     9f2:	e776      	b.n	8e2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe2>
     9f4:	ea93 0f0c 	teq	r3, ip
     9f8:	d104      	bne.n	a04 <__aeabi_fdiv+0x118>
     9fa:	024b      	lsls	r3, r1, #9
     9fc:	f43f af4c 	beq.w	898 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98>
     a00:	4608      	mov	r0, r1
     a02:	e76e      	b.n	8e2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe2>
     a04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     a08:	bf18      	it	ne
     a0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     a0e:	d1ca      	bne.n	9a6 <__aeabi_fdiv+0xba>
     a10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     a14:	f47f af5c 	bne.w	8d0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xd0>
     a18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     a1c:	f47f af3c 	bne.w	898 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x98>
     a20:	e75f      	b.n	8e2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe2>
     a22:	bf00      	nop

00000a24 <__gesf2>:
     a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     a28:	e006      	b.n	a38 <__cmpsf2+0x4>
     a2a:	bf00      	nop

00000a2c <__lesf2>:
     a2c:	f04f 0c01 	mov.w	ip, #1
     a30:	e002      	b.n	a38 <__cmpsf2+0x4>
     a32:	bf00      	nop

00000a34 <__cmpsf2>:
     a34:	f04f 0c01 	mov.w	ip, #1
     a38:	f84d cd04 	str.w	ip, [sp, #-4]!
     a3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
     a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a48:	bf18      	it	ne
     a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a4e:	d011      	beq.n	a74 <__cmpsf2+0x40>
     a50:	b001      	add	sp, #4
     a52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     a56:	bf18      	it	ne
     a58:	ea90 0f01 	teqne	r0, r1
     a5c:	bf58      	it	pl
     a5e:	ebb2 0003 	subspl.w	r0, r2, r3
     a62:	bf88      	it	hi
     a64:	17c8      	asrhi	r0, r1, #31
     a66:	bf38      	it	cc
     a68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     a6c:	bf18      	it	ne
     a6e:	f040 0001 	orrne.w	r0, r0, #1
     a72:	4770      	bx	lr
     a74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a78:	d102      	bne.n	a80 <__cmpsf2+0x4c>
     a7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     a7e:	d105      	bne.n	a8c <__cmpsf2+0x58>
     a80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     a84:	d1e4      	bne.n	a50 <__cmpsf2+0x1c>
     a86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     a8a:	d0e1      	beq.n	a50 <__cmpsf2+0x1c>
     a8c:	f85d 0b04 	ldr.w	r0, [sp], #4
     a90:	4770      	bx	lr
     a92:	bf00      	nop

00000a94 <__aeabi_cfrcmple>:
     a94:	4684      	mov	ip, r0
     a96:	4608      	mov	r0, r1
     a98:	4661      	mov	r1, ip
     a9a:	e7ff      	b.n	a9c <__aeabi_cfcmpeq>

00000a9c <__aeabi_cfcmpeq>:
     a9c:	b50f      	push	{r0, r1, r2, r3, lr}
     a9e:	f7ff ffc9 	bl	a34 <__cmpsf2>
     aa2:	2800      	cmp	r0, #0
     aa4:	bf48      	it	mi
     aa6:	f110 0f00 	cmnmi.w	r0, #0
     aaa:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000aac <__aeabi_fcmpeq>:
     aac:	f84d ed08 	str.w	lr, [sp, #-8]!
     ab0:	f7ff fff4 	bl	a9c <__aeabi_cfcmpeq>
     ab4:	bf0c      	ite	eq
     ab6:	2001      	moveq	r0, #1
     ab8:	2000      	movne	r0, #0
     aba:	f85d fb08 	ldr.w	pc, [sp], #8
     abe:	bf00      	nop

00000ac0 <__aeabi_fcmplt>:
     ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ac4:	f7ff ffea 	bl	a9c <__aeabi_cfcmpeq>
     ac8:	bf34      	ite	cc
     aca:	2001      	movcc	r0, #1
     acc:	2000      	movcs	r0, #0
     ace:	f85d fb08 	ldr.w	pc, [sp], #8
     ad2:	bf00      	nop

00000ad4 <__aeabi_fcmple>:
     ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ad8:	f7ff ffe0 	bl	a9c <__aeabi_cfcmpeq>
     adc:	bf94      	ite	ls
     ade:	2001      	movls	r0, #1
     ae0:	2000      	movhi	r0, #0
     ae2:	f85d fb08 	ldr.w	pc, [sp], #8
     ae6:	bf00      	nop

00000ae8 <__aeabi_fcmpge>:
     ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
     aec:	f7ff ffd2 	bl	a94 <__aeabi_cfrcmple>
     af0:	bf94      	ite	ls
     af2:	2001      	movls	r0, #1
     af4:	2000      	movhi	r0, #0
     af6:	f85d fb08 	ldr.w	pc, [sp], #8
     afa:	bf00      	nop

00000afc <__aeabi_fcmpgt>:
     afc:	f84d ed08 	str.w	lr, [sp, #-8]!
     b00:	f7ff ffc8 	bl	a94 <__aeabi_cfrcmple>
     b04:	bf34      	ite	cc
     b06:	2001      	movcc	r0, #1
     b08:	2000      	movcs	r0, #0
     b0a:	f85d fb08 	ldr.w	pc, [sp], #8
     b0e:	bf00      	nop

00000b10 <__aeabi_f2iz>:
     b10:	ea4f 0240 	mov.w	r2, r0, lsl #1
     b14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     b18:	d30f      	bcc.n	b3a <__aeabi_f2iz+0x2a>
     b1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
     b1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     b22:	d90d      	bls.n	b40 <__aeabi_f2iz+0x30>
     b24:	ea4f 2300 	mov.w	r3, r0, lsl #8
     b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b30:	fa23 f002 	lsr.w	r0, r3, r2
     b34:	bf18      	it	ne
     b36:	4240      	negne	r0, r0
     b38:	4770      	bx	lr
     b3a:	f04f 0000 	mov.w	r0, #0
     b3e:	4770      	bx	lr
     b40:	f112 0f61 	cmn.w	r2, #97	; 0x61
     b44:	d101      	bne.n	b4a <__aeabi_f2iz+0x3a>
     b46:	0242      	lsls	r2, r0, #9
     b48:	d105      	bne.n	b56 <__aeabi_f2iz+0x46>
     b4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     b4e:	bf08      	it	eq
     b50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     b54:	4770      	bx	lr
     b56:	f04f 0000 	mov.w	r0, #0
     b5a:	4770      	bx	lr

00000b5c <__aeabi_f2uiz>:
     b5c:	0042      	lsls	r2, r0, #1
     b5e:	d20e      	bcs.n	b7e <__aeabi_f2uiz+0x22>
     b60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     b64:	d30b      	bcc.n	b7e <__aeabi_f2uiz+0x22>
     b66:	f04f 039e 	mov.w	r3, #158	; 0x9e
     b6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     b6e:	d409      	bmi.n	b84 <__aeabi_f2uiz+0x28>
     b70:	ea4f 2300 	mov.w	r3, r0, lsl #8
     b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b78:	fa23 f002 	lsr.w	r0, r3, r2
     b7c:	4770      	bx	lr
     b7e:	f04f 0000 	mov.w	r0, #0
     b82:	4770      	bx	lr
     b84:	f112 0f61 	cmn.w	r2, #97	; 0x61
     b88:	d101      	bne.n	b8e <__aeabi_f2uiz+0x32>
     b8a:	0242      	lsls	r2, r0, #9
     b8c:	d102      	bne.n	b94 <__aeabi_f2uiz+0x38>
     b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b92:	4770      	bx	lr
     b94:	f04f 0000 	mov.w	r0, #0
     b98:	4770      	bx	lr
     b9a:	bf00      	nop

00000b9c <__aeabi_ldivmod>:
     b9c:	b97b      	cbnz	r3, bbe <__aeabi_ldivmod+0x22>
     b9e:	b972      	cbnz	r2, bbe <__aeabi_ldivmod+0x22>
     ba0:	2900      	cmp	r1, #0
     ba2:	bfbe      	ittt	lt
     ba4:	2000      	movlt	r0, #0
     ba6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     baa:	e006      	blt.n	bba <__aeabi_ldivmod+0x1e>
     bac:	bf08      	it	eq
     bae:	2800      	cmpeq	r0, #0
     bb0:	bf1c      	itt	ne
     bb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     bb6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     bba:	f000 b857 	b.w	c6c <__aeabi_idiv0>
     bbe:	f1ad 0c08 	sub.w	ip, sp, #8
     bc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     bc6:	2900      	cmp	r1, #0
     bc8:	db09      	blt.n	bde <__aeabi_ldivmod+0x42>
     bca:	2b00      	cmp	r3, #0
     bcc:	db1a      	blt.n	c04 <__aeabi_ldivmod+0x68>
     bce:	f000 f862 	bl	c96 <__udivmoddi4>
     bd2:	f8dd e004 	ldr.w	lr, [sp, #4]
     bd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bda:	b004      	add	sp, #16
     bdc:	4770      	bx	lr
     bde:	4240      	negs	r0, r0
     be0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     be4:	2b00      	cmp	r3, #0
     be6:	db1b      	blt.n	c20 <__aeabi_ldivmod+0x84>
     be8:	f000 f855 	bl	c96 <__udivmoddi4>
     bec:	f8dd e004 	ldr.w	lr, [sp, #4]
     bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bf4:	b004      	add	sp, #16
     bf6:	4240      	negs	r0, r0
     bf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     bfc:	4252      	negs	r2, r2
     bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c02:	4770      	bx	lr
     c04:	4252      	negs	r2, r2
     c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c0a:	f000 f844 	bl	c96 <__udivmoddi4>
     c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
     c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     c16:	b004      	add	sp, #16
     c18:	4240      	negs	r0, r0
     c1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c1e:	4770      	bx	lr
     c20:	4252      	negs	r2, r2
     c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c26:	f000 f836 	bl	c96 <__udivmoddi4>
     c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
     c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     c32:	b004      	add	sp, #16
     c34:	4252      	negs	r2, r2
     c36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c3a:	4770      	bx	lr

00000c3c <__aeabi_uldivmod>:
     c3c:	b953      	cbnz	r3, c54 <__aeabi_uldivmod+0x18>
     c3e:	b94a      	cbnz	r2, c54 <__aeabi_uldivmod+0x18>
     c40:	2900      	cmp	r1, #0
     c42:	bf08      	it	eq
     c44:	2800      	cmpeq	r0, #0
     c46:	bf1c      	itt	ne
     c48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     c4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     c50:	f000 b80c 	b.w	c6c <__aeabi_idiv0>
     c54:	f1ad 0c08 	sub.w	ip, sp, #8
     c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     c5c:	f000 f81b 	bl	c96 <__udivmoddi4>
     c60:	f8dd e004 	ldr.w	lr, [sp, #4]
     c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     c68:	b004      	add	sp, #16
     c6a:	4770      	bx	lr

00000c6c <__aeabi_idiv0>:
     c6c:	4770      	bx	lr
     c6e:	bf00      	nop

00000c70 <__popcountsi2>:
     c70:	0843      	lsrs	r3, r0, #1
     c72:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     c76:	1ac0      	subs	r0, r0, r3
     c78:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
     c7c:	0880      	lsrs	r0, r0, #2
     c7e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     c82:	4418      	add	r0, r3
     c84:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     c88:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
     c8c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     c90:	4358      	muls	r0, r3
     c92:	0e00      	lsrs	r0, r0, #24
     c94:	4770      	bx	lr

00000c96 <__udivmoddi4>:
     c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
     c9c:	4615      	mov	r5, r2
     c9e:	4604      	mov	r4, r0
     ca0:	468e      	mov	lr, r1
     ca2:	461e      	mov	r6, r3
     ca4:	2b00      	cmp	r3, #0
     ca6:	f040 80cc 	bne.w	e42 <__udivmoddi4+0x1ac>
     caa:	428a      	cmp	r2, r1
     cac:	fab2 fc82 	clz	ip, r2
     cb0:	d94c      	bls.n	d4c <__udivmoddi4+0xb6>
     cb2:	f1bc 0f00 	cmp.w	ip, #0
     cb6:	d00b      	beq.n	cd0 <__udivmoddi4+0x3a>
     cb8:	f1cc 0820 	rsb	r8, ip, #32
     cbc:	fa01 fe0c 	lsl.w	lr, r1, ip
     cc0:	fa20 f808 	lsr.w	r8, r0, r8
     cc4:	fa02 f50c 	lsl.w	r5, r2, ip
     cc8:	ea48 0e0e 	orr.w	lr, r8, lr
     ccc:	fa00 f40c 	lsl.w	r4, r0, ip
     cd0:	ea4f 4915 	mov.w	r9, r5, lsr #16
     cd4:	fa1f f885 	uxth.w	r8, r5
     cd8:	fbbe faf9 	udiv	sl, lr, r9
     cdc:	0c21      	lsrs	r1, r4, #16
     cde:	fb09 e31a 	mls	r3, r9, sl, lr
     ce2:	fb0a fb08 	mul.w	fp, sl, r8
     ce6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     cea:	459b      	cmp	fp, r3
     cec:	d92a      	bls.n	d44 <__udivmoddi4+0xae>
     cee:	18eb      	adds	r3, r5, r3
     cf0:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     cf4:	d204      	bcs.n	d00 <__udivmoddi4+0x6a>
     cf6:	459b      	cmp	fp, r3
     cf8:	d902      	bls.n	d00 <__udivmoddi4+0x6a>
     cfa:	f1aa 0002 	sub.w	r0, sl, #2
     cfe:	442b      	add	r3, r5
     d00:	eba3 030b 	sub.w	r3, r3, fp
     d04:	b2a4      	uxth	r4, r4
     d06:	fbb3 f2f9 	udiv	r2, r3, r9
     d0a:	fb09 3312 	mls	r3, r9, r2, r3
     d0e:	fb02 f808 	mul.w	r8, r2, r8
     d12:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     d16:	45a0      	cmp	r8, r4
     d18:	d916      	bls.n	d48 <__udivmoddi4+0xb2>
     d1a:	192c      	adds	r4, r5, r4
     d1c:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     d20:	d203      	bcs.n	d2a <__udivmoddi4+0x94>
     d22:	45a0      	cmp	r8, r4
     d24:	d901      	bls.n	d2a <__udivmoddi4+0x94>
     d26:	1e93      	subs	r3, r2, #2
     d28:	442c      	add	r4, r5
     d2a:	eba4 0408 	sub.w	r4, r4, r8
     d2e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d32:	b127      	cbz	r7, d3e <__udivmoddi4+0xa8>
     d34:	fa24 f40c 	lsr.w	r4, r4, ip
     d38:	2300      	movs	r3, #0
     d3a:	603c      	str	r4, [r7, #0]
     d3c:	607b      	str	r3, [r7, #4]
     d3e:	4631      	mov	r1, r6
     d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d44:	4650      	mov	r0, sl
     d46:	e7db      	b.n	d00 <__udivmoddi4+0x6a>
     d48:	4613      	mov	r3, r2
     d4a:	e7ee      	b.n	d2a <__udivmoddi4+0x94>
     d4c:	b902      	cbnz	r2, d50 <__udivmoddi4+0xba>
     d4e:	deff      	udf	#255	; 0xff
     d50:	f1bc 0f00 	cmp.w	ip, #0
     d54:	d12e      	bne.n	db4 <__udivmoddi4+0x11e>
     d56:	1a8b      	subs	r3, r1, r2
     d58:	2601      	movs	r6, #1
     d5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     d5e:	b2aa      	uxth	r2, r5
     d60:	fbb3 f8fe 	udiv	r8, r3, lr
     d64:	0c21      	lsrs	r1, r4, #16
     d66:	fb0e 3318 	mls	r3, lr, r8, r3
     d6a:	fb08 f902 	mul.w	r9, r8, r2
     d6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     d72:	4599      	cmp	r9, r3
     d74:	d961      	bls.n	e3a <__udivmoddi4+0x1a4>
     d76:	18eb      	adds	r3, r5, r3
     d78:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     d7c:	d204      	bcs.n	d88 <__udivmoddi4+0xf2>
     d7e:	4599      	cmp	r9, r3
     d80:	d902      	bls.n	d88 <__udivmoddi4+0xf2>
     d82:	f1a8 0002 	sub.w	r0, r8, #2
     d86:	442b      	add	r3, r5
     d88:	eba3 0309 	sub.w	r3, r3, r9
     d8c:	b2a4      	uxth	r4, r4
     d8e:	fbb3 f1fe 	udiv	r1, r3, lr
     d92:	fb0e 3311 	mls	r3, lr, r1, r3
     d96:	434a      	muls	r2, r1
     d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     d9c:	42a2      	cmp	r2, r4
     d9e:	d94e      	bls.n	e3e <__udivmoddi4+0x1a8>
     da0:	192c      	adds	r4, r5, r4
     da2:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     da6:	d203      	bcs.n	db0 <__udivmoddi4+0x11a>
     da8:	42a2      	cmp	r2, r4
     daa:	d901      	bls.n	db0 <__udivmoddi4+0x11a>
     dac:	1e8b      	subs	r3, r1, #2
     dae:	442c      	add	r4, r5
     db0:	1aa4      	subs	r4, r4, r2
     db2:	e7bc      	b.n	d2e <__udivmoddi4+0x98>
     db4:	f1cc 0e20 	rsb	lr, ip, #32
     db8:	fa02 f50c 	lsl.w	r5, r2, ip
     dbc:	fa21 f90e 	lsr.w	r9, r1, lr
     dc0:	fa01 f30c 	lsl.w	r3, r1, ip
     dc4:	fa20 fe0e 	lsr.w	lr, r0, lr
     dc8:	ea4e 0303 	orr.w	r3, lr, r3
     dcc:	ea4f 4815 	mov.w	r8, r5, lsr #16
     dd0:	fa00 f40c 	lsl.w	r4, r0, ip
     dd4:	fbb9 f1f8 	udiv	r1, r9, r8
     dd8:	fa1f fe85 	uxth.w	lr, r5
     ddc:	fb08 9211 	mls	r2, r8, r1, r9
     de0:	0c18      	lsrs	r0, r3, #16
     de2:	fb01 f60e 	mul.w	r6, r1, lr
     de6:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     dea:	4296      	cmp	r6, r2
     dec:	d921      	bls.n	e32 <__udivmoddi4+0x19c>
     dee:	18aa      	adds	r2, r5, r2
     df0:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     df4:	d203      	bcs.n	dfe <__udivmoddi4+0x168>
     df6:	4296      	cmp	r6, r2
     df8:	d901      	bls.n	dfe <__udivmoddi4+0x168>
     dfa:	1e88      	subs	r0, r1, #2
     dfc:	442a      	add	r2, r5
     dfe:	1b92      	subs	r2, r2, r6
     e00:	b29b      	uxth	r3, r3
     e02:	fbb2 f9f8 	udiv	r9, r2, r8
     e06:	fb08 2219 	mls	r2, r8, r9, r2
     e0a:	fb09 fe0e 	mul.w	lr, r9, lr
     e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     e12:	459e      	cmp	lr, r3
     e14:	d90f      	bls.n	e36 <__udivmoddi4+0x1a0>
     e16:	18eb      	adds	r3, r5, r3
     e18:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     e1c:	d204      	bcs.n	e28 <__udivmoddi4+0x192>
     e1e:	459e      	cmp	lr, r3
     e20:	d902      	bls.n	e28 <__udivmoddi4+0x192>
     e22:	f1a9 0602 	sub.w	r6, r9, #2
     e26:	442b      	add	r3, r5
     e28:	eba3 030e 	sub.w	r3, r3, lr
     e2c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     e30:	e793      	b.n	d5a <__udivmoddi4+0xc4>
     e32:	4608      	mov	r0, r1
     e34:	e7e3      	b.n	dfe <__udivmoddi4+0x168>
     e36:	464e      	mov	r6, r9
     e38:	e7f6      	b.n	e28 <__udivmoddi4+0x192>
     e3a:	4640      	mov	r0, r8
     e3c:	e7a4      	b.n	d88 <__udivmoddi4+0xf2>
     e3e:	460b      	mov	r3, r1
     e40:	e7b6      	b.n	db0 <__udivmoddi4+0x11a>
     e42:	428b      	cmp	r3, r1
     e44:	d905      	bls.n	e52 <__udivmoddi4+0x1bc>
     e46:	b10f      	cbz	r7, e4c <__udivmoddi4+0x1b6>
     e48:	e9c7 0100 	strd	r0, r1, [r7]
     e4c:	2600      	movs	r6, #0
     e4e:	4630      	mov	r0, r6
     e50:	e775      	b.n	d3e <__udivmoddi4+0xa8>
     e52:	fab3 fc83 	clz	ip, r3
     e56:	f1bc 0f00 	cmp.w	ip, #0
     e5a:	d10f      	bne.n	e7c <__udivmoddi4+0x1e6>
     e5c:	428b      	cmp	r3, r1
     e5e:	d301      	bcc.n	e64 <__udivmoddi4+0x1ce>
     e60:	4282      	cmp	r2, r0
     e62:	d809      	bhi.n	e78 <__udivmoddi4+0x1e2>
     e64:	1a84      	subs	r4, r0, r2
     e66:	eb61 0e03 	sbc.w	lr, r1, r3
     e6a:	2001      	movs	r0, #1
     e6c:	2f00      	cmp	r7, #0
     e6e:	d06a      	beq.n	f46 <__udivmoddi4+0x2b0>
     e70:	e9c7 4e00 	strd	r4, lr, [r7]
     e74:	2600      	movs	r6, #0
     e76:	e762      	b.n	d3e <__udivmoddi4+0xa8>
     e78:	4660      	mov	r0, ip
     e7a:	e7f7      	b.n	e6c <__udivmoddi4+0x1d6>
     e7c:	f1cc 0e20 	rsb	lr, ip, #32
     e80:	fa03 f30c 	lsl.w	r3, r3, ip
     e84:	fa22 f50e 	lsr.w	r5, r2, lr
     e88:	fa21 f40e 	lsr.w	r4, r1, lr
     e8c:	431d      	orrs	r5, r3
     e8e:	fa01 f30c 	lsl.w	r3, r1, ip
     e92:	fa20 f10e 	lsr.w	r1, r0, lr
     e96:	430b      	orrs	r3, r1
     e98:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     e9c:	fa00 f60c 	lsl.w	r6, r0, ip
     ea0:	fbb4 f9fa 	udiv	r9, r4, sl
     ea4:	fa1f f885 	uxth.w	r8, r5
     ea8:	fb0a 4019 	mls	r0, sl, r9, r4
     eac:	0c1c      	lsrs	r4, r3, #16
     eae:	fb09 f108 	mul.w	r1, r9, r8
     eb2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     eb6:	42a1      	cmp	r1, r4
     eb8:	fa02 f20c 	lsl.w	r2, r2, ip
     ebc:	d93f      	bls.n	f3e <__udivmoddi4+0x2a8>
     ebe:	192c      	adds	r4, r5, r4
     ec0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     ec4:	d204      	bcs.n	ed0 <__udivmoddi4+0x23a>
     ec6:	42a1      	cmp	r1, r4
     ec8:	d902      	bls.n	ed0 <__udivmoddi4+0x23a>
     eca:	f1a9 0002 	sub.w	r0, r9, #2
     ece:	442c      	add	r4, r5
     ed0:	1a64      	subs	r4, r4, r1
     ed2:	b29b      	uxth	r3, r3
     ed4:	fbb4 f9fa 	udiv	r9, r4, sl
     ed8:	fb0a 4419 	mls	r4, sl, r9, r4
     edc:	fb09 f808 	mul.w	r8, r9, r8
     ee0:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     ee4:	4588      	cmp	r8, r1
     ee6:	d92c      	bls.n	f42 <__udivmoddi4+0x2ac>
     ee8:	1869      	adds	r1, r5, r1
     eea:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     eee:	d204      	bcs.n	efa <__udivmoddi4+0x264>
     ef0:	4588      	cmp	r8, r1
     ef2:	d902      	bls.n	efa <__udivmoddi4+0x264>
     ef4:	f1a9 0302 	sub.w	r3, r9, #2
     ef8:	4429      	add	r1, r5
     efa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     efe:	eba1 0108 	sub.w	r1, r1, r8
     f02:	fba0 8902 	umull	r8, r9, r0, r2
     f06:	4549      	cmp	r1, r9
     f08:	46c2      	mov	sl, r8
     f0a:	464c      	mov	r4, r9
     f0c:	d302      	bcc.n	f14 <__udivmoddi4+0x27e>
     f0e:	d106      	bne.n	f1e <__udivmoddi4+0x288>
     f10:	4546      	cmp	r6, r8
     f12:	d204      	bcs.n	f1e <__udivmoddi4+0x288>
     f14:	ebb8 0a02 	subs.w	sl, r8, r2
     f18:	eb69 0405 	sbc.w	r4, r9, r5
     f1c:	3801      	subs	r0, #1
     f1e:	b197      	cbz	r7, f46 <__udivmoddi4+0x2b0>
     f20:	ebb6 030a 	subs.w	r3, r6, sl
     f24:	eb61 0604 	sbc.w	r6, r1, r4
     f28:	fa06 fe0e 	lsl.w	lr, r6, lr
     f2c:	fa23 f30c 	lsr.w	r3, r3, ip
     f30:	ea4e 0303 	orr.w	r3, lr, r3
     f34:	fa26 f60c 	lsr.w	r6, r6, ip
     f38:	e9c7 3600 	strd	r3, r6, [r7]
     f3c:	e79a      	b.n	e74 <__udivmoddi4+0x1de>
     f3e:	4648      	mov	r0, r9
     f40:	e7c6      	b.n	ed0 <__udivmoddi4+0x23a>
     f42:	464b      	mov	r3, r9
     f44:	e7d9      	b.n	efa <__udivmoddi4+0x264>
     f46:	463e      	mov	r6, r7
     f48:	e6f9      	b.n	d3e <__udivmoddi4+0xa8>
     f4a:	0000      	movs	r0, r0
     f4c:	0000      	movs	r0, r0
	...

00000f50 <linear_to_actual>:

	return (u16_t) ceiling(65535 * tmp * tmp);
}

static u16_t linear_to_actual(u16_t val)
{
     f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (u16_t) (65535 * sqrt(((float) val / 65535)));
     f54:	f7ff fbbe 	bl	6d4 <__aeabi_ui2f>
     f58:	4923      	ldr	r1, [pc, #140]	; (fe8 <linear_to_actual+0x98>)
     f5a:	f7ff fcc7 	bl	8ec <__aeabi_fdiv>
	if (square <= 0) {
     f5e:	2100      	movs	r1, #0
	return (u16_t) (65535 * sqrt(((float) val / 65535)));
     f60:	4605      	mov	r5, r0
	if (square <= 0) {
     f62:	f7ff fdb7 	bl	ad4 <__aeabi_fcmple>
     f66:	2800      	cmp	r0, #0
     f68:	d134      	bne.n	fd4 <linear_to_actual+0x84>
	root = square / 3.0;
     f6a:	4920      	ldr	r1, [pc, #128]	; (fec <linear_to_actual+0x9c>)
     f6c:	4628      	mov	r0, r5
     f6e:	f7ff fcbd 	bl	8ec <__aeabi_fdiv>
	} while (diff > MINDIFF || diff < -MINDIFF);
     f72:	f20f 0964 	addw	r9, pc, #100	; 0x64
     f76:	e9d9 8900 	ldrd	r8, r9, [r9]
	root = square / 3.0;
     f7a:	4606      	mov	r6, r0
		root = (root + square / root) / 2.0;
     f7c:	f04f 5a7c 	mov.w	sl, #1056964608	; 0x3f000000
     f80:	4631      	mov	r1, r6
     f82:	4628      	mov	r0, r5
     f84:	f7ff fcb2 	bl	8ec <__aeabi_fdiv>
     f88:	4631      	mov	r1, r6
     f8a:	f7ff faf3 	bl	574 <__addsf3>
     f8e:	4651      	mov	r1, sl
     f90:	f7ff fbf8 	bl	784 <__aeabi_fmul>
		diff = root - last;
     f94:	4631      	mov	r1, r6
		root = (root + square / root) / 2.0;
     f96:	4604      	mov	r4, r0
		diff = root - last;
     f98:	f7ff faea 	bl	570 <__aeabi_fsub>
	} while (diff > MINDIFF || diff < -MINDIFF);
     f9c:	f7ff fa04 	bl	3a8 <__aeabi_f2d>
     fa0:	4642      	mov	r2, r8
     fa2:	464b      	mov	r3, r9
     fa4:	4606      	mov	r6, r0
     fa6:	460f      	mov	r7, r1
     fa8:	f7ff fad4 	bl	554 <__aeabi_dcmpgt>
     fac:	b980      	cbnz	r0, fd0 <linear_to_actual+0x80>
     fae:	a30c      	add	r3, pc, #48	; (adr r3, fe0 <linear_to_actual+0x90>)
     fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
     fb4:	4630      	mov	r0, r6
     fb6:	4639      	mov	r1, r7
     fb8:	f7ff faae 	bl	518 <__aeabi_dcmplt>
     fbc:	b940      	cbnz	r0, fd0 <linear_to_actual+0x80>
	return (u16_t) (65535 * sqrt(((float) val / 65535)));
     fbe:	490a      	ldr	r1, [pc, #40]	; (fe8 <linear_to_actual+0x98>)
     fc0:	4620      	mov	r0, r4
     fc2:	f7ff fbdf 	bl	784 <__aeabi_fmul>
     fc6:	f7ff fdc9 	bl	b5c <__aeabi_f2uiz>
}
     fca:	b280      	uxth	r0, r0
     fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
     fd0:	4626      	mov	r6, r4
     fd2:	e7d5      	b.n	f80 <linear_to_actual+0x30>
		return 0;
     fd4:	2400      	movs	r4, #0
     fd6:	e7f2      	b.n	fbe <linear_to_actual+0x6e>
     fd8:	8e3a4bd9 	.word	0x8e3a4bd9
     fdc:	00102de2 	.word	0x00102de2
     fe0:	8e3a4bd9 	.word	0x8e3a4bd9
     fe4:	80102de2 	.word	0x80102de2
     fe8:	477fff00 	.word	0x477fff00
     fec:	40400000 	.word	0x40400000

00000ff0 <event_slave_prepare>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static void event_slave_prepare(u32_t ticks_at_expire, u32_t remainder,
				u16_t lazy, void *context)
{
     ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
     ff4:	4db6      	ldr	r5, [pc, #728]	; (12d0 <CONFIG_BT_RX_STACK_SIZE+0x2d0>)
{
     ff6:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
     ff8:	7c2b      	ldrb	r3, [r5, #16]
{
     ffa:	b08f      	sub	sp, #60	; 0x3c
     ffc:	4606      	mov	r6, r0
     ffe:	4688      	mov	r8, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    1000:	b12b      	cbz	r3, 100e <CONFIG_BT_RX_STACK_SIZE+0xe>
			LL_ASSERT(0);
    1002:	4040      	eors	r0, r0
    1004:	f380 8811 	msr	BASEPRI, r0
    1008:	f04f 0004 	mov.w	r0, #4
    100c:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    100e:	f894 3020 	ldrb.w	r3, [r4, #32]
    1012:	3307      	adds	r3, #7
    1014:	b2db      	uxtb	r3, r3
    1016:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    1018:	f994 301d 	ldrsb.w	r3, [r4, #29]
    101c:	2b00      	cmp	r3, #0
    101e:	da09      	bge.n	1034 <CONFIG_BT_RX_STACK_SIZE+0x34>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    1020:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    1022:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    1024:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    1028:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    102a:	6c21      	ldr	r1, [r4, #64]	; 0x40
			conn->slave.window_widening_prepare_us =
    102c:	4299      	cmp	r1, r3
    102e:	bf94      	ite	ls
    1030:	6461      	strls	r1, [r4, #68]	; 0x44
    1032:	6463      	strhi	r3, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    1034:	8d27      	ldrh	r7, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    1036:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    103a:	443a      	add	r2, r7
	event_counter = conn->event_counter + conn->latency_prepare;
    103c:	8c67      	ldrh	r7, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    103e:	b292      	uxth	r2, r2
    1040:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    1042:	443a      	add	r2, r7
    1044:	b297      	uxth	r7, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    1046:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    104a:	429a      	cmp	r2, r3
    104c:	d158      	bne.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
    104e:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
    1052:	075a      	lsls	r2, r3, #29
    1054:	d454      	bmi.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
		} else if (conn->llcp_conn_param.ack !=
    1056:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
    105a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    105e:	429a      	cmp	r2, r3
    1060:	d04e      	beq.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    1062:	2005      	movs	r0, #5
    1064:	f012 fd0e 	bl	13a84 <event_stop.constprop.48>
	conn_upd = _radio.conn_upd;
    1068:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
	if (conn_upd && (conn_upd != conn)) {
    106c:	b10b      	cbz	r3, 1072 <CONFIG_BT_RX_STACK_SIZE+0x72>
    106e:	429c      	cmp	r4, r3
    1070:	d146      	bne.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
	switch (conn->llcp_conn_param.state) {
    1072:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    1076:	f003 0307 	and.w	r3, r3, #7
    107a:	2b05      	cmp	r3, #5
    107c:	d8c1      	bhi.n	1002 <CONFIG_BT_RX_STACK_SIZE+0x2>
    107e:	e8df f013 	tbh	[pc, r3, lsl #1]
    1082:	0006      	.short	0x0006
    1084:	00fa0055 	.word	0x00fa0055
    1088:	003f003f 	.word	0x003f003f
    108c:	003f      	.short	0x003f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    108e:	4891      	ldr	r0, [pc, #580]	; (12d4 <CONFIG_BT_RX_STACK_SIZE+0x2d4>)
    1090:	f01d fab0 	bl	1e5f4 <mem_acquire>
	if (!node_tx) {
    1094:	4601      	mov	r1, r0
    1096:	b398      	cbz	r0, 1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1098:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    109c:	2204      	movs	r2, #4
    109e:	f362 0302 	bfi	r3, r2, #0, #3
    10a2:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    10a6:	7903      	ldrb	r3, [r0, #4]
    10a8:	f043 0303 	orr.w	r3, r3, #3
    10ac:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    10ae:	2318      	movs	r3, #24
    10b0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    10b2:	230f      	movs	r3, #15
    10b4:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval_min;
    10b6:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    10ba:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval_max;
    10bc:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    10c0:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    10c2:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
    10c6:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    10c8:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
    10cc:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
    10ce:	2300      	movs	r3, #0
    10d0:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    10d2:	74c3      	strb	r3, [r0, #19]
    10d4:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    10d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10da:	7543      	strb	r3, [r0, #21]
    10dc:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    10de:	75c3      	strb	r3, [r0, #23]
    10e0:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    10e2:	7643      	strb	r3, [r0, #25]
    10e4:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    10e6:	76c3      	strb	r3, [r0, #27]
    10e8:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    10ea:	7743      	strb	r3, [r0, #29]
    10ec:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    10ee:	f8a0 7011 	strh.w	r7, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    10f2:	4620      	mov	r0, r4
    10f4:	f01d fd1a 	bl	1eb2c <ctrl_tx_enqueue>
	conn->procedure_expire = conn->procedure_reload;
    10f8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	_radio.conn_upd = conn;
    10fa:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	conn->procedure_expire = conn->procedure_reload;
    10fe:	86a3      	strh	r3, [r4, #52]	; 0x34
	if (conn->llcp_ack != conn->llcp_req) {
    1100:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    1104:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    1108:	429a      	cmp	r2, r3
    110a:	f000 8123 	beq.w	1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    110e:	2005      	movs	r0, #5
    1110:	f012 fcb8 	bl	13a84 <event_stop.constprop.48>
		switch (conn->llcp_type) {
    1114:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    1118:	3b01      	subs	r3, #1
    111a:	2b03      	cmp	r3, #3
    111c:	f63f af71 	bhi.w	1002 <CONFIG_BT_RX_STACK_SIZE+0x2>
    1120:	e8df f013 	tbh	[pc, r3, lsl #1]
    1124:	02c000da 	.word	0x02c000da
    1128:	035c0303 	.word	0x035c0303
	if (conn->llcp_conn_param.status) {
    112c:	f894 90ab 	ldrb.w	r9, [r4, #171]	; 0xab
    1130:	f1b9 0f00 	cmp.w	r9, #0
    1134:	d01d      	beq.n	1172 <CONFIG_BT_RX_STACK_SIZE+0x172>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1136:	4867      	ldr	r0, [pc, #412]	; (12d4 <CONFIG_BT_RX_STACK_SIZE+0x2d4>)
    1138:	f01d fa5c 	bl	1e5f4 <mem_acquire>
		if (!node_tx) {
    113c:	4601      	mov	r1, r0
    113e:	2800      	cmp	r0, #0
    1140:	d0de      	beq.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1142:	7903      	ldrb	r3, [r0, #4]
    1144:	f043 0303 	orr.w	r3, r3, #3
    1148:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    114a:	2311      	movs	r3, #17
    114c:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    114e:	2303      	movs	r3, #3
    1150:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1152:	230f      	movs	r3, #15
    1154:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    1156:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
    115a:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    115c:	4620      	mov	r0, r4
    115e:	f01d fce5 	bl	1eb2c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1162:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    1166:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
		_radio.conn_upd = NULL;
    116a:	2300      	movs	r3, #0
    116c:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
		return;
    1170:	e7c6      	b.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
	if (!conn->role) {
    1172:	f994 301d 	ldrsb.w	r3, [r4, #29]
    1176:	2b00      	cmp	r3, #0
    1178:	db3a      	blt.n	11f0 <CONFIG_BT_RX_STACK_SIZE+0x1f0>
		if (conn->llcp_req != conn->llcp_ack) {
    117a:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
    117e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    1182:	428b      	cmp	r3, r1
    1184:	d1bc      	bne.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1186:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		conn->llcp.conn_upd.win_offset_us = 0U;
    118a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    118e:	2205      	movs	r2, #5
    1190:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    1194:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1198:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		conn->llcp.conn_upd.win_size = 1U;
    119c:	2301      	movs	r3, #1
    119e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
		if (conn->llcp_conn_param.preferred_periodicity) {
    11a2:	b312      	cbz	r2, 11ea <CONFIG_BT_RX_STACK_SIZE+0x1ea>
				((conn->llcp_conn_param.interval_min /
    11a4:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    11a8:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    11ac:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    11ae:	fb13 f302 	smulbb	r3, r3, r2
    11b2:	b29b      	uxth	r3, r3
    11b4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    11b8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    11bc:	6663      	str	r3, [r4, #100]	; 0x64
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    11be:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    11c2:	2202      	movs	r2, #2
    11c4:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    11c8:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
    11cc:	f082 0208 	eor.w	r2, r2, #8
    11d0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    11d4:	f362 0382 	bfi	r3, r2, #2, #1
    11d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_ack--;
    11dc:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    11de:	2301      	movs	r3, #1
    11e0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		conn->llcp_ack--;
    11e4:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
		return;
    11e8:	e78a      	b.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
				conn->llcp_conn_param.interval_max;
    11ea:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    11ee:	e7e1      	b.n	11b4 <CONFIG_BT_RX_STACK_SIZE+0x1b4>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    11f0:	4838      	ldr	r0, [pc, #224]	; (12d4 <CONFIG_BT_RX_STACK_SIZE+0x2d4>)
    11f2:	f01d f9ff 	bl	1e5f4 <mem_acquire>
	if (!node_tx) {
    11f6:	4601      	mov	r1, r0
    11f8:	2800      	cmp	r0, #0
    11fa:	d081      	beq.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    11fc:	7903      	ldrb	r3, [r0, #4]
    11fe:	f043 0303 	orr.w	r3, r3, #3
    1202:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    1204:	2318      	movs	r3, #24
    1206:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    1208:	2310      	movs	r3, #16
    120a:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval_min;
    120c:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    1210:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval_max;
    1212:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    1216:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    1218:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
    121c:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    121e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
    1222:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    1224:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
    1228:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    122a:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    122e:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    1232:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
    1236:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    123a:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
    123e:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    1242:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
    1246:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    124a:	f8b4 30be 	ldrh.w	r3, [r4, #190]	; 0xbe
    124e:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    1252:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
    1256:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    125a:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
    125e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    1262:	4620      	mov	r0, r4
    1264:	f01d fc62 	bl	1eb2c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1268:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    126c:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	_radio.conn_upd = NULL;
    1270:	f8c5 9180 	str.w	r9, [r5, #384]	; 0x180
    1274:	e744      	b.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
	if (conn->pause_tx) {
    1276:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
    127a:	071b      	lsls	r3, r3, #28
    127c:	f53f af40 	bmi.w	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
	node_rx = packet_rx_reserve_get(2);
    1280:	2002      	movs	r0, #2
    1282:	f011 ff05 	bl	13090 <packet_rx_reserve_get>
	if (!node_rx) {
    1286:	2800      	cmp	r0, #0
    1288:	f43f af3a 	beq.w	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    128c:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    1290:	2203      	movs	r2, #3
    1292:	f362 0302 	bfi	r3, r2, #0, #3
    1296:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	node_rx->hdr.handle = conn->handle;
    129a:	8c23      	ldrh	r3, [r4, #32]
    129c:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    129e:	2302      	movs	r3, #2
    12a0:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    12a2:	7a03      	ldrb	r3, [r0, #8]
    12a4:	4313      	orrs	r3, r2
    12a6:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    12a8:	2318      	movs	r3, #24
    12aa:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    12ac:	230f      	movs	r3, #15
    12ae:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval_min;
    12b0:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    12b4:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval_max;
    12b6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
    12ba:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    12bc:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
    12c0:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    12c2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
    12c6:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    12c8:	f012 fab8 	bl	1383c <packet_rx_enqueue>
    12cc:	e718      	b.n	1100 <CONFIG_BT_RX_STACK_SIZE+0x100>
    12ce:	bf00      	nop
    12d0:	20001230 	.word	0x20001230
    12d4:	20001384 	.word	0x20001384
	if (!conn_upd) {
    12d8:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
    12dc:	b90b      	cbnz	r3, 12e2 <CONFIG_BT_RX_STACK_SIZE+0x2e2>
		_radio.conn_upd = conn;
    12de:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    12e2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    12e6:	f013 0303 	ands.w	r3, r3, #3
    12ea:	d071      	beq.n	13d0 <CONFIG_BT_RX_STACK_SIZE+0x3d0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    12ec:	4836      	ldr	r0, [pc, #216]	; (13c8 <CONFIG_BT_RX_STACK_SIZE+0x3c8>)
    12ee:	f01d f981 	bl	1e5f4 <mem_acquire>
		if (!node_tx) {
    12f2:	4601      	mov	r1, r0
    12f4:	b370      	cbz	r0, 1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    12f6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    12fa:	7902      	ldrb	r2, [r0, #4]
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    12fc:	f36f 0301 	bfc	r3, #0, #2
    1300:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    1304:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1306:	443b      	add	r3, r7
    1308:	3306      	adds	r3, #6
    130a:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    130c:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp.conn_upd.instant =
    1310:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1314:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1316:	220c      	movs	r2, #12
    1318:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    131a:	2200      	movs	r2, #0
    131c:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    131e:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    1322:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    1324:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    1326:	f240 40e2 	movw	r0, #1250	; 0x4e2
    132a:	fbb2 f2f0 	udiv	r2, r2, r0
    132e:	f8a1 2009 	strh.w	r2, [r1, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1332:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    1336:	f8a1 200b 	strh.w	r2, [r1, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    133a:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    133e:	f8a1 200d 	strh.w	r2, [r1, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1342:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    1346:	f8a1 200f 	strh.w	r2, [r1, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    134a:	f8a1 3011 	strh.w	r3, [r1, #17]
			ctrl_tx_enqueue(conn, node_tx);
    134e:	4620      	mov	r0, r4
    1350:	f01d fbec 	bl	1eb2c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    1354:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    1358:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    135c:	429a      	cmp	r2, r3
    135e:	d01d      	beq.n	139c <CONFIG_BT_RX_STACK_SIZE+0x39c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    1360:	2005      	movs	r0, #5
    1362:	f012 fb8f 	bl	13a84 <event_stop.constprop.48>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    1366:	4818      	ldr	r0, [pc, #96]	; (13c8 <CONFIG_BT_RX_STACK_SIZE+0x3c8>)
    1368:	f01d f944 	bl	1e5f4 <mem_acquire>
		if (node_tx) {
    136c:	4601      	mov	r1, r0
    136e:	b1a8      	cbz	r0, 139c <CONFIG_BT_RX_STACK_SIZE+0x39c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    1370:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    1374:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1378:	7903      	ldrb	r3, [r0, #4]
    137a:	f043 0303 	orr.w	r3, r3, #3
    137e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1380:	2302      	movs	r3, #2
    1382:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1384:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    1386:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    138a:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    138c:	4620      	mov	r0, r4
    138e:	f01d fbcd 	bl	1eb2c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    1392:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    1394:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    1396:	bf98      	it	ls
    1398:	3301      	addls	r3, #1
    139a:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    139c:	4b0b      	ldr	r3, [pc, #44]	; (13cc <CONFIG_BT_RX_STACK_SIZE+0x3cc>)
    139e:	9403      	str	r4, [sp, #12]
    13a0:	9302      	str	r3, [sp, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
    13a2:	f894 3020 	ldrb.w	r3, [r4, #32]
    13a6:	3307      	adds	r3, #7
	event_common_prepare(ticks_at_expire, remainder,
    13a8:	b2db      	uxtb	r3, r3
    13aa:	9301      	str	r3, [sp, #4]
    13ac:	68a3      	ldr	r3, [r4, #8]
    13ae:	9300      	str	r3, [sp, #0]
    13b0:	4622      	mov	r2, r4
    13b2:	1d23      	adds	r3, r4, #4
    13b4:	4641      	mov	r1, r8
    13b6:	4630      	mov	r0, r6
	conn->event_counter = event_counter + 1;
    13b8:	3701      	adds	r7, #1
	event_common_prepare(ticks_at_expire, remainder,
    13ba:	f012 fb71 	bl	13aa0 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    13be:	8467      	strh	r7, [r4, #34]	; 0x22
	DEBUG_RADIO_PREPARE_S(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);

	DEBUG_RADIO_PREPARE_S(0);
}
    13c0:	b00f      	add	sp, #60	; 0x3c
    13c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13c6:	bf00      	nop
    13c8:	20001384 	.word	0x20001384
    13cc:	00014001 	.word	0x00014001
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    13d0:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
    13d4:	eba7 0209 	sub.w	r2, r7, r9
    13d8:	b292      	uxth	r2, r2
	} else if (instant_latency <= 0x7FFF) {
    13da:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    13dc:	920b      	str	r2, [sp, #44]	; 0x2c
	} else if (instant_latency <= 0x7FFF) {
    13de:	d4b9      	bmi.n	1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
		conn->llcp_ack = conn->llcp_req;
    13e0:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    13e4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    13e8:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
    13ec:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
    13f0:	428a      	cmp	r2, r1
    13f2:	d008      	beq.n	1406 <CONFIG_BT_RX_STACK_SIZE+0x406>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    13f4:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    13f8:	f002 0207 	and.w	r2, r2, #7
    13fc:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    13fe:	bf04      	itt	eq
    1400:	f884 10a9 	strbeq.w	r1, [r4, #169]	; 0xa9
			conn->procedure_expire = 0U;
    1404:	86a3      	strheq	r3, [r4, #52]	; 0x34
		if (_radio.conn_upd == conn) {
    1406:	f8d5 2180 	ldr.w	r2, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0U;
    140a:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    140c:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    140e:	bf08      	it	eq
    1410:	f8c5 3180 	streq.w	r3, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0U;
    1414:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    1416:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
		     conn->conn_interval) ||
    141a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
    141c:	429a      	cmp	r2, r3
    141e:	d114      	bne.n	144a <CONFIG_BT_RX_STACK_SIZE+0x44a>
		     conn->conn_interval) ||
    1420:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    1424:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1426:	4299      	cmp	r1, r3
    1428:	d10f      	bne.n	144a <CONFIG_BT_RX_STACK_SIZE+0x44a>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    142a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    142e:	435a      	muls	r2, r3
    1430:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    1434:	f242 7110 	movw	r1, #10000	; 0x2710
    1438:	fb01 2303 	mla	r3, r1, r3, r2
    143c:	3b01      	subs	r3, #1
    143e:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    1442:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    1444:	b29b      	uxth	r3, r3
    1446:	429a      	cmp	r2, r3
    1448:	d016      	beq.n	1478 <CONFIG_BT_RX_STACK_SIZE+0x478>
			node_rx = packet_rx_reserve_get(2);
    144a:	2002      	movs	r0, #2
    144c:	f011 fe20 	bl	13090 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    1450:	2800      	cmp	r0, #0
    1452:	f43f add6 	beq.w	1002 <CONFIG_BT_RX_STACK_SIZE+0x2>
			node_rx->hdr.handle = conn->handle;
    1456:	8c23      	ldrh	r3, [r4, #32]
    1458:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    145a:	230a      	movs	r3, #10
    145c:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status = 0x00;
    145e:	2300      	movs	r3, #0
    1460:	7203      	strb	r3, [r0, #8]
			radio_le_conn_update_cmplt->interval =
    1462:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    1466:	8143      	strh	r3, [r0, #10]
			radio_le_conn_update_cmplt->latency =
    1468:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    146c:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->timeout =
    146e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    1472:	81c3      	strh	r3, [r0, #14]
			packet_rx_enqueue();
    1474:	f012 f9e2 	bl	1383c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    1478:	e9d4 0b00 	ldrd	r0, fp, [r4]
    147c:	2800      	cmp	r0, #0
    147e:	da08      	bge.n	1492 <CONFIG_BT_RX_STACK_SIZE+0x492>
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    1480:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
			u32_t ticks_prepare_to_start =
    1484:	68a3      	ldr	r3, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    1486:	6020      	str	r0, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    1488:	1a36      	subs	r6, r6, r0
    148a:	459b      	cmp	fp, r3
    148c:	bf2c      	ite	cs
    148e:	445e      	addcs	r6, fp
    1490:	18f6      	addcc	r6, r6, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    1492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1494:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    1496:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    149a:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 1858 <CONFIG_BT_RX_STACK_SIZE+0x858>
		conn_interval_old = instant_latency * conn->conn_interval;
    149e:	fb13 f302 	smulbb	r3, r3, r2
    14a2:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    14a4:	fbb3 f1fa 	udiv	r1, r3, sl
    14a8:	b28a      	uxth	r2, r1
    14aa:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_new = latency *
    14ac:	fb1a f202 	smulbb	r2, sl, r2
    14b0:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    14b2:	4293      	cmp	r3, r2
    14b4:	f240 40e2 	movw	r0, #1250	; 0x4e2
    14b8:	f080 80da 	bcs.w	1670 <CONFIG_BT_RX_STACK_SIZE+0x670>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    14bc:	1ad3      	subs	r3, r2, r3
    14be:	4358      	muls	r0, r3
    14c0:	fb80 0108 	smull	r0, r1, r0, r8
    14c4:	a3da      	add	r3, pc, #872	; (adr r3, 1830 <CONFIG_BT_RX_STACK_SIZE+0x830>)
    14c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14ca:	f7ff fbb7 	bl	c3c <__aeabi_uldivmod>
    14ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14d2:	4406      	add	r6, r0
		conn->latency_prepare -= (instant_latency - latency);
    14d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    14d6:	eba9 0707 	sub.w	r7, r9, r7
    14da:	441f      	add	r7, r3
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    14dc:	6823      	ldr	r3, [r4, #0]
		conn->latency_prepare -= (instant_latency - latency);
    14de:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    14e2:	459b      	cmp	fp, r3
    14e4:	bf38      	it	cc
    14e6:	469b      	movcc	fp, r3
		if (conn->role) {
    14e8:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    14ec:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
		conn->latency_prepare -= (instant_latency - latency);
    14f0:	444f      	add	r7, r9
		if (conn->role) {
    14f2:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    14f4:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->latency_prepare -= (instant_latency - latency);
    14f8:	8527      	strh	r7, [r4, #40]	; 0x28
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    14fa:	f8d4 b06c 	ldr.w	fp, [r4, #108]	; 0x6c
    14fe:	fb09 f70a 	mul.w	r7, r9, sl
		if (conn->role) {
    1502:	f280 80c2 	bge.w	168a <CONFIG_BT_RX_STACK_SIZE+0x68a>
			conn->slave.window_widening_prepare_us -=
    1506:	6c62      	ldr	r2, [r4, #68]	; 0x44
    1508:	990b      	ldr	r1, [sp, #44]	; 0x2c
				conn->slave.window_widening_periodic_us *
    150a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				conn->slave.window_widening_periodic_us *
    150c:	980c      	ldr	r0, [sp, #48]	; 0x30
			conn->slave.window_widening_prepare_us -=
    150e:	fb03 2311 	mls	r3, r3, r1, r2
				(((gc_lookup_ppm[_radio.sca] +
    1512:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
    1516:	49c8      	ldr	r1, [pc, #800]	; (1838 <CONFIG_BT_RX_STACK_SIZE+0x838>)
    1518:	f831 5012 	ldrh.w	r5, [r1, r2, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    151c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    1520:	f3c2 0282 	ubfx	r2, r2, #2, #3
    1524:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    1528:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    152c:	4415      	add	r5, r2
				   gc_lookup_ppm[conn->slave.sca]) *
    152e:	437d      	muls	r5, r7
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    1530:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    1534:	4ac1      	ldr	r2, [pc, #772]	; (183c <CONFIG_BT_RX_STACK_SIZE+0x83c>)
				conn->llcp.conn_upd.win_size * 1250;
    1536:	fb09 f101 	mul.w	r1, r9, r1
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    153a:	f205 253f 	addw	r5, r5, #575	; 0x23f
    153e:	fbb5 f5f2 	udiv	r5, r5, r2
				(conn_interval_us >> 1) - RADIO_TIFS;
    1542:	087a      	lsrs	r2, r7, #1
				conn->slave.window_widening_periodic_us *
    1544:	4368      	muls	r0, r5
				(conn_interval_us >> 1) - RADIO_TIFS;
    1546:	3a96      	subs	r2, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    1548:	4403      	add	r3, r0
			conn->slave.window_size_prepare_us =
    154a:	64e1      	str	r1, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0U;
    154c:	2100      	movs	r1, #0
			conn->slave.window_widening_periodic_us =
    154e:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    1550:	6422      	str	r2, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0U;
    1552:	65a1      	str	r1, [r4, #88]	; 0x58
			conn->slave.window_widening_prepare_us +=
    1554:	4293      	cmp	r3, r2
    1556:	bf94      	ite	ls
    1558:	6463      	strls	r3, [r4, #68]	; 0x44
    155a:	6462      	strhi	r2, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    155c:	fba0 0108 	umull	r0, r1, r0, r8
    1560:	a3b3      	add	r3, pc, #716	; (adr r3, 1830 <CONFIG_BT_RX_STACK_SIZE+0x830>)
    1562:	e9d3 2300 	ldrd	r2, r3, [r3]
    1566:	f7ff fb69 	bl	c3c <__aeabi_uldivmod>
    156a:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    156c:	fbbb f0f9 	udiv	r0, fp, r9
    1570:	fb09 f000 	mul.w	r0, r9, r0
    1574:	a3ae      	add	r3, pc, #696	; (adr r3, 1830 <CONFIG_BT_RX_STACK_SIZE+0x830>)
    1576:	e9d3 2300 	ldrd	r2, r3, [r3]
    157a:	fba0 0108 	umull	r0, r1, r0, r8
    157e:	f7ff fb5d 	bl	c3c <__aeabi_uldivmod>
    1582:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    1586:	930b      	str	r3, [sp, #44]	; 0x2c
			periodic_us -= conn->slave.window_widening_periodic_us;
    1588:	1b7d      	subs	r5, r7, r5
		conn->latency = conn->llcp.conn_upd.latency;
    158a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    158e:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    1590:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    1594:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    1598:	f242 7210 	movw	r2, #10000	; 0x2710
    159c:	fb02 7303 	mla	r3, r2, r3, r7
    15a0:	3b01      	subs	r3, #1
    15a2:	fbb3 f3f7 	udiv	r3, r3, r7
    15a6:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    15a8:	4ba5      	ldr	r3, [pc, #660]	; (1840 <CONFIG_BT_RX_STACK_SIZE+0x840>)
    15aa:	443b      	add	r3, r7
    15ac:	fbb3 f7f7 	udiv	r7, r3, r7
		if (!conn->llcp.conn_upd.is_internal) {
    15b0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    15b4:	8667      	strh	r7, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    15b6:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0U;
    15ba:	bf08      	it	eq
    15bc:	8623      	strheq	r3, [r4, #48]	; 0x30
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
    15be:	2101      	movs	r1, #1
    15c0:	2000      	movs	r0, #0
    15c2:	f01d fcf3 	bl	1efac <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    15c6:	2200      	movs	r2, #0
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
    15c8:	900c      	str	r0, [sp, #48]	; 0x30
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    15ca:	2101      	movs	r1, #1
    15cc:	4610      	mov	r0, r2
    15ce:	f00f ffb7 	bl	11540 <mayfly_enable>
		ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;
    15d2:	f894 7020 	ldrb.w	r7, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    15d6:	4b9b      	ldr	r3, [pc, #620]	; (1844 <CONFIG_BT_RX_STACK_SIZE+0x844>)
		ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;
    15d8:	3707      	adds	r7, #7
    15da:	b2ff      	uxtb	r7, r7
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    15dc:	2100      	movs	r1, #0
				    (void *)(u32_t)ticker_id);
    15de:	9700      	str	r7, [sp, #0]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    15e0:	463a      	mov	r2, r7
    15e2:	4608      	mov	r0, r1
    15e4:	f010 fd6e 	bl	120c4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    15e8:	f030 0a02 	bics.w	sl, r0, #2
    15ec:	f47f ad09 	bne.w	1002 <CONFIG_BT_RX_STACK_SIZE+0x2>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    15f0:	fba5 8908 	umull	r8, r9, r5, r8
    15f4:	a38e      	add	r3, pc, #568	; (adr r3, 1830 <CONFIG_BT_RX_STACK_SIZE+0x830>)
    15f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    15fa:	4640      	mov	r0, r8
    15fc:	4649      	mov	r1, r9
    15fe:	f7ff fb1d 	bl	c3c <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1602:	f641 4352 	movw	r3, #7250	; 0x1c52
    1606:	9308      	str	r3, [sp, #32]
    1608:	4b8f      	ldr	r3, [pc, #572]	; (1848 <CONFIG_BT_RX_STACK_SIZE+0x848>)
    160a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    160c:	e9cd 4306 	strd	r4, r3, [sp, #24]
    1610:	4b8e      	ldr	r3, [pc, #568]	; (184c <CONFIG_BT_RX_STACK_SIZE+0x84c>)
    1612:	9305      	str	r3, [sp, #20]
    1614:	68e3      	ldr	r3, [r4, #12]
    1616:	441a      	add	r2, r3
				     HAL_TICKER_REMAINDER(periodic_us),
    1618:	4b8d      	ldr	r3, [pc, #564]	; (1850 <CONFIG_BT_RX_STACK_SIZE+0x850>)
    161a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    161e:	fba4 bc03 	umull	fp, ip, r4, r3
    1622:	2307      	movs	r3, #7
    1624:	fb03 cc04 	mla	ip, r3, r4, ip
    1628:	ebb8 000b 	subs.w	r0, r8, fp
    162c:	eb69 010c 	sbc.w	r1, r9, ip
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1630:	e9cd a203 	strd	sl, r2, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1634:	2300      	movs	r3, #0
    1636:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    163a:	f7ff faff 	bl	c3c <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    163e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1640:	9300      	str	r3, [sp, #0]
    1642:	e9cd 4001 	strd	r4, r0, [sp, #4]
    1646:	4633      	mov	r3, r6
    1648:	463a      	mov	r2, r7
    164a:	4651      	mov	r1, sl
    164c:	4650      	mov	r0, sl
    164e:	f010 fca7 	bl	11fa0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1652:	f030 0002 	bics.w	r0, r0, #2
    1656:	f47f acd4 	bne.w	1002 <CONFIG_BT_RX_STACK_SIZE+0x2>
		if (mayfly_was_enabled) {
    165a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    165c:	2b00      	cmp	r3, #0
    165e:	f43f aeaf 	beq.w	13c0 <CONFIG_BT_RX_STACK_SIZE+0x3c0>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    1662:	2201      	movs	r2, #1
    1664:	4611      	mov	r1, r2
}
    1666:	b00f      	add	sp, #60	; 0x3c
    1668:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    166c:	f00f bf68 	b.w	11540 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1670:	fb0a 3111 	mls	r1, sl, r1, r3
    1674:	b289      	uxth	r1, r1
    1676:	4348      	muls	r0, r1
    1678:	a36d      	add	r3, pc, #436	; (adr r3, 1830 <CONFIG_BT_RX_STACK_SIZE+0x830>)
    167a:	e9d3 2300 	ldrd	r2, r3, [r3]
    167e:	fb80 0108 	smull	r0, r1, r0, r8
    1682:	f7ff fadb 	bl	c3c <__aeabi_uldivmod>
    1686:	1a36      	subs	r6, r6, r0
    1688:	e724      	b.n	14d4 <CONFIG_BT_RX_STACK_SIZE+0x4d4>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    168a:	a369      	add	r3, pc, #420	; (adr r3, 1830 <CONFIG_BT_RX_STACK_SIZE+0x830>)
    168c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1690:	fbab 0108 	umull	r0, r1, fp, r8
    1694:	f7ff fad2 	bl	c3c <__aeabi_uldivmod>
    1698:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    169c:	1c43      	adds	r3, r0, #1
    169e:	930b      	str	r3, [sp, #44]	; 0x2c
		periodic_us = conn_interval_us;
    16a0:	463d      	mov	r5, r7
    16a2:	e772      	b.n	158a <CONFIG_BT_RX_STACK_SIZE+0x58a>
	if (conn->llcp.chan_map.initiate) {
    16a4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    16a8:	b313      	cbz	r3, 16f0 <CONFIG_BT_RX_STACK_SIZE+0x6f0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    16aa:	486a      	ldr	r0, [pc, #424]	; (1854 <CONFIG_BT_RX_STACK_SIZE+0x854>)
    16ac:	f01c ffa2 	bl	1e5f4 <mem_acquire>
		if (node_tx) {
    16b0:	4605      	mov	r5, r0
    16b2:	2800      	cmp	r0, #0
    16b4:	f43f ae4e 	beq.w	1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
			conn->llcp.chan_map.initiate = 0U;
    16b8:	2300      	movs	r3, #0
    16ba:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    16be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    16c0:	443b      	add	r3, r7
    16c2:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
    16c4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16c8:	7903      	ldrb	r3, [r0, #4]
    16ca:	f043 0303 	orr.w	r3, r3, #3
    16ce:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    16d0:	2308      	movs	r3, #8
    16d2:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    16d4:	2301      	movs	r3, #1
    16d6:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    16d8:	f104 0161 	add.w	r1, r4, #97	; 0x61
    16dc:	2205      	movs	r2, #5
    16de:	3008      	adds	r0, #8
    16e0:	f018 fce2 	bl	1a0a8 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    16e4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    16e8:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
    16ec:	4629      	mov	r1, r5
    16ee:	e62e      	b.n	134e <CONFIG_BT_RX_STACK_SIZE+0x34e>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    16f0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    16f4:	1afb      	subs	r3, r7, r3
    16f6:	0419      	lsls	r1, r3, #16
    16f8:	f53f ae2c 	bmi.w	1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
		conn->llcp_ack = conn->llcp_req;
    16fc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    1700:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    1704:	f104 0517 	add.w	r5, r4, #23
    1708:	2205      	movs	r2, #5
    170a:	f104 0161 	add.w	r1, r4, #97	; 0x61
    170e:	4628      	mov	r0, r5
    1710:	f018 fcca 	bl	1a0a8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    1714:	2105      	movs	r1, #5
    1716:	4628      	mov	r0, r5
    1718:	f01c ffd2 	bl	1e6c0 <util_ones_count_get>
		conn->data_chan_count =
    171c:	7f63      	ldrb	r3, [r4, #29]
    171e:	f360 0305 	bfi	r3, r0, #0, #6
    1722:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1U;
    1724:	2301      	movs	r3, #1
    1726:	7723      	strb	r3, [r4, #28]
    1728:	e614      	b.n	1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
	if (conn->common.fex_valid) {
    172a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    172e:	f011 0920 	ands.w	r9, r1, #32
    1732:	d024      	beq.n	177e <CONFIG_BT_RX_STACK_SIZE+0x77e>
		conn->llcp_ack = conn->llcp_req;
    1734:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    1738:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    173c:	2002      	movs	r0, #2
    173e:	f011 fca7 	bl	13090 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    1742:	4605      	mov	r5, r0
    1744:	2800      	cmp	r0, #0
    1746:	f43f ac5c 	beq.w	1002 <CONFIG_BT_RX_STACK_SIZE+0x2>
		node_rx->hdr.handle = conn->handle;
    174a:	8c23      	ldrh	r3, [r4, #32]
    174c:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    174e:	2302      	movs	r3, #2
    1750:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1752:	7a03      	ldrb	r3, [r0, #8]
    1754:	f043 0303 	orr.w	r3, r3, #3
    1758:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
    175a:	2309      	movs	r3, #9
    175c:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    175e:	72c3      	strb	r3, [r0, #11]
		(void)memset(&pdu_ctrl_rx->llctrl.feature_rsp.features[0], 0x00,
    1760:	2208      	movs	r2, #8
    1762:	2100      	movs	r1, #0
    1764:	300c      	adds	r0, #12
    1766:	f018 fcc9 	bl	1a0fc <memset>
			conn->llcp_features & 0xFF;
    176a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_rx->llctrl.feature_req.features[0] =
    176e:	732b      	strb	r3, [r5, #12]
			(conn->llcp_features >> 8) & 0xFF;
    1770:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    1772:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_rx->llctrl.feature_req.features[1] =
    1774:	736a      	strb	r2, [r5, #13]
		pdu_ctrl_rx->llctrl.feature_req.features[2] =
    1776:	73ab      	strb	r3, [r5, #14]
		packet_rx_enqueue();
    1778:	f012 f860 	bl	1383c <packet_rx_enqueue>
    177c:	e5ea      	b.n	1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    177e:	4835      	ldr	r0, [pc, #212]	; (1854 <CONFIG_BT_RX_STACK_SIZE+0x854>)
    1780:	f01c ff38 	bl	1e5f4 <mem_acquire>
	if (node_tx) {
    1784:	4605      	mov	r5, r0
    1786:	2800      	cmp	r0, #0
    1788:	f43f ade4 	beq.w	1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
		conn->llcp_ack = conn->llcp_req;
    178c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    1790:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = LL_FEAT;
    1794:	f44f 73c7 	mov.w	r3, #398	; 0x18e
    1798:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    179c:	7903      	ldrb	r3, [r0, #4]
    179e:	f043 0303 	orr.w	r3, r3, #3
    17a2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    17a4:	2309      	movs	r3, #9
    17a6:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    17a8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    17ac:	2b00      	cmp	r3, #0
    17ae:	bfac      	ite	ge
    17b0:	2308      	movge	r3, #8
    17b2:	230e      	movlt	r3, #14
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
    17b4:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    17b6:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu_ctrl_tx->llctrl.feature_req.features[0],
    17b8:	4649      	mov	r1, r9
    17ba:	4410      	add	r0, r2
    17bc:	f018 fc9e 	bl	1a0fc <memset>
			conn->llcp_features & 0xFF;
    17c0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    17c4:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    17c6:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    17c8:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    17ca:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    17cc:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    17ce:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    17d0:	4620      	mov	r0, r4
    17d2:	f01d f9ab 	bl	1eb2c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    17d6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    17d8:	86a3      	strh	r3, [r4, #52]	; 0x34
    17da:	e5bb      	b.n	1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
	if (conn->llcp_version.tx == 0) {
    17dc:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    17e0:	07da      	lsls	r2, r3, #31
    17e2:	d43b      	bmi.n	185c <CONFIG_BT_RX_STACK_SIZE+0x85c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    17e4:	481b      	ldr	r0, [pc, #108]	; (1854 <CONFIG_BT_RX_STACK_SIZE+0x854>)
    17e6:	f01c ff05 	bl	1e5f4 <mem_acquire>
		if (node_tx) {
    17ea:	4601      	mov	r1, r0
    17ec:	2800      	cmp	r0, #0
    17ee:	f43f adb1 	beq.w	1354 <CONFIG_BT_RX_STACK_SIZE+0x354>
			conn->llcp_ack = conn->llcp_req;
    17f2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    17f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1U;
    17fa:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    17fe:	f043 0301 	orr.w	r3, r3, #1
    1802:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1806:	7903      	ldrb	r3, [r0, #4]
    1808:	f043 0303 	orr.w	r3, r3, #3
    180c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    180e:	2306      	movs	r3, #6
    1810:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1812:	230c      	movs	r3, #12
    1814:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    1816:	2309      	movs	r3, #9
    1818:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    181a:	f06f 030e 	mvn.w	r3, #14
    181e:	7243      	strb	r3, [r0, #9]
    1820:	2305      	movs	r3, #5
    1822:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    1824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1828:	72c3      	strb	r3, [r0, #11]
    182a:	7303      	strb	r3, [r0, #12]
    182c:	e7d0      	b.n	17d0 <CONFIG_BT_RX_STACK_SIZE+0x7d0>
    182e:	bf00      	nop
    1830:	1afd498d 	.word	0x1afd498d
    1834:	00000007 	.word	0x00000007
    1838:	00020bdc 	.word	0x00020bdc
    183c:	000f4240 	.word	0x000f4240
    1840:	026259ff 	.word	0x026259ff
    1844:	000131c5 	.word	0x000131c5
    1848:	000131b1 	.word	0x000131b1
    184c:	00000ff1 	.word	0x00000ff1
    1850:	1afd498d 	.word	0x1afd498d
    1854:	20001384 	.word	0x20001384
    1858:	3b9aca00 	.word	0x3b9aca00
	} else if (conn->llcp_version.rx != 0) {
    185c:	079b      	lsls	r3, r3, #30
    185e:	f57f abd0 	bpl.w	1002 <CONFIG_BT_RX_STACK_SIZE+0x2>
		conn->llcp_ack = conn->llcp_req;
    1862:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    1866:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    186a:	2002      	movs	r0, #2
    186c:	f011 fc10 	bl	13090 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    1870:	2800      	cmp	r0, #0
    1872:	f43f abc6 	beq.w	1002 <CONFIG_BT_RX_STACK_SIZE+0x2>
		node_rx->hdr.handle = conn->handle;
    1876:	8c23      	ldrh	r3, [r4, #32]
    1878:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    187a:	2302      	movs	r3, #2
    187c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    187e:	7a03      	ldrb	r3, [r0, #8]
    1880:	f043 0303 	orr.w	r3, r3, #3
    1884:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    1886:	2306      	movs	r3, #6
    1888:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    188a:	230c      	movs	r3, #12
    188c:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    188e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    1892:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    1894:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    1898:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    189c:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    18a0:	f8a0 300f 	strh.w	r3, [r0, #15]
    18a4:	e768      	b.n	1778 <CONFIG_BT_RX_STACK_SIZE+0x778>
    18a6:	bf00      	nop

000018a8 <isr>:
{
    18a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18ac:	b091      	sub	sp, #68	; 0x44
	trx_done = radio_is_done();
    18ae:	f013 fce5 	bl	1527c <radio_is_done>
    18b2:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    18b4:	b336      	cbz	r6, 1904 <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    18b6:	f013 fd01 	bl	152bc <radio_crc_is_valid>
    18ba:	b2c3      	uxtb	r3, r0
    18bc:	930a      	str	r3, [sp, #40]	; 0x28
		devmatch_ok = radio_filter_has_match();
    18be:	f013 fd83 	bl	153c8 <radio_filter_has_match>
    18c2:	b2c5      	uxtb	r5, r0
		devmatch_id = radio_filter_match_get();
    18c4:	f013 fd8a 	bl	153dc <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    18c8:	f013 ff0e 	bl	156e8 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    18cc:	f013 fefa 	bl	156c4 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    18d0:	f013 fd42 	bl	15358 <radio_rssi_is_ready>
    18d4:	fa5f f880 	uxtb.w	r8, r0
	switch (_radio.state) {
    18d8:	4c70      	ldr	r4, [pc, #448]	; (1a9c <isr+0x1f4>)
	radio_status_reset();
    18da:	f013 fcb9 	bl	15250 <radio_status_reset>
	radio_tmr_status_reset();
    18de:	f013 fd83 	bl	153e8 <radio_tmr_status_reset>
	radio_filter_status_reset();
    18e2:	f013 fd69 	bl	153b8 <radio_filter_status_reset>
	radio_ar_status_reset();
    18e6:	f013 fef3 	bl	156d0 <radio_ar_status_reset>
	radio_rssi_status_reset();
    18ea:	f013 fd2d 	bl	15348 <radio_rssi_status_reset>
	switch (_radio.state) {
    18ee:	7d67      	ldrb	r7, [r4, #21]
    18f0:	2f05      	cmp	r7, #5
    18f2:	d82a      	bhi.n	194a <isr+0xa2>
    18f4:	e8df f017 	tbh	[pc, r7, lsl #1]
    18f8:	0086005e 	.word	0x0086005e
    18fc:	09d1000a 	.word	0x09d1000a
    1900:	09d109d1 	.word	0x09d109d1
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
    1904:	46b0      	mov	r8, r6
    1906:	4635      	mov	r5, r6
    1908:	960a      	str	r6, [sp, #40]	; 0x28
    190a:	e7e5      	b.n	18d8 <isr+0x30>
	_radio.state = STATE_RX;
    190c:	2301      	movs	r3, #1
    190e:	7563      	strb	r3, [r4, #21]
	hcto = radio_tmr_tifs_base_get() + RADIO_TIFS + 4 +
    1910:	f013 fe50 	bl	155b4 <radio_tmr_tifs_base_get>
    1914:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    1916:	2096      	movs	r0, #150	; 0x96
    1918:	f013 fd76 	bl	15408 <radio_tmr_tifs_set>
	switch (_radio.role) {
    191c:	7d23      	ldrb	r3, [r4, #20]
    191e:	3b01      	subs	r3, #1
    1920:	35cb      	adds	r5, #203	; 0xcb
    1922:	2b03      	cmp	r3, #3
    1924:	d811      	bhi.n	194a <isr+0xa2>
    1926:	e8df f003 	tbb	[pc, r3]
    192a:	2402      	.short	0x2402
    192c:	4848      	.short	0x4848
		radio_switch_complete_and_tx(0, 0, 0, 0);
    192e:	2300      	movs	r3, #0
    1930:	461a      	mov	r2, r3
    1932:	4619      	mov	r1, r3
    1934:	4618      	mov	r0, r3
    1936:	f013 fcdf 	bl	152f8 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    193a:	f013 fccd 	bl	152d8 <radio_pkt_scratch_get>
    193e:	f013 fc5d 	bl	151fc <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    1942:	f013 fc91 	bl	15268 <radio_is_ready>
    1946:	4604      	mov	r4, r0
    1948:	b128      	cbz	r0, 1956 <isr+0xae>
		LL_ASSERT(0);
    194a:	4040      	eors	r0, r0
    194c:	f380 8811 	msr	BASEPRI, r0
    1950:	f04f 0004 	mov.w	r0, #4
    1954:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    1956:	4601      	mov	r1, r0
    1958:	f01d fb15 	bl	1ef86 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    195c:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
    195e:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    1960:	4620      	mov	r0, r4
    1962:	f01d fb0c 	bl	1ef7e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    1966:	1a28      	subs	r0, r5, r0
    1968:	f013 fdde 	bl	15528 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    196c:	f013 fe14 	bl	15598 <radio_tmr_end_capture>
	if (dont_close) {
    1970:	e020      	b.n	19b4 <isr+0x10c>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    1972:	2300      	movs	r3, #0
    1974:	4619      	mov	r1, r3
    1976:	461a      	mov	r2, r3
    1978:	4618      	mov	r0, r3
    197a:	f013 fcbd 	bl	152f8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    197e:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    1982:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    1986:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
		radio_pkt_rx_set(_radio.packet_rx
    198a:	3008      	adds	r0, #8
    198c:	f013 fc36 	bl	151fc <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    1990:	f013 fc6a 	bl	15268 <radio_is_ready>
    1994:	4604      	mov	r4, r0
    1996:	2800      	cmp	r0, #0
    1998:	d1d7      	bne.n	194a <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    199a:	4601      	mov	r1, r0
    199c:	f01d faf3 	bl	1ef86 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    19a0:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
    19a2:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    19a4:	4620      	mov	r0, r4
    19a6:	f01d faea 	bl	1ef7e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    19aa:	1a28      	subs	r0, r5, r0
    19ac:	f013 fdbc 	bl	15528 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    19b0:	f013 fcba 	bl	15328 <radio_rssi_measure>
}
    19b4:	b011      	add	sp, #68	; 0x44
    19b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    19ba:	2300      	movs	r3, #0
    19bc:	461a      	mov	r2, r3
    19be:	4619      	mov	r1, r3
    19c0:	4618      	mov	r0, r3
    19c2:	f013 fc99 	bl	152f8 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    19c6:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    19ca:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
		rx_packet_set(_radio.conn_curr,	(void *)
    19ce:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    19d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    19d6:	3108      	adds	r1, #8
    19d8:	f01d f82c 	bl	1ea34 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    19dc:	f013 fc44 	bl	15268 <radio_is_ready>
    19e0:	4604      	mov	r4, r0
    19e2:	2800      	cmp	r0, #0
    19e4:	d1b1      	bne.n	194a <isr+0xa2>
		hcto += radio_rx_chain_delay_get(0, 0);
    19e6:	4601      	mov	r1, r0
    19e8:	f01d facd 	bl	1ef86 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    19ec:	4621      	mov	r1, r4
		hcto += addr_us_get(0);
    19ee:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    19f0:	4620      	mov	r0, r4
    19f2:	f01d fac4 	bl	1ef7e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    19f6:	1a28      	subs	r0, r5, r0
    19f8:	f013 fd96 	bl	15528 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    19fc:	2001      	movs	r0, #1
    19fe:	f011 fdf3 	bl	135e8 <packet_tx_enqueue>
		break;
    1a02:	e7d7      	b.n	19b4 <isr+0x10c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    1a04:	b926      	cbnz	r6, 1a10 <isr+0x168>
		_radio.state = STATE_CLOSE;
    1a06:	2303      	movs	r3, #3
    1a08:	7563      	strb	r3, [r4, #21]
		radio_disable();
    1a0a:	f013 fc0f 	bl	1522c <radio_disable>
		return;
    1a0e:	e7d1      	b.n	19b4 <isr+0x10c>
	switch (_radio.role) {
    1a10:	7d23      	ldrb	r3, [r4, #20]
    1a12:	b2db      	uxtb	r3, r3
    1a14:	2b02      	cmp	r3, #2
    1a16:	f000 81db 	beq.w	1dd0 <isr+0x528>
    1a1a:	2b03      	cmp	r3, #3
    1a1c:	f000 82a3 	beq.w	1f66 <isr+0x6be>
    1a20:	2b01      	cmp	r3, #1
    1a22:	d192      	bne.n	194a <isr+0xa2>
		if (crc_ok) {
    1a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a26:	2b00      	cmp	r3, #0
    1a28:	d0ed      	beq.n	1a06 <isr+0x15e>
	pdu_adv = (void *)radio_pkt_scratch_get();
    1a2a:	f013 fc55 	bl	152d8 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    1a2e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    1a32:	232a      	movs	r3, #42	; 0x2a
    1a34:	f04f 0a27 	mov.w	sl, #39	; 0x27
    1a38:	fb1a 3a02 	smlabb	sl, sl, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    1a3c:	7802      	ldrb	r2, [r0, #0]
    1a3e:	f002 030f 	and.w	r3, r2, #15
    1a42:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    1a44:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    1a46:	eb04 070a 	add.w	r7, r4, sl
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    1a4a:	d129      	bne.n	1aa0 <isr+0x1f8>
    1a4c:	7843      	ldrb	r3, [r0, #1]
    1a4e:	2b0c      	cmp	r3, #12
    1a50:	d1d9      	bne.n	1a06 <isr+0x15e>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    1a52:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		(devmatch_ok)) &&
    1a56:	0719      	lsls	r1, r3, #28
    1a58:	d501      	bpl.n	1a5e <isr+0x1b6>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    1a5a:	2d00      	cmp	r5, #0
    1a5c:	d0d3      	beq.n	1a06 <isr+0x15e>
	return (adv->tx_addr == sr->rx_addr) &&
    1a5e:	f814 300a 	ldrb.w	r3, [r4, sl]
    1a62:	f3c3 1380 	ubfx	r3, r3, #6, #1
    1a66:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    1a6a:	d1cc      	bne.n	1a06 <isr+0x15e>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    1a6c:	2206      	movs	r2, #6
    1a6e:	f106 0108 	add.w	r1, r6, #8
    1a72:	1cb8      	adds	r0, r7, #2
    1a74:	f018 fb08 	bl	1a088 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    1a78:	b990      	cbnz	r0, 1aa0 <isr+0x1f8>
		_radio.state = STATE_CLOSE;
    1a7a:	2303      	movs	r3, #3
    1a7c:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
    1a7e:	f013 fc45 	bl	1530c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    1a82:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    1a86:	2327      	movs	r3, #39	; 0x27
    1a88:	fb03 4000 	mla	r0, r3, r0, r4
    1a8c:	307a      	adds	r0, #122	; 0x7a
    1a8e:	f013 fbbb 	bl	15208 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    1a92:	f013 fbe9 	bl	15268 <radio_is_ready>
    1a96:	2800      	cmp	r0, #0
    1a98:	d08c      	beq.n	19b4 <isr+0x10c>
    1a9a:	e756      	b.n	194a <isr+0xa2>
    1a9c:	20001230 	.word	0x20001230
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    1aa0:	7833      	ldrb	r3, [r6, #0]
    1aa2:	f003 030f 	and.w	r3, r3, #15
    1aa6:	2b05      	cmp	r3, #5
    1aa8:	d1ad      	bne.n	1a06 <isr+0x15e>
    1aaa:	7873      	ldrb	r3, [r6, #1]
    1aac:	2b22      	cmp	r3, #34	; 0x22
    1aae:	d1aa      	bne.n	1a06 <isr+0x15e>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    1ab0:	f814 300a 	ldrb.w	r3, [r4, sl]
    1ab4:	f003 030f 	and.w	r3, r3, #15
    1ab8:	2b01      	cmp	r3, #1
    1aba:	f040 8179 	bne.w	1db0 <isr+0x508>
		       isr_adv_ci_adva_check(adv, ci) &&
    1abe:	4631      	mov	r1, r6
    1ac0:	4638      	mov	r0, r7
    1ac2:	f01c ff7a 	bl	1e9ba <isr_adv_ci_adva_check>
    1ac6:	b188      	cbz	r0, 1aec <isr+0x244>
	return (adv->rx_addr == ci->tx_addr) &&
    1ac8:	7833      	ldrb	r3, [r6, #0]
    1aca:	f814 200a 	ldrb.w	r2, [r4, sl]
    1ace:	f3c3 1380 	ubfx	r3, r3, #6, #1
    1ad2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    1ad6:	f040 8169 	bne.w	1dac <isr+0x504>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    1ada:	2206      	movs	r2, #6
    1adc:	1cb1      	adds	r1, r6, #2
    1ade:	f107 0008 	add.w	r0, r7, #8
    1ae2:	f018 fad1 	bl	1a088 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    1ae6:	fab0 f080 	clz	r0, r0
    1aea:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    1aec:	2800      	cmp	r0, #0
    1aee:	d08a      	beq.n	1a06 <isr+0x15e>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    1af0:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    1af4:	b12b      	cbz	r3, 1b02 <isr+0x25a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    1af6:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    1afa:	f894 2179 	ldrb.w	r2, [r4, #377]	; 0x179
    1afe:	429a      	cmp	r2, r3
    1b00:	d181      	bne.n	1a06 <isr+0x15e>
    1b02:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    1b06:	2b00      	cmp	r3, #0
    1b08:	f43f af7d 	beq.w	1a06 <isr+0x15e>
			node_rx = packet_rx_reserve_get(3);
    1b0c:	2003      	movs	r0, #3
    1b0e:	f011 fabf 	bl	13090 <packet_rx_reserve_get>
		if (!node_rx) {
    1b12:	4681      	mov	r9, r0
    1b14:	2800      	cmp	r0, #0
    1b16:	f43f af76 	beq.w	1a06 <isr+0x15e>
		_radio.state = STATE_STOP;
    1b1a:	f04f 0b04 	mov.w	fp, #4
    1b1e:	f884 b015 	strb.w	fp, [r4, #21]
		radio_disable();
    1b22:	f013 fb83 	bl	1522c <radio_disable>
		conn = _radio.advertiser.conn;
    1b26:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    1b2a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    1b2e:	2700      	movs	r7, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    1b30:	f44f 7296 	mov.w	r2, #300	; 0x12c
    1b34:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    1b36:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    1b3a:	f01c fd8c 	bl	1e656 <mem_index_get>
		memcpy(&conn->crc_init[0],
    1b3e:	f106 0112 	add.w	r1, r6, #18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    1b42:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    1b44:	2203      	movs	r2, #3
    1b46:	f105 0014 	add.w	r0, r5, #20
    1b4a:	f018 faad 	bl	1a0a8 <memcpy>
		memcpy(&conn->access_addr[0],
    1b4e:	f105 0310 	add.w	r3, r5, #16
    1b52:	4618      	mov	r0, r3
    1b54:	465a      	mov	r2, fp
    1b56:	f106 010e 	add.w	r1, r6, #14
		memcpy(&conn->data_chan_map[0],
    1b5a:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    1b5e:	930a      	str	r3, [sp, #40]	; 0x28
    1b60:	f018 faa2 	bl	1a0a8 <memcpy>
		memcpy(&conn->data_chan_map[0],
    1b64:	2205      	movs	r2, #5
    1b66:	f106 011e 	add.w	r1, r6, #30
    1b6a:	4640      	mov	r0, r8
    1b6c:	f018 fa9c 	bl	1a0a8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    1b70:	2105      	movs	r1, #5
    1b72:	4640      	mov	r0, r8
    1b74:	f01c fda4 	bl	1e6c0 <util_ones_count_get>
		conn->data_chan_count =
    1b78:	7f6a      	ldrb	r2, [r5, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    1b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    1b7c:	f360 0205 	bfi	r2, r0, #0, #6
    1b80:	776a      	strb	r2, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    1b82:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    1b86:	f3c2 0204 	ubfx	r2, r2, #0, #5
    1b8a:	77aa      	strb	r2, [r5, #30]
			pdu_adv->connect_ind.interval;
    1b8c:	f8b6 8018 	ldrh.w	r8, [r6, #24]
		conn->conn_interval =
    1b90:	f8a5 8024 	strh.w	r8, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    1b94:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1b98:	fb02 f808 	mul.w	r8, r2, r8
		conn->latency = pdu_adv->connect_ind.latency;
    1b9c:	7ef1      	ldrb	r1, [r6, #27]
    1b9e:	7eb2      	ldrb	r2, [r6, #26]
    1ba0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1ba4:	84ea      	strh	r2, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    1ba6:	4619      	mov	r1, r3
    1ba8:	465a      	mov	r2, fp
    1baa:	f105 0054 	add.w	r0, r5, #84	; 0x54
    1bae:	f018 fa7b 	bl	1a0a8 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    1bb2:	8bb3      	ldrh	r3, [r6, #28]
    1bb4:	f242 7210 	movw	r2, #10000	; 0x2710
    1bb8:	fb02 8303 	mla	r3, r2, r3, r8
    1bbc:	3b01      	subs	r3, #1
    1bbe:	fbb3 f3f8 	udiv	r3, r3, r8
    1bc2:	85eb      	strh	r3, [r5, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    1bc4:	4bce      	ldr	r3, [pc, #824]	; (1f00 <isr+0x658>)
    1bc6:	4443      	add	r3, r8
    1bc8:	fbb3 f3f8 	udiv	r3, r3, r8
    1bcc:	866b      	strh	r3, [r5, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    1bce:	8c2b      	ldrh	r3, [r5, #32]
    1bd0:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    1bd4:	2308      	movs	r3, #8
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    1bd6:	4631      	mov	r1, r6
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    1bd8:	f889 3004 	strb.w	r3, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
    1bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
    1be0:	f8a9 3008 	strh.w	r3, [r9, #8]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    1be4:	f811 3b02 	ldrb.w	r3, [r1], #2
    1be8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    1bec:	f889 300a 	strb.w	r3, [r9, #10]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    1bf0:	2206      	movs	r2, #6
    1bf2:	f109 000b 	add.w	r0, r9, #11
    1bf6:	f018 fa57 	bl	1a0a8 <memcpy>
			pdu_adv->connect_ind.interval;
    1bfa:	7e72      	ldrb	r2, [r6, #25]
    1bfc:	7e33      	ldrb	r3, [r6, #24]
    1bfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->interval =
    1c02:	f8a9 3012 	strh.w	r3, [r9, #18]
			pdu_adv->connect_ind.latency;
    1c06:	7ef2      	ldrb	r2, [r6, #27]
    1c08:	7eb3      	ldrb	r3, [r6, #26]
    1c0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->latency =
    1c0e:	f8a9 3014 	strh.w	r3, [r9, #20]
			pdu_adv->connect_ind.timeout;
    1c12:	7f72      	ldrb	r2, [r6, #29]
    1c14:	7f33      	ldrb	r3, [r6, #28]
    1c16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		radio_le_conn_cmplt->timeout =
    1c1a:	f8a9 3016 	strh.w	r3, [r9, #22]
			pdu_adv->connect_ind.sca;
    1c1e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    1c22:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    1c26:	f889 3018 	strb.w	r3, [r9, #24]
		rx_fc_lock(conn->handle);
    1c2a:	8c28      	ldrh	r0, [r5, #32]
    1c2c:	f011 faa6 	bl	1317c <rx_fc_lock>
		packet_rx_enqueue();
    1c30:	f011 fe04 	bl	1383c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    1c34:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    1c38:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    1c3c:	49b1      	ldr	r1, [pc, #708]	; (1f04 <isr+0x65c>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    1c3e:	0952      	lsrs	r2, r2, #5
    1c40:	f362 0384 	bfi	r3, r2, #2, #3
    1c44:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    1c48:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    1c4c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    1c50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    1c54:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    1c56:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    1c5a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1c5e:	4aaa      	ldr	r2, [pc, #680]	; (1f08 <isr+0x660>)
    1c60:	f203 233f 	addw	r3, r3, #575	; 0x23f
    1c64:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    1c68:	63eb      	str	r3, [r5, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    1c6a:	ea4f 0358 	mov.w	r3, r8, lsr #1
    1c6e:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    1c70:	642b      	str	r3, [r5, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    1c72:	7d73      	ldrb	r3, [r6, #21]
    1c74:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1c78:	4353      	muls	r3, r2
		conn->slave.window_size_prepare_us = 0;
    1c7a:	e9c5 7313 	strd	r7, r3, [r5, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    1c7e:	4639      	mov	r1, r7
    1c80:	4638      	mov	r0, r7
    1c82:	f01d f97e 	bl	1ef82 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    1c86:	49a1      	ldr	r1, [pc, #644]	; (1f0c <isr+0x664>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    1c88:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    1c8a:	f200 4052 	addw	r0, r0, #1106	; 0x452
    1c8e:	a39a      	add	r3, pc, #616	; (adr r3, 1ef8 <isr+0x650>)
    1c90:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c94:	fba0 0101 	umull	r0, r1, r0, r1
    1c98:	f7fe ffd0 	bl	c3c <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    1c9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    1ca0:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    1ca2:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = MAX(conn->hdr.ticks_active_to_start,
    1ca4:	4293      	cmp	r3, r2
    1ca6:	bf38      	it	cc
    1ca8:	4613      	movcc	r3, r2
    1caa:	4699      	mov	r9, r3
		conn_interval_us -=
    1cac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		conn->hdr.ticks_xtal_to_start =
    1cae:	602a      	str	r2, [r5, #0]
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    1cb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn_interval_us -=
    1cb4:	eba8 0303 	sub.w	r3, r8, r3
		conn->hdr.ticks_slot =
    1cb8:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    1cba:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    1cbc:	930a      	str	r3, [sp, #40]	; 0x28
		conn_offset_us = radio_tmr_end_get();
    1cbe:	f013 fc73 	bl	155a8 <radio_tmr_end_get>
			((u64_t)pdu_adv->connect_ind.win_offset +
    1cc2:	8af6      	ldrh	r6, [r6, #22]
		conn_offset_us +=
    1cc4:	f240 42e2 	movw	r2, #1250	; 0x4e2
		conn_offset_us = radio_tmr_end_get();
    1cc8:	4680      	mov	r8, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    1cca:	4639      	mov	r1, r7
    1ccc:	4638      	mov	r0, r7
		conn_offset_us +=
    1cce:	fb02 2606 	mla	r6, r2, r6, r2
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    1cd2:	f01d f954 	bl	1ef7e <radio_tx_chain_delay_get>
    1cd6:	3e30      	subs	r6, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    1cd8:	f240 43ad 	movw	r3, #1197	; 0x4ad
    1cdc:	44b0      	add	r8, r6
    1cde:	eba8 0800 	sub.w	r8, r8, r0
    1ce2:	9300      	str	r3, [sp, #0]
    1ce4:	2205      	movs	r2, #5
    1ce6:	4b8a      	ldr	r3, [pc, #552]	; (1f10 <isr+0x668>)
    1ce8:	4639      	mov	r1, r7
    1cea:	4638      	mov	r0, r7
    1cec:	f010 f9ea 	bl	120c4 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    1cf0:	f240 41ae 	movw	r1, #1198	; 0x4ae
    1cf4:	f011 fa70 	bl	131d8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    1cf8:	f814 300a 	ldrb.w	r3, [r4, sl]
    1cfc:	f8df a20c 	ldr.w	sl, [pc, #524]	; 1f0c <isr+0x664>
    1d00:	f003 030f 	and.w	r3, r3, #15
    1d04:	2b01      	cmp	r3, #1
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    1d06:	eba8 080b 	sub.w	r8, r8, fp
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    1d0a:	d106      	bne.n	1d1a <isr+0x472>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    1d0c:	9700      	str	r7, [sp, #0]
    1d0e:	463b      	mov	r3, r7
    1d10:	2203      	movs	r2, #3
    1d12:	4639      	mov	r1, r7
    1d14:	4638      	mov	r0, r7
    1d16:	f010 f9d5 	bl	120c4 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d1c:	fba3 670a 	umull	r6, r7, r3, sl
    1d20:	4630      	mov	r0, r6
    1d22:	a375      	add	r3, pc, #468	; (adr r3, 1ef8 <isr+0x650>)
    1d24:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d28:	4639      	mov	r1, r7
    1d2a:	f7fe ff87 	bl	c3c <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1d2e:	68a3      	ldr	r3, [r4, #8]
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
    1d30:	f895 4020 	ldrb.w	r4, [r5, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1d34:	eba3 0309 	sub.w	r3, r3, r9
    1d38:	930a      	str	r3, [sp, #40]	; 0x28
    1d3a:	f240 43c5 	movw	r3, #1221	; 0x4c5
    1d3e:	9308      	str	r3, [sp, #32]
    1d40:	4b74      	ldr	r3, [pc, #464]	; (1f14 <isr+0x66c>)
    1d42:	e9cd 5306 	strd	r5, r3, [sp, #24]
    1d46:	4b74      	ldr	r3, [pc, #464]	; (1f18 <isr+0x670>)
    1d48:	9305      	str	r3, [sp, #20]
    1d4a:	68eb      	ldr	r3, [r5, #12]
    1d4c:	444b      	add	r3, r9
    1d4e:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    1d50:	4b72      	ldr	r3, [pc, #456]	; (1f1c <isr+0x674>)
    1d52:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1d56:	fba5 bc03 	umull	fp, ip, r5, r3
    1d5a:	2307      	movs	r3, #7
    1d5c:	fb03 cc05 	mla	ip, r3, r5, ip
    1d60:	ebb6 000b 	subs.w	r0, r6, fp
    1d64:	eb67 010c 	sbc.w	r1, r7, ip
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1d68:	f04f 0900 	mov.w	r9, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    1d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1d70:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1d72:	f8cd 900c 	str.w	r9, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    1d76:	f7fe ff61 	bl	c3c <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1d7a:	a35f      	add	r3, pc, #380	; (adr r3, 1ef8 <isr+0x650>)
    1d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1d80:	e9cd 5001 	strd	r5, r0, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1d84:	fba8 010a 	umull	r0, r1, r8, sl
    1d88:	f7fe ff58 	bl	c3c <__aeabi_uldivmod>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
    1d8c:	3407      	adds	r4, #7
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    1d8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d92:	b2e4      	uxtb	r4, r4
    1d94:	9000      	str	r0, [sp, #0]
    1d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d98:	4622      	mov	r2, r4
    1d9a:	4649      	mov	r1, r9
    1d9c:	4648      	mov	r0, r9
    1d9e:	f010 f8ff 	bl	11fa0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1da2:	f030 0302 	bics.w	r3, r0, #2
    1da6:	f47f add0 	bne.w	194a <isr+0xa2>
    1daa:	e603      	b.n	19b4 <isr+0x10c>
	return (adv->rx_addr == ci->tx_addr) &&
    1dac:	2000      	movs	r0, #0
    1dae:	e69d      	b.n	1aec <isr+0x244>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    1db0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    1db4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
		(devmatch_ok)) &&
    1db8:	079a      	lsls	r2, r3, #30
    1dba:	d500      	bpl.n	1dbe <isr+0x516>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    1dbc:	b135      	cbz	r5, 1dcc <isr+0x524>
	       isr_adv_ci_adva_check(adv, ci);
    1dbe:	4631      	mov	r1, r6
    1dc0:	4638      	mov	r0, r7
    1dc2:	f01c fdfa 	bl	1e9ba <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    1dc6:	f000 0001 	and.w	r0, r0, #1
    1dca:	e68f      	b.n	1aec <isr+0x244>
    1dcc:	4628      	mov	r0, r5
    1dce:	e7fa      	b.n	1dc6 <isr+0x51e>
		if (crc_ok &&
    1dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	f000 8082 	beq.w	1edc <isr+0x634>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    1dd8:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    1ddc:	079b      	lsls	r3, r3, #30
    1dde:	d501      	bpl.n	1de4 <isr+0x53c>
		if (crc_ok &&
    1de0:	2d00      	cmp	r5, #0
    1de2:	d07b      	beq.n	1edc <isr+0x634>
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    1de4:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    1de8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    1dec:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    1df0:	7a2a      	ldrb	r2, [r5, #8]
    1df2:	f012 030f 	ands.w	r3, r2, #15
    1df6:	d001      	beq.n	1dfc <isr+0x554>
    1df8:	2b06      	cmp	r3, #6
    1dfa:	d14f      	bne.n	1e9c <isr+0x5f4>
		 (_radio.scanner.type != 0) &&
    1dfc:	f894 10e1 	ldrb.w	r1, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    1e00:	07cf      	lsls	r7, r1, #31
    1e02:	d540      	bpl.n	1e86 <isr+0x5de>
		 (_radio.scanner.type != 0) &&
    1e04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    1e08:	2900      	cmp	r1, #0
    1e0a:	d13c      	bne.n	1e86 <isr+0x5de>
		err = isr_rx_scan_report(rssi_ready,
    1e0c:	4640      	mov	r0, r8
    1e0e:	f01c fe69 	bl	1eae4 <isr_rx_scan_report.isra.37>
		if (err) {
    1e12:	4607      	mov	r7, r0
    1e14:	2800      	cmp	r0, #0
    1e16:	d161      	bne.n	1edc <isr+0x634>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    1e18:	f013 fa5e 	bl	152d8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    1e1c:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    1e1e:	4940      	ldr	r1, [pc, #256]	; (1f20 <isr+0x678>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    1e20:	2203      	movs	r2, #3
    1e22:	f362 0303 	bfi	r3, r2, #0, #4
    1e26:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    1e28:	7a2a      	ldrb	r2, [r5, #8]
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	f3c2 1280 	ubfx	r2, r2, #6, #1
    1e30:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    1e34:	220c      	movs	r2, #12
    1e36:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    1e38:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    1e3c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    1e40:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    1e44:	4606      	mov	r6, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    1e46:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    1e48:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    1e4c:	f018 f92c 	bl	1a0a8 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    1e50:	2206      	movs	r2, #6
    1e52:	f105 010a 	add.w	r1, r5, #10
    1e56:	f106 0008 	add.w	r0, r6, #8
    1e5a:	f018 f925 	bl	1a0a8 <memcpy>
		_radio.scanner.state = 1;
    1e5e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    1e62:	f043 0302 	orr.w	r3, r3, #2
    1e66:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    1e6a:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    1e6c:	2302      	movs	r3, #2
    1e6e:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    1e70:	f013 faca 	bl	15408 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    1e74:	4638      	mov	r0, r7
    1e76:	f013 fa33 	bl	152e0 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    1e7a:	4630      	mov	r0, r6
    1e7c:	f013 f9c4 	bl	15208 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    1e80:	f013 fb8a 	bl	15598 <radio_tmr_end_capture>
    1e84:	e605      	b.n	1a92 <isr+0x1ea>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    1e86:	b94b      	cbnz	r3, 1e9c <isr+0x5f4>
	bool dir_report = false;
    1e88:	2100      	movs	r1, #0
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    1e8a:	7a6b      	ldrb	r3, [r5, #9]
    1e8c:	b333      	cbz	r3, 1edc <isr+0x634>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    1e8e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    1e92:	bb1b      	cbnz	r3, 1edc <isr+0x634>
		err = isr_rx_scan_report(rssi_ready,
    1e94:	4640      	mov	r0, r8
    1e96:	f01c fe25 	bl	1eae4 <isr_rx_scan_report.isra.37>
		if (err) {
    1e9a:	e01f      	b.n	1edc <isr+0x634>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    1e9c:	2b01      	cmp	r3, #1
    1e9e:	d041      	beq.n	1f24 <isr+0x67c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    1ea0:	7a2b      	ldrb	r3, [r5, #8]
					&dir_report))) ||
    1ea2:	f003 020b 	and.w	r2, r3, #11
    1ea6:	2a02      	cmp	r2, #2
    1ea8:	d0ee      	beq.n	1e88 <isr+0x5e0>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    1eaa:	f003 030f 	and.w	r3, r3, #15
    1eae:	2b04      	cmp	r3, #4
    1eb0:	d114      	bne.n	1edc <isr+0x634>
		   (_radio.scanner.state != 0) &&
    1eb2:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    1eb6:	0798      	lsls	r0, r3, #30
    1eb8:	d510      	bpl.n	1edc <isr+0x634>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    1eba:	f013 fa0d 	bl	152d8 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    1ebe:	7a2b      	ldrb	r3, [r5, #8]
    1ec0:	7802      	ldrb	r2, [r0, #0]
    1ec2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    1ec6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    1eca:	d107      	bne.n	1edc <isr+0x634>
		(memcmp(&sreq->scan_req.adv_addr[0],
    1ecc:	2206      	movs	r2, #6
    1ece:	f105 010a 	add.w	r1, r5, #10
    1ed2:	3008      	adds	r0, #8
    1ed4:	f018 f8d8 	bl	1a088 <memcmp>
		   (_radio.scanner.state != 0) &&
    1ed8:	2800      	cmp	r0, #0
    1eda:	d0d5      	beq.n	1e88 <isr+0x5e0>
			_radio.state = STATE_CLOSE;
    1edc:	2303      	movs	r3, #3
    1ede:	7563      	strb	r3, [r4, #21]
			radio_disable();
    1ee0:	f013 f9a4 	bl	1522c <radio_disable>
			_radio.scanner.state = 0U;
    1ee4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    1ee8:	f36f 0341 	bfc	r3, #1, #1
    1eec:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    1ef0:	e560      	b.n	19b4 <isr+0x10c>
    1ef2:	bf00      	nop
    1ef4:	f3af 8000 	nop.w
    1ef8:	1afd498d 	.word	0x1afd498d
    1efc:	00000007 	.word	0x00000007
    1f00:	026259ff 	.word	0x026259ff
    1f04:	00020bdc 	.word	0x00020bdc
    1f08:	000f4240 	.word	0x000f4240
    1f0c:	3b9aca00 	.word	0x3b9aca00
    1f10:	000131d9 	.word	0x000131d9
    1f14:	0001ea0f 	.word	0x0001ea0f
    1f18:	00000ff1 	.word	0x00000ff1
    1f1c:	1afd498d 	.word	0x1afd498d
    1f20:	20001312 	.word	0x20001312
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    1f24:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    1f28:	f3c3 1300 	ubfx	r3, r3, #4, #1
    1f2c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    1f30:	d010      	beq.n	1f54 <isr+0x6ac>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    1f32:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    1f36:	f3c3 0341 	ubfx	r3, r3, #1, #2
    1f3a:	079e      	lsls	r6, r3, #30
    1f3c:	d5b0      	bpl.n	1ea0 <isr+0x5f8>
    1f3e:	f995 3008 	ldrsb.w	r3, [r5, #8]
    1f42:	2b00      	cmp	r3, #0
    1f44:	daac      	bge.n	1ea0 <isr+0x5f8>
	    (pdu->rx_addr != 0) &&
    1f46:	7d6b      	ldrb	r3, [r5, #21]
    1f48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    1f4c:	2b40      	cmp	r3, #64	; 0x40
    1f4e:	d1a7      	bne.n	1ea0 <isr+0x5f8>
		return true;
    1f50:	2101      	movs	r1, #1
    1f52:	e79a      	b.n	1e8a <isr+0x5e2>
		(memcmp(&_radio.scanner.init_addr[0],
    1f54:	2206      	movs	r2, #6
    1f56:	f105 0110 	add.w	r1, r5, #16
    1f5a:	48c6      	ldr	r0, [pc, #792]	; (2274 <isr+0x9cc>)
    1f5c:	f018 f894 	bl	1a088 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    1f60:	2800      	cmp	r0, #0
    1f62:	d091      	beq.n	1e88 <isr+0x5e0>
    1f64:	e7e5      	b.n	1f32 <isr+0x68a>
	_radio.packet_counter++;
    1f66:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    1f6a:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
	if (crc_ok) {
    1f6e:	990a      	ldr	r1, [sp, #40]	; 0x28
	_radio.packet_counter++;
    1f70:	3301      	adds	r3, #1
    1f72:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    1f76:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    1f7a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f7e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    1f82:	2202      	movs	r2, #2
    1f84:	7132      	strb	r2, [r6, #4]
	if (crc_ok) {
    1f86:	2900      	cmp	r1, #0
    1f88:	f000 85a2 	beq.w	2ad0 <isr+0x1228>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    1f8c:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    1f90:	7a30      	ldrb	r0, [r6, #8]
    1f92:	f002 0101 	and.w	r1, r2, #1
    1f96:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1f9a:	4288      	cmp	r0, r1
    1f9c:	f000 80b1 	beq.w	2102 <isr+0x85a>
		_radio.conn_curr->sn++;
    1fa0:	f081 0101 	eor.w	r1, r1, #1
    1fa4:	f361 0200 	bfi	r2, r1, #0, #1
    1fa8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		if (_radio.role == ROLE_SLAVE) {
    1fac:	7d22      	ldrb	r2, [r4, #20]
    1fae:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1U;
    1fb0:	bf02      	ittt	eq
    1fb2:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    1fb6:	f042 0201 	orreq.w	r2, r2, #1
    1fba:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    1fbe:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    1fc2:	0611      	lsls	r1, r2, #24
    1fc4:	f100 8099 	bmi.w	20fa <isr+0x852>
			node_tx = _radio.conn_curr->pkt_tx_head;
    1fc8:	f8d3 8114 	ldr.w	r8, [r3, #276]	; 0x114
				_radio.conn_curr->packet_tx_head_offset);
    1fcc:	f893 0129 	ldrb.w	r0, [r3, #297]	; 0x129
			pdu_data_tx = (void *)(node_tx->pdu_data +
    1fd0:	f108 0c04 	add.w	ip, r8, #4
    1fd4:	eb0c 0900 	add.w	r9, ip, r0
			pdu_data_tx_len = pdu_data_tx->len;
    1fd8:	f899 5001 	ldrb.w	r5, [r9, #1]
			if (pdu_data_tx_len != 0) {
    1fdc:	2d00      	cmp	r5, #0
    1fde:	d13c      	bne.n	205a <isr+0x7b2>
	u32_t ret = 0U;
    1fe0:	f04f 0900 	mov.w	r9, #0
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    1fe4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    1fe8:	f892 3129 	ldrb.w	r3, [r2, #297]	; 0x129
			if (_radio.conn_curr->packet_tx_head_offset ==
    1fec:	f892 1128 	ldrb.w	r1, [r2, #296]	; 0x128
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    1ff0:	442b      	add	r3, r5
    1ff2:	b2db      	uxtb	r3, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    1ff4:	4299      	cmp	r1, r3
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    1ff6:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
			if (_radio.conn_curr->packet_tx_head_offset ==
    1ffa:	d059      	beq.n	20b0 <isr+0x808>
	return NULL;
    1ffc:	f04f 0800 	mov.w	r8, #0
	if (ret == ERR_TERMINATE) {
    2000:	f1b9 0f00 	cmp.w	r9, #0
    2004:	d07f      	beq.n	2106 <isr+0x85e>
		connection_release(_radio.conn_curr);
    2006:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    200a:	f011 fb3d 	bl	13688 <connection_release>
		_radio.conn_curr = NULL;
    200e:	2700      	movs	r7, #0
				_radio.conn_curr = NULL;
    2010:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    2014:	f013 fab4 	bl	15580 <radio_tmr_aa_restore>
    2018:	b918      	cbnz	r0, 2022 <isr+0x77a>
		radio_tmr_aa_save(radio_tmr_aa_get());
    201a:	f013 faa5 	bl	15568 <radio_tmr_aa_get>
    201e:	f013 faa9 	bl	15574 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    2022:	4c95      	ldr	r4, [pc, #596]	; (2278 <isr+0x9d0>)
    2024:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    2028:	2b00      	cmp	r3, #0
    202a:	f43f acc3 	beq.w	19b4 <isr+0x10c>
	if (tx_release) {
    202e:	f1b8 0f00 	cmp.w	r8, #0
    2032:	d003      	beq.n	203c <isr+0x794>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    2034:	4641      	mov	r1, r8
    2036:	8c18      	ldrh	r0, [r3, #32]
    2038:	f011 fab2 	bl	135a0 <pdu_node_tx_release>
	if (rx_enqueue) {
    203c:	2f00      	cmp	r7, #0
    203e:	f43f acb9 	beq.w	19b4 <isr+0x10c>
		rx_fc_lock(_radio.conn_curr->handle);
    2042:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    2046:	8c18      	ldrh	r0, [r3, #32]
    2048:	f011 f898 	bl	1317c <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    204c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    2050:	8c1b      	ldrh	r3, [r3, #32]
    2052:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    2054:	f011 fbf2 	bl	1383c <packet_rx_enqueue>
    2058:	e4ac      	b.n	19b4 <isr+0x10c>
				if (_radio.conn_curr->enc_tx) {
    205a:	0692      	lsls	r2, r2, #26
    205c:	d50a      	bpl.n	2074 <isr+0x7cc>
					_radio.conn_curr->ccm_tx.counter++;
    205e:	f8d3 2102 	ldr.w	r2, [r3, #258]	; 0x102
    2062:	f8d3 1106 	ldr.w	r1, [r3, #262]	; 0x106
    2066:	3201      	adds	r2, #1
    2068:	f141 0100 	adc.w	r1, r1, #0
    206c:	f8c3 2102 	str.w	r2, [r3, #258]	; 0x102
    2070:	f8c3 1106 	str.w	r1, [r3, #262]	; 0x106
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    2074:	f81c 3000 	ldrb.w	r3, [ip, r0]
    2078:	f003 0303 	and.w	r3, r3, #3
    207c:	2b03      	cmp	r3, #3
    207e:	d1af      	bne.n	1fe0 <isr+0x738>
	switch (pdu_data_tx->llctrl.opcode) {
    2080:	f899 2003 	ldrb.w	r2, [r9, #3]
    2084:	2a02      	cmp	r2, #2
    2086:	d1ab      	bne.n	1fe0 <isr+0x738>
		_radio.state = STATE_CLOSE;
    2088:	7563      	strb	r3, [r4, #21]
		radio_disable();
    208a:	f013 f8cf 	bl	1522c <radio_disable>
		LL_ASSERT(!radio_is_ready());
    208e:	f013 f8eb 	bl	15268 <radio_is_ready>
    2092:	2800      	cmp	r0, #0
    2094:	f47f ac59 	bne.w	194a <isr+0xa2>
		     (pdu_data_tx->llctrl.terminate_ind.error_code ==
    2098:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    209c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    20a0:	2913      	cmp	r1, #19
    20a2:	bf08      	it	eq
    20a4:	2116      	moveq	r1, #22
    20a6:	f011 fbf9 	bl	1389c <terminate_ind_rx_enqueue>
		ret = ERR_TERMINATE;
    20aa:	f04f 0901 	mov.w	r9, #1
    20ae:	e799      	b.n	1fe4 <isr+0x73c>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    20b0:	e9d2 1345 	ldrd	r1, r3, [r2, #276]	; 0x114
	conn->packet_tx_head_len = 0U;
    20b4:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    20b6:	4299      	cmp	r1, r3
	conn->packet_tx_head_len = 0U;
    20b8:	f8a2 0128 	strh.w	r0, [r2, #296]	; 0x128
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    20bc:	d112      	bne.n	20e4 <isr+0x83c>
		if (node_tx) {
    20be:	f1b8 0f00 	cmp.w	r8, #0
    20c2:	d09b      	beq.n	1ffc <isr+0x754>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    20c4:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    20c8:	680d      	ldr	r5, [r1, #0]
    20ca:	f8c2 5114 	str.w	r5, [r2, #276]	; 0x114
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    20ce:	4299      	cmp	r1, r3
				conn->pkt_tx_ctrl_last = NULL;
    20d0:	bf0c      	ite	eq
    20d2:	e9c2 0046 	strdeq	r0, r0, [r2, #280]	; 0x118
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    20d6:	f8c2 5118 	strne.w	r5, [r2, #280]	; 0x118
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    20da:	4968      	ldr	r1, [pc, #416]	; (227c <isr+0x9d4>)
    20dc:	4640      	mov	r0, r8
    20de:	f01c faa2 	bl	1e626 <mem_release>
    20e2:	e78b      	b.n	1ffc <isr+0x754>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    20e4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    20e8:	4299      	cmp	r1, r3
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    20ea:	bf04      	itt	eq
    20ec:	680b      	ldreq	r3, [r1, #0]
    20ee:	f8c2 3120 	streq.w	r3, [r2, #288]	; 0x120
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    20f2:	680b      	ldr	r3, [r1, #0]
    20f4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		return node_tx;
    20f8:	e782      	b.n	2000 <isr+0x758>
			_radio.conn_curr->empty = 0U;
    20fa:	f36f 12c7 	bfc	r2, #7, #1
    20fe:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	struct radio_pdu_node_tx *tx_release = NULL;
    2102:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    2106:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    210a:	7a32      	ldrb	r2, [r6, #8]
    210c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    2110:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    2114:	f3c3 0340 	ubfx	r3, r3, #1, #1
    2118:	429a      	cmp	r2, r3
    211a:	f040 81a2 	bne.w	2462 <isr+0xbba>
	    (packet_rx_reserve_get(3) != 0) &&
    211e:	2003      	movs	r0, #3
    2120:	f010 ffb6 	bl	13090 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    2124:	2800      	cmp	r0, #0
    2126:	f000 819c 	beq.w	2462 <isr+0xbba>
	    (packet_rx_reserve_get(3) != 0) &&
    212a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    212e:	b383      	cbz	r3, 2192 <isr+0x8ea>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    2130:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    2134:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
	    ((_radio.fc_ena == 0) ||
    2138:	4293      	cmp	r3, r2
    213a:	d105      	bne.n	2148 <isr+0x8a0>
	      (_radio.fc_req == _radio.fc_ack)) ||
    213c:	f894 2178 	ldrb.w	r2, [r4, #376]	; 0x178
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    2140:	f894 1179 	ldrb.w	r1, [r4, #377]	; 0x179
    2144:	4291      	cmp	r1, r2
    2146:	d024      	beq.n	2192 <isr+0x8ea>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    2148:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
	      (_radio.fc_req == _radio.fc_ack)) ||
    214c:	4293      	cmp	r3, r2
    214e:	f000 8188 	beq.w	2462 <isr+0xbba>
	      (_radio.fc_req != _radio.fc_ack) &&
    2152:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    2156:	f894 2179 	ldrb.w	r2, [r4, #377]	; 0x179
    215a:	429a      	cmp	r2, r3
    215c:	f000 8181 	beq.w	2462 <isr+0xbba>
		(((_radio.fc_req == 0) &&
    2160:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    2164:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	      (_radio.fc_req != _radio.fc_ack) &&
    2168:	b923      	cbnz	r3, 2174 <isr+0x8cc>
		(((_radio.fc_req == 0) &&
    216a:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
    216e:	8c13      	ldrh	r3, [r2, #32]
    2170:	4299      	cmp	r1, r3
    2172:	d00e      	beq.n	2192 <isr+0x8ea>
		 ((_radio.fc_req != 0) &&
    2174:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
		   _radio.conn_curr->handle)) ||
    2178:	2b00      	cmp	r3, #0
    217a:	f000 8172 	beq.w	2462 <isr+0xbba>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    217e:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    2182:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    2186:	f8b3 1170 	ldrh.w	r1, [r3, #368]	; 0x170
    218a:	8c13      	ldrh	r3, [r2, #32]
    218c:	4299      	cmp	r1, r3
    218e:	f040 8168 	bne.w	2462 <isr+0xbba>
		if (pdu_data_rx->len != 0) {
    2192:	f896 9009 	ldrb.w	r9, [r6, #9]
    2196:	f1b9 0f00 	cmp.w	r9, #0
    219a:	f000 8142 	beq.w	2422 <isr+0xb7a>
			if (_radio.conn_curr->enc_rx) {
    219e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    21a2:	f893 90d0 	ldrb.w	r9, [r3, #208]	; 0xd0
    21a6:	f019 0910 	ands.w	r9, r9, #16
    21aa:	d00b      	beq.n	21c4 <isr+0x91c>
				done = radio_ccm_is_done();
    21ac:	f013 fa62 	bl	15674 <radio_ccm_is_done>
				LL_ASSERT(done);
    21b0:	2800      	cmp	r0, #0
    21b2:	f43f abca 	beq.w	194a <isr+0xa2>
			if ((_radio.conn_curr->enc_rx &&
    21b6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    21ba:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    21be:	06dd      	lsls	r5, r3, #27
    21c0:	d440      	bmi.n	2244 <isr+0x99c>
				ccm_rx_increment = 1U;
    21c2:	46b9      	mov	r9, r7
			    (_radio.conn_curr->pause_rx &&
    21c4:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    21c8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    21cc:	930c      	str	r3, [sp, #48]	; 0x30
			     !radio_ccm_mic_is_valid()) ||
    21ce:	f013 0f04 	tst.w	r3, #4
    21d2:	7a33      	ldrb	r3, [r6, #8]
    21d4:	d010      	beq.n	21f8 <isr+0x950>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    21d6:	f003 0103 	and.w	r1, r3, #3
    21da:	2903      	cmp	r1, #3
    21dc:	d136      	bne.n	224c <isr+0x9a4>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    21de:	f995 c01d 	ldrsb.w	ip, [r5, #29]
    21e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	u8_t opcode = pdu_data->llctrl.opcode;
    21e4:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    21e6:	f1bc 0f00 	cmp.w	ip, #0
    21ea:	f002 0040 	and.w	r0, r2, #64	; 0x40
    21ee:	db5a      	blt.n	22a6 <isr+0x9fe>
	       (!conn->role &&
    21f0:	2800      	cmp	r0, #0
    21f2:	d145      	bne.n	2280 <isr+0x9d8>
		((!conn->refresh &&
    21f4:	2902      	cmp	r1, #2
    21f6:	d153      	bne.n	22a0 <isr+0x9f8>
			switch (pdu_data_rx->ll_id) {
    21f8:	f3c3 0301 	ubfx	r3, r3, #0, #2
    21fc:	b2d9      	uxtb	r1, r3
    21fe:	b25b      	sxtb	r3, r3
    2200:	2b00      	cmp	r3, #0
    2202:	f000 845f 	beq.w	2ac4 <isr+0x121c>
    2206:	2902      	cmp	r1, #2
    2208:	f240 80b6 	bls.w	2378 <isr+0xad0>
	switch (pdu_data_rx->llctrl.opcode) {
    220c:	f896 a00b 	ldrb.w	sl, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    2210:	f106 0b08 	add.w	fp, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    2214:	f1ba 0f11 	cmp.w	sl, #17
    2218:	f200 843f 	bhi.w	2a9a <isr+0x11f2>
    221c:	e8df f01a 	tbh	[pc, sl, lsl #1]
    2220:	00cd0051 	.word	0x00cd0051
    2224:	043d0105 	.word	0x043d0105
    2228:	043d043d 	.word	0x043d043d
    222c:	0406043d 	.word	0x0406043d
    2230:	012b010e 	.word	0x012b010e
    2234:	043d043d 	.word	0x043d043d
    2238:	043d0151 	.word	0x043d0151
    223c:	01b30123 	.word	0x01b30123
    2240:	03970314 	.word	0x03970314
			     !radio_ccm_mic_is_valid()) ||
    2244:	f013 fa34 	bl	156b0 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    2248:	2800      	cmp	r0, #0
    224a:	d1ba      	bne.n	21c2 <isr+0x91a>
				_radio.state = STATE_CLOSE;
    224c:	2303      	movs	r3, #3
    224e:	7563      	strb	r3, [r4, #21]
				radio_disable();
    2250:	f012 ffec 	bl	1522c <radio_disable>
				LL_ASSERT(!radio_is_ready());
    2254:	f013 f808 	bl	15268 <radio_is_ready>
    2258:	4607      	mov	r7, r0
    225a:	2800      	cmp	r0, #0
    225c:	f47f ab75 	bne.w	194a <isr+0xa2>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    2260:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2264:	213d      	movs	r1, #61	; 0x3d
    2266:	f011 fb19 	bl	1389c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    226a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    226e:	f011 fa0b 	bl	13688 <connection_release>
    2272:	e6cd      	b.n	2010 <isr+0x768>
    2274:	20001312 	.word	0x20001312
    2278:	20001230 	.word	0x20001230
    227c:	20001384 	.word	0x20001384
		 (conn->refresh &&
    2280:	1e88      	subs	r0, r1, #2
    2282:	b2c0      	uxtb	r0, r0
    2284:	2809      	cmp	r0, #9
    2286:	d80b      	bhi.n	22a0 <isr+0x9f8>
    2288:	f240 2c05 	movw	ip, #517	; 0x205
    228c:	fa2c f000 	lsr.w	r0, ip, r0
    2290:	07c0      	lsls	r0, r0, #31
    2292:	d4b1      	bmi.n	21f8 <isr+0x950>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    2294:	48c5      	ldr	r0, [pc, #788]	; (25ac <isr+0xd04>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    2296:	fa20 f101 	lsr.w	r1, r0, r1
    229a:	07ca      	lsls	r2, r1, #31
    229c:	d4ac      	bmi.n	21f8 <isr+0x950>
    229e:	e7d5      	b.n	224c <isr+0x9a4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    22a0:	2911      	cmp	r1, #17
    22a2:	d8d3      	bhi.n	224c <isr+0x9a4>
    22a4:	e7f6      	b.n	2294 <isr+0x9ec>
	       (conn->role &&
    22a6:	b938      	cbnz	r0, 22b8 <isr+0xa10>
		((!conn->refresh &&
    22a8:	2907      	cmp	r1, #7
    22aa:	d0a5      	beq.n	21f8 <isr+0x950>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    22ac:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    22ae:	d0a3      	beq.n	21f8 <isr+0x950>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    22b0:	2911      	cmp	r1, #17
    22b2:	d8cb      	bhi.n	224c <isr+0x9a4>
    22b4:	48be      	ldr	r0, [pc, #760]	; (25b0 <isr+0xd08>)
    22b6:	e7ee      	b.n	2296 <isr+0x9ee>
		 (conn->refresh &&
    22b8:	1e88      	subs	r0, r1, #2
    22ba:	2801      	cmp	r0, #1
    22bc:	d99c      	bls.n	21f8 <isr+0x950>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    22be:	290b      	cmp	r1, #11
    22c0:	e7f5      	b.n	22ae <isr+0xa06>
		if (!_radio.conn_curr->role ||
    22c2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    22c6:	2b00      	cmp	r3, #0
    22c8:	f280 83e7 	bge.w	2a9a <isr+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    22cc:	7a71      	ldrb	r1, [r6, #9]
    22ce:	2000      	movs	r0, #0
    22d0:	f010 feb8 	bl	13044 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    22d4:	2800      	cmp	r0, #0
    22d6:	f000 83e0 	beq.w	2a9a <isr+0x11f2>
	packet_rx_callback();
}

static u8_t conn_update(struct connection *conn, struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    22da:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    22de:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    22e0:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    22e2:	041f      	lsls	r7, r3, #16
    22e4:	d444      	bmi.n	2370 <isr+0xac8>
		return BT_HCI_ERR_INSTANT_PASSED;
	}

	/* different transaction collision */
	if (conn->llcp_req != conn->llcp_ack) {
    22e6:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    22ea:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
    22ee:	429a      	cmp	r2, r3
    22f0:	d161      	bne.n	23b6 <isr+0xb0e>
	}

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
    22f2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    22f6:	b90a      	cbnz	r2, 22fc <isr+0xa54>
		LL_ASSERT(conn->role);

		_radio.conn_upd = conn;
    22f8:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
	}

	conn->llcp.conn_upd.win_size =
    22fc:	7b32      	ldrb	r2, [r6, #12]
    22fe:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_size;
	conn->llcp.conn_upd.win_offset_us =
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    2302:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    2306:	f240 42e2 	movw	r2, #1250	; 0x4e2
    230a:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    230c:	66ea      	str	r2, [r5, #108]	; 0x6c
	conn->llcp.conn_upd.interval =
		pdu_data_rx->llctrl.conn_update_ind.interval;
    230e:	7c30      	ldrb	r0, [r6, #16]
    2310:	7bf2      	ldrb	r2, [r6, #15]
    2312:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    2316:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
	conn->llcp.conn_upd.latency =
		pdu_data_rx->llctrl.conn_update_ind.latency;
    231a:	7cb0      	ldrb	r0, [r6, #18]
    231c:	7c72      	ldrb	r2, [r6, #17]
    231e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    2322:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
	conn->llcp.conn_upd.timeout =
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    2326:	7cf2      	ldrb	r2, [r6, #19]
    2328:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    232a:	f8a5 1068 	strh.w	r1, [r5, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    232e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    2332:	f8a5 2066 	strh.w	r2, [r5, #102]	; 0x66
		pdu_data_rx->llctrl.conn_update_ind.instant;
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    2336:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
    233a:	f022 0207 	bic.w	r2, r2, #7
	conn->llcp.conn_upd.is_internal = 0U;

	conn->llcp_type = LLCP_CONN_UPD;
	conn->llcp_ack--;
    233e:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    2340:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
	conn->llcp_type = LLCP_CONN_UPD;
    2344:	2201      	movs	r2, #1
    2346:	f885 205e 	strb.w	r2, [r5, #94]	; 0x5e
	conn->llcp_ack--;
    234a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    234e:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
    2352:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    2356:	4293      	cmp	r3, r2
    2358:	d007      	beq.n	236a <isr+0xac2>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    235a:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    235e:	f003 0307 	and.w	r3, r3, #7
    2362:	2b04      	cmp	r3, #4
    2364:	d101      	bne.n	236a <isr+0xac2>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2366:	f885 20a9 	strb.w	r2, [r5, #169]	; 0xa9
			_radio.conn_curr->procedure_expire = 0U;
    236a:	2300      	movs	r3, #0
    236c:	86ab      	strh	r3, [r5, #52]	; 0x34
    236e:	e002      	b.n	2376 <isr+0xace>
		return BT_HCI_ERR_INSTANT_PASSED;
    2370:	2328      	movs	r3, #40	; 0x28
			_radio.conn_curr->llcp_terminate.reason_peer = err;
    2372:	f885 309b 	strb.w	r3, [r5, #155]	; 0x9b
	u8_t rx_enqueue = 0U;
    2376:	4657      	mov	r7, sl
			_radio.conn_curr->nesn++;
    2378:	4b8e      	ldr	r3, [pc, #568]	; (25b4 <isr+0xd0c>)
    237a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    237e:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    2382:	f082 0202 	eor.w	r2, r2, #2
    2386:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			if (ccm_rx_increment) {
    238a:	f1b9 0f00 	cmp.w	r9, #0
    238e:	d00a      	beq.n	23a6 <isr+0xafe>
				_radio.conn_curr->ccm_rx.counter++;
    2390:	f8d3 20e1 	ldr.w	r2, [r3, #225]	; 0xe1
    2394:	f8d3 10e5 	ldr.w	r1, [r3, #229]	; 0xe5
    2398:	3201      	adds	r2, #1
    239a:	f141 0100 	adc.w	r1, r1, #0
    239e:	f8c3 20e1 	str.w	r2, [r3, #225]	; 0xe1
    23a2:	f8c3 10e5 	str.w	r1, [r3, #229]	; 0xe5
		_radio.crc_expire = 0U;
    23a6:	4b83      	ldr	r3, [pc, #524]	; (25b4 <isr+0xd0c>)
    23a8:	2500      	movs	r5, #0
    23aa:	f883 5119 	strb.w	r5, [r3, #281]	; 0x119
		_radio.conn_curr->supervision_expire = 0U;
    23ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    23b2:	861d      	strh	r5, [r3, #48]	; 0x30
    23b4:	e3a0      	b.n	2af8 <isr+0x1250>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    23b6:	232a      	movs	r3, #42	; 0x2a
    23b8:	e7db      	b.n	2372 <isr+0xaca>
		if (!_radio.conn_curr->role ||
    23ba:	f995 301d 	ldrsb.w	r3, [r5, #29]
    23be:	2b00      	cmp	r3, #0
    23c0:	f280 836b 	bge.w	2a9a <isr+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    23c4:	7a71      	ldrb	r1, [r6, #9]
    23c6:	2001      	movs	r0, #1
    23c8:	f010 fe3c 	bl	13044 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    23cc:	2800      	cmp	r0, #0
    23ce:	f000 8364 	beq.w	2a9a <isr+0x11f2>
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED && CONFIG_BT_CTLR_SCHED_ADVANCED */

static u8_t chan_map_update(struct connection *conn,
			    struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    23d2:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    23d6:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    23d8:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    23da:	041c      	lsls	r4, r3, #16
    23dc:	d41e      	bmi.n	241c <isr+0xb74>
		return BT_HCI_ERR_INSTANT_PASSED;
	}

	/* different transaction collision */
	if (conn->llcp_req != conn->llcp_ack) {
    23de:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
    23e2:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    23e6:	429a      	cmp	r2, r3
    23e8:	d11d      	bne.n	2426 <isr+0xb7e>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
	}


	memcpy(&conn->llcp.chan_map.chm[0],
    23ea:	2205      	movs	r2, #5
    23ec:	f106 010c 	add.w	r1, r6, #12
    23f0:	f105 0061 	add.w	r0, r5, #97	; 0x61
    23f4:	f017 fe58 	bl	1a0a8 <memcpy>
	       &pdu_data_rx->llctrl.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->llctrl.chan_map_ind.instant;
    23f8:	7c73      	ldrb	r3, [r6, #17]
    23fa:	7cb2      	ldrb	r2, [r6, #18]
    23fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    2400:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->llcp.chan_map.initiate = 0U;

	conn->llcp_type = LLCP_CHAN_MAP;
    2404:	2302      	movs	r3, #2
    2406:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
	conn->llcp_ack--;
    240a:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0U;
    240e:	2700      	movs	r7, #0
	conn->llcp_ack--;
    2410:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0U;
    2412:	f885 7060 	strb.w	r7, [r5, #96]	; 0x60
	conn->llcp_ack--;
    2416:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		if (!nack) {
    241a:	e7ad      	b.n	2378 <isr+0xad0>
		return BT_HCI_ERR_INSTANT_PASSED;
    241c:	2328      	movs	r3, #40	; 0x28
		_radio.conn_curr->llcp_terminate.reason_peer =
    241e:	f885 309b 	strb.w	r3, [r5, #155]	; 0x9b
	u8_t rx_enqueue = 0U;
    2422:	2700      	movs	r7, #0
    2424:	e7a8      	b.n	2378 <isr+0xad0>
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    2426:	232a      	movs	r3, #42	; 0x2a
			_radio.conn_curr->llcp_terminate.reason_peer = err;
    2428:	e7f9      	b.n	241e <isr+0xb76>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    242a:	7a71      	ldrb	r1, [r6, #9]
    242c:	2002      	movs	r0, #2
    242e:	f010 fe09 	bl	13044 <pdu_len_cmp>
    2432:	2800      	cmp	r0, #0
    2434:	f000 8331 	beq.w	2a9a <isr+0x11f2>
		_radio.conn_curr->llcp_terminate.reason_peer =
    2438:	7b33      	ldrb	r3, [r6, #12]
    243a:	e7f0      	b.n	241e <isr+0xb76>
		if (!_radio.conn_curr->role ||
    243c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    2440:	2b00      	cmp	r3, #0
    2442:	f280 832a 	bge.w	2a9a <isr+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    2446:	7a71      	ldrb	r1, [r6, #9]
    2448:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    244a:	f010 fdfb 	bl	13044 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    244e:	2800      	cmp	r0, #0
    2450:	f000 8323 	beq.w	2a9a <isr+0x11f2>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    2454:	4659      	mov	r1, fp
    2456:	4628      	mov	r0, r5
    2458:	f011 fcfc 	bl	13e54 <feature_rsp_send>
				nack = reject_ext_ind_send(conn,
    245c:	4607      	mov	r7, r0
		if (!nack) {
    245e:	2800      	cmp	r0, #0
    2460:	d08a      	beq.n	2378 <isr+0xad0>
	u8_t rx_enqueue = 0U;
    2462:	2700      	movs	r7, #0
    2464:	e79f      	b.n	23a6 <isr+0xafe>
		if (_radio.conn_curr->role ||
    2466:	f995 301d 	ldrsb.w	r3, [r5, #29]
    246a:	2b00      	cmp	r3, #0
    246c:	f2c0 8315 	blt.w	2a9a <isr+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    2470:	7a71      	ldrb	r1, [r6, #9]
    2472:	200e      	movs	r0, #14
    2474:	e7e9      	b.n	244a <isr+0xba2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    2476:	7a71      	ldrb	r1, [r6, #9]
    2478:	2009      	movs	r0, #9
    247a:	f010 fde3 	bl	13044 <pdu_len_cmp>
    247e:	2800      	cmp	r0, #0
    2480:	f000 830b 	beq.w	2a9a <isr+0x11f2>
	       (features[1] << 8) | (features[2] << 16);
    2484:	7bb3      	ldrb	r3, [r6, #14]
    2486:	7b72      	ldrb	r2, [r6, #13]
    2488:	041b      	lsls	r3, r3, #16
    248a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    248e:	7b32      	ldrb	r2, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    2490:	4313      	orrs	r3, r2
    2492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    2496:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    249a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	       (features[1] << 8) | (features[2] << 16);
    249e:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    24a2:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    24a6:	4013      	ands	r3, r2
    24a8:	f3c3 0310 	ubfx	r3, r3, #0, #17
    24ac:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1U;
    24b0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    24b4:	f043 0320 	orr.w	r3, r3, #32
    24b8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0U;
    24bc:	2300      	movs	r3, #0
    24be:	86ab      	strh	r3, [r5, #52]	; 0x34
		if (!nack) {
    24c0:	e75a      	b.n	2378 <isr+0xad0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    24c2:	7a71      	ldrb	r1, [r6, #9]
    24c4:	200c      	movs	r0, #12
    24c6:	f010 fdbd 	bl	13044 <pdu_len_cmp>
    24ca:	2800      	cmp	r0, #0
    24cc:	f000 82e5 	beq.w	2a9a <isr+0x11f2>
{
	struct pdu_data_llctrl_version_ind *v;
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	if (!conn->llcp_version.tx) {
    24d0:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    24d4:	f013 0701 	ands.w	r7, r3, #1
    24d8:	d14f      	bne.n	257a <isr+0xcd2>
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    24da:	4837      	ldr	r0, [pc, #220]	; (25b8 <isr+0xd10>)
    24dc:	f01c f88a 	bl	1e5f4 <mem_acquire>
		if (!node_tx) {
    24e0:	4601      	mov	r1, r0
    24e2:	2800      	cmp	r0, #0
    24e4:	d0bd      	beq.n	2462 <isr+0xbba>
			return 1;
		}
		conn->llcp_version.tx = 1U;
    24e6:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    24ea:	f043 0301 	orr.w	r3, r3, #1
    24ee:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90

		pdu_ctrl_tx = (void *)node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24f2:	7903      	ldrb	r3, [r0, #4]
    24f4:	f043 0303 	orr.w	r3, r3, #3
    24f8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    24fa:	2306      	movs	r3, #6
    24fc:	7143      	strb	r3, [r0, #5]
			offsetof(struct pdu_data_llctrl, version_ind) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    24fe:	230c      	movs	r3, #12
    2500:	71c3      	strb	r3, [r0, #7]
		v = &pdu_ctrl_tx->llctrl.version_ind;
		v->version_number = LL_VERSION_NUMBER;
    2502:	2309      	movs	r3, #9
    2504:	7203      	strb	r3, [r0, #8]
		v->company_id =	CONFIG_BT_CTLR_COMPANY_ID;
    2506:	f06f 030e 	mvn.w	r3, #14
    250a:	7243      	strb	r3, [r0, #9]
    250c:	2305      	movs	r3, #5
    250e:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	CONFIG_BT_CTLR_SUBVERSION_NUMBER;
    2510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2514:	72c3      	strb	r3, [r0, #11]
    2516:	7303      	strb	r3, [r0, #12]

		ctrl_tx_sec_enqueue(conn, node_tx);
    2518:	4628      	mov	r0, r5
    251a:	f01c fb35 	bl	1eb88 <ctrl_tx_sec_enqueue>
	conn->empty = 1U;
    251e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    2522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2526:	f885 30d0 	strb.w	r3, [r5, #208]	; 0xd0
	pdu_data_tx = (void *)radio_pkt_empty_get();
    252a:	f012 fed1 	bl	152d0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    252e:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0U;
    2530:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2532:	2201      	movs	r2, #1
    2534:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    2538:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    253c:	7003      	strb	r3, [r0, #0]
	if (conn->pkt_tx_head) {
    253e:	b2db      	uxtb	r3, r3
    2540:	b1c2      	cbz	r2, 2574 <isr+0xccc>
		pdu_data_tx->md = 1U;
    2542:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0U;
    2546:	7003      	strb	r3, [r0, #0]
		/* Tx-ed and Rx-ed before, ignore this invalid Rx. */
		return 0;
	}

	v = &pdu_data_rx->llctrl.version_ind;
	conn->llcp_version.version_number = v->version_number;
    2548:	7b33      	ldrb	r3, [r6, #12]
    254a:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    254e:	7bb2      	ldrb	r2, [r6, #14]
    2550:	7b73      	ldrb	r3, [r6, #13]
    2552:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2556:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    255a:	7bf3      	ldrb	r3, [r6, #15]
    255c:	7c32      	ldrb	r2, [r6, #16]
    255e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2562:	f8a5 3094 	strh.w	r3, [r5, #148]	; 0x94
	conn->llcp_version.rx = 1U;
    2566:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    256a:	f043 0302 	orr.w	r3, r3, #2
    256e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
		if (!nack) {
    2572:	e701      	b.n	2378 <isr+0xad0>
		pdu_data_tx->md = 0U;
    2574:	f367 1304 	bfi	r3, r7, #4, #1
    2578:	e7e5      	b.n	2546 <isr+0xc9e>
	} else if (!conn->llcp_version.rx) {
    257a:	f013 0302 	ands.w	r3, r3, #2
    257e:	f47f af50 	bne.w	2422 <isr+0xb7a>
		conn->procedure_expire = 0U;
    2582:	86ab      	strh	r3, [r5, #52]	; 0x34
		*rx_enqueue = 1U;
    2584:	e7e0      	b.n	2548 <isr+0xca0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    2586:	7a71      	ldrb	r1, [r6, #9]
    2588:	200f      	movs	r0, #15
    258a:	f010 fd5b 	bl	13044 <pdu_len_cmp>
    258e:	2800      	cmp	r0, #0
    2590:	f000 8283 	beq.w	2a9a <isr+0x11f2>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    2594:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    2598:	930b      	str	r3, [sp, #44]	; 0x2c
    259a:	b17b      	cbz	r3, 25bc <isr+0xd14>
    259c:	429d      	cmp	r5, r3
    259e:	d00d      	beq.n	25bc <isr+0xd14>
			nack = reject_ext_ind_send(_radio.conn_curr,
    25a0:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn,
    25a2:	210f      	movs	r1, #15
				nack = reject_ext_ind_send(conn,
    25a4:	4628      	mov	r0, r5
    25a6:	f011 fc97 	bl	13ed8 <reject_ext_ind_send>
    25aa:	e757      	b.n	245c <isr+0xbb4>
    25ac:	00022060 	.word	0x00022060
    25b0:	00022040 	.word	0x00022040
    25b4:	20001230 	.word	0x20001230
    25b8:	20001384 	.word	0x20001384
		if (!_radio.conn_curr->role) {
    25bc:	f995 101d 	ldrsb.w	r1, [r5, #29]
    25c0:	f895 b0a9 	ldrb.w	fp, [r5, #169]	; 0xa9
    25c4:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    25c8:	2900      	cmp	r1, #0
    25ca:	f2c0 80a0 	blt.w	270e <isr+0xe66>
			if ((conn->llcp_conn_param.req !=
    25ce:	459b      	cmp	fp, r3
    25d0:	d009      	beq.n	25e6 <isr+0xd3e>
			    ((conn->llcp_conn_param.state ==
    25d2:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
					conn->llcp_conn_param.ack) &&
    25d6:	f013 0307 	ands.w	r3, r3, #7
    25da:	d002      	beq.n	25e2 <isr+0xd3a>
			      LLCP_CPR_STATE_REQ) ||
    25dc:	3b04      	subs	r3, #4
    25de:	2b01      	cmp	r3, #1
    25e0:	d801      	bhi.n	25e6 <isr+0xd3e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    25e2:	2223      	movs	r2, #35	; 0x23
    25e4:	e7dd      	b.n	25a2 <isr+0xcfa>
			} else if (conn->llcp_req != conn->llcp_ack) {
    25e6:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
    25ea:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    25ee:	4299      	cmp	r1, r3
    25f0:	d001      	beq.n	25f6 <isr+0xd4e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    25f2:	222a      	movs	r2, #42	; 0x2a
    25f4:	e7d5      	b.n	25a2 <isr+0xcfa>
				if ((cpr->interval_min < 6) ||
    25f6:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
    25fa:	fa1f f38a 	uxth.w	r3, sl
    25fe:	2b05      	cmp	r3, #5
    2600:	d922      	bls.n	2648 <isr+0xda0>
				    (cpr->interval_max > 3200) ||
    2602:	f8b6 e00e 	ldrh.w	lr, [r6, #14]
    2606:	fa1f f18e 	uxth.w	r1, lr
				if ((cpr->interval_min < 6) ||
    260a:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
    260e:	d81b      	bhi.n	2648 <isr+0xda0>
				    (cpr->interval_max > 3200) ||
    2610:	428b      	cmp	r3, r1
    2612:	d819      	bhi.n	2648 <isr+0xda0>
				    (cpr->latency > 499) ||
    2614:	f8b6 c010 	ldrh.w	ip, [r6, #16]
    2618:	fa1f f08c 	uxth.w	r0, ip
				    (cpr->interval_min > cpr->interval_max) ||
    261c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    2620:	d212      	bcs.n	2648 <isr+0xda0>
				    (cpr->timeout < 10) ||
    2622:	8a73      	ldrh	r3, [r6, #18]
    2624:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2628:	b29b      	uxth	r3, r3
				    (cpr->latency > 499) ||
    262a:	f1a3 040a 	sub.w	r4, r3, #10
    262e:	b2a4      	uxth	r4, r4
    2630:	f640 4276 	movw	r2, #3190	; 0xc76
    2634:	4294      	cmp	r4, r2
    2636:	d807      	bhi.n	2648 <isr+0xda0>
				     ((cpr->latency + 1) *
    2638:	fb00 1401 	mla	r4, r0, r1, r1
				    (cpr->timeout > 3200) ||
    263c:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
    2640:	da02      	bge.n	2648 <isr+0xda0>
				    (cpr->preferred_periodicity >
    2642:	7d34      	ldrb	r4, [r6, #20]
				      cpr->interval_max)) ||
    2644:	42a1      	cmp	r1, r4
    2646:	d201      	bcs.n	264c <isr+0xda4>
				nack = reject_ext_ind_send(conn,
    2648:	221e      	movs	r2, #30
    264a:	e7aa      	b.n	25a2 <isr+0xcfa>
				conn->llcp_conn_param.timeout =	cpr->timeout;
    264c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
				conn->llcp_conn_param.interval_min =
    2650:	f8a5 a0ac 	strh.w	sl, [r5, #172]	; 0xac
				conn->llcp_conn_param.interval_max =
    2654:	f8a5 e0ae 	strh.w	lr, [r5, #174]	; 0xae
				conn->llcp_conn_param.latency =	cpr->latency;
    2658:	f8a5 c0b0 	strh.w	ip, [r5, #176]	; 0xb0
				conn->llcp_conn_param.timeout =	cpr->timeout;
    265c:	f8a5 20b2 	strh.w	r2, [r5, #178]	; 0xb2
				conn->llcp_conn_param.preferred_periodicity =
    2660:	f885 40b4 	strb.w	r4, [r5, #180]	; 0xb4
					cpr->reference_conn_event_count;
    2664:	f896 c016 	ldrb.w	ip, [r6, #22]
    2668:	7d74      	ldrb	r4, [r6, #21]
    266a:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    266e:	f8a5 40b6 	strh.w	r4, [r5, #182]	; 0xb6
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    2672:	f896 c018 	ldrb.w	ip, [r6, #24]
    2676:	7df4      	ldrb	r4, [r6, #23]
    2678:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    267c:	f8a5 40b8 	strh.w	r4, [r5, #184]	; 0xb8
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    2680:	f896 c01a 	ldrb.w	ip, [r6, #26]
    2684:	7e74      	ldrb	r4, [r6, #25]
    2686:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    268a:	f8a5 40ba 	strh.w	r4, [r5, #186]	; 0xba
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    268e:	f896 c01c 	ldrb.w	ip, [r6, #28]
    2692:	7ef4      	ldrb	r4, [r6, #27]
    2694:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    2698:	f8a5 40bc 	strh.w	r4, [r5, #188]	; 0xbc
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    269c:	f896 c01e 	ldrb.w	ip, [r6, #30]
    26a0:	7f74      	ldrb	r4, [r6, #29]
    26a2:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    26a6:	f8a5 40be 	strh.w	r4, [r5, #190]	; 0xbe
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    26aa:	f896 c020 	ldrb.w	ip, [r6, #32]
    26ae:	7ff4      	ldrb	r4, [r6, #31]
    26b0:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    26b4:	f8a5 40c0 	strh.w	r4, [r5, #192]	; 0xc0
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    26b8:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
    26bc:	f896 c022 	ldrb.w	ip, [r6, #34]	; 0x22
    26c0:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    26c4:	f8a5 40c2 	strh.w	r4, [r5, #194]	; 0xc2
				     conn->conn_interval) ||
    26c8:	8cac      	ldrh	r4, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval_max !=
    26ca:	42a1      	cmp	r1, r4
    26cc:	d111      	bne.n	26f2 <isr+0xe4a>
				     conn->conn_interval) ||
    26ce:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
    26d0:	4281      	cmp	r1, r0
    26d2:	d10e      	bne.n	26f2 <isr+0xe4a>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    26d4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    26d8:	4361      	muls	r1, r4
    26da:	1e48      	subs	r0, r1, #1
    26dc:	f242 7410 	movw	r4, #10000	; 0x2710
    26e0:	fb04 0303 	mla	r3, r4, r3, r0
    26e4:	fbb3 f3f1 	udiv	r3, r3, r1
				     conn->latency) ||
    26e8:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
    26ea:	b29b      	uxth	r3, r3
    26ec:	4299      	cmp	r1, r3
    26ee:	f000 80a2 	beq.w	2836 <isr+0xf8e>
					if (conn->pause_tx) {
    26f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26f4:	f013 0f08 	tst.w	r3, #8
    26f8:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    26fc:	f000 808a 	beq.w	2814 <isr+0xf6c>
						conn->llcp_conn_param.state =
    2700:	2202      	movs	r2, #2
    2702:	f362 0302 	bfi	r3, r2, #0, #3
    2706:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
	u8_t rx_enqueue = 0U;
    270a:	2700      	movs	r7, #0
    270c:	e087      	b.n	281e <isr+0xf76>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    270e:	459b      	cmp	fp, r3
    2710:	d004      	beq.n	271c <isr+0xe74>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    2712:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    2716:	0798      	lsls	r0, r3, #30
    2718:	f47f a917 	bne.w	194a <isr+0xa2>
			if ((cpr->interval_min < 6) ||
    271c:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
    2720:	fa1f f38a 	uxth.w	r3, sl
    2724:	2b05      	cmp	r3, #5
    2726:	d98f      	bls.n	2648 <isr+0xda0>
			    (cpr->interval_max > 3200) ||
    2728:	f8b6 e00e 	ldrh.w	lr, [r6, #14]
    272c:	fa1f f28e 	uxth.w	r2, lr
			if ((cpr->interval_min < 6) ||
    2730:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
    2734:	d888      	bhi.n	2648 <isr+0xda0>
			    (cpr->interval_max > 3200) ||
    2736:	4293      	cmp	r3, r2
    2738:	d886      	bhi.n	2648 <isr+0xda0>
			    (cpr->latency > 499) ||
    273a:	f8b6 c010 	ldrh.w	ip, [r6, #16]
    273e:	fa1f f18c 	uxth.w	r1, ip
			    (cpr->interval_min > cpr->interval_max) ||
    2742:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    2746:	f4bf af7f 	bcs.w	2648 <isr+0xda0>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    274a:	8a73      	ldrh	r3, [r6, #18]
    274c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    2750:	b29b      	uxth	r3, r3
			    (cpr->latency > 499) ||
    2752:	f1a3 000a 	sub.w	r0, r3, #10
    2756:	b280      	uxth	r0, r0
    2758:	f640 4476 	movw	r4, #3190	; 0xc76
    275c:	42a0      	cmp	r0, r4
    275e:	f63f af73 	bhi.w	2648 <isr+0xda0>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    2762:	fb01 2002 	mla	r0, r1, r2, r2
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    2766:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
    276a:	f6bf af6d 	bge.w	2648 <isr+0xda0>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    276e:	7d30      	ldrb	r0, [r6, #20]
						    cpr->interval_max)) ||
    2770:	4282      	cmp	r2, r0
    2772:	f4ff af69 	bcc.w	2648 <isr+0xda0>
			conn->llcp_conn_param.timeout =	cpr->timeout;
    2776:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
			conn->llcp_conn_param.interval_min = cpr->interval_min;
    277a:	f8a5 a0ac 	strh.w	sl, [r5, #172]	; 0xac
			conn->llcp_conn_param.interval_max = cpr->interval_max;
    277e:	f8a5 e0ae 	strh.w	lr, [r5, #174]	; 0xae
			conn->llcp_conn_param.latency =	cpr->latency;
    2782:	f8a5 c0b0 	strh.w	ip, [r5, #176]	; 0xb0
			conn->llcp_conn_param.timeout =	cpr->timeout;
    2786:	f8a5 40b2 	strh.w	r4, [r5, #178]	; 0xb2
			conn->llcp_conn_param.preferred_periodicity =
    278a:	f885 00b4 	strb.w	r0, [r5, #180]	; 0xb4
				cpr->reference_conn_event_count;
    278e:	7db4      	ldrb	r4, [r6, #22]
    2790:	7d70      	ldrb	r0, [r6, #21]
    2792:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    2796:	f8a5 00b6 	strh.w	r0, [r5, #182]	; 0xb6
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    279a:	7e34      	ldrb	r4, [r6, #24]
    279c:	7df0      	ldrb	r0, [r6, #23]
    279e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    27a2:	f8a5 00b8 	strh.w	r0, [r5, #184]	; 0xb8
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    27a6:	7eb4      	ldrb	r4, [r6, #26]
    27a8:	7e70      	ldrb	r0, [r6, #25]
    27aa:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    27ae:	f8a5 00ba 	strh.w	r0, [r5, #186]	; 0xba
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    27b2:	7f34      	ldrb	r4, [r6, #28]
    27b4:	7ef0      	ldrb	r0, [r6, #27]
    27b6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    27ba:	f8a5 00bc 	strh.w	r0, [r5, #188]	; 0xbc
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    27be:	7fb4      	ldrb	r4, [r6, #30]
    27c0:	7f70      	ldrb	r0, [r6, #29]
    27c2:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    27c6:	f8a5 00be 	strh.w	r0, [r5, #190]	; 0xbe
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    27ca:	f896 4020 	ldrb.w	r4, [r6, #32]
    27ce:	7ff0      	ldrb	r0, [r6, #31]
    27d0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    27d4:	f8a5 00c0 	strh.w	r0, [r5, #192]	; 0xc0
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    27d8:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
    27dc:	f896 4022 	ldrb.w	r4, [r6, #34]	; 0x22
    27e0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    27e4:	f8a5 00c2 	strh.w	r0, [r5, #194]	; 0xc2
			     conn->conn_interval) ||
    27e8:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval_max !=
    27ea:	4282      	cmp	r2, r0
    27ec:	d110      	bne.n	2810 <isr+0xf68>
			     conn->conn_interval) ||
    27ee:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
    27f0:	4288      	cmp	r0, r1
    27f2:	d10d      	bne.n	2810 <isr+0xf68>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    27f4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    27f8:	434a      	muls	r2, r1
    27fa:	1e51      	subs	r1, r2, #1
    27fc:	f242 7010 	movw	r0, #10000	; 0x2710
    2800:	fb00 1303 	mla	r3, r0, r3, r1
    2804:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != conn->latency) ||
    2808:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    280a:	b29b      	uxth	r3, r3
    280c:	429a      	cmp	r2, r3
    280e:	d012      	beq.n	2836 <isr+0xf8e>
				conn->llcp_conn_param.state =
    2810:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    2814:	2203      	movs	r2, #3
    2816:	f362 0302 	bfi	r3, r2, #0, #3
    281a:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
			conn->llcp_conn_param.ack--;
    281e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    2822:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
			if (_radio.conn_upd == 0) {
    2826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2828:	2b00      	cmp	r3, #0
    282a:	f47f ada5 	bne.w	2378 <isr+0xad0>
				_radio.conn_upd = conn;
    282e:	4ba6      	ldr	r3, [pc, #664]	; (2ac8 <isr+0x1220>)
    2830:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
		if (!nack) {
    2834:	e5a0      	b.n	2378 <isr+0xad0>
				conn->llcp_conn_param.state =
    2836:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
    283a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    283e:	f043 0301 	orr.w	r3, r3, #1
    2842:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
    2846:	e760      	b.n	270a <isr+0xe62>
		if (_radio.conn_curr->role ||
    2848:	f995 301d 	ldrsb.w	r3, [r5, #29]
    284c:	2b00      	cmp	r3, #0
    284e:	f2c0 8124 	blt.w	2a9a <isr+0x11f2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    2852:	7a71      	ldrb	r1, [r6, #9]
    2854:	2010      	movs	r0, #16
    2856:	f010 fbf5 	bl	13044 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    285a:	2800      	cmp	r0, #0
    285c:	f000 811d 	beq.w	2a9a <isr+0x11f2>
		if (!_radio.conn_curr->role &&
    2860:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
    2864:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    2868:	429a      	cmp	r2, r3
    286a:	f43f adda 	beq.w	2422 <isr+0xb7a>
		    (_radio.conn_curr->llcp_conn_param.state ==
    286e:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
		     _radio.conn_curr->llcp_conn_param.ack) &&
    2872:	f003 0307 	and.w	r3, r3, #7
    2876:	2b04      	cmp	r3, #4
    2878:	f47f add3 	bne.w	2422 <isr+0xb7a>
			if ((cpr->interval_min < 6) ||
    287c:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
    2880:	fa1f f38e 	uxth.w	r3, lr
    2884:	2b05      	cmp	r3, #5
    2886:	d91e      	bls.n	28c6 <isr+0x101e>
			    (cpr->interval_max > 3200) ||
    2888:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
    288c:	fa1f f28c 	uxth.w	r2, ip
			if ((cpr->interval_min < 6) ||
    2890:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
    2894:	d817      	bhi.n	28c6 <isr+0x101e>
			    (cpr->interval_max > 3200) ||
    2896:	4293      	cmp	r3, r2
    2898:	d815      	bhi.n	28c6 <isr+0x101e>
			    (cpr->latency > 499) ||
    289a:	8a34      	ldrh	r4, [r6, #16]
    289c:	b2a3      	uxth	r3, r4
			    (cpr->interval_min > cpr->interval_max) ||
    289e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    28a2:	d210      	bcs.n	28c6 <isr+0x101e>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    28a4:	8a70      	ldrh	r0, [r6, #18]
    28a6:	b287      	uxth	r7, r0
			    (cpr->latency > 499) ||
    28a8:	f1a7 010a 	sub.w	r1, r7, #10
    28ac:	b289      	uxth	r1, r1
    28ae:	f640 4a76 	movw	sl, #3190	; 0xc76
    28b2:	4551      	cmp	r1, sl
    28b4:	d807      	bhi.n	28c6 <isr+0x101e>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    28b6:	fb03 2302 	mla	r3, r3, r2, r2
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    28ba:	ebb3 0f87 	cmp.w	r3, r7, lsl #2
    28be:	da02      	bge.n	28c6 <isr+0x101e>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    28c0:	7d33      	ldrb	r3, [r6, #20]
						    cpr->interval_max)) ||
    28c2:	429a      	cmp	r2, r3
    28c4:	d202      	bcs.n	28cc <isr+0x1024>
				nack = reject_ext_ind_send(conn,
    28c6:	221e      	movs	r2, #30
    28c8:	2110      	movs	r1, #16
    28ca:	e66b      	b.n	25a4 <isr+0xcfc>
			_radio.conn_curr->procedure_expire = 0U;
    28cc:	2700      	movs	r7, #0
    28ce:	86af      	strh	r7, [r5, #52]	; 0x34
			conn->llcp_conn_param.interval_min = cpr->interval_min;
    28d0:	f8a5 e0ac 	strh.w	lr, [r5, #172]	; 0xac
			conn->llcp_conn_param.interval_max = cpr->interval_max;
    28d4:	f8a5 c0ae 	strh.w	ip, [r5, #174]	; 0xae
			conn->llcp_conn_param.latency =	cpr->latency;
    28d8:	f8a5 40b0 	strh.w	r4, [r5, #176]	; 0xb0
			conn->llcp_conn_param.timeout =	cpr->timeout;
    28dc:	f8a5 00b2 	strh.w	r0, [r5, #178]	; 0xb2
			conn->llcp_conn_param.preferred_periodicity =
    28e0:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
				cpr->reference_conn_event_count;
    28e4:	7db2      	ldrb	r2, [r6, #22]
    28e6:	7d73      	ldrb	r3, [r6, #21]
    28e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    28ec:	f8a5 30b6 	strh.w	r3, [r5, #182]	; 0xb6
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    28f0:	7e32      	ldrb	r2, [r6, #24]
    28f2:	7df3      	ldrb	r3, [r6, #23]
    28f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    28f8:	f8a5 30b8 	strh.w	r3, [r5, #184]	; 0xb8
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    28fc:	7eb2      	ldrb	r2, [r6, #26]
    28fe:	7e73      	ldrb	r3, [r6, #25]
    2900:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2904:	f8a5 30ba 	strh.w	r3, [r5, #186]	; 0xba
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    2908:	7f32      	ldrb	r2, [r6, #28]
    290a:	7ef3      	ldrb	r3, [r6, #27]
    290c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2910:	f8a5 30bc 	strh.w	r3, [r5, #188]	; 0xbc
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    2914:	7fb2      	ldrb	r2, [r6, #30]
    2916:	7f73      	ldrb	r3, [r6, #29]
    2918:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    291c:	f8a5 30be 	strh.w	r3, [r5, #190]	; 0xbe
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    2920:	f896 2020 	ldrb.w	r2, [r6, #32]
    2924:	7ff3      	ldrb	r3, [r6, #31]
    2926:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    292a:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    292e:	f896 2022 	ldrb.w	r2, [r6, #34]	; 0x22
    2932:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    2936:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    293a:	f8a5 30c2 	strh.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    293e:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    2942:	2201      	movs	r2, #1
    2944:	f362 0302 	bfi	r3, r2, #0, #3
    2948:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
		if (!nack) {
    294c:	e514      	b.n	2378 <isr+0xad0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    294e:	7a71      	ldrb	r1, [r6, #9]
    2950:	2011      	movs	r0, #17
    2952:	f010 fb77 	bl	13044 <pdu_len_cmp>
    2956:	2800      	cmp	r0, #0
    2958:	f000 809f 	beq.w	2a9a <isr+0x11f2>
		   _radio.conn_curr->llcp_conn_param.req) {
    295c:	f895 00a8 	ldrb.w	r0, [r5, #168]	; 0xa8
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    2960:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    2964:	4283      	cmp	r3, r0
    2966:	f43f ad5c 	beq.w	2422 <isr+0xb7a>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    296a:	7b33      	ldrb	r3, [r6, #12]
    296c:	2b0f      	cmp	r3, #15
    296e:	f47f ad58 	bne.w	2422 <isr+0xb7a>
	if (!conn->role && (rej_ext_ind->error_code ==
    2972:	f995 301d 	ldrsb.w	r3, [r5, #29]
    2976:	7b72      	ldrb	r2, [r6, #13]
    2978:	2b00      	cmp	r3, #0
    297a:	db2d      	blt.n	29d8 <isr+0x1130>
    297c:	2a1a      	cmp	r2, #26
    297e:	d12b      	bne.n	29d8 <isr+0x1130>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    2980:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    2984:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
    2988:	4299      	cmp	r1, r3
    298a:	f47e afde 	bne.w	194a <isr+0xa2>
				conn->llcp_conn_param.state =
    298e:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    2992:	2205      	movs	r2, #5
    2994:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp.conn_upd.interval =
    2998:	f8b5 20ae 	ldrh.w	r2, [r5, #174]	; 0xae
    299c:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
				conn->llcp.conn_upd.latency =
    29a0:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
    29a4:	666a      	str	r2, [r5, #100]	; 0x64
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    29a6:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
				conn->llcp_conn_param.state =
    29aa:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
				conn->llcp.conn_upd.win_size = 1U;
    29ae:	2001      	movs	r0, #1
					!conn->llcp_conn_param.cmd;
    29b0:	f083 0308 	eor.w	r3, r3, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    29b4:	f360 0201 	bfi	r2, r0, #0, #2
					!conn->llcp_conn_param.cmd;
    29b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0U;
    29bc:	2700      	movs	r7, #0
				conn->llcp.conn_upd.is_internal =
    29be:	f363 0282 	bfi	r2, r3, #2, #1
				conn->llcp_ack--;
    29c2:	3901      	subs	r1, #1
				conn->llcp.conn_upd.win_size = 1U;
    29c4:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
				conn->llcp.conn_upd.win_offset_us = 0U;
    29c8:	66ef      	str	r7, [r5, #108]	; 0x6c
				conn->llcp.conn_upd.is_internal =
    29ca:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
				conn->llcp_type = LLCP_CONN_UPD;
    29ce:	f885 005e 	strb.w	r0, [r5, #94]	; 0x5e
				conn->llcp_ack--;
    29d2:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
		if (!nack) {
    29d6:	e4cf      	b.n	2378 <isr+0xad0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    29d8:	2a23      	cmp	r2, #35	; 0x23
    29da:	d010      	beq.n	29fe <isr+0x1156>
		LL_ASSERT(_radio.conn_upd == conn);
    29dc:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    29e0:	428d      	cmp	r5, r1
    29e2:	f47e afb2 	bne.w	194a <isr+0xa2>
		_radio.conn_upd = NULL;
    29e6:	2100      	movs	r1, #0
		if (conn->role) {
    29e8:	428b      	cmp	r3, r1
			conn->slave.ticks_to_offset =
    29ea:	bfb8      	it	lt
    29ec:	f8d5 30cc 	ldrlt.w	r3, [r5, #204]	; 0xcc
		_radio.conn_upd = NULL;
    29f0:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
		conn->llcp_conn_param.ack =
    29f4:	f885 00a9 	strb.w	r0, [r5, #169]	; 0xa9
		conn->procedure_expire = 0U;
    29f8:	86a9      	strh	r1, [r5, #52]	; 0x34
			conn->slave.ticks_to_offset =
    29fa:	bfb8      	it	lt
    29fc:	65ab      	strlt	r3, [r5, #88]	; 0x58
	if (!conn->llcp_conn_param.cmd) {
    29fe:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    2a02:	f013 0308 	ands.w	r3, r3, #8
    2a06:	f43f ad0c 	beq.w	2422 <isr+0xb7a>
	cp->status = rej_ext_ind->error_code;
    2a0a:	7232      	strb	r2, [r6, #8]
	cp->latency = conn->latency;
    2a0c:	8cea      	ldrh	r2, [r5, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    2a0e:	230a      	movs	r3, #10
    2a10:	7133      	strb	r3, [r6, #4]
	cp->interval = conn->conn_interval;
    2a12:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	cp->latency = conn->latency;
    2a14:	81b2      	strh	r2, [r6, #12]
	cp->timeout = conn->supervision_reload *
    2a16:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
	cp->interval = conn->conn_interval;
    2a18:	8173      	strh	r3, [r6, #10]
	cp->timeout = conn->supervision_reload *
    2a1a:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    2a1c:	237d      	movs	r3, #125	; 0x7d
    2a1e:	4353      	muls	r3, r2
    2a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a24:	fb93 f3f2 	sdiv	r3, r3, r2
	cp->timeout = conn->supervision_reload *
    2a28:	81f3      	strh	r3, [r6, #14]
		if (!nack) {
    2a2a:	e4a5      	b.n	2378 <isr+0xad0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    2a2c:	7a71      	ldrb	r1, [r6, #9]
    2a2e:	2007      	movs	r0, #7
    2a30:	f010 fb08 	bl	13044 <pdu_len_cmp>
    2a34:	b388      	cbz	r0, 2a9a <isr+0x11f2>
			   _radio.conn_curr->llcp_conn_param.req) {
    2a36:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    2a3a:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    2a3e:	4293      	cmp	r3, r2
    2a40:	f43f ad3c 	beq.w	24bc <isr+0xc14>
			conn->llcp_conn_param.disabled = 1U;
    2a44:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    2a48:	f043 0310 	orr.w	r3, r3, #16
    2a4c:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
			if (!conn->role) {
    2a50:	f995 301d 	ldrsb.w	r3, [r5, #29]
    2a54:	2b00      	cmp	r3, #0
    2a56:	da93      	bge.n	2980 <isr+0x10d8>
			LL_ASSERT(_radio.conn_upd == conn);
    2a58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    2a5c:	429d      	cmp	r5, r3
    2a5e:	f47e af74 	bne.w	194a <isr+0xa2>
			_radio.conn_upd = NULL;
    2a62:	2300      	movs	r3, #0
    2a64:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
			if (!conn->llcp_conn_param.cmd) {
    2a68:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2a6c:	f885 20a9 	strb.w	r2, [r5, #169]	; 0xa9
			if (!conn->llcp_conn_param.cmd) {
    2a70:	f013 0308 	ands.w	r3, r3, #8
    2a74:	d026      	beq.n	2ac4 <isr+0x121c>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    2a76:	230a      	movs	r3, #10
    2a78:	7133      	strb	r3, [r6, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    2a7a:	231a      	movs	r3, #26
    2a7c:	7233      	strb	r3, [r6, #8]
			cp->latency = conn->latency;
    2a7e:	8cea      	ldrh	r2, [r5, #38]	; 0x26
			cp->interval = conn->conn_interval;
    2a80:	8cab      	ldrh	r3, [r5, #36]	; 0x24
			cp->latency = conn->latency;
    2a82:	81b2      	strh	r2, [r6, #12]
			cp->timeout = conn->supervision_reload *
    2a84:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
			cp->interval = conn->conn_interval;
    2a86:	8173      	strh	r3, [r6, #10]
			cp->timeout = conn->supervision_reload *
    2a88:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    2a8a:	237d      	movs	r3, #125	; 0x7d
    2a8c:	4353      	muls	r3, r2
    2a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a92:	fb93 f3f2 	sdiv	r3, r3, r2
			cp->timeout = conn->supervision_reload *
    2a96:	81f3      	strh	r3, [r6, #14]
			*rx_enqueue = 1U;
    2a98:	e510      	b.n	24bc <isr+0xc14>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    2a9a:	480c      	ldr	r0, [pc, #48]	; (2acc <isr+0x1224>)
    2a9c:	f01b fdaa 	bl	1e5f4 <mem_acquire>
	if (!node_tx) {
    2aa0:	4601      	mov	r1, r0
    2aa2:	2800      	cmp	r0, #0
    2aa4:	f43f acdd 	beq.w	2462 <isr+0xbba>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2aa8:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    2aaa:	f880 a008 	strb.w	sl, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2aae:	f043 0303 	orr.w	r3, r3, #3
    2ab2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    2ab4:	2302      	movs	r3, #2
    2ab6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    2ab8:	2307      	movs	r3, #7
    2aba:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    2abc:	4628      	mov	r0, r5
    2abe:	f01c f835 	bl	1eb2c <ctrl_tx_enqueue>
		if (!nack) {
    2ac2:	e4ae      	b.n	2422 <isr+0xb7a>
	u8_t rx_enqueue = 0U;
    2ac4:	461f      	mov	r7, r3
    2ac6:	e457      	b.n	2378 <isr+0xad0>
    2ac8:	20001230 	.word	0x20001230
    2acc:	20001384 	.word	0x20001384
		if (_radio.crc_expire == 0) {
    2ad0:	f894 1119 	ldrb.w	r1, [r4, #281]	; 0x119
    2ad4:	b909      	cbnz	r1, 2ada <isr+0x1232>
			_radio.crc_expire = 2U;
    2ad6:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
		_radio.crc_expire--;
    2ada:	f894 5119 	ldrb.w	r5, [r4, #281]	; 0x119
    2ade:	3d01      	subs	r5, #1
    2ae0:	b2ed      	uxtb	r5, r5
    2ae2:	f884 5119 	strb.w	r5, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    2ae6:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    2ae8:	fab5 f585 	clz	r5, r5
    2aec:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    2aee:	2f00      	cmp	r7, #0
    2af0:	d17f      	bne.n	2bf2 <isr+0x134a>
			_radio.conn_curr->supervision_expire =
    2af2:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    2af4:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    2af6:	46b8      	mov	r8, r7
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    2af8:	4abb      	ldr	r2, [pc, #748]	; (2de8 <isr+0x1540>)
    2afa:	f8d2 9114 	ldr.w	r9, [r2, #276]	; 0x114
    2afe:	f899 30d0 	ldrb.w	r3, [r9, #208]	; 0xd0
	if (/* empty packet */
    2b02:	f013 0f80 	tst.w	r3, #128	; 0x80
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    2b06:	ea4f 1bd3 	mov.w	fp, r3, lsr #7
	if (/* empty packet */
    2b0a:	4692      	mov	sl, r2
    2b0c:	d108      	bne.n	2b20 <isr+0x1278>
	    !conn->pkt_tx_head ||
    2b0e:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	    conn->empty ||
    2b12:	b128      	cbz	r0, 2b20 <isr+0x1278>
	    !conn->pkt_tx_head ||
    2b14:	0719      	lsls	r1, r3, #28
    2b16:	f8d9 c118 	ldr.w	ip, [r9, #280]	; 0x118
    2b1a:	d56f      	bpl.n	2bfc <isr+0x1354>
	      0) && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    2b1c:	4584      	cmp	ip, r0
    2b1e:	d06d      	beq.n	2bfc <isr+0x1354>
	conn->empty = 1U;
    2b20:	f899 30d0 	ldrb.w	r3, [r9, #208]	; 0xd0
    2b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2b28:	f889 30d0 	strb.w	r3, [r9, #208]	; 0xd0
	pdu_data_tx = (void *)radio_pkt_empty_get();
    2b2c:	f012 fbd0 	bl	152d0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2b30:	7803      	ldrb	r3, [r0, #0]
    2b32:	2201      	movs	r2, #1
    2b34:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0U;
    2b38:	2200      	movs	r2, #0
    2b3a:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    2b3c:	f8d9 2114 	ldr.w	r2, [r9, #276]	; 0x114
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2b40:	7003      	strb	r3, [r0, #0]
	pdu_data_tx = (void *)radio_pkt_empty_get();
    2b42:	4604      	mov	r4, r0
	if (conn->pkt_tx_head) {
    2b44:	b2db      	uxtb	r3, r3
    2b46:	2a00      	cmp	r2, #0
    2b48:	d055      	beq.n	2bf6 <isr+0x134e>
		pdu_data_tx->md = 1U;
    2b4a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0U;
    2b4e:	7023      	strb	r3, [r4, #0]
	_pdu_data_tx->rfu = 0U;
    2b50:	7823      	ldrb	r3, [r4, #0]
    2b52:	f36f 1347 	bfc	r3, #5, #3
    2b56:	7023      	strb	r3, [r4, #0]
	_pdu_data_tx->resv = 0U;
    2b58:	2300      	movs	r3, #0
    2b5a:	70a3      	strb	r3, [r4, #2]
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2b5c:	4ba2      	ldr	r3, [pc, #648]	; (2de8 <isr+0x1540>)
			STATE_CLOSE : STATE_TX;
    2b5e:	7d5a      	ldrb	r2, [r3, #21]
    2b60:	2a03      	cmp	r2, #3
    2b62:	f000 8082 	beq.w	2c6a <isr+0x13c2>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2b66:	2d00      	cmp	r5, #0
    2b68:	d17d      	bne.n	2c66 <isr+0x13be>
    2b6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2b6c:	b12a      	cbz	r2, 2b7a <isr+0x12d2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    2b6e:	7a32      	ldrb	r2, [r6, #8]
    2b70:	06d2      	lsls	r2, r2, #27
    2b72:	d402      	bmi.n	2b7a <isr+0x12d2>
    2b74:	7862      	ldrb	r2, [r4, #1]
    2b76:	2a00      	cmp	r2, #0
    2b78:	d075      	beq.n	2c66 <isr+0x13be>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    2b7a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
			  (0))) ||
    2b7e:	f892 509b 	ldrb.w	r5, [r2, #155]	; 0x9b
    2b82:	2d00      	cmp	r5, #0
    2b84:	d16f      	bne.n	2c66 <isr+0x13be>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2b86:	2202      	movs	r2, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    2b88:	2096      	movs	r0, #150	; 0x96
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2b8a:	755a      	strb	r2, [r3, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
    2b8c:	f012 fc3c 	bl	15408 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    2b90:	4628      	mov	r0, r5
    2b92:	f012 fba5 	bl	152e0 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    2b96:	f012 fcff 	bl	15598 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    2b9a:	f8da 5114 	ldr.w	r5, [sl, #276]	; 0x114
    2b9e:	7823      	ldrb	r3, [r4, #0]
    2ba0:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
    2ba4:	f3c2 0200 	ubfx	r2, r2, #0, #1
    2ba8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    2bac:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
    2bb0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    2bb4:	f362 0382 	bfi	r3, r2, #2, #1
	radio_phy_set(phy, flags);
    2bb8:	2100      	movs	r1, #0
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    2bba:	7023      	strb	r3, [r4, #0]
	radio_phy_set(phy, flags);
    2bbc:	4608      	mov	r0, r1
    2bbe:	f012 faab 	bl	15118 <radio_phy_set>
	if (conn->enc_tx) {
    2bc2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    2bc6:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    2bc8:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    2bcc:	d55f      	bpl.n	2c8e <isr+0x13e6>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    2bce:	211f      	movs	r1, #31
    2bd0:	2008      	movs	r0, #8
    2bd2:	f012 fae7 	bl	151a4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    2bd6:	4621      	mov	r1, r4
    2bd8:	f105 00f2 	add.w	r0, r5, #242	; 0xf2
    2bdc:	f012 fd24 	bl	15628 <radio_ccm_tx_pkt_set>
		radio_pkt_tx_set(pdu_data_tx);
    2be0:	f012 fb12 	bl	15208 <radio_pkt_tx_set>
	LL_ASSERT(!radio_is_ready());
    2be4:	f012 fb40 	bl	15268 <radio_is_ready>
    2be8:	2800      	cmp	r0, #0
    2bea:	f43f aa13 	beq.w	2014 <isr+0x76c>
    2bee:	f7fe beac 	b.w	194a <isr+0xa2>
	u8_t rx_enqueue = 0U;
    2bf2:	2700      	movs	r7, #0
    2bf4:	e77f      	b.n	2af6 <isr+0x124e>
		pdu_data_tx->md = 0U;
    2bf6:	f362 1304 	bfi	r3, r2, #4, #1
    2bfa:	e7a8      	b.n	2b4e <isr+0x12a6>
					conn->packet_tx_head_offset);
    2bfc:	f899 2129 	ldrb.w	r2, [r9, #297]	; 0x129
		if (!conn->packet_tx_head_len) {
    2c00:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    2c04:	1d01      	adds	r1, r0, #4
    2c06:	188c      	adds	r4, r1, r2
		if (!conn->packet_tx_head_len) {
    2c08:	b913      	cbnz	r3, 2c10 <isr+0x1368>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    2c0a:	7863      	ldrb	r3, [r4, #1]
    2c0c:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
		if (conn->packet_tx_head_offset) {
    2c10:	b12a      	cbz	r2, 2c1e <isr+0x1376>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    2c12:	5c8b      	ldrb	r3, [r1, r2]
    2c14:	f04f 0e01 	mov.w	lr, #1
    2c18:	f36e 0301 	bfi	r3, lr, #0, #2
    2c1c:	548b      	strb	r3, [r1, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    2c1e:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
    2c22:	1a9b      	subs	r3, r3, r2
    2c24:	b2db      	uxtb	r3, r3
    2c26:	7063      	strb	r3, [r4, #1]
		_pdu_data_tx->md = 0U;
    2c28:	f811 e002 	ldrb.w	lr, [r1, r2]
		if (_pdu_data_tx->len > max_tx_octets) {
    2c2c:	2b1b      	cmp	r3, #27
		_pdu_data_tx->md = 0U;
    2c2e:	f36f 1e04 	bfc	lr, #4, #1
    2c32:	f801 e002 	strb.w	lr, [r1, r2]
		if (_pdu_data_tx->len > max_tx_octets) {
    2c36:	d905      	bls.n	2c44 <isr+0x139c>
			_pdu_data_tx->len = max_tx_octets;
    2c38:	231b      	movs	r3, #27
    2c3a:	7063      	strb	r3, [r4, #1]
			_pdu_data_tx->md = 1U;
    2c3c:	5c8b      	ldrb	r3, [r1, r2]
    2c3e:	f043 0310 	orr.w	r3, r3, #16
    2c42:	548b      	strb	r3, [r1, r2]
		if (conn->pkt_tx_head->next) {
    2c44:	6803      	ldr	r3, [r0, #0]
    2c46:	b11b      	cbz	r3, 2c50 <isr+0x13a8>
			_pdu_data_tx->md = 1U;
    2c48:	5c8b      	ldrb	r3, [r1, r2]
    2c4a:	f043 0310 	orr.w	r3, r3, #16
    2c4e:	548b      	strb	r3, [r1, r2]
		if (!conn->pkt_tx_ctrl &&
    2c50:	f1bc 0f00 	cmp.w	ip, #0
    2c54:	f47f af7c 	bne.w	2b50 <isr+0x12a8>
    2c58:	f8d9 3120 	ldr.w	r3, [r9, #288]	; 0x120
    2c5c:	4298      	cmp	r0, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    2c5e:	bf18      	it	ne
    2c60:	e9c9 0046 	strdne	r0, r0, [r9, #280]	; 0x118
    2c64:	e774      	b.n	2b50 <isr+0x12a8>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    2c66:	2203      	movs	r2, #3
    2c68:	755a      	strb	r2, [r3, #21]
		if ((_radio.role == ROLE_MASTER) ||
    2c6a:	7d1a      	ldrb	r2, [r3, #20]
    2c6c:	2a04      	cmp	r2, #4
    2c6e:	d10b      	bne.n	2c88 <isr+0x13e0>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    2c70:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    2c74:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
    2c78:	f36b 12c7 	bfi	r2, fp, #7, #1
    2c7c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			radio_disable();
    2c80:	f012 fad4 	bl	1522c <radio_disable>
			goto isr_rx_conn_exit;
    2c84:	f7ff b9c6 	b.w	2014 <isr+0x76c>
			radio_switch_complete_and_disable();
    2c88:	f012 fb40 	bl	1530c <radio_switch_complete_and_disable>
    2c8c:	e785      	b.n	2b9a <isr+0x12f2>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    2c8e:	2008      	movs	r0, #8
    2c90:	211b      	movs	r1, #27
    2c92:	f012 fa87 	bl	151a4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    2c96:	4620      	mov	r0, r4
    2c98:	e7a2      	b.n	2be0 <isr+0x1338>
	switch (_radio.role) {
    2c9a:	7d23      	ldrb	r3, [r4, #20]
    2c9c:	2b03      	cmp	r3, #3
    2c9e:	f63e ae54 	bhi.w	194a <isr+0xa2>
    2ca2:	e8df f013 	tbh	[pc, r3, lsl #1]
    2ca6:	017f      	.short	0x017f
    2ca8:	00450004 	.word	0x00450004
    2cac:	0089      	.short	0x0089
	if ((_radio.state == STATE_CLOSE) &&
    2cae:	2f03      	cmp	r7, #3
    2cb0:	d109      	bne.n	2cc6 <isr+0x141e>
	    (_radio.advertiser.chan_map_current != 0)) {
    2cb2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    2cb6:	075e      	lsls	r6, r3, #29
    2cb8:	d005      	beq.n	2cc6 <isr+0x141e>
		adv_setup();
    2cba:	f010 fd69 	bl	13790 <adv_setup>
		radio_tx_enable();
    2cbe:	f012 faaf 	bl	15220 <radio_tx_enable>
		radio_tmr_end_capture();
    2cc2:	f7fe be53 	b.w	196c <isr+0xc4>
		radio_filter_disable();
    2cc6:	f012 fb6d 	bl	153a4 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    2cca:	7d63      	ldrb	r3, [r4, #21]
    2ccc:	2b03      	cmp	r3, #3
    2cce:	d157      	bne.n	2d80 <isr+0x14d8>
		    (!_radio.advertiser.is_hdcd)) {
    2cd0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    2cd4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    2cd8:	d152      	bne.n	2d80 <isr+0x14d8>
			entropy_get_entropy_isr(_radio.entropy,
    2cda:	6860      	ldr	r0, [r4, #4]
					  u16_t length,
					  u32_t flags)
{
	const struct entropy_driver_api *api = dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    2cdc:	6842      	ldr	r2, [r0, #4]
    2cde:	6855      	ldr	r5, [r2, #4]
    2ce0:	b11d      	cbz	r5, 2cea <isr+0x1442>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    2ce2:	2202      	movs	r2, #2
    2ce4:	f10d 013e 	add.w	r1, sp, #62	; 0x3e
    2ce8:	47a8      	blx	r5
			random_delay %= HAL_TICKER_US_TO_TICKS(10000);
    2cea:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    2cee:	f240 1247 	movw	r2, #327	; 0x147
    2cf2:	fbb1 f3f2 	udiv	r3, r1, r2
    2cf6:	fb02 1313 	mls	r3, r2, r3, r1
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2cfa:	f241 025f 	movw	r2, #4191	; 0x105f
    2cfe:	2100      	movs	r1, #0
    2d00:	9206      	str	r2, [sp, #24]
			random_delay += 1;
    2d02:	3301      	adds	r3, #1
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2d04:	4a39      	ldr	r2, [pc, #228]	; (2dec <isr+0x1544>)
    2d06:	9205      	str	r2, [sp, #20]
			random_delay += 1;
    2d08:	b21b      	sxth	r3, r3
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2d0a:	e9cd 1103 	strd	r1, r1, [sp, #12]
    2d0e:	e9cd 1101 	strd	r1, r1, [sp, #4]
    2d12:	9100      	str	r1, [sp, #0]
    2d14:	2205      	movs	r2, #5
    2d16:	4608      	mov	r0, r1
			random_delay += 1;
    2d18:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2d1c:	f00f f98a 	bl	12034 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2d20:	f030 0302 	bics.w	r3, r0, #2
    2d24:	d02c      	beq.n	2d80 <isr+0x14d8>
    2d26:	7ca3      	ldrb	r3, [r4, #18]
    2d28:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2d2a:	d029      	beq.n	2d80 <isr+0x14d8>
    2d2c:	f7fe be0d 	b.w	194a <isr+0xa2>
	if (_radio.state == STATE_CLOSE) {
    2d30:	2f03      	cmp	r7, #3
    2d32:	d119      	bne.n	2d68 <isr+0x14c0>
		radio_tmr_tifs_set(RADIO_TIFS);
    2d34:	2096      	movs	r0, #150	; 0x96
    2d36:	f012 fb67 	bl	15408 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    2d3a:	2300      	movs	r3, #0
    2d3c:	4619      	mov	r1, r3
    2d3e:	461a      	mov	r2, r3
    2d40:	4618      	mov	r0, r3
    2d42:	f012 fad9 	bl	152f8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    2d46:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    2d4a:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    2d4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
		radio_pkt_rx_set(_radio.packet_rx
    2d52:	3008      	adds	r0, #8
    2d54:	f012 fa52 	bl	151fc <radio_pkt_rx_set>
		radio_rssi_measure();
    2d58:	f012 fae6 	bl	15328 <radio_rssi_measure>
		_radio.state = STATE_RX;
    2d5c:	2301      	movs	r3, #1
    2d5e:	7563      	strb	r3, [r4, #21]
		radio_rx_enable();
    2d60:	f012 fa58 	bl	15214 <radio_rx_enable>
    2d64:	f7fe be02 	b.w	196c <isr+0xc4>
		radio_filter_disable();
    2d68:	f012 fb1c 	bl	153a4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    2d6c:	7d63      	ldrb	r3, [r4, #21]
    2d6e:	2b05      	cmp	r3, #5
    2d70:	d106      	bne.n	2d80 <isr+0x14d8>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    2d72:	2300      	movs	r3, #0
    2d74:	9300      	str	r3, [sp, #0]
    2d76:	2204      	movs	r2, #4
    2d78:	4619      	mov	r1, r3
    2d7a:	4618      	mov	r0, r3
    2d7c:	f00f f9a2 	bl	120c4 <ticker_stop>
	_radio.role = ROLE_NONE;
    2d80:	2500      	movs	r5, #0
    2d82:	7525      	strb	r5, [r4, #20]
	_radio.state = STATE_NONE;
    2d84:	7565      	strb	r5, [r4, #21]
	_radio.ticker_id_event = 0U;
    2d86:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    2d88:	f012 fbc2 	bl	15510 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    2d8c:	462a      	mov	r2, r5
    2d8e:	4629      	mov	r1, r5
    2d90:	4628      	mov	r0, r5
    2d92:	4b17      	ldr	r3, [pc, #92]	; (2df0 <isr+0x1548>)
    2d94:	f00e fbfc 	bl	11590 <mayfly_enqueue>
	LL_ASSERT(!retval);
    2d98:	4605      	mov	r5, r0
    2d9a:	2800      	cmp	r0, #0
    2d9c:	f47e add5 	bne.w	194a <isr+0xa2>
	clock_control_off(_radio.hf_clock, NULL);
    2da0:	6820      	ldr	r0, [r4, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    2da2:	6843      	ldr	r3, [r0, #4]
    2da4:	4629      	mov	r1, r5
    2da6:	685b      	ldr	r3, [r3, #4]
    2da8:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    2daa:	2201      	movs	r2, #1
    2dac:	4611      	mov	r1, r2
    2dae:	4628      	mov	r0, r5
    2db0:	f00e fbc6 	bl	11540 <mayfly_enable>
    2db4:	f7fe bdfe 	b.w	19b4 <isr+0x10c>
	if (_radio.conn_curr == 0) {
    2db8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2dbc:	2800      	cmp	r0, #0
    2dbe:	d0df      	beq.n	2d80 <isr+0x14d8>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    2dc0:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    2dc4:	b1b1      	cbz	r1, 2df4 <isr+0x154c>
    2dc6:	7d23      	ldrb	r3, [r4, #20]
    2dc8:	2b03      	cmp	r3, #3
    2dca:	d003      	beq.n	2dd4 <isr+0x152c>
    2dcc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    2dd0:	07dd      	lsls	r5, r3, #31
    2dd2:	d50f      	bpl.n	2df4 <isr+0x154c>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    2dd4:	f010 fd62 	bl	1389c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    2dd8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2ddc:	f010 fc54 	bl	13688 <connection_release>
			_radio.conn_curr = NULL;
    2de0:	2300      	movs	r3, #0
    2de2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
			return;
    2de6:	e7cb      	b.n	2d80 <isr+0x14d8>
    2de8:	20001230 	.word	0x20001230
    2dec:	00013209 	.word	0x00013209
    2df0:	20009088 	.word	0x20009088
	latency_event = _radio.conn_curr->latency_event;
    2df4:	f8b0 902a 	ldrh.w	r9, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    2df8:	f894 5118 	ldrb.w	r5, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    2dfc:	f109 0701 	add.w	r7, r9, #1
    2e00:	b2bf      	uxth	r7, r7
	if (_radio.packet_counter &&
    2e02:	2d00      	cmp	r5, #0
    2e04:	d070      	beq.n	2ee8 <isr+0x1640>
		if (_radio.role == ROLE_SLAVE) {
    2e06:	7d23      	ldrb	r3, [r4, #20]
    2e08:	2b03      	cmp	r3, #3
    2e0a:	d161      	bne.n	2ed0 <isr+0x1628>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    2e0c:	f012 fbb8 	bl	15580 <radio_tmr_aa_restore>
    2e10:	4683      	mov	fp, r0
						     radio_tmr_ready_get();
    2e12:	f012 fbbb 	bl	1558c <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    2e16:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    2e1a:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 2fc4 <isr+0x171c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    2e1e:	ebab 0100 	sub.w	r1, fp, r0
						     radio_tmr_ready_get();
    2e22:	4680      	mov	r8, r0
			window_widening_event_us =
    2e24:	6ca8      	ldr	r0, [r5, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    2e26:	f100 0358 	add.w	r3, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    2e2a:	4299      	cmp	r1, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    2e2c:	930a      	str	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    2e2e:	a363      	add	r3, pc, #396	; (adr r3, 2fbc <isr+0x1714>)
    2e30:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    2e34:	d83e      	bhi.n	2eb4 <isr+0x160c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    2e36:	fba0 010a 	umull	r0, r1, r0, sl
    2e3a:	f7fd feff 	bl	c3c <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    2e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2e40:	4498      	add	r8, r3
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    2e42:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    2e46:	eba8 000b 	sub.w	r0, r8, fp
    2e4a:	a35c      	add	r3, pc, #368	; (adr r3, 2fbc <isr+0x1714>)
    2e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e50:	fba0 010a 	umull	r0, r1, r0, sl
    2e54:	f7fd fef2 	bl	c3c <__aeabi_uldivmod>
    2e58:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			if (_radio.conn_curr->pkt_tx_head) {
    2e5c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
			_radio.conn_curr->slave.window_widening_event_us = 0U;
    2e60:	2200      	movs	r2, #0
    2e62:	64aa      	str	r2, [r5, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0U;
    2e64:	652a      	str	r2, [r5, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    2e66:	b369      	cbz	r1, 2ec4 <isr+0x161c>
				if (pdu_data_tx->len ||
    2e68:	7949      	ldrb	r1, [r1, #5]
    2e6a:	b911      	cbnz	r1, 2e72 <isr+0x15ca>
    2e6c:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
    2e70:	b101      	cbz	r1, 2e74 <isr+0x15cc>
				_radio.conn_curr->latency_event =
    2e72:	856a      	strh	r2, [r5, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0U;
    2e74:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    2e78:	2100      	movs	r1, #0
    2e7a:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    2e7c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2e80:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    2e82:	b1aa      	cbz	r2, 2eb0 <isr+0x1608>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    2e84:	4297      	cmp	r7, r2
    2e86:	f080 8085 	bcs.w	2f94 <isr+0x16ec>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    2e8a:	1bd2      	subs	r2, r2, r7
    2e8c:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0U;
    2e8e:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    2e90:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    2e92:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0U;
    2e94:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    2e96:	d97f      	bls.n	2f98 <isr+0x16f0>
			else if (_radio.role == ROLE_SLAVE) {
    2e98:	7d22      	ldrb	r2, [r4, #20]
    2e9a:	2a03      	cmp	r2, #3
    2e9c:	d108      	bne.n	2eb0 <isr+0x1608>
				if (latency_event != 0) {
    2e9e:	f1b9 0f00 	cmp.w	r9, #0
    2ea2:	d179      	bne.n	2f98 <isr+0x16f0>
					force = _radio.conn_curr->slave.force & 0x01;
    2ea4:	6d41      	ldr	r1, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    2ea6:	084a      	lsrs	r2, r1, #1
					if (force) {
    2ea8:	f011 0101 	ands.w	r1, r1, #1
    2eac:	d136      	bne.n	2f1c <isr+0x1674>
					_radio.conn_curr->slave.force >>= 1;
    2eae:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0U;
    2eb0:	2100      	movs	r1, #0
    2eb2:	e036      	b.n	2f22 <isr+0x167a>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    2eb4:	fba1 010a 	umull	r0, r1, r1, sl
    2eb8:	f7fd fec0 	bl	c3c <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    2ebc:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    2ebe:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    2ec2:	e7cb      	b.n	2e5c <isr+0x15b4>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    2ec4:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    2ec8:	07d2      	lsls	r2, r2, #31
    2eca:	d5d3      	bpl.n	2e74 <isr+0x15cc>
				_radio.conn_curr->latency_event =
    2ecc:	8cea      	ldrh	r2, [r5, #38]	; 0x26
    2ece:	e7d0      	b.n	2e72 <isr+0x15ca>
		} else if (reason_peer) {
    2ed0:	b141      	cbz	r1, 2ee4 <isr+0x163c>
			_radio.conn_curr->master.terminate_ack = 1U;
    2ed2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    2ed6:	f043 0301 	orr.w	r3, r3, #1
    2eda:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0U;
    2ede:	2300      	movs	r3, #0
	ticks_drift_plus = 0U;
    2ee0:	461e      	mov	r6, r3
    2ee2:	e7c7      	b.n	2e74 <isr+0x15cc>
	ticks_drift_minus = 0U;
    2ee4:	460b      	mov	r3, r1
    2ee6:	e7fb      	b.n	2ee0 <isr+0x1638>
	else if (_radio.conn_curr->connect_expire) {
    2ee8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    2eea:	b183      	cbz	r3, 2f0e <isr+0x1666>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    2eec:	429f      	cmp	r7, r3
    2eee:	d204      	bcs.n	2efa <isr+0x1652>
			_radio.conn_curr->connect_expire -= elapsed_event;
    2ef0:	1bdb      	subs	r3, r3, r7
    2ef2:	8583      	strh	r3, [r0, #44]	; 0x2c
	ticks_drift_minus = 0U;
    2ef4:	462b      	mov	r3, r5
	ticks_drift_plus = 0U;
    2ef6:	461e      	mov	r6, r3
    2ef8:	e7c0      	b.n	2e7c <isr+0x15d4>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    2efa:	213e      	movs	r1, #62	; 0x3e
    2efc:	f010 fcce 	bl	1389c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    2f00:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    2f04:	f010 fbc0 	bl	13688 <connection_release>
			_radio.conn_curr = NULL;
    2f08:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
			return;
    2f0c:	e738      	b.n	2d80 <isr+0x14d8>
		if (!_radio.conn_curr->supervision_expire) {
    2f0e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    2f10:	2900      	cmp	r1, #0
    2f12:	d1f0      	bne.n	2ef6 <isr+0x164e>
			_radio.conn_curr->supervision_expire =
    2f14:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    2f16:	8603      	strh	r3, [r0, #48]	; 0x30
	ticks_drift_minus = 0U;
    2f18:	460b      	mov	r3, r1
    2f1a:	e7ec      	b.n	2ef6 <isr+0x164e>
						_radio.conn_curr->slave.force |=
    2f1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    2f20:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    2f22:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    2f24:	b11a      	cbz	r2, 2f2e <isr+0x1686>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    2f26:	4297      	cmp	r7, r2
    2f28:	d238      	bcs.n	2f9c <isr+0x16f4>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    2f2a:	1bd7      	subs	r7, r2, r7
    2f2c:	8687      	strh	r7, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    2f2e:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
    2f32:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    2f36:	4295      	cmp	r5, r2
    2f38:	d006      	beq.n	2f48 <isr+0x16a0>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    2f3a:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    2f3e:	3a01      	subs	r2, #1
    2f40:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0U;
    2f42:	bf9c      	itt	ls
    2f44:	2200      	movls	r2, #0
    2f46:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    2f48:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
    2f4a:	b909      	cbnz	r1, 2f50 <isr+0x16a8>
    2f4c:	45a9      	cmp	r9, r5
    2f4e:	d027      	beq.n	2fa0 <isr+0x16f8>
		lazy = _radio.conn_curr->latency_event + 1;
    2f50:	3501      	adds	r5, #1
    2f52:	b2ad      	uxth	r5, r5
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    2f54:	ea56 0203 	orrs.w	r2, r6, r3
    2f58:	d103      	bne.n	2f62 <isr+0x16ba>
    2f5a:	b915      	cbnz	r5, 2f62 <isr+0x16ba>
	    (lazy != 0) || (force != 0)) {
    2f5c:	2900      	cmp	r1, #0
    2f5e:	f43f af0f 	beq.w	2d80 <isr+0x14d8>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    2f62:	f890 2020 	ldrb.w	r2, [r0, #32]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2f66:	9300      	str	r3, [sp, #0]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    2f68:	3207      	adds	r2, #7
    2f6a:	b2d7      	uxtb	r7, r2
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2f6c:	4a12      	ldr	r2, [pc, #72]	; (2fb8 <isr+0x1710>)
				      (void *)(u32_t)ticker_id);
    2f6e:	9706      	str	r7, [sp, #24]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    2f70:	e9cd 1204 	strd	r1, r2, [sp, #16]
    2f74:	2100      	movs	r1, #0
    2f76:	4633      	mov	r3, r6
    2f78:	9503      	str	r5, [sp, #12]
    2f7a:	e9cd 1101 	strd	r1, r1, [sp, #4]
    2f7e:	463a      	mov	r2, r7
    2f80:	4608      	mov	r0, r1
    2f82:	f00f f857 	bl	12034 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2f86:	f030 0302 	bics.w	r3, r0, #2
    2f8a:	f43f aef9 	beq.w	2d80 <isr+0x14d8>
    2f8e:	7ca3      	ldrb	r3, [r4, #18]
    2f90:	429f      	cmp	r7, r3
    2f92:	e6ca      	b.n	2d2a <isr+0x1482>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    2f94:	2108      	movs	r1, #8
    2f96:	e71d      	b.n	2dd4 <isr+0x152c>
				force = 1U;
    2f98:	2101      	movs	r1, #1
    2f9a:	e7c2      	b.n	2f22 <isr+0x167a>
			terminate_ind_rx_enqueue(_radio.conn_curr,
    2f9c:	2122      	movs	r1, #34	; 0x22
    2f9e:	e719      	b.n	2dd4 <isr+0x152c>
	lazy = 0U;
    2fa0:	460d      	mov	r5, r1
    2fa2:	e7d7      	b.n	2f54 <isr+0x16ac>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    2fa4:	3f04      	subs	r7, #4
    2fa6:	b2ff      	uxtb	r7, r7
    2fa8:	2f01      	cmp	r7, #1
    2faa:	f63e acce 	bhi.w	194a <isr+0xa2>
		_radio.state = STATE_NONE;
    2fae:	2300      	movs	r3, #0
    2fb0:	7563      	strb	r3, [r4, #21]
		return;
    2fb2:	f7fe bcff 	b.w	19b4 <isr+0x10c>
    2fb6:	bf00      	nop
    2fb8:	00013221 	.word	0x00013221
    2fbc:	1afd498d 	.word	0x1afd498d
    2fc0:	00000007 	.word	0x00000007
    2fc4:	3b9aca00 	.word	0x3b9aca00

00002fc8 <radio_adv_enable>:
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    2fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_adv *pdu_adv;
	u32_t slot_us;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    2fcc:	4fa0      	ldr	r7, [pc, #640]	; (3250 <radio_adv_enable+0x288>)
{
    2fce:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    2fd0:	2302      	movs	r3, #2
    2fd2:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    2fd4:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
{
    2fd8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    2fdc:	2b00      	cmp	r3, #0
{
    2fde:	4680      	mov	r8, r0
    2fe0:	4692      	mov	sl, r2
    2fe2:	463e      	mov	r6, r7
	if (_radio.advertiser.is_enabled) {
    2fe4:	da01      	bge.n	2fea <radio_adv_enable+0x22>
			    &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
    2fe6:	250c      	movs	r5, #12
    2fe8:	e023      	b.n	3032 <radio_adv_enable+0x6a>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    2fea:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
    2fee:	232a      	movs	r3, #42	; 0x2a
    2ff0:	f04f 0927 	mov.w	r9, #39	; 0x27
    2ff4:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    2ff8:	f817 3009 	ldrb.w	r3, [r7, r9]
    2ffc:	f013 0f0e 	tst.w	r3, #14
    3000:	f040 80e2 	bne.w	31c8 <radio_adv_enable+0x200>
		if (_radio.advertiser.conn) {
    3004:	f8d7 50cc 	ldr.w	r5, [r7, #204]	; 0xcc
    3008:	2d00      	cmp	r5, #0
    300a:	d1ec      	bne.n	2fe6 <radio_adv_enable+0x1e>
		conn = mem_acquire(&_radio.conn_free);
    300c:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    3010:	f01b faf0 	bl	1e5f4 <mem_acquire>
		if (!conn) {
    3014:	4604      	mov	r4, r0
    3016:	2800      	cmp	r0, #0
    3018:	f000 8114 	beq.w	3244 <radio_adv_enable+0x27c>
		link = mem_acquire(&_radio.link_rx_free);
    301c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
    3020:	f01b fae8 	bl	1e5f4 <mem_acquire>
		if (!link) {
    3024:	b948      	cbnz	r0, 303a <radio_adv_enable+0x72>
			mem_release(conn, &_radio.conn_free);
    3026:	f507 7186 	add.w	r1, r7, #268	; 0x10c
    302a:	4620      	mov	r0, r4
    302c:	f01b fafb 	bl	1e626 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3030:	2507      	movs	r5, #7
}
    3032:	4628      	mov	r0, r5
    3034:	b00f      	add	sp, #60	; 0x3c
    3036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->handle = 0xFFFF;
    303a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    303e:	6223      	str	r3, [r4, #32]
		conn->data_chan_sel = 0U;
    3040:	7f63      	ldrb	r3, [r4, #29]
		conn->data_chan_use = 0U;
    3042:	77e5      	strb	r5, [r4, #31]
		conn->data_chan_sel = 0U;
    3044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3048:	f063 037f 	orn	r3, r3, #127	; 0x7f
    304c:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6U;
    304e:	2306      	movs	r3, #6
    3050:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->slave.latency_enabled = 0U;
    3052:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		conn->latency_prepare = 0U;
    3056:	62a5      	str	r5, [r4, #40]	; 0x28
		conn->slave.latency_enabled = 0U;
    3058:	f023 0323 	bic.w	r3, r3, #35	; 0x23
    305c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		conn->llcp_features = LL_FEAT;
    3060:	f44f 73c7 	mov.w	r3, #398	; 0x18e
    3064:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		conn->llcp_version.tx = 0U;
    3068:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
		conn->supervision_expire = 0U;
    306c:	8625      	strh	r5, [r4, #48]	; 0x30
		conn->llcp_version.tx = 0U;
    306e:	f023 0303 	bic.w	r3, r3, #3
    3072:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		conn->llcp_conn_param.disabled = 0U;
    3076:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		conn->procedure_expire = 0U;
    307a:	86a5      	strh	r5, [r4, #52]	; 0x34
		conn->llcp_conn_param.disabled = 0U;
    307c:	f365 1304 	bfi	r3, r5, #4, #1
		conn->slave.window_widening_event_us = 0U;
    3080:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
		conn->slave.ticks_to_offset = 0U;
    3084:	65a5      	str	r5, [r4, #88]	; 0x58
		conn->llcp_req = 0U;
    3086:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
		conn->llcp_terminate.req = 0U;
    308a:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
		conn->llcp_terminate.reason_peer = 0U;
    308e:	f884 509b 	strb.w	r5, [r4, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.link = link;
    3092:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
		conn->llcp_conn_param.req = 0U;
    3096:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0U;
    309a:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		conn->sn = 0U;
    309e:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
		conn->pkt_tx_ctrl = NULL;
    30a2:	e9c4 5545 	strd	r5, r5, [r4, #276]	; 0x114
		conn->pkt_tx_data = NULL;
    30a6:	e9c4 5547 	strd	r5, r5, [r4, #284]	; 0x11c
		conn->pkt_tx_last = NULL;
    30aa:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
		conn->packet_tx_head_len = 0U;
    30ae:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128
		k32src_wait();
    30b2:	f010 feab 	bl	13e0c <k32src_wait>
		_radio.advertiser.conn = conn;
    30b6:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    30ba:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    30be:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    30c2:	f362 0302 	bfi	r3, r2, #0, #3
	_radio.advertiser.filter_policy = filter_policy;
    30c6:	f36a 03c4 	bfi	r3, sl, #3, #2
    30ca:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    30ce:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    30d2:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    30d4:	2327      	movs	r3, #39	; 0x27
    30d6:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    30d8:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    30da:	2300      	movs	r3, #0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    30dc:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
	_radio.advertiser.hdr.ticks_preempt_to_start =
    30e0:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    30e2:	f01b faed 	bl	1e6c0 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    30e6:	f817 3009 	ldrb.w	r3, [r7, r9]
    30ea:	f003 030f 	and.w	r3, r3, #15
    30ee:	2b01      	cmp	r3, #1
    30f0:	d16c      	bne.n	31cc <radio_adv_enable+0x204>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    30f2:	f44f 7327 	mov.w	r3, #668	; 0x29c
    30f6:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    30f8:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    30fc:	4955      	ldr	r1, [pc, #340]	; (3254 <radio_adv_enable+0x28c>)
    30fe:	a352      	add	r3, pc, #328	; (adr r3, 3248 <radio_adv_enable+0x280>)
    3100:	e9d3 2300 	ldrd	r2, r3, [r3]
    3104:	fba0 0101 	umull	r0, r1, r0, r1
    3108:	f7fd fd98 	bl	c3c <__aeabi_uldivmod>
	ticks_slot_offset =
    310c:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
    3110:	429a      	cmp	r2, r3
    3112:	bf38      	it	cc
    3114:	461a      	movcc	r2, r3
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    3116:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    3118:	4693      	mov	fp, r2
	ticks_anchor = ticker_ticks_now_get();
    311a:	f01b fb8b 	bl	1e834 <ticker_ticks_now_get>
    311e:	4682      	mov	sl, r0
	_radio.advertiser.is_hdcd = !interval &&
    3120:	f1b8 0f00 	cmp.w	r8, #0
    3124:	d15a      	bne.n	31dc <radio_adv_enable+0x214>
				    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    3126:	f817 3009 	ldrb.w	r3, [r7, r9]
	_radio.advertiser.is_hdcd = !interval &&
    312a:	f003 030f 	and.w	r3, r3, #15
    312e:	1e5a      	subs	r2, r3, #1
    3130:	4253      	negs	r3, r2
    3132:	4153      	adcs	r3, r2
    3134:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
    3138:	4f47      	ldr	r7, [pc, #284]	; (3258 <radio_adv_enable+0x290>)
    313a:	4a48      	ldr	r2, [pc, #288]	; (325c <radio_adv_enable+0x294>)
    313c:	f363 1586 	bfi	r5, r3, #6, #1
    3140:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3142:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    3146:	f10d 0934 	add.w	r9, sp, #52	; 0x34
    314a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    314e:	445b      	add	r3, fp
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    3150:	e9cd 7907 	strd	r7, r9, [sp, #28]
	if (_radio.advertiser.is_hdcd) {
    3154:	d04a      	beq.n	31ec <radio_adv_enable+0x224>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    3156:	2000      	movs	r0, #0
    3158:	e9cd 2005 	strd	r2, r0, [sp, #20]
    315c:	e9cd 0303 	strd	r0, r3, [sp, #12]
    3160:	e9cd 3001 	strd	r3, r0, [sp, #4]
    3164:	9000      	str	r0, [sp, #0]
    3166:	4653      	mov	r3, sl
    3168:	2205      	movs	r2, #5
    316a:	2103      	movs	r1, #3
    316c:	f00e ff18 	bl	11fa0 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    3170:	2802      	cmp	r0, #2
    3172:	d037      	beq.n	31e4 <radio_adv_enable+0x21c>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    3174:	980d      	ldr	r0, [sp, #52]	; 0x34
    3176:	2800      	cmp	r0, #0
    3178:	d157      	bne.n	322a <radio_adv_enable+0x262>
		ret_cb = TICKER_STATUS_BUSY;
    317a:	2302      	movs	r3, #2
    317c:	930d      	str	r3, [sp, #52]	; 0x34
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    317e:	4b38      	ldr	r3, [pc, #224]	; (3260 <radio_adv_enable+0x298>)
    3180:	9006      	str	r0, [sp, #24]
    3182:	e9cd 7907 	strd	r7, r9, [sp, #28]
    3186:	e9cd 0002 	strd	r0, r0, [sp, #8]
    318a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    318e:	2203      	movs	r2, #3
    3190:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    3194:	9300      	str	r3, [sp, #0]
    3196:	9001      	str	r0, [sp, #4]
    3198:	4653      	mov	r3, sl
    319a:	4611      	mov	r1, r2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    319c:	f00e ff00 	bl	11fa0 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    31a0:	2802      	cmp	r0, #2
    31a2:	d03e      	beq.n	3222 <radio_adv_enable+0x25a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    31a4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    31a6:	2d00      	cmp	r5, #0
    31a8:	d13f      	bne.n	322a <radio_adv_enable+0x262>
		_radio.advertiser.is_enabled = 1U;
    31aa:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    31ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    31b2:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    31b6:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    31ba:	07db      	lsls	r3, r3, #31
    31bc:	f53f af39 	bmi.w	3032 <radio_adv_enable+0x6a>
			ll_adv_scan_state_cb(BIT(0));
    31c0:	2001      	movs	r0, #1
    31c2:	f01b fdd5 	bl	1ed70 <ll_adv_scan_state_cb>
    31c6:	e734      	b.n	3032 <radio_adv_enable+0x6a>
		conn = NULL;
    31c8:	2400      	movs	r4, #0
    31ca:	e776      	b.n	30ba <radio_adv_enable+0xf2>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    31cc:	2b02      	cmp	r3, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    31ce:	bf0c      	ite	eq
    31d0:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    31d4:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    31d8:	4358      	muls	r0, r3
    31da:	e78f      	b.n	30fc <radio_adv_enable+0x134>
	_radio.advertiser.is_hdcd = !interval &&
    31dc:	2300      	movs	r3, #0
    31de:	e7a9      	b.n	3134 <radio_adv_enable+0x16c>
				cpu_sleep();
    31e0:	f01b fbd9 	bl	1e996 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    31e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    31e6:	2b02      	cmp	r3, #2
    31e8:	d0fa      	beq.n	31e0 <radio_adv_enable+0x218>
    31ea:	e7c3      	b.n	3174 <radio_adv_enable+0x1ac>
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    31ec:	481d      	ldr	r0, [pc, #116]	; (3264 <radio_adv_enable+0x29c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    31ee:	9502      	str	r5, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    31f0:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    31f4:	e9cd 5303 	strd	r5, r3, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    31f8:	fba8 0100 	umull	r0, r1, r8, r0
    31fc:	2391      	movs	r3, #145	; 0x91
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    31fe:	e9cd 2505 	strd	r2, r5, [sp, #20]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    3202:	fb03 1108 	mla	r1, r3, r8, r1
    3206:	a310      	add	r3, pc, #64	; (adr r3, 3248 <radio_adv_enable+0x280>)
    3208:	e9d3 2300 	ldrd	r2, r3, [r3]
    320c:	f7fd fd16 	bl	c3c <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    3210:	4653      	mov	r3, sl
    3212:	e9cd 5000 	strd	r5, r0, [sp]
    3216:	2205      	movs	r2, #5
    3218:	2103      	movs	r1, #3
    321a:	4628      	mov	r0, r5
    321c:	e7be      	b.n	319c <radio_adv_enable+0x1d4>
			cpu_sleep();
    321e:	f01b fbba 	bl	1e996 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    3222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3224:	2b02      	cmp	r3, #2
    3226:	d0fa      	beq.n	321e <radio_adv_enable+0x256>
    3228:	e7bc      	b.n	31a4 <radio_adv_enable+0x1dc>
	if (conn) {
    322a:	2c00      	cmp	r4, #0
    322c:	f43f aedb 	beq.w	2fe6 <radio_adv_enable+0x1e>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.link,
    3230:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    3234:	490c      	ldr	r1, [pc, #48]	; (3268 <radio_adv_enable+0x2a0>)
    3236:	f01b f9f6 	bl	1e626 <mem_release>
		mem_release(conn, &_radio.conn_free);
    323a:	490c      	ldr	r1, [pc, #48]	; (326c <radio_adv_enable+0x2a4>)
    323c:	4620      	mov	r0, r4
    323e:	f01b f9f2 	bl	1e626 <mem_release>
    3242:	e6d0      	b.n	2fe6 <radio_adv_enable+0x1e>
			return BT_HCI_ERR_CONN_LIMIT_EXCEEDED;
    3244:	2509      	movs	r5, #9
    3246:	e6f4      	b.n	3032 <radio_adv_enable+0x6a>
    3248:	1afd498d 	.word	0x1afd498d
    324c:	00000007 	.word	0x00000007
    3250:	20001230 	.word	0x20001230
    3254:	3b9aca00 	.word	0x3b9aca00
    3258:	0001e99f 	.word	0x0001e99f
    325c:	00013c15 	.word	0x00013c15
    3260:	00013c85 	.word	0x00013c85
    3264:	84e72a00 	.word	0x84e72a00
    3268:	20001370 	.word	0x20001370
    326c:	2000133c 	.word	0x2000133c

00003270 <radio_scan_enable>:
}

u32_t radio_scan_enable(u8_t type, u8_t init_addr_type, u8_t *init_addr,
			u16_t interval, u16_t window, u8_t filter_policy,
			u8_t rpa_gen, u8_t rl_idx)
{
    3270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ticks_interval;
	u32_t ticks_anchor;
	u32_t us_offset;
	u32_t ret;

	if (_radio.scanner.is_enabled) {
    3274:	4c50      	ldr	r4, [pc, #320]	; (33b8 <radio_scan_enable+0x148>)
    3276:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
    327a:	b08c      	sub	sp, #48	; 0x30
    327c:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
    327e:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3282:	f04f 0302 	mov.w	r3, #2
{
    3286:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3288:	930b      	str	r3, [sp, #44]	; 0x2c
{
    328a:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    328c:	d004      	beq.n	3298 <radio_scan_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
    328e:	250c      	movs	r5, #12
	if (!_radio.advertiser.is_enabled) {
		ll_adv_scan_state_cb(BIT(1));
	}

	return 0;
}
    3290:	4628      	mov	r0, r5
    3292:	b00c      	add	sp, #48	; 0x30
    3294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    3298:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    329c:	f360 0300 	bfi	r3, r0, #0, #1
	_radio.scanner.init_addr_type = init_addr_type;
    32a0:	f366 1304 	bfi	r3, r6, #4, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    32a4:	2206      	movs	r2, #6
    32a6:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
	_radio.scanner.init_addr_type = init_addr_type;
    32aa:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    32ae:	4e43      	ldr	r6, [pc, #268]	; (33bc <radio_scan_enable+0x14c>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    32b0:	f016 fefa 	bl	1a0a8 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    32b4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
    32b8:	f04f 0a91 	mov.w	sl, #145	; 0x91
    32bc:	fba2 0106 	umull	r0, r1, r2, r6
    32c0:	fb0a 1102 	mla	r1, sl, r2, r1
    32c4:	a33a      	add	r3, pc, #232	; (adr r3, 33b0 <radio_scan_enable+0x140>)
    32c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    32ca:	f7fd fcb7 	bl	c3c <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    32ce:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    32d2:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
		_radio.ticks_active_to_start;
    32d6:	f8d4 917c 	ldr.w	r9, [r4, #380]	; 0x17c
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    32da:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
    32de:	f362 0342 	bfi	r3, r2, #1, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    32e2:	b2ba      	uxth	r2, r7
    32e4:	fba2 6706 	umull	r6, r7, r2, r6
    32e8:	fb0a 7702 	mla	r7, sl, r2, r7
	_radio.scanner.filter_policy = filter_policy;
    32ec:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
    32f0:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
    32f2:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_xtal_to_start =
    32f6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_active_to_start =
    32fa:	f8c4 90d4 	str.w	r9, [r4, #212]	; 0xd4
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    32fe:	a32c      	add	r3, pc, #176	; (adr r3, 33b0 <radio_scan_enable+0x140>)
    3300:	e9d3 2300 	ldrd	r2, r3, [r3]
	_radio.scanner.hdr.ticks_preempt_to_start =
    3304:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    3308:	4630      	mov	r0, r6
    330a:	4639      	mov	r1, r7
    330c:	f7fd fc96 	bl	c3c <__aeabi_uldivmod>
	    (ticks_interval -
    3310:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
    3314:	4598      	cmp	r8, r3
    3316:	bf94      	ite	ls
    3318:	f8c4 80dc 	strls.w	r8, [r4, #220]	; 0xdc
    331c:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    3320:	4682      	mov	sl, r0
	ticks_anchor = ticker_ticks_now_get();
    3322:	f01b fa87 	bl	1e834 <ticker_ticks_now_get>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    3326:	ab0b      	add	r3, sp, #44	; 0x2c
    3328:	9308      	str	r3, [sp, #32]
    332a:	4b25      	ldr	r3, [pc, #148]	; (33c0 <radio_scan_enable+0x150>)
    332c:	e9cd 5306 	strd	r5, r3, [sp, #24]
    3330:	4b24      	ldr	r3, [pc, #144]	; (33c4 <radio_scan_enable+0x154>)
    3332:	9305      	str	r3, [sp, #20]
    3334:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    3338:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    333c:	bf2c      	ite	cs
    333e:	444b      	addcs	r3, r9
    3340:	3327      	addcc	r3, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
    3342:	4680      	mov	r8, r0
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    3344:	e9cd 5303 	strd	r5, r3, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    3348:	4630      	mov	r0, r6
    334a:	a319      	add	r3, pc, #100	; (adr r3, 33b0 <radio_scan_enable+0x140>)
    334c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3350:	4639      	mov	r1, r7
    3352:	f7fd fc73 	bl	c3c <__aeabi_uldivmod>
    3356:	4610      	mov	r0, r2
    3358:	4619      	mov	r1, r3
    335a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    335e:	2300      	movs	r3, #0
    3360:	f7fd fc6c 	bl	c3c <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    3364:	9500      	str	r5, [sp, #0]
    3366:	e9cd a001 	strd	sl, r0, [sp, #4]
    336a:	4643      	mov	r3, r8
    336c:	2206      	movs	r2, #6
    336e:	2103      	movs	r1, #3
    3370:	4628      	mov	r0, r5
    3372:	f00e fe15 	bl	11fa0 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    3376:	2802      	cmp	r0, #2
    3378:	d013      	beq.n	33a2 <radio_scan_enable+0x132>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    337a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    337c:	2d00      	cmp	r5, #0
    337e:	d186      	bne.n	328e <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1U;
    3380:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    3384:	f043 0301 	orr.w	r3, r3, #1
    3388:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
    338c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    3390:	2b00      	cmp	r3, #0
    3392:	f6ff af7d 	blt.w	3290 <radio_scan_enable+0x20>
		ll_adv_scan_state_cb(BIT(1));
    3396:	2002      	movs	r0, #2
    3398:	f01b fcea 	bl	1ed70 <ll_adv_scan_state_cb>
    339c:	e778      	b.n	3290 <radio_scan_enable+0x20>
			cpu_sleep();
    339e:	f01b fafa 	bl	1e996 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    33a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    33a4:	2b02      	cmp	r3, #2
    33a6:	d0fa      	beq.n	339e <radio_scan_enable+0x12e>
    33a8:	e7e7      	b.n	337a <radio_scan_enable+0x10a>
    33aa:	bf00      	nop
    33ac:	f3af 8000 	nop.w
    33b0:	1afd498d 	.word	0x1afd498d
    33b4:	00000007 	.word	0x00000007
    33b8:	20001230 	.word	0x20001230
    33bc:	84e72a00 	.word	0x84e72a00
    33c0:	0001e99f 	.word	0x0001e99f
    33c4:	00013c4d 	.word	0x00013c4d

000033c8 <erase_op>:
}

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
    33c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    33cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
    33d0:	4e25      	ldr	r6, [pc, #148]	; (3468 <erase_op+0xa0>)
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 0U;

	if (e_ctx->enable_time_limit) {
    33d2:	7b05      	ldrb	r5, [r0, #12]
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
    33d4:	f8d6 9504 	ldr.w	r9, [r6, #1284]	; 0x504
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    33d8:	f8d2 8010 	ldr.w	r8, [r2, #16]
{
    33dc:	4604      	mov	r4, r0
	if (e_ctx->enable_time_limit) {
    33de:	b115      	cbz	r5, 33e6 <erase_op+0x1e>
		ticks_begin = ticker_ticks_now_get();
    33e0:	f01b fa28 	bl	1e834 <ticker_ticks_now_get>
    33e4:	4605      	mov	r5, r0
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* Erase uses a specific configuration register */
	NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een << NVMC_CONFIG_WEN_Pos;
    33e6:	2302      	movs	r3, #2
    33e8:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504
	nvmc_wait_ready();
    33ec:	f012 fc16 	bl	15c1c <nvmc_wait_ready>
		return FLASH_OP_DONE;
	}
#endif

	do {
		NRF_NVMC->ERASEPAGE = e_ctx->flash_addr;
    33f0:	f8df b074 	ldr.w	fp, [pc, #116]	; 3468 <erase_op+0xa0>
		if (e_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    33f4:	f8df a074 	ldr.w	sl, [pc, #116]	; 346c <erase_op+0xa4>
	u32_t i = 0U;
    33f8:	2700      	movs	r7, #0
		NRF_NVMC->ERASEPAGE = e_ctx->flash_addr;
    33fa:	6863      	ldr	r3, [r4, #4]
    33fc:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
		nvmc_wait_ready();
    3400:	f012 fc0c 	bl	15c1c <nvmc_wait_ready>
		e_ctx->len -= pg_size;
    3404:	68a3      	ldr	r3, [r4, #8]
    3406:	eba3 0308 	sub.w	r3, r3, r8
    340a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    340c:	6863      	ldr	r3, [r4, #4]
    340e:	4443      	add	r3, r8
    3410:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
    3412:	7b23      	ldrb	r3, [r4, #12]
		i++;
    3414:	3701      	adds	r7, #1
		if (e_ctx->enable_time_limit) {
    3416:	b973      	cbnz	r3, 3436 <erase_op+0x6e>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    3418:	68a3      	ldr	r3, [r4, #8]
    341a:	2b00      	cmp	r3, #0
    341c:	d1ed      	bne.n	33fa <erase_op+0x32>

	NRF_NVMC->CONFIG = prev_nvmc_cfg;
    341e:	4b12      	ldr	r3, [pc, #72]	; (3468 <erase_op+0xa0>)
    3420:	f8c3 9504 	str.w	r9, [r3, #1284]	; 0x504
	nvmc_wait_ready();
    3424:	f012 fbfa 	bl	15c1c <nvmc_wait_ready>

	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    3428:	68a0      	ldr	r0, [r4, #8]
    342a:	3000      	adds	r0, #0
    342c:	bf18      	it	ne
    342e:	2001      	movne	r0, #1
}
    3430:	4240      	negs	r0, r0
    3432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    3436:	f01b f9fd 	bl	1e834 <ticker_ticks_now_get>
    343a:	4629      	mov	r1, r5
    343c:	f01b f9fc 	bl	1e838 <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    3440:	fbb0 f6f7 	udiv	r6, r0, r7
    3444:	4406      	add	r6, r0
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    3446:	6960      	ldr	r0, [r4, #20]
    3448:	a305      	add	r3, pc, #20	; (adr r3, 3460 <erase_op+0x98>)
    344a:	e9d3 2300 	ldrd	r2, r3, [r3]
    344e:	fba0 010a 	umull	r0, r1, r0, sl
    3452:	f7fd fbf3 	bl	c3c <__aeabi_uldivmod>
    3456:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    345a:	4286      	cmp	r6, r0
    345c:	d9dc      	bls.n	3418 <erase_op+0x50>
    345e:	e7de      	b.n	341e <erase_op+0x56>
    3460:	1afd498d 	.word	0x1afd498d
    3464:	00000007 	.word	0x00000007
    3468:	4001e000 	.word	0x4001e000
    346c:	3b9aca00 	.word	0x3b9aca00

00003470 <work_in_time_slice>:
{
    3470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3474:	b08f      	sub	sp, #60	; 0x3c
	struct flash_context *context = p_flash_op_desc->context;
    3476:	f8d0 a004 	ldr.w	sl, [r0, #4]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    347a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 3554 <work_in_time_slice+0xe4>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    347e:	f10d 0137 	add.w	r1, sp, #55	; 0x37
{
    3482:	4680      	mov	r8, r0
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    3484:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    3488:	f01b fc88 	bl	1ed9c <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    348c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    3490:	930a      	str	r3, [sp, #40]	; 0x28
    3492:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    3496:	930b      	str	r3, [sp, #44]	; 0x2c
    3498:	f01b f9cc 	bl	1e834 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(context->interval),
    349c:	f8da 4010 	ldr.w	r4, [sl, #16]
    34a0:	fba4 4509 	umull	r4, r5, r4, r9
    34a4:	a326      	add	r3, pc, #152	; (adr r3, 3540 <work_in_time_slice+0xd0>)
    34a6:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    34aa:	2700      	movs	r7, #0
    34ac:	4683      	mov	fp, r0
			   HAL_TICKER_US_TO_TICKS(context->interval),
    34ae:	4629      	mov	r1, r5
    34b0:	4620      	mov	r0, r4
    34b2:	f7fd fbc3 	bl	c3c <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    34b6:	e9cd 7707 	strd	r7, r7, [sp, #28]
    34ba:	4b23      	ldr	r3, [pc, #140]	; (3548 <work_in_time_slice+0xd8>)
    34bc:	9305      	str	r3, [sp, #20]
    34be:	f8cd 8018 	str.w	r8, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    34c2:	4606      	mov	r6, r0
			   HAL_TICKER_US_TO_TICKS(context->slot),
    34c4:	f8da 0014 	ldr.w	r0, [sl, #20]
    34c8:	a31d      	add	r3, pc, #116	; (adr r3, 3540 <work_in_time_slice+0xd0>)
    34ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    34ce:	fba0 0109 	umull	r0, r1, r0, r9
    34d2:	f7fd fbb3 	bl	c3c <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(context->interval),
    34d6:	4b1d      	ldr	r3, [pc, #116]	; (354c <work_in_time_slice+0xdc>)
    34d8:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    34dc:	fba6 9a03 	umull	r9, sl, r6, r3
	err = ticker_start(instance_index,
    34e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(context->interval),
    34e4:	2307      	movs	r3, #7
	err = ticker_start(instance_index,
    34e6:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(context->interval),
    34ea:	fb03 aa06 	mla	sl, r3, r6, sl
    34ee:	ebb4 0009 	subs.w	r0, r4, r9
    34f2:	eb65 010a 	sbc.w	r1, r5, sl
    34f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    34fa:	2300      	movs	r3, #0
    34fc:	f7fd fb9e 	bl	c3c <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    3500:	465b      	mov	r3, fp
    3502:	e9cd 6001 	strd	r6, r0, [sp, #4]
    3506:	9700      	str	r7, [sp, #0]
    3508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    350a:	980a      	ldr	r0, [sp, #40]	; 0x28
    350c:	2103      	movs	r1, #3
    350e:	f00e fd47 	bl	11fa0 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    3512:	f030 0302 	bics.w	r3, r0, #2
    3516:	d10a      	bne.n	352e <work_in_time_slice+0xbe>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    3518:	f645 11b3 	movw	r1, #22963	; 0x59b3
    351c:	480c      	ldr	r0, [pc, #48]	; (3550 <work_in_time_slice+0xe0>)
    351e:	f013 fc9f 	bl	16e60 <z_impl_k_sem_take>
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    3522:	b938      	cbnz	r0, 3534 <work_in_time_slice+0xc4>
		result = p_flash_op_desc->result;
    3524:	f8d8 0008 	ldr.w	r0, [r8, #8]
}
    3528:	b00f      	add	sp, #60	; 0x3c
    352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = -ECANCELED;
    352e:	f06f 0047 	mvn.w	r0, #71	; 0x47
    3532:	e7f9      	b.n	3528 <work_in_time_slice+0xb8>
		result = -ETIMEDOUT;
    3534:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	return result;
    3538:	e7f6      	b.n	3528 <work_in_time_slice+0xb8>
    353a:	bf00      	nop
    353c:	f3af 8000 	nop.w
    3540:	1afd498d 	.word	0x1afd498d
    3544:	00000007 	.word	0x00000007
    3548:	00015c71 	.word	0x00015c71
    354c:	1afd498d 	.word	0x1afd498d
    3550:	20001e48 	.word	0x20001e48
    3554:	3b9aca00 	.word	0x3b9aca00

00003558 <write_op>:
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
{
    3558:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	u32_t ticks_begin = 0U;
	u32_t ticks_diff;
	u32_t i = 1U;

	if (w_ctx->enable_time_limit) {
    355c:	7b05      	ldrb	r5, [r0, #12]
{
    355e:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
    3560:	b115      	cbz	r5, 3568 <write_op+0x10>
		ticks_begin = ticker_ticks_now_get();
    3562:	f01b f967 	bl	1e834 <ticker_ticks_now_get>
    3566:	4605      	mov	r5, r0
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* Start with a word-aligned address and handle the offset */
	addr_word = (u32_t)w_ctx->flash_addr & ~0x3;
    3568:	6867      	ldr	r7, [r4, #4]

	/* If not aligned, read first word, update and write it back */
	if (!is_aligned_32(w_ctx->flash_addr)) {
    356a:	f017 0003 	ands.w	r0, r7, #3
    356e:	d07c      	beq.n	366a <write_op+0x112>
    3570:	68a2      	ldr	r2, [r4, #8]
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
		if (count > w_ctx->len) {
			count = w_ctx->len;
		}

		memcpy((u8_t *)&tmp_word + (w_ctx->flash_addr & 0x3),
    3572:	6821      	ldr	r1, [r4, #0]
	addr_word = (u32_t)w_ctx->flash_addr & ~0x3;
    3574:	f027 0703 	bic.w	r7, r7, #3
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    3578:	f1c0 0604 	rsb	r6, r0, #4
    357c:	4296      	cmp	r6, r2
		tmp_word = *(u32_t *)(addr_word);
    357e:	683b      	ldr	r3, [r7, #0]
    3580:	9301      	str	r3, [sp, #4]
		if (count > w_ctx->len) {
    3582:	bf28      	it	cs
    3584:	4616      	movcs	r6, r2
		memcpy((u8_t *)&tmp_word + (w_ctx->flash_addr & 0x3),
    3586:	ab01      	add	r3, sp, #4
    3588:	4632      	mov	r2, r6
    358a:	4418      	add	r0, r3
    358c:	f016 fd8c 	bl	1a0a8 <memcpy>
		       (void *)w_ctx->data_addr,
		       count);
		nvmc_wait_ready();
    3590:	f012 fb44 	bl	15c1c <nvmc_wait_ready>
		*(u32_t *)addr_word = tmp_word;
    3594:	9b01      	ldr	r3, [sp, #4]
    3596:	603b      	str	r3, [r7, #0]
	w_ctx->flash_addr += shift;
    3598:	6863      	ldr	r3, [r4, #4]
    359a:	4433      	add	r3, r6
    359c:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    359e:	6823      	ldr	r3, [r4, #0]
    35a0:	4433      	add	r3, r6
    35a2:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    35a4:	68a3      	ldr	r3, [r4, #8]
    35a6:	1b9e      	subs	r6, r3, r6

		shift_write_context(count, w_ctx);

#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		if (w_ctx->enable_time_limit) {
    35a8:	7b23      	ldrb	r3, [r4, #12]
	w_ctx->len -= shift;
    35aa:	60a6      	str	r6, [r4, #8]
		if (w_ctx->enable_time_limit) {
    35ac:	2b00      	cmp	r3, #0
    35ae:	d05c      	beq.n	366a <write_op+0x112>
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    35b0:	f01b f940 	bl	1e834 <ticker_ticks_now_get>
    35b4:	4629      	mov	r1, r5
    35b6:	f01b f93f 	bl	1e838 <ticker_ticks_diff_get>
						      ticks_begin);
			if (2 * ticks_diff >
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    35ba:	4933      	ldr	r1, [pc, #204]	; (3688 <write_op+0x130>)
			if (2 * ticks_diff >
    35bc:	0046      	lsls	r6, r0, #1
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    35be:	6960      	ldr	r0, [r4, #20]
    35c0:	a32f      	add	r3, pc, #188	; (adr r3, 3680 <write_op+0x128>)
    35c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    35c6:	fba0 0101 	umull	r0, r1, r0, r1
    35ca:	f7fd fb37 	bl	c3c <__aeabi_uldivmod>
    35ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (2 * ticks_diff >
    35d2:	4286      	cmp	r6, r0
    35d4:	d949      	bls.n	366a <write_op+0x112>
				nvmc_wait_ready();
    35d6:	f012 fb21 	bl	15c1c <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
    35da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	nvmc_wait_ready();

	return FLASH_OP_DONE;
}
    35de:	b002      	add	sp, #8
    35e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nvmc_wait_ready();
    35e4:	f012 fb1a 	bl	15c1c <nvmc_wait_ready>
				UNALIGNED_GET((u32_t *)w_ctx->data_addr);
    35e8:	6823      	ldr	r3, [r4, #0]
    35ea:	681a      	ldr	r2, [r3, #0]
		*(u32_t *)w_ctx->flash_addr =
    35ec:	6863      	ldr	r3, [r4, #4]
    35ee:	601a      	str	r2, [r3, #0]
	w_ctx->flash_addr += shift;
    35f0:	6863      	ldr	r3, [r4, #4]
    35f2:	3304      	adds	r3, #4
    35f4:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    35f6:	6823      	ldr	r3, [r4, #0]
    35f8:	3304      	adds	r3, #4
    35fa:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    35fc:	68a3      	ldr	r3, [r4, #8]
    35fe:	3b04      	subs	r3, #4
    3600:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
    3602:	7b23      	ldrb	r3, [r4, #12]
		i++;
    3604:	f108 0801 	add.w	r8, r8, #1
		if (w_ctx->enable_time_limit) {
    3608:	b193      	cbz	r3, 3630 <write_op+0xd8>
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    360a:	f01b f913 	bl	1e834 <ticker_ticks_now_get>
    360e:	4629      	mov	r1, r5
    3610:	f01b f912 	bl	1e838 <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    3614:	fbb0 f9f8 	udiv	r9, r0, r8
    3618:	4481      	add	r9, r0
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    361a:	6960      	ldr	r0, [r4, #20]
    361c:	4632      	mov	r2, r6
    361e:	463b      	mov	r3, r7
    3620:	fba0 010a 	umull	r0, r1, r0, sl
    3624:	f7fd fb0a 	bl	c3c <__aeabi_uldivmod>
    3628:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    362c:	4581      	cmp	r9, r0
    362e:	d8d2      	bhi.n	35d6 <write_op+0x7e>
	while (w_ctx->len >= sizeof(u32_t)) {
    3630:	68a2      	ldr	r2, [r4, #8]
    3632:	2a03      	cmp	r2, #3
    3634:	d8d6      	bhi.n	35e4 <write_op+0x8c>
	if (w_ctx->len) {
    3636:	b1a2      	cbz	r2, 3662 <write_op+0x10a>
		tmp_word = *(u32_t *)(w_ctx->flash_addr);
    3638:	6863      	ldr	r3, [r4, #4]
		memcpy((u8_t *)&tmp_word, (void *)w_ctx->data_addr, w_ctx->len);
    363a:	6821      	ldr	r1, [r4, #0]
		tmp_word = *(u32_t *)(w_ctx->flash_addr);
    363c:	681b      	ldr	r3, [r3, #0]
    363e:	9301      	str	r3, [sp, #4]
		memcpy((u8_t *)&tmp_word, (void *)w_ctx->data_addr, w_ctx->len);
    3640:	a801      	add	r0, sp, #4
    3642:	f016 fd31 	bl	1a0a8 <memcpy>
		nvmc_wait_ready();
    3646:	f012 fae9 	bl	15c1c <nvmc_wait_ready>
		*(u32_t *)w_ctx->flash_addr = tmp_word;
    364a:	6863      	ldr	r3, [r4, #4]
    364c:	9a01      	ldr	r2, [sp, #4]
    364e:	601a      	str	r2, [r3, #0]
	w_ctx->flash_addr += shift;
    3650:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
	w_ctx->data_addr += shift;
    3654:	6823      	ldr	r3, [r4, #0]
    3656:	440b      	add	r3, r1
	w_ctx->flash_addr += shift;
    3658:	440a      	add	r2, r1
	w_ctx->data_addr += shift;
    365a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    365c:	2300      	movs	r3, #0
	w_ctx->flash_addr += shift;
    365e:	6062      	str	r2, [r4, #4]
	w_ctx->len -= shift;
    3660:	60a3      	str	r3, [r4, #8]
	nvmc_wait_ready();
    3662:	f012 fadb 	bl	15c1c <nvmc_wait_ready>
	return FLASH_OP_DONE;
    3666:	2000      	movs	r0, #0
    3668:	e7b9      	b.n	35de <write_op+0x86>
	u32_t ticks_begin = 0U;
    366a:	f04f 0801 	mov.w	r8, #1
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    366e:	f8df a018 	ldr.w	sl, [pc, #24]	; 3688 <write_op+0x130>
    3672:	a703      	add	r7, pc, #12	; (adr r7, 3680 <write_op+0x128>)
    3674:	e9d7 6700 	ldrd	r6, r7, [r7]
    3678:	e7da      	b.n	3630 <write_op+0xd8>
    367a:	bf00      	nop
    367c:	f3af 8000 	nop.w
    3680:	1afd498d 	.word	0x1afd498d
    3684:	00000007 	.word	0x00000007
    3688:	3b9aca00 	.word	0x3b9aca00

0000368c <reset_counter_timer_handler>:

	save_on_flash(RESET_COUNTER);
}

static void reset_counter_timer_handler(struct k_timer *dummy)
{
    368c:	b508      	push	{r3, lr}
	reset_counter = 0U;
    368e:	4b05      	ldr	r3, [pc, #20]	; (36a4 <reset_counter_timer_handler+0x18>)
    3690:	2200      	movs	r2, #0
	save_on_flash(RESET_COUNTER);
    3692:	2001      	movs	r0, #1
	reset_counter = 0U;
    3694:	701a      	strb	r2, [r3, #0]
	save_on_flash(RESET_COUNTER);
    3696:	f002 fe11 	bl	62bc <save_on_flash>
	printk("Reset Counter set to Zero\n");
    369a:	4803      	ldr	r0, [pc, #12]	; (36a8 <reset_counter_timer_handler+0x1c>)
}
    369c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Reset Counter set to Zero\n");
    36a0:	f014 bd6f 	b.w	18182 <printk>
    36a4:	200020ac 	.word	0x200020ac
    36a8:	00020c41 	.word	0x00020c41

000036ac <update_led_gpio>:
{
    36ac:	b570      	push	{r4, r5, r6, lr}
	power = 100 * ((float) lightness / 65535);
    36ae:	4c1f      	ldr	r4, [pc, #124]	; (372c <update_led_gpio+0x80>)
    36b0:	8820      	ldrh	r0, [r4, #0]
    36b2:	f7fd f80f 	bl	6d4 <__aeabi_ui2f>
    36b6:	491e      	ldr	r1, [pc, #120]	; (3730 <update_led_gpio+0x84>)
    36b8:	f7fd f918 	bl	8ec <__aeabi_fdiv>
    36bc:	491d      	ldr	r1, [pc, #116]	; (3734 <update_led_gpio+0x88>)
    36be:	f7fd f861 	bl	784 <__aeabi_fmul>
    36c2:	f7fd fa4b 	bl	b5c <__aeabi_f2uiz>
	color = 100 * ((float) (temperature + 32768) / 65535);
    36c6:	4b1c      	ldr	r3, [pc, #112]	; (3738 <update_led_gpio+0x8c>)
	power = 100 * ((float) lightness / 65535);
    36c8:	b2c6      	uxtb	r6, r0
	color = 100 * ((float) (temperature + 32768) / 65535);
    36ca:	f9b3 0000 	ldrsh.w	r0, [r3]
    36ce:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    36d2:	f7fd f803 	bl	6dc <__aeabi_i2f>
    36d6:	4916      	ldr	r1, [pc, #88]	; (3730 <update_led_gpio+0x84>)
    36d8:	f7fd f908 	bl	8ec <__aeabi_fdiv>
    36dc:	4915      	ldr	r1, [pc, #84]	; (3734 <update_led_gpio+0x88>)
    36de:	f7fd f851 	bl	784 <__aeabi_fmul>
    36e2:	f7fd fa3b 	bl	b5c <__aeabi_f2uiz>
    36e6:	b2c5      	uxtb	r5, r0
	printk("power-> %d, color-> %d\n", power, color);
    36e8:	462a      	mov	r2, r5
    36ea:	4631      	mov	r1, r6
    36ec:	4813      	ldr	r0, [pc, #76]	; (373c <update_led_gpio+0x90>)
    36ee:	f014 fd48 	bl	18182 <printk>
	if (lightness) {
    36f2:	8823      	ldrh	r3, [r4, #0]
    36f4:	4c12      	ldr	r4, [pc, #72]	; (3740 <update_led_gpio+0x94>)
    36f6:	b1b3      	cbz	r3, 3726 <update_led_gpio+0x7a>
		gpio_pin_write(led_device[0], LED0_GPIO_PIN, 0);
    36f8:	2200      	movs	r2, #0
		gpio_pin_write(led_device[0], LED0_GPIO_PIN, 1);
    36fa:	2111      	movs	r1, #17
    36fc:	6820      	ldr	r0, [r4, #0]
    36fe:	f013 ff6f 	bl	175e0 <gpio_pin_write>
	if (power < 50) {
    3702:	2e31      	cmp	r6, #49	; 0x31
		gpio_pin_write(led_device[2], LED2_GPIO_PIN, 0);
    3704:	bf94      	ite	ls
    3706:	2200      	movls	r2, #0
		gpio_pin_write(led_device[2], LED2_GPIO_PIN, 1);
    3708:	2201      	movhi	r2, #1
    370a:	68a0      	ldr	r0, [r4, #8]
    370c:	2113      	movs	r1, #19
    370e:	f013 ff67 	bl	175e0 <gpio_pin_write>
	if (color < 50) {
    3712:	2d31      	cmp	r5, #49	; 0x31
		gpio_pin_write(led_device[3], LED3_GPIO_PIN, 0);
    3714:	68e0      	ldr	r0, [r4, #12]
    3716:	bf94      	ite	ls
    3718:	2200      	movls	r2, #0
		gpio_pin_write(led_device[3], LED3_GPIO_PIN, 1);
    371a:	2201      	movhi	r2, #1
    371c:	2114      	movs	r1, #20
}
    371e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gpio_pin_write(led_device[3], LED3_GPIO_PIN, 1);
    3722:	f013 bf5d 	b.w	175e0 <gpio_pin_write>
		gpio_pin_write(led_device[0], LED0_GPIO_PIN, 1);
    3726:	2201      	movs	r2, #1
    3728:	e7e7      	b.n	36fa <update_led_gpio+0x4e>
    372a:	bf00      	nop
    372c:	20002048 	.word	0x20002048
    3730:	477fff00 	.word	0x477fff00
    3734:	42c80000 	.word	0x42c80000
    3738:	2000204e 	.word	0x2000204e
    373c:	00020c5c 	.word	0x00020c5c
    3740:	20000680 	.word	0x20000680

00003744 <update_light_state>:
{
    3744:	b508      	push	{r3, lr}
	update_led_gpio();
    3746:	f7ff ffb1 	bl	36ac <update_led_gpio>
	if (*ptr_counter == 0 || reset == false) {
    374a:	4b0f      	ldr	r3, [pc, #60]	; (3788 <update_light_state+0x44>)
    374c:	681b      	ldr	r3, [r3, #0]
    374e:	681a      	ldr	r2, [r3, #0]
    3750:	4b0e      	ldr	r3, [pc, #56]	; (378c <update_light_state+0x48>)
    3752:	b10a      	cbz	r2, 3758 <update_light_state+0x14>
    3754:	781a      	ldrb	r2, [r3, #0]
    3756:	b9b2      	cbnz	r2, 3786 <update_light_state+0x42>
		reset = true;
    3758:	2201      	movs	r2, #1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    375a:	490d      	ldr	r1, [pc, #52]	; (3790 <update_light_state+0x4c>)
    375c:	701a      	strb	r2, [r3, #0]
    375e:	f3bf 8f5b 	dmb	ish
    3762:	e851 3f00 	ldrex	r3, [r1]
    3766:	f043 0201 	orr.w	r2, r3, #1
    376a:	e841 2000 	strex	r0, r2, [r1]
    376e:	2800      	cmp	r0, #0
    3770:	d1f7      	bne.n	3762 <update_light_state+0x1e>
    3772:	f3bf 8f5b 	dmb	ish
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3776:	07db      	lsls	r3, r3, #31
    3778:	d405      	bmi.n	3786 <update_light_state+0x42>
		k_queue_append(&work_q->queue, work);
    377a:	3908      	subs	r1, #8
    377c:	4805      	ldr	r0, [pc, #20]	; (3794 <update_light_state+0x50>)
}
    377e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3782:	f01b bfbd 	b.w	1f700 <k_queue_append>
    3786:	bd08      	pop	{r3, pc}
    3788:	200006b8 	.word	0x200006b8
    378c:	200020a6 	.word	0x200020a6
    3790:	200084f8 	.word	0x200084f8
    3794:	20001fc8 	.word	0x20001fc8

00003798 <main>:

K_TIMER_DEFINE(reset_counter_timer, reset_counter_timer_handler, NULL);

void main(void)
{
    3798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gen_def_trans_time_srv_user_data.tt = 0x00;
    379c:	4e41      	ldr	r6, [pc, #260]	; (38a4 <main+0x10c>)
	light_lightness_srv_user_data.light_range_min = LIGHTNESS_MIN;
    379e:	4d42      	ldr	r5, [pc, #264]	; (38a8 <main+0x110>)
	gen_power_onoff_srv_user_data.onpowerup = STATE_DEFAULT;
    37a0:	4f42      	ldr	r7, [pc, #264]	; (38ac <main+0x114>)
	light_ctl_srv_user_data.temp_range_min = TEMP_MIN;
    37a2:	4c43      	ldr	r4, [pc, #268]	; (38b0 <main+0x118>)
	gen_def_trans_time_srv_user_data.tt = 0x00;
    37a4:	2300      	movs	r3, #0
    37a6:	7033      	strb	r3, [r6, #0]
	gen_power_onoff_srv_user_data.onpowerup = STATE_DEFAULT;
    37a8:	2301      	movs	r3, #1
    37aa:	703b      	strb	r3, [r7, #0]
	light_lightness_srv_user_data.light_range_min = LIGHTNESS_MIN;
    37ac:	81eb      	strh	r3, [r5, #14]
	light_lightness_srv_user_data.light_range_max = LIGHTNESS_MAX;
    37ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    37b2:	822b      	strh	r3, [r5, #16]
	light_lightness_srv_user_data.last = LIGHTNESS_MAX;
    37b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    37b8:	60ab      	str	r3, [r5, #8]
	light_ctl_srv_user_data.temp_range_min = TEMP_MIN;
    37ba:	f44f 7348 	mov.w	r3, #800	; 0x320
    37be:	81e3      	strh	r3, [r4, #14]
	light_ctl_srv_user_data.temp_range_max = TEMP_MAX;
    37c0:	f644 6320 	movw	r3, #20000	; 0x4e20
    37c4:	8223      	strh	r3, [r4, #16]
	light_ctl_srv_user_data.lightness_def = LIGHTNESS_MAX;
    37c6:	4b3b      	ldr	r3, [pc, #236]	; (38b4 <main+0x11c>)
    37c8:	61a3      	str	r3, [r4, #24]
	light_ctl_srv_user_data.lightness_temp_last =
    37ca:	4b3b      	ldr	r3, [pc, #236]	; (38b8 <main+0x120>)
    37cc:	6263      	str	r3, [r4, #36]	; 0x24
	int err;

	light_default_var_init();

	app_gpio_init();
    37ce:	f000 f8a5 	bl	391c <app_gpio_init>

	printk("Initializing...\n");
    37d2:	483a      	ldr	r0, [pc, #232]	; (38bc <main+0x124>)
    37d4:	f014 fcd5 	bl	18182 <printk>

	ps_settings_init();
    37d8:	f002 fdf8 	bl	63cc <ps_settings_init>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
    37dc:	4838      	ldr	r0, [pc, #224]	; (38c0 <main+0x128>)
    37de:	f006 f913 	bl	9a08 <bt_enable>
	if (err) {
    37e2:	46b8      	mov	r8, r7
    37e4:	4601      	mov	r1, r0
    37e6:	b110      	cbz	r0, 37ee <main+0x56>
		printk("Bluetooth init failed (err %d)\n", err);
    37e8:	4836      	ldr	r0, [pc, #216]	; (38c4 <main+0x12c>)
    37ea:	f014 fcca 	bl	18182 <printk>
	lightness = (u16_t) (light_ctl_srv_user_data.lightness_temp_last >> 16);
    37ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    37f0:	4b35      	ldr	r3, [pc, #212]	; (38c8 <main+0x130>)
    37f2:	0c0a      	lsrs	r2, r1, #16
    37f4:	b297      	uxth	r7, r2
	if (lightness) {
    37f6:	3200      	adds	r2, #0
    37f8:	bf18      	it	ne
    37fa:	2201      	movne	r2, #1
    37fc:	701a      	strb	r2, [r3, #0]
	if (light_ctl_srv_user_data.lightness_temp_def) {
    37fe:	69e2      	ldr	r2, [r4, #28]
    3800:	b112      	cbz	r2, 3808 <main+0x70>
			(light_ctl_srv_user_data.lightness_temp_def >> 16);
    3802:	0c10      	lsrs	r0, r2, #16
		light_ctl_srv_user_data.lightness_def = (u16_t)
    3804:	8320      	strh	r0, [r4, #24]
		light_ctl_srv_user_data.temp_def = (u16_t)
    3806:	8362      	strh	r2, [r4, #26]
	light_lightness_srv_user_data.def =
    3808:	8b22      	ldrh	r2, [r4, #24]
    380a:	816a      	strh	r2, [r5, #10]
	light_ctl_srv_user_data.temp = light_ctl_srv_user_data.temp_def;
    380c:	8b62      	ldrh	r2, [r4, #26]
    380e:	80a2      	strh	r2, [r4, #4]
	if (light_lightness_srv_user_data.lightness_range) {
    3810:	696a      	ldr	r2, [r5, #20]
    3812:	b112      	cbz	r2, 381a <main+0x82>
			(light_lightness_srv_user_data.lightness_range >> 16);
    3814:	0c10      	lsrs	r0, r2, #16
		light_lightness_srv_user_data.light_range_max = (u16_t)
    3816:	8228      	strh	r0, [r5, #16]
		light_lightness_srv_user_data.light_range_min = (u16_t)
    3818:	81ea      	strh	r2, [r5, #14]
	if (light_ctl_srv_user_data.temperature_range) {
    381a:	6962      	ldr	r2, [r4, #20]
    381c:	b112      	cbz	r2, 3824 <main+0x8c>
			(light_ctl_srv_user_data.temperature_range >> 16);
    381e:	0c10      	lsrs	r0, r2, #16
		light_ctl_srv_user_data.temp_range_max = (u16_t)
    3820:	8220      	strh	r0, [r4, #16]
		light_ctl_srv_user_data.temp_range_min = (u16_t)
    3822:	81e2      	strh	r2, [r4, #14]
	switch (gen_power_onoff_srv_user_data.onpowerup) {
    3824:	f898 2000 	ldrb.w	r2, [r8]
    3828:	2a01      	cmp	r2, #1
    382a:	d02c      	beq.n	3886 <main+0xee>
    382c:	b250      	sxtb	r0, r2
    382e:	b320      	cbz	r0, 387a <main+0xe2>
    3830:	2a02      	cmp	r2, #2
    3832:	d02a      	beq.n	388a <main+0xf2>
	default_tt = gen_def_trans_time_srv_user_data.tt;
    3834:	4b25      	ldr	r3, [pc, #148]	; (38cc <main+0x134>)
    3836:	7832      	ldrb	r2, [r6, #0]
    3838:	701a      	strb	r2, [r3, #0]
	target_lightness = lightness;
    383a:	4b25      	ldr	r3, [pc, #148]	; (38d0 <main+0x138>)
	if (reset_counter >= 4) {
    383c:	4c25      	ldr	r4, [pc, #148]	; (38d4 <main+0x13c>)
	target_lightness = lightness;
    383e:	801f      	strh	r7, [r3, #0]
	target_temperature = temperature;
    3840:	4b25      	ldr	r3, [pc, #148]	; (38d8 <main+0x140>)
    3842:	881a      	ldrh	r2, [r3, #0]
    3844:	4b25      	ldr	r3, [pc, #148]	; (38dc <main+0x144>)
    3846:	801a      	strh	r2, [r3, #0]
	}

	light_default_status_init();

	update_light_state();
    3848:	f7ff ff7c 	bl	3744 <update_light_state>

	randomize_publishers_TID();
    384c:	f002 faa8 	bl	5da0 <randomize_publishers_TID>
	if (reset_counter >= 4) {
    3850:	7821      	ldrb	r1, [r4, #0]
    3852:	2903      	cmp	r1, #3
    3854:	d91e      	bls.n	3894 <main+0xfc>
		reset_counter = 0U;
    3856:	2300      	movs	r3, #0
		printk("BT Mesh reset\n");
    3858:	4821      	ldr	r0, [pc, #132]	; (38e0 <main+0x148>)
		reset_counter = 0U;
    385a:	7023      	strb	r3, [r4, #0]
		printk("BT Mesh reset\n");
    385c:	f014 fc91 	bl	18182 <printk>
		bt_mesh_reset();
    3860:	f008 faee 	bl	be40 <bt_mesh_reset>
	save_on_flash(RESET_COUNTER);
    3864:	2001      	movs	r0, #1
    3866:	f002 fd29 	bl	62bc <save_on_flash>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
    386a:	2200      	movs	r2, #0
    386c:	f641 3158 	movw	r1, #7000	; 0x1b58
    3870:	481c      	ldr	r0, [pc, #112]	; (38e4 <main+0x14c>)

	short_time_multireset_bt_mesh_unprovisioning();
	k_timer_start(&reset_counter_timer, K_MSEC(7000), 0);
}
    3872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3876:	f013 bdb3 	b.w	173e0 <z_impl_k_timer_start>
		gen_onoff_srv_root_user_data.onoff = STATE_OFF;
    387a:	7018      	strb	r0, [r3, #0]
		state_binding(ONOFF, ONOFF_TEMP);
    387c:	2109      	movs	r1, #9
    387e:	2002      	movs	r0, #2
		state_binding(ONPOWERUP, ONOFF_TEMP);
    3880:	f002 fba2 	bl	5fc8 <state_binding>
		break;
    3884:	e7d6      	b.n	3834 <main+0x9c>
		gen_onoff_srv_root_user_data.onoff = STATE_ON;
    3886:	701a      	strb	r2, [r3, #0]
    3888:	e7f8      	b.n	387c <main+0xe4>
			(u16_t) (light_ctl_srv_user_data.lightness_temp_last);
    388a:	80a1      	strh	r1, [r4, #4]
		light_lightness_srv_user_data.last = (u16_t)
    388c:	812f      	strh	r7, [r5, #8]
		state_binding(ONPOWERUP, ONOFF_TEMP);
    388e:	2109      	movs	r1, #9
    3890:	2001      	movs	r0, #1
    3892:	e7f5      	b.n	3880 <main+0xe8>
		printk("Reset Counter -> %d\n", reset_counter);
    3894:	4814      	ldr	r0, [pc, #80]	; (38e8 <main+0x150>)
    3896:	f014 fc74 	bl	18182 <printk>
		reset_counter++;
    389a:	7823      	ldrb	r3, [r4, #0]
    389c:	3301      	adds	r3, #1
    389e:	7023      	strb	r3, [r4, #0]
    38a0:	e7e0      	b.n	3864 <main+0xcc>
    38a2:	bf00      	nop
    38a4:	200020a7 	.word	0x200020a7
    38a8:	20007c28 	.word	0x20007c28
    38ac:	200020a8 	.word	0x200020a8
    38b0:	20007be0 	.word	0x20007be0
    38b4:	0320ffff 	.word	0x0320ffff
    38b8:	ffff0320 	.word	0xffff0320
    38bc:	00020bec 	.word	0x00020bec
    38c0:	00003a6d 	.word	0x00003a6d
    38c4:	00020bfd 	.word	0x00020bfd
    38c8:	20007bc8 	.word	0x20007bc8
    38cc:	200020ae 	.word	0x200020ae
    38d0:	2000204a 	.word	0x2000204a
    38d4:	200020ac 	.word	0x200020ac
    38d8:	2000204e 	.word	0x2000204e
    38dc:	2000204c 	.word	0x2000204c
    38e0:	00020c1d 	.word	0x00020c1d
    38e4:	20009354 	.word	0x20009354
    38e8:	00020c2c 	.word	0x00020c2c

000038ec <button_pressed>:
    38ec:	4909      	ldr	r1, [pc, #36]	; (3914 <button_pressed+0x28>)
    38ee:	f3bf 8f5b 	dmb	ish
    38f2:	e851 3f00 	ldrex	r3, [r1]
    38f6:	f043 0201 	orr.w	r2, r3, #1
    38fa:	e841 2000 	strex	r0, r2, [r1]
    38fe:	2800      	cmp	r0, #0
    3900:	d1f7      	bne.n	38f2 <button_pressed+0x6>
    3902:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3906:	07db      	lsls	r3, r3, #31
    3908:	d403      	bmi.n	3912 <button_pressed+0x26>
		k_queue_append(&work_q->queue, work);
    390a:	3908      	subs	r1, #8
    390c:	4802      	ldr	r0, [pc, #8]	; (3918 <button_pressed+0x2c>)
    390e:	f01b bef7 	b.w	1f700 <k_queue_append>

static void button_pressed(struct device *dev,
			   struct gpio_callback *cb, u32_t pins)
{
	k_work_submit(&button_work);
}
    3912:	4770      	bx	lr
    3914:	20007e40 	.word	0x20007e40
    3918:	20001fc8 	.word	0x20001fc8

0000391c <app_gpio_init>:

void app_gpio_init(void)
{
    391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
    391e:	4e4c      	ldr	r6, [pc, #304]	; (3a50 <app_gpio_init+0x134>)
	static struct gpio_callback button_cb[4];

	/* LEDs configuration & setting */

	led_device[0] = device_get_binding(LED0_GPIO_CONTROLLER);
    3920:	4c4c      	ldr	r4, [pc, #304]	; (3a54 <app_gpio_init+0x138>)
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    3922:	4d4d      	ldr	r5, [pc, #308]	; (3a58 <app_gpio_init+0x13c>)
    3924:	4f4d      	ldr	r7, [pc, #308]	; (3a5c <app_gpio_init+0x140>)
    3926:	4630      	mov	r0, r6
    3928:	f012 fd2e 	bl	16388 <z_impl_device_get_binding>
	gpio_pin_configure(led_device[0], LED0_GPIO_PIN,
    392c:	f240 1201 	movw	r2, #257	; 0x101
    3930:	2111      	movs	r1, #17
	led_device[0] = device_get_binding(LED0_GPIO_CONTROLLER);
    3932:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(led_device[0], LED0_GPIO_PIN,
    3934:	f013 fe77 	bl	17626 <gpio_pin_configure>
			   GPIO_DIR_OUT | GPIO_PUD_PULL_UP);
	gpio_pin_write(led_device[0], LED0_GPIO_PIN, 1);
    3938:	2111      	movs	r1, #17
    393a:	6820      	ldr	r0, [r4, #0]
    393c:	f013 fe6a 	bl	17614 <gpio_pin_write.constprop.1>
    3940:	4630      	mov	r0, r6
    3942:	f012 fd21 	bl	16388 <z_impl_device_get_binding>

	led_device[1] = device_get_binding(LED1_GPIO_CONTROLLER);
	gpio_pin_configure(led_device[1], LED1_GPIO_PIN,
    3946:	f240 1201 	movw	r2, #257	; 0x101
    394a:	2112      	movs	r1, #18
	led_device[1] = device_get_binding(LED1_GPIO_CONTROLLER);
    394c:	6060      	str	r0, [r4, #4]
	gpio_pin_configure(led_device[1], LED1_GPIO_PIN,
    394e:	f013 fe6a 	bl	17626 <gpio_pin_configure>
			   GPIO_DIR_OUT | GPIO_PUD_PULL_UP);
	gpio_pin_write(led_device[1], LED1_GPIO_PIN, 1);
    3952:	2112      	movs	r1, #18
    3954:	6860      	ldr	r0, [r4, #4]
    3956:	f013 fe5d 	bl	17614 <gpio_pin_write.constprop.1>
    395a:	4630      	mov	r0, r6
    395c:	f012 fd14 	bl	16388 <z_impl_device_get_binding>

	led_device[2] = device_get_binding(LED2_GPIO_CONTROLLER);
	gpio_pin_configure(led_device[2], LED2_GPIO_PIN,
    3960:	f240 1201 	movw	r2, #257	; 0x101
    3964:	2113      	movs	r1, #19
	led_device[2] = device_get_binding(LED2_GPIO_CONTROLLER);
    3966:	60a0      	str	r0, [r4, #8]
	gpio_pin_configure(led_device[2], LED2_GPIO_PIN,
    3968:	f013 fe5d 	bl	17626 <gpio_pin_configure>
			   GPIO_DIR_OUT | GPIO_PUD_PULL_UP);
	gpio_pin_write(led_device[2], LED2_GPIO_PIN, 1);
    396c:	2113      	movs	r1, #19
    396e:	68a0      	ldr	r0, [r4, #8]
    3970:	f013 fe50 	bl	17614 <gpio_pin_write.constprop.1>
    3974:	4630      	mov	r0, r6
    3976:	f012 fd07 	bl	16388 <z_impl_device_get_binding>

	led_device[3] = device_get_binding(LED3_GPIO_CONTROLLER);
	gpio_pin_configure(led_device[3], LED3_GPIO_PIN,
    397a:	f240 1201 	movw	r2, #257	; 0x101
    397e:	2114      	movs	r1, #20
	led_device[3] = device_get_binding(LED3_GPIO_CONTROLLER);
    3980:	60e0      	str	r0, [r4, #12]
	gpio_pin_configure(led_device[3], LED3_GPIO_PIN,
    3982:	f013 fe50 	bl	17626 <gpio_pin_configure>
			   GPIO_DIR_OUT | GPIO_PUD_PULL_UP);
	gpio_pin_write(led_device[3], LED3_GPIO_PIN, 1);
    3986:	2114      	movs	r1, #20
    3988:	68e0      	ldr	r0, [r4, #12]

	/* Buttons configuration & setting */

	k_work_init(&button_work, publish);

	button_device[0] = device_get_binding(SW0_GPIO_CONTROLLER);
    398a:	4c35      	ldr	r4, [pc, #212]	; (3a60 <app_gpio_init+0x144>)
	gpio_pin_write(led_device[3], LED3_GPIO_PIN, 1);
    398c:	f013 fe42 	bl	17614 <gpio_pin_write.constprop.1>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    3990:	4b34      	ldr	r3, [pc, #208]	; (3a64 <app_gpio_init+0x148>)
    3992:	4935      	ldr	r1, [pc, #212]	; (3a68 <app_gpio_init+0x14c>)
    3994:	2200      	movs	r2, #0
    3996:	4630      	mov	r0, r6
    3998:	e9c3 1201 	strd	r1, r2, [r3, #4]
    399c:	601a      	str	r2, [r3, #0]
    399e:	f012 fcf3 	bl	16388 <z_impl_device_get_binding>
	gpio_pin_configure(button_device[0], SW0_GPIO_PIN,
    39a2:	f44f 7299 	mov.w	r2, #306	; 0x132
    39a6:	210d      	movs	r1, #13
	button_device[0] = device_get_binding(SW0_GPIO_CONTROLLER);
    39a8:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(button_device[0], SW0_GPIO_PIN,
    39aa:	f013 fe3c 	bl	17626 <gpio_pin_configure>
	callback->pin_mask = pin_mask;
    39ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
			   (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE |
			    GPIO_PUD_PULL_UP |
			    GPIO_INT_DEBOUNCE | GPIO_INT_ACTIVE_LOW));
	gpio_init_callback(&button_cb[0], button_pressed, BIT(SW0_GPIO_PIN));
	gpio_add_callback(button_device[0], &button_cb[0]);
    39b2:	4629      	mov	r1, r5
    39b4:	6820      	ldr	r0, [r4, #0]
    39b6:	60ab      	str	r3, [r5, #8]
	callback->handler = handler;
    39b8:	606f      	str	r7, [r5, #4]
    39ba:	f013 fe1a 	bl	175f2 <gpio_add_callback.constprop.0>
	gpio_pin_enable_callback(button_device[0], SW0_GPIO_PIN);
    39be:	210d      	movs	r1, #13
    39c0:	6820      	ldr	r0, [r4, #0]
    39c2:	f013 fe1e 	bl	17602 <gpio_pin_enable_callback>
    39c6:	4630      	mov	r0, r6
    39c8:	f012 fcde 	bl	16388 <z_impl_device_get_binding>

	button_device[1] = device_get_binding(SW1_GPIO_CONTROLLER);
	gpio_pin_configure(button_device[1], SW1_GPIO_PIN,
    39cc:	f44f 7299 	mov.w	r2, #306	; 0x132
    39d0:	210e      	movs	r1, #14
	button_device[1] = device_get_binding(SW1_GPIO_CONTROLLER);
    39d2:	6060      	str	r0, [r4, #4]
	gpio_pin_configure(button_device[1], SW1_GPIO_PIN,
    39d4:	f013 fe27 	bl	17626 <gpio_pin_configure>
	callback->pin_mask = pin_mask;
    39d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
			   (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE |
			    GPIO_PUD_PULL_UP |
			    GPIO_INT_DEBOUNCE | GPIO_INT_ACTIVE_LOW));
	gpio_init_callback(&button_cb[1], button_pressed, BIT(SW1_GPIO_PIN));
	gpio_add_callback(button_device[1], &button_cb[1]);
    39dc:	f105 010c 	add.w	r1, r5, #12
    39e0:	6860      	ldr	r0, [r4, #4]
    39e2:	616b      	str	r3, [r5, #20]
	callback->handler = handler;
    39e4:	612f      	str	r7, [r5, #16]
    39e6:	f013 fe04 	bl	175f2 <gpio_add_callback.constprop.0>
	gpio_pin_enable_callback(button_device[1], SW1_GPIO_PIN);
    39ea:	210e      	movs	r1, #14
    39ec:	6860      	ldr	r0, [r4, #4]
    39ee:	f013 fe08 	bl	17602 <gpio_pin_enable_callback>
    39f2:	4630      	mov	r0, r6
    39f4:	f012 fcc8 	bl	16388 <z_impl_device_get_binding>

	button_device[2] = device_get_binding(SW2_GPIO_CONTROLLER);
	gpio_pin_configure(button_device[2], SW2_GPIO_PIN,
    39f8:	f44f 7299 	mov.w	r2, #306	; 0x132
    39fc:	210f      	movs	r1, #15
	button_device[2] = device_get_binding(SW2_GPIO_CONTROLLER);
    39fe:	60a0      	str	r0, [r4, #8]
	gpio_pin_configure(button_device[2], SW2_GPIO_PIN,
    3a00:	f013 fe11 	bl	17626 <gpio_pin_configure>
	callback->pin_mask = pin_mask;
    3a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
			   (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE |
			    GPIO_PUD_PULL_UP |
			    GPIO_INT_DEBOUNCE | GPIO_INT_ACTIVE_LOW));
	gpio_init_callback(&button_cb[2], button_pressed, BIT(SW2_GPIO_PIN));
	gpio_add_callback(button_device[2], &button_cb[2]);
    3a08:	f105 0118 	add.w	r1, r5, #24
    3a0c:	68a0      	ldr	r0, [r4, #8]
    3a0e:	622b      	str	r3, [r5, #32]
	callback->handler = handler;
    3a10:	61ef      	str	r7, [r5, #28]
    3a12:	f013 fdee 	bl	175f2 <gpio_add_callback.constprop.0>
	gpio_pin_enable_callback(button_device[2], SW2_GPIO_PIN);
    3a16:	210f      	movs	r1, #15
    3a18:	68a0      	ldr	r0, [r4, #8]
    3a1a:	f013 fdf2 	bl	17602 <gpio_pin_enable_callback>
    3a1e:	4630      	mov	r0, r6
    3a20:	f012 fcb2 	bl	16388 <z_impl_device_get_binding>

	button_device[3] = device_get_binding(SW3_GPIO_CONTROLLER);
	gpio_pin_configure(button_device[3], SW3_GPIO_PIN,
    3a24:	f44f 7299 	mov.w	r2, #306	; 0x132
    3a28:	2110      	movs	r1, #16
	button_device[3] = device_get_binding(SW3_GPIO_CONTROLLER);
    3a2a:	60e0      	str	r0, [r4, #12]
	gpio_pin_configure(button_device[3], SW3_GPIO_PIN,
    3a2c:	f013 fdfb 	bl	17626 <gpio_pin_configure>
	callback->pin_mask = pin_mask;
    3a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
			   (GPIO_DIR_IN | GPIO_INT | GPIO_INT_EDGE |
			    GPIO_PUD_PULL_UP |
			    GPIO_INT_DEBOUNCE | GPIO_INT_ACTIVE_LOW));
	gpio_init_callback(&button_cb[3], button_pressed, BIT(SW3_GPIO_PIN));
	gpio_add_callback(button_device[3], &button_cb[3]);
    3a34:	f105 0124 	add.w	r1, r5, #36	; 0x24
    3a38:	68e0      	ldr	r0, [r4, #12]
	callback->handler = handler;
    3a3a:	62af      	str	r7, [r5, #40]	; 0x28
	callback->pin_mask = pin_mask;
    3a3c:	62eb      	str	r3, [r5, #44]	; 0x2c
    3a3e:	f013 fdd8 	bl	175f2 <gpio_add_callback.constprop.0>
	gpio_pin_enable_callback(button_device[3], SW3_GPIO_PIN);
    3a42:	68e0      	ldr	r0, [r4, #12]
    3a44:	2110      	movs	r1, #16
}
    3a46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	gpio_pin_enable_callback(button_device[3], SW3_GPIO_PIN);
    3a4a:	f013 bdda 	b.w	17602 <gpio_pin_enable_callback>
    3a4e:	bf00      	nop
    3a50:	00020c74 	.word	0x00020c74
    3a54:	20000680 	.word	0x20000680
    3a58:	20000640 	.word	0x20000640
    3a5c:	000038ed 	.word	0x000038ed
    3a60:	20000670 	.word	0x20000670
    3a64:	20007e38 	.word	0x20007e38
    3a68:	00005dc9 	.word	0x00005dc9

00003a6c <bt_ready>:
	.complete = prov_complete,
	.reset = prov_reset,
};

void bt_ready(int err)
{
    3a6c:	b513      	push	{r0, r1, r4, lr}
	struct bt_le_oob oob;

	if (err) {
    3a6e:	4601      	mov	r1, r0
    3a70:	b120      	cbz	r0, 3a7c <bt_ready+0x10>
		printk("Bluetooth init failed (err %d)\n", err);
    3a72:	4814      	ldr	r0, [pc, #80]	; (3ac4 <bt_ready+0x58>)

	printk("Bluetooth initialized\n");

	err = bt_mesh_init(&prov, &comp);
	if (err) {
		printk("Initializing mesh failed (err %d)\n", err);
    3a74:	f014 fb85 	bl	18182 <printk>
	}

	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);

	printk("Mesh initialized\n");
}
    3a78:	b002      	add	sp, #8
    3a7a:	bd10      	pop	{r4, pc}
	printk("Bluetooth initialized\n");
    3a7c:	4812      	ldr	r0, [pc, #72]	; (3ac8 <bt_ready+0x5c>)
    3a7e:	f014 fb80 	bl	18182 <printk>
	err = bt_mesh_init(&prov, &comp);
    3a82:	4912      	ldr	r1, [pc, #72]	; (3acc <bt_ready+0x60>)
    3a84:	4812      	ldr	r0, [pc, #72]	; (3ad0 <bt_ready+0x64>)
    3a86:	f017 fe8b 	bl	1b7a0 <bt_mesh_init>
	if (err) {
    3a8a:	4604      	mov	r4, r0
    3a8c:	b110      	cbz	r0, 3a94 <bt_ready+0x28>
		printk("Initializing mesh failed (err %d)\n", err);
    3a8e:	4601      	mov	r1, r0
    3a90:	4810      	ldr	r0, [pc, #64]	; (3ad4 <bt_ready+0x68>)
    3a92:	e7ef      	b.n	3a74 <bt_ready+0x8>
		settings_load();
    3a94:	f003 fdd6 	bl	7644 <settings_load>
	if (bt_le_oob_get_local(BT_ID_DEFAULT, &oob)) {
    3a98:	4669      	mov	r1, sp
    3a9a:	4620      	mov	r0, r4
    3a9c:	f006 fb3e 	bl	a11c <bt_le_oob_get_local>
    3aa0:	b148      	cbz	r0, 3ab6 <bt_ready+0x4a>
		printk("Identity Address unavailable\n");
    3aa2:	480d      	ldr	r0, [pc, #52]	; (3ad8 <bt_ready+0x6c>)
    3aa4:	f014 fb6d 	bl	18182 <printk>
	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);
    3aa8:	2003      	movs	r0, #3
    3aaa:	f017 fe62 	bl	1b772 <bt_mesh_prov_enable>
	printk("Mesh initialized\n");
    3aae:	480b      	ldr	r0, [pc, #44]	; (3adc <bt_ready+0x70>)
    3ab0:	f014 fb67 	bl	18182 <printk>
    3ab4:	e7e0      	b.n	3a78 <bt_ready+0xc>
		memcpy(dev_uuid, oob.addr.a.val, 6);
    3ab6:	2206      	movs	r2, #6
    3ab8:	f10d 0101 	add.w	r1, sp, #1
    3abc:	4808      	ldr	r0, [pc, #32]	; (3ae0 <bt_ready+0x74>)
    3abe:	f016 faf3 	bl	1a0a8 <memcpy>
    3ac2:	e7f1      	b.n	3aa8 <bt_ready+0x3c>
    3ac4:	00020bfd 	.word	0x00020bfd
    3ac8:	00020c7b 	.word	0x00020c7b
    3acc:	00020068 	.word	0x00020068
    3ad0:	00020034 	.word	0x00020034
    3ad4:	00020c92 	.word	0x00020c92
    3ad8:	00020cb5 	.word	0x00020cb5
    3adc:	00020cd3 	.word	0x00020cd3
    3ae0:	2000925c 	.word	0x2000925c

00003ae4 <gen_onpowerup_publish>:
/* Generic Power OnOff Setup Server message handlers */

static void gen_onpowerup_publish(struct bt_mesh_model *model)
{
	int err;
	struct net_buf_simple *msg = model->pub->msg;
    3ae4:	6883      	ldr	r3, [r0, #8]
	struct generic_onpowerup_state *state = model->user_data;

	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3ae6:	889a      	ldrh	r2, [r3, #4]
{
    3ae8:	b570      	push	{r4, r5, r6, lr}
    3aea:	4604      	mov	r4, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3aec:	b1a2      	cbz	r2, 3b18 <gen_onpowerup_publish+0x34>
	struct net_buf_simple *msg = model->pub->msg;
    3aee:	691d      	ldr	r5, [r3, #16]
	struct generic_onpowerup_state *state = model->user_data;
    3af0:	6986      	ldr	r6, [r0, #24]
		return;
	}

	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_GEN_ONPOWERUP_STATUS);
    3af2:	f248 2112 	movw	r1, #33298	; 0x8212
    3af6:	4628      	mov	r0, r5
    3af8:	f018 fca0 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->onpowerup);
    3afc:	7831      	ldrb	r1, [r6, #0]
    3afe:	4628      	mov	r0, r5
    3b00:	f01b fb0b 	bl	1f11a <net_buf_simple_add_u8>

	err = bt_mesh_model_publish(model);
    3b04:	4620      	mov	r0, r4
    3b06:	f00a fd55 	bl	e5b4 <bt_mesh_model_publish>
	if (err) {
    3b0a:	4601      	mov	r1, r0
    3b0c:	b120      	cbz	r0, 3b18 <gen_onpowerup_publish+0x34>
		printk("bt_mesh_model_publish err %d\n", err);
    3b0e:	4803      	ldr	r0, [pc, #12]	; (3b1c <gen_onpowerup_publish+0x38>)
	}
}
    3b10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    3b14:	f014 bb35 	b.w	18182 <printk>
}
    3b18:	bd70      	pop	{r4, r5, r6, pc}
    3b1a:	bf00      	nop
    3b1c:	00020e82 	.word	0x00020e82

00003b20 <gen_def_trans_time_publish>:
	struct net_buf_simple *msg = model->pub->msg;
    3b20:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3b22:	889a      	ldrh	r2, [r3, #4]
{
    3b24:	b570      	push	{r4, r5, r6, lr}
    3b26:	4604      	mov	r4, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3b28:	b1a2      	cbz	r2, 3b54 <gen_def_trans_time_publish+0x34>
	struct net_buf_simple *msg = model->pub->msg;
    3b2a:	691d      	ldr	r5, [r3, #16]
	struct gen_def_trans_time_state *state = model->user_data;
    3b2c:	6986      	ldr	r6, [r0, #24]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_GEN_DEF_TRANS_TIME_STATUS);
    3b2e:	f248 2110 	movw	r1, #33296	; 0x8210
    3b32:	4628      	mov	r0, r5
    3b34:	f018 fc82 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->tt);
    3b38:	7831      	ldrb	r1, [r6, #0]
    3b3a:	4628      	mov	r0, r5
    3b3c:	f01b faed 	bl	1f11a <net_buf_simple_add_u8>
	err = bt_mesh_model_publish(model);
    3b40:	4620      	mov	r0, r4
    3b42:	f00a fd37 	bl	e5b4 <bt_mesh_model_publish>
	if (err) {
    3b46:	4601      	mov	r1, r0
    3b48:	b120      	cbz	r0, 3b54 <gen_def_trans_time_publish+0x34>
		printk("bt_mesh_model_publish err %d\n", err);
    3b4a:	4803      	ldr	r0, [pc, #12]	; (3b58 <gen_def_trans_time_publish+0x38>)
}
    3b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    3b50:	f014 bb17 	b.w	18182 <printk>
}
    3b54:	bd70      	pop	{r4, r5, r6, pc}
    3b56:	bf00      	nop
    3b58:	00020e82 	.word	0x00020e82

00003b5c <light_ctl_temp_range_publish>:
}

static void light_ctl_temp_range_publish(struct bt_mesh_model *model)
{
	int err;
	struct net_buf_simple *msg = model->pub->msg;
    3b5c:	6883      	ldr	r3, [r0, #8]
	struct light_ctl_state *state = model->user_data;

	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3b5e:	889a      	ldrh	r2, [r3, #4]
{
    3b60:	b570      	push	{r4, r5, r6, lr}
    3b62:	4605      	mov	r5, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3b64:	b1e2      	cbz	r2, 3ba0 <light_ctl_temp_range_publish+0x44>
	struct net_buf_simple *msg = model->pub->msg;
    3b66:	691c      	ldr	r4, [r3, #16]
	struct light_ctl_state *state = model->user_data;
    3b68:	6986      	ldr	r6, [r0, #24]
		return;
	}

	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_TEMP_RANGE_STATUS);
    3b6a:	f248 2163 	movw	r1, #33379	; 0x8263
    3b6e:	4620      	mov	r0, r4
    3b70:	f018 fc64 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->status_code);
    3b74:	7b31      	ldrb	r1, [r6, #12]
    3b76:	4620      	mov	r0, r4
    3b78:	f01b facf 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, state->temp_range_min);
    3b7c:	89f1      	ldrh	r1, [r6, #14]
    3b7e:	4620      	mov	r0, r4
    3b80:	f01b fad3 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->temp_range_max);
    3b84:	8a31      	ldrh	r1, [r6, #16]
    3b86:	4620      	mov	r0, r4
    3b88:	f01b facf 	bl	1f12a <net_buf_simple_add_le16>

	err = bt_mesh_model_publish(model);
    3b8c:	4628      	mov	r0, r5
    3b8e:	f00a fd11 	bl	e5b4 <bt_mesh_model_publish>
	if (err) {
    3b92:	4601      	mov	r1, r0
    3b94:	b120      	cbz	r0, 3ba0 <light_ctl_temp_range_publish+0x44>
		printk("bt_mesh_model_publish err %d\n", err);
    3b96:	4803      	ldr	r0, [pc, #12]	; (3ba4 <light_ctl_temp_range_publish+0x48>)
	}
}
    3b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    3b9c:	f014 baf1 	b.w	18182 <printk>
}
    3ba0:	bd70      	pop	{r4, r5, r6, pc}
    3ba2:	bf00      	nop
    3ba4:	00020e82 	.word	0x00020e82

00003ba8 <light_ctl_default_publish>:
	struct net_buf_simple *msg = model->pub->msg;
    3ba8:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3baa:	889a      	ldrh	r2, [r3, #4]
{
    3bac:	b570      	push	{r4, r5, r6, lr}
    3bae:	4605      	mov	r5, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3bb0:	b1e2      	cbz	r2, 3bec <light_ctl_default_publish+0x44>
	struct net_buf_simple *msg = model->pub->msg;
    3bb2:	691c      	ldr	r4, [r3, #16]
	struct light_ctl_state *state = model->user_data;
    3bb4:	6986      	ldr	r6, [r0, #24]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_DEFAULT_STATUS);
    3bb6:	f248 2168 	movw	r1, #33384	; 0x8268
    3bba:	4620      	mov	r0, r4
    3bbc:	f018 fc3e 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->lightness_def);
    3bc0:	8b31      	ldrh	r1, [r6, #24]
    3bc2:	4620      	mov	r0, r4
    3bc4:	f01b fab1 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->temp_def);
    3bc8:	8b71      	ldrh	r1, [r6, #26]
    3bca:	4620      	mov	r0, r4
    3bcc:	f01b faad 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->delta_uv_def);
    3bd0:	8c31      	ldrh	r1, [r6, #32]
    3bd2:	4620      	mov	r0, r4
    3bd4:	f01b faa9 	bl	1f12a <net_buf_simple_add_le16>
	err = bt_mesh_model_publish(model);
    3bd8:	4628      	mov	r0, r5
    3bda:	f00a fceb 	bl	e5b4 <bt_mesh_model_publish>
	if (err) {
    3bde:	4601      	mov	r1, r0
    3be0:	b120      	cbz	r0, 3bec <light_ctl_default_publish+0x44>
		printk("bt_mesh_model_publish err %d\n", err);
    3be2:	4803      	ldr	r0, [pc, #12]	; (3bf0 <light_ctl_default_publish+0x48>)
}
    3be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    3be8:	f014 bacb 	b.w	18182 <printk>
}
    3bec:	bd70      	pop	{r4, r5, r6, pc}
    3bee:	bf00      	nop
    3bf0:	00020e82 	.word	0x00020e82

00003bf4 <light_lightness_range_publish>:
	struct net_buf_simple *msg = model->pub->msg;
    3bf4:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3bf6:	889a      	ldrh	r2, [r3, #4]
{
    3bf8:	b570      	push	{r4, r5, r6, lr}
    3bfa:	4605      	mov	r5, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3bfc:	b1e2      	cbz	r2, 3c38 <light_lightness_range_publish+0x44>
	struct net_buf_simple *msg = model->pub->msg;
    3bfe:	691c      	ldr	r4, [r3, #16]
	struct light_lightness_state *state = model->user_data;
    3c00:	6986      	ldr	r6, [r0, #24]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_LIGHTNESS_RANGE_STATUS);
    3c02:	f248 2158 	movw	r1, #33368	; 0x8258
    3c06:	4620      	mov	r0, r4
    3c08:	f018 fc18 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->status_code);
    3c0c:	7b31      	ldrb	r1, [r6, #12]
    3c0e:	4620      	mov	r0, r4
    3c10:	f01b fa83 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, state->light_range_min);
    3c14:	89f1      	ldrh	r1, [r6, #14]
    3c16:	4620      	mov	r0, r4
    3c18:	f01b fa87 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->light_range_max);
    3c1c:	8a31      	ldrh	r1, [r6, #16]
    3c1e:	4620      	mov	r0, r4
    3c20:	f01b fa83 	bl	1f12a <net_buf_simple_add_le16>
	err = bt_mesh_model_publish(model);
    3c24:	4628      	mov	r0, r5
    3c26:	f00a fcc5 	bl	e5b4 <bt_mesh_model_publish>
	if (err) {
    3c2a:	4601      	mov	r1, r0
    3c2c:	b120      	cbz	r0, 3c38 <light_lightness_range_publish+0x44>
		printk("bt_mesh_model_publish err %d\n", err);
    3c2e:	4803      	ldr	r0, [pc, #12]	; (3c3c <light_lightness_range_publish+0x48>)
}
    3c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    3c34:	f014 baa5 	b.w	18182 <printk>
}
    3c38:	bd70      	pop	{r4, r5, r6, pc}
    3c3a:	bf00      	nop
    3c3c:	00020e82 	.word	0x00020e82

00003c40 <light_lightness_default_publish>:
	struct net_buf_simple *msg = model->pub->msg;
    3c40:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3c42:	889a      	ldrh	r2, [r3, #4]
{
    3c44:	b570      	push	{r4, r5, r6, lr}
    3c46:	4604      	mov	r4, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    3c48:	b1a2      	cbz	r2, 3c74 <light_lightness_default_publish+0x34>
	struct net_buf_simple *msg = model->pub->msg;
    3c4a:	691d      	ldr	r5, [r3, #16]
	struct light_lightness_state *state = model->user_data;
    3c4c:	6986      	ldr	r6, [r0, #24]
	bt_mesh_model_msg_init(msg,
    3c4e:	f248 2156 	movw	r1, #33366	; 0x8256
    3c52:	4628      	mov	r0, r5
    3c54:	f018 fbf2 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->def);
    3c58:	8971      	ldrh	r1, [r6, #10]
    3c5a:	4628      	mov	r0, r5
    3c5c:	f01b fa65 	bl	1f12a <net_buf_simple_add_le16>
	err = bt_mesh_model_publish(model);
    3c60:	4620      	mov	r0, r4
    3c62:	f00a fca7 	bl	e5b4 <bt_mesh_model_publish>
	if (err) {
    3c66:	4601      	mov	r1, r0
    3c68:	b120      	cbz	r0, 3c74 <light_lightness_default_publish+0x34>
		printk("bt_mesh_model_publish err %d\n", err);
    3c6a:	4803      	ldr	r0, [pc, #12]	; (3c78 <light_lightness_default_publish+0x38>)
}
    3c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    3c70:	f014 ba87 	b.w	18182 <printk>
}
    3c74:	bd70      	pop	{r4, r5, r6, pc}
    3c76:	bf00      	nop
    3c78:	00020e82 	.word	0x00020e82

00003c7c <light_ctl_default_status>:
}

static void light_ctl_default_status(struct bt_mesh_model *model,
				     struct bt_mesh_msg_ctx *ctx,
				     struct net_buf_simple *buf)
{
    3c7c:	b510      	push	{r4, lr}
	printk("Acknownledgement from LIGHT_CTL_SRV (Default)\n");
    3c7e:	480d      	ldr	r0, [pc, #52]	; (3cb4 <light_ctl_default_status+0x38>)
{
    3c80:	4614      	mov	r4, r2
	printk("Acknownledgement from LIGHT_CTL_SRV (Default)\n");
    3c82:	f014 fa7e 	bl	18182 <printk>
	printk("Lightness = %04x\n", net_buf_simple_pull_le16(buf));
    3c86:	4620      	mov	r0, r4
    3c88:	f01b facb 	bl	1f222 <net_buf_simple_pull_le16>
    3c8c:	4601      	mov	r1, r0
    3c8e:	480a      	ldr	r0, [pc, #40]	; (3cb8 <light_ctl_default_status+0x3c>)
    3c90:	f014 fa77 	bl	18182 <printk>
	printk("Temperature = %04x\n", net_buf_simple_pull_le16(buf));
    3c94:	4620      	mov	r0, r4
    3c96:	f01b fac4 	bl	1f222 <net_buf_simple_pull_le16>
    3c9a:	4601      	mov	r1, r0
    3c9c:	4807      	ldr	r0, [pc, #28]	; (3cbc <light_ctl_default_status+0x40>)
    3c9e:	f014 fa70 	bl	18182 <printk>
	printk("Delta UV = %04x\n", net_buf_simple_pull_le16(buf));
    3ca2:	4620      	mov	r0, r4
    3ca4:	f01b fabd 	bl	1f222 <net_buf_simple_pull_le16>
}
    3ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Delta UV = %04x\n", net_buf_simple_pull_le16(buf));
    3cac:	4601      	mov	r1, r0
    3cae:	4804      	ldr	r0, [pc, #16]	; (3cc0 <light_ctl_default_status+0x44>)
    3cb0:	f014 ba67 	b.w	18182 <printk>
    3cb4:	00020f0e 	.word	0x00020f0e
    3cb8:	00020fb4 	.word	0x00020fb4
    3cbc:	0002110c 	.word	0x0002110c
    3cc0:	0002112b 	.word	0x0002112b

00003cc4 <light_lightness_default_status>:
{
    3cc4:	b510      	push	{r4, lr}
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Default)\n");
    3cc6:	4806      	ldr	r0, [pc, #24]	; (3ce0 <light_lightness_default_status+0x1c>)
{
    3cc8:	4614      	mov	r4, r2
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Default)\n");
    3cca:	f014 fa5a 	bl	18182 <printk>
	printk("Lightness = %04x\n", net_buf_simple_pull_le16(buf));
    3cce:	4620      	mov	r0, r4
    3cd0:	f01b faa7 	bl	1f222 <net_buf_simple_pull_le16>
}
    3cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Lightness = %04x\n", net_buf_simple_pull_le16(buf));
    3cd8:	4601      	mov	r1, r0
    3cda:	4802      	ldr	r0, [pc, #8]	; (3ce4 <light_lightness_default_status+0x20>)
    3cdc:	f014 ba51 	b.w	18182 <printk>
    3ce0:	00021185 	.word	0x00021185
    3ce4:	00020fb4 	.word	0x00020fb4

00003ce8 <light_lightness_last_status>:
{
    3ce8:	b510      	push	{r4, lr}
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Last)\n");
    3cea:	4806      	ldr	r0, [pc, #24]	; (3d04 <light_lightness_last_status+0x1c>)
{
    3cec:	4614      	mov	r4, r2
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Last)\n");
    3cee:	f014 fa48 	bl	18182 <printk>
	printk("Lightness = %04x\n", net_buf_simple_pull_le16(buf));
    3cf2:	4620      	mov	r0, r4
    3cf4:	f01b fa95 	bl	1f222 <net_buf_simple_pull_le16>
}
    3cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Lightness = %04x\n", net_buf_simple_pull_le16(buf));
    3cfc:	4601      	mov	r1, r0
    3cfe:	4802      	ldr	r0, [pc, #8]	; (3d08 <light_lightness_last_status+0x20>)
    3d00:	f014 ba3f 	b.w	18182 <printk>
    3d04:	0002121f 	.word	0x0002121f
    3d08:	00020fb4 	.word	0x00020fb4

00003d0c <light_ctl_temp_range_status>:
{
    3d0c:	b510      	push	{r4, lr}
	printk("Acknownledgement from LIGHT_CTL_SRV (Temperature Range)\n");
    3d0e:	480d      	ldr	r0, [pc, #52]	; (3d44 <light_ctl_temp_range_status+0x38>)
{
    3d10:	4614      	mov	r4, r2
	printk("Acknownledgement from LIGHT_CTL_SRV (Temperature Range)\n");
    3d12:	f014 fa36 	bl	18182 <printk>
	printk("Status Code = %02x\n", net_buf_simple_pull_u8(buf));
    3d16:	4620      	mov	r0, r4
    3d18:	f01b fa7b 	bl	1f212 <net_buf_simple_pull_u8>
    3d1c:	4601      	mov	r1, r0
    3d1e:	480a      	ldr	r0, [pc, #40]	; (3d48 <light_ctl_temp_range_status+0x3c>)
    3d20:	f014 fa2f 	bl	18182 <printk>
	printk("Range Min = %04x\n", net_buf_simple_pull_le16(buf));
    3d24:	4620      	mov	r0, r4
    3d26:	f01b fa7c 	bl	1f222 <net_buf_simple_pull_le16>
    3d2a:	4601      	mov	r1, r0
    3d2c:	4807      	ldr	r0, [pc, #28]	; (3d4c <light_ctl_temp_range_status+0x40>)
    3d2e:	f014 fa28 	bl	18182 <printk>
	printk("Range Max = %04x\n", net_buf_simple_pull_le16(buf));
    3d32:	4620      	mov	r0, r4
    3d34:	f01b fa75 	bl	1f222 <net_buf_simple_pull_le16>
}
    3d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Range Max = %04x\n", net_buf_simple_pull_le16(buf));
    3d3c:	4601      	mov	r1, r0
    3d3e:	4804      	ldr	r0, [pc, #16]	; (3d50 <light_ctl_temp_range_status+0x44>)
    3d40:	f014 ba1f 	b.w	18182 <printk>
    3d44:	00021029 	.word	0x00021029
    3d48:	00021062 	.word	0x00021062
    3d4c:	00021076 	.word	0x00021076
    3d50:	00021088 	.word	0x00021088

00003d54 <light_lightness_range_status>:
{
    3d54:	b510      	push	{r4, lr}
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Lightness Range)\n");
    3d56:	480d      	ldr	r0, [pc, #52]	; (3d8c <light_lightness_range_status+0x38>)
{
    3d58:	4614      	mov	r4, r2
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Lightness Range)\n");
    3d5a:	f014 fa12 	bl	18182 <printk>
	printk("Status Code = %02x\n", net_buf_simple_pull_u8(buf));
    3d5e:	4620      	mov	r0, r4
    3d60:	f01b fa57 	bl	1f212 <net_buf_simple_pull_u8>
    3d64:	4601      	mov	r1, r0
    3d66:	480a      	ldr	r0, [pc, #40]	; (3d90 <light_lightness_range_status+0x3c>)
    3d68:	f014 fa0b 	bl	18182 <printk>
	printk("Range Min = %04x\n", net_buf_simple_pull_le16(buf));
    3d6c:	4620      	mov	r0, r4
    3d6e:	f01b fa58 	bl	1f222 <net_buf_simple_pull_le16>
    3d72:	4601      	mov	r1, r0
    3d74:	4807      	ldr	r0, [pc, #28]	; (3d94 <light_lightness_range_status+0x40>)
    3d76:	f014 fa04 	bl	18182 <printk>
	printk("Range Max = %04x\n", net_buf_simple_pull_le16(buf));
    3d7a:	4620      	mov	r0, r4
    3d7c:	f01b fa51 	bl	1f222 <net_buf_simple_pull_le16>
}
    3d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Range Max = %04x\n", net_buf_simple_pull_le16(buf));
    3d84:	4601      	mov	r1, r0
    3d86:	4804      	ldr	r0, [pc, #16]	; (3d98 <light_lightness_range_status+0x44>)
    3d88:	f014 b9fb 	b.w	18182 <printk>
    3d8c:	0002131e 	.word	0x0002131e
    3d90:	00021062 	.word	0x00021062
    3d94:	00021076 	.word	0x00021076
    3d98:	00021088 	.word	0x00021088

00003d9c <gen_onpowerup_status>:
{
    3d9c:	b510      	push	{r4, lr}
	printk("Acknownledgement from GEN_POWER_ONOFF_SRV\n");
    3d9e:	4806      	ldr	r0, [pc, #24]	; (3db8 <gen_onpowerup_status+0x1c>)
{
    3da0:	4614      	mov	r4, r2
	printk("Acknownledgement from GEN_POWER_ONOFF_SRV\n");
    3da2:	f014 f9ee 	bl	18182 <printk>
	printk("OnPowerUp = %02x\n", net_buf_simple_pull_u8(buf));
    3da6:	4620      	mov	r0, r4
    3da8:	f01b fa33 	bl	1f212 <net_buf_simple_pull_u8>
}
    3dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("OnPowerUp = %02x\n", net_buf_simple_pull_u8(buf));
    3db0:	4601      	mov	r1, r0
    3db2:	4802      	ldr	r0, [pc, #8]	; (3dbc <gen_onpowerup_status+0x20>)
    3db4:	f014 b9e5 	b.w	18182 <printk>
    3db8:	00020ea0 	.word	0x00020ea0
    3dbc:	00020ecb 	.word	0x00020ecb

00003dc0 <gen_def_trans_time_status>:
{
    3dc0:	b510      	push	{r4, lr}
	printk("Acknownledgement from GEN_DEF_TT_SRV\n");
    3dc2:	4806      	ldr	r0, [pc, #24]	; (3ddc <gen_def_trans_time_status+0x1c>)
{
    3dc4:	4614      	mov	r4, r2
	printk("Acknownledgement from GEN_DEF_TT_SRV\n");
    3dc6:	f014 f9dc 	bl	18182 <printk>
	printk("Transition Time = %02x\n", net_buf_simple_pull_u8(buf));
    3dca:	4620      	mov	r0, r4
    3dcc:	f01b fa21 	bl	1f212 <net_buf_simple_pull_u8>
}
    3dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Transition Time = %02x\n", net_buf_simple_pull_u8(buf));
    3dd4:	4601      	mov	r1, r0
    3dd6:	4802      	ldr	r0, [pc, #8]	; (3de0 <gen_def_trans_time_status+0x20>)
    3dd8:	f014 b9d3 	b.w	18182 <printk>
    3ddc:	00020d14 	.word	0x00020d14
    3de0:	00020d3a 	.word	0x00020d3a

00003de4 <light_lightness_default_set_unack>:
{
    3de4:	b538      	push	{r3, r4, r5, lr}
	struct light_lightness_state *state = model->user_data;
    3de6:	6985      	ldr	r5, [r0, #24]
{
    3de8:	4604      	mov	r4, r0
	lightness = net_buf_simple_pull_le16(buf);
    3dea:	4610      	mov	r0, r2
    3dec:	f01b fa19 	bl	1f222 <net_buf_simple_pull_le16>
	if (state->def != lightness) {
    3df0:	896b      	ldrh	r3, [r5, #10]
    3df2:	4283      	cmp	r3, r0
    3df4:	d005      	beq.n	3e02 <light_lightness_default_set_unack+0x1e>
		light_ctl_srv_user_data.lightness_def = state->def;
    3df6:	4b05      	ldr	r3, [pc, #20]	; (3e0c <light_lightness_default_set_unack+0x28>)
		state->def = lightness;
    3df8:	8168      	strh	r0, [r5, #10]
		light_ctl_srv_user_data.lightness_def = state->def;
    3dfa:	8318      	strh	r0, [r3, #24]
		save_on_flash(LIGHTNESS_TEMP_DEF_STATE);
    3dfc:	2004      	movs	r0, #4
    3dfe:	f002 fa5d 	bl	62bc <save_on_flash>
	light_lightness_default_publish(model);
    3e02:	4620      	mov	r0, r4
}
    3e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	light_lightness_default_publish(model);
    3e08:	f7ff bf1a 	b.w	3c40 <light_lightness_default_publish>
    3e0c:	20007be0 	.word	0x20007be0

00003e10 <light_ctl_temp_range_get>:
{
    3e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e12:	4606      	mov	r6, r0
    3e14:	b089      	sub	sp, #36	; 0x24
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    3e16:	2218      	movs	r2, #24
{
    3e18:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    3e1a:	a802      	add	r0, sp, #8
    3e1c:	2100      	movs	r1, #0
    3e1e:	f016 f96d 	bl	1a0fc <memset>
	struct light_ctl_state *state = model->user_data;
    3e22:	69b4      	ldr	r4, [r6, #24]
	state->status_code = RANGE_SUCCESSFULLY_UPDATED;
    3e24:	2500      	movs	r5, #0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    3e26:	230b      	movs	r3, #11
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_TEMP_RANGE_STATUS);
    3e28:	f248 2163 	movw	r1, #33379	; 0x8263
    3e2c:	a802      	add	r0, sp, #8
	state->status_code = RANGE_SUCCESSFULLY_UPDATED;
    3e2e:	7325      	strb	r5, [r4, #12]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    3e30:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_TEMP_RANGE_STATUS);
    3e34:	f018 fb02 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->status_code);
    3e38:	7b21      	ldrb	r1, [r4, #12]
    3e3a:	a802      	add	r0, sp, #8
    3e3c:	f01b f96d 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, state->temp_range_min);
    3e40:	89e1      	ldrh	r1, [r4, #14]
    3e42:	a802      	add	r0, sp, #8
    3e44:	f01b f971 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->temp_range_max);
    3e48:	8a21      	ldrh	r1, [r4, #16]
    3e4a:	a802      	add	r0, sp, #8
    3e4c:	f01b f96d 	bl	1f12a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    3e50:	9500      	str	r5, [sp, #0]
    3e52:	462b      	mov	r3, r5
    3e54:	aa02      	add	r2, sp, #8
    3e56:	4639      	mov	r1, r7
    3e58:	4630      	mov	r0, r6
    3e5a:	f018 fb18 	bl	1c48e <bt_mesh_model_send>
    3e5e:	b110      	cbz	r0, 3e66 <light_ctl_temp_range_get+0x56>
		printk("Unable to send LightCTL Temp Range Status response\n");
    3e60:	4802      	ldr	r0, [pc, #8]	; (3e6c <light_ctl_temp_range_get+0x5c>)
    3e62:	f014 f98e 	bl	18182 <printk>
}
    3e66:	b009      	add	sp, #36	; 0x24
    3e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e6a:	bf00      	nop
    3e6c:	00020ff5 	.word	0x00020ff5

00003e70 <light_ctl_default_get>:
{
    3e70:	b570      	push	{r4, r5, r6, lr}
    3e72:	4605      	mov	r5, r0
    3e74:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 6 + 4);
    3e76:	2218      	movs	r2, #24
{
    3e78:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 6 + 4);
    3e7a:	a802      	add	r0, sp, #8
    3e7c:	2100      	movs	r1, #0
    3e7e:	f016 f93d 	bl	1a0fc <memset>
	struct light_ctl_state *state = model->user_data;
    3e82:	69ac      	ldr	r4, [r5, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 6 + 4);
    3e84:	230c      	movs	r3, #12
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_DEFAULT_STATUS);
    3e86:	f248 2168 	movw	r1, #33384	; 0x8268
    3e8a:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 6 + 4);
    3e8c:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_DEFAULT_STATUS);
    3e90:	f018 fad4 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->lightness_def);
    3e94:	8b21      	ldrh	r1, [r4, #24]
    3e96:	a802      	add	r0, sp, #8
    3e98:	f01b f947 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->temp_def);
    3e9c:	8b61      	ldrh	r1, [r4, #26]
    3e9e:	a802      	add	r0, sp, #8
    3ea0:	f01b f943 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->delta_uv_def);
    3ea4:	8c21      	ldrh	r1, [r4, #32]
    3ea6:	a802      	add	r0, sp, #8
    3ea8:	f01b f93f 	bl	1f12a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    3eac:	2300      	movs	r3, #0
    3eae:	9300      	str	r3, [sp, #0]
    3eb0:	aa02      	add	r2, sp, #8
    3eb2:	4631      	mov	r1, r6
    3eb4:	4628      	mov	r0, r5
    3eb6:	f018 faea 	bl	1c48e <bt_mesh_model_send>
    3eba:	b110      	cbz	r0, 3ec2 <light_ctl_default_get+0x52>
		printk("Unable to send LightCTL Default Status response\n");
    3ebc:	4802      	ldr	r0, [pc, #8]	; (3ec8 <light_ctl_default_get+0x58>)
    3ebe:	f014 f960 	bl	18182 <printk>
}
    3ec2:	b008      	add	sp, #32
    3ec4:	bd70      	pop	{r4, r5, r6, pc}
    3ec6:	bf00      	nop
    3ec8:	00020edd 	.word	0x00020edd

00003ecc <light_ctl_get>:
{
    3ecc:	b570      	push	{r4, r5, r6, lr}
    3ece:	4605      	mov	r5, r0
    3ed0:	b08a      	sub	sp, #40	; 0x28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    3ed2:	221c      	movs	r2, #28
{
    3ed4:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    3ed6:	a803      	add	r0, sp, #12
    3ed8:	2100      	movs	r1, #0
    3eda:	f016 f90f 	bl	1a0fc <memset>
	struct light_ctl_state *state = model->user_data;
    3ede:	69ac      	ldr	r4, [r5, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    3ee0:	230f      	movs	r3, #15
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_STATUS);
    3ee2:	f248 2160 	movw	r1, #33376	; 0x8260
    3ee6:	a803      	add	r0, sp, #12
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    3ee8:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_STATUS);
    3eec:	f018 faa6 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->lightness);
    3ef0:	8821      	ldrh	r1, [r4, #0]
    3ef2:	a803      	add	r0, sp, #12
    3ef4:	f01b f919 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->temp);
    3ef8:	a803      	add	r0, sp, #12
    3efa:	88a1      	ldrh	r1, [r4, #4]
    3efc:	f01b f915 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
    3f00:	6c60      	ldr	r0, [r4, #68]	; 0x44
    3f02:	6883      	ldr	r3, [r0, #8]
    3f04:	b173      	cbz	r3, 3f24 <light_ctl_get+0x58>
		calculate_rt(state->transition);
    3f06:	f002 fc8f 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_lightness);
    3f0a:	8861      	ldrh	r1, [r4, #2]
    3f0c:	a803      	add	r0, sp, #12
    3f0e:	f01b f90c 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, state->target_temp);
    3f12:	88e1      	ldrh	r1, [r4, #6]
    3f14:	a803      	add	r0, sp, #12
    3f16:	f01b f908 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
    3f1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3f1c:	a803      	add	r0, sp, #12
    3f1e:	7899      	ldrb	r1, [r3, #2]
    3f20:	f01b f8fb 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    3f24:	2300      	movs	r3, #0
    3f26:	9300      	str	r3, [sp, #0]
    3f28:	aa03      	add	r2, sp, #12
    3f2a:	4631      	mov	r1, r6
    3f2c:	4628      	mov	r0, r5
    3f2e:	f018 faae 	bl	1c48e <bt_mesh_model_send>
    3f32:	b110      	cbz	r0, 3f3a <light_ctl_get+0x6e>
		printk("Unable to send LightCTL Status response\n");
    3f34:	4802      	ldr	r0, [pc, #8]	; (3f40 <light_ctl_get+0x74>)
    3f36:	f014 f924 	bl	18182 <printk>
}
    3f3a:	b00a      	add	sp, #40	; 0x28
    3f3c:	bd70      	pop	{r4, r5, r6, pc}
    3f3e:	bf00      	nop
    3f40:	00020f3d 	.word	0x00020f3d

00003f44 <light_lightness_range_get>:
{
    3f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f46:	4606      	mov	r6, r0
    3f48:	b089      	sub	sp, #36	; 0x24
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    3f4a:	2218      	movs	r2, #24
{
    3f4c:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    3f4e:	a802      	add	r0, sp, #8
    3f50:	2100      	movs	r1, #0
    3f52:	f016 f8d3 	bl	1a0fc <memset>
	struct light_lightness_state *state = model->user_data;
    3f56:	69b4      	ldr	r4, [r6, #24]
	state->status_code = RANGE_SUCCESSFULLY_UPDATED;
    3f58:	2500      	movs	r5, #0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    3f5a:	230b      	movs	r3, #11
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_LIGHTNESS_RANGE_STATUS);
    3f5c:	f248 2158 	movw	r1, #33368	; 0x8258
    3f60:	a802      	add	r0, sp, #8
	state->status_code = RANGE_SUCCESSFULLY_UPDATED;
    3f62:	7325      	strb	r5, [r4, #12]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    3f64:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_LIGHTNESS_RANGE_STATUS);
    3f68:	f018 fa68 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->status_code);
    3f6c:	7b21      	ldrb	r1, [r4, #12]
    3f6e:	a802      	add	r0, sp, #8
    3f70:	f01b f8d3 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, state->light_range_min);
    3f74:	89e1      	ldrh	r1, [r4, #14]
    3f76:	a802      	add	r0, sp, #8
    3f78:	f01b f8d7 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->light_range_max);
    3f7c:	8a21      	ldrh	r1, [r4, #16]
    3f7e:	a802      	add	r0, sp, #8
    3f80:	f01b f8d3 	bl	1f12a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    3f84:	9500      	str	r5, [sp, #0]
    3f86:	462b      	mov	r3, r5
    3f88:	aa02      	add	r2, sp, #8
    3f8a:	4639      	mov	r1, r7
    3f8c:	4630      	mov	r0, r6
    3f8e:	f018 fa7e 	bl	1c48e <bt_mesh_model_send>
    3f92:	b110      	cbz	r0, 3f9a <light_lightness_range_get+0x56>
		printk("Unable to send LightLightnessRange Status response\n");
    3f94:	4802      	ldr	r0, [pc, #8]	; (3fa0 <light_lightness_range_get+0x5c>)
    3f96:	f014 f8f4 	bl	18182 <printk>
}
    3f9a:	b009      	add	sp, #36	; 0x24
    3f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f9e:	bf00      	nop
    3fa0:	000212ea 	.word	0x000212ea

00003fa4 <light_lightness_default_get>:
{
    3fa4:	b570      	push	{r4, r5, r6, lr}
    3fa6:	4604      	mov	r4, r0
    3fa8:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    3faa:	2214      	movs	r2, #20
{
    3fac:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    3fae:	a803      	add	r0, sp, #12
    3fb0:	2100      	movs	r1, #0
    3fb2:	f016 f8a3 	bl	1a0fc <memset>
	struct light_lightness_state *state = model->user_data;
    3fb6:	69a6      	ldr	r6, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    3fb8:	2308      	movs	r3, #8
	bt_mesh_model_msg_init(msg,
    3fba:	f248 2156 	movw	r1, #33366	; 0x8256
    3fbe:	a803      	add	r0, sp, #12
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    3fc0:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg,
    3fc4:	f018 fa3a 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->def);
    3fc8:	8971      	ldrh	r1, [r6, #10]
    3fca:	a803      	add	r0, sp, #12
    3fcc:	f01b f8ad 	bl	1f12a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    3fd0:	2300      	movs	r3, #0
    3fd2:	9300      	str	r3, [sp, #0]
    3fd4:	aa03      	add	r2, sp, #12
    3fd6:	4629      	mov	r1, r5
    3fd8:	4620      	mov	r0, r4
    3fda:	f018 fa58 	bl	1c48e <bt_mesh_model_send>
    3fde:	b110      	cbz	r0, 3fe6 <light_lightness_default_get+0x42>
		printk("Unable to send LightLightnessDef Status response\n");
    3fe0:	4802      	ldr	r0, [pc, #8]	; (3fec <light_lightness_default_get+0x48>)
    3fe2:	f014 f8ce 	bl	18182 <printk>
}
    3fe6:	b008      	add	sp, #32
    3fe8:	bd70      	pop	{r4, r5, r6, pc}
    3fea:	bf00      	nop
    3fec:	00021153 	.word	0x00021153

00003ff0 <light_lightness_last_get>:
{
    3ff0:	b570      	push	{r4, r5, r6, lr}
    3ff2:	4604      	mov	r4, r0
    3ff4:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    3ff6:	2214      	movs	r2, #20
{
    3ff8:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    3ffa:	a803      	add	r0, sp, #12
    3ffc:	2100      	movs	r1, #0
    3ffe:	f016 f87d 	bl	1a0fc <memset>
	struct light_lightness_state *state = model->user_data;
    4002:	69a6      	ldr	r6, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    4004:	2308      	movs	r3, #8
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_LIGHTNESS_LAST_STATUS);
    4006:	f248 2154 	movw	r1, #33364	; 0x8254
    400a:	a803      	add	r0, sp, #12
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    400c:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_LIGHTNESS_LAST_STATUS);
    4010:	f018 fa14 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->last);
    4014:	8931      	ldrh	r1, [r6, #8]
    4016:	a803      	add	r0, sp, #12
    4018:	f01b f887 	bl	1f12a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    401c:	2300      	movs	r3, #0
    401e:	9300      	str	r3, [sp, #0]
    4020:	aa03      	add	r2, sp, #12
    4022:	4629      	mov	r1, r5
    4024:	4620      	mov	r0, r4
    4026:	f018 fa32 	bl	1c48e <bt_mesh_model_send>
    402a:	b110      	cbz	r0, 4032 <light_lightness_last_get+0x42>
		printk("Unable to send LightLightnessLast Status response\n");
    402c:	4802      	ldr	r0, [pc, #8]	; (4038 <light_lightness_last_get+0x48>)
    402e:	f014 f8a8 	bl	18182 <printk>
}
    4032:	b008      	add	sp, #32
    4034:	bd70      	pop	{r4, r5, r6, pc}
    4036:	bf00      	nop
    4038:	000211ec 	.word	0x000211ec

0000403c <light_lightness_linear_get>:
{
    403c:	b570      	push	{r4, r5, r6, lr}
    403e:	4605      	mov	r5, r0
    4040:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    4042:	2218      	movs	r2, #24
{
    4044:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    4046:	a802      	add	r0, sp, #8
    4048:	2100      	movs	r1, #0
    404a:	f016 f857 	bl	1a0fc <memset>
	struct light_lightness_state *state = model->user_data;
    404e:	69ac      	ldr	r4, [r5, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    4050:	230b      	movs	r3, #11
	bt_mesh_model_msg_init(msg,
    4052:	f248 2152 	movw	r1, #33362	; 0x8252
    4056:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    4058:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg,
    405c:	f018 f9ee 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->linear);
    4060:	a802      	add	r0, sp, #8
    4062:	8821      	ldrh	r1, [r4, #0]
    4064:	f01b f861 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
    4068:	6b20      	ldr	r0, [r4, #48]	; 0x30
    406a:	6883      	ldr	r3, [r0, #8]
    406c:	b153      	cbz	r3, 4084 <light_lightness_linear_get+0x48>
		calculate_rt(state->transition);
    406e:	f002 fbdb 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_linear);
    4072:	8861      	ldrh	r1, [r4, #2]
    4074:	a802      	add	r0, sp, #8
    4076:	f01b f858 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
    407a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    407c:	a802      	add	r0, sp, #8
    407e:	7899      	ldrb	r1, [r3, #2]
    4080:	f01b f84b 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    4084:	2300      	movs	r3, #0
    4086:	9300      	str	r3, [sp, #0]
    4088:	aa02      	add	r2, sp, #8
    408a:	4631      	mov	r1, r6
    408c:	4628      	mov	r0, r5
    408e:	f018 f9fe 	bl	1c48e <bt_mesh_model_send>
    4092:	b110      	cbz	r0, 409a <light_lightness_linear_get+0x5e>
		printk("Unable to send LightLightnessLin Status response\n");
    4094:	4802      	ldr	r0, [pc, #8]	; (40a0 <light_lightness_linear_get+0x64>)
    4096:	f014 f874 	bl	18182 <printk>
}
    409a:	b008      	add	sp, #32
    409c:	bd70      	pop	{r4, r5, r6, pc}
    409e:	bf00      	nop
    40a0:	00021251 	.word	0x00021251

000040a4 <light_lightness_get>:
{
    40a4:	b570      	push	{r4, r5, r6, lr}
    40a6:	4605      	mov	r5, r0
    40a8:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    40aa:	2218      	movs	r2, #24
{
    40ac:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    40ae:	a802      	add	r0, sp, #8
    40b0:	2100      	movs	r1, #0
    40b2:	f016 f823 	bl	1a0fc <memset>
	struct light_lightness_state *state = model->user_data;
    40b6:	69ac      	ldr	r4, [r5, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    40b8:	230b      	movs	r3, #11
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_LIGHTNESS_STATUS);
    40ba:	f248 214e 	movw	r1, #33358	; 0x824e
    40be:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    40c0:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_LIGHTNESS_STATUS);
    40c4:	f018 f9ba 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->actual);
    40c8:	a802      	add	r0, sp, #8
    40ca:	88a1      	ldrh	r1, [r4, #4]
    40cc:	f01b f82d 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
    40d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    40d2:	6883      	ldr	r3, [r0, #8]
    40d4:	b153      	cbz	r3, 40ec <light_lightness_get+0x48>
		calculate_rt(state->transition);
    40d6:	f002 fba7 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_actual);
    40da:	88e1      	ldrh	r1, [r4, #6]
    40dc:	a802      	add	r0, sp, #8
    40de:	f01b f824 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
    40e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    40e4:	a802      	add	r0, sp, #8
    40e6:	7899      	ldrb	r1, [r3, #2]
    40e8:	f01b f817 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    40ec:	2300      	movs	r3, #0
    40ee:	9300      	str	r3, [sp, #0]
    40f0:	aa02      	add	r2, sp, #8
    40f2:	4631      	mov	r1, r6
    40f4:	4628      	mov	r0, r5
    40f6:	f018 f9ca 	bl	1c48e <bt_mesh_model_send>
    40fa:	b110      	cbz	r0, 4102 <light_lightness_get+0x5e>
		printk("Unable to send LightLightnessAct Status response\n");
    40fc:	4802      	ldr	r0, [pc, #8]	; (4108 <light_lightness_get+0x64>)
    40fe:	f014 f840 	bl	18182 <printk>
}
    4102:	b008      	add	sp, #32
    4104:	bd70      	pop	{r4, r5, r6, pc}
    4106:	bf00      	nop
    4108:	000211ba 	.word	0x000211ba

0000410c <gen_onpowerup_get>:
{
    410c:	b570      	push	{r4, r5, r6, lr}
    410e:	4604      	mov	r4, r0
    4110:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    4112:	2214      	movs	r2, #20
{
    4114:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    4116:	a803      	add	r0, sp, #12
    4118:	2100      	movs	r1, #0
    411a:	f015 ffef 	bl	1a0fc <memset>
	struct generic_onpowerup_state *state = model->user_data;
    411e:	69a6      	ldr	r6, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    4120:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_GEN_ONPOWERUP_STATUS);
    4122:	f248 2112 	movw	r1, #33298	; 0x8212
    4126:	a803      	add	r0, sp, #12
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    4128:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_GEN_ONPOWERUP_STATUS);
    412c:	f018 f986 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->onpowerup);
    4130:	7831      	ldrb	r1, [r6, #0]
    4132:	a803      	add	r0, sp, #12
    4134:	f01a fff1 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    4138:	2300      	movs	r3, #0
    413a:	9300      	str	r3, [sp, #0]
    413c:	aa03      	add	r2, sp, #12
    413e:	4629      	mov	r1, r5
    4140:	4620      	mov	r0, r4
    4142:	f018 f9a4 	bl	1c48e <bt_mesh_model_send>
    4146:	b110      	cbz	r0, 414e <gen_onpowerup_get+0x42>
		printk("Unable to send GEN_POWER_ONOFF_SRV Status response\n");
    4148:	4802      	ldr	r0, [pc, #8]	; (4154 <gen_onpowerup_get+0x48>)
    414a:	f014 f81a 	bl	18182 <printk>
}
    414e:	b008      	add	sp, #32
    4150:	bd70      	pop	{r4, r5, r6, pc}
    4152:	bf00      	nop
    4154:	00020e4e 	.word	0x00020e4e

00004158 <gen_def_trans_time_get>:
{
    4158:	b570      	push	{r4, r5, r6, lr}
    415a:	4604      	mov	r4, r0
    415c:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    415e:	2214      	movs	r2, #20
{
    4160:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    4162:	a803      	add	r0, sp, #12
    4164:	2100      	movs	r1, #0
    4166:	f015 ffc9 	bl	1a0fc <memset>
	struct gen_def_trans_time_state *state = model->user_data;
    416a:	69a6      	ldr	r6, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    416c:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_GEN_DEF_TRANS_TIME_STATUS);
    416e:	f248 2110 	movw	r1, #33296	; 0x8210
    4172:	a803      	add	r0, sp, #12
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    4174:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_GEN_DEF_TRANS_TIME_STATUS);
    4178:	f018 f960 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->tt);
    417c:	7831      	ldrb	r1, [r6, #0]
    417e:	a803      	add	r0, sp, #12
    4180:	f01a ffcb 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    4184:	2300      	movs	r3, #0
    4186:	9300      	str	r3, [sp, #0]
    4188:	aa03      	add	r2, sp, #12
    418a:	4629      	mov	r1, r5
    418c:	4620      	mov	r0, r4
    418e:	f018 f97e 	bl	1c48e <bt_mesh_model_send>
    4192:	b110      	cbz	r0, 419a <gen_def_trans_time_get+0x42>
		printk("Unable to send GEN_DEF_TT_SRV Status response\n");
    4194:	4802      	ldr	r0, [pc, #8]	; (41a0 <gen_def_trans_time_get+0x48>)
    4196:	f013 fff4 	bl	18182 <printk>
}
    419a:	b008      	add	sp, #32
    419c:	bd70      	pop	{r4, r5, r6, pc}
    419e:	bf00      	nop
    41a0:	00020ce5 	.word	0x00020ce5

000041a4 <gen_level_get>:
{
    41a4:	b570      	push	{r4, r5, r6, lr}
    41a6:	4605      	mov	r5, r0
    41a8:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    41aa:	2218      	movs	r2, #24
{
    41ac:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    41ae:	a802      	add	r0, sp, #8
    41b0:	2100      	movs	r1, #0
    41b2:	f015 ffa3 	bl	1a0fc <memset>
	struct generic_level_state *state = model->user_data;
    41b6:	69ac      	ldr	r4, [r5, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    41b8:	230b      	movs	r3, #11
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_GEN_LEVEL_STATUS);
    41ba:	f248 2108 	movw	r1, #33288	; 0x8208
    41be:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    41c0:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_GEN_LEVEL_STATUS);
    41c4:	f018 f93a 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->level);
    41c8:	a802      	add	r0, sp, #8
    41ca:	8821      	ldrh	r1, [r4, #0]
    41cc:	f01a ffad 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
    41d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    41d2:	6883      	ldr	r3, [r0, #8]
    41d4:	b153      	cbz	r3, 41ec <gen_level_get+0x48>
		calculate_rt(state->transition);
    41d6:	f002 fb27 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_level);
    41da:	8861      	ldrh	r1, [r4, #2]
    41dc:	a802      	add	r0, sp, #8
    41de:	f01a ffa4 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
    41e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    41e4:	a802      	add	r0, sp, #8
    41e6:	7899      	ldrb	r1, [r3, #2]
    41e8:	f01a ff97 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    41ec:	2300      	movs	r3, #0
    41ee:	9300      	str	r3, [sp, #0]
    41f0:	aa02      	add	r2, sp, #8
    41f2:	4631      	mov	r1, r6
    41f4:	4628      	mov	r0, r5
    41f6:	f018 f94a 	bl	1c48e <bt_mesh_model_send>
    41fa:	b110      	cbz	r0, 4202 <gen_level_get+0x5e>
		printk("Unable to send GEN_LEVEL_SRV Status response\n");
    41fc:	4802      	ldr	r0, [pc, #8]	; (4208 <gen_level_get+0x64>)
    41fe:	f013 ffc0 	bl	18182 <printk>
}
    4202:	b008      	add	sp, #32
    4204:	bd70      	pop	{r4, r5, r6, pc}
    4206:	bf00      	nop
    4208:	00020d52 	.word	0x00020d52

0000420c <gen_onoff_get>:
{
    420c:	b570      	push	{r4, r5, r6, lr}
    420e:	4605      	mov	r5, r0
    4210:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
    4212:	2218      	movs	r2, #24
{
    4214:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
    4216:	a802      	add	r0, sp, #8
    4218:	2100      	movs	r1, #0
    421a:	f015 ff6f 	bl	1a0fc <memset>
	struct generic_onoff_state *state = model->user_data;
    421e:	69ac      	ldr	r4, [r5, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
    4220:	2309      	movs	r3, #9
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_GEN_ONOFF_STATUS);
    4222:	f248 2104 	movw	r1, #33284	; 0x8204
    4226:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
    4228:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_GEN_ONOFF_STATUS);
    422c:	f018 f906 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->onoff);
    4230:	7821      	ldrb	r1, [r4, #0]
    4232:	a802      	add	r0, sp, #8
    4234:	f01a ff71 	bl	1f11a <net_buf_simple_add_u8>
	if (state->transition->counter) {
    4238:	6960      	ldr	r0, [r4, #20]
    423a:	6883      	ldr	r3, [r0, #8]
    423c:	b153      	cbz	r3, 4254 <gen_onoff_get+0x48>
		calculate_rt(state->transition);
    423e:	f002 faf3 	bl	6828 <calculate_rt>
		net_buf_simple_add_u8(msg, state->target_onoff);
    4242:	7861      	ldrb	r1, [r4, #1]
    4244:	a802      	add	r0, sp, #8
    4246:	f01a ff68 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, state->transition->rt);
    424a:	6963      	ldr	r3, [r4, #20]
    424c:	a802      	add	r0, sp, #8
    424e:	7899      	ldrb	r1, [r3, #2]
    4250:	f01a ff63 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    4254:	2300      	movs	r3, #0
    4256:	9300      	str	r3, [sp, #0]
    4258:	aa02      	add	r2, sp, #8
    425a:	4631      	mov	r1, r6
    425c:	4628      	mov	r0, r5
    425e:	f018 f916 	bl	1c48e <bt_mesh_model_send>
    4262:	b110      	cbz	r0, 426a <gen_onoff_get+0x5e>
		printk("Unable to send GEN_ONOFF_SRV Status response\n");
    4264:	4802      	ldr	r0, [pc, #8]	; (4270 <gen_onoff_get+0x64>)
    4266:	f013 ff8c 	bl	18182 <printk>
}
    426a:	b008      	add	sp, #32
    426c:	bd70      	pop	{r4, r5, r6, pc}
    426e:	bf00      	nop
    4270:	00020dd0 	.word	0x00020dd0

00004274 <light_ctl_temp_get>:

/* Light CTL Temp. Server message handlers */
static void light_ctl_temp_get(struct bt_mesh_model *model,
			       struct bt_mesh_msg_ctx *ctx,
			       struct net_buf_simple *buf)
{
    4274:	b570      	push	{r4, r5, r6, lr}
    4276:	4605      	mov	r5, r0
    4278:	b08a      	sub	sp, #40	; 0x28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    427a:	221c      	movs	r2, #28
{
    427c:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    427e:	a803      	add	r0, sp, #12
    4280:	2100      	movs	r1, #0
    4282:	f015 ff3b 	bl	1a0fc <memset>
	struct light_ctl_state *state = model->user_data;
    4286:	69ac      	ldr	r4, [r5, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    4288:	230f      	movs	r3, #15

	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_TEMP_STATUS);
    428a:	f248 2166 	movw	r1, #33382	; 0x8266
    428e:	a803      	add	r0, sp, #12
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    4290:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_TEMP_STATUS);
    4294:	f018 f8d2 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->temp);
    4298:	88a1      	ldrh	r1, [r4, #4]
    429a:	a803      	add	r0, sp, #12
    429c:	f01a ff45 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->delta_uv);
    42a0:	a803      	add	r0, sp, #12
    42a2:	8921      	ldrh	r1, [r4, #8]
    42a4:	f01a ff41 	bl	1f12a <net_buf_simple_add_le16>

	if (state->transition->counter) {
    42a8:	6c60      	ldr	r0, [r4, #68]	; 0x44
    42aa:	6883      	ldr	r3, [r0, #8]
    42ac:	b173      	cbz	r3, 42cc <light_ctl_temp_get+0x58>
		calculate_rt(state->transition);
    42ae:	f002 fabb 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_temp);
    42b2:	88e1      	ldrh	r1, [r4, #6]
    42b4:	a803      	add	r0, sp, #12
    42b6:	f01a ff38 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, state->target_delta_uv);
    42ba:	8961      	ldrh	r1, [r4, #10]
    42bc:	a803      	add	r0, sp, #12
    42be:	f01a ff34 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
    42c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    42c4:	a803      	add	r0, sp, #12
    42c6:	7899      	ldrb	r1, [r3, #2]
    42c8:	f01a ff27 	bl	1f11a <net_buf_simple_add_u8>
	}

	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    42cc:	2300      	movs	r3, #0
    42ce:	9300      	str	r3, [sp, #0]
    42d0:	aa03      	add	r2, sp, #12
    42d2:	4631      	mov	r1, r6
    42d4:	4628      	mov	r0, r5
    42d6:	f018 f8da 	bl	1c48e <bt_mesh_model_send>
    42da:	b110      	cbz	r0, 42e2 <light_ctl_temp_get+0x6e>
		printk("Unable to send LightCTL Temp. Status response\n");
    42dc:	4802      	ldr	r0, [pc, #8]	; (42e8 <light_ctl_temp_get+0x74>)
    42de:	f013 ff50 	bl	18182 <printk>
	}
}
    42e2:	b00a      	add	sp, #40	; 0x28
    42e4:	bd70      	pop	{r4, r5, r6, pc}
    42e6:	bf00      	nop
    42e8:	00020fc6 	.word	0x00020fc6

000042ec <vnd_status>:
{
    42ec:	b510      	push	{r4, lr}
	printk("Acknownledgement from Vendor\n");
    42ee:	480a      	ldr	r0, [pc, #40]	; (4318 <vnd_status+0x2c>)
{
    42f0:	4614      	mov	r4, r2
	printk("Acknownledgement from Vendor\n");
    42f2:	f013 ff46 	bl	18182 <printk>
	printk("cmd = %04x\n", net_buf_simple_pull_le16(buf));
    42f6:	4620      	mov	r0, r4
    42f8:	f01a ff93 	bl	1f222 <net_buf_simple_pull_le16>
    42fc:	4601      	mov	r1, r0
    42fe:	4807      	ldr	r0, [pc, #28]	; (431c <vnd_status+0x30>)
    4300:	f013 ff3f 	bl	18182 <printk>
	printk("response = %08x\n", net_buf_simple_pull_le32(buf));
    4304:	4620      	mov	r0, r4
    4306:	f01a ff9f 	bl	1f248 <net_buf_simple_pull_le32>
}
    430a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("response = %08x\n", net_buf_simple_pull_le32(buf));
    430e:	4601      	mov	r1, r0
    4310:	4803      	ldr	r0, [pc, #12]	; (4320 <vnd_status+0x34>)
    4312:	f013 bf36 	b.w	18182 <printk>
    4316:	bf00      	nop
    4318:	000213d3 	.word	0x000213d3
    431c:	000213f1 	.word	0x000213f1
    4320:	000213fd 	.word	0x000213fd

00004324 <vnd_get>:
{
    4324:	b570      	push	{r4, r5, r6, lr}
    4326:	4605      	mov	r5, r0
    4328:	b08a      	sub	sp, #40	; 0x28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(3 + 6 + 4);
    432a:	221c      	movs	r2, #28
{
    432c:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(3 + 6 + 4);
    432e:	a803      	add	r0, sp, #12
    4330:	2100      	movs	r1, #0
    4332:	f015 fee3 	bl	1a0fc <memset>
	struct vendor_state *state = model->user_data;
    4336:	69ac      	ldr	r4, [r5, #24]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_3(0x04, CID_ZEPHYR));
    4338:	490e      	ldr	r1, [pc, #56]	; (4374 <vnd_get+0x50>)
	struct net_buf_simple *msg = NET_BUF_SIMPLE(3 + 6 + 4);
    433a:	230d      	movs	r3, #13
    433c:	f8ad 3012 	strh.w	r3, [sp, #18]
	state->response = 0xA578FEB3;
    4340:	4b0d      	ldr	r3, [pc, #52]	; (4378 <vnd_get+0x54>)
    4342:	6063      	str	r3, [r4, #4]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_3(0x04, CID_ZEPHYR));
    4344:	a803      	add	r0, sp, #12
    4346:	f018 f879 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->current);
    434a:	8821      	ldrh	r1, [r4, #0]
    434c:	a803      	add	r0, sp, #12
    434e:	f01a feec 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le32(msg, state->response);
    4352:	6861      	ldr	r1, [r4, #4]
    4354:	a803      	add	r0, sp, #12
    4356:	f01a ff09 	bl	1f16c <net_buf_simple_add_le32>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    435a:	2300      	movs	r3, #0
    435c:	9300      	str	r3, [sp, #0]
    435e:	aa03      	add	r2, sp, #12
    4360:	4631      	mov	r1, r6
    4362:	4628      	mov	r0, r5
    4364:	f018 f893 	bl	1c48e <bt_mesh_model_send>
    4368:	b110      	cbz	r0, 4370 <vnd_get+0x4c>
		printk("Unable to send VENDOR Status response\n");
    436a:	4804      	ldr	r0, [pc, #16]	; (437c <vnd_get+0x58>)
    436c:	f013 ff09 	bl	18182 <printk>
}
    4370:	b00a      	add	sp, #40	; 0x28
    4372:	bd70      	pop	{r4, r5, r6, pc}
    4374:	00c40002 	.word	0x00c40002
    4378:	a578feb3 	.word	0xa578feb3
    437c:	0002138f 	.word	0x0002138f

00004380 <gen_level_move_publish.part.0>:
static void gen_level_move_publish(struct bt_mesh_model *model)
    4380:	b508      	push	{r3, lr}
	err = bt_mesh_model_publish(model);
    4382:	f00a f917 	bl	e5b4 <bt_mesh_model_publish>
	if (err) {
    4386:	4601      	mov	r1, r0
    4388:	b120      	cbz	r0, 4394 <gen_level_move_publish.part.0+0x14>
		printk("bt_mesh_model_publish err %d\n", err);
    438a:	4803      	ldr	r0, [pc, #12]	; (4398 <gen_level_move_publish.part.0+0x18>)
}
    438c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    4390:	f013 bef7 	b.w	18182 <printk>
}
    4394:	bd08      	pop	{r3, pc}
    4396:	bf00      	nop
    4398:	00020e82 	.word	0x00020e82

0000439c <gen_move_set_unack>:
{
    439c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct generic_level_state *state = model->user_data;
    43a0:	6987      	ldr	r7, [r0, #24]
{
    43a2:	4605      	mov	r5, r0
	delta = (s16_t) net_buf_simple_pull_le16(buf);
    43a4:	4610      	mov	r0, r2
{
    43a6:	4692      	mov	sl, r2
    43a8:	460e      	mov	r6, r1
	delta = (s16_t) net_buf_simple_pull_le16(buf);
    43aa:	f01a ff3a 	bl	1f222 <net_buf_simple_pull_le16>
    43ae:	9001      	str	r0, [sp, #4]
	tid = net_buf_simple_pull_u8(buf);
    43b0:	4650      	mov	r0, sl
    43b2:	f01a ff2e 	bl	1f212 <net_buf_simple_pull_u8>
    43b6:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    43b8:	f01b fc15 	bl	1fbe6 <z_impl_k_uptime_get>
    43bc:	9100      	str	r1, [sp, #0]
	if (state->last_tid == tid &&
    43be:	7b39      	ldrb	r1, [r7, #12]
    43c0:	4559      	cmp	r1, fp
    43c2:	4604      	mov	r4, r0
    43c4:	d115      	bne.n	43f2 <gen_move_set_unack+0x56>
    43c6:	89f8      	ldrh	r0, [r7, #14]
    43c8:	88b1      	ldrh	r1, [r6, #4]
    43ca:	4288      	cmp	r0, r1
    43cc:	d111      	bne.n	43f2 <gen_move_set_unack+0x56>
	    state->last_src_addr == ctx->addr &&
    43ce:	8a38      	ldrh	r0, [r7, #16]
    43d0:	88f1      	ldrh	r1, [r6, #6]
    43d2:	4288      	cmp	r0, r1
    43d4:	d10d      	bne.n	43f2 <gen_move_set_unack+0x56>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    43d6:	e9d7 1006 	ldrd	r1, r0, [r7, #24]
    43da:	9b00      	ldr	r3, [sp, #0]
    43dc:	ebb4 0801 	subs.w	r8, r4, r1
    43e0:	eb63 0900 	sbc.w	r9, r3, r0
	    state->last_dst_addr == ctx->recv_dst &&
    43e4:	f241 7070 	movw	r0, #6000	; 0x1770
    43e8:	2100      	movs	r1, #0
    43ea:	4540      	cmp	r0, r8
    43ec:	eb71 0309 	sbcs.w	r3, r1, r9
    43f0:	da04      	bge.n	43fc <gen_move_set_unack+0x60>
	switch (buf->len) {
    43f2:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    43f6:	b121      	cbz	r1, 4402 <gen_move_set_unack+0x66>
    43f8:	2902      	cmp	r1, #2
    43fa:	d042      	beq.n	4482 <gen_move_set_unack+0xe6>
}
    43fc:	b003      	add	sp, #12
    43fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    4402:	4a31      	ldr	r2, [pc, #196]	; (44c8 <gen_move_set_unack+0x12c>)
    4404:	f892 8000 	ldrb.w	r8, [r2]
		delay = 0U;
    4408:	4689      	mov	r9, r1
	*ptr_counter = 0U;
    440a:	4a30      	ldr	r2, [pc, #192]	; (44cc <gen_move_set_unack+0x130>)
    440c:	6812      	ldr	r2, [r2, #0]
    440e:	2100      	movs	r1, #0
    4410:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    4412:	4a2f      	ldr	r2, [pc, #188]	; (44d0 <gen_move_set_unack+0x134>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    4414:	6810      	ldr	r0, [r2, #0]
    4416:	f01b fc02 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    441a:	f887 b00c 	strb.w	fp, [r7, #12]
	state->last_src_addr = ctx->addr;
    441e:	88b2      	ldrh	r2, [r6, #4]
    4420:	81fa      	strh	r2, [r7, #14]
	state->last_dst_addr = ctx->recv_dst;
    4422:	88f2      	ldrh	r2, [r6, #6]
    4424:	823a      	strh	r2, [r7, #16]
	state->last_msg_timestamp = now;
    4426:	61bc      	str	r4, [r7, #24]
	tmp32 = state->level + delta;
    4428:	f9b7 2000 	ldrsh.w	r2, [r7]
	state->last_delta = delta;
    442c:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
    4430:	60bc      	str	r4, [r7, #8]
	tmp32 = state->level + delta;
    4432:	4414      	add	r4, r2
	state->target_level = tmp32;
    4434:	f304 040f 	ssat	r4, #16, r4
    4438:	b224      	sxth	r4, r4
	state->last_msg_timestamp = now;
    443a:	9b00      	ldr	r3, [sp, #0]
    443c:	61fb      	str	r3, [r7, #28]
	if (state->target_level != state->level) {
    443e:	42a2      	cmp	r2, r4
	state->target_level = tmp32;
    4440:	807c      	strh	r4, [r7, #2]
	if (state->target_level != state->level) {
    4442:	d02b      	beq.n	449c <gen_move_set_unack+0x100>
		level_tt_values(state, tt, delay);
    4444:	464a      	mov	r2, r9
    4446:	4641      	mov	r1, r8
    4448:	4638      	mov	r0, r7
    444a:	f002 fa5d 	bl	6908 <level_tt_values>
	if (state->transition->counter == 0) {
    444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4450:	6891      	ldr	r1, [r2, #8]
    4452:	2900      	cmp	r1, #0
    4454:	d0d2      	beq.n	43fc <gen_move_set_unack+0x60>
	state->transition->just_started = true;
    4456:	2101      	movs	r1, #1
    4458:	7011      	strb	r1, [r2, #0]
	gen_level_move_publish(model);
    445a:	4628      	mov	r0, r5
    445c:	f013 f900 	bl	17660 <gen_level_move_publish>
	if (bt_mesh_model_elem(model)->addr == elements[0].addr) {
    4460:	4628      	mov	r0, r5
    4462:	f009 ff71 	bl	e348 <bt_mesh_model_elem>
    4466:	4c1b      	ldr	r4, [pc, #108]	; (44d4 <gen_move_set_unack+0x138>)
    4468:	8801      	ldrh	r1, [r0, #0]
    446a:	8822      	ldrh	r2, [r4, #0]
    446c:	4291      	cmp	r1, r2
    446e:	d11b      	bne.n	44a8 <gen_move_set_unack+0x10c>
		transition_type = LEVEL_TT_MOVE;
    4470:	4a19      	ldr	r2, [pc, #100]	; (44d8 <gen_move_set_unack+0x13c>)
    4472:	2102      	movs	r1, #2
		level_lightness_handler(state);
    4474:	4638      	mov	r0, r7
		transition_type = LEVEL_TT_MOVE;
    4476:	7011      	strb	r1, [r2, #0]
}
    4478:	b003      	add	sp, #12
    447a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_lightness_handler(state);
    447e:	f002 bb75 	b.w	6b6c <level_lightness_handler>
		tt = net_buf_simple_pull_u8(buf);
    4482:	4650      	mov	r0, sl
    4484:	f01a fec5 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    4488:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    448c:	293f      	cmp	r1, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    448e:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    4490:	d0b4      	beq.n	43fc <gen_move_set_unack+0x60>
		delay = net_buf_simple_pull_u8(buf);
    4492:	4650      	mov	r0, sl
    4494:	f01a febd 	bl	1f212 <net_buf_simple_pull_u8>
    4498:	4681      	mov	r9, r0
		break;
    449a:	e7b6      	b.n	440a <gen_move_set_unack+0x6e>
		gen_level_move_publish(model);
    449c:	4628      	mov	r0, r5
}
    449e:	b003      	add	sp, #12
    44a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_level_move_publish(model);
    44a4:	f013 b8dc 	b.w	17660 <gen_level_move_publish>
	} else if (bt_mesh_model_elem(model)->addr == elements[1].addr) {
    44a8:	4628      	mov	r0, r5
    44aa:	f009 ff4d 	bl	e348 <bt_mesh_model_elem>
    44ae:	8a22      	ldrh	r2, [r4, #16]
    44b0:	8801      	ldrh	r1, [r0, #0]
    44b2:	4291      	cmp	r1, r2
    44b4:	d1a2      	bne.n	43fc <gen_move_set_unack+0x60>
		transition_type = LEVEL_TEMP_TT_MOVE;
    44b6:	4a08      	ldr	r2, [pc, #32]	; (44d8 <gen_move_set_unack+0x13c>)
    44b8:	2105      	movs	r1, #5
		level_temp_handler(state);
    44ba:	4638      	mov	r0, r7
		transition_type = LEVEL_TEMP_TT_MOVE;
    44bc:	7011      	strb	r1, [r2, #0]
}
    44be:	b003      	add	sp, #12
    44c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_temp_handler(state);
    44c4:	f002 bb6a 	b.w	6b9c <level_temp_handler>
    44c8:	200020ae 	.word	0x200020ae
    44cc:	200006b8 	.word	0x200006b8
    44d0:	20008580 	.word	0x20008580
    44d4:	20007f04 	.word	0x20007f04
    44d8:	200020af 	.word	0x200020af

000044dc <light_ctl_temp_status>:
{
    44dc:	b510      	push	{r4, lr}
	printk("Acknownledgement from LIGHT_CTL_TEMP_SRV\n");
    44de:	4816      	ldr	r0, [pc, #88]	; (4538 <light_ctl_temp_status+0x5c>)
{
    44e0:	4614      	mov	r4, r2
	printk("Acknownledgement from LIGHT_CTL_TEMP_SRV\n");
    44e2:	f013 fe4e 	bl	18182 <printk>
	       net_buf_simple_pull_le16(buf));
    44e6:	4620      	mov	r0, r4
    44e8:	f01a fe9b 	bl	1f222 <net_buf_simple_pull_le16>
	printk("Present CTL Temperature = %04x\n",
    44ec:	4601      	mov	r1, r0
    44ee:	4813      	ldr	r0, [pc, #76]	; (453c <light_ctl_temp_status+0x60>)
    44f0:	f013 fe47 	bl	18182 <printk>
	       net_buf_simple_pull_le16(buf));
    44f4:	4620      	mov	r0, r4
    44f6:	f01a fe94 	bl	1f222 <net_buf_simple_pull_le16>
	printk("Present CTL Delta UV = %04x\n",
    44fa:	4601      	mov	r1, r0
    44fc:	4810      	ldr	r0, [pc, #64]	; (4540 <light_ctl_temp_status+0x64>)
    44fe:	f013 fe40 	bl	18182 <printk>
	if (buf->len == 5) {
    4502:	88a3      	ldrh	r3, [r4, #4]
    4504:	2b05      	cmp	r3, #5
    4506:	d116      	bne.n	4536 <light_ctl_temp_status+0x5a>
		       net_buf_simple_pull_le16(buf));
    4508:	4620      	mov	r0, r4
    450a:	f01a fe8a 	bl	1f222 <net_buf_simple_pull_le16>
		printk("Target CTL Temperature = %04x\n",
    450e:	4601      	mov	r1, r0
    4510:	480c      	ldr	r0, [pc, #48]	; (4544 <light_ctl_temp_status+0x68>)
    4512:	f013 fe36 	bl	18182 <printk>
		       net_buf_simple_pull_le16(buf));
    4516:	4620      	mov	r0, r4
    4518:	f01a fe83 	bl	1f222 <net_buf_simple_pull_le16>
		printk("Target CTL Delta UV = %04x\n",
    451c:	4601      	mov	r1, r0
    451e:	480a      	ldr	r0, [pc, #40]	; (4548 <light_ctl_temp_status+0x6c>)
    4520:	f013 fe2f 	bl	18182 <printk>
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    4524:	4620      	mov	r0, r4
    4526:	f01a fe74 	bl	1f212 <net_buf_simple_pull_u8>
}
    452a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    452e:	4601      	mov	r1, r0
    4530:	4806      	ldr	r0, [pc, #24]	; (454c <light_ctl_temp_status+0x70>)
    4532:	f013 be26 	b.w	18182 <printk>
}
    4536:	bd10      	pop	{r4, pc}
    4538:	0002109a 	.word	0x0002109a
    453c:	000210c4 	.word	0x000210c4
    4540:	000210e4 	.word	0x000210e4
    4544:	00021101 	.word	0x00021101
    4548:	00021120 	.word	0x00021120
    454c:	0002113c 	.word	0x0002113c

00004550 <light_ctl_status>:
{
    4550:	b510      	push	{r4, lr}
	printk("Acknownledgement from LIGHT_CTL_SRV\n");
    4552:	4816      	ldr	r0, [pc, #88]	; (45ac <light_ctl_status+0x5c>)
{
    4554:	4614      	mov	r4, r2
	printk("Acknownledgement from LIGHT_CTL_SRV\n");
    4556:	f013 fe14 	bl	18182 <printk>
	printk("Present CTL Lightness = %04x\n", net_buf_simple_pull_le16(buf));
    455a:	4620      	mov	r0, r4
    455c:	f01a fe61 	bl	1f222 <net_buf_simple_pull_le16>
    4560:	4601      	mov	r1, r0
    4562:	4813      	ldr	r0, [pc, #76]	; (45b0 <light_ctl_status+0x60>)
    4564:	f013 fe0d 	bl	18182 <printk>
	       net_buf_simple_pull_le16(buf));
    4568:	4620      	mov	r0, r4
    456a:	f01a fe5a 	bl	1f222 <net_buf_simple_pull_le16>
	printk("Present CTL Temperature = %04x\n",
    456e:	4601      	mov	r1, r0
    4570:	4810      	ldr	r0, [pc, #64]	; (45b4 <light_ctl_status+0x64>)
    4572:	f013 fe06 	bl	18182 <printk>
	if (buf->len == 5) {
    4576:	88a3      	ldrh	r3, [r4, #4]
    4578:	2b05      	cmp	r3, #5
    457a:	d116      	bne.n	45aa <light_ctl_status+0x5a>
		       net_buf_simple_pull_le16(buf));
    457c:	4620      	mov	r0, r4
    457e:	f01a fe50 	bl	1f222 <net_buf_simple_pull_le16>
		printk("Target CTL Lightness = %04x\n",
    4582:	4601      	mov	r1, r0
    4584:	480c      	ldr	r0, [pc, #48]	; (45b8 <light_ctl_status+0x68>)
    4586:	f013 fdfc 	bl	18182 <printk>
		       net_buf_simple_pull_le16(buf));
    458a:	4620      	mov	r0, r4
    458c:	f01a fe49 	bl	1f222 <net_buf_simple_pull_le16>
		printk("Target CTL Temperature = %04x\n",
    4590:	4601      	mov	r1, r0
    4592:	480a      	ldr	r0, [pc, #40]	; (45bc <light_ctl_status+0x6c>)
    4594:	f013 fdf5 	bl	18182 <printk>
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    4598:	4620      	mov	r0, r4
    459a:	f01a fe3a 	bl	1f212 <net_buf_simple_pull_u8>
}
    459e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    45a2:	4601      	mov	r1, r0
    45a4:	4806      	ldr	r0, [pc, #24]	; (45c0 <light_ctl_status+0x70>)
    45a6:	f013 bdec 	b.w	18182 <printk>
}
    45aa:	bd10      	pop	{r4, pc}
    45ac:	00020f66 	.word	0x00020f66
    45b0:	00020f8b 	.word	0x00020f8b
    45b4:	000210c4 	.word	0x000210c4
    45b8:	00020fa9 	.word	0x00020fa9
    45bc:	00021101 	.word	0x00021101
    45c0:	0002113c 	.word	0x0002113c

000045c4 <light_lightness_linear_status.part.3>:
static void light_lightness_linear_status(struct bt_mesh_model *model,
    45c4:	b510      	push	{r4, lr}
    45c6:	4604      	mov	r4, r0
		       net_buf_simple_pull_le16(buf));
    45c8:	f01a fe2b 	bl	1f222 <net_buf_simple_pull_le16>
		printk("Target Lightness = %04x\n",
    45cc:	4601      	mov	r1, r0
    45ce:	4806      	ldr	r0, [pc, #24]	; (45e8 <light_lightness_linear_status.part.3+0x24>)
    45d0:	f013 fdd7 	bl	18182 <printk>
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    45d4:	4620      	mov	r0, r4
    45d6:	f01a fe1c 	bl	1f212 <net_buf_simple_pull_u8>
}
    45da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    45de:	4601      	mov	r1, r0
    45e0:	4802      	ldr	r0, [pc, #8]	; (45ec <light_lightness_linear_status.part.3+0x28>)
    45e2:	f013 bdce 	b.w	18182 <printk>
    45e6:	bf00      	nop
    45e8:	00021283 	.word	0x00021283
    45ec:	0002113c 	.word	0x0002113c

000045f0 <light_lightness_linear_status>:
{
    45f0:	b510      	push	{r4, lr}
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Linear)\n");
    45f2:	480a      	ldr	r0, [pc, #40]	; (461c <light_lightness_linear_status+0x2c>)
{
    45f4:	4614      	mov	r4, r2
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Linear)\n");
    45f6:	f013 fdc4 	bl	18182 <printk>
	printk("Present Lightness = %04x\n", net_buf_simple_pull_le16(buf));
    45fa:	4620      	mov	r0, r4
    45fc:	f01a fe11 	bl	1f222 <net_buf_simple_pull_le16>
    4600:	4601      	mov	r1, r0
    4602:	4807      	ldr	r0, [pc, #28]	; (4620 <light_lightness_linear_status+0x30>)
    4604:	f013 fdbd 	bl	18182 <printk>
	if (buf->len == 3) {
    4608:	88a3      	ldrh	r3, [r4, #4]
    460a:	2b03      	cmp	r3, #3
    460c:	d104      	bne.n	4618 <light_lightness_linear_status+0x28>
    460e:	4620      	mov	r0, r4
}
    4610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4614:	f7ff bfd6 	b.w	45c4 <light_lightness_linear_status.part.3>
    4618:	bd10      	pop	{r4, pc}
    461a:	bf00      	nop
    461c:	0002129c 	.word	0x0002129c
    4620:	000212d0 	.word	0x000212d0

00004624 <light_lightness_status>:
{
    4624:	b510      	push	{r4, lr}
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Actual)\n");
    4626:	480a      	ldr	r0, [pc, #40]	; (4650 <light_lightness_status+0x2c>)
{
    4628:	4614      	mov	r4, r2
	printk("Acknownledgement from LIGHT_LIGHTNESS_SRV (Actual)\n");
    462a:	f013 fdaa 	bl	18182 <printk>
	printk("Present Lightness = %04x\n", net_buf_simple_pull_le16(buf));
    462e:	4620      	mov	r0, r4
    4630:	f01a fdf7 	bl	1f222 <net_buf_simple_pull_le16>
    4634:	4601      	mov	r1, r0
    4636:	4807      	ldr	r0, [pc, #28]	; (4654 <light_lightness_status+0x30>)
    4638:	f013 fda3 	bl	18182 <printk>
	if (buf->len == 3) {
    463c:	88a3      	ldrh	r3, [r4, #4]
    463e:	2b03      	cmp	r3, #3
    4640:	d104      	bne.n	464c <light_lightness_status+0x28>
    4642:	4620      	mov	r0, r4
}
    4644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4648:	f7ff bfbc 	b.w	45c4 <light_lightness_linear_status.part.3>
    464c:	bd10      	pop	{r4, pc}
    464e:	bf00      	nop
    4650:	0002135b 	.word	0x0002135b
    4654:	000212d0 	.word	0x000212d0

00004658 <gen_level_status>:
{
    4658:	b510      	push	{r4, lr}
	printk("Acknownledgement from GEN_LEVEL_SRV\n");
    465a:	480f      	ldr	r0, [pc, #60]	; (4698 <gen_level_status+0x40>)
{
    465c:	4614      	mov	r4, r2
	printk("Acknownledgement from GEN_LEVEL_SRV\n");
    465e:	f013 fd90 	bl	18182 <printk>
	printk("Present Level = %04x\n", net_buf_simple_pull_le16(buf));
    4662:	4620      	mov	r0, r4
    4664:	f01a fddd 	bl	1f222 <net_buf_simple_pull_le16>
    4668:	4601      	mov	r1, r0
    466a:	480c      	ldr	r0, [pc, #48]	; (469c <gen_level_status+0x44>)
    466c:	f013 fd89 	bl	18182 <printk>
	if (buf->len == 3) {
    4670:	88a3      	ldrh	r3, [r4, #4]
    4672:	2b03      	cmp	r3, #3
    4674:	d10f      	bne.n	4696 <gen_level_status+0x3e>
		printk("Target Level = %04x\n", net_buf_simple_pull_le16(buf));
    4676:	4620      	mov	r0, r4
    4678:	f01a fdd3 	bl	1f222 <net_buf_simple_pull_le16>
    467c:	4601      	mov	r1, r0
    467e:	4808      	ldr	r0, [pc, #32]	; (46a0 <gen_level_status+0x48>)
    4680:	f013 fd7f 	bl	18182 <printk>
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    4684:	4620      	mov	r0, r4
    4686:	f01a fdc4 	bl	1f212 <net_buf_simple_pull_u8>
}
    468a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    468e:	4601      	mov	r1, r0
    4690:	4804      	ldr	r0, [pc, #16]	; (46a4 <gen_level_status+0x4c>)
    4692:	f013 bd76 	b.w	18182 <printk>
}
    4696:	bd10      	pop	{r4, pc}
    4698:	00020d80 	.word	0x00020d80
    469c:	00020da5 	.word	0x00020da5
    46a0:	00020dbb 	.word	0x00020dbb
    46a4:	0002113c 	.word	0x0002113c

000046a8 <gen_onoff_status>:
{
    46a8:	b510      	push	{r4, lr}
	printk("Acknownledgement from GEN_ONOFF_SRV\n");
    46aa:	480f      	ldr	r0, [pc, #60]	; (46e8 <gen_onoff_status+0x40>)
{
    46ac:	4614      	mov	r4, r2
	printk("Acknownledgement from GEN_ONOFF_SRV\n");
    46ae:	f013 fd68 	bl	18182 <printk>
	printk("Present OnOff = %02x\n", net_buf_simple_pull_u8(buf));
    46b2:	4620      	mov	r0, r4
    46b4:	f01a fdad 	bl	1f212 <net_buf_simple_pull_u8>
    46b8:	4601      	mov	r1, r0
    46ba:	480c      	ldr	r0, [pc, #48]	; (46ec <gen_onoff_status+0x44>)
    46bc:	f013 fd61 	bl	18182 <printk>
	if (buf->len == 2) {
    46c0:	88a3      	ldrh	r3, [r4, #4]
    46c2:	2b02      	cmp	r3, #2
    46c4:	d10f      	bne.n	46e6 <gen_onoff_status+0x3e>
		printk("Target OnOff = %02x\n", net_buf_simple_pull_u8(buf));
    46c6:	4620      	mov	r0, r4
    46c8:	f01a fda3 	bl	1f212 <net_buf_simple_pull_u8>
    46cc:	4601      	mov	r1, r0
    46ce:	4808      	ldr	r0, [pc, #32]	; (46f0 <gen_onoff_status+0x48>)
    46d0:	f013 fd57 	bl	18182 <printk>
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    46d4:	4620      	mov	r0, r4
    46d6:	f01a fd9c 	bl	1f212 <net_buf_simple_pull_u8>
}
    46da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Remaining Time = %02x\n", net_buf_simple_pull_u8(buf));
    46de:	4601      	mov	r1, r0
    46e0:	4804      	ldr	r0, [pc, #16]	; (46f4 <gen_onoff_status+0x4c>)
    46e2:	f013 bd4e 	b.w	18182 <printk>
}
    46e6:	bd10      	pop	{r4, pc}
    46e8:	00020dfe 	.word	0x00020dfe
    46ec:	00020e23 	.word	0x00020e23
    46f0:	00020e39 	.word	0x00020e39
    46f4:	0002113c 	.word	0x0002113c

000046f8 <gen_def_trans_time_set>:
{
    46f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (gen_def_trans_time_setunack(model, ctx, buf) == true) {
    46fa:	6986      	ldr	r6, [r0, #24]
{
    46fc:	4604      	mov	r4, r0
	tt = net_buf_simple_pull_u8(buf);
    46fe:	4610      	mov	r0, r2
{
    4700:	460f      	mov	r7, r1
    4702:	4615      	mov	r5, r2
	tt = net_buf_simple_pull_u8(buf);
    4704:	f01a fd85 	bl	1f212 <net_buf_simple_pull_u8>
	if ((tt & 0x3F) == 0x3F) {
    4708:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    470c:	2b3f      	cmp	r3, #63	; 0x3f
    470e:	d012      	beq.n	4736 <gen_def_trans_time_set+0x3e>
	if (state->tt != tt) {
    4710:	7833      	ldrb	r3, [r6, #0]
    4712:	4283      	cmp	r3, r0
    4714:	d005      	beq.n	4722 <gen_def_trans_time_set+0x2a>
		default_tt = tt;
    4716:	4b08      	ldr	r3, [pc, #32]	; (4738 <gen_def_trans_time_set+0x40>)
		state->tt = tt;
    4718:	7030      	strb	r0, [r6, #0]
		default_tt = tt;
    471a:	7018      	strb	r0, [r3, #0]
		save_on_flash(GEN_DEF_TRANS_TIME_STATE);
    471c:	2002      	movs	r0, #2
    471e:	f001 fdcd 	bl	62bc <save_on_flash>
		gen_def_trans_time_get(model, ctx, buf);
    4722:	4620      	mov	r0, r4
    4724:	462a      	mov	r2, r5
    4726:	4639      	mov	r1, r7
    4728:	f7ff fd16 	bl	4158 <gen_def_trans_time_get>
		gen_def_trans_time_publish(model);
    472c:	4620      	mov	r0, r4
}
    472e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		gen_def_trans_time_publish(model);
    4732:	f7ff b9f5 	b.w	3b20 <gen_def_trans_time_publish>
}
    4736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4738:	200020ae 	.word	0x200020ae

0000473c <gen_level_move_get.isra.17>:
static void gen_level_move_get(struct bt_mesh_model *model,
    473c:	b570      	push	{r4, r5, r6, lr}
    473e:	4605      	mov	r5, r0
    4740:	b088      	sub	sp, #32
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    4742:	2218      	movs	r2, #24
static void gen_level_move_get(struct bt_mesh_model *model,
    4744:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    4746:	a802      	add	r0, sp, #8
    4748:	2100      	movs	r1, #0
    474a:	f015 fcd7 	bl	1a0fc <memset>
	struct generic_level_state *state = model->user_data;
    474e:	69ac      	ldr	r4, [r5, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    4750:	230b      	movs	r3, #11
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_GEN_LEVEL_STATUS);
    4752:	f248 2108 	movw	r1, #33288	; 0x8208
    4756:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    4758:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_GEN_LEVEL_STATUS);
    475c:	f017 fe6e 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->level);
    4760:	8821      	ldrh	r1, [r4, #0]
    4762:	a802      	add	r0, sp, #8
    4764:	f01a fce1 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
    4768:	6a63      	ldr	r3, [r4, #36]	; 0x24
    476a:	689b      	ldr	r3, [r3, #8]
    476c:	b16b      	cbz	r3, 478a <gen_level_move_get.isra.17+0x4e>
		if (state->last_delta < 0) {
    476e:	68a3      	ldr	r3, [r4, #8]
    4770:	2b00      	cmp	r3, #0
			net_buf_simple_add_le16(msg, INT16_MIN);
    4772:	bfb4      	ite	lt
    4774:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
			net_buf_simple_add_le16(msg, INT16_MAX);
    4778:	f647 71ff 	movwge	r1, #32767	; 0x7fff
    477c:	a802      	add	r0, sp, #8
    477e:	f01a fcd4 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, UNKNOWN_VALUE);
    4782:	213f      	movs	r1, #63	; 0x3f
    4784:	a802      	add	r0, sp, #8
    4786:	f01a fcc8 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    478a:	2300      	movs	r3, #0
    478c:	9300      	str	r3, [sp, #0]
    478e:	aa02      	add	r2, sp, #8
    4790:	4631      	mov	r1, r6
    4792:	4628      	mov	r0, r5
    4794:	f017 fe7b 	bl	1c48e <bt_mesh_model_send>
    4798:	b110      	cbz	r0, 47a0 <gen_level_move_get.isra.17+0x64>
		printk("Unable to send GEN_LEVEL_SRV Status response\n");
    479a:	4802      	ldr	r0, [pc, #8]	; (47a4 <gen_level_move_get.isra.17+0x68>)
    479c:	f013 fcf1 	bl	18182 <printk>
}
    47a0:	b008      	add	sp, #32
    47a2:	bd70      	pop	{r4, r5, r6, pc}
    47a4:	00020d52 	.word	0x00020d52

000047a8 <gen_move_set>:
{
    47a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct generic_level_state *state = model->user_data;
    47ac:	6984      	ldr	r4, [r0, #24]
{
    47ae:	4606      	mov	r6, r0
	delta = (s16_t) net_buf_simple_pull_le16(buf);
    47b0:	4610      	mov	r0, r2
{
    47b2:	4615      	mov	r5, r2
    47b4:	468a      	mov	sl, r1
	delta = (s16_t) net_buf_simple_pull_le16(buf);
    47b6:	f01a fd34 	bl	1f222 <net_buf_simple_pull_le16>
    47ba:	9001      	str	r0, [sp, #4]
	tid = net_buf_simple_pull_u8(buf);
    47bc:	4628      	mov	r0, r5
    47be:	f01a fd28 	bl	1f212 <net_buf_simple_pull_u8>
    47c2:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    47c4:	f01b fa0f 	bl	1fbe6 <z_impl_k_uptime_get>
    47c8:	9100      	str	r1, [sp, #0]
	if (state->last_tid == tid &&
    47ca:	7b21      	ldrb	r1, [r4, #12]
    47cc:	4559      	cmp	r1, fp
    47ce:	4607      	mov	r7, r0
    47d0:	d11e      	bne.n	4810 <gen_move_set+0x68>
    47d2:	89e0      	ldrh	r0, [r4, #14]
    47d4:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    47d8:	4288      	cmp	r0, r1
    47da:	d119      	bne.n	4810 <gen_move_set+0x68>
	    state->last_src_addr == ctx->addr &&
    47dc:	8a20      	ldrh	r0, [r4, #16]
    47de:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    47e2:	4288      	cmp	r0, r1
    47e4:	d114      	bne.n	4810 <gen_move_set+0x68>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    47e6:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
    47ea:	9b00      	ldr	r3, [sp, #0]
    47ec:	ebb7 0801 	subs.w	r8, r7, r1
    47f0:	eb63 0900 	sbc.w	r9, r3, r0
	    state->last_dst_addr == ctx->recv_dst &&
    47f4:	f241 7070 	movw	r0, #6000	; 0x1770
    47f8:	2100      	movs	r1, #0
    47fa:	4540      	cmp	r0, r8
    47fc:	eb71 0309 	sbcs.w	r3, r1, r9
    4800:	db06      	blt.n	4810 <gen_move_set+0x68>
		gen_level_move_get(model, ctx, buf);
    4802:	4651      	mov	r1, sl
    4804:	4630      	mov	r0, r6
}
    4806:	b003      	add	sp, #12
    4808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_level_move_get(model, ctx, buf);
    480c:	f7ff bf96 	b.w	473c <gen_level_move_get.isra.17>
	switch (buf->len) {
    4810:	88a9      	ldrh	r1, [r5, #4]
    4812:	b121      	cbz	r1, 481e <gen_move_set+0x76>
    4814:	2902      	cmp	r1, #2
    4816:	d048      	beq.n	48aa <gen_move_set+0x102>
}
    4818:	b003      	add	sp, #12
    481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    481e:	4a36      	ldr	r2, [pc, #216]	; (48f8 <gen_move_set+0x150>)
    4820:	f892 8000 	ldrb.w	r8, [r2]
		delay = 0U;
    4824:	4689      	mov	r9, r1
	*ptr_counter = 0U;
    4826:	4a35      	ldr	r2, [pc, #212]	; (48fc <gen_move_set+0x154>)
    4828:	6812      	ldr	r2, [r2, #0]
    482a:	2100      	movs	r1, #0
    482c:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    482e:	4a34      	ldr	r2, [pc, #208]	; (4900 <gen_move_set+0x158>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    4830:	6810      	ldr	r0, [r2, #0]
    4832:	f01b f9f4 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    4836:	f884 b00c 	strb.w	fp, [r4, #12]
	state->last_src_addr = ctx->addr;
    483a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
    483e:	81e2      	strh	r2, [r4, #14]
	state->last_dst_addr = ctx->recv_dst;
    4840:	f8ba 2006 	ldrh.w	r2, [sl, #6]
	state->last_delta = delta;
    4844:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
	state->last_dst_addr = ctx->recv_dst;
    4848:	8222      	strh	r2, [r4, #16]
	tmp32 = state->level + delta;
    484a:	f9b4 2000 	ldrsh.w	r2, [r4]
	state->last_delta = delta;
    484e:	60a5      	str	r5, [r4, #8]
	tmp32 = state->level + delta;
    4850:	4415      	add	r5, r2
	state->target_level = tmp32;
    4852:	f305 050f 	ssat	r5, #16, r5
    4856:	b22d      	sxth	r5, r5
	state->last_msg_timestamp = now;
    4858:	9b00      	ldr	r3, [sp, #0]
    485a:	61a7      	str	r7, [r4, #24]
	if (state->target_level != state->level) {
    485c:	42aa      	cmp	r2, r5
	state->last_msg_timestamp = now;
    485e:	61e3      	str	r3, [r4, #28]
	state->target_level = tmp32;
    4860:	8065      	strh	r5, [r4, #2]
	if (state->target_level != state->level) {
    4862:	d02f      	beq.n	48c4 <gen_move_set+0x11c>
		level_tt_values(state, tt, delay);
    4864:	464a      	mov	r2, r9
    4866:	4641      	mov	r1, r8
    4868:	4620      	mov	r0, r4
    486a:	f002 f84d 	bl	6908 <level_tt_values>
	if (state->transition->counter == 0) {
    486e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4870:	6891      	ldr	r1, [r2, #8]
    4872:	2900      	cmp	r1, #0
    4874:	d0d0      	beq.n	4818 <gen_move_set+0x70>
	state->transition->just_started = true;
    4876:	2101      	movs	r1, #1
    4878:	7011      	strb	r1, [r2, #0]
	gen_level_move_get(model, ctx, buf);
    487a:	4630      	mov	r0, r6
    487c:	4651      	mov	r1, sl
    487e:	f7ff ff5d 	bl	473c <gen_level_move_get.isra.17>
	gen_level_move_publish(model);
    4882:	4630      	mov	r0, r6
    4884:	f012 feec 	bl	17660 <gen_level_move_publish>
	if (bt_mesh_model_elem(model)->addr == elements[0].addr) {
    4888:	4630      	mov	r0, r6
    488a:	f009 fd5d 	bl	e348 <bt_mesh_model_elem>
    488e:	4d1d      	ldr	r5, [pc, #116]	; (4904 <gen_move_set+0x15c>)
    4890:	8802      	ldrh	r2, [r0, #0]
    4892:	882b      	ldrh	r3, [r5, #0]
    4894:	429a      	cmp	r2, r3
    4896:	d11f      	bne.n	48d8 <gen_move_set+0x130>
		transition_type = LEVEL_TT_MOVE;
    4898:	4b1b      	ldr	r3, [pc, #108]	; (4908 <gen_move_set+0x160>)
    489a:	2202      	movs	r2, #2
		level_lightness_handler(state);
    489c:	4620      	mov	r0, r4
		transition_type = LEVEL_TT_MOVE;
    489e:	701a      	strb	r2, [r3, #0]
}
    48a0:	b003      	add	sp, #12
    48a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_lightness_handler(state);
    48a6:	f002 b961 	b.w	6b6c <level_lightness_handler>
		tt = net_buf_simple_pull_u8(buf);
    48aa:	4628      	mov	r0, r5
    48ac:	f01a fcb1 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    48b0:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    48b4:	293f      	cmp	r1, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    48b6:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    48b8:	d0ae      	beq.n	4818 <gen_move_set+0x70>
		delay = net_buf_simple_pull_u8(buf);
    48ba:	4628      	mov	r0, r5
    48bc:	f01a fca9 	bl	1f212 <net_buf_simple_pull_u8>
    48c0:	4681      	mov	r9, r0
		break;
    48c2:	e7b0      	b.n	4826 <gen_move_set+0x7e>
		gen_level_move_get(model, ctx, buf);
    48c4:	4630      	mov	r0, r6
    48c6:	4651      	mov	r1, sl
    48c8:	f7ff ff38 	bl	473c <gen_level_move_get.isra.17>
		gen_level_move_publish(model);
    48cc:	4630      	mov	r0, r6
}
    48ce:	b003      	add	sp, #12
    48d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_level_move_publish(model);
    48d4:	f012 bec4 	b.w	17660 <gen_level_move_publish>
	} else if (bt_mesh_model_elem(model)->addr == elements[1].addr) {
    48d8:	4630      	mov	r0, r6
    48da:	f009 fd35 	bl	e348 <bt_mesh_model_elem>
    48de:	8a2b      	ldrh	r3, [r5, #16]
    48e0:	8802      	ldrh	r2, [r0, #0]
    48e2:	429a      	cmp	r2, r3
    48e4:	d198      	bne.n	4818 <gen_move_set+0x70>
		transition_type = LEVEL_TEMP_TT_MOVE;
    48e6:	4b08      	ldr	r3, [pc, #32]	; (4908 <gen_move_set+0x160>)
    48e8:	2205      	movs	r2, #5
		level_temp_handler(state);
    48ea:	4620      	mov	r0, r4
		transition_type = LEVEL_TEMP_TT_MOVE;
    48ec:	701a      	strb	r2, [r3, #0]
}
    48ee:	b003      	add	sp, #12
    48f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_temp_handler(state);
    48f4:	f002 b952 	b.w	6b9c <level_temp_handler>
    48f8:	200020ae 	.word	0x200020ae
    48fc:	200006b8 	.word	0x200006b8
    4900:	20008580 	.word	0x20008580
    4904:	20007f04 	.word	0x20007f04
    4908:	200020af 	.word	0x200020af

0000490c <vnd_set_unack>:
{
    490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct vendor_state *state = model->user_data;
    4910:	6984      	ldr	r4, [r0, #24]
	current = net_buf_simple_pull_le16(buf);
    4912:	4610      	mov	r0, r2
{
    4914:	4617      	mov	r7, r2
    4916:	460d      	mov	r5, r1
	current = net_buf_simple_pull_le16(buf);
    4918:	f01a fc83 	bl	1f222 <net_buf_simple_pull_le16>
    491c:	4606      	mov	r6, r0
	tid = net_buf_simple_pull_u8(buf);
    491e:	4638      	mov	r0, r7
    4920:	f01a fc77 	bl	1f212 <net_buf_simple_pull_u8>
    4924:	4607      	mov	r7, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    4926:	f01b f95e 	bl	1fbe6 <z_impl_k_uptime_get>
	if (state->last_tid == tid &&
    492a:	7a23      	ldrb	r3, [r4, #8]
    492c:	42bb      	cmp	r3, r7
    492e:	d114      	bne.n	495a <vnd_set_unack+0x4e>
    4930:	8962      	ldrh	r2, [r4, #10]
    4932:	88ab      	ldrh	r3, [r5, #4]
    4934:	429a      	cmp	r2, r3
    4936:	d110      	bne.n	495a <vnd_set_unack+0x4e>
	    state->last_src_addr == ctx->addr &&
    4938:	89a2      	ldrh	r2, [r4, #12]
    493a:	88eb      	ldrh	r3, [r5, #6]
    493c:	429a      	cmp	r2, r3
    493e:	d10c      	bne.n	495a <vnd_set_unack+0x4e>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    4940:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    4944:	ebb0 0803 	subs.w	r8, r0, r3
    4948:	eb61 0902 	sbc.w	r9, r1, r2
	    state->last_dst_addr == ctx->recv_dst &&
    494c:	f241 7270 	movw	r2, #6000	; 0x1770
    4950:	2300      	movs	r3, #0
    4952:	4542      	cmp	r2, r8
    4954:	eb73 0309 	sbcs.w	r3, r3, r9
    4958:	da1b      	bge.n	4992 <vnd_set_unack+0x86>
	state->last_tid = tid;
    495a:	7227      	strb	r7, [r4, #8]
	state->last_src_addr = ctx->addr;
    495c:	88ab      	ldrh	r3, [r5, #4]
    495e:	8163      	strh	r3, [r4, #10]
	state->last_dst_addr = ctx->recv_dst;
    4960:	88eb      	ldrh	r3, [r5, #6]
    4962:	81a3      	strh	r3, [r4, #12]
	state->last_msg_timestamp = now;
    4964:	e9c4 0104 	strd	r0, r1, [r4, #16]
	state->current = current;
    4968:	6026      	str	r6, [r4, #0]
	printk("Vendor model message = %04x\n", state->current);
    496a:	4631      	mov	r1, r6
    496c:	480a      	ldr	r0, [pc, #40]	; (4998 <vnd_set_unack+0x8c>)
    496e:	f013 fc08 	bl	18182 <printk>
	if (state->current == STATE_ON) {
    4972:	6823      	ldr	r3, [r4, #0]
    4974:	2b01      	cmp	r3, #1
    4976:	4b09      	ldr	r3, [pc, #36]	; (499c <vnd_set_unack+0x90>)
		gpio_pin_write(led_device[1], LED1_GPIO_PIN, 0);
    4978:	6858      	ldr	r0, [r3, #4]
	return api->write(port, access_op, pin, value);
    497a:	6843      	ldr	r3, [r0, #4]
    497c:	685c      	ldr	r4, [r3, #4]
    497e:	f04f 0212 	mov.w	r2, #18
    4982:	46a4      	mov	ip, r4
    4984:	bf0c      	ite	eq
    4986:	2300      	moveq	r3, #0
    4988:	2301      	movne	r3, #1
    498a:	2100      	movs	r1, #0
}
    498c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4990:	4760      	bx	ip
    4992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4996:	bf00      	nop
    4998:	000213b6 	.word	0x000213b6
    499c:	20000680 	.word	0x20000680

000049a0 <gen_def_trans_time_set_unack>:
{
    49a0:	b538      	push	{r3, r4, r5, lr}
	if (gen_def_trans_time_setunack(model, ctx, buf) == true) {
    49a2:	6985      	ldr	r5, [r0, #24]
{
    49a4:	4604      	mov	r4, r0
	tt = net_buf_simple_pull_u8(buf);
    49a6:	4610      	mov	r0, r2
    49a8:	f01a fc33 	bl	1f212 <net_buf_simple_pull_u8>
	if ((tt & 0x3F) == 0x3F) {
    49ac:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    49b0:	2b3f      	cmp	r3, #63	; 0x3f
    49b2:	d00d      	beq.n	49d0 <gen_def_trans_time_set_unack+0x30>
	if (state->tt != tt) {
    49b4:	782b      	ldrb	r3, [r5, #0]
    49b6:	4283      	cmp	r3, r0
    49b8:	d005      	beq.n	49c6 <gen_def_trans_time_set_unack+0x26>
		default_tt = tt;
    49ba:	4b06      	ldr	r3, [pc, #24]	; (49d4 <gen_def_trans_time_set_unack+0x34>)
		state->tt = tt;
    49bc:	7028      	strb	r0, [r5, #0]
		default_tt = tt;
    49be:	7018      	strb	r0, [r3, #0]
		save_on_flash(GEN_DEF_TRANS_TIME_STATE);
    49c0:	2002      	movs	r0, #2
    49c2:	f001 fc7b 	bl	62bc <save_on_flash>
		gen_def_trans_time_publish(model);
    49c6:	4620      	mov	r0, r4
}
    49c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gen_def_trans_time_publish(model);
    49cc:	f7ff b8a8 	b.w	3b20 <gen_def_trans_time_publish>
}
    49d0:	bd38      	pop	{r3, r4, r5, pc}
    49d2:	bf00      	nop
    49d4:	200020ae 	.word	0x200020ae

000049d8 <gen_onoff_set_unack>:
{
    49d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct generic_onoff_state *state = model->user_data;
    49dc:	f8d0 a018 	ldr.w	sl, [r0, #24]
{
    49e0:	4606      	mov	r6, r0
	onoff = net_buf_simple_pull_u8(buf);
    49e2:	4610      	mov	r0, r2
{
    49e4:	4614      	mov	r4, r2
    49e6:	460d      	mov	r5, r1
	onoff = net_buf_simple_pull_u8(buf);
    49e8:	f01a fc13 	bl	1f212 <net_buf_simple_pull_u8>
    49ec:	4607      	mov	r7, r0
	tid = net_buf_simple_pull_u8(buf);
    49ee:	4620      	mov	r0, r4
    49f0:	f01a fc0f 	bl	1f212 <net_buf_simple_pull_u8>
	if (onoff > STATE_ON) {
    49f4:	2f01      	cmp	r7, #1
	tid = net_buf_simple_pull_u8(buf);
    49f6:	4683      	mov	fp, r0
	if (onoff > STATE_ON) {
    49f8:	d823      	bhi.n	4a42 <gen_onoff_set_unack+0x6a>
    49fa:	f01b f8f4 	bl	1fbe6 <z_impl_k_uptime_get>
	if (state->last_tid == tid &&
    49fe:	f89a 2002 	ldrb.w	r2, [sl, #2]
    4a02:	455a      	cmp	r2, fp
    4a04:	e9cd 0100 	strd	r0, r1, [sp]
    4a08:	d117      	bne.n	4a3a <gen_onoff_set_unack+0x62>
    4a0a:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    4a0e:	88aa      	ldrh	r2, [r5, #4]
    4a10:	4291      	cmp	r1, r2
    4a12:	d112      	bne.n	4a3a <gen_onoff_set_unack+0x62>
	    state->last_src_addr == ctx->addr &&
    4a14:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    4a18:	88ea      	ldrh	r2, [r5, #6]
    4a1a:	4291      	cmp	r1, r2
    4a1c:	d10d      	bne.n	4a3a <gen_onoff_set_unack+0x62>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    4a1e:	e9da 2102 	ldrd	r2, r1, [sl, #8]
    4a22:	9b01      	ldr	r3, [sp, #4]
    4a24:	ebb0 0802 	subs.w	r8, r0, r2
	    state->last_dst_addr == ctx->recv_dst &&
    4a28:	f241 7070 	movw	r0, #6000	; 0x1770
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    4a2c:	eb63 0901 	sbc.w	r9, r3, r1
	    state->last_dst_addr == ctx->recv_dst &&
    4a30:	2100      	movs	r1, #0
    4a32:	4540      	cmp	r0, r8
    4a34:	eb71 0309 	sbcs.w	r3, r1, r9
    4a38:	da03      	bge.n	4a42 <gen_onoff_set_unack+0x6a>
	switch (buf->len) {
    4a3a:	88a2      	ldrh	r2, [r4, #4]
    4a3c:	b122      	cbz	r2, 4a48 <gen_onoff_set_unack+0x70>
    4a3e:	2a02      	cmp	r2, #2
    4a40:	d036      	beq.n	4ab0 <gen_onoff_set_unack+0xd8>
}
    4a42:	b003      	add	sp, #12
    4a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    4a48:	4925      	ldr	r1, [pc, #148]	; (4ae0 <gen_onoff_set_unack+0x108>)
    4a4a:	f891 8000 	ldrb.w	r8, [r1]
		delay = 0U;
    4a4e:	4614      	mov	r4, r2
	*ptr_counter = 0U;
    4a50:	4a24      	ldr	r2, [pc, #144]	; (4ae4 <gen_onoff_set_unack+0x10c>)
    4a52:	6812      	ldr	r2, [r2, #0]
    4a54:	2100      	movs	r1, #0
    4a56:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    4a58:	4a23      	ldr	r2, [pc, #140]	; (4ae8 <gen_onoff_set_unack+0x110>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    4a5a:	6810      	ldr	r0, [r2, #0]
    4a5c:	f01b f8df 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    4a60:	f88a b002 	strb.w	fp, [sl, #2]
	state->last_src_addr = ctx->addr;
    4a64:	88aa      	ldrh	r2, [r5, #4]
    4a66:	f8aa 2004 	strh.w	r2, [sl, #4]
	state->last_dst_addr = ctx->recv_dst;
    4a6a:	88ea      	ldrh	r2, [r5, #6]
    4a6c:	f8aa 2006 	strh.w	r2, [sl, #6]
	if (state->target_onoff != state->onoff) {
    4a70:	f89a 2000 	ldrb.w	r2, [sl]
	state->last_msg_timestamp = now;
    4a74:	9b00      	ldr	r3, [sp, #0]
    4a76:	f8ca 3008 	str.w	r3, [sl, #8]
	if (state->target_onoff != state->onoff) {
    4a7a:	42ba      	cmp	r2, r7
	state->last_msg_timestamp = now;
    4a7c:	9b01      	ldr	r3, [sp, #4]
    4a7e:	f8ca 300c 	str.w	r3, [sl, #12]
	state->target_onoff = onoff;
    4a82:	f88a 7001 	strb.w	r7, [sl, #1]
	if (state->target_onoff != state->onoff) {
    4a86:	d020      	beq.n	4aca <gen_onoff_set_unack+0xf2>
		onoff_tt_values(state, tt, delay);
    4a88:	4622      	mov	r2, r4
    4a8a:	4641      	mov	r1, r8
    4a8c:	4650      	mov	r0, sl
    4a8e:	f001 ff09 	bl	68a4 <onoff_tt_values>
	if (state->transition->counter == 0) {
    4a92:	f8da 2014 	ldr.w	r2, [sl, #20]
    4a96:	6891      	ldr	r1, [r2, #8]
    4a98:	b1e9      	cbz	r1, 4ad6 <gen_onoff_set_unack+0xfe>
	state->transition->just_started = true;
    4a9a:	2101      	movs	r1, #1
	gen_onoff_publish(model);
    4a9c:	4630      	mov	r0, r6
	state->transition->just_started = true;
    4a9e:	7011      	strb	r1, [r2, #0]
	gen_onoff_publish(model);
    4aa0:	f012 ff29 	bl	178f6 <gen_onoff_publish>
	onoff_handler(state);
    4aa4:	4650      	mov	r0, sl
}
    4aa6:	b003      	add	sp, #12
    4aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	onoff_handler(state);
    4aac:	f002 b846 	b.w	6b3c <onoff_handler>
		tt = net_buf_simple_pull_u8(buf);
    4ab0:	4620      	mov	r0, r4
    4ab2:	f01a fbae 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    4ab6:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    4aba:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    4abc:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    4abe:	d0c0      	beq.n	4a42 <gen_onoff_set_unack+0x6a>
		delay = net_buf_simple_pull_u8(buf);
    4ac0:	4620      	mov	r0, r4
    4ac2:	f01a fba6 	bl	1f212 <net_buf_simple_pull_u8>
    4ac6:	4604      	mov	r4, r0
		break;
    4ac8:	e7c2      	b.n	4a50 <gen_onoff_set_unack+0x78>
		gen_onoff_publish(model);
    4aca:	4630      	mov	r0, r6
}
    4acc:	b003      	add	sp, #12
    4ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_onoff_publish(model);
    4ad2:	f012 bf10 	b.w	178f6 <gen_onoff_publish>
		state->onoff = state->target_onoff;
    4ad6:	f89a 1001 	ldrb.w	r1, [sl, #1]
    4ada:	f88a 1000 	strb.w	r1, [sl]
    4ade:	e7dc      	b.n	4a9a <gen_onoff_set_unack+0xc2>
    4ae0:	200020ae 	.word	0x200020ae
    4ae4:	200006b8 	.word	0x200006b8
    4ae8:	20008580 	.word	0x20008580

00004aec <gen_onoff_set>:
{
    4aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct generic_onoff_state *state = model->user_data;
    4af0:	f8d0 a018 	ldr.w	sl, [r0, #24]
{
    4af4:	4606      	mov	r6, r0
	onoff = net_buf_simple_pull_u8(buf);
    4af6:	4610      	mov	r0, r2
{
    4af8:	4614      	mov	r4, r2
    4afa:	460d      	mov	r5, r1
	onoff = net_buf_simple_pull_u8(buf);
    4afc:	f01a fb89 	bl	1f212 <net_buf_simple_pull_u8>
    4b00:	4607      	mov	r7, r0
	tid = net_buf_simple_pull_u8(buf);
    4b02:	4620      	mov	r0, r4
    4b04:	f01a fb85 	bl	1f212 <net_buf_simple_pull_u8>
	if (onoff > STATE_ON) {
    4b08:	2f01      	cmp	r7, #1
	tid = net_buf_simple_pull_u8(buf);
    4b0a:	4683      	mov	fp, r0
	if (onoff > STATE_ON) {
    4b0c:	d82b      	bhi.n	4b66 <gen_onoff_set+0x7a>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    4b0e:	f01b f86a 	bl	1fbe6 <z_impl_k_uptime_get>
	if (state->last_tid == tid &&
    4b12:	f89a 2002 	ldrb.w	r2, [sl, #2]
    4b16:	455a      	cmp	r2, fp
    4b18:	e9cd 0100 	strd	r0, r1, [sp]
    4b1c:	d11f      	bne.n	4b5e <gen_onoff_set+0x72>
    4b1e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    4b22:	88aa      	ldrh	r2, [r5, #4]
    4b24:	4291      	cmp	r1, r2
    4b26:	d11a      	bne.n	4b5e <gen_onoff_set+0x72>
	    state->last_src_addr == ctx->addr &&
    4b28:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    4b2c:	88ea      	ldrh	r2, [r5, #6]
    4b2e:	4291      	cmp	r1, r2
    4b30:	d115      	bne.n	4b5e <gen_onoff_set+0x72>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    4b32:	e9da 2102 	ldrd	r2, r1, [sl, #8]
    4b36:	9b01      	ldr	r3, [sp, #4]
    4b38:	ebb0 0802 	subs.w	r8, r0, r2
	    state->last_dst_addr == ctx->recv_dst &&
    4b3c:	f241 7070 	movw	r0, #6000	; 0x1770
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    4b40:	eb63 0901 	sbc.w	r9, r3, r1
	    state->last_dst_addr == ctx->recv_dst &&
    4b44:	2100      	movs	r1, #0
    4b46:	4540      	cmp	r0, r8
    4b48:	eb71 0309 	sbcs.w	r3, r1, r9
    4b4c:	db07      	blt.n	4b5e <gen_onoff_set+0x72>
		gen_onoff_get(model, ctx, buf);
    4b4e:	4622      	mov	r2, r4
    4b50:	4629      	mov	r1, r5
    4b52:	4630      	mov	r0, r6
}
    4b54:	b003      	add	sp, #12
    4b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_onoff_get(model, ctx, buf);
    4b5a:	f7ff bb57 	b.w	420c <gen_onoff_get>
	switch (buf->len) {
    4b5e:	88a2      	ldrh	r2, [r4, #4]
    4b60:	b122      	cbz	r2, 4b6c <gen_onoff_set+0x80>
    4b62:	2a02      	cmp	r2, #2
    4b64:	d03b      	beq.n	4bde <gen_onoff_set+0xf2>
}
    4b66:	b003      	add	sp, #12
    4b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    4b6c:	492a      	ldr	r1, [pc, #168]	; (4c18 <gen_onoff_set+0x12c>)
    4b6e:	f891 8000 	ldrb.w	r8, [r1]
		delay = 0U;
    4b72:	4691      	mov	r9, r2
	*ptr_counter = 0U;
    4b74:	4a29      	ldr	r2, [pc, #164]	; (4c1c <gen_onoff_set+0x130>)
    4b76:	6812      	ldr	r2, [r2, #0]
    4b78:	2100      	movs	r1, #0
    4b7a:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    4b7c:	4a28      	ldr	r2, [pc, #160]	; (4c20 <gen_onoff_set+0x134>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    4b7e:	6810      	ldr	r0, [r2, #0]
    4b80:	f01b f84d 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    4b84:	f88a b002 	strb.w	fp, [sl, #2]
	state->last_src_addr = ctx->addr;
    4b88:	88aa      	ldrh	r2, [r5, #4]
    4b8a:	f8aa 2004 	strh.w	r2, [sl, #4]
	state->last_dst_addr = ctx->recv_dst;
    4b8e:	88ea      	ldrh	r2, [r5, #6]
    4b90:	f8aa 2006 	strh.w	r2, [sl, #6]
	if (state->target_onoff != state->onoff) {
    4b94:	f89a 2000 	ldrb.w	r2, [sl]
	state->last_msg_timestamp = now;
    4b98:	9b00      	ldr	r3, [sp, #0]
    4b9a:	f8ca 3008 	str.w	r3, [sl, #8]
	if (state->target_onoff != state->onoff) {
    4b9e:	42ba      	cmp	r2, r7
	state->last_msg_timestamp = now;
    4ba0:	9b01      	ldr	r3, [sp, #4]
    4ba2:	f8ca 300c 	str.w	r3, [sl, #12]
	state->target_onoff = onoff;
    4ba6:	f88a 7001 	strb.w	r7, [sl, #1]
	if (state->target_onoff != state->onoff) {
    4baa:	d025      	beq.n	4bf8 <gen_onoff_set+0x10c>
		onoff_tt_values(state, tt, delay);
    4bac:	464a      	mov	r2, r9
    4bae:	4641      	mov	r1, r8
    4bb0:	4650      	mov	r0, sl
    4bb2:	f001 fe77 	bl	68a4 <onoff_tt_values>
	if (state->transition->counter == 0) {
    4bb6:	f8da 2014 	ldr.w	r2, [sl, #20]
    4bba:	6891      	ldr	r1, [r2, #8]
    4bbc:	b339      	cbz	r1, 4c0e <gen_onoff_set+0x122>
	state->transition->just_started = true;
    4bbe:	2101      	movs	r1, #1
    4bc0:	7011      	strb	r1, [r2, #0]
	gen_onoff_get(model, ctx, buf);
    4bc2:	4630      	mov	r0, r6
    4bc4:	4622      	mov	r2, r4
    4bc6:	4629      	mov	r1, r5
    4bc8:	f7ff fb20 	bl	420c <gen_onoff_get>
	gen_onoff_publish(model);
    4bcc:	4630      	mov	r0, r6
    4bce:	f012 fe92 	bl	178f6 <gen_onoff_publish>
	onoff_handler(state);
    4bd2:	4650      	mov	r0, sl
}
    4bd4:	b003      	add	sp, #12
    4bd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	onoff_handler(state);
    4bda:	f001 bfaf 	b.w	6b3c <onoff_handler>
		tt = net_buf_simple_pull_u8(buf);
    4bde:	4620      	mov	r0, r4
    4be0:	f01a fb17 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    4be4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    4be8:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    4bea:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    4bec:	d0bb      	beq.n	4b66 <gen_onoff_set+0x7a>
		delay = net_buf_simple_pull_u8(buf);
    4bee:	4620      	mov	r0, r4
    4bf0:	f01a fb0f 	bl	1f212 <net_buf_simple_pull_u8>
    4bf4:	4681      	mov	r9, r0
		break;
    4bf6:	e7bd      	b.n	4b74 <gen_onoff_set+0x88>
		gen_onoff_get(model, ctx, buf);
    4bf8:	4630      	mov	r0, r6
    4bfa:	4622      	mov	r2, r4
    4bfc:	4629      	mov	r1, r5
    4bfe:	f7ff fb05 	bl	420c <gen_onoff_get>
		gen_onoff_publish(model);
    4c02:	4630      	mov	r0, r6
}
    4c04:	b003      	add	sp, #12
    4c06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_onoff_publish(model);
    4c0a:	f012 be74 	b.w	178f6 <gen_onoff_publish>
		state->onoff = state->target_onoff;
    4c0e:	f89a 1001 	ldrb.w	r1, [sl, #1]
    4c12:	f88a 1000 	strb.w	r1, [sl]
    4c16:	e7d2      	b.n	4bbe <gen_onoff_set+0xd2>
    4c18:	200020ae 	.word	0x200020ae
    4c1c:	200006b8 	.word	0x200006b8
    4c20:	20008580 	.word	0x20008580

00004c24 <gen_delta_set_unack>:
{
    4c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct generic_level_state *state = model->user_data;
    4c28:	6987      	ldr	r7, [r0, #24]
{
    4c2a:	b085      	sub	sp, #20
    4c2c:	4604      	mov	r4, r0
	delta = (s32_t) net_buf_simple_pull_le32(buf);
    4c2e:	4610      	mov	r0, r2
{
    4c30:	4692      	mov	sl, r2
    4c32:	460e      	mov	r6, r1
	delta = (s32_t) net_buf_simple_pull_le32(buf);
    4c34:	f01a fb08 	bl	1f248 <net_buf_simple_pull_le32>
    4c38:	4605      	mov	r5, r0
	tid = net_buf_simple_pull_u8(buf);
    4c3a:	4650      	mov	r0, sl
    4c3c:	f01a fae9 	bl	1f212 <net_buf_simple_pull_u8>
    4c40:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    4c42:	f01a ffd0 	bl	1fbe6 <z_impl_k_uptime_get>
    4c46:	e9cd 0101 	strd	r0, r1, [sp, #4]
	if (state->last_tid == tid &&
    4c4a:	7b39      	ldrb	r1, [r7, #12]
    4c4c:	4559      	cmp	r1, fp
    4c4e:	d124      	bne.n	4c9a <gen_delta_set_unack+0x76>
    4c50:	89f8      	ldrh	r0, [r7, #14]
    4c52:	88b1      	ldrh	r1, [r6, #4]
    4c54:	4288      	cmp	r0, r1
    4c56:	d120      	bne.n	4c9a <gen_delta_set_unack+0x76>
	    state->last_src_addr == ctx->addr &&
    4c58:	8a38      	ldrh	r0, [r7, #16]
    4c5a:	88f1      	ldrh	r1, [r6, #6]
    4c5c:	4288      	cmp	r0, r1
    4c5e:	d11c      	bne.n	4c9a <gen_delta_set_unack+0x76>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    4c60:	e9d7 1006 	ldrd	r1, r0, [r7, #24]
    4c64:	9b01      	ldr	r3, [sp, #4]
    4c66:	ebb3 0801 	subs.w	r8, r3, r1
    4c6a:	9b02      	ldr	r3, [sp, #8]
    4c6c:	eb63 0900 	sbc.w	r9, r3, r0
	    state->last_dst_addr == ctx->recv_dst &&
    4c70:	f241 7070 	movw	r0, #6000	; 0x1770
    4c74:	2100      	movs	r1, #0
    4c76:	4540      	cmp	r0, r8
    4c78:	eb71 0309 	sbcs.w	r3, r1, r9
    4c7c:	db0d      	blt.n	4c9a <gen_delta_set_unack+0x76>
		if (state->last_delta == delta) {
    4c7e:	68b9      	ldr	r1, [r7, #8]
    4c80:	42a9      	cmp	r1, r5
    4c82:	d007      	beq.n	4c94 <gen_delta_set_unack+0x70>
		tmp32 = state->last_level + delta;
    4c84:	f9b7 8004 	ldrsh.w	r8, [r7, #4]
	switch (buf->len) {
    4c88:	f8ba 1004 	ldrh.w	r1, [sl, #4]
		tmp32 = state->level + delta;
    4c8c:	44a8      	add	r8, r5
	switch (buf->len) {
    4c8e:	b149      	cbz	r1, 4ca4 <gen_delta_set_unack+0x80>
    4c90:	2902      	cmp	r1, #2
    4c92:	d046      	beq.n	4d22 <gen_delta_set_unack+0xfe>
}
    4c94:	b005      	add	sp, #20
    4c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		state->last_level = state->level;
    4c9a:	f9b7 8000 	ldrsh.w	r8, [r7]
    4c9e:	f8a7 8004 	strh.w	r8, [r7, #4]
    4ca2:	e7f1      	b.n	4c88 <gen_delta_set_unack+0x64>
		tt = default_tt;
    4ca4:	4a32      	ldr	r2, [pc, #200]	; (4d70 <gen_delta_set_unack+0x14c>)
    4ca6:	f892 9000 	ldrb.w	r9, [r2]
		delay = 0U;
    4caa:	460a      	mov	r2, r1
	*ptr_counter = 0U;
    4cac:	4931      	ldr	r1, [pc, #196]	; (4d74 <gen_delta_set_unack+0x150>)
    4cae:	9203      	str	r2, [sp, #12]
    4cb0:	6809      	ldr	r1, [r1, #0]
    4cb2:	2000      	movs	r0, #0
    4cb4:	6008      	str	r0, [r1, #0]
	k_timer_stop(ptr_timer);
    4cb6:	4930      	ldr	r1, [pc, #192]	; (4d78 <gen_delta_set_unack+0x154>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    4cb8:	6808      	ldr	r0, [r1, #0]
    4cba:	f01a ffb0 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    4cbe:	f887 b00c 	strb.w	fp, [r7, #12]
	state->last_src_addr = ctx->addr;
    4cc2:	88b1      	ldrh	r1, [r6, #4]
    4cc4:	81f9      	strh	r1, [r7, #14]
	state->last_dst_addr = ctx->recv_dst;
    4cc6:	88f1      	ldrh	r1, [r6, #6]
    4cc8:	8239      	strh	r1, [r7, #16]
	state->target_level = tmp32;
    4cca:	f308 080f 	ssat	r8, #16, r8
	if (state->target_level != state->level) {
    4cce:	f9b7 1000 	ldrsh.w	r1, [r7]
	state->last_msg_timestamp = now;
    4cd2:	9b01      	ldr	r3, [sp, #4]
    4cd4:	61bb      	str	r3, [r7, #24]
	state->target_level = tmp32;
    4cd6:	fa0f f888 	sxth.w	r8, r8
	state->last_msg_timestamp = now;
    4cda:	9b02      	ldr	r3, [sp, #8]
    4cdc:	61fb      	str	r3, [r7, #28]
	if (state->target_level != state->level) {
    4cde:	4541      	cmp	r1, r8
	state->last_delta = delta;
    4ce0:	60bd      	str	r5, [r7, #8]
	state->target_level = tmp32;
    4ce2:	f8a7 8002 	strh.w	r8, [r7, #2]
	if (state->target_level != state->level) {
    4ce6:	d029      	beq.n	4d3c <gen_delta_set_unack+0x118>
		level_tt_values(state, tt, delay);
    4ce8:	9a03      	ldr	r2, [sp, #12]
    4cea:	4649      	mov	r1, r9
    4cec:	4638      	mov	r0, r7
    4cee:	f001 fe0b 	bl	6908 <level_tt_values>
	if (state->transition->counter == 0) {
    4cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4cf4:	6891      	ldr	r1, [r2, #8]
    4cf6:	b339      	cbz	r1, 4d48 <gen_delta_set_unack+0x124>
	state->transition->just_started = true;
    4cf8:	2601      	movs	r6, #1
    4cfa:	7016      	strb	r6, [r2, #0]
	gen_level_publish(model);
    4cfc:	4620      	mov	r0, r4
    4cfe:	f012 fe1e 	bl	1793e <gen_level_publish>
	if (bt_mesh_model_elem(model)->addr == elements[0].addr) {
    4d02:	4620      	mov	r0, r4
    4d04:	f009 fb20 	bl	e348 <bt_mesh_model_elem>
    4d08:	4d1c      	ldr	r5, [pc, #112]	; (4d7c <gen_delta_set_unack+0x158>)
    4d0a:	8801      	ldrh	r1, [r0, #0]
    4d0c:	882a      	ldrh	r2, [r5, #0]
    4d0e:	4291      	cmp	r1, r2
    4d10:	d11d      	bne.n	4d4e <gen_delta_set_unack+0x12a>
		transition_type = LEVEL_TT_DELTA;
    4d12:	4a1b      	ldr	r2, [pc, #108]	; (4d80 <gen_delta_set_unack+0x15c>)
		level_lightness_handler(state);
    4d14:	4638      	mov	r0, r7
		transition_type = LEVEL_TT_DELTA;
    4d16:	7016      	strb	r6, [r2, #0]
}
    4d18:	b005      	add	sp, #20
    4d1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_lightness_handler(state);
    4d1e:	f001 bf25 	b.w	6b6c <level_lightness_handler>
		tt = net_buf_simple_pull_u8(buf);
    4d22:	4650      	mov	r0, sl
    4d24:	f01a fa75 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    4d28:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    4d2c:	293f      	cmp	r1, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    4d2e:	4681      	mov	r9, r0
		if ((tt & 0x3F) == 0x3F) {
    4d30:	d0b0      	beq.n	4c94 <gen_delta_set_unack+0x70>
		delay = net_buf_simple_pull_u8(buf);
    4d32:	4650      	mov	r0, sl
    4d34:	f01a fa6d 	bl	1f212 <net_buf_simple_pull_u8>
    4d38:	4602      	mov	r2, r0
		break;
    4d3a:	e7b7      	b.n	4cac <gen_delta_set_unack+0x88>
		gen_level_publish(model);
    4d3c:	4620      	mov	r0, r4
}
    4d3e:	b005      	add	sp, #20
    4d40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_level_publish(model);
    4d44:	f012 bdfb 	b.w	1793e <gen_level_publish>
		state->level = state->target_level;
    4d48:	8879      	ldrh	r1, [r7, #2]
    4d4a:	8039      	strh	r1, [r7, #0]
    4d4c:	e7d4      	b.n	4cf8 <gen_delta_set_unack+0xd4>
	} else if (bt_mesh_model_elem(model)->addr ==
    4d4e:	4620      	mov	r0, r4
    4d50:	f009 fafa 	bl	e348 <bt_mesh_model_elem>
    4d54:	8a2a      	ldrh	r2, [r5, #16]
    4d56:	8801      	ldrh	r1, [r0, #0]
    4d58:	4291      	cmp	r1, r2
    4d5a:	d19b      	bne.n	4c94 <gen_delta_set_unack+0x70>
		transition_type = LEVEL_TEMP_TT_DELTA;
    4d5c:	4a08      	ldr	r2, [pc, #32]	; (4d80 <gen_delta_set_unack+0x15c>)
    4d5e:	2104      	movs	r1, #4
		level_temp_handler(state);
    4d60:	4638      	mov	r0, r7
		transition_type = LEVEL_TEMP_TT_DELTA;
    4d62:	7011      	strb	r1, [r2, #0]
}
    4d64:	b005      	add	sp, #20
    4d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_temp_handler(state);
    4d6a:	f001 bf17 	b.w	6b9c <level_temp_handler>
    4d6e:	bf00      	nop
    4d70:	200020ae 	.word	0x200020ae
    4d74:	200006b8 	.word	0x200006b8
    4d78:	20008580 	.word	0x20008580
    4d7c:	20007f04 	.word	0x20007f04
    4d80:	200020af 	.word	0x200020af

00004d84 <gen_delta_set>:
{
    4d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct generic_level_state *state = model->user_data;
    4d88:	6984      	ldr	r4, [r0, #24]
{
    4d8a:	b085      	sub	sp, #20
    4d8c:	4605      	mov	r5, r0
	delta = (s32_t) net_buf_simple_pull_le32(buf);
    4d8e:	4610      	mov	r0, r2
{
    4d90:	4616      	mov	r6, r2
    4d92:	468a      	mov	sl, r1
	delta = (s32_t) net_buf_simple_pull_le32(buf);
    4d94:	f01a fa58 	bl	1f248 <net_buf_simple_pull_le32>
    4d98:	4607      	mov	r7, r0
	tid = net_buf_simple_pull_u8(buf);
    4d9a:	4630      	mov	r0, r6
    4d9c:	f01a fa39 	bl	1f212 <net_buf_simple_pull_u8>
    4da0:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    4da2:	f01a ff20 	bl	1fbe6 <z_impl_k_uptime_get>
	if (state->last_tid == tid &&
    4da6:	7b22      	ldrb	r2, [r4, #12]
    4da8:	455a      	cmp	r2, fp
    4daa:	e9cd 0101 	strd	r0, r1, [sp, #4]
    4dae:	d12c      	bne.n	4e0a <gen_delta_set+0x86>
    4db0:	89e1      	ldrh	r1, [r4, #14]
    4db2:	f8ba 2004 	ldrh.w	r2, [sl, #4]
    4db6:	4291      	cmp	r1, r2
    4db8:	d127      	bne.n	4e0a <gen_delta_set+0x86>
	    state->last_src_addr == ctx->addr &&
    4dba:	8a21      	ldrh	r1, [r4, #16]
    4dbc:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    4dc0:	4291      	cmp	r1, r2
    4dc2:	d122      	bne.n	4e0a <gen_delta_set+0x86>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    4dc4:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
    4dc8:	9b02      	ldr	r3, [sp, #8]
    4dca:	ebb0 0802 	subs.w	r8, r0, r2
	    state->last_dst_addr == ctx->recv_dst &&
    4dce:	f241 7070 	movw	r0, #6000	; 0x1770
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    4dd2:	eb63 0901 	sbc.w	r9, r3, r1
	    state->last_dst_addr == ctx->recv_dst &&
    4dd6:	2100      	movs	r1, #0
    4dd8:	4540      	cmp	r0, r8
    4dda:	eb71 0309 	sbcs.w	r3, r1, r9
    4dde:	db14      	blt.n	4e0a <gen_delta_set+0x86>
		if (state->last_delta == delta) {
    4de0:	68a2      	ldr	r2, [r4, #8]
    4de2:	42ba      	cmp	r2, r7
    4de4:	d107      	bne.n	4df6 <gen_delta_set+0x72>
			gen_level_get(model, ctx, buf);
    4de6:	4632      	mov	r2, r6
    4de8:	4651      	mov	r1, sl
    4dea:	4628      	mov	r0, r5
}
    4dec:	b005      	add	sp, #20
    4dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			gen_level_get(model, ctx, buf);
    4df2:	f7ff b9d7 	b.w	41a4 <gen_level_get>
		tmp32 = state->last_level + delta;
    4df6:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
	switch (buf->len) {
    4dfa:	88b2      	ldrh	r2, [r6, #4]
		tmp32 = state->level + delta;
    4dfc:	44b8      	add	r8, r7
	switch (buf->len) {
    4dfe:	b14a      	cbz	r2, 4e14 <gen_delta_set+0x90>
    4e00:	2a02      	cmp	r2, #2
    4e02:	d04c      	beq.n	4e9e <gen_delta_set+0x11a>
}
    4e04:	b005      	add	sp, #20
    4e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		state->last_level = state->level;
    4e0a:	f9b4 8000 	ldrsh.w	r8, [r4]
    4e0e:	f8a4 8004 	strh.w	r8, [r4, #4]
    4e12:	e7f2      	b.n	4dfa <gen_delta_set+0x76>
		tt = default_tt;
    4e14:	4937      	ldr	r1, [pc, #220]	; (4ef4 <gen_delta_set+0x170>)
    4e16:	f891 9000 	ldrb.w	r9, [r1]
	*ptr_counter = 0U;
    4e1a:	4937      	ldr	r1, [pc, #220]	; (4ef8 <gen_delta_set+0x174>)
    4e1c:	9203      	str	r2, [sp, #12]
    4e1e:	6809      	ldr	r1, [r1, #0]
    4e20:	2000      	movs	r0, #0
    4e22:	6008      	str	r0, [r1, #0]
	k_timer_stop(ptr_timer);
    4e24:	4935      	ldr	r1, [pc, #212]	; (4efc <gen_delta_set+0x178>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    4e26:	6808      	ldr	r0, [r1, #0]
    4e28:	f01a fef9 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    4e2c:	f884 b00c 	strb.w	fp, [r4, #12]
	state->last_src_addr = ctx->addr;
    4e30:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    4e34:	81e1      	strh	r1, [r4, #14]
	state->last_dst_addr = ctx->recv_dst;
    4e36:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    4e3a:	8221      	strh	r1, [r4, #16]
	state->target_level = tmp32;
    4e3c:	f308 080f 	ssat	r8, #16, r8
	if (state->target_level != state->level) {
    4e40:	f9b4 1000 	ldrsh.w	r1, [r4]
	state->last_msg_timestamp = now;
    4e44:	9b01      	ldr	r3, [sp, #4]
    4e46:	61a3      	str	r3, [r4, #24]
	state->target_level = tmp32;
    4e48:	fa0f f888 	sxth.w	r8, r8
	state->last_msg_timestamp = now;
    4e4c:	9b02      	ldr	r3, [sp, #8]
    4e4e:	61e3      	str	r3, [r4, #28]
	if (state->target_level != state->level) {
    4e50:	4541      	cmp	r1, r8
	state->last_delta = delta;
    4e52:	60a7      	str	r7, [r4, #8]
	state->target_level = tmp32;
    4e54:	f8a4 8002 	strh.w	r8, [r4, #2]
	if (state->target_level != state->level) {
    4e58:	d02e      	beq.n	4eb8 <gen_delta_set+0x134>
		level_tt_values(state, tt, delay);
    4e5a:	9a03      	ldr	r2, [sp, #12]
    4e5c:	4649      	mov	r1, r9
    4e5e:	4620      	mov	r0, r4
    4e60:	f001 fd52 	bl	6908 <level_tt_values>
	if (state->transition->counter == 0) {
    4e64:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4e66:	6891      	ldr	r1, [r2, #8]
    4e68:	b389      	cbz	r1, 4ece <gen_delta_set+0x14a>
	state->transition->just_started = true;
    4e6a:	2701      	movs	r7, #1
	gen_level_get(model, ctx, buf);
    4e6c:	4651      	mov	r1, sl
	state->transition->just_started = true;
    4e6e:	7017      	strb	r7, [r2, #0]
	gen_level_get(model, ctx, buf);
    4e70:	4628      	mov	r0, r5
    4e72:	4632      	mov	r2, r6
    4e74:	f7ff f996 	bl	41a4 <gen_level_get>
	gen_level_publish(model);
    4e78:	4628      	mov	r0, r5
    4e7a:	f012 fd60 	bl	1793e <gen_level_publish>
	if (bt_mesh_model_elem(model)->addr == elements[0].addr) {
    4e7e:	4628      	mov	r0, r5
    4e80:	f009 fa62 	bl	e348 <bt_mesh_model_elem>
    4e84:	4e1e      	ldr	r6, [pc, #120]	; (4f00 <gen_delta_set+0x17c>)
    4e86:	8802      	ldrh	r2, [r0, #0]
    4e88:	8833      	ldrh	r3, [r6, #0]
    4e8a:	429a      	cmp	r2, r3
    4e8c:	d122      	bne.n	4ed4 <gen_delta_set+0x150>
		transition_type = LEVEL_TT_DELTA;
    4e8e:	4b1d      	ldr	r3, [pc, #116]	; (4f04 <gen_delta_set+0x180>)
		level_lightness_handler(state);
    4e90:	4620      	mov	r0, r4
		transition_type = LEVEL_TT_DELTA;
    4e92:	701f      	strb	r7, [r3, #0]
}
    4e94:	b005      	add	sp, #20
    4e96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_lightness_handler(state);
    4e9a:	f001 be67 	b.w	6b6c <level_lightness_handler>
		tt = net_buf_simple_pull_u8(buf);
    4e9e:	4630      	mov	r0, r6
    4ea0:	f01a f9b7 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    4ea4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    4ea8:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    4eaa:	4681      	mov	r9, r0
		if ((tt & 0x3F) == 0x3F) {
    4eac:	d0aa      	beq.n	4e04 <gen_delta_set+0x80>
		delay = net_buf_simple_pull_u8(buf);
    4eae:	4630      	mov	r0, r6
    4eb0:	f01a f9af 	bl	1f212 <net_buf_simple_pull_u8>
    4eb4:	4602      	mov	r2, r0
		break;
    4eb6:	e7b0      	b.n	4e1a <gen_delta_set+0x96>
		gen_level_get(model, ctx, buf);
    4eb8:	4628      	mov	r0, r5
    4eba:	4632      	mov	r2, r6
    4ebc:	4651      	mov	r1, sl
    4ebe:	f7ff f971 	bl	41a4 <gen_level_get>
		gen_level_publish(model);
    4ec2:	4628      	mov	r0, r5
}
    4ec4:	b005      	add	sp, #20
    4ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_level_publish(model);
    4eca:	f012 bd38 	b.w	1793e <gen_level_publish>
		state->level = state->target_level;
    4ece:	8861      	ldrh	r1, [r4, #2]
    4ed0:	8021      	strh	r1, [r4, #0]
    4ed2:	e7ca      	b.n	4e6a <gen_delta_set+0xe6>
	} else if (bt_mesh_model_elem(model)->addr == elements[1].addr) {
    4ed4:	4628      	mov	r0, r5
    4ed6:	f009 fa37 	bl	e348 <bt_mesh_model_elem>
    4eda:	8a33      	ldrh	r3, [r6, #16]
    4edc:	8802      	ldrh	r2, [r0, #0]
    4ede:	429a      	cmp	r2, r3
    4ee0:	d190      	bne.n	4e04 <gen_delta_set+0x80>
		transition_type = LEVEL_TEMP_TT_DELTA;
    4ee2:	4b08      	ldr	r3, [pc, #32]	; (4f04 <gen_delta_set+0x180>)
    4ee4:	2204      	movs	r2, #4
		level_temp_handler(state);
    4ee6:	4620      	mov	r0, r4
		transition_type = LEVEL_TEMP_TT_DELTA;
    4ee8:	701a      	strb	r2, [r3, #0]
}
    4eea:	b005      	add	sp, #20
    4eec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_temp_handler(state);
    4ef0:	f001 be54 	b.w	6b9c <level_temp_handler>
    4ef4:	200020ae 	.word	0x200020ae
    4ef8:	200006b8 	.word	0x200006b8
    4efc:	20008580 	.word	0x20008580
    4f00:	20007f04 	.word	0x20007f04
    4f04:	200020af 	.word	0x200020af

00004f08 <gen_level_set_unack>:
{
    4f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct generic_level_state *state = model->user_data;
    4f0c:	6987      	ldr	r7, [r0, #24]
{
    4f0e:	4604      	mov	r4, r0
	level = (s16_t) net_buf_simple_pull_le16(buf);
    4f10:	4610      	mov	r0, r2
{
    4f12:	4615      	mov	r5, r2
    4f14:	460e      	mov	r6, r1
	level = (s16_t) net_buf_simple_pull_le16(buf);
    4f16:	f01a f984 	bl	1f222 <net_buf_simple_pull_le16>
    4f1a:	9001      	str	r0, [sp, #4]
	tid = net_buf_simple_pull_u8(buf);
    4f1c:	4628      	mov	r0, r5
    4f1e:	f01a f978 	bl	1f212 <net_buf_simple_pull_u8>
    4f22:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    4f24:	f01a fe5f 	bl	1fbe6 <z_impl_k_uptime_get>
    4f28:	468a      	mov	sl, r1
	if (state->last_tid == tid &&
    4f2a:	7b39      	ldrb	r1, [r7, #12]
    4f2c:	9000      	str	r0, [sp, #0]
    4f2e:	4559      	cmp	r1, fp
    4f30:	d115      	bne.n	4f5e <gen_level_set_unack+0x56>
    4f32:	89f8      	ldrh	r0, [r7, #14]
    4f34:	88b1      	ldrh	r1, [r6, #4]
    4f36:	4288      	cmp	r0, r1
    4f38:	d111      	bne.n	4f5e <gen_level_set_unack+0x56>
	    state->last_src_addr == ctx->addr &&
    4f3a:	8a38      	ldrh	r0, [r7, #16]
    4f3c:	88f1      	ldrh	r1, [r6, #6]
    4f3e:	4288      	cmp	r0, r1
    4f40:	d10d      	bne.n	4f5e <gen_level_set_unack+0x56>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    4f42:	e9d7 1006 	ldrd	r1, r0, [r7, #24]
    4f46:	9b00      	ldr	r3, [sp, #0]
    4f48:	ebb3 0801 	subs.w	r8, r3, r1
    4f4c:	eb6a 0900 	sbc.w	r9, sl, r0
	    state->last_dst_addr == ctx->recv_dst &&
    4f50:	f241 7070 	movw	r0, #6000	; 0x1770
    4f54:	2100      	movs	r1, #0
    4f56:	4540      	cmp	r0, r8
    4f58:	eb71 0309 	sbcs.w	r3, r1, r9
    4f5c:	da03      	bge.n	4f66 <gen_level_set_unack+0x5e>
	switch (buf->len) {
    4f5e:	88a8      	ldrh	r0, [r5, #4]
    4f60:	b120      	cbz	r0, 4f6c <gen_level_set_unack+0x64>
    4f62:	2802      	cmp	r0, #2
    4f64:	d03c      	beq.n	4fe0 <gen_level_set_unack+0xd8>
}
    4f66:	b003      	add	sp, #12
    4f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    4f6c:	4a2f      	ldr	r2, [pc, #188]	; (502c <gen_level_set_unack+0x124>)
    4f6e:	f892 8000 	ldrb.w	r8, [r2]
	*ptr_counter = 0U;
    4f72:	4a2f      	ldr	r2, [pc, #188]	; (5030 <gen_level_set_unack+0x128>)
	level = (s16_t) net_buf_simple_pull_le16(buf);
    4f74:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
	*ptr_counter = 0U;
    4f78:	6812      	ldr	r2, [r2, #0]
    4f7a:	2100      	movs	r1, #0
    4f7c:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    4f7e:	4a2d      	ldr	r2, [pc, #180]	; (5034 <gen_level_set_unack+0x12c>)
		delay = net_buf_simple_pull_u8(buf);
    4f80:	4681      	mov	r9, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    4f82:	6810      	ldr	r0, [r2, #0]
    4f84:	f01a fe4b 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    4f88:	f887 b00c 	strb.w	fp, [r7, #12]
	state->last_src_addr = ctx->addr;
    4f8c:	88b2      	ldrh	r2, [r6, #4]
    4f8e:	81fa      	strh	r2, [r7, #14]
	state->last_dst_addr = ctx->recv_dst;
    4f90:	88f2      	ldrh	r2, [r6, #6]
    4f92:	823a      	strh	r2, [r7, #16]
	if (state->target_level != state->level) {
    4f94:	f9b7 2000 	ldrsh.w	r2, [r7]
	state->last_msg_timestamp = now;
    4f98:	9b00      	ldr	r3, [sp, #0]
	state->target_level = level;
    4f9a:	807d      	strh	r5, [r7, #2]
	if (state->target_level != state->level) {
    4f9c:	42aa      	cmp	r2, r5
	state->last_msg_timestamp = now;
    4f9e:	e9c7 3a06 	strd	r3, sl, [r7, #24]
	if (state->target_level != state->level) {
    4fa2:	d029      	beq.n	4ff8 <gen_level_set_unack+0xf0>
		level_tt_values(state, tt, delay);
    4fa4:	464a      	mov	r2, r9
    4fa6:	4641      	mov	r1, r8
    4fa8:	4638      	mov	r0, r7
    4faa:	f001 fcad 	bl	6908 <level_tt_values>
	if (state->transition->counter == 0) {
    4fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4fb0:	6891      	ldr	r1, [r2, #8]
    4fb2:	b339      	cbz	r1, 5004 <gen_level_set_unack+0xfc>
	state->transition->just_started = true;
    4fb4:	2101      	movs	r1, #1
    4fb6:	7011      	strb	r1, [r2, #0]
	gen_level_publish(model);
    4fb8:	4620      	mov	r0, r4
    4fba:	f012 fcc0 	bl	1793e <gen_level_publish>
	if (bt_mesh_model_elem(model)->addr == elements[0].addr) {
    4fbe:	4620      	mov	r0, r4
    4fc0:	f009 f9c2 	bl	e348 <bt_mesh_model_elem>
    4fc4:	4d1c      	ldr	r5, [pc, #112]	; (5038 <gen_level_set_unack+0x130>)
    4fc6:	8801      	ldrh	r1, [r0, #0]
    4fc8:	882a      	ldrh	r2, [r5, #0]
    4fca:	4291      	cmp	r1, r2
    4fcc:	d11d      	bne.n	500a <gen_level_set_unack+0x102>
		transition_type = LEVEL_TT;
    4fce:	4a1b      	ldr	r2, [pc, #108]	; (503c <gen_level_set_unack+0x134>)
    4fd0:	2100      	movs	r1, #0
		level_lightness_handler(state);
    4fd2:	4638      	mov	r0, r7
		transition_type = LEVEL_TT;
    4fd4:	7011      	strb	r1, [r2, #0]
}
    4fd6:	b003      	add	sp, #12
    4fd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_lightness_handler(state);
    4fdc:	f001 bdc6 	b.w	6b6c <level_lightness_handler>
		tt = net_buf_simple_pull_u8(buf);
    4fe0:	4628      	mov	r0, r5
    4fe2:	f01a f916 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    4fe6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    4fea:	293f      	cmp	r1, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    4fec:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    4fee:	d0ba      	beq.n	4f66 <gen_level_set_unack+0x5e>
		delay = net_buf_simple_pull_u8(buf);
    4ff0:	4628      	mov	r0, r5
    4ff2:	f01a f90e 	bl	1f212 <net_buf_simple_pull_u8>
    4ff6:	e7bc      	b.n	4f72 <gen_level_set_unack+0x6a>
		gen_level_publish(model);
    4ff8:	4620      	mov	r0, r4
}
    4ffa:	b003      	add	sp, #12
    4ffc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_level_publish(model);
    5000:	f012 bc9d 	b.w	1793e <gen_level_publish>
		state->level = state->target_level;
    5004:	8879      	ldrh	r1, [r7, #2]
    5006:	8039      	strh	r1, [r7, #0]
    5008:	e7d4      	b.n	4fb4 <gen_level_set_unack+0xac>
	} else if (bt_mesh_model_elem(model)->addr == elements[1].addr) {
    500a:	4620      	mov	r0, r4
    500c:	f009 f99c 	bl	e348 <bt_mesh_model_elem>
    5010:	8a2a      	ldrh	r2, [r5, #16]
    5012:	8801      	ldrh	r1, [r0, #0]
    5014:	4291      	cmp	r1, r2
    5016:	d1a6      	bne.n	4f66 <gen_level_set_unack+0x5e>
		transition_type = LEVEL_TEMP_TT;
    5018:	4a08      	ldr	r2, [pc, #32]	; (503c <gen_level_set_unack+0x134>)
    501a:	2103      	movs	r1, #3
		level_temp_handler(state);
    501c:	4638      	mov	r0, r7
		transition_type = LEVEL_TEMP_TT;
    501e:	7011      	strb	r1, [r2, #0]
}
    5020:	b003      	add	sp, #12
    5022:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_temp_handler(state);
    5026:	f001 bdb9 	b.w	6b9c <level_temp_handler>
    502a:	bf00      	nop
    502c:	200020ae 	.word	0x200020ae
    5030:	200006b8 	.word	0x200006b8
    5034:	20008580 	.word	0x20008580
    5038:	20007f04 	.word	0x20007f04
    503c:	200020af 	.word	0x200020af

00005040 <gen_level_set>:
{
    5040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct generic_level_state *state = model->user_data;
    5044:	6984      	ldr	r4, [r0, #24]
{
    5046:	4605      	mov	r5, r0
	level = (s16_t) net_buf_simple_pull_le16(buf);
    5048:	4610      	mov	r0, r2
{
    504a:	4616      	mov	r6, r2
    504c:	468a      	mov	sl, r1
	level = (s16_t) net_buf_simple_pull_le16(buf);
    504e:	f01a f8e8 	bl	1f222 <net_buf_simple_pull_le16>
    5052:	9001      	str	r0, [sp, #4]
	tid = net_buf_simple_pull_u8(buf);
    5054:	4630      	mov	r0, r6
    5056:	f01a f8dc 	bl	1f212 <net_buf_simple_pull_u8>
    505a:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    505c:	f01a fdc3 	bl	1fbe6 <z_impl_k_uptime_get>
	if (state->last_tid == tid &&
    5060:	7b22      	ldrb	r2, [r4, #12]
    5062:	9100      	str	r1, [sp, #0]
    5064:	455a      	cmp	r2, fp
    5066:	4607      	mov	r7, r0
    5068:	d11f      	bne.n	50aa <gen_level_set+0x6a>
    506a:	89e1      	ldrh	r1, [r4, #14]
    506c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
    5070:	4291      	cmp	r1, r2
    5072:	d11a      	bne.n	50aa <gen_level_set+0x6a>
	    state->last_src_addr == ctx->addr &&
    5074:	8a21      	ldrh	r1, [r4, #16]
    5076:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    507a:	4291      	cmp	r1, r2
    507c:	d115      	bne.n	50aa <gen_level_set+0x6a>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    507e:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
    5082:	9b00      	ldr	r3, [sp, #0]
    5084:	ebb7 0802 	subs.w	r8, r7, r2
	    state->last_dst_addr == ctx->recv_dst &&
    5088:	f241 7070 	movw	r0, #6000	; 0x1770
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    508c:	eb63 0901 	sbc.w	r9, r3, r1
	    state->last_dst_addr == ctx->recv_dst &&
    5090:	2100      	movs	r1, #0
    5092:	4540      	cmp	r0, r8
    5094:	eb71 0309 	sbcs.w	r3, r1, r9
    5098:	db07      	blt.n	50aa <gen_level_set+0x6a>
		gen_level_get(model, ctx, buf);
    509a:	4632      	mov	r2, r6
    509c:	4651      	mov	r1, sl
    509e:	4628      	mov	r0, r5
}
    50a0:	b003      	add	sp, #12
    50a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_level_get(model, ctx, buf);
    50a6:	f7ff b87d 	b.w	41a4 <gen_level_get>
	switch (buf->len) {
    50aa:	88b2      	ldrh	r2, [r6, #4]
    50ac:	b122      	cbz	r2, 50b8 <gen_level_set+0x78>
    50ae:	2a02      	cmp	r2, #2
    50b0:	d045      	beq.n	513e <gen_level_set+0xfe>
}
    50b2:	b003      	add	sp, #12
    50b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    50b8:	4936      	ldr	r1, [pc, #216]	; (5194 <gen_level_set+0x154>)
    50ba:	f891 8000 	ldrb.w	r8, [r1]
		delay = 0U;
    50be:	4691      	mov	r9, r2
	*ptr_counter = 0U;
    50c0:	4935      	ldr	r1, [pc, #212]	; (5198 <gen_level_set+0x158>)
	level = (s16_t) net_buf_simple_pull_le16(buf);
    50c2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
	*ptr_counter = 0U;
    50c6:	6809      	ldr	r1, [r1, #0]
	level = (s16_t) net_buf_simple_pull_le16(buf);
    50c8:	9201      	str	r2, [sp, #4]
	*ptr_counter = 0U;
    50ca:	2000      	movs	r0, #0
    50cc:	6008      	str	r0, [r1, #0]
	k_timer_stop(ptr_timer);
    50ce:	4933      	ldr	r1, [pc, #204]	; (519c <gen_level_set+0x15c>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    50d0:	6808      	ldr	r0, [r1, #0]
    50d2:	f01a fda4 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    50d6:	f884 b00c 	strb.w	fp, [r4, #12]
	state->last_src_addr = ctx->addr;
    50da:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    50de:	81e1      	strh	r1, [r4, #14]
	state->last_dst_addr = ctx->recv_dst;
    50e0:	f8ba 1006 	ldrh.w	r1, [sl, #6]
	state->target_level = level;
    50e4:	9a01      	ldr	r2, [sp, #4]
	state->last_dst_addr = ctx->recv_dst;
    50e6:	8221      	strh	r1, [r4, #16]
	if (state->target_level != state->level) {
    50e8:	f9b4 1000 	ldrsh.w	r1, [r4]
	state->last_msg_timestamp = now;
    50ec:	9b00      	ldr	r3, [sp, #0]
    50ee:	61a7      	str	r7, [r4, #24]
	if (state->target_level != state->level) {
    50f0:	4291      	cmp	r1, r2
	state->last_msg_timestamp = now;
    50f2:	61e3      	str	r3, [r4, #28]
	state->target_level = level;
    50f4:	8062      	strh	r2, [r4, #2]
	if (state->target_level != state->level) {
    50f6:	d02f      	beq.n	5158 <gen_level_set+0x118>
		level_tt_values(state, tt, delay);
    50f8:	464a      	mov	r2, r9
    50fa:	4641      	mov	r1, r8
    50fc:	4620      	mov	r0, r4
    50fe:	f001 fc03 	bl	6908 <level_tt_values>
	if (state->transition->counter == 0) {
    5102:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5104:	6891      	ldr	r1, [r2, #8]
    5106:	b391      	cbz	r1, 516e <gen_level_set+0x12e>
	state->transition->just_started = true;
    5108:	2101      	movs	r1, #1
    510a:	7011      	strb	r1, [r2, #0]
	gen_level_get(model, ctx, buf);
    510c:	4628      	mov	r0, r5
    510e:	4632      	mov	r2, r6
    5110:	4651      	mov	r1, sl
    5112:	f7ff f847 	bl	41a4 <gen_level_get>
	gen_level_publish(model);
    5116:	4628      	mov	r0, r5
    5118:	f012 fc11 	bl	1793e <gen_level_publish>
	if (bt_mesh_model_elem(model)->addr == elements[0].addr) {
    511c:	4628      	mov	r0, r5
    511e:	f009 f913 	bl	e348 <bt_mesh_model_elem>
    5122:	4e1f      	ldr	r6, [pc, #124]	; (51a0 <gen_level_set+0x160>)
    5124:	8802      	ldrh	r2, [r0, #0]
    5126:	8833      	ldrh	r3, [r6, #0]
    5128:	429a      	cmp	r2, r3
    512a:	d123      	bne.n	5174 <gen_level_set+0x134>
		transition_type = LEVEL_TT;
    512c:	4b1d      	ldr	r3, [pc, #116]	; (51a4 <gen_level_set+0x164>)
    512e:	2200      	movs	r2, #0
		level_lightness_handler(state);
    5130:	4620      	mov	r0, r4
		transition_type = LEVEL_TT;
    5132:	701a      	strb	r2, [r3, #0]
}
    5134:	b003      	add	sp, #12
    5136:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_lightness_handler(state);
    513a:	f001 bd17 	b.w	6b6c <level_lightness_handler>
		tt = net_buf_simple_pull_u8(buf);
    513e:	4630      	mov	r0, r6
    5140:	f01a f867 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    5144:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    5148:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    514a:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    514c:	d0b1      	beq.n	50b2 <gen_level_set+0x72>
		delay = net_buf_simple_pull_u8(buf);
    514e:	4630      	mov	r0, r6
    5150:	f01a f85f 	bl	1f212 <net_buf_simple_pull_u8>
    5154:	4681      	mov	r9, r0
		break;
    5156:	e7b3      	b.n	50c0 <gen_level_set+0x80>
		gen_level_get(model, ctx, buf);
    5158:	4628      	mov	r0, r5
    515a:	4632      	mov	r2, r6
    515c:	4651      	mov	r1, sl
    515e:	f7ff f821 	bl	41a4 <gen_level_get>
		gen_level_publish(model);
    5162:	4628      	mov	r0, r5
}
    5164:	b003      	add	sp, #12
    5166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		gen_level_publish(model);
    516a:	f012 bbe8 	b.w	1793e <gen_level_publish>
		state->level = state->target_level;
    516e:	8861      	ldrh	r1, [r4, #2]
    5170:	8021      	strh	r1, [r4, #0]
    5172:	e7c9      	b.n	5108 <gen_level_set+0xc8>
	} else if (bt_mesh_model_elem(model)->addr == elements[1].addr) {
    5174:	4628      	mov	r0, r5
    5176:	f009 f8e7 	bl	e348 <bt_mesh_model_elem>
    517a:	8a33      	ldrh	r3, [r6, #16]
    517c:	8802      	ldrh	r2, [r0, #0]
    517e:	429a      	cmp	r2, r3
    5180:	d197      	bne.n	50b2 <gen_level_set+0x72>
		transition_type = LEVEL_TEMP_TT;
    5182:	4b08      	ldr	r3, [pc, #32]	; (51a4 <gen_level_set+0x164>)
    5184:	2203      	movs	r2, #3
		level_temp_handler(state);
    5186:	4620      	mov	r0, r4
		transition_type = LEVEL_TEMP_TT;
    5188:	701a      	strb	r2, [r3, #0]
}
    518a:	b003      	add	sp, #12
    518c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		level_temp_handler(state);
    5190:	f001 bd04 	b.w	6b9c <level_temp_handler>
    5194:	200020ae 	.word	0x200020ae
    5198:	200006b8 	.word	0x200006b8
    519c:	20008580 	.word	0x20008580
    51a0:	20007f04 	.word	0x20007f04
    51a4:	200020af 	.word	0x200020af

000051a8 <light_lightness_set_unack>:
{
    51a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct light_lightness_state *state = model->user_data;
    51ac:	6987      	ldr	r7, [r0, #24]
{
    51ae:	4605      	mov	r5, r0
	actual = net_buf_simple_pull_le16(buf);
    51b0:	4610      	mov	r0, r2
{
    51b2:	4692      	mov	sl, r2
    51b4:	460c      	mov	r4, r1
	actual = net_buf_simple_pull_le16(buf);
    51b6:	f01a f834 	bl	1f222 <net_buf_simple_pull_le16>
    51ba:	4606      	mov	r6, r0
	tid = net_buf_simple_pull_u8(buf);
    51bc:	4650      	mov	r0, sl
    51be:	f01a f828 	bl	1f212 <net_buf_simple_pull_u8>
    51c2:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    51c4:	f01a fd0f 	bl	1fbe6 <z_impl_k_uptime_get>
    51c8:	e9cd 0100 	strd	r0, r1, [sp]
	if (state->last_tid == tid &&
    51cc:	7e39      	ldrb	r1, [r7, #24]
    51ce:	4559      	cmp	r1, fp
    51d0:	d116      	bne.n	5200 <light_lightness_set_unack+0x58>
    51d2:	8b78      	ldrh	r0, [r7, #26]
    51d4:	88a1      	ldrh	r1, [r4, #4]
    51d6:	4288      	cmp	r0, r1
    51d8:	d112      	bne.n	5200 <light_lightness_set_unack+0x58>
	    state->last_src_addr == ctx->addr &&
    51da:	8bb8      	ldrh	r0, [r7, #28]
    51dc:	88e1      	ldrh	r1, [r4, #6]
    51de:	4288      	cmp	r0, r1
    51e0:	d10e      	bne.n	5200 <light_lightness_set_unack+0x58>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    51e2:	e9d7 1008 	ldrd	r1, r0, [r7, #32]
    51e6:	9b00      	ldr	r3, [sp, #0]
    51e8:	ebb3 0801 	subs.w	r8, r3, r1
    51ec:	9b01      	ldr	r3, [sp, #4]
    51ee:	eb63 0900 	sbc.w	r9, r3, r0
	    state->last_dst_addr == ctx->recv_dst &&
    51f2:	f241 7070 	movw	r0, #6000	; 0x1770
    51f6:	2100      	movs	r1, #0
    51f8:	4540      	cmp	r0, r8
    51fa:	eb71 0309 	sbcs.w	r3, r1, r9
    51fe:	da04      	bge.n	520a <light_lightness_set_unack+0x62>
	switch (buf->len) {
    5200:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    5204:	b121      	cbz	r1, 5210 <light_lightness_set_unack+0x68>
    5206:	2902      	cmp	r1, #2
    5208:	d038      	beq.n	527c <light_lightness_set_unack+0xd4>
}
    520a:	b003      	add	sp, #12
    520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    5210:	4a25      	ldr	r2, [pc, #148]	; (52a8 <light_lightness_set_unack+0x100>)
    5212:	f892 8000 	ldrb.w	r8, [r2]
		delay = 0U;
    5216:	4689      	mov	r9, r1
	*ptr_counter = 0U;
    5218:	4a24      	ldr	r2, [pc, #144]	; (52ac <light_lightness_set_unack+0x104>)
    521a:	6812      	ldr	r2, [r2, #0]
    521c:	2100      	movs	r1, #0
    521e:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    5220:	4a23      	ldr	r2, [pc, #140]	; (52b0 <light_lightness_set_unack+0x108>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    5222:	6810      	ldr	r0, [r2, #0]
    5224:	f01a fcfb 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    5228:	f887 b018 	strb.w	fp, [r7, #24]
	state->last_src_addr = ctx->addr;
    522c:	88a2      	ldrh	r2, [r4, #4]
	state->last_msg_timestamp = now;
    522e:	9b00      	ldr	r3, [sp, #0]
	state->last_src_addr = ctx->addr;
    5230:	837a      	strh	r2, [r7, #26]
	state->last_dst_addr = ctx->recv_dst;
    5232:	88e2      	ldrh	r2, [r4, #6]
	state->last_msg_timestamp = now;
    5234:	623b      	str	r3, [r7, #32]
    5236:	9b01      	ldr	r3, [sp, #4]
	state->last_dst_addr = ctx->recv_dst;
    5238:	83ba      	strh	r2, [r7, #28]
	state->last_msg_timestamp = now;
    523a:	627b      	str	r3, [r7, #36]	; 0x24
	if (actual > 0 && actual < state->light_range_min) {
    523c:	b116      	cbz	r6, 5244 <light_lightness_set_unack+0x9c>
    523e:	89f8      	ldrh	r0, [r7, #14]
    5240:	42b0      	cmp	r0, r6
    5242:	d804      	bhi.n	524e <light_lightness_set_unack+0xa6>
	} else if (actual > state->light_range_max) {
    5244:	8a38      	ldrh	r0, [r7, #16]
    5246:	4286      	cmp	r6, r0
    5248:	bf28      	it	cs
    524a:	4606      	movcs	r6, r0
    524c:	b2b0      	uxth	r0, r6
	if (state->target_actual != state->actual) {
    524e:	88ba      	ldrh	r2, [r7, #4]
	state->target_actual = actual;
    5250:	80f8      	strh	r0, [r7, #6]
	if (state->target_actual != state->actual) {
    5252:	4282      	cmp	r2, r0
    5254:	d01f      	beq.n	5296 <light_lightness_set_unack+0xee>
		light_lightness_actual_tt_values(state, tt, delay);
    5256:	464a      	mov	r2, r9
    5258:	4641      	mov	r1, r8
    525a:	4638      	mov	r0, r7
    525c:	f001 fb96 	bl	698c <light_lightness_actual_tt_values>
	if (state->transition->counter == 0) {
    5260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5262:	6891      	ldr	r1, [r2, #8]
    5264:	b1e9      	cbz	r1, 52a2 <light_lightness_set_unack+0xfa>
	state->transition->just_started = true;
    5266:	2101      	movs	r1, #1
	light_lightness_publish(model);
    5268:	4628      	mov	r0, r5
	state->transition->just_started = true;
    526a:	7011      	strb	r1, [r2, #0]
	light_lightness_publish(model);
    526c:	f012 fb8b 	bl	17986 <light_lightness_publish>
	light_lightness_actual_handler(state);
    5270:	4638      	mov	r0, r7
}
    5272:	b003      	add	sp, #12
    5274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	light_lightness_actual_handler(state);
    5278:	f001 bca8 	b.w	6bcc <light_lightness_actual_handler>
		tt = net_buf_simple_pull_u8(buf);
    527c:	4650      	mov	r0, sl
    527e:	f019 ffc8 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    5282:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    5286:	293f      	cmp	r1, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    5288:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    528a:	d0be      	beq.n	520a <light_lightness_set_unack+0x62>
		delay = net_buf_simple_pull_u8(buf);
    528c:	4650      	mov	r0, sl
    528e:	f019 ffc0 	bl	1f212 <net_buf_simple_pull_u8>
    5292:	4681      	mov	r9, r0
		break;
    5294:	e7c0      	b.n	5218 <light_lightness_set_unack+0x70>
		light_lightness_publish(model);
    5296:	4628      	mov	r0, r5
}
    5298:	b003      	add	sp, #12
    529a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_lightness_publish(model);
    529e:	f012 bb72 	b.w	17986 <light_lightness_publish>
		state->actual = state->target_actual;
    52a2:	88f9      	ldrh	r1, [r7, #6]
    52a4:	80b9      	strh	r1, [r7, #4]
    52a6:	e7de      	b.n	5266 <light_lightness_set_unack+0xbe>
    52a8:	200020ae 	.word	0x200020ae
    52ac:	200006b8 	.word	0x200006b8
    52b0:	20008580 	.word	0x20008580

000052b4 <light_lightness_set>:
{
    52b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct light_lightness_state *state = model->user_data;
    52b8:	6984      	ldr	r4, [r0, #24]
{
    52ba:	4606      	mov	r6, r0
	actual = net_buf_simple_pull_le16(buf);
    52bc:	4610      	mov	r0, r2
{
    52be:	4615      	mov	r5, r2
    52c0:	468a      	mov	sl, r1
	actual = net_buf_simple_pull_le16(buf);
    52c2:	f019 ffae 	bl	1f222 <net_buf_simple_pull_le16>
    52c6:	4607      	mov	r7, r0
	tid = net_buf_simple_pull_u8(buf);
    52c8:	4628      	mov	r0, r5
    52ca:	f019 ffa2 	bl	1f212 <net_buf_simple_pull_u8>
    52ce:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    52d0:	f01a fc89 	bl	1fbe6 <z_impl_k_uptime_get>
	if (state->last_tid == tid &&
    52d4:	7e22      	ldrb	r2, [r4, #24]
    52d6:	455a      	cmp	r2, fp
    52d8:	e9cd 0100 	strd	r0, r1, [sp]
    52dc:	d11f      	bne.n	531e <light_lightness_set+0x6a>
    52de:	8b61      	ldrh	r1, [r4, #26]
    52e0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
    52e4:	4291      	cmp	r1, r2
    52e6:	d11a      	bne.n	531e <light_lightness_set+0x6a>
	    state->last_src_addr == ctx->addr &&
    52e8:	8ba1      	ldrh	r1, [r4, #28]
    52ea:	f8ba 2006 	ldrh.w	r2, [sl, #6]
    52ee:	4291      	cmp	r1, r2
    52f0:	d115      	bne.n	531e <light_lightness_set+0x6a>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    52f2:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    52f6:	9b01      	ldr	r3, [sp, #4]
    52f8:	ebb0 0802 	subs.w	r8, r0, r2
	    state->last_dst_addr == ctx->recv_dst &&
    52fc:	f241 7070 	movw	r0, #6000	; 0x1770
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    5300:	eb63 0901 	sbc.w	r9, r3, r1
	    state->last_dst_addr == ctx->recv_dst &&
    5304:	2100      	movs	r1, #0
    5306:	4540      	cmp	r0, r8
    5308:	eb71 0309 	sbcs.w	r3, r1, r9
    530c:	db07      	blt.n	531e <light_lightness_set+0x6a>
		light_lightness_get(model, ctx, buf);
    530e:	462a      	mov	r2, r5
    5310:	4651      	mov	r1, sl
    5312:	4630      	mov	r0, r6
}
    5314:	b003      	add	sp, #12
    5316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_lightness_get(model, ctx, buf);
    531a:	f7fe bec3 	b.w	40a4 <light_lightness_get>
	switch (buf->len) {
    531e:	88aa      	ldrh	r2, [r5, #4]
    5320:	b122      	cbz	r2, 532c <light_lightness_set+0x78>
    5322:	2a02      	cmp	r2, #2
    5324:	d03f      	beq.n	53a6 <light_lightness_set+0xf2>
}
    5326:	b003      	add	sp, #12
    5328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    532c:	492b      	ldr	r1, [pc, #172]	; (53dc <light_lightness_set+0x128>)
    532e:	f891 8000 	ldrb.w	r8, [r1]
		delay = 0U;
    5332:	4691      	mov	r9, r2
	*ptr_counter = 0U;
    5334:	4a2a      	ldr	r2, [pc, #168]	; (53e0 <light_lightness_set+0x12c>)
    5336:	6812      	ldr	r2, [r2, #0]
    5338:	2100      	movs	r1, #0
    533a:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    533c:	4a29      	ldr	r2, [pc, #164]	; (53e4 <light_lightness_set+0x130>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    533e:	6810      	ldr	r0, [r2, #0]
    5340:	f01a fc6d 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    5344:	f884 b018 	strb.w	fp, [r4, #24]
	state->last_src_addr = ctx->addr;
    5348:	f8ba 2004 	ldrh.w	r2, [sl, #4]
	state->last_msg_timestamp = now;
    534c:	9b00      	ldr	r3, [sp, #0]
	state->last_src_addr = ctx->addr;
    534e:	8362      	strh	r2, [r4, #26]
	state->last_dst_addr = ctx->recv_dst;
    5350:	f8ba 2006 	ldrh.w	r2, [sl, #6]
	state->last_msg_timestamp = now;
    5354:	6223      	str	r3, [r4, #32]
    5356:	9b01      	ldr	r3, [sp, #4]
	state->last_dst_addr = ctx->recv_dst;
    5358:	83a2      	strh	r2, [r4, #28]
	state->last_msg_timestamp = now;
    535a:	6263      	str	r3, [r4, #36]	; 0x24
	if (actual > 0 && actual < state->light_range_min) {
    535c:	b117      	cbz	r7, 5364 <light_lightness_set+0xb0>
    535e:	89e0      	ldrh	r0, [r4, #14]
    5360:	42b8      	cmp	r0, r7
    5362:	d804      	bhi.n	536e <light_lightness_set+0xba>
	} else if (actual > state->light_range_max) {
    5364:	8a20      	ldrh	r0, [r4, #16]
    5366:	4287      	cmp	r7, r0
    5368:	bf28      	it	cs
    536a:	4607      	movcs	r7, r0
    536c:	b2b8      	uxth	r0, r7
	if (state->target_actual != state->actual) {
    536e:	88a2      	ldrh	r2, [r4, #4]
	state->target_actual = actual;
    5370:	80e0      	strh	r0, [r4, #6]
	if (state->target_actual != state->actual) {
    5372:	4282      	cmp	r2, r0
    5374:	d024      	beq.n	53c0 <light_lightness_set+0x10c>
		light_lightness_actual_tt_values(state, tt, delay);
    5376:	464a      	mov	r2, r9
    5378:	4641      	mov	r1, r8
    537a:	4620      	mov	r0, r4
    537c:	f001 fb06 	bl	698c <light_lightness_actual_tt_values>
	if (state->transition->counter == 0) {
    5380:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5382:	6891      	ldr	r1, [r2, #8]
    5384:	b339      	cbz	r1, 53d6 <light_lightness_set+0x122>
	state->transition->just_started = true;
    5386:	2101      	movs	r1, #1
    5388:	7011      	strb	r1, [r2, #0]
	light_lightness_get(model, ctx, buf);
    538a:	4630      	mov	r0, r6
    538c:	462a      	mov	r2, r5
    538e:	4651      	mov	r1, sl
    5390:	f7fe fe88 	bl	40a4 <light_lightness_get>
	light_lightness_publish(model);
    5394:	4630      	mov	r0, r6
    5396:	f012 faf6 	bl	17986 <light_lightness_publish>
	light_lightness_actual_handler(state);
    539a:	4620      	mov	r0, r4
}
    539c:	b003      	add	sp, #12
    539e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	light_lightness_actual_handler(state);
    53a2:	f001 bc13 	b.w	6bcc <light_lightness_actual_handler>
		tt = net_buf_simple_pull_u8(buf);
    53a6:	4628      	mov	r0, r5
    53a8:	f019 ff33 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    53ac:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    53b0:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    53b2:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    53b4:	d0b7      	beq.n	5326 <light_lightness_set+0x72>
		delay = net_buf_simple_pull_u8(buf);
    53b6:	4628      	mov	r0, r5
    53b8:	f019 ff2b 	bl	1f212 <net_buf_simple_pull_u8>
    53bc:	4681      	mov	r9, r0
		break;
    53be:	e7b9      	b.n	5334 <light_lightness_set+0x80>
		light_lightness_get(model, ctx, buf);
    53c0:	4630      	mov	r0, r6
    53c2:	462a      	mov	r2, r5
    53c4:	4651      	mov	r1, sl
    53c6:	f7fe fe6d 	bl	40a4 <light_lightness_get>
		light_lightness_publish(model);
    53ca:	4630      	mov	r0, r6
}
    53cc:	b003      	add	sp, #12
    53ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_lightness_publish(model);
    53d2:	f012 bad8 	b.w	17986 <light_lightness_publish>
		state->actual = state->target_actual;
    53d6:	88e1      	ldrh	r1, [r4, #6]
    53d8:	80a1      	strh	r1, [r4, #4]
    53da:	e7d4      	b.n	5386 <light_lightness_set+0xd2>
    53dc:	200020ae 	.word	0x200020ae
    53e0:	200006b8 	.word	0x200006b8
    53e4:	20008580 	.word	0x20008580

000053e8 <light_lightness_linear_set_unack>:
{
    53e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct light_lightness_state *state = model->user_data;
    53ec:	6986      	ldr	r6, [r0, #24]
{
    53ee:	4605      	mov	r5, r0
	linear = net_buf_simple_pull_le16(buf);
    53f0:	4610      	mov	r0, r2
{
    53f2:	4692      	mov	sl, r2
    53f4:	460c      	mov	r4, r1
	linear = net_buf_simple_pull_le16(buf);
    53f6:	f019 ff14 	bl	1f222 <net_buf_simple_pull_le16>
    53fa:	4607      	mov	r7, r0
	tid = net_buf_simple_pull_u8(buf);
    53fc:	4650      	mov	r0, sl
    53fe:	f019 ff08 	bl	1f212 <net_buf_simple_pull_u8>
    5402:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    5404:	f01a fbef 	bl	1fbe6 <z_impl_k_uptime_get>
    5408:	e9cd 0100 	strd	r0, r1, [sp]
	if (state->last_tid == tid &&
    540c:	7e31      	ldrb	r1, [r6, #24]
    540e:	4559      	cmp	r1, fp
    5410:	d116      	bne.n	5440 <light_lightness_linear_set_unack+0x58>
    5412:	8b70      	ldrh	r0, [r6, #26]
    5414:	88a1      	ldrh	r1, [r4, #4]
    5416:	4288      	cmp	r0, r1
    5418:	d112      	bne.n	5440 <light_lightness_linear_set_unack+0x58>
	    state->last_src_addr == ctx->addr &&
    541a:	8bb0      	ldrh	r0, [r6, #28]
    541c:	88e1      	ldrh	r1, [r4, #6]
    541e:	4288      	cmp	r0, r1
    5420:	d10e      	bne.n	5440 <light_lightness_linear_set_unack+0x58>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    5422:	e9d6 1008 	ldrd	r1, r0, [r6, #32]
    5426:	9b00      	ldr	r3, [sp, #0]
    5428:	ebb3 0801 	subs.w	r8, r3, r1
    542c:	9b01      	ldr	r3, [sp, #4]
    542e:	eb63 0900 	sbc.w	r9, r3, r0
	    state->last_dst_addr == ctx->recv_dst &&
    5432:	f241 7070 	movw	r0, #6000	; 0x1770
    5436:	2100      	movs	r1, #0
    5438:	4540      	cmp	r0, r8
    543a:	eb71 0309 	sbcs.w	r3, r1, r9
    543e:	da04      	bge.n	544a <light_lightness_linear_set_unack+0x62>
	switch (buf->len) {
    5440:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    5444:	b120      	cbz	r0, 5450 <light_lightness_linear_set_unack+0x68>
    5446:	2802      	cmp	r0, #2
    5448:	d02f      	beq.n	54aa <light_lightness_linear_set_unack+0xc2>
}
    544a:	b003      	add	sp, #12
    544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    5450:	4a20      	ldr	r2, [pc, #128]	; (54d4 <light_lightness_linear_set_unack+0xec>)
    5452:	f892 8000 	ldrb.w	r8, [r2]
	*ptr_counter = 0U;
    5456:	4a20      	ldr	r2, [pc, #128]	; (54d8 <light_lightness_linear_set_unack+0xf0>)
    5458:	6812      	ldr	r2, [r2, #0]
    545a:	2100      	movs	r1, #0
    545c:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    545e:	4a1f      	ldr	r2, [pc, #124]	; (54dc <light_lightness_linear_set_unack+0xf4>)
		delay = net_buf_simple_pull_u8(buf);
    5460:	4681      	mov	r9, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    5462:	6810      	ldr	r0, [r2, #0]
    5464:	f01a fbdb 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    5468:	f886 b018 	strb.w	fp, [r6, #24]
	state->last_src_addr = ctx->addr;
    546c:	88a2      	ldrh	r2, [r4, #4]
    546e:	8372      	strh	r2, [r6, #26]
	state->last_dst_addr = ctx->recv_dst;
    5470:	88e2      	ldrh	r2, [r4, #6]
    5472:	83b2      	strh	r2, [r6, #28]
	if (state->target_linear != state->linear) {
    5474:	8832      	ldrh	r2, [r6, #0]
	state->last_msg_timestamp = now;
    5476:	9b00      	ldr	r3, [sp, #0]
    5478:	6233      	str	r3, [r6, #32]
	if (state->target_linear != state->linear) {
    547a:	42ba      	cmp	r2, r7
	state->last_msg_timestamp = now;
    547c:	9b01      	ldr	r3, [sp, #4]
    547e:	6273      	str	r3, [r6, #36]	; 0x24
	state->target_linear = linear;
    5480:	8077      	strh	r7, [r6, #2]
	if (state->target_linear != state->linear) {
    5482:	d01e      	beq.n	54c2 <light_lightness_linear_set_unack+0xda>
		light_lightness_linear_tt_values(state, tt, delay);
    5484:	464a      	mov	r2, r9
    5486:	4641      	mov	r1, r8
    5488:	4630      	mov	r0, r6
    548a:	f001 faab 	bl	69e4 <light_lightness_linear_tt_values>
	if (state->transition->counter == 0) {
    548e:	6b32      	ldr	r2, [r6, #48]	; 0x30
    5490:	6891      	ldr	r1, [r2, #8]
    5492:	b1e1      	cbz	r1, 54ce <light_lightness_linear_set_unack+0xe6>
	state->transition->just_started = true;
    5494:	2101      	movs	r1, #1
	light_lightness_linear_publish(model);
    5496:	4628      	mov	r0, r5
	state->transition->just_started = true;
    5498:	7011      	strb	r1, [r2, #0]
	light_lightness_linear_publish(model);
    549a:	f012 fa98 	bl	179ce <light_lightness_linear_publish>
	light_lightness_linear_handler(state);
    549e:	4630      	mov	r0, r6
}
    54a0:	b003      	add	sp, #12
    54a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	light_lightness_linear_handler(state);
    54a6:	f001 bba9 	b.w	6bfc <light_lightness_linear_handler>
		tt = net_buf_simple_pull_u8(buf);
    54aa:	4650      	mov	r0, sl
    54ac:	f019 feb1 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    54b0:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    54b4:	293f      	cmp	r1, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    54b6:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    54b8:	d0c7      	beq.n	544a <light_lightness_linear_set_unack+0x62>
		delay = net_buf_simple_pull_u8(buf);
    54ba:	4650      	mov	r0, sl
    54bc:	f019 fea9 	bl	1f212 <net_buf_simple_pull_u8>
    54c0:	e7c9      	b.n	5456 <light_lightness_linear_set_unack+0x6e>
		light_lightness_linear_publish(model);
    54c2:	4628      	mov	r0, r5
}
    54c4:	b003      	add	sp, #12
    54c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_lightness_linear_publish(model);
    54ca:	f012 ba80 	b.w	179ce <light_lightness_linear_publish>
		state->linear = state->target_linear;
    54ce:	8871      	ldrh	r1, [r6, #2]
    54d0:	8031      	strh	r1, [r6, #0]
    54d2:	e7df      	b.n	5494 <light_lightness_linear_set_unack+0xac>
    54d4:	200020ae 	.word	0x200020ae
    54d8:	200006b8 	.word	0x200006b8
    54dc:	20008580 	.word	0x20008580

000054e0 <light_lightness_linear_set>:
{
    54e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct light_lightness_state *state = model->user_data;
    54e4:	6984      	ldr	r4, [r0, #24]
{
    54e6:	4606      	mov	r6, r0
	linear = net_buf_simple_pull_le16(buf);
    54e8:	4610      	mov	r0, r2
{
    54ea:	4615      	mov	r5, r2
    54ec:	460f      	mov	r7, r1
	linear = net_buf_simple_pull_le16(buf);
    54ee:	f019 fe98 	bl	1f222 <net_buf_simple_pull_le16>
    54f2:	4682      	mov	sl, r0
	tid = net_buf_simple_pull_u8(buf);
    54f4:	4628      	mov	r0, r5
    54f6:	f019 fe8c 	bl	1f212 <net_buf_simple_pull_u8>
    54fa:	4683      	mov	fp, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    54fc:	f01a fb73 	bl	1fbe6 <z_impl_k_uptime_get>
	if (state->last_tid == tid &&
    5500:	7e22      	ldrb	r2, [r4, #24]
    5502:	455a      	cmp	r2, fp
    5504:	e9cd 0100 	strd	r0, r1, [sp]
    5508:	d11d      	bne.n	5546 <light_lightness_linear_set+0x66>
    550a:	8b61      	ldrh	r1, [r4, #26]
    550c:	88ba      	ldrh	r2, [r7, #4]
    550e:	4291      	cmp	r1, r2
    5510:	d119      	bne.n	5546 <light_lightness_linear_set+0x66>
	    state->last_src_addr == ctx->addr &&
    5512:	8ba1      	ldrh	r1, [r4, #28]
    5514:	88fa      	ldrh	r2, [r7, #6]
    5516:	4291      	cmp	r1, r2
    5518:	d115      	bne.n	5546 <light_lightness_linear_set+0x66>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    551a:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    551e:	9b01      	ldr	r3, [sp, #4]
    5520:	ebb0 0802 	subs.w	r8, r0, r2
	    state->last_dst_addr == ctx->recv_dst &&
    5524:	f241 7070 	movw	r0, #6000	; 0x1770
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    5528:	eb63 0901 	sbc.w	r9, r3, r1
	    state->last_dst_addr == ctx->recv_dst &&
    552c:	2100      	movs	r1, #0
    552e:	4540      	cmp	r0, r8
    5530:	eb71 0309 	sbcs.w	r3, r1, r9
    5534:	db07      	blt.n	5546 <light_lightness_linear_set+0x66>
		light_lightness_linear_get(model, ctx, buf);
    5536:	462a      	mov	r2, r5
    5538:	4639      	mov	r1, r7
    553a:	4630      	mov	r0, r6
}
    553c:	b003      	add	sp, #12
    553e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_lightness_linear_get(model, ctx, buf);
    5542:	f7fe bd7b 	b.w	403c <light_lightness_linear_get>
	switch (buf->len) {
    5546:	88aa      	ldrh	r2, [r5, #4]
    5548:	b122      	cbz	r2, 5554 <light_lightness_linear_set+0x74>
    554a:	2a02      	cmp	r2, #2
    554c:	d035      	beq.n	55ba <light_lightness_linear_set+0xda>
}
    554e:	b003      	add	sp, #12
    5550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    5554:	4926      	ldr	r1, [pc, #152]	; (55f0 <light_lightness_linear_set+0x110>)
    5556:	f891 8000 	ldrb.w	r8, [r1]
		delay = 0U;
    555a:	4691      	mov	r9, r2
	*ptr_counter = 0U;
    555c:	4a25      	ldr	r2, [pc, #148]	; (55f4 <light_lightness_linear_set+0x114>)
    555e:	6812      	ldr	r2, [r2, #0]
    5560:	2100      	movs	r1, #0
    5562:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    5564:	4a24      	ldr	r2, [pc, #144]	; (55f8 <light_lightness_linear_set+0x118>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    5566:	6810      	ldr	r0, [r2, #0]
    5568:	f01a fb59 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    556c:	f884 b018 	strb.w	fp, [r4, #24]
	state->last_src_addr = ctx->addr;
    5570:	88ba      	ldrh	r2, [r7, #4]
    5572:	8362      	strh	r2, [r4, #26]
	state->last_dst_addr = ctx->recv_dst;
    5574:	88fa      	ldrh	r2, [r7, #6]
    5576:	83a2      	strh	r2, [r4, #28]
	if (state->target_linear != state->linear) {
    5578:	8822      	ldrh	r2, [r4, #0]
	state->last_msg_timestamp = now;
    557a:	9b00      	ldr	r3, [sp, #0]
    557c:	6223      	str	r3, [r4, #32]
	if (state->target_linear != state->linear) {
    557e:	4552      	cmp	r2, sl
	state->last_msg_timestamp = now;
    5580:	9b01      	ldr	r3, [sp, #4]
    5582:	6263      	str	r3, [r4, #36]	; 0x24
	state->target_linear = linear;
    5584:	f8a4 a002 	strh.w	sl, [r4, #2]
	if (state->target_linear != state->linear) {
    5588:	d024      	beq.n	55d4 <light_lightness_linear_set+0xf4>
		light_lightness_linear_tt_values(state, tt, delay);
    558a:	464a      	mov	r2, r9
    558c:	4641      	mov	r1, r8
    558e:	4620      	mov	r0, r4
    5590:	f001 fa28 	bl	69e4 <light_lightness_linear_tt_values>
	if (state->transition->counter == 0) {
    5594:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5596:	6891      	ldr	r1, [r2, #8]
    5598:	b339      	cbz	r1, 55ea <light_lightness_linear_set+0x10a>
	state->transition->just_started = true;
    559a:	2101      	movs	r1, #1
    559c:	7011      	strb	r1, [r2, #0]
	light_lightness_linear_get(model, ctx, buf);
    559e:	4630      	mov	r0, r6
    55a0:	462a      	mov	r2, r5
    55a2:	4639      	mov	r1, r7
    55a4:	f7fe fd4a 	bl	403c <light_lightness_linear_get>
	light_lightness_linear_publish(model);
    55a8:	4630      	mov	r0, r6
    55aa:	f012 fa10 	bl	179ce <light_lightness_linear_publish>
	light_lightness_linear_handler(state);
    55ae:	4620      	mov	r0, r4
}
    55b0:	b003      	add	sp, #12
    55b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	light_lightness_linear_handler(state);
    55b6:	f001 bb21 	b.w	6bfc <light_lightness_linear_handler>
		tt = net_buf_simple_pull_u8(buf);
    55ba:	4628      	mov	r0, r5
    55bc:	f019 fe29 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    55c0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    55c4:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    55c6:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    55c8:	d0c1      	beq.n	554e <light_lightness_linear_set+0x6e>
		delay = net_buf_simple_pull_u8(buf);
    55ca:	4628      	mov	r0, r5
    55cc:	f019 fe21 	bl	1f212 <net_buf_simple_pull_u8>
    55d0:	4681      	mov	r9, r0
		break;
    55d2:	e7c3      	b.n	555c <light_lightness_linear_set+0x7c>
		light_lightness_linear_get(model, ctx, buf);
    55d4:	4630      	mov	r0, r6
    55d6:	462a      	mov	r2, r5
    55d8:	4639      	mov	r1, r7
    55da:	f7fe fd2f 	bl	403c <light_lightness_linear_get>
		light_lightness_linear_publish(model);
    55de:	4630      	mov	r0, r6
}
    55e0:	b003      	add	sp, #12
    55e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_lightness_linear_publish(model);
    55e6:	f012 b9f2 	b.w	179ce <light_lightness_linear_publish>
		state->linear = state->target_linear;
    55ea:	8861      	ldrh	r1, [r4, #2]
    55ec:	8021      	strh	r1, [r4, #0]
    55ee:	e7d4      	b.n	559a <light_lightness_linear_set+0xba>
    55f0:	200020ae 	.word	0x200020ae
    55f4:	200006b8 	.word	0x200006b8
    55f8:	20008580 	.word	0x20008580

000055fc <light_ctl_publish>:
	struct net_buf_simple *msg = model->pub->msg;
    55fc:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    55fe:	889a      	ldrh	r2, [r3, #4]
{
    5600:	b570      	push	{r4, r5, r6, lr}
    5602:	4606      	mov	r6, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    5604:	b352      	cbz	r2, 565c <light_ctl_publish+0x60>
	struct net_buf_simple *msg = model->pub->msg;
    5606:	691c      	ldr	r4, [r3, #16]
	struct light_ctl_state *state = model->user_data;
    5608:	6985      	ldr	r5, [r0, #24]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_STATUS);
    560a:	f248 2160 	movw	r1, #33376	; 0x8260
    560e:	4620      	mov	r0, r4
    5610:	f016 ff14 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->lightness);
    5614:	8829      	ldrh	r1, [r5, #0]
    5616:	4620      	mov	r0, r4
    5618:	f019 fd87 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->temp);
    561c:	4620      	mov	r0, r4
    561e:	88a9      	ldrh	r1, [r5, #4]
    5620:	f019 fd83 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
    5624:	6c68      	ldr	r0, [r5, #68]	; 0x44
    5626:	6883      	ldr	r3, [r0, #8]
    5628:	b173      	cbz	r3, 5648 <light_ctl_publish+0x4c>
		calculate_rt(state->transition);
    562a:	f001 f8fd 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_lightness);
    562e:	8869      	ldrh	r1, [r5, #2]
    5630:	4620      	mov	r0, r4
    5632:	f019 fd7a 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, state->target_temp);
    5636:	88e9      	ldrh	r1, [r5, #6]
    5638:	4620      	mov	r0, r4
    563a:	f019 fd76 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
    563e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    5640:	4620      	mov	r0, r4
    5642:	7899      	ldrb	r1, [r3, #2]
    5644:	f019 fd69 	bl	1f11a <net_buf_simple_add_u8>
	err = bt_mesh_model_publish(model);
    5648:	4630      	mov	r0, r6
    564a:	f008 ffb3 	bl	e5b4 <bt_mesh_model_publish>
	if (err) {
    564e:	4601      	mov	r1, r0
    5650:	b120      	cbz	r0, 565c <light_ctl_publish+0x60>
		printk("bt_mesh_model_publish err %d\n", err);
    5652:	4803      	ldr	r0, [pc, #12]	; (5660 <light_ctl_publish+0x64>)
}
    5654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    5658:	f012 bd93 	b.w	18182 <printk>
}
    565c:	bd70      	pop	{r4, r5, r6, pc}
    565e:	bf00      	nop
    5660:	00020e82 	.word	0x00020e82

00005664 <light_ctl_set_unack>:
{
    5664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct light_ctl_state *state = model->user_data;
    5668:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
    566c:	b087      	sub	sp, #28
    566e:	4606      	mov	r6, r0
	lightness = net_buf_simple_pull_le16(buf);
    5670:	4610      	mov	r0, r2
{
    5672:	4614      	mov	r4, r2
    5674:	460d      	mov	r5, r1
	lightness = net_buf_simple_pull_le16(buf);
    5676:	f019 fdd4 	bl	1f222 <net_buf_simple_pull_le16>
    567a:	4681      	mov	r9, r0
	temp = net_buf_simple_pull_le16(buf);
    567c:	4620      	mov	r0, r4
    567e:	f019 fdd0 	bl	1f222 <net_buf_simple_pull_le16>
    5682:	4607      	mov	r7, r0
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
    5684:	4620      	mov	r0, r4
    5686:	f019 fdcc 	bl	1f222 <net_buf_simple_pull_le16>
    568a:	9005      	str	r0, [sp, #20]
	tid = net_buf_simple_pull_u8(buf);
    568c:	4620      	mov	r0, r4
    568e:	f019 fdc0 	bl	1f212 <net_buf_simple_pull_u8>
	if (temp < TEMP_MIN || temp > TEMP_MAX) {
    5692:	f5a7 7248 	sub.w	r2, r7, #800	; 0x320
    5696:	b292      	uxth	r2, r2
    5698:	f5b2 4f96 	cmp.w	r2, #19200	; 0x4b00
	tid = net_buf_simple_pull_u8(buf);
    569c:	4682      	mov	sl, r0
	if (temp < TEMP_MIN || temp > TEMP_MAX) {
    569e:	d826      	bhi.n	56ee <light_ctl_set_unack+0x8a>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    56a0:	f01a faa1 	bl	1fbe6 <z_impl_k_uptime_get>
	if (state->last_tid == tid &&
    56a4:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
    56a8:	4552      	cmp	r2, sl
    56aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
    56ae:	d11a      	bne.n	56e6 <light_ctl_set_unack+0x82>
    56b0:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
    56b4:	88aa      	ldrh	r2, [r5, #4]
    56b6:	4291      	cmp	r1, r2
    56b8:	d115      	bne.n	56e6 <light_ctl_set_unack+0x82>
	    state->last_src_addr == ctx->addr &&
    56ba:	f8b8 102c 	ldrh.w	r1, [r8, #44]	; 0x2c
    56be:	88ea      	ldrh	r2, [r5, #6]
    56c0:	4291      	cmp	r1, r2
    56c2:	d110      	bne.n	56e6 <light_ctl_set_unack+0x82>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    56c4:	e9d8 210c 	ldrd	r2, r1, [r8, #48]	; 0x30
    56c8:	1a83      	subs	r3, r0, r2
    56ca:	9300      	str	r3, [sp, #0]
    56cc:	9b04      	ldr	r3, [sp, #16]
    56ce:	eb63 0301 	sbc.w	r3, r3, r1
    56d2:	9301      	str	r3, [sp, #4]
	    state->last_dst_addr == ctx->recv_dst &&
    56d4:	e9dd 2300 	ldrd	r2, r3, [sp]
    56d8:	f241 7070 	movw	r0, #6000	; 0x1770
    56dc:	2100      	movs	r1, #0
    56de:	4290      	cmp	r0, r2
    56e0:	eb71 0303 	sbcs.w	r3, r1, r3
    56e4:	da03      	bge.n	56ee <light_ctl_set_unack+0x8a>
	switch (buf->len) {
    56e6:	88a2      	ldrh	r2, [r4, #4]
    56e8:	b122      	cbz	r2, 56f4 <light_ctl_set_unack+0x90>
    56ea:	2a02      	cmp	r2, #2
    56ec:	d04e      	beq.n	578c <light_ctl_set_unack+0x128>
}
    56ee:	b007      	add	sp, #28
    56f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    56f4:	4935      	ldr	r1, [pc, #212]	; (57cc <light_ctl_set_unack+0x168>)
    56f6:	f891 b000 	ldrb.w	fp, [r1]
		delay = 0U;
    56fa:	4614      	mov	r4, r2
	*ptr_counter = 0U;
    56fc:	4a34      	ldr	r2, [pc, #208]	; (57d0 <light_ctl_set_unack+0x16c>)
    56fe:	6812      	ldr	r2, [r2, #0]
    5700:	2000      	movs	r0, #0
    5702:	6010      	str	r0, [r2, #0]
	k_timer_stop(ptr_timer);
    5704:	4a33      	ldr	r2, [pc, #204]	; (57d4 <light_ctl_set_unack+0x170>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    5706:	6810      	ldr	r0, [r2, #0]
    5708:	f01a fa89 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    570c:	f888 a028 	strb.w	sl, [r8, #40]	; 0x28
	state->last_src_addr = ctx->addr;
    5710:	88aa      	ldrh	r2, [r5, #4]
    5712:	f8a8 202a 	strh.w	r2, [r8, #42]	; 0x2a
	state->last_dst_addr = ctx->recv_dst;
    5716:	88ea      	ldrh	r2, [r5, #6]
    5718:	f8a8 202c 	strh.w	r2, [r8, #44]	; 0x2c
	if (temp < state->temp_range_min) {
    571c:	f8b8 200e 	ldrh.w	r2, [r8, #14]
	state->last_msg_timestamp = now;
    5720:	9b03      	ldr	r3, [sp, #12]
    5722:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	if (temp < state->temp_range_min) {
    5726:	42ba      	cmp	r2, r7
	state->last_msg_timestamp = now;
    5728:	9b04      	ldr	r3, [sp, #16]
    572a:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
	state->target_lightness = lightness;
    572e:	f8a8 9002 	strh.w	r9, [r8, #2]
	if (temp < state->temp_range_min) {
    5732:	d805      	bhi.n	5740 <light_ctl_set_unack+0xdc>
	} else if (temp > state->temp_range_max) {
    5734:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    5738:	4297      	cmp	r7, r2
    573a:	bf28      	it	cs
    573c:	4617      	movcs	r7, r2
    573e:	b2ba      	uxth	r2, r7
	if (state->target_lightness != state->lightness ||
    5740:	f8b8 5000 	ldrh.w	r5, [r8]
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
    5744:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
	state->target_temp = temp;
    5748:	f8a8 2006 	strh.w	r2, [r8, #6]
	if (state->target_lightness != state->lightness ||
    574c:	454d      	cmp	r5, r9
	state->target_delta_uv = delta_uv;
    574e:	f8a8 000a 	strh.w	r0, [r8, #10]
	if (state->target_lightness != state->lightness ||
    5752:	d107      	bne.n	5764 <light_ctl_set_unack+0x100>
    5754:	f8b8 5004 	ldrh.w	r5, [r8, #4]
    5758:	4295      	cmp	r5, r2
    575a:	d103      	bne.n	5764 <light_ctl_set_unack+0x100>
	    state->target_temp != state->temp ||
    575c:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
    5760:	4282      	cmp	r2, r0
    5762:	d020      	beq.n	57a6 <light_ctl_set_unack+0x142>
		light_ctl_tt_values(state, tt, delay);
    5764:	4622      	mov	r2, r4
    5766:	4659      	mov	r1, fp
    5768:	4640      	mov	r0, r8
    576a:	f001 f967 	bl	6a3c <light_ctl_tt_values>
	if (state->transition->counter == 0) {
    576e:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
    5772:	6891      	ldr	r1, [r2, #8]
    5774:	b1e9      	cbz	r1, 57b2 <light_ctl_set_unack+0x14e>
	state->transition->just_started = true;
    5776:	2101      	movs	r1, #1
	light_ctl_publish(model);
    5778:	4630      	mov	r0, r6
	state->transition->just_started = true;
    577a:	7011      	strb	r1, [r2, #0]
	light_ctl_publish(model);
    577c:	f7ff ff3e 	bl	55fc <light_ctl_publish>
	light_ctl_handler(state);
    5780:	4640      	mov	r0, r8
}
    5782:	b007      	add	sp, #28
    5784:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	light_ctl_handler(state);
    5788:	f001 ba50 	b.w	6c2c <light_ctl_handler>
		tt = net_buf_simple_pull_u8(buf);
    578c:	4620      	mov	r0, r4
    578e:	f019 fd40 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    5792:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    5796:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    5798:	4683      	mov	fp, r0
		if ((tt & 0x3F) == 0x3F) {
    579a:	d0a8      	beq.n	56ee <light_ctl_set_unack+0x8a>
		delay = net_buf_simple_pull_u8(buf);
    579c:	4620      	mov	r0, r4
    579e:	f019 fd38 	bl	1f212 <net_buf_simple_pull_u8>
    57a2:	4604      	mov	r4, r0
		break;
    57a4:	e7aa      	b.n	56fc <light_ctl_set_unack+0x98>
		light_ctl_publish(model);
    57a6:	4630      	mov	r0, r6
}
    57a8:	b007      	add	sp, #28
    57aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_ctl_publish(model);
    57ae:	f7ff bf25 	b.w	55fc <light_ctl_publish>
		state->lightness = state->target_lightness;
    57b2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    57b6:	f8a8 1000 	strh.w	r1, [r8]
		state->temp = state->target_temp;
    57ba:	f8b8 1006 	ldrh.w	r1, [r8, #6]
    57be:	f8a8 1004 	strh.w	r1, [r8, #4]
		state->delta_uv = state->target_delta_uv;
    57c2:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    57c6:	f8a8 1008 	strh.w	r1, [r8, #8]
    57ca:	e7d4      	b.n	5776 <light_ctl_set_unack+0x112>
    57cc:	200020ae 	.word	0x200020ae
    57d0:	200006b8 	.word	0x200006b8
    57d4:	20008580 	.word	0x20008580

000057d8 <light_ctl_set>:
{
    57d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct light_ctl_state *state = model->user_data;
    57dc:	f8d0 a018 	ldr.w	sl, [r0, #24]
{
    57e0:	b085      	sub	sp, #20
    57e2:	4606      	mov	r6, r0
	lightness = net_buf_simple_pull_le16(buf);
    57e4:	4610      	mov	r0, r2
{
    57e6:	4614      	mov	r4, r2
    57e8:	460d      	mov	r5, r1
	lightness = net_buf_simple_pull_le16(buf);
    57ea:	f019 fd1a 	bl	1f222 <net_buf_simple_pull_le16>
    57ee:	9000      	str	r0, [sp, #0]
	temp = net_buf_simple_pull_le16(buf);
    57f0:	4620      	mov	r0, r4
    57f2:	f019 fd16 	bl	1f222 <net_buf_simple_pull_le16>
    57f6:	4607      	mov	r7, r0
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
    57f8:	4620      	mov	r0, r4
    57fa:	f019 fd12 	bl	1f222 <net_buf_simple_pull_le16>
    57fe:	9003      	str	r0, [sp, #12]
	tid = net_buf_simple_pull_u8(buf);
    5800:	4620      	mov	r0, r4
    5802:	f019 fd06 	bl	1f212 <net_buf_simple_pull_u8>
	if (temp < TEMP_MIN || temp > TEMP_MAX) {
    5806:	f5a7 7248 	sub.w	r2, r7, #800	; 0x320
    580a:	b292      	uxth	r2, r2
    580c:	f5b2 4f96 	cmp.w	r2, #19200	; 0x4b00
	tid = net_buf_simple_pull_u8(buf);
    5810:	4683      	mov	fp, r0
	if (temp < TEMP_MIN || temp > TEMP_MAX) {
    5812:	d82b      	bhi.n	586c <light_ctl_set+0x94>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    5814:	f01a f9e7 	bl	1fbe6 <z_impl_k_uptime_get>
	if (state->last_tid == tid &&
    5818:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
    581c:	455a      	cmp	r2, fp
    581e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    5822:	d11f      	bne.n	5864 <light_ctl_set+0x8c>
    5824:	f8ba 102a 	ldrh.w	r1, [sl, #42]	; 0x2a
    5828:	88aa      	ldrh	r2, [r5, #4]
    582a:	4291      	cmp	r1, r2
    582c:	d11a      	bne.n	5864 <light_ctl_set+0x8c>
	    state->last_src_addr == ctx->addr &&
    582e:	f8ba 102c 	ldrh.w	r1, [sl, #44]	; 0x2c
    5832:	88ea      	ldrh	r2, [r5, #6]
    5834:	4291      	cmp	r1, r2
    5836:	d115      	bne.n	5864 <light_ctl_set+0x8c>
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    5838:	e9da 210c 	ldrd	r2, r1, [sl, #48]	; 0x30
    583c:	9b02      	ldr	r3, [sp, #8]
    583e:	ebb0 0802 	subs.w	r8, r0, r2
	    state->last_dst_addr == ctx->recv_dst &&
    5842:	f241 7070 	movw	r0, #6000	; 0x1770
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    5846:	eb63 0901 	sbc.w	r9, r3, r1
	    state->last_dst_addr == ctx->recv_dst &&
    584a:	2100      	movs	r1, #0
    584c:	4540      	cmp	r0, r8
    584e:	eb71 0309 	sbcs.w	r3, r1, r9
    5852:	db07      	blt.n	5864 <light_ctl_set+0x8c>
		light_ctl_get(model, ctx, buf);
    5854:	4622      	mov	r2, r4
    5856:	4629      	mov	r1, r5
    5858:	4630      	mov	r0, r6
}
    585a:	b005      	add	sp, #20
    585c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_ctl_get(model, ctx, buf);
    5860:	f7fe bb34 	b.w	3ecc <light_ctl_get>
	switch (buf->len) {
    5864:	88a2      	ldrh	r2, [r4, #4]
    5866:	b122      	cbz	r2, 5872 <light_ctl_set+0x9a>
    5868:	2a02      	cmp	r2, #2
    586a:	d055      	beq.n	5918 <light_ctl_set+0x140>
}
    586c:	b005      	add	sp, #20
    586e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    5872:	493c      	ldr	r1, [pc, #240]	; (5964 <light_ctl_set+0x18c>)
    5874:	f891 8000 	ldrb.w	r8, [r1]
		delay = 0U;
    5878:	4691      	mov	r9, r2
	*ptr_counter = 0U;
    587a:	4a3b      	ldr	r2, [pc, #236]	; (5968 <light_ctl_set+0x190>)
    587c:	6812      	ldr	r2, [r2, #0]
    587e:	2100      	movs	r1, #0
    5880:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    5882:	4a3a      	ldr	r2, [pc, #232]	; (596c <light_ctl_set+0x194>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    5884:	6810      	ldr	r0, [r2, #0]
    5886:	f01a f9ca 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    588a:	f88a b028 	strb.w	fp, [sl, #40]	; 0x28
	state->last_src_addr = ctx->addr;
    588e:	88aa      	ldrh	r2, [r5, #4]
    5890:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
	state->last_dst_addr = ctx->recv_dst;
    5894:	88ea      	ldrh	r2, [r5, #6]
	state->last_msg_timestamp = now;
    5896:	9b01      	ldr	r3, [sp, #4]
	state->last_dst_addr = ctx->recv_dst;
    5898:	f8aa 202c 	strh.w	r2, [sl, #44]	; 0x2c
	if (temp < state->temp_range_min) {
    589c:	f8ba 200e 	ldrh.w	r2, [sl, #14]
	state->last_msg_timestamp = now;
    58a0:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
    58a4:	9b02      	ldr	r3, [sp, #8]
    58a6:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
	if (temp < state->temp_range_min) {
    58aa:	42ba      	cmp	r2, r7
	state->target_lightness = lightness;
    58ac:	9b00      	ldr	r3, [sp, #0]
    58ae:	f8aa 3002 	strh.w	r3, [sl, #2]
	if (temp < state->temp_range_min) {
    58b2:	d805      	bhi.n	58c0 <light_ctl_set+0xe8>
	} else if (temp > state->temp_range_max) {
    58b4:	f8ba 2010 	ldrh.w	r2, [sl, #16]
    58b8:	4297      	cmp	r7, r2
    58ba:	bf28      	it	cs
    58bc:	4617      	movcs	r7, r2
    58be:	b2ba      	uxth	r2, r7
	if (state->target_lightness != state->lightness ||
    58c0:	f8ba 0000 	ldrh.w	r0, [sl]
    58c4:	9b00      	ldr	r3, [sp, #0]
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
    58c6:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
	state->target_temp = temp;
    58ca:	f8aa 2006 	strh.w	r2, [sl, #6]
	if (state->target_lightness != state->lightness ||
    58ce:	4298      	cmp	r0, r3
	state->target_delta_uv = delta_uv;
    58d0:	f8aa 100a 	strh.w	r1, [sl, #10]
	if (state->target_lightness != state->lightness ||
    58d4:	d107      	bne.n	58e6 <light_ctl_set+0x10e>
    58d6:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    58da:	4290      	cmp	r0, r2
    58dc:	d103      	bne.n	58e6 <light_ctl_set+0x10e>
	    state->target_temp != state->temp ||
    58de:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
    58e2:	428a      	cmp	r2, r1
    58e4:	d025      	beq.n	5932 <light_ctl_set+0x15a>
		light_ctl_tt_values(state, tt, delay);
    58e6:	464a      	mov	r2, r9
    58e8:	4641      	mov	r1, r8
    58ea:	4650      	mov	r0, sl
    58ec:	f001 f8a6 	bl	6a3c <light_ctl_tt_values>
	if (state->transition->counter == 0) {
    58f0:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
    58f4:	6891      	ldr	r1, [r2, #8]
    58f6:	b339      	cbz	r1, 5948 <light_ctl_set+0x170>
	state->transition->just_started = true;
    58f8:	2101      	movs	r1, #1
    58fa:	7011      	strb	r1, [r2, #0]
	light_ctl_get(model, ctx, buf);
    58fc:	4630      	mov	r0, r6
    58fe:	4622      	mov	r2, r4
    5900:	4629      	mov	r1, r5
    5902:	f7fe fae3 	bl	3ecc <light_ctl_get>
	light_ctl_publish(model);
    5906:	4630      	mov	r0, r6
    5908:	f7ff fe78 	bl	55fc <light_ctl_publish>
	light_ctl_handler(state);
    590c:	4650      	mov	r0, sl
}
    590e:	b005      	add	sp, #20
    5910:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	light_ctl_handler(state);
    5914:	f001 b98a 	b.w	6c2c <light_ctl_handler>
		tt = net_buf_simple_pull_u8(buf);
    5918:	4620      	mov	r0, r4
    591a:	f019 fc7a 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    591e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    5922:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    5924:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    5926:	d0a1      	beq.n	586c <light_ctl_set+0x94>
		delay = net_buf_simple_pull_u8(buf);
    5928:	4620      	mov	r0, r4
    592a:	f019 fc72 	bl	1f212 <net_buf_simple_pull_u8>
    592e:	4681      	mov	r9, r0
		break;
    5930:	e7a3      	b.n	587a <light_ctl_set+0xa2>
		light_ctl_get(model, ctx, buf);
    5932:	4630      	mov	r0, r6
    5934:	4622      	mov	r2, r4
    5936:	4629      	mov	r1, r5
    5938:	f7fe fac8 	bl	3ecc <light_ctl_get>
		light_ctl_publish(model);
    593c:	4630      	mov	r0, r6
}
    593e:	b005      	add	sp, #20
    5940:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_ctl_publish(model);
    5944:	f7ff be5a 	b.w	55fc <light_ctl_publish>
		state->lightness = state->target_lightness;
    5948:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    594c:	f8aa 1000 	strh.w	r1, [sl]
		state->temp = state->target_temp;
    5950:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    5954:	f8aa 1004 	strh.w	r1, [sl, #4]
		state->delta_uv = state->target_delta_uv;
    5958:	f8ba 100a 	ldrh.w	r1, [sl, #10]
    595c:	f8aa 1008 	strh.w	r1, [sl, #8]
    5960:	e7ca      	b.n	58f8 <light_ctl_set+0x120>
    5962:	bf00      	nop
    5964:	200020ae 	.word	0x200020ae
    5968:	200006b8 	.word	0x200006b8
    596c:	20008580 	.word	0x20008580

00005970 <light_ctl_temp_publish>:

void light_ctl_temp_publish(struct bt_mesh_model *model)
{
	int err;
	struct net_buf_simple *msg = model->pub->msg;
    5970:	6883      	ldr	r3, [r0, #8]
	struct light_ctl_state *state = model->user_data;

	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    5972:	889a      	ldrh	r2, [r3, #4]
{
    5974:	b570      	push	{r4, r5, r6, lr}
    5976:	4606      	mov	r6, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    5978:	b352      	cbz	r2, 59d0 <light_ctl_temp_publish+0x60>
	struct net_buf_simple *msg = model->pub->msg;
    597a:	691c      	ldr	r4, [r3, #16]
	struct light_ctl_state *state = model->user_data;
    597c:	6985      	ldr	r5, [r0, #24]
		return;
	}

	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_CTL_TEMP_STATUS);
    597e:	f248 2166 	movw	r1, #33382	; 0x8266
    5982:	4620      	mov	r0, r4
    5984:	f016 fd5a 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->temp);
    5988:	88a9      	ldrh	r1, [r5, #4]
    598a:	4620      	mov	r0, r4
    598c:	f019 fbcd 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, state->delta_uv);
    5990:	4620      	mov	r0, r4
    5992:	8929      	ldrh	r1, [r5, #8]
    5994:	f019 fbc9 	bl	1f12a <net_buf_simple_add_le16>

	if (state->transition->counter) {
    5998:	6c68      	ldr	r0, [r5, #68]	; 0x44
    599a:	6883      	ldr	r3, [r0, #8]
    599c:	b173      	cbz	r3, 59bc <light_ctl_temp_publish+0x4c>
		calculate_rt(state->transition);
    599e:	f000 ff43 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_temp);
    59a2:	88e9      	ldrh	r1, [r5, #6]
    59a4:	4620      	mov	r0, r4
    59a6:	f019 fbc0 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, state->target_delta_uv);
    59aa:	8969      	ldrh	r1, [r5, #10]
    59ac:	4620      	mov	r0, r4
    59ae:	f019 fbbc 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
    59b2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    59b4:	4620      	mov	r0, r4
    59b6:	7899      	ldrb	r1, [r3, #2]
    59b8:	f019 fbaf 	bl	1f11a <net_buf_simple_add_u8>
	}

	err = bt_mesh_model_publish(model);
    59bc:	4630      	mov	r0, r6
    59be:	f008 fdf9 	bl	e5b4 <bt_mesh_model_publish>
	if (err) {
    59c2:	4601      	mov	r1, r0
    59c4:	b120      	cbz	r0, 59d0 <light_ctl_temp_publish+0x60>
		printk("bt_mesh_model_publish err %d\n", err);
    59c6:	4803      	ldr	r0, [pc, #12]	; (59d4 <light_ctl_temp_publish+0x64>)
	}
}
    59c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("bt_mesh_model_publish err %d\n", err);
    59cc:	f012 bbd9 	b.w	18182 <printk>
}
    59d0:	bd70      	pop	{r4, r5, r6, pc}
    59d2:	bf00      	nop
    59d4:	00020e82 	.word	0x00020e82

000059d8 <light_ctl_temp_set_unack>:

static void light_ctl_temp_set_unack(struct bt_mesh_model *model,
				     struct bt_mesh_msg_ctx *ctx,
				     struct net_buf_simple *buf)
{
    59d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t tid, tt, delay;
	s16_t delta_uv;
	u16_t temp;
	s64_t now;
	struct light_ctl_state *state = model->user_data;
    59dc:	f8d0 a018 	ldr.w	sl, [r0, #24]
{
    59e0:	b085      	sub	sp, #20
    59e2:	4606      	mov	r6, r0

	temp = net_buf_simple_pull_le16(buf);
    59e4:	4610      	mov	r0, r2
{
    59e6:	4614      	mov	r4, r2
    59e8:	460d      	mov	r5, r1
	temp = net_buf_simple_pull_le16(buf);
    59ea:	f019 fc1a 	bl	1f222 <net_buf_simple_pull_le16>
    59ee:	4607      	mov	r7, r0
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
    59f0:	4620      	mov	r0, r4
    59f2:	f019 fc16 	bl	1f222 <net_buf_simple_pull_le16>
    59f6:	9003      	str	r0, [sp, #12]
	tid = net_buf_simple_pull_u8(buf);
    59f8:	4620      	mov	r0, r4
    59fa:	f019 fc0a 	bl	1f212 <net_buf_simple_pull_u8>

	if (temp < TEMP_MIN || temp > TEMP_MAX) {
    59fe:	f5a7 7248 	sub.w	r2, r7, #800	; 0x320
    5a02:	b292      	uxth	r2, r2
    5a04:	f5b2 4f96 	cmp.w	r2, #19200	; 0x4b00
	tid = net_buf_simple_pull_u8(buf);
    5a08:	4683      	mov	fp, r0
	if (temp < TEMP_MIN || temp > TEMP_MAX) {
    5a0a:	d823      	bhi.n	5a54 <light_ctl_temp_set_unack+0x7c>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    5a0c:	f01a f8eb 	bl	1fbe6 <z_impl_k_uptime_get>
		return;
	}

	now = k_uptime_get();
	if (state->last_tid == tid &&
    5a10:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
    5a14:	455a      	cmp	r2, fp
    5a16:	e9cd 0101 	strd	r0, r1, [sp, #4]
    5a1a:	d117      	bne.n	5a4c <light_ctl_temp_set_unack+0x74>
    5a1c:	f8ba 102a 	ldrh.w	r1, [sl, #42]	; 0x2a
    5a20:	88aa      	ldrh	r2, [r5, #4]
    5a22:	4291      	cmp	r1, r2
    5a24:	d112      	bne.n	5a4c <light_ctl_temp_set_unack+0x74>
	    state->last_src_addr == ctx->addr &&
    5a26:	f8ba 102c 	ldrh.w	r1, [sl, #44]	; 0x2c
    5a2a:	88ea      	ldrh	r2, [r5, #6]
    5a2c:	4291      	cmp	r1, r2
    5a2e:	d10d      	bne.n	5a4c <light_ctl_temp_set_unack+0x74>
	    state->last_dst_addr == ctx->recv_dst &&
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    5a30:	e9da 210c 	ldrd	r2, r1, [sl, #48]	; 0x30
    5a34:	9b02      	ldr	r3, [sp, #8]
    5a36:	ebb0 0802 	subs.w	r8, r0, r2
	    state->last_dst_addr == ctx->recv_dst &&
    5a3a:	f241 7070 	movw	r0, #6000	; 0x1770
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    5a3e:	eb63 0901 	sbc.w	r9, r3, r1
	    state->last_dst_addr == ctx->recv_dst &&
    5a42:	2100      	movs	r1, #0
    5a44:	4540      	cmp	r0, r8
    5a46:	eb71 0309 	sbcs.w	r3, r1, r9
    5a4a:	da03      	bge.n	5a54 <light_ctl_temp_set_unack+0x7c>
		return;
	}

	switch (buf->len) {
    5a4c:	88a2      	ldrh	r2, [r4, #4]
    5a4e:	b122      	cbz	r2, 5a5a <light_ctl_temp_set_unack+0x82>
    5a50:	2a02      	cmp	r2, #2
    5a52:	d048      	beq.n	5ae6 <light_ctl_temp_set_unack+0x10e>
	}

	state->transition->just_started = true;
	light_ctl_temp_publish(model);
	light_ctl_temp_handler(state);
}
    5a54:	b005      	add	sp, #20
    5a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    5a5a:	4931      	ldr	r1, [pc, #196]	; (5b20 <light_ctl_temp_set_unack+0x148>)
    5a5c:	f891 8000 	ldrb.w	r8, [r1]
		delay = 0U;
    5a60:	4614      	mov	r4, r2
	*ptr_counter = 0U;
    5a62:	4a30      	ldr	r2, [pc, #192]	; (5b24 <light_ctl_temp_set_unack+0x14c>)
    5a64:	6812      	ldr	r2, [r2, #0]
    5a66:	2100      	movs	r1, #0
    5a68:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    5a6a:	4a2f      	ldr	r2, [pc, #188]	; (5b28 <light_ctl_temp_set_unack+0x150>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    5a6c:	6810      	ldr	r0, [r2, #0]
    5a6e:	f01a f8d6 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    5a72:	f88a b028 	strb.w	fp, [sl, #40]	; 0x28
	if (temp < state->temp_range_min) {
    5a76:	f8ba 100e 	ldrh.w	r1, [sl, #14]
	state->last_src_addr = ctx->addr;
    5a7a:	88aa      	ldrh	r2, [r5, #4]
	state->last_msg_timestamp = now;
    5a7c:	9b01      	ldr	r3, [sp, #4]
	state->last_src_addr = ctx->addr;
    5a7e:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
	if (temp < state->temp_range_min) {
    5a82:	42b9      	cmp	r1, r7
	state->last_dst_addr = ctx->recv_dst;
    5a84:	88ea      	ldrh	r2, [r5, #6]
	state->last_msg_timestamp = now;
    5a86:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
    5a8a:	9b02      	ldr	r3, [sp, #8]
	state->last_dst_addr = ctx->recv_dst;
    5a8c:	f8aa 202c 	strh.w	r2, [sl, #44]	; 0x2c
	state->last_msg_timestamp = now;
    5a90:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
	if (temp < state->temp_range_min) {
    5a94:	d805      	bhi.n	5aa2 <light_ctl_temp_set_unack+0xca>
	} else if (temp > state->temp_range_max) {
    5a96:	f8ba 1010 	ldrh.w	r1, [sl, #16]
    5a9a:	428f      	cmp	r7, r1
    5a9c:	bf28      	it	cs
    5a9e:	460f      	movcs	r7, r1
    5aa0:	b2b9      	uxth	r1, r7
	if (state->target_temp != state->temp ||
    5aa2:	f8ba 0004 	ldrh.w	r0, [sl, #4]
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
    5aa6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
	state->target_temp = temp;
    5aaa:	f8aa 1006 	strh.w	r1, [sl, #6]
	if (state->target_temp != state->temp ||
    5aae:	4288      	cmp	r0, r1
	state->target_delta_uv = delta_uv;
    5ab0:	f8aa 200a 	strh.w	r2, [sl, #10]
	if (state->target_temp != state->temp ||
    5ab4:	d103      	bne.n	5abe <light_ctl_temp_set_unack+0xe6>
    5ab6:	f9ba 1008 	ldrsh.w	r1, [sl, #8]
    5aba:	4291      	cmp	r1, r2
    5abc:	d020      	beq.n	5b00 <light_ctl_temp_set_unack+0x128>
		light_ctl_temp_tt_values(state, tt, delay);
    5abe:	4622      	mov	r2, r4
    5ac0:	4641      	mov	r1, r8
    5ac2:	4650      	mov	r0, sl
    5ac4:	f001 f800 	bl	6ac8 <light_ctl_temp_tt_values>
	if (state->transition->counter == 0) {
    5ac8:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
    5acc:	6891      	ldr	r1, [r2, #8]
    5ace:	b1e9      	cbz	r1, 5b0c <light_ctl_temp_set_unack+0x134>
	state->transition->just_started = true;
    5ad0:	2101      	movs	r1, #1
	light_ctl_temp_publish(model);
    5ad2:	4630      	mov	r0, r6
	state->transition->just_started = true;
    5ad4:	7011      	strb	r1, [r2, #0]
	light_ctl_temp_publish(model);
    5ad6:	f7ff ff4b 	bl	5970 <light_ctl_temp_publish>
	light_ctl_temp_handler(state);
    5ada:	4650      	mov	r0, sl
}
    5adc:	b005      	add	sp, #20
    5ade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	light_ctl_temp_handler(state);
    5ae2:	f001 b8bb 	b.w	6c5c <light_ctl_temp_handler>
		tt = net_buf_simple_pull_u8(buf);
    5ae6:	4620      	mov	r0, r4
    5ae8:	f019 fb93 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    5aec:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    5af0:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    5af2:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    5af4:	d0ae      	beq.n	5a54 <light_ctl_temp_set_unack+0x7c>
		delay = net_buf_simple_pull_u8(buf);
    5af6:	4620      	mov	r0, r4
    5af8:	f019 fb8b 	bl	1f212 <net_buf_simple_pull_u8>
    5afc:	4604      	mov	r4, r0
		break;
    5afe:	e7b0      	b.n	5a62 <light_ctl_temp_set_unack+0x8a>
		light_ctl_temp_publish(model);
    5b00:	4630      	mov	r0, r6
}
    5b02:	b005      	add	sp, #20
    5b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_ctl_temp_publish(model);
    5b08:	f7ff bf32 	b.w	5970 <light_ctl_temp_publish>
		state->temp = state->target_temp;
    5b0c:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    5b10:	f8aa 1004 	strh.w	r1, [sl, #4]
		state->delta_uv = state->target_delta_uv;
    5b14:	f8ba 100a 	ldrh.w	r1, [sl, #10]
    5b18:	f8aa 1008 	strh.w	r1, [sl, #8]
    5b1c:	e7d8      	b.n	5ad0 <light_ctl_temp_set_unack+0xf8>
    5b1e:	bf00      	nop
    5b20:	200020ae 	.word	0x200020ae
    5b24:	200006b8 	.word	0x200006b8
    5b28:	20008580 	.word	0x20008580

00005b2c <light_ctl_temp_set>:

static void light_ctl_temp_set(struct bt_mesh_model *model,
			       struct bt_mesh_msg_ctx *ctx,
			       struct net_buf_simple *buf)
{
    5b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t tid, tt, delay;
	s16_t delta_uv;
	u16_t temp;
	s64_t now;
	struct light_ctl_state *state = model->user_data;
    5b30:	f8d0 a018 	ldr.w	sl, [r0, #24]
{
    5b34:	b085      	sub	sp, #20
    5b36:	4606      	mov	r6, r0

	temp = net_buf_simple_pull_le16(buf);
    5b38:	4610      	mov	r0, r2
{
    5b3a:	4614      	mov	r4, r2
    5b3c:	460d      	mov	r5, r1
	temp = net_buf_simple_pull_le16(buf);
    5b3e:	f019 fb70 	bl	1f222 <net_buf_simple_pull_le16>
    5b42:	4607      	mov	r7, r0
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
    5b44:	4620      	mov	r0, r4
    5b46:	f019 fb6c 	bl	1f222 <net_buf_simple_pull_le16>
    5b4a:	9003      	str	r0, [sp, #12]
	tid = net_buf_simple_pull_u8(buf);
    5b4c:	4620      	mov	r0, r4
    5b4e:	f019 fb60 	bl	1f212 <net_buf_simple_pull_u8>

	if (temp < TEMP_MIN || temp > TEMP_MAX) {
    5b52:	f5a7 7248 	sub.w	r2, r7, #800	; 0x320
    5b56:	b292      	uxth	r2, r2
    5b58:	f5b2 4f96 	cmp.w	r2, #19200	; 0x4b00
	tid = net_buf_simple_pull_u8(buf);
    5b5c:	4683      	mov	fp, r0
	if (temp < TEMP_MIN || temp > TEMP_MAX) {
    5b5e:	d82b      	bhi.n	5bb8 <light_ctl_temp_set+0x8c>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    5b60:	f01a f841 	bl	1fbe6 <z_impl_k_uptime_get>
		return;
	}

	now = k_uptime_get();
	if (state->last_tid == tid &&
    5b64:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
    5b68:	455a      	cmp	r2, fp
    5b6a:	e9cd 0101 	strd	r0, r1, [sp, #4]
    5b6e:	d11f      	bne.n	5bb0 <light_ctl_temp_set+0x84>
    5b70:	f8ba 102a 	ldrh.w	r1, [sl, #42]	; 0x2a
    5b74:	88aa      	ldrh	r2, [r5, #4]
    5b76:	4291      	cmp	r1, r2
    5b78:	d11a      	bne.n	5bb0 <light_ctl_temp_set+0x84>
	    state->last_src_addr == ctx->addr &&
    5b7a:	f8ba 102c 	ldrh.w	r1, [sl, #44]	; 0x2c
    5b7e:	88ea      	ldrh	r2, [r5, #6]
    5b80:	4291      	cmp	r1, r2
    5b82:	d115      	bne.n	5bb0 <light_ctl_temp_set+0x84>
	    state->last_dst_addr == ctx->recv_dst &&
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    5b84:	e9da 210c 	ldrd	r2, r1, [sl, #48]	; 0x30
    5b88:	9b02      	ldr	r3, [sp, #8]
    5b8a:	ebb0 0802 	subs.w	r8, r0, r2
	    state->last_dst_addr == ctx->recv_dst &&
    5b8e:	f241 7070 	movw	r0, #6000	; 0x1770
	    (now - state->last_msg_timestamp <= K_SECONDS(6))) {
    5b92:	eb63 0901 	sbc.w	r9, r3, r1
	    state->last_dst_addr == ctx->recv_dst &&
    5b96:	2100      	movs	r1, #0
    5b98:	4540      	cmp	r0, r8
    5b9a:	eb71 0309 	sbcs.w	r3, r1, r9
    5b9e:	db07      	blt.n	5bb0 <light_ctl_temp_set+0x84>
		light_ctl_temp_get(model, ctx, buf);
    5ba0:	4622      	mov	r2, r4
    5ba2:	4629      	mov	r1, r5
    5ba4:	4630      	mov	r0, r6

	state->transition->just_started = true;
	light_ctl_temp_get(model, ctx, buf);
	light_ctl_temp_publish(model);
	light_ctl_temp_handler(state);
}
    5ba6:	b005      	add	sp, #20
    5ba8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_ctl_temp_get(model, ctx, buf);
    5bac:	f7fe bb62 	b.w	4274 <light_ctl_temp_get>
	switch (buf->len) {
    5bb0:	88a2      	ldrh	r2, [r4, #4]
    5bb2:	b122      	cbz	r2, 5bbe <light_ctl_temp_set+0x92>
    5bb4:	2a02      	cmp	r2, #2
    5bb6:	d04d      	beq.n	5c54 <light_ctl_temp_set+0x128>
}
    5bb8:	b005      	add	sp, #20
    5bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tt = default_tt;
    5bbe:	4936      	ldr	r1, [pc, #216]	; (5c98 <light_ctl_temp_set+0x16c>)
    5bc0:	f891 8000 	ldrb.w	r8, [r1]
		delay = 0U;
    5bc4:	4691      	mov	r9, r2
	*ptr_counter = 0U;
    5bc6:	4a35      	ldr	r2, [pc, #212]	; (5c9c <light_ctl_temp_set+0x170>)
    5bc8:	6812      	ldr	r2, [r2, #0]
    5bca:	2100      	movs	r1, #0
    5bcc:	6011      	str	r1, [r2, #0]
	k_timer_stop(ptr_timer);
    5bce:	4a34      	ldr	r2, [pc, #208]	; (5ca0 <light_ctl_temp_set+0x174>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    5bd0:	6810      	ldr	r0, [r2, #0]
    5bd2:	f01a f824 	bl	1fc1e <z_impl_k_timer_stop>
	state->last_tid = tid;
    5bd6:	f88a b028 	strb.w	fp, [sl, #40]	; 0x28
	state->last_src_addr = ctx->addr;
    5bda:	88aa      	ldrh	r2, [r5, #4]
    5bdc:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
	state->last_dst_addr = ctx->recv_dst;
    5be0:	88ea      	ldrh	r2, [r5, #6]
    5be2:	f8aa 202c 	strh.w	r2, [sl, #44]	; 0x2c
	if (temp < state->temp_range_min) {
    5be6:	f8ba 200e 	ldrh.w	r2, [sl, #14]
	state->last_msg_timestamp = now;
    5bea:	9b01      	ldr	r3, [sp, #4]
    5bec:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
	if (temp < state->temp_range_min) {
    5bf0:	42ba      	cmp	r2, r7
	state->last_msg_timestamp = now;
    5bf2:	9b02      	ldr	r3, [sp, #8]
    5bf4:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
	if (temp < state->temp_range_min) {
    5bf8:	d805      	bhi.n	5c06 <light_ctl_temp_set+0xda>
	} else if (temp > state->temp_range_max) {
    5bfa:	f8ba 2010 	ldrh.w	r2, [sl, #16]
    5bfe:	4297      	cmp	r7, r2
    5c00:	bf28      	it	cs
    5c02:	4617      	movcs	r7, r2
    5c04:	b2ba      	uxth	r2, r7
	if (state->target_temp != state->temp ||
    5c06:	f8ba 0004 	ldrh.w	r0, [sl, #4]
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
    5c0a:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
	state->target_temp = temp;
    5c0e:	f8aa 2006 	strh.w	r2, [sl, #6]
	if (state->target_temp != state->temp ||
    5c12:	4290      	cmp	r0, r2
	state->target_delta_uv = delta_uv;
    5c14:	f8aa 100a 	strh.w	r1, [sl, #10]
	if (state->target_temp != state->temp ||
    5c18:	d103      	bne.n	5c22 <light_ctl_temp_set+0xf6>
    5c1a:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
    5c1e:	428a      	cmp	r2, r1
    5c20:	d025      	beq.n	5c6e <light_ctl_temp_set+0x142>
		light_ctl_temp_tt_values(state, tt, delay);
    5c22:	464a      	mov	r2, r9
    5c24:	4641      	mov	r1, r8
    5c26:	4650      	mov	r0, sl
    5c28:	f000 ff4e 	bl	6ac8 <light_ctl_temp_tt_values>
	if (state->transition->counter == 0) {
    5c2c:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
    5c30:	6891      	ldr	r1, [r2, #8]
    5c32:	b339      	cbz	r1, 5c84 <light_ctl_temp_set+0x158>
	state->transition->just_started = true;
    5c34:	2101      	movs	r1, #1
    5c36:	7011      	strb	r1, [r2, #0]
	light_ctl_temp_get(model, ctx, buf);
    5c38:	4630      	mov	r0, r6
    5c3a:	4622      	mov	r2, r4
    5c3c:	4629      	mov	r1, r5
    5c3e:	f7fe fb19 	bl	4274 <light_ctl_temp_get>
	light_ctl_temp_publish(model);
    5c42:	4630      	mov	r0, r6
    5c44:	f7ff fe94 	bl	5970 <light_ctl_temp_publish>
	light_ctl_temp_handler(state);
    5c48:	4650      	mov	r0, sl
}
    5c4a:	b005      	add	sp, #20
    5c4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	light_ctl_temp_handler(state);
    5c50:	f001 b804 	b.w	6c5c <light_ctl_temp_handler>
		tt = net_buf_simple_pull_u8(buf);
    5c54:	4620      	mov	r0, r4
    5c56:	f019 fadc 	bl	1f212 <net_buf_simple_pull_u8>
		if ((tt & 0x3F) == 0x3F) {
    5c5a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
    5c5e:	2a3f      	cmp	r2, #63	; 0x3f
		tt = net_buf_simple_pull_u8(buf);
    5c60:	4680      	mov	r8, r0
		if ((tt & 0x3F) == 0x3F) {
    5c62:	d0a9      	beq.n	5bb8 <light_ctl_temp_set+0x8c>
		delay = net_buf_simple_pull_u8(buf);
    5c64:	4620      	mov	r0, r4
    5c66:	f019 fad4 	bl	1f212 <net_buf_simple_pull_u8>
    5c6a:	4681      	mov	r9, r0
		break;
    5c6c:	e7ab      	b.n	5bc6 <light_ctl_temp_set+0x9a>
		light_ctl_temp_get(model, ctx, buf);
    5c6e:	4630      	mov	r0, r6
    5c70:	4622      	mov	r2, r4
    5c72:	4629      	mov	r1, r5
    5c74:	f7fe fafe 	bl	4274 <light_ctl_temp_get>
		light_ctl_temp_publish(model);
    5c78:	4630      	mov	r0, r6
}
    5c7a:	b005      	add	sp, #20
    5c7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		light_ctl_temp_publish(model);
    5c80:	f7ff be76 	b.w	5970 <light_ctl_temp_publish>
		state->temp = state->target_temp;
    5c84:	f8ba 1006 	ldrh.w	r1, [sl, #6]
    5c88:	f8aa 1004 	strh.w	r1, [sl, #4]
		state->delta_uv = state->target_delta_uv;
    5c8c:	f8ba 100a 	ldrh.w	r1, [sl, #10]
    5c90:	f8aa 1008 	strh.w	r1, [sl, #8]
    5c94:	e7ce      	b.n	5c34 <light_ctl_temp_set+0x108>
    5c96:	bf00      	nop
    5c98:	200020ae 	.word	0x200020ae
    5c9c:	200006b8 	.word	0x200006b8
    5ca0:	20008580 	.word	0x20008580

00005ca4 <unsolicitedly_publish_states_work_handler>:
#include "device_composition.h"
#include "state_binding.h"
#include "storage.h"

static void unsolicitedly_publish_states_work_handler(struct k_work *work)
{
    5ca4:	b538      	push	{r3, r4, r5, lr}
	gen_onoff_publish(&root_models[2]);
    5ca6:	4c0f      	ldr	r4, [pc, #60]	; (5ce4 <unsolicitedly_publish_states_work_handler+0x40>)
    5ca8:	4620      	mov	r0, r4
	gen_level_publish(&root_models[4]);
	light_lightness_publish(&root_models[11]);
    5caa:	f104 05fc 	add.w	r5, r4, #252	; 0xfc
	gen_onoff_publish(&root_models[2]);
    5cae:	f011 fe22 	bl	178f6 <gen_onoff_publish>
	gen_level_publish(&root_models[4]);
    5cb2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5cb6:	f011 fe42 	bl	1793e <gen_level_publish>
	light_lightness_publish(&root_models[11]);
    5cba:	4628      	mov	r0, r5
    5cbc:	f011 fe63 	bl	17986 <light_lightness_publish>
	light_lightness_linear_publish(&root_models[11]);
    5cc0:	4628      	mov	r0, r5
    5cc2:	f011 fe84 	bl	179ce <light_lightness_linear_publish>
	light_ctl_publish(&root_models[14]);
    5cc6:	f504 70a8 	add.w	r0, r4, #336	; 0x150

	gen_level_publish(&s0_models[0]);
    5cca:	4c07      	ldr	r4, [pc, #28]	; (5ce8 <unsolicitedly_publish_states_work_handler+0x44>)
	light_ctl_publish(&root_models[14]);
    5ccc:	f7ff fc96 	bl	55fc <light_ctl_publish>
	gen_level_publish(&s0_models[0]);
    5cd0:	4620      	mov	r0, r4
    5cd2:	f011 fe34 	bl	1793e <gen_level_publish>
	light_ctl_temp_publish(&s0_models[2]);
    5cd6:	f104 0038 	add.w	r0, r4, #56	; 0x38
}
    5cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	light_ctl_temp_publish(&s0_models[2]);
    5cde:	f7ff be47 	b.w	5970 <light_ctl_temp_publish>
    5ce2:	bf00      	nop
    5ce4:	200082a4 	.word	0x200082a4
    5ce8:	20008448 	.word	0x20008448

00005cec <no_transition_work_handler>:

K_TIMER_DEFINE(save_lightness_temp_last_values_timer,
	       save_lightness_temp_last_values_timer_handler, NULL);

static void no_transition_work_handler(struct k_work *work)
{
    5cec:	b510      	push	{r4, lr}
	bool readjust_light_state;

	readjust_light_state = false;

	if (!bt_mesh_is_provisioned()) {
    5cee:	f015 fd3e 	bl	1b76e <bt_mesh_is_provisioned>
    5cf2:	4604      	mov	r4, r0
    5cf4:	b360      	cbz	r0, 5d50 <no_transition_work_handler+0x64>
		return;
	}

	if (target_lightness != lightness) {
    5cf6:	4b17      	ldr	r3, [pc, #92]	; (5d54 <no_transition_work_handler+0x68>)
    5cf8:	881a      	ldrh	r2, [r3, #0]
    5cfa:	4b17      	ldr	r3, [pc, #92]	; (5d58 <no_transition_work_handler+0x6c>)
    5cfc:	8819      	ldrh	r1, [r3, #0]
    5cfe:	4291      	cmp	r1, r2
    5d00:	d010      	beq.n	5d24 <no_transition_work_handler+0x38>
		lightness = target_lightness;
    5d02:	801a      	strh	r2, [r3, #0]
		readjust_lightness();
    5d04:	f000 f914 	bl	5f30 <readjust_lightness>
		readjust_light_state = true;
	}

	if (target_temperature != temperature) {
    5d08:	4b14      	ldr	r3, [pc, #80]	; (5d5c <no_transition_work_handler+0x70>)
    5d0a:	f9b3 2000 	ldrsh.w	r2, [r3]
    5d0e:	4b14      	ldr	r3, [pc, #80]	; (5d60 <no_transition_work_handler+0x74>)
    5d10:	f9b3 1000 	ldrsh.w	r1, [r3]
    5d14:	4291      	cmp	r1, r2
    5d16:	d007      	beq.n	5d28 <no_transition_work_handler+0x3c>
		temperature = target_temperature;
    5d18:	801a      	strh	r2, [r3, #0]
		readjust_temperature();
    5d1a:	f000 f943 	bl	5fa4 <readjust_temperature>
		readjust_light_state = true;
	}

	if (readjust_light_state) {
		update_led_gpio();
    5d1e:	f7fd fcc5 	bl	36ac <update_led_gpio>
    5d22:	e003      	b.n	5d2c <no_transition_work_handler+0x40>
	readjust_light_state = false;
    5d24:	2400      	movs	r4, #0
    5d26:	e7ef      	b.n	5d08 <no_transition_work_handler+0x1c>
	if (readjust_light_state) {
    5d28:	2c00      	cmp	r4, #0
    5d2a:	d1f8      	bne.n	5d1e <no_transition_work_handler+0x32>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
    5d2c:	2200      	movs	r2, #0
    5d2e:	f241 3188 	movw	r1, #5000	; 0x1388
    5d32:	480c      	ldr	r0, [pc, #48]	; (5d64 <no_transition_work_handler+0x78>)
    5d34:	f011 fb54 	bl	173e0 <z_impl_k_timer_start>
	k_timer_start(&unsolicitedly_publish_states_timer, K_MSEC(5000), 0);

	/* If Lightness & Temperature values remains stable for
	 * 10 Seconds then & then only get stored on SoC flash.
	 */
	if (gen_power_onoff_srv_user_data.onpowerup == STATE_RESTORE) {
    5d38:	4b0b      	ldr	r3, [pc, #44]	; (5d68 <no_transition_work_handler+0x7c>)
    5d3a:	781b      	ldrb	r3, [r3, #0]
    5d3c:	2b02      	cmp	r3, #2
    5d3e:	d107      	bne.n	5d50 <no_transition_work_handler+0x64>
    5d40:	2200      	movs	r2, #0
    5d42:	f242 7110 	movw	r1, #10000	; 0x2710
    5d46:	4809      	ldr	r0, [pc, #36]	; (5d6c <no_transition_work_handler+0x80>)
		k_timer_start(&save_lightness_temp_last_values_timer,
			      K_MSEC(10000), 0);
	}
}
    5d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d4c:	f011 bb48 	b.w	173e0 <z_impl_k_timer_start>
    5d50:	bd10      	pop	{r4, pc}
    5d52:	bf00      	nop
    5d54:	2000204a 	.word	0x2000204a
    5d58:	20002048 	.word	0x20002048
    5d5c:	2000204c 	.word	0x2000204c
    5d60:	2000204e 	.word	0x2000204e
    5d64:	200093ac 	.word	0x200093ac
    5d68:	200020a8 	.word	0x200020a8
    5d6c:	20009380 	.word	0x20009380

00005d70 <unsolicitedly_publish_states_timer_handler>:
    5d70:	4909      	ldr	r1, [pc, #36]	; (5d98 <unsolicitedly_publish_states_timer_handler+0x28>)
    5d72:	f3bf 8f5b 	dmb	ish
    5d76:	e851 3f00 	ldrex	r3, [r1]
    5d7a:	f043 0201 	orr.w	r2, r3, #1
    5d7e:	e841 2000 	strex	r0, r2, [r1]
    5d82:	2800      	cmp	r0, #0
    5d84:	d1f7      	bne.n	5d76 <unsolicitedly_publish_states_timer_handler+0x6>
    5d86:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5d8a:	07db      	lsls	r3, r3, #31
    5d8c:	d403      	bmi.n	5d96 <unsolicitedly_publish_states_timer_handler+0x26>
		k_queue_append(&work_q->queue, work);
    5d8e:	3908      	subs	r1, #8
    5d90:	4802      	ldr	r0, [pc, #8]	; (5d9c <unsolicitedly_publish_states_timer_handler+0x2c>)
    5d92:	f019 bcb5 	b.w	1f700 <k_queue_append>
}
    5d96:	4770      	bx	lr
    5d98:	20008504 	.word	0x20008504
    5d9c:	20001fc8 	.word	0x20001fc8

00005da0 <randomize_publishers_TID>:
#endif

static u8_t tid_level;

void randomize_publishers_TID(void)
{
    5da0:	b508      	push	{r3, lr}
#if (defined(ONOFF) || defined(ONOFF_TT))
	bt_rand(&tid_onoff, sizeof(tid_onoff));
    5da2:	2101      	movs	r1, #1
    5da4:	4805      	ldr	r0, [pc, #20]	; (5dbc <randomize_publishers_TID+0x1c>)
    5da6:	f018 fdd7 	bl	1e958 <bt_rand>
#elif defined(VND_MODEL_TEST)
	bt_rand(&tid_vnd, sizeof(tid_vnd));
#endif

	bt_rand(&tid_level, sizeof(tid_level));
    5daa:	2101      	movs	r1, #1
    5dac:	4804      	ldr	r0, [pc, #16]	; (5dc0 <randomize_publishers_TID+0x20>)
    5dae:	f018 fdd3 	bl	1e958 <bt_rand>

	is_randomization_of_TIDs_done = true;
    5db2:	4b04      	ldr	r3, [pc, #16]	; (5dc4 <randomize_publishers_TID+0x24>)
    5db4:	2201      	movs	r2, #1
    5db6:	701a      	strb	r2, [r3, #0]
}
    5db8:	bd08      	pop	{r3, pc}
    5dba:	bf00      	nop
    5dbc:	200020ab 	.word	0x200020ab
    5dc0:	200020aa 	.word	0x200020aa
    5dc4:	200020a9 	.word	0x200020a9

00005dc8 <publish>:
	gpio_pin_read(port, pin, &val);
	return val;
}

void publish(struct k_work *work)
{
    5dc8:	b538      	push	{r3, r4, r5, lr}
	int err = 0;

	if (is_randomization_of_TIDs_done == false) {
    5dca:	4b36      	ldr	r3, [pc, #216]	; (5ea4 <publish+0xdc>)
    5dcc:	781b      	ldrb	r3, [r3, #0]
    5dce:	2b00      	cmp	r3, #0
    5dd0:	d067      	beq.n	5ea2 <publish+0xda>
		return;
	}

	if (button_read(button_device[0], SW0_GPIO_PIN) == 0) {
    5dd2:	4c35      	ldr	r4, [pc, #212]	; (5ea8 <publish+0xe0>)
    5dd4:	210d      	movs	r1, #13
    5dd6:	6820      	ldr	r0, [r4, #0]
    5dd8:	f011 fe20 	bl	17a1c <button_read>
    5ddc:	b9f8      	cbnz	r0, 5e1e <publish+0x56>
#if defined(ONOFF)
		bt_mesh_model_msg_init(root_models[3].pub->msg,
    5dde:	4c33      	ldr	r4, [pc, #204]	; (5eac <publish+0xe4>)
    5de0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    5de2:	f248 2103 	movw	r1, #33283	; 0x8203
    5de6:	6918      	ldr	r0, [r3, #16]
    5de8:	f016 fb28 	bl	1c43c <bt_mesh_model_msg_init>
				       BT_MESH_MODEL_OP_GEN_ONOFF_SET_UNACK);
		net_buf_simple_add_u8(root_models[3].pub->msg, 0x01);
    5dec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    5dee:	2101      	movs	r1, #1
#endif
	} else if (button_read(button_device[1], SW1_GPIO_PIN) == 0) {
#if defined(ONOFF)
		bt_mesh_model_msg_init(root_models[3].pub->msg,
				       BT_MESH_MODEL_OP_GEN_ONOFF_SET_UNACK);
		net_buf_simple_add_u8(root_models[3].pub->msg, 0x00);
    5df0:	6918      	ldr	r0, [r3, #16]
    5df2:	f019 f992 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(root_models[3].pub->msg, tid_onoff++);
    5df6:	4b2e      	ldr	r3, [pc, #184]	; (5eb0 <publish+0xe8>)
    5df8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    5dfa:	7819      	ldrb	r1, [r3, #0]
    5dfc:	1c48      	adds	r0, r1, #1
    5dfe:	7018      	strb	r0, [r3, #0]
    5e00:	6910      	ldr	r0, [r2, #16]
    5e02:	f019 f98a 	bl	1f11a <net_buf_simple_add_u8>
		err = bt_mesh_model_publish(&root_models[3]);
    5e06:	f104 0054 	add.w	r0, r4, #84	; 0x54
#if defined(GENERIC_LEVEL)
		bt_mesh_model_msg_init(root_models[5].pub->msg,
				       BT_MESH_MODEL_OP_GEN_LEVEL_SET_UNACK);
		net_buf_simple_add_le16(root_models[5].pub->msg, LEVEL_S100);
		net_buf_simple_add_u8(root_models[5].pub->msg, tid_level++);
		err = bt_mesh_model_publish(&root_models[5]);
    5e0a:	f008 fbd3 	bl	e5b4 <bt_mesh_model_publish>
		net_buf_simple_add_u8(root_models[16].pub->msg, tid_level++);
		err = bt_mesh_model_publish(&root_models[16]);
#endif
	}

	if (err) {
    5e0e:	2800      	cmp	r0, #0
    5e10:	d047      	beq.n	5ea2 <publish+0xda>
		printk("bt_mesh_model_publish: err: %d\n", err);
    5e12:	4601      	mov	r1, r0
	}
}
    5e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("bt_mesh_model_publish: err: %d\n", err);
    5e18:	4826      	ldr	r0, [pc, #152]	; (5eb4 <publish+0xec>)
    5e1a:	f012 b9b2 	b.w	18182 <printk>
	} else if (button_read(button_device[1], SW1_GPIO_PIN) == 0) {
    5e1e:	210e      	movs	r1, #14
    5e20:	6860      	ldr	r0, [r4, #4]
    5e22:	f011 fdfb 	bl	17a1c <button_read>
    5e26:	4605      	mov	r5, r0
    5e28:	b948      	cbnz	r0, 5e3e <publish+0x76>
		bt_mesh_model_msg_init(root_models[3].pub->msg,
    5e2a:	4c20      	ldr	r4, [pc, #128]	; (5eac <publish+0xe4>)
    5e2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    5e2e:	f248 2103 	movw	r1, #33283	; 0x8203
    5e32:	6918      	ldr	r0, [r3, #16]
    5e34:	f016 fb02 	bl	1c43c <bt_mesh_model_msg_init>
		net_buf_simple_add_u8(root_models[3].pub->msg, 0x00);
    5e38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    5e3a:	4629      	mov	r1, r5
    5e3c:	e7d8      	b.n	5df0 <publish+0x28>
	} else if (button_read(button_device[2], SW2_GPIO_PIN) == 0) {
    5e3e:	210f      	movs	r1, #15
    5e40:	68a0      	ldr	r0, [r4, #8]
    5e42:	f011 fdeb 	bl	17a1c <button_read>
    5e46:	b9d0      	cbnz	r0, 5e7e <publish+0xb6>
		bt_mesh_model_msg_init(root_models[5].pub->msg,
    5e48:	4c18      	ldr	r4, [pc, #96]	; (5eac <publish+0xe4>)
    5e4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5e4e:	f248 2107 	movw	r1, #33287	; 0x8207
    5e52:	6918      	ldr	r0, [r3, #16]
    5e54:	f016 faf2 	bl	1c43c <bt_mesh_model_msg_init>
		net_buf_simple_add_le16(root_models[5].pub->msg, LEVEL_S25);
    5e58:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5e5c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
		net_buf_simple_add_le16(root_models[5].pub->msg, LEVEL_S100);
    5e60:	6918      	ldr	r0, [r3, #16]
    5e62:	f019 f962 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(root_models[5].pub->msg, tid_level++);
    5e66:	4b14      	ldr	r3, [pc, #80]	; (5eb8 <publish+0xf0>)
    5e68:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
    5e6c:	7819      	ldrb	r1, [r3, #0]
    5e6e:	1c48      	adds	r0, r1, #1
    5e70:	7018      	strb	r0, [r3, #0]
    5e72:	6910      	ldr	r0, [r2, #16]
    5e74:	f019 f951 	bl	1f11a <net_buf_simple_add_u8>
		err = bt_mesh_model_publish(&root_models[5]);
    5e78:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    5e7c:	e7c5      	b.n	5e0a <publish+0x42>
	} else if (button_read(button_device[3], SW3_GPIO_PIN) == 0) {
    5e7e:	2110      	movs	r1, #16
    5e80:	68e0      	ldr	r0, [r4, #12]
    5e82:	f011 fdcb 	bl	17a1c <button_read>
    5e86:	b960      	cbnz	r0, 5ea2 <publish+0xda>
		bt_mesh_model_msg_init(root_models[5].pub->msg,
    5e88:	4c08      	ldr	r4, [pc, #32]	; (5eac <publish+0xe4>)
    5e8a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5e8e:	f248 2107 	movw	r1, #33287	; 0x8207
    5e92:	6918      	ldr	r0, [r3, #16]
    5e94:	f016 fad2 	bl	1c43c <bt_mesh_model_msg_init>
		net_buf_simple_add_le16(root_models[5].pub->msg, LEVEL_S100);
    5e98:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5e9c:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5ea0:	e7de      	b.n	5e60 <publish+0x98>
}
    5ea2:	bd38      	pop	{r3, r4, r5, pc}
    5ea4:	200020a9 	.word	0x200020a9
    5ea8:	20000670 	.word	0x20000670
    5eac:	2000826c 	.word	0x2000826c
    5eb0:	200020ab 	.word	0x200020ab
    5eb4:	0002140e 	.word	0x0002140e
    5eb8:	200020aa 	.word	0x200020aa

00005ebc <light_ctl_temp_to_level>:

	target_lightness = var;
}

static s16_t light_ctl_temp_to_level(u16_t temp)
{
    5ebc:	b570      	push	{r4, r5, r6, lr}
	float tmp;

	/* Mesh Model Specification 6.1.3.1.1 2nd formula start */

	tmp = (temp - light_ctl_srv_user_data.temp_range_min) * 65535;
    5ebe:	4d0c      	ldr	r5, [pc, #48]	; (5ef0 <light_ctl_temp_to_level+0x34>)
    5ec0:	89ec      	ldrh	r4, [r5, #14]
    5ec2:	1b00      	subs	r0, r0, r4
    5ec4:	ebc0 4000 	rsb	r0, r0, r0, lsl #16
    5ec8:	f7fa fc08 	bl	6dc <__aeabi_i2f>
    5ecc:	4606      	mov	r6, r0

	tmp = tmp / (light_ctl_srv_user_data.temp_range_max -
    5ece:	8a28      	ldrh	r0, [r5, #16]
    5ed0:	1b00      	subs	r0, r0, r4
    5ed2:	f7fa fc03 	bl	6dc <__aeabi_i2f>
    5ed6:	4601      	mov	r1, r0
    5ed8:	4630      	mov	r0, r6
    5eda:	f7fa fd07 	bl	8ec <__aeabi_fdiv>
		     light_ctl_srv_user_data.temp_range_min);

	return (s16_t) (tmp - 32768);
    5ede:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    5ee2:	f7fa fb45 	bl	570 <__aeabi_fsub>
    5ee6:	f7fa fe13 	bl	b10 <__aeabi_f2iz>

	/* 6.1.3.1.1 2nd formula end */
}
    5eea:	b200      	sxth	r0, r0
    5eec:	bd70      	pop	{r4, r5, r6, pc}
    5eee:	bf00      	nop
    5ef0:	20007be0 	.word	0x20007be0

00005ef4 <level_to_light_ctl_temp>:
	u16_t tmp;
	float diff;

	/* Mesh Model Specification 6.1.3.1.1 1st formula start */
	diff = (float) (light_ctl_srv_user_data.temp_range_max -
			light_ctl_srv_user_data.temp_range_min) / 65535;
    5ef4:	4b0c      	ldr	r3, [pc, #48]	; (5f28 <level_to_light_ctl_temp+0x34>)
{
    5ef6:	b570      	push	{r4, r5, r6, lr}
			light_ctl_srv_user_data.temp_range_min) / 65535;
    5ef8:	89dc      	ldrh	r4, [r3, #14]
{
    5efa:	4606      	mov	r6, r0
	diff = (float) (light_ctl_srv_user_data.temp_range_max -
    5efc:	8a18      	ldrh	r0, [r3, #16]
    5efe:	1b00      	subs	r0, r0, r4
    5f00:	f7fa fbec 	bl	6dc <__aeabi_i2f>
    5f04:	4909      	ldr	r1, [pc, #36]	; (5f2c <level_to_light_ctl_temp+0x38>)
    5f06:	f7fa fcf1 	bl	8ec <__aeabi_fdiv>
    5f0a:	4605      	mov	r5, r0


	tmp = (u16_t) ((level + 32768) * diff);
    5f0c:	f506 4000 	add.w	r0, r6, #32768	; 0x8000
    5f10:	f7fa fbe4 	bl	6dc <__aeabi_i2f>
    5f14:	4601      	mov	r1, r0
    5f16:	4628      	mov	r0, r5
    5f18:	f7fa fc34 	bl	784 <__aeabi_fmul>
    5f1c:	f7fa fe1e 	bl	b5c <__aeabi_f2uiz>

	return (light_ctl_srv_user_data.temp_range_min + tmp);
    5f20:	4420      	add	r0, r4

	/* 6.1.3.1.1 1st formula end */
}
    5f22:	b280      	uxth	r0, r0
    5f24:	bd70      	pop	{r4, r5, r6, pc}
    5f26:	bf00      	nop
    5f28:	20007be0 	.word	0x20007be0
    5f2c:	477fff00 	.word	0x477fff00

00005f30 <readjust_lightness>:

void readjust_lightness(void)
{
    5f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (lightness != 0) {
    5f32:	4b16      	ldr	r3, [pc, #88]	; (5f8c <readjust_lightness+0x5c>)
    5f34:	4d16      	ldr	r5, [pc, #88]	; (5f90 <readjust_lightness+0x60>)
    5f36:	881c      	ldrh	r4, [r3, #0]
    5f38:	4b16      	ldr	r3, [pc, #88]	; (5f94 <readjust_lightness+0x64>)
    5f3a:	b324      	cbz	r4, 5f86 <readjust_lightness+0x56>
		light_lightness_srv_user_data.last = lightness;
	}

	if (lightness) {
		gen_onoff_srv_root_user_data.onoff = STATE_ON;
    5f3c:	2201      	movs	r2, #1
		light_lightness_srv_user_data.last = lightness;
    5f3e:	812c      	strh	r4, [r5, #8]
		gen_onoff_srv_root_user_data.onoff = STATE_ON;
    5f40:	701a      	strb	r2, [r3, #0]
	} else {
		gen_onoff_srv_root_user_data.onoff = STATE_OFF;
	}

	gen_level_srv_root_user_data.level = lightness - 32768;
    5f42:	4a15      	ldr	r2, [pc, #84]	; (5f98 <readjust_lightness+0x68>)
	light_lightness_srv_user_data.actual = lightness;
    5f44:	80ac      	strh	r4, [r5, #4]
	gen_level_srv_root_user_data.level = lightness - 32768;
    5f46:	f5a4 4300 	sub.w	r3, r4, #32768	; 0x8000
    5f4a:	8013      	strh	r3, [r2, #0]
	tmp = ((float) val / 65535);
    5f4c:	4620      	mov	r0, r4
    5f4e:	f7fa fbc1 	bl	6d4 <__aeabi_ui2f>
    5f52:	4912      	ldr	r1, [pc, #72]	; (5f9c <readjust_lightness+0x6c>)
    5f54:	f7fa fcca 	bl	8ec <__aeabi_fdiv>
	return (u16_t) ceiling(65535 * tmp * tmp);
    5f58:	4910      	ldr	r1, [pc, #64]	; (5f9c <readjust_lightness+0x6c>)
	tmp = ((float) val / 65535);
    5f5a:	4606      	mov	r6, r0
	return (u16_t) ceiling(65535 * tmp * tmp);
    5f5c:	f7fa fc12 	bl	784 <__aeabi_fmul>
    5f60:	4631      	mov	r1, r6
    5f62:	f7fa fc0f 	bl	784 <__aeabi_fmul>
    5f66:	4607      	mov	r7, r0
	inum = (s32_t) num;
    5f68:	f7fa fdd2 	bl	b10 <__aeabi_f2iz>
    5f6c:	4606      	mov	r6, r0
	if (num == (float) inum) {
    5f6e:	f7fa fbb5 	bl	6dc <__aeabi_i2f>
    5f72:	4601      	mov	r1, r0
    5f74:	4638      	mov	r0, r7
    5f76:	f7fa fd99 	bl	aac <__aeabi_fcmpeq>
    5f7a:	b900      	cbnz	r0, 5f7e <readjust_lightness+0x4e>
	return inum + 1;
    5f7c:	3601      	adds	r6, #1
	light_lightness_srv_user_data.linear = actual_to_linear(lightness);
	light_ctl_srv_user_data.lightness = lightness;
    5f7e:	4b08      	ldr	r3, [pc, #32]	; (5fa0 <readjust_lightness+0x70>)
	return (u16_t) ceiling(65535 * tmp * tmp);
    5f80:	802e      	strh	r6, [r5, #0]
	light_ctl_srv_user_data.lightness = lightness;
    5f82:	801c      	strh	r4, [r3, #0]
}
    5f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gen_onoff_srv_root_user_data.onoff = STATE_OFF;
    5f86:	701c      	strb	r4, [r3, #0]
    5f88:	e7db      	b.n	5f42 <readjust_lightness+0x12>
    5f8a:	bf00      	nop
    5f8c:	20002048 	.word	0x20002048
    5f90:	20007c28 	.word	0x20007c28
    5f94:	20007bc8 	.word	0x20007bc8
    5f98:	20007b78 	.word	0x20007b78
    5f9c:	477fff00 	.word	0x477fff00
    5fa0:	20007be0 	.word	0x20007be0

00005fa4 <readjust_temperature>:

void readjust_temperature(void)
{
    5fa4:	b508      	push	{r3, lr}
	gen_level_srv_s0_user_data.level = temperature;
    5fa6:	4b05      	ldr	r3, [pc, #20]	; (5fbc <readjust_temperature+0x18>)
    5fa8:	f9b3 0000 	ldrsh.w	r0, [r3]
    5fac:	4b04      	ldr	r3, [pc, #16]	; (5fc0 <readjust_temperature+0x1c>)
    5fae:	8018      	strh	r0, [r3, #0]
	light_ctl_srv_user_data.temp = level_to_light_ctl_temp(temperature);
    5fb0:	f7ff ffa0 	bl	5ef4 <level_to_light_ctl_temp>
    5fb4:	4b03      	ldr	r3, [pc, #12]	; (5fc4 <readjust_temperature+0x20>)
    5fb6:	8098      	strh	r0, [r3, #4]
}
    5fb8:	bd08      	pop	{r3, pc}
    5fba:	bf00      	nop
    5fbc:	2000204e 	.word	0x2000204e
    5fc0:	20007ba0 	.word	0x20007ba0
    5fc4:	20007be0 	.word	0x20007be0

00005fc8 <state_binding>:

void state_binding(u8_t light, u8_t temp)
{
	switch (temp) {
    5fc8:	290a      	cmp	r1, #10
{
    5fca:	b538      	push	{r3, r4, r5, lr}
    5fcc:	4604      	mov	r4, r0
	switch (temp) {
    5fce:	d016      	beq.n	5ffe <state_binding+0x36>
    5fd0:	290b      	cmp	r1, #11
    5fd2:	d001      	beq.n	5fd8 <state_binding+0x10>
    5fd4:	2909      	cmp	r1, #9
    5fd6:	d107      	bne.n	5fe8 <state_binding+0x20>
	case ONOFF_TEMP:
	case CTL_TEMP:
		temperature =
			light_ctl_temp_to_level(light_ctl_srv_user_data.temp);
    5fd8:	4b2c      	ldr	r3, [pc, #176]	; (608c <state_binding+0xc4>)
    5fda:	8898      	ldrh	r0, [r3, #4]
    5fdc:	f7ff ff6e 	bl	5ebc <light_ctl_temp_to_level>
		temperature =
    5fe0:	4b2b      	ldr	r3, [pc, #172]	; (6090 <state_binding+0xc8>)
    5fe2:	8018      	strh	r0, [r3, #0]

		gen_level_srv_s0_user_data.level = temperature;
    5fe4:	4b2b      	ldr	r3, [pc, #172]	; (6094 <state_binding+0xcc>)
    5fe6:	8018      	strh	r0, [r3, #0]
		break;
	default:
		break;
	}

	switch (light) {
    5fe8:	1e60      	subs	r0, r4, #1
    5fea:	4d2b      	ldr	r5, [pc, #172]	; (6098 <state_binding+0xd0>)
    5fec:	4c2b      	ldr	r4, [pc, #172]	; (609c <state_binding+0xd4>)
    5fee:	2806      	cmp	r0, #6
    5ff0:	d83f      	bhi.n	6072 <state_binding+0xaa>
    5ff2:	e8df f000 	tbb	[pc, r0]
    5ff6:	180e      	.short	0x180e
    5ff8:	3a382722 	.word	0x3a382722
    5ffc:	48          	.byte	0x48
    5ffd:	00          	.byte	0x00
		temperature = gen_level_srv_s0_user_data.level;
    5ffe:	4b25      	ldr	r3, [pc, #148]	; (6094 <state_binding+0xcc>)
    6000:	f9b3 0000 	ldrsh.w	r0, [r3]
    6004:	4b22      	ldr	r3, [pc, #136]	; (6090 <state_binding+0xc8>)
    6006:	8018      	strh	r0, [r3, #0]
			level_to_light_ctl_temp(temperature);
    6008:	f7ff ff74 	bl	5ef4 <level_to_light_ctl_temp>
		light_ctl_srv_user_data.temp =
    600c:	4b1f      	ldr	r3, [pc, #124]	; (608c <state_binding+0xc4>)
    600e:	8098      	strh	r0, [r3, #4]
		break;
    6010:	e7ea      	b.n	5fe8 <state_binding+0x20>
	case ONPOWERUP:
		if (gen_onoff_srv_root_user_data.onoff == STATE_OFF) {
    6012:	4b23      	ldr	r3, [pc, #140]	; (60a0 <state_binding+0xd8>)
    6014:	781b      	ldrb	r3, [r3, #0]
    6016:	b913      	cbnz	r3, 601e <state_binding+0x56>
			lightness = 0U;
    6018:	2300      	movs	r3, #0
	case LINEAR:
		lightness =
			linear_to_actual(light_lightness_srv_user_data.linear);
		break;
	case CTL:
		lightness = light_ctl_srv_user_data.lightness;
    601a:	8023      	strh	r3, [r4, #0]
		break;
    601c:	e029      	b.n	6072 <state_binding+0xaa>
		} else if (gen_onoff_srv_root_user_data.onoff == STATE_ON) {
    601e:	2b01      	cmp	r3, #1
    6020:	d127      	bne.n	6072 <state_binding+0xaa>
			lightness = light_lightness_srv_user_data.last;
    6022:	892b      	ldrh	r3, [r5, #8]
    6024:	e7f9      	b.n	601a <state_binding+0x52>
		if (gen_onoff_srv_root_user_data.onoff == STATE_OFF) {
    6026:	4b1e      	ldr	r3, [pc, #120]	; (60a0 <state_binding+0xd8>)
    6028:	781b      	ldrb	r3, [r3, #0]
    602a:	2b00      	cmp	r3, #0
    602c:	d0f4      	beq.n	6018 <state_binding+0x50>
		} else if (gen_onoff_srv_root_user_data.onoff == STATE_ON) {
    602e:	2b01      	cmp	r3, #1
    6030:	d11f      	bne.n	6072 <state_binding+0xaa>
			if (light_lightness_srv_user_data.def == 0) {
    6032:	896b      	ldrh	r3, [r5, #10]
    6034:	2b00      	cmp	r3, #0
    6036:	d0f4      	beq.n	6022 <state_binding+0x5a>
    6038:	e7ef      	b.n	601a <state_binding+0x52>
		lightness = gen_level_srv_root_user_data.level + 32768;
    603a:	4b1a      	ldr	r3, [pc, #104]	; (60a4 <state_binding+0xdc>)
    603c:	881b      	ldrh	r3, [r3, #0]
    603e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6042:	e7ea      	b.n	601a <state_binding+0x52>
		lightness = gen_level_srv_root_user_data.level + 32768;
    6044:	4917      	ldr	r1, [pc, #92]	; (60a4 <state_binding+0xdc>)
    6046:	880a      	ldrh	r2, [r1, #0]
	if (var > 0 && var < light_lightness_srv_user_data.light_range_min) {
    6048:	f492 4200 	eors.w	r2, r2, #32768	; 0x8000
    604c:	d016      	beq.n	607c <state_binding+0xb4>
    604e:	89eb      	ldrh	r3, [r5, #14]
    6050:	429a      	cmp	r2, r3
    6052:	d213      	bcs.n	607c <state_binding+0xb4>
		if (gen_level_srv_root_user_data.last_delta < 0) {
    6054:	688a      	ldr	r2, [r1, #8]
			var = 0U;
    6056:	2a00      	cmp	r2, #0
    6058:	bfb8      	it	lt
    605a:	2300      	movlt	r3, #0
	lightness = var;
    605c:	8023      	strh	r3, [r4, #0]

	constrain_lightness(lightness);

jump:
	readjust_lightness();
}
    605e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	readjust_lightness();
    6062:	f7ff bf65 	b.w	5f30 <readjust_lightness>
		lightness = light_lightness_srv_user_data.actual;
    6066:	88ab      	ldrh	r3, [r5, #4]
    6068:	e7d7      	b.n	601a <state_binding+0x52>
			linear_to_actual(light_lightness_srv_user_data.linear);
    606a:	8828      	ldrh	r0, [r5, #0]
    606c:	f7fa ff70 	bl	f50 <linear_to_actual>
		lightness =
    6070:	8020      	strh	r0, [r4, #0]
	constrain_lightness(lightness);
    6072:	8822      	ldrh	r2, [r4, #0]
	if (var > 0 && var < light_lightness_srv_user_data.light_range_min) {
    6074:	b112      	cbz	r2, 607c <state_binding+0xb4>
    6076:	89eb      	ldrh	r3, [r5, #14]
    6078:	429a      	cmp	r2, r3
    607a:	d3ef      	bcc.n	605c <state_binding+0x94>
	} else if (var > light_lightness_srv_user_data.light_range_max) {
    607c:	8a2b      	ldrh	r3, [r5, #16]
    607e:	4293      	cmp	r3, r2
    6080:	bf28      	it	cs
    6082:	4613      	movcs	r3, r2
    6084:	e7ea      	b.n	605c <state_binding+0x94>
		lightness = light_ctl_srv_user_data.lightness;
    6086:	4b01      	ldr	r3, [pc, #4]	; (608c <state_binding+0xc4>)
    6088:	881b      	ldrh	r3, [r3, #0]
    608a:	e7c6      	b.n	601a <state_binding+0x52>
    608c:	20007be0 	.word	0x20007be0
    6090:	2000204e 	.word	0x2000204e
    6094:	20007ba0 	.word	0x20007ba0
    6098:	20007c28 	.word	0x20007c28
    609c:	20002048 	.word	0x20002048
    60a0:	20007bc8 	.word	0x20007bc8
    60a4:	20007b78 	.word	0x20007b78

000060a8 <calculate_lightness_target_values>:

void calculate_lightness_target_values(u8_t type)
{
	u16_t tmp;

	switch (type) {
    60a8:	3802      	subs	r0, #2
{
    60aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (type) {
    60ac:	2805      	cmp	r0, #5
    60ae:	d842      	bhi.n	6136 <calculate_lightness_target_values+0x8e>
    60b0:	e8df f000 	tbb	[pc, r0]
    60b4:	47414203 	.word	0x47414203
    60b8:	504a      	.short	0x504a
	case ONOFF:
		if (gen_onoff_srv_root_user_data.target_onoff == 0) {
    60ba:	4b2b      	ldr	r3, [pc, #172]	; (6168 <calculate_lightness_target_values+0xc0>)
    60bc:	785b      	ldrb	r3, [r3, #1]
    60be:	b93b      	cbnz	r3, 60d0 <calculate_lightness_target_values+0x28>
			tmp = 0U;
    60c0:	2500      	movs	r5, #0
	} else if (var > light_lightness_srv_user_data.light_range_max) {
    60c2:	4b2a      	ldr	r3, [pc, #168]	; (616c <calculate_lightness_target_values+0xc4>)
    60c4:	8a1c      	ldrh	r4, [r3, #16]
    60c6:	42a5      	cmp	r5, r4
    60c8:	bf28      	it	cs
    60ca:	4625      	movcs	r5, r4
    60cc:	b2ac      	uxth	r4, r5
    60ce:	e009      	b.n	60e4 <calculate_lightness_target_values+0x3c>
		} else {
			if (light_lightness_srv_user_data.def == 0) {
    60d0:	4b26      	ldr	r3, [pc, #152]	; (616c <calculate_lightness_target_values+0xc4>)
    60d2:	895d      	ldrh	r5, [r3, #10]
    60d4:	b915      	cbnz	r5, 60dc <calculate_lightness_target_values+0x34>
				tmp = light_lightness_srv_user_data.last;
    60d6:	891d      	ldrh	r5, [r3, #8]
	if (var > 0 &&
    60d8:	2d00      	cmp	r5, #0
    60da:	d0f1      	beq.n	60c0 <calculate_lightness_target_values+0x18>
	    var < light_lightness_srv_user_data.light_range_min) {
    60dc:	4b23      	ldr	r3, [pc, #140]	; (616c <calculate_lightness_target_values+0xc4>)
    60de:	89dc      	ldrh	r4, [r3, #14]
	if (var > 0 &&
    60e0:	42ac      	cmp	r4, r5
    60e2:	d9ee      	bls.n	60c2 <calculate_lightness_target_values+0x1a>
	target_lightness = var;
    60e4:	4b22      	ldr	r3, [pc, #136]	; (6170 <calculate_lightness_target_values+0xc8>)
		gen_onoff_srv_root_user_data.target_onoff = STATE_OFF;
	}

	gen_level_srv_root_user_data.target_level = target_lightness - 32768;

	light_lightness_srv_user_data.target_actual = target_lightness;
    60e6:	4d21      	ldr	r5, [pc, #132]	; (616c <calculate_lightness_target_values+0xc4>)
	target_lightness = var;
    60e8:	801c      	strh	r4, [r3, #0]
	if (target_lightness) {
    60ea:	1c22      	adds	r2, r4, #0
    60ec:	4b1e      	ldr	r3, [pc, #120]	; (6168 <calculate_lightness_target_values+0xc0>)
	light_lightness_srv_user_data.target_actual = target_lightness;
    60ee:	80ec      	strh	r4, [r5, #6]
	if (target_lightness) {
    60f0:	bf18      	it	ne
    60f2:	2201      	movne	r2, #1
    60f4:	705a      	strb	r2, [r3, #1]
	gen_level_srv_root_user_data.target_level = target_lightness - 32768;
    60f6:	4a1f      	ldr	r2, [pc, #124]	; (6174 <calculate_lightness_target_values+0xcc>)
    60f8:	f5a4 4300 	sub.w	r3, r4, #32768	; 0x8000
    60fc:	8053      	strh	r3, [r2, #2]
	tmp = ((float) val / 65535);
    60fe:	4620      	mov	r0, r4
    6100:	f7fa fae8 	bl	6d4 <__aeabi_ui2f>
    6104:	491c      	ldr	r1, [pc, #112]	; (6178 <calculate_lightness_target_values+0xd0>)
    6106:	f7fa fbf1 	bl	8ec <__aeabi_fdiv>
	return (u16_t) ceiling(65535 * tmp * tmp);
    610a:	491b      	ldr	r1, [pc, #108]	; (6178 <calculate_lightness_target_values+0xd0>)
	tmp = ((float) val / 65535);
    610c:	4606      	mov	r6, r0
	return (u16_t) ceiling(65535 * tmp * tmp);
    610e:	f7fa fb39 	bl	784 <__aeabi_fmul>
    6112:	4631      	mov	r1, r6
    6114:	f7fa fb36 	bl	784 <__aeabi_fmul>
    6118:	4607      	mov	r7, r0
	inum = (s32_t) num;
    611a:	f7fa fcf9 	bl	b10 <__aeabi_f2iz>
    611e:	4606      	mov	r6, r0
	if (num == (float) inum) {
    6120:	f7fa fadc 	bl	6dc <__aeabi_i2f>
    6124:	4601      	mov	r1, r0
    6126:	4638      	mov	r0, r7
    6128:	f7fa fcc0 	bl	aac <__aeabi_fcmpeq>
    612c:	b900      	cbnz	r0, 6130 <calculate_lightness_target_values+0x88>
	return inum + 1;
    612e:	3601      	adds	r6, #1

	light_lightness_srv_user_data.target_linear =
		actual_to_linear(target_lightness);

	light_ctl_srv_user_data.target_lightness = target_lightness;
    6130:	4b12      	ldr	r3, [pc, #72]	; (617c <calculate_lightness_target_values+0xd4>)
	return (u16_t) ceiling(65535 * tmp * tmp);
    6132:	806e      	strh	r6, [r5, #2]
	light_ctl_srv_user_data.target_lightness = target_lightness;
    6134:	805c      	strh	r4, [r3, #2]
}
    6136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tmp = gen_level_srv_root_user_data.target_level + 32768;
    6138:	4b0e      	ldr	r3, [pc, #56]	; (6174 <calculate_lightness_target_values+0xcc>)
    613a:	885d      	ldrh	r5, [r3, #2]
    613c:	f485 4500 	eor.w	r5, r5, #32768	; 0x8000
		break;
    6140:	e7ca      	b.n	60d8 <calculate_lightness_target_values+0x30>
		tmp = light_lightness_srv_user_data.target_actual;
    6142:	4b0a      	ldr	r3, [pc, #40]	; (616c <calculate_lightness_target_values+0xc4>)
    6144:	88dd      	ldrh	r5, [r3, #6]
		break;
    6146:	e7c7      	b.n	60d8 <calculate_lightness_target_values+0x30>
		tmp = linear_to_actual(light_lightness_srv_user_data.target_linear);
    6148:	4b08      	ldr	r3, [pc, #32]	; (616c <calculate_lightness_target_values+0xc4>)
    614a:	8858      	ldrh	r0, [r3, #2]
    614c:	f7fa ff00 	bl	f50 <linear_to_actual>
    6150:	4605      	mov	r5, r0
		break;
    6152:	e7c1      	b.n	60d8 <calculate_lightness_target_values+0x30>
		tmp = light_ctl_srv_user_data.target_lightness;
    6154:	4b09      	ldr	r3, [pc, #36]	; (617c <calculate_lightness_target_values+0xd4>)
		target_temperature = light_ctl_temp_to_level(light_ctl_srv_user_data.target_temp);
    6156:	88d8      	ldrh	r0, [r3, #6]
		tmp = light_ctl_srv_user_data.target_lightness;
    6158:	885d      	ldrh	r5, [r3, #2]
		target_temperature = light_ctl_temp_to_level(light_ctl_srv_user_data.target_temp);
    615a:	f7ff feaf 	bl	5ebc <light_ctl_temp_to_level>
    615e:	4b08      	ldr	r3, [pc, #32]	; (6180 <calculate_lightness_target_values+0xd8>)
    6160:	8018      	strh	r0, [r3, #0]
		gen_level_srv_s0_user_data.target_level = target_temperature;
    6162:	4b08      	ldr	r3, [pc, #32]	; (6184 <calculate_lightness_target_values+0xdc>)
    6164:	8058      	strh	r0, [r3, #2]
		break;
    6166:	e7b7      	b.n	60d8 <calculate_lightness_target_values+0x30>
    6168:	20007bc8 	.word	0x20007bc8
    616c:	20007c28 	.word	0x20007c28
    6170:	2000204a 	.word	0x2000204a
    6174:	20007b78 	.word	0x20007b78
    6178:	477fff00 	.word	0x477fff00
    617c:	20007be0 	.word	0x20007be0
    6180:	2000204c 	.word	0x2000204c
    6184:	20007ba0 	.word	0x20007ba0

00006188 <calculate_temp_target_values>:
{
	bool set_light_ctl_delta_uv_target_value;

	set_light_ctl_delta_uv_target_value = true;

	switch (type) {
    6188:	280a      	cmp	r0, #10
{
    618a:	b508      	push	{r3, lr}
	switch (type) {
    618c:	d002      	beq.n	6194 <calculate_temp_target_values+0xc>
    618e:	280b      	cmp	r0, #11
    6190:	d00c      	beq.n	61ac <calculate_temp_target_values+0x24>
	if (set_light_ctl_delta_uv_target_value) {

		light_ctl_srv_user_data.target_delta_uv =
			light_ctl_srv_user_data.delta_uv;
	}
}
    6192:	bd08      	pop	{r3, pc}
		target_temperature = gen_level_srv_s0_user_data.target_level;
    6194:	4b0a      	ldr	r3, [pc, #40]	; (61c0 <calculate_temp_target_values+0x38>)
    6196:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
    619a:	4b0a      	ldr	r3, [pc, #40]	; (61c4 <calculate_temp_target_values+0x3c>)
    619c:	8018      	strh	r0, [r3, #0]
			level_to_light_ctl_temp(target_temperature);
    619e:	f7ff fea9 	bl	5ef4 <level_to_light_ctl_temp>
		light_ctl_srv_user_data.target_temp =
    61a2:	4b09      	ldr	r3, [pc, #36]	; (61c8 <calculate_temp_target_values+0x40>)
		light_ctl_srv_user_data.target_delta_uv =
    61a4:	891a      	ldrh	r2, [r3, #8]
		light_ctl_srv_user_data.target_temp =
    61a6:	80d8      	strh	r0, [r3, #6]
		light_ctl_srv_user_data.target_delta_uv =
    61a8:	815a      	strh	r2, [r3, #10]
    61aa:	e7f2      	b.n	6192 <calculate_temp_target_values+0xa>
		target_temperature = light_ctl_temp_to_level(light_ctl_srv_user_data.target_temp);
    61ac:	4b06      	ldr	r3, [pc, #24]	; (61c8 <calculate_temp_target_values+0x40>)
    61ae:	88d8      	ldrh	r0, [r3, #6]
    61b0:	f7ff fe84 	bl	5ebc <light_ctl_temp_to_level>
    61b4:	4b03      	ldr	r3, [pc, #12]	; (61c4 <calculate_temp_target_values+0x3c>)
    61b6:	8018      	strh	r0, [r3, #0]
		gen_level_srv_s0_user_data.target_level = target_temperature;
    61b8:	4b01      	ldr	r3, [pc, #4]	; (61c0 <calculate_temp_target_values+0x38>)
    61ba:	8058      	strh	r0, [r3, #2]
	if (set_light_ctl_delta_uv_target_value) {
    61bc:	e7e9      	b.n	6192 <calculate_temp_target_values+0xa>
    61be:	bf00      	nop
    61c0:	20007ba0 	.word	0x20007ba0
    61c4:	2000204c 	.word	0x2000204c
    61c8:	20007be0 	.word	0x20007be0

000061cc <ps_set>:

static int ps_set(int argc, char **argv, void *val_ctx)
{
	int len = 0;

	if (argc == 1) {
    61cc:	2801      	cmp	r0, #1
{
    61ce:	b570      	push	{r4, r5, r6, lr}
    61d0:	4604      	mov	r4, r0
    61d2:	460e      	mov	r6, r1
    61d4:	4615      	mov	r5, r2
	if (argc == 1) {
    61d6:	d152      	bne.n	627e <ps_set+0xb2>
		if (!strcmp(argv[0], "rc")) {
    61d8:	492a      	ldr	r1, [pc, #168]	; (6284 <ps_set+0xb8>)
    61da:	6830      	ldr	r0, [r6, #0]
    61dc:	f013 ff48 	bl	1a070 <strcmp>
    61e0:	2800      	cmp	r0, #0
    61e2:	d14a      	bne.n	627a <ps_set+0xae>
			len = settings_val_read_cb(val_ctx, &reset_counter,
    61e4:	4622      	mov	r2, r4
    61e6:	4928      	ldr	r1, [pc, #160]	; (6288 <ps_set+0xbc>)
    61e8:	4628      	mov	r0, r5
    61ea:	f013 fd68 	bl	19cbe <settings_val_read_cb>
    61ee:	4604      	mov	r4, r0
						   sizeof(reset_counter));
		}

		if (!strcmp(argv[0], "gdtt")) {
    61f0:	4926      	ldr	r1, [pc, #152]	; (628c <ps_set+0xc0>)
    61f2:	6830      	ldr	r0, [r6, #0]
    61f4:	f013 ff3c 	bl	1a070 <strcmp>
    61f8:	b928      	cbnz	r0, 6206 <ps_set+0x3a>
			len = settings_val_read_cb(
    61fa:	2201      	movs	r2, #1
    61fc:	4924      	ldr	r1, [pc, #144]	; (6290 <ps_set+0xc4>)
    61fe:	4628      	mov	r0, r5
    6200:	f013 fd5d 	bl	19cbe <settings_val_read_cb>
    6204:	4604      	mov	r4, r0
				val_ctx,
				&gen_def_trans_time_srv_user_data.tt,
				sizeof(gen_def_trans_time_srv_user_data.tt));
		}

		if (!strcmp(argv[0], "gpo")) {
    6206:	4923      	ldr	r1, [pc, #140]	; (6294 <ps_set+0xc8>)
    6208:	6830      	ldr	r0, [r6, #0]
    620a:	f013 ff31 	bl	1a070 <strcmp>
    620e:	b928      	cbnz	r0, 621c <ps_set+0x50>
			len = settings_val_read_cb(
    6210:	2201      	movs	r2, #1
    6212:	4921      	ldr	r1, [pc, #132]	; (6298 <ps_set+0xcc>)
    6214:	4628      	mov	r0, r5
    6216:	f013 fd52 	bl	19cbe <settings_val_read_cb>
    621a:	4604      	mov	r4, r0
			val_ctx,
			&gen_power_onoff_srv_user_data.onpowerup,
			sizeof(gen_power_onoff_srv_user_data.onpowerup));
		}

		if (!strcmp(argv[0], "ltd")) {
    621c:	491f      	ldr	r1, [pc, #124]	; (629c <ps_set+0xd0>)
    621e:	6830      	ldr	r0, [r6, #0]
    6220:	f013 ff26 	bl	1a070 <strcmp>
    6224:	b928      	cbnz	r0, 6232 <ps_set+0x66>
			len = settings_val_read_cb(
    6226:	2204      	movs	r2, #4
    6228:	491d      	ldr	r1, [pc, #116]	; (62a0 <ps_set+0xd4>)
    622a:	4628      	mov	r0, r5
    622c:	f013 fd47 	bl	19cbe <settings_val_read_cb>
    6230:	4604      	mov	r4, r0
			val_ctx,
			&light_ctl_srv_user_data.lightness_temp_def,
			sizeof(light_ctl_srv_user_data.lightness_temp_def));
		}

		if (!strcmp(argv[0], "ltl")) {
    6232:	491c      	ldr	r1, [pc, #112]	; (62a4 <ps_set+0xd8>)
    6234:	6830      	ldr	r0, [r6, #0]
    6236:	f013 ff1b 	bl	1a070 <strcmp>
    623a:	b928      	cbnz	r0, 6248 <ps_set+0x7c>
			len = settings_val_read_cb(
    623c:	2204      	movs	r2, #4
    623e:	491a      	ldr	r1, [pc, #104]	; (62a8 <ps_set+0xdc>)
    6240:	4628      	mov	r0, r5
    6242:	f013 fd3c 	bl	19cbe <settings_val_read_cb>
    6246:	4604      	mov	r4, r0
			val_ctx,
			&light_ctl_srv_user_data.lightness_temp_last,
			sizeof(light_ctl_srv_user_data.lightness_temp_last));
		}

		if (!strcmp(argv[0], "lr")) {
    6248:	4918      	ldr	r1, [pc, #96]	; (62ac <ps_set+0xe0>)
    624a:	6830      	ldr	r0, [r6, #0]
    624c:	f013 ff10 	bl	1a070 <strcmp>
    6250:	b928      	cbnz	r0, 625e <ps_set+0x92>
			len = settings_val_read_cb(
    6252:	2204      	movs	r2, #4
    6254:	4916      	ldr	r1, [pc, #88]	; (62b0 <ps_set+0xe4>)
    6256:	4628      	mov	r0, r5
    6258:	f013 fd31 	bl	19cbe <settings_val_read_cb>
    625c:	4604      	mov	r4, r0
			val_ctx,
			&light_lightness_srv_user_data.lightness_range,
			sizeof(light_lightness_srv_user_data.lightness_range));
		}

		if (!strcmp(argv[0], "tr")) {
    625e:	4915      	ldr	r1, [pc, #84]	; (62b4 <ps_set+0xe8>)
    6260:	6830      	ldr	r0, [r6, #0]
    6262:	f013 ff05 	bl	1a070 <strcmp>
    6266:	b928      	cbnz	r0, 6274 <ps_set+0xa8>
			len = settings_val_read_cb(
    6268:	2204      	movs	r2, #4
    626a:	4913      	ldr	r1, [pc, #76]	; (62b8 <ps_set+0xec>)
    626c:	4628      	mov	r0, r5
    626e:	f013 fd26 	bl	19cbe <settings_val_read_cb>
    6272:	4604      	mov	r4, r0
			val_ctx,
			&light_ctl_srv_user_data.temperature_range,
			sizeof(light_ctl_srv_user_data.temperature_range));
		}

		return (len < 0) ? len : 0;
    6274:	ea04 70e4 	and.w	r0, r4, r4, asr #31
	}

	return -ENOENT;
}
    6278:	bd70      	pop	{r4, r5, r6, pc}
	int len = 0;
    627a:	2400      	movs	r4, #0
    627c:	e7b8      	b.n	61f0 <ps_set+0x24>
	return -ENOENT;
    627e:	f06f 0001 	mvn.w	r0, #1
    6282:	e7f9      	b.n	6278 <ps_set+0xac>
    6284:	0002147b 	.word	0x0002147b
    6288:	200020ac 	.word	0x200020ac
    628c:	00021481 	.word	0x00021481
    6290:	200020a7 	.word	0x200020a7
    6294:	00021489 	.word	0x00021489
    6298:	200020a8 	.word	0x200020a8
    629c:	00021490 	.word	0x00021490
    62a0:	20007bfc 	.word	0x20007bfc
    62a4:	00021497 	.word	0x00021497
    62a8:	20007c04 	.word	0x20007c04
    62ac:	000214c8 	.word	0x000214c8
    62b0:	20007c3c 	.word	0x20007c3c
    62b4:	000214ce 	.word	0x000214ce
    62b8:	20007bf4 	.word	0x20007bf4

000062bc <save_on_flash>:
	storage_id = id;
    62bc:	4b0a      	ldr	r3, [pc, #40]	; (62e8 <save_on_flash+0x2c>)
    62be:	490b      	ldr	r1, [pc, #44]	; (62ec <save_on_flash+0x30>)
    62c0:	7018      	strb	r0, [r3, #0]
    62c2:	f3bf 8f5b 	dmb	ish
    62c6:	e851 3f00 	ldrex	r3, [r1]
    62ca:	f043 0201 	orr.w	r2, r3, #1
    62ce:	e841 2000 	strex	r0, r2, [r1]
    62d2:	2800      	cmp	r0, #0
    62d4:	d1f7      	bne.n	62c6 <save_on_flash+0xa>
    62d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    62da:	07db      	lsls	r3, r3, #31
    62dc:	d403      	bmi.n	62e6 <save_on_flash+0x2a>
		k_queue_append(&work_q->queue, work);
    62de:	3908      	subs	r1, #8
    62e0:	4803      	ldr	r0, [pc, #12]	; (62f0 <save_on_flash+0x34>)
    62e2:	f019 ba0d 	b.w	1f700 <k_queue_append>
}
    62e6:	4770      	bx	lr
    62e8:	200020ad 	.word	0x200020ad
    62ec:	20008528 	.word	0x20008528
    62f0:	20001fc8 	.word	0x20001fc8

000062f4 <storage_work_handler>:
{
    62f4:	b510      	push	{r4, lr}
	switch (storage_id) {
    62f6:	4b27      	ldr	r3, [pc, #156]	; (6394 <storage_work_handler+0xa0>)
    62f8:	781b      	ldrb	r3, [r3, #0]
    62fa:	3b01      	subs	r3, #1
    62fc:	2b06      	cmp	r3, #6
    62fe:	d848      	bhi.n	6392 <storage_work_handler+0x9e>
    6300:	e8df f003 	tbb	[pc, r3]
    6304:	1d0f0b04 	.word	0x1d0f0b04
    6308:	3727      	.short	0x3727
    630a:	3f          	.byte	0x3f
    630b:	00          	.byte	0x00
	settings_save_one("ps/rc", &reset_counter, sizeof(reset_counter));
    630c:	4922      	ldr	r1, [pc, #136]	; (6398 <storage_work_handler+0xa4>)
    630e:	4823      	ldr	r0, [pc, #140]	; (639c <storage_work_handler+0xa8>)
    6310:	2201      	movs	r2, #1
}
    6312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	settings_save_one("ps/tr",
    6316:	f001 b945 	b.w	75a4 <settings_save_one>
	settings_save_one("ps/gdtt", &gen_def_trans_time_srv_user_data.tt,
    631a:	2201      	movs	r2, #1
    631c:	4920      	ldr	r1, [pc, #128]	; (63a0 <storage_work_handler+0xac>)
    631e:	4821      	ldr	r0, [pc, #132]	; (63a4 <storage_work_handler+0xb0>)
    6320:	e7f7      	b.n	6312 <storage_work_handler+0x1e>
	settings_save_one("ps/gpo", &gen_power_onoff_srv_user_data.onpowerup,
    6322:	4c21      	ldr	r4, [pc, #132]	; (63a8 <storage_work_handler+0xb4>)
    6324:	4821      	ldr	r0, [pc, #132]	; (63ac <storage_work_handler+0xb8>)
    6326:	2201      	movs	r2, #1
    6328:	4621      	mov	r1, r4
    632a:	f001 f93b 	bl	75a4 <settings_save_one>
	if (gen_power_onoff_srv_user_data.onpowerup == 0x02) {
    632e:	7823      	ldrb	r3, [r4, #0]
    6330:	2b02      	cmp	r3, #2
    6332:	d12e      	bne.n	6392 <storage_work_handler+0x9e>
		save_on_flash(LIGHTNESS_TEMP_LAST_STATE);
    6334:	2005      	movs	r0, #5
}
    6336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		save_on_flash(LIGHTNESS_TEMP_LAST_STATE);
    633a:	f7ff bfbf 	b.w	62bc <save_on_flash>
	light_ctl_srv_user_data.lightness_temp_def =
    633e:	491c      	ldr	r1, [pc, #112]	; (63b0 <storage_work_handler+0xbc>)
	settings_save_one("ps/ltd", &light_ctl_srv_user_data.lightness_temp_def,
    6340:	481c      	ldr	r0, [pc, #112]	; (63b4 <storage_work_handler+0xc0>)
		(u32_t) ((light_ctl_srv_user_data.lightness_def << 16) |
    6342:	8b0a      	ldrh	r2, [r1, #24]
			 light_ctl_srv_user_data.temp_def);
    6344:	8b4b      	ldrh	r3, [r1, #26]
		(u32_t) ((light_ctl_srv_user_data.lightness_def << 16) |
    6346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	light_ctl_srv_user_data.lightness_temp_def =
    634a:	f841 3f1c 	str.w	r3, [r1, #28]!
	settings_save_one("ps/ltd", &light_ctl_srv_user_data.lightness_temp_def,
    634e:	2204      	movs	r2, #4
    6350:	e7df      	b.n	6312 <storage_work_handler+0x1e>
	light_ctl_srv_user_data.lightness_temp_last =
    6352:	4917      	ldr	r1, [pc, #92]	; (63b0 <storage_work_handler+0xbc>)
	settings_save_one("ps/ltl",
    6354:	4818      	ldr	r0, [pc, #96]	; (63b8 <storage_work_handler+0xc4>)
		(u32_t) ((light_ctl_srv_user_data.lightness << 16) |
    6356:	880a      	ldrh	r2, [r1, #0]
			 light_ctl_srv_user_data.temp);
    6358:	888b      	ldrh	r3, [r1, #4]
		(u32_t) ((light_ctl_srv_user_data.lightness << 16) |
    635a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	light_ctl_srv_user_data.lightness_temp_last =
    635e:	f841 3f24 	str.w	r3, [r1, #36]!
	settings_save_one("ps/ltl",
    6362:	2204      	movs	r2, #4
    6364:	f001 f91e 	bl	75a4 <settings_save_one>
	printk("Light CTL Last values have beed saved !!\n");
    6368:	4814      	ldr	r0, [pc, #80]	; (63bc <storage_work_handler+0xc8>)
}
    636a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Light CTL Last values have beed saved !!\n");
    636e:	f011 bf08 	b.w	18182 <printk>
	light_lightness_srv_user_data.lightness_range =
    6372:	4913      	ldr	r1, [pc, #76]	; (63c0 <storage_work_handler+0xcc>)
	settings_save_one("ps/lr",
    6374:	4813      	ldr	r0, [pc, #76]	; (63c4 <storage_work_handler+0xd0>)
	light_lightness_srv_user_data.lightness_range =
    6376:	f8d1 300e 	ldr.w	r3, [r1, #14]
    637a:	f841 3f14 	str.w	r3, [r1, #20]!
	settings_save_one("ps/lr",
    637e:	2204      	movs	r2, #4
    6380:	e7c7      	b.n	6312 <storage_work_handler+0x1e>
	light_ctl_srv_user_data.temperature_range =
    6382:	490b      	ldr	r1, [pc, #44]	; (63b0 <storage_work_handler+0xbc>)
	settings_save_one("ps/tr",
    6384:	4810      	ldr	r0, [pc, #64]	; (63c8 <storage_work_handler+0xd4>)
	light_ctl_srv_user_data.temperature_range =
    6386:	f8d1 300e 	ldr.w	r3, [r1, #14]
    638a:	f841 3f14 	str.w	r3, [r1, #20]!
	settings_save_one("ps/tr",
    638e:	2204      	movs	r2, #4
    6390:	e7bf      	b.n	6312 <storage_work_handler+0x1e>
}
    6392:	bd10      	pop	{r4, pc}
    6394:	200020ad 	.word	0x200020ad
    6398:	200020ac 	.word	0x200020ac
    639c:	00021478 	.word	0x00021478
    63a0:	200020a7 	.word	0x200020a7
    63a4:	0002147e 	.word	0x0002147e
    63a8:	200020a8 	.word	0x200020a8
    63ac:	00021486 	.word	0x00021486
    63b0:	20007be0 	.word	0x20007be0
    63b4:	0002148d 	.word	0x0002148d
    63b8:	00021494 	.word	0x00021494
    63bc:	0002149b 	.word	0x0002149b
    63c0:	20007c28 	.word	0x20007c28
    63c4:	000214c5 	.word	0x000214c5
    63c8:	000214cb 	.word	0x000214cb

000063cc <ps_settings_init>:
	.name = "ps",
	.h_set = ps_set,
};

int ps_settings_init(void)
{
    63cc:	b510      	push	{r4, lr}
	int err;

	err = settings_subsys_init();
    63ce:	f001 f9b5 	bl	773c <settings_subsys_init>
	if (err) {
    63d2:	4604      	mov	r4, r0
    63d4:	b128      	cbz	r0, 63e2 <ps_settings_init+0x16>
		printk("settings_subsys_init failed (err %d)", err);
    63d6:	4601      	mov	r1, r0
    63d8:	4806      	ldr	r0, [pc, #24]	; (63f4 <ps_settings_init+0x28>)
		return err;
	}

	err = settings_register(&ps_settings);
	if (err) {
		printk("ps_settings_register failed (err %d)", err);
    63da:	f011 fed2 	bl	18182 <printk>
		return err;
	}

	return 0;
}
    63de:	4620      	mov	r0, r4
    63e0:	bd10      	pop	{r4, pc}
	err = settings_register(&ps_settings);
    63e2:	4805      	ldr	r0, [pc, #20]	; (63f8 <ps_settings_init+0x2c>)
    63e4:	f001 f970 	bl	76c8 <settings_register>
	if (err) {
    63e8:	4604      	mov	r4, r0
    63ea:	2800      	cmp	r0, #0
    63ec:	d0f7      	beq.n	63de <ps_settings_init+0x12>
		printk("ps_settings_register failed (err %d)", err);
    63ee:	4601      	mov	r1, r0
    63f0:	4802      	ldr	r0, [pc, #8]	; (63fc <ps_settings_init+0x30>)
    63f2:	e7f2      	b.n	63da <ps_settings_init+0xe>
    63f4:	0002142e 	.word	0x0002142e
    63f8:	20008508 	.word	0x20008508
    63fc:	00021453 	.word	0x00021453

00006400 <onoff_work_handler>:
		 state->transition->counter);
}

/* Timers related handlers & threads (Start) */
static void onoff_work_handler(struct k_work *work)
{
    6400:	b570      	push	{r4, r5, r6, lr}
	struct generic_onoff_state *state = &gen_onoff_srv_root_user_data;

	if (state->transition->just_started) {
    6402:	4e1c      	ldr	r6, [pc, #112]	; (6474 <onoff_work_handler+0x74>)
    6404:	6974      	ldr	r4, [r6, #20]
    6406:	7822      	ldrb	r2, [r4, #0]
    6408:	68a3      	ldr	r3, [r4, #8]
    640a:	4635      	mov	r5, r6
    640c:	b1ba      	cbz	r2, 643e <onoff_work_handler+0x3e>
		state->transition->just_started = false;
    640e:	2200      	movs	r2, #0
    6410:	7022      	strb	r2, [r4, #0]

		if (state->transition->counter == 0) {
    6412:	b95b      	cbnz	r3, 642c <onoff_work_handler+0x2c>
			state_binding(ONOFF, IGNORE_TEMP);
    6414:	210c      	movs	r1, #12
    6416:	2002      	movs	r0, #2

	if (state->transition->counter == 0) {
		state->onoff = state->target_onoff;
		lightness = target_lightness;

		state_binding(IGNORE, IGNORE_TEMP);
    6418:	f7ff fdd6 	bl	5fc8 <state_binding>
		update_light_state();
    641c:	f7fd f992 	bl	3744 <update_light_state>

		k_timer_stop(ptr_timer);
    6420:	4b15      	ldr	r3, [pc, #84]	; (6478 <onoff_work_handler+0x78>)
	}
}
    6422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    6426:	6818      	ldr	r0, [r3, #0]
    6428:	f019 bbf9 	b.w	1fc1e <z_impl_k_timer_stop>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    642c:	f019 fbdb 	bl	1fbe6 <z_impl_k_uptime_get>
			if (state->target_onoff == STATE_ON) {
    6430:	7873      	ldrb	r3, [r6, #1]
    6432:	2b01      	cmp	r3, #1
			state->transition->start_timestamp = k_uptime_get();
    6434:	e9c4 0104 	strd	r0, r1, [r4, #16]
			if (state->target_onoff == STATE_ON) {
    6438:	d100      	bne.n	643c <onoff_work_handler+0x3c>
				state->onoff = STATE_ON;
    643a:	7033      	strb	r3, [r6, #0]
}
    643c:	bd70      	pop	{r4, r5, r6, pc}
	if (state->transition->counter != 0) {
    643e:	4e0f      	ldr	r6, [pc, #60]	; (647c <onoff_work_handler+0x7c>)
    6440:	b93b      	cbnz	r3, 6452 <onoff_work_handler+0x52>
		state->onoff = state->target_onoff;
    6442:	786b      	ldrb	r3, [r5, #1]
    6444:	702b      	strb	r3, [r5, #0]
		lightness = target_lightness;
    6446:	4b0e      	ldr	r3, [pc, #56]	; (6480 <onoff_work_handler+0x80>)
    6448:	881b      	ldrh	r3, [r3, #0]
    644a:	8033      	strh	r3, [r6, #0]
		state_binding(IGNORE, IGNORE_TEMP);
    644c:	210c      	movs	r1, #12
    644e:	2008      	movs	r0, #8
    6450:	e7e2      	b.n	6418 <onoff_work_handler+0x18>
		state->transition->counter--;
    6452:	3b01      	subs	r3, #1
		lightness -= state->tt_delta;
    6454:	692a      	ldr	r2, [r5, #16]
		state->transition->counter--;
    6456:	60a3      	str	r3, [r4, #8]
		lightness -= state->tt_delta;
    6458:	8833      	ldrh	r3, [r6, #0]
		state_binding(IGNORE, IGNORE_TEMP);
    645a:	210c      	movs	r1, #12
		lightness -= state->tt_delta;
    645c:	1a9b      	subs	r3, r3, r2
		state_binding(IGNORE, IGNORE_TEMP);
    645e:	2008      	movs	r0, #8
		lightness -= state->tt_delta;
    6460:	8033      	strh	r3, [r6, #0]
		state_binding(IGNORE, IGNORE_TEMP);
    6462:	f7ff fdb1 	bl	5fc8 <state_binding>
		update_light_state();
    6466:	f7fd f96d 	bl	3744 <update_light_state>
	if (state->transition->counter == 0) {
    646a:	696b      	ldr	r3, [r5, #20]
    646c:	689b      	ldr	r3, [r3, #8]
    646e:	2b00      	cmp	r3, #0
    6470:	d1e4      	bne.n	643c <onoff_work_handler+0x3c>
    6472:	e7e6      	b.n	6442 <onoff_work_handler+0x42>
    6474:	20007bc8 	.word	0x20007bc8
    6478:	20008580 	.word	0x20008580
    647c:	20002048 	.word	0x20002048
    6480:	2000204a 	.word	0x2000204a

00006484 <level_lightness_work_handler>:

static void level_lightness_work_handler(struct k_work *work)
{
    6484:	b570      	push	{r4, r5, r6, lr}
	u8_t level;
	struct generic_level_state *state = &gen_level_srv_root_user_data;

	switch (transition_type) {
    6486:	4b1c      	ldr	r3, [pc, #112]	; (64f8 <level_lightness_work_handler+0x74>)
    6488:	781b      	ldrb	r3, [r3, #0]
    648a:	2b01      	cmp	r3, #1
    648c:	d004      	beq.n	6498 <level_lightness_work_handler+0x14>
    648e:	b10b      	cbz	r3, 6494 <level_lightness_work_handler+0x10>
    6490:	2b02      	cmp	r3, #2
    6492:	d11a      	bne.n	64ca <level_lightness_work_handler+0x46>
	case LEVEL_TT:
		level = LEVEL;
    6494:	2603      	movs	r6, #3
    6496:	e000      	b.n	649a <level_lightness_work_handler+0x16>
		break;
	case LEVEL_TT_DELTA:
		level = DELTA_LEVEL;
    6498:	2604      	movs	r6, #4
		break;
	default:
		return;
	}

	if (state->transition->just_started) {
    649a:	4c18      	ldr	r4, [pc, #96]	; (64fc <level_lightness_work_handler+0x78>)
    649c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    649e:	782a      	ldrb	r2, [r5, #0]
    64a0:	68ab      	ldr	r3, [r5, #8]
    64a2:	b19a      	cbz	r2, 64cc <level_lightness_work_handler+0x48>
		state->transition->just_started = false;
    64a4:	2200      	movs	r2, #0
    64a6:	702a      	strb	r2, [r5, #0]

		if (state->transition->counter == 0) {
    64a8:	b95b      	cbnz	r3, 64c2 <level_lightness_work_handler+0x3e>
	}

	if (state->transition->counter == 0) {
		state->level = state->target_level;

		state_binding(level, IGNORE_TEMP);
    64aa:	4630      	mov	r0, r6
    64ac:	210c      	movs	r1, #12
    64ae:	f7ff fd8b 	bl	5fc8 <state_binding>
		update_light_state();
    64b2:	f7fd f947 	bl	3744 <update_light_state>

		k_timer_stop(ptr_timer);
    64b6:	4b12      	ldr	r3, [pc, #72]	; (6500 <level_lightness_work_handler+0x7c>)
	}
}
    64b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    64bc:	6818      	ldr	r0, [r3, #0]
    64be:	f019 bbae 	b.w	1fc1e <z_impl_k_timer_stop>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    64c2:	f019 fb90 	bl	1fbe6 <z_impl_k_uptime_get>
			state->transition->start_timestamp = k_uptime_get();
    64c6:	e9c5 0104 	strd	r0, r1, [r5, #16]
}
    64ca:	bd70      	pop	{r4, r5, r6, pc}
	if (state->transition->counter != 0) {
    64cc:	b913      	cbnz	r3, 64d4 <level_lightness_work_handler+0x50>
		state->level = state->target_level;
    64ce:	8863      	ldrh	r3, [r4, #2]
    64d0:	8023      	strh	r3, [r4, #0]
    64d2:	e7ea      	b.n	64aa <level_lightness_work_handler+0x26>
		state->transition->counter--;
    64d4:	3b01      	subs	r3, #1
		state->level -= state->tt_delta;
    64d6:	6a22      	ldr	r2, [r4, #32]
		state->transition->counter--;
    64d8:	60ab      	str	r3, [r5, #8]
		state->level -= state->tt_delta;
    64da:	8823      	ldrh	r3, [r4, #0]
		state_binding(level, IGNORE_TEMP);
    64dc:	210c      	movs	r1, #12
		state->level -= state->tt_delta;
    64de:	1a9b      	subs	r3, r3, r2
		state_binding(level, IGNORE_TEMP);
    64e0:	4630      	mov	r0, r6
		state->level -= state->tt_delta;
    64e2:	8023      	strh	r3, [r4, #0]
		state_binding(level, IGNORE_TEMP);
    64e4:	f7ff fd70 	bl	5fc8 <state_binding>
		update_light_state();
    64e8:	f7fd f92c 	bl	3744 <update_light_state>
	if (state->transition->counter == 0) {
    64ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    64ee:	689b      	ldr	r3, [r3, #8]
    64f0:	2b00      	cmp	r3, #0
    64f2:	d1ea      	bne.n	64ca <level_lightness_work_handler+0x46>
    64f4:	e7eb      	b.n	64ce <level_lightness_work_handler+0x4a>
    64f6:	bf00      	nop
    64f8:	200020af 	.word	0x200020af
    64fc:	20007b78 	.word	0x20007b78
    6500:	20008580 	.word	0x20008580

00006504 <light_ctl_work_handler>:
		k_timer_stop(ptr_timer);
	}
}

static void light_ctl_work_handler(struct k_work *work)
{
    6504:	b538      	push	{r3, r4, r5, lr}
	struct light_ctl_state *state = &light_ctl_srv_user_data;

	if (state->transition->just_started) {
    6506:	4c1d      	ldr	r4, [pc, #116]	; (657c <light_ctl_work_handler+0x78>)
    6508:	6c65      	ldr	r5, [r4, #68]	; 0x44
    650a:	782a      	ldrb	r2, [r5, #0]
    650c:	68ab      	ldr	r3, [r5, #8]
    650e:	b19a      	cbz	r2, 6538 <light_ctl_work_handler+0x34>
		state->transition->just_started = false;
    6510:	2200      	movs	r2, #0
    6512:	702a      	strb	r2, [r5, #0]

		if (state->transition->counter == 0) {
    6514:	b95b      	cbnz	r3, 652e <light_ctl_work_handler+0x2a>
	if (state->transition->counter == 0) {
		state->lightness = state->target_lightness;
		state->temp = state->target_temp;
		state->delta_uv = state->target_delta_uv;

		state_binding(CTL, CTL_TEMP);
    6516:	2007      	movs	r0, #7
    6518:	210b      	movs	r1, #11
    651a:	f7ff fd55 	bl	5fc8 <state_binding>
		update_light_state();
    651e:	f7fd f911 	bl	3744 <update_light_state>

		k_timer_stop(ptr_timer);
    6522:	4b17      	ldr	r3, [pc, #92]	; (6580 <light_ctl_work_handler+0x7c>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    6524:	6818      	ldr	r0, [r3, #0]
	}
}
    6526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    652a:	f019 bb78 	b.w	1fc1e <z_impl_k_timer_stop>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    652e:	f019 fb5a 	bl	1fbe6 <z_impl_k_uptime_get>
			state->transition->start_timestamp = k_uptime_get();
    6532:	e9c5 0104 	strd	r0, r1, [r5, #16]
}
    6536:	bd38      	pop	{r3, r4, r5, pc}
	if (state->transition->counter != 0) {
    6538:	b933      	cbnz	r3, 6548 <light_ctl_work_handler+0x44>
		state->lightness = state->target_lightness;
    653a:	8863      	ldrh	r3, [r4, #2]
    653c:	8023      	strh	r3, [r4, #0]
		state->temp = state->target_temp;
    653e:	88e3      	ldrh	r3, [r4, #6]
    6540:	80a3      	strh	r3, [r4, #4]
		state->delta_uv = state->target_delta_uv;
    6542:	8963      	ldrh	r3, [r4, #10]
    6544:	8123      	strh	r3, [r4, #8]
    6546:	e7e6      	b.n	6516 <light_ctl_work_handler+0x12>
		state->transition->counter--;
    6548:	3b01      	subs	r3, #1
    654a:	60ab      	str	r3, [r5, #8]
		state->lightness -= state->tt_delta_lightness;
    654c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    654e:	8823      	ldrh	r3, [r4, #0]
    6550:	1a9b      	subs	r3, r3, r2
    6552:	8023      	strh	r3, [r4, #0]
		state->temp -= state->tt_delta_temp;
    6554:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6556:	88a3      	ldrh	r3, [r4, #4]
    6558:	1a9b      	subs	r3, r3, r2
    655a:	80a3      	strh	r3, [r4, #4]
		state->delta_uv -= state->tt_delta_duv;
    655c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    655e:	8923      	ldrh	r3, [r4, #8]
		state_binding(CTL, CTL_TEMP);
    6560:	210b      	movs	r1, #11
		state->delta_uv -= state->tt_delta_duv;
    6562:	1a9b      	subs	r3, r3, r2
		state_binding(CTL, CTL_TEMP);
    6564:	2007      	movs	r0, #7
		state->delta_uv -= state->tt_delta_duv;
    6566:	8123      	strh	r3, [r4, #8]
		state_binding(CTL, CTL_TEMP);
    6568:	f7ff fd2e 	bl	5fc8 <state_binding>
		update_light_state();
    656c:	f7fd f8ea 	bl	3744 <update_light_state>
	if (state->transition->counter == 0) {
    6570:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6572:	689b      	ldr	r3, [r3, #8]
    6574:	2b00      	cmp	r3, #0
    6576:	d1de      	bne.n	6536 <light_ctl_work_handler+0x32>
    6578:	e7df      	b.n	653a <light_ctl_work_handler+0x36>
    657a:	bf00      	nop
    657c:	20007be0 	.word	0x20007be0
    6580:	20008580 	.word	0x20008580

00006584 <light_ctl_temp_work_handler>:

static void light_ctl_temp_work_handler(struct k_work *work)
{
    6584:	b538      	push	{r3, r4, r5, lr}
	struct light_ctl_state *state = &light_ctl_srv_user_data;

	if (state->transition->just_started) {
    6586:	4c1a      	ldr	r4, [pc, #104]	; (65f0 <light_ctl_temp_work_handler+0x6c>)
    6588:	6c65      	ldr	r5, [r4, #68]	; 0x44
    658a:	782a      	ldrb	r2, [r5, #0]
    658c:	68ab      	ldr	r3, [r5, #8]
    658e:	b19a      	cbz	r2, 65b8 <light_ctl_temp_work_handler+0x34>
		state->transition->just_started = false;
    6590:	2200      	movs	r2, #0
    6592:	702a      	strb	r2, [r5, #0]

		if (state->transition->counter == 0) {
    6594:	b95b      	cbnz	r3, 65ae <light_ctl_temp_work_handler+0x2a>

	if (state->transition->counter == 0) {
		state->temp = state->target_temp;
		state->delta_uv = state->target_delta_uv;

		state_binding(IGNORE, CTL_TEMP);
    6596:	2008      	movs	r0, #8
    6598:	210b      	movs	r1, #11
    659a:	f7ff fd15 	bl	5fc8 <state_binding>
		update_light_state();
    659e:	f7fd f8d1 	bl	3744 <update_light_state>

		k_timer_stop(ptr_timer);
    65a2:	4b14      	ldr	r3, [pc, #80]	; (65f4 <light_ctl_temp_work_handler+0x70>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    65a4:	6818      	ldr	r0, [r3, #0]
	}
}
    65a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    65aa:	f019 bb38 	b.w	1fc1e <z_impl_k_timer_stop>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    65ae:	f019 fb1a 	bl	1fbe6 <z_impl_k_uptime_get>
			state->transition->start_timestamp = k_uptime_get();
    65b2:	e9c5 0104 	strd	r0, r1, [r5, #16]
}
    65b6:	bd38      	pop	{r3, r4, r5, pc}
	if (state->transition->counter != 0) {
    65b8:	b923      	cbnz	r3, 65c4 <light_ctl_temp_work_handler+0x40>
		state->temp = state->target_temp;
    65ba:	88e3      	ldrh	r3, [r4, #6]
    65bc:	80a3      	strh	r3, [r4, #4]
		state->delta_uv = state->target_delta_uv;
    65be:	8963      	ldrh	r3, [r4, #10]
    65c0:	8123      	strh	r3, [r4, #8]
    65c2:	e7e8      	b.n	6596 <light_ctl_temp_work_handler+0x12>
		state->transition->counter--;
    65c4:	3b01      	subs	r3, #1
    65c6:	60ab      	str	r3, [r5, #8]
		state->temp -= state->tt_delta_temp;
    65c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    65ca:	88a3      	ldrh	r3, [r4, #4]
    65cc:	1a9b      	subs	r3, r3, r2
    65ce:	80a3      	strh	r3, [r4, #4]
		state->delta_uv -= state->tt_delta_duv;
    65d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    65d2:	8923      	ldrh	r3, [r4, #8]
		state_binding(IGNORE, CTL_TEMP);
    65d4:	210b      	movs	r1, #11
		state->delta_uv -= state->tt_delta_duv;
    65d6:	1a9b      	subs	r3, r3, r2
		state_binding(IGNORE, CTL_TEMP);
    65d8:	2008      	movs	r0, #8
		state->delta_uv -= state->tt_delta_duv;
    65da:	8123      	strh	r3, [r4, #8]
		state_binding(IGNORE, CTL_TEMP);
    65dc:	f7ff fcf4 	bl	5fc8 <state_binding>
		update_light_state();
    65e0:	f7fd f8b0 	bl	3744 <update_light_state>
	if (state->transition->counter == 0) {
    65e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    65e6:	689b      	ldr	r3, [r3, #8]
    65e8:	2b00      	cmp	r3, #0
    65ea:	d1e4      	bne.n	65b6 <light_ctl_temp_work_handler+0x32>
    65ec:	e7e5      	b.n	65ba <light_ctl_temp_work_handler+0x36>
    65ee:	bf00      	nop
    65f0:	20007be0 	.word	0x20007be0
    65f4:	20008580 	.word	0x20008580

000065f8 <tt_values_calculator>:
{
    65f8:	b510      	push	{r4, lr}
	resolution = (transition->tt >> 6);
    65fa:	7843      	ldrb	r3, [r0, #1]
{
    65fc:	4604      	mov	r4, r0
	if (steps_multiplier == 0) {
    65fe:	f013 003f 	ands.w	r0, r3, #63	; 0x3f
    6602:	d01c      	beq.n	663e <tt_values_calculator+0x46>
	resolution = (transition->tt >> 6);
    6604:	099b      	lsrs	r3, r3, #6
	switch (resolution) {
    6606:	2b02      	cmp	r3, #2
    6608:	d01e      	beq.n	6648 <tt_values_calculator+0x50>
    660a:	2b03      	cmp	r3, #3
    660c:	d01f      	beq.n	664e <tt_values_calculator+0x56>
    660e:	2b01      	cmp	r3, #1
    6610:	d016      	beq.n	6640 <tt_values_calculator+0x48>
		transition->total_duration = steps_multiplier * 100;
    6612:	2364      	movs	r3, #100	; 0x64
    6614:	fb10 f003 	smulbb	r0, r0, r3
		transition->total_duration = steps_multiplier * 600000;
    6618:	60e0      	str	r0, [r4, #12]
	transition->counter = ((float) transition->total_duration / 100);
    661a:	68e0      	ldr	r0, [r4, #12]
    661c:	f7fa f85a 	bl	6d4 <__aeabi_ui2f>
    6620:	490c      	ldr	r1, [pc, #48]	; (6654 <tt_values_calculator+0x5c>)
    6622:	f7fa f963 	bl	8ec <__aeabi_fdiv>
    6626:	f7fa fa99 	bl	b5c <__aeabi_f2uiz>
	if (transition->counter > DEVICE_SPECIFIC_RESOLUTION) {
    662a:	280a      	cmp	r0, #10
		transition->counter = DEVICE_SPECIFIC_RESOLUTION;
    662c:	bf84      	itt	hi
    662e:	230a      	movhi	r3, #10
    6630:	60a3      	strhi	r3, [r4, #8]
	ptr_counter = &transition->counter;
    6632:	4b09      	ldr	r3, [pc, #36]	; (6658 <tt_values_calculator+0x60>)
	transition->counter = ((float) transition->total_duration / 100);
    6634:	bf98      	it	ls
    6636:	60a0      	strls	r0, [r4, #8]
	ptr_counter = &transition->counter;
    6638:	3408      	adds	r4, #8
    663a:	601c      	str	r4, [r3, #0]
    663c:	2001      	movs	r0, #1
}
    663e:	bd10      	pop	{r4, pc}
		transition->total_duration = steps_multiplier * 1000;
    6640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		transition->total_duration = steps_multiplier * 600000;
    6644:	4358      	muls	r0, r3
    6646:	e7e7      	b.n	6618 <tt_values_calculator+0x20>
		transition->total_duration = steps_multiplier * 10000;
    6648:	f242 7310 	movw	r3, #10000	; 0x2710
    664c:	e7fa      	b.n	6644 <tt_values_calculator+0x4c>
		transition->total_duration = steps_multiplier * 600000;
    664e:	4b03      	ldr	r3, [pc, #12]	; (665c <tt_values_calculator+0x64>)
    6650:	e7f8      	b.n	6644 <tt_values_calculator+0x4c>
    6652:	bf00      	nop
    6654:	42c80000 	.word	0x42c80000
    6658:	200006b8 	.word	0x200006b8
    665c:	000927c0 	.word	0x000927c0

00006660 <level_temp_work_handler>:
{
    6660:	b538      	push	{r3, r4, r5, lr}
	switch (transition_type) {
    6662:	4b19      	ldr	r3, [pc, #100]	; (66c8 <level_temp_work_handler+0x68>)
    6664:	781b      	ldrb	r3, [r3, #0]
    6666:	3b03      	subs	r3, #3
    6668:	2b02      	cmp	r3, #2
    666a:	d817      	bhi.n	669c <level_temp_work_handler+0x3c>
	if (state->transition->just_started) {
    666c:	4c17      	ldr	r4, [pc, #92]	; (66cc <level_temp_work_handler+0x6c>)
    666e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    6670:	782a      	ldrb	r2, [r5, #0]
    6672:	68ab      	ldr	r3, [r5, #8]
    6674:	b19a      	cbz	r2, 669e <level_temp_work_handler+0x3e>
		state->transition->just_started = false;
    6676:	2200      	movs	r2, #0
    6678:	702a      	strb	r2, [r5, #0]
		if (state->transition->counter == 0) {
    667a:	b95b      	cbnz	r3, 6694 <level_temp_work_handler+0x34>
		state_binding(IGNORE, LEVEL_TEMP);
    667c:	2008      	movs	r0, #8
    667e:	210a      	movs	r1, #10
    6680:	f7ff fca2 	bl	5fc8 <state_binding>
		update_light_state();
    6684:	f7fd f85e 	bl	3744 <update_light_state>
		k_timer_stop(ptr_timer);
    6688:	4b11      	ldr	r3, [pc, #68]	; (66d0 <level_temp_work_handler+0x70>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    668a:	6818      	ldr	r0, [r3, #0]
}
    668c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6690:	f019 bac5 	b.w	1fc1e <z_impl_k_timer_stop>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    6694:	f019 faa7 	bl	1fbe6 <z_impl_k_uptime_get>
			state->transition->start_timestamp = k_uptime_get();
    6698:	e9c5 0104 	strd	r0, r1, [r5, #16]
}
    669c:	bd38      	pop	{r3, r4, r5, pc}
	if (state->transition->counter != 0) {
    669e:	b913      	cbnz	r3, 66a6 <level_temp_work_handler+0x46>
		state->level = state->target_level;
    66a0:	8863      	ldrh	r3, [r4, #2]
    66a2:	8023      	strh	r3, [r4, #0]
    66a4:	e7ea      	b.n	667c <level_temp_work_handler+0x1c>
		state->transition->counter--;
    66a6:	3b01      	subs	r3, #1
		state->level -= state->tt_delta;
    66a8:	6a22      	ldr	r2, [r4, #32]
		state->transition->counter--;
    66aa:	60ab      	str	r3, [r5, #8]
		state->level -= state->tt_delta;
    66ac:	8823      	ldrh	r3, [r4, #0]
		state_binding(IGNORE, LEVEL_TEMP);
    66ae:	210a      	movs	r1, #10
		state->level -= state->tt_delta;
    66b0:	1a9b      	subs	r3, r3, r2
		state_binding(IGNORE, LEVEL_TEMP);
    66b2:	2008      	movs	r0, #8
		state->level -= state->tt_delta;
    66b4:	8023      	strh	r3, [r4, #0]
		state_binding(IGNORE, LEVEL_TEMP);
    66b6:	f7ff fc87 	bl	5fc8 <state_binding>
		update_light_state();
    66ba:	f7fd f843 	bl	3744 <update_light_state>
	if (state->transition->counter == 0) {
    66be:	6a63      	ldr	r3, [r4, #36]	; 0x24
    66c0:	689b      	ldr	r3, [r3, #8]
    66c2:	2b00      	cmp	r3, #0
    66c4:	d1ea      	bne.n	669c <level_temp_work_handler+0x3c>
    66c6:	e7eb      	b.n	66a0 <level_temp_work_handler+0x40>
    66c8:	200020af 	.word	0x200020af
    66cc:	20007ba0 	.word	0x20007ba0
    66d0:	20008580 	.word	0x20008580

000066d4 <light_lightness_actual_work_handler>:
{
    66d4:	b538      	push	{r3, r4, r5, lr}
	if (state->transition->just_started) {
    66d6:	4c17      	ldr	r4, [pc, #92]	; (6734 <light_lightness_actual_work_handler+0x60>)
    66d8:	6b25      	ldr	r5, [r4, #48]	; 0x30
    66da:	782a      	ldrb	r2, [r5, #0]
    66dc:	68ab      	ldr	r3, [r5, #8]
    66de:	b19a      	cbz	r2, 6708 <light_lightness_actual_work_handler+0x34>
		state->transition->just_started = false;
    66e0:	2200      	movs	r2, #0
    66e2:	702a      	strb	r2, [r5, #0]
		if (state->transition->counter == 0) {
    66e4:	b95b      	cbnz	r3, 66fe <light_lightness_actual_work_handler+0x2a>
		state_binding(ACTUAL, IGNORE_TEMP);
    66e6:	2005      	movs	r0, #5
    66e8:	210c      	movs	r1, #12
    66ea:	f7ff fc6d 	bl	5fc8 <state_binding>
		update_light_state();
    66ee:	f7fd f829 	bl	3744 <update_light_state>
		k_timer_stop(ptr_timer);
    66f2:	4b11      	ldr	r3, [pc, #68]	; (6738 <light_lightness_actual_work_handler+0x64>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    66f4:	6818      	ldr	r0, [r3, #0]
}
    66f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    66fa:	f019 ba90 	b.w	1fc1e <z_impl_k_timer_stop>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    66fe:	f019 fa72 	bl	1fbe6 <z_impl_k_uptime_get>
			state->transition->start_timestamp = k_uptime_get();
    6702:	e9c5 0104 	strd	r0, r1, [r5, #16]
}
    6706:	bd38      	pop	{r3, r4, r5, pc}
	if (state->transition->counter != 0) {
    6708:	b913      	cbnz	r3, 6710 <light_lightness_actual_work_handler+0x3c>
		state->actual = state->target_actual;
    670a:	88e3      	ldrh	r3, [r4, #6]
    670c:	80a3      	strh	r3, [r4, #4]
    670e:	e7ea      	b.n	66e6 <light_lightness_actual_work_handler+0x12>
		state->transition->counter--;
    6710:	3b01      	subs	r3, #1
		state->actual -= state->tt_delta_actual;
    6712:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		state->transition->counter--;
    6714:	60ab      	str	r3, [r5, #8]
		state->actual -= state->tt_delta_actual;
    6716:	88a3      	ldrh	r3, [r4, #4]
		state_binding(ACTUAL, IGNORE_TEMP);
    6718:	210c      	movs	r1, #12
		state->actual -= state->tt_delta_actual;
    671a:	1a9b      	subs	r3, r3, r2
		state_binding(ACTUAL, IGNORE_TEMP);
    671c:	2005      	movs	r0, #5
		state->actual -= state->tt_delta_actual;
    671e:	80a3      	strh	r3, [r4, #4]
		state_binding(ACTUAL, IGNORE_TEMP);
    6720:	f7ff fc52 	bl	5fc8 <state_binding>
		update_light_state();
    6724:	f7fd f80e 	bl	3744 <update_light_state>
	if (state->transition->counter == 0) {
    6728:	6b23      	ldr	r3, [r4, #48]	; 0x30
    672a:	689b      	ldr	r3, [r3, #8]
    672c:	2b00      	cmp	r3, #0
    672e:	d1ea      	bne.n	6706 <light_lightness_actual_work_handler+0x32>
    6730:	e7eb      	b.n	670a <light_lightness_actual_work_handler+0x36>
    6732:	bf00      	nop
    6734:	20007c28 	.word	0x20007c28
    6738:	20008580 	.word	0x20008580

0000673c <light_lightness_linear_work_handler>:
{
    673c:	b538      	push	{r3, r4, r5, lr}
	if (state->transition->just_started) {
    673e:	4c17      	ldr	r4, [pc, #92]	; (679c <light_lightness_linear_work_handler+0x60>)
    6740:	6b25      	ldr	r5, [r4, #48]	; 0x30
    6742:	782a      	ldrb	r2, [r5, #0]
    6744:	68ab      	ldr	r3, [r5, #8]
    6746:	b19a      	cbz	r2, 6770 <light_lightness_linear_work_handler+0x34>
		state->transition->just_started = false;
    6748:	2200      	movs	r2, #0
    674a:	702a      	strb	r2, [r5, #0]
		if (state->transition->counter == 0) {
    674c:	b95b      	cbnz	r3, 6766 <light_lightness_linear_work_handler+0x2a>
		state_binding(LINEAR, IGNORE_TEMP);
    674e:	2006      	movs	r0, #6
    6750:	210c      	movs	r1, #12
    6752:	f7ff fc39 	bl	5fc8 <state_binding>
		update_light_state();
    6756:	f7fc fff5 	bl	3744 <update_light_state>
		k_timer_stop(ptr_timer);
    675a:	4b11      	ldr	r3, [pc, #68]	; (67a0 <light_lightness_linear_work_handler+0x64>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer)
    675c:	6818      	ldr	r0, [r3, #0]
}
    675e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6762:	f019 ba5c 	b.w	1fc1e <z_impl_k_timer_stop>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    6766:	f019 fa3e 	bl	1fbe6 <z_impl_k_uptime_get>
			state->transition->start_timestamp = k_uptime_get();
    676a:	e9c5 0104 	strd	r0, r1, [r5, #16]
}
    676e:	bd38      	pop	{r3, r4, r5, pc}
	if (state->transition->counter != 0) {
    6770:	b913      	cbnz	r3, 6778 <light_lightness_linear_work_handler+0x3c>
		state->linear = state->target_linear;
    6772:	8863      	ldrh	r3, [r4, #2]
    6774:	8023      	strh	r3, [r4, #0]
    6776:	e7ea      	b.n	674e <light_lightness_linear_work_handler+0x12>
		state->transition->counter--;
    6778:	3b01      	subs	r3, #1
		state->linear -= state->tt_delta_linear;
    677a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		state->transition->counter--;
    677c:	60ab      	str	r3, [r5, #8]
		state->linear -= state->tt_delta_linear;
    677e:	8823      	ldrh	r3, [r4, #0]
		state_binding(LINEAR, IGNORE_TEMP);
    6780:	210c      	movs	r1, #12
		state->linear -= state->tt_delta_linear;
    6782:	1a9b      	subs	r3, r3, r2
		state_binding(LINEAR, IGNORE_TEMP);
    6784:	2006      	movs	r0, #6
		state->linear -= state->tt_delta_linear;
    6786:	8023      	strh	r3, [r4, #0]
		state_binding(LINEAR, IGNORE_TEMP);
    6788:	f7ff fc1e 	bl	5fc8 <state_binding>
		update_light_state();
    678c:	f7fc ffda 	bl	3744 <update_light_state>
	if (state->transition->counter == 0) {
    6790:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6792:	689b      	ldr	r3, [r3, #8]
    6794:	2b00      	cmp	r3, #0
    6796:	d1ea      	bne.n	676e <light_lightness_linear_work_handler+0x32>
    6798:	e7eb      	b.n	6772 <light_lightness_linear_work_handler+0x36>
    679a:	bf00      	nop
    679c:	20007c28 	.word	0x20007c28
    67a0:	20008580 	.word	0x20008580

000067a4 <k_work_submit>:
 *
 * @return N/A
 * @req K-WORK-001
 */
static inline void k_work_submit(struct k_work *work)
{
    67a4:	4601      	mov	r1, r0
    67a6:	f100 0308 	add.w	r3, r0, #8
    67aa:	f3bf 8f5b 	dmb	ish
    67ae:	e853 2f00 	ldrex	r2, [r3]
    67b2:	f042 0001 	orr.w	r0, r2, #1
    67b6:	e843 0c00 	strex	ip, r0, [r3]
    67ba:	f1bc 0f00 	cmp.w	ip, #0
    67be:	d1f6      	bne.n	67ae <k_work_submit+0xa>
    67c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    67c4:	07d3      	lsls	r3, r2, #31
    67c6:	d402      	bmi.n	67ce <k_work_submit+0x2a>
		k_queue_append(&work_q->queue, work);
    67c8:	4801      	ldr	r0, [pc, #4]	; (67d0 <k_work_submit+0x2c>)
    67ca:	f018 bf99 	b.w	1f700 <k_queue_append>
	k_work_submit_to_queue(&k_sys_work_q, work);
}
    67ce:	4770      	bx	lr
    67d0:	20001fc8 	.word	0x20001fc8

000067d4 <onoff_tt_handler>:
K_WORK_DEFINE(light_ctl_work, light_ctl_work_handler);
K_WORK_DEFINE(light_ctl_temp_work, light_ctl_temp_work_handler);

static void onoff_tt_handler(struct k_timer *dummy)
{
	k_work_submit(&onoff_work);
    67d4:	4801      	ldr	r0, [pc, #4]	; (67dc <onoff_tt_handler+0x8>)
    67d6:	f7ff bfe5 	b.w	67a4 <k_work_submit>
    67da:	bf00      	nop
    67dc:	20008574 	.word	0x20008574

000067e0 <level_lightness_tt_handler>:
}

static void level_lightness_tt_handler(struct k_timer *dummy)
{
	k_work_submit(&level_lightness_work);
    67e0:	4801      	ldr	r0, [pc, #4]	; (67e8 <level_lightness_tt_handler+0x8>)
    67e2:	f7ff bfdf 	b.w	67a4 <k_work_submit>
    67e6:	bf00      	nop
    67e8:	2000852c 	.word	0x2000852c

000067ec <level_temp_tt_handler>:
}

static void level_temp_tt_handler(struct k_timer *dummy)
{
	k_work_submit(&level_temp_work);
    67ec:	4801      	ldr	r0, [pc, #4]	; (67f4 <level_temp_tt_handler+0x8>)
    67ee:	f7ff bfd9 	b.w	67a4 <k_work_submit>
    67f2:	bf00      	nop
    67f4:	20008538 	.word	0x20008538

000067f8 <light_lightness_actual_tt_handler>:
}

static void light_lightness_actual_tt_handler(struct k_timer *dummy)
{
	k_work_submit(&light_lightness_actual_work);
    67f8:	4801      	ldr	r0, [pc, #4]	; (6800 <light_lightness_actual_tt_handler+0x8>)
    67fa:	f7ff bfd3 	b.w	67a4 <k_work_submit>
    67fe:	bf00      	nop
    6800:	2000855c 	.word	0x2000855c

00006804 <light_lightness_linear_tt_handler>:
}

static void light_lightness_linear_tt_handler(struct k_timer *dummy)
{
	k_work_submit(&light_lightness_linear_work);
    6804:	4801      	ldr	r0, [pc, #4]	; (680c <light_lightness_linear_tt_handler+0x8>)
    6806:	f7ff bfcd 	b.w	67a4 <k_work_submit>
    680a:	bf00      	nop
    680c:	20008568 	.word	0x20008568

00006810 <light_ctl_tt_handler>:
}

static void light_ctl_tt_handler(struct k_timer *dummy)
{
	k_work_submit(&light_ctl_work);
    6810:	4801      	ldr	r0, [pc, #4]	; (6818 <light_ctl_tt_handler+0x8>)
    6812:	f7ff bfc7 	b.w	67a4 <k_work_submit>
    6816:	bf00      	nop
    6818:	20008550 	.word	0x20008550

0000681c <light_ctl_temp_tt_handler>:
}

static void light_ctl_temp_tt_handler(struct k_timer *dummy)
{
	k_work_submit(&light_ctl_temp_work);
    681c:	4801      	ldr	r0, [pc, #4]	; (6824 <light_ctl_temp_tt_handler+0x8>)
    681e:	f7ff bfc1 	b.w	67a4 <k_work_submit>
    6822:	bf00      	nop
    6824:	20008544 	.word	0x20008544

00006828 <calculate_rt>:
{
    6828:	b538      	push	{r3, r4, r5, lr}
	if (transition->just_started) {
    682a:	7805      	ldrb	r5, [r0, #0]
{
    682c:	4604      	mov	r4, r0
	if (transition->just_started) {
    682e:	b115      	cbz	r5, 6836 <calculate_rt+0xe>
		transition->rt = transition->tt;
    6830:	7843      	ldrb	r3, [r0, #1]
    6832:	7083      	strb	r3, [r0, #2]
}
    6834:	bd38      	pop	{r3, r4, r5, pc}
    6836:	f019 f9d6 	bl	1fbe6 <z_impl_k_uptime_get>
		duration_remainder = transition->total_duration -
    683a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    683e:	4413      	add	r3, r2
    6840:	1a18      	subs	r0, r3, r0
		if (duration_remainder > 620000) {
    6842:	4b16      	ldr	r3, [pc, #88]	; (689c <calculate_rt+0x74>)
    6844:	4298      	cmp	r0, r3
    6846:	dd08      	ble.n	685a <calculate_rt+0x32>
			steps = duration_remainder / 600000;
    6848:	4b15      	ldr	r3, [pc, #84]	; (68a0 <calculate_rt+0x78>)
    684a:	fb90 f0f3 	sdiv	r0, r0, r3
			resolution = 0x03;
    684e:	2303      	movs	r3, #3
			steps = duration_remainder / 600000;
    6850:	b2c0      	uxtb	r0, r0
		transition->rt = (resolution << 6) | steps;
    6852:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
    6856:	70a0      	strb	r0, [r4, #2]
}
    6858:	e7ec      	b.n	6834 <calculate_rt+0xc>
		} else if (duration_remainder > 62000) {
    685a:	f24f 2330 	movw	r3, #62000	; 0xf230
    685e:	4298      	cmp	r0, r3
    6860:	dd06      	ble.n	6870 <calculate_rt+0x48>
			steps = duration_remainder / 10000;
    6862:	f242 7310 	movw	r3, #10000	; 0x2710
    6866:	fb90 f0f3 	sdiv	r0, r0, r3
			resolution = 0x02;
    686a:	2302      	movs	r3, #2
			steps = duration_remainder / 10000;
    686c:	b2c0      	uxtb	r0, r0
    686e:	e7f0      	b.n	6852 <calculate_rt+0x2a>
		} else if (duration_remainder > 6200) {
    6870:	f641 0338 	movw	r3, #6200	; 0x1838
    6874:	4298      	cmp	r0, r3
    6876:	dd06      	ble.n	6886 <calculate_rt+0x5e>
			steps = duration_remainder / 1000;
    6878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    687c:	fb90 f0f3 	sdiv	r0, r0, r3
			resolution = 0x01;
    6880:	2301      	movs	r3, #1
			steps = duration_remainder / 1000;
    6882:	b2c0      	uxtb	r0, r0
    6884:	e7e5      	b.n	6852 <calculate_rt+0x2a>
		} else if (duration_remainder > 0) {
    6886:	2800      	cmp	r0, #0
			resolution = 0x00;
    6888:	bfd5      	itete	le
    688a:	462b      	movle	r3, r5
			steps = duration_remainder / 100;
    688c:	2364      	movgt	r3, #100	; 0x64
			steps = 0x00;
    688e:	4618      	movle	r0, r3
			steps = duration_remainder / 100;
    6890:	fb90 f0f3 	sdivgt	r0, r0, r3
			resolution = 0x00;
    6894:	bfc4      	itt	gt
    6896:	462b      	movgt	r3, r5
			steps = duration_remainder / 100;
    6898:	b2c0      	uxtbgt	r0, r0
    689a:	e7da      	b.n	6852 <calculate_rt+0x2a>
    689c:	000975e0 	.word	0x000975e0
    68a0:	000927c0 	.word	0x000927c0

000068a4 <onoff_tt_values>:
{
    68a4:	b570      	push	{r4, r5, r6, lr}
		light_ctl_srv_user_data.transition = &lightness_transition;
    68a6:	4b14      	ldr	r3, [pc, #80]	; (68f8 <onoff_tt_values+0x54>)
{
    68a8:	4604      	mov	r4, r0
    68aa:	4615      	mov	r5, r2
	calculate_lightness_target_values(ONOFF);
    68ac:	2002      	movs	r0, #2
		light_ctl_srv_user_data.transition = &lightness_transition;
    68ae:	4a13      	ldr	r2, [pc, #76]	; (68fc <onoff_tt_values+0x58>)
    68b0:	645a      	str	r2, [r3, #68]	; 0x44
{
    68b2:	460e      	mov	r6, r1
	calculate_lightness_target_values(ONOFF);
    68b4:	f7ff fbf8 	bl	60a8 <calculate_lightness_target_values>
	state->transition->tt = tt;
    68b8:	6960      	ldr	r0, [r4, #20]
    68ba:	7046      	strb	r6, [r0, #1]
	state->transition->delay = delay;
    68bc:	70c5      	strb	r5, [r0, #3]
	if (!tt_values_calculator(state->transition)) {
    68be:	f7ff fe9b 	bl	65f8 <tt_values_calculator>
    68c2:	b1b8      	cbz	r0, 68f4 <onoff_tt_values+0x50>
	state->transition->quo_tt = state->transition->total_duration /
    68c4:	6963      	ldr	r3, [r4, #20]
    68c6:	e9d3 5202 	ldrd	r5, r2, [r3, #8]
    68ca:	fbb2 f2f5 	udiv	r2, r2, r5
    68ce:	605a      	str	r2, [r3, #4]
	state->tt_delta = ((float) (lightness - target_lightness) /
    68d0:	4b0b      	ldr	r3, [pc, #44]	; (6900 <onoff_tt_values+0x5c>)
    68d2:	8818      	ldrh	r0, [r3, #0]
    68d4:	4b0b      	ldr	r3, [pc, #44]	; (6904 <onoff_tt_values+0x60>)
    68d6:	881b      	ldrh	r3, [r3, #0]
    68d8:	1ac0      	subs	r0, r0, r3
    68da:	f7f9 feff 	bl	6dc <__aeabi_i2f>
    68de:	4606      	mov	r6, r0
    68e0:	4628      	mov	r0, r5
    68e2:	f7f9 fef7 	bl	6d4 <__aeabi_ui2f>
    68e6:	4601      	mov	r1, r0
    68e8:	4630      	mov	r0, r6
    68ea:	f7f9 ffff 	bl	8ec <__aeabi_fdiv>
    68ee:	f7fa f90f 	bl	b10 <__aeabi_f2iz>
    68f2:	6120      	str	r0, [r4, #16]
}
    68f4:	bd70      	pop	{r4, r5, r6, pc}
    68f6:	bf00      	nop
    68f8:	20007be0 	.word	0x20007be0
    68fc:	20000018 	.word	0x20000018
    6900:	20002048 	.word	0x20002048
    6904:	2000204a 	.word	0x2000204a

00006908 <level_tt_values>:
	if (state == &gen_level_srv_root_user_data) {
    6908:	4b1b      	ldr	r3, [pc, #108]	; (6978 <level_tt_values+0x70>)
    690a:	4298      	cmp	r0, r3
{
    690c:	b570      	push	{r4, r5, r6, lr}
    690e:	4604      	mov	r4, r0
    6910:	460e      	mov	r6, r1
    6912:	4615      	mov	r5, r2
	if (state == &gen_level_srv_root_user_data) {
    6914:	d124      	bne.n	6960 <level_tt_values+0x58>
		light_ctl_srv_user_data.transition = &lightness_transition;
    6916:	4b19      	ldr	r3, [pc, #100]	; (697c <level_tt_values+0x74>)
    6918:	4a19      	ldr	r2, [pc, #100]	; (6980 <level_tt_values+0x78>)
    691a:	645a      	str	r2, [r3, #68]	; 0x44
		calculate_lightness_target_values(LEVEL);
    691c:	2003      	movs	r0, #3
    691e:	f7ff fbc3 	bl	60a8 <calculate_lightness_target_values>
	state->transition->tt = tt;
    6922:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6924:	7046      	strb	r6, [r0, #1]
	state->transition->delay = delay;
    6926:	70c5      	strb	r5, [r0, #3]
	if (!tt_values_calculator(state->transition)) {
    6928:	f7ff fe66 	bl	65f8 <tt_values_calculator>
    692c:	b1b8      	cbz	r0, 695e <level_tt_values+0x56>
	state->transition->quo_tt = state->transition->total_duration /
    692e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	state->tt_delta = ((float) (state->level - state->target_level) /
    6930:	f9b4 0000 	ldrsh.w	r0, [r4]
	state->transition->quo_tt = state->transition->total_duration /
    6934:	e9d3 5202 	ldrd	r5, r2, [r3, #8]
    6938:	fbb2 f2f5 	udiv	r2, r2, r5
    693c:	605a      	str	r2, [r3, #4]
	state->tt_delta = ((float) (state->level - state->target_level) /
    693e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    6942:	1ac0      	subs	r0, r0, r3
    6944:	f7f9 feca 	bl	6dc <__aeabi_i2f>
    6948:	4606      	mov	r6, r0
    694a:	4628      	mov	r0, r5
    694c:	f7f9 fec2 	bl	6d4 <__aeabi_ui2f>
    6950:	4601      	mov	r1, r0
    6952:	4630      	mov	r0, r6
    6954:	f7f9 ffca 	bl	8ec <__aeabi_fdiv>
    6958:	f7fa f8da 	bl	b10 <__aeabi_f2iz>
    695c:	6220      	str	r0, [r4, #32]
}
    695e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (state == &gen_level_srv_s0_user_data) {
    6960:	4b08      	ldr	r3, [pc, #32]	; (6984 <level_tt_values+0x7c>)
    6962:	4298      	cmp	r0, r3
    6964:	d1dd      	bne.n	6922 <level_tt_values+0x1a>
		gen_level_srv_s0_user_data.transition = &temp_transition;
    6966:	4b08      	ldr	r3, [pc, #32]	; (6988 <level_tt_values+0x80>)
		light_ctl_srv_user_data.transition = &temp_transition;
    6968:	4a04      	ldr	r2, [pc, #16]	; (697c <level_tt_values+0x74>)
		gen_level_srv_s0_user_data.transition = &temp_transition;
    696a:	6243      	str	r3, [r0, #36]	; 0x24
		calculate_temp_target_values(LEVEL_TEMP);
    696c:	200a      	movs	r0, #10
		light_ctl_srv_user_data.transition = &temp_transition;
    696e:	6453      	str	r3, [r2, #68]	; 0x44
		calculate_temp_target_values(LEVEL_TEMP);
    6970:	f7ff fc0a 	bl	6188 <calculate_temp_target_values>
    6974:	e7d5      	b.n	6922 <level_tt_values+0x1a>
    6976:	bf00      	nop
    6978:	20007b78 	.word	0x20007b78
    697c:	20007be0 	.word	0x20007be0
    6980:	20000018 	.word	0x20000018
    6984:	20007ba0 	.word	0x20007ba0
    6988:	20000060 	.word	0x20000060

0000698c <light_lightness_actual_tt_values>:
{
    698c:	b570      	push	{r4, r5, r6, lr}
		light_ctl_srv_user_data.transition = &lightness_transition;
    698e:	4b13      	ldr	r3, [pc, #76]	; (69dc <light_lightness_actual_tt_values+0x50>)
{
    6990:	4604      	mov	r4, r0
    6992:	4615      	mov	r5, r2
	calculate_lightness_target_values(ACTUAL);
    6994:	2005      	movs	r0, #5
		light_ctl_srv_user_data.transition = &lightness_transition;
    6996:	4a12      	ldr	r2, [pc, #72]	; (69e0 <light_lightness_actual_tt_values+0x54>)
    6998:	645a      	str	r2, [r3, #68]	; 0x44
{
    699a:	460e      	mov	r6, r1
	calculate_lightness_target_values(ACTUAL);
    699c:	f7ff fb84 	bl	60a8 <calculate_lightness_target_values>
	state->transition->tt = tt;
    69a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    69a2:	7046      	strb	r6, [r0, #1]
	state->transition->delay = delay;
    69a4:	70c5      	strb	r5, [r0, #3]
	if (!tt_values_calculator(state->transition)) {
    69a6:	f7ff fe27 	bl	65f8 <tt_values_calculator>
    69aa:	b1a8      	cbz	r0, 69d8 <light_lightness_actual_tt_values+0x4c>
	state->transition->quo_tt = state->transition->total_duration /
    69ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
		((float) (state->actual - state->target_actual) /
    69ae:	88a0      	ldrh	r0, [r4, #4]
	state->transition->quo_tt = state->transition->total_duration /
    69b0:	e9d3 5202 	ldrd	r5, r2, [r3, #8]
    69b4:	fbb2 f2f5 	udiv	r2, r2, r5
    69b8:	605a      	str	r2, [r3, #4]
		((float) (state->actual - state->target_actual) /
    69ba:	88e3      	ldrh	r3, [r4, #6]
    69bc:	1ac0      	subs	r0, r0, r3
    69be:	f7f9 fe8d 	bl	6dc <__aeabi_i2f>
    69c2:	4606      	mov	r6, r0
    69c4:	4628      	mov	r0, r5
    69c6:	f7f9 fe85 	bl	6d4 <__aeabi_ui2f>
    69ca:	4601      	mov	r1, r0
    69cc:	4630      	mov	r0, r6
    69ce:	f7f9 ff8d 	bl	8ec <__aeabi_fdiv>
	state->tt_delta_actual =
    69d2:	f7fa f89d 	bl	b10 <__aeabi_f2iz>
    69d6:	62a0      	str	r0, [r4, #40]	; 0x28
}
    69d8:	bd70      	pop	{r4, r5, r6, pc}
    69da:	bf00      	nop
    69dc:	20007be0 	.word	0x20007be0
    69e0:	20000018 	.word	0x20000018

000069e4 <light_lightness_linear_tt_values>:
{
    69e4:	b570      	push	{r4, r5, r6, lr}
		light_ctl_srv_user_data.transition = &lightness_transition;
    69e6:	4b13      	ldr	r3, [pc, #76]	; (6a34 <light_lightness_linear_tt_values+0x50>)
{
    69e8:	4604      	mov	r4, r0
    69ea:	4615      	mov	r5, r2
	calculate_lightness_target_values(LINEAR);
    69ec:	2006      	movs	r0, #6
		light_ctl_srv_user_data.transition = &lightness_transition;
    69ee:	4a12      	ldr	r2, [pc, #72]	; (6a38 <light_lightness_linear_tt_values+0x54>)
    69f0:	645a      	str	r2, [r3, #68]	; 0x44
{
    69f2:	460e      	mov	r6, r1
	calculate_lightness_target_values(LINEAR);
    69f4:	f7ff fb58 	bl	60a8 <calculate_lightness_target_values>
	state->transition->tt = tt;
    69f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    69fa:	7046      	strb	r6, [r0, #1]
	state->transition->delay = delay;
    69fc:	70c5      	strb	r5, [r0, #3]
	if (!tt_values_calculator(state->transition)) {
    69fe:	f7ff fdfb 	bl	65f8 <tt_values_calculator>
    6a02:	b1a8      	cbz	r0, 6a30 <light_lightness_linear_tt_values+0x4c>
	state->transition->quo_tt = state->transition->total_duration /
    6a04:	6b23      	ldr	r3, [r4, #48]	; 0x30
		((float) (state->linear - state->target_linear) /
    6a06:	8820      	ldrh	r0, [r4, #0]
	state->transition->quo_tt = state->transition->total_duration /
    6a08:	e9d3 5202 	ldrd	r5, r2, [r3, #8]
    6a0c:	fbb2 f2f5 	udiv	r2, r2, r5
    6a10:	605a      	str	r2, [r3, #4]
		((float) (state->linear - state->target_linear) /
    6a12:	8863      	ldrh	r3, [r4, #2]
    6a14:	1ac0      	subs	r0, r0, r3
    6a16:	f7f9 fe61 	bl	6dc <__aeabi_i2f>
    6a1a:	4606      	mov	r6, r0
    6a1c:	4628      	mov	r0, r5
    6a1e:	f7f9 fe59 	bl	6d4 <__aeabi_ui2f>
    6a22:	4601      	mov	r1, r0
    6a24:	4630      	mov	r0, r6
    6a26:	f7f9 ff61 	bl	8ec <__aeabi_fdiv>
	state->tt_delta_linear =
    6a2a:	f7fa f871 	bl	b10 <__aeabi_f2iz>
    6a2e:	62e0      	str	r0, [r4, #44]	; 0x2c
}
    6a30:	bd70      	pop	{r4, r5, r6, pc}
    6a32:	bf00      	nop
    6a34:	20007be0 	.word	0x20007be0
    6a38:	20000018 	.word	0x20000018

00006a3c <light_ctl_tt_values>:
{
    6a3c:	b570      	push	{r4, r5, r6, lr}
    6a3e:	4615      	mov	r5, r2
		light_ctl_srv_user_data.transition = &lightness_transition;
    6a40:	4a1e      	ldr	r2, [pc, #120]	; (6abc <light_ctl_tt_values+0x80>)
    6a42:	4b1f      	ldr	r3, [pc, #124]	; (6ac0 <light_ctl_tt_values+0x84>)
    6a44:	6453      	str	r3, [r2, #68]	; 0x44
{
    6a46:	4604      	mov	r4, r0
		gen_level_srv_s0_user_data.transition = &lightness_transition;
    6a48:	4a1e      	ldr	r2, [pc, #120]	; (6ac4 <light_ctl_tt_values+0x88>)
	calculate_lightness_target_values(CTL);
    6a4a:	2007      	movs	r0, #7
{
    6a4c:	460e      	mov	r6, r1
		gen_level_srv_s0_user_data.transition = &lightness_transition;
    6a4e:	6253      	str	r3, [r2, #36]	; 0x24
	calculate_lightness_target_values(CTL);
    6a50:	f7ff fb2a 	bl	60a8 <calculate_lightness_target_values>
	state->transition->tt = tt;
    6a54:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6a56:	7046      	strb	r6, [r0, #1]
	state->transition->delay = delay;
    6a58:	70c5      	strb	r5, [r0, #3]
	if (!tt_values_calculator(state->transition)) {
    6a5a:	f7ff fdcd 	bl	65f8 <tt_values_calculator>
    6a5e:	b358      	cbz	r0, 6ab8 <light_ctl_tt_values+0x7c>
	state->transition->quo_tt = state->transition->total_duration /
    6a60:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6a62:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    6a66:	fbb2 f2f0 	udiv	r2, r2, r0
    6a6a:	605a      	str	r2, [r3, #4]
		((float) (state->lightness - state->target_lightness) /
    6a6c:	f7f9 fe32 	bl	6d4 <__aeabi_ui2f>
    6a70:	8863      	ldrh	r3, [r4, #2]
    6a72:	4605      	mov	r5, r0
    6a74:	8820      	ldrh	r0, [r4, #0]
    6a76:	1ac0      	subs	r0, r0, r3
    6a78:	f7f9 fe30 	bl	6dc <__aeabi_i2f>
    6a7c:	4629      	mov	r1, r5
    6a7e:	f7f9 ff35 	bl	8ec <__aeabi_fdiv>
	state->tt_delta_lightness =
    6a82:	f7fa f845 	bl	b10 <__aeabi_f2iz>
		((float) (state->temp - state->target_temp) /
    6a86:	88e3      	ldrh	r3, [r4, #6]
	state->tt_delta_lightness =
    6a88:	63a0      	str	r0, [r4, #56]	; 0x38
		((float) (state->temp - state->target_temp) /
    6a8a:	88a0      	ldrh	r0, [r4, #4]
    6a8c:	1ac0      	subs	r0, r0, r3
    6a8e:	f7f9 fe25 	bl	6dc <__aeabi_i2f>
    6a92:	4629      	mov	r1, r5
    6a94:	f7f9 ff2a 	bl	8ec <__aeabi_fdiv>
	state->tt_delta_temp =
    6a98:	f7fa f83a 	bl	b10 <__aeabi_f2iz>
		((float) (state->delta_uv - state->target_delta_uv) /
    6a9c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
	state->tt_delta_temp =
    6aa0:	63e0      	str	r0, [r4, #60]	; 0x3c
		((float) (state->delta_uv - state->target_delta_uv) /
    6aa2:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    6aa6:	1ac0      	subs	r0, r0, r3
    6aa8:	f7f9 fe18 	bl	6dc <__aeabi_i2f>
    6aac:	4629      	mov	r1, r5
    6aae:	f7f9 ff1d 	bl	8ec <__aeabi_fdiv>
	state->tt_delta_duv =
    6ab2:	f7fa f82d 	bl	b10 <__aeabi_f2iz>
    6ab6:	6420      	str	r0, [r4, #64]	; 0x40
}
    6ab8:	bd70      	pop	{r4, r5, r6, pc}
    6aba:	bf00      	nop
    6abc:	20007be0 	.word	0x20007be0
    6ac0:	20000018 	.word	0x20000018
    6ac4:	20007ba0 	.word	0x20007ba0

00006ac8 <light_ctl_temp_tt_values>:
{
    6ac8:	b570      	push	{r4, r5, r6, lr}
    6aca:	4615      	mov	r5, r2
		gen_level_srv_s0_user_data.transition = &temp_transition;
    6acc:	4a18      	ldr	r2, [pc, #96]	; (6b30 <light_ctl_temp_tt_values+0x68>)
    6ace:	4b19      	ldr	r3, [pc, #100]	; (6b34 <light_ctl_temp_tt_values+0x6c>)
    6ad0:	6253      	str	r3, [r2, #36]	; 0x24
{
    6ad2:	4604      	mov	r4, r0
		light_ctl_srv_user_data.transition = &temp_transition;
    6ad4:	4a18      	ldr	r2, [pc, #96]	; (6b38 <light_ctl_temp_tt_values+0x70>)
	calculate_temp_target_values(CTL_TEMP);
    6ad6:	200b      	movs	r0, #11
{
    6ad8:	460e      	mov	r6, r1
		light_ctl_srv_user_data.transition = &temp_transition;
    6ada:	6453      	str	r3, [r2, #68]	; 0x44
	calculate_temp_target_values(CTL_TEMP);
    6adc:	f7ff fb54 	bl	6188 <calculate_temp_target_values>
	state->transition->tt = tt;
    6ae0:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6ae2:	7046      	strb	r6, [r0, #1]
	state->transition->delay = delay;
    6ae4:	70c5      	strb	r5, [r0, #3]
	if (!tt_values_calculator(state->transition)) {
    6ae6:	f7ff fd87 	bl	65f8 <tt_values_calculator>
    6aea:	b300      	cbz	r0, 6b2e <light_ctl_temp_tt_values+0x66>
	state->transition->quo_tt = state->transition->total_duration /
    6aec:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6aee:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    6af2:	fbb2 f2f0 	udiv	r2, r2, r0
    6af6:	605a      	str	r2, [r3, #4]
	state->tt_delta_temp = ((float) (state->temp - state->target_temp) /
    6af8:	f7f9 fdec 	bl	6d4 <__aeabi_ui2f>
    6afc:	88e3      	ldrh	r3, [r4, #6]
    6afe:	4605      	mov	r5, r0
    6b00:	88a0      	ldrh	r0, [r4, #4]
    6b02:	1ac0      	subs	r0, r0, r3
    6b04:	f7f9 fdea 	bl	6dc <__aeabi_i2f>
    6b08:	4629      	mov	r1, r5
    6b0a:	f7f9 feef 	bl	8ec <__aeabi_fdiv>
    6b0e:	f7f9 ffff 	bl	b10 <__aeabi_f2iz>
		((float) (state->delta_uv - state->target_delta_uv) /
    6b12:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
	state->tt_delta_temp = ((float) (state->temp - state->target_temp) /
    6b16:	63e0      	str	r0, [r4, #60]	; 0x3c
		((float) (state->delta_uv - state->target_delta_uv) /
    6b18:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    6b1c:	1ac0      	subs	r0, r0, r3
    6b1e:	f7f9 fddd 	bl	6dc <__aeabi_i2f>
    6b22:	4629      	mov	r1, r5
    6b24:	f7f9 fee2 	bl	8ec <__aeabi_fdiv>
	state->tt_delta_duv =
    6b28:	f7f9 fff2 	bl	b10 <__aeabi_f2iz>
    6b2c:	6420      	str	r0, [r4, #64]	; 0x40
}
    6b2e:	bd70      	pop	{r4, r5, r6, pc}
    6b30:	20007ba0 	.word	0x20007ba0
    6b34:	20000060 	.word	0x20000060
    6b38:	20007be0 	.word	0x20007be0

00006b3c <onoff_handler>:

K_TIMER_DEFINE(dummy_timer, NULL, NULL);

/* Messages handlers (Start) */
void onoff_handler(struct generic_onoff_state *state)
{
    6b3c:	b538      	push	{r3, r4, r5, lr}
    6b3e:	4605      	mov	r5, r0
	ptr_timer = &state->transition->timer;
    6b40:	6940      	ldr	r0, [r0, #20]
    6b42:	4c08      	ldr	r4, [pc, #32]	; (6b64 <onoff_handler+0x28>)

	k_timer_init(ptr_timer, onoff_tt_handler, NULL);
    6b44:	4908      	ldr	r1, [pc, #32]	; (6b68 <onoff_handler+0x2c>)
	ptr_timer = &state->transition->timer;
    6b46:	3018      	adds	r0, #24
	k_timer_init(ptr_timer, onoff_tt_handler, NULL);
    6b48:	2200      	movs	r2, #0
	ptr_timer = &state->transition->timer;
    6b4a:	6020      	str	r0, [r4, #0]
	k_timer_init(ptr_timer, onoff_tt_handler, NULL);
    6b4c:	f019 f85b 	bl	1fc06 <k_timer_init>

	k_timer_start(ptr_timer,
		      K_MSEC(5 * state->transition->delay),
    6b50:	696b      	ldr	r3, [r5, #20]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
    6b52:	6820      	ldr	r0, [r4, #0]
	k_timer_start(ptr_timer,
    6b54:	78d9      	ldrb	r1, [r3, #3]
    6b56:	685a      	ldr	r2, [r3, #4]
    6b58:	eb01 0181 	add.w	r1, r1, r1, lsl #2
		      K_MSEC(state->transition->quo_tt));
}
    6b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6b60:	f010 bc3e 	b.w	173e0 <z_impl_k_timer_start>
    6b64:	20008580 	.word	0x20008580
    6b68:	000067d5 	.word	0x000067d5

00006b6c <level_lightness_handler>:

void level_lightness_handler(struct generic_level_state *state)
{
    6b6c:	b538      	push	{r3, r4, r5, lr}
    6b6e:	4605      	mov	r5, r0
	ptr_timer = &state->transition->timer;
    6b70:	6a40      	ldr	r0, [r0, #36]	; 0x24
    6b72:	4c08      	ldr	r4, [pc, #32]	; (6b94 <level_lightness_handler+0x28>)

	k_timer_init(ptr_timer, level_lightness_tt_handler, NULL);
    6b74:	4908      	ldr	r1, [pc, #32]	; (6b98 <level_lightness_handler+0x2c>)
	ptr_timer = &state->transition->timer;
    6b76:	3018      	adds	r0, #24
	k_timer_init(ptr_timer, level_lightness_tt_handler, NULL);
    6b78:	2200      	movs	r2, #0
	ptr_timer = &state->transition->timer;
    6b7a:	6020      	str	r0, [r4, #0]
	k_timer_init(ptr_timer, level_lightness_tt_handler, NULL);
    6b7c:	f019 f843 	bl	1fc06 <k_timer_init>

	k_timer_start(ptr_timer,
		      K_MSEC(5 * state->transition->delay),
    6b80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6b82:	6820      	ldr	r0, [r4, #0]
	k_timer_start(ptr_timer,
    6b84:	78d9      	ldrb	r1, [r3, #3]
    6b86:	685a      	ldr	r2, [r3, #4]
    6b88:	eb01 0181 	add.w	r1, r1, r1, lsl #2
		      K_MSEC(state->transition->quo_tt));
}
    6b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6b90:	f010 bc26 	b.w	173e0 <z_impl_k_timer_start>
    6b94:	20008580 	.word	0x20008580
    6b98:	000067e1 	.word	0x000067e1

00006b9c <level_temp_handler>:

void level_temp_handler(struct generic_level_state *state)
{
    6b9c:	b538      	push	{r3, r4, r5, lr}
    6b9e:	4605      	mov	r5, r0
	ptr_timer = &state->transition->timer;
    6ba0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    6ba2:	4c08      	ldr	r4, [pc, #32]	; (6bc4 <level_temp_handler+0x28>)

	k_timer_init(ptr_timer, level_temp_tt_handler, NULL);
    6ba4:	4908      	ldr	r1, [pc, #32]	; (6bc8 <level_temp_handler+0x2c>)
	ptr_timer = &state->transition->timer;
    6ba6:	3018      	adds	r0, #24
	k_timer_init(ptr_timer, level_temp_tt_handler, NULL);
    6ba8:	2200      	movs	r2, #0
	ptr_timer = &state->transition->timer;
    6baa:	6020      	str	r0, [r4, #0]
	k_timer_init(ptr_timer, level_temp_tt_handler, NULL);
    6bac:	f019 f82b 	bl	1fc06 <k_timer_init>

	k_timer_start(ptr_timer,
		      K_MSEC(5 * state->transition->delay),
    6bb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6bb2:	6820      	ldr	r0, [r4, #0]
	k_timer_start(ptr_timer,
    6bb4:	78d9      	ldrb	r1, [r3, #3]
    6bb6:	685a      	ldr	r2, [r3, #4]
    6bb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
		      K_MSEC(state->transition->quo_tt));
}
    6bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6bc0:	f010 bc0e 	b.w	173e0 <z_impl_k_timer_start>
    6bc4:	20008580 	.word	0x20008580
    6bc8:	000067ed 	.word	0x000067ed

00006bcc <light_lightness_actual_handler>:

void light_lightness_actual_handler(struct light_lightness_state *state)
{
    6bcc:	b538      	push	{r3, r4, r5, lr}
    6bce:	4605      	mov	r5, r0
	ptr_timer = &state->transition->timer;
    6bd0:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6bd2:	4c08      	ldr	r4, [pc, #32]	; (6bf4 <light_lightness_actual_handler+0x28>)

	k_timer_init(ptr_timer, light_lightness_actual_tt_handler, NULL);
    6bd4:	4908      	ldr	r1, [pc, #32]	; (6bf8 <light_lightness_actual_handler+0x2c>)
	ptr_timer = &state->transition->timer;
    6bd6:	3018      	adds	r0, #24
	k_timer_init(ptr_timer, light_lightness_actual_tt_handler, NULL);
    6bd8:	2200      	movs	r2, #0
	ptr_timer = &state->transition->timer;
    6bda:	6020      	str	r0, [r4, #0]
	k_timer_init(ptr_timer, light_lightness_actual_tt_handler, NULL);
    6bdc:	f019 f813 	bl	1fc06 <k_timer_init>

	k_timer_start(ptr_timer,
		      K_MSEC(5 * state->transition->delay),
    6be0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    6be2:	6820      	ldr	r0, [r4, #0]
	k_timer_start(ptr_timer,
    6be4:	78d9      	ldrb	r1, [r3, #3]
    6be6:	685a      	ldr	r2, [r3, #4]
    6be8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
		      K_MSEC(state->transition->quo_tt));
}
    6bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6bf0:	f010 bbf6 	b.w	173e0 <z_impl_k_timer_start>
    6bf4:	20008580 	.word	0x20008580
    6bf8:	000067f9 	.word	0x000067f9

00006bfc <light_lightness_linear_handler>:

void light_lightness_linear_handler(struct light_lightness_state *state)
{
    6bfc:	b538      	push	{r3, r4, r5, lr}
    6bfe:	4605      	mov	r5, r0
	ptr_timer = &state->transition->timer;
    6c00:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6c02:	4c08      	ldr	r4, [pc, #32]	; (6c24 <light_lightness_linear_handler+0x28>)

	k_timer_init(ptr_timer, light_lightness_linear_tt_handler, NULL);
    6c04:	4908      	ldr	r1, [pc, #32]	; (6c28 <light_lightness_linear_handler+0x2c>)
	ptr_timer = &state->transition->timer;
    6c06:	3018      	adds	r0, #24
	k_timer_init(ptr_timer, light_lightness_linear_tt_handler, NULL);
    6c08:	2200      	movs	r2, #0
	ptr_timer = &state->transition->timer;
    6c0a:	6020      	str	r0, [r4, #0]
	k_timer_init(ptr_timer, light_lightness_linear_tt_handler, NULL);
    6c0c:	f018 fffb 	bl	1fc06 <k_timer_init>

	k_timer_start(ptr_timer,
		      K_MSEC(5 * state->transition->delay),
    6c10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    6c12:	6820      	ldr	r0, [r4, #0]
	k_timer_start(ptr_timer,
    6c14:	78d9      	ldrb	r1, [r3, #3]
    6c16:	685a      	ldr	r2, [r3, #4]
    6c18:	eb01 0181 	add.w	r1, r1, r1, lsl #2
		      K_MSEC(state->transition->quo_tt));
}
    6c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6c20:	f010 bbde 	b.w	173e0 <z_impl_k_timer_start>
    6c24:	20008580 	.word	0x20008580
    6c28:	00006805 	.word	0x00006805

00006c2c <light_ctl_handler>:

void light_ctl_handler(struct light_ctl_state *state)
{
    6c2c:	b538      	push	{r3, r4, r5, lr}
    6c2e:	4605      	mov	r5, r0
	ptr_timer = &state->transition->timer;
    6c30:	6c40      	ldr	r0, [r0, #68]	; 0x44
    6c32:	4c08      	ldr	r4, [pc, #32]	; (6c54 <light_ctl_handler+0x28>)

	k_timer_init(ptr_timer, light_ctl_tt_handler, NULL);
    6c34:	4908      	ldr	r1, [pc, #32]	; (6c58 <light_ctl_handler+0x2c>)
	ptr_timer = &state->transition->timer;
    6c36:	3018      	adds	r0, #24
	k_timer_init(ptr_timer, light_ctl_tt_handler, NULL);
    6c38:	2200      	movs	r2, #0
	ptr_timer = &state->transition->timer;
    6c3a:	6020      	str	r0, [r4, #0]
	k_timer_init(ptr_timer, light_ctl_tt_handler, NULL);
    6c3c:	f018 ffe3 	bl	1fc06 <k_timer_init>

	k_timer_start(ptr_timer,
		      K_MSEC(5 * state->transition->delay),
    6c40:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    6c42:	6820      	ldr	r0, [r4, #0]
	k_timer_start(ptr_timer,
    6c44:	78d9      	ldrb	r1, [r3, #3]
    6c46:	685a      	ldr	r2, [r3, #4]
    6c48:	eb01 0181 	add.w	r1, r1, r1, lsl #2
		      K_MSEC(state->transition->quo_tt));
}
    6c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6c50:	f010 bbc6 	b.w	173e0 <z_impl_k_timer_start>
    6c54:	20008580 	.word	0x20008580
    6c58:	00006811 	.word	0x00006811

00006c5c <light_ctl_temp_handler>:

void light_ctl_temp_handler(struct light_ctl_state *state)
{
    6c5c:	b538      	push	{r3, r4, r5, lr}
    6c5e:	4605      	mov	r5, r0
	ptr_timer = &state->transition->timer;
    6c60:	6c40      	ldr	r0, [r0, #68]	; 0x44
    6c62:	4c08      	ldr	r4, [pc, #32]	; (6c84 <light_ctl_temp_handler+0x28>)

	k_timer_init(ptr_timer, light_ctl_temp_tt_handler, NULL);
    6c64:	4908      	ldr	r1, [pc, #32]	; (6c88 <light_ctl_temp_handler+0x2c>)
	ptr_timer = &state->transition->timer;
    6c66:	3018      	adds	r0, #24
	k_timer_init(ptr_timer, light_ctl_temp_tt_handler, NULL);
    6c68:	2200      	movs	r2, #0
	ptr_timer = &state->transition->timer;
    6c6a:	6020      	str	r0, [r4, #0]
	k_timer_init(ptr_timer, light_ctl_temp_tt_handler, NULL);
    6c6c:	f018 ffcb 	bl	1fc06 <k_timer_init>

	k_timer_start(ptr_timer,
		      K_MSEC(5 * state->transition->delay),
    6c70:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    6c72:	6820      	ldr	r0, [r4, #0]
	k_timer_start(ptr_timer,
    6c74:	78d9      	ldrb	r1, [r3, #3]
    6c76:	685a      	ldr	r2, [r3, #4]
    6c78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
		      K_MSEC(state->transition->quo_tt));
}
    6c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6c80:	f010 bbae 	b.w	173e0 <z_impl_k_timer_start>
    6c84:	20008580 	.word	0x20008580
    6c88:	0000681d 	.word	0x0000681d

00006c8c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
    6c8c:	b510      	push	{r4, lr}
	int i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    6c8e:	4c09      	ldr	r4, [pc, #36]	; (6cb4 <crc8_ccitt+0x28>)
    6c90:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    6c92:	4291      	cmp	r1, r2
    6c94:	d100      	bne.n	6c98 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    6c96:	bd10      	pop	{r4, pc}
		val ^= p[i];
    6c98:	f811 3b01 	ldrb.w	r3, [r1], #1
    6c9c:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    6c9e:	0918      	lsrs	r0, r3, #4
    6ca0:	5c20      	ldrb	r0, [r4, r0]
    6ca2:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    6ca6:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    6ca8:	0918      	lsrs	r0, r3, #4
    6caa:	5c20      	ldrb	r0, [r4, r0]
    6cac:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    6cb0:	b2c0      	uxtb	r0, r0
    6cb2:	e7ee      	b.n	6c92 <crc8_ccitt+0x6>
    6cb4:	000214d4 	.word	0x000214d4

00006cb8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    6cb8:	680b      	ldr	r3, [r1, #0]
    6cba:	3301      	adds	r3, #1
    6cbc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    6cbe:	4b01      	ldr	r3, [pc, #4]	; (6cc4 <char_out+0xc>)
    6cc0:	681b      	ldr	r3, [r3, #0]
    6cc2:	4718      	bx	r3
    6cc4:	20008584 	.word	0x20008584

00006cc8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    6cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ccc:	b085      	sub	sp, #20
    6cce:	469b      	mov	fp, r3
    6cd0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    6cd2:	f8df a090 	ldr.w	sl, [pc, #144]	; 6d64 <_printk_dec_ulong+0x9c>
    6cd6:	2c01      	cmp	r4, #1
    6cd8:	bfb8      	it	lt
    6cda:	2401      	movlt	r4, #1
    6cdc:	2b01      	cmp	r3, #1
    6cde:	bf0c      	ite	eq
    6ce0:	2330      	moveq	r3, #48	; 0x30
    6ce2:	2320      	movne	r3, #32
    6ce4:	4615      	mov	r5, r2
    6ce6:	4680      	mov	r8, r0
    6ce8:	4689      	mov	r9, r1
    6cea:	9401      	str	r4, [sp, #4]
    6cec:	9302      	str	r3, [sp, #8]
    6cee:	2601      	movs	r6, #1
    6cf0:	270a      	movs	r7, #10
    6cf2:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    6cf4:	f10a 0401 	add.w	r4, sl, #1
    6cf8:	b90a      	cbnz	r2, 6cfe <_printk_dec_ulong+0x36>
    6cfa:	45aa      	cmp	sl, r5
    6cfc:	d21f      	bcs.n	6d3e <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    6cfe:	fbb5 f0f4 	udiv	r0, r5, r4
    6d02:	4649      	mov	r1, r9
    6d04:	3030      	adds	r0, #48	; 0x30
    6d06:	47c0      	blx	r8
			digits++;
    6d08:	3601      	adds	r6, #1
			found_largest_digit = 1;
    6d0a:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    6d0c:	3f01      	subs	r7, #1
	while (pos >= 9) {
    6d0e:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    6d10:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    6d14:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    6d18:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    6d1c:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    6d20:	d1e8      	bne.n	6cf4 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    6d22:	4649      	mov	r1, r9
    6d24:	f105 0030 	add.w	r0, r5, #48	; 0x30
    6d28:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    6d2a:	f1bb 0f03 	cmp.w	fp, #3
    6d2e:	d103      	bne.n	6d38 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    6d30:	9b01      	ldr	r3, [sp, #4]
    6d32:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    6d34:	2c00      	cmp	r4, #0
    6d36:	dc0f      	bgt.n	6d58 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    6d38:	b005      	add	sp, #20
    6d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    6d3e:	9b01      	ldr	r3, [sp, #4]
    6d40:	42bb      	cmp	r3, r7
    6d42:	dbe3      	blt.n	6d0c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    6d44:	f1bb 0f02 	cmp.w	fp, #2
    6d48:	d8e0      	bhi.n	6d0c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    6d4a:	4649      	mov	r1, r9
    6d4c:	9802      	ldr	r0, [sp, #8]
    6d4e:	9203      	str	r2, [sp, #12]
			digits++;
    6d50:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    6d52:	47c0      	blx	r8
			digits++;
    6d54:	9a03      	ldr	r2, [sp, #12]
    6d56:	e7d9      	b.n	6d0c <_printk_dec_ulong+0x44>
			out(' ', ctx);
    6d58:	4649      	mov	r1, r9
    6d5a:	2020      	movs	r0, #32
    6d5c:	47c0      	blx	r8
    6d5e:	3c01      	subs	r4, #1
    6d60:	e7e8      	b.n	6d34 <_printk_dec_ulong+0x6c>
    6d62:	bf00      	nop
    6d64:	3b9ac9ff 	.word	0x3b9ac9ff

00006d68 <__printk_hook_install>:
	_char_out = fn;
    6d68:	4b01      	ldr	r3, [pc, #4]	; (6d70 <__printk_hook_install+0x8>)
    6d6a:	6018      	str	r0, [r3, #0]
}
    6d6c:	4770      	bx	lr
    6d6e:	bf00      	nop
    6d70:	20008584 	.word	0x20008584

00006d74 <vprintk>:
{
    6d74:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    6d76:	2300      	movs	r3, #0
    6d78:	9301      	str	r3, [sp, #4]
	_vprintk(char_out, &ctx, fmt, ap);
    6d7a:	4602      	mov	r2, r0
    6d7c:	460b      	mov	r3, r1
    6d7e:	4803      	ldr	r0, [pc, #12]	; (6d8c <vprintk+0x18>)
    6d80:	a901      	add	r1, sp, #4
    6d82:	f011 f8ad 	bl	17ee0 <_vprintk>
}
    6d86:	b003      	add	sp, #12
    6d88:	f85d fb04 	ldr.w	pc, [sp], #4
    6d8c:	00006cb9 	.word	0x00006cb9

00006d90 <snprintk>:

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    6d90:	b40c      	push	{r2, r3}
    6d92:	b530      	push	{r4, r5, lr}
    6d94:	b085      	sub	sp, #20
    6d96:	ab08      	add	r3, sp, #32
	struct str_context ctx = { str, size, 0 };
    6d98:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    6d9c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;

	va_start(ap, fmt);
    6da0:	9300      	str	r3, [sp, #0]
{
    6da2:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    6da4:	2500      	movs	r5, #0
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    6da6:	a901      	add	r1, sp, #4
    6da8:	4806      	ldr	r0, [pc, #24]	; (6dc4 <snprintk+0x34>)
	struct str_context ctx = { str, size, 0 };
    6daa:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    6dac:	f011 f898 	bl	17ee0 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    6db0:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    6db4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    6db6:	bfb8      	it	lt
    6db8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    6dba:	b005      	add	sp, #20
    6dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6dc0:	b002      	add	sp, #8
    6dc2:	4770      	bx	lr
    6dc4:	00017ebb 	.word	0x00017ebb

00006dc8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set((uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(struct device *arg)
{
    6dc8:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    6dca:	f04f 0320 	mov.w	r3, #32
    6dce:	f3ef 8411 	mrs	r4, BASEPRI
    6dd2:	f383 8811 	msr	BASEPRI, r3

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
    6dd6:	f000 f9e7 	bl	71a8 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6dda:	4a09      	ldr	r2, [pc, #36]	; (6e00 <nordicsemi_nrf52_init+0x38>)
    6ddc:	2301      	movs	r3, #1
    6dde:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
    6de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6de6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6dea:	4b06      	ldr	r3, [pc, #24]	; (6e04 <nordicsemi_nrf52_init+0x3c>)
    6dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6df0:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6df2:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    6df4:	f384 8811 	msr	BASEPRI, r4
    6df8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6dfc:	2000      	movs	r0, #0
    6dfe:	bd10      	pop	{r4, pc}
    6e00:	4001e000 	.word	0x4001e000
    6e04:	e000ed00 	.word	0xe000ed00

00006e08 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    6e08:	4b01      	ldr	r3, [pc, #4]	; (6e10 <uECC_get_rng+0x8>)
    6e0a:	6818      	ldr	r0, [r3, #0]
    6e0c:	4770      	bx	lr
    6e0e:	bf00      	nop
    6e10:	20008588 	.word	0x20008588

00006e14 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    6e14:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6e16:	2208      	movs	r2, #8
{
    6e18:	b089      	sub	sp, #36	; 0x24
    6e1a:	460c      	mov	r4, r1
    6e1c:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6e1e:	f011 fb7c 	bl	1851a <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    6e22:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    6e24:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    6e26:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    6e28:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    6e2a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6e2c:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    6e2e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    6e30:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    6e32:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6e34:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    6e36:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6e38:	2308      	movs	r3, #8
    6e3a:	466a      	mov	r2, sp
    6e3c:	4669      	mov	r1, sp
    6e3e:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    6e40:	e9cd 7701 	strd	r7, r7, [sp, #4]
    6e44:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6e46:	f011 fa6d 	bl	18324 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6e4a:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6e4c:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6e4e:	466a      	mov	r2, sp
    6e50:	4631      	mov	r1, r6
    6e52:	4630      	mov	r0, r6
    6e54:	f011 fa66 	bl	18324 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    6e58:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6e5a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    6e5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6e5e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    6e60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6e62:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    6e64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6e66:	4405      	add	r5, r0
	tmp[7] = 0;
    6e68:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6e6c:	466a      	mov	r2, sp
    6e6e:	2308      	movs	r3, #8
    6e70:	4669      	mov	r1, sp
    6e72:	4668      	mov	r0, sp
    6e74:	f011 fa56 	bl	18324 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6e78:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6e7a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6e7c:	2308      	movs	r3, #8
    6e7e:	466a      	mov	r2, sp
    6e80:	4630      	mov	r0, r6
    6e82:	f011 fa4f 	bl	18324 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    6e86:	6a23      	ldr	r3, [r4, #32]
    6e88:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    6e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e8c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    6e8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6e90:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    6e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6e94:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    6e96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6e98:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6e9a:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6e9c:	2308      	movs	r3, #8
    6e9e:	466a      	mov	r2, sp
    6ea0:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    6ea2:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6ea6:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6ea8:	f011 fa3c 	bl	18324 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    6eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6eae:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    6eb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    6eb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    6eb4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    6eb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6eb8:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    6eba:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    6ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    6ebe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    6ec0:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    6ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    6ec6:	6a23      	ldr	r3, [r4, #32]
    6ec8:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6eca:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6ecc:	2308      	movs	r3, #8
    6ece:	466a      	mov	r2, sp
    6ed0:	4630      	mov	r0, r6
    6ed2:	f011 fa27 	bl	18324 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    6ed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6ed8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    6eda:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6edc:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    6ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6ee0:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    6ee2:	6a23      	ldr	r3, [r4, #32]
    6ee4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    6ee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6ee8:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6eea:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6eec:	2308      	movs	r3, #8
    6eee:	466a      	mov	r2, sp
    6ef0:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    6ef2:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6ef6:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6ef8:	f011 fb45 	bl	18586 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    6efc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6efe:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    6f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6f02:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    6f04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6f06:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    6f08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6f0a:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    6f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6f0e:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    6f10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6f12:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6f14:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6f16:	2308      	movs	r3, #8
    6f18:	466a      	mov	r2, sp
    6f1a:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    6f1c:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6f20:	f011 fb31 	bl	18586 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    6f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6f26:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    6f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6f2a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    6f2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6f2e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    6f30:	6a23      	ldr	r3, [r4, #32]
    6f32:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    6f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6f36:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    6f38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    6f3a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    6f3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6f40:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6f42:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6f44:	2308      	movs	r3, #8
    6f46:	466a      	mov	r2, sp
    6f48:	4630      	mov	r0, r6
    6f4a:	f011 fb1c 	bl	18586 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    6f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6f50:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    6f52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    6f54:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    6f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6f5a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    6f5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6f5e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    6f60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    6f62:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    6f66:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6f68:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6f6a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6f6c:	2308      	movs	r3, #8
    6f6e:	466a      	mov	r2, sp
    6f70:	4630      	mov	r0, r6
    6f72:	f011 fb08 	bl	18586 <uECC_vli_sub>

	if (carry < 0) {
    6f76:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6f78:	4c0d      	ldr	r4, [pc, #52]	; (6fb0 <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
    6f7a:	d40f      	bmi.n	6f9c <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    6f7c:	b935      	cbnz	r5, 6f8c <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    6f7e:	2208      	movs	r2, #8
    6f80:	4631      	mov	r1, r6
    6f82:	4620      	mov	r0, r4
    6f84:	f011 fad5 	bl	18532 <uECC_vli_cmp_unsafe>
		while (carry || 
    6f88:	2801      	cmp	r0, #1
    6f8a:	d00f      	beq.n	6fac <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6f8c:	2308      	movs	r3, #8
    6f8e:	4622      	mov	r2, r4
    6f90:	4631      	mov	r1, r6
    6f92:	4630      	mov	r0, r6
    6f94:	f011 faf7 	bl	18586 <uECC_vli_sub>
    6f98:	1a2d      	subs	r5, r5, r0
    6f9a:	e7ef      	b.n	6f7c <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6f9c:	2308      	movs	r3, #8
    6f9e:	4622      	mov	r2, r4
    6fa0:	4631      	mov	r1, r6
    6fa2:	4630      	mov	r0, r6
    6fa4:	f011 f9be 	bl	18324 <uECC_vli_add>
		while (carry < 0);
    6fa8:	182d      	adds	r5, r5, r0
    6faa:	d4f7      	bmi.n	6f9c <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
    6fac:	b009      	add	sp, #36	; 0x24
    6fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fb0:	00020420 	.word	0x00020420

00006fb4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    6fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    6fb6:	4e28      	ldr	r6, [pc, #160]	; (7058 <tc_aes128_set_encrypt_key+0xa4>)
{
    6fb8:	4607      	mov	r7, r0
    6fba:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    6fbc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    6fbe:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    6fc0:	ad01      	add	r5, sp, #4
    6fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6fc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6fc8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    6fcc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    6fd0:	2f00      	cmp	r7, #0
    6fd2:	d03c      	beq.n	704e <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    6fd4:	2c00      	cmp	r4, #0
    6fd6:	d03c      	beq.n	7052 <tc_aes128_set_encrypt_key+0x9e>
    6fd8:	1f38      	subs	r0, r7, #4
    6fda:	4621      	mov	r1, r4
    6fdc:	4602      	mov	r2, r0
    6fde:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6fe0:	784b      	ldrb	r3, [r1, #1]
    6fe2:	780d      	ldrb	r5, [r1, #0]
    6fe4:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6fe6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6fea:	78cd      	ldrb	r5, [r1, #3]
    6fec:	432b      	orrs	r3, r5
    6fee:	788d      	ldrb	r5, [r1, #2]
    6ff0:	3104      	adds	r1, #4
    6ff2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    6ff6:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6ff8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    6ffc:	d1f0      	bne.n	6fe0 <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6ffe:	4c17      	ldr	r4, [pc, #92]	; (705c <tc_aes128_set_encrypt_key+0xa8>)
    7000:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    7002:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    7004:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    7006:	d118      	bne.n	703a <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    7008:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    700c:	0e1a      	lsrs	r2, r3, #24
    700e:	5ca5      	ldrb	r5, [r4, r2]
    7010:	b2da      	uxtb	r2, r3
    7012:	5ca2      	ldrb	r2, [r4, r2]
    7014:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    7018:	f3c3 4507 	ubfx	r5, r3, #16, #8
    701c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    7020:	5d65      	ldrb	r5, [r4, r5]
    7022:	5ce3      	ldrb	r3, [r4, r3]
    7024:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    7028:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    702c:	ad0c      	add	r5, sp, #48	; 0x30
    702e:	f021 0303 	bic.w	r3, r1, #3
    7032:	442b      	add	r3, r5
    7034:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    7038:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    703a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    703e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    7040:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    7042:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    7044:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    7046:	d1dc      	bne.n	7002 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    7048:	2001      	movs	r0, #1
}
    704a:	b00d      	add	sp, #52	; 0x34
    704c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    704e:	4638      	mov	r0, r7
    7050:	e7fb      	b.n	704a <tc_aes128_set_encrypt_key+0x96>
    7052:	4620      	mov	r0, r4
    7054:	e7f9      	b.n	704a <tc_aes128_set_encrypt_key+0x96>
    7056:	bf00      	nop
    7058:	0001ffb0 	.word	0x0001ffb0
    705c:	000214f3 	.word	0x000214f3

00007060 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    7060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7064:	4615      	mov	r5, r2
    7066:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    7068:	4607      	mov	r7, r0
    706a:	2800      	cmp	r0, #0
    706c:	d059      	beq.n	7122 <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    706e:	2900      	cmp	r1, #0
    7070:	d05a      	beq.n	7128 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    7072:	2a00      	cmp	r2, #0
    7074:	d05a      	beq.n	712c <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    7076:	2310      	movs	r3, #16
    7078:	460a      	mov	r2, r1
    707a:	4668      	mov	r0, sp
    707c:	4619      	mov	r1, r3
    707e:	f011 f88e 	bl	1819e <_copy>
	add_round_key(state, s->words);
    7082:	4629      	mov	r1, r5
    7084:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    7086:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 7130 <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
    708a:	f011 ff93 	bl	18fb4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    708e:	f105 0610 	add.w	r6, r5, #16
    7092:	46c8      	mov	r8, r9
    7094:	35a0      	adds	r5, #160	; 0xa0
    7096:	466c      	mov	r4, sp
{
    7098:	466a      	mov	r2, sp
    709a:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    709c:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    709e:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    70a0:	f819 1001 	ldrb.w	r1, [r9, r1]
    70a4:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    70a8:	d1f8      	bne.n	709c <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
    70aa:	4668      	mov	r0, sp
    70ac:	f011 ffc7 	bl	1903e <shift_rows>
	mult_row_column(t, s);
    70b0:	4669      	mov	r1, sp
    70b2:	a804      	add	r0, sp, #16
    70b4:	f011 fffc 	bl	190b0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    70b8:	a901      	add	r1, sp, #4
    70ba:	a805      	add	r0, sp, #20
    70bc:	f011 fff8 	bl	190b0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    70c0:	a902      	add	r1, sp, #8
    70c2:	a806      	add	r0, sp, #24
    70c4:	f011 fff4 	bl	190b0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    70c8:	a903      	add	r1, sp, #12
    70ca:	a807      	add	r0, sp, #28
    70cc:	f011 fff0 	bl	190b0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    70d0:	2310      	movs	r3, #16
    70d2:	4619      	mov	r1, r3
    70d4:	eb0d 0203 	add.w	r2, sp, r3
    70d8:	4668      	mov	r0, sp
    70da:	f011 f860 	bl	1819e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    70de:	4631      	mov	r1, r6
    70e0:	4668      	mov	r0, sp
    70e2:	3610      	adds	r6, #16
    70e4:	f011 ff66 	bl	18fb4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    70e8:	42ae      	cmp	r6, r5
    70ea:	d1d4      	bne.n	7096 <tc_aes_encrypt+0x36>
    70ec:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
    70ee:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    70f0:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
    70f2:	f818 3003 	ldrb.w	r3, [r8, r3]
    70f6:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    70fa:	d1f8      	bne.n	70ee <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
    70fc:	4668      	mov	r0, sp
    70fe:	f011 ff9e 	bl	1903e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    7102:	4629      	mov	r1, r5
    7104:	4668      	mov	r0, sp
    7106:	f011 ff55 	bl	18fb4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    710a:	2310      	movs	r3, #16
    710c:	4619      	mov	r1, r3
    710e:	466a      	mov	r2, sp
    7110:	4638      	mov	r0, r7
    7112:	f011 f844 	bl	1819e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    7116:	4668      	mov	r0, sp
    7118:	2210      	movs	r2, #16
    711a:	4631      	mov	r1, r6
    711c:	f011 f84c 	bl	181b8 <_set>

	return TC_CRYPTO_SUCCESS;
    7120:	2001      	movs	r0, #1
}
    7122:	b009      	add	sp, #36	; 0x24
    7124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    7128:	4608      	mov	r0, r1
    712a:	e7fa      	b.n	7122 <tc_aes_encrypt+0xc2>
    712c:	4610      	mov	r0, r2
    712e:	e7f8      	b.n	7122 <tc_aes_encrypt+0xc2>
    7130:	000214f3 	.word	0x000214f3

00007134 <errata_108>:
}


static bool errata_12(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    7134:	4b0c      	ldr	r3, [pc, #48]	; (7168 <errata_108+0x34>)
    7136:	781b      	ldrb	r3, [r3, #0]
    7138:	2b06      	cmp	r3, #6
    713a:	d110      	bne.n	715e <errata_108+0x2a>
    713c:	4b0b      	ldr	r3, [pc, #44]	; (716c <errata_108+0x38>)
    713e:	681b      	ldr	r3, [r3, #0]
    7140:	071a      	lsls	r2, r3, #28
    7142:	d10c      	bne.n	715e <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    7144:	4b0a      	ldr	r3, [pc, #40]	; (7170 <errata_108+0x3c>)
    7146:	6818      	ldr	r0, [r3, #0]
    7148:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    714c:	2b30      	cmp	r3, #48	; 0x30
    714e:	d008      	beq.n	7162 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    7150:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    7154:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
    7158:	4258      	negs	r0, r3
    715a:	4158      	adcs	r0, r3
    715c:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    715e:	2000      	movs	r0, #0
    7160:	4770      	bx	lr
            return true;
    7162:	2001      	movs	r0, #1
}
    7164:	4770      	bx	lr
    7166:	bf00      	nop
    7168:	f0000fe0 	.word	0xf0000fe0
    716c:	f0000fe4 	.word	0xf0000fe4
    7170:	f0000fe8 	.word	0xf0000fe8

00007174 <errata_16>:

static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    7174:	4b09      	ldr	r3, [pc, #36]	; (719c <errata_16+0x28>)
    7176:	781b      	ldrb	r3, [r3, #0]
    7178:	2b06      	cmp	r3, #6
    717a:	d10c      	bne.n	7196 <errata_16+0x22>
    717c:	4b08      	ldr	r3, [pc, #32]	; (71a0 <errata_16+0x2c>)
    717e:	681b      	ldr	r3, [r3, #0]
    7180:	071a      	lsls	r2, r3, #28
    7182:	d108      	bne.n	7196 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    7184:	4b07      	ldr	r3, [pc, #28]	; (71a4 <errata_16+0x30>)
    7186:	6818      	ldr	r0, [r3, #0]
    7188:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    718c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    7190:	4258      	negs	r0, r3
    7192:	4158      	adcs	r0, r3
    7194:	4770      	bx	lr
            return true;
        }
    }

    return false;
    7196:	2000      	movs	r0, #0
}
    7198:	4770      	bx	lr
    719a:	bf00      	nop
    719c:	f0000fe0 	.word	0xf0000fe0
    71a0:	f0000fe4 	.word	0xf0000fe4
    71a4:	f0000fe8 	.word	0xf0000fe8

000071a8 <SystemInit>:
{
    71a8:	b508      	push	{r3, lr}
    if (errata_12()){
    71aa:	f7ff ffc3 	bl	7134 <errata_108>
    71ae:	b128      	cbz	r0, 71bc <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    71b0:	4b78      	ldr	r3, [pc, #480]	; (7394 <SystemInit+0x1ec>)
    71b2:	4a79      	ldr	r2, [pc, #484]	; (7398 <SystemInit+0x1f0>)
    71b4:	681b      	ldr	r3, [r3, #0]
    71b6:	f3c3 2304 	ubfx	r3, r3, #8, #5
    71ba:	6013      	str	r3, [r2, #0]
    if (errata_16()){
    71bc:	f7ff ffda 	bl	7174 <errata_16>
    71c0:	b110      	cbz	r0, 71c8 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    71c2:	4b76      	ldr	r3, [pc, #472]	; (739c <SystemInit+0x1f4>)
    71c4:	4a76      	ldr	r2, [pc, #472]	; (73a0 <SystemInit+0x1f8>)
    71c6:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    71c8:	f7ff ffb4 	bl	7134 <errata_108>
    71cc:	b128      	cbz	r0, 71da <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    71ce:	4b75      	ldr	r3, [pc, #468]	; (73a4 <SystemInit+0x1fc>)
    71d0:	4a75      	ldr	r2, [pc, #468]	; (73a8 <SystemInit+0x200>)
    71d2:	681b      	ldr	r3, [r3, #0]
    71d4:	f3c3 3342 	ubfx	r3, r3, #13, #3
    71d8:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    71da:	f7ff ffcb 	bl	7174 <errata_16>
    71de:	b120      	cbz	r0, 71ea <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    71e0:	4a72      	ldr	r2, [pc, #456]	; (73ac <SystemInit+0x204>)
    71e2:	68d3      	ldr	r3, [r2, #12]
    71e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    71e8:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    71ea:	f7ff ffa3 	bl	7134 <errata_108>
    71ee:	b140      	cbz	r0, 7202 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    71f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    71f4:	2200      	movs	r2, #0
    71f6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    71fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    71fe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    7202:	f7ff ffb7 	bl	7174 <errata_16>
    7206:	b110      	cbz	r0, 720e <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    7208:	4b69      	ldr	r3, [pc, #420]	; (73b0 <SystemInit+0x208>)
    720a:	2203      	movs	r2, #3
    720c:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    720e:	f7ff ffb1 	bl	7174 <errata_16>
    7212:	b140      	cbz	r0, 7226 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    7214:	4b67      	ldr	r3, [pc, #412]	; (73b4 <SystemInit+0x20c>)
    7216:	2205      	movs	r2, #5
    7218:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    721a:	2201      	movs	r2, #1
    721c:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    721e:	2200      	movs	r2, #0
    7220:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    7222:	223f      	movs	r2, #63	; 0x3f
    7224:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    7226:	4b64      	ldr	r3, [pc, #400]	; (73b8 <SystemInit+0x210>)
    7228:	781b      	ldrb	r3, [r3, #0]
    722a:	2b06      	cmp	r3, #6
    722c:	d150      	bne.n	72d0 <SystemInit+0x128>
    722e:	4b63      	ldr	r3, [pc, #396]	; (73bc <SystemInit+0x214>)
    7230:	681b      	ldr	r3, [r3, #0]
    7232:	0719      	lsls	r1, r3, #28
    7234:	d14c      	bne.n	72d0 <SystemInit+0x128>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    7236:	4b62      	ldr	r3, [pc, #392]	; (73c0 <SystemInit+0x218>)
    7238:	681b      	ldr	r3, [r3, #0]
    723a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    723e:	2b50      	cmp	r3, #80	; 0x50
    7240:	d146      	bne.n	72d0 <SystemInit+0x128>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7246:	4b5f      	ldr	r3, [pc, #380]	; (73c4 <SystemInit+0x21c>)
    7248:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    724c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    7250:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    7254:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    7258:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    725c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    7260:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    7264:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    7268:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    726c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7270:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    7274:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    7278:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    727c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    7280:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    7284:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    7288:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    728c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    7290:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    7294:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    7298:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    729c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    72a0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    72a4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    72a8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    72ac:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    72b0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    72b4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    72b8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    72bc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    72c0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    72c4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    72c8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    72cc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    72d0:	f7ff ff30 	bl	7134 <errata_108>
    72d4:	b128      	cbz	r0, 72e2 <SystemInit+0x13a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    72d6:	4b3c      	ldr	r3, [pc, #240]	; (73c8 <SystemInit+0x220>)
    72d8:	4a3c      	ldr	r2, [pc, #240]	; (73cc <SystemInit+0x224>)
    72da:	681b      	ldr	r3, [r3, #0]
    72dc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    72e0:	6013      	str	r3, [r2, #0]
    if (errata_136()){
    72e2:	f7ff ff27 	bl	7134 <errata_108>
    72e6:	b148      	cbz	r0, 72fc <SystemInit+0x154>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    72e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72ec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    72f0:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    72f2:	bf44      	itt	mi
    72f4:	f06f 0201 	mvnmi.w	r2, #1
    72f8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
}


static bool errata_182(void)
{
    if (*(uint32_t *)0x10000130ul == 0x6ul){
    72fc:	4b34      	ldr	r3, [pc, #208]	; (73d0 <SystemInit+0x228>)
    72fe:	681b      	ldr	r3, [r3, #0]
    7300:	2b06      	cmp	r3, #6
    7302:	d108      	bne.n	7316 <SystemInit+0x16e>
        if (*(uint32_t *)0x10000134ul == 0x6ul){
    7304:	4b33      	ldr	r3, [pc, #204]	; (73d4 <SystemInit+0x22c>)
    7306:	681b      	ldr	r3, [r3, #0]
    7308:	2b06      	cmp	r3, #6
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    730a:	bf01      	itttt	eq
    730c:	4a32      	ldreq	r2, [pc, #200]	; (73d8 <SystemInit+0x230>)
    730e:	6813      	ldreq	r3, [r2, #0]
    7310:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
    7314:	6013      	streq	r3, [r2, #0]
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7316:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    731a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    731e:	2a00      	cmp	r2, #0
    7320:	db03      	blt.n	732a <SystemInit+0x182>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    7322:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7326:	2b00      	cmp	r3, #0
    7328:	da2f      	bge.n	738a <SystemInit+0x1e2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    732a:	4b2c      	ldr	r3, [pc, #176]	; (73dc <SystemInit+0x234>)
    732c:	2201      	movs	r2, #1
    732e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7332:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7336:	2a00      	cmp	r2, #0
    7338:	d0fb      	beq.n	7332 <SystemInit+0x18a>
            NRF_UICR->PSELRESET[0] = 21;
    733a:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    733e:	2115      	movs	r1, #21
    7340:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7344:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7348:	2a00      	cmp	r2, #0
    734a:	d0fb      	beq.n	7344 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[1] = 21;
    734c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7350:	2215      	movs	r2, #21
    7352:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7356:	4b21      	ldr	r3, [pc, #132]	; (73dc <SystemInit+0x234>)
    7358:	461a      	mov	r2, r3
    735a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    735e:	2900      	cmp	r1, #0
    7360:	d0fb      	beq.n	735a <SystemInit+0x1b2>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    7362:	2100      	movs	r1, #0
    7364:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7368:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    736c:	2b00      	cmp	r3, #0
    736e:	d0fb      	beq.n	7368 <SystemInit+0x1c0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7370:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7374:	491a      	ldr	r1, [pc, #104]	; (73e0 <SystemInit+0x238>)
    7376:	4b1b      	ldr	r3, [pc, #108]	; (73e4 <SystemInit+0x23c>)
    7378:	68ca      	ldr	r2, [r1, #12]
    737a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    737e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    7380:	60cb      	str	r3, [r1, #12]
    7382:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    7386:	bf00      	nop
    7388:	e7fd      	b.n	7386 <SystemInit+0x1de>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    738a:	4b17      	ldr	r3, [pc, #92]	; (73e8 <SystemInit+0x240>)
    738c:	4a17      	ldr	r2, [pc, #92]	; (73ec <SystemInit+0x244>)
    738e:	601a      	str	r2, [r3, #0]
}
    7390:	bd08      	pop	{r3, pc}
    7392:	bf00      	nop
    7394:	10000324 	.word	0x10000324
    7398:	40013540 	.word	0x40013540
    739c:	4007c074 	.word	0x4007c074
    73a0:	baadf00d 	.word	0xbaadf00d
    73a4:	10000244 	.word	0x10000244
    73a8:	4000053c 	.word	0x4000053c
    73ac:	e000edf0 	.word	0xe000edf0
    73b0:	400005a0 	.word	0x400005a0
    73b4:	40005610 	.word	0x40005610
    73b8:	f0000fe0 	.word	0xf0000fe0
    73bc:	f0000fe4 	.word	0xf0000fe4
    73c0:	f0000fe8 	.word	0xf0000fe8
    73c4:	4000c000 	.word	0x4000c000
    73c8:	10000258 	.word	0x10000258
    73cc:	40000ee4 	.word	0x40000ee4
    73d0:	10000130 	.word	0x10000130
    73d4:	10000134 	.word	0x10000134
    73d8:	4000173c 	.word	0x4000173c
    73dc:	4001e000 	.word	0x4001e000
    73e0:	e000ed00 	.word	0xe000ed00
    73e4:	05fa0004 	.word	0x05fa0004
    73e8:	2000858c 	.word	0x2000858c
    73ec:	03d09000 	.word	0x03d09000

000073f0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    73f0:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    73f2:	4c11      	ldr	r4, [pc, #68]	; (7438 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    73f4:	4a11      	ldr	r2, [pc, #68]	; (743c <_DoInit+0x4c>)
    73f6:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    73f8:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    73fa:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    73fe:	4b10      	ldr	r3, [pc, #64]	; (7440 <_DoInit+0x50>)
    7400:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    7402:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    7404:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    7408:	4a0e      	ldr	r2, [pc, #56]	; (7444 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    740a:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    740c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    740e:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    7410:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    7412:	490d      	ldr	r1, [pc, #52]	; (7448 <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
    7414:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
    7416:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    7418:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    741a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    741c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    741e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7420:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    7422:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    7424:	f012 fe13 	bl	1a04e <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    7428:	4908      	ldr	r1, [pc, #32]	; (744c <_DoInit+0x5c>)
    742a:	4620      	mov	r0, r4
    742c:	f012 fe0f 	bl	1a04e <strcpy>
  p->acID[6] = ' ';
    7430:	2320      	movs	r3, #32
    7432:	71a3      	strb	r3, [r4, #6]
}
    7434:	bd10      	pop	{r4, pc}
    7436:	bf00      	nop
    7438:	200006bc 	.word	0x200006bc
    743c:	000215f3 	.word	0x000215f3
    7440:	200020c0 	.word	0x200020c0
    7444:	200020b0 	.word	0x200020b0
    7448:	000215fc 	.word	0x000215fc
    744c:	00021600 	.word	0x00021600

00007450 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    7452:	4c18      	ldr	r4, [pc, #96]	; (74b4 <SEGGER_RTT_WriteNoLock+0x64>)
    7454:	2318      	movs	r3, #24
    7456:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    745a:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    745e:	4425      	add	r5, r4
  switch (pRing->Flags) {
    7460:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    7462:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7464:	460f      	mov	r7, r1
    7466:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    7468:	d011      	beq.n	748e <SEGGER_RTT_WriteNoLock+0x3e>
    746a:	b124      	cbz	r4, 7476 <SEGGER_RTT_WriteNoLock+0x26>
    746c:	2c02      	cmp	r4, #2
    746e:	d01b      	beq.n	74a8 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    7470:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    7472:	4620      	mov	r0, r4
    7474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    7476:	4628      	mov	r0, r5
    7478:	f011 ff58 	bl	1932c <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    747c:	42b0      	cmp	r0, r6
    747e:	d3f8      	bcc.n	7472 <SEGGER_RTT_WriteNoLock+0x22>
      _WriteNoCheck(pRing, pData, NumBytes);
    7480:	4632      	mov	r2, r6
    7482:	4639      	mov	r1, r7
    7484:	4628      	mov	r0, r5
    7486:	f011 ff5f 	bl	19348 <_WriteNoCheck>
    748a:	4634      	mov	r4, r6
    748c:	e7f1      	b.n	7472 <SEGGER_RTT_WriteNoLock+0x22>
    Avail = _GetAvailWriteSpace(pRing);
    748e:	4628      	mov	r0, r5
    7490:	f011 ff4c 	bl	1932c <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    7494:	4286      	cmp	r6, r0
    7496:	4634      	mov	r4, r6
    7498:	bf28      	it	cs
    749a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    749c:	4622      	mov	r2, r4
    749e:	4639      	mov	r1, r7
    74a0:	4628      	mov	r0, r5
    74a2:	f011 ff51 	bl	19348 <_WriteNoCheck>
    break;
    74a6:	e7e4      	b.n	7472 <SEGGER_RTT_WriteNoLock+0x22>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    74a8:	4628      	mov	r0, r5
}
    74aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    74ae:	f011 bf65 	b.w	1937c <_WriteBlocking>
    74b2:	bf00      	nop
    74b4:	200006bc 	.word	0x200006bc

000074b8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    74b8:	b513      	push	{r0, r1, r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    74ba:	4c11      	ldr	r4, [pc, #68]	; (7500 <sys_rand32_get+0x48>)
    74bc:	f3bf 8f5b 	dmb	ish
    74c0:	6820      	ldr	r0, [r4, #0]
    74c2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    74c6:	b960      	cbnz	r0, 74e2 <sys_rand32_get+0x2a>
    74c8:	480e      	ldr	r0, [pc, #56]	; (7504 <sys_rand32_get+0x4c>)
    74ca:	f00e ff5d 	bl	16388 <z_impl_device_get_binding>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    74ce:	f3bf 8f5b 	dmb	ish
    74d2:	e854 3f00 	ldrex	r3, [r4]
    74d6:	e844 0200 	strex	r2, r0, [r4]
    74da:	2a00      	cmp	r2, #0
    74dc:	d1f9      	bne.n	74d2 <sys_rand32_get+0x1a>
    74de:	f3bf 8f5b 	dmb	ish
	return api->get_entropy(dev, buffer, length);
    74e2:	6843      	ldr	r3, [r0, #4]
    74e4:	2204      	movs	r2, #4
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	eb0d 0102 	add.w	r1, sp, r2
    74ec:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    74ee:	2800      	cmp	r0, #0
    74f0:	da02      	bge.n	74f8 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    74f2:	f000 fd43 	bl	7f7c <z_timer_cycle_get_32>
    74f6:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    74f8:	9801      	ldr	r0, [sp, #4]
    74fa:	b002      	add	sp, #8
    74fc:	bd10      	pop	{r4, pc}
    74fe:	bf00      	nop
    7500:	20000764 	.word	0x20000764
    7504:	00021607 	.word	0x00021607

00007508 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    7508:	4b08      	ldr	r3, [pc, #32]	; (752c <get_flash_area_from_id+0x24>)
{
    750a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    750c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    750e:	4b08      	ldr	r3, [pc, #32]	; (7530 <get_flash_area_from_id+0x28>)
    7510:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    7512:	2300      	movs	r3, #0
    7514:	429d      	cmp	r5, r3
    7516:	dc02      	bgt.n	751e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    7518:	2200      	movs	r2, #0
}
    751a:	4610      	mov	r0, r2
    751c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    751e:	011c      	lsls	r4, r3, #4
    7520:	190a      	adds	r2, r1, r4
    7522:	5d0c      	ldrb	r4, [r1, r4]
    7524:	4284      	cmp	r4, r0
    7526:	d0f8      	beq.n	751a <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
    7528:	3301      	adds	r3, #1
    752a:	e7f3      	b.n	7514 <get_flash_area_from_id+0xc>
    752c:	0002051c 	.word	0x0002051c
    7530:	20008590 	.word	0x20008590

00007534 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    7534:	4b08      	ldr	r3, [pc, #32]	; (7558 <flash_area_open+0x24>)
    7536:	681b      	ldr	r3, [r3, #0]
{
    7538:	b510      	push	{r4, lr}
    753a:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    753c:	b12b      	cbz	r3, 754a <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    753e:	f7ff ffe3 	bl	7508 <get_flash_area_from_id>
	if (area == NULL) {
    7542:	b128      	cbz	r0, 7550 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    7544:	6020      	str	r0, [r4, #0]
	return 0;
    7546:	2000      	movs	r0, #0
}
    7548:	bd10      	pop	{r4, pc}
		return -EACCES;
    754a:	f06f 000c 	mvn.w	r0, #12
    754e:	e7fb      	b.n	7548 <flash_area_open+0x14>
		return -ENOENT;
    7550:	f06f 0001 	mvn.w	r0, #1
    7554:	e7f8      	b.n	7548 <flash_area_open+0x14>
    7556:	bf00      	nop
    7558:	20008590 	.word	0x20008590

0000755c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
    755c:	b530      	push	{r4, r5, lr}
    755e:	b089      	sub	sp, #36	; 0x24
    7560:	460c      	mov	r4, r1
    7562:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    7564:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    7566:	f7ff ffcf 	bl	7508 <get_flash_area_from_id>
	if (fa == NULL) {
    756a:	b1b0      	cbz	r0, 759a <flash_area_get_sectors+0x3e>
	cb_data->area_off = fa->fa_off;
    756c:	6843      	ldr	r3, [r0, #4]
    756e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    7570:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    7572:	6822      	ldr	r2, [r4, #0]
    7574:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    7576:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    757a:	2300      	movs	r3, #0
	cb_data->status = 0;
    757c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    7580:	9305      	str	r3, [sp, #20]
    7582:	f00e ff01 	bl	16388 <z_impl_device_get_binding>
	flash_page_foreach(flash_dev, cb, cb_data);
    7586:	aa01      	add	r2, sp, #4
    7588:	4905      	ldr	r1, [pc, #20]	; (75a0 <flash_area_get_sectors+0x44>)
    758a:	f017 ffee 	bl	1f56a <flash_page_foreach>
	if (cb_data->status == 0) {
    758e:	9807      	ldr	r0, [sp, #28]
    7590:	b908      	cbnz	r0, 7596 <flash_area_get_sectors+0x3a>
		*cnt = cb_data->ret_idx;
    7592:	9b05      	ldr	r3, [sp, #20]
    7594:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    7596:	b009      	add	sp, #36	; 0x24
    7598:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    759a:	f06f 0015 	mvn.w	r0, #21
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    759e:	e7fa      	b.n	7596 <flash_area_get_sectors+0x3a>
    75a0:	00019a97 	.word	0x00019a97

000075a4 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, void *value, size_t val_len)
{
    75a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct settings_store *cs;
	struct settings_dup_check_arg cdca;

	cs = settings_save_dst;
    75a8:	4b11      	ldr	r3, [pc, #68]	; (75f0 <settings_save_one+0x4c>)
    75aa:	681d      	ldr	r5, [r3, #0]
{
    75ac:	4606      	mov	r6, r0
    75ae:	460f      	mov	r7, r1
    75b0:	4690      	mov	r8, r2
	if (!cs) {
    75b2:	b1bd      	cbz	r5, 75e4 <settings_save_one+0x40>
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
	cdca.val_len = val_len;
	cs->cs_itf->csi_load(cs, settings_dup_check_cb, &cdca);
    75b4:	686b      	ldr	r3, [r5, #4]
	cdca.is_dup = 0;
    75b6:	2400      	movs	r4, #0
	cdca.val = (char *)value;
    75b8:	e9cd 0100 	strd	r0, r1, [sp]
	cdca.val_len = val_len;
    75bc:	e9cd 2402 	strd	r2, r4, [sp, #8]
	cs->cs_itf->csi_load(cs, settings_dup_check_cb, &cdca);
    75c0:	681b      	ldr	r3, [r3, #0]
    75c2:	490c      	ldr	r1, [pc, #48]	; (75f4 <settings_save_one+0x50>)
    75c4:	466a      	mov	r2, sp
    75c6:	4628      	mov	r0, r5
    75c8:	4798      	blx	r3
	if (cdca.is_dup == 1) {
    75ca:	9b03      	ldr	r3, [sp, #12]
    75cc:	2b01      	cmp	r3, #1
    75ce:	d00c      	beq.n	75ea <settings_save_one+0x46>
		return 0;
	}
	return cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    75d0:	686b      	ldr	r3, [r5, #4]
    75d2:	463a      	mov	r2, r7
    75d4:	689c      	ldr	r4, [r3, #8]
    75d6:	4631      	mov	r1, r6
    75d8:	4643      	mov	r3, r8
    75da:	4628      	mov	r0, r5
    75dc:	47a0      	blx	r4
}
    75de:	b004      	add	sp, #16
    75e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    75e4:	f06f 0001 	mvn.w	r0, #1
    75e8:	e7f9      	b.n	75de <settings_save_one+0x3a>
		return 0;
    75ea:	4620      	mov	r0, r4
    75ec:	e7f7      	b.n	75de <settings_save_one+0x3a>
    75ee:	bf00      	nop
    75f0:	20000770 	.word	0x20000770
    75f4:	00019bc1 	.word	0x00019bc1

000075f8 <settings_src_register>:
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    75f8:	4b0e      	ldr	r3, [pc, #56]	; (7634 <settings_src_register+0x3c>)
{
    75fa:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    75fc:	681c      	ldr	r4, [r3, #0]
	prev = NULL;
    75fe:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
    7600:	4622      	mov	r2, r4
    7602:	b932      	cbnz	r2, 7612 <settings_src_register+0x1a>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node);

Z_GENLIST_INSERT(slist, snode)
    7604:	b941      	cbnz	r1, 7618 <settings_src_register+0x20>
	parent->next = child;
    7606:	6004      	str	r4, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
    7608:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    760a:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    760c:	b95a      	cbnz	r2, 7626 <settings_src_register+0x2e>
	list->tail = node;
    760e:	6058      	str	r0, [r3, #4]
    7610:	e009      	b.n	7626 <settings_src_register+0x2e>
    7612:	4611      	mov	r1, r2
    7614:	6812      	ldr	r2, [r2, #0]
    7616:	e7f4      	b.n	7602 <settings_src_register+0xa>
Z_GENLIST_INSERT(slist, snode)
    7618:	680c      	ldr	r4, [r1, #0]
    761a:	b93c      	cbnz	r4, 762c <settings_src_register+0x34>
	parent->next = child;
    761c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    761e:	685a      	ldr	r2, [r3, #4]
    7620:	b912      	cbnz	r2, 7628 <settings_src_register+0x30>
	list->head = node;
    7622:	e9c3 0000 	strd	r0, r0, [r3]
}
    7626:	bd10      	pop	{r4, pc}
	parent->next = child;
    7628:	6010      	str	r0, [r2, #0]
    762a:	e7f0      	b.n	760e <settings_src_register+0x16>
    762c:	6004      	str	r4, [r0, #0]
    762e:	6008      	str	r0, [r1, #0]
    7630:	e7f9      	b.n	7626 <settings_src_register+0x2e>
    7632:	bf00      	nop
    7634:	20000768 	.word	0x20000768

00007638 <settings_dst_register>:
	settings_save_dst = cs;
    7638:	4b01      	ldr	r3, [pc, #4]	; (7640 <settings_dst_register+0x8>)
    763a:	6018      	str	r0, [r3, #0]
}
    763c:	4770      	bx	lr
    763e:	bf00      	nop
    7640:	20000770 	.word	0x20000770

00007644 <settings_load>:
{
    7644:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    7646:	4b09      	ldr	r3, [pc, #36]	; (766c <settings_load+0x28>)
    7648:	681c      	ldr	r4, [r3, #0]
    764a:	b14c      	cbz	r4, 7660 <settings_load+0x1c>
		cs->cs_itf->csi_load(cs, settings_load_cb, NULL);
    764c:	4d08      	ldr	r5, [pc, #32]	; (7670 <settings_load+0x2c>)
    764e:	6863      	ldr	r3, [r4, #4]
    7650:	4620      	mov	r0, r4
    7652:	681b      	ldr	r3, [r3, #0]
    7654:	2200      	movs	r2, #0
    7656:	4629      	mov	r1, r5
    7658:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    765a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    765c:	2c00      	cmp	r4, #0
    765e:	d1f6      	bne.n	764e <settings_load+0xa>
	return settings_commit(NULL);
    7660:	2000      	movs	r0, #0
}
    7662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return settings_commit(NULL);
    7666:	f000 b843 	b.w	76f0 <settings_commit>
    766a:	bf00      	nop
    766c:	20000768 	.word	0x20000768
    7670:	00019bbb 	.word	0x00019bbb

00007674 <settings_store_init>:
	list->head = NULL;
    7674:	4b02      	ldr	r3, [pc, #8]	; (7680 <settings_store_init+0xc>)
    7676:	2200      	movs	r2, #0
	list->tail = NULL;
    7678:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    767c:	4770      	bx	lr
    767e:	bf00      	nop
    7680:	20000768 	.word	0x20000768

00007684 <settings_handler_lookup>:

/*
 * Find settings_handler based on name.
 */
static struct settings_handler *settings_handler_lookup(char *name)
{
    7684:	b538      	push	{r3, r4, r5, lr}
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    7686:	4b07      	ldr	r3, [pc, #28]	; (76a4 <settings_handler_lookup+0x20>)
    7688:	681c      	ldr	r4, [r3, #0]
{
    768a:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    768c:	b914      	cbnz	r4, 7694 <settings_handler_lookup+0x10>
		if (!strcmp(name, ch->name)) {
			return ch;
		}
	}
	return NULL;
    768e:	2400      	movs	r4, #0
}
    7690:	4620      	mov	r0, r4
    7692:	bd38      	pop	{r3, r4, r5, pc}
		if (!strcmp(name, ch->name)) {
    7694:	6861      	ldr	r1, [r4, #4]
    7696:	4628      	mov	r0, r5
    7698:	f012 fcea 	bl	1a070 <strcmp>
    769c:	2800      	cmp	r0, #0
    769e:	d0f7      	beq.n	7690 <settings_handler_lookup+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    76a0:	6824      	ldr	r4, [r4, #0]
	return node->next;
    76a2:	e7f3      	b.n	768c <settings_handler_lookup+0x8>
    76a4:	20000774 	.word	0x20000774

000076a8 <settings_init>:
{
    76a8:	b510      	push	{r4, lr}
	if (!settings_cmd_inited) {
    76aa:	4c05      	ldr	r4, [pc, #20]	; (76c0 <settings_init+0x18>)
    76ac:	7823      	ldrb	r3, [r4, #0]
    76ae:	b933      	cbnz	r3, 76be <settings_init+0x16>
	list->head = NULL;
    76b0:	4a04      	ldr	r2, [pc, #16]	; (76c4 <settings_init+0x1c>)
	list->tail = NULL;
    76b2:	e9c2 3300 	strd	r3, r3, [r2]
		settings_store_init();
    76b6:	f7ff ffdd 	bl	7674 <settings_store_init>
		settings_cmd_inited = 1U;
    76ba:	2301      	movs	r3, #1
    76bc:	7023      	strb	r3, [r4, #0]
}
    76be:	bd10      	pop	{r4, pc}
    76c0:	200024c0 	.word	0x200024c0
    76c4:	20000774 	.word	0x20000774

000076c8 <settings_register>:
{
    76c8:	b510      	push	{r4, lr}
    76ca:	4604      	mov	r4, r0
	if (settings_handler_lookup(handler->name)) {
    76cc:	6840      	ldr	r0, [r0, #4]
    76ce:	f7ff ffd9 	bl	7684 <settings_handler_lookup>
    76d2:	b940      	cbnz	r0, 76e6 <settings_register+0x1e>
Z_GENLIST_PREPEND(slist, snode)
    76d4:	4b05      	ldr	r3, [pc, #20]	; (76ec <settings_register+0x24>)
    76d6:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    76d8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    76da:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    76dc:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    76de:	b90a      	cbnz	r2, 76e4 <settings_register+0x1c>
	list->tail = node;
    76e0:	605c      	str	r4, [r3, #4]
	return 0;
    76e2:	4610      	mov	r0, r2
}
    76e4:	bd10      	pop	{r4, pc}
		return -EEXIST;
    76e6:	f06f 0010 	mvn.w	r0, #16
    76ea:	e7fb      	b.n	76e4 <settings_register+0x1c>
    76ec:	20000774 	.word	0x20000774

000076f0 <settings_commit>:
	}
	return ch->h_get(name_argc - 1, &name_argv[1], buf, buf_len);
}

int settings_commit(char *name)
{
    76f0:	b530      	push	{r4, r5, lr}
	char *name_argv[SETTINGS_MAX_DIR_DEPTH];
	struct settings_handler *ch;
	int rc;
	int rc2;

	if (name) {
    76f2:	4604      	mov	r4, r0
{
    76f4:	b08b      	sub	sp, #44	; 0x2c
	if (name) {
    76f6:	b168      	cbz	r0, 7714 <settings_commit+0x24>
		ch = settings_parse_and_lookup(name, &name_argc, name_argv);
    76f8:	aa02      	add	r2, sp, #8
    76fa:	a901      	add	r1, sp, #4
    76fc:	f012 fabb 	bl	19c76 <settings_parse_and_lookup>
		if (!ch) {
    7700:	b1b0      	cbz	r0, 7730 <settings_commit+0x40>
			return -EINVAL;
		}
		if (ch->h_commit) {
    7702:	6903      	ldr	r3, [r0, #16]
    7704:	b91b      	cbnz	r3, 770e <settings_commit+0x1e>
			return ch->h_commit();
		} else {
			return 0;
    7706:	2400      	movs	r4, #0
				}
			}
		}
		return rc;
	}
}
    7708:	4620      	mov	r0, r4
    770a:	b00b      	add	sp, #44	; 0x2c
    770c:	bd30      	pop	{r4, r5, pc}
			return ch->h_commit();
    770e:	4798      	blx	r3
    7710:	4604      	mov	r4, r0
    7712:	e7f9      	b.n	7708 <settings_commit+0x18>
		SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    7714:	4b08      	ldr	r3, [pc, #32]	; (7738 <settings_commit+0x48>)
    7716:	681d      	ldr	r5, [r3, #0]
    7718:	2d00      	cmp	r5, #0
    771a:	d0f4      	beq.n	7706 <settings_commit+0x16>
			if (ch->h_commit) {
    771c:	692b      	ldr	r3, [r5, #16]
    771e:	b11b      	cbz	r3, 7728 <settings_commit+0x38>
				rc2 = ch->h_commit();
    7720:	4798      	blx	r3
					rc = rc2;
    7722:	2c00      	cmp	r4, #0
    7724:	bf08      	it	eq
    7726:	4604      	moveq	r4, r0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7728:	682d      	ldr	r5, [r5, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    772a:	2d00      	cmp	r5, #0
    772c:	d1f6      	bne.n	771c <settings_commit+0x2c>
    772e:	e7eb      	b.n	7708 <settings_commit+0x18>
			return -EINVAL;
    7730:	f06f 0415 	mvn.w	r4, #21
    7734:	e7e8      	b.n	7708 <settings_commit+0x18>
    7736:	bf00      	nop
    7738:	20000774 	.word	0x20000774

0000773c <settings_subsys_init>:
}

#endif

int settings_subsys_init(void)
{
    773c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static bool settings_initialized;
	int err;

	if (settings_initialized) {
    773e:	4d20      	ldr	r5, [pc, #128]	; (77c0 <settings_subsys_init+0x84>)
    7740:	782a      	ldrb	r2, [r5, #0]
    7742:	2a00      	cmp	r2, #0
    7744:	d138      	bne.n	77b8 <settings_subsys_init+0x7c>
		return 0;
	}

	settings_init();
    7746:	f7ff ffaf 	bl	76a8 <settings_init>
	u32_t cnt = CONFIG_SETTINGS_FCB_NUM_AREAS + 1;
    774a:	2309      	movs	r3, #9
	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &cnt,
    774c:	4a1d      	ldr	r2, [pc, #116]	; (77c4 <settings_subsys_init+0x88>)
	u32_t cnt = CONFIG_SETTINGS_FCB_NUM_AREAS + 1;
    774e:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(DT_FLASH_AREA_STORAGE_ID, &cnt,
    7750:	4669      	mov	r1, sp
    7752:	2003      	movs	r0, #3
    7754:	f7ff ff02 	bl	755c <flash_area_get_sectors>
	if (rc != 0 && rc != -ENOMEM) {
    7758:	b138      	cbz	r0, 776a <settings_subsys_init+0x2e>
    775a:	300c      	adds	r0, #12
    775c:	d005      	beq.n	776a <settings_subsys_init+0x2e>
		k_panic();
    775e:	4040      	eors	r0, r0
    7760:	f380 8811 	msr	BASEPRI, r0
    7764:	f04f 0005 	mov.w	r0, #5
    7768:	df02      	svc	2
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
    776a:	4c17      	ldr	r4, [pc, #92]	; (77c8 <settings_subsys_init+0x8c>)
    776c:	9b00      	ldr	r3, [sp, #0]
    776e:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
    7770:	4620      	mov	r0, r4
    7772:	f000 f931 	bl	79d8 <settings_fcb_src>
	if (rc != 0) {
    7776:	b1a8      	cbz	r0, 77a4 <settings_subsys_init+0x68>
		rc = flash_area_open(DT_FLASH_AREA_STORAGE_ID, &fap);
    7778:	a901      	add	r1, sp, #4
    777a:	2003      	movs	r0, #3
    777c:	f7ff feda 	bl	7534 <flash_area_open>
		if (rc == 0) {
    7780:	4601      	mov	r1, r0
    7782:	2800      	cmp	r0, #0
    7784:	d1eb      	bne.n	775e <settings_subsys_init+0x22>
			rc = flash_area_erase(fap, 0, fap->fa_size);
    7786:	9801      	ldr	r0, [sp, #4]
    7788:	6882      	ldr	r2, [r0, #8]
    778a:	f012 f9e9 	bl	19b60 <flash_area_erase>
    778e:	4606      	mov	r6, r0
			flash_area_close(fap);
    7790:	9801      	ldr	r0, [sp, #4]
    7792:	f012 f99e 	bl	19ad2 <flash_area_close>
		if (rc != 0) {
    7796:	2e00      	cmp	r6, #0
    7798:	d1e1      	bne.n	775e <settings_subsys_init+0x22>
			rc = settings_fcb_src(&config_init_settings_fcb);
    779a:	4620      	mov	r0, r4
    779c:	f000 f91c 	bl	79d8 <settings_fcb_src>
	if (rc != 0) {
    77a0:	2800      	cmp	r0, #0
    77a2:	d1dc      	bne.n	775e <settings_subsys_init+0x22>
	rc = settings_fcb_dst(&config_init_settings_fcb);
    77a4:	4808      	ldr	r0, [pc, #32]	; (77c8 <settings_subsys_init+0x8c>)
    77a6:	f000 f941 	bl	7a2c <settings_fcb_dst>
	if (rc != 0) {
    77aa:	2800      	cmp	r0, #0
    77ac:	d1d7      	bne.n	775e <settings_subsys_init+0x22>
	settings_mount_fcb_backend(&config_init_settings_fcb);
    77ae:	4806      	ldr	r0, [pc, #24]	; (77c8 <settings_subsys_init+0x8c>)
    77b0:	f000 f946 	bl	7a40 <settings_mount_fcb_backend>
	settings_init_fcb(); /* func rises kernel panic once error */
	err = 0;
#endif

	if (!err) {
		settings_initialized = true;
    77b4:	2301      	movs	r3, #1
    77b6:	702b      	strb	r3, [r5, #0]
	}

	return err;
}
    77b8:	2000      	movs	r0, #0
    77ba:	b002      	add	sp, #8
    77bc:	bd70      	pop	{r4, r5, r6, pc}
    77be:	bf00      	nop
    77c0:	200024c1 	.word	0x200024c1
    77c4:	2000077c 	.word	0x2000077c
    77c8:	20008594 	.word	0x20008594

000077cc <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
    77cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    77d0:	b089      	sub	sp, #36	; 0x24
    77d2:	e9cd 2300 	strd	r2, r3, [sp]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	u8_t rbs = settings_io_cb.rwbs;
    77d6:	4b26      	ldr	r3, [pc, #152]	; (7870 <settings_line_raw_read_until+0xa4>)
    77d8:	f893 a00c 	ldrb.w	sl, [r3, #12]
{
    77dc:	4607      	mov	r7, r0
    77de:	4689      	mov	r9, r1
	off_t off;
	int rc;

	rem_size = len_req;
    77e0:	4615      	mov	r5, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
    77e2:	4698      	mov	r8, r3
	while (rem_size) {
    77e4:	b965      	cbnz	r5, 7800 <settings_line_raw_read_until+0x34>
    77e6:	462e      	mov	r6, r5

		out += len;
		seek += len;
	}

	*len_read = len_req - rem_size;
    77e8:	9b00      	ldr	r3, [sp, #0]
    77ea:	1b5d      	subs	r5, r3, r5
    77ec:	9b01      	ldr	r3, [sp, #4]
    77ee:	601d      	str	r5, [r3, #0]

	if (until_char != NULL) {
    77f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    77f2:	2b00      	cmp	r3, #0
    77f4:	d03a      	beq.n	786c <settings_line_raw_read_until+0xa0>
		return (rc) ? 0 : 1;
    77f6:	f086 0001 	eor.w	r0, r6, #1
	}

	return 0;
}
    77fa:	b009      	add	sp, #36	; 0x24
    77fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		read_size = sizeof(temp_buf);
    7800:	2310      	movs	r3, #16
		off = seek / rbs * rbs;
    7802:	fb97 fbfa 	sdiv	fp, r7, sl
    7806:	fb0a fb0b 	mul.w	fp, sl, fp
		read_size = sizeof(temp_buf);
    780a:	9303      	str	r3, [sp, #12]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
    780c:	f8d8 4000 	ldr.w	r4, [r8]
    7810:	9813      	ldr	r0, [sp, #76]	; 0x4c
    7812:	ab03      	add	r3, sp, #12
    7814:	aa04      	add	r2, sp, #16
    7816:	4659      	mov	r1, fp
    7818:	47a0      	blx	r4
		if (rc) {
    781a:	4606      	mov	r6, r0
    781c:	bb18      	cbnz	r0, 7866 <settings_line_raw_read_until+0x9a>
		len = read_size - off;
    781e:	9c03      	ldr	r4, [sp, #12]
    7820:	eba7 0b0b 	sub.w	fp, r7, fp
    7824:	ab04      	add	r3, sp, #16
    7826:	eba4 040b 	sub.w	r4, r4, fp
		len = MIN(rem_size, len);
    782a:	449b      	add	fp, r3
		if (until_char != NULL) {
    782c:	9b12      	ldr	r3, [sp, #72]	; 0x48
		len = MIN(rem_size, len);
    782e:	42ac      	cmp	r4, r5
    7830:	bf28      	it	cs
    7832:	462c      	movcs	r4, r5
		if (until_char != NULL) {
    7834:	b143      	cbz	r3, 7848 <settings_line_raw_read_until+0x7c>
			pend = memchr(&temp_buf[off], *until_char, len);
    7836:	4622      	mov	r2, r4
    7838:	7819      	ldrb	r1, [r3, #0]
    783a:	4658      	mov	r0, fp
    783c:	f012 fc80 	bl	1a140 <memchr>
			if (pend != NULL) {
    7840:	b110      	cbz	r0, 7848 <settings_line_raw_read_until+0x7c>
				len = pend - &temp_buf[off];
    7842:	eba0 040b 	sub.w	r4, r0, fp
				rc = 1; /* will cause loop expiration */
    7846:	2601      	movs	r6, #1
		memcpy(out, &temp_buf[off], len);
    7848:	4622      	mov	r2, r4
    784a:	4659      	mov	r1, fp
    784c:	4648      	mov	r0, r9
    784e:	f012 fc2b 	bl	1a0a8 <memcpy>
		if (exp_size > read_size || rc) {
    7852:	9a03      	ldr	r2, [sp, #12]
    7854:	2a0f      	cmp	r2, #15
		rem_size -= len;
    7856:	eba5 0504 	sub.w	r5, r5, r4
		if (exp_size > read_size || rc) {
    785a:	d9c5      	bls.n	77e8 <settings_line_raw_read_until+0x1c>
    785c:	2e00      	cmp	r6, #0
    785e:	d1c3      	bne.n	77e8 <settings_line_raw_read_until+0x1c>
		out += len;
    7860:	44a1      	add	r9, r4
		seek += len;
    7862:	4427      	add	r7, r4
    7864:	e7be      	b.n	77e4 <settings_line_raw_read_until+0x18>
			return -EIO;
    7866:	f06f 0004 	mvn.w	r0, #4
    786a:	e7c6      	b.n	77fa <settings_line_raw_read_until+0x2e>
	return 0;
    786c:	9812      	ldr	r0, [sp, #72]	; 0x48
    786e:	e7c4      	b.n	77fa <settings_line_raw_read_until+0x2e>
    7870:	200007c4 	.word	0x200007c4

00007874 <settings_line_write>:
{
    7874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t wbs = settings_io_cb.rwbs;
    7878:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 7934 <settings_line_write+0xc0>
{
    787c:	b087      	sub	sp, #28
	u8_t wbs = settings_io_cb.rwbs;
    787e:	f89a 700c 	ldrb.w	r7, [sl, #12]
{
    7882:	9301      	str	r3, [sp, #4]
    7884:	4683      	mov	fp, r0
    7886:	4689      	mov	r9, r1
    7888:	4690      	mov	r8, r2
	rem = strlen(name);
    788a:	f012 fbea 	bl	1a062 <strlen>
	w_size = rem - rem % wbs;
    788e:	fbb0 f4f7 	udiv	r4, r0, r7
    7892:	fb07 0414 	mls	r4, r7, r4, r0
    7896:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
    7898:	462b      	mov	r3, r5
    789a:	465a      	mov	r2, fp
    789c:	9901      	ldr	r1, [sp, #4]
    789e:	9810      	ldr	r0, [sp, #64]	; 0x40
    78a0:	f8da 6004 	ldr.w	r6, [sl, #4]
    78a4:	47b0      	blx	r6
	w_loc += w_size;
    78a6:	9b01      	ldr	r3, [sp, #4]
    78a8:	442b      	add	r3, r5
    78aa:	9301      	str	r3, [sp, #4]
	if (rem) {
    78ac:	b12c      	cbz	r4, 78ba <settings_line_write+0x46>
		memcpy(w_buf, name, rem);
    78ae:	4622      	mov	r2, r4
    78b0:	eb0b 0105 	add.w	r1, fp, r5
    78b4:	a802      	add	r0, sp, #8
    78b6:	f012 fbf7 	bl	1a0a8 <memcpy>
	w_buf[rem] = '=';
    78ba:	ab06      	add	r3, sp, #24
    78bc:	4423      	add	r3, r4
    78be:	223d      	movs	r2, #61	; 0x3d
    78c0:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
    78c4:	3401      	adds	r4, #1
		while (w_size < sizeof(w_buf)) {
    78c6:	2c0f      	cmp	r4, #15
    78c8:	d90d      	bls.n	78e6 <settings_line_write+0x72>
    78ca:	2500      	movs	r5, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
    78cc:	4623      	mov	r3, r4
    78ce:	aa02      	add	r2, sp, #8
    78d0:	9901      	ldr	r1, [sp, #4]
    78d2:	9810      	ldr	r0, [sp, #64]	; 0x40
    78d4:	f8da 6004 	ldr.w	r6, [sl, #4]
    78d8:	47b0      	blx	r6
		if (rc) {
    78da:	bb30      	cbnz	r0, 792a <settings_line_write+0xb6>
		if (done) {
    78dc:	bb3d      	cbnz	r5, 792e <settings_line_write+0xba>
		w_loc += w_size;
    78de:	9b01      	ldr	r3, [sp, #4]
    78e0:	4423      	add	r3, r4
    78e2:	9301      	str	r3, [sp, #4]
		w_size = 0;
    78e4:	462c      	mov	r4, r5
				if (rem) {
    78e6:	f1b8 0f00 	cmp.w	r8, #0
    78ea:	d00f      	beq.n	790c <settings_line_write+0x98>
					add = MIN(rem, sizeof(w_buf) - w_size);
    78ec:	f1c4 0510 	rsb	r5, r4, #16
    78f0:	4545      	cmp	r5, r8
    78f2:	bf28      	it	cs
    78f4:	4645      	movcs	r5, r8
					memcpy(&w_buf[w_size], value, add);
    78f6:	ab02      	add	r3, sp, #8
    78f8:	4649      	mov	r1, r9
    78fa:	1918      	adds	r0, r3, r4
    78fc:	462a      	mov	r2, r5
    78fe:	f012 fbd3 	bl	1a0a8 <memcpy>
					value += add;
    7902:	44a9      	add	r9, r5
					rem -= add;
    7904:	eba8 0805 	sub.w	r8, r8, r5
					w_size += add;
    7908:	442c      	add	r4, r5
    790a:	e7dc      	b.n	78c6 <settings_line_write+0x52>
					add = (w_size) % wbs;
    790c:	fbb4 f5f7 	udiv	r5, r4, r7
    7910:	fb07 4515 	mls	r5, r7, r5, r4
					if (add) {
    7914:	b13d      	cbz	r5, 7926 <settings_line_write+0xb2>
						add = wbs - add;
    7916:	1b7d      	subs	r5, r7, r5
						memset(&w_buf[w_size], '\0',
    7918:	ab02      	add	r3, sp, #8
    791a:	1918      	adds	r0, r3, r4
    791c:	462a      	mov	r2, r5
    791e:	4641      	mov	r1, r8
    7920:	f012 fbec 	bl	1a0fc <memset>
						w_size += add;
    7924:	442c      	add	r4, r5
					done = true;
    7926:	2501      	movs	r5, #1
    7928:	e7d0      	b.n	78cc <settings_line_write+0x58>
			return -EIO;
    792a:	f06f 0004 	mvn.w	r0, #4
}
    792e:	b007      	add	sp, #28
    7930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7934:	200007c4 	.word	0x200007c4

00007938 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
    7938:	4b03      	ldr	r3, [pc, #12]	; (7948 <settings_line_val_get_len+0x10>)
{
    793a:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
    793c:	689b      	ldr	r3, [r3, #8]
{
    793e:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
    7940:	4608      	mov	r0, r1
    7942:	4798      	blx	r3
		return 0;
	}
#else
	return len - val_off;
#endif
}
    7944:	1b00      	subs	r0, r0, r4
    7946:	bd10      	pop	{r4, pc}
    7948:	200007c4 	.word	0x200007c4

0000794c <settings_entry_copy>:
}


int settings_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			off_t src_off, size_t len)
{
    794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7950:	b086      	sub	sp, #24
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
    7952:	4f12      	ldr	r7, [pc, #72]	; (799c <settings_entry_copy+0x50>)
{
    7954:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    7956:	4681      	mov	r9, r0
    7958:	4688      	mov	r8, r1
    795a:	4692      	mov	sl, r2
    795c:	461e      	mov	r6, r3
	while (len) {
    795e:	b91c      	cbnz	r4, 7968 <settings_entry_copy+0x1c>
    7960:	4620      	mov	r0, r4
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
    7962:	b006      	add	sp, #24
    7964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
    7968:	2c10      	cmp	r4, #16
    796a:	4623      	mov	r3, r4
    796c:	bf28      	it	cs
    796e:	2310      	movcs	r3, #16
    7970:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
    7972:	aa02      	add	r2, sp, #8
    7974:	ab01      	add	r3, sp, #4
    7976:	4631      	mov	r1, r6
    7978:	4650      	mov	r0, sl
    797a:	683d      	ldr	r5, [r7, #0]
    797c:	47a8      	blx	r5
		if (rc) {
    797e:	2800      	cmp	r0, #0
    7980:	d1ef      	bne.n	7962 <settings_entry_copy+0x16>
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, chunk_size);
    7982:	9b01      	ldr	r3, [sp, #4]
    7984:	687d      	ldr	r5, [r7, #4]
    7986:	aa02      	add	r2, sp, #8
    7988:	4641      	mov	r1, r8
    798a:	4648      	mov	r0, r9
    798c:	47a8      	blx	r5
		if (rc) {
    798e:	2800      	cmp	r0, #0
    7990:	d1e7      	bne.n	7962 <settings_entry_copy+0x16>
		src_off += chunk_size;
    7992:	9b01      	ldr	r3, [sp, #4]
    7994:	441e      	add	r6, r3
		dst_off += chunk_size;
    7996:	4498      	add	r8, r3
		len -= chunk_size;
    7998:	1ae4      	subs	r4, r4, r3
    799a:	e7e0      	b.n	795e <settings_entry_copy+0x12>
    799c:	200007c4 	.word	0x200007c4

000079a0 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  u8_t io_rwbs)
{
    79a0:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
    79a2:	4c03      	ldr	r4, [pc, #12]	; (79b0 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
    79a4:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
    79a8:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
    79aa:	7323      	strb	r3, [r4, #12]
}
    79ac:	bd10      	pop	{r4, pc}
    79ae:	bf00      	nop
    79b0:	200007c4 	.word	0x200007c4

000079b4 <settings_fcb_load>:
	return 0;
}

static int settings_fcb_load(struct settings_store *cs, load_cb cb,
			     void *cb_arg)
{
    79b4:	b507      	push	{r0, r1, r2, lr}
	struct settings_fcb_load_cb_arg arg;
	int rc;

	arg.cb = cb;
	arg.cb_arg = cb_arg;
	rc = fcb_walk(&cf->cf_fcb, 0, settings_fcb_load_cb, &arg);
    79b6:	3008      	adds	r0, #8
	arg.cb_arg = cb_arg;
    79b8:	e9cd 1200 	strd	r1, r2, [sp]
	rc = fcb_walk(&cf->cf_fcb, 0, settings_fcb_load_cb, &arg);
    79bc:	466b      	mov	r3, sp
    79be:	4a05      	ldr	r2, [pc, #20]	; (79d4 <settings_fcb_load+0x20>)
    79c0:	2100      	movs	r1, #0
    79c2:	f012 f834 	bl	19a2e <fcb_walk>
	if (rc) {
    79c6:	2800      	cmp	r0, #0
		return -EINVAL;
	}
	return 0;
}
    79c8:	bf18      	it	ne
    79ca:	f06f 0015 	mvnne.w	r0, #21
    79ce:	b003      	add	sp, #12
    79d0:	f85d fb04 	ldr.w	pc, [sp], #4
    79d4:	00019d63 	.word	0x00019d63

000079d8 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
    79d8:	2301      	movs	r3, #1
{
    79da:	b570      	push	{r4, r5, r6, lr}
    79dc:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
    79de:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
    79e0:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(DT_FLASH_AREA_STORAGE_ID, &cf->cf_fcb);
    79e2:	f100 0608 	add.w	r6, r0, #8
    79e6:	4631      	mov	r1, r6
    79e8:	2003      	movs	r0, #3
    79ea:	f011 fe6d 	bl	196c8 <fcb_init>
		if (rc) {
    79ee:	4605      	mov	r5, r0
    79f0:	b9b0      	cbnz	r0, 7a20 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
    79f2:	4630      	mov	r0, r6
    79f4:	f011 fdfb 	bl	195ee <fcb_free_sector_cnt>
    79f8:	2800      	cmp	r0, #0
    79fa:	dc0a      	bgt.n	7a12 <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
    79fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
    79fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7a00:	e9d3 1200 	ldrd	r1, r2, [r3]
    7a04:	f012 f8ac 	bl	19b60 <flash_area_erase>
			if (rc) {
    7a08:	2800      	cmp	r0, #0
    7a0a:	d0ec      	beq.n	79e6 <settings_fcb_src+0xe>
				return -EIO;
    7a0c:	f06f 0504 	mvn.w	r5, #4
    7a10:	e004      	b.n	7a1c <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
    7a12:	4b05      	ldr	r3, [pc, #20]	; (7a28 <settings_fcb_src+0x50>)
    7a14:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
    7a16:	4620      	mov	r0, r4
    7a18:	f7ff fdee 	bl	75f8 <settings_src_register>
}
    7a1c:	4628      	mov	r0, r5
    7a1e:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    7a20:	f06f 0515 	mvn.w	r5, #21
    7a24:	e7fa      	b.n	7a1c <settings_fcb_src+0x44>
    7a26:	bf00      	nop
    7a28:	200085d8 	.word	0x200085d8

00007a2c <settings_fcb_dst>:
{
    7a2c:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_fcb_itf;
    7a2e:	4b03      	ldr	r3, [pc, #12]	; (7a3c <settings_fcb_dst+0x10>)
    7a30:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
    7a32:	f7ff fe01 	bl	7638 <settings_dst_register>
}
    7a36:	2000      	movs	r0, #0
    7a38:	bd08      	pop	{r3, pc}
    7a3a:	bf00      	nop
    7a3c:	200085d8 	.word	0x200085d8

00007a40 <settings_mount_fcb_backend>:
{
	u8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
    7a40:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    7a44:	4a02      	ldr	r2, [pc, #8]	; (7a50 <settings_mount_fcb_backend+0x10>)
    7a46:	4903      	ldr	r1, [pc, #12]	; (7a54 <settings_mount_fcb_backend+0x14>)
    7a48:	4803      	ldr	r0, [pc, #12]	; (7a58 <settings_mount_fcb_backend+0x18>)
    7a4a:	f7ff bfa9 	b.w	79a0 <settings_line_io_init>
    7a4e:	bf00      	nop
    7a50:	00019d5f 	.word	0x00019d5f
    7a54:	00019ed1 	.word	0x00019ed1
    7a58:	00019ee5 	.word	0x00019ee5

00007a5c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    7a5c:	280a      	cmp	r0, #10
{
    7a5e:	b538      	push	{r3, r4, r5, lr}
    7a60:	4604      	mov	r4, r0
    7a62:	4d07      	ldr	r5, [pc, #28]	; (7a80 <console_out+0x24>)
	if ('\n' == c) {
    7a64:	d104      	bne.n	7a70 <console_out+0x14>
    7a66:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    7a68:	6843      	ldr	r3, [r0, #4]
    7a6a:	210d      	movs	r1, #13
    7a6c:	685b      	ldr	r3, [r3, #4]
    7a6e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    7a70:	6828      	ldr	r0, [r5, #0]
    7a72:	6843      	ldr	r3, [r0, #4]
    7a74:	b2e1      	uxtb	r1, r4
    7a76:	685b      	ldr	r3, [r3, #4]
    7a78:	4798      	blx	r3

	return c;
}
    7a7a:	4620      	mov	r0, r4
    7a7c:	bd38      	pop	{r3, r4, r5, pc}
    7a7e:	bf00      	nop
    7a80:	200007d4 	.word	0x200007d4

00007a84 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    7a84:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    7a86:	4c04      	ldr	r4, [pc, #16]	; (7a98 <uart_console_hook_install+0x14>)
    7a88:	4620      	mov	r0, r4
    7a8a:	f000 fe7d 	bl	8788 <__stdout_hook_install>
	__printk_hook_install(console_out);
    7a8e:	4620      	mov	r0, r4
}
    7a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    7a94:	f7ff b968 	b.w	6d68 <__printk_hook_install>
    7a98:	00007a5d 	.word	0x00007a5d

00007a9c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    7a9c:	b508      	push	{r3, lr}
    7a9e:	4804      	ldr	r0, [pc, #16]	; (7ab0 <uart_console_init+0x14>)
    7aa0:	f00e fc72 	bl	16388 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    7aa4:	4b03      	ldr	r3, [pc, #12]	; (7ab4 <uart_console_init+0x18>)
    7aa6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    7aa8:	f7ff ffec 	bl	7a84 <uart_console_hook_install>

	return 0;
}
    7aac:	2000      	movs	r0, #0
    7aae:	bd08      	pop	{r3, pc}
    7ab0:	00021624 	.word	0x00021624
    7ab4:	200007d4 	.word	0x200007d4

00007ab8 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    7ab8:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    7aba:	4c04      	ldr	r4, [pc, #16]	; (7acc <rtt_console_init+0x14>)
    7abc:	4620      	mov	r0, r4
    7abe:	f7ff f953 	bl	6d68 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    7ac2:	4620      	mov	r0, r4
    7ac4:	f000 fe60 	bl	8788 <__stdout_hook_install>

	return 0;
}
    7ac8:	2000      	movs	r0, #0
    7aca:	bd10      	pop	{r4, pc}
    7acc:	00007ad1 	.word	0x00007ad1

00007ad0 <rtt_console_out>:
{
    7ad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    7ad4:	4f16      	ldr	r7, [pc, #88]	; (7b30 <rtt_console_out+0x60>)
    7ad6:	4d17      	ldr	r5, [pc, #92]	; (7b34 <rtt_console_out+0x64>)
	char c = (char)character;
    7ad8:	f88d 0007 	strb.w	r0, [sp, #7]
{
    7adc:	4606      	mov	r6, r0
	char c = (char)character;
    7ade:	2403      	movs	r4, #3
    7ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7ae4:	4638      	mov	r0, r7
    7ae6:	f00e fe0f 	bl	16708 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    7aea:	2201      	movs	r2, #1
    7aec:	f10d 0107 	add.w	r1, sp, #7
    7af0:	2000      	movs	r0, #0
    7af2:	f7ff fcad 	bl	7450 <SEGGER_RTT_WriteNoLock>
    7af6:	4680      	mov	r8, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    7af8:	4638      	mov	r0, r7
    7afa:	f00e fe71 	bl	167e0 <z_impl_k_mutex_unlock>
		if (cnt) {
    7afe:	f1b8 0f00 	cmp.w	r8, #0
    7b02:	d005      	beq.n	7b10 <rtt_console_out+0x40>
			host_present = true;
    7b04:	2301      	movs	r3, #1
    7b06:	702b      	strb	r3, [r5, #0]
}
    7b08:	4630      	mov	r0, r6
    7b0a:	b002      	add	sp, #8
    7b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    7b10:	782b      	ldrb	r3, [r5, #0]
    7b12:	2b00      	cmp	r3, #0
    7b14:	d0f8      	beq.n	7b08 <rtt_console_out+0x38>
			if (max_cnt) {
    7b16:	3c01      	subs	r4, #1
    7b18:	d007      	beq.n	7b2a <rtt_console_out+0x5a>
	if (k_is_in_isr()) {
    7b1a:	f00f f9db 	bl	16ed4 <k_is_in_isr>
    7b1e:	2800      	cmp	r0, #0
    7b20:	d1de      	bne.n	7ae0 <rtt_console_out+0x10>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    7b22:	2002      	movs	r0, #2
    7b24:	f00f f928 	bl	16d78 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    7b28:	e7da      	b.n	7ae0 <rtt_console_out+0x10>
				host_present = false;
    7b2a:	702c      	strb	r4, [r5, #0]
    7b2c:	e7ec      	b.n	7b08 <rtt_console_out+0x38>
    7b2e:	bf00      	nop
    7b30:	20009448 	.word	0x20009448
    7b34:	200024c2 	.word	0x200024c2

00007b38 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    7b38:	b510      	push	{r4, lr}
	__asm__ volatile(
    7b3a:	f04f 0320 	mov.w	r3, #32
    7b3e:	f3ef 8211 	mrs	r2, BASEPRI
    7b42:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    7b46:	4c15      	ldr	r4, [pc, #84]	; (7b9c <_m16src_stop+0x64>)
    7b48:	7823      	ldrb	r3, [r4, #0]
    7b4a:	b933      	cbnz	r3, 7b5a <_m16src_stop+0x22>
	__asm__ volatile(
    7b4c:	f382 8811 	msr	BASEPRI, r2
    7b50:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
    7b54:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
    7b58:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    7b5a:	3b01      	subs	r3, #1
    7b5c:	b2db      	uxtb	r3, r3
    7b5e:	7023      	strb	r3, [r4, #0]
    7b60:	b133      	cbz	r3, 7b70 <_m16src_stop+0x38>
    7b62:	f382 8811 	msr	BASEPRI, r2
    7b66:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7b6a:	f06f 000f 	mvn.w	r0, #15
    7b6e:	e7f3      	b.n	7b58 <_m16src_stop+0x20>
	if (m16src_grd) {
    7b70:	4b0b      	ldr	r3, [pc, #44]	; (7ba0 <_m16src_stop+0x68>)
    7b72:	7818      	ldrb	r0, [r3, #0]
    7b74:	2101      	movs	r1, #1
    7b76:	b138      	cbz	r0, 7b88 <_m16src_stop+0x50>
		m16src_ref++;
    7b78:	7021      	strb	r1, [r4, #0]
    7b7a:	f382 8811 	msr	BASEPRI, r2
    7b7e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    7b82:	f06f 000a 	mvn.w	r0, #10
    7b86:	e7e7      	b.n	7b58 <_m16src_stop+0x20>
	m16src_grd = 1U;
    7b88:	7019      	strb	r1, [r3, #0]
    7b8a:	f382 8811 	msr	BASEPRI, r2
    7b8e:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    7b92:	4a04      	ldr	r2, [pc, #16]	; (7ba4 <_m16src_stop+0x6c>)
    7b94:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
    7b96:	7018      	strb	r0, [r3, #0]
	return 0;
    7b98:	e7de      	b.n	7b58 <_m16src_stop+0x20>
    7b9a:	bf00      	nop
    7b9c:	200024c5 	.word	0x200024c5
    7ba0:	200024c4 	.word	0x200024c4
    7ba4:	40000004 	.word	0x40000004

00007ba8 <_m16src_start>:
{
    7ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    7baa:	f04f 0220 	mov.w	r2, #32
    7bae:	f3ef 8311 	mrs	r3, BASEPRI
    7bb2:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    7bb6:	4a29      	ldr	r2, [pc, #164]	; (7c5c <_m16src_start+0xb4>)
    7bb8:	7810      	ldrb	r0, [r2, #0]
    7bba:	1c44      	adds	r4, r0, #1
    7bbc:	7014      	strb	r4, [r2, #0]
    7bbe:	b180      	cbz	r0, 7be2 <_m16src_start+0x3a>
	__asm__ volatile(
    7bc0:	f383 8811 	msr	BASEPRI, r3
    7bc4:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    7bc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7bcc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    7bd0:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
    7bd4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    7bd8:	bf0c      	ite	eq
    7bda:	2000      	moveq	r0, #0
    7bdc:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    7be0:	e009      	b.n	7bf6 <_m16src_start+0x4e>
	if (m16src_grd) {
    7be2:	4d1f      	ldr	r5, [pc, #124]	; (7c60 <_m16src_start+0xb8>)
    7be4:	782f      	ldrb	r7, [r5, #0]
    7be6:	b13f      	cbz	r7, 7bf8 <_m16src_start+0x50>
		m16src_ref--;
    7be8:	7010      	strb	r0, [r2, #0]
    7bea:	f383 8811 	msr	BASEPRI, r3
    7bee:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    7bf2:	f06f 000a 	mvn.w	r0, #10
}
    7bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
    7bf8:	2601      	movs	r6, #1
    7bfa:	702e      	strb	r6, [r5, #0]
    7bfc:	f383 8811 	msr	BASEPRI, r3
    7c00:	f3bf 8f6f 	isb	sy
	if (blocking) {
    7c04:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7c08:	b319      	cbz	r1, 7c52 <_m16src_start+0xaa>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    7c0a:	4638      	mov	r0, r7
    7c0c:	f000 fb9c 	bl	8348 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    7c10:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    7c14:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    7c18:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    7c1c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    7c1e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    7c22:	b192      	cbz	r2, 7c4a <_m16src_start+0xa2>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    7c24:	2200      	movs	r2, #0
    7c26:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c2a:	4a0e      	ldr	r2, [pc, #56]	; (7c64 <_m16src_start+0xbc>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    7c2c:	f013 0f01 	tst.w	r3, #1
    7c30:	f04f 0301 	mov.w	r3, #1
    NRF_CLOCK->INTENCLR = int_mask;
    7c34:	bf08      	it	eq
    7c36:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    7c3a:	2000      	movs	r0, #0
    7c3c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    7c40:	f000 fb72 	bl	8328 <z_arch_irq_enable>
	m16src_grd = 0U;
    7c44:	2300      	movs	r3, #0
    7c46:	702b      	strb	r3, [r5, #0]
    7c48:	e7be      	b.n	7bc8 <_m16src_start+0x20>
			__WFE();
    7c4a:	bf20      	wfe
			__SEV();
    7c4c:	bf40      	sev
			__WFE();
    7c4e:	bf20      	wfe
    7c50:	e7e5      	b.n	7c1e <_m16src_start+0x76>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    7c52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    7c56:	6026      	str	r6, [r4, #0]
    7c58:	e7f4      	b.n	7c44 <_m16src_start+0x9c>
    7c5a:	bf00      	nop
    7c5c:	200024c5 	.word	0x200024c5
    7c60:	200024c4 	.word	0x200024c4
    7c64:	e000e100 	.word	0xe000e100

00007c68 <_k32src_start>:

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    7c68:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    7c6a:	f04f 0220 	mov.w	r2, #32
    7c6e:	f3ef 8311 	mrs	r3, BASEPRI
    7c72:	f382 8811 	msr	BASEPRI, r2
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    7c76:	4d24      	ldr	r5, [pc, #144]	; (7d08 <_k32src_start+0xa0>)
    7c78:	782a      	ldrb	r2, [r5, #0]
    7c7a:	b19a      	cbz	r2, 7ca4 <_k32src_start+0x3c>
	__asm__ volatile(
    7c7c:	f383 8811 	msr	BASEPRI, r3
    7c80:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    7c84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7c88:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    7c8c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    7c90:	f003 0303 	and.w	r3, r3, #3
    7c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    7c98:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    7c9a:	bf14      	ite	ne
    7c9c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
    7ca0:	2000      	moveq	r0, #0
    7ca2:	bd70      	pop	{r4, r5, r6, pc}
	k32src_initialized = 1U;
    7ca4:	2401      	movs	r4, #1
    7ca6:	702c      	strb	r4, [r5, #0]
    7ca8:	f383 8811 	msr	BASEPRI, r3
    7cac:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    7cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7cb4:	4e15      	ldr	r6, [pc, #84]	; (7d0c <_k32src_start+0xa4>)
    7cb6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_CLOCK->INTENSET = int_mask;
    7cba:	2502      	movs	r5, #2
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    7cbc:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    7cc0:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    7cc4:	f011 0103 	ands.w	r1, r1, #3
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = NRF_CLOCK_TASK_TRIGGER;
    7cc8:	6034      	str	r4, [r6, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    7cca:	f04f 0618 	mov.w	r6, #24
    7cce:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    7cd2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    7cd6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    7cda:	d1d3      	bne.n	7c84 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    7cdc:	2210      	movs	r2, #16
    7cde:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    7ce2:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    7ce6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    7cea:	03d2      	lsls	r2, r2, #15
    7cec:	d402      	bmi.n	7cf4 <_k32src_start+0x8c>
    7cee:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			goto lf_already_started;
    7cf2:	e7c7      	b.n	7c84 <_k32src_start+0x1c>
    7cf4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    7cf8:	f7ff ff56 	bl	7ba8 <_m16src_start>
		if (!err) {
    7cfc:	2800      	cmp	r0, #0
    7cfe:	d1c1      	bne.n	7c84 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d00:	4b03      	ldr	r3, [pc, #12]	; (7d10 <_k32src_start+0xa8>)
    7d02:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    7d06:	e7bd      	b.n	7c84 <_k32src_start+0x1c>
    7d08:	200024c3 	.word	0x200024c3
    7d0c:	40000008 	.word	0x40000008
    7d10:	e000e100 	.word	0xe000e100

00007d14 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    7d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    7d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    7d1a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    7d1c:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    7d20:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    7d24:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100

	lf_intenset = ((NRF_CLOCK->INTENSET &
    7d28:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    7d2c:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    7d30:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    7d34:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
    7d38:	3400      	adds	r4, #0
	hf_intenset = ((NRF_CLOCK->INTENSET &
    7d3a:	f002 0201 	and.w	r2, r2, #1
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    7d3e:	bf18      	it	ne
    7d40:	2401      	movne	r4, #1
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    7d42:	f1bc 0f00 	cmp.w	ip, #0
    7d46:	d003      	beq.n	7d50 <nrf_power_clock_isr+0x3c>
		NRF_POWER->EVENTS_POFWARN = 0;
    7d48:	f04f 0c00 	mov.w	ip, #0
    7d4c:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	}

	if (hf) {
    7d50:	2f00      	cmp	r7, #0
    7d52:	d041      	beq.n	7dd8 <nrf_power_clock_isr+0xc4>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    7d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7d58:	2700      	movs	r7, #0
    7d5a:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    7d5e:	b152      	cbz	r2, 7d76 <nrf_power_clock_isr+0x62>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    7d60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    7d64:	4f22      	ldr	r7, [pc, #136]	; (7df0 <nrf_power_clock_isr+0xdc>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    7d66:	2201      	movs	r2, #1
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    7d68:	f04f 0c02 	mov.w	ip, #2
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    7d6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    7d70:	f8c7 c000 	str.w	ip, [r7]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    7d74:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    7d76:	b9ee      	cbnz	r6, 7db4 <nrf_power_clock_isr+0xa0>
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    7d78:	b159      	cbz	r1, 7d92 <nrf_power_clock_isr+0x7e>
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration done, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    7d7a:	4b1d      	ldr	r3, [pc, #116]	; (7df0 <nrf_power_clock_isr+0xdc>)
#endif /* CONFIG_SOC_SERIES_NRF52X */

		NRF_CLOCK->EVENTS_DONE = 0;
    7d7c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    7d80:	2100      	movs	r1, #0
    7d82:	6019      	str	r1, [r3, #0]

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    7d84:	4628      	mov	r0, r5
		NRF_CLOCK->EVENTS_DONE = 0;
    7d86:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    7d8a:	f7ff fed5 	bl	7b38 <_m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    7d8e:	2301      	movs	r3, #1
    7d90:	6173      	str	r3, [r6, #20]
	}

	if (ctto) {
    7d92:	b174      	cbz	r4, 7db2 <nrf_power_clock_isr+0x9e>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    7d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7d98:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    7d9a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    7d9c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

		err = _m16src_start(dev, false);
    7da0:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    7da2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    7da6:	f7ff feff 	bl	7ba8 <_m16src_start>
		if (!err) {
    7daa:	b910      	cbnz	r0, 7db2 <nrf_power_clock_isr+0x9e>
    7dac:	4b11      	ldr	r3, [pc, #68]	; (7df4 <nrf_power_clock_isr+0xe0>)
    7dae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    7db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    7db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7db8:	2200      	movs	r2, #0
    7dba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (lf_intenset) {
    7dbe:	0782      	lsls	r2, r0, #30
    7dc0:	d5da      	bpl.n	7d78 <nrf_power_clock_isr+0x64>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    7dc2:	2202      	movs	r2, #2
    7dc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    7dc8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7dcc:	079b      	lsls	r3, r3, #30
    7dce:	d1d3      	bne.n	7d78 <nrf_power_clock_isr+0x64>
	if (done) {
    7dd0:	2900      	cmp	r1, #0
    7dd2:	d0df      	beq.n	7d94 <nrf_power_clock_isr+0x80>
				ctto = 1U;
    7dd4:	2401      	movs	r4, #1
    7dd6:	e7d0      	b.n	7d7a <nrf_power_clock_isr+0x66>
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    7dd8:	2a00      	cmp	r2, #0
    7dda:	d0cc      	beq.n	7d76 <nrf_power_clock_isr+0x62>
    7ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7de0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    7de4:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    7de8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    7dec:	d1c3      	bne.n	7d76 <nrf_power_clock_isr+0x62>
    7dee:	e7b7      	b.n	7d60 <nrf_power_clock_isr+0x4c>
    7df0:	40000c34 	.word	0x40000c34
    7df4:	e000e100 	.word	0xe000e100

00007df8 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    7df8:	4b0f      	ldr	r3, [pc, #60]	; (7e38 <rtc1_nrf_isr+0x40>)
    7dfa:	2200      	movs	r2, #0
{
    7dfc:	b410      	push	{r4}
	RTC->EVENTS_COMPARE[0] = 0;
    7dfe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    7e02:	f04f 0220 	mov.w	r2, #32
    7e06:	f3ef 8411 	mrs	r4, BASEPRI
    7e0a:	f382 8811 	msr	BASEPRI, r2

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    7e0e:	4a0b      	ldr	r2, [pc, #44]	; (7e3c <rtc1_nrf_isr+0x44>)
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    7e10:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    7e14:	6811      	ldr	r1, [r2, #0]
    7e16:	f240 1347 	movw	r3, #327	; 0x147
	return (a - b) & COUNTER_MAX;
    7e1a:	1a40      	subs	r0, r0, r1
    7e1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    7e20:	fbb0 f0f3 	udiv	r0, r0, r3

	last_count += dticks * CYC_PER_TICK;
    7e24:	fb03 1300 	mla	r3, r3, r0, r1
    7e28:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    7e2a:	f384 8811 	msr	BASEPRI, r4
    7e2e:	f3bf 8f6f 	isb	sy
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    7e32:	bc10      	pop	{r4}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    7e34:	f00f ba42 	b.w	172bc <z_clock_announce>
    7e38:	40011000 	.word	0x40011000
    7e3c:	200007d8 	.word	0x200007d8

00007e40 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    7e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7e42:	481f      	ldr	r0, [pc, #124]	; (7ec0 <z_clock_driver_init+0x80>)
    7e44:	f00e faa0 	bl	16388 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
    7e48:	2800      	cmp	r0, #0
    7e4a:	d035      	beq.n	7eb8 <z_clock_driver_init+0x78>
	return api->on(dev, sys);
    7e4c:	6843      	ldr	r3, [r0, #4]
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    7e4e:	4d1d      	ldr	r5, [pc, #116]	; (7ec4 <z_clock_driver_init+0x84>)
    7e50:	681b      	ldr	r3, [r3, #0]
    7e52:	2101      	movs	r1, #1
    7e54:	4798      	blx	r3
    7e56:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
    7e58:	f240 1347 	movw	r3, #327	; 0x147
    p_reg->PRESCALER = val;
    7e5c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    7e60:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    7e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7e68:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
    7e6c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7e70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7e74:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7e7c:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    7e7e:	681b      	ldr	r3, [r3, #0]
    7e80:	9301      	str	r3, [sp, #4]
    (void)dummy;
    7e82:	9b01      	ldr	r3, [sp, #4]
    7e84:	4b10      	ldr	r3, [pc, #64]	; (7ec8 <z_clock_driver_init+0x88>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    7e86:	2101      	movs	r1, #1
    7e88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    7e8c:	2011      	movs	r0, #17
    7e8e:	4622      	mov	r2, r4
    7e90:	f000 fa7c 	bl	838c <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    7e94:	2011      	movs	r0, #17
    7e96:	f000 fa47 	bl	8328 <z_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7e9a:	4a0c      	ldr	r2, [pc, #48]	; (7ecc <z_clock_driver_init+0x8c>)
    7e9c:	2301      	movs	r3, #1
    7e9e:	6013      	str	r3, [r2, #0]
    7ea0:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
    7ea2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    7ea6:	f203 1347 	addw	r3, r3, #327	; 0x147
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    7eaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    7eae:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    7eb2:	4620      	mov	r0, r4
}
    7eb4:	b003      	add	sp, #12
    7eb6:	bd30      	pop	{r4, r5, pc}
		return -1;
    7eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7ebc:	e7fa      	b.n	7eb4 <z_clock_driver_init+0x74>
    7ebe:	bf00      	nop
    7ec0:	0002162b 	.word	0x0002162b
    7ec4:	40011000 	.word	0x40011000
    7ec8:	e000e100 	.word	0xe000e100
    7ecc:	40011008 	.word	0x40011008

00007ed0 <z_clock_set_timeout>:
void z_clock_set_timeout(s32_t ticks, bool idle)
{
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    7ed0:	f64c 0269 	movw	r2, #51305	; 0xc869
{
    7ed4:	b570      	push	{r4, r5, r6, lr}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    7ed6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    7eda:	bf08      	it	eq
    7edc:	4610      	moveq	r0, r2
	__asm__ volatile(
    7ede:	f04f 0320 	mov.w	r3, #32
    7ee2:	f3ef 8411 	mrs	r4, BASEPRI
    7ee6:	f383 8811 	msr	BASEPRI, r3

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    7eea:	4d14      	ldr	r5, [pc, #80]	; (7f3c <z_clock_set_timeout+0x6c>)
     return p_reg->COUNTER;
    7eec:	4914      	ldr	r1, [pc, #80]	; (7f40 <z_clock_set_timeout+0x70>)
    7eee:	682e      	ldr	r6, [r5, #0]
    7ef0:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    7ef4:	3801      	subs	r0, #1
    7ef6:	4290      	cmp	r0, r2
    7ef8:	bfa8      	it	ge
    7efa:	4610      	movge	r0, r2
	return (a - b) & COUNTER_MAX;
    7efc:	1b9a      	subs	r2, r3, r6
    7efe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    7f02:	f240 1547 	movw	r5, #327	; 0x147
    7f06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	cyc += (CYC_PER_TICK - 1);
    7f0a:	f502 72a3 	add.w	r2, r2, #326	; 0x146
    7f0e:	fb05 2000 	mla	r0, r5, r0, r2
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    7f12:	fbb0 f0f5 	udiv	r0, r0, r5
	cyc += last_count;
    7f16:	fb05 6000 	mla	r0, r5, r0, r6
	return (a - b) & COUNTER_MAX;
    7f1a:	1ac3      	subs	r3, r0, r3

	if (counter_sub(cyc, t) < MIN_DELAY) {
    7f1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7f20:	f023 031f 	bic.w	r3, r3, #31
    7f24:	b903      	cbnz	r3, 7f28 <z_clock_set_timeout+0x58>
		cyc += CYC_PER_TICK;
    7f26:	4428      	add	r0, r5
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    7f28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    7f2c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
	__asm__ volatile(
    7f30:	f384 8811 	msr	BASEPRI, r4
    7f34:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
    7f38:	bd70      	pop	{r4, r5, r6, pc}
    7f3a:	bf00      	nop
    7f3c:	200007d8 	.word	0x200007d8
    7f40:	40011000 	.word	0x40011000

00007f44 <z_clock_elapsed>:
	__asm__ volatile(
    7f44:	f04f 0220 	mov.w	r2, #32
    7f48:	f3ef 8311 	mrs	r3, BASEPRI
    7f4c:	f382 8811 	msr	BASEPRI, r2
     return p_reg->COUNTER;
    7f50:	4a08      	ldr	r2, [pc, #32]	; (7f74 <z_clock_elapsed+0x30>)
    7f52:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    7f56:	4a08      	ldr	r2, [pc, #32]	; (7f78 <z_clock_elapsed+0x34>)
	return (a - b) & COUNTER_MAX;
    7f58:	6812      	ldr	r2, [r2, #0]
    7f5a:	1a80      	subs	r0, r0, r2
    7f5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    7f60:	f240 1247 	movw	r2, #327	; 0x147
    7f64:	fbb0 f0f2 	udiv	r0, r0, r2
	__asm__ volatile(
    7f68:	f383 8811 	msr	BASEPRI, r3
    7f6c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    7f70:	4770      	bx	lr
    7f72:	bf00      	nop
    7f74:	40011000 	.word	0x40011000
    7f78:	200007d8 	.word	0x200007d8

00007f7c <z_timer_cycle_get_32>:
	__asm__ volatile(
    7f7c:	f04f 0320 	mov.w	r3, #32
    7f80:	f3ef 8211 	mrs	r2, BASEPRI
    7f84:	f383 8811 	msr	BASEPRI, r3

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    7f88:	4906      	ldr	r1, [pc, #24]	; (7fa4 <z_timer_cycle_get_32+0x28>)
    7f8a:	4b07      	ldr	r3, [pc, #28]	; (7fa8 <z_timer_cycle_get_32+0x2c>)
    7f8c:	6808      	ldr	r0, [r1, #0]
    7f8e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    7f92:	f382 8811 	msr	BASEPRI, r2
    7f96:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    7f9a:	1a1b      	subs	r3, r3, r0
    7f9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    7fa0:	4418      	add	r0, r3
    7fa2:	4770      	bx	lr
    7fa4:	200007d8 	.word	0x200007d8
    7fa8:	40011000 	.word	0x40011000

00007fac <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    7fac:	4804      	ldr	r0, [pc, #16]	; (7fc0 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    7fae:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    7fb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    7fb2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    7fb4:	d003      	beq.n	7fbe <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    7fb6:	4903      	ldr	r1, [pc, #12]	; (7fc4 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    7fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    7fbc:	600a      	str	r2, [r1, #0]

00007fbe <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    7fbe:	4770      	bx	lr
    ldr r0, =_kernel
    7fc0:	20001f8c 	.word	0x20001f8c
    ldr r1, =_SCS_ICSR
    7fc4:	e000ed04 	.word	0xe000ed04

00007fc8 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7fc8:	4804      	ldr	r0, [pc, #16]	; (7fdc <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    7fca:	2300      	movs	r3, #0
    7fcc:	2120      	movs	r1, #32
    7fce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7fd0:	3301      	adds	r3, #1
    7fd2:	2b27      	cmp	r3, #39	; 0x27
    7fd4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7fd8:	d1f9      	bne.n	7fce <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7fda:	4770      	bx	lr
    7fdc:	e000e100 	.word	0xe000e100

00007fe0 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    7fe0:	4a09      	ldr	r2, [pc, #36]	; (8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>)
	_current->arch.swap_return_value = _k_neg_eagain;
    7fe2:	490a      	ldr	r1, [pc, #40]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
	_current->arch.basepri = key;
    7fe4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    7fe6:	6809      	ldr	r1, [r1, #0]
    7fe8:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7fea:	4909      	ldr	r1, [pc, #36]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
	_current->arch.basepri = key;
    7fec:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7fee:	684b      	ldr	r3, [r1, #4]
    7ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7ff4:	604b      	str	r3, [r1, #4]
    7ff6:	2300      	movs	r3, #0
    7ff8:	f383 8811 	msr	BASEPRI, r3
    7ffc:	f3bf 8f6f 	isb	sy

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    8000:	6893      	ldr	r3, [r2, #8]
}
    8002:	6e98      	ldr	r0, [r3, #104]	; 0x68
    8004:	4770      	bx	lr
    8006:	bf00      	nop
    8008:	20001f8c 	.word	0x20001f8c
    800c:	00020bc8 	.word	0x00020bc8
    8010:	e000ed00 	.word	0xe000ed00

00008014 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    8014:	2020      	movs	r0, #32
    msr BASEPRI, r0
    8016:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    801a:	4911      	ldr	r1, [pc, #68]	; (8060 <__pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    801c:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    801e:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    8022:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    8024:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    8028:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    802c:	4f0d      	ldr	r7, [pc, #52]	; (8064 <__pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    802e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    8032:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    8034:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    8036:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    8038:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    803a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    803c:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    803e:	f380 8811 	msr	BASEPRI, r0
    vldmia r0, {s16-s31}
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    8042:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    8044:	4806      	ldr	r0, [pc, #24]	; (8060 <__pendsv+0x4c>)
    ldr r0, [r0, #_kernel_offset_to_current]
    8046:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    8048:	f011 ff83 	bl	19f52 <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    804c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    8050:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    8054:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    8058:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    805c:	4770      	bx	lr
    805e:	0000      	.short	0x0000
    ldr r1, =_kernel
    8060:	20001f8c 	.word	0x20001f8c
    ldr v4, =_SCS_ICSR
    8064:	e000ed04 	.word	0xe000ed04

00008068 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    8068:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    806c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    806e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    8072:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    8076:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    8078:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    807c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    8080:	2902      	cmp	r1, #2
    beq _oops
    8082:	d0ff      	beq.n	8084 <_oops>

00008084 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    8084:	b501      	push	{r0, lr}
    bl _do_kernel_oops
    8086:	f011 ff55 	bl	19f34 <_do_kernel_oops>
    pop {r0, pc}
    808a:	bd01      	pop	{r0, pc}

0000808c <_MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    808c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    808e:	4c1c      	ldr	r4, [pc, #112]	; (8100 <_MpuFault.isra.2+0x74>)
static u32_t _MpuFault(NANO_ESF *esf, int fromHardFault)
    8090:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    8092:	481c      	ldr	r0, [pc, #112]	; (8104 <_MpuFault.isra.2+0x78>)
    8094:	f010 f875 	bl	18182 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    8098:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    809a:	06d1      	lsls	r1, r2, #27
    809c:	d502      	bpl.n	80a4 <_MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
    809e:	481a      	ldr	r0, [pc, #104]	; (8108 <_MpuFault.isra.2+0x7c>)
    80a0:	f010 f86f 	bl	18182 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    80a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    80a6:	071a      	lsls	r2, r3, #28
    80a8:	d502      	bpl.n	80b0 <_MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    80aa:	4818      	ldr	r0, [pc, #96]	; (810c <_MpuFault.isra.2+0x80>)
    80ac:	f010 f869 	bl	18182 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    80b0:	4c13      	ldr	r4, [pc, #76]	; (8100 <_MpuFault.isra.2+0x74>)
    80b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    80b4:	079b      	lsls	r3, r3, #30
    80b6:	d50e      	bpl.n	80d6 <_MpuFault.isra.2+0x4a>
		PR_FAULT_INFO("  Data Access Violation\n");
    80b8:	4815      	ldr	r0, [pc, #84]	; (8110 <_MpuFault.isra.2+0x84>)
    80ba:	f010 f862 	bl	18182 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    80be:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    80c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    80c2:	0618      	lsls	r0, r3, #24
    80c4:	d507      	bpl.n	80d6 <_MpuFault.isra.2+0x4a>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    80c6:	4813      	ldr	r0, [pc, #76]	; (8114 <_MpuFault.isra.2+0x88>)
    80c8:	f010 f85b 	bl	18182 <printk>
			if (fromHardFault) {
    80cc:	b11d      	cbz	r5, 80d6 <_MpuFault.isra.2+0x4a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    80ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    80d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    80d4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    80d6:	4c0a      	ldr	r4, [pc, #40]	; (8100 <_MpuFault.isra.2+0x74>)
    80d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    80da:	07d2      	lsls	r2, r2, #31
    80dc:	d502      	bpl.n	80e4 <_MpuFault.isra.2+0x58>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    80de:	480e      	ldr	r0, [pc, #56]	; (8118 <_MpuFault.isra.2+0x8c>)
    80e0:	f010 f84f 	bl	18182 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    80e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    80e6:	069b      	lsls	r3, r3, #26
    80e8:	d502      	bpl.n	80f0 <_MpuFault.isra.2+0x64>
		PR_FAULT_INFO(
    80ea:	480c      	ldr	r0, [pc, #48]	; (811c <_MpuFault.isra.2+0x90>)
    80ec:	f010 f849 	bl	18182 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    80f0:	4b03      	ldr	r3, [pc, #12]	; (8100 <_MpuFault.isra.2+0x74>)
    80f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    80f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    80f6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    80fa:	629a      	str	r2, [r3, #40]	; 0x28
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    80fc:	2000      	movs	r0, #0
    80fe:	bd38      	pop	{r3, r4, r5, pc}
    8100:	e000ed00 	.word	0xe000ed00
    8104:	000217aa 	.word	0x000217aa
    8108:	000217c1 	.word	0x000217c1
    810c:	000217f5 	.word	0x000217f5
    8110:	00021809 	.word	0x00021809
    8114:	00021822 	.word	0x00021822
    8118:	00021839 	.word	0x00021839
    811c:	00021859 	.word	0x00021859

00008120 <_BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    8120:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    8122:	4c1e      	ldr	r4, [pc, #120]	; (819c <_BusFault.isra.3+0x7c>)
static int _BusFault(NANO_ESF *esf, int fromHardFault)
    8124:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    8126:	481e      	ldr	r0, [pc, #120]	; (81a0 <_BusFault.isra.3+0x80>)
    8128:	f010 f82b 	bl	18182 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    812c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    812e:	04d1      	lsls	r1, r2, #19
    8130:	d502      	bpl.n	8138 <_BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    8132:	481c      	ldr	r0, [pc, #112]	; (81a4 <_BusFault.isra.3+0x84>)
    8134:	f010 f825 	bl	18182 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    8138:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    813a:	051a      	lsls	r2, r3, #20
    813c:	d502      	bpl.n	8144 <_BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    813e:	481a      	ldr	r0, [pc, #104]	; (81a8 <_BusFault.isra.3+0x88>)
    8140:	f010 f81f 	bl	18182 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    8144:	4c15      	ldr	r4, [pc, #84]	; (819c <_BusFault.isra.3+0x7c>)
    8146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8148:	059b      	lsls	r3, r3, #22
    814a:	d50e      	bpl.n	816a <_BusFault.isra.3+0x4a>
		PR_FAULT_INFO("  Precise data bus error\n");
    814c:	4817      	ldr	r0, [pc, #92]	; (81ac <_BusFault.isra.3+0x8c>)
    814e:	f010 f818 	bl	18182 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    8152:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    8154:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8156:	0418      	lsls	r0, r3, #16
    8158:	d507      	bpl.n	816a <_BusFault.isra.3+0x4a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    815a:	4815      	ldr	r0, [pc, #84]	; (81b0 <_BusFault.isra.3+0x90>)
    815c:	f010 f811 	bl	18182 <printk>
			if (fromHardFault) {
    8160:	b11d      	cbz	r5, 816a <_BusFault.isra.3+0x4a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    8162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8164:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    8168:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    816a:	4c0c      	ldr	r4, [pc, #48]	; (819c <_BusFault.isra.3+0x7c>)
    816c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    816e:	0559      	lsls	r1, r3, #21
    8170:	d502      	bpl.n	8178 <_BusFault.isra.3+0x58>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    8172:	4810      	ldr	r0, [pc, #64]	; (81b4 <_BusFault.isra.3+0x94>)
    8174:	f010 f805 	bl	18182 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    8178:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    817a:	05da      	lsls	r2, r3, #23
    817c:	d509      	bpl.n	8192 <_BusFault.isra.3+0x72>
		PR_FAULT_INFO("  Instruction bus error\n");
    817e:	480e      	ldr	r0, [pc, #56]	; (81b8 <_BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    8180:	f00f ffff 	bl	18182 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    8184:	4a05      	ldr	r2, [pc, #20]	; (819c <_BusFault.isra.3+0x7c>)
    8186:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8188:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    818c:	6293      	str	r3, [r2, #40]	; 0x28
	if (_MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    818e:	2000      	movs	r0, #0
    8190:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    8192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8194:	049b      	lsls	r3, r3, #18
    8196:	d5f5      	bpl.n	8184 <_BusFault.isra.3+0x64>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    8198:	4808      	ldr	r0, [pc, #32]	; (81bc <_BusFault.isra.3+0x9c>)
    819a:	e7f1      	b.n	8180 <_BusFault.isra.3+0x60>
    819c:	e000ed00 	.word	0xe000ed00
    81a0:	00021649 	.word	0x00021649
    81a4:	00021660 	.word	0x00021660
    81a8:	000217f5 	.word	0x000217f5
    81ac:	00021672 	.word	0x00021672
    81b0:	0002168c 	.word	0x0002168c
    81b4:	000216a2 	.word	0x000216a2
    81b8:	000216be 	.word	0x000216be
    81bc:	00021859 	.word	0x00021859

000081c0 <_UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
    81c0:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    81c2:	4c19      	ldr	r4, [pc, #100]	; (8228 <_UsageFault.isra.4+0x68>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    81c4:	4819      	ldr	r0, [pc, #100]	; (822c <_UsageFault.isra.4+0x6c>)
    81c6:	f00f ffdc 	bl	18182 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    81ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    81cc:	0193      	lsls	r3, r2, #6
    81ce:	d502      	bpl.n	81d6 <_UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    81d0:	4817      	ldr	r0, [pc, #92]	; (8230 <_UsageFault.isra.4+0x70>)
    81d2:	f00f ffd6 	bl	18182 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    81d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    81d8:	01dc      	lsls	r4, r3, #7
    81da:	d502      	bpl.n	81e2 <_UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    81dc:	4815      	ldr	r0, [pc, #84]	; (8234 <_UsageFault.isra.4+0x74>)
    81de:	f00f ffd0 	bl	18182 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    81e2:	4c11      	ldr	r4, [pc, #68]	; (8228 <_UsageFault.isra.4+0x68>)
    81e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    81e6:	0310      	lsls	r0, r2, #12
    81e8:	d502      	bpl.n	81f0 <_UsageFault.isra.4+0x30>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    81ea:	4813      	ldr	r0, [pc, #76]	; (8238 <_UsageFault.isra.4+0x78>)
    81ec:	f00f ffc9 	bl	18182 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    81f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    81f2:	0359      	lsls	r1, r3, #13
    81f4:	d502      	bpl.n	81fc <_UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    81f6:	4811      	ldr	r0, [pc, #68]	; (823c <_UsageFault.isra.4+0x7c>)
    81f8:	f00f ffc3 	bl	18182 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    81fc:	4c0a      	ldr	r4, [pc, #40]	; (8228 <_UsageFault.isra.4+0x68>)
    81fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8200:	0392      	lsls	r2, r2, #14
    8202:	d502      	bpl.n	820a <_UsageFault.isra.4+0x4a>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    8204:	480e      	ldr	r0, [pc, #56]	; (8240 <_UsageFault.isra.4+0x80>)
    8206:	f00f ffbc 	bl	18182 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    820a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    820c:	03db      	lsls	r3, r3, #15
    820e:	d502      	bpl.n	8216 <_UsageFault.isra.4+0x56>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    8210:	480c      	ldr	r0, [pc, #48]	; (8244 <_UsageFault.isra.4+0x84>)
    8212:	f00f ffb6 	bl	18182 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    8216:	4a04      	ldr	r2, [pc, #16]	; (8228 <_UsageFault.isra.4+0x68>)
    8218:	6a93      	ldr	r3, [r2, #40]	; 0x28
    821a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    821e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    8222:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    8224:	2000      	movs	r0, #0
    8226:	bd10      	pop	{r4, pc}
    8228:	e000ed00 	.word	0xe000ed00
    822c:	00021889 	.word	0x00021889
    8230:	000218a2 	.word	0x000218a2
    8234:	000218b6 	.word	0x000218b6
    8238:	000218d1 	.word	0x000218d1
    823c:	000218f0 	.word	0x000218f0
    8240:	00021916 	.word	0x00021916
    8244:	00021931 	.word	0x00021931

00008248 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    8248:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    824a:	4d28      	ldr	r5, [pc, #160]	; (82ec <_Fault+0xa4>)
    824c:	686b      	ldr	r3, [r5, #4]
    824e:	f3c3 0208 	ubfx	r2, r3, #0, #9
	switch (fault) {
    8252:	1ed1      	subs	r1, r2, #3
{
    8254:	4606      	mov	r6, r0
	switch (fault) {
    8256:	2909      	cmp	r1, #9
    8258:	d83b      	bhi.n	82d2 <_Fault+0x8a>
    825a:	e8df f001 	tbb	[pc, r1]
    825e:	3405      	.short	0x3405
    8260:	3a3a2936 	.word	0x3a3a2936
    8264:	383a3a3a 	.word	0x383a3a3a
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    8268:	4821      	ldr	r0, [pc, #132]	; (82f0 <_Fault+0xa8>)
    826a:	f00f ff8a 	bl	18182 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    826e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    8270:	f014 0402 	ands.w	r4, r4, #2
    8274:	d004      	beq.n	8280 <_Fault+0x38>
		PR_EXC("  Bus fault on vector table read\n");
    8276:	481f      	ldr	r0, [pc, #124]	; (82f4 <_Fault+0xac>)
	PR_FAULT_INFO(
    8278:	f00f ff83 	bl	18182 <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    827c:	2400      	movs	r4, #0
    827e:	e01c      	b.n	82ba <_Fault+0x72>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    8280:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    8282:	005b      	lsls	r3, r3, #1
    8284:	d519      	bpl.n	82ba <_Fault+0x72>
		PR_EXC("  Fault escalation (see below)\n");
    8286:	481c      	ldr	r0, [pc, #112]	; (82f8 <_Fault+0xb0>)
    8288:	f00f ff7b 	bl	18182 <printk>
		if (SCB_MMFSR != 0) {
    828c:	4b1b      	ldr	r3, [pc, #108]	; (82fc <_Fault+0xb4>)
    828e:	781b      	ldrb	r3, [r3, #0]
    8290:	b11b      	cbz	r3, 829a <_Fault+0x52>
			reason = _MpuFault(esf, 1);
    8292:	2001      	movs	r0, #1
		reason = _MpuFault(esf, 0);
    8294:	f7ff fefa 	bl	808c <_MpuFault.isra.2>
    8298:	e00c      	b.n	82b4 <_Fault+0x6c>
		} else if (SCB_BFSR != 0) {
    829a:	4b19      	ldr	r3, [pc, #100]	; (8300 <_Fault+0xb8>)
    829c:	781b      	ldrb	r3, [r3, #0]
    829e:	b11b      	cbz	r3, 82a8 <_Fault+0x60>
			reason = _BusFault(esf, 1);
    82a0:	2001      	movs	r0, #1
		reason = _BusFault(esf, 0);
    82a2:	f7ff ff3d 	bl	8120 <_BusFault.isra.3>
    82a6:	e005      	b.n	82b4 <_Fault+0x6c>
		} else if (SCB_UFSR != 0) {
    82a8:	4b16      	ldr	r3, [pc, #88]	; (8304 <_Fault+0xbc>)
    82aa:	881b      	ldrh	r3, [r3, #0]
    82ac:	b29b      	uxth	r3, r3
    82ae:	b123      	cbz	r3, 82ba <_Fault+0x72>
			reason = _UsageFault(esf);
    82b0:	f7ff ff86 	bl	81c0 <_UsageFault.isra.4>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = _FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
    82b4:	2806      	cmp	r0, #6
			reason = _UsageFault(esf);
    82b6:	4604      	mov	r4, r0
	if (reason == _NANO_ERR_RECOVERABLE) {
    82b8:	d017      	beq.n	82ea <_Fault+0xa2>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    82ba:	4631      	mov	r1, r6
    82bc:	4620      	mov	r0, r4
}
    82be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_NanoFatalErrorHandler(reason, esf);
    82c2:	f000 b8d3 	b.w	846c <z_NanoFatalErrorHandler>
		reason = _MpuFault(esf, 0);
    82c6:	2000      	movs	r0, #0
    82c8:	e7e4      	b.n	8294 <_Fault+0x4c>
		reason = _BusFault(esf, 0);
    82ca:	2000      	movs	r0, #0
    82cc:	e7e9      	b.n	82a2 <_Fault+0x5a>
	PR_FAULT_INFO(
    82ce:	480e      	ldr	r0, [pc, #56]	; (8308 <_Fault+0xc0>)
    82d0:	e7d2      	b.n	8278 <_Fault+0x30>
	PR_FAULT_INFO("***** %s %d) *****\n",
    82d2:	f413 7ff8 	tst.w	r3, #496	; 0x1f0
    82d6:	4b0d      	ldr	r3, [pc, #52]	; (830c <_Fault+0xc4>)
    82d8:	490d      	ldr	r1, [pc, #52]	; (8310 <_Fault+0xc8>)
    82da:	480e      	ldr	r0, [pc, #56]	; (8314 <_Fault+0xcc>)
    82dc:	f1a2 0210 	sub.w	r2, r2, #16
    82e0:	bf18      	it	ne
    82e2:	4619      	movne	r1, r3
    82e4:	f00f ff4d 	bl	18182 <printk>
	if (reason == _NANO_ERR_RECOVERABLE) {
    82e8:	e7c8      	b.n	827c <_Fault+0x34>
}
    82ea:	bd70      	pop	{r4, r5, r6, pc}
    82ec:	e000ed00 	.word	0xe000ed00
    82f0:	00021705 	.word	0x00021705
    82f4:	0002171d 	.word	0x0002171d
    82f8:	0002173f 	.word	0x0002173f
    82fc:	e000ed28 	.word	0xe000ed28
    8300:	e000ed29 	.word	0xe000ed29
    8304:	e000ed2a 	.word	0xe000ed2a
    8308:	0002175f 	.word	0x0002175f
    830c:	000216ec 	.word	0x000216ec
    8310:	000216d7 	.word	0x000216d7
    8314:	00021796 	.word	0x00021796

00008318 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    8318:	4a02      	ldr	r2, [pc, #8]	; (8324 <_FaultInit+0xc>)
    831a:	6953      	ldr	r3, [r2, #20]
    831c:	f043 0310 	orr.w	r3, r3, #16
    8320:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    8322:	4770      	bx	lr
    8324:	e000ed00 	.word	0xe000ed00

00008328 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    8328:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    832a:	2b00      	cmp	r3, #0
    832c:	db08      	blt.n	8340 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    832e:	2201      	movs	r2, #1
    8330:	f000 001f 	and.w	r0, r0, #31
    8334:	fa02 f000 	lsl.w	r0, r2, r0
    8338:	095b      	lsrs	r3, r3, #5
    833a:	4a02      	ldr	r2, [pc, #8]	; (8344 <z_arch_irq_enable+0x1c>)
    833c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    8340:	4770      	bx	lr
    8342:	bf00      	nop
    8344:	e000e100 	.word	0xe000e100

00008348 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    8348:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    834a:	2b00      	cmp	r3, #0
    834c:	db0d      	blt.n	836a <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    834e:	2201      	movs	r2, #1
    8350:	095b      	lsrs	r3, r3, #5
    8352:	f000 001f 	and.w	r0, r0, #31
    8356:	fa02 f000 	lsl.w	r0, r2, r0
    835a:	3320      	adds	r3, #32
    835c:	4a03      	ldr	r2, [pc, #12]	; (836c <z_arch_irq_disable+0x24>)
    835e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    8362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8366:	f3bf 8f6f 	isb	sy
}
    836a:	4770      	bx	lr
    836c:	e000e100 	.word	0xe000e100

00008370 <z_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int z_arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    8370:	0942      	lsrs	r2, r0, #5
    8372:	4b05      	ldr	r3, [pc, #20]	; (8388 <z_arch_irq_is_enabled+0x18>)
    8374:	f000 001f 	and.w	r0, r0, #31
    8378:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    837c:	2301      	movs	r3, #1
    837e:	fa03 f000 	lsl.w	r0, r3, r0
}
    8382:	4010      	ands	r0, r2
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	e000e100 	.word	0xe000e100

0000838c <z_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    838c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    838e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8390:	bfa8      	it	ge
    8392:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    8396:	f101 0101 	add.w	r1, r1, #1
    839a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    839e:	bfae      	itee	ge
    83a0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    83a4:	f000 000f 	andlt.w	r0, r0, #15
    83a8:	4b03      	ldrlt	r3, [pc, #12]	; (83b8 <z_irq_priority_set+0x2c>)
    83aa:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    83ac:	bfac      	ite	ge
    83ae:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    83b2:	5419      	strblt	r1, [r3, r0]
}
    83b4:	4770      	bx	lr
    83b6:	bf00      	nop
    83b8:	e000ed14 	.word	0xe000ed14

000083bc <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    83bc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    83be:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    83c0:	4b04      	ldr	r3, [pc, #16]	; (83d4 <_arch_isr_direct_pm+0x18>)
    83c2:	6a18      	ldr	r0, [r3, #32]
    83c4:	b118      	cbz	r0, 83ce <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    83c6:	2200      	movs	r2, #0
    83c8:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    83ca:	f017 f902 	bl	1f5d2 <z_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    83ce:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    83d0:	bd08      	pop	{r3, pc}
    83d2:	bf00      	nop
    83d4:	20001f8c 	.word	0x20001f8c

000083d8 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    83d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackEnd = pStackMem + stackSize - MPU_GUARD_ALIGN_AND_SIZE;
#else
	stackEnd = pStackMem + stackSize;
    83dc:	188c      	adds	r4, r1, r2
{
    83de:	4688      	mov	r8, r1
    83e0:	4617      	mov	r7, r2
    83e2:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    83e4:	2204      	movs	r2, #4
    83e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    83e8:	9909      	ldr	r1, [sp, #36]	; 0x24
    83ea:	4605      	mov	r5, r0
    83ec:	f017 fb2f 	bl	1fa4e <z_init_thread_base>

	_new_thread_init(thread, pStackMem, stackSize, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    83f0:	f1a4 0320 	sub.w	r3, r4, #32
#else
	pInitCtx->pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    83f4:	490c      	ldr	r1, [pc, #48]	; (8428 <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    83f6:	f023 0307 	bic.w	r3, r3, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    83fa:	2200      	movs	r2, #0
	pInitCtx->pc &= 0xfffffffe;
    83fc:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    8400:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    8404:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    8408:	6199      	str	r1, [r3, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    840a:	9906      	ldr	r1, [sp, #24]
    840c:	6059      	str	r1, [r3, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    840e:	9907      	ldr	r1, [sp, #28]
    8410:	6099      	str	r1, [r3, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    8412:	9908      	ldr	r1, [sp, #32]
    8414:	60d9      	str	r1, [r3, #12]
	pInitCtx->xpsr =
    8416:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
    841a:	601e      	str	r6, [r3, #0]
	pInitCtx->xpsr =
    841c:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    841e:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    8420:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    8422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8426:	bf00      	nop
    8428:	00017e49 	.word	0x00017e49

0000842c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    842c:	4901      	ldr	r1, [pc, #4]	; (8434 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    842e:	2210      	movs	r2, #16
	str r2, [r1]
    8430:	600a      	str	r2, [r1, #0]
	bx lr
    8432:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    8434:	e000ed10 	.word	0xe000ed10

00008438 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    8438:	4040      	eors	r0, r0
	msr BASEPRI, r0
    843a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    843e:	bf30      	wfi

	bx lr
    8440:	4770      	bx	lr
    8442:	bf00      	nop

00008444 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    8444:	4040      	eors	r0, r0
	msr BASEPRI, r0
    8446:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    844a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 8468 <__bus_fault+0x24>
	ldr ip, [ip]
    844e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    8452:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    8456:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    8458:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    845c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    8460:	b501      	push	{r0, lr}
	bl _Fault
    8462:	f7ff fef1 	bl	8248 <_Fault>

	pop {r0, pc}
    8466:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    8468:	e000ed04 	.word	0xe000ed04

0000846c <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    846c:	b538      	push	{r3, r4, r5, lr}
    846e:	4604      	mov	r4, r0
    8470:	460d      	mov	r5, r1
	LOG_PANIC();

	switch (reason) {
    8472:	2805      	cmp	r0, #5
    8474:	d81a      	bhi.n	84ac <z_NanoFatalErrorHandler+0x40>
    8476:	e8df f000 	tbb	[pc, r0]
    847a:	1903      	.short	0x1903
    847c:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    8480:	480d      	ldr	r0, [pc, #52]	; (84b8 <z_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    8482:	f00f fe7e 	bl	18182 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    8486:	f00e fcbb 	bl	16e00 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    848a:	69aa      	ldr	r2, [r5, #24]
    848c:	4601      	mov	r1, r0
    848e:	480b      	ldr	r0, [pc, #44]	; (84bc <z_NanoFatalErrorHandler+0x50>)
    8490:	f00f fe77 	bl	18182 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    8494:	4629      	mov	r1, r5
    8496:	4620      	mov	r0, r4
}
    8498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
    849c:	f000 b818 	b.w	84d0 <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    84a0:	4807      	ldr	r0, [pc, #28]	; (84c0 <z_NanoFatalErrorHandler+0x54>)
    84a2:	e7ee      	b.n	8482 <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    84a4:	4807      	ldr	r0, [pc, #28]	; (84c4 <z_NanoFatalErrorHandler+0x58>)
    84a6:	e7ec      	b.n	8482 <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    84a8:	4807      	ldr	r0, [pc, #28]	; (84c8 <z_NanoFatalErrorHandler+0x5c>)
    84aa:	e7ea      	b.n	8482 <z_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    84ac:	4601      	mov	r1, r0
    84ae:	4807      	ldr	r0, [pc, #28]	; (84cc <z_NanoFatalErrorHandler+0x60>)
    84b0:	f00f fe67 	bl	18182 <printk>
		break;
    84b4:	e7e7      	b.n	8486 <z_NanoFatalErrorHandler+0x1a>
    84b6:	bf00      	nop
    84b8:	0002195d 	.word	0x0002195d
    84bc:	000219fb 	.word	0x000219fb
    84c0:	0002197d 	.word	0x0002197d
    84c4:	000219a3 	.word	0x000219a3
    84c8:	000219bd 	.word	0x000219bd
    84cc:	000219d8 	.word	0x000219d8

000084d0 <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    84d0:	2805      	cmp	r0, #5
{
    84d2:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    84d4:	d00c      	beq.n	84f0 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    84d6:	f00e fcfd 	bl	16ed4 <k_is_in_isr>
    84da:	b160      	cbz	r0, 84f6 <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    84dc:	f00e fcfa 	bl	16ed4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    84e0:	490c      	ldr	r1, [pc, #48]	; (8514 <z_SysFatalErrorHandler+0x44>)
    84e2:	4b0d      	ldr	r3, [pc, #52]	; (8518 <z_SysFatalErrorHandler+0x48>)
    84e4:	2800      	cmp	r0, #0
    84e6:	bf08      	it	eq
    84e8:	4619      	moveq	r1, r3
    84ea:	480c      	ldr	r0, [pc, #48]	; (851c <z_SysFatalErrorHandler+0x4c>)
    84ec:	f00f fe49 	bl	18182 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    84f0:	f7ff ffa2 	bl	8438 <k_cpu_idle>
    84f4:	e7fc      	b.n	84f0 <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
    84f6:	f00e fcfd 	bl	16ef4 <z_is_thread_essential>
    84fa:	2800      	cmp	r0, #0
    84fc:	d1ee      	bne.n	84dc <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    84fe:	4c08      	ldr	r4, [pc, #32]	; (8520 <z_SysFatalErrorHandler+0x50>)
    8500:	4808      	ldr	r0, [pc, #32]	; (8524 <z_SysFatalErrorHandler+0x54>)
    8502:	68a1      	ldr	r1, [r4, #8]
    8504:	f00f fe3d 	bl	18182 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    8508:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    850a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    850e:	f000 b80b 	b.w	8528 <z_impl_k_thread_abort>
    8512:	bf00      	nop
    8514:	00021a37 	.word	0x00021a37
    8518:	00021a3b 	.word	0x00021a3b
    851c:	00021a4c 	.word	0x00021a4c
    8520:	20001f8c 	.word	0x20001f8c
    8524:	00021a6c 	.word	0x00021a6c

00008528 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    8528:	b538      	push	{r3, r4, r5, lr}
    852a:	4605      	mov	r5, r0
	__asm__ volatile(
    852c:	f04f 0320 	mov.w	r3, #32
    8530:	f3ef 8411 	mrs	r4, BASEPRI
    8534:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    8538:	f017 fa6a 	bl	1fa10 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    853c:	4b0a      	ldr	r3, [pc, #40]	; (8568 <z_impl_k_thread_abort+0x40>)
    853e:	689b      	ldr	r3, [r3, #8]
    8540:	42ab      	cmp	r3, r5
    8542:	d10b      	bne.n	855c <z_impl_k_thread_abort+0x34>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    8544:	4b09      	ldr	r3, [pc, #36]	; (856c <z_impl_k_thread_abort+0x44>)
    8546:	685a      	ldr	r2, [r3, #4]
    8548:	f3c2 0208 	ubfx	r2, r2, #0, #9
    854c:	b912      	cbnz	r2, 8554 <z_impl_k_thread_abort+0x2c>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    854e:	4620      	mov	r0, r4
    8550:	f7ff fd46 	bl	7fe0 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    8554:	685a      	ldr	r2, [r3, #4]
    8556:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    855a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    855c:	4620      	mov	r0, r4
}
    855e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    8562:	f017 b99a 	b.w	1f89a <z_reschedule_irqlock>
    8566:	bf00      	nop
    8568:	20001f8c 	.word	0x20001f8c
    856c:	e000ed00 	.word	0xe000ed00

00008570 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    8570:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    8572:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    8574:	4a0b      	ldr	r2, [pc, #44]	; (85a4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    8576:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    8578:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    857a:	bf1e      	ittt	ne
	movne	r1, #0
    857c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    857e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    8580:	f017 f827 	blne	1f5d2 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    8584:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    8586:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    858a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    858e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    8592:	4905      	ldr	r1, [pc, #20]	; (85a8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    8594:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    8596:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    8598:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    859a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    859e:	4803      	ldr	r0, [pc, #12]	; (85ac <_isr_wrapper+0x3c>)
	bx r0
    85a0:	4700      	bx	r0
    85a2:	0000      	.short	0x0000
	ldr r2, =_kernel
    85a4:	20001f8c 	.word	0x20001f8c
	ldr r1, =_sw_isr_table
    85a8:	0001fd94 	.word	0x0001fd94
	ldr r0, =_IntExit
    85ac:	00007fad 	.word	0x00007fad

000085b0 <__reset>:
#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl _PlatformInit
#endif

    /* lock interrupts: will get unlocked when switch to main task */
    bl	lock_interrupts
    85b0:	f011 fcc4 	bl	19f3c <lock_interrupts>
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    85b4:	f000 f804 	bl	85c0 <_PrepC>

000085b8 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    85b8:	bf30      	wfi
    b _SysNmiOnReset
    85ba:	f7ff bffd 	b.w	85b8 <_SysNmiOnReset>
    85be:	bf00      	nop

000085c0 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    85c0:	b508      	push	{r3, lr}
	process_sp = (u32_t)&_interrupt_stack + CONFIG_ISR_STACK_SIZE;
    85c2:	4b0e      	ldr	r3, [pc, #56]	; (85fc <_PrepC+0x3c>)
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    85c4:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    85c8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() | CONTROL_SPSEL_Msk);
    85cc:	f043 0302 	orr.w	r3, r3, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    85d0:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    85d4:	f3bf 8f6f 	isb	sy
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    85d8:	4b09      	ldr	r3, [pc, #36]	; (8600 <_PrepC+0x40>)
    85da:	4a0a      	ldr	r2, [pc, #40]	; (8604 <_PrepC+0x44>)
    85dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    85e0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    85e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    85e6:	f3bf 8f6f 	isb	sy
	 * gets set to _interrupt_stack during initialization.
	 */
	set_and_switch_to_psp();
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    85ea:	f00d ff11 	bl	16410 <z_bss_zero>
	z_data_copy();
    85ee:	f00d ff19 	bl	16424 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	_IntLibInit();
    85f2:	f7ff fce9 	bl	7fc8 <_IntLibInit>
	z_cstart();
    85f6:	f00d ff47 	bl	16488 <z_cstart>
    85fa:	bf00      	nop
    85fc:	20004ca0 	.word	0x20004ca0
    8600:	00000000 	.word	0x00000000
    8604:	e000ed00 	.word	0xe000ed00

00008608 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    8608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    860a:	4b08      	ldr	r3, [pc, #32]	; (862c <z_arch_configure_static_mpu_regions+0x24>)
    860c:	9301      	str	r3, [sp, #4]
    860e:	4b08      	ldr	r3, [pc, #32]	; (8630 <z_arch_configure_static_mpu_regions+0x28>)
    8610:	9302      	str	r3, [sp, #8]
    8612:	4b08      	ldr	r3, [pc, #32]	; (8634 <z_arch_configure_static_mpu_regions+0x2c>)
    8614:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    8616:	ab01      	add	r3, sp, #4
    8618:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    861a:	4a07      	ldr	r2, [pc, #28]	; (8638 <z_arch_configure_static_mpu_regions+0x30>)
    861c:	4b07      	ldr	r3, [pc, #28]	; (863c <z_arch_configure_static_mpu_regions+0x34>)
    861e:	2101      	movs	r1, #1
    8620:	4668      	mov	r0, sp
    8622:	f000 f891 	bl	8748 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    8626:	b005      	add	sp, #20
    8628:	f85d fb04 	ldr.w	pc, [sp], #4
    862c:	20000000 	.word	0x20000000
    8630:	00000000 	.word	0x00000000
    8634:	060b0000 	.word	0x060b0000
    8638:	20000000 	.word	0x20000000
    863c:	20010000 	.word	0x20010000

00008640 <_mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int _mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    8640:	b5f0      	push	{r4, r5, r6, r7, lr}
	MPU->RNR = index;
    8642:	4f20      	ldr	r7, [pc, #128]	; (86c4 <_mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    8644:	2600      	movs	r6, #0
    8646:	428e      	cmp	r6, r1
    8648:	db01      	blt.n	864e <_mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    864a:	4610      	mov	r0, r2
    864c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0) {
    864e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
    8652:	f8dc 4004 	ldr.w	r4, [ip, #4]
    8656:	b394      	cbz	r4, 86be <_mpu_configure_regions+0x7e>
		if (do_sanity_check &&
    8658:	b15b      	cbz	r3, 8672 <_mpu_configure_regions+0x32>
		((part->size & (part->size - 1)) == 0)
    865a:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
    865e:	ea14 0f0e 	tst.w	r4, lr
    8662:	d11a      	bne.n	869a <_mpu_configure_regions+0x5a>
		&&
    8664:	2c1f      	cmp	r4, #31
    8666:	d918      	bls.n	869a <_mpu_configure_regions+0x5a>
		((part->start & (part->size - 1)) == 0);
    8668:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    866c:	ea1e 0f05 	tst.w	lr, r5
    8670:	d113      	bne.n	869a <_mpu_configure_regions+0x5a>
	if (size <= 32) {
    8672:	2c20      	cmp	r4, #32
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    8674:	f8dc 5000 	ldr.w	r5, [ip]
	_get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    8678:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = _mpu_configure_region(reg_index, regions[i]);
    867c:	b2d2      	uxtb	r2, r2
	if (size <= 32) {
    867e:	d90f      	bls.n	86a0 <_mpu_configure_regions+0x60>
	if (size > (1UL << 31)) {
    8680:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    8684:	d80e      	bhi.n	86a4 <_mpu_configure_regions+0x64>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    8686:	3c01      	subs	r4, #1
    8688:	fab4 f484 	clz	r4, r4
    868c:	f1c4 041f 	rsb	r4, r4, #31
    8690:	0064      	lsls	r4, r4, #1
	if (index > (_get_num_regions() - 1)) {
    8692:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | _size_to_mpu_rasr_size(size);
    8694:	ea4c 0404 	orr.w	r4, ip, r4
    8698:	d906      	bls.n	86a8 <_mpu_configure_regions+0x68>
			return -EINVAL;
    869a:	f06f 0215 	mvn.w	r2, #21
    869e:	e7d4      	b.n	864a <_mpu_configure_regions+0xa>
		return REGION_32B;
    86a0:	2408      	movs	r4, #8
    86a2:	e7f6      	b.n	8692 <_mpu_configure_regions+0x52>
		return REGION_4G;
    86a4:	243e      	movs	r4, #62	; 0x3e
    86a6:	e7f4      	b.n	8692 <_mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    86a8:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    86ac:	4315      	orrs	r5, r2
    86ae:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    86b2:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    86b6:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    86b8:	60fd      	str	r5, [r7, #12]
		reg_index++;
    86ba:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    86bc:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    86be:	3601      	adds	r6, #1
    86c0:	e7c1      	b.n	8646 <_mpu_configure_regions+0x6>
    86c2:	bf00      	nop
    86c4:	e000ed90 	.word	0xe000ed90

000086c8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    86c8:	4b03      	ldr	r3, [pc, #12]	; (86d8 <arm_core_mpu_enable+0x10>)
    86ca:	2205      	movs	r2, #5
    86cc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    86ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    86d2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    86d6:	4770      	bx	lr
    86d8:	e000ed90 	.word	0xe000ed90

000086dc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    86dc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    86e0:	4b01      	ldr	r3, [pc, #4]	; (86e8 <arm_core_mpu_disable+0xc>)
    86e2:	2200      	movs	r2, #0
    86e4:	605a      	str	r2, [r3, #4]
}
    86e6:	4770      	bx	lr
    86e8:	e000ed90 	.word	0xe000ed90

000086ec <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    86ec:	4913      	ldr	r1, [pc, #76]	; (873c <arm_mpu_init+0x50>)
    86ee:	6808      	ldr	r0, [r1, #0]
    86f0:	2808      	cmp	r0, #8
{
    86f2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    86f4:	d81e      	bhi.n	8734 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", _get_num_regions());

	arm_core_mpu_disable();
    86f6:	f7ff fff1 	bl	86dc <arm_core_mpu_disable>
	MPU->RNR = index;
    86fa:	4c11      	ldr	r4, [pc, #68]	; (8740 <arm_mpu_init+0x54>)
    86fc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	_mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    86fe:	2200      	movs	r2, #0
    8700:	4290      	cmp	r0, r2
    8702:	f101 010c 	add.w	r1, r1, #12
    8706:	d105      	bne.n	8714 <arm_mpu_init+0x28>
		_region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    8708:	4b0e      	ldr	r3, [pc, #56]	; (8744 <arm_mpu_init+0x58>)
    870a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    870c:	f7ff ffdc 	bl	86c8 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    8710:	2000      	movs	r0, #0
}
    8712:	bd10      	pop	{r4, pc}
    8714:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8716:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    871a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    871e:	4313      	orrs	r3, r2
    8720:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8724:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    8726:	f851 3c04 	ldr.w	r3, [r1, #-4]
    872a:	f043 0301 	orr.w	r3, r3, #1
    872e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    8730:	3201      	adds	r2, #1
    8732:	e7e5      	b.n	8700 <arm_mpu_init+0x14>
		return -1;
    8734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8738:	e7eb      	b.n	8712 <arm_mpu_init+0x26>
    873a:	bf00      	nop
    873c:	000203fc 	.word	0x000203fc
    8740:	e000ed90 	.word	0xe000ed90
    8744:	200024c6 	.word	0x200024c6

00008748 <arm_core_mpu_configure_static_mpu_regions>:
{
    8748:	b510      	push	{r4, lr}
static int _mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    874a:	4c03      	ldr	r4, [pc, #12]	; (8758 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = _mpu_configure_regions(static_regions,
    874c:	2301      	movs	r3, #1
    874e:	7822      	ldrb	r2, [r4, #0]
    8750:	f7ff ff76 	bl	8640 <_mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    8754:	7020      	strb	r0, [r4, #0]
}
    8756:	bd10      	pop	{r4, pc}
    8758:	200024c6 	.word	0x200024c6

0000875c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    875c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = _mpu_configure_regions(dynamic_regions,
    875e:	4a08      	ldr	r2, [pc, #32]	; (8780 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    8760:	2300      	movs	r3, #0
    8762:	7812      	ldrb	r2, [r2, #0]
    8764:	f7ff ff6c 	bl	8640 <_mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    8768:	f110 0f16 	cmn.w	r0, #22
    876c:	d003      	beq.n	8776 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    876e:	4b05      	ldr	r3, [pc, #20]	; (8784 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    8770:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < _get_num_regions(); i++) {
    8772:	2807      	cmp	r0, #7
    8774:	dd00      	ble.n	8778 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    8776:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    8778:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    877a:	611a      	str	r2, [r3, #16]
    877c:	3001      	adds	r0, #1
    877e:	e7f8      	b.n	8772 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    8780:	200024c6 	.word	0x200024c6
    8784:	e000ed90 	.word	0xe000ed90

00008788 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    8788:	4b01      	ldr	r3, [pc, #4]	; (8790 <__stdout_hook_install+0x8>)
    878a:	6018      	str	r0, [r3, #0]
}
    878c:	4770      	bx	lr
    878e:	bf00      	nop
    8790:	200085e8 	.word	0x200085e8

00008794 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    8794:	b580      	push	{r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8796:	4e54      	ldr	r6, [pc, #336]	; (88e8 <ecc_thread+0x154>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    8798:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8900 <ecc_thread+0x16c>
    879c:	4635      	mov	r5, r6
    879e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    87a2:	4640      	mov	r0, r8
    87a4:	f00e fb5c 	bl	16e60 <z_impl_k_sem_take>
    87a8:	f3bf 8f5b 	dmb	ish
    87ac:	6834      	ldr	r4, [r6, #0]
    87ae:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    87b2:	f014 0401 	ands.w	r4, r4, #1
    87b6:	d04e      	beq.n	8856 <ecc_thread+0xc2>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    87b8:	f8df 9140 	ldr.w	r9, [pc, #320]	; 88fc <ecc_thread+0x168>
    87bc:	4c4b      	ldr	r4, [pc, #300]	; (88ec <ecc_thread+0x158>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    87be:	4f4c      	ldr	r7, [pc, #304]	; (88f0 <ecc_thread+0x15c>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    87c0:	484c      	ldr	r0, [pc, #304]	; (88f4 <ecc_thread+0x160>)
    87c2:	464a      	mov	r2, r9
    87c4:	4621      	mov	r1, r4
    87c6:	f00f fd02 	bl	181ce <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    87ca:	b3c8      	cbz	r0, 8840 <ecc_thread+0xac>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    87cc:	2220      	movs	r2, #32
    87ce:	4639      	mov	r1, r7
    87d0:	4620      	mov	r0, r4
    87d2:	f011 fc59 	bl	1a088 <memcmp>
    87d6:	2800      	cmp	r0, #0
    87d8:	d0f2      	beq.n	87c0 <ecc_thread+0x2c>
	return 0;
    87da:	2400      	movs	r4, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    87dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    87e0:	2001      	movs	r0, #1
    87e2:	f001 fbdd 	bl	9fa0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    87e6:	f100 0708 	add.w	r7, r0, #8
    87ea:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    87ec:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    87ee:	4638      	mov	r0, r7
    87f0:	f016 fc84 	bl	1f0fc <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    87f4:	233e      	movs	r3, #62	; 0x3e
    87f6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    87f8:	2342      	movs	r3, #66	; 0x42
    87fa:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    87fc:	2101      	movs	r1, #1
    87fe:	4638      	mov	r0, r7
    8800:	f016 fc7c 	bl	1f0fc <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    8804:	2308      	movs	r3, #8
    8806:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    8808:	2141      	movs	r1, #65	; 0x41
    880a:	4638      	mov	r0, r7
    880c:	f016 fc76 	bl	1f0fc <net_buf_simple_add>
    8810:	4607      	mov	r7, r0
	evt->status = status;
    8812:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
    8816:	b1ac      	cbz	r4, 8844 <ecc_thread+0xb0>
		(void)memset(evt->key, 0, sizeof(evt->key));
    8818:	2240      	movs	r2, #64	; 0x40
    881a:	2100      	movs	r1, #0
    881c:	f011 fc6e 	bl	1a0fc <memset>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8820:	f3bf 8f5b 	dmb	ish
    8824:	e855 3f00 	ldrex	r3, [r5]
    8828:	f023 0301 	bic.w	r3, r3, #1
    882c:	e845 3200 	strex	r2, r3, [r5]
    8830:	2a00      	cmp	r2, #0
    8832:	d1f7      	bne.n	8824 <ecc_thread+0x90>
    8834:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    8838:	4648      	mov	r0, r9
    883a:	f001 f85b 	bl	98f4 <bt_recv>
    883e:	e7ae      	b.n	879e <ecc_thread+0xa>
			return BT_HCI_ERR_UNSPECIFIED;
    8840:	241f      	movs	r4, #31
    8842:	e7cb      	b.n	87dc <ecc_thread+0x48>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    8844:	492b      	ldr	r1, [pc, #172]	; (88f4 <ecc_thread+0x160>)
    8846:	f011 fcae 	bl	1a1a6 <sys_memcpy_swap.constprop.2>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    884a:	492b      	ldr	r1, [pc, #172]	; (88f8 <ecc_thread+0x164>)
    884c:	f107 0021 	add.w	r0, r7, #33	; 0x21
    8850:	f011 fca9 	bl	1a1a6 <sys_memcpy_swap.constprop.2>
    8854:	e7e4      	b.n	8820 <ecc_thread+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8856:	f3bf 8f5b 	dmb	ish
    885a:	6833      	ldr	r3, [r6, #0]
    885c:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    8860:	079b      	lsls	r3, r3, #30
    8862:	d59c      	bpl.n	879e <ecc_thread+0xa>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    8864:	4925      	ldr	r1, [pc, #148]	; (88fc <ecc_thread+0x168>)
    8866:	4823      	ldr	r0, [pc, #140]	; (88f4 <ecc_thread+0x160>)
    8868:	f010 fb81 	bl	18f6e <uECC_valid_public_key>
	if (ret < 0) {
    886c:	2800      	cmp	r0, #0
    886e:	db07      	blt.n	8880 <ecc_thread+0xec>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    8870:	4a20      	ldr	r2, [pc, #128]	; (88f4 <ecc_thread+0x160>)
    8872:	4b22      	ldr	r3, [pc, #136]	; (88fc <ecc_thread+0x168>)
    8874:	f1a2 0120 	sub.w	r1, r2, #32
    8878:	4610      	mov	r0, r2
    887a:	f00f fcf6 	bl	1826a <uECC_shared_secret>
    887e:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8884:	2001      	movs	r0, #1
    8886:	f001 fb8b 	bl	9fa0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    888a:	f100 0708 	add.w	r7, r0, #8
    888e:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8890:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    8892:	4638      	mov	r0, r7
    8894:	f016 fc32 	bl	1f0fc <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    8898:	233e      	movs	r3, #62	; 0x3e
    889a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    889c:	2322      	movs	r3, #34	; 0x22
    889e:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    88a0:	2101      	movs	r1, #1
    88a2:	4638      	mov	r0, r7
    88a4:	f016 fc2a 	bl	1f0fc <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    88a8:	2309      	movs	r3, #9
    88aa:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    88ac:	2121      	movs	r1, #33	; 0x21
    88ae:	4638      	mov	r0, r7
    88b0:	f016 fc24 	bl	1f0fc <net_buf_simple_add>
    88b4:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    88b6:	3001      	adds	r0, #1
    88b8:	b984      	cbnz	r4, 88dc <ecc_thread+0x148>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    88ba:	221f      	movs	r2, #31
    88bc:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0, sizeof(evt->dhkey));
    88be:	4621      	mov	r1, r4
    88c0:	2220      	movs	r2, #32
    88c2:	f011 fc1b 	bl	1a0fc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    88c6:	f3bf 8f5b 	dmb	ish
    88ca:	e855 3f00 	ldrex	r3, [r5]
    88ce:	f023 0302 	bic.w	r3, r3, #2
    88d2:	e845 3200 	strex	r2, r3, [r5]
    88d6:	2a00      	cmp	r2, #0
    88d8:	d0ac      	beq.n	8834 <ecc_thread+0xa0>
    88da:	e7f6      	b.n	88ca <ecc_thread+0x136>
		evt->status = 0;
    88dc:	2200      	movs	r2, #0
    88de:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    88e0:	4904      	ldr	r1, [pc, #16]	; (88f4 <ecc_thread+0x160>)
    88e2:	f011 fc60 	bl	1a1a6 <sys_memcpy_swap.constprop.2>
    88e6:	e7ee      	b.n	88c6 <ecc_thread+0x132>
    88e8:	20000848 	.word	0x20000848
    88ec:	200024c7 	.word	0x200024c7
    88f0:	000205e8 	.word	0x000205e8
    88f4:	200024e7 	.word	0x200024e7
    88f8:	20002507 	.word	0x20002507
    88fc:	00020538 	.word	0x00020538
    8900:	20009404 	.word	0x20009404

00008904 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    8904:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    8906:	7d05      	ldrb	r5, [r0, #20]
    8908:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    890a:	b9ad      	cbnz	r5, 8938 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    890c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    890e:	881a      	ldrh	r2, [r3, #0]
    8910:	f242 0125 	movw	r1, #8229	; 0x2025
    8914:	428a      	cmp	r2, r1
    8916:	d017      	beq.n	8948 <bt_hci_ecc_send+0x44>
    8918:	f242 0126 	movw	r1, #8230	; 0x2026
    891c:	428a      	cmp	r2, r1
    891e:	d03c      	beq.n	899a <bt_hci_ecc_send+0x96>
    8920:	f242 0101 	movw	r1, #8193	; 0x2001
    8924:	428a      	cmp	r2, r1
    8926:	d107      	bne.n	8938 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    8928:	78da      	ldrb	r2, [r3, #3]
    892a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    892e:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    8930:	791a      	ldrb	r2, [r3, #4]
    8932:	f022 0201 	bic.w	r2, r2, #1
    8936:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    8938:	4b32      	ldr	r3, [pc, #200]	; (8a04 <bt_hci_ecc_send+0x100>)
    893a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    893e:	4620      	mov	r0, r4
    8940:	691b      	ldr	r3, [r3, #16]
}
    8942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    8946:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    8948:	2103      	movs	r1, #3
    894a:	3008      	adds	r0, #8
    894c:	f016 fc51 	bl	1f1f2 <net_buf_simple_pull>
	net_buf_unref(buf);
    8950:	4620      	mov	r0, r4
    8952:	f00c ffd7 	bl	15904 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8956:	f3bf 8f5b 	dmb	ish
    895a:	4b2b      	ldr	r3, [pc, #172]	; (8a08 <bt_hci_ecc_send+0x104>)
    895c:	681a      	ldr	r2, [r3, #0]
    895e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    8962:	0790      	lsls	r0, r2, #30
    8964:	d507      	bpl.n	8976 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    8966:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    8968:	4629      	mov	r1, r5
    896a:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    896e:	f011 fbf9 	bl	1a164 <send_cmd_status>
}
    8972:	2000      	movs	r0, #0
    8974:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8976:	f3bf 8f5b 	dmb	ish
    897a:	e853 2f00 	ldrex	r2, [r3]
    897e:	f042 0101 	orr.w	r1, r2, #1
    8982:	e843 1000 	strex	r0, r1, [r3]
    8986:	2800      	cmp	r0, #0
    8988:	d1f7      	bne.n	897a <bt_hci_ecc_send+0x76>
    898a:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    898e:	07d1      	lsls	r1, r2, #31
    8990:	d4e9      	bmi.n	8966 <bt_hci_ecc_send+0x62>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8992:	481e      	ldr	r0, [pc, #120]	; (8a0c <bt_hci_ecc_send+0x108>)
    8994:	f00e fa3a 	bl	16e0c <z_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
    8998:	e7e6      	b.n	8968 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    899a:	2103      	movs	r1, #3
    899c:	3008      	adds	r0, #8
    899e:	f016 fc28 	bl	1f1f2 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    89a2:	f3bf 8f5b 	dmb	ish
    89a6:	4b18      	ldr	r3, [pc, #96]	; (8a08 <bt_hci_ecc_send+0x104>)
    89a8:	681a      	ldr	r2, [r3, #0]
    89aa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    89ae:	07d2      	lsls	r2, r2, #31
    89b0:	d507      	bpl.n	89c2 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    89b2:	250c      	movs	r5, #12
	net_buf_unref(buf);
    89b4:	4620      	mov	r0, r4
    89b6:	f00c ffa5 	bl	15904 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    89ba:	4629      	mov	r1, r5
    89bc:	f242 0026 	movw	r0, #8230	; 0x2026
    89c0:	e7d5      	b.n	896e <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    89c2:	89a2      	ldrh	r2, [r4, #12]
    89c4:	2a3f      	cmp	r2, #63	; 0x3f
    89c6:	d91b      	bls.n	8a00 <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    89c8:	f3bf 8f5b 	dmb	ish
    89cc:	e853 2f00 	ldrex	r2, [r3]
    89d0:	f042 0102 	orr.w	r1, r2, #2
    89d4:	e843 1000 	strex	r0, r1, [r3]
    89d8:	2800      	cmp	r0, #0
    89da:	d1f7      	bne.n	89cc <bt_hci_ecc_send+0xc8>
    89dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    89e0:	0793      	lsls	r3, r2, #30
    89e2:	d4e6      	bmi.n	89b2 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    89e4:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    89e6:	480a      	ldr	r0, [pc, #40]	; (8a10 <bt_hci_ecc_send+0x10c>)
    89e8:	4631      	mov	r1, r6
    89ea:	f011 fbdc 	bl	1a1a6 <sys_memcpy_swap.constprop.2>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    89ee:	f106 0120 	add.w	r1, r6, #32
    89f2:	4808      	ldr	r0, [pc, #32]	; (8a14 <bt_hci_ecc_send+0x110>)
    89f4:	f011 fbd7 	bl	1a1a6 <sys_memcpy_swap.constprop.2>
    89f8:	4804      	ldr	r0, [pc, #16]	; (8a0c <bt_hci_ecc_send+0x108>)
    89fa:	f00e fa07 	bl	16e0c <z_impl_k_sem_give>
	status = BT_HCI_ERR_SUCCESS;
    89fe:	e7d9      	b.n	89b4 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    8a00:	2512      	movs	r5, #18
    8a02:	e7d7      	b.n	89b4 <bt_hci_ecc_send+0xb0>
    8a04:	20007c60 	.word	0x20007c60
    8a08:	20000848 	.word	0x20000848
    8a0c:	20009404 	.word	0x20009404
    8a10:	200024e7 	.word	0x200024e7
    8a14:	20002507 	.word	0x20002507

00008a18 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    8a18:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    8a1a:	4c0c      	ldr	r4, [pc, #48]	; (8a4c <bt_hci_ecc_init+0x34>)
    8a1c:	490c      	ldr	r1, [pc, #48]	; (8a50 <bt_hci_ecc_init+0x38>)
    8a1e:	b086      	sub	sp, #24
    8a20:	2300      	movs	r3, #0
    8a22:	220a      	movs	r2, #10
    8a24:	e9cd 3202 	strd	r3, r2, [sp, #8]
    8a28:	e9cd 3304 	strd	r3, r3, [sp, #16]
    8a2c:	e9cd 3300 	strd	r3, r3, [sp]
    8a30:	f240 424c 	movw	r2, #1100	; 0x44c
    8a34:	4b07      	ldr	r3, [pc, #28]	; (8a54 <bt_hci_ecc_init+0x3c>)
    8a36:	4620      	mov	r0, r4
    8a38:	f00e fa9e 	bl	16f78 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    8a3c:	4906      	ldr	r1, [pc, #24]	; (8a58 <bt_hci_ecc_init+0x40>)
    8a3e:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    8a40:	b006      	add	sp, #24
    8a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a46:	f016 bfe2 	b.w	1fa0e <z_impl_k_thread_name_set>
    8a4a:	bf00      	nop
    8a4c:	200007dc 	.word	0x200007dc
    8a50:	200025d0 	.word	0x200025d0
    8a54:	00008795 	.word	0x00008795
    8a58:	00021a91 	.word	0x00021a91

00008a5c <export>:
}

static int export(int (*export_func)(const char *name, void *val,
				     size_t val_len))

{
    8a5c:	b570      	push	{r4, r5, r6, lr}
	const struct bt_settings_handler *h;

	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    8a5e:	4c06      	ldr	r4, [pc, #24]	; (8a78 <export+0x1c>)
    8a60:	4d06      	ldr	r5, [pc, #24]	; (8a7c <export+0x20>)
{
    8a62:	4606      	mov	r6, r0
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    8a64:	42ac      	cmp	r4, r5
    8a66:	d301      	bcc.n	8a6c <export+0x10>
			h->export(export_func);
		}
	}

	return 0;
}
    8a68:	2000      	movs	r0, #0
    8a6a:	bd70      	pop	{r4, r5, r6, pc}
		if (h->export) {
    8a6c:	68e3      	ldr	r3, [r4, #12]
    8a6e:	b10b      	cbz	r3, 8a74 <export+0x18>
			h->export(export_func);
    8a70:	4630      	mov	r0, r6
    8a72:	4798      	blx	r3
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    8a74:	3410      	adds	r4, #16
    8a76:	e7f5      	b.n	8a64 <export+0x8>
    8a78:	0001ff80 	.word	0x0001ff80
    8a7c:	0001ffb0 	.word	0x0001ffb0

00008a80 <save_id>:
			  ID_DATA_LEN(bt_dev.id_addr));
    8a80:	4903      	ldr	r1, [pc, #12]	; (8a90 <save_id+0x10>)
	settings_save_one("bt/id", &bt_dev.id_addr,
    8a82:	4804      	ldr	r0, [pc, #16]	; (8a94 <save_id+0x14>)
    8a84:	79ca      	ldrb	r2, [r1, #7]
    8a86:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    8a8a:	f7fe bd8b 	b.w	75a4 <settings_save_one>
    8a8e:	bf00      	nop
    8a90:	20007c60 	.word	0x20007c60
    8a94:	00021add 	.word	0x00021add

00008a98 <commit>:
{
    8a98:	b538      	push	{r3, r4, r5, lr}
	if (!bt_dev.id_count) {
    8a9a:	4b0a      	ldr	r3, [pc, #40]	; (8ac4 <commit+0x2c>)
    8a9c:	79db      	ldrb	r3, [r3, #7]
    8a9e:	b13b      	cbz	r3, 8ab0 <commit+0x18>
{
    8aa0:	4c09      	ldr	r4, [pc, #36]	; (8ac8 <commit+0x30>)
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    8aa2:	4d0a      	ldr	r5, [pc, #40]	; (8acc <commit+0x34>)
    8aa4:	42ac      	cmp	r4, r5
    8aa6:	d308      	bcc.n	8aba <commit+0x22>
	bt_dev_show_info();
    8aa8:	f011 fe16 	bl	1a6d8 <bt_dev_show_info>
	return 0;
    8aac:	2000      	movs	r0, #0
    8aae:	e003      	b.n	8ab8 <commit+0x20>
		err = bt_setup_id_addr();
    8ab0:	f001 f84a 	bl	9b48 <bt_setup_id_addr>
		if (err) {
    8ab4:	2800      	cmp	r0, #0
    8ab6:	d0f3      	beq.n	8aa0 <commit+0x8>
}
    8ab8:	bd38      	pop	{r3, r4, r5, pc}
		if (h->commit) {
    8aba:	68a3      	ldr	r3, [r4, #8]
    8abc:	b103      	cbz	r3, 8ac0 <commit+0x28>
			h->commit();
    8abe:	4798      	blx	r3
	for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    8ac0:	3410      	adds	r4, #16
    8ac2:	e7ef      	b.n	8aa4 <commit+0xc>
    8ac4:	20007c60 	.word	0x20007c60
    8ac8:	0001ff80 	.word	0x0001ff80
    8acc:	0001ffb0 	.word	0x0001ffb0

00008ad0 <set>:
	if (argc > 1) {
    8ad0:	2801      	cmp	r0, #1
{
    8ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ad6:	4607      	mov	r7, r0
    8ad8:	460d      	mov	r5, r1
    8ada:	4616      	mov	r6, r2
	if (argc > 1) {
    8adc:	dc1a      	bgt.n	8b14 <set+0x44>
	if (!strcmp(argv[0], "id")) {
    8ade:	491e      	ldr	r1, [pc, #120]	; (8b58 <set+0x88>)
    8ae0:	6828      	ldr	r0, [r5, #0]
    8ae2:	f011 fac5 	bl	1a070 <strcmp>
    8ae6:	b1c8      	cbz	r0, 8b1c <set+0x4c>
	return 0;
    8ae8:	2400      	movs	r4, #0
    8aea:	e010      	b.n	8b0e <set+0x3e>
			if (!strcmp(argv[0], h->name)) {
    8aec:	6821      	ldr	r1, [r4, #0]
    8aee:	6828      	ldr	r0, [r5, #0]
    8af0:	f011 fabe 	bl	1a070 <strcmp>
    8af4:	b930      	cbnz	r0, 8b04 <set+0x34>
				return h->set(argc, argv, value_ctx);
    8af6:	6863      	ldr	r3, [r4, #4]
    8af8:	4632      	mov	r2, r6
    8afa:	1d29      	adds	r1, r5, #4
    8afc:	1e78      	subs	r0, r7, #1
}
    8afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return h->set(argc, argv, value_ctx);
    8b02:	4718      	bx	r3
		for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    8b04:	3410      	adds	r4, #16
    8b06:	4544      	cmp	r4, r8
    8b08:	d3f0      	bcc.n	8aec <set+0x1c>
		return -ENOENT;
    8b0a:	f06f 0401 	mvn.w	r4, #1
}
    8b0e:	4620      	mov	r0, r4
    8b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (h = _bt_settings_start; h < _bt_settings_end; h++) {
    8b14:	4c11      	ldr	r4, [pc, #68]	; (8b5c <set+0x8c>)
    8b16:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8b64 <set+0x94>
    8b1a:	e7f4      	b.n	8b06 <set+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8b1c:	4d10      	ldr	r5, [pc, #64]	; (8b60 <set+0x90>)
    8b1e:	f3bf 8f5b 	dmb	ish
    8b22:	682c      	ldr	r4, [r5, #0]
    8b24:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8b28:	f3c4 0480 	ubfx	r4, r4, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    8b2c:	2c00      	cmp	r4, #0
    8b2e:	d1db      	bne.n	8ae8 <set+0x18>
		len = settings_val_read_cb(value_ctx, &bt_dev.id_addr, len);
    8b30:	3d70      	subs	r5, #112	; 0x70
    8b32:	2207      	movs	r2, #7
    8b34:	4629      	mov	r1, r5
    8b36:	4630      	mov	r0, r6
    8b38:	f011 f8c1 	bl	19cbe <settings_val_read_cb>
		if (len < sizeof(bt_dev.id_addr[0])) {
    8b3c:	2806      	cmp	r0, #6
    8b3e:	d806      	bhi.n	8b4e <set+0x7e>
			(void)memset(bt_dev.id_addr, 0,
    8b40:	2207      	movs	r2, #7
    8b42:	4621      	mov	r1, r4
    8b44:	4628      	mov	r0, r5
    8b46:	f011 fad9 	bl	1a0fc <memset>
			bt_dev.id_count = 0U;
    8b4a:	71ec      	strb	r4, [r5, #7]
    8b4c:	e7df      	b.n	8b0e <set+0x3e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    8b4e:	2307      	movs	r3, #7
    8b50:	fbb0 f0f3 	udiv	r0, r0, r3
    8b54:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    8b56:	e7da      	b.n	8b0e <set+0x3e>
    8b58:	00021ae0 	.word	0x00021ae0
    8b5c:	0001ff80 	.word	0x0001ff80
    8b60:	20007cd0 	.word	0x20007cd0
    8b64:	0001ffb0 	.word	0x0001ffb0

00008b68 <bt_settings_encode_key>:
{
    8b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b6c:	b088      	sub	sp, #32
    8b6e:	799c      	ldrb	r4, [r3, #6]
    8b70:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    8b74:	795d      	ldrb	r5, [r3, #5]
    8b76:	791e      	ldrb	r6, [r3, #4]
    8b78:	78df      	ldrb	r7, [r3, #3]
    8b7a:	f893 c002 	ldrb.w	ip, [r3, #2]
    8b7e:	f893 e001 	ldrb.w	lr, [r3, #1]
    8b82:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    8b84:	f1b8 0f00 	cmp.w	r8, #0
    8b88:	d00e      	beq.n	8ba8 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    8b8a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    8b8e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    8b92:	4613      	mov	r3, r2
    8b94:	e9cd 6702 	strd	r6, r7, [sp, #8]
    8b98:	e9cd 4500 	strd	r4, r5, [sp]
    8b9c:	4a08      	ldr	r2, [pc, #32]	; (8bc0 <bt_settings_encode_key+0x58>)
    8b9e:	f7fe f8f7 	bl	6d90 <snprintk>
}
    8ba2:	b008      	add	sp, #32
    8ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    8ba8:	e9cd e305 	strd	lr, r3, [sp, #20]
    8bac:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    8bb0:	4613      	mov	r3, r2
    8bb2:	e9cd 5601 	strd	r5, r6, [sp, #4]
    8bb6:	9400      	str	r4, [sp, #0]
    8bb8:	4a02      	ldr	r2, [pc, #8]	; (8bc4 <bt_settings_encode_key+0x5c>)
    8bba:	f7fe f8e9 	bl	6d90 <snprintk>
}
    8bbe:	e7f0      	b.n	8ba2 <bt_settings_encode_key+0x3a>
    8bc0:	00021a98 	.word	0x00021a98
    8bc4:	00021abc 	.word	0x00021abc

00008bc8 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8bc8:	4909      	ldr	r1, [pc, #36]	; (8bf0 <bt_settings_save_id+0x28>)
    8bca:	f3bf 8f5b 	dmb	ish
    8bce:	e851 3f00 	ldrex	r3, [r1]
    8bd2:	f043 0201 	orr.w	r2, r3, #1
    8bd6:	e841 2000 	strex	r0, r2, [r1]
    8bda:	2800      	cmp	r0, #0
    8bdc:	d1f7      	bne.n	8bce <bt_settings_save_id+0x6>
    8bde:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8be2:	07db      	lsls	r3, r3, #31
    8be4:	d403      	bmi.n	8bee <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    8be6:	3908      	subs	r1, #8
    8be8:	4802      	ldr	r0, [pc, #8]	; (8bf4 <bt_settings_save_id+0x2c>)
    8bea:	f016 bd89 	b.w	1f700 <k_queue_append>
}
    8bee:	4770      	bx	lr
    8bf0:	2000860c 	.word	0x2000860c
    8bf4:	20001fc8 	.word	0x20001fc8

00008bf8 <bt_settings_init>:
	.h_commit = commit,
	.h_export = export,
};

int bt_settings_init(void)
{
    8bf8:	b508      	push	{r3, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    8bfa:	f7fe fd9f 	bl	773c <settings_subsys_init>
	if (err) {
    8bfe:	b920      	cbnz	r0, 8c0a <bt_settings_init+0x12>
		BT_ERR("settings_subsys_init failed (err %d)", err);
		return err;
	}

	err = settings_register(&bt_settings);
    8c00:	4802      	ldr	r0, [pc, #8]	; (8c0c <bt_settings_init+0x14>)
		BT_ERR("settings_register failed (err %d)", err);
		return err;
	}

	return 0;
}
    8c02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = settings_register(&bt_settings);
    8c06:	f7fe bd5f 	b.w	76c8 <settings_register>
}
    8c0a:	bd08      	pop	{r3, pc}
    8c0c:	200085ec 	.word	0x200085ec

00008c10 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    8c10:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    8c12:	7802      	ldrb	r2, [r0, #0]
    8c14:	2a01      	cmp	r2, #1
{
    8c16:	4604      	mov	r4, r0
    8c18:	460b      	mov	r3, r1
	switch (src->type) {
    8c1a:	d017      	beq.n	8c4c <uuid_to_uuid128+0x3c>
    8c1c:	b11a      	cbz	r2, 8c26 <uuid_to_uuid128+0x16>
    8c1e:	2a02      	cmp	r2, #2
    8c20:	d02c      	beq.n	8c7c <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    8c22:	bcf0      	pop	{r4, r5, r6, r7}
    8c24:	4770      	bx	lr
		*dst = uuid128_base;
    8c26:	4a18      	ldr	r2, [pc, #96]	; (8c88 <uuid_to_uuid128+0x78>)
    8c28:	460d      	mov	r5, r1
    8c2a:	f102 0710 	add.w	r7, r2, #16
    8c2e:	6810      	ldr	r0, [r2, #0]
    8c30:	6851      	ldr	r1, [r2, #4]
    8c32:	462e      	mov	r6, r5
    8c34:	c603      	stmia	r6!, {r0, r1}
    8c36:	3208      	adds	r2, #8
    8c38:	42ba      	cmp	r2, r7
    8c3a:	4635      	mov	r5, r6
    8c3c:	d1f7      	bne.n	8c2e <uuid_to_uuid128+0x1e>
    8c3e:	7812      	ldrb	r2, [r2, #0]
    8c40:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    8c42:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    8c44:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    8c46:	0a12      	lsrs	r2, r2, #8
    8c48:	739a      	strb	r2, [r3, #14]
    8c4a:	e7ea      	b.n	8c22 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    8c4c:	4a0e      	ldr	r2, [pc, #56]	; (8c88 <uuid_to_uuid128+0x78>)
    8c4e:	460d      	mov	r5, r1
    8c50:	f102 0710 	add.w	r7, r2, #16
    8c54:	6810      	ldr	r0, [r2, #0]
    8c56:	6851      	ldr	r1, [r2, #4]
    8c58:	462e      	mov	r6, r5
    8c5a:	c603      	stmia	r6!, {r0, r1}
    8c5c:	3208      	adds	r2, #8
    8c5e:	42ba      	cmp	r2, r7
    8c60:	4635      	mov	r5, r6
    8c62:	d1f7      	bne.n	8c54 <uuid_to_uuid128+0x44>
    8c64:	7812      	ldrb	r2, [r2, #0]
    8c66:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    8c68:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    8c6a:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    8c6c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    8c70:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    8c72:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    8c74:	0a12      	lsrs	r2, r2, #8
    8c76:	7399      	strb	r1, [r3, #14]
    8c78:	741a      	strb	r2, [r3, #16]
    8c7a:	e7d2      	b.n	8c22 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    8c7c:	4601      	mov	r1, r0
    8c7e:	2211      	movs	r2, #17
    8c80:	4618      	mov	r0, r3
}
    8c82:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    8c84:	f011 ba10 	b.w	1a0a8 <memcpy>
    8c88:	00021ae6 	.word	0x00021ae6

00008c8c <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    8c8c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    8c8e:	4c06      	ldr	r4, [pc, #24]	; (8ca8 <le_dhkey_complete+0x1c>)
    8c90:	6822      	ldr	r2, [r4, #0]
    8c92:	b132      	cbz	r2, 8ca2 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    8c94:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    8c96:	7803      	ldrb	r3, [r0, #0]
    8c98:	b923      	cbnz	r3, 8ca4 <le_dhkey_complete+0x18>
    8c9a:	3001      	adds	r0, #1
    8c9c:	4790      	blx	r2
		dh_key_cb = NULL;
    8c9e:	2300      	movs	r3, #0
    8ca0:	6023      	str	r3, [r4, #0]
	}
}
    8ca2:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    8ca4:	2000      	movs	r0, #0
    8ca6:	e7f9      	b.n	8c9c <le_dhkey_complete+0x10>
    8ca8:	2000085c 	.word	0x2000085c

00008cac <le_pkey_complete>:
{
    8cac:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    8cae:	6885      	ldr	r5, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8cb0:	480e      	ldr	r0, [pc, #56]	; (8cec <le_pkey_complete+0x40>)
    8cb2:	f06f 0120 	mvn.w	r1, #32
    8cb6:	f011 faf7 	bl	1a2a8 <atomic_and>
	if (!evt->status) {
    8cba:	782b      	ldrb	r3, [r5, #0]
    8cbc:	b943      	cbnz	r3, 8cd0 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    8cbe:	1c69      	adds	r1, r5, #1
    8cc0:	2240      	movs	r2, #64	; 0x40
    8cc2:	480b      	ldr	r0, [pc, #44]	; (8cf0 <le_pkey_complete+0x44>)
    8cc4:	f011 f9f0 	bl	1a0a8 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8cc8:	2110      	movs	r1, #16
    8cca:	4808      	ldr	r0, [pc, #32]	; (8cec <le_pkey_complete+0x40>)
    8ccc:	f011 fadd 	bl	1a28a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8cd0:	4b08      	ldr	r3, [pc, #32]	; (8cf4 <le_pkey_complete+0x48>)
    8cd2:	681c      	ldr	r4, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    8cd4:	1c6e      	adds	r6, r5, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8cd6:	b904      	cbnz	r4, 8cda <le_pkey_complete+0x2e>
}
    8cd8:	bd70      	pop	{r4, r5, r6, pc}
		cb->func(evt->status ? NULL : evt->key);
    8cda:	782a      	ldrb	r2, [r5, #0]
    8cdc:	6823      	ldr	r3, [r4, #0]
    8cde:	2a00      	cmp	r2, #0
    8ce0:	bf0c      	ite	eq
    8ce2:	4630      	moveq	r0, r6
    8ce4:	2000      	movne	r0, #0
    8ce6:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8ce8:	6864      	ldr	r4, [r4, #4]
    8cea:	e7f4      	b.n	8cd6 <le_pkey_complete+0x2a>
    8cec:	20007cd0 	.word	0x20007cd0
    8cf0:	20002527 	.word	0x20002527
    8cf4:	20000860 	.word	0x20000860

00008cf8 <le_adv_report>:
		net_buf_simple_pull(ad, len - 1);
	}
}

static void le_adv_report(struct net_buf *buf)
{
    8cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t num_reports = net_buf_pull_u8(buf);
    8cfc:	f100 0808 	add.w	r8, r0, #8
{
    8d00:	b085      	sub	sp, #20
    8d02:	4604      	mov	r4, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    8d04:	4640      	mov	r0, r8
    8d06:	f016 fa84 	bl	1f212 <net_buf_simple_pull_u8>
			bt_addr_le_copy(&id_addr,
					find_id_addr(bt_dev.adv_id,
						     &info->addr));
		}

		if (scan_dev_found_cb) {
    8d0a:	4f22      	ldr	r7, [pc, #136]	; (8d94 <le_adv_report+0x9c>)
	u8_t num_reports = net_buf_pull_u8(buf);
    8d0c:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    8d0e:	9b01      	ldr	r3, [sp, #4]
    8d10:	b913      	cbnz	r3, 8d18 <le_adv_report+0x20>
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
#endif /* CONFIG_BT_CENTRAL */

		net_buf_pull(buf, info->length + sizeof(rssi));
	}
}
    8d12:	b005      	add	sp, #20
    8d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*info)) {
    8d18:	89a3      	ldrh	r3, [r4, #12]
    8d1a:	2b08      	cmp	r3, #8
    8d1c:	d9f9      	bls.n	8d12 <le_adv_report+0x1a>
		info = net_buf_pull_mem(buf, sizeof(*info));
    8d1e:	2109      	movs	r1, #9
    8d20:	4640      	mov	r0, r8
    8d22:	f016 fa6e 	bl	1f202 <net_buf_simple_pull_mem>
		rssi = info->data[info->length];
    8d26:	7a03      	ldrb	r3, [r0, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8d28:	4601      	mov	r1, r0
		rssi = info->data[info->length];
    8d2a:	4403      	add	r3, r0
		info = net_buf_pull_mem(buf, sizeof(*info));
    8d2c:	4605      	mov	r5, r0
		rssi = info->data[info->length];
    8d2e:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8d32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    8d36:	3b02      	subs	r3, #2
    8d38:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    8d3a:	a802      	add	r0, sp, #8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8d3c:	d827      	bhi.n	8d8e <le_adv_report+0x96>
			bt_addr_le_copy(&id_addr, &info->addr);
    8d3e:	f011 faa1 	bl	1a284 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8d42:	f89d 3008 	ldrb.w	r3, [sp, #8]
    8d46:	3b02      	subs	r3, #2
    8d48:	f88d 3008 	strb.w	r3, [sp, #8]
		if (scan_dev_found_cb) {
    8d4c:	683b      	ldr	r3, [r7, #0]
    8d4e:	b1a3      	cbz	r3, 8d7a <le_adv_report+0x82>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    8d50:	4640      	mov	r0, r8
    8d52:	f016 fa8a 	bl	1f26a <net_buf_simple_headroom>
			buf->len = info->length;
    8d56:	7a2b      	ldrb	r3, [r5, #8]
	state->len = buf->len;
    8d58:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    8d5c:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8d5e:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    8d60:	4643      	mov	r3, r8
    8d62:	782a      	ldrb	r2, [r5, #0]
    8d64:	683e      	ldr	r6, [r7, #0]
    8d66:	fa4f f18b 	sxtb.w	r1, fp
    8d6a:	a802      	add	r0, sp, #8
    8d6c:	47b0      	blx	r6
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    8d6e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    8d70:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8d74:	fa13 f389 	uxtah	r3, r3, r9
    8d78:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    8d7a:	7a29      	ldrb	r1, [r5, #8]
    8d7c:	4640      	mov	r0, r8
    8d7e:	3101      	adds	r1, #1
    8d80:	f016 fa37 	bl	1f1f2 <net_buf_simple_pull>
    8d84:	9b01      	ldr	r3, [sp, #4]
    8d86:	1e5e      	subs	r6, r3, #1
    8d88:	b2f3      	uxtb	r3, r6
    8d8a:	9301      	str	r3, [sp, #4]
    8d8c:	e7bf      	b.n	8d0e <le_adv_report+0x16>
			bt_addr_le_copy(&id_addr,
    8d8e:	f011 fa79 	bl	1a284 <bt_addr_le_copy>
    8d92:	e7db      	b.n	8d4c <le_adv_report+0x54>
    8d94:	20000868 	.word	0x20000868

00008d98 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_generate_dhkey_complete)),
#endif /* CONFIG_BT_SMP */
};

static void hci_le_meta_event(struct net_buf *buf)
{
    8d98:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_meta_event *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8d9a:	2101      	movs	r1, #1
{
    8d9c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8d9e:	3008      	adds	r0, #8
    8da0:	f016 fa2f 	bl	1f202 <net_buf_simple_pull_mem>
	for (i = 0; i < num_handlers; i++) {
    8da4:	4621      	mov	r1, r4
    8da6:	2308      	movs	r3, #8
    8da8:	4a02      	ldr	r2, [pc, #8]	; (8db4 <hci_le_meta_event+0x1c>)
    8daa:	7800      	ldrb	r0, [r0, #0]

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
    8dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8db0:	f011 bb09 	b.w	1a3c6 <handle_event.part.7>
    8db4:	00020608 	.word	0x00020608

00008db8 <hci_cmd_done.isra.19>:
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    8db8:	b570      	push	{r4, r5, r6, lr}
    8dba:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8dbc:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    8dbe:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8dc0:	f00c fd06 	bl	157d0 <net_buf_pool_get>
    8dc4:	4b0e      	ldr	r3, [pc, #56]	; (8e00 <hci_cmd_done.isra.19+0x48>)
    8dc6:	4283      	cmp	r3, r0
    8dc8:	d119      	bne.n	8dfe <hci_cmd_done.isra.19+0x46>
	if (cmd(buf)->opcode != opcode) {
    8dca:	4628      	mov	r0, r5
    8dcc:	f00c fd06 	bl	157dc <net_buf_id>
	if (cmd(buf)->sync) {
    8dd0:	4628      	mov	r0, r5
    8dd2:	f00c fd03 	bl	157dc <net_buf_id>
    8dd6:	4c0b      	ldr	r4, [pc, #44]	; (8e04 <hci_cmd_done.isra.19+0x4c>)
    8dd8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    8ddc:	6843      	ldr	r3, [r0, #4]
    8dde:	b173      	cbz	r3, 8dfe <hci_cmd_done.isra.19+0x46>
		cmd(buf)->status = status;
    8de0:	4628      	mov	r0, r5
    8de2:	f00c fcfb 	bl	157dc <net_buf_id>
    8de6:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    8dea:	4628      	mov	r0, r5
    8dec:	f00c fcf6 	bl	157dc <net_buf_id>
    8df0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
    8df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8df8:	6840      	ldr	r0, [r0, #4]
    8dfa:	f00e b807 	b.w	16e0c <z_impl_k_sem_give>
    8dfe:	bd70      	pop	{r4, r5, r6, pc}
    8e00:	200094dc 	.word	0x200094dc
    8e04:	2000084c 	.word	0x2000084c

00008e08 <hci_cmd_status>:
{
    8e08:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8e0a:	2104      	movs	r1, #4
{
    8e0c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8e0e:	3008      	adds	r0, #8
    8e10:	f016 f9f7 	bl	1f202 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    8e14:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    8e16:	7800      	ldrb	r0, [r0, #0]
    8e18:	4621      	mov	r1, r4
    8e1a:	f7ff ffcd 	bl	8db8 <hci_cmd_done.isra.19>
	if (ncmd) {
    8e1e:	b125      	cbz	r5, 8e2a <hci_cmd_status+0x22>
    8e20:	4802      	ldr	r0, [pc, #8]	; (8e2c <hci_cmd_status+0x24>)
}
    8e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e26:	f00d bff1 	b.w	16e0c <z_impl_k_sem_give>
    8e2a:	bd38      	pop	{r3, r4, r5, pc}
    8e2c:	20007d08 	.word	0x20007d08

00008e30 <hci_cmd_complete>:
{
    8e30:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8e32:	2103      	movs	r1, #3
{
    8e34:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8e36:	3008      	adds	r0, #8
    8e38:	f016 f9e3 	bl	1f202 <net_buf_simple_pull_mem>
	status = buf->data[0];
    8e3c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    8e3e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    8e40:	7818      	ldrb	r0, [r3, #0]
    8e42:	4621      	mov	r1, r4
    8e44:	f7ff ffb8 	bl	8db8 <hci_cmd_done.isra.19>
	if (ncmd) {
    8e48:	b125      	cbz	r5, 8e54 <hci_cmd_complete+0x24>
    8e4a:	4803      	ldr	r0, [pc, #12]	; (8e58 <hci_cmd_complete+0x28>)
}
    8e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e50:	f00d bfdc 	b.w	16e0c <z_impl_k_sem_give>
    8e54:	bd38      	pop	{r3, r4, r5, pc}
    8e56:	bf00      	nop
    8e58:	20007d08 	.word	0x20007d08

00008e5c <hci_tx_thread>:
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
    8e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    8e60:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8f4c <hci_tx_thread+0xf0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8e64:	4c37      	ldr	r4, [pc, #220]	; (8f44 <hci_tx_thread+0xe8>)
		events[0].state = K_POLL_STATE_NOT_READY;
    8e66:	f8d8 300c 	ldr.w	r3, [r8, #12]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BT_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    8e6a:	4837      	ldr	r0, [pc, #220]	; (8f48 <hci_tx_thread+0xec>)
		events[0].state = K_POLL_STATE_NOT_READY;
    8e6c:	f36f 3310 	bfc	r3, #12, #5
    8e70:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8e74:	f001 fa82 	bl	a37c <bt_conn_prepare_events>
    8e78:	1c47      	adds	r7, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout)

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
    8e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8e7e:	4639      	mov	r1, r7
    8e80:	4832      	ldr	r0, [pc, #200]	; (8f4c <hci_tx_thread+0xf0>)
    8e82:	f00e faf1 	bl	17468 <z_impl_k_poll>
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
		BT_ASSERT(err == 0);
    8e86:	2800      	cmp	r0, #0
    8e88:	d056      	beq.n	8f38 <hci_tx_thread+0xdc>
	BT_ASSERT(buf);
    8e8a:	4040      	eors	r0, r0
    8e8c:	f380 8811 	msr	BASEPRI, r0
    8e90:	f04f 0004 	mov.w	r0, #4
    8e94:	df02      	svc	2
		switch (ev->state) {
    8e96:	68eb      	ldr	r3, [r5, #12]
    8e98:	f3c3 3304 	ubfx	r3, r3, #12, #5
    8e9c:	2b04      	cmp	r3, #4
    8e9e:	d134      	bne.n	8f0a <hci_tx_thread+0xae>
			if (ev->tag == BT_EVENT_CMD_TX) {
    8ea0:	f895 a00c 	ldrb.w	sl, [r5, #12]
    8ea4:	f1ba 0f00 	cmp.w	sl, #0
    8ea8:	d136      	bne.n	8f18 <hci_tx_thread+0xbc>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8eaa:	4651      	mov	r1, sl
    8eac:	4658      	mov	r0, fp
    8eae:	f016 f8a7 	bl	1f000 <net_buf_get>
	BT_ASSERT(buf);
    8eb2:	4606      	mov	r6, r0
    8eb4:	2800      	cmp	r0, #0
    8eb6:	d0e8      	beq.n	8e8a <hci_tx_thread+0x2e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    8eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8ebc:	4648      	mov	r0, r9
    8ebe:	f00d ffcf 	bl	16e60 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    8ec2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    8ec6:	b118      	cbz	r0, 8ed0 <hci_tx_thread+0x74>
		net_buf_unref(bt_dev.sent_cmd);
    8ec8:	f00c fd1c 	bl	15904 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8ecc:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    8ed0:	4630      	mov	r0, r6
    8ed2:	f016 f90f 	bl	1f0f4 <net_buf_ref>
    8ed6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    8eda:	4630      	mov	r0, r6
    8edc:	f7ff fd12 	bl	8904 <bt_hci_ecc_send>
	if (err) {
    8ee0:	b198      	cbz	r0, 8f0a <hci_tx_thread+0xae>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    8ee2:	4648      	mov	r0, r9
    8ee4:	f00d ff92 	bl	16e0c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    8ee8:	4630      	mov	r0, r6
    8eea:	f00c fc77 	bl	157dc <net_buf_id>
    8eee:	2100      	movs	r1, #0
    8ef0:	201f      	movs	r0, #31
    8ef2:	f7ff ff61 	bl	8db8 <hci_cmd_done.isra.19>
		net_buf_unref(bt_dev.sent_cmd);
    8ef6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    8efa:	f00c fd03 	bl	15904 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8efe:	2300      	movs	r3, #0
		net_buf_unref(buf);
    8f00:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    8f02:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    8f06:	f00c fcfd 	bl	15904 <net_buf_unref>
	for (; count; ev++, count--) {
    8f0a:	3514      	adds	r5, #20
    8f0c:	3f01      	subs	r7, #1
    8f0e:	2f00      	cmp	r7, #0
    8f10:	d1c1      	bne.n	8e96 <hci_tx_thread+0x3a>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    8f12:	f00d feeb 	bl	16cec <z_impl_k_yield>
    8f16:	e7a6      	b.n	8e66 <hci_tx_thread+0xa>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    8f18:	f1ba 0f01 	cmp.w	sl, #1
    8f1c:	d104      	bne.n	8f28 <hci_tx_thread+0xcc>
					conn = CONTAINER_OF(ev->fifo,
    8f1e:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    8f20:	381c      	subs	r0, #28
    8f22:	f001 f97f 	bl	a224 <bt_conn_notify_tx>
    8f26:	e7f0      	b.n	8f0a <hci_tx_thread+0xae>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    8f28:	f1ba 0f02 	cmp.w	sl, #2
    8f2c:	d1ed      	bne.n	8f0a <hci_tx_thread+0xae>
					conn = CONTAINER_OF(ev->fifo,
    8f2e:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    8f30:	382c      	subs	r0, #44	; 0x2c
    8f32:	f001 fc31 	bl	a798 <bt_conn_process_tx>
    8f36:	e7e8      	b.n	8f0a <hci_tx_thread+0xae>
    8f38:	4d04      	ldr	r5, [pc, #16]	; (8f4c <hci_tx_thread+0xf0>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    8f3a:	f8df 9014 	ldr.w	r9, [pc, #20]	; 8f50 <hci_tx_thread+0xf4>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8f3e:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
    8f42:	e7e4      	b.n	8f0e <hci_tx_thread+0xb2>
    8f44:	20007c60 	.word	0x20007c60
    8f48:	20008624 	.word	0x20008624
    8f4c:	20008610 	.word	0x20008610
    8f50:	20007d08 	.word	0x20007d08

00008f54 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    8f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    8f56:	4e0b      	ldr	r6, [pc, #44]	; (8f84 <id_find+0x30>)
{
    8f58:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    8f5a:	2500      	movs	r5, #0
    8f5c:	79f3      	ldrb	r3, [r6, #7]
    8f5e:	b2ec      	uxtb	r4, r5
    8f60:	42a3      	cmp	r3, r4
    8f62:	d802      	bhi.n	8f6a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    8f64:	f06f 0401 	mvn.w	r4, #1
    8f68:	e009      	b.n	8f7e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    8f6a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    8f6e:	2207      	movs	r2, #7
    8f70:	4431      	add	r1, r6
    8f72:	4638      	mov	r0, r7
    8f74:	f011 f888 	bl	1a088 <memcmp>
    8f78:	3501      	adds	r5, #1
    8f7a:	2800      	cmp	r0, #0
    8f7c:	d1ee      	bne.n	8f5c <id_find+0x8>
}
    8f7e:	4620      	mov	r0, r4
    8f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f82:	bf00      	nop
    8f84:	20007c60 	.word	0x20007c60

00008f88 <slave_update_conn_param>:
{
    8f88:	b508      	push	{r3, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    8f8a:	2108      	movs	r1, #8
{
    8f8c:	4603      	mov	r3, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    8f8e:	3004      	adds	r0, #4
    8f90:	f011 fa39 	bl	1a406 <atomic_test_bit>
    8f94:	b940      	cbnz	r0, 8fa8 <slave_update_conn_param+0x20>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8f96:	f103 0178 	add.w	r1, r3, #120	; 0x78
    8f9a:	f241 3288 	movw	r2, #5000	; 0x1388
    8f9e:	4803      	ldr	r0, [pc, #12]	; (8fac <slave_update_conn_param+0x24>)
}
    8fa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8fa4:	f00e b89a 	b.w	170dc <k_delayed_work_submit_to_queue>
    8fa8:	bd08      	pop	{r3, pc}
    8faa:	bf00      	nop
    8fac:	20001fc8 	.word	0x20001fc8

00008fb0 <bt_hci_cmd_create>:
{
    8fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8fb4:	4680      	mov	r8, r0
    8fb6:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    8fb8:	4813      	ldr	r0, [pc, #76]	; (9008 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    8fba:	4d14      	ldr	r5, [pc, #80]	; (900c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    8fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8fc0:	f016 f818 	bl	1eff4 <net_buf_alloc_fixed>
    8fc4:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    8fc6:	f100 0608 	add.w	r6, r0, #8
    8fca:	2100      	movs	r1, #0
    8fcc:	4630      	mov	r0, r6
	*(u8_t *)net_buf_user_data(buf) = type;
    8fce:	2700      	movs	r7, #0
    8fd0:	f016 f82f 	bl	1f032 <net_buf_simple_reserve>
    8fd4:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    8fd6:	4620      	mov	r0, r4
    8fd8:	f00c fc00 	bl	157dc <net_buf_id>
    8fdc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    8fe0:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    8fe4:	4620      	mov	r0, r4
    8fe6:	f00c fbf9 	bl	157dc <net_buf_id>
    8fea:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    8fee:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    8ff0:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    8ff2:	4630      	mov	r0, r6
    8ff4:	f016 f882 	bl	1f0fc <net_buf_simple_add>
	hdr->param_len = param_len;
    8ff8:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    8ffc:	f8a0 8000 	strh.w	r8, [r0]
}
    9000:	4620      	mov	r0, r4
    9002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9006:	bf00      	nop
    9008:	200094dc 	.word	0x200094dc
    900c:	2000084c 	.word	0x2000084c

00009010 <bt_hci_cmd_send>:
{
    9010:	b538      	push	{r3, r4, r5, lr}
    9012:	4605      	mov	r5, r0
	if (!buf) {
    9014:	460c      	mov	r4, r1
    9016:	b919      	cbnz	r1, 9020 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    9018:	f7ff ffca 	bl	8fb0 <bt_hci_cmd_create>
		if (!buf) {
    901c:	4604      	mov	r4, r0
    901e:	b198      	cbz	r0, 9048 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    9020:	f640 4335 	movw	r3, #3125	; 0xc35
    9024:	429d      	cmp	r5, r3
    9026:	d109      	bne.n	903c <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
    9028:	4620      	mov	r0, r4
    902a:	f7ff fc6b 	bl	8904 <bt_hci_ecc_send>
		if (err) {
    902e:	4605      	mov	r5, r0
    9030:	b110      	cbz	r0, 9038 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    9032:	4620      	mov	r0, r4
    9034:	f00c fc66 	bl	15904 <net_buf_unref>
}
    9038:	4628      	mov	r0, r5
    903a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    903c:	4621      	mov	r1, r4
    903e:	4804      	ldr	r0, [pc, #16]	; (9050 <bt_hci_cmd_send+0x40>)
    9040:	f016 f84b 	bl	1f0da <net_buf_put>
	return 0;
    9044:	2500      	movs	r5, #0
    9046:	e7f7      	b.n	9038 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    9048:	f06f 0536 	mvn.w	r5, #54	; 0x36
    904c:	e7f4      	b.n	9038 <bt_hci_cmd_send+0x28>
    904e:	bf00      	nop
    9050:	20007d24 	.word	0x20007d24

00009054 <bt_hci_cmd_send_sync>:
{
    9054:	b570      	push	{r4, r5, r6, lr}
    9056:	4615      	mov	r5, r2
    9058:	b086      	sub	sp, #24
	if (!buf) {
    905a:	460c      	mov	r4, r1
    905c:	b919      	cbnz	r1, 9066 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    905e:	f7ff ffa7 	bl	8fb0 <bt_hci_cmd_create>
		if (!buf) {
    9062:	4604      	mov	r4, r0
    9064:	b3a0      	cbz	r0, 90d0 <bt_hci_cmd_send_sync+0x7c>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    9066:	2201      	movs	r2, #1
    9068:	2100      	movs	r1, #0
    906a:	4668      	mov	r0, sp
    906c:	f016 fcbc 	bl	1f9e8 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    9070:	4620      	mov	r0, r4
    9072:	f00c fbb3 	bl	157dc <net_buf_id>
    9076:	4e18      	ldr	r6, [pc, #96]	; (90d8 <bt_hci_cmd_send_sync+0x84>)
    9078:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    907c:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    9080:	4620      	mov	r0, r4
    9082:	f016 f837 	bl	1f0f4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    9086:	4621      	mov	r1, r4
    9088:	4814      	ldr	r0, [pc, #80]	; (90dc <bt_hci_cmd_send_sync+0x88>)
    908a:	f016 f826 	bl	1f0da <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    908e:	f242 7110 	movw	r1, #10000	; 0x2710
    9092:	4668      	mov	r0, sp
    9094:	f00d fee4 	bl	16e60 <z_impl_k_sem_take>
	if (cmd(buf)->status) {
    9098:	4620      	mov	r0, r4
    909a:	f00c fb9f 	bl	157dc <net_buf_id>
    909e:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    90a2:	b173      	cbz	r3, 90c2 <bt_hci_cmd_send_sync+0x6e>
		switch (cmd(buf)->status) {
    90a4:	4620      	mov	r0, r4
    90a6:	f00c fb99 	bl	157dc <net_buf_id>
    90aa:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    90ae:	2b09      	cmp	r3, #9
			err = -EIO;
    90b0:	bf0c      	ite	eq
    90b2:	f06f 053c 	mvneq.w	r5, #60	; 0x3c
    90b6:	f06f 0504 	mvnne.w	r5, #4
			net_buf_unref(buf);
    90ba:	4620      	mov	r0, r4
    90bc:	f00c fc22 	bl	15904 <net_buf_unref>
    90c0:	e003      	b.n	90ca <bt_hci_cmd_send_sync+0x76>
		if (rsp) {
    90c2:	2d00      	cmp	r5, #0
    90c4:	d0f9      	beq.n	90ba <bt_hci_cmd_send_sync+0x66>
			*rsp = buf;
    90c6:	602c      	str	r4, [r5, #0]
		err = 0;
    90c8:	461d      	mov	r5, r3
}
    90ca:	4628      	mov	r0, r5
    90cc:	b006      	add	sp, #24
    90ce:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOBUFS;
    90d0:	f06f 0536 	mvn.w	r5, #54	; 0x36
    90d4:	e7f9      	b.n	90ca <bt_hci_cmd_send_sync+0x76>
    90d6:	bf00      	nop
    90d8:	2000084c 	.word	0x2000084c
    90dc:	20007d24 	.word	0x20007d24

000090e0 <set_le_scan_enable>:
{
    90e0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    90e2:	2102      	movs	r1, #2
{
    90e4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    90e6:	f242 000c 	movw	r0, #8204	; 0x200c
    90ea:	f7ff ff61 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
    90ee:	4604      	mov	r4, r0
    90f0:	b330      	cbz	r0, 9140 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    90f2:	2102      	movs	r1, #2
    90f4:	3008      	adds	r0, #8
    90f6:	f016 f801 	bl	1f0fc <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    90fa:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    90fc:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    90fe:	d116      	bne.n	912e <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    9100:	210d      	movs	r1, #13
    9102:	4811      	ldr	r0, [pc, #68]	; (9148 <set_le_scan_enable+0x68>)
    9104:	f011 f97f 	bl	1a406 <atomic_test_bit>
    9108:	7058      	strb	r0, [r3, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    910a:	4621      	mov	r1, r4
	cp->enable = enable;
    910c:	701d      	strb	r5, [r3, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    910e:	2200      	movs	r2, #0
    9110:	f242 000c 	movw	r0, #8204	; 0x200c
    9114:	f7ff ff9e 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    9118:	4604      	mov	r4, r0
    911a:	b930      	cbnz	r0, 912a <set_le_scan_enable+0x4a>
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    911c:	2d01      	cmp	r5, #1
    911e:	d109      	bne.n	9134 <set_le_scan_enable+0x54>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9120:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9124:	4808      	ldr	r0, [pc, #32]	; (9148 <set_le_scan_enable+0x68>)
    9126:	f011 f8b0 	bl	1a28a <atomic_or>
}
    912a:	4620      	mov	r0, r4
    912c:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    912e:	2200      	movs	r2, #0
    9130:	7042      	strb	r2, [r0, #1]
    9132:	e7ea      	b.n	910a <set_le_scan_enable+0x2a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9134:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    9138:	4803      	ldr	r0, [pc, #12]	; (9148 <set_le_scan_enable+0x68>)
    913a:	f011 f8b5 	bl	1a2a8 <atomic_and>
    913e:	e7f4      	b.n	912a <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    9140:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9144:	e7f1      	b.n	912a <set_le_scan_enable+0x4a>
    9146:	bf00      	nop
    9148:	20007cd0 	.word	0x20007cd0

0000914c <set_advertise_enable>:
{
    914c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    914e:	2101      	movs	r1, #1
{
    9150:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    9152:	f242 000a 	movw	r0, #8202	; 0x200a
    9156:	f7ff ff2b 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
    915a:	4604      	mov	r4, r0
    915c:	b1d8      	cbz	r0, 9196 <set_advertise_enable+0x4a>
	if (enable) {
    915e:	3008      	adds	r0, #8
    9160:	b18d      	cbz	r5, 9186 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    9162:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    9164:	f015 ffd9 	bl	1f11a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    9168:	4621      	mov	r1, r4
    916a:	2200      	movs	r2, #0
    916c:	f242 000a 	movw	r0, #8202	; 0x200a
    9170:	f7ff ff70 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    9174:	4604      	mov	r4, r0
    9176:	b920      	cbnz	r0, 9182 <set_advertise_enable+0x36>
	if (val) {
    9178:	b13d      	cbz	r5, 918a <set_advertise_enable+0x3e>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    917a:	2140      	movs	r1, #64	; 0x40
    917c:	4807      	ldr	r0, [pc, #28]	; (919c <set_advertise_enable+0x50>)
    917e:	f011 f884 	bl	1a28a <atomic_or>
}
    9182:	4620      	mov	r0, r4
    9184:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    9186:	4629      	mov	r1, r5
    9188:	e7ec      	b.n	9164 <set_advertise_enable+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    918a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    918e:	4803      	ldr	r0, [pc, #12]	; (919c <set_advertise_enable+0x50>)
    9190:	f011 f88a 	bl	1a2a8 <atomic_and>
    9194:	e7f5      	b.n	9182 <set_advertise_enable+0x36>
		return -ENOBUFS;
    9196:	f06f 0436 	mvn.w	r4, #54	; 0x36
    919a:	e7f2      	b.n	9182 <set_advertise_enable+0x36>
    919c:	20007cd0 	.word	0x20007cd0

000091a0 <hci_disconn_complete>:
{
    91a0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    91a2:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    91a4:	7835      	ldrb	r5, [r6, #0]
    91a6:	bb45      	cbnz	r5, 91fa <hci_disconn_complete+0x5a>
	conn = bt_conn_lookup_handle(handle);
    91a8:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    91ac:	f001 f9f2 	bl	a594 <bt_conn_lookup_handle>
	if (!conn) {
    91b0:	4604      	mov	r4, r0
    91b2:	b198      	cbz	r0, 91dc <hci_disconn_complete+0x3c>
	conn->err = evt->reason;
    91b4:	78f3      	ldrb	r3, [r6, #3]
    91b6:	7243      	strb	r3, [r0, #9]
	k_thread_foreach(hci_stack_dump, "HCI");
    91b8:	4910      	ldr	r1, [pc, #64]	; (91fc <hci_disconn_complete+0x5c>)
    91ba:	4811      	ldr	r0, [pc, #68]	; (9200 <hci_disconn_complete+0x60>)
    91bc:	f016 fc26 	bl	1fa0c <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    91c0:	4620      	mov	r0, r4
    91c2:	4629      	mov	r1, r5
    91c4:	f001 f954 	bl	a470 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    91c8:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    91ca:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    91cc:	4620      	mov	r0, r4
	if (conn->type != BT_CONN_TYPE_LE) {
    91ce:	b11b      	cbz	r3, 91d8 <hci_disconn_complete+0x38>
}
    91d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    91d4:	f011 bb4d 	b.w	1a872 <bt_conn_unref>
	bt_conn_unref(conn);
    91d8:	f011 fb4b 	bl	1a872 <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    91dc:	2109      	movs	r1, #9
    91de:	4809      	ldr	r0, [pc, #36]	; (9204 <hci_disconn_complete+0x64>)
    91e0:	f011 f911 	bl	1a406 <atomic_test_bit>
    91e4:	b148      	cbz	r0, 91fa <hci_disconn_complete+0x5a>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    91e6:	2106      	movs	r1, #6
    91e8:	4806      	ldr	r0, [pc, #24]	; (9204 <hci_disconn_complete+0x64>)
    91ea:	f011 f90c 	bl	1a406 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    91ee:	b920      	cbnz	r0, 91fa <hci_disconn_complete+0x5a>
		set_advertise_enable(true);
    91f0:	2001      	movs	r0, #1
}
    91f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		set_advertise_enable(true);
    91f6:	f7ff bfa9 	b.w	914c <set_advertise_enable>
}
    91fa:	bd70      	pop	{r4, r5, r6, pc}
    91fc:	00021afd 	.word	0x00021afd
    9200:	0001a283 	.word	0x0001a283
    9204:	20007cd0 	.word	0x20007cd0

00009208 <enh_conn_complete>:
{
    9208:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    920c:	7803      	ldrb	r3, [r0, #0]
{
    920e:	4605      	mov	r5, r0
	if (evt->status) {
    9210:	b1bb      	cbz	r3, 9242 <enh_conn_complete+0x3a>
		conn = find_pending_connect(NULL);
    9212:	2000      	movs	r0, #0
    9214:	f011 f8ea 	bl	1a3ec <find_pending_connect>
		if (!conn) {
    9218:	4604      	mov	r4, r0
    921a:	b178      	cbz	r0, 923c <enh_conn_complete+0x34>
		conn->err = evt->status;
    921c:	782b      	ldrb	r3, [r5, #0]
    921e:	7243      	strb	r3, [r0, #9]
			if (conn->err == BT_HCI_ERR_ADV_TIMEOUT) {
    9220:	2b3c      	cmp	r3, #60	; 0x3c
    9222:	d109      	bne.n	9238 <enh_conn_complete+0x30>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9224:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9228:	4853      	ldr	r0, [pc, #332]	; (9378 <enh_conn_complete+0x170>)
    922a:	f011 f83d 	bl	1a2a8 <atomic_and>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    922e:	2100      	movs	r1, #0
    9230:	4620      	mov	r0, r4
    9232:	f001 f91d 	bl	a470 <bt_conn_set_state>
	bt_conn_unref(conn);
    9236:	4620      	mov	r0, r4
    9238:	f011 fb1b 	bl	1a872 <bt_conn_unref>
}
    923c:	b004      	add	sp, #16
    923e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    9242:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    9244:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    9248:	4621      	mov	r1, r4
    924a:	a802      	add	r0, sp, #8
    924c:	f011 f81a 	bl	1a284 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9250:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9254:	3b02      	subs	r3, #2
    9256:	b2db      	uxtb	r3, r3
    9258:	2b01      	cmp	r3, #1
    925a:	d87f      	bhi.n	935c <enh_conn_complete+0x154>
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    925c:	2206      	movs	r2, #6
    925e:	f105 0111 	add.w	r1, r5, #17
    9262:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9266:	f88d 3008 	strb.w	r3, [sp, #8]
    926a:	f010 ff1d 	bl	1a0a8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    926e:	2301      	movs	r3, #1
    9270:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(&id_addr);
    9274:	a802      	add	r0, sp, #8
    9276:	f011 f8b9 	bl	1a3ec <find_pending_connect>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    927a:	78eb      	ldrb	r3, [r5, #3]
    927c:	2b01      	cmp	r3, #1
	conn = find_pending_connect(&id_addr);
    927e:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    9280:	d109      	bne.n	9296 <enh_conn_complete+0x8e>
    9282:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9286:	483c      	ldr	r0, [pc, #240]	; (9378 <enh_conn_complete+0x170>)
    9288:	f011 f80e 	bl	1a2a8 <atomic_and>
		if (!conn) {
    928c:	b92c      	cbnz	r4, 929a <enh_conn_complete+0x92>
			conn = bt_conn_add_le(&id_addr);
    928e:	a802      	add	r0, sp, #8
    9290:	f001 f8bc 	bl	a40c <bt_conn_add_le>
    9294:	4604      	mov	r4, r0
	if (!conn) {
    9296:	2c00      	cmp	r4, #0
    9298:	d0d0      	beq.n	923c <enh_conn_complete+0x34>
	conn->handle = handle;
    929a:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    929c:	a902      	add	r1, sp, #8
	conn->handle = handle;
    929e:	f820 6b48 	strh.w	r6, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    92a2:	f010 ffef 	bl	1a284 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    92a6:	7e2a      	ldrb	r2, [r5, #24]
    92a8:	7deb      	ldrb	r3, [r5, #23]
    92aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    92ae:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    92b2:	7eaa      	ldrb	r2, [r5, #26]
    92b4:	7e6b      	ldrb	r3, [r5, #25]
    92b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    92ba:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    92be:	7eeb      	ldrb	r3, [r5, #27]
    92c0:	7f2a      	ldrb	r2, [r5, #28]
    92c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    92c6:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    92ca:	78ef      	ldrb	r7, [r5, #3]
    92cc:	70e7      	strb	r7, [r4, #3]
	conn->err = 0U;
    92ce:	f04f 0800 	mov.w	r8, #0
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    92d2:	2f01      	cmp	r7, #1
	conn->err = 0U;
    92d4:	f884 8009 	strb.w	r8, [r4, #9]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    92d8:	d11f      	bne.n	931a <enh_conn_complete+0x112>
		conn->id = bt_dev.adv_id;
    92da:	4e28      	ldr	r6, [pc, #160]	; (937c <enh_conn_complete+0x174>)
    92dc:	7a33      	ldrb	r3, [r6, #8]
    92de:	7223      	strb	r3, [r4, #8]
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    92e0:	4669      	mov	r1, sp
    92e2:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    92e6:	f010 ffcd 	bl	1a284 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    92ea:	7a21      	ldrb	r1, [r4, #8]
    92ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.resp_addr,
    92f0:	4431      	add	r1, r6
    92f2:	f104 0056 	add.w	r0, r4, #86	; 0x56
    92f6:	f010 ffc5 	bl	1a284 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    92fa:	2109      	movs	r1, #9
    92fc:	f106 0070 	add.w	r0, r6, #112	; 0x70
    9300:	f011 f881 	bl	1a406 <atomic_test_bit>
    9304:	b148      	cbz	r0, 931a <enh_conn_complete+0x112>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    9306:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
    930a:	4642      	mov	r2, r8
    930c:	f001 0340 	and.w	r3, r1, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    9310:	4313      	orrs	r3, r2
    9312:	d002      	beq.n	931a <enh_conn_complete+0x112>
			set_advertise_enable(true);
    9314:	4638      	mov	r0, r7
    9316:	f7ff ff19 	bl	914c <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    931a:	2104      	movs	r1, #4
    931c:	4620      	mov	r0, r4
    931e:	f001 f8a7 	bl	a470 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    9322:	7aa3      	ldrb	r3, [r4, #10]
    9324:	2b04      	cmp	r3, #4
    9326:	d186      	bne.n	9236 <enh_conn_complete+0x2e>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    9328:	78eb      	ldrb	r3, [r5, #3]
    932a:	b123      	cbz	r3, 9336 <enh_conn_complete+0x12e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    932c:	4b13      	ldr	r3, [pc, #76]	; (937c <enh_conn_complete+0x174>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    932e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    9332:	071b      	lsls	r3, r3, #28
    9334:	d517      	bpl.n	9366 <enh_conn_complete+0x15e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    9336:	2102      	movs	r1, #2
    9338:	f242 0016 	movw	r0, #8214	; 0x2016
    933c:	f7ff fe38 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
    9340:	4605      	mov	r5, r0
    9342:	b180      	cbz	r0, 9366 <enh_conn_complete+0x15e>
	cp = net_buf_add(buf, sizeof(*cp));
    9344:	2102      	movs	r1, #2
    9346:	3008      	adds	r0, #8
    9348:	f015 fed8 	bl	1f0fc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    934c:	8823      	ldrh	r3, [r4, #0]
    934e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9350:	4629      	mov	r1, r5
    9352:	f242 0016 	movw	r0, #8214	; 0x2016
    9356:	f7ff fe5b 	bl	9010 <bt_hci_cmd_send>
		if (!err) {
    935a:	e76c      	b.n	9236 <enh_conn_complete+0x2e>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    935c:	4621      	mov	r1, r4
    935e:	4668      	mov	r0, sp
    9360:	f010 ff90 	bl	1a284 <bt_addr_le_copy>
    9364:	e786      	b.n	9274 <enh_conn_complete+0x6c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9366:	78e3      	ldrb	r3, [r4, #3]
    9368:	2b01      	cmp	r3, #1
    936a:	f47f af64 	bne.w	9236 <enh_conn_complete+0x2e>
		slave_update_conn_param(conn);
    936e:	4620      	mov	r0, r4
    9370:	f7ff fe0a 	bl	8f88 <slave_update_conn_param>
    9374:	e75f      	b.n	9236 <enh_conn_complete+0x2e>
    9376:	bf00      	nop
    9378:	20007cd0 	.word	0x20007cd0
    937c:	20007c60 	.word	0x20007c60

00009380 <set_random_address>:
{
    9380:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    9382:	4d15      	ldr	r5, [pc, #84]	; (93d8 <set_random_address+0x58>)
    9384:	2206      	movs	r2, #6
    9386:	f105 010a 	add.w	r1, r5, #10
    938a:	4606      	mov	r6, r0
    938c:	f010 fe7c 	bl	1a088 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    9390:	4604      	mov	r4, r0
    9392:	b1d8      	cbz	r0, 93cc <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9394:	2106      	movs	r1, #6
    9396:	f242 0005 	movw	r0, #8197	; 0x2005
    939a:	f7ff fe09 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
    939e:	4604      	mov	r4, r0
    93a0:	b1b0      	cbz	r0, 93d0 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    93a2:	2206      	movs	r2, #6
    93a4:	4631      	mov	r1, r6
    93a6:	3008      	adds	r0, #8
    93a8:	f015 feae 	bl	1f108 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    93ac:	4621      	mov	r1, r4
    93ae:	2200      	movs	r2, #0
    93b0:	f242 0005 	movw	r0, #8197	; 0x2005
    93b4:	f7ff fe4e 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    93b8:	4604      	mov	r4, r0
    93ba:	b938      	cbnz	r0, 93cc <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    93bc:	2206      	movs	r2, #6
    93be:	4631      	mov	r1, r6
    93c0:	f105 000a 	add.w	r0, r5, #10
    93c4:	f010 fe70 	bl	1a0a8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    93c8:	2301      	movs	r3, #1
    93ca:	726b      	strb	r3, [r5, #9]
}
    93cc:	4620      	mov	r0, r4
    93ce:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    93d0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    93d4:	e7fa      	b.n	93cc <set_random_address+0x4c>
    93d6:	bf00      	nop
    93d8:	20007c60 	.word	0x20007c60

000093dc <le_adv_update>:
}

static int le_adv_update(const struct bt_data *ad, size_t ad_len,
			 const struct bt_data *sd, size_t sd_len,
			 bool connectable, bool use_name)
{
    93dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93e0:	b086      	sub	sp, #24
	struct bt_ad d[2] = {};
	int err;

	d[0].data = ad;
	d[0].len = ad_len;
    93e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
{
    93e6:	4615      	mov	r5, r2
    93e8:	461e      	mov	r6, r3

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    93ea:	2201      	movs	r2, #1
	struct bt_ad d[2] = {};
    93ec:	2300      	movs	r3, #0
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    93ee:	a902      	add	r1, sp, #8
    93f0:	f242 0008 	movw	r0, #8200	; 0x2008
{
    93f4:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    93f8:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	struct bt_ad d[2] = {};
    93fc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, d, 1);
    9400:	f011 f8e1 	bl	1a5c6 <set_ad>
	if (err) {
    9404:	4604      	mov	r4, r0
    9406:	bb10      	cbnz	r0, 944e <le_adv_update+0x72>
		return err;
	}

	d[0].data = sd;
	d[0].len = sd_len;
    9408:	e9cd 5602 	strd	r5, r6, [sp, #8]

	if (use_name) {
    940c:	f1b8 0f00 	cmp.w	r8, #0
    9410:	d011      	beq.n	9436 <le_adv_update+0x5a>
		const char *name;

		if (sd) {
    9412:	b115      	cbz	r5, 941a <le_adv_update+0x3e>
	for (i = 0; i < ad_len; i++) {
    9414:	4602      	mov	r2, r0
    9416:	42b2      	cmp	r2, r6
    9418:	d11d      	bne.n	9456 <le_adv_update+0x7a>
			}
		}

		name = bt_get_name();

		d[1].data = (&(struct bt_data)BT_DATA(
    941a:	4d14      	ldr	r5, [pc, #80]	; (946c <le_adv_update+0x90>)
    941c:	2309      	movs	r3, #9
    941e:	4628      	mov	r0, r5
    9420:	f88d 3000 	strb.w	r3, [sp]
    9424:	f010 fe1d 	bl	1a062 <strlen>
					BT_DATA_NAME_COMPLETE,
					name, strlen(name)));
		d[1].len = 1;
    9428:	2301      	movs	r3, #1
		d[1].data = (&(struct bt_data)BT_DATA(
    942a:	f88d 0001 	strb.w	r0, [sp, #1]
    942e:	9501      	str	r5, [sp, #4]
    9430:	f8cd d010 	str.w	sp, [sp, #16]
		d[1].len = 1;
    9434:	9305      	str	r3, [sp, #20]
	 * by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and
	 * zero len.
	 * So following condition check is unusual but correct.
	 */
	if (d[0].data || d[1].data || connectable) {
    9436:	9b02      	ldr	r3, [sp, #8]
    9438:	b913      	cbnz	r3, 9440 <le_adv_update+0x64>
    943a:	9b04      	ldr	r3, [sp, #16]
    943c:	b903      	cbnz	r3, 9440 <le_adv_update+0x64>
    943e:	b137      	cbz	r7, 944e <le_adv_update+0x72>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, d, 2);
    9440:	2202      	movs	r2, #2
    9442:	a902      	add	r1, sp, #8
    9444:	f242 0009 	movw	r0, #8201	; 0x2009
    9448:	f011 f8bd 	bl	1a5c6 <set_ad>
    944c:	4604      	mov	r4, r0
			return err;
		}
	}

	return 0;
}
    944e:	4620      	mov	r0, r4
    9450:	b006      	add	sp, #24
    9452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9456:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
    945a:	3908      	subs	r1, #8
    945c:	2901      	cmp	r1, #1
    945e:	d901      	bls.n	9464 <le_adv_update+0x88>
	for (i = 0; i < ad_len; i++) {
    9460:	3201      	adds	r2, #1
    9462:	e7d8      	b.n	9416 <le_adv_update+0x3a>
				return -EINVAL;
    9464:	f06f 0415 	mvn.w	r4, #21
    9468:	e7f1      	b.n	944e <le_adv_update+0x72>
    946a:	bf00      	nop
    946c:	00021b01 	.word	0x00021b01

00009470 <bt_le_scan_update>:
{
    9470:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9472:	210b      	movs	r1, #11
    9474:	4808      	ldr	r0, [pc, #32]	; (9498 <bt_le_scan_update+0x28>)
    9476:	f010 ffc6 	bl	1a406 <atomic_test_bit>
    947a:	4603      	mov	r3, r0
    947c:	b948      	cbnz	r0, 9492 <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    947e:	210a      	movs	r1, #10
    9480:	4805      	ldr	r0, [pc, #20]	; (9498 <bt_le_scan_update+0x28>)
    9482:	f010 ffc0 	bl	1a406 <atomic_test_bit>
    9486:	b120      	cbz	r0, 9492 <bt_le_scan_update+0x22>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    9488:	4618      	mov	r0, r3
}
    948a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    948e:	f7ff be27 	b.w	90e0 <set_le_scan_enable>
}
    9492:	2000      	movs	r0, #0
    9494:	bd08      	pop	{r3, pc}
    9496:	bf00      	nop
    9498:	20007cd0 	.word	0x20007cd0

0000949c <bt_init>:
{
    949c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    949e:	4d58      	ldr	r5, [pc, #352]	; (9600 <bt_init+0x164>)
    94a0:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    94a4:	6899      	ldr	r1, [r3, #8]
    94a6:	f011 0101 	ands.w	r1, r1, #1
{
    94aa:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94ac:	d124      	bne.n	94f8 <bt_init+0x5c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    94ae:	aa01      	add	r2, sp, #4
    94b0:	f640 4003 	movw	r0, #3075	; 0xc03
    94b4:	f7ff fdce 	bl	9054 <bt_hci_cmd_send_sync>
		if (err) {
    94b8:	4604      	mov	r4, r0
    94ba:	2800      	cmp	r0, #0
    94bc:	f040 809d 	bne.w	95fa <bt_init+0x15e>
		hci_reset_complete(rsp);
    94c0:	9b01      	ldr	r3, [sp, #4]
	u8_t status = buf->data[0];
    94c2:	689b      	ldr	r3, [r3, #8]
	if (status) {
    94c4:	781b      	ldrb	r3, [r3, #0]
    94c6:	b9a3      	cbnz	r3, 94f2 <bt_init+0x56>
	scan_dev_found_cb = NULL;
    94c8:	4a4e      	ldr	r2, [pc, #312]	; (9604 <bt_init+0x168>)
    94ca:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    94cc:	462b      	mov	r3, r5
    94ce:	f3bf 8f5b 	dmb	ish
    94d2:	f853 2f70 	ldr.w	r2, [r3, #112]!
    94d6:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    94da:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    94de:	f3bf 8f5b 	dmb	ish
    94e2:	e853 1f00 	ldrex	r1, [r3]
    94e6:	e843 2000 	strex	r0, r2, [r3]
    94ea:	2800      	cmp	r0, #0
    94ec:	d1f9      	bne.n	94e2 <bt_init+0x46>
    94ee:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    94f2:	9801      	ldr	r0, [sp, #4]
    94f4:	f00c fa06 	bl	15904 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    94f8:	aa01      	add	r2, sp, #4
    94fa:	2100      	movs	r1, #0
    94fc:	f241 0003 	movw	r0, #4099	; 0x1003
    9500:	f7ff fda8 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    9504:	4604      	mov	r4, r0
    9506:	2800      	cmp	r0, #0
    9508:	d177      	bne.n	95fa <bt_init+0x15e>
	read_local_features_complete(rsp);
    950a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    950c:	483e      	ldr	r0, [pc, #248]	; (9608 <bt_init+0x16c>)
    950e:	6899      	ldr	r1, [r3, #8]
    9510:	2208      	movs	r2, #8
    9512:	3101      	adds	r1, #1
    9514:	f010 fdc8 	bl	1a0a8 <memcpy>
	net_buf_unref(rsp);
    9518:	9801      	ldr	r0, [sp, #4]
    951a:	f00c f9f3 	bl	15904 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    951e:	4621      	mov	r1, r4
    9520:	aa01      	add	r2, sp, #4
    9522:	f241 0001 	movw	r0, #4097	; 0x1001
    9526:	f7ff fd95 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    952a:	4604      	mov	r4, r0
    952c:	2800      	cmp	r0, #0
    952e:	d164      	bne.n	95fa <bt_init+0x15e>
	read_local_ver_complete(rsp);
    9530:	9801      	ldr	r0, [sp, #4]
    9532:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    9534:	785a      	ldrb	r2, [r3, #1]
    9536:	742a      	strb	r2, [r5, #16]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    9538:	78d9      	ldrb	r1, [r3, #3]
    953a:	789a      	ldrb	r2, [r3, #2]
    953c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9540:	826a      	strh	r2, [r5, #18]
	bt_dev.lmp_version = rp->lmp_version;
    9542:	791a      	ldrb	r2, [r3, #4]
    9544:	746a      	strb	r2, [r5, #17]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    9546:	7a19      	ldrb	r1, [r3, #8]
    9548:	79da      	ldrb	r2, [r3, #7]
    954a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    954e:	82aa      	strh	r2, [r5, #20]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9550:	795a      	ldrb	r2, [r3, #5]
    9552:	799b      	ldrb	r3, [r3, #6]
    9554:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    9558:	82eb      	strh	r3, [r5, #22]
	net_buf_unref(rsp);
    955a:	f00c f9d3 	bl	15904 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    955e:	2103      	movs	r1, #3
    9560:	482a      	ldr	r0, [pc, #168]	; (960c <bt_init+0x170>)
    9562:	f010 ff50 	bl	1a406 <atomic_test_bit>
    9566:	4601      	mov	r1, r0
    9568:	bb50      	cbnz	r0, 95c0 <bt_init+0x124>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    956a:	aa01      	add	r2, sp, #4
    956c:	f241 0009 	movw	r0, #4105	; 0x1009
    9570:	f7ff fd70 	bl	9054 <bt_hci_cmd_send_sync>
		if (err) {
    9574:	4604      	mov	r4, r0
    9576:	2800      	cmp	r0, #0
    9578:	d13f      	bne.n	95fa <bt_init+0x15e>
		read_bdaddr_complete(rsp);
    957a:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    957c:	9002      	str	r0, [sp, #8]
    957e:	689e      	ldr	r6, [r3, #8]
    9580:	f8ad 000c 	strh.w	r0, [sp, #12]
    9584:	3601      	adds	r6, #1
	return memcmp(a, b, sizeof(*a));
    9586:	2206      	movs	r2, #6
    9588:	a902      	add	r1, sp, #8
    958a:	4630      	mov	r0, r6
    958c:	f010 fd7c 	bl	1a088 <memcmp>
    9590:	b198      	cbz	r0, 95ba <bt_init+0x11e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    9592:	4b1f      	ldr	r3, [pc, #124]	; (9610 <bt_init+0x174>)
    9594:	6818      	ldr	r0, [r3, #0]
    9596:	9004      	str	r0, [sp, #16]
    9598:	889b      	ldrh	r3, [r3, #4]
    959a:	f8ad 3014 	strh.w	r3, [sp, #20]
    959e:	2206      	movs	r2, #6
    95a0:	a904      	add	r1, sp, #16
    95a2:	4630      	mov	r0, r6
    95a4:	f010 fd70 	bl	1a088 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    95a8:	b138      	cbz	r0, 95ba <bt_init+0x11e>
	memcpy(dst, src, sizeof(*dst));
    95aa:	2206      	movs	r2, #6
    95ac:	4631      	mov	r1, r6
    95ae:	4819      	ldr	r0, [pc, #100]	; (9614 <bt_init+0x178>)
    95b0:	f010 fd7a 	bl	1a0a8 <memcpy>
	bt_dev.id_count = 1U;
    95b4:	2301      	movs	r3, #1
	bt_dev.id_addr[0].type = BT_ADDR_LE_PUBLIC;
    95b6:	702c      	strb	r4, [r5, #0]
	bt_dev.id_count = 1U;
    95b8:	71eb      	strb	r3, [r5, #7]
		net_buf_unref(rsp);
    95ba:	9801      	ldr	r0, [sp, #4]
    95bc:	f00c f9a2 	bl	15904 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    95c0:	aa01      	add	r2, sp, #4
    95c2:	2100      	movs	r1, #0
    95c4:	f241 0002 	movw	r0, #4098	; 0x1002
    95c8:	f7ff fd44 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    95cc:	4604      	mov	r4, r0
    95ce:	b9a0      	cbnz	r0, 95fa <bt_init+0x15e>
	read_supported_commands_complete(rsp);
    95d0:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    95d2:	4811      	ldr	r0, [pc, #68]	; (9618 <bt_init+0x17c>)
    95d4:	6899      	ldr	r1, [r3, #8]
    95d6:	2240      	movs	r2, #64	; 0x40
    95d8:	3101      	adds	r1, #1
    95da:	f010 fd65 	bl	1a0a8 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    95de:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
    95e2:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
    95e4:	f043 0306 	orr.w	r3, r3, #6
    95e8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
	net_buf_unref(rsp);
    95ec:	f00c f98a 	bl	15904 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    95f0:	7f2b      	ldrb	r3, [r5, #28]
    95f2:	0659      	lsls	r1, r3, #25
    95f4:	d412      	bmi.n	961c <bt_init+0x180>
		return -ENODEV;
    95f6:	f06f 0412 	mvn.w	r4, #18
}
    95fa:	4620      	mov	r0, r4
    95fc:	b007      	add	sp, #28
    95fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9600:	20007c60 	.word	0x20007c60
    9604:	20000868 	.word	0x20000868
    9608:	20007c78 	.word	0x20007c78
    960c:	20007cd0 	.word	0x20007cd0
    9610:	0002000a 	.word	0x0002000a
    9614:	20007c61 	.word	0x20007c61
    9618:	20007c80 	.word	0x20007c80
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    961c:	4621      	mov	r1, r4
    961e:	aa01      	add	r2, sp, #4
    9620:	f242 0003 	movw	r0, #8195	; 0x2003
    9624:	f7ff fd16 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    9628:	4604      	mov	r4, r0
    962a:	2800      	cmp	r0, #0
    962c:	d1e5      	bne.n	95fa <bt_init+0x15e>
	read_le_features_complete(rsp);
    962e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9630:	488b      	ldr	r0, [pc, #556]	; (9860 <bt_init+0x3c4>)
    9632:	6899      	ldr	r1, [r3, #8]
    9634:	2208      	movs	r2, #8
    9636:	3101      	adds	r1, #1
    9638:	f010 fd36 	bl	1a0a8 <memcpy>
	net_buf_unref(rsp);
    963c:	9801      	ldr	r0, [sp, #4]
    963e:	f00c f961 	bl	15904 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    9642:	4621      	mov	r1, r4
    9644:	aa01      	add	r2, sp, #4
    9646:	f242 0002 	movw	r0, #8194	; 0x2002
    964a:	f7ff fd03 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    964e:	4604      	mov	r4, r0
    9650:	2800      	cmp	r0, #0
    9652:	d1d2      	bne.n	95fa <bt_init+0x15e>
	le_read_buffer_size_complete(rsp);
    9654:	9b01      	ldr	r3, [sp, #4]
    9656:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    9658:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    965c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
    9660:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
    9662:	b139      	cbz	r1, 9674 <bt_init+0x1d8>
	le_max_num = MIN(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    9664:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    9666:	487f      	ldr	r0, [pc, #508]	; (9864 <bt_init+0x3c8>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    9668:	2a03      	cmp	r2, #3
    966a:	bf28      	it	cs
    966c:	2203      	movcs	r2, #3
    966e:	4611      	mov	r1, r2
    9670:	f016 f9ba 	bl	1f9e8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9674:	9801      	ldr	r0, [sp, #4]
    9676:	f00c f945 	bl	15904 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    967a:	7f2c      	ldrb	r4, [r5, #28]
    967c:	f014 0420 	ands.w	r4, r4, #32
    9680:	f000 80be 	beq.w	9800 <bt_init+0x364>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9684:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    9688:	071a      	lsls	r2, r3, #28
    968a:	f100 80d5 	bmi.w	9838 <bt_init+0x39c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    968e:	2108      	movs	r1, #8
    9690:	f242 0001 	movw	r0, #8193	; 0x2001
    9694:	f7ff fc8c 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
    9698:	4604      	mov	r4, r0
    969a:	2800      	cmp	r0, #0
    969c:	f000 80b7 	beq.w	980e <bt_init+0x372>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    96a0:	2108      	movs	r1, #8
    96a2:	4408      	add	r0, r1
    96a4:	f015 fd2a 	bl	1f0fc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    96a8:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    96ac:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    96b0:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    96b4:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    96b8:	bf0c      	ite	eq
    96ba:	230f      	moveq	r3, #15
    96bc:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    96be:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    96c0:	bf08      	it	eq
    96c2:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    96c6:	2200      	movs	r2, #0
    96c8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    96ca:	0a1b      	lsrs	r3, r3, #8
    96cc:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    96ce:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    96d0:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    96d2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    96d4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    96d6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    96d8:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    96da:	4621      	mov	r1, r4
    96dc:	f242 0001 	movw	r0, #8193	; 0x2001
    96e0:	f7ff fcb8 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    96e4:	4604      	mov	r4, r0
    96e6:	2800      	cmp	r0, #0
    96e8:	d187      	bne.n	95fa <bt_init+0x15e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    96ea:	7f2b      	ldrb	r3, [r5, #28]
    96ec:	069b      	lsls	r3, r3, #26
    96ee:	d421      	bmi.n	9734 <bt_init+0x298>
	if (bt_dev.le.mtu) {
    96f0:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    96f4:	b9f1      	cbnz	r1, 9734 <bt_init+0x298>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    96f6:	aa01      	add	r2, sp, #4
    96f8:	f241 0005 	movw	r0, #4101	; 0x1005
    96fc:	f7ff fcaa 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    9700:	4604      	mov	r4, r0
    9702:	2800      	cmp	r0, #0
    9704:	f47f af79 	bne.w	95fa <bt_init+0x15e>
	if (bt_dev.le.mtu) {
    9708:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    970c:	b97b      	cbnz	r3, 972e <bt_init+0x292>
	read_buffer_size_complete(rsp);
    970e:	9b01      	ldr	r3, [sp, #4]
    9710:	4854      	ldr	r0, [pc, #336]	; (9864 <bt_init+0x3c8>)
    9712:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    9714:	7899      	ldrb	r1, [r3, #2]
    9716:	785a      	ldrb	r2, [r3, #1]
    9718:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    971c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    9720:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    9722:	2a03      	cmp	r2, #3
    9724:	bf28      	it	cs
    9726:	2203      	movcs	r2, #3
    9728:	4611      	mov	r1, r2
    972a:	f016 f95d 	bl	1f9e8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    972e:	9801      	ldr	r0, [sp, #4]
    9730:	f00c f8e8 	bl	15904 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9734:	2108      	movs	r1, #8
    9736:	f640 4001 	movw	r0, #3073	; 0xc01
    973a:	f7ff fc39 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
    973e:	4604      	mov	r4, r0
    9740:	2800      	cmp	r0, #0
    9742:	d064      	beq.n	980e <bt_init+0x372>
	ev = net_buf_add(buf, sizeof(*ev));
    9744:	2108      	movs	r1, #8
    9746:	4408      	add	r0, r1
    9748:	f015 fcd8 	bl	1f0fc <net_buf_simple_add>
	dst[0] = val;
    974c:	2310      	movs	r3, #16
    974e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    9750:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    9752:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    9754:	7043      	strb	r3, [r0, #1]
    9756:	2602      	movs	r6, #2
    9758:	2320      	movs	r3, #32
	dst[0] = val;
    975a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    975c:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    975e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    9760:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    9762:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    9764:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9766:	4621      	mov	r1, r4
    9768:	f640 4001 	movw	r0, #3073	; 0xc01
    976c:	f7ff fc72 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    9770:	4604      	mov	r4, r0
    9772:	2800      	cmp	r0, #0
    9774:	f47f af41 	bne.w	95fa <bt_init+0x15e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9778:	4601      	mov	r1, r0
    977a:	aa01      	add	r2, sp, #4
    977c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9780:	f7ff fc68 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    9784:	4604      	mov	r4, r0
    9786:	bb28      	cbnz	r0, 97d4 <bt_init+0x338>
	net_buf_unref(rsp);
    9788:	9801      	ldr	r0, [sp, #4]
    978a:	f00c f8bb 	bl	15904 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    978e:	4621      	mov	r1, r4
    9790:	aa01      	add	r2, sp, #4
    9792:	f64f 4002 	movw	r0, #64514	; 0xfc02
    9796:	f7ff fc5d 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    979a:	4604      	mov	r4, r0
    979c:	b9d0      	cbnz	r0, 97d4 <bt_init+0x338>
	rp.cmds = (void *)rsp->data;
    979e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    97a0:	4831      	ldr	r0, [pc, #196]	; (9868 <bt_init+0x3cc>)
    97a2:	6899      	ldr	r1, [r3, #8]
    97a4:	4632      	mov	r2, r6
    97a6:	3101      	adds	r1, #1
    97a8:	f010 fc7e 	bl	1a0a8 <memcpy>
	net_buf_unref(rsp);
    97ac:	9801      	ldr	r0, [sp, #4]
    97ae:	f00c f8a9 	bl	15904 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    97b2:	aa01      	add	r2, sp, #4
    97b4:	4621      	mov	r1, r4
    97b6:	f64f 4003 	movw	r0, #64515	; 0xfc03
    97ba:	f7ff fc4b 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    97be:	b948      	cbnz	r0, 97d4 <bt_init+0x338>
	rp.feat = (void *)rsp->data;
    97c0:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    97c2:	482a      	ldr	r0, [pc, #168]	; (986c <bt_init+0x3d0>)
    97c4:	6899      	ldr	r1, [r3, #8]
    97c6:	2201      	movs	r2, #1
    97c8:	4411      	add	r1, r2
    97ca:	f010 fc6d 	bl	1a0a8 <memcpy>
	net_buf_unref(rsp);
    97ce:	9801      	ldr	r0, [sp, #4]
    97d0:	f00c f898 	bl	15904 <net_buf_unref>
		err = bt_conn_init();
    97d4:	f001 f846 	bl	a864 <bt_conn_init>
		if (err) {
    97d8:	4604      	mov	r4, r0
    97da:	2800      	cmp	r0, #0
    97dc:	f47f af0d 	bne.w	95fa <bt_init+0x15e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    97e0:	2102      	movs	r1, #2
    97e2:	4823      	ldr	r0, [pc, #140]	; (9870 <bt_init+0x3d4>)
    97e4:	f010 fd51 	bl	1a28a <atomic_or>
		bt_le_scan_update(false);
    97e8:	4620      	mov	r0, r4
    97ea:	f7ff fe41 	bl	9470 <bt_le_scan_update>
	if (bt_dev.id_count > 0) {
    97ee:	79eb      	ldrb	r3, [r5, #7]
    97f0:	2b00      	cmp	r3, #0
    97f2:	f43f af02 	beq.w	95fa <bt_init+0x15e>
    97f6:	2104      	movs	r1, #4
    97f8:	481d      	ldr	r0, [pc, #116]	; (9870 <bt_init+0x3d4>)
    97fa:	f010 fd46 	bl	1a28a <atomic_or>
    97fe:	e6fc      	b.n	95fa <bt_init+0x15e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    9800:	2102      	movs	r1, #2
    9802:	f640 406d 	movw	r0, #3181	; 0xc6d
    9806:	f7ff fbd3 	bl	8fb0 <bt_hci_cmd_create>
		if (!buf) {
    980a:	4606      	mov	r6, r0
    980c:	b910      	cbnz	r0, 9814 <bt_init+0x378>
		return -ENOBUFS;
    980e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9812:	e6f2      	b.n	95fa <bt_init+0x15e>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    9814:	2102      	movs	r1, #2
    9816:	3008      	adds	r0, #8
    9818:	f015 fc70 	bl	1f0fc <net_buf_simple_add>
		cp_le->le = 0x01;
    981c:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    981e:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    9820:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9822:	4622      	mov	r2, r4
    9824:	4631      	mov	r1, r6
    9826:	f640 406d 	movw	r0, #3181	; 0xc6d
    982a:	f7ff fc13 	bl	9054 <bt_hci_cmd_send_sync>
		if (err) {
    982e:	4604      	mov	r4, r0
    9830:	2800      	cmp	r0, #0
    9832:	f43f af27 	beq.w	9684 <bt_init+0x1e8>
    9836:	e6e0      	b.n	95fa <bt_init+0x15e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9838:	aa01      	add	r2, sp, #4
    983a:	2100      	movs	r1, #0
    983c:	f242 001c 	movw	r0, #8220	; 0x201c
    9840:	f7ff fc08 	bl	9054 <bt_hci_cmd_send_sync>
		if (err) {
    9844:	4604      	mov	r4, r0
    9846:	2800      	cmp	r0, #0
    9848:	f47f aed7 	bne.w	95fa <bt_init+0x15e>
		le_read_supp_states_complete(rsp);
    984c:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    984e:	6883      	ldr	r3, [r0, #8]
    9850:	f853 2f01 	ldr.w	r2, [r3, #1]!
    9854:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9856:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    985a:	f00c f853 	bl	15904 <net_buf_unref>
    985e:	e716      	b.n	968e <bt_init+0x1f2>
    9860:	20007cd8 	.word	0x20007cd8
    9864:	20007cec 	.word	0x20007cec
    9868:	20007cc1 	.word	0x20007cc1
    986c:	20007cc0 	.word	0x20007cc0
    9870:	20007cd0 	.word	0x20007cd0

00009874 <init_work>:
{
    9874:	b510      	push	{r4, lr}
	err = bt_init();
    9876:	f7ff fe11 	bl	949c <bt_init>
	if (ready_cb) {
    987a:	4b03      	ldr	r3, [pc, #12]	; (9888 <init_work+0x14>)
    987c:	681b      	ldr	r3, [r3, #0]
    987e:	b113      	cbz	r3, 9886 <init_work+0x12>
}
    9880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    9884:	4718      	bx	r3
}
    9886:	bd10      	pop	{r4, pc}
    9888:	20000864 	.word	0x20000864

0000988c <id_create.isra.29>:
static void id_create(u8_t id, bt_addr_le_t *addr, u8_t *irk)
    988c:	b530      	push	{r4, r5, lr}
    988e:	4d17      	ldr	r5, [pc, #92]	; (98ec <id_create.isra.29+0x60>)
    9890:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9894:	b085      	sub	sp, #20
    9896:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9898:	460c      	mov	r4, r1
    989a:	b1b1      	cbz	r1, 98ca <id_create.isra.29+0x3e>
    989c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    989e:	2207      	movs	r2, #7
    98a0:	a902      	add	r1, sp, #8
    98a2:	4620      	mov	r0, r4
    98a4:	9302      	str	r3, [sp, #8]
    98a6:	f8cd 300b 	str.w	r3, [sp, #11]
    98aa:	f010 fbed 	bl	1a088 <memcmp>
    98ae:	b160      	cbz	r0, 98ca <id_create.isra.29+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    98b0:	4621      	mov	r1, r4
    98b2:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    98b4:	f010 fce6 	bl	1a284 <bt_addr_le_copy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    98b8:	2101      	movs	r1, #1
    98ba:	480d      	ldr	r0, [pc, #52]	; (98f0 <id_create.isra.29+0x64>)
    98bc:	f010 fda3 	bl	1a406 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    98c0:	b108      	cbz	r0, 98c6 <id_create.isra.29+0x3a>
		bt_settings_save_id();
    98c2:	f7ff f981 	bl	8bc8 <bt_settings_save_id>
}
    98c6:	b005      	add	sp, #20
    98c8:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    98ca:	4668      	mov	r0, sp
    98cc:	f010 fef6 	bl	1a6bc <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    98d0:	4668      	mov	r0, sp
    98d2:	f7ff fb3f 	bl	8f54 <id_find>
    98d6:	2800      	cmp	r0, #0
    98d8:	daf7      	bge.n	98ca <id_create.isra.29+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    98da:	4669      	mov	r1, sp
    98dc:	4628      	mov	r0, r5
    98de:	f010 fcd1 	bl	1a284 <bt_addr_le_copy>
		if (addr) {
    98e2:	2c00      	cmp	r4, #0
    98e4:	d0e8      	beq.n	98b8 <id_create.isra.29+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    98e6:	4629      	mov	r1, r5
    98e8:	4620      	mov	r0, r4
    98ea:	e7e3      	b.n	98b4 <id_create.isra.29+0x28>
    98ec:	20007c60 	.word	0x20007c60
    98f0:	20007cd0 	.word	0x20007cd0

000098f4 <bt_recv>:
{
    98f4:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    98f6:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    98f8:	2d01      	cmp	r5, #1
{
    98fa:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    98fc:	d02e      	beq.n	995c <bt_recv+0x68>
    98fe:	2d03      	cmp	r5, #3
    9900:	d140      	bne.n	9984 <bt_recv+0x90>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9902:	8983      	ldrh	r3, [r0, #12]
    9904:	2b03      	cmp	r3, #3
    9906:	d805      	bhi.n	9914 <bt_recv+0x20>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    9908:	4040      	eors	r0, r0
    990a:	f380 8811 	msr	BASEPRI, r0
    990e:	f04f 0004 	mov.w	r0, #4
    9912:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9914:	2104      	movs	r1, #4
    9916:	3008      	adds	r0, #8
    9918:	f015 fc73 	bl	1f202 <net_buf_simple_pull_mem>
	acl(buf)->id = BT_CONN_ID_INVALID;
    991c:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    991e:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    9920:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->id = BT_CONN_ID_INVALID;
    9922:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    9924:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    9926:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    992a:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    992c:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    992e:	d003      	beq.n	9938 <bt_recv+0x44>
	net_buf_unref(buf);
    9930:	4620      	mov	r0, r4
    9932:	f00b ffe7 	bl	15904 <net_buf_unref>
    9936:	e00f      	b.n	9958 <bt_recv+0x64>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    9938:	f000 fe2c 	bl	a594 <bt_conn_lookup_handle>
	if (!conn) {
    993c:	4605      	mov	r5, r0
    993e:	2800      	cmp	r0, #0
    9940:	d0f6      	beq.n	9930 <bt_recv+0x3c>
	acl(buf)->id = bt_conn_index(conn);
    9942:	f000 ff83 	bl	a84c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    9946:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_index(conn);
    9948:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    994a:	4621      	mov	r1, r4
    994c:	4628      	mov	r0, r5
    994e:	f010 ff02 	bl	1a756 <bt_conn_recv>
	bt_conn_unref(conn);
    9952:	4628      	mov	r0, r5
    9954:	f010 ff8d 	bl	1a872 <bt_conn_unref>
		return 0;
    9958:	2000      	movs	r0, #0
}
    995a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    995c:	8983      	ldrh	r3, [r0, #12]
    995e:	2b01      	cmp	r3, #1
    9960:	d9d2      	bls.n	9908 <bt_recv+0x14>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9962:	2102      	movs	r1, #2
    9964:	3008      	adds	r0, #8
    9966:	f015 fc4c 	bl	1f202 <net_buf_simple_pull_mem>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    996a:	7800      	ldrb	r0, [r0, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    996c:	2813      	cmp	r0, #19
    996e:	d803      	bhi.n	9978 <bt_recv+0x84>
    9970:	4085      	lsls	r5, r0
    9972:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    9976:	d1c7      	bne.n	9908 <bt_recv+0x14>
	for (i = 0; i < num_handlers; i++) {
    9978:	2302      	movs	r3, #2
    997a:	4a05      	ldr	r2, [pc, #20]	; (9990 <bt_recv+0x9c>)
    997c:	4621      	mov	r1, r4
    997e:	f010 fd22 	bl	1a3c6 <handle_event.part.7>
    9982:	e7d5      	b.n	9930 <bt_recv+0x3c>
		net_buf_unref(buf);
    9984:	f00b ffbe 	bl	15904 <net_buf_unref>
		return -EINVAL;
    9988:	f06f 0015 	mvn.w	r0, #21
    998c:	e7e5      	b.n	995a <bt_recv+0x66>
    998e:	bf00      	nop
    9990:	00020668 	.word	0x00020668

00009994 <bt_recv_prio>:
{
    9994:	b538      	push	{r3, r4, r5, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9996:	7d05      	ldrb	r5, [r0, #20]
    9998:	2d01      	cmp	r5, #1
{
    999a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    999c:	d005      	beq.n	99aa <bt_recv_prio+0x16>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    999e:	4040      	eors	r0, r0
    99a0:	f380 8811 	msr	BASEPRI, r0
    99a4:	f04f 0004 	mov.w	r0, #4
    99a8:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    99aa:	8983      	ldrh	r3, [r0, #12]
    99ac:	2b01      	cmp	r3, #1
    99ae:	d9f6      	bls.n	999e <bt_recv_prio+0xa>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    99b0:	2102      	movs	r1, #2
    99b2:	3008      	adds	r0, #8
    99b4:	f015 fc25 	bl	1f202 <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    99b8:	7800      	ldrb	r0, [r0, #0]
    99ba:	2813      	cmp	r0, #19
    99bc:	d8ef      	bhi.n	999e <bt_recv_prio+0xa>
    99be:	4085      	lsls	r5, r0
    99c0:	f415 2f0c 	tst.w	r5, #573440	; 0x8c000
    99c4:	d0eb      	beq.n	999e <bt_recv_prio+0xa>
	for (i = 0; i < num_handlers; i++) {
    99c6:	2303      	movs	r3, #3
    99c8:	4a04      	ldr	r2, [pc, #16]	; (99dc <bt_recv_prio+0x48>)
    99ca:	4621      	mov	r1, r4
    99cc:	f010 fcfb 	bl	1a3c6 <handle_event.part.7>
	net_buf_unref(buf);
    99d0:	4620      	mov	r0, r4
    99d2:	f00b ff97 	bl	15904 <net_buf_unref>
}
    99d6:	2000      	movs	r0, #0
    99d8:	bd38      	pop	{r3, r4, r5, pc}
    99da:	bf00      	nop
    99dc:	00020678 	.word	0x00020678

000099e0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    99e0:	4a08      	ldr	r2, [pc, #32]	; (9a04 <bt_hci_driver_register+0x24>)
    99e2:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    99e6:	b93b      	cbnz	r3, 99f8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    99e8:	68c1      	ldr	r1, [r0, #12]
    99ea:	b141      	cbz	r1, 99fe <bt_hci_driver_register+0x1e>
    99ec:	6901      	ldr	r1, [r0, #16]
    99ee:	b131      	cbz	r1, 99fe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    99f0:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    99f4:	4618      	mov	r0, r3
    99f6:	4770      	bx	lr
		return -EALREADY;
    99f8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    99fc:	4770      	bx	lr
		return -EINVAL;
    99fe:	f06f 0015 	mvn.w	r0, #21
}
    9a02:	4770      	bx	lr
    9a04:	20007c60 	.word	0x20007c60

00009a08 <bt_enable>:
{
    9a08:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    9a0a:	4d25      	ldr	r5, [pc, #148]	; (9aa0 <bt_enable+0x98>)
    9a0c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    9a10:	b086      	sub	sp, #24
    9a12:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    9a14:	2b00      	cmp	r3, #0
    9a16:	d03c      	beq.n	9a92 <bt_enable+0x8a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    9a18:	2101      	movs	r1, #1
    9a1a:	f105 0070 	add.w	r0, r5, #112	; 0x70
    9a1e:	f010 fc34 	bl	1a28a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9a22:	07c2      	lsls	r2, r0, #31
    9a24:	d438      	bmi.n	9a98 <bt_enable+0x90>
		err = bt_settings_init();
    9a26:	f7ff f8e7 	bl	8bf8 <bt_settings_init>
		if (err) {
    9a2a:	4604      	mov	r4, r0
    9a2c:	bb70      	cbnz	r0, 9a8c <bt_enable+0x84>
	ready_cb = cb;
    9a2e:	4b1d      	ldr	r3, [pc, #116]	; (9aa4 <bt_enable+0x9c>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    9a30:	491d      	ldr	r1, [pc, #116]	; (9aa8 <bt_enable+0xa0>)
    9a32:	601e      	str	r6, [r3, #0]
    9a34:	f06f 0308 	mvn.w	r3, #8
    9a38:	f44f 7220 	mov.w	r2, #640	; 0x280
    9a3c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    9a40:	e9cd 0004 	strd	r0, r0, [sp, #16]
    9a44:	4b19      	ldr	r3, [pc, #100]	; (9aac <bt_enable+0xa4>)
    9a46:	e9cd 0000 	strd	r0, r0, [sp]
    9a4a:	4819      	ldr	r0, [pc, #100]	; (9ab0 <bt_enable+0xa8>)
    9a4c:	f00d fa94 	bl	16f78 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    9a50:	4918      	ldr	r1, [pc, #96]	; (9ab4 <bt_enable+0xac>)
    9a52:	4817      	ldr	r0, [pc, #92]	; (9ab0 <bt_enable+0xa8>)
    9a54:	f015 ffdb 	bl	1fa0e <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    9a58:	f7fe ffde 	bl	8a18 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    9a5c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    9a60:	68db      	ldr	r3, [r3, #12]
    9a62:	4798      	blx	r3
	if (err) {
    9a64:	4604      	mov	r4, r0
    9a66:	b988      	cbnz	r0, 9a8c <bt_enable+0x84>
	if (!cb) {
    9a68:	b926      	cbnz	r6, 9a74 <bt_enable+0x6c>
}
    9a6a:	b006      	add	sp, #24
    9a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    9a70:	f7ff bd14 	b.w	949c <bt_init>
    9a74:	2101      	movs	r1, #1
    9a76:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    9a7a:	f010 fc06 	bl	1a28a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9a7e:	07c3      	lsls	r3, r0, #31
    9a80:	d404      	bmi.n	9a8c <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    9a82:	f105 0164 	add.w	r1, r5, #100	; 0x64
    9a86:	480c      	ldr	r0, [pc, #48]	; (9ab8 <bt_enable+0xb0>)
    9a88:	f015 fe3a 	bl	1f700 <k_queue_append>
}
    9a8c:	4620      	mov	r0, r4
    9a8e:	b006      	add	sp, #24
    9a90:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    9a92:	f06f 0412 	mvn.w	r4, #18
    9a96:	e7f9      	b.n	9a8c <bt_enable+0x84>
		return -EALREADY;
    9a98:	f06f 0444 	mvn.w	r4, #68	; 0x44
    9a9c:	e7f6      	b.n	9a8c <bt_enable+0x84>
    9a9e:	bf00      	nop
    9aa0:	20007c60 	.word	0x20007c60
    9aa4:	20000864 	.word	0x20000864
    9aa8:	20002a20 	.word	0x20002a20
    9aac:	00008e5d 	.word	0x00008e5d
    9ab0:	2000086c 	.word	0x2000086c
    9ab4:	00021af7 	.word	0x00021af7
    9ab8:	20001fc8 	.word	0x20001fc8

00009abc <bt_get_name>:
}
    9abc:	4800      	ldr	r0, [pc, #0]	; (9ac0 <bt_get_name+0x4>)
    9abe:	4770      	bx	lr
    9ac0:	00021b01 	.word	0x00021b01

00009ac4 <bt_id_create>:
{
    9ac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9ac6:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9ac8:	4606      	mov	r6, r0
    9aca:	b928      	cbnz	r0, 9ad8 <bt_id_create+0x14>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    9acc:	b1f4      	cbz	r4, 9b0c <bt_id_create+0x48>
			return -EINVAL;
    9ace:	f06f 0515 	mvn.w	r5, #21
}
    9ad2:	4628      	mov	r0, r5
    9ad4:	b002      	add	sp, #8
    9ad6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9ad8:	2300      	movs	r3, #0
    9ada:	2207      	movs	r2, #7
    9adc:	4669      	mov	r1, sp
    9ade:	9300      	str	r3, [sp, #0]
    9ae0:	f8cd 3003 	str.w	r3, [sp, #3]
    9ae4:	f010 fad0 	bl	1a088 <memcmp>
    9ae8:	2800      	cmp	r0, #0
    9aea:	d0ef      	beq.n	9acc <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    9aec:	7833      	ldrb	r3, [r6, #0]
    9aee:	2b01      	cmp	r3, #1
    9af0:	d1ed      	bne.n	9ace <bt_id_create+0xa>
    9af2:	79b3      	ldrb	r3, [r6, #6]
    9af4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9af8:	2bc0      	cmp	r3, #192	; 0xc0
    9afa:	d1e8      	bne.n	9ace <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    9afc:	4630      	mov	r0, r6
    9afe:	f7ff fa29 	bl	8f54 <id_find>
    9b02:	2800      	cmp	r0, #0
    9b04:	dbe2      	blt.n	9acc <bt_id_create+0x8>
			return -EALREADY;
    9b06:	f06f 0544 	mvn.w	r5, #68	; 0x44
    9b0a:	e7e2      	b.n	9ad2 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    9b0c:	4b0d      	ldr	r3, [pc, #52]	; (9b44 <bt_id_create+0x80>)
    9b0e:	79dc      	ldrb	r4, [r3, #7]
    9b10:	2c01      	cmp	r4, #1
    9b12:	d013      	beq.n	9b3c <bt_id_create+0x78>
	new_id = bt_dev.id_count++;
    9b14:	1c62      	adds	r2, r4, #1
    9b16:	71da      	strb	r2, [r3, #7]
    9b18:	4625      	mov	r5, r4
	if (new_id == BT_ID_DEFAULT &&
    9b1a:	b954      	cbnz	r4, 9b32 <bt_id_create+0x6e>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9b1c:	2101      	movs	r1, #1
    9b1e:	f103 0070 	add.w	r0, r3, #112	; 0x70
    9b22:	f010 fc70 	bl	1a406 <atomic_test_bit>
	if (new_id == BT_ID_DEFAULT &&
    9b26:	b920      	cbnz	r0, 9b32 <bt_id_create+0x6e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9b28:	2108      	movs	r1, #8
    9b2a:	f103 0070 	add.w	r0, r3, #112	; 0x70
    9b2e:	f010 fbac 	bl	1a28a <atomic_or>
	id_create(new_id, addr, irk);
    9b32:	4631      	mov	r1, r6
    9b34:	4620      	mov	r0, r4
    9b36:	f7ff fea9 	bl	988c <id_create.isra.29>
	return new_id;
    9b3a:	e7ca      	b.n	9ad2 <bt_id_create+0xe>
		return -ENOMEM;
    9b3c:	f06f 050b 	mvn.w	r5, #11
    9b40:	e7c7      	b.n	9ad2 <bt_id_create+0xe>
    9b42:	bf00      	nop
    9b44:	20007c60 	.word	0x20007c60

00009b48 <bt_setup_id_addr>:
{
    9b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.id_count) {
    9b4c:	4c23      	ldr	r4, [pc, #140]	; (9bdc <bt_setup_id_addr+0x94>)
    9b4e:	79e1      	ldrb	r1, [r4, #7]
{
    9b50:	b085      	sub	sp, #20
	if (!bt_dev.id_count) {
    9b52:	b929      	cbnz	r1, 9b60 <bt_setup_id_addr+0x18>
	if (!(bt_dev.vs_commands[1] & BIT(0))) {
    9b54:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    9b58:	07db      	lsls	r3, r3, #31
    9b5a:	d406      	bmi.n	9b6a <bt_setup_id_addr+0x22>
		bt_dev.id_count = bt_read_static_addr(addrs);
    9b5c:	2300      	movs	r3, #0
    9b5e:	71e3      	strb	r3, [r4, #7]
	return bt_id_create(NULL, NULL);
    9b60:	2100      	movs	r1, #0
    9b62:	4608      	mov	r0, r1
    9b64:	f7ff ffae 	bl	9ac4 <bt_id_create>
    9b68:	e02a      	b.n	9bc0 <bt_setup_id_addr+0x78>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    9b6a:	aa01      	add	r2, sp, #4
    9b6c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    9b70:	f7ff fa70 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    9b74:	4605      	mov	r5, r0
    9b76:	2800      	cmp	r0, #0
    9b78:	d1f0      	bne.n	9b5c <bt_setup_id_addr+0x14>
	rp = (void *)rsp->data;
    9b7a:	9b01      	ldr	r3, [sp, #4]
    9b7c:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, CONFIG_BT_ID_MAX);
    9b7e:	7877      	ldrb	r7, [r6, #1]
    9b80:	f117 0800 	adds.w	r8, r7, #0
    9b84:	bf18      	it	ne
    9b86:	f04f 0801 	movne.w	r8, #1
	for (i = 0; i < cnt; i++) {
    9b8a:	4603      	mov	r3, r0
		addr[i].type = BT_ADDR_LE_RANDOM;
    9b8c:	f04f 0901 	mov.w	r9, #1
		bt_addr_copy(&addr[i].a, &rp->a[i].bdaddr);
    9b90:	3602      	adds	r6, #2
	for (i = 0; i < cnt; i++) {
    9b92:	4598      	cmp	r8, r3
    9b94:	dc17      	bgt.n	9bc6 <bt_setup_id_addr+0x7e>
	net_buf_unref(rsp);
    9b96:	9801      	ldr	r0, [sp, #4]
    9b98:	f00b feb4 	bl	15904 <net_buf_unref>
		bt_dev.id_count = bt_read_static_addr(addrs);
    9b9c:	f884 8007 	strb.w	r8, [r4, #7]
		if (bt_dev.id_count) {
    9ba0:	2f00      	cmp	r7, #0
    9ba2:	d0dd      	beq.n	9b60 <bt_setup_id_addr+0x18>
    9ba4:	ae02      	add	r6, sp, #8
				id_create(i, &addrs[i], NULL);
    9ba6:	4631      	mov	r1, r6
    9ba8:	b2e8      	uxtb	r0, r5
    9baa:	f7ff fe6f 	bl	988c <id_create.isra.29>
			for (i = 0; i < bt_dev.id_count; i++) {
    9bae:	79e3      	ldrb	r3, [r4, #7]
    9bb0:	3501      	adds	r5, #1
    9bb2:	42ab      	cmp	r3, r5
    9bb4:	f106 0607 	add.w	r6, r6, #7
    9bb8:	dcf5      	bgt.n	9ba6 <bt_setup_id_addr+0x5e>
			return set_random_address(&bt_dev.id_addr[0].a);
    9bba:	4809      	ldr	r0, [pc, #36]	; (9be0 <bt_setup_id_addr+0x98>)
    9bbc:	f7ff fbe0 	bl	9380 <set_random_address>
}
    9bc0:	b005      	add	sp, #20
    9bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(dst, src, sizeof(*dst));
    9bc6:	2206      	movs	r2, #6
    9bc8:	4631      	mov	r1, r6
    9bca:	f10d 0009 	add.w	r0, sp, #9
		addr[i].type = BT_ADDR_LE_RANDOM;
    9bce:	f88d 9008 	strb.w	r9, [sp, #8]
    9bd2:	f010 fa69 	bl	1a0a8 <memcpy>
	for (i = 0; i < cnt; i++) {
    9bd6:	2301      	movs	r3, #1
    9bd8:	e7db      	b.n	9b92 <bt_setup_id_addr+0x4a>
    9bda:	bf00      	nop
    9bdc:	20007c60 	.word	0x20007c60
    9be0:	20007c61 	.word	0x20007c61

00009be4 <bt_le_adv_start_internal>:

int bt_le_adv_start_internal(const struct bt_le_adv_param *param,
			     const struct bt_data *ad, size_t ad_len,
			     const struct bt_data *sd, size_t sd_len,
			     const bt_addr_le_t *peer)
{
    9be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (param->id >= bt_dev.id_count ||
    9be8:	4e78      	ldr	r6, [pc, #480]	; (9dcc <bt_le_adv_start_internal+0x1e8>)
{
    9bea:	4605      	mov	r5, r0
    9bec:	4698      	mov	r8, r3
	if (param->id >= bt_dev.id_count ||
    9bee:	7800      	ldrb	r0, [r0, #0]
    9bf0:	79f3      	ldrb	r3, [r6, #7]
{
    9bf2:	b089      	sub	sp, #36	; 0x24
	if (param->id >= bt_dev.id_count ||
    9bf4:	4283      	cmp	r3, r0
{
    9bf6:	460c      	mov	r4, r1
    9bf8:	4617      	mov	r7, r2
    9bfa:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	if (param->id >= bt_dev.id_count ||
    9bfe:	d805      	bhi.n	9c0c <bt_le_adv_start_internal+0x28>
	struct net_buf *buf;
	bool dir_adv = (peer != NULL);
	int err = 0;

	if (!valid_adv_param(param, dir_adv)) {
		return -EINVAL;
    9c00:	f06f 0415 	mvn.w	r4, #21
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
		atomic_set_bit(bt_dev.flags, BT_DEV_ADVERTISING_CONNECTABLE);
	}

	return 0;
}
    9c04:	4620      	mov	r0, r4
    9c06:	b009      	add	sp, #36	; 0x24
    9c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    9c0c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9c10:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9c12:	2207      	movs	r2, #7
    9c14:	a902      	add	r1, sp, #8
    9c16:	4430      	add	r0, r6
    9c18:	9302      	str	r3, [sp, #8]
    9c1a:	f8cd 300b 	str.w	r3, [sp, #11]
    9c1e:	f010 fa33 	bl	1a088 <memcmp>
	if (param->id >= bt_dev.id_count ||
    9c22:	2800      	cmp	r0, #0
    9c24:	d0ec      	beq.n	9c00 <bt_le_adv_start_internal+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9c26:	786b      	ldrb	r3, [r5, #1]
    9c28:	07d9      	lsls	r1, r3, #31
    9c2a:	d405      	bmi.n	9c38 <bt_le_adv_start_internal+0x54>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    9c2c:	7c32      	ldrb	r2, [r6, #16]
    9c2e:	2a08      	cmp	r2, #8
    9c30:	d802      	bhi.n	9c38 <bt_le_adv_start_internal+0x54>
    9c32:	886a      	ldrh	r2, [r5, #2]
    9c34:	2a9f      	cmp	r2, #159	; 0x9f
    9c36:	d9e3      	bls.n	9c00 <bt_le_adv_start_internal+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) || !dir_adv) {
    9c38:	06da      	lsls	r2, r3, #27
    9c3a:	d402      	bmi.n	9c42 <bt_le_adv_start_internal+0x5e>
    9c3c:	f1b9 0f00 	cmp.w	r9, #0
    9c40:	d108      	bne.n	9c54 <bt_le_adv_start_internal+0x70>
		if (param->interval_min > param->interval_max ||
    9c42:	886a      	ldrh	r2, [r5, #2]
    9c44:	88ab      	ldrh	r3, [r5, #4]
    9c46:	429a      	cmp	r2, r3
    9c48:	d8da      	bhi.n	9c00 <bt_le_adv_start_internal+0x1c>
    9c4a:	2a1f      	cmp	r2, #31
    9c4c:	d9d8      	bls.n	9c00 <bt_le_adv_start_internal+0x1c>
		    param->interval_min < 0x0020 ||
    9c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    9c52:	d8d5      	bhi.n	9c00 <bt_le_adv_start_internal+0x1c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    9c54:	2106      	movs	r1, #6
    9c56:	485e      	ldr	r0, [pc, #376]	; (9dd0 <bt_le_adv_start_internal+0x1ec>)
    9c58:	f010 fbd5 	bl	1a406 <atomic_test_bit>
    9c5c:	2800      	cmp	r0, #0
    9c5e:	f040 80ae 	bne.w	9dbe <bt_le_adv_start_internal+0x1da>
	if (!dir_adv) {
    9c62:	f1b9 0f00 	cmp.w	r9, #0
    9c66:	d031      	beq.n	9ccc <bt_le_adv_start_internal+0xe8>
	(void)memset(&set_param, 0, sizeof(set_param));
    9c68:	220f      	movs	r2, #15
    9c6a:	2100      	movs	r1, #0
    9c6c:	a804      	add	r0, sp, #16
    9c6e:	f010 fa45 	bl	1a0fc <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    9c72:	886b      	ldrh	r3, [r5, #2]
	bt_dev.adv_id = param->id;
    9c74:	782f      	ldrb	r7, [r5, #0]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    9c76:	f8ad 3010 	strh.w	r3, [sp, #16]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    9c7a:	88ab      	ldrh	r3, [r5, #4]
	bt_dev.adv_id = param->id;
    9c7c:	7237      	strb	r7, [r6, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    9c7e:	f8ad 3012 	strh.w	r3, [sp, #18]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9c82:	786b      	ldrb	r3, [r5, #1]
	set_param.channel_map  = 0x07;
    9c84:	2007      	movs	r0, #7
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9c86:	f013 0401 	ands.w	r4, r3, #1
	set_param.channel_map  = 0x07;
    9c8a:	f88d 001d 	strb.w	r0, [sp, #29]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9c8e:	d12e      	bne.n	9cee <bt_le_adv_start_internal+0x10a>
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    9c90:	075b      	lsls	r3, r3, #29
    9c92:	f140 808d 	bpl.w	9db0 <bt_le_adv_start_internal+0x1cc>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9c96:	ea4f 09c7 	mov.w	r9, r7, lsl #3
    9c9a:	eba9 0307 	sub.w	r3, r9, r7
    9c9e:	5cf3      	ldrb	r3, [r6, r3]
    9ca0:	2b01      	cmp	r3, #1
    9ca2:	d105      	bne.n	9cb0 <bt_le_adv_start_internal+0xcc>
				err = set_random_address(&id_addr->a);
    9ca4:	fb10 3007 	smlabb	r0, r0, r7, r3
    9ca8:	4430      	add	r0, r6
    9caa:	f7ff fb69 	bl	9380 <set_random_address>
    9cae:	4604      	mov	r4, r0
			set_param.own_addr_type = id_addr->type;
    9cb0:	eba9 0707 	sub.w	r7, r9, r7
    9cb4:	5df3      	ldrb	r3, [r6, r7]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    9cb6:	f88d 3015 	strb.w	r3, [sp, #21]
		if (err) {
    9cba:	2c00      	cmp	r4, #0
    9cbc:	d1a2      	bne.n	9c04 <bt_le_adv_start_internal+0x20>
		if (sd) {
    9cbe:	f1b8 0f00 	cmp.w	r8, #0
    9cc2:	d07a      	beq.n	9dba <bt_le_adv_start_internal+0x1d6>
			set_param.type = BT_LE_ADV_SCAN_IND;
    9cc4:	2302      	movs	r3, #2
			set_param.type = BT_LE_ADV_NONCONN_IND;
    9cc6:	f88d 3014 	strb.w	r3, [sp, #20]
    9cca:	e037      	b.n	9d3c <bt_le_adv_start_internal+0x158>
				    param->options & BT_LE_ADV_OPT_CONNECTABLE,
    9ccc:	786b      	ldrb	r3, [r5, #1]
		err = le_adv_update(ad, ad_len, sd, sd_len,
    9cce:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    9cd2:	f003 0301 	and.w	r3, r3, #1
    9cd6:	9201      	str	r2, [sp, #4]
    9cd8:	9300      	str	r3, [sp, #0]
    9cda:	4620      	mov	r0, r4
    9cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9cde:	4642      	mov	r2, r8
    9ce0:	4639      	mov	r1, r7
    9ce2:	f7ff fb7b 	bl	93dc <le_adv_update>
		if (err) {
    9ce6:	4604      	mov	r4, r0
    9ce8:	2800      	cmp	r0, #0
    9cea:	d0bd      	beq.n	9c68 <bt_le_adv_start_internal+0x84>
    9cec:	e78a      	b.n	9c04 <bt_le_adv_start_internal+0x20>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9cee:	ea4f 08c7 	mov.w	r8, r7, lsl #3
    9cf2:	eba8 0307 	sub.w	r3, r8, r7
    9cf6:	5cf3      	ldrb	r3, [r6, r3]
    9cf8:	2b01      	cmp	r3, #1
    9cfa:	d104      	bne.n	9d06 <bt_le_adv_start_internal+0x122>
				set_random_address(&id_addr->a);
    9cfc:	fb10 3007 	smlabb	r0, r0, r7, r3
    9d00:	4430      	add	r0, r6
    9d02:	f7ff fb3d 	bl	9380 <set_random_address>
			set_param.own_addr_type = id_addr->type;
    9d06:	eba8 0707 	sub.w	r7, r8, r7
    9d0a:	5df3      	ldrb	r3, [r6, r7]
    9d0c:	f88d 3015 	strb.w	r3, [sp, #21]
		if (dir_adv) {
    9d10:	f1b9 0f00 	cmp.w	r9, #0
    9d14:	d049      	beq.n	9daa <bt_le_adv_start_internal+0x1c6>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    9d16:	786b      	ldrb	r3, [r5, #1]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    9d18:	f013 0f10 	tst.w	r3, #16
			set_param.direct_addr = *peer;
    9d1c:	f8d9 3000 	ldr.w	r3, [r9]
    9d20:	f8cd 3016 	str.w	r3, [sp, #22]
    9d24:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    9d28:	f8ad 301a 	strh.w	r3, [sp, #26]
				set_param.type = BT_LE_ADV_DIRECT_IND_LOW_DUTY;
    9d2c:	bf18      	it	ne
    9d2e:	2404      	movne	r4, #4
			set_param.direct_addr = *peer;
    9d30:	f899 3006 	ldrb.w	r3, [r9, #6]
    9d34:	f88d 4014 	strb.w	r4, [sp, #20]
    9d38:	f88d 301c 	strb.w	r3, [sp, #28]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    9d3c:	210f      	movs	r1, #15
    9d3e:	f242 0006 	movw	r0, #8198	; 0x2006
    9d42:	f7ff f935 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
    9d46:	4604      	mov	r4, r0
    9d48:	2800      	cmp	r0, #0
    9d4a:	d03b      	beq.n	9dc4 <bt_le_adv_start_internal+0x1e0>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    9d4c:	220f      	movs	r2, #15
    9d4e:	a904      	add	r1, sp, #16
    9d50:	3008      	adds	r0, #8
    9d52:	f015 f9d9 	bl	1f108 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    9d56:	4621      	mov	r1, r4
    9d58:	2200      	movs	r2, #0
    9d5a:	f242 0006 	movw	r0, #8198	; 0x2006
    9d5e:	f7ff f979 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    9d62:	4604      	mov	r4, r0
    9d64:	2800      	cmp	r0, #0
    9d66:	f47f af4d 	bne.w	9c04 <bt_le_adv_start_internal+0x20>
	err = set_advertise_enable(true);
    9d6a:	2001      	movs	r0, #1
    9d6c:	f7ff f9ee 	bl	914c <set_advertise_enable>
	if (err) {
    9d70:	4604      	mov	r4, r0
    9d72:	2800      	cmp	r0, #0
    9d74:	f47f af46 	bne.w	9c04 <bt_le_adv_start_internal+0x20>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    9d78:	786b      	ldrb	r3, [r5, #1]
    9d7a:	0799      	lsls	r1, r3, #30
    9d7c:	d404      	bmi.n	9d88 <bt_le_adv_start_internal+0x1a4>
    9d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
    9d82:	4813      	ldr	r0, [pc, #76]	; (9dd0 <bt_le_adv_start_internal+0x1ec>)
    9d84:	f010 fa81 	bl	1a28a <atomic_or>
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
    9d88:	786b      	ldrb	r3, [r5, #1]
    9d8a:	071a      	lsls	r2, r3, #28
    9d8c:	d503      	bpl.n	9d96 <bt_le_adv_start_internal+0x1b2>
    9d8e:	2180      	movs	r1, #128	; 0x80
    9d90:	480f      	ldr	r0, [pc, #60]	; (9dd0 <bt_le_adv_start_internal+0x1ec>)
    9d92:	f010 fa7a 	bl	1a28a <atomic_or>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9d96:	786b      	ldrb	r3, [r5, #1]
    9d98:	07db      	lsls	r3, r3, #31
    9d9a:	f57f af33 	bpl.w	9c04 <bt_le_adv_start_internal+0x20>
    9d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
    9da2:	480b      	ldr	r0, [pc, #44]	; (9dd0 <bt_le_adv_start_internal+0x1ec>)
    9da4:	f010 fa71 	bl	1a28a <atomic_or>
    9da8:	e72c      	b.n	9c04 <bt_le_adv_start_internal+0x20>
			set_param.type = BT_LE_ADV_IND;
    9daa:	f88d 9014 	strb.w	r9, [sp, #20]
    9dae:	e7c5      	b.n	9d3c <bt_le_adv_start_internal+0x158>
			err = le_set_private_addr(param->id);
    9db0:	f010 fbf7 	bl	1a5a2 <le_set_private_addr.isra.25>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    9db4:	2301      	movs	r3, #1
			err = le_set_private_addr(param->id);
    9db6:	4604      	mov	r4, r0
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    9db8:	e77d      	b.n	9cb6 <bt_le_adv_start_internal+0xd2>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    9dba:	2303      	movs	r3, #3
    9dbc:	e783      	b.n	9cc6 <bt_le_adv_start_internal+0xe2>
		return -EALREADY;
    9dbe:	f06f 0444 	mvn.w	r4, #68	; 0x44
    9dc2:	e71f      	b.n	9c04 <bt_le_adv_start_internal+0x20>
		return -ENOBUFS;
    9dc4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9dc8:	e71c      	b.n	9c04 <bt_le_adv_start_internal+0x20>
    9dca:	bf00      	nop
    9dcc:	20007c60 	.word	0x20007c60
    9dd0:	20007cd0 	.word	0x20007cd0

00009dd4 <bt_le_adv_stop>:

	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
}

int bt_le_adv_stop(void)
{
    9dd4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9dd6:	f46f 7100 	mvn.w	r1, #512	; 0x200
    9dda:	4810      	ldr	r0, [pc, #64]	; (9e1c <bt_le_adv_stop+0x48>)
    9ddc:	f010 fa64 	bl	1a2a8 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    9de0:	2106      	movs	r1, #6
    9de2:	480e      	ldr	r0, [pc, #56]	; (9e1c <bt_le_adv_stop+0x48>)
    9de4:	f010 fb0f 	bl	1a406 <atomic_test_bit>
    9de8:	b910      	cbnz	r0, 9df0 <bt_le_adv_stop+0x1c>
		return 0;
    9dea:	2400      	movs	r4, #0
			le_set_private_addr(bt_dev.adv_id);
		}
	}

	return 0;
}
    9dec:	4620      	mov	r0, r4
    9dee:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    9df0:	2000      	movs	r0, #0
    9df2:	f7ff f9ab 	bl	914c <set_advertise_enable>
	if (err) {
    9df6:	4604      	mov	r4, r0
    9df8:	2800      	cmp	r0, #0
    9dfa:	d1f7      	bne.n	9dec <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9dfc:	210a      	movs	r1, #10
    9dfe:	4807      	ldr	r0, [pc, #28]	; (9e1c <bt_le_adv_stop+0x48>)
    9e00:	f010 fb01 	bl	1a406 <atomic_test_bit>
    9e04:	2800      	cmp	r0, #0
    9e06:	d0f0      	beq.n	9dea <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    9e08:	210c      	movs	r1, #12
    9e0a:	4804      	ldr	r0, [pc, #16]	; (9e1c <bt_le_adv_stop+0x48>)
    9e0c:	f010 fafb 	bl	1a406 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9e10:	2800      	cmp	r0, #0
    9e12:	d0ea      	beq.n	9dea <bt_le_adv_stop+0x16>
			le_set_private_addr(bt_dev.adv_id);
    9e14:	f010 fbc5 	bl	1a5a2 <le_set_private_addr.isra.25>
    9e18:	e7e8      	b.n	9dec <bt_le_adv_stop+0x18>
    9e1a:	bf00      	nop
    9e1c:	20007cd0 	.word	0x20007cd0

00009e20 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    9e20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    9e24:	7803      	ldrb	r3, [r0, #0]
    9e26:	2b01      	cmp	r3, #1
{
    9e28:	4605      	mov	r5, r0
    9e2a:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    9e2c:	f200 8093 	bhi.w	9f56 <bt_le_scan_start+0x136>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    9e30:	7843      	ldrb	r3, [r0, #1]
    9e32:	2b01      	cmp	r3, #1
    9e34:	f200 808f 	bhi.w	9f56 <bt_le_scan_start+0x136>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    9e38:	8841      	ldrh	r1, [r0, #2]
    9e3a:	1f0b      	subs	r3, r1, #4
    9e3c:	b29b      	uxth	r3, r3
    9e3e:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    9e42:	4283      	cmp	r3, r0
    9e44:	f200 8087 	bhi.w	9f56 <bt_le_scan_start+0x136>
	if (param->window < 0x0004 || param->window > 0x4000) {
    9e48:	88aa      	ldrh	r2, [r5, #4]
    9e4a:	1f13      	subs	r3, r2, #4
    9e4c:	b29b      	uxth	r3, r3
    9e4e:	4283      	cmp	r3, r0
    9e50:	f200 8081 	bhi.w	9f56 <bt_le_scan_start+0x136>
	if (param->window > param->interval) {
    9e54:	4291      	cmp	r1, r2
    9e56:	d37e      	bcc.n	9f56 <bt_le_scan_start+0x136>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    9e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
    9e5c:	4841      	ldr	r0, [pc, #260]	; (9f64 <bt_le_scan_start+0x144>)
    9e5e:	f010 fa14 	bl	1a28a <atomic_or>
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9e62:	f410 6300 	ands.w	r3, r0, #2048	; 0x800
    9e66:	d179      	bne.n	9f5c <bt_le_scan_start+0x13c>
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    9e68:	210a      	movs	r1, #10
    9e6a:	483e      	ldr	r0, [pc, #248]	; (9f64 <bt_le_scan_start+0x144>)
    9e6c:	f010 facb 	bl	1a406 <atomic_test_bit>
    9e70:	b168      	cbz	r0, 9e8e <bt_le_scan_start+0x6e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    9e72:	4618      	mov	r0, r3
    9e74:	f7ff f934 	bl	90e0 <set_le_scan_enable>
		if (err) {
    9e78:	4604      	mov	r4, r0
    9e7a:	b140      	cbz	r0, 9e8e <bt_le_scan_start+0x6e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9e7c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    9e80:	4838      	ldr	r0, [pc, #224]	; (9f64 <bt_le_scan_start+0x144>)
    9e82:	f010 fa11 	bl	1a2a8 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    9e86:	4620      	mov	r0, r4
    9e88:	b002      	add	sp, #8
    9e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (val) {
    9e8e:	786b      	ldrb	r3, [r5, #1]
    9e90:	2b00      	cmp	r3, #0
    9e92:	d049      	beq.n	9f28 <bt_le_scan_start+0x108>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    9e98:	4832      	ldr	r0, [pc, #200]	; (9f64 <bt_le_scan_start+0x144>)
    9e9a:	f010 f9f6 	bl	1a28a <atomic_or>
	(void)memset(&set_param, 0, sizeof(set_param));
    9e9e:	2207      	movs	r2, #7
    9ea0:	2100      	movs	r1, #0
    9ea2:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
    9ea4:	782e      	ldrb	r6, [r5, #0]
    9ea6:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    9eaa:	88ac      	ldrh	r4, [r5, #4]
	(void)memset(&set_param, 0, sizeof(set_param));
    9eac:	f010 f926 	bl	1a0fc <memset>
		set_param.addr_type =  bt_dev.id_addr[0].type;
    9eb0:	482d      	ldr	r0, [pc, #180]	; (9f68 <bt_le_scan_start+0x148>)
	set_param.scan_type = scan_type;
    9eb2:	f88d 6000 	strb.w	r6, [sp]
	set_param.filter_policy = 0x00;
    9eb6:	2300      	movs	r3, #0
    9eb8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    9ebc:	2e01      	cmp	r6, #1
		set_param.addr_type =  bt_dev.id_addr[0].type;
    9ebe:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    9ec0:	f8ad 8001 	strh.w	r8, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    9ec4:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr[0].type;
    9ec8:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    9ecc:	d132      	bne.n	9f34 <bt_le_scan_start+0x114>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    9ece:	2106      	movs	r1, #6
    9ed0:	3070      	adds	r0, #112	; 0x70
    9ed2:	f010 fa98 	bl	1a406 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    9ed6:	bb68      	cbnz	r0, 9f34 <bt_le_scan_start+0x114>
			err = le_set_private_addr(BT_ID_DEFAULT);
    9ed8:	f010 fb63 	bl	1a5a2 <le_set_private_addr.isra.25>
			if (err) {
    9edc:	4604      	mov	r4, r0
    9ede:	2800      	cmp	r0, #0
    9ee0:	d1cc      	bne.n	9e7c <bt_le_scan_start+0x5c>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    9ee2:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    9ee6:	2107      	movs	r1, #7
    9ee8:	f242 000b 	movw	r0, #8203	; 0x200b
    9eec:	f7ff f860 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
    9ef0:	4604      	mov	r4, r0
    9ef2:	b368      	cbz	r0, 9f50 <bt_le_scan_start+0x130>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    9ef4:	2207      	movs	r2, #7
    9ef6:	4669      	mov	r1, sp
    9ef8:	3008      	adds	r0, #8
    9efa:	f015 f905 	bl	1f108 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    9efe:	4621      	mov	r1, r4
    9f00:	f242 000b 	movw	r0, #8203	; 0x200b
    9f04:	f7ff f884 	bl	9010 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    9f08:	2001      	movs	r0, #1
    9f0a:	f7ff f8e9 	bl	90e0 <set_le_scan_enable>
	if (err) {
    9f0e:	4604      	mov	r4, r0
    9f10:	2800      	cmp	r0, #0
    9f12:	d1b3      	bne.n	9e7c <bt_le_scan_start+0x5c>
	if (val) {
    9f14:	2e01      	cmp	r6, #1
    9f16:	d115      	bne.n	9f44 <bt_le_scan_start+0x124>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9f1c:	4811      	ldr	r0, [pc, #68]	; (9f64 <bt_le_scan_start+0x144>)
    9f1e:	f010 f9b4 	bl	1a28a <atomic_or>
	scan_dev_found_cb = cb;
    9f22:	4b12      	ldr	r3, [pc, #72]	; (9f6c <bt_le_scan_start+0x14c>)
    9f24:	601f      	str	r7, [r3, #0]
	return 0;
    9f26:	e7ae      	b.n	9e86 <bt_le_scan_start+0x66>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f28:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    9f2c:	480d      	ldr	r0, [pc, #52]	; (9f64 <bt_le_scan_start+0x144>)
    9f2e:	f010 f9bb 	bl	1a2a8 <atomic_and>
    9f32:	e7b4      	b.n	9e9e <bt_le_scan_start+0x7e>
		} else if (set_param.addr_type == BT_ADDR_LE_RANDOM) {
    9f34:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9f38:	2b01      	cmp	r3, #1
    9f3a:	d1d4      	bne.n	9ee6 <bt_le_scan_start+0xc6>
			set_random_address(&bt_dev.id_addr[0].a);
    9f3c:	480c      	ldr	r0, [pc, #48]	; (9f70 <bt_le_scan_start+0x150>)
    9f3e:	f7ff fa1f 	bl	9380 <set_random_address>
    9f42:	e7d0      	b.n	9ee6 <bt_le_scan_start+0xc6>
    9f44:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9f48:	4806      	ldr	r0, [pc, #24]	; (9f64 <bt_le_scan_start+0x144>)
    9f4a:	f010 f9ad 	bl	1a2a8 <atomic_and>
	if (err) {
    9f4e:	e7e8      	b.n	9f22 <bt_le_scan_start+0x102>
		return -ENOBUFS;
    9f50:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9f54:	e792      	b.n	9e7c <bt_le_scan_start+0x5c>
		return -EINVAL;
    9f56:	f06f 0415 	mvn.w	r4, #21
    9f5a:	e794      	b.n	9e86 <bt_le_scan_start+0x66>
		return -EALREADY;
    9f5c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    9f60:	e791      	b.n	9e86 <bt_le_scan_start+0x66>
    9f62:	bf00      	nop
    9f64:	20007cd0 	.word	0x20007cd0
    9f68:	20007c60 	.word	0x20007c60
    9f6c:	20000868 	.word	0x20000868
    9f70:	20007c61 	.word	0x20007c61

00009f74 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    9f74:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f76:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    9f7a:	4807      	ldr	r0, [pc, #28]	; (9f98 <bt_le_scan_stop+0x24>)
    9f7c:	f010 f994 	bl	1a2a8 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9f80:	0503      	lsls	r3, r0, #20
    9f82:	d506      	bpl.n	9f92 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    9f84:	4b05      	ldr	r3, [pc, #20]	; (9f9c <bt_le_scan_stop+0x28>)
    9f86:	2000      	movs	r0, #0
    9f88:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    9f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    9f8e:	f7ff ba6f 	b.w	9470 <bt_le_scan_update>
}
    9f92:	f06f 0044 	mvn.w	r0, #68	; 0x44
    9f96:	bd08      	pop	{r3, pc}
    9f98:	20007cd0 	.word	0x20007cd0
    9f9c:	20000868 	.word	0x20000868

00009fa0 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    9fa0:	b538      	push	{r3, r4, r5, lr}
    9fa2:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    9fa4:	4805      	ldr	r0, [pc, #20]	; (9fbc <bt_buf_get_rx+0x1c>)
    9fa6:	f015 f825 	bl	1eff4 <net_buf_alloc_fixed>
#endif

	if (buf) {
    9faa:	4604      	mov	r4, r0
    9fac:	b120      	cbz	r0, 9fb8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    9fae:	2100      	movs	r1, #0
    9fb0:	3008      	adds	r0, #8
    9fb2:	f015 f83e 	bl	1f032 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    9fb6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    9fb8:	4620      	mov	r0, r4
    9fba:	bd38      	pop	{r3, r4, r5, pc}
    9fbc:	200094fc 	.word	0x200094fc

00009fc0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    9fc0:	b510      	push	{r4, lr}
    9fc2:	4601      	mov	r1, r0
    9fc4:	f04f 0320 	mov.w	r3, #32
    9fc8:	f3ef 8011 	mrs	r0, BASEPRI
    9fcc:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    9fd0:	4a0c      	ldr	r2, [pc, #48]	; (a004 <bt_buf_get_cmd_complete+0x44>)
	bt_dev.sent_cmd = NULL;
    9fd2:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    9fd4:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    9fd8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile(
    9fdc:	f380 8811 	msr	BASEPRI, r0
    9fe0:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    9fe4:	b924      	cbnz	r4, 9ff0 <bt_buf_get_cmd_complete+0x30>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9fe6:	2001      	movs	r0, #1
}
    9fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9fec:	f7ff bfd8 	b.w	9fa0 <bt_buf_get_rx>
    9ff0:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    9ff2:	f104 0008 	add.w	r0, r4, #8
    9ff6:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    9ff8:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    9ffa:	4619      	mov	r1, r3
    9ffc:	f015 f819 	bl	1f032 <net_buf_simple_reserve>
}
    a000:	4620      	mov	r0, r4
    a002:	bd10      	pop	{r4, pc}
    a004:	20007c60 	.word	0x20007c60

0000a008 <bt_pub_key_gen>:
	return cmd(buf)->opcode;
}

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    a008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a00c:	4e1d      	ldr	r6, [pc, #116]	; (a084 <bt_pub_key_gen+0x7c>)
    a00e:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
    a012:	f003 0306 	and.w	r3, r3, #6
    a016:	2b06      	cmp	r3, #6
{
    a018:	4607      	mov	r7, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a01a:	d130      	bne.n	a07e <bt_pub_key_gen+0x76>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    a01c:	4d1a      	ldr	r5, [pc, #104]	; (a088 <bt_pub_key_gen+0x80>)
    a01e:	682b      	ldr	r3, [r5, #0]
    a020:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    a022:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    a024:	2120      	movs	r1, #32
    a026:	f106 0070 	add.w	r0, r6, #112	; 0x70
    a02a:	f010 f92e 	bl	1a28a <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a02e:	f010 0820 	ands.w	r8, r0, #32
    a032:	d003      	beq.n	a03c <bt_pub_key_gen+0x34>
		return 0;
    a034:	2400      	movs	r4, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    a036:	4620      	mov	r0, r4
    a038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a03c:	f06f 0110 	mvn.w	r1, #16
    a040:	f106 0070 	add.w	r0, r6, #112	; 0x70
    a044:	f010 f930 	bl	1a2a8 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    a048:	4642      	mov	r2, r8
    a04a:	4641      	mov	r1, r8
    a04c:	f242 0025 	movw	r0, #8229	; 0x2025
    a050:	f7ff f800 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    a054:	4604      	mov	r4, r0
    a056:	b140      	cbz	r0, a06a <bt_pub_key_gen+0x62>
    a058:	f06f 0120 	mvn.w	r1, #32
    a05c:	f106 0070 	add.w	r0, r6, #112	; 0x70
    a060:	f010 f922 	bl	1a2a8 <atomic_and>
		pub_key_cb = NULL;
    a064:	f8c5 8000 	str.w	r8, [r5]
		return err;
    a068:	e7e5      	b.n	a036 <bt_pub_key_gen+0x2e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    a06a:	682c      	ldr	r4, [r5, #0]
    a06c:	2c00      	cmp	r4, #0
    a06e:	d0e1      	beq.n	a034 <bt_pub_key_gen+0x2c>
		if (cb != new_cb) {
    a070:	42bc      	cmp	r4, r7
    a072:	d002      	beq.n	a07a <bt_pub_key_gen+0x72>
			cb->func(NULL);
    a074:	6823      	ldr	r3, [r4, #0]
    a076:	2000      	movs	r0, #0
    a078:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    a07a:	6864      	ldr	r4, [r4, #4]
    a07c:	e7f6      	b.n	a06c <bt_pub_key_gen+0x64>
		return -ENOTSUP;
    a07e:	f06f 0422 	mvn.w	r4, #34	; 0x22
    a082:	e7d8      	b.n	a036 <bt_pub_key_gen+0x2e>
    a084:	20007c60 	.word	0x20007c60
    a088:	20000860 	.word	0x20000860

0000a08c <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    a08c:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a08e:	2104      	movs	r1, #4
    a090:	4803      	ldr	r0, [pc, #12]	; (a0a0 <bt_pub_key_get+0x14>)
    a092:	f010 f9b8 	bl	1a406 <atomic_test_bit>
    a096:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    a098:	4802      	ldr	r0, [pc, #8]	; (a0a4 <bt_pub_key_get+0x18>)
    a09a:	bf08      	it	eq
    a09c:	2000      	moveq	r0, #0
    a09e:	bd08      	pop	{r3, pc}
    a0a0:	20007cd0 	.word	0x20007cd0
    a0a4:	20002527 	.word	0x20002527

0000a0a8 <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a0aa:	4c1a      	ldr	r4, [pc, #104]	; (a114 <bt_dh_key_gen+0x6c>)
    a0ac:	6822      	ldr	r2, [r4, #0]
{
    a0ae:	4607      	mov	r7, r0
    a0b0:	460b      	mov	r3, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a0b2:	b112      	cbz	r2, a0ba <bt_dh_key_gen+0x12>
		return -EBUSY;
    a0b4:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    a0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a0ba:	2105      	movs	r1, #5
    a0bc:	4816      	ldr	r0, [pc, #88]	; (a118 <bt_dh_key_gen+0x70>)
    a0be:	f010 f9a2 	bl	1a406 <atomic_test_bit>
    a0c2:	4606      	mov	r6, r0
    a0c4:	2800      	cmp	r0, #0
    a0c6:	d1f5      	bne.n	a0b4 <bt_dh_key_gen+0xc>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a0c8:	2104      	movs	r1, #4
    a0ca:	4813      	ldr	r0, [pc, #76]	; (a118 <bt_dh_key_gen+0x70>)
    a0cc:	f010 f99b 	bl	1a406 <atomic_test_bit>
    a0d0:	b1e8      	cbz	r0, a10e <bt_dh_key_gen+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a0d2:	2140      	movs	r1, #64	; 0x40
    a0d4:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    a0d8:	6023      	str	r3, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a0da:	f7fe ff69 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
    a0de:	4605      	mov	r5, r0
    a0e0:	b918      	cbnz	r0, a0ea <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    a0e2:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    a0e4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a0e8:	e7e6      	b.n	a0b8 <bt_dh_key_gen+0x10>
	cp = net_buf_add(buf, sizeof(*cp));
    a0ea:	2140      	movs	r1, #64	; 0x40
    a0ec:	3008      	adds	r0, #8
    a0ee:	f015 f805 	bl	1f0fc <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    a0f2:	2240      	movs	r2, #64	; 0x40
    a0f4:	4639      	mov	r1, r7
    a0f6:	f00f ffd7 	bl	1a0a8 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    a0fa:	4632      	mov	r2, r6
    a0fc:	4629      	mov	r1, r5
    a0fe:	f242 0026 	movw	r0, #8230	; 0x2026
    a102:	f7fe ffa7 	bl	9054 <bt_hci_cmd_send_sync>
	if (err) {
    a106:	2800      	cmp	r0, #0
    a108:	d0d6      	beq.n	a0b8 <bt_dh_key_gen+0x10>
		dh_key_cb = NULL;
    a10a:	6026      	str	r6, [r4, #0]
		return err;
    a10c:	e7d4      	b.n	a0b8 <bt_dh_key_gen+0x10>
		return -EADDRNOTAVAIL;
    a10e:	f06f 0030 	mvn.w	r0, #48	; 0x30
    a112:	e7d1      	b.n	a0b8 <bt_dh_key_gen+0x10>
    a114:	2000085c 	.word	0x2000085c
    a118:	20007cd0 	.word	0x20007cd0

0000a11c <bt_le_oob_get_local>:
	return 0;
}
#endif /* CONFIG_BT_BREDR */

int bt_le_oob_get_local(u8_t id, struct bt_le_oob *oob)
{
    a11c:	b510      	push	{r4, lr}
    a11e:	460b      	mov	r3, r1
	if (id >= CONFIG_BT_ID_MAX) {
    a120:	4604      	mov	r4, r0
    a122:	b928      	cbnz	r0, a130 <bt_le_oob_get_local+0x14>
			return err;
		}

		bt_addr_le_copy(&oob->addr, &bt_dev.random_addr);
	} else {
		bt_addr_le_copy(&oob->addr, &bt_dev.id_addr[id]);
    a124:	4618      	mov	r0, r3
    a126:	4904      	ldr	r1, [pc, #16]	; (a138 <bt_le_oob_get_local+0x1c>)
    a128:	f010 f8ac 	bl	1a284 <bt_addr_le_copy>
	}

	return 0;
    a12c:	4620      	mov	r0, r4
}
    a12e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a130:	f06f 0015 	mvn.w	r0, #21
    a134:	e7fb      	b.n	a12e <bt_le_oob_get_local+0x12>
    a136:	bf00      	nop
    a138:	20007c60 	.word	0x20007c60

0000a13c <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    a13c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    a13e:	4b08      	ldr	r3, [pc, #32]	; (a160 <notify_connected+0x24>)
    a140:	681c      	ldr	r4, [r3, #0]
{
    a142:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a144:	b924      	cbnz	r4, a150 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	bt_gatt_connected(conn);
    a146:	4628      	mov	r0, r5
}
    a148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_connected(conn);
    a14c:	f001 bd26 	b.w	bb9c <bt_gatt_connected>
		if (cb->connected) {
    a150:	6823      	ldr	r3, [r4, #0]
    a152:	b113      	cbz	r3, a15a <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    a154:	7a69      	ldrb	r1, [r5, #9]
    a156:	4628      	mov	r0, r5
    a158:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a15a:	6924      	ldr	r4, [r4, #16]
    a15c:	e7f2      	b.n	a144 <notify_connected+0x8>
    a15e:	bf00      	nop
    a160:	200008d8 	.word	0x200008d8

0000a164 <bt_conn_get_pkts>:
}
    a164:	4800      	ldr	r0, [pc, #0]	; (a168 <bt_conn_get_pkts+0x4>)
    a166:	4770      	bx	lr
    a168:	20007cec 	.word	0x20007cec

0000a16c <notify_le_param_updated>:
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send slave conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a16c:	1d03      	adds	r3, r0, #4
{
    a16e:	b570      	push	{r4, r5, r6, lr}
    a170:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a172:	4618      	mov	r0, r3
    a174:	f010 fac4 	bl	1a700 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a178:	0582      	lsls	r2, r0, #22
    a17a:	d519      	bpl.n	a1b0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a17c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a180:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    a184:	4291      	cmp	r1, r2
    a186:	d813      	bhi.n	a1b0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    a188:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    a18c:	4291      	cmp	r1, r2
    a18e:	d30f      	bcc.n	a1b0 <notify_le_param_updated+0x44>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    a190:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	; 0x64
    a194:	4291      	cmp	r1, r2
    a196:	d10b      	bne.n	a1b0 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a198:	f3bf 8f5b 	dmb	ish
    a19c:	e853 2f00 	ldrex	r2, [r3]
    a1a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    a1a4:	e843 2100 	strex	r1, r2, [r3]
    a1a8:	2900      	cmp	r1, #0
    a1aa:	d1f7      	bne.n	a19c <notify_le_param_updated+0x30>
    a1ac:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    a1b0:	4b07      	ldr	r3, [pc, #28]	; (a1d0 <notify_le_param_updated+0x64>)
    a1b2:	681d      	ldr	r5, [r3, #0]
    a1b4:	b905      	cbnz	r5, a1b8 <notify_le_param_updated+0x4c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    a1b6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    a1b8:	68ee      	ldr	r6, [r5, #12]
    a1ba:	b13e      	cbz	r6, a1cc <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    a1bc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    a1c0:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    a1c4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    a1c8:	4620      	mov	r0, r4
    a1ca:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    a1cc:	692d      	ldr	r5, [r5, #16]
    a1ce:	e7f1      	b.n	a1b4 <notify_le_param_updated+0x48>
    a1d0:	200008d8 	.word	0x200008d8

0000a1d4 <le_param_req>:

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1d6:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    a1d8:	4608      	mov	r0, r1
{
    a1da:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    a1dc:	f010 fa4e 	bl	1a67c <bt_le_conn_params_valid>
    a1e0:	4605      	mov	r5, r0
    a1e2:	b910      	cbnz	r0, a1ea <le_param_req+0x16>
		return false;
    a1e4:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    a1e6:	4628      	mov	r0, r5
    a1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    a1ea:	4b09      	ldr	r3, [pc, #36]	; (a210 <le_param_req+0x3c>)
    a1ec:	681c      	ldr	r4, [r3, #0]
    a1ee:	2c00      	cmp	r4, #0
    a1f0:	d0f9      	beq.n	a1e6 <le_param_req+0x12>
		if (!cb->le_param_req) {
    a1f2:	68a3      	ldr	r3, [r4, #8]
    a1f4:	b90b      	cbnz	r3, a1fa <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    a1f6:	6924      	ldr	r4, [r4, #16]
    a1f8:	e7f9      	b.n	a1ee <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    a1fa:	4631      	mov	r1, r6
    a1fc:	4638      	mov	r0, r7
    a1fe:	4798      	blx	r3
    a200:	2800      	cmp	r0, #0
    a202:	d0ef      	beq.n	a1e4 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    a204:	4630      	mov	r0, r6
    a206:	f010 fa39 	bl	1a67c <bt_le_conn_params_valid>
    a20a:	2800      	cmp	r0, #0
    a20c:	d1f3      	bne.n	a1f6 <le_param_req+0x22>
    a20e:	e7e9      	b.n	a1e4 <le_param_req+0x10>
    a210:	200008d8 	.word	0x200008d8

0000a214 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    a214:	4b02      	ldr	r3, [pc, #8]	; (a220 <bt_conn_cb_register+0xc>)
    a216:	681a      	ldr	r2, [r3, #0]
    a218:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    a21a:	6018      	str	r0, [r3, #0]
}
    a21c:	4770      	bx	lr
    a21e:	bf00      	nop
    a220:	200008d8 	.word	0x200008d8

0000a224 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    a224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
Z_GENLIST_PREPEND(slist, snode)
    a228:	4d0d      	ldr	r5, [pc, #52]	; (a260 <bt_conn_notify_tx+0x3c>)
    a22a:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    a22c:	f100 071c 	add.w	r7, r0, #28
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    a230:	f04f 0800 	mov.w	r8, #0
    a234:	2100      	movs	r1, #0
    a236:	4638      	mov	r0, r7
    a238:	f015 fa89 	bl	1f74e <z_impl_k_queue_get>
    a23c:	4604      	mov	r4, r0
    a23e:	b908      	cbnz	r0, a244 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    a240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    a244:	6863      	ldr	r3, [r4, #4]
    a246:	b10b      	cbz	r3, a24c <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    a248:	4630      	mov	r0, r6
    a24a:	4798      	blx	r3
    a24c:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    a24e:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    a250:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    a252:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    a256:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    a258:	2b00      	cmp	r3, #0
    a25a:	d1eb      	bne.n	a234 <bt_conn_notify_tx+0x10>
	list->tail = node;
    a25c:	606c      	str	r4, [r5, #4]
    a25e:	e7e7      	b.n	a230 <bt_conn_notify_tx+0xc>
    a260:	2000098c 	.word	0x2000098c

0000a264 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a268:	4605      	mov	r5, r0
    a26a:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    a26c:	4840      	ldr	r0, [pc, #256]	; (a370 <send_frag+0x10c>)
    a26e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a272:	4698      	mov	r8, r3
    a274:	4614      	mov	r4, r2
    a276:	f00c fdf3 	bl	16e60 <z_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    a27a:	4b3e      	ldr	r3, [pc, #248]	; (a374 <send_frag+0x110>)
    a27c:	f103 0044 	add.w	r0, r3, #68	; 0x44
    a280:	f010 fa3e 	bl	1a700 <atomic_get>
    a284:	b130      	cbz	r0, a294 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    a286:	7a9a      	ldrb	r2, [r3, #10]
    a288:	3a04      	subs	r2, #4
    a28a:	2a01      	cmp	r2, #1
    a28c:	d802      	bhi.n	a294 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    a28e:	4618      	mov	r0, r3
    a290:	f7ff ffc8 	bl	a224 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    a294:	7aa9      	ldrb	r1, [r5, #10]
    a296:	2904      	cmp	r1, #4
    a298:	d14c      	bne.n	a334 <send_frag+0xd0>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    a29a:	f107 0008 	add.w	r0, r7, #8
    a29e:	f014 ff82 	bl	1f1a6 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a2a2:	89bb      	ldrh	r3, [r7, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a2a4:	882a      	ldrh	r2, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a2a6:	4e34      	ldr	r6, [pc, #208]	; (a378 <send_frag+0x114>)
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a2a8:	3b04      	subs	r3, #4
    a2aa:	8043      	strh	r3, [r0, #2]
    a2ac:	6871      	ldr	r1, [r6, #4]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a2ae:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    a2b2:	2302      	movs	r3, #2
    a2b4:	6834      	ldr	r4, [r6, #0]
    a2b6:	8002      	strh	r2, [r0, #0]

	cb = conn_tx(buf)->cb;
    a2b8:	697a      	ldr	r2, [r7, #20]
    a2ba:	753b      	strb	r3, [r7, #20]
    a2bc:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    a2be:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a2c0:	428c      	cmp	r4, r1
	list->tail = node;
    a2c2:	bf08      	it	eq
    a2c4:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    a2c6:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    a2c8:	f04f 0320 	mov.w	r3, #32
    a2cc:	f3ef 8211 	mrs	r2, BASEPRI
    a2d0:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    a2d4:	2300      	movs	r3, #0
    a2d6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    a2d8:	69ab      	ldr	r3, [r5, #24]
    a2da:	2b00      	cmp	r3, #0
    a2dc:	d138      	bne.n	a350 <send_frag+0xec>
	list->head = node;
    a2de:	e9c5 4405 	strd	r4, r4, [r5, #20]
	__asm__ volatile(
    a2e2:	f382 8811 	msr	BASEPRI, r2
    a2e6:	f3bf 8f6f 	isb	sy
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    a2ea:	4638      	mov	r0, r7
    a2ec:	f010 f9f5 	bl	1a6da <bt_send>
	if (err) {
    a2f0:	2800      	cmp	r0, #0
    a2f2:	d039      	beq.n	a368 <send_frag+0x104>
	__asm__ volatile(
    a2f4:	f04f 0320 	mov.w	r3, #32
    a2f8:	f3ef 8011 	mrs	r0, BASEPRI
    a2fc:	f383 8811 	msr	BASEPRI, r3
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a300:	696b      	ldr	r3, [r5, #20]
    a302:	2200      	movs	r2, #0
    a304:	b153      	cbz	r3, a31c <send_frag+0xb8>
    a306:	429c      	cmp	r4, r3
    a308:	6819      	ldr	r1, [r3, #0]
    a30a:	d12a      	bne.n	a362 <send_frag+0xfe>
Z_GENLIST_REMOVE(slist, snode)
    a30c:	bb1a      	cbnz	r2, a356 <send_frag+0xf2>
    a30e:	69aa      	ldr	r2, [r5, #24]
	list->head = node;
    a310:	6169      	str	r1, [r5, #20]
Z_GENLIST_REMOVE(slist, snode)
    a312:	4294      	cmp	r4, r2
    a314:	d100      	bne.n	a318 <send_frag+0xb4>
	list->tail = node;
    a316:	61a9      	str	r1, [r5, #24]
	parent->next = child;
    a318:	2200      	movs	r2, #0
    a31a:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    a31c:	f380 8811 	msr	BASEPRI, r0
    a320:	f3bf 8f6f 	isb	sy
	tx->cb = NULL;
    a324:	2300      	movs	r3, #0
    a326:	6063      	str	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    a328:	6833      	ldr	r3, [r6, #0]
	parent->next = child;
    a32a:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    a32c:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    a32e:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    a330:	b903      	cbnz	r3, a334 <send_frag+0xd0>
	list->tail = node;
    a332:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    a334:	480e      	ldr	r0, [pc, #56]	; (a370 <send_frag+0x10c>)
    a336:	f00c fd69 	bl	16e0c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    a33a:	f1b8 0f00 	cmp.w	r8, #0
    a33e:	d004      	beq.n	a34a <send_frag+0xe6>
		net_buf_unref(buf);
    a340:	4638      	mov	r0, r7
    a342:	f00b fadf 	bl	15904 <net_buf_unref>
	}
	return false;
    a346:	f04f 0800 	mov.w	r8, #0
}
    a34a:	4640      	mov	r0, r8
    a34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    a350:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a352:	61ac      	str	r4, [r5, #24]
    a354:	e7c5      	b.n	a2e2 <send_frag+0x7e>
	parent->next = child;
    a356:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a358:	69a9      	ldr	r1, [r5, #24]
    a35a:	428c      	cmp	r4, r1
	list->tail = node;
    a35c:	bf08      	it	eq
    a35e:	61aa      	streq	r2, [r5, #24]
    a360:	e7da      	b.n	a318 <send_frag+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a362:	461a      	mov	r2, r3
    a364:	460b      	mov	r3, r1
    a366:	e7cd      	b.n	a304 <send_frag+0xa0>
	return true;
    a368:	f04f 0801 	mov.w	r8, #1
    a36c:	e7ed      	b.n	a34a <send_frag+0xe6>
    a36e:	bf00      	nop
    a370:	20007cec 	.word	0x20007cec
    a374:	200008f4 	.word	0x200008f4
    a378:	2000098c 	.word	0x2000098c

0000a37c <bt_conn_prepare_events>:
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    a37c:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    a37e:	4b1f      	ldr	r3, [pc, #124]	; (a3fc <bt_conn_prepare_events+0x80>)
    a380:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a382:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    a384:	609a      	str	r2, [r3, #8]
{
    a386:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a388:	f00d f85a 	bl	17440 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    a38c:	4b1c      	ldr	r3, [pc, #112]	; (a400 <bt_conn_prepare_events+0x84>)
    a38e:	f103 0044 	add.w	r0, r3, #68	; 0x44
    a392:	f010 f9b5 	bl	1a700 <atomic_get>
    a396:	4619      	mov	r1, r3
    a398:	b908      	cbnz	r0, a39e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a39a:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    a39c:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    a39e:	7a9a      	ldrb	r2, [r3, #10]
    a3a0:	b99a      	cbnz	r2, a3ca <bt_conn_prepare_events+0x4e>
    a3a2:	f3bf 8f5b 	dmb	ish
    a3a6:	1d1a      	adds	r2, r3, #4
    a3a8:	e852 0f00 	ldrex	r0, [r2]
    a3ac:	f020 0540 	bic.w	r5, r0, #64	; 0x40
    a3b0:	e842 5c00 	strex	ip, r5, [r2]
    a3b4:	f1bc 0f00 	cmp.w	ip, #0
    a3b8:	d1f6      	bne.n	a3a8 <bt_conn_prepare_events+0x2c>
    a3ba:	f3bf 8f5b 	dmb	ish
    a3be:	0642      	lsls	r2, r0, #25
    a3c0:	d503      	bpl.n	a3ca <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    a3c2:	4618      	mov	r0, r3
    a3c4:	f010 fa1e 	bl	1a804 <conn_cleanup>
    a3c8:	e7e7      	b.n	a39a <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    a3ca:	7a8d      	ldrb	r5, [r1, #10]
    a3cc:	2d04      	cmp	r5, #4
    a3ce:	d1e4      	bne.n	a39a <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    a3d0:	4b0c      	ldr	r3, [pc, #48]	; (a404 <bt_conn_prepare_events+0x88>)
    a3d2:	2200      	movs	r2, #0
    a3d4:	4629      	mov	r1, r5
    a3d6:	f104 0014 	add.w	r0, r4, #20
    a3da:	f00d f831 	bl	17440 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    a3de:	2301      	movs	r3, #1
    a3e0:	f884 3020 	strb.w	r3, [r4, #32]
		k_poll_event_init(&events[ev_count],
    a3e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a3e8:	4b07      	ldr	r3, [pc, #28]	; (a408 <bt_conn_prepare_events+0x8c>)
    a3ea:	2200      	movs	r2, #0
    a3ec:	4629      	mov	r1, r5
    a3ee:	f00d f827 	bl	17440 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    a3f2:	2302      	movs	r3, #2
    a3f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    a3f8:	2003      	movs	r0, #3
	return ev_count;
    a3fa:	e7cf      	b.n	a39c <bt_conn_prepare_events+0x20>
    a3fc:	20008660 	.word	0x20008660
    a400:	200008f4 	.word	0x200008f4
    a404:	20000910 	.word	0x20000910
    a408:	20000920 	.word	0x20000920

0000a40c <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    a40e:	4c15      	ldr	r4, [pc, #84]	; (a464 <bt_conn_add_le+0x58>)
    a410:	f104 0644 	add.w	r6, r4, #68	; 0x44
{
    a414:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    a416:	4630      	mov	r0, r6
    a418:	f010 f972 	bl	1a700 <atomic_get>
    a41c:	4605      	mov	r5, r0
    a41e:	b108      	cbz	r0, a424 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    a420:	2000      	movs	r0, #0
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);

	return conn;
}
    a422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)memset(conn, 0, sizeof(*conn));
    a424:	4601      	mov	r1, r0
    a426:	2298      	movs	r2, #152	; 0x98
    a428:	4620      	mov	r0, r4
    a42a:	f00f fe67 	bl	1a0fc <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a42e:	f3bf 8f5b 	dmb	ish
    a432:	2301      	movs	r3, #1
    a434:	e856 2f00 	ldrex	r2, [r6]
    a438:	e846 3100 	strex	r1, r3, [r6]
    a43c:	2900      	cmp	r1, #0
    a43e:	d1f9      	bne.n	a434 <bt_conn_add_le+0x28>
    a440:	f3bf 8f5b 	dmb	ish
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    a444:	2207      	movs	r2, #7
    a446:	4639      	mov	r1, r7
    a448:	f104 0048 	add.w	r0, r4, #72	; 0x48
    a44c:	f00f fe2c 	bl	1a0a8 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a450:	4b05      	ldr	r3, [pc, #20]	; (a468 <bt_conn_add_le+0x5c>)
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    a452:	4906      	ldr	r1, [pc, #24]	; (a46c <bt_conn_add_le+0x60>)
	conn->type = BT_CONN_TYPE_LE;
    a454:	70a5      	strb	r5, [r4, #2]
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    a456:	f104 0078 	add.w	r0, r4, #120	; 0x78
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a45a:	6623      	str	r3, [r4, #96]	; 0x60
	k_delayed_work_init(&conn->le.update_work, conn_le_update_timeout);
    a45c:	f015 fb5e 	bl	1fb1c <k_delayed_work_init>
			conn = &conns[i];
    a460:	4620      	mov	r0, r4
	return conn;
    a462:	e7de      	b.n	a422 <bt_conn_add_le+0x16>
    a464:	200008f4 	.word	0x200008f4
    a468:	00280018 	.word	0x00280018
    a46c:	0000a699 	.word	0x0000a699

0000a470 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    a472:	7a85      	ldrb	r5, [r0, #10]
    a474:	428d      	cmp	r5, r1
{
    a476:	4604      	mov	r4, r0
	if (conn->state == state) {
    a478:	f000 8083 	beq.w	a582 <bt_conn_set_state+0x112>
		BT_WARN("no transition");
		return;
	}

	old_state = conn->state;
	conn->state = state;
    a47c:	7281      	strb	r1, [r0, #10]

	/* Actions needed for exiting the old state */
	switch (old_state) {
    a47e:	b915      	cbnz	r5, a486 <bt_conn_set_state+0x16>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    a480:	3044      	adds	r0, #68	; 0x44
    a482:	f010 f95b 	bl	1a73c <atomic_inc>
	switch (conn->state) {
    a486:	7aa3      	ldrb	r3, [r4, #10]
    a488:	b1db      	cbz	r3, a4c2 <bt_conn_set_state+0x52>
    a48a:	2b04      	cmp	r3, #4
    a48c:	d179      	bne.n	a582 <bt_conn_set_state+0x112>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a48e:	78a3      	ldrb	r3, [r4, #2]
    a490:	2b02      	cmp	r3, #2
    a492:	d076      	beq.n	a582 <bt_conn_set_state+0x112>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    a494:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a498:	f015 f917 	bl	1f6ca <z_impl_k_queue_init>
    a49c:	f104 001c 	add.w	r0, r4, #28
    a4a0:	f015 f913 	bl	1f6ca <z_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result)

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    a4a4:	2100      	movs	r1, #0
    a4a6:	4837      	ldr	r0, [pc, #220]	; (a584 <bt_conn_set_state+0x114>)
    a4a8:	f00d f872 	bl	17590 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    a4ac:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    a4ae:	4620      	mov	r0, r4
	list->tail = NULL;
    a4b0:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
    a4b4:	f000 fa16 	bl	a8e4 <bt_l2cap_connected>
		notify_connected(conn);
    a4b8:	4620      	mov	r0, r4
}
    a4ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    a4be:	f7ff be3d 	b.w	a13c <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a4c2:	78a3      	ldrb	r3, [r4, #2]
    a4c4:	2b02      	cmp	r3, #2
    a4c6:	d105      	bne.n	a4d4 <bt_conn_set_state+0x64>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    a4c8:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    a4cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    a4d0:	f010 b927 	b.w	1a722 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    a4d4:	1f2b      	subs	r3, r5, #4
    a4d6:	2b01      	cmp	r3, #1
    a4d8:	d845      	bhi.n	a566 <bt_conn_set_state+0xf6>
			bt_l2cap_disconnected(conn);
    a4da:	4620      	mov	r0, r4
    a4dc:	f010 fa6f 	bl	1a9be <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a4e0:	4b29      	ldr	r3, [pc, #164]	; (a588 <bt_conn_set_state+0x118>)
    a4e2:	681d      	ldr	r5, [r3, #0]
    a4e4:	b9fd      	cbnz	r5, a526 <bt_conn_set_state+0xb6>
Z_GENLIST_PREPEND(slist, snode)
    a4e6:	4e29      	ldr	r6, [pc, #164]	; (a58c <bt_conn_set_state+0x11c>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    a4e8:	4f29      	ldr	r7, [pc, #164]	; (a590 <bt_conn_set_state+0x120>)
	__asm__ volatile(
    a4ea:	f04f 0320 	mov.w	r3, #32
    a4ee:	f3ef 8111 	mrs	r1, BASEPRI
    a4f2:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(slist)
    a4f6:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    a4f8:	b12b      	cbz	r3, a506 <bt_conn_set_state+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a4fa:	69a0      	ldr	r0, [r4, #24]
    a4fc:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    a4fe:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a500:	4283      	cmp	r3, r0
	list->tail = node;
    a502:	bf08      	it	eq
    a504:	61a2      	streq	r2, [r4, #24]
	__asm__ volatile(
    a506:	f381 8811 	msr	BASEPRI, r1
    a50a:	f3bf 8f6f 	isb	sy
		if (!node) {
    a50e:	b18b      	cbz	r3, a534 <bt_conn_set_state+0xc4>
Z_GENLIST_PREPEND(slist, snode)
    a510:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    a512:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    a514:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    a516:	605d      	str	r5, [r3, #4]
	list->head = node;
    a518:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    a51a:	b902      	cbnz	r2, a51e <bt_conn_set_state+0xae>
	list->tail = node;
    a51c:	6073      	str	r3, [r6, #4]
    a51e:	4638      	mov	r0, r7
    a520:	f00c fc74 	bl	16e0c <z_impl_k_sem_give>
    a524:	e7e1      	b.n	a4ea <bt_conn_set_state+0x7a>
		if (cb->disconnected) {
    a526:	686b      	ldr	r3, [r5, #4]
    a528:	b113      	cbz	r3, a530 <bt_conn_set_state+0xc0>
			cb->disconnected(conn, conn->err);
    a52a:	7a61      	ldrb	r1, [r4, #9]
    a52c:	4620      	mov	r0, r4
    a52e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a530:	692d      	ldr	r5, [r5, #16]
    a532:	e7d7      	b.n	a4e4 <bt_conn_set_state+0x74>
			if (conn->type == BT_CONN_TYPE_LE) {
    a534:	78a3      	ldrb	r3, [r4, #2]
    a536:	b91b      	cbnz	r3, a540 <bt_conn_set_state+0xd0>
				k_delayed_work_cancel(&conn->le.update_work);
    a538:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a53c:	f015 faf6 	bl	1fb2c <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a540:	f3bf 8f5b 	dmb	ish
    a544:	3404      	adds	r4, #4
    a546:	e854 3f00 	ldrex	r3, [r4]
    a54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a54e:	e844 3200 	strex	r2, r3, [r4]
    a552:	2a00      	cmp	r2, #0
    a554:	d1f7      	bne.n	a546 <bt_conn_set_state+0xd6>
    a556:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL_RAISE, k_poll_signal_raise, int, struct k_poll_signal *, signal, int, result)
    a55a:	2100      	movs	r1, #0
    a55c:	4809      	ldr	r0, [pc, #36]	; (a584 <bt_conn_set_state+0x114>)
}
    a55e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a562:	f00d b815 	b.w	17590 <z_impl_k_poll_signal_raise>
		} else if (old_state == BT_CONN_CONNECT) {
    a566:	2d03      	cmp	r5, #3
    a568:	d103      	bne.n	a572 <bt_conn_set_state+0x102>
			notify_connected(conn);
    a56a:	4620      	mov	r0, r4
    a56c:	f7ff fde6 	bl	a13c <notify_connected>
    a570:	e7aa      	b.n	a4c8 <bt_conn_set_state+0x58>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    a572:	2d01      	cmp	r5, #1
    a574:	d103      	bne.n	a57e <bt_conn_set_state+0x10e>
			if (conn->err) {
    a576:	7a63      	ldrb	r3, [r4, #9]
    a578:	2b00      	cmp	r3, #0
    a57a:	d0a5      	beq.n	a4c8 <bt_conn_set_state+0x58>
    a57c:	e7f5      	b.n	a56a <bt_conn_set_state+0xfa>
		} else if (old_state == BT_CONN_CONNECT_DIR_ADV) {
    a57e:	2d02      	cmp	r5, #2
    a580:	d0f9      	beq.n	a576 <bt_conn_set_state+0x106>
}
    a582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a584:	20008660 	.word	0x20008660
    a588:	200008d8 	.word	0x200008d8
    a58c:	2000098c 	.word	0x2000098c
    a590:	20007cec 	.word	0x20007cec

0000a594 <bt_conn_lookup_handle>:
{
    a594:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    a596:	4c0b      	ldr	r4, [pc, #44]	; (a5c4 <bt_conn_lookup_handle+0x30>)
{
    a598:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    a59a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    a59e:	f010 f8af 	bl	1a700 <atomic_get>
    a5a2:	b158      	cbz	r0, a5bc <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    a5a4:	7aa3      	ldrb	r3, [r4, #10]
    a5a6:	3b04      	subs	r3, #4
    a5a8:	2b01      	cmp	r3, #1
    a5aa:	d808      	bhi.n	a5be <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    a5ac:	8823      	ldrh	r3, [r4, #0]
    a5ae:	4293      	cmp	r3, r2
    a5b0:	d105      	bne.n	a5be <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    a5b2:	f104 0044 	add.w	r0, r4, #68	; 0x44
    a5b6:	f010 f8c1 	bl	1a73c <atomic_inc>
			return bt_conn_ref(&conns[i]);
    a5ba:	4620      	mov	r0, r4
}
    a5bc:	bd10      	pop	{r4, pc}
	return NULL;
    a5be:	2000      	movs	r0, #0
    a5c0:	e7fc      	b.n	a5bc <bt_conn_lookup_handle+0x28>
    a5c2:	bf00      	nop
    a5c4:	200008f4 	.word	0x200008f4

0000a5c8 <bt_conn_lookup_addr_le>:
{
    a5c8:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    a5ca:	4c0d      	ldr	r4, [pc, #52]	; (a600 <bt_conn_lookup_addr_le+0x38>)
{
    a5cc:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    a5ce:	f104 0044 	add.w	r0, r4, #68	; 0x44
    a5d2:	f010 f895 	bl	1a700 <atomic_get>
    a5d6:	b908      	cbnz	r0, a5dc <bt_conn_lookup_addr_le+0x14>
	return NULL;
    a5d8:	2000      	movs	r0, #0
}
    a5da:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a5dc:	78a2      	ldrb	r2, [r4, #2]
    a5de:	2a00      	cmp	r2, #0
    a5e0:	d1fa      	bne.n	a5d8 <bt_conn_lookup_addr_le+0x10>
		if (conns[i].id == id &&
    a5e2:	7a22      	ldrb	r2, [r4, #8]
    a5e4:	429a      	cmp	r2, r3
    a5e6:	d1f7      	bne.n	a5d8 <bt_conn_lookup_addr_le+0x10>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    a5e8:	4620      	mov	r0, r4
    a5ea:	f010 f923 	bl	1a834 <bt_conn_addr_le_cmp>
		if (conns[i].id == id &&
    a5ee:	2800      	cmp	r0, #0
    a5f0:	d1f2      	bne.n	a5d8 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    a5f2:	f104 0044 	add.w	r0, r4, #68	; 0x44
    a5f6:	f010 f8a1 	bl	1a73c <atomic_inc>
		    !bt_conn_addr_le_cmp(&conns[i], peer)) {
    a5fa:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    a5fc:	e7ed      	b.n	a5da <bt_conn_lookup_addr_le+0x12>
    a5fe:	bf00      	nop
    a600:	200008f4 	.word	0x200008f4

0000a604 <bt_conn_lookup_state_le>:
{
    a604:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    a606:	4c0e      	ldr	r4, [pc, #56]	; (a640 <bt_conn_lookup_state_le+0x3c>)
{
    a608:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    a60a:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    a60e:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    a610:	f010 f876 	bl	1a700 <atomic_get>
    a614:	b908      	cbnz	r0, a61a <bt_conn_lookup_state_le+0x16>
	return NULL;
    a616:	2000      	movs	r0, #0
}
    a618:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    a61a:	78a2      	ldrb	r2, [r4, #2]
    a61c:	2a00      	cmp	r2, #0
    a61e:	d1fa      	bne.n	a616 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    a620:	b93b      	cbnz	r3, a632 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    a622:	7aa3      	ldrb	r3, [r4, #10]
    a624:	42ab      	cmp	r3, r5
    a626:	d1f6      	bne.n	a616 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    a628:	4806      	ldr	r0, [pc, #24]	; (a644 <bt_conn_lookup_state_le+0x40>)
    a62a:	f010 f887 	bl	1a73c <atomic_inc>
			return bt_conn_ref(&conns[i]);
    a62e:	4804      	ldr	r0, [pc, #16]	; (a640 <bt_conn_lookup_state_le+0x3c>)
    a630:	e7f2      	b.n	a618 <bt_conn_lookup_state_le+0x14>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    a632:	4619      	mov	r1, r3
    a634:	4620      	mov	r0, r4
    a636:	f010 f8fd 	bl	1a834 <bt_conn_addr_le_cmp>
    a63a:	2800      	cmp	r0, #0
    a63c:	d0f1      	beq.n	a622 <bt_conn_lookup_state_le+0x1e>
    a63e:	e7ea      	b.n	a616 <bt_conn_lookup_state_le+0x12>
    a640:	200008f4 	.word	0x200008f4
    a644:	20000938 	.word	0x20000938

0000a648 <send_conn_le_param_update>:
{
    a648:	b538      	push	{r3, r4, r5, lr}
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a64a:	4b12      	ldr	r3, [pc, #72]	; (a694 <send_conn_le_param_update+0x4c>)
    a64c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
{
    a650:	460d      	mov	r5, r1
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a652:	0799      	lsls	r1, r3, #30
{
    a654:	4604      	mov	r4, r0
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a656:	d407      	bmi.n	a668 <send_conn_le_param_update+0x20>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    a658:	78e3      	ldrb	r3, [r4, #3]
    a65a:	b173      	cbz	r3, a67a <send_conn_le_param_update+0x32>
	return bt_l2cap_update_conn_param(conn, param);
    a65c:	4629      	mov	r1, r5
    a65e:	4620      	mov	r0, r4
}
    a660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    a664:	f000 b978 	b.w	a958 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a668:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    a66c:	079a      	lsls	r2, r3, #30
    a66e:	d5f3      	bpl.n	a658 <send_conn_le_param_update+0x10>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a670:	3004      	adds	r0, #4
    a672:	f010 f845 	bl	1a700 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    a676:	0543      	lsls	r3, r0, #21
    a678:	d4ee      	bmi.n	a658 <send_conn_le_param_update+0x10>
		rc = bt_conn_le_conn_update(conn, param);
    a67a:	4629      	mov	r1, r5
    a67c:	4620      	mov	r0, r4
    a67e:	f010 f937 	bl	1a8f0 <bt_conn_le_conn_update>
		if (rc == 0) {
    a682:	b928      	cbnz	r0, a690 <send_conn_le_param_update+0x48>
			conn->le.pending_latency = param->latency;
    a684:	88ab      	ldrh	r3, [r5, #4]
    a686:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
			conn->le.pending_timeout = param->timeout;
    a68a:	88eb      	ldrh	r3, [r5, #6]
    a68c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
}
    a690:	bd38      	pop	{r3, r4, r5, pc}
    a692:	bf00      	nop
    a694:	20007c60 	.word	0x20007c60

0000a698 <conn_le_update_timeout>:
{
    a698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    a69a:	f1a0 0278 	sub.w	r2, r0, #120	; 0x78
	if (atomic_test_and_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET)) {
    a69e:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6a2:	f3bf 8f5b 	dmb	ish
    a6a6:	e854 3f00 	ldrex	r3, [r4]
    a6aa:	f423 7100 	bic.w	r1, r3, #512	; 0x200
    a6ae:	e844 1c00 	strex	ip, r1, [r4]
    a6b2:	f1bc 0f00 	cmp.w	ip, #0
    a6b6:	d1f6      	bne.n	a6a6 <conn_le_update_timeout+0xe>
    a6b8:	f3bf 8f5b 	dmb	ish
    a6bc:	059b      	lsls	r3, r3, #22
    a6be:	d517      	bpl.n	a6f0 <conn_le_update_timeout+0x58>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    a6c0:	f850 3c18 	ldr.w	r3, [r0, #-24]
    a6c4:	9300      	str	r3, [sp, #0]
    a6c6:	f850 3c10 	ldr.w	r3, [r0, #-16]
    a6ca:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    a6cc:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    a6ce:	4610      	mov	r0, r2
    a6d0:	f7ff ffba 	bl	a648 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a6d4:	f3bf 8f5b 	dmb	ish
    a6d8:	e854 3f00 	ldrex	r3, [r4]
    a6dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a6e0:	e844 3200 	strex	r2, r3, [r4]
    a6e4:	2a00      	cmp	r2, #0
    a6e6:	d1f7      	bne.n	a6d8 <conn_le_update_timeout+0x40>
    a6e8:	f3bf 8f5b 	dmb	ish
}
    a6ec:	b004      	add	sp, #16
    a6ee:	bd10      	pop	{r4, pc}
		param = BT_LE_CONN_PARAM(CONFIG_BT_PERIPHERAL_PREF_MIN_INT,
    a6f0:	4903      	ldr	r1, [pc, #12]	; (a700 <conn_le_update_timeout+0x68>)
    a6f2:	6808      	ldr	r0, [r1, #0]
    a6f4:	6849      	ldr	r1, [r1, #4]
    a6f6:	ab02      	add	r3, sp, #8
    a6f8:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    a6fa:	a902      	add	r1, sp, #8
    a6fc:	e7e7      	b.n	a6ce <conn_le_update_timeout+0x36>
    a6fe:	bf00      	nop
    a700:	0001fffc 	.word	0x0001fffc

0000a704 <bt_conn_create_pdu>:

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    a704:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    a706:	4b08      	ldr	r3, [pc, #32]	; (a728 <bt_conn_create_pdu+0x24>)
{
    a708:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    a70a:	2800      	cmp	r0, #0
    a70c:	bf08      	it	eq
    a70e:	4618      	moveq	r0, r3
    a710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a714:	f014 fc6e 	bl	1eff4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    a718:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    a71a:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    a71c:	3008      	adds	r0, #8
    a71e:	f014 fc88 	bl	1f032 <net_buf_simple_reserve>

	return buf;
}
    a722:	4620      	mov	r0, r4
    a724:	bd38      	pop	{r3, r4, r5, pc}
    a726:	bf00      	nop
    a728:	2000947c 	.word	0x2000947c

0000a72c <create_frag.isra.11>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    a72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a730:	4606      	mov	r6, r0
    a732:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    a734:	4816      	ldr	r0, [pc, #88]	; (a790 <create_frag.isra.11+0x64>)
    a736:	2100      	movs	r1, #0
    a738:	f7ff ffe4 	bl	a704 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    a73c:	7833      	ldrb	r3, [r6, #0]
    a73e:	2b04      	cmp	r3, #4
	frag = bt_conn_create_pdu(&frag_pool, 0);
    a740:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    a742:	f04f 0600 	mov.w	r6, #0
    a746:	d005      	beq.n	a754 <create_frag.isra.11+0x28>
		net_buf_unref(frag);
    a748:	f00b f8dc 	bl	15904 <net_buf_unref>
		return NULL;
    a74c:	4635      	mov	r5, r6
}
    a74e:	4628      	mov	r0, r5
    a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    a754:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a756:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    a75a:	4e0e      	ldr	r6, [pc, #56]	; (a794 <create_frag.isra.11+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a75c:	4638      	mov	r0, r7
    a75e:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    a762:	f014 fd86 	bl	1f272 <net_buf_simple_tailroom>
    a766:	4580      	cmp	r8, r0
    a768:	d20c      	bcs.n	a784 <create_frag.isra.11+0x58>
	return bt_dev.le.mtu;
    a76a:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    a76e:	f854 1f08 	ldr.w	r1, [r4, #8]!
    a772:	4632      	mov	r2, r6
    a774:	4638      	mov	r0, r7
    a776:	f014 fcc7 	bl	1f108 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    a77a:	4631      	mov	r1, r6
    a77c:	4620      	mov	r0, r4
    a77e:	f014 fd38 	bl	1f1f2 <net_buf_simple_pull>
	return frag;
    a782:	e7e4      	b.n	a74e <create_frag.isra.11+0x22>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a784:	4638      	mov	r0, r7
    a786:	f014 fd74 	bl	1f272 <net_buf_simple_tailroom>
    a78a:	b286      	uxth	r6, r0
    a78c:	e7ef      	b.n	a76e <create_frag.isra.11+0x42>
    a78e:	bf00      	nop
    a790:	200094bc 	.word	0x200094bc
    a794:	20007c60 	.word	0x20007c60

0000a798 <bt_conn_process_tx>:
{
    a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a79a:	7a83      	ldrb	r3, [r0, #10]
{
    a79c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    a79e:	b993      	cbnz	r3, a7c6 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a7a0:	f3bf 8f5b 	dmb	ish
    a7a4:	1d03      	adds	r3, r0, #4
    a7a6:	e853 2f00 	ldrex	r2, [r3]
    a7aa:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a7ae:	e843 1400 	strex	r4, r1, [r3]
    a7b2:	2c00      	cmp	r4, #0
    a7b4:	d1f7      	bne.n	a7a6 <bt_conn_process_tx+0xe>
    a7b6:	f3bf 8f5b 	dmb	ish
    a7ba:	0653      	lsls	r3, r2, #25
    a7bc:	d503      	bpl.n	a7c6 <bt_conn_process_tx+0x2e>
}
    a7be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    a7c2:	f010 b81f 	b.w	1a804 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    a7c6:	2100      	movs	r1, #0
    a7c8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    a7cc:	f014 fc18 	bl	1f000 <net_buf_get>
	BT_ASSERT(buf);
    a7d0:	4604      	mov	r4, r0
    a7d2:	b928      	cbnz	r0, a7e0 <bt_conn_process_tx+0x48>
    a7d4:	4040      	eors	r0, r0
    a7d6:	f380 8811 	msr	BASEPRI, r0
    a7da:	f04f 0004 	mov.w	r0, #4
    a7de:	df02      	svc	2
	return bt_dev.le.mtu;
    a7e0:	4e19      	ldr	r6, [pc, #100]	; (a848 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
    a7e2:	8981      	ldrh	r1, [r0, #12]
    a7e4:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    a7e8:	4291      	cmp	r1, r2
    a7ea:	d807      	bhi.n	a7fc <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    a7ec:	2300      	movs	r3, #0
    a7ee:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a7f0:	4621      	mov	r1, r4
    a7f2:	4628      	mov	r0, r5
    a7f4:	f7ff fd36 	bl	a264 <send_frag>
	if (!send_buf(conn, buf)) {
    a7f8:	b140      	cbz	r0, a80c <bt_conn_process_tx+0x74>
}
    a7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    a7fc:	f105 070a 	add.w	r7, r5, #10
    a800:	4601      	mov	r1, r0
    a802:	4638      	mov	r0, r7
    a804:	f7ff ff92 	bl	a72c <create_frag.isra.11>
	if (!frag) {
    a808:	4601      	mov	r1, r0
    a80a:	b920      	cbnz	r0, a816 <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
    a80c:	4620      	mov	r0, r4
}
    a80e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    a812:	f00b b877 	b.w	15904 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    a816:	2301      	movs	r3, #1
    a818:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a81a:	4628      	mov	r0, r5
    a81c:	f7ff fd22 	bl	a264 <send_frag>
    a820:	2800      	cmp	r0, #0
    a822:	d0f3      	beq.n	a80c <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
    a824:	89a2      	ldrh	r2, [r4, #12]
    a826:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    a82a:	429a      	cmp	r2, r3
    a82c:	d802      	bhi.n	a834 <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a82e:	2300      	movs	r3, #0
    a830:	2201      	movs	r2, #1
    a832:	e7dd      	b.n	a7f0 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
    a834:	4621      	mov	r1, r4
    a836:	4638      	mov	r0, r7
    a838:	f7ff ff78 	bl	a72c <create_frag.isra.11>
		if (!frag) {
    a83c:	4601      	mov	r1, r0
    a83e:	2800      	cmp	r0, #0
    a840:	d0e4      	beq.n	a80c <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a842:	2301      	movs	r3, #1
    a844:	461a      	mov	r2, r3
    a846:	e7e8      	b.n	a81a <bt_conn_process_tx+0x82>
    a848:	20007c60 	.word	0x20007c60

0000a84c <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_index(struct bt_conn *conn)
{
	u8_t index = conn - conns;
    a84c:	4b03      	ldr	r3, [pc, #12]	; (a85c <bt_conn_index+0x10>)
    a84e:	1ac0      	subs	r0, r0, r3
    a850:	4b03      	ldr	r3, [pc, #12]	; (a860 <bt_conn_index+0x14>)
    a852:	10c0      	asrs	r0, r0, #3
    a854:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    a856:	b2c0      	uxtb	r0, r0
    a858:	4770      	bx	lr
    a85a:	bf00      	nop
    a85c:	200008f4 	.word	0x200008f4
    a860:	286bca1b 	.word	0x286bca1b

0000a864 <bt_conn_init>:

int bt_conn_init(void)
{
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    a864:	4a0d      	ldr	r2, [pc, #52]	; (a89c <bt_conn_init+0x38>)
	parent->next = child;
    a866:	4b0e      	ldr	r3, [pc, #56]	; (a8a0 <bt_conn_init+0x3c>)
    a868:	6850      	ldr	r0, [r2, #4]
    a86a:	6811      	ldr	r1, [r2, #0]
{
    a86c:	b510      	push	{r4, lr}
    a86e:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    a870:	b188      	cbz	r0, a896 <bt_conn_init+0x32>
    a872:	2400      	movs	r4, #0
	parent->next = child;
    a874:	490b      	ldr	r1, [pc, #44]	; (a8a4 <bt_conn_init+0x40>)
    a876:	6119      	str	r1, [r3, #16]
    a878:	3108      	adds	r1, #8
    a87a:	609b      	str	r3, [r3, #8]
	return list->tail;
    a87c:	6011      	str	r1, [r2, #0]
    a87e:	b104      	cbz	r4, a882 <bt_conn_init+0x1e>
    a880:	6050      	str	r0, [r2, #4]
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    a882:	f000 fcb3 	bl	b1ec <bt_att_init>

	err = bt_smp_init();
    a886:	f001 fa77 	bl	bd78 <bt_smp_init>
	if (err) {
    a88a:	4604      	mov	r4, r0
    a88c:	b908      	cbnz	r0, a892 <bt_conn_init+0x2e>
		return err;
	}

	bt_l2cap_init();
    a88e:	f000 f899 	bl	a9c4 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    a892:	4620      	mov	r0, r4
    a894:	bd10      	pop	{r4, pc}
Z_GENLIST_PREPEND(slist, snode)
    a896:	2401      	movs	r4, #1
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    a898:	4618      	mov	r0, r3
    a89a:	e7eb      	b.n	a874 <bt_conn_init+0x10>
    a89c:	2000098c 	.word	0x2000098c
    a8a0:	200008dc 	.word	0x200008dc
    a8a4:	200008e4 	.word	0x200008e4

0000a8a8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    a8a8:	4b04      	ldr	r3, [pc, #16]	; (a8bc <l2cap_accept+0x14>)
    a8aa:	6818      	ldr	r0, [r3, #0]
    a8ac:	b918      	cbnz	r0, a8b6 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    a8ae:	4a04      	ldr	r2, [pc, #16]	; (a8c0 <l2cap_accept+0x18>)
    a8b0:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    a8b2:	600b      	str	r3, [r1, #0]

		return 0;
    a8b4:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    a8b6:	f06f 000b 	mvn.w	r0, #11
}
    a8ba:	4770      	bx	lr
    a8bc:	20000994 	.word	0x20000994
    a8c0:	2000867c 	.word	0x2000867c

0000a8c4 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    a8c4:	2300      	movs	r3, #0
    a8c6:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    a8c8:	4b05      	ldr	r3, [pc, #20]	; (a8e0 <bt_l2cap_le_fixed_chan_register+0x1c>)
    a8ca:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    a8cc:	f100 0208 	add.w	r2, r0, #8
    a8d0:	b911      	cbnz	r1, a8d8 <bt_l2cap_le_fixed_chan_register+0x14>
	list->head = node;
    a8d2:	e9c3 2200 	strd	r2, r2, [r3]
    a8d6:	4770      	bx	lr
	parent->next = child;
    a8d8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    a8da:	605a      	str	r2, [r3, #4]
}
    a8dc:	4770      	bx	lr
    a8de:	bf00      	nop
    a8e0:	20000a20 	.word	0x20000a20

0000a8e4 <bt_l2cap_connected>:
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    a8e4:	4b1a      	ldr	r3, [pc, #104]	; (a950 <bt_l2cap_connected+0x6c>)
{
    a8e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    a8ea:	681c      	ldr	r4, [r3, #0]
{
    a8ec:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    a8ee:	b12c      	cbz	r4, a8fc <bt_l2cap_connected+0x18>
	parent->next = child;
    a8f0:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    a8f2:	f8df 8060 	ldr.w	r8, [pc, #96]	; a954 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    a8f6:	3c08      	subs	r4, #8
    a8f8:	46b9      	mov	r9, r7
    a8fa:	b914      	cbnz	r4, a902 <bt_l2cap_connected+0x1e>
}
    a8fc:	b003      	add	sp, #12
    a8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    a902:	6863      	ldr	r3, [r4, #4]
    a904:	a901      	add	r1, sp, #4
    a906:	4630      	mov	r0, r6
    a908:	4798      	blx	r3
    a90a:	2800      	cmp	r0, #0
    a90c:	db18      	blt.n	a940 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    a90e:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    a910:	8823      	ldrh	r3, [r4, #0]
    a912:	862b      	strh	r3, [r5, #48]	; 0x30
		ch->tx.cid = fchan->cid;
    a914:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    a918:	4641      	mov	r1, r8
    a91a:	f105 0010 	add.w	r0, r5, #16
    a91e:	f015 f8fd 	bl	1fb1c <k_delayed_work_init>
    a922:	60af      	str	r7, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    a924:	6c32      	ldr	r2, [r6, #64]	; 0x40
	sys_slist_append(&conn->channels, &chan->node);
    a926:	f105 0308 	add.w	r3, r5, #8
    a92a:	b972      	cbnz	r2, a94a <bt_l2cap_connected+0x66>
	list->head = node;
    a92c:	e9c6 330f 	strd	r3, r3, [r6, #60]	; 0x3c
		if (chan->ops->connected) {
    a930:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    a932:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    a934:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    a936:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    a93a:	681b      	ldr	r3, [r3, #0]
    a93c:	b103      	cbz	r3, a940 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    a93e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a940:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    a942:	2c00      	cmp	r4, #0
    a944:	d0da      	beq.n	a8fc <bt_l2cap_connected+0x18>
    a946:	3c08      	subs	r4, #8
    a948:	e7d7      	b.n	a8fa <bt_l2cap_connected+0x16>
	parent->next = child;
    a94a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    a94c:	6433      	str	r3, [r6, #64]	; 0x40
    a94e:	e7ef      	b.n	a930 <bt_l2cap_connected+0x4c>
    a950:	20000a20 	.word	0x20000a20
    a954:	0001a9a5 	.word	0x0001a9a5

0000a958 <bt_l2cap_update_conn_param>:
{
    a958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ident++;
    a95c:	4b18      	ldr	r3, [pc, #96]	; (a9c0 <bt_l2cap_update_conn_param+0x68>)
    a95e:	781a      	ldrb	r2, [r3, #0]
    a960:	3201      	adds	r2, #1
	if (!ident) {
    a962:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    a966:	bf08      	it	eq
    a968:	2201      	moveq	r2, #1
{
    a96a:	460c      	mov	r4, r1
		ident++;
    a96c:	701a      	strb	r2, [r3, #0]
{
    a96e:	4605      	mov	r5, r0
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    a970:	2104      	movs	r1, #4
    a972:	2000      	movs	r0, #0
	return ident;
    a974:	781e      	ldrb	r6, [r3, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    a976:	f7ff fec5 	bl	a704 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    a97a:	f100 0808 	add.w	r8, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    a97e:	4607      	mov	r7, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    a980:	2104      	movs	r1, #4
    a982:	4640      	mov	r0, r8
    a984:	f014 fbba 	bl	1f0fc <net_buf_simple_add>
	hdr->code = code;
    a988:	2312      	movs	r3, #18
	hdr->ident = ident;
    a98a:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    a98c:	2108      	movs	r1, #8
    a98e:	2600      	movs	r6, #0
	hdr->code = code;
    a990:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
    a992:	7081      	strb	r1, [r0, #2]
    a994:	70c6      	strb	r6, [r0, #3]
	req = net_buf_add(buf, sizeof(*req));
    a996:	4640      	mov	r0, r8
    a998:	f014 fbb0 	bl	1f0fc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    a99c:	8823      	ldrh	r3, [r4, #0]
    a99e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    a9a0:	8863      	ldrh	r3, [r4, #2]
    a9a2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    a9a4:	88a3      	ldrh	r3, [r4, #4]
    a9a6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    a9a8:	88e3      	ldrh	r3, [r4, #6]
    a9aa:	80c3      	strh	r3, [r0, #6]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    a9ac:	463a      	mov	r2, r7
    a9ae:	4628      	mov	r0, r5
    a9b0:	4633      	mov	r3, r6
    a9b2:	2105      	movs	r1, #5
    a9b4:	f010 f819 	bl	1a9ea <bt_l2cap_send_cb>
}
    a9b8:	4630      	mov	r0, r6
    a9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9be:	bf00      	nop
    a9c0:	20002567 	.word	0x20002567

0000a9c4 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    a9c4:	4801      	ldr	r0, [pc, #4]	; (a9cc <bt_l2cap_init+0x8>)
    a9c6:	f7ff bf7d 	b.w	a8c4 <bt_l2cap_le_fixed_chan_register>
    a9ca:	bf00      	nop
    a9cc:	20008670 	.word	0x20008670

0000a9d0 <att_op_get_type>:
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    a9d0:	4a09      	ldr	r2, [pc, #36]	; (a9f8 <att_op_get_type+0x28>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    a9d2:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    a9d4:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    a9d8:	4281      	cmp	r1, r0
    a9da:	d103      	bne.n	a9e4 <att_op_get_type+0x14>
			return handlers[i].type;
    a9dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a9e0:	7898      	ldrb	r0, [r3, #2]
    a9e2:	4770      	bx	lr
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    a9e4:	3301      	adds	r3, #1
    a9e6:	2b0d      	cmp	r3, #13
    a9e8:	d1f4      	bne.n	a9d4 <att_op_get_type+0x4>
		}
	}

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
    a9ea:	f010 0f40 	tst.w	r0, #64	; 0x40
    a9ee:	bf0c      	ite	eq
    a9f0:	2006      	moveq	r0, #6
    a9f2:	2000      	movne	r0, #0
	}

	return ATT_UNKNOWN;
}
    a9f4:	4770      	bx	lr
    a9f6:	bf00      	nop
    a9f8:	000206c4 	.word	0x000206c4

0000a9fc <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    a9fc:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    a9fe:	2317      	movs	r3, #23
    aa00:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    aa04:	8643      	strh	r3, [r0, #50]	; 0x32
{
    aa06:	4604      	mov	r4, r0

	k_delayed_work_init(&att->timeout_work, att_timeout);
    aa08:	4903      	ldr	r1, [pc, #12]	; (aa18 <bt_att_connected+0x1c>)
    aa0a:	309c      	adds	r0, #156	; 0x9c
    aa0c:	f015 f886 	bl	1fb1c <k_delayed_work_init>
	list->head = NULL;
    aa10:	2300      	movs	r3, #0
	list->tail = NULL;
    aa12:	e9c4 3325 	strd	r3, r3, [r4, #148]	; 0x94
	sys_slist_init(&att->reqs);
}
    aa16:	bd10      	pop	{r4, pc}
    aa18:	0001b0d1 	.word	0x0001b0d1

0000aa1c <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    aa1c:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    aa1e:	4d0b      	ldr	r5, [pc, #44]	; (aa4c <bt_att_accept+0x30>)
    aa20:	682c      	ldr	r4, [r5, #0]
{
    aa22:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    aa24:	b97c      	cbnz	r4, aa46 <bt_att_accept+0x2a>
			continue;
		}

		(void)memset(att, 0, sizeof(*att));
    aa26:	22d4      	movs	r2, #212	; 0xd4
    aa28:	4621      	mov	r1, r4
    aa2a:	4628      	mov	r0, r5
    aa2c:	f00f fb66 	bl	1a0fc <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    aa30:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    aa32:	4b07      	ldr	r3, [pc, #28]	; (aa50 <bt_att_accept+0x34>)
    aa34:	606b      	str	r3, [r5, #4]
    aa36:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    aa3a:	4611      	mov	r1, r2
    aa3c:	f014 ffd4 	bl	1f9e8 <z_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    aa40:	6035      	str	r5, [r6, #0]
    aa42:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    aa44:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOMEM;
    aa46:	f06f 000b 	mvn.w	r0, #11
    aa4a:	e7fb      	b.n	aa44 <bt_att_accept+0x28>
    aa4c:	20000a28 	.word	0x20000a28
    aa50:	2000869c 	.word	0x2000869c

0000aa54 <att_req_sent>:
{
    aa54:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    aa56:	2104      	movs	r1, #4
    aa58:	f010 f812 	bl	1aa80 <bt_l2cap_le_lookup_tx_cid>
    aa5c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    aa5e:	30bc      	adds	r0, #188	; 0xbc
    aa60:	f00c f9d4 	bl	16e0c <z_impl_k_sem_give>
	if (att->req) {
    aa64:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    aa68:	b143      	cbz	r3, aa7c <att_req_sent+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    aa6a:	f104 019c 	add.w	r1, r4, #156	; 0x9c
    aa6e:	f247 5230 	movw	r2, #30000	; 0x7530
    aa72:	4803      	ldr	r0, [pc, #12]	; (aa80 <att_req_sent+0x2c>)
}
    aa74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa78:	f00c bb30 	b.w	170dc <k_delayed_work_submit_to_queue>
    aa7c:	bd10      	pop	{r4, pc}
    aa7e:	bf00      	nop
    aa80:	20001fc8 	.word	0x20001fc8

0000aa84 <att_send_req>:
{
    aa84:	b570      	push	{r4, r5, r6, lr}
    aa86:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    aa88:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
	att->req = req;
    aa8c:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
{
    aa90:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    aa92:	4630      	mov	r0, r6
    aa94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa98:	f00c f9e2 	bl	16e60 <z_impl_k_sem_take>
	if (!att_is_connected(att)) {
    aa9c:	4628      	mov	r0, r5
    aa9e:	f010 f9cd 	bl	1ae3c <att_is_connected>
    aaa2:	b928      	cbnz	r0, aab0 <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    aaa4:	4630      	mov	r0, r6
    aaa6:	f00c f9b1 	bl	16e0c <z_impl_k_sem_give>
		return -ENOTCONN;
    aaaa:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    aaae:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    aab0:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    aab2:	f106 0008 	add.w	r0, r6, #8
    aab6:	f014 fbd8 	bl	1f26a <net_buf_simple_headroom>
	state->len = buf->len;
    aaba:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    aabc:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    aabe:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    aac0:	6920      	ldr	r0, [r4, #16]
    aac2:	682d      	ldr	r5, [r5, #0]
    aac4:	f014 fb16 	bl	1f0f4 <net_buf_ref>
    aac8:	6923      	ldr	r3, [r4, #16]
	switch (att_op_get_type(buf->data[0])) {
    aaca:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    aacc:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    aace:	7818      	ldrb	r0, [r3, #0]
    aad0:	f7ff ff7e 	bl	a9d0 <att_op_get_type>
    aad4:	3801      	subs	r0, #1
    aad6:	b2c0      	uxtb	r0, r0
    aad8:	2804      	cmp	r0, #4
    aada:	bf96      	itet	ls
    aadc:	4b05      	ldrls	r3, [pc, #20]	; (aaf4 <att_send_req+0x70>)
    aade:	4b06      	ldrhi	r3, [pc, #24]	; (aaf8 <att_send_req+0x74>)
    aae0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    aae4:	4632      	mov	r2, r6
    aae6:	4628      	mov	r0, r5
    aae8:	2104      	movs	r1, #4
    aaea:	f00f ff7e 	bl	1a9ea <bt_l2cap_send_cb>
	return 0;
    aaee:	2000      	movs	r0, #0
    aaf0:	e7dd      	b.n	aaae <att_send_req+0x2a>
    aaf2:	bf00      	nop
    aaf4:	000206b0 	.word	0x000206b0
    aaf8:	0001ae63 	.word	0x0001ae63

0000aafc <att_write_cmd>:
{
    aafc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    aafe:	6804      	ldr	r4, [r0, #0]
{
    ab00:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    ab02:	f101 0008 	add.w	r0, r1, #8
{
    ab06:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    ab08:	f014 fb8b 	bl	1f222 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    ab0c:	2100      	movs	r1, #0
	handle = net_buf_pull_le16(buf);
    ab0e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    ab10:	4620      	mov	r0, r4
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    ab12:	68af      	ldr	r7, [r5, #8]
    ab14:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    ab16:	f010 fddc 	bl	1b6d2 <bt_gatt_change_aware>
    ab1a:	b320      	cbz	r0, ab66 <att_write_cmd+0x6a>
	if (!handle) {
    ab1c:	b32e      	cbz	r6, ab6a <att_write_cmd+0x6e>
	(void)memset(&data, 0, sizeof(data));
    ab1e:	2218      	movs	r2, #24
    ab20:	2100      	movs	r1, #0
    ab22:	4668      	mov	r0, sp
    ab24:	f00f faea 	bl	1a0fc <memset>
	data.req = req;
    ab28:	2300      	movs	r3, #0
    ab2a:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    ab2e:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ab32:	2301      	movs	r3, #1
    ab34:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ab38:	4a0d      	ldr	r2, [pc, #52]	; (ab70 <att_write_cmd+0x74>)
	data.conn = conn;
    ab3a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ab3c:	466b      	mov	r3, sp
    ab3e:	4631      	mov	r1, r6
    ab40:	4630      	mov	r0, r6
	data.value = value;
    ab42:	9703      	str	r7, [sp, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    ab44:	f88d 5010 	strb.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ab48:	f000 fee8 	bl	b91c <bt_gatt_foreach_attr>
	if (data.err) {
    ab4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ab50:	b933      	cbnz	r3, ab60 <att_write_cmd+0x64>
	if (data.buf) {
    ab52:	9a01      	ldr	r2, [sp, #4]
    ab54:	b122      	cbz	r2, ab60 <att_write_cmd+0x64>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    ab56:	4b07      	ldr	r3, [pc, #28]	; (ab74 <att_write_cmd+0x78>)
    ab58:	2104      	movs	r1, #4
    ab5a:	4620      	mov	r0, r4
    ab5c:	f00f ff45 	bl	1a9ea <bt_l2cap_send_cb>
    ab60:	2000      	movs	r0, #0
}
    ab62:	b007      	add	sp, #28
    ab64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ab66:	2012      	movs	r0, #18
    ab68:	e7fb      	b.n	ab62 <att_write_cmd+0x66>
		return BT_ATT_ERR_INVALID_HANDLE;
    ab6a:	2001      	movs	r0, #1
    ab6c:	e7f9      	b.n	ab62 <att_write_cmd+0x66>
    ab6e:	bf00      	nop
    ab70:	0001aef3 	.word	0x0001aef3
    ab74:	0001ae97 	.word	0x0001ae97

0000ab78 <att_mtu_req>:
	mtu_client = sys_le16_to_cpu(req->mtu);
    ab78:	688b      	ldr	r3, [r1, #8]
{
    ab7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    ab7e:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    ab80:	2d16      	cmp	r5, #22
{
    ab82:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    ab84:	d91f      	bls.n	abc6 <att_mtu_req+0x4e>
	struct bt_conn *conn = att->chan.chan.conn;
    ab86:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    ab8a:	2202      	movs	r2, #2
    ab8c:	2103      	movs	r1, #3
    ab8e:	4640      	mov	r0, r8
    ab90:	f010 faab 	bl	1b0ea <bt_att_create_pdu>
	if (!pdu) {
    ab94:	4607      	mov	r7, r0
    ab96:	b1c0      	cbz	r0, abca <att_mtu_req+0x52>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    ab98:	2102      	movs	r1, #2
    ab9a:	3008      	adds	r0, #8
    ab9c:	f014 faae 	bl	1f0fc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    aba0:	2400      	movs	r4, #0
    aba2:	2345      	movs	r3, #69	; 0x45
    aba4:	7003      	strb	r3, [r0, #0]
    aba6:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    aba8:	4b09      	ldr	r3, [pc, #36]	; (abd0 <att_mtu_req+0x58>)
    abaa:	4640      	mov	r0, r8
    abac:	463a      	mov	r2, r7
    abae:	2104      	movs	r1, #4
    abb0:	f00f ff1b 	bl	1a9ea <bt_l2cap_send_cb>
	att->chan.rx.mtu = MIN(mtu_client, mtu_server);
    abb4:	2d45      	cmp	r5, #69	; 0x45
    abb6:	bf28      	it	cs
    abb8:	2545      	movcs	r5, #69	; 0x45
    abba:	8675      	strh	r5, [r6, #50]	; 0x32
	att->chan.tx.mtu = att->chan.rx.mtu;
    abbc:	f8a6 5052 	strh.w	r5, [r6, #82]	; 0x52
	return 0;
    abc0:	4620      	mov	r0, r4
}
    abc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    abc6:	2004      	movs	r0, #4
    abc8:	e7fb      	b.n	abc2 <att_mtu_req+0x4a>
		return BT_ATT_ERR_UNLIKELY;
    abca:	200e      	movs	r0, #14
    abcc:	e7f9      	b.n	abc2 <att_mtu_req+0x4a>
    abce:	bf00      	nop
    abd0:	0001ae97 	.word	0x0001ae97

0000abd4 <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    abd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abd8:	4688      	mov	r8, r1
    abda:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    abdc:	2101      	movs	r1, #1
    abde:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    abe0:	4605      	mov	r5, r0
    abe2:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    abe4:	f010 fa81 	bl	1b0ea <bt_att_create_pdu>
	if (!buf) {
    abe8:	4604      	mov	r4, r0
    abea:	b180      	cbz	r0, ac0e <send_err_rsp.part.12+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    abec:	2104      	movs	r1, #4
    abee:	3008      	adds	r0, #8
    abf0:	f014 fa84 	bl	1f0fc <net_buf_simple_add>
	rsp->request = req;
    abf4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    abf8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    abfa:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    abfe:	4622      	mov	r2, r4
    ac00:	4628      	mov	r0, r5
    ac02:	4b04      	ldr	r3, [pc, #16]	; (ac14 <send_err_rsp.part.12+0x40>)
    ac04:	2104      	movs	r1, #4
}
    ac06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    ac0a:	f00f beee 	b.w	1a9ea <bt_l2cap_send_cb>
}
    ac0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac12:	bf00      	nop
    ac14:	0001ae97 	.word	0x0001ae97

0000ac18 <bt_att_recv>:
{
    ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    ac1a:	898b      	ldrh	r3, [r1, #12]
{
    ac1c:	4604      	mov	r4, r0
    ac1e:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    ac20:	b3a3      	cbz	r3, ac8c <bt_att_recv+0x74>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ac22:	2101      	movs	r1, #1
    ac24:	f106 0008 	add.w	r0, r6, #8
    ac28:	f014 faeb 	bl	1f202 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    ac2c:	4a2d      	ldr	r2, [pc, #180]	; (ace4 <bt_att_recv+0xcc>)
    ac2e:	7805      	ldrb	r5, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ac30:	4607      	mov	r7, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ac32:	2300      	movs	r3, #0
    ac34:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    ac36:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    ac3a:	42a8      	cmp	r0, r5
    ac3c:	d118      	bne.n	ac70 <bt_att_recv+0x58>
		if (handler->type == ATT_REQUEST &&
    ac3e:	00db      	lsls	r3, r3, #3
    ac40:	441a      	add	r2, r3
    ac42:	7895      	ldrb	r5, [r2, #2]
    ac44:	2d01      	cmp	r5, #1
    ac46:	d023      	beq.n	ac90 <bt_att_recv+0x78>
		} else if (handler->type == ATT_INDICATION &&
    ac48:	2d05      	cmp	r5, #5
    ac4a:	d133      	bne.n	acb4 <bt_att_recv+0x9c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ac4c:	f3bf 8f5b 	dmb	ish
    ac50:	f104 028c 	add.w	r2, r4, #140	; 0x8c
    ac54:	e852 0f00 	ldrex	r0, [r2]
    ac58:	f040 0c02 	orr.w	ip, r0, #2
    ac5c:	e842 ce00 	strex	lr, ip, [r2]
    ac60:	f1be 0f00 	cmp.w	lr, #0
    ac64:	d1f6      	bne.n	ac54 <bt_att_recv+0x3c>
    ac66:	f3bf 8f5b 	dmb	ish
    ac6a:	f010 0f02 	tst.w	r0, #2
    ac6e:	e020      	b.n	acb2 <bt_att_recv+0x9a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ac70:	3301      	adds	r3, #1
    ac72:	2b0d      	cmp	r3, #13
    ac74:	d1df      	bne.n	ac36 <bt_att_recv+0x1e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    ac76:	4628      	mov	r0, r5
    ac78:	f7ff feaa 	bl	a9d0 <att_op_get_type>
    ac7c:	b130      	cbz	r0, ac8c <bt_att_recv+0x74>
	if (!req) {
    ac7e:	b12d      	cbz	r5, ac8c <bt_att_recv+0x74>
    ac80:	2306      	movs	r3, #6
    ac82:	2200      	movs	r2, #0
    ac84:	4629      	mov	r1, r5
    ac86:	6820      	ldr	r0, [r4, #0]
    ac88:	f7ff ffa4 	bl	abd4 <send_err_rsp.part.12>
}
    ac8c:	2000      	movs	r0, #0
    ac8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac90:	f104 028c 	add.w	r2, r4, #140	; 0x8c
    ac94:	f3bf 8f5b 	dmb	ish
    ac98:	e852 0f00 	ldrex	r0, [r2]
    ac9c:	f040 0c01 	orr.w	ip, r0, #1
    aca0:	e842 ce00 	strex	lr, ip, [r2]
    aca4:	f1be 0f00 	cmp.w	lr, #0
    aca8:	d1f6      	bne.n	ac98 <bt_att_recv+0x80>
    acaa:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    acae:	f010 0f01 	tst.w	r0, #1
    acb2:	d1eb      	bne.n	ac8c <bt_att_recv+0x74>
	if (buf->len < handler->expect_len) {
    acb4:	440b      	add	r3, r1
    acb6:	89b1      	ldrh	r1, [r6, #12]
    acb8:	785a      	ldrb	r2, [r3, #1]
    acba:	4291      	cmp	r1, r2
    acbc:	d30d      	bcc.n	acda <bt_att_recv+0xc2>
		err = handler->func(att, buf);
    acbe:	685b      	ldr	r3, [r3, #4]
    acc0:	4631      	mov	r1, r6
    acc2:	4620      	mov	r0, r4
    acc4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    acc6:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
    acc8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    acca:	d1df      	bne.n	ac8c <bt_att_recv+0x74>
    accc:	2800      	cmp	r0, #0
    acce:	d0dd      	beq.n	ac8c <bt_att_recv+0x74>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    acd0:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    acd2:	2900      	cmp	r1, #0
    acd4:	d0da      	beq.n	ac8c <bt_att_recv+0x74>
    acd6:	2200      	movs	r2, #0
    acd8:	e7d5      	b.n	ac86 <bt_att_recv+0x6e>
	if (handler->type == ATT_REQUEST && err) {
    acda:	2d01      	cmp	r5, #1
    acdc:	d1d6      	bne.n	ac8c <bt_att_recv+0x74>
		err = BT_ATT_ERR_INVALID_PDU;
    acde:	2304      	movs	r3, #4
    ace0:	e7f6      	b.n	acd0 <bt_att_recv+0xb8>
    ace2:	bf00      	nop
    ace4:	000206c4 	.word	0x000206c4

0000ace8 <att_read_group_req>:
{
    ace8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    acec:	898b      	ldrh	r3, [r1, #12]
    acee:	2b06      	cmp	r3, #6
{
    acf0:	b08d      	sub	sp, #52	; 0x34
    acf2:	4681      	mov	r9, r0
    acf4:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    acf6:	d001      	beq.n	acfc <att_read_group_req+0x14>
    acf8:	2b14      	cmp	r3, #20
    acfa:	d16d      	bne.n	add8 <att_read_group_req+0xf0>
	req = net_buf_pull_mem(buf, sizeof(*req));
    acfc:	2104      	movs	r1, #4
    acfe:	f104 0008 	add.w	r0, r4, #8
	struct bt_conn *conn = att->chan.chan.conn;
    ad02:	f8d9 8000 	ldr.w	r8, [r9]
	req = net_buf_pull_mem(buf, sizeof(*req));
    ad06:	f014 fa7c 	bl	1f202 <net_buf_simple_pull_mem>
	if (!uuid_create(&u.uuid, buf)) {
    ad0a:	af02      	add	r7, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    ad0c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    ad0e:	8846      	ldrh	r6, [r0, #2]
	if (!uuid_create(&u.uuid, buf)) {
    ad10:	4621      	mov	r1, r4
    ad12:	4638      	mov	r0, r7
    ad14:	f010 f879 	bl	1ae0a <uuid_create>
    ad18:	2800      	cmp	r0, #0
    ad1a:	d05f      	beq.n	addc <att_read_group_req+0xf4>
	if (!start || !end) {
    ad1c:	2d00      	cmp	r5, #0
    ad1e:	d036      	beq.n	ad8e <att_read_group_req+0xa6>
    ad20:	2400      	movs	r4, #0
    ad22:	b39e      	cbz	r6, ad8c <att_read_group_req+0xa4>
	if (start > end) {
    ad24:	42b5      	cmp	r5, r6
    ad26:	d832      	bhi.n	ad8e <att_read_group_req+0xa6>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    ad28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ad2c:	4669      	mov	r1, sp
    ad2e:	4638      	mov	r0, r7
    ad30:	f88d 4000 	strb.w	r4, [sp]
    ad34:	f8ad 3002 	strh.w	r3, [sp, #2]
    ad38:	f00f fa79 	bl	1a22e <bt_uuid_cmp>
    ad3c:	bb90      	cbnz	r0, ada4 <att_read_group_req+0xbc>
	struct bt_conn *conn = att->chan.chan.conn;
    ad3e:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    ad42:	2214      	movs	r2, #20
    ad44:	2100      	movs	r1, #0
    ad46:	a807      	add	r0, sp, #28
    ad48:	f00f f9d8 	bl	1a0fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    ad4c:	2201      	movs	r2, #1
    ad4e:	2111      	movs	r1, #17
    ad50:	4640      	mov	r0, r8
    ad52:	f010 f9ca 	bl	1b0ea <bt_att_create_pdu>
    ad56:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    ad58:	2800      	cmp	r0, #0
    ad5a:	d03f      	beq.n	addc <att_read_group_req+0xf4>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ad5c:	2101      	movs	r1, #1
    ad5e:	3008      	adds	r0, #8
	data.uuid = uuid;
    ad60:	e9cd 9707 	strd	r9, r7, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ad64:	f014 f9ca 	bl	1f0fc <net_buf_simple_add>
	data.rsp->len = 0U;
    ad68:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ad6a:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    ad6c:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    ad6e:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    ad70:	4a1b      	ldr	r2, [pc, #108]	; (ade0 <att_read_group_req+0xf8>)
	data.group = NULL;
    ad72:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    ad74:	4631      	mov	r1, r6
    ad76:	4628      	mov	r0, r5
    ad78:	f000 fdd0 	bl	b91c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    ad7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad7e:	781c      	ldrb	r4, [r3, #0]
    ad80:	bb1c      	cbnz	r4, adca <att_read_group_req+0xe2>
		net_buf_unref(data.buf);
    ad82:	9809      	ldr	r0, [sp, #36]	; 0x24
    ad84:	f00a fdbe 	bl	15904 <net_buf_unref>
	if (!req) {
    ad88:	230a      	movs	r3, #10
    ad8a:	e018      	b.n	adbe <att_read_group_req+0xd6>
			*err = 0U;
    ad8c:	4635      	mov	r5, r6
	if (!req) {
    ad8e:	2301      	movs	r3, #1
    ad90:	462a      	mov	r2, r5
    ad92:	2110      	movs	r1, #16
    ad94:	4640      	mov	r0, r8
    ad96:	f7ff ff1d 	bl	abd4 <send_err_rsp.part.12>
		return 0;
    ad9a:	2400      	movs	r4, #0
}
    ad9c:	4620      	mov	r0, r4
    ad9e:	b00d      	add	sp, #52	; 0x34
    ada0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    ada4:	f642 0301 	movw	r3, #10241	; 0x2801
    ada8:	a901      	add	r1, sp, #4
    adaa:	4638      	mov	r0, r7
    adac:	f88d 4004 	strb.w	r4, [sp, #4]
    adb0:	f8ad 3006 	strh.w	r3, [sp, #6]
    adb4:	f00f fa3b 	bl	1a22e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    adb8:	2800      	cmp	r0, #0
    adba:	d0c0      	beq.n	ad3e <att_read_group_req+0x56>
	if (!req) {
    adbc:	2310      	movs	r3, #16
    adbe:	462a      	mov	r2, r5
    adc0:	2110      	movs	r1, #16
    adc2:	4640      	mov	r0, r8
    adc4:	f7ff ff06 	bl	abd4 <send_err_rsp.part.12>
		return 0;
    adc8:	e7e8      	b.n	ad9c <att_read_group_req+0xb4>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    adca:	4b06      	ldr	r3, [pc, #24]	; (ade4 <att_read_group_req+0xfc>)
    adcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    adce:	2104      	movs	r1, #4
    add0:	4640      	mov	r0, r8
    add2:	f00f fe0a 	bl	1a9ea <bt_l2cap_send_cb>
	return 0;
    add6:	e7e0      	b.n	ad9a <att_read_group_req+0xb2>
		return BT_ATT_ERR_INVALID_PDU;
    add8:	2404      	movs	r4, #4
    adda:	e7df      	b.n	ad9c <att_read_group_req+0xb4>
		return BT_ATT_ERR_UNLIKELY;
    addc:	240e      	movs	r4, #14
    adde:	e7dd      	b.n	ad9c <att_read_group_req+0xb4>
    ade0:	0001ab07 	.word	0x0001ab07
    ade4:	0001ae97 	.word	0x0001ae97

0000ade8 <att_read_mult_req>:
{
    ade8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    adec:	6804      	ldr	r4, [r0, #0]
{
    adee:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    adf0:	2214      	movs	r2, #20
{
    adf2:	4606      	mov	r6, r0
    adf4:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    adf6:	a801      	add	r0, sp, #4
    adf8:	2100      	movs	r1, #0
    adfa:	f00f f97f 	bl	1a0fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    adfe:	2200      	movs	r2, #0
    ae00:	210f      	movs	r1, #15
    ae02:	4620      	mov	r0, r4
    ae04:	f010 f971 	bl	1b0ea <bt_att_create_pdu>
    ae08:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    ae0a:	b368      	cbz	r0, ae68 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ae0c:	f8df 9060 	ldr.w	r9, [pc, #96]	; ae70 <att_read_mult_req+0x88>
	data.att = att;
    ae10:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    ae12:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    ae16:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    ae1a:	89ab      	ldrh	r3, [r5, #12]
    ae1c:	2b01      	cmp	r3, #1
    ae1e:	d806      	bhi.n	ae2e <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    ae20:	4b12      	ldr	r3, [pc, #72]	; (ae6c <att_read_mult_req+0x84>)
    ae22:	9a03      	ldr	r2, [sp, #12]
    ae24:	2104      	movs	r1, #4
    ae26:	4620      	mov	r0, r4
    ae28:	f00f fddf 	bl	1a9ea <bt_l2cap_send_cb>
    ae2c:	e018      	b.n	ae60 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    ae2e:	4638      	mov	r0, r7
    ae30:	f014 f9f7 	bl	1f222 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ae34:	ab01      	add	r3, sp, #4
    ae36:	464a      	mov	r2, r9
    ae38:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    ae3a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    ae3c:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ae40:	f000 fd6c 	bl	b91c <bt_gatt_foreach_attr>
		if (data.err) {
    ae44:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae48:	2b00      	cmp	r3, #0
    ae4a:	d0e6      	beq.n	ae1a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    ae4c:	9803      	ldr	r0, [sp, #12]
    ae4e:	f00a fd59 	bl	15904 <net_buf_unref>
	if (!req) {
    ae52:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae56:	4632      	mov	r2, r6
    ae58:	210e      	movs	r1, #14
    ae5a:	4620      	mov	r0, r4
    ae5c:	f7ff feba 	bl	abd4 <send_err_rsp.part.12>
	return 0;
    ae60:	2000      	movs	r0, #0
}
    ae62:	b007      	add	sp, #28
    ae64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    ae68:	200e      	movs	r0, #14
    ae6a:	e7fa      	b.n	ae62 <att_read_mult_req+0x7a>
    ae6c:	0001ae97 	.word	0x0001ae97
    ae70:	0001af53 	.word	0x0001af53

0000ae74 <att_read_rsp>:
{
    ae74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    ae78:	6805      	ldr	r5, [r0, #0]
{
    ae7a:	b086      	sub	sp, #24
    ae7c:	4604      	mov	r4, r0
    ae7e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    ae80:	4628      	mov	r0, r5
    ae82:	2101      	movs	r1, #1
{
    ae84:	4690      	mov	r8, r2
    ae86:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    ae88:	f010 fc23 	bl	1b6d2 <bt_gatt_change_aware>
    ae8c:	b398      	cbz	r0, aef6 <att_read_rsp+0x82>
	if (!handle) {
    ae8e:	b3a6      	cbz	r6, aefa <att_read_rsp+0x86>
	(void)memset(&data, 0, sizeof(data));
    ae90:	2214      	movs	r2, #20
    ae92:	2100      	movs	r1, #0
    ae94:	a801      	add	r0, sp, #4
    ae96:	f00f f931 	bl	1a0fc <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    ae9a:	2200      	movs	r2, #0
    ae9c:	4641      	mov	r1, r8
    ae9e:	4628      	mov	r0, r5
    aea0:	f010 f923 	bl	1b0ea <bt_att_create_pdu>
    aea4:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    aea6:	b350      	cbz	r0, aefe <att_read_rsp+0x8a>
	data.offset = offset;
    aea8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    aeac:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    aeb0:	2301      	movs	r3, #1
    aeb2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    aeb6:	4a13      	ldr	r2, [pc, #76]	; (af04 <att_read_rsp+0x90>)
	data.att = att;
    aeb8:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    aeba:	ab01      	add	r3, sp, #4
    aebc:	4631      	mov	r1, r6
    aebe:	4630      	mov	r0, r6
    aec0:	f000 fd2c 	bl	b91c <bt_gatt_foreach_attr>
	if (data.err) {
    aec4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    aec8:	b174      	cbz	r4, aee8 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    aeca:	9803      	ldr	r0, [sp, #12]
    aecc:	f00a fd1a 	bl	15904 <net_buf_unref>
	if (!req) {
    aed0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    aed4:	4632      	mov	r2, r6
    aed6:	4639      	mov	r1, r7
    aed8:	4628      	mov	r0, r5
    aeda:	f7ff fe7b 	bl	abd4 <send_err_rsp.part.12>
		return 0;
    aede:	2400      	movs	r4, #0
}
    aee0:	4620      	mov	r0, r4
    aee2:	b006      	add	sp, #24
    aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    aee8:	4b07      	ldr	r3, [pc, #28]	; (af08 <att_read_rsp+0x94>)
    aeea:	9a03      	ldr	r2, [sp, #12]
    aeec:	2104      	movs	r1, #4
    aeee:	4628      	mov	r0, r5
    aef0:	f00f fd7b 	bl	1a9ea <bt_l2cap_send_cb>
	return 0;
    aef4:	e7f4      	b.n	aee0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    aef6:	2412      	movs	r4, #18
    aef8:	e7f2      	b.n	aee0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    aefa:	2401      	movs	r4, #1
    aefc:	e7f0      	b.n	aee0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    aefe:	240e      	movs	r4, #14
    af00:	e7ee      	b.n	aee0 <att_read_rsp+0x6c>
    af02:	bf00      	nop
    af04:	0001af53 	.word	0x0001af53
    af08:	0001ae97 	.word	0x0001ae97

0000af0c <att_read_type_req>:
{
    af0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    af10:	898b      	ldrh	r3, [r1, #12]
    af12:	2b06      	cmp	r3, #6
{
    af14:	b08d      	sub	sp, #52	; 0x34
    af16:	4607      	mov	r7, r0
    af18:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    af1a:	d001      	beq.n	af20 <att_read_type_req+0x14>
    af1c:	2b14      	cmp	r3, #20
    af1e:	d154      	bne.n	afca <att_read_type_req+0xbe>
	req = net_buf_pull_mem(buf, sizeof(*req));
    af20:	2104      	movs	r1, #4
    af22:	f106 0008 	add.w	r0, r6, #8
	struct bt_conn *conn = att->chan.chan.conn;
    af26:	f8d7 9000 	ldr.w	r9, [r7]
	req = net_buf_pull_mem(buf, sizeof(*req));
    af2a:	f014 f96a 	bl	1f202 <net_buf_simple_pull_mem>
	if (!uuid_create(&u.uuid, buf)) {
    af2e:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    af32:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    af34:	8844      	ldrh	r4, [r0, #2]
	if (!uuid_create(&u.uuid, buf)) {
    af36:	4631      	mov	r1, r6
    af38:	4640      	mov	r0, r8
    af3a:	f00f ff66 	bl	1ae0a <uuid_create>
    af3e:	b188      	cbz	r0, af64 <att_read_type_req+0x58>
	if (!start || !end) {
    af40:	b19d      	cbz	r5, af6a <att_read_type_req+0x5e>
    af42:	b18c      	cbz	r4, af68 <att_read_type_req+0x5c>
	if (start > end) {
    af44:	42ac      	cmp	r4, r5
    af46:	d310      	bcc.n	af6a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    af48:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    af4a:	683e      	ldr	r6, [r7, #0]
	(void)memset(&data, 0, sizeof(data));
    af4c:	2100      	movs	r1, #0
    af4e:	eb0d 0002 	add.w	r0, sp, r2
    af52:	f00f f8d3 	bl	1a0fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    af56:	2201      	movs	r2, #1
    af58:	2109      	movs	r1, #9
    af5a:	4630      	mov	r0, r6
    af5c:	f010 f8c5 	bl	1b0ea <bt_att_create_pdu>
    af60:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    af62:	b968      	cbnz	r0, af80 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    af64:	240e      	movs	r4, #14
    af66:	e007      	b.n	af78 <att_read_type_req+0x6c>
			*err = 0U;
    af68:	4625      	mov	r5, r4
	if (!req) {
    af6a:	2301      	movs	r3, #1
    af6c:	462a      	mov	r2, r5
    af6e:	2108      	movs	r1, #8
    af70:	4648      	mov	r0, r9
    af72:	f7ff fe2f 	bl	abd4 <send_err_rsp.part.12>
		return 0;
    af76:	2400      	movs	r4, #0
}
    af78:	4620      	mov	r0, r4
    af7a:	b00d      	add	sp, #52	; 0x34
    af7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    af80:	2101      	movs	r1, #1
    af82:	3008      	adds	r0, #8
	data.uuid = uuid;
    af84:	e9cd 7806 	strd	r7, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    af88:	f014 f8b8 	bl	1f0fc <net_buf_simple_add>
	data.rsp->len = 0U;
    af8c:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    af8e:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    af90:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    af92:	4621      	mov	r1, r4
	data.rsp->len = 0U;
    af94:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    af96:	4a0e      	ldr	r2, [pc, #56]	; (afd0 <att_read_type_req+0xc4>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    af98:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    af9c:	4628      	mov	r0, r5
    af9e:	ab06      	add	r3, sp, #24
    afa0:	f000 fcbc 	bl	b91c <bt_gatt_foreach_attr>
	if (data.err) {
    afa4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    afa8:	b144      	cbz	r4, afbc <att_read_type_req+0xb0>
		net_buf_unref(data.buf);
    afaa:	9808      	ldr	r0, [sp, #32]
    afac:	f00a fcaa 	bl	15904 <net_buf_unref>
	if (!req) {
    afb0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    afb4:	462a      	mov	r2, r5
    afb6:	2108      	movs	r1, #8
    afb8:	4630      	mov	r0, r6
    afba:	e7da      	b.n	af72 <att_read_type_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    afbc:	4b05      	ldr	r3, [pc, #20]	; (afd4 <att_read_type_req+0xc8>)
    afbe:	9a08      	ldr	r2, [sp, #32]
    afc0:	2104      	movs	r1, #4
    afc2:	4630      	mov	r0, r6
    afc4:	f00f fd11 	bl	1a9ea <bt_l2cap_send_cb>
	return 0;
    afc8:	e7d6      	b.n	af78 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    afca:	2404      	movs	r4, #4
    afcc:	e7d4      	b.n	af78 <att_read_type_req+0x6c>
    afce:	bf00      	nop
    afd0:	0001ad53 	.word	0x0001ad53
    afd4:	0001ae97 	.word	0x0001ae97

0000afd8 <att_find_type_req>:
{
    afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afdc:	4688      	mov	r8, r1
	struct bt_conn *conn = att->chan.chan.conn;
    afde:	f8d0 b000 	ldr.w	fp, [r0]
{
    afe2:	b089      	sub	sp, #36	; 0x24
    afe4:	4681      	mov	r9, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    afe6:	2106      	movs	r1, #6
    afe8:	f108 0008 	add.w	r0, r8, #8
    afec:	f014 f909 	bl	1f202 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    aff0:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    aff2:	b1fd      	cbz	r5, b034 <att_find_type_req+0x5c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    aff4:	8847      	ldrh	r7, [r0, #2]
	if (!start || !end) {
    aff6:	b1e7      	cbz	r7, b032 <att_find_type_req+0x5a>
	if (start > end) {
    aff8:	42af      	cmp	r7, r5
    affa:	d31b      	bcc.n	b034 <att_find_type_req+0x5c>
	type = sys_le16_to_cpu(req->type);
    affc:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    affe:	f8ad 3006 	strh.w	r3, [sp, #6]
    b002:	2400      	movs	r4, #0
    b004:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b008:	a902      	add	r1, sp, #8
    b00a:	a801      	add	r0, sp, #4
	value = buf->data;
    b00c:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    b010:	f88d 4004 	strb.w	r4, [sp, #4]
    b014:	f88d 4008 	strb.w	r4, [sp, #8]
    b018:	f8ad 300a 	strh.w	r3, [sp, #10]
    b01c:	f00f f907 	bl	1a22e <bt_uuid_cmp>
    b020:	4606      	mov	r6, r0
    b022:	b190      	cbz	r0, b04a <att_find_type_req+0x72>
	if (!req) {
    b024:	230a      	movs	r3, #10
    b026:	462a      	mov	r2, r5
    b028:	2106      	movs	r1, #6
    b02a:	4658      	mov	r0, fp
    b02c:	f7ff fdd2 	bl	abd4 <send_err_rsp.part.12>
		return 0;
    b030:	e007      	b.n	b042 <att_find_type_req+0x6a>
			*err = 0U;
    b032:	463d      	mov	r5, r7
	if (!req) {
    b034:	2301      	movs	r3, #1
    b036:	462a      	mov	r2, r5
    b038:	2106      	movs	r1, #6
    b03a:	4658      	mov	r0, fp
    b03c:	f7ff fdca 	bl	abd4 <send_err_rsp.part.12>
		return 0;
    b040:	2400      	movs	r4, #0
}
    b042:	4620      	mov	r0, r4
    b044:	b009      	add	sp, #36	; 0x24
    b046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return att_find_type_rsp(att, start_handle, end_handle, value,
    b04a:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    b04e:	f8d9 8000 	ldr.w	r8, [r9]
	(void)memset(&data, 0, sizeof(data));
    b052:	4601      	mov	r1, r0
    b054:	2214      	movs	r2, #20
    b056:	a803      	add	r0, sp, #12
    b058:	f00f f850 	bl	1a0fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    b05c:	4632      	mov	r2, r6
    b05e:	2107      	movs	r1, #7
    b060:	4640      	mov	r0, r8
    b062:	f010 f842 	bl	1b0ea <bt_att_create_pdu>
    b066:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    b068:	b308      	cbz	r0, b0ae <att_find_type_req+0xd6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b06a:	230a      	movs	r3, #10
    b06c:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b070:	4a10      	ldr	r2, [pc, #64]	; (b0b4 <att_find_type_req+0xdc>)
	data.value_len = value_len;
    b072:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b076:	ab03      	add	r3, sp, #12
    b078:	4639      	mov	r1, r7
    b07a:	4628      	mov	r0, r5
	data.att = att;
    b07c:	f8cd 900c 	str.w	r9, [sp, #12]
	data.value = value;
    b080:	e9cd 6a05 	strd	r6, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b084:	f000 fc4a 	bl	b91c <bt_gatt_foreach_attr>
	if (data.err) {
    b088:	f89d 401d 	ldrb.w	r4, [sp, #29]
    b08c:	b144      	cbz	r4, b0a0 <att_find_type_req+0xc8>
		net_buf_unref(data.buf);
    b08e:	9804      	ldr	r0, [sp, #16]
    b090:	f00a fc38 	bl	15904 <net_buf_unref>
	if (!req) {
    b094:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b098:	462a      	mov	r2, r5
    b09a:	2106      	movs	r1, #6
    b09c:	4640      	mov	r0, r8
    b09e:	e7cd      	b.n	b03c <att_find_type_req+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    b0a0:	4b05      	ldr	r3, [pc, #20]	; (b0b8 <att_find_type_req+0xe0>)
    b0a2:	9a04      	ldr	r2, [sp, #16]
    b0a4:	2104      	movs	r1, #4
    b0a6:	4640      	mov	r0, r8
    b0a8:	f00f fc9f 	bl	1a9ea <bt_l2cap_send_cb>
	return 0;
    b0ac:	e7c9      	b.n	b042 <att_find_type_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    b0ae:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    b0b0:	e7c7      	b.n	b042 <att_find_type_req+0x6a>
    b0b2:	bf00      	nop
    b0b4:	0001ac6f 	.word	0x0001ac6f
    b0b8:	0001ae97 	.word	0x0001ae97

0000b0bc <att_find_info_req>:
{
    b0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    b0be:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    b0c0:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    b0c2:	881d      	ldrh	r5, [r3, #0]
{
    b0c4:	b085      	sub	sp, #20
    b0c6:	4607      	mov	r7, r0
	if (!start || !end) {
    b0c8:	b195      	cbz	r5, b0f0 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    b0ca:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    b0cc:	b17c      	cbz	r4, b0ee <att_find_info_req+0x32>
	if (start > end) {
    b0ce:	42a5      	cmp	r5, r4
    b0d0:	d80e      	bhi.n	b0f0 <att_find_info_req+0x34>
	(void)memset(&data, 0, sizeof(data));
    b0d2:	2210      	movs	r2, #16
    b0d4:	2100      	movs	r1, #0
    b0d6:	4668      	mov	r0, sp
    b0d8:	f00f f810 	bl	1a0fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    b0dc:	2200      	movs	r2, #0
    b0de:	2105      	movs	r1, #5
    b0e0:	4630      	mov	r0, r6
    b0e2:	f010 f802 	bl	1b0ea <bt_att_create_pdu>
    b0e6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    b0e8:	b958      	cbnz	r0, b102 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    b0ea:	200e      	movs	r0, #14
	return att_find_info_rsp(att, start_handle, end_handle);
    b0ec:	e007      	b.n	b0fe <att_find_info_req+0x42>
			*err = 0U;
    b0ee:	4625      	mov	r5, r4
	if (!req) {
    b0f0:	2301      	movs	r3, #1
    b0f2:	462a      	mov	r2, r5
    b0f4:	2104      	movs	r1, #4
    b0f6:	4630      	mov	r0, r6
    b0f8:	f7ff fd6c 	bl	abd4 <send_err_rsp.part.12>
	return 0;
    b0fc:	2000      	movs	r0, #0
}
    b0fe:	b005      	add	sp, #20
    b100:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    b102:	4621      	mov	r1, r4
    b104:	466b      	mov	r3, sp
    b106:	4a09      	ldr	r2, [pc, #36]	; (b12c <att_find_info_req+0x70>)
	data.att = att;
    b108:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    b10a:	4628      	mov	r0, r5
    b10c:	f000 fc06 	bl	b91c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    b110:	9c02      	ldr	r4, [sp, #8]
    b112:	b924      	cbnz	r4, b11e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    b114:	9801      	ldr	r0, [sp, #4]
    b116:	f00a fbf5 	bl	15904 <net_buf_unref>
	if (!req) {
    b11a:	230a      	movs	r3, #10
    b11c:	e7e9      	b.n	b0f2 <att_find_info_req+0x36>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    b11e:	4b04      	ldr	r3, [pc, #16]	; (b130 <att_find_info_req+0x74>)
    b120:	9a01      	ldr	r2, [sp, #4]
    b122:	2104      	movs	r1, #4
    b124:	4630      	mov	r0, r6
    b126:	f00f fc60 	bl	1a9ea <bt_l2cap_send_cb>
    b12a:	e7e7      	b.n	b0fc <att_find_info_req+0x40>
    b12c:	0001abd5 	.word	0x0001abd5
    b130:	0001ae97 	.word	0x0001ae97

0000b134 <att_write_req>:
{
    b134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    b138:	6805      	ldr	r5, [r0, #0]
{
    b13a:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    b13c:	f101 0008 	add.w	r0, r1, #8
{
    b140:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    b142:	f014 f86e 	bl	1f222 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    b146:	2101      	movs	r1, #1
	handle = net_buf_pull_le16(buf);
    b148:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    b14a:	4628      	mov	r0, r5
			     handle, 0, buf->data, buf->len);
    b14c:	f8d4 9008 	ldr.w	r9, [r4, #8]
    b150:	89a4      	ldrh	r4, [r4, #12]
	if (!bt_gatt_change_aware(conn, req ? true : false)) {
    b152:	f010 fabe 	bl	1b6d2 <bt_gatt_change_aware>
    b156:	2800      	cmp	r0, #0
    b158:	d03f      	beq.n	b1da <att_write_req+0xa6>
	if (!handle) {
    b15a:	2e00      	cmp	r6, #0
    b15c:	d03f      	beq.n	b1de <att_write_req+0xaa>
	(void)memset(&data, 0, sizeof(data));
    b15e:	2218      	movs	r2, #24
    b160:	2100      	movs	r1, #0
    b162:	4668      	mov	r0, sp
    b164:	f00e ffca 	bl	1a0fc <memset>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    b168:	2200      	movs	r2, #0
    b16a:	2113      	movs	r1, #19
    b16c:	4628      	mov	r0, r5
    b16e:	f00f ffbc 	bl	1b0ea <bt_att_create_pdu>
    b172:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    b174:	b378      	cbz	r0, b1d6 <att_write_req+0xa2>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b176:	2301      	movs	r3, #1
    b178:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    b17c:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    b180:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b182:	466b      	mov	r3, sp
    b184:	4a17      	ldr	r2, [pc, #92]	; (b1e4 <att_write_req+0xb0>)
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    b186:	f88d 4010 	strb.w	r4, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b18a:	4631      	mov	r1, r6
    b18c:	4630      	mov	r0, r6
	data.conn = conn;
    b18e:	9500      	str	r5, [sp, #0]
	data.req = req;
    b190:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    b194:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    b198:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b19c:	f000 fbbe 	bl	b91c <bt_gatt_foreach_attr>
	if (data.err) {
    b1a0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    b1a4:	b174      	cbz	r4, b1c4 <att_write_req+0x90>
			net_buf_unref(data.buf);
    b1a6:	9801      	ldr	r0, [sp, #4]
    b1a8:	f00a fbac 	bl	15904 <net_buf_unref>
	if (!req) {
    b1ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b1b0:	4632      	mov	r2, r6
    b1b2:	4641      	mov	r1, r8
    b1b4:	4628      	mov	r0, r5
    b1b6:	f7ff fd0d 	bl	abd4 <send_err_rsp.part.12>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    b1ba:	463c      	mov	r4, r7
}
    b1bc:	4620      	mov	r0, r4
    b1be:	b007      	add	sp, #28
    b1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    b1c4:	9a01      	ldr	r2, [sp, #4]
    b1c6:	2a00      	cmp	r2, #0
    b1c8:	d0f8      	beq.n	b1bc <att_write_req+0x88>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    b1ca:	4b07      	ldr	r3, [pc, #28]	; (b1e8 <att_write_req+0xb4>)
    b1cc:	2104      	movs	r1, #4
    b1ce:	4628      	mov	r0, r5
    b1d0:	f00f fc0b 	bl	1a9ea <bt_l2cap_send_cb>
    b1d4:	e7f2      	b.n	b1bc <att_write_req+0x88>
			return BT_ATT_ERR_UNLIKELY;
    b1d6:	240e      	movs	r4, #14
    b1d8:	e7f0      	b.n	b1bc <att_write_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b1da:	2412      	movs	r4, #18
    b1dc:	e7ee      	b.n	b1bc <att_write_req+0x88>
		return BT_ATT_ERR_INVALID_HANDLE;
    b1de:	2401      	movs	r4, #1
    b1e0:	e7ec      	b.n	b1bc <att_write_req+0x88>
    b1e2:	bf00      	nop
    b1e4:	0001aef3 	.word	0x0001aef3
    b1e8:	0001ae97 	.word	0x0001ae97

0000b1ec <bt_att_init>:

void bt_att_init(void)
{
    b1ec:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    b1ee:	4803      	ldr	r0, [pc, #12]	; (b1fc <bt_att_init+0x10>)
    b1f0:	f7ff fb68 	bl	a8c4 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    b1f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    b1f8:	f000 bbda 	b.w	b9b0 <bt_gatt_init>
    b1fc:	20008690 	.word	0x20008690

0000b200 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb)
{
    b200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b204:	460d      	mov	r5, r1
    b206:	4616      	mov	r6, r2
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    b208:	4680      	mov	r8, r0
    b20a:	2800      	cmp	r0, #0
    b20c:	d03d      	beq.n	b28a <bt_att_send+0x8a>
    b20e:	2900      	cmp	r1, #0
    b210:	d03b      	beq.n	b28a <bt_att_send+0x8a>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    b212:	f00f fe2f 	bl	1ae74 <att_chan_get>
	if (!att) {
    b216:	4607      	mov	r7, r0
    b218:	b170      	cbz	r0, b238 <bt_att_send+0x38>
		return -ENOTCONN;
	}

	/* Don't use tx_sem if caller has set it own callback */
	if (!cb) {
    b21a:	b986      	cbnz	r6, b23e <bt_att_send+0x3e>
		k_sem_take(&att->tx_sem, K_FOREVER);
    b21c:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    b220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b224:	4620      	mov	r0, r4
    b226:	f00b fe1b 	bl	16e60 <z_impl_k_sem_take>
		if (!att_is_connected(att)) {
    b22a:	4638      	mov	r0, r7
    b22c:	f00f fe06 	bl	1ae3c <att_is_connected>
    b230:	b928      	cbnz	r0, b23e <bt_att_send+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    b232:	4620      	mov	r0, r4
    b234:	f00b fdea 	bl	16e0c <z_impl_k_sem_give>
		return -ENOTCONN;
    b238:	f06f 0438 	mvn.w	r4, #56	; 0x38
    b23c:	e00d      	b.n	b25a <bt_att_send+0x5a>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b23e:	68ab      	ldr	r3, [r5, #8]
    b240:	781b      	ldrb	r3, [r3, #0]
    b242:	2bd2      	cmp	r3, #210	; 0xd2
    b244:	d10c      	bne.n	b260 <bt_att_send+0x60>
		int err;

		err = bt_smp_sign(conn, buf);
    b246:	4629      	mov	r1, r5
    b248:	4640      	mov	r0, r8
    b24a:	f010 fa8d 	bl	1b768 <bt_smp_sign>
		if (err) {
    b24e:	4604      	mov	r4, r0
    b250:	b130      	cbz	r0, b260 <bt_att_send+0x60>
    b252:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
    b256:	f00b fdd9 	bl	16e0c <z_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf));

	return 0;
}
    b25a:	4620      	mov	r0, r4
    b25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf));
    b260:	b95e      	cbnz	r6, b27a <bt_att_send+0x7a>
	switch (att_op_get_type(buf->data[0])) {
    b262:	68ab      	ldr	r3, [r5, #8]
    b264:	7818      	ldrb	r0, [r3, #0]
    b266:	f7ff fbb3 	bl	a9d0 <att_op_get_type>
    b26a:	3801      	subs	r0, #1
    b26c:	b2c0      	uxtb	r0, r0
    b26e:	2804      	cmp	r0, #4
    b270:	bf96      	itet	ls
    b272:	4b07      	ldrls	r3, [pc, #28]	; (b290 <bt_att_send+0x90>)
    b274:	4e07      	ldrhi	r6, [pc, #28]	; (b294 <bt_att_send+0x94>)
    b276:	f853 6020 	ldrls.w	r6, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb ? cb : att_cb(buf));
    b27a:	4633      	mov	r3, r6
    b27c:	462a      	mov	r2, r5
    b27e:	2104      	movs	r1, #4
    b280:	4640      	mov	r0, r8
    b282:	f00f fbb2 	bl	1a9ea <bt_l2cap_send_cb>
	return 0;
    b286:	2400      	movs	r4, #0
    b288:	e7e7      	b.n	b25a <bt_att_send+0x5a>
		return -EINVAL;
    b28a:	f06f 0415 	mvn.w	r4, #21
    b28e:	e7e4      	b.n	b25a <bt_att_send+0x5a>
    b290:	000206b0 	.word	0x000206b0
    b294:	0001ae63 	.word	0x0001ae63

0000b298 <disconnected_cb>:

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    b29c:	6882      	ldr	r2, [r0, #8]
    b29e:	4b2b      	ldr	r3, [pc, #172]	; (b34c <disconnected_cb+0xb4>)
    b2a0:	429a      	cmp	r2, r3
{
    b2a2:	b085      	sub	sp, #20
    b2a4:	4681      	mov	r9, r0
    b2a6:	460f      	mov	r7, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    b2a8:	d110      	bne.n	b2cc <disconnected_cb+0x34>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    b2aa:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    b2ac:	892b      	ldrh	r3, [r5, #8]
    b2ae:	b16b      	cbz	r3, b2cc <disconnected_cb+0x34>
	}

	/* Checking if all values are disabled */
	value_used = false;

	for (i = 0; i < ccc->cfg_len; i++) {
    b2b0:	2600      	movs	r6, #0
	value_used = false;
    b2b2:	4634      	mov	r4, r6

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b2b4:	f101 0b48 	add.w	fp, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    b2b8:	686b      	ldr	r3, [r5, #4]
    b2ba:	429e      	cmp	r6, r3
    b2bc:	d30a      	bcc.n	b2d4 <disconnected_cb+0x3c>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    b2be:	b92c      	cbnz	r4, b2cc <disconnected_cb+0x34>
		ccc->value = 0;
		if (ccc->cfg_changed) {
    b2c0:	68eb      	ldr	r3, [r5, #12]
		ccc->value = 0;
    b2c2:	812c      	strh	r4, [r5, #8]
		if (ccc->cfg_changed) {
    b2c4:	b113      	cbz	r3, b2cc <disconnected_cb+0x34>
			ccc->cfg_changed(attr, ccc->value);
    b2c6:	4621      	mov	r1, r4
    b2c8:	4648      	mov	r0, r9
    b2ca:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    b2cc:	2001      	movs	r0, #1
    b2ce:	b005      	add	sp, #20
    b2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    b2d4:	682a      	ldr	r2, [r5, #0]
    b2d6:	0133      	lsls	r3, r6, #4
    b2d8:	eb02 0a03 	add.w	sl, r2, r3
		if (!cfg->value) {
    b2dc:	f8ba 1008 	ldrh.w	r1, [sl, #8]
    b2e0:	b151      	cbz	r1, b2f8 <disconnected_cb+0x60>
		if (conn->id != cfg->id ||
    b2e2:	7a38      	ldrb	r0, [r7, #8]
    b2e4:	5cd1      	ldrb	r1, [r2, r3]
    b2e6:	4288      	cmp	r0, r1
    b2e8:	f10a 0801 	add.w	r8, sl, #1
    b2ec:	d006      	beq.n	b2fc <disconnected_cb+0x64>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    b2ee:	4641      	mov	r1, r8
    b2f0:	5cd0      	ldrb	r0, [r2, r3]
    b2f2:	f7ff f969 	bl	a5c8 <bt_conn_lookup_addr_le>
			if (tmp) {
    b2f6:	b9e0      	cbnz	r0, b332 <disconnected_cb+0x9a>
	for (i = 0; i < ccc->cfg_len; i++) {
    b2f8:	3601      	adds	r6, #1
    b2fa:	e7dd      	b.n	b2b8 <disconnected_cb+0x20>
		    bt_conn_addr_le_cmp(conn, &cfg->peer)) {
    b2fc:	4641      	mov	r1, r8
    b2fe:	4638      	mov	r0, r7
    b300:	e9cd 3200 	strd	r3, r2, [sp]
    b304:	f00f fa96 	bl	1a834 <bt_conn_addr_le_cmp>
		if (conn->id != cfg->id ||
    b308:	e9dd 3200 	ldrd	r3, r2, [sp]
    b30c:	2800      	cmp	r0, #0
    b30e:	d1ee      	bne.n	b2ee <disconnected_cb+0x56>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b310:	4659      	mov	r1, fp
    b312:	7a38      	ldrb	r0, [r7, #8]
    b314:	f00f f9e3 	bl	1a6de <bt_addr_le_is_bonded>
    b318:	b990      	cbnz	r0, b340 <disconnected_cb+0xa8>
				bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    b31a:	9002      	str	r0, [sp, #8]
    b31c:	9000      	str	r0, [sp, #0]
    b31e:	f8cd 000b 	str.w	r0, [sp, #11]
    b322:	a902      	add	r1, sp, #8
    b324:	4640      	mov	r0, r8
    b326:	f00f ff68 	bl	1b1fa <bt_addr_le_copy>
				cfg->value = 0;
    b32a:	9b00      	ldr	r3, [sp, #0]
    b32c:	f8aa 3008 	strh.w	r3, [sl, #8]
    b330:	e7e2      	b.n	b2f8 <disconnected_cb+0x60>
				if (tmp->state == BT_CONN_CONNECTED) {
    b332:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
    b334:	2b04      	cmp	r3, #4
    b336:	bf08      	it	eq
    b338:	2401      	moveq	r4, #1
				bt_conn_unref(tmp);
    b33a:	f00f fa9a 	bl	1a872 <bt_conn_unref>
    b33e:	e7db      	b.n	b2f8 <disconnected_cb+0x60>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b340:	4659      	mov	r1, fp
    b342:	4640      	mov	r0, r8
    b344:	f00f ff59 	bl	1b1fa <bt_addr_le_copy>
    b348:	e7d6      	b.n	b2f8 <disconnected_cb+0x60>
    b34a:	bf00      	nop
    b34c:	0001b41f 	.word	0x0001b41f

0000b350 <gatt_indicate>:
{
    b350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    b354:	694b      	ldr	r3, [r1, #20]
{
    b356:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    b358:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    b35a:	6818      	ldr	r0, [r3, #0]
    b35c:	2300      	movs	r3, #0
{
    b35e:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    b360:	f88d 3004 	strb.w	r3, [sp, #4]
    b364:	a901      	add	r1, sp, #4
    b366:	f642 0303 	movw	r3, #10243	; 0x2803
    b36a:	f8ad 3006 	strh.w	r3, [sp, #6]
    b36e:	f00e ff5e 	bl	1a22e <bt_uuid_cmp>
    b372:	b930      	cbnz	r0, b382 <gatt_indicate+0x32>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    b374:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    b376:	68db      	ldr	r3, [r3, #12]
    b378:	791b      	ldrb	r3, [r3, #4]
    b37a:	069b      	lsls	r3, r3, #26
    b37c:	d52d      	bpl.n	b3da <gatt_indicate+0x8a>
		value_handle += 1;
    b37e:	3501      	adds	r5, #1
    b380:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    b382:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    b384:	211d      	movs	r1, #29
    b386:	3202      	adds	r2, #2
    b388:	4648      	mov	r0, r9
    b38a:	f00f feae 	bl	1b0ea <bt_att_create_pdu>
	if (!buf) {
    b38e:	4606      	mov	r6, r0
    b390:	b330      	cbz	r0, b3e0 <gatt_indicate+0x90>
	ind = net_buf_add(buf, sizeof(*ind));
    b392:	f100 0708 	add.w	r7, r0, #8
    b396:	2102      	movs	r1, #2
    b398:	4638      	mov	r0, r7
    b39a:	f013 feaf 	bl	1f0fc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    b39e:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    b3a0:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    b3a2:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    b3a6:	4638      	mov	r0, r7
    b3a8:	f013 fea8 	bl	1f0fc <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    b3ac:	8c22      	ldrh	r2, [r4, #32]
    b3ae:	69e1      	ldr	r1, [r4, #28]
    b3b0:	4640      	mov	r0, r8
    b3b2:	f00e fe79 	bl	1a0a8 <memcpy>
		req->func = func;
    b3b6:	4b0c      	ldr	r3, [pc, #48]	; (b3e8 <gatt_indicate+0x98>)
    b3b8:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    b3ba:	2300      	movs	r3, #0
		req->buf = buf;
    b3bc:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    b3be:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    b3c0:	4621      	mov	r1, r4
    b3c2:	4648      	mov	r0, r9
    b3c4:	f00f feca 	bl	1b15c <bt_att_req_send>
	if (err) {
    b3c8:	4604      	mov	r4, r0
    b3ca:	b110      	cbz	r0, b3d2 <gatt_indicate+0x82>
		net_buf_unref(buf);
    b3cc:	4630      	mov	r0, r6
    b3ce:	f00a fa99 	bl	15904 <net_buf_unref>
}
    b3d2:	4620      	mov	r0, r4
    b3d4:	b003      	add	sp, #12
    b3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    b3da:	f06f 0415 	mvn.w	r4, #21
    b3de:	e7f8      	b.n	b3d2 <gatt_indicate+0x82>
		return -ENOMEM;
    b3e0:	f06f 040b 	mvn.w	r4, #11
    b3e4:	e7f5      	b.n	b3d2 <gatt_indicate+0x82>
    b3e6:	bf00      	nop
    b3e8:	0001b1d9 	.word	0x0001b1d9

0000b3ec <gatt_register>:
Z_GENLIST_IS_EMPTY(slist)
    b3ec:	4a17      	ldr	r2, [pc, #92]	; (b44c <gatt_register+0x60>)
	u16_t count = svc->attr_count;
    b3ee:	8881      	ldrh	r1, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    b3f0:	6813      	ldr	r3, [r2, #0]
{
    b3f2:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_attr *attrs = svc->attrs;
    b3f4:	6804      	ldr	r4, [r0, #0]
	if (sys_slist_is_empty(&db)) {
    b3f6:	b143      	cbz	r3, b40a <gatt_register+0x1e>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    b3f8:	6853      	ldr	r3, [r2, #4]
    b3fa:	b323      	cbz	r3, b446 <gatt_register+0x5a>
	handle = last->attrs[last->attr_count - 1].handle;
    b3fc:	e953 3502 	ldrd	r3, r5, [r3, #-8]
    b400:	2614      	movs	r6, #20
    b402:	fb06 3305 	mla	r3, r6, r5, r3
    b406:	f833 3c04 	ldrh.w	r3, [r3, #-4]
	for (; attrs && count; attrs++, count--) {
    b40a:	b104      	cbz	r4, b40e <gatt_register+0x22>
    b40c:	b941      	cbnz	r1, b420 <gatt_register+0x34>
	parent->next = child;
    b40e:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    b410:	f100 0108 	add.w	r1, r0, #8
    b414:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    b416:	6850      	ldr	r0, [r2, #4]
    b418:	b988      	cbnz	r0, b43e <gatt_register+0x52>
	list->head = node;
    b41a:	e9c2 1100 	strd	r1, r1, [r2]
}
    b41e:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    b420:	8a25      	ldrh	r5, [r4, #16]
    b422:	b93d      	cbnz	r5, b434 <gatt_register+0x48>
			attrs->handle = ++handle;
    b424:	3301      	adds	r3, #1
    b426:	b29d      	uxth	r5, r3
    b428:	8225      	strh	r5, [r4, #16]
	for (; attrs && count; attrs++, count--) {
    b42a:	3901      	subs	r1, #1
    b42c:	3414      	adds	r4, #20
    b42e:	b289      	uxth	r1, r1
    b430:	462b      	mov	r3, r5
    b432:	e7ea      	b.n	b40a <gatt_register+0x1e>
		} else if (attrs->handle > handle) {
    b434:	429d      	cmp	r5, r3
    b436:	d8f8      	bhi.n	b42a <gatt_register+0x3e>
			return -EINVAL;
    b438:	f06f 0015 	mvn.w	r0, #21
    b43c:	e7ef      	b.n	b41e <gatt_register+0x32>
	parent->next = child;
    b43e:	6001      	str	r1, [r0, #0]
	list->tail = node;
    b440:	6051      	str	r1, [r2, #4]
	return 0;
    b442:	4618      	mov	r0, r3
    b444:	e7eb      	b.n	b41e <gatt_register+0x32>
	handle = last->attrs[last->attr_count - 1].handle;
    b446:	681b      	ldr	r3, [r3, #0]
    b448:	deff      	udf	#255	; 0xff
    b44a:	bf00      	nop
    b44c:	20000b0c 	.word	0x20000b0c

0000b450 <ccc_save>:
	struct ccc_store store[CCC_STORE_MAX];
	size_t count;
};

static u8_t ccc_save(const struct bt_gatt_attr *attr, void *user_data)
{
    b450:	b538      	push	{r3, r4, r5, lr}
	struct ccc_save *save = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    b452:	6882      	ldr	r2, [r0, #8]
    b454:	4b0b      	ldr	r3, [pc, #44]	; (b484 <ccc_save+0x34>)
    b456:	429a      	cmp	r2, r3
{
    b458:	4605      	mov	r5, r0
    b45a:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    b45c:	d10f      	bne.n	b47e <ccc_save+0x2e>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, save->addr);
    b45e:	6809      	ldr	r1, [r1, #0]
    b460:	68c0      	ldr	r0, [r0, #12]
    b462:	f00f ff5a 	bl	1b31a <ccc_find_cfg>
	if (!cfg) {
    b466:	b150      	cbz	r0, b47e <ccc_save+0x2e>
	}

	BT_DBG("Storing CCCs handle 0x%04x value 0x%04x", attr->handle,
	       cfg->value);

	save->store[save->count].handle = attr->handle;
    b468:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    b46c:	8a29      	ldrh	r1, [r5, #16]
    b46e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->store[save->count].value = cfg->value;
	save->count++;
    b472:	3301      	adds	r3, #1
	save->store[save->count].handle = attr->handle;
    b474:	8091      	strh	r1, [r2, #4]
	save->store[save->count].value = cfg->value;
    b476:	8901      	ldrh	r1, [r0, #8]
    b478:	80d1      	strh	r1, [r2, #6]
	save->count++;
    b47a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	return BT_GATT_ITER_CONTINUE;
}
    b47e:	2001      	movs	r0, #1
    b480:	bd38      	pop	{r3, r4, r5, pc}
    b482:	bf00      	nop
    b484:	0001b41f 	.word	0x0001b41f

0000b488 <ccc_load>:
	struct ccc_store *entry;
	size_t count;
};

static u8_t ccc_load(const struct bt_gatt_attr *attr, void *user_data)
{
    b488:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ccc_load *load = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    b48a:	6882      	ldr	r2, [r0, #8]
    b48c:	4b23      	ldr	r3, [pc, #140]	; (b51c <ccc_load+0x94>)
    b48e:	429a      	cmp	r2, r3
{
    b490:	b085      	sub	sp, #20
    b492:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    b494:	d002      	beq.n	b49c <ccc_load+0x14>
	ccc = attr->user_data;

	/* Clear if value was invalidade */
	if (!load->entry) {
		ccc_clear(ccc, &load->addr);
		return BT_GATT_ITER_CONTINUE;
    b496:	2001      	movs	r0, #1
next:
	load->entry++;
	load->count--;

	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
    b498:	b005      	add	sp, #20
    b49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!load->entry) {
    b49c:	688d      	ldr	r5, [r1, #8]
	ccc = attr->user_data;
    b49e:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    b4a0:	b97d      	cbnz	r5, b4c2 <ccc_load+0x3a>
	cfg = ccc_find_cfg(ccc, addr);
    b4a2:	3101      	adds	r1, #1
    b4a4:	4630      	mov	r0, r6
    b4a6:	f00f ff38 	bl	1b31a <ccc_find_cfg>
	if (!cfg) {
    b4aa:	4604      	mov	r4, r0
    b4ac:	2800      	cmp	r0, #0
    b4ae:	d0f2      	beq.n	b496 <ccc_load+0xe>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    b4b0:	a902      	add	r1, sp, #8
    b4b2:	3001      	adds	r0, #1
    b4b4:	9502      	str	r5, [sp, #8]
    b4b6:	f8cd 500b 	str.w	r5, [sp, #11]
    b4ba:	f00f fe9e 	bl	1b1fa <bt_addr_le_copy>
	cfg->value = 0;
    b4be:	8125      	strh	r5, [r4, #8]
    b4c0:	e7e9      	b.n	b496 <ccc_load+0xe>
	} else if (!load->count) {
    b4c2:	68cb      	ldr	r3, [r1, #12]
    b4c4:	b33b      	cbz	r3, b516 <ccc_load+0x8e>
	if (load->entry->handle != attr->handle) {
    b4c6:	882a      	ldrh	r2, [r5, #0]
    b4c8:	8a03      	ldrh	r3, [r0, #16]
    b4ca:	429a      	cmp	r2, r3
    b4cc:	d00a      	beq.n	b4e4 <ccc_load+0x5c>
		if (load->entry->handle < attr->handle) {
    b4ce:	d2e2      	bcs.n	b496 <ccc_load+0xe>
	load->count--;
    b4d0:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    b4d2:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    b4d4:	3801      	subs	r0, #1
	load->entry++;
    b4d6:	3304      	adds	r3, #4
	load->count--;
    b4d8:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b4da:	3000      	adds	r0, #0
	load->entry++;
    b4dc:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b4de:	bf18      	it	ne
    b4e0:	2001      	movne	r0, #1
    b4e2:	e7d9      	b.n	b498 <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, &load->addr);
    b4e4:	1c4f      	adds	r7, r1, #1
    b4e6:	4639      	mov	r1, r7
    b4e8:	4630      	mov	r0, r6
    b4ea:	f00f ff16 	bl	1b31a <ccc_find_cfg>
	if (!cfg) {
    b4ee:	4605      	mov	r5, r0
    b4f0:	b968      	cbnz	r0, b50e <ccc_load+0x86>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY);
    b4f2:	9000      	str	r0, [sp, #0]
    b4f4:	4669      	mov	r1, sp
    b4f6:	f8cd 0003 	str.w	r0, [sp, #3]
    b4fa:	4630      	mov	r0, r6
    b4fc:	f00f ff0d 	bl	1b31a <ccc_find_cfg>
		if (!cfg) {
    b500:	4605      	mov	r5, r0
    b502:	2800      	cmp	r0, #0
    b504:	d0e4      	beq.n	b4d0 <ccc_load+0x48>
		bt_addr_le_copy(&cfg->peer, &load->addr);
    b506:	4639      	mov	r1, r7
    b508:	3001      	adds	r0, #1
    b50a:	f00f fe76 	bl	1b1fa <bt_addr_le_copy>
	cfg->value = load->entry->value;
    b50e:	68a3      	ldr	r3, [r4, #8]
    b510:	885b      	ldrh	r3, [r3, #2]
    b512:	812b      	strh	r3, [r5, #8]
    b514:	e7dc      	b.n	b4d0 <ccc_load+0x48>
		return BT_GATT_ITER_STOP;
    b516:	4618      	mov	r0, r3
    b518:	e7be      	b.n	b498 <ccc_load+0x10>
    b51a:	bf00      	nop
    b51c:	0001b41f 	.word	0x0001b41f

0000b520 <find_cf_cfg>:
{
    b520:	b507      	push	{r0, r1, r2, lr}
		if (!conn) {
    b522:	b960      	cbnz	r0, b53e <find_cf_cfg+0x1e>
			if (!bt_addr_le_cmp(&cf_cfg[i].peer, BT_ADDR_LE_ANY)) {
    b524:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    b526:	2207      	movs	r2, #7
    b528:	f8cd 0003 	str.w	r0, [sp, #3]
    b52c:	4669      	mov	r1, sp
    b52e:	4807      	ldr	r0, [pc, #28]	; (b54c <find_cf_cfg+0x2c>)
    b530:	f00e fdaa 	bl	1a088 <memcmp>
    b534:	b938      	cbnz	r0, b546 <find_cf_cfg+0x26>
				return &cf_cfg[i];
    b536:	4806      	ldr	r0, [pc, #24]	; (b550 <find_cf_cfg+0x30>)
}
    b538:	b003      	add	sp, #12
    b53a:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if (!bt_conn_addr_le_cmp(conn, &cf_cfg[i].peer)) {
    b53e:	4903      	ldr	r1, [pc, #12]	; (b54c <find_cf_cfg+0x2c>)
    b540:	f00f f978 	bl	1a834 <bt_conn_addr_le_cmp>
    b544:	e7f6      	b.n	b534 <find_cf_cfg+0x14>
	return NULL;
    b546:	2000      	movs	r0, #0
    b548:	e7f6      	b.n	b538 <find_cf_cfg+0x18>
    b54a:	bf00      	nop
    b54c:	20000afd 	.word	0x20000afd
    b550:	20000afc 	.word	0x20000afc

0000b554 <sc_indicate_rsp>:
{
    b554:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b556:	4b13      	ldr	r3, [pc, #76]	; (b5a4 <sc_indicate_rsp+0x50>)
    b558:	f3bf 8f5b 	dmb	ish
    b55c:	4604      	mov	r4, r0
    b55e:	e853 2f00 	ldrex	r2, [r3]
    b562:	f022 0202 	bic.w	r2, r2, #2
    b566:	e843 2100 	strex	r1, r2, [r3]
    b56a:	2900      	cmp	r1, #0
    b56c:	d1f7      	bne.n	b55e <sc_indicate_rsp+0xa>
    b56e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    b572:	2100      	movs	r1, #0
    b574:	4618      	mov	r0, r3
    b576:	f00f fe37 	bl	1b1e8 <atomic_test_bit>
    b57a:	b128      	cbz	r0, b588 <sc_indicate_rsp+0x34>
    b57c:	2200      	movs	r2, #0
    b57e:	f1a3 0120 	sub.w	r1, r3, #32
    b582:	4809      	ldr	r0, [pc, #36]	; (b5a8 <sc_indicate_rsp+0x54>)
    b584:	f00b fdaa 	bl	170dc <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    b588:	4620      	mov	r0, r4
    b58a:	f7ff ffc9 	bl	b520 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    b58e:	b140      	cbz	r0, b5a2 <sc_indicate_rsp+0x4e>
    b590:	7a03      	ldrb	r3, [r0, #8]
    b592:	07db      	lsls	r3, r3, #31
    b594:	d505      	bpl.n	b5a2 <sc_indicate_rsp+0x4e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    b596:	2100      	movs	r1, #0
    b598:	300c      	adds	r0, #12
}
    b59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    b59e:	f00f be2f 	b.w	1b200 <atomic_set_bit>
}
    b5a2:	bd10      	pop	{r4, pc}
    b5a4:	20000b7c 	.word	0x20000b7c
    b5a8:	20001fc8 	.word	0x20001fc8

0000b5ac <cf_set>:
{
	struct gatt_cf_cfg *cfg;
	bt_addr_le_t addr;
	int len, err;

	if (argc < 1) {
    b5ac:	2800      	cmp	r0, #0
{
    b5ae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b5b2:	460b      	mov	r3, r1
    b5b4:	4617      	mov	r7, r2
	if (argc < 1) {
    b5b6:	dc05      	bgt.n	b5c4 <cf_set+0x18>
		BT_ERR("Insufficient number of arguments");
		return -EINVAL;
    b5b8:	f06f 0415 	mvn.w	r4, #21
	}

	BT_DBG("Restored CF for %s", bt_addr_le_str(&addr));

	return 0;
}
    b5bc:	4620      	mov	r0, r4
    b5be:	b004      	add	sp, #16
    b5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(argv[0], &addr);
    b5c4:	4669      	mov	r1, sp
    b5c6:	6818      	ldr	r0, [r3, #0]
    b5c8:	f00e fdfe 	bl	1a1c8 <bt_settings_decode_key>
	if (err) {
    b5cc:	4604      	mov	r4, r0
    b5ce:	2800      	cmp	r0, #0
    b5d0:	d1f2      	bne.n	b5b8 <cf_set+0xc>
    b5d2:	2207      	movs	r2, #7
    b5d4:	4914      	ldr	r1, [pc, #80]	; (b628 <cf_set+0x7c>)
    b5d6:	4668      	mov	r0, sp
    b5d8:	f00e fd56 	bl	1a088 <memcmp>
		if (!bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
    b5dc:	b9e0      	cbnz	r0, b618 <cf_set+0x6c>
			return &cf_cfg[i];
    b5de:	4d13      	ldr	r5, [pc, #76]	; (b62c <cf_set+0x80>)
	if (settings_val_get_len_cb(val_ctx)) {
    b5e0:	4638      	mov	r0, r7
    b5e2:	f00e fb89 	bl	19cf8 <settings_val_get_len_cb>
    b5e6:	f105 0808 	add.w	r8, r5, #8
    b5ea:	4606      	mov	r6, r0
    b5ec:	b138      	cbz	r0, b5fe <cf_set+0x52>
		len = settings_val_read_cb(val_ctx, cfg->data,
    b5ee:	2201      	movs	r2, #1
    b5f0:	4641      	mov	r1, r8
    b5f2:	4638      	mov	r0, r7
    b5f4:	f00e fb63 	bl	19cbe <settings_val_read_cb>
		if (len < 0) {
    b5f8:	ea00 74e0 	and.w	r4, r0, r0, asr #31
    b5fc:	e7de      	b.n	b5bc <cf_set+0x10>
		bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    b5fe:	9002      	str	r0, [sp, #8]
    b600:	a902      	add	r1, sp, #8
    b602:	f8cd 000b 	str.w	r0, [sp, #11]
    b606:	1c68      	adds	r0, r5, #1
    b608:	f00f fdf7 	bl	1b1fa <bt_addr_le_copy>
		memset(cfg->data, 0, sizeof(cfg->data));
    b60c:	2201      	movs	r2, #1
    b60e:	4631      	mov	r1, r6
    b610:	4640      	mov	r0, r8
    b612:	f00e fd73 	bl	1a0fc <memset>
    b616:	e7d1      	b.n	b5bc <cf_set+0x10>
		cfg = find_cf_cfg(NULL);
    b618:	4620      	mov	r0, r4
    b61a:	f7ff ff81 	bl	b520 <find_cf_cfg>
		if (!cfg) {
    b61e:	4605      	mov	r5, r0
    b620:	2800      	cmp	r0, #0
    b622:	d1dd      	bne.n	b5e0 <cf_set+0x34>
    b624:	e7ca      	b.n	b5bc <cf_set+0x10>
    b626:	bf00      	nop
    b628:	20000afd 	.word	0x20000afd
    b62c:	20000afc 	.word	0x20000afc

0000b630 <db_changed>:
{
    b630:	b513      	push	{r0, r1, r4, lr}
    b632:	4c11      	ldr	r4, [pc, #68]	; (b678 <db_changed+0x48>)
    b634:	4911      	ldr	r1, [pc, #68]	; (b67c <db_changed+0x4c>)
    b636:	4812      	ldr	r0, [pc, #72]	; (b680 <db_changed+0x50>)
    b638:	220a      	movs	r2, #10
    b63a:	f00b fd4f 	bl	170dc <k_delayed_work_submit_to_queue>
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    b63e:	2300      	movs	r3, #0
    b640:	2207      	movs	r2, #7
    b642:	4669      	mov	r1, sp
    b644:	1c60      	adds	r0, r4, #1
    b646:	9300      	str	r3, [sp, #0]
    b648:	f8cd 3003 	str.w	r3, [sp, #3]
    b64c:	f00e fd1c 	bl	1a088 <memcmp>
    b650:	b178      	cbz	r0, b672 <db_changed+0x42>
		if (CF_ROBUST_CACHING(cfg) &&
    b652:	7a23      	ldrb	r3, [r4, #8]
    b654:	07db      	lsls	r3, r3, #31
    b656:	d50c      	bpl.n	b672 <db_changed+0x42>
    b658:	f3bf 8f5b 	dmb	ish
    b65c:	340c      	adds	r4, #12
    b65e:	e854 3f00 	ldrex	r3, [r4]
    b662:	f023 0301 	bic.w	r3, r3, #1
    b666:	e844 3200 	strex	r2, r3, [r4]
    b66a:	2a00      	cmp	r2, #0
    b66c:	d1f7      	bne.n	b65e <db_changed+0x2e>
    b66e:	f3bf 8f5b 	dmb	ish
}
    b672:	b002      	add	sp, #8
    b674:	bd10      	pop	{r4, pc}
    b676:	bf00      	nop
    b678:	20000afc 	.word	0x20000afc
    b67c:	20000b14 	.word	0x20000b14
    b680:	20001fc8 	.word	0x20001fc8

0000b684 <read_ppcp>:
{
    b684:	b513      	push	{r0, r1, r4, lr}
    b686:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    b68a:	4c0b      	ldr	r4, [pc, #44]	; (b6b8 <read_ppcp+0x34>)
{
    b68c:	4610      	mov	r0, r2
	if (offset > value_len) {
    b68e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    b690:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    b694:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    b698:	d80b      	bhi.n	b6b2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    b69a:	f1c1 0408 	rsb	r4, r1, #8
    b69e:	429c      	cmp	r4, r3
    b6a0:	bfa8      	it	ge
    b6a2:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
    b6a4:	4622      	mov	r2, r4
    b6a6:	4469      	add	r1, sp
    b6a8:	f00e fcfe 	bl	1a0a8 <memcpy>
}
    b6ac:	4620      	mov	r0, r4
    b6ae:	b002      	add	sp, #8
    b6b0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b6b2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    b6b6:	e7f9      	b.n	b6ac <read_ppcp+0x28>
    b6b8:	00280018 	.word	0x00280018

0000b6bc <sc_indicate.constprop.21>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    b6bc:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b6be:	4a17      	ldr	r2, [pc, #92]	; (b71c <sc_indicate.constprop.21+0x60>)
    b6c0:	f3bf 8f5b 	dmb	ish
    b6c4:	f102 0348 	add.w	r3, r2, #72	; 0x48
    b6c8:	e853 4f00 	ldrex	r4, [r3]
    b6cc:	f044 0c01 	orr.w	ip, r4, #1
    b6d0:	e843 ce00 	strex	lr, ip, [r3]
    b6d4:	f1be 0f00 	cmp.w	lr, #0
    b6d8:	d1f6      	bne.n	b6c8 <sc_indicate.constprop.21+0xc>
    b6da:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    b6de:	f014 0f01 	tst.w	r4, #1
    b6e2:	4613      	mov	r3, r2
    b6e4:	d10d      	bne.n	b702 <sc_indicate.constprop.21+0x46>
		sc->start = start;
    b6e6:	8490      	strh	r0, [r2, #36]	; 0x24
		sc->end = end;
    b6e8:	84d1      	strh	r1, [r2, #38]	; 0x26
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    b6ea:	2101      	movs	r1, #1
    b6ec:	480c      	ldr	r0, [pc, #48]	; (b720 <sc_indicate.constprop.21+0x64>)
    b6ee:	f00f fd7b 	bl	1b1e8 <atomic_test_bit>
    b6f2:	b990      	cbnz	r0, b71a <sc_indicate.constprop.21+0x5e>
    b6f4:	220a      	movs	r2, #10
    b6f6:	490b      	ldr	r1, [pc, #44]	; (b724 <sc_indicate.constprop.21+0x68>)
    b6f8:	480b      	ldr	r0, [pc, #44]	; (b728 <sc_indicate.constprop.21+0x6c>)
}
    b6fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b6fe:	f00b bced 	b.w	170dc <k_delayed_work_submit_to_queue>
	if (new_start >= *start && new_end <= *end) {
    b702:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    b704:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
    b706:	4284      	cmp	r4, r0
    b708:	d803      	bhi.n	b712 <sc_indicate.constprop.21+0x56>
    b70a:	428a      	cmp	r2, r1
    b70c:	d205      	bcs.n	b71a <sc_indicate.constprop.21+0x5e>
		*end = new_end;
    b70e:	84d9      	strh	r1, [r3, #38]	; 0x26
    b710:	e7eb      	b.n	b6ea <sc_indicate.constprop.21+0x2e>
	if (*end < new_end) {
    b712:	428a      	cmp	r2, r1
		*start = new_start;
    b714:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    b716:	d2e8      	bcs.n	b6ea <sc_indicate.constprop.21+0x2e>
    b718:	e7f9      	b.n	b70e <sc_indicate.constprop.21+0x52>
}
    b71a:	bd10      	pop	{r4, pc}
    b71c:	20000b34 	.word	0x20000b34
    b720:	20000b7c 	.word	0x20000b7c
    b724:	20000b5c 	.word	0x20000b5c
    b728:	20001fc8 	.word	0x20001fc8

0000b72c <connected_cb>:
{
    b72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b730:	6882      	ldr	r2, [r0, #8]
    b732:	4b19      	ldr	r3, [pc, #100]	; (b798 <connected_cb+0x6c>)
    b734:	429a      	cmp	r2, r3
{
    b736:	4607      	mov	r7, r0
    b738:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    b73a:	d128      	bne.n	b78e <connected_cb+0x62>
	ccc = attr->user_data;
    b73c:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    b73e:	2600      	movs	r6, #0
    b740:	686b      	ldr	r3, [r5, #4]
    b742:	429e      	cmp	r6, r3
    b744:	d223      	bcs.n	b78e <connected_cb+0x62>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    b746:	6829      	ldr	r1, [r5, #0]
    b748:	ea4f 1806 	mov.w	r8, r6, lsl #4
    b74c:	4441      	add	r1, r8
    b74e:	3101      	adds	r1, #1
    b750:	4620      	mov	r0, r4
    b752:	f00f f86f 	bl	1a834 <bt_conn_addr_le_cmp>
    b756:	4681      	mov	r9, r0
    b758:	b9e0      	cbnz	r0, b794 <connected_cb+0x68>
		if (ccc->cfg[i].value) {
    b75a:	682b      	ldr	r3, [r5, #0]
    b75c:	4443      	add	r3, r8
    b75e:	891b      	ldrh	r3, [r3, #8]
    b760:	b1c3      	cbz	r3, b794 <connected_cb+0x68>
			gatt_ccc_changed(attr, ccc);
    b762:	4629      	mov	r1, r5
    b764:	4638      	mov	r0, r7
    b766:	f00f fd1d 	bl	1b1a4 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    b76a:	682c      	ldr	r4, [r5, #0]
    b76c:	4b0b      	ldr	r3, [pc, #44]	; (b79c <connected_cb+0x70>)
    b76e:	429c      	cmp	r4, r3
    b770:	d10d      	bne.n	b78e <connected_cb+0x62>
				sc_restore(&ccc->cfg[i]);
    b772:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    b774:	89a0      	ldrh	r0, [r4, #12]
    b776:	89e1      	ldrh	r1, [r4, #14]
    b778:	ea50 0301 	orrs.w	r3, r0, r1
    b77c:	d007      	beq.n	b78e <connected_cb+0x62>
	sc_indicate(&gatt_sc, data->start, data->end);
    b77e:	f7ff ff9d 	bl	b6bc <sc_indicate.constprop.21>
	(void)memset(cfg->data, 0, sizeof(cfg->data));
    b782:	2204      	movs	r2, #4
    b784:	4649      	mov	r1, r9
    b786:	f104 000c 	add.w	r0, r4, #12
    b78a:	f00e fcb7 	bl	1a0fc <memset>
}
    b78e:	2001      	movs	r0, #1
    b790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    b794:	3601      	adds	r6, #1
    b796:	e7d3      	b.n	b740 <connected_cb+0x14>
    b798:	0001b41f 	.word	0x0001b41f
    b79c:	20000b84 	.word	0x20000b84

0000b7a0 <notify_cb>:
{
    b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7a4:	b085      	sub	sp, #20
    b7a6:	4607      	mov	r7, r0
    b7a8:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    b7aa:	2500      	movs	r5, #0
    b7ac:	f642 1302 	movw	r3, #10498	; 0x2902
    b7b0:	a902      	add	r1, sp, #8
    b7b2:	6800      	ldr	r0, [r0, #0]
    b7b4:	f88d 5008 	strb.w	r5, [sp, #8]
    b7b8:	f8ad 300a 	strh.w	r3, [sp, #10]
    b7bc:	f00e fd37 	bl	1a22e <bt_uuid_cmp>
    b7c0:	b178      	cbz	r0, b7e2 <notify_cb+0x42>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    b7c2:	f642 0303 	movw	r3, #10243	; 0x2803
    b7c6:	a903      	add	r1, sp, #12
    b7c8:	6838      	ldr	r0, [r7, #0]
    b7ca:	f88d 500c 	strb.w	r5, [sp, #12]
    b7ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    b7d2:	f00e fd2c 	bl	1a22e <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    b7d6:	1b40      	subs	r0, r0, r5
    b7d8:	bf18      	it	ne
    b7da:	2001      	movne	r0, #1
}
    b7dc:	b005      	add	sp, #20
    b7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b7e2:	68ba      	ldr	r2, [r7, #8]
    b7e4:	4b34      	ldr	r3, [pc, #208]	; (b8b8 <notify_cb+0x118>)
    b7e6:	429a      	cmp	r2, r3
    b7e8:	d001      	beq.n	b7ee <notify_cb+0x4e>
		return BT_GATT_ITER_CONTINUE;
    b7ea:	2001      	movs	r0, #1
    b7ec:	e7f6      	b.n	b7dc <notify_cb+0x3c>
	ccc = attr->user_data;
    b7ee:	f8d7 800c 	ldr.w	r8, [r7, #12]
			if (ccc->cfg == sc_ccc_cfg) {
    b7f2:	f8df b0c8 	ldr.w	fp, [pc, #200]	; b8bc <notify_cb+0x11c>
	for (i = 0; i < ccc->cfg_len; i++) {
    b7f6:	4606      	mov	r6, r0
    b7f8:	4682      	mov	sl, r0
    b7fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
    b7fe:	429e      	cmp	r6, r3
    b800:	d2f3      	bcs.n	b7ea <notify_cb+0x4a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    b802:	f8d8 2000 	ldr.w	r2, [r8]
		if (cfg->value != data->type) {
    b806:	88a1      	ldrh	r1, [r4, #4]
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    b808:	0133      	lsls	r3, r6, #4
    b80a:	18d5      	adds	r5, r2, r3
		if (cfg->value != data->type) {
    b80c:	8928      	ldrh	r0, [r5, #8]
    b80e:	4288      	cmp	r0, r1
    b810:	d117      	bne.n	b842 <notify_cb+0xa2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    b812:	1c69      	adds	r1, r5, #1
    b814:	5cd0      	ldrb	r0, [r2, r3]
    b816:	f7fe fed7 	bl	a5c8 <bt_conn_lookup_addr_le>
		if (!conn) {
    b81a:	4681      	mov	r9, r0
    b81c:	bb08      	cbnz	r0, b862 <notify_cb+0xc2>
			if (ccc->cfg == sc_ccc_cfg) {
    b81e:	f8d8 3000 	ldr.w	r3, [r8]
    b822:	455b      	cmp	r3, fp
    b824:	d10d      	bne.n	b842 <notify_cb+0xa2>
				sc_save(cfg, data->params);
    b826:	69a3      	ldr	r3, [r4, #24]
	memcpy(&data, params->data, params->len);
    b828:	a803      	add	r0, sp, #12
    b82a:	69d9      	ldr	r1, [r3, #28]
    b82c:	8c1a      	ldrh	r2, [r3, #32]
    b82e:	f00e fc3b 	bl	1a0a8 <memcpy>
	if (!stored->start && !stored->end) {
    b832:	89a9      	ldrh	r1, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    b834:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!stored->start && !stored->end) {
    b838:	b929      	cbnz	r1, b846 <notify_cb+0xa6>
    b83a:	89ea      	ldrh	r2, [r5, #14]
    b83c:	b942      	cbnz	r2, b850 <notify_cb+0xb0>
		*stored = data;
    b83e:	9803      	ldr	r0, [sp, #12]
    b840:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    b842:	3601      	adds	r6, #1
    b844:	e7d9      	b.n	b7fa <notify_cb+0x5a>
	data.start = sys_le16_to_cpu(data.start);
    b846:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (new_start >= *start && new_end <= *end) {
    b84a:	89e8      	ldrh	r0, [r5, #14]
    b84c:	428a      	cmp	r2, r1
    b84e:	d304      	bcc.n	b85a <notify_cb+0xba>
    b850:	89ea      	ldrh	r2, [r5, #14]
    b852:	429a      	cmp	r2, r3
    b854:	d2f5      	bcs.n	b842 <notify_cb+0xa2>
		*end = new_end;
    b856:	81eb      	strh	r3, [r5, #14]
    b858:	e7f3      	b.n	b842 <notify_cb+0xa2>
	if (*end < new_end) {
    b85a:	4283      	cmp	r3, r0
		*start = new_start;
    b85c:	81aa      	strh	r2, [r5, #12]
	if (*end < new_end) {
    b85e:	d9f0      	bls.n	b842 <notify_cb+0xa2>
    b860:	e7f9      	b.n	b856 <notify_cb+0xb6>
		if (conn->state != BT_CONN_CONNECTED) {
    b862:	7a83      	ldrb	r3, [r0, #10]
    b864:	2b04      	cmp	r3, #4
    b866:	d002      	beq.n	b86e <notify_cb+0xce>
			bt_conn_unref(conn);
    b868:	f00f f803 	bl	1a872 <bt_conn_unref>
			continue;
    b86c:	e7e9      	b.n	b842 <notify_cb+0xa2>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    b86e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    b872:	b97b      	cbnz	r3, b894 <notify_cb+0xf4>
		if (data->type == BT_GATT_CCC_INDICATE) {
    b874:	88a3      	ldrh	r3, [r4, #4]
    b876:	2b02      	cmp	r3, #2
    b878:	d111      	bne.n	b89e <notify_cb+0xfe>
			err = gatt_indicate(conn, data->params);
    b87a:	69a1      	ldr	r1, [r4, #24]
    b87c:	4648      	mov	r0, r9
    b87e:	f7ff fd67 	bl	b350 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    b882:	4605      	mov	r5, r0
		bt_conn_unref(conn);
    b884:	4648      	mov	r0, r9
    b886:	f00e fff4 	bl	1a872 <bt_conn_unref>
		if (err < 0) {
    b88a:	2d00      	cmp	r5, #0
    b88c:	db11      	blt.n	b8b2 <notify_cb+0x112>
		data->err = 0;
    b88e:	f8c4 a000 	str.w	sl, [r4]
    b892:	e7d6      	b.n	b842 <notify_cb+0xa2>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    b894:	4639      	mov	r1, r7
    b896:	4798      	blx	r3
    b898:	2800      	cmp	r0, #0
    b89a:	d1eb      	bne.n	b874 <notify_cb+0xd4>
    b89c:	e7d1      	b.n	b842 <notify_cb+0xa2>
			err = gatt_notify(conn, data->attr->handle,
    b89e:	68a3      	ldr	r3, [r4, #8]
    b8a0:	6922      	ldr	r2, [r4, #16]
    b8a2:	8a19      	ldrh	r1, [r3, #16]
    b8a4:	68e3      	ldr	r3, [r4, #12]
    b8a6:	9300      	str	r3, [sp, #0]
    b8a8:	4648      	mov	r0, r9
    b8aa:	8aa3      	ldrh	r3, [r4, #20]
    b8ac:	f00f fd0a 	bl	1b2c4 <gatt_notify>
    b8b0:	e7e7      	b.n	b882 <notify_cb+0xe2>
			return BT_GATT_ITER_STOP;
    b8b2:	2000      	movs	r0, #0
    b8b4:	e792      	b.n	b7dc <notify_cb+0x3c>
    b8b6:	bf00      	nop
    b8b8:	0001b41f 	.word	0x0001b41f
    b8bc:	20000b84 	.word	0x20000b84

0000b8c0 <bt_gatt_service_unregister>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b8c0:	4b15      	ldr	r3, [pc, #84]	; (b918 <bt_gatt_service_unregister+0x58>)
    b8c2:	681a      	ldr	r2, [r3, #0]
{
    b8c4:	b510      	push	{r4, lr}
    b8c6:	2100      	movs	r1, #0
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    b8c8:	f100 0408 	add.w	r4, r0, #8
    b8cc:	b912      	cbnz	r2, b8d4 <bt_gatt_service_unregister+0x14>
		return -ENOENT;
    b8ce:	f06f 0001 	mvn.w	r0, #1
    b8d2:	e017      	b.n	b904 <bt_gatt_service_unregister+0x44>
    b8d4:	4294      	cmp	r4, r2
    b8d6:	d11c      	bne.n	b912 <bt_gatt_service_unregister+0x52>
Z_GENLIST_REMOVE(slist, snode)
    b8d8:	6882      	ldr	r2, [r0, #8]
    b8da:	b9a1      	cbnz	r1, b906 <bt_gatt_service_unregister+0x46>
    b8dc:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    b8de:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    b8e0:	428c      	cmp	r4, r1
    b8e2:	d100      	bne.n	b8e6 <bt_gatt_service_unregister+0x26>
	list->tail = node;
    b8e4:	605a      	str	r2, [r3, #4]
		    svc->attrs[svc->attr_count - 1].handle);
    b8e6:	e9d0 2300 	ldrd	r2, r3, [r0]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    b8ea:	2114      	movs	r1, #20
    b8ec:	fb01 2303 	mla	r3, r1, r3, r2
	parent->next = child;
    b8f0:	2400      	movs	r4, #0
    b8f2:	6084      	str	r4, [r0, #8]
    b8f4:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    b8f8:	8a10      	ldrh	r0, [r2, #16]
    b8fa:	f7ff fedf 	bl	b6bc <sc_indicate.constprop.21>
	db_changed();
    b8fe:	f7ff fe97 	bl	b630 <db_changed>
	return 0;
    b902:	4620      	mov	r0, r4
}
    b904:	bd10      	pop	{r4, pc}
    b906:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    b908:	685a      	ldr	r2, [r3, #4]
    b90a:	4294      	cmp	r4, r2
	list->tail = node;
    b90c:	bf08      	it	eq
    b90e:	6059      	streq	r1, [r3, #4]
    b910:	e7e9      	b.n	b8e6 <bt_gatt_service_unregister+0x26>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b912:	4611      	mov	r1, r2
    b914:	6812      	ldr	r2, [r2, #0]
    b916:	e7d9      	b.n	b8cc <bt_gatt_service_unregister+0xc>
    b918:	20000b0c 	.word	0x20000b0c

0000b91c <bt_gatt_foreach_attr>:
{
    b91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b920:	4698      	mov	r8, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    b922:	4b12      	ldr	r3, [pc, #72]	; (b96c <bt_gatt_foreach_attr+0x50>)
    b924:	681c      	ldr	r4, [r3, #0]
{
    b926:	4605      	mov	r5, r0
    b928:	460e      	mov	r6, r1
    b92a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    b92c:	b1dc      	cbz	r4, b966 <bt_gatt_foreach_attr+0x4a>
    b92e:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    b930:	f04f 0914 	mov.w	r9, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    b934:	b1bc      	cbz	r4, b966 <bt_gatt_foreach_attr+0x4a>
		for (i = 0; i < svc->attr_count; i++) {
    b936:	f04f 0a00 	mov.w	sl, #0
    b93a:	e007      	b.n	b94c <bt_gatt_foreach_attr+0x30>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    b93c:	6820      	ldr	r0, [r4, #0]
    b93e:	fb09 000a 	mla	r0, r9, sl, r0
			if (attr->handle < start_handle ||
    b942:	8a01      	ldrh	r1, [r0, #16]
    b944:	42a9      	cmp	r1, r5
    b946:	d208      	bcs.n	b95a <bt_gatt_foreach_attr+0x3e>
		for (i = 0; i < svc->attr_count; i++) {
    b948:	f10a 0a01 	add.w	sl, sl, #1
    b94c:	6863      	ldr	r3, [r4, #4]
    b94e:	4553      	cmp	r3, sl
    b950:	d8f4      	bhi.n	b93c <bt_gatt_foreach_attr+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b952:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    b954:	b13c      	cbz	r4, b966 <bt_gatt_foreach_attr+0x4a>
    b956:	3c08      	subs	r4, #8
    b958:	e7ec      	b.n	b934 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    b95a:	42b1      	cmp	r1, r6
    b95c:	d8f4      	bhi.n	b948 <bt_gatt_foreach_attr+0x2c>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    b95e:	4641      	mov	r1, r8
    b960:	47b8      	blx	r7
    b962:	2800      	cmp	r0, #0
    b964:	d1f0      	bne.n	b948 <bt_gatt_foreach_attr+0x2c>
}
    b966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b96a:	bf00      	nop
    b96c:	20000b0c 	.word	0x20000b0c

0000b970 <db_hash_gen>:
{
    b970:	b500      	push	{lr}
    b972:	b0c9      	sub	sp, #292	; 0x124
	u8_t key[16] = {};
    b974:	2210      	movs	r2, #16
    b976:	2100      	movs	r1, #0
    b978:	4668      	mov	r0, sp
    b97a:	f00e fbbf 	bl	1a0fc <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    b97e:	aa1c      	add	r2, sp, #112	; 0x70
    b980:	4669      	mov	r1, sp
    b982:	a804      	add	r0, sp, #16
    b984:	f00d fc07 	bl	19196 <tc_cmac_setup>
    b988:	b150      	cbz	r0, b9a0 <db_hash_gen+0x30>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    b98a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b98e:	2001      	movs	r0, #1
    b990:	ab04      	add	r3, sp, #16
    b992:	4a05      	ldr	r2, [pc, #20]	; (b9a8 <db_hash_gen+0x38>)
    b994:	f7ff ffc2 	bl	b91c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    b998:	a904      	add	r1, sp, #16
    b99a:	4804      	ldr	r0, [pc, #16]	; (b9ac <db_hash_gen+0x3c>)
    b99c:	f00d fc91 	bl	192c2 <tc_cmac_final>
}
    b9a0:	b049      	add	sp, #292	; 0x124
    b9a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b9a6:	bf00      	nop
    b9a8:	0001b21f 	.word	0x0001b21f
    b9ac:	20002568 	.word	0x20002568

0000b9b0 <bt_gatt_init>:
{
    b9b0:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b9b2:	4b11      	ldr	r3, [pc, #68]	; (b9f8 <bt_gatt_init+0x48>)
    b9b4:	f3bf 8f5b 	dmb	ish
    b9b8:	2201      	movs	r2, #1
    b9ba:	e853 1f00 	ldrex	r1, [r3]
    b9be:	2900      	cmp	r1, #0
    b9c0:	d103      	bne.n	b9ca <bt_gatt_init+0x1a>
    b9c2:	e843 2000 	strex	r0, r2, [r3]
    b9c6:	2800      	cmp	r0, #0
    b9c8:	d1f7      	bne.n	b9ba <bt_gatt_init+0xa>
    b9ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    b9ce:	d111      	bne.n	b9f4 <bt_gatt_init+0x44>
	gatt_register(&gatt_svc);
    b9d0:	480a      	ldr	r0, [pc, #40]	; (b9fc <bt_gatt_init+0x4c>)
    b9d2:	f7ff fd0b 	bl	b3ec <gatt_register>
	gatt_register(&gap_svc);
    b9d6:	480a      	ldr	r0, [pc, #40]	; (ba00 <bt_gatt_init+0x50>)
    b9d8:	f7ff fd08 	bl	b3ec <gatt_register>
	k_delayed_work_init(&db_hash_work, db_hash_process);
    b9dc:	4909      	ldr	r1, [pc, #36]	; (ba04 <bt_gatt_init+0x54>)
    b9de:	480a      	ldr	r0, [pc, #40]	; (ba08 <bt_gatt_init+0x58>)
    b9e0:	f014 f89c 	bl	1fb1c <k_delayed_work_init>
	db_hash_gen();
    b9e4:	f7ff ffc4 	bl	b970 <db_hash_gen>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    b9e8:	4908      	ldr	r1, [pc, #32]	; (ba0c <bt_gatt_init+0x5c>)
    b9ea:	4809      	ldr	r0, [pc, #36]	; (ba10 <bt_gatt_init+0x60>)
}
    b9ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    b9f0:	f014 b894 	b.w	1fb1c <k_delayed_work_init>
}
    b9f4:	bd08      	pop	{r3, pc}
    b9f6:	bf00      	nop
    b9f8:	20000b80 	.word	0x20000b80
    b9fc:	20008830 	.word	0x20008830
    ba00:	20008784 	.word	0x20008784
    ba04:	0001b6cb 	.word	0x0001b6cb
    ba08:	20000b14 	.word	0x20000b14
    ba0c:	0000bab9 	.word	0x0000bab9
    ba10:	20000b5c 	.word	0x20000b5c

0000ba14 <ccc_set>:
{
    ba14:	b530      	push	{r4, r5, lr}
	if (argc < 1) {
    ba16:	2800      	cmp	r0, #0
{
    ba18:	b0b5      	sub	sp, #212	; 0xd4
    ba1a:	460c      	mov	r4, r1
    ba1c:	4615      	mov	r5, r2
	if (argc < 1) {
    ba1e:	dc03      	bgt.n	ba28 <ccc_set+0x14>
		return -EINVAL;
    ba20:	f06f 0015 	mvn.w	r0, #21
}
    ba24:	b035      	add	sp, #212	; 0xd4
    ba26:	bd30      	pop	{r4, r5, pc}
	} else if (argc == 1) {
    ba28:	2801      	cmp	r0, #1
    ba2a:	d121      	bne.n	ba70 <ccc_set+0x5c>
		load.id = BT_ID_DEFAULT;
    ba2c:	2300      	movs	r3, #0
    ba2e:	f88d 3000 	strb.w	r3, [sp]
	err = bt_settings_decode_key(argv[0], &load.addr);
    ba32:	f10d 0101 	add.w	r1, sp, #1
    ba36:	6820      	ldr	r0, [r4, #0]
    ba38:	f00e fbc6 	bl	1a1c8 <bt_settings_decode_key>
	if (err) {
    ba3c:	2800      	cmp	r0, #0
    ba3e:	d1ef      	bne.n	ba20 <ccc_set+0xc>
	if (settings_val_get_len_cb(val_ctx)) {
    ba40:	4628      	mov	r0, r5
    ba42:	f00e f959 	bl	19cf8 <settings_val_get_len_cb>
    ba46:	b1d8      	cbz	r0, ba80 <ccc_set+0x6c>
		len = settings_val_read_cb(val_ctx, ccc_store,
    ba48:	ac04      	add	r4, sp, #16
    ba4a:	22c0      	movs	r2, #192	; 0xc0
    ba4c:	4621      	mov	r1, r4
    ba4e:	4628      	mov	r0, r5
    ba50:	f00e f935 	bl	19cbe <settings_val_read_cb>
		if (len < 0) {
    ba54:	2800      	cmp	r0, #0
    ba56:	dbe5      	blt.n	ba24 <ccc_set+0x10>
		load.entry = ccc_store;
    ba58:	9402      	str	r4, [sp, #8]
		load.count = len / sizeof(*ccc_store);
    ba5a:	0880      	lsrs	r0, r0, #2
		load.count = 0;
    ba5c:	9003      	str	r0, [sp, #12]
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    ba5e:	466b      	mov	r3, sp
    ba60:	2001      	movs	r0, #1
    ba62:	4a08      	ldr	r2, [pc, #32]	; (ba84 <ccc_set+0x70>)
    ba64:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ba68:	f7ff ff58 	bl	b91c <bt_gatt_foreach_attr>
	return 0;
    ba6c:	2000      	movs	r0, #0
    ba6e:	e7d9      	b.n	ba24 <ccc_set+0x10>
		load.id = strtol(argv[1], NULL, 10);
    ba70:	220a      	movs	r2, #10
    ba72:	2100      	movs	r1, #0
    ba74:	6860      	ldr	r0, [r4, #4]
    ba76:	f00e fa74 	bl	19f62 <strtol>
    ba7a:	f88d 0000 	strb.w	r0, [sp]
    ba7e:	e7d8      	b.n	ba32 <ccc_set+0x1e>
		load.entry = NULL;
    ba80:	9002      	str	r0, [sp, #8]
    ba82:	e7eb      	b.n	ba5c <ccc_set+0x48>
    ba84:	0000b489 	.word	0x0000b489

0000ba88 <bt_gatt_indicate.part.13>:
int bt_gatt_indicate(struct bt_conn *conn,
    ba88:	b500      	push	{lr}
    ba8a:	b089      	sub	sp, #36	; 0x24
	nfy.err = -ENOTCONN;
    ba8c:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    ba90:	9007      	str	r0, [sp, #28]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    ba92:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    ba94:	9301      	str	r3, [sp, #4]
	nfy.type = BT_GATT_CCC_INDICATE;
    ba96:	2302      	movs	r3, #2
    ba98:	f8ad 3008 	strh.w	r3, [sp, #8]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    ba9c:	4a05      	ldr	r2, [pc, #20]	; (bab4 <bt_gatt_indicate.part.13+0x2c>)
    ba9e:	8a00      	ldrh	r0, [r0, #16]
    baa0:	ab01      	add	r3, sp, #4
    baa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    baa6:	f7ff ff39 	bl	b91c <bt_gatt_foreach_attr>
}
    baaa:	9801      	ldr	r0, [sp, #4]
    baac:	b009      	add	sp, #36	; 0x24
    baae:	f85d fb04 	ldr.w	pc, [sp], #4
    bab2:	bf00      	nop
    bab4:	0000b7a1 	.word	0x0000b7a1

0000bab8 <sc_process>:
{
    bab8:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    baba:	f850 2c04 	ldr.w	r2, [r0, #-4]
    babe:	9201      	str	r2, [sp, #4]
{
    bac0:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    bac2:	f103 0420 	add.w	r4, r3, #32
    bac6:	3828      	subs	r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bac8:	f3bf 8f5b 	dmb	ish
    bacc:	e854 2f00 	ldrex	r2, [r4]
    bad0:	f022 0201 	bic.w	r2, r2, #1
    bad4:	e844 2100 	strex	r1, r2, [r4]
    bad8:	2900      	cmp	r1, #0
    bada:	d1f7      	bne.n	bacc <sc_process+0x14>
    badc:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
    bae0:	2200      	movs	r2, #0
    bae2:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0U;
    bae6:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    baea:	4a0a      	ldr	r2, [pc, #40]	; (bb14 <sc_process+0x5c>)
    baec:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    baf0:	4a09      	ldr	r2, [pc, #36]	; (bb18 <sc_process+0x60>)
    baf2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    baf6:	aa01      	add	r2, sp, #4
    baf8:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    bafc:	2204      	movs	r2, #4
    bafe:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (conn) {
    bb02:	f7ff ffc1 	bl	ba88 <bt_gatt_indicate.part.13>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    bb06:	b918      	cbnz	r0, bb10 <sc_process+0x58>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    bb08:	2101      	movs	r1, #1
    bb0a:	4620      	mov	r0, r4
    bb0c:	f00f fb78 	bl	1b200 <atomic_set_bit>
}
    bb10:	b002      	add	sp, #8
    bb12:	bd10      	pop	{r4, pc}
    bb14:	200087b8 	.word	0x200087b8
    bb18:	0000b555 	.word	0x0000b555

0000bb1c <bt_gatt_notify_cb>:
{
    bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb20:	460c      	mov	r4, r1
    bb22:	b08a      	sub	sp, #40	; 0x28
    bb24:	461d      	mov	r5, r3
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    bb26:	2300      	movs	r3, #0
{
    bb28:	4680      	mov	r8, r0
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    bb2a:	f88d 3008 	strb.w	r3, [sp, #8]
    bb2e:	a902      	add	r1, sp, #8
    bb30:	f642 0303 	movw	r3, #10243	; 0x2803
    bb34:	6820      	ldr	r0, [r4, #0]
{
    bb36:	9f10      	ldr	r7, [sp, #64]	; 0x40
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    bb38:	f8ad 300a 	strh.w	r3, [sp, #10]
{
    bb3c:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    bb3e:	f00e fb76 	bl	1a22e <bt_uuid_cmp>
    bb42:	b920      	cbnz	r0, bb4e <bt_gatt_notify_cb+0x32>
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    bb44:	68e3      	ldr	r3, [r4, #12]
    bb46:	791b      	ldrb	r3, [r3, #4]
    bb48:	06db      	lsls	r3, r3, #27
    bb4a:	d521      	bpl.n	bb90 <bt_gatt_notify_cb+0x74>
		attr++;
    bb4c:	3414      	adds	r4, #20
	if (conn) {
    bb4e:	8a20      	ldrh	r0, [r4, #16]
    bb50:	f1b8 0f00 	cmp.w	r8, #0
    bb54:	d009      	beq.n	bb6a <bt_gatt_notify_cb+0x4e>
		return gatt_notify(conn, attr->handle, data,
    bb56:	4601      	mov	r1, r0
    bb58:	9700      	str	r7, [sp, #0]
    bb5a:	462b      	mov	r3, r5
    bb5c:	4632      	mov	r2, r6
    bb5e:	4640      	mov	r0, r8
    bb60:	f00f fbb0 	bl	1b2c4 <gatt_notify>
}
    bb64:	b00a      	add	sp, #40	; 0x28
    bb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nfy.err = -ENOTCONN;
    bb6a:	f06f 0338 	mvn.w	r3, #56	; 0x38
    bb6e:	9303      	str	r3, [sp, #12]
	nfy.type = BT_GATT_CCC_NOTIFY;
    bb70:	2301      	movs	r3, #1
    bb72:	f8ad 3010 	strh.w	r3, [sp, #16]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    bb76:	4a08      	ldr	r2, [pc, #32]	; (bb98 <bt_gatt_notify_cb+0x7c>)
	nfy.data = data;
    bb78:	9607      	str	r6, [sp, #28]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    bb7a:	ab03      	add	r3, sp, #12
    bb7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	nfy.func = func;
    bb80:	e9cd 4705 	strd	r4, r7, [sp, #20]
	nfy.len = len;
    bb84:	f8ad 5020 	strh.w	r5, [sp, #32]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    bb88:	f7ff fec8 	bl	b91c <bt_gatt_foreach_attr>
	return nfy.err;
    bb8c:	9803      	ldr	r0, [sp, #12]
    bb8e:	e7e9      	b.n	bb64 <bt_gatt_notify_cb+0x48>
			return -EINVAL;
    bb90:	f06f 0015 	mvn.w	r0, #21
    bb94:	e7e6      	b.n	bb64 <bt_gatt_notify_cb+0x48>
    bb96:	bf00      	nop
    bb98:	0000b7a1 	.word	0x0000b7a1

0000bb9c <bt_gatt_connected>:
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    bb9c:	4603      	mov	r3, r0
    bb9e:	4a03      	ldr	r2, [pc, #12]	; (bbac <bt_gatt_connected+0x10>)
    bba0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bba4:	2001      	movs	r0, #1
    bba6:	f7ff beb9 	b.w	b91c <bt_gatt_foreach_attr>
    bbaa:	bf00      	nop
    bbac:	0000b72d 	.word	0x0000b72d

0000bbb0 <db_hash_read>:
{
    bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbb2:	4604      	mov	r4, r0
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    bbb4:	4815      	ldr	r0, [pc, #84]	; (bc0c <db_hash_read+0x5c>)
    bbb6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    bbba:	4616      	mov	r6, r2
    bbbc:	461f      	mov	r7, r3
    bbbe:	f00b fb55 	bl	1726c <z_timeout_remaining>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    bbc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    bbc6:	2264      	movs	r2, #100	; 0x64
    bbc8:	2300      	movs	r3, #0
    bbca:	fb80 0101 	smull	r0, r1, r0, r1
    bbce:	f7f5 f835 	bl	c3c <__aeabi_uldivmod>
	if (k_delayed_work_remaining_get(&db_hash_work)) {
    bbd2:	b120      	cbz	r0, bbde <db_hash_read+0x2e>
		k_delayed_work_cancel(&db_hash_work);
    bbd4:	480e      	ldr	r0, [pc, #56]	; (bc10 <db_hash_read+0x60>)
    bbd6:	f013 ffa9 	bl	1fb2c <k_delayed_work_cancel>
		db_hash_gen();
    bbda:	f7ff fec9 	bl	b970 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    bbde:	2101      	movs	r1, #1
    bbe0:	4620      	mov	r0, r4
    bbe2:	f00f fd76 	bl	1b6d2 <bt_gatt_change_aware>
	if (offset > value_len) {
    bbe6:	2d10      	cmp	r5, #16
    bbe8:	d80c      	bhi.n	bc04 <db_hash_read+0x54>
	len = MIN(buf_len, value_len - offset);
    bbea:	f1c5 0410 	rsb	r4, r5, #16
    bbee:	42bc      	cmp	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    bbf0:	4908      	ldr	r1, [pc, #32]	; (bc14 <db_hash_read+0x64>)
	len = MIN(buf_len, value_len - offset);
    bbf2:	bfa8      	it	ge
    bbf4:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
    bbf6:	4622      	mov	r2, r4
    bbf8:	4429      	add	r1, r5
    bbfa:	4630      	mov	r0, r6
    bbfc:	f00e fa54 	bl	1a0a8 <memcpy>
}
    bc00:	4620      	mov	r0, r4
    bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    bc04:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    bc08:	e7fa      	b.n	bc00 <db_hash_read+0x50>
    bc0a:	bf00      	nop
    bc0c:	20000b20 	.word	0x20000b20
    bc10:	20000b14 	.word	0x20000b14
    bc14:	20002568 	.word	0x20002568

0000bc18 <bt_gatt_store_ccc>:
{
    bc18:	b570      	push	{r4, r5, r6, lr}
    bc1a:	b0be      	sub	sp, #248	; 0xf8
	save.count = 0;
    bc1c:	2300      	movs	r3, #0
{
    bc1e:	4605      	mov	r5, r0
    bc20:	460c      	mov	r4, r1
	save.addr = addr;
    bc22:	910c      	str	r1, [sp, #48]	; 0x30
	save.count = 0;
    bc24:	933d      	str	r3, [sp, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    bc26:	4a11      	ldr	r2, [pc, #68]	; (bc6c <bt_gatt_store_ccc+0x54>)
    bc28:	ab0c      	add	r3, sp, #48	; 0x30
    bc2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bc2e:	2001      	movs	r0, #1
    bc30:	f7ff fe74 	bl	b91c <bt_gatt_foreach_attr>
	if (id) {
    bc34:	b1b5      	cbz	r5, bc64 <bt_gatt_store_ccc+0x4c>
		snprintk(id_str, sizeof(id_str), "%u", id);
    bc36:	ae02      	add	r6, sp, #8
    bc38:	462b      	mov	r3, r5
    bc3a:	4a0d      	ldr	r2, [pc, #52]	; (bc70 <bt_gatt_store_ccc+0x58>)
    bc3c:	2104      	movs	r1, #4
    bc3e:	4630      	mov	r0, r6
    bc40:	f7fb f8a6 	bl	6d90 <snprintk>
		bt_settings_encode_key(key, sizeof(key), "ccc",
    bc44:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc",
    bc46:	4a0b      	ldr	r2, [pc, #44]	; (bc74 <bt_gatt_store_ccc+0x5c>)
    bc48:	4623      	mov	r3, r4
    bc4a:	2124      	movs	r1, #36	; 0x24
    bc4c:	a803      	add	r0, sp, #12
    bc4e:	f7fc ff8b 	bl	8b68 <bt_settings_encode_key>
	if (save.count) {
    bc52:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    bc54:	b142      	cbz	r2, bc68 <bt_gatt_store_ccc+0x50>
		len = save.count * sizeof(*save.store);
    bc56:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    bc58:	a90d      	add	r1, sp, #52	; 0x34
	err = settings_save_one(key, str, len);
    bc5a:	a803      	add	r0, sp, #12
    bc5c:	f7fb fca2 	bl	75a4 <settings_save_one>
}
    bc60:	b03e      	add	sp, #248	; 0xf8
    bc62:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc",
    bc64:	9500      	str	r5, [sp, #0]
    bc66:	e7ee      	b.n	bc46 <bt_gatt_store_ccc+0x2e>
		str = NULL;
    bc68:	4611      	mov	r1, r2
    bc6a:	e7f6      	b.n	bc5a <bt_gatt_store_ccc+0x42>
    bc6c:	0000b451 	.word	0x0000b451
    bc70:	00021ada 	.word	0x00021ada
    bc74:	00021b0b 	.word	0x00021b0b

0000bc78 <bt_gatt_disconnected>:
{
    bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc7a:	4604      	mov	r4, r0
    bc7c:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    bc7e:	4603      	mov	r3, r0
    bc80:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bc84:	2001      	movs	r0, #1
    bc86:	4a32      	ldr	r2, [pc, #200]	; (bd50 <bt_gatt_disconnected+0xd8>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    bc88:	f104 0648 	add.w	r6, r4, #72	; 0x48
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    bc8c:	f7ff fe46 	bl	b91c <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    bc90:	4631      	mov	r1, r6
    bc92:	7a20      	ldrb	r0, [r4, #8]
    bc94:	f00e fd23 	bl	1a6de <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    bc98:	b350      	cbz	r0, bcf0 <bt_gatt_disconnected+0x78>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    bc9a:	4631      	mov	r1, r6
    bc9c:	7a20      	ldrb	r0, [r4, #8]
    bc9e:	f7ff ffbb 	bl	bc18 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    bca2:	4620      	mov	r0, r4
    bca4:	f7ff fc3c 	bl	b520 <find_cf_cfg>
	if (!cfg) {
    bca8:	4605      	mov	r5, r0
    bcaa:	2800      	cmp	r0, #0
    bcac:	d046      	beq.n	bd3c <bt_gatt_disconnected+0xc4>
		if (conn->id) {
    bcae:	7a23      	ldrb	r3, [r4, #8]
		str = (char *)cfg->data;
    bcb0:	3508      	adds	r5, #8
		if (conn->id) {
    bcb2:	2b00      	cmp	r3, #0
    bcb4:	d044      	beq.n	bd40 <bt_gatt_disconnected+0xc8>
			snprintk(id_str, sizeof(id_str), "%u", conn->id);
    bcb6:	af02      	add	r7, sp, #8
    bcb8:	4a26      	ldr	r2, [pc, #152]	; (bd54 <bt_gatt_disconnected+0xdc>)
    bcba:	2104      	movs	r1, #4
    bcbc:	4638      	mov	r0, r7
    bcbe:	f7fb f867 	bl	6d90 <snprintk>
			bt_settings_encode_key(key, sizeof(key), "cf",
    bcc2:	9700      	str	r7, [sp, #0]
    bcc4:	4633      	mov	r3, r6
    bcc6:	4a24      	ldr	r2, [pc, #144]	; (bd58 <bt_gatt_disconnected+0xe0>)
    bcc8:	2124      	movs	r1, #36	; 0x24
    bcca:	a803      	add	r0, sp, #12
    bccc:	f7fc ff4c 	bl	8b68 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    bcd0:	7a23      	ldrb	r3, [r4, #8]
    bcd2:	2701      	movs	r7, #1
    bcd4:	b93b      	cbnz	r3, bce6 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    bcd6:	2300      	movs	r3, #0
    bcd8:	9300      	str	r3, [sp, #0]
    bcda:	4a1f      	ldr	r2, [pc, #124]	; (bd58 <bt_gatt_disconnected+0xe0>)
    bcdc:	4633      	mov	r3, r6
    bcde:	2124      	movs	r1, #36	; 0x24
    bce0:	a803      	add	r0, sp, #12
    bce2:	f7fc ff41 	bl	8b68 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    bce6:	463a      	mov	r2, r7
    bce8:	4629      	mov	r1, r5
    bcea:	a803      	add	r0, sp, #12
    bcec:	f7fb fc5a 	bl	75a4 <settings_save_one>
	cfg = find_cf_cfg(conn);
    bcf0:	4620      	mov	r0, r4
    bcf2:	f7ff fc15 	bl	b520 <find_cf_cfg>
	if (!cfg) {
    bcf6:	4605      	mov	r5, r0
    bcf8:	b1f0      	cbz	r0, bd38 <bt_gatt_disconnected+0xc0>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    bcfa:	7a20      	ldrb	r0, [r4, #8]
    bcfc:	4631      	mov	r1, r6
    bcfe:	f00e fcee 	bl	1a6de <bt_addr_le_is_bonded>
    bd02:	1c6b      	adds	r3, r5, #1
    bd04:	4604      	mov	r4, r0
    bd06:	b9e8      	cbnz	r0, bd44 <bt_gatt_disconnected+0xcc>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    bd08:	9003      	str	r0, [sp, #12]
    bd0a:	a903      	add	r1, sp, #12
    bd0c:	f8cd 000f 	str.w	r0, [sp, #15]
    bd10:	4618      	mov	r0, r3
    bd12:	f00f fa72 	bl	1b1fa <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
    bd16:	f105 0008 	add.w	r0, r5, #8
    bd1a:	2201      	movs	r2, #1
    bd1c:	4621      	mov	r1, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bd1e:	350c      	adds	r5, #12
    bd20:	f00e f9ec 	bl	1a0fc <memset>
    bd24:	f3bf 8f5b 	dmb	ish
    bd28:	e855 3f00 	ldrex	r3, [r5]
    bd2c:	e845 4200 	strex	r2, r4, [r5]
    bd30:	2a00      	cmp	r2, #0
    bd32:	d1f9      	bne.n	bd28 <bt_gatt_disconnected+0xb0>
    bd34:	f3bf 8f5b 	dmb	ish
}
    bd38:	b00d      	add	sp, #52	; 0x34
    bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    bd3c:	4607      	mov	r7, r0
    bd3e:	e7ca      	b.n	bcd6 <bt_gatt_disconnected+0x5e>
		if (conn->id) {
    bd40:	2701      	movs	r7, #1
    bd42:	e7c8      	b.n	bcd6 <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    bd44:	4631      	mov	r1, r6
    bd46:	4618      	mov	r0, r3
    bd48:	f00f fa57 	bl	1b1fa <bt_addr_le_copy>
}
    bd4c:	e7f4      	b.n	bd38 <bt_gatt_disconnected+0xc0>
    bd4e:	bf00      	nop
    bd50:	0000b299 	.word	0x0000b299
    bd54:	00021ada 	.word	0x00021ada
    bd58:	00021b08 	.word	0x00021b08

0000bd5c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    bd5c:	4b04      	ldr	r3, [pc, #16]	; (bd70 <bt_smp_accept+0x14>)
    bd5e:	6818      	ldr	r0, [r3, #0]
    bd60:	b918      	cbnz	r0, bd6a <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    bd62:	4a04      	ldr	r2, [pc, #16]	; (bd74 <bt_smp_accept+0x18>)
    bd64:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    bd66:	600b      	str	r3, [r1, #0]

		return 0;
    bd68:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    bd6a:	f06f 000b 	mvn.w	r0, #11
}
    bd6e:	4770      	bx	lr
    bd70:	20000b94 	.word	0x20000b94
    bd74:	20008848 	.word	0x20008848

0000bd78 <bt_smp_init>:

int bt_smp_init(void)
{
    bd78:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    bd7a:	4802      	ldr	r0, [pc, #8]	; (bd84 <bt_smp_init+0xc>)
    bd7c:	f7fe fda2 	bl	a8c4 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    bd80:	2000      	movs	r0, #0
    bd82:	bd08      	pop	{r3, pc}
    bd84:	2000883c 	.word	0x2000883c

0000bd88 <atomic_test_bit.constprop.3>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bd88:	4b04      	ldr	r3, [pc, #16]	; (bd9c <atomic_test_bit.constprop.3+0x14>)
    bd8a:	f3bf 8f5b 	dmb	ish
    bd8e:	6818      	ldr	r0, [r3, #0]
    bd90:	f3bf 8f5b 	dmb	ish
}
    bd94:	f000 0001 	and.w	r0, r0, #1
    bd98:	4770      	bx	lr
    bd9a:	bf00      	nop
    bd9c:	20008864 	.word	0x20008864

0000bda0 <bt_mesh_provision>:
#include "mesh.h"

int bt_mesh_provision(const u8_t net_key[16], u16_t net_idx,
		      u8_t flags, u32_t iv_index, u16_t addr,
		      const u8_t dev_key[16])
{
    bda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bda4:	4c25      	ldr	r4, [pc, #148]	; (be3c <bt_mesh_provision+0x9c>)
    bda6:	f3bf 8f5b 	dmb	ish
    bdaa:	4680      	mov	r8, r0
    bdac:	460d      	mov	r5, r1
    bdae:	4617      	mov	r7, r2
    bdb0:	4699      	mov	r9, r3
    bdb2:	e854 3f00 	ldrex	r3, [r4]
    bdb6:	f043 0201 	orr.w	r2, r3, #1
    bdba:	e844 2100 	strex	r1, r2, [r4]
    bdbe:	2900      	cmp	r1, #0
    bdc0:	d1f7      	bne.n	bdb2 <bt_mesh_provision+0x12>
    bdc2:	f3bf 8f5b 	dmb	ish

	BT_INFO("Primary Element: 0x%04x", addr);
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
	       net_idx, flags, iv_index);

	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    bdc6:	07db      	lsls	r3, r3, #31
    bdc8:	d434      	bmi.n	be34 <bt_mesh_provision+0x94>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		if (bt_mesh_proxy_prov_disable() == 0) {
    bdca:	f005 f983 	bl	110d4 <bt_mesh_proxy_prov_disable>
		}
	} else {
		pb_gatt_enabled = false;
	}

	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    bdce:	464b      	mov	r3, r9
		if (bt_mesh_proxy_prov_disable() == 0) {
    bdd0:	4606      	mov	r6, r0
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    bdd2:	4642      	mov	r2, r8
    bdd4:	4628      	mov	r0, r5
    bdd6:	4639      	mov	r1, r7
    bdd8:	f000 fcd6 	bl	c788 <bt_mesh_net_create>
	if (err) {
    bddc:	4605      	mov	r5, r0
    bdde:	b188      	cbz	r0, be04 <bt_mesh_provision+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bde0:	f3bf 8f5b 	dmb	ish
    bde4:	e854 3f00 	ldrex	r3, [r4]
    bde8:	f023 0301 	bic.w	r3, r3, #1
    bdec:	e844 3200 	strex	r2, r3, [r4]
    bdf0:	2a00      	cmp	r2, #0
    bdf2:	d1f7      	bne.n	bde4 <bt_mesh_provision+0x44>
    bdf4:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_mesh.flags, BT_MESH_VALID);

		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) && pb_gatt_enabled) {
    bdf8:	b90e      	cbnz	r6, bdfe <bt_mesh_provision+0x5e>
			bt_mesh_proxy_prov_enable();
    bdfa:	f005 f949 	bl	11090 <bt_mesh_proxy_prov_enable>
	}

	bt_mesh_net_start();

	return 0;
}
    bdfe:	4628      	mov	r0, r5
    be00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bt_mesh.seq = 0U;
    be04:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    be08:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    be0c:	f002 fad6 	bl	e3bc <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    be10:	2210      	movs	r2, #16
    be12:	9909      	ldr	r1, [sp, #36]	; 0x24
    be14:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    be18:	f00e f946 	bl	1a0a8 <memcpy>
		bt_mesh_store_net();
    be1c:	f012 f998 	bl	1e150 <bt_mesh_store_net>
		bt_mesh_store_subnet(&bt_mesh.sub[0]);
    be20:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    be24:	f012 f9a8 	bl	1e178 <bt_mesh_store_subnet>
		bt_mesh_store_iv(false);
    be28:	4628      	mov	r0, r5
    be2a:	f012 f994 	bl	1e156 <bt_mesh_store_iv>
	bt_mesh_net_start();
    be2e:	f001 f9b7 	bl	d1a0 <bt_mesh_net_start>
	return 0;
    be32:	e7e4      	b.n	bdfe <bt_mesh_provision+0x5e>
		return -EALREADY;
    be34:	f06f 0544 	mvn.w	r5, #68	; 0x44
    be38:	e7e1      	b.n	bdfe <bt_mesh_provision+0x5e>
    be3a:	bf00      	nop
    be3c:	20008864 	.word	0x20008864

0000be40 <bt_mesh_reset>:

void bt_mesh_reset(void)
{
    be40:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    be42:	f7ff ffa1 	bl	bd88 <atomic_test_bit.constprop.3>
    be46:	b338      	cbz	r0, be98 <bt_mesh_reset+0x58>
		return;
	}

	bt_mesh.iv_index = 0U;
    be48:	4c14      	ldr	r4, [pc, #80]	; (be9c <bt_mesh_reset+0x5c>)
    be4a:	2500      	movs	r5, #0
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    be4c:	4629      	mov	r1, r5
    be4e:	2204      	movs	r2, #4
    be50:	f104 0008 	add.w	r0, r4, #8
	bt_mesh.seq = 0U;
    be54:	e9c4 5500 	strd	r5, r5, [r4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    be58:	f00e f950 	bl	1a0fc <memset>

	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    be5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    be60:	f013 fe64 	bl	1fb2c <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    be64:	f003 f970 	bl	f148 <bt_mesh_cfg_reset>

	bt_mesh_rx_reset();
    be68:	f002 f814 	bl	de94 <bt_mesh_rx_reset>
	bt_mesh_tx_reset();
    be6c:	f002 f848 	bl	df00 <bt_mesh_tx_reset>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
    be70:	f005 f980 	bl	11174 <bt_mesh_proxy_gatt_disable>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_clear_net();
    be74:	f012 f9ce 	bl	1e214 <bt_mesh_clear_net>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    be78:	4629      	mov	r1, r5
    be7a:	2210      	movs	r2, #16
    be7c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    be80:	f00e f93c 	bl	1a0fc <memset>

	bt_mesh_scan_disable();
    be84:	f00f fce4 	bl	1b850 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    be88:	f000 fb52 	bl	c530 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    be8c:	f002 faac 	bl	e3e8 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    be90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    be94:	f004 bf20 	b.w	10cd8 <bt_mesh_prov_reset>
}
    be98:	bd38      	pop	{r3, r4, r5, pc}
    be9a:	bf00      	nop
    be9c:	2000885c 	.word	0x2000885c

0000bea0 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    bea0:	4b02      	ldr	r3, [pc, #8]	; (beac <adv_alloc+0xc>)
    bea2:	220c      	movs	r2, #12
    bea4:	fb02 3000 	mla	r0, r2, r0, r3
    bea8:	4770      	bx	lr
    beaa:	bf00      	nop
    beac:	20000c20 	.word	0x20000c20

0000beb0 <adv_thread>:
						thread->stack_info.size);
#endif
}

static void adv_thread(void *p1, void *p2, void *p3)
{
    beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	while (1) {
		struct net_buf *buf;

		if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
    beb4:	4f3c      	ldr	r7, [pc, #240]	; (bfa8 <adv_thread+0xf8>)
	const s32_t adv_int_min = ((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
    beb6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; bfb4 <adv_thread+0x104>
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    beba:	f8df a0fc 	ldr.w	sl, [pc, #252]	; bfb8 <adv_thread+0x108>
{
    bebe:	b087      	sub	sp, #28
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
    bec0:	2100      	movs	r1, #0
    bec2:	4638      	mov	r0, r7
    bec4:	f013 f89c 	bl	1f000 <net_buf_get>
    bec8:	4605      	mov	r5, r0
			while (!buf) {
    beca:	2d00      	cmp	r5, #0
    becc:	d061      	beq.n	bf92 <adv_thread+0xe2>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
    bece:	696a      	ldr	r2, [r5, #20]
    bed0:	7a13      	ldrb	r3, [r2, #8]
    bed2:	0759      	lsls	r1, r3, #29
    bed4:	d556      	bpl.n	bf84 <adv_thread+0xd4>
			BT_MESH_ADV(buf)->busy = 0U;
    bed6:	f36f 0382 	bfc	r3, #2, #1
    beda:	7213      	strb	r3, [r2, #8]
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
    bedc:	6969      	ldr	r1, [r5, #20]
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    bede:	f899 3010 	ldrb.w	r3, [r9, #16]
	adv_int = MAX(adv_int_min,
    bee2:	7a4c      	ldrb	r4, [r1, #9]
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    bee4:	2b08      	cmp	r3, #8
	adv_int = MAX(adv_int_min,
    bee6:	ea4f 03d4 	mov.w	r3, r4, lsr #3
    beea:	f103 0301 	add.w	r3, r3, #1
    beee:	f04f 000a 	mov.w	r0, #10
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    bef2:	bf8c      	ite	hi
    bef4:	2214      	movhi	r2, #20
    bef6:	2264      	movls	r2, #100	; 0x64
	adv_int = MAX(adv_int_min,
    bef8:	4358      	muls	r0, r3
    befa:	4290      	cmp	r0, r2
    befc:	bfa6      	itte	ge
    befe:	eb03 0383 	addge.w	r3, r3, r3, lsl #2
    bf02:	005a      	lslge	r2, r3, #1
    bf04:	b292      	uxthlt	r2, r2
		    ((BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1) *
    bf06:	f004 0307 	and.w	r3, r4, #7
		     (adv_int + 10)));
    bf0a:	f102 040a 	add.w	r4, r2, #10
	duration = (MESH_SCAN_WINDOW_MS +
    bf0e:	fb03 4404 	mla	r4, r3, r4, r4
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    bf12:	7a0b      	ldrb	r3, [r1, #8]
    bf14:	f003 0303 	and.w	r3, r3, #3
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
    bf18:	e9d1 6800 	ldrd	r6, r8, [r1]
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    bf1c:	f81a 3003 	ldrb.w	r3, [sl, r3]
    bf20:	f88d 3010 	strb.w	r3, [sp, #16]
	ad.data_len = buf->len;
    bf24:	89ab      	ldrh	r3, [r5, #12]
    bf26:	f88d 3011 	strb.w	r3, [sp, #17]
	ad.data = buf->data;
    bf2a:	68ab      	ldr	r3, [r5, #8]
    bf2c:	9305      	str	r3, [sp, #20]
	param.id = BT_ID_DEFAULT;
    bf2e:	2300      	movs	r3, #0
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    bf30:	2105      	movs	r1, #5
    bf32:	00d2      	lsls	r2, r2, #3
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bf34:	9300      	str	r3, [sp, #0]
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    bf36:	fbb2 f2f1 	udiv	r2, r2, r1
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bf3a:	a802      	add	r0, sp, #8
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    bf3c:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.interval_max = param.interval_min;
    bf40:	f8ad 200c 	strh.w	r2, [sp, #12]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bf44:	a904      	add	r1, sp, #16
    bf46:	2201      	movs	r2, #1
	param.id = BT_ID_DEFAULT;
    bf48:	f8ad 3008 	strh.w	r3, [sp, #8]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bf4c:	f00e fbc9 	bl	1a6e2 <bt_le_adv_start>
	duration = (MESH_SCAN_WINDOW_MS +
    bf50:	341e      	adds	r4, #30
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    bf52:	4683      	mov	fp, r0
	net_buf_unref(buf);
    bf54:	4628      	mov	r0, r5
	duration = (MESH_SCAN_WINDOW_MS +
    bf56:	b224      	sxth	r4, r4
	net_buf_unref(buf);
    bf58:	f009 fcd4 	bl	15904 <net_buf_unref>
	if (cb && cb->start) {
    bf5c:	b12e      	cbz	r6, bf6a <adv_thread+0xba>
    bf5e:	6833      	ldr	r3, [r6, #0]
    bf60:	b11b      	cbz	r3, bf6a <adv_thread+0xba>
		cb->start(duration, err, cb_data);
    bf62:	b2a0      	uxth	r0, r4
    bf64:	4642      	mov	r2, r8
    bf66:	4659      	mov	r1, fp
    bf68:	4798      	blx	r3
	if (err) {
    bf6a:	f1bb 0f00 	cmp.w	fp, #0
    bf6e:	d109      	bne.n	bf84 <adv_thread+0xd4>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    bf70:	4620      	mov	r0, r4
    bf72:	f00a ff01 	bl	16d78 <z_impl_k_sleep>
	err = bt_le_adv_stop();
    bf76:	f7fd ff2d 	bl	9dd4 <bt_le_adv_stop>
	if (cb && cb->end) {
    bf7a:	b11e      	cbz	r6, bf84 <adv_thread+0xd4>
    bf7c:	6873      	ldr	r3, [r6, #4]
    bf7e:	b10b      	cbz	r3, bf84 <adv_thread+0xd4>
		cb->end(err, cb_data);
    bf80:	4641      	mov	r1, r8
    bf82:	4798      	blx	r3
			adv_send(buf);
		}

		STACK_ANALYZE("adv stack", adv_thread_stack);
		k_thread_foreach(adv_stack_dump, "BT_MESH");
    bf84:	4909      	ldr	r1, [pc, #36]	; (bfac <adv_thread+0xfc>)
    bf86:	480a      	ldr	r0, [pc, #40]	; (bfb0 <adv_thread+0x100>)
    bf88:	f013 fd40 	bl	1fa0c <k_thread_foreach>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    bf8c:	f00a feae 	bl	16cec <z_impl_k_yield>
    bf90:	e796      	b.n	bec0 <adv_thread+0x10>
				timeout = bt_mesh_proxy_adv_start();
    bf92:	f005 f95d 	bl	11250 <bt_mesh_proxy_adv_start>
				buf = net_buf_get(&adv_queue, timeout);
    bf96:	4601      	mov	r1, r0
    bf98:	4638      	mov	r0, r7
    bf9a:	f013 f831 	bl	1f000 <net_buf_get>
    bf9e:	4605      	mov	r5, r0
				bt_mesh_proxy_adv_stop();
    bfa0:	f005 fa86 	bl	114b0 <bt_mesh_proxy_adv_stop>
    bfa4:	e791      	b.n	beca <adv_thread+0x1a>
    bfa6:	bf00      	nop
    bfa8:	2000945c 	.word	0x2000945c
    bfac:	00021b0f 	.word	0x00021b0f
    bfb0:	0001b7d5 	.word	0x0001b7d5
    bfb4:	20007c60 	.word	0x20007c60
    bfb8:	00021b17 	.word	0x00021b17

0000bfbc <bt_mesh_adv_update>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_CANCEL_WAIT, k_queue_cancel_wait, struct k_queue *, queue)
    bfbc:	4801      	ldr	r0, [pc, #4]	; (bfc4 <bt_mesh_adv_update+0x8>)
    bfbe:	f013 bb8c 	b.w	1f6da <z_impl_k_queue_cancel_wait>
    bfc2:	bf00      	nop
    bfc4:	2000945c 	.word	0x2000945c

0000bfc8 <bt_mesh_adv_create_from_pool>:

struct net_buf *bt_mesh_adv_create_from_pool(struct net_buf_pool *pool,
					     bt_mesh_adv_alloc_t get_id,
					     enum bt_mesh_adv_type type,
					     u8_t xmit, s32_t timeout)
{
    bfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfcc:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bfce:	4b11      	ldr	r3, [pc, #68]	; (c014 <bt_mesh_adv_create_from_pool+0x4c>)
    bfd0:	f3bf 8f5b 	dmb	ish
    bfd4:	681d      	ldr	r5, [r3, #0]
    bfd6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    bfda:	f3c5 0540 	ubfx	r5, r5, #1, #1
    bfde:	460c      	mov	r4, r1
    bfe0:	4690      	mov	r8, r2
	struct bt_mesh_adv *adv;
	struct net_buf *buf;

	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    bfe2:	b9ad      	cbnz	r5, c010 <bt_mesh_adv_create_from_pool+0x48>
		BT_WARN("Refusing to allocate buffer while suspended");
		return NULL;
	}

	buf = net_buf_alloc(pool, timeout);
    bfe4:	9906      	ldr	r1, [sp, #24]
    bfe6:	f013 f805 	bl	1eff4 <net_buf_alloc_fixed>
	if (!buf) {
    bfea:	4606      	mov	r6, r0
    bfec:	b168      	cbz	r0, c00a <bt_mesh_adv_create_from_pool+0x42>
		return NULL;
	}

	adv = get_id(net_buf_id(buf));
    bfee:	f009 fbf5 	bl	157dc <net_buf_id>
    bff2:	47a0      	blx	r4
    bff4:	4604      	mov	r4, r0
	BT_MESH_ADV(buf) = adv;
    bff6:	6170      	str	r0, [r6, #20]

	(void)memset(adv, 0, sizeof(*adv));
    bff8:	220c      	movs	r2, #12
    bffa:	4629      	mov	r1, r5
    bffc:	f00e f87e 	bl	1a0fc <memset>

	adv->type         = type;
    c000:	7a23      	ldrb	r3, [r4, #8]
	adv->xmit         = xmit;
    c002:	7267      	strb	r7, [r4, #9]
	adv->type         = type;
    c004:	f368 0301 	bfi	r3, r8, #0, #2
    c008:	7223      	strb	r3, [r4, #8]

	return buf;
}
    c00a:	4630      	mov	r0, r6
    c00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
    c010:	2600      	movs	r6, #0
    c012:	e7fa      	b.n	c00a <bt_mesh_adv_create_from_pool+0x42>
    c014:	20008864 	.word	0x20008864

0000c018 <bt_mesh_adv_create>:

struct net_buf *bt_mesh_adv_create(enum bt_mesh_adv_type type, u8_t xmit,
				   s32_t timeout)
{
    c018:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    c01a:	460b      	mov	r3, r1
    c01c:	9200      	str	r2, [sp, #0]
    c01e:	4904      	ldr	r1, [pc, #16]	; (c030 <bt_mesh_adv_create+0x18>)
    c020:	4602      	mov	r2, r0
    c022:	4804      	ldr	r0, [pc, #16]	; (c034 <bt_mesh_adv_create+0x1c>)
    c024:	f7ff ffd0 	bl	bfc8 <bt_mesh_adv_create_from_pool>
					    xmit, timeout);
}
    c028:	b003      	add	sp, #12
    c02a:	f85d fb04 	ldr.w	pc, [sp], #4
    c02e:	bf00      	nop
    c030:	0000bea1 	.word	0x0000bea1
    c034:	2000949c 	.word	0x2000949c

0000c038 <bt_mesh_adv_send>:

void bt_mesh_adv_send(struct net_buf *buf, const struct bt_mesh_send_cb *cb,
		      void *cb_data)
{
    c038:	b510      	push	{r4, lr}
	BT_DBG("type 0x%02x len %u: %s", BT_MESH_ADV(buf)->type, buf->len,
	       bt_hex(buf->data, buf->len));

	BT_MESH_ADV(buf)->cb = cb;
    c03a:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    c03c:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    c040:	6942      	ldr	r2, [r0, #20]
    c042:	7a13      	ldrb	r3, [r2, #8]
    c044:	f043 0304 	orr.w	r3, r3, #4
    c048:	7213      	strb	r3, [r2, #8]

	net_buf_put(&adv_queue, net_buf_ref(buf));
    c04a:	f013 f853 	bl	1f0f4 <net_buf_ref>
}
    c04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_put(&adv_queue, net_buf_ref(buf));
    c052:	4601      	mov	r1, r0
    c054:	4801      	ldr	r0, [pc, #4]	; (c05c <bt_mesh_adv_send+0x24>)
    c056:	f013 b840 	b.w	1f0da <net_buf_put>
    c05a:	bf00      	nop
    c05c:	2000945c 	.word	0x2000945c

0000c060 <bt_mesh_adv_init>:
		net_buf_simple_pull(buf, len);
	}
}

void bt_mesh_adv_init(void)
{
    c060:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    c062:	4c0c      	ldr	r4, [pc, #48]	; (c094 <bt_mesh_adv_init+0x34>)
    c064:	490c      	ldr	r1, [pc, #48]	; (c098 <bt_mesh_adv_init+0x38>)
    c066:	b086      	sub	sp, #24
    c068:	2300      	movs	r3, #0
    c06a:	f06f 0208 	mvn.w	r2, #8
    c06e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    c072:	e9cd 3304 	strd	r3, r3, [sp, #16]
    c076:	e9cd 3300 	strd	r3, r3, [sp]
    c07a:	f44f 7240 	mov.w	r2, #768	; 0x300
    c07e:	4b07      	ldr	r3, [pc, #28]	; (c09c <bt_mesh_adv_init+0x3c>)
    c080:	4620      	mov	r0, r4
    c082:	f00a ff79 	bl	16f78 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    c086:	4906      	ldr	r1, [pc, #24]	; (c0a0 <bt_mesh_adv_init+0x40>)
    c088:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_THREAD_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
    c08a:	b006      	add	sp, #24
    c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c090:	f013 bcbd 	b.w	1fa0e <z_impl_k_thread_name_set>
    c094:	20000ef0 	.word	0x20000ef0
    c098:	20002ca0 	.word	0x20002ca0
    c09c:	0000beb1 	.word	0x0000beb1
    c0a0:	00021b1b 	.word	0x00021b1b

0000c0a4 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    c0a4:	b507      	push	{r0, r1, r2, lr}
	struct bt_le_scan_param scan_param = {
    c0a6:	4b06      	ldr	r3, [pc, #24]	; (c0c0 <bt_mesh_scan_enable+0x1c>)
			.interval   = MESH_SCAN_INTERVAL,
			.window     = MESH_SCAN_WINDOW };

	BT_DBG("");

	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    c0a8:	4906      	ldr	r1, [pc, #24]	; (c0c4 <bt_mesh_scan_enable+0x20>)
	struct bt_le_scan_param scan_param = {
    c0aa:	6818      	ldr	r0, [r3, #0]
    c0ac:	9000      	str	r0, [sp, #0]
    c0ae:	889b      	ldrh	r3, [r3, #4]
    c0b0:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    c0b4:	4668      	mov	r0, sp
    c0b6:	f7fd feb3 	bl	9e20 <bt_le_scan_start>
}
    c0ba:	b003      	add	sp, #12
    c0bc:	f85d fb04 	ldr.w	pc, [sp], #4
    c0c0:	00020004 	.word	0x00020004
    c0c4:	0001b7d7 	.word	0x0001b7d7

0000c0c8 <k_work_submit_to_queue.constprop.4>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c0c8:	4909      	ldr	r1, [pc, #36]	; (c0f0 <k_work_submit_to_queue.constprop.4+0x28>)
    c0ca:	f3bf 8f5b 	dmb	ish
    c0ce:	e851 3f00 	ldrex	r3, [r1]
    c0d2:	f043 0201 	orr.w	r2, r3, #1
    c0d6:	e841 2000 	strex	r0, r2, [r1]
    c0da:	2800      	cmp	r0, #0
    c0dc:	d1f7      	bne.n	c0ce <k_work_submit_to_queue.constprop.4+0x6>
    c0de:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    c0e2:	07db      	lsls	r3, r3, #31
    c0e4:	d403      	bmi.n	c0ee <k_work_submit_to_queue.constprop.4+0x26>
		k_queue_append(&work_q->queue, work);
    c0e6:	3908      	subs	r1, #8
    c0e8:	4802      	ldr	r0, [pc, #8]	; (c0f4 <k_work_submit_to_queue.constprop.4+0x2c>)
    c0ea:	f013 bb09 	b.w	1f700 <k_queue_append>
}
    c0ee:	4770      	bx	lr
    c0f0:	20000f64 	.word	0x20000f64
    c0f4:	20001fc8 	.word	0x20001fc8

0000c0f8 <bt_mesh_beacon_create>:
	sub->beacon_sent = k_uptime_get_32();
}

void bt_mesh_beacon_create(struct bt_mesh_subnet *sub,
			   struct net_buf_simple *buf)
{
    c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0fa:	460c      	mov	r4, r1
    c0fc:	4605      	mov	r5, r0
	u8_t flags = bt_mesh_net_flags(sub);
    c0fe:	f00f fbd2 	bl	1b8a6 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;

	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    c102:	2101      	movs	r1, #1
	u8_t flags = bt_mesh_net_flags(sub);
    c104:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    c106:	4620      	mov	r0, r4
    c108:	f013 f807 	bl	1f11a <net_buf_simple_add_u8>

	if (sub->kr_flag) {
    c10c:	7fab      	ldrb	r3, [r5, #30]
    c10e:	b1c3      	cbz	r3, c142 <bt_mesh_beacon_create+0x4a>
		keys = &sub->keys[1];
    c110:	f105 0689 	add.w	r6, r5, #137	; 0x89
	} else {
		keys = &sub->keys[0];
	}

	net_buf_simple_add_u8(buf, flags);
    c114:	4639      	mov	r1, r7
    c116:	4620      	mov	r0, r4
    c118:	f012 ffff 	bl	1f11a <net_buf_simple_add_u8>

	/* Network ID */
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    c11c:	2208      	movs	r2, #8
    c11e:	f106 0121 	add.w	r1, r6, #33	; 0x21
    c122:	4620      	mov	r0, r4
    c124:	f012 fff0 	bl	1f108 <net_buf_simple_add_mem>

	/* IV Index */
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    c128:	4b07      	ldr	r3, [pc, #28]	; (c148 <bt_mesh_beacon_create+0x50>)
    c12a:	4620      	mov	r0, r4
    c12c:	6819      	ldr	r1, [r3, #0]
    c12e:	f013 f82b 	bl	1f188 <net_buf_simple_add_be32>

	net_buf_simple_add_mem(buf, sub->auth, 8);
    c132:	f105 0128 	add.w	r1, r5, #40	; 0x28
    c136:	4620      	mov	r0, r4
    c138:	2208      	movs	r2, #8

	BT_DBG("net_idx 0x%04x flags 0x%02x NetID %s", sub->net_idx,
	       flags, bt_hex(keys->net_id, 8));
	BT_DBG("IV Index 0x%08x Auth %s", bt_mesh.iv_index,
	       bt_hex(sub->auth, 8));
}
    c13a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    c13e:	f012 bfe3 	b.w	1f108 <net_buf_simple_add_mem>
		keys = &sub->keys[0];
    c142:	f105 0630 	add.w	r6, r5, #48	; 0x30
    c146:	e7e5      	b.n	c114 <bt_mesh_beacon_create+0x1c>
    c148:	2000885c 	.word	0x2000885c

0000c14c <beacon_send>:
		sub->beacons_cur = 0U;
	}
}

static void beacon_send(struct k_work *work)
{
    c14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c150:	b08b      	sub	sp, #44	; 0x2c
	/* Don't send anything if we have an active provisioning link */
	if (IS_ENABLED(CONFIG_BT_MESH_PROV) && bt_prov_active()) {
    c152:	f012 f8c8 	bl	1e2e6 <bt_prov_active>
    c156:	b110      	cbz	r0, c15e <beacon_send+0x12>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c158:	f241 3288 	movw	r2, #5000	; 0x1388
    c15c:	e063      	b.n	c226 <beacon_send+0xda>
		return;
	}

	BT_DBG("");

	if (bt_mesh_is_provisioned()) {
    c15e:	f00f fb06 	bl	1b76e <bt_mesh_is_provisioned>
    c162:	4605      	mov	r5, r0
    c164:	2800      	cmp	r0, #0
    c166:	d070      	beq.n	c24a <beacon_send+0xfe>
	first_half = !first_half;
    c168:	4b6e      	ldr	r3, [pc, #440]	; (c324 <beacon_send+0x1d8>)
    c16a:	781a      	ldrb	r2, [r3, #0]
    c16c:	f082 0201 	eor.w	r2, r2, #1
    c170:	701a      	strb	r2, [r3, #0]
	if (first_half) {
    c172:	4b6d      	ldr	r3, [pc, #436]	; (c328 <beacon_send+0x1dc>)
    c174:	b9ca      	cbnz	r2, c1aa <beacon_send+0x5e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c176:	f8b3 00c0 	ldrh.w	r0, [r3, #192]	; 0xc0
    c17a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c17e:	4288      	cmp	r0, r1
		sub->beacons_last = sub->beacons_cur;
    c180:	bf1c      	itt	ne
    c182:	f893 10a9 	ldrbne.w	r1, [r3, #169]	; 0xa9
    c186:	f883 10a8 	strbne.w	r1, [r3, #168]	; 0xa8
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c18a:	f8b3 11a4 	ldrh.w	r1, [r3, #420]	; 0x1a4
		sub->beacons_cur = 0U;
    c18e:	bf18      	it	ne
    c190:	f883 20a9 	strbne.w	r2, [r3, #169]	; 0xa9
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c194:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c198:	4291      	cmp	r1, r2
		sub->beacons_last = sub->beacons_cur;
    c19a:	bf1f      	itttt	ne
    c19c:	f893 218d 	ldrbne.w	r2, [r3, #397]	; 0x18d
    c1a0:	f883 218c 	strbne.w	r2, [r3, #396]	; 0x18c
		sub->beacons_cur = 0U;
    c1a4:	2200      	movne	r2, #0
    c1a6:	f883 218d 	strbne.w	r2, [r3, #397]	; 0x18d
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
    c1aa:	f013 fd10 	bl	1fbce <z_impl_k_uptime_get_32>
    c1ae:	f8df 9178 	ldr.w	r9, [pc, #376]	; c328 <beacon_send+0x1dc>
		if (time_diff < K_SECONDS(600) &&
    c1b2:	4f5e      	ldr	r7, [pc, #376]	; (c32c <beacon_send+0x1e0>)
		bt_mesh_adv_send(buf, &send_cb, sub);
    c1b4:	f8df 8184 	ldr.w	r8, [pc, #388]	; c33c <beacon_send+0x1f0>
    c1b8:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    c1ba:	2400      	movs	r4, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c1bc:	f64f 76ff 	movw	r6, #65535	; 0xffff
    c1c0:	f8b9 30c0 	ldrh.w	r3, [r9, #192]	; 0xc0
    c1c4:	42b3      	cmp	r3, r6
    c1c6:	d025      	beq.n	c214 <beacon_send+0xc8>
		time_diff = now - sub->beacon_sent;
    c1c8:	f8d9 20a4 	ldr.w	r2, [r9, #164]	; 0xa4
    c1cc:	1aaa      	subs	r2, r5, r2
		if (time_diff < K_SECONDS(600) &&
    c1ce:	42ba      	cmp	r2, r7
    c1d0:	d80a      	bhi.n	c1e8 <beacon_send+0x9c>
		    time_diff < BEACON_THRESHOLD(sub)) {
    c1d2:	f899 10a8 	ldrb.w	r1, [r9, #168]	; 0xa8
    c1d6:	f242 7310 	movw	r3, #10000	; 0x2710
    c1da:	fb01 3303 	mla	r3, r1, r3, r3
    c1de:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    c1e2:	3b08      	subs	r3, #8
		if (time_diff < K_SECONDS(600) &&
    c1e4:	429a      	cmp	r2, r3
    c1e6:	d315      	bcc.n	c214 <beacon_send+0xc8>
		buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT,
    c1e8:	2200      	movs	r2, #0
    c1ea:	2108      	movs	r1, #8
    c1ec:	2002      	movs	r0, #2
    c1ee:	f7ff ff13 	bl	c018 <bt_mesh_adv_create>
		if (!buf) {
    c1f2:	4682      	mov	sl, r0
    c1f4:	b188      	cbz	r0, c21a <beacon_send+0xce>
    c1f6:	f109 0ba4 	add.w	fp, r9, #164	; 0xa4
		bt_mesh_beacon_create(sub, &buf->b);
    c1fa:	f100 0108 	add.w	r1, r0, #8
    c1fe:	4658      	mov	r0, fp
    c200:	f7ff ff7a 	bl	c0f8 <bt_mesh_beacon_create>
		bt_mesh_adv_send(buf, &send_cb, sub);
    c204:	4650      	mov	r0, sl
    c206:	465a      	mov	r2, fp
    c208:	4641      	mov	r1, r8
    c20a:	f7ff ff15 	bl	c038 <bt_mesh_adv_send>
		net_buf_unref(buf);
    c20e:	4650      	mov	r0, sl
    c210:	f009 fb78 	bl	15904 <net_buf_unref>
    c214:	f109 09e4 	add.w	r9, r9, #228	; 0xe4
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    c218:	b154      	cbz	r4, c230 <beacon_send+0xe4>
		update_beacon_observation();
		secure_beacon_send();

		/* Only resubmit if beaconing is still enabled */
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    c21a:	f002 fe6d 	bl	eef8 <bt_mesh_beacon_get>
    c21e:	2801      	cmp	r0, #1
    c220:	d108      	bne.n	c234 <beacon_send+0xe8>
    c222:	f242 7210 	movw	r2, #10000	; 0x2710
    c226:	4942      	ldr	r1, [pc, #264]	; (c330 <beacon_send+0x1e4>)
    c228:	4842      	ldr	r0, [pc, #264]	; (c334 <beacon_send+0x1e8>)
    c22a:	f00a ff57 	bl	170dc <k_delayed_work_submit_to_queue>
    c22e:	e009      	b.n	c244 <beacon_send+0xf8>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    c230:	2401      	movs	r4, #1
    c232:	e7c5      	b.n	c1c0 <beacon_send+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c234:	4b40      	ldr	r3, [pc, #256]	; (c338 <beacon_send+0x1ec>)
    c236:	f3bf 8f5b 	dmb	ish
    c23a:	681b      	ldr	r3, [r3, #0]
    c23c:	f3bf 8f5b 	dmb	ish
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    c240:	071b      	lsls	r3, r3, #28
    c242:	d4ee      	bmi.n	c222 <beacon_send+0xd6>
	} else {
		unprovisioned_beacon_send();
		k_delayed_work_submit(&beacon_timer, UNPROVISIONED_INTERVAL);
	}

}
    c244:	b00b      	add	sp, #44	; 0x2c
    c246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t uri_hash[16] = { 0 };
    c24a:	4601      	mov	r1, r0
    c24c:	2210      	movs	r2, #16
    c24e:	a802      	add	r0, sp, #8
    c250:	f00d ff54 	bl	1a0fc <memset>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    c254:	462a      	mov	r2, r5
    c256:	210a      	movs	r1, #10
    c258:	2002      	movs	r0, #2
    c25a:	f7ff fedd 	bl	c018 <bt_mesh_adv_create>
	if (!buf) {
    c25e:	4606      	mov	r6, r0
    c260:	2800      	cmp	r0, #0
    c262:	f43f af79 	beq.w	c158 <beacon_send+0xc>
	prov = bt_mesh_prov_get();
    c266:	f004 fcbb 	bl	10be0 <bt_mesh_prov_get>
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    c26a:	f106 0708 	add.w	r7, r6, #8
	prov = bt_mesh_prov_get();
    c26e:	4604      	mov	r4, r0
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    c270:	4629      	mov	r1, r5
    c272:	4638      	mov	r0, r7
    c274:	f012 ff51 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_add_mem(buf, prov->uuid, 16);
    c278:	2210      	movs	r2, #16
    c27a:	6821      	ldr	r1, [r4, #0]
    c27c:	4638      	mov	r0, r7
    c27e:	f012 ff43 	bl	1f108 <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    c282:	f8d4 8004 	ldr.w	r8, [r4, #4]
    c286:	f1b8 0f00 	cmp.w	r8, #0
    c28a:	d049      	beq.n	c320 <beacon_send+0x1d4>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
}

static inline bool bt_mesh_s1(const char *m, u8_t salt[16])
{
	const u8_t zero[16] = { 0 };
    c28c:	2210      	movs	r2, #16
    c28e:	4629      	mov	r1, r5
    c290:	a806      	add	r0, sp, #24
    c292:	f00d ff33 	bl	1a0fc <memset>

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    c296:	4640      	mov	r0, r8
    c298:	f00d fee3 	bl	1a062 <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    c29c:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    c29e:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    c2a2:	2201      	movs	r2, #1
    c2a4:	4669      	mov	r1, sp
    c2a6:	a806      	add	r0, sp, #24
    c2a8:	f00f fea5 	bl	1bff6 <bt_mesh_aes_cmac>
    c2ac:	bbc0      	cbnz	r0, c320 <beacon_send+0x1d4>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    c2ae:	8921      	ldrh	r1, [r4, #8]
    c2b0:	f041 0102 	orr.w	r1, r1, #2
	net_buf_add_be16(buf, oob_info);
    c2b4:	4638      	mov	r0, r7
    c2b6:	f012 ff47 	bl	1f148 <net_buf_simple_add_be16>
	net_buf_add_mem(buf, uri_hash, 4);
    c2ba:	2204      	movs	r2, #4
    c2bc:	a902      	add	r1, sp, #8
    c2be:	4638      	mov	r0, r7
    c2c0:	f012 ff22 	bl	1f108 <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    c2c4:	2200      	movs	r2, #0
    c2c6:	4611      	mov	r1, r2
    c2c8:	4630      	mov	r0, r6
    c2ca:	f7ff feb5 	bl	c038 <bt_mesh_adv_send>
	net_buf_unref(buf);
    c2ce:	4630      	mov	r0, r6
    c2d0:	f009 fb18 	bl	15904 <net_buf_unref>
	if (prov->uri) {
    c2d4:	6863      	ldr	r3, [r4, #4]
    c2d6:	2b00      	cmp	r3, #0
    c2d8:	f43f af3e 	beq.w	c158 <beacon_send+0xc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    c2dc:	2200      	movs	r2, #0
    c2de:	210a      	movs	r1, #10
    c2e0:	2003      	movs	r0, #3
    c2e2:	f7ff fe99 	bl	c018 <bt_mesh_adv_create>
		if (!buf) {
    c2e6:	4605      	mov	r5, r0
    c2e8:	2800      	cmp	r0, #0
    c2ea:	f43f af35 	beq.w	c158 <beacon_send+0xc>
		len = strlen(prov->uri);
    c2ee:	6860      	ldr	r0, [r4, #4]
    c2f0:	f00d feb7 	bl	1a062 <strlen>
		if (net_buf_tailroom(buf) < len) {
    c2f4:	f105 0608 	add.w	r6, r5, #8
		len = strlen(prov->uri);
    c2f8:	4607      	mov	r7, r0
		if (net_buf_tailroom(buf) < len) {
    c2fa:	4630      	mov	r0, r6
    c2fc:	f012 ffb9 	bl	1f272 <net_buf_simple_tailroom>
    c300:	4287      	cmp	r7, r0
    c302:	d809      	bhi.n	c318 <beacon_send+0x1cc>
			net_buf_add_mem(buf, prov->uri, len);
    c304:	463a      	mov	r2, r7
    c306:	6861      	ldr	r1, [r4, #4]
    c308:	4630      	mov	r0, r6
    c30a:	f012 fefd 	bl	1f108 <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    c30e:	2200      	movs	r2, #0
    c310:	4611      	mov	r1, r2
    c312:	4628      	mov	r0, r5
    c314:	f7ff fe90 	bl	c038 <bt_mesh_adv_send>
		net_buf_unref(buf);
    c318:	4628      	mov	r0, r5
    c31a:	f009 faf3 	bl	15904 <net_buf_unref>
    c31e:	e71b      	b.n	c158 <beacon_send+0xc>
		oob_info = prov->oob_info;
    c320:	8921      	ldrh	r1, [r4, #8]
    c322:	e7c7      	b.n	c2b4 <beacon_send+0x168>
    c324:	20002578 	.word	0x20002578
    c328:	2000885c 	.word	0x2000885c
    c32c:	000927bf 	.word	0x000927bf
    c330:	20000f5c 	.word	0x20000f5c
    c334:	20001fc8 	.word	0x20001fc8
    c338:	20008864 	.word	0x20008864
    c33c:	0002073c 	.word	0x0002073c

0000c340 <bt_mesh_beacon_init>:
	}
}

void bt_mesh_beacon_init(void)
{
	k_delayed_work_init(&beacon_timer, beacon_send);
    c340:	4901      	ldr	r1, [pc, #4]	; (c348 <bt_mesh_beacon_init+0x8>)
    c342:	4802      	ldr	r0, [pc, #8]	; (c34c <bt_mesh_beacon_init+0xc>)
    c344:	f013 bbea 	b.w	1fb1c <k_delayed_work_init>
    c348:	0000c14d 	.word	0x0000c14d
    c34c:	20000f5c 	.word	0x20000f5c

0000c350 <bt_mesh_beacon_ivu_initiator>:
}

void bt_mesh_beacon_ivu_initiator(bool enable)
{
    c350:	b508      	push	{r3, lr}
    c352:	4b12      	ldr	r3, [pc, #72]	; (c39c <bt_mesh_beacon_ivu_initiator+0x4c>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c354:	f3bf 8f5b 	dmb	ish
	if (val) {
    c358:	b168      	cbz	r0, c376 <bt_mesh_beacon_ivu_initiator+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c35a:	e853 2f00 	ldrex	r2, [r3]
    c35e:	f042 0208 	orr.w	r2, r2, #8
    c362:	e843 2100 	strex	r1, r2, [r3]
    c366:	2900      	cmp	r1, #0
    c368:	d1f7      	bne.n	c35a <bt_mesh_beacon_ivu_initiator+0xa>
    c36a:	f3bf 8f5b 	dmb	ish
	if (enable) {
		k_work_submit(&beacon_timer.work);
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
		k_delayed_work_cancel(&beacon_timer);
	}
}
    c36e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_submit_to_queue(&k_sys_work_q, work);
    c372:	f7ff bea9 	b.w	c0c8 <k_work_submit_to_queue.constprop.4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c376:	e853 2f00 	ldrex	r2, [r3]
    c37a:	f022 0208 	bic.w	r2, r2, #8
    c37e:	e843 2100 	strex	r1, r2, [r3]
    c382:	2900      	cmp	r1, #0
    c384:	d1f7      	bne.n	c376 <bt_mesh_beacon_ivu_initiator+0x26>
    c386:	f3bf 8f5b 	dmb	ish
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
    c38a:	f002 fdb5 	bl	eef8 <bt_mesh_beacon_get>
    c38e:	b920      	cbnz	r0, c39a <bt_mesh_beacon_ivu_initiator+0x4a>
		k_delayed_work_cancel(&beacon_timer);
    c390:	4803      	ldr	r0, [pc, #12]	; (c3a0 <bt_mesh_beacon_ivu_initiator+0x50>)
}
    c392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    c396:	f013 bbc9 	b.w	1fb2c <k_delayed_work_cancel>
}
    c39a:	bd08      	pop	{r3, pc}
    c39c:	20008864 	.word	0x20008864
    c3a0:	20000f5c 	.word	0x20000f5c

0000c3a4 <bt_mesh_beacon_recv>:
{
    c3a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (buf->len < 1) {
    c3a8:	8883      	ldrh	r3, [r0, #4]
{
    c3aa:	4605      	mov	r5, r0
	if (buf->len < 1) {
    c3ac:	b37b      	cbz	r3, c40e <bt_mesh_beacon_recv+0x6a>
	type = net_buf_simple_pull_u8(buf);
    c3ae:	f012 ff30 	bl	1f212 <net_buf_simple_pull_u8>
	switch (type) {
    c3b2:	2801      	cmp	r0, #1
    c3b4:	d12b      	bne.n	c40e <bt_mesh_beacon_recv+0x6a>
	if (buf->len < 21) {
    c3b6:	88ab      	ldrh	r3, [r5, #4]
    c3b8:	2b14      	cmp	r3, #20
    c3ba:	d928      	bls.n	c40e <bt_mesh_beacon_recv+0x6a>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c3bc:	4c45      	ldr	r4, [pc, #276]	; (c4d4 <bt_mesh_beacon_recv+0x130>)
	sub = cache_check(buf->data);
    c3be:	682e      	ldr	r6, [r5, #0]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c3c0:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
    c3c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c3c8:	429a      	cmp	r2, r3
    c3ca:	4627      	mov	r7, r4
    c3cc:	d122      	bne.n	c414 <bt_mesh_beacon_recv+0x70>
    c3ce:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
    c3d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c3d6:	429a      	cmp	r2, r3
    c3d8:	d126      	bne.n	c428 <bt_mesh_beacon_recv+0x84>
	flags = net_buf_simple_pull_u8(buf);
    c3da:	4628      	mov	r0, r5
	data = buf->data;
    c3dc:	f8d5 8000 	ldr.w	r8, [r5]
	flags = net_buf_simple_pull_u8(buf);
    c3e0:	f012 ff17 	bl	1f212 <net_buf_simple_pull_u8>
	net_id = net_buf_simple_pull(buf, 8);
    c3e4:	2108      	movs	r1, #8
	flags = net_buf_simple_pull_u8(buf);
    c3e6:	4606      	mov	r6, r0
	net_id = net_buf_simple_pull(buf, 8);
    c3e8:	4628      	mov	r0, r5
    c3ea:	f012 ff02 	bl	1f1f2 <net_buf_simple_pull>
    c3ee:	4604      	mov	r4, r0
	iv_index = net_buf_simple_pull_be32(buf);
    c3f0:	4628      	mov	r0, r5
    c3f2:	f012 ff31 	bl	1f258 <net_buf_simple_pull_be32>
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    c3f6:	f10d 030f 	add.w	r3, sp, #15
    c3fa:	9300      	str	r3, [sp, #0]
    c3fc:	4602      	mov	r2, r0
	iv_index = net_buf_simple_pull_be32(buf);
    c3fe:	4607      	mov	r7, r0
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    c400:	682b      	ldr	r3, [r5, #0]
    c402:	4620      	mov	r0, r4
    c404:	4631      	mov	r1, r6
    c406:	f000 fc4f 	bl	cca8 <bt_mesh_subnet_find>
	if (!sub) {
    c40a:	4604      	mov	r4, r0
    c40c:	b9a8      	cbnz	r0, c43a <bt_mesh_beacon_recv+0x96>
}
    c40e:	b004      	add	sp, #16
    c410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(sub->beacon_cache, data, 21)) {
    c414:	2215      	movs	r2, #21
    c416:	4631      	mov	r1, r6
    c418:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
    c41c:	f00d fe34 	bl	1a088 <memcmp>
    c420:	2800      	cmp	r0, #0
    c422:	d1d4      	bne.n	c3ce <bt_mesh_beacon_recv+0x2a>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    c424:	34a4      	adds	r4, #164	; 0xa4
    c426:	e045      	b.n	c4b4 <bt_mesh_beacon_recv+0x110>
		if (!memcmp(sub->beacon_cache, data, 21)) {
    c428:	2215      	movs	r2, #21
    c42a:	4631      	mov	r1, r6
    c42c:	482a      	ldr	r0, [pc, #168]	; (c4d8 <bt_mesh_beacon_recv+0x134>)
    c42e:	f00d fe2b 	bl	1a088 <memcmp>
    c432:	2800      	cmp	r0, #0
    c434:	d1d1      	bne.n	c3da <bt_mesh_beacon_recv+0x36>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    c436:	4c29      	ldr	r4, [pc, #164]	; (c4dc <bt_mesh_beacon_recv+0x138>)
    c438:	e03c      	b.n	c4b4 <bt_mesh_beacon_recv+0x110>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !new_key) {
    c43a:	7fc3      	ldrb	r3, [r0, #31]
    c43c:	2b02      	cmp	r3, #2
    c43e:	d103      	bne.n	c448 <bt_mesh_beacon_recv+0xa4>
    c440:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c444:	2b00      	cmp	r3, #0
    c446:	d0e2      	beq.n	c40e <bt_mesh_beacon_recv+0x6a>
	memcpy(sub->beacon_cache, data, 21);
    c448:	2215      	movs	r2, #21
    c44a:	4641      	mov	r1, r8
    c44c:	1da0      	adds	r0, r4, #6
    c44e:	f00d fe2b 	bl	1a0a8 <memcpy>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    c452:	2000      	movs	r0, #0
    c454:	f000 f92a 	bl	c6ac <bt_mesh_subnet_get>
    c458:	b108      	cbz	r0, c45e <bt_mesh_beacon_recv+0xba>
    c45a:	8ba3      	ldrh	r3, [r4, #28]
    c45c:	bb53      	cbnz	r3, c4b4 <bt_mesh_beacon_recv+0x110>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c45e:	f3bf 8f5b 	dmb	ish
    c462:	4b1f      	ldr	r3, [pc, #124]	; (c4e0 <bt_mesh_beacon_recv+0x13c>)
    c464:	681a      	ldr	r2, [r3, #0]
    c466:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    c46a:	f012 0f08 	tst.w	r2, #8
    c46e:	f3c6 0540 	ubfx	r5, r6, #1, #1
    c472:	d00b      	beq.n	c48c <bt_mesh_beacon_recv+0xe8>
    c474:	f3bf 8f5b 	dmb	ish
    c478:	681b      	ldr	r3, [r3, #0]
    c47a:	f3bf 8f5b 	dmb	ish
    c47e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c482:	429d      	cmp	r5, r3
    c484:	d102      	bne.n	c48c <bt_mesh_beacon_recv+0xe8>
		bt_mesh_beacon_ivu_initiator(false);
    c486:	2000      	movs	r0, #0
    c488:	f7ff ff62 	bl	c350 <bt_mesh_beacon_ivu_initiator>
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    c48c:	4629      	mov	r1, r5
    c48e:	4638      	mov	r0, r7
    c490:	f000 fa0c 	bl	c8ac <bt_mesh_net_iv_update>
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    c494:	f89d 200f 	ldrb.w	r2, [sp, #15]
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    c498:	4605      	mov	r5, r0
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    c49a:	f006 0101 	and.w	r1, r6, #1
    c49e:	4620      	mov	r0, r4
    c4a0:	f00f fa0d 	bl	1b8be <bt_mesh_kr_update>
	if (kr_change) {
    c4a4:	b190      	cbz	r0, c4cc <bt_mesh_beacon_recv+0x128>
		bt_mesh_net_beacon_update(sub);
    c4a6:	4620      	mov	r0, r4
    c4a8:	f000 f954 	bl	c754 <bt_mesh_net_beacon_update>
	if (iv_change) {
    c4ac:	b165      	cbz	r5, c4c8 <bt_mesh_beacon_recv+0x124>
		bt_mesh_net_sec_update(NULL);
    c4ae:	2000      	movs	r0, #0
		bt_mesh_net_sec_update(sub);
    c4b0:	f00f fa27 	bl	1b902 <bt_mesh_net_sec_update>
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    c4b4:	f002 fd20 	bl	eef8 <bt_mesh_beacon_get>
    c4b8:	2801      	cmp	r0, #1
    c4ba:	d1a8      	bne.n	c40e <bt_mesh_beacon_recv+0x6a>
	    sub->beacons_cur < 0xff) {
    c4bc:	7963      	ldrb	r3, [r4, #5]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    c4be:	2bff      	cmp	r3, #255	; 0xff
    c4c0:	d0a5      	beq.n	c40e <bt_mesh_beacon_recv+0x6a>
		sub->beacons_cur++;
    c4c2:	3301      	adds	r3, #1
    c4c4:	7163      	strb	r3, [r4, #5]
    c4c6:	e7a2      	b.n	c40e <bt_mesh_beacon_recv+0x6a>
		bt_mesh_net_sec_update(sub);
    c4c8:	4620      	mov	r0, r4
    c4ca:	e7f1      	b.n	c4b0 <bt_mesh_beacon_recv+0x10c>
	if (iv_change) {
    c4cc:	2d00      	cmp	r5, #0
    c4ce:	d0f1      	beq.n	c4b4 <bt_mesh_beacon_recv+0x110>
    c4d0:	e7ed      	b.n	c4ae <bt_mesh_beacon_recv+0x10a>
    c4d2:	bf00      	nop
    c4d4:	2000885c 	.word	0x2000885c
    c4d8:	200089ea 	.word	0x200089ea
    c4dc:	200089e4 	.word	0x200089e4
    c4e0:	20008864 	.word	0x20008864

0000c4e4 <bt_mesh_beacon_enable>:

void bt_mesh_beacon_enable(void)
{
    c4e4:	b510      	push	{r4, lr}
	int i;

	if (!bt_mesh_is_provisioned()) {
    c4e6:	f00f f942 	bl	1b76e <bt_mesh_is_provisioned>
    c4ea:	b1c8      	cbz	r0, c520 <bt_mesh_beacon_enable+0x3c>
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c4ec:	4c0e      	ldr	r4, [pc, #56]	; (c528 <bt_mesh_beacon_enable+0x44>)
    c4ee:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
    c4f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c4f6:	429a      	cmp	r2, r3
    c4f8:	d006      	beq.n	c508 <bt_mesh_beacon_enable+0x24>
			continue;
		}

		sub->beacons_last = 0U;
    c4fa:	2300      	movs	r3, #0
		sub->beacons_cur = 0U;

		bt_mesh_net_beacon_update(sub);
    c4fc:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
		sub->beacons_last = 0U;
    c500:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		bt_mesh_net_beacon_update(sub);
    c504:	f000 f926 	bl	c754 <bt_mesh_net_beacon_update>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    c508:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    c50c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c510:	429a      	cmp	r2, r3
    c512:	d005      	beq.n	c520 <bt_mesh_beacon_enable+0x3c>
		sub->beacons_last = 0U;
    c514:	2300      	movs	r3, #0
		bt_mesh_net_beacon_update(sub);
    c516:	4805      	ldr	r0, [pc, #20]	; (c52c <bt_mesh_beacon_enable+0x48>)
		sub->beacons_last = 0U;
    c518:	f8a4 318c 	strh.w	r3, [r4, #396]	; 0x18c
		bt_mesh_net_beacon_update(sub);
    c51c:	f000 f91a 	bl	c754 <bt_mesh_net_beacon_update>
	}

	k_work_submit(&beacon_timer.work);
}
    c520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c524:	f7ff bdd0 	b.w	c0c8 <k_work_submit_to_queue.constprop.4>
    c528:	2000885c 	.word	0x2000885c
    c52c:	200089e4 	.word	0x200089e4

0000c530 <bt_mesh_beacon_disable>:
    c530:	4b05      	ldr	r3, [pc, #20]	; (c548 <bt_mesh_beacon_disable+0x18>)
    c532:	f3bf 8f5b 	dmb	ish
    c536:	681b      	ldr	r3, [r3, #0]
    c538:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    c53c:	071b      	lsls	r3, r3, #28
    c53e:	d402      	bmi.n	c546 <bt_mesh_beacon_disable+0x16>
		k_delayed_work_cancel(&beacon_timer);
    c540:	4802      	ldr	r0, [pc, #8]	; (c54c <bt_mesh_beacon_disable+0x1c>)
    c542:	f013 baf3 	b.w	1fb2c <k_delayed_work_cancel>
	}
}
    c546:	4770      	bx	lr
    c548:	20008864 	.word	0x20008864
    c54c:	20000f5c 	.word	0x20000f5c

0000c550 <net_decrypt.isra.1>:
	}

	return NULL;
}

static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    c550:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		       struct net_buf_simple *buf)
{
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
	BT_DBG("IVI %u net->iv_index 0x%08x", IVI(data), bt_mesh.iv_index);

	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    c554:	4f3f      	ldr	r7, [pc, #252]	; (c654 <net_decrypt.isra.1+0x104>)
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    c556:	e9dd 540a 	ldrd	r5, r4, [sp, #40]	; 0x28
    c55a:	4689      	mov	r9, r1
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    c55c:	6839      	ldr	r1, [r7, #0]
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    c55e:	469a      	mov	sl, r3
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    c560:	7813      	ldrb	r3, [r2, #0]
    c562:	f001 0101 	and.w	r1, r1, #1
    c566:	ea81 11d3 	eor.w	r1, r1, r3, lsr #7
    c56a:	7d2b      	ldrb	r3, [r5, #20]
    c56c:	f361 0300 	bfi	r3, r1, #0, #1
    c570:	752b      	strb	r3, [r5, #20]
	buf->len  = 0;
    c572:	2300      	movs	r3, #0
    c574:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    c576:	68a3      	ldr	r3, [r4, #8]
    c578:	6023      	str	r3, [r4, #0]
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    c57a:	4690      	mov	r8, r2

	net_buf_simple_reset(buf);
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
    c57c:	4651      	mov	r1, sl
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    c57e:	4606      	mov	r6, r0
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
    c580:	4620      	mov	r0, r4
    c582:	f012 fdbb 	bl	1f0fc <net_buf_simple_add>
    c586:	4652      	mov	r2, sl
    c588:	4641      	mov	r1, r8
    c58a:	f00d fd8d 	bl	1a0a8 <memcpy>

	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    c58e:	7d2b      	ldrb	r3, [r5, #20]
    c590:	6839      	ldr	r1, [r7, #0]
    c592:	6820      	ldr	r0, [r4, #0]
    c594:	f003 0301 	and.w	r3, r3, #1
    c598:	464a      	mov	r2, r9
    c59a:	1ac9      	subs	r1, r1, r3
    c59c:	f00f fd86 	bl	1c0ac <bt_mesh_net_obfuscate>
    c5a0:	2800      	cmp	r0, #0
    c5a2:	d14d      	bne.n	c640 <net_decrypt.isra.1+0xf0>
		return -ENOENT;
	}

	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(rx, buf)) {
    c5a4:	7d2a      	ldrb	r2, [r5, #20]
    c5a6:	f012 0830 	ands.w	r8, r2, #48	; 0x30
    c5aa:	d12d      	bne.n	c608 <net_decrypt.isra.1+0xb8>
    c5ac:	6821      	ldr	r1, [r4, #0]
	hash1 = (BT_MESH_NET_IVI_RX(rx) << 8) | pdu->data[2];
    c5ae:	683b      	ldr	r3, [r7, #0]
    c5b0:	f891 9002 	ldrb.w	r9, [r1, #2]
    c5b4:	f002 0201 	and.w	r2, r2, #1
    c5b8:	1a9a      	subs	r2, r3, r2
    c5ba:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
	memcpy(&hash2, &pdu->data[3], 4);
    c5be:	2204      	movs	r2, #4
    c5c0:	3103      	adds	r1, #3
    c5c2:	eb0d 0002 	add.w	r0, sp, r2
    c5c6:	f00d fd6f 	bl	1a0a8 <memcpy>
	return (u64_t)hash1 << 32 | (u64_t)hash2;
    c5ca:	4a23      	ldr	r2, [pc, #140]	; (c658 <net_decrypt.isra.1+0x108>)
    c5cc:	9801      	ldr	r0, [sp, #4]
    c5ce:	4649      	mov	r1, r9
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    c5d0:	4643      	mov	r3, r8
    c5d2:	4694      	mov	ip, r2
		if (msg_cache[i] == hash) {
    c5d4:	e8f2 8902 	ldrd	r8, r9, [r2], #8
    c5d8:	4589      	cmp	r9, r1
    c5da:	bf08      	it	eq
    c5dc:	4580      	cmpeq	r8, r0
    c5de:	d032      	beq.n	c646 <net_decrypt.isra.1+0xf6>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    c5e0:	3301      	adds	r3, #1
    c5e2:	b29b      	uxth	r3, r3
    c5e4:	2b64      	cmp	r3, #100	; 0x64
    c5e6:	d1f5      	bne.n	c5d4 <net_decrypt.isra.1+0x84>
	msg_cache[msg_cache_next++] = hash;
    c5e8:	f8df e070 	ldr.w	lr, [pc, #112]	; c65c <net_decrypt.isra.1+0x10c>
    c5ec:	f8be 2000 	ldrh.w	r2, [lr]
    c5f0:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
    c5f4:	3201      	adds	r2, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    c5f6:	b292      	uxth	r2, r2
	msg_cache[msg_cache_next++] = hash;
    c5f8:	e9cc 0100 	strd	r0, r1, [ip]
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    c5fc:	fbb2 f1f3 	udiv	r1, r2, r3
    c600:	fb03 2311 	mls	r3, r3, r1, r2
    c604:	f8ae 3000 	strh.w	r3, [lr]
		BT_WARN("Duplicate found in Network Message Cache");
		return -EALREADY;
	}

	rx->ctx.addr = SRC(buf->data);
    c608:	6822      	ldr	r2, [r4, #0]
	return ((u16_t)src[0] << 8) | src[1];
    c60a:	7951      	ldrb	r1, [r2, #5]
    c60c:	7993      	ldrb	r3, [r2, #6]
    c60e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    c612:	b21b      	sxth	r3, r3
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    c614:	2b00      	cmp	r3, #0
	rx->ctx.addr = SRC(buf->data);
    c616:	812b      	strh	r3, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    c618:	dd18      	ble.n	c64c <net_decrypt.isra.1+0xfc>
		return -EINVAL;
	}

	BT_DBG("src 0x%04x", rx->ctx.addr);

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
    c61a:	7d2b      	ldrb	r3, [r5, #20]
    c61c:	683a      	ldr	r2, [r7, #0]
    c61e:	f003 0101 	and.w	r1, r3, #1
    c622:	f003 0330 	and.w	r3, r3, #48	; 0x30
    c626:	2b30      	cmp	r3, #48	; 0x30
	    rx->net_if == BT_MESH_NET_IF_PROXY_CFG) {
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
    c628:	eba2 0201 	sub.w	r2, r2, r1
    c62c:	bf0c      	ite	eq
    c62e:	2301      	moveq	r3, #1
					   true);
	}

	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
    c630:	2300      	movne	r3, #0
    c632:	4621      	mov	r1, r4
    c634:	4630      	mov	r0, r6
    c636:	f00f fdb5 	bl	1c1a4 <bt_mesh_net_decrypt>
}
    c63a:	b002      	add	sp, #8
    c63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOENT;
    c640:	f06f 0001 	mvn.w	r0, #1
    c644:	e7f9      	b.n	c63a <net_decrypt.isra.1+0xea>
		return -EALREADY;
    c646:	f06f 0044 	mvn.w	r0, #68	; 0x44
    c64a:	e7f6      	b.n	c63a <net_decrypt.isra.1+0xea>
		return -EINVAL;
    c64c:	f06f 0015 	mvn.w	r0, #21
    c650:	e7f3      	b.n	c63a <net_decrypt.isra.1+0xea>
    c652:	bf00      	nop
    c654:	2000885c 	.word	0x2000885c
    c658:	200000a8 	.word	0x200000a8
    c65c:	20002050 	.word	0x20002050

0000c660 <atomic_test_bit.constprop.9>:
    c660:	4b04      	ldr	r3, [pc, #16]	; (c674 <atomic_test_bit.constprop.9+0x14>)
    c662:	f3bf 8f5b 	dmb	ish
    c666:	6898      	ldr	r0, [r3, #8]
    c668:	f3bf 8f5b 	dmb	ish
}
    c66c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    c670:	4770      	bx	lr
    c672:	bf00      	nop
    c674:	2000885c 	.word	0x2000885c

0000c678 <atomic_set_bit_to.constprop.6>:
	if (val) {
    c678:	4b0b      	ldr	r3, [pc, #44]	; (c6a8 <atomic_set_bit_to.constprop.6+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c67a:	f3bf 8f5b 	dmb	ish
	if (val) {
    c67e:	b150      	cbz	r0, c696 <atomic_set_bit_to.constprop.6+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c680:	e853 2f00 	ldrex	r2, [r3]
    c684:	f042 0204 	orr.w	r2, r2, #4
    c688:	e843 2100 	strex	r1, r2, [r3]
    c68c:	2900      	cmp	r1, #0
    c68e:	d1f7      	bne.n	c680 <atomic_set_bit_to.constprop.6+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c690:	f3bf 8f5b 	dmb	ish
	}
}
    c694:	4770      	bx	lr
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c696:	e853 2f00 	ldrex	r2, [r3]
    c69a:	f022 0204 	bic.w	r2, r2, #4
    c69e:	e843 2100 	strex	r1, r2, [r3]
    c6a2:	2900      	cmp	r1, #0
    c6a4:	d0f4      	beq.n	c690 <atomic_set_bit_to.constprop.6+0x18>
    c6a6:	e7f6      	b.n	c696 <atomic_set_bit_to.constprop.6+0x1e>
    c6a8:	20008864 	.word	0x20008864

0000c6ac <bt_mesh_subnet_get>:
	if (net_idx == BT_MESH_KEY_ANY) {
    c6ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c6b0:	4298      	cmp	r0, r3
    c6b2:	d010      	beq.n	c6d6 <bt_mesh_subnet_get+0x2a>
		if (bt_mesh.sub[i].net_idx == net_idx) {
    c6b4:	4b0a      	ldr	r3, [pc, #40]	; (c6e0 <bt_mesh_subnet_get+0x34>)
    c6b6:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
    c6ba:	4282      	cmp	r2, r0
    c6bc:	d009      	beq.n	c6d2 <bt_mesh_subnet_get+0x26>
    c6be:	f8b3 21a4 	ldrh.w	r2, [r3, #420]	; 0x1a4
    c6c2:	4282      	cmp	r2, r0
    c6c4:	d109      	bne.n	c6da <bt_mesh_subnet_get+0x2e>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    c6c6:	2001      	movs	r0, #1
			return &bt_mesh.sub[i];
    c6c8:	22e4      	movs	r2, #228	; 0xe4
    c6ca:	fb02 3000 	mla	r0, r2, r0, r3
    c6ce:	30a4      	adds	r0, #164	; 0xa4
    c6d0:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    c6d2:	2000      	movs	r0, #0
    c6d4:	e7f8      	b.n	c6c8 <bt_mesh_subnet_get+0x1c>
		return &bt_mesh.sub[0];
    c6d6:	4803      	ldr	r0, [pc, #12]	; (c6e4 <bt_mesh_subnet_get+0x38>)
    c6d8:	4770      	bx	lr
	return NULL;
    c6da:	2000      	movs	r0, #0
}
    c6dc:	4770      	bx	lr
    c6de:	bf00      	nop
    c6e0:	2000885c 	.word	0x2000885c
    c6e4:	20008900 	.word	0x20008900

0000c6e8 <bt_mesh_net_keys_create>:
{
    c6e8:	b530      	push	{r4, r5, lr}
    c6ea:	b085      	sub	sp, #20
	u8_t p[] = { 0 };
    c6ec:	2300      	movs	r3, #0
    c6ee:	f88d 300c 	strb.w	r3, [sp, #12]
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    c6f2:	f100 0339 	add.w	r3, r0, #57	; 0x39
{
    c6f6:	460d      	mov	r5, r1
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    c6f8:	9301      	str	r3, [sp, #4]
    c6fa:	f100 0311 	add.w	r3, r0, #17
{
    c6fe:	4604      	mov	r4, r0
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    c700:	9300      	str	r3, [sp, #0]
    c702:	2201      	movs	r2, #1
    c704:	f10d 030f 	add.w	r3, sp, #15
    c708:	a903      	add	r1, sp, #12
    c70a:	4628      	mov	r0, r5
    c70c:	f001 fc46 	bl	df9c <bt_mesh_k2>
	if (err) {
    c710:	b9d0      	cbnz	r0, c748 <bt_mesh_net_keys_create+0x60>
	memcpy(keys->net, key, 16);
    c712:	4629      	mov	r1, r5
    c714:	2210      	movs	r2, #16
    c716:	4620      	mov	r0, r4
    c718:	f00d fcc6 	bl	1a0a8 <memcpy>
	keys->nid = nid;
    c71c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c720:	7423      	strb	r3, [r4, #16]
	err = bt_mesh_k3(key, keys->net_id);
    c722:	f104 0121 	add.w	r1, r4, #33	; 0x21
    c726:	4628      	mov	r0, r5
    c728:	f001 fc90 	bl	e04c <bt_mesh_k3>
	if (err) {
    c72c:	b960      	cbnz	r0, c748 <bt_mesh_net_keys_create+0x60>
}

static inline int bt_mesh_identity_key(const u8_t net_key[16],
				       u8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    c72e:	f104 0229 	add.w	r2, r4, #41	; 0x29
    c732:	4906      	ldr	r1, [pc, #24]	; (c74c <bt_mesh_net_keys_create+0x64>)
    c734:	4628      	mov	r0, r5
    c736:	f001 fcdf 	bl	e0f8 <bt_mesh_id128>
	if (err) {
    c73a:	b928      	cbnz	r0, c748 <bt_mesh_net_keys_create+0x60>
}

static inline int bt_mesh_beacon_key(const u8_t net_key[16],
				     u8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    c73c:	f104 0249 	add.w	r2, r4, #73	; 0x49
    c740:	4903      	ldr	r1, [pc, #12]	; (c750 <bt_mesh_net_keys_create+0x68>)
    c742:	4628      	mov	r0, r5
    c744:	f001 fcd8 	bl	e0f8 <bt_mesh_id128>
}
    c748:	b005      	add	sp, #20
    c74a:	bd30      	pop	{r4, r5, pc}
    c74c:	00021b27 	.word	0x00021b27
    c750:	00021b2c 	.word	0x00021b2c

0000c754 <bt_mesh_net_beacon_update>:
{
    c754:	b513      	push	{r0, r1, r4, lr}
    c756:	4604      	mov	r4, r0
	u8_t flags = bt_mesh_net_flags(sub);
    c758:	f00f f8a5 	bl	1b8a6 <bt_mesh_net_flags>
	if (sub->kr_flag) {
    c75c:	7fa3      	ldrb	r3, [r4, #30]
	u8_t flags = bt_mesh_net_flags(sub);
    c75e:	4601      	mov	r1, r0
	if (sub->kr_flag) {
    c760:	b163      	cbz	r3, c77c <bt_mesh_net_beacon_update+0x28>
		keys = &sub->keys[1];
    c762:	f104 0089 	add.w	r0, r4, #137	; 0x89
				   bt_mesh.iv_index, sub->auth);
    c766:	3428      	adds	r4, #40	; 0x28
	return bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    c768:	4b06      	ldr	r3, [pc, #24]	; (c784 <bt_mesh_net_beacon_update+0x30>)
    c76a:	9400      	str	r4, [sp, #0]
    c76c:	f100 0221 	add.w	r2, r0, #33	; 0x21
    c770:	681b      	ldr	r3, [r3, #0]
    c772:	3049      	adds	r0, #73	; 0x49
    c774:	f00f fe1a 	bl	1c3ac <bt_mesh_beacon_auth>
}
    c778:	b002      	add	sp, #8
    c77a:	bd10      	pop	{r4, pc}
		keys = &sub->keys[0];
    c77c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    c780:	e7f1      	b.n	c766 <bt_mesh_net_beacon_update+0x12>
    c782:	bf00      	nop
    c784:	2000885c 	.word	0x2000885c

0000c788 <bt_mesh_net_create>:
{
    c788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c78c:	460e      	mov	r6, r1
    c78e:	4615      	mov	r5, r2
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    c790:	2100      	movs	r1, #0
    c792:	f44f 7248 	mov.w	r2, #800	; 0x320
{
    c796:	4680      	mov	r8, r0
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    c798:	4819      	ldr	r0, [pc, #100]	; (c800 <bt_mesh_net_create+0x78>)
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
    c79a:	4c1a      	ldr	r4, [pc, #104]	; (c804 <bt_mesh_net_create+0x7c>)
{
    c79c:	461f      	mov	r7, r3
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    c79e:	f00d fcad 	bl	1a0fc <memset>
	msg_cache_next = 0U;
    c7a2:	4b19      	ldr	r3, [pc, #100]	; (c808 <bt_mesh_net_create+0x80>)
    c7a4:	2200      	movs	r2, #0
    c7a6:	801a      	strh	r2, [r3, #0]
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
    c7a8:	f006 0301 	and.w	r3, r6, #1
    c7ac:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    c7b0:	4629      	mov	r1, r5
	if (sub->kr_flag) {
    c7b2:	b1eb      	cbz	r3, c7f0 <bt_mesh_net_create+0x68>
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    c7b4:	f204 102d 	addw	r0, r4, #301	; 0x12d
    c7b8:	f7ff ff96 	bl	c6e8 <bt_mesh_net_keys_create>
		if (err) {
    c7bc:	b118      	cbz	r0, c7c6 <bt_mesh_net_create+0x3e>
			return -EIO;
    c7be:	f06f 0004 	mvn.w	r0, #4
}
    c7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sub->kr_phase = BT_MESH_KR_PHASE_2;
    c7c6:	2302      	movs	r3, #2
    c7c8:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    c7cc:	2500      	movs	r5, #0
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c7ce:	f3c6 0040 	ubfx	r0, r6, #1, #1
	sub->net_idx = idx;
    c7d2:	f8a4 80c0 	strh.w	r8, [r4, #192]	; 0xc0
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    c7d6:	f884 50c4 	strb.w	r5, [r4, #196]	; 0xc4
	bt_mesh.iv_index = iv_index;
    c7da:	6027      	str	r7, [r4, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    c7dc:	f7ff ff4c 	bl	c678 <atomic_set_bit_to.constprop.6>
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    c7e0:	2360      	movs	r3, #96	; 0x60
	bt_mesh_net_beacon_update(sub);
    c7e2:	480a      	ldr	r0, [pc, #40]	; (c80c <bt_mesh_net_create+0x84>)
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    c7e4:	f884 3020 	strb.w	r3, [r4, #32]
	bt_mesh_net_beacon_update(sub);
    c7e8:	f7ff ffb4 	bl	c754 <bt_mesh_net_beacon_update>
	return 0;
    c7ec:	4628      	mov	r0, r5
    c7ee:	e7e8      	b.n	c7c2 <bt_mesh_net_create+0x3a>
		err = bt_mesh_net_keys_create(&sub->keys[0], key);
    c7f0:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    c7f4:	f7ff ff78 	bl	c6e8 <bt_mesh_net_keys_create>
		if (err) {
    c7f8:	2800      	cmp	r0, #0
    c7fa:	d0e7      	beq.n	c7cc <bt_mesh_net_create+0x44>
    c7fc:	e7df      	b.n	c7be <bt_mesh_net_create+0x36>
    c7fe:	bf00      	nop
    c800:	200000a8 	.word	0x200000a8
    c804:	2000885c 	.word	0x2000885c
    c808:	20002050 	.word	0x20002050
    c80c:	20008900 	.word	0x20008900

0000c810 <bt_mesh_net_revoke_keys>:
{
    c810:	b538      	push	{r3, r4, r5, lr}
    c812:	4605      	mov	r5, r0
		if (key->net_idx != sub->net_idx || !key->updated) {
    c814:	4c15      	ldr	r4, [pc, #84]	; (c86c <bt_mesh_net_revoke_keys+0x5c>)
	memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
    c816:	2259      	movs	r2, #89	; 0x59
    c818:	f100 0189 	add.w	r1, r0, #137	; 0x89
    c81c:	3030      	adds	r0, #48	; 0x30
    c81e:	f00d fc43 	bl	1a0a8 <memcpy>
		if (key->net_idx != sub->net_idx || !key->updated) {
    c822:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
    c826:	8bab      	ldrh	r3, [r5, #28]
    c828:	429a      	cmp	r2, r3
    c82a:	d10c      	bne.n	c846 <bt_mesh_net_revoke_keys+0x36>
    c82c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    c830:	b14b      	cbz	r3, c846 <bt_mesh_net_revoke_keys+0x36>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    c832:	2211      	movs	r2, #17
    c834:	f104 016a 	add.w	r1, r4, #106	; 0x6a
    c838:	f104 0059 	add.w	r0, r4, #89	; 0x59
    c83c:	f00d fc34 	bl	1a0a8 <memcpy>
		key->updated = false;
    c840:	2300      	movs	r3, #0
    c842:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		if (key->net_idx != sub->net_idx || !key->updated) {
    c846:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c84a:	8bab      	ldrh	r3, [r5, #28]
    c84c:	429a      	cmp	r2, r3
    c84e:	d10b      	bne.n	c868 <bt_mesh_net_revoke_keys+0x58>
    c850:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    c854:	b143      	cbz	r3, c868 <bt_mesh_net_revoke_keys+0x58>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    c856:	4906      	ldr	r1, [pc, #24]	; (c870 <bt_mesh_net_revoke_keys+0x60>)
    c858:	2211      	movs	r2, #17
    c85a:	f1a1 0011 	sub.w	r0, r1, #17
    c85e:	f00d fc23 	bl	1a0a8 <memcpy>
		key->updated = false;
    c862:	2300      	movs	r3, #0
    c864:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
    c868:	bd38      	pop	{r3, r4, r5, pc}
    c86a:	bf00      	nop
    c86c:	2000885c 	.word	0x2000885c
    c870:	200088ee 	.word	0x200088ee

0000c874 <bt_mesh_rpl_reset>:
{
    c874:	b570      	push	{r4, r5, r6, lr}
    c876:	4c0c      	ldr	r4, [pc, #48]	; (c8a8 <bt_mesh_rpl_reset+0x34>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    c878:	2500      	movs	r5, #0
				rpl->old_iv = true;
    c87a:	2601      	movs	r6, #1
		if (rpl->src) {
    c87c:	f8b4 326c 	ldrh.w	r3, [r4, #620]	; 0x26c
    c880:	b143      	cbz	r3, c894 <bt_mesh_rpl_reset+0x20>
			if (rpl->old_iv) {
    c882:	f894 326e 	ldrb.w	r3, [r4, #622]	; 0x26e
    c886:	b15b      	cbz	r3, c8a0 <bt_mesh_rpl_reset+0x2c>
				(void)memset(rpl, 0, sizeof(*rpl));
    c888:	2208      	movs	r2, #8
    c88a:	2100      	movs	r1, #0
    c88c:	f504 701b 	add.w	r0, r4, #620	; 0x26c
    c890:	f00d fc34 	bl	1a0fc <memset>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    c894:	3501      	adds	r5, #1
    c896:	2d80      	cmp	r5, #128	; 0x80
    c898:	f104 0408 	add.w	r4, r4, #8
    c89c:	d1ee      	bne.n	c87c <bt_mesh_rpl_reset+0x8>
}
    c89e:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    c8a0:	f884 626e 	strb.w	r6, [r4, #622]	; 0x26e
    c8a4:	e7f6      	b.n	c894 <bt_mesh_rpl_reset+0x20>
    c8a6:	bf00      	nop
    c8a8:	2000885c 	.word	0x2000885c

0000c8ac <bt_mesh_net_iv_update>:
{
    c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8ae:	4607      	mov	r7, r0
    c8b0:	460e      	mov	r6, r1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c8b2:	f7ff fed5 	bl	c660 <atomic_test_bit.constprop.9>
    c8b6:	4c30      	ldr	r4, [pc, #192]	; (c978 <bt_mesh_net_iv_update+0xcc>)
    c8b8:	4605      	mov	r5, r0
		if (iv_index != bt_mesh.iv_index) {
    c8ba:	6823      	ldr	r3, [r4, #0]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c8bc:	b128      	cbz	r0, c8ca <bt_mesh_net_iv_update+0x1e>
		if (iv_index != bt_mesh.iv_index) {
    c8be:	42bb      	cmp	r3, r7
    c8c0:	d101      	bne.n	c8c6 <bt_mesh_net_iv_update+0x1a>
		if (iv_update) {
    c8c2:	2900      	cmp	r1, #0
    c8c4:	d03d      	beq.n	c942 <bt_mesh_net_iv_update+0x96>
			return false;
    c8c6:	2500      	movs	r5, #0
    c8c8:	e037      	b.n	c93a <bt_mesh_net_iv_update+0x8e>
		if (iv_index < bt_mesh.iv_index ||
    c8ca:	42bb      	cmp	r3, r7
    c8cc:	d235      	bcs.n	c93a <bt_mesh_net_iv_update+0x8e>
		    iv_index > bt_mesh.iv_index + 42) {
    c8ce:	f103 022a 	add.w	r2, r3, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    c8d2:	4297      	cmp	r7, r2
    c8d4:	d831      	bhi.n	c93a <bt_mesh_net_iv_update+0x8e>
		if (iv_index > bt_mesh.iv_index + 1) {
    c8d6:	3301      	adds	r3, #1
    c8d8:	429f      	cmp	r7, r3
    c8da:	d930      	bls.n	c93e <bt_mesh_net_iv_update+0x92>
			(void)memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
    c8dc:	4601      	mov	r1, r0
    c8de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c8e2:	f504 701b 	add.w	r0, r4, #620	; 0x26c
    c8e6:	f00d fc09 	bl	1a0fc <memset>
			bt_mesh.seq = 0U;
    c8ea:	e9c4 7500 	strd	r7, r5, [r4]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    c8ee:	4630      	mov	r0, r6
    c8f0:	f7ff fec2 	bl	c678 <atomic_set_bit_to.constprop.6>
	bt_mesh.ivu_duration = 0U;
    c8f4:	2300      	movs	r3, #0
    c8f6:	f884 3020 	strb.w	r3, [r4, #32]
	if (iv_update) {
    c8fa:	2e00      	cmp	r6, #0
    c8fc:	d039      	beq.n	c972 <bt_mesh_net_iv_update+0xc6>
		bt_mesh.iv_index = iv_index;
    c8fe:	6027      	str	r7, [r4, #0]
		bt_mesh_rpl_reset();
    c900:	f7ff ffb8 	bl	c874 <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c904:	4a1d      	ldr	r2, [pc, #116]	; (c97c <bt_mesh_net_iv_update+0xd0>)
    c906:	491e      	ldr	r1, [pc, #120]	; (c980 <bt_mesh_net_iv_update+0xd4>)
    c908:	481e      	ldr	r0, [pc, #120]	; (c984 <bt_mesh_net_iv_update+0xd8>)
    c90a:	f00a fbe7 	bl	170dc <k_delayed_work_submit_to_queue>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    c90e:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
    c912:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c916:	429a      	cmp	r2, r3
    c918:	d002      	beq.n	c920 <bt_mesh_net_iv_update+0x74>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    c91a:	481b      	ldr	r0, [pc, #108]	; (c988 <bt_mesh_net_iv_update+0xdc>)
    c91c:	f7ff ff1a 	bl	c754 <bt_mesh_net_beacon_update>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    c920:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    c924:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c928:	429a      	cmp	r2, r3
    c92a:	d002      	beq.n	c932 <bt_mesh_net_iv_update+0x86>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    c92c:	4817      	ldr	r0, [pc, #92]	; (c98c <bt_mesh_net_iv_update+0xe0>)
    c92e:	f7ff ff11 	bl	c754 <bt_mesh_net_beacon_update>
		bt_mesh_store_iv(false);
    c932:	2000      	movs	r0, #0
    c934:	f011 fc0f 	bl	1e156 <bt_mesh_store_iv>
	return true;
    c938:	2501      	movs	r5, #1
}
    c93a:	4628      	mov	r0, r5
    c93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    c93e:	2900      	cmp	r1, #0
    c940:	d0fb      	beq.n	c93a <bt_mesh_net_iv_update+0x8e>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c942:	f894 3020 	ldrb.w	r3, [r4, #32]
    c946:	2b5f      	cmp	r3, #95	; 0x5f
    c948:	d9bd      	bls.n	c8c6 <bt_mesh_net_iv_update+0x1a>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    c94a:	2e00      	cmp	r6, #0
    c94c:	d1cf      	bne.n	c8ee <bt_mesh_net_iv_update+0x42>
    c94e:	f000 ff9f 	bl	d890 <bt_mesh_tx_in_progress>
    c952:	2800      	cmp	r0, #0
    c954:	d0cb      	beq.n	c8ee <bt_mesh_net_iv_update+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c956:	f3bf 8f5b 	dmb	ish
    c95a:	4b0d      	ldr	r3, [pc, #52]	; (c990 <bt_mesh_net_iv_update+0xe4>)
    c95c:	e853 2f00 	ldrex	r2, [r3]
    c960:	f042 0220 	orr.w	r2, r2, #32
    c964:	e843 2100 	strex	r1, r2, [r3]
    c968:	2900      	cmp	r1, #0
    c96a:	d1f7      	bne.n	c95c <bt_mesh_net_iv_update+0xb0>
    c96c:	f3bf 8f5b 	dmb	ish
    c970:	e7a9      	b.n	c8c6 <bt_mesh_net_iv_update+0x1a>
		bt_mesh.seq = 0U;
    c972:	6066      	str	r6, [r4, #4]
    c974:	e7c6      	b.n	c904 <bt_mesh_net_iv_update+0x58>
    c976:	bf00      	nop
    c978:	2000885c 	.word	0x2000885c
    c97c:	05265c00 	.word	0x05265c00
    c980:	20008880 	.word	0x20008880
    c984:	20001fc8 	.word	0x20001fc8
    c988:	20008900 	.word	0x20008900
    c98c:	200089e4 	.word	0x200089e4
    c990:	20008864 	.word	0x20008864

0000c994 <ivu_refresh>:
		bt_mesh_net_relay(&buf, &rx);
	}
}

static void ivu_refresh(struct k_work *work)
{
    c994:	b510      	push	{r4, lr}
	bt_mesh.ivu_duration += BT_MESH_IVU_HOURS;
    c996:	4c12      	ldr	r4, [pc, #72]	; (c9e0 <ivu_refresh+0x4c>)
    c998:	f894 3020 	ldrb.w	r3, [r4, #32]
    c99c:	3318      	adds	r3, #24
    c99e:	b2db      	uxtb	r3, r3
	BT_DBG("%s for %u hour%s",
	       atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) ?
	       "IVU in Progress" : "IVU Normal mode",
	       bt_mesh.ivu_duration, bt_mesh.ivu_duration == 1 ? "" : "s");

	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c9a0:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration += BT_MESH_IVU_HOURS;
    c9a2:	f884 3020 	strb.w	r3, [r4, #32]
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    c9a6:	d80a      	bhi.n	c9be <ivu_refresh+0x2a>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			bt_mesh_store_iv(true);
    c9a8:	2001      	movs	r0, #1
    c9aa:	f011 fbd4 	bl	1e156 <bt_mesh_store_iv>
    c9ae:	f104 0124 	add.w	r1, r4, #36	; 0x24
    c9b2:	4a0c      	ldr	r2, [pc, #48]	; (c9e4 <ivu_refresh+0x50>)
    c9b4:	480c      	ldr	r0, [pc, #48]	; (c9e8 <ivu_refresh+0x54>)
		bt_mesh_beacon_ivu_initiator(true);
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_store_iv(true);
	}
}
    c9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c9ba:	f00a bb8f 	b.w	170dc <k_delayed_work_submit_to_queue>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    c9be:	f7ff fe4f 	bl	c660 <atomic_test_bit.constprop.9>
    c9c2:	b140      	cbz	r0, c9d6 <ivu_refresh+0x42>
		bt_mesh_beacon_ivu_initiator(true);
    c9c4:	2001      	movs	r0, #1
    c9c6:	f7ff fcc3 	bl	c350 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    c9ca:	6820      	ldr	r0, [r4, #0]
    c9cc:	2100      	movs	r1, #0
}
    c9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    c9d2:	f7ff bf6b 	b.w	c8ac <bt_mesh_net_iv_update>
		bt_mesh_store_iv(true);
    c9d6:	2001      	movs	r0, #1
}
    c9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_store_iv(true);
    c9dc:	f011 bbbb 	b.w	1e156 <bt_mesh_store_iv>
    c9e0:	2000885c 	.word	0x2000885c
    c9e4:	05265c00 	.word	0x05265c00
    c9e8:	20001fc8 	.word	0x20001fc8

0000c9ec <bt_mesh_next_seq>:
{
    c9ec:	b510      	push	{r4, lr}
	u32_t seq = bt_mesh.seq++;
    c9ee:	4b04      	ldr	r3, [pc, #16]	; (ca00 <bt_mesh_next_seq+0x14>)
    c9f0:	685c      	ldr	r4, [r3, #4]
    c9f2:	1c62      	adds	r2, r4, #1
    c9f4:	605a      	str	r2, [r3, #4]
		bt_mesh_store_seq();
    c9f6:	f003 f9af 	bl	fd58 <bt_mesh_store_seq>
}
    c9fa:	4620      	mov	r0, r4
    c9fc:	bd10      	pop	{r4, pc}
    c9fe:	bf00      	nop
    ca00:	2000885c 	.word	0x2000885c

0000ca04 <bt_mesh_net_resend>:
{
    ca04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca08:	2759      	movs	r7, #89	; 0x59
    ca0a:	4357      	muls	r7, r2
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    ca0c:	4e2e      	ldr	r6, [pc, #184]	; (cac8 <bt_mesh_net_resend+0xc4>)
    ca0e:	688c      	ldr	r4, [r1, #8]
	priv = sub->keys[new_key].privacy;
    ca10:	f107 0869 	add.w	r8, r7, #105	; 0x69
{
    ca14:	4699      	mov	r9, r3
	priv = sub->keys[new_key].privacy;
    ca16:	4480      	add	r8, r0
{
    ca18:	4682      	mov	sl, r0
    ca1a:	460d      	mov	r5, r1
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    ca1c:	6831      	ldr	r1, [r6, #0]
    ca1e:	f7ff fe1f 	bl	c660 <atomic_test_bit.constprop.9>
    ca22:	4642      	mov	r2, r8
    ca24:	1a09      	subs	r1, r1, r0
    ca26:	4620      	mov	r0, r4
    ca28:	f00f fb40 	bl	1c0ac <bt_mesh_net_obfuscate>
	if (err) {
    ca2c:	4604      	mov	r4, r0
    ca2e:	2800      	cmp	r0, #0
    ca30:	d146      	bne.n	cac0 <bt_mesh_net_resend+0xbc>
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    ca32:	6832      	ldr	r2, [r6, #0]
    ca34:	f7ff fe14 	bl	c660 <atomic_test_bit.constprop.9>
	enc = sub->keys[new_key].enc;
    ca38:	3741      	adds	r7, #65	; 0x41
    ca3a:	4457      	add	r7, sl
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    ca3c:	f105 0a08 	add.w	sl, r5, #8
    ca40:	4623      	mov	r3, r4
    ca42:	1a12      	subs	r2, r2, r0
    ca44:	4651      	mov	r1, sl
    ca46:	4638      	mov	r0, r7
    ca48:	f00f fbac 	bl	1c1a4 <bt_mesh_net_decrypt>
	if (err) {
    ca4c:	4604      	mov	r4, r0
    ca4e:	2800      	cmp	r0, #0
    ca50:	d136      	bne.n	cac0 <bt_mesh_net_resend+0xbc>
	seq = bt_mesh_next_seq();
    ca52:	f7ff ffcb 	bl	c9ec <bt_mesh_next_seq>
	buf->data[2] = seq >> 16;
    ca56:	68ab      	ldr	r3, [r5, #8]
    ca58:	0c02      	lsrs	r2, r0, #16
    ca5a:	709a      	strb	r2, [r3, #2]
	buf->data[3] = seq >> 8;
    ca5c:	68ab      	ldr	r3, [r5, #8]
    ca5e:	0a02      	lsrs	r2, r0, #8
    ca60:	70da      	strb	r2, [r3, #3]
	buf->data[4] = seq;
    ca62:	68ab      	ldr	r3, [r5, #8]
	err = bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    ca64:	6832      	ldr	r2, [r6, #0]
	buf->data[4] = seq;
    ca66:	7118      	strb	r0, [r3, #4]
	err = bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    ca68:	f7ff fdfa 	bl	c660 <atomic_test_bit.constprop.9>
    ca6c:	4623      	mov	r3, r4
    ca6e:	1a12      	subs	r2, r2, r0
    ca70:	4651      	mov	r1, sl
    ca72:	4638      	mov	r0, r7
    ca74:	f00f fb43 	bl	1c0fe <bt_mesh_net_encrypt>
	if (err) {
    ca78:	4604      	mov	r4, r0
    ca7a:	bb08      	cbnz	r0, cac0 <bt_mesh_net_resend+0xbc>
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    ca7c:	68ac      	ldr	r4, [r5, #8]
    ca7e:	6831      	ldr	r1, [r6, #0]
    ca80:	f7ff fdee 	bl	c660 <atomic_test_bit.constprop.9>
    ca84:	4642      	mov	r2, r8
    ca86:	1a09      	subs	r1, r1, r0
    ca88:	4620      	mov	r0, r4
    ca8a:	f00f fb0f 	bl	1c0ac <bt_mesh_net_obfuscate>
	if (err) {
    ca8e:	4604      	mov	r4, r0
    ca90:	b9b0      	cbnz	r0, cac0 <bt_mesh_net_resend+0xbc>
	bt_mesh_adv_send(buf, cb, cb_data);
    ca92:	9a08      	ldr	r2, [sp, #32]
    ca94:	4649      	mov	r1, r9
    ca96:	4628      	mov	r0, r5
    ca98:	f7ff face 	bl	c038 <bt_mesh_adv_send>
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    ca9c:	f7ff fde0 	bl	c660 <atomic_test_bit.constprop.9>
    caa0:	b970      	cbnz	r0, cac0 <bt_mesh_net_resend+0xbc>
    caa2:	6872      	ldr	r2, [r6, #4]
    caa4:	4b09      	ldr	r3, [pc, #36]	; (cacc <bt_mesh_net_resend+0xc8>)
    caa6:	429a      	cmp	r2, r3
    caa8:	d90a      	bls.n	cac0 <bt_mesh_net_resend+0xbc>
		bt_mesh_beacon_ivu_initiator(true);
    caaa:	2001      	movs	r0, #1
    caac:	f7ff fc50 	bl	c350 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    cab0:	6830      	ldr	r0, [r6, #0]
    cab2:	2101      	movs	r1, #1
    cab4:	4408      	add	r0, r1
    cab6:	f7ff fef9 	bl	c8ac <bt_mesh_net_iv_update>
		bt_mesh_net_sec_update(NULL);
    caba:	4620      	mov	r0, r4
    cabc:	f00e ff21 	bl	1b902 <bt_mesh_net_sec_update>
}
    cac0:	4620      	mov	r0, r4
    cac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cac6:	bf00      	nop
    cac8:	2000885c 	.word	0x2000885c
    cacc:	007a1200 	.word	0x007a1200

0000cad0 <bt_mesh_net_encode>:
{
    cad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    cad4:	6843      	ldr	r3, [r0, #4]
    cad6:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    cad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cadc:	429f      	cmp	r7, r3
{
    cade:	4605      	mov	r5, r0
    cae0:	460c      	mov	r4, r1
    cae2:	4691      	mov	r9, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    cae4:	d008      	beq.n	caf8 <bt_mesh_net_encode+0x28>
	} else if (net_buf_simple_tailroom(buf) < 4) {
    cae6:	4620      	mov	r0, r4
    cae8:	f012 fbc3 	bl	1f272 <net_buf_simple_tailroom>
    caec:	2803      	cmp	r0, #3
    caee:	d809      	bhi.n	cb04 <bt_mesh_net_encode+0x34>
		return -EINVAL;
    caf0:	f06f 0015 	mvn.w	r0, #21
}
    caf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    caf8:	4608      	mov	r0, r1
    cafa:	f012 fbba 	bl	1f272 <net_buf_simple_tailroom>
    cafe:	2807      	cmp	r0, #7
    cb00:	d8f1      	bhi.n	cae6 <bt_mesh_net_encode+0x16>
    cb02:	e7f5      	b.n	caf0 <bt_mesh_net_encode+0x20>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    cb04:	686b      	ldr	r3, [r5, #4]
    cb06:	4620      	mov	r0, r4
    cb08:	8899      	ldrh	r1, [r3, #4]
    cb0a:	f012 fb54 	bl	1f1b6 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    cb0e:	8929      	ldrh	r1, [r5, #8]
    cb10:	4620      	mov	r0, r4
    cb12:	f012 fb50 	bl	1f1b6 <net_buf_simple_push_be16>
	seq = net_buf_simple_push(buf, 3);
    cb16:	2103      	movs	r1, #3
    cb18:	4620      	mov	r0, r4
    cb1a:	f012 fb44 	bl	1f1a6 <net_buf_simple_push>
    cb1e:	4606      	mov	r6, r0
	seq_val = bt_mesh_next_seq();
    cb20:	f7ff ff64 	bl	c9ec <bt_mesh_next_seq>
	seq[0] = seq_val >> 16;
    cb24:	0c03      	lsrs	r3, r0, #16
    cb26:	7033      	strb	r3, [r6, #0]
	seq[1] = seq_val >> 8;
    cb28:	0a03      	lsrs	r3, r0, #8
    cb2a:	7073      	strb	r3, [r6, #1]
	seq[2] = seq_val;
    cb2c:	70b0      	strb	r0, [r6, #2]
	if (ctl) {
    cb2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cb32:	429f      	cmp	r7, r3
    cb34:	686b      	ldr	r3, [r5, #4]
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    cb36:	4f1c      	ldr	r7, [pc, #112]	; (cba8 <bt_mesh_net_encode+0xd8>)
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    cb38:	7a59      	ldrb	r1, [r3, #9]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    cb3a:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    cb3c:	bf08      	it	eq
    cb3e:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    cb42:	f012 fb4d 	bl	1f1e0 <net_buf_simple_push_u8>
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    cb46:	682e      	ldr	r6, [r5, #0]
		tx->friend_cred = 0U;
    cb48:	7aeb      	ldrb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    cb4a:	7fb2      	ldrb	r2, [r6, #30]
		tx->friend_cred = 0U;
    cb4c:	f36f 0300 	bfc	r3, #0, #1
    cb50:	72eb      	strb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    cb52:	2559      	movs	r5, #89	; 0x59
    cb54:	4355      	muls	r5, r2
    cb56:	1973      	adds	r3, r6, r5
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    cb58:	783a      	ldrb	r2, [r7, #0]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    cb5a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    cb5e:	f7ff fd7f 	bl	c660 <atomic_test_bit.constprop.9>
    cb62:	1a10      	subs	r0, r2, r0
    cb64:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    cb68:	b2c9      	uxtb	r1, r1
    cb6a:	4620      	mov	r0, r4
    cb6c:	f012 fb38 	bl	1f1e0 <net_buf_simple_push_u8>
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
    cb70:	683a      	ldr	r2, [r7, #0]
    cb72:	f7ff fd75 	bl	c660 <atomic_test_bit.constprop.9>
		enc = tx->sub->keys[tx->sub->kr_flag].enc;
    cb76:	f105 0841 	add.w	r8, r5, #65	; 0x41
    cb7a:	44b0      	add	r8, r6
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
    cb7c:	1a12      	subs	r2, r2, r0
    cb7e:	464b      	mov	r3, r9
    cb80:	4621      	mov	r1, r4
    cb82:	4640      	mov	r0, r8
    cb84:	f00f fabb 	bl	1c0fe <bt_mesh_net_encrypt>
	if (err) {
    cb88:	2800      	cmp	r0, #0
    cb8a:	d1b3      	bne.n	caf4 <bt_mesh_net_encode+0x24>
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    cb8c:	6824      	ldr	r4, [r4, #0]
    cb8e:	6839      	ldr	r1, [r7, #0]
    cb90:	f7ff fd66 	bl	c660 <atomic_test_bit.constprop.9>
		priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    cb94:	f105 0269 	add.w	r2, r5, #105	; 0x69
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    cb98:	4432      	add	r2, r6
    cb9a:	1a09      	subs	r1, r1, r0
    cb9c:	4620      	mov	r0, r4
}
    cb9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    cba2:	f00f ba83 	b.w	1c0ac <bt_mesh_net_obfuscate>
    cba6:	bf00      	nop
    cba8:	2000885c 	.word	0x2000885c

0000cbac <bt_mesh_net_send>:
{
    cbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    cbb0:	6846      	ldr	r6, [r0, #4]
{
    cbb2:	461f      	mov	r7, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    cbb4:	7a73      	ldrb	r3, [r6, #9]
    cbb6:	2bff      	cmp	r3, #255	; 0xff
{
    cbb8:	4605      	mov	r5, r0
    cbba:	4688      	mov	r8, r1
    cbbc:	4614      	mov	r4, r2
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    cbbe:	d102      	bne.n	cbc6 <bt_mesh_net_send+0x1a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    cbc0:	f002 fa1a 	bl	eff8 <bt_mesh_default_ttl_get>
    cbc4:	7270      	strb	r0, [r6, #9]
	err = bt_mesh_net_encode(tx, &buf->b, false);
    cbc6:	f108 0908 	add.w	r9, r8, #8
    cbca:	2200      	movs	r2, #0
    cbcc:	4649      	mov	r1, r9
    cbce:	4628      	mov	r0, r5
    cbd0:	f7ff ff7e 	bl	cad0 <bt_mesh_net_encode>
	if (err) {
    cbd4:	4606      	mov	r6, r0
    cbd6:	b9c8      	cbnz	r0, cc0c <bt_mesh_net_send+0x60>
	    tx->ctx->send_ttl != 1) {
    cbd8:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cbda:	7a5a      	ldrb	r2, [r3, #9]
    cbdc:	2a01      	cmp	r2, #1
    cbde:	d01b      	beq.n	cc18 <bt_mesh_net_send+0x6c>
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    cbe0:	8899      	ldrh	r1, [r3, #4]
    cbe2:	4648      	mov	r0, r9
    cbe4:	f004 fafc 	bl	111e0 <bt_mesh_proxy_relay>
    cbe8:	b1b0      	cbz	r0, cc18 <bt_mesh_net_send+0x6c>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    cbea:	686b      	ldr	r3, [r5, #4]
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    cbec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cbf0:	2b00      	cmp	r3, #0
    cbf2:	dd11      	ble.n	cc18 <bt_mesh_net_send+0x6c>
			if (cb) {
    cbf4:	b154      	cbz	r4, cc0c <bt_mesh_net_send+0x60>
				if (cb->start) {
    cbf6:	6823      	ldr	r3, [r4, #0]
    cbf8:	b11b      	cbz	r3, cc02 <bt_mesh_net_send+0x56>
					cb->start(0, 0, cb_data);
    cbfa:	463a      	mov	r2, r7
    cbfc:	4631      	mov	r1, r6
    cbfe:	4630      	mov	r0, r6
    cc00:	4798      	blx	r3
				if (cb->end) {
    cc02:	6863      	ldr	r3, [r4, #4]
    cc04:	b113      	cbz	r3, cc0c <bt_mesh_net_send+0x60>
					cb->end(0, cb_data);
    cc06:	4639      	mov	r1, r7
    cc08:	2000      	movs	r0, #0
    cc0a:	4798      	blx	r3
	net_buf_unref(buf);
    cc0c:	4640      	mov	r0, r8
    cc0e:	f008 fe79 	bl	15904 <net_buf_unref>
}
    cc12:	4630      	mov	r0, r6
    cc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    cc18:	686b      	ldr	r3, [r5, #4]
    cc1a:	8898      	ldrh	r0, [r3, #4]
    cc1c:	f00f fbf7 	bl	1c40e <bt_mesh_fixed_group_match>
    cc20:	b318      	cbz	r0, cc6a <bt_mesh_net_send+0xbe>
		if (cb && cb->start) {
    cc22:	bb94      	cbnz	r4, cc8a <bt_mesh_net_send+0xde>
		net_buf_slist_put(&bt_mesh.local_queue, net_buf_ref(buf));
    cc24:	4640      	mov	r0, r8
    cc26:	f012 fa65 	bl	1f0f4 <net_buf_ref>
    cc2a:	4601      	mov	r1, r0
    cc2c:	481b      	ldr	r0, [pc, #108]	; (cc9c <bt_mesh_net_send+0xf0>)
    cc2e:	f012 fa04 	bl	1f03a <net_buf_slist_put>
		if (cb && cb->end) {
    cc32:	b124      	cbz	r4, cc3e <bt_mesh_net_send+0x92>
    cc34:	6863      	ldr	r3, [r4, #4]
    cc36:	b113      	cbz	r3, cc3e <bt_mesh_net_send+0x92>
			cb->end(0, cb_data);
    cc38:	4639      	mov	r1, r7
    cc3a:	2000      	movs	r0, #0
    cc3c:	4798      	blx	r3
    cc3e:	f3bf 8f5b 	dmb	ish
    cc42:	4917      	ldr	r1, [pc, #92]	; (cca0 <bt_mesh_net_send+0xf4>)
    cc44:	e851 3f00 	ldrex	r3, [r1]
    cc48:	f043 0201 	orr.w	r2, r3, #1
    cc4c:	e841 2000 	strex	r0, r2, [r1]
    cc50:	2800      	cmp	r0, #0
    cc52:	d1f7      	bne.n	cc44 <bt_mesh_net_send+0x98>
    cc54:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    cc58:	f013 0401 	ands.w	r4, r3, #1
    cc5c:	d1d6      	bne.n	cc0c <bt_mesh_net_send+0x60>
		k_queue_append(&work_q->queue, work);
    cc5e:	3908      	subs	r1, #8
    cc60:	4810      	ldr	r0, [pc, #64]	; (cca4 <bt_mesh_net_send+0xf8>)
    cc62:	f012 fd4d 	bl	1f700 <k_queue_append>
	err = bt_mesh_net_encode(tx, &buf->b, false);
    cc66:	4626      	mov	r6, r4
    cc68:	e7d0      	b.n	cc0c <bt_mesh_net_send+0x60>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    cc6a:	686b      	ldr	r3, [r5, #4]
    cc6c:	8898      	ldrh	r0, [r3, #4]
    cc6e:	f001 fbcb 	bl	e408 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    cc72:	2800      	cmp	r0, #0
    cc74:	d1d5      	bne.n	cc22 <bt_mesh_net_send+0x76>
	} else if (tx->ctx->send_ttl != 1) {
    cc76:	686b      	ldr	r3, [r5, #4]
    cc78:	7a5b      	ldrb	r3, [r3, #9]
    cc7a:	2b01      	cmp	r3, #1
    cc7c:	d0c6      	beq.n	cc0c <bt_mesh_net_send+0x60>
		bt_mesh_adv_send(buf, cb, cb_data);
    cc7e:	463a      	mov	r2, r7
    cc80:	4621      	mov	r1, r4
    cc82:	4640      	mov	r0, r8
    cc84:	f7ff f9d8 	bl	c038 <bt_mesh_adv_send>
    cc88:	e7c0      	b.n	cc0c <bt_mesh_net_send+0x60>
		if (cb && cb->start) {
    cc8a:	6823      	ldr	r3, [r4, #0]
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	d0c9      	beq.n	cc24 <bt_mesh_net_send+0x78>
			cb->start(0, 0, cb_data);
    cc90:	2100      	movs	r1, #0
    cc92:	463a      	mov	r2, r7
    cc94:	4608      	mov	r0, r1
    cc96:	4798      	blx	r3
    cc98:	e7c4      	b.n	cc24 <bt_mesh_net_send+0x78>
    cc9a:	bf00      	nop
    cc9c:	20008874 	.word	0x20008874
    cca0:	20008870 	.word	0x20008870
    cca4:	20001fc8 	.word	0x20001fc8

0000cca8 <bt_mesh_subnet_find>:
{
    cca8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ccac:	4c28      	ldr	r4, [pc, #160]	; (cd50 <bt_mesh_subnet_find+0xa8>)
{
    ccae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    ccb2:	4617      	mov	r7, r2
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ccb4:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
{
    ccb8:	4698      	mov	r8, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ccba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ccbe:	429a      	cmp	r2, r3
{
    ccc0:	4605      	mov	r5, r0
    ccc2:	460e      	mov	r6, r1
    ccc4:	46a2      	mov	sl, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ccc6:	d016      	beq.n	ccf6 <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    ccc8:	460a      	mov	r2, r1
    ccca:	f8cd 8000 	str.w	r8, [sp]
    ccce:	4601      	mov	r1, r0
    ccd0:	463b      	mov	r3, r7
    ccd2:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    ccd6:	f00e fdc3 	bl	1b860 <auth_match>
    ccda:	bb10      	cbnz	r0, cd22 <bt_mesh_subnet_find+0x7a>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    ccdc:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    cce0:	b14b      	cbz	r3, ccf6 <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    cce2:	f8cd 8000 	str.w	r8, [sp]
    cce6:	463b      	mov	r3, r7
    cce8:	4632      	mov	r2, r6
    ccea:	4629      	mov	r1, r5
    ccec:	f204 102d 	addw	r0, r4, #301	; 0x12d
    ccf0:	f00e fdb6 	bl	1b860 <auth_match>
    ccf4:	bb38      	cbnz	r0, cd46 <bt_mesh_subnet_find+0x9e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ccf6:	f8ba 21a4 	ldrh.w	r2, [sl, #420]	; 0x1a4
    ccfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ccfe:	429a      	cmp	r2, r3
    cd00:	d024      	beq.n	cd4c <bt_mesh_subnet_find+0xa4>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    cd02:	f8cd 8000 	str.w	r8, [sp]
    cd06:	463b      	mov	r3, r7
    cd08:	4632      	mov	r2, r6
    cd0a:	4629      	mov	r1, r5
    cd0c:	4811      	ldr	r0, [pc, #68]	; (cd54 <bt_mesh_subnet_find+0xac>)
    cd0e:	f00e fda7 	bl	1b860 <auth_match>
    cd12:	b148      	cbz	r0, cd28 <bt_mesh_subnet_find+0x80>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    cd14:	4810      	ldr	r0, [pc, #64]	; (cd58 <bt_mesh_subnet_find+0xb0>)
			*new_key = false;
    cd16:	2300      	movs	r3, #0
			*new_key = true;
    cd18:	f889 3000 	strb.w	r3, [r9]
}
    cd1c:	b002      	add	sp, #8
    cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    cd22:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    cd26:	e7f6      	b.n	cd16 <bt_mesh_subnet_find+0x6e>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    cd28:	f89a 31a7 	ldrb.w	r3, [sl, #423]	; 0x1a7
    cd2c:	b173      	cbz	r3, cd4c <bt_mesh_subnet_find+0xa4>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    cd2e:	f8cd 8000 	str.w	r8, [sp]
    cd32:	463b      	mov	r3, r7
    cd34:	4632      	mov	r2, r6
    cd36:	4629      	mov	r1, r5
    cd38:	4808      	ldr	r0, [pc, #32]	; (cd5c <bt_mesh_subnet_find+0xb4>)
    cd3a:	f00e fd91 	bl	1b860 <auth_match>
    cd3e:	b128      	cbz	r0, cd4c <bt_mesh_subnet_find+0xa4>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    cd40:	4805      	ldr	r0, [pc, #20]	; (cd58 <bt_mesh_subnet_find+0xb0>)
			*new_key = true;
    cd42:	2301      	movs	r3, #1
    cd44:	e7e8      	b.n	cd18 <bt_mesh_subnet_find+0x70>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    cd46:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    cd4a:	e7fa      	b.n	cd42 <bt_mesh_subnet_find+0x9a>
	return NULL;
    cd4c:	2000      	movs	r0, #0
    cd4e:	e7e5      	b.n	cd1c <bt_mesh_subnet_find+0x74>
    cd50:	2000885c 	.word	0x2000885c
    cd54:	20008a14 	.word	0x20008a14
    cd58:	200089e4 	.word	0x200089e4
    cd5c:	20008a6d 	.word	0x20008a6d

0000cd60 <bt_mesh_net_decode>:
{
    cd60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    cd64:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    cd68:	f1b8 0f11 	cmp.w	r8, #17
{
    cd6c:	460e      	mov	r6, r1
    cd6e:	4614      	mov	r4, r2
    cd70:	4699      	mov	r9, r3
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    cd72:	f240 80ea 	bls.w	cf4a <bt_mesh_net_decode+0x1ea>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(data)) {
    cd76:	6807      	ldr	r7, [r0, #0]
    cd78:	bb89      	cbnz	r1, cdde <bt_mesh_net_decode+0x7e>
	return buf->data + buf->len;
    cd7a:	eb07 0208 	add.w	r2, r7, r8
    cd7e:	f812 3c07 	ldrb.w	r3, [r2, #-7]
    cd82:	f812 1c08 	ldrb.w	r1, [r2, #-8]
    cd86:	f812 0c06 	ldrb.w	r0, [r2, #-6]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cd8a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    cd8e:	f812 3c05 	ldrb.w	r3, [r2, #-5]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cd92:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    cd96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
    cd9a:	f812 0c04 	ldrb.w	r0, [r2, #-4]
    cd9e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cda2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    cda6:	f812 0c02 	ldrb.w	r0, [r2, #-2]
    cdaa:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    cdae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    cdb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    cdb6:	4966      	ldr	r1, [pc, #408]	; (cf50 <bt_mesh_net_decode+0x1f0>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    cdb8:	4053      	eors	r3, r2
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    cdba:	4608      	mov	r0, r1
    cdbc:	4632      	mov	r2, r6
		if (dup_cache[i] == val) {
    cdbe:	f851 5b04 	ldr.w	r5, [r1], #4
    cdc2:	42ab      	cmp	r3, r5
    cdc4:	f000 80c1 	beq.w	cf4a <bt_mesh_net_decode+0x1ea>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    cdc8:	3201      	adds	r2, #1
    cdca:	2a04      	cmp	r2, #4
    cdcc:	d1f7      	bne.n	cdbe <bt_mesh_net_decode+0x5e>
	dup_cache[dup_cache_next++] = val;
    cdce:	4961      	ldr	r1, [pc, #388]	; (cf54 <bt_mesh_net_decode+0x1f4>)
    cdd0:	680a      	ldr	r2, [r1, #0]
    cdd2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    cdd6:	3201      	adds	r2, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    cdd8:	f002 0203 	and.w	r2, r2, #3
    cddc:	600a      	str	r2, [r1, #0]
	rx->net_if = net_if;
    cdde:	7d23      	ldrb	r3, [r4, #20]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    cde0:	4d5d      	ldr	r5, [pc, #372]	; (cf58 <bt_mesh_net_decode+0x1f8>)
	rx->net_if = net_if;
    cde2:	f366 1305 	bfi	r3, r6, #4, #2
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    cde6:	f8b5 20c0 	ldrh.w	r2, [r5, #192]	; 0xc0
	rx->net_if = net_if;
    cdea:	7523      	strb	r3, [r4, #20]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    cdec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cdf0:	429a      	cmp	r2, r3
    cdf2:	d02b      	beq.n	ce4c <bt_mesh_net_decode+0xec>
		if (NID(data) == sub->keys[0].nid &&
    cdf4:	783b      	ldrb	r3, [r7, #0]
    cdf6:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
    cdfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cdfe:	429a      	cmp	r2, r3
    ce00:	d015      	beq.n	ce2e <bt_mesh_net_decode+0xce>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    ce02:	f895 30c3 	ldrb.w	r3, [r5, #195]	; 0xc3
    ce06:	b30b      	cbz	r3, ce4c <bt_mesh_net_decode+0xec>
		if (NID(data) == sub->keys[1].nid &&
    ce08:	783b      	ldrb	r3, [r7, #0]
    ce0a:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    ce0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ce12:	429a      	cmp	r2, r3
    ce14:	d11a      	bne.n	ce4c <bt_mesh_net_decode+0xec>
		    !net_decrypt(sub, sub->keys[1].enc, sub->keys[1].privacy,
    ce16:	4951      	ldr	r1, [pc, #324]	; (cf5c <bt_mesh_net_decode+0x1fc>)
    ce18:	e9cd 4900 	strd	r4, r9, [sp]
    ce1c:	4643      	mov	r3, r8
    ce1e:	463a      	mov	r2, r7
    ce20:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
    ce24:	f7ff fb94 	bl	c550 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[1].nid &&
    ce28:	b980      	cbnz	r0, ce4c <bt_mesh_net_decode+0xec>
		sub = &bt_mesh.sub[i];
    ce2a:	4a4d      	ldr	r2, [pc, #308]	; (cf60 <bt_mesh_net_decode+0x200>)
    ce2c:	e06e      	b.n	cf0c <bt_mesh_net_decode+0x1ac>
		    !net_decrypt(sub, sub->keys[0].enc, sub->keys[0].privacy,
    ce2e:	e9cd 4900 	strd	r4, r9, [sp]
    ce32:	4643      	mov	r3, r8
    ce34:	463a      	mov	r2, r7
    ce36:	f205 110d 	addw	r1, r5, #269	; 0x10d
    ce3a:	f105 00e5 	add.w	r0, r5, #229	; 0xe5
    ce3e:	f7ff fb87 	bl	c550 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[0].nid &&
    ce42:	2800      	cmp	r0, #0
    ce44:	d1dd      	bne.n	ce02 <bt_mesh_net_decode+0xa2>
		sub = &bt_mesh.sub[i];
    ce46:	f105 03a4 	add.w	r3, r5, #164	; 0xa4
    ce4a:	e019      	b.n	ce80 <bt_mesh_net_decode+0x120>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    ce4c:	f8b5 21a4 	ldrh.w	r2, [r5, #420]	; 0x1a4
    ce50:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ce54:	429a      	cmp	r2, r3
    ce56:	d065      	beq.n	cf24 <bt_mesh_net_decode+0x1c4>
		if (NID(data) == sub->keys[0].nid &&
    ce58:	783b      	ldrb	r3, [r7, #0]
    ce5a:	f895 21c8 	ldrb.w	r2, [r5, #456]	; 0x1c8
    ce5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ce62:	429a      	cmp	r2, r3
    ce64:	d13c      	bne.n	cee0 <bt_mesh_net_decode+0x180>
		    !net_decrypt(sub, sub->keys[0].enc, sub->keys[0].privacy,
    ce66:	493f      	ldr	r1, [pc, #252]	; (cf64 <bt_mesh_net_decode+0x204>)
    ce68:	e9cd 4900 	strd	r4, r9, [sp]
    ce6c:	4643      	mov	r3, r8
    ce6e:	463a      	mov	r2, r7
    ce70:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
    ce74:	f7ff fb6c 	bl	c550 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[0].nid &&
    ce78:	2800      	cmp	r0, #0
    ce7a:	d131      	bne.n	cee0 <bt_mesh_net_decode+0x180>
		sub = &bt_mesh.sub[i];
    ce7c:	4b3a      	ldr	r3, [pc, #232]	; (cf68 <bt_mesh_net_decode+0x208>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    ce7e:	2001      	movs	r0, #1
			rx->ctx.net_idx = sub->net_idx;
    ce80:	22e4      	movs	r2, #228	; 0xe4
    ce82:	fb02 5000 	mla	r0, r2, r0, r5
    ce86:	f8b0 20c0 	ldrh.w	r2, [r0, #192]	; 0xc0
    ce8a:	80a2      	strh	r2, [r4, #4]
			rx->sub = sub;
    ce8c:	6023      	str	r3, [r4, #0]
	rx->ctx.recv_ttl = TTL(buf->data);
    ce8e:	f8d9 2000 	ldr.w	r2, [r9]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    ce92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ce96:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(buf->data);
    ce98:	7851      	ldrb	r1, [r2, #1]
    ce9a:	7b23      	ldrb	r3, [r4, #12]
    ce9c:	f361 0306 	bfi	r3, r1, #0, #7
    cea0:	7323      	strb	r3, [r4, #12]
	if (rx->ctx.recv_ttl == 0) {
    cea2:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
    cea6:	bf18      	it	ne
    cea8:	2301      	movne	r3, #1
    ceaa:	425b      	negs	r3, r3
    ceac:	7363      	strb	r3, [r4, #13]
	rx->ctl = CTL(buf->data);
    ceae:	7853      	ldrb	r3, [r2, #1]
    ceb0:	7d21      	ldrb	r1, [r4, #20]
    ceb2:	09db      	lsrs	r3, r3, #7
    ceb4:	f363 01c3 	bfi	r1, r3, #3, #1
    ceb8:	7521      	strb	r1, [r4, #20]
	rx->seq = SEQ(buf->data);
    ceba:	78d3      	ldrb	r3, [r2, #3]
    cebc:	7891      	ldrb	r1, [r2, #2]
    cebe:	021b      	lsls	r3, r3, #8
    cec0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cec4:	7911      	ldrb	r1, [r2, #4]
    cec6:	430b      	orrs	r3, r1
    cec8:	6123      	str	r3, [r4, #16]
	return ((u16_t)src[0] << 8) | src[1];
    ceca:	79d1      	ldrb	r1, [r2, #7]
    cecc:	7a13      	ldrb	r3, [r2, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    cece:	2e03      	cmp	r6, #3
    ced0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rx->ctx.recv_dst = DST(buf->data);
    ced4:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    ced6:	d02a      	beq.n	cf2e <bt_mesh_net_decode+0x1ce>
    ced8:	bb4b      	cbnz	r3, cf2e <bt_mesh_net_decode+0x1ce>
		return -EBADMSG;
    ceda:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    cede:	e023      	b.n	cf28 <bt_mesh_net_decode+0x1c8>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    cee0:	f895 31a7 	ldrb.w	r3, [r5, #423]	; 0x1a7
    cee4:	b1f3      	cbz	r3, cf24 <bt_mesh_net_decode+0x1c4>
		if (NID(data) == sub->keys[1].nid &&
    cee6:	783b      	ldrb	r3, [r7, #0]
    cee8:	f895 2221 	ldrb.w	r2, [r5, #545]	; 0x221
    ceec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cef0:	429a      	cmp	r2, r3
    cef2:	d117      	bne.n	cf24 <bt_mesh_net_decode+0x1c4>
		    !net_decrypt(sub, sub->keys[1].enc, sub->keys[1].privacy,
    cef4:	491d      	ldr	r1, [pc, #116]	; (cf6c <bt_mesh_net_decode+0x20c>)
    cef6:	e9cd 4900 	strd	r4, r9, [sp]
    cefa:	4643      	mov	r3, r8
    cefc:	463a      	mov	r2, r7
    cefe:	f1a1 0028 	sub.w	r0, r1, #40	; 0x28
    cf02:	f7ff fb25 	bl	c550 <net_decrypt.isra.1>
		if (NID(data) == sub->keys[1].nid &&
    cf06:	b968      	cbnz	r0, cf24 <bt_mesh_net_decode+0x1c4>
		sub = &bt_mesh.sub[i];
    cf08:	4a17      	ldr	r2, [pc, #92]	; (cf68 <bt_mesh_net_decode+0x208>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    cf0a:	2001      	movs	r0, #1
			rx->new_key = 1U;
    cf0c:	7d23      	ldrb	r3, [r4, #20]
    cf0e:	f043 0302 	orr.w	r3, r3, #2
    cf12:	7523      	strb	r3, [r4, #20]
			rx->ctx.net_idx = sub->net_idx;
    cf14:	23e4      	movs	r3, #228	; 0xe4
    cf16:	fb03 5000 	mla	r0, r3, r0, r5
    cf1a:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
    cf1e:	80a3      	strh	r3, [r4, #4]
			rx->sub = sub;
    cf20:	6022      	str	r2, [r4, #0]
			return true;
    cf22:	e7b4      	b.n	ce8e <bt_mesh_net_decode+0x12e>
		return -ENOENT;
    cf24:	f06f 0001 	mvn.w	r0, #1
}
    cf28:	b003      	add	sp, #12
    cf2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (BT_MESH_ADDR_IS_RFU(rx->ctx.recv_dst)) {
    cf2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    cf32:	b29b      	uxth	r3, r3
    cf34:	2bfb      	cmp	r3, #251	; 0xfb
    cf36:	d9d0      	bls.n	ceda <bt_mesh_net_decode+0x17a>
	if (net_if != BT_MESH_NET_IF_LOCAL && bt_mesh_elem_find(rx->ctx.addr)) {
    cf38:	2e01      	cmp	r6, #1
    cf3a:	d004      	beq.n	cf46 <bt_mesh_net_decode+0x1e6>
    cf3c:	8920      	ldrh	r0, [r4, #8]
    cf3e:	f001 fa63 	bl	e408 <bt_mesh_elem_find>
    cf42:	2800      	cmp	r0, #0
    cf44:	d1c9      	bne.n	ceda <bt_mesh_net_decode+0x17a>
	return 0;
    cf46:	2000      	movs	r0, #0
    cf48:	e7ee      	b.n	cf28 <bt_mesh_net_decode+0x1c8>
		return -EINVAL;
    cf4a:	f06f 0015 	mvn.w	r0, #21
    cf4e:	e7eb      	b.n	cf28 <bt_mesh_net_decode+0x1c8>
    cf50:	20000f7c 	.word	0x20000f7c
    cf54:	20000f8c 	.word	0x20000f8c
    cf58:	2000885c 	.word	0x2000885c
    cf5c:	200089c2 	.word	0x200089c2
    cf60:	20008900 	.word	0x20008900
    cf64:	20008a4d 	.word	0x20008a4d
    cf68:	200089e4 	.word	0x200089e4
    cf6c:	20008aa6 	.word	0x20008aa6

0000cf70 <bt_mesh_net_recv>:
{
    cf70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf74:	b092      	sub	sp, #72	; 0x48
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    cf76:	ab0a      	add	r3, sp, #40	; 0x28
{
    cf78:	4616      	mov	r6, r2
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    cf7a:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
{
    cf7e:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    cf80:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    cf84:	4605      	mov	r5, r0
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    cf86:	2218      	movs	r2, #24
    cf88:	2100      	movs	r1, #0
    cf8a:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    cf8c:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    cf8e:	f00d f8b5 	bl	1a0fc <memset>
    cf92:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	if (!bt_mesh_is_provisioned()) {
    cf96:	f00e fbea 	bl	1b76e <bt_mesh_is_provisioned>
    cf9a:	2800      	cmp	r0, #0
    cf9c:	d043      	beq.n	d026 <bt_mesh_net_recv+0xb6>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    cf9e:	ab01      	add	r3, sp, #4
    cfa0:	aa04      	add	r2, sp, #16
    cfa2:	4631      	mov	r1, r6
    cfa4:	4628      	mov	r0, r5
    cfa6:	f7ff fedb 	bl	cd60 <bt_mesh_net_decode>
    cfaa:	2800      	cmp	r0, #0
    cfac:	d13b      	bne.n	d026 <bt_mesh_net_recv+0xb6>
	state->offset = net_buf_simple_headroom(buf);
    cfae:	a801      	add	r0, sp, #4
    cfb0:	f012 f95b 	bl	1f26a <net_buf_simple_headroom>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cfb4:	2e02      	cmp	r6, #2
    cfb6:	4604      	mov	r4, r0
	state->len = buf->len;
    cfb8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
    cfbc:	d104      	bne.n	cfc8 <bt_mesh_net_recv+0x58>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    cfbe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    cfc2:	4628      	mov	r0, r5
    cfc4:	f011 fad1 	bl	1e56a <bt_mesh_proxy_addr_add>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cfc8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    cfcc:	f00f fa1f 	bl	1c40e <bt_mesh_fixed_group_match>
    cfd0:	bb60      	cbnz	r0, d02c <bt_mesh_net_recv+0xbc>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    cfd2:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    cfd6:	f001 fa17 	bl	e408 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cfda:	3000      	adds	r0, #0
    cfdc:	bf18      	it	ne
    cfde:	2001      	movne	r0, #1
    cfe0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	bt_mesh_trans_recv(&buf, &rx);
    cfe4:	a904      	add	r1, sp, #16
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cfe6:	f360 1386 	bfi	r3, r0, #6, #1
	bt_mesh_trans_recv(&buf, &rx);
    cfea:	a801      	add	r0, sp, #4
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    cfec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_mesh_trans_recv(&buf, &rx);
    cff0:	f000 fd54 	bl	da9c <bt_mesh_trans_recv>
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    cff4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    cff8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    cffc:	2b00      	cmp	r3, #0
    cffe:	dd02      	ble.n	d006 <bt_mesh_net_recv+0x96>
    d000:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    d004:	d10f      	bne.n	d026 <bt_mesh_net_recv+0xb6>
	buf->data = buf->__buf + state->offset;
    d006:	9b03      	ldr	r3, [sp, #12]
	buf->len = state->len;
    d008:	f8ad 7008 	strh.w	r7, [sp, #8]
	buf->data = buf->__buf + state->offset;
    d00c:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d010:	f002 0230 	and.w	r2, r2, #48	; 0x30
    d014:	f89d 301c 	ldrb.w	r3, [sp, #28]
    d018:	9401      	str	r4, [sp, #4]
    d01a:	2a10      	cmp	r2, #16
		if (rx->ctx.recv_ttl == 1) {
    d01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d020:	d106      	bne.n	d030 <bt_mesh_net_recv+0xc0>
		if (rx->ctx.recv_ttl == 1) {
    d022:	2b01      	cmp	r3, #1
    d024:	d110      	bne.n	d048 <bt_mesh_net_recv+0xd8>
}
    d026:	b012      	add	sp, #72	; 0x48
    d028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d02c:	2001      	movs	r0, #1
    d02e:	e7d7      	b.n	cfe0 <bt_mesh_net_recv+0x70>
		if (rx->ctx.recv_ttl <= 1) {
    d030:	2b01      	cmp	r3, #1
    d032:	d9f8      	bls.n	d026 <bt_mesh_net_recv+0xb6>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    d034:	b942      	cbnz	r2, d048 <bt_mesh_net_recv+0xd8>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    d036:	f001 ff43 	bl	eec0 <bt_mesh_relay_get>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    d03a:	2801      	cmp	r0, #1
    d03c:	d107      	bne.n	d04e <bt_mesh_net_recv+0xde>
	if (rx->net_if == BT_MESH_NET_IF_ADV) {
    d03e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d042:	f013 0f30 	tst.w	r3, #48	; 0x30
    d046:	d007      	beq.n	d058 <bt_mesh_net_recv+0xe8>
		transmit = bt_mesh_net_transmit_get();
    d048:	f001 ff32 	bl	eeb0 <bt_mesh_net_transmit_get>
    d04c:	e006      	b.n	d05c <bt_mesh_net_recv+0xec>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    d04e:	f001 ff5b 	bl	ef08 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    d052:	2801      	cmp	r0, #1
    d054:	d1e7      	bne.n	d026 <bt_mesh_net_recv+0xb6>
    d056:	e7f2      	b.n	d03e <bt_mesh_net_recv+0xce>
		transmit = bt_mesh_relay_retransmit_get();
    d058:	f001 ff46 	bl	eee8 <bt_mesh_relay_retransmit_get>
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    d05c:	4601      	mov	r1, r0
    d05e:	2200      	movs	r2, #0
    d060:	2001      	movs	r0, #1
    d062:	f7fe ffd9 	bl	c018 <bt_mesh_adv_create>
	if (!buf) {
    d066:	4604      	mov	r4, r0
    d068:	2800      	cmp	r0, #0
    d06a:	d0dc      	beq.n	d026 <bt_mesh_net_recv+0xb6>
	if (rx->net_if != BT_MESH_NET_IF_LOCAL) {
    d06c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d070:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d074:	2b10      	cmp	r3, #16
    d076:	d00d      	beq.n	d094 <bt_mesh_net_recv+0x124>
    d078:	9a01      	ldr	r2, [sp, #4]
		sbuf->data[1] &= 0x80;
    d07a:	7853      	ldrb	r3, [r2, #1]
    d07c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d080:	7053      	strb	r3, [r2, #1]
		sbuf->data[1] |= rx->ctx.recv_ttl - 1;
    d082:	9a01      	ldr	r2, [sp, #4]
    d084:	f89d 301c 	ldrb.w	r3, [sp, #28]
    d088:	7851      	ldrb	r1, [r2, #1]
    d08a:	f3c3 0306 	ubfx	r3, r3, #0, #7
    d08e:	3b01      	subs	r3, #1
    d090:	430b      	orrs	r3, r1
    d092:	7053      	strb	r3, [r2, #1]
	net_buf_add_mem(buf, sbuf->data, sbuf->len);
    d094:	f104 0708 	add.w	r7, r4, #8
    d098:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    d09c:	9901      	ldr	r1, [sp, #4]
    d09e:	4638      	mov	r0, r7
    d0a0:	f012 f832 	bl	1f108 <net_buf_simple_add_mem>
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d0a4:	9e04      	ldr	r6, [sp, #16]
	if (rx->friend_cred) {
    d0a6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d0aa:	7fb2      	ldrb	r2, [r6, #30]
    d0ac:	2559      	movs	r5, #89	; 0x59
    d0ae:	4355      	muls	r5, r2
    d0b0:	f105 0041 	add.w	r0, r5, #65	; 0x41
	if (rx->friend_cred) {
    d0b4:	075a      	lsls	r2, r3, #29
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    d0b6:	4430      	add	r0, r6
	if (rx->friend_cred) {
    d0b8:	d50b      	bpl.n	d0d2 <bt_mesh_net_recv+0x162>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    d0ba:	68a1      	ldr	r1, [r4, #8]
    d0bc:	780a      	ldrb	r2, [r1, #0]
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    d0be:	1973      	adds	r3, r6, r5
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    d0c0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    d0c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    d0c8:	700a      	strb	r2, [r1, #0]
		buf->data[0] |= nid;
    d0ca:	68a2      	ldr	r2, [r4, #8]
    d0cc:	7811      	ldrb	r1, [r2, #0]
    d0ce:	430b      	orrs	r3, r1
    d0d0:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_RX(rx), false)) {
    d0d2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d174 <bt_mesh_net_recv+0x204>
    d0d6:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    d0da:	f8d8 1000 	ldr.w	r1, [r8]
    d0de:	f002 0201 	and.w	r2, r2, #1
    d0e2:	1a8a      	subs	r2, r1, r2
    d0e4:	2300      	movs	r3, #0
    d0e6:	4639      	mov	r1, r7
    d0e8:	f00f f809 	bl	1c0fe <bt_mesh_net_encrypt>
    d0ec:	bb10      	cbnz	r0, d134 <bt_mesh_net_recv+0x1c4>
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    d0ee:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d0f2:	f8d8 1000 	ldr.w	r1, [r8]
    d0f6:	68a0      	ldr	r0, [r4, #8]
	priv = rx->sub->keys[rx->sub->kr_flag].privacy;
    d0f8:	f105 0269 	add.w	r2, r5, #105	; 0x69
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    d0fc:	f003 0301 	and.w	r3, r3, #1
    d100:	4432      	add	r2, r6
    d102:	1ac9      	subs	r1, r1, r3
    d104:	f00e ffd2 	bl	1c0ac <bt_mesh_net_obfuscate>
    d108:	b9a0      	cbnz	r0, d134 <bt_mesh_net_recv+0x1c4>
	    (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED ||
    d10a:	f001 fefd 	bl	ef08 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d10e:	2801      	cmp	r0, #1
    d110:	d014      	beq.n	d13c <bt_mesh_net_recv+0x1cc>
	     rx->net_if == BT_MESH_NET_IF_LOCAL)) {
    d112:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d116:	f003 0330 	and.w	r3, r3, #48	; 0x30
    d11a:	2b10      	cmp	r3, #16
    d11c:	d00e      	beq.n	d13c <bt_mesh_net_recv+0x1cc>
	if (relay_to_adv(rx->net_if)) {
    d11e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d122:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d126:	b2da      	uxtb	r2, r3
	switch (net_if) {
    d128:	2a01      	cmp	r2, #1
    d12a:	d01a      	beq.n	d162 <bt_mesh_net_recv+0x1f2>
    d12c:	b25b      	sxtb	r3, r3
    d12e:	b18b      	cbz	r3, d154 <bt_mesh_net_recv+0x1e4>
    d130:	2a02      	cmp	r2, #2
    d132:	d01c      	beq.n	d16e <bt_mesh_net_recv+0x1fe>
	net_buf_unref(buf);
    d134:	4620      	mov	r0, r4
    d136:	f008 fbe5 	bl	15904 <net_buf_unref>
    d13a:	e774      	b.n	d026 <bt_mesh_net_recv+0xb6>
		if (bt_mesh_proxy_relay(&buf->b, rx->ctx.recv_dst) &&
    d13c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    d140:	4638      	mov	r0, r7
    d142:	f004 f84d 	bl	111e0 <bt_mesh_proxy_relay>
    d146:	2800      	cmp	r0, #0
    d148:	d0e9      	beq.n	d11e <bt_mesh_net_recv+0x1ae>
    d14a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    d14e:	2b00      	cmp	r3, #0
    d150:	dde5      	ble.n	d11e <bt_mesh_net_recv+0x1ae>
    d152:	e7ef      	b.n	d134 <bt_mesh_net_recv+0x1c4>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    d154:	f001 feb4 	bl	eec0 <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    d158:	1e43      	subs	r3, r0, #1
    d15a:	4258      	negs	r0, r3
    d15c:	4158      	adcs	r0, r3
	if (relay_to_adv(rx->net_if)) {
    d15e:	2800      	cmp	r0, #0
    d160:	d0e8      	beq.n	d134 <bt_mesh_net_recv+0x1c4>
		bt_mesh_adv_send(buf, NULL, NULL);
    d162:	2200      	movs	r2, #0
    d164:	4611      	mov	r1, r2
    d166:	4620      	mov	r0, r4
    d168:	f7fe ff66 	bl	c038 <bt_mesh_adv_send>
    d16c:	e7e2      	b.n	d134 <bt_mesh_net_recv+0x1c4>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    d16e:	f001 fecb 	bl	ef08 <bt_mesh_gatt_proxy_get>
    d172:	e7f1      	b.n	d158 <bt_mesh_net_recv+0x1e8>
    d174:	2000885c 	.word	0x2000885c

0000d178 <bt_mesh_net_local>:
{
    d178:	b538      	push	{r3, r4, r5, lr}
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    d17a:	4d08      	ldr	r5, [pc, #32]	; (d19c <bt_mesh_net_local+0x24>)
    d17c:	4628      	mov	r0, r5
    d17e:	f011 ff77 	bl	1f070 <net_buf_slist_get>
    d182:	4604      	mov	r4, r0
    d184:	b900      	cbnz	r0, d188 <bt_mesh_net_local+0x10>
}
    d186:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_net_recv(&buf->b, 0, BT_MESH_NET_IF_LOCAL);
    d188:	f104 0008 	add.w	r0, r4, #8
    d18c:	2201      	movs	r2, #1
    d18e:	2100      	movs	r1, #0
    d190:	f7ff feee 	bl	cf70 <bt_mesh_net_recv>
		net_buf_unref(buf);
    d194:	4620      	mov	r0, r4
    d196:	f008 fbb5 	bl	15904 <net_buf_unref>
    d19a:	e7ef      	b.n	d17c <bt_mesh_net_local+0x4>
    d19c:	20008874 	.word	0x20008874

0000d1a0 <bt_mesh_net_start>:

void bt_mesh_net_start(void)
{
    d1a0:	b510      	push	{r4, lr}
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED) {
    d1a2:	f001 fea9 	bl	eef8 <bt_mesh_beacon_get>
    d1a6:	2801      	cmp	r0, #1
    d1a8:	d116      	bne.n	d1d8 <bt_mesh_net_start+0x38>
		bt_mesh_beacon_enable();
    d1aa:	f7ff f99b 	bl	c4e4 <bt_mesh_beacon_enable>
	} else {
		bt_mesh_beacon_disable();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    d1ae:	f001 feab 	bl	ef08 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    d1b2:	2802      	cmp	r0, #2
    d1b4:	d003      	beq.n	d1be <bt_mesh_net_start+0x1e>
		bt_mesh_proxy_gatt_enable();
    d1b6:	f003 ffaf 	bl	11118 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    d1ba:	f7fe feff 	bl	bfbc <bt_mesh_adv_update>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_init();
	} else {
		bt_mesh_scan_enable();
    d1be:	f7fe ff71 	bl	c0a4 <bt_mesh_scan_enable>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_init();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		u16_t net_idx = bt_mesh.sub[0].net_idx;
    d1c2:	4b07      	ldr	r3, [pc, #28]	; (d1e0 <bt_mesh_net_start+0x40>)
    d1c4:	f8b3 40c0 	ldrh.w	r4, [r3, #192]	; 0xc0
		u16_t addr = bt_mesh_primary_addr();
    d1c8:	f001 f918 	bl	e3fc <bt_mesh_primary_addr>

		bt_mesh_prov_complete(net_idx, addr);
    d1cc:	4601      	mov	r1, r0
    d1ce:	4620      	mov	r0, r4
	}
}
    d1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_complete(net_idx, addr);
    d1d4:	f003 bd78 	b.w	10cc8 <bt_mesh_prov_complete>
		bt_mesh_beacon_disable();
    d1d8:	f7ff f9aa 	bl	c530 <bt_mesh_beacon_disable>
    d1dc:	e7e7      	b.n	d1ae <bt_mesh_net_start+0xe>
    d1de:	bf00      	nop
    d1e0:	2000885c 	.word	0x2000885c

0000d1e4 <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
    d1e4:	b510      	push	{r4, lr}
	k_delayed_work_init(&bt_mesh.ivu_timer, ivu_refresh);
    d1e6:	4c06      	ldr	r4, [pc, #24]	; (d200 <bt_mesh_net_init+0x1c>)
    d1e8:	4906      	ldr	r1, [pc, #24]	; (d204 <bt_mesh_net_init+0x20>)
    d1ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d1ee:	f012 fc95 	bl	1fb1c <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d1f2:	4a05      	ldr	r2, [pc, #20]	; (d208 <bt_mesh_net_init+0x24>)
    d1f4:	2300      	movs	r3, #0
    d1f6:	60e3      	str	r3, [r4, #12]
    d1f8:	e9c4 2304 	strd	r2, r3, [r4, #16]

	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
}
    d1fc:	bd10      	pop	{r4, pc}
    d1fe:	bf00      	nop
    d200:	2000885c 	.word	0x2000885c
    d204:	0000c995 	.word	0x0000c995
    d208:	0000d179 	.word	0x0000d179

0000d20c <is_replay>:
static bool is_replay(struct bt_mesh_net_rx *rx)
{
	int i;

	/* Don't bother checking messages from ourselves */
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d20c:	7d02      	ldrb	r2, [r0, #20]
{
    d20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d210:	f002 0330 	and.w	r3, r2, #48	; 0x30
    d214:	2b10      	cmp	r3, #16
{
    d216:	4605      	mov	r5, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    d218:	d013      	beq.n	d242 <is_replay+0x36>
    d21a:	4918      	ldr	r1, [pc, #96]	; (d27c <is_replay+0x70>)
    d21c:	8907      	ldrh	r7, [r0, #8]
		return false;
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    d21e:	2300      	movs	r3, #0
    d220:	460e      	mov	r6, r1
		struct bt_mesh_rpl *rpl = &bt_mesh.rpl[i];

		/* Empty slot */
		if (!rpl->src) {
    d222:	f8b1 426c 	ldrh.w	r4, [r1, #620]	; 0x26c
    d226:	f501 701b 	add.w	r0, r1, #620	; 0x26c
    d22a:	b964      	cbnz	r4, d246 <is_replay+0x3a>
			rpl->src = rx->ctx.addr;
    d22c:	334d      	adds	r3, #77	; 0x4d
    d22e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    d232:	809f      	strh	r7, [r3, #4]
				return true;
			}

			if ((!rx->old_iv && rpl->old_iv) ||
			    rpl->seq < rx->seq) {
				rpl->seq = rx->seq;
    d234:	6929      	ldr	r1, [r5, #16]
    d236:	6099      	str	r1, [r3, #8]
				rpl->old_iv = rx->old_iv;
    d238:	f3c2 0200 	ubfx	r2, r2, #0, #1
    d23c:	719a      	strb	r2, [r3, #6]

				if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
					bt_mesh_store_rpl(rpl);
    d23e:	f010 ff96 	bl	1e16e <bt_mesh_store_rpl>
		return false;
    d242:	2000      	movs	r0, #0
		}
	}

	BT_ERR("RPL is full!");
	return true;
}
    d244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    d246:	42bc      	cmp	r4, r7
    d248:	d112      	bne.n	d270 <is_replay+0x64>
			if (rx->old_iv && !rpl->old_iv) {
    d24a:	334d      	adds	r3, #77	; 0x4d
    d24c:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
    d250:	07d4      	lsls	r4, r2, #31
    d252:	7989      	ldrb	r1, [r1, #6]
    d254:	d502      	bpl.n	d25c <is_replay+0x50>
    d256:	b911      	cbnz	r1, d25e <is_replay+0x52>
				return true;
    d258:	2001      	movs	r0, #1
    d25a:	e7f3      	b.n	d244 <is_replay+0x38>
			if ((!rx->old_iv && rpl->old_iv) ||
    d25c:	b929      	cbnz	r1, d26a <is_replay+0x5e>
			    rpl->seq < rx->seq) {
    d25e:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
			if ((!rx->old_iv && rpl->old_iv) ||
    d262:	688c      	ldr	r4, [r1, #8]
    d264:	6929      	ldr	r1, [r5, #16]
    d266:	428c      	cmp	r4, r1
    d268:	d2f6      	bcs.n	d258 <is_replay+0x4c>
				rpl->seq = rx->seq;
    d26a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    d26e:	e7e1      	b.n	d234 <is_replay+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    d270:	3301      	adds	r3, #1
    d272:	2b80      	cmp	r3, #128	; 0x80
    d274:	f101 0108 	add.w	r1, r1, #8
    d278:	d1d3      	bne.n	d222 <is_replay+0x16>
    d27a:	e7ed      	b.n	d258 <is_replay+0x4c>
    d27c:	2000885c 	.word	0x2000885c

0000d280 <sdu_recv>:

static int sdu_recv(struct bt_mesh_net_rx *rx, u32_t seq, u8_t hdr,
		    u8_t aszmic, struct net_buf_simple *buf)
{
    d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d284:	b09d      	sub	sp, #116	; 0x74
    d286:	4692      	mov	sl, r2
    d288:	9e26      	ldr	r6, [sp, #152]	; 0x98
    d28a:	9106      	str	r1, [sp, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, CONFIG_BT_MESH_RX_SDU_MAX - 4);
    d28c:	aa0b      	add	r2, sp, #44	; 0x2c
    d28e:	f44f 0188 	mov.w	r1, #4456448	; 0x440000
	int err;

	BT_DBG("ASZMIC %u AKF %u AID 0x%02x", aszmic, AKF(&hdr), AID(&hdr));
	BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));

	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
    d292:	f1b3 0800 	subs.w	r8, r3, #0
	NET_BUF_SIMPLE_DEFINE(sdu, CONFIG_BT_MESH_RX_SDU_MAX - 4);
    d296:	9208      	str	r2, [sp, #32]
    d298:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
    d29c:	88b2      	ldrh	r2, [r6, #4]
    d29e:	bf14      	ite	ne
    d2a0:	2309      	movne	r3, #9
    d2a2:	2305      	moveq	r3, #5
    d2a4:	429a      	cmp	r2, r3
{
    d2a6:	4604      	mov	r4, r0
	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
    d2a8:	da05      	bge.n	d2b6 <sdu_recv+0x36>
		BT_ERR("Too short SDU + MIC");
		return -EINVAL;
    d2aa:	f06f 0b15 	mvn.w	fp, #21
	}

	BT_WARN("No matching AppKey");

	return -EINVAL;
}
    d2ae:	4658      	mov	r0, fp
    d2b0:	b01d      	add	sp, #116	; 0x74
    d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    d2b6:	8940      	ldrh	r0, [r0, #10]
    d2b8:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    d2bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    d2c0:	d22f      	bcs.n	d322 <sdu_recv+0xa2>
		ad = bt_mesh_label_uuid_get(rx->ctx.recv_dst);
    d2c2:	f001 fea3 	bl	f00c <bt_mesh_label_uuid_get>
    d2c6:	4607      	mov	r7, r0
	buf->len -= APP_MIC_LEN(aszmic);
    d2c8:	f1b8 0f00 	cmp.w	r8, #0
    d2cc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
    d2d0:	bf14      	ite	ne
    d2d2:	2208      	movne	r2, #8
    d2d4:	2204      	moveq	r2, #4
    d2d6:	1a9b      	subs	r3, r3, r2
	if (!AKF(&hdr)) {
    d2d8:	f01a 0f40 	tst.w	sl, #64	; 0x40
	buf->len -= APP_MIC_LEN(aszmic);
    d2dc:	80b3      	strh	r3, [r6, #4]
	if (!AKF(&hdr)) {
    d2de:	d122      	bne.n	d326 <sdu_recv+0xa6>
					  BT_MESH_NET_IVI_RX(rx));
    d2e0:	7d23      	ldrb	r3, [r4, #20]
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, buf,
    d2e2:	4835      	ldr	r0, [pc, #212]	; (d3b8 <sdu_recv+0x138>)
					  BT_MESH_NET_IVI_RX(rx));
    d2e4:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, buf,
    d2e8:	f850 3c44 	ldr.w	r3, [r0, #-68]
    d2ec:	1a9b      	subs	r3, r3, r2
    d2ee:	9305      	str	r3, [sp, #20]
    d2f0:	9b06      	ldr	r3, [sp, #24]
    d2f2:	9304      	str	r3, [sp, #16]
    d2f4:	8963      	ldrh	r3, [r4, #10]
    d2f6:	9303      	str	r3, [sp, #12]
    d2f8:	8923      	ldrh	r3, [r4, #8]
    d2fa:	ad08      	add	r5, sp, #32
    d2fc:	e9cd 7301 	strd	r7, r3, [sp, #4]
    d300:	9500      	str	r5, [sp, #0]
    d302:	4633      	mov	r3, r6
    d304:	4642      	mov	r2, r8
    d306:	2101      	movs	r1, #1
    d308:	f00e ffdf 	bl	1c2ca <bt_mesh_app_decrypt>
		if (err) {
    d30c:	4683      	mov	fp, r0
    d30e:	2800      	cmp	r0, #0
    d310:	d1cb      	bne.n	d2aa <sdu_recv+0x2a>
		rx->ctx.app_idx = BT_MESH_KEY_DEV;
    d312:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    d316:	80e2      	strh	r2, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    d318:	4629      	mov	r1, r5
		bt_mesh_model_recv(rx, &sdu);
    d31a:	4620      	mov	r0, r4
    d31c:	f001 f8ba 	bl	e494 <bt_mesh_model_recv>
		return 0;
    d320:	e7c5      	b.n	d2ae <sdu_recv+0x2e>
		ad = NULL;
    d322:	2700      	movs	r7, #0
    d324:	e7d0      	b.n	d2c8 <sdu_recv+0x48>
    d326:	4d25      	ldr	r5, [pc, #148]	; (d3bc <sdu_recv+0x13c>)
		if (AID(&hdr) != keys->id) {
    d328:	f00a 033f 	and.w	r3, sl, #63	; 0x3f
	if (!AKF(&hdr)) {
    d32c:	f04f 0900 	mov.w	r9, #0
		if (AID(&hdr) != keys->id) {
    d330:	9307      	str	r3, [sp, #28]
					  BT_MESH_NET_IVI_RX(rx));
    d332:	46aa      	mov	sl, r5
		if (key->net_idx != rx->sub->net_idx) {
    d334:	6823      	ldr	r3, [r4, #0]
    d336:	f8b5 2054 	ldrh.w	r2, [r5, #84]	; 0x54
    d33a:	8b9b      	ldrh	r3, [r3, #28]
    d33c:	429a      	cmp	r2, r3
    d33e:	d132      	bne.n	d3a6 <sdu_recv+0x126>
		if (rx->new_key && key->updated) {
    d340:	7d23      	ldrb	r3, [r4, #20]
    d342:	079b      	lsls	r3, r3, #30
    d344:	d52c      	bpl.n	d3a0 <sdu_recv+0x120>
    d346:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
    d34a:	b34b      	cbz	r3, d3a0 <sdu_recv+0x120>
			keys = &key->keys[1];
    d34c:	f105 006a 	add.w	r0, r5, #106	; 0x6a
		if (AID(&hdr) != keys->id) {
    d350:	7803      	ldrb	r3, [r0, #0]
    d352:	9a07      	ldr	r2, [sp, #28]
    d354:	4293      	cmp	r3, r2
    d356:	d126      	bne.n	d3a6 <sdu_recv+0x126>
	buf->data = buf->__buf;
    d358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d35a:	9308      	str	r3, [sp, #32]
					  BT_MESH_NET_IVI_RX(rx));
    d35c:	7d23      	ldrb	r3, [r4, #20]
    d35e:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(keys->val, false, aszmic, buf,
    d362:	f8da 3000 	ldr.w	r3, [sl]
    d366:	1a9b      	subs	r3, r3, r2
    d368:	9305      	str	r3, [sp, #20]
    d36a:	9b06      	ldr	r3, [sp, #24]
    d36c:	9304      	str	r3, [sp, #16]
    d36e:	8963      	ldrh	r3, [r4, #10]
    d370:	9303      	str	r3, [sp, #12]
    d372:	8923      	ldrh	r3, [r4, #8]
    d374:	e9cd 7301 	strd	r7, r3, [sp, #4]
    d378:	ab08      	add	r3, sp, #32
	buf->len  = 0;
    d37a:	2100      	movs	r1, #0
    d37c:	9300      	str	r3, [sp, #0]
    d37e:	4642      	mov	r2, r8
    d380:	4633      	mov	r3, r6
    d382:	3001      	adds	r0, #1
    d384:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    d388:	f00e ff9f 	bl	1c2ca <bt_mesh_app_decrypt>
		if (err) {
    d38c:	4683      	mov	fp, r0
    d38e:	b950      	cbnz	r0, d3a6 <sdu_recv+0x126>
		rx->ctx.app_idx = key->app_idx;
    d390:	2228      	movs	r2, #40	; 0x28
    d392:	fb02 a909 	mla	r9, r2, r9, sl
		bt_mesh_model_recv(rx, &sdu);
    d396:	a908      	add	r1, sp, #32
		rx->ctx.app_idx = key->app_idx;
    d398:	f8b9 2056 	ldrh.w	r2, [r9, #86]	; 0x56
    d39c:	80e2      	strh	r2, [r4, #6]
		bt_mesh_model_recv(rx, &sdu);
    d39e:	e7bc      	b.n	d31a <sdu_recv+0x9a>
			keys = &key->keys[0];
    d3a0:	f105 0059 	add.w	r0, r5, #89	; 0x59
    d3a4:	e7d4      	b.n	d350 <sdu_recv+0xd0>
    d3a6:	3528      	adds	r5, #40	; 0x28
	for (i = 0U; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
    d3a8:	f1b9 0f00 	cmp.w	r9, #0
    d3ac:	f47f af7d 	bne.w	d2aa <sdu_recv+0x2a>
    d3b0:	f04f 0901 	mov.w	r9, #1
    d3b4:	e7be      	b.n	d334 <sdu_recv+0xb4>
    d3b6:	bf00      	nop
    d3b8:	200088a0 	.word	0x200088a0
    d3bc:	2000885c 	.word	0x2000885c

0000d3c0 <seg_tx_reset>:
{
    d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3c2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
    d3c4:	3038      	adds	r0, #56	; 0x38
    d3c6:	f012 fbb1 	bl	1fb2c <k_delayed_work_cancel>
	if (!tx->nack_count) {
    d3ca:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
	tx->cb = NULL;
    d3ce:	2500      	movs	r5, #0
	tx->seq_auth = 0U;
    d3d0:	2000      	movs	r0, #0
    d3d2:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    d3d4:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
	tx->seq_auth = 0U;
    d3d8:	e9c4 0108 	strd	r0, r1, [r4, #32]
	tx->sub = NULL;
    d3dc:	6025      	str	r5, [r4, #0]
	tx->dst = BT_MESH_ADDR_UNASSIGNED;
    d3de:	8525      	strh	r5, [r4, #40]	; 0x28
	if (!tx->nack_count) {
    d3e0:	b362      	cbz	r2, d43c <seg_tx_reset+0x7c>
    d3e2:	1d26      	adds	r6, r4, #4
		tx->seg[i] = NULL;
    d3e4:	462f      	mov	r7, r5
		if (!tx->seg[i]) {
    d3e6:	f856 0b04 	ldr.w	r0, [r6], #4
    d3ea:	b118      	cbz	r0, d3f4 <seg_tx_reset+0x34>
		net_buf_unref(tx->seg[i]);
    d3ec:	f008 fa8a 	bl	15904 <net_buf_unref>
		tx->seg[i] = NULL;
    d3f0:	f846 7c04 	str.w	r7, [r6, #-4]
	for (i = 0; i <= tx->seg_n; i++) {
    d3f4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    d3f8:	3501      	adds	r5, #1
    d3fa:	f003 031f 	and.w	r3, r3, #31
    d3fe:	42ab      	cmp	r3, r5
    d400:	daf1      	bge.n	d3e6 <seg_tx_reset+0x26>
	tx->nack_count = 0U;
    d402:	2500      	movs	r5, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d404:	4b0e      	ldr	r3, [pc, #56]	; (d440 <seg_tx_reset+0x80>)
    d406:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
    d40a:	f3bf 8f5b 	dmb	ish
    d40e:	e853 2f00 	ldrex	r2, [r3]
    d412:	f022 0120 	bic.w	r1, r2, #32
    d416:	e843 1000 	strex	r0, r1, [r3]
    d41a:	2800      	cmp	r0, #0
    d41c:	d1f7      	bne.n	d40e <seg_tx_reset+0x4e>
    d41e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    d422:	0692      	lsls	r2, r2, #26
    d424:	d50a      	bpl.n	d43c <seg_tx_reset+0x7c>
		if (bt_mesh_net_iv_update(bt_mesh.iv_index, false)) {
    d426:	4629      	mov	r1, r5
    d428:	f853 0c08 	ldr.w	r0, [r3, #-8]
    d42c:	f7ff fa3e 	bl	c8ac <bt_mesh_net_iv_update>
    d430:	b120      	cbz	r0, d43c <seg_tx_reset+0x7c>
			bt_mesh_net_sec_update(NULL);
    d432:	4628      	mov	r0, r5
}
    d434:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_mesh_net_sec_update(NULL);
    d438:	f00e ba63 	b.w	1b902 <bt_mesh_net_sec_update>
}
    d43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d43e:	bf00      	nop
    d440:	20008864 	.word	0x20008864

0000d444 <seg_tx_send_unacked>:
{
    d444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
    d446:	4f16      	ldr	r7, [pc, #88]	; (d4a0 <seg_tx_send_unacked+0x5c>)
{
    d448:	4604      	mov	r4, r0
    d44a:	1d06      	adds	r6, r0, #4
	for (i = 0; i <= tx->seg_n; i++) {
    d44c:	2500      	movs	r5, #0
		struct net_buf *seg = tx->seg[i];
    d44e:	f856 1b04 	ldr.w	r1, [r6], #4
		if (!seg) {
    d452:	b1e1      	cbz	r1, d48e <seg_tx_send_unacked+0x4a>
		if (BT_MESH_ADV(seg)->busy) {
    d454:	694b      	ldr	r3, [r1, #20]
    d456:	7a1a      	ldrb	r2, [r3, #8]
    d458:	0752      	lsls	r2, r2, #29
    d45a:	d418      	bmi.n	d48e <seg_tx_send_unacked+0x4a>
		if (!(BT_MESH_ADV(seg)->seg.attempts--)) {
    d45c:	7a9a      	ldrb	r2, [r3, #10]
    d45e:	1e50      	subs	r0, r2, #1
    d460:	7298      	strb	r0, [r3, #10]
    d462:	b93a      	cbnz	r2, d474 <seg_tx_send_unacked+0x30>
			seg_tx_complete(tx, -ETIMEDOUT);
    d464:	f06f 013b 	mvn.w	r1, #59	; 0x3b
			seg_tx_complete(tx, -EIO);
    d468:	4620      	mov	r0, r4
}
    d46a:	b003      	add	sp, #12
    d46c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			seg_tx_complete(tx, -EIO);
    d470:	f00e baa8 	b.w	1b9c4 <seg_tx_complete>
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
    d474:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
    d478:	9400      	str	r4, [sp, #0]
    d47a:	463b      	mov	r3, r7
    d47c:	f3c2 1240 	ubfx	r2, r2, #5, #1
    d480:	6820      	ldr	r0, [r4, #0]
    d482:	f7ff fabf 	bl	ca04 <bt_mesh_net_resend>
		if (err) {
    d486:	b110      	cbz	r0, d48e <seg_tx_send_unacked+0x4a>
			seg_tx_complete(tx, -EIO);
    d488:	f06f 0104 	mvn.w	r1, #4
    d48c:	e7ec      	b.n	d468 <seg_tx_send_unacked+0x24>
	for (i = 0; i <= tx->seg_n; i++) {
    d48e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    d492:	3501      	adds	r5, #1
    d494:	f003 031f 	and.w	r3, r3, #31
    d498:	429d      	cmp	r5, r3
    d49a:	ddd8      	ble.n	d44e <seg_tx_send_unacked+0xa>
}
    d49c:	b003      	add	sp, #12
    d49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d4a0:	0002074c 	.word	0x0002074c

0000d4a4 <ctl_recv>:
	return 0;
}

static int ctl_recv(struct bt_mesh_net_rx *rx, u8_t hdr,
		    struct net_buf_simple *buf, u64_t *seq_auth)
{
    d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t ctl_op = TRANS_CTL_OP(&hdr);

	BT_DBG("OpCode 0x%02x len %u", ctl_op, buf->len);

	switch (ctl_op) {
    d4a8:	f011 047f 	ands.w	r4, r1, #127	; 0x7f
{
    d4ac:	b087      	sub	sp, #28
    d4ae:	4606      	mov	r6, r0
    d4b0:	4615      	mov	r5, r2
    d4b2:	461f      	mov	r7, r3
	switch (ctl_op) {
    d4b4:	d00a      	beq.n	d4cc <ctl_recv+0x28>
    d4b6:	2c0a      	cmp	r4, #10
    d4b8:	f000 809e 	beq.w	d5f8 <ctl_recv+0x154>
	case TRANS_CTL_OP_HEARTBEAT:
		return trans_heartbeat(rx, buf);
	}

	/* Only acks and heartbeats may need processing without local_match */
	if (!rx->local_match) {
    d4bc:	7d03      	ldrb	r3, [r0, #20]
		return 0;
    d4be:	f013 0f40 	tst.w	r3, #64	; 0x40
    d4c2:	bf14      	ite	ne
    d4c4:	f06f 0701 	mvnne.w	r7, #1
    d4c8:	2700      	moveq	r7, #0
    d4ca:	e004      	b.n	d4d6 <ctl_recv+0x32>
	if (buf->len < 6) {
    d4cc:	8893      	ldrh	r3, [r2, #4]
    d4ce:	2b05      	cmp	r3, #5
    d4d0:	d805      	bhi.n	d4de <ctl_recv+0x3a>
		return -EINVAL;
    d4d2:	f06f 0715 	mvn.w	r7, #21
#endif /* CONFIG_BT_MESH_LOW_POWER */

	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);

	return -ENOENT;
}
    d4d6:	4638      	mov	r0, r7
    d4d8:	b007      	add	sp, #28
    d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    d4de:	4610      	mov	r0, r2
    d4e0:	f011 fea7 	bl	1f232 <net_buf_simple_pull_be16>
	obo = seq_zero >> 15;
    d4e4:	f3c0 33cf 	ubfx	r3, r0, #15, #16
	seq_zero = (seq_zero >> 2) & 0x1fff;
    d4e8:	f3c0 098c 	ubfx	r9, r0, #2, #13
	ack = net_buf_simple_pull_be32(buf);
    d4ec:	4628      	mov	r0, r5
	obo = seq_zero >> 15;
    d4ee:	9303      	str	r3, [sp, #12]
	ack = net_buf_simple_pull_be32(buf);
    d4f0:	f011 feb2 	bl	1f258 <net_buf_simple_pull_be32>
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d4f4:	2100      	movs	r1, #0
	ack = net_buf_simple_pull_be32(buf);
    d4f6:	4605      	mov	r5, r0
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d4f8:	fa1f f089 	uxth.w	r0, r9
    d4fc:	4a4d      	ldr	r2, [pc, #308]	; (d634 <ctl_recv+0x190>)
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    d4fe:	f8b6 c008 	ldrh.w	ip, [r6, #8]
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d502:	e9cd 0104 	strd	r0, r1, [sp, #16]
    d506:	4616      	mov	r6, r2
    d508:	46a0      	mov	r8, r4
		if (obo && tx->nack_count == tx->seg_n + 1) {
    d50a:	4691      	mov	r9, r2
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    d50c:	e9d2 3e08 	ldrd	r3, lr, [r2, #32]
    d510:	f3c3 010c 	ubfx	r1, r3, #0, #13
    d514:	e9cd 1800 	strd	r1, r8, [sp]
    d518:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
    d51c:	e9dd 0100 	ldrd	r0, r1, [sp]
    d520:	4559      	cmp	r1, fp
    d522:	bf08      	it	eq
    d524:	4550      	cmpeq	r0, sl
    d526:	d122      	bne.n	d56e <ctl_recv+0xca>
		if (tx->dst == addr) {
    d528:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    d52a:	4561      	cmp	r1, ip
    d52c:	d011      	beq.n	d552 <ctl_recv+0xae>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    d52e:	9903      	ldr	r1, [sp, #12]
    d530:	b1e9      	cbz	r1, d56e <ctl_recv+0xca>
    d532:	2158      	movs	r1, #88	; 0x58
    d534:	fb01 9104 	mla	r1, r1, r4, r9
    d538:	f892 b02b 	ldrb.w	fp, [r2, #43]	; 0x2b
    d53c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    d540:	f000 001f 	and.w	r0, r0, #31
    d544:	3001      	adds	r0, #1
    d546:	4583      	cmp	fp, r0
    d548:	f101 0128 	add.w	r1, r1, #40	; 0x28
    d54c:	d10f      	bne.n	d56e <ctl_recv+0xca>
			tx->dst = addr;
    d54e:	f8a1 c000 	strh.w	ip, [r1]
			return tx;
    d552:	2058      	movs	r0, #88	; 0x58
    d554:	4360      	muls	r0, r4
		tx = &seg_tx[i];
    d556:	eb06 0800 	add.w	r8, r6, r0
	*seq_auth = tx->seq_auth;
    d55a:	e9c7 3e00 	strd	r3, lr, [r7]
	if (!ack) {
    d55e:	b965      	cbnz	r5, d57a <ctl_recv+0xd6>
		seg_tx_complete(tx, -ECANCELED);
    d560:	f06f 0147 	mvn.w	r1, #71	; 0x47
    d564:	4640      	mov	r0, r8
    d566:	f00e fa2d 	bl	1b9c4 <seg_tx_complete>
		return 0;
    d56a:	2700      	movs	r7, #0
    d56c:	e7b3      	b.n	d4d6 <ctl_recv+0x32>
	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
    d56e:	3401      	adds	r4, #1
    d570:	2c03      	cmp	r4, #3
    d572:	f102 0258 	add.w	r2, r2, #88	; 0x58
    d576:	d1c9      	bne.n	d50c <ctl_recv+0x68>
    d578:	e7ab      	b.n	d4d2 <ctl_recv+0x2e>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    d57a:	f898 302a 	ldrb.w	r3, [r8, #42]	; 0x2a
	return 32 - __builtin_clz(op);
    d57e:	fab5 f285 	clz	r2, r5
    d582:	f1c2 021f 	rsb	r2, r2, #31
    d586:	f003 031f 	and.w	r3, r3, #31
    d58a:	429a      	cmp	r2, r3
    d58c:	d8a1      	bhi.n	d4d2 <ctl_recv+0x2e>
	k_delayed_work_cancel(&tx->retransmit);
    d58e:	3038      	adds	r0, #56	; 0x38
    d590:	4430      	add	r0, r6
    d592:	f012 facb 	bl	1fb2c <k_delayed_work_cancel>
			tx->nack_count--;
    d596:	46c2      	mov	sl, r8
	return __builtin_ffs(op);
    d598:	2d00      	cmp	r5, #0
    d59a:	fa95 f9a5 	rbit	r9, r5
    d59e:	fab9 f989 	clz	r9, r9
    d5a2:	bf08      	it	eq
    d5a4:	f04f 39ff 	moveq.w	r9, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    d5a8:	f119 0701 	adds.w	r7, r9, #1
    d5ac:	d109      	bne.n	d5c2 <ctl_recv+0x11e>
	if (tx->nack_count) {
    d5ae:	2158      	movs	r1, #88	; 0x58
    d5b0:	fb01 6404 	mla	r4, r1, r4, r6
    d5b4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    d5b8:	b1cb      	cbz	r3, d5ee <ctl_recv+0x14a>
		seg_tx_send_unacked(tx);
    d5ba:	4640      	mov	r0, r8
    d5bc:	f7ff ff42 	bl	d444 <seg_tx_send_unacked>
    d5c0:	e789      	b.n	d4d6 <ctl_recv+0x32>
		if (tx->seg[bit - 1]) {
    d5c2:	2716      	movs	r7, #22
    d5c4:	fb07 9704 	mla	r7, r7, r4, r9
    d5c8:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    d5cc:	6878      	ldr	r0, [r7, #4]
    d5ce:	b140      	cbz	r0, d5e2 <ctl_recv+0x13e>
			net_buf_unref(tx->seg[bit - 1]);
    d5d0:	f008 f998 	bl	15904 <net_buf_unref>
			tx->seg[bit - 1] = NULL;
    d5d4:	2300      	movs	r3, #0
    d5d6:	607b      	str	r3, [r7, #4]
			tx->nack_count--;
    d5d8:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
    d5dc:	3b01      	subs	r3, #1
    d5de:	f88a 302b 	strb.w	r3, [sl, #43]	; 0x2b
		ack &= ~BIT(bit - 1);
    d5e2:	2301      	movs	r3, #1
    d5e4:	fa03 f909 	lsl.w	r9, r3, r9
    d5e8:	ea25 0509 	bic.w	r5, r5, r9
    d5ec:	e7d4      	b.n	d598 <ctl_recv+0xf4>
		seg_tx_complete(tx, 0);
    d5ee:	4639      	mov	r1, r7
    d5f0:	4640      	mov	r0, r8
    d5f2:	f00e f9e7 	bl	1b9c4 <seg_tx_complete>
    d5f6:	e76e      	b.n	d4d6 <ctl_recv+0x32>
	if (buf->len < 3) {
    d5f8:	8893      	ldrh	r3, [r2, #4]
    d5fa:	2b02      	cmp	r3, #2
    d5fc:	f67f af69 	bls.w	d4d2 <ctl_recv+0x2e>
	if (rx->ctx.recv_dst != hb_sub_dst) {
    d600:	4b0d      	ldr	r3, [pc, #52]	; (d638 <ctl_recv+0x194>)
    d602:	8942      	ldrh	r2, [r0, #10]
    d604:	881b      	ldrh	r3, [r3, #0]
    d606:	429a      	cmp	r2, r3
    d608:	d1af      	bne.n	d56a <ctl_recv+0xc6>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    d60a:	4628      	mov	r0, r5
    d60c:	f011 fe01 	bl	1f212 <net_buf_simple_pull_u8>
    d610:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    d612:	4628      	mov	r0, r5
    d614:	f011 fe0d 	bl	1f232 <net_buf_simple_pull_be16>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    d618:	f004 027f 	and.w	r2, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    d61c:	7b34      	ldrb	r4, [r6, #12]
	bt_mesh_heartbeat(rx->ctx.addr, rx->ctx.recv_dst, hops, feat);
    d61e:	8971      	ldrh	r1, [r6, #10]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    d620:	f3c4 0406 	ubfx	r4, r4, #0, #7
    d624:	1b12      	subs	r2, r2, r4
    d626:	3201      	adds	r2, #1
	bt_mesh_heartbeat(rx->ctx.addr, rx->ctx.recv_dst, hops, feat);
    d628:	4603      	mov	r3, r0
    d62a:	b2d2      	uxtb	r2, r2
    d62c:	8930      	ldrh	r0, [r6, #8]
    d62e:	f001 fc09 	bl	ee44 <bt_mesh_heartbeat>
	return 0;
    d632:	e79a      	b.n	d56a <ctl_recv+0xc6>
    d634:	200003c8 	.word	0x200003c8
    d638:	20002052 	.word	0x20002052

0000d63c <send_seg>:
{
    d63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d640:	460f      	mov	r7, r1
	if (sdu->len < 1) {
    d642:	8889      	ldrh	r1, [r1, #4]
{
    d644:	b087      	sub	sp, #28
    d646:	4605      	mov	r5, r0
	if (sdu->len < 1) {
    d648:	2900      	cmp	r1, #0
    d64a:	f000 80e9 	beq.w	d820 <send_seg+0x1e4>
	if (sdu->len > BT_MESH_TX_SDU_MAX) {
    d64e:	2948      	cmp	r1, #72	; 0x48
    d650:	f200 80e9 	bhi.w	d826 <send_seg+0x1ea>
		if (!seg_tx[i].nack_count) {
    d654:	4877      	ldr	r0, [pc, #476]	; (d834 <send_seg+0x1f8>)
    d656:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
    d65a:	b154      	cbz	r4, d672 <send_seg+0x36>
    d65c:	f890 4083 	ldrb.w	r4, [r0, #131]	; 0x83
    d660:	2c00      	cmp	r4, #0
    d662:	f000 8081 	beq.w	d768 <send_seg+0x12c>
    d666:	f890 40db 	ldrb.w	r4, [r0, #219]	; 0xdb
    d66a:	2c00      	cmp	r4, #0
    d66c:	f040 80de 	bne.w	d82c <send_seg+0x1f0>
	for (tx = NULL, i = 0; i < ARRAY_SIZE(seg_tx); i++) {
    d670:	2402      	movs	r4, #2
	if (net_tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d672:	f8d5 9004 	ldr.w	r9, [r5, #4]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    d676:	f8df a1c8 	ldr.w	sl, [pc, #456]	; d840 <send_seg+0x204>
	if (net_tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d67a:	f8b9 c002 	ldrh.w	ip, [r9, #2]
	tx->dst = net_tx->ctx->addr;
    d67e:	f8b9 9004 	ldrh.w	r9, [r9, #4]
	if (net_tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d682:	f64f 76fe 	movw	r6, #65534	; 0xfffe
    d686:	45b4      	cmp	ip, r6
		seg_hdr = SEG_HDR(1, net_tx->aid);
    d688:	bf18      	it	ne
    d68a:	7aee      	ldrbne	r6, [r5, #11]
	tx->dst = net_tx->ctx->addr;
    d68c:	f04f 0e58 	mov.w	lr, #88	; 0x58
		seg_hdr = SEG_HDR(1, net_tx->aid);
    d690:	bf1a      	itte	ne
    d692:	08b6      	lsrne	r6, r6, #2
    d694:	f046 06c0 	orrne.w	r6, r6, #192	; 0xc0
		seg_hdr = SEG_HDR(0, 0);
    d698:	2680      	moveq	r6, #128	; 0x80
	tx->dst = net_tx->ctx->addr;
    d69a:	fb0e fe04 	mul.w	lr, lr, r4
		seg_hdr = SEG_HDR(0, 0);
    d69e:	9600      	str	r6, [sp, #0]
	tx->dst = net_tx->ctx->addr;
    d6a0:	eb00 060e 	add.w	r6, r0, lr
	tx->seg_n = (sdu->len - 1) / 12;
    d6a4:	3901      	subs	r1, #1
	tx->dst = net_tx->ctx->addr;
    d6a6:	f8a6 9028 	strh.w	r9, [r6, #40]	; 0x28
	tx->seg_n = (sdu->len - 1) / 12;
    d6aa:	f04f 090c 	mov.w	r9, #12
    d6ae:	fbb1 f1f9 	udiv	r1, r1, r9
    d6b2:	f896 902a 	ldrb.w	r9, [r6, #42]	; 0x2a
    d6b6:	f361 0904 	bfi	r9, r1, #0, #5
	tx->nack_count = tx->seg_n + 1;
    d6ba:	3101      	adds	r1, #1
	tx->seg_n = (sdu->len - 1) / 12;
    d6bc:	f886 902a 	strb.w	r9, [r6, #42]	; 0x2a
	tx->nack_count = tx->seg_n + 1;
    d6c0:	f886 102b 	strb.w	r1, [r6, #43]	; 0x2b
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    d6c4:	f8da 9000 	ldr.w	r9, [sl]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d6c8:	f3bf 8f5b 	dmb	ish
    d6cc:	f8da 1008 	ldr.w	r1, [sl, #8]
    d6d0:	f3bf 8f5b 	dmb	ish
    d6d4:	f3c1 0180 	ubfx	r1, r1, #2, #1
    d6d8:	f8da a004 	ldr.w	sl, [sl, #4]
    d6dc:	eba9 0101 	sub.w	r1, r9, r1
    d6e0:	ea4f 2911 	mov.w	r9, r1, lsr #8
    d6e4:	ea4a 6101 	orr.w	r1, sl, r1, lsl #24
    d6e8:	e9c6 1908 	strd	r1, r9, [r6, #32]
	tx->sub = net_tx->sub;
    d6ec:	f8d5 9000 	ldr.w	r9, [r5]
    d6f0:	f840 900e 	str.w	r9, [r0, lr]
			tx = &seg_tx[i];
    d6f4:	f04f 0858 	mov.w	r8, #88	; 0x58
	tx->new_key = net_tx->sub->kr_flag;
    d6f8:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
			tx = &seg_tx[i];
    d6fc:	fb08 0804 	mla	r8, r8, r4, r0
	tx->new_key = net_tx->sub->kr_flag;
    d700:	f899 001e 	ldrb.w	r0, [r9, #30]
	tx->cb_data = cb_data;
    d704:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
	tx->new_key = net_tx->sub->kr_flag;
    d708:	f360 1145 	bfi	r1, r0, #5, #1
	if (net_tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d70c:	686b      	ldr	r3, [r5, #4]
	tx->new_key = net_tx->sub->kr_flag;
    d70e:	f886 102a 	strb.w	r1, [r6, #42]	; 0x2a
	if (net_tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d712:	7a5b      	ldrb	r3, [r3, #9]
    d714:	2bff      	cmp	r3, #255	; 0xff
    d716:	d129      	bne.n	d76c <send_seg+0x130>
		tx->ttl = bt_mesh_default_ttl_get();
    d718:	f001 fc6e 	bl	eff8 <bt_mesh_default_ttl_get>
    d71c:	f886 002c 	strb.w	r0, [r6, #44]	; 0x2c
	seq_zero = tx->seq_auth & 0x1fff;
    d720:	4944      	ldr	r1, [pc, #272]	; (d834 <send_seg+0x1f8>)
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
    d722:	9101      	str	r1, [sp, #4]
	seq_zero = tx->seq_auth & 0x1fff;
    d724:	2258      	movs	r2, #88	; 0x58
    d726:	4362      	muls	r2, r4
    d728:	188b      	adds	r3, r1, r2
	for (seg_o = 0U; sdu->len; seg_o++) {
    d72a:	f04f 0b00 	mov.w	fp, #0
	seq_zero = tx->seq_auth & 0x1fff;
    d72e:	8c1b      	ldrh	r3, [r3, #32]
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
    d730:	9204      	str	r2, [sp, #16]
	seq_zero = tx->seq_auth & 0x1fff;
    d732:	f3c3 030c 	ubfx	r3, r3, #0, #13
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    d736:	0998      	lsrs	r0, r3, #6
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    d738:	009b      	lsls	r3, r3, #2
    d73a:	b25b      	sxtb	r3, r3
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    d73c:	9002      	str	r0, [sp, #8]
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    d73e:	9303      	str	r3, [sp, #12]
	for (seg_o = 0U; sdu->len; seg_o++) {
    d740:	88be      	ldrh	r6, [r7, #4]
    d742:	fa5f fa8b 	uxtb.w	sl, fp
    d746:	b15e      	cbz	r6, d760 <send_seg+0x124>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, net_tx->xmit,
    d748:	2200      	movs	r2, #0
    d74a:	7aa9      	ldrb	r1, [r5, #10]
    d74c:	2001      	movs	r0, #1
    d74e:	f7fe fc63 	bl	c018 <bt_mesh_adv_create>
		if (!seg) {
    d752:	4681      	mov	r9, r0
    d754:	b968      	cbnz	r0, d772 <send_seg+0x136>
			seg_tx_reset(tx);
    d756:	4640      	mov	r0, r8
    d758:	f7ff fe32 	bl	d3c0 <seg_tx_reset>
			return -ENOBUFS;
    d75c:	f06f 0636 	mvn.w	r6, #54	; 0x36
}
    d760:	4630      	mov	r0, r6
    d762:	b007      	add	sp, #28
    d764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (tx = NULL, i = 0; i < ARRAY_SIZE(seg_tx); i++) {
    d768:	2401      	movs	r4, #1
    d76a:	e782      	b.n	d672 <send_seg+0x36>
		tx->ttl = net_tx->ctx->send_ttl;
    d76c:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
    d770:	e7d6      	b.n	d720 <send_seg+0xe4>
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
    d772:	6943      	ldr	r3, [r0, #20]
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
    d774:	f100 0608 	add.w	r6, r0, #8
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
    d778:	2204      	movs	r2, #4
    d77a:	729a      	strb	r2, [r3, #10]
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
    d77c:	4630      	mov	r0, r6
    d77e:	2109      	movs	r1, #9
    d780:	f011 fc57 	bl	1f032 <net_buf_simple_reserve>
		net_buf_add_u8(seg, seg_hdr);
    d784:	9900      	ldr	r1, [sp, #0]
    d786:	4630      	mov	r0, r6
    d788:	f011 fcc7 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    d78c:	7ae9      	ldrb	r1, [r5, #11]
    d78e:	9b02      	ldr	r3, [sp, #8]
    d790:	f3c1 0140 	ubfx	r1, r1, #1, #1
    d794:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
    d798:	4630      	mov	r0, r6
    d79a:	f011 fcbe 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    d79e:	9b03      	ldr	r3, [sp, #12]
    d7a0:	ea43 01da 	orr.w	r1, r3, sl, lsr #3
    d7a4:	b2c9      	uxtb	r1, r1
    d7a6:	4630      	mov	r0, r6
    d7a8:	f011 fcb7 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
    d7ac:	9a04      	ldr	r2, [sp, #16]
    d7ae:	9b01      	ldr	r3, [sp, #4]
    d7b0:	4413      	add	r3, r2
    d7b2:	4630      	mov	r0, r6
    d7b4:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
    d7b8:	f3c1 0104 	ubfx	r1, r1, #0, #5
    d7bc:	ea41 114a 	orr.w	r1, r1, sl, lsl #5
    d7c0:	b2c9      	uxtb	r1, r1
    d7c2:	f011 fcaa 	bl	1f11a <net_buf_simple_add_u8>
		len = MIN(sdu->len, 12);
    d7c6:	88bb      	ldrh	r3, [r7, #4]
		net_buf_add_mem(seg, sdu->data, len);
    d7c8:	6839      	ldr	r1, [r7, #0]
    d7ca:	2b0c      	cmp	r3, #12
    d7cc:	bf28      	it	cs
    d7ce:	230c      	movcs	r3, #12
    d7d0:	461a      	mov	r2, r3
    d7d2:	4630      	mov	r0, r6
    d7d4:	9305      	str	r3, [sp, #20]
    d7d6:	f011 fc97 	bl	1f108 <net_buf_simple_add_mem>
		net_buf_simple_pull(sdu, len);
    d7da:	9b05      	ldr	r3, [sp, #20]
    d7dc:	4638      	mov	r0, r7
    d7de:	4619      	mov	r1, r3
    d7e0:	f011 fd07 	bl	1f1f2 <net_buf_simple_pull>
		tx->seg[seg_o] = net_buf_ref(seg);
    d7e4:	4648      	mov	r0, r9
    d7e6:	f011 fc85 	bl	1f0f4 <net_buf_ref>
    d7ea:	9a01      	ldr	r2, [sp, #4]
		err = bt_mesh_net_send(net_tx, seg,
    d7ec:	4912      	ldr	r1, [pc, #72]	; (d838 <send_seg+0x1fc>)
		tx->seg[seg_o] = net_buf_ref(seg);
    d7ee:	2316      	movs	r3, #22
    d7f0:	fb03 a304 	mla	r3, r3, r4, sl
    d7f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		err = bt_mesh_net_send(net_tx, seg,
    d7f8:	4a10      	ldr	r2, [pc, #64]	; (d83c <send_seg+0x200>)
		tx->seg[seg_o] = net_buf_ref(seg);
    d7fa:	6058      	str	r0, [r3, #4]
		err = bt_mesh_net_send(net_tx, seg,
    d7fc:	f1ba 0f00 	cmp.w	sl, #0
    d800:	bf18      	it	ne
    d802:	460a      	movne	r2, r1
    d804:	4643      	mov	r3, r8
    d806:	4649      	mov	r1, r9
    d808:	4628      	mov	r0, r5
    d80a:	f7ff f9cf 	bl	cbac <bt_mesh_net_send>
		if (err) {
    d80e:	f10b 0b01 	add.w	fp, fp, #1
    d812:	4606      	mov	r6, r0
    d814:	2800      	cmp	r0, #0
    d816:	d093      	beq.n	d740 <send_seg+0x104>
			seg_tx_reset(tx);
    d818:	4640      	mov	r0, r8
    d81a:	f7ff fdd1 	bl	d3c0 <seg_tx_reset>
			return err;
    d81e:	e79f      	b.n	d760 <send_seg+0x124>
		return -EINVAL;
    d820:	f06f 0615 	mvn.w	r6, #21
    d824:	e79c      	b.n	d760 <send_seg+0x124>
		return -EMSGSIZE;
    d826:	f06f 0623 	mvn.w	r6, #35	; 0x23
    d82a:	e799      	b.n	d760 <send_seg+0x124>
		return -EBUSY;
    d82c:	f06f 060f 	mvn.w	r6, #15
    d830:	e796      	b.n	d760 <send_seg+0x124>
    d832:	bf00      	nop
    d834:	200003c8 	.word	0x200003c8
    d838:	0002074c 	.word	0x0002074c
    d83c:	00020744 	.word	0x00020744
    d840:	2000885c 	.word	0x2000885c

0000d844 <seg_sent>:
	k_delayed_work_submit(&tx->retransmit,
    d844:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d848:	2032      	movs	r0, #50	; 0x32
    d84a:	f44f 73c8 	mov.w	r3, #400	; 0x190
    d84e:	fb00 3202 	mla	r2, r0, r2, r3
    d852:	3138      	adds	r1, #56	; 0x38
    d854:	4801      	ldr	r0, [pc, #4]	; (d85c <seg_sent+0x18>)
    d856:	f009 bc41 	b.w	170dc <k_delayed_work_submit_to_queue>
    d85a:	bf00      	nop
    d85c:	20001fc8 	.word	0x20001fc8

0000d860 <seg_send_start>:
{
    d860:	4613      	mov	r3, r2
	if (err) {
    d862:	b159      	cbz	r1, d87c <seg_send_start+0x1c>
		k_delayed_work_submit(&tx->retransmit,
    d864:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
    d868:	2032      	movs	r0, #50	; 0x32
    d86a:	f44f 71c8 	mov.w	r1, #400	; 0x190
    d86e:	fb00 1202 	mla	r2, r0, r2, r1
    d872:	f103 0138 	add.w	r1, r3, #56	; 0x38
    d876:	4802      	ldr	r0, [pc, #8]	; (d880 <seg_send_start+0x20>)
    d878:	f009 bc30 	b.w	170dc <k_delayed_work_submit_to_queue>
}
    d87c:	4770      	bx	lr
    d87e:	bf00      	nop
    d880:	20001fc8 	.word	0x20001fc8

0000d884 <bt_mesh_set_hb_sub_dst>:
	hb_sub_dst = addr;
    d884:	4b01      	ldr	r3, [pc, #4]	; (d88c <bt_mesh_set_hb_sub_dst+0x8>)
    d886:	8018      	strh	r0, [r3, #0]
}
    d888:	4770      	bx	lr
    d88a:	bf00      	nop
    d88c:	20002052 	.word	0x20002052

0000d890 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    d890:	4a06      	ldr	r2, [pc, #24]	; (d8ac <bt_mesh_tx_in_progress+0x1c>)
    d892:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
    d896:	f892 1083 	ldrb.w	r1, [r2, #131]	; 0x83
    d89a:	f892 20db 	ldrb.w	r2, [r2, #219]	; 0xdb
    d89e:	430b      	orrs	r3, r1
    d8a0:	4313      	orrs	r3, r2
}
    d8a2:	bf14      	ite	ne
    d8a4:	2001      	movne	r0, #1
    d8a6:	2000      	moveq	r0, #0
    d8a8:	4770      	bx	lr
    d8aa:	bf00      	nop
    d8ac:	200003c8 	.word	0x200003c8

0000d8b0 <bt_mesh_app_key_find>:
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    d8b0:	4b0f      	ldr	r3, [pc, #60]	; (d8f0 <bt_mesh_app_key_find+0x40>)
    d8b2:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
    d8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d8ba:	4291      	cmp	r1, r2
    d8bc:	461a      	mov	r2, r3
    d8be:	d003      	beq.n	d8c8 <bt_mesh_app_key_find+0x18>
    d8c0:	f8b3 1056 	ldrh.w	r1, [r3, #86]	; 0x56
    d8c4:	4281      	cmp	r1, r0
    d8c6:	d00d      	beq.n	d8e4 <bt_mesh_app_key_find+0x34>
    d8c8:	f8b2 107c 	ldrh.w	r1, [r2, #124]	; 0x7c
    d8cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d8d0:	4299      	cmp	r1, r3
    d8d2:	d00a      	beq.n	d8ea <bt_mesh_app_key_find+0x3a>
    d8d4:	f8b2 207e 	ldrh.w	r2, [r2, #126]	; 0x7e
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    d8d8:	4b06      	ldr	r3, [pc, #24]	; (d8f4 <bt_mesh_app_key_find+0x44>)
    d8da:	4282      	cmp	r2, r0
    d8dc:	bf0c      	ite	eq
    d8de:	4618      	moveq	r0, r3
    d8e0:	2000      	movne	r0, #0
    d8e2:	4770      	bx	lr
    d8e4:	f103 0054 	add.w	r0, r3, #84	; 0x54
    d8e8:	4770      	bx	lr
	return NULL;
    d8ea:	2000      	movs	r0, #0
}
    d8ec:	4770      	bx	lr
    d8ee:	bf00      	nop
    d8f0:	2000885c 	.word	0x2000885c
    d8f4:	200088d8 	.word	0x200088d8

0000d8f8 <bt_mesh_trans_send>:
{
    d8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d8fc:	4604      	mov	r4, r0
    d8fe:	b086      	sub	sp, #24
	if (net_buf_simple_tailroom(msg) < 4) {
    d900:	4608      	mov	r0, r1
{
    d902:	460d      	mov	r5, r1
    d904:	4617      	mov	r7, r2
    d906:	4698      	mov	r8, r3
	if (net_buf_simple_tailroom(msg) < 4) {
    d908:	f011 fcb3 	bl	1f272 <net_buf_simple_tailroom>
    d90c:	2803      	cmp	r0, #3
    d90e:	d804      	bhi.n	d91a <bt_mesh_trans_send+0x22>
		return -EINVAL;
    d910:	f06f 0015 	mvn.w	r0, #21
}
    d914:	b006      	add	sp, #24
    d916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (msg->len > 11) {
    d91a:	88ab      	ldrh	r3, [r5, #4]
    d91c:	f8d4 9004 	ldr.w	r9, [r4, #4]
    d920:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = 1;
    d922:	bf88      	it	hi
    d924:	f899 3008 	ldrbhi.w	r3, [r9, #8]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d928:	f8b9 0002 	ldrh.w	r0, [r9, #2]
		tx->ctx->send_rel = 1;
    d92c:	bf84      	itt	hi
    d92e:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
    d932:	f889 3008 	strbhi.w	r3, [r9, #8]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    d936:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    d93a:	4298      	cmp	r0, r3
    d93c:	d151      	bne.n	d9e2 <bt_mesh_trans_send+0xea>
		tx->aid = 0U;
    d93e:	7ae3      	ldrb	r3, [r4, #11]
		key = bt_mesh.dev_key;
    d940:	4e37      	ldr	r6, [pc, #220]	; (da20 <bt_mesh_trans_send+0x128>)
		tx->aid = 0U;
    d942:	f36f 0387 	bfc	r3, #2, #6
    d946:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    d948:	f999 3008 	ldrsb.w	r3, [r9, #8]
    d94c:	2b00      	cmp	r3, #0
    d94e:	da5d      	bge.n	da0c <bt_mesh_trans_send+0x114>
    d950:	4628      	mov	r0, r5
    d952:	f011 fc8e 	bl	1f272 <net_buf_simple_tailroom>
    d956:	2807      	cmp	r0, #7
    d958:	bf94      	ite	ls
    d95a:	2000      	movls	r0, #0
    d95c:	2001      	movhi	r0, #1
    d95e:	7ae3      	ldrb	r3, [r4, #11]
    d960:	f360 0341 	bfi	r3, r0, #1, #1
    d964:	72e3      	strb	r3, [r4, #11]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    d966:	6863      	ldr	r3, [r4, #4]
    d968:	8898      	ldrh	r0, [r3, #4]
    d96a:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    d96e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    d972:	d24d      	bcs.n	da10 <bt_mesh_trans_send+0x118>
		ad = bt_mesh_label_uuid_get(tx->ctx->addr);
    d974:	f001 fb4a 	bl	f00c <bt_mesh_label_uuid_get>
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    d978:	6863      	ldr	r3, [r4, #4]
    d97a:	f8df c0a8 	ldr.w	ip, [pc, #168]	; da24 <bt_mesh_trans_send+0x12c>
    d97e:	8859      	ldrh	r1, [r3, #2]
    d980:	f8b3 9004 	ldrh.w	r9, [r3, #4]
				  tx->aszmic, msg, ad, tx->src,
    d984:	7ae2      	ldrb	r2, [r4, #11]
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    d986:	f8b4 e008 	ldrh.w	lr, [r4, #8]
				  BT_MESH_NET_IVI_TX);
    d98a:	e9dc 3a00 	ldrd	r3, sl, [ip]
    d98e:	f3bf 8f5b 	dmb	ish
    d992:	f8dc c008 	ldr.w	ip, [ip, #8]
    d996:	f3bf 8f5b 	dmb	ish
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    d99a:	9000      	str	r0, [sp, #0]
    d99c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    d9a0:	1a08      	subs	r0, r1, r0
				  BT_MESH_NET_IVI_TX);
    d9a2:	f3cc 0c80 	ubfx	ip, ip, #2, #1
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    d9a6:	4241      	negs	r1, r0
    d9a8:	eba3 030c 	sub.w	r3, r3, ip
    d9ac:	4141      	adcs	r1, r0
    d9ae:	e9cd a303 	strd	sl, r3, [sp, #12]
    d9b2:	e9cd e901 	strd	lr, r9, [sp, #4]
    d9b6:	462b      	mov	r3, r5
    d9b8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d9bc:	4630      	mov	r0, r6
    d9be:	f00e fc40 	bl	1c242 <bt_mesh_app_encrypt>
	if (err) {
    d9c2:	2800      	cmp	r0, #0
    d9c4:	d1a6      	bne.n	d914 <bt_mesh_trans_send+0x1c>
	if (tx->ctx->send_rel) {
    d9c6:	6863      	ldr	r3, [r4, #4]
    d9c8:	f993 3008 	ldrsb.w	r3, [r3, #8]
    d9cc:	2b00      	cmp	r3, #0
		err = send_seg(tx, msg, cb, cb_data);
    d9ce:	463a      	mov	r2, r7
    d9d0:	4643      	mov	r3, r8
    d9d2:	4629      	mov	r1, r5
    d9d4:	4620      	mov	r0, r4
	if (tx->ctx->send_rel) {
    d9d6:	da1d      	bge.n	da14 <bt_mesh_trans_send+0x11c>
}
    d9d8:	b006      	add	sp, #24
    d9da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = send_seg(tx, msg, cb, cb_data);
    d9de:	f7ff be2d 	b.w	d63c <send_seg>
		app_key = bt_mesh_app_key_find(tx->ctx->app_idx);
    d9e2:	f7ff ff65 	bl	d8b0 <bt_mesh_app_key_find>
		if (!app_key) {
    d9e6:	2800      	cmp	r0, #0
    d9e8:	d092      	beq.n	d910 <bt_mesh_trans_send+0x18>
		if (tx->sub->kr_phase == BT_MESH_KR_PHASE_2 &&
    d9ea:	6823      	ldr	r3, [r4, #0]
    d9ec:	7fdb      	ldrb	r3, [r3, #31]
    d9ee:	2b02      	cmp	r3, #2
    d9f0:	7ae3      	ldrb	r3, [r4, #11]
    d9f2:	d108      	bne.n	da06 <bt_mesh_trans_send+0x10e>
    d9f4:	7902      	ldrb	r2, [r0, #4]
    d9f6:	b132      	cbz	r2, da06 <bt_mesh_trans_send+0x10e>
			tx->aid = app_key->keys[1].id;
    d9f8:	7d82      	ldrb	r2, [r0, #22]
			key = app_key->keys[1].val;
    d9fa:	f100 0617 	add.w	r6, r0, #23
			tx->aid = app_key->keys[0].id;
    d9fe:	f362 0387 	bfi	r3, r2, #2, #6
    da02:	72e3      	strb	r3, [r4, #11]
    da04:	e7a0      	b.n	d948 <bt_mesh_trans_send+0x50>
			key = app_key->keys[0].val;
    da06:	1d86      	adds	r6, r0, #6
			tx->aid = app_key->keys[0].id;
    da08:	7942      	ldrb	r2, [r0, #5]
    da0a:	e7f8      	b.n	d9fe <bt_mesh_trans_send+0x106>
		tx->aszmic = 0U;
    da0c:	2000      	movs	r0, #0
    da0e:	e7a6      	b.n	d95e <bt_mesh_trans_send+0x66>
		ad = NULL;
    da10:	2000      	movs	r0, #0
    da12:	e7b1      	b.n	d978 <bt_mesh_trans_send+0x80>
}
    da14:	b006      	add	sp, #24
    da16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = send_unseg(tx, msg, cb, cb_data);
    da1a:	f00d bf85 	b.w	1b928 <send_unseg>
    da1e:	bf00      	nop
    da20:	200088a0 	.word	0x200088a0
    da24:	2000885c 	.word	0x2000885c

0000da28 <seg_ack>:
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}

static void seg_ack(struct k_work *work)
{
    da28:	b530      	push	{r4, r5, lr}
    da2a:	4604      	mov	r4, r0
    da2c:	b085      	sub	sp, #20
    da2e:	f012 f8ce 	bl	1fbce <z_impl_k_uptime_get_32>
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);

	BT_DBG("rx %p", rx);

	if (k_uptime_get_32() - rx->last > K_SECONDS(60)) {
    da32:	f854 3c04 	ldr.w	r3, [r4, #-4]
    da36:	1ac0      	subs	r0, r0, r3
    da38:	f64e 2360 	movw	r3, #60000	; 0xea60
    da3c:	4298      	cmp	r0, r3
    da3e:	f1a4 0520 	sub.w	r5, r4, #32
    da42:	d90a      	bls.n	da5a <seg_ack+0x32>
	k_delayed_work_cancel(&rx->ack);
    da44:	4620      	mov	r0, r4
    da46:	f012 f871 	bl	1fb2c <k_delayed_work_cancel>
	rx->in_use = 0U;
    da4a:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    da4e:	f36f 1386 	bfc	r3, #6, #1
    da52:	f804 3c10 	strb.w	r3, [r4, #-16]

	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
		 rx->block, rx->obo);

	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
}
    da56:	b005      	add	sp, #20
    da58:	bd30      	pop	{r4, r5, pc}
		 rx->block, rx->obo);
    da5a:	f814 3c10 	ldrb.w	r3, [r4, #-16]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
    da5e:	f834 2c0c 	ldrh.w	r2, [r4, #-12]
    da62:	f834 1c0a 	ldrh.w	r1, [r4, #-10]
    da66:	f854 0c20 	ldr.w	r0, [r4, #-32]
    da6a:	09db      	lsrs	r3, r3, #7
    da6c:	9302      	str	r3, [sp, #8]
    da6e:	f854 3c08 	ldr.w	r3, [r4, #-8]
    da72:	9301      	str	r3, [sp, #4]
    da74:	f1a4 0318 	sub.w	r3, r4, #24
    da78:	9300      	str	r3, [sp, #0]
    da7a:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
    da7e:	f00d ffdf 	bl	1ba40 <send_ack>
	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
    da82:	4628      	mov	r0, r5
    da84:	f00d ff82 	bl	1b98c <ack_timeout>
    da88:	4602      	mov	r2, r0
    da8a:	4803      	ldr	r0, [pc, #12]	; (da98 <seg_ack+0x70>)
    da8c:	4621      	mov	r1, r4
}
    da8e:	b005      	add	sp, #20
    da90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    da94:	f009 bb22 	b.w	170dc <k_delayed_work_submit_to_queue>
    da98:	20001fc8 	.word	0x20001fc8

0000da9c <bt_mesh_trans_recv>:

	return err;
}

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx)
{
    da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    daa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    daa4:	b08b      	sub	sp, #44	; 0x2c
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    daa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    daaa:	e9cd 2308 	strd	r2, r3, [sp, #32]

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
							rx->ctx.recv_dst);
	} else {
		rx->friend_match = false;
    daae:	7d0b      	ldrb	r3, [r1, #20]
    dab0:	f36f 13c7 	bfc	r3, #7, #1
{
    dab4:	4606      	mov	r6, r0
		rx->friend_match = false;
    dab6:	750b      	strb	r3, [r1, #20]
{
    dab8:	460d      	mov	r5, r1

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
	       rx->ctx.addr, rx->ctx.recv_dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    daba:	2109      	movs	r1, #9
    dabc:	f011 fb99 	bl	1f1f2 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    dac0:	4630      	mov	r0, r6
    dac2:	f011 fbd2 	bl	1f26a <net_buf_simple_headroom>
	/* Save the app-level state so the buffer can later be placed in
	 * the Friend Queue.
	 */
	net_buf_simple_save(buf, &state);

	if (SEG(buf->data)) {
    dac6:	f8d6 9000 	ldr.w	r9, [r6]
	state->len = buf->len;
    daca:	88b3      	ldrh	r3, [r6, #4]
    dacc:	9304      	str	r3, [sp, #16]
    dace:	f999 3000 	ldrsb.w	r3, [r9]
	state->offset = net_buf_simple_headroom(buf);
    dad2:	9006      	str	r0, [sp, #24]
    dad4:	2b00      	cmp	r3, #0
    dad6:	f280 8174 	bge.w	ddc2 <bt_mesh_trans_recv+0x326>
		/* Segmented messages must match a local element or an
		 * LPN of this Friend.
		 */
		if (!rx->local_match && !rx->friend_match) {
    dada:	7d2b      	ldrb	r3, [r5, #20]
    dadc:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    dae0:	f000 81a0 	beq.w	de24 <bt_mesh_trans_recv+0x388>
	if (buf->len < 5) {
    dae4:	9b04      	ldr	r3, [sp, #16]
    dae6:	2b04      	cmp	r3, #4
    dae8:	d802      	bhi.n	daf0 <bt_mesh_trans_recv+0x54>
		return -EINVAL;
    daea:	f06f 0515 	mvn.w	r5, #21
    daee:	e06c      	b.n	dbca <bt_mesh_trans_recv+0x12e>
	net_buf_simple_pull(buf, 1);
    daf0:	2101      	movs	r1, #1
    daf2:	4630      	mov	r0, r6
    daf4:	f011 fb7d 	bl	1f1f2 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    daf8:	4630      	mov	r0, r6
    dafa:	f011 fb9a 	bl	1f232 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    dafe:	00c7      	lsls	r7, r0, #3
	seq_zero = (seq_zero >> 2) & 0x1fff;
    db00:	f3c0 048c 	ubfx	r4, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    db04:	4630      	mov	r0, r6
    db06:	f011 fb84 	bl	1f212 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    db0a:	f007 0718 	and.w	r7, r7, #24
	seg_o |= seg_n >> 5;
    db0e:	ea47 1750 	orr.w	r7, r7, r0, lsr #5
    db12:	b2ff      	uxtb	r7, r7
	seg_n &= 0x1f;
    db14:	f000 081f 	and.w	r8, r0, #31
	if (seg_o > seg_n) {
    db18:	4547      	cmp	r7, r8
	seg_n = net_buf_simple_pull_u8(buf);
    db1a:	9005      	str	r0, [sp, #20]
	if (seg_o > seg_n) {
    db1c:	d8e5      	bhi.n	daea <bt_mesh_trans_recv+0x4e>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    db1e:	692a      	ldr	r2, [r5, #16]
    db20:	49b6      	ldr	r1, [pc, #728]	; (ddfc <bt_mesh_trans_recv+0x360>)
    db22:	7d2b      	ldrb	r3, [r5, #20]
    db24:	6809      	ldr	r1, [r1, #0]
    db26:	1b14      	subs	r4, r2, r4
    db28:	f003 0301 	and.w	r3, r3, #1
    db2c:	f3c4 040c 	ubfx	r4, r4, #0, #13
    db30:	1acb      	subs	r3, r1, r3
    db32:	1b14      	subs	r4, r2, r4
    db34:	ea44 6203 	orr.w	r2, r4, r3, lsl #24
    db38:	0a1b      	lsrs	r3, r3, #8
    db3a:	469b      	mov	fp, r3
    db3c:	465c      	mov	r4, fp
    db3e:	4613      	mov	r3, r2
    db40:	49af      	ldr	r1, [pc, #700]	; (de00 <bt_mesh_trans_recv+0x364>)
    db42:	e9cd 3408 	strd	r3, r4, [sp, #32]
		if (rx->src != net_rx->ctx.addr ||
    db46:	68ab      	ldr	r3, [r5, #8]
    db48:	9307      	str	r3, [sp, #28]
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    db4a:	4692      	mov	sl, r2
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    db4c:	f04f 0c00 	mov.w	ip, #0
		if (rx->src != net_rx->ctx.addr ||
    db50:	468e      	mov	lr, r1
    db52:	2350      	movs	r3, #80	; 0x50
    db54:	fb03 f00c 	mul.w	r0, r3, ip
    db58:	eb0e 0400 	add.w	r4, lr, r0
    db5c:	9a07      	ldr	r2, [sp, #28]
    db5e:	6963      	ldr	r3, [r4, #20]
    db60:	4293      	cmp	r3, r2
    db62:	d13d      	bne.n	dbe0 <bt_mesh_trans_recv+0x144>
		if (rx->seq_auth >= *seq_auth) {
    db64:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    db68:	455b      	cmp	r3, fp
    db6a:	bf08      	it	eq
    db6c:	4552      	cmpeq	r2, sl
    db6e:	f080 815b 	bcs.w	de28 <bt_mesh_trans_recv+0x38c>
		if (rx->in_use) {
    db72:	7c23      	ldrb	r3, [r4, #16]
    db74:	065a      	lsls	r2, r3, #25
    db76:	d533      	bpl.n	dbe0 <bt_mesh_trans_recv+0x144>
	k_delayed_work_cancel(&rx->ack);
    db78:	3020      	adds	r0, #32
    db7a:	4470      	add	r0, lr
    db7c:	f011 ffd6 	bl	1fb2c <k_delayed_work_cancel>
	rx->in_use = 0U;
    db80:	7c23      	ldrb	r3, [r4, #16]
    db82:	f36f 1386 	bfc	r3, #6, #1
    db86:	7423      	strb	r3, [r4, #16]
		rx->seq_auth = 0U;
    db88:	2200      	movs	r2, #0
    db8a:	2300      	movs	r3, #0
    db8c:	e9c4 2302 	strd	r2, r3, [r4, #8]
		rx->sub = NULL;
    db90:	2300      	movs	r3, #0
    db92:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    db94:	6163      	str	r3, [r4, #20]
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    db96:	7d2a      	ldrb	r2, [r5, #20]
    db98:	f3c2 00c0 	ubfx	r0, r2, #3, #1
		return 12;
    db9c:	2800      	cmp	r0, #0
    db9e:	bf14      	ite	ne
    dba0:	2308      	movne	r3, #8
    dba2:	230c      	moveq	r3, #12
	return ((seg_n * seg_len(ctl) + 1) <= CONFIG_BT_MESH_RX_SDU_MAX);
    dba4:	fb18 f303 	smulbb	r3, r8, r3
    dba8:	3301      	adds	r3, #1
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    dbaa:	2b48      	cmp	r3, #72	; 0x48
    dbac:	dd20      	ble.n	dbf0 <bt_mesh_trans_recv+0x154>
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    dbae:	2300      	movs	r3, #0
    dbb0:	9301      	str	r3, [sp, #4]
    dbb2:	09d2      	lsrs	r2, r2, #7
    dbb4:	ab08      	add	r3, sp, #32
    dbb6:	9202      	str	r2, [sp, #8]
    dbb8:	9300      	str	r3, [sp, #0]
    dbba:	7b6b      	ldrb	r3, [r5, #13]
    dbbc:	892a      	ldrh	r2, [r5, #8]
    dbbe:	8969      	ldrh	r1, [r5, #10]
    dbc0:	6828      	ldr	r0, [r5, #0]
    dbc2:	f00d ff3d 	bl	1ba40 <send_ack>
			return -EMSGSIZE;
    dbc6:	f06f 0523 	mvn.w	r5, #35	; 0x23
	buf->data = buf->__buf + state->offset;
    dbca:	68b3      	ldr	r3, [r6, #8]
    dbcc:	9a06      	ldr	r2, [sp, #24]
    dbce:	fa13 f382 	uxtah	r3, r3, r2
    dbd2:	6033      	str	r3, [r6, #0]
	buf->len = state->len;
    dbd4:	9b04      	ldr	r3, [sp, #16]
    dbd6:	80b3      	strh	r3, [r6, #4]
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth, buf);
		}
	}

	return err;
}
    dbd8:	4628      	mov	r0, r5
    dbda:	b00b      	add	sp, #44	; 0x2c
    dbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    dbe0:	f10c 0c01 	add.w	ip, ip, #1
    dbe4:	f1bc 0f03 	cmp.w	ip, #3
    dbe8:	f101 0150 	add.w	r1, r1, #80	; 0x50
    dbec:	d1b1      	bne.n	db52 <bt_mesh_trans_recv+0xb6>
    dbee:	e7d2      	b.n	db96 <bt_mesh_trans_recv+0xfa>
		if (rx->in_use) {
    dbf0:	4b83      	ldr	r3, [pc, #524]	; (de00 <bt_mesh_trans_recv+0x364>)
    dbf2:	7c1a      	ldrb	r2, [r3, #16]
    dbf4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    dbf8:	d00b      	beq.n	dc12 <bt_mesh_trans_recv+0x176>
    dbfa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    dbfe:	065c      	lsls	r4, r3, #25
    dc00:	f140 8081 	bpl.w	dd06 <bt_mesh_trans_recv+0x26a>
    dc04:	4b7e      	ldr	r3, [pc, #504]	; (de00 <bt_mesh_trans_recv+0x364>)
    dc06:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    dc0a:	0659      	lsls	r1, r3, #25
    dc0c:	f100 8107 	bmi.w	de1e <bt_mesh_trans_recv+0x382>
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    dc10:	2202      	movs	r2, #2
		struct seg_rx *rx = &seg_rx[i];
    dc12:	f8df c1ec 	ldr.w	ip, [pc, #492]	; de00 <bt_mesh_trans_recv+0x364>
    dc16:	2350      	movs	r3, #80	; 0x50
    dc18:	435a      	muls	r2, r3
    dc1a:	eb0c 0402 	add.w	r4, ip, r2
	buf->len  = 0;
    dc1e:	2100      	movs	r1, #0
	buf->data = buf->__buf;
    dc20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    dc22:	6423      	str	r3, [r4, #64]	; 0x40
		rx->sub = net_rx->sub;
    dc24:	682b      	ldr	r3, [r5, #0]
    dc26:	f84c 3002 	str.w	r3, [ip, r2]
		rx->in_use = 1U;
    dc2a:	f894 e010 	ldrb.w	lr, [r4, #16]
	buf->len  = 0;
    dc2e:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		rx->seq_auth = *seq_auth;
    dc32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		rx->ctl = net_rx->ctl;
    dc36:	f04e 0c40 	orr.w	ip, lr, #64	; 0x40
		rx->seq_auth = *seq_auth;
    dc3a:	e9c4 2302 	strd	r2, r3, [r4, #8]
		rx->ctl = net_rx->ctl;
    dc3e:	f360 1c45 	bfi	ip, r0, #5, #1
		rx->seg_n = seg_n;
    dc42:	9a05      	ldr	r2, [sp, #20]
    dc44:	4663      	mov	r3, ip
    dc46:	f362 0304 	bfi	r3, r2, #0, #5
    dc4a:	7423      	strb	r3, [r4, #16]
		rx->hdr = *hdr;
    dc4c:	f899 3000 	ldrb.w	r3, [r9]
    dc50:	7463      	strb	r3, [r4, #17]
		rx->ttl = net_rx->ctx.send_ttl;
    dc52:	7b6b      	ldrb	r3, [r5, #13]
    dc54:	74a3      	strb	r3, [r4, #18]
		rx->src = net_rx->ctx.addr;
    dc56:	892b      	ldrh	r3, [r5, #8]
    dc58:	82a3      	strh	r3, [r4, #20]
		rx->dst = net_rx->ctx.recv_dst;
    dc5a:	896b      	ldrh	r3, [r5, #10]
    dc5c:	82e3      	strh	r3, [r4, #22]
	rx->obo = net_rx->friend_match;
    dc5e:	7d2b      	ldrb	r3, [r5, #20]
    dc60:	7c22      	ldrb	r2, [r4, #16]
		rx->block = 0U;
    dc62:	61a1      	str	r1, [r4, #24]
	rx->obo = net_rx->friend_match;
    dc64:	09db      	lsrs	r3, r3, #7
    dc66:	f363 12c7 	bfi	r2, r3, #7, #1
    dc6a:	7422      	strb	r2, [r4, #16]
	if (BIT(seg_o) & rx->block) {
    dc6c:	69a3      	ldr	r3, [r4, #24]
    dc6e:	fa23 fa07 	lsr.w	sl, r3, r7
    dc72:	f01a 0a01 	ands.w	sl, sl, #1
    dc76:	f040 810a 	bne.w	de8e <bt_mesh_trans_recv+0x3f2>
	if (seg_o == seg_n) {
    dc7a:	7c22      	ldrb	r2, [r4, #16]
    dc7c:	88b1      	ldrh	r1, [r6, #4]
    dc7e:	f3c2 1340 	ubfx	r3, r2, #5, #1
		return 12;
    dc82:	2b00      	cmp	r3, #0
    dc84:	bf14      	ite	ne
    dc86:	2308      	movne	r3, #8
    dc88:	230c      	moveq	r3, #12
	if (seg_o == seg_n) {
    dc8a:	4547      	cmp	r7, r8
    dc8c:	d159      	bne.n	dd42 <bt_mesh_trans_recv+0x2a6>
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
    dc8e:	fb03 1307 	mla	r3, r3, r7, r1
    dc92:	b29b      	uxth	r3, r3
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
    dc94:	2b48      	cmp	r3, #72	; 0x48
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
    dc96:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
    dc9a:	d836      	bhi.n	dd0a <bt_mesh_trans_recv+0x26e>
    dc9c:	f011 ff97 	bl	1fbce <z_impl_k_uptime_get_32>
	rx->last = k_uptime_get_32();
    dca0:	61e0      	str	r0, [r4, #28]
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
    dca2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dca6:	f009 fae1 	bl	1726c <z_timeout_remaining>
    dcaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dcae:	2264      	movs	r2, #100	; 0x64
    dcb0:	2300      	movs	r3, #0
    dcb2:	fb80 0101 	smull	r0, r1, r0, r1
	if (!k_delayed_work_remaining_get(&rx->ack) &&
    dcb6:	f104 0a20 	add.w	sl, r4, #32
    dcba:	f7f2 ffbf 	bl	c3c <__aeabi_uldivmod>
    dcbe:	b938      	cbnz	r0, dcd0 <bt_mesh_trans_recv+0x234>
		k_delayed_work_submit(&rx->ack, ack_timeout(rx));
    dcc0:	4620      	mov	r0, r4
    dcc2:	f00d fe63 	bl	1b98c <ack_timeout>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dcc6:	4651      	mov	r1, sl
    dcc8:	4602      	mov	r2, r0
    dcca:	484e      	ldr	r0, [pc, #312]	; (de04 <bt_mesh_trans_recv+0x368>)
    dccc:	f009 fa06 	bl	170dc <k_delayed_work_submit_to_queue>
	memcpy(rx->buf.data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
    dcd0:	7c22      	ldrb	r2, [r4, #16]
    dcd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    dcd4:	6831      	ldr	r1, [r6, #0]
		return 12;
    dcd6:	f012 0f20 	tst.w	r2, #32
    dcda:	bf14      	ite	ne
    dcdc:	2008      	movne	r0, #8
    dcde:	200c      	moveq	r0, #12
	memcpy(rx->buf.data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
    dce0:	fb07 3000 	mla	r0, r7, r0, r3
    dce4:	88b2      	ldrh	r2, [r6, #4]
    dce6:	f00c f9df 	bl	1a0a8 <memcpy>
	rx->block |= BIT(seg_o);
    dcea:	2301      	movs	r3, #1
    dcec:	69a2      	ldr	r2, [r4, #24]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    dcee:	4498      	add	r8, r3
	rx->block |= BIT(seg_o);
    dcf0:	fa03 f707 	lsl.w	r7, r3, r7
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    dcf4:	fa03 f308 	lsl.w	r3, r3, r8
	rx->block |= BIT(seg_o);
    dcf8:	433a      	orrs	r2, r7
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    dcfa:	3b01      	subs	r3, #1
    dcfc:	429a      	cmp	r2, r3
	rx->block |= BIT(seg_o);
    dcfe:	61a2      	str	r2, [r4, #24]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    dd00:	d022      	beq.n	dd48 <bt_mesh_trans_recv+0x2ac>
		return 0;
    dd02:	2500      	movs	r5, #0
    dd04:	e761      	b.n	dbca <bt_mesh_trans_recv+0x12e>
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    dd06:	2201      	movs	r2, #1
    dd08:	e783      	b.n	dc12 <bt_mesh_trans_recv+0x176>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    dd0a:	09d2      	lsrs	r2, r2, #7
    dd0c:	e9cd a201 	strd	sl, r2, [sp, #4]
    dd10:	ab08      	add	r3, sp, #32
    dd12:	9300      	str	r3, [sp, #0]
    dd14:	7b6b      	ldrb	r3, [r5, #13]
    dd16:	892a      	ldrh	r2, [r5, #8]
    dd18:	8969      	ldrh	r1, [r5, #10]
    dd1a:	6828      	ldr	r0, [r5, #0]
    dd1c:	f00d fe90 	bl	1ba40 <send_ack>
	k_delayed_work_cancel(&rx->ack);
    dd20:	f104 0020 	add.w	r0, r4, #32
    dd24:	f011 ff02 	bl	1fb2c <k_delayed_work_cancel>
	rx->in_use = 0U;
    dd28:	7c23      	ldrb	r3, [r4, #16]
		rx->sub = NULL;
    dd2a:	f8c4 a000 	str.w	sl, [r4]
	rx->in_use = 0U;
    dd2e:	f36a 1386 	bfi	r3, sl, #6, #1
    dd32:	7423      	strb	r3, [r4, #16]
		rx->seq_auth = 0U;
    dd34:	2200      	movs	r2, #0
    dd36:	2300      	movs	r3, #0
    dd38:	e9c4 2302 	strd	r2, r3, [r4, #8]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    dd3c:	f8c4 a014 	str.w	sl, [r4, #20]
    dd40:	e741      	b.n	dbc6 <bt_mesh_trans_recv+0x12a>
		if (buf->len != seg_len(rx->ctl)) {
    dd42:	4299      	cmp	r1, r3
    dd44:	d0aa      	beq.n	dc9c <bt_mesh_trans_recv+0x200>
    dd46:	e6d0      	b.n	daea <bt_mesh_trans_recv+0x4e>
	if (net_rx->local_match && is_replay(net_rx)) {
    dd48:	7d2b      	ldrb	r3, [r5, #20]
    dd4a:	065a      	lsls	r2, r3, #25
    dd4c:	d508      	bpl.n	dd60 <bt_mesh_trans_recv+0x2c4>
    dd4e:	4628      	mov	r0, r5
    dd50:	f7ff fa5c 	bl	d20c <is_replay>
    dd54:	b120      	cbz	r0, dd60 <bt_mesh_trans_recv+0x2c4>
		rx->block &= ~BIT(seg_o);
    dd56:	69a3      	ldr	r3, [r4, #24]
    dd58:	ea23 0707 	bic.w	r7, r3, r7
    dd5c:	61a7      	str	r7, [r4, #24]
    dd5e:	e6c4      	b.n	daea <bt_mesh_trans_recv+0x4e>
	k_delayed_work_cancel(&rx->ack);
    dd60:	4650      	mov	r0, sl
    dd62:	f011 fee3 	bl	1fb2c <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    dd66:	7c23      	ldrb	r3, [r4, #16]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    dd68:	09db      	lsrs	r3, r3, #7
    dd6a:	9302      	str	r3, [sp, #8]
    dd6c:	69a3      	ldr	r3, [r4, #24]
    dd6e:	9301      	str	r3, [sp, #4]
    dd70:	af08      	add	r7, sp, #32
    dd72:	9700      	str	r7, [sp, #0]
    dd74:	7b6b      	ldrb	r3, [r5, #13]
    dd76:	892a      	ldrh	r2, [r5, #8]
    dd78:	8969      	ldrh	r1, [r5, #10]
    dd7a:	6828      	ldr	r0, [r5, #0]
    dd7c:	f00d fe60 	bl	1ba40 <send_ack>
	if (net_rx->ctl) {
    dd80:	7d2b      	ldrb	r3, [r5, #20]
    dd82:	f899 1000 	ldrb.w	r1, [r9]
    dd86:	f013 0f08 	tst.w	r3, #8
    dd8a:	f104 0240 	add.w	r2, r4, #64	; 0x40
    dd8e:	d00c      	beq.n	ddaa <bt_mesh_trans_recv+0x30e>
		err = ctl_recv(net_rx, *hdr, &rx->buf, seq_auth);
    dd90:	463b      	mov	r3, r7
    dd92:	4628      	mov	r0, r5
    dd94:	f7ff fb86 	bl	d4a4 <ctl_recv>
		err = sdu_recv(net_rx, (rx->seq_auth & 0xffffff), *hdr,
    dd98:	4605      	mov	r5, r0
	k_delayed_work_cancel(&rx->ack);
    dd9a:	4650      	mov	r0, sl
    dd9c:	f011 fec6 	bl	1fb2c <k_delayed_work_cancel>
	rx->in_use = 0U;
    dda0:	7c23      	ldrb	r3, [r4, #16]
    dda2:	f36f 1386 	bfc	r3, #6, #1
    dda6:	7423      	strb	r3, [r4, #16]
	return err;
    dda8:	e70f      	b.n	dbca <bt_mesh_trans_recv+0x12e>
		err = sdu_recv(net_rx, (rx->seq_auth & 0xffffff), *hdr,
    ddaa:	68a0      	ldr	r0, [r4, #8]
    ddac:	f899 3001 	ldrb.w	r3, [r9, #1]
    ddb0:	9200      	str	r2, [sp, #0]
    ddb2:	09db      	lsrs	r3, r3, #7
    ddb4:	460a      	mov	r2, r1
    ddb6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    ddba:	4628      	mov	r0, r5
    ddbc:	f7ff fa60 	bl	d280 <sdu_recv>
    ddc0:	e7ea      	b.n	dd98 <bt_mesh_trans_recv+0x2fc>
	if (buf->len < 1) {
    ddc2:	9b04      	ldr	r3, [sp, #16]
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	f43f ae90 	beq.w	daea <bt_mesh_trans_recv+0x4e>
	if (rx->local_match && is_replay(rx)) {
    ddca:	7d2b      	ldrb	r3, [r5, #20]
    ddcc:	065b      	lsls	r3, r3, #25
    ddce:	d40e      	bmi.n	ddee <bt_mesh_trans_recv+0x352>
	hdr = net_buf_simple_pull_u8(buf);
    ddd0:	4630      	mov	r0, r6
    ddd2:	f011 fa1e 	bl	1f212 <net_buf_simple_pull_u8>
	if (rx->ctl) {
    ddd6:	7d2a      	ldrb	r2, [r5, #20]
    ddd8:	f012 0308 	ands.w	r3, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
    dddc:	4601      	mov	r1, r0
	if (rx->ctl) {
    ddde:	d013      	beq.n	de08 <bt_mesh_trans_recv+0x36c>
		return ctl_recv(rx, hdr, buf, seq_auth);
    dde0:	ab08      	add	r3, sp, #32
    dde2:	4632      	mov	r2, r6
    dde4:	4628      	mov	r0, r5
    dde6:	f7ff fb5d 	bl	d4a4 <ctl_recv>
		return sdu_recv(rx, rx->seq, hdr, 0, buf);
    ddea:	4605      	mov	r5, r0
    ddec:	e6ed      	b.n	dbca <bt_mesh_trans_recv+0x12e>
	if (rx->local_match && is_replay(rx)) {
    ddee:	4628      	mov	r0, r5
    ddf0:	f7ff fa0c 	bl	d20c <is_replay>
    ddf4:	2800      	cmp	r0, #0
    ddf6:	d0eb      	beq.n	ddd0 <bt_mesh_trans_recv+0x334>
    ddf8:	e677      	b.n	daea <bt_mesh_trans_recv+0x4e>
    ddfa:	bf00      	nop
    ddfc:	2000885c 	.word	0x2000885c
    de00:	20007d38 	.word	0x20007d38
    de04:	20001fc8 	.word	0x20001fc8
		if (!rx->local_match && !rx->friend_match) {
    de08:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    de0c:	f43f af79 	beq.w	dd02 <bt_mesh_trans_recv+0x266>
		return sdu_recv(rx, rx->seq, hdr, 0, buf);
    de10:	9600      	str	r6, [sp, #0]
    de12:	4602      	mov	r2, r0
    de14:	6929      	ldr	r1, [r5, #16]
    de16:	4628      	mov	r0, r5
    de18:	f7ff fa32 	bl	d280 <sdu_recv>
    de1c:	e7e5      	b.n	ddea <bt_mesh_trans_recv+0x34e>
		return -ENOMEM;
    de1e:	f06f 050b 	mvn.w	r5, #11
    de22:	e6d2      	b.n	dbca <bt_mesh_trans_recv+0x12e>
			return 0;
    de24:	461d      	mov	r5, r3
    de26:	e6d7      	b.n	dbd8 <bt_mesh_trans_recv+0x13c>
		if (rx->seq_auth > *seq_auth) {
    de28:	459b      	cmp	fp, r3
    de2a:	bf08      	it	eq
    de2c:	4592      	cmpeq	sl, r2
    de2e:	f4ff ae5c 	bcc.w	daea <bt_mesh_trans_recv+0x4e>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    de32:	f899 2000 	ldrb.w	r2, [r9]
    de36:	7c63      	ldrb	r3, [r4, #17]
    de38:	429a      	cmp	r2, r3
    de3a:	f47f ae56 	bne.w	daea <bt_mesh_trans_recv+0x4e>
    de3e:	7c23      	ldrb	r3, [r4, #16]
    de40:	f003 021f 	and.w	r2, r3, #31
    de44:	4542      	cmp	r2, r8
    de46:	f47f ae50 	bne.w	daea <bt_mesh_trans_recv+0x4e>
	if (rx->ctl != net_rx->ctl) {
    de4a:	7d2a      	ldrb	r2, [r5, #20]
    de4c:	f3c3 1140 	ubfx	r1, r3, #5, #1
    de50:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    de54:	4291      	cmp	r1, r2
    de56:	f47f ae48 	bne.w	daea <bt_mesh_trans_recv+0x4e>
		if (rx->in_use) {
    de5a:	065a      	lsls	r2, r3, #25
    de5c:	f53f af06 	bmi.w	dc6c <bt_mesh_trans_recv+0x1d0>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    de60:	f108 0101 	add.w	r1, r8, #1
    de64:	f04f 0801 	mov.w	r8, #1
    de68:	69a2      	ldr	r2, [r4, #24]
    de6a:	fa08 f801 	lsl.w	r8, r8, r1
    de6e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    de72:	4542      	cmp	r2, r8
    de74:	f47f ae39 	bne.w	daea <bt_mesh_trans_recv+0x4e>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    de78:	09db      	lsrs	r3, r3, #7
    de7a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    de7e:	ab08      	add	r3, sp, #32
    de80:	9300      	str	r3, [sp, #0]
    de82:	7b6b      	ldrb	r3, [r5, #13]
    de84:	892a      	ldrh	r2, [r5, #8]
    de86:	8969      	ldrh	r1, [r5, #10]
    de88:	6828      	ldr	r0, [r5, #0]
    de8a:	f00d fdd9 	bl	1ba40 <send_ack>
		return -EALREADY;
    de8e:	f06f 0544 	mvn.w	r5, #68	; 0x44
    de92:	e69a      	b.n	dbca <bt_mesh_trans_recv+0x12e>

0000de94 <bt_mesh_rx_reset>:

void bt_mesh_rx_reset(void)
{
    de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_delayed_work_cancel(&rx->ack);
    de96:	4c19      	ldr	r4, [pc, #100]	; (defc <bt_mesh_rx_reset+0x68>)
    de98:	f104 0020 	add.w	r0, r4, #32
    de9c:	f011 fe46 	bl	1fb2c <k_delayed_work_cancel>
	rx->in_use = 0U;
    dea0:	7c23      	ldrb	r3, [r4, #16]
		rx->sub = NULL;
    dea2:	2500      	movs	r5, #0
		rx->seq_auth = 0U;
    dea4:	2600      	movs	r6, #0
    dea6:	2700      	movs	r7, #0
	rx->in_use = 0U;
    dea8:	f36f 1386 	bfc	r3, #6, #1
	k_delayed_work_cancel(&rx->ack);
    deac:	f104 0070 	add.w	r0, r4, #112	; 0x70
	rx->in_use = 0U;
    deb0:	7423      	strb	r3, [r4, #16]
		rx->seq_auth = 0U;
    deb2:	e9c4 6702 	strd	r6, r7, [r4, #8]
		rx->sub = NULL;
    deb6:	6025      	str	r5, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    deb8:	6165      	str	r5, [r4, #20]
	k_delayed_work_cancel(&rx->ack);
    deba:	f011 fe37 	bl	1fb2c <k_delayed_work_cancel>
	rx->in_use = 0U;
    debe:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		rx->sub = NULL;
    dec2:	6525      	str	r5, [r4, #80]	; 0x50
	rx->in_use = 0U;
    dec4:	f365 1386 	bfi	r3, r5, #6, #1
	k_delayed_work_cancel(&rx->ack);
    dec8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	rx->in_use = 0U;
    decc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		rx->seq_auth = 0U;
    ded0:	e9c4 6716 	strd	r6, r7, [r4, #88]	; 0x58
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    ded4:	6665      	str	r5, [r4, #100]	; 0x64
	k_delayed_work_cancel(&rx->ack);
    ded6:	f011 fe29 	bl	1fb2c <k_delayed_work_cancel>
	rx->in_use = 0U;
    deda:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
		rx->sub = NULL;
    dede:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rx->in_use = 0U;
    dee2:	f365 1386 	bfi	r3, r5, #6, #1
    dee6:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		rx->seq_auth = 0U;
    deea:	e9c4 672a 	strd	r6, r7, [r4, #168]	; 0xa8
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    deee:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_clear_rpl();
	} else {
		(void)memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
	}
}
    def2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_mesh_clear_rpl();
    def6:	f010 b999 	b.w	1e22c <bt_mesh_clear_rpl>
    defa:	bf00      	nop
    defc:	20007d38 	.word	0x20007d38

0000df00 <bt_mesh_tx_reset>:

void bt_mesh_tx_reset(void)
{
    df00:	b510      	push	{r4, lr}
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
    df02:	4c07      	ldr	r4, [pc, #28]	; (df20 <bt_mesh_tx_reset+0x20>)
    df04:	4620      	mov	r0, r4
    df06:	f7ff fa5b 	bl	d3c0 <seg_tx_reset>
    df0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    df0e:	f7ff fa57 	bl	d3c0 <seg_tx_reset>
    df12:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
	}
}
    df16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		seg_tx_reset(&seg_tx[i]);
    df1a:	f7ff ba51 	b.w	d3c0 <seg_tx_reset>
    df1e:	bf00      	nop
    df20:	200003c8 	.word	0x200003c8

0000df24 <bt_mesh_trans_init>:

void bt_mesh_trans_init(void)
{
    df24:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    df26:	4d18      	ldr	r5, [pc, #96]	; (df88 <bt_mesh_trans_init+0x64>)
    df28:	4c18      	ldr	r4, [pc, #96]	; (df8c <bt_mesh_trans_init+0x68>)
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    df2a:	4e19      	ldr	r6, [pc, #100]	; (df90 <bt_mesh_trans_init+0x6c>)
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    df2c:	4629      	mov	r1, r5
    df2e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    df32:	f011 fdf3 	bl	1fb1c <k_delayed_work_init>
    df36:	4629      	mov	r1, r5
    df38:	f104 0090 	add.w	r0, r4, #144	; 0x90
    df3c:	f011 fdee 	bl	1fb1c <k_delayed_work_init>
    df40:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    df44:	4c13      	ldr	r4, [pc, #76]	; (df94 <bt_mesh_trans_init+0x70>)
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    df46:	4629      	mov	r1, r5
    df48:	f011 fde8 	bl	1fb1c <k_delayed_work_init>
		seg_rx[i].buf.__buf = (seg_rx_buf_data +
    df4c:	4d12      	ldr	r5, [pc, #72]	; (df98 <bt_mesh_trans_init+0x74>)
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    df4e:	4631      	mov	r1, r6
    df50:	f104 0020 	add.w	r0, r4, #32
    df54:	f011 fde2 	bl	1fb1c <k_delayed_work_init>
		seg_rx[i].buf.__buf = (seg_rx_buf_data +
    df58:	64a5      	str	r5, [r4, #72]	; 0x48
				       (i * CONFIG_BT_MESH_RX_SDU_MAX));
		seg_rx[i].buf.data = seg_rx[i].buf.__buf;
    df5a:	6425      	str	r5, [r4, #64]	; 0x40
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    df5c:	4631      	mov	r1, r6
    df5e:	f104 0070 	add.w	r0, r4, #112	; 0x70
    df62:	f011 fddb 	bl	1fb1c <k_delayed_work_init>
		seg_rx[i].buf.__buf = (seg_rx_buf_data +
    df66:	f105 0348 	add.w	r3, r5, #72	; 0x48
    df6a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    df6e:	3590      	adds	r5, #144	; 0x90
		seg_rx[i].buf.data = seg_rx[i].buf.__buf;
    df70:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    df74:	4631      	mov	r1, r6
    df76:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    df7a:	f011 fdcf 	bl	1fb1c <k_delayed_work_init>
		seg_rx[i].buf.__buf = (seg_rx_buf_data +
    df7e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
		seg_rx[i].buf.data = seg_rx[i].buf.__buf;
    df82:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
	}
}
    df86:	bd70      	pop	{r4, r5, r6, pc}
    df88:	0001b9e1 	.word	0x0001b9e1
    df8c:	200003c8 	.word	0x200003c8
    df90:	0000da29 	.word	0x0000da29
    df94:	20007d38 	.word	0x20007d38
    df98:	20007a06 	.word	0x20007a06

0000df9c <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const u8_t n[16], const u8_t *p, size_t p_len,
	       u8_t net_id[1], u8_t enc_key[16], u8_t priv_key[16])
{
    df9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    df9e:	b095      	sub	sp, #84	; 0x54
    dfa0:	4604      	mov	r4, r0
    dfa2:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    dfa4:	4828      	ldr	r0, [pc, #160]	; (e048 <bt_mesh_k2+0xac>)
    dfa6:	a902      	add	r1, sp, #8
{
    dfa8:	4615      	mov	r5, r2
    dfaa:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    dfac:	f00e f84f 	bl	1c04e <bt_mesh_s1>
	if (err) {
    dfb0:	2800      	cmp	r0, #0
    dfb2:	d146      	bne.n	e042 <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    dfb4:	4621      	mov	r1, r4
    dfb6:	ab0a      	add	r3, sp, #40	; 0x28
    dfb8:	2210      	movs	r2, #16
    dfba:	a802      	add	r0, sp, #8
    dfbc:	f00e f83d 	bl	1c03a <bt_mesh_aes_cmac_one>
	if (err) {
    dfc0:	4604      	mov	r4, r0
    dfc2:	2800      	cmp	r0, #0
    dfc4:	d13a      	bne.n	e03c <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    dfc6:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    dfc8:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    dfcc:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    dfd0:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    dfd2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	pad = 0x01;
    dfd6:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = 0;
    dfda:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    dfde:	462b      	mov	r3, r5
    dfe0:	2203      	movs	r2, #3
    dfe2:	a90e      	add	r1, sp, #56	; 0x38
    dfe4:	a80a      	add	r0, sp, #40	; 0x28
    dfe6:	f00e f806 	bl	1bff6 <bt_mesh_aes_cmac>
	if (err) {
    dfea:	4604      	mov	r4, r0
    dfec:	bb30      	cbnz	r0, e03c <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    dfee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    dff2:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    dff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    dff8:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    dffa:	2302      	movs	r3, #2
    dffc:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    e000:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e002:	462b      	mov	r3, r5
    e004:	2203      	movs	r2, #3
    e006:	a90e      	add	r1, sp, #56	; 0x38
    e008:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    e00a:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e00c:	f00d fff3 	bl	1bff6 <bt_mesh_aes_cmac>
	if (err) {
    e010:	4604      	mov	r4, r0
    e012:	b998      	cbnz	r0, e03c <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    e014:	4632      	mov	r2, r6
    e016:	4629      	mov	r1, r5
    e018:	981a      	ldr	r0, [sp, #104]	; 0x68
    e01a:	f00c f845 	bl	1a0a8 <memcpy>

	pad = 0x03;
    e01e:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e020:	462b      	mov	r3, r5
    e022:	a90e      	add	r1, sp, #56	; 0x38
    e024:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    e026:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    e02a:	f00d ffe4 	bl	1bff6 <bt_mesh_aes_cmac>
	if (err) {
    e02e:	4604      	mov	r4, r0
    e030:	b920      	cbnz	r0, e03c <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    e032:	4632      	mov	r2, r6
    e034:	4629      	mov	r1, r5
    e036:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e038:	f00c f836 	bl	1a0a8 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    e03c:	4620      	mov	r0, r4
    e03e:	b015      	add	sp, #84	; 0x54
    e040:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    e042:	2401      	movs	r4, #1
    e044:	e7fa      	b.n	e03c <bt_mesh_k2+0xa0>
    e046:	bf00      	nop
    e048:	00021b38 	.word	0x00021b38

0000e04c <bt_mesh_k3>:

int bt_mesh_k3(const u8_t n[16], u8_t out[8])
{
    e04c:	b530      	push	{r4, r5, lr}
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    e04e:	4b14      	ldr	r3, [pc, #80]	; (e0a0 <bt_mesh_k3+0x54>)
{
    e050:	b08b      	sub	sp, #44	; 0x2c
    e052:	4604      	mov	r4, r0
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    e054:	6818      	ldr	r0, [r3, #0]
    e056:	9000      	str	r0, [sp, #0]
{
    e058:	460d      	mov	r5, r1
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    e05a:	791b      	ldrb	r3, [r3, #4]
	u8_t tmp[16];
	u8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    e05c:	4811      	ldr	r0, [pc, #68]	; (e0a4 <bt_mesh_k3+0x58>)
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    e05e:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
    e062:	a902      	add	r1, sp, #8
    e064:	f00d fff3 	bl	1c04e <bt_mesh_s1>
	if (err) {
    e068:	b9b8      	cbnz	r0, e09a <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    e06a:	4621      	mov	r1, r4
    e06c:	ab06      	add	r3, sp, #24
    e06e:	2210      	movs	r2, #16
    e070:	a802      	add	r0, sp, #8
    e072:	f00d ffe2 	bl	1c03a <bt_mesh_aes_cmac_one>
	if (err) {
    e076:	4604      	mov	r4, r0
    e078:	b960      	cbnz	r0, e094 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    e07a:	ab02      	add	r3, sp, #8
    e07c:	2205      	movs	r2, #5
    e07e:	4669      	mov	r1, sp
    e080:	a806      	add	r0, sp, #24
    e082:	f00d ffda 	bl	1c03a <bt_mesh_aes_cmac_one>
	if (err) {
    e086:	4604      	mov	r4, r0
    e088:	b920      	cbnz	r0, e094 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    e08a:	2208      	movs	r2, #8
    e08c:	a904      	add	r1, sp, #16
    e08e:	4628      	mov	r0, r5
    e090:	f00c f80a 	bl	1a0a8 <memcpy>

	return 0;
}
    e094:	4620      	mov	r0, r4
    e096:	b00b      	add	sp, #44	; 0x2c
    e098:	bd30      	pop	{r4, r5, pc}
		return err;
    e09a:	2401      	movs	r4, #1
    e09c:	e7fa      	b.n	e094 <bt_mesh_k3+0x48>
    e09e:	bf00      	nop
    e0a0:	00020010 	.word	0x00020010
    e0a4:	00021b3d 	.word	0x00021b3d

0000e0a8 <bt_mesh_k4>:

int bt_mesh_k4(const u8_t n[16], u8_t out[1])
{
    e0a8:	b530      	push	{r4, r5, lr}
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
    e0aa:	4b11      	ldr	r3, [pc, #68]	; (e0f0 <bt_mesh_k4+0x48>)
{
    e0ac:	b08b      	sub	sp, #44	; 0x2c
    e0ae:	4605      	mov	r5, r0
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
    e0b0:	6818      	ldr	r0, [r3, #0]
    e0b2:	9001      	str	r0, [sp, #4]
{
    e0b4:	460c      	mov	r4, r1
	u8_t tmp[16];
	u8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    e0b6:	480f      	ldr	r0, [pc, #60]	; (e0f4 <bt_mesh_k4+0x4c>)
    e0b8:	a902      	add	r1, sp, #8
    e0ba:	f00d ffc8 	bl	1c04e <bt_mesh_s1>
	if (err) {
    e0be:	b9a8      	cbnz	r0, e0ec <bt_mesh_k4+0x44>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    e0c0:	ab06      	add	r3, sp, #24
    e0c2:	2210      	movs	r2, #16
    e0c4:	4629      	mov	r1, r5
    e0c6:	a802      	add	r0, sp, #8
    e0c8:	f00d ffb7 	bl	1c03a <bt_mesh_aes_cmac_one>
	if (err) {
    e0cc:	b960      	cbnz	r0, e0e8 <bt_mesh_k4+0x40>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    e0ce:	2204      	movs	r2, #4
    e0d0:	ab02      	add	r3, sp, #8
    e0d2:	eb0d 0102 	add.w	r1, sp, r2
    e0d6:	a806      	add	r0, sp, #24
    e0d8:	f00d ffaf 	bl	1c03a <bt_mesh_aes_cmac_one>
	if (err) {
    e0dc:	b920      	cbnz	r0, e0e8 <bt_mesh_k4+0x40>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    e0de:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e0e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e0e6:	7023      	strb	r3, [r4, #0]

	return 0;
}
    e0e8:	b00b      	add	sp, #44	; 0x2c
    e0ea:	bd30      	pop	{r4, r5, pc}
		return err;
    e0ec:	2001      	movs	r0, #1
    e0ee:	e7fb      	b.n	e0e8 <bt_mesh_k4+0x40>
    e0f0:	00020015 	.word	0x00020015
    e0f4:	00021b42 	.word	0x00021b42

0000e0f8 <bt_mesh_id128>:

int bt_mesh_id128(const u8_t n[16], const char *s, u8_t out[16])
{
    e0f8:	b530      	push	{r4, r5, lr}
    e0fa:	b087      	sub	sp, #28
    e0fc:	4604      	mov	r4, r0
    e0fe:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	u8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    e100:	a902      	add	r1, sp, #8
{
    e102:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    e104:	f00d ffa3 	bl	1c04e <bt_mesh_s1>
	if (err) {
    e108:	b940      	cbnz	r0, e11c <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    e10a:	9500      	str	r5, [sp, #0]
    e10c:	4b04      	ldr	r3, [pc, #16]	; (e120 <bt_mesh_id128+0x28>)
    e10e:	aa02      	add	r2, sp, #8
    e110:	2110      	movs	r1, #16
    e112:	4620      	mov	r0, r4
    e114:	f00d ffb2 	bl	1c07c <bt_mesh_k1>
}
    e118:	b007      	add	sp, #28
    e11a:	bd30      	pop	{r4, r5, pc}
		return err;
    e11c:	2001      	movs	r0, #1
    e11e:	e7fb      	b.n	e118 <bt_mesh_id128+0x20>
    e120:	00021b31 	.word	0x00021b31

0000e124 <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

u8_t bt_mesh_fcs_calc(const u8_t *data, u8_t data_len)
{
    e124:	b510      	push	{r4, lr}
	u8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    e126:	4a06      	ldr	r2, [pc, #24]	; (e140 <bt_mesh_fcs_calc+0x1c>)
    e128:	4401      	add	r1, r0
	u8_t fcs = 0xff;
    e12a:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    e12c:	4288      	cmp	r0, r1
    e12e:	d102      	bne.n	e136 <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    e130:	43d8      	mvns	r0, r3
}
    e132:	b2c0      	uxtb	r0, r0
    e134:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    e136:	f810 4b01 	ldrb.w	r4, [r0], #1
    e13a:	4063      	eors	r3, r4
    e13c:	5cd3      	ldrb	r3, [r2, r3]
    e13e:	e7f5      	b.n	e12c <bt_mesh_fcs_calc+0x8>
    e140:	00021b51 	.word	0x00021b51

0000e144 <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, u8_t received_fcs)
{
	const u8_t *data = buf->data;
    e144:	6802      	ldr	r2, [r0, #0]
	u16_t data_len = buf->len;
	u8_t fcs = 0xff;

	while (data_len--) {
    e146:	8880      	ldrh	r0, [r0, #4]
{
    e148:	b530      	push	{r4, r5, lr}
    e14a:	4c08      	ldr	r4, [pc, #32]	; (e16c <bt_mesh_fcs_check+0x28>)
    e14c:	4410      	add	r0, r2
	u8_t fcs = 0xff;
    e14e:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    e150:	4282      	cmp	r2, r0
    e152:	d106      	bne.n	e162 <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    e154:	404b      	eors	r3, r1
    e156:	5ce0      	ldrb	r0, [r4, r3]
}
    e158:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    e15c:	4258      	negs	r0, r3
    e15e:	4158      	adcs	r0, r3
    e160:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    e162:	f812 5b01 	ldrb.w	r5, [r2], #1
    e166:	406b      	eors	r3, r5
    e168:	5ce3      	ldrb	r3, [r4, r3]
    e16a:	e7f1      	b.n	e150 <bt_mesh_fcs_check+0xc>
    e16c:	00021b51 	.word	0x00021b51

0000e170 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const u8_t virtual_label[16], u16_t *addr)
{
    e170:	b530      	push	{r4, r5, lr}
    e172:	b089      	sub	sp, #36	; 0x24
    e174:	4605      	mov	r5, r0
    e176:	460c      	mov	r4, r1
	u8_t salt[16];
	u8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
    e178:	480e      	ldr	r0, [pc, #56]	; (e1b4 <bt_mesh_virtual_addr+0x44>)
    e17a:	4669      	mov	r1, sp
    e17c:	f00d ff67 	bl	1c04e <bt_mesh_s1>
	if (err) {
    e180:	b9a8      	cbnz	r0, e1ae <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
    e182:	ab04      	add	r3, sp, #16
    e184:	2210      	movs	r2, #16
    e186:	4629      	mov	r1, r5
    e188:	4668      	mov	r0, sp
    e18a:	f00d ff56 	bl	1c03a <bt_mesh_aes_cmac_one>
	if (err) {
    e18e:	b960      	cbnz	r0, e1aa <bt_mesh_virtual_addr+0x3a>
    e190:	f89d 201e 	ldrb.w	r2, [sp, #30]
    e194:	f89d 301f 	ldrb.w	r3, [sp, #31]
    e198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
    e19c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e1a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    e1a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    e1a8:	8023      	strh	r3, [r4, #0]

	return 0;
}
    e1aa:	b009      	add	sp, #36	; 0x24
    e1ac:	bd30      	pop	{r4, r5, pc}
		return err;
    e1ae:	2001      	movs	r0, #1
    e1b0:	e7fb      	b.n	e1aa <bt_mesh_virtual_addr+0x3a>
    e1b2:	bf00      	nop
    e1b4:	00021b4c 	.word	0x00021b4c

0000e1b8 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const u8_t dhkey[32], const u8_t conf_salt[16],
			  u8_t conf_key[16])
{
    e1b8:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
    e1ba:	4b04      	ldr	r3, [pc, #16]	; (e1cc <bt_mesh_prov_conf_key+0x14>)
    e1bc:	9200      	str	r2, [sp, #0]
    e1be:	460a      	mov	r2, r1
    e1c0:	2120      	movs	r1, #32
    e1c2:	f00d ff5b 	bl	1c07c <bt_mesh_k1>
}
    e1c6:	b003      	add	sp, #12
    e1c8:	f85d fb04 	ldr.w	pc, [sp], #4
    e1cc:	00021b47 	.word	0x00021b47

0000e1d0 <mod_init>:
	}
}

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
    e1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1d2:	4604      	mov	r4, r0
	int i;

	if (mod->pub) {
    e1d4:	6880      	ldr	r0, [r0, #8]
{
    e1d6:	460e      	mov	r6, r1
    e1d8:	4617      	mov	r7, r2
    e1da:	461d      	mov	r5, r3
	if (mod->pub) {
    e1dc:	b120      	cbz	r0, e1e8 <mod_init+0x18>
		mod->pub->mod = mod;
    e1de:	f840 4b18 	str.w	r4, [r0], #24
		k_delayed_work_init(&mod->pub->timer, mod_publish);
    e1e2:	4914      	ldr	r1, [pc, #80]	; (e234 <mod_init+0x64>)
    e1e4:	f011 fc9a 	bl	1fb1c <k_delayed_work_init>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    e1e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e1ec:	81a3      	strh	r3, [r4, #12]
	}

	mod->elem_idx = elem - dev_comp->elem;
    e1ee:	4b12      	ldr	r3, [pc, #72]	; (e238 <mod_init+0x68>)
    e1f0:	681b      	ldr	r3, [r3, #0]
    e1f2:	68db      	ldr	r3, [r3, #12]
    e1f4:	1af3      	subs	r3, r6, r3
    e1f6:	111b      	asrs	r3, r3, #4
    e1f8:	7123      	strb	r3, [r4, #4]
	if (vnd) {
    e1fa:	4b10      	ldr	r3, [pc, #64]	; (e23c <mod_init+0x6c>)
    e1fc:	b12f      	cbz	r7, e20a <mod_init+0x3a>
		mod->mod_idx = mod - elem->vnd_models;
    e1fe:	68f2      	ldr	r2, [r6, #12]
    e200:	1aa2      	subs	r2, r4, r2
    e202:	1092      	asrs	r2, r2, #2
    e204:	4353      	muls	r3, r2
    e206:	7163      	strb	r3, [r4, #5]
	for (i = 0; i < ARRAY_SIZE(model_init); i++) {
		if (model_init[i].id == mod->id) {
			model_init[i].init(mod, primary);
		}
	}
}
    e208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mod->mod_idx = mod - elem->models;
    e20a:	68b2      	ldr	r2, [r6, #8]
    e20c:	1aa2      	subs	r2, r4, r2
    e20e:	1092      	asrs	r2, r2, #2
    e210:	4353      	muls	r3, r2
    e212:	7163      	strb	r3, [r4, #5]
		if (model_init[i].id == mod->id) {
    e214:	8823      	ldrh	r3, [r4, #0]
    e216:	b91b      	cbnz	r3, e220 <mod_init+0x50>
			model_init[i].init(mod, primary);
    e218:	4629      	mov	r1, r5
    e21a:	4620      	mov	r0, r4
    e21c:	f000 fde6 	bl	edec <bt_mesh_cfg_srv_init>
		if (model_init[i].id == mod->id) {
    e220:	8823      	ldrh	r3, [r4, #0]
    e222:	2b02      	cmp	r3, #2
    e224:	d1f0      	bne.n	e208 <mod_init+0x38>
			model_init[i].init(mod, primary);
    e226:	4629      	mov	r1, r5
    e228:	4620      	mov	r0, r4
}
    e22a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			model_init[i].init(mod, primary);
    e22e:	f000 bfc5 	b.w	f1bc <bt_mesh_health_srv_init>
    e232:	bf00      	nop
    e234:	0000e6c9 	.word	0x0000e6c9
    e238:	20000f90 	.word	0x20000f90
    e23c:	b6db6db7 	.word	0xb6db6db7

0000e240 <bt_mesh_model_foreach>:
{
    e240:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    e244:	f8df a068 	ldr.w	sl, [pc, #104]	; e2b0 <bt_mesh_model_foreach+0x70>
{
    e248:	4607      	mov	r7, r0
    e24a:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    e24c:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
    e24e:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
    e252:	f8da 3000 	ldr.w	r3, [sl]
    e256:	689a      	ldr	r2, [r3, #8]
    e258:	42aa      	cmp	r2, r5
    e25a:	d802      	bhi.n	e262 <bt_mesh_model_foreach+0x22>
}
    e25c:	b002      	add	sp, #8
    e25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e262:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    e264:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e266:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    e26a:	7923      	ldrb	r3, [r4, #4]
    e26c:	42b3      	cmp	r3, r6
    e26e:	dc05      	bgt.n	e27c <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
    e270:	2600      	movs	r6, #0
    e272:	7963      	ldrb	r3, [r4, #5]
    e274:	42b3      	cmp	r3, r6
    e276:	dc0e      	bgt.n	e296 <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
    e278:	3501      	adds	r5, #1
    e27a:	e7ea      	b.n	e252 <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
    e27c:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    e27e:	f8cd 8000 	str.w	r8, [sp]
    e282:	fab5 f385 	clz	r3, r5
    e286:	fb09 0006 	mla	r0, r9, r6, r0
    e28a:	095b      	lsrs	r3, r3, #5
    e28c:	2200      	movs	r2, #0
    e28e:	4621      	mov	r1, r4
    e290:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
    e292:	3601      	adds	r6, #1
    e294:	e7e9      	b.n	e26a <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    e296:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    e298:	f8cd 8000 	str.w	r8, [sp]
    e29c:	fab5 f385 	clz	r3, r5
    e2a0:	fb09 0006 	mla	r0, r9, r6, r0
    e2a4:	095b      	lsrs	r3, r3, #5
    e2a6:	2201      	movs	r2, #1
    e2a8:	4621      	mov	r1, r4
    e2aa:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
    e2ac:	3601      	adds	r6, #1
    e2ae:	e7e0      	b.n	e272 <bt_mesh_model_foreach+0x32>
    e2b0:	20000f90 	.word	0x20000f90

0000e2b4 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
    e2b4:	6880      	ldr	r0, [r0, #8]
    e2b6:	b178      	cbz	r0, e2d8 <bt_mesh_model_pub_period_get+0x24>
	switch (mod->pub->period >> 6) {
    e2b8:	7a83      	ldrb	r3, [r0, #10]
    e2ba:	099a      	lsrs	r2, r3, #6
    e2bc:	2a02      	cmp	r2, #2
    e2be:	d012      	beq.n	e2e6 <bt_mesh_model_pub_period_get+0x32>
    e2c0:	2a03      	cmp	r2, #3
    e2c2:	d015      	beq.n	e2f0 <bt_mesh_model_pub_period_get+0x3c>
    e2c4:	2a01      	cmp	r2, #1
    e2c6:	d008      	beq.n	e2da <bt_mesh_model_pub_period_get+0x26>
		period = K_MSEC((mod->pub->period & BIT_MASK(6)) * 100);
    e2c8:	2264      	movs	r2, #100	; 0x64
    e2ca:	fb13 f302 	smulbb	r3, r3, r2
	return period >> mod->pub->period_div;
    e2ce:	7ac0      	ldrb	r0, [r0, #11]
    e2d0:	f000 000f 	and.w	r0, r0, #15
    e2d4:	fa43 f000 	asr.w	r0, r3, r0
}
    e2d8:	4770      	bx	lr
		period = K_SECONDS(mod->pub->period & BIT_MASK(6));
    e2da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e2de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
    e2e2:	4353      	muls	r3, r2
		break;
    e2e4:	e7f3      	b.n	e2ce <bt_mesh_model_pub_period_get+0x1a>
		period = K_SECONDS((mod->pub->period & BIT_MASK(6)) * 10);
    e2e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e2ea:	f242 7210 	movw	r2, #10000	; 0x2710
    e2ee:	e7f8      	b.n	e2e2 <bt_mesh_model_pub_period_get+0x2e>
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
    e2f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e2f4:	4a00      	ldr	r2, [pc, #0]	; (e2f8 <bt_mesh_model_pub_period_get+0x44>)
    e2f6:	e7f4      	b.n	e2e2 <bt_mesh_model_pub_period_get+0x2e>
    e2f8:	000927c0 	.word	0x000927c0

0000e2fc <publish_sent>:
{
    e2fc:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
    e2fe:	688e      	ldr	r6, [r1, #8]
    e300:	7af3      	ldrb	r3, [r6, #11]
    e302:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
    e306:	460d      	mov	r5, r1
	if (mod->pub->count) {
    e308:	d00b      	beq.n	e322 <publish_sent+0x26>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
    e30a:	7a72      	ldrb	r2, [r6, #9]
    e30c:	08d0      	lsrs	r0, r2, #3
    e30e:	2232      	movs	r2, #50	; 0x32
    e310:	fb00 2202 	mla	r2, r0, r2, r2
		k_delayed_work_submit(&mod->pub->timer, delay);
    e314:	68a9      	ldr	r1, [r5, #8]
    e316:	480b      	ldr	r0, [pc, #44]	; (e344 <publish_sent+0x48>)
    e318:	3118      	adds	r1, #24
}
    e31a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e31e:	f008 bedd 	b.w	170dc <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
    e322:	4608      	mov	r0, r1
    e324:	f7ff ffc6 	bl	e2b4 <bt_mesh_model_pub_period_get>
	if (!period) {
    e328:	4604      	mov	r4, r0
    e32a:	b140      	cbz	r0, e33e <publish_sent+0x42>
    e32c:	f011 fc4f 	bl	1fbce <z_impl_k_uptime_get_32>
	elapsed = k_uptime_get_32() - pub->period_start;
    e330:	68f2      	ldr	r2, [r6, #12]
    e332:	1a83      	subs	r3, r0, r2
	if (elapsed > period) {
    e334:	429c      	cmp	r4, r3
    e336:	d303      	bcc.n	e340 <publish_sent+0x44>
	return period - elapsed;
    e338:	4414      	add	r4, r2
	if (delay) {
    e33a:	1a22      	subs	r2, r4, r0
    e33c:	d1ea      	bne.n	e314 <publish_sent+0x18>
}
    e33e:	bd70      	pop	{r4, r5, r6, pc}
		return K_MSEC(1);
    e340:	2201      	movs	r2, #1
    e342:	e7e7      	b.n	e314 <publish_sent+0x18>
    e344:	20001fc8 	.word	0x20001fc8

0000e348 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
    e348:	4b03      	ldr	r3, [pc, #12]	; (e358 <bt_mesh_model_elem+0x10>)
    e34a:	7900      	ldrb	r0, [r0, #4]
    e34c:	681b      	ldr	r3, [r3, #0]
    e34e:	68db      	ldr	r3, [r3, #12]
}
    e350:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    e354:	4770      	bx	lr
    e356:	bf00      	nop
    e358:	20000f90 	.word	0x20000f90

0000e35c <bt_mesh_model_get>:
	if (elem_idx >= dev_comp->elem_count) {
    e35c:	4b0d      	ldr	r3, [pc, #52]	; (e394 <bt_mesh_model_get+0x38>)
    e35e:	681b      	ldr	r3, [r3, #0]
{
    e360:	b510      	push	{r4, lr}
	if (elem_idx >= dev_comp->elem_count) {
    e362:	689c      	ldr	r4, [r3, #8]
    e364:	42a1      	cmp	r1, r4
    e366:	d213      	bcs.n	e390 <bt_mesh_model_get+0x34>
	elem = &dev_comp->elem[elem_idx];
    e368:	68db      	ldr	r3, [r3, #12]
    e36a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	if (vnd) {
    e36e:	b140      	cbz	r0, e382 <bt_mesh_model_get+0x26>
		if (mod_idx >= elem->vnd_model_count) {
    e370:	794b      	ldrb	r3, [r1, #5]
    e372:	4293      	cmp	r3, r2
    e374:	d90c      	bls.n	e390 <bt_mesh_model_get+0x34>
		return &elem->vnd_models[mod_idx];
    e376:	68c8      	ldr	r0, [r1, #12]
    e378:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		return &elem->models[mod_idx];
    e37c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
}
    e380:	bd10      	pop	{r4, pc}
		if (mod_idx >= elem->model_count) {
    e382:	790b      	ldrb	r3, [r1, #4]
    e384:	4293      	cmp	r3, r2
    e386:	d9fb      	bls.n	e380 <bt_mesh_model_get+0x24>
		return &elem->models[mod_idx];
    e388:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e38c:	6888      	ldr	r0, [r1, #8]
    e38e:	e7f5      	b.n	e37c <bt_mesh_model_get+0x20>
		return NULL;
    e390:	2000      	movs	r0, #0
    e392:	e7f5      	b.n	e380 <bt_mesh_model_get+0x24>
    e394:	20000f90 	.word	0x20000f90

0000e398 <bt_mesh_comp_register>:

int bt_mesh_comp_register(const struct bt_mesh_comp *comp)
{
    e398:	b508      	push	{r3, lr}
	/* There must be at least one element */
	if (!comp->elem_count) {
    e39a:	6883      	ldr	r3, [r0, #8]
    e39c:	b13b      	cbz	r3, e3ae <bt_mesh_comp_register+0x16>
		return -EINVAL;
	}

	dev_comp = comp;
    e39e:	4b05      	ldr	r3, [pc, #20]	; (e3b4 <bt_mesh_comp_register+0x1c>)

	bt_mesh_model_foreach(mod_init, NULL);
    e3a0:	2100      	movs	r1, #0
	dev_comp = comp;
    e3a2:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    e3a4:	4804      	ldr	r0, [pc, #16]	; (e3b8 <bt_mesh_comp_register+0x20>)
    e3a6:	f7ff ff4b 	bl	e240 <bt_mesh_model_foreach>

	return 0;
    e3aa:	2000      	movs	r0, #0
}
    e3ac:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e3ae:	f06f 0015 	mvn.w	r0, #21
    e3b2:	e7fb      	b.n	e3ac <bt_mesh_comp_register+0x14>
    e3b4:	20000f90 	.word	0x20000f90
    e3b8:	0000e1d1 	.word	0x0000e1d1

0000e3bc <bt_mesh_comp_provision>:

void bt_mesh_comp_provision(u16_t addr)
{
	int i;

	dev_primary_addr = addr;
    e3bc:	4b08      	ldr	r3, [pc, #32]	; (e3e0 <bt_mesh_comp_provision+0x24>)
{
    e3be:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    e3c0:	8018      	strh	r0, [r3, #0]

	BT_DBG("addr 0x%04x elem_count %zu", addr, dev_comp->elem_count);

	for (i = 0; i < dev_comp->elem_count; i++) {
    e3c2:	4b08      	ldr	r3, [pc, #32]	; (e3e4 <bt_mesh_comp_provision+0x28>)
    e3c4:	6819      	ldr	r1, [r3, #0]
    e3c6:	688c      	ldr	r4, [r1, #8]
    e3c8:	2300      	movs	r3, #0
    e3ca:	18c2      	adds	r2, r0, r3
    e3cc:	42a3      	cmp	r3, r4
    e3ce:	b292      	uxth	r2, r2
    e3d0:	d100      	bne.n	e3d4 <bt_mesh_comp_provision+0x18>
		elem->addr = addr++;

		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
		       elem->addr, elem->model_count, elem->vnd_model_count);
	}
}
    e3d2:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    e3d4:	011d      	lsls	r5, r3, #4
    e3d6:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    e3d8:	3301      	adds	r3, #1
		elem->addr = addr++;
    e3da:	5372      	strh	r2, [r6, r5]
		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
    e3dc:	e7f5      	b.n	e3ca <bt_mesh_comp_provision+0xe>
    e3de:	bf00      	nop
    e3e0:	20002054 	.word	0x20002054
    e3e4:	20000f90 	.word	0x20000f90

0000e3e8 <bt_mesh_comp_unprovision>:

void bt_mesh_comp_unprovision(void)
{
	BT_DBG("");

	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    e3e8:	4b02      	ldr	r3, [pc, #8]	; (e3f4 <bt_mesh_comp_unprovision+0xc>)

	bt_mesh_model_foreach(mod_init, NULL);
    e3ea:	4803      	ldr	r0, [pc, #12]	; (e3f8 <bt_mesh_comp_unprovision+0x10>)
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    e3ec:	2100      	movs	r1, #0
    e3ee:	8019      	strh	r1, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    e3f0:	f7ff bf26 	b.w	e240 <bt_mesh_model_foreach>
    e3f4:	20002054 	.word	0x20002054
    e3f8:	0000e1d1 	.word	0x0000e1d1

0000e3fc <bt_mesh_primary_addr>:
}

u16_t bt_mesh_primary_addr(void)
{
	return dev_primary_addr;
}
    e3fc:	4b01      	ldr	r3, [pc, #4]	; (e404 <bt_mesh_primary_addr+0x8>)
    e3fe:	8818      	ldrh	r0, [r3, #0]
    e400:	4770      	bx	lr
    e402:	bf00      	nop
    e404:	20002054 	.word	0x20002054

0000e408 <bt_mesh_elem_find>:

struct bt_mesh_elem *bt_mesh_elem_find(u16_t addr)
{
	int i;

	for (i = 0; i < dev_comp->elem_count; i++) {
    e408:	4b1e      	ldr	r3, [pc, #120]	; (e484 <bt_mesh_elem_find+0x7c>)
{
    e40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    e40e:	681d      	ldr	r5, [r3, #0]
    e410:	68af      	ldr	r7, [r5, #8]
    e412:	2200      	movs	r2, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];

		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    e414:	f480 4c00 	eor.w	ip, r0, #32768	; 0x8000
		model = &elem->models[i];
    e418:	261c      	movs	r6, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
    e41a:	42ba      	cmp	r2, r7
    e41c:	d101      	bne.n	e422 <bt_mesh_elem_find+0x1a>
		} else if (elem->addr == addr) {
			return elem;
		}
	}

	return NULL;
    e41e:	2300      	movs	r3, #0
    e420:	e02d      	b.n	e47e <bt_mesh_elem_find+0x76>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e422:	68ec      	ldr	r4, [r5, #12]
    e424:	0111      	lsls	r1, r2, #4
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    e426:	f5bc 4ffe 	cmp.w	ip, #32512	; 0x7f00
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e42a:	eb04 0301 	add.w	r3, r4, r1
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    e42e:	d823      	bhi.n	e478 <bt_mesh_elem_find+0x70>
	for (i = 0; i < elem->model_count; i++) {
    e430:	f893 e004 	ldrb.w	lr, [r3, #4]
    e434:	2100      	movs	r1, #0
    e436:	4571      	cmp	r1, lr
    e438:	db06      	blt.n	e448 <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
    e43a:	f893 e005 	ldrb.w	lr, [r3, #5]
    e43e:	2100      	movs	r1, #0
    e440:	4571      	cmp	r1, lr
    e442:	db0d      	blt.n	e460 <bt_mesh_elem_find+0x58>
	for (i = 0; i < dev_comp->elem_count; i++) {
    e444:	3201      	adds	r2, #1
    e446:	e7e8      	b.n	e41a <bt_mesh_elem_find+0x12>
		model = &elem->models[i];
    e448:	689c      	ldr	r4, [r3, #8]
    e44a:	fb06 4401 	mla	r4, r6, r1, r4
		if (mod->groups[i] == addr) {
    e44e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
    e452:	4580      	cmp	r8, r0
    e454:	d013      	beq.n	e47e <bt_mesh_elem_find+0x76>
    e456:	8a24      	ldrh	r4, [r4, #16]
    e458:	4284      	cmp	r4, r0
    e45a:	d010      	beq.n	e47e <bt_mesh_elem_find+0x76>
	for (i = 0; i < elem->model_count; i++) {
    e45c:	3101      	adds	r1, #1
    e45e:	e7ea      	b.n	e436 <bt_mesh_elem_find+0x2e>
		model = &elem->vnd_models[i];
    e460:	68dc      	ldr	r4, [r3, #12]
    e462:	fb06 4401 	mla	r4, r6, r1, r4
		if (mod->groups[i] == addr) {
    e466:	f8b4 800e 	ldrh.w	r8, [r4, #14]
    e46a:	4580      	cmp	r8, r0
    e46c:	d007      	beq.n	e47e <bt_mesh_elem_find+0x76>
    e46e:	8a24      	ldrh	r4, [r4, #16]
    e470:	4284      	cmp	r4, r0
    e472:	d004      	beq.n	e47e <bt_mesh_elem_find+0x76>
	for (i = 0; i < elem->vnd_model_count; i++) {
    e474:	3101      	adds	r1, #1
    e476:	e7e3      	b.n	e440 <bt_mesh_elem_find+0x38>
		} else if (elem->addr == addr) {
    e478:	5a61      	ldrh	r1, [r4, r1]
    e47a:	4281      	cmp	r1, r0
    e47c:	d1e2      	bne.n	e444 <bt_mesh_elem_find+0x3c>
}
    e47e:	4618      	mov	r0, r3
    e480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e484:	20000f90 	.word	0x20000f90

0000e488 <bt_mesh_elem_count>:

u8_t bt_mesh_elem_count(void)
{
	return dev_comp->elem_count;
    e488:	4b01      	ldr	r3, [pc, #4]	; (e490 <bt_mesh_elem_count+0x8>)
    e48a:	681b      	ldr	r3, [r3, #0]
}
    e48c:	7a18      	ldrb	r0, [r3, #8]
    e48e:	4770      	bx	lr
    e490:	20000f90 	.word	0x20000f90

0000e494 <bt_mesh_model_recv>:
		return false;
	}
}

void bt_mesh_model_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
    e494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    e498:	680b      	ldr	r3, [r1, #0]
    e49a:	781b      	ldrb	r3, [r3, #0]
    e49c:	099a      	lsrs	r2, r3, #6
    e49e:	2a02      	cmp	r2, #2
{
    e4a0:	4681      	mov	r9, r0
    e4a2:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
    e4a4:	d013      	beq.n	e4ce <bt_mesh_model_recv+0x3a>
    e4a6:	2a03      	cmp	r2, #3
    e4a8:	d018      	beq.n	e4dc <bt_mesh_model_recv+0x48>
		if (buf->data[0] == 0x7f) {
    e4aa:	2b7f      	cmp	r3, #127	; 0x7f
    e4ac:	d00c      	beq.n	e4c8 <bt_mesh_model_recv+0x34>
		*opcode = net_buf_simple_pull_u8(buf);
    e4ae:	4608      	mov	r0, r1
    e4b0:	f010 feaf 	bl	1f212 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    e4b4:	4607      	mov	r7, r0
		} else {
			models = elem->vnd_models;
			count = elem->vnd_model_count;
		}

		op = find_op(models, count, rx->ctx.recv_dst, rx->ctx.app_idx,
    e4b6:	f04f 0800 	mov.w	r8, #0
			/* The callback will likely parse the buffer, so
			 * store the parsing state in case multiple models
			 * receive the message.
			 */
			net_buf_simple_save(buf, &state);
			op->func(model, &rx->ctx, buf);
    e4ba:	f109 0b04 	add.w	fp, r9, #4
	for (i = 0; i < dev_comp->elem_count; i++) {
    e4be:	4b3c      	ldr	r3, [pc, #240]	; (e5b0 <bt_mesh_model_recv+0x11c>)
    e4c0:	681b      	ldr	r3, [r3, #0]
    e4c2:	689a      	ldr	r2, [r3, #8]
    e4c4:	4542      	cmp	r2, r8
    e4c6:	d816      	bhi.n	e4f6 <bt_mesh_model_recv+0x62>

		} else {
			BT_DBG("No OpCode 0x%08x for elem %d", opcode, i);
		}
	}
}
    e4c8:	b003      	add	sp, #12
    e4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    e4ce:	888b      	ldrh	r3, [r1, #4]
    e4d0:	2b01      	cmp	r3, #1
    e4d2:	d9f9      	bls.n	e4c8 <bt_mesh_model_recv+0x34>
		*opcode = net_buf_simple_pull_be16(buf);
    e4d4:	4608      	mov	r0, r1
    e4d6:	f010 feac 	bl	1f232 <net_buf_simple_pull_be16>
    e4da:	e7eb      	b.n	e4b4 <bt_mesh_model_recv+0x20>
		if (buf->len < 3) {
    e4dc:	888b      	ldrh	r3, [r1, #4]
    e4de:	2b02      	cmp	r3, #2
    e4e0:	d9f2      	bls.n	e4c8 <bt_mesh_model_recv+0x34>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    e4e2:	4608      	mov	r0, r1
    e4e4:	f010 fe95 	bl	1f212 <net_buf_simple_pull_u8>
    e4e8:	4607      	mov	r7, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    e4ea:	4620      	mov	r0, r4
    e4ec:	f010 fe99 	bl	1f222 <net_buf_simple_pull_le16>
    e4f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
		return 0;
    e4f4:	e7df      	b.n	e4b6 <bt_mesh_model_recv+0x22>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    e4f6:	f8b9 000a 	ldrh.w	r0, [r9, #10]
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e4fa:	68db      	ldr	r3, [r3, #12]
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    e4fc:	b201      	sxth	r1, r0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e4fe:	ea4f 1208 	mov.w	r2, r8, lsl #4
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    e502:	2900      	cmp	r1, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    e504:	eb03 0602 	add.w	r6, r3, r2
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    e508:	dd09      	ble.n	e51e <bt_mesh_model_recv+0x8a>
			if (elem->addr != rx->ctx.recv_dst) {
    e50a:	5a9b      	ldrh	r3, [r3, r2]
    e50c:	4283      	cmp	r3, r0
    e50e:	d112      	bne.n	e536 <bt_mesh_model_recv+0xa2>
		if (opcode < 0x10000) {
    e510:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
			models = elem->vnd_models;
    e514:	e9d6 3502 	ldrd	r3, r5, [r6, #8]
		if (opcode < 0x10000) {
    e518:	d310      	bcc.n	e53c <bt_mesh_model_recv+0xa8>
			count = elem->vnd_model_count;
    e51a:	7970      	ldrb	r0, [r6, #5]
    e51c:	e010      	b.n	e540 <bt_mesh_model_recv+0xac>
		} else if (BT_MESH_ADDR_IS_GROUP(rx->ctx.recv_dst) ||
    e51e:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    e522:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
    e526:	d9f3      	bls.n	e510 <bt_mesh_model_recv+0x7c>
		} else if (i != 0 ||
    e528:	f1b8 0f00 	cmp.w	r8, #0
    e52c:	d103      	bne.n	e536 <bt_mesh_model_recv+0xa2>
			   !bt_mesh_fixed_group_match(rx->ctx.recv_dst)) {
    e52e:	f00d ff6e 	bl	1c40e <bt_mesh_fixed_group_match>
		} else if (i != 0 ||
    e532:	2800      	cmp	r0, #0
    e534:	d1ec      	bne.n	e510 <bt_mesh_model_recv+0x7c>
	for (i = 0; i < dev_comp->elem_count; i++) {
    e536:	f108 0801 	add.w	r8, r8, #1
    e53a:	e7c0      	b.n	e4be <bt_mesh_model_recv+0x2a>
			count = elem->model_count;
    e53c:	7930      	ldrb	r0, [r6, #4]
			models = elem->models;
    e53e:	461d      	mov	r5, r3
		op = find_op(models, count, rx->ctx.recv_dst, rx->ctx.app_idx,
    e540:	f8b9 100a 	ldrh.w	r1, [r9, #10]
    e544:	f8b9 c006 	ldrh.w	ip, [r9, #6]
    e548:	2300      	movs	r3, #0
		if (BT_MESH_ADDR_IS_GROUP(dst) ||
    e54a:	f481 4e00 	eor.w	lr, r1, #32768	; 0x8000
	for (i = 0U; i < model_count; i++) {
    e54e:	b2da      	uxtb	r2, r3
    e550:	4290      	cmp	r0, r2
    e552:	d9f0      	bls.n	e536 <bt_mesh_model_recv+0xa2>
		if (BT_MESH_ADDR_IS_GROUP(dst) ||
    e554:	f5be 4ffe 	cmp.w	lr, #32512	; 0x7f00
    e558:	d805      	bhi.n	e566 <bt_mesh_model_recv+0xd2>
		if (mod->groups[i] == addr) {
    e55a:	89ea      	ldrh	r2, [r5, #14]
    e55c:	428a      	cmp	r2, r1
    e55e:	d002      	beq.n	e566 <bt_mesh_model_recv+0xd2>
    e560:	8a2a      	ldrh	r2, [r5, #16]
    e562:	428a      	cmp	r2, r1
    e564:	d105      	bne.n	e572 <bt_mesh_model_recv+0xde>
		if (mod->keys[i] == key) {
    e566:	89aa      	ldrh	r2, [r5, #12]
    e568:	4562      	cmp	r2, ip
    e56a:	d102      	bne.n	e572 <bt_mesh_model_recv+0xde>
		for (op = (*model)->op; op->func; op++) {
    e56c:	696e      	ldr	r6, [r5, #20]
    e56e:	68b2      	ldr	r2, [r6, #8]
    e570:	b912      	cbnz	r2, e578 <bt_mesh_model_recv+0xe4>
    e572:	3301      	adds	r3, #1
    e574:	351c      	adds	r5, #28
    e576:	e7ea      	b.n	e54e <bt_mesh_model_recv+0xba>
			if (op->opcode == opcode) {
    e578:	6832      	ldr	r2, [r6, #0]
    e57a:	42ba      	cmp	r2, r7
    e57c:	d001      	beq.n	e582 <bt_mesh_model_recv+0xee>
		for (op = (*model)->op; op->func; op++) {
    e57e:	360c      	adds	r6, #12
    e580:	e7f5      	b.n	e56e <bt_mesh_model_recv+0xda>
			if (buf->len < op->min_len) {
    e582:	88a2      	ldrh	r2, [r4, #4]
    e584:	6873      	ldr	r3, [r6, #4]
    e586:	429a      	cmp	r2, r3
    e588:	d3d5      	bcc.n	e536 <bt_mesh_model_recv+0xa2>
	state->offset = net_buf_simple_headroom(buf);
    e58a:	4620      	mov	r0, r4
    e58c:	f010 fe6d 	bl	1f26a <net_buf_simple_headroom>
	state->len = buf->len;
    e590:	88a3      	ldrh	r3, [r4, #4]
			op->func(model, &rx->ctx, buf);
    e592:	68b6      	ldr	r6, [r6, #8]
    e594:	9301      	str	r3, [sp, #4]
	state->offset = net_buf_simple_headroom(buf);
    e596:	4682      	mov	sl, r0
    e598:	4622      	mov	r2, r4
    e59a:	4659      	mov	r1, fp
    e59c:	4628      	mov	r0, r5
    e59e:	47b0      	blx	r6
	buf->data = buf->__buf + state->offset;
    e5a0:	68a2      	ldr	r2, [r4, #8]
	buf->len = state->len;
    e5a2:	9b01      	ldr	r3, [sp, #4]
    e5a4:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf + state->offset;
    e5a6:	fa12 f28a 	uxtah	r2, r2, sl
    e5aa:	6022      	str	r2, [r4, #0]
	buf->len = state->len;
    e5ac:	e7c3      	b.n	e536 <bt_mesh_model_recv+0xa2>
    e5ae:	bf00      	nop
    e5b0:	20000f90 	.word	0x20000f90

0000e5b4 <bt_mesh_model_publish>:

	return model_send(model, &tx, false, msg, cb, cb_data);
}

int bt_mesh_model_publish(struct bt_mesh_model *model)
{
    e5b4:	b570      	push	{r4, r5, r6, lr}
    e5b6:	b09c      	sub	sp, #112	; 0x70
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    e5b8:	ab0a      	add	r3, sp, #40	; 0x28
    e5ba:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
    e5be:	e9cd 2305 	strd	r2, r3, [sp, #20]
    e5c2:	9304      	str	r3, [sp, #16]
	struct bt_mesh_model_pub *pub = model->pub;
	struct bt_mesh_app_key *key;
	struct bt_mesh_msg_ctx ctx = {
    e5c4:	aa01      	add	r2, sp, #4
    e5c6:	2300      	movs	r3, #0
	};
	struct bt_mesh_net_tx tx = {
    e5c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
	struct bt_mesh_model_pub *pub = model->pub;
    e5cc:	6884      	ldr	r4, [r0, #8]
	struct bt_mesh_msg_ctx ctx = {
    e5ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    e5d2:	e9cd 3301 	strd	r3, r3, [sp, #4]
	struct bt_mesh_net_tx tx = {
    e5d6:	9307      	str	r3, [sp, #28]
{
    e5d8:	4606      	mov	r6, r0
		.ctx = &ctx,
		.src = bt_mesh_model_elem(model)->addr,
    e5da:	f7ff feb5 	bl	e348 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    e5de:	8803      	ldrh	r3, [r0, #0]
    e5e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    e5e4:	f000 fc64 	bl	eeb0 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    e5e8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};
	int err;

	BT_DBG("");

	if (!pub) {
    e5ec:	2c00      	cmp	r4, #0
    e5ee:	d063      	beq.n	e6b8 <bt_mesh_model_publish+0x104>
		return -ENOTSUP;
	}

	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    e5f0:	88a3      	ldrh	r3, [r4, #4]
    e5f2:	b923      	cbnz	r3, e5fe <bt_mesh_model_publish+0x4a>
		return -EADDRNOTAVAIL;
    e5f4:	f06f 0530 	mvn.w	r5, #48	; 0x30
		publish_sent(err, model);
		return err;
	}

	return 0;
}
    e5f8:	4628      	mov	r0, r5
    e5fa:	b01c      	add	sp, #112	; 0x70
    e5fc:	bd70      	pop	{r4, r5, r6, pc}
	key = bt_mesh_app_key_find(pub->key);
    e5fe:	88e0      	ldrh	r0, [r4, #6]
    e600:	f7ff f956 	bl	d8b0 <bt_mesh_app_key_find>
	if (!key) {
    e604:	4605      	mov	r5, r0
    e606:	2800      	cmp	r0, #0
    e608:	d0f4      	beq.n	e5f4 <bt_mesh_model_publish+0x40>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
    e60a:	6923      	ldr	r3, [r4, #16]
    e60c:	889b      	ldrh	r3, [r3, #4]
    e60e:	3304      	adds	r3, #4
    e610:	2b48      	cmp	r3, #72	; 0x48
    e612:	dc54      	bgt.n	e6be <bt_mesh_model_publish+0x10a>
	if (pub->count) {
    e614:	7ae3      	ldrb	r3, [r4, #11]
    e616:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    e61a:	d003      	beq.n	e624 <bt_mesh_model_publish+0x70>
		k_delayed_work_cancel(&pub->timer);
    e61c:	f104 0018 	add.w	r0, r4, #24
    e620:	f011 fa84 	bl	1fb2c <k_delayed_work_cancel>
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    e624:	6923      	ldr	r3, [r4, #16]
    e626:	a804      	add	r0, sp, #16
    e628:	889a      	ldrh	r2, [r3, #4]
    e62a:	6819      	ldr	r1, [r3, #0]
    e62c:	f010 fd6c 	bl	1f108 <net_buf_simple_add_mem>
	ctx.addr = pub->addr;
    e630:	88a3      	ldrh	r3, [r4, #4]
    e632:	f8ad 3008 	strh.w	r3, [sp, #8]
	ctx.send_ttl = pub->ttl;
    e636:	7a23      	ldrb	r3, [r4, #8]
    e638:	f88d 300d 	strb.w	r3, [sp, #13]
	ctx.app_idx = key->app_idx;
    e63c:	886b      	ldrh	r3, [r5, #2]
	ctx.net_idx = key->net_idx;
    e63e:	8828      	ldrh	r0, [r5, #0]
	ctx.app_idx = key->app_idx;
    e640:	f8ad 3006 	strh.w	r3, [sp, #6]
	tx.friend_cred = pub->cred;
    e644:	7ae3      	ldrb	r3, [r4, #11]
    e646:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
	ctx.net_idx = key->net_idx;
    e64a:	f8ad 0004 	strh.w	r0, [sp, #4]
	tx.friend_cred = pub->cred;
    e64e:	f3c3 1300 	ubfx	r3, r3, #4, #1
    e652:	f363 0200 	bfi	r2, r3, #0, #1
    e656:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    e65a:	f7fe f827 	bl	c6ac <bt_mesh_subnet_get>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    e65e:	7ae3      	ldrb	r3, [r4, #11]
    e660:	7a62      	ldrb	r2, [r4, #9]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    e662:	9007      	str	r0, [sp, #28]
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    e664:	f362 1347 	bfi	r3, r2, #5, #3
    e668:	72e3      	strb	r3, [r4, #11]
	if (!bt_mesh_is_provisioned()) {
    e66a:	f00d f880 	bl	1b76e <bt_mesh_is_provisioned>
    e66e:	b1d0      	cbz	r0, e6a6 <bt_mesh_model_publish+0xf2>
	if (net_buf_simple_tailroom(msg) < 4) {
    e670:	a804      	add	r0, sp, #16
    e672:	f010 fdfe 	bl	1f272 <net_buf_simple_tailroom>
    e676:	2803      	cmp	r0, #3
    e678:	d918      	bls.n	e6ac <bt_mesh_model_publish+0xf8>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
    e67a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e67e:	2b44      	cmp	r3, #68	; 0x44
    e680:	d817      	bhi.n	e6b2 <bt_mesh_model_publish+0xfe>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    e682:	4633      	mov	r3, r6
    e684:	4a0f      	ldr	r2, [pc, #60]	; (e6c4 <bt_mesh_model_publish+0x110>)
    e686:	a904      	add	r1, sp, #16
    e688:	a807      	add	r0, sp, #28
    e68a:	f7ff f935 	bl	d8f8 <bt_mesh_trans_send>
	if (err) {
    e68e:	4605      	mov	r5, r0
    e690:	2800      	cmp	r0, #0
    e692:	d0b1      	beq.n	e5f8 <bt_mesh_model_publish+0x44>
		pub->count = 0;
    e694:	7ae3      	ldrb	r3, [r4, #11]
    e696:	f36f 1347 	bfc	r3, #5, #3
    e69a:	72e3      	strb	r3, [r4, #11]
		publish_sent(err, model);
    e69c:	4631      	mov	r1, r6
    e69e:	4628      	mov	r0, r5
    e6a0:	f7ff fe2c 	bl	e2fc <publish_sent>
		return err;
    e6a4:	e7a8      	b.n	e5f8 <bt_mesh_model_publish+0x44>
		return -EAGAIN;
    e6a6:	f06f 050a 	mvn.w	r5, #10
    e6aa:	e7f3      	b.n	e694 <bt_mesh_model_publish+0xe0>
		return -EINVAL;
    e6ac:	f06f 0515 	mvn.w	r5, #21
    e6b0:	e7f0      	b.n	e694 <bt_mesh_model_publish+0xe0>
		return -EMSGSIZE;
    e6b2:	f06f 0523 	mvn.w	r5, #35	; 0x23
    e6b6:	e7ed      	b.n	e694 <bt_mesh_model_publish+0xe0>
		return -ENOTSUP;
    e6b8:	f06f 0522 	mvn.w	r5, #34	; 0x22
    e6bc:	e79c      	b.n	e5f8 <bt_mesh_model_publish+0x44>
		return -EMSGSIZE;
    e6be:	f06f 0523 	mvn.w	r5, #35	; 0x23
    e6c2:	e799      	b.n	e5f8 <bt_mesh_model_publish+0x44>
    e6c4:	00020754 	.word	0x00020754

0000e6c8 <mod_publish>:
{
    e6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    e6cc:	f850 6c18 	ldr.w	r6, [r0, #-24]
{
    e6d0:	4604      	mov	r4, r0
    e6d2:	b09c      	sub	sp, #112	; 0x70
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    e6d4:	4630      	mov	r0, r6
    e6d6:	f7ff fded 	bl	e2b4 <bt_mesh_model_pub_period_get>
	if (pub->count) {
    e6da:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    e6de:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    e6e2:	4680      	mov	r8, r0
	if (pub->count) {
    e6e4:	d058      	beq.n	e798 <mod_publish+0xd0>
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    e6e6:	ab0a      	add	r3, sp, #40	; 0x28
    e6e8:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
    e6ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
    e6f0:	9304      	str	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
    e6f2:	2300      	movs	r3, #0
	struct bt_mesh_model_pub *pub = mod->pub;
    e6f4:	68b5      	ldr	r5, [r6, #8]
	struct bt_mesh_msg_ctx ctx = {
    e6f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    e6fa:	e9cd 3301 	strd	r3, r3, [sp, #4]
    e6fe:	88a9      	ldrh	r1, [r5, #4]
    e700:	f8ad 1008 	strh.w	r1, [sp, #8]
    e704:	aa01      	add	r2, sp, #4
    e706:	7a29      	ldrb	r1, [r5, #8]
    e708:	f88d 100d 	strb.w	r1, [sp, #13]
		.src = bt_mesh_model_elem(mod)->addr,
    e70c:	4630      	mov	r0, r6
	struct bt_mesh_net_tx tx = {
    e70e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    e712:	9307      	str	r3, [sp, #28]
		.src = bt_mesh_model_elem(mod)->addr,
    e714:	f7ff fe18 	bl	e348 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    e718:	8803      	ldrh	r3, [r0, #0]
    e71a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    e71e:	f000 fbc7 	bl	eeb0 <bt_mesh_net_transmit_get>
		.friend_cred = pub->cred,
    e722:	7aeb      	ldrb	r3, [r5, #11]
	struct bt_mesh_net_tx tx = {
    e724:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    e728:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.friend_cred = pub->cred,
    e72c:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
    e730:	f363 0200 	bfi	r2, r3, #0, #1
	key = bt_mesh_app_key_find(pub->key);
    e734:	88e8      	ldrh	r0, [r5, #6]
	struct bt_mesh_net_tx tx = {
    e736:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	key = bt_mesh_app_key_find(pub->key);
    e73a:	f7ff f8b9 	bl	d8b0 <bt_mesh_app_key_find>
	if (!key) {
    e73e:	4607      	mov	r7, r0
    e740:	b1c8      	cbz	r0, e776 <mod_publish+0xae>
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    e742:	8800      	ldrh	r0, [r0, #0]
    e744:	f7fd ffb2 	bl	c6ac <bt_mesh_subnet_get>
	ctx.net_idx = key->net_idx;
    e748:	883b      	ldrh	r3, [r7, #0]
    e74a:	f8ad 3004 	strh.w	r3, [sp, #4]
	ctx.app_idx = key->app_idx;
    e74e:	887b      	ldrh	r3, [r7, #2]
    e750:	f8ad 3006 	strh.w	r3, [sp, #6]
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    e754:	692b      	ldr	r3, [r5, #16]
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    e756:	9007      	str	r0, [sp, #28]
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    e758:	889a      	ldrh	r2, [r3, #4]
    e75a:	6819      	ldr	r1, [r3, #0]
    e75c:	a804      	add	r0, sp, #16
    e75e:	f010 fcd3 	bl	1f108 <net_buf_simple_add_mem>
	pub->count--;
    e762:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    e764:	4a19      	ldr	r2, [pc, #100]	; (e7cc <mod_publish+0x104>)
	pub->count--;
    e766:	33e0      	adds	r3, #224	; 0xe0
    e768:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    e76a:	a904      	add	r1, sp, #16
    e76c:	4633      	mov	r3, r6
    e76e:	a807      	add	r0, sp, #28
    e770:	f7ff f8c2 	bl	d8f8 <bt_mesh_trans_send>
		if (err) {
    e774:	b168      	cbz	r0, e792 <mod_publish+0xca>
			pub->count = 0;
    e776:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    e77a:	f36f 1347 	bfc	r3, #5, #3
    e77e:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
    e782:	f1b8 0f00 	cmp.w	r8, #0
    e786:	d004      	beq.n	e792 <mod_publish+0xca>
    e788:	4642      	mov	r2, r8
    e78a:	4621      	mov	r1, r4
    e78c:	4810      	ldr	r0, [pc, #64]	; (e7d0 <mod_publish+0x108>)
    e78e:	f008 fca5 	bl	170dc <k_delayed_work_submit_to_queue>
}
    e792:	b01c      	add	sp, #112	; 0x70
    e794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!period_ms) {
    e798:	2800      	cmp	r0, #0
    e79a:	d0fa      	beq.n	e792 <mod_publish+0xca>
    e79c:	f011 fa17 	bl	1fbce <z_impl_k_uptime_get_32>
	err = pub->update(pub->mod);
    e7a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
	pub->period_start = k_uptime_get_32();
    e7a4:	f844 0c0c 	str.w	r0, [r4, #-12]
	err = pub->update(pub->mod);
    e7a8:	f854 0c18 	ldr.w	r0, [r4, #-24]
    e7ac:	4798      	blx	r3
	if (err) {
    e7ae:	2800      	cmp	r0, #0
    e7b0:	d1ef      	bne.n	e792 <mod_publish+0xca>
	err = bt_mesh_model_publish(pub->mod);
    e7b2:	f854 0c18 	ldr.w	r0, [r4, #-24]
    e7b6:	f7ff fefd 	bl	e5b4 <bt_mesh_model_publish>
	if (pub->count) {
    e7ba:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    e7be:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    e7c2:	d0e6      	beq.n	e792 <mod_publish+0xca>
		k_delayed_work_cancel(&pub->timer);
    e7c4:	4620      	mov	r0, r4
    e7c6:	f011 f9b1 	bl	1fb2c <k_delayed_work_cancel>
    e7ca:	e7e2      	b.n	e792 <mod_publish+0xca>
    e7cc:	00020754 	.word	0x00020754
    e7d0:	20001fc8 	.word	0x20001fc8

0000e7d4 <bt_mesh_comp_get>:
}

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
    e7d4:	4b01      	ldr	r3, [pc, #4]	; (e7dc <bt_mesh_comp_get+0x8>)
    e7d6:	6818      	ldr	r0, [r3, #0]
    e7d8:	4770      	bx	lr
    e7da:	bf00      	nop
    e7dc:	20000f90 	.word	0x20000f90

0000e7e0 <app_key_is_valid>:
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    e7e0:	4b0d      	ldr	r3, [pc, #52]	; (e818 <app_key_is_valid+0x38>)
    e7e2:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
    e7e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e7ea:	4291      	cmp	r1, r2
    e7ec:	461a      	mov	r2, r3
    e7ee:	d003      	beq.n	e7f8 <app_key_is_valid+0x18>
    e7f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    e7f4:	4283      	cmp	r3, r0
    e7f6:	d00b      	beq.n	e810 <app_key_is_valid+0x30>
    e7f8:	f8b2 107c 	ldrh.w	r1, [r2, #124]	; 0x7c
    e7fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e800:	4299      	cmp	r1, r3
    e802:	d007      	beq.n	e814 <app_key_is_valid+0x34>
    e804:	f8b2 307e 	ldrh.w	r3, [r2, #126]	; 0x7e
    e808:	1a1b      	subs	r3, r3, r0
    e80a:	4258      	negs	r0, r3
    e80c:	4158      	adcs	r0, r3
    e80e:	4770      	bx	lr
		    key->app_idx == app_idx) {
			return true;
    e810:	2001      	movs	r0, #1
    e812:	4770      	bx	lr
		}
	}

	return false;
    e814:	2000      	movs	r0, #0
}
    e816:	4770      	bx	lr
    e818:	2000885c 	.word	0x2000885c

0000e81c <_mod_pub_set>:

static u8_t _mod_pub_set(struct bt_mesh_model *model, u16_t pub_addr,
			 u16_t app_idx, u8_t cred_flag, u8_t ttl, u8_t period,
			 u8_t retransmit, bool store)
{
    e81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e820:	4605      	mov	r5, r0
	if (!model->pub) {
    e822:	6880      	ldr	r0, [r0, #8]
{
    e824:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
    e828:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
    e82c:	460e      	mov	r6, r1
    e82e:	4691      	mov	r9, r2
    e830:	461c      	mov	r4, r3
	if (!model->pub) {
    e832:	2800      	cmp	r0, #0
    e834:	d040      	beq.n	e8b8 <_mod_pub_set+0x9c>
		return STATUS_NVAL_PUB_PARAM;
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
    e836:	2b00      	cmp	r3, #0
    e838:	d13c      	bne.n	e8b4 <_mod_pub_set+0x98>
		return STATUS_FEAT_NOT_SUPP;
	}

	if (!model->pub->update && period) {
    e83a:	6942      	ldr	r2, [r0, #20]
    e83c:	b912      	cbnz	r2, e844 <_mod_pub_set+0x28>
    e83e:	f1b8 0f00 	cmp.w	r8, #0
    e842:	d139      	bne.n	e8b8 <_mod_pub_set+0x9c>
		return STATUS_NVAL_PUB_PARAM;
	}

	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
    e844:	b98e      	cbnz	r6, e86a <_mod_pub_set+0x4e>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    e846:	8883      	ldrh	r3, [r0, #4]
    e848:	b163      	cbz	r3, e864 <_mod_pub_set+0x48>
		}

		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
		model->pub->key = 0;
		model->pub->cred = 0;
		model->pub->ttl = 0;
    e84a:	6883      	ldr	r3, [r0, #8]
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    e84c:	6046      	str	r6, [r0, #4]
		model->pub->ttl = 0;
    e84e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    e852:	6083      	str	r3, [r0, #8]
		model->pub->period = 0;
		model->pub->retransmit = 0;
		model->pub->count = 0;

		if (model->pub->update) {
    e854:	b112      	cbz	r2, e85c <_mod_pub_set+0x40>
			k_delayed_work_cancel(&model->pub->timer);
    e856:	3018      	adds	r0, #24
    e858:	f011 f968 	bl	1fb2c <k_delayed_work_cancel>
		}

		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    e85c:	b117      	cbz	r7, e864 <_mod_pub_set+0x48>
			bt_mesh_store_mod_pub(model);
    e85e:	4628      	mov	r0, r5
    e860:	f00f fcf5 	bl	1e24e <bt_mesh_store_mod_pub>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
		bt_mesh_store_mod_pub(model);
	}

	return STATUS_SUCCESS;
}
    e864:	4620      	mov	r0, r4
    e866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!bt_mesh_app_key_find(app_idx)) {
    e86a:	4648      	mov	r0, r9
    e86c:	f7ff f820 	bl	d8b0 <bt_mesh_app_key_find>
    e870:	b320      	cbz	r0, e8bc <_mod_pub_set+0xa0>
	model->pub->addr = pub_addr;
    e872:	68ab      	ldr	r3, [r5, #8]
	model->pub->cred = cred_flag;
    e874:	7ada      	ldrb	r2, [r3, #11]
	model->pub->addr = pub_addr;
    e876:	809e      	strh	r6, [r3, #4]
	model->pub->cred = cred_flag;
    e878:	f36f 1204 	bfc	r2, #4, #1
    e87c:	72da      	strb	r2, [r3, #11]
	model->pub->ttl = ttl;
    e87e:	f89d 2020 	ldrb.w	r2, [sp, #32]
    e882:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
    e884:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	model->pub->key = app_idx;
    e888:	f8a3 9006 	strh.w	r9, [r3, #6]
	model->pub->period = period;
    e88c:	f883 800a 	strb.w	r8, [r3, #10]
	model->pub->retransmit = retransmit;
    e890:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
    e892:	695b      	ldr	r3, [r3, #20]
    e894:	2b00      	cmp	r3, #0
    e896:	d0e1      	beq.n	e85c <_mod_pub_set+0x40>
		period_ms = bt_mesh_model_pub_period_get(model);
    e898:	4628      	mov	r0, r5
    e89a:	f7ff fd0b 	bl	e2b4 <bt_mesh_model_pub_period_get>
		if (period_ms) {
    e89e:	68a9      	ldr	r1, [r5, #8]
    e8a0:	4602      	mov	r2, r0
    e8a2:	b120      	cbz	r0, e8ae <_mod_pub_set+0x92>
    e8a4:	3118      	adds	r1, #24
    e8a6:	4806      	ldr	r0, [pc, #24]	; (e8c0 <_mod_pub_set+0xa4>)
    e8a8:	f008 fc18 	bl	170dc <k_delayed_work_submit_to_queue>
    e8ac:	e7d6      	b.n	e85c <_mod_pub_set+0x40>
			k_delayed_work_cancel(&model->pub->timer);
    e8ae:	f101 0018 	add.w	r0, r1, #24
    e8b2:	e7d1      	b.n	e858 <_mod_pub_set+0x3c>
		return STATUS_FEAT_NOT_SUPP;
    e8b4:	240a      	movs	r4, #10
    e8b6:	e7d5      	b.n	e864 <_mod_pub_set+0x48>
		return STATUS_NVAL_PUB_PARAM;
    e8b8:	2407      	movs	r4, #7
    e8ba:	e7d3      	b.n	e864 <_mod_pub_set+0x48>
		return STATUS_INVALID_APPKEY;
    e8bc:	2403      	movs	r4, #3
    e8be:	e7d1      	b.n	e864 <_mod_pub_set+0x48>
    e8c0:	20001fc8 	.word	0x20001fc8

0000e8c4 <net_key_get>:
}

static void net_key_get(struct bt_mesh_model *model,
			struct bt_mesh_msg_ctx *ctx,
			struct net_buf_simple *buf)
{
    e8c4:	b530      	push	{r4, r5, lr}
    e8c6:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg,
    e8c8:	ab02      	add	r3, sp, #8
    e8ca:	f44f 2210 	mov.w	r2, #589824	; 0x90000
{
    e8ce:	4604      	mov	r4, r0
    e8d0:	460d      	mov	r5, r1
			      2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
	u16_t prev, i;

	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
    e8d2:	a805      	add	r0, sp, #20
    e8d4:	f248 0143 	movw	r1, #32835	; 0x8043
	NET_BUF_SIMPLE_DEFINE(msg,
    e8d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e8dc:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
    e8de:	f00d fdad 	bl	1c43c <bt_mesh_model_msg_init>

	prev = BT_MESH_KEY_UNUSED;
	for (i = 0U; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    e8e2:	4b0f      	ldr	r3, [pc, #60]	; (e920 <net_key_get+0x5c>)
    e8e4:	f8b3 21a4 	ldrh.w	r2, [r3, #420]	; 0x1a4
    e8e8:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
    e8ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e8f0:	429a      	cmp	r2, r3
    e8f2:	d00d      	beq.n	e910 <net_key_get+0x4c>
			continue;
		}

		if (prev == BT_MESH_KEY_UNUSED) {
    e8f4:	4299      	cmp	r1, r3
    e8f6:	d00e      	beq.n	e916 <net_key_get+0x52>
			prev = sub->net_idx;
			continue;
		}

		key_idx_pack(&msg, prev, sub->net_idx);
    e8f8:	a805      	add	r0, sp, #20
    e8fa:	f00d fe2d 	bl	1c558 <key_idx_pack>

	if (prev != BT_MESH_KEY_UNUSED) {
		net_buf_simple_add_le16(&msg, prev);
	}

	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    e8fe:	2300      	movs	r3, #0
    e900:	9300      	str	r3, [sp, #0]
    e902:	aa05      	add	r2, sp, #20
    e904:	4629      	mov	r1, r5
    e906:	4620      	mov	r0, r4
    e908:	f00d fdc1 	bl	1c48e <bt_mesh_model_send>
		BT_ERR("Unable to send NetKey List");
	}
}
    e90c:	b009      	add	sp, #36	; 0x24
    e90e:	bd30      	pop	{r4, r5, pc}
	if (prev != BT_MESH_KEY_UNUSED) {
    e910:	4291      	cmp	r1, r2
    e912:	d0f4      	beq.n	e8fe <net_key_get+0x3a>
    e914:	460a      	mov	r2, r1
		net_buf_simple_add_le16(&msg, prev);
    e916:	4611      	mov	r1, r2
    e918:	a805      	add	r0, sp, #20
    e91a:	f010 fc06 	bl	1f12a <net_buf_simple_add_le16>
    e91e:	e7ee      	b.n	e8fe <net_key_get+0x3a>
    e920:	2000885c 	.word	0x2000885c

0000e924 <app_key_get>:
{
    e924:	b5f0      	push	{r4, r5, r6, r7, lr}
    e926:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4 +
    e928:	ab02      	add	r3, sp, #8
{
    e92a:	4605      	mov	r5, r0
    e92c:	460e      	mov	r6, r1
	get_idx = net_buf_simple_pull_le16(buf);
    e92e:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4 +
    e930:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
    e934:	9305      	str	r3, [sp, #20]
    e936:	e9cd 1306 	strd	r1, r3, [sp, #24]
	get_idx = net_buf_simple_pull_le16(buf);
    e93a:	f010 fc72 	bl	1f222 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
    e93e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
    e942:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
    e944:	d231      	bcs.n	e9aa <app_key_get+0x86>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
    e946:	f248 0102 	movw	r1, #32770	; 0x8002
    e94a:	a805      	add	r0, sp, #20
    e94c:	f00d fd76 	bl	1c43c <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_get(get_idx)) {
    e950:	4620      	mov	r0, r4
    e952:	f7fd feab 	bl	c6ac <bt_mesh_subnet_get>
		status = STATUS_SUCCESS;
    e956:	2800      	cmp	r0, #0
    e958:	bf0c      	ite	eq
    e95a:	2704      	moveq	r7, #4
    e95c:	2700      	movne	r7, #0
	net_buf_simple_add_u8(&msg, status);
    e95e:	4639      	mov	r1, r7
    e960:	a805      	add	r0, sp, #20
    e962:	f010 fbda 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
    e966:	4621      	mov	r1, r4
    e968:	a805      	add	r0, sp, #20
    e96a:	f010 fbde 	bl	1f12a <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
    e96e:	b9af      	cbnz	r7, e99c <app_key_get+0x78>
		if (key->net_idx != get_idx) {
    e970:	4b13      	ldr	r3, [pc, #76]	; (e9c0 <app_key_get+0x9c>)
    e972:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
    e976:	42a2      	cmp	r2, r4
    e978:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			prev = key->app_idx;
    e97c:	bf0c      	ite	eq
    e97e:	f8b3 1056 	ldrheq.w	r1, [r3, #86]	; 0x56
	prev = BT_MESH_KEY_UNUSED;
    e982:	f64f 71ff 	movwne	r1, #65535	; 0xffff
		if (key->net_idx != get_idx) {
    e986:	42a2      	cmp	r2, r4
    e988:	d112      	bne.n	e9b0 <app_key_get+0x8c>
		if (prev == BT_MESH_KEY_UNUSED) {
    e98a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
    e98e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e992:	4299      	cmp	r1, r3
    e994:	d00b      	beq.n	e9ae <app_key_get+0x8a>
		key_idx_pack(&msg, prev, key->app_idx);
    e996:	a805      	add	r0, sp, #20
    e998:	f00d fdde 	bl	1c558 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    e99c:	2300      	movs	r3, #0
    e99e:	9300      	str	r3, [sp, #0]
    e9a0:	aa05      	add	r2, sp, #20
    e9a2:	4631      	mov	r1, r6
    e9a4:	4628      	mov	r0, r5
    e9a6:	f00d fd72 	bl	1c48e <bt_mesh_model_send>
}
    e9aa:	b009      	add	sp, #36	; 0x24
    e9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prev = key->app_idx;
    e9ae:	4611      	mov	r1, r2
	if (prev != BT_MESH_KEY_UNUSED) {
    e9b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e9b4:	4299      	cmp	r1, r3
    e9b6:	d0f1      	beq.n	e99c <app_key_get+0x78>
		net_buf_simple_add_le16(&msg, prev);
    e9b8:	a805      	add	r0, sp, #20
    e9ba:	f010 fbb6 	bl	1f12a <net_buf_simple_add_le16>
    e9be:	e7ed      	b.n	e99c <app_key_get+0x78>
    e9c0:	2000885c 	.word	0x2000885c

0000e9c4 <net_key_add>:
{
    e9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9c8:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
    e9ca:	4610      	mov	r0, r2
{
    e9cc:	460f      	mov	r7, r1
    e9ce:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
    e9d0:	f010 fc27 	bl	1f222 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    e9d4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    e9d8:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    e9da:	d243      	bcs.n	ea64 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x4>
	sub = bt_mesh_subnet_get(idx);
    e9dc:	f7fd fe66 	bl	c6ac <bt_mesh_subnet_get>
	if (!sub) {
    e9e0:	4604      	mov	r4, r0
    e9e2:	b978      	cbnz	r0, ea04 <net_key_add+0x40>
			if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
    e9e4:	4b20      	ldr	r3, [pc, #128]	; (ea68 <CONFIG_SYS_PM_DEEP_SLEEP_1_MIN_RES+0x8>)
    e9e6:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
    e9ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e9ee:	4291      	cmp	r1, r2
    e9f0:	d004      	beq.n	e9fc <net_key_add+0x38>
    e9f2:	f8b3 11a4 	ldrh.w	r1, [r3, #420]	; 0x1a4
    e9f6:	4291      	cmp	r1, r2
    e9f8:	d114      	bne.n	ea24 <net_key_add+0x60>
		for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    e9fa:	2401      	movs	r4, #1
				sub = &bt_mesh.sub[i];
    e9fc:	22e4      	movs	r2, #228	; 0xe4
    e9fe:	fb02 3404 	mla	r4, r2, r4, r3
    ea02:	34a4      	adds	r4, #164	; 0xa4
	if (sub->net_idx == idx) {
    ea04:	8ba2      	ldrh	r2, [r4, #28]
    ea06:	f8d8 0000 	ldr.w	r0, [r8]
    ea0a:	42aa      	cmp	r2, r5
    ea0c:	f104 0330 	add.w	r3, r4, #48	; 0x30
    ea10:	d110      	bne.n	ea34 <net_key_add+0x70>
		if (memcmp(buf->data, sub->keys[0].net, 16)) {
    ea12:	4619      	mov	r1, r3
    ea14:	2210      	movs	r2, #16
    ea16:	f00b fb37 	bl	1a088 <memcmp>
			status = STATUS_SUCCESS;
    ea1a:	2800      	cmp	r0, #0
		send_net_key_status(model, ctx, idx, status);
    ea1c:	bf14      	ite	ne
    ea1e:	2306      	movne	r3, #6
    ea20:	2300      	moveq	r3, #0
    ea22:	e000      	b.n	ea26 <net_key_add+0x62>
			send_net_key_status(model, ctx, idx,
    ea24:	2305      	movs	r3, #5
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    ea26:	462a      	mov	r2, r5
    ea28:	4639      	mov	r1, r7
    ea2a:	4630      	mov	r0, r6
}
    ea2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    ea30:	f00d be16 	b.w	1c660 <send_net_key_status>
	err = bt_mesh_net_keys_create(&sub->keys[0], buf->data);
    ea34:	4601      	mov	r1, r0
    ea36:	4618      	mov	r0, r3
    ea38:	f7fd fe56 	bl	c6e8 <bt_mesh_net_keys_create>
	if (err) {
    ea3c:	4680      	mov	r8, r0
    ea3e:	b108      	cbz	r0, ea44 <net_key_add+0x80>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
    ea40:	2310      	movs	r3, #16
    ea42:	e7f0      	b.n	ea26 <net_key_add+0x62>
		bt_mesh_store_subnet(sub);
    ea44:	4620      	mov	r0, r4
	sub->net_idx = idx;
    ea46:	83a5      	strh	r5, [r4, #28]
		bt_mesh_store_subnet(sub);
    ea48:	f00f fb96 	bl	1e178 <bt_mesh_store_subnet>
	bt_mesh_net_beacon_update(sub);
    ea4c:	4620      	mov	r0, r4
    ea4e:	f7fd fe81 	bl	c754 <bt_mesh_net_beacon_update>
		bt_mesh_proxy_beacon_send(sub);
    ea52:	4620      	mov	r0, r4
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    ea54:	f884 8020 	strb.w	r8, [r4, #32]
		bt_mesh_proxy_beacon_send(sub);
    ea58:	f002 fa9e 	bl	10f98 <bt_mesh_proxy_beacon_send>
		bt_mesh_adv_update();
    ea5c:	f7fd faae 	bl	bfbc <bt_mesh_adv_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    ea60:	4643      	mov	r3, r8
    ea62:	e7e0      	b.n	ea26 <net_key_add+0x62>
}
    ea64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea68:	2000885c 	.word	0x2000885c

0000ea6c <va_add>:
{
    ea6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ea70:	4c1c      	ldr	r4, [pc, #112]	; (eae4 <va_add+0x78>)
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    ea72:	2600      	movs	r6, #0
{
    ea74:	4607      	mov	r7, r0
    ea76:	4688      	mov	r8, r1
	struct label *free_slot = NULL;
    ea78:	4635      	mov	r5, r6
    ea7a:	46a1      	mov	r9, r4
		if (!labels[i].ref) {
    ea7c:	8823      	ldrh	r3, [r4, #0]
    ea7e:	b19b      	cbz	r3, eaa8 <va_add+0x3c>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    ea80:	2210      	movs	r2, #16
    ea82:	4639      	mov	r1, r7
    ea84:	1d20      	adds	r0, r4, #4
    ea86:	f00b faff 	bl	1a088 <memcmp>
    ea8a:	b970      	cbnz	r0, eaaa <va_add+0x3e>
			*addr = labels[i].addr;
    ea8c:	2314      	movs	r3, #20
    ea8e:	435e      	muls	r6, r3
    ea90:	eb09 0306 	add.w	r3, r9, r6
    ea94:	885b      	ldrh	r3, [r3, #2]
    ea96:	f8a8 3000 	strh.w	r3, [r8]
			labels[i].ref++;
    ea9a:	f839 3006 	ldrh.w	r3, [r9, r6]
    ea9e:	3301      	adds	r3, #1
    eaa0:	f829 3006 	strh.w	r3, [r9, r6]
}
    eaa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eaa8:	4625      	mov	r5, r4
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    eaaa:	3601      	adds	r6, #1
    eaac:	2e03      	cmp	r6, #3
    eaae:	f104 0414 	add.w	r4, r4, #20
    eab2:	d1e3      	bne.n	ea7c <va_add+0x10>
	if (!free_slot) {
    eab4:	b18d      	cbz	r5, eada <va_add+0x6e>
	if (bt_mesh_virtual_addr(label_uuid, addr) < 0) {
    eab6:	4641      	mov	r1, r8
    eab8:	4638      	mov	r0, r7
    eaba:	f7ff fb59 	bl	e170 <bt_mesh_virtual_addr>
    eabe:	2800      	cmp	r0, #0
    eac0:	db0d      	blt.n	eade <va_add+0x72>
	free_slot->ref = 1U;
    eac2:	2301      	movs	r3, #1
    eac4:	802b      	strh	r3, [r5, #0]
	free_slot->addr = *addr;
    eac6:	f8b8 3000 	ldrh.w	r3, [r8]
    eaca:	806b      	strh	r3, [r5, #2]
	memcpy(free_slot->uuid, label_uuid, 16);
    eacc:	2210      	movs	r2, #16
    eace:	4639      	mov	r1, r7
    ead0:	1d28      	adds	r0, r5, #4
    ead2:	f00b fae9 	bl	1a0a8 <memcpy>
	return STATUS_SUCCESS;
    ead6:	2000      	movs	r0, #0
    ead8:	e7e4      	b.n	eaa4 <va_add+0x38>
		return STATUS_INSUFF_RESOURCES;
    eada:	2005      	movs	r0, #5
    eadc:	e7e2      	b.n	eaa4 <va_add+0x38>
		return STATUS_UNSPECIFIED;
    eade:	2010      	movs	r0, #16
    eae0:	e7e0      	b.n	eaa4 <va_add+0x38>
    eae2:	bf00      	nop
    eae4:	20002056 	.word	0x20002056

0000eae8 <mod_sub_va_del>:
{
    eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eaec:	4607      	mov	r7, r0
    eaee:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
    eaf0:	4610      	mov	r0, r2
{
    eaf2:	4688      	mov	r8, r1
    eaf4:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
    eaf6:	f010 fb94 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    eafa:	b203      	sxth	r3, r0
    eafc:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    eafe:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    eb00:	dd1c      	ble.n	eb3c <mod_sub_va_del+0x54>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
    eb02:	2110      	movs	r1, #16
    eb04:	4620      	mov	r0, r4
    eb06:	f010 fb7c 	bl	1f202 <net_buf_simple_pull_mem>
    eb0a:	4683      	mov	fp, r0
	elem = bt_mesh_elem_find(elem_addr);
    eb0c:	4630      	mov	r0, r6
	mod_id = buf->data;
    eb0e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    eb12:	f7ff fc79 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
    eb16:	4605      	mov	r5, r0
    eb18:	b998      	cbnz	r0, eb42 <mod_sub_va_del+0x5a>
		vnd = (buf->len == 4);
    eb1a:	88a3      	ldrh	r3, [r4, #4]
    eb1c:	1f1a      	subs	r2, r3, #4
    eb1e:	4253      	negs	r3, r2
    eb20:	4153      	adcs	r3, r2
    eb22:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    eb26:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    eb28:	f89d 3017 	ldrb.w	r3, [sp, #23]
    eb2c:	9500      	str	r5, [sp, #0]
    eb2e:	e9cd 9301 	strd	r9, r3, [sp, #4]
    eb32:	4641      	mov	r1, r8
    eb34:	4633      	mov	r3, r6
    eb36:	4638      	mov	r0, r7
    eb38:	f00d fe5d 	bl	1c7f6 <send_mod_sub_status>
}
    eb3c:	b007      	add	sp, #28
    eb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
    eb42:	f10d 0217 	add.w	r2, sp, #23
    eb46:	4621      	mov	r1, r4
    eb48:	f00e f8a1 	bl	1cc8e <get_model>
	if (!mod) {
    eb4c:	4682      	mov	sl, r0
    eb4e:	b358      	cbz	r0, eba8 <mod_sub_va_del+0xc0>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    eb50:	2210      	movs	r2, #16
    eb52:	4659      	mov	r1, fp
    eb54:	4818      	ldr	r0, [pc, #96]	; (ebb8 <mod_sub_va_del+0xd0>)
    eb56:	4c19      	ldr	r4, [pc, #100]	; (ebbc <mod_sub_va_del+0xd4>)
    eb58:	f00b fa96 	bl	1a088 <memcmp>
    eb5c:	b170      	cbz	r0, eb7c <mod_sub_va_del+0x94>
    eb5e:	2210      	movs	r2, #16
    eb60:	4659      	mov	r1, fp
    eb62:	f104 0018 	add.w	r0, r4, #24
    eb66:	f00b fa8f 	bl	1a088 <memcmp>
    eb6a:	b1d8      	cbz	r0, eba4 <mod_sub_va_del+0xbc>
    eb6c:	2210      	movs	r2, #16
    eb6e:	4659      	mov	r1, fp
    eb70:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    eb74:	f00b fa88 	bl	1a088 <memcmp>
    eb78:	b9c8      	cbnz	r0, ebae <mod_sub_va_del+0xc6>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    eb7a:	2002      	movs	r0, #2
				*addr = labels[i].addr;
    eb7c:	2314      	movs	r3, #20
    eb7e:	4358      	muls	r0, r3
    eb80:	1823      	adds	r3, r4, r0
    eb82:	885d      	ldrh	r5, [r3, #2]
			labels[i].ref--;
    eb84:	5a23      	ldrh	r3, [r4, r0]
    eb86:	3b01      	subs	r3, #1
    eb88:	5223      	strh	r3, [r4, r0]
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
    eb8a:	b19d      	cbz	r5, ebb4 <mod_sub_va_del+0xcc>
	match = bt_mesh_model_find_group(mod, sub_addr);
    eb8c:	4629      	mov	r1, r5
    eb8e:	4650      	mov	r0, sl
    eb90:	f00d fc2e 	bl	1c3f0 <bt_mesh_model_find_group>
	if (match) {
    eb94:	b160      	cbz	r0, ebb0 <mod_sub_va_del+0xc8>
		*match = BT_MESH_ADDR_UNASSIGNED;
    eb96:	2400      	movs	r4, #0
    eb98:	8004      	strh	r4, [r0, #0]
			bt_mesh_store_mod_sub(mod);
    eb9a:	4650      	mov	r0, sl
    eb9c:	f00f fb50 	bl	1e240 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
    eba0:	4622      	mov	r2, r4
    eba2:	e7c1      	b.n	eb28 <mod_sub_va_del+0x40>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    eba4:	2001      	movs	r0, #1
    eba6:	e7e9      	b.n	eb7c <mod_sub_va_del+0x94>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
    eba8:	4605      	mov	r5, r0
		status = STATUS_INVALID_MODEL;
    ebaa:	2202      	movs	r2, #2
    ebac:	e7bc      	b.n	eb28 <mod_sub_va_del+0x40>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    ebae:	2500      	movs	r5, #0
		status = STATUS_CANNOT_REMOVE;
    ebb0:	220c      	movs	r2, #12
    ebb2:	e7b9      	b.n	eb28 <mod_sub_va_del+0x40>
			return STATUS_SUCCESS;
    ebb4:	462a      	mov	r2, r5
    ebb6:	e7b7      	b.n	eb28 <mod_sub_va_del+0x40>
    ebb8:	2000205a 	.word	0x2000205a
    ebbc:	20002056 	.word	0x20002056

0000ebc0 <app_key_set>:
{
    ebc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ebc4:	4680      	mov	r8, r0
    ebc6:	4689      	mov	r9, r1
    ebc8:	4616      	mov	r6, r2
    ebca:	469a      	mov	sl, r3
	sub = bt_mesh_subnet_get(net_idx);
    ebcc:	f7fd fd6e 	bl	c6ac <bt_mesh_subnet_get>
	if (!sub) {
    ebd0:	4605      	mov	r5, r0
    ebd2:	2800      	cmp	r0, #0
    ebd4:	d046      	beq.n	ec64 <app_key_set+0xa4>
	key = bt_mesh_app_key_find(app_idx);
    ebd6:	4648      	mov	r0, r9
    ebd8:	f7fe fe6a 	bl	d8b0 <bt_mesh_app_key_find>
    ebdc:	4604      	mov	r4, r0
	if (update) {
    ebde:	f1ba 0f00 	cmp.w	sl, #0
    ebe2:	d024      	beq.n	ec2e <app_key_set+0x6e>
		if (!key) {
    ebe4:	2800      	cmp	r0, #0
    ebe6:	d04c      	beq.n	ec82 <app_key_set+0xc2>
		if (key->net_idx != net_idx) {
    ebe8:	8803      	ldrh	r3, [r0, #0]
    ebea:	4543      	cmp	r3, r8
    ebec:	d14b      	bne.n	ec86 <app_key_set+0xc6>
		if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
    ebee:	7feb      	ldrb	r3, [r5, #31]
    ebf0:	2b01      	cmp	r3, #1
    ebf2:	d002      	beq.n	ebfa <app_key_set+0x3a>
			return STATUS_CANNOT_UPDATE;
    ebf4:	200b      	movs	r0, #11
}
    ebf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key->updated) {
    ebfa:	7902      	ldrb	r2, [r0, #4]
    ebfc:	b142      	cbz	r2, ec10 <app_key_set+0x50>
			if (memcmp(keys->val, val, 16)) {
    ebfe:	2210      	movs	r2, #16
    ec00:	4631      	mov	r1, r6
    ec02:	3017      	adds	r0, #23
    ec04:	f00b fa40 	bl	1a088 <memcmp>
    ec08:	2800      	cmp	r0, #0
    ec0a:	d1f3      	bne.n	ebf4 <app_key_set+0x34>
				return STATUS_SUCCESS;
    ec0c:	2000      	movs	r0, #0
    ec0e:	e7f2      	b.n	ebf6 <app_key_set+0x36>
		keys = &key->keys[1];
    ec10:	f100 0716 	add.w	r7, r0, #22
		key->updated = true;
    ec14:	7103      	strb	r3, [r0, #4]
			const u8_t net_id[16], u32_t iv_index,
			u8_t auth[8]);

static inline int bt_mesh_app_id(const u8_t app_key[16], u8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
    ec16:	4639      	mov	r1, r7
    ec18:	4630      	mov	r0, r6
    ec1a:	f7ff fa45 	bl	e0a8 <bt_mesh_k4>
	if (bt_mesh_app_id(val, &keys->id)) {
    ec1e:	b318      	cbz	r0, ec68 <app_key_set+0xa8>
		if (update) {
    ec20:	f1ba 0f00 	cmp.w	sl, #0
    ec24:	d001      	beq.n	ec2a <app_key_set+0x6a>
			key->updated = false;
    ec26:	2300      	movs	r3, #0
    ec28:	7123      	strb	r3, [r4, #4]
		return STATUS_STORAGE_FAIL;
    ec2a:	2009      	movs	r0, #9
    ec2c:	e7e3      	b.n	ebf6 <app_key_set+0x36>
		if (key) {
    ec2e:	b960      	cbnz	r0, ec4a <app_key_set+0x8a>
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
    ec30:	4c19      	ldr	r4, [pc, #100]	; (ec98 <app_key_set+0xd8>)
    ec32:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
    ec36:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ec3a:	429a      	cmp	r2, r3
    ec3c:	d027      	beq.n	ec8e <app_key_set+0xce>
    ec3e:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    ec42:	429a      	cmp	r2, r3
    ec44:	d026      	beq.n	ec94 <app_key_set+0xd4>
			return STATUS_INSUFF_RESOURCES;
    ec46:	2005      	movs	r0, #5
    ec48:	e7d5      	b.n	ebf6 <app_key_set+0x36>
			if (key->net_idx == net_idx &&
    ec4a:	8805      	ldrh	r5, [r0, #0]
    ec4c:	4545      	cmp	r5, r8
    ec4e:	d109      	bne.n	ec64 <app_key_set+0xa4>
			    !memcmp(key->keys[0].val, val, 16)) {
    ec50:	2210      	movs	r2, #16
    ec52:	4631      	mov	r1, r6
    ec54:	3006      	adds	r0, #6
    ec56:	f00b fa17 	bl	1a088 <memcmp>
			if (key->net_idx == net_idx &&
    ec5a:	2800      	cmp	r0, #0
    ec5c:	d0d6      	beq.n	ec0c <app_key_set+0x4c>
			if (key->net_idx == net_idx) {
    ec5e:	8823      	ldrh	r3, [r4, #0]
    ec60:	42ab      	cmp	r3, r5
    ec62:	d012      	beq.n	ec8a <app_key_set+0xca>
				return STATUS_INVALID_NETKEY;
    ec64:	2004      	movs	r0, #4
    ec66:	e7c6      	b.n	ebf6 <app_key_set+0x36>
	key->net_idx = net_idx;
    ec68:	f8a4 8000 	strh.w	r8, [r4]
	key->app_idx = app_idx;
    ec6c:	f8a4 9002 	strh.w	r9, [r4, #2]
	memcpy(keys->val, val, 16);
    ec70:	2210      	movs	r2, #16
    ec72:	4631      	mov	r1, r6
    ec74:	1c78      	adds	r0, r7, #1
    ec76:	f00b fa17 	bl	1a0a8 <memcpy>
		bt_mesh_store_app_key(key);
    ec7a:	4620      	mov	r0, r4
    ec7c:	f00f faa0 	bl	1e1c0 <bt_mesh_store_app_key>
	return STATUS_SUCCESS;
    ec80:	e7c4      	b.n	ec0c <app_key_set+0x4c>
			return STATUS_INVALID_APPKEY;
    ec82:	2003      	movs	r0, #3
    ec84:	e7b7      	b.n	ebf6 <app_key_set+0x36>
			return STATUS_INVALID_BINDING;
    ec86:	2011      	movs	r0, #17
    ec88:	e7b5      	b.n	ebf6 <app_key_set+0x36>
				return STATUS_IDX_ALREADY_STORED;
    ec8a:	2006      	movs	r0, #6
    ec8c:	e7b3      	b.n	ebf6 <app_key_set+0x36>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    ec8e:	3454      	adds	r4, #84	; 0x54
		keys = &key->keys[0];
    ec90:	1d67      	adds	r7, r4, #5
    ec92:	e7c0      	b.n	ec16 <app_key_set+0x56>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    ec94:	347c      	adds	r4, #124	; 0x7c
    ec96:	e7fb      	b.n	ec90 <app_key_set+0xd0>
    ec98:	2000885c 	.word	0x2000885c

0000ec9c <heartbeat_pub_set>:
}

static void heartbeat_pub_set(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
    ec9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct hb_pub_param *param = (void *)buf->data;
    eca0:	6815      	ldr	r5, [r2, #0]
	u16_t dst, feat, idx;
	u8_t status;

	BT_DBG("src 0x%04x", ctx->addr);

	dst = sys_le16_to_cpu(param->dst);
    eca2:	f8b5 8000 	ldrh.w	r8, [r5]
    eca6:	fa1f f988 	uxth.w	r9, r8
	/* All other address types but virtual are valid */
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    ecaa:	f489 4300 	eor.w	r3, r9, #32768	; 0x8000
    ecae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
    ecb2:	4606      	mov	r6, r0
    ecb4:	460f      	mov	r7, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    ecb6:	d35d      	bcc.n	ed74 <heartbeat_pub_set+0xd8>
		status = STATUS_INVALID_ADDRESS;
		goto failed;
	}

	if (param->count_log > 0x11 && param->count_log != 0xff) {
    ecb8:	78ab      	ldrb	r3, [r5, #2]
    ecba:	3b12      	subs	r3, #18
    ecbc:	b2db      	uxtb	r3, r3
    ecbe:	2bec      	cmp	r3, #236	; 0xec
    ecc0:	d95b      	bls.n	ed7a <heartbeat_pub_set+0xde>
		status = STATUS_CANNOT_SET;
		goto failed;
	}

	if (param->period_log > 0x10) {
    ecc2:	78eb      	ldrb	r3, [r5, #3]
    ecc4:	2b10      	cmp	r3, #16
    ecc6:	d858      	bhi.n	ed7a <heartbeat_pub_set+0xde>
		status = STATUS_CANNOT_SET;
		goto failed;
	}

	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
    ecc8:	792b      	ldrb	r3, [r5, #4]
    ecca:	f083 0380 	eor.w	r3, r3, #128	; 0x80
    ecce:	2b7e      	cmp	r3, #126	; 0x7e
    ecd0:	d957      	bls.n	ed82 <heartbeat_pub_set+0xe6>
		return;
	}

	feat = sys_le16_to_cpu(param->feat);

	idx = sys_le16_to_cpu(param->net_idx);
    ecd2:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    ecd6:	9301      	str	r3, [sp, #4]
    ecd8:	b298      	uxth	r0, r3
	if (idx > 0xfff) {
    ecda:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    ecde:	d250      	bcs.n	ed82 <heartbeat_pub_set+0xe6>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    ece0:	69b4      	ldr	r4, [r6, #24]
	feat = sys_le16_to_cpu(param->feat);
    ece2:	f8b5 a005 	ldrh.w	sl, [r5, #5]
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
		return;
	}

	if (!bt_mesh_subnet_get(idx)) {
    ece6:	f7fd fce1 	bl	c6ac <bt_mesh_subnet_get>
    ecea:	2800      	cmp	r0, #0
    ecec:	d047      	beq.n	ed7e <heartbeat_pub_set+0xe2>
		status = STATUS_INVALID_NETKEY;
		goto failed;
	}

	cfg->hb_pub.dst = dst;
    ecee:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
	cfg->hb_pub.period = param->period_log;
    ecf2:	f895 b003 	ldrb.w	fp, [r5, #3]
	cfg->hb_pub.feat = feat & BT_MESH_FEAT_SUPPORTED;
	cfg->hb_pub.net_idx = idx;
    ecf6:	9b01      	ldr	r3, [sp, #4]
	cfg->hb_pub.period = param->period_log;
    ecf8:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
	cfg->hb_pub.feat = feat & BT_MESH_FEAT_SUPPORTED;
    ecfc:	f00a 0a0f 	and.w	sl, sl, #15
    ed00:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
	cfg->hb_pub.net_idx = idx;
    ed04:	86a3      	strh	r3, [r4, #52]	; 0x34

	if (dst == BT_MESH_ADDR_UNASSIGNED) {
    ed06:	f104 010c 	add.w	r1, r4, #12
    ed0a:	f1b9 0f00 	cmp.w	r9, #0
    ed0e:	d107      	bne.n	ed20 <heartbeat_pub_set+0x84>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
    ed10:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	cfg->hb_pub.period = 0;
    ed14:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
		 * has been configured for periodic publishing.
		 */
		if (param->period_log && param->count_log) {
			k_work_submit(&cfg->hb_pub.timer.work);
		} else {
			k_delayed_work_cancel(&cfg->hb_pub.timer);
    ed18:	4608      	mov	r0, r1
    ed1a:	f010 ff07 	bl	1fb2c <k_delayed_work_cancel>
    ed1e:	e01e      	b.n	ed5e <heartbeat_pub_set+0xc2>
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
    ed20:	78aa      	ldrb	r2, [r5, #2]
    ed22:	4610      	mov	r0, r2
    ed24:	f00e fba9 	bl	1d47a <hb_pwr2.constprop.10>
    ed28:	85e0      	strh	r0, [r4, #46]	; 0x2e
		cfg->hb_pub.ttl = param->ttl;
    ed2a:	792b      	ldrb	r3, [r5, #4]
    ed2c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		if (param->period_log && param->count_log) {
    ed30:	f1bb 0f00 	cmp.w	fp, #0
    ed34:	d0f0      	beq.n	ed18 <heartbeat_pub_set+0x7c>
    ed36:	2a00      	cmp	r2, #0
    ed38:	d0ee      	beq.n	ed18 <heartbeat_pub_set+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ed3a:	f3bf 8f5b 	dmb	ish
    ed3e:	3414      	adds	r4, #20
    ed40:	e854 3f00 	ldrex	r3, [r4]
    ed44:	f043 0201 	orr.w	r2, r3, #1
    ed48:	e844 2000 	strex	r0, r2, [r4]
    ed4c:	2800      	cmp	r0, #0
    ed4e:	d1f7      	bne.n	ed40 <heartbeat_pub_set+0xa4>
    ed50:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ed54:	07db      	lsls	r3, r3, #31
    ed56:	d402      	bmi.n	ed5e <heartbeat_pub_set+0xc2>
		k_queue_append(&work_q->queue, work);
    ed58:	480b      	ldr	r0, [pc, #44]	; (ed88 <heartbeat_pub_set+0xec>)
    ed5a:	f010 fcd1 	bl	1f700 <k_queue_append>
		}
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_store_hb_pub();
    ed5e:	f00f fa53 	bl	1e208 <bt_mesh_store_hb_pub>
	}

	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
    ed62:	2300      	movs	r3, #0
    ed64:	461a      	mov	r2, r3

	return;

failed:
	hb_pub_send_status(model, ctx, status, param);
    ed66:	4639      	mov	r1, r7
    ed68:	4630      	mov	r0, r6
}
    ed6a:	b003      	add	sp, #12
    ed6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hb_pub_send_status(model, ctx, status, param);
    ed70:	f00d bce9 	b.w	1c746 <hb_pub_send_status>
		status = STATUS_INVALID_ADDRESS;
    ed74:	2201      	movs	r2, #1
	hb_pub_send_status(model, ctx, status, param);
    ed76:	462b      	mov	r3, r5
    ed78:	e7f5      	b.n	ed66 <heartbeat_pub_set+0xca>
		status = STATUS_CANNOT_SET;
    ed7a:	220f      	movs	r2, #15
    ed7c:	e7fb      	b.n	ed76 <heartbeat_pub_set+0xda>
		status = STATUS_INVALID_NETKEY;
    ed7e:	2204      	movs	r2, #4
    ed80:	e7f9      	b.n	ed76 <heartbeat_pub_set+0xda>
}
    ed82:	b003      	add	sp, #12
    ed84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed88:	20001fc8 	.word	0x20001fc8

0000ed8c <bt_mesh_app_key_alloc>:
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
    ed8c:	4807      	ldr	r0, [pc, #28]	; (edac <bt_mesh_app_key_alloc+0x20>)
    ed8e:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
    ed92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ed96:	429a      	cmp	r2, r3
    ed98:	d005      	beq.n	eda6 <bt_mesh_app_key_alloc+0x1a>
    ed9a:	f830 2f7c 	ldrh.w	r2, [r0, #124]!
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    ed9e:	429a      	cmp	r2, r3
    eda0:	bf18      	it	ne
    eda2:	2000      	movne	r0, #0
    eda4:	4770      	bx	lr
    eda6:	3054      	adds	r0, #84	; 0x54
}
    eda8:	4770      	bx	lr
    edaa:	bf00      	nop
    edac:	2000885c 	.word	0x2000885c

0000edb0 <bt_mesh_app_key_del>:
{
    edb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct unbind_data data = { .app_idx = key->app_idx, .store = store };
    edb2:	8843      	ldrh	r3, [r0, #2]
    edb4:	f88d 1006 	strb.w	r1, [sp, #6]
{
    edb8:	460d      	mov	r5, r1
    edba:	4604      	mov	r4, r0
	bt_mesh_model_foreach(_mod_unbind, &data);
    edbc:	a901      	add	r1, sp, #4
    edbe:	480a      	ldr	r0, [pc, #40]	; (ede8 <bt_mesh_app_key_del+0x38>)
	struct unbind_data data = { .app_idx = key->app_idx, .store = store };
    edc0:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_mesh_model_foreach(_mod_unbind, &data);
    edc4:	f7ff fa3c 	bl	e240 <bt_mesh_model_foreach>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    edc8:	b115      	cbz	r5, edd0 <bt_mesh_app_key_del+0x20>
		bt_mesh_clear_app_key(key);
    edca:	4620      	mov	r0, r4
    edcc:	f000 fffa 	bl	fdc4 <bt_mesh_clear_app_key>
	key->net_idx = BT_MESH_KEY_UNUSED;
    edd0:	4620      	mov	r0, r4
    edd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    edd6:	f820 3b05 	strh.w	r3, [r0], #5
	(void)memset(key->keys, 0, sizeof(key->keys));
    edda:	2222      	movs	r2, #34	; 0x22
    eddc:	2100      	movs	r1, #0
    edde:	f00b f98d 	bl	1a0fc <memset>
}
    ede2:	b003      	add	sp, #12
    ede4:	bd30      	pop	{r4, r5, pc}
    ede6:	bf00      	nop
    ede8:	0001d497 	.word	0x0001d497

0000edec <bt_mesh_cfg_srv_init>:

	return true;
}

int bt_mesh_cfg_srv_init(struct bt_mesh_model *model, bool primary)
{
    edec:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    edee:	6984      	ldr	r4, [r0, #24]
{
    edf0:	4605      	mov	r5, r0

	if (!cfg) {
    edf2:	b1fc      	cbz	r4, ee34 <bt_mesh_cfg_srv_init+0x48>
	if (cfg->relay > 0x02) {
    edf4:	7963      	ldrb	r3, [r4, #5]
    edf6:	2b02      	cmp	r3, #2
    edf8:	d81c      	bhi.n	ee34 <bt_mesh_cfg_srv_init+0x48>
	if (cfg->beacon > 0x01) {
    edfa:	79e3      	ldrb	r3, [r4, #7]
    edfc:	2b01      	cmp	r3, #1
    edfe:	d819      	bhi.n	ee34 <bt_mesh_cfg_srv_init+0x48>
	if (cfg->default_ttl > BT_MESH_TTL_MAX) {
    ee00:	f994 300a 	ldrsb.w	r3, [r4, #10]
    ee04:	2b00      	cmp	r3, #0
    ee06:	db15      	blt.n	ee34 <bt_mesh_cfg_srv_init+0x48>
		BT_ERR("Invalid values in configuration");
		return -EINVAL;
	}

	/* Configuration Model security is device-key based */
	model->keys[0] = BT_MESH_KEY_DEV;
    ee08:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    ee0c:	8183      	strh	r3, [r0, #12]
	if (!IS_ENABLED(CONFIG_BT_MESH_RELAY)) {
		cfg->relay = BT_MESH_RELAY_NOT_SUPPORTED;
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		cfg->frnd = BT_MESH_FRIEND_NOT_SUPPORTED;
    ee0e:	2302      	movs	r3, #2
    ee10:	7263      	strb	r3, [r4, #9]

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		cfg->gatt_proxy = BT_MESH_GATT_PROXY_NOT_SUPPORTED;
	}

	k_delayed_work_init(&cfg->hb_pub.timer, hb_publish);
    ee12:	f104 000c 	add.w	r0, r4, #12
    ee16:	4909      	ldr	r1, [pc, #36]	; (ee3c <bt_mesh_cfg_srv_init+0x50>)
    ee18:	f010 fe80 	bl	1fb1c <k_delayed_work_init>
	cfg->hb_pub.net_idx = BT_MESH_KEY_UNUSED;
    ee1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ee20:	86a3      	strh	r3, [r4, #52]	; 0x34
	cfg->hb_sub.expiry = 0;
    ee22:	2200      	movs	r2, #0
    ee24:	2300      	movs	r3, #0
    ee26:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38

	cfg->model = model;

	conf = cfg;
    ee2a:	4b05      	ldr	r3, [pc, #20]	; (ee40 <bt_mesh_cfg_srv_init+0x54>)
	cfg->model = model;
    ee2c:	6025      	str	r5, [r4, #0]
	conf = cfg;
    ee2e:	601c      	str	r4, [r3, #0]

	return 0;
    ee30:	2000      	movs	r0, #0
}
    ee32:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ee34:	f06f 0015 	mvn.w	r0, #21
    ee38:	e7fb      	b.n	ee32 <bt_mesh_cfg_srv_init+0x46>
    ee3a:	bf00      	nop
    ee3c:	0000ef1d 	.word	0x0000ef1d
    ee40:	20000f94 	.word	0x20000f94

0000ee44 <bt_mesh_heartbeat>:

	(void)memset(labels, 0, sizeof(labels));
}

void bt_mesh_heartbeat(u16_t src, u16_t dst, u8_t hops, u16_t feat)
{
    ee44:	b570      	push	{r4, r5, r6, lr}
    ee46:	461e      	mov	r6, r3
	struct bt_mesh_cfg_srv *cfg = conf;
    ee48:	4b18      	ldr	r3, [pc, #96]	; (eeac <bt_mesh_heartbeat+0x68>)
    ee4a:	681c      	ldr	r4, [r3, #0]
{
    ee4c:	4615      	mov	r5, r2

	if (!cfg) {
    ee4e:	b364      	cbz	r4, eeaa <bt_mesh_heartbeat+0x66>
		BT_WARN("No configuaration server context available");
		return;
	}

	if (src != cfg->hb_sub.src || dst != cfg->hb_sub.dst) {
    ee50:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    ee54:	4283      	cmp	r3, r0
    ee56:	d128      	bne.n	eeaa <bt_mesh_heartbeat+0x66>
    ee58:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ee5c:	428b      	cmp	r3, r1
    ee5e:	d124      	bne.n	eeaa <bt_mesh_heartbeat+0x66>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
    ee60:	f010 fec1 	bl	1fbe6 <z_impl_k_uptime_get>
		BT_WARN("No subscription for received heartbeat");
		return;
	}

	if (k_uptime_get() > cfg->hb_sub.expiry) {
    ee64:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
    ee68:	4282      	cmp	r2, r0
    ee6a:	418b      	sbcs	r3, r1
    ee6c:	db1d      	blt.n	eeaa <bt_mesh_heartbeat+0x66>
		BT_WARN("Heartbeat subscription period expired");
		return;
	}

	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
    ee6e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);

	if (cfg->hb_sub.count < 0xffff) {
    ee72:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
    ee76:	42aa      	cmp	r2, r5
    ee78:	bf28      	it	cs
    ee7a:	462a      	movcs	r2, r5
    ee7c:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
    ee80:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
	if (cfg->hb_sub.count < 0xffff) {
    ee84:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
    ee88:	42aa      	cmp	r2, r5
    ee8a:	bf38      	it	cc
    ee8c:	462a      	movcc	r2, r5
	if (cfg->hb_sub.count < 0xffff) {
    ee8e:	4299      	cmp	r1, r3

	BT_DBG("src 0x%04x dst 0x%04x hops %u min %u max %u count %u", src,
	       dst, hops, cfg->hb_sub.min_hops, cfg->hb_sub.max_hops,
	       cfg->hb_sub.count);

	if (cfg->hb_sub.func) {
    ee90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
    ee92:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
		cfg->hb_sub.count++;
    ee96:	bf1c      	itt	ne
    ee98:	3101      	addne	r1, #1
    ee9a:	f8a4 1044 	strhne.w	r1, [r4, #68]	; 0x44
	if (cfg->hb_sub.func) {
    ee9e:	b123      	cbz	r3, eeaa <bt_mesh_heartbeat+0x66>
		cfg->hb_sub.func(hops, feat);
    eea0:	4631      	mov	r1, r6
    eea2:	4628      	mov	r0, r5
	}
}
    eea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cfg->hb_sub.func(hops, feat);
    eea8:	4718      	bx	r3
}
    eeaa:	bd70      	pop	{r4, r5, r6, pc}
    eeac:	20000f94 	.word	0x20000f94

0000eeb0 <bt_mesh_net_transmit_get>:

u8_t bt_mesh_net_transmit_get(void)
{
	if (conf) {
    eeb0:	4b02      	ldr	r3, [pc, #8]	; (eebc <bt_mesh_net_transmit_get+0xc>)
    eeb2:	6818      	ldr	r0, [r3, #0]
    eeb4:	b100      	cbz	r0, eeb8 <bt_mesh_net_transmit_get+0x8>
		return conf->net_transmit;
    eeb6:	7900      	ldrb	r0, [r0, #4]
	}

	return 0;
}
    eeb8:	4770      	bx	lr
    eeba:	bf00      	nop
    eebc:	20000f94 	.word	0x20000f94

0000eec0 <bt_mesh_relay_get>:

u8_t bt_mesh_relay_get(void)
{
	if (conf) {
    eec0:	4b03      	ldr	r3, [pc, #12]	; (eed0 <bt_mesh_relay_get+0x10>)
    eec2:	681b      	ldr	r3, [r3, #0]
    eec4:	b10b      	cbz	r3, eeca <bt_mesh_relay_get+0xa>
		return conf->relay;
    eec6:	7958      	ldrb	r0, [r3, #5]
    eec8:	4770      	bx	lr
	}

	return BT_MESH_RELAY_NOT_SUPPORTED;
    eeca:	2002      	movs	r0, #2
}
    eecc:	4770      	bx	lr
    eece:	bf00      	nop
    eed0:	20000f94 	.word	0x20000f94

0000eed4 <bt_mesh_friend_get>:

u8_t bt_mesh_friend_get(void)
{
	BT_DBG("conf %p conf->frnd 0x%02x", conf, conf->frnd);

	if (conf) {
    eed4:	4b03      	ldr	r3, [pc, #12]	; (eee4 <bt_mesh_friend_get+0x10>)
    eed6:	681b      	ldr	r3, [r3, #0]
    eed8:	b10b      	cbz	r3, eede <bt_mesh_friend_get+0xa>
		return conf->frnd;
    eeda:	7a58      	ldrb	r0, [r3, #9]
    eedc:	4770      	bx	lr
	}

	return BT_MESH_FRIEND_NOT_SUPPORTED;
    eede:	2002      	movs	r0, #2
}
    eee0:	4770      	bx	lr
    eee2:	bf00      	nop
    eee4:	20000f94 	.word	0x20000f94

0000eee8 <bt_mesh_relay_retransmit_get>:

u8_t bt_mesh_relay_retransmit_get(void)
{
	if (conf) {
    eee8:	4b02      	ldr	r3, [pc, #8]	; (eef4 <bt_mesh_relay_retransmit_get+0xc>)
    eeea:	6818      	ldr	r0, [r3, #0]
    eeec:	b100      	cbz	r0, eef0 <bt_mesh_relay_retransmit_get+0x8>
		return conf->relay_retransmit;
    eeee:	7980      	ldrb	r0, [r0, #6]
	}

	return 0;
}
    eef0:	4770      	bx	lr
    eef2:	bf00      	nop
    eef4:	20000f94 	.word	0x20000f94

0000eef8 <bt_mesh_beacon_get>:

u8_t bt_mesh_beacon_get(void)
{
	if (conf) {
    eef8:	4b02      	ldr	r3, [pc, #8]	; (ef04 <bt_mesh_beacon_get+0xc>)
    eefa:	6818      	ldr	r0, [r3, #0]
    eefc:	b100      	cbz	r0, ef00 <bt_mesh_beacon_get+0x8>
		return conf->beacon;
    eefe:	79c0      	ldrb	r0, [r0, #7]
	}

	return BT_MESH_BEACON_DISABLED;
}
    ef00:	4770      	bx	lr
    ef02:	bf00      	nop
    ef04:	20000f94 	.word	0x20000f94

0000ef08 <bt_mesh_gatt_proxy_get>:

u8_t bt_mesh_gatt_proxy_get(void)
{
	if (conf) {
    ef08:	4b03      	ldr	r3, [pc, #12]	; (ef18 <bt_mesh_gatt_proxy_get+0x10>)
    ef0a:	681b      	ldr	r3, [r3, #0]
    ef0c:	b10b      	cbz	r3, ef12 <bt_mesh_gatt_proxy_get+0xa>
		return conf->gatt_proxy;
    ef0e:	7a18      	ldrb	r0, [r3, #8]
    ef10:	4770      	bx	lr
	}

	return BT_MESH_GATT_PROXY_NOT_SUPPORTED;
    ef12:	2002      	movs	r0, #2
}
    ef14:	4770      	bx	lr
    ef16:	bf00      	nop
    ef18:	20000f94 	.word	0x20000f94

0000ef1c <hb_publish>:
{
    ef1c:	b538      	push	{r3, r4, r5, lr}
    ef1e:	4604      	mov	r4, r0
	struct bt_mesh_model *model = cfg->model;
    ef20:	f850 5c0c 	ldr.w	r5, [r0, #-12]
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
    ef24:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    ef26:	f7fd fbc1 	bl	c6ac <bt_mesh_subnet_get>
	if (!sub) {
    ef2a:	b908      	cbnz	r0, ef30 <hb_publish+0x14>
		cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
    ef2c:	8420      	strh	r0, [r4, #32]
}
    ef2e:	bd38      	pop	{r3, r4, r5, pc}
	if (cfg->hb_pub.count == 0) {
    ef30:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    ef32:	2900      	cmp	r1, #0
    ef34:	d0fb      	beq.n	ef2e <hb_publish+0x12>
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000;
    ef36:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    ef3a:	f00e fa9e 	bl	1d47a <hb_pwr2.constprop.10>
    ef3e:	ebc0 1240 	rsb	r2, r0, r0, lsl #5
    ef42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ef46:	00d2      	lsls	r2, r2, #3
    ef48:	b292      	uxth	r2, r2
	if (period_ms && cfg->hb_pub.count > 1) {
    ef4a:	b12a      	cbz	r2, ef58 <hb_publish+0x3c>
    ef4c:	2901      	cmp	r1, #1
    ef4e:	d903      	bls.n	ef58 <hb_publish+0x3c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ef50:	4621      	mov	r1, r4
    ef52:	4807      	ldr	r0, [pc, #28]	; (ef70 <hb_publish+0x54>)
    ef54:	f008 f8c2 	bl	170dc <k_delayed_work_submit_to_queue>
	hb_send(model);
    ef58:	4628      	mov	r0, r5
    ef5a:	f00e fc6a 	bl	1d832 <hb_send>
	if (cfg->hb_pub.count != 0xffff) {
    ef5e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    ef60:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef64:	4293      	cmp	r3, r2
		cfg->hb_pub.count--;
    ef66:	bf1c      	itt	ne
    ef68:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    ef6c:	8463      	strhne	r3, [r4, #34]	; 0x22
    ef6e:	e7de      	b.n	ef2e <hb_publish+0x12>
    ef70:	20001fc8 	.word	0x20001fc8

0000ef74 <gatt_proxy_set>:
{
    ef74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
    ef76:	6813      	ldr	r3, [r2, #0]
    ef78:	781a      	ldrb	r2, [r3, #0]
    ef7a:	2a01      	cmp	r2, #1
{
    ef7c:	4606      	mov	r6, r0
    ef7e:	460f      	mov	r7, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
    ef80:	d835      	bhi.n	efee <gatt_proxy_set+0x7a>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    ef82:	f7ff ffc1 	bl	ef08 <bt_mesh_gatt_proxy_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) ||
    ef86:	2802      	cmp	r0, #2
    ef88:	d02b      	beq.n	efe2 <gatt_proxy_set+0x6e>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    ef8a:	69b4      	ldr	r4, [r6, #24]
	if (!cfg) {
    ef8c:	b34c      	cbz	r4, efe2 <gatt_proxy_set+0x6e>
	if (cfg->gatt_proxy == buf->data[0]) {
    ef8e:	7a23      	ldrb	r3, [r4, #8]
    ef90:	4293      	cmp	r3, r2
    ef92:	d026      	beq.n	efe2 <gatt_proxy_set+0x6e>
	cfg->gatt_proxy = buf->data[0];
    ef94:	7222      	strb	r2, [r4, #8]
		bt_mesh_store_cfg();
    ef96:	f00f f93a 	bl	1e20e <bt_mesh_store_cfg>
	if (cfg->gatt_proxy == BT_MESH_GATT_PROXY_DISABLED) {
    ef9a:	7a23      	ldrb	r3, [r4, #8]
    ef9c:	b9ab      	cbnz	r3, efca <gatt_proxy_set+0x56>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    ef9e:	4d14      	ldr	r5, [pc, #80]	; (eff0 <gatt_proxy_set+0x7c>)
    efa0:	f8b5 20c0 	ldrh.w	r2, [r5, #192]	; 0xc0
    efa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    efa8:	429a      	cmp	r2, r3
    efaa:	d003      	beq.n	efb4 <gatt_proxy_set+0x40>
				bt_mesh_proxy_identity_stop(sub);
    efac:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
    efb0:	f00f fad6 	bl	1e560 <bt_mesh_proxy_identity_stop>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    efb4:	f8b5 21a4 	ldrh.w	r2, [r5, #420]	; 0x1a4
    efb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    efbc:	429a      	cmp	r2, r3
    efbe:	d002      	beq.n	efc6 <gatt_proxy_set+0x52>
				bt_mesh_proxy_identity_stop(sub);
    efc0:	480c      	ldr	r0, [pc, #48]	; (eff4 <gatt_proxy_set+0x80>)
    efc2:	f00f facd 	bl	1e560 <bt_mesh_proxy_identity_stop>
		bt_mesh_proxy_gatt_disconnect();
    efc6:	f002 f8c5 	bl	11154 <bt_mesh_proxy_gatt_disconnect>
	bt_mesh_adv_update();
    efca:	f7fc fff7 	bl	bfbc <bt_mesh_adv_update>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
    efce:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
    efd0:	f7fd fb6c 	bl	c6ac <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_PROXY) && sub) {
    efd4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    efd6:	079b      	lsls	r3, r3, #30
    efd8:	d503      	bpl.n	efe2 <gatt_proxy_set+0x6e>
    efda:	b110      	cbz	r0, efe2 <gatt_proxy_set+0x6e>
		hb_send(model);
    efdc:	4630      	mov	r0, r6
    efde:	f00e fc28 	bl	1d832 <hb_send>
	send_gatt_proxy_status(model, ctx);
    efe2:	4639      	mov	r1, r7
    efe4:	4630      	mov	r0, r6
}
    efe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	send_gatt_proxy_status(model, ctx);
    efea:	f00e bd1d 	b.w	1da28 <send_gatt_proxy_status>
}
    efee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eff0:	2000885c 	.word	0x2000885c
    eff4:	200089e4 	.word	0x200089e4

0000eff8 <bt_mesh_default_ttl_get>:

u8_t bt_mesh_default_ttl_get(void)
{
	if (conf) {
    eff8:	4b03      	ldr	r3, [pc, #12]	; (f008 <bt_mesh_default_ttl_get+0x10>)
    effa:	681b      	ldr	r3, [r3, #0]
    effc:	b10b      	cbz	r3, f002 <bt_mesh_default_ttl_get+0xa>
		return conf->default_ttl;
    effe:	7a98      	ldrb	r0, [r3, #10]
    f000:	4770      	bx	lr
	}

	return DEFAULT_TTL;
    f002:	2007      	movs	r0, #7
}
    f004:	4770      	bx	lr
    f006:	bf00      	nop
    f008:	20000f94 	.word	0x20000f94

0000f00c <bt_mesh_label_uuid_get>:
	int i;

	BT_DBG("addr 0x%04x", addr);

	for (i = 0; i < ARRAY_SIZE(labels); i++) {
		if (labels[i].addr == addr) {
    f00c:	4b0a      	ldr	r3, [pc, #40]	; (f038 <bt_mesh_label_uuid_get+0x2c>)
    f00e:	885a      	ldrh	r2, [r3, #2]
    f010:	4282      	cmp	r2, r0
    f012:	d00b      	beq.n	f02c <bt_mesh_label_uuid_get+0x20>
    f014:	8ada      	ldrh	r2, [r3, #22]
    f016:	4282      	cmp	r2, r0
    f018:	d00a      	beq.n	f030 <bt_mesh_label_uuid_get+0x24>
    f01a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    f01c:	4282      	cmp	r2, r0
    f01e:	d109      	bne.n	f034 <bt_mesh_label_uuid_get+0x28>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    f020:	2002      	movs	r0, #2
			BT_DBG("Found Label UUID for 0x%04x: %s", addr,
			       bt_hex(labels[i].uuid, 16));
			return labels[i].uuid;
    f022:	2214      	movs	r2, #20
    f024:	fb02 3000 	mla	r0, r2, r0, r3
    f028:	3004      	adds	r0, #4
    f02a:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    f02c:	2000      	movs	r0, #0
    f02e:	e7f8      	b.n	f022 <bt_mesh_label_uuid_get+0x16>
    f030:	2001      	movs	r0, #1
    f032:	e7f6      	b.n	f022 <bt_mesh_label_uuid_get+0x16>
		}
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);

	return NULL;
    f034:	2000      	movs	r0, #0
}
    f036:	4770      	bx	lr
    f038:	20002056 	.word	0x20002056

0000f03c <mod_sub_list_clear>:
{
    f03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    f040:	4f1b      	ldr	r7, [pc, #108]	; (f0b0 <mod_sub_list_clear+0x74>)
    f042:	f100 040e 	add.w	r4, r0, #14
    f046:	1f3e      	subs	r6, r7, #4
    f048:	f100 0512 	add.w	r5, r0, #18
    f04c:	46a0      	mov	r8, r4
    f04e:	f106 0918 	add.w	r9, r6, #24
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
    f052:	f834 0b02 	ldrh.w	r0, [r4], #2
    f056:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    f05a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    f05e:	d21b      	bcs.n	f098 <mod_sub_list_clear+0x5c>
		label_uuid = bt_mesh_label_uuid_get(mod->groups[i]);
    f060:	f7ff ffd4 	bl	f00c <bt_mesh_label_uuid_get>
		if (!label_uuid) {
    f064:	4682      	mov	sl, r0
    f066:	b1b8      	cbz	r0, f098 <mod_sub_list_clear+0x5c>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    f068:	4601      	mov	r1, r0
    f06a:	2210      	movs	r2, #16
    f06c:	4638      	mov	r0, r7
    f06e:	f00b f80b 	bl	1a088 <memcmp>
    f072:	b160      	cbz	r0, f08e <mod_sub_list_clear+0x52>
    f074:	2210      	movs	r2, #16
    f076:	4651      	mov	r1, sl
    f078:	4648      	mov	r0, r9
    f07a:	f00b f805 	bl	1a088 <memcmp>
    f07e:	b1a0      	cbz	r0, f0aa <mod_sub_list_clear+0x6e>
    f080:	2210      	movs	r2, #16
    f082:	4651      	mov	r1, sl
    f084:	480b      	ldr	r0, [pc, #44]	; (f0b4 <mod_sub_list_clear+0x78>)
    f086:	f00a ffff 	bl	1a088 <memcmp>
    f08a:	b928      	cbnz	r0, f098 <mod_sub_list_clear+0x5c>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    f08c:	2002      	movs	r0, #2
			labels[i].ref--;
    f08e:	2314      	movs	r3, #20
    f090:	4358      	muls	r0, r3
    f092:	5a33      	ldrh	r3, [r6, r0]
    f094:	3b01      	subs	r3, #1
    f096:	5233      	strh	r3, [r6, r0]
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    f098:	42a5      	cmp	r5, r4
    f09a:	d1da      	bne.n	f052 <mod_sub_list_clear+0x16>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
    f09c:	4640      	mov	r0, r8
    f09e:	2204      	movs	r2, #4
    f0a0:	2100      	movs	r1, #0
}
    f0a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	(void)memset(mod->groups, 0, sizeof(mod->groups));
    f0a6:	f00b b829 	b.w	1a0fc <memset>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    f0aa:	2001      	movs	r0, #1
    f0ac:	e7ef      	b.n	f08e <mod_sub_list_clear+0x52>
    f0ae:	bf00      	nop
    f0b0:	2000205a 	.word	0x2000205a
    f0b4:	20002082 	.word	0x20002082

0000f0b8 <bt_mesh_hb_pub_get>:

struct bt_mesh_hb_pub *bt_mesh_hb_pub_get(void)
{
	if (!conf) {
    f0b8:	4b02      	ldr	r3, [pc, #8]	; (f0c4 <bt_mesh_hb_pub_get+0xc>)
    f0ba:	6818      	ldr	r0, [r3, #0]
    f0bc:	b100      	cbz	r0, f0c0 <bt_mesh_hb_pub_get+0x8>
		return NULL;
	}

	return &conf->hb_pub;
    f0be:	300c      	adds	r0, #12
}
    f0c0:	4770      	bx	lr
    f0c2:	bf00      	nop
    f0c4:	20000f94 	.word	0x20000f94

0000f0c8 <bt_mesh_cfg_get>:
}

struct bt_mesh_cfg_srv *bt_mesh_cfg_get(void)
{
	return conf;
}
    f0c8:	4b01      	ldr	r3, [pc, #4]	; (f0d0 <bt_mesh_cfg_get+0x8>)
    f0ca:	6818      	ldr	r0, [r3, #0]
    f0cc:	4770      	bx	lr
    f0ce:	bf00      	nop
    f0d0:	20000f94 	.word	0x20000f94

0000f0d4 <bt_mesh_subnet_del>:
{
	int i;

	BT_DBG("NetIdx 0x%03x store %u", sub->net_idx, store);

	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
    f0d4:	4b19      	ldr	r3, [pc, #100]	; (f13c <bt_mesh_subnet_del+0x68>)
{
    f0d6:	b570      	push	{r4, r5, r6, lr}
    f0d8:	4604      	mov	r4, r0
	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
    f0da:	6818      	ldr	r0, [r3, #0]
{
    f0dc:	460e      	mov	r6, r1
	if (conf && conf->hb_pub.net_idx == sub->net_idx) {
    f0de:	b160      	cbz	r0, f0fa <bt_mesh_subnet_del+0x26>
    f0e0:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    f0e2:	8ba3      	ldrh	r3, [r4, #28]
    f0e4:	429a      	cmp	r2, r3
    f0e6:	d108      	bne.n	f0fa <bt_mesh_subnet_del+0x26>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
    f0e8:	2300      	movs	r3, #0
    f0ea:	62c3      	str	r3, [r0, #44]	; 0x2c
	cfg->hb_pub.period = 0;
    f0ec:	8603      	strh	r3, [r0, #48]	; 0x30
	k_delayed_work_cancel(&cfg->hb_pub.timer);
    f0ee:	300c      	adds	r0, #12
    f0f0:	f010 fd1c 	bl	1fb2c <k_delayed_work_cancel>
		hb_pub_disable(conf);

		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    f0f4:	b10e      	cbz	r6, f0fa <bt_mesh_subnet_del+0x26>
			bt_mesh_store_hb_pub();
    f0f6:	f00f f887 	bl	1e208 <bt_mesh_store_hb_pub>

	/* Delete any app keys bound to this NetKey index */
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx == sub->net_idx) {
    f0fa:	4d11      	ldr	r5, [pc, #68]	; (f140 <bt_mesh_subnet_del+0x6c>)
    f0fc:	8ba3      	ldrh	r3, [r4, #28]
    f0fe:	f8b5 2054 	ldrh.w	r2, [r5, #84]	; 0x54
    f102:	429a      	cmp	r2, r3
    f104:	d104      	bne.n	f110 <bt_mesh_subnet_del+0x3c>
			bt_mesh_app_key_del(key, store);
    f106:	4631      	mov	r1, r6
    f108:	f105 0054 	add.w	r0, r5, #84	; 0x54
    f10c:	f7ff fe50 	bl	edb0 <bt_mesh_app_key_del>
		if (key->net_idx == sub->net_idx) {
    f110:	f8b5 207c 	ldrh.w	r2, [r5, #124]	; 0x7c
    f114:	8ba3      	ldrh	r3, [r4, #28]
    f116:	429a      	cmp	r2, r3
    f118:	d103      	bne.n	f122 <bt_mesh_subnet_del+0x4e>
			bt_mesh_app_key_del(key, store);
    f11a:	4631      	mov	r1, r6
    f11c:	4809      	ldr	r0, [pc, #36]	; (f144 <bt_mesh_subnet_del+0x70>)
    f11e:	f7ff fe47 	bl	edb0 <bt_mesh_app_key_del>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(sub->net_idx);
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    f122:	b116      	cbz	r6, f12a <bt_mesh_subnet_del+0x56>
		bt_mesh_clear_subnet(sub);
    f124:	4620      	mov	r0, r4
    f126:	f000 fe21 	bl	fd6c <bt_mesh_clear_subnet>
	}

	(void)memset(sub, 0, sizeof(*sub));
    f12a:	22e4      	movs	r2, #228	; 0xe4
    f12c:	2100      	movs	r1, #0
    f12e:	4620      	mov	r0, r4
    f130:	f00a ffe4 	bl	1a0fc <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
    f134:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f138:	83a3      	strh	r3, [r4, #28]
}
    f13a:	bd70      	pop	{r4, r5, r6, pc}
    f13c:	20000f94 	.word	0x20000f94
    f140:	2000885c 	.word	0x2000885c
    f144:	200088d8 	.word	0x200088d8

0000f148 <bt_mesh_cfg_reset>:
	struct bt_mesh_cfg_srv *cfg = conf;
    f148:	4b17      	ldr	r3, [pc, #92]	; (f1a8 <bt_mesh_cfg_reset+0x60>)
{
    f14a:	b510      	push	{r4, lr}
	struct bt_mesh_cfg_srv *cfg = conf;
    f14c:	681c      	ldr	r4, [r3, #0]
	if (!cfg) {
    f14e:	b34c      	cbz	r4, f1a4 <bt_mesh_cfg_reset+0x5c>
	bt_mesh_set_hb_sub_dst(BT_MESH_ADDR_UNASSIGNED);
    f150:	2000      	movs	r0, #0
    f152:	f7fe fb97 	bl	d884 <bt_mesh_set_hb_sub_dst>
	cfg->hb_sub.expiry = 0;
    f156:	2200      	movs	r2, #0
    f158:	2300      	movs	r3, #0
    f15a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
    f15e:	2300      	movs	r3, #0
    f160:	6423      	str	r3, [r4, #64]	; 0x40
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    f162:	4c12      	ldr	r4, [pc, #72]	; (f1ac <bt_mesh_cfg_reset+0x64>)
    f164:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
    f168:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f16c:	429a      	cmp	r2, r3
    f16e:	d004      	beq.n	f17a <bt_mesh_cfg_reset+0x32>
			bt_mesh_subnet_del(sub, true);
    f170:	2101      	movs	r1, #1
    f172:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    f176:	f7ff ffad 	bl	f0d4 <bt_mesh_subnet_del>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    f17a:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    f17e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f182:	429a      	cmp	r2, r3
    f184:	d003      	beq.n	f18e <bt_mesh_cfg_reset+0x46>
			bt_mesh_subnet_del(sub, true);
    f186:	2101      	movs	r1, #1
    f188:	4809      	ldr	r0, [pc, #36]	; (f1b0 <bt_mesh_cfg_reset+0x68>)
    f18a:	f7ff ffa3 	bl	f0d4 <bt_mesh_subnet_del>
	bt_mesh_model_foreach(mod_reset, NULL);
    f18e:	2100      	movs	r1, #0
    f190:	4808      	ldr	r0, [pc, #32]	; (f1b4 <bt_mesh_cfg_reset+0x6c>)
    f192:	f7ff f855 	bl	e240 <bt_mesh_model_foreach>
	(void)memset(labels, 0, sizeof(labels));
    f196:	223c      	movs	r2, #60	; 0x3c
    f198:	2100      	movs	r1, #0
    f19a:	4807      	ldr	r0, [pc, #28]	; (f1b8 <bt_mesh_cfg_reset+0x70>)
}
    f19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(labels, 0, sizeof(labels));
    f1a0:	f00a bfac 	b.w	1a0fc <memset>
}
    f1a4:	bd10      	pop	{r4, pc}
    f1a6:	bf00      	nop
    f1a8:	20000f94 	.word	0x20000f94
    f1ac:	2000885c 	.word	0x2000885c
    f1b0:	200089e4 	.word	0x200089e4
    f1b4:	0001dc89 	.word	0x0001dc89
    f1b8:	20002056 	.word	0x20002056

0000f1bc <bt_mesh_health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

int bt_mesh_health_srv_init(struct bt_mesh_model *model, bool primary)
{
    f1bc:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
    f1be:	6984      	ldr	r4, [r0, #24]
{
    f1c0:	4605      	mov	r5, r0
    f1c2:	460e      	mov	r6, r1

	if (!srv) {
    f1c4:	b914      	cbnz	r4, f1cc <bt_mesh_health_srv_init+0x10>
		if (!primary) {
    f1c6:	b981      	cbnz	r1, f1ea <bt_mesh_health_srv_init+0x2e>

	if (primary) {
		health_srv = srv;
	}

	return 0;
    f1c8:	2000      	movs	r0, #0
}
    f1ca:	bd70      	pop	{r4, r5, r6, pc}
	if (!model->pub) {
    f1cc:	6883      	ldr	r3, [r0, #8]
    f1ce:	b163      	cbz	r3, f1ea <bt_mesh_health_srv_init+0x2e>
	model->pub->update = health_pub_update;
    f1d0:	4a07      	ldr	r2, [pc, #28]	; (f1f0 <bt_mesh_health_srv_init+0x34>)
    f1d2:	615a      	str	r2, [r3, #20]
	k_delayed_work_init(&srv->attn_timer, attention_off);
    f1d4:	4907      	ldr	r1, [pc, #28]	; (f1f4 <bt_mesh_health_srv_init+0x38>)
    f1d6:	f104 0008 	add.w	r0, r4, #8
    f1da:	f010 fc9f 	bl	1fb1c <k_delayed_work_init>
	srv->model = model;
    f1de:	6025      	str	r5, [r4, #0]
	if (primary) {
    f1e0:	2e00      	cmp	r6, #0
    f1e2:	d0f1      	beq.n	f1c8 <bt_mesh_health_srv_init+0xc>
		health_srv = srv;
    f1e4:	4b04      	ldr	r3, [pc, #16]	; (f1f8 <bt_mesh_health_srv_init+0x3c>)
    f1e6:	601c      	str	r4, [r3, #0]
    f1e8:	e7ee      	b.n	f1c8 <bt_mesh_health_srv_init+0xc>
		return -EINVAL;
    f1ea:	f06f 0015 	mvn.w	r0, #21
    f1ee:	e7ec      	b.n	f1ca <bt_mesh_health_srv_init+0xe>
    f1f0:	0001df55 	.word	0x0001df55
    f1f4:	0001dcd9 	.word	0x0001dcd9
    f1f8:	20000f98 	.word	0x20000f98

0000f1fc <bt_mesh_attention>:

void bt_mesh_attention(struct bt_mesh_model *model, u8_t time)
{
    f1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f200:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
    f202:	4605      	mov	r5, r0
    f204:	b9a8      	cbnz	r0, f232 <bt_mesh_attention+0x36>
		srv = health_srv;
    f206:	4b12      	ldr	r3, [pc, #72]	; (f250 <bt_mesh_attention+0x54>)
    f208:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
    f20a:	b1fc      	cbz	r4, f24c <bt_mesh_attention+0x50>
			BT_WARN("No Health Server available");
			return;
		}

		model = srv->model;
    f20c:	6825      	ldr	r5, [r4, #0]
	} else {
		srv = model->user_data;
	}

	if (time) {
    f20e:	f104 0608 	add.w	r6, r4, #8
    f212:	b187      	cbz	r7, f236 <bt_mesh_attention+0x3a>
		if (srv->cb && srv->cb->attn_on) {
    f214:	6863      	ldr	r3, [r4, #4]
    f216:	b11b      	cbz	r3, f220 <bt_mesh_attention+0x24>
    f218:	691b      	ldr	r3, [r3, #16]
    f21a:	b10b      	cbz	r3, f220 <bt_mesh_attention+0x24>
			srv->cb->attn_on(model);
    f21c:	4628      	mov	r0, r5
    f21e:	4798      	blx	r3
    f220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f224:	437a      	muls	r2, r7
    f226:	4631      	mov	r1, r6
    f228:	480a      	ldr	r0, [pc, #40]	; (f254 <bt_mesh_attention+0x58>)

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
    f22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f22e:	f007 bf55 	b.w	170dc <k_delayed_work_submit_to_queue>
		srv = model->user_data;
    f232:	6984      	ldr	r4, [r0, #24]
    f234:	e7eb      	b.n	f20e <bt_mesh_attention+0x12>
		k_delayed_work_cancel(&srv->attn_timer);
    f236:	4630      	mov	r0, r6
    f238:	f010 fc78 	bl	1fb2c <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
    f23c:	6863      	ldr	r3, [r4, #4]
    f23e:	b12b      	cbz	r3, f24c <bt_mesh_attention+0x50>
    f240:	695b      	ldr	r3, [r3, #20]
    f242:	b11b      	cbz	r3, f24c <bt_mesh_attention+0x50>
			srv->cb->attn_off(model);
    f244:	4628      	mov	r0, r5
}
    f246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
    f24a:	4718      	bx	r3
}
    f24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f250:	20000f98 	.word	0x20000f98
    f254:	20001fc8 	.word	0x20001fc8

0000f258 <key_update_find>:
	schedule_store(BT_MESH_RPL_PENDING);
}

static struct key_update *key_update_find(bool app_key, u16_t key_idx,
					  struct key_update **free_slot)
{
    f258:	b5f0      	push	{r4, r5, r6, r7, lr}
    f25a:	4c0f      	ldr	r4, [pc, #60]	; (f298 <key_update_find+0x40>)
	struct key_update *match;
	int i;

	match = NULL;
	*free_slot = NULL;
    f25c:	2300      	movs	r3, #0
{
    f25e:	4607      	mov	r7, r0
	*free_slot = NULL;
    f260:	6013      	str	r3, [r2, #0]
	match = NULL;
    f262:	4618      	mov	r0, r3
    f264:	4626      	mov	r6, r4

	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
		struct key_update *update = &key_updates[i];

		if (!update->valid) {
    f266:	eb06 0543 	add.w	r5, r6, r3, lsl #1
    f26a:	786d      	ldrb	r5, [r5, #1]
    f26c:	f015 0f10 	tst.w	r5, #16
    f270:	d106      	bne.n	f280 <key_update_find+0x28>
			*free_slot = update;
    f272:	6014      	str	r4, [r2, #0]
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
    f274:	3301      	adds	r3, #1
    f276:	2b04      	cmp	r3, #4
    f278:	f104 0402 	add.w	r4, r4, #2
    f27c:	d1f3      	bne.n	f266 <key_update_find+0xe>
			match = update;
		}
	}

	return match;
}
    f27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (update->app_key != app_key) {
    f280:	f3c5 1540 	ubfx	r5, r5, #5, #1
    f284:	42bd      	cmp	r5, r7
    f286:	d1f5      	bne.n	f274 <key_update_find+0x1c>
		if (update->key_idx == key_idx) {
    f288:	f836 5013 	ldrh.w	r5, [r6, r3, lsl #1]
    f28c:	f3c5 050b 	ubfx	r5, r5, #0, #12
			match = update;
    f290:	428d      	cmp	r5, r1
    f292:	bf08      	it	eq
    f294:	4620      	moveq	r0, r4
    f296:	e7ed      	b.n	f274 <key_update_find+0x1c>
    f298:	20002092 	.word	0x20002092

0000f29c <rpl_set>:
	if (argc < 1) {
    f29c:	2800      	cmp	r0, #0
{
    f29e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f2a2:	460b      	mov	r3, r1
    f2a4:	4616      	mov	r6, r2
	if (argc < 1) {
    f2a6:	dd46      	ble.n	f336 <rpl_set+0x9a>
	src = strtol(argv[0], NULL, 16);
    f2a8:	2210      	movs	r2, #16
    f2aa:	6818      	ldr	r0, [r3, #0]
    f2ac:	2100      	movs	r1, #0
    f2ae:	f00a fe58 	bl	19f62 <strtol>
		if (bt_mesh.rpl[i].src == src) {
    f2b2:	4a23      	ldr	r2, [pc, #140]	; (f340 <rpl_set+0xa4>)
	src = strtol(argv[0], NULL, 16);
    f2b4:	b287      	uxth	r7, r0
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    f2b6:	2300      	movs	r3, #0
    f2b8:	4690      	mov	r8, r2
		if (bt_mesh.rpl[i].src == src) {
    f2ba:	f832 1033 	ldrh.w	r1, [r2, r3, lsl #3]
    f2be:	42b9      	cmp	r1, r7
    f2c0:	d111      	bne.n	f2e6 <rpl_set+0x4a>
			return &bt_mesh.rpl[i];
    f2c2:	4c1f      	ldr	r4, [pc, #124]	; (f340 <rpl_set+0xa4>)
    f2c4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f2c8:	4630      	mov	r0, r6
    f2ca:	f00a fd15 	bl	19cf8 <settings_val_get_len_cb>
    f2ce:	4605      	mov	r5, r0
    f2d0:	b970      	cbnz	r0, f2f0 <rpl_set+0x54>
		if (entry) {
    f2d2:	b39c      	cbz	r4, f33c <rpl_set+0xa0>
			(void)memset(entry, 0, sizeof(*entry));
    f2d4:	4601      	mov	r1, r0
    f2d6:	2208      	movs	r2, #8
    f2d8:	4620      	mov	r0, r4
    f2da:	f00a ff0f 	bl	1a0fc <memset>
		return 0;
    f2de:	4628      	mov	r0, r5
}
    f2e0:	b002      	add	sp, #8
    f2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    f2e6:	3301      	adds	r3, #1
    f2e8:	2b80      	cmp	r3, #128	; 0x80
    f2ea:	d1e6      	bne.n	f2ba <rpl_set+0x1e>
	return NULL;
    f2ec:	2400      	movs	r4, #0
    f2ee:	e7eb      	b.n	f2c8 <rpl_set+0x2c>
	if (!entry) {
    f2f0:	b94c      	cbnz	r4, f306 <rpl_set+0x6a>
		if (!bt_mesh.rpl[i].src) {
    f2f2:	f838 3034 	ldrh.w	r3, [r8, r4, lsl #3]
    f2f6:	b9c3      	cbnz	r3, f32a <rpl_set+0x8e>
			bt_mesh.rpl[i].src = src;
    f2f8:	4b12      	ldr	r3, [pc, #72]	; (f344 <rpl_set+0xa8>)
    f2fa:	344d      	adds	r4, #77	; 0x4d
    f2fc:	00e4      	lsls	r4, r4, #3
    f2fe:	191a      	adds	r2, r3, r4
			return &bt_mesh.rpl[i];
    f300:	3404      	adds	r4, #4
			bt_mesh.rpl[i].src = src;
    f302:	8097      	strh	r7, [r2, #4]
			return &bt_mesh.rpl[i];
    f304:	441c      	add	r4, r3
	err = mesh_x_set(val_ctx, &rpl, sizeof(rpl));
    f306:	2204      	movs	r2, #4
    f308:	eb0d 0102 	add.w	r1, sp, r2
    f30c:	4630      	mov	r0, r6
    f30e:	f00e fe88 	bl	1e022 <mesh_x_set>
	if (err) {
    f312:	2800      	cmp	r0, #0
    f314:	d1e4      	bne.n	f2e0 <rpl_set+0x44>
	entry->seq = rpl.seq;
    f316:	9b01      	ldr	r3, [sp, #4]
    f318:	f3c3 0317 	ubfx	r3, r3, #0, #24
    f31c:	6063      	str	r3, [r4, #4]
	entry->old_iv = rpl.old_iv;
    f31e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f322:	f3c3 0300 	ubfx	r3, r3, #0, #1
    f326:	70a3      	strb	r3, [r4, #2]
	return 0;
    f328:	e7da      	b.n	f2e0 <rpl_set+0x44>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    f32a:	3401      	adds	r4, #1
    f32c:	2c80      	cmp	r4, #128	; 0x80
    f32e:	d1e0      	bne.n	f2f2 <rpl_set+0x56>
			return -ENOMEM;
    f330:	f06f 000b 	mvn.w	r0, #11
    f334:	e7d4      	b.n	f2e0 <rpl_set+0x44>
		return -ENOENT;
    f336:	f06f 0001 	mvn.w	r0, #1
    f33a:	e7d1      	b.n	f2e0 <rpl_set+0x44>
		return 0;
    f33c:	4620      	mov	r0, r4
    f33e:	e7cf      	b.n	f2e0 <rpl_set+0x44>
    f340:	20008ac8 	.word	0x20008ac8
    f344:	2000885c 	.word	0x2000885c

0000f348 <net_key_set>:
{
    f348:	b5f0      	push	{r4, r5, r6, r7, lr}
    f34a:	460b      	mov	r3, r1
    f34c:	b08b      	sub	sp, #44	; 0x2c
	net_idx = strtol(argv[0], NULL, 16);
    f34e:	2100      	movs	r1, #0
    f350:	6818      	ldr	r0, [r3, #0]
{
    f352:	4616      	mov	r6, r2
	net_idx = strtol(argv[0], NULL, 16);
    f354:	2210      	movs	r2, #16
    f356:	f00a fe04 	bl	19f62 <strtol>
    f35a:	b287      	uxth	r7, r0
	sub = bt_mesh_subnet_get(net_idx);
    f35c:	4638      	mov	r0, r7
    f35e:	f7fd f9a5 	bl	c6ac <bt_mesh_subnet_get>
    f362:	4605      	mov	r5, r0
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f364:	4630      	mov	r0, r6
    f366:	f00a fcc7 	bl	19cf8 <settings_val_get_len_cb>
    f36a:	4604      	mov	r4, r0
    f36c:	b940      	cbnz	r0, f380 <net_key_set+0x38>
		if (!sub) {
    f36e:	2d00      	cmp	r5, #0
    f370:	d056      	beq.n	f420 <net_key_set+0xd8>
		bt_mesh_subnet_del(sub, false);
    f372:	4601      	mov	r1, r0
    f374:	4628      	mov	r0, r5
    f376:	f7ff fead 	bl	f0d4 <bt_mesh_subnet_del>
}
    f37a:	4620      	mov	r0, r4
    f37c:	b00b      	add	sp, #44	; 0x2c
    f37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = mesh_x_set(val_ctx, &key, sizeof(key));
    f380:	2221      	movs	r2, #33	; 0x21
    f382:	a901      	add	r1, sp, #4
    f384:	4630      	mov	r0, r6
    f386:	f00e fe4c 	bl	1e022 <mesh_x_set>
	if (err) {
    f38a:	4604      	mov	r4, r0
    f38c:	2800      	cmp	r0, #0
    f38e:	d1f4      	bne.n	f37a <net_key_set+0x32>
	if (sub) {
    f390:	b975      	cbnz	r5, f3b0 <net_key_set+0x68>
		if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
    f392:	4b25      	ldr	r3, [pc, #148]	; (f428 <net_key_set+0xe0>)
    f394:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
    f398:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f39c:	4291      	cmp	r1, r2
    f39e:	461e      	mov	r6, r3
    f3a0:	d020      	beq.n	f3e4 <net_key_set+0x9c>
    f3a2:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
    f3a6:	4293      	cmp	r3, r2
    f3a8:	d01b      	beq.n	f3e2 <net_key_set+0x9a>
		return -ENOMEM;
    f3aa:	f06f 040b 	mvn.w	r4, #11
    f3ae:	e7e4      	b.n	f37a <net_key_set+0x32>
		sub->kr_flag = key.kr_flag;
    f3b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f3b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
    f3b8:	77ab      	strb	r3, [r5, #30]
		sub->kr_phase = key.kr_phase;
    f3ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f3be:	f3c3 0346 	ubfx	r3, r3, #1, #7
		memcpy(sub->keys[0].net, &key.val[0], 16);
    f3c2:	2210      	movs	r2, #16
    f3c4:	f10d 0105 	add.w	r1, sp, #5
		sub->kr_phase = key.kr_phase;
    f3c8:	77eb      	strb	r3, [r5, #31]
		memcpy(sub->keys[0].net, &key.val[0], 16);
    f3ca:	f105 0030 	add.w	r0, r5, #48	; 0x30
    f3ce:	f00a fe6b 	bl	1a0a8 <memcpy>
		memcpy(sub->keys[1].net, &key.val[1], 16);
    f3d2:	2210      	movs	r2, #16
    f3d4:	f10d 0115 	add.w	r1, sp, #21
    f3d8:	f105 0089 	add.w	r0, r5, #137	; 0x89
	memcpy(sub->keys[1].net, &key.val[1], 16);
    f3dc:	f00a fe64 	bl	1a0a8 <memcpy>
	return 0;
    f3e0:	e7cb      	b.n	f37a <net_key_set+0x32>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    f3e2:	2001      	movs	r0, #1
			sub = &bt_mesh.sub[i];
    f3e4:	25e4      	movs	r5, #228	; 0xe4
    f3e6:	4345      	muls	r5, r0
	sub->kr_flag = key.kr_flag;
    f3e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
	sub->net_idx = net_idx;
    f3ec:	1972      	adds	r2, r6, r5
	sub->kr_flag = key.kr_flag;
    f3ee:	f3c3 0100 	ubfx	r1, r3, #0, #1
	memcpy(sub->keys[0].net, &key.val[0], 16);
    f3f2:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
	sub->kr_phase = key.kr_phase;
    f3f6:	f3c3 0346 	ubfx	r3, r3, #1, #7
	sub->kr_flag = key.kr_flag;
    f3fa:	f882 10c2 	strb.w	r1, [r2, #194]	; 0xc2
	sub->net_idx = net_idx;
    f3fe:	f8a2 70c0 	strh.w	r7, [r2, #192]	; 0xc0
	sub->kr_phase = key.kr_phase;
    f402:	f882 30c3 	strb.w	r3, [r2, #195]	; 0xc3
	memcpy(sub->keys[0].net, &key.val[0], 16);
    f406:	f10d 0105 	add.w	r1, sp, #5
    f40a:	2210      	movs	r2, #16
    f40c:	4430      	add	r0, r6
    f40e:	f00a fe4b 	bl	1a0a8 <memcpy>
	memcpy(sub->keys[1].net, &key.val[1], 16);
    f412:	f205 102d 	addw	r0, r5, #301	; 0x12d
    f416:	2210      	movs	r2, #16
    f418:	f10d 0115 	add.w	r1, sp, #21
    f41c:	4430      	add	r0, r6
    f41e:	e7dd      	b.n	f3dc <net_key_set+0x94>
			return -ENOENT;
    f420:	f06f 0401 	mvn.w	r4, #1
    f424:	e7a9      	b.n	f37a <net_key_set+0x32>
    f426:	bf00      	nop
    f428:	2000885c 	.word	0x2000885c

0000f42c <store_net_key>:
{
    f42c:	b510      	push	{r4, lr}
    f42e:	b08e      	sub	sp, #56	; 0x38
    f430:	4604      	mov	r4, r0
	memcpy(&key.val[0], sub->keys[0].net, 16);
    f432:	f100 0130 	add.w	r1, r0, #48	; 0x30
    f436:	2210      	movs	r2, #16
    f438:	f10d 0015 	add.w	r0, sp, #21
    f43c:	f00a fe34 	bl	1a0a8 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
    f440:	f104 0189 	add.w	r1, r4, #137	; 0x89
    f444:	2210      	movs	r2, #16
    f446:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    f44a:	f00a fe2d 	bl	1a0a8 <memcpy>
	key.kr_flag = sub->kr_flag;
    f44e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    f452:	7fa2      	ldrb	r2, [r4, #30]
    f454:	f362 0300 	bfi	r3, r2, #0, #1
	key.kr_phase = sub->kr_phase;
    f458:	7fe2      	ldrb	r2, [r4, #31]
    f45a:	f362 0347 	bfi	r3, r2, #1, #7
    f45e:	f88d 3014 	strb.w	r3, [sp, #20]
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", sub->net_idx);
    f462:	4a06      	ldr	r2, [pc, #24]	; (f47c <store_net_key+0x50>)
    f464:	8ba3      	ldrh	r3, [r4, #28]
    f466:	2114      	movs	r1, #20
    f468:	4668      	mov	r0, sp
    f46a:	f7f7 fc91 	bl	6d90 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
    f46e:	2221      	movs	r2, #33	; 0x21
    f470:	a905      	add	r1, sp, #20
    f472:	4668      	mov	r0, sp
    f474:	f7f8 f896 	bl	75a4 <settings_save_one>
}
    f478:	b00e      	add	sp, #56	; 0x38
    f47a:	bd10      	pop	{r4, pc}
    f47c:	00021c90 	.word	0x00021c90

0000f480 <store_app_key>:
{
    f480:	b510      	push	{r4, lr}
    f482:	b08e      	sub	sp, #56	; 0x38
	key.net_idx = app->net_idx;
    f484:	8803      	ldrh	r3, [r0, #0]
    f486:	f8ad 3014 	strh.w	r3, [sp, #20]
{
    f48a:	4604      	mov	r4, r0
	key.updated = app->updated;
    f48c:	7903      	ldrb	r3, [r0, #4]
    f48e:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
    f492:	1d81      	adds	r1, r0, #6
    f494:	2210      	movs	r2, #16
    f496:	f10d 0017 	add.w	r0, sp, #23
    f49a:	f00a fe05 	bl	1a0a8 <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
    f49e:	f104 0117 	add.w	r1, r4, #23
    f4a2:	2210      	movs	r2, #16
    f4a4:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f4a8:	f00a fdfe 	bl	1a0a8 <memcpy>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app->app_idx);
    f4ac:	8863      	ldrh	r3, [r4, #2]
    f4ae:	4a06      	ldr	r2, [pc, #24]	; (f4c8 <store_app_key+0x48>)
    f4b0:	2114      	movs	r1, #20
    f4b2:	4668      	mov	r0, sp
    f4b4:	f7f7 fc6c 	bl	6d90 <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
    f4b8:	2223      	movs	r2, #35	; 0x23
    f4ba:	a905      	add	r1, sp, #20
    f4bc:	4668      	mov	r0, sp
    f4be:	f7f8 f871 	bl	75a4 <settings_save_one>
}
    f4c2:	b00e      	add	sp, #56	; 0x38
    f4c4:	bd10      	pop	{r4, pc}
    f4c6:	bf00      	nop
    f4c8:	00021c7e 	.word	0x00021c7e

0000f4cc <mesh_set>:
{
    f4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (argc < 1) {
    f4d0:	1e07      	subs	r7, r0, #0
{
    f4d2:	460e      	mov	r6, r1
    f4d4:	4690      	mov	r8, r2
	if (argc < 1) {
    f4d6:	dd17      	ble.n	f508 <mesh_set+0x3c>
		if (!strcmp(settings[i].name, argv[0])) {
    f4d8:	4d0d      	ldr	r5, [pc, #52]	; (f510 <mesh_set+0x44>)
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
    f4da:	2400      	movs	r4, #0
		if (!strcmp(settings[i].name, argv[0])) {
    f4dc:	6831      	ldr	r1, [r6, #0]
    f4de:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
    f4e2:	f00a fdc5 	bl	1a070 <strcmp>
    f4e6:	b940      	cbnz	r0, f4fa <mesh_set+0x2e>
			return settings[i].func(argc, argv, val_ctx);
    f4e8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    f4ec:	4642      	mov	r2, r8
    f4ee:	6863      	ldr	r3, [r4, #4]
    f4f0:	1d31      	adds	r1, r6, #4
    f4f2:	1e78      	subs	r0, r7, #1
}
    f4f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return settings[i].func(argc, argv, val_ctx);
    f4f8:	4718      	bx	r3
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
    f4fa:	3401      	adds	r4, #1
    f4fc:	2c0a      	cmp	r4, #10
    f4fe:	d1ed      	bne.n	f4dc <mesh_set+0x10>
	return -ENOENT;
    f500:	f06f 0001 	mvn.w	r0, #1
}
    f504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    f508:	f06f 0015 	mvn.w	r0, #21
    f50c:	e7fa      	b.n	f504 <mesh_set+0x38>
    f50e:	bf00      	nop
    f510:	00020a2c 	.word	0x00020a2c

0000f514 <mod_set>:
	if (argc < 2) {
    f514:	2901      	cmp	r1, #1
{
    f516:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f518:	4605      	mov	r5, r0
    f51a:	4614      	mov	r4, r2
    f51c:	461e      	mov	r6, r3
	if (argc < 2) {
    f51e:	dc04      	bgt.n	f52a <mod_set+0x16>
		return -ENOENT;
    f520:	f06f 0401 	mvn.w	r4, #1
}
    f524:	4620      	mov	r0, r4
    f526:	b002      	add	sp, #8
    f528:	bd70      	pop	{r4, r5, r6, pc}
	mod_key = strtol(argv[0], NULL, 16);
    f52a:	2210      	movs	r2, #16
    f52c:	2100      	movs	r1, #0
    f52e:	6820      	ldr	r0, [r4, #0]
    f530:	f00a fd17 	bl	19f62 <strtol>
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
    f534:	b2c2      	uxtb	r2, r0
    f536:	f3c0 2107 	ubfx	r1, r0, #8, #8
    f53a:	4628      	mov	r0, r5
    f53c:	f7fe ff0e 	bl	e35c <bt_mesh_model_get>
	if (!mod) {
    f540:	4605      	mov	r5, r0
    f542:	2800      	cmp	r0, #0
    f544:	d0ec      	beq.n	f520 <mod_set+0xc>
	if (!strcmp(argv[1], "bind")) {
    f546:	492d      	ldr	r1, [pc, #180]	; (f5fc <mod_set+0xe8>)
    f548:	6860      	ldr	r0, [r4, #4]
    f54a:	f00a fd91 	bl	1a070 <strcmp>
    f54e:	b988      	cbnz	r0, f574 <mod_set+0x60>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    f550:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f554:	81ab      	strh	r3, [r5, #12]
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f556:	4630      	mov	r0, r6
    f558:	f00a fbce 	bl	19cf8 <settings_val_get_len_cb>
    f55c:	b908      	cbnz	r0, f562 <mod_set+0x4e>
		return 0;
    f55e:	2400      	movs	r4, #0
    f560:	e7e0      	b.n	f524 <mod_set+0x10>
	len = settings_val_read_cb(val_ctx, mod->keys, sizeof(mod->keys));
    f562:	2202      	movs	r2, #2
    f564:	f105 010c 	add.w	r1, r5, #12
	len = settings_val_read_cb(val_ctx, mod->groups, sizeof(mod->groups));
    f568:	4630      	mov	r0, r6
    f56a:	f00a fba8 	bl	19cbe <settings_val_read_cb>
	if (len < 0) {
    f56e:	ea00 74e0 	and.w	r4, r0, r0, asr #31
    f572:	e7d7      	b.n	f524 <mod_set+0x10>
	if (!strcmp(argv[1], "sub")) {
    f574:	4922      	ldr	r1, [pc, #136]	; (f600 <mod_set+0xec>)
    f576:	6860      	ldr	r0, [r4, #4]
    f578:	f00a fd7a 	bl	1a070 <strcmp>
    f57c:	4601      	mov	r1, r0
    f57e:	b960      	cbnz	r0, f59a <mod_set+0x86>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
    f580:	350e      	adds	r5, #14
    f582:	2204      	movs	r2, #4
    f584:	4628      	mov	r0, r5
    f586:	f00a fdb9 	bl	1a0fc <memset>
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f58a:	4630      	mov	r0, r6
    f58c:	f00a fbb4 	bl	19cf8 <settings_val_get_len_cb>
    f590:	2800      	cmp	r0, #0
    f592:	d0e4      	beq.n	f55e <mod_set+0x4a>
	len = settings_val_read_cb(val_ctx, mod->groups, sizeof(mod->groups));
    f594:	2204      	movs	r2, #4
    f596:	4629      	mov	r1, r5
    f598:	e7e6      	b.n	f568 <mod_set+0x54>
	if (!strcmp(argv[1], "pub")) {
    f59a:	6860      	ldr	r0, [r4, #4]
    f59c:	4919      	ldr	r1, [pc, #100]	; (f604 <mod_set+0xf0>)
    f59e:	f00a fd67 	bl	1a070 <strcmp>
    f5a2:	4604      	mov	r4, r0
    f5a4:	2800      	cmp	r0, #0
    f5a6:	d1bb      	bne.n	f520 <mod_set+0xc>
	if (!mod->pub) {
    f5a8:	68ab      	ldr	r3, [r5, #8]
    f5aa:	b31b      	cbz	r3, f5f4 <mod_set+0xe0>
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f5ac:	4630      	mov	r0, r6
    f5ae:	f00a fba3 	bl	19cf8 <settings_val_get_len_cb>
    f5b2:	b930      	cbnz	r0, f5c2 <mod_set+0xae>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    f5b4:	68ab      	ldr	r3, [r5, #8]
		mod->pub->ttl = 0;
    f5b6:	689a      	ldr	r2, [r3, #8]
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    f5b8:	605c      	str	r4, [r3, #4]
		mod->pub->ttl = 0;
    f5ba:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
    f5be:	609a      	str	r2, [r3, #8]
		return 0;
    f5c0:	e7b0      	b.n	f524 <mod_set+0x10>
	err = mesh_x_set(val_ctx, &pub, sizeof(pub));
    f5c2:	2208      	movs	r2, #8
    f5c4:	4669      	mov	r1, sp
    f5c6:	4630      	mov	r0, r6
    f5c8:	f00e fd2b 	bl	1e022 <mesh_x_set>
	if (err) {
    f5cc:	4604      	mov	r4, r0
    f5ce:	2800      	cmp	r0, #0
    f5d0:	d1a8      	bne.n	f524 <mod_set+0x10>
	mod->pub->addr = pub.addr;
    f5d2:	68aa      	ldr	r2, [r5, #8]
    f5d4:	9b00      	ldr	r3, [sp, #0]
    f5d6:	6053      	str	r3, [r2, #4]
	mod->pub->ttl = pub.ttl;
    f5d8:	9901      	ldr	r1, [sp, #4]
    f5da:	6893      	ldr	r3, [r2, #8]
    f5dc:	f021 416f 	bic.w	r1, r1, #4009754624	; 0xef000000
    f5e0:	f003 436f 	and.w	r3, r3, #4009754624	; 0xef000000
    f5e4:	430b      	orrs	r3, r1
    f5e6:	6093      	str	r3, [r2, #8]
	mod->pub->count = 0;
    f5e8:	f3c3 6307 	ubfx	r3, r3, #24, #8
    f5ec:	f360 1347 	bfi	r3, r0, #5, #3
    f5f0:	72d3      	strb	r3, [r2, #11]
	return 0;
    f5f2:	e797      	b.n	f524 <mod_set+0x10>
		return -EINVAL;
    f5f4:	f06f 0415 	mvn.w	r4, #21
		return mod_set_pub(mod, val_ctx);
    f5f8:	e794      	b.n	f524 <mod_set+0x10>
    f5fa:	bf00      	nop
    f5fc:	00021c71 	.word	0x00021c71
    f600:	00021c76 	.word	0x00021c76
    f604:	00021c7a 	.word	0x00021c7a

0000f608 <seq_set>:
{
    f608:	b513      	push	{r0, r1, r4, lr}
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f60a:	4610      	mov	r0, r2
{
    f60c:	4614      	mov	r4, r2
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f60e:	f00a fb73 	bl	19cf8 <settings_val_get_len_cb>
    f612:	b918      	cbnz	r0, f61c <seq_set+0x14>
		bt_mesh.seq = 0U;
    f614:	4b0d      	ldr	r3, [pc, #52]	; (f64c <seq_set+0x44>)
    f616:	6058      	str	r0, [r3, #4]
}
    f618:	b002      	add	sp, #8
    f61a:	bd10      	pop	{r4, pc}
	err = mesh_x_set(val_ctx, &seq, sizeof(seq));
    f61c:	2203      	movs	r2, #3
    f61e:	a901      	add	r1, sp, #4
    f620:	4620      	mov	r0, r4
    f622:	f00e fcfe 	bl	1e022 <mesh_x_set>
	if (err) {
    f626:	2800      	cmp	r0, #0
    f628:	d1f6      	bne.n	f618 <seq_set+0x10>
		       ((u32_t)seq.val[2] << 16));
    f62a:	f89d 3006 	ldrb.w	r3, [sp, #6]
	bt_mesh.seq = ((u32_t)seq.val[0] | ((u32_t)seq.val[1] << 8) |
    f62e:	f89d 2005 	ldrb.w	r2, [sp, #5]
		       ((u32_t)seq.val[2] << 16));
    f632:	041b      	lsls	r3, r3, #16
	bt_mesh.seq = ((u32_t)seq.val[0] | ((u32_t)seq.val[1] << 8) |
    f634:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    f638:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f63c:	4313      	orrs	r3, r2
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
    f63e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
    f642:	4a02      	ldr	r2, [pc, #8]	; (f64c <seq_set+0x44>)
    f644:	337f      	adds	r3, #127	; 0x7f
    f646:	6053      	str	r3, [r2, #4]
	return 0;
    f648:	e7e6      	b.n	f618 <seq_set+0x10>
    f64a:	bf00      	nop
    f64c:	2000885c 	.word	0x2000885c

0000f650 <cfg_set>:
{
    f650:	b538      	push	{r3, r4, r5, lr}
    f652:	4615      	mov	r5, r2
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
    f654:	f7ff fd38 	bl	f0c8 <bt_mesh_cfg_get>
	if (!cfg) {
    f658:	b180      	cbz	r0, f67c <cfg_set+0x2c>
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f65a:	4628      	mov	r0, r5
    f65c:	f00a fb4c 	bl	19cf8 <settings_val_get_len_cb>
    f660:	4c08      	ldr	r4, [pc, #32]	; (f684 <cfg_set+0x34>)
    f662:	b908      	cbnz	r0, f668 <cfg_set+0x18>
		stored_cfg.valid = false;
    f664:	7020      	strb	r0, [r4, #0]
}
    f666:	bd38      	pop	{r3, r4, r5, pc}
	err = mesh_x_set(val_ctx, &stored_cfg.cfg, sizeof(stored_cfg.cfg));
    f668:	2207      	movs	r2, #7
    f66a:	1c61      	adds	r1, r4, #1
    f66c:	4628      	mov	r0, r5
    f66e:	f00e fcd8 	bl	1e022 <mesh_x_set>
	if (err) {
    f672:	2800      	cmp	r0, #0
    f674:	d1f7      	bne.n	f666 <cfg_set+0x16>
	stored_cfg.valid = true;
    f676:	2301      	movs	r3, #1
    f678:	7023      	strb	r3, [r4, #0]
	return 0;
    f67a:	e7f4      	b.n	f666 <cfg_set+0x16>
		return -ENOENT;
    f67c:	f06f 0001 	mvn.w	r0, #1
    f680:	e7f1      	b.n	f666 <cfg_set+0x16>
    f682:	bf00      	nop
    f684:	20002579 	.word	0x20002579

0000f688 <net_set>:
{
    f688:	b530      	push	{r4, r5, lr}
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f68a:	4610      	mov	r0, r2
{
    f68c:	b087      	sub	sp, #28
    f68e:	4615      	mov	r5, r2
	if (settings_val_get_len_cb(val_ctx) == 0) {
    f690:	f00a fb32 	bl	19cf8 <settings_val_get_len_cb>
    f694:	4604      	mov	r4, r0
    f696:	b948      	cbnz	r0, f6ac <net_set+0x24>
		bt_mesh_comp_unprovision();
    f698:	f7fe fea6 	bl	e3e8 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    f69c:	2210      	movs	r2, #16
    f69e:	4621      	mov	r1, r4
    f6a0:	480c      	ldr	r0, [pc, #48]	; (f6d4 <net_set+0x4c>)
    f6a2:	f00a fd2b 	bl	1a0fc <memset>
}
    f6a6:	4620      	mov	r0, r4
    f6a8:	b007      	add	sp, #28
    f6aa:	bd30      	pop	{r4, r5, pc}
	err = mesh_x_set(val_ctx, &net, sizeof(net));
    f6ac:	2212      	movs	r2, #18
    f6ae:	a901      	add	r1, sp, #4
    f6b0:	4628      	mov	r0, r5
    f6b2:	f00e fcb6 	bl	1e022 <mesh_x_set>
	if (err) {
    f6b6:	4604      	mov	r4, r0
    f6b8:	2800      	cmp	r0, #0
    f6ba:	d1f4      	bne.n	f6a6 <net_set+0x1e>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
    f6bc:	2210      	movs	r2, #16
    f6be:	f10d 0106 	add.w	r1, sp, #6
    f6c2:	4804      	ldr	r0, [pc, #16]	; (f6d4 <net_set+0x4c>)
    f6c4:	f00a fcf0 	bl	1a0a8 <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
    f6c8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    f6cc:	f7fe fe76 	bl	e3bc <bt_mesh_comp_provision>
	return 0;
    f6d0:	e7e9      	b.n	f6a6 <net_set+0x1e>
    f6d2:	bf00      	nop
    f6d4:	200088a0 	.word	0x200088a0

0000f6d8 <atomic_test_bit.constprop.12>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f6d8:	4b05      	ldr	r3, [pc, #20]	; (f6f0 <atomic_test_bit.constprop.12+0x18>)
    f6da:	f3bf 8f5b 	dmb	ish
    f6de:	681b      	ldr	r3, [r3, #0]
    f6e0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f6e4:	fa43 f000 	asr.w	r0, r3, r0
}
    f6e8:	f000 0001 	and.w	r0, r0, #1
    f6ec:	4770      	bx	lr
    f6ee:	bf00      	nop
    f6f0:	20008864 	.word	0x20008864

0000f6f4 <encode_mod_path.constprop.13>:
static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
    f6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f6f6:	4604      	mov	r4, r0
    f6f8:	4618      	mov	r0, r3
	u16_t mod_key = (((u16_t)mod->elem_idx << 8) | mod->mod_idx);
    f6fa:	7925      	ldrb	r5, [r4, #4]
    f6fc:	7963      	ldrb	r3, [r4, #5]
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
    f6fe:	9200      	str	r2, [sp, #0]
    f700:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (vnd) {
    f704:	b129      	cbz	r1, f712 <encode_mod_path.constprop.13+0x1e>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
    f706:	4a04      	ldr	r2, [pc, #16]	; (f718 <encode_mod_path.constprop.13+0x24>)
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
    f708:	2114      	movs	r1, #20
    f70a:	f7f7 fb41 	bl	6d90 <snprintk>
}
    f70e:	b003      	add	sp, #12
    f710:	bd30      	pop	{r4, r5, pc}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
    f712:	4a02      	ldr	r2, [pc, #8]	; (f71c <encode_mod_path.constprop.13+0x28>)
    f714:	e7f8      	b.n	f708 <encode_mod_path.constprop.13+0x14>
    f716:	bf00      	nop
    f718:	00021c51 	.word	0x00021c51
    f71c:	00021c61 	.word	0x00021c61

0000f720 <store_pending_mod>:
{
    f720:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!mod->flags) {
    f722:	88c3      	ldrh	r3, [r0, #6]
{
    f724:	b089      	sub	sp, #36	; 0x24
    f726:	4604      	mov	r4, r0
    f728:	4617      	mov	r7, r2
	if (!mod->flags) {
    f72a:	2b00      	cmp	r3, #0
    f72c:	d057      	beq.n	f7de <store_pending_mod+0xbe>
	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
    f72e:	07d8      	lsls	r0, r3, #31
    f730:	d516      	bpl.n	f760 <store_pending_mod+0x40>
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
    f732:	f023 0301 	bic.w	r3, r3, #1
    f736:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
    f738:	89a3      	ldrh	r3, [r4, #12]
    f73a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f73e:	4293      	cmp	r3, r2
			keys[count++] = mod->keys[i];
    f740:	bf1a      	itte	ne
    f742:	f8ad 3004 	strhne.w	r3, [sp, #4]
    f746:	2501      	movne	r5, #1
	for (i = 0, count = 0; i < ARRAY_SIZE(mod->keys); i++) {
    f748:	2500      	moveq	r5, #0
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
    f74a:	4a28      	ldr	r2, [pc, #160]	; (f7ec <store_pending_mod+0xcc>)
    f74c:	4639      	mov	r1, r7
    f74e:	4620      	mov	r0, r4
    f750:	ab03      	add	r3, sp, #12
    f752:	f7ff ffcf 	bl	f6f4 <encode_mod_path.constprop.13>
	err = settings_save_one(path, keys, count * sizeof(keys[0]));
    f756:	006a      	lsls	r2, r5, #1
    f758:	a901      	add	r1, sp, #4
    f75a:	a803      	add	r0, sp, #12
    f75c:	f7f7 ff22 	bl	75a4 <settings_save_one>
	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
    f760:	88e3      	ldrh	r3, [r4, #6]
    f762:	0799      	lsls	r1, r3, #30
    f764:	d51a      	bpl.n	f79c <store_pending_mod+0x7c>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    f766:	89e5      	ldrh	r5, [r4, #14]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
    f768:	f023 0302 	bic.w	r3, r3, #2
    f76c:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    f76e:	b115      	cbz	r5, f776 <store_pending_mod+0x56>
			groups[count++] = mod->groups[i];
    f770:	f8ad 5004 	strh.w	r5, [sp, #4]
    f774:	2501      	movs	r5, #1
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    f776:	8a23      	ldrh	r3, [r4, #16]
    f778:	b12b      	cbz	r3, f786 <store_pending_mod+0x66>
			groups[count++] = mod->groups[i];
    f77a:	aa08      	add	r2, sp, #32
    f77c:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    f780:	3501      	adds	r5, #1
    f782:	f822 3c1c 	strh.w	r3, [r2, #-28]
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
    f786:	4a1a      	ldr	r2, [pc, #104]	; (f7f0 <store_pending_mod+0xd0>)
    f788:	4639      	mov	r1, r7
    f78a:	4620      	mov	r0, r4
    f78c:	ab03      	add	r3, sp, #12
    f78e:	f7ff ffb1 	bl	f6f4 <encode_mod_path.constprop.13>
	err = settings_save_one(path, groups, count * sizeof(groups[0]));
    f792:	006a      	lsls	r2, r5, #1
    f794:	a901      	add	r1, sp, #4
    f796:	a803      	add	r0, sp, #12
    f798:	f7f7 ff04 	bl	75a4 <settings_save_one>
	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
    f79c:	88e3      	ldrh	r3, [r4, #6]
    f79e:	075a      	lsls	r2, r3, #29
    f7a0:	d51d      	bpl.n	f7de <store_pending_mod+0xbe>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    f7a2:	68a5      	ldr	r5, [r4, #8]
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
    f7a4:	f023 0304 	bic.w	r3, r3, #4
    f7a8:	80e3      	strh	r3, [r4, #6]
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    f7aa:	b1d5      	cbz	r5, f7e2 <store_pending_mod+0xc2>
    f7ac:	88ae      	ldrh	r6, [r5, #4]
    f7ae:	b1d6      	cbz	r6, f7e6 <store_pending_mod+0xc6>
		pub.addr = mod->pub->addr;
    f7b0:	686b      	ldr	r3, [r5, #4]
    f7b2:	9301      	str	r3, [sp, #4]
		pub.ttl = mod->pub->ttl;
    f7b4:	68aa      	ldr	r2, [r5, #8]
    f7b6:	9b02      	ldr	r3, [sp, #8]
    f7b8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    f7bc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    f7c0:	4313      	orrs	r3, r2
    f7c2:	9302      	str	r3, [sp, #8]
		len = sizeof(pub);
    f7c4:	2608      	movs	r6, #8
		val = &pub;
    f7c6:	ad01      	add	r5, sp, #4
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
    f7c8:	4a0a      	ldr	r2, [pc, #40]	; (f7f4 <store_pending_mod+0xd4>)
    f7ca:	4639      	mov	r1, r7
    f7cc:	4620      	mov	r0, r4
    f7ce:	ab03      	add	r3, sp, #12
    f7d0:	f7ff ff90 	bl	f6f4 <encode_mod_path.constprop.13>
	err = settings_save_one(path, val, len);
    f7d4:	4632      	mov	r2, r6
    f7d6:	4629      	mov	r1, r5
    f7d8:	a803      	add	r0, sp, #12
    f7da:	f7f7 fee3 	bl	75a4 <settings_save_one>
}
    f7de:	b009      	add	sp, #36	; 0x24
    f7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    f7e2:	462e      	mov	r6, r5
    f7e4:	e7f0      	b.n	f7c8 <store_pending_mod+0xa8>
		val = NULL;
    f7e6:	4635      	mov	r5, r6
    f7e8:	e7ee      	b.n	f7c8 <store_pending_mod+0xa8>
    f7ea:	bf00      	nop
    f7ec:	00021c71 	.word	0x00021c71
    f7f0:	00021c76 	.word	0x00021c76
    f7f4:	00021c7a 	.word	0x00021c7a

0000f7f8 <mesh_commit>:
{
    f7f8:	b538      	push	{r3, r4, r5, lr}
	if (bt_mesh.sub[0].net_idx == BT_MESH_KEY_UNUSED) {
    f7fa:	4c4f      	ldr	r4, [pc, #316]	; (f938 <mesh_commit+0x140>)
    f7fc:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
    f800:	f64f 75ff 	movw	r5, #65535	; 0xffff
    f804:	42ab      	cmp	r3, r5
    f806:	d07f      	beq.n	f908 <mesh_commit+0x110>
		bt_mesh_proxy_prov_disable();
    f808:	f001 fc64 	bl	110d4 <bt_mesh_proxy_prov_disable>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    f80c:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
    f810:	42ab      	cmp	r3, r5
    f812:	d010      	beq.n	f836 <mesh_commit+0x3e>
	err = bt_mesh_net_keys_create(&sub->keys[0], sub->keys[0].net);
    f814:	f104 01d4 	add.w	r1, r4, #212	; 0xd4
    f818:	4608      	mov	r0, r1
    f81a:	f7fc ff65 	bl	c6e8 <bt_mesh_net_keys_create>
	if (err) {
    f81e:	4605      	mov	r5, r0
    f820:	b948      	cbnz	r0, f836 <mesh_commit+0x3e>
	if (sub->kr_phase != BT_MESH_KR_NORMAL) {
    f822:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    f826:	2b00      	cmp	r3, #0
    f828:	d170      	bne.n	f90c <mesh_commit+0x114>
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    f82a:	2300      	movs	r3, #0
    f82c:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	bt_mesh_net_beacon_update(sub);
    f830:	4842      	ldr	r0, [pc, #264]	; (f93c <mesh_commit+0x144>)
    f832:	f7fc ff8f 	bl	c754 <bt_mesh_net_beacon_update>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    f836:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    f83a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f83e:	429a      	cmp	r2, r3
    f840:	d014      	beq.n	f86c <mesh_commit+0x74>
	err = bt_mesh_net_keys_create(&sub->keys[0], sub->keys[0].net);
    f842:	493f      	ldr	r1, [pc, #252]	; (f940 <mesh_commit+0x148>)
    f844:	4608      	mov	r0, r1
    f846:	f7fc ff4f 	bl	c6e8 <bt_mesh_net_keys_create>
	if (err) {
    f84a:	4605      	mov	r5, r0
    f84c:	b970      	cbnz	r0, f86c <mesh_commit+0x74>
	if (sub->kr_phase != BT_MESH_KR_NORMAL) {
    f84e:	f894 31a7 	ldrb.w	r3, [r4, #423]	; 0x1a7
    f852:	2b00      	cmp	r3, #0
    f854:	d068      	beq.n	f928 <mesh_commit+0x130>
		err = bt_mesh_net_keys_create(&sub->keys[1], sub->keys[1].net);
    f856:	493b      	ldr	r1, [pc, #236]	; (f944 <mesh_commit+0x14c>)
    f858:	4608      	mov	r0, r1
    f85a:	f7fc ff45 	bl	c6e8 <bt_mesh_net_keys_create>
		if (err) {
    f85e:	2800      	cmp	r0, #0
    f860:	d062      	beq.n	f928 <mesh_commit+0x130>
			(void)memset(&sub->keys[0], 0, sizeof(sub->keys[0]));
    f862:	2259      	movs	r2, #89	; 0x59
    f864:	4629      	mov	r1, r5
    f866:	4836      	ldr	r0, [pc, #216]	; (f940 <mesh_commit+0x148>)
    f868:	f00a fc48 	bl	1a0fc <memset>
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    f86c:	f894 3020 	ldrb.w	r3, [r4, #32]
    f870:	2b5f      	cmp	r3, #95	; 0x5f
    f872:	d804      	bhi.n	f87e <mesh_commit+0x86>
    f874:	4a34      	ldr	r2, [pc, #208]	; (f948 <mesh_commit+0x150>)
    f876:	4935      	ldr	r1, [pc, #212]	; (f94c <mesh_commit+0x154>)
    f878:	4835      	ldr	r0, [pc, #212]	; (f950 <mesh_commit+0x158>)
    f87a:	f007 fc2f 	bl	170dc <k_delayed_work_submit_to_queue>
	bt_mesh_model_foreach(commit_mod, NULL);
    f87e:	2100      	movs	r1, #0
    f880:	4834      	ldr	r0, [pc, #208]	; (f954 <mesh_commit+0x15c>)
    f882:	f7fe fcdd 	bl	e240 <bt_mesh_model_foreach>
	hb_pub = bt_mesh_hb_pub_get();
    f886:	f7ff fc17 	bl	f0b8 <bt_mesh_hb_pub_get>
	if (hb_pub && hb_pub->dst != BT_MESH_ADDR_UNASSIGNED &&
    f88a:	4601      	mov	r1, r0
    f88c:	b1c8      	cbz	r0, f8c2 <mesh_commit+0xca>
    f88e:	8c03      	ldrh	r3, [r0, #32]
    f890:	b1bb      	cbz	r3, f8c2 <mesh_commit+0xca>
    f892:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    f894:	b1ab      	cbz	r3, f8c2 <mesh_commit+0xca>
	    hb_pub->count && hb_pub->period) {
    f896:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    f89a:	b193      	cbz	r3, f8c2 <mesh_commit+0xca>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f89c:	f3bf 8f5b 	dmb	ish
    f8a0:	f100 0308 	add.w	r3, r0, #8
    f8a4:	e853 2f00 	ldrex	r2, [r3]
    f8a8:	f042 0001 	orr.w	r0, r2, #1
    f8ac:	e843 0400 	strex	r4, r0, [r3]
    f8b0:	2c00      	cmp	r4, #0
    f8b2:	d1f7      	bne.n	f8a4 <mesh_commit+0xac>
    f8b4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f8b8:	07d3      	lsls	r3, r2, #31
    f8ba:	d402      	bmi.n	f8c2 <mesh_commit+0xca>
		k_queue_append(&work_q->queue, work);
    f8bc:	4824      	ldr	r0, [pc, #144]	; (f950 <mesh_commit+0x158>)
    f8be:	f00f ff1f 	bl	1f700 <k_queue_append>
	cfg = bt_mesh_cfg_get();
    f8c2:	f7ff fc01 	bl	f0c8 <bt_mesh_cfg_get>
	if (cfg && stored_cfg.valid) {
    f8c6:	b180      	cbz	r0, f8ea <mesh_commit+0xf2>
    f8c8:	4b23      	ldr	r3, [pc, #140]	; (f958 <mesh_commit+0x160>)
    f8ca:	781a      	ldrb	r2, [r3, #0]
    f8cc:	b16a      	cbz	r2, f8ea <mesh_commit+0xf2>
		cfg->net_transmit = stored_cfg.cfg.net_transmit;
    f8ce:	785a      	ldrb	r2, [r3, #1]
    f8d0:	7102      	strb	r2, [r0, #4]
		cfg->relay = stored_cfg.cfg.relay;
    f8d2:	789a      	ldrb	r2, [r3, #2]
    f8d4:	7142      	strb	r2, [r0, #5]
		cfg->relay_retransmit = stored_cfg.cfg.relay_retransmit;
    f8d6:	78da      	ldrb	r2, [r3, #3]
    f8d8:	7182      	strb	r2, [r0, #6]
		cfg->beacon = stored_cfg.cfg.beacon;
    f8da:	791a      	ldrb	r2, [r3, #4]
    f8dc:	71c2      	strb	r2, [r0, #7]
		cfg->gatt_proxy = stored_cfg.cfg.gatt_proxy;
    f8de:	795a      	ldrb	r2, [r3, #5]
    f8e0:	7202      	strb	r2, [r0, #8]
		cfg->frnd = stored_cfg.cfg.frnd;
    f8e2:	799a      	ldrb	r2, [r3, #6]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
    f8e4:	79db      	ldrb	r3, [r3, #7]
		cfg->frnd = stored_cfg.cfg.frnd;
    f8e6:	7242      	strb	r2, [r0, #9]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
    f8e8:	7283      	strb	r3, [r0, #10]
    f8ea:	4b1c      	ldr	r3, [pc, #112]	; (f95c <mesh_commit+0x164>)
    f8ec:	f3bf 8f5b 	dmb	ish
    f8f0:	e853 2f00 	ldrex	r2, [r3]
    f8f4:	f042 0201 	orr.w	r2, r2, #1
    f8f8:	e843 2100 	strex	r1, r2, [r3]
    f8fc:	2900      	cmp	r1, #0
    f8fe:	d1f7      	bne.n	f8f0 <mesh_commit+0xf8>
    f900:	f3bf 8f5b 	dmb	ish
	bt_mesh_net_start();
    f904:	f7fd fc4c 	bl	d1a0 <bt_mesh_net_start>
}
    f908:	2000      	movs	r0, #0
    f90a:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_mesh_net_keys_create(&sub->keys[1], sub->keys[1].net);
    f90c:	f204 112d 	addw	r1, r4, #301	; 0x12d
    f910:	4608      	mov	r0, r1
    f912:	f7fc fee9 	bl	c6e8 <bt_mesh_net_keys_create>
		if (err) {
    f916:	2800      	cmp	r0, #0
    f918:	d087      	beq.n	f82a <mesh_commit+0x32>
			(void)memset(&sub->keys[0], 0, sizeof(sub->keys[0]));
    f91a:	2259      	movs	r2, #89	; 0x59
    f91c:	4629      	mov	r1, r5
    f91e:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    f922:	f00a fbeb 	bl	1a0fc <memset>
			return -EIO;
    f926:	e786      	b.n	f836 <mesh_commit+0x3e>
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    f928:	2300      	movs	r3, #0
    f92a:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	bt_mesh_net_beacon_update(sub);
    f92e:	480c      	ldr	r0, [pc, #48]	; (f960 <mesh_commit+0x168>)
    f930:	f7fc ff10 	bl	c754 <bt_mesh_net_beacon_update>
	return 0;
    f934:	e79a      	b.n	f86c <mesh_commit+0x74>
    f936:	bf00      	nop
    f938:	2000885c 	.word	0x2000885c
    f93c:	20008900 	.word	0x20008900
    f940:	20008a14 	.word	0x20008a14
    f944:	20008a6d 	.word	0x20008a6d
    f948:	05265c00 	.word	0x05265c00
    f94c:	20008880 	.word	0x20008880
    f950:	20001fc8 	.word	0x20001fc8
    f954:	0000fa01 	.word	0x0000fa01
    f958:	20002579 	.word	0x20002579
    f95c:	20008864 	.word	0x20008864
    f960:	200089e4 	.word	0x200089e4

0000f964 <atomic_test_and_clear_bit.constprop.11>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
    f964:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    f966:	2301      	movs	r3, #1
    f968:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f96c:	4b0a      	ldr	r3, [pc, #40]	; (f998 <atomic_test_and_clear_bit.constprop.11+0x34>)
    f96e:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    f972:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f974:	e853 2f00 	ldrex	r2, [r3]
    f978:	ea02 0c01 	and.w	ip, r2, r1
    f97c:	e843 ce00 	strex	lr, ip, [r3]
    f980:	f1be 0f00 	cmp.w	lr, #0
    f984:	d1f6      	bne.n	f974 <atomic_test_and_clear_bit.constprop.11+0x10>
    f986:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    f98a:	4202      	tst	r2, r0
}
    f98c:	bf14      	ite	ne
    f98e:	2001      	movne	r0, #1
    f990:	2000      	moveq	r0, #0
    f992:	f85d fb04 	ldr.w	pc, [sp], #4
    f996:	bf00      	nop
    f998:	20008864 	.word	0x20008864

0000f99c <schedule_store>:
{
    f99c:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f99e:	4a15      	ldr	r2, [pc, #84]	; (f9f4 <schedule_store+0x58>)
    f9a0:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    f9a4:	2301      	movs	r3, #1
    f9a6:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f9aa:	e852 3f00 	ldrex	r3, [r2]
    f9ae:	4303      	orrs	r3, r0
    f9b0:	e842 3100 	strex	r1, r3, [r2]
    f9b4:	2900      	cmp	r1, #0
    f9b6:	d1f8      	bne.n	f9aa <schedule_store+0xe>
    f9b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_NET_PENDING) ||
    f9bc:	2008      	movs	r0, #8
    f9be:	f7ff fe8b 	bl	f6d8 <atomic_test_bit.constprop.12>
    f9c2:	b130      	cbz	r0, f9d2 <schedule_store+0x36>
		timeout = K_NO_WAIT;
    f9c4:	2200      	movs	r2, #0
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    f9c6:	490c      	ldr	r1, [pc, #48]	; (f9f8 <schedule_store+0x5c>)
    f9c8:	480c      	ldr	r0, [pc, #48]	; (f9fc <schedule_store+0x60>)
}
    f9ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f9ce:	f007 bb85 	b.w	170dc <k_delayed_work_submit_to_queue>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_IV_PENDING) ||
    f9d2:	2009      	movs	r0, #9
    f9d4:	f7ff fe80 	bl	f6d8 <atomic_test_bit.constprop.12>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_NET_PENDING) ||
    f9d8:	2800      	cmp	r0, #0
    f9da:	d1f3      	bne.n	f9c4 <schedule_store+0x28>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_SEQ_PENDING)) {
    f9dc:	200a      	movs	r0, #10
    f9de:	f7ff fe7b 	bl	f6d8 <atomic_test_bit.constprop.12>
	    atomic_test_bit(bt_mesh.flags, BT_MESH_IV_PENDING) ||
    f9e2:	2800      	cmp	r0, #0
    f9e4:	d1ee      	bne.n	f9c4 <schedule_store+0x28>
	} else if (atomic_test_bit(bt_mesh.flags, BT_MESH_RPL_PENDING) &&
    f9e6:	2006      	movs	r0, #6
    f9e8:	f7ff fe76 	bl	f6d8 <atomic_test_bit.constprop.12>
		timeout = K_SECONDS(CONFIG_BT_MESH_STORE_TIMEOUT);
    f9ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    f9f0:	e7e9      	b.n	f9c6 <schedule_store+0x2a>
    f9f2:	bf00      	nop
    f9f4:	20008864 	.word	0x20008864
    f9f8:	20000f9c 	.word	0x20000f9c
    f9fc:	20001fc8 	.word	0x20001fc8

0000fa00 <commit_mod>:
	if (mod->pub && mod->pub->update &&
    fa00:	6883      	ldr	r3, [r0, #8]
{
    fa02:	b510      	push	{r4, lr}
    fa04:	4604      	mov	r4, r0
	if (mod->pub && mod->pub->update &&
    fa06:	b173      	cbz	r3, fa26 <commit_mod+0x26>
    fa08:	695a      	ldr	r2, [r3, #20]
    fa0a:	b162      	cbz	r2, fa26 <commit_mod+0x26>
    fa0c:	889b      	ldrh	r3, [r3, #4]
    fa0e:	b153      	cbz	r3, fa26 <commit_mod+0x26>
		s32_t ms = bt_mesh_model_pub_period_get(mod);
    fa10:	f7fe fc50 	bl	e2b4 <bt_mesh_model_pub_period_get>
		if (ms) {
    fa14:	4602      	mov	r2, r0
    fa16:	b130      	cbz	r0, fa26 <commit_mod+0x26>
			k_delayed_work_submit(&mod->pub->timer, ms);
    fa18:	68a1      	ldr	r1, [r4, #8]
    fa1a:	4803      	ldr	r0, [pc, #12]	; (fa28 <commit_mod+0x28>)
    fa1c:	3118      	adds	r1, #24
}
    fa1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa22:	f007 bb5b 	b.w	170dc <k_delayed_work_submit_to_queue>
    fa26:	bd10      	pop	{r4, pc}
    fa28:	20001fc8 	.word	0x20001fc8

0000fa2c <iv_set>:
{
    fa2c:	b513      	push	{r0, r1, r4, lr}
	if (settings_val_get_len_cb(val_ctx) == 0) {
    fa2e:	4610      	mov	r0, r2
{
    fa30:	4614      	mov	r4, r2
	if (settings_val_get_len_cb(val_ctx) == 0) {
    fa32:	f00a f961 	bl	19cf8 <settings_val_get_len_cb>
    fa36:	b980      	cbnz	r0, fa5a <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
    fa38:	4b1e      	ldr	r3, [pc, #120]	; (fab4 <iv_set+0x88>)
    fa3a:	f843 0b08 	str.w	r0, [r3], #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fa3e:	f3bf 8f5b 	dmb	ish
    fa42:	e853 2f00 	ldrex	r2, [r3]
    fa46:	f022 0204 	bic.w	r2, r2, #4
    fa4a:	e843 2100 	strex	r1, r2, [r3]
    fa4e:	2900      	cmp	r1, #0
    fa50:	d1f7      	bne.n	fa42 <iv_set+0x16>
    fa52:	f3bf 8f5b 	dmb	ish
}
    fa56:	b002      	add	sp, #8
    fa58:	bd10      	pop	{r4, pc}
	err = mesh_x_set(val_ctx, &iv, sizeof(iv));
    fa5a:	2205      	movs	r2, #5
    fa5c:	4669      	mov	r1, sp
    fa5e:	4620      	mov	r0, r4
    fa60:	f00e fadf 	bl	1e022 <mesh_x_set>
	if (err) {
    fa64:	2800      	cmp	r0, #0
    fa66:	d1f6      	bne.n	fa56 <iv_set+0x2a>
	bt_mesh.iv_index = iv.iv_index;
    fa68:	4b12      	ldr	r3, [pc, #72]	; (fab4 <iv_set+0x88>)
    fa6a:	9a00      	ldr	r2, [sp, #0]
    fa6c:	601a      	str	r2, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    fa6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fa72:	f3bf 8f5b 	dmb	ish
	if (val) {
    fa76:	f012 0f01 	tst.w	r2, #1
    fa7a:	f103 0208 	add.w	r2, r3, #8
    fa7e:	d010      	beq.n	faa2 <iv_set+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fa80:	e852 1f00 	ldrex	r1, [r2]
    fa84:	f041 0104 	orr.w	r1, r1, #4
    fa88:	e842 1400 	strex	r4, r1, [r2]
    fa8c:	2c00      	cmp	r4, #0
    fa8e:	d1f7      	bne.n	fa80 <iv_set+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fa90:	f3bf 8f5b 	dmb	ish
	bt_mesh.ivu_duration = iv.iv_duration;
    fa94:	f89d 2004 	ldrb.w	r2, [sp, #4]
    fa98:	f3c2 0246 	ubfx	r2, r2, #1, #7
    fa9c:	f883 2020 	strb.w	r2, [r3, #32]
	return 0;
    faa0:	e7d9      	b.n	fa56 <iv_set+0x2a>
    faa2:	e852 1f00 	ldrex	r1, [r2]
    faa6:	f021 0104 	bic.w	r1, r1, #4
    faaa:	e842 1400 	strex	r4, r1, [r2]
    faae:	2c00      	cmp	r4, #0
    fab0:	d0ee      	beq.n	fa90 <iv_set+0x64>
    fab2:	e7f6      	b.n	faa2 <iv_set+0x76>
    fab4:	2000885c 	.word	0x2000885c

0000fab8 <store_pending>:
{
    fab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_RPL_PENDING)) {
    fabc:	2006      	movs	r0, #6
{
    fabe:	b086      	sub	sp, #24
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_RPL_PENDING)) {
    fac0:	f7ff ff50 	bl	f964 <atomic_test_and_clear_bit.constprop.11>
    fac4:	2800      	cmp	r0, #0
    fac6:	f040 80a5 	bne.w	fc14 <store_pending+0x15c>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_KEYS_PENDING)) {
    faca:	2007      	movs	r0, #7
    facc:	f7ff ff4a 	bl	f964 <atomic_test_and_clear_bit.constprop.11>
    fad0:	b328      	cbz	r0, fb1e <store_pending+0x66>
		if (!update->valid) {
    fad2:	4e95      	ldr	r6, [pc, #596]	; (fd28 <store_pending+0x270>)
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    fad4:	f8df 827c 	ldr.w	r8, [pc, #636]	; fd54 <store_pending+0x29c>
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
    fad8:	2400      	movs	r4, #0
    fada:	4637      	mov	r7, r6
		if (!update->valid) {
    fadc:	0065      	lsls	r5, r4, #1
    fade:	1973      	adds	r3, r6, r5
    fae0:	785a      	ldrb	r2, [r3, #1]
    fae2:	06d3      	lsls	r3, r2, #27
    fae4:	d518      	bpl.n	fb18 <store_pending+0x60>
		if (update->clear) {
    fae6:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
    faea:	0650      	lsls	r0, r2, #25
    faec:	f002 0120 	and.w	r1, r2, #32
    faf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    faf4:	f140 80d8 	bpl.w	fca8 <store_pending+0x1f0>
			if (update->app_key) {
    faf8:	2900      	cmp	r1, #0
    fafa:	f000 80d3 	beq.w	fca4 <store_pending+0x1ec>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    fafe:	4a8b      	ldr	r2, [pc, #556]	; (fd2c <store_pending+0x274>)
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    fb00:	2114      	movs	r1, #20
    fb02:	a801      	add	r0, sp, #4
    fb04:	f7f7 f944 	bl	6d90 <snprintk>
	err = settings_delete(path);
    fb08:	a801      	add	r0, sp, #4
    fb0a:	f00a f89b 	bl	19c44 <settings_delete>
		update->valid = 0U;
    fb0e:	443d      	add	r5, r7
    fb10:	786b      	ldrb	r3, [r5, #1]
    fb12:	f36f 1304 	bfc	r3, #4, #1
    fb16:	706b      	strb	r3, [r5, #1]
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
    fb18:	3401      	adds	r4, #1
    fb1a:	2c04      	cmp	r4, #4
    fb1c:	d1de      	bne.n	fadc <store_pending+0x24>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_NET_PENDING)) {
    fb1e:	2008      	movs	r0, #8
    fb20:	f7ff ff20 	bl	f964 <atomic_test_and_clear_bit.constprop.11>
    fb24:	b1a0      	cbz	r0, fb50 <store_pending+0x98>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    fb26:	2000      	movs	r0, #0
    fb28:	f7ff fdd6 	bl	f6d8 <atomic_test_bit.constprop.12>
    fb2c:	2800      	cmp	r0, #0
    fb2e:	f000 80cd 	beq.w	fccc <store_pending+0x214>
	net.primary_addr = bt_mesh_primary_addr();
    fb32:	f7fe fc63 	bl	e3fc <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    fb36:	2210      	movs	r2, #16
	net.primary_addr = bt_mesh_primary_addr();
    fb38:	f8ad 0004 	strh.w	r0, [sp, #4]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    fb3c:	497c      	ldr	r1, [pc, #496]	; (fd30 <store_pending+0x278>)
    fb3e:	f10d 0006 	add.w	r0, sp, #6
    fb42:	f00a fab1 	bl	1a0a8 <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
    fb46:	2212      	movs	r2, #18
    fb48:	a901      	add	r1, sp, #4
    fb4a:	487a      	ldr	r0, [pc, #488]	; (fd34 <store_pending+0x27c>)
    fb4c:	f7f7 fd2a 	bl	75a4 <settings_save_one>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IV_PENDING)) {
    fb50:	2009      	movs	r0, #9
    fb52:	f7ff ff07 	bl	f964 <atomic_test_and_clear_bit.constprop.11>
    fb56:	b1d0      	cbz	r0, fb8e <store_pending+0xd6>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    fb58:	2000      	movs	r0, #0
    fb5a:	f7ff fdbd 	bl	f6d8 <atomic_test_bit.constprop.12>
    fb5e:	2800      	cmp	r0, #0
    fb60:	f000 80b8 	beq.w	fcd4 <store_pending+0x21c>
	iv.iv_index = bt_mesh.iv_index;
    fb64:	4a74      	ldr	r2, [pc, #464]	; (fd38 <store_pending+0x280>)
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    fb66:	2002      	movs	r0, #2
	iv.iv_index = bt_mesh.iv_index;
    fb68:	6813      	ldr	r3, [r2, #0]
    fb6a:	9301      	str	r3, [sp, #4]
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    fb6c:	f7ff fdb4 	bl	f6d8 <atomic_test_bit.constprop.12>
    fb70:	f89d 3008 	ldrb.w	r3, [sp, #8]
	iv.iv_duration = bt_mesh.ivu_duration;
    fb74:	f892 2020 	ldrb.w	r2, [r2, #32]
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    fb78:	f360 0300 	bfi	r3, r0, #0, #1
	iv.iv_duration = bt_mesh.ivu_duration;
    fb7c:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    fb80:	a901      	add	r1, sp, #4
    fb82:	2205      	movs	r2, #5
    fb84:	486d      	ldr	r0, [pc, #436]	; (fd3c <store_pending+0x284>)
	iv.iv_duration = bt_mesh.ivu_duration;
    fb86:	f88d 3008 	strb.w	r3, [sp, #8]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    fb8a:	f7f7 fd0b 	bl	75a4 <settings_save_one>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_SEQ_PENDING)) {
    fb8e:	200a      	movs	r0, #10
    fb90:	f7ff fee8 	bl	f964 <atomic_test_and_clear_bit.constprop.11>
    fb94:	b158      	cbz	r0, fbae <store_pending+0xf6>
	seq.val[0] = bt_mesh.seq;
    fb96:	4b68      	ldr	r3, [pc, #416]	; (fd38 <store_pending+0x280>)
	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
    fb98:	4869      	ldr	r0, [pc, #420]	; (fd40 <store_pending+0x288>)
	seq.val[0] = bt_mesh.seq;
    fb9a:	889a      	ldrh	r2, [r3, #4]
    fb9c:	f8ad 2004 	strh.w	r2, [sp, #4]
	seq.val[2] = bt_mesh.seq >> 16;
    fba0:	88db      	ldrh	r3, [r3, #6]
    fba2:	f88d 3006 	strb.w	r3, [sp, #6]
	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
    fba6:	2203      	movs	r2, #3
    fba8:	a901      	add	r1, sp, #4
    fbaa:	f7f7 fcfb 	bl	75a4 <settings_save_one>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_HB_PUB_PENDING)) {
    fbae:	200b      	movs	r0, #11
    fbb0:	f7ff fed8 	bl	f964 <atomic_test_and_clear_bit.constprop.11>
    fbb4:	b148      	cbz	r0, fbca <store_pending+0x112>
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
    fbb6:	f7ff fa7f 	bl	f0b8 <bt_mesh_hb_pub_get>
	if (!pub) {
    fbba:	b130      	cbz	r0, fbca <store_pending+0x112>
	if (pub->dst == BT_MESH_ADDR_UNASSIGNED) {
    fbbc:	8c02      	ldrh	r2, [r0, #32]
    fbbe:	2a00      	cmp	r2, #0
    fbc0:	f040 808c 	bne.w	fcdc <store_pending+0x224>
		err = settings_delete("bt/mesh/HBPub");
    fbc4:	485f      	ldr	r0, [pc, #380]	; (fd44 <store_pending+0x28c>)
    fbc6:	f00a f83d 	bl	19c44 <settings_delete>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_CFG_PENDING)) {
    fbca:	200c      	movs	r0, #12
    fbcc:	f7ff feca 	bl	f964 <atomic_test_and_clear_bit.constprop.11>
    fbd0:	b1a8      	cbz	r0, fbfe <store_pending+0x146>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    fbd2:	2000      	movs	r0, #0
    fbd4:	f7ff fd80 	bl	f6d8 <atomic_test_bit.constprop.12>
    fbd8:	2800      	cmp	r0, #0
    fbda:	f000 80a0 	beq.w	fd1e <store_pending+0x266>
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
    fbde:	f7ff fa73 	bl	f0c8 <bt_mesh_cfg_get>
	if (!cfg) {
    fbe2:	b160      	cbz	r0, fbfe <store_pending+0x146>
	val.net_transmit = cfg->net_transmit;
    fbe4:	6843      	ldr	r3, [r0, #4]
    fbe6:	9301      	str	r3, [sp, #4]
	val.gatt_proxy = cfg->gatt_proxy;
    fbe8:	8902      	ldrh	r2, [r0, #8]
	val.default_ttl = cfg->default_ttl;
    fbea:	7a83      	ldrb	r3, [r0, #10]
	val.gatt_proxy = cfg->gatt_proxy;
    fbec:	f8ad 2008 	strh.w	r2, [sp, #8]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    fbf0:	a901      	add	r1, sp, #4
    fbf2:	2207      	movs	r2, #7
    fbf4:	4854      	ldr	r0, [pc, #336]	; (fd48 <store_pending+0x290>)
	val.default_ttl = cfg->default_ttl;
    fbf6:	f88d 300a 	strb.w	r3, [sp, #10]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    fbfa:	f7f7 fcd3 	bl	75a4 <settings_save_one>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_MOD_PENDING)) {
    fbfe:	200d      	movs	r0, #13
    fc00:	f7ff feb0 	bl	f964 <atomic_test_and_clear_bit.constprop.11>
    fc04:	b118      	cbz	r0, fc0e <store_pending+0x156>
		bt_mesh_model_foreach(store_pending_mod, NULL);
    fc06:	2100      	movs	r1, #0
    fc08:	4850      	ldr	r0, [pc, #320]	; (fd4c <store_pending+0x294>)
    fc0a:	f7fe fb19 	bl	e240 <bt_mesh_model_foreach>
}
    fc0e:	b006      	add	sp, #24
    fc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    fc14:	2000      	movs	r0, #0
    fc16:	f7ff fd5f 	bl	f6d8 <atomic_test_bit.constprop.12>
    fc1a:	b348      	cbz	r0, fc70 <store_pending+0x1b8>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    fc1c:	2500      	movs	r5, #0
    fc1e:	4c46      	ldr	r4, [pc, #280]	; (fd38 <store_pending+0x280>)
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
    fc20:	4f4b      	ldr	r7, [pc, #300]	; (fd50 <store_pending+0x298>)
			rpl->store = false;
    fc22:	462e      	mov	r6, r5
		if (rpl->store) {
    fc24:	f894 326f 	ldrb.w	r3, [r4, #623]	; 0x26f
    fc28:	b1e3      	cbz	r3, fc64 <store_pending+0x1ac>
			rpl->store = false;
    fc2a:	f884 626f 	strb.w	r6, [r4, #623]	; 0x26f
	rpl.seq = entry->seq;
    fc2e:	9b00      	ldr	r3, [sp, #0]
    fc30:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    fc34:	f362 0317 	bfi	r3, r2, #0, #24
    fc38:	9300      	str	r3, [sp, #0]
	rpl.old_iv = entry->old_iv;
    fc3a:	f894 226e 	ldrb.w	r2, [r4, #622]	; 0x26e
    fc3e:	f3c3 6307 	ubfx	r3, r3, #24, #8
    fc42:	f362 0300 	bfi	r3, r2, #0, #1
    fc46:	f88d 3003 	strb.w	r3, [sp, #3]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
    fc4a:	463a      	mov	r2, r7
    fc4c:	2112      	movs	r1, #18
    fc4e:	f8b4 326c 	ldrh.w	r3, [r4, #620]	; 0x26c
    fc52:	a801      	add	r0, sp, #4
    fc54:	f7f7 f89c 	bl	6d90 <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
    fc58:	2204      	movs	r2, #4
    fc5a:	4669      	mov	r1, sp
    fc5c:	eb0d 0002 	add.w	r0, sp, r2
    fc60:	f7f7 fca0 	bl	75a4 <settings_save_one>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    fc64:	3501      	adds	r5, #1
    fc66:	2d80      	cmp	r5, #128	; 0x80
    fc68:	f104 0408 	add.w	r4, r4, #8
    fc6c:	d1da      	bne.n	fc24 <store_pending+0x16c>
    fc6e:	e72c      	b.n	faca <store_pending+0x12>
    fc70:	4d31      	ldr	r5, [pc, #196]	; (fd38 <store_pending+0x280>)
		snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
    fc72:	4e37      	ldr	r6, [pc, #220]	; (fd50 <store_pending+0x298>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    fc74:	4604      	mov	r4, r0
		if (!rpl->src) {
    fc76:	f8b5 326c 	ldrh.w	r3, [r5, #620]	; 0x26c
    fc7a:	b16b      	cbz	r3, fc98 <store_pending+0x1e0>
		snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
    fc7c:	4632      	mov	r2, r6
    fc7e:	2112      	movs	r1, #18
    fc80:	a801      	add	r0, sp, #4
    fc82:	f7f7 f885 	bl	6d90 <snprintk>
		err = settings_delete(path);
    fc86:	a801      	add	r0, sp, #4
    fc88:	f009 ffdc 	bl	19c44 <settings_delete>
		(void)memset(rpl, 0, sizeof(*rpl));
    fc8c:	2208      	movs	r2, #8
    fc8e:	2100      	movs	r1, #0
    fc90:	f505 701b 	add.w	r0, r5, #620	; 0x26c
    fc94:	f00a fa32 	bl	1a0fc <memset>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    fc98:	3401      	adds	r4, #1
    fc9a:	2c80      	cmp	r4, #128	; 0x80
    fc9c:	f105 0508 	add.w	r5, r5, #8
    fca0:	d1e9      	bne.n	fc76 <store_pending+0x1be>
    fca2:	e712      	b.n	faca <store_pending+0x12>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    fca4:	4642      	mov	r2, r8
    fca6:	e72b      	b.n	fb00 <store_pending+0x48>
				key = bt_mesh_app_key_find(update->key_idx);
    fca8:	4618      	mov	r0, r3
			if (update->app_key) {
    fcaa:	b139      	cbz	r1, fcbc <store_pending+0x204>
				key = bt_mesh_app_key_find(update->key_idx);
    fcac:	f7fd fe00 	bl	d8b0 <bt_mesh_app_key_find>
				if (key) {
    fcb0:	2800      	cmp	r0, #0
    fcb2:	f43f af2c 	beq.w	fb0e <store_pending+0x56>
					store_app_key(key);
    fcb6:	f7ff fbe3 	bl	f480 <store_app_key>
    fcba:	e728      	b.n	fb0e <store_pending+0x56>
				sub = bt_mesh_subnet_get(update->key_idx);
    fcbc:	f7fc fcf6 	bl	c6ac <bt_mesh_subnet_get>
				if (sub) {
    fcc0:	2800      	cmp	r0, #0
    fcc2:	f43f af24 	beq.w	fb0e <store_pending+0x56>
					store_net_key(sub);
    fcc6:	f7ff fbb1 	bl	f42c <store_net_key>
    fcca:	e720      	b.n	fb0e <store_pending+0x56>
	err = settings_delete("bt/mesh/Net");
    fccc:	4819      	ldr	r0, [pc, #100]	; (fd34 <store_pending+0x27c>)
    fcce:	f009 ffb9 	bl	19c44 <settings_delete>
	if (err) {
    fcd2:	e73d      	b.n	fb50 <store_pending+0x98>
	err = settings_delete("bt/mesh/IV");
    fcd4:	4819      	ldr	r0, [pc, #100]	; (fd3c <store_pending+0x284>)
    fcd6:	f009 ffb5 	bl	19c44 <settings_delete>
	if (err) {
    fcda:	e758      	b.n	fb8e <store_pending+0xd6>
		val.indefinite = (pub->count == 0xffff);
    fcdc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
		val.dst = pub->dst;
    fcde:	f8ad 2004 	strh.w	r2, [sp, #4]
		val.indefinite = (pub->count == 0xffff);
    fce2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fce6:	1a59      	subs	r1, r3, r1
    fce8:	424b      	negs	r3, r1
    fcea:	414b      	adcs	r3, r1
    fcec:	f89d 100b 	ldrb.w	r1, [sp, #11]
    fcf0:	f363 1104 	bfi	r1, r3, #4, #1
    fcf4:	f88d 100b 	strb.w	r1, [sp, #11]
		val.period = pub->period;
    fcf8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		val.feat = pub->feat;
    fcfa:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
		val.period = pub->period;
    fcfc:	f8ad 2006 	strh.w	r2, [sp, #6]
		val.net_idx = pub->net_idx;
    fd00:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		val.feat = pub->feat;
    fd02:	f8ad 3008 	strh.w	r3, [sp, #8]
		val.net_idx = pub->net_idx;
    fd06:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
    fd0a:	480e      	ldr	r0, [pc, #56]	; (fd44 <store_pending+0x28c>)
		val.net_idx = pub->net_idx;
    fd0c:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
    fd10:	a901      	add	r1, sp, #4
    fd12:	2208      	movs	r2, #8
		val.net_idx = pub->net_idx;
    fd14:	f8ad 300a 	strh.w	r3, [sp, #10]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
    fd18:	f7f7 fc44 	bl	75a4 <settings_save_one>
    fd1c:	e755      	b.n	fbca <store_pending+0x112>
	err = settings_delete("bt/mesh/Cfg");
    fd1e:	480a      	ldr	r0, [pc, #40]	; (fd48 <store_pending+0x290>)
    fd20:	f009 ff90 	bl	19c44 <settings_delete>
	if (err) {
    fd24:	e76b      	b.n	fbfe <store_pending+0x146>
    fd26:	bf00      	nop
    fd28:	20002092 	.word	0x20002092
    fd2c:	00021c7e 	.word	0x00021c7e
    fd30:	200088a0 	.word	0x200088a0
    fd34:	00021cb1 	.word	0x00021cb1
    fd38:	2000885c 	.word	0x2000885c
    fd3c:	00021cbd 	.word	0x00021cbd
    fd40:	00021cc8 	.word	0x00021cc8
    fd44:	00021cd4 	.word	0x00021cd4
    fd48:	00021ce2 	.word	0x00021ce2
    fd4c:	0000f721 	.word	0x0000f721
    fd50:	00021ca2 	.word	0x00021ca2
    fd54:	00021c90 	.word	0x00021c90

0000fd58 <bt_mesh_store_seq>:
	    (bt_mesh.seq % CONFIG_BT_MESH_SEQ_STORE_RATE)) {
    fd58:	4b03      	ldr	r3, [pc, #12]	; (fd68 <bt_mesh_store_seq+0x10>)
    fd5a:	685b      	ldr	r3, [r3, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
    fd5c:	065b      	lsls	r3, r3, #25
    fd5e:	d102      	bne.n	fd66 <bt_mesh_store_seq+0xe>
	schedule_store(BT_MESH_SEQ_PENDING);
    fd60:	200a      	movs	r0, #10
    fd62:	f7ff be1b 	b.w	f99c <schedule_store>
}
    fd66:	4770      	bx	lr
    fd68:	2000885c 	.word	0x2000885c

0000fd6c <bt_mesh_clear_subnet>:
	schedule_store(BT_MESH_IV_PENDING);
	schedule_store(BT_MESH_CFG_PENDING);
}

void bt_mesh_clear_subnet(struct bt_mesh_subnet *sub)
{
    fd6c:	b510      	push	{r4, lr}
    fd6e:	b086      	sub	sp, #24
    fd70:	4604      	mov	r4, r0
	struct key_update *update, *free_slot;

	BT_DBG("NetKeyIndex 0x%03x", sub->net_idx);

	update = key_update_find(false, sub->net_idx, &free_slot);
    fd72:	8b81      	ldrh	r1, [r0, #28]
    fd74:	466a      	mov	r2, sp
    fd76:	2000      	movs	r0, #0
    fd78:	f7ff fa6e 	bl	f258 <key_update_find>
	if (update) {
    fd7c:	b138      	cbz	r0, fd8e <bt_mesh_clear_subnet+0x22>
		update->clear = 1U;
    fd7e:	7843      	ldrb	r3, [r0, #1]
    fd80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd84:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = sub->net_idx;
	free_slot->app_key = 0U;
	free_slot->clear = 1U;

	schedule_store(BT_MESH_KEYS_PENDING);
    fd86:	2007      	movs	r0, #7
    fd88:	f7ff fe08 	bl	f99c <schedule_store>
    fd8c:	e00a      	b.n	fda4 <bt_mesh_clear_subnet+0x38>
	if (!free_slot) {
    fd8e:	9900      	ldr	r1, [sp, #0]
    fd90:	8ba3      	ldrh	r3, [r4, #28]
    fd92:	b949      	cbnz	r1, fda8 <bt_mesh_clear_subnet+0x3c>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    fd94:	4a0a      	ldr	r2, [pc, #40]	; (fdc0 <bt_mesh_clear_subnet+0x54>)
    fd96:	2114      	movs	r1, #20
    fd98:	a801      	add	r0, sp, #4
    fd9a:	f7f6 fff9 	bl	6d90 <snprintk>
	err = settings_delete(path);
    fd9e:	a801      	add	r0, sp, #4
    fda0:	f009 ff50 	bl	19c44 <settings_delete>
}
    fda4:	b006      	add	sp, #24
    fda6:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
    fda8:	880a      	ldrh	r2, [r1, #0]
    fdaa:	f363 020b 	bfi	r2, r3, #0, #12
    fdae:	800a      	strh	r2, [r1, #0]
	free_slot->valid = 1U;
    fdb0:	f3c2 2207 	ubfx	r2, r2, #8, #8
    fdb4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    fdb8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    fdbc:	704a      	strb	r2, [r1, #1]
    fdbe:	e7e2      	b.n	fd86 <bt_mesh_clear_subnet+0x1a>
    fdc0:	00021c90 	.word	0x00021c90

0000fdc4 <bt_mesh_clear_app_key>:

void bt_mesh_clear_app_key(struct bt_mesh_app_key *key)
{
    fdc4:	b510      	push	{r4, lr}
    fdc6:	b086      	sub	sp, #24
    fdc8:	4604      	mov	r4, r0
	struct key_update *update, *free_slot;

	BT_DBG("AppKeyIndex 0x%03x", key->app_idx);

	update = key_update_find(true, key->app_idx, &free_slot);
    fdca:	8841      	ldrh	r1, [r0, #2]
    fdcc:	466a      	mov	r2, sp
    fdce:	2001      	movs	r0, #1
    fdd0:	f7ff fa42 	bl	f258 <key_update_find>
	if (update) {
    fdd4:	b138      	cbz	r0, fde6 <bt_mesh_clear_app_key+0x22>
		update->clear = 1U;
    fdd6:	7843      	ldrb	r3, [r0, #1]
    fdd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fddc:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = key->app_idx;
	free_slot->app_key = 1U;
	free_slot->clear = 1U;

	schedule_store(BT_MESH_KEYS_PENDING);
    fdde:	2007      	movs	r0, #7
    fde0:	f7ff fddc 	bl	f99c <schedule_store>
    fde4:	e00a      	b.n	fdfc <bt_mesh_clear_app_key+0x38>
	if (!free_slot) {
    fde6:	9900      	ldr	r1, [sp, #0]
    fde8:	8863      	ldrh	r3, [r4, #2]
    fdea:	b949      	cbnz	r1, fe00 <bt_mesh_clear_app_key+0x3c>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    fdec:	4a0a      	ldr	r2, [pc, #40]	; (fe18 <bt_mesh_clear_app_key+0x54>)
    fdee:	2114      	movs	r1, #20
    fdf0:	a801      	add	r0, sp, #4
    fdf2:	f7f6 ffcd 	bl	6d90 <snprintk>
	err = settings_delete(path);
    fdf6:	a801      	add	r0, sp, #4
    fdf8:	f009 ff24 	bl	19c44 <settings_delete>
}
    fdfc:	b006      	add	sp, #24
    fdfe:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
    fe00:	880a      	ldrh	r2, [r1, #0]
    fe02:	f363 020b 	bfi	r2, r3, #0, #12
    fe06:	800a      	strh	r2, [r1, #0]
	free_slot->valid = 1U;
    fe08:	f3c2 2207 	ubfx	r2, r2, #8, #8
    fe0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    fe10:	f042 0270 	orr.w	r2, r2, #112	; 0x70
    fe14:	704a      	strb	r2, [r1, #1]
    fe16:	e7e2      	b.n	fdde <bt_mesh_clear_app_key+0x1a>
    fe18:	00021c7e 	.word	0x00021c7e

0000fe1c <bt_mesh_settings_init>:
	schedule_store(BT_MESH_MOD_PENDING);
}

void bt_mesh_settings_init(void)
{
	k_delayed_work_init(&pending_store, store_pending);
    fe1c:	4901      	ldr	r1, [pc, #4]	; (fe24 <bt_mesh_settings_init+0x8>)
    fe1e:	4802      	ldr	r0, [pc, #8]	; (fe28 <bt_mesh_settings_init+0xc>)
    fe20:	f00f be7c 	b.w	1fb1c <k_delayed_work_init>
    fe24:	0000fab9 	.word	0x0000fab9
    fe28:	20000f9c 	.word	0x20000f9c

0000fe2c <ack_complete>:
static u8_t pending_ack = XACT_NVAL;

static void ack_complete(u16_t duration, int err, void *user_data)
{
	BT_DBG("xact %u complete", (u8_t)pending_ack);
	pending_ack = XACT_NVAL;
    fe2c:	4b01      	ldr	r3, [pc, #4]	; (fe34 <ack_complete+0x8>)
    fe2e:	22ff      	movs	r2, #255	; 0xff
    fe30:	701a      	strb	r2, [r3, #0]
}
    fe32:	4770      	bx	lr
    fe34:	2000926c 	.word	0x2000926c

0000fe38 <free_segments>:
{
    fe38:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    fe3a:	2400      	movs	r4, #0
    fe3c:	4d08      	ldr	r5, [pc, #32]	; (fe60 <free_segments+0x28>)
		link.tx.buf[i] = NULL;
    fe3e:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
    fe40:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
    fe44:	b158      	cbz	r0, fe5e <free_segments+0x26>
		BT_MESH_ADV(buf)->busy = 0U;
    fe46:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
    fe48:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
    fe4c:	7a1a      	ldrb	r2, [r3, #8]
    fe4e:	f366 0282 	bfi	r2, r6, #2, #1
    fe52:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    fe54:	3401      	adds	r4, #1
		net_buf_unref(buf);
    fe56:	f005 fd55 	bl	15904 <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    fe5a:	2c03      	cmp	r4, #3
    fe5c:	d1f0      	bne.n	fe40 <free_segments+0x8>
}
    fe5e:	bd70      	pop	{r4, r5, r6, pc}
    fe60:	2000060c 	.word	0x2000060c

0000fe64 <prov_clear_tx>:
{
    fe64:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&link.tx.retransmit);
    fe66:	4803      	ldr	r0, [pc, #12]	; (fe74 <prov_clear_tx+0x10>)
    fe68:	f00f fe60 	bl	1fb2c <k_delayed_work_cancel>
}
    fe6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
    fe70:	f7ff bfe2 	b.w	fe38 <free_segments>
    fe74:	20000618 	.word	0x20000618

0000fe78 <gen_prov_ack>:

static void gen_prov_ack(struct prov_rx *rx, struct net_buf_simple *buf)
{
	BT_DBG("len %u", buf->len);

	if (!link.tx.buf[0]) {
    fe78:	4b05      	ldr	r3, [pc, #20]	; (fe90 <gen_prov_ack+0x18>)
    fe7a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    fe7e:	b132      	cbz	r2, fe8e <gen_prov_ack+0x16>
		return;
	}

	if (rx->xact_id == link.tx.id) {
    fe80:	7902      	ldrb	r2, [r0, #4]
    fe82:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
    fe86:	429a      	cmp	r2, r3
    fe88:	d101      	bne.n	fe8e <gen_prov_ack+0x16>
		prov_clear_tx();
    fe8a:	f7ff bfeb 	b.w	fe64 <prov_clear_tx>
	}
}
    fe8e:	4770      	bx	lr
    fe90:	200004d0 	.word	0x200004d0

0000fe94 <send_reliable>:
{
    fe94:	b570      	push	{r4, r5, r6, lr}
    fe96:	f00f fea6 	bl	1fbe6 <z_impl_k_uptime_get>
	link.tx.start = k_uptime_get();
    fe9a:	4c0d      	ldr	r4, [pc, #52]	; (fed0 <send_reliable+0x3c>)
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    fe9c:	4e0d      	ldr	r6, [pc, #52]	; (fed4 <send_reliable+0x40>)
	link.tx.start = k_uptime_get();
    fe9e:	e9c4 014c 	strd	r0, r1, [r4, #304]	; 0x130
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    fea2:	2500      	movs	r5, #0
    fea4:	f504 749e 	add.w	r4, r4, #316	; 0x13c
		struct net_buf *buf = link.tx.buf[i];
    fea8:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
    feac:	b178      	cbz	r0, fece <send_reliable+0x3a>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
    feae:	3501      	adds	r5, #1
    feb0:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
    feb2:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
    feb6:	d005      	beq.n	fec4 <send_reliable+0x30>
    feb8:	6823      	ldr	r3, [r4, #0]
    feba:	b11b      	cbz	r3, fec4 <send_reliable+0x30>
			bt_mesh_adv_send(buf, NULL, NULL);
    febc:	4611      	mov	r1, r2
    febe:	f7fc f8bb 	bl	c038 <bt_mesh_adv_send>
    fec2:	e7f1      	b.n	fea8 <send_reliable+0x14>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    fec4:	4631      	mov	r1, r6
    fec6:	f7fc f8b7 	bl	c038 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    feca:	2d03      	cmp	r5, #3
    fecc:	d1ec      	bne.n	fea8 <send_reliable+0x14>
}
    fece:	bd70      	pop	{r4, r5, r6, pc}
    fed0:	200004d0 	.word	0x200004d0
    fed4:	20008ec8 	.word	0x20008ec8

0000fed8 <prov_send>:
{
    fed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (link.conn) {
    fedc:	4e4d      	ldr	r6, [pc, #308]	; (10014 <__kernel_ram_size+0x14>)
{
    fede:	4604      	mov	r4, r0
	if (link.conn) {
    fee0:	6870      	ldr	r0, [r6, #4]
    fee2:	b128      	cbz	r0, fef0 <prov_send+0x18>
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
    fee4:	4622      	mov	r2, r4
    fee6:	2103      	movs	r1, #3
}
    fee8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
    feec:	f001 b95a 	b.w	111a4 <bt_mesh_proxy_send>
	prov_clear_tx();
    fef0:	f7ff ffb8 	bl	fe64 <prov_clear_tx>
	start = adv_buf_create();
    fef4:	f00e f9bf 	bl	1e276 <adv_buf_create>
	if (!start) {
    fef8:	4680      	mov	r8, r0
    fefa:	2800      	cmp	r0, #0
    fefc:	d062      	beq.n	ffc4 <prov_send+0xec>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
    fefe:	f896 5138 	ldrb.w	r5, [r6, #312]	; 0x138
	net_buf_add_be32(start, link.id);
    ff02:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
    ff06:	f8df 9110 	ldr.w	r9, [pc, #272]	; 10018 <__kernel_ram_size+0x18>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
    ff0a:	1e6b      	subs	r3, r5, #1
    ff0c:	b2db      	uxtb	r3, r3
    ff0e:	2bfd      	cmp	r3, #253	; 0xfd
		return ++link.tx.id;
    ff10:	bf98      	it	ls
    ff12:	3501      	addls	r5, #1
	net_buf_add_be32(start, link.id);
    ff14:	f100 0708 	add.w	r7, r0, #8
		return ++link.tx.id;
    ff18:	bf94      	ite	ls
    ff1a:	b2ed      	uxtbls	r5, r5
	return link.tx.id;
    ff1c:	2580      	movhi	r5, #128	; 0x80
	net_buf_add_be32(start, link.id);
    ff1e:	4638      	mov	r0, r7
    ff20:	f886 5138 	strb.w	r5, [r6, #312]	; 0x138
    ff24:	f00f f930 	bl	1f188 <net_buf_simple_add_be32>
	net_buf_add_u8(start, xact_id);
    ff28:	4629      	mov	r1, r5
    ff2a:	4638      	mov	r0, r7
    ff2c:	f00f f8f5 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    ff30:	88a3      	ldrh	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
    ff32:	b2da      	uxtb	r2, r3
    ff34:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
    ff36:	bf81      	itttt	hi
    ff38:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
    ff3c:	b2c9      	uxtbhi	r1, r1
    ff3e:	2317      	movhi	r3, #23
    ff40:	fbb1 f1f3 	udivhi	r1, r1, r3
    ff44:	bf86      	itte	hi
    ff46:	3101      	addhi	r1, #1
    ff48:	b2c9      	uxtbhi	r1, r1
		return 0;
    ff4a:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    ff4c:	0089      	lsls	r1, r1, #2
    ff4e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    ff52:	4638      	mov	r0, r7
    ff54:	f00f f8e1 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_add_be16(start, msg->len);
    ff58:	88a1      	ldrh	r1, [r4, #4]
    ff5a:	4638      	mov	r0, r7
    ff5c:	f00f f8f4 	bl	1f148 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
    ff60:	7921      	ldrb	r1, [r4, #4]
    ff62:	6820      	ldr	r0, [r4, #0]
    ff64:	f7fe f8de 	bl	e124 <bt_mesh_fcs_calc>
    ff68:	4601      	mov	r1, r0
    ff6a:	4638      	mov	r0, r7
    ff6c:	f00f f8d5 	bl	1f11a <net_buf_simple_add_u8>
	link.tx.buf[0] = start;
    ff70:	f8c6 813c 	str.w	r8, [r6, #316]	; 0x13c
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
    ff74:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	net_buf_add_mem(start, msg->data, seg_len);
    ff78:	6821      	ldr	r1, [r4, #0]
    ff7a:	f1b8 0f14 	cmp.w	r8, #20
    ff7e:	bf28      	it	cs
    ff80:	f04f 0814 	movcs.w	r8, #20
    ff84:	4642      	mov	r2, r8
    ff86:	4638      	mov	r0, r7
    ff88:	f00f f8be 	bl	1f108 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
    ff8c:	4641      	mov	r1, r8
    ff8e:	4620      	mov	r0, r4
    ff90:	f00f f92f 	bl	1f1f2 <net_buf_simple_pull>
    ff94:	f04f 0800 	mov.w	r8, #0
	for (seg_id = 1U; msg->len > 0; seg_id++) {
    ff98:	88a7      	ldrh	r7, [r4, #4]
    ff9a:	b91f      	cbnz	r7, ffa4 <prov_send+0xcc>
	send_reliable();
    ff9c:	f7ff ff7a 	bl	fe94 <send_reliable>
	return 0;
    ffa0:	4638      	mov	r0, r7
    ffa2:	e006      	b.n	ffb2 <prov_send+0xda>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
    ffa4:	f1b8 0f08 	cmp.w	r8, #8
    ffa8:	d105      	bne.n	ffb6 <prov_send+0xde>
			free_segments();
    ffaa:	f7ff ff45 	bl	fe38 <free_segments>
			return -E2BIG;
    ffae:	f06f 0006 	mvn.w	r0, #6
}
    ffb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create();
    ffb6:	f00e f95e 	bl	1e276 <adv_buf_create>
		if (!buf) {
    ffba:	f108 0804 	add.w	r8, r8, #4
    ffbe:	b920      	cbnz	r0, ffca <prov_send+0xf2>
			free_segments();
    ffc0:	f7ff ff3a 	bl	fe38 <free_segments>
		return -ENOBUFS;
    ffc4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    ffc8:	e7f3      	b.n	ffb2 <prov_send+0xda>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
    ffca:	f8b4 a004 	ldrh.w	sl, [r4, #4]
		link.tx.buf[seg_id] = buf;
    ffce:	f849 0b04 	str.w	r0, [r9], #4
		net_buf_add_be32(buf, link.id);
    ffd2:	f100 0708 	add.w	r7, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
    ffd6:	f1ba 0f17 	cmp.w	sl, #23
		net_buf_add_be32(buf, link.id);
    ffda:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
    ffde:	4638      	mov	r0, r7
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
    ffe0:	bf28      	it	cs
    ffe2:	f04f 0a17 	movcs.w	sl, #23
		net_buf_add_be32(buf, link.id);
    ffe6:	f00f f8cf 	bl	1f188 <net_buf_simple_add_be32>
		net_buf_add_u8(buf, xact_id);
    ffea:	4629      	mov	r1, r5
    ffec:	4638      	mov	r0, r7
    ffee:	f00f f894 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
    fff2:	f048 0102 	orr.w	r1, r8, #2
    fff6:	b2c9      	uxtb	r1, r1
    fff8:	4638      	mov	r0, r7
    fffa:	f00f f88e 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_add_mem(buf, msg->data, seg_len);
    fffe:	6821      	ldr	r1, [r4, #0]
   10000:	4652      	mov	r2, sl
   10002:	4638      	mov	r0, r7
   10004:	f00f f880 	bl	1f108 <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   10008:	4651      	mov	r1, sl
   1000a:	4620      	mov	r0, r4
   1000c:	f00f f8f1 	bl	1f1f2 <net_buf_simple_pull>
   10010:	e7c2      	b.n	ff98 <prov_send+0xc0>
   10012:	bf00      	nop
   10014:	200004d0 	.word	0x200004d0
   10018:	20000610 	.word	0x20000610

0001001c <bearer_ctl_send>:
{
   1001c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10020:	4604      	mov	r4, r0
   10022:	4688      	mov	r8, r1
   10024:	4691      	mov	r9, r2
	prov_clear_tx();
   10026:	f7ff ff1d 	bl	fe64 <prov_clear_tx>
	buf = adv_buf_create();
   1002a:	f00e f924 	bl	1e276 <adv_buf_create>
	if (!buf) {
   1002e:	4606      	mov	r6, r0
   10030:	b1f0      	cbz	r0, 10070 <bearer_ctl_send+0x54>
	net_buf_add_be32(buf, link.id);
   10032:	4f11      	ldr	r7, [pc, #68]	; (10078 <bearer_ctl_send+0x5c>)
   10034:	f100 0508 	add.w	r5, r0, #8
   10038:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
   1003c:	4628      	mov	r0, r5
   1003e:	f00f f8a3 	bl	1f188 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
   10042:	2100      	movs	r1, #0
   10044:	4628      	mov	r0, r5
   10046:	f00f f868 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
   1004a:	00a1      	lsls	r1, r4, #2
   1004c:	f041 0103 	orr.w	r1, r1, #3
   10050:	b2c9      	uxtb	r1, r1
   10052:	4628      	mov	r0, r5
   10054:	f00f f861 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
   10058:	464a      	mov	r2, r9
   1005a:	4641      	mov	r1, r8
   1005c:	4628      	mov	r0, r5
   1005e:	f00f f853 	bl	1f108 <net_buf_simple_add_mem>
	link.tx.buf[0] = buf;
   10062:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
	send_reliable();
   10066:	f7ff ff15 	bl	fe94 <send_reliable>
	return 0;
   1006a:	2000      	movs	r0, #0
}
   1006c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
   10070:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10074:	e7fa      	b.n	1006c <bearer_ctl_send+0x50>
   10076:	bf00      	nop
   10078:	200004d0 	.word	0x200004d0

0001007c <gen_prov_ack_send>:
{
   1007c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (pending_ack == xact_id) {
   1007e:	4d16      	ldr	r5, [pc, #88]	; (100d8 <gen_prov_ack_send+0x5c>)
   10080:	782b      	ldrb	r3, [r5, #0]
   10082:	4283      	cmp	r3, r0
{
   10084:	4606      	mov	r6, r0
	if (pending_ack == xact_id) {
   10086:	d025      	beq.n	100d4 <gen_prov_ack_send+0x58>
	buf = adv_buf_create();
   10088:	f00e f8f5 	bl	1e276 <adv_buf_create>
	if (!buf) {
   1008c:	4604      	mov	r4, r0
   1008e:	b308      	cbz	r0, 100d4 <gen_prov_ack_send+0x58>
	if (pending_ack == XACT_NVAL) {
   10090:	782b      	ldrb	r3, [r5, #0]
   10092:	2bff      	cmp	r3, #255	; 0xff
	net_buf_add_be32(buf, link.id);
   10094:	4b11      	ldr	r3, [pc, #68]	; (100dc <gen_prov_ack_send+0x60>)
		pending_ack = xact_id;
   10096:	bf08      	it	eq
   10098:	702e      	strbeq	r6, [r5, #0]
	net_buf_add_be32(buf, link.id);
   1009a:	f100 0508 	add.w	r5, r0, #8
   1009e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
		complete = &cb;
   100a2:	bf08      	it	eq
   100a4:	4f0e      	ldreq	r7, [pc, #56]	; (100e0 <gen_prov_ack_send+0x64>)
	net_buf_add_be32(buf, link.id);
   100a6:	4628      	mov	r0, r5
		complete = NULL;
   100a8:	bf18      	it	ne
   100aa:	2700      	movne	r7, #0
	net_buf_add_be32(buf, link.id);
   100ac:	f00f f86c 	bl	1f188 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   100b0:	4631      	mov	r1, r6
   100b2:	4628      	mov	r0, r5
   100b4:	f00f f831 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
   100b8:	2101      	movs	r1, #1
   100ba:	4628      	mov	r0, r5
   100bc:	f00f f82d 	bl	1f11a <net_buf_simple_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
   100c0:	4620      	mov	r0, r4
   100c2:	4639      	mov	r1, r7
   100c4:	2200      	movs	r2, #0
   100c6:	f7fb ffb7 	bl	c038 <bt_mesh_adv_send>
	net_buf_unref(buf);
   100ca:	4620      	mov	r0, r4
}
   100cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
   100d0:	f005 bc18 	b.w	15904 <net_buf_unref>
}
   100d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100d6:	bf00      	nop
   100d8:	2000926c 	.word	0x2000926c
   100dc:	200004d0 	.word	0x200004d0
   100e0:	00020a7c 	.word	0x00020a7c

000100e4 <prov_start>:
{
   100e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (data[0] != PROV_ALG_P256) {
   100e8:	7803      	ldrb	r3, [r0, #0]
{
   100ea:	b08b      	sub	sp, #44	; 0x2c
   100ec:	4605      	mov	r5, r0
	if (data[0] != PROV_ALG_P256) {
   100ee:	b11b      	cbz	r3, 100f8 <prov_start+0x14>
		prov_send_fail_msg(PROV_ERR_NVAL_FMT);
   100f0:	2002      	movs	r0, #2
   100f2:	f00e f8c6 	bl	1e282 <prov_send_fail_msg>
   100f6:	e01b      	b.n	10130 <prov_start+0x4c>
	if (data[1] > 0x01) {
   100f8:	7843      	ldrb	r3, [r0, #1]
   100fa:	2b01      	cmp	r3, #1
   100fc:	d8f8      	bhi.n	100f0 <prov_start+0xc>
	memcpy(&link.conf_inputs[12], data, 5);
   100fe:	4f5e      	ldr	r7, [pc, #376]	; (10278 <prov_start+0x194>)
   10100:	4601      	mov	r1, r0
   10102:	2205      	movs	r2, #5
   10104:	f107 0088 	add.w	r0, r7, #136	; 0x88
   10108:	f009 ffce 	bl	1a0a8 <memcpy>
	link.expect = PROV_PUB_KEY;
   1010c:	2303      	movs	r3, #3
   1010e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	switch (method) {
   10112:	78ab      	ldrb	r3, [r5, #2]
	if (prov_auth(data[2], data[3], data[4]) < 0) {
   10114:	78e9      	ldrb	r1, [r5, #3]
   10116:	792c      	ldrb	r4, [r5, #4]
	switch (method) {
   10118:	2b03      	cmp	r3, #3
   1011a:	d8e9      	bhi.n	100f0 <prov_start+0xc>
   1011c:	e8df f003 	tbb	[pc, r3]
   10120:	8d1e0b02 	.word	0x8d1e0b02
		if (action || size) {
   10124:	4321      	orrs	r1, r4
   10126:	d1e3      	bne.n	100f0 <prov_start+0xc>
		(void)memset(link.auth, 0, sizeof(link.auth));
   10128:	4854      	ldr	r0, [pc, #336]	; (1027c <prov_start+0x198>)
   1012a:	2210      	movs	r2, #16
		(void)memset(link.auth, 0,
   1012c:	f009 ffe6 	bl	1a0fc <memset>
}
   10130:	b00b      	add	sp, #44	; 0x2c
   10132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (action || size) {
   10136:	430c      	orrs	r4, r1
   10138:	d1da      	bne.n	100f0 <prov_start+0xc>
		memcpy(link.auth + 16 - prov->static_val_len,
   1013a:	4e51      	ldr	r6, [pc, #324]	; (10280 <prov_start+0x19c>)
   1013c:	4d4f      	ldr	r5, [pc, #316]	; (1027c <prov_start+0x198>)
   1013e:	6833      	ldr	r3, [r6, #0]
   10140:	7c1a      	ldrb	r2, [r3, #16]
   10142:	68d9      	ldr	r1, [r3, #12]
   10144:	f1c2 0010 	rsb	r0, r2, #16
   10148:	4428      	add	r0, r5
   1014a:	f009 ffad 	bl	1a0a8 <memcpy>
			     sizeof(link.auth) - prov->static_val_len);
   1014e:	6833      	ldr	r3, [r6, #0]
   10150:	7c1a      	ldrb	r2, [r3, #16]
		(void)memset(link.auth, 0,
   10152:	4621      	mov	r1, r4
   10154:	f1c2 0210 	rsb	r2, r2, #16
   10158:	4628      	mov	r0, r5
   1015a:	e7e7      	b.n	1012c <prov_start+0x48>
	switch (action) {
   1015c:	2904      	cmp	r1, #4
   1015e:	d8c7      	bhi.n	100f0 <prov_start+0xc>
   10160:	4b48      	ldr	r3, [pc, #288]	; (10284 <prov_start+0x1a0>)
   10162:	f813 8001 	ldrb.w	r8, [r3, r1]
		if (!output) {
   10166:	f1b8 0f00 	cmp.w	r8, #0
   1016a:	d0c1      	beq.n	100f0 <prov_start+0xc>
		if (!(prov->output_actions & output)) {
   1016c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 10280 <prov_start+0x19c>
   10170:	f8d9 3000 	ldr.w	r3, [r9]
   10174:	8a5a      	ldrh	r2, [r3, #18]
   10176:	ea12 0f08 	tst.w	r2, r8
   1017a:	464d      	mov	r5, r9
   1017c:	d0b8      	beq.n	100f0 <prov_start+0xc>
		if (size > prov->output_size) {
   1017e:	7c5b      	ldrb	r3, [r3, #17]
   10180:	42a3      	cmp	r3, r4
   10182:	d3b5      	bcc.n	100f0 <prov_start+0xc>
		if (output == BT_MESH_DISPLAY_STRING) {
   10184:	f1b8 0f10 	cmp.w	r8, #16
   10188:	d131      	bne.n	101ee <prov_start+0x10a>
			bt_rand(str, size);
   1018a:	4621      	mov	r1, r4
   1018c:	a802      	add	r0, sp, #8
   1018e:	f00e fbe3 	bl	1e958 <bt_rand>
				str[i] %= 36;
   10192:	2624      	movs	r6, #36	; 0x24
   10194:	a802      	add	r0, sp, #8
			bt_rand(str, size);
   10196:	2100      	movs	r1, #0
			for (i = 0U; i < size; i++) {
   10198:	b2cb      	uxtb	r3, r1
   1019a:	429c      	cmp	r4, r3
   1019c:	d817      	bhi.n	101ce <prov_start+0xea>
			memcpy(link.auth, str, size);
   1019e:	4e37      	ldr	r6, [pc, #220]	; (1027c <prov_start+0x198>)
			str[size] = '\0';
   101a0:	ab0a      	add	r3, sp, #40	; 0x28
   101a2:	4423      	add	r3, r4
   101a4:	2700      	movs	r7, #0
			memcpy(link.auth, str, size);
   101a6:	4622      	mov	r2, r4
   101a8:	a902      	add	r1, sp, #8
   101aa:	4630      	mov	r0, r6
			str[size] = '\0';
   101ac:	f803 7c20 	strb.w	r7, [r3, #-32]
			memcpy(link.auth, str, size);
   101b0:	f009 ff7a 	bl	1a0a8 <memcpy>
			(void)memset(link.auth + size, 0,
   101b4:	f1c4 0210 	rsb	r2, r4, #16
   101b8:	4639      	mov	r1, r7
   101ba:	1930      	adds	r0, r6, r4
   101bc:	f009 ff9e 	bl	1a0fc <memset>
			return prov->output_string((char *)str);
   101c0:	682b      	ldr	r3, [r5, #0]
   101c2:	a802      	add	r0, sp, #8
   101c4:	69db      	ldr	r3, [r3, #28]
   101c6:	4798      	blx	r3
	if (prov_auth(data[2], data[3], data[4]) < 0) {
   101c8:	2800      	cmp	r0, #0
   101ca:	dab1      	bge.n	10130 <prov_start+0x4c>
   101cc:	e790      	b.n	100f0 <prov_start+0xc>
				str[i] %= 36;
   101ce:	7803      	ldrb	r3, [r0, #0]
   101d0:	fbb3 f2f6 	udiv	r2, r3, r6
   101d4:	fb06 3212 	mls	r2, r6, r2, r3
   101d8:	b2d2      	uxtb	r2, r2
				if (str[i] < 10) {
   101da:	b253      	sxtb	r3, r2
   101dc:	2a09      	cmp	r2, #9
					str[i] += '0';
   101de:	bf94      	ite	ls
   101e0:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   101e2:	3337      	addhi	r3, #55	; 0x37
   101e4:	b2db      	uxtb	r3, r3
   101e6:	f800 3b01 	strb.w	r3, [r0], #1
   101ea:	3101      	adds	r1, #1
   101ec:	e7d4      	b.n	10198 <prov_start+0xb4>
			u32_t div[8] = { 10, 100, 1000, 10000, 100000,
   101ee:	4e26      	ldr	r6, [pc, #152]	; (10288 <prov_start+0x1a4>)
   101f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   101f2:	ad02      	add	r5, sp, #8
   101f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   101f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   101fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   101fe:	2104      	movs	r1, #4
   10200:	eb0d 0001 	add.w	r0, sp, r1
   10204:	f00e fba8 	bl	1e958 <bt_rand>
			num %= div[size - 1];
   10208:	ab0a      	add	r3, sp, #40	; 0x28
   1020a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1020e:	9801      	ldr	r0, [sp, #4]
   10210:	f854 2c24 	ldr.w	r2, [r4, #-36]
   10214:	fbb0 f3f2 	udiv	r3, r0, r2
   10218:	fb02 0313 	mls	r3, r2, r3, r0
   1021c:	9301      	str	r3, [sp, #4]
	dst[1] = val;
   1021e:	ba1b      	rev	r3, r3
	dst[0] = val >> 8;
   10220:	65bb      	str	r3, [r7, #88]	; 0x58
			(void)memset(link.auth, 0, 12);
   10222:	220c      	movs	r2, #12
   10224:	2100      	movs	r1, #0
   10226:	4815      	ldr	r0, [pc, #84]	; (1027c <prov_start+0x198>)
   10228:	f009 ff68 	bl	1a0fc <memset>
			return prov->output_number(output, num);
   1022c:	f8d9 3000 	ldr.w	r3, [r9]
   10230:	9901      	ldr	r1, [sp, #4]
   10232:	699b      	ldr	r3, [r3, #24]
   10234:	4640      	mov	r0, r8
   10236:	4798      	blx	r3
   10238:	e7c6      	b.n	101c8 <prov_start+0xe4>
	switch (action) {
   1023a:	2903      	cmp	r1, #3
   1023c:	f63f af58 	bhi.w	100f0 <prov_start+0xc>
   10240:	4b12      	ldr	r3, [pc, #72]	; (1028c <prov_start+0x1a8>)
   10242:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   10244:	2d00      	cmp	r5, #0
   10246:	f43f af53 	beq.w	100f0 <prov_start+0xc>
		if (!(prov->input_actions & input)) {
   1024a:	4b0d      	ldr	r3, [pc, #52]	; (10280 <prov_start+0x19c>)
   1024c:	681e      	ldr	r6, [r3, #0]
   1024e:	8af3      	ldrh	r3, [r6, #22]
   10250:	422b      	tst	r3, r5
   10252:	f43f af4d 	beq.w	100f0 <prov_start+0xc>
		if (size > prov->input_size) {
   10256:	7d33      	ldrb	r3, [r6, #20]
   10258:	42a3      	cmp	r3, r4
   1025a:	f4ff af49 	bcc.w	100f0 <prov_start+0xc>
		if (input == BT_MESH_ENTER_STRING) {
   1025e:	2d08      	cmp	r5, #8
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10260:	bf0c      	ite	eq
   10262:	2140      	moveq	r1, #64	; 0x40
   10264:	2120      	movne	r1, #32
   10266:	4804      	ldr	r0, [pc, #16]	; (10278 <prov_start+0x194>)
   10268:	f00e f821 	bl	1e2ae <atomic_or>
		return prov->input(input, size);
   1026c:	6a33      	ldr	r3, [r6, #32]
   1026e:	4621      	mov	r1, r4
   10270:	4628      	mov	r0, r5
   10272:	4798      	blx	r3
   10274:	e7a8      	b.n	101c8 <prov_start+0xe4>
   10276:	bf00      	nop
   10278:	200004d0 	.word	0x200004d0
   1027c:	2000051c 	.word	0x2000051c
   10280:	20000fbc 	.word	0x20000fbc
   10284:	00021d05 	.word	0x00021d05
   10288:	0001ffdc 	.word	0x0001ffdc
   1028c:	00021d0a 	.word	0x00021d0a

00010290 <atomic_test_bit.constprop.26>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10290:	4b05      	ldr	r3, [pc, #20]	; (102a8 <atomic_test_bit.constprop.26+0x18>)
   10292:	f3bf 8f5b 	dmb	ish
   10296:	681b      	ldr	r3, [r3, #0]
   10298:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1029c:	fa43 f000 	asr.w	r0, r3, r0
}
   102a0:	f000 0001 	and.w	r0, r0, #1
   102a4:	4770      	bx	lr
   102a6:	bf00      	nop
   102a8:	200004d0 	.word	0x200004d0

000102ac <buf_sent>:
	if (!link.tx.buf[0]) {
   102ac:	4905      	ldr	r1, [pc, #20]	; (102c4 <buf_sent+0x18>)
   102ae:	f8d1 313c 	ldr.w	r3, [r1, #316]	; 0x13c
   102b2:	b133      	cbz	r3, 102c2 <buf_sent+0x16>
   102b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   102b8:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   102bc:	4802      	ldr	r0, [pc, #8]	; (102c8 <buf_sent+0x1c>)
   102be:	f006 bf0d 	b.w	170dc <k_delayed_work_submit_to_queue>
}
   102c2:	4770      	bx	lr
   102c4:	200004d0 	.word	0x200004d0
   102c8:	20001fc8 	.word	0x20001fc8

000102cc <atomic_test_and_clear_bit.constprop.25>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   102cc:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   102ce:	2301      	movs	r3, #1
   102d0:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   102d4:	4b0a      	ldr	r3, [pc, #40]	; (10300 <atomic_test_and_clear_bit.constprop.25+0x34>)
   102d6:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   102da:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   102dc:	e853 2f00 	ldrex	r2, [r3]
   102e0:	ea02 0c01 	and.w	ip, r2, r1
   102e4:	e843 ce00 	strex	lr, ip, [r3]
   102e8:	f1be 0f00 	cmp.w	lr, #0
   102ec:	d1f6      	bne.n	102dc <atomic_test_and_clear_bit.constprop.25+0x10>
   102ee:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   102f2:	4202      	tst	r2, r0
}
   102f4:	bf14      	ite	ne
   102f6:	2001      	movne	r0, #1
   102f8:	2000      	moveq	r0, #0
   102fa:	f85d fb04 	ldr.w	pc, [sp], #4
   102fe:	bf00      	nop
   10300:	200004d0 	.word	0x200004d0

00010304 <reset_link>:
{
   10304:	b510      	push	{r4, lr}
	prov_clear_tx();
   10306:	f7ff fdad 	bl	fe64 <prov_clear_tx>
	if (prov->link_close) {
   1030a:	4b12      	ldr	r3, [pc, #72]	; (10354 <reset_link+0x50>)
   1030c:	681b      	ldr	r3, [r3, #0]
   1030e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10310:	b10b      	cbz	r3, 10316 <reset_link+0x12>
		prov->link_close(BT_MESH_PROV_ADV);
   10312:	2001      	movs	r0, #1
   10314:	4798      	blx	r3
	(void)memset(&link, 0, offsetof(struct prov_link, tx.retransmit));
   10316:	4c10      	ldr	r4, [pc, #64]	; (10358 <reset_link+0x54>)
   10318:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1031c:	2100      	movs	r1, #0
   1031e:	4620      	mov	r0, r4
   10320:	f009 feec 	bl	1a0fc <memset>
	link.rx.prev_id = XACT_NVAL;
   10324:	23ff      	movs	r3, #255	; 0xff
   10326:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (bt_pub_key_get()) {
   1032a:	f7f9 feaf 	bl	a08c <bt_pub_key_get>
   1032e:	b118      	cbz	r0, 10338 <reset_link+0x34>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10330:	2102      	movs	r1, #2
   10332:	4620      	mov	r0, r4
   10334:	f00d ffbb 	bl	1e2ae <atomic_or>
	link.rx.buf = bt_mesh_proxy_get_buf();
   10338:	f000 fea0 	bl	1107c <bt_mesh_proxy_get_buf>
	if (link.conf_inputs[0]) {
   1033c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	link.rx.buf = bt_mesh_proxy_get_buf();
   10340:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
	if (link.conf_inputs[0]) {
   10344:	b12b      	cbz	r3, 10352 <reset_link+0x4e>
		bt_mesh_attention(NULL, 0);
   10346:	2100      	movs	r1, #0
   10348:	4608      	mov	r0, r1
}
   1034a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_attention(NULL, 0);
   1034e:	f7fe bf55 	b.w	f1fc <bt_mesh_attention>
}
   10352:	bd10      	pop	{r4, pc}
   10354:	20000fbc 	.word	0x20000fbc
   10358:	200004d0 	.word	0x200004d0

0001035c <gen_prov_ctl>:
{
   1035c:	b570      	push	{r4, r5, r6, lr}
   1035e:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
   10360:	7940      	ldrb	r0, [r0, #5]
   10362:	0880      	lsrs	r0, r0, #2
   10364:	2801      	cmp	r0, #1
{
   10366:	460e      	mov	r6, r1
	switch (BEARER_CTL(rx->gpc)) {
   10368:	d03e      	beq.n	103e8 <gen_prov_ctl+0x8c>
   1036a:	b110      	cbz	r0, 10372 <gen_prov_ctl+0x16>
   1036c:	2802      	cmp	r0, #2
   1036e:	d040      	beq.n	103f2 <gen_prov_ctl+0x96>
}
   10370:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len < 16) {
   10372:	888b      	ldrh	r3, [r1, #4]
   10374:	2b0f      	cmp	r3, #15
   10376:	d9fb      	bls.n	10370 <gen_prov_ctl+0x14>
	if (atomic_test_bit(link.flags, LINK_ACTIVE)) {
   10378:	2002      	movs	r0, #2
   1037a:	f7ff ff89 	bl	10290 <atomic_test_bit.constprop.26>
   1037e:	b178      	cbz	r0, 103a0 <gen_prov_ctl+0x44>
		if (link.id == rx->link_id && link.expect == PROV_INVITE) {
   10380:	4b20      	ldr	r3, [pc, #128]	; (10404 <gen_prov_ctl+0xa8>)
   10382:	6822      	ldr	r2, [r4, #0]
   10384:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   10388:	4291      	cmp	r1, r2
   1038a:	d1f1      	bne.n	10370 <gen_prov_ctl+0x14>
   1038c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   10390:	2a00      	cmp	r2, #0
   10392:	d1ed      	bne.n	10370 <gen_prov_ctl+0x14>
			bearer_ctl_send(LINK_ACK, NULL, 0);
   10394:	4611      	mov	r1, r2
   10396:	2001      	movs	r0, #1
}
   10398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0);
   1039c:	f7ff be3e 	b.w	1001c <bearer_ctl_send>
	if (memcmp(buf->data, prov->uuid, 16)) {
   103a0:	4d19      	ldr	r5, [pc, #100]	; (10408 <gen_prov_ctl+0xac>)
   103a2:	6830      	ldr	r0, [r6, #0]
   103a4:	682b      	ldr	r3, [r5, #0]
   103a6:	2210      	movs	r2, #16
   103a8:	6819      	ldr	r1, [r3, #0]
   103aa:	f009 fe6d 	bl	1a088 <memcmp>
   103ae:	2800      	cmp	r0, #0
   103b0:	d1de      	bne.n	10370 <gen_prov_ctl+0x14>
	if (prov->link_open) {
   103b2:	682b      	ldr	r3, [r5, #0]
   103b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   103b6:	b10b      	cbz	r3, 103bc <gen_prov_ctl+0x60>
		prov->link_open(BT_MESH_PROV_ADV);
   103b8:	2001      	movs	r0, #1
   103ba:	4798      	blx	r3
	link.id = rx->link_id;
   103bc:	6823      	ldr	r3, [r4, #0]
   103be:	4c11      	ldr	r4, [pc, #68]	; (10404 <gen_prov_ctl+0xa8>)
   103c0:	2104      	movs	r1, #4
   103c2:	4620      	mov	r0, r4
   103c4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   103c8:	f00d ff71 	bl	1e2ae <atomic_or>
	net_buf_simple_reset(link.rx.buf);
   103cc:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	buf->len  = 0;
   103d0:	2500      	movs	r5, #0
	buf->data = buf->__buf;
   103d2:	689a      	ldr	r2, [r3, #8]
   103d4:	601a      	str	r2, [r3, #0]
	buf->len  = 0;
   103d6:	809d      	strh	r5, [r3, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0);
   103d8:	462a      	mov	r2, r5
   103da:	4629      	mov	r1, r5
   103dc:	2001      	movs	r0, #1
   103de:	f7ff fe1d 	bl	1001c <bearer_ctl_send>
	link.expect = PROV_INVITE;
   103e2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
   103e6:	e7c3      	b.n	10370 <gen_prov_ctl+0x14>
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   103e8:	2002      	movs	r0, #2
}
   103ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   103ee:	f7ff bf4f 	b.w	10290 <atomic_test_bit.constprop.26>
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   103f2:	f7ff ff4d 	bl	10290 <atomic_test_bit.constprop.26>
   103f6:	2800      	cmp	r0, #0
   103f8:	d0ba      	beq.n	10370 <gen_prov_ctl+0x14>
}
   103fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	reset_link();
   103fe:	f7ff bf81 	b.w	10304 <reset_link>
   10402:	bf00      	nop
   10404:	200004d0 	.word	0x200004d0
   10408:	20000fbc 	.word	0x20000fbc

0001040c <prov_retransmit>:
{
   1040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
   1040e:	2002      	movs	r0, #2
   10410:	f7ff ff3e 	bl	10290 <atomic_test_bit.constprop.26>
   10414:	b368      	cbz	r0, 10472 <prov_retransmit+0x66>
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
   10416:	4c17      	ldr	r4, [pc, #92]	; (10474 <prov_retransmit+0x68>)
   10418:	f00f fbe5 	bl	1fbe6 <z_impl_k_uptime_get>
   1041c:	e9d4 324c 	ldrd	r3, r2, [r4, #304]	; 0x130
   10420:	1ac6      	subs	r6, r0, r3
   10422:	eb61 0702 	sbc.w	r7, r1, r2
   10426:	f247 5230 	movw	r2, #30000	; 0x7530
   1042a:	2300      	movs	r3, #0
   1042c:	42b2      	cmp	r2, r6
   1042e:	41bb      	sbcs	r3, r7
   10430:	da03      	bge.n	1043a <prov_retransmit+0x2e>
}
   10432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		reset_link();
   10436:	f7ff bf65 	b.w	10304 <reset_link>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   1043a:	4e0f      	ldr	r6, [pc, #60]	; (10478 <prov_retransmit+0x6c>)
   1043c:	f504 749e 	add.w	r4, r4, #316	; 0x13c
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   10440:	2500      	movs	r5, #0
		struct net_buf *buf = link.tx.buf[i];
   10442:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   10446:	b1a0      	cbz	r0, 10472 <prov_retransmit+0x66>
		if (BT_MESH_ADV(buf)->busy) {
   10448:	6943      	ldr	r3, [r0, #20]
   1044a:	7a1a      	ldrb	r2, [r3, #8]
   1044c:	f012 0204 	ands.w	r2, r2, #4
   10450:	f105 0501 	add.w	r5, r5, #1
   10454:	d10b      	bne.n	1046e <prov_retransmit+0x62>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   10456:	2d03      	cmp	r5, #3
   10458:	d005      	beq.n	10466 <prov_retransmit+0x5a>
   1045a:	6823      	ldr	r3, [r4, #0]
   1045c:	b11b      	cbz	r3, 10466 <prov_retransmit+0x5a>
			bt_mesh_adv_send(buf, NULL, NULL);
   1045e:	4611      	mov	r1, r2
   10460:	f7fb fdea 	bl	c038 <bt_mesh_adv_send>
   10464:	e7ed      	b.n	10442 <prov_retransmit+0x36>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   10466:	2200      	movs	r2, #0
   10468:	4631      	mov	r1, r6
   1046a:	f7fb fde5 	bl	c038 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1046e:	2d03      	cmp	r5, #3
   10470:	d1e7      	bne.n	10442 <prov_retransmit+0x36>
}
   10472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10474:	200004d0 	.word	0x200004d0
   10478:	20008ec8 	.word	0x20008ec8

0001047c <bt_mesh_pb_gatt_recv>:
}
#endif /* CONFIG_BT_MESH_PB_ADV */

#if defined(CONFIG_BT_MESH_PB_GATT)
int bt_mesh_pb_gatt_recv(struct bt_conn *conn, struct net_buf_simple *buf)
{
   1047c:	b538      	push	{r3, r4, r5, lr}
	u8_t type;

	BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

	if (link.conn != conn) {
   1047e:	4d14      	ldr	r5, [pc, #80]	; (104d0 <bt_mesh_pb_gatt_recv+0x54>)
   10480:	686b      	ldr	r3, [r5, #4]
   10482:	4283      	cmp	r3, r0
{
   10484:	460c      	mov	r4, r1
	if (link.conn != conn) {
   10486:	d120      	bne.n	104ca <bt_mesh_pb_gatt_recv+0x4e>
		BT_WARN("Data for unexpected connection");
		return -ENOTCONN;
	}

	if (buf->len < 1) {
   10488:	888b      	ldrh	r3, [r1, #4]
   1048a:	b913      	cbnz	r3, 10492 <bt_mesh_pb_gatt_recv+0x16>

	type = net_buf_simple_pull_u8(buf);
	if (type != PROV_FAILED && type != link.expect) {
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, link.expect);
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
		return -EINVAL;
   1048c:	f06f 0015 	mvn.w	r0, #21
	}

	prov_handlers[type].func(buf->data);

	return 0;
}
   10490:	bd38      	pop	{r3, r4, r5, pc}
	type = net_buf_simple_pull_u8(buf);
   10492:	4608      	mov	r0, r1
   10494:	f00e febd 	bl	1f212 <net_buf_simple_pull_u8>
	if (type != PROV_FAILED && type != link.expect) {
   10498:	2809      	cmp	r0, #9
   1049a:	d009      	beq.n	104b0 <bt_mesh_pb_gatt_recv+0x34>
   1049c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   104a0:	4283      	cmp	r3, r0
   104a2:	d003      	beq.n	104ac <bt_mesh_pb_gatt_recv+0x30>
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
   104a4:	2003      	movs	r0, #3
   104a6:	f00d feec 	bl	1e282 <prov_send_fail_msg>
   104aa:	e7ef      	b.n	1048c <bt_mesh_pb_gatt_recv+0x10>
	if (type >= ARRAY_SIZE(prov_handlers)) {
   104ac:	2809      	cmp	r0, #9
   104ae:	d8ed      	bhi.n	1048c <bt_mesh_pb_gatt_recv+0x10>
	if (prov_handlers[type].len != buf->len) {
   104b0:	4b08      	ldr	r3, [pc, #32]	; (104d4 <bt_mesh_pb_gatt_recv+0x58>)
   104b2:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   104b6:	8891      	ldrh	r1, [r2, #4]
   104b8:	88a2      	ldrh	r2, [r4, #4]
   104ba:	4291      	cmp	r1, r2
   104bc:	d1e6      	bne.n	1048c <bt_mesh_pb_gatt_recv+0x10>
	prov_handlers[type].func(buf->data);
   104be:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   104c2:	6820      	ldr	r0, [r4, #0]
   104c4:	4798      	blx	r3
	return 0;
   104c6:	2000      	movs	r0, #0
   104c8:	e7e2      	b.n	10490 <bt_mesh_pb_gatt_recv+0x14>
		return -ENOTCONN;
   104ca:	f06f 0038 	mvn.w	r0, #56	; 0x38
   104ce:	e7df      	b.n	10490 <bt_mesh_pb_gatt_recv+0x14>
   104d0:	200004d0 	.word	0x200004d0
   104d4:	00020aa4 	.word	0x00020aa4

000104d8 <bt_mesh_pb_gatt_open>:

int bt_mesh_pb_gatt_open(struct bt_conn *conn)
{
   104d8:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   104da:	4d0d      	ldr	r5, [pc, #52]	; (10510 <bt_mesh_pb_gatt_open+0x38>)
   104dc:	4606      	mov	r6, r0
   104de:	2104      	movs	r1, #4
   104e0:	4628      	mov	r0, r5
   104e2:	f00d fee4 	bl	1e2ae <atomic_or>
	BT_DBG("conn %p", conn);

	if (atomic_test_and_set_bit(link.flags, LINK_ACTIVE)) {
   104e6:	f010 0404 	ands.w	r4, r0, #4
   104ea:	d10d      	bne.n	10508 <bt_mesh_pb_gatt_open+0x30>
		return -EBUSY;
	}

	link.conn = bt_conn_ref(conn);
   104ec:	4630      	mov	r0, r6
   104ee:	f00a f9b9 	bl	1a864 <bt_conn_ref>
	link.expect = PROV_INVITE;

	if (prov->link_open) {
   104f2:	4b08      	ldr	r3, [pc, #32]	; (10514 <bt_mesh_pb_gatt_open+0x3c>)
	link.expect = PROV_INVITE;
   104f4:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
	if (prov->link_open) {
   104f8:	681b      	ldr	r3, [r3, #0]
	link.conn = bt_conn_ref(conn);
   104fa:	6068      	str	r0, [r5, #4]
	if (prov->link_open) {
   104fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   104fe:	b10b      	cbz	r3, 10504 <bt_mesh_pb_gatt_open+0x2c>
		prov->link_open(BT_MESH_PROV_GATT);
   10500:	2002      	movs	r0, #2
   10502:	4798      	blx	r3
	}

	return 0;
}
   10504:	4620      	mov	r0, r4
   10506:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   10508:	f06f 040f 	mvn.w	r4, #15
   1050c:	e7fa      	b.n	10504 <bt_mesh_pb_gatt_open+0x2c>
   1050e:	bf00      	nop
   10510:	200004d0 	.word	0x200004d0
   10514:	20000fbc 	.word	0x20000fbc

00010518 <bt_mesh_pb_gatt_close>:

int bt_mesh_pb_gatt_close(struct bt_conn *conn)
{
   10518:	b510      	push	{r4, lr}
	bool pub_key;

	BT_DBG("conn %p", conn);

	if (link.conn != conn) {
   1051a:	4c15      	ldr	r4, [pc, #84]	; (10570 <bt_mesh_pb_gatt_close+0x58>)
   1051c:	6863      	ldr	r3, [r4, #4]
   1051e:	4283      	cmp	r3, r0
   10520:	d120      	bne.n	10564 <bt_mesh_pb_gatt_close+0x4c>
		BT_ERR("Not connected");
		return -ENOTCONN;
	}

	/* Disable Attention Timer if it was set */
	if (link.conf_inputs[0]) {
   10522:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   10526:	b11b      	cbz	r3, 10530 <bt_mesh_pb_gatt_close+0x18>
		bt_mesh_attention(NULL, 0);
   10528:	2100      	movs	r1, #0
   1052a:	4608      	mov	r0, r1
   1052c:	f7fe fe66 	bl	f1fc <bt_mesh_attention>
	}

	if (prov->link_close) {
   10530:	4b10      	ldr	r3, [pc, #64]	; (10574 <bt_mesh_pb_gatt_close+0x5c>)
   10532:	681b      	ldr	r3, [r3, #0]
   10534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10536:	b10b      	cbz	r3, 1053c <bt_mesh_pb_gatt_close+0x24>
		prov->link_close(BT_MESH_PROV_GATT);
   10538:	2002      	movs	r0, #2
   1053a:	4798      	blx	r3
	}

	bt_conn_unref(link.conn);
   1053c:	6860      	ldr	r0, [r4, #4]
   1053e:	f00a f998 	bl	1a872 <bt_conn_unref>

	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
   10542:	2001      	movs	r0, #1
   10544:	f7ff fea4 	bl	10290 <atomic_test_bit.constprop.26>
	(void)memset(&link, 0, sizeof(link));
   10548:	f44f 72b4 	mov.w	r2, #360	; 0x168
	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
   1054c:	4604      	mov	r4, r0
	(void)memset(&link, 0, sizeof(link));
   1054e:	2100      	movs	r1, #0
   10550:	4807      	ldr	r0, [pc, #28]	; (10570 <bt_mesh_pb_gatt_close+0x58>)
   10552:	f009 fdd3 	bl	1a0fc <memset>

	if (pub_key) {
   10556:	b144      	cbz	r4, 1056a <bt_mesh_pb_gatt_close+0x52>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10558:	2102      	movs	r1, #2
   1055a:	4805      	ldr	r0, [pc, #20]	; (10570 <bt_mesh_pb_gatt_close+0x58>)
   1055c:	f00d fea7 	bl	1e2ae <atomic_or>
   10560:	2000      	movs	r0, #0
		atomic_set_bit(link.flags, LOCAL_PUB_KEY);
	}

	return 0;
}
   10562:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
   10564:	f06f 0038 	mvn.w	r0, #56	; 0x38
   10568:	e7fb      	b.n	10562 <bt_mesh_pb_gatt_close+0x4a>
	return 0;
   1056a:	4620      	mov	r0, r4
   1056c:	e7f9      	b.n	10562 <bt_mesh_pb_gatt_close+0x4a>
   1056e:	bf00      	nop
   10570:	200004d0 	.word	0x200004d0
   10574:	20000fbc 	.word	0x20000fbc

00010578 <close_link.constprop.23>:
static void close_link(u8_t err, u8_t reason)
   10578:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (link.conn) {
   1057a:	4c15      	ldr	r4, [pc, #84]	; (105d0 <close_link.constprop.23+0x58>)
   1057c:	6865      	ldr	r5, [r4, #4]
   1057e:	2602      	movs	r6, #2
   10580:	f88d 6007 	strb.w	r6, [sp, #7]
   10584:	b125      	cbz	r5, 10590 <close_link.constprop.23+0x18>
		bt_mesh_pb_gatt_close(link.conn);
   10586:	4628      	mov	r0, r5
   10588:	f7ff ffc6 	bl	10518 <bt_mesh_pb_gatt_close>
}
   1058c:	b002      	add	sp, #8
   1058e:	bd70      	pop	{r4, r5, r6, pc}
		prov_send_fail_msg(err);
   10590:	f00d fe77 	bl	1e282 <prov_send_fail_msg>
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
   10594:	2201      	movs	r2, #1
   10596:	f10d 0107 	add.w	r1, sp, #7
   1059a:	4630      	mov	r0, r6
	link.rx.seg = 0U;
   1059c:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
   105a0:	f7ff fd3c 	bl	1001c <bearer_ctl_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   105a4:	f3bf 8f5b 	dmb	ish
   105a8:	e854 3f00 	ldrex	r3, [r4]
   105ac:	f023 0304 	bic.w	r3, r3, #4
   105b0:	e844 3200 	strex	r2, r3, [r4]
   105b4:	2a00      	cmp	r2, #0
   105b6:	d1f7      	bne.n	105a8 <close_link.constprop.23+0x30>
   105b8:	f3bf 8f5b 	dmb	ish
	if (link.conf_inputs[0]) {
   105bc:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   105c0:	2b00      	cmp	r3, #0
   105c2:	d0e3      	beq.n	1058c <close_link.constprop.23+0x14>
		bt_mesh_attention(NULL, 0);
   105c4:	4629      	mov	r1, r5
   105c6:	4628      	mov	r0, r5
   105c8:	f7fe fe18 	bl	f1fc <bt_mesh_attention>
   105cc:	e7de      	b.n	1058c <close_link.constprop.23+0x14>
   105ce:	bf00      	nop
   105d0:	200004d0 	.word	0x200004d0

000105d4 <prov_invite>:
{
   105d4:	b530      	push	{r4, r5, lr}
   105d6:	b089      	sub	sp, #36	; 0x24
	if (data[0]) {
   105d8:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, 12);
   105da:	ab03      	add	r3, sp, #12
   105dc:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   105e0:	4604      	mov	r4, r0
	PROV_BUF(buf, 12);
   105e2:	9300      	str	r3, [sp, #0]
   105e4:	e9cd 2301 	strd	r2, r3, [sp, #4]
	if (data[0]) {
   105e8:	b111      	cbz	r1, 105f0 <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   105ea:	2000      	movs	r0, #0
   105ec:	f7fe fe06 	bl	f1fc <bt_mesh_attention>
	link.conf_inputs[0] = data[0];
   105f0:	4d23      	ldr	r5, [pc, #140]	; (10680 <prov_invite+0xac>)
   105f2:	7823      	ldrb	r3, [r4, #0]
   105f4:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
	prov_buf_init(&buf, PROV_CAPABILITIES);
   105f8:	2101      	movs	r1, #1
   105fa:	4668      	mov	r0, sp
   105fc:	f00d fe2f 	bl	1e25e <prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   10600:	f7fd ff42 	bl	e488 <bt_mesh_elem_count>
   10604:	4601      	mov	r1, r0
   10606:	4668      	mov	r0, sp
   10608:	f00e fd87 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->static_val ? BIT(0) : 0x00);
   1060c:	4c1d      	ldr	r4, [pc, #116]	; (10684 <prov_invite+0xb0>)
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   1060e:	2101      	movs	r1, #1
   10610:	4668      	mov	r0, sp
   10612:	f00e fd99 	bl	1f148 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, 0x00);
   10616:	2100      	movs	r1, #0
   10618:	4668      	mov	r0, sp
   1061a:	f00e fd7e 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->static_val ? BIT(0) : 0x00);
   1061e:	6823      	ldr	r3, [r4, #0]
   10620:	68d9      	ldr	r1, [r3, #12]
   10622:	3100      	adds	r1, #0
   10624:	bf18      	it	ne
   10626:	2101      	movne	r1, #1
   10628:	4668      	mov	r0, sp
   1062a:	f00e fd76 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, prov->output_size);
   1062e:	6823      	ldr	r3, [r4, #0]
   10630:	4668      	mov	r0, sp
   10632:	7c59      	ldrb	r1, [r3, #17]
   10634:	f00e fd71 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, prov->output_actions);
   10638:	6823      	ldr	r3, [r4, #0]
   1063a:	4668      	mov	r0, sp
   1063c:	8a59      	ldrh	r1, [r3, #18]
   1063e:	f00e fd83 	bl	1f148 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, prov->input_size);
   10642:	6823      	ldr	r3, [r4, #0]
   10644:	4668      	mov	r0, sp
   10646:	7d19      	ldrb	r1, [r3, #20]
   10648:	f00e fd67 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, prov->input_actions);
   1064c:	6823      	ldr	r3, [r4, #0]
   1064e:	4668      	mov	r0, sp
   10650:	8ad9      	ldrh	r1, [r3, #22]
   10652:	f00e fd79 	bl	1f148 <net_buf_simple_add_be16>
	memcpy(&link.conf_inputs[1], &buf.data[1], 11);
   10656:	9900      	ldr	r1, [sp, #0]
   10658:	220b      	movs	r2, #11
   1065a:	3101      	adds	r1, #1
   1065c:	f105 007d 	add.w	r0, r5, #125	; 0x7d
   10660:	f009 fd22 	bl	1a0a8 <memcpy>
	if (prov_send(&buf)) {
   10664:	4668      	mov	r0, sp
   10666:	f7ff fc37 	bl	fed8 <prov_send>
   1066a:	b120      	cbz	r0, 10676 <prov_invite+0xa2>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   1066c:	2005      	movs	r0, #5
   1066e:	f7ff ff83 	bl	10578 <close_link.constprop.23>
}
   10672:	b009      	add	sp, #36	; 0x24
   10674:	bd30      	pop	{r4, r5, pc}
	link.expect = PROV_START;
   10676:	2302      	movs	r3, #2
   10678:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   1067c:	e7f9      	b.n	10672 <prov_invite+0x9e>
   1067e:	bf00      	nop
   10680:	200004d0 	.word	0x200004d0
   10684:	20000fbc 	.word	0x20000fbc

00010688 <send_pub_key>:
{
   10688:	b510      	push	{r4, lr}
   1068a:	b096      	sub	sp, #88	; 0x58
	PROV_BUF(buf, 65);
   1068c:	ab04      	add	r3, sp, #16
   1068e:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   10692:	9301      	str	r3, [sp, #4]
   10694:	e9cd 2302 	strd	r2, r3, [sp, #8]
	key = bt_pub_key_get();
   10698:	f7f9 fcf8 	bl	a08c <bt_pub_key_get>
	if (!key) {
   1069c:	4604      	mov	r4, r0
   1069e:	b920      	cbnz	r0, 106aa <send_pub_key+0x22>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   106a0:	2005      	movs	r0, #5
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   106a2:	f7ff ff69 	bl	10578 <close_link.constprop.23>
}
   106a6:	b016      	add	sp, #88	; 0x58
   106a8:	bd10      	pop	{r4, pc}
	prov_buf_init(&buf, PROV_PUB_KEY);
   106aa:	2103      	movs	r1, #3
   106ac:	a801      	add	r0, sp, #4
   106ae:	f00d fdd6 	bl	1e25e <prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), key, 32);
   106b2:	2120      	movs	r1, #32
   106b4:	a801      	add	r0, sp, #4
   106b6:	f00e fd21 	bl	1f0fc <net_buf_simple_add>
   106ba:	4621      	mov	r1, r4
   106bc:	f00d fe07 	bl	1e2ce <sys_memcpy_swap.constprop.21>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), &key[32], 32);
   106c0:	2120      	movs	r1, #32
   106c2:	a801      	add	r0, sp, #4
   106c4:	f00e fd1a 	bl	1f0fc <net_buf_simple_add>
   106c8:	f104 0120 	add.w	r1, r4, #32
   106cc:	f00d fdff 	bl	1e2ce <sys_memcpy_swap.constprop.21>
	memcpy(&link.conf_inputs[81], &buf.data[1], 64);
   106d0:	4c12      	ldr	r4, [pc, #72]	; (1071c <send_pub_key+0x94>)
   106d2:	9901      	ldr	r1, [sp, #4]
   106d4:	2240      	movs	r2, #64	; 0x40
   106d6:	3101      	adds	r1, #1
   106d8:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
   106dc:	f009 fce4 	bl	1a0a8 <memcpy>
	prov_send(&buf);
   106e0:	a801      	add	r0, sp, #4
   106e2:	f7ff fbf9 	bl	fed8 <prov_send>
   106e6:	2300      	movs	r3, #0
	buf->data = buf->__buf;
   106e8:	9803      	ldr	r0, [sp, #12]
	buf->len  = 0;
   106ea:	f8ad 3008 	strh.w	r3, [sp, #8]
	sys_memcpy_swap(buf.data, &link.conf_inputs[17], 32);
   106ee:	f104 018d 	add.w	r1, r4, #141	; 0x8d
	buf->data = buf->__buf;
   106f2:	9001      	str	r0, [sp, #4]
   106f4:	f00d fdeb 	bl	1e2ce <sys_memcpy_swap.constprop.21>
	sys_memcpy_swap(&buf.data[32], &link.conf_inputs[49], 32);
   106f8:	9801      	ldr	r0, [sp, #4]
   106fa:	f104 01ad 	add.w	r1, r4, #173	; 0xad
   106fe:	3020      	adds	r0, #32
   10700:	f00d fde5 	bl	1e2ce <sys_memcpy_swap.constprop.21>
	if (bt_dh_key_gen(buf.data, prov_dh_key_cb)) {
   10704:	4906      	ldr	r1, [pc, #24]	; (10720 <send_pub_key+0x98>)
   10706:	9801      	ldr	r0, [sp, #4]
   10708:	f7f9 fcce 	bl	a0a8 <bt_dh_key_gen>
   1070c:	b108      	cbz	r0, 10712 <send_pub_key+0x8a>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   1070e:	2007      	movs	r0, #7
   10710:	e7c7      	b.n	106a2 <send_pub_key+0x1a>
	link.expect = PROV_CONFIRM;
   10712:	2305      	movs	r3, #5
   10714:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   10718:	e7c5      	b.n	106a6 <send_pub_key+0x1e>
   1071a:	bf00      	nop
   1071c:	200004d0 	.word	0x200004d0
   10720:	00010b99 	.word	0x00010b99

00010724 <prov_pub_key>:
{
   10724:	b508      	push	{r3, lr}
	memcpy(&link.conf_inputs[17], data, 64);
   10726:	4601      	mov	r1, r0
   10728:	2240      	movs	r2, #64	; 0x40
   1072a:	4809      	ldr	r0, [pc, #36]	; (10750 <prov_pub_key+0x2c>)
   1072c:	f009 fcbc 	bl	1a0a8 <memcpy>
	if (!atomic_test_bit(link.flags, LOCAL_PUB_KEY)) {
   10730:	2001      	movs	r0, #1
   10732:	f7ff fdad 	bl	10290 <atomic_test_bit.constprop.26>
   10736:	b938      	cbnz	r0, 10748 <prov_pub_key+0x24>
		prov_clear_tx();
   10738:	f7ff fb94 	bl	fe64 <prov_clear_tx>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1073c:	2101      	movs	r1, #1
   1073e:	4805      	ldr	r0, [pc, #20]	; (10754 <prov_pub_key+0x30>)
}
   10740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10744:	f00d bdb3 	b.w	1e2ae <atomic_or>
   10748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_pub_key();
   1074c:	f7ff bf9c 	b.w	10688 <send_pub_key>
   10750:	2000055d 	.word	0x2000055d
   10754:	200004d0 	.word	0x200004d0

00010758 <pub_key_ready>:
{
   10758:	b508      	push	{r3, lr}
	if (!pkey) {
   1075a:	b158      	cbz	r0, 10774 <pub_key_ready+0x1c>
   1075c:	2102      	movs	r1, #2
   1075e:	4806      	ldr	r0, [pc, #24]	; (10778 <pub_key_ready+0x20>)
   10760:	f00d fda5 	bl	1e2ae <atomic_or>
	if (atomic_test_and_clear_bit(link.flags, REMOTE_PUB_KEY)) {
   10764:	2000      	movs	r0, #0
   10766:	f7ff fdb1 	bl	102cc <atomic_test_and_clear_bit.constprop.25>
   1076a:	b118      	cbz	r0, 10774 <pub_key_ready+0x1c>
}
   1076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_pub_key();
   10770:	f7ff bf8a 	b.w	10688 <send_pub_key>
}
   10774:	bd08      	pop	{r3, pc}
   10776:	bf00      	nop
   10778:	200004d0 	.word	0x200004d0

0001077c <prov_random>:
{
   1077c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
   1077e:	4c26      	ldr	r4, [pc, #152]	; (10818 <prov_random+0x9c>)
{
   10780:	b099      	sub	sp, #100	; 0x64
	PROV_BUF(rnd, 16);
   10782:	ab0c      	add	r3, sp, #48	; 0x30
   10784:	f44f 12a8 	mov.w	r2, #1376256	; 0x150000
   10788:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
   1078c:	4607      	mov	r7, r0
	PROV_BUF(rnd, 16);
   1078e:	9301      	str	r3, [sp, #4]
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
   10790:	4601      	mov	r1, r0
   10792:	ab04      	add	r3, sp, #16
   10794:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   10798:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   1079c:	f00b fded 	bl	1c37a <bt_mesh_prov_conf>
   107a0:	b120      	cbz	r0, 107ac <prov_random+0x30>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   107a2:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   107a4:	f7ff fee8 	bl	10578 <close_link.constprop.23>
}
   107a8:	b019      	add	sp, #100	; 0x64
   107aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (memcmp(conf_verify, link.conf, 16)) {
   107ac:	2210      	movs	r2, #16
   107ae:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   107b2:	eb0d 0002 	add.w	r0, sp, r2
   107b6:	f009 fc67 	bl	1a088 <memcmp>
   107ba:	b108      	cbz	r0, 107c0 <prov_random+0x44>
		close_link(PROV_ERR_CFM_FAILED, CLOSE_REASON_FAILED);
   107bc:	2004      	movs	r0, #4
   107be:	e7f1      	b.n	107a4 <prov_random+0x28>
	prov_buf_init(&rnd, PROV_RANDOM);
   107c0:	2106      	movs	r1, #6
   107c2:	a801      	add	r0, sp, #4
	net_buf_simple_add_mem(&rnd, link.rand, 16);
   107c4:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	prov_buf_init(&rnd, PROV_RANDOM);
   107c8:	f00d fd49 	bl	1e25e <prov_buf_init>
	net_buf_simple_add_mem(&rnd, link.rand, 16);
   107cc:	4631      	mov	r1, r6
   107ce:	2210      	movs	r2, #16
   107d0:	a801      	add	r0, sp, #4
   107d2:	f00e fc99 	bl	1f108 <net_buf_simple_add_mem>
	if (prov_send(&rnd)) {
   107d6:	a801      	add	r0, sp, #4
   107d8:	f7ff fb7e 	bl	fed8 <prov_send>
   107dc:	4601      	mov	r1, r0
   107de:	b108      	cbz	r0, 107e4 <prov_random+0x68>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   107e0:	2005      	movs	r0, #5
   107e2:	e7df      	b.n	107a4 <prov_random+0x28>
static inline int bt_mesh_prov_salt(const u8_t conf_salt[16],
				    const u8_t prov_rand[16],
				    const u8_t dev_rand[16],
				    u8_t prov_salt[16])
{
	const u8_t prov_salt_key[16] = { 0 };
   107e4:	2510      	movs	r5, #16
   107e6:	462a      	mov	r2, r5
   107e8:	a808      	add	r0, sp, #32
   107ea:	f009 fc87 	bl	1a0fc <memset>
	struct bt_mesh_sg sg[] = {
   107ee:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   107f2:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   107f6:	2203      	movs	r2, #3
   107f8:	f204 130d 	addw	r3, r4, #269	; 0x10d
   107fc:	a912      	add	r1, sp, #72	; 0x48
   107fe:	a808      	add	r0, sp, #32
	struct bt_mesh_sg sg[] = {
   10800:	e9cd 7514 	strd	r7, r5, [sp, #80]	; 0x50
   10804:	e9cd 6516 	strd	r6, r5, [sp, #88]	; 0x58
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   10808:	f00b fbf5 	bl	1bff6 <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(link.conf_salt, data, link.rand,
   1080c:	2800      	cmp	r0, #0
   1080e:	d1c8      	bne.n	107a2 <prov_random+0x26>
	link.expect = PROV_DATA;
   10810:	2307      	movs	r3, #7
   10812:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   10816:	e7c7      	b.n	107a8 <prov_random+0x2c>
   10818:	200004d0 	.word	0x200004d0

0001081c <prov_data>:
{
   1081c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   10820:	4c3b      	ldr	r4, [pc, #236]	; (10910 <prov_data+0xf4>)
   10822:	b09b      	sub	sp, #108	; 0x6c
	PROV_BUF(msg, 1);
   10824:	ab02      	add	r3, sp, #8
   10826:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   1082a:	ad0b      	add	r5, sp, #44	; 0x2c
   1082c:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   10830:	4606      	mov	r6, r0
	PROV_BUF(msg, 1);
   10832:	9304      	str	r3, [sp, #16]
   10834:	9500      	str	r5, [sp, #0]
   10836:	4b37      	ldr	r3, [pc, #220]	; (10914 <prov_data+0xf8>)
   10838:	f204 120d 	addw	r2, r4, #269	; 0x10d
   1083c:	2120      	movs	r1, #32
   1083e:	f104 0008 	add.w	r0, r4, #8
   10842:	f00b fc1b 	bl	1c07c <bt_mesh_k1>
	if (err) {
   10846:	b108      	cbz	r0, 1084c <prov_data+0x30>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   10848:	2007      	movs	r0, #7
   1084a:	e01b      	b.n	10884 <prov_data+0x68>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   1084c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
   10850:	f8cd 8000 	str.w	r8, [sp]
   10854:	4b30      	ldr	r3, [pc, #192]	; (10918 <prov_data+0xfc>)
   10856:	f204 120d 	addw	r2, r4, #269	; 0x10d
   1085a:	2120      	movs	r1, #32
   1085c:	f104 0008 	add.w	r0, r4, #8
   10860:	f00b fc0c 	bl	1c07c <bt_mesh_k1>
	if (!err) {
   10864:	2800      	cmp	r0, #0
   10866:	d1ef      	bne.n	10848 <prov_data+0x2c>
		memcpy(nonce, tmp + 3, 13);
   10868:	220d      	movs	r2, #13
   1086a:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
   1086e:	a807      	add	r0, sp, #28
   10870:	f009 fc1a 	bl	1a0a8 <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   10874:	4643      	mov	r3, r8
   10876:	4632      	mov	r2, r6
   10878:	a907      	add	r1, sp, #28
   1087a:	4628      	mov	r0, r5
   1087c:	f00b fd8a 	bl	1c394 <bt_mesh_prov_decrypt>
	if (err) {
   10880:	b118      	cbz	r0, 1088a <prov_data+0x6e>
		close_link(PROV_ERR_DECRYPT, CLOSE_REASON_FAILED);
   10882:	2006      	movs	r0, #6
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   10884:	f7ff fe78 	bl	10578 <close_link.constprop.23>
		return;
   10888:	e03e      	b.n	10908 <prov_data+0xec>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   1088a:	af0f      	add	r7, sp, #60	; 0x3c
   1088c:	9700      	str	r7, [sp, #0]
   1088e:	4b23      	ldr	r3, [pc, #140]	; (1091c <prov_data+0x100>)
   10890:	f204 120d 	addw	r2, r4, #269	; 0x10d
   10894:	2120      	movs	r1, #32
   10896:	f104 0008 	add.w	r0, r4, #8
   1089a:	f00b fbef 	bl	1c07c <bt_mesh_k1>
	if (err) {
   1089e:	4683      	mov	fp, r0
   108a0:	2800      	cmp	r0, #0
   108a2:	d1d1      	bne.n	10848 <prov_data+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   108a4:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   108a8:	f89d 905d 	ldrb.w	r9, [sp, #93]	; 0x5d
   108ac:	f89d 505f 	ldrb.w	r5, [sp, #95]	; 0x5f
   108b0:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   108b4:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
	flags = pdu[18];
   108b8:	f89d a05e 	ldrb.w	sl, [sp, #94]	; 0x5e
   108bc:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
   108c0:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   108c4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   108c8:	f89d 5062 	ldrb.w	r5, [sp, #98]	; 0x62
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   108cc:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
   108d0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
   108d4:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
	prov_buf_init(&msg, PROV_COMPLETE);
   108d8:	2108      	movs	r1, #8
   108da:	a804      	add	r0, sp, #16
   108dc:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
   108e0:	f00d fcbd 	bl	1e25e <prov_buf_init>
	prov_send(&msg);
   108e4:	a804      	add	r0, sp, #16
   108e6:	f7ff faf7 	bl	fed8 <prov_send>
	link.expect = 0U;
   108ea:	f884 b028 	strb.w	fp, [r4, #40]	; 0x28
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   108ee:	462b      	mov	r3, r5
	return !!link.conn;
   108f0:	6864      	ldr	r4, [r4, #4]
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   108f2:	4652      	mov	r2, sl
   108f4:	e9cd 6700 	strd	r6, r7, [sp]
   108f8:	4649      	mov	r1, r9
   108fa:	4640      	mov	r0, r8
   108fc:	f7fb fa50 	bl	bda0 <bt_mesh_provision>
	if (err) {
   10900:	b910      	cbnz	r0, 10908 <prov_data+0xec>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) && identity_enable) {
   10902:	b10c      	cbz	r4, 10908 <prov_data+0xec>
		bt_mesh_proxy_identity_enable();
   10904:	f000 fb88 	bl	11018 <bt_mesh_proxy_identity_enable>
}
   10908:	b01b      	add	sp, #108	; 0x6c
   1090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1090e:	bf00      	nop
   10910:	200004d0 	.word	0x200004d0
   10914:	00021d0e 	.word	0x00021d0e
   10918:	00021d13 	.word	0x00021d13
   1091c:	00021d18 	.word	0x00021d18

00010920 <prov_msg_recv>:
{
   10920:	b570      	push	{r4, r5, r6, lr}
	u8_t type = link.rx.buf->data[0];
   10922:	4c1e      	ldr	r4, [pc, #120]	; (1099c <prov_msg_recv+0x7c>)
   10924:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   10928:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
	u8_t type = link.rx.buf->data[0];
   1092c:	6803      	ldr	r3, [r0, #0]
   1092e:	781d      	ldrb	r5, [r3, #0]
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   10930:	f7fd fc08 	bl	e144 <bt_mesh_fcs_check>
   10934:	4626      	mov	r6, r4
   10936:	b380      	cbz	r0, 1099a <prov_msg_recv+0x7a>
	gen_prov_ack_send(link.rx.id);
   10938:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
   1093c:	f7ff fb9e 	bl	1007c <gen_prov_ack_send>
	link.rx.prev_id = link.rx.id;
   10940:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   10944:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (type != PROV_FAILED && type != link.expect) {
   10948:	2d09      	cmp	r5, #9
	link.rx.id = 0U;
   1094a:	f04f 0300 	mov.w	r3, #0
   1094e:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	if (type != PROV_FAILED && type != link.expect) {
   10952:	d00f      	beq.n	10974 <prov_msg_recv+0x54>
   10954:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10958:	42ab      	cmp	r3, r5
   1095a:	d004      	beq.n	10966 <prov_msg_recv+0x46>
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
   1095c:	2003      	movs	r0, #3
}
   1095e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
   10962:	f00d bc8e 	b.w	1e282 <prov_send_fail_msg>
	if (type >= ARRAY_SIZE(prov_handlers)) {
   10966:	2b09      	cmp	r3, #9
   10968:	d904      	bls.n	10974 <prov_msg_recv+0x54>
		close_link(PROV_ERR_NVAL_PDU, CLOSE_REASON_FAILED);
   1096a:	2001      	movs	r0, #1
}
   1096c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   10970:	f7ff be02 	b.w	10578 <close_link.constprop.23>
	if (1 + prov_handlers[type].len != link.rx.buf->len) {
   10974:	4a0a      	ldr	r2, [pc, #40]	; (109a0 <prov_msg_recv+0x80>)
   10976:	f8d6 112c 	ldr.w	r1, [r6, #300]	; 0x12c
   1097a:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
   1097e:	8888      	ldrh	r0, [r1, #4]
   10980:	889b      	ldrh	r3, [r3, #4]
   10982:	3301      	adds	r3, #1
   10984:	4283      	cmp	r3, r0
   10986:	d001      	beq.n	1098c <prov_msg_recv+0x6c>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   10988:	2002      	movs	r0, #2
   1098a:	e7ef      	b.n	1096c <prov_msg_recv+0x4c>
	prov_handlers[type].func(&link.rx.buf->data[1]);
   1098c:	6808      	ldr	r0, [r1, #0]
   1098e:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
   10992:	3001      	adds	r0, #1
}
   10994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prov_handlers[type].func(&link.rx.buf->data[1]);
   10998:	4718      	bx	r3
}
   1099a:	bd70      	pop	{r4, r5, r6, pc}
   1099c:	200004d0 	.word	0x200004d0
   109a0:	00020aa4 	.word	0x00020aa4

000109a4 <gen_prov_cont>:
{
   109a4:	b538      	push	{r3, r4, r5, lr}
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
   109a6:	4b25      	ldr	r3, [pc, #148]	; (10a3c <gen_prov_cont+0x98>)
   109a8:	7904      	ldrb	r4, [r0, #4]
   109aa:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
   109ae:	461d      	mov	r5, r3
   109b0:	b942      	cbnz	r2, 109c4 <gen_prov_cont+0x20>
   109b2:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
   109b6:	42a3      	cmp	r3, r4
   109b8:	d104      	bne.n	109c4 <gen_prov_cont+0x20>
		gen_prov_ack_send(rx->xact_id);
   109ba:	4618      	mov	r0, r3
}
   109bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gen_prov_ack_send(rx->xact_id);
   109c0:	f7ff bb5c 	b.w	1007c <gen_prov_ack_send>
	if (rx->xact_id != link.rx.id) {
   109c4:	f895 3124 	ldrb.w	r3, [r5, #292]	; 0x124
   109c8:	42a3      	cmp	r3, r4
   109ca:	d136      	bne.n	10a3a <gen_prov_cont+0x96>
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
   109cc:	7944      	ldrb	r4, [r0, #5]
	if (seg > link.rx.last_seg) {
   109ce:	f895 3127 	ldrb.w	r3, [r5, #295]	; 0x127
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
   109d2:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
   109d4:	42a3      	cmp	r3, r4
   109d6:	d204      	bcs.n	109e2 <gen_prov_cont+0x3e>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   109d8:	2002      	movs	r0, #2
}
   109da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   109de:	f7ff bdcb 	b.w	10578 <close_link.constprop.23>
	} else if (seg == link.rx.last_seg) {
   109e2:	d10e      	bne.n	10a02 <gen_prov_cont+0x5e>
		expect_len = (link.rx.buf->len - 20 -
   109e4:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
   109e8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   109ec:	7900      	ldrb	r0, [r0, #4]
   109ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   109f2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   109f6:	4403      	add	r3, r0
   109f8:	3303      	adds	r3, #3
		if (expect_len != buf->len) {
   109fa:	8888      	ldrh	r0, [r1, #4]
   109fc:	b2db      	uxtb	r3, r3
   109fe:	4283      	cmp	r3, r0
   10a00:	d1ea      	bne.n	109d8 <gen_prov_cont+0x34>
	if (!(link.rx.seg & BIT(seg))) {
   10a02:	40e2      	lsrs	r2, r4
   10a04:	07d3      	lsls	r3, r2, #31
   10a06:	d518      	bpl.n	10a3a <gen_prov_cont+0x96>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   10a08:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
   10a0c:	1e60      	subs	r0, r4, #1
   10a0e:	2317      	movs	r3, #23
   10a10:	4343      	muls	r3, r0
   10a12:	6810      	ldr	r0, [r2, #0]
   10a14:	888a      	ldrh	r2, [r1, #4]
   10a16:	6809      	ldr	r1, [r1, #0]
   10a18:	3314      	adds	r3, #20
   10a1a:	4418      	add	r0, r3
   10a1c:	f009 fb44 	bl	1a0a8 <memcpy>
	XACT_SEG_RECV(seg);
   10a20:	2301      	movs	r3, #1
   10a22:	40a3      	lsls	r3, r4
   10a24:	f895 4126 	ldrb.w	r4, [r5, #294]	; 0x126
   10a28:	ea24 0403 	bic.w	r4, r4, r3
   10a2c:	f885 4126 	strb.w	r4, [r5, #294]	; 0x126
	if (!link.rx.seg) {
   10a30:	b91c      	cbnz	r4, 10a3a <gen_prov_cont+0x96>
}
   10a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prov_msg_recv();
   10a36:	f7ff bf73 	b.w	10920 <prov_msg_recv>
}
   10a3a:	bd38      	pop	{r3, r4, r5, pc}
   10a3c:	200004d0 	.word	0x200004d0

00010a40 <gen_prov_start>:
{
   10a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (link.rx.seg) {
   10a42:	4b24      	ldr	r3, [pc, #144]	; (10ad4 <gen_prov_start+0x94>)
   10a44:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
{
   10a48:	4606      	mov	r6, r0
   10a4a:	460d      	mov	r5, r1
   10a4c:	461c      	mov	r4, r3
	if (link.rx.seg) {
   10a4e:	2a00      	cmp	r2, #0
   10a50:	d13f      	bne.n	10ad2 <gen_prov_start+0x92>
	if (link.rx.prev_id == rx->xact_id) {
   10a52:	7902      	ldrb	r2, [r0, #4]
   10a54:	f893 0125 	ldrb.w	r0, [r3, #293]	; 0x125
   10a58:	4290      	cmp	r0, r2
   10a5a:	d103      	bne.n	10a64 <gen_prov_start+0x24>
}
   10a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		gen_prov_ack_send(rx->xact_id);
   10a60:	f7ff bb0c 	b.w	1007c <gen_prov_ack_send>
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   10a64:	4608      	mov	r0, r1
   10a66:	f8d3 712c 	ldr.w	r7, [r3, #300]	; 0x12c
   10a6a:	f00e fbe2 	bl	1f232 <net_buf_simple_pull_be16>
   10a6e:	80b8      	strh	r0, [r7, #4]
	link.rx.id  = rx->xact_id;
   10a70:	7933      	ldrb	r3, [r6, #4]
   10a72:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   10a76:	4628      	mov	r0, r5
   10a78:	f00e fbcb 	bl	1f212 <net_buf_simple_pull_u8>
   10a7c:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
	if (link.rx.buf->len < 1) {
   10a80:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   10a84:	8882      	ldrh	r2, [r0, #4]
   10a86:	b922      	cbnz	r2, 10a92 <gen_prov_start+0x52>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   10a88:	2002      	movs	r0, #2
}
   10a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
   10a8e:	f7ff bd73 	b.w	10578 <close_link.constprop.23>
	if (link.rx.buf->len > link.rx.buf->size) {
   10a92:	88c3      	ldrh	r3, [r0, #6]
   10a94:	4293      	cmp	r3, r2
   10a96:	d3f7      	bcc.n	10a88 <gen_prov_start+0x48>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20) {
   10a98:	7973      	ldrb	r3, [r6, #5]
   10a9a:	089b      	lsrs	r3, r3, #2
   10a9c:	d001      	beq.n	10aa2 <gen_prov_start+0x62>
   10a9e:	2a14      	cmp	r2, #20
   10aa0:	d9f2      	bls.n	10a88 <gen_prov_start+0x48>
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
   10aa2:	1c59      	adds	r1, r3, #1
   10aa4:	2201      	movs	r2, #1
   10aa6:	408a      	lsls	r2, r1
   10aa8:	3a01      	subs	r2, #1
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   10aaa:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
   10aae:	f884 2126 	strb.w	r2, [r4, #294]	; 0x126
	memcpy(link.rx.buf->data, buf->data, buf->len);
   10ab2:	88aa      	ldrh	r2, [r5, #4]
   10ab4:	6829      	ldr	r1, [r5, #0]
   10ab6:	6800      	ldr	r0, [r0, #0]
   10ab8:	f009 faf6 	bl	1a0a8 <memcpy>
	XACT_SEG_RECV(0);
   10abc:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
   10ac0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   10ac4:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	if (!link.rx.seg) {
   10ac8:	b91b      	cbnz	r3, 10ad2 <gen_prov_start+0x92>
}
   10aca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
   10ace:	f7ff bf27 	b.w	10920 <prov_msg_recv>
}
   10ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ad4:	200004d0 	.word	0x200004d0

00010ad8 <send_confirm>:
{
   10ad8:	b510      	push	{r4, lr}
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   10ada:	4c21      	ldr	r4, [pc, #132]	; (10b60 <send_confirm+0x88>)
{
   10adc:	b08a      	sub	sp, #40	; 0x28
	PROV_BUF(cfm, 17);
   10ade:	ab04      	add	r3, sp, #16
   10ae0:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   10ae4:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   10ae8:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	PROV_BUF(cfm, 17);
   10aec:	9301      	str	r3, [sp, #4]
   10aee:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
   10af2:	f00b fc31 	bl	1c358 <bt_mesh_prov_conf_salt>
   10af6:	b120      	cbz	r0, 10b02 <send_confirm+0x2a>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   10af8:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   10afa:	f7ff fd3d 	bl	10578 <close_link.constprop.23>
}
   10afe:	b00a      	add	sp, #40	; 0x28
   10b00:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(link.dhkey, link.conf_salt, link.conf_key)) {
   10b02:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   10b06:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   10b0a:	f104 0008 	add.w	r0, r4, #8
   10b0e:	f7fd fb53 	bl	e1b8 <bt_mesh_prov_conf_key>
   10b12:	2800      	cmp	r0, #0
   10b14:	d1f0      	bne.n	10af8 <send_confirm+0x20>
	if (bt_rand(link.rand, 16)) {
   10b16:	2110      	movs	r1, #16
   10b18:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   10b1c:	f00d ff1c 	bl	1e958 <bt_rand>
   10b20:	2800      	cmp	r0, #0
   10b22:	d1e9      	bne.n	10af8 <send_confirm+0x20>
	prov_buf_init(&cfm, PROV_CONFIRM);
   10b24:	2105      	movs	r1, #5
   10b26:	a801      	add	r0, sp, #4
   10b28:	f00d fb99 	bl	1e25e <prov_buf_init>
			      net_buf_simple_add(&cfm, 16))) {
   10b2c:	2110      	movs	r1, #16
   10b2e:	a801      	add	r0, sp, #4
   10b30:	f00e fae4 	bl	1f0fc <net_buf_simple_add>
	if (bt_mesh_prov_conf(link.conf_key, link.rand, link.auth,
   10b34:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   10b38:	4603      	mov	r3, r0
   10b3a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   10b3e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   10b42:	f00b fc1a 	bl	1c37a <bt_mesh_prov_conf>
   10b46:	2800      	cmp	r0, #0
   10b48:	d1d6      	bne.n	10af8 <send_confirm+0x20>
	if (prov_send(&cfm)) {
   10b4a:	a801      	add	r0, sp, #4
   10b4c:	f7ff f9c4 	bl	fed8 <prov_send>
   10b50:	b108      	cbz	r0, 10b56 <send_confirm+0x7e>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
   10b52:	2005      	movs	r0, #5
   10b54:	e7d1      	b.n	10afa <send_confirm+0x22>
	link.expect = PROV_RANDOM;
   10b56:	2306      	movs	r3, #6
   10b58:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   10b5c:	e7cf      	b.n	10afe <send_confirm+0x26>
   10b5e:	bf00      	nop
   10b60:	200004d0 	.word	0x200004d0

00010b64 <prov_confirm>:
{
   10b64:	b508      	push	{r3, lr}
	memcpy(link.conf, data, 16);
   10b66:	4601      	mov	r1, r0
   10b68:	2210      	movs	r2, #16
   10b6a:	4809      	ldr	r0, [pc, #36]	; (10b90 <prov_confirm+0x2c>)
   10b6c:	f009 fa9c 	bl	1a0a8 <memcpy>
	if (!atomic_test_bit(link.flags, HAVE_DHKEY)) {
   10b70:	2003      	movs	r0, #3
   10b72:	f7ff fb8d 	bl	10290 <atomic_test_bit.constprop.26>
   10b76:	b938      	cbnz	r0, 10b88 <prov_confirm+0x24>
		prov_clear_tx();
   10b78:	f7ff f974 	bl	fe64 <prov_clear_tx>
   10b7c:	2110      	movs	r1, #16
   10b7e:	4805      	ldr	r0, [pc, #20]	; (10b94 <prov_confirm+0x30>)
}
   10b80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10b84:	f00d bb93 	b.w	1e2ae <atomic_or>
   10b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
   10b8c:	f7ff bfa4 	b.w	10ad8 <send_confirm>
   10b90:	200004fc 	.word	0x200004fc
   10b94:	200004d0 	.word	0x200004d0

00010b98 <prov_dh_key_cb>:
{
   10b98:	b508      	push	{r3, lr}
	if (!key) {
   10b9a:	4601      	mov	r1, r0
   10b9c:	b920      	cbnz	r0, 10ba8 <prov_dh_key_cb+0x10>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   10b9e:	2007      	movs	r0, #7
}
   10ba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
   10ba4:	f7ff bce8 	b.w	10578 <close_link.constprop.23>
	sys_memcpy_swap(link.dhkey, key, 32);
   10ba8:	480b      	ldr	r0, [pc, #44]	; (10bd8 <prov_dh_key_cb+0x40>)
   10baa:	f00d fb90 	bl	1e2ce <sys_memcpy_swap.constprop.21>
   10bae:	2108      	movs	r1, #8
   10bb0:	480a      	ldr	r0, [pc, #40]	; (10bdc <prov_dh_key_cb+0x44>)
   10bb2:	f00d fb7c 	bl	1e2ae <atomic_or>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
   10bb6:	2005      	movs	r0, #5
   10bb8:	f7ff fb6a 	bl	10290 <atomic_test_bit.constprop.26>
   10bbc:	b958      	cbnz	r0, 10bd6 <prov_dh_key_cb+0x3e>
	    atomic_test_bit(link.flags, WAIT_STRING)) {
   10bbe:	2006      	movs	r0, #6
   10bc0:	f7ff fb66 	bl	10290 <atomic_test_bit.constprop.26>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
   10bc4:	b938      	cbnz	r0, 10bd6 <prov_dh_key_cb+0x3e>
	if (atomic_test_and_clear_bit(link.flags, SEND_CONFIRM)) {
   10bc6:	2004      	movs	r0, #4
   10bc8:	f7ff fb80 	bl	102cc <atomic_test_and_clear_bit.constprop.25>
   10bcc:	b118      	cbz	r0, 10bd6 <prov_dh_key_cb+0x3e>
}
   10bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
   10bd2:	f7ff bf81 	b.w	10ad8 <send_confirm>
}
   10bd6:	bd08      	pop	{r3, pc}
   10bd8:	200004d8 	.word	0x200004d8
   10bdc:	200004d0 	.word	0x200004d0

00010be0 <bt_mesh_prov_get>:
#endif /* CONFIG_BT_MESH_PB_GATT */

const struct bt_mesh_prov *bt_mesh_prov_get(void)
{
	return prov;
}
   10be0:	4b01      	ldr	r3, [pc, #4]	; (10be8 <bt_mesh_prov_get+0x8>)
   10be2:	6818      	ldr	r0, [r3, #0]
   10be4:	4770      	bx	lr
   10be6:	bf00      	nop
   10be8:	20000fbc 	.word	0x20000fbc

00010bec <bt_mesh_pb_adv_recv>:
{
   10bec:	b513      	push	{r0, r1, r4, lr}
   10bee:	4604      	mov	r4, r0
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
   10bf0:	f00d fb79 	bl	1e2e6 <bt_prov_active>
   10bf4:	2800      	cmp	r0, #0
   10bf6:	d039      	beq.n	10c6c <bt_mesh_pb_adv_recv+0x80>
	if (buf->len < 6) {
   10bf8:	88a3      	ldrh	r3, [r4, #4]
   10bfa:	2b05      	cmp	r3, #5
   10bfc:	d93a      	bls.n	10c74 <bt_mesh_pb_adv_recv+0x88>
	rx.link_id = net_buf_simple_pull_be32(buf);
   10bfe:	4620      	mov	r0, r4
   10c00:	f00e fb2a 	bl	1f258 <net_buf_simple_pull_be32>
   10c04:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   10c06:	4620      	mov	r0, r4
   10c08:	f00e fb03 	bl	1f212 <net_buf_simple_pull_u8>
   10c0c:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   10c10:	4620      	mov	r0, r4
   10c12:	f00e fafe 	bl	1f212 <net_buf_simple_pull_u8>
   10c16:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, LINK_ACTIVE) && link.id != rx.link_id) {
   10c1a:	2002      	movs	r0, #2
   10c1c:	f7ff fb38 	bl	10290 <atomic_test_bit.constprop.26>
   10c20:	b128      	cbz	r0, 10c2e <bt_mesh_pb_adv_recv+0x42>
   10c22:	4b15      	ldr	r3, [pc, #84]	; (10c78 <bt_mesh_pb_adv_recv+0x8c>)
   10c24:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   10c28:	9b00      	ldr	r3, [sp, #0]
   10c2a:	429a      	cmp	r2, r3
   10c2c:	d122      	bne.n	10c74 <bt_mesh_pb_adv_recv+0x88>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   10c2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10c32:	4a12      	ldr	r2, [pc, #72]	; (10c7c <bt_mesh_pb_adv_recv+0x90>)
   10c34:	88a1      	ldrh	r1, [r4, #4]
   10c36:	f003 0303 	and.w	r3, r3, #3
   10c3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10c3e:	795b      	ldrb	r3, [r3, #5]
   10c40:	4299      	cmp	r1, r3
   10c42:	d317      	bcc.n	10c74 <bt_mesh_pb_adv_recv+0x88>
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
   10c44:	2002      	movs	r0, #2
   10c46:	f7ff fb23 	bl	10290 <atomic_test_bit.constprop.26>
   10c4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10c4e:	b928      	cbnz	r0, 10c5c <bt_mesh_pb_adv_recv+0x70>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   10c50:	f003 0103 	and.w	r1, r3, #3
   10c54:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
   10c58:	7909      	ldrb	r1, [r1, #4]
   10c5a:	b959      	cbnz	r1, 10c74 <bt_mesh_pb_adv_recv+0x88>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   10c5c:	f003 0303 	and.w	r3, r3, #3
   10c60:	4621      	mov	r1, r4
   10c62:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   10c66:	4668      	mov	r0, sp
   10c68:	4798      	blx	r3
   10c6a:	e003      	b.n	10c74 <bt_mesh_pb_adv_recv+0x88>
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
   10c6c:	f00a fd7f 	bl	1b76e <bt_mesh_is_provisioned>
   10c70:	2800      	cmp	r0, #0
   10c72:	d0c1      	beq.n	10bf8 <bt_mesh_pb_adv_recv+0xc>
}
   10c74:	b002      	add	sp, #8
   10c76:	bd10      	pop	{r4, pc}
   10c78:	200004d0 	.word	0x200004d0
   10c7c:	00020a84 	.word	0x00020a84

00010c80 <bt_mesh_prov_init>:
{
	return atomic_test_bit(link.flags, LINK_ACTIVE);
}

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   10c80:	b538      	push	{r3, r4, r5, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func = pub_key_ready,
	};
	int err;

	if (!prov_info) {
   10c82:	4605      	mov	r5, r0
   10c84:	b1a8      	cbz	r0, 10cb2 <bt_mesh_prov_init+0x32>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	err = bt_pub_key_gen(&pub_key_cb);
   10c86:	480c      	ldr	r0, [pc, #48]	; (10cb8 <bt_mesh_prov_init+0x38>)
   10c88:	f7f9 f9be 	bl	a008 <bt_pub_key_gen>
	if (err) {
   10c8c:	4604      	mov	r4, r0
   10c8e:	b970      	cbnz	r0, 10cae <bt_mesh_prov_init+0x2e>
		BT_ERR("Failed to generate public key (%d)", err);
		return err;
	}

	prov = prov_info;
   10c90:	4b0a      	ldr	r3, [pc, #40]	; (10cbc <bt_mesh_prov_init+0x3c>)

#if defined(CONFIG_BT_MESH_PB_ADV)
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   10c92:	490b      	ldr	r1, [pc, #44]	; (10cc0 <bt_mesh_prov_init+0x40>)
	prov = prov_info;
   10c94:	601d      	str	r5, [r3, #0]
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   10c96:	4d0b      	ldr	r5, [pc, #44]	; (10cc4 <bt_mesh_prov_init+0x44>)
   10c98:	f505 70a4 	add.w	r0, r5, #328	; 0x148
   10c9c:	f00e ff3e 	bl	1fb1c <k_delayed_work_init>
	link.rx.prev_id = XACT_NVAL;
   10ca0:	23ff      	movs	r3, #255	; 0xff
   10ca2:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125

#if defined(CONFIG_BT_MESH_PB_GATT)
	link.rx.buf = bt_mesh_proxy_get_buf();
   10ca6:	f000 f9e9 	bl	1107c <bt_mesh_proxy_get_buf>
   10caa:	f8c5 012c 	str.w	r0, [r5, #300]	; 0x12c
#endif

#endif /* CONFIG_BT_MESH_PB_ADV */

	return 0;
}
   10cae:	4620      	mov	r0, r4
   10cb0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10cb2:	f06f 0415 	mvn.w	r4, #21
   10cb6:	e7fa      	b.n	10cae <bt_mesh_prov_init+0x2e>
   10cb8:	20008ed0 	.word	0x20008ed0
   10cbc:	20000fbc 	.word	0x20000fbc
   10cc0:	0001040d 	.word	0x0001040d
   10cc4:	200004d0 	.word	0x200004d0

00010cc8 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(u16_t net_idx, u16_t addr)
{
	if (prov->complete) {
   10cc8:	4b02      	ldr	r3, [pc, #8]	; (10cd4 <bt_mesh_prov_complete+0xc>)
   10cca:	681b      	ldr	r3, [r3, #0]
   10ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   10cce:	b103      	cbz	r3, 10cd2 <bt_mesh_prov_complete+0xa>
		prov->complete(net_idx, addr);
   10cd0:	4718      	bx	r3
	}
}
   10cd2:	4770      	bx	lr
   10cd4:	20000fbc 	.word	0x20000fbc

00010cd8 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
	if (prov->reset) {
   10cd8:	4b02      	ldr	r3, [pc, #8]	; (10ce4 <bt_mesh_prov_reset+0xc>)
   10cda:	681b      	ldr	r3, [r3, #0]
   10cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10cde:	b103      	cbz	r3, 10ce2 <bt_mesh_prov_reset+0xa>
		prov->reset();
   10ce0:	4718      	bx	r3
	}
}
   10ce2:	4770      	bx	lr
   10ce4:	20000fbc 	.word	0x20000fbc

00010ce8 <proxy_disconnected>:
{
	int i;

	BT_DBG("conn %p reason 0x%02x", conn, reason);

	conn_count--;
   10ce8:	4a0b      	ldr	r2, [pc, #44]	; (10d18 <proxy_disconnected+0x30>)
   10cea:	6813      	ldr	r3, [r2, #0]
{
   10cec:	b510      	push	{r4, lr}

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		if (client->conn == conn) {
   10cee:	4c0b      	ldr	r4, [pc, #44]	; (10d1c <proxy_disconnected+0x34>)
	conn_count--;
   10cf0:	3b01      	subs	r3, #1
   10cf2:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
   10cf4:	6823      	ldr	r3, [r4, #0]
   10cf6:	4283      	cmp	r3, r0
   10cf8:	d109      	bne.n	10d0e <proxy_disconnected+0x26>
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   10cfa:	7aa3      	ldrb	r3, [r4, #10]
   10cfc:	2b03      	cmp	r3, #3
   10cfe:	d101      	bne.n	10d04 <proxy_disconnected+0x1c>
			    client->filter_type == PROV) {
				bt_mesh_pb_gatt_close(conn);
   10d00:	f7ff fc0a 	bl	10518 <bt_mesh_pb_gatt_close>
			}

			bt_conn_unref(client->conn);
   10d04:	6820      	ldr	r0, [r4, #0]
   10d06:	f009 fdb4 	bl	1a872 <bt_conn_unref>
			client->conn = NULL;
   10d0a:	2300      	movs	r3, #0
   10d0c:	6023      	str	r3, [r4, #0]
			break;
		}
	}

	bt_mesh_adv_update();
}
   10d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_update();
   10d12:	f7fb b953 	b.w	bfbc <bt_mesh_adv_update>
   10d16:	bf00      	nop
   10d18:	20000fc0 	.word	0x20000fc0
   10d1c:	20008f28 	.word	0x20008f28

00010d20 <next_sub.part.5>:

	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
}

static struct bt_mesh_subnet *next_sub(void)
   10d20:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub;

		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   10d22:	4d1b      	ldr	r5, [pc, #108]	; (10d90 <next_sub.part.5+0x70>)
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   10d24:	4e1b      	ldr	r6, [pc, #108]	; (10d94 <next_sub.part.5+0x74>)
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   10d26:	682c      	ldr	r4, [r5, #0]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   10d28:	23e4      	movs	r3, #228	; 0xe4
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   10d2a:	f004 0401 	and.w	r4, r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   10d2e:	fb03 6304 	mla	r3, r3, r4, r6
   10d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10d36:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
   10d3a:	4291      	cmp	r1, r2
   10d3c:	d007      	beq.n	10d4e <next_sub.part.5+0x2e>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   10d3e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
   10d42:	2b01      	cmp	r3, #1
   10d44:	d014      	beq.n	10d70 <next_sub.part.5+0x50>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   10d46:	f7fe f8df 	bl	ef08 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   10d4a:	2801      	cmp	r0, #1
   10d4c:	d010      	beq.n	10d70 <next_sub.part.5+0x50>
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   10d4e:	682b      	ldr	r3, [r5, #0]
   10d50:	1c5c      	adds	r4, r3, #1
   10d52:	f004 0401 	and.w	r4, r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   10d56:	23e4      	movs	r3, #228	; 0xe4
   10d58:	fb03 6304 	mla	r3, r3, r4, r6
   10d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10d60:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
   10d64:	4291      	cmp	r1, r2
   10d66:	d011      	beq.n	10d8c <next_sub.part.5+0x6c>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   10d68:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
   10d6c:	2b01      	cmp	r3, #1
   10d6e:	d109      	bne.n	10d84 <next_sub.part.5+0x64>
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   10d70:	682b      	ldr	r3, [r5, #0]
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   10d72:	20e4      	movs	r0, #228	; 0xe4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   10d74:	3301      	adds	r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   10d76:	fb00 6004 	mla	r0, r0, r4, r6
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   10d7a:	f003 0301 	and.w	r3, r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
   10d7e:	30a4      	adds	r0, #164	; 0xa4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
   10d80:	602b      	str	r3, [r5, #0]
			return sub;
		}
	}

	return NULL;
}
   10d82:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   10d84:	f7fe f8c0 	bl	ef08 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   10d88:	2801      	cmp	r0, #1
   10d8a:	d0f1      	beq.n	10d70 <next_sub.part.5+0x50>
	return NULL;
   10d8c:	2000      	movs	r0, #0
   10d8e:	e7f8      	b.n	10d82 <next_sub.part.5+0x62>
   10d90:	20000fc4 	.word	0x20000fc4
   10d94:	2000885c 	.word	0x2000885c

00010d98 <proxy_connected>:
	conn_count++;
   10d98:	4a0e      	ldr	r2, [pc, #56]	; (10dd4 <proxy_connected+0x3c>)
   10d9a:	6813      	ldr	r3, [r2, #0]
   10d9c:	3301      	adds	r3, #1
{
   10d9e:	b570      	push	{r4, r5, r6, lr}
	proxy_adv_enabled = false;
   10da0:	2100      	movs	r1, #0
	conn_count++;
   10da2:	6013      	str	r3, [r2, #0]
	proxy_adv_enabled = false;
   10da4:	4a0c      	ldr	r2, [pc, #48]	; (10dd8 <proxy_connected+0x40>)
	if (conn_count < CONFIG_BT_MAX_CONN) {
   10da6:	428b      	cmp	r3, r1
{
   10da8:	4606      	mov	r6, r0
	proxy_adv_enabled = false;
   10daa:	7011      	strb	r1, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
   10dac:	dc01      	bgt.n	10db2 <proxy_connected+0x1a>
		bt_mesh_adv_update();
   10dae:	f7fb f905 	bl	bfbc <bt_mesh_adv_update>
		if (!clients[i].conn) {
   10db2:	4c0a      	ldr	r4, [pc, #40]	; (10ddc <proxy_connected+0x44>)
   10db4:	6825      	ldr	r5, [r4, #0]
   10db6:	b965      	cbnz	r5, 10dd2 <proxy_connected+0x3a>
	client->conn = bt_conn_ref(conn);
   10db8:	4630      	mov	r0, r6
   10dba:	f009 fd53 	bl	1a864 <bt_conn_ref>
	(void)memset(client->filter, 0, sizeof(client->filter));
   10dbe:	2206      	movs	r2, #6
	client->conn = bt_conn_ref(conn);
   10dc0:	6020      	str	r0, [r4, #0]
	(void)memset(client->filter, 0, sizeof(client->filter));
   10dc2:	4629      	mov	r1, r5
   10dc4:	1d20      	adds	r0, r4, #4
	client->filter_type = NONE;
   10dc6:	72a5      	strb	r5, [r4, #10]
	(void)memset(client->filter, 0, sizeof(client->filter));
   10dc8:	f009 f998 	bl	1a0fc <memset>
   10dcc:	6a23      	ldr	r3, [r4, #32]
	buf->len  = 0;
   10dce:	83a5      	strh	r5, [r4, #28]
	buf->data = buf->__buf;
   10dd0:	61a3      	str	r3, [r4, #24]
}
   10dd2:	bd70      	pop	{r4, r5, r6, pc}
   10dd4:	20000fc0 	.word	0x20000fc0
   10dd8:	20002583 	.word	0x20002583
   10ddc:	20008f28 	.word	0x20008f28

00010de0 <proxy_send>:
{
   10de0:	4613      	mov	r3, r2
	if (gatt_svc == MESH_GATT_PROXY) {
   10de2:	4a0b      	ldr	r2, [pc, #44]	; (10e10 <proxy_send+0x30>)
   10de4:	7812      	ldrb	r2, [r2, #0]
   10de6:	2a02      	cmp	r2, #2
{
   10de8:	b513      	push	{r0, r1, r4, lr}
   10dea:	f04f 0400 	mov.w	r4, #0
	if (gatt_svc == MESH_GATT_PROXY) {
   10dee:	d106      	bne.n	10dfe <proxy_send+0x1e>
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
				 const struct bt_gatt_attr *attr,
				 const void *data, u16_t len)
{
	return bt_gatt_notify_cb(conn, attr, data, len, NULL);
   10df0:	460a      	mov	r2, r1
   10df2:	4908      	ldr	r1, [pc, #32]	; (10e14 <proxy_send+0x34>)
   10df4:	9400      	str	r4, [sp, #0]
   10df6:	f7fa fe91 	bl	bb1c <bt_gatt_notify_cb>
}
   10dfa:	b002      	add	sp, #8
   10dfc:	bd10      	pop	{r4, pc}
	if (gatt_svc == MESH_GATT_PROV) {
   10dfe:	2a01      	cmp	r2, #1
   10e00:	d103      	bne.n	10e0a <proxy_send+0x2a>
   10e02:	460a      	mov	r2, r1
   10e04:	9400      	str	r4, [sp, #0]
   10e06:	4904      	ldr	r1, [pc, #16]	; (10e18 <proxy_send+0x38>)
   10e08:	e7f5      	b.n	10df6 <proxy_send+0x16>
	return 0;
   10e0a:	4620      	mov	r0, r4
   10e0c:	e7f5      	b.n	10dfa <proxy_send+0x1a>
   10e0e:	bf00      	nop
   10e10:	20002581 	.word	0x20002581
   10e14:	20009020 	.word	0x20009020
   10e18:	20008f9c 	.word	0x20008f9c

00010e1c <proxy_send_beacons>:
{
   10e1c:	b538      	push	{r3, r4, r5, lr}
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   10e1e:	4c0e      	ldr	r4, [pc, #56]	; (10e58 <proxy_send_beacons+0x3c>)
   10e20:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   10e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10e28:	429a      	cmp	r2, r3
{
   10e2a:	4605      	mov	r5, r0
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   10e2c:	d005      	beq.n	10e3a <proxy_send_beacons+0x1e>
			beacon_send(client->conn, sub);
   10e2e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
   10e32:	f850 0c0c 	ldr.w	r0, [r0, #-12]
   10e36:	f00d fab9 	bl	1e3ac <beacon_send>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   10e3a:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   10e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10e42:	429a      	cmp	r2, r3
   10e44:	d006      	beq.n	10e54 <proxy_send_beacons+0x38>
			beacon_send(client->conn, sub);
   10e46:	f855 0c0c 	ldr.w	r0, [r5, #-12]
   10e4a:	4904      	ldr	r1, [pc, #16]	; (10e5c <proxy_send_beacons+0x40>)
}
   10e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(client->conn, sub);
   10e50:	f00d baac 	b.w	1e3ac <beacon_send>
}
   10e54:	bd38      	pop	{r3, r4, r5, pc}
   10e56:	bf00      	nop
   10e58:	2000885c 	.word	0x2000885c
   10e5c:	200089e4 	.word	0x200089e4

00010e60 <proxy_recv>:
{
   10e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (clients[i].conn == conn) {
   10e62:	4c2a      	ldr	r4, [pc, #168]	; (10f0c <proxy_recv+0xac>)
{
   10e64:	4616      	mov	r6, r2
		if (clients[i].conn == conn) {
   10e66:	6822      	ldr	r2, [r4, #0]
   10e68:	4282      	cmp	r2, r0
   10e6a:	d14b      	bne.n	10f04 <proxy_recv+0xa4>
	if (len < 1) {
   10e6c:	b91b      	cbnz	r3, 10e76 <proxy_recv+0x16>
		return -EINVAL;
   10e6e:	f06f 0515 	mvn.w	r5, #21
}
   10e72:	4628      	mov	r0, r5
   10e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
   10e76:	7832      	ldrb	r2, [r6, #0]
   10e78:	68c9      	ldr	r1, [r1, #12]
   10e7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   10e7e:	3100      	adds	r1, #0
   10e80:	f1a2 0003 	sub.w	r0, r2, #3
   10e84:	bf18      	it	ne
   10e86:	2101      	movne	r1, #1
   10e88:	4242      	negs	r2, r0
   10e8a:	4142      	adcs	r2, r0
   10e8c:	4291      	cmp	r1, r2
   10e8e:	d1ee      	bne.n	10e6e <proxy_recv+0xe>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
   10e90:	f104 0018 	add.w	r0, r4, #24
   10e94:	1e5f      	subs	r7, r3, #1
   10e96:	461d      	mov	r5, r3
   10e98:	f00e f9eb 	bl	1f272 <net_buf_simple_tailroom>
   10e9c:	4287      	cmp	r7, r0
   10e9e:	d8e6      	bhi.n	10e6e <proxy_recv+0xe>
	switch (PDU_SAR(data)) {
   10ea0:	7830      	ldrb	r0, [r6, #0]
   10ea2:	8ba3      	ldrh	r3, [r4, #28]
   10ea4:	0982      	lsrs	r2, r0, #6
   10ea6:	2a02      	cmp	r2, #2
   10ea8:	d01c      	beq.n	10ee4 <proxy_recv+0x84>
   10eaa:	2a03      	cmp	r2, #3
   10eac:	d022      	beq.n	10ef4 <proxy_recv+0x94>
   10eae:	2a01      	cmp	r2, #1
   10eb0:	d00c      	beq.n	10ecc <proxy_recv+0x6c>
		if (client->buf.len) {
   10eb2:	2b00      	cmp	r3, #0
   10eb4:	d1db      	bne.n	10e6e <proxy_recv+0xe>
		client->msg_type = PDU_TYPE(data);
   10eb6:	72e0      	strb	r0, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   10eb8:	463a      	mov	r2, r7
   10eba:	1c71      	adds	r1, r6, #1
   10ebc:	f104 0018 	add.w	r0, r4, #24
   10ec0:	f00e f922 	bl	1f108 <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
   10ec4:	4620      	mov	r0, r4
   10ec6:	f00d fac7 	bl	1e458 <proxy_complete_pdu>
		break;
   10eca:	e7d2      	b.n	10e72 <proxy_recv+0x12>
		if (client->buf.len) {
   10ecc:	2b00      	cmp	r3, #0
   10ece:	d1ce      	bne.n	10e6e <proxy_recv+0xe>
		client->msg_type = PDU_TYPE(data);
   10ed0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   10ed4:	72e0      	strb	r0, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   10ed6:	463a      	mov	r2, r7
   10ed8:	1c71      	adds	r1, r6, #1
   10eda:	f104 0018 	add.w	r0, r4, #24
   10ede:	f00e f913 	bl	1f108 <net_buf_simple_add_mem>
		break;
   10ee2:	e7c6      	b.n	10e72 <proxy_recv+0x12>
		if (!client->buf.len) {
   10ee4:	2b00      	cmp	r3, #0
   10ee6:	d0c2      	beq.n	10e6e <proxy_recv+0xe>
		if (client->msg_type != PDU_TYPE(data)) {
   10ee8:	7ae3      	ldrb	r3, [r4, #11]
   10eea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   10eee:	4283      	cmp	r3, r0
   10ef0:	d0f1      	beq.n	10ed6 <proxy_recv+0x76>
   10ef2:	e7bc      	b.n	10e6e <proxy_recv+0xe>
		if (!client->buf.len) {
   10ef4:	2b00      	cmp	r3, #0
   10ef6:	d0ba      	beq.n	10e6e <proxy_recv+0xe>
		if (client->msg_type != PDU_TYPE(data)) {
   10ef8:	7ae3      	ldrb	r3, [r4, #11]
   10efa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   10efe:	4283      	cmp	r3, r0
   10f00:	d0da      	beq.n	10eb8 <proxy_recv+0x58>
   10f02:	e7b4      	b.n	10e6e <proxy_recv+0xe>
		return -ENOTCONN;
   10f04:	f06f 0538 	mvn.w	r5, #56	; 0x38
   10f08:	e7b3      	b.n	10e72 <proxy_recv+0x12>
   10f0a:	bf00      	nop
   10f0c:	20008f28 	.word	0x20008f28

00010f10 <proxy_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   10f10:	2a01      	cmp	r2, #1
{
   10f12:	b510      	push	{r4, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   10f14:	d11e      	bne.n	10f54 <proxy_ccc_write+0x44>
		if (clients[i].conn == conn) {
   10f16:	4912      	ldr	r1, [pc, #72]	; (10f60 <proxy_ccc_write+0x50>)
   10f18:	680b      	ldr	r3, [r1, #0]
   10f1a:	4298      	cmp	r0, r3
   10f1c:	d11c      	bne.n	10f58 <proxy_ccc_write+0x48>
	if (client->filter_type == NONE) {
   10f1e:	7a8b      	ldrb	r3, [r1, #10]
   10f20:	b10b      	cbz	r3, 10f26 <proxy_ccc_write+0x16>
{
   10f22:	2001      	movs	r0, #1
}
   10f24:	bd10      	pop	{r4, pc}
		client->filter_type = WHITELIST;
   10f26:	728a      	strb	r2, [r1, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10f28:	f101 0314 	add.w	r3, r1, #20
   10f2c:	f3bf 8f5b 	dmb	ish
   10f30:	e853 2f00 	ldrex	r2, [r3]
   10f34:	f042 0001 	orr.w	r0, r2, #1
   10f38:	e843 0c00 	strex	ip, r0, [r3]
   10f3c:	f1bc 0f00 	cmp.w	ip, #0
   10f40:	d1f6      	bne.n	10f30 <proxy_ccc_write+0x20>
   10f42:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   10f46:	07d3      	lsls	r3, r2, #31
   10f48:	d4eb      	bmi.n	10f22 <proxy_ccc_write+0x12>
		k_queue_append(&work_q->queue, work);
   10f4a:	310c      	adds	r1, #12
   10f4c:	4805      	ldr	r0, [pc, #20]	; (10f64 <proxy_ccc_write+0x54>)
   10f4e:	f00e fbd7 	bl	1f700 <k_queue_append>
   10f52:	e7e6      	b.n	10f22 <proxy_ccc_write+0x12>
		return false;
   10f54:	2000      	movs	r0, #0
   10f56:	e7e5      	b.n	10f24 <proxy_ccc_write+0x14>
	if (client->filter_type == NONE) {
   10f58:	2300      	movs	r3, #0
   10f5a:	7a9b      	ldrb	r3, [r3, #10]
   10f5c:	deff      	udf	#255	; 0xff
   10f5e:	bf00      	nop
   10f60:	20008f28 	.word	0x20008f28
   10f64:	20001fc8 	.word	0x20001fc8

00010f68 <prov_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   10f68:	2a01      	cmp	r2, #1
{
   10f6a:	b510      	push	{r4, lr}
   10f6c:	4614      	mov	r4, r2
	if (value != BT_GATT_CCC_NOTIFY) {
   10f6e:	d10b      	bne.n	10f88 <prov_ccc_write+0x20>
		if (clients[i].conn == conn) {
   10f70:	4b08      	ldr	r3, [pc, #32]	; (10f94 <prov_ccc_write+0x2c>)
   10f72:	681a      	ldr	r2, [r3, #0]
   10f74:	4290      	cmp	r0, r2
   10f76:	d109      	bne.n	10f8c <prov_ccc_write+0x24>
	if (client->filter_type == NONE) {
   10f78:	7a9a      	ldrb	r2, [r3, #10]
   10f7a:	b91a      	cbnz	r2, 10f84 <prov_ccc_write+0x1c>
		client->filter_type = PROV;
   10f7c:	2203      	movs	r2, #3
   10f7e:	729a      	strb	r2, [r3, #10]
		bt_mesh_pb_gatt_open(conn);
   10f80:	f7ff faaa 	bl	104d8 <bt_mesh_pb_gatt_open>
	if (client->filter_type == NONE) {
   10f84:	4620      	mov	r0, r4
   10f86:	e000      	b.n	10f8a <prov_ccc_write+0x22>
		return false;
   10f88:	2000      	movs	r0, #0
}
   10f8a:	bd10      	pop	{r4, pc}
	if (client->filter_type == NONE) {
   10f8c:	2300      	movs	r3, #0
   10f8e:	7a9b      	ldrb	r3, [r3, #10]
   10f90:	deff      	udf	#255	; 0xff
   10f92:	bf00      	nop
   10f94:	20008f28 	.word	0x20008f28

00010f98 <bt_mesh_proxy_beacon_send>:
{
   10f98:	b538      	push	{r3, r4, r5, lr}
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   10f9a:	4c0f      	ldr	r4, [pc, #60]	; (10fd8 <bt_mesh_proxy_beacon_send+0x40>)
{
   10f9c:	4601      	mov	r1, r0
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   10f9e:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
	if (!sub) {
   10fa2:	b981      	cbnz	r1, 10fc6 <bt_mesh_proxy_beacon_send+0x2e>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   10fa4:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   10fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10fac:	429a      	cmp	r2, r3
   10fae:	d002      	beq.n	10fb6 <bt_mesh_proxy_beacon_send+0x1e>
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   10fb0:	4628      	mov	r0, r5
   10fb2:	f7ff fff1 	bl	10f98 <bt_mesh_proxy_beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   10fb6:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
   10fba:	4908      	ldr	r1, [pc, #32]	; (10fdc <bt_mesh_proxy_beacon_send+0x44>)
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
   10fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10fc0:	429a      	cmp	r2, r3
   10fc2:	d1ee      	bne.n	10fa2 <bt_mesh_proxy_beacon_send+0xa>
}
   10fc4:	bd38      	pop	{r3, r4, r5, pc}
		if (clients[i].conn) {
   10fc6:	4b06      	ldr	r3, [pc, #24]	; (10fe0 <bt_mesh_proxy_beacon_send+0x48>)
   10fc8:	6818      	ldr	r0, [r3, #0]
   10fca:	2800      	cmp	r0, #0
   10fcc:	d0fa      	beq.n	10fc4 <bt_mesh_proxy_beacon_send+0x2c>
}
   10fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(clients[i].conn, sub);
   10fd2:	f00d b9eb 	b.w	1e3ac <beacon_send>
   10fd6:	bf00      	nop
   10fd8:	2000885c 	.word	0x2000885c
   10fdc:	200089e4 	.word	0x200089e4
   10fe0:	20008f28 	.word	0x20008f28

00010fe4 <bt_mesh_proxy_identity_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   10fe4:	2301      	movs	r3, #1
{
   10fe6:	b510      	push	{r4, lr}
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
   10fe8:	f880 3020 	strb.w	r3, [r0, #32]
{
   10fec:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   10fee:	f00e fdee 	bl	1fbce <z_impl_k_uptime_get_32>
	next_idx = sub - bt_mesh.sub;
   10ff2:	4b07      	ldr	r3, [pc, #28]	; (11010 <bt_mesh_proxy_identity_start+0x2c>)
	sub->node_id_start = k_uptime_get_32();
   10ff4:	6260      	str	r0, [r4, #36]	; 0x24
	next_idx = sub - bt_mesh.sub;
   10ff6:	1ae4      	subs	r4, r4, r3
   10ff8:	10a4      	asrs	r4, r4, #2
   10ffa:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   10ffe:	ebc4 2444 	rsb	r4, r4, r4, lsl #9
   11002:	eb04 4484 	add.w	r4, r4, r4, lsl #18
   11006:	4b03      	ldr	r3, [pc, #12]	; (11014 <bt_mesh_proxy_identity_start+0x30>)
   11008:	4264      	negs	r4, r4
   1100a:	601c      	str	r4, [r3, #0]
}
   1100c:	bd10      	pop	{r4, pc}
   1100e:	bf00      	nop
   11010:	20008900 	.word	0x20008900
   11014:	20000fc4 	.word	0x20000fc4

00011018 <bt_mesh_proxy_identity_enable>:
{
   11018:	b510      	push	{r4, lr}
	if (!bt_mesh_is_provisioned()) {
   1101a:	f00a fba8 	bl	1b76e <bt_mesh_is_provisioned>
   1101e:	b328      	cbz	r0, 1106c <bt_mesh_proxy_identity_enable+0x54>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   11020:	4c14      	ldr	r4, [pc, #80]	; (11074 <bt_mesh_proxy_identity_enable+0x5c>)
   11022:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   11026:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1102a:	429a      	cmp	r2, r3
   1102c:	d019      	beq.n	11062 <bt_mesh_proxy_identity_enable+0x4a>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_NOT_SUPPORTED) {
   1102e:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   11032:	2b02      	cmp	r3, #2
   11034:	d015      	beq.n	11062 <bt_mesh_proxy_identity_enable+0x4a>
		bt_mesh_proxy_identity_start(sub);
   11036:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   1103a:	f7ff ffd3 	bl	10fe4 <bt_mesh_proxy_identity_start>
		count++;
   1103e:	2001      	movs	r0, #1
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   11040:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   11044:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11048:	429a      	cmp	r2, r3
   1104a:	d00c      	beq.n	11066 <bt_mesh_proxy_identity_enable+0x4e>
		if (sub->node_id == BT_MESH_NODE_IDENTITY_NOT_SUPPORTED) {
   1104c:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   11050:	2b02      	cmp	r3, #2
   11052:	d008      	beq.n	11066 <bt_mesh_proxy_identity_enable+0x4e>
		bt_mesh_proxy_identity_start(sub);
   11054:	4808      	ldr	r0, [pc, #32]	; (11078 <bt_mesh_proxy_identity_enable+0x60>)
   11056:	f7ff ffc5 	bl	10fe4 <bt_mesh_proxy_identity_start>
		bt_mesh_adv_update();
   1105a:	f7fa ffaf 	bl	bfbc <bt_mesh_adv_update>
	return 0;
   1105e:	2000      	movs	r0, #0
   11060:	e003      	b.n	1106a <bt_mesh_proxy_identity_enable+0x52>
	int i, count = 0;
   11062:	2000      	movs	r0, #0
   11064:	e7ec      	b.n	11040 <bt_mesh_proxy_identity_enable+0x28>
	if (count) {
   11066:	2800      	cmp	r0, #0
   11068:	d1f7      	bne.n	1105a <bt_mesh_proxy_identity_enable+0x42>
}
   1106a:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   1106c:	f06f 000a 	mvn.w	r0, #10
   11070:	e7fb      	b.n	1106a <bt_mesh_proxy_identity_enable+0x52>
   11072:	bf00      	nop
   11074:	2000885c 	.word	0x2000885c
   11078:	200089e4 	.word	0x200089e4

0001107c <bt_mesh_proxy_get_buf>:
	buf->len  = 0;
   1107c:	4803      	ldr	r0, [pc, #12]	; (1108c <bt_mesh_proxy_get_buf+0x10>)
   1107e:	2300      	movs	r3, #0
   11080:	8383      	strh	r3, [r0, #28]
	buf->data = buf->__buf;
   11082:	6a03      	ldr	r3, [r0, #32]
   11084:	f840 3f18 	str.w	r3, [r0, #24]!
}
   11088:	4770      	bx	lr
   1108a:	bf00      	nop
   1108c:	20008f28 	.word	0x20008f28

00011090 <bt_mesh_proxy_prov_enable>:
{
   11090:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROV) {
   11092:	4d0c      	ldr	r5, [pc, #48]	; (110c4 <bt_mesh_proxy_prov_enable+0x34>)
   11094:	782c      	ldrb	r4, [r5, #0]
   11096:	2c01      	cmp	r4, #1
   11098:	d00e      	beq.n	110b8 <bt_mesh_proxy_prov_enable+0x28>
	if (gatt_svc != MESH_GATT_NONE) {
   1109a:	b984      	cbnz	r4, 110be <bt_mesh_proxy_prov_enable+0x2e>
	bt_gatt_service_register(&prov_svc);
   1109c:	480a      	ldr	r0, [pc, #40]	; (110c8 <bt_mesh_proxy_prov_enable+0x38>)
   1109e:	f00a fadf 	bl	1b660 <bt_gatt_service_register>
	prov_fast_adv = true;
   110a2:	4a0a      	ldr	r2, [pc, #40]	; (110cc <bt_mesh_proxy_prov_enable+0x3c>)
	gatt_svc = MESH_GATT_PROV;
   110a4:	2301      	movs	r3, #1
   110a6:	702b      	strb	r3, [r5, #0]
	prov_fast_adv = true;
   110a8:	7013      	strb	r3, [r2, #0]
		if (clients[i].conn) {
   110aa:	4b09      	ldr	r3, [pc, #36]	; (110d0 <bt_mesh_proxy_prov_enable+0x40>)
   110ac:	6818      	ldr	r0, [r3, #0]
   110ae:	b110      	cbz	r0, 110b6 <bt_mesh_proxy_prov_enable+0x26>
			clients[i].filter_type = PROV;
   110b0:	2203      	movs	r2, #3
   110b2:	729a      	strb	r2, [r3, #10]
	return 0;
   110b4:	4620      	mov	r0, r4
}
   110b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   110b8:	f06f 0044 	mvn.w	r0, #68	; 0x44
   110bc:	e7fb      	b.n	110b6 <bt_mesh_proxy_prov_enable+0x26>
		return -EBUSY;
   110be:	f06f 000f 	mvn.w	r0, #15
   110c2:	e7f8      	b.n	110b6 <bt_mesh_proxy_prov_enable+0x26>
   110c4:	20002581 	.word	0x20002581
   110c8:	20008fd8 	.word	0x20008fd8
   110cc:	20002582 	.word	0x20002582
   110d0:	20008f28 	.word	0x20008f28

000110d4 <bt_mesh_proxy_prov_disable>:
{
   110d4:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   110d6:	4d0d      	ldr	r5, [pc, #52]	; (1110c <bt_mesh_proxy_prov_disable+0x38>)
   110d8:	782b      	ldrb	r3, [r5, #0]
   110da:	b18b      	cbz	r3, 11100 <bt_mesh_proxy_prov_disable+0x2c>
	if (gatt_svc != MESH_GATT_PROV) {
   110dc:	2b01      	cmp	r3, #1
   110de:	d112      	bne.n	11106 <bt_mesh_proxy_prov_disable+0x32>
	bt_gatt_service_unregister(&prov_svc);
   110e0:	480b      	ldr	r0, [pc, #44]	; (11110 <bt_mesh_proxy_prov_disable+0x3c>)
	gatt_svc = MESH_GATT_NONE;
   110e2:	2400      	movs	r4, #0
	bt_gatt_service_unregister(&prov_svc);
   110e4:	f7fa fbec 	bl	b8c0 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   110e8:	702c      	strb	r4, [r5, #0]
		if (client->conn && client->filter_type == PROV) {
   110ea:	4d0a      	ldr	r5, [pc, #40]	; (11114 <bt_mesh_proxy_prov_disable+0x40>)
   110ec:	6828      	ldr	r0, [r5, #0]
   110ee:	b148      	cbz	r0, 11104 <bt_mesh_proxy_prov_disable+0x30>
   110f0:	7aab      	ldrb	r3, [r5, #10]
   110f2:	2b03      	cmp	r3, #3
   110f4:	d102      	bne.n	110fc <bt_mesh_proxy_prov_disable+0x28>
			bt_mesh_pb_gatt_close(client->conn);
   110f6:	f7ff fa0f 	bl	10518 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
   110fa:	72ac      	strb	r4, [r5, #10]
	return 0;
   110fc:	4620      	mov	r0, r4
   110fe:	e001      	b.n	11104 <bt_mesh_proxy_prov_disable+0x30>
		return -EALREADY;
   11100:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   11104:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   11106:	f06f 000f 	mvn.w	r0, #15
   1110a:	e7fb      	b.n	11104 <bt_mesh_proxy_prov_disable+0x30>
   1110c:	20002581 	.word	0x20002581
   11110:	20008fd8 	.word	0x20008fd8
   11114:	20008f28 	.word	0x20008f28

00011118 <bt_mesh_proxy_gatt_enable>:
{
   11118:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROXY) {
   1111a:	4d0b      	ldr	r5, [pc, #44]	; (11148 <bt_mesh_proxy_gatt_enable+0x30>)
   1111c:	782c      	ldrb	r4, [r5, #0]
   1111e:	2c02      	cmp	r4, #2
   11120:	d00c      	beq.n	1113c <bt_mesh_proxy_gatt_enable+0x24>
	if (gatt_svc != MESH_GATT_NONE) {
   11122:	b974      	cbnz	r4, 11142 <bt_mesh_proxy_gatt_enable+0x2a>
	bt_gatt_service_register(&proxy_svc);
   11124:	4809      	ldr	r0, [pc, #36]	; (1114c <bt_mesh_proxy_gatt_enable+0x34>)
   11126:	f00a fa9b 	bl	1b660 <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
   1112a:	2302      	movs	r3, #2
   1112c:	702b      	strb	r3, [r5, #0]
		if (clients[i].conn) {
   1112e:	4b08      	ldr	r3, [pc, #32]	; (11150 <bt_mesh_proxy_gatt_enable+0x38>)
   11130:	6818      	ldr	r0, [r3, #0]
   11132:	b110      	cbz	r0, 1113a <bt_mesh_proxy_gatt_enable+0x22>
			clients[i].filter_type = WHITELIST;
   11134:	2201      	movs	r2, #1
   11136:	729a      	strb	r2, [r3, #10]
	return 0;
   11138:	4620      	mov	r0, r4
}
   1113a:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1113c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   11140:	e7fb      	b.n	1113a <bt_mesh_proxy_gatt_enable+0x22>
		return -EBUSY;
   11142:	f06f 000f 	mvn.w	r0, #15
   11146:	e7f8      	b.n	1113a <bt_mesh_proxy_gatt_enable+0x22>
   11148:	20002581 	.word	0x20002581
   1114c:	2000905c 	.word	0x2000905c
   11150:	20008f28 	.word	0x20008f28

00011154 <bt_mesh_proxy_gatt_disconnect>:
		if (client->conn && (client->filter_type == WHITELIST ||
   11154:	4b06      	ldr	r3, [pc, #24]	; (11170 <bt_mesh_proxy_gatt_disconnect+0x1c>)
   11156:	6818      	ldr	r0, [r3, #0]
   11158:	b140      	cbz	r0, 1116c <bt_mesh_proxy_gatt_disconnect+0x18>
   1115a:	7a9a      	ldrb	r2, [r3, #10]
   1115c:	3a01      	subs	r2, #1
   1115e:	2a01      	cmp	r2, #1
   11160:	d804      	bhi.n	1116c <bt_mesh_proxy_gatt_disconnect+0x18>
			client->filter_type = NONE;
   11162:	2200      	movs	r2, #0
   11164:	729a      	strb	r2, [r3, #10]
			bt_conn_disconnect(client->conn,
   11166:	2113      	movs	r1, #19
   11168:	f009 bb86 	b.w	1a878 <bt_conn_disconnect>
}
   1116c:	4770      	bx	lr
   1116e:	bf00      	nop
   11170:	20008f28 	.word	0x20008f28

00011174 <bt_mesh_proxy_gatt_disable>:
{
   11174:	b510      	push	{r4, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   11176:	4c09      	ldr	r4, [pc, #36]	; (1119c <bt_mesh_proxy_gatt_disable+0x28>)
   11178:	7823      	ldrb	r3, [r4, #0]
   1117a:	b14b      	cbz	r3, 11190 <bt_mesh_proxy_gatt_disable+0x1c>
	if (gatt_svc != MESH_GATT_PROXY) {
   1117c:	2b02      	cmp	r3, #2
   1117e:	d10a      	bne.n	11196 <bt_mesh_proxy_gatt_disable+0x22>
	bt_mesh_proxy_gatt_disconnect();
   11180:	f7ff ffe8 	bl	11154 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
   11184:	4806      	ldr	r0, [pc, #24]	; (111a0 <bt_mesh_proxy_gatt_disable+0x2c>)
   11186:	f7fa fb9b 	bl	b8c0 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   1118a:	2000      	movs	r0, #0
   1118c:	7020      	strb	r0, [r4, #0]
}
   1118e:	bd10      	pop	{r4, pc}
		return -EALREADY;
   11190:	f06f 0044 	mvn.w	r0, #68	; 0x44
   11194:	e7fb      	b.n	1118e <bt_mesh_proxy_gatt_disable+0x1a>
		return -EBUSY;
   11196:	f06f 000f 	mvn.w	r0, #15
   1119a:	e7f8      	b.n	1118e <bt_mesh_proxy_gatt_disable+0x1a>
   1119c:	20002581 	.word	0x20002581
   111a0:	2000905c 	.word	0x2000905c

000111a4 <bt_mesh_proxy_send>:
{
   111a4:	b430      	push	{r4, r5}
		if (clients[i].conn == conn) {
   111a6:	4c0d      	ldr	r4, [pc, #52]	; (111dc <bt_mesh_proxy_send+0x38>)
   111a8:	6825      	ldr	r5, [r4, #0]
   111aa:	4285      	cmp	r5, r0
   111ac:	d10e      	bne.n	111cc <bt_mesh_proxy_send+0x28>
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
   111ae:	7aa4      	ldrb	r4, [r4, #10]
   111b0:	1ee5      	subs	r5, r4, #3
   111b2:	426c      	negs	r4, r5
   111b4:	f1a1 0c03 	sub.w	ip, r1, #3
   111b8:	416c      	adcs	r4, r5
   111ba:	f1dc 0300 	rsbs	r3, ip, #0
   111be:	eb43 030c 	adc.w	r3, r3, ip
   111c2:	429c      	cmp	r4, r3
   111c4:	d106      	bne.n	111d4 <bt_mesh_proxy_send+0x30>
}
   111c6:	bc30      	pop	{r4, r5}
	return proxy_segment_and_send(conn, type, msg);
   111c8:	f00d b8a7 	b.w	1e31a <proxy_segment_and_send>
		return -ENOTCONN;
   111cc:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   111d0:	bc30      	pop	{r4, r5}
   111d2:	4770      	bx	lr
		return -EINVAL;
   111d4:	f06f 0015 	mvn.w	r0, #21
   111d8:	e7fa      	b.n	111d0 <bt_mesh_proxy_send+0x2c>
   111da:	bf00      	nop
   111dc:	20008f28 	.word	0x20008f28

000111e0 <bt_mesh_proxy_relay>:
{
   111e0:	b530      	push	{r4, r5, lr}
		if (!client->conn) {
   111e2:	4c1a      	ldr	r4, [pc, #104]	; (1124c <bt_mesh_proxy_relay+0x6c>)
{
   111e4:	b08d      	sub	sp, #52	; 0x34
		NET_BUF_SIMPLE_DEFINE(msg, 32);
   111e6:	ab04      	add	r3, sp, #16
   111e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   111ec:	9301      	str	r3, [sp, #4]
   111ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
		if (!client->conn) {
   111f2:	6823      	ldr	r3, [r4, #0]
{
   111f4:	4605      	mov	r5, r0
		if (!client->conn) {
   111f6:	b33b      	cbz	r3, 11248 <bt_mesh_proxy_relay+0x68>
	if (client->filter_type == WHITELIST) {
   111f8:	7aa3      	ldrb	r3, [r4, #10]
   111fa:	2b01      	cmp	r3, #1
   111fc:	d119      	bne.n	11232 <bt_mesh_proxy_relay+0x52>
			if (client->filter[i] == addr) {
   111fe:	88a3      	ldrh	r3, [r4, #4]
   11200:	428b      	cmp	r3, r1
   11202:	d005      	beq.n	11210 <bt_mesh_proxy_relay+0x30>
   11204:	88e3      	ldrh	r3, [r4, #6]
   11206:	428b      	cmp	r3, r1
   11208:	d002      	beq.n	11210 <bt_mesh_proxy_relay+0x30>
   1120a:	8923      	ldrh	r3, [r4, #8]
   1120c:	428b      	cmp	r3, r1
   1120e:	d11b      	bne.n	11248 <bt_mesh_proxy_relay+0x68>
		net_buf_simple_reserve(&msg, 1);
   11210:	2101      	movs	r1, #1
   11212:	a801      	add	r0, sp, #4
   11214:	f00d ff0d 	bl	1f032 <net_buf_simple_reserve>
		net_buf_simple_add_mem(&msg, buf->data, buf->len);
   11218:	88aa      	ldrh	r2, [r5, #4]
   1121a:	6829      	ldr	r1, [r5, #0]
   1121c:	a801      	add	r0, sp, #4
   1121e:	f00d ff73 	bl	1f108 <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, &msg);
   11222:	aa01      	add	r2, sp, #4
   11224:	2100      	movs	r1, #0
   11226:	6820      	ldr	r0, [r4, #0]
   11228:	f7ff ffbc 	bl	111a4 <bt_mesh_proxy_send>
		relayed = true;
   1122c:	2001      	movs	r0, #1
}
   1122e:	b00d      	add	sp, #52	; 0x34
   11230:	bd30      	pop	{r4, r5, pc}
	if (client->filter_type == BLACKLIST) {
   11232:	2b02      	cmp	r3, #2
   11234:	d108      	bne.n	11248 <bt_mesh_proxy_relay+0x68>
			if (client->filter[i] == addr) {
   11236:	88a3      	ldrh	r3, [r4, #4]
   11238:	428b      	cmp	r3, r1
   1123a:	d005      	beq.n	11248 <bt_mesh_proxy_relay+0x68>
   1123c:	88e3      	ldrh	r3, [r4, #6]
   1123e:	428b      	cmp	r3, r1
   11240:	d002      	beq.n	11248 <bt_mesh_proxy_relay+0x68>
   11242:	8923      	ldrh	r3, [r4, #8]
   11244:	428b      	cmp	r3, r1
   11246:	d1e3      	bne.n	11210 <bt_mesh_proxy_relay+0x30>
	bool relayed = false;
   11248:	2000      	movs	r0, #0
   1124a:	e7f0      	b.n	1122e <bt_mesh_proxy_relay+0x4e>
   1124c:	20008f28 	.word	0x20008f28

00011250 <bt_mesh_proxy_adv_start>:
	return prov_sd_len;
}
#endif /* CONFIG_BT_MESH_PB_GATT */

s32_t bt_mesh_proxy_adv_start(void)
{
   11250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("");

	if (gatt_svc == MESH_GATT_NONE) {
   11254:	4b88      	ldr	r3, [pc, #544]	; (11478 <bt_mesh_proxy_adv_start+0x228>)
   11256:	781b      	ldrb	r3, [r3, #0]
{
   11258:	b086      	sub	sp, #24
	if (gatt_svc == MESH_GATT_NONE) {
   1125a:	b92b      	cbnz	r3, 11268 <bt_mesh_proxy_adv_start+0x18>
		return K_FOREVER;
   1125c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		return gatt_proxy_advertise(next_sub());
	}
#endif /* GATT_PROXY */

	return K_FOREVER;
}
   11260:	4620      	mov	r0, r4
   11262:	b006      	add	sp, #24
   11264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!bt_mesh_is_provisioned()) {
   11268:	f00a fa81 	bl	1b76e <bt_mesh_is_provisioned>
   1126c:	2800      	cmp	r0, #0
   1126e:	d159      	bne.n	11324 <bt_mesh_proxy_adv_start+0xd4>
		if (prov_fast_adv) {
   11270:	4c82      	ldr	r4, [pc, #520]	; (1147c <bt_mesh_proxy_adv_start+0x22c>)
			param = &slow_adv_param;
   11272:	4b83      	ldr	r3, [pc, #524]	; (11480 <bt_mesh_proxy_adv_start+0x230>)
		if (prov_fast_adv) {
   11274:	7822      	ldrb	r2, [r4, #0]
			param = &slow_adv_param;
   11276:	4e83      	ldr	r6, [pc, #524]	; (11484 <bt_mesh_proxy_adv_start+0x234>)
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   11278:	4d83      	ldr	r5, [pc, #524]	; (11488 <bt_mesh_proxy_adv_start+0x238>)
			param = &slow_adv_param;
   1127a:	2a00      	cmp	r2, #0
   1127c:	bf08      	it	eq
   1127e:	461e      	moveq	r6, r3
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   11280:	f7ff fcae 	bl	10be0 <bt_mesh_prov_get>
   11284:	4681      	mov	r9, r0
	const char *name = bt_get_name();
   11286:	f7f8 fc19 	bl	9abc <bt_get_name>
   1128a:	4607      	mov	r7, r0
	size_t name_len = strlen(name);
   1128c:	f008 fee9 	bl	1a062 <strlen>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   11290:	2210      	movs	r2, #16
	size_t name_len = strlen(name);
   11292:	4680      	mov	r8, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   11294:	f8d9 1000 	ldr.w	r1, [r9]
   11298:	1ca8      	adds	r0, r5, #2
   1129a:	f008 ff05 	bl	1a0a8 <memcpy>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   1129e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
	dst[1] = val;
   112a2:	74eb      	strb	r3, [r5, #19]
	dst[0] = val >> 8;
   112a4:	0a1a      	lsrs	r2, r3, #8
   112a6:	74aa      	strb	r2, [r5, #18]
	if (prov->uri) {
   112a8:	f8d9 0004 	ldr.w	r0, [r9, #4]
   112ac:	ad02      	add	r5, sp, #8
   112ae:	b9b0      	cbnz	r0, 112de <bt_mesh_proxy_adv_start+0x8e>
	size_t sd_space = 31;
   112b0:	201f      	movs	r0, #31
	size_t prov_sd_len = 0;
   112b2:	2200      	movs	r2, #0
	if (sd_space > 2 && name_len > 0) {
   112b4:	f1b8 0f00 	cmp.w	r8, #0
   112b8:	d023      	beq.n	11302 <bt_mesh_proxy_adv_start+0xb2>
		sd_space -= 2;
   112ba:	3802      	subs	r0, #2
		if (sd_space < name_len) {
   112bc:	4580      	cmp	r8, r0
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   112be:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   112c2:	bf8b      	itete	hi
   112c4:	2108      	movhi	r1, #8
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   112c6:	2109      	movls	r1, #9
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   112c8:	f805 1032 	strbhi.w	r1, [r5, r2, lsl #3]
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   112cc:	f805 1032 	strbls.w	r1, [r5, r2, lsl #3]
			prov_sd[prov_sd_len].data_len = sd_space;
   112d0:	bf8c      	ite	hi
   112d2:	7058      	strbhi	r0, [r3, #1]
			prov_sd[prov_sd_len].data_len = name_len;
   112d4:	f883 8001 	strbls.w	r8, [r3, #1]
		prov_sd[prov_sd_len].data = name;
   112d8:	605f      	str	r7, [r3, #4]
		prov_sd_len++;
   112da:	3201      	adds	r2, #1
   112dc:	e011      	b.n	11302 <bt_mesh_proxy_adv_start+0xb2>
		size_t uri_len = strlen(prov->uri);
   112de:	f008 fec0 	bl	1a062 <strlen>
		if (uri_len > 29) {
   112e2:	281d      	cmp	r0, #29
   112e4:	d8e4      	bhi.n	112b0 <bt_mesh_proxy_adv_start+0x60>
			prov_sd[0].type = BT_DATA_URI;
   112e6:	2324      	movs	r3, #36	; 0x24
			prov_sd[0].data_len = uri_len;
   112e8:	f88d 0009 	strb.w	r0, [sp, #9]
			prov_sd[0].type = BT_DATA_URI;
   112ec:	f88d 3008 	strb.w	r3, [sp, #8]
			sd_space -= 2 + uri_len;
   112f0:	f1c0 001d 	rsb	r0, r0, #29
			prov_sd[0].data = prov->uri;
   112f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   112f8:	9303      	str	r3, [sp, #12]
	if (sd_space > 2 && name_len > 0) {
   112fa:	2802      	cmp	r0, #2
			prov_sd_len++;
   112fc:	f04f 0201 	mov.w	r2, #1
	if (sd_space > 2 && name_len > 0) {
   11300:	d8d8      	bhi.n	112b4 <bt_mesh_proxy_adv_start+0x64>
		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
   11302:	9200      	str	r2, [sp, #0]
   11304:	462b      	mov	r3, r5
   11306:	2203      	movs	r2, #3
   11308:	4960      	ldr	r1, [pc, #384]	; (1148c <bt_mesh_proxy_adv_start+0x23c>)
   1130a:	4630      	mov	r0, r6
   1130c:	f009 f9e9 	bl	1a6e2 <bt_le_adv_start>
   11310:	b940      	cbnz	r0, 11324 <bt_mesh_proxy_adv_start+0xd4>
			proxy_adv_enabled = true;
   11312:	4b5f      	ldr	r3, [pc, #380]	; (11490 <bt_mesh_proxy_adv_start+0x240>)
   11314:	2201      	movs	r2, #1
   11316:	701a      	strb	r2, [r3, #0]
			if (prov_fast_adv) {
   11318:	7823      	ldrb	r3, [r4, #0]
   1131a:	b11b      	cbz	r3, 11324 <bt_mesh_proxy_adv_start+0xd4>
				prov_fast_adv = false;
   1131c:	7020      	strb	r0, [r4, #0]
				return K_SECONDS(60);
   1131e:	f64e 2460 	movw	r4, #60000	; 0xea60
   11322:	e79d      	b.n	11260 <bt_mesh_proxy_adv_start+0x10>
	if (bt_mesh_is_provisioned()) {
   11324:	f00a fa23 	bl	1b76e <bt_mesh_is_provisioned>
   11328:	2800      	cmp	r0, #0
   1132a:	d097      	beq.n	1125c <bt_mesh_proxy_adv_start+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   1132c:	f7ff fcf8 	bl	10d20 <next_sub.part.5>
	proxy_svc_data[2] = ID_TYPE_NODE;
   11330:	4f58      	ldr	r7, [pc, #352]	; (11494 <bt_mesh_proxy_adv_start+0x244>)
	if (conn_count == CONFIG_BT_MAX_CONN) {
   11332:	f8df 8178 	ldr.w	r8, [pc, #376]	; 114ac <bt_mesh_proxy_adv_start+0x25c>
   11336:	4605      	mov	r5, r0
	err = bt_rand(proxy_svc_data + 11, 8);
   11338:	f107 090b 	add.w	r9, r7, #11
	if (conn_count == CONFIG_BT_MAX_CONN) {
   1133c:	f8d8 3000 	ldr.w	r3, [r8]
   11340:	2b01      	cmp	r3, #1
   11342:	d08b      	beq.n	1125c <bt_mesh_proxy_adv_start+0xc>
	if (!sub) {
   11344:	2d00      	cmp	r5, #0
   11346:	d089      	beq.n	1125c <bt_mesh_proxy_adv_start+0xc>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
   11348:	f895 6020 	ldrb.w	r6, [r5, #32]
   1134c:	2e01      	cmp	r6, #1
   1134e:	f040 8083 	bne.w	11458 <bt_mesh_proxy_adv_start+0x208>
   11352:	f00e fc3c 	bl	1fbce <z_impl_k_uptime_get_32>
		u32_t active = k_uptime_get_32() - sub->node_id_start;
   11356:	6a6c      	ldr	r4, [r5, #36]	; 0x24
		if (active < NODE_ID_TIMEOUT) {
   11358:	f64e 235f 	movw	r3, #59999	; 0xea5f
		u32_t active = k_uptime_get_32() - sub->node_id_start;
   1135c:	1b02      	subs	r2, r0, r4
		if (active < NODE_ID_TIMEOUT) {
   1135e:	429a      	cmp	r2, r3
   11360:	d876      	bhi.n	11450 <bt_mesh_proxy_adv_start+0x200>
			remaining = NODE_ID_TIMEOUT - active;
   11362:	f504 446a 	add.w	r4, r4, #59904	; 0xea00
   11366:	3460      	adds	r4, #96	; 0x60
	err = bt_rand(proxy_svc_data + 11, 8);
   11368:	2108      	movs	r1, #8
			remaining = NODE_ID_TIMEOUT - active;
   1136a:	1a24      	subs	r4, r4, r0
	err = bt_rand(proxy_svc_data + 11, 8);
   1136c:	4648      	mov	r0, r9
	proxy_svc_data[2] = ID_TYPE_NODE;
   1136e:	70be      	strb	r6, [r7, #2]
	err = bt_rand(proxy_svc_data + 11, 8);
   11370:	f00d faf2 	bl	1e958 <bt_rand>
	if (err) {
   11374:	4601      	mov	r1, r0
   11376:	bb48      	cbnz	r0, 113cc <bt_mesh_proxy_adv_start+0x17c>
	(void)memset(tmp, 0, 6);
   11378:	2206      	movs	r2, #6
   1137a:	a802      	add	r0, sp, #8
   1137c:	f008 febe 	bl	1a0fc <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
   11380:	2208      	movs	r2, #8
   11382:	4945      	ldr	r1, [pc, #276]	; (11498 <bt_mesh_proxy_adv_start+0x248>)
   11384:	f10d 000e 	add.w	r0, sp, #14
   11388:	f008 fe8e 	bl	1a0a8 <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
   1138c:	f7fd f836 	bl	e3fc <bt_mesh_primary_addr>
   11390:	ba40      	rev16	r0, r0
   11392:	f8ad 0016 	strh.w	r0, [sp, #22]
	err = bt_encrypt_be(sub->keys[sub->kr_flag].identity, tmp, tmp);
   11396:	7fab      	ldrb	r3, [r5, #30]
   11398:	2059      	movs	r0, #89	; 0x59
   1139a:	fb03 0000 	mla	r0, r3, r0, r0
   1139e:	aa02      	add	r2, sp, #8
   113a0:	4611      	mov	r1, r2
   113a2:	4428      	add	r0, r5
   113a4:	f00d faf2 	bl	1e98c <bt_encrypt_be>
	if (err) {
   113a8:	4682      	mov	sl, r0
   113aa:	b978      	cbnz	r0, 113cc <bt_mesh_proxy_adv_start+0x17c>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
   113ac:	2208      	movs	r2, #8
   113ae:	a904      	add	r1, sp, #16
   113b0:	483a      	ldr	r0, [pc, #232]	; (1149c <bt_mesh_proxy_adv_start+0x24c>)
   113b2:	f008 fe79 	bl	1a0a8 <memcpy>
	err = bt_le_adv_start(&fast_adv_param, node_id_ad,
   113b6:	f8cd a000 	str.w	sl, [sp]
   113ba:	4653      	mov	r3, sl
   113bc:	2203      	movs	r2, #3
   113be:	4938      	ldr	r1, [pc, #224]	; (114a0 <bt_mesh_proxy_adv_start+0x250>)
   113c0:	4830      	ldr	r0, [pc, #192]	; (11484 <bt_mesh_proxy_adv_start+0x234>)
   113c2:	f009 f98e 	bl	1a6e2 <bt_le_adv_start>
	if (err) {
   113c6:	b908      	cbnz	r0, 113cc <bt_mesh_proxy_adv_start+0x17c>
	proxy_adv_enabled = true;
   113c8:	4b31      	ldr	r3, [pc, #196]	; (11490 <bt_mesh_proxy_adv_start+0x240>)
   113ca:	701e      	strb	r6, [r3, #0]
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
   113cc:	f895 6020 	ldrb.w	r6, [r5, #32]
   113d0:	b9d6      	cbnz	r6, 11408 <bt_mesh_proxy_adv_start+0x1b8>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   113d2:	f7fd fd99 	bl	ef08 <bt_mesh_gatt_proxy_get>
   113d6:	2801      	cmp	r0, #1
   113d8:	4682      	mov	sl, r0
   113da:	d140      	bne.n	1145e <bt_mesh_proxy_adv_start+0x20e>
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   113dc:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
   113de:	482d      	ldr	r0, [pc, #180]	; (11494 <bt_mesh_proxy_adv_start+0x244>)
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   113e0:	2359      	movs	r3, #89	; 0x59
   113e2:	fb03 5101 	mla	r1, r3, r1, r5
	proxy_svc_data[2] = ID_TYPE_NET;
   113e6:	7086      	strb	r6, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
   113e8:	2208      	movs	r2, #8
   113ea:	3151      	adds	r1, #81	; 0x51
   113ec:	3003      	adds	r0, #3
   113ee:	f008 fe5b 	bl	1a0a8 <memcpy>
	err = bt_le_adv_start(&slow_adv_param, net_id_ad,
   113f2:	9600      	str	r6, [sp, #0]
   113f4:	4633      	mov	r3, r6
   113f6:	2203      	movs	r2, #3
   113f8:	492a      	ldr	r1, [pc, #168]	; (114a4 <bt_mesh_proxy_adv_start+0x254>)
   113fa:	4821      	ldr	r0, [pc, #132]	; (11480 <bt_mesh_proxy_adv_start+0x230>)
   113fc:	f009 f971 	bl	1a6e2 <bt_le_adv_start>
	if (err) {
   11400:	b910      	cbnz	r0, 11408 <bt_mesh_proxy_adv_start+0x1b8>
	proxy_adv_enabled = true;
   11402:	4b23      	ldr	r3, [pc, #140]	; (11490 <bt_mesh_proxy_adv_start+0x240>)
   11404:	f883 a000 	strb.w	sl, [r3]
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   11408:	4d27      	ldr	r5, [pc, #156]	; (114a8 <bt_mesh_proxy_adv_start+0x258>)
   1140a:	f8b5 20c0 	ldrh.w	r2, [r5, #192]	; 0xc0
   1140e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11412:	429a      	cmp	r2, r3
   11414:	d02d      	beq.n	11472 <bt_mesh_proxy_adv_start+0x222>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   11416:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
   1141a:	2b01      	cmp	r3, #1
   1141c:	d003      	beq.n	11426 <bt_mesh_proxy_adv_start+0x1d6>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   1141e:	f7fd fd73 	bl	ef08 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   11422:	2801      	cmp	r0, #1
   11424:	d125      	bne.n	11472 <bt_mesh_proxy_adv_start+0x222>
			count++;
   11426:	2601      	movs	r6, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
   11428:	f8b5 21a4 	ldrh.w	r2, [r5, #420]	; 0x1a4
   1142c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11430:	429a      	cmp	r2, r3
   11432:	f43f af15 	beq.w	11260 <bt_mesh_proxy_adv_start+0x10>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
   11436:	f895 31a8 	ldrb.w	r3, [r5, #424]	; 0x1a8
   1143a:	2b01      	cmp	r3, #1
   1143c:	d113      	bne.n	11466 <bt_mesh_proxy_adv_start+0x216>
	if (subnet_count > 1) {
   1143e:	2e00      	cmp	r6, #0
   11440:	f43f af0e 	beq.w	11260 <bt_mesh_proxy_adv_start+0x10>
		max_timeout = MAX(max_timeout, K_SECONDS(1));
   11444:	f242 7310 	movw	r3, #10000	; 0x2710
   11448:	429c      	cmp	r4, r3
   1144a:	bf28      	it	cs
   1144c:	461c      	movcs	r4, r3
   1144e:	e707      	b.n	11260 <bt_mesh_proxy_adv_start+0x10>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   11450:	2300      	movs	r3, #0
   11452:	f885 3020 	strb.w	r3, [r5, #32]
	sub->node_id_start = 0U;
   11456:	626b      	str	r3, [r5, #36]	; 0x24
	s32_t remaining = K_FOREVER;
   11458:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1145c:	e7b6      	b.n	113cc <bt_mesh_proxy_adv_start+0x17c>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
   1145e:	f7ff fc5f 	bl	10d20 <next_sub.part.5>
   11462:	4605      	mov	r5, r0
   11464:	e76a      	b.n	1133c <bt_mesh_proxy_adv_start+0xec>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   11466:	f7fd fd4f 	bl	ef08 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
   1146a:	2801      	cmp	r0, #1
   1146c:	f47f aef8 	bne.w	11260 <bt_mesh_proxy_adv_start+0x10>
   11470:	e7e5      	b.n	1143e <bt_mesh_proxy_adv_start+0x1ee>
   11472:	2600      	movs	r6, #0
   11474:	e7d8      	b.n	11428 <bt_mesh_proxy_adv_start+0x1d8>
   11476:	bf00      	nop
   11478:	20002581 	.word	0x20002581
   1147c:	20002582 	.word	0x20002582
   11480:	00020bd6 	.word	0x00020bd6
   11484:	00020bd0 	.word	0x00020bd0
   11488:	20009276 	.word	0x20009276
   1148c:	00020b24 	.word	0x00020b24
   11490:	20002583 	.word	0x20002583
   11494:	2000928a 	.word	0x2000928a
   11498:	20009295 	.word	0x20009295
   1149c:	2000928d 	.word	0x2000928d
   114a0:	00020b0c 	.word	0x00020b0c
   114a4:	00020af4 	.word	0x00020af4
   114a8:	2000885c 	.word	0x2000885c
   114ac:	20000fc0 	.word	0x20000fc0

000114b0 <bt_mesh_proxy_adv_stop>:

void bt_mesh_proxy_adv_stop(void)
{
   114b0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("adv_enabled %u", proxy_adv_enabled);

	if (!proxy_adv_enabled) {
   114b2:	4c04      	ldr	r4, [pc, #16]	; (114c4 <bt_mesh_proxy_adv_stop+0x14>)
   114b4:	7823      	ldrb	r3, [r4, #0]
   114b6:	b11b      	cbz	r3, 114c0 <bt_mesh_proxy_adv_stop+0x10>
		return;
	}

	err = bt_le_adv_stop();
   114b8:	f7f8 fc8c 	bl	9dd4 <bt_le_adv_stop>
	if (err) {
   114bc:	b900      	cbnz	r0, 114c0 <bt_mesh_proxy_adv_stop+0x10>
		BT_ERR("Failed to stop advertising (err %d)", err);
	} else {
		proxy_adv_enabled = false;
   114be:	7020      	strb	r0, [r4, #0]
	}
}
   114c0:	bd10      	pop	{r4, pc}
   114c2:	bf00      	nop
   114c4:	20002583 	.word	0x20002583

000114c8 <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
   114c8:	b508      	push	{r3, lr}

	/* Initialize the client receive buffers */
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		client->buf.size = CLIENT_BUF_SIZE;
   114ca:	4b05      	ldr	r3, [pc, #20]	; (114e0 <bt_mesh_proxy_init+0x18>)
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
	}

	bt_conn_cb_register(&conn_callbacks);
   114cc:	4805      	ldr	r0, [pc, #20]	; (114e4 <bt_mesh_proxy_init+0x1c>)
		client->buf.size = CLIENT_BUF_SIZE;
   114ce:	2244      	movs	r2, #68	; 0x44
   114d0:	83da      	strh	r2, [r3, #30]
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   114d2:	4a05      	ldr	r2, [pc, #20]	; (114e8 <bt_mesh_proxy_init+0x20>)
   114d4:	621a      	str	r2, [r3, #32]
	bt_conn_cb_register(&conn_callbacks);
   114d6:	f7f8 fe9d 	bl	a214 <bt_conn_cb_register>

	return 0;
}
   114da:	2000      	movs	r0, #0
   114dc:	bd08      	pop	{r3, pc}
   114de:	bf00      	nop
   114e0:	20008f28 	.word	0x20008f28
   114e4:	20008f4c 	.word	0x20008f4c
   114e8:	20007ade 	.word	0x20007ade

000114ec <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   114ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   114f0:	4f11      	ldr	r7, [pc, #68]	; (11538 <mayfly_init+0x4c>)
   114f2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1153c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   114f6:	2604      	movs	r6, #4
	while (callee_id--) {
   114f8:	3e01      	subs	r6, #1
   114fa:	b2f6      	uxtb	r6, r6
   114fc:	2eff      	cmp	r6, #255	; 0xff
   114fe:	d019      	beq.n	11534 <mayfly_init+0x48>
   11500:	b233      	sxth	r3, r6
   11502:	ea4f 0883 	mov.w	r8, r3, lsl #2
   11506:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1150a:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
   1150c:	2404      	movs	r4, #4
   1150e:	f04f 0a0c 	mov.w	sl, #12
   11512:	e00a      	b.n	1152a <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
   11514:	fb1a 5104 	smlabb	r1, sl, r4, r5
   11518:	1d0a      	adds	r2, r1, #4
   1151a:	eb04 0008 	add.w	r0, r4, r8
   1151e:	443a      	add	r2, r7
   11520:	4439      	add	r1, r7
   11522:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
   11526:	f00d f8aa 	bl	1e67e <memq_init>
		while (caller_id--) {
   1152a:	3c01      	subs	r4, #1
   1152c:	b2e4      	uxtb	r4, r4
   1152e:	2cff      	cmp	r4, #255	; 0xff
   11530:	d1f0      	bne.n	11514 <mayfly_init+0x28>
   11532:	e7e1      	b.n	114f8 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   11534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11538:	20001068 	.word	0x20001068
   1153c:	20000fe8 	.word	0x20000fe8

00011540 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   11540:	b4f0      	push	{r4, r5, r6, r7}
   11542:	4b12      	ldr	r3, [pc, #72]	; (1158c <mayfly_enable+0x4c>)
   11544:	4605      	mov	r5, r0
   11546:	460f      	mov	r7, r1
   11548:	260c      	movs	r6, #12
   1154a:	2430      	movs	r4, #48	; 0x30
	if (enable) {
   1154c:	b172      	cbz	r2, 1156c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
   1154e:	4361      	muls	r1, r4
   11550:	fb06 1400 	mla	r4, r6, r0, r1
   11554:	4423      	add	r3, r4
   11556:	7a59      	ldrb	r1, [r3, #9]
   11558:	7a18      	ldrb	r0, [r3, #8]
   1155a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   1155c:	bf04      	itt	eq
   1155e:	3101      	addeq	r1, #1
   11560:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   11562:	4628      	mov	r0, r5
   11564:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
   11566:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   11568:	f00d bd12 	b.w	1ef90 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   1156c:	434c      	muls	r4, r1
   1156e:	fb06 4400 	mla	r4, r6, r0, r4
   11572:	4423      	add	r3, r4
   11574:	7a9c      	ldrb	r4, [r3, #10]
   11576:	7ada      	ldrb	r2, [r3, #11]
   11578:	42a2      	cmp	r2, r4
   1157a:	d104      	bne.n	11586 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
   1157c:	3201      	adds	r2, #1
   1157e:	729a      	strb	r2, [r3, #10]
}
   11580:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   11582:	f004 b8c5 	b.w	15710 <mayfly_pend>
}
   11586:	bcf0      	pop	{r4, r5, r6, r7}
   11588:	4770      	bx	lr
   1158a:	bf00      	nop
   1158c:	20001068 	.word	0x20001068

00011590 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
   11590:	b570      	push	{r4, r5, r6, lr}
   11592:	4606      	mov	r6, r0
   11594:	460d      	mov	r5, r1
   11596:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   11598:	b1a2      	cbz	r2, 115c4 <mayfly_enqueue+0x34>
   1159a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   1159c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1159e:	7820      	ldrb	r0, [r4, #0]
   115a0:	1a80      	subs	r0, r0, r2
	if (state != 0) {
   115a2:	f010 0003 	ands.w	r0, r0, #3
   115a6:	d02c      	beq.n	11602 <mayfly_enqueue+0x72>
		if (chain) {
   115a8:	b31b      	cbz	r3, 115f2 <mayfly_enqueue+0x62>
			if (state != 1) {
   115aa:	2801      	cmp	r0, #1
   115ac:	d028      	beq.n	11600 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
   115ae:	3201      	adds	r2, #1
   115b0:	b2d2      	uxtb	r2, r2
   115b2:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1;
   115b4:	4b1c      	ldr	r3, [pc, #112]	; (11628 <mayfly_enqueue+0x98>)
   115b6:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   115b8:	4629      	mov	r1, r5
   115ba:	4630      	mov	r0, r6
	mfp[callee_id] = 1;
   115bc:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   115be:	f004 f8a7 	bl	15710 <mayfly_pend>
   115c2:	e01c      	b.n	115fe <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   115c4:	f00d fd00 	bl	1efc8 <mayfly_prio_is_equal>
   115c8:	2800      	cmp	r0, #0
   115ca:	d0e6      	beq.n	1159a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   115cc:	4629      	mov	r1, r5
   115ce:	4630      	mov	r0, r6
   115d0:	f00d fcec 	bl	1efac <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   115d4:	2800      	cmp	r0, #0
   115d6:	d0e0      	beq.n	1159a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   115d8:	2330      	movs	r3, #48	; 0x30
   115da:	220c      	movs	r2, #12
   115dc:	436b      	muls	r3, r5
   115de:	fb02 3306 	mla	r3, r2, r6, r3
   115e2:	4a12      	ldr	r2, [pc, #72]	; (1162c <mayfly_enqueue+0x9c>)
   115e4:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   115e6:	7a93      	ldrb	r3, [r2, #10]
   115e8:	7ad2      	ldrb	r2, [r2, #11]
   115ea:	1a9b      	subs	r3, r3, r2
   115ec:	bf18      	it	ne
   115ee:	2301      	movne	r3, #1
   115f0:	e7d4      	b.n	1159c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   115f2:	3202      	adds	r2, #2
   115f4:	b2d2      	uxtb	r2, r2
   115f6:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   115f8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   115fc:	4798      	blx	r3

	return 0;
   115fe:	2000      	movs	r0, #0
}
   11600:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
   11602:	2b00      	cmp	r3, #0
   11604:	d0f8      	beq.n	115f8 <mayfly_enqueue+0x68>
	m->_req = ack + 1;
   11606:	3201      	adds	r2, #1
   11608:	b2d2      	uxtb	r2, r2
   1160a:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1160c:	2304      	movs	r3, #4
   1160e:	2230      	movs	r2, #48	; 0x30
   11610:	fb12 3205 	smlabb	r2, r2, r5, r3
   11614:	230c      	movs	r3, #12
   11616:	fb13 2306 	smlabb	r3, r3, r6, r2
   1161a:	4a04      	ldr	r2, [pc, #16]	; (1162c <mayfly_enqueue+0x9c>)
   1161c:	6860      	ldr	r0, [r4, #4]
   1161e:	441a      	add	r2, r3
   11620:	4621      	mov	r1, r4
   11622:	f00d f82f 	bl	1e684 <memq_enqueue>
   11626:	e7c5      	b.n	115b4 <mayfly_enqueue+0x24>
   11628:	20002584 	.word	0x20002584
   1162c:	20001068 	.word	0x20001068

00011630 <mayfly_run>:
		}
	}
}

void mayfly_run(u8_t callee_id)
{
   11630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
   11634:	4b56      	ldr	r3, [pc, #344]	; (11790 <mayfly_run+0x160>)
   11636:	5c1a      	ldrb	r2, [r3, r0]
{
   11638:	b089      	sub	sp, #36	; 0x24
   1163a:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
   1163c:	2a00      	cmp	r2, #0
   1163e:	f000 80a0 	beq.w	11782 <mayfly_run+0x152>
		return;
	}
	mfp[callee_id] = 1;
   11642:	2201      	movs	r2, #1
   11644:	541a      	strb	r2, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   11646:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1164a:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1164c:	f8df b144 	ldr.w	fp, [pc, #324]	; 11794 <mayfly_run+0x164>
   11650:	9304      	str	r3, [sp, #16]
   11652:	2404      	movs	r4, #4
   11654:	233c      	movs	r3, #60	; 0x3c
   11656:	fb13 4300 	smlabb	r3, r3, r0, r4
   1165a:	445b      	add	r3, fp
	u8_t enable = 0U;
   1165c:	f04f 0800 	mov.w	r8, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   11660:	9303      	str	r3, [sp, #12]
	u8_t disable = 0U;
   11662:	f8cd 8000 	str.w	r8, [sp]
   11666:	46d9      	mov	r9, fp
	while (caller_id--) {
   11668:	3c01      	subs	r4, #1
   1166a:	b2e4      	uxtb	r4, r4
   1166c:	2cff      	cmp	r4, #255	; 0xff
   1166e:	d10d      	bne.n	1168c <mayfly_run+0x5c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   11670:	9b00      	ldr	r3, [sp, #0]
   11672:	2b00      	cmp	r3, #0
   11674:	f000 8085 	beq.w	11782 <mayfly_run+0x152>
   11678:	f1b8 0f00 	cmp.w	r8, #0
   1167c:	f040 8081 	bne.w	11782 <mayfly_run+0x152>
		mayfly_enable_cb(callee_id, callee_id, 0);
   11680:	4642      	mov	r2, r8
   11682:	4629      	mov	r1, r5
   11684:	4628      	mov	r0, r5
   11686:	f00d fc83 	bl	1ef90 <mayfly_enable_cb>
   1168a:	e07a      	b.n	11782 <mayfly_run+0x152>
		struct mayfly *m = 0;
   1168c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   1168e:	260c      	movs	r6, #12
		struct mayfly *m = 0;
   11690:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   11692:	4366      	muls	r6, r4
   11694:	2330      	movs	r3, #48	; 0x30
   11696:	fb03 6305 	mla	r3, r3, r5, r6
   1169a:	eb09 0103 	add.w	r1, r9, r3
   1169e:	aa07      	add	r2, sp, #28
   116a0:	f859 0003 	ldr.w	r0, [r9, r3]
   116a4:	6849      	ldr	r1, [r1, #4]
   116a6:	f00c fff4 	bl	1e692 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
   116aa:	9a04      	ldr	r2, [sp, #16]
   116ac:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   116b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   116b4:	444b      	add	r3, r9
   116b6:	e9cd 6301 	strd	r6, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
   116ba:	4682      	mov	sl, r0
		while (link) {
   116bc:	f1ba 0f00 	cmp.w	sl, #0
   116c0:	d043      	beq.n	1174a <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
   116c2:	9b07      	ldr	r3, [sp, #28]
   116c4:	781f      	ldrb	r7, [r3, #0]
   116c6:	785a      	ldrb	r2, [r3, #1]
   116c8:	1abf      	subs	r7, r7, r2
   116ca:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
   116ce:	2f01      	cmp	r7, #1
   116d0:	d104      	bne.n	116dc <mayfly_run+0xac>
				m->_ack--;
   116d2:	3a01      	subs	r2, #1
   116d4:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   116d6:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   116da:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
   116dc:	9e07      	ldr	r6, [sp, #28]
	req = m->_req;
   116de:	7833      	ldrb	r3, [r6, #0]
	if (((req - m->_ack) & 0x03) != 1) {
   116e0:	7872      	ldrb	r2, [r6, #1]
	req = m->_req;
   116e2:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1) {
   116e4:	1a9a      	subs	r2, r3, r2
   116e6:	f002 0203 	and.w	r2, r2, #3
   116ea:	2a01      	cmp	r2, #1
   116ec:	9305      	str	r3, [sp, #20]
   116ee:	d01b      	beq.n	11728 <mayfly_run+0xf8>
		memq_dequeue(mft[callee_id][caller_id].tail,
   116f0:	9b01      	ldr	r3, [sp, #4]
   116f2:	9902      	ldr	r1, [sp, #8]
   116f4:	2030      	movs	r0, #48	; 0x30
   116f6:	fb00 3005 	mla	r0, r0, r5, r3
   116fa:	4b26      	ldr	r3, [pc, #152]	; (11794 <mayfly_run+0x164>)
   116fc:	4418      	add	r0, r3
   116fe:	2200      	movs	r2, #0
   11700:	6840      	ldr	r0, [r0, #4]
   11702:	f00c ffce 	bl	1e6a2 <memq_dequeue>
		m->_ack = req;
   11706:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
   11708:	7872      	ldrb	r2, [r6, #1]
		m->_ack = req;
   1170a:	7073      	strb	r3, [r6, #1]
		if (((m->_req - ack) & 0x03) == 1) {
   1170c:	7833      	ldrb	r3, [r6, #0]
		m->_link = link;
   1170e:	f8c6 a004 	str.w	sl, [r6, #4]
		if (((m->_req - ack) & 0x03) == 1) {
   11712:	1a9b      	subs	r3, r3, r2
   11714:	f003 0303 	and.w	r3, r3, #3
   11718:	2b01      	cmp	r3, #1
   1171a:	d105      	bne.n	11728 <mayfly_run+0xf8>
			m->_ack = ack;
   1171c:	7072      	strb	r2, [r6, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1171e:	4631      	mov	r1, r6
   11720:	9a03      	ldr	r2, [sp, #12]
   11722:	4650      	mov	r0, sl
   11724:	f00c ffae 	bl	1e684 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
   11728:	9a01      	ldr	r2, [sp, #4]
   1172a:	2330      	movs	r3, #48	; 0x30
   1172c:	fb03 2305 	mla	r3, r3, r5, r2
   11730:	eb09 0103 	add.w	r1, r9, r3
   11734:	aa07      	add	r2, sp, #28
   11736:	6849      	ldr	r1, [r1, #4]
   11738:	f859 0003 	ldr.w	r0, [r9, r3]
   1173c:	f00c ffa9 	bl	1e692 <memq_peek>
			if (state == 1) {
   11740:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   11742:	4682      	mov	sl, r0
			if (state == 1) {
   11744:	d1ba      	bne.n	116bc <mayfly_run+0x8c>
				if (caller_id || link) {
   11746:	b9c4      	cbnz	r4, 1177a <mayfly_run+0x14a>
   11748:	b9b8      	cbnz	r0, 1177a <mayfly_run+0x14a>
		if (mft[callee_id][caller_id].disable_req !=
   1174a:	2230      	movs	r2, #48	; 0x30
   1174c:	4911      	ldr	r1, [pc, #68]	; (11794 <mayfly_run+0x164>)
   1174e:	230c      	movs	r3, #12
   11750:	436a      	muls	r2, r5
   11752:	fb03 2204 	mla	r2, r3, r4, r2
   11756:	440a      	add	r2, r1
   11758:	7a91      	ldrb	r1, [r2, #10]
   1175a:	7ad0      	ldrb	r0, [r2, #11]
   1175c:	4288      	cmp	r0, r1
   1175e:	d113      	bne.n	11788 <mayfly_run+0x158>
		if (mft[callee_id][caller_id].enable_req !=
   11760:	2230      	movs	r2, #48	; 0x30
   11762:	436a      	muls	r2, r5
   11764:	fb03 2304 	mla	r3, r3, r4, r2
   11768:	445b      	add	r3, fp
   1176a:	7a1a      	ldrb	r2, [r3, #8]
   1176c:	7a59      	ldrb	r1, [r3, #9]
   1176e:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   11770:	bf1c      	itt	ne
   11772:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
   11774:	f04f 0801 	movne.w	r8, #1
   11778:	e776      	b.n	11668 <mayfly_run+0x38>
					mayfly_pend(callee_id, callee_id);
   1177a:	4629      	mov	r1, r5
   1177c:	4628      	mov	r0, r5
   1177e:	f003 ffc7 	bl	15710 <mayfly_pend>
	}
}
   11782:	b009      	add	sp, #36	; 0x24
   11784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   11788:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
   1178a:	2201      	movs	r2, #1
   1178c:	9200      	str	r2, [sp, #0]
   1178e:	e7e7      	b.n	11760 <mayfly_run+0x130>
   11790:	20002584 	.word	0x20002584
   11794:	20001068 	.word	0x20001068

00011798 <ticker_job>:
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
		  ticker_ticks_diff_get(cc, ctr));
}

void ticker_job(void *param)
{
   11798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
   1179c:	7fc2      	ldrb	r2, [r0, #31]
{
   1179e:	b093      	sub	sp, #76	; 0x4c
   117a0:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
   117a2:	2a00      	cmp	r2, #0
   117a4:	f040 83a5 	bne.w	11ef2 <ticker_job+0x75a>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
   117a8:	6943      	ldr	r3, [r0, #20]
   117aa:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1U;
   117ac:	2101      	movs	r1, #1

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   117ae:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
   117b0:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   117b2:	7ac0      	ldrb	r0, [r0, #11]
   117b4:	4298      	cmp	r0, r3
   117b6:	f000 8088 	beq.w	118ca <ticker_job+0x132>
		u8_t first;

		first = instance->ticks_elapsed_first + 1;
   117ba:	440b      	add	r3, r1
   117bc:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0U;
   117be:	2b02      	cmp	r3, #2
   117c0:	bf08      	it	eq
   117c2:	2300      	moveq	r3, #0
		}
		instance->ticks_elapsed_first = first;
   117c4:	f88b 300a 	strb.w	r3, [fp, #10]

		ticks_elapsed =
   117c8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
   117cc:	9102      	str	r1, [sp, #8]
		ticks_elapsed =
   117ce:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		instance->ticks_current += ticks_elapsed;
   117d2:	9b05      	ldr	r3, [sp, #20]
   117d4:	4453      	add	r3, sl
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   117d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   117da:	f8cb 3014 	str.w	r3, [fp, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
   117de:	f89b 301d 	ldrb.w	r3, [fp, #29]
   117e2:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
   117e4:	f8db 3000 	ldr.w	r3, [fp]
   117e8:	9303      	str	r3, [sp, #12]
	users = &instance->user[0];
   117ea:	f8db 3004 	ldr.w	r3, [fp, #4]
   117ee:	930b      	str	r3, [sp, #44]	; 0x2c
	pending = 0U;
   117f0:	2300      	movs	r3, #0
   117f2:	9306      	str	r3, [sp, #24]
	count_user = instance->count_user;
   117f4:	f89b 8009 	ldrb.w	r8, [fp, #9]
	insert_head = TICKER_NULL;
   117f8:	23ff      	movs	r3, #255	; 0xff
   117fa:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   117fc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   11800:	fa5f f883 	uxtb.w	r8, r3
   11804:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   11808:	d162      	bne.n	118d0 <ticker_job+0x138>

	/* Manage updates and deletions in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
   1180a:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   1180e:	9a04      	ldr	r2, [sp, #16]
   11810:	1a9b      	subs	r3, r3, r2
   11812:	bf18      	it	ne
   11814:	2301      	movne	r3, #1
   11816:	9303      	str	r3, [sp, #12]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
   11818:	9b02      	ldr	r3, [sp, #8]
   1181a:	b1db      	cbz	r3, 11854 <ticker_job+0xbc>
   1181c:	f8db 8000 	ldr.w	r8, [fp]
	if ((ticker->remainder_current < BIT(31)) &&
   11820:	f8df 93fc 	ldr.w	r9, [pc, #1020]	; 11c20 <ticker_job+0x488>
	ticks_expired = 0U;
   11824:	2700      	movs	r7, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   11826:	f89b 501d 	ldrb.w	r5, [fp, #29]
   1182a:	2dff      	cmp	r5, #255	; 0xff
   1182c:	d00b      	beq.n	11846 <ticker_job+0xae>
		ticker = &node[id_expired];
   1182e:	b22e      	sxth	r6, r5
   11830:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   11834:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   11838:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1183a:	4553      	cmp	r3, sl
   1183c:	f240 812f 	bls.w	11a9e <ticker_job+0x306>
			ticker->ticks_to_expire -= ticks_elapsed;
   11840:	eba3 030a 	sub.w	r3, r3, sl
   11844:	60a3      	str	r3, [r4, #8]
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1U;
   11846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1184a:	9904      	ldr	r1, [sp, #16]
   1184c:	42a9      	cmp	r1, r5
   1184e:	bf18      	it	ne
   11850:	4613      	movne	r3, r2
   11852:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
   11854:	f8db 3000 	ldr.w	r3, [fp]
   11858:	9307      	str	r3, [sp, #28]
	users = &instance->user[0];
   1185a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1185e:	9310      	str	r3, [sp, #64]	; 0x40
	count_user = instance->count_user;
   11860:	f89b 3009 	ldrb.w	r3, [fp, #9]
   11864:	9302      	str	r3, [sp, #8]
	while (count_user--) {
   11866:	9b02      	ldr	r3, [sp, #8]
   11868:	3b01      	subs	r3, #1
   1186a:	b2db      	uxtb	r3, r3
   1186c:	2bff      	cmp	r3, #255	; 0xff
   1186e:	9302      	str	r3, [sp, #8]
   11870:	f040 8166 	bne.w	11b40 <ticker_job+0x3a8>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1U;
   11874:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
	if (instance->ticker_id_head != ticker_id_old_head) {
   11878:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   1187c:	428b      	cmp	r3, r1
   1187e:	bf18      	it	ne
   11880:	2201      	movne	r2, #1
	}

	/* Processing any list inquiries */
	if (!pending) {
   11882:	9b06      	ldr	r3, [sp, #24]
		flag_compare_update = 1U;
   11884:	9203      	str	r2, [sp, #12]
	if (!pending) {
   11886:	2b00      	cmp	r3, #0
   11888:	f000 8299 	beq.w	11dbe <ticker_job+0x626>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0U;
   1188c:	2300      	movs	r3, #0
   1188e:	f88b 301e 	strb.w	r3, [fp, #30]

	/* update compare if head changed */
	if (flag_compare_update) {
   11892:	9b03      	ldr	r3, [sp, #12]
   11894:	b14b      	cbz	r3, 118aa <ticker_job+0x112>
	if (instance->ticker_id_head == TICKER_NULL) {
   11896:	f89b 301d 	ldrb.w	r3, [fp, #29]
   1189a:	2bff      	cmp	r3, #255	; 0xff
   1189c:	f040 82e9 	bne.w	11e72 <ticker_job+0x6da>
		if (cntr_stop() == 0) {
   118a0:	f003 fb24 	bl	14eec <cntr_stop>
   118a4:	b908      	cbnz	r0, 118aa <ticker_job+0x112>
			instance->ticks_slot_previous = 0U;
   118a6:	f8cb 0018 	str.w	r0, [fp, #24]
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
   118aa:	f89b 301f 	ldrb.w	r3, [fp, #31]
   118ae:	2b00      	cmp	r3, #0
   118b0:	f000 831f 	beq.w	11ef2 <ticker_job+0x75a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   118b4:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   118b8:	465b      	mov	r3, fp
   118ba:	2201      	movs	r2, #1
   118bc:	2103      	movs	r1, #3
   118be:	2004      	movs	r0, #4
   118c0:	46a4      	mov	ip, r4
				   instance);
	}

	DEBUG_TICKER_JOB(0);
}
   118c2:	b013      	add	sp, #76	; 0x4c
   118c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   118c8:	4760      	bx	ip
		flag_elapsed = 0U;
   118ca:	9202      	str	r2, [sp, #8]
		ticks_elapsed = 0U;
   118cc:	4692      	mov	sl, r2
   118ce:	e786      	b.n	117de <ticker_job+0x46>
		user = &users[count_user];
   118d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   118d2:	eb03 07c8 	add.w	r7, r3, r8, lsl #3
		user_ops = &user->user_op[0];
   118d6:	687b      	ldr	r3, [r7, #4]
   118d8:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
   118da:	78f9      	ldrb	r1, [r7, #3]
   118dc:	78be      	ldrb	r6, [r7, #2]
   118de:	428e      	cmp	r6, r1
   118e0:	d08c      	beq.n	117fc <ticker_job+0x64>
			user_op = &user_ops[user->middle];
   118e2:	9b07      	ldr	r3, [sp, #28]
			if (middle == user->count_user_op) {
   118e4:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
   118e6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   118ea:	0112      	lsls	r2, r2, #4
   118ec:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
   118ee:	1c73      	adds	r3, r6, #1
   118f0:	b2db      	uxtb	r3, r3
				middle = 0U;
   118f2:	4298      	cmp	r0, r3
   118f4:	bf08      	it	eq
   118f6:	2300      	moveq	r3, #0
			user->middle = middle;
   118f8:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   118fa:	9b07      	ldr	r3, [sp, #28]
   118fc:	5c9a      	ldrb	r2, [r3, r2]
   118fe:	2a03      	cmp	r2, #3
   11900:	d9ec      	bls.n	118dc <ticker_job+0x144>
			ticker = &node[user_op->id];
   11902:	7869      	ldrb	r1, [r5, #1]
   11904:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   11908:	930a      	str	r3, [sp, #40]	; 0x28
   1190a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1190c:	9b03      	ldr	r3, [sp, #12]
   1190e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   11912:	2a05      	cmp	r2, #5
			state = (ticker->req - ticker->ack) & 0xff;
   11914:	7863      	ldrb	r3, [r4, #1]
   11916:	78a0      	ldrb	r0, [r4, #2]
   11918:	eba3 0300 	sub.w	r3, r3, r0
   1191c:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   1191e:	d80e      	bhi.n	1193e <ticker_job+0x1a6>
   11920:	b16b      	cbz	r3, 1193e <ticker_job+0x1a6>
			    (state == 0) ||
   11922:	2a04      	cmp	r2, #4
   11924:	d110      	bne.n	11948 <ticker_job+0x1b0>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   11926:	686a      	ldr	r2, [r5, #4]
   11928:	b972      	cbnz	r2, 11948 <ticker_job+0x1b0>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   1192a:	68aa      	ldr	r2, [r5, #8]
   1192c:	b962      	cbnz	r2, 11948 <ticker_job+0x1b0>
			     (user_op->params.update.ticks_drift_minus == 0) &&
   1192e:	68ea      	ldr	r2, [r5, #12]
   11930:	b952      	cbnz	r2, 11948 <ticker_job+0x1b0>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   11932:	692a      	ldr	r2, [r5, #16]
   11934:	b942      	cbnz	r2, 11948 <ticker_job+0x1b0>
			     (user_op->params.update.lazy == 0) &&
   11936:	696a      	ldr	r2, [r5, #20]
   11938:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1193c:	d104      	bne.n	11948 <ticker_job+0x1b0>
				ticker_job_op_cb(user_op,
   1193e:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   11940:	4628      	mov	r0, r5
   11942:	f00c ff19 	bl	1e778 <ticker_job_op_cb>
   11946:	e7c8      	b.n	118da <ticker_job+0x142>
			if (state == 1) {
   11948:	2b01      	cmp	r3, #1
   1194a:	f040 809d 	bne.w	11a88 <ticker_job+0x2f0>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1194e:	4658      	mov	r0, fp
   11950:	f00c fec9 	bl	1e6e6 <ticker_dequeue>
   11954:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11956:	782b      	ldrb	r3, [r5, #0]
   11958:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1195a:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1195c:	f040 8086 	bne.w	11a6c <ticker_job+0x2d4>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   11960:	f8db 3014 	ldr.w	r3, [fp, #20]
   11964:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   11966:	f003 fad9 	bl	14f1c <cntr_cnt_get>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1196a:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   1196c:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1196e:	1ac3      	subs	r3, r0, r3
   11970:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11974:	4453      	add	r3, sl
	if (ticks_to_expire > ticks_elapsed) {
   11976:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11978:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1197a:	bf9e      	ittt	ls
   1197c:	6962      	ldrls	r2, [r4, #20]
   1197e:	1b92      	subls	r2, r2, r6
   11980:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
   11982:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   11984:	bf96      	itet	ls
   11986:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
   11988:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0U;
   1198a:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
   1198c:	2a00      	cmp	r2, #0
   1198e:	d049      	beq.n	11a24 <ticker_job+0x28c>
	    (user_op->params.update.lazy != 0)) {
   11990:	8aa9      	ldrh	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0) &&
   11992:	2900      	cmp	r1, #0
   11994:	d046      	beq.n	11a24 <ticker_job+0x28c>
		user_op->params.update.lazy--;
   11996:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   1199a:	fa1f fc8c 	uxth.w	ip, ip
   1199e:	f8a5 c014 	strh.w	ip, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   119a2:	429a      	cmp	r2, r3
   119a4:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   119a8:	d201      	bcs.n	119ae <ticker_job+0x216>
   119aa:	45f4      	cmp	ip, lr
   119ac:	d302      	bcc.n	119b4 <ticker_job+0x21c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   119ae:	f8df 9278 	ldr.w	r9, [pc, #632]	; 11c28 <ticker_job+0x490>
   119b2:	e031      	b.n	11a18 <ticker_job+0x280>
	if ((ticker->remainder_current >= BIT(31)) ||
   119b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   119b6:	4e9a      	ldr	r6, [pc, #616]	; (11c20 <ticker_job+0x488>)
   119b8:	489a      	ldr	r0, [pc, #616]	; (11c24 <ticker_job+0x48c>)
   119ba:	198e      	adds	r6, r1, r6
   119bc:	4286      	cmp	r6, r0
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   119be:	bf81      	itttt	hi
   119c0:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   119c4:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   119c8:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   119cc:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   119ce:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
		decrement++;
   119d2:	bf8c      	ite	hi
   119d4:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0U;
   119d8:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   119dc:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
   119de:	4491      	add	r9, r2
			ticker->lazy_current--;
   119e0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
   119e4:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   119e6:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
   119ea:	f8a4 e01e 	strh.w	lr, [r4, #30]
   119ee:	e7d8      	b.n	119a2 <ticker_job+0x20a>
	ticker->remainder_current += ticker->remainder_periodic;
   119f0:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
   119f4:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
   119f6:	498a      	ldr	r1, [pc, #552]	; (11c20 <ticker_job+0x488>)
   119f8:	488a      	ldr	r0, [pc, #552]	; (11c24 <ticker_job+0x48c>)
   119fa:	1871      	adds	r1, r6, r1
   119fc:	4281      	cmp	r1, r0
	return 0;
   119fe:	bf8e      	itee	hi
   11a00:	2100      	movhi	r1, #0
		return 1;
   11a02:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11a04:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
   11a06:	4411      	add	r1, r2
			ticker->lazy_current++;
   11a08:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
   11a0c:	bf8c      	ite	hi
   11a0e:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11a10:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
   11a12:	440b      	add	r3, r1
			ticker->lazy_current++;
   11a14:	f8a4 e01e 	strh.w	lr, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11a18:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
   11a1c:	45f4      	cmp	ip, lr
   11a1e:	d8e7      	bhi.n	119f0 <ticker_job+0x258>
		ticker->lazy_periodic = user_op->params.update.lazy;
   11a20:	f8a4 c01c 	strh.w	ip, [r4, #28]
	ticker->ticks_to_expire = ticks_to_expire +
   11a24:	686a      	ldr	r2, [r5, #4]
   11a26:	4413      	add	r3, r2
   11a28:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   11a2a:	68aa      	ldr	r2, [r5, #8]
   11a2c:	6963      	ldr	r3, [r4, #20]
   11a2e:	4413      	add	r3, r2
   11a30:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   11a32:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   11a36:	4620      	mov	r0, r4
   11a38:	f00c fe80 	bl	1e73c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   11a3c:	68ea      	ldr	r2, [r5, #12]
   11a3e:	69a3      	ldr	r3, [r4, #24]
   11a40:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   11a42:	692a      	ldr	r2, [r5, #16]
   11a44:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   11a46:	bf8c      	ite	hi
   11a48:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   11a4a:	2300      	movls	r3, #0
   11a4c:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
   11a4e:	7dab      	ldrb	r3, [r5, #22]
   11a50:	b103      	cbz	r3, 11a54 <ticker_job+0x2bc>
		ticker->force = user_op->params.update.force;
   11a52:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
   11a54:	9b03      	ldr	r3, [sp, #12]
   11a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11a58:	9901      	ldr	r1, [sp, #4]
   11a5a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
	*insert_head = user_op->id;
   11a5e:	786b      	ldrb	r3, [r5, #1]
   11a60:	9301      	str	r3, [sp, #4]
		ticker->req++;
   11a62:	7863      	ldrb	r3, [r4, #1]
   11a64:	3301      	adds	r3, #1
   11a66:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   11a68:	2100      	movs	r1, #0
   11a6a:	e769      	b.n	11940 <ticker_job+0x1a8>
		ticker->req = ticker->ack;
   11a6c:	78a3      	ldrb	r3, [r4, #2]
   11a6e:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   11a70:	786b      	ldrb	r3, [r5, #1]
   11a72:	f89b 201c 	ldrb.w	r2, [fp, #28]
   11a76:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11a78:	bf01      	itttt	eq
   11a7a:	23ff      	moveq	r3, #255	; 0xff
   11a7c:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
   11a80:	2300      	moveq	r3, #0
   11a82:	f8cb 3018 	streq.w	r3, [fp, #24]
   11a86:	e7ef      	b.n	11a68 <ticker_job+0x2d0>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   11a88:	2104      	movs	r1, #4
   11a8a:	465b      	mov	r3, fp
   11a8c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   11a90:	2201      	movs	r2, #1
   11a92:	4608      	mov	r0, r1
   11a94:	47a0      	blx	r4
				pending = 1U;
   11a96:	2301      	movs	r3, #1
				user->middle = prev;
   11a98:	70be      	strb	r6, [r7, #2]
				pending = 1U;
   11a9a:	9306      	str	r3, [sp, #24]
   11a9c:	e6ae      	b.n	117fc <ticker_job+0x64>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11a9e:	f8db 2018 	ldr.w	r2, [fp, #24]
   11aa2:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   11aa4:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
   11aa8:	441f      	add	r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11aaa:	bf29      	itett	cs
   11aac:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
   11aae:	1ad3      	subcc	r3, r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11ab0:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0U;
   11ab4:	2300      	movcs	r3, #0
   11ab6:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
   11aba:	69a3      	ldr	r3, [r4, #24]
   11abc:	b11b      	cbz	r3, 11ac6 <ticker_job+0x32e>
			instance->ticker_id_slot_previous = id_expired;
   11abe:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   11ac2:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0U;
   11ac6:	2200      	movs	r2, #0
   11ac8:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11aca:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   11ace:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
   11ad2:	f8d4 c004 	ldr.w	ip, [r4, #4]
   11ad6:	f1bc 0f00 	cmp.w	ip, #0
   11ada:	d02d      	beq.n	11b38 <ticker_job+0x3a0>
			while (count--) {
   11adc:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
   11ade:	f8df e144 	ldr.w	lr, [pc, #324]	; 11c24 <ticker_job+0x48c>
	ticker->remainder_current += ticker->remainder_periodic;
   11ae2:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   11ae6:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
   11ae8:	eb03 0109 	add.w	r1, r3, r9
   11aec:	4571      	cmp	r1, lr
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11aee:	bf9f      	itttt	ls
   11af0:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   11af4:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   11af8:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
   11afc:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
   11afe:	bf92      	itee	ls
   11b00:	9b02      	ldrls	r3, [sp, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   11b02:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
   11b04:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
   11b06:	4463      	add	r3, ip
			while (count--) {
   11b08:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
   11b0c:	441a      	add	r2, r3
			while (count--) {
   11b0e:	d2e8      	bcs.n	11ae2 <ticker_job+0x34a>
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11b10:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
   11b12:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11b14:	f8db 1014 	ldr.w	r1, [fp, #20]
   11b18:	19da      	adds	r2, r3, r7
   11b1a:	4620      	mov	r0, r4
   11b1c:	f00c fe0e 	bl	1e73c <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   11b20:	8ba3      	ldrh	r3, [r4, #28]
   11b22:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0U;
   11b24:	2300      	movs	r3, #0
   11b26:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
   11b28:	9b01      	ldr	r3, [sp, #4]
   11b2a:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
			ticker->req++;
   11b2e:	7863      	ldrb	r3, [r4, #1]
   11b30:	3301      	adds	r3, #1
   11b32:	7063      	strb	r3, [r4, #1]
			ticker->req = ticker->ack;
   11b34:	9501      	str	r5, [sp, #4]
   11b36:	e676      	b.n	11826 <ticker_job+0x8e>
   11b38:	78a3      	ldrb	r3, [r4, #2]
   11b3a:	7063      	strb	r3, [r4, #1]
   11b3c:	9d01      	ldr	r5, [sp, #4]
   11b3e:	e7f9      	b.n	11b34 <ticker_job+0x39c>
		user = &users[count_user];
   11b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b42:	9a02      	ldr	r2, [sp, #8]
   11b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11b48:	9305      	str	r3, [sp, #20]
		user_ops = (void *)&user->user_op[0];
   11b4a:	685b      	ldr	r3, [r3, #4]
   11b4c:	9309      	str	r3, [sp, #36]	; 0x24
		user_ops_first = user->first;
   11b4e:	9b05      	ldr	r3, [sp, #20]
   11b50:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   11b54:	9b01      	ldr	r3, [sp, #4]
   11b56:	2bff      	cmp	r3, #255	; 0xff
   11b58:	d041      	beq.n	11bde <ticker_job+0x446>
				ticker = &node[id_insert];
   11b5a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   11b5e:	9a07      	ldr	r2, [sp, #28]
				insert_head = ticker->next;
   11b60:	f8dd a004 	ldr.w	sl, [sp, #4]
				ticker = &node[id_insert];
   11b64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11b68:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				insert_head = ticker->next;
   11b6c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   11b70:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   11b72:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
   11b74:	f8db 3000 	ldr.w	r3, [fp]
   11b78:	930a      	str	r3, [sp, #40]	; 0x28
	ticker->next = TICKER_NULL;
   11b7a:	23ff      	movs	r3, #255	; 0xff
   11b7c:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   11b7e:	8ba2      	ldrh	r2, [r4, #28]
   11b80:	8be3      	ldrh	r3, [r4, #30]
   11b82:	4293      	cmp	r3, r2
   11b84:	d97e      	bls.n	11c84 <ticker_job+0x4ec>
		skip = ticker->lazy_current -
   11b86:	1a9b      	subs	r3, r3, r2
   11b88:	b29b      	uxth	r3, r3
		skip = 0U;
   11b8a:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_new = &node[id];
   11b8c:	fa0f f38a 	sxth.w	r3, sl
   11b90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11b94:	00db      	lsls	r3, r3, #3
   11b96:	9311      	str	r3, [sp, #68]	; 0x44
   11b98:	e0c6      	b.n	11d28 <ticker_job+0x590>
				user_op = &user_ops[user_ops_first];
   11b9a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   11b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11ba0:	011b      	lsls	r3, r3, #4
   11ba2:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
   11ba4:	f109 0201 	add.w	r2, r9, #1
   11ba8:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
   11bac:	9a05      	ldr	r2, [sp, #20]
   11bae:	7812      	ldrb	r2, [r2, #0]
					first = 0U;
   11bb0:	454a      	cmp	r2, r9
   11bb2:	bf08      	it	eq
   11bb4:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   11bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11bba:	5cd3      	ldrb	r3, [r2, r3]
   11bbc:	2b03      	cmp	r3, #3
   11bbe:	d10e      	bne.n	11bde <ticker_job+0x446>
				id_insert = user_op->id;
   11bc0:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   11bc4:	9b07      	ldr	r3, [sp, #28]
   11bc6:	eb0a 048a 	add.w	r4, sl, sl, lsl #2
   11bca:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   11bce:	7862      	ldrb	r2, [r4, #1]
   11bd0:	78a3      	ldrb	r3, [r4, #2]
   11bd2:	429a      	cmp	r2, r3
   11bd4:	d008      	beq.n	11be8 <ticker_job+0x450>
					ticker_job_op_cb(user_op,
   11bd6:	2101      	movs	r1, #1
   11bd8:	4628      	mov	r0, r5
   11bda:	f00c fdcd 	bl	1e778 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   11bde:	9b05      	ldr	r3, [sp, #20]
   11be0:	789b      	ldrb	r3, [r3, #2]
   11be2:	454b      	cmp	r3, r9
   11be4:	d1d9      	bne.n	11b9a <ticker_job+0x402>
   11be6:	e63e      	b.n	11866 <ticker_job+0xce>
	ticker->ticks_periodic = start->ticks_periodic;
   11be8:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
   11bea:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   11bee:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11bf0:	692b      	ldr	r3, [r5, #16]
   11bf2:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
   11bf4:	8aab      	ldrh	r3, [r5, #20]
   11bf6:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   11bf8:	69ab      	ldr	r3, [r5, #24]
   11bfa:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   11bfc:	69eb      	ldr	r3, [r5, #28]
   11bfe:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   11c00:	6a2b      	ldr	r3, [r5, #32]
   11c02:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   11c04:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
   11c06:	68ab      	ldr	r3, [r5, #8]
   11c08:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   11c0a:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11c0c:	686a      	ldr	r2, [r5, #4]
   11c0e:	4620      	mov	r0, r4
   11c10:	f00c fd94 	bl	1e73c <ticks_to_expire_prep>
	ticker->force = 1U;
   11c14:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
   11c16:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   11c18:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1U;
   11c1a:	70e3      	strb	r3, [r4, #3]
   11c1c:	e7aa      	b.n	11b74 <ticker_job+0x3dc>
   11c1e:	bf00      	nop
   11c20:	ff172b5a 	.word	0xff172b5a
   11c24:	7f172b59 	.word	0x7f172b59
   11c28:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
   11c2c:	6860      	ldr	r0, [r4, #4]
   11c2e:	2800      	cmp	r0, #0
   11c30:	f000 80c3 	beq.w	11dba <ticker_job+0x622>
	ticker->remainder_current += ticker->remainder_periodic;
   11c34:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   11c38:	4baf      	ldr	r3, [pc, #700]	; (11ef8 <ticker_job+0x760>)
	ticker->remainder_current += ticker->remainder_periodic;
   11c3a:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   11c3c:	49af      	ldr	r1, [pc, #700]	; (11efc <ticker_job+0x764>)
   11c3e:	18d3      	adds	r3, r2, r3
   11c40:	428b      	cmp	r3, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11c42:	bf9c      	itt	ls
   11c44:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   11c48:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11c4c:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   11c4e:	bf8b      	itete	hi
   11c50:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11c52:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
   11c56:	2200      	movhi	r2, #0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11c58:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11c5a:	4403      	add	r3, r0
		return 1;
   11c5c:	bf98      	it	ls
   11c5e:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11c60:	4413      	add	r3, r2
			ticker->lazy_current++;
   11c62:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
   11c64:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
   11c66:	3201      	adds	r2, #1
   11c68:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
   11c6a:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
   11c6c:	4293      	cmp	r3, r2
   11c6e:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
   11c72:	bf89      	itett	hi
   11c74:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
   11c76:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
   11c78:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0U;
   11c7a:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
   11c7c:	bf9c      	itt	ls
   11c7e:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0U;
   11c80:	60a1      	strls	r1, [r4, #8]
   11c82:	e051      	b.n	11d28 <ticker_job+0x590>
		skip = 0U;
   11c84:	2300      	movs	r3, #0
   11c86:	e780      	b.n	11b8a <ticker_job+0x3f2>
		if (ticker_current->ticks_slot != 0) {
   11c88:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
   11c8a:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
   11c8c:	b946      	cbnz	r6, 11ca0 <ticker_job+0x508>
			if (ticks_slot_previous > ticks_to_expire_current) {
   11c8e:	4560      	cmp	r0, ip
   11c90:	d201      	bcs.n	11c96 <ticker_job+0x4fe>
				ticks_slot_previous -= ticks_to_expire_current;
   11c92:	ebac 0600 	sub.w	r6, ip, r0
		current = ticker_current->next;
   11c96:	9308      	str	r3, [sp, #32]
   11c98:	46b4      	mov	ip, r6
   11c9a:	f812 303e 	ldrb.w	r3, [r2, lr, lsl #3]
   11c9e:	e050      	b.n	11d42 <ticker_job+0x5aa>
		if (ticker_current->ticks_slot != 0) {
   11ca0:	461f      	mov	r7, r3
   11ca2:	e7f8      	b.n	11c96 <ticker_job+0x4fe>
		ticker = &node[ticker_id_head];
   11ca4:	b230      	sxth	r0, r6
   11ca6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11caa:	900f      	str	r0, [sp, #60]	; 0x3c
   11cac:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   11cb0:	900d      	str	r0, [sp, #52]	; 0x34
		ticks_to_expire = ticker->ticks_to_expire;
   11cb2:	6880      	ldr	r0, [r0, #8]
   11cb4:	900e      	str	r0, [sp, #56]	; 0x38
		if (ticks_slot <= ticks_to_expire) {
   11cb6:	4570      	cmp	r0, lr
   11cb8:	d20a      	bcs.n	11cd0 <ticker_job+0x538>
		if (ticker->ticks_slot) {
   11cba:	980d      	ldr	r0, [sp, #52]	; 0x34
   11cbc:	6980      	ldr	r0, [r0, #24]
   11cbe:	2800      	cmp	r0, #0
   11cc0:	d150      	bne.n	11d64 <ticker_job+0x5cc>
		ticks_slot -= ticks_to_expire;
   11cc2:	980e      	ldr	r0, [sp, #56]	; 0x38
   11cc4:	ebae 0e00 	sub.w	lr, lr, r0
		ticker_id_head = ticker->next;
   11cc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11cca:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
   11cce:	e047      	b.n	11d60 <ticker_job+0x5c8>
			return TICKER_NULL;
   11cd0:	26ff      	movs	r6, #255	; 0xff
   11cd2:	e047      	b.n	11d64 <ticker_job+0x5cc>
	while (id_insert !=
   11cd4:	45ba      	cmp	sl, r7
   11cd6:	d065      	beq.n	11da4 <ticker_job+0x60c>
		if (id_collide != TICKER_NULL) {
   11cd8:	2fff      	cmp	r7, #255	; 0xff
   11cda:	d0a7      	beq.n	11c2c <ticker_job+0x494>
   11cdc:	463e      	mov	r6, r7
			struct ticker_node *ticker_collide = &node[id_collide];
   11cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ce0:	fa0f f886 	sxth.w	r8, r6
   11ce4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   11ce8:	eb03 07c8 	add.w	r7, r3, r8, lsl #3
			if (ticker_collide->lazy_current >
   11cec:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
   11cee:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
   11cf0:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
   11cf2:	bf88      	it	hi
   11cf4:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
   11cf6:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
   11cf8:	bf8c      	ite	hi
   11cfa:	b29b      	uxthhi	r3, r3
				skip_collide = 0U;
   11cfc:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
   11cfe:	2a00      	cmp	r2, #0
   11d00:	d094      	beq.n	11c2c <ticker_job+0x494>
   11d02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d04:	4293      	cmp	r3, r2
   11d06:	d891      	bhi.n	11c2c <ticker_job+0x494>
			    skip_collide <= skip &&
   11d08:	78fa      	ldrb	r2, [r7, #3]
   11d0a:	78e3      	ldrb	r3, [r4, #3]
   11d0c:	429a      	cmp	r2, r3
   11d0e:	d28d      	bcs.n	11c2c <ticker_job+0x494>
					ticker_dequeue(instance, id_collide);
   11d10:	4631      	mov	r1, r6
   11d12:	4658      	mov	r0, fp
   11d14:	f00c fce7 	bl	1e6e6 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
   11d18:	78bb      	ldrb	r3, [r7, #2]
   11d1a:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
   11d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d1e:	9a01      	ldr	r2, [sp, #4]
				ticker_collide->ticks_to_expire =
   11d20:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
   11d22:	f803 2038 	strb.w	r2, [r3, r8, lsl #3]
   11d26:	9601      	str	r6, [sp, #4]
	ticker_new = &node[id];
   11d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
   11d2a:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
   11d2e:	f8db c018 	ldr.w	ip, [fp, #24]
	ticker_new = &node[id];
   11d32:	eb02 0803 	add.w	r8, r2, r3
	current = instance->ticker_id_head;
   11d36:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
   11d3a:	f8d8 1008 	ldr.w	r1, [r8, #8]
	previous = current;
   11d3e:	9308      	str	r3, [sp, #32]
	collide = ticker_id_slot_previous = TICKER_NULL;
   11d40:	27ff      	movs	r7, #255	; 0xff
	while ((current != TICKER_NULL) &&
   11d42:	2bff      	cmp	r3, #255	; 0xff
   11d44:	d006      	beq.n	11d54 <ticker_job+0x5bc>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   11d46:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   11d4a:	eb02 06ce 	add.w	r6, r2, lr, lsl #3
		(ticks_to_expire_current =
   11d4e:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
   11d50:	4281      	cmp	r1, r0
   11d52:	d899      	bhi.n	11c88 <ticker_job+0x4f0>
				     ticks_to_expire + ticker_new->ticks_slot);
   11d54:	f8d8 0018 	ldr.w	r0, [r8, #24]
   11d58:	900c      	str	r0, [sp, #48]	; 0x30
	collide = ticker_by_slot_get(&node[0], current,
   11d5a:	eb01 0e00 	add.w	lr, r1, r0
   11d5e:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
   11d60:	2eff      	cmp	r6, #255	; 0xff
   11d62:	d19f      	bne.n	11ca4 <ticker_job+0x50c>
	if ((ticker_new->ticks_slot == 0) ||
   11d64:	980c      	ldr	r0, [sp, #48]	; 0x30
   11d66:	b120      	cbz	r0, 11d72 <ticker_job+0x5da>
   11d68:	4561      	cmp	r1, ip
   11d6a:	d3b3      	bcc.n	11cd4 <ticker_job+0x53c>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   11d6c:	2eff      	cmp	r6, #255	; 0xff
   11d6e:	f040 80bc 	bne.w	11eea <ticker_job+0x752>
		if (previous == current) {
   11d72:	9808      	ldr	r0, [sp, #32]
		ticker_new->ticks_to_expire = ticks_to_expire;
   11d74:	f8c8 1008 	str.w	r1, [r8, #8]
		if (previous == current) {
   11d78:	4283      	cmp	r3, r0
			node[previous].next = id;
   11d7a:	bf18      	it	ne
   11d7c:	f9bd 0020 	ldrshne.w	r0, [sp, #32]
		ticker_new->next = current;
   11d80:	f888 3000 	strb.w	r3, [r8]
			node[previous].next = id;
   11d84:	bf16      	itet	ne
   11d86:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
   11d8a:	f88b a01d 	strbeq.w	sl, [fp, #29]
			node[previous].next = id;
   11d8e:	f802 a030 	strbne.w	sl, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
   11d92:	2bff      	cmp	r3, #255	; 0xff
   11d94:	d006      	beq.n	11da4 <ticker_job+0x60c>
			node[current].ticks_to_expire -= ticks_to_expire;
   11d96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11d9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11d9e:	689a      	ldr	r2, [r3, #8]
   11da0:	1a51      	subs	r1, r2, r1
   11da2:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
   11da4:	78a3      	ldrb	r3, [r4, #2]
   11da6:	3301      	adds	r3, #1
   11da8:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   11daa:	2100      	movs	r1, #0
			if (user_op) {
   11dac:	2d00      	cmp	r5, #0
   11dae:	f43f aed1 	beq.w	11b54 <ticker_job+0x3bc>
				ticker_job_op_cb(user_op, status);
   11db2:	4628      	mov	r0, r5
   11db4:	f00c fce0 	bl	1e778 <ticker_job_op_cb>
   11db8:	e6cc      	b.n	11b54 <ticker_job+0x3bc>
			return TICKER_STATUS_FAILURE;
   11dba:	2101      	movs	r1, #1
   11dbc:	e7f6      	b.n	11dac <ticker_job+0x614>
	users = &instance->user[0];
   11dbe:	f8db 3004 	ldr.w	r3, [fp, #4]
   11dc2:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   11dc4:	f89b 4009 	ldrb.w	r4, [fp, #9]
		uop->status = TICKER_STATUS_SUCCESS;
   11dc8:	9b06      	ldr	r3, [sp, #24]
   11dca:	9302      	str	r3, [sp, #8]
	while (count_user--) {
   11dcc:	3c01      	subs	r4, #1
   11dce:	b2e4      	uxtb	r4, r4
   11dd0:	2cff      	cmp	r4, #255	; 0xff
   11dd2:	f43f ad5b 	beq.w	1188c <ticker_job+0xf4>
		user = &users[count_user];
   11dd6:	9b01      	ldr	r3, [sp, #4]
   11dd8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
   11ddc:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
   11dde:	786b      	ldrb	r3, [r5, #1]
   11de0:	78ea      	ldrb	r2, [r5, #3]
   11de2:	429a      	cmp	r2, r3
   11de4:	d0f2      	beq.n	11dcc <ticker_job+0x634>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   11de6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11dea:	011a      	lsls	r2, r3, #4
   11dec:	18b3      	adds	r3, r6, r2
	switch (uop->op) {
   11dee:	5cb2      	ldrb	r2, [r6, r2]
   11df0:	2a01      	cmp	r2, #1
   11df2:	d024      	beq.n	11e3e <ticker_job+0x6a6>
   11df4:	2a02      	cmp	r2, #2
   11df6:	d129      	bne.n	11e4c <ticker_job+0x6b4>
		ticker_by_next_slot_get(instance,
   11df8:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   11dfc:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   11e00:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->node;
   11e04:	f8db c000 	ldr.w	ip, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   11e08:	f8db 1014 	ldr.w	r1, [fp, #20]
   11e0c:	2aff      	cmp	r2, #255	; 0xff
   11e0e:	d002      	beq.n	11e16 <ticker_job+0x67e>
   11e10:	6807      	ldr	r7, [r0, #0]
   11e12:	428f      	cmp	r7, r1
   11e14:	d023      	beq.n	11e5e <ticker_job+0x6c6>
		_ticker_id_head = instance->ticker_id_head;
   11e16:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   11e1a:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   11e1c:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   11e1e:	2aff      	cmp	r2, #255	; 0xff
   11e20:	d009      	beq.n	11e36 <ticker_job+0x69e>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   11e22:	eb02 0882 	add.w	r8, r2, r2, lsl #2
   11e26:	eb0c 0ac8 	add.w	sl, ip, r8, lsl #3
   11e2a:	f8da 0008 	ldr.w	r0, [sl, #8]
   11e2e:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   11e30:	f8da 0018 	ldr.w	r0, [sl, #24]
   11e34:	b1d0      	cbz	r0, 11e6c <ticker_job+0x6d4>
	*ticker_id_head = _ticker_id_head;
   11e36:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   11e3a:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   11e3e:	9a02      	ldr	r2, [sp, #8]
   11e40:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
   11e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
   11e44:	b112      	cbz	r2, 11e4c <ticker_job+0x6b4>
		fp_op_func(uop->status, uop->op_context);
   11e46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   11e48:	2000      	movs	r0, #0
   11e4a:	4790      	blx	r2
			first = user->first + 1;
   11e4c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
   11e4e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
   11e50:	3301      	adds	r3, #1
   11e52:	b2db      	uxtb	r3, r3
				first = 0U;
   11e54:	429a      	cmp	r2, r3
   11e56:	bf08      	it	eq
   11e58:	2300      	moveq	r3, #0
			user->first = first;
   11e5a:	706b      	strb	r3, [r5, #1]
   11e5c:	e7bf      	b.n	11dde <ticker_job+0x646>
		ticker = &node[_ticker_id_head];
   11e5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
   11e62:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   11e66:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
   11e6a:	e7d8      	b.n	11e1e <ticker_job+0x686>
		_ticker_id_head = ticker->next;
   11e6c:	f81c 2038 	ldrb.w	r2, [ip, r8, lsl #3]
   11e70:	e7d5      	b.n	11e1e <ticker_job+0x686>
	if (ticker_id_old_head == TICKER_NULL) {
   11e72:	9b04      	ldr	r3, [sp, #16]
   11e74:	2bff      	cmp	r3, #255	; 0xff
   11e76:	d107      	bne.n	11e88 <ticker_job+0x6f0>
		ticks_current = cntr_cnt_get();
   11e78:	f003 f850 	bl	14f1c <cntr_cnt_get>
   11e7c:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11e7e:	f003 f827 	bl	14ed0 <cntr_start>
   11e82:	b908      	cbnz	r0, 11e88 <ticker_job+0x6f0>
			instance->ticks_current = ticks_current;
   11e84:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
   11e88:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   11e8c:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
   11e90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
   11e94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11e98:	260a      	movs	r6, #10
   11e9a:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
   11e9c:	f003 f83e 	bl	14f1c <cntr_cnt_get>
		cc = instance->ticks_current;
   11ea0:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11ea4:	1b03      	subs	r3, r0, r4
   11ea6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   11eaa:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   11eac:	42ab      	cmp	r3, r5
   11eae:	bf2c      	ite	cs
   11eb0:	18e4      	addcs	r4, r4, r3
   11eb2:	1964      	addcc	r4, r4, r5
		cc &= HAL_TICKER_CNTR_MASK;
   11eb4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   11eb8:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
   11eba:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   11ebe:	4620      	mov	r0, r4
   11ec0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   11ec2:	f003 f82b 	bl	14f1c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11ec6:	1bc0      	subs	r0, r0, r7
   11ec8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11ecc:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   11ece:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11ed0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   11ed4:	42a0      	cmp	r0, r4
   11ed6:	f67f ace8 	bls.w	118aa <ticker_job+0x112>
		LL_ASSERT(i);
   11eda:	3e01      	subs	r6, #1
   11edc:	d1de      	bne.n	11e9c <ticker_job+0x704>
   11ede:	4040      	eors	r0, r0
   11ee0:	f380 8811 	msr	BASEPRI, r0
   11ee4:	f04f 0004 	mov.w	r0, #4
   11ee8:	df02      	svc	2
	while (id_insert !=
   11eea:	45b2      	cmp	sl, r6
   11eec:	f47f aef7 	bne.w	11cde <ticker_job+0x546>
   11ef0:	e758      	b.n	11da4 <ticker_job+0x60c>
}
   11ef2:	b013      	add	sp, #76	; 0x4c
   11ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ef8:	ff172b5a 	.word	0xff172b5a
   11efc:	7f172b59 	.word	0x7f172b59

00011f00 <ticker_init>:
{
   11f00:	b570      	push	{r4, r5, r6, lr}
   11f02:	9d04      	ldr	r5, [sp, #16]
   11f04:	f89d 4014 	ldrb.w	r4, [sp, #20]
   11f08:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   11f0a:	b108      	cbz	r0, 11f10 <ticker_init+0x10>
		return TICKER_STATUS_FAILURE;
   11f0c:	2001      	movs	r0, #1
}
   11f0e:	bd70      	pop	{r4, r5, r6, pc}
	instance->count_node = count_node;
   11f10:	4813      	ldr	r0, [pc, #76]	; (11f60 <ticker_init+0x60>)
	instance->node = node;
   11f12:	6002      	str	r2, [r0, #0]
	instance->count_node = count_node;
   11f14:	7201      	strb	r1, [r0, #8]
	instance->count_user = count_user;
   11f16:	7243      	strb	r3, [r0, #9]
	instance->user = user;
   11f18:	6045      	str	r5, [r0, #4]
	while (count_user--) {
   11f1a:	4602      	mov	r2, r0
   11f1c:	3b01      	subs	r3, #1
   11f1e:	b2db      	uxtb	r3, r3
   11f20:	2bff      	cmp	r3, #255	; 0xff
   11f22:	d10f      	bne.n	11f44 <ticker_init+0x44>
	if (count_op) {
   11f24:	2c00      	cmp	r4, #0
   11f26:	d1f1      	bne.n	11f0c <ticker_init+0xc>
	instance->caller_id_get_cb = caller_id_get_cb;
   11f28:	9b07      	ldr	r3, [sp, #28]
   11f2a:	6213      	str	r3, [r2, #32]
	instance->sched_cb = sched_cb;
   11f2c:	9b08      	ldr	r3, [sp, #32]
   11f2e:	6253      	str	r3, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   11f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f32:	6293      	str	r3, [r2, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   11f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   11f38:	e9c2 4405 	strd	r4, r4, [r2, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   11f3c:	8393      	strh	r3, [r2, #28]
	instance->ticks_elapsed_first = 0U;
   11f3e:	8154      	strh	r4, [r2, #10]
	return TICKER_STATUS_SUCCESS;
   11f40:	4620      	mov	r0, r4
   11f42:	e7e4      	b.n	11f0e <ticker_init+0xe>
		users[count_user].user_op = user_op_;
   11f44:	b219      	sxth	r1, r3
   11f46:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   11f4a:	6046      	str	r6, [r0, #4]
		user_op_ += users[count_user].count_user_op;
   11f4c:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   11f50:	eb00 0140 	add.w	r1, r0, r0, lsl #1
		count_op -= users[count_user].count_user_op;
   11f54:	1a20      	subs	r0, r4, r0
		user_op_ += users[count_user].count_user_op;
   11f56:	eb06 1601 	add.w	r6, r6, r1, lsl #4
		count_op -= users[count_user].count_user_op;
   11f5a:	b2c4      	uxtb	r4, r0
   11f5c:	e7de      	b.n	11f1c <ticker_init+0x1c>
   11f5e:	bf00      	nop
   11f60:	20001128 	.word	0x20001128

00011f64 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   11f64:	4a04      	ldr	r2, [pc, #16]	; (11f78 <ticker_is_initialized+0x14>)
   11f66:	232c      	movs	r3, #44	; 0x2c
   11f68:	fb03 2000 	mla	r0, r3, r0, r2
   11f6c:	7a00      	ldrb	r0, [r0, #8]
}
   11f6e:	3000      	adds	r0, #0
   11f70:	bf18      	it	ne
   11f72:	2001      	movne	r0, #1
   11f74:	4770      	bx	lr
   11f76:	bf00      	nop
   11f78:	20001128 	.word	0x20001128

00011f7c <ticker_trigger>:
	if (instance->sched_cb) {
   11f7c:	4a07      	ldr	r2, [pc, #28]	; (11f9c <ticker_trigger+0x20>)
   11f7e:	232c      	movs	r3, #44	; 0x2c
   11f80:	fb03 2100 	mla	r1, r3, r0, r2
{
   11f84:	b410      	push	{r4}
	if (instance->sched_cb) {
   11f86:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   11f88:	b134      	cbz	r4, 11f98 <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11f8a:	460b      	mov	r3, r1
   11f8c:	46a4      	mov	ip, r4
   11f8e:	2201      	movs	r2, #1
   11f90:	2103      	movs	r1, #3
   11f92:	2002      	movs	r0, #2
}
   11f94:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11f96:	4760      	bx	ip
}
   11f98:	bc10      	pop	{r4}
   11f9a:	4770      	bx	lr
   11f9c:	20001128 	.word	0x20001128

00011fa0 <ticker_start>:
{
   11fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11fa4:	4c22      	ldr	r4, [pc, #136]	; (12030 <ticker_start+0x90>)
   11fa6:	272c      	movs	r7, #44	; 0x2c
   11fa8:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   11fac:	b20d      	sxth	r5, r1
   11fae:	f8d8 0004 	ldr.w	r0, [r8, #4]
   11fb2:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   11fb6:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   11fba:	f89c 4003 	ldrb.w	r4, [ip, #3]
   11fbe:	1c66      	adds	r6, r4, #1
   11fc0:	b2f6      	uxtb	r6, r6
		last = 0U;
   11fc2:	42b0      	cmp	r0, r6
   11fc4:	bf98      	it	ls
   11fc6:	2600      	movls	r6, #0
	if (last == user->first) {
   11fc8:	f89c 0001 	ldrb.w	r0, [ip, #1]
   11fcc:	42b0      	cmp	r0, r6
   11fce:	d02d      	beq.n	1202c <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
   11fd0:	f8dc 0004 	ldr.w	r0, [ip, #4]
   11fd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   11fd8:	0125      	lsls	r5, r4, #4
   11fda:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
   11fdc:	f04f 0e03 	mov.w	lr, #3
   11fe0:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
   11fe4:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   11fe6:	9b06      	ldr	r3, [sp, #24]
   11fe8:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   11fea:	9b07      	ldr	r3, [sp, #28]
   11fec:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   11fee:	9b08      	ldr	r3, [sp, #32]
   11ff0:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   11ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ff4:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   11ff6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   11ffa:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   11ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ffe:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   12000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12002:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   12004:	2302      	movs	r3, #2
   12006:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   12008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1200a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   1200c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   1200e:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   12010:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   12012:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12016:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   1201a:	4608      	mov	r0, r1
   1201c:	4798      	blx	r3
   1201e:	4643      	mov	r3, r8
   12020:	2200      	movs	r2, #0
   12022:	2104      	movs	r1, #4
   12024:	47a8      	blx	r5
	return user_op->status;
   12026:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   12028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1202c:	2001      	movs	r0, #1
   1202e:	e7fb      	b.n	12028 <ticker_start+0x88>
   12030:	20001128 	.word	0x20001128

00012034 <ticker_update>:
{
   12034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12038:	4c21      	ldr	r4, [pc, #132]	; (120c0 <ticker_update+0x8c>)
   1203a:	272c      	movs	r7, #44	; 0x2c
   1203c:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->user[user_id];
   12040:	b20d      	sxth	r5, r1
   12042:	f8d9 0004 	ldr.w	r0, [r9, #4]
   12046:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   1204a:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   1204e:	f89c 4003 	ldrb.w	r4, [ip, #3]
   12052:	1c66      	adds	r6, r4, #1
   12054:	b2f6      	uxtb	r6, r6
		last = 0U;
   12056:	42b0      	cmp	r0, r6
   12058:	bf98      	it	ls
   1205a:	2600      	movls	r6, #0
	if (last == user->first) {
   1205c:	f89c 0001 	ldrb.w	r0, [ip, #1]
   12060:	42b0      	cmp	r0, r6
   12062:	d02a      	beq.n	120ba <ticker_update+0x86>
	user_op = &user->user_op[user->last];
   12064:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12068:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1206c:	0125      	lsls	r5, r4, #4
   1206e:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   12070:	f04f 0804 	mov.w	r8, #4
   12074:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   12078:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1207a:	9b08      	ldr	r3, [sp, #32]
   1207c:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1207e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12080:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   12082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12084:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   12086:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1208a:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   1208c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12090:	75a3      	strb	r3, [r4, #22]
	user_op->status = TICKER_STATUS_BUSY;
   12092:	2302      	movs	r3, #2
   12094:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   12096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12098:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
   1209a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   1209c:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   1209e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
   120a0:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   120a4:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   120a8:	4608      	mov	r0, r1
   120aa:	4798      	blx	r3
   120ac:	464b      	mov	r3, r9
   120ae:	2200      	movs	r2, #0
   120b0:	4641      	mov	r1, r8
   120b2:	47a8      	blx	r5
	return user_op->status;
   120b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
   120b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   120ba:	2001      	movs	r0, #1
   120bc:	e7fb      	b.n	120b6 <ticker_update+0x82>
   120be:	bf00      	nop
   120c0:	20001128 	.word	0x20001128

000120c4 <ticker_stop>:
{
   120c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   120c8:	4c1a      	ldr	r4, [pc, #104]	; (12134 <ticker_stop+0x70>)
   120ca:	262c      	movs	r6, #44	; 0x2c
   120cc:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   120d0:	b20f      	sxth	r7, r1
   120d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   120d6:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   120da:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   120de:	f89c 4003 	ldrb.w	r4, [ip, #3]
   120e2:	1c65      	adds	r5, r4, #1
   120e4:	b2ed      	uxtb	r5, r5
		last = 0U;
   120e6:	42a8      	cmp	r0, r5
   120e8:	bf98      	it	ls
   120ea:	2500      	movls	r5, #0
	if (last == user->first) {
   120ec:	f89c 0001 	ldrb.w	r0, [ip, #1]
   120f0:	42a8      	cmp	r0, r5
   120f2:	d01c      	beq.n	1212e <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
   120f4:	f8dc 0004 	ldr.w	r0, [ip, #4]
   120f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   120fc:	0124      	lsls	r4, r4, #4
   120fe:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   12100:	f04f 0e05 	mov.w	lr, #5
   12104:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
   12108:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1210a:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   1210c:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   12110:	9b06      	ldr	r3, [sp, #24]
   12112:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   12114:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12118:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   1211c:	4608      	mov	r0, r1
   1211e:	4798      	blx	r3
   12120:	4643      	mov	r3, r8
   12122:	2200      	movs	r2, #0
   12124:	2104      	movs	r1, #4
   12126:	47a0      	blx	r4
	return user_op->status;
   12128:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   1212a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1212e:	2001      	movs	r0, #1
   12130:	e7fb      	b.n	1212a <ticker_stop+0x66>
   12132:	bf00      	nop
   12134:	20001128 	.word	0x20001128

00012138 <ticker_next_slot_get>:
{
   12138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1213c:	4c1c      	ldr	r4, [pc, #112]	; (121b0 <ticker_next_slot_get+0x78>)
   1213e:	272c      	movs	r7, #44	; 0x2c
   12140:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
   12144:	b20d      	sxth	r5, r1
   12146:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1214a:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
   1214e:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
   12152:	f89c 4003 	ldrb.w	r4, [ip, #3]
   12156:	1c66      	adds	r6, r4, #1
   12158:	b2f6      	uxtb	r6, r6
		last = 0U;
   1215a:	42b0      	cmp	r0, r6
   1215c:	bf98      	it	ls
   1215e:	2600      	movls	r6, #0
	if (last == user->first) {
   12160:	f89c 0001 	ldrb.w	r0, [ip, #1]
   12164:	42b0      	cmp	r0, r6
   12166:	d020      	beq.n	121aa <ticker_next_slot_get+0x72>
	user_op = &user->user_op[user->last];
   12168:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1216c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   12170:	0124      	lsls	r4, r4, #4
   12172:	1905      	adds	r5, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   12174:	f64f 7e02 	movw	lr, #65282	; 0xff02
   12178:	f820 e004 	strh.w	lr, [r0, r4]
	user_op->params.slot_get.ticks_current = ticks_current;
   1217c:	e9c5 2301 	strd	r2, r3, [r5, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   12180:	9b06      	ldr	r3, [sp, #24]
   12182:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   12184:	2302      	movs	r3, #2
   12186:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
   12188:	9b07      	ldr	r3, [sp, #28]
   1218a:	62ab      	str	r3, [r5, #40]	; 0x28
	user_op->op_context = op_context;
   1218c:	9b08      	ldr	r3, [sp, #32]
   1218e:	62eb      	str	r3, [r5, #44]	; 0x2c
	user->last = last;
   12190:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12194:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   12198:	4608      	mov	r0, r1
   1219a:	4798      	blx	r3
   1219c:	4643      	mov	r3, r8
   1219e:	2200      	movs	r2, #0
   121a0:	2104      	movs	r1, #4
   121a2:	47a0      	blx	r4
	return user_op->status;
   121a4:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   121a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   121aa:	2001      	movs	r0, #1
   121ac:	e7fb      	b.n	121a6 <ticker_next_slot_get+0x6e>
   121ae:	bf00      	nop
   121b0:	20001128 	.word	0x20001128

000121b4 <ticker_job_idle_get>:
{
   121b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   121b8:	4c19      	ldr	r4, [pc, #100]	; (12220 <ticker_job_idle_get+0x6c>)
   121ba:	262c      	movs	r6, #44	; 0x2c
   121bc:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
   121c0:	b20f      	sxth	r7, r1
   121c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   121c6:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
   121ca:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
   121ce:	f89c 4003 	ldrb.w	r4, [ip, #3]
   121d2:	1c65      	adds	r5, r4, #1
   121d4:	b2ed      	uxtb	r5, r5
		last = 0U;
   121d6:	42a8      	cmp	r0, r5
   121d8:	bf98      	it	ls
   121da:	2500      	movls	r5, #0
	if (last == user->first) {
   121dc:	f89c 0001 	ldrb.w	r0, [ip, #1]
   121e0:	42a8      	cmp	r0, r5
   121e2:	d01a      	beq.n	1221a <ticker_job_idle_get+0x66>
	user_op = &user->user_op[user->last];
   121e4:	f8dc 0004 	ldr.w	r0, [ip, #4]
   121e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   121ec:	0124      	lsls	r4, r4, #4
   121ee:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   121f0:	f64f 7e01 	movw	lr, #65281	; 0xff01
   121f4:	f820 e004 	strh.w	lr, [r0, r4]
	user_op->status = TICKER_STATUS_BUSY;
   121f8:	2002      	movs	r0, #2
	user_op->fp_op_func = fp_op_func;
   121fa:	e9c7 0209 	strd	r0, r2, [r7, #36]	; 0x24
	user_op->op_context = op_context;
   121fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
   12200:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12204:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   12208:	4608      	mov	r0, r1
   1220a:	4798      	blx	r3
   1220c:	4643      	mov	r3, r8
   1220e:	2200      	movs	r2, #0
   12210:	2104      	movs	r1, #4
   12212:	47a0      	blx	r4
	return user_op->status;
   12214:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
   12216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1221a:	2001      	movs	r0, #1
   1221c:	e7fb      	b.n	12216 <ticker_job_idle_get+0x62>
   1221e:	bf00      	nop
   12220:	20001128 	.word	0x20001128

00012224 <ticker_job_sched>:
{
   12224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12228:	4c08      	ldr	r4, [pc, #32]	; (1224c <ticker_job_sched+0x28>)
   1222a:	252c      	movs	r5, #44	; 0x2c
   1222c:	fb05 4300 	mla	r3, r5, r0, r4
   12230:	e9d3 3708 	ldrd	r3, r7, [r3, #32]
{
   12234:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12236:	4608      	mov	r0, r1
   12238:	4798      	blx	r3
   1223a:	fb06 4305 	mla	r3, r6, r5, r4
   1223e:	46bc      	mov	ip, r7
   12240:	2200      	movs	r2, #0
   12242:	2104      	movs	r1, #4
}
   12244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12248:	4760      	bx	ip
   1224a:	bf00      	nop
   1224c:	20001128 	.word	0x20001128

00012250 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   12250:	b508      	push	{r3, lr}
   12252:	4603      	mov	r3, r0
	if (addr_type > 1) {
   12254:	2b01      	cmp	r3, #1
{
   12256:	4608      	mov	r0, r1
	if (addr_type > 1) {
   12258:	d80e      	bhi.n	12278 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
   1225a:	b133      	cbz	r3, 1226a <ll_addr_get+0x1a>
		if (bdaddr) {
   1225c:	b119      	cbz	r1, 12266 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   1225e:	2206      	movs	r2, #6
   12260:	4906      	ldr	r1, [pc, #24]	; (1227c <ll_addr_get+0x2c>)
   12262:	f007 ff21 	bl	1a0a8 <memcpy>
		}

		return rnd_addr;
   12266:	4805      	ldr	r0, [pc, #20]	; (1227c <ll_addr_get+0x2c>)
   12268:	e007      	b.n	1227a <ll_addr_get+0x2a>
	}

	if (bdaddr) {
   1226a:	b119      	cbz	r1, 12274 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   1226c:	2206      	movs	r2, #6
   1226e:	4904      	ldr	r1, [pc, #16]	; (12280 <ll_addr_get+0x30>)
   12270:	f007 ff1a 	bl	1a0a8 <memcpy>
	}

	return pub_addr;
   12274:	4802      	ldr	r0, [pc, #8]	; (12280 <ll_addr_get+0x30>)
   12276:	e000      	b.n	1227a <ll_addr_get+0x2a>
		return NULL;
   12278:	2000      	movs	r0, #0
}
   1227a:	bd08      	pop	{r3, pc}
   1227c:	2000258e 	.word	0x2000258e
   12280:	20002588 	.word	0x20002588

00012284 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   12284:	b570      	push	{r4, r5, r6, lr}
   12286:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
   12288:	2000      	movs	r0, #0
{
   1228a:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
   1228c:	f002 f9a8 	bl	145e0 <ll_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
   12290:	b110      	cbz	r0, 12298 <ll_addr_set+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12292:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   12294:	4620      	mov	r0, r4
   12296:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   12298:	f002 f9b8 	bl	1460c <ll_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   1229c:	f010 0406 	ands.w	r4, r0, #6
   122a0:	d1f7      	bne.n	12292 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   122a2:	2206      	movs	r2, #6
   122a4:	4629      	mov	r1, r5
	if (addr_type) {
   122a6:	b11e      	cbz	r6, 122b0 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   122a8:	4802      	ldr	r0, [pc, #8]	; (122b4 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   122aa:	f007 fefd 	bl	1a0a8 <memcpy>
   122ae:	e7f1      	b.n	12294 <ll_addr_set+0x10>
   122b0:	4801      	ldr	r0, [pc, #4]	; (122b8 <ll_addr_set+0x34>)
   122b2:	e7fa      	b.n	122aa <ll_addr_set+0x26>
   122b4:	2000258e 	.word	0x2000258e
   122b8:	20002588 	.word	0x20002588

000122bc <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
   122bc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   122be:	4802      	ldr	r0, [pc, #8]	; (122c8 <_hci_driver_init+0xc>)
   122c0:	f7f7 fb8e 	bl	99e0 <bt_hci_driver_register>

	return 0;
}
   122c4:	2000      	movs	r0, #0
   122c6:	bd08      	pop	{r3, pc}
   122c8:	00020b3c 	.word	0x00020b3c

000122cc <hci_driver_send>:
	if (!buf->len) {
   122cc:	8983      	ldrh	r3, [r0, #12]
{
   122ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   122d0:	4605      	mov	r5, r0
	if (!buf->len) {
   122d2:	b313      	cbz	r3, 1231a <hci_driver_send+0x4e>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
   122d4:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   122d6:	b18b      	cbz	r3, 122fc <hci_driver_send+0x30>
   122d8:	2b02      	cmp	r3, #2
   122da:	d11e      	bne.n	1231a <hci_driver_send+0x4e>
	err = hci_acl_handle(buf, &evt);
   122dc:	a901      	add	r1, sp, #4
   122de:	f000 fcb1 	bl	12c44 <hci_acl_handle>
   122e2:	4604      	mov	r4, r0
	if (evt) {
   122e4:	9801      	ldr	r0, [sp, #4]
   122e6:	b108      	cbz	r0, 122ec <hci_driver_send+0x20>
		bt_recv_prio(evt);
   122e8:	f7f7 fb54 	bl	9994 <bt_recv_prio>
	if (!err) {
   122ec:	b91c      	cbnz	r4, 122f6 <hci_driver_send+0x2a>
		net_buf_unref(buf);
   122ee:	4628      	mov	r0, r5
   122f0:	f003 fb08 	bl	15904 <net_buf_unref>
   122f4:	2400      	movs	r4, #0
}
   122f6:	4620      	mov	r0, r4
   122f8:	b003      	add	sp, #12
   122fa:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, &node_rx);
   122fc:	a901      	add	r1, sp, #4
	void *node_rx = NULL;
   122fe:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, &node_rx);
   12300:	f000 f936 	bl	12570 <hci_cmd_handle>
	if (evt) {
   12304:	2800      	cmp	r0, #0
   12306:	d0f2      	beq.n	122ee <hci_driver_send+0x22>
		bt_recv_prio(evt);
   12308:	f7f7 fb44 	bl	9994 <bt_recv_prio>
		if (node_rx) {
   1230c:	9901      	ldr	r1, [sp, #4]
   1230e:	2900      	cmp	r1, #0
   12310:	d0ed      	beq.n	122ee <hci_driver_send+0x22>
			k_fifo_put(&recv_fifo, node_rx);
   12312:	4803      	ldr	r0, [pc, #12]	; (12320 <hci_driver_send+0x54>)
   12314:	f00d f9f4 	bl	1f700 <k_queue_append>
	if (!err) {
   12318:	e7e9      	b.n	122ee <hci_driver_send+0x22>
		return -EINVAL;
   1231a:	f06f 0415 	mvn.w	r4, #21
   1231e:	e7ea      	b.n	122f6 <hci_driver_send+0x2a>
   12320:	2000946c 	.word	0x2000946c

00012324 <recv_thread>:
{
   12324:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   12326:	4d23      	ldr	r5, [pc, #140]	; (123b4 <recv_thread+0x90>)
		radio_rx_fc_set(node_rx->hdr.handle, 0);
   12328:	2600      	movs	r6, #0
   1232a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1232e:	4628      	mov	r0, r5
   12330:	f00d fa0d 	bl	1f74e <z_impl_k_queue_get>
		if (node_rx && !buf) {
   12334:	4604      	mov	r4, r0
   12336:	b360      	cbz	r0, 12392 <recv_thread+0x6e>
	s8_t class = hci_get_class(node_rx);
   12338:	f00c faf1 	bl	1e91e <hci_get_class>
	switch (class) {
   1233c:	1e03      	subs	r3, r0, #0
   1233e:	9401      	str	r4, [sp, #4]
   12340:	db03      	blt.n	1234a <recv_thread+0x26>
   12342:	2b02      	cmp	r3, #2
   12344:	dd07      	ble.n	12356 <recv_thread+0x32>
   12346:	2b03      	cmp	r3, #3
   12348:	d026      	beq.n	12398 <recv_thread+0x74>
		LL_ASSERT(0);
   1234a:	4040      	eors	r0, r0
   1234c:	f380 8811 	msr	BASEPRI, r0
   12350:	f04f 0004 	mov.w	r0, #4
   12354:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   12356:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
   12358:	bf0e      	itee	eq
   1235a:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1235c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   12360:	2001      	movne	r0, #1
   12362:	f7f7 fe1d 	bl	9fa0 <bt_buf_get_rx>
   12366:	4604      	mov	r4, r0
		if (buf) {
   12368:	b118      	cbz	r0, 12372 <recv_thread+0x4e>
			hci_evt_encode(node_rx, buf);
   1236a:	4601      	mov	r1, r0
   1236c:	9801      	ldr	r0, [sp, #4]
   1236e:	f000 fcc5 	bl	12cfc <hci_evt_encode>
		radio_rx_fc_set(node_rx->hdr.handle, 0);
   12372:	9b01      	ldr	r3, [sp, #4]
   12374:	2100      	movs	r1, #0
   12376:	88d8      	ldrh	r0, [r3, #6]
   12378:	f002 f9d2 	bl	14720 <radio_rx_fc_set>
	node_rx->hdr.next = NULL;
   1237c:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   1237e:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   12380:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   12382:	f002 f99b 	bl	146bc <ll_rx_mem_release>
		if (buf) {
   12386:	b124      	cbz	r4, 12392 <recv_thread+0x6e>
			if (buf->len) {
   12388:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   1238a:	4620      	mov	r0, r4
			if (buf->len) {
   1238c:	b173      	cbz	r3, 123ac <recv_thread+0x88>
				bt_recv(buf);
   1238e:	f7f7 fab1 	bl	98f4 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   12392:	f004 fcab 	bl	16cec <z_impl_k_yield>
   12396:	e7c8      	b.n	1232a <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   12398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1239c:	f7f7 fe00 	bl	9fa0 <bt_buf_get_rx>
   123a0:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   123a2:	4601      	mov	r1, r0
   123a4:	9801      	ldr	r0, [sp, #4]
   123a6:	f00c fa7b 	bl	1e8a0 <hci_acl_encode>
		break;
   123aa:	e7e2      	b.n	12372 <recv_thread+0x4e>
				net_buf_unref(buf);
   123ac:	f003 faaa 	bl	15904 <net_buf_unref>
   123b0:	e7ef      	b.n	12392 <recv_thread+0x6e>
   123b2:	bf00      	nop
   123b4:	2000946c 	.word	0x2000946c

000123b8 <prio_recv_thread>:
{
   123b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   123ba:	4d14      	ldr	r5, [pc, #80]	; (1240c <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
   123bc:	4e14      	ldr	r6, [pc, #80]	; (12410 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
   123be:	f10d 0102 	add.w	r1, sp, #2
   123c2:	a801      	add	r0, sp, #4
   123c4:	f002 f946 	bl	14654 <ll_rx_get>
   123c8:	4604      	mov	r4, r0
   123ca:	b940      	cbnz	r0, 123de <prio_recv_thread+0x26>
		if (node_rx) {
   123cc:	9b01      	ldr	r3, [sp, #4]
   123ce:	b1bb      	cbz	r3, 12400 <prio_recv_thread+0x48>
			ll_rx_dequeue();
   123d0:	f002 fab0 	bl	14934 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
   123d4:	9901      	ldr	r1, [sp, #4]
   123d6:	4630      	mov	r0, r6
   123d8:	f00d f992 	bl	1f700 <k_queue_append>
			continue;
   123dc:	e7ef      	b.n	123be <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   123de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   123e2:	2001      	movs	r0, #1
   123e4:	f7f7 fddc 	bl	9fa0 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   123e8:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   123ea:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   123ec:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   123f0:	f00c fa81 	bl	1e8f6 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   123f4:	4638      	mov	r0, r7
   123f6:	f7f7 facd 	bl	9994 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   123fa:	f004 fc77 	bl	16cec <z_impl_k_yield>
   123fe:	e7de      	b.n	123be <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   12400:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12404:	4628      	mov	r0, r5
   12406:	f004 fd2b 	bl	16e60 <z_impl_k_sem_take>
		BT_DBG("sem taken");
   1240a:	e7d8      	b.n	123be <prio_recv_thread+0x6>
   1240c:	2000941c 	.word	0x2000941c
   12410:	2000946c 	.word	0x2000946c

00012414 <hci_driver_open>:
{
   12414:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
   12416:	4818      	ldr	r0, [pc, #96]	; (12478 <hci_driver_open+0x64>)
{
   12418:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
   1241a:	f002 fb11 	bl	14a40 <ll_init>
	if (err) {
   1241e:	4604      	mov	r4, r0
   12420:	bb38      	cbnz	r0, 12472 <hci_driver_open+0x5e>
	hci_init(NULL);
   12422:	f000 fdfd 	bl	13020 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   12426:	f06f 0309 	mvn.w	r3, #9
   1242a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1242e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12432:	4912      	ldr	r1, [pc, #72]	; (1247c <hci_driver_open+0x68>)
   12434:	4b12      	ldr	r3, [pc, #72]	; (12480 <hci_driver_open+0x6c>)
   12436:	4813      	ldr	r0, [pc, #76]	; (12484 <hci_driver_open+0x70>)
   12438:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1243c:	e9cd 4400 	strd	r4, r4, [sp]
   12440:	f004 fd9a 	bl	16f78 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   12444:	4910      	ldr	r1, [pc, #64]	; (12488 <hci_driver_open+0x74>)
   12446:	480f      	ldr	r0, [pc, #60]	; (12484 <hci_driver_open+0x70>)
   12448:	f00d fae1 	bl	1fa0e <z_impl_k_thread_name_set>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   1244c:	f06f 0307 	mvn.w	r3, #7
   12450:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12454:	490d      	ldr	r1, [pc, #52]	; (1248c <hci_driver_open+0x78>)
   12456:	4b0e      	ldr	r3, [pc, #56]	; (12490 <hci_driver_open+0x7c>)
   12458:	480e      	ldr	r0, [pc, #56]	; (12494 <hci_driver_open+0x80>)
   1245a:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1245e:	e9cd 4400 	strd	r4, r4, [sp]
   12462:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12466:	f004 fd87 	bl	16f78 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   1246a:	490b      	ldr	r1, [pc, #44]	; (12498 <hci_driver_open+0x84>)
   1246c:	4809      	ldr	r0, [pc, #36]	; (12494 <hci_driver_open+0x80>)
   1246e:	f00d face 	bl	1fa0e <z_impl_k_thread_name_set>
}
   12472:	4620      	mov	r0, r4
   12474:	b006      	add	sp, #24
   12476:	bd10      	pop	{r4, pc}
   12478:	2000941c 	.word	0x2000941c
   1247c:	20002fa0 	.word	0x20002fa0
   12480:	000123b9 	.word	0x000123b9
   12484:	20001154 	.word	0x20001154
   12488:	00021d1d 	.word	0x00021d1d
   1248c:	20003160 	.word	0x20003160
   12490:	00012325 	.word	0x00012325
   12494:	200011c0 	.word	0x200011c0
   12498:	00021d27 	.word	0x00021d27

0001249c <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
   1249c:	b538      	push	{r3, r4, r5, lr}
   1249e:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
   124a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   124a4:	f7f7 fd8c 	bl	9fc0 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   124a8:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   124aa:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   124ac:	210f      	movs	r1, #15
   124ae:	f00c f9d4 	bl	1e85a <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   124b2:	2104      	movs	r1, #4
   124b4:	f104 0008 	add.w	r0, r4, #8
   124b8:	f00c fe20 	bl	1f0fc <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
   124bc:	2301      	movs	r3, #1
   124be:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
   124c0:	4b02      	ldr	r3, [pc, #8]	; (124cc <cmd_status+0x30>)
	cs->status = status;
   124c2:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	8043      	strh	r3, [r0, #2]

	return buf;
}
   124c8:	4620      	mov	r0, r4
   124ca:	bd38      	pop	{r3, r4, r5, pc}
   124cc:	2000209a 	.word	0x2000209a

000124d0 <cmd_complete>:
{
   124d0:	b538      	push	{r3, r4, r5, lr}
   124d2:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   124d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   124d8:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   124da:	f7f7 fd71 	bl	9fc0 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   124de:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   124e0:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   124e2:	b2d2      	uxtb	r2, r2
   124e4:	210e      	movs	r1, #14
   124e6:	f00c f9b8 	bl	1e85a <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
   124ea:	6820      	ldr	r0, [r4, #0]
   124ec:	2103      	movs	r1, #3
   124ee:	3008      	adds	r0, #8
   124f0:	f00c fe04 	bl	1f0fc <net_buf_simple_add>
	cc->ncmd = 1;
   124f4:	2301      	movs	r3, #1
   124f6:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
   124f8:	4b05      	ldr	r3, [pc, #20]	; (12510 <cmd_complete+0x40>)
   124fa:	881b      	ldrh	r3, [r3, #0]
   124fc:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
   12500:	6820      	ldr	r0, [r4, #0]
   12502:	4629      	mov	r1, r5
   12504:	3008      	adds	r0, #8
}
   12506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   1250a:	f00c bdf7 	b.w	1f0fc <net_buf_simple_add>
   1250e:	bf00      	nop
   12510:	2000209a 	.word	0x2000209a

00012514 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
   12514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12516:	4605      	mov	r5, r0
   12518:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1251a:	4b13      	ldr	r3, [pc, #76]	; (12568 <le_remote_feat_complete+0x54>)
{
   1251c:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1251e:	6859      	ldr	r1, [r3, #4]
   12520:	2400      	movs	r4, #0
{
   12522:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12524:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   12528:	4622      	mov	r2, r4
   1252a:	4313      	orrs	r3, r2
   1252c:	d01a      	beq.n	12564 <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   1252e:	4b0f      	ldr	r3, [pc, #60]	; (1256c <le_remote_feat_complete+0x58>)
   12530:	6819      	ldr	r1, [r3, #0]
   12532:	4623      	mov	r3, r4
   12534:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12538:	4313      	orrs	r3, r2
   1253a:	d013      	beq.n	12564 <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   1253c:	220b      	movs	r2, #11
   1253e:	2104      	movs	r1, #4
   12540:	f00c f995 	bl	1e86e <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   12544:	2208      	movs	r2, #8
	sep->status = status;
   12546:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   12548:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   1254c:	3003      	adds	r0, #3
   1254e:	b925      	cbnz	r5, 1255a <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
   12550:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   12552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   12556:	f007 bda7 	b.w	1a0a8 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1255a:	4621      	mov	r1, r4
}
   1255c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   12560:	f007 bdcc 	b.w	1a0fc <memset>
}
   12564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12566:	bf00      	nop
   12568:	20007e28 	.word	0x20007e28
   1256c:	20007e30 	.word	0x20007e30

00012570 <hci_cmd_handle>:
{
   12570:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   12572:	8983      	ldrh	r3, [r0, #12]
{
   12574:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   12576:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   12578:	2b02      	cmp	r3, #2
{
   1257a:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   1257c:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   1257e:	d802      	bhi.n	12586 <hci_cmd_handle+0x16>
		return NULL;
   12580:	2000      	movs	r0, #0
}
   12582:	b00d      	add	sp, #52	; 0x34
   12584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   12586:	2103      	movs	r1, #3
   12588:	3008      	adds	r0, #8
   1258a:	f00c fe3a 	bl	1f202 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   1258e:	89a2      	ldrh	r2, [r4, #12]
   12590:	7883      	ldrb	r3, [r0, #2]
   12592:	429a      	cmp	r2, r3
   12594:	d3f4      	bcc.n	12580 <hci_cmd_handle+0x10>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12596:	8802      	ldrh	r2, [r0, #0]
   12598:	49c9      	ldr	r1, [pc, #804]	; (128c0 <hci_cmd_handle+0x350>)
   1259a:	b293      	uxth	r3, r2
   1259c:	800a      	strh	r2, [r1, #0]
	ocf = BT_OCF(_opcode);
   1259e:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   125a2:	0a9b      	lsrs	r3, r3, #10
   125a4:	2b04      	cmp	r3, #4
   125a6:	d079      	beq.n	1269c <hci_cmd_handle+0x12c>
   125a8:	d809      	bhi.n	125be <hci_cmd_handle+0x4e>
   125aa:	2b01      	cmp	r3, #1
   125ac:	d026      	beq.n	125fc <hci_cmd_handle+0x8c>
   125ae:	2b03      	cmp	r3, #3
   125b0:	d036      	beq.n	12620 <hci_cmd_handle+0xb0>
		ccst = cmd_complete(&evt, sizeof(*ccst));
   125b2:	2101      	movs	r1, #1
   125b4:	a805      	add	r0, sp, #20
   125b6:	f7ff ff8b 	bl	124d0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   125ba:	2301      	movs	r3, #1
   125bc:	e04b      	b.n	12656 <hci_cmd_handle+0xe6>
	switch (BT_OGF(_opcode)) {
   125be:	2b08      	cmp	r3, #8
   125c0:	f000 80f7 	beq.w	127b2 <hci_cmd_handle+0x242>
   125c4:	2b3f      	cmp	r3, #63	; 0x3f
   125c6:	d1f4      	bne.n	125b2 <hci_cmd_handle+0x42>
	switch (ocf) {
   125c8:	3a01      	subs	r2, #1
   125ca:	2a09      	cmp	r2, #9
   125cc:	d8f1      	bhi.n	125b2 <hci_cmd_handle+0x42>
   125ce:	a301      	add	r3, pc, #4	; (adr r3, 125d4 <hci_cmd_handle+0x64>)
   125d0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   125d4:	00012a57 	.word	0x00012a57
   125d8:	00012a83 	.word	0x00012a83
   125dc:	00012aab 	.word	0x00012aab
   125e0:	000125b3 	.word	0x000125b3
   125e4:	000125b3 	.word	0x000125b3
   125e8:	00012af7 	.word	0x00012af7
   125ec:	000125b3 	.word	0x000125b3
   125f0:	00012ac1 	.word	0x00012ac1
   125f4:	00012b01 	.word	0x00012b01
   125f8:	00012b6d 	.word	0x00012b6d
	switch (ocf) {
   125fc:	2a06      	cmp	r2, #6
   125fe:	d006      	beq.n	1260e <hci_cmd_handle+0x9e>
   12600:	2a1d      	cmp	r2, #29
   12602:	d1d6      	bne.n	125b2 <hci_cmd_handle+0x42>
	handle = sys_le16_to_cpu(cmd->handle);
   12604:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   12606:	8818      	ldrh	r0, [r3, #0]
   12608:	f00c fb7c 	bl	1ed04 <ll_version_ind_send>
	*evt = cmd_status(status);
   1260c:	e004      	b.n	12618 <hci_cmd_handle+0xa8>
		disconnect(cmd, evt);
   1260e:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   12610:	7899      	ldrb	r1, [r3, #2]
   12612:	8818      	ldrh	r0, [r3, #0]
   12614:	f00c fb8c 	bl	1ed30 <ll_terminate_ind_send>
	*evt = cmd_status(status);
   12618:	f7ff ff40 	bl	1249c <cmd_status>
   1261c:	9005      	str	r0, [sp, #20]
	if (err == -EINVAL) {
   1261e:	e00f      	b.n	12640 <hci_cmd_handle+0xd0>
	switch (ocf) {
   12620:	2a03      	cmp	r2, #3
   12622:	d01a      	beq.n	1265a <hci_cmd_handle+0xea>
   12624:	d80e      	bhi.n	12644 <hci_cmd_handle+0xd4>
   12626:	2a01      	cmp	r2, #1
   12628:	d1c3      	bne.n	125b2 <hci_cmd_handle+0x42>
	event_mask = sys_get_le64(cmd->events);
   1262a:	68a0      	ldr	r0, [r4, #8]
   1262c:	f00c f934 	bl	1e898 <sys_get_le64>
   12630:	4ba4      	ldr	r3, [pc, #656]	; (128c4 <hci_cmd_handle+0x354>)
   12632:	e9c3 0100 	strd	r0, r1, [r3]
		ccst = cmd_complete(evt, sizeof(*ccst));
   12636:	2101      	movs	r1, #1
   12638:	a805      	add	r0, sp, #20
   1263a:	f7ff ff49 	bl	124d0 <cmd_complete>
		ccst->status = 0x00;
   1263e:	7005      	strb	r5, [r0, #0]
	return evt;
   12640:	9805      	ldr	r0, [sp, #20]
   12642:	e79e      	b.n	12582 <hci_cmd_handle+0x12>
	switch (ocf) {
   12644:	2a2d      	cmp	r2, #45	; 0x2d
   12646:	d017      	beq.n	12678 <hci_cmd_handle+0x108>
   12648:	2a63      	cmp	r2, #99	; 0x63
   1264a:	d1b2      	bne.n	125b2 <hci_cmd_handle+0x42>
	ccst = cmd_complete(evt, sizeof(*ccst));
   1264c:	2101      	movs	r1, #1
   1264e:	a805      	add	r0, sp, #20
   12650:	f7ff ff3e 	bl	124d0 <cmd_complete>
	ccst->status = 0x00;
   12654:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   12656:	7003      	strb	r3, [r0, #0]
   12658:	e7f2      	b.n	12640 <hci_cmd_handle+0xd0>
	event_mask = DEFAULT_EVENT_MASK;
   1265a:	4b9a      	ldr	r3, [pc, #616]	; (128c4 <hci_cmd_handle+0x354>)
   1265c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12660:	f641 71ff 	movw	r1, #8191	; 0x1fff
   12664:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12668:	4b97      	ldr	r3, [pc, #604]	; (128c8 <hci_cmd_handle+0x358>)
   1266a:	201f      	movs	r0, #31
   1266c:	2100      	movs	r1, #0
   1266e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   12672:	f001 ff61 	bl	14538 <ll_reset>
   12676:	e7de      	b.n	12636 <hci_cmd_handle+0xc6>
		read_tx_power_level(cmd, evt);
   12678:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   1267a:	2104      	movs	r1, #4
   1267c:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   1267e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   12680:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
   12682:	f7ff ff25 	bl	124d0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   12686:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   12688:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
   1268a:	1cc2      	adds	r2, r0, #3
   1268c:	4639      	mov	r1, r7
   1268e:	4630      	mov	r0, r6
   12690:	f00c fb64 	bl	1ed5c <ll_tx_pwr_lvl_get>
	rp->status = status;
   12694:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   12696:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   1269a:	e7d1      	b.n	12640 <hci_cmd_handle+0xd0>
	switch (ocf) {
   1269c:	3a01      	subs	r2, #1
   1269e:	2a08      	cmp	r2, #8
   126a0:	d887      	bhi.n	125b2 <hci_cmd_handle+0x42>
   126a2:	a301      	add	r3, pc, #4	; (adr r3, 126a8 <hci_cmd_handle+0x138>)
   126a4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   126a8:	000126cd 	.word	0x000126cd
   126ac:	000126f7 	.word	0x000126f7
   126b0:	0001277f 	.word	0x0001277f
   126b4:	000125b3 	.word	0x000125b3
   126b8:	000125b3 	.word	0x000125b3
   126bc:	000125b3 	.word	0x000125b3
   126c0:	000125b3 	.word	0x000125b3
   126c4:	000125b3 	.word	0x000125b3
   126c8:	0001279b 	.word	0x0001279b
	rp = cmd_complete(evt, sizeof(*rp));
   126cc:	2109      	movs	r1, #9
   126ce:	a805      	add	r0, sp, #20
   126d0:	f7ff fefe 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   126d4:	2300      	movs	r3, #0
   126d6:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   126d8:	7083      	strb	r3, [r0, #2]
   126da:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
   126dc:	f06f 030e 	mvn.w	r3, #14
   126e0:	7143      	strb	r3, [r0, #5]
   126e2:	2305      	movs	r3, #5
	rp->hci_version = LL_VERSION_NUMBER;
   126e4:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(CONFIG_BT_CTLR_COMPANY_ID);
   126e6:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
   126e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = LL_VERSION_NUMBER;
   126ec:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   126ee:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(CONFIG_BT_CTLR_SUBVERSION_NUMBER);
   126f0:	71c3      	strb	r3, [r0, #7]
   126f2:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   126f4:	e7a4      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   126f6:	2141      	movs	r1, #65	; 0x41
   126f8:	a805      	add	r0, sp, #20
   126fa:	f7ff fee9 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   126fe:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   12700:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12702:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   12704:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12708:	f007 fcf8 	bl	1a0fc <memset>
	rp->commands[2] |= BIT(7);
   1270c:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(6) | BIT(7);
   1270e:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   12710:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
   12712:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[2] |= BIT(7);
   12714:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12718:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
   1271a:	79a3      	ldrb	r3, [r4, #6]
   1271c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   12720:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   12722:	7ae3      	ldrb	r3, [r4, #11]
   12724:	f043 0304 	orr.w	r3, r3, #4
   12728:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1272a:	7be3      	ldrb	r3, [r4, #15]
   1272c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   12730:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   12732:	7c23      	ldrb	r3, [r4, #16]
   12734:	f043 0302 	orr.w	r3, r3, #2
   12738:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   1273a:	7de3      	ldrb	r3, [r4, #23]
   1273c:	f043 0304 	orr.w	r3, r3, #4
   12740:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
   12742:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   12744:	f063 0308 	orn	r3, r3, #8
   12748:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   1274a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
   1274e:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
   12752:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
   12756:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
   12758:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   1275c:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   1275e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
   12762:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12766:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
   1276a:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
   1276e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
   12772:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12774:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
   12776:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   12778:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   1277c:	e760      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   1277e:	2109      	movs	r1, #9
   12780:	a805      	add	r0, sp, #20
   12782:	f7ff fea5 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   12786:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   12788:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1278a:	2208      	movs	r2, #8
	rp->status = 0x00;
   1278c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12790:	f007 fcb4 	bl	1a0fc <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   12794:	2360      	movs	r3, #96	; 0x60
   12796:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   12798:	e752      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   1279a:	2107      	movs	r1, #7
   1279c:	a805      	add	r0, sp, #20
   1279e:	f7ff fe97 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   127a2:	4601      	mov	r1, r0
   127a4:	2300      	movs	r3, #0
   127a6:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   127aa:	4618      	mov	r0, r3
   127ac:	f7ff fd50 	bl	12250 <ll_addr_get>
	if (err == -EINVAL) {
   127b0:	e746      	b.n	12640 <hci_cmd_handle+0xd0>
	switch (ocf) {
   127b2:	2a0f      	cmp	r2, #15
   127b4:	f000 80ce 	beq.w	12954 <hci_cmd_handle+0x3e4>
   127b8:	d848      	bhi.n	1284c <hci_cmd_handle+0x2dc>
   127ba:	2a07      	cmp	r2, #7
   127bc:	f000 8106 	beq.w	129cc <hci_cmd_handle+0x45c>
   127c0:	d829      	bhi.n	12816 <hci_cmd_handle+0x2a6>
   127c2:	2a03      	cmp	r2, #3
   127c4:	f000 80a9 	beq.w	1291a <hci_cmd_handle+0x3aa>
   127c8:	d811      	bhi.n	127ee <hci_cmd_handle+0x27e>
   127ca:	2a01      	cmp	r2, #1
   127cc:	f000 809e 	beq.w	1290c <hci_cmd_handle+0x39c>
   127d0:	2a02      	cmp	r2, #2
   127d2:	f47f aeee 	bne.w	125b2 <hci_cmd_handle+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
   127d6:	2104      	movs	r1, #4
   127d8:	a805      	add	r0, sp, #20
   127da:	f7ff fe79 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   127de:	2300      	movs	r3, #0
   127e0:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   127e2:	221b      	movs	r2, #27
   127e4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   127e6:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   127e8:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   127ea:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   127ec:	e728      	b.n	12640 <hci_cmd_handle+0xd0>
	switch (ocf) {
   127ee:	2a05      	cmp	r2, #5
   127f0:	f000 80a5 	beq.w	1293e <hci_cmd_handle+0x3ce>
   127f4:	2a06      	cmp	r2, #6
   127f6:	f47f aedc 	bne.w	125b2 <hci_cmd_handle+0x42>
		le_set_adv_param(cmd, evt);
   127fa:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   127fc:	7ba5      	ldrb	r5, [r4, #14]
   127fe:	79a3      	ldrb	r3, [r4, #6]
   12800:	7962      	ldrb	r2, [r4, #5]
   12802:	7921      	ldrb	r1, [r4, #4]
   12804:	8820      	ldrh	r0, [r4, #0]
   12806:	9502      	str	r5, [sp, #8]
   12808:	7b65      	ldrb	r5, [r4, #13]
   1280a:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1280c:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   1280e:	9400      	str	r4, [sp, #0]
   12810:	f002 f99c 	bl	14b4c <ll_adv_params_set>
   12814:	e097      	b.n	12946 <hci_cmd_handle+0x3d6>
	switch (ocf) {
   12816:	2a0a      	cmp	r2, #10
   12818:	f000 80e5 	beq.w	129e6 <hci_cmd_handle+0x476>
   1281c:	d80b      	bhi.n	12836 <hci_cmd_handle+0x2c6>
   1281e:	2a08      	cmp	r2, #8
   12820:	f000 80db 	beq.w	129da <hci_cmd_handle+0x46a>
   12824:	2a09      	cmp	r2, #9
   12826:	f47f aec4 	bne.w	125b2 <hci_cmd_handle+0x42>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   1282a:	68a1      	ldr	r1, [r4, #8]
   1282c:	f811 0b01 	ldrb.w	r0, [r1], #1
   12830:	f00c fb04 	bl	1ee3c <ll_adv_scan_rsp_set>
   12834:	e087      	b.n	12946 <hci_cmd_handle+0x3d6>
	switch (ocf) {
   12836:	2a0b      	cmp	r2, #11
   12838:	f000 80da 	beq.w	129f0 <hci_cmd_handle+0x480>
   1283c:	2a0c      	cmp	r2, #12
   1283e:	f47f aeb8 	bne.w	125b2 <hci_cmd_handle+0x42>
	status = ll_scan_enable(cmd->enable);
   12842:	68a3      	ldr	r3, [r4, #8]
   12844:	7818      	ldrb	r0, [r3, #0]
   12846:	f002 fa55 	bl	14cf4 <ll_scan_enable>
   1284a:	e07c      	b.n	12946 <hci_cmd_handle+0x3d6>
	switch (ocf) {
   1284c:	2a16      	cmp	r2, #22
   1284e:	f000 80db 	beq.w	12a08 <hci_cmd_handle+0x498>
   12852:	d820      	bhi.n	12896 <hci_cmd_handle+0x326>
   12854:	2a12      	cmp	r2, #18
   12856:	f000 8090 	beq.w	1297a <hci_cmd_handle+0x40a>
   1285a:	d809      	bhi.n	12870 <hci_cmd_handle+0x300>
   1285c:	2a10      	cmp	r2, #16
   1285e:	f000 8083 	beq.w	12968 <hci_cmd_handle+0x3f8>
   12862:	2a11      	cmp	r2, #17
   12864:	f47f aea5 	bne.w	125b2 <hci_cmd_handle+0x42>
	status = ll_wl_add(&cmd->addr);
   12868:	68a0      	ldr	r0, [r4, #8]
   1286a:	f002 fa97 	bl	14d9c <ll_wl_add>
   1286e:	e06a      	b.n	12946 <hci_cmd_handle+0x3d6>
	switch (ocf) {
   12870:	2a13      	cmp	r2, #19
   12872:	f000 80ce 	beq.w	12a12 <hci_cmd_handle+0x4a2>
   12876:	2a15      	cmp	r2, #21
   12878:	f47f ae9b 	bne.w	125b2 <hci_cmd_handle+0x42>
	handle = sys_le16_to_cpu(cmd->handle);
   1287c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   1287e:	2108      	movs	r1, #8
   12880:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   12882:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   12884:	f7ff fe24 	bl	124d0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   12888:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   1288a:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1288c:	1cc1      	adds	r1, r0, #3
   1288e:	4630      	mov	r0, r6
   12890:	f00c fa0d 	bl	1ecae <ll_chm_get>
   12894:	e6fe      	b.n	12694 <hci_cmd_handle+0x124>
	switch (ocf) {
   12896:	2a1c      	cmp	r2, #28
   12898:	f000 8086 	beq.w	129a8 <hci_cmd_handle+0x438>
   1289c:	d816      	bhi.n	128cc <hci_cmd_handle+0x35c>
   1289e:	2a17      	cmp	r2, #23
   128a0:	d06f      	beq.n	12982 <hci_cmd_handle+0x412>
   128a2:	2a18      	cmp	r2, #24
   128a4:	f47f ae85 	bne.w	125b2 <hci_cmd_handle+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
   128a8:	2109      	movs	r1, #9
   128aa:	a805      	add	r0, sp, #20
   128ac:	f7ff fe10 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   128b0:	2300      	movs	r3, #0
   128b2:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
   128b6:	2108      	movs	r1, #8
   128b8:	f00c f84e 	bl	1e958 <bt_rand>
	if (err == -EINVAL) {
   128bc:	e6c0      	b.n	12640 <hci_cmd_handle+0xd0>
   128be:	bf00      	nop
   128c0:	2000209a 	.word	0x2000209a
   128c4:	20007e28 	.word	0x20007e28
   128c8:	20007e30 	.word	0x20007e30
	switch (ocf) {
   128cc:	2a21      	cmp	r2, #33	; 0x21
   128ce:	f000 80ae 	beq.w	12a2e <hci_cmd_handle+0x4be>
   128d2:	2a4b      	cmp	r2, #75	; 0x4b
   128d4:	f000 80b3 	beq.w	12a3e <hci_cmd_handle+0x4ce>
   128d8:	2a20      	cmp	r2, #32
   128da:	f47f ae6a 	bne.w	125b2 <hci_cmd_handle+0x42>
		le_conn_param_req_reply(cmd, evt);
   128de:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   128e0:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   128e2:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   128e4:	8853      	ldrh	r3, [r2, #2]
   128e6:	9102      	str	r1, [sp, #8]
   128e8:	88d1      	ldrh	r1, [r2, #6]
   128ea:	9101      	str	r1, [sp, #4]
   128ec:	8892      	ldrh	r2, [r2, #4]
   128ee:	9200      	str	r2, [sp, #0]
   128f0:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   128f2:	2102      	movs	r1, #2
   128f4:	4620      	mov	r0, r4
   128f6:	f00c f963 	bl	1ebc0 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
   128fa:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   128fc:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   128fe:	a805      	add	r0, sp, #20
   12900:	f7ff fde6 	bl	124d0 <cmd_complete>
	rp->status = status;
   12904:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12906:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   1290a:	e699      	b.n	12640 <hci_cmd_handle+0xd0>
	le_event_mask = sys_get_le64(cmd->events);
   1290c:	68a0      	ldr	r0, [r4, #8]
   1290e:	f00b ffc3 	bl	1e898 <sys_get_le64>
   12912:	4bc9      	ldr	r3, [pc, #804]	; (12c38 <hci_cmd_handle+0x6c8>)
   12914:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
   12918:	e698      	b.n	1264c <hci_cmd_handle+0xdc>
	rp = cmd_complete(evt, sizeof(*rp));
   1291a:	2109      	movs	r1, #9
   1291c:	a805      	add	r0, sp, #20
   1291e:	f7ff fdd7 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   12922:	2500      	movs	r5, #0
	rp = cmd_complete(evt, sizeof(*rp));
   12924:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12926:	2208      	movs	r2, #8
	rp->status = 0x00;
   12928:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1292c:	4629      	mov	r1, r5
   1292e:	f007 fbe5 	bl	1a0fc <memset>
	rp->features[0] = LL_FEAT & 0xFF;
   12932:	238e      	movs	r3, #142	; 0x8e
   12934:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (LL_FEAT >> 8)  & 0xFF;
   12936:	2301      	movs	r3, #1
   12938:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (LL_FEAT >> 16)  & 0xFF;
   1293a:	70e5      	strb	r5, [r4, #3]
	if (err == -EINVAL) {
   1293c:	e680      	b.n	12640 <hci_cmd_handle+0xd0>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1293e:	68a1      	ldr	r1, [r4, #8]
   12940:	2001      	movs	r0, #1
   12942:	f7ff fc9f 	bl	12284 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
   12946:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   12948:	2101      	movs	r1, #1
   1294a:	a805      	add	r0, sp, #20
   1294c:	f7ff fdc0 	bl	124d0 <cmd_complete>
	ccst->status = status;
   12950:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   12952:	e675      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   12954:	2102      	movs	r1, #2
   12956:	a805      	add	r0, sp, #20
   12958:	f7ff fdba 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   1295c:	7005      	strb	r5, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   1295e:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   12960:	f00c faaf 	bl	1eec2 <ll_wl_size_get>
   12964:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   12966:	e66b      	b.n	12640 <hci_cmd_handle+0xd0>
	ccst = cmd_complete(evt, sizeof(*ccst));
   12968:	2101      	movs	r1, #1
   1296a:	a805      	add	r0, sp, #20
   1296c:	f7ff fdb0 	bl	124d0 <cmd_complete>
   12970:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   12972:	f002 f9fd 	bl	14d70 <ll_wl_clear>
   12976:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   12978:	e662      	b.n	12640 <hci_cmd_handle+0xd0>
	status = ll_wl_remove(&cmd->addr);
   1297a:	68a0      	ldr	r0, [r4, #8]
   1297c:	f002 fa46 	bl	14e0c <ll_wl_remove>
   12980:	e7e1      	b.n	12946 <hci_cmd_handle+0x3d6>
		le_encrypt(cmd, evt);
   12982:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   12984:	2300      	movs	r3, #0
   12986:	aa06      	add	r2, sp, #24
   12988:	f100 0110 	add.w	r1, r0, #16
   1298c:	f00c fab4 	bl	1eef8 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
   12990:	2111      	movs	r1, #17
   12992:	a805      	add	r0, sp, #20
   12994:	f7ff fd9c 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   12998:	2300      	movs	r3, #0
   1299a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   1299e:	2210      	movs	r2, #16
   129a0:	a906      	add	r1, sp, #24
	memcpy(rp->info, build_info, sizeof(build_info));
   129a2:	f007 fb81 	bl	1a0a8 <memcpy>
	if (err == -EINVAL) {
   129a6:	e64b      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   129a8:	2109      	movs	r1, #9
   129aa:	a805      	add	r0, sp, #20
   129ac:	f7ff fd90 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   129b0:	4601      	mov	r1, r0
   129b2:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
   129b4:	4602      	mov	r2, r0
	rp->status = 0x00;
   129b6:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
   129ba:	48a0      	ldr	r0, [pc, #640]	; (12c3c <hci_cmd_handle+0x6cc>)
   129bc:	f00b ff44 	bl	1e848 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
   129c0:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
   129c4:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   129c6:	f00b ff3f 	bl	1e848 <sys_put_le32>
	if (err == -EINVAL) {
   129ca:	e639      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   129cc:	2102      	movs	r1, #2
   129ce:	a805      	add	r0, sp, #20
   129d0:	f7ff fd7e 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   129d4:	7005      	strb	r5, [r0, #0]
	rp->tx_power_level = 0;
   129d6:	7045      	strb	r5, [r0, #1]
	if (err == -EINVAL) {
   129d8:	e632      	b.n	12640 <hci_cmd_handle+0xd0>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   129da:	68a1      	ldr	r1, [r4, #8]
   129dc:	f811 0b01 	ldrb.w	r0, [r1], #1
   129e0:	f00c f9e1 	bl	1eda6 <ll_adv_data_set>
   129e4:	e7af      	b.n	12946 <hci_cmd_handle+0x3d6>
	status = ll_adv_enable(cmd->enable);
   129e6:	68a3      	ldr	r3, [r4, #8]
   129e8:	7818      	ldrb	r0, [r3, #0]
   129ea:	f002 f91d 	bl	14c28 <ll_adv_enable>
   129ee:	e7aa      	b.n	12946 <hci_cmd_handle+0x3d6>
		le_set_scan_param(cmd, evt);
   129f0:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   129f2:	7963      	ldrb	r3, [r4, #5]
   129f4:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   129f8:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   129fc:	7820      	ldrb	r0, [r4, #0]
   129fe:	79a4      	ldrb	r4, [r4, #6]
   12a00:	9400      	str	r4, [sp, #0]
   12a02:	f002 f959 	bl	14cb8 <ll_scan_params_set>
   12a06:	e79e      	b.n	12946 <hci_cmd_handle+0x3d6>
	handle = sys_le16_to_cpu(cmd->handle);
   12a08:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   12a0a:	8818      	ldrh	r0, [r3, #0]
   12a0c:	f00c f964 	bl	1ecd8 <ll_feature_req_send>
   12a10:	e602      	b.n	12618 <hci_cmd_handle+0xa8>
		le_conn_update(cmd, evt);
   12a12:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   12a14:	8911      	ldrh	r1, [r2, #8]
   12a16:	8853      	ldrh	r3, [r2, #2]
   12a18:	8810      	ldrh	r0, [r2, #0]
   12a1a:	9102      	str	r1, [sp, #8]
   12a1c:	88d1      	ldrh	r1, [r2, #6]
   12a1e:	9101      	str	r1, [sp, #4]
   12a20:	8892      	ldrh	r2, [r2, #4]
   12a22:	9200      	str	r2, [sp, #0]
   12a24:	2200      	movs	r2, #0
   12a26:	4611      	mov	r1, r2
   12a28:	f00c f8ca 	bl	1ebc0 <ll_conn_update>
	*evt = cmd_status(status);
   12a2c:	e5f4      	b.n	12618 <hci_cmd_handle+0xa8>
		le_conn_param_req_neg_reply(cmd, evt);
   12a2e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12a30:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12a32:	789a      	ldrb	r2, [r3, #2]
   12a34:	2300      	movs	r3, #0
   12a36:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12a3a:	9300      	str	r3, [sp, #0]
   12a3c:	e759      	b.n	128f2 <hci_cmd_handle+0x382>
	rp = cmd_complete(evt, sizeof(*rp));
   12a3e:	2103      	movs	r1, #3
   12a40:	a805      	add	r0, sp, #20
   12a42:	f7ff fd45 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   12a46:	4601      	mov	r1, r0
   12a48:	2300      	movs	r3, #0
   12a4a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   12a4e:	3001      	adds	r0, #1
   12a50:	f00b fef6 	bl	1e840 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   12a54:	e5f4      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   12a56:	210d      	movs	r1, #13
   12a58:	a805      	add	r0, sp, #20
   12a5a:	f7ff fd39 	bl	124d0 <cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12a5e:	2202      	movs	r2, #2
   12a60:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   12a62:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   12a64:	2201      	movs	r2, #1
	rp->status = 0x00;
   12a66:	2300      	movs	r3, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   12a68:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   12a6a:	220e      	movs	r2, #14
	rp->status = 0x00;
   12a6c:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12a6e:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   12a70:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
   12a72:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   12a74:	71c2      	strb	r2, [r0, #7]
   12a76:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   12a78:	7243      	strb	r3, [r0, #9]
   12a7a:	7283      	strb	r3, [r0, #10]
   12a7c:	72c3      	strb	r3, [r0, #11]
   12a7e:	7303      	strb	r3, [r0, #12]
	if (err == -EINVAL) {
   12a80:	e5de      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   12a82:	2141      	movs	r1, #65	; 0x41
   12a84:	a805      	add	r0, sp, #20
   12a86:	f7ff fd23 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   12a8a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   12a8c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12a8e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   12a90:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12a94:	f007 fb32 	bl	1a0fc <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   12a98:	7863      	ldrb	r3, [r4, #1]
   12a9a:	f063 0358 	orn	r3, r3, #88	; 0x58
   12a9e:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   12aa0:	78a3      	ldrb	r3, [r4, #2]
   12aa2:	f043 0303 	orr.w	r3, r3, #3
   12aa6:	70a3      	strb	r3, [r4, #2]
	if (err == -EINVAL) {
   12aa8:	e5ca      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   12aaa:	2109      	movs	r1, #9
   12aac:	a805      	add	r0, sp, #20
   12aae:	f7ff fd0f 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   12ab2:	2100      	movs	r1, #0
   12ab4:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12ab8:	2208      	movs	r2, #8
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   12aba:	f007 fb1f 	bl	1a0fc <memset>
	if (err == -EINVAL) {
   12abe:	e5bf      	b.n	12640 <hci_cmd_handle+0xd0>
	const char build_info[] = HCI_VS_BUILD_INFO;
   12ac0:	4b5f      	ldr	r3, [pc, #380]	; (12c40 <hci_cmd_handle+0x6d0>)
   12ac2:	aa06      	add	r2, sp, #24
   12ac4:	f103 0610 	add.w	r6, r3, #16
   12ac8:	4615      	mov	r5, r2
   12aca:	6818      	ldr	r0, [r3, #0]
   12acc:	6859      	ldr	r1, [r3, #4]
   12ace:	4614      	mov	r4, r2
   12ad0:	c403      	stmia	r4!, {r0, r1}
   12ad2:	3308      	adds	r3, #8
   12ad4:	42b3      	cmp	r3, r6
   12ad6:	4622      	mov	r2, r4
   12ad8:	d1f7      	bne.n	12aca <hci_cmd_handle+0x55a>
   12ada:	6818      	ldr	r0, [r3, #0]
   12adc:	889b      	ldrh	r3, [r3, #4]
   12ade:	6020      	str	r0, [r4, #0]
   12ae0:	80a3      	strh	r3, [r4, #4]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   12ae2:	2117      	movs	r1, #23
   12ae4:	a805      	add	r0, sp, #20
   12ae6:	f7ff fcf3 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   12aea:	2300      	movs	r3, #0
   12aec:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   12af0:	2216      	movs	r2, #22
   12af2:	4629      	mov	r1, r5
   12af4:	e755      	b.n	129a2 <hci_cmd_handle+0x432>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   12af6:	68a1      	ldr	r1, [r4, #8]
   12af8:	2000      	movs	r0, #0
   12afa:	f7ff fbc3 	bl	12284 <ll_addr_set>
   12afe:	e5a5      	b.n	1264c <hci_cmd_handle+0xdc>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   12b00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12b04:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   12b08:	3201      	adds	r2, #1
   12b0a:	d106      	bne.n	12b1a <hci_cmd_handle+0x5aa>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   12b0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   12b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   12b14:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   12b16:	4293      	cmp	r3, r2
   12b18:	d020      	beq.n	12b5c <hci_cmd_handle+0x5ec>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   12b1a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12b1e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   12b22:	07db      	lsls	r3, r3, #31
   12b24:	d51a      	bpl.n	12b5c <hci_cmd_handle+0x5ec>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   12b26:	2118      	movs	r1, #24
   12b28:	a805      	add	r0, sp, #20
   12b2a:	f7ff fcd1 	bl	124d0 <cmd_complete>
		rp->status = 0x00;
   12b2e:	2600      	movs	r6, #0
		rp->num_addrs = 1;
   12b30:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   12b32:	4604      	mov	r4, r0
		rp->num_addrs = 1;
   12b34:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
   12b36:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
   12b38:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   12b3c:	1ca1      	adds	r1, r4, #2
   12b3e:	f00b fe83 	bl	1e848 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
   12b42:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
   12b46:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
   12b48:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
   12b4c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   12b50:	71e3      	strb	r3, [r4, #7]
		(void)memset(addr->ir, 0x00, sizeof(addr->ir));
   12b52:	2210      	movs	r2, #16
   12b54:	4631      	mov	r1, r6
   12b56:	f104 0008 	add.w	r0, r4, #8
   12b5a:	e7ae      	b.n	12aba <hci_cmd_handle+0x54a>
	rp = cmd_complete(evt, sizeof(*rp));
   12b5c:	2102      	movs	r1, #2
   12b5e:	a805      	add	r0, sp, #20
   12b60:	f7ff fcb6 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   12b64:	2300      	movs	r3, #0
   12b66:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
   12b68:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   12b6a:	e569      	b.n	12640 <hci_cmd_handle+0xd0>
	rp = cmd_complete(evt, sizeof(*rp));
   12b6c:	2121      	movs	r1, #33	; 0x21
   12b6e:	a805      	add	r0, sp, #20
   12b70:	f7ff fcae 	bl	124d0 <cmd_complete>
	rp->status = 0x00;
   12b74:	4603      	mov	r3, r0
   12b76:	2200      	movs	r2, #0
   12b78:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   12b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
   12b80:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   12b82:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   12b86:	3101      	adds	r1, #1
   12b88:	d04b      	beq.n	12c22 <hci_cmd_handle+0x6b2>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   12b8a:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   12b8e:	3101      	adds	r1, #1
   12b90:	d047      	beq.n	12c22 <hci_cmd_handle+0x6b2>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   12b92:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   12b96:	3101      	adds	r1, #1
   12b98:	d043      	beq.n	12c22 <hci_cmd_handle+0x6b2>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
   12b9a:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   12b9e:	3101      	adds	r1, #1
   12ba0:	d03f      	beq.n	12c22 <hci_cmd_handle+0x6b2>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
   12ba2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   12ba6:	4619      	mov	r1, r3
   12ba8:	f00b fe4e 	bl	1e848 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
   12bac:	1d61      	adds	r1, r4, #5
   12bae:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   12bb2:	f00b fe49 	bl	1e848 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
   12bb6:	f104 0109 	add.w	r1, r4, #9
   12bba:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   12bbe:	f00b fe43 	bl	1e848 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
   12bc2:	f104 010d 	add.w	r1, r4, #13
   12bc6:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   12bca:	f00b fe3d 	bl	1e848 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   12bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   12bd2:	f104 0311 	add.w	r3, r4, #17
   12bd6:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
   12bda:	3101      	adds	r1, #1
   12bdc:	d027      	beq.n	12c2e <hci_cmd_handle+0x6be>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   12bde:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   12be2:	3101      	adds	r1, #1
   12be4:	d023      	beq.n	12c2e <hci_cmd_handle+0x6be>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   12be6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   12bea:	3101      	adds	r1, #1
   12bec:	d01f      	beq.n	12c2e <hci_cmd_handle+0x6be>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   12bee:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   12bf2:	3101      	adds	r1, #1
   12bf4:	d01b      	beq.n	12c2e <hci_cmd_handle+0x6be>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
   12bf6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   12bfa:	4619      	mov	r1, r3
   12bfc:	f00b fe24 	bl	1e848 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
   12c00:	f104 0115 	add.w	r1, r4, #21
   12c04:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   12c08:	f00b fe1e 	bl	1e848 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
   12c0c:	f104 0119 	add.w	r1, r4, #25
   12c10:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   12c14:	f00b fe18 	bl	1e848 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   12c18:	f104 011d 	add.w	r1, r4, #29
   12c1c:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
   12c20:	e6d1      	b.n	129c6 <hci_cmd_handle+0x456>
		(void)memset(rp->ir, 0x00, sizeof(rp->ir));
   12c22:	2210      	movs	r2, #16
   12c24:	2100      	movs	r1, #0
   12c26:	4618      	mov	r0, r3
   12c28:	f007 fa68 	bl	1a0fc <memset>
   12c2c:	e7cf      	b.n	12bce <hci_cmd_handle+0x65e>
		(void)memset(rp->er, 0x00, sizeof(rp->er));
   12c2e:	2210      	movs	r2, #16
   12c30:	2100      	movs	r1, #0
   12c32:	4618      	mov	r0, r3
   12c34:	e741      	b.n	12aba <hci_cmd_handle+0x54a>
   12c36:	bf00      	nop
   12c38:	20007e30 	.word	0x20007e30
   12c3c:	ec30ffbf 	.word	0xec30ffbf
   12c40:	00021d38 	.word	0x00021d38

00012c44 <hci_acl_handle>:
{
   12c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   12c48:	2300      	movs	r3, #0
   12c4a:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   12c4c:	8983      	ldrh	r3, [r0, #12]
   12c4e:	2b03      	cmp	r3, #3
{
   12c50:	4606      	mov	r6, r0
   12c52:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
   12c54:	d803      	bhi.n	12c5e <hci_acl_handle+0x1a>
		return -EINVAL;
   12c56:	f06f 0015 	mvn.w	r0, #21
}
   12c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   12c5e:	2104      	movs	r1, #4
   12c60:	3008      	adds	r0, #8
   12c62:	f00c face 	bl	1f202 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   12c66:	89b3      	ldrh	r3, [r6, #12]
	len = sys_le16_to_cpu(acl->len);
   12c68:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   12c6a:	8800      	ldrh	r0, [r0, #0]
	if (buf->len < len) {
   12c6c:	42bb      	cmp	r3, r7
   12c6e:	d3f2      	bcc.n	12c56 <hci_acl_handle+0x12>
	flags = bt_acl_flags(handle);
   12c70:	ea4f 3910 	mov.w	r9, r0, lsr #12
	handle = bt_acl_handle(handle);
   12c74:	f3c0 050b 	ubfx	r5, r0, #0, #12
	node_tx = ll_tx_mem_acquire();
   12c78:	f001 fda2 	bl	147c0 <ll_tx_mem_acquire>
	if (!node_tx) {
   12c7c:	4604      	mov	r4, r0
   12c7e:	b9e0      	cbnz	r0, 12cba <hci_acl_handle+0x76>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   12c80:	4b1d      	ldr	r3, [pc, #116]	; (12cf8 <hci_acl_handle+0xb4>)
   12c82:	6819      	ldr	r1, [r3, #0]
   12c84:	4603      	mov	r3, r0
   12c86:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   12c8a:	4313      	orrs	r3, r2
   12c8c:	d012      	beq.n	12cb4 <hci_acl_handle+0x70>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12c8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12c92:	2001      	movs	r0, #1
   12c94:	f7f7 f984 	bl	9fa0 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   12c98:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12c9a:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   12c9e:	211a      	movs	r1, #26
   12ca0:	f00b fddb 	bl	1e85a <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
   12ca4:	f8d8 0000 	ldr.w	r0, [r8]
   12ca8:	2101      	movs	r1, #1
   12caa:	3008      	adds	r0, #8
   12cac:	f00c fa26 	bl	1f0fc <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   12cb0:	2301      	movs	r3, #1
   12cb2:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   12cb4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12cb8:	e7cf      	b.n	12c5a <hci_acl_handle+0x16>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
   12cba:	f1b9 0f00 	cmp.w	r9, #0
   12cbe:	d018      	beq.n	12cf2 <hci_acl_handle+0xae>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12cc0:	f1b9 0f02 	cmp.w	r9, #2
   12cc4:	bf0c      	ite	eq
   12cc6:	2202      	moveq	r2, #2
   12cc8:	2201      	movne	r2, #1
   12cca:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   12ccc:	7167      	strb	r7, [r4, #5]
   12cce:	f362 0301 	bfi	r3, r2, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   12cd2:	68b1      	ldr	r1, [r6, #8]
   12cd4:	7123      	strb	r3, [r4, #4]
   12cd6:	463a      	mov	r2, r7
   12cd8:	1de0      	adds	r0, r4, #7
   12cda:	f007 f9e5 	bl	1a0a8 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   12cde:	4621      	mov	r1, r4
   12ce0:	4628      	mov	r0, r5
   12ce2:	f001 fd79 	bl	147d8 <ll_tx_mem_enqueue>
   12ce6:	2800      	cmp	r0, #0
   12ce8:	d0b7      	beq.n	12c5a <hci_acl_handle+0x16>
		ll_tx_mem_release(node_tx);
   12cea:	4620      	mov	r0, r4
   12cec:	f001 fd6e 	bl	147cc <ll_tx_mem_release>
   12cf0:	e7b1      	b.n	12c56 <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   12cf2:	2202      	movs	r2, #2
   12cf4:	e7e9      	b.n	12cca <hci_acl_handle+0x86>
   12cf6:	bf00      	nop
   12cf8:	20007e28 	.word	0x20007e28

00012cfc <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   12cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12d00:	7903      	ldrb	r3, [r0, #4]
   12d02:	88c6      	ldrh	r6, [r0, #6]
   12d04:	2b02      	cmp	r3, #2
{
   12d06:	b086      	sub	sp, #24
   12d08:	4604      	mov	r4, r0
   12d0a:	460d      	mov	r5, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12d0c:	f000 810b 	beq.w	12f26 <hci_evt_encode+0x22a>
	switch (node_rx->hdr.type) {
   12d10:	3b04      	subs	r3, #4
   12d12:	4abf      	ldr	r2, [pc, #764]	; (13010 <hci_evt_encode+0x314>)
   12d14:	2700      	movs	r7, #0
   12d16:	2b06      	cmp	r3, #6
   12d18:	d82f      	bhi.n	12d7a <hci_evt_encode+0x7e>
   12d1a:	e8df f013 	tbh	[pc, r3, lsl #1]
   12d1e:	0007      	.short	0x0007
   12d20:	002e002e 	.word	0x002e002e
   12d24:	008f002e 	.word	0x008f002e
   12d28:	00e200c8 	.word	0x00e200c8
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12d2c:	4bb9      	ldr	r3, [pc, #740]	; (13014 <hci_evt_encode+0x318>)
   12d2e:	9304      	str	r3, [sp, #16]
   12d30:	f64f 7304 	movw	r3, #65284	; 0xff04
   12d34:	f8ad 3014 	strh.w	r3, [sp, #20]
   12d38:	2302      	movs	r3, #2
   12d3a:	f88d 3016 	strb.w	r3, [sp, #22]
		   offsetof(struct pdu_adv, payload) + adv->len];
   12d3e:	7a43      	ldrb	r3, [r0, #9]
   12d40:	6852      	ldr	r2, [r2, #4]
   12d42:	f103 010a 	add.w	r1, r3, #10
	extra = &b[offsetof(struct node_rx_pdu, pdu) +
   12d46:	4408      	add	r0, r1
	rssi = -(*extra);
   12d48:	5c67      	ldrb	r7, [r4, r1]
	direct = *extra;
   12d4a:	7846      	ldrb	r6, [r0, #1]
	rssi = -(*extra);
   12d4c:	427f      	negs	r7, r7
   12d4e:	f04f 0c00 	mov.w	ip, #0
   12d52:	b27f      	sxtb	r7, r7
	if (direct) {
   12d54:	4660      	mov	r0, ip
   12d56:	f002 5100 	and.w	r1, r2, #536870912	; 0x20000000
   12d5a:	b3a6      	cbz	r6, 12dc6 <hci_evt_encode+0xca>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12d5c:	ea50 0301 	orrs.w	r3, r0, r1
   12d60:	d02e      	beq.n	12dc0 <hci_evt_encode+0xc4>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   12d62:	4bad      	ldr	r3, [pc, #692]	; (13018 <hci_evt_encode+0x31c>)
   12d64:	6819      	ldr	r1, [r3, #0]
   12d66:	4663      	mov	r3, ip
   12d68:	f401 6280 	and.w	r2, r1, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12d6c:	4313      	orrs	r3, r2
   12d6e:	d027      	beq.n	12dc0 <hci_evt_encode+0xc4>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   12d70:	7a26      	ldrb	r6, [r4, #8]
   12d72:	f006 060f 	and.w	r6, r6, #15
   12d76:	2e01      	cmp	r6, #1
   12d78:	d005      	beq.n	12d86 <hci_evt_encode+0x8a>
		LL_ASSERT(0);
   12d7a:	4040      	eors	r0, r0
   12d7c:	f380 8811 	msr	BASEPRI, r0
   12d80:	f04f 0004 	mov.w	r0, #4
   12d84:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   12d86:	2211      	movs	r2, #17
   12d88:	210b      	movs	r1, #11
   12d8a:	4628      	mov	r0, r5
   12d8c:	f00b fd6f 	bl	1e86e <meta_evt>
		dir_info->addr.type = adv->tx_addr;
   12d90:	46a0      	mov	r8, r4
	drp->num_reports = 1;
   12d92:	7006      	strb	r6, [r0, #0]
	dir_info->evt_type = BT_LE_ADV_DIRECT_IND;
   12d94:	7046      	strb	r6, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
   12d96:	f818 3f08 	ldrb.w	r3, [r8, #8]!
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   12d9a:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
   12d9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12da0:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   12da2:	2206      	movs	r2, #6
   12da4:	f104 010a 	add.w	r1, r4, #10
   12da8:	3003      	adds	r0, #3
   12daa:	f007 f97d 	bl	1a0a8 <memcpy>
	dir_info->dir_addr.type = 0x1;
   12dae:	726e      	strb	r6, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   12db0:	2206      	movs	r2, #6
   12db2:	f108 0108 	add.w	r1, r8, #8
   12db6:	f105 000a 	add.w	r0, r5, #10
   12dba:	f007 f975 	bl	1a0a8 <memcpy>
	dir_info->rssi = rssi;
   12dbe:	742f      	strb	r7, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   12dc0:	b006      	add	sp, #24
   12dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12dc6:	ea50 0201 	orrs.w	r2, r0, r1
   12dca:	d0f9      	beq.n	12dc0 <hci_evt_encode+0xc4>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   12dcc:	4a92      	ldr	r2, [pc, #584]	; (13018 <hci_evt_encode+0x31c>)
   12dce:	6812      	ldr	r2, [r2, #0]
   12dd0:	4631      	mov	r1, r6
   12dd2:	f002 0002 	and.w	r0, r2, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12dd6:	ea50 0201 	orrs.w	r2, r0, r1
   12dda:	d0f1      	beq.n	12dc0 <hci_evt_encode+0xc4>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   12ddc:	7a22      	ldrb	r2, [r4, #8]
   12dde:	f002 020f 	and.w	r2, r2, #15
   12de2:	2a01      	cmp	r2, #1
		data_len = (adv->len - BDADDR_SIZE);
   12de4:	bf1c      	itt	ne
   12de6:	1f9e      	subne	r6, r3, #6
   12de8:	b2f6      	uxtbne	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   12dea:	f106 020b 	add.w	r2, r6, #11
   12dee:	b2d2      	uxtb	r2, r2
   12df0:	2102      	movs	r1, #2
   12df2:	4628      	mov	r0, r5
   12df4:	f00b fd3b 	bl	1e86e <meta_evt>
	sep->num_reports = 1;
   12df8:	2301      	movs	r3, #1
   12dfa:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   12dfc:	7a23      	ldrb	r3, [r4, #8]
   12dfe:	aa06      	add	r2, sp, #24
   12e00:	f003 030f 	and.w	r3, r3, #15
   12e04:	4413      	add	r3, r2
		adv_info->addr.type = adv->tx_addr;
   12e06:	46a0      	mov	r8, r4
	adv_info->evt_type = c_adv_type[adv->type];
   12e08:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   12e0c:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   12e0e:	f818 3f08 	ldrb.w	r3, [r8, #8]!
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   12e12:	4605      	mov	r5, r0
		adv_info->addr.type = adv->tx_addr;
   12e14:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12e18:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   12e1a:	2206      	movs	r2, #6
   12e1c:	f104 010a 	add.w	r1, r4, #10
   12e20:	3003      	adds	r0, #3
   12e22:	f007 f941 	bl	1a0a8 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12e26:	350a      	adds	r5, #10
	adv_info->length = data_len;
   12e28:	f805 6c01 	strb.w	r6, [r5, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12e2c:	4632      	mov	r2, r6
   12e2e:	f108 0108 	add.w	r1, r8, #8
   12e32:	4628      	mov	r0, r5
   12e34:	f007 f938 	bl	1a0a8 <memcpy>
	*prssi = rssi;
   12e38:	55af      	strb	r7, [r5, r6]
   12e3a:	e7c1      	b.n	12dc0 <hci_evt_encode+0xc4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e3c:	6851      	ldr	r1, [r2, #4]
   12e3e:	463a      	mov	r2, r7
   12e40:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   12e44:	4313      	orrs	r3, r2
   12e46:	d0bb      	beq.n	12dc0 <hci_evt_encode+0xc4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12e48:	4b73      	ldr	r3, [pc, #460]	; (13018 <hci_evt_encode+0x31c>)
   12e4a:	6819      	ldr	r1, [r3, #0]
   12e4c:	463b      	mov	r3, r7
   12e4e:	f001 0201 	and.w	r2, r1, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e52:	4313      	orrs	r3, r2
   12e54:	d0b4      	beq.n	12dc0 <hci_evt_encode+0xc4>
	u8_t status = node_rx->status;
   12e56:	7a07      	ldrb	r7, [r0, #8]
	if (!status) {
   12e58:	b91f      	cbnz	r7, 12e62 <hci_evt_encode+0x166>
		conn_count++;
   12e5a:	4a70      	ldr	r2, [pc, #448]	; (1301c <hci_evt_encode+0x320>)
   12e5c:	6813      	ldr	r3, [r2, #0]
   12e5e:	3301      	adds	r3, #1
   12e60:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   12e62:	4628      	mov	r0, r5
   12e64:	2212      	movs	r2, #18
   12e66:	2101      	movs	r1, #1
   12e68:	f00b fd01 	bl	1e86e <meta_evt>
   12e6c:	4605      	mov	r5, r0
	if (status) {
   12e6e:	b12f      	cbz	r7, 12e7c <hci_evt_encode+0x180>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   12e70:	2212      	movs	r2, #18
   12e72:	2100      	movs	r1, #0
   12e74:	f007 f942 	bl	1a0fc <memset>
		lecc->status = status;
   12e78:	702f      	strb	r7, [r5, #0]
		return;
   12e7a:	e7a1      	b.n	12dc0 <hci_evt_encode+0xc4>
	lecc->status = 0x00;
   12e7c:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   12e7e:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = node_rx->role;
   12e82:	7a63      	ldrb	r3, [r4, #9]
   12e84:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type;
   12e86:	7aa3      	ldrb	r3, [r4, #10]
   12e88:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   12e8a:	2206      	movs	r2, #6
   12e8c:	f104 010b 	add.w	r1, r4, #11
   12e90:	3005      	adds	r0, #5
   12e92:	f007 f909 	bl	1a0a8 <memcpy>
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   12e96:	8a63      	ldrh	r3, [r4, #18]
   12e98:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   12e9c:	8aa3      	ldrh	r3, [r4, #20]
   12e9e:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   12ea2:	8ae3      	ldrh	r3, [r4, #22]
   12ea4:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = node_rx->sca;
   12ea8:	7e23      	ldrb	r3, [r4, #24]
   12eaa:	746b      	strb	r3, [r5, #17]
   12eac:	e788      	b.n	12dc0 <hci_evt_encode+0xc4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12eae:	6811      	ldr	r1, [r2, #0]
   12eb0:	463b      	mov	r3, r7
   12eb2:	f001 0210 	and.w	r2, r1, #16
   12eb6:	4313      	orrs	r3, r2
   12eb8:	d082      	beq.n	12dc0 <hci_evt_encode+0xc4>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
   12eba:	2204      	movs	r2, #4
   12ebc:	2105      	movs	r1, #5
   12ebe:	4628      	mov	r0, r5
   12ec0:	f00b fccb 	bl	1e85a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   12ec4:	2104      	movs	r1, #4
   12ec6:	f105 0008 	add.w	r0, r5, #8
   12eca:	f00c f917 	bl	1f0fc <net_buf_simple_add>
	conn_count--;
   12ece:	4a53      	ldr	r2, [pc, #332]	; (1301c <hci_evt_encode+0x320>)
	ep->status = 0x00;
   12ed0:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12ed2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
   12ed6:	7a23      	ldrb	r3, [r4, #8]
   12ed8:	70c3      	strb	r3, [r0, #3]
	conn_count--;
   12eda:	6813      	ldr	r3, [r2, #0]
   12edc:	3b01      	subs	r3, #1
   12ede:	6013      	str	r3, [r2, #0]
   12ee0:	e76e      	b.n	12dc0 <hci_evt_encode+0xc4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12ee2:	6851      	ldr	r1, [r2, #4]
   12ee4:	463a      	mov	r2, r7
   12ee6:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   12eea:	4313      	orrs	r3, r2
   12eec:	f43f af68 	beq.w	12dc0 <hci_evt_encode+0xc4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   12ef0:	4b49      	ldr	r3, [pc, #292]	; (13018 <hci_evt_encode+0x31c>)
   12ef2:	6819      	ldr	r1, [r3, #0]
   12ef4:	463b      	mov	r3, r7
   12ef6:	f001 0204 	and.w	r2, r1, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12efa:	4313      	orrs	r3, r2
   12efc:	f43f af60 	beq.w	12dc0 <hci_evt_encode+0xc4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   12f00:	2209      	movs	r2, #9
   12f02:	2103      	movs	r1, #3
   12f04:	4628      	mov	r0, r5
   12f06:	f00b fcb2 	bl	1e86e <meta_evt>
	sep->status = cu->status;
   12f0a:	7a23      	ldrb	r3, [r4, #8]
   12f0c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12f0e:	8963      	ldrh	r3, [r4, #10]
   12f10:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12f14:	89a3      	ldrh	r3, [r4, #12]
   12f16:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12f1a:	89e3      	ldrh	r3, [r4, #14]
	sep->handle = sys_cpu_to_le16(handle);
   12f1c:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12f20:	f8a0 3007 	strh.w	r3, [r0, #7]
   12f24:	e74c      	b.n	12dc0 <hci_evt_encode+0xc4>
	switch (pdu_data->llctrl.opcode) {
   12f26:	7ac3      	ldrb	r3, [r0, #11]
   12f28:	3b07      	subs	r3, #7
   12f2a:	2b08      	cmp	r3, #8
   12f2c:	f63f af25 	bhi.w	12d7a <hci_evt_encode+0x7e>
   12f30:	a201      	add	r2, pc, #4	; (adr r2, 12f38 <hci_evt_encode+0x23c>)
   12f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12f36:	bf00      	nop
   12f38:	00012ffd 	.word	0x00012ffd
   12f3c:	00012d7b 	.word	0x00012d7b
   12f40:	00012f5d 	.word	0x00012f5d
   12f44:	00012d7b 	.word	0x00012d7b
   12f48:	00012d7b 	.word	0x00012d7b
   12f4c:	00012f71 	.word	0x00012f71
   12f50:	00012d7b 	.word	0x00012d7b
   12f54:	00012d7b 	.word	0x00012d7b
   12f58:	00012fad 	.word	0x00012fad
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   12f5c:	460b      	mov	r3, r1
   12f5e:	4632      	mov	r2, r6
   12f60:	f100 0108 	add.w	r1, r0, #8
   12f64:	2000      	movs	r0, #0
}
   12f66:	b006      	add	sp, #24
   12f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   12f6c:	f7ff bad2 	b.w	12514 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
   12f70:	4b27      	ldr	r3, [pc, #156]	; (13010 <hci_evt_encode+0x314>)
   12f72:	6819      	ldr	r1, [r3, #0]
   12f74:	2700      	movs	r7, #0
   12f76:	f401 6200 	and.w	r2, r1, #2048	; 0x800
   12f7a:	463b      	mov	r3, r7
   12f7c:	4313      	orrs	r3, r2
   12f7e:	f43f af1f 	beq.w	12dc0 <hci_evt_encode+0xc4>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
   12f82:	2208      	movs	r2, #8
   12f84:	210c      	movs	r1, #12
   12f86:	4628      	mov	r0, r5
   12f88:	f00b fc67 	bl	1e85a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   12f8c:	2108      	movs	r1, #8
   12f8e:	1868      	adds	r0, r5, r1
   12f90:	f00c f8b4 	bl	1f0fc <net_buf_simple_add>
	ep->status = 0x00;
   12f94:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12f96:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
   12f9a:	7b23      	ldrb	r3, [r4, #12]
   12f9c:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = ver_ind->company_id;
   12f9e:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   12fa2:	8083      	strh	r3, [r0, #4]
	ep->subversion = ver_ind->sub_version_number;
   12fa4:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   12fa8:	80c3      	strh	r3, [r0, #6]
   12faa:	e709      	b.n	12dc0 <hci_evt_encode+0xc4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fac:	4b18      	ldr	r3, [pc, #96]	; (13010 <hci_evt_encode+0x314>)
   12fae:	6858      	ldr	r0, [r3, #4]
   12fb0:	2100      	movs	r1, #0
   12fb2:	460a      	mov	r2, r1
   12fb4:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12fb8:	4313      	orrs	r3, r2
   12fba:	d006      	beq.n	12fca <hci_evt_encode+0x2ce>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   12fbc:	4b16      	ldr	r3, [pc, #88]	; (13018 <hci_evt_encode+0x31c>)
   12fbe:	6818      	ldr	r0, [r3, #0]
   12fc0:	460b      	mov	r3, r1
   12fc2:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fc6:	4313      	orrs	r3, r2
   12fc8:	d109      	bne.n	12fde <hci_evt_encode+0x2e2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   12fca:	2300      	movs	r3, #0
   12fcc:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12fd0:	9300      	str	r3, [sp, #0]
   12fd2:	221a      	movs	r2, #26
   12fd4:	2102      	movs	r1, #2
   12fd6:	4630      	mov	r0, r6
   12fd8:	f00b fdf2 	bl	1ebc0 <ll_conn_update>
		return;
   12fdc:	e6f0      	b.n	12dc0 <hci_evt_encode+0xc4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   12fde:	220a      	movs	r2, #10
   12fe0:	2106      	movs	r1, #6
   12fe2:	4628      	mov	r0, r5
   12fe4:	f00b fc43 	bl	1e86e <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   12fe8:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   12fea:	89a3      	ldrh	r3, [r4, #12]
   12fec:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   12fee:	89e3      	ldrh	r3, [r4, #14]
   12ff0:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   12ff2:	8a23      	ldrh	r3, [r4, #16]
   12ff4:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   12ff6:	8a63      	ldrh	r3, [r4, #18]
   12ff8:	8103      	strh	r3, [r0, #8]
   12ffa:	e6e1      	b.n	12dc0 <hci_evt_encode+0xc4>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   12ffc:	7b03      	ldrb	r3, [r0, #12]
   12ffe:	2b0e      	cmp	r3, #14
   13000:	f47f aede 	bne.w	12dc0 <hci_evt_encode+0xc4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   13004:	460b      	mov	r3, r1
   13006:	4632      	mov	r2, r6
   13008:	2100      	movs	r1, #0
   1300a:	201a      	movs	r0, #26
   1300c:	e7ab      	b.n	12f66 <hci_evt_encode+0x26a>
   1300e:	bf00      	nop
   13010:	20007e28 	.word	0x20007e28
   13014:	ff030100 	.word	0xff030100
   13018:	20007e30 	.word	0x20007e30
   1301c:	2000122c 	.word	0x2000122c

00013020 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   13020:	4b06      	ldr	r3, [pc, #24]	; (1303c <hci_init+0x1c>)
   13022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13026:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1302a:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1302e:	4b04      	ldr	r3, [pc, #16]	; (13040 <hci_init+0x20>)
   13030:	201f      	movs	r0, #31
   13032:	2100      	movs	r1, #0
   13034:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   13038:	4770      	bx	lr
   1303a:	bf00      	nop
   1303c:	20007e28 	.word	0x20007e28
   13040:	20007e30 	.word	0x20007e30

00013044 <pdu_len_cmp>:
{
   13044:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
   13046:	4b0d      	ldr	r3, [pc, #52]	; (1307c <pdu_len_cmp+0x38>)
{
   13048:	b089      	sub	sp, #36	; 0x24
   1304a:	4605      	mov	r5, r0
   1304c:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
   1304e:	aa01      	add	r2, sp, #4
   13050:	f103 0718 	add.w	r7, r3, #24
   13054:	6818      	ldr	r0, [r3, #0]
   13056:	6859      	ldr	r1, [r3, #4]
   13058:	4614      	mov	r4, r2
   1305a:	c403      	stmia	r4!, {r0, r1}
   1305c:	3308      	adds	r3, #8
   1305e:	42bb      	cmp	r3, r7
   13060:	4622      	mov	r2, r4
   13062:	d1f7      	bne.n	13054 <pdu_len_cmp+0x10>
   13064:	881b      	ldrh	r3, [r3, #0]
   13066:	8023      	strh	r3, [r4, #0]
	return ctrl_len_lut[opcode] == len;
   13068:	ab08      	add	r3, sp, #32
   1306a:	441d      	add	r5, r3
   1306c:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   13070:	1b83      	subs	r3, r0, r6
   13072:	4258      	negs	r0, r3
   13074:	4158      	adcs	r0, r3
   13076:	b009      	add	sp, #36	; 0x24
   13078:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1307a:	bf00      	nop
   1307c:	00020019 	.word	0x00020019

00013080 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
   13080:	4b02      	ldr	r3, [pc, #8]	; (1308c <mayfly_xtal_start+0xc>)
   13082:	6818      	ldr	r0, [r3, #0]
   13084:	6843      	ldr	r3, [r0, #4]
   13086:	2100      	movs	r1, #0
   13088:	681b      	ldr	r3, [r3, #0]
   1308a:	4718      	bx	r3
   1308c:	20001230 	.word	0x20001230

00013090 <packet_rx_reserve_get>:
{
   13090:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   13092:	4b0e      	ldr	r3, [pc, #56]	; (130cc <packet_rx_reserve_get+0x3c>)
	    _radio.packet_rx_last) {
   13094:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
	if (_radio.packet_rx_acquire >=
   13098:	f893 113a 	ldrb.w	r1, [r3, #314]	; 0x13a
   1309c:	4291      	cmp	r1, r2
		return (_radio.packet_rx_count -
   1309e:	bf3b      	ittet	cc
   130a0:	f893 2138 	ldrbcc.w	r2, [r3, #312]	; 0x138
			_radio.packet_rx_last +
   130a4:	f893 4139 	ldrbcc.w	r4, [r3, #313]	; 0x139
			_radio.packet_rx_last);
   130a8:	f893 2139 	ldrbcs.w	r2, [r3, #313]	; 0x139
		return (_radio.packet_rx_count -
   130ac:	1b12      	subcc	r2, r2, r4
		return (_radio.packet_rx_acquire -
   130ae:	bf2c      	ite	cs
   130b0:	1a8a      	subcs	r2, r1, r2
			_radio.packet_rx_last +
   130b2:	1852      	addcc	r2, r2, r1
   130b4:	b2d2      	uxtb	r2, r2
	if (count > packet_rx_acquired_count_get()) {
   130b6:	4290      	cmp	r0, r2
	return _radio.packet_rx[_radio.packet_rx_last];
   130b8:	bf9b      	ittet	ls
   130ba:	f893 2139 	ldrbls.w	r2, [r3, #313]	; 0x139
   130be:	f8d3 3134 	ldrls.w	r3, [r3, #308]	; 0x134
		return 0;
   130c2:	2000      	movhi	r0, #0
	return _radio.packet_rx[_radio.packet_rx_last];
   130c4:	f853 0022 	ldrls.w	r0, [r3, r2, lsl #2]
}
   130c8:	bd10      	pop	{r4, pc}
   130ca:	bf00      	nop
   130cc:	20001230 	.word	0x20001230

000130d0 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_PHY */
#endif /* CONFIG_BT_CONN */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
   130d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
   130d4:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   130d6:	4294      	cmp	r4, r2
{
   130d8:	4681      	mov	r9, r0
   130da:	460f      	mov	r7, r1
   130dc:	4690      	mov	r8, r2
	if (_first == last) {
   130de:	d03a      	beq.n	13156 <tx_cmplt_get+0x86>
		return 0;
	}

	cmplt = 0U;
	*handle = _radio.pkt_release[_first].handle;
   130e0:	4e1e      	ldr	r6, [pc, #120]	; (1315c <tx_cmplt_get+0x8c>)
   130e2:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
   130e6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   130ea:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   130ec:	2500      	movs	r5, #0
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   130ee:	f506 7aae 	add.w	sl, r6, #348	; 0x15c
		if (*handle != _radio.pkt_release[_first].handle) {
   130f2:	b223      	sxth	r3, r4
   130f4:	f8d6 1168 	ldr.w	r1, [r6, #360]	; 0x168
   130f8:	f8b9 0000 	ldrh.w	r0, [r9]
   130fc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   13100:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   13104:	4298      	cmp	r0, r3
   13106:	d120      	bne.n	1314a <tx_cmplt_get+0x7a>
		node_tx = _radio.pkt_release[_first].node_tx;
   13108:	6850      	ldr	r0, [r2, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
   1310a:	2801      	cmp	r0, #1
   1310c:	f020 0103 	bic.w	r1, r0, #3
   13110:	d90a      	bls.n	13128 <tx_cmplt_get+0x58>
   13112:	b1f1      	cbz	r1, 13152 <tx_cmplt_get+0x82>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   13114:	1d03      	adds	r3, r0, #4
   13116:	d01c      	beq.n	13152 <tx_cmplt_get+0x82>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   13118:	7943      	ldrb	r3, [r0, #5]
   1311a:	b1d3      	cbz	r3, 13152 <tx_cmplt_get+0x82>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   1311c:	7903      	ldrb	r3, [r0, #4]
   1311e:	f003 0303 	and.w	r3, r3, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   13122:	3b01      	subs	r3, #1
   13124:	2b01      	cmp	r3, #1
   13126:	d814      	bhi.n	13152 <tx_cmplt_get+0x82>
			cmplt++;
   13128:	3501      	adds	r5, #1
   1312a:	b2ed      	uxtb	r5, r5
			_radio.pkt_release[_first].node_tx = (void *)1;
   1312c:	2301      	movs	r3, #1
   1312e:	6053      	str	r3, [r2, #4]
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   13130:	b111      	cbz	r1, 13138 <tx_cmplt_get+0x68>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   13132:	4651      	mov	r1, sl
   13134:	f00b fa77 	bl	1e626 <mem_release>
		}

		_first = _first + 1;
   13138:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
   1313a:	f896 316c 	ldrb.w	r3, [r6, #364]	; 0x16c
		_first = _first + 1;
   1313e:	b2e4      	uxtb	r4, r4
			_first = 0U;
   13140:	42a3      	cmp	r3, r4
   13142:	bf08      	it	eq
   13144:	2400      	moveq	r4, #0
		}

	} while (_first != last);
   13146:	4544      	cmp	r4, r8
   13148:	d1d3      	bne.n	130f2 <tx_cmplt_get+0x22>

	*first = _first;
   1314a:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
   1314c:	4628      	mov	r0, r5
   1314e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
   13152:	2302      	movs	r3, #2
   13154:	e7eb      	b.n	1312e <tx_cmplt_get+0x5e>
		return 0;
   13156:	2500      	movs	r5, #0
   13158:	e7f8      	b.n	1314c <tx_cmplt_get+0x7c>
   1315a:	bf00      	nop
   1315c:	20001230 	.word	0x20001230

00013160 <adv_scan_conn_configure>:
{
   13160:	b508      	push	{r3, lr}
	radio_reset();
   13162:	f001 ffbf 	bl	150e4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   13166:	2000      	movs	r0, #0
   13168:	f001 ffe6 	bl	15138 <radio_tx_power_set>
	radio_isr_set(isr, NULL);
   1316c:	2100      	movs	r1, #0
   1316e:	4802      	ldr	r0, [pc, #8]	; (13178 <adv_scan_conn_configure+0x18>)
}
   13170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_isr_set(isr, NULL);
   13174:	f001 bf96 	b.w	150a4 <radio_isr_set>
   13178:	000018a9 	.word	0x000018a9

0001317c <rx_fc_lock>:
}

#if defined(CONFIG_BT_CONN)
static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   1317c:	4a0b      	ldr	r2, [pc, #44]	; (131ac <rx_fc_lock+0x30>)
   1317e:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
   13182:	f892 1179 	ldrb.w	r1, [r2, #377]	; 0x179
   13186:	4299      	cmp	r1, r3
   13188:	d10e      	bne.n	131a8 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   1318a:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
   1318e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   13192:	f8a3 0172 	strh.w	r0, [r3, #370]	; 0x172
		req = _radio.fc_req + 1;
   13196:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
   1319a:	3301      	adds	r3, #1
   1319c:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0U;
   1319e:	2b03      	cmp	r3, #3
   131a0:	bf08      	it	eq
   131a2:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
   131a4:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
	}
}
   131a8:	4770      	bx	lr
   131aa:	bf00      	nop
   131ac:	20001230 	.word	0x20001230

000131b0 <ticker_start_conn_assert>:
{
   131b0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   131b2:	b108      	cbz	r0, 131b8 <ticker_start_conn_assert+0x8>
   131b4:	f00b fc25 	bl	1ea02 <chan_set.part.26>
	_radio.ticker_id_upd = 0;
   131b8:	4b01      	ldr	r3, [pc, #4]	; (131c0 <ticker_start_conn_assert+0x10>)
   131ba:	74d8      	strb	r0, [r3, #19]
}
   131bc:	bd08      	pop	{r3, pc}
   131be:	bf00      	nop
   131c0:	20001230 	.word	0x20001230

000131c4 <ticker_stop_conn_assert>:
{
   131c4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   131c6:	b108      	cbz	r0, 131cc <ticker_stop_conn_assert+0x8>
   131c8:	f00b fc1b 	bl	1ea02 <chan_set.part.26>
	_radio.ticker_id_upd = (u8_t)((u32_t)params & 0xFF);
   131cc:	4b01      	ldr	r3, [pc, #4]	; (131d4 <ticker_stop_conn_assert+0x10>)
   131ce:	b2c9      	uxtb	r1, r1
   131d0:	74d9      	strb	r1, [r3, #19]
}
   131d2:	bd08      	pop	{r3, pc}
   131d4:	20001230 	.word	0x20001230

000131d8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   131d8:	2801      	cmp	r0, #1
{
   131da:	b508      	push	{r3, lr}
   131dc:	4b09      	ldr	r3, [pc, #36]	; (13204 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
   131de:	d107      	bne.n	131f0 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   131e0:	7c9a      	ldrb	r2, [r3, #18]
   131e2:	2a05      	cmp	r2, #5
   131e4:	d102      	bne.n	131ec <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0U;
   131e6:	2200      	movs	r2, #0
   131e8:	749a      	strb	r2, [r3, #18]
}
   131ea:	bd08      	pop	{r3, pc}
   131ec:	f00b fc09 	bl	1ea02 <chan_set.part.26>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   131f0:	7c1b      	ldrb	r3, [r3, #16]
   131f2:	2b05      	cmp	r3, #5
   131f4:	d1f9      	bne.n	131ea <ticker_stop_adv_assert+0x12>
   131f6:	4040      	eors	r0, r0
   131f8:	f380 8811 	msr	BASEPRI, r0
   131fc:	f04f 0004 	mov.w	r0, #4
   13200:	df02      	svc	2
   13202:	bf00      	nop
   13204:	20001230 	.word	0x20001230

00013208 <ticker_update_adv_assert>:
{
   13208:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1320a:	b128      	cbz	r0, 13218 <ticker_update_adv_assert+0x10>
   1320c:	4b03      	ldr	r3, [pc, #12]	; (1321c <ticker_update_adv_assert+0x14>)
   1320e:	7c9b      	ldrb	r3, [r3, #18]
   13210:	2b05      	cmp	r3, #5
   13212:	d001      	beq.n	13218 <ticker_update_adv_assert+0x10>
   13214:	f00b fbf5 	bl	1ea02 <chan_set.part.26>
}
   13218:	bd08      	pop	{r3, pc}
   1321a:	bf00      	nop
   1321c:	20001230 	.word	0x20001230

00013220 <ticker_update_slave_assert>:
{
   13220:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   13222:	b148      	cbz	r0, 13238 <ticker_update_slave_assert+0x18>
   13224:	4b05      	ldr	r3, [pc, #20]	; (1323c <ticker_update_slave_assert+0x1c>)
   13226:	7c9a      	ldrb	r2, [r3, #18]
	u8_t ticker_id = (u32_t)params & 0xFF;
   13228:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1322a:	428a      	cmp	r2, r1
   1322c:	d004      	beq.n	13238 <ticker_update_slave_assert+0x18>
   1322e:	7cdb      	ldrb	r3, [r3, #19]
   13230:	428b      	cmp	r3, r1
   13232:	d001      	beq.n	13238 <ticker_update_slave_assert+0x18>
   13234:	f00b fbe5 	bl	1ea02 <chan_set.part.26>
}
   13238:	bd08      	pop	{r3, pc}
   1323a:	bf00      	nop
   1323c:	20001230 	.word	0x20001230

00013240 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
   13240:	4b04      	ldr	r3, [pc, #16]	; (13254 <ticker_job_disable+0x14>)
   13242:	7d5b      	ldrb	r3, [r3, #21]
   13244:	b123      	cbz	r3, 13250 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   13246:	2101      	movs	r1, #1
   13248:	2200      	movs	r2, #0
   1324a:	4608      	mov	r0, r1
   1324c:	f7fe b978 	b.w	11540 <mayfly_enable>
}
   13250:	4770      	bx	lr
   13252:	bf00      	nop
   13254:	20001230 	.word	0x20001230

00013258 <connection_get>:
{
   13258:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
   1325a:	4b0a      	ldr	r3, [pc, #40]	; (13284 <connection_get+0x2c>)
   1325c:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
   13260:	4282      	cmp	r2, r0
{
   13262:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
   13264:	d801      	bhi.n	1326a <connection_get+0x12>
	return 0;
   13266:	2000      	movs	r0, #0
}
   13268:	bd10      	pop	{r4, pc}
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   1326a:	4602      	mov	r2, r0
   1326c:	f44f 7196 	mov.w	r1, #300	; 0x12c
   13270:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   13274:	f00b f9ec 	bl	1e650 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   13278:	2800      	cmp	r0, #0
   1327a:	d0f4      	beq.n	13266 <connection_get+0xe>
   1327c:	8c03      	ldrh	r3, [r0, #32]
   1327e:	42a3      	cmp	r3, r4
   13280:	d1f1      	bne.n	13266 <connection_get+0xe>
   13282:	e7f1      	b.n	13268 <connection_get+0x10>
   13284:	20001230 	.word	0x20001230

00013288 <role_disable>:
{
   13288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1328c:	b087      	sub	sp, #28
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1328e:	2502      	movs	r5, #2
	switch (ticker_id_primary) {
   13290:	2805      	cmp	r0, #5
{
   13292:	4606      	mov	r6, r0
   13294:	4688      	mov	r8, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   13296:	9502      	str	r5, [sp, #8]
	switch (ticker_id_primary) {
   13298:	d00a      	beq.n	132b0 <role_disable+0x28>
   1329a:	2806      	cmp	r0, #6
   1329c:	d044      	beq.n	13328 <role_disable+0xa0>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1329e:	d93d      	bls.n	1331c <role_disable+0x94>
			conn_handle = ticker_id_primary -
   132a0:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   132a2:	b280      	uxth	r0, r0
   132a4:	f7ff ffd8 	bl	13258 <connection_get>
			if (!conn) {
   132a8:	b358      	cbz	r0, 13302 <role_disable+0x7a>
			ticks_active_to_start =
   132aa:	e9d0 7900 	ldrd	r7, r9, [r0]
		break;
   132ae:	e00e      	b.n	132ce <role_disable+0x46>
		ticks_xtal_to_start =
   132b0:	4b6b      	ldr	r3, [pc, #428]	; (13460 <role_disable+0x1d8>)
		ticks_active_to_start =
   132b2:	e9d3 7906 	ldrd	r7, r9, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   132b6:	ab02      	add	r3, sp, #8
   132b8:	9300      	str	r3, [sp, #0]
   132ba:	460a      	mov	r2, r1
   132bc:	4b69      	ldr	r3, [pc, #420]	; (13464 <role_disable+0x1dc>)
   132be:	2103      	movs	r1, #3
   132c0:	2000      	movs	r0, #0
   132c2:	f7fe feff 	bl	120c4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   132c6:	2802      	cmp	r0, #2
   132c8:	d021      	beq.n	1330e <role_disable+0x86>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   132ca:	9b02      	ldr	r3, [sp, #8]
   132cc:	bb1b      	cbnz	r3, 13316 <role_disable+0x8e>
	LL_ASSERT(!_radio.ticker_id_stop);
   132ce:	4c64      	ldr	r4, [pc, #400]	; (13460 <role_disable+0x1d8>)
   132d0:	7ca3      	ldrb	r3, [r4, #18]
   132d2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   132d6:	bb0b      	cbnz	r3, 1331c <role_disable+0x94>
	ret_cb = TICKER_STATUS_BUSY;
   132d8:	2302      	movs	r3, #2
	_radio.ticker_id_stop = ticker_id_primary;
   132da:	74a6      	strb	r6, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
   132dc:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   132de:	ab02      	add	r3, sp, #8
   132e0:	9300      	str	r3, [sp, #0]
   132e2:	4632      	mov	r2, r6
   132e4:	4b5f      	ldr	r3, [pc, #380]	; (13464 <role_disable+0x1dc>)
   132e6:	2103      	movs	r1, #3
   132e8:	4628      	mov	r0, r5
   132ea:	f7fe feeb 	bl	120c4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   132ee:	2802      	cmp	r0, #2
   132f0:	d01e      	beq.n	13330 <role_disable+0xa8>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   132f2:	9b02      	ldr	r3, [sp, #8]
   132f4:	b353      	cbz	r3, 1334c <role_disable+0xc4>
	_radio.ticker_id_stop = 0U;
   132f6:	2300      	movs	r3, #0
   132f8:	74a3      	strb	r3, [r4, #18]
	return ret_cb ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   132fa:	9b02      	ldr	r3, [sp, #8]
   132fc:	2b00      	cmp	r3, #0
   132fe:	bf18      	it	ne
   13300:	250c      	movne	r5, #12
}
   13302:	4628      	mov	r0, r5
   13304:	b007      	add	sp, #28
   13306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				cpu_sleep();
   1330a:	f00b fb44 	bl	1e996 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1330e:	9b02      	ldr	r3, [sp, #8]
   13310:	2b02      	cmp	r3, #2
   13312:	d0fa      	beq.n	1330a <role_disable+0x82>
   13314:	e7d9      	b.n	132ca <role_disable+0x42>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   13316:	9b02      	ldr	r3, [sp, #8]
   13318:	2b01      	cmp	r3, #1
   1331a:	d0d8      	beq.n	132ce <role_disable+0x46>
		LL_ASSERT(0);
   1331c:	4040      	eors	r0, r0
   1331e:	f380 8811 	msr	BASEPRI, r0
   13322:	f04f 0004 	mov.w	r0, #4
   13326:	df02      	svc	2
		ticks_xtal_to_start =
   13328:	4b4d      	ldr	r3, [pc, #308]	; (13460 <role_disable+0x1d8>)
		ticks_active_to_start =
   1332a:	e9d3 7934 	ldrd	r7, r9, [r3, #208]	; 0xd0
		break;
   1332e:	e7ce      	b.n	132ce <role_disable+0x46>
		if (_radio.ticker_id_event == ticker_id_primary) {
   13330:	7c63      	ldrb	r3, [r4, #17]
   13332:	42b3      	cmp	r3, r6
   13334:	d104      	bne.n	13340 <role_disable+0xb8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   13336:	2201      	movs	r2, #1
   13338:	4611      	mov	r1, r2
   1333a:	2003      	movs	r0, #3
   1333c:	f7fe f900 	bl	11540 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
   13340:	9b02      	ldr	r3, [sp, #8]
   13342:	2b02      	cmp	r3, #2
   13344:	d1d5      	bne.n	132f2 <role_disable+0x6a>
			cpu_sleep();
   13346:	f00b fb26 	bl	1e996 <cpu_sleep>
   1334a:	e7f9      	b.n	13340 <role_disable+0xb8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   1334c:	7c23      	ldrb	r3, [r4, #16]
   1334e:	42b3      	cmp	r3, r6
   13350:	d002      	beq.n	13358 <role_disable+0xd0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   13352:	7c63      	ldrb	r3, [r4, #17]
   13354:	42b3      	cmp	r3, r6
   13356:	d13a      	bne.n	133ce <role_disable+0x146>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   13358:	2302      	movs	r3, #2
   1335a:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1335c:	2200      	movs	r2, #0
   1335e:	ab03      	add	r3, sp, #12
   13360:	9300      	str	r3, [sp, #0]
   13362:	2103      	movs	r1, #3
   13364:	4b3f      	ldr	r3, [pc, #252]	; (13464 <role_disable+0x1dc>)
   13366:	4610      	mov	r0, r2
   13368:	f7fe feac 	bl	120c4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1336c:	2802      	cmp	r0, #2
   1336e:	d107      	bne.n	13380 <role_disable+0xf8>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   13370:	2201      	movs	r2, #1
   13372:	4611      	mov	r1, r2
   13374:	2003      	movs	r0, #3
   13376:	f7fe f8e3 	bl	11540 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
   1337a:	9b03      	ldr	r3, [sp, #12]
   1337c:	2b02      	cmp	r3, #2
   1337e:	d0cd      	beq.n	1331c <role_disable+0x94>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   13380:	9803      	ldr	r0, [sp, #12]
   13382:	2800      	cmp	r0, #0
   13384:	d137      	bne.n	133f6 <role_disable+0x16e>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   13386:	2302      	movs	r3, #2
   13388:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
   1338a:	7c23      	ldrb	r3, [r4, #16]
   1338c:	2b00      	cmp	r3, #0
   1338e:	d0c5      	beq.n	1331c <role_disable+0x94>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13390:	ab04      	add	r3, sp, #16
   13392:	9300      	str	r3, [sp, #0]
   13394:	2201      	movs	r2, #1
   13396:	4b33      	ldr	r3, [pc, #204]	; (13464 <role_disable+0x1dc>)
		_radio.ticker_id_prepare = 0U;
   13398:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1339a:	2103      	movs	r1, #3
   1339c:	f7fe fe92 	bl	120c4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   133a0:	2802      	cmp	r0, #2
   133a2:	d107      	bne.n	133b4 <role_disable+0x12c>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   133a4:	2201      	movs	r2, #1
   133a6:	4611      	mov	r1, r2
   133a8:	2003      	movs	r0, #3
   133aa:	f7fe f8c9 	bl	11540 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
   133ae:	9b04      	ldr	r3, [sp, #16]
   133b0:	2b02      	cmp	r3, #2
   133b2:	d0b3      	beq.n	1331c <role_disable+0x94>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   133b4:	9a04      	ldr	r2, [sp, #16]
   133b6:	b982      	cbnz	r2, 133da <role_disable+0x152>
			ticks_xtal_to_start &= ~XON_BITMASK;
   133b8:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   133bc:	45b9      	cmp	r9, r7
   133be:	d918      	bls.n	133f2 <role_disable+0x16a>
				ret = mayfly_enqueue(
   133c0:	4b29      	ldr	r3, [pc, #164]	; (13468 <role_disable+0x1e0>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   133c2:	4611      	mov	r1, r2
   133c4:	2003      	movs	r0, #3
   133c6:	f7fe f8e3 	bl	11590 <mayfly_enqueue>
			LL_ASSERT(!ret);
   133ca:	2800      	cmp	r0, #0
   133cc:	d1a6      	bne.n	1331c <role_disable+0x94>
	if (!_radio.ticker_id_stop) {
   133ce:	7ca3      	ldrb	r3, [r4, #18]
   133d0:	2b00      	cmp	r3, #0
   133d2:	d190      	bne.n	132f6 <role_disable+0x6e>
		ret_cb = TICKER_STATUS_FAILURE;
   133d4:	2301      	movs	r3, #1
   133d6:	9302      	str	r3, [sp, #8]
   133d8:	e78d      	b.n	132f6 <role_disable+0x6e>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   133da:	9b04      	ldr	r3, [sp, #16]
   133dc:	2b01      	cmp	r3, #1
   133de:	d19d      	bne.n	1331c <role_disable+0x94>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   133e0:	2200      	movs	r2, #0
   133e2:	4611      	mov	r1, r2
   133e4:	4b20      	ldr	r3, [pc, #128]	; (13468 <role_disable+0x1e0>)
   133e6:	2003      	movs	r0, #3
   133e8:	f7fe f8d2 	bl	11590 <mayfly_enqueue>
			LL_ASSERT(!ret);
   133ec:	4602      	mov	r2, r0
   133ee:	2800      	cmp	r0, #0
   133f0:	d194      	bne.n	1331c <role_disable+0x94>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   133f2:	4b1e      	ldr	r3, [pc, #120]	; (1346c <role_disable+0x1e4>)
   133f4:	e7e5      	b.n	133c2 <role_disable+0x13a>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   133f6:	9e03      	ldr	r6, [sp, #12]
   133f8:	2e01      	cmp	r6, #1
   133fa:	d18f      	bne.n	1331c <role_disable+0x94>
		if (ticker_id_stop != TICKER_NULL) {
   133fc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   13400:	d01a      	beq.n	13438 <role_disable+0x1b0>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
   13402:	2302      	movs	r3, #2
   13404:	9305      	str	r3, [sp, #20]
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13406:	ab05      	add	r3, sp, #20
   13408:	9300      	str	r3, [sp, #0]
   1340a:	4642      	mov	r2, r8
   1340c:	4b15      	ldr	r3, [pc, #84]	; (13464 <role_disable+0x1dc>)
   1340e:	2103      	movs	r1, #3
   13410:	2000      	movs	r0, #0
   13412:	f7fe fe57 	bl	120c4 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   13416:	2802      	cmp	r0, #2
   13418:	d108      	bne.n	1342c <role_disable+0x1a4>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1341a:	4632      	mov	r2, r6
   1341c:	4631      	mov	r1, r6
   1341e:	2003      	movs	r0, #3
   13420:	f7fe f88e 	bl	11540 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
   13424:	9b05      	ldr	r3, [sp, #20]
   13426:	2b02      	cmp	r3, #2
   13428:	f43f af78 	beq.w	1331c <role_disable+0x94>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
   1342c:	9b05      	ldr	r3, [sp, #20]
   1342e:	b11b      	cbz	r3, 13438 <role_disable+0x1b0>
   13430:	9b05      	ldr	r3, [sp, #20]
   13432:	2b01      	cmp	r3, #1
   13434:	f47f af72 	bne.w	1331c <role_disable+0x94>
		if (_radio.role != ROLE_NONE) {
   13438:	7d23      	ldrb	r3, [r4, #20]
   1343a:	2b00      	cmp	r3, #0
   1343c:	d0c7      	beq.n	133ce <role_disable+0x146>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   1343e:	4b0c      	ldr	r3, [pc, #48]	; (13470 <role_disable+0x1e8>)
   13440:	2204      	movs	r2, #4
   13442:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   13444:	2200      	movs	r2, #0
   13446:	4611      	mov	r1, r2
   13448:	2003      	movs	r0, #3
   1344a:	f7fe f8a1 	bl	11590 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1344e:	2800      	cmp	r0, #0
   13450:	f47f af64 	bne.w	1331c <role_disable+0x94>
			while (_radio.role != ROLE_NONE) {
   13454:	7d23      	ldrb	r3, [r4, #20]
   13456:	2b00      	cmp	r3, #0
   13458:	d0b9      	beq.n	133ce <role_disable+0x146>
				cpu_sleep();
   1345a:	f00b fa9c 	bl	1e996 <cpu_sleep>
   1345e:	e7f9      	b.n	13454 <role_disable+0x1cc>
   13460:	20001230 	.word	0x20001230
   13464:	0001e99f 	.word	0x0001e99f
   13468:	200090a8 	.word	0x200090a8
   1346c:	20009138 	.word	0x20009138
   13470:	200090d8 	.word	0x200090d8

00013474 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   13474:	2806      	cmp	r0, #6
{
   13476:	b510      	push	{r4, lr}
   13478:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1347a:	d90a      	bls.n	13492 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1347c:	4b09      	ldr	r3, [pc, #36]	; (134a4 <hdr_conn_get+0x30>)
				(ticker_id -
   1347e:	1fc2      	subs	r2, r0, #7
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   13480:	b292      	uxth	r2, r2
   13482:	f44f 7196 	mov.w	r1, #300	; 0x12c
   13486:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
   1348a:	f00b f8e1 	bl	1e650 <mem_get>
   1348e:	6020      	str	r0, [r4, #0]
}
   13490:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   13492:	2805      	cmp	r0, #5
   13494:	d004      	beq.n	134a0 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   13496:	2806      	cmp	r0, #6
		return &_radio.scanner.hdr;
   13498:	4803      	ldr	r0, [pc, #12]	; (134a8 <hdr_conn_get+0x34>)
   1349a:	bf18      	it	ne
   1349c:	2000      	movne	r0, #0
   1349e:	e7f7      	b.n	13490 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
   134a0:	4802      	ldr	r0, [pc, #8]	; (134ac <hdr_conn_get+0x38>)
   134a2:	e7f5      	b.n	13490 <hdr_conn_get+0x1c>
   134a4:	20001230 	.word	0x20001230
   134a8:	20001300 	.word	0x20001300
   134ac:	20001248 	.word	0x20001248

000134b0 <event_stop>:
	s_mfy_radio_stop.param = context;
   134b0:	4a06      	ldr	r2, [pc, #24]	; (134cc <event_stop+0x1c>)
{
   134b2:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   134b4:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   134b6:	4613      	mov	r3, r2
   134b8:	2200      	movs	r2, #0
   134ba:	4611      	mov	r1, r2
   134bc:	4610      	mov	r0, r2
   134be:	f7fe f867 	bl	11590 <mayfly_enqueue>
	LL_ASSERT(!retval);
   134c2:	b108      	cbz	r0, 134c8 <event_stop+0x18>
   134c4:	f00b fa9d 	bl	1ea02 <chan_set.part.26>
}
   134c8:	bd08      	pop	{r3, pc}
   134ca:	bf00      	nop
   134cc:	200090b8 	.word	0x200090b8

000134d0 <mayfly_xtal_retain.part.19>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
   134d0:	b508      	push	{r3, lr}
			s_xtal_retained = 0U;
   134d2:	4b0a      	ldr	r3, [pc, #40]	; (134fc <mayfly_xtal_retain.part.19+0x2c>)
   134d4:	2200      	movs	r2, #0
   134d6:	701a      	strb	r2, [r3, #0]
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   134d8:	4b09      	ldr	r3, [pc, #36]	; (13500 <mayfly_xtal_retain.part.19+0x30>)
   134da:	f103 0110 	add.w	r1, r3, #16
			retval = mayfly_enqueue(caller_id,
   134de:	2801      	cmp	r0, #1
   134e0:	bf08      	it	eq
   134e2:	460b      	moveq	r3, r1
   134e4:	4611      	mov	r1, r2
   134e6:	f7fe f853 	bl	11590 <mayfly_enqueue>
			LL_ASSERT(!retval);
   134ea:	b128      	cbz	r0, 134f8 <mayfly_xtal_retain.part.19+0x28>
   134ec:	4040      	eors	r0, r0
   134ee:	f380 8811 	msr	BASEPRI, r0
   134f2:	f04f 0004 	mov.w	r0, #4
   134f6:	df02      	svc	2
}
   134f8:	bd08      	pop	{r3, pc}
   134fa:	bf00      	nop
   134fc:	20002596 	.word	0x20002596
   13500:	20009108 	.word	0x20009108

00013504 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13504:	2200      	movs	r2, #0
{
   13506:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13508:	4611      	mov	r1, r2
   1350a:	4b04      	ldr	r3, [pc, #16]	; (1351c <event_active+0x18>)
   1350c:	4610      	mov	r0, r2
   1350e:	f7fe f83f 	bl	11590 <mayfly_enqueue>
	LL_ASSERT(!retval);
   13512:	b108      	cbz	r0, 13518 <event_active+0x14>
   13514:	f00b fa75 	bl	1ea02 <chan_set.part.26>
}
   13518:	bd08      	pop	{r3, pc}
   1351a:	bf00      	nop
   1351c:	20009078 	.word	0x20009078

00013520 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13520:	2200      	movs	r2, #0
{
   13522:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13524:	4611      	mov	r1, r2
   13526:	4b04      	ldr	r3, [pc, #16]	; (13538 <event_xtal+0x18>)
   13528:	4610      	mov	r0, r2
   1352a:	f7fe f831 	bl	11590 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1352e:	b108      	cbz	r0, 13534 <event_xtal+0x14>
   13530:	f00b fa67 	bl	1ea02 <chan_set.part.26>
}
   13534:	bd08      	pop	{r3, pc}
   13536:	bf00      	nop
   13538:	200090e8 	.word	0x200090e8

0001353c <mayfly_radio_active>:
{
   1353c:	b508      	push	{r3, lr}
   1353e:	4a0a      	ldr	r2, [pc, #40]	; (13568 <mayfly_radio_active+0x2c>)
   13540:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
   13542:	b138      	cbz	r0, 13554 <mayfly_radio_active+0x18>
		if (s_active++) {
   13544:	1c59      	adds	r1, r3, #1
   13546:	7011      	strb	r1, [r2, #0]
   13548:	b963      	cbnz	r3, 13564 <mayfly_radio_active+0x28>
		radio_active_callback(1);
   1354a:	2001      	movs	r0, #1
}
   1354c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
   13550:	f00b bc23 	b.w	1ed9a <radio_active_callback>
		LL_ASSERT(s_active);
   13554:	b90b      	cbnz	r3, 1355a <mayfly_radio_active+0x1e>
   13556:	f00b fa54 	bl	1ea02 <chan_set.part.26>
		if (--s_active) {
   1355a:	3b01      	subs	r3, #1
   1355c:	b2db      	uxtb	r3, r3
   1355e:	7013      	strb	r3, [r2, #0]
   13560:	2b00      	cmp	r3, #0
   13562:	d0f3      	beq.n	1354c <mayfly_radio_active+0x10>
}
   13564:	bd08      	pop	{r3, pc}
   13566:	bf00      	nop
   13568:	20002595 	.word	0x20002595

0001356c <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
   1356c:	b2c0      	uxtb	r0, r0
{
   1356e:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   13570:	1f03      	subs	r3, r0, #4
   13572:	2b01      	cmp	r3, #1
   13574:	d901      	bls.n	1357a <mayfly_radio_stop+0xe>
   13576:	f00b fa44 	bl	1ea02 <chan_set.part.26>
	radio_used = ((_radio.state != STATE_NONE) &&
   1357a:	4a08      	ldr	r2, [pc, #32]	; (1359c <mayfly_radio_stop+0x30>)
   1357c:	7d53      	ldrb	r3, [r2, #21]
		      (_radio.state != STATE_STOP) &&
   1357e:	b13b      	cbz	r3, 13590 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
   13580:	3b04      	subs	r3, #4
   13582:	2b01      	cmp	r3, #1
   13584:	d904      	bls.n	13590 <mayfly_radio_stop+0x24>
			_radio.state = state;
   13586:	7550      	strb	r0, [r2, #21]
}
   13588:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
   1358c:	f001 be4e 	b.w	1522c <radio_disable>
	if (radio_used || !radio_is_idle()) {
   13590:	f001 fe7e 	bl	15290 <radio_is_idle>
   13594:	2800      	cmp	r0, #0
   13596:	d0f7      	beq.n	13588 <mayfly_radio_stop+0x1c>
}
   13598:	bd08      	pop	{r3, pc}
   1359a:	bf00      	nop
   1359c:	20001230 	.word	0x20001230

000135a0 <pdu_node_tx_release>:
{
   135a0:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   135a2:	4a10      	ldr	r2, [pc, #64]	; (135e4 <pdu_node_tx_release+0x44>)
   135a4:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	if (last == _radio.packet_tx_count) {
   135a8:	f892 416c 	ldrb.w	r4, [r2, #364]	; 0x16c
	last = _radio.packet_release_last + 1;
   135ac:	3301      	adds	r3, #1
   135ae:	b2db      	uxtb	r3, r3
		last = 0U;
   135b0:	429c      	cmp	r4, r3
   135b2:	bf08      	it	eq
   135b4:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
   135b6:	f892 416f 	ldrb.w	r4, [r2, #367]	; 0x16f
   135ba:	429c      	cmp	r4, r3
   135bc:	d101      	bne.n	135c2 <pdu_node_tx_release+0x22>
   135be:	f00b fa20 	bl	1ea02 <chan_set.part.26>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   135c2:	f892 5170 	ldrb.w	r5, [r2, #368]	; 0x170
   135c6:	f8d2 4168 	ldr.w	r4, [r2, #360]	; 0x168
   135ca:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   135ce:	f892 0170 	ldrb.w	r0, [r2, #368]	; 0x170
   135d2:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   135d6:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
   135d8:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
}
   135dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
   135e0:	f001 ba28 	b.w	14a34 <radio_event_callback>
   135e4:	20001230 	.word	0x20001230

000135e8 <packet_tx_enqueue>:
{
   135e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   135ec:	4d25      	ldr	r5, [pc, #148]	; (13684 <packet_tx_enqueue+0x9c>)
{
   135ee:	4606      	mov	r6, r0
   135f0:	46a8      	mov	r8, r5
		node_tx_new->next = NULL;
   135f2:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   135f4:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
   135f8:	f895 216e 	ldrb.w	r2, [r5, #366]	; 0x16e
   135fc:	429a      	cmp	r2, r3
   135fe:	d036      	beq.n	1366e <packet_tx_enqueue+0x86>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   13600:	f895 916d 	ldrb.w	r9, [r5, #365]	; 0x16d
   13604:	f8d5 a164 	ldr.w	sl, [r5, #356]	; 0x164
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   13608:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
   1360c:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   13610:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   13614:	f44f 7196 	mov.w	r1, #300	; 0x12c
		node_tx_new = pdu_data_q_tx->node_tx;
   13618:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
   1361a:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1361c:	f00b f818 	bl	1e650 <mem_get>
   13620:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
   13622:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
   13626:	8c1a      	ldrh	r2, [r3, #32]
   13628:	4282      	cmp	r2, r0
   1362a:	d122      	bne.n	13672 <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
   1362c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   13630:	b942      	cbnz	r2, 13644 <packet_tx_enqueue+0x5c>
				if (conn->pkt_tx_head == 0) {
   13632:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
				conn->pkt_tx_data = node_tx_new;
   13636:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
				if (conn->pkt_tx_head == 0) {
   1363a:	b91a      	cbnz	r2, 13644 <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
   1363c:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
					conn->pkt_tx_last = NULL;
   13640:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			if (conn->pkt_tx_last) {
   13644:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   13648:	b102      	cbz	r2, 1364c <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
   1364a:	6014      	str	r4, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
   1364c:	f8c3 4124 	str.w	r4, [r3, #292]	; 0x124
		first = _radio.packet_tx_first + 1;
   13650:	f898 316d 	ldrb.w	r3, [r8, #365]	; 0x16d
		if (first == _radio.packet_tx_count) {
   13654:	f898 216c 	ldrb.w	r2, [r8, #364]	; 0x16c
		first = _radio.packet_tx_first + 1;
   13658:	3301      	adds	r3, #1
   1365a:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   1365c:	3e01      	subs	r6, #1
			first = 0U;
   1365e:	429a      	cmp	r2, r3
   13660:	bf08      	it	eq
   13662:	2300      	moveq	r3, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   13664:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		_radio.packet_tx_first = first;
   13668:	f888 316d 	strb.w	r3, [r8, #365]	; 0x16d
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1366c:	d1c2      	bne.n	135f4 <packet_tx_enqueue+0xc>
}
   1366e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   13672:	7923      	ldrb	r3, [r4, #4]
   13674:	f367 0301 	bfi	r3, r7, #0, #2
   13678:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   1367a:	4621      	mov	r1, r4
   1367c:	f7ff ff90 	bl	135a0 <pdu_node_tx_release>
   13680:	e7e6      	b.n	13650 <packet_tx_enqueue+0x68>
   13682:	bf00      	nop
   13684:	20001230 	.word	0x20001230

00013688 <connection_release>:
{
   13688:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1368a:	2201      	movs	r2, #1
{
   1368c:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1368e:	4611      	mov	r1, r2
   13690:	2000      	movs	r0, #0
   13692:	f7fd ff55 	bl	11540 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   13696:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1369a:	2100      	movs	r1, #0
   1369c:	f242 43e3 	movw	r3, #9443	; 0x24e3
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   136a0:	3207      	adds	r2, #7
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   136a2:	9300      	str	r3, [sp, #0]
   136a4:	4608      	mov	r0, r1
   136a6:	4b37      	ldr	r3, [pc, #220]	; (13784 <connection_release+0xfc>)
   136a8:	b2d2      	uxtb	r2, r2
   136aa:	f7fe fd0b 	bl	120c4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   136ae:	f030 0102 	bics.w	r1, r0, #2
   136b2:	d005      	beq.n	136c0 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   136b4:	4040      	eors	r0, r0
   136b6:	f380 8811 	msr	BASEPRI, r0
   136ba:	f04f 0004 	mov.w	r0, #4
   136be:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
   136c0:	4b31      	ldr	r3, [pc, #196]	; (13788 <connection_release+0x100>)
   136c2:	7d5a      	ldrb	r2, [r3, #21]
   136c4:	2a05      	cmp	r2, #5
   136c6:	461d      	mov	r5, r3
   136c8:	d11b      	bne.n	13702 <connection_release+0x7a>
					  conn->handle))) {
   136ca:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   136cc:	7c18      	ldrb	r0, [r3, #16]
   136ce:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
   136d0:	4290      	cmp	r0, r2
   136d2:	d116      	bne.n	13702 <connection_release+0x7a>
		_radio.ticker_id_prepare = 0U;
   136d4:	7419      	strb	r1, [r3, #16]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   136d6:	f242 43f4 	movw	r3, #9460	; 0x24f4
   136da:	9300      	str	r3, [sp, #0]
   136dc:	2201      	movs	r2, #1
   136de:	4b29      	ldr	r3, [pc, #164]	; (13784 <connection_release+0xfc>)
   136e0:	4608      	mov	r0, r1
   136e2:	f7fe fcef 	bl	120c4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   136e6:	f030 0202 	bics.w	r2, r0, #2
   136ea:	d1e3      	bne.n	136b4 <connection_release+0x2c>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   136ec:	f242 43fb 	movw	r3, #9467	; 0x24fb
   136f0:	9300      	str	r3, [sp, #0]
   136f2:	4611      	mov	r1, r2
   136f4:	4b23      	ldr	r3, [pc, #140]	; (13784 <connection_release+0xfc>)
   136f6:	4610      	mov	r0, r2
   136f8:	f7fe fce4 	bl	120c4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   136fc:	f030 0302 	bics.w	r3, r0, #2
   13700:	d1d8      	bne.n	136b4 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   13702:	e9d4 1345 	ldrd	r1, r3, [r4, #276]	; 0x114
   13706:	4299      	cmp	r1, r3
   13708:	d003      	beq.n	13712 <connection_release+0x8a>
   1370a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1370e:	4299      	cmp	r1, r3
   13710:	d101      	bne.n	13716 <connection_release+0x8e>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   13712:	4e1e      	ldr	r6, [pc, #120]	; (1378c <connection_release+0x104>)
   13714:	e010      	b.n	13738 <connection_release+0xb0>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   13716:	790b      	ldrb	r3, [r1, #4]
   13718:	f36f 0301 	bfc	r3, #0, #2
   1371c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1371e:	680b      	ldr	r3, [r1, #0]
   13720:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		pdu_node_tx_release(conn->handle, node_tx);
   13724:	8c20      	ldrh	r0, [r4, #32]
   13726:	f7ff ff3b 	bl	135a0 <pdu_node_tx_release>
   1372a:	e7ea      	b.n	13702 <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1372c:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1372e:	4631      	mov	r1, r6
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   13730:	e9c4 3345 	strd	r3, r3, [r4, #276]	; 0x114
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   13734:	f00a ff77 	bl	1e626 <mem_release>
	while ((conn->pkt_tx_head) &&
   13738:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1373c:	b118      	cbz	r0, 13746 <connection_release+0xbe>
   1373e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13742:	4298      	cmp	r0, r3
   13744:	d1f2      	bne.n	1372c <connection_release+0xa4>
	conn->pkt_tx_ctrl = NULL;
   13746:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
   13748:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
	while (conn->pkt_tx_head) {
   1374c:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   13750:	b951      	cbnz	r1, 13768 <connection_release+0xe0>
	conn->handle = 0xffff;
   13752:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13756:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   13758:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
   1375c:	42a3      	cmp	r3, r4
		_radio.conn_upd = NULL;
   1375e:	bf08      	it	eq
   13760:	f8c5 1180 	streq.w	r1, [r5, #384]	; 0x180
}
   13764:	b002      	add	sp, #8
   13766:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   13768:	790b      	ldrb	r3, [r1, #4]
   1376a:	f36f 0301 	bfc	r3, #0, #2
   1376e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13770:	680b      	ldr	r3, [r1, #0]
   13772:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		conn->pkt_tx_data = conn->pkt_tx_head;
   13776:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		pdu_node_tx_release(conn->handle, node_tx);
   1377a:	8c20      	ldrh	r0, [r4, #32]
   1377c:	f7ff ff10 	bl	135a0 <pdu_node_tx_release>
   13780:	e7e4      	b.n	1374c <connection_release+0xc4>
   13782:	bf00      	nop
   13784:	0001ea0f 	.word	0x0001ea0f
   13788:	20001230 	.word	0x20001230
   1378c:	20001384 	.word	0x20001384

00013790 <adv_setup>:
{
   13790:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   13792:	4c29      	ldr	r4, [pc, #164]	; (13838 <adv_setup+0xa8>)
   13794:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   13798:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
   1379c:	429a      	cmp	r2, r3
   1379e:	d006      	beq.n	137ae <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
   137a0:	3301      	adds	r3, #1
   137a2:	b2db      	uxtb	r3, r3
			first = 0U;
   137a4:	2b02      	cmp	r3, #2
   137a6:	bf08      	it	eq
   137a8:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
   137aa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (_radio.advertiser.scan_data.first != _radio.
   137ae:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   137b2:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
   137b6:	429a      	cmp	r2, r3
   137b8:	d006      	beq.n	137c8 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
   137ba:	3301      	adds	r3, #1
   137bc:	b2db      	uxtb	r3, r3
			first = 0U;
   137be:	2b02      	cmp	r3, #2
   137c0:	bf08      	it	eq
   137c2:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
   137c4:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	pdu = (void *)_radio.advertiser.adv_data.data
   137c8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   137cc:	232a      	movs	r3, #42	; 0x2a
   137ce:	2527      	movs	r5, #39	; 0x27
   137d0:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
   137d4:	1960      	adds	r0, r4, r5
   137d6:	f001 fd17 	bl	15208 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   137da:	5d63      	ldrb	r3, [r4, r5]
   137dc:	f003 030f 	and.w	r3, r3, #15
   137e0:	2b02      	cmp	r3, #2
   137e2:	d020      	beq.n	13826 <adv_setup+0x96>
		_radio.state = STATE_TX;
   137e4:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
   137e6:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   137e8:	7563      	strb	r3, [r4, #21]
		radio_tmr_tifs_set(RADIO_TIFS);
   137ea:	f001 fe0d 	bl	15408 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   137ee:	2000      	movs	r0, #0
   137f0:	f001 fd76 	bl	152e0 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
   137f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   137f8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   137fc:	b2da      	uxtb	r2, r3
	while ((bitmap & 0x01) == 0) {
   137fe:	2000      	movs	r0, #0
   13800:	07d5      	lsls	r5, r2, #31
   13802:	f100 0101 	add.w	r1, r0, #1
   13806:	d513      	bpl.n	13830 <adv_setup+0xa0>
	_radio.advertiser.chan_map_current &=
   13808:	b25b      	sxtb	r3, r3
		(_radio.advertiser.chan_map_current - 1);
   1380a:	1e5a      	subs	r2, r3, #1
	_radio.advertiser.chan_map_current &=
   1380c:	4013      	ands	r3, r2
   1380e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   13812:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
   13814:	f363 0202 	bfi	r2, r3, #0, #3
   13818:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
   1381c:	3025      	adds	r0, #37	; 0x25
}
   1381e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
   13822:	f00b b928 	b.w	1ea76 <chan_set>
		_radio.state = STATE_CLOSE;
   13826:	2303      	movs	r3, #3
   13828:	7563      	strb	r3, [r4, #21]
		radio_switch_complete_and_disable();
   1382a:	f001 fd6f 	bl	1530c <radio_switch_complete_and_disable>
   1382e:	e7e1      	b.n	137f4 <adv_setup+0x64>
		bitmap >>= 1;
   13830:	0852      	lsrs	r2, r2, #1
   13832:	4608      	mov	r0, r1
   13834:	e7e4      	b.n	13800 <adv_setup+0x70>
   13836:	bf00      	nop
   13838:	20001230 	.word	0x20001230

0001383c <packet_rx_enqueue>:
{
   1383c:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   1383e:	4a16      	ldr	r2, [pc, #88]	; (13898 <packet_rx_enqueue+0x5c>)
   13840:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
   13844:	f892 113a 	ldrb.w	r1, [r2, #314]	; 0x13a
   13848:	4299      	cmp	r1, r3
   1384a:	d105      	bne.n	13858 <packet_rx_enqueue+0x1c>
   1384c:	4040      	eors	r0, r0
   1384e:	f380 8811 	msr	BASEPRI, r0
   13852:	f04f 0004 	mov.w	r0, #4
   13856:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   13858:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
   1385c:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   13860:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   13864:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	link = node_rx->hdr.link;
   13868:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   1386a:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
   1386c:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
	if (last == _radio.packet_rx_count) {
   13870:	f892 4138 	ldrb.w	r4, [r2, #312]	; 0x138
	last = _radio.packet_rx_last + 1;
   13874:	3301      	adds	r3, #1
   13876:	b2db      	uxtb	r3, r3
		last = 0U;
   13878:	429c      	cmp	r4, r3
   1387a:	bf08      	it	eq
   1387c:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
   1387e:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   13882:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   13886:	f00a fefd 	bl	1e684 <memq_enqueue>
	LL_ASSERT(link);
   1388a:	b908      	cbnz	r0, 13890 <packet_rx_enqueue+0x54>
   1388c:	f00b f8b9 	bl	1ea02 <chan_set.part.26>
}
   13890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   13894:	f001 b8ce 	b.w	14a34 <radio_event_callback>
   13898:	20001230 	.word	0x20001230

0001389c <terminate_ind_rx_enqueue>:
{
   1389c:	4603      	mov	r3, r0
   1389e:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   138a0:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.link);
   138a4:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
{
   138a8:	b510      	push	{r4, lr}
	LL_ASSERT(node_rx->hdr.link);
   138aa:	b928      	cbnz	r0, 138b8 <terminate_ind_rx_enqueue+0x1c>
   138ac:	4040      	eors	r0, r0
   138ae:	f380 8811 	msr	BASEPRI, r0
   138b2:	f04f 0004 	mov.w	r0, #4
   138b6:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
   138b8:	8c1c      	ldrh	r4, [r3, #32]
   138ba:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
   138be:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   138c2:	2409      	movs	r4, #9
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   138c4:	4a08      	ldr	r2, [pc, #32]	; (138e8 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   138c6:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.packet_release_last = _radio.packet_release_last;
   138ca:	f892 4170 	ldrb.w	r4, [r2, #368]	; 0x170
   138ce:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   138d2:	f502 72a4 	add.w	r2, r2, #328	; 0x148
   138d6:	f00a fed5 	bl	1e684 <memq_enqueue>
	LL_ASSERT(link);
   138da:	b908      	cbnz	r0, 138e0 <terminate_ind_rx_enqueue+0x44>
   138dc:	f00b f891 	bl	1ea02 <chan_set.part.26>
}
   138e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   138e4:	f001 b8a6 	b.w	14a34 <radio_event_callback>
   138e8:	20001230 	.word	0x20001230

000138ec <prepare_normal_set>:
{
   138ec:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   138ee:	6804      	ldr	r4, [r0, #0]
   138f0:	2c00      	cmp	r4, #0
{
   138f2:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   138f4:	da19      	bge.n	1392a <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
   138f6:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   138fa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   138fe:	429d      	cmp	r5, r3
   13900:	bf38      	it	cc
   13902:	1ae4      	subcc	r4, r4, r3
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   13904:	4b0a      	ldr	r3, [pc, #40]	; (13930 <prepare_normal_set+0x44>)
   13906:	9305      	str	r3, [sp, #20]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   13908:	bf28      	it	cs
   1390a:	1b64      	subcs	r4, r4, r5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1390c:	2300      	movs	r3, #0
   1390e:	9006      	str	r0, [sp, #24]
   13910:	e9cd 3303 	strd	r3, r3, [sp, #12]
   13914:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13918:	4618      	mov	r0, r3
   1391a:	9400      	str	r4, [sp, #0]
   1391c:	f7fe fb8a 	bl	12034 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13920:	f030 0302 	bics.w	r3, r0, #2
   13924:	d001      	beq.n	1392a <prepare_normal_set+0x3e>
   13926:	f00b f86c 	bl	1ea02 <chan_set.part.26>
}
   1392a:	b009      	add	sp, #36	; 0x24
   1392c:	bd30      	pop	{r4, r5, pc}
   1392e:	bf00      	nop
   13930:	0001e9af 	.word	0x0001e9af

00013934 <ticker_stop_adv_stop>:
{
   13934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13936:	4c3e      	ldr	r4, [pc, #248]	; (13a30 <ticker_stop_adv_stop+0xfc>)
	if (status != TICKER_STATUS_SUCCESS) {
   13938:	b120      	cbz	r0, 13944 <ticker_stop_adv_stop+0x10>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   1393a:	7ca3      	ldrb	r3, [r4, #18]
   1393c:	2b05      	cmp	r3, #5
   1393e:	d074      	beq.n	13a2a <ticker_stop_adv_stop+0xf6>
   13940:	f00b f85f 	bl	1ea02 <chan_set.part.26>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   13944:	7c23      	ldrb	r3, [r4, #16]
   13946:	2b05      	cmp	r3, #5
   13948:	d002      	beq.n	13950 <ticker_stop_adv_stop+0x1c>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   1394a:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   1394c:	2b05      	cmp	r3, #5
   1394e:	d164      	bne.n	13a1a <ticker_stop_adv_stop+0xe6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   13950:	2302      	movs	r3, #2
   13952:	9302      	str	r3, [sp, #8]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13954:	2200      	movs	r2, #0
   13956:	ab02      	add	r3, sp, #8
   13958:	9300      	str	r3, [sp, #0]
   1395a:	2101      	movs	r1, #1
   1395c:	4b35      	ldr	r3, [pc, #212]	; (13a34 <ticker_stop_adv_stop+0x100>)
   1395e:	4610      	mov	r0, r2
   13960:	f7fe fbb0 	bl	120c4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   13964:	2802      	cmp	r0, #2
   13966:	d00d      	beq.n	13984 <ticker_stop_adv_stop+0x50>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   13968:	9802      	ldr	r0, [sp, #8]
   1396a:	b1c0      	cbz	r0, 1399e <ticker_stop_adv_stop+0x6a>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   1396c:	9802      	ldr	r0, [sp, #8]
   1396e:	2801      	cmp	r0, #1
   13970:	d119      	bne.n	139a6 <ticker_stop_adv_stop+0x72>
		if (_radio.role != ROLE_NONE) {
   13972:	7d23      	ldrb	r3, [r4, #20]
   13974:	2b00      	cmp	r3, #0
   13976:	d050      	beq.n	13a1a <ticker_stop_adv_stop+0xe6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   13978:	4b2f      	ldr	r3, [pc, #188]	; (13a38 <ticker_stop_adv_stop+0x104>)
   1397a:	2204      	movs	r2, #4
   1397c:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1397e:	2200      	movs	r2, #0
   13980:	4611      	mov	r1, r2
   13982:	e046      	b.n	13a12 <ticker_stop_adv_stop+0xde>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   13984:	2201      	movs	r2, #1
   13986:	4611      	mov	r1, r2
   13988:	4610      	mov	r0, r2
   1398a:	f7fd fdd9 	bl	11540 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
   1398e:	9b02      	ldr	r3, [sp, #8]
   13990:	2b02      	cmp	r3, #2
   13992:	d1e9      	bne.n	13968 <ticker_stop_adv_stop+0x34>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   13994:	2101      	movs	r1, #1
   13996:	2000      	movs	r0, #0
   13998:	f7fe fc44 	bl	12224 <ticker_job_sched>
   1399c:	e7f7      	b.n	1398e <ticker_stop_adv_stop+0x5a>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   1399e:	2302      	movs	r3, #2
   139a0:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   139a2:	7c23      	ldrb	r3, [r4, #16]
   139a4:	b92b      	cbnz	r3, 139b2 <ticker_stop_adv_stop+0x7e>
	LL_ASSERT(!retval);
   139a6:	4040      	eors	r0, r0
   139a8:	f380 8811 	msr	BASEPRI, r0
   139ac:	f04f 0004 	mov.w	r0, #4
   139b0:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   139b2:	ab03      	add	r3, sp, #12
   139b4:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0U;
   139b6:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   139b8:	4611      	mov	r1, r2
   139ba:	9300      	str	r3, [sp, #0]
   139bc:	4b1d      	ldr	r3, [pc, #116]	; (13a34 <ticker_stop_adv_stop+0x100>)
   139be:	f7fe fb81 	bl	120c4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   139c2:	2802      	cmp	r0, #2
   139c4:	d00f      	beq.n	139e6 <ticker_stop_adv_stop+0xb2>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   139c6:	9a03      	ldr	r2, [sp, #12]
   139c8:	b1d2      	cbz	r2, 13a00 <ticker_stop_adv_stop+0xcc>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   139ca:	9c03      	ldr	r4, [sp, #12]
   139cc:	2c01      	cmp	r4, #1
   139ce:	d1ea      	bne.n	139a6 <ticker_stop_adv_stop+0x72>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   139d0:	2200      	movs	r2, #0
   139d2:	4611      	mov	r1, r2
   139d4:	4b19      	ldr	r3, [pc, #100]	; (13a3c <ticker_stop_adv_stop+0x108>)
   139d6:	4620      	mov	r0, r4
   139d8:	f7fd fdda 	bl	11590 <mayfly_enqueue>
			LL_ASSERT(!ret);
   139dc:	4602      	mov	r2, r0
   139de:	2800      	cmp	r0, #0
   139e0:	d1e1      	bne.n	139a6 <ticker_stop_adv_stop+0x72>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   139e2:	4b17      	ldr	r3, [pc, #92]	; (13a40 <ticker_stop_adv_stop+0x10c>)
   139e4:	e013      	b.n	13a0e <ticker_stop_adv_stop+0xda>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   139e6:	2201      	movs	r2, #1
   139e8:	4611      	mov	r1, r2
   139ea:	4610      	mov	r0, r2
   139ec:	f7fd fda8 	bl	11540 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
   139f0:	9b03      	ldr	r3, [sp, #12]
   139f2:	2b02      	cmp	r3, #2
   139f4:	d1e7      	bne.n	139c6 <ticker_stop_adv_stop+0x92>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   139f6:	2101      	movs	r1, #1
   139f8:	2000      	movs	r0, #0
   139fa:	f7fe fc13 	bl	12224 <ticker_job_sched>
   139fe:	e7f7      	b.n	139f0 <ticker_stop_adv_stop+0xbc>
			u32_t ticks_xtal_to_start =
   13a00:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
   13a02:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
   13a04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   13a08:	428b      	cmp	r3, r1
   13a0a:	d2ea      	bcs.n	139e2 <ticker_stop_adv_stop+0xae>
				ret = mayfly_enqueue(
   13a0c:	4b0b      	ldr	r3, [pc, #44]	; (13a3c <ticker_stop_adv_stop+0x108>)
   13a0e:	4611      	mov	r1, r2
   13a10:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   13a12:	f7fd fdbd 	bl	11590 <mayfly_enqueue>
			LL_ASSERT(!ret);
   13a16:	2800      	cmp	r0, #0
   13a18:	d1c5      	bne.n	139a6 <ticker_stop_adv_stop+0x72>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   13a1a:	2200      	movs	r2, #0
   13a1c:	4b09      	ldr	r3, [pc, #36]	; (13a44 <ticker_stop_adv_stop+0x110>)
   13a1e:	4611      	mov	r1, r2
   13a20:	2001      	movs	r0, #1
   13a22:	f7fd fdb5 	bl	11590 <mayfly_enqueue>
	LL_ASSERT(!retval);
   13a26:	2800      	cmp	r0, #0
   13a28:	d1bd      	bne.n	139a6 <ticker_stop_adv_stop+0x72>
}
   13a2a:	b004      	add	sp, #16
   13a2c:	bd10      	pop	{r4, pc}
   13a2e:	bf00      	nop
   13a30:	20001230 	.word	0x20001230
   13a34:	0001e99f 	.word	0x0001e99f
   13a38:	200090c8 	.word	0x200090c8
   13a3c:	20009098 	.word	0x20009098
   13a40:	20009128 	.word	0x20009128
   13a44:	20009068 	.word	0x20009068

00013a48 <adv_scan_configure.constprop.47>:
static void adv_scan_configure(u8_t phy, u8_t flags)
   13a48:	b507      	push	{r0, r1, r2, lr}
	u32_t aa = 0x8e89bed6;
   13a4a:	4b0c      	ldr	r3, [pc, #48]	; (13a7c <adv_scan_configure.constprop.47+0x34>)
   13a4c:	9301      	str	r3, [sp, #4]
	adv_scan_conn_configure();
   13a4e:	f7ff fb87 	bl	13160 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   13a52:	2100      	movs	r1, #0
   13a54:	4608      	mov	r0, r1
   13a56:	f001 fb5f 	bl	15118 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   13a5a:	a801      	add	r0, sp, #4
   13a5c:	f001 fb8a 	bl	15174 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   13a60:	2200      	movs	r2, #0
   13a62:	2125      	movs	r1, #37	; 0x25
   13a64:	2008      	movs	r0, #8
   13a66:	f001 fb9d 	bl	151a4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   13a6a:	4905      	ldr	r1, [pc, #20]	; (13a80 <adv_scan_configure.constprop.47+0x38>)
   13a6c:	f240 605b 	movw	r0, #1627	; 0x65b
   13a70:	f001 fc18 	bl	152a4 <radio_crc_configure>
}
   13a74:	b003      	add	sp, #12
   13a76:	f85d fb04 	ldr.w	pc, [sp], #4
   13a7a:	bf00      	nop
   13a7c:	8e89bed6 	.word	0x8e89bed6
   13a80:	00555555 	.word	0x00555555

00013a84 <event_stop.constprop.48>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   13a84:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   13a86:	4b05      	ldr	r3, [pc, #20]	; (13a9c <event_stop.constprop.48+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13a88:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
   13a8a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13a8c:	4611      	mov	r1, r2
   13a8e:	4610      	mov	r0, r2
   13a90:	f7fd fd7e 	bl	11590 <mayfly_enqueue>
	LL_ASSERT(!retval);
   13a94:	b108      	cbz	r0, 13a9a <event_stop.constprop.48+0x16>
   13a96:	f00a ffb4 	bl	1ea02 <chan_set.part.26>
}
   13a9a:	bd08      	pop	{r3, pc}
   13a9c:	200090b8 	.word	0x200090b8

00013aa0 <event_common_prepare>:
{
   13aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   13aa4:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   13aa6:	681d      	ldr	r5, [r3, #0]
{
   13aa8:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
   13aaa:	2c00      	cmp	r4, #0
{
   13aac:	4681      	mov	r9, r0
   13aae:	910b      	str	r1, [sp, #44]	; 0x2c
   13ab0:	4690      	mov	r8, r2
   13ab2:	469b      	mov	fp, r3
   13ab4:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
   13ab8:	da03      	bge.n	13ac2 <event_common_prepare+0x22>
		_ticks_xtal_to_start = MAX(_ticks_active_to_start,
   13aba:	9c16      	ldr	r4, [sp, #88]	; 0x58
   13abc:	42ac      	cmp	r4, r5
   13abe:	bf38      	it	cc
   13ac0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   13ac2:	42ac      	cmp	r4, r5
   13ac4:	4f4e      	ldr	r7, [pc, #312]	; (13c00 <event_common_prepare+0x160>)
   13ac6:	d91b      	bls.n	13b00 <event_common_prepare+0x60>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13ac8:	f241 63d7 	movw	r3, #5847	; 0x16d7
   13acc:	e9cd 7307 	strd	r7, r3, [sp, #28]
   13ad0:	4b4c      	ldr	r3, [pc, #304]	; (13c04 <event_common_prepare+0x164>)
   13ad2:	2100      	movs	r1, #0
   13ad4:	e9cd 1304 	strd	r1, r3, [sp, #16]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   13ad8:	1b63      	subs	r3, r4, r5
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13ada:	9300      	str	r3, [sp, #0]
   13adc:	9106      	str	r1, [sp, #24]
   13ade:	464b      	mov	r3, r9
   13ae0:	e9cd 1102 	strd	r1, r1, [sp, #8]
   13ae4:	9101      	str	r1, [sp, #4]
   13ae6:	2201      	movs	r2, #1
   13ae8:	4608      	mov	r0, r1
   13aea:	f7fe fa59 	bl	11fa0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13aee:	f030 0302 	bics.w	r3, r0, #2
   13af2:	d02b      	beq.n	13b4c <event_common_prepare+0xac>
		LL_ASSERT(!retval);
   13af4:	4040      	eors	r0, r0
   13af6:	f380 8811 	msr	BASEPRI, r0
   13afa:	f04f 0004 	mov.w	r0, #4
   13afe:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   13b00:	d21d      	bcs.n	13b3e <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
   13b02:	2300      	movs	r3, #0
   13b04:	461a      	mov	r2, r3
   13b06:	4619      	mov	r1, r3
   13b08:	4618      	mov	r0, r3
   13b0a:	f7ff fcfb 	bl	13504 <event_active>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13b0e:	f241 63ec 	movw	r3, #5868	; 0x16ec
   13b12:	e9cd 7307 	strd	r7, r3, [sp, #28]
   13b16:	4b3c      	ldr	r3, [pc, #240]	; (13c08 <event_common_prepare+0x168>)
   13b18:	2100      	movs	r1, #0
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   13b1a:	1b2c      	subs	r4, r5, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13b1c:	e9cd 1304 	strd	r1, r3, [sp, #16]
   13b20:	9106      	str	r1, [sp, #24]
   13b22:	464b      	mov	r3, r9
   13b24:	e9cd 1102 	strd	r1, r1, [sp, #8]
   13b28:	e9cd 4100 	strd	r4, r1, [sp]
   13b2c:	2201      	movs	r2, #1
   13b2e:	4608      	mov	r0, r1
   13b30:	f7fe fa36 	bl	11fa0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13b34:	f030 0302 	bics.w	r3, r0, #2
   13b38:	d1dc      	bne.n	13af4 <event_common_prepare+0x54>
   13b3a:	462c      	mov	r4, r5
   13b3c:	e00b      	b.n	13b56 <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
   13b3e:	2300      	movs	r3, #0
   13b40:	461a      	mov	r2, r3
   13b42:	4619      	mov	r1, r3
   13b44:	4618      	mov	r0, r3
   13b46:	f7ff fcdd 	bl	13504 <event_active>
		event_xtal(0, 0, 0, NULL);
   13b4a:	2300      	movs	r3, #0
   13b4c:	461a      	mov	r2, r3
   13b4e:	4619      	mov	r1, r3
   13b50:	4618      	mov	r0, r3
   13b52:	f7ff fce5 	bl	13520 <event_xtal>
	_radio.remainder_anchor = remainder;
   13b56:	4e2d      	ldr	r6, [pc, #180]	; (13c0c <event_common_prepare+0x16c>)
   13b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13b5a:	60f3      	str	r3, [r6, #12]
		ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13b5c:	f241 7304 	movw	r3, #5892	; 0x1704
   13b60:	e9cd 7307 	strd	r7, r3, [sp, #28]
   13b64:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13b66:	9306      	str	r3, [sp, #24]
   13b68:	2200      	movs	r2, #0
   13b6a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13b6c:	9305      	str	r3, [sp, #20]
   13b6e:	e9cd 2203 	strd	r2, r2, [sp, #12]
   13b72:	464b      	mov	r3, r9
   13b74:	e9cd 2201 	strd	r2, r2, [sp, #4]
   13b78:	9400      	str	r4, [sp, #0]
   13b7a:	4611      	mov	r1, r2
   13b7c:	4610      	mov	r0, r2
   13b7e:	f7fe fa0f 	bl	11fa0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13b82:	f030 0302 	bics.w	r3, r0, #2
   13b86:	d1b5      	bne.n	13af4 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   13b88:	2005      	movs	r0, #5
   13b8a:	f7ff ff7b 	bl	13a84 <event_stop.constprop.48>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   13b8e:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
   13b92:	42ab      	cmp	r3, r5
   13b94:	d022      	beq.n	13bdc <event_common_prepare+0x13c>
		*ticks_active_to_start = _radio.ticks_active_to_start;
   13b96:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
   13b9a:	f8d8 3000 	ldr.w	r3, [r8]
   13b9e:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
   13ba0:	bfbc      	itt	lt
   13ba2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   13ba6:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = MAX(_radio.ticks_active_to_start,
   13baa:	f8d8 3000 	ldr.w	r3, [r8]
   13bae:	f8d6 217c 	ldr.w	r2, [r6, #380]	; 0x17c
   13bb2:	4293      	cmp	r3, r2
   13bb4:	bf38      	it	cc
   13bb6:	4613      	movcc	r3, r2
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   13bb8:	2100      	movs	r1, #0
   13bba:	f241 7232 	movw	r2, #5938	; 0x1732
   13bbe:	e9cd 7205 	strd	r7, r2, [sp, #20]
   13bc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
   13bc6:	9300      	str	r3, [sp, #0]
   13bc8:	e9cd 1103 	strd	r1, r1, [sp, #12]
   13bcc:	4623      	mov	r3, r4
   13bce:	4652      	mov	r2, sl
   13bd0:	4608      	mov	r0, r1
   13bd2:	f7fe fa2f 	bl	12034 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13bd6:	f030 0302 	bics.w	r3, r0, #2
   13bda:	d18b      	bne.n	13af4 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
   13bdc:	20ff      	movs	r0, #255	; 0xff
   13bde:	f7ff fd03 	bl	135e8 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   13be2:	4b0b      	ldr	r3, [pc, #44]	; (13c10 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13be4:	2201      	movs	r2, #1
   13be6:	4611      	mov	r1, r2
   13be8:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   13bea:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13bee:	f7fd fccf 	bl	11590 <mayfly_enqueue>
		LL_ASSERT(!retval);
   13bf2:	2800      	cmp	r0, #0
   13bf4:	f47f af7e 	bne.w	13af4 <event_common_prepare+0x54>
}
   13bf8:	b00d      	add	sp, #52	; 0x34
   13bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bfe:	bf00      	nop
   13c00:	0001ea0f 	.word	0x0001ea0f
   13c04:	00013505 	.word	0x00013505
   13c08:	00013521 	.word	0x00013521
   13c0c:	20001230 	.word	0x20001230
   13c10:	20009148 	.word	0x20009148

00013c14 <radio_event_adv_prepare>:
{
   13c14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   13c16:	4a0b      	ldr	r2, [pc, #44]	; (13c44 <radio_event_adv_prepare+0x30>)
   13c18:	7c13      	ldrb	r3, [r2, #16]
   13c1a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   13c1e:	b10b      	cbz	r3, 13c24 <radio_event_adv_prepare+0x10>
   13c20:	f00a feef 	bl	1ea02 <chan_set.part.26>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   13c24:	2305      	movs	r3, #5
   13c26:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   13c28:	9403      	str	r4, [sp, #12]
   13c2a:	4c07      	ldr	r4, [pc, #28]	; (13c48 <radio_event_adv_prepare+0x34>)
   13c2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   13c30:	6a13      	ldr	r3, [r2, #32]
   13c32:	9300      	str	r3, [sp, #0]
   13c34:	f102 031c 	add.w	r3, r2, #28
   13c38:	3218      	adds	r2, #24
   13c3a:	f7ff ff31 	bl	13aa0 <event_common_prepare>
}
   13c3e:	b004      	add	sp, #16
   13c40:	bd10      	pop	{r4, pc}
   13c42:	bf00      	nop
   13c44:	20001230 	.word	0x20001230
   13c48:	00013f55 	.word	0x00013f55

00013c4c <event_scan_prepare>:
{
   13c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   13c4e:	4a0b      	ldr	r2, [pc, #44]	; (13c7c <event_scan_prepare+0x30>)
   13c50:	7c13      	ldrb	r3, [r2, #16]
   13c52:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   13c56:	b10b      	cbz	r3, 13c5c <event_scan_prepare+0x10>
   13c58:	f00a fed3 	bl	1ea02 <chan_set.part.26>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   13c5c:	2306      	movs	r3, #6
   13c5e:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   13c60:	9403      	str	r4, [sp, #12]
   13c62:	4c07      	ldr	r4, [pc, #28]	; (13c80 <event_scan_prepare+0x34>)
   13c64:	e9cd 3401 	strd	r3, r4, [sp, #4]
   13c68:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   13c6c:	9300      	str	r3, [sp, #0]
   13c6e:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
   13c72:	32d0      	adds	r2, #208	; 0xd0
   13c74:	f7ff ff14 	bl	13aa0 <event_common_prepare>
}
   13c78:	b004      	add	sp, #16
   13c7a:	bd10      	pop	{r4, pc}
   13c7c:	20001230 	.word	0x20001230
   13c80:	000141ad 	.word	0x000141ad

00013c84 <event_adv_stop>:
{
   13c84:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   13c86:	2005      	movs	r0, #5
   13c88:	f7ff fefc 	bl	13a84 <event_stop.constprop.48>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13c8c:	2100      	movs	r1, #0
   13c8e:	4b07      	ldr	r3, [pc, #28]	; (13cac <event_adv_stop+0x28>)
   13c90:	9100      	str	r1, [sp, #0]
   13c92:	2205      	movs	r2, #5
   13c94:	4608      	mov	r0, r1
   13c96:	f7fe fa15 	bl	120c4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c9a:	f030 0302 	bics.w	r3, r0, #2
   13c9e:	d001      	beq.n	13ca4 <event_adv_stop+0x20>
   13ca0:	f00a feaf 	bl	1ea02 <chan_set.part.26>
}
   13ca4:	b003      	add	sp, #12
   13ca6:	f85d fb04 	ldr.w	pc, [sp], #4
   13caa:	bf00      	nop
   13cac:	00013935 	.word	0x00013935

00013cb0 <packet_rx_allocate.constprop.49>:
static void packet_rx_allocate(u8_t max)
   13cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
   13cb4:	4d21      	ldr	r5, [pc, #132]	; (13d3c <packet_rx_allocate.constprop.49+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
   13cb6:	f895 413a 	ldrb.w	r4, [r5, #314]	; 0x13a
	if (acquire == _radio.packet_rx_count) {
   13cba:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
	if (max > _radio.link_rx_data_quota) {
   13cbe:	f895 914c 	ldrb.w	r9, [r5, #332]	; 0x14c
	acquire = _radio.packet_rx_acquire + 1;
   13cc2:	3401      	adds	r4, #1
   13cc4:	b2e4      	uxtb	r4, r4
		acquire = 0U;
   13cc6:	42a3      	cmp	r3, r4
   13cc8:	bf08      	it	eq
   13cca:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
   13ccc:	f505 77a0 	add.w	r7, r5, #320	; 0x140
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   13cd0:	f505 7894 	add.w	r8, r5, #296	; 0x128
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   13cd4:	f1b9 0f00 	cmp.w	r9, #0
   13cd8:	d003      	beq.n	13ce2 <packet_rx_allocate.constprop.49+0x32>
   13cda:	f895 3139 	ldrb.w	r3, [r5, #313]	; 0x139
   13cde:	429c      	cmp	r4, r3
   13ce0:	d101      	bne.n	13ce6 <packet_rx_allocate.constprop.49+0x36>
}
   13ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
   13ce6:	4638      	mov	r0, r7
   13ce8:	f00a fc84 	bl	1e5f4 <mem_acquire>
		if (!link) {
   13cec:	4606      	mov	r6, r0
   13cee:	2800      	cmp	r0, #0
   13cf0:	d0f7      	beq.n	13ce2 <packet_rx_allocate.constprop.49+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   13cf2:	4640      	mov	r0, r8
   13cf4:	f00a fc7e 	bl	1e5f4 <mem_acquire>
		if (!node_rx) {
   13cf8:	b928      	cbnz	r0, 13d06 <packet_rx_allocate.constprop.49+0x56>
			mem_release(link, &_radio.link_rx_free);
   13cfa:	4630      	mov	r0, r6
   13cfc:	4910      	ldr	r1, [pc, #64]	; (13d40 <packet_rx_allocate.constprop.49+0x90>)
}
   13cfe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
   13d02:	f00a bc90 	b.w	1e626 <mem_release>
		node_rx->hdr.link = link;
   13d06:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
   13d08:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
   13d0c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   13d10:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
   13d14:	f885 413a 	strb.w	r4, [r5, #314]	; 0x13a
		if (acquire == _radio.packet_rx_count) {
   13d18:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
		acquire = _radio.packet_rx_acquire + 1;
   13d1c:	3401      	adds	r4, #1
   13d1e:	b2e4      	uxtb	r4, r4
			acquire = 0U;
   13d20:	42a3      	cmp	r3, r4
   13d22:	bf08      	it	eq
   13d24:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
   13d26:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
   13d2a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   13d2e:	3b01      	subs	r3, #1
   13d30:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
   13d34:	fa5f f989 	uxtb.w	r9, r9
   13d38:	e7cc      	b.n	13cd4 <packet_rx_allocate.constprop.49+0x24>
   13d3a:	bf00      	nop
   13d3c:	20001230 	.word	0x20001230
   13d40:	20001370 	.word	0x20001370

00013d44 <common_init>:
{
   13d44:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
   13d46:	4c2a      	ldr	r4, [pc, #168]	; (13df0 <common_init+0xac>)
   13d48:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   13d4c:	2a00      	cmp	r2, #0
   13d4e:	d037      	beq.n	13dc0 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
   13d50:	f504 7386 	add.w	r3, r4, #268	; 0x10c
   13d54:	f44f 7196 	mov.w	r1, #300	; 0x12c
   13d58:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
   13d5c:	f00a fc26 	bl	1e5ac <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
   13d60:	4b24      	ldr	r3, [pc, #144]	; (13df4 <common_init+0xb0>)
   13d62:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   13d66:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
   13d6a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   13d6e:	f00a fc1d 	bl	1e5ac <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
   13d72:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   13d76:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
   13d7a:	4b1f      	ldr	r3, [pc, #124]	; (13df8 <common_init+0xb4>)
   13d7c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   13d80:	440a      	add	r2, r1
   13d82:	2108      	movs	r1, #8
   13d84:	f00a fc12 	bl	1e5ac <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
   13d88:	4b1c      	ldr	r3, [pc, #112]	; (13dfc <common_init+0xb8>)
   13d8a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
   13d8e:	2202      	movs	r2, #2
   13d90:	2124      	movs	r1, #36	; 0x24
   13d92:	f00a fc0b 	bl	1e5ac <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
   13d96:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
   13d9a:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
   13d9e:	4b18      	ldr	r3, [pc, #96]	; (13e00 <common_init+0xbc>)
   13da0:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
   13da4:	3a01      	subs	r2, #1
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
   13da6:	b292      	uxth	r2, r2
   13da8:	f00a fc00 	bl	1e5ac <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
   13dac:	4812      	ldr	r0, [pc, #72]	; (13df8 <common_init+0xb4>)
   13dae:	f00a fc21 	bl	1e5f4 <mem_acquire>
	LL_ASSERT(link);
   13db2:	b940      	cbnz	r0, 13dc6 <common_init+0x82>
   13db4:	4040      	eors	r0, r0
   13db6:	f380 8811 	msr	BASEPRI, r0
   13dba:	f04f 0004 	mov.w	r0, #4
   13dbe:	df02      	svc	2
		_radio.conn_free = NULL;
   13dc0:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
   13dc4:	e7cc      	b.n	13d60 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
   13dc6:	4a0f      	ldr	r2, [pc, #60]	; (13e04 <common_init+0xc0>)
   13dc8:	1f11      	subs	r1, r2, #4
   13dca:	f00a fc58 	bl	1e67e <memq_init>
	_radio.advertiser.chan_map = 0x07;
   13dce:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   13dd2:	f043 0307 	orr.w	r3, r3, #7
   13dd6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
   13dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13dde:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[2] = 0xFF;
   13de2:	4b09      	ldr	r3, [pc, #36]	; (13e08 <common_init+0xc4>)
   13de4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
}
   13de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
   13dec:	f7ff bf60 	b.w	13cb0 <packet_rx_allocate.constprop.49>
   13df0:	20001230 	.word	0x20001230
   13df4:	20001358 	.word	0x20001358
   13df8:	20001370 	.word	0x20001370
   13dfc:	20001384 	.word	0x20001384
   13e00:	2000138c 	.word	0x2000138c
   13e04:	20001378 	.word	0x20001378
   13e08:	251fffff 	.word	0x251fffff

00013e0c <k32src_wait>:
	if (done) {
   13e0c:	4b0b      	ldr	r3, [pc, #44]	; (13e3c <k32src_wait+0x30>)
   13e0e:	781a      	ldrb	r2, [r3, #0]
{
   13e10:	b510      	push	{r4, lr}
	if (done) {
   13e12:	b98a      	cbnz	r2, 13e38 <k32src_wait+0x2c>
	done = true;
   13e14:	2201      	movs	r2, #1
   13e16:	480a      	ldr	r0, [pc, #40]	; (13e40 <k32src_wait+0x34>)
   13e18:	701a      	strb	r2, [r3, #0]
   13e1a:	f002 fab5 	bl	16388 <z_impl_device_get_binding>
	LL_ASSERT(lf_clock);
   13e1e:	4604      	mov	r4, r0
   13e20:	b918      	cbnz	r0, 13e2a <k32src_wait+0x1e>
   13e22:	f00a fdee 	bl	1ea02 <chan_set.part.26>
		cpu_sleep();
   13e26:	f00a fdb6 	bl	1e996 <cpu_sleep>
   13e2a:	6863      	ldr	r3, [r4, #4]
   13e2c:	2101      	movs	r1, #1
   13e2e:	681b      	ldr	r3, [r3, #0]
   13e30:	4620      	mov	r0, r4
   13e32:	4798      	blx	r3
	while (clock_control_on(lf_clock, (void *)CLOCK_CONTROL_NRF_K32SRC)) {
   13e34:	2800      	cmp	r0, #0
   13e36:	d1f6      	bne.n	13e26 <k32src_wait+0x1a>
}
   13e38:	bd10      	pop	{r4, pc}
   13e3a:	bf00      	nop
   13e3c:	20002594 	.word	0x20002594
   13e40:	0002162b 	.word	0x0002162b

00013e44 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
   13e44:	4b02      	ldr	r3, [pc, #8]	; (13e50 <mayfly_xtal_stop+0xc>)
   13e46:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
   13e48:	6843      	ldr	r3, [r0, #4]
   13e4a:	2100      	movs	r1, #0
   13e4c:	685b      	ldr	r3, [r3, #4]
   13e4e:	4718      	bx	r3
   13e50:	20001230 	.word	0x20001230

00013e54 <feature_rsp_send>:
{
   13e54:	b570      	push	{r4, r5, r6, lr}
   13e56:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13e58:	481e      	ldr	r0, [pc, #120]	; (13ed4 <feature_rsp_send+0x80>)
{
   13e5a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13e5c:	f00a fbca 	bl	1e5f4 <mem_acquire>
	if (!node_tx) {
   13e60:	4604      	mov	r4, r0
   13e62:	b3a0      	cbz	r0, 13ece <feature_rsp_send+0x7a>
	       (features[1] << 8) | (features[2] << 16);
   13e64:	79b3      	ldrb	r3, [r6, #6]
   13e66:	7972      	ldrb	r2, [r6, #5]
   13e68:	041b      	lsls	r3, r3, #16
   13e6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   13e6e:	7932      	ldrb	r2, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
   13e70:	4313      	orrs	r3, r2
   13e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   13e76:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
	conn->llcp_features &= feat_get(&req->features[0]);
   13e7a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
	       (features[1] << 8) | (features[2] << 16);
   13e7e:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   13e82:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_features &= feat_get(&req->features[0]);
   13e86:	4013      	ands	r3, r2
   13e88:	f3c3 0310 	ubfx	r3, r3, #0, #17
   13e8c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	conn->common.fex_valid = 1U;
   13e90:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   13e94:	f043 0320 	orr.w	r3, r3, #32
   13e98:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13e9c:	7903      	ldrb	r3, [r0, #4]
   13e9e:	f043 0303 	orr.w	r3, r3, #3
   13ea2:	7103      	strb	r3, [r0, #4]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   13ea4:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   13ea6:	2309      	movs	r3, #9
   13ea8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   13eaa:	71c3      	strb	r3, [r0, #7]
	(void)memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   13eac:	2100      	movs	r1, #0
   13eae:	4410      	add	r0, r2
   13eb0:	f006 f924 	bl	1a0fc <memset>
		conn->llcp_features & 0xFF;
   13eb4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
   13eb8:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   13eba:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
   13ebc:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
   13ebe:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
   13ec0:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
   13ec2:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   13ec4:	4621      	mov	r1, r4
   13ec6:	f00a fe5f 	bl	1eb88 <ctrl_tx_sec_enqueue>
	return 0;
   13eca:	2000      	movs	r0, #0
}
   13ecc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   13ece:	2001      	movs	r0, #1
   13ed0:	e7fc      	b.n	13ecc <feature_rsp_send+0x78>
   13ed2:	bf00      	nop
   13ed4:	20001384 	.word	0x20001384

00013ed8 <reject_ext_ind_send>:
{
   13ed8:	b570      	push	{r4, r5, r6, lr}
   13eda:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13edc:	480b      	ldr	r0, [pc, #44]	; (13f0c <reject_ext_ind_send+0x34>)
{
   13ede:	460e      	mov	r6, r1
   13ee0:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13ee2:	f00a fb87 	bl	1e5f4 <mem_acquire>
	if (!node_tx) {
   13ee6:	b178      	cbz	r0, 13f08 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13ee8:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   13eea:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13eec:	f043 0303 	orr.w	r3, r3, #3
   13ef0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   13ef2:	2303      	movs	r3, #3
   13ef4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   13ef6:	2311      	movs	r3, #17
   13ef8:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   13efa:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   13efc:	4601      	mov	r1, r0
   13efe:	4620      	mov	r0, r4
   13f00:	f00a fe14 	bl	1eb2c <ctrl_tx_enqueue>
	return 0;
   13f04:	2000      	movs	r0, #0
}
   13f06:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   13f08:	2001      	movs	r0, #1
   13f0a:	e7fc      	b.n	13f06 <reject_ext_ind_send+0x2e>
   13f0c:	20001384 	.word	0x20001384

00013f10 <preempt_calc>:
{
   13f10:	b570      	push	{r4, r5, r6, lr}
   13f12:	4614      	mov	r4, r2
   13f14:	460e      	mov	r6, r1
   13f16:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   13f18:	f00a fc8c 	bl	1e834 <ticker_ticks_now_get>
   13f1c:	4621      	mov	r1, r4
   13f1e:	f00a fc8b 	bl	1e838 <ticker_ticks_diff_get>
	diff += 3;
   13f22:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   13f24:	2c09      	cmp	r4, #9
   13f26:	d911      	bls.n	13f4c <preempt_calc+0x3c>
		if (s_xtal_retained) {
   13f28:	4b09      	ldr	r3, [pc, #36]	; (13f50 <preempt_calc+0x40>)
   13f2a:	781b      	ldrb	r3, [r3, #0]
   13f2c:	b113      	cbz	r3, 13f34 <preempt_calc+0x24>
   13f2e:	2000      	movs	r0, #0
   13f30:	f7ff face 	bl	134d0 <mayfly_xtal_retain.part.19>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   13f34:	4632      	mov	r2, r6
   13f36:	2100      	movs	r1, #0
   13f38:	4628      	mov	r0, r5
   13f3a:	f7ff fcd7 	bl	138ec <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   13f3e:	68ab      	ldr	r3, [r5, #8]
   13f40:	441c      	add	r4, r3
		if (diff <
   13f42:	2c26      	cmp	r4, #38	; 0x26
   13f44:	d800      	bhi.n	13f48 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
   13f46:	60ac      	str	r4, [r5, #8]
		return 1;
   13f48:	2001      	movs	r0, #1
   13f4a:	e000      	b.n	13f4e <preempt_calc+0x3e>
	return 0;
   13f4c:	2000      	movs	r0, #0
}
   13f4e:	bd70      	pop	{r4, r5, r6, pc}
   13f50:	20002596 	.word	0x20002596

00013f54 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   13f54:	4b27      	ldr	r3, [pc, #156]	; (13ff4 <event_adv+0xa0>)
   13f56:	7d1a      	ldrb	r2, [r3, #20]
{
   13f58:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   13f5a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
   13f5e:	4605      	mov	r5, r0
   13f60:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   13f62:	b12a      	cbz	r2, 13f70 <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13f64:	4040      	eors	r0, r0
   13f66:	f380 8811 	msr	BASEPRI, r0
   13f6a:	f04f 0004 	mov.w	r0, #4
   13f6e:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   13f70:	7c1b      	ldrb	r3, [r3, #16]
   13f72:	b2db      	uxtb	r3, r3
   13f74:	2b05      	cmp	r3, #5
   13f76:	d1f5      	bne.n	13f64 <event_adv+0x10>
	_radio.role = ROLE_ADV;
   13f78:	2601      	movs	r6, #1
   13f7a:	7526      	strb	r6, [r4, #20]
	_radio.ticks_anchor = ticks_at_expire;
   13f7c:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0U;
   13f7e:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   13f80:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(0, 0);
   13f82:	f7ff fd61 	bl	13a48 <adv_scan_configure.constprop.47>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   13f86:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   13f8a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   13f8e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13f92:	f363 0202 	bfi	r2, r3, #0, #3
   13f96:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
   13f9a:	f7ff fbf9 	bl	13790 <adv_setup>
	if (_radio.advertiser.filter_policy) {
   13f9e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   13fa2:	f013 0f18 	tst.w	r3, #24
   13fa6:	d007      	beq.n	13fb8 <event_adv+0x64>
		struct ll_filter *wl = ctrl_filter_get(true);
   13fa8:	4630      	mov	r0, r6
   13faa:	f000 fed5 	bl	14d58 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   13fae:	1c82      	adds	r2, r0, #2
   13fb0:	7841      	ldrb	r1, [r0, #1]
   13fb2:	7800      	ldrb	r0, [r0, #0]
   13fb4:	f001 f9da 	bl	1536c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
   13fb8:	68e2      	ldr	r2, [r4, #12]
   13fba:	f105 0109 	add.w	r1, r5, #9
   13fbe:	2001      	movs	r0, #1
   13fc0:	f001 fa2e 	bl	15420 <radio_tmr_start>
	radio_tmr_end_capture();
   13fc4:	f001 fae8 	bl	15598 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   13fc8:	462a      	mov	r2, r5
   13fca:	2105      	movs	r1, #5
   13fcc:	480a      	ldr	r0, [pc, #40]	; (13ff8 <event_adv+0xa4>)
   13fce:	f7ff ff9f 	bl	13f10 <preempt_calc>
   13fd2:	4603      	mov	r3, r0
   13fd4:	b128      	cbz	r0, 13fe2 <event_adv+0x8e>
		_radio.state = STATE_STOP;
   13fd6:	2304      	movs	r3, #4
   13fd8:	7563      	strb	r3, [r4, #21]
}
   13fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   13fde:	f001 b925 	b.w	1522c <radio_disable>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   13fe2:	4a06      	ldr	r2, [pc, #24]	; (13ffc <event_adv+0xa8>)
   13fe4:	4601      	mov	r1, r0
   13fe6:	f7fe f8e5 	bl	121b4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13fea:	f030 0302 	bics.w	r3, r0, #2
   13fee:	d1b9      	bne.n	13f64 <event_adv+0x10>
}
   13ff0:	bd70      	pop	{r4, r5, r6, pc}
   13ff2:	bf00      	nop
   13ff4:	20001230 	.word	0x20001230
   13ff8:	20001248 	.word	0x20001248
   13ffc:	00013241 	.word	0x00013241

00014000 <event_slave>:
{
   14000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   14004:	4d67      	ldr	r5, [pc, #412]	; (141a4 <event_slave+0x1a4>)
{
   14006:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   14008:	7d2b      	ldrb	r3, [r5, #20]
{
   1400a:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   1400c:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   14010:	462f      	mov	r7, r5
   14012:	b12b      	cbz	r3, 14020 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14014:	4040      	eors	r0, r0
   14016:	f380 8811 	msr	BASEPRI, r0
   1401a:	f04f 0004 	mov.w	r0, #4
   1401e:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   14020:	7c2a      	ldrb	r2, [r5, #16]
   14022:	8c23      	ldrh	r3, [r4, #32]
   14024:	b2d2      	uxtb	r2, r2
   14026:	3307      	adds	r3, #7
   14028:	429a      	cmp	r2, r3
   1402a:	d1f3      	bne.n	14014 <event_slave+0x14>
	_radio.role = ROLE_SLAVE;
   1402c:	2303      	movs	r3, #3
   1402e:	752b      	strb	r3, [r5, #20]
	_radio.packet_counter = 0U;
   14030:	f8a5 8118 	strh.w	r8, [r5, #280]	; 0x118
	_radio.state = STATE_RX;
   14034:	2301      	movs	r3, #1
   14036:	756b      	strb	r3, [r5, #21]
	conn->latency_event = conn->latency_prepare;
   14038:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   1403a:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   1403e:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
   14040:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0U;
   14042:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
	_radio.ticker_id_prepare = 0U;
   14046:	f885 8010 	strb.w	r8, [r5, #16]
	_radio.ticks_anchor = ticks_at_expire;
   1404a:	60a8      	str	r0, [r5, #8]
	_radio.ticker_id_event =
   1404c:	746a      	strb	r2, [r5, #17]
	adv_scan_conn_configure();
   1404e:	f7ff f887 	bl	13160 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   14052:	f104 0010 	add.w	r0, r4, #16
   14056:	f001 f88d 	bl	15174 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   1405a:	7d62      	ldrb	r2, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   1405c:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   1405e:	0212      	lsls	r2, r2, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   14060:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   14064:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   14066:	f240 605b 	movw	r0, #1627	; 0x65b
   1406a:	4311      	orrs	r1, r2
   1406c:	f001 f91a 	bl	152a4 <radio_crc_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   14070:	2096      	movs	r0, #150	; 0x96
   14072:	f001 f9c9 	bl	15408 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   14076:	4643      	mov	r3, r8
   14078:	4642      	mov	r2, r8
   1407a:	4641      	mov	r1, r8
   1407c:	4640      	mov	r0, r8
   1407e:	f001 f93b 	bl	152f8 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   14082:	f895 2139 	ldrb.w	r2, [r5, #313]	; 0x139
   14086:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   1408a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   1408e:	4620      	mov	r0, r4
   14090:	3108      	adds	r1, #8
   14092:	f00a fccf 	bl	1ea34 <rx_packet_set>
	if (conn->data_chan_sel) {
   14096:	7f63      	ldrb	r3, [r4, #29]
   14098:	065a      	lsls	r2, r3, #25
   1409a:	d4bb      	bmi.n	14014 <event_slave+0x14>
					   conn->data_chan_count);
   1409c:	f003 053f 	and.w	r5, r3, #63	; 0x3f
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   140a0:	7fa2      	ldrb	r2, [r4, #30]
   140a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   140a4:	fb03 2202 	mla	r2, r3, r2, r2
   140a8:	7fe3      	ldrb	r3, [r4, #31]
   140aa:	441a      	add	r2, r3
   140ac:	2325      	movs	r3, #37	; 0x25
   140ae:	fbb2 f1f3 	udiv	r1, r2, r3
   140b2:	fb03 2111 	mls	r1, r3, r1, r2
   140b6:	b2c8      	uxtb	r0, r1
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   140b8:	eb04 03d0 	add.w	r3, r4, r0, lsr #3
	*chan_use = chan_next;
   140bc:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   140be:	7dda      	ldrb	r2, [r3, #23]
   140c0:	f001 0107 	and.w	r1, r1, #7
   140c4:	410a      	asrs	r2, r1
   140c6:	f012 0201 	ands.w	r2, r2, #1
   140ca:	d10b      	bne.n	140e4 <event_slave+0xe4>
		chan_index = chan_next % chan_count;
   140cc:	fbb0 f3f5 	udiv	r3, r0, r5
   140d0:	fb05 0313 	mls	r3, r5, r3, r0
   140d4:	b2db      	uxtb	r3, r3
	while (byte_count--) {
   140d6:	f104 0516 	add.w	r5, r4, #22
   140da:	f104 0e1b 	add.w	lr, r4, #27
	chan_next = 0U;
   140de:	4610      	mov	r0, r2
	while (byte_count--) {
   140e0:	4575      	cmp	r5, lr
   140e2:	d141      	bne.n	14168 <event_slave+0x168>
	chan_set(data_chan_use);
   140e4:	f00a fcc7 	bl	1ea76 <chan_set>
	conn->slave.window_widening_event_us +=
   140e8:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   140ec:	4413      	add	r3, r2
	    conn->slave.window_widening_max_us) {
   140ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
		conn->slave.window_widening_event_us =
   140f0:	429a      	cmp	r2, r3
   140f2:	bf94      	ite	ls
   140f4:	64a2      	strls	r2, [r4, #72]	; 0x48
   140f6:	64a3      	strhi	r3, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
   140f8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
	conn->slave.window_widening_prepare_us = 0U;
   140fc:	2500      	movs	r5, #0
	conn->slave.window_size_event_us +=
   140fe:	4413      	add	r3, r2
	conn->slave.window_size_prepare_us = 0U;
   14100:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   14104:	68fa      	ldr	r2, [r7, #12]
	conn->slave.window_widening_prepare_us = 0U;
   14106:	6465      	str	r5, [r4, #68]	; 0x44
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   14108:	f106 0109 	add.w	r1, r6, #9
   1410c:	4628      	mov	r0, r5
   1410e:	f001 f987 	bl	15420 <radio_tmr_start>
   14112:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   14114:	f001 fa14 	bl	15540 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   14118:	4628      	mov	r0, r5
   1411a:	f001 fa2b 	bl	15574 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   1411e:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
   14120:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   14122:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
   14124:	4629      	mov	r1, r5
   14126:	4628      	mov	r0, r5
   14128:	eb03 0942 	add.w	r9, r3, r2, lsl #1
   1412c:	f00a ff29 	bl	1ef82 <radio_rx_ready_delay_get>
	switch (phy) {
   14130:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
   14132:	4629      	mov	r1, r5
   14134:	4480      	add	r8, r0
   14136:	4628      	mov	r0, r5
   14138:	f00a ff25 	bl	1ef86 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1413c:	4440      	add	r0, r8
   1413e:	f001 f9f3 	bl	15528 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   14142:	f894 1020 	ldrb.w	r1, [r4, #32]
   14146:	3107      	adds	r1, #7
   14148:	4632      	mov	r2, r6
   1414a:	b2c9      	uxtb	r1, r1
   1414c:	4620      	mov	r0, r4
   1414e:	f7ff fedf 	bl	13f10 <preempt_calc>
   14152:	4603      	mov	r3, r0
   14154:	b1f0      	cbz	r0, 14194 <event_slave+0x194>
		_radio.state = STATE_STOP;
   14156:	2304      	movs	r3, #4
   14158:	757b      	strb	r3, [r7, #21]
		radio_disable();
   1415a:	f001 f867 	bl	1522c <radio_disable>
	packet_tx_enqueue(2);
   1415e:	2002      	movs	r0, #2
}
   14160:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
   14164:	f7ff ba40 	b.w	135e8 <packet_tx_enqueue>
		bite = *chan_map;
   14168:	f100 0108 	add.w	r1, r0, #8
   1416c:	f815 cf01 	ldrb.w	ip, [r5, #1]!
		while (bit_count--) {
   14170:	b2c9      	uxtb	r1, r1
		bite = *chan_map;
   14172:	4602      	mov	r2, r0
		while (bit_count--) {
   14174:	428a      	cmp	r2, r1
   14176:	4608      	mov	r0, r1
   14178:	d0b2      	beq.n	140e0 <event_slave+0xe0>
			if (bite & 0x01) {
   1417a:	f01c 0f01 	tst.w	ip, #1
   1417e:	d002      	beq.n	14186 <event_slave+0x186>
				if (chan_index == 0) {
   14180:	b133      	cbz	r3, 14190 <event_slave+0x190>
				chan_index--;
   14182:	3b01      	subs	r3, #1
   14184:	b2db      	uxtb	r3, r3
			chan_next++;
   14186:	3201      	adds	r2, #1
   14188:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   1418a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   1418e:	e7f1      	b.n	14174 <event_slave+0x174>
				if (chan_index == 0) {
   14190:	4610      	mov	r0, r2
   14192:	e7a7      	b.n	140e4 <event_slave+0xe4>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   14194:	4a04      	ldr	r2, [pc, #16]	; (141a8 <event_slave+0x1a8>)
   14196:	4601      	mov	r1, r0
   14198:	f7fe f80c 	bl	121b4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1419c:	f030 0302 	bics.w	r3, r0, #2
   141a0:	d0dd      	beq.n	1415e <event_slave+0x15e>
   141a2:	e737      	b.n	14014 <event_slave+0x14>
   141a4:	20001230 	.word	0x20001230
   141a8:	00013241 	.word	0x00013241

000141ac <event_scan>:
{
   141ac:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   141ae:	4b49      	ldr	r3, [pc, #292]	; (142d4 <event_scan+0x128>)
   141b0:	7d1a      	ldrb	r2, [r3, #20]
{
   141b2:	b08a      	sub	sp, #40	; 0x28
   141b4:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   141b6:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   141ba:	461c      	mov	r4, r3
   141bc:	b12a      	cbz	r2, 141ca <event_scan+0x1e>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   141be:	4040      	eors	r0, r0
   141c0:	f380 8811 	msr	BASEPRI, r0
   141c4:	f04f 0004 	mov.w	r0, #4
   141c8:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   141ca:	7c1b      	ldrb	r3, [r3, #16]
   141cc:	b2db      	uxtb	r3, r3
   141ce:	2b06      	cmp	r3, #6
   141d0:	d1f5      	bne.n	141be <event_scan+0x12>
	_radio.role = ROLE_SCAN;
   141d2:	2202      	movs	r2, #2
   141d4:	7522      	strb	r2, [r4, #20]
	_radio.ticker_id_prepare = 0U;
   141d6:	7426      	strb	r6, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   141d8:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0U;
   141da:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.ticks_anchor = ticks_at_expire;
   141de:	60a0      	str	r0, [r4, #8]
	_radio.state = STATE_RX;
   141e0:	2201      	movs	r2, #1
	_radio.scanner.state = 0U;
   141e2:	f366 0341 	bfi	r3, r6, #1, #1
	_radio.state = STATE_RX;
   141e6:	7562      	strb	r2, [r4, #21]
	_radio.scanner.state = 0U;
   141e8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(0, 0);
   141ec:	f7ff fc2c 	bl	13a48 <adv_scan_configure.constprop.47>
	chan_set(37 + _radio.scanner.chan++);
   141f0:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   141f4:	f3c3 0081 	ubfx	r0, r3, #2, #2
   141f8:	1c42      	adds	r2, r0, #1
   141fa:	f362 0383 	bfi	r3, r2, #2, #2
   141fe:	3025      	adds	r0, #37	; 0x25
   14200:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   14204:	f00a fc37 	bl	1ea76 <chan_set>
	if (_radio.scanner.chan == 3) {
   14208:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1420c:	f003 020c 	and.w	r2, r3, #12
   14210:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0U;
   14212:	bf08      	it	eq
   14214:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
   14218:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0U;
   1421c:	bf08      	it	eq
   1421e:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
   14222:	f001 f8f1 	bl	15408 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   14226:	2300      	movs	r3, #0
   14228:	4619      	mov	r1, r3
   1422a:	461a      	mov	r2, r3
   1422c:	4618      	mov	r0, r3
   1422e:	f001 f863 	bl	152f8 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   14232:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   14236:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
   1423a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1423e:	3008      	adds	r0, #8
   14240:	f000 ffdc 	bl	151fc <radio_pkt_rx_set>
	radio_rssi_measure();
   14244:	f001 f870 	bl	15328 <radio_rssi_measure>
	if (_radio.scanner.filter_policy) {
   14248:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1424c:	f013 0f06 	tst.w	r3, #6
   14250:	d007      	beq.n	14262 <event_scan+0xb6>
		struct ll_filter *wl = ctrl_filter_get(true);
   14252:	2001      	movs	r0, #1
   14254:	f000 fd80 	bl	14d58 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   14258:	1c82      	adds	r2, r0, #2
   1425a:	7841      	ldrb	r1, [r0, #1]
   1425c:	7800      	ldrb	r0, [r0, #0]
   1425e:	f001 f885 	bl	1536c <radio_filter_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   14262:	68e2      	ldr	r2, [r4, #12]
   14264:	f105 0109 	add.w	r1, r5, #9
   14268:	2000      	movs	r0, #0
   1426a:	f001 f8d9 	bl	15420 <radio_tmr_start>
	radio_tmr_end_capture();
   1426e:	f001 f993 	bl	15598 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   14272:	2106      	movs	r1, #6
   14274:	462a      	mov	r2, r5
   14276:	4818      	ldr	r0, [pc, #96]	; (142d8 <event_scan+0x12c>)
   14278:	f7ff fe4a 	bl	13f10 <preempt_calc>
   1427c:	4601      	mov	r1, r0
   1427e:	b130      	cbz	r0, 1428e <event_scan+0xe2>
		_radio.state = STATE_STOP;
   14280:	2304      	movs	r3, #4
   14282:	7563      	strb	r3, [r4, #21]
}
   14284:	b00a      	add	sp, #40	; 0x28
   14286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   1428a:	f000 bfcf 	b.w	1522c <radio_disable>
		ret = ticker_start(
   1428e:	f641 23f1 	movw	r3, #6897	; 0x1af1
   14292:	9308      	str	r3, [sp, #32]
   14294:	4b11      	ldr	r3, [pc, #68]	; (142dc <event_scan+0x130>)
   14296:	9307      	str	r3, [sp, #28]
   14298:	4b11      	ldr	r3, [pc, #68]	; (142e0 <event_scan+0x134>)
   1429a:	9001      	str	r0, [sp, #4]
   1429c:	e9cd 0304 	strd	r0, r3, [sp, #16]
   142a0:	e9cd 0002 	strd	r0, r0, [sp, #8]
   142a4:	2204      	movs	r2, #4
   142a6:	9206      	str	r2, [sp, #24]
   142a8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   142ac:	3309      	adds	r3, #9
   142ae:	9300      	str	r3, [sp, #0]
   142b0:	462b      	mov	r3, r5
   142b2:	f7fd fe75 	bl	11fa0 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   142b6:	f030 0302 	bics.w	r3, r0, #2
   142ba:	d180      	bne.n	141be <event_scan+0x12>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   142bc:	4619      	mov	r1, r3
   142be:	4618      	mov	r0, r3
   142c0:	4a08      	ldr	r2, [pc, #32]	; (142e4 <event_scan+0x138>)
   142c2:	f7fd ff77 	bl	121b4 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   142c6:	f030 0302 	bics.w	r3, r0, #2
   142ca:	f47f af78 	bne.w	141be <event_scan+0x12>
}
   142ce:	b00a      	add	sp, #40	; 0x28
   142d0:	bd70      	pop	{r4, r5, r6, pc}
   142d2:	bf00      	nop
   142d4:	20001230 	.word	0x20001230
   142d8:	20001300 	.word	0x20001300
   142dc:	0001ea0f 	.word	0x0001ea0f
   142e0:	000134b1 	.word	0x000134b1
   142e4:	00013241 	.word	0x00013241

000142e8 <mayfly_xtal_stop_calc>:
{
   142e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   142ea:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   142ec:	2302      	movs	r3, #2
   142ee:	9309      	str	r3, [sp, #36]	; 0x24
	struct connection *conn_curr = NULL;
   142f0:	2300      	movs	r3, #0
	struct connection *conn_next = NULL;
   142f2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	ticker_id_next = 0xff;
   142f6:	22ff      	movs	r2, #255	; 0xff
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   142f8:	4e4b      	ldr	r6, [pc, #300]	; (14428 <mayfly_xtal_stop_calc+0x140>)
				    _radio.connection_count));
   142fa:	4d4c      	ldr	r5, [pc, #304]	; (1442c <mayfly_xtal_stop_calc+0x144>)
	ticker_id_next = 0xff;
   142fc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	u8_t ticker_id_curr = ((u32_t)params & 0xff);
   14300:	b2c4      	uxtb	r4, r0
	ticks_to_expire = 0U;
   14302:	930a      	str	r3, [sp, #40]	; 0x28
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   14304:	ab09      	add	r3, sp, #36	; 0x24
   14306:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1430a:	ab0a      	add	r3, sp, #40	; 0x28
   1430c:	9300      	str	r3, [sp, #0]
   1430e:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   14312:	ab0b      	add	r3, sp, #44	; 0x2c
   14314:	2101      	movs	r1, #1
   14316:	2000      	movs	r0, #0
   14318:	f7fd ff0e 	bl	12138 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1431c:	2802      	cmp	r0, #2
   1431e:	d00b      	beq.n	14338 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   14320:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14322:	b16b      	cbz	r3, 14340 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14324:	4040      	eors	r0, r0
   14326:	f380 8811 	msr	BASEPRI, r0
   1432a:	f04f 0004 	mov.w	r0, #4
   1432e:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   14330:	2101      	movs	r1, #1
   14332:	2000      	movs	r0, #0
   14334:	f7fd ff76 	bl	12224 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   14338:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1433a:	2b02      	cmp	r3, #2
   1433c:	d0f8      	beq.n	14330 <mayfly_xtal_stop_calc+0x48>
   1433e:	e7ef      	b.n	14320 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
   14340:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
   14344:	2bff      	cmp	r3, #255	; 0xff
   14346:	d042      	beq.n	143ce <mayfly_xtal_stop_calc+0xe6>
   14348:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1434c:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
   1434e:	4293      	cmp	r3, r2
   14350:	dad8      	bge.n	14304 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
   14352:	3b05      	subs	r3, #5
   14354:	b2db      	uxtb	r3, r3
   14356:	2bf9      	cmp	r3, #249	; 0xf9
   14358:	d839      	bhi.n	143ce <mayfly_xtal_stop_calc+0xe6>
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
   1435a:	a90c      	add	r1, sp, #48	; 0x30
   1435c:	4620      	mov	r0, r4
   1435e:	f7ff f889 	bl	13474 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
   14362:	2800      	cmp	r0, #0
   14364:	d0de      	beq.n	14324 <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
   14366:	e9d0 3500 	ldrd	r3, r5, [r0]
   1436a:	2b00      	cmp	r3, #0
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
   1436c:	bfb8      	it	lt
   1436e:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
   14370:	68c7      	ldr	r7, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   14372:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
   14376:	429d      	cmp	r5, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   14378:	a90d      	add	r1, sp, #52	; 0x34
		ticks_slot_abs = MAX(hdr_curr->ticks_active_to_start,
   1437a:	bf38      	it	cc
   1437c:	461d      	movcc	r5, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   1437e:	f7ff f879 	bl	13474 <hdr_conn_get>
   14382:	3731      	adds	r7, #49	; 0x31
	LL_ASSERT(hdr_next);
   14384:	4604      	mov	r4, r0
   14386:	2800      	cmp	r0, #0
   14388:	d0cc      	beq.n	14324 <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next =
   1438a:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   1438e:	6802      	ldr	r2, [r0, #0]
   14390:	4927      	ldr	r1, [pc, #156]	; (14430 <mayfly_xtal_stop_calc+0x148>)
	ticks_prepare_to_start_next =
   14392:	429e      	cmp	r6, r3
   14394:	bf38      	it	cc
   14396:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   14398:	2a00      	cmp	r2, #0
   1439a:	da08      	bge.n	143ae <mayfly_xtal_stop_calc+0xc6>
   1439c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		u32_t ticks_reduced = (hdr_next->ticks_xtal_to_start &
   1439e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   143a2:	1b90      	subs	r0, r2, r6
		if (ticks_to_expire > ticks_reduced) {
   143a4:	4283      	cmp	r3, r0
   143a6:	d91a      	bls.n	143de <mayfly_xtal_stop_calc+0xf6>
			ticks_to_expire -= ticks_reduced;
   143a8:	4433      	add	r3, r6
   143aa:	1a9b      	subs	r3, r3, r2
   143ac:	930a      	str	r3, [sp, #40]	; 0x28
	if (ticks_to_expire >
   143ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	    (ticks_slot_abs +
   143b0:	443d      	add	r5, r7
	if (ticks_to_expire >
   143b2:	429d      	cmp	r5, r3
   143b4:	d215      	bcs.n	143e2 <mayfly_xtal_stop_calc+0xfa>
		if (s_xtal_retained) {
   143b6:	780b      	ldrb	r3, [r1, #0]
   143b8:	b113      	cbz	r3, 143c0 <mayfly_xtal_stop_calc+0xd8>
   143ba:	2001      	movs	r0, #1
   143bc:	f7ff f888 	bl	134d0 <mayfly_xtal_retain.part.19>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
   143c0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   143c4:	2101      	movs	r1, #1
   143c6:	4620      	mov	r0, r4
   143c8:	f7ff fa90 	bl	138ec <prepare_normal_set>
   143cc:	e005      	b.n	143da <mayfly_xtal_stop_calc+0xf2>
		if (s_xtal_retained) {
   143ce:	4b18      	ldr	r3, [pc, #96]	; (14430 <mayfly_xtal_stop_calc+0x148>)
   143d0:	781b      	ldrb	r3, [r3, #0]
   143d2:	b113      	cbz	r3, 143da <mayfly_xtal_stop_calc+0xf2>
   143d4:	2001      	movs	r0, #1
   143d6:	f7ff f87b 	bl	134d0 <mayfly_xtal_retain.part.19>
}
   143da:	b00f      	add	sp, #60	; 0x3c
   143dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ticks_to_expire = 0U;
   143de:	2300      	movs	r3, #0
   143e0:	930a      	str	r3, [sp, #40]	; 0x28
		if (!s_xtal_retained) {
   143e2:	780a      	ldrb	r2, [r1, #0]
   143e4:	b93a      	cbnz	r2, 143f6 <mayfly_xtal_stop_calc+0x10e>
			s_xtal_retained = 1U;
   143e6:	2001      	movs	r0, #1
   143e8:	7008      	strb	r0, [r1, #0]
			retval = mayfly_enqueue(caller_id,
   143ea:	4b12      	ldr	r3, [pc, #72]	; (14434 <mayfly_xtal_stop_calc+0x14c>)
   143ec:	4611      	mov	r1, r2
   143ee:	f7fd f8cf 	bl	11590 <mayfly_enqueue>
			LL_ASSERT(!retval);
   143f2:	2800      	cmp	r0, #0
   143f4:	d196      	bne.n	14324 <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
   143f6:	6823      	ldr	r3, [r4, #0]
   143f8:	2b00      	cmp	r3, #0
   143fa:	dbee      	blt.n	143da <mayfly_xtal_stop_calc+0xf2>
   143fc:	42b3      	cmp	r3, r6
   143fe:	d9ec      	bls.n	143da <mayfly_xtal_stop_calc+0xf2>
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14400:	2000      	movs	r0, #0
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
   14402:	1b9b      	subs	r3, r3, r6
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14404:	4a0c      	ldr	r2, [pc, #48]	; (14438 <mayfly_xtal_stop_calc+0x150>)
   14406:	9205      	str	r2, [sp, #20]
   14408:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1440c:	9406      	str	r4, [sp, #24]
   1440e:	e9cd 0003 	strd	r0, r0, [sp, #12]
   14412:	9000      	str	r0, [sp, #0]
   14414:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   14418:	2101      	movs	r1, #1
   1441a:	f7fd fe0b 	bl	12034 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1441e:	f030 0302 	bics.w	r3, r0, #2
   14422:	d0da      	beq.n	143da <mayfly_xtal_stop_calc+0xf2>
   14424:	e77e      	b.n	14324 <mayfly_xtal_stop_calc+0x3c>
   14426:	bf00      	nop
   14428:	0001e99f 	.word	0x0001e99f
   1442c:	20001230 	.word	0x20001230
   14430:	20002596 	.word	0x20002596
   14434:	200090f8 	.word	0x200090f8
   14438:	0001e9a3 	.word	0x0001e9a3

0001443c <radio_init>:
{
   1443c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   14440:	4c3c      	ldr	r4, [pc, #240]	; (14534 <radio_init+0xf8>)
{
   14442:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	_radio.entropy = entropy;
   14444:	6062      	str	r2, [r4, #4]
	rx_count_max += 3;
   14446:	f99d e018 	ldrsb.w	lr, [sp, #24]
	tx_count_max += 1;
   1444a:	f99d 201c 	ldrsb.w	r2, [sp, #28]
{
   1444e:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
	_radio.sca = sca;
   14452:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   14456:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1445a:	fb01 5103 	mla	r1, r1, r3, r5
	_radio.hf_clock = hf_clock;
   1445e:	6020      	str	r0, [r4, #0]
	_radio.conn_pool = mem_radio;
   14460:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   14464:	19a8      	adds	r0, r5, r6
	tx_count_max += 1;
   14466:	f102 0c01 	add.w	ip, r2, #1
	rx_count_max += 3;
   1446a:	f10e 0503 	add.w	r5, lr, #3
	_radio.packet_tx_count = (tx_count_max + 1);
   1446e:	3202      	adds	r2, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   14470:	f10e 0e04 	add.w	lr, lr, #4
   14474:	fa5f fe8e 	uxtb.w	lr, lr
	_radio.packet_tx_count = (tx_count_max + 1);
   14478:	b2d2      	uxtb	r2, r2
{
   1447a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	_radio.packet_tx_count = (tx_count_max + 1);
   1447e:	f884 216c 	strb.w	r2, [r4, #364]	; 0x16c
	_radio.packet_rx = (void *)mem_radio;
   14482:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   14486:	00d2      	lsls	r2, r2, #3
	mem_radio +=
   14488:	eb01 018e 	add.w	r1, r1, lr, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   1448c:	f8c4 1164 	str.w	r1, [r4, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   14490:	4411      	add	r1, r2
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   14492:	188f      	adds	r7, r1, r2
	    (offsetof(struct pdu_data, lldata) +
   14494:	f108 0203 	add.w	r2, r8, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   14498:	2a29      	cmp	r2, #41	; 0x29
	rx_count_max += 3;
   1449a:	b2ed      	uxtb	r5, r5
	_radio.pkt_release = (void *)mem_radio;
   1449c:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	_radio.link_rx_data_quota = rx_count_max;
   144a0:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
		_radio.packet_rx_data_pool_size =
   144a4:	bf88      	it	hi
   144a6:	f108 010e 	addhi.w	r1, r8, #14
   144aa:	b2ad      	uxth	r5, r5
   144ac:	bf8b      	itete	hi
   144ae:	f021 0103 	bichi.w	r1, r1, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   144b2:	eb05 0145 	addls.w	r1, r5, r5, lsl #1
		_radio.packet_rx_data_pool_size =
   144b6:	fb11 f105 	smulbbhi	r1, r1, r5
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   144ba:	eb05 0181 	addls.w	r1, r5, r1, lsl #2
   144be:	4622      	mov	r2, r4
		_radio.packet_rx_data_pool_size =
   144c0:	bf8c      	ite	hi
   144c2:	b289      	uxthhi	r1, r1
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   144c4:	0089      	lslls	r1, r1, #2
	_radio.connection_count = connection_count_max;
   144c6:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	tx_count_max += 1;
   144ca:	f8a4 112e 	strh.w	r1, [r4, #302]	; 0x12e
	_radio.packet_rx_count = (rx_count_max + 1);
   144ce:	f884 e138 	strb.w	lr, [r4, #312]	; 0x138
	_radio.packet_data_octets_max = packet_data_octets_max;
   144d2:	f8a4 812c 	strh.w	r8, [r4, #300]	; 0x12c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   144d6:	2434      	movs	r4, #52	; 0x34
   144d8:	f8a2 4130 	strh.w	r4, [r2, #304]	; 0x130
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   144dc:	fbb1 f4f4 	udiv	r4, r1, r4
   144e0:	f882 4132 	strb.w	r4, [r2, #306]	; 0x132
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   144e4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_rx_data_pool = mem_radio;
   144e8:	f8c2 7124 	str.w	r7, [r2, #292]	; 0x124
	mem_radio += _radio.packet_rx_data_pool_size;
   144ec:	4439      	add	r1, r7
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   144ee:	4473      	add	r3, lr
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   144f0:	340a      	adds	r4, #10
	_radio.link_rx_pool = mem_radio;
   144f2:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   144f6:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   144fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   144fe:	b2a4      	uxth	r4, r4
	tx_count_max += 1;
   14500:	fa5f fc8c 	uxtb.w	ip, ip
	_radio.pkt_tx_ctrl_pool = mem_radio;
   14504:	f8c2 1150 	str.w	r1, [r2, #336]	; 0x150
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   14508:	3148      	adds	r1, #72	; 0x48
	_radio.packet_tx_data_size =
   1450a:	f8a2 4160 	strh.w	r4, [r2, #352]	; 0x160
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   1450e:	fb0c 1404 	mla	r4, ip, r4, r1
	if (retcode) {
   14512:	1a24      	subs	r4, r4, r0
	_radio.pkt_tx_data_pool = mem_radio;
   14514:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	if (retcode) {
   14518:	d003      	beq.n	14522 <radio_init+0xe6>
		return (retcode + mem_size);
   1451a:	4434      	add	r4, r6
}
   1451c:	4620      	mov	r0, r4
   1451e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1U;
   14522:	2301      	movs	r3, #1
   14524:	f882 317a 	strb.w	r3, [r2, #378]	; 0x17a
	common_init();
   14528:	f7ff fc0c 	bl	13d44 <common_init>
	radio_setup();
   1452c:	f00a fd05 	bl	1ef3a <radio_setup>
	return retcode;
   14530:	e7f4      	b.n	1451c <radio_init+0xe0>
   14532:	bf00      	nop
   14534:	20001230 	.word	0x20001230

00014538 <ll_reset>:
{
   14538:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   1453a:	2103      	movs	r1, #3
   1453c:	2005      	movs	r0, #5
   1453e:	f7fe fea3 	bl	13288 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   14542:	2104      	movs	r1, #4
   14544:	2006      	movs	r0, #6
   14546:	f7fe fe9f 	bl	13288 <role_disable>
	for (conn_handle = 0U; conn_handle < _radio.connection_count;
   1454a:	4c20      	ldr	r4, [pc, #128]	; (145cc <ll_reset+0x94>)
   1454c:	2500      	movs	r5, #0
   1454e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   14552:	b2ab      	uxth	r3, r5
   14554:	429a      	cmp	r2, r3
   14556:	d832      	bhi.n	145be <ll_reset+0x86>
	_radio.advertiser.is_enabled = 0U;
   14558:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1455c:	f36f 13c7 	bfc	r3, #7, #1
   14560:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0U;
   14564:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   14568:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0U;
   1456a:	f360 0300 	bfi	r3, r0, #0, #1
   1456e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   14572:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   14574:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
   14578:	fbb3 f3f2 	udiv	r3, r3, r2
   1457c:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   14580:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
	_radio.packet_rx_last = 0U;
   14584:	f884 0139 	strb.w	r0, [r4, #313]	; 0x139
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   14588:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0U;
   1458a:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
	_radio.packet_release_last = 0U;
   1458e:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   14592:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
	_radio.fc_ack = _radio.fc_req;
   14596:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	_radio.advertiser.conn = NULL;
   1459a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   1459e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   145a2:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
	_radio.packet_rx_acquire = 0U;
   145a6:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
	_radio.packet_tx_last = 0U;
   145aa:	f8a4 016e 	strh.w	r0, [r4, #366]	; 0x16e
	_radio.fc_ack = _radio.fc_req;
   145ae:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	ll_filter_reset(false);
   145b2:	f000 fc73 	bl	14e9c <ll_filter_reset>
}
   145b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   145ba:	f7ff bbc3 	b.w	13d44 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   145be:	1de8      	adds	r0, r5, #7
   145c0:	21ff      	movs	r1, #255	; 0xff
   145c2:	b2c0      	uxtb	r0, r0
   145c4:	f7fe fe60 	bl	13288 <role_disable>
   145c8:	3501      	adds	r5, #1
   145ca:	e7c0      	b.n	1454e <ll_reset+0x16>
   145cc:	20001230 	.word	0x20001230

000145d0 <radio_adv_data_get>:
}
   145d0:	4800      	ldr	r0, [pc, #0]	; (145d4 <radio_adv_data_get+0x4>)
   145d2:	4770      	bx	lr
   145d4:	2000125a 	.word	0x2000125a

000145d8 <radio_scan_data_get>:
}
   145d8:	4800      	ldr	r0, [pc, #0]	; (145dc <radio_scan_data_get+0x4>)
   145da:	4770      	bx	lr
   145dc:	200012aa 	.word	0x200012aa

000145e0 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   145e0:	4b02      	ldr	r3, [pc, #8]	; (145ec <ll_adv_is_enabled+0xc>)
   145e2:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   145e6:	09c0      	lsrs	r0, r0, #7
   145e8:	4770      	bx	lr
   145ea:	bf00      	nop
   145ec:	20001230 	.word	0x20001230

000145f0 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   145f0:	4b05      	ldr	r3, [pc, #20]	; (14608 <radio_adv_filter_pol_get+0x18>)
   145f2:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   145f6:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   145f8:	bfba      	itte	lt
   145fa:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   145fe:	f3c0 00c1 	ubfxlt	r0, r0, #3, #2
	return 0;
   14602:	2000      	movge	r0, #0
}
   14604:	4770      	bx	lr
   14606:	bf00      	nop
   14608:	20001230 	.word	0x20001230

0001460c <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1460c:	4a09      	ldr	r2, [pc, #36]	; (14634 <ll_scan_is_enabled+0x28>)
   1460e:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   14612:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   14616:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1461a:	f000 0001 	and.w	r0, r0, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1461e:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   14620:	f003 0301 	and.w	r3, r3, #1
   14624:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   14628:	bf14      	ite	ne
   1462a:	2004      	movne	r0, #4
   1462c:	2000      	moveq	r0, #0
}
   1462e:	4318      	orrs	r0, r3
   14630:	4770      	bx	lr
   14632:	bf00      	nop
   14634:	20001230 	.word	0x20001230

00014638 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   14638:	4b05      	ldr	r3, [pc, #20]	; (14650 <radio_scan_filter_pol_get+0x18>)
   1463a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1463e:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   14642:	bf1c      	itt	ne
   14644:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   14648:	f3c0 0041 	ubfxne	r0, r0, #1, #2
}
   1464c:	4770      	bx	lr
   1464e:	bf00      	nop
   14650:	20001230 	.word	0x20001230

00014654 <ll_rx_get>:
{
   14654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14656:	4605      	mov	r5, r0
   14658:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   1465a:	4917      	ldr	r1, [pc, #92]	; (146b8 <ll_rx_get+0x64>)
   1465c:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
   14660:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
   14664:	4293      	cmp	r3, r2
   14666:	460e      	mov	r6, r1
   14668:	d01b      	beq.n	146a2 <ll_rx_get+0x4e>
		_node_rx = _radio.link_rx_head->mem;
   1466a:	685f      	ldr	r7, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1466c:	f201 116f 	addw	r1, r1, #367	; 0x16f
   14670:	783a      	ldrb	r2, [r7, #0]
   14672:	f7fe fd2d 	bl	130d0 <tx_cmplt_get>
		if (!cmplt) {
   14676:	4604      	mov	r4, r0
   14678:	b9d0      	cbnz	r0, 146b0 <ll_rx_get+0x5c>
			first = _radio.packet_release_first;
   1467a:	f896 316f 	ldrb.w	r3, [r6, #367]	; 0x16f
   1467e:	f88d 3005 	strb.w	r3, [sp, #5]
				cmplt_curr = tx_cmplt_get(&h, &first,
   14682:	f896 2170 	ldrb.w	r2, [r6, #368]	; 0x170
   14686:	f10d 0105 	add.w	r1, sp, #5
   1468a:	f10d 0006 	add.w	r0, sp, #6
   1468e:	f7fe fd1f 	bl	130d0 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   14692:	b924      	cbnz	r4, 1469e <ll_rx_get+0x4a>
			} while ((cmplt_prev != 0) ||
   14694:	b918      	cbnz	r0, 1469e <ll_rx_get+0x4a>
			*node_rx = _node_rx;
   14696:	602f      	str	r7, [r5, #0]
}
   14698:	4620      	mov	r0, r4
   1469a:	b003      	add	sp, #12
   1469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
   1469e:	4604      	mov	r4, r0
   146a0:	e7ef      	b.n	14682 <ll_rx_get+0x2e>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   146a2:	f891 2170 	ldrb.w	r2, [r1, #368]	; 0x170
   146a6:	f201 116f 	addw	r1, r1, #367	; 0x16f
   146aa:	f7fe fd11 	bl	130d0 <tx_cmplt_get>
   146ae:	4604      	mov	r4, r0
		*node_rx = NULL;
   146b0:	2300      	movs	r3, #0
   146b2:	602b      	str	r3, [r5, #0]
   146b4:	e7f0      	b.n	14698 <ll_rx_get+0x44>
   146b6:	bf00      	nop
   146b8:	20001230 	.word	0x20001230

000146bc <ll_rx_mem_release>:
{
   146bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   146c0:	4c16      	ldr	r4, [pc, #88]	; (1471c <ll_rx_mem_release+0x60>)
{
   146c2:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   146c4:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   146c6:	f5a4 7694 	sub.w	r6, r4, #296	; 0x128
			mem_release(conn, &_radio.conn_free);
   146ca:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
   146ce:	b920      	cbnz	r0, 146da <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
   146d0:	6028      	str	r0, [r5, #0]
}
   146d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   146d6:	f7ff baeb 	b.w	13cb0 <packet_rx_allocate.constprop.49>
		switch (_node_rx_free->hdr.type) {
   146da:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.next;
   146dc:	f8d0 8000 	ldr.w	r8, [r0]
		switch (_node_rx_free->hdr.type) {
   146e0:	2a0d      	cmp	r2, #13
   146e2:	d807      	bhi.n	146f4 <ll_rx_mem_release+0x38>
   146e4:	2301      	movs	r3, #1
   146e6:	4093      	lsls	r3, r2
   146e8:	f642 5214 	movw	r2, #11540	; 0x2d14
   146ec:	4213      	tst	r3, r2
   146ee:	d107      	bne.n	14700 <ll_rx_mem_release+0x44>
   146f0:	059b      	lsls	r3, r3, #22
   146f2:	d40a      	bmi.n	1470a <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
   146f4:	4040      	eors	r0, r0
   146f6:	f380 8811 	msr	BASEPRI, r0
   146fa:	f04f 0004 	mov.w	r0, #4
   146fe:	df02      	svc	2
			mem_release(_node_rx_free,
   14700:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   14702:	f009 ff90 	bl	1e626 <mem_release>
{
   14706:	4640      	mov	r0, r8
   14708:	e7e1      	b.n	146ce <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1470a:	88c2      	ldrh	r2, [r0, #6]
   1470c:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   14710:	f44f 7196 	mov.w	r1, #300	; 0x12c
   14714:	f009 ff9c 	bl	1e650 <mem_get>
			mem_release(conn, &_radio.conn_free);
   14718:	4639      	mov	r1, r7
   1471a:	e7f2      	b.n	14702 <ll_rx_mem_release+0x46>
   1471c:	20001358 	.word	0x20001358

00014720 <radio_rx_fc_set>:

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
   14720:	b530      	push	{r4, r5, lr}
	if (_radio.fc_ena) {
   14722:	4b26      	ldr	r3, [pc, #152]	; (147bc <radio_rx_fc_set+0x9c>)
   14724:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
   14728:	b912      	cbnz	r2, 14730 <radio_rx_fc_set+0x10>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
   1472a:	2100      	movs	r1, #0
}
   1472c:	4608      	mov	r0, r1
   1472e:	bd30      	pop	{r4, r5, pc}
		u8_t req = _radio.fc_req;
   14730:	f893 5178 	ldrb.w	r5, [r3, #376]	; 0x178
		u8_t ack = _radio.fc_ack;
   14734:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
		u8_t req = _radio.fc_req;
   14738:	b2ed      	uxtb	r5, r5
		if (fc) {
   1473a:	b351      	cbz	r1, 14792 <radio_rx_fc_set+0x72>
			if (handle != 0xffff) {
   1473c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14740:	4288      	cmp	r0, r1
   14742:	d0f2      	beq.n	1472a <radio_rx_fc_set+0xa>
	if (req == ack) {
   14744:	4295      	cmp	r5, r2
   14746:	d119      	bne.n	1477c <radio_rx_fc_set+0x5c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   14748:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   1474c:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
   14750:	4291      	cmp	r1, r2
   14752:	d111      	bne.n	14778 <radio_rx_fc_set+0x58>
				ack1 = TRIPLE_BUFFER_SIZE;
   14754:	2d00      	cmp	r5, #0
   14756:	bf14      	ite	ne
   14758:	462a      	movne	r2, r5
   1475a:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   1475c:	3a01      	subs	r2, #1
   1475e:	b2d2      	uxtb	r2, r2
   14760:	eb03 0142 	add.w	r1, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   14764:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
			if (req != _radio.fc_req) {
   14768:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
			_radio.fc_handle[--ack1] = handle;
   1476c:	f8a1 0172 	strh.w	r0, [r1, #370]	; 0x172
			if (req != _radio.fc_req) {
   14770:	4295      	cmp	r5, r2
   14772:	d0da      	beq.n	1472a <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
   14774:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
		return 1;
   14778:	2101      	movs	r1, #1
   1477a:	e7d7      	b.n	1472c <radio_rx_fc_set+0xc>
	} else if (((req == 0) &&
   1477c:	b925      	cbnz	r5, 14788 <radio_rx_fc_set+0x68>
   1477e:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   14782:	4283      	cmp	r3, r0
   14784:	d1f8      	bne.n	14778 <radio_rx_fc_set+0x58>
   14786:	e7d0      	b.n	1472a <radio_rx_fc_set+0xa>
   14788:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   1478c:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
   14790:	e7f7      	b.n	14782 <radio_rx_fc_set+0x62>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14792:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   14796:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   1479a:	42a0      	cmp	r0, r4
   1479c:	d1c5      	bne.n	1472a <radio_rx_fc_set+0xa>
   1479e:	4295      	cmp	r5, r2
   147a0:	d0c3      	beq.n	1472a <radio_rx_fc_set+0xa>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   147a2:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
			_radio.fc_ack = req;
   147a6:	f883 5179 	strb.w	r5, [r3, #377]	; 0x179
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   147aa:	42a0      	cmp	r0, r4
   147ac:	d0bd      	beq.n	1472a <radio_rx_fc_set+0xa>
			    (req == _radio.fc_req)) {
   147ae:	f893 0178 	ldrb.w	r0, [r3, #376]	; 0x178
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   147b2:	42a8      	cmp	r0, r5
   147b4:	d1b9      	bne.n	1472a <radio_rx_fc_set+0xa>
				_radio.fc_ack = ack;
   147b6:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
   147ba:	e7b7      	b.n	1472c <radio_rx_fc_set+0xc>
   147bc:	20001230 	.word	0x20001230

000147c0 <ll_tx_mem_acquire>:
	return 0;
}

void *ll_tx_mem_acquire(void)
{
	return mem_acquire(&_radio.pkt_tx_data_free);
   147c0:	4801      	ldr	r0, [pc, #4]	; (147c8 <ll_tx_mem_acquire+0x8>)
   147c2:	f009 bf17 	b.w	1e5f4 <mem_acquire>
   147c6:	bf00      	nop
   147c8:	2000138c 	.word	0x2000138c

000147cc <ll_tx_mem_release>:
}

void ll_tx_mem_release(void *node_tx)
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   147cc:	4901      	ldr	r1, [pc, #4]	; (147d4 <ll_tx_mem_release+0x8>)
   147ce:	f009 bf2a 	b.w	1e626 <mem_release>
   147d2:	bf00      	nop
   147d4:	2000138c 	.word	0x2000138c

000147d8 <ll_tx_mem_enqueue>:

	conn->slave.latency_cancel = 0U;
}

int ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   147d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   147da:	4d2d      	ldr	r5, [pc, #180]	; (14890 <ll_tx_mem_enqueue+0xb8>)
   147dc:	f895 416e 	ldrb.w	r4, [r5, #366]	; 0x16e
	if (last == _radio.packet_tx_count) {
   147e0:	f895 316c 	ldrb.w	r3, [r5, #364]	; 0x16c
	last = _radio.packet_tx_last + 1;
   147e4:	3401      	adds	r4, #1
{
   147e6:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   147e8:	b2e4      	uxtb	r4, r4
{
   147ea:	4607      	mov	r7, r0
   147ec:	460e      	mov	r6, r1
		last = 0U;
   147ee:	42a3      	cmp	r3, r4
   147f0:	bf08      	it	eq
   147f2:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   147f4:	f7fe fd30 	bl	13258 <connection_get>
	if (!conn) {
   147f8:	2800      	cmp	r0, #0
   147fa:	d042      	beq.n	14882 <ll_tx_mem_enqueue+0xaa>
		return -EINVAL;
	}

	if (last == _radio.packet_tx_first) {
   147fc:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
   14800:	42a3      	cmp	r3, r4
   14802:	d041      	beq.n	14888 <ll_tx_mem_enqueue+0xb0>
		return -ENOBUFS;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   14804:	f8b5 3160 	ldrh.w	r3, [r5, #352]	; 0x160
   14808:	7972      	ldrb	r2, [r6, #5]
   1480a:	3b07      	subs	r3, #7
   1480c:	429a      	cmp	r2, r3
   1480e:	d905      	bls.n	1481c <ll_tx_mem_enqueue+0x44>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14810:	4040      	eors	r0, r0
   14812:	f380 8811 	msr	BASEPRI, r0
   14816:	f04f 0004 	mov.w	r0, #4
   1481a:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   1481c:	f895 216e 	ldrb.w	r2, [r5, #366]	; 0x16e
   14820:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   14824:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   14828:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   1482c:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   1482e:	f885 416e 	strb.w	r4, [r5, #366]	; 0x16e
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   14832:	f990 301d 	ldrsb.w	r3, [r0, #29]
   14836:	2b00      	cmp	r3, #0
   14838:	db02      	blt.n	14840 <ll_tx_mem_enqueue+0x68>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   1483a:	2000      	movs	r0, #0
}
   1483c:	b009      	add	sp, #36	; 0x24
   1483e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   14840:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   14842:	2b00      	cmp	r3, #0
   14844:	d0f9      	beq.n	1483a <ll_tx_mem_enqueue+0x62>
   14846:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   1484a:	f012 0302 	ands.w	r3, r2, #2
   1484e:	d1f4      	bne.n	1483a <ll_tx_mem_enqueue+0x62>
		conn->slave.latency_cancel = 1U;
   14850:	f042 0202 	orr.w	r2, r2, #2
   14854:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14858:	490e      	ldr	r1, [pc, #56]	; (14894 <ll_tx_mem_enqueue+0xbc>)
				 RADIO_TICKER_ID_FIRST_CONNECTION +
   1485a:	f890 2020 	ldrb.w	r2, [r0, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1485e:	9006      	str	r0, [sp, #24]
   14860:	e9cd 3104 	strd	r3, r1, [sp, #16]
				 RADIO_TICKER_ID_FIRST_CONNECTION +
   14864:	3207      	adds	r2, #7
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14866:	2101      	movs	r1, #1
   14868:	e9cd 3102 	strd	r3, r1, [sp, #8]
   1486c:	e9cd 3300 	strd	r3, r3, [sp]
   14870:	4618      	mov	r0, r3
   14872:	b2d2      	uxtb	r2, r2
   14874:	2103      	movs	r1, #3
   14876:	f7fd fbdd 	bl	12034 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1487a:	f030 0302 	bics.w	r3, r0, #2
   1487e:	d0dc      	beq.n	1483a <ll_tx_mem_enqueue+0x62>
   14880:	e7c6      	b.n	14810 <ll_tx_mem_enqueue+0x38>
		return -EINVAL;
   14882:	f06f 0015 	mvn.w	r0, #21
   14886:	e7d9      	b.n	1483c <ll_tx_mem_enqueue+0x64>
		return -ENOBUFS;
   14888:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1488c:	e7d6      	b.n	1483c <ll_tx_mem_enqueue+0x64>
   1488e:	bf00      	nop
   14890:	20001230 	.word	0x20001230
   14894:	0001ea19 	.word	0x0001ea19

00014898 <radio_adv_disable>:
{
   14898:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   1489a:	2103      	movs	r1, #3
   1489c:	2005      	movs	r0, #5
   1489e:	f7fe fcf3 	bl	13288 <role_disable>
	if (!status) {
   148a2:	4606      	mov	r6, r0
   148a4:	b9d8      	cbnz	r0, 148de <radio_adv_disable+0x46>
		_radio.advertiser.is_enabled = 0U;
   148a6:	4c0f      	ldr	r4, [pc, #60]	; (148e4 <radio_adv_disable+0x4c>)
   148a8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   148ac:	f360 12c7 	bfi	r2, r0, #7, #1
   148b0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   148b4:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   148b8:	07d3      	lsls	r3, r2, #31
   148ba:	d401      	bmi.n	148c0 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   148bc:	f00a fa58 	bl	1ed70 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   148c0:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		if (conn) {
   148c4:	b15d      	cbz	r5, 148de <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   148c6:	2300      	movs	r3, #0
			mem_release(hdr->link, &_radio.link_rx_free);
   148c8:	4907      	ldr	r1, [pc, #28]	; (148e8 <radio_adv_disable+0x50>)
   148ca:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
			_radio.advertiser.conn = NULL;
   148ce:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(hdr->link, &_radio.link_rx_free);
   148d2:	f009 fea8 	bl	1e626 <mem_release>
			mem_release(conn, &_radio.conn_free);
   148d6:	4905      	ldr	r1, [pc, #20]	; (148ec <radio_adv_disable+0x54>)
   148d8:	4628      	mov	r0, r5
   148da:	f009 fea4 	bl	1e626 <mem_release>
}
   148de:	4630      	mov	r0, r6
   148e0:	bd70      	pop	{r4, r5, r6, pc}
   148e2:	bf00      	nop
   148e4:	20001230 	.word	0x20001230
   148e8:	20001370 	.word	0x20001370
   148ec:	2000133c 	.word	0x2000133c

000148f0 <radio_scan_disable>:
{
   148f0:	b510      	push	{r4, lr}
	if (scanner && _radio.scanner.conn) {
   148f2:	b118      	cbz	r0, 148fc <radio_scan_disable+0xc>
   148f4:	4b0e      	ldr	r3, [pc, #56]	; (14930 <radio_scan_disable+0x40>)
   148f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   148fa:	b9bb      	cbnz	r3, 1492c <radio_scan_disable+0x3c>
	status = role_disable(RADIO_TICKER_ID_SCAN,
   148fc:	2104      	movs	r1, #4
   148fe:	2006      	movs	r0, #6
   14900:	f7fe fcc2 	bl	13288 <role_disable>
	if (!status && !_radio.scanner.conn) {
   14904:	4604      	mov	r4, r0
   14906:	b978      	cbnz	r0, 14928 <radio_scan_disable+0x38>
   14908:	4b09      	ldr	r3, [pc, #36]	; (14930 <radio_scan_disable+0x40>)
   1490a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1490e:	b95a      	cbnz	r2, 14928 <radio_scan_disable+0x38>
		_radio.scanner.is_enabled = 0U;
   14910:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   14914:	f360 0200 	bfi	r2, r0, #0, #1
   14918:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   1491c:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
   14920:	2b00      	cmp	r3, #0
   14922:	db01      	blt.n	14928 <radio_scan_disable+0x38>
			ll_adv_scan_state_cb(0);
   14924:	f00a fa24 	bl	1ed70 <ll_adv_scan_state_cb>
}
   14928:	4620      	mov	r0, r4
   1492a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1492c:	240c      	movs	r4, #12
   1492e:	e7fb      	b.n	14928 <radio_scan_disable+0x38>
   14930:	20001230 	.word	0x20001230

00014934 <ll_rx_dequeue>:
{
   14934:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   14936:	4d33      	ldr	r5, [pc, #204]	; (14a04 <ll_rx_dequeue+0xd0>)
	struct radio_pdu_node_rx *node_rx = NULL;
   14938:	2300      	movs	r3, #0
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1493a:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
	struct radio_pdu_node_rx *node_rx = NULL;
   1493e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   14940:	aa01      	add	r2, sp, #4
   14942:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   14946:	f009 feac 	bl	1e6a2 <memq_dequeue>
	LL_ASSERT(link);
   1494a:	462c      	mov	r4, r5
   1494c:	b928      	cbnz	r0, 1495a <ll_rx_dequeue+0x26>
			LL_ASSERT(_radio.scanner.is_enabled);
   1494e:	4040      	eors	r0, r0
   14950:	f380 8811 	msr	BASEPRI, r0
   14954:	f04f 0004 	mov.w	r0, #4
   14958:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   1495a:	f505 71a0 	add.w	r1, r5, #320	; 0x140
   1495e:	f009 fe62 	bl	1e626 <mem_release>
	switch (node_rx->hdr.type) {
   14962:	9a01      	ldr	r2, [sp, #4]
   14964:	7911      	ldrb	r1, [r2, #4]
   14966:	290d      	cmp	r1, #13
   14968:	d8f1      	bhi.n	1494e <ll_rx_dequeue+0x1a>
   1496a:	2301      	movs	r3, #1
   1496c:	408b      	lsls	r3, r1
   1496e:	f642 5014 	movw	r0, #11540	; 0x2d14
   14972:	4203      	tst	r3, r0
   14974:	d111      	bne.n	1499a <ll_rx_dequeue+0x66>
   14976:	0598      	lsls	r0, r3, #22
   14978:	d5e9      	bpl.n	1494e <ll_rx_dequeue+0x1a>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1497a:	2908      	cmp	r1, #8
   1497c:	d134      	bne.n	149e8 <ll_rx_dequeue+0xb4>
		if ((radio_le_conn_cmplt->status == BT_HCI_ERR_ADV_TIMEOUT) ||
   1497e:	7a13      	ldrb	r3, [r2, #8]
   14980:	2b3c      	cmp	r3, #60	; 0x3c
   14982:	d015      	beq.n	149b0 <ll_rx_dequeue+0x7c>
   14984:	7a52      	ldrb	r2, [r2, #9]
   14986:	bb8a      	cbnz	r2, 149ec <ll_rx_dequeue+0xb8>
			LL_ASSERT(_radio.scanner.is_enabled);
   14988:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1498c:	07d9      	lsls	r1, r3, #31
   1498e:	d5de      	bpl.n	1494e <ll_rx_dequeue+0x1a>
			_radio.scanner.is_enabled = 0U;
   14990:	f362 0300 	bfi	r3, r2, #0, #1
   14994:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		if (conn) {
   14998:	e01a      	b.n	149d0 <ll_rx_dequeue+0x9c>
		LL_ASSERT(_radio.link_rx_data_quota <
   1499a:	f895 0138 	ldrb.w	r0, [r5, #312]	; 0x138
   1499e:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
   149a2:	3801      	subs	r0, #1
   149a4:	4283      	cmp	r3, r0
   149a6:	dad2      	bge.n	1494e <ll_rx_dequeue+0x1a>
		_radio.link_rx_data_quota++;
   149a8:	3301      	adds	r3, #1
   149aa:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
		break;
   149ae:	e7e4      	b.n	1497a <ll_rx_dequeue+0x46>
				_radio.advertiser.conn = NULL;
   149b0:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   149b2:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   149b6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   149ba:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   149be:	2b00      	cmp	r3, #0
   149c0:	dac5      	bge.n	1494e <ll_rx_dequeue+0x1a>
			_radio.advertiser.is_enabled = 0U;
   149c2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   149c6:	f36f 13c7 	bfc	r3, #7, #1
   149ca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   149ce:	b97d      	cbnz	r5, 149f0 <ll_rx_dequeue+0xbc>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   149d0:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   149d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   149d8:	f000 0001 	and.w	r0, r0, #1
   149dc:	0040      	lsls	r0, r0, #1
		if (!bm) {
   149de:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   149e2:	d101      	bne.n	149e8 <ll_rx_dequeue+0xb4>
			ll_adv_scan_state_cb(0);
   149e4:	f00a f9c4 	bl	1ed70 <ll_adv_scan_state_cb>
}
   149e8:	b003      	add	sp, #12
   149ea:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
   149ec:	2500      	movs	r5, #0
   149ee:	e7e4      	b.n	149ba <ll_rx_dequeue+0x86>
			mem_release(node_rx->hdr.link,
   149f0:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   149f4:	4904      	ldr	r1, [pc, #16]	; (14a08 <ll_rx_dequeue+0xd4>)
   149f6:	f009 fe16 	bl	1e626 <mem_release>
			mem_release(conn, &_radio.conn_free);
   149fa:	4904      	ldr	r1, [pc, #16]	; (14a0c <ll_rx_dequeue+0xd8>)
   149fc:	4628      	mov	r0, r5
   149fe:	f009 fe12 	bl	1e626 <mem_release>
   14a02:	e7e5      	b.n	149d0 <ll_rx_dequeue+0x9c>
   14a04:	20001230 	.word	0x20001230
   14a08:	20001370 	.word	0x20001370
   14a0c:	2000133c 	.word	0x2000133c

00014a10 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   14a10:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   14a12:	4b07      	ldr	r3, [pc, #28]	; (14a30 <rtc0_nrf5_isr+0x20>)
   14a14:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   14a18:	b122      	cbz	r2, 14a24 <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   14a1a:	2000      	movs	r0, #0
   14a1c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   14a20:	f7fd faac 	bl	11f7c <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   14a24:	2000      	movs	r0, #0

	DEBUG_TICKER_ISR(0);
}
   14a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   14a2a:	f7fc be01 	b.w	11630 <mayfly_run>
   14a2e:	bf00      	nop
   14a30:	4000b000 	.word	0x4000b000

00014a34 <radio_event_callback>:
	k_sem_give(sem_recv);
   14a34:	4b01      	ldr	r3, [pc, #4]	; (14a3c <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   14a36:	6818      	ldr	r0, [r3, #0]
   14a38:	f002 b9e8 	b.w	16e0c <z_impl_k_sem_give>
   14a3c:	20001bbc 	.word	0x20001bbc

00014a40 <ll_init>:

	DEBUG_TICKER_JOB(0);
}

int ll_init(struct k_sem *sem_rx)
{
   14a40:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   14a42:	4b37      	ldr	r3, [pc, #220]	; (14b20 <ll_init+0xe0>)
{
   14a44:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   14a46:	6018      	str	r0, [r3, #0]
   14a48:	4836      	ldr	r0, [pc, #216]	; (14b24 <ll_init+0xe4>)
   14a4a:	f001 fc9d 	bl	16388 <z_impl_device_get_binding>

	clk_k32 = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clk_k32) {
   14a4e:	b918      	cbnz	r0, 14a58 <ll_init+0x18>
		return -ENODEV;
   14a50:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI5_IRQn);

	return 0;
}
   14a54:	b006      	add	sp, #24
   14a56:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   14a58:	6843      	ldr	r3, [r0, #4]
   14a5a:	2101      	movs	r1, #1
   14a5c:	681b      	ldr	r3, [r3, #0]
   14a5e:	4798      	blx	r3
   14a60:	4831      	ldr	r0, [pc, #196]	; (14b28 <ll_init+0xe8>)
   14a62:	f001 fc91 	bl	16388 <z_impl_device_get_binding>
	if (!entropy) {
   14a66:	4606      	mov	r6, r0
   14a68:	2800      	cmp	r0, #0
   14a6a:	d0f1      	beq.n	14a50 <ll_init+0x10>
	cntr_init();
   14a6c:	f000 fa22 	bl	14eb4 <cntr_init>
	mayfly_init();
   14a70:	f7fc fd3c 	bl	114ec <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   14a74:	4b2d      	ldr	r3, [pc, #180]	; (14b2c <ll_init+0xec>)
   14a76:	2208      	movs	r2, #8
   14a78:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   14a7a:	2403      	movs	r4, #3
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   14a7c:	4a2c      	ldr	r2, [pc, #176]	; (14b30 <ll_init+0xf0>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   14a7e:	721c      	strb	r4, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   14a80:	2000      	movs	r0, #0
   14a82:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   14a84:	761c      	strb	r4, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   14a86:	9205      	str	r2, [sp, #20]
   14a88:	4a2a      	ldr	r2, [pc, #168]	; (14b34 <ll_init+0xf4>)
   14a8a:	9204      	str	r2, [sp, #16]
   14a8c:	4a2a      	ldr	r2, [pc, #168]	; (14b38 <ll_init+0xf8>)
   14a8e:	9203      	str	r2, [sp, #12]
   14a90:	4a2a      	ldr	r2, [pc, #168]	; (14b3c <ll_init+0xfc>)
   14a92:	9202      	str	r2, [sp, #8]
   14a94:	220e      	movs	r2, #14
   14a96:	e9cd 3200 	strd	r3, r2, [sp]
   14a9a:	2109      	movs	r1, #9
   14a9c:	2304      	movs	r3, #4
   14a9e:	4a28      	ldr	r2, [pc, #160]	; (14b40 <ll_init+0x100>)
   14aa0:	f7fd fa2e 	bl	11f00 <ticker_init>
	LL_ASSERT(!err);
   14aa4:	b128      	cbz	r0, 14ab2 <ll_init+0x72>
   14aa6:	4040      	eors	r0, r0
   14aa8:	f380 8811 	msr	BASEPRI, r0
   14aac:	f04f 0004 	mov.w	r0, #4
   14ab0:	df02      	svc	2
   14ab2:	4824      	ldr	r0, [pc, #144]	; (14b44 <ll_init+0x104>)
   14ab4:	f001 fc68 	bl	16388 <z_impl_device_get_binding>
	if (!clk_m16) {
   14ab8:	2800      	cmp	r0, #0
   14aba:	d0c9      	beq.n	14a50 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF_K32SRC_ACCURACY, entropy,
   14abc:	f44f 735a 	mov.w	r3, #872	; 0x368
   14ac0:	9305      	str	r3, [sp, #20]
   14ac2:	4b21      	ldr	r3, [pc, #132]	; (14b48 <ll_init+0x108>)
   14ac4:	9304      	str	r3, [sp, #16]
   14ac6:	2501      	movs	r5, #1
   14ac8:	231b      	movs	r3, #27
   14aca:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14ace:	9401      	str	r4, [sp, #4]
   14ad0:	9500      	str	r5, [sp, #0]
   14ad2:	462b      	mov	r3, r5
   14ad4:	4632      	mov	r2, r6
   14ad6:	2107      	movs	r1, #7
   14ad8:	f7ff fcb0 	bl	1443c <radio_init>
	if (err) {
   14adc:	4604      	mov	r4, r0
   14ade:	b9e0      	cbnz	r0, 14b1a <ll_init+0xda>
	ll_filter_reset(true);
   14ae0:	4628      	mov	r0, r5
   14ae2:	f000 f9db 	bl	14e9c <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   14ae6:	4622      	mov	r2, r4
   14ae8:	4621      	mov	r1, r4
   14aea:	4628      	mov	r0, r5
   14aec:	f7f3 fc4e 	bl	838c <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   14af0:	4622      	mov	r2, r4
   14af2:	4621      	mov	r1, r4
   14af4:	200b      	movs	r0, #11
   14af6:	f7f3 fc49 	bl	838c <z_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI5_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi5_nrf5_isr,
   14afa:	4622      	mov	r2, r4
   14afc:	4621      	mov	r1, r4
   14afe:	2019      	movs	r0, #25
   14b00:	f7f3 fc44 	bl	838c <z_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   14b04:	4628      	mov	r0, r5
   14b06:	f7f3 fc0f 	bl	8328 <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   14b0a:	200b      	movs	r0, #11
   14b0c:	f7f3 fc0c 	bl	8328 <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI5_IRQn);
   14b10:	2019      	movs	r0, #25
   14b12:	f7f3 fc09 	bl	8328 <z_arch_irq_enable>
	return 0;
   14b16:	4620      	mov	r0, r4
   14b18:	e79c      	b.n	14a54 <ll_init+0x14>
		return -ENOMEM;
   14b1a:	f06f 000b 	mvn.w	r0, #11
   14b1e:	e799      	b.n	14a54 <ll_init+0x14>
   14b20:	20001bbc 	.word	0x20001bbc
   14b24:	0002162b 	.word	0x0002162b
   14b28:	00021607 	.word	0x00021607
   14b2c:	20001b9c 	.word	0x20001b9c
   14b30:	0001efeb 	.word	0x0001efeb
   14b34:	00015759 	.word	0x00015759
   14b38:	00015739 	.word	0x00015739
   14b3c:	200018fc 	.word	0x200018fc
   14b40:	20001794 	.word	0x20001794
   14b44:	00021635 	.word	0x00021635
   14b48:	2000142c 	.word	0x2000142c

00014b4c <ll_adv_params_set>:
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u8_t ll_adv_params_set(u16_t interval, u8_t adv_type,
		       u8_t own_addr_type, u8_t direct_addr_type,
		       u8_t const *const direct_addr, u8_t chan_map,
		       u8_t filter_policy)
{
   14b4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14b50:	461e      	mov	r6, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14b52:	4b33      	ldr	r3, [pc, #204]	; (14c20 <ll_adv_params_set+0xd4>)
   14b54:	9300      	str	r3, [sp, #0]
{
   14b56:	4604      	mov	r4, r0
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14b58:	2301      	movs	r3, #1
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled(0)) {
   14b5a:	2000      	movs	r0, #0
{
   14b5c:	4688      	mov	r8, r1
   14b5e:	4615      	mov	r5, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14b60:	f88d 3004 	strb.w	r3, [sp, #4]
	if (ll_adv_is_enabled(0)) {
   14b64:	f7ff fd3c 	bl	145e0 <ll_adv_is_enabled>
   14b68:	2800      	cmp	r0, #0
   14b6a:	d154      	bne.n	14c16 <ll_adv_params_set+0xca>
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
   14b6c:	4a2d      	ldr	r2, [pc, #180]	; (14c24 <ll_adv_params_set+0xd8>)
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chan_map = chan_map;
   14b6e:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   14b72:	7813      	ldrb	r3, [r2, #0]
   14b74:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   14b78:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
	if (adv_type != 0x01) {
   14b7c:	f1b8 0f01 	cmp.w	r8, #1
		ll_adv.interval = 0;
   14b80:	bf08      	it	eq
   14b82:	2400      	moveq	r4, #0
	ll_adv.filter_policy = filter_policy;
   14b84:	f361 03c4 	bfi	r3, r1, #3, #2
   14b88:	8054      	strh	r4, [r2, #2]
   14b8a:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   14b8c:	f7ff fd20 	bl	145d0 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   14b90:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   14b94:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14b98:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
   14b9c:	ab02      	add	r3, sp, #8
   14b9e:	eb03 0108 	add.w	r1, r3, r8
   14ba2:	5d03      	ldrb	r3, [r0, r4]
   14ba4:	f811 2c08 	ldrb.w	r2, [r1, #-8]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   14ba8:	f005 0501 	and.w	r5, r5, #1
	pdu->type = pdu_adv_type[adv_type];
   14bac:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   14bb0:	f365 1386 	bfi	r3, r5, #6, #1
	pdu->rfu = 0;
   14bb4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   14bb8:	f003 020f 	and.w	r2, r3, #15
   14bbc:	2a01      	cmp	r2, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   14bbe:	eb00 0704 	add.w	r7, r0, r4
	pdu->rfu = 0;
   14bc2:	5503      	strb	r3, [r0, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   14bc4:	d122      	bne.n	14c0c <ll_adv_params_set+0xc0>
		pdu->rx_addr = direct_addr_type;
   14bc6:	f366 13c7 	bfi	r3, r6, #7, #1
   14bca:	5503      	strb	r3, [r0, r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   14bcc:	2206      	movs	r2, #6
   14bce:	9908      	ldr	r1, [sp, #32]
   14bd0:	f107 0008 	add.w	r0, r7, #8
   14bd4:	f005 fa68 	bl	1a0a8 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   14bd8:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   14bda:	707b      	strb	r3, [r7, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   14bdc:	f7ff fcfc 	bl	145d8 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   14be0:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   14be4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   14be8:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   14bec:	18c1      	adds	r1, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   14bee:	5cc2      	ldrb	r2, [r0, r3]
   14bf0:	f365 1286 	bfi	r2, r5, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14bf4:	f002 0240 	and.w	r2, r2, #64	; 0x40
   14bf8:	f042 0204 	orr.w	r2, r2, #4
   14bfc:	54c2      	strb	r2, [r0, r3]
	pdu->rx_addr = 0;
	if (pdu->len == 0) {
   14bfe:	7848      	ldrb	r0, [r1, #1]
   14c00:	b958      	cbnz	r0, 14c1a <ll_adv_params_set+0xce>
		pdu->len = BDADDR_SIZE;
   14c02:	2306      	movs	r3, #6
   14c04:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   14c06:	b002      	add	sp, #8
   14c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (pdu->len == 0) {
   14c0c:	787b      	ldrb	r3, [r7, #1]
   14c0e:	2b00      	cmp	r3, #0
   14c10:	d1e4      	bne.n	14bdc <ll_adv_params_set+0x90>
		pdu->len = BDADDR_SIZE;
   14c12:	2306      	movs	r3, #6
   14c14:	e7e1      	b.n	14bda <ll_adv_params_set+0x8e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14c16:	200c      	movs	r0, #12
   14c18:	e7f5      	b.n	14c06 <ll_adv_params_set+0xba>
	return 0;
   14c1a:	2000      	movs	r0, #0
   14c1c:	e7f3      	b.n	14c06 <ll_adv_params_set+0xba>
   14c1e:	bf00      	nop
   14c20:	02060100 	.word	0x02060100
   14c24:	2000209c 	.word	0x2000209c

00014c28 <ll_adv_enable>:
u8_t ll_adv_enable(u16_t handle, u8_t enable)
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
{
   14c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   14c2c:	b918      	cbnz	r0, 14c36 <ll_adv_enable+0xe>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
#endif /* !CONFIG_BT_HCI_MESH_EXT */
	return status;
}
   14c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return radio_adv_disable();
   14c32:	f7ff be31 	b.w	14898 <radio_adv_disable>
	} else if (ll_adv_is_enabled(0)) {
   14c36:	2000      	movs	r0, #0
   14c38:	f7ff fcd2 	bl	145e0 <ll_adv_is_enabled>
   14c3c:	4607      	mov	r7, r0
   14c3e:	bbb8      	cbnz	r0, 14cb0 <ll_adv_enable+0x88>
	radio_adv_data = radio_adv_data_get();
   14c40:	f7ff fcc6 	bl	145d0 <radio_adv_data_get>
   14c44:	4606      	mov	r6, r0
	radio_scan_data = radio_scan_data_get();
   14c46:	f7ff fcc7 	bl	145d8 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   14c4a:	f896 404f 	ldrb.w	r4, [r6, #79]	; 0x4f
   14c4e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14c52:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   14c56:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   14c5a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   14c5e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   14c62:	18c5      	adds	r5, r0, r3
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   14c64:	5d30      	ldrb	r0, [r6, r4]
   14c66:	4639      	mov	r1, r7
   14c68:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14c6c:	f7fd faf0 	bl	12250 <ll_addr_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   14c70:	eb06 0804 	add.w	r8, r6, r4
			memcpy(&pdu_adv->adv_ind.addr[0],
   14c74:	2206      	movs	r2, #6
   14c76:	4601      	mov	r1, r0
   14c78:	f108 0002 	add.w	r0, r8, #2
   14c7c:	f005 fa14 	bl	1a0a8 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   14c80:	5d30      	ldrb	r0, [r6, r4]
   14c82:	4639      	mov	r1, r7
   14c84:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14c88:	f7fd fae2 	bl	12250 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   14c8c:	2206      	movs	r2, #6
   14c8e:	4601      	mov	r1, r0
   14c90:	1ca8      	adds	r0, r5, #2
   14c92:	f005 fa09 	bl	1a0a8 <memcpy>
				  ll_adv.filter_policy, rl_idx);
   14c96:	4807      	ldr	r0, [pc, #28]	; (14cb4 <ll_adv_enable+0x8c>)
   14c98:	7801      	ldrb	r1, [r0, #0]
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   14c9a:	8840      	ldrh	r0, [r0, #2]
   14c9c:	f3c1 02c1 	ubfx	r2, r1, #3, #2
   14ca0:	23ff      	movs	r3, #255	; 0xff
   14ca2:	f001 0107 	and.w	r1, r1, #7
   14ca6:	f7ee f98f 	bl	2fc8 <radio_adv_enable>
	return status;
   14caa:	b2c0      	uxtb	r0, r0
}
   14cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   14cb0:	2000      	movs	r0, #0
   14cb2:	e7fb      	b.n	14cac <ll_adv_enable+0x84>
   14cb4:	2000209c 	.word	0x2000209c

00014cb8 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u8_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   14cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14cbc:	4681      	mov	r9, r0
	if (ll_scan_is_enabled(0)) {
   14cbe:	2000      	movs	r0, #0
{
   14cc0:	4688      	mov	r8, r1
   14cc2:	4617      	mov	r7, r2
   14cc4:	461e      	mov	r6, r3
	if (ll_scan_is_enabled(0)) {
   14cc6:	f7ff fca1 	bl	1460c <ll_scan_is_enabled>
   14cca:	b978      	cbnz	r0, 14cec <ll_scan_params_set+0x34>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   14ccc:	4d08      	ldr	r5, [pc, #32]	; (14cf0 <ll_scan_params_set+0x38>)
	ll_scan.interval = interval;
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;
   14cce:	f89d 3020 	ldrb.w	r3, [sp, #32]
	ll_scan.type = type;
   14cd2:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   14cd4:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   14cd8:	f369 0400 	bfi	r4, r9, #0, #1
	ll_scan.own_addr_type = own_addr_type;
   14cdc:	f366 0442 	bfi	r4, r6, #1, #2
	ll_scan.filter_policy = filter_policy;
   14ce0:	f363 04c4 	bfi	r4, r3, #3, #2
	ll_scan.window = window;
   14ce4:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   14ce6:	712c      	strb	r4, [r5, #4]

	return 0;
}
   14ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14cec:	200c      	movs	r0, #12
   14cee:	e7fb      	b.n	14ce8 <ll_scan_params_set+0x30>
   14cf0:	200020a0 	.word	0x200020a0

00014cf4 <ll_scan_enable>:

u8_t ll_scan_enable(u8_t enable)
{
   14cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cf6:	b085      	sub	sp, #20
	u8_t rpa_gen = 0U;
	u32_t status;
	u32_t scan;

	if (!enable) {
   14cf8:	b928      	cbnz	r0, 14d06 <ll_scan_enable+0x12>
		return radio_scan_disable(true);
   14cfa:	2001      	movs	r0, #1
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   14cfc:	b005      	add	sp, #20
   14cfe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable(true);
   14d02:	f7ff bdf5 	b.w	148f0 <radio_scan_disable>
	scan = ll_scan_is_enabled(0);
   14d06:	2000      	movs	r0, #0
   14d08:	f7ff fc80 	bl	1460c <ll_scan_is_enabled>
   14d0c:	4605      	mov	r5, r0
	if (scan & BIT(2)) {
   14d0e:	f010 0004 	ands.w	r0, r0, #4
   14d12:	d11c      	bne.n	14d4e <ll_scan_enable+0x5a>
	if (scan) {
   14d14:	b9cd      	cbnz	r5, 14d4a <ll_scan_enable+0x56>
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   14d16:	4e0f      	ldr	r6, [pc, #60]	; (14d54 <ll_scan_enable+0x60>)
   14d18:	7934      	ldrb	r4, [r6, #4]
   14d1a:	f004 0701 	and.w	r7, r4, #1
   14d1e:	f3c4 0440 	ubfx	r4, r4, #1, #1
   14d22:	4629      	mov	r1, r5
   14d24:	4620      	mov	r0, r4
   14d26:	f7fd fa93 	bl	12250 <ll_addr_get>
   14d2a:	23ff      	movs	r3, #255	; 0xff
   14d2c:	e9cd 5302 	strd	r5, r3, [sp, #8]
				   ll_scan.filter_policy, rpa_gen,
   14d30:	7933      	ldrb	r3, [r6, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   14d32:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   14d36:	9301      	str	r3, [sp, #4]
   14d38:	8873      	ldrh	r3, [r6, #2]
   14d3a:	9300      	str	r3, [sp, #0]
   14d3c:	4602      	mov	r2, r0
   14d3e:	8833      	ldrh	r3, [r6, #0]
   14d40:	4621      	mov	r1, r4
   14d42:	4638      	mov	r0, r7
   14d44:	f7ee fa94 	bl	3270 <radio_scan_enable>
	return status;
   14d48:	b2c0      	uxtb	r0, r0
}
   14d4a:	b005      	add	sp, #20
   14d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	       return BT_HCI_ERR_CMD_DISALLOWED;
   14d4e:	200c      	movs	r0, #12
   14d50:	e7fb      	b.n	14d4a <ll_scan_enable+0x56>
   14d52:	bf00      	nop
   14d54:	200020a0 	.word	0x200020a0

00014d58 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
   14d58:	b928      	cbnz	r0, 14d66 <ctrl_filter_get+0xe>
   14d5a:	4040      	eors	r0, r0
   14d5c:	f380 8811 	msr	BASEPRI, r0
   14d60:	f04f 0004 	mov.w	r0, #4
   14d64:	df02      	svc	2
	return &wl_filter;
#endif
}
   14d66:	4801      	ldr	r0, [pc, #4]	; (14d6c <ctrl_filter_get+0x14>)
   14d68:	4770      	bx	lr
   14d6a:	bf00      	nop
   14d6c:	20002598 	.word	0x20002598

00014d70 <ll_wl_clear>:
{
	return WL_SIZE;
}

u8_t ll_wl_clear(void)
{
   14d70:	b508      	push	{r3, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   14d72:	f7ff fc3d 	bl	145f0 <radio_adv_filter_pol_get>
   14d76:	b108      	cbz	r0, 14d7c <ll_wl_clear+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14d78:	200c      	movs	r0, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0U;

	return 0;
}
   14d7a:	bd08      	pop	{r3, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   14d7c:	f7ff fc5c 	bl	14638 <radio_scan_filter_pol_get>
   14d80:	f010 0001 	ands.w	r0, r0, #1
   14d84:	d1f8      	bne.n	14d78 <ll_wl_clear+0x8>
	filter->enable_bitmask = 0U;
   14d86:	4b03      	ldr	r3, [pc, #12]	; (14d94 <ll_wl_clear+0x24>)
   14d88:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0U;
   14d8a:	7058      	strb	r0, [r3, #1]
	wl_anon = 0U;
   14d8c:	4b02      	ldr	r3, [pc, #8]	; (14d98 <ll_wl_clear+0x28>)
   14d8e:	7018      	strb	r0, [r3, #0]
	return 0;
   14d90:	e7f3      	b.n	14d7a <ll_wl_clear+0xa>
   14d92:	bf00      	nop
   14d94:	20002598 	.word	0x20002598
   14d98:	20002597 	.word	0x20002597

00014d9c <ll_wl_add>:

u8_t ll_wl_add(bt_addr_le_t *addr)
{
   14d9c:	b570      	push	{r4, r5, r6, lr}
   14d9e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   14da0:	f7ff fc26 	bl	145f0 <radio_adv_filter_pol_get>
   14da4:	b108      	cbz	r0, 14daa <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14da6:	200c      	movs	r0, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
   14da8:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   14daa:	f7ff fc45 	bl	14638 <radio_scan_filter_pol_get>
   14dae:	f010 0001 	ands.w	r0, r0, #1
   14db2:	d1f8      	bne.n	14da6 <ll_wl_add+0xa>
	if (addr->type == ADDR_TYPE_ANON) {
   14db4:	7823      	ldrb	r3, [r4, #0]
   14db6:	2bff      	cmp	r3, #255	; 0xff
   14db8:	d103      	bne.n	14dc2 <ll_wl_add+0x26>
		wl_anon = 1U;
   14dba:	4b12      	ldr	r3, [pc, #72]	; (14e04 <ll_wl_add+0x68>)
   14dbc:	2201      	movs	r2, #1
   14dbe:	701a      	strb	r2, [r3, #0]
		return 0;
   14dc0:	e7f2      	b.n	14da8 <ll_wl_add+0xc>
	if (filter->enable_bitmask == 0xFF) {
   14dc2:	4d11      	ldr	r5, [pc, #68]	; (14e08 <ll_wl_add+0x6c>)
   14dc4:	782a      	ldrb	r2, [r5, #0]
   14dc6:	2aff      	cmp	r2, #255	; 0xff
	return filter_add(&wl_filter, addr->type, addr->a.val);
   14dc8:	f104 0101 	add.w	r1, r4, #1
	if (filter->enable_bitmask == 0xFF) {
   14dcc:	d018      	beq.n	14e00 <ll_wl_add+0x64>
	     (filter->enable_bitmask & BIT(index));
   14dce:	fa22 f400 	lsr.w	r4, r2, r0
	for (index = 0;
   14dd2:	f014 0401 	ands.w	r4, r4, #1
   14dd6:	d111      	bne.n	14dfc <ll_wl_add+0x60>
	filter->enable_bitmask |= BIT(index);
   14dd8:	2601      	movs	r6, #1
   14dda:	4086      	lsls	r6, r0
   14ddc:	4332      	orrs	r2, r6
   14dde:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14de0:	f003 0301 	and.w	r3, r3, #1
   14de4:	786a      	ldrb	r2, [r5, #1]
   14de6:	4083      	lsls	r3, r0
   14de8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14dea:	2206      	movs	r2, #6
   14dec:	fb02 5000 	mla	r0, r2, r0, r5
   14df0:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14df2:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14df4:	f005 f958 	bl	1a0a8 <memcpy>
	return filter_add(&wl_filter, addr->type, addr->a.val);
   14df8:	b2e0      	uxtb	r0, r4
   14dfa:	e7d5      	b.n	14da8 <ll_wl_add+0xc>
	     index++) {
   14dfc:	3001      	adds	r0, #1
   14dfe:	e7e6      	b.n	14dce <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   14e00:	2407      	movs	r4, #7
   14e02:	e7f9      	b.n	14df8 <ll_wl_add+0x5c>
   14e04:	20002597 	.word	0x20002597
   14e08:	20002598 	.word	0x20002598

00014e0c <ll_wl_remove>:

u8_t ll_wl_remove(bt_addr_le_t *addr)
{
   14e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14e10:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   14e12:	f7ff fbed 	bl	145f0 <radio_adv_filter_pol_get>
   14e16:	b110      	cbz	r0, 14e1e <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14e18:	200c      	movs	r0, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
   14e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   14e1e:	f7ff fc0b 	bl	14638 <radio_scan_filter_pol_get>
   14e22:	f010 0501 	ands.w	r5, r0, #1
   14e26:	d1f7      	bne.n	14e18 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   14e28:	f897 8000 	ldrb.w	r8, [r7]
   14e2c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   14e30:	d103      	bne.n	14e3a <ll_wl_remove+0x2e>
		wl_anon = 0U;
   14e32:	4b18      	ldr	r3, [pc, #96]	; (14e94 <ll_wl_remove+0x88>)
		return 0;
   14e34:	4628      	mov	r0, r5
		wl_anon = 0U;
   14e36:	701d      	strb	r5, [r3, #0]
		return 0;
   14e38:	e7ef      	b.n	14e1a <ll_wl_remove+0xe>
	if (!filter->enable_bitmask) {
   14e3a:	4c17      	ldr	r4, [pc, #92]	; (14e98 <ll_wl_remove+0x8c>)
   14e3c:	7823      	ldrb	r3, [r4, #0]
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   14e3e:	3701      	adds	r7, #1
	if (!filter->enable_bitmask) {
   14e40:	b913      	cbnz	r3, 14e48 <ll_wl_remove+0x3c>
		return BT_HCI_ERR_INVALID_PARAM;
   14e42:	2512      	movs	r5, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   14e44:	b2e8      	uxtb	r0, r5
   14e46:	e7e8      	b.n	14e1a <ll_wl_remove+0xe>
	index = 8;
   14e48:	2608      	movs	r6, #8
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   14e4a:	f104 0902 	add.w	r9, r4, #2
   14e4e:	f04f 0a06 	mov.w	sl, #6
	while (index--) {
   14e52:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   14e56:	d3f4      	bcc.n	14e42 <ll_wl_remove+0x36>
		if ((filter->enable_bitmask & BIT(index)) &&
   14e58:	7823      	ldrb	r3, [r4, #0]
   14e5a:	40f3      	lsrs	r3, r6
   14e5c:	07da      	lsls	r2, r3, #31
   14e5e:	d5f8      	bpl.n	14e52 <ll_wl_remove+0x46>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   14e60:	7863      	ldrb	r3, [r4, #1]
   14e62:	4133      	asrs	r3, r6
   14e64:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   14e68:	07db      	lsls	r3, r3, #31
   14e6a:	d4f2      	bmi.n	14e52 <ll_wl_remove+0x46>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   14e6c:	2206      	movs	r2, #6
   14e6e:	4639      	mov	r1, r7
   14e70:	fb0a 9006 	mla	r0, sl, r6, r9
   14e74:	f005 f908 	bl	1a088 <memcmp>
		     (addr_type & 0x01)) &&
   14e78:	2800      	cmp	r0, #0
   14e7a:	d1ea      	bne.n	14e52 <ll_wl_remove+0x46>
			filter->enable_bitmask &= ~BIT(index);
   14e7c:	2301      	movs	r3, #1
   14e7e:	40b3      	lsls	r3, r6
   14e80:	7822      	ldrb	r2, [r4, #0]
   14e82:	43db      	mvns	r3, r3
   14e84:	b2db      	uxtb	r3, r3
   14e86:	401a      	ands	r2, r3
   14e88:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   14e8a:	7862      	ldrb	r2, [r4, #1]
   14e8c:	4013      	ands	r3, r2
   14e8e:	7063      	strb	r3, [r4, #1]
			return 0;
   14e90:	e7d8      	b.n	14e44 <ll_wl_remove+0x38>
   14e92:	bf00      	nop
   14e94:	20002597 	.word	0x20002597
   14e98:	20002598 	.word	0x20002598

00014e9c <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0U;
   14e9c:	4a03      	ldr	r2, [pc, #12]	; (14eac <ll_filter_reset+0x10>)
   14e9e:	2300      	movs	r3, #0
   14ea0:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0U;
   14ea2:	4a03      	ldr	r2, [pc, #12]	; (14eb0 <ll_filter_reset+0x14>)
   14ea4:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0U;
   14ea6:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   14ea8:	4770      	bx	lr
   14eaa:	bf00      	nop
   14eac:	20002597 	.word	0x20002597
   14eb0:	20002598 	.word	0x20002598

00014eb4 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   14eb4:	4b05      	ldr	r3, [pc, #20]	; (14ecc <cntr_init+0x18>)
   14eb6:	2200      	movs	r2, #0
   14eb8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
   14ebc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14ec0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   14ec4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   14ec8:	4770      	bx	lr
   14eca:	bf00      	nop
   14ecc:	4000b000 	.word	0x4000b000

00014ed0 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   14ed0:	4a04      	ldr	r2, [pc, #16]	; (14ee4 <cntr_start+0x14>)
   14ed2:	7813      	ldrb	r3, [r2, #0]
   14ed4:	1c59      	adds	r1, r3, #1
   14ed6:	7011      	strb	r1, [r2, #0]
   14ed8:	2001      	movs	r0, #1
   14eda:	b913      	cbnz	r3, 14ee2 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14edc:	4a02      	ldr	r2, [pc, #8]	; (14ee8 <cntr_start+0x18>)
   14ede:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   14ee0:	4618      	mov	r0, r3
}
   14ee2:	4770      	bx	lr
   14ee4:	200025ca 	.word	0x200025ca
   14ee8:	4000b000 	.word	0x4000b000

00014eec <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
   14eec:	4b09      	ldr	r3, [pc, #36]	; (14f14 <cntr_stop+0x28>)
   14eee:	7818      	ldrb	r0, [r3, #0]
   14ef0:	b928      	cbnz	r0, 14efe <cntr_stop+0x12>
   14ef2:	4040      	eors	r0, r0
   14ef4:	f380 8811 	msr	BASEPRI, r0
   14ef8:	f04f 0004 	mov.w	r0, #4
   14efc:	df02      	svc	2

	if (--_refcount) {
   14efe:	3801      	subs	r0, #1
   14f00:	b2c0      	uxtb	r0, r0
   14f02:	7018      	strb	r0, [r3, #0]
   14f04:	2301      	movs	r3, #1
   14f06:	b910      	cbnz	r0, 14f0e <cntr_stop+0x22>
   14f08:	4a03      	ldr	r2, [pc, #12]	; (14f18 <cntr_stop+0x2c>)
   14f0a:	6013      	str	r3, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
   14f0c:	4770      	bx	lr
		return 1;
   14f0e:	4618      	mov	r0, r3
}
   14f10:	4770      	bx	lr
   14f12:	bf00      	nop
   14f14:	200025ca 	.word	0x200025ca
   14f18:	4000b004 	.word	0x4000b004

00014f1c <cntr_cnt_get>:
     return p_reg->COUNTER;
   14f1c:	4b01      	ldr	r3, [pc, #4]	; (14f24 <cntr_cnt_get+0x8>)
   14f1e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   14f22:	4770      	bx	lr
   14f24:	4000b000 	.word	0x4000b000

00014f28 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   14f28:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   14f2c:	4b01      	ldr	r3, [pc, #4]	; (14f34 <cntr_cmp_set+0xc>)
   14f2e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   14f32:	4770      	bx	lr
   14f34:	4000b000 	.word	0x4000b000

00014f38 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   14f38:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   14f3a:	4b13      	ldr	r3, [pc, #76]	; (14f88 <do_ecb+0x50>)

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14f3c:	4c13      	ldr	r4, [pc, #76]	; (14f8c <do_ecb+0x54>)
   14f3e:	2501      	movs	r5, #1
{
   14f40:	4684      	mov	ip, r0
   14f42:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   14f44:	2700      	movs	r7, #0
   14f46:	46a6      	mov	lr, r4
   14f48:	461a      	mov	r2, r3
   14f4a:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   14f4c:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   14f50:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   14f54:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   14f58:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   14f5a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   14f5e:	b931      	cbnz	r1, 14f6e <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   14f60:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   14f64:	b919      	cbnz	r1, 14f6e <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   14f66:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   14f6a:	2900      	cmp	r1, #0
   14f6c:	d1f5      	bne.n	14f5a <do_ecb+0x22>
   14f6e:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   14f72:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   14f76:	2900      	cmp	r1, #0
   14f78:	d1e7      	bne.n	14f4a <do_ecb+0x12>
   14f7a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   14f7e:	2800      	cmp	r0, #0
   14f80:	d0e3      	beq.n	14f4a <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   14f82:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   14f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f88:	4000e000 	.word	0x4000e000
   14f8c:	4000e004 	.word	0x4000e004

00014f90 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   14f90:	2800      	cmp	r0, #0
    NRF_PPI->CHENSET = mask;
}

__STATIC_INLINE void nrf_ppi_channels_disable(uint32_t mask)
{
    NRF_PPI->CHENCLR = mask;
   14f92:	4b08      	ldr	r3, [pc, #32]	; (14fb4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   14f94:	bf14      	ite	ne
   14f96:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   14f9a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   14f9e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   14fa2:	bf14      	ite	ne
   14fa4:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   14fa8:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    NRF_PPI->CHENSET = mask;
   14fac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   14fb0:	4770      	bx	lr
   14fb2:	bf00      	nop
   14fb4:	4001f000 	.word	0x4001f000

00014fb8 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   14fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   14fba:	4e2d      	ldr	r6, [pc, #180]	; (15070 <sw_switch.isra.10+0xb8>)

__STATIC_INLINE void nrf_ppi_channel_endpoint_setup(nrf_ppi_channel_t channel,
                                                    uint32_t          eep,
                                                    uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   14fbc:	4f2d      	ldr	r7, [pc, #180]	; (15074 <sw_switch.isra.10+0xbc>)
   14fbe:	7833      	ldrb	r3, [r6, #0]
   14fc0:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 15080 <sw_switch.isra.10+0xc8>
   14fc4:	f8c7 c560 	str.w	ip, [r7, #1376]	; 0x560
   14fc8:	b25d      	sxtb	r5, r3
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	nrf_ppi_channel_endpoint_setup(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle));
   14fca:	b21b      	sxth	r3, r3
   14fcc:	00dc      	lsls	r4, r3, #3
   14fce:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   14fd2:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   14fd6:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   14fda:	f105 040b 	add.w	r4, r5, #11
   14fde:	b2e4      	uxtb	r4, r4
   14fe0:	00e4      	lsls	r4, r4, #3

	nrf_ppi_event_endpoint_setup(ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc));
   14fe2:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   14fe6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   14fea:	3fc0      	subs	r7, #192	; 0xc0
   14fec:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   14ff0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
}

__STATIC_INLINE void nrf_ppi_event_endpoint_setup(nrf_ppi_channel_t channel,
                                                  uint32_t          eep)
{
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   14ff4:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   14ff8:	2800      	cmp	r0, #0
   14ffa:	d034      	beq.n	15066 <sw_switch.isra.10+0xae>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_NS;
   14ffc:	f649 4740 	movw	r7, #40000	; 0x9c40
   15000:	f24a 005a 	movw	r0, #41050	; 0xa05a
   15004:	2a02      	cmp	r2, #2
   15006:	bf08      	it	eq
   15008:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1500a:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1500e:	f241 574a 	movw	r7, #5450	; 0x154a
   15012:	2902      	cmp	r1, #2
   15014:	bf14      	ite	ne
   15016:	4611      	movne	r1, r2
   15018:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1501a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   1501e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15022:	4401      	add	r1, r0
   15024:	fbb1 f1f2 	udiv	r1, r1, r2
}

__STATIC_INLINE void nrf_ppi_task_endpoint_setup(nrf_ppi_channel_t channel,
                                                 uint32_t          tep)
{
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   15028:	4a13      	ldr	r2, [pc, #76]	; (15078 <sw_switch.isra.10+0xc0>)
   1502a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1502e:	009b      	lsls	r3, r3, #2
   15030:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15034:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   15038:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1503c:	428a      	cmp	r2, r1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
				   SW_SWITCH_TIMER->CC[cc] - delay);
   1503e:	bf8b      	itete	hi
   15040:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

__STATIC_INLINE void nrf_timer_cc_write(NRF_TIMER_Type * p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   15044:	2201      	movls	r2, #1
		nrf_timer_cc_write(SW_SWITCH_TIMER, cc,
   15046:	1a51      	subhi	r1, r2, r1
   15048:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   1504c:	bf88      	it	hi
   1504e:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    NRF_PPI->CHENSET = mask;
   15052:	4b08      	ldr	r3, [pc, #32]	; (15074 <sw_switch.isra.10+0xbc>)
   15054:	f44f 6290 	mov.w	r2, #1152	; 0x480
   15058:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   1505c:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1505e:	f003 0301 	and.w	r3, r3, #1
   15062:	7033      	strb	r3, [r6, #0]
}
   15064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   15066:	4a05      	ldr	r2, [pc, #20]	; (1507c <sw_switch.isra.10+0xc4>)
   15068:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1506c:	212d      	movs	r1, #45	; 0x2d
   1506e:	e7de      	b.n	1502e <sw_switch.isra.10+0x76>
   15070:	200025cb 	.word	0x200025cb
   15074:	4001f000 	.word	0x4001f000
   15078:	40001000 	.word	0x40001000
   1507c:	40001004 	.word	0x40001004
   15080:	4000110c 	.word	0x4000110c

00015084 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   15084:	4b04      	ldr	r3, [pc, #16]	; (15098 <isr_radio+0x14>)
   15086:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1508a:	b123      	cbz	r3, 15096 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1508c:	4b03      	ldr	r3, [pc, #12]	; (1509c <isr_radio+0x18>)
   1508e:	4a04      	ldr	r2, [pc, #16]	; (150a0 <isr_radio+0x1c>)
   15090:	681b      	ldr	r3, [r3, #0]
   15092:	6810      	ldr	r0, [r2, #0]
   15094:	4718      	bx	r3
}
   15096:	4770      	bx	lr
   15098:	40001000 	.word	0x40001000
   1509c:	20001dd4 	.word	0x20001dd4
   150a0:	20001dd8 	.word	0x20001dd8

000150a4 <radio_isr_set>:
{
   150a4:	b538      	push	{r3, r4, r5, lr}
   150a6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   150a8:	2001      	movs	r0, #1
{
   150aa:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   150ac:	f7f3 f94c 	bl	8348 <z_arch_irq_disable>
	isr_cb_param = param;
   150b0:	4b08      	ldr	r3, [pc, #32]	; (150d4 <radio_isr_set+0x30>)
   150b2:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   150b4:	4b08      	ldr	r3, [pc, #32]	; (150d8 <radio_isr_set+0x34>)
   150b6:	601c      	str	r4, [r3, #0]
    return NRF_RADIO->SHORTS;
}

__STATIC_INLINE void nrf_radio_int_enable(uint32_t radio_int_mask)
{
    NRF_RADIO->INTENSET = radio_int_mask;
   150b8:	4b08      	ldr	r3, [pc, #32]	; (150dc <radio_isr_set+0x38>)
   150ba:	2210      	movs	r2, #16
   150bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   150c0:	4b07      	ldr	r3, [pc, #28]	; (150e0 <radio_isr_set+0x3c>)
   150c2:	2202      	movs	r2, #2
   150c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   150c8:	2001      	movs	r0, #1
}
   150ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   150ce:	f7f3 b92b 	b.w	8328 <z_arch_irq_enable>
   150d2:	bf00      	nop
   150d4:	20001dd8 	.word	0x20001dd8
   150d8:	20001dd4 	.word	0x20001dd4
   150dc:	40001000 	.word	0x40001000
   150e0:	e000e100 	.word	0xe000e100

000150e4 <radio_reset>:
{
   150e4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   150e6:	2001      	movs	r0, #1
   150e8:	f7f3 f92e 	bl	8348 <z_arch_irq_disable>
}
#endif

__STATIC_INLINE void nrf_radio_power_set(bool radio_power)
{
    NRF_RADIO->POWER = (uint32_t) radio_power;
   150ec:	4b08      	ldr	r3, [pc, #32]	; (15110 <radio_reset+0x2c>)
   150ee:	2200      	movs	r2, #0
   150f0:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   150f4:	2201      	movs	r2, #1
   150f6:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   150fa:	4a06      	ldr	r2, [pc, #24]	; (15114 <radio_reset+0x30>)
   150fc:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   150fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   15102:	f023 0301 	bic.w	r3, r3, #1
   15106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1510a:	6013      	str	r3, [r2, #0]
}
   1510c:	bd08      	pop	{r3, pc}
   1510e:	bf00      	nop
   15110:	40001000 	.word	0x40001000
   15114:	40001774 	.word	0x40001774

00015118 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   15118:	4b06      	ldr	r3, [pc, #24]	; (15134 <radio_phy_set+0x1c>)
	switch (phy) {
   1511a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1511c:	bf14      	ite	ne
   1511e:	2203      	movne	r2, #3
   15120:	2204      	moveq	r2, #4
   15122:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   15126:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1512a:	f042 0201 	orr.w	r2, r2, #1
   1512e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   15132:	4770      	bx	lr
   15134:	40001000 	.word	0x40001000

00015138 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   15138:	4b01      	ldr	r3, [pc, #4]	; (15140 <radio_tx_power_set+0x8>)
   1513a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1513e:	4770      	bx	lr
   15140:	40001000 	.word	0x40001000

00015144 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   15144:	4b01      	ldr	r3, [pc, #4]	; (1514c <radio_freq_chan_set+0x8>)
   15146:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1514a:	4770      	bx	lr
   1514c:	40001000 	.word	0x40001000

00015150 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   15150:	4b07      	ldr	r3, [pc, #28]	; (15170 <radio_whiten_iv_set+0x20>)
   15152:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   15156:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1515a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1515e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   15162:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   15166:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1516a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1516e:	4770      	bx	lr
   15170:	40001000 	.word	0x40001000

00015174 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   15174:	4a0a      	ldr	r2, [pc, #40]	; (151a0 <radio_aa_set+0x2c>)
   15176:	2300      	movs	r3, #0
   15178:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1517c:	2301      	movs	r3, #1
   1517e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   15182:	78c3      	ldrb	r3, [r0, #3]
   15184:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   15188:	7843      	ldrb	r3, [r0, #1]
   1518a:	7881      	ldrb	r1, [r0, #2]
   1518c:	041b      	lsls	r3, r3, #16
   1518e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   15192:	7801      	ldrb	r1, [r0, #0]
   15194:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   15198:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1519c:	4770      	bx	lr
   1519e:	bf00      	nop
   151a0:	40001000 	.word	0x40001000

000151a4 <radio_pkt_configure>:
	switch (phy) {
   151a4:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   151a8:	2b02      	cmp	r3, #2
{
   151aa:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   151ac:	bf14      	ite	ne
   151ae:	2400      	movne	r4, #0
   151b0:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   151b4:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   151b6:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   151ba:	bf48      	it	mi
   151bc:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   151c0:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   151c2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   151c6:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   151c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   151cc:	4a09      	ldr	r2, [pc, #36]	; (151f4 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   151ce:	4303      	orrs	r3, r0
   151d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   151d4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   151d8:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   151dc:	4b06      	ldr	r3, [pc, #24]	; (151f8 <radio_pkt_configure+0x54>)
   151de:	4003      	ands	r3, r0
   151e0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   151e4:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   151e8:	4319      	orrs	r1, r3
   151ea:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   151ee:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   151f2:	bd10      	pop	{r4, pc}
   151f4:	40001000 	.word	0x40001000
   151f8:	fef80000 	.word	0xfef80000

000151fc <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   151fc:	4b01      	ldr	r3, [pc, #4]	; (15204 <radio_pkt_rx_set+0x8>)
   151fe:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   15202:	4770      	bx	lr
   15204:	40001000 	.word	0x40001000

00015208 <radio_pkt_tx_set>:
   15208:	4b01      	ldr	r3, [pc, #4]	; (15210 <radio_pkt_tx_set+0x8>)
   1520a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1520e:	4770      	bx	lr
   15210:	40001000 	.word	0x40001000

00015214 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)NRF_RADIO + radio_task)) = 0x1UL;
   15214:	4b01      	ldr	r3, [pc, #4]	; (1521c <radio_rx_enable+0x8>)
   15216:	2201      	movs	r2, #1
   15218:	601a      	str	r2, [r3, #0]
}
   1521a:	4770      	bx	lr
   1521c:	40001004 	.word	0x40001004

00015220 <radio_tx_enable>:
   15220:	4b01      	ldr	r3, [pc, #4]	; (15228 <radio_tx_enable+0x8>)
   15222:	2201      	movs	r2, #1
   15224:	601a      	str	r2, [r3, #0]
}
   15226:	4770      	bx	lr
   15228:	40001000 	.word	0x40001000

0001522c <radio_disable>:
    NRF_PPI->CHENCLR = mask;
   1522c:	4a07      	ldr	r2, [pc, #28]	; (1524c <radio_disable+0x20>)
   1522e:	f44f 6390 	mov.w	r3, #1152	; 0x480
   15232:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    NRF_PPI->TASKS_CHG[(uint32_t) group].EN = NRF_PPI_TASK_SET;
}

__STATIC_INLINE void nrf_ppi_group_disable(nrf_ppi_channel_group_t group)
{
    NRF_PPI->TASKS_CHG[(uint32_t) group].DIS = NRF_PPI_TASK_SET;
   15236:	2301      	movs	r3, #1
   15238:	6053      	str	r3, [r2, #4]
   1523a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1523c:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   15240:	2100      	movs	r1, #0
   15242:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   15246:	6113      	str	r3, [r2, #16]
}
   15248:	4770      	bx	lr
   1524a:	bf00      	nop
   1524c:	4001f000 	.word	0x4001f000

00015250 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   15250:	4b04      	ldr	r3, [pc, #16]	; (15264 <radio_status_reset+0x14>)
   15252:	2200      	movs	r2, #0
   15254:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   15258:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1525c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   15260:	4770      	bx	lr
   15262:	bf00      	nop
   15264:	40001000 	.word	0x40001000

00015268 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   15268:	4b03      	ldr	r3, [pc, #12]	; (15278 <radio_is_ready+0x10>)
   1526a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1526e:	3000      	adds	r0, #0
   15270:	bf18      	it	ne
   15272:	2001      	movne	r0, #1
   15274:	4770      	bx	lr
   15276:	bf00      	nop
   15278:	40001000 	.word	0x40001000

0001527c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1527c:	4b03      	ldr	r3, [pc, #12]	; (1528c <radio_is_done+0x10>)
   1527e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   15282:	3000      	adds	r0, #0
   15284:	bf18      	it	ne
   15286:	2001      	movne	r0, #1
   15288:	4770      	bx	lr
   1528a:	bf00      	nop
   1528c:	40001000 	.word	0x40001000

00015290 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   15290:	4b03      	ldr	r3, [pc, #12]	; (152a0 <radio_is_idle+0x10>)
   15292:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   15296:	fab0 f080 	clz	r0, r0
   1529a:	0940      	lsrs	r0, r0, #5
   1529c:	4770      	bx	lr
   1529e:	bf00      	nop
   152a0:	40001000 	.word	0x40001000

000152a4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   152a4:	4b04      	ldr	r3, [pc, #16]	; (152b8 <radio_crc_configure+0x14>)
   152a6:	f240 1203 	movw	r2, #259	; 0x103
   152aa:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   152ae:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   152b2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   152b6:	4770      	bx	lr
   152b8:	40001000 	.word	0x40001000

000152bc <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   152bc:	4b03      	ldr	r3, [pc, #12]	; (152cc <radio_crc_is_valid+0x10>)
   152be:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   152c2:	3000      	adds	r0, #0
   152c4:	bf18      	it	ne
   152c6:	2001      	movne	r0, #1
   152c8:	4770      	bx	lr
   152ca:	bf00      	nop
   152cc:	40001000 	.word	0x40001000

000152d0 <radio_pkt_empty_get>:
}
   152d0:	4800      	ldr	r0, [pc, #0]	; (152d4 <radio_pkt_empty_get+0x4>)
   152d2:	4770      	bx	lr
   152d4:	20001ccc 	.word	0x20001ccc

000152d8 <radio_pkt_scratch_get>:
}
   152d8:	4800      	ldr	r0, [pc, #0]	; (152dc <radio_pkt_scratch_get+0x4>)
   152da:	4770      	bx	lr
   152dc:	20001cd0 	.word	0x20001cd0

000152e0 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   152e0:	4b04      	ldr	r3, [pc, #16]	; (152f4 <radio_switch_complete_and_rx+0x14>)
   152e2:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   152e4:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   152e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   152ea:	4602      	mov	r2, r0
   152ec:	4608      	mov	r0, r1
   152ee:	f7ff be63 	b.w	14fb8 <sw_switch.isra.10>
   152f2:	bf00      	nop
   152f4:	40001000 	.word	0x40001000

000152f8 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   152f8:	4b03      	ldr	r3, [pc, #12]	; (15308 <radio_switch_complete_and_tx+0x10>)
   152fa:	2103      	movs	r1, #3
   152fc:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   15300:	4601      	mov	r1, r0
   15302:	2001      	movs	r0, #1
   15304:	f7ff be58 	b.w	14fb8 <sw_switch.isra.10>
   15308:	40001000 	.word	0x40001000

0001530c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1530c:	4b05      	ldr	r3, [pc, #20]	; (15324 <radio_switch_complete_and_disable+0x18>)
   1530e:	2203      	movs	r2, #3
   15310:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_PPI->CHENCLR = mask;
   15314:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   15318:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1531c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_ppi_channels_disable(BIT(HAL_SW_SWITCH_TIMER_CLEAR_PPI) |
				 BIT(HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI));
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   15320:	4770      	bx	lr
   15322:	bf00      	nop
   15324:	40001000 	.word	0x40001000

00015328 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   15328:	4a03      	ldr	r2, [pc, #12]	; (15338 <radio_rssi_measure+0x10>)
   1532a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1532e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   15332:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   15336:	4770      	bx	lr
   15338:	40001000 	.word	0x40001000

0001533c <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1533c:	4b01      	ldr	r3, [pc, #4]	; (15344 <radio_rssi_get+0x8>)
   1533e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   15342:	4770      	bx	lr
   15344:	40001000 	.word	0x40001000

00015348 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   15348:	4b02      	ldr	r3, [pc, #8]	; (15354 <radio_rssi_status_reset+0xc>)
   1534a:	2200      	movs	r2, #0
   1534c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   15350:	4770      	bx	lr
   15352:	bf00      	nop
   15354:	40001000 	.word	0x40001000

00015358 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   15358:	4b03      	ldr	r3, [pc, #12]	; (15368 <radio_rssi_is_ready+0x10>)
   1535a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1535e:	3000      	adds	r0, #0
   15360:	bf18      	it	ne
   15362:	2001      	movne	r0, #1
   15364:	4770      	bx	lr
   15366:	bf00      	nop
   15368:	40001000 	.word	0x40001000

0001536c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   1536c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1536e:	2400      	movs	r4, #0
   15370:	2706      	movs	r7, #6
   15372:	00a3      	lsls	r3, r4, #2
   15374:	fb07 2504 	mla	r5, r7, r4, r2
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   15378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1537c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   15380:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   15382:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   15386:	3401      	adds	r4, #1
   15388:	88ad      	ldrh	r5, [r5, #4]
   1538a:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1538e:	2c08      	cmp	r4, #8
   15390:	d1ef      	bne.n	15372 <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   15392:	4b03      	ldr	r3, [pc, #12]	; (153a0 <radio_filter_configure+0x34>)
   15394:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   15398:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1539c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1539e:	bf00      	nop
   153a0:	40001000 	.word	0x40001000

000153a4 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   153a4:	4a03      	ldr	r2, [pc, #12]	; (153b4 <radio_filter_disable+0x10>)
   153a6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   153aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   153ae:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   153b2:	4770      	bx	lr
   153b4:	40001000 	.word	0x40001000

000153b8 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   153b8:	4b02      	ldr	r3, [pc, #8]	; (153c4 <radio_filter_status_reset+0xc>)
   153ba:	2200      	movs	r2, #0
   153bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   153c0:	4770      	bx	lr
   153c2:	bf00      	nop
   153c4:	40001000 	.word	0x40001000

000153c8 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   153c8:	4b03      	ldr	r3, [pc, #12]	; (153d8 <radio_filter_has_match+0x10>)
   153ca:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   153ce:	3000      	adds	r0, #0
   153d0:	bf18      	it	ne
   153d2:	2001      	movne	r0, #1
   153d4:	4770      	bx	lr
   153d6:	bf00      	nop
   153d8:	40001000 	.word	0x40001000

000153dc <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   153dc:	4b01      	ldr	r3, [pc, #4]	; (153e4 <radio_filter_match_get+0x8>)
   153de:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   153e2:	4770      	bx	lr
   153e4:	40001000 	.word	0x40001000

000153e8 <radio_tmr_status_reset>:
{
    p_reg->EVTENSET = mask;
}
__STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   153e8:	4b05      	ldr	r3, [pc, #20]	; (15400 <radio_tmr_status_reset+0x18>)
   153ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   153ee:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   153f2:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   153f6:	4a03      	ldr	r2, [pc, #12]	; (15404 <radio_tmr_status_reset+0x1c>)
   153f8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   153fc:	4770      	bx	lr
   153fe:	bf00      	nop
   15400:	4000b000 	.word	0x4000b000
   15404:	0e700060 	.word	0x0e700060

00015408 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_write(SW_SWITCH_TIMER,
   15408:	4b03      	ldr	r3, [pc, #12]	; (15418 <radio_tmr_tifs_set+0x10>)
   1540a:	4a04      	ldr	r2, [pc, #16]	; (1541c <radio_tmr_tifs_set+0x14>)
   1540c:	781b      	ldrb	r3, [r3, #0]
   1540e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   15412:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			   SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   15416:	4770      	bx	lr
   15418:	200025cb 	.word	0x200025cb
   1541c:	40009000 	.word	0x40009000

00015420 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   15420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   15422:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   15426:	4c33      	ldr	r4, [pc, #204]	; (154f4 <radio_tmr_start+0xd4>)
   15428:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1542c:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1542e:	bf88      	it	hi
   15430:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15434:	4b30      	ldr	r3, [pc, #192]	; (154f8 <radio_tmr_start+0xd8>)
	}
	remainder /= 1000000UL;
   15436:	4c31      	ldr	r4, [pc, #196]	; (154fc <radio_tmr_start+0xdc>)
		remainder += 30517578UL;
   15438:	bf84      	itt	hi
   1543a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1543e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   15442:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   15446:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1544a:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   1544e:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   15452:	f04f 0202 	mov.w	r2, #2
   15456:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   15458:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1545c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   15460:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   15464:	4a26      	ldr	r2, [pc, #152]	; (15500 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   15466:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   1546a:	bf88      	it	hi
   1546c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   15470:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   15474:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   15478:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   1547c:	4921      	ldr	r1, [pc, #132]	; (15504 <radio_tmr_start+0xe4>)
   1547e:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   15482:	3b0c      	subs	r3, #12
   15484:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   15488:	f8c1 353c 	str.w	r3, [r1, #1340]	; 0x53c
    NRF_PPI->CHENSET = mask;
   1548c:	2320      	movs	r3, #32
   1548e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   15492:	f7ff fd7d 	bl	14f90 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   15496:	4b1c      	ldr	r3, [pc, #112]	; (15508 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15498:	4a1c      	ldr	r2, [pc, #112]	; (1550c <radio_tmr_start+0xec>)
   1549a:	6015      	str	r5, [r2, #0]
   1549c:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   154a0:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   154a4:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   154a8:	601d      	str	r5, [r3, #0]
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   154aa:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   154ae:	3b74      	subs	r3, #116	; 0x74
   154b0:	f8c1 3548 	str.w	r3, [r1, #1352]	; 0x548
   154b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   154b8:	3334      	adds	r3, #52	; 0x34
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   154ba:	f8c1 254c 	str.w	r2, [r1, #1356]	; 0x54c
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   154be:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   154c2:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   154c6:	33c4      	adds	r3, #196	; 0xc4
   154c8:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   154cc:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   154d0:	3bc0      	subs	r3, #192	; 0xc0
   154d2:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   154d6:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   154da:	33c8      	adds	r3, #200	; 0xc8
   154dc:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
			SW_SWITCH_TIMER_EVTS_COMP(1)),
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1));

#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   154e0:	f44f 6310 	mov.w	r3, #2304	; 0x900
   154e4:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   154e8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   154ec:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   154f0:	4620      	mov	r0, r4
   154f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154f4:	7ff0bdbf 	.word	0x7ff0bdbf
   154f8:	4000800c 	.word	0x4000800c
   154fc:	000f4240 	.word	0x000f4240
   15500:	4000b000 	.word	0x4000b000
   15504:	4001f000 	.word	0x4001f000
   15508:	40009000 	.word	0x40009000
   1550c:	4000900c 	.word	0x4000900c

00015510 <radio_tmr_stop>:
   15510:	4a04      	ldr	r2, [pc, #16]	; (15524 <radio_tmr_stop+0x14>)
   15512:	2301      	movs	r3, #1
   15514:	6013      	str	r3, [r2, #0]
   15516:	60d3      	str	r3, [r2, #12]
   15518:	320c      	adds	r2, #12
   1551a:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1551e:	6013      	str	r3, [r2, #0]
   15520:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   15522:	4770      	bx	lr
   15524:	40008004 	.word	0x40008004

00015528 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   15528:	4b04      	ldr	r3, [pc, #16]	; (1553c <radio_tmr_hcto_configure+0x14>)
   1552a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   1552e:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   15532:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   15536:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
				BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1553a:	4770      	bx	lr
   1553c:	40008000 	.word	0x40008000

00015540 <radio_tmr_aa_capture>:
    NRF_PPI->CH[(uint32_t) channel].EEP = eep;
   15540:	4b06      	ldr	r3, [pc, #24]	; (1555c <radio_tmr_aa_capture+0x1c>)
   15542:	4a07      	ldr	r2, [pc, #28]	; (15560 <radio_tmr_aa_capture+0x20>)
   15544:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_PPI->CH[(uint32_t) channel].TEP = tep;
   15548:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1554c:	3240      	adds	r2, #64	; 0x40
   1554e:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = mask;
   15552:	4a04      	ldr	r2, [pc, #16]	; (15564 <radio_tmr_aa_capture+0x24>)
   15554:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
{
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
				BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   15558:	4770      	bx	lr
   1555a:	bf00      	nop
   1555c:	4001f000 	.word	0x4001f000
   15560:	40001100 	.word	0x40001100
   15564:	04000040 	.word	0x04000040

00015568 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   15568:	4b01      	ldr	r3, [pc, #4]	; (15570 <radio_tmr_aa_get+0x8>)
   1556a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1556e:	4770      	bx	lr
   15570:	40008000 	.word	0x40008000

00015574 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   15574:	4b01      	ldr	r3, [pc, #4]	; (1557c <radio_tmr_aa_save+0x8>)
   15576:	6018      	str	r0, [r3, #0]
}
   15578:	4770      	bx	lr
   1557a:	bf00      	nop
   1557c:	20001ddc 	.word	0x20001ddc

00015580 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   15580:	4b01      	ldr	r3, [pc, #4]	; (15588 <radio_tmr_aa_restore+0x8>)
   15582:	6818      	ldr	r0, [r3, #0]
   15584:	4770      	bx	lr
   15586:	bf00      	nop
   15588:	20001ddc 	.word	0x20001ddc

0001558c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1558c:	4b01      	ldr	r3, [pc, #4]	; (15594 <radio_tmr_ready_get+0x8>)
   1558e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   15592:	4770      	bx	lr
   15594:	40008000 	.word	0x40008000

00015598 <radio_tmr_end_capture>:
   15598:	4b02      	ldr	r3, [pc, #8]	; (155a4 <radio_tmr_end_capture+0xc>)
   1559a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1559e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   155a2:	4770      	bx	lr
   155a4:	4001f000 	.word	0x4001f000

000155a8 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   155a8:	4b01      	ldr	r3, [pc, #4]	; (155b0 <radio_tmr_end_get+0x8>)
   155aa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   155ae:	4770      	bx	lr
   155b0:	40008000 	.word	0x40008000

000155b4 <radio_tmr_tifs_base_get>:
   155b4:	4b01      	ldr	r3, [pc, #4]	; (155bc <radio_tmr_tifs_base_get+0x8>)
   155b6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   155ba:	4770      	bx	lr
   155bc:	40008000 	.word	0x40008000

000155c0 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   155c0:	4b13      	ldr	r3, [pc, #76]	; (15610 <radio_ccm_rx_pkt_set+0x50>)
{
   155c2:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   155c4:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   155c6:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   155c8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   155cc:	4e11      	ldr	r6, [pc, #68]	; (15614 <radio_ccm_rx_pkt_set+0x54>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   155ce:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   155d2:	4d11      	ldr	r5, [pc, #68]	; (15618 <radio_ccm_rx_pkt_set+0x58>)
   155d4:	2902      	cmp	r1, #2
   155d6:	bf14      	ite	ne
   155d8:	4629      	movne	r1, r5
   155da:	4631      	moveq	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   155dc:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   155e0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   155e4:	480d      	ldr	r0, [pc, #52]	; (1561c <radio_ccm_rx_pkt_set+0x5c>)
   155e6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   155ea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   155ee:	4a0c      	ldr	r2, [pc, #48]	; (15620 <radio_ccm_rx_pkt_set+0x60>)
   155f0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   155f4:	4a0b      	ldr	r2, [pc, #44]	; (15624 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->SHORTS = 0;
   155f6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
   155fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   155fe:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   15602:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   15606:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                          nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1560a:	2201      	movs	r2, #1
   1560c:	601a      	str	r2, [r3, #0]
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1560e:	bd70      	pop	{r4, r5, r6, pc}
   15610:	4000f000 	.word	0x4000f000
   15614:	01010001 	.word	0x01010001
   15618:	01000001 	.word	0x01000001
   1561c:	20001cd0 	.word	0x20001cd0
   15620:	20001bc0 	.word	0x20001bc0
   15624:	4001f000 	.word	0x4001f000

00015628 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   15628:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1562a:	4b0e      	ldr	r3, [pc, #56]	; (15664 <radio_ccm_tx_pkt_set+0x3c>)
   1562c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1562e:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   15630:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   15634:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   15638:	4c0b      	ldr	r4, [pc, #44]	; (15668 <radio_ccm_tx_pkt_set+0x40>)
   1563a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1563e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   15642:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   15646:	4809      	ldr	r0, [pc, #36]	; (1566c <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   15648:	4909      	ldr	r1, [pc, #36]	; (15670 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1564a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1564e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   15652:	2101      	movs	r1, #1
   15654:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   15658:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1565c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   15660:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   15662:	bd10      	pop	{r4, pc}
   15664:	4000f000 	.word	0x4000f000
   15668:	01010000 	.word	0x01010000
   1566c:	20001cd0 	.word	0x20001cd0
   15670:	20001bc0 	.word	0x20001bc0

00015674 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

__STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15674:	4b0c      	ldr	r3, [pc, #48]	; (156a8 <radio_ccm_is_done+0x34>)
   15676:	2202      	movs	r2, #2
   15678:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1567c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   15680:	b16a      	cbz	r2, 1569e <radio_ccm_is_done+0x2a>
}

__STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   15682:	2202      	movs	r2, #2
   15684:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   15688:	4a08      	ldr	r2, [pc, #32]	; (156ac <radio_ccm_is_done+0x38>)
   1568a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1568e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		__WFE();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   15692:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   15696:	fab0 f080 	clz	r0, r0
   1569a:	0940      	lsrs	r0, r0, #5
   1569c:	4770      	bx	lr
		__WFE();
   1569e:	bf20      	wfe
		__SEV();
   156a0:	bf40      	sev
		__WFE();
   156a2:	bf20      	wfe
   156a4:	e7ea      	b.n	1567c <radio_ccm_is_done+0x8>
   156a6:	bf00      	nop
   156a8:	4000f000 	.word	0x4000f000
   156ac:	e000e100 	.word	0xe000e100

000156b0 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   156b0:	4b03      	ldr	r3, [pc, #12]	; (156c0 <radio_ccm_mic_is_valid+0x10>)
   156b2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   156b6:	3000      	adds	r0, #0
   156b8:	bf18      	it	ne
   156ba:	2001      	movne	r0, #1
   156bc:	4770      	bx	lr
   156be:	bf00      	nop
   156c0:	4000f000 	.word	0x4000f000

000156c4 <radio_ar_match_get>:
	nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   156c4:	4b01      	ldr	r3, [pc, #4]	; (156cc <radio_ar_match_get+0x8>)
   156c6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   156ca:	4770      	bx	lr
   156cc:	4000f000 	.word	0x4000f000

000156d0 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   156d0:	4a04      	ldr	r2, [pc, #16]	; (156e4 <radio_ar_status_reset+0x14>)
   156d2:	2300      	movs	r3, #0
   156d4:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   156d8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   156dc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   156e0:	4770      	bx	lr
   156e2:	bf00      	nop
   156e4:	40001000 	.word	0x40001000

000156e8 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   156e8:	4b08      	ldr	r3, [pc, #32]	; (1570c <radio_ar_has_match+0x24>)
   156ea:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   156ee:	b160      	cbz	r0, 1570a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   156f0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   156f4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   156f8:	b138      	cbz	r0, 1570a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   156fa:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   156fe:	b120      	cbz	r0, 1570a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   15700:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   15704:	fab0 f080 	clz	r0, r0
   15708:	0940      	lsrs	r0, r0, #5
}
   1570a:	4770      	bx	lr
   1570c:	40001000 	.word	0x40001000

00015710 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   15710:	4b08      	ldr	r3, [pc, #32]	; (15734 <mayfly_pend+0x24>)
   15712:	b139      	cbz	r1, 15724 <mayfly_pend+0x14>
   15714:	2901      	cmp	r1, #1
   15716:	d00a      	beq.n	1572e <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI5_IRQn);
		break;

	default:
		LL_ASSERT(0);
   15718:	4040      	eors	r0, r0
   1571a:	f380 8811 	msr	BASEPRI, r0
   1571e:	f04f 0004 	mov.w	r0, #4
   15722:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15724:	f44f 6200 	mov.w	r2, #2048	; 0x800
   15728:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   1572c:	4770      	bx	lr
   1572e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   15732:	e7f9      	b.n	15728 <mayfly_pend+0x18>
   15734:	e000e100 	.word	0xe000e100

00015738 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   15738:	2803      	cmp	r0, #3
   1573a:	d905      	bls.n	15748 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1573c:	4040      	eors	r0, r0
   1573e:	f380 8811 	msr	BASEPRI, r0
   15742:	f04f 0004 	mov.w	r0, #4
   15746:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   15748:	4b02      	ldr	r3, [pc, #8]	; (15754 <hal_ticker_instance0_caller_id_get+0x1c>)
   1574a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1574c:	2800      	cmp	r0, #0
   1574e:	d0f5      	beq.n	1573c <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
   15750:	4770      	bx	lr
   15752:	bf00      	nop
   15754:	00021d4e 	.word	0x00021d4e

00015758 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   15758:	3802      	subs	r0, #2
{
   1575a:	b410      	push	{r4}
   1575c:	461c      	mov	r4, r3
	switch (caller_id) {
   1575e:	2803      	cmp	r0, #3
   15760:	d816      	bhi.n	15790 <hal_ticker_instance0_sched+0x38>
   15762:	e8df f000 	tbb	[pc, r0]
   15766:	0b02      	.short	0x0b02
   15768:	2411      	.short	0x2411
		}
		break;
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   1576a:	2903      	cmp	r1, #3
   1576c:	d110      	bne.n	15790 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1576e:	4b13      	ldr	r3, [pc, #76]	; (157bc <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   15770:	2100      	movs	r1, #0
			m.param = instance;
   15772:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   15774:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   15776:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   15778:	f7fb bf0a 	b.w	11590 <mayfly_enqueue>
		switch (callee_id) {
   1577c:	2904      	cmp	r1, #4
   1577e:	d107      	bne.n	15790 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   15780:	4b0f      	ldr	r3, [pc, #60]	; (157c0 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   15782:	2101      	movs	r1, #1
			m.param = instance;
   15784:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   15786:	e7f5      	b.n	15774 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   15788:	2903      	cmp	r1, #3
   1578a:	d007      	beq.n	1579c <hal_ticker_instance0_sched+0x44>
   1578c:	2904      	cmp	r1, #4
   1578e:	d00a      	beq.n	157a6 <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
   15790:	4040      	eors	r0, r0
   15792:	f380 8811 	msr	BASEPRI, r0
   15796:	f04f 0004 	mov.w	r0, #4
   1579a:	df02      	svc	2
			m.param = instance;
   1579c:	4b09      	ldr	r3, [pc, #36]	; (157c4 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1579e:	2100      	movs	r1, #0
			m.param = instance;
   157a0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   157a2:	2001      	movs	r0, #1
   157a4:	e7e7      	b.n	15776 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   157a6:	4b08      	ldr	r3, [pc, #32]	; (157c8 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   157a8:	2101      	movs	r1, #1
			m.param = instance;
   157aa:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   157ac:	e7f9      	b.n	157a2 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   157ae:	2904      	cmp	r1, #4
   157b0:	d1ee      	bne.n	15790 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   157b2:	4b06      	ldr	r3, [pc, #24]	; (157cc <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   157b4:	2101      	movs	r1, #1
			m.param = instance;
   157b6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   157b8:	2003      	movs	r0, #3
   157ba:	e7dc      	b.n	15776 <hal_ticker_instance0_sched+0x1e>
   157bc:	20009158 	.word	0x20009158
   157c0:	20009168 	.word	0x20009168
   157c4:	20009178 	.word	0x20009178
   157c8:	20009188 	.word	0x20009188
   157cc:	20009198 	.word	0x20009198

000157d0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   157d0:	4b01      	ldr	r3, [pc, #4]	; (157d8 <net_buf_pool_get+0x8>)
   157d2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   157d6:	4770      	bx	lr
   157d8:	2000947c 	.word	0x2000947c

000157dc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   157dc:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   157de:	4b04      	ldr	r3, [pc, #16]	; (157f0 <net_buf_id+0x14>)
   157e0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   157e4:	69db      	ldr	r3, [r3, #28]
   157e6:	1ac0      	subs	r0, r0, r3
}
   157e8:	4b02      	ldr	r3, [pc, #8]	; (157f4 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   157ea:	10c0      	asrs	r0, r0, #3
}
   157ec:	4358      	muls	r0, r3
   157ee:	4770      	bx	lr
   157f0:	2000947c 	.word	0x2000947c
   157f4:	aaaaaaab 	.word	0xaaaaaaab

000157f8 <fixed_data_alloc>:
	.ref   = generic_data_ref,
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size, s32_t timeout)
{
   157f8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   157fa:	4b09      	ldr	r3, [pc, #36]	; (15820 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   157fc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   157fe:	eb03 1342 	add.w	r3, r3, r2, lsl #5

	*size = MIN(fixed->data_size, *size);
   15802:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15804:	699b      	ldr	r3, [r3, #24]
   15806:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   15808:	6823      	ldr	r3, [r4, #0]
   1580a:	429a      	cmp	r2, r3
   1580c:	bf94      	ite	ls
   1580e:	600a      	strls	r2, [r1, #0]
   15810:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   15812:	f7ff ffe3 	bl	157dc <net_buf_id>
   15816:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1581a:	fb02 3000 	mla	r0, r2, r0, r3
   1581e:	bd10      	pop	{r4, pc}
   15820:	2000947c 	.word	0x2000947c

00015824 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   15824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15828:	4605      	mov	r5, r0
   1582a:	9101      	str	r1, [sp, #4]
   1582c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1582e:	f00a f9ce 	bl	1fbce <z_impl_k_uptime_get_32>
   15832:	4607      	mov	r7, r0
	__asm__ volatile(
   15834:	f04f 0320 	mov.w	r3, #32
   15838:	f3ef 8811 	mrs	r8, BASEPRI
   1583c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   15840:	8a6b      	ldrh	r3, [r5, #18]
   15842:	2b00      	cmp	r3, #0
   15844:	d041      	beq.n	158ca <net_buf_alloc_len+0xa6>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   15846:	8a2a      	ldrh	r2, [r5, #16]
   15848:	429a      	cmp	r2, r3
   1584a:	d92c      	bls.n	158a6 <net_buf_alloc_len+0x82>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1584c:	2100      	movs	r1, #0
   1584e:	4628      	mov	r0, r5
   15850:	f009 ff7d 	bl	1f74e <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   15854:	4604      	mov	r4, r0
   15856:	b330      	cbz	r0, 158a6 <net_buf_alloc_len+0x82>
	__asm__ volatile(
   15858:	f388 8811 	msr	BASEPRI, r8
   1585c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   15860:	9b01      	ldr	r3, [sp, #4]
   15862:	2b00      	cmp	r3, #0
   15864:	d040      	beq.n	158e8 <net_buf_alloc_len+0xc4>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   15866:	1c73      	adds	r3, r6, #1
   15868:	2b01      	cmp	r3, #1
   1586a:	d906      	bls.n	1587a <net_buf_alloc_len+0x56>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1586c:	f00a f9af 	bl	1fbce <z_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   15870:	1bc0      	subs	r0, r0, r7

			timeout -= MIN(timeout, diff);
   15872:	42b0      	cmp	r0, r6
   15874:	bf94      	ite	ls
   15876:	1a36      	subls	r6, r6, r0
   15878:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1587a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1587c:	4f20      	ldr	r7, [pc, #128]	; (15900 <net_buf_alloc_len+0xdc>)
   1587e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   15882:	4632      	mov	r2, r6
   15884:	699b      	ldr	r3, [r3, #24]
   15886:	681b      	ldr	r3, [r3, #0]
   15888:	a901      	add	r1, sp, #4
   1588a:	681b      	ldr	r3, [r3, #0]
   1588c:	4620      	mov	r0, r4
   1588e:	4798      	blx	r3
   15890:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   15892:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   15894:	bb48      	cbnz	r0, 158ea <net_buf_alloc_len+0xc6>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   15896:	79a0      	ldrb	r0, [r4, #6]
   15898:	4621      	mov	r1, r4
   1589a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1589e:	f009 ff34 	bl	1f70a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   158a2:	462c      	mov	r4, r5
   158a4:	e01c      	b.n	158e0 <net_buf_alloc_len+0xbc>
		uninit_count = pool->uninit_count--;
   158a6:	8a6b      	ldrh	r3, [r5, #18]
   158a8:	1e5a      	subs	r2, r3, #1
   158aa:	826a      	strh	r2, [r5, #18]
   158ac:	f388 8811 	msr	BASEPRI, r8
   158b0:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   158b4:	8a2c      	ldrh	r4, [r5, #16]
   158b6:	1ae4      	subs	r4, r4, r3
   158b8:	69eb      	ldr	r3, [r5, #28]
   158ba:	2218      	movs	r2, #24
   158bc:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   158c0:	4b0f      	ldr	r3, [pc, #60]	; (15900 <net_buf_alloc_len+0xdc>)
   158c2:	1aed      	subs	r5, r5, r3
   158c4:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   158c6:	71a5      	strb	r5, [r4, #6]
		goto success;
   158c8:	e7ca      	b.n	15860 <net_buf_alloc_len+0x3c>
   158ca:	f388 8811 	msr	BASEPRI, r8
   158ce:	f3bf 8f6f 	isb	sy
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   158d2:	4631      	mov	r1, r6
   158d4:	4628      	mov	r0, r5
   158d6:	f009 ff3a 	bl	1f74e <z_impl_k_queue_get>
	if (!buf) {
   158da:	4604      	mov	r4, r0
   158dc:	2800      	cmp	r0, #0
   158de:	d1bf      	bne.n	15860 <net_buf_alloc_len+0x3c>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   158e0:	4620      	mov	r0, r4
   158e2:	b002      	add	sp, #8
   158e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   158e8:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   158ea:	2300      	movs	r3, #0
	buf->ref   = 1;
   158ec:	2201      	movs	r2, #1
	buf->frags = NULL;
   158ee:	6023      	str	r3, [r4, #0]
	buf->ref   = 1;
   158f0:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0;
   158f2:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   158f4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   158f6:	6923      	ldr	r3, [r4, #16]
   158f8:	81e2      	strh	r2, [r4, #14]
   158fa:	60a3      	str	r3, [r4, #8]
	return buf;
   158fc:	e7f0      	b.n	158e0 <net_buf_alloc_len+0xbc>
   158fe:	bf00      	nop
   15900:	2000947c 	.word	0x2000947c

00015904 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   15904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15906:	4d15      	ldr	r5, [pc, #84]	; (1595c <net_buf_unref+0x58>)
   15908:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1590a:	2600      	movs	r6, #0
	while (buf) {
   1590c:	b904      	cbnz	r4, 15910 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1590e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   15910:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   15912:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   15914:	3b01      	subs	r3, #1
   15916:	b2db      	uxtb	r3, r3
   15918:	7123      	strb	r3, [r4, #4]
   1591a:	2b00      	cmp	r3, #0
   1591c:	d1f7      	bne.n	1590e <net_buf_unref+0xa>
		if (buf->__buf) {
   1591e:	6921      	ldr	r1, [r4, #16]
   15920:	b159      	cbz	r1, 1593a <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   15922:	7963      	ldrb	r3, [r4, #5]
   15924:	079b      	lsls	r3, r3, #30
   15926:	d407      	bmi.n	15938 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
   15928:	79a3      	ldrb	r3, [r4, #6]
   1592a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1592e:	4620      	mov	r0, r4
   15930:	699b      	ldr	r3, [r3, #24]
   15932:	681b      	ldr	r3, [r3, #0]
   15934:	689b      	ldr	r3, [r3, #8]
   15936:	4798      	blx	r3
			buf->__buf = NULL;
   15938:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1593a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1593c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1593e:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   15942:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   15944:	695b      	ldr	r3, [r3, #20]
   15946:	b11b      	cbz	r3, 15950 <net_buf_unref+0x4c>
			pool->destroy(buf);
   15948:	4620      	mov	r0, r4
   1594a:	4798      	blx	r3
{
   1594c:	463c      	mov	r4, r7
   1594e:	e7dd      	b.n	1590c <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   15950:	4621      	mov	r1, r4
   15952:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   15956:	f009 fed8 	bl	1f70a <k_queue_prepend>
   1595a:	e7f7      	b.n	1594c <net_buf_unref+0x48>
   1595c:	2000947c 	.word	0x2000947c

00015960 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   15960:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15962:	4b09      	ldr	r3, [pc, #36]	; (15988 <gpio_nrfx_init+0x28>)
   15964:	781a      	ldrb	r2, [r3, #0]
   15966:	b96a      	cbnz	r2, 15984 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15968:	2101      	movs	r1, #1
   1596a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
   1596c:	2006      	movs	r0, #6
   1596e:	2105      	movs	r1, #5
   15970:	f7f2 fd0c 	bl	838c <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
   15974:	2006      	movs	r0, #6
   15976:	f7f2 fcd7 	bl	8328 <z_arch_irq_enable>
    return ((uint32_t)NRF_GPIOTE + event);
}

__STATIC_INLINE void nrf_gpiote_int_enable(uint32_t mask)
{
    NRF_GPIOTE->INTENSET = mask;
   1597a:	4b04      	ldr	r3, [pc, #16]	; (1598c <gpio_nrfx_init+0x2c>)
   1597c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15980:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15984:	2000      	movs	r0, #0
   15986:	bd08      	pop	{r3, pc}
   15988:	200025cc 	.word	0x200025cc
   1598c:	40006000 	.word	0x40006000

00015990 <gpiote_event_handler>:
{
   15990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   15994:	4f4b      	ldr	r7, [pc, #300]	; (15ac4 <gpiote_event_handler+0x134>)
   15996:	683d      	ldr	r5, [r7, #0]
	if (port_event) {
   15998:	2d01      	cmp	r5, #1
   1599a:	d166      	bne.n	15a6a <gpiote_event_handler+0xda>
	struct gpio_nrfx_data *data = get_port_data(port);
   1599c:	4a4a      	ldr	r2, [pc, #296]	; (15ac8 <gpiote_event_handler+0x138>)
   1599e:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   159a0:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   159a2:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   159a4:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   159a8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
   159ac:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
   159ae:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   159b2:	4301      	orrs	r1, r0
   159b4:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   159b8:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   159bc:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   159be:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
   159c2:	405c      	eors	r4, r3
   159c4:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
   159c6:	ea22 0404 	bic.w	r4, r2, r4
	u32_t bit = 1U << pin;
   159ca:	462e      	mov	r6, r5
	u32_t pin = 0;
   159cc:	f04f 0900 	mov.w	r9, #0
	while (level_pins) {
   159d0:	2a00      	cmp	r2, #0
   159d2:	d139      	bne.n	15a48 <gpiote_event_handler+0xb8>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   159d4:	603a      	str	r2, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   159d6:	683b      	ldr	r3, [r7, #0]
   159d8:	9300      	str	r3, [sp, #0]
    (void)dummy;
   159da:	9b00      	ldr	r3, [sp, #0]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   159dc:	4e3b      	ldr	r6, [pc, #236]	; (15acc <gpiote_event_handler+0x13c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
   159de:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   159e0:	2701      	movs	r7, #1
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   159e2:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
   159e4:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   159e8:	fa07 f103 	lsl.w	r1, r7, r3
   159ec:	4211      	tst	r1, r2
   159ee:	d014      	beq.n	15a1a <gpiote_event_handler+0x8a>
    return ((uint32_t)NRF_GPIOTE + event);
   159f0:	009a      	lsls	r2, r3, #2
   159f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   159f6:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   159fa:	6811      	ldr	r1, [r2, #0]
   159fc:	2901      	cmp	r1, #1
   159fe:	d10c      	bne.n	15a1a <gpiote_event_handler+0x8a>
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15a00:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   15a04:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   15a08:	f8c2 c000 	str.w	ip, [r2]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   15a0c:	6812      	ldr	r2, [r2, #0]
   15a0e:	9201      	str	r2, [sp, #4]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15a10:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32] |= BIT(abs_pin % 32);
   15a14:	4081      	lsls	r1, r0
    (void)dummy;
   15a16:	9a01      	ldr	r2, [sp, #4]
   15a18:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15a1a:	3301      	adds	r3, #1
   15a1c:	2b08      	cmp	r3, #8
   15a1e:	d1e1      	bne.n	159e4 <gpiote_event_handler+0x54>
	if (fired_triggers[0]) {
   15a20:	bb2c      	cbnz	r4, 15a6e <gpiote_event_handler+0xde>
	if (port_event) {
   15a22:	2d01      	cmp	r5, #1
   15a24:	d10d      	bne.n	15a42 <gpiote_event_handler+0xb2>
	const struct gpio_nrfx_data *data = get_port_data(port);
   15a26:	4b28      	ldr	r3, [pc, #160]	; (15ac8 <gpiote_event_handler+0x138>)
   15a28:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
   15a2a:	681b      	ldr	r3, [r3, #0]
   15a2c:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   15a2e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   15a32:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
   15a34:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
   15a38:	430b      	orrs	r3, r1
   15a3a:	ea22 0203 	bic.w	r2, r2, r3
	u32_t pin = 0;
   15a3e:	2700      	movs	r7, #0
	while (level_pins) {
   15a40:	bb3a      	cbnz	r2, 15a92 <gpiote_event_handler+0x102>
}
   15a42:	b003      	add	sp, #12
   15a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   15a48:	4232      	tst	r2, r6
   15a4a:	d00a      	beq.n	15a62 <gpiote_event_handler+0xd2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15a4c:	f898 3004 	ldrb.w	r3, [r8, #4]
   15a50:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15a54:	2100      	movs	r1, #0
   15a56:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   15a5a:	f009 fc12 	bl	1f282 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15a5e:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   15a62:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   15a66:	0076      	lsls	r6, r6, #1
   15a68:	e7b2      	b.n	159d0 <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   15a6a:	2400      	movs	r4, #0
   15a6c:	e7b6      	b.n	159dc <gpiote_event_handler+0x4c>
	_gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
   15a6e:	4f16      	ldr	r7, [pc, #88]	; (15ac8 <gpiote_event_handler+0x138>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15a70:	68bb      	ldr	r3, [r7, #8]
   15a72:	6819      	ldr	r1, [r3, #0]
   15a74:	2900      	cmp	r1, #0
   15a76:	d0d4      	beq.n	15a22 <gpiote_event_handler+0x92>
   15a78:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
   15a7a:	688b      	ldr	r3, [r1, #8]
   15a7c:	421c      	tst	r4, r3
   15a7e:	d003      	beq.n	15a88 <gpiote_event_handler+0xf8>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   15a80:	684b      	ldr	r3, [r1, #4]
   15a82:	4622      	mov	r2, r4
   15a84:	4638      	mov	r0, r7
   15a86:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15a88:	2e00      	cmp	r6, #0
   15a8a:	d0ca      	beq.n	15a22 <gpiote_event_handler+0x92>
   15a8c:	4631      	mov	r1, r6
   15a8e:	6836      	ldr	r6, [r6, #0]
   15a90:	e7f3      	b.n	15a7a <gpiote_event_handler+0xea>
		if (level_pins & bit) {
   15a92:	4215      	tst	r5, r2
   15a94:	d012      	beq.n	15abc <gpiote_event_handler+0x12c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   15a96:	69e1      	ldr	r1, [r4, #28]
   15a98:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15a9a:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   15a9e:	404b      	eors	r3, r1
   15aa0:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   15aa2:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15aa6:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15aaa:	bf0c      	ite	eq
   15aac:	2103      	moveq	r1, #3
   15aae:	2102      	movne	r1, #2
   15ab0:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   15ab4:	f009 fbe5 	bl	1f282 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   15ab8:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   15abc:	3701      	adds	r7, #1
		bit <<= 1;
   15abe:	006d      	lsls	r5, r5, #1
   15ac0:	e7be      	b.n	15a40 <gpiote_event_handler+0xb0>
   15ac2:	bf00      	nop
   15ac4:	4000617c 	.word	0x4000617c
   15ac8:	20009324 	.word	0x20009324
   15acc:	40006000 	.word	0x40006000

00015ad0 <gpiote_pin_int_cfg>:
{
   15ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
   15ad2:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   15ad4:	6886      	ldr	r6, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15ad6:	689b      	ldr	r3, [r3, #8]
   15ad8:	f001 041f 	and.w	r4, r1, #31
{
   15adc:	460d      	mov	r5, r1
    return (NRF_GPIOTE->INTENSET & mask);
   15ade:	494e      	ldr	r1, [pc, #312]	; (15c18 <gpiote_pin_int_cfg+0x148>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15ae0:	791b      	ldrb	r3, [r3, #4]
   15ae2:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   15ae6:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
   15aea:	b2d2      	uxtb	r2, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15aec:	2300      	movs	r3, #0
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15aee:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   15af2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   15af6:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   15afa:	4284      	cmp	r4, r0
   15afc:	d170      	bne.n	15be0 <gpiote_pin_int_cfg+0x110>
		    && (intenset & BIT(i))) {
   15afe:	fa22 f003 	lsr.w	r0, r2, r3
   15b02:	07c0      	lsls	r0, r0, #31
   15b04:	d56c      	bpl.n	15be0 <gpiote_pin_int_cfg+0x110>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15b06:	009a      	lsls	r2, r3, #2
   15b08:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15b0c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   15b10:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   15b14:	f020 0001 	bic.w	r0, r0, #1
   15b18:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   15b1c:	2201      	movs	r2, #1
   15b1e:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   15b22:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15b26:	4620      	mov	r0, r4
   15b28:	2100      	movs	r1, #0
   15b2a:	f009 fbaa 	bl	1f282 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   15b2e:	68b0      	ldr	r0, [r6, #8]
   15b30:	40e8      	lsrs	r0, r5
   15b32:	f010 0001 	ands.w	r0, r0, #1
   15b36:	d051      	beq.n	15bdc <gpiote_pin_int_cfg+0x10c>
   15b38:	68f0      	ldr	r0, [r6, #12]
   15b3a:	40e8      	lsrs	r0, r5
   15b3c:	f010 0001 	ands.w	r0, r0, #1
   15b40:	d04c      	beq.n	15bdc <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   15b42:	6970      	ldr	r0, [r6, #20]
   15b44:	40e8      	lsrs	r0, r5
   15b46:	f010 0201 	ands.w	r2, r0, #1
   15b4a:	d055      	beq.n	15bf8 <gpiote_pin_int_cfg+0x128>
			if (data->double_edge & BIT(pin)) {
   15b4c:	69b3      	ldr	r3, [r6, #24]
   15b4e:	40eb      	lsrs	r3, r5
   15b50:	07db      	lsls	r3, r3, #31
   15b52:	d449      	bmi.n	15be8 <gpiote_pin_int_cfg+0x118>
			} else if (((data->active_level & BIT(pin)) != 0)
   15b54:	6933      	ldr	r3, [r6, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   15b56:	69f2      	ldr	r2, [r6, #28]
			} else if (((data->active_level & BIT(pin)) != 0)
   15b58:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   15b5a:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0)
   15b5e:	f003 0301 	and.w	r3, r3, #1
   15b62:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   15b66:	42ab      	cmp	r3, r5
   15b68:	bf14      	ite	ne
   15b6a:	2501      	movne	r5, #1
   15b6c:	2502      	moveq	r5, #2
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   15b6e:	4e2a      	ldr	r6, [pc, #168]	; (15c18 <gpiote_pin_int_cfg+0x148>)
   15b70:	2100      	movs	r1, #0
   15b72:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   15b76:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   15b7a:	f010 0003 	ands.w	r0, r0, #3
   15b7e:	d135      	bne.n	15bec <gpiote_pin_int_cfg+0x11c>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15b80:	008b      	lsls	r3, r1, #2
   15b82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15b86:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15b8a:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15b8c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15b90:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   15b94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   15b98:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15b9c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15ba0:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   15ba4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   15ba8:	4315      	orrs	r5, r2
			nrf_gpiote_events_t evt =
   15baa:	f101 0240 	add.w	r2, r1, #64	; 0x40
   15bae:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
   15bb0:	b292      	uxth	r2, r2
   15bb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15bb6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15bba:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   15bbe:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
   15bc0:	6812      	ldr	r2, [r2, #0]
   15bc2:	9201      	str	r2, [sp, #4]
    (void)dummy;
   15bc4:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15bc6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15bca:	f042 0201 	orr.w	r2, r2, #1
   15bce:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   15bd2:	2301      	movs	r3, #1
   15bd4:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
   15bd8:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   15bdc:	b002      	add	sp, #8
   15bde:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15be0:	3301      	adds	r3, #1
   15be2:	2b08      	cmp	r3, #8
   15be4:	d183      	bne.n	15aee <gpiote_pin_int_cfg+0x1e>
   15be6:	e79e      	b.n	15b26 <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15be8:	2503      	movs	r5, #3
   15bea:	e7c0      	b.n	15b6e <gpiote_pin_int_cfg+0x9e>
   15bec:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   15bee:	2908      	cmp	r1, #8
   15bf0:	d1bf      	bne.n	15b72 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   15bf2:	f06f 0012 	mvn.w	r0, #18
   15bf6:	e7f1      	b.n	15bdc <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   15bf8:	69f1      	ldr	r1, [r6, #28]
   15bfa:	6933      	ldr	r3, [r6, #16]
   15bfc:	404b      	eors	r3, r1
   15bfe:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   15c02:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15c06:	4620      	mov	r0, r4
   15c08:	bf0c      	ite	eq
   15c0a:	2103      	moveq	r1, #3
   15c0c:	2102      	movne	r1, #2
   15c0e:	f009 fb38 	bl	1f282 <nrf_gpio_cfg_sense_set>
	int res = 0;
   15c12:	4610      	mov	r0, r2
   15c14:	e7e2      	b.n	15bdc <gpiote_pin_int_cfg+0x10c>
   15c16:	bf00      	nop
   15c18:	40006000 	.word	0x40006000

00015c1c <nvmc_wait_ready>:
	while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   15c1c:	4a02      	ldr	r2, [pc, #8]	; (15c28 <nvmc_wait_ready+0xc>)
   15c1e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   15c22:	2b00      	cmp	r3, #0
   15c24:	d0fb      	beq.n	15c1e <nvmc_wait_ready+0x2>
}
   15c26:	4770      	bx	lr
   15c28:	4001e000 	.word	0x4001e000

00015c2c <flash_nrf_pages_layout>:
	*layout = &dev_layout;
   15c2c:	4b02      	ldr	r3, [pc, #8]	; (15c38 <flash_nrf_pages_layout+0xc>)
   15c2e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   15c30:	2301      	movs	r3, #1
   15c32:	6013      	str	r3, [r2, #0]
}
   15c34:	4770      	bx	lr
   15c36:	bf00      	nop
   15c38:	20001e28 	.word	0x20001e28

00015c3c <nrf_flash_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   15c3c:	2201      	movs	r2, #1
{
   15c3e:	b508      	push	{r3, lr}
   15c40:	4611      	mov	r1, r2
   15c42:	4808      	ldr	r0, [pc, #32]	; (15c64 <nrf_flash_init+0x28>)
   15c44:	f009 fed0 	bl	1f9e8 <z_impl_k_sem_init>
   15c48:	2201      	movs	r2, #1
   15c4a:	2100      	movs	r1, #0
   15c4c:	4806      	ldr	r0, [pc, #24]	; (15c68 <nrf_flash_init+0x2c>)
   15c4e:	f009 fecb 	bl	1f9e8 <z_impl_k_sem_init>
	dev_layout.pages_count = NRF_FICR->CODESIZE;
   15c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15c56:	4b05      	ldr	r3, [pc, #20]	; (15c6c <nrf_flash_init+0x30>)
   15c58:	6951      	ldr	r1, [r2, #20]
   15c5a:	6019      	str	r1, [r3, #0]
	dev_layout.pages_size = NRF_FICR->CODEPAGESIZE;
   15c5c:	6912      	ldr	r2, [r2, #16]
   15c5e:	605a      	str	r2, [r3, #4]
}
   15c60:	2000      	movs	r0, #0
   15c62:	bd08      	pop	{r3, pc}
   15c64:	20001e30 	.word	0x20001e30
   15c68:	20001e48 	.word	0x20001e48
   15c6c:	20001e28 	.word	0x20001e28

00015c70 <time_slot_callback_helper>:
{
   15c70:	b570      	push	{r4, r5, r6, lr}
   15c72:	b08c      	sub	sp, #48	; 0x30
   15c74:	461d      	mov	r5, r3
   15c76:	4606      	mov	r6, r0
	ll_radio_state_abort();
   15c78:	f008 ff9f 	bl	1ebba <ll_radio_state_abort>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   15c7c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   15c80:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   15c84:	f009 f88a 	bl	1ed9c <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   15c88:	4b13      	ldr	r3, [pc, #76]	; (15cd8 <time_slot_callback_helper+0x68>)
   15c8a:	9506      	str	r5, [sp, #24]
   15c8c:	2400      	movs	r4, #0
   15c8e:	e9cd 4304 	strd	r4, r3, [sp, #16]
   15c92:	2310      	movs	r3, #16
   15c94:	9300      	str	r3, [sp, #0]
   15c96:	e9cd 4407 	strd	r4, r4, [sp, #28]
   15c9a:	4633      	mov	r3, r6
   15c9c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   15ca0:	9401      	str	r4, [sp, #4]
   15ca2:	4622      	mov	r2, r4
   15ca4:	4621      	mov	r1, r4
   15ca6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   15caa:	f7fc f979 	bl	11fa0 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   15cae:	f030 0302 	bics.w	r3, r0, #2
   15cb2:	d00e      	beq.n	15cd2 <time_slot_callback_helper+0x62>
		((struct flash_op_desc *)context)->result = -ECANCELED;
   15cb4:	f06f 0347 	mvn.w	r3, #71	; 0x47
   15cb8:	60ab      	str	r3, [r5, #8]
		err = ticker_stop(instance_index, 0, ticker_id, NULL, NULL);
   15cba:	9400      	str	r4, [sp, #0]
   15cbc:	4623      	mov	r3, r4
   15cbe:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   15cc2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   15cc6:	4621      	mov	r1, r4
   15cc8:	f7fc f9fc 	bl	120c4 <ticker_stop>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   15ccc:	4803      	ldr	r0, [pc, #12]	; (15cdc <time_slot_callback_helper+0x6c>)
   15cce:	f001 f89d 	bl	16e0c <z_impl_k_sem_give>
}
   15cd2:	b00c      	add	sp, #48	; 0x30
   15cd4:	bd70      	pop	{r4, r5, r6, pc}
   15cd6:	bf00      	nop
   15cd8:	00015ce1 	.word	0x00015ce1
   15cdc:	20001e48 	.word	0x20001e48

00015ce0 <time_slot_callback_work>:
{
   15ce0:	b530      	push	{r4, r5, lr}
   15ce2:	461d      	mov	r5, r3
   15ce4:	b085      	sub	sp, #20
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   15ce6:	e9d3 3000 	ldrd	r3, r0, [r3]
   15cea:	4798      	blx	r3
   15cec:	4604      	mov	r4, r0
   15cee:	b990      	cbnz	r0, 15d16 <time_slot_callback_work+0x36>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   15cf0:	f10d 010f 	add.w	r1, sp, #15
   15cf4:	f10d 000e 	add.w	r0, sp, #14
   15cf8:	f009 f850 	bl	1ed9c <ll_timeslice_ticker_id_get>
		result = ticker_stop(instance_index,
   15cfc:	9400      	str	r4, [sp, #0]
   15cfe:	4623      	mov	r3, r4
   15d00:	f89d 200f 	ldrb.w	r2, [sp, #15]
   15d04:	f89d 000e 	ldrb.w	r0, [sp, #14]
   15d08:	4621      	mov	r1, r4
   15d0a:	f7fc f9db 	bl	120c4 <ticker_stop>
		((struct flash_op_desc *)context)->result = 0;
   15d0e:	60ac      	str	r4, [r5, #8]
   15d10:	4802      	ldr	r0, [pc, #8]	; (15d1c <time_slot_callback_work+0x3c>)
   15d12:	f001 f87b 	bl	16e0c <z_impl_k_sem_give>
}
   15d16:	b005      	add	sp, #20
   15d18:	bd30      	pop	{r4, r5, pc}
   15d1a:	bf00      	nop
   15d1c:	20001e48 	.word	0x20001e48

00015d20 <flash_nrf_erase>:
{
   15d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
   15d22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   15d26:	460e      	mov	r6, r1
   15d28:	b08b      	sub	sp, #44	; 0x2c
	if (is_regular_addr_valid(addr, size)) {
   15d2a:	4611      	mov	r1, r2
   15d2c:	4630      	mov	r0, r6
{
   15d2e:	4615      	mov	r5, r2
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
   15d30:	691f      	ldr	r7, [r3, #16]
	if (is_regular_addr_valid(addr, size)) {
   15d32:	f009 fbea 	bl	1f50a <is_regular_addr_valid>
   15d36:	2800      	cmp	r0, #0
   15d38:	d03a      	beq.n	15db0 <flash_nrf_erase+0x90>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   15d3a:	fbb6 f3f7 	udiv	r3, r6, r7
   15d3e:	fb07 6313 	mls	r3, r7, r3, r6
   15d42:	bbab      	cbnz	r3, 15db0 <flash_nrf_erase+0x90>
   15d44:	fbb5 f4f7 	udiv	r4, r5, r7
   15d48:	fb07 5414 	mls	r4, r7, r4, r5
   15d4c:	bb84      	cbnz	r4, 15db0 <flash_nrf_erase+0x90>
		if (!n_pages) {
   15d4e:	42af      	cmp	r7, r5
   15d50:	d822      	bhi.n	15d98 <flash_nrf_erase+0x78>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   15d52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15d56:	4818      	ldr	r0, [pc, #96]	; (15db8 <flash_nrf_erase+0x98>)
   15d58:	f001 f882 	bl	16e60 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   15d5c:	4620      	mov	r0, r4
   15d5e:	f7fc f901 	bl	11f64 <ticker_is_initialized>
   15d62:	ab04      	add	r3, sp, #16
   15d64:	4601      	mov	r1, r0
   15d66:	b1d0      	cbz	r0, 15d9e <flash_nrf_erase+0x7e>
	struct flash_context context = {
   15d68:	2210      	movs	r2, #16
   15d6a:	4621      	mov	r1, r4
   15d6c:	4618      	mov	r0, r3
   15d6e:	f004 f9c5 	bl	1a0fc <memset>
   15d72:	2201      	movs	r2, #1
   15d74:	f88d 201c 	strb.w	r2, [sp, #28]
   15d78:	4a10      	ldr	r2, [pc, #64]	; (15dbc <flash_nrf_erase+0x9c>)
	struct flash_op_desc flash_op_desc = {
   15d7a:	9403      	str	r4, [sp, #12]
	struct flash_context context = {
   15d7c:	e9cd 2208 	strd	r2, r2, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   15d80:	4a0f      	ldr	r2, [pc, #60]	; (15dc0 <flash_nrf_erase+0xa0>)
   15d82:	e9cd 2001 	strd	r2, r0, [sp, #4]
	return work_in_time_slice(&flash_op_desc);
   15d86:	a801      	add	r0, sp, #4
	struct flash_context context = {
   15d88:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return work_in_time_slice(&flash_op_desc);
   15d8c:	f7ed fb70 	bl	3470 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return	erase_op(&context);
   15d90:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   15d92:	4809      	ldr	r0, [pc, #36]	; (15db8 <flash_nrf_erase+0x98>)
   15d94:	f001 f83a 	bl	16e0c <z_impl_k_sem_give>
}
   15d98:	4620      	mov	r0, r4
   15d9a:	b00b      	add	sp, #44	; 0x2c
   15d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   15d9e:	2218      	movs	r2, #24
   15da0:	4618      	mov	r0, r3
   15da2:	f004 f9ab 	bl	1a0fc <memset>
   15da6:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return	erase_op(&context);
   15daa:	f7ed fb0d 	bl	33c8 <erase_op>
   15dae:	e7ef      	b.n	15d90 <flash_nrf_erase+0x70>
		return -EINVAL;
   15db0:	f06f 0415 	mvn.w	r4, #21
   15db4:	e7f0      	b.n	15d98 <flash_nrf_erase+0x78>
   15db6:	bf00      	nop
   15db8:	20001e30 	.word	0x20001e30
   15dbc:	00015e64 	.word	0x00015e64
   15dc0:	000033c9 	.word	0x000033c9

00015dc4 <flash_nrf_write_protection>:
{
   15dc4:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   15dc6:	480a      	ldr	r0, [pc, #40]	; (15df0 <flash_nrf_write_protection+0x2c>)
   15dc8:	460c      	mov	r4, r1
   15dca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15dce:	f001 f847 	bl	16e60 <z_impl_k_sem_take>
	if (enable) {
   15dd2:	4b08      	ldr	r3, [pc, #32]	; (15df4 <flash_nrf_write_protection+0x30>)
   15dd4:	b14c      	cbz	r4, 15dea <flash_nrf_write_protection+0x26>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   15dd6:	2200      	movs	r2, #0
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   15dd8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nvmc_wait_ready();
   15ddc:	f7ff ff1e 	bl	15c1c <nvmc_wait_ready>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   15de0:	4803      	ldr	r0, [pc, #12]	; (15df0 <flash_nrf_write_protection+0x2c>)
   15de2:	f001 f813 	bl	16e0c <z_impl_k_sem_give>
}
   15de6:	2000      	movs	r0, #0
   15de8:	bd10      	pop	{r4, pc}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   15dea:	2201      	movs	r2, #1
   15dec:	e7f4      	b.n	15dd8 <flash_nrf_write_protection+0x14>
   15dee:	bf00      	nop
   15df0:	20001e30 	.word	0x20001e30
   15df4:	4001e000 	.word	0x4001e000

00015df8 <flash_nrf_write>:
{
   15df8:	b570      	push	{r4, r5, r6, lr}
   15dfa:	460d      	mov	r5, r1
   15dfc:	b08a      	sub	sp, #40	; 0x28
	return is_regular_addr_valid(addr, len) ||
   15dfe:	4619      	mov	r1, r3
   15e00:	4628      	mov	r0, r5
{
   15e02:	4616      	mov	r6, r2
   15e04:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   15e06:	f009 fb80 	bl	1f50a <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   15e0a:	b368      	cbz	r0, 15e68 <flash_nrf_write+0x70>
	if (!len) {
   15e0c:	b304      	cbz	r4, 15e50 <flash_nrf_write+0x58>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   15e0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15e12:	4817      	ldr	r0, [pc, #92]	; (15e70 <flash_nrf_write+0x78>)
   15e14:	f001 f824 	bl	16e60 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   15e18:	2000      	movs	r0, #0
   15e1a:	f7fc f8a3 	bl	11f64 <ticker_is_initialized>
   15e1e:	4603      	mov	r3, r0
   15e20:	a804      	add	r0, sp, #16
   15e22:	b1c3      	cbz	r3, 15e56 <flash_nrf_write+0x5e>
	struct flash_context context = {
   15e24:	2301      	movs	r3, #1
   15e26:	f88d 301c 	strb.w	r3, [sp, #28]
   15e2a:	f641 534c 	movw	r3, #7500	; 0x1d4c
   15e2e:	e9cd 3308 	strd	r3, r3, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   15e32:	2300      	movs	r3, #0
   15e34:	9303      	str	r3, [sp, #12]
   15e36:	4b0f      	ldr	r3, [pc, #60]	; (15e74 <flash_nrf_write+0x7c>)
	struct flash_context context = {
   15e38:	9406      	str	r4, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   15e3a:	e9cd 3001 	strd	r3, r0, [sp, #4]
	return  work_in_time_slice(&flash_op_desc);
   15e3e:	a801      	add	r0, sp, #4
	struct flash_context context = {
   15e40:	e9cd 6504 	strd	r6, r5, [sp, #16]
	return  work_in_time_slice(&flash_op_desc);
   15e44:	f7ed fb14 	bl	3470 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
   15e48:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   15e4a:	4809      	ldr	r0, [pc, #36]	; (15e70 <flash_nrf_write+0x78>)
   15e4c:	f000 ffde 	bl	16e0c <z_impl_k_sem_give>
}
   15e50:	4620      	mov	r0, r4
   15e52:	b00a      	add	sp, #40	; 0x28
   15e54:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   15e56:	e9cd 3307 	strd	r3, r3, [sp, #28]
   15e5a:	9309      	str	r3, [sp, #36]	; 0x24
   15e5c:	e9cd 6504 	strd	r6, r5, [sp, #16]
   15e60:	9406      	str	r4, [sp, #24]
	return write_op(&context);
   15e62:	f7ed fb79 	bl	3558 <write_op>
   15e66:	e7ef      	b.n	15e48 <flash_nrf_write+0x50>
		return -EINVAL;
   15e68:	f06f 0415 	mvn.w	r4, #21
   15e6c:	e7f0      	b.n	15e50 <flash_nrf_write+0x58>
   15e6e:	bf00      	nop
   15e70:	20001e30 	.word	0x20001e30
   15e74:	00003559 	.word	0x00003559

00015e78 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e78:	4b03      	ldr	r3, [pc, #12]	; (15e88 <uart_nrfx_err_check+0x10>)
   15e7a:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   15e7c:	b118      	cbz	r0, 15e86 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   15e7e:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   15e82:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
   15e86:	4770      	bx	lr
   15e88:	40002124 	.word	0x40002124

00015e8c <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
   15e8c:	b530      	push	{r4, r5, lr}
	nrf_uart_parity_t parity;
	nrf_uart_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   15e8e:	794b      	ldrb	r3, [r1, #5]
   15e90:	2b01      	cmp	r3, #1
   15e92:	d120      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15e94:	798b      	ldrb	r3, [r1, #6]
   15e96:	2b03      	cmp	r3, #3
   15e98:	d11d      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   15e9a:	79cc      	ldrb	r4, [r1, #7]
   15e9c:	b12c      	cbz	r4, 15eaa <uart_nrfx_configure+0x1e>
   15e9e:	2c01      	cmp	r4, #1
   15ea0:	d119      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
   15ea2:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15ea4:	689b      	ldr	r3, [r3, #8]
   15ea6:	781b      	ldrb	r3, [r3, #0]
   15ea8:	b1ab      	cbz	r3, 15ed6 <uart_nrfx_configure+0x4a>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   15eaa:	790a      	ldrb	r2, [r1, #4]
   15eac:	b112      	cbz	r2, 15eb4 <uart_nrfx_configure+0x28>
   15eae:	2a02      	cmp	r2, #2
   15eb0:	d111      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UART_PARITY_INCLUDED;
   15eb2:	220e      	movs	r2, #14
		break;
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15eb4:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   15eb6:	f647 2512 	movw	r5, #31250	; 0x7a12
   15eba:	42ab      	cmp	r3, r5
   15ebc:	d05f      	beq.n	15f7e <uart_nrfx_configure+0xf2>
   15ebe:	d827      	bhi.n	15f10 <uart_nrfx_configure+0x84>
   15ec0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15ec4:	d05e      	beq.n	15f84 <uart_nrfx_configure+0xf8>
   15ec6:	d812      	bhi.n	15eee <uart_nrfx_configure+0x62>
   15ec8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15ecc:	d05c      	beq.n	15f88 <uart_nrfx_configure+0xfc>
   15ece:	d805      	bhi.n	15edc <uart_nrfx_configure+0x50>
   15ed0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15ed4:	d05b      	beq.n	15f8e <uart_nrfx_configure+0x102>
		return -ENOTSUP;
   15ed6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15eda:	e04f      	b.n	15f7c <uart_nrfx_configure+0xf0>
	switch (baudrate) {
   15edc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15ee0:	d058      	beq.n	15f94 <uart_nrfx_configure+0x108>
   15ee2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15ee6:	d1f6      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   15ee8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15eec:	e03b      	b.n	15f66 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   15eee:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15ef2:	d052      	beq.n	15f9a <uart_nrfx_configure+0x10e>
   15ef4:	d804      	bhi.n	15f00 <uart_nrfx_configure+0x74>
   15ef6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15efa:	d1ec      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   15efc:	4b30      	ldr	r3, [pc, #192]	; (15fc0 <uart_nrfx_configure+0x134>)
   15efe:	e032      	b.n	15f66 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   15f00:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   15f04:	d04c      	beq.n	15fa0 <uart_nrfx_configure+0x114>
   15f06:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   15f0a:	d1e4      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   15f0c:	4b2d      	ldr	r3, [pc, #180]	; (15fc4 <uart_nrfx_configure+0x138>)
   15f0e:	e02a      	b.n	15f66 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   15f10:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15f14:	d046      	beq.n	15fa4 <uart_nrfx_configure+0x118>
   15f16:	d811      	bhi.n	15f3c <uart_nrfx_configure+0xb0>
   15f18:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   15f1c:	42ab      	cmp	r3, r5
   15f1e:	d043      	beq.n	15fa8 <uart_nrfx_configure+0x11c>
   15f20:	d804      	bhi.n	15f2c <uart_nrfx_configure+0xa0>
   15f22:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   15f26:	d1d6      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   15f28:	4b27      	ldr	r3, [pc, #156]	; (15fc8 <uart_nrfx_configure+0x13c>)
   15f2a:	e01c      	b.n	15f66 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   15f2c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15f30:	d03d      	beq.n	15fae <uart_nrfx_configure+0x122>
   15f32:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   15f36:	d1ce      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   15f38:	4b24      	ldr	r3, [pc, #144]	; (15fcc <uart_nrfx_configure+0x140>)
   15f3a:	e014      	b.n	15f66 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   15f3c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15f40:	d037      	beq.n	15fb2 <uart_nrfx_configure+0x126>
   15f42:	d808      	bhi.n	15f56 <uart_nrfx_configure+0xca>
   15f44:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15f48:	d035      	beq.n	15fb6 <uart_nrfx_configure+0x12a>
   15f4a:	4d21      	ldr	r5, [pc, #132]	; (15fd0 <uart_nrfx_configure+0x144>)
   15f4c:	42ab      	cmp	r3, r5
   15f4e:	d1c2      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   15f50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   15f54:	e007      	b.n	15f66 <uart_nrfx_configure+0xda>
	switch (baudrate) {
   15f56:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15f5a:	d02e      	beq.n	15fba <uart_nrfx_configure+0x12e>
   15f5c:	4d1d      	ldr	r5, [pc, #116]	; (15fd4 <uart_nrfx_configure+0x148>)
   15f5e:	42ab      	cmp	r3, r5
   15f60:	d1b9      	bne.n	15ed6 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   15f62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15f66:	4d1c      	ldr	r5, [pc, #112]	; (15fd8 <uart_nrfx_configure+0x14c>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   15f68:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   15f6a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   15f6e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
   15f72:	6883      	ldr	r3, [r0, #8]
   15f74:	c903      	ldmia	r1, {r0, r1}
   15f76:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15f7a:	2000      	movs	r0, #0
}
   15f7c:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   15f7e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15f82:	e7f0      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   15f84:	4b15      	ldr	r3, [pc, #84]	; (15fdc <uart_nrfx_configure+0x150>)
   15f86:	e7ee      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
   15f88:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15f8c:	e7eb      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   15f8e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15f92:	e7e8      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   15f94:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15f98:	e7e5      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   15f9a:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   15f9e:	e7e2      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   15fa0:	4b0f      	ldr	r3, [pc, #60]	; (15fe0 <uart_nrfx_configure+0x154>)
   15fa2:	e7e0      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   15fa4:	4b0f      	ldr	r3, [pc, #60]	; (15fe4 <uart_nrfx_configure+0x158>)
   15fa6:	e7de      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   15fa8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15fac:	e7db      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   15fae:	4b0e      	ldr	r3, [pc, #56]	; (15fe8 <uart_nrfx_configure+0x15c>)
   15fb0:	e7d9      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   15fb2:	4b0e      	ldr	r3, [pc, #56]	; (15fec <uart_nrfx_configure+0x160>)
   15fb4:	e7d7      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   15fb6:	4b0e      	ldr	r3, [pc, #56]	; (15ff0 <uart_nrfx_configure+0x164>)
   15fb8:	e7d5      	b.n	15f66 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   15fba:	4b0e      	ldr	r3, [pc, #56]	; (15ff4 <uart_nrfx_configure+0x168>)
   15fbc:	e7d3      	b.n	15f66 <uart_nrfx_configure+0xda>
   15fbe:	bf00      	nop
   15fc0:	00275000 	.word	0x00275000
   15fc4:	0075f000 	.word	0x0075f000
   15fc8:	009d5000 	.word	0x009d5000
   15fcc:	013a9000 	.word	0x013a9000
   15fd0:	0003d090 	.word	0x0003d090
   15fd4:	000f4240 	.word	0x000f4240
   15fd8:	40002000 	.word	0x40002000
   15fdc:	0013b000 	.word	0x0013b000
   15fe0:	004ea000 	.word	0x004ea000
   15fe4:	01d7e000 	.word	0x01d7e000
   15fe8:	00ebf000 	.word	0x00ebf000
   15fec:	075f7000 	.word	0x075f7000
   15ff0:	03afb000 	.word	0x03afb000
   15ff4:	0ebed000 	.word	0x0ebed000

00015ff8 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15ff8:	4b08      	ldr	r3, [pc, #32]	; (1601c <uart_nrfx_poll_in+0x24>)
   15ffa:	681a      	ldr	r2, [r3, #0]
{
   15ffc:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   15ffe:	b152      	cbz	r2, 16016 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16000:	2000      	movs	r0, #0
   16002:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   16004:	681b      	ldr	r3, [r3, #0]
   16006:	9301      	str	r3, [sp, #4]
    (void)dummy;
   16008:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1600a:	4b05      	ldr	r3, [pc, #20]	; (16020 <uart_nrfx_poll_in+0x28>)
   1600c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   16010:	700b      	strb	r3, [r1, #0]
}
   16012:	b002      	add	sp, #8
   16014:	4770      	bx	lr
		return -1;
   16016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1601a:	e7fa      	b.n	16012 <uart_nrfx_poll_in+0x1a>
   1601c:	40002108 	.word	0x40002108
   16020:	40002000 	.word	0x40002000

00016024 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16024:	4b09      	ldr	r3, [pc, #36]	; (1604c <uart_nrfx_poll_out+0x28>)
   16026:	2200      	movs	r2, #0
   16028:	601a      	str	r2, [r3, #0]
{
   1602a:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1602c:	681a      	ldr	r2, [r3, #0]
   1602e:	9201      	str	r2, [sp, #4]
    (void)dummy;
   16030:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16032:	4a07      	ldr	r2, [pc, #28]	; (16050 <uart_nrfx_poll_out+0x2c>)
   16034:	2001      	movs	r0, #1
   16036:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
   16038:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1603c:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
   1603e:	2a00      	cmp	r2, #0
   16040:	d0fc      	beq.n	1603c <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16042:	4b04      	ldr	r3, [pc, #16]	; (16054 <uart_nrfx_poll_out+0x30>)
   16044:	2201      	movs	r2, #1
   16046:	601a      	str	r2, [r3, #0]
}
   16048:	b002      	add	sp, #8
   1604a:	4770      	bx	lr
   1604c:	4000211c 	.word	0x4000211c
   16050:	40002008 	.word	0x40002008
   16054:	4000200c 	.word	0x4000200c

00016058 <uart_nrfx_init>:
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   16058:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1605c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
   1605e:	4c16      	ldr	r4, [pc, #88]	; (160b8 <uart_nrfx_init+0x60>)
   16060:	2240      	movs	r2, #64	; 0x40
   16062:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16066:	2103      	movs	r1, #3
   16068:	2200      	movs	r2, #0
   1606a:	2508      	movs	r5, #8
   1606c:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   16070:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   16074:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   16078:	2506      	movs	r5, #6
   1607a:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1607e:	2520      	movs	r5, #32
   16080:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16084:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   16088:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
   1608c:	2305      	movs	r3, #5
   1608e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
   16092:	2307      	movs	r3, #7
   16094:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   16098:	6881      	ldr	r1, [r0, #8]
   1609a:	f7ff fef7 	bl	15e8c <uart_nrfx_configure>
	if (err) {
   1609e:	b948      	cbnz	r0, 160b4 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   160a0:	2304      	movs	r3, #4
   160a2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   160a6:	4b05      	ldr	r3, [pc, #20]	; (160bc <uart_nrfx_init+0x64>)
   160a8:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   160aa:	681b      	ldr	r3, [r3, #0]
   160ac:	9301      	str	r3, [sp, #4]
    (void)dummy;
   160ae:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   160b0:	2301      	movs	r3, #1
   160b2:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   160b4:	b003      	add	sp, #12
   160b6:	bd30      	pop	{r4, r5, pc}
   160b8:	40002000 	.word	0x40002000
   160bc:	40002108 	.word	0x40002108

000160c0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   160c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t last  = rngp->last;
   160c2:	7883      	ldrb	r3, [r0, #2]
	u32_t mask  = rngp->mask;
   160c4:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   160c6:	f04f 0420 	mov.w	r4, #32
   160ca:	f3ef 8e11 	mrs	lr, BASEPRI
   160ce:	f384 8811 	msr	BASEPRI, r4
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   160d2:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   160d4:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   160d8:	1b9b      	subs	r3, r3, r6
   160da:	403b      	ands	r3, r7
	if (available < len) {
   160dc:	429a      	cmp	r2, r3
		len = available;
   160de:	bf88      	it	hi
   160e0:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   160e2:	18b4      	adds	r4, r6, r2
   160e4:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   160e6:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   160e8:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   160ea:	f38e 8811 	msr	BASEPRI, lr
   160ee:	f3bf 8f6f 	isb	sy
   160f2:	440a      	add	r2, r1
	u8_t *dst   = buf;
   160f4:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   160f6:	42a2      	cmp	r2, r4
   160f8:	d118      	bne.n	1612c <rng_pool_get+0x6c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   160fa:	4566      	cmp	r6, ip
   160fc:	d10b      	bne.n	16116 <rng_pool_get+0x56>
	__asm__ volatile(
   160fe:	f04f 0520 	mov.w	r5, #32
   16102:	f3ef 8211 	mrs	r2, BASEPRI
   16106:	f385 8811 	msr	BASEPRI, r5
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1610a:	7805      	ldrb	r5, [r0, #0]
   1610c:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   1610e:	f382 8811 	msr	BASEPRI, r2
   16112:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   16116:	1a64      	subs	r4, r4, r1
   16118:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   1611a:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   1611c:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   1611e:	42a1      	cmp	r1, r4
    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
}

__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   16120:	bf22      	ittt	cs
   16122:	4b07      	ldrcs	r3, [pc, #28]	; (16140 <rng_pool_get+0x80>)
   16124:	2101      	movcs	r1, #1
   16126:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG_TASK_START);
	}

	return len;
}
   16128:	4610      	mov	r0, r2
   1612a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1612c:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   16130:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   16132:	f89e e005 	ldrb.w	lr, [lr, #5]
   16136:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   1613a:	403d      	ands	r5, r7
   1613c:	e7db      	b.n	160f6 <rng_pool_get+0x36>
   1613e:	bf00      	nop
   16140:	4000d000 	.word	0x4000d000

00016144 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   16144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   16148:	4d11      	ldr	r5, [pc, #68]	; (16190 <entropy_nrf5_get_entropy+0x4c>)
   1614a:	460e      	mov	r6, r1
   1614c:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1614e:	f105 0845 	add.w	r8, r5, #69	; 0x45
   16152:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   16156:	b914      	cbnz	r4, 1615e <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   16158:	4620      	mov	r0, r4
   1615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1615e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16162:	4628      	mov	r0, r5
   16164:	f000 fe7c 	bl	16e60 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   16168:	4622      	mov	r2, r4
   1616a:	4631      	mov	r1, r6
   1616c:	4640      	mov	r0, r8
   1616e:	f7ff ffa7 	bl	160c0 <rng_pool_get>
   16172:	4607      	mov	r7, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   16174:	4628      	mov	r0, r5
   16176:	f000 fe49 	bl	16e0c <z_impl_k_sem_give>
		if (bytes == 0) {
   1617a:	b92f      	cbnz	r7, 16188 <entropy_nrf5_get_entropy+0x44>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
   1617c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16180:	4648      	mov	r0, r9
   16182:	f000 fe6d 	bl	16e60 <z_impl_k_sem_take>
   16186:	e7e6      	b.n	16156 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   16188:	1be4      	subs	r4, r4, r7
   1618a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1618c:	443e      	add	r6, r7
   1618e:	e7e2      	b.n	16156 <entropy_nrf5_get_entropy+0x12>
   16190:	20001e60 	.word	0x20001e60

00016194 <random_byte_get>:
{
   16194:	b082      	sub	sp, #8
	__asm__ volatile(
   16196:	f04f 0320 	mov.w	r3, #32
   1619a:	f3ef 8211 	mrs	r2, BASEPRI
   1619e:	f383 8811 	msr	BASEPRI, r3
#endif
}

__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   161a2:	4b0a      	ldr	r3, [pc, #40]	; (161cc <random_byte_get+0x38>)
   161a4:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   161a6:	b171      	cbz	r1, 161c6 <random_byte_get+0x32>
     NRF_RNG->SHORTS &= ~rng_short_mask;
}

__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
{
    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
   161a8:	4909      	ldr	r1, [pc, #36]	; (161d0 <random_byte_get+0x3c>)
   161aa:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   161ae:	2100      	movs	r1, #0
   161b0:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   161b2:	681b      	ldr	r3, [r3, #0]
   161b4:	9301      	str	r3, [sp, #4]
    (void)dummy;
   161b6:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get();
   161b8:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   161ba:	f382 8811 	msr	BASEPRI, r2
   161be:	f3bf 8f6f 	isb	sy
}
   161c2:	b002      	add	sp, #8
   161c4:	4770      	bx	lr
	int retval = -EAGAIN;
   161c6:	f06f 000a 	mvn.w	r0, #10
   161ca:	e7f6      	b.n	161ba <random_byte_get+0x26>
   161cc:	4000d100 	.word	0x4000d100
   161d0:	4000d000 	.word	0x4000d000

000161d4 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   161d4:	07db      	lsls	r3, r3, #31
{
   161d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   161da:	4688      	mov	r8, r1
   161dc:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0)) {
   161de:	d405      	bmi.n	161ec <entropy_nrf5_get_entropy_isr+0x18>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   161e0:	481e      	ldr	r0, [pc, #120]	; (1625c <entropy_nrf5_get_entropy_isr+0x88>)
   161e2:	f7ff ff6d 	bl	160c0 <rng_pool_get>
			irq_enable(RNG_IRQn);
		}
	}

	return cnt;
}
   161e6:	b002      	add	sp, #8
   161e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   161ec:	b382      	cbz	r2, 16250 <entropy_nrf5_get_entropy_isr+0x7c>
	__asm__ volatile(
   161ee:	f04f 0320 	mov.w	r3, #32
   161f2:	f3ef 8511 	mrs	r5, BASEPRI
   161f6:	f383 8811 	msr	BASEPRI, r3
		irq_enabled = irq_is_enabled(RNG_IRQn);
   161fa:	200d      	movs	r0, #13
   161fc:	f7f2 f8b8 	bl	8370 <z_arch_irq_is_enabled>
   16200:	4607      	mov	r7, r0
		irq_disable(RNG_IRQn);
   16202:	200d      	movs	r0, #13
   16204:	f7f2 f8a0 	bl	8348 <z_arch_irq_disable>
	__asm__ volatile(
   16208:	f385 8811 	msr	BASEPRI, r5
   1620c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   16210:	4e13      	ldr	r6, [pc, #76]	; (16260 <entropy_nrf5_get_entropy_isr+0x8c>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16212:	f8df 9054 	ldr.w	r9, [pc, #84]	; 16268 <entropy_nrf5_get_entropy_isr+0x94>
   16216:	2200      	movs	r2, #0
   16218:	6032      	str	r2, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1621a:	6832      	ldr	r2, [r6, #0]
   1621c:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1621e:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   16220:	4a10      	ldr	r2, [pc, #64]	; (16264 <entropy_nrf5_get_entropy_isr+0x90>)
   16222:	2101      	movs	r1, #1
   16224:	6011      	str	r1, [r2, #0]
   16226:	4625      	mov	r5, r4
   16228:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   1622c:	6833      	ldr	r3, [r6, #0]
			while (!nrf_rng_event_get(NRF_RNG_EVENT_VALRDY)) {
   1622e:	b18b      	cbz	r3, 16254 <entropy_nrf5_get_entropy_isr+0x80>
			byte = random_byte_get();
   16230:	f7ff ffb0 	bl	16194 <random_byte_get>
			if (byte < 0) {
   16234:	2800      	cmp	r0, #0
   16236:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1623a:	dbf7      	blt.n	1622c <entropy_nrf5_get_entropy_isr+0x58>
   1623c:	3d01      	subs	r5, #1
   1623e:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   16240:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   16244:	2d00      	cmp	r5, #0
   16246:	d1f1      	bne.n	1622c <entropy_nrf5_get_entropy_isr+0x58>
		if (irq_enabled) {
   16248:	b117      	cbz	r7, 16250 <entropy_nrf5_get_entropy_isr+0x7c>
			irq_enable(RNG_IRQn);
   1624a:	200d      	movs	r0, #13
   1624c:	f7f2 f86c 	bl	8328 <z_arch_irq_enable>
	return cnt;
   16250:	4620      	mov	r0, r4
   16252:	e7c8      	b.n	161e6 <entropy_nrf5_get_entropy_isr+0x12>
				__WFE();
   16254:	bf20      	wfe
				__SEV();
   16256:	bf40      	sev
				__WFE();
   16258:	bf20      	wfe
   1625a:	e7e7      	b.n	1622c <entropy_nrf5_get_entropy_isr+0x58>
   1625c:	20001e90 	.word	0x20001e90
   16260:	4000d100 	.word	0x4000d100
   16264:	4000d000 	.word	0x4000d000
   16268:	e000e100 	.word	0xe000e100

0001626c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1626c:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
   1626e:	4c1b      	ldr	r4, [pc, #108]	; (162dc <entropy_nrf5_init+0x70>)
   16270:	2201      	movs	r2, #1
   16272:	4611      	mov	r1, r2
   16274:	4620      	mov	r0, r4
   16276:	f009 fbb7 	bl	1f9e8 <z_impl_k_sem_init>
   1627a:	f104 0018 	add.w	r0, r4, #24
   1627e:	2201      	movs	r2, #1
   16280:	2100      	movs	r1, #0
   16282:	f009 fbb1 	bl	1f9e8 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   16286:	f240 4307 	movw	r3, #1031	; 0x407
   1628a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1628e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16292:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   16294:	230c      	movs	r3, #12
   16296:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1629a:	2500      	movs	r5, #0
}

__STATIC_INLINE void nrf_rng_error_correction_enable(void)
{
    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1629c:	4b10      	ldr	r3, [pc, #64]	; (162e0 <entropy_nrf5_init+0x74>)
   1629e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   162a2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   162a6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   162aa:	f042 0201 	orr.w	r2, r2, #1
   162ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
   162b2:	4a0c      	ldr	r2, [pc, #48]	; (162e4 <entropy_nrf5_init+0x78>)
   162b4:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
   162b6:	6812      	ldr	r2, [r2, #0]
   162b8:	9201      	str	r2, [sp, #4]
    (void)dummy;
   162ba:	9a01      	ldr	r2, [sp, #4]
    NRF_RNG->INTENSET = rng_int_mask;
   162bc:	2201      	movs	r2, #1
   162be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG_TASK_START);

	IRQ_CONNECT(RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr,
   162c2:	2105      	movs	r1, #5
    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
   162c4:	601a      	str	r2, [r3, #0]
   162c6:	200d      	movs	r0, #13
   162c8:	462a      	mov	r2, r5
   162ca:	f7f2 f85f 	bl	838c <z_irq_priority_set>
		    &entropy_nrf5_data, 0);
	irq_enable(RNG_IRQn);
   162ce:	200d      	movs	r0, #13
   162d0:	f7f2 f82a 	bl	8328 <z_arch_irq_enable>

	return 0;
}
   162d4:	4628      	mov	r0, r5
   162d6:	b003      	add	sp, #12
   162d8:	bd30      	pop	{r4, r5, pc}
   162da:	bf00      	nop
   162dc:	20001e60 	.word	0x20001e60
   162e0:	4000d000 	.word	0x4000d000
   162e4:	4000d100 	.word	0x4000d100

000162e8 <isr>:
{
   162e8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   162ea:	f7ff ff53 	bl	16194 <random_byte_get>
	if (byte < 0) {
   162ee:	2800      	cmp	r0, #0
   162f0:	db20      	blt.n	16334 <isr+0x4c>
	u8_t last  = rngp->last;
   162f2:	4b17      	ldr	r3, [pc, #92]	; (16350 <isr+0x68>)
   162f4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   162f8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   162fc:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   16300:	1a51      	subs	r1, r2, r1
   16302:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   16306:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   16308:	d10d      	bne.n	16326 <isr+0x3e>
	u8_t last  = rngp->last;
   1630a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1630e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   16312:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   16316:	1a51      	subs	r1, r2, r1
   16318:	ea34 0101 	bics.w	r1, r4, r1
   1631c:	d10b      	bne.n	16336 <isr+0x4e>
   1631e:	4b0d      	ldr	r3, [pc, #52]	; (16354 <isr+0x6c>)
   16320:	2201      	movs	r2, #1
   16322:	601a      	str	r2, [r3, #0]
   16324:	e00e      	b.n	16344 <isr+0x5c>
	rngp->buffer[last] = byte;
   16326:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   16328:	3201      	adds	r2, #1
   1632a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1632c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   16330:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   16334:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   16336:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   16338:	3201      	adds	r2, #1
   1633a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1633c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   16340:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   16344:	4804      	ldr	r0, [pc, #16]	; (16358 <isr+0x70>)
}
   16346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1634a:	f000 bd5f 	b.w	16e0c <z_impl_k_sem_give>
   1634e:	bf00      	nop
   16350:	20001e60 	.word	0x20001e60
   16354:	4000d004 	.word	0x4000d004
   16358:	20001e78 	.word	0x20001e78

0001635c <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
   1635c:	4b09      	ldr	r3, [pc, #36]	; (16384 <z_sys_device_do_config_level+0x28>)
{
   1635e:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
   16360:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   16364:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   16366:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   16368:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1636c:	42a5      	cmp	r5, r4
   1636e:	d800      	bhi.n	16372 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   16370:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   16372:	6823      	ldr	r3, [r4, #0]
   16374:	4620      	mov	r0, r4
   16376:	685b      	ldr	r3, [r3, #4]
   16378:	4798      	blx	r3
		if (retval != 0) {
   1637a:	b100      	cbz	r0, 1637e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   1637c:	6066      	str	r6, [r4, #4]
								info++) {
   1637e:	340c      	adds	r4, #12
   16380:	e7f4      	b.n	1636c <z_sys_device_do_config_level+0x10>
   16382:	bf00      	nop
   16384:	00020bb4 	.word	0x00020bb4

00016388 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   16388:	4b10      	ldr	r3, [pc, #64]	; (163cc <z_impl_device_get_binding+0x44>)
{
   1638a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1638c:	4c10      	ldr	r4, [pc, #64]	; (163d0 <z_impl_device_get_binding+0x48>)
{
   1638e:	4605      	mov	r5, r0
   16390:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   16392:	429c      	cmp	r4, r3
   16394:	d104      	bne.n	163a0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   16396:	4c0e      	ldr	r4, [pc, #56]	; (163d0 <z_impl_device_get_binding+0x48>)
   16398:	42b4      	cmp	r4, r6
   1639a:	d109      	bne.n	163b0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   1639c:	2400      	movs	r4, #0
   1639e:	e012      	b.n	163c6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   163a0:	6862      	ldr	r2, [r4, #4]
   163a2:	b11a      	cbz	r2, 163ac <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   163a4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   163a6:	6812      	ldr	r2, [r2, #0]
   163a8:	42aa      	cmp	r2, r5
   163aa:	d00c      	beq.n	163c6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   163ac:	340c      	adds	r4, #12
   163ae:	e7f0      	b.n	16392 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   163b0:	6863      	ldr	r3, [r4, #4]
   163b2:	b90b      	cbnz	r3, 163b8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   163b4:	340c      	adds	r4, #12
   163b6:	e7ef      	b.n	16398 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   163b8:	6823      	ldr	r3, [r4, #0]
   163ba:	4628      	mov	r0, r5
   163bc:	6819      	ldr	r1, [r3, #0]
   163be:	f003 fe57 	bl	1a070 <strcmp>
   163c2:	2800      	cmp	r0, #0
   163c4:	d1f6      	bne.n	163b4 <z_impl_device_get_binding+0x2c>
}
   163c6:	4620      	mov	r0, r4
   163c8:	bd70      	pop	{r4, r5, r6, pc}
   163ca:	bf00      	nop
   163cc:	20009354 	.word	0x20009354
   163d0:	200092a0 	.word	0x200092a0

000163d4 <z_impl_z_errno>:

Z_SYSCALL_HANDLER0_SIMPLE(z_errno);
#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   163d4:	4b01      	ldr	r3, [pc, #4]	; (163dc <z_impl_z_errno+0x8>)
   163d6:	6898      	ldr	r0, [r3, #8]
}
   163d8:	3054      	adds	r0, #84	; 0x54
   163da:	4770      	bx	lr
   163dc:	20001f8c 	.word	0x20001f8c

000163e0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   163e0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   163e2:	4d0a      	ldr	r5, [pc, #40]	; (1640c <idle+0x2c>)
	__asm__ volatile(
   163e4:	f04f 0220 	mov.w	r2, #32
   163e8:	f3ef 8311 	mrs	r3, BASEPRI
   163ec:	f382 8811 	msr	BASEPRI, r2
	s32_t ticks = z_get_next_timeout_expiry();
   163f0:	f009 fbc3 	bl	1fb7a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   163f4:	2101      	movs	r1, #1
   163f6:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   163f8:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   163fa:	bfd8      	it	le
   163fc:	4608      	movle	r0, r1
   163fe:	f009 fbca 	bl	1fb96 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   16402:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
   16404:	f7f2 f818 	bl	8438 <k_cpu_idle>
   16408:	e7ec      	b.n	163e4 <idle+0x4>
   1640a:	bf00      	nop
   1640c:	20001f8c 	.word	0x20001f8c

00016410 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(&__bss_start, 0,
   16410:	4802      	ldr	r0, [pc, #8]	; (1641c <z_bss_zero+0xc>)
   16412:	4a03      	ldr	r2, [pc, #12]	; (16420 <z_bss_zero+0x10>)
   16414:	2100      	movs	r1, #0
   16416:	1a12      	subs	r2, r2, r0
   16418:	f003 be70 	b.w	1a0fc <memset>
   1641c:	20000000 	.word	0x20000000
   16420:	200025d0 	.word	0x200025d0

00016424 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   16424:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   16426:	4806      	ldr	r0, [pc, #24]	; (16440 <z_data_copy+0x1c>)
   16428:	4a06      	ldr	r2, [pc, #24]	; (16444 <z_data_copy+0x20>)
   1642a:	4907      	ldr	r1, [pc, #28]	; (16448 <z_data_copy+0x24>)
   1642c:	1a12      	subs	r2, r2, r0
   1642e:	f003 fe3b 	bl	1a0a8 <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   16432:	4a06      	ldr	r2, [pc, #24]	; (1644c <z_data_copy+0x28>)
   16434:	4906      	ldr	r1, [pc, #24]	; (16450 <z_data_copy+0x2c>)
   16436:	4807      	ldr	r0, [pc, #28]	; (16454 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 ((u32_t) &_app_smem_end - (u32_t) &_app_smem_start));
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   16438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1643c:	f003 be34 	b.w	1a0a8 <memcpy>
   16440:	20007b28 	.word	0x20007b28
   16444:	2000951c 	.word	0x2000951c
   16448:	00021db6 	.word	0x00021db6
   1644c:	00000000 	.word	0x00000000
   16450:	00021db0 	.word	0x00021db0
   16454:	20000000 	.word	0x20000000

00016458 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   16458:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1645a:	2002      	movs	r0, #2
   1645c:	f7ff ff7e 	bl	1635c <z_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   16460:	4807      	ldr	r0, [pc, #28]	; (16480 <bg_thread_main+0x28>)
   16462:	f001 fe8e 	bl	18182 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   16466:	2003      	movs	r0, #3
   16468:	f7ff ff78 	bl	1635c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   1646c:	f000 fdb6 	bl	16fdc <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   16470:	f7ed f992 	bl	3798 <main>

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   16474:	4a03      	ldr	r2, [pc, #12]	; (16484 <bg_thread_main+0x2c>)
   16476:	7b13      	ldrb	r3, [r2, #12]
   16478:	f023 0301 	bic.w	r3, r3, #1
   1647c:	7313      	strb	r3, [r2, #12]
}
   1647e:	bd08      	pop	{r3, pc}
   16480:	00021d53 	.word	0x00021d53
   16484:	20001f20 	.word	0x20001f20

00016488 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   16488:	b580      	push	{r7, lr}
#if defined(CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT) && \
	defined(CONFIG_USERSPACE)
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1648a:	4b3d      	ldr	r3, [pc, #244]	; (16580 <z_cstart+0xf8>)
   1648c:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1648e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   16492:	4b3c      	ldr	r3, [pc, #240]	; (16584 <z_cstart+0xfc>)
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   16494:	4e3c      	ldr	r6, [pc, #240]	; (16588 <z_cstart+0x100>)
   16496:	695a      	ldr	r2, [r3, #20]
	_kernel.ready_q.cache = _main_thread;
   16498:	4d3c      	ldr	r5, [pc, #240]	; (1658c <z_cstart+0x104>)
   1649a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1649e:	615a      	str	r2, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   164a0:	2400      	movs	r4, #0
   164a2:	22e0      	movs	r2, #224	; 0xe0
   164a4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   164a8:	77dc      	strb	r4, [r3, #31]
   164aa:	761c      	strb	r4, [r3, #24]
   164ac:	765c      	strb	r4, [r3, #25]
   164ae:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   164b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   164b2:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   164b6:	625a      	str	r2, [r3, #36]	; 0x24

static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   164b8:	f7f1 ff2e 	bl	8318 <_FaultInit>
	_CpuIdleInit();
   164bc:	f7f1 ffb6 	bl	842c <_CpuIdleInit>
	struct k_thread dummy_thread = {
   164c0:	ab07      	add	r3, sp, #28
   164c2:	4621      	mov	r1, r4
   164c4:	226c      	movs	r2, #108	; 0x6c
   164c6:	4618      	mov	r0, r3
   164c8:	f003 fe18 	bl	1a0fc <memset>
   164cc:	2701      	movs	r7, #1
	_current = &dummy_thread;
   164ce:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   164d0:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   164d2:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   164d6:	f7ff ff41 	bl	1635c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   164da:	4638      	mov	r0, r7
   164dc:	f7ff ff3e 	bl	1635c <z_sys_device_do_config_level>
	z_sched_init();
   164e0:	f000 fbf8 	bl	16cd4 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
   164e4:	4b2a      	ldr	r3, [pc, #168]	; (16590 <z_cstart+0x108>)
	_kernel.ready_q.cache = _main_thread;
   164e6:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
   164e8:	f44f 7200 	mov.w	r2, #512	; 0x200
   164ec:	e9cd 7304 	strd	r7, r3, [sp, #16]
   164f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   164f4:	e9cd 4400 	strd	r4, r4, [sp]
   164f8:	4b26      	ldr	r3, [pc, #152]	; (16594 <z_cstart+0x10c>)
   164fa:	4927      	ldr	r1, [pc, #156]	; (16598 <z_cstart+0x110>)
   164fc:	4628      	mov	r0, r5
   164fe:	f000 fd23 	bl	16f48 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16502:	7b6b      	ldrb	r3, [r5, #13]
   16504:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   16508:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1650c:	736a      	strb	r2, [r5, #13]
	return state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   1650e:	4634      	mov	r4, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   16510:	d104      	bne.n	1651c <z_cstart+0x94>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   16512:	69ab      	ldr	r3, [r5, #24]
   16514:	b913      	cbnz	r3, 1651c <z_cstart+0x94>
		z_add_thread_to_ready_q(thread);
   16516:	4628      	mov	r0, r5
   16518:	f000 fa50 	bl	169bc <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   1651c:	4b1f      	ldr	r3, [pc, #124]	; (1659c <z_cstart+0x114>)
   1651e:	4e20      	ldr	r6, [pc, #128]	; (165a0 <z_cstart+0x118>)
   16520:	9305      	str	r3, [sp, #20]
   16522:	2201      	movs	r2, #1
   16524:	230f      	movs	r3, #15
   16526:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1652a:	2300      	movs	r3, #0
   1652c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16530:	491c      	ldr	r1, [pc, #112]	; (165a4 <z_cstart+0x11c>)
   16532:	9300      	str	r3, [sp, #0]
   16534:	4630      	mov	r0, r6
   16536:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1653a:	4b1b      	ldr	r3, [pc, #108]	; (165a8 <z_cstart+0x120>)
   1653c:	f000 fd04 	bl	16f48 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16540:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
   16542:	60e6      	str	r6, [r4, #12]
   16544:	f023 0304 	bic.w	r3, r3, #4
   16548:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1654a:	4b18      	ldr	r3, [pc, #96]	; (165ac <z_cstart+0x124>)
	list->tail = (sys_dnode_t *)list;
   1654c:	e9c4 3306 	strd	r3, r3, [r4, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
   16550:	f7f2 f85a 	bl	8608 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
   16554:	480d      	ldr	r0, [pc, #52]	; (1658c <z_cstart+0x104>)
	_current = main_thread;
   16556:	60a5      	str	r5, [r4, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
   16558:	f003 fcfb 	bl	19f52 <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1655c:	4b0d      	ldr	r3, [pc, #52]	; (16594 <z_cstart+0x10c>)
   1655e:	4a14      	ldr	r2, [pc, #80]	; (165b0 <z_cstart+0x128>)
   16560:	4618      	mov	r0, r3
   16562:	f382 8809 	msr	PSP, r2
   16566:	b663      	cpsie	if
   16568:	f04f 0100 	mov.w	r1, #0
   1656c:	f381 8811 	msr	BASEPRI, r1
   16570:	f3bf 8f6f 	isb	sy
   16574:	2100      	movs	r1, #0
   16576:	2200      	movs	r2, #0
   16578:	2300      	movs	r3, #0
   1657a:	f001 fc65 	bl	17e48 <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
   1657e:	bf00      	nop
   16580:	20004ca0 	.word	0x20004ca0
   16584:	e000ed00 	.word	0xe000ed00
   16588:	20001f8c 	.word	0x20001f8c
   1658c:	20001f20 	.word	0x20001f20
   16590:	00021d91 	.word	0x00021d91
   16594:	00016459 	.word	0x00016459
   16598:	20004160 	.word	0x20004160
   1659c:	00021d96 	.word	0x00021d96
   165a0:	20001eb4 	.word	0x20001eb4
   165a4:	20004360 	.word	0x20004360
   165a8:	000163e1 	.word	0x000163e1
   165ac:	20001fa4 	.word	0x20001fa4
   165b0:	20004360 	.word	0x20004360

000165b4 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   165b4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   165b6:	4c07      	ldr	r4, [pc, #28]	; (165d4 <init_static_pools+0x20>)
   165b8:	4d07      	ldr	r5, [pc, #28]	; (165d8 <init_static_pools+0x24>)
   165ba:	42ac      	cmp	r4, r5
   165bc:	d301      	bcc.n	165c2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   165be:	2000      	movs	r0, #0
   165c0:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   165c2:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   165c6:	4620      	mov	r0, r4
   165c8:	e9c4 3305 	strd	r3, r3, [r4, #20]
   165cc:	f001 fa6d 	bl	17aaa <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   165d0:	341c      	adds	r4, #28
   165d2:	e7f2      	b.n	165ba <init_static_pools+0x6>
   165d4:	20009404 	.word	0x20009404
   165d8:	20009404 	.word	0x20009404

000165dc <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   165dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   165e0:	1e1e      	subs	r6, r3, #0
{
   165e2:	4680      	mov	r8, r0
   165e4:	460c      	mov	r4, r1
   165e6:	4691      	mov	r9, r2
	if (timeout > 0) {
   165e8:	dd52      	ble.n	16690 <k_mem_pool_alloc+0xb4>
		end = z_tick_get() + z_ms_to_ticks(timeout);
   165ea:	f000 feb9 	bl	17360 <z_tick_get>
   165ee:	4605      	mov	r5, r0
	return (s32_t)ceiling_fraction(
   165f0:	4828      	ldr	r0, [pc, #160]	; (16694 <k_mem_pool_alloc+0xb8>)
   165f2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   165f6:	2100      	movs	r1, #0
   165f8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   165fc:	2300      	movs	r3, #0
   165fe:	fbc7 0106 	smlal	r0, r1, r7, r6
   16602:	f7ea facb 	bl	b9c <__aeabi_ldivmod>
   16606:	1945      	adds	r5, r0, r5
	return pool - &_k_mem_pool_list_start[0];
   16608:	4b23      	ldr	r3, [pc, #140]	; (16698 <k_mem_pool_alloc+0xbc>)
   1660a:	4f24      	ldr	r7, [pc, #144]	; (1669c <k_mem_pool_alloc+0xc0>)
   1660c:	eba8 0303 	sub.w	r3, r8, r3
   16610:	109b      	asrs	r3, r3, #2
   16612:	435f      	muls	r7, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   16614:	b2ff      	uxtb	r7, r7
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   16616:	f108 0a14 	add.w	sl, r8, #20
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1661a:	9400      	str	r4, [sp, #0]
   1661c:	ab03      	add	r3, sp, #12
   1661e:	aa02      	add	r2, sp, #8
   16620:	4649      	mov	r1, r9
   16622:	4640      	mov	r0, r8
   16624:	f001 fa8b 	bl	17b3e <z_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   16628:	f110 0f0b 	cmn.w	r0, #11
   1662c:	d10b      	bne.n	16646 <k_mem_pool_alloc+0x6a>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
   1662e:	9400      	str	r4, [sp, #0]
   16630:	ab03      	add	r3, sp, #12
   16632:	aa02      	add	r2, sp, #8
   16634:	4649      	mov	r1, r9
   16636:	4640      	mov	r0, r8
   16638:	f001 fa81 	bl	17b3e <z_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   1663c:	f110 0f0b 	cmn.w	r0, #11
   16640:	bf08      	it	eq
   16642:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   16646:	7963      	ldrb	r3, [r4, #5]
   16648:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1664a:	7127      	strb	r7, [r4, #4]
		block->id.level = level_num;
   1664c:	f362 0303 	bfi	r3, r2, #0, #4
   16650:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   16652:	6863      	ldr	r3, [r4, #4]
   16654:	9a03      	ldr	r2, [sp, #12]
   16656:	f362 331f 	bfi	r3, r2, #12, #20
   1665a:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1665c:	b1a8      	cbz	r0, 1668a <k_mem_pool_alloc+0xae>
   1665e:	b1a6      	cbz	r6, 1668a <k_mem_pool_alloc+0xae>
   16660:	f110 0f0c 	cmn.w	r0, #12
   16664:	d111      	bne.n	1668a <k_mem_pool_alloc+0xae>
   16666:	f04f 0320 	mov.w	r3, #32
   1666a:	f3ef 8011 	mrs	r0, BASEPRI
   1666e:	f383 8811 	msr	BASEPRI, r3
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   16672:	4632      	mov	r2, r6
   16674:	4651      	mov	r1, sl
   16676:	f000 faad 	bl	16bd4 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   1667a:	1c73      	adds	r3, r6, #1
   1667c:	d0cd      	beq.n	1661a <k_mem_pool_alloc+0x3e>
			timeout = end - z_tick_get();
   1667e:	f000 fe6f 	bl	17360 <z_tick_get>

			if (timeout < 0) {
   16682:	1a2e      	subs	r6, r5, r0
   16684:	d5c9      	bpl.n	1661a <k_mem_pool_alloc+0x3e>
				break;
			}
		}
	}

	return -EAGAIN;
   16686:	f06f 000a 	mvn.w	r0, #10
}
   1668a:	b004      	add	sp, #16
   1668c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	s64_t end = 0;
   16690:	2500      	movs	r5, #0
   16692:	e7b9      	b.n	16608 <k_mem_pool_alloc+0x2c>
   16694:	0004ffff 	.word	0x0004ffff
   16698:	20009404 	.word	0x20009404
   1669c:	b6db6db7 	.word	0xb6db6db7

000166a0 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   166a0:	b570      	push	{r4, r5, r6, lr}
   166a2:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   166a4:	6802      	ldr	r2, [r0, #0]
   166a6:	7841      	ldrb	r1, [r0, #1]
   166a8:	4e10      	ldr	r6, [pc, #64]	; (166ec <k_mem_pool_free_id+0x4c>)
   166aa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   166ae:	00a4      	lsls	r4, r4, #2
   166b0:	0b12      	lsrs	r2, r2, #12
   166b2:	f001 010f 	and.w	r1, r1, #15
   166b6:	1930      	adds	r0, r6, r4
   166b8:	f001 fb17 	bl	17cea <z_sys_mem_pool_block_free>
   166bc:	f04f 0320 	mov.w	r3, #32
   166c0:	f3ef 8511 	mrs	r5, BASEPRI
   166c4:	f383 8811 	msr	BASEPRI, r3
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   166c8:	f104 0014 	add.w	r0, r4, #20
   166cc:	4430      	add	r0, r6
   166ce:	f009 f975 	bl	1f9bc <z_unpend_all>

	if (need_sched) {
   166d2:	b128      	cbz	r0, 166e0 <k_mem_pool_free_id+0x40>
		z_reschedule(&lock, key);
   166d4:	4629      	mov	r1, r5
   166d6:	4806      	ldr	r0, [pc, #24]	; (166f0 <k_mem_pool_free_id+0x50>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
   166d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   166dc:	f009 b8cf 	b.w	1f87e <z_reschedule>
	__asm__ volatile(
   166e0:	f385 8811 	msr	BASEPRI, r5
   166e4:	f3bf 8f6f 	isb	sy
}
   166e8:	bd70      	pop	{r4, r5, r6, pc}
   166ea:	bf00      	nop
   166ec:	20009404 	.word	0x20009404
   166f0:	200025cd 	.word	0x200025cd

000166f4 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   166f4:	4b03      	ldr	r3, [pc, #12]	; (16704 <z_thread_malloc+0x10>)
   166f6:	689b      	ldr	r3, [r3, #8]
{
   166f8:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   166fa:	6e18      	ldr	r0, [r3, #96]	; 0x60
   166fc:	b108      	cbz	r0, 16702 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   166fe:	f008 bf6a 	b.w	1f5d6 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   16702:	4770      	bx	lr
   16704:	20001f8c 	.word	0x20001f8c

00016708 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   16708:	b570      	push	{r4, r5, r6, lr}
   1670a:	460d      	mov	r5, r1
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1670c:	4932      	ldr	r1, [pc, #200]	; (167d8 <z_impl_k_mutex_lock+0xd0>)
   1670e:	688b      	ldr	r3, [r1, #8]
   16710:	7bda      	ldrb	r2, [r3, #15]
   16712:	3a01      	subs	r2, #1
   16714:	4604      	mov	r4, r0
   16716:	73da      	strb	r2, [r3, #15]
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   16718:	68c2      	ldr	r2, [r0, #12]
   1671a:	4608      	mov	r0, r1
   1671c:	b14a      	cbz	r2, 16732 <z_impl_k_mutex_lock+0x2a>
   1671e:	68a3      	ldr	r3, [r4, #8]
   16720:	6889      	ldr	r1, [r1, #8]
   16722:	428b      	cmp	r3, r1
   16724:	d012      	beq.n	1674c <z_impl_k_mutex_lock+0x44>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   16726:	b99d      	cbnz	r5, 16750 <z_impl_k_mutex_lock+0x48>
		k_sched_unlock();
   16728:	f000 f92e 	bl	16988 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1672c:	f06f 050f 	mvn.w	r5, #15
   16730:	e00a      	b.n	16748 <z_impl_k_mutex_lock+0x40>
					_current->base.prio :
   16732:	688b      	ldr	r3, [r1, #8]
   16734:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   16738:	6123      	str	r3, [r4, #16]
		mutex->lock_count++;
   1673a:	3201      	adds	r2, #1
		mutex->owner = _current;
   1673c:	6883      	ldr	r3, [r0, #8]
		mutex->lock_count++;
   1673e:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
   16740:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
   16742:	f000 f921 	bl	16988 <k_sched_unlock>
		return 0;
   16746:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   16748:	4628      	mov	r0, r5
   1674a:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   1674c:	6923      	ldr	r3, [r4, #16]
   1674e:	e7f3      	b.n	16738 <z_impl_k_mutex_lock+0x30>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   16750:	f991 100e 	ldrsb.w	r1, [r1, #14]
   16754:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16758:	4299      	cmp	r1, r3
   1675a:	bfa8      	it	ge
   1675c:	4619      	movge	r1, r3
   1675e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	__asm__ volatile(
   16762:	f04f 0320 	mov.w	r3, #32
   16766:	f3ef 8611 	mrs	r6, BASEPRI
   1676a:	f383 8811 	msr	BASEPRI, r3
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1676e:	68a0      	ldr	r0, [r4, #8]
   16770:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16774:	4299      	cmp	r1, r3
   16776:	da01      	bge.n	1677c <z_impl_k_mutex_lock+0x74>
		z_thread_priority_set(mutex->owner, new_prio);
   16778:	f000 fa62 	bl	16c40 <z_thread_priority_set>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1677c:	462b      	mov	r3, r5
   1677e:	4622      	mov	r2, r4
   16780:	4631      	mov	r1, r6
   16782:	4816      	ldr	r0, [pc, #88]	; (167dc <z_impl_k_mutex_lock+0xd4>)
   16784:	f000 fa48 	bl	16c18 <z_pend_curr>
	if (got_mutex == 0) {
   16788:	4605      	mov	r5, r0
   1678a:	b910      	cbnz	r0, 16792 <z_impl_k_mutex_lock+0x8a>
		k_sched_unlock();
   1678c:	f000 f8fc 	bl	16988 <k_sched_unlock>
		return 0;
   16790:	e7da      	b.n	16748 <z_impl_k_mutex_lock+0x40>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   16792:	6823      	ldr	r3, [r4, #0]
   16794:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16796:	429c      	cmp	r4, r3
   16798:	d007      	beq.n	167aa <z_impl_k_mutex_lock+0xa2>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   1679a:	b133      	cbz	r3, 167aa <z_impl_k_mutex_lock+0xa2>
   1679c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   167a0:	4299      	cmp	r1, r3
   167a2:	bfa8      	it	ge
   167a4:	4619      	movge	r1, r3
   167a6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   167aa:	f04f 0320 	mov.w	r3, #32
   167ae:	f3ef 8511 	mrs	r5, BASEPRI
   167b2:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, new_prio);
   167b6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   167b8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   167bc:	4299      	cmp	r1, r3
   167be:	d001      	beq.n	167c4 <z_impl_k_mutex_lock+0xbc>
		z_thread_priority_set(mutex->owner, new_prio);
   167c0:	f000 fa3e 	bl	16c40 <z_thread_priority_set>
	__asm__ volatile(
   167c4:	f385 8811 	msr	BASEPRI, r5
   167c8:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
   167cc:	f000 f8dc 	bl	16988 <k_sched_unlock>
	return -EAGAIN;
   167d0:	f06f 050a 	mvn.w	r5, #10
   167d4:	e7b8      	b.n	16748 <z_impl_k_mutex_lock+0x40>
   167d6:	bf00      	nop
   167d8:	20001f8c 	.word	0x20001f8c
   167dc:	200025cd 	.word	0x200025cd

000167e0 <z_impl_k_mutex_unlock>:
   167e0:	4b1d      	ldr	r3, [pc, #116]	; (16858 <z_impl_k_mutex_unlock+0x78>)
   167e2:	689a      	ldr	r2, [r3, #8]
   167e4:	7bd3      	ldrb	r3, [r2, #15]
   167e6:	3b01      	subs	r3, #1
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   167e8:	b570      	push	{r4, r5, r6, lr}
   167ea:	4604      	mov	r4, r0
   167ec:	73d3      	strb	r3, [r2, #15]
	RECORD_STATE_CHANGE();


	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   167ee:	68c3      	ldr	r3, [r0, #12]
   167f0:	2b01      	cmp	r3, #1
   167f2:	d005      	beq.n	16800 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
   167f4:	3b01      	subs	r3, #1
   167f6:	60c3      	str	r3, [r0, #12]
	}


k_mutex_unlock_return:
	k_sched_unlock();
}
   167f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   167fc:	f000 b8c4 	b.w	16988 <k_sched_unlock>
	__asm__ volatile(
   16800:	f04f 0320 	mov.w	r3, #32
   16804:	f3ef 8611 	mrs	r6, BASEPRI
   16808:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1680c:	6901      	ldr	r1, [r0, #16]
   1680e:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   16810:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16814:	4299      	cmp	r1, r3
   16816:	d001      	beq.n	1681c <z_impl_k_mutex_unlock+0x3c>
		z_thread_priority_set(mutex->owner, new_prio);
   16818:	f000 fa12 	bl	16c40 <z_thread_priority_set>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1681c:	4620      	mov	r0, r4
   1681e:	f009 f8a4 	bl	1f96a <z_unpend_first_thread>
   16822:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   16824:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   16826:	b180      	cbz	r0, 1684a <z_impl_k_mutex_unlock+0x6a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   16828:	7b43      	ldrb	r3, [r0, #13]
   1682a:	06db      	lsls	r3, r3, #27
   1682c:	d103      	bne.n	16836 <z_impl_k_mutex_unlock+0x56>
	if (z_is_thread_ready(thread)) {
   1682e:	6983      	ldr	r3, [r0, #24]
   16830:	b90b      	cbnz	r3, 16836 <z_impl_k_mutex_unlock+0x56>
		z_add_thread_to_ready_q(thread);
   16832:	f000 f8c3 	bl	169bc <z_add_thread_to_ready_q>
	__asm__ volatile(
   16836:	f386 8811 	msr	BASEPRI, r6
   1683a:	f3bf 8f6f 	isb	sy
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1683e:	2300      	movs	r3, #0
   16840:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   16842:	f995 300e 	ldrsb.w	r3, [r5, #14]
   16846:	6123      	str	r3, [r4, #16]
   16848:	e7d6      	b.n	167f8 <z_impl_k_mutex_unlock+0x18>
		mutex->lock_count = 0;
   1684a:	60e0      	str	r0, [r4, #12]
   1684c:	f386 8811 	msr	BASEPRI, r6
   16850:	f3bf 8f6f 	isb	sy
   16854:	e7d0      	b.n	167f8 <z_impl_k_mutex_unlock+0x18>
   16856:	bf00      	nop
   16858:	20001f8c 	.word	0x20001f8c

0001685c <resched>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1685c:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   16860:	280d      	cmp	r0, #13
   16862:	d809      	bhi.n	16878 <resched+0x1c>
   16864:	b128      	cbz	r0, 16872 <resched+0x16>
   16866:	4b05      	ldr	r3, [pc, #20]	; (1687c <resched+0x20>)
   16868:	6858      	ldr	r0, [r3, #4]
   1686a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   1686e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
   16872:	f080 0001 	eor.w	r0, r0, #1
   16876:	4770      	bx	lr
   16878:	2001      	movs	r0, #1
   1687a:	e7fa      	b.n	16872 <resched+0x16>
   1687c:	e000ed00 	.word	0xe000ed00

00016880 <reset_time_slice>:
{
   16880:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   16882:	f7f1 fb5f 	bl	7f44 <z_clock_elapsed>
   16886:	4b05      	ldr	r3, [pc, #20]	; (1689c <reset_time_slice+0x1c>)
   16888:	4a05      	ldr	r2, [pc, #20]	; (168a0 <reset_time_slice+0x20>)
   1688a:	681b      	ldr	r3, [r3, #0]
   1688c:	4418      	add	r0, r3
   1688e:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
   16890:	2100      	movs	r1, #0
   16892:	4618      	mov	r0, r3
}
   16894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
   16898:	f009 b97d 	b.w	1fb96 <z_set_timeout_expiry>
   1689c:	20001fc4 	.word	0x20001fc4
   168a0:	20001f8c 	.word	0x20001f8c

000168a4 <k_sched_time_slice_set>:
{
   168a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   168a6:	460d      	mov	r5, r1
	__asm__ volatile(
   168a8:	f04f 0320 	mov.w	r3, #32
   168ac:	f3ef 8411 	mrs	r4, BASEPRI
   168b0:	f383 8811 	msr	BASEPRI, r3
   168b4:	4e0d      	ldr	r6, [pc, #52]	; (168ec <k_sched_time_slice_set+0x48>)
		_current_cpu->slice_ticks = 0;
   168b6:	4b0e      	ldr	r3, [pc, #56]	; (168f0 <k_sched_time_slice_set+0x4c>)
   168b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   168bc:	2700      	movs	r7, #0
   168be:	fbc1 6700 	smlal	r6, r7, r1, r0
   168c2:	2200      	movs	r2, #0
   168c4:	611a      	str	r2, [r3, #16]
   168c6:	4630      	mov	r0, r6
   168c8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   168cc:	2300      	movs	r3, #0
   168ce:	4639      	mov	r1, r7
   168d0:	f7ea f964 	bl	b9c <__aeabi_ldivmod>
   168d4:	4b07      	ldr	r3, [pc, #28]	; (168f4 <k_sched_time_slice_set+0x50>)
   168d6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   168d8:	4b07      	ldr	r3, [pc, #28]	; (168f8 <k_sched_time_slice_set+0x54>)
   168da:	601d      	str	r5, [r3, #0]
		reset_time_slice();
   168dc:	f7ff ffd0 	bl	16880 <reset_time_slice>
	__asm__ volatile(
   168e0:	f384 8811 	msr	BASEPRI, r4
   168e4:	f3bf 8f6f 	isb	sy
}
   168e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   168ea:	bf00      	nop
   168ec:	0004ffff 	.word	0x0004ffff
   168f0:	20001f8c 	.word	0x20001f8c
   168f4:	20001fc4 	.word	0x20001fc4
   168f8:	20001fc0 	.word	0x20001fc0

000168fc <k_sched_lock>:
	__asm__ volatile(
   168fc:	f04f 0320 	mov.w	r3, #32
   16900:	f3ef 8111 	mrs	r1, BASEPRI
   16904:	f383 8811 	msr	BASEPRI, r3
	--_current->base.sched_locked;
   16908:	4b04      	ldr	r3, [pc, #16]	; (1691c <k_sched_lock+0x20>)
   1690a:	689a      	ldr	r2, [r3, #8]
   1690c:	7bd3      	ldrb	r3, [r2, #15]
   1690e:	3b01      	subs	r3, #1
   16910:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   16912:	f381 8811 	msr	BASEPRI, r1
   16916:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1691a:	4770      	bx	lr
   1691c:	20001f8c 	.word	0x20001f8c

00016920 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   16920:	4b09      	ldr	r3, [pc, #36]	; (16948 <z_priq_dumb_remove+0x28>)
   16922:	f103 0228 	add.w	r2, r3, #40	; 0x28
   16926:	4282      	cmp	r2, r0
   16928:	d105      	bne.n	16936 <z_priq_dumb_remove+0x16>
   1692a:	689b      	ldr	r3, [r3, #8]
   1692c:	428b      	cmp	r3, r1
   1692e:	d102      	bne.n	16936 <z_priq_dumb_remove+0x16>
   16930:	7b4b      	ldrb	r3, [r1, #13]
   16932:	06db      	lsls	r3, r3, #27
   16934:	d106      	bne.n	16944 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   16936:	e9d1 3200 	ldrd	r3, r2, [r1]
   1693a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1693c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1693e:	2300      	movs	r3, #0
	node->prev = NULL;
   16940:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   16944:	4770      	bx	lr
   16946:	bf00      	nop
   16948:	20001f8c 	.word	0x20001f8c

0001694c <update_cache>:
{
   1694c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   1694e:	4c0d      	ldr	r4, [pc, #52]	; (16984 <update_cache+0x38>)
{
   16950:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   16952:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16956:	f008 ffd3 	bl	1f900 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   1695a:	4605      	mov	r5, r0
   1695c:	b900      	cbnz	r0, 16960 <update_cache+0x14>
   1695e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   16960:	68a3      	ldr	r3, [r4, #8]
   16962:	b94a      	cbnz	r2, 16978 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   16964:	7b5a      	ldrb	r2, [r3, #13]
   16966:	06d2      	lsls	r2, r2, #27
   16968:	d106      	bne.n	16978 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1696a:	69aa      	ldr	r2, [r5, #24]
   1696c:	b922      	cbnz	r2, 16978 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
   1696e:	89da      	ldrh	r2, [r3, #14]
   16970:	2a7f      	cmp	r2, #127	; 0x7f
   16972:	d901      	bls.n	16978 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   16974:	6263      	str	r3, [r4, #36]	; 0x24
}
   16976:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   16978:	429d      	cmp	r5, r3
   1697a:	d001      	beq.n	16980 <update_cache+0x34>
			reset_time_slice();
   1697c:	f7ff ff80 	bl	16880 <reset_time_slice>
		_kernel.ready_q.cache = th;
   16980:	6265      	str	r5, [r4, #36]	; 0x24
}
   16982:	e7f8      	b.n	16976 <update_cache+0x2a>
   16984:	20001f8c 	.word	0x20001f8c

00016988 <k_sched_unlock>:
{
   16988:	b510      	push	{r4, lr}
	__asm__ volatile(
   1698a:	f04f 0320 	mov.w	r3, #32
   1698e:	f3ef 8411 	mrs	r4, BASEPRI
   16992:	f383 8811 	msr	BASEPRI, r3
		++_current->base.sched_locked;
   16996:	4b08      	ldr	r3, [pc, #32]	; (169b8 <k_sched_unlock+0x30>)
   16998:	689a      	ldr	r2, [r3, #8]
   1699a:	7bd3      	ldrb	r3, [r2, #15]
   1699c:	3301      	adds	r3, #1
   1699e:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
   169a0:	2001      	movs	r0, #1
   169a2:	f7ff ffd3 	bl	1694c <update_cache>
	__asm__ volatile(
   169a6:	f384 8811 	msr	BASEPRI, r4
   169aa:	f3bf 8f6f 	isb	sy
}
   169ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   169b2:	f008 bf81 	b.w	1f8b8 <z_reschedule_unlocked>
   169b6:	bf00      	nop
   169b8:	20001f8c 	.word	0x20001f8c

000169bc <z_add_thread_to_ready_q>:
{
   169bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   169be:	f04f 0320 	mov.w	r3, #32
   169c2:	f3ef 8411 	mrs	r4, BASEPRI
   169c6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   169ca:	4a15      	ldr	r2, [pc, #84]	; (16a20 <z_add_thread_to_ready_q+0x64>)
   169cc:	4611      	mov	r1, r2
   169ce:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   169d2:	428b      	cmp	r3, r1
   169d4:	d01d      	beq.n	16a12 <z_add_thread_to_ready_q+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   169d6:	b1e3      	cbz	r3, 16a12 <z_add_thread_to_ready_q+0x56>
   169d8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   169da:	f990 500e 	ldrsb.w	r5, [r0, #14]
   169de:	f993 700e 	ldrsb.w	r7, [r3, #14]
   169e2:	42af      	cmp	r7, r5
   169e4:	dd10      	ble.n	16a08 <z_add_thread_to_ready_q+0x4c>
	node->prev = successor->prev;
   169e6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   169e8:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   169ec:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   169ee:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   169f0:	7b43      	ldrb	r3, [r0, #13]
   169f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   169f6:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   169f8:	2000      	movs	r0, #0
   169fa:	f7ff ffa7 	bl	1694c <update_cache>
	__asm__ volatile(
   169fe:	f384 8811 	msr	BASEPRI, r4
   16a02:	f3bf 8f6f 	isb	sy
}
   16a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   16a08:	42b3      	cmp	r3, r6
   16a0a:	d002      	beq.n	16a12 <z_add_thread_to_ready_q+0x56>
   16a0c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16a0e:	2b00      	cmp	r3, #0
   16a10:	d1e5      	bne.n	169de <z_add_thread_to_ready_q+0x22>
	node->prev = list->tail;
   16a12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   16a14:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   16a16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   16a18:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
   16a1a:	6018      	str	r0, [r3, #0]
	list->tail = node;
   16a1c:	62d0      	str	r0, [r2, #44]	; 0x2c
   16a1e:	e7e7      	b.n	169f0 <z_add_thread_to_ready_q+0x34>
   16a20:	20001f8c 	.word	0x20001f8c

00016a24 <z_move_thread_to_end_of_prio_q>:
{
   16a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a26:	4604      	mov	r4, r0
	__asm__ volatile(
   16a28:	f04f 0320 	mov.w	r3, #32
   16a2c:	f3ef 8711 	mrs	r7, BASEPRI
   16a30:	f383 8811 	msr	BASEPRI, r3
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   16a34:	4d19      	ldr	r5, [pc, #100]	; (16a9c <z_move_thread_to_end_of_prio_q+0x78>)
   16a36:	f105 0628 	add.w	r6, r5, #40	; 0x28
   16a3a:	4601      	mov	r1, r0
   16a3c:	4630      	mov	r0, r6
   16a3e:	f7ff ff6f 	bl	16920 <z_priq_dumb_remove>
	return list->head == list;
   16a42:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16a44:	42b3      	cmp	r3, r6
   16a46:	462a      	mov	r2, r5
   16a48:	d020      	beq.n	16a8c <z_move_thread_to_end_of_prio_q+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16a4a:	b1fb      	cbz	r3, 16a8c <z_move_thread_to_end_of_prio_q+0x68>
   16a4c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   16a4e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   16a52:	f993 500e 	ldrsb.w	r5, [r3, #14]
   16a56:	428d      	cmp	r5, r1
   16a58:	dd13      	ble.n	16a82 <z_move_thread_to_end_of_prio_q+0x5e>
	node->prev = successor->prev;
   16a5a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   16a5c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   16a60:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   16a62:	605c      	str	r4, [r3, #4]
   16a64:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   16a66:	6890      	ldr	r0, [r2, #8]
   16a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16a6c:	7363      	strb	r3, [r4, #13]
   16a6e:	1b03      	subs	r3, r0, r4
   16a70:	4258      	negs	r0, r3
   16a72:	4158      	adcs	r0, r3
   16a74:	f7ff ff6a 	bl	1694c <update_cache>
	__asm__ volatile(
   16a78:	f387 8811 	msr	BASEPRI, r7
   16a7c:	f3bf 8f6f 	isb	sy
}
   16a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   16a82:	4283      	cmp	r3, r0
   16a84:	d002      	beq.n	16a8c <z_move_thread_to_end_of_prio_q+0x68>
   16a86:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16a88:	2b00      	cmp	r3, #0
   16a8a:	d1e2      	bne.n	16a52 <z_move_thread_to_end_of_prio_q+0x2e>
	node->prev = list->tail;
   16a8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   16a8e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   16a90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   16a92:	6026      	str	r6, [r4, #0]
	list->tail->next = node;
   16a94:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16a96:	62d4      	str	r4, [r2, #44]	; 0x2c
   16a98:	e7e4      	b.n	16a64 <z_move_thread_to_end_of_prio_q+0x40>
   16a9a:	bf00      	nop
   16a9c:	20001f8c 	.word	0x20001f8c

00016aa0 <z_time_slice>:
	if (pending_current == _current) {
   16aa0:	4914      	ldr	r1, [pc, #80]	; (16af4 <z_time_slice+0x54>)
   16aa2:	4a15      	ldr	r2, [pc, #84]	; (16af8 <z_time_slice+0x58>)
   16aa4:	688b      	ldr	r3, [r1, #8]
{
   16aa6:	b510      	push	{r4, lr}
	if (pending_current == _current) {
   16aa8:	6814      	ldr	r4, [r2, #0]
   16aaa:	42a3      	cmp	r3, r4
   16aac:	d103      	bne.n	16ab6 <z_time_slice+0x16>
}
   16aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
   16ab2:	f7ff bee5 	b.w	16880 <reset_time_slice>
	pending_current = NULL;
   16ab6:	2400      	movs	r4, #0
   16ab8:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
   16aba:	4a10      	ldr	r2, [pc, #64]	; (16afc <z_time_slice+0x5c>)
   16abc:	6812      	ldr	r2, [r2, #0]
   16abe:	b1ba      	cbz	r2, 16af0 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   16ac0:	89da      	ldrh	r2, [r3, #14]
   16ac2:	2a7f      	cmp	r2, #127	; 0x7f
   16ac4:	d814      	bhi.n	16af0 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   16ac6:	4a0e      	ldr	r2, [pc, #56]	; (16b00 <z_time_slice+0x60>)
   16ac8:	f993 400e 	ldrsb.w	r4, [r3, #14]
   16acc:	6812      	ldr	r2, [r2, #0]
   16ace:	4294      	cmp	r4, r2
   16ad0:	db0e      	blt.n	16af0 <z_time_slice+0x50>
	return thread == _idle_thread;
   16ad2:	4a0c      	ldr	r2, [pc, #48]	; (16b04 <z_time_slice+0x64>)
		&& !is_idle(t)
   16ad4:	6812      	ldr	r2, [r2, #0]
   16ad6:	4293      	cmp	r3, r2
   16ad8:	d00a      	beq.n	16af0 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
   16ada:	699a      	ldr	r2, [r3, #24]
   16adc:	b942      	cbnz	r2, 16af0 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
   16ade:	690a      	ldr	r2, [r1, #16]
   16ae0:	4282      	cmp	r2, r0
   16ae2:	dc03      	bgt.n	16aec <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   16ae4:	4618      	mov	r0, r3
   16ae6:	f7ff ff9d 	bl	16a24 <z_move_thread_to_end_of_prio_q>
   16aea:	e7e0      	b.n	16aae <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
   16aec:	1a12      	subs	r2, r2, r0
   16aee:	610a      	str	r2, [r1, #16]
}
   16af0:	bd10      	pop	{r4, pc}
   16af2:	bf00      	nop
   16af4:	20001f8c 	.word	0x20001f8c
   16af8:	20001fbc 	.word	0x20001fbc
   16afc:	20001fc4 	.word	0x20001fc4
   16b00:	20001fc0 	.word	0x20001fc0
   16b04:	00020bcc 	.word	0x00020bcc

00016b08 <z_remove_thread_from_ready_q>:
{
   16b08:	b538      	push	{r3, r4, r5, lr}
   16b0a:	4604      	mov	r4, r0
	__asm__ volatile(
   16b0c:	f04f 0320 	mov.w	r3, #32
   16b10:	f3ef 8511 	mrs	r5, BASEPRI
   16b14:	f383 8811 	msr	BASEPRI, r3
		if (z_is_thread_queued(thread)) {
   16b18:	7b43      	ldrb	r3, [r0, #13]
   16b1a:	065a      	lsls	r2, r3, #25
   16b1c:	d507      	bpl.n	16b2e <z_remove_thread_from_ready_q+0x26>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   16b1e:	4601      	mov	r1, r0
   16b20:	4809      	ldr	r0, [pc, #36]	; (16b48 <z_remove_thread_from_ready_q+0x40>)
   16b22:	f7ff fefd 	bl	16920 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   16b26:	7b63      	ldrb	r3, [r4, #13]
   16b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   16b2c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   16b2e:	4b07      	ldr	r3, [pc, #28]	; (16b4c <z_remove_thread_from_ready_q+0x44>)
   16b30:	6898      	ldr	r0, [r3, #8]
   16b32:	1b03      	subs	r3, r0, r4
   16b34:	4258      	negs	r0, r3
   16b36:	4158      	adcs	r0, r3
   16b38:	f7ff ff08 	bl	1694c <update_cache>
	__asm__ volatile(
   16b3c:	f385 8811 	msr	BASEPRI, r5
   16b40:	f3bf 8f6f 	isb	sy
}
   16b44:	bd38      	pop	{r3, r4, r5, pc}
   16b46:	bf00      	nop
   16b48:	20001fb4 	.word	0x20001fb4
   16b4c:	20001f8c 	.word	0x20001f8c

00016b50 <pend>:
{
   16b50:	b570      	push	{r4, r5, r6, lr}
   16b52:	4604      	mov	r4, r0
   16b54:	460d      	mov	r5, r1
   16b56:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   16b58:	f7ff ffd6 	bl	16b08 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   16b5c:	7b63      	ldrb	r3, [r4, #13]
   16b5e:	f043 0302 	orr.w	r3, r3, #2
   16b62:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   16b64:	b17d      	cbz	r5, 16b86 <pend+0x36>
	return list->head == list;
   16b66:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   16b68:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16b6a:	429d      	cmp	r5, r3
   16b6c:	d026      	beq.n	16bbc <pend+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16b6e:	b32b      	cbz	r3, 16bbc <pend+0x6c>
	if (t1->base.prio < t2->base.prio) {
   16b70:	f994 200e 	ldrsb.w	r2, [r4, #14]
   16b74:	f993 100e 	ldrsb.w	r1, [r3, #14]
   16b78:	4291      	cmp	r1, r2
   16b7a:	dd19      	ble.n	16bb0 <pend+0x60>
	node->prev = successor->prev;
   16b7c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   16b7e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   16b82:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   16b84:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   16b86:	1c73      	adds	r3, r6, #1
   16b88:	d01f      	beq.n	16bca <pend+0x7a>
   16b8a:	4810      	ldr	r0, [pc, #64]	; (16bcc <pend+0x7c>)
   16b8c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   16b90:	2100      	movs	r1, #0
   16b92:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16b96:	fbc5 0106 	smlal	r0, r1, r5, r6
   16b9a:	2300      	movs	r3, #0
   16b9c:	f7e9 fffe 	bl	b9c <__aeabi_ldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   16ba0:	490b      	ldr	r1, [pc, #44]	; (16bd0 <pend+0x80>)
   16ba2:	1c42      	adds	r2, r0, #1
   16ba4:	f104 0018 	add.w	r0, r4, #24
}
   16ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16bac:	f000 bb1e 	b.w	171ec <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   16bb0:	6869      	ldr	r1, [r5, #4]
   16bb2:	428b      	cmp	r3, r1
   16bb4:	d002      	beq.n	16bbc <pend+0x6c>
   16bb6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16bb8:	2b00      	cmp	r3, #0
   16bba:	d1db      	bne.n	16b74 <pend+0x24>
	node->prev = list->tail;
   16bbc:	686b      	ldr	r3, [r5, #4]
   16bbe:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   16bc0:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   16bc2:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   16bc4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16bc6:	606c      	str	r4, [r5, #4]
   16bc8:	e7dd      	b.n	16b86 <pend+0x36>
}
   16bca:	bd70      	pop	{r4, r5, r6, pc}
   16bcc:	0004ffff 	.word	0x0004ffff
   16bd0:	0001f90d 	.word	0x0001f90d

00016bd4 <z_pend_curr_irqlock>:
{
   16bd4:	b570      	push	{r4, r5, r6, lr}
	pend(_current, wait_q, timeout);
   16bd6:	4d0e      	ldr	r5, [pc, #56]	; (16c10 <z_pend_curr_irqlock+0x3c>)
	pending_current = _current;
   16bd8:	4c0e      	ldr	r4, [pc, #56]	; (16c14 <z_pend_curr_irqlock+0x40>)
{
   16bda:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   16bdc:	68a8      	ldr	r0, [r5, #8]
   16bde:	f7ff ffb7 	bl	16b50 <pend>
	pending_current = _current;
   16be2:	68ab      	ldr	r3, [r5, #8]
   16be4:	6023      	str	r3, [r4, #0]
   16be6:	4630      	mov	r0, r6
   16be8:	f7f1 f9fa 	bl	7fe0 <__swap>
	__asm__ volatile(
   16bec:	f04f 0220 	mov.w	r2, #32
   16bf0:	f3ef 8311 	mrs	r3, BASEPRI
   16bf4:	f382 8811 	msr	BASEPRI, r2
		if (pending_current == _current) {
   16bf8:	6822      	ldr	r2, [r4, #0]
   16bfa:	68a9      	ldr	r1, [r5, #8]
   16bfc:	4291      	cmp	r1, r2
			pending_current = NULL;
   16bfe:	bf04      	itt	eq
   16c00:	2200      	moveq	r2, #0
   16c02:	6022      	streq	r2, [r4, #0]
	__asm__ volatile(
   16c04:	f383 8811 	msr	BASEPRI, r3
   16c08:	f3bf 8f6f 	isb	sy
}
   16c0c:	bd70      	pop	{r4, r5, r6, pc}
   16c0e:	bf00      	nop
   16c10:	20001f8c 	.word	0x20001f8c
   16c14:	20001fbc 	.word	0x20001fbc

00016c18 <z_pend_curr>:
{
   16c18:	b510      	push	{r4, lr}
   16c1a:	460c      	mov	r4, r1
   16c1c:	4611      	mov	r1, r2
	pending_current = _current;
   16c1e:	4a06      	ldr	r2, [pc, #24]	; (16c38 <z_pend_curr+0x20>)
   16c20:	6890      	ldr	r0, [r2, #8]
   16c22:	4a06      	ldr	r2, [pc, #24]	; (16c3c <z_pend_curr+0x24>)
   16c24:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   16c26:	461a      	mov	r2, r3
   16c28:	f7ff ff92 	bl	16b50 <pend>
   16c2c:	4620      	mov	r0, r4
}
   16c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16c32:	f7f1 b9d5 	b.w	7fe0 <__swap>
   16c36:	bf00      	nop
   16c38:	20001f8c 	.word	0x20001f8c
   16c3c:	20001fbc 	.word	0x20001fbc

00016c40 <z_thread_priority_set>:
{
   16c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16c44:	4604      	mov	r4, r0
	__asm__ volatile(
   16c46:	f04f 0320 	mov.w	r3, #32
   16c4a:	f3ef 8911 	mrs	r9, BASEPRI
   16c4e:	f383 8811 	msr	BASEPRI, r3
		need_sched = z_is_thread_ready(thread);
   16c52:	f008 fddd 	bl	1f810 <z_is_thread_ready>
		if (need_sched) {
   16c56:	b24e      	sxtb	r6, r1
   16c58:	4680      	mov	r8, r0
   16c5a:	2800      	cmp	r0, #0
   16c5c:	d034      	beq.n	16cc8 <z_thread_priority_set+0x88>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   16c5e:	4d1c      	ldr	r5, [pc, #112]	; (16cd0 <z_thread_priority_set+0x90>)
   16c60:	f105 0728 	add.w	r7, r5, #40	; 0x28
   16c64:	4621      	mov	r1, r4
   16c66:	4638      	mov	r0, r7
   16c68:	f7ff fe5a 	bl	16920 <z_priq_dumb_remove>
	return list->head == list;
   16c6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
			thread->base.prio = prio;
   16c6e:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c70:	42bb      	cmp	r3, r7
   16c72:	462a      	mov	r2, r5
   16c74:	d021      	beq.n	16cba <z_thread_priority_set+0x7a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16c76:	b303      	cbz	r3, 16cba <z_thread_priority_set+0x7a>
   16c78:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   16c7a:	f993 000e 	ldrsb.w	r0, [r3, #14]
   16c7e:	42b0      	cmp	r0, r6
   16c80:	dd16      	ble.n	16cb0 <z_thread_priority_set+0x70>
	node->prev = successor->prev;
   16c82:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   16c84:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   16c88:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   16c8a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   16c8c:	2001      	movs	r0, #1
   16c8e:	f7ff fe5d 	bl	1694c <update_cache>
	__asm__ volatile(
   16c92:	f389 8811 	msr	BASEPRI, r9
   16c96:	f3bf 8f6f 	isb	sy
	if (need_sched && _current->base.sched_locked == 0) {
   16c9a:	f1b8 0f00 	cmp.w	r8, #0
   16c9e:	d015      	beq.n	16ccc <z_thread_priority_set+0x8c>
   16ca0:	4b0b      	ldr	r3, [pc, #44]	; (16cd0 <z_thread_priority_set+0x90>)
   16ca2:	689b      	ldr	r3, [r3, #8]
   16ca4:	7bdb      	ldrb	r3, [r3, #15]
   16ca6:	b98b      	cbnz	r3, 16ccc <z_thread_priority_set+0x8c>
}
   16ca8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		z_reschedule_unlocked();
   16cac:	f008 be04 	b.w	1f8b8 <z_reschedule_unlocked>
	return (node == list->tail) ? NULL : node->next;
   16cb0:	4299      	cmp	r1, r3
   16cb2:	d002      	beq.n	16cba <z_thread_priority_set+0x7a>
   16cb4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16cb6:	2b00      	cmp	r3, #0
   16cb8:	d1df      	bne.n	16c7a <z_thread_priority_set+0x3a>
	node->prev = list->tail;
   16cba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   16cbc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   16cbe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   16cc0:	6027      	str	r7, [r4, #0]
	list->tail->next = node;
   16cc2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16cc4:	62d4      	str	r4, [r2, #44]	; 0x2c
   16cc6:	e7e1      	b.n	16c8c <z_thread_priority_set+0x4c>
			thread->base.prio = prio;
   16cc8:	73a6      	strb	r6, [r4, #14]
   16cca:	e7e2      	b.n	16c92 <z_thread_priority_set+0x52>
}
   16ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16cd0:	20001f8c 	.word	0x20001f8c

00016cd4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   16cd4:	4b04      	ldr	r3, [pc, #16]	; (16ce8 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   16cd6:	2100      	movs	r1, #0
   16cd8:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   16cdc:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   16ce0:	4608      	mov	r0, r1
   16ce2:	f7ff bddf 	b.w	168a4 <k_sched_time_slice_set>
   16ce6:	bf00      	nop
   16ce8:	20001f8c 	.word	0x20001f8c

00016cec <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
   16cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!z_is_in_isr(), "");

	if (!is_idle(_current)) {
   16cee:	4c20      	ldr	r4, [pc, #128]	; (16d70 <z_impl_k_yield+0x84>)
   16cf0:	4b20      	ldr	r3, [pc, #128]	; (16d74 <z_impl_k_yield+0x88>)
   16cf2:	68a2      	ldr	r2, [r4, #8]
   16cf4:	681b      	ldr	r3, [r3, #0]
   16cf6:	429a      	cmp	r2, r3
   16cf8:	d023      	beq.n	16d42 <z_impl_k_yield+0x56>
	__asm__ volatile(
   16cfa:	f04f 0320 	mov.w	r3, #32
   16cfe:	f3ef 8611 	mrs	r6, BASEPRI
   16d02:	f383 8811 	msr	BASEPRI, r3
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   16d06:	f104 0528 	add.w	r5, r4, #40	; 0x28
   16d0a:	68a1      	ldr	r1, [r4, #8]
   16d0c:	4628      	mov	r0, r5
   16d0e:	f7ff fe07 	bl	16920 <z_priq_dumb_remove>
	return list->head == list;
   16d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
   16d14:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16d16:	42ab      	cmp	r3, r5
   16d18:	d022      	beq.n	16d60 <z_impl_k_yield+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16d1a:	b30b      	cbz	r3, 16d60 <z_impl_k_yield+0x74>
   16d1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
   16d1e:	f992 000e 	ldrsb.w	r0, [r2, #14]
   16d22:	f993 700e 	ldrsb.w	r7, [r3, #14]
   16d26:	4287      	cmp	r7, r0
   16d28:	dd15      	ble.n	16d56 <z_impl_k_yield+0x6a>
	node->prev = successor->prev;
   16d2a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   16d2c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   16d30:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   16d32:	605a      	str	r2, [r3, #4]
					      _current);
			}
			update_cache(1);
   16d34:	2001      	movs	r0, #1
   16d36:	f7ff fe09 	bl	1694c <update_cache>
	__asm__ volatile(
   16d3a:	f386 8811 	msr	BASEPRI, r6
   16d3e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16d42:	f04f 0320 	mov.w	r3, #32
   16d46:	f3ef 8011 	mrs	r0, BASEPRI
   16d4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	z_swap_unlocked();
}
   16d4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16d52:	f7f1 b945 	b.w	7fe0 <__swap>
	return (node == list->tail) ? NULL : node->next;
   16d56:	4299      	cmp	r1, r3
   16d58:	d002      	beq.n	16d60 <z_impl_k_yield+0x74>
   16d5a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16d5c:	2b00      	cmp	r3, #0
   16d5e:	d1e0      	bne.n	16d22 <z_impl_k_yield+0x36>
	node->prev = list->tail;
   16d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16d62:	6053      	str	r3, [r2, #4]
	list->tail->next = node;
   16d64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	node->next = list;
   16d66:	6015      	str	r5, [r2, #0]
	list->tail->next = node;
   16d68:	601a      	str	r2, [r3, #0]
	list->tail = node;
   16d6a:	62e2      	str	r2, [r4, #44]	; 0x2c
   16d6c:	e7e2      	b.n	16d34 <z_impl_k_yield+0x48>
   16d6e:	bf00      	nop
   16d70:	20001f8c 	.word	0x20001f8c
   16d74:	00020bcc 	.word	0x00020bcc

00016d78 <z_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t z_impl_k_sleep(s32_t duration)
{
   16d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   16d7a:	4604      	mov	r4, r0
   16d7c:	b918      	cbnz	r0, 16d86 <z_impl_k_sleep+0xe>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   16d7e:	f7ff ffb5 	bl	16cec <z_impl_k_yield>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
}
   16d82:	4620      	mov	r0, r4
   16d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16d86:	481a      	ldr	r0, [pc, #104]	; (16df0 <z_impl_k_sleep+0x78>)
   16d88:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   16d8c:	2100      	movs	r1, #0
   16d8e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16d92:	2300      	movs	r3, #0
   16d94:	fbc5 0104 	smlal	r0, r1, r5, r4
   16d98:	f7e9 ff00 	bl	b9c <__aeabi_ldivmod>
	ticks = _TICK_ALIGN + z_ms_to_ticks(duration);
   16d9c:	1c45      	adds	r5, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   16d9e:	f008 ff12 	bl	1fbc6 <z_tick_get_32>
   16da2:	182c      	adds	r4, r5, r0
   16da4:	f04f 0320 	mov.w	r3, #32
   16da8:	f3ef 8711 	mrs	r7, BASEPRI
   16dac:	f383 8811 	msr	BASEPRI, r3
	pending_current = _current;
   16db0:	4e10      	ldr	r6, [pc, #64]	; (16df4 <z_impl_k_sleep+0x7c>)
   16db2:	4b11      	ldr	r3, [pc, #68]	; (16df8 <z_impl_k_sleep+0x80>)
   16db4:	68b0      	ldr	r0, [r6, #8]
   16db6:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   16db8:	f7ff fea6 	bl	16b08 <z_remove_thread_from_ready_q>
   16dbc:	68b0      	ldr	r0, [r6, #8]
   16dbe:	490f      	ldr	r1, [pc, #60]	; (16dfc <z_impl_k_sleep+0x84>)
   16dc0:	462a      	mov	r2, r5
   16dc2:	3018      	adds	r0, #24
   16dc4:	f000 fa12 	bl	171ec <z_add_timeout>
   16dc8:	4638      	mov	r0, r7
   16dca:	f7f1 f909 	bl	7fe0 <__swap>
	ticks = expected_wakeup_time - z_tick_get_32();
   16dce:	f008 fefa 	bl	1fbc6 <z_tick_get_32>
   16dd2:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
   16dd4:	2800      	cmp	r0, #0
   16dd6:	dd09      	ble.n	16dec <z_impl_k_sleep+0x74>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   16dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   16ddc:	2264      	movs	r2, #100	; 0x64
   16dde:	2300      	movs	r3, #0
   16de0:	fb80 0101 	smull	r0, r1, r0, r1
   16de4:	f7e9 ff2a 	bl	c3c <__aeabi_uldivmod>
   16de8:	4604      	mov	r4, r0
		return __ticks_to_ms(ticks);
   16dea:	e7ca      	b.n	16d82 <z_impl_k_sleep+0xa>
	return 0;
   16dec:	2400      	movs	r4, #0
   16dee:	e7c8      	b.n	16d82 <z_impl_k_sleep+0xa>
   16df0:	0004ffff 	.word	0x0004ffff
   16df4:	20001f8c 	.word	0x20001f8c
   16df8:	20001fbc 	.word	0x20001fbc
   16dfc:	0001f90d 	.word	0x0001f90d

00016e00 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   16e00:	4b01      	ldr	r3, [pc, #4]	; (16e08 <z_impl_k_current_get+0x8>)
   16e02:	6898      	ldr	r0, [r3, #8]
   16e04:	4770      	bx	lr
   16e06:	bf00      	nop
   16e08:	20001f8c 	.word	0x20001f8c

00016e0c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   16e0c:	b570      	push	{r4, r5, r6, lr}
   16e0e:	4604      	mov	r4, r0
   16e10:	f04f 0320 	mov.w	r3, #32
   16e14:	f3ef 8611 	mrs	r6, BASEPRI
   16e18:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   16e1c:	f008 fda5 	bl	1f96a <z_unpend_first_thread>
	if (thread != NULL) {
   16e20:	4605      	mov	r5, r0
   16e22:	b170      	cbz	r0, 16e42 <z_impl_k_sem_give+0x36>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   16e24:	7b43      	ldrb	r3, [r0, #13]
   16e26:	06db      	lsls	r3, r3, #27
   16e28:	d103      	bne.n	16e32 <z_impl_k_sem_give+0x26>
	if (z_is_thread_ready(thread)) {
   16e2a:	6983      	ldr	r3, [r0, #24]
   16e2c:	b90b      	cbnz	r3, 16e32 <z_impl_k_sem_give+0x26>
		z_add_thread_to_ready_q(thread);
   16e2e:	f7ff fdc5 	bl	169bc <z_add_thread_to_ready_q>
   16e32:	2300      	movs	r3, #0
   16e34:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   16e36:	4631      	mov	r1, r6
   16e38:	4808      	ldr	r0, [pc, #32]	; (16e5c <z_impl_k_sem_give+0x50>)
}
   16e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   16e3e:	f008 bd1e 	b.w	1f87e <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   16e42:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   16e46:	429a      	cmp	r2, r3
   16e48:	bf18      	it	ne
   16e4a:	3301      	addne	r3, #1
   16e4c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   16e4e:	2102      	movs	r1, #2
   16e50:	f104 0010 	add.w	r0, r4, #16
   16e54:	f008 ff8a 	bl	1fd6c <z_handle_obj_poll_events>
   16e58:	e7ed      	b.n	16e36 <z_impl_k_sem_give+0x2a>
   16e5a:	bf00      	nop
   16e5c:	200025cd 	.word	0x200025cd

00016e60 <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   16e60:	b410      	push	{r4}
   16e62:	4602      	mov	r2, r0
   16e64:	460b      	mov	r3, r1
   16e66:	f04f 0020 	mov.w	r0, #32
   16e6a:	f3ef 8111 	mrs	r1, BASEPRI
   16e6e:	f380 8811 	msr	BASEPRI, r0
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   16e72:	6894      	ldr	r4, [r2, #8]
   16e74:	b144      	cbz	r4, 16e88 <z_impl_k_sem_take+0x28>
		sem->count--;
   16e76:	3c01      	subs	r4, #1
   16e78:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
   16e7a:	f381 8811 	msr	BASEPRI, r1
   16e7e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   16e82:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   16e84:	bc10      	pop	{r4}
   16e86:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   16e88:	b933      	cbnz	r3, 16e98 <z_impl_k_sem_take+0x38>
   16e8a:	f381 8811 	msr	BASEPRI, r1
   16e8e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   16e92:	f06f 000f 	mvn.w	r0, #15
   16e96:	e7f5      	b.n	16e84 <z_impl_k_sem_take+0x24>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   16e98:	4801      	ldr	r0, [pc, #4]	; (16ea0 <z_impl_k_sem_take+0x40>)
}
   16e9a:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   16e9c:	f7ff bebc 	b.w	16c18 <z_pend_curr>
   16ea0:	200025cd 	.word	0x200025cd

00016ea4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   16ea4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   16ea6:	4c08      	ldr	r4, [pc, #32]	; (16ec8 <k_sys_work_q_init+0x24>)
   16ea8:	4908      	ldr	r1, [pc, #32]	; (16ecc <k_sys_work_q_init+0x28>)
   16eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16eb2:	4620      	mov	r0, r4
   16eb4:	f000 f8ee 	bl	17094 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   16eb8:	f104 0010 	add.w	r0, r4, #16
   16ebc:	4904      	ldr	r1, [pc, #16]	; (16ed0 <k_sys_work_q_init+0x2c>)
   16ebe:	f008 fda6 	bl	1fa0e <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   16ec2:	2000      	movs	r0, #0
   16ec4:	bd10      	pop	{r4, pc}
   16ec6:	bf00      	nop
   16ec8:	20001fc8 	.word	0x20001fc8
   16ecc:	20004ca0 	.word	0x20004ca0
   16ed0:	00021d9b 	.word	0x00021d9b

00016ed4 <k_is_in_isr>:
   16ed4:	f3ef 8005 	mrs	r0, IPSR
   16ed8:	280d      	cmp	r0, #13
   16eda:	d807      	bhi.n	16eec <k_is_in_isr+0x18>
   16edc:	b138      	cbz	r0, 16eee <k_is_in_isr+0x1a>
   16ede:	4b04      	ldr	r3, [pc, #16]	; (16ef0 <k_is_in_isr+0x1c>)
   16ee0:	6858      	ldr	r0, [r3, #4]
   16ee2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   16ee6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   16eea:	4770      	bx	lr
   16eec:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
   16eee:	4770      	bx	lr
   16ef0:	e000ed00 	.word	0xe000ed00

00016ef4 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
   16ef4:	4b02      	ldr	r3, [pc, #8]	; (16f00 <z_is_thread_essential+0xc>)
   16ef6:	689b      	ldr	r3, [r3, #8]
   16ef8:	7b18      	ldrb	r0, [r3, #12]
}
   16efa:	f000 0001 	and.w	r0, r0, #1
   16efe:	4770      	bx	lr
   16f00:	20001f8c 	.word	0x20001f8c

00016f04 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   16f04:	b510      	push	{r4, lr}
   16f06:	4602      	mov	r2, r0
	__asm__ volatile(
   16f08:	f04f 0320 	mov.w	r3, #32
   16f0c:	f3ef 8411 	mrs	r4, BASEPRI
   16f10:	f383 8811 	msr	BASEPRI, r3
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   16f14:	7b43      	ldrb	r3, [r0, #13]
   16f16:	0759      	lsls	r1, r3, #29
   16f18:	d404      	bmi.n	16f24 <z_impl_k_thread_start+0x20>
	__asm__ volatile(
   16f1a:	f384 8811 	msr	BASEPRI, r4
   16f1e:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   16f22:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16f24:	f023 0304 	bic.w	r3, r3, #4
   16f28:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   16f2a:	f008 fd66 	bl	1f9fa <z_is_thread_ready>
   16f2e:	b110      	cbz	r0, 16f36 <z_impl_k_thread_start+0x32>
		z_add_thread_to_ready_q(thread);
   16f30:	4610      	mov	r0, r2
   16f32:	f7ff fd43 	bl	169bc <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   16f36:	4621      	mov	r1, r4
   16f38:	4802      	ldr	r0, [pc, #8]	; (16f44 <z_impl_k_thread_start+0x40>)
}
   16f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   16f3e:	f008 bc9e 	b.w	1f87e <z_reschedule>
   16f42:	bf00      	nop
   16f44:	200025cd 	.word	0x200025cd

00016f48 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   16f48:	b530      	push	{r4, r5, lr}
   16f4a:	b087      	sub	sp, #28
   16f4c:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16f4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   16f50:	9504      	str	r5, [sp, #16]
   16f52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   16f54:	9503      	str	r5, [sp, #12]
   16f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   16f58:	9502      	str	r5, [sp, #8]
   16f5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   16f5c:	9501      	str	r5, [sp, #4]
   16f5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16f60:	9500      	str	r5, [sp, #0]
   16f62:	f7f1 fa39 	bl	83d8 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   16f66:	4b03      	ldr	r3, [pc, #12]	; (16f74 <z_setup_new_thread+0x2c>)
   16f68:	689b      	ldr	r3, [r3, #8]
   16f6a:	b103      	cbz	r3, 16f6e <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   16f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   16f6e:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   16f70:	b007      	add	sp, #28
   16f72:	bd30      	pop	{r4, r5, pc}
   16f74:	20001f8c 	.word	0x20001f8c

00016f78 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   16f78:	b570      	push	{r4, r5, r6, lr}
   16f7a:	b086      	sub	sp, #24
	__ASSERT(!z_is_in_isr(), "Threads may not be created in ISRs");

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16f7c:	2600      	movs	r6, #0
   16f7e:	9605      	str	r6, [sp, #20]
   16f80:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   16f82:	9604      	str	r6, [sp, #16]
   16f84:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   16f86:	9603      	str	r6, [sp, #12]
   16f88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   16f8a:	9602      	str	r6, [sp, #8]
   16f8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   16f8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16f90:	9601      	str	r6, [sp, #4]
   16f92:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   16f94:	9600      	str	r6, [sp, #0]
{
   16f96:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   16f98:	f7ff ffd6 	bl	16f48 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
   16f9c:	1c6b      	adds	r3, r5, #1
   16f9e:	d003      	beq.n	16fa8 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
   16fa0:	b92d      	cbnz	r5, 16fae <z_impl_k_thread_create+0x36>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
   16fa2:	4620      	mov	r0, r4
   16fa4:	f7ff ffae 	bl	16f04 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   16fa8:	4620      	mov	r0, r4
   16faa:	b006      	add	sp, #24
   16fac:	bd70      	pop	{r4, r5, r6, pc}
	return (s32_t)ceiling_fraction(
   16fae:	4809      	ldr	r0, [pc, #36]	; (16fd4 <z_impl_k_thread_create+0x5c>)
   16fb0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   16fb4:	2100      	movs	r1, #0
   16fb6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16fba:	2300      	movs	r3, #0
   16fbc:	fbc6 0105 	smlal	r0, r1, r6, r5
   16fc0:	f7e9 fdec 	bl	b9c <__aeabi_ldivmod>
   16fc4:	4904      	ldr	r1, [pc, #16]	; (16fd8 <z_impl_k_thread_create+0x60>)
   16fc6:	1c42      	adds	r2, r0, #1
   16fc8:	f104 0018 	add.w	r0, r4, #24
   16fcc:	f000 f90e 	bl	171ec <z_add_timeout>
   16fd0:	e7ea      	b.n	16fa8 <z_impl_k_thread_create+0x30>
   16fd2:	bf00      	nop
   16fd4:	0004ffff 	.word	0x0004ffff
   16fd8:	0001f90d 	.word	0x0001f90d

00016fdc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   16fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   16fe0:	4e28      	ldr	r6, [pc, #160]	; (17084 <z_init_static_threads+0xa8>)
   16fe2:	4d29      	ldr	r5, [pc, #164]	; (17088 <z_init_static_threads+0xac>)
{
   16fe4:	b087      	sub	sp, #28
   16fe6:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   16fe8:	42b5      	cmp	r5, r6
   16fea:	f105 0430 	add.w	r4, r5, #48	; 0x30
   16fee:	d30f      	bcc.n	17010 <z_init_static_threads+0x34>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   16ff0:	f7ff fc84 	bl	168fc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   16ff4:	4c24      	ldr	r4, [pc, #144]	; (17088 <z_init_static_threads+0xac>)
   16ff6:	4e25      	ldr	r6, [pc, #148]	; (1708c <z_init_static_threads+0xb0>)
   16ff8:	f8df a094 	ldr.w	sl, [pc, #148]	; 17090 <z_init_static_threads+0xb4>
   16ffc:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   17000:	2700      	movs	r7, #0
   17002:	4544      	cmp	r4, r8
   17004:	d321      	bcc.n	1704a <z_init_static_threads+0x6e>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   17006:	b007      	add	sp, #28
   17008:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1700c:	f7ff bcbc 	b.w	16988 <k_sched_unlock>
		z_setup_new_thread(
   17010:	f854 3c04 	ldr.w	r3, [r4, #-4]
   17014:	9305      	str	r3, [sp, #20]
   17016:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1701a:	9304      	str	r3, [sp, #16]
   1701c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   17020:	9303      	str	r3, [sp, #12]
   17022:	f854 3c18 	ldr.w	r3, [r4, #-24]
   17026:	9302      	str	r3, [sp, #8]
   17028:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1702c:	9301      	str	r3, [sp, #4]
   1702e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   17032:	9300      	str	r3, [sp, #0]
   17034:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   17038:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1703c:	f7ff ff84 	bl	16f48 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   17040:	f854 3c30 	ldr.w	r3, [r4, #-48]
   17044:	64dd      	str	r5, [r3, #76]	; 0x4c
   17046:	4625      	mov	r5, r4
   17048:	e7ce      	b.n	16fe8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   1704a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1704c:	1c4b      	adds	r3, r1, #1
   1704e:	d004      	beq.n	1705a <z_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
   17050:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   17052:	b921      	cbnz	r1, 1705e <z_init_static_threads+0x82>
   17054:	4628      	mov	r0, r5
   17056:	f7ff ff55 	bl	16f04 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1705a:	3430      	adds	r4, #48	; 0x30
   1705c:	e7d1      	b.n	17002 <z_init_static_threads+0x26>
   1705e:	46b3      	mov	fp, r6
   17060:	46bc      	mov	ip, r7
   17062:	fbc9 bc01 	smlal	fp, ip, r9, r1
   17066:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1706a:	2300      	movs	r3, #0
   1706c:	4658      	mov	r0, fp
   1706e:	4661      	mov	r1, ip
   17070:	f7e9 fd94 	bl	b9c <__aeabi_ldivmod>
   17074:	4651      	mov	r1, sl
   17076:	1c42      	adds	r2, r0, #1
   17078:	f105 0018 	add.w	r0, r5, #24
   1707c:	f000 f8b6 	bl	171ec <z_add_timeout>
   17080:	e7eb      	b.n	1705a <z_init_static_threads+0x7e>
   17082:	bf00      	nop
   17084:	20009354 	.word	0x20009354
   17088:	20009354 	.word	0x20009354
   1708c:	0004ffff 	.word	0x0004ffff
   17090:	0001f90d 	.word	0x0001f90d

00017094 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   17094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17098:	4605      	mov	r5, r0
   1709a:	b086      	sub	sp, #24
   1709c:	4698      	mov	r8, r3
   1709e:	460e      	mov	r6, r1
   170a0:	4617      	mov	r7, r2
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   170a2:	f105 0410 	add.w	r4, r5, #16
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
   170a6:	f008 fb10 	bl	1f6ca <z_impl_k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
   170aa:	2000      	movs	r0, #0
   170ac:	e9cd 0004 	strd	r0, r0, [sp, #16]
   170b0:	e9cd 0802 	strd	r0, r8, [sp, #8]
   170b4:	e9cd 5000 	strd	r5, r0, [sp]
   170b8:	4631      	mov	r1, r6
   170ba:	4b06      	ldr	r3, [pc, #24]	; (170d4 <k_work_q_start+0x40>)
   170bc:	463a      	mov	r2, r7
   170be:	4620      	mov	r0, r4
   170c0:	f7ff ff5a 	bl	16f78 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
   170c4:	4904      	ldr	r1, [pc, #16]	; (170d8 <k_work_q_start+0x44>)
   170c6:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   170c8:	b006      	add	sp, #24
   170ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   170ce:	f008 bc9e 	b.w	1fa0e <z_impl_k_thread_name_set>
   170d2:	bf00      	nop
   170d4:	00017e5d 	.word	0x00017e5d
   170d8:	00021da4 	.word	0x00021da4

000170dc <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   170dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170e0:	4606      	mov	r6, r0
   170e2:	460d      	mov	r5, r1
   170e4:	4617      	mov	r7, r2
	__asm__ volatile(
   170e6:	f04f 0320 	mov.w	r3, #32
   170ea:	f3ef 8811 	mrs	r8, BASEPRI
   170ee:	f383 8811 	msr	BASEPRI, r3
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
   170f2:	69cc      	ldr	r4, [r1, #28]
   170f4:	b15c      	cbz	r4, 1710e <k_delayed_work_submit_to_queue+0x32>
   170f6:	4284      	cmp	r4, r0
   170f8:	d12b      	bne.n	17152 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   170fa:	4628      	mov	r0, r5
   170fc:	f008 fccc 	bl	1fa98 <work_cancel>
		if (err < 0) {
   17100:	1e04      	subs	r4, r0, #0
   17102:	da06      	bge.n	17112 <k_delayed_work_submit_to_queue+0x36>
	__asm__ volatile(
   17104:	f388 8811 	msr	BASEPRI, r8
   17108:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   1710c:	e00c      	b.n	17128 <k_delayed_work_submit_to_queue+0x4c>
	if (work->work_q == work_q) {
   1710e:	2800      	cmp	r0, #0
   17110:	d0f3      	beq.n	170fa <k_delayed_work_submit_to_queue+0x1e>
	work->work_q = work_q;
   17112:	61ee      	str	r6, [r5, #28]
	if (!delay) {
   17114:	b95f      	cbnz	r7, 1712e <k_delayed_work_submit_to_queue+0x52>
   17116:	f388 8811 	msr	BASEPRI, r8
   1711a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1711e:	4629      	mov	r1, r5
   17120:	4630      	mov	r0, r6
   17122:	f008 fc9c 	bl	1fa5e <k_work_submit_to_queue>
		return 0;
   17126:	463c      	mov	r4, r7
}
   17128:	4620      	mov	r0, r4
   1712a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1712e:	480a      	ldr	r0, [pc, #40]	; (17158 <k_delayed_work_submit_to_queue+0x7c>)
   17130:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   17134:	2100      	movs	r1, #0
   17136:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1713a:	2300      	movs	r3, #0
   1713c:	fbc6 0107 	smlal	r0, r1, r6, r7
   17140:	f7e9 fd2c 	bl	b9c <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   17144:	4905      	ldr	r1, [pc, #20]	; (1715c <k_delayed_work_submit_to_queue+0x80>)
   17146:	1c42      	adds	r2, r0, #1
   17148:	f105 000c 	add.w	r0, r5, #12
   1714c:	f000 f84e 	bl	171ec <z_add_timeout>
   17150:	e7d8      	b.n	17104 <k_delayed_work_submit_to_queue+0x28>
		err = -EADDRINUSE;
   17152:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   17156:	e7d5      	b.n	17104 <k_delayed_work_submit_to_queue+0x28>
   17158:	0004ffff 	.word	0x0004ffff
   1715c:	0001fa8f 	.word	0x0001fa8f

00017160 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   17160:	4b03      	ldr	r3, [pc, #12]	; (17170 <elapsed+0x10>)
   17162:	681b      	ldr	r3, [r3, #0]
   17164:	b90b      	cbnz	r3, 1716a <elapsed+0xa>
   17166:	f7f0 beed 	b.w	7f44 <z_clock_elapsed>
}
   1716a:	2000      	movs	r0, #0
   1716c:	4770      	bx	lr
   1716e:	bf00      	nop
   17170:	20002044 	.word	0x20002044

00017174 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17174:	6803      	ldr	r3, [r0, #0]
   17176:	b140      	cbz	r0, 1718a <remove_timeout+0x16>
   17178:	4a07      	ldr	r2, [pc, #28]	; (17198 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1717a:	6852      	ldr	r2, [r2, #4]
   1717c:	4290      	cmp	r0, r2
   1717e:	d004      	beq.n	1718a <remove_timeout+0x16>
	if (next(t) != NULL) {
   17180:	b11b      	cbz	r3, 1718a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   17182:	689a      	ldr	r2, [r3, #8]
   17184:	6881      	ldr	r1, [r0, #8]
   17186:	440a      	add	r2, r1
   17188:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1718a:	6842      	ldr	r2, [r0, #4]
   1718c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1718e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17190:	2300      	movs	r3, #0
	node->prev = NULL;
   17192:	e9c0 3300 	strd	r3, r3, [r0]
}
   17196:	4770      	bx	lr
   17198:	200091b0 	.word	0x200091b0

0001719c <next_timeout>:

static s32_t next_timeout(void)
{
   1719c:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
   1719e:	4b10      	ldr	r3, [pc, #64]	; (171e0 <next_timeout+0x44>)
   171a0:	781b      	ldrb	r3, [r3, #0]
   171a2:	2b00      	cmp	r3, #0
	return list->head == list;
   171a4:	4b0f      	ldr	r3, [pc, #60]	; (171e4 <next_timeout+0x48>)
   171a6:	681c      	ldr	r4, [r3, #0]
   171a8:	bf14      	ite	ne
   171aa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   171ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
   171b2:	429c      	cmp	r4, r3
   171b4:	d00a      	beq.n	171cc <next_timeout+0x30>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   171b6:	b14c      	cbz	r4, 171cc <next_timeout+0x30>
   171b8:	68a5      	ldr	r5, [r4, #8]
   171ba:	f7ff ffd1 	bl	17160 <elapsed>
   171be:	1a28      	subs	r0, r5, r0
   171c0:	2800      	cmp	r0, #0
   171c2:	db0a      	blt.n	171da <next_timeout+0x3e>
   171c4:	68a4      	ldr	r4, [r4, #8]
   171c6:	f7ff ffcb 	bl	17160 <elapsed>
   171ca:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   171cc:	4b06      	ldr	r3, [pc, #24]	; (171e8 <next_timeout+0x4c>)
   171ce:	691b      	ldr	r3, [r3, #16]
   171d0:	b113      	cbz	r3, 171d8 <next_timeout+0x3c>
   171d2:	4298      	cmp	r0, r3
   171d4:	bfa8      	it	ge
   171d6:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   171d8:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
   171da:	2000      	movs	r0, #0
   171dc:	e7f6      	b.n	171cc <next_timeout+0x30>
   171de:	bf00      	nop
   171e0:	200025cd 	.word	0x200025cd
   171e4:	200091b0 	.word	0x200091b0
   171e8:	20001f8c 	.word	0x20001f8c

000171ec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   171ec:	b570      	push	{r4, r5, r6, lr}
   171ee:	4604      	mov	r4, r0
   171f0:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   171f2:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   171f4:	f04f 0320 	mov.w	r3, #32
   171f8:	f3ef 8511 	mrs	r5, BASEPRI
   171fc:	f383 8811 	msr	BASEPRI, r3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   17200:	f7ff ffae 	bl	17160 <elapsed>
	return list->head == list;
   17204:	4b18      	ldr	r3, [pc, #96]	; (17268 <z_add_timeout+0x7c>)
   17206:	681a      	ldr	r2, [r3, #0]
   17208:	2e01      	cmp	r6, #1
   1720a:	bfac      	ite	ge
   1720c:	1980      	addge	r0, r0, r6
   1720e:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17210:	429a      	cmp	r2, r3
   17212:	60a0      	str	r0, [r4, #8]
   17214:	d001      	beq.n	1721a <z_add_timeout+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17216:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   17218:	b932      	cbnz	r2, 17228 <z_add_timeout+0x3c>
	node->prev = list->tail;
   1721a:	685a      	ldr	r2, [r3, #4]
   1721c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   1721e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   17220:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
   17222:	6014      	str	r4, [r2, #0]
	list->tail = node;
   17224:	605c      	str	r4, [r3, #4]
   17226:	e00a      	b.n	1723e <z_add_timeout+0x52>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   17228:	6890      	ldr	r0, [r2, #8]
   1722a:	68a1      	ldr	r1, [r4, #8]
   1722c:	4288      	cmp	r0, r1
   1722e:	dd15      	ble.n	1725c <z_add_timeout+0x70>
				t->dticks -= to->dticks;
   17230:	1a41      	subs	r1, r0, r1
   17232:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   17234:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   17236:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   1723a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1723c:	6054      	str	r4, [r2, #4]
	return list->head == list;
   1723e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17240:	429a      	cmp	r2, r3
   17242:	d006      	beq.n	17252 <z_add_timeout+0x66>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   17244:	4294      	cmp	r4, r2
   17246:	d104      	bne.n	17252 <z_add_timeout+0x66>
			z_clock_set_timeout(next_timeout(), false);
   17248:	f7ff ffa8 	bl	1719c <next_timeout>
   1724c:	2100      	movs	r1, #0
   1724e:	f7f0 fe3f 	bl	7ed0 <z_clock_set_timeout>
	__asm__ volatile(
   17252:	f385 8811 	msr	BASEPRI, r5
   17256:	f3bf 8f6f 	isb	sy
		}
	}
}
   1725a:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   1725c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1725e:	42b2      	cmp	r2, r6
   17260:	60a1      	str	r1, [r4, #8]
   17262:	d0da      	beq.n	1721a <z_add_timeout+0x2e>
   17264:	6812      	ldr	r2, [r2, #0]
   17266:	e7d7      	b.n	17218 <z_add_timeout+0x2c>
   17268:	200091b0 	.word	0x200091b0

0001726c <z_timeout_remaining>:

	return ret;
}

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   1726c:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1726e:	6804      	ldr	r4, [r0, #0]
   17270:	b304      	cbz	r4, 172b4 <z_timeout_remaining+0x48>
	__asm__ volatile(
   17272:	f04f 0320 	mov.w	r3, #32
   17276:	f3ef 8111 	mrs	r1, BASEPRI
   1727a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1727e:	4a0e      	ldr	r2, [pc, #56]	; (172b8 <z_timeout_remaining+0x4c>)
   17280:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17282:	4293      	cmp	r3, r2
   17284:	d014      	beq.n	172b0 <z_timeout_remaining+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17286:	6852      	ldr	r2, [r2, #4]
   17288:	2400      	movs	r4, #0
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   1728a:	b93b      	cbnz	r3, 1729c <z_timeout_remaining+0x30>
	__asm__ volatile(
   1728c:	f381 8811 	msr	BASEPRI, r1
   17290:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
   17294:	f7ff ff64 	bl	17160 <elapsed>
   17298:	1a20      	subs	r0, r4, r0
}
   1729a:	bd38      	pop	{r3, r4, r5, pc}
			ticks += t->dticks;
   1729c:	689d      	ldr	r5, [r3, #8]
			if (timeout == t) {
   1729e:	4283      	cmp	r3, r0
			ticks += t->dticks;
   172a0:	442c      	add	r4, r5
			if (timeout == t) {
   172a2:	d0f3      	beq.n	1728c <z_timeout_remaining+0x20>
   172a4:	2b00      	cmp	r3, #0
   172a6:	d0f1      	beq.n	1728c <z_timeout_remaining+0x20>
	return (node == list->tail) ? NULL : node->next;
   172a8:	4293      	cmp	r3, r2
   172aa:	d0ef      	beq.n	1728c <z_timeout_remaining+0x20>
   172ac:	681b      	ldr	r3, [r3, #0]
   172ae:	e7ec      	b.n	1728a <z_timeout_remaining+0x1e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   172b0:	2400      	movs	r4, #0
   172b2:	e7eb      	b.n	1728c <z_timeout_remaining+0x20>
		return 0;
   172b4:	4620      	mov	r0, r4
   172b6:	e7f0      	b.n	1729a <z_timeout_remaining+0x2e>
   172b8:	200091b0 	.word	0x200091b0

000172bc <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   172bc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   172c0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   172c2:	f7ff fbed 	bl	16aa0 <z_time_slice>
	__asm__ volatile(
   172c6:	f04f 0320 	mov.w	r3, #32
   172ca:	f3ef 8511 	mrs	r5, BASEPRI
   172ce:	f383 8811 	msr	BASEPRI, r3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   172d2:	4e20      	ldr	r6, [pc, #128]	; (17354 <z_clock_announce+0x98>)
   172d4:	4f20      	ldr	r7, [pc, #128]	; (17358 <z_clock_announce+0x9c>)
	return list->head == list;
   172d6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1735c <z_clock_announce+0xa0>
   172da:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   172dc:	46b8      	mov	r8, r7
   172de:	f8d9 4000 	ldr.w	r4, [r9]
   172e2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   172e4:	454c      	cmp	r4, r9
   172e6:	e9d7 bc00 	ldrd	fp, ip, [r7]
   172ea:	d005      	beq.n	172f8 <z_clock_announce+0x3c>
   172ec:	b124      	cbz	r4, 172f8 <z_clock_announce+0x3c>
   172ee:	68a3      	ldr	r3, [r4, #8]
   172f0:	4293      	cmp	r3, r2
   172f2:	dd14      	ble.n	1731e <z_clock_announce+0x62>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   172f4:	1a9b      	subs	r3, r3, r2
   172f6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
   172f8:	eb1b 0002 	adds.w	r0, fp, r2
   172fc:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
   17300:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   17302:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
   17306:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   17308:	f7ff ff48 	bl	1719c <next_timeout>
   1730c:	4621      	mov	r1, r4
   1730e:	f7f0 fddf 	bl	7ed0 <z_clock_set_timeout>
	__asm__ volatile(
   17312:	f385 8811 	msr	BASEPRI, r5
   17316:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1731a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   1731e:	eb1b 0003 	adds.w	r0, fp, r3
   17322:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   17326:	1ad3      	subs	r3, r2, r3
   17328:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1732a:	2300      	movs	r3, #0
		curr_tick += dt;
   1732c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   17330:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   17332:	4620      	mov	r0, r4
   17334:	f7ff ff1e 	bl	17174 <remove_timeout>
   17338:	f385 8811 	msr	BASEPRI, r5
   1733c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   17340:	68e3      	ldr	r3, [r4, #12]
   17342:	4798      	blx	r3
	__asm__ volatile(
   17344:	f04f 0320 	mov.w	r3, #32
   17348:	f3ef 8511 	mrs	r5, BASEPRI
   1734c:	f383 8811 	msr	BASEPRI, r3
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   17350:	e7c5      	b.n	172de <z_clock_announce+0x22>
   17352:	bf00      	nop
   17354:	20002044 	.word	0x20002044
   17358:	20000638 	.word	0x20000638
   1735c:	200091b0 	.word	0x200091b0

00017360 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
   17360:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   17364:	f04f 0320 	mov.w	r3, #32
   17368:	f3ef 8411 	mrs	r4, BASEPRI
   1736c:	f383 8811 	msr	BASEPRI, r3
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   17370:	f7f0 fde8 	bl	7f44 <z_clock_elapsed>
   17374:	4b07      	ldr	r3, [pc, #28]	; (17394 <z_tick_get+0x34>)
   17376:	e9d3 2300 	ldrd	r2, r3, [r3]
   1737a:	eb12 0b00 	adds.w	fp, r2, r0
   1737e:	f143 0c00 	adc.w	ip, r3, #0
   17382:	4658      	mov	r0, fp
   17384:	4661      	mov	r1, ip
	__asm__ volatile(
   17386:	f384 8811 	msr	BASEPRI, r4
   1738a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1738e:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   17392:	bf00      	nop
   17394:	20000638 	.word	0x20000638

00017398 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   17398:	6a02      	ldr	r2, [r0, #32]
   1739a:	2a00      	cmp	r2, #0
{
   1739c:	b538      	push	{r3, r4, r5, lr}
   1739e:	4604      	mov	r4, r0
	if (timer->period > 0) {
   173a0:	dd02      	ble.n	173a8 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   173a2:	490e      	ldr	r1, [pc, #56]	; (173dc <z_timer_expiration_handler+0x44>)
   173a4:	f7ff ff22 	bl	171ec <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1;
   173a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   173aa:	3301      	adds	r3, #1
   173ac:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   173ae:	69a3      	ldr	r3, [r4, #24]
   173b0:	b10b      	cbz	r3, 173b6 <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
   173b2:	4620      	mov	r0, r4
   173b4:	4798      	blx	r3
	return list->head == list;
   173b6:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   173ba:	42a5      	cmp	r5, r4
   173bc:	d00d      	beq.n	173da <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   173be:	b165      	cbz	r5, 173da <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   173c0:	4628      	mov	r0, r5
   173c2:	f008 fa45 	bl	1f850 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   173c6:	7b6b      	ldrb	r3, [r5, #13]
   173c8:	06db      	lsls	r3, r3, #27
   173ca:	d104      	bne.n	173d6 <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
   173cc:	69ab      	ldr	r3, [r5, #24]
   173ce:	b913      	cbnz	r3, 173d6 <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
   173d0:	4628      	mov	r0, r5
   173d2:	f7ff faf3 	bl	169bc <z_add_thread_to_ready_q>
   173d6:	2300      	movs	r3, #0
   173d8:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	z_set_thread_return_value(thread, 0);
}
   173da:	bd38      	pop	{r3, r4, r5, pc}
   173dc:	00017399 	.word	0x00017399

000173e0 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   173e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   173e4:	4e14      	ldr	r6, [pc, #80]	; (17438 <z_impl_k_timer_start+0x58>)
   173e6:	2700      	movs	r7, #0
   173e8:	4604      	mov	r4, r0
   173ea:	4688      	mov	r8, r1
   173ec:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   173f0:	4630      	mov	r0, r6
   173f2:	4639      	mov	r1, r7
   173f4:	fbc5 0102 	smlal	r0, r1, r5, r2
   173f8:	2300      	movs	r3, #0
   173fa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   173fe:	f7e9 fbcd 	bl	b9c <__aeabi_ldivmod>
   17402:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = z_ms_to_ticks(period);
   17404:	9000      	str	r0, [sp, #0]
   17406:	4630      	mov	r0, r6
   17408:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1740c:	2300      	movs	r3, #0
   1740e:	fbc5 0108 	smlal	r0, r1, r5, r8
   17412:	f7e9 fbc3 	bl	b9c <__aeabi_ldivmod>
	duration_in_ticks = z_ms_to_ticks(duration);
   17416:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
   17418:	4620      	mov	r0, r4
   1741a:	f008 fb9a 	bl	1fb52 <z_abort_timeout>
	timer->period = period_in_ticks;
   1741e:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   17420:	4906      	ldr	r1, [pc, #24]	; (1743c <z_impl_k_timer_start+0x5c>)
   17422:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
   17424:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   17426:	4620      	mov	r0, r4
	timer->status = 0;
   17428:	2300      	movs	r3, #0
   1742a:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
   1742c:	b002      	add	sp, #8
   1742e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   17432:	f7ff bedb 	b.w	171ec <z_add_timeout>
   17436:	bf00      	nop
   17438:	0004ffff 	.word	0x0004ffff
   1743c:	00017399 	.word	0x00017399

00017440 <k_poll_event_init>:
 */
static struct k_spinlock lock;

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   17440:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   17442:	7b44      	ldrb	r4, [r0, #13]
   17444:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   17448:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   1744a:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   1744c:	f362 0141 	bfi	r1, r2, #1, #1
   17450:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
   17452:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
   17454:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   17456:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   17458:	4a02      	ldr	r2, [pc, #8]	; (17464 <k_poll_event_init+0x24>)
   1745a:	400a      	ands	r2, r1
	event->unused = 0;
	event->obj = obj;
   1745c:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   17460:	bd10      	pop	{r4, pc}
   17462:	bf00      	nop
   17464:	00020fff 	.word	0x00020fff

00017468 <z_impl_k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   17468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, rc;
	k_spinlock_key_t key;

	struct _poller poller = { .thread = _current, .is_polling = true, };
   1746c:	4b46      	ldr	r3, [pc, #280]	; (17588 <z_impl_k_poll+0x120>)
{
   1746e:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = true, };
   17470:	689b      	ldr	r3, [r3, #8]
   17472:	9300      	str	r3, [sp, #0]

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   17474:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = true, };
   17476:	2301      	movs	r3, #1
{
   17478:	4607      	mov	r7, r0
   1747a:	468a      	mov	sl, r1
   1747c:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = true, };
   1747e:	f88d 3004 	strb.w	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   17482:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   17484:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   17488:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   1748a:	4556      	cmp	r6, sl
   1748c:	db15      	blt.n	174ba <z_impl_k_poll+0x52>
	__asm__ volatile(
   1748e:	f04f 0320 	mov.w	r3, #32
   17492:	f3ef 8611 	mrs	r6, BASEPRI
   17496:	f383 8811 	msr	BASEPRI, r3
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1749a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1749e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   174a2:	2b00      	cmp	r3, #0
   174a4:	d150      	bne.n	17548 <z_impl_k_poll+0xe0>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, last_registered, key);
   174a6:	4632      	mov	r2, r6
   174a8:	4629      	mov	r1, r5
   174aa:	4638      	mov	r0, r7
   174ac:	f008 fbdc 	bl	1fc68 <clear_event_registrations>
	__asm__ volatile(
   174b0:	f386 8811 	msr	BASEPRI, r6
   174b4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return swap_rc;
   174b8:	e052      	b.n	17560 <z_impl_k_poll+0xf8>
	__asm__ volatile(
   174ba:	f04f 0320 	mov.w	r3, #32
   174be:	f3ef 8b11 	mrs	fp, BASEPRI
   174c2:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   174c6:	7b63      	ldrb	r3, [r4, #13]
   174c8:	f003 030f 	and.w	r3, r3, #15
   174cc:	2b02      	cmp	r3, #2
   174ce:	d003      	beq.n	174d8 <z_impl_k_poll+0x70>
   174d0:	2b04      	cmp	r3, #4
   174d2:	d004      	beq.n	174de <z_impl_k_poll+0x76>
   174d4:	2b01      	cmp	r3, #1
   174d6:	d117      	bne.n	17508 <z_impl_k_poll+0xa0>
		if (event->signal->signaled != 0) {
   174d8:	6922      	ldr	r2, [r4, #16]
   174da:	6892      	ldr	r2, [r2, #8]
   174dc:	e001      	b.n	174e2 <z_impl_k_poll+0x7a>
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   174de:	6922      	ldr	r2, [r4, #16]
		if (!k_queue_is_empty(event->queue)) {
   174e0:	6812      	ldr	r2, [r2, #0]
		if (event->signal->signaled != 0) {
   174e2:	b18a      	cbz	r2, 17508 <z_impl_k_poll+0xa0>
	event->state |= state;
   174e4:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   174e6:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
   174ea:	f3c2 3104 	ubfx	r1, r2, #12, #5
   174ee:	430b      	orrs	r3, r1
   174f0:	f363 3210 	bfi	r2, r3, #12, #5
   174f4:	60e2      	str	r2, [r4, #12]
			poller.is_polling = false;
   174f6:	f88d 9004 	strb.w	r9, [sp, #4]
	__asm__ volatile(
   174fa:	f38b 8811 	msr	BASEPRI, fp
   174fe:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   17502:	3601      	adds	r6, #1
   17504:	3414      	adds	r4, #20
   17506:	e7c0      	b.n	1748a <z_impl_k_poll+0x22>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   17508:	f1b8 0f00 	cmp.w	r8, #0
   1750c:	d0f5      	beq.n	174fa <z_impl_k_poll+0x92>
   1750e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   17512:	2a00      	cmp	r2, #0
   17514:	d0f1      	beq.n	174fa <z_impl_k_poll+0x92>
	switch (event->type) {
   17516:	2b02      	cmp	r3, #2
   17518:	d007      	beq.n	1752a <z_impl_k_poll+0xc2>
   1751a:	2b04      	cmp	r3, #4
   1751c:	d00f      	beq.n	1753e <z_impl_k_poll+0xd6>
   1751e:	2b01      	cmp	r3, #1
   17520:	d109      	bne.n	17536 <z_impl_k_poll+0xce>
		add_event(&event->signal->poll_events, event, poller);
   17522:	466a      	mov	r2, sp
   17524:	4621      	mov	r1, r4
   17526:	6920      	ldr	r0, [r4, #16]
   17528:	e003      	b.n	17532 <z_impl_k_poll+0xca>
		add_event(&event->sem->poll_events, event, poller);
   1752a:	6920      	ldr	r0, [r4, #16]
   1752c:	466a      	mov	r2, sp
   1752e:	4621      	mov	r1, r4
   17530:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   17532:	f008 fbed 	bl	1fd10 <add_event>
	event->poller = poller;
   17536:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   1753a:	3501      	adds	r5, #1
   1753c:	e7dd      	b.n	174fa <z_impl_k_poll+0x92>
		add_event(&event->queue->poll_events, event, poller);
   1753e:	6920      	ldr	r0, [r4, #16]
   17540:	466a      	mov	r2, sp
   17542:	4621      	mov	r1, r4
   17544:	3008      	adds	r0, #8
   17546:	e7f4      	b.n	17532 <z_impl_k_poll+0xca>
	poller.is_polling = false;
   17548:	2300      	movs	r3, #0
   1754a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   1754e:	f1b8 0f00 	cmp.w	r8, #0
   17552:	d109      	bne.n	17568 <z_impl_k_poll+0x100>
   17554:	f386 8811 	msr	BASEPRI, r6
   17558:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1755c:	f06f 040a 	mvn.w	r4, #10
}
   17560:	4620      	mov	r0, r4
   17562:	b005      	add	sp, #20
   17564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   17568:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1756a:	4643      	mov	r3, r8
   1756c:	4631      	mov	r1, r6
   1756e:	4807      	ldr	r0, [pc, #28]	; (1758c <z_impl_k_poll+0x124>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   17570:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   17574:	f7ff fb50 	bl	16c18 <z_pend_curr>
   17578:	4604      	mov	r4, r0
	__asm__ volatile(
   1757a:	f04f 0320 	mov.w	r3, #32
   1757e:	f3ef 8611 	mrs	r6, BASEPRI
   17582:	f383 8811 	msr	BASEPRI, r3
   17586:	e78e      	b.n	174a6 <z_impl_k_poll+0x3e>
   17588:	20001f8c 	.word	0x20001f8c
   1758c:	200025ce 	.word	0x200025ce

00017590 <z_impl_k_poll_signal_raise>:
	return 0;
}
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   17590:	b538      	push	{r3, r4, r5, lr}
   17592:	f04f 0320 	mov.w	r3, #32
   17596:	f3ef 8511 	mrs	r5, BASEPRI
   1759a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1759e:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   175a0:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   175a2:	4298      	cmp	r0, r3
	signal->signaled = 1;
   175a4:	f04f 0101 	mov.w	r1, #1
   175a8:	6081      	str	r1, [r0, #8]
   175aa:	d106      	bne.n	175ba <z_impl_k_poll_signal_raise+0x2a>
	__asm__ volatile(
   175ac:	f385 8811 	msr	BASEPRI, r5
   175b0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   175b4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   175b6:	4620      	mov	r0, r4
   175b8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   175ba:	e9d3 2000 	ldrd	r2, r0, [r3]
   175be:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   175c0:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   175c2:	2200      	movs	r2, #0
	node->prev = NULL;
   175c4:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   175c8:	4618      	mov	r0, r3
   175ca:	f008 fb75 	bl	1fcb8 <signal_poll_event>
	z_reschedule(&lock, key);
   175ce:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   175d0:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   175d2:	4802      	ldr	r0, [pc, #8]	; (175dc <z_impl_k_poll_signal_raise+0x4c>)
   175d4:	f008 f953 	bl	1f87e <z_reschedule>
	return rc;
   175d8:	e7ed      	b.n	175b6 <z_impl_k_poll_signal_raise+0x26>
   175da:	bf00      	nop
   175dc:	200025ce 	.word	0x200025ce

000175e0 <gpio_pin_write>:
   175e0:	6843      	ldr	r3, [r0, #4]
{
   175e2:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   175e4:	685c      	ldr	r4, [r3, #4]
   175e6:	4613      	mov	r3, r2
   175e8:	46a4      	mov	ip, r4
   175ea:	460a      	mov	r2, r1
}
   175ec:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   175ee:	2100      	movs	r1, #0
   175f0:	4760      	bx	ip

000175f2 <gpio_add_callback.constprop.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (!api->manage_callback) {
   175f2:	6843      	ldr	r3, [r0, #4]
   175f4:	68db      	ldr	r3, [r3, #12]
   175f6:	b10b      	cbz	r3, 175fc <gpio_add_callback.constprop.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   175f8:	2201      	movs	r2, #1
   175fa:	4718      	bx	r3
}
   175fc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17600:	4770      	bx	lr

00017602 <gpio_pin_enable_callback>:
	if (!api->enable_callback) {
   17602:	6843      	ldr	r3, [r0, #4]
   17604:	691b      	ldr	r3, [r3, #16]
 * Note: Depending on the driver implementation, this function will enable
 *       the pin to trigger an interruption. So as a semantic detail, if no
 *       callback is registered, of course none will be called.
 */
static inline int gpio_pin_enable_callback(struct device *port, u32_t pin)
{
   17606:	460a      	mov	r2, r1
	if (!api->enable_callback) {
   17608:	b10b      	cbz	r3, 1760e <gpio_pin_enable_callback+0xc>
	return api->enable_callback(port, access_op, pin);
   1760a:	2100      	movs	r1, #0
   1760c:	4718      	bx	r3
	return gpio_enable_callback(port, GPIO_ACCESS_BY_PIN, pin);
}
   1760e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17612:	4770      	bx	lr

00017614 <gpio_pin_write.constprop.1>:
	return api->write(port, access_op, pin, value);
   17614:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_write(struct device *port, u32_t pin,
   17616:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
   17618:	685c      	ldr	r4, [r3, #4]
   1761a:	460a      	mov	r2, r1
   1761c:	46a4      	mov	ip, r4
   1761e:	2301      	movs	r3, #1
   17620:	2100      	movs	r1, #0
}
   17622:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
   17624:	4760      	bx	ip

00017626 <gpio_pin_configure>:
	return api->config(port, access_op, pin, flags);
   17626:	6843      	ldr	r3, [r0, #4]
{
   17628:	b410      	push	{r4}
	return api->config(port, access_op, pin, flags);
   1762a:	681c      	ldr	r4, [r3, #0]
   1762c:	4613      	mov	r3, r2
   1762e:	46a4      	mov	ip, r4
   17630:	460a      	mov	r2, r1
}
   17632:	bc10      	pop	{r4}
	return api->config(port, access_op, pin, flags);
   17634:	2100      	movs	r1, #0
   17636:	4760      	bx	ip

00017638 <prov_complete>:
}
   17638:	4770      	bx	lr

0001763a <prov_reset>:
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   1763a:	2003      	movs	r0, #3
   1763c:	f004 b899 	b.w	1b772 <bt_mesh_prov_enable>

00017640 <light_lightness_default_set>:
{
   17640:	b570      	push	{r4, r5, r6, lr}
   17642:	4604      	mov	r4, r0
   17644:	460d      	mov	r5, r1
   17646:	4616      	mov	r6, r2
	light_lightness_default_set_unack(model, ctx, buf);
   17648:	f7ec fbcc 	bl	3de4 <light_lightness_default_set_unack>
	light_lightness_default_get(model, ctx, buf);
   1764c:	4620      	mov	r0, r4
   1764e:	4632      	mov	r2, r6
   17650:	4629      	mov	r1, r5
   17652:	f7ec fca7 	bl	3fa4 <light_lightness_default_get>
	light_lightness_default_publish(model);
   17656:	4620      	mov	r0, r4
}
   17658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	light_lightness_default_publish(model);
   1765c:	f7ec baf0 	b.w	3c40 <light_lightness_default_publish>

00017660 <gen_level_move_publish>:
	struct net_buf_simple *msg = model->pub->msg;
   17660:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   17662:	889a      	ldrh	r2, [r3, #4]
{
   17664:	b570      	push	{r4, r5, r6, lr}
   17666:	4605      	mov	r5, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   17668:	b302      	cbz	r2, 176ac <gen_level_move_publish+0x4c>
	struct net_buf_simple *msg = model->pub->msg;
   1766a:	691c      	ldr	r4, [r3, #16]
	struct generic_level_state *state = model->user_data;
   1766c:	6986      	ldr	r6, [r0, #24]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_GEN_LEVEL_STATUS);
   1766e:	f248 2108 	movw	r1, #33288	; 0x8208
   17672:	4620      	mov	r0, r4
   17674:	f004 fee2 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->level);
   17678:	8831      	ldrh	r1, [r6, #0]
   1767a:	4620      	mov	r0, r4
   1767c:	f007 fd55 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
   17680:	6a73      	ldr	r3, [r6, #36]	; 0x24
   17682:	689b      	ldr	r3, [r3, #8]
   17684:	b16b      	cbz	r3, 176a2 <gen_level_move_publish+0x42>
		if (state->last_delta < 0) {
   17686:	68b3      	ldr	r3, [r6, #8]
   17688:	2b00      	cmp	r3, #0
			net_buf_simple_add_le16(msg, INT16_MIN);
   1768a:	bfb4      	ite	lt
   1768c:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
			net_buf_simple_add_le16(msg, INT16_MAX);
   17690:	f647 71ff 	movwge	r1, #32767	; 0x7fff
   17694:	4620      	mov	r0, r4
   17696:	f007 fd48 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, UNKNOWN_VALUE);
   1769a:	213f      	movs	r1, #63	; 0x3f
   1769c:	4620      	mov	r0, r4
   1769e:	f007 fd3c 	bl	1f11a <net_buf_simple_add_u8>
   176a2:	4628      	mov	r0, r5
}
   176a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   176a8:	f7ec be6a 	b.w	4380 <gen_level_move_publish.part.0>
   176ac:	bd70      	pop	{r4, r5, r6, pc}

000176ae <light_ctl_temp_range_setunack.isra.7>:
static bool light_ctl_temp_range_setunack(struct bt_mesh_model *model,
   176ae:	b570      	push	{r4, r5, r6, lr}
   176b0:	4604      	mov	r4, r0
	min = net_buf_simple_pull_le16(buf);
   176b2:	4608      	mov	r0, r1
static bool light_ctl_temp_range_setunack(struct bt_mesh_model *model,
   176b4:	460e      	mov	r6, r1
	min = net_buf_simple_pull_le16(buf);
   176b6:	f007 fdb4 	bl	1f222 <net_buf_simple_pull_le16>
   176ba:	4605      	mov	r5, r0
	max = net_buf_simple_pull_le16(buf);
   176bc:	4630      	mov	r0, r6
   176be:	f007 fdb0 	bl	1f222 <net_buf_simple_pull_le16>
	if (min < TEMP_MIN || min > TEMP_MAX ||
   176c2:	f5a5 7248 	sub.w	r2, r5, #800	; 0x320
   176c6:	b292      	uxth	r2, r2
   176c8:	f5b2 4f96 	cmp.w	r2, #19200	; 0x4b00
	max = net_buf_simple_pull_le16(buf);
   176cc:	4603      	mov	r3, r0
	if (min < TEMP_MIN || min > TEMP_MAX ||
   176ce:	d81a      	bhi.n	17706 <light_ctl_temp_range_setunack.isra.7+0x58>
   176d0:	f5a0 7248 	sub.w	r2, r0, #800	; 0x320
   176d4:	b292      	uxth	r2, r2
   176d6:	f5b2 4f96 	cmp.w	r2, #19200	; 0x4b00
   176da:	f04f 0000 	mov.w	r0, #0
   176de:	d811      	bhi.n	17704 <light_ctl_temp_range_setunack.isra.7+0x56>
	if (min <= max) {
   176e0:	429d      	cmp	r5, r3
   176e2:	d80d      	bhi.n	17700 <light_ctl_temp_range_setunack.isra.7+0x52>
			if (state->temp_range_min != min ||
   176e4:	89e2      	ldrh	r2, [r4, #14]
		state->status_code = RANGE_SUCCESSFULLY_UPDATED;
   176e6:	7320      	strb	r0, [r4, #12]
			if (state->temp_range_min != min ||
   176e8:	42aa      	cmp	r2, r5
   176ea:	d102      	bne.n	176f2 <light_ctl_temp_range_setunack.isra.7+0x44>
   176ec:	8a22      	ldrh	r2, [r4, #16]
   176ee:	429a      	cmp	r2, r3
   176f0:	d004      	beq.n	176fc <light_ctl_temp_range_setunack.isra.7+0x4e>
				state->temp_range_min = min;
   176f2:	81e5      	strh	r5, [r4, #14]
				state->temp_range_max = max;
   176f4:	8223      	strh	r3, [r4, #16]
				save_on_flash(TEMPERATURE_RANGE);
   176f6:	2007      	movs	r0, #7
   176f8:	f7ee fde0 	bl	62bc <save_on_flash>
	return true;
   176fc:	2001      	movs	r0, #1
   176fe:	e001      	b.n	17704 <light_ctl_temp_range_setunack.isra.7+0x56>
		state->status_code = CANNOT_SET_RANGE_MAX;
   17700:	2302      	movs	r3, #2
   17702:	7323      	strb	r3, [r4, #12]
}
   17704:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   17706:	2000      	movs	r0, #0
   17708:	e7fc      	b.n	17704 <light_ctl_temp_range_setunack.isra.7+0x56>

0001770a <light_ctl_temp_range_set_unack>:
{
   1770a:	b510      	push	{r4, lr}
	if (light_ctl_temp_range_setunack(model, ctx, buf) == true) {
   1770c:	4611      	mov	r1, r2
{
   1770e:	4604      	mov	r4, r0
	if (light_ctl_temp_range_setunack(model, ctx, buf) == true) {
   17710:	6980      	ldr	r0, [r0, #24]
   17712:	f7ff ffcc 	bl	176ae <light_ctl_temp_range_setunack.isra.7>
   17716:	b120      	cbz	r0, 17722 <light_ctl_temp_range_set_unack+0x18>
		light_ctl_temp_range_publish(model);
   17718:	4620      	mov	r0, r4
}
   1771a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		light_ctl_temp_range_publish(model);
   1771e:	f7ec ba1d 	b.w	3b5c <light_ctl_temp_range_publish>
}
   17722:	bd10      	pop	{r4, pc}

00017724 <light_ctl_default_setunack.isra.8>:
static bool light_ctl_default_setunack(struct bt_mesh_model *model,
   17724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17726:	4604      	mov	r4, r0
	lightness = net_buf_simple_pull_le16(buf);
   17728:	4608      	mov	r0, r1
static bool light_ctl_default_setunack(struct bt_mesh_model *model,
   1772a:	460e      	mov	r6, r1
	lightness = net_buf_simple_pull_le16(buf);
   1772c:	f007 fd79 	bl	1f222 <net_buf_simple_pull_le16>
   17730:	4607      	mov	r7, r0
	temp = net_buf_simple_pull_le16(buf);
   17732:	4630      	mov	r0, r6
   17734:	f007 fd75 	bl	1f222 <net_buf_simple_pull_le16>
   17738:	4605      	mov	r5, r0
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
   1773a:	4630      	mov	r0, r6
   1773c:	f007 fd71 	bl	1f222 <net_buf_simple_pull_le16>
	if (temp < TEMP_MIN || temp > TEMP_MAX) {
   17740:	f5a5 7348 	sub.w	r3, r5, #800	; 0x320
   17744:	b29b      	uxth	r3, r3
   17746:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1774a:	d81a      	bhi.n	17782 <light_ctl_default_setunack.isra.8+0x5e>
	if (temp < state->temp_range_min) {
   1774c:	89e3      	ldrh	r3, [r4, #14]
   1774e:	429d      	cmp	r5, r3
   17750:	d304      	bcc.n	1775c <light_ctl_default_setunack.isra.8+0x38>
	} else if (temp > state->temp_range_max) {
   17752:	8a23      	ldrh	r3, [r4, #16]
   17754:	42ab      	cmp	r3, r5
   17756:	bf28      	it	cs
   17758:	462b      	movcs	r3, r5
   1775a:	b29b      	uxth	r3, r3
	if (state->lightness_def != lightness || state->temp_def != temp ||
   1775c:	8b22      	ldrh	r2, [r4, #24]
   1775e:	42ba      	cmp	r2, r7
	delta_uv = (s16_t) net_buf_simple_pull_le16(buf);
   17760:	b200      	sxth	r0, r0
	if (state->lightness_def != lightness || state->temp_def != temp ||
   17762:	d106      	bne.n	17772 <light_ctl_default_setunack.isra.8+0x4e>
   17764:	8b62      	ldrh	r2, [r4, #26]
   17766:	429a      	cmp	r2, r3
   17768:	d103      	bne.n	17772 <light_ctl_default_setunack.isra.8+0x4e>
   1776a:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
   1776e:	4282      	cmp	r2, r0
   17770:	d005      	beq.n	1777e <light_ctl_default_setunack.isra.8+0x5a>
		state->delta_uv_def = delta_uv;
   17772:	8420      	strh	r0, [r4, #32]
		state->lightness_def = lightness;
   17774:	8327      	strh	r7, [r4, #24]
		state->temp_def = temp;
   17776:	8363      	strh	r3, [r4, #26]
		save_on_flash(LIGHTNESS_TEMP_DEF_STATE);
   17778:	2004      	movs	r0, #4
   1777a:	f7ee fd9f 	bl	62bc <save_on_flash>
	return true;
   1777e:	2001      	movs	r0, #1
   17780:	e000      	b.n	17784 <light_ctl_default_setunack.isra.8+0x60>
		return false;
   17782:	2000      	movs	r0, #0
}
   17784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017786 <light_ctl_default_set_unack>:
{
   17786:	b510      	push	{r4, lr}
	if (light_ctl_default_setunack(model, ctx, buf) == true) {
   17788:	4611      	mov	r1, r2
{
   1778a:	4604      	mov	r4, r0
	if (light_ctl_default_setunack(model, ctx, buf) == true) {
   1778c:	6980      	ldr	r0, [r0, #24]
   1778e:	f7ff ffc9 	bl	17724 <light_ctl_default_setunack.isra.8>
   17792:	b120      	cbz	r0, 1779e <light_ctl_default_set_unack+0x18>
		light_ctl_default_publish(model);
   17794:	4620      	mov	r0, r4
}
   17796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		light_ctl_default_publish(model);
   1779a:	f7ec ba05 	b.w	3ba8 <light_ctl_default_publish>
}
   1779e:	bd10      	pop	{r4, pc}

000177a0 <light_lightness_range_setunack.isra.9>:
static bool light_lightness_range_setunack(struct bt_mesh_model *model,
   177a0:	b570      	push	{r4, r5, r6, lr}
   177a2:	4604      	mov	r4, r0
	min = net_buf_simple_pull_le16(buf);
   177a4:	4608      	mov	r0, r1
static bool light_lightness_range_setunack(struct bt_mesh_model *model,
   177a6:	460e      	mov	r6, r1
	min = net_buf_simple_pull_le16(buf);
   177a8:	f007 fd3b 	bl	1f222 <net_buf_simple_pull_le16>
   177ac:	4605      	mov	r5, r0
	max = net_buf_simple_pull_le16(buf);
   177ae:	4630      	mov	r0, r6
   177b0:	f007 fd37 	bl	1f222 <net_buf_simple_pull_le16>
	if (min == 0 || max == 0) {
   177b4:	b1b5      	cbz	r5, 177e4 <light_lightness_range_setunack.isra.9+0x44>
   177b6:	b1a0      	cbz	r0, 177e2 <light_lightness_range_setunack.isra.9+0x42>
		if (min <= max) {
   177b8:	4285      	cmp	r5, r0
   177ba:	f04f 0300 	mov.w	r3, #0
   177be:	d80d      	bhi.n	177dc <light_lightness_range_setunack.isra.9+0x3c>
			state->status_code = RANGE_SUCCESSFULLY_UPDATED;
   177c0:	7323      	strb	r3, [r4, #12]
			if (state->light_range_min != min ||
   177c2:	89e3      	ldrh	r3, [r4, #14]
   177c4:	42ab      	cmp	r3, r5
   177c6:	d102      	bne.n	177ce <light_lightness_range_setunack.isra.9+0x2e>
   177c8:	8a23      	ldrh	r3, [r4, #16]
   177ca:	4283      	cmp	r3, r0
   177cc:	d004      	beq.n	177d8 <light_lightness_range_setunack.isra.9+0x38>
				state->light_range_max = max;
   177ce:	8220      	strh	r0, [r4, #16]
				state->light_range_min = min;
   177d0:	81e5      	strh	r5, [r4, #14]
				save_on_flash(LIGHTNESS_RANGE);
   177d2:	2006      	movs	r0, #6
   177d4:	f7ee fd72 	bl	62bc <save_on_flash>
	return true;
   177d8:	2001      	movs	r0, #1
   177da:	e002      	b.n	177e2 <light_lightness_range_setunack.isra.9+0x42>
			state->status_code = CANNOT_SET_RANGE_MAX;
   177dc:	2202      	movs	r2, #2
   177de:	7322      	strb	r2, [r4, #12]
			return false;
   177e0:	4618      	mov	r0, r3
}
   177e2:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   177e4:	4628      	mov	r0, r5
   177e6:	e7fc      	b.n	177e2 <light_lightness_range_setunack.isra.9+0x42>

000177e8 <light_lightness_range_set_unack>:
{
   177e8:	b510      	push	{r4, lr}
	if (light_lightness_range_setunack(model, ctx, buf) == true) {
   177ea:	4611      	mov	r1, r2
{
   177ec:	4604      	mov	r4, r0
	if (light_lightness_range_setunack(model, ctx, buf) == true) {
   177ee:	6980      	ldr	r0, [r0, #24]
   177f0:	f7ff ffd6 	bl	177a0 <light_lightness_range_setunack.isra.9>
   177f4:	b120      	cbz	r0, 17800 <light_lightness_range_set_unack+0x18>
		light_lightness_range_publish(model);
   177f6:	4620      	mov	r0, r4
}
   177f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		light_lightness_range_publish(model);
   177fc:	f7ec b9fa 	b.w	3bf4 <light_lightness_range_publish>
}
   17800:	bd10      	pop	{r4, pc}

00017802 <light_ctl_temp_range_set>:
{
   17802:	b570      	push	{r4, r5, r6, lr}
   17804:	4604      	mov	r4, r0
   17806:	460e      	mov	r6, r1
	if (light_ctl_temp_range_setunack(model, ctx, buf) == true) {
   17808:	6980      	ldr	r0, [r0, #24]
   1780a:	4611      	mov	r1, r2
{
   1780c:	4615      	mov	r5, r2
	if (light_ctl_temp_range_setunack(model, ctx, buf) == true) {
   1780e:	f7ff ff4e 	bl	176ae <light_ctl_temp_range_setunack.isra.7>
   17812:	b148      	cbz	r0, 17828 <light_ctl_temp_range_set+0x26>
		light_ctl_temp_range_get(model, ctx, buf);
   17814:	4620      	mov	r0, r4
   17816:	462a      	mov	r2, r5
   17818:	4631      	mov	r1, r6
   1781a:	f7ec faf9 	bl	3e10 <light_ctl_temp_range_get>
		light_ctl_temp_range_publish(model);
   1781e:	4620      	mov	r0, r4
}
   17820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		light_ctl_temp_range_publish(model);
   17824:	f7ec b99a 	b.w	3b5c <light_ctl_temp_range_publish>
}
   17828:	bd70      	pop	{r4, r5, r6, pc}

0001782a <light_ctl_default_set>:
{
   1782a:	b570      	push	{r4, r5, r6, lr}
   1782c:	4604      	mov	r4, r0
   1782e:	460e      	mov	r6, r1
	if (light_ctl_default_setunack(model, ctx, buf) == true) {
   17830:	6980      	ldr	r0, [r0, #24]
   17832:	4611      	mov	r1, r2
{
   17834:	4615      	mov	r5, r2
	if (light_ctl_default_setunack(model, ctx, buf) == true) {
   17836:	f7ff ff75 	bl	17724 <light_ctl_default_setunack.isra.8>
   1783a:	b148      	cbz	r0, 17850 <light_ctl_default_set+0x26>
		light_ctl_default_get(model, ctx, buf);
   1783c:	4620      	mov	r0, r4
   1783e:	462a      	mov	r2, r5
   17840:	4631      	mov	r1, r6
   17842:	f7ec fb15 	bl	3e70 <light_ctl_default_get>
		light_ctl_default_publish(model);
   17846:	4620      	mov	r0, r4
}
   17848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		light_ctl_default_publish(model);
   1784c:	f7ec b9ac 	b.w	3ba8 <light_ctl_default_publish>
}
   17850:	bd70      	pop	{r4, r5, r6, pc}

00017852 <light_lightness_range_set>:
{
   17852:	b570      	push	{r4, r5, r6, lr}
   17854:	4604      	mov	r4, r0
   17856:	460e      	mov	r6, r1
	if (light_lightness_range_setunack(model, ctx, buf) == true) {
   17858:	6980      	ldr	r0, [r0, #24]
   1785a:	4611      	mov	r1, r2
{
   1785c:	4615      	mov	r5, r2
	if (light_lightness_range_setunack(model, ctx, buf) == true) {
   1785e:	f7ff ff9f 	bl	177a0 <light_lightness_range_setunack.isra.9>
   17862:	b148      	cbz	r0, 17878 <light_lightness_range_set+0x26>
		light_lightness_range_get(model, ctx, buf);
   17864:	4620      	mov	r0, r4
   17866:	462a      	mov	r2, r5
   17868:	4631      	mov	r1, r6
   1786a:	f7ec fb6b 	bl	3f44 <light_lightness_range_get>
		light_lightness_range_publish(model);
   1786e:	4620      	mov	r0, r4
}
   17870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		light_lightness_range_publish(model);
   17874:	f7ec b9be 	b.w	3bf4 <light_lightness_range_publish>
}
   17878:	bd70      	pop	{r4, r5, r6, pc}

0001787a <gen_onpowerup_set>:
{
   1787a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (gen_onpowerup_setunack(model, ctx, buf) == true) {
   1787c:	6986      	ldr	r6, [r0, #24]
{
   1787e:	4604      	mov	r4, r0
	onpowerup = net_buf_simple_pull_u8(buf);
   17880:	4610      	mov	r0, r2
{
   17882:	460f      	mov	r7, r1
   17884:	4615      	mov	r5, r2
	onpowerup = net_buf_simple_pull_u8(buf);
   17886:	f007 fcc4 	bl	1f212 <net_buf_simple_pull_u8>
	if (onpowerup > STATE_RESTORE) {
   1788a:	2802      	cmp	r0, #2
   1788c:	d810      	bhi.n	178b0 <gen_onpowerup_set+0x36>
	if (state->onpowerup != onpowerup) {
   1788e:	7833      	ldrb	r3, [r6, #0]
   17890:	4283      	cmp	r3, r0
   17892:	d003      	beq.n	1789c <gen_onpowerup_set+0x22>
		state->onpowerup = onpowerup;
   17894:	7030      	strb	r0, [r6, #0]
		save_on_flash(GEN_ONPOWERUP_STATE);
   17896:	2003      	movs	r0, #3
   17898:	f7ee fd10 	bl	62bc <save_on_flash>
		gen_onpowerup_get(model, ctx, buf);
   1789c:	4620      	mov	r0, r4
   1789e:	462a      	mov	r2, r5
   178a0:	4639      	mov	r1, r7
   178a2:	f7ec fc33 	bl	410c <gen_onpowerup_get>
		gen_onpowerup_publish(model);
   178a6:	4620      	mov	r0, r4
}
   178a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		gen_onpowerup_publish(model);
   178ac:	f7ec b91a 	b.w	3ae4 <gen_onpowerup_publish>
}
   178b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000178b2 <vnd_set>:
{
   178b2:	b570      	push	{r4, r5, r6, lr}
   178b4:	4604      	mov	r4, r0
   178b6:	460d      	mov	r5, r1
   178b8:	4616      	mov	r6, r2
	vnd_set_unack(model, ctx, buf);
   178ba:	f7ed f827 	bl	490c <vnd_set_unack>
	vnd_get(model, ctx, buf);
   178be:	4632      	mov	r2, r6
   178c0:	4629      	mov	r1, r5
   178c2:	4620      	mov	r0, r4
}
   178c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	vnd_get(model, ctx, buf);
   178c8:	f7ec bd2c 	b.w	4324 <vnd_get>

000178cc <gen_onpowerup_set_unack>:
{
   178cc:	b538      	push	{r3, r4, r5, lr}
	if (gen_onpowerup_setunack(model, ctx, buf) == true) {
   178ce:	6985      	ldr	r5, [r0, #24]
{
   178d0:	4604      	mov	r4, r0
	onpowerup = net_buf_simple_pull_u8(buf);
   178d2:	4610      	mov	r0, r2
   178d4:	f007 fc9d 	bl	1f212 <net_buf_simple_pull_u8>
	if (onpowerup > STATE_RESTORE) {
   178d8:	2802      	cmp	r0, #2
   178da:	d80b      	bhi.n	178f4 <gen_onpowerup_set_unack+0x28>
	if (state->onpowerup != onpowerup) {
   178dc:	782b      	ldrb	r3, [r5, #0]
   178de:	4283      	cmp	r3, r0
   178e0:	d003      	beq.n	178ea <gen_onpowerup_set_unack+0x1e>
		state->onpowerup = onpowerup;
   178e2:	7028      	strb	r0, [r5, #0]
		save_on_flash(GEN_ONPOWERUP_STATE);
   178e4:	2003      	movs	r0, #3
   178e6:	f7ee fce9 	bl	62bc <save_on_flash>
		gen_onpowerup_publish(model);
   178ea:	4620      	mov	r0, r4
}
   178ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gen_onpowerup_publish(model);
   178f0:	f7ec b8f8 	b.w	3ae4 <gen_onpowerup_publish>
}
   178f4:	bd38      	pop	{r3, r4, r5, pc}

000178f6 <gen_onoff_publish>:
	struct net_buf_simple *msg = model->pub->msg;
   178f6:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   178f8:	889a      	ldrh	r2, [r3, #4]
{
   178fa:	b570      	push	{r4, r5, r6, lr}
   178fc:	4606      	mov	r6, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   178fe:	b1ea      	cbz	r2, 1793c <gen_onoff_publish+0x46>
	struct net_buf_simple *msg = model->pub->msg;
   17900:	691c      	ldr	r4, [r3, #16]
	struct generic_onoff_state *state = model->user_data;
   17902:	6985      	ldr	r5, [r0, #24]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_GEN_ONOFF_STATUS);
   17904:	f248 2104 	movw	r1, #33284	; 0x8204
   17908:	4620      	mov	r0, r4
   1790a:	f004 fd97 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, state->onoff);
   1790e:	7829      	ldrb	r1, [r5, #0]
   17910:	4620      	mov	r0, r4
   17912:	f007 fc02 	bl	1f11a <net_buf_simple_add_u8>
	if (state->transition->counter) {
   17916:	6968      	ldr	r0, [r5, #20]
   17918:	6883      	ldr	r3, [r0, #8]
   1791a:	b153      	cbz	r3, 17932 <gen_onoff_publish+0x3c>
		calculate_rt(state->transition);
   1791c:	f7ee ff84 	bl	6828 <calculate_rt>
		net_buf_simple_add_u8(msg, state->target_onoff);
   17920:	7869      	ldrb	r1, [r5, #1]
   17922:	4620      	mov	r0, r4
   17924:	f007 fbf9 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, state->transition->rt);
   17928:	696b      	ldr	r3, [r5, #20]
   1792a:	4620      	mov	r0, r4
   1792c:	7899      	ldrb	r1, [r3, #2]
   1792e:	f007 fbf4 	bl	1f11a <net_buf_simple_add_u8>
   17932:	4630      	mov	r0, r6
}
   17934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17938:	f7ec bd22 	b.w	4380 <gen_level_move_publish.part.0>
   1793c:	bd70      	pop	{r4, r5, r6, pc}

0001793e <gen_level_publish>:
	struct net_buf_simple *msg = model->pub->msg;
   1793e:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   17940:	889a      	ldrh	r2, [r3, #4]
{
   17942:	b570      	push	{r4, r5, r6, lr}
   17944:	4606      	mov	r6, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   17946:	b1ea      	cbz	r2, 17984 <gen_level_publish+0x46>
	struct net_buf_simple *msg = model->pub->msg;
   17948:	691c      	ldr	r4, [r3, #16]
	struct generic_level_state *state = model->user_data;
   1794a:	6985      	ldr	r5, [r0, #24]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_GEN_LEVEL_STATUS);
   1794c:	f248 2108 	movw	r1, #33288	; 0x8208
   17950:	4620      	mov	r0, r4
   17952:	f004 fd73 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->level);
   17956:	4620      	mov	r0, r4
   17958:	8829      	ldrh	r1, [r5, #0]
   1795a:	f007 fbe6 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
   1795e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   17960:	6883      	ldr	r3, [r0, #8]
   17962:	b153      	cbz	r3, 1797a <gen_level_publish+0x3c>
		calculate_rt(state->transition);
   17964:	f7ee ff60 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_level);
   17968:	8869      	ldrh	r1, [r5, #2]
   1796a:	4620      	mov	r0, r4
   1796c:	f007 fbdd 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
   17970:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   17972:	4620      	mov	r0, r4
   17974:	7899      	ldrb	r1, [r3, #2]
   17976:	f007 fbd0 	bl	1f11a <net_buf_simple_add_u8>
   1797a:	4630      	mov	r0, r6
}
   1797c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17980:	f7ec bcfe 	b.w	4380 <gen_level_move_publish.part.0>
   17984:	bd70      	pop	{r4, r5, r6, pc}

00017986 <light_lightness_publish>:
	struct net_buf_simple *msg = model->pub->msg;
   17986:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   17988:	889a      	ldrh	r2, [r3, #4]
{
   1798a:	b570      	push	{r4, r5, r6, lr}
   1798c:	4606      	mov	r6, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   1798e:	b1ea      	cbz	r2, 179cc <light_lightness_publish+0x46>
	struct net_buf_simple *msg = model->pub->msg;
   17990:	691c      	ldr	r4, [r3, #16]
	struct light_lightness_state *state = model->user_data;
   17992:	6985      	ldr	r5, [r0, #24]
	bt_mesh_model_msg_init(msg, BT_MESH_MODEL_LIGHT_LIGHTNESS_STATUS);
   17994:	f248 214e 	movw	r1, #33358	; 0x824e
   17998:	4620      	mov	r0, r4
   1799a:	f004 fd4f 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->actual);
   1799e:	4620      	mov	r0, r4
   179a0:	88a9      	ldrh	r1, [r5, #4]
   179a2:	f007 fbc2 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
   179a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
   179a8:	6883      	ldr	r3, [r0, #8]
   179aa:	b153      	cbz	r3, 179c2 <light_lightness_publish+0x3c>
		calculate_rt(state->transition);
   179ac:	f7ee ff3c 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_actual);
   179b0:	88e9      	ldrh	r1, [r5, #6]
   179b2:	4620      	mov	r0, r4
   179b4:	f007 fbb9 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
   179b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   179ba:	4620      	mov	r0, r4
   179bc:	7899      	ldrb	r1, [r3, #2]
   179be:	f007 fbac 	bl	1f11a <net_buf_simple_add_u8>
   179c2:	4630      	mov	r0, r6
}
   179c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   179c8:	f7ec bcda 	b.w	4380 <gen_level_move_publish.part.0>
   179cc:	bd70      	pop	{r4, r5, r6, pc}

000179ce <light_lightness_linear_publish>:
	struct net_buf_simple *msg = model->pub->msg;
   179ce:	6883      	ldr	r3, [r0, #8]
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   179d0:	889a      	ldrh	r2, [r3, #4]
{
   179d2:	b570      	push	{r4, r5, r6, lr}
   179d4:	4606      	mov	r6, r0
	if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   179d6:	b1ea      	cbz	r2, 17a14 <light_lightness_linear_publish+0x46>
	struct net_buf_simple *msg = model->pub->msg;
   179d8:	691c      	ldr	r4, [r3, #16]
	struct light_lightness_state *state = model->user_data;
   179da:	6985      	ldr	r5, [r0, #24]
	bt_mesh_model_msg_init(msg,
   179dc:	f248 2152 	movw	r1, #33362	; 0x8252
   179e0:	4620      	mov	r0, r4
   179e2:	f004 fd2b 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, state->linear);
   179e6:	4620      	mov	r0, r4
   179e8:	8829      	ldrh	r1, [r5, #0]
   179ea:	f007 fb9e 	bl	1f12a <net_buf_simple_add_le16>
	if (state->transition->counter) {
   179ee:	6b28      	ldr	r0, [r5, #48]	; 0x30
   179f0:	6883      	ldr	r3, [r0, #8]
   179f2:	b153      	cbz	r3, 17a0a <light_lightness_linear_publish+0x3c>
		calculate_rt(state->transition);
   179f4:	f7ee ff18 	bl	6828 <calculate_rt>
		net_buf_simple_add_le16(msg, state->target_linear);
   179f8:	8869      	ldrh	r1, [r5, #2]
   179fa:	4620      	mov	r0, r4
   179fc:	f007 fb95 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, state->transition->rt);
   17a00:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   17a02:	4620      	mov	r0, r4
   17a04:	7899      	ldrb	r1, [r3, #2]
   17a06:	f007 fb88 	bl	1f11a <net_buf_simple_add_u8>
   17a0a:	4630      	mov	r0, r6
}
   17a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17a10:	f7ec bcb6 	b.w	4380 <gen_level_move_publish.part.0>
   17a14:	bd70      	pop	{r4, r5, r6, pc}

00017a16 <save_lightness_temp_last_values_timer_handler>:
	save_on_flash(LIGHTNESS_TEMP_LAST_STATE);
   17a16:	2005      	movs	r0, #5
   17a18:	f7ee bc50 	b.w	62bc <save_on_flash>

00017a1c <button_read>:
{
   17a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return api->read(port, access_op, pin, value);
   17a1e:	6843      	ldr	r3, [r0, #4]
	u32_t val = 0U;
   17a20:	2400      	movs	r4, #0
   17a22:	689d      	ldr	r5, [r3, #8]
   17a24:	9401      	str	r4, [sp, #4]
   17a26:	460a      	mov	r2, r1
   17a28:	ab01      	add	r3, sp, #4
   17a2a:	4621      	mov	r1, r4
   17a2c:	47a8      	blx	r5
}
   17a2e:	9801      	ldr	r0, [sp, #4]
   17a30:	b003      	add	sp, #12
   17a32:	bd30      	pop	{r4, r5, pc}

00017a34 <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
   17a34:	b570      	push	{r4, r5, r6, lr}
   17a36:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   17a38:	f990 000b 	ldrsb.w	r0, [r0, #11]
   17a3c:	250c      	movs	r5, #12
   17a3e:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
   17a40:	4288      	cmp	r0, r1
   17a42:	eb06 0405 	add.w	r4, r6, r5
   17a46:	bfb8      	it	lt
   17a48:	5974      	ldrlt	r4, [r6, r5]

	*word = &bitarray[bn / 32];
   17a4a:	2a00      	cmp	r2, #0
   17a4c:	4610      	mov	r0, r2
   17a4e:	bfb8      	it	lt
   17a50:	f102 001f 	addlt.w	r0, r2, #31
   17a54:	1140      	asrs	r0, r0, #5
   17a56:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   17a5a:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   17a5c:	f002 001f 	and.w	r0, r2, #31
   17a60:	bd70      	pop	{r4, r5, r6, pc}

00017a62 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   17a62:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   17a64:	ab01      	add	r3, sp, #4
   17a66:	f7ff ffe5 	bl	17a34 <get_bit_ptr>

	*word |= (1<<bit);
   17a6a:	9a01      	ldr	r2, [sp, #4]
   17a6c:	2301      	movs	r3, #1
   17a6e:	fa03 f000 	lsl.w	r0, r3, r0
   17a72:	6813      	ldr	r3, [r2, #0]
   17a74:	4303      	orrs	r3, r0
   17a76:	6013      	str	r3, [r2, #0]
}
   17a78:	b003      	add	sp, #12
   17a7a:	f85d fb04 	ldr.w	pc, [sp], #4

00017a7e <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
   17a7e:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   17a80:	ab01      	add	r3, sp, #4
   17a82:	f7ff ffd7 	bl	17a34 <get_bit_ptr>

	*word &= ~(1<<bit);
   17a86:	9a01      	ldr	r2, [sp, #4]
   17a88:	2301      	movs	r3, #1
   17a8a:	fa03 f000 	lsl.w	r0, r3, r0
   17a8e:	6813      	ldr	r3, [r2, #0]
   17a90:	ea23 0300 	bic.w	r3, r3, r0
   17a94:	6013      	str	r3, [r2, #0]
}
   17a96:	b003      	add	sp, #12
   17a98:	f85d fb04 	ldr.w	pc, [sp], #4

00017a9c <pool_irq_unlock.isra.5>:
	}
}

static inline void pool_irq_unlock(struct sys_mem_pool_base *p, int key)
{
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17a9c:	07c3      	lsls	r3, r0, #31
   17a9e:	d503      	bpl.n	17aa8 <pool_irq_unlock.isra.5+0xc>
   17aa0:	f381 8811 	msr	BASEPRI, r1
   17aa4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}
}
   17aa8:	4770      	bx	lr

00017aaa <z_sys_mem_pool_base_init>:
{
   17aaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   17aae:	6843      	ldr	r3, [r0, #4]
   17ab0:	8906      	ldrh	r6, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   17ab2:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < p->n_levels; i++) {
   17ab4:	f890 c00a 	ldrb.w	ip, [r0, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   17ab8:	435e      	muls	r6, r3
	p->max_inline_level = -1;
   17aba:	22ff      	movs	r2, #255	; 0xff
{
   17abc:	4604      	mov	r4, r0
	p->max_inline_level = -1;
   17abe:	72c2      	strb	r2, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   17ac0:	4435      	add	r5, r6
	for (i = 0; i < p->n_levels; i++) {
   17ac2:	2000      	movs	r0, #0
		sys_dlist_init(&p->levels[i].free_list);
   17ac4:	f04f 0e0c 	mov.w	lr, #12
	for (i = 0; i < p->n_levels; i++) {
   17ac8:	4584      	cmp	ip, r0
   17aca:	dc05      	bgt.n	17ad8 <z_sys_mem_pool_base_init+0x2e>
	for (i = 0; i < p->n_max; i++) {
   17acc:	2500      	movs	r5, #0
   17ace:	8923      	ldrh	r3, [r4, #8]
   17ad0:	42ab      	cmp	r3, r5
   17ad2:	dc21      	bgt.n	17b18 <z_sys_mem_pool_base_init+0x6e>
}
   17ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sys_dlist_init(&p->levels[i].free_list);
   17ad8:	f8d4 800c 	ldr.w	r8, [r4, #12]
		int nblocks = buflen / sz;
   17adc:	fbb6 f1f3 	udiv	r1, r6, r3
		sys_dlist_init(&p->levels[i].free_list);
   17ae0:	fb0e f700 	mul.w	r7, lr, r0
   17ae4:	eb08 0207 	add.w	r2, r8, r7
   17ae8:	f102 0904 	add.w	r9, r2, #4
		if (nblocks < 32) {
   17aec:	291f      	cmp	r1, #31
	list->tail = (sys_dnode_t *)list;
   17aee:	e9c2 9901 	strd	r9, r9, [r2, #4]
   17af2:	dc06      	bgt.n	17b02 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   17af4:	72e0      	strb	r0, [r4, #11]
		sz = _ALIGN4(sz / 4);
   17af6:	089b      	lsrs	r3, r3, #2
   17af8:	3303      	adds	r3, #3
   17afa:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
   17afe:	3001      	adds	r0, #1
   17b00:	e7e2      	b.n	17ac8 <z_sys_mem_pool_base_init+0x1e>
			bits += (nblocks + 31)/32;
   17b02:	f111 021f 	adds.w	r2, r1, #31
   17b06:	bf48      	it	mi
   17b08:	f101 023e 	addmi.w	r2, r1, #62	; 0x3e
   17b0c:	1152      	asrs	r2, r2, #5
			p->levels[i].bits_p = bits;
   17b0e:	f848 5007 	str.w	r5, [r8, r7]
			bits += (nblocks + 31)/32;
   17b12:	eb05 0582 	add.w	r5, r5, r2, lsl #2
   17b16:	e7ee      	b.n	17af6 <z_sys_mem_pool_base_init+0x4c>
	return (u8_t *)p->buf + lsz * block;
   17b18:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
   17b1a:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
   17b1c:	6820      	ldr	r0, [r4, #0]
   17b1e:	436a      	muls	r2, r5
   17b20:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
   17b22:	1d1e      	adds	r6, r3, #4
	node->next = list;
   17b24:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
   17b26:	689a      	ldr	r2, [r3, #8]
   17b28:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   17b2a:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   17b2c:	4620      	mov	r0, r4
   17b2e:	6011      	str	r1, [r2, #0]
	list->tail = node;
   17b30:	6099      	str	r1, [r3, #8]
   17b32:	462a      	mov	r2, r5
   17b34:	2100      	movs	r1, #0
   17b36:	f7ff ff94 	bl	17a62 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   17b3a:	3501      	adds	r5, #1
   17b3c:	e7c7      	b.n	17ace <z_sys_mem_pool_base_init+0x24>

00017b3e <z_sys_mem_pool_block_alloc>:
	return block;
}

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
   17b3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b42:	b089      	sub	sp, #36	; 0x24
	int i, from_l, alloc_l = -1, free_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17b44:	7a85      	ldrb	r5, [r0, #10]
{
   17b46:	af00      	add	r7, sp, #0
   17b48:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17b4c:	00ab      	lsls	r3, r5, #2
   17b4e:	3307      	adds	r3, #7
   17b50:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   17b54:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
   17b58:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17b5a:	46ea      	mov	sl, sp
{
   17b5c:	4604      	mov	r4, r0
	lsizes[0] = _ALIGN4(p->max_sz);
   17b5e:	3303      	adds	r3, #3
   17b60:	4650      	mov	r0, sl
   17b62:	f023 0303 	bic.w	r3, r3, #3
   17b66:	f840 3904 	str.w	r3, [r0], #-4
	int i, from_l, alloc_l = -1, free_l = -1;
   17b6a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
   17b6e:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
   17b70:	f04f 0c0c 	mov.w	ip, #12
	for (i = 0; i < p->n_levels; i++) {
   17b74:	429d      	cmp	r5, r3
   17b76:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
   17b7a:	dd0a      	ble.n	17b92 <z_sys_mem_pool_block_alloc+0x54>
		if (i > 0) {
   17b7c:	b12b      	cbz	r3, 17b8a <z_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   17b7e:	6802      	ldr	r2, [r0, #0]
   17b80:	0892      	lsrs	r2, r2, #2
   17b82:	3203      	adds	r2, #3
   17b84:	f022 0203 	bic.w	r2, r2, #3
   17b88:	6042      	str	r2, [r0, #4]
		}

		if (lsizes[i] < size) {
   17b8a:	f850 2f04 	ldr.w	r2, [r0, #4]!
   17b8e:	428a      	cmp	r2, r1
   17b90:	d20b      	bcs.n	17baa <z_sys_mem_pool_block_alloc+0x6c>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
   17b92:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   17b96:	d113      	bne.n	17bc0 <z_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
   17b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17b9a:	2300      	movs	r3, #0
   17b9c:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   17b9e:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
   17ba2:	3724      	adds	r7, #36	; 0x24
   17ba4:	46bd      	mov	sp, r7
   17ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
   17baa:	68e2      	ldr	r2, [r4, #12]
   17bac:	fb0c 2203 	mla	r2, ip, r3, r2
   17bb0:	f102 0e04 	add.w	lr, r2, #4
		if (!level_empty(p, i)) {
   17bb4:	6852      	ldr	r2, [r2, #4]
   17bb6:	4572      	cmp	r2, lr
   17bb8:	bf18      	it	ne
   17bba:	461e      	movne	r6, r3
	for (i = 0; i < p->n_levels; i++) {
   17bbc:	3301      	adds	r3, #1
   17bbe:	e7d9      	b.n	17b74 <z_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
   17bc0:	1c71      	adds	r1, r6, #1
   17bc2:	d0e9      	beq.n	17b98 <z_sys_mem_pool_block_alloc+0x5a>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17bc4:	7c23      	ldrb	r3, [r4, #16]
   17bc6:	f013 0301 	ands.w	r3, r3, #1
   17bca:	d005      	beq.n	17bd8 <z_sys_mem_pool_block_alloc+0x9a>
	__asm__ volatile(
   17bcc:	f04f 0220 	mov.w	r2, #32
   17bd0:	f3ef 8311 	mrs	r3, BASEPRI
   17bd4:	f382 8811 	msr	BASEPRI, r2
	return key;
   17bd8:	68e2      	ldr	r2, [r4, #12]
	key = pool_irq_lock(p);
   17bda:	61fb      	str	r3, [r7, #28]
	for (i = free_l; i >= 0; i--) {
   17bdc:	230c      	movs	r3, #12
   17bde:	fb03 2306 	mla	r3, r3, r6, r2
	return list->head == list;
   17be2:	461a      	mov	r2, r3
   17be4:	f852 5f04 	ldr.w	r5, [r2, #4]!
	if (!sys_dlist_is_empty(list)) {
   17be8:	4295      	cmp	r5, r2
   17bea:	d076      	beq.n	17cda <z_sys_mem_pool_block_alloc+0x19c>
	node->prev->next = node->next;
   17bec:	e9d5 3100 	ldrd	r3, r1, [r5]
   17bf0:	600b      	str	r3, [r1, #0]
	node->next->prev = node->prev;
   17bf2:	6059      	str	r1, [r3, #4]
	node->next = NULL;
   17bf4:	2300      	movs	r3, #0
	node->prev = NULL;
   17bf6:	e9c5 3300 	strd	r3, r3, [r5]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17bfa:	6823      	ldr	r3, [r4, #0]
		data = block_alloc(p, i, lsizes[i]);
   17bfc:	f85a 2026 	ldr.w	r2, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c00:	1aeb      	subs	r3, r5, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
   17c02:	4631      	mov	r1, r6
   17c04:	fb93 f2f2 	sdiv	r2, r3, r2
   17c08:	4620      	mov	r0, r4
   17c0a:	f7ff ff38 	bl	17a7e <clear_free_bit>
		if (data != NULL) {
   17c0e:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
   17c12:	f106 0801 	add.w	r8, r6, #1
   17c16:	61bb      	str	r3, [r7, #24]
			for (from_l = i; from_l < alloc_l; from_l++) {
   17c18:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   17c1c:	459b      	cmp	fp, r3
   17c1e:	dc12      	bgt.n	17c46 <z_sys_mem_pool_block_alloc+0x108>
	pool_irq_unlock(p, key);
   17c20:	7c20      	ldrb	r0, [r4, #16]
   17c22:	69f9      	ldr	r1, [r7, #28]
   17c24:	f7ff ff3a 	bl	17a9c <pool_irq_unlock.isra.5>
	*level_p = alloc_l;
   17c28:	68bb      	ldr	r3, [r7, #8]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c2a:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
	*level_p = alloc_l;
   17c2e:	f8c3 b000 	str.w	fp, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c32:	6823      	ldr	r3, [r4, #0]
   17c34:	1aeb      	subs	r3, r5, r3
   17c36:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
   17c3a:	687a      	ldr	r2, [r7, #4]
   17c3c:	6013      	str	r3, [r2, #0]
	*data_p = data;
   17c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	return 0;
   17c40:	2000      	movs	r0, #0
	*data_p = data;
   17c42:	601d      	str	r5, [r3, #0]
	return 0;
   17c44:	e7ad      	b.n	17ba2 <z_sys_mem_pool_block_alloc+0x64>
	bn = block_num(p, block, lsizes[l]);
   17c46:	69bb      	ldr	r3, [r7, #24]
   17c48:	f853 2b04 	ldr.w	r2, [r3], #4
   17c4c:	61bb      	str	r3, [r7, #24]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   17c4e:	6823      	ldr	r3, [r4, #0]
   17c50:	1aeb      	subs	r3, r5, r3
   17c52:	fb93 f3f2 	sdiv	r3, r3, r2
		int lbn = 4*bn + i;
   17c56:	009b      	lsls	r3, r3, #2
   17c58:	60fb      	str	r3, [r7, #12]
   17c5a:	230c      	movs	r3, #12
   17c5c:	fb03 f308 	mul.w	r3, r3, r8
   17c60:	613b      	str	r3, [r7, #16]
	for (i = 1; i < 4; i++) {
   17c62:	f04f 0901 	mov.w	r9, #1
		int lsz = lsizes[l + 1];
   17c66:	69bb      	ldr	r3, [r7, #24]
   17c68:	681e      	ldr	r6, [r3, #0]
		void *block2 = (lsz * i) + (char *)block;
   17c6a:	fb09 f306 	mul.w	r3, r9, r6
   17c6e:	617b      	str	r3, [r7, #20]
   17c70:	18eb      	adds	r3, r5, r3
   17c72:	603b      	str	r3, [r7, #0]
		set_free_bit(p, l + 1, lbn);
   17c74:	68fb      	ldr	r3, [r7, #12]
   17c76:	4641      	mov	r1, r8
   17c78:	eb09 0203 	add.w	r2, r9, r3
   17c7c:	4620      	mov	r0, r4
   17c7e:	f7ff fef0 	bl	17a62 <set_free_bit>
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   17c82:	683b      	ldr	r3, [r7, #0]
   17c84:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
   17c86:	8921      	ldrh	r1, [r4, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   17c88:	3e01      	subs	r6, #1
   17c8a:	441e      	add	r6, r3
   17c8c:	1ab6      	subs	r6, r6, r2
	return p->n_max * p->max_sz;
   17c8e:	6862      	ldr	r2, [r4, #4]
   17c90:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
   17c92:	4296      	cmp	r6, r2
   17c94:	d20a      	bcs.n	17cac <z_sys_mem_pool_block_alloc+0x16e>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
   17c96:	68e2      	ldr	r2, [r4, #12]
   17c98:	6939      	ldr	r1, [r7, #16]
	node->next = list;
   17c9a:	6978      	ldr	r0, [r7, #20]
   17c9c:	440a      	add	r2, r1
   17c9e:	1d11      	adds	r1, r2, #4
   17ca0:	5029      	str	r1, [r5, r0]
	node->prev = list->tail;
   17ca2:	6891      	ldr	r1, [r2, #8]
   17ca4:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
   17ca6:	6891      	ldr	r1, [r2, #8]
   17ca8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   17caa:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
   17cac:	f109 0901 	add.w	r9, r9, #1
   17cb0:	f1b9 0f04 	cmp.w	r9, #4
   17cb4:	d1d7      	bne.n	17c66 <z_sys_mem_pool_block_alloc+0x128>
				pool_irq_unlock(p, key);
   17cb6:	69f9      	ldr	r1, [r7, #28]
   17cb8:	7c20      	ldrb	r0, [r4, #16]
   17cba:	f7ff feef 	bl	17a9c <pool_irq_unlock.isra.5>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17cbe:	7c23      	ldrb	r3, [r4, #16]
   17cc0:	f013 0301 	ands.w	r3, r3, #1
   17cc4:	d005      	beq.n	17cd2 <z_sys_mem_pool_block_alloc+0x194>
	__asm__ volatile(
   17cc6:	f04f 0220 	mov.w	r2, #32
   17cca:	f3ef 8311 	mrs	r3, BASEPRI
   17cce:	f382 8811 	msr	BASEPRI, r2
				key = pool_irq_lock(p);
   17cd2:	61fb      	str	r3, [r7, #28]
   17cd4:	f108 0801 	add.w	r8, r8, #1
   17cd8:	e79e      	b.n	17c18 <z_sys_mem_pool_block_alloc+0xda>
	for (i = free_l; i >= 0; i--) {
   17cda:	3e01      	subs	r6, #1
   17cdc:	1c72      	adds	r2, r6, #1
   17cde:	f1a3 030c 	sub.w	r3, r3, #12
   17ce2:	f47f af7e 	bne.w	17be2 <z_sys_mem_pool_block_alloc+0xa4>
   17ce6:	2500      	movs	r5, #0
   17ce8:	e79a      	b.n	17c20 <z_sys_mem_pool_block_alloc+0xe2>

00017cea <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   17cea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cee:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17cf0:	7a83      	ldrb	r3, [r0, #10]
   17cf2:	009b      	lsls	r3, r3, #2
   17cf4:	3307      	adds	r3, #7
   17cf6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
{
   17cfa:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17cfc:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
   17d00:	6843      	ldr	r3, [r0, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   17d02:	46e9      	mov	r9, sp
	lsizes[0] = _ALIGN4(p->max_sz);
   17d04:	3303      	adds	r3, #3
   17d06:	f023 0303 	bic.w	r3, r3, #3
{
   17d0a:	4605      	mov	r5, r0
	lsizes[0] = _ALIGN4(p->max_sz);
   17d0c:	f8c9 3000 	str.w	r3, [r9]
	for (i = 1; i <= level; i++) {
   17d10:	464c      	mov	r4, r9
   17d12:	2001      	movs	r0, #1
   17d14:	4281      	cmp	r1, r0
   17d16:	d218      	bcs.n	17d4a <z_sys_mem_pool_block_free+0x60>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17d18:	7c2c      	ldrb	r4, [r5, #16]
   17d1a:	f014 0401 	ands.w	r4, r4, #1
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   17d1e:	4688      	mov	r8, r1
   17d20:	4616      	mov	r6, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17d22:	d005      	beq.n	17d30 <z_sys_mem_pool_block_free+0x46>
   17d24:	f04f 0320 	mov.w	r3, #32
   17d28:	f3ef 8411 	mrs	r4, BASEPRI
   17d2c:	f383 8811 	msr	BASEPRI, r3
	while (level >= 0) {
   17d30:	f1b8 0f00 	cmp.w	r8, #0
   17d34:	da12      	bge.n	17d5c <z_sys_mem_pool_block_free+0x72>
	return -1;
   17d36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   17d3a:	4621      	mov	r1, r4
   17d3c:	7c28      	ldrb	r0, [r5, #16]
   17d3e:	f7ff fead 	bl	17a9c <pool_irq_unlock.isra.5>
}
   17d42:	371c      	adds	r7, #28
   17d44:	46bd      	mov	sp, r7
   17d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
   17d4a:	6823      	ldr	r3, [r4, #0]
   17d4c:	089b      	lsrs	r3, r3, #2
   17d4e:	3303      	adds	r3, #3
   17d50:	f023 0303 	bic.w	r3, r3, #3
   17d54:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
   17d58:	3001      	adds	r0, #1
   17d5a:	e7db      	b.n	17d14 <z_sys_mem_pool_block_free+0x2a>
		int i, lsz = lsizes[level];
   17d5c:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
   17d60:	60fb      	str	r3, [r7, #12]
	return (u8_t *)p->buf + lsz * block;
   17d62:	fb03 fb06 	mul.w	fp, r3, r6
   17d66:	682b      	ldr	r3, [r5, #0]
   17d68:	60bb      	str	r3, [r7, #8]
		set_free_bit(p, level, bn);
   17d6a:	4632      	mov	r2, r6
   17d6c:	4641      	mov	r1, r8
   17d6e:	4628      	mov	r0, r5
	return (u8_t *)p->buf + lsz * block;
   17d70:	eb03 0a0b 	add.w	sl, r3, fp
		set_free_bit(p, level, bn);
   17d74:	f7ff fe75 	bl	17a62 <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
   17d78:	68ea      	ldr	r2, [r5, #12]
   17d7a:	230c      	movs	r3, #12
   17d7c:	fb03 2208 	mla	r2, r3, r8, r2
	node->next = list;
   17d80:	68bb      	ldr	r3, [r7, #8]
   17d82:	1d11      	adds	r1, r2, #4
   17d84:	f843 100b 	str.w	r1, [r3, fp]
	node->prev = list->tail;
   17d88:	6893      	ldr	r3, [r2, #8]
   17d8a:	f8ca 3004 	str.w	r3, [sl, #4]
	list->tail->next = node;
   17d8e:	6893      	ldr	r3, [r2, #8]
   17d90:	f8c3 a000 	str.w	sl, [r3]
	list->tail = node;
   17d94:	f8c2 a008 	str.w	sl, [r2, #8]
		pool_irq_unlock(p, key);
   17d98:	4621      	mov	r1, r4
   17d9a:	7c28      	ldrb	r0, [r5, #16]
   17d9c:	f7ff fe7e 	bl	17a9c <pool_irq_unlock.isra.5>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   17da0:	7c2c      	ldrb	r4, [r5, #16]
   17da2:	f014 0401 	ands.w	r4, r4, #1
   17da6:	d005      	beq.n	17db4 <z_sys_mem_pool_block_free+0xca>
   17da8:	f04f 0320 	mov.w	r3, #32
   17dac:	f3ef 8411 	mrs	r4, BASEPRI
   17db0:	f383 8811 	msr	BASEPRI, r3
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   17db4:	f1b8 0f00 	cmp.w	r8, #0
   17db8:	d0bf      	beq.n	17d3a <z_sys_mem_pool_block_free+0x50>
	int bit = get_bit_ptr(p, level, bn, &word);
   17dba:	f107 0314 	add.w	r3, r7, #20
   17dbe:	4632      	mov	r2, r6
   17dc0:	4641      	mov	r1, r8
   17dc2:	4628      	mov	r0, r5
   17dc4:	f7ff fe36 	bl	17a34 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   17dc8:	697a      	ldr	r2, [r7, #20]
   17dca:	2800      	cmp	r0, #0
   17dcc:	bfb8      	it	lt
   17dce:	3003      	addlt	r0, #3
   17dd0:	f020 0303 	bic.w	r3, r0, #3
   17dd4:	6810      	ldr	r0, [r2, #0]
   17dd6:	40d8      	lsrs	r0, r3
   17dd8:	f000 000f 	and.w	r0, r0, #15
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
   17ddc:	280f      	cmp	r0, #15
   17dde:	d1ac      	bne.n	17d3a <z_sys_mem_pool_block_free+0x50>
			int b = (bn & ~3) + i;
   17de0:	f026 0303 	bic.w	r3, r6, #3
   17de4:	60bb      	str	r3, [r7, #8]
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   17de6:	68fb      	ldr	r3, [r7, #12]
   17de8:	3b01      	subs	r3, #1
		for (i = 0; i < 4; i++) {
   17dea:	f04f 0a00 	mov.w	sl, #0
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
   17dee:	607b      	str	r3, [r7, #4]
			int b = (bn & ~3) + i;
   17df0:	68bb      	ldr	r3, [r7, #8]
	return p->n_max * p->max_sz;
   17df2:	f8b5 c008 	ldrh.w	ip, [r5, #8]
   17df6:	6869      	ldr	r1, [r5, #4]
			int b = (bn & ~3) + i;
   17df8:	eb03 020a 	add.w	r2, r3, sl
	return (u8_t *)p->buf + lsz * block;
   17dfc:	68fb      	ldr	r3, [r7, #12]
   17dfe:	fb03 fb02 	mul.w	fp, r3, r2
			if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
   17e02:	687b      	ldr	r3, [r7, #4]
	return p->n_max * p->max_sz;
   17e04:	fb01 f10c 	mul.w	r1, r1, ip
			if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
   17e08:	eb03 000b 	add.w	r0, r3, fp
   17e0c:	4288      	cmp	r0, r1
   17e0e:	d20f      	bcs.n	17e30 <z_sys_mem_pool_block_free+0x146>
				clear_free_bit(p, level, b);
   17e10:	4641      	mov	r1, r8
   17e12:	4628      	mov	r0, r5
   17e14:	f7ff fe33 	bl	17a7e <clear_free_bit>
	return (u8_t *)p->buf + lsz * block;
   17e18:	682a      	ldr	r2, [r5, #0]
   17e1a:	eb02 010b 	add.w	r1, r2, fp
	node->prev->next = node->next;
   17e1e:	f852 000b 	ldr.w	r0, [r2, fp]
   17e22:	684b      	ldr	r3, [r1, #4]
   17e24:	6018      	str	r0, [r3, #0]
	node->next->prev = node->prev;
   17e26:	6043      	str	r3, [r0, #4]
	node->next = NULL;
   17e28:	2300      	movs	r3, #0
   17e2a:	f842 300b 	str.w	r3, [r2, fp]
	node->prev = NULL;
   17e2e:	604b      	str	r3, [r1, #4]
		for (i = 0; i < 4; i++) {
   17e30:	f10a 0a01 	add.w	sl, sl, #1
   17e34:	f1ba 0f04 	cmp.w	sl, #4
   17e38:	d1da      	bne.n	17df0 <z_sys_mem_pool_block_free+0x106>
		bn = bn / 4;
   17e3a:	2e00      	cmp	r6, #0
   17e3c:	bfb8      	it	lt
   17e3e:	3603      	addlt	r6, #3
		level = level - 1;
   17e40:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   17e44:	10b6      	asrs	r6, r6, #2
   17e46:	e773      	b.n	17d30 <z_sys_mem_pool_block_free+0x46>

00017e48 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   17e48:	b508      	push	{r3, lr}
   17e4a:	4604      	mov	r4, r0
   17e4c:	4608      	mov	r0, r1
   17e4e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   17e50:	461a      	mov	r2, r3
   17e52:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
   17e54:	f7fe ffd4 	bl	16e00 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
   17e58:	f7f0 fb66 	bl	8528 <z_impl_k_thread_abort>

00017e5c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   17e5c:	b510      	push	{r4, lr}
   17e5e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   17e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17e64:	4620      	mov	r0, r4
   17e66:	f007 fc72 	bl	1f74e <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   17e6a:	4603      	mov	r3, r0
   17e6c:	2800      	cmp	r0, #0
   17e6e:	d0f7      	beq.n	17e60 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17e70:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   17e72:	6842      	ldr	r2, [r0, #4]
   17e74:	f3bf 8f5b 	dmb	ish
   17e78:	e853 1f00 	ldrex	r1, [r3]
   17e7c:	f021 0c01 	bic.w	ip, r1, #1
   17e80:	e843 ce00 	strex	lr, ip, [r3]
   17e84:	f1be 0f00 	cmp.w	lr, #0
   17e88:	d1f6      	bne.n	17e78 <z_work_q_main+0x1c>
   17e8a:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   17e8e:	07cb      	lsls	r3, r1, #31
   17e90:	d500      	bpl.n	17e94 <z_work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   17e92:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
   17e94:	f7fe ff2a 	bl	16cec <z_impl_k_yield>
   17e98:	e7e2      	b.n	17e60 <z_work_q_main+0x4>

00017e9a <z_arch_printk_char_out>:
}
   17e9a:	2000      	movs	r0, #0
   17e9c:	4770      	bx	lr

00017e9e <print_err>:
{
   17e9e:	b570      	push	{r4, r5, r6, lr}
   17ea0:	4604      	mov	r4, r0
   17ea2:	460d      	mov	r5, r1
	out('E', ctx);
   17ea4:	2045      	movs	r0, #69	; 0x45
   17ea6:	47a0      	blx	r4
	out('R', ctx);
   17ea8:	4629      	mov	r1, r5
   17eaa:	2052      	movs	r0, #82	; 0x52
   17eac:	47a0      	blx	r4
	out('R', ctx);
   17eae:	4629      	mov	r1, r5
   17eb0:	4623      	mov	r3, r4
   17eb2:	2052      	movs	r0, #82	; 0x52
}
   17eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   17eb8:	4718      	bx	r3

00017eba <str_out>:
{
   17eba:	b530      	push	{r4, r5, lr}
   17ebc:	688a      	ldr	r2, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
   17ebe:	680c      	ldr	r4, [r1, #0]
   17ec0:	1c55      	adds	r5, r2, #1
   17ec2:	b114      	cbz	r4, 17eca <str_out+0x10>
   17ec4:	684b      	ldr	r3, [r1, #4]
   17ec6:	4293      	cmp	r3, r2
   17ec8:	dc01      	bgt.n	17ece <str_out+0x14>
		ctx->count++;
   17eca:	608d      	str	r5, [r1, #8]
}
   17ecc:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   17ece:	3b01      	subs	r3, #1
   17ed0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   17ed2:	bf08      	it	eq
   17ed4:	2200      	moveq	r2, #0
   17ed6:	608d      	str	r5, [r1, #8]
   17ed8:	bf0c      	ite	eq
   17eda:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   17edc:	54a0      	strbne	r0, [r4, r2]
   17ede:	e7f5      	b.n	17ecc <str_out+0x12>

00017ee0 <_vprintk>:
{
   17ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ee4:	b08b      	sub	sp, #44	; 0x2c
   17ee6:	461c      	mov	r4, r3
	int long_ctr = 0;
   17ee8:	f04f 0900 	mov.w	r9, #0
   17eec:	1e53      	subs	r3, r2, #1
{
   17eee:	4605      	mov	r5, r0
   17ef0:	460e      	mov	r6, r1
   17ef2:	9303      	str	r3, [sp, #12]
	int min_width = -1;
   17ef4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   17ef8:	464f      	mov	r7, r9
			might_format = 0;
   17efa:	f04f 0b00 	mov.w	fp, #0
						break;
   17efe:	e007      	b.n	17f10 <_vprintk+0x30>
		if (!might_format) {
   17f00:	f1bb 0f00 	cmp.w	fp, #0
   17f04:	d10d      	bne.n	17f22 <_vprintk+0x42>
			if (*fmt != '%') {
   17f06:	2825      	cmp	r0, #37	; 0x25
   17f08:	f000 812e 	beq.w	18168 <_vprintk+0x288>
				out((int)*fmt, ctx);
   17f0c:	4631      	mov	r1, r6
   17f0e:	47a8      	blx	r5
	while (*fmt) {
   17f10:	9b03      	ldr	r3, [sp, #12]
   17f12:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   17f16:	9303      	str	r3, [sp, #12]
   17f18:	2800      	cmp	r0, #0
   17f1a:	d1f1      	bne.n	17f00 <_vprintk+0x20>
}
   17f1c:	b00b      	add	sp, #44	; 0x2c
   17f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   17f22:	2864      	cmp	r0, #100	; 0x64
   17f24:	d05f      	beq.n	17fe6 <_vprintk+0x106>
   17f26:	d819      	bhi.n	17f5c <_vprintk+0x7c>
   17f28:	2839      	cmp	r0, #57	; 0x39
   17f2a:	d80a      	bhi.n	17f42 <_vprintk+0x62>
   17f2c:	2831      	cmp	r0, #49	; 0x31
   17f2e:	d24e      	bcs.n	17fce <_vprintk+0xee>
   17f30:	282d      	cmp	r0, #45	; 0x2d
   17f32:	f000 8120 	beq.w	18176 <_vprintk+0x296>
   17f36:	2830      	cmp	r0, #48	; 0x30
   17f38:	d03d      	beq.n	17fb6 <_vprintk+0xd6>
   17f3a:	2825      	cmp	r0, #37	; 0x25
   17f3c:	d107      	bne.n	17f4e <_vprintk+0x6e>
				out((int)'%', ctx);
   17f3e:	4631      	mov	r1, r6
   17f40:	e110      	b.n	18164 <_vprintk+0x284>
			switch (*fmt) {
   17f42:	2858      	cmp	r0, #88	; 0x58
   17f44:	f000 80a3 	beq.w	1808e <_vprintk+0x1ae>
   17f48:	2863      	cmp	r0, #99	; 0x63
   17f4a:	f000 8108 	beq.w	1815e <_vprintk+0x27e>
				out((int)'%', ctx);
   17f4e:	4631      	mov	r1, r6
   17f50:	2025      	movs	r0, #37	; 0x25
   17f52:	47a8      	blx	r5
				out((int)*fmt, ctx);
   17f54:	9b03      	ldr	r3, [sp, #12]
   17f56:	4631      	mov	r1, r6
   17f58:	7818      	ldrb	r0, [r3, #0]
   17f5a:	e103      	b.n	18164 <_vprintk+0x284>
			switch (*fmt) {
   17f5c:	2870      	cmp	r0, #112	; 0x70
   17f5e:	f000 808d 	beq.w	1807c <_vprintk+0x19c>
   17f62:	d806      	bhi.n	17f72 <_vprintk+0x92>
   17f64:	2869      	cmp	r0, #105	; 0x69
   17f66:	d03e      	beq.n	17fe6 <_vprintk+0x106>
   17f68:	286c      	cmp	r0, #108	; 0x6c
   17f6a:	d039      	beq.n	17fe0 <_vprintk+0x100>
   17f6c:	2868      	cmp	r0, #104	; 0x68
   17f6e:	d0cf      	beq.n	17f10 <_vprintk+0x30>
   17f70:	e7ed      	b.n	17f4e <_vprintk+0x6e>
   17f72:	2875      	cmp	r0, #117	; 0x75
   17f74:	d06b      	beq.n	1804e <_vprintk+0x16e>
   17f76:	d81a      	bhi.n	17fae <_vprintk+0xce>
   17f78:	2873      	cmp	r0, #115	; 0x73
   17f7a:	d1e8      	bne.n	17f4e <_vprintk+0x6e>
				char *s = va_arg(ap, char *);
   17f7c:	f854 bb04 	ldr.w	fp, [r4], #4
				while (*s)
   17f80:	46da      	mov	sl, fp
   17f82:	4652      	mov	r2, sl
   17f84:	f81a 0b01 	ldrb.w	r0, [sl], #1
   17f88:	2800      	cmp	r0, #0
   17f8a:	f040 80e5 	bne.w	18158 <_vprintk+0x278>
				if (padding == PAD_SPACE_AFTER) {
   17f8e:	2f03      	cmp	r7, #3
   17f90:	f040 80f5 	bne.w	1817e <_vprintk+0x29e>
					int remaining = min_width - (s - start);
   17f94:	eba2 0b0b 	sub.w	fp, r2, fp
   17f98:	eba8 0b0b 	sub.w	fp, r8, fp
					while (remaining-- > 0) {
   17f9c:	f1bb 0f00 	cmp.w	fp, #0
   17fa0:	ddab      	ble.n	17efa <_vprintk+0x1a>
						out(' ', ctx);
   17fa2:	4631      	mov	r1, r6
   17fa4:	2020      	movs	r0, #32
   17fa6:	47a8      	blx	r5
   17fa8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   17fac:	e7f6      	b.n	17f9c <_vprintk+0xbc>
			switch (*fmt) {
   17fae:	2878      	cmp	r0, #120	; 0x78
   17fb0:	d06d      	beq.n	1808e <_vprintk+0x1ae>
   17fb2:	287a      	cmp	r0, #122	; 0x7a
   17fb4:	e7db      	b.n	17f6e <_vprintk+0x8e>
				if (min_width < 0 && padding == PAD_NONE) {
   17fb6:	f1b8 0f00 	cmp.w	r8, #0
   17fba:	da0b      	bge.n	17fd4 <_vprintk+0xf4>
   17fbc:	2f00      	cmp	r7, #0
   17fbe:	f000 80dc 	beq.w	1817a <_vprintk+0x29a>
					min_width = *fmt - '0';
   17fc2:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   17fc6:	2f00      	cmp	r7, #0
   17fc8:	bf08      	it	eq
   17fca:	2702      	moveq	r7, #2
   17fcc:	e7a0      	b.n	17f10 <_vprintk+0x30>
				if (min_width < 0) {
   17fce:	f1b8 0f00 	cmp.w	r8, #0
   17fd2:	dbf6      	blt.n	17fc2 <_vprintk+0xe2>
					min_width = 10 * min_width + *fmt - '0';
   17fd4:	220a      	movs	r2, #10
   17fd6:	fb02 0808 	mla	r8, r2, r8, r0
   17fda:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   17fde:	e7f2      	b.n	17fc6 <_vprintk+0xe6>
				long_ctr++;
   17fe0:	f109 0901 	add.w	r9, r9, #1
   17fe4:	e794      	b.n	17f10 <_vprintk+0x30>
				if (long_ctr == 0) {
   17fe6:	f1b9 0f00 	cmp.w	r9, #0
   17fea:	d114      	bne.n	18016 <_vprintk+0x136>
					long ld = va_arg(ap, long);
   17fec:	f854 ab04 	ldr.w	sl, [r4], #4
				if (d < 0) {
   17ff0:	f1ba 0f00 	cmp.w	sl, #0
   17ff4:	da06      	bge.n	18004 <_vprintk+0x124>
					out((int)'-', ctx);
   17ff6:	4631      	mov	r1, r6
   17ff8:	202d      	movs	r0, #45	; 0x2d
   17ffa:	47a8      	blx	r5
					d = -d;
   17ffc:	f1ca 0a00 	rsb	sl, sl, #0
					min_width--;
   18000:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   18004:	f8cd 8000 	str.w	r8, [sp]
   18008:	463b      	mov	r3, r7
   1800a:	4652      	mov	r2, sl
				_printk_dec_ulong(out, ctx, u, padding,
   1800c:	4631      	mov	r1, r6
   1800e:	4628      	mov	r0, r5
   18010:	f7ee fe5a 	bl	6cc8 <_printk_dec_ulong>
				break;
   18014:	e771      	b.n	17efa <_vprintk+0x1a>
				} else if (long_ctr == 1) {
   18016:	f1b9 0f01 	cmp.w	r9, #1
   1801a:	d0e7      	beq.n	17fec <_vprintk+0x10c>
					long long lld = va_arg(ap, long long);
   1801c:	3407      	adds	r4, #7
   1801e:	f024 0407 	bic.w	r4, r4, #7
   18022:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
					if (lld > INT32_MAX ||
   18026:	f11a 4300 	adds.w	r3, sl, #2147483648	; 0x80000000
   1802a:	9306      	str	r3, [sp, #24]
   1802c:	f14b 0300 	adc.w	r3, fp, #0
   18030:	9307      	str	r3, [sp, #28]
   18032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   18036:	2300      	movs	r3, #0
   18038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1803c:	428b      	cmp	r3, r1
   1803e:	bf08      	it	eq
   18040:	4282      	cmpeq	r2, r0
   18042:	d2d5      	bcs.n	17ff0 <_vprintk+0x110>
						print_err(out, ctx);
   18044:	4631      	mov	r1, r6
   18046:	4628      	mov	r0, r5
   18048:	f7ff ff29 	bl	17e9e <print_err>
   1804c:	e755      	b.n	17efa <_vprintk+0x1a>
				if (long_ctr == 0) {
   1804e:	f1b9 0f00 	cmp.w	r9, #0
   18052:	d105      	bne.n	18060 <_vprintk+0x180>
					long lu = va_arg(ap, unsigned long);
   18054:	f854 2b04 	ldr.w	r2, [r4], #4
				_printk_dec_ulong(out, ctx, u, padding,
   18058:	f8cd 8000 	str.w	r8, [sp]
   1805c:	463b      	mov	r3, r7
   1805e:	e7d5      	b.n	1800c <_vprintk+0x12c>
				} else if (long_ctr == 1) {
   18060:	f1b9 0f01 	cmp.w	r9, #1
   18064:	d0f6      	beq.n	18054 <_vprintk+0x174>
					unsigned long long llu =
   18066:	3407      	adds	r4, #7
   18068:	f024 0407 	bic.w	r4, r4, #7
   1806c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > INT32_MAX) {
   18070:	2b00      	cmp	r3, #0
   18072:	bf08      	it	eq
   18074:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
   18078:	d3ee      	bcc.n	18058 <_vprintk+0x178>
   1807a:	e7e3      	b.n	18044 <_vprintk+0x164>
				  out('0', ctx);
   1807c:	4631      	mov	r1, r6
   1807e:	2030      	movs	r0, #48	; 0x30
   18080:	47a8      	blx	r5
				  out('x', ctx);
   18082:	4631      	mov	r1, r6
   18084:	2078      	movs	r0, #120	; 0x78
   18086:	47a8      	blx	r5
				  min_width = 8;
   18088:	f04f 0808 	mov.w	r8, #8
				  padding = PAD_ZERO_BEFORE;
   1808c:	2701      	movs	r7, #1
				if (long_ctr < 2) {
   1808e:	f1b9 0f01 	cmp.w	r9, #1
   18092:	dc26      	bgt.n	180e2 <_vprintk+0x202>
					x = va_arg(ap, unsigned long);
   18094:	f854 3b04 	ldr.w	r3, [r4], #4
   18098:	9308      	str	r3, [sp, #32]
   1809a:	2300      	movs	r3, #0
	int remaining = 16; /* 16 digits max */
   1809c:	2210      	movs	r2, #16
	int digits = 0;
   1809e:	f04f 0a00 	mov.w	sl, #0
					x = va_arg(ap, unsigned long long);
   180a2:	9304      	str	r3, [sp, #16]
	int found_largest_digit = 0;
   180a4:	f8cd a014 	str.w	sl, [sp, #20]
	int size = sizeof(num) * 2;
   180a8:	4611      	mov	r1, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   180aa:	1e4b      	subs	r3, r1, #1
   180ac:	0098      	lsls	r0, r3, #2
   180ae:	9302      	str	r3, [sp, #8]
   180b0:	9b08      	ldr	r3, [sp, #32]
   180b2:	f1c0 0e20 	rsb	lr, r0, #32
   180b6:	f1a0 0c20 	sub.w	ip, r0, #32
   180ba:	fa23 f000 	lsr.w	r0, r3, r0
   180be:	9b04      	ldr	r3, [sp, #16]
   180c0:	fa03 fe0e 	lsl.w	lr, r3, lr
   180c4:	ea40 000e 	orr.w	r0, r0, lr
   180c8:	fa23 fc0c 	lsr.w	ip, r3, ip
   180cc:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble || found_largest_digit || size == 1) {
   180d0:	f010 000f 	ands.w	r0, r0, #15
   180d4:	d112      	bne.n	180fc <_vprintk+0x21c>
   180d6:	9b05      	ldr	r3, [sp, #20]
   180d8:	b90b      	cbnz	r3, 180de <_vprintk+0x1fe>
   180da:	2901      	cmp	r1, #1
   180dc:	d12c      	bne.n	18138 <_vprintk+0x258>
			nibble += nibble > 9 ? 87 : 48;
   180de:	2130      	movs	r1, #48	; 0x30
   180e0:	e010      	b.n	18104 <_vprintk+0x224>
					x = va_arg(ap, unsigned long long);
   180e2:	3407      	adds	r4, #7
   180e4:	f024 0207 	bic.w	r2, r4, #7
   180e8:	4614      	mov	r4, r2
   180ea:	f854 3b08 	ldr.w	r3, [r4], #8
   180ee:	9308      	str	r3, [sp, #32]
   180f0:	6853      	ldr	r3, [r2, #4]
   180f2:	e7d3      	b.n	1809c <_vprintk+0x1bc>
			found_largest_digit = 1;
   180f4:	f8cd b014 	str.w	fp, [sp, #20]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
   180f8:	9902      	ldr	r1, [sp, #8]
   180fa:	e7d6      	b.n	180aa <_vprintk+0x1ca>
			nibble += nibble > 9 ? 87 : 48;
   180fc:	2809      	cmp	r0, #9
   180fe:	bf8c      	ite	hi
   18100:	2157      	movhi	r1, #87	; 0x57
   18102:	2130      	movls	r1, #48	; 0x30
   18104:	4408      	add	r0, r1
			out((int)nibble, ctx);
   18106:	b240      	sxtb	r0, r0
   18108:	4631      	mov	r1, r6
   1810a:	9205      	str	r2, [sp, #20]
   1810c:	47a8      	blx	r5
	for (; size; size--) {
   1810e:	9b02      	ldr	r3, [sp, #8]
   18110:	9a05      	ldr	r2, [sp, #20]
			digits++;
   18112:	f10a 0a01 	add.w	sl, sl, #1
	for (; size; size--) {
   18116:	2b00      	cmp	r3, #0
   18118:	d1ec      	bne.n	180f4 <_vprintk+0x214>
	if (padding == PAD_SPACE_AFTER) {
   1811a:	2f03      	cmp	r7, #3
   1811c:	f47f aeed 	bne.w	17efa <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   18120:	ebca 0a48 	rsb	sl, sl, r8, lsl #1
		while (remaining-- > 0) {
   18124:	f1ba 0f00 	cmp.w	sl, #0
   18128:	f77f aee7 	ble.w	17efa <_vprintk+0x1a>
			out(' ', ctx);
   1812c:	4631      	mov	r1, r6
   1812e:	2020      	movs	r0, #32
   18130:	47a8      	blx	r5
   18132:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   18136:	e7f5      	b.n	18124 <_vprintk+0x244>
		if (remaining-- <= min_width) {
   18138:	1e53      	subs	r3, r2, #1
   1813a:	4590      	cmp	r8, r2
   1813c:	9309      	str	r3, [sp, #36]	; 0x24
   1813e:	db04      	blt.n	1814a <_vprintk+0x26a>
			if (padding == PAD_ZERO_BEFORE) {
   18140:	2f01      	cmp	r7, #1
   18142:	d104      	bne.n	1814e <_vprintk+0x26e>
				out('0', ctx);
   18144:	4631      	mov	r1, r6
   18146:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
   18148:	47a8      	blx	r5
					x = va_arg(ap, unsigned long);
   1814a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1814c:	e7d4      	b.n	180f8 <_vprintk+0x218>
			} else if (padding == PAD_SPACE_BEFORE) {
   1814e:	2f02      	cmp	r7, #2
   18150:	d1fb      	bne.n	1814a <_vprintk+0x26a>
				out(' ', ctx);
   18152:	4631      	mov	r1, r6
   18154:	2020      	movs	r0, #32
   18156:	e7f7      	b.n	18148 <_vprintk+0x268>
					out((int)(*s++), ctx);
   18158:	4631      	mov	r1, r6
   1815a:	47a8      	blx	r5
   1815c:	e711      	b.n	17f82 <_vprintk+0xa2>
				out(c, ctx);
   1815e:	f854 0b04 	ldr.w	r0, [r4], #4
   18162:	4631      	mov	r1, r6
				out((int)*fmt, ctx);
   18164:	47a8      	blx	r5
				break;
   18166:	e6c8      	b.n	17efa <_vprintk+0x1a>
				long_ctr = 0;
   18168:	46d9      	mov	r9, fp
				padding = PAD_NONE;
   1816a:	465f      	mov	r7, fp
				min_width = -1;
   1816c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
   18170:	f04f 0b01 	mov.w	fp, #1
   18174:	e6cc      	b.n	17f10 <_vprintk+0x30>
				padding = PAD_SPACE_AFTER;
   18176:	2703      	movs	r7, #3
   18178:	e6ca      	b.n	17f10 <_vprintk+0x30>
					padding = PAD_ZERO_BEFORE;
   1817a:	2701      	movs	r7, #1
   1817c:	e6c8      	b.n	17f10 <_vprintk+0x30>
			might_format = 0;
   1817e:	4683      	mov	fp, r0
		++fmt;
   18180:	e6c6      	b.n	17f10 <_vprintk+0x30>

00018182 <printk>:
{
   18182:	b40f      	push	{r0, r1, r2, r3}
   18184:	b507      	push	{r0, r1, r2, lr}
   18186:	a904      	add	r1, sp, #16
   18188:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1818c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1818e:	f7ee fdf1 	bl	6d74 <vprintk>
}
   18192:	b003      	add	sp, #12
   18194:	f85d eb04 	ldr.w	lr, [sp], #4
   18198:	b004      	add	sp, #16
   1819a:	4770      	bx	lr

0001819c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
   1819c:	4770      	bx	lr

0001819e <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   1819e:	428b      	cmp	r3, r1
{
   181a0:	b538      	push	{r3, r4, r5, lr}
   181a2:	4615      	mov	r5, r2
   181a4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   181a6:	d805      	bhi.n	181b4 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   181a8:	461a      	mov	r2, r3
   181aa:	4629      	mov	r1, r5
   181ac:	f001 ff7c 	bl	1a0a8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   181b0:	4620      	mov	r0, r4
   181b2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   181b4:	2400      	movs	r4, #0
   181b6:	e7fb      	b.n	181b0 <_copy+0x12>

000181b8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   181b8:	f001 bfa0 	b.w	1a0fc <memset>

000181bc <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   181bc:	09c3      	lsrs	r3, r0, #7
   181be:	005a      	lsls	r2, r3, #1
   181c0:	4413      	add	r3, r2
   181c2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   181c6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   181ca:	b2c0      	uxtb	r0, r0
   181cc:	4770      	bx	lr

000181ce <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   181ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181d2:	4606      	mov	r6, r0
   181d4:	b0a8      	sub	sp, #160	; 0xa0
   181d6:	460f      	mov	r7, r1
   181d8:	4614      	mov	r4, r2
   181da:	2540      	movs	r5, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   181dc:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   181e0:	f7ee fe12 	bl	6e08 <uECC_get_rng>
		if (!rng_function ||
   181e4:	4603      	mov	r3, r0
   181e6:	2800      	cmp	r0, #0
   181e8:	d03d      	beq.n	18266 <uECC_make_key+0x98>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   181ea:	2140      	movs	r1, #64	; 0x40
   181ec:	a808      	add	r0, sp, #32
   181ee:	4798      	blx	r3
		if (!rng_function ||
   181f0:	b3c8      	cbz	r0, 18266 <uECC_make_key+0x98>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   181f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   181f6:	f112 031f 	adds.w	r3, r2, #31
   181fa:	bf48      	it	mi
   181fc:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   18200:	a908      	add	r1, sp, #32
   18202:	4642      	mov	r2, r8
   18204:	4668      	mov	r0, sp
   18206:	f343 1347 	sbfx	r3, r3, #5, #8
   1820a:	f000 fa00 	bl	1860e <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1820e:	4622      	mov	r2, r4
   18210:	4669      	mov	r1, sp
   18212:	a818      	add	r0, sp, #96	; 0x60
   18214:	f000 fe16 	bl	18e44 <EccPoint_compute_public_key>
   18218:	b318      	cbz	r0, 18262 <uECC_make_key+0x94>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1821a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1821e:	1dd9      	adds	r1, r3, #7
   18220:	bf48      	it	mi
   18222:	f103 010e 	addmi.w	r1, r3, #14
   18226:	466a      	mov	r2, sp
   18228:	10c9      	asrs	r1, r1, #3
   1822a:	4638      	mov	r0, r7
   1822c:	f000 fe32 	bl	18e94 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   18230:	aa18      	add	r2, sp, #96	; 0x60
   18232:	f994 1001 	ldrsb.w	r1, [r4, #1]
   18236:	4630      	mov	r0, r6
   18238:	f000 fe2c 	bl	18e94 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1823c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   18240:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   18244:	ab18      	add	r3, sp, #96	; 0x60
   18246:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1824a:	1870      	adds	r0, r6, r1
   1824c:	f000 fe22 	bl	18e94 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			memset(_private, 0, NUM_ECC_BYTES);
   18250:	2220      	movs	r2, #32
   18252:	2100      	movs	r1, #0
   18254:	4668      	mov	r0, sp
   18256:	f001 ff51 	bl	1a0fc <memset>

      			return 1;
   1825a:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1825c:	b028      	add	sp, #160	; 0xa0
   1825e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   18262:	3d01      	subs	r5, #1
   18264:	d1bc      	bne.n	181e0 <uECC_make_key+0x12>
        		return 0;
   18266:	2000      	movs	r0, #0
   18268:	e7f8      	b.n	1825c <uECC_make_key+0x8e>

0001826a <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1826a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1826e:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   18270:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   18274:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   18278:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1827c:	b0a4      	sub	sp, #144	; 0x90
   1827e:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   18280:	1dda      	adds	r2, r3, #7
   18282:	bf48      	it	mi
   18284:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   18288:	ad04      	add	r5, sp, #16
{
   1828a:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1828c:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1828e:	4628      	mov	r0, r5
   18290:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   18292:	9502      	str	r5, [sp, #8]
   18294:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   18296:	f000 fe11 	bl	18ebc <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1829a:	463a      	mov	r2, r7
   1829c:	4649      	mov	r1, r9
   1829e:	a814      	add	r0, sp, #80	; 0x50
   182a0:	f000 fe0c 	bl	18ebc <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   182a4:	ab14      	add	r3, sp, #80	; 0x50
   182a6:	eb09 0107 	add.w	r1, r9, r7
   182aa:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   182ae:	463a      	mov	r2, r7
   182b0:	f000 fe04 	bl	18ebc <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   182b4:	4623      	mov	r3, r4
   182b6:	4632      	mov	r2, r6
   182b8:	4629      	mov	r1, r5
   182ba:	4628      	mov	r0, r5
   182bc:	f000 fd95 	bl	18dea <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   182c0:	fab0 f080 	clz	r0, r0
   182c4:	9401      	str	r4, [sp, #4]
   182c6:	ab24      	add	r3, sp, #144	; 0x90
   182c8:	0940      	lsrs	r0, r0, #5
   182ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   182ce:	8863      	ldrh	r3, [r4, #2]
   182d0:	3301      	adds	r3, #1
   182d2:	b21b      	sxth	r3, r3
   182d4:	9300      	str	r3, [sp, #0]
   182d6:	a914      	add	r1, sp, #80	; 0x50
   182d8:	2300      	movs	r3, #0
   182da:	f850 2c88 	ldr.w	r2, [r0, #-136]
   182de:	4608      	mov	r0, r1
   182e0:	f000 fcb4 	bl	18c4c <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   182e4:	aa14      	add	r2, sp, #80	; 0x50
   182e6:	4639      	mov	r1, r7
   182e8:	4640      	mov	r0, r8
   182ea:	f000 fdd3 	bl	18e94 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   182ee:	4621      	mov	r1, r4
   182f0:	a814      	add	r0, sp, #80	; 0x50
   182f2:	f000 fc22 	bl	18b3a <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	memset(p2, 0, sizeof(p2));
   182f6:	ac02      	add	r4, sp, #8
	r = !EccPoint_isZero(_public, curve);
   182f8:	4607      	mov	r7, r0
	memset(p2, 0, sizeof(p2));
   182fa:	2208      	movs	r2, #8
   182fc:	2100      	movs	r1, #0
   182fe:	4620      	mov	r0, r4
   18300:	f001 fefc 	bl	1a0fc <memset>
	__asm__ __volatile__("" :: "g"(p2) : "memory");
	memset(tmp, 0, sizeof(tmp));
   18304:	2220      	movs	r2, #32
   18306:	2100      	movs	r1, #0
   18308:	4630      	mov	r0, r6
   1830a:	f001 fef7 	bl	1a0fc <memset>
	__asm__ __volatile__("" :: "g"(tmp) : "memory");
	memset(_private, 0, sizeof(_private));
   1830e:	2220      	movs	r2, #32
   18310:	2100      	movs	r1, #0
   18312:	4628      	mov	r0, r5
   18314:	f001 fef2 	bl	1a0fc <memset>
	__asm__ __volatile__("" :: "g"(_private) : "memory");

	return r;
}
   18318:	fab7 f087 	clz	r0, r7
   1831c:	0940      	lsrs	r0, r0, #5
   1831e:	b024      	add	sp, #144	; 0x90
   18320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00018324 <uECC_vli_add>:
{
   18324:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   18326:	2400      	movs	r4, #0
{
   18328:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   1832a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1832c:	b265      	sxtb	r5, r4
   1832e:	42ab      	cmp	r3, r5
   18330:	dc00      	bgt.n	18334 <uECC_vli_add+0x10>
}
   18332:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   18334:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   18338:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1833c:	4435      	add	r5, r6
   1833e:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   18340:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   18342:	bf8c      	ite	hi
   18344:	2601      	movhi	r6, #1
   18346:	2600      	movls	r6, #0
		result[i] = sum;
   18348:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1834c:	bf18      	it	ne
   1834e:	4630      	movne	r0, r6
		result[i] = sum;
   18350:	3401      	adds	r4, #1
   18352:	e7eb      	b.n	1832c <uECC_vli_add+0x8>

00018354 <uECC_vli_rshift1>:
	vli += num_words;
   18354:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   18358:	2300      	movs	r3, #0
	while (vli-- > end) {
   1835a:	4288      	cmp	r0, r1
   1835c:	d300      	bcc.n	18360 <uECC_vli_rshift1+0xc>
}
   1835e:	4770      	bx	lr
		uECC_word_t temp = *vli;
   18360:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   18364:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   18368:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1836a:	07d3      	lsls	r3, r2, #31
   1836c:	e7f5      	b.n	1835a <uECC_vli_rshift1+0x6>

0001836e <vli_modInv_update>:
	if (!EVEN(uv)) {
   1836e:	6803      	ldr	r3, [r0, #0]
{
   18370:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   18372:	f013 0601 	ands.w	r6, r3, #1
{
   18376:	4605      	mov	r5, r0
   18378:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1837a:	d005      	beq.n	18388 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1837c:	4613      	mov	r3, r2
   1837e:	460a      	mov	r2, r1
   18380:	4601      	mov	r1, r0
   18382:	f7ff ffcf 	bl	18324 <uECC_vli_add>
   18386:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   18388:	4621      	mov	r1, r4
   1838a:	4628      	mov	r0, r5
   1838c:	f7ff ffe2 	bl	18354 <uECC_vli_rshift1>
	if (carry) {
   18390:	b146      	cbz	r6, 183a4 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   18392:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   18396:	3a01      	subs	r2, #1
   18398:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1839c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   183a0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   183a4:	bd70      	pop	{r4, r5, r6, pc}

000183a6 <uECC_vli_mult>:
{
   183a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   183aa:	2500      	movs	r5, #0
{
   183ac:	b087      	sub	sp, #28
   183ae:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   183b2:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   183b4:	462a      	mov	r2, r5
   183b6:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   183ba:	4543      	cmp	r3, r8
   183bc:	dc16      	bgt.n	183ec <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   183be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   183c2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   183c6:	9502      	str	r5, [sp, #8]
   183c8:	f04f 0a00 	mov.w	sl, #0
   183cc:	fa5f f58a 	uxtb.w	r5, sl
   183d0:	eb05 0c03 	add.w	ip, r5, r3
   183d4:	9e02      	ldr	r6, [sp, #8]
   183d6:	fa4f fc8c 	sxtb.w	ip, ip
   183da:	45b4      	cmp	ip, r6
   183dc:	db2d      	blt.n	1843a <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   183de:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   183e2:	f840 2c04 	str.w	r2, [r0, #-4]
}
   183e6:	b007      	add	sp, #28
   183e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183ec:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   183ee:	f04f 0c00 	mov.w	ip, #0
   183f2:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   183f6:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   183f8:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   183fc:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   183fe:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   18402:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   18406:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1840a:	fba7 ab06 	umull	sl, fp, r7, r6
   1840e:	eb1a 0601 	adds.w	r6, sl, r1
   18412:	f10c 0c01 	add.w	ip, ip, #1
   18416:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1841a:	fa4f fa8c 	sxtb.w	sl, ip
   1841e:	bf2c      	ite	cs
   18420:	2201      	movcs	r2, #1
   18422:	2200      	movcc	r2, #0
   18424:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   18426:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   18428:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1842a:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1842c:	dde4      	ble.n	183f8 <uECC_vli_mult+0x52>
		result[k] = r0;
   1842e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   18432:	463a      	mov	r2, r7
   18434:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   18436:	4674      	mov	r4, lr
   18438:	e7bd      	b.n	183b6 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1843a:	3501      	adds	r5, #1
   1843c:	b26d      	sxtb	r5, r5
   1843e:	9e01      	ldr	r6, [sp, #4]
   18440:	9900      	ldr	r1, [sp, #0]
   18442:	ebac 0e05 	sub.w	lr, ip, r5
   18446:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   1844a:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   1844e:	4626      	mov	r6, r4
   18450:	2400      	movs	r4, #0
   18452:	429d      	cmp	r5, r3
   18454:	db05      	blt.n	18462 <uECC_vli_mult+0xbc>
		result[k] = r0;
   18456:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   1845a:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1845e:	4632      	mov	r2, r6
   18460:	e7b4      	b.n	183cc <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   18462:	e9cd 2604 	strd	r2, r6, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   18466:	f85e 7904 	ldr.w	r7, [lr], #-4
   1846a:	f85b 8b04 	ldr.w	r8, [fp], #4
	r01 += p;
   1846e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   18472:	fba8 8907 	umull	r8, r9, r8, r7
   18476:	eb18 0601 	adds.w	r6, r8, r1
   1847a:	eb59 0702 	adcs.w	r7, r9, r2
   1847e:	bf2c      	ite	cs
   18480:	2201      	movcs	r2, #1
   18482:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   18484:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   18486:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   18488:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   1848a:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   1848c:	463e      	mov	r6, r7
   1848e:	e7e0      	b.n	18452 <uECC_vli_mult+0xac>

00018490 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   18490:	2300      	movs	r3, #0
{
   18492:	b510      	push	{r4, lr}
		 vli[i] = 0;
   18494:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   18496:	b25a      	sxtb	r2, r3
   18498:	4291      	cmp	r1, r2
   1849a:	dc00      	bgt.n	1849e <uECC_vli_clear+0xe>
}
   1849c:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1849e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   184a2:	3301      	adds	r3, #1
   184a4:	e7f7      	b.n	18496 <uECC_vli_clear+0x6>

000184a6 <uECC_vli_isZero>:
{
   184a6:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   184a8:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   184aa:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   184ac:	b25c      	sxtb	r4, r3
   184ae:	42a1      	cmp	r1, r4
   184b0:	dc03      	bgt.n	184ba <uECC_vli_isZero+0x14>
}
   184b2:	fab2 f082 	clz	r0, r2
   184b6:	0940      	lsrs	r0, r0, #5
   184b8:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   184ba:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   184be:	3301      	adds	r3, #1
   184c0:	4322      	orrs	r2, r4
   184c2:	e7f3      	b.n	184ac <uECC_vli_isZero+0x6>

000184c4 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   184c4:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   184c6:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   184c8:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   184cc:	f001 011f 	and.w	r1, r1, #31
   184d0:	fa03 f101 	lsl.w	r1, r3, r1
}
   184d4:	4008      	ands	r0, r1
   184d6:	4770      	bx	lr

000184d8 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   184d8:	3901      	subs	r1, #1
   184da:	b249      	sxtb	r1, r1
   184dc:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   184e0:	2900      	cmp	r1, #0
   184e2:	da04      	bge.n	184ee <uECC_vli_numBits+0x16>
	return (i + 1);
   184e4:	3101      	adds	r1, #1
   184e6:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   184e8:	b941      	cbnz	r1, 184fc <uECC_vli_numBits+0x24>
		return 0;
   184ea:	4608      	mov	r0, r1
}
   184ec:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   184ee:	f853 2904 	ldr.w	r2, [r3], #-4
   184f2:	2a00      	cmp	r2, #0
   184f4:	d1f6      	bne.n	184e4 <uECC_vli_numBits+0xc>
   184f6:	3901      	subs	r1, #1
   184f8:	b249      	sxtb	r1, r1
   184fa:	e7f1      	b.n	184e0 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   184fc:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   18500:	3b01      	subs	r3, #1
   18502:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   18506:	2000      	movs	r0, #0
   18508:	b923      	cbnz	r3, 18514 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1850a:	3901      	subs	r1, #1
   1850c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   18510:	b208      	sxth	r0, r1
   18512:	4770      	bx	lr
		digit >>= 1;
   18514:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   18516:	3001      	adds	r0, #1
   18518:	e7f6      	b.n	18508 <uECC_vli_numBits+0x30>

0001851a <uECC_vli_set>:
{
   1851a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1851c:	2300      	movs	r3, #0
   1851e:	b25c      	sxtb	r4, r3
   18520:	42a2      	cmp	r2, r4
   18522:	dc00      	bgt.n	18526 <uECC_vli_set+0xc>
}
   18524:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   18526:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1852a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   1852e:	3301      	adds	r3, #1
   18530:	e7f5      	b.n	1851e <uECC_vli_set+0x4>

00018532 <uECC_vli_cmp_unsafe>:
{
   18532:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   18534:	3a01      	subs	r2, #1
   18536:	b252      	sxtb	r2, r2
   18538:	0093      	lsls	r3, r2, #2
   1853a:	2a00      	cmp	r2, #0
   1853c:	da01      	bge.n	18542 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1853e:	2000      	movs	r0, #0
}
   18540:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   18542:	58c5      	ldr	r5, [r0, r3]
   18544:	58cc      	ldr	r4, [r1, r3]
   18546:	42a5      	cmp	r5, r4
   18548:	d805      	bhi.n	18556 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1854a:	f1a3 0304 	sub.w	r3, r3, #4
   1854e:	d304      	bcc.n	1855a <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   18550:	3a01      	subs	r2, #1
   18552:	b252      	sxtb	r2, r2
   18554:	e7f1      	b.n	1853a <uECC_vli_cmp_unsafe+0x8>
			return 1;
   18556:	2001      	movs	r0, #1
   18558:	e7f2      	b.n	18540 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1855a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1855e:	e7ef      	b.n	18540 <uECC_vli_cmp_unsafe+0xe>

00018560 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   18560:	3a01      	subs	r2, #1
   18562:	b252      	sxtb	r2, r2
{
   18564:	b570      	push	{r4, r5, r6, lr}
   18566:	0093      	lsls	r3, r2, #2
	uECC_word_t diff = 0;
   18568:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1856a:	2a00      	cmp	r2, #0
   1856c:	da03      	bge.n	18576 <uECC_vli_equal+0x16>
}
   1856e:	1c20      	adds	r0, r4, #0
   18570:	bf18      	it	ne
   18572:	2001      	movne	r0, #1
   18574:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   18576:	58c5      	ldr	r5, [r0, r3]
   18578:	58ce      	ldr	r6, [r1, r3]
	for (i = num_words - 1; i >= 0; --i) {
   1857a:	3a01      	subs	r2, #1
		diff |= (left[i] ^ right[i]);
   1857c:	4075      	eors	r5, r6
   1857e:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   18580:	b252      	sxtb	r2, r2
   18582:	3b04      	subs	r3, #4
   18584:	e7f1      	b.n	1856a <uECC_vli_equal+0xa>

00018586 <uECC_vli_sub>:
{
   18586:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   18588:	2400      	movs	r4, #0
{
   1858a:	4607      	mov	r7, r0
   1858c:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1858e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   18590:	b265      	sxtb	r5, r4
   18592:	45ac      	cmp	ip, r5
   18594:	dc00      	bgt.n	18598 <uECC_vli_sub+0x12>
}
   18596:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   18598:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   1859c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   185a0:	1a35      	subs	r5, r6, r0
   185a2:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   185a4:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   185a6:	bf34      	ite	cc
   185a8:	2601      	movcc	r6, #1
   185aa:	2600      	movcs	r6, #0
		result[i] = diff;
   185ac:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   185b0:	bf18      	it	ne
   185b2:	4630      	movne	r0, r6
		result[i] = diff;
   185b4:	3401      	adds	r4, #1
   185b6:	e7eb      	b.n	18590 <uECC_vli_sub+0xa>

000185b8 <uECC_vli_modAdd>:
{
   185b8:	b570      	push	{r4, r5, r6, lr}
   185ba:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   185be:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   185c0:	4623      	mov	r3, r4
{
   185c2:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   185c4:	f7ff feae 	bl	18324 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   185c8:	b930      	cbnz	r0, 185d8 <uECC_vli_modAdd+0x20>
   185ca:	4622      	mov	r2, r4
   185cc:	4629      	mov	r1, r5
   185ce:	4630      	mov	r0, r6
   185d0:	f7ff ffaf 	bl	18532 <uECC_vli_cmp_unsafe>
   185d4:	2801      	cmp	r0, #1
   185d6:	d007      	beq.n	185e8 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   185d8:	4623      	mov	r3, r4
   185da:	4632      	mov	r2, r6
   185dc:	4629      	mov	r1, r5
   185de:	4628      	mov	r0, r5
}
   185e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   185e4:	f7ff bfcf 	b.w	18586 <uECC_vli_sub>
}
   185e8:	bd70      	pop	{r4, r5, r6, pc}

000185ea <uECC_vli_modSub>:
{
   185ea:	b570      	push	{r4, r5, r6, lr}
   185ec:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   185f0:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   185f2:	4623      	mov	r3, r4
{
   185f4:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   185f6:	f7ff ffc6 	bl	18586 <uECC_vli_sub>
	if (l_borrow) {
   185fa:	b138      	cbz	r0, 1860c <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   185fc:	4623      	mov	r3, r4
   185fe:	4632      	mov	r2, r6
   18600:	4629      	mov	r1, r5
   18602:	4628      	mov	r0, r5
}
   18604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   18608:	f7ff be8c 	b.w	18324 <uECC_vli_add>
}
   1860c:	bd70      	pop	{r4, r5, r6, pc}

0001860e <uECC_vli_mmod>:
{
   1860e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18612:	b0a5      	sub	sp, #148	; 0x94
   18614:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   18616:	ab14      	add	r3, sp, #80	; 0x50
   18618:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1861c:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   1861e:	4629      	mov	r1, r5
   18620:	4610      	mov	r0, r2
{
   18622:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   18624:	f7ff ff58 	bl	184d8 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   18628:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   1862c:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1862e:	2c00      	cmp	r4, #0
   18630:	4626      	mov	r6, r4
   18632:	bfb8      	it	lt
   18634:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   18638:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1863a:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1863e:	f003 031f 	and.w	r3, r3, #31
   18642:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   18646:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   18648:	bf58      	it	pl
   1864a:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   1864e:	4631      	mov	r1, r6
   18650:	f7ff ff1e 	bl	18490 <uECC_vli_clear>
	if (bit_shift > 0) {
   18654:	f1b8 0f00 	cmp.w	r8, #0
   18658:	b230      	sxth	r0, r6
   1865a:	dd2d      	ble.n	186b8 <uECC_vli_mmod+0xaa>
   1865c:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1865e:	2200      	movs	r2, #0
   18660:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   18664:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   18668:	4613      	mov	r3, r2
   1866a:	429d      	cmp	r5, r3
   1866c:	d819      	bhi.n	186a2 <uECC_vli_mmod+0x94>
		for (i = 0; i < num_words * 2; ++i) {
   1866e:	b22f      	sxth	r7, r5
   18670:	007b      	lsls	r3, r7, #1
   18672:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   18674:	ab04      	add	r3, sp, #16
   18676:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1867a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   1867e:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   18680:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   18682:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   18686:	2c00      	cmp	r4, #0
   18688:	da54      	bge.n	18734 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   1868a:	ab24      	add	r3, sp, #144	; 0x90
   1868c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   18690:	462a      	mov	r2, r5
   18692:	f856 1c88 	ldr.w	r1, [r6, #-136]
   18696:	4648      	mov	r0, r9
   18698:	f7ff ff3f 	bl	1851a <uECC_vli_set>
}
   1869c:	b025      	add	sp, #148	; 0x94
   1869e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   186a2:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   186a6:	fa06 f108 	lsl.w	r1, r6, r8
   186aa:	430a      	orrs	r2, r1
   186ac:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   186b0:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   186b2:	fa26 f20c 	lsr.w	r2, r6, ip
   186b6:	e7d8      	b.n	1866a <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   186b8:	ab04      	add	r3, sp, #16
   186ba:	462a      	mov	r2, r5
   186bc:	4639      	mov	r1, r7
   186be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   186c2:	f7ff ff2a 	bl	1851a <uECC_vli_set>
   186c6:	e7d2      	b.n	1866e <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   186c8:	fa0f fe82 	sxth.w	lr, r2
   186cc:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   186d0:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   186d4:	ab24      	add	r3, sp, #144	; 0x90
   186d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   186da:	3001      	adds	r0, #1
   186dc:	f852 3c80 	ldr.w	r3, [r2, #-128]
   186e0:	440b      	add	r3, r1
   186e2:	ebbb 0303 	subs.w	r3, fp, r3
   186e6:	bf34      	ite	cc
   186e8:	2201      	movcc	r2, #1
   186ea:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   186ec:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   186ee:	bf18      	it	ne
   186f0:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   186f2:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   186f6:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   186fa:	9b01      	ldr	r3, [sp, #4]
   186fc:	b242      	sxtb	r2, r0
   186fe:	429a      	cmp	r2, r3
   18700:	dbe2      	blt.n	186c8 <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   18702:	1a73      	subs	r3, r6, r1
   18704:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   18706:	4629      	mov	r1, r5
   18708:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1870a:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1870c:	f7ff fe22 	bl	18354 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   18710:	ab24      	add	r3, sp, #144	; 0x90
   18712:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   18716:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   18718:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1871c:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   18720:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   18722:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   18726:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   18728:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   1872c:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1872e:	f7ff fe11 	bl	18354 <uECC_vli_rshift1>
   18732:	e7a8      	b.n	18686 <uECC_vli_mmod+0x78>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   18734:	ab24      	add	r3, sp, #144	; 0x90
   18736:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   18738:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1873c:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1873e:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   18742:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   18746:	e7d8      	b.n	186fa <uECC_vli_mmod+0xec>

00018748 <uECC_vli_modMult_fast>:
{
   18748:	b530      	push	{r4, r5, lr}
   1874a:	461c      	mov	r4, r3
   1874c:	b091      	sub	sp, #68	; 0x44
   1874e:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   18750:	f993 3000 	ldrsb.w	r3, [r3]
   18754:	4668      	mov	r0, sp
   18756:	f7ff fe26 	bl	183a6 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1875a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1875e:	4669      	mov	r1, sp
   18760:	4628      	mov	r0, r5
   18762:	4798      	blx	r3
}
   18764:	b011      	add	sp, #68	; 0x44
   18766:	bd30      	pop	{r4, r5, pc}

00018768 <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   18768:	4613      	mov	r3, r2
   1876a:	460a      	mov	r2, r1
   1876c:	f7ff bfec 	b.w	18748 <uECC_vli_modMult_fast>

00018770 <double_jacobian_default>:
{
   18770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   18774:	f993 6000 	ldrsb.w	r6, [r3]
{
   18778:	b092      	sub	sp, #72	; 0x48
   1877a:	4604      	mov	r4, r0
   1877c:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1877e:	4610      	mov	r0, r2
   18780:	4631      	mov	r1, r6
{
   18782:	4615      	mov	r5, r2
   18784:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   18786:	f7ff fe8e 	bl	184a6 <uECC_vli_isZero>
   1878a:	2800      	cmp	r0, #0
   1878c:	f040 8091 	bne.w	188b2 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   18790:	4642      	mov	r2, r8
   18792:	4649      	mov	r1, r9
   18794:	a802      	add	r0, sp, #8
   18796:	f7ff ffe7 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1879a:	4643      	mov	r3, r8
   1879c:	aa02      	add	r2, sp, #8
   1879e:	4621      	mov	r1, r4
   187a0:	a80a      	add	r0, sp, #40	; 0x28
   187a2:	f7ff ffd1 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   187a6:	a902      	add	r1, sp, #8
   187a8:	4608      	mov	r0, r1
   187aa:	4642      	mov	r2, r8
   187ac:	f7ff ffdc 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   187b0:	4643      	mov	r3, r8
   187b2:	462a      	mov	r2, r5
   187b4:	4649      	mov	r1, r9
   187b6:	4648      	mov	r0, r9
   187b8:	f7ff ffc6 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   187bc:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   187c0:	4642      	mov	r2, r8
   187c2:	4629      	mov	r1, r5
   187c4:	4628      	mov	r0, r5
   187c6:	f7ff ffcf 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   187ca:	463b      	mov	r3, r7
   187cc:	462a      	mov	r2, r5
   187ce:	4621      	mov	r1, r4
   187d0:	4620      	mov	r0, r4
   187d2:	9600      	str	r6, [sp, #0]
   187d4:	f7ff fef0 	bl	185b8 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   187d8:	463b      	mov	r3, r7
   187da:	462a      	mov	r2, r5
   187dc:	4629      	mov	r1, r5
   187de:	4628      	mov	r0, r5
   187e0:	9600      	str	r6, [sp, #0]
   187e2:	f7ff fee9 	bl	185b8 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   187e6:	463b      	mov	r3, r7
   187e8:	462a      	mov	r2, r5
   187ea:	4621      	mov	r1, r4
   187ec:	4628      	mov	r0, r5
   187ee:	9600      	str	r6, [sp, #0]
   187f0:	f7ff fefb 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   187f4:	4643      	mov	r3, r8
   187f6:	462a      	mov	r2, r5
   187f8:	4621      	mov	r1, r4
   187fa:	4620      	mov	r0, r4
   187fc:	f7ff ffa4 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   18800:	463b      	mov	r3, r7
   18802:	4622      	mov	r2, r4
   18804:	4621      	mov	r1, r4
   18806:	4628      	mov	r0, r5
   18808:	9600      	str	r6, [sp, #0]
   1880a:	f7ff fed5 	bl	185b8 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1880e:	463b      	mov	r3, r7
   18810:	9600      	str	r6, [sp, #0]
   18812:	462a      	mov	r2, r5
   18814:	4621      	mov	r1, r4
   18816:	4620      	mov	r0, r4
   18818:	f7ff fece 	bl	185b8 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1881c:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1881e:	07db      	lsls	r3, r3, #31
   18820:	d54a      	bpl.n	188b8 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   18822:	4633      	mov	r3, r6
   18824:	463a      	mov	r2, r7
   18826:	4621      	mov	r1, r4
   18828:	4620      	mov	r0, r4
   1882a:	f7ff fd7b 	bl	18324 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1882e:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   18830:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   18832:	4620      	mov	r0, r4
   18834:	f7ff fd8e 	bl	18354 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   18838:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1883c:	3b01      	subs	r3, #1
   1883e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   18842:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   18846:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1884a:	4642      	mov	r2, r8
   1884c:	4621      	mov	r1, r4
   1884e:	4628      	mov	r0, r5
   18850:	f7ff ff8a 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   18854:	463b      	mov	r3, r7
   18856:	aa0a      	add	r2, sp, #40	; 0x28
   18858:	4629      	mov	r1, r5
   1885a:	4628      	mov	r0, r5
   1885c:	9600      	str	r6, [sp, #0]
   1885e:	f7ff fec4 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   18862:	463b      	mov	r3, r7
   18864:	aa0a      	add	r2, sp, #40	; 0x28
   18866:	4629      	mov	r1, r5
   18868:	4628      	mov	r0, r5
   1886a:	9600      	str	r6, [sp, #0]
   1886c:	f7ff febd 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   18870:	a90a      	add	r1, sp, #40	; 0x28
   18872:	4608      	mov	r0, r1
   18874:	463b      	mov	r3, r7
   18876:	462a      	mov	r2, r5
   18878:	9600      	str	r6, [sp, #0]
   1887a:	f7ff feb6 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1887e:	4643      	mov	r3, r8
   18880:	aa0a      	add	r2, sp, #40	; 0x28
   18882:	4621      	mov	r1, r4
   18884:	4620      	mov	r0, r4
   18886:	f7ff ff5f 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1888a:	aa02      	add	r2, sp, #8
   1888c:	463b      	mov	r3, r7
   1888e:	4610      	mov	r0, r2
   18890:	4621      	mov	r1, r4
   18892:	9600      	str	r6, [sp, #0]
   18894:	f7ff fea9 	bl	185ea <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   18898:	4632      	mov	r2, r6
   1889a:	4629      	mov	r1, r5
   1889c:	4620      	mov	r0, r4
   1889e:	f7ff fe3c 	bl	1851a <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   188a2:	4649      	mov	r1, r9
   188a4:	4628      	mov	r0, r5
   188a6:	f7ff fe38 	bl	1851a <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   188aa:	a902      	add	r1, sp, #8
   188ac:	4648      	mov	r0, r9
   188ae:	f7ff fe34 	bl	1851a <uECC_vli_set>
}
   188b2:	b012      	add	sp, #72	; 0x48
   188b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   188b8:	4631      	mov	r1, r6
   188ba:	4620      	mov	r0, r4
   188bc:	f7ff fd4a 	bl	18354 <uECC_vli_rshift1>
   188c0:	e7c3      	b.n	1884a <double_jacobian_default+0xda>

000188c2 <x_side_default>:
{
   188c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188c6:	4615      	mov	r5, r2
   188c8:	b08a      	sub	sp, #40	; 0x28
   188ca:	4604      	mov	r4, r0
   188cc:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   188ce:	221c      	movs	r2, #28
   188d0:	2100      	movs	r1, #0
   188d2:	a803      	add	r0, sp, #12
   188d4:	f001 fc12 	bl	1a0fc <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   188d8:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
   188da:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   188de:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   188e0:	462a      	mov	r2, r5
   188e2:	4641      	mov	r1, r8
   188e4:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   188e6:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   188e8:	f7ff ff3e 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   188ec:	4633      	mov	r3, r6
   188ee:	aa02      	add	r2, sp, #8
   188f0:	4621      	mov	r1, r4
   188f2:	4620      	mov	r0, r4
   188f4:	9700      	str	r7, [sp, #0]
   188f6:	f7ff fe78 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   188fa:	462b      	mov	r3, r5
   188fc:	4642      	mov	r2, r8
   188fe:	4621      	mov	r1, r4
   18900:	4620      	mov	r0, r4
   18902:	f7ff ff21 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   18906:	9700      	str	r7, [sp, #0]
   18908:	4633      	mov	r3, r6
   1890a:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1890e:	4621      	mov	r1, r4
   18910:	4620      	mov	r0, r4
   18912:	f7ff fe51 	bl	185b8 <uECC_vli_modAdd>
}
   18916:	b00a      	add	sp, #40	; 0x28
   18918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001891c <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1891c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18920:	b09b      	sub	sp, #108	; 0x6c
   18922:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   18924:	9c22      	ldr	r4, [sp, #136]	; 0x88
   18926:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1892a:	9500      	str	r5, [sp, #0]
{
   1892c:	4698      	mov	r8, r3
   1892e:	4607      	mov	r7, r0
   18930:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   18932:	4623      	mov	r3, r4
   18934:	4602      	mov	r2, r0
   18936:	4631      	mov	r1, r6
   18938:	a802      	add	r0, sp, #8
   1893a:	f7ff fe56 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1893e:	a902      	add	r1, sp, #8
   18940:	9a22      	ldr	r2, [sp, #136]	; 0x88
   18942:	4608      	mov	r0, r1
   18944:	f7ff ff10 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   18948:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1894a:	aa02      	add	r2, sp, #8
   1894c:	4639      	mov	r1, r7
   1894e:	4638      	mov	r0, r7
   18950:	f7ff fefa 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   18954:	9b22      	ldr	r3, [sp, #136]	; 0x88
   18956:	aa02      	add	r2, sp, #8
   18958:	4631      	mov	r1, r6
   1895a:	4630      	mov	r0, r6
   1895c:	f7ff fef4 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   18960:	4623      	mov	r3, r4
   18962:	464a      	mov	r2, r9
   18964:	4641      	mov	r1, r8
   18966:	a802      	add	r0, sp, #8
   18968:	9500      	str	r5, [sp, #0]
   1896a:	f7ff fe25 	bl	185b8 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1896e:	4623      	mov	r3, r4
   18970:	464a      	mov	r2, r9
   18972:	4641      	mov	r1, r8
   18974:	4640      	mov	r0, r8
   18976:	9500      	str	r5, [sp, #0]
   18978:	f7ff fe37 	bl	185ea <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1897c:	4623      	mov	r3, r4
   1897e:	463a      	mov	r2, r7
   18980:	4631      	mov	r1, r6
   18982:	a80a      	add	r0, sp, #40	; 0x28
   18984:	9500      	str	r5, [sp, #0]
   18986:	f7ff fe30 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1898a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1898c:	aa0a      	add	r2, sp, #40	; 0x28
   1898e:	4649      	mov	r1, r9
   18990:	4648      	mov	r0, r9
   18992:	f7ff fed9 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   18996:	4623      	mov	r3, r4
   18998:	4632      	mov	r2, r6
   1899a:	4639      	mov	r1, r7
   1899c:	a80a      	add	r0, sp, #40	; 0x28
   1899e:	9500      	str	r5, [sp, #0]
   189a0:	f7ff fe0a 	bl	185b8 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   189a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   189a6:	4641      	mov	r1, r8
   189a8:	4630      	mov	r0, r6
   189aa:	f7ff fedd 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   189ae:	4623      	mov	r3, r4
   189b0:	aa0a      	add	r2, sp, #40	; 0x28
   189b2:	4631      	mov	r1, r6
   189b4:	4630      	mov	r0, r6
   189b6:	9500      	str	r5, [sp, #0]
   189b8:	f7ff fe17 	bl	185ea <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   189bc:	4623      	mov	r3, r4
   189be:	4632      	mov	r2, r6
   189c0:	4639      	mov	r1, r7
   189c2:	a812      	add	r0, sp, #72	; 0x48
   189c4:	9500      	str	r5, [sp, #0]
   189c6:	f7ff fe10 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   189ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   189cc:	aa12      	add	r2, sp, #72	; 0x48
   189ce:	4641      	mov	r1, r8
   189d0:	4640      	mov	r0, r8
   189d2:	f7ff feb9 	bl	18748 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   189d6:	4623      	mov	r3, r4
   189d8:	464a      	mov	r2, r9
   189da:	4641      	mov	r1, r8
   189dc:	4640      	mov	r0, r8
   189de:	9500      	str	r5, [sp, #0]
   189e0:	f7ff fe03 	bl	185ea <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   189e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   189e6:	a902      	add	r1, sp, #8
   189e8:	a812      	add	r0, sp, #72	; 0x48
   189ea:	f7ff febd 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   189ee:	a912      	add	r1, sp, #72	; 0x48
   189f0:	4623      	mov	r3, r4
   189f2:	aa0a      	add	r2, sp, #40	; 0x28
   189f4:	4608      	mov	r0, r1
   189f6:	9500      	str	r5, [sp, #0]
   189f8:	f7ff fdf7 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   189fc:	4623      	mov	r3, r4
   189fe:	463a      	mov	r2, r7
   18a00:	a912      	add	r1, sp, #72	; 0x48
   18a02:	a80a      	add	r0, sp, #40	; 0x28
   18a04:	9500      	str	r5, [sp, #0]
   18a06:	f7ff fdf0 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   18a0a:	a90a      	add	r1, sp, #40	; 0x28
   18a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   18a0e:	aa02      	add	r2, sp, #8
   18a10:	4608      	mov	r0, r1
   18a12:	f7ff fe99 	bl	18748 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   18a16:	4623      	mov	r3, r4
   18a18:	464a      	mov	r2, r9
   18a1a:	a90a      	add	r1, sp, #40	; 0x28
   18a1c:	4648      	mov	r0, r9
   18a1e:	9500      	str	r5, [sp, #0]
   18a20:	f7ff fde3 	bl	185ea <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   18a24:	462a      	mov	r2, r5
   18a26:	a912      	add	r1, sp, #72	; 0x48
   18a28:	4638      	mov	r0, r7
   18a2a:	f7ff fd76 	bl	1851a <uECC_vli_set>
}
   18a2e:	b01b      	add	sp, #108	; 0x6c
   18a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00018a34 <uECC_vli_modInv>:
{
   18a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a36:	460f      	mov	r7, r1
   18a38:	b0a1      	sub	sp, #132	; 0x84
   18a3a:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   18a3c:	4619      	mov	r1, r3
   18a3e:	4638      	mov	r0, r7
{
   18a40:	4615      	mov	r5, r2
   18a42:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   18a44:	f7ff fd2f 	bl	184a6 <uECC_vli_isZero>
   18a48:	b120      	cbz	r0, 18a54 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   18a4a:	4630      	mov	r0, r6
   18a4c:	f7ff fd20 	bl	18490 <uECC_vli_clear>
}
   18a50:	b021      	add	sp, #132	; 0x84
   18a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   18a54:	4622      	mov	r2, r4
   18a56:	4639      	mov	r1, r7
   18a58:	4668      	mov	r0, sp
   18a5a:	f7ff fd5e 	bl	1851a <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   18a5e:	4629      	mov	r1, r5
   18a60:	a808      	add	r0, sp, #32
   18a62:	f7ff fd5a 	bl	1851a <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   18a66:	a810      	add	r0, sp, #64	; 0x40
   18a68:	4621      	mov	r1, r4
   18a6a:	f7ff fd11 	bl	18490 <uECC_vli_clear>
	u[0] = 1;
   18a6e:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   18a70:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   18a72:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   18a74:	f7ff fd0c 	bl	18490 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   18a78:	4622      	mov	r2, r4
   18a7a:	a908      	add	r1, sp, #32
   18a7c:	4668      	mov	r0, sp
   18a7e:	f7ff fd58 	bl	18532 <uECC_vli_cmp_unsafe>
   18a82:	b928      	cbnz	r0, 18a90 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   18a84:	4622      	mov	r2, r4
   18a86:	a910      	add	r1, sp, #64	; 0x40
   18a88:	4630      	mov	r0, r6
   18a8a:	f7ff fd46 	bl	1851a <uECC_vli_set>
   18a8e:	e7df      	b.n	18a50 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   18a90:	9b00      	ldr	r3, [sp, #0]
   18a92:	07da      	lsls	r2, r3, #31
   18a94:	d409      	bmi.n	18aaa <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   18a96:	4621      	mov	r1, r4
   18a98:	4668      	mov	r0, sp
   18a9a:	f7ff fc5b 	bl	18354 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   18a9e:	4622      	mov	r2, r4
   18aa0:	4629      	mov	r1, r5
   18aa2:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   18aa4:	f7ff fc63 	bl	1836e <vli_modInv_update>
   18aa8:	e7e6      	b.n	18a78 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   18aaa:	9b08      	ldr	r3, [sp, #32]
   18aac:	07db      	lsls	r3, r3, #31
   18aae:	d407      	bmi.n	18ac0 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   18ab0:	4621      	mov	r1, r4
   18ab2:	a808      	add	r0, sp, #32
   18ab4:	f7ff fc4e 	bl	18354 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   18ab8:	4622      	mov	r2, r4
   18aba:	4629      	mov	r1, r5
   18abc:	a818      	add	r0, sp, #96	; 0x60
   18abe:	e7f1      	b.n	18aa4 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   18ac0:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   18ac2:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   18ac4:	dd1c      	ble.n	18b00 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   18ac6:	aa08      	add	r2, sp, #32
   18ac8:	4669      	mov	r1, sp
   18aca:	4668      	mov	r0, sp
   18acc:	f7ff fd5b 	bl	18586 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   18ad0:	4621      	mov	r1, r4
   18ad2:	4668      	mov	r0, sp
   18ad4:	f7ff fc3e 	bl	18354 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   18ad8:	4622      	mov	r2, r4
   18ada:	a918      	add	r1, sp, #96	; 0x60
   18adc:	a810      	add	r0, sp, #64	; 0x40
   18ade:	f7ff fd28 	bl	18532 <uECC_vli_cmp_unsafe>
   18ae2:	2800      	cmp	r0, #0
   18ae4:	da05      	bge.n	18af2 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   18ae6:	a910      	add	r1, sp, #64	; 0x40
   18ae8:	4623      	mov	r3, r4
   18aea:	462a      	mov	r2, r5
   18aec:	4608      	mov	r0, r1
   18aee:	f7ff fc19 	bl	18324 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   18af2:	a910      	add	r1, sp, #64	; 0x40
   18af4:	4623      	mov	r3, r4
   18af6:	aa18      	add	r2, sp, #96	; 0x60
   18af8:	4608      	mov	r0, r1
   18afa:	f7ff fd44 	bl	18586 <uECC_vli_sub>
   18afe:	e7ce      	b.n	18a9e <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   18b00:	a908      	add	r1, sp, #32
   18b02:	466a      	mov	r2, sp
   18b04:	4608      	mov	r0, r1
   18b06:	f7ff fd3e 	bl	18586 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   18b0a:	4621      	mov	r1, r4
   18b0c:	a808      	add	r0, sp, #32
   18b0e:	f7ff fc21 	bl	18354 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   18b12:	4622      	mov	r2, r4
   18b14:	a910      	add	r1, sp, #64	; 0x40
   18b16:	a818      	add	r0, sp, #96	; 0x60
   18b18:	f7ff fd0b 	bl	18532 <uECC_vli_cmp_unsafe>
   18b1c:	2800      	cmp	r0, #0
   18b1e:	da05      	bge.n	18b2c <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   18b20:	a918      	add	r1, sp, #96	; 0x60
   18b22:	4623      	mov	r3, r4
   18b24:	462a      	mov	r2, r5
   18b26:	4608      	mov	r0, r1
   18b28:	f7ff fbfc 	bl	18324 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   18b2c:	a918      	add	r1, sp, #96	; 0x60
   18b2e:	4623      	mov	r3, r4
   18b30:	aa10      	add	r2, sp, #64	; 0x40
   18b32:	4608      	mov	r0, r1
   18b34:	f7ff fd27 	bl	18586 <uECC_vli_sub>
   18b38:	e7be      	b.n	18ab8 <uECC_vli_modInv+0x84>

00018b3a <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   18b3a:	7809      	ldrb	r1, [r1, #0]
   18b3c:	0049      	lsls	r1, r1, #1
   18b3e:	b249      	sxtb	r1, r1
   18b40:	f7ff bcb1 	b.w	184a6 <uECC_vli_isZero>

00018b44 <apply_z>:
{
   18b44:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b46:	4615      	mov	r5, r2
   18b48:	b089      	sub	sp, #36	; 0x24
   18b4a:	461c      	mov	r4, r3
   18b4c:	4607      	mov	r7, r0
   18b4e:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   18b50:	461a      	mov	r2, r3
   18b52:	4629      	mov	r1, r5
   18b54:	4668      	mov	r0, sp
   18b56:	f7ff fe07 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   18b5a:	4623      	mov	r3, r4
   18b5c:	466a      	mov	r2, sp
   18b5e:	4639      	mov	r1, r7
   18b60:	4638      	mov	r0, r7
   18b62:	f7ff fdf1 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   18b66:	4623      	mov	r3, r4
   18b68:	462a      	mov	r2, r5
   18b6a:	4669      	mov	r1, sp
   18b6c:	4668      	mov	r0, sp
   18b6e:	f7ff fdeb 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   18b72:	4623      	mov	r3, r4
   18b74:	466a      	mov	r2, sp
   18b76:	4631      	mov	r1, r6
   18b78:	4630      	mov	r0, r6
   18b7a:	f7ff fde5 	bl	18748 <uECC_vli_modMult_fast>
}
   18b7e:	b009      	add	sp, #36	; 0x24
   18b80:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018b82 <XYcZ_add>:
{
   18b82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18b86:	b08b      	sub	sp, #44	; 0x2c
   18b88:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   18b8a:	9d12      	ldr	r5, [sp, #72]	; 0x48
   18b8c:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   18b90:	9600      	str	r6, [sp, #0]
{
   18b92:	461f      	mov	r7, r3
   18b94:	4680      	mov	r8, r0
   18b96:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   18b98:	462b      	mov	r3, r5
   18b9a:	4602      	mov	r2, r0
   18b9c:	4621      	mov	r1, r4
   18b9e:	a802      	add	r0, sp, #8
   18ba0:	f7ff fd23 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   18ba4:	a902      	add	r1, sp, #8
   18ba6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18ba8:	4608      	mov	r0, r1
   18baa:	f7ff fddd 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   18bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18bb0:	aa02      	add	r2, sp, #8
   18bb2:	4641      	mov	r1, r8
   18bb4:	4640      	mov	r0, r8
   18bb6:	f7ff fdc7 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   18bba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18bbc:	aa02      	add	r2, sp, #8
   18bbe:	4621      	mov	r1, r4
   18bc0:	4620      	mov	r0, r4
   18bc2:	f7ff fdc1 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   18bc6:	462b      	mov	r3, r5
   18bc8:	464a      	mov	r2, r9
   18bca:	4639      	mov	r1, r7
   18bcc:	4638      	mov	r0, r7
   18bce:	9600      	str	r6, [sp, #0]
   18bd0:	f7ff fd0b 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   18bd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18bd6:	4639      	mov	r1, r7
   18bd8:	a802      	add	r0, sp, #8
   18bda:	f7ff fdc5 	bl	18768 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   18bde:	a902      	add	r1, sp, #8
   18be0:	462b      	mov	r3, r5
   18be2:	4642      	mov	r2, r8
   18be4:	4608      	mov	r0, r1
   18be6:	9600      	str	r6, [sp, #0]
   18be8:	f7ff fcff 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   18bec:	a902      	add	r1, sp, #8
   18bee:	462b      	mov	r3, r5
   18bf0:	4622      	mov	r2, r4
   18bf2:	4608      	mov	r0, r1
   18bf4:	9600      	str	r6, [sp, #0]
   18bf6:	f7ff fcf8 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   18bfa:	462b      	mov	r3, r5
   18bfc:	4642      	mov	r2, r8
   18bfe:	4621      	mov	r1, r4
   18c00:	4620      	mov	r0, r4
   18c02:	9600      	str	r6, [sp, #0]
   18c04:	f7ff fcf1 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   18c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18c0a:	4622      	mov	r2, r4
   18c0c:	4649      	mov	r1, r9
   18c0e:	4648      	mov	r0, r9
   18c10:	f7ff fd9a 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   18c14:	462b      	mov	r3, r5
   18c16:	aa02      	add	r2, sp, #8
   18c18:	4641      	mov	r1, r8
   18c1a:	4620      	mov	r0, r4
   18c1c:	9600      	str	r6, [sp, #0]
   18c1e:	f7ff fce4 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   18c22:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18c24:	4622      	mov	r2, r4
   18c26:	4639      	mov	r1, r7
   18c28:	4638      	mov	r0, r7
   18c2a:	f7ff fd8d 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   18c2e:	462b      	mov	r3, r5
   18c30:	464a      	mov	r2, r9
   18c32:	4639      	mov	r1, r7
   18c34:	4638      	mov	r0, r7
   18c36:	9600      	str	r6, [sp, #0]
   18c38:	f7ff fcd7 	bl	185ea <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   18c3c:	4632      	mov	r2, r6
   18c3e:	a902      	add	r1, sp, #8
   18c40:	4620      	mov	r0, r4
   18c42:	f7ff fc6a 	bl	1851a <uECC_vli_set>
}
   18c46:	b00b      	add	sp, #44	; 0x2c
   18c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00018c4c <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   18c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c50:	b0b1      	sub	sp, #196	; 0xc4
   18c52:	e9cd 0104 	strd	r0, r1, [sp, #16]
   18c56:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   18c58:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   18c5a:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   18c5e:	a818      	add	r0, sp, #96	; 0x60
   18c60:	463a      	mov	r2, r7
{
   18c62:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   18c64:	f7ff fc59 	bl	1851a <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   18c68:	00bb      	lsls	r3, r7, #2
   18c6a:	9307      	str	r3, [sp, #28]
   18c6c:	9b05      	ldr	r3, [sp, #20]
   18c6e:	00ba      	lsls	r2, r7, #2
   18c70:	4413      	add	r3, r2
   18c72:	4619      	mov	r1, r3
   18c74:	463a      	mov	r2, r7
   18c76:	a828      	add	r0, sp, #160	; 0xa0
   18c78:	9302      	str	r3, [sp, #8]
   18c7a:	f7ff fc4e 	bl	1851a <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   18c7e:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   18c82:	2e00      	cmp	r6, #0
   18c84:	f000 8087 	beq.w	18d96 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   18c88:	462a      	mov	r2, r5
   18c8a:	4631      	mov	r1, r6
   18c8c:	a808      	add	r0, sp, #32
   18c8e:	f7ff fc44 	bl	1851a <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   18c92:	ae10      	add	r6, sp, #64	; 0x40
   18c94:	462a      	mov	r2, r5
   18c96:	a918      	add	r1, sp, #96	; 0x60
   18c98:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   18c9a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   18c9e:	f7ff fc3c 	bl	1851a <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   18ca2:	a928      	add	r1, sp, #160	; 0xa0
   18ca4:	4648      	mov	r0, r9
   18ca6:	f7ff fc38 	bl	1851a <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   18caa:	4623      	mov	r3, r4
   18cac:	aa08      	add	r2, sp, #32
   18cae:	a928      	add	r1, sp, #160	; 0xa0
   18cb0:	a818      	add	r0, sp, #96	; 0x60
   18cb2:	f7ff ff47 	bl	18b44 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   18cb6:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   18cba:	4623      	mov	r3, r4
   18cbc:	aa08      	add	r2, sp, #32
   18cbe:	a928      	add	r1, sp, #160	; 0xa0
   18cc0:	a818      	add	r0, sp, #96	; 0x60
   18cc2:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   18cc4:	4623      	mov	r3, r4
   18cc6:	aa08      	add	r2, sp, #32
   18cc8:	4649      	mov	r1, r9
   18cca:	4630      	mov	r0, r6
   18ccc:	f7ff ff3a 	bl	18b44 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   18cd0:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   18cd4:	3d02      	subs	r5, #2
   18cd6:	b22d      	sxth	r5, r5
   18cd8:	2d00      	cmp	r5, #0
   18cda:	dc63      	bgt.n	18da4 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   18cdc:	9b06      	ldr	r3, [sp, #24]
   18cde:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   18ce0:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   18ce2:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   18ce6:	ab10      	add	r3, sp, #64	; 0x40
   18ce8:	0176      	lsls	r6, r6, #5
   18cea:	43ed      	mvns	r5, r5
   18cec:	eb03 0806 	add.w	r8, r3, r6
   18cf0:	f005 0501 	and.w	r5, r5, #1
   18cf4:	ab20      	add	r3, sp, #128	; 0x80
   18cf6:	441e      	add	r6, r3
   18cf8:	016d      	lsls	r5, r5, #5
   18cfa:	ab10      	add	r3, sp, #64	; 0x40
   18cfc:	eb03 0905 	add.w	r9, r3, r5
   18d00:	ab20      	add	r3, sp, #128	; 0x80
   18d02:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   18d04:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   18d08:	462b      	mov	r3, r5
   18d0a:	464a      	mov	r2, r9
   18d0c:	4631      	mov	r1, r6
   18d0e:	4640      	mov	r0, r8
   18d10:	f7ff fe04 	bl	1891c <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   18d14:	4653      	mov	r3, sl
   18d16:	aa10      	add	r2, sp, #64	; 0x40
   18d18:	a918      	add	r1, sp, #96	; 0x60
   18d1a:	a808      	add	r0, sp, #32
   18d1c:	9700      	str	r7, [sp, #0]
   18d1e:	f7ff fc64 	bl	185ea <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   18d22:	a908      	add	r1, sp, #32
   18d24:	4623      	mov	r3, r4
   18d26:	4632      	mov	r2, r6
   18d28:	4608      	mov	r0, r1
   18d2a:	f7ff fd0d 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   18d2e:	a908      	add	r1, sp, #32
   18d30:	4623      	mov	r3, r4
   18d32:	9a05      	ldr	r2, [sp, #20]
   18d34:	4608      	mov	r0, r1
   18d36:	f7ff fd07 	bl	18748 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   18d3a:	a908      	add	r1, sp, #32
   18d3c:	463b      	mov	r3, r7
   18d3e:	4652      	mov	r2, sl
   18d40:	4608      	mov	r0, r1
   18d42:	f7ff fe77 	bl	18a34 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   18d46:	a908      	add	r1, sp, #32
   18d48:	4623      	mov	r3, r4
   18d4a:	9a02      	ldr	r2, [sp, #8]
   18d4c:	4608      	mov	r0, r1
   18d4e:	f7ff fcfb 	bl	18748 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   18d52:	a908      	add	r1, sp, #32
   18d54:	4623      	mov	r3, r4
   18d56:	4642      	mov	r2, r8
   18d58:	4608      	mov	r0, r1
   18d5a:	f7ff fcf5 	bl	18748 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   18d5e:	9400      	str	r4, [sp, #0]
   18d60:	4633      	mov	r3, r6
   18d62:	4642      	mov	r2, r8
   18d64:	4629      	mov	r1, r5
   18d66:	4648      	mov	r0, r9
   18d68:	f7ff ff0b 	bl	18b82 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   18d6c:	4623      	mov	r3, r4
   18d6e:	aa08      	add	r2, sp, #32
   18d70:	a920      	add	r1, sp, #128	; 0x80
   18d72:	a810      	add	r0, sp, #64	; 0x40
   18d74:	f7ff fee6 	bl	18b44 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   18d78:	463a      	mov	r2, r7
   18d7a:	a910      	add	r1, sp, #64	; 0x40
   18d7c:	9804      	ldr	r0, [sp, #16]
   18d7e:	f7ff fbcc 	bl	1851a <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   18d82:	9b04      	ldr	r3, [sp, #16]
   18d84:	9c07      	ldr	r4, [sp, #28]
   18d86:	4423      	add	r3, r4
   18d88:	a920      	add	r1, sp, #128	; 0x80
   18d8a:	4618      	mov	r0, r3
   18d8c:	f7ff fbc5 	bl	1851a <uECC_vli_set>
}
   18d90:	b031      	add	sp, #196	; 0xc4
   18d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   18d96:	4629      	mov	r1, r5
   18d98:	a808      	add	r0, sp, #32
   18d9a:	f7ff fb79 	bl	18490 <uECC_vli_clear>
		z[0] = 1;
   18d9e:	2301      	movs	r3, #1
   18da0:	9308      	str	r3, [sp, #32]
   18da2:	e776      	b.n	18c92 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   18da4:	4629      	mov	r1, r5
   18da6:	9806      	ldr	r0, [sp, #24]
   18da8:	f7ff fb8c 	bl	184c4 <uECC_vli_testBit>
   18dac:	fab0 f080 	clz	r0, r0
   18db0:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   18db2:	f1c0 0801 	rsb	r8, r0, #1
   18db6:	ea4f 1848 	mov.w	r8, r8, lsl #5
   18dba:	0140      	lsls	r0, r0, #5
   18dbc:	eb06 0b08 	add.w	fp, r6, r8
   18dc0:	eb06 0a00 	add.w	sl, r6, r0
   18dc4:	44c8      	add	r8, r9
   18dc6:	eb09 0300 	add.w	r3, r9, r0
   18dca:	4652      	mov	r2, sl
   18dcc:	4641      	mov	r1, r8
   18dce:	4658      	mov	r0, fp
   18dd0:	9400      	str	r4, [sp, #0]
   18dd2:	9303      	str	r3, [sp, #12]
   18dd4:	f7ff fda2 	bl	1891c <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   18dd8:	9400      	str	r4, [sp, #0]
   18dda:	4643      	mov	r3, r8
   18ddc:	465a      	mov	r2, fp
   18dde:	9903      	ldr	r1, [sp, #12]
   18de0:	4650      	mov	r0, sl
   18de2:	f7ff fece 	bl	18b82 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   18de6:	3d01      	subs	r5, #1
   18de8:	e775      	b.n	18cd6 <EccPoint_mult+0x8a>

00018dea <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   18dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   18dee:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
   18df2:	f114 051f 	adds.w	r5, r4, #31
   18df6:	bf48      	it	mi
   18df8:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
{
   18dfc:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   18dfe:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   18e02:	f345 1547 	sbfx	r5, r5, #5, #8
{
   18e06:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   18e08:	4601      	mov	r1, r0
   18e0a:	462b      	mov	r3, r5
   18e0c:	4632      	mov	r2, r6
   18e0e:	4638      	mov	r0, r7
   18e10:	f7ff fa88 	bl	18324 <uECC_vli_add>
   18e14:	b990      	cbnz	r0, 18e3c <regularize_k+0x52>
   18e16:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   18e1a:	da11      	bge.n	18e40 <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   18e1c:	4621      	mov	r1, r4
   18e1e:	4638      	mov	r0, r7
   18e20:	f7ff fb50 	bl	184c4 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   18e24:	1c04      	adds	r4, r0, #0
   18e26:	bf18      	it	ne
   18e28:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   18e2a:	462b      	mov	r3, r5
   18e2c:	4632      	mov	r2, r6
   18e2e:	4639      	mov	r1, r7
   18e30:	4640      	mov	r0, r8
   18e32:	f7ff fa77 	bl	18324 <uECC_vli_add>

	return carry;
}
   18e36:	4620      	mov	r0, r4
   18e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   18e3c:	2401      	movs	r4, #1
   18e3e:	e7f4      	b.n	18e2a <regularize_k+0x40>
   18e40:	4604      	mov	r4, r0
   18e42:	e7f2      	b.n	18e2a <regularize_k+0x40>

00018e44 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   18e44:	b530      	push	{r4, r5, lr}
   18e46:	4614      	mov	r4, r2
   18e48:	b095      	sub	sp, #84	; 0x54
   18e4a:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   18e4c:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   18e4e:	4623      	mov	r3, r4
{
   18e50:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   18e52:	a904      	add	r1, sp, #16
   18e54:	9102      	str	r1, [sp, #8]
   18e56:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   18e58:	f7ff ffc7 	bl	18dea <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   18e5c:	fab0 f080 	clz	r0, r0
   18e60:	ab14      	add	r3, sp, #80	; 0x50
   18e62:	0940      	lsrs	r0, r0, #5
   18e64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   18e68:	8863      	ldrh	r3, [r4, #2]
   18e6a:	9401      	str	r4, [sp, #4]
   18e6c:	3301      	adds	r3, #1
   18e6e:	b21b      	sxth	r3, r3
   18e70:	9300      	str	r3, [sp, #0]
   18e72:	f850 2c48 	ldr.w	r2, [r0, #-72]
   18e76:	2300      	movs	r3, #0
   18e78:	f104 0144 	add.w	r1, r4, #68	; 0x44
   18e7c:	4628      	mov	r0, r5
   18e7e:	f7ff fee5 	bl	18c4c <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   18e82:	4621      	mov	r1, r4
   18e84:	4628      	mov	r0, r5
   18e86:	f7ff fe58 	bl	18b3a <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   18e8a:	fab0 f080 	clz	r0, r0
   18e8e:	0940      	lsrs	r0, r0, #5
   18e90:	b015      	add	sp, #84	; 0x54
   18e92:	bd30      	pop	{r4, r5, pc}

00018e94 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   18e94:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   18e96:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   18e98:	1e4f      	subs	r7, r1, #1
   18e9a:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   18e9c:	428c      	cmp	r4, r1
   18e9e:	f105 0501 	add.w	r5, r5, #1
   18ea2:	db00      	blt.n	18ea6 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   18ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   18ea6:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   18ea8:	f023 0603 	bic.w	r6, r3, #3
   18eac:	f003 0303 	and.w	r3, r3, #3
   18eb0:	5996      	ldr	r6, [r2, r6]
   18eb2:	00db      	lsls	r3, r3, #3
   18eb4:	fa26 f303 	lsr.w	r3, r6, r3
   18eb8:	5503      	strb	r3, [r0, r4]
   18eba:	e7ee      	b.n	18e9a <uECC_vli_nativeToBytes+0x6>

00018ebc <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   18ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ebe:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   18ec0:	1cd1      	adds	r1, r2, #3
   18ec2:	bf48      	it	mi
   18ec4:	1d91      	addmi	r1, r2, #6
{
   18ec6:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   18ec8:	f341 0187 	sbfx	r1, r1, #2, #8
{
   18ecc:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   18ece:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   18ed0:	f7ff fade 	bl	18490 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   18ed4:	2100      	movs	r1, #0
   18ed6:	b24a      	sxtb	r2, r1
   18ed8:	42a2      	cmp	r2, r4
   18eda:	f101 0101 	add.w	r1, r1, #1
   18ede:	db00      	blt.n	18ee2 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   18ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   18ee2:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   18ee4:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   18ee8:	5cb2      	ldrb	r2, [r6, r2]
   18eea:	f003 0303 	and.w	r3, r3, #3
   18eee:	00db      	lsls	r3, r3, #3
   18ef0:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   18ef4:	582a      	ldr	r2, [r5, r0]
   18ef6:	431a      	orrs	r2, r3
   18ef8:	502a      	str	r2, [r5, r0]
   18efa:	e7ec      	b.n	18ed6 <uECC_vli_bytesToNative+0x1a>

00018efc <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   18efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f00:	b090      	sub	sp, #64	; 0x40
   18f02:	4606      	mov	r6, r0
   18f04:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   18f06:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   18f0a:	f7ff fe16 	bl	18b3a <EccPoint_isZero>
   18f0e:	bb40      	cbnz	r0, 18f62 <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   18f10:	f104 0804 	add.w	r8, r4, #4
   18f14:	462a      	mov	r2, r5
   18f16:	4631      	mov	r1, r6
   18f18:	4640      	mov	r0, r8
   18f1a:	f7ff fb0a 	bl	18532 <uECC_vli_cmp_unsafe>
   18f1e:	2801      	cmp	r0, #1
   18f20:	d122      	bne.n	18f68 <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   18f22:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   18f26:	462a      	mov	r2, r5
   18f28:	4639      	mov	r1, r7
   18f2a:	4640      	mov	r0, r8
   18f2c:	f7ff fb01 	bl	18532 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   18f30:	2801      	cmp	r0, #1
   18f32:	d119      	bne.n	18f68 <uECC_valid_point+0x6c>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   18f34:	4622      	mov	r2, r4
   18f36:	4668      	mov	r0, sp
   18f38:	f7ff fc16 	bl	18768 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   18f3c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   18f40:	4622      	mov	r2, r4
   18f42:	4631      	mov	r1, r6
   18f44:	a808      	add	r0, sp, #32
   18f46:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   18f48:	462a      	mov	r2, r5
   18f4a:	a908      	add	r1, sp, #32
   18f4c:	4668      	mov	r0, sp
   18f4e:	f7ff fb07 	bl	18560 <uECC_vli_equal>
   18f52:	2800      	cmp	r0, #0
		return -3;
   18f54:	bf0c      	ite	eq
   18f56:	2000      	moveq	r0, #0
   18f58:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   18f5c:	b010      	add	sp, #64	; 0x40
   18f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   18f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f66:	e7f9      	b.n	18f5c <uECC_valid_point+0x60>
		return -2;
   18f68:	f06f 0001 	mvn.w	r0, #1
   18f6c:	e7f6      	b.n	18f5c <uECC_valid_point+0x60>

00018f6e <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   18f6e:	b570      	push	{r4, r5, r6, lr}
   18f70:	460c      	mov	r4, r1
   18f72:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   18f74:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   18f76:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   18f7a:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   18f7c:	4601      	mov	r1, r0
   18f7e:	4668      	mov	r0, sp
   18f80:	f7ff ff9c 	bl	18ebc <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   18f84:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   18f88:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   18f8c:	18b1      	adds	r1, r6, r2
   18f8e:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   18f92:	f7ff ff93 	bl	18ebc <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   18f96:	2210      	movs	r2, #16
   18f98:	4629      	mov	r1, r5
   18f9a:	4668      	mov	r0, sp
   18f9c:	f7ff fac9 	bl	18532 <uECC_vli_cmp_unsafe>
   18fa0:	b128      	cbz	r0, 18fae <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   18fa2:	4621      	mov	r1, r4
   18fa4:	4668      	mov	r0, sp
   18fa6:	f7ff ffa9 	bl	18efc <uECC_valid_point>
}
   18faa:	b010      	add	sp, #64	; 0x40
   18fac:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   18fae:	f06f 0003 	mvn.w	r0, #3
   18fb2:	e7fa      	b.n	18faa <uECC_valid_public_key+0x3c>

00018fb4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   18fb4:	78cb      	ldrb	r3, [r1, #3]
   18fb6:	7802      	ldrb	r2, [r0, #0]
   18fb8:	4053      	eors	r3, r2
   18fba:	7003      	strb	r3, [r0, #0]
   18fbc:	884b      	ldrh	r3, [r1, #2]
   18fbe:	7842      	ldrb	r2, [r0, #1]
   18fc0:	4053      	eors	r3, r2
   18fc2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   18fc4:	680a      	ldr	r2, [r1, #0]
   18fc6:	7883      	ldrb	r3, [r0, #2]
   18fc8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   18fcc:	7083      	strb	r3, [r0, #2]
   18fce:	680a      	ldr	r2, [r1, #0]
   18fd0:	78c3      	ldrb	r3, [r0, #3]
   18fd2:	4053      	eors	r3, r2
   18fd4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   18fd6:	79cb      	ldrb	r3, [r1, #7]
   18fd8:	7902      	ldrb	r2, [r0, #4]
   18fda:	4053      	eors	r3, r2
   18fdc:	7103      	strb	r3, [r0, #4]
   18fde:	88cb      	ldrh	r3, [r1, #6]
   18fe0:	7942      	ldrb	r2, [r0, #5]
   18fe2:	4053      	eors	r3, r2
   18fe4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   18fe6:	684a      	ldr	r2, [r1, #4]
   18fe8:	7983      	ldrb	r3, [r0, #6]
   18fea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   18fee:	7183      	strb	r3, [r0, #6]
   18ff0:	684a      	ldr	r2, [r1, #4]
   18ff2:	79c3      	ldrb	r3, [r0, #7]
   18ff4:	4053      	eors	r3, r2
   18ff6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   18ff8:	7acb      	ldrb	r3, [r1, #11]
   18ffa:	7a02      	ldrb	r2, [r0, #8]
   18ffc:	4053      	eors	r3, r2
   18ffe:	7203      	strb	r3, [r0, #8]
   19000:	7a42      	ldrb	r2, [r0, #9]
   19002:	894b      	ldrh	r3, [r1, #10]
   19004:	4053      	eors	r3, r2
   19006:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   19008:	688a      	ldr	r2, [r1, #8]
   1900a:	7a83      	ldrb	r3, [r0, #10]
   1900c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19010:	7283      	strb	r3, [r0, #10]
   19012:	688a      	ldr	r2, [r1, #8]
   19014:	7ac3      	ldrb	r3, [r0, #11]
   19016:	4053      	eors	r3, r2
   19018:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1901a:	7bcb      	ldrb	r3, [r1, #15]
   1901c:	7b02      	ldrb	r2, [r0, #12]
   1901e:	4053      	eors	r3, r2
   19020:	7303      	strb	r3, [r0, #12]
   19022:	89cb      	ldrh	r3, [r1, #14]
   19024:	7b42      	ldrb	r2, [r0, #13]
   19026:	4053      	eors	r3, r2
   19028:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1902a:	68ca      	ldr	r2, [r1, #12]
   1902c:	7b83      	ldrb	r3, [r0, #14]
   1902e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19032:	7383      	strb	r3, [r0, #14]
   19034:	68ca      	ldr	r2, [r1, #12]
   19036:	7bc3      	ldrb	r3, [r0, #15]
   19038:	4053      	eors	r3, r2
   1903a:	73c3      	strb	r3, [r0, #15]
}
   1903c:	4770      	bx	lr

0001903e <shift_rows>:
{
   1903e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   19040:	7802      	ldrb	r2, [r0, #0]
   19042:	f88d 2000 	strb.w	r2, [sp]
   19046:	7942      	ldrb	r2, [r0, #5]
   19048:	f88d 2001 	strb.w	r2, [sp, #1]
   1904c:	7a82      	ldrb	r2, [r0, #10]
   1904e:	f88d 2002 	strb.w	r2, [sp, #2]
   19052:	7bc2      	ldrb	r2, [r0, #15]
   19054:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   19058:	7902      	ldrb	r2, [r0, #4]
   1905a:	f88d 2004 	strb.w	r2, [sp, #4]
   1905e:	7a42      	ldrb	r2, [r0, #9]
   19060:	f88d 2005 	strb.w	r2, [sp, #5]
   19064:	7b82      	ldrb	r2, [r0, #14]
   19066:	f88d 2006 	strb.w	r2, [sp, #6]
   1906a:	78c2      	ldrb	r2, [r0, #3]
   1906c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   19070:	7a02      	ldrb	r2, [r0, #8]
   19072:	f88d 2008 	strb.w	r2, [sp, #8]
   19076:	7b42      	ldrb	r2, [r0, #13]
   19078:	f88d 2009 	strb.w	r2, [sp, #9]
   1907c:	7882      	ldrb	r2, [r0, #2]
   1907e:	f88d 200a 	strb.w	r2, [sp, #10]
   19082:	79c2      	ldrb	r2, [r0, #7]
   19084:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   19088:	7b02      	ldrb	r2, [r0, #12]
   1908a:	f88d 200c 	strb.w	r2, [sp, #12]
   1908e:	7842      	ldrb	r2, [r0, #1]
   19090:	f88d 200d 	strb.w	r2, [sp, #13]
   19094:	7ac3      	ldrb	r3, [r0, #11]
   19096:	7982      	ldrb	r2, [r0, #6]
   19098:	f88d 200e 	strb.w	r2, [sp, #14]
   1909c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   190a0:	2310      	movs	r3, #16
   190a2:	466a      	mov	r2, sp
   190a4:	4619      	mov	r1, r3
   190a6:	f7ff f87a 	bl	1819e <_copy>
}
   190aa:	b005      	add	sp, #20
   190ac:	f85d fb04 	ldr.w	pc, [sp], #4

000190b0 <mult_row_column>:
{
   190b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190b2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   190b4:	7808      	ldrb	r0, [r1, #0]
{
   190b6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   190b8:	f7ff f880 	bl	181bc <_double_byte>
   190bc:	4605      	mov	r5, r0
   190be:	7860      	ldrb	r0, [r4, #1]
   190c0:	f7ff f87c 	bl	181bc <_double_byte>
   190c4:	78a2      	ldrb	r2, [r4, #2]
   190c6:	7863      	ldrb	r3, [r4, #1]
   190c8:	4053      	eors	r3, r2
   190ca:	78e2      	ldrb	r2, [r4, #3]
   190cc:	4053      	eors	r3, r2
   190ce:	405d      	eors	r5, r3
   190d0:	4045      	eors	r5, r0
   190d2:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   190d4:	7860      	ldrb	r0, [r4, #1]
   190d6:	7827      	ldrb	r7, [r4, #0]
   190d8:	f7ff f870 	bl	181bc <_double_byte>
   190dc:	4605      	mov	r5, r0
   190de:	78a0      	ldrb	r0, [r4, #2]
   190e0:	f7ff f86c 	bl	181bc <_double_byte>
   190e4:	78a3      	ldrb	r3, [r4, #2]
   190e6:	405f      	eors	r7, r3
   190e8:	78e3      	ldrb	r3, [r4, #3]
   190ea:	405f      	eors	r7, r3
   190ec:	407d      	eors	r5, r7
   190ee:	4045      	eors	r5, r0
   190f0:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   190f2:	78a0      	ldrb	r0, [r4, #2]
   190f4:	7865      	ldrb	r5, [r4, #1]
   190f6:	7827      	ldrb	r7, [r4, #0]
   190f8:	f7ff f860 	bl	181bc <_double_byte>
   190fc:	406f      	eors	r7, r5
   190fe:	4605      	mov	r5, r0
   19100:	78e0      	ldrb	r0, [r4, #3]
   19102:	f7ff f85b 	bl	181bc <_double_byte>
   19106:	78e3      	ldrb	r3, [r4, #3]
   19108:	405f      	eors	r7, r3
   1910a:	407d      	eors	r5, r7
   1910c:	4045      	eors	r5, r0
   1910e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   19110:	7820      	ldrb	r0, [r4, #0]
   19112:	f7ff f853 	bl	181bc <_double_byte>
   19116:	7863      	ldrb	r3, [r4, #1]
   19118:	7825      	ldrb	r5, [r4, #0]
   1911a:	405d      	eors	r5, r3
   1911c:	78a3      	ldrb	r3, [r4, #2]
   1911e:	405d      	eors	r5, r3
   19120:	4045      	eors	r5, r0
   19122:	78e0      	ldrb	r0, [r4, #3]
   19124:	f7ff f84a 	bl	181bc <_double_byte>
   19128:	b2ed      	uxtb	r5, r5
   1912a:	4068      	eors	r0, r5
   1912c:	70f0      	strb	r0, [r6, #3]
}
   1912e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019130 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   19130:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19132:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   19134:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19136:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1913a:	2b00      	cmp	r3, #0
   1913c:	bfb4      	ite	lt
   1913e:	2387      	movlt	r3, #135	; 0x87
   19140:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   19142:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   19146:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1914a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1914c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   19150:	d002      	beq.n	19158 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   19152:	7813      	ldrb	r3, [r2, #0]
   19154:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   19156:	e7f4      	b.n	19142 <gf_double+0x12>
	}
}
   19158:	bd10      	pop	{r4, pc}

0001915a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1915a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1915c:	b120      	cbz	r0, 19168 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1915e:	2258      	movs	r2, #88	; 0x58
   19160:	2100      	movs	r1, #0
   19162:	f7ff f829 	bl	181b8 <_set>
   19166:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   19168:	bd08      	pop	{r3, pc}

0001916a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1916a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1916c:	4604      	mov	r4, r0
   1916e:	b188      	cbz	r0, 19194 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   19170:	2210      	movs	r2, #16
   19172:	2100      	movs	r1, #0
   19174:	f7ff f820 	bl	181b8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   19178:	2210      	movs	r2, #16
   1917a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1917e:	2100      	movs	r1, #0
   19180:	f7ff f81a 	bl	181b8 <_set>
	s->leftover_offset = 0;
   19184:	2300      	movs	r3, #0
   19186:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   19188:	2200      	movs	r2, #0
   1918a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1918e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   19192:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   19194:	bd10      	pop	{r4, pc}

00019196 <tc_cmac_setup>:
{
   19196:	b570      	push	{r4, r5, r6, lr}
   19198:	460d      	mov	r5, r1
   1919a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1919c:	4604      	mov	r4, r0
   1919e:	b310      	cbz	r0, 191e6 <tc_cmac_setup+0x50>
   191a0:	b311      	cbz	r1, 191e8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   191a2:	2258      	movs	r2, #88	; 0x58
   191a4:	2100      	movs	r1, #0
   191a6:	f7ff f807 	bl	181b8 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   191aa:	4629      	mov	r1, r5
	s->sched = sched;
   191ac:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   191ae:	4630      	mov	r0, r6
   191b0:	f7ed ff00 	bl	6fb4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   191b4:	2210      	movs	r2, #16
   191b6:	2100      	movs	r1, #0
   191b8:	4620      	mov	r0, r4
   191ba:	f7fe fffd 	bl	181b8 <_set>
	gf_double (s->K1, s->iv);
   191be:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   191c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   191c4:	4621      	mov	r1, r4
   191c6:	4620      	mov	r0, r4
   191c8:	f7ed ff4a 	bl	7060 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   191cc:	4621      	mov	r1, r4
   191ce:	4628      	mov	r0, r5
   191d0:	f7ff ffae 	bl	19130 <gf_double>
	gf_double (s->K2, s->K1);
   191d4:	4629      	mov	r1, r5
   191d6:	f104 0020 	add.w	r0, r4, #32
   191da:	f7ff ffa9 	bl	19130 <gf_double>
	tc_cmac_init(s);
   191de:	4620      	mov	r0, r4
   191e0:	f7ff ffc3 	bl	1916a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   191e4:	2001      	movs	r0, #1
}
   191e6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   191e8:	4608      	mov	r0, r1
   191ea:	e7fc      	b.n	191e6 <tc_cmac_setup+0x50>

000191ec <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   191ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191f0:	460d      	mov	r5, r1
   191f2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   191f4:	4604      	mov	r4, r0
   191f6:	2800      	cmp	r0, #0
   191f8:	d061      	beq.n	192be <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   191fa:	b912      	cbnz	r2, 19202 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   191fc:	2001      	movs	r0, #1
}
   191fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   19202:	2900      	cmp	r1, #0
   19204:	d05b      	beq.n	192be <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   19206:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1920a:	ea50 0301 	orrs.w	r3, r0, r1
   1920e:	d056      	beq.n	192be <tc_cmac_update+0xd2>
	s->countdown--;
   19210:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   19214:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   19218:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1921c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   19220:	f1b8 0f00 	cmp.w	r8, #0
   19224:	d02a      	beq.n	1927c <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   19226:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1922a:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1922e:	42be      	cmp	r6, r7
   19230:	4420      	add	r0, r4
   19232:	d208      	bcs.n	19246 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19234:	4633      	mov	r3, r6
   19236:	4631      	mov	r1, r6
   19238:	462a      	mov	r2, r5
   1923a:	f7fe ffb0 	bl	1819e <_copy>
			s->leftover_offset += data_length;
   1923e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19240:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   19242:	6466      	str	r6, [r4, #68]	; 0x44
   19244:	e7da      	b.n	191fc <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   19246:	463b      	mov	r3, r7
   19248:	462a      	mov	r2, r5
   1924a:	4639      	mov	r1, r7
   1924c:	f7fe ffa7 	bl	1819e <_copy>
		data_length -= remaining_space;
   19250:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   19252:	2300      	movs	r3, #0
   19254:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   19256:	4446      	add	r6, r8
		data += remaining_space;
   19258:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1925a:	1e63      	subs	r3, r4, #1
   1925c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   19260:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19264:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19268:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1926a:	ea82 0200 	eor.w	r2, r2, r0
   1926e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19270:	d1f6      	bne.n	19260 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   19272:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19274:	4621      	mov	r1, r4
   19276:	4620      	mov	r0, r4
   19278:	f7ed fef2 	bl	7060 <tc_aes_encrypt>
   1927c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   19280:	2e10      	cmp	r6, #16
   19282:	d809      	bhi.n	19298 <tc_cmac_update+0xac>
	if (data_length > 0) {
   19284:	2e00      	cmp	r6, #0
   19286:	d0b9      	beq.n	191fc <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   19288:	4633      	mov	r3, r6
   1928a:	462a      	mov	r2, r5
   1928c:	4631      	mov	r1, r6
   1928e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19292:	f7fe ff84 	bl	1819e <_copy>
   19296:	e7d4      	b.n	19242 <tc_cmac_update+0x56>
   19298:	1e63      	subs	r3, r4, #1
   1929a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1929c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   192a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   192a4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   192a6:	ea82 0200 	eor.w	r2, r2, r0
   192aa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   192ac:	d1f6      	bne.n	1929c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   192ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   192b0:	4621      	mov	r1, r4
   192b2:	4620      	mov	r0, r4
   192b4:	f7ed fed4 	bl	7060 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   192b8:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   192ba:	3e10      	subs	r6, #16
   192bc:	e7e0      	b.n	19280 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   192be:	2000      	movs	r0, #0
   192c0:	e79d      	b.n	191fe <tc_cmac_update+0x12>

000192c2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   192c2:	b570      	push	{r4, r5, r6, lr}
   192c4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   192c6:	4605      	mov	r5, r0
   192c8:	b1e8      	cbz	r0, 19306 <tc_cmac_final+0x44>
   192ca:	b369      	cbz	r1, 19328 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   192cc:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   192ce:	2a10      	cmp	r2, #16
   192d0:	d11a      	bne.n	19308 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   192d2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   192d4:	1e63      	subs	r3, r4, #1
   192d6:	3901      	subs	r1, #1
   192d8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   192dc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   192e0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   192e4:	4072      	eors	r2, r6
   192e6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   192ea:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   192ec:	ea82 0206 	eor.w	r2, r2, r6
   192f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   192f2:	d1f3      	bne.n	192dc <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   192f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   192f6:	4621      	mov	r1, r4
   192f8:	4628      	mov	r0, r5
   192fa:	f7ed feb1 	bl	7060 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   192fe:	4620      	mov	r0, r4
   19300:	f7ff ff2b 	bl	1915a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   19304:	2001      	movs	r0, #1
}
   19306:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   19308:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1930c:	2100      	movs	r1, #0
   1930e:	f1c2 0210 	rsb	r2, r2, #16
   19312:	4420      	add	r0, r4
   19314:	f7fe ff50 	bl	181b8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   19318:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1931a:	4423      	add	r3, r4
   1931c:	2280      	movs	r2, #128	; 0x80
   1931e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   19322:	f104 0120 	add.w	r1, r4, #32
   19326:	e7d5      	b.n	192d4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   19328:	4608      	mov	r0, r1
   1932a:	e7ec      	b.n	19306 <tc_cmac_final+0x44>

0001932c <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1932c:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1932e:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   19330:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   19332:	bf9d      	ittte	ls
   19334:	6882      	ldrls	r2, [r0, #8]
   19336:	18d2      	addls	r2, r2, r3
   19338:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
    r = RdOff - WrOff - 1u;
   1933c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   19340:	bf94      	ite	ls
   19342:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   19344:	1a58      	subhi	r0, r3, r1
}
   19346:	4770      	bx	lr

00019348 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   19348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1934c:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   19350:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   19352:	1b3e      	subs	r6, r7, r4
  if (Rem > NumBytes) {
   19354:	6840      	ldr	r0, [r0, #4]
   19356:	4296      	cmp	r6, r2
   19358:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1935a:	4688      	mov	r8, r1
   1935c:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1935e:	d904      	bls.n	1936a <_WriteNoCheck+0x22>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   19360:	f000 fea2 	bl	1a0a8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   19364:	60ec      	str	r4, [r5, #12]
}
   19366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1936a:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   1936c:	1be4      	subs	r4, r4, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1936e:	f000 fe9b 	bl	1a0a8 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   19372:	4622      	mov	r2, r4
   19374:	eb08 0106 	add.w	r1, r8, r6
   19378:	6868      	ldr	r0, [r5, #4]
   1937a:	e7f1      	b.n	19360 <_WriteNoCheck+0x18>

0001937c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1937c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   19380:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   19382:	4606      	mov	r6, r0
   19384:	4689      	mov	r9, r1
   19386:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   19388:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1938c:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1938e:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   19390:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   19392:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   19394:	bf28      	it	cs
   19396:	18e4      	addcs	r4, r4, r3
   19398:	3c01      	subs	r4, #1
   1939a:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1939c:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1939e:	42bc      	cmp	r4, r7
   193a0:	bf28      	it	cs
   193a2:	463c      	movcs	r4, r7
   193a4:	4294      	cmp	r4, r2
   193a6:	bf28      	it	cs
   193a8:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   193aa:	4649      	mov	r1, r9
   193ac:	4428      	add	r0, r5
   193ae:	4622      	mov	r2, r4
   193b0:	f000 fe7a 	bl	1a0a8 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   193b4:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   193b6:	4425      	add	r5, r4
      WrOff = 0u;
   193b8:	42ab      	cmp	r3, r5
   193ba:	bf08      	it	eq
   193bc:	2500      	moveq	r5, #0
  } while (NumBytes);
   193be:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   193c0:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   193c2:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   193c4:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   193c6:	d1e1      	bne.n	1938c <_WriteBlocking+0x10>
}
   193c8:	4640      	mov	r0, r8
   193ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000193ce <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   193ce:	f7ee b80f 	b.w	73f0 <_DoInit>

000193d2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   193d2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   193d4:	f7ff fffb 	bl	193ce <SEGGER_RTT_Init>

	return 0;
}
   193d8:	2000      	movs	r0, #0
   193da:	bd08      	pop	{r3, pc}

000193dc <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   193dc:	b538      	push	{r3, r4, r5, lr}
		cur = fcb_getnext_sector(fcb, cur);
   193de:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
   193e0:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   193e2:	f000 fa8e 	bl	19902 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   193e6:	6a23      	ldr	r3, [r4, #32]
   193e8:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   193ea:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   193ec:	d00f      	beq.n	1940e <fcb_append_to_scratch+0x32>
	struct flash_sector *sector;
	int rc;

	sector = fcb_new_sector(fcb, 0);
	if (!sector) {
   193ee:	b170      	cbz	r0, 1940e <fcb_append_to_scratch+0x32>
		return FCB_ERR_NOSPACE;
	}
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   193f0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   193f2:	3201      	adds	r2, #1
   193f4:	4601      	mov	r1, r0
   193f6:	b292      	uxth	r2, r2
   193f8:	4620      	mov	r0, r4
   193fa:	f000 f932 	bl	19662 <fcb_sector_hdr_init>
	if (rc) {
   193fe:	b928      	cbnz	r0, 1940c <fcb_append_to_scratch+0x30>
		return rc;
	}
	fcb->f_active.fe_sector = sector;
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   19400:	2308      	movs	r3, #8
   19402:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   19404:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   19406:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   19408:	3301      	adds	r3, #1
   1940a:	86a3      	strh	r3, [r4, #52]	; 0x34
	return FCB_OK;
}
   1940c:	bd38      	pop	{r3, r4, r5, pc}
		return FCB_ERR_NOSPACE;
   1940e:	f06f 0003 	mvn.w	r0, #3
   19412:	e7fb      	b.n	1940c <fcb_append_to_scratch+0x30>

00019414 <fcb_append>:

int
fcb_append(struct fcb *fcb, u16_t len, struct fcb_entry *append_loc)
{
   19414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19418:	b085      	sub	sp, #20
   1941a:	4604      	mov	r4, r0
	struct fcb_entry *active;
	u8_t tmp_str[2];
	int cnt;
	int rc;

	cnt = fcb_put_len(tmp_str, len);
   1941c:	a803      	add	r0, sp, #12
{
   1941e:	460d      	mov	r5, r1
   19420:	4616      	mov	r6, r2
	cnt = fcb_put_len(tmp_str, len);
   19422:	f000 f8f6 	bl	19612 <fcb_put_len>
	if (cnt < 0) {
   19426:	f1b0 0800 	subs.w	r8, r0, #0
   1942a:	db67      	blt.n	194fc <fcb_append+0xe8>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   1942c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(u8_t *buf, u16_t len);
int fcb_get_len(u8_t *buf, u16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, u16_t len)
{
	if (fcb->f_align <= 1) {
   19430:	2b01      	cmp	r3, #1
   19432:	4629      	mov	r1, r5
   19434:	fa1f f788 	uxth.w	r7, r8
   19438:	d906      	bls.n	19448 <fcb_append+0x34>
		return len;
	}
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1943a:	1e5d      	subs	r5, r3, #1
   1943c:	4419      	add	r1, r3
   1943e:	425a      	negs	r2, r3
   19440:	442f      	add	r7, r5
   19442:	3901      	subs	r1, #1
   19444:	4017      	ands	r7, r2
   19446:	4011      	ands	r1, r2
	if (fcb->f_align <= 1) {
   19448:	2b01      	cmp	r3, #1
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   1944a:	b20d      	sxth	r5, r1

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   1944c:	f104 0a0c 	add.w	sl, r4, #12
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   19450:	bf86      	itte	hi
   19452:	4259      	neghi	r1, r3
   19454:	400b      	andhi	r3, r1
		return len;
   19456:	2301      	movls	r3, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   19458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1945c:	4650      	mov	r0, sl
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   1945e:	441d      	add	r5, r3
   19460:	f7fd f952 	bl	16708 <z_impl_k_mutex_lock>
   19464:	b2ad      	uxth	r5, r5
	if (rc) {
   19466:	4680      	mov	r8, r0
   19468:	2800      	cmp	r0, #0
   1946a:	d153      	bne.n	19514 <fcb_append+0x100>
		return FCB_ERR_ARGS;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   1946c:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   19470:	443b      	add	r3, r7
   19472:	684a      	ldr	r2, [r1, #4]
   19474:	442b      	add	r3, r5
   19476:	4293      	cmp	r3, r2
   19478:	d92b      	bls.n	194d2 <fcb_append+0xbe>
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   1947a:	f894 b006 	ldrb.w	fp, [r4, #6]
	prev = NULL;
   1947e:	4681      	mov	r9, r0
		cur = fcb_getnext_sector(fcb, cur);
   19480:	4620      	mov	r0, r4
   19482:	f000 fa3e 	bl	19902 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   19486:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   19488:	f1b9 0f00 	cmp.w	r9, #0
   1948c:	bf08      	it	eq
   1948e:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   19490:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   19492:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   19494:	d038      	beq.n	19508 <fcb_append+0xf4>
	} while (i++ < cnt);
   19496:	45c3      	cmp	fp, r8
   19498:	f108 0301 	add.w	r3, r8, #1
   1949c:	dc32      	bgt.n	19504 <fcb_append+0xf0>
		if (!sector || (sector->fs_size <
   1949e:	f1b9 0f00 	cmp.w	r9, #0
   194a2:	d031      	beq.n	19508 <fcb_append+0xf4>
			sizeof(struct fcb_disk_area) + len + cnt)) {
   194a4:	f107 0308 	add.w	r3, r7, #8
		if (!sector || (sector->fs_size <
   194a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   194ac:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   194ae:	429a      	cmp	r2, r3
   194b0:	d32a      	bcc.n	19508 <fcb_append+0xf4>
			rc = FCB_ERR_NOSPACE;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   194b2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   194b4:	3201      	adds	r2, #1
   194b6:	b292      	uxth	r2, r2
   194b8:	4649      	mov	r1, r9
   194ba:	4620      	mov	r0, r4
   194bc:	f000 f8d1 	bl	19662 <fcb_sector_hdr_init>
		if (rc) {
   194c0:	4680      	mov	r8, r0
   194c2:	b9c0      	cbnz	r0, 194f6 <fcb_append+0xe2>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   194c4:	2308      	movs	r3, #8
   194c6:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   194c8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   194ca:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   194ce:	3301      	adds	r3, #1
   194d0:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   194d2:	9700      	str	r7, [sp, #0]
   194d4:	ab03      	add	r3, sp, #12
   194d6:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   194da:	4620      	mov	r0, r4
   194dc:	f000 f867 	bl	195ae <fcb_flash_write>
	if (rc) {
   194e0:	4680      	mov	r8, r0
   194e2:	b9a0      	cbnz	r0, 1950e <fcb_append+0xfa>
		rc = FCB_ERR_FLASH;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   194e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   194e6:	6033      	str	r3, [r6, #0]
	append_loc->fe_elem_off = active->fe_elem_off;
   194e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   194ea:	6073      	str	r3, [r6, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   194ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   194ee:	441f      	add	r7, r3
   194f0:	60b7      	str	r7, [r6, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   194f2:	442f      	add	r7, r5
   194f4:	62a7      	str	r7, [r4, #40]	; 0x28
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   194f6:	4650      	mov	r0, sl
   194f8:	f7fd f972 	bl	167e0 <z_impl_k_mutex_unlock>

	return FCB_OK;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   194fc:	4640      	mov	r0, r8
   194fe:	b005      	add	sp, #20
   19500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   19504:	4698      	mov	r8, r3
   19506:	e7bb      	b.n	19480 <fcb_append+0x6c>
			rc = FCB_ERR_NOSPACE;
   19508:	f06f 0803 	mvn.w	r8, #3
   1950c:	e7f3      	b.n	194f6 <fcb_append+0xe2>
		rc = FCB_ERR_FLASH;
   1950e:	f06f 0801 	mvn.w	r8, #1
   19512:	e7f0      	b.n	194f6 <fcb_append+0xe2>
		return FCB_ERR_ARGS;
   19514:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   19518:	e7f0      	b.n	194fc <fcb_append+0xe8>

0001951a <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   1951a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1951c:	b083      	sub	sp, #12
	int rc;
	u8_t crc8[fcb->f_align];
   1951e:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
   19522:	1dd3      	adds	r3, r2, #7
   19524:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
{
   19528:	af02      	add	r7, sp, #8
	u8_t crc8[fcb->f_align];
   1952a:	ebad 0d03 	sub.w	sp, sp, r3
   1952e:	ae02      	add	r6, sp, #8
{
   19530:	4604      	mov	r4, r0
   19532:	460d      	mov	r5, r1
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));
   19534:	4630      	mov	r0, r6
   19536:	21ff      	movs	r1, #255	; 0xff
   19538:	f000 fde0 	bl	1a0fc <memset>

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   1953c:	4632      	mov	r2, r6
   1953e:	4629      	mov	r1, r5
   19540:	4620      	mov	r0, r4
   19542:	f000 f937 	bl	197b4 <fcb_elem_crc8>
	if (rc) {
   19546:	b9a8      	cbnz	r0, 19574 <fcb_append_finish+0x5a>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   19548:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
	if (fcb->f_align <= 1) {
   1954c:	89aa      	ldrh	r2, [r5, #12]
   1954e:	68a8      	ldr	r0, [r5, #8]

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   19550:	9100      	str	r1, [sp, #0]
   19552:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   19554:	bf81      	itttt	hi
   19556:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   1955a:	1852      	addhi	r2, r2, r1
   1955c:	424b      	neghi	r3, r1
   1955e:	401a      	andhi	r2, r3
   19560:	4402      	add	r2, r0
   19562:	4633      	mov	r3, r6
   19564:	6829      	ldr	r1, [r5, #0]
   19566:	4620      	mov	r0, r4
   19568:	f000 f821 	bl	195ae <fcb_flash_write>
	if (rc) {
   1956c:	2800      	cmp	r0, #0
		return FCB_ERR_FLASH;
   1956e:	bf18      	it	ne
   19570:	f06f 0001 	mvnne.w	r0, #1
	}
	return 0;
}
   19574:	3704      	adds	r7, #4
   19576:	46bd      	mov	sp, r7
   19578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001957a <fcb_get_align>:
u8_t
fcb_get_align(const struct fcb *fcb)
{
	u8_t align;

	if (fcb->fap == NULL) {
   1957a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1957c:	b108      	cbz	r0, 19582 <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   1957e:	f000 bb15 	b.w	19bac <flash_area_align>

	return align;
}
   19582:	4770      	bx	lr

00019584 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   19584:	b570      	push	{r4, r5, r6, lr}
   19586:	4614      	mov	r4, r2
   19588:	461a      	mov	r2, r3
   1958a:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   1958c:	684d      	ldr	r5, [r1, #4]
   1958e:	18e6      	adds	r6, r4, r3
   19590:	42ae      	cmp	r6, r5
   19592:	d809      	bhi.n	195a8 <fcb_flash_read+0x24>
		return FCB_ERR_ARGS;
	}

	if (fcb->fap == NULL) {
   19594:	6b80      	ldr	r0, [r0, #56]	; 0x38
   19596:	b120      	cbz	r0, 195a2 <fcb_flash_read+0x1e>
		return FCB_ERR_FLASH;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   19598:	6809      	ldr	r1, [r1, #0]
   1959a:	4421      	add	r1, r4
   1959c:	f000 fa9a 	bl	19ad4 <flash_area_read>

	if (rc != 0) {
   195a0:	b108      	cbz	r0, 195a6 <fcb_flash_read+0x22>
		return FCB_ERR_FLASH;
   195a2:	f06f 0001 	mvn.w	r0, #1
	}

	return 0;
}
   195a6:	bd70      	pop	{r4, r5, r6, pc}
		return FCB_ERR_ARGS;
   195a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   195ac:	e7fb      	b.n	195a6 <fcb_flash_read+0x22>

000195ae <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   195ae:	b570      	push	{r4, r5, r6, lr}
   195b0:	4614      	mov	r4, r2
   195b2:	461a      	mov	r2, r3
   195b4:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   195b6:	684d      	ldr	r5, [r1, #4]
   195b8:	18e6      	adds	r6, r4, r3
   195ba:	42ae      	cmp	r6, r5
   195bc:	d809      	bhi.n	195d2 <fcb_flash_write+0x24>
		return FCB_ERR_ARGS;
	}

	if (fcb->fap == NULL) {
   195be:	6b80      	ldr	r0, [r0, #56]	; 0x38
   195c0:	b120      	cbz	r0, 195cc <fcb_flash_write+0x1e>
		return FCB_ERR_FLASH;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   195c2:	6809      	ldr	r1, [r1, #0]
   195c4:	4421      	add	r1, r4
   195c6:	f000 faa2 	bl	19b0e <flash_area_write>

	if (rc != 0) {
   195ca:	b108      	cbz	r0, 195d0 <fcb_flash_write+0x22>
		return FCB_ERR_FLASH;
   195cc:	f06f 0001 	mvn.w	r0, #1
	}

	return 0;
}
   195d0:	bd70      	pop	{r4, r5, r6, pc}
		return FCB_ERR_ARGS;
   195d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   195d6:	e7fb      	b.n	195d0 <fcb_flash_write+0x22>

000195d8 <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   195d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   195da:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   195dc:	b120      	cbz	r0, 195e8 <fcb_erase_sector+0x10>
		return FCB_ERR_FLASH;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   195de:	e9d1 1200 	ldrd	r1, r2, [r1]
   195e2:	f000 fabd 	bl	19b60 <flash_area_erase>

	if (rc != 0) {
   195e6:	b108      	cbz	r0, 195ec <fcb_erase_sector+0x14>
		return FCB_ERR_FLASH;
   195e8:	f06f 0001 	mvn.w	r0, #1
	}

	return 0;
}
   195ec:	bd08      	pop	{r3, pc}

000195ee <fcb_free_sector_cnt>:
fcb_free_sector_cnt(struct fcb *fcb)
{
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
   195ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
   195f0:	b538      	push	{r3, r4, r5, lr}
   195f2:	4605      	mov	r5, r0
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   195f4:	2400      	movs	r4, #0
   195f6:	796b      	ldrb	r3, [r5, #5]
   195f8:	42a3      	cmp	r3, r4
   195fa:	dc01      	bgt.n	19600 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   195fc:	4620      	mov	r0, r4
   195fe:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   19600:	4628      	mov	r0, r5
   19602:	f000 f97e 	bl	19902 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   19606:	6a2b      	ldr	r3, [r5, #32]
   19608:	4283      	cmp	r3, r0
		fa = fcb_getnext_sector(fcb, fa);
   1960a:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   1960c:	d0f6      	beq.n	195fc <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   1960e:	3401      	adds	r4, #1
   19610:	e7f1      	b.n	195f6 <fcb_free_sector_cnt+0x8>

00019612 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(u8_t *buf, u16_t len)
{
	if (len < 0x80) {
   19612:	297f      	cmp	r1, #127	; 0x7f
   19614:	d802      	bhi.n	1961c <fcb_put_len+0xa>
		buf[0] = len;
   19616:	7001      	strb	r1, [r0, #0]
		return 1;
   19618:	2001      	movs	r0, #1
   1961a:	4770      	bx	lr
	} else if (len < FCB_MAX_LEN) {
   1961c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   19620:	4299      	cmp	r1, r3
		buf[0] = (len & 0x7f) | 0x80;
   19622:	bf9f      	itttt	ls
   19624:	f061 037f 	ornls	r3, r1, #127	; 0x7f
		buf[1] = len >> 7;
   19628:	09c9      	lsrls	r1, r1, #7
		buf[0] = (len & 0x7f) | 0x80;
   1962a:	7003      	strbls	r3, [r0, #0]
		buf[1] = len >> 7;
   1962c:	7041      	strbls	r1, [r0, #1]
		return 2;
   1962e:	bf94      	ite	ls
   19630:	2002      	movls	r0, #2
	} else {
		return FCB_ERR_ARGS;
   19632:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}
}
   19636:	4770      	bx	lr

00019638 <fcb_get_len>:
int
fcb_get_len(u8_t *buf, u16_t *len)
{
	int rc;

	if (buf[0] & 0x80) {
   19638:	7803      	ldrb	r3, [r0, #0]
   1963a:	061a      	lsls	r2, r3, #24
   1963c:	d50b      	bpl.n	19656 <fcb_get_len+0x1e>
		if (buf[0] == 0xff && buf[1] == 0xff) {
   1963e:	7842      	ldrb	r2, [r0, #1]
   19640:	ea03 0002 	and.w	r0, r3, r2
   19644:	28ff      	cmp	r0, #255	; 0xff
   19646:	d009      	beq.n	1965c <fcb_get_len+0x24>
			return FCB_ERR_NOVAR;
		}
		*len = (buf[0] & 0x7f) | (buf[1] << 7);
   19648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1964c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   19650:	800b      	strh	r3, [r1, #0]
		rc = 2;
   19652:	2002      	movs	r0, #2
   19654:	4770      	bx	lr
	} else {
		*len = buf[0];
   19656:	800b      	strh	r3, [r1, #0]
		rc = 1;
   19658:	2001      	movs	r0, #1
   1965a:	4770      	bx	lr
			return FCB_ERR_NOVAR;
   1965c:	f06f 0002 	mvn.w	r0, #2
	}
	return rc;
}
   19660:	4770      	bx	lr

00019662 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, u16_t id)
{
   19662:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb->f_magic;
	fda.fd_ver = fcb->f_version;
   19664:	7903      	ldrb	r3, [r0, #4]
   19666:	f88d 300c 	strb.w	r3, [sp, #12]
	fda._pad = 0xff;
   1966a:	23ff      	movs	r3, #255	; 0xff
   1966c:	f88d 300d 	strb.w	r3, [sp, #13]
	fda.fd_id = id;

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   19670:	2308      	movs	r3, #8
	fda.fd_magic = fcb->f_magic;
   19672:	6804      	ldr	r4, [r0, #0]
	fda.fd_id = id;
   19674:	f8ad 200e 	strh.w	r2, [sp, #14]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   19678:	9300      	str	r3, [sp, #0]
   1967a:	2200      	movs	r2, #0
   1967c:	446b      	add	r3, sp
	fda.fd_magic = fcb->f_magic;
   1967e:	9402      	str	r4, [sp, #8]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   19680:	f7ff ff95 	bl	195ae <fcb_flash_write>
	if (rc != 0) {
   19684:	2800      	cmp	r0, #0
		return FCB_ERR_FLASH;
	}
	return 0;
}
   19686:	bf18      	it	ne
   19688:	f06f 0001 	mvnne.w	r0, #1
   1968c:	b004      	add	sp, #16
   1968e:	bd10      	pop	{r4, pc}

00019690 <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   19690:	b530      	push	{r4, r5, lr}
   19692:	4605      	mov	r5, r0
   19694:	b085      	sub	sp, #20
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   19696:	4614      	mov	r4, r2
   19698:	b902      	cbnz	r2, 1969c <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   1969a:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   1969c:	2308      	movs	r3, #8
   1969e:	9300      	str	r3, [sp, #0]
   196a0:	2200      	movs	r2, #0
   196a2:	4623      	mov	r3, r4
   196a4:	4628      	mov	r0, r5
   196a6:	f7ff ff6d 	bl	19584 <fcb_flash_read>
	if (rc) {
   196aa:	b950      	cbnz	r0, 196c2 <fcb_sector_hdr_read+0x32>
		return FCB_ERR_FLASH;
	}
	if (fdap->fd_magic == 0xffffffff) {
   196ac:	6823      	ldr	r3, [r4, #0]
   196ae:	1c5a      	adds	r2, r3, #1
   196b0:	d005      	beq.n	196be <fcb_sector_hdr_read+0x2e>
		return 0;
	}
	if (fdap->fd_magic != fcb->f_magic) {
   196b2:	682a      	ldr	r2, [r5, #0]
		return FCB_ERR_MAGIC;
   196b4:	4293      	cmp	r3, r2
   196b6:	bf0c      	ite	eq
   196b8:	2001      	moveq	r0, #1
   196ba:	f06f 0006 	mvnne.w	r0, #6
	}
	return 1;
}
   196be:	b005      	add	sp, #20
   196c0:	bd30      	pop	{r4, r5, pc}
		return FCB_ERR_FLASH;
   196c2:	f06f 0001 	mvn.w	r0, #1
   196c6:	e7fa      	b.n	196be <fcb_sector_hdr_read+0x2e>

000196c8 <fcb_init>:
{
   196c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   196cc:	688b      	ldr	r3, [r1, #8]
{
   196ce:	b085      	sub	sp, #20
   196d0:	460c      	mov	r4, r1
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   196d2:	b92b      	cbnz	r3, 196e0 <fcb_init+0x18>
		return FCB_ERR_ARGS;
   196d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   196d8:	4628      	mov	r0, r5
   196da:	b005      	add	sp, #20
   196dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   196e0:	794b      	ldrb	r3, [r1, #5]
   196e2:	798a      	ldrb	r2, [r1, #6]
   196e4:	1a9b      	subs	r3, r3, r2
   196e6:	2b00      	cmp	r3, #0
   196e8:	ddf4      	ble.n	196d4 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   196ea:	3138      	adds	r1, #56	; 0x38
   196ec:	b2c0      	uxtb	r0, r0
   196ee:	f7ed ff21 	bl	7534 <flash_area_open>
	if (rc != 0) {
   196f2:	4606      	mov	r6, r0
   196f4:	2800      	cmp	r0, #0
   196f6:	d1ed      	bne.n	196d4 <fcb_init+0xc>
	align = fcb_get_align(fcb);
   196f8:	4620      	mov	r0, r4
   196fa:	f7ff ff3e 	bl	1957a <fcb_get_align>
	if (align == 0) {
   196fe:	4683      	mov	fp, r0
   19700:	2800      	cmp	r0, #0
   19702:	d0e7      	beq.n	196d4 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   19704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   19708:	46b2      	mov	sl, r6
   1970a:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   1970c:	4698      	mov	r8, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   1970e:	7962      	ldrb	r2, [r4, #5]
   19710:	42b2      	cmp	r2, r6
   19712:	dc23      	bgt.n	1975c <fcb_init+0x94>
	if (oldest < 0) {
   19714:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   19718:	d148      	bne.n	197ac <fcb_init+0xe4>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   1971a:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   1971c:	2200      	movs	r2, #0
   1971e:	4639      	mov	r1, r7
   19720:	4620      	mov	r0, r4
   19722:	f7ff ff9e 	bl	19662 <fcb_sector_hdr_init>
		if (rc) {
   19726:	4605      	mov	r5, r0
   19728:	2800      	cmp	r0, #0
   1972a:	d1d5      	bne.n	196d8 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   1972c:	46ba      	mov	sl, r7
	fcb->f_active.fe_sector = newest_sector;
   1972e:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   19732:	2308      	movs	r3, #8
	fcb->f_align = align;
   19734:	f884 b036 	strb.w	fp, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   19738:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   1973a:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   1973c:	f104 0624 	add.w	r6, r4, #36	; 0x24
   19740:	4631      	mov	r1, r6
   19742:	4620      	mov	r0, r4
   19744:	f000 f8bc 	bl	198c0 <fcb_getnext_in_sector>
		if (rc == FCB_ERR_NOVAR) {
   19748:	1cc3      	adds	r3, r0, #3
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   1974a:	4605      	mov	r5, r0
		if (rc == FCB_ERR_NOVAR) {
   1974c:	d030      	beq.n	197b0 <fcb_init+0xe8>
		if (rc != 0) {
   1974e:	2800      	cmp	r0, #0
   19750:	d0f6      	beq.n	19740 <fcb_init+0x78>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
   19752:	f104 000c 	add.w	r0, r4, #12
   19756:	f005 ff57 	bl	1f608 <z_impl_k_mutex_init>
	return rc;
   1975a:	e7bd      	b.n	196d8 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   1975c:	68a2      	ldr	r2, [r4, #8]
   1975e:	9301      	str	r3, [sp, #4]
   19760:	eb02 09c6 	add.w	r9, r2, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   19764:	4649      	mov	r1, r9
   19766:	aa02      	add	r2, sp, #8
   19768:	4620      	mov	r0, r4
   1976a:	f7ff ff91 	bl	19690 <fcb_sector_hdr_read>
		if (rc < 0) {
   1976e:	1e05      	subs	r5, r0, #0
   19770:	dbb2      	blt.n	196d8 <fcb_init+0x10>
		if (rc == 0) {
   19772:	9b01      	ldr	r3, [sp, #4]
   19774:	d008      	beq.n	19788 <fcb_init+0xc0>
		if (oldest < 0) {
   19776:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1977a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1977e:	d105      	bne.n	1978c <fcb_init+0xc4>
			oldest = newest = fda.fd_id;
   19780:	4690      	mov	r8, r2
			oldest_sector = newest_sector = sector;
   19782:	46ca      	mov	sl, r9
   19784:	464f      	mov	r7, r9
			oldest = newest = fda.fd_id;
   19786:	4613      	mov	r3, r2
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   19788:	3601      	adds	r6, #1
   1978a:	e7c0      	b.n	1970e <fcb_init+0x46>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   1978c:	b215      	sxth	r5, r2
   1978e:	b218      	sxth	r0, r3
   19790:	1a28      	subs	r0, r5, r0
   19792:	2800      	cmp	r0, #0
   19794:	dd02      	ble.n	1979c <fcb_init+0xd4>
			newest = fda.fd_id;
   19796:	4613      	mov	r3, r2
			newest_sector = sector;
   19798:	46ca      	mov	sl, r9
   1979a:	e7f5      	b.n	19788 <fcb_init+0xc0>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   1979c:	fa0f f188 	sxth.w	r1, r8
   197a0:	1b49      	subs	r1, r1, r5
			oldest = fda.fd_id;
   197a2:	2900      	cmp	r1, #0
   197a4:	bfc4      	itt	gt
   197a6:	4690      	movgt	r8, r2
   197a8:	464f      	movgt	r7, r9
   197aa:	e7ed      	b.n	19788 <fcb_init+0xc0>
   197ac:	461d      	mov	r5, r3
   197ae:	e7be      	b.n	1972e <fcb_init+0x66>
			rc = FCB_OK;
   197b0:	2500      	movs	r5, #0
   197b2:	e7ce      	b.n	19752 <fcb_init+0x8a>

000197b4 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, u8_t *c8p)
{
   197b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   197b8:	460c      	mov	r4, r1
   197ba:	4617      	mov	r7, r2
	u16_t len;
	u32_t off;
	u32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   197bc:	e9d1 1200 	ldrd	r1, r2, [r1]
   197c0:	684b      	ldr	r3, [r1, #4]
   197c2:	1c95      	adds	r5, r2, #2
   197c4:	429d      	cmp	r5, r3
{
   197c6:	b08c      	sub	sp, #48	; 0x30
   197c8:	4606      	mov	r6, r0
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   197ca:	d84b      	bhi.n	19864 <fcb_elem_crc8+0xb0>
		return FCB_ERR_NOVAR;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   197cc:	2302      	movs	r3, #2
   197ce:	9300      	str	r3, [sp, #0]
   197d0:	ab04      	add	r3, sp, #16
   197d2:	f7ff fed7 	bl	19584 <fcb_flash_read>
	if (rc) {
   197d6:	b120      	cbz	r0, 197e2 <fcb_elem_crc8+0x2e>
		return FCB_ERR_FLASH;
   197d8:	f06f 0001 	mvn.w	r0, #1
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   197dc:	b00c      	add	sp, #48	; 0x30
   197de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(tmp_str, &len);
   197e2:	f10d 010e 	add.w	r1, sp, #14
   197e6:	a804      	add	r0, sp, #16
   197e8:	f7ff ff26 	bl	19638 <fcb_get_len>
	if (cnt < 0) {
   197ec:	2800      	cmp	r0, #0
   197ee:	dbf5      	blt.n	197dc <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   197f0:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
   197f4:	6861      	ldr	r1, [r4, #4]
	if (fcb->f_align <= 1) {
   197f6:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   197f8:	bf88      	it	hi
   197fa:	f102 35ff 	addhi.w	r5, r2, #4294967295	; 0xffffffff
   197fe:	b283      	uxth	r3, r0
   19800:	bf82      	ittt	hi
   19802:	195b      	addhi	r3, r3, r5
   19804:	4252      	neghi	r2, r2
   19806:	4013      	andhi	r3, r2
   19808:	440b      	add	r3, r1
   1980a:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   1980c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19810:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   19812:	4602      	mov	r2, r0
   19814:	a904      	add	r1, sp, #16
   19816:	20ff      	movs	r0, #255	; 0xff
   19818:	f7ed fa38 	bl	6c8c <crc8_ccitt>
	off = loc->fe_data_off;
   1981c:	68a5      	ldr	r5, [r4, #8]
	end = loc->fe_data_off + len;
   1981e:	f8bd 900e 	ldrh.w	r9, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   19822:	4682      	mov	sl, r0
	end = loc->fe_data_off + len;
   19824:	44a9      	add	r9, r5
	for (; off < end; off += blk_sz) {
   19826:	454d      	cmp	r5, r9
   19828:	d303      	bcc.n	19832 <fcb_elem_crc8+0x7e>
	*c8p = crc8;
   1982a:	f887 a000 	strb.w	sl, [r7]
	return 0;
   1982e:	2000      	movs	r0, #0
   19830:	e7d4      	b.n	197dc <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   19832:	eba9 0805 	sub.w	r8, r9, r5
   19836:	f1b8 0f20 	cmp.w	r8, #32
   1983a:	bf28      	it	cs
   1983c:	f04f 0820 	movcs.w	r8, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   19840:	f8cd 8000 	str.w	r8, [sp]
   19844:	ab04      	add	r3, sp, #16
   19846:	462a      	mov	r2, r5
   19848:	6821      	ldr	r1, [r4, #0]
   1984a:	4630      	mov	r0, r6
   1984c:	f7ff fe9a 	bl	19584 <fcb_flash_read>
		if (rc) {
   19850:	2800      	cmp	r0, #0
   19852:	d1c1      	bne.n	197d8 <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   19854:	4650      	mov	r0, sl
   19856:	4642      	mov	r2, r8
   19858:	a904      	add	r1, sp, #16
   1985a:	f7ed fa17 	bl	6c8c <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   1985e:	4445      	add	r5, r8
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   19860:	4682      	mov	sl, r0
   19862:	e7e0      	b.n	19826 <fcb_elem_crc8+0x72>
		return FCB_ERR_NOVAR;
   19864:	f06f 0002 	mvn.w	r0, #2
   19868:	e7b8      	b.n	197dc <fcb_elem_crc8+0x28>

0001986a <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   1986a:	b530      	push	{r4, r5, lr}
   1986c:	b085      	sub	sp, #20
	int rc;
	u8_t crc8;
	u8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   1986e:	f10d 020e 	add.w	r2, sp, #14
{
   19872:	4605      	mov	r5, r0
   19874:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   19876:	f7ff ff9d 	bl	197b4 <fcb_elem_crc8>
	if (rc) {
   1987a:	b9e0      	cbnz	r0, 198b6 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   1987c:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
	if (fcb->f_align <= 1) {
   19880:	89a1      	ldrh	r1, [r4, #12]
   19882:	68a2      	ldr	r2, [r4, #8]
   19884:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   19886:	bf81      	itttt	hi
   19888:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   1988c:	18c9      	addhi	r1, r1, r3
   1988e:	425b      	neghi	r3, r3
   19890:	4019      	andhi	r1, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   19892:	2301      	movs	r3, #1
   19894:	9300      	str	r3, [sp, #0]
   19896:	440a      	add	r2, r1
   19898:	f10d 030f 	add.w	r3, sp, #15
   1989c:	6821      	ldr	r1, [r4, #0]
   1989e:	4628      	mov	r0, r5
   198a0:	f7ff fe70 	bl	19584 <fcb_flash_read>
	if (rc) {
   198a4:	b948      	cbnz	r0, 198ba <fcb_elem_info+0x50>
		return FCB_ERR_FLASH;
	}

	if (fl_crc8 != crc8) {
   198a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   198aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
   198ae:	429a      	cmp	r2, r3
		return FCB_ERR_CRC;
   198b0:	bf18      	it	ne
   198b2:	f06f 0005 	mvnne.w	r0, #5
	}
	return 0;
}
   198b6:	b005      	add	sp, #20
   198b8:	bd30      	pop	{r4, r5, pc}
		return FCB_ERR_FLASH;
   198ba:	f06f 0001 	mvn.w	r0, #1
   198be:	e7fa      	b.n	198b6 <fcb_elem_info+0x4c>

000198c0 <fcb_getnext_in_sector>:
#include "fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   198c0:	b538      	push	{r3, r4, r5, lr}
   198c2:	4604      	mov	r4, r0
   198c4:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   198c6:	f7ff ffd0 	bl	1986a <fcb_elem_info>
	if (rc == 0 || rc == FCB_ERR_CRC) {
   198ca:	b108      	cbz	r0, 198d0 <fcb_getnext_in_sector+0x10>
   198cc:	1d83      	adds	r3, r0, #6
   198ce:	d117      	bne.n	19900 <fcb_getnext_in_sector+0x40>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   198d0:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   198d4:	89ab      	ldrh	r3, [r5, #12]
			loc->fe_elem_off = loc->fe_data_off +
   198d6:	68aa      	ldr	r2, [r5, #8]
	if (fcb->f_align <= 1) {
   198d8:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   198da:	bf81      	itttt	hi
   198dc:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   198e0:	185b      	addhi	r3, r3, r1
   198e2:	4248      	neghi	r0, r1
   198e4:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1) {
   198e6:	2901      	cmp	r1, #1
   198e8:	4413      	add	r3, r2
	return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   198ea:	bf86      	itte	hi
   198ec:	424a      	neghi	r2, r1
   198ee:	400a      	andhi	r2, r1
		return len;
   198f0:	2201      	movls	r2, #1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   198f2:	4413      	add	r3, r2
			loc->fe_elem_off = loc->fe_data_off +
   198f4:	606b      	str	r3, [r5, #4]
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   198f6:	4629      	mov	r1, r5
   198f8:	4620      	mov	r0, r4
   198fa:	f7ff ffb6 	bl	1986a <fcb_elem_info>
			if (rc != FCB_ERR_CRC) {
   198fe:	e7e5      	b.n	198cc <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == FCB_ERR_CRC);
	}
	return rc;
}
   19900:	bd38      	pop	{r3, r4, r5, pc}

00019902 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   19902:	6882      	ldr	r2, [r0, #8]
   19904:	7943      	ldrb	r3, [r0, #5]
	sector++;
   19906:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   19908:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   1990c:	4299      	cmp	r1, r3
   1990e:	bf34      	ite	cc
   19910:	4608      	movcc	r0, r1
   19912:	4610      	movcs	r0, r2
   19914:	4770      	bx	lr

00019916 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   19916:	680b      	ldr	r3, [r1, #0]
{
   19918:	b570      	push	{r4, r5, r6, lr}
   1991a:	4605      	mov	r5, r0
   1991c:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   1991e:	b90b      	cbnz	r3, 19924 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   19920:	6a03      	ldr	r3, [r0, #32]
   19922:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0) {
   19924:	6863      	ldr	r3, [r4, #4]
   19926:	b953      	cbnz	r3, 1993e <fcb_getnext_nolock+0x28>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   19928:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   1992a:	4621      	mov	r1, r4
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1992c:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   1992e:	4628      	mov	r0, r5
   19930:	f7ff ff9b 	bl	1986a <fcb_elem_info>
		switch (rc) {
   19934:	1d81      	adds	r1, r0, #6
   19936:	d01f      	beq.n	19978 <fcb_getnext_nolock+0x62>
   19938:	b948      	cbnz	r0, 1994e <fcb_getnext_nolock+0x38>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   1993a:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   1993c:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   1993e:	4621      	mov	r1, r4
   19940:	4628      	mov	r0, r5
   19942:	f7ff ffbd 	bl	198c0 <fcb_getnext_in_sector>
		if (rc == 0) {
   19946:	2800      	cmp	r0, #0
   19948:	d0f7      	beq.n	1993a <fcb_getnext_nolock+0x24>
		if (rc == FCB_ERR_NOVAR) {
   1994a:	1cc2      	adds	r2, r0, #3
   1994c:	d112      	bne.n	19974 <fcb_getnext_nolock+0x5e>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1994e:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   19950:	6821      	ldr	r1, [r4, #0]
   19952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19954:	4299      	cmp	r1, r3
   19956:	d018      	beq.n	1998a <fcb_getnext_nolock+0x74>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   19958:	4628      	mov	r0, r5
   1995a:	f7ff ffd2 	bl	19902 <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   1995e:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   19960:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   19964:	4628      	mov	r0, r5
   19966:	f7ff ff80 	bl	1986a <fcb_elem_info>
			switch (rc) {
   1996a:	1d83      	adds	r3, r0, #6
   1996c:	d004      	beq.n	19978 <fcb_getnext_nolock+0x62>
   1996e:	2800      	cmp	r0, #0
   19970:	d0e3      	beq.n	1993a <fcb_getnext_nolock+0x24>
   19972:	e7ed      	b.n	19950 <fcb_getnext_nolock+0x3a>
	while (rc == FCB_ERR_CRC) {
   19974:	3006      	adds	r0, #6
   19976:	d1e0      	bne.n	1993a <fcb_getnext_nolock+0x24>
		rc = fcb_getnext_in_sector(fcb, loc);
   19978:	4621      	mov	r1, r4
   1997a:	4628      	mov	r0, r5
   1997c:	f7ff ffa0 	bl	198c0 <fcb_getnext_in_sector>
		if (rc == 0) {
   19980:	2800      	cmp	r0, #0
   19982:	d0da      	beq.n	1993a <fcb_getnext_nolock+0x24>
		if (rc != FCB_ERR_CRC) {
   19984:	3006      	adds	r0, #6
   19986:	d0f7      	beq.n	19978 <fcb_getnext_nolock+0x62>
   19988:	e7e1      	b.n	1994e <fcb_getnext_nolock+0x38>
				return FCB_ERR_NOVAR;
   1998a:	f06f 0002 	mvn.w	r0, #2
   1998e:	e7d5      	b.n	1993c <fcb_getnext_nolock+0x26>

00019990 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   19990:	b570      	push	{r4, r5, r6, lr}
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   19992:	f100 050c 	add.w	r5, r0, #12
{
   19996:	4604      	mov	r4, r0
   19998:	460e      	mov	r6, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   1999a:	4628      	mov	r0, r5
   1999c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   199a0:	f7fc feb2 	bl	16708 <z_impl_k_mutex_lock>
	if (rc) {
   199a4:	b948      	cbnz	r0, 199ba <fcb_getnext+0x2a>
		return FCB_ERR_ARGS;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   199a6:	4620      	mov	r0, r4
   199a8:	4631      	mov	r1, r6
   199aa:	f7ff ffb4 	bl	19916 <fcb_getnext_nolock>
   199ae:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   199b0:	4628      	mov	r0, r5
   199b2:	f7fc ff15 	bl	167e0 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   199b6:	4620      	mov	r0, r4
   199b8:	bd70      	pop	{r4, r5, r6, pc}
		return FCB_ERR_ARGS;
   199ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   199be:	e7fa      	b.n	199b6 <fcb_getnext+0x26>

000199c0 <fcb_rotate>:
#include "fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   199c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   199c2:	f100 060c 	add.w	r6, r0, #12
{
   199c6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   199c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   199cc:	4630      	mov	r0, r6
   199ce:	f7fc fe9b 	bl	16708 <z_impl_k_mutex_lock>
	if (rc) {
   199d2:	bb48      	cbnz	r0, 19a28 <fcb_rotate+0x68>
		return FCB_ERR_ARGS;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   199d4:	6a21      	ldr	r1, [r4, #32]
   199d6:	4620      	mov	r0, r4
   199d8:	f7ff fdfe 	bl	195d8 <fcb_erase_sector>
	if (rc) {
   199dc:	bb08      	cbnz	r0, 19a22 <fcb_rotate+0x62>
		rc = FCB_ERR_FLASH;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   199de:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   199e2:	4299      	cmp	r1, r3
   199e4:	d112      	bne.n	19a0c <fcb_rotate+0x4c>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   199e6:	4620      	mov	r0, r4
   199e8:	f7ff ff8b 	bl	19902 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   199ec:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   199ee:	3201      	adds	r2, #1
   199f0:	4601      	mov	r1, r0
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   199f2:	4607      	mov	r7, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   199f4:	b292      	uxth	r2, r2
   199f6:	4620      	mov	r0, r4
   199f8:	f7ff fe33 	bl	19662 <fcb_sector_hdr_init>
		if (rc) {
   199fc:	4605      	mov	r5, r0
   199fe:	b958      	cbnz	r0, 19a18 <fcb_rotate+0x58>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   19a00:	2308      	movs	r3, #8
   19a02:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   19a04:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   19a06:	6267      	str	r7, [r4, #36]	; 0x24
		fcb->f_active_id++;
   19a08:	3301      	adds	r3, #1
   19a0a:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   19a0c:	6a21      	ldr	r1, [r4, #32]
   19a0e:	4620      	mov	r0, r4
   19a10:	f7ff ff77 	bl	19902 <fcb_getnext_sector>
   19a14:	2500      	movs	r5, #0
   19a16:	6220      	str	r0, [r4, #32]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   19a18:	4630      	mov	r0, r6
   19a1a:	f7fc fee1 	bl	167e0 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   19a1e:	4628      	mov	r0, r5
   19a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = FCB_ERR_FLASH;
   19a22:	f06f 0501 	mvn.w	r5, #1
   19a26:	e7f7      	b.n	19a18 <fcb_rotate+0x58>
		return FCB_ERR_ARGS;
   19a28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19a2c:	e7f7      	b.n	19a1e <fcb_rotate+0x5e>

00019a2e <fcb_walk>:
 * only elements with that flash_sector are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_sector *sector, fcb_walk_cb cb,
	 void *cb_arg)
{
   19a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a32:	b086      	sub	sp, #24
   19a34:	4698      	mov	r8, r3
	struct fcb_entry_ctx entry_ctx;
	int rc;

	entry_ctx.loc.fe_sector = sector;
	entry_ctx.loc.fe_elem_off = 0;
   19a36:	2300      	movs	r3, #0
{
   19a38:	4605      	mov	r5, r0
   19a3a:	460e      	mov	r6, r1
   19a3c:	4617      	mov	r7, r2
	entry_ctx.loc.fe_sector = sector;
   19a3e:	9101      	str	r1, [sp, #4]
	entry_ctx.loc.fe_elem_off = 0;
   19a40:	9302      	str	r3, [sp, #8]

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   19a42:	f100 040c 	add.w	r4, r0, #12
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   19a46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19a4a:	4620      	mov	r0, r4
   19a4c:	f7fc fe5c 	bl	16708 <z_impl_k_mutex_lock>
	if (rc < 0) {
   19a50:	2800      	cmp	r0, #0
   19a52:	da12      	bge.n	19a7a <fcb_walk+0x4c>
		return FCB_ERR_ARGS;
   19a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return FCB_ERR_ARGS;
		}
	}
	k_mutex_unlock(&fcb->f_mtx);
	return 0;
}
   19a58:	b006      	add	sp, #24
   19a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
   19a5e:	f7fc febf 	bl	167e0 <z_impl_k_mutex_unlock>
		if (sector && entry_ctx.loc.fe_sector != sector) {
   19a62:	b116      	cbz	r6, 19a6a <fcb_walk+0x3c>
   19a64:	9b01      	ldr	r3, [sp, #4]
   19a66:	42b3      	cmp	r3, r6
   19a68:	d110      	bne.n	19a8c <fcb_walk+0x5e>
		entry_ctx.fap = fcb->fap;
   19a6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   19a6c:	9305      	str	r3, [sp, #20]
		rc = cb(&entry_ctx, cb_arg);
   19a6e:	4641      	mov	r1, r8
   19a70:	a801      	add	r0, sp, #4
   19a72:	47b8      	blx	r7
		if (rc) {
   19a74:	2800      	cmp	r0, #0
   19a76:	d0e6      	beq.n	19a46 <fcb_walk+0x18>
   19a78:	e7ee      	b.n	19a58 <fcb_walk+0x2a>
	while ((rc = fcb_getnext_nolock(fcb, &entry_ctx.loc)) !=
   19a7a:	a901      	add	r1, sp, #4
   19a7c:	4628      	mov	r0, r5
   19a7e:	f7ff ff4a 	bl	19916 <fcb_getnext_nolock>
   19a82:	3003      	adds	r0, #3
   19a84:	4620      	mov	r0, r4
   19a86:	d1ea      	bne.n	19a5e <fcb_walk+0x30>
   19a88:	f7fc feaa 	bl	167e0 <z_impl_k_mutex_unlock>
			return 0;
   19a8c:	2000      	movs	r0, #0
   19a8e:	e7e3      	b.n	19a58 <fcb_walk+0x2a>

00019a90 <z_impl_flash_write_protection_set>:
static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_protection(dev, enable);
   19a90:	6843      	ldr	r3, [r0, #4]
   19a92:	68db      	ldr	r3, [r3, #12]
   19a94:	4718      	bx	r3

00019a96 <get_sectors_cb>:
{
   19a96:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   19a98:	6802      	ldr	r2, [r0, #0]
   19a9a:	684c      	ldr	r4, [r1, #4]
   19a9c:	42a2      	cmp	r2, r4
   19a9e:	d316      	bcc.n	19ace <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   19aa0:	688b      	ldr	r3, [r1, #8]
   19aa2:	4423      	add	r3, r4
   19aa4:	429a      	cmp	r2, r3
   19aa6:	d206      	bcs.n	19ab6 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   19aa8:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   19aac:	42ab      	cmp	r3, r5
   19aae:	d304      	bcc.n	19aba <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   19ab0:	f06f 030b 	mvn.w	r3, #11
   19ab4:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   19ab6:	2000      	movs	r0, #0
   19ab8:	e00a      	b.n	19ad0 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   19aba:	68cd      	ldr	r5, [r1, #12]
   19abc:	1b12      	subs	r2, r2, r4
   19abe:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   19ac2:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   19ac6:	6842      	ldr	r2, [r0, #4]
   19ac8:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   19aca:	3301      	adds	r3, #1
   19acc:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   19ace:	2001      	movs	r0, #1
}
   19ad0:	bd70      	pop	{r4, r5, r6, pc}

00019ad2 <flash_area_close>:
}
   19ad2:	4770      	bx	lr

00019ad4 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   19ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ad8:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   19ada:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   19adc:	428b      	cmp	r3, r1
{
   19ade:	4605      	mov	r5, r0
   19ae0:	460c      	mov	r4, r1
   19ae2:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   19ae4:	d30f      	bcc.n	19b06 <flash_area_read+0x32>
   19ae6:	1872      	adds	r2, r6, r1
   19ae8:	4293      	cmp	r3, r2
   19aea:	d30c      	bcc.n	19b06 <flash_area_read+0x32>
   19aec:	68c0      	ldr	r0, [r0, #12]
   19aee:	f7fc fc4b 	bl	16388 <z_impl_device_get_binding>
	return api->read(dev, offset, data, len);
   19af2:	6843      	ldr	r3, [r0, #4]
		return -1;
	}

	dev = device_get_binding(fa->fa_dev_name);

	return flash_read(dev, fa->fa_off + off, dst, len);
   19af4:	6869      	ldr	r1, [r5, #4]
   19af6:	681d      	ldr	r5, [r3, #0]
   19af8:	463a      	mov	r2, r7
   19afa:	4633      	mov	r3, r6
   19afc:	4421      	add	r1, r4
   19afe:	46ac      	mov	ip, r5
}
   19b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19b04:	4760      	bx	ip
   19b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019b0e <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   19b0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19b12:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   19b14:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   19b16:	428b      	cmp	r3, r1
{
   19b18:	4607      	mov	r7, r0
   19b1a:	460e      	mov	r6, r1
   19b1c:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   19b1e:	d31c      	bcc.n	19b5a <flash_area_write+0x4c>
   19b20:	eb08 0201 	add.w	r2, r8, r1
   19b24:	4293      	cmp	r3, r2
   19b26:	d318      	bcc.n	19b5a <flash_area_write+0x4c>
   19b28:	68c0      	ldr	r0, [r0, #12]
   19b2a:	f7fc fc2d 	bl	16388 <z_impl_device_get_binding>

K_SYSCALL_DECLARE4(K_SYSCALL_FLASH_WRITE, flash_write, int, struct device *, dev, off_t, offset, const void *, data, size_t, len)

K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_ERASE, flash_erase, int, struct device *, dev, off_t, offset, size_t, size)

K_SYSCALL_DECLARE2(K_SYSCALL_FLASH_WRITE_PROTECTION_SET, flash_write_protection_set, int, struct device *, dev, bool, enable)
   19b2e:	2100      	movs	r1, #0
   19b30:	4605      	mov	r5, r0
   19b32:	f7ff ffad 	bl	19a90 <z_impl_flash_write_protection_set>
	}

	flash_dev = device_get_binding(fa->fa_dev_name);

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   19b36:	4604      	mov	r4, r0
   19b38:	b960      	cbnz	r0, 19b54 <flash_area_write+0x46>
	return api->write(dev, offset, data, len);
   19b3a:	686b      	ldr	r3, [r5, #4]
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   19b3c:	6879      	ldr	r1, [r7, #4]
   19b3e:	685c      	ldr	r4, [r3, #4]
   19b40:	4431      	add	r1, r6
   19b42:	4643      	mov	r3, r8
   19b44:	464a      	mov	r2, r9
   19b46:	4628      	mov	r0, r5
   19b48:	47a0      	blx	r4
   19b4a:	2101      	movs	r1, #1
   19b4c:	4604      	mov	r4, r0
   19b4e:	4628      	mov	r0, r5
   19b50:	f7ff ff9e 	bl	19a90 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   19b54:	4620      	mov	r0, r4
   19b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
   19b5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19b5e:	e7f9      	b.n	19b54 <flash_area_write+0x46>

00019b60 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   19b60:	6883      	ldr	r3, [r0, #8]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   19b62:	428b      	cmp	r3, r1
{
   19b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b68:	4607      	mov	r7, r0
   19b6a:	460e      	mov	r6, r1
   19b6c:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   19b6e:	d31a      	bcc.n	19ba6 <flash_area_erase+0x46>
   19b70:	440a      	add	r2, r1
   19b72:	4293      	cmp	r3, r2
   19b74:	d317      	bcc.n	19ba6 <flash_area_erase+0x46>
   19b76:	68c0      	ldr	r0, [r0, #12]
   19b78:	f7fc fc06 	bl	16388 <z_impl_device_get_binding>
   19b7c:	2100      	movs	r1, #0
   19b7e:	4605      	mov	r5, r0
   19b80:	f7ff ff86 	bl	19a90 <z_impl_flash_write_protection_set>
	}

	flash_dev = device_get_binding(fa->fa_dev_name);

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   19b84:	4604      	mov	r4, r0
   19b86:	b958      	cbnz	r0, 19ba0 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   19b88:	6879      	ldr	r1, [r7, #4]
	return api->erase(dev, offset, size);
   19b8a:	686b      	ldr	r3, [r5, #4]
   19b8c:	4431      	add	r1, r6
   19b8e:	689b      	ldr	r3, [r3, #8]
   19b90:	4642      	mov	r2, r8
   19b92:	4628      	mov	r0, r5
   19b94:	4798      	blx	r3
   19b96:	2101      	movs	r1, #1
   19b98:	4604      	mov	r4, r0
   19b9a:	4628      	mov	r0, r5
   19b9c:	f7ff ff78 	bl	19a90 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   19ba0:	4620      	mov	r0, r4
   19ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   19ba6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19baa:	e7f9      	b.n	19ba0 <flash_area_erase+0x40>

00019bac <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   19bac:	b508      	push	{r3, lr}
   19bae:	68c0      	ldr	r0, [r0, #12]
   19bb0:	f7fc fbea 	bl	16388 <z_impl_device_get_binding>

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_block_size;
   19bb4:	6843      	ldr	r3, [r0, #4]
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);

	return flash_get_write_block_size(dev);
}
   19bb6:	7d18      	ldrb	r0, [r3, #20]
   19bb8:	bd08      	pop	{r3, pc}

00019bba <settings_load_cb>:
	int rc = settings_set_value_priv(name, val_read_cb_ctx, off, 0);
   19bba:	2300      	movs	r3, #0
   19bbc:	f000 b866 	b.w	19c8c <settings_set_value_priv>

00019bc0 <settings_dup_check_cb>:
{
   19bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bc4:	4689      	mov	r9, r1
   19bc6:	b089      	sub	sp, #36	; 0x24
	if (strcmp(name, cdca->name)) {
   19bc8:	6819      	ldr	r1, [r3, #0]
{
   19bca:	4692      	mov	sl, r2
   19bcc:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   19bce:	f000 fa4f 	bl	1a070 <strcmp>
   19bd2:	4607      	mov	r7, r0
   19bd4:	b960      	cbnz	r0, 19bf0 <settings_dup_check_cb+0x30>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   19bd6:	4649      	mov	r1, r9
   19bd8:	4650      	mov	r0, sl
   19bda:	f7ed fead 	bl	7938 <settings_line_val_get_len>
	if (len_read == 0) {
   19bde:	6865      	ldr	r5, [r4, #4]
   19be0:	b948      	cbnz	r0, 19bf6 <settings_dup_check_cb+0x36>
		if (!cdca->val || cdca->val_len == 0) {
   19be2:	b10d      	cbz	r5, 19be8 <settings_dup_check_cb+0x28>
   19be4:	68a3      	ldr	r3, [r4, #8]
   19be6:	b90b      	cbnz	r3, 19bec <settings_dup_check_cb+0x2c>
			cdca->is_dup = 1;
   19be8:	2301      	movs	r3, #1
   19bea:	e000      	b.n	19bee <settings_dup_check_cb+0x2e>
			cdca->is_dup = 0;
   19bec:	2300      	movs	r3, #0
			cdca->is_dup = 1;
   19bee:	60e3      	str	r3, [r4, #12]
}
   19bf0:	b009      	add	sp, #36	; 0x24
   19bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cdca->val && !settings_cmp(cdca->val, cdca->val_len,
   19bf6:	2d00      	cmp	r5, #0
   19bf8:	d0f8      	beq.n	19bec <settings_dup_check_cb+0x2c>
   19bfa:	68a6      	ldr	r6, [r4, #8]
		rc = settings_line_val_read(val_off, off, buf, len_read,
   19bfc:	f10d 0b0c 	add.w	fp, sp, #12
	for (rem = val_len; rem > 0; rem -= len_read) {
   19c00:	2e00      	cmp	r6, #0
   19c02:	d0f1      	beq.n	19be8 <settings_dup_check_cb+0x28>
		len_read = exp_len = MIN(sizeof(buf), rem);
   19c04:	2e10      	cmp	r6, #16
   19c06:	46b0      	mov	r8, r6
   19c08:	bf28      	it	cs
   19c0a:	f04f 0810 	movcs.w	r8, #16
		rc = settings_line_val_read(val_off, off, buf, len_read,
   19c0e:	e9cd b900 	strd	fp, r9, [sp]
   19c12:	4643      	mov	r3, r8
   19c14:	aa04      	add	r2, sp, #16
   19c16:	4639      	mov	r1, r7
   19c18:	4650      	mov	r0, sl
		len_read = exp_len = MIN(sizeof(buf), rem);
   19c1a:	f8cd 800c 	str.w	r8, [sp, #12]
		rc = settings_line_val_read(val_off, off, buf, len_read,
   19c1e:	f000 f883 	bl	19d28 <settings_line_val_read>
		if (rc) {
   19c22:	2800      	cmp	r0, #0
   19c24:	d1e2      	bne.n	19bec <settings_dup_check_cb+0x2c>
		if (len_read != exp_len) {
   19c26:	9b03      	ldr	r3, [sp, #12]
   19c28:	4598      	cmp	r8, r3
   19c2a:	d1df      	bne.n	19bec <settings_dup_check_cb+0x2c>
		rc = memcmp(val, buf, len_read);
   19c2c:	4642      	mov	r2, r8
   19c2e:	a904      	add	r1, sp, #16
   19c30:	4628      	mov	r0, r5
   19c32:	f000 fa29 	bl	1a088 <memcmp>
		if (rc) {
   19c36:	2800      	cmp	r0, #0
   19c38:	d1d8      	bne.n	19bec <settings_dup_check_cb+0x2c>
		val += len_read;
   19c3a:	9b03      	ldr	r3, [sp, #12]
   19c3c:	441d      	add	r5, r3
		off += len_read;
   19c3e:	441f      	add	r7, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   19c40:	1af6      	subs	r6, r6, r3
   19c42:	e7dd      	b.n	19c00 <settings_dup_check_cb+0x40>

00019c44 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   19c44:	2200      	movs	r2, #0
   19c46:	4611      	mov	r1, r2
   19c48:	f7ed bcac 	b.w	75a4 <settings_save_one>

00019c4c <settings_parse_name>:
	while (name) {
   19c4c:	2300      	movs	r3, #0
{
   19c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
				name = NULL;
   19c50:	461e      	mov	r6, r3
	while (name) {
   19c52:	b908      	cbnz	r0, 19c58 <settings_parse_name+0xc>
	*name_argc = i;
   19c54:	600b      	str	r3, [r1, #0]
}
   19c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		name_argv[i++] = name;
   19c58:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   19c5c:	4604      	mov	r4, r0
   19c5e:	4627      	mov	r7, r4
			if (*name == '\0') {
   19c60:	f814 5b01 	ldrb.w	r5, [r4], #1
   19c64:	b12d      	cbz	r5, 19c72 <settings_parse_name+0x26>
			if (*name == *SETTINGS_NAME_SEPARATOR) {
   19c66:	2d2f      	cmp	r5, #47	; 0x2f
   19c68:	4620      	mov	r0, r4
   19c6a:	d1f8      	bne.n	19c5e <settings_parse_name+0x12>
				*name = '\0';
   19c6c:	703e      	strb	r6, [r7, #0]
				break;
   19c6e:	3301      	adds	r3, #1
   19c70:	e7ef      	b.n	19c52 <settings_parse_name+0x6>
				name = NULL;
   19c72:	4628      	mov	r0, r5
   19c74:	e7fb      	b.n	19c6e <settings_parse_name+0x22>

00019c76 <settings_parse_and_lookup>:
{
   19c76:	b510      	push	{r4, lr}
	rc = settings_parse_name(name, name_argc, name_argv);
   19c78:	f7ff ffe8 	bl	19c4c <settings_parse_name>
	if (rc) {
   19c7c:	b920      	cbnz	r0, 19c88 <settings_parse_and_lookup+0x12>
	return settings_handler_lookup(name_argv[0]);
   19c7e:	6810      	ldr	r0, [r2, #0]
}
   19c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return settings_handler_lookup(name_argv[0]);
   19c84:	f7ed bcfe 	b.w	7684 <settings_handler_lookup>
}
   19c88:	2000      	movs	r0, #0
   19c8a:	bd10      	pop	{r4, pc}

00019c8c <settings_set_value_priv>:
{
   19c8c:	b570      	push	{r4, r5, r6, lr}
   19c8e:	b08c      	sub	sp, #48	; 0x30
   19c90:	460e      	mov	r6, r1
   19c92:	4615      	mov	r5, r2
	ch = settings_parse_and_lookup(name, &name_argc, name_argv);
   19c94:	4669      	mov	r1, sp
   19c96:	aa04      	add	r2, sp, #16
{
   19c98:	461c      	mov	r4, r3
	ch = settings_parse_and_lookup(name, &name_argc, name_argv);
   19c9a:	f7ff ffec 	bl	19c76 <settings_parse_and_lookup>
	if (!ch) {
   19c9e:	b158      	cbz	r0, 19cb8 <settings_set_value_priv+0x2c>
	return ch->h_set(name_argc - 1, &name_argv[1], (void *)&value_ctx);
   19ca0:	68c3      	ldr	r3, [r0, #12]
   19ca2:	9800      	ldr	r0, [sp, #0]
	value_ctx.runtime = is_runtime;
   19ca4:	f88d 400c 	strb.w	r4, [sp, #12]
	value_ctx.off = off;
   19ca8:	e9cd 6501 	strd	r6, r5, [sp, #4]
	return ch->h_set(name_argc - 1, &name_argv[1], (void *)&value_ctx);
   19cac:	aa01      	add	r2, sp, #4
   19cae:	a905      	add	r1, sp, #20
   19cb0:	3801      	subs	r0, #1
   19cb2:	4798      	blx	r3
}
   19cb4:	b00c      	add	sp, #48	; 0x30
   19cb6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   19cb8:	f06f 0015 	mvn.w	r0, #21
   19cbc:	e7fa      	b.n	19cb4 <settings_set_value_priv+0x28>

00019cbe <settings_val_read_cb>:
{
   19cbe:	b530      	push	{r4, r5, lr}
   19cc0:	460d      	mov	r5, r1
	if (value_context->runtime) {
   19cc2:	7a01      	ldrb	r1, [r0, #8]
   19cc4:	6804      	ldr	r4, [r0, #0]
{
   19cc6:	b085      	sub	sp, #20
	if (value_context->runtime) {
   19cc8:	b151      	cbz	r1, 19ce0 <settings_val_read_cb+0x22>
		len_read = MIN(len, rt_ctx->size);
   19cca:	6863      	ldr	r3, [r4, #4]
		memcpy(buf, rt_ctx->p_value, len_read);
   19ccc:	6821      	ldr	r1, [r4, #0]
		len_read = MIN(len, rt_ctx->size);
   19cce:	429a      	cmp	r2, r3
   19cd0:	bf28      	it	cs
   19cd2:	461a      	movcs	r2, r3
		memcpy(buf, rt_ctx->p_value, len_read);
   19cd4:	4628      	mov	r0, r5
		len_read = MIN(len, rt_ctx->size);
   19cd6:	9203      	str	r2, [sp, #12]
		memcpy(buf, rt_ctx->p_value, len_read);
   19cd8:	f000 f9e6 	bl	1a0a8 <memcpy>
		return len_read;
   19cdc:	9803      	ldr	r0, [sp, #12]
   19cde:	e009      	b.n	19cf4 <settings_val_read_cb+0x36>
		rc = settings_line_val_read(value_context->off, 0, buf, len,
   19ce0:	ab03      	add	r3, sp, #12
   19ce2:	9300      	str	r3, [sp, #0]
   19ce4:	9401      	str	r4, [sp, #4]
   19ce6:	4613      	mov	r3, r2
   19ce8:	6840      	ldr	r0, [r0, #4]
   19cea:	462a      	mov	r2, r5
   19cec:	f000 f81c 	bl	19d28 <settings_line_val_read>
	if (rc == 0) {
   19cf0:	2800      	cmp	r0, #0
   19cf2:	d0f3      	beq.n	19cdc <settings_val_read_cb+0x1e>
}
   19cf4:	b005      	add	sp, #20
   19cf6:	bd30      	pop	{r4, r5, pc}

00019cf8 <settings_val_get_len_cb>:
	if (value_context->runtime) {
   19cf8:	7a03      	ldrb	r3, [r0, #8]
   19cfa:	6801      	ldr	r1, [r0, #0]
   19cfc:	b913      	cbnz	r3, 19d04 <settings_val_get_len_cb+0xc>
		return settings_line_val_get_len(value_context->off,
   19cfe:	6840      	ldr	r0, [r0, #4]
   19d00:	f7ed be1a 	b.w	7938 <settings_line_val_get_len>
		return rt_ctx->size;
   19d04:	6848      	ldr	r0, [r1, #4]
}
   19d06:	4770      	bx	lr

00019d08 <settings_line_len_calc>:
{
   19d08:	b510      	push	{r4, lr}
   19d0a:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   19d0c:	f000 f9a9 	bl	1a062 <strlen>
   19d10:	3401      	adds	r4, #1
}
   19d12:	4420      	add	r0, r4
   19d14:	bd10      	pop	{r4, pc}

00019d16 <settings_line_raw_read>:
{
   19d16:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   19d18:	9c04      	ldr	r4, [sp, #16]
   19d1a:	9401      	str	r4, [sp, #4]
   19d1c:	2400      	movs	r4, #0
   19d1e:	9400      	str	r4, [sp, #0]
   19d20:	f7ed fd54 	bl	77cc <settings_line_raw_read_until>
}
   19d24:	b002      	add	sp, #8
   19d26:	bd10      	pop	{r4, pc}

00019d28 <settings_line_val_read>:
{
   19d28:	b410      	push	{r4}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   19d2a:	4408      	add	r0, r1
{
   19d2c:	4614      	mov	r4, r2
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   19d2e:	9902      	ldr	r1, [sp, #8]
{
   19d30:	461a      	mov	r2, r3
   19d32:	9b01      	ldr	r3, [sp, #4]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   19d34:	9101      	str	r1, [sp, #4]
   19d36:	4621      	mov	r1, r4
}
   19d38:	bc10      	pop	{r4}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   19d3a:	f7ff bfec 	b.w	19d16 <settings_line_raw_read>

00019d3e <settings_line_name_read>:
{
   19d3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read_until(0, out, len_req, len_read,
   19d40:	9301      	str	r3, [sp, #4]
   19d42:	f10d 030f 	add.w	r3, sp, #15
   19d46:	9300      	str	r3, [sp, #0]
	char const until_char = '=';
   19d48:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   19d4a:	4613      	mov	r3, r2
   19d4c:	460a      	mov	r2, r1
   19d4e:	4601      	mov	r1, r0
   19d50:	2000      	movs	r0, #0
	char const until_char = '=';
   19d52:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   19d56:	f7ed fd39 	bl	77cc <settings_line_raw_read_until>
}
   19d5a:	b004      	add	sp, #16
   19d5c:	bd10      	pop	{r4, pc}

00019d5e <get_len_cb>:
}
   19d5e:	8980      	ldrh	r0, [r0, #12]
   19d60:	4770      	bx	lr

00019d62 <settings_fcb_load_cb>:
{
   19d62:	b570      	push	{r4, r5, r6, lr}
   19d64:	b094      	sub	sp, #80	; 0x50
   19d66:	4604      	mov	r4, r0
   19d68:	460d      	mov	r5, r1
	rc = settings_line_name_read(buf, sizeof(buf), &len_read,
   19d6a:	4603      	mov	r3, r0
   19d6c:	466a      	mov	r2, sp
   19d6e:	214a      	movs	r1, #74	; 0x4a
   19d70:	a801      	add	r0, sp, #4
   19d72:	f7ff ffe4 	bl	19d3e <settings_line_name_read>
	if (rc) {
   19d76:	b950      	cbnz	r0, 19d8e <settings_fcb_load_cb+0x2c>
	buf[len_read] = '\0';
   19d78:	9a00      	ldr	r2, [sp, #0]
   19d7a:	ab14      	add	r3, sp, #80	; 0x50
   19d7c:	4413      	add	r3, r2
	argp->cb(buf, (void *)&entry_ctx->loc, len_read + 1, argp->cb_arg);
   19d7e:	4621      	mov	r1, r4
	buf[len_read] = '\0';
   19d80:	f803 0c4c 	strb.w	r0, [r3, #-76]
	argp->cb(buf, (void *)&entry_ctx->loc, len_read + 1, argp->cb_arg);
   19d84:	3201      	adds	r2, #1
   19d86:	e9d5 6300 	ldrd	r6, r3, [r5]
   19d8a:	a801      	add	r0, sp, #4
   19d8c:	47b0      	blx	r6
}
   19d8e:	2000      	movs	r0, #0
   19d90:	b014      	add	sp, #80	; 0x50
   19d92:	bd70      	pop	{r4, r5, r6, pc}

00019d94 <settings_fcb_save>:
{
   19d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d98:	4606      	mov	r6, r0
   19d9a:	b0bb      	sub	sp, #236	; 0xec
   19d9c:	4692      	mov	sl, r2
   19d9e:	4699      	mov	r9, r3
	if (!name) {
   19da0:	460f      	mov	r7, r1
   19da2:	b929      	cbnz	r1, 19db0 <settings_fcb_save+0x1c>
		return -EINVAL;
   19da4:	f06f 0615 	mvn.w	r6, #21
}
   19da8:	4630      	mov	r0, r6
   19daa:	b03b      	add	sp, #236	; 0xec
   19dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	len = settings_line_len_calc(name, val_len);
   19db0:	4619      	mov	r1, r3
   19db2:	4638      	mov	r0, r7
   19db4:	f7ff ffa8 	bl	19d08 <settings_line_len_calc>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt - 1; i++) {
   19db8:	f04f 0800 	mov.w	r8, #0
	len = settings_line_len_calc(name, val_len);
   19dbc:	4683      	mov	fp, r0
	for (i = 0; i < cf->cf_fcb.f_sector_cnt - 1; i++) {
   19dbe:	7b73      	ldrb	r3, [r6, #13]
   19dc0:	3b01      	subs	r3, #1
   19dc2:	4543      	cmp	r3, r8
   19dc4:	ddee      	ble.n	19da4 <settings_fcb_save+0x10>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   19dc6:	f106 0408 	add.w	r4, r6, #8
   19dca:	ad05      	add	r5, sp, #20
   19dcc:	462a      	mov	r2, r5
   19dce:	fa1f f18b 	uxth.w	r1, fp
   19dd2:	4620      	mov	r0, r4
   19dd4:	f7ff fb1e 	bl	19414 <fcb_append>
		if (rc != FCB_ERR_NOSPACE) {
   19dd8:	1d02      	adds	r2, r0, #4
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   19dda:	4603      	mov	r3, r0
		if (rc != FCB_ERR_NOSPACE) {
   19ddc:	d161      	bne.n	19ea2 <settings_fcb_save+0x10e>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   19dde:	4620      	mov	r0, r4
   19de0:	f7ff fafc 	bl	193dc <fcb_append_to_scratch>
	if (rc) {
   19de4:	4605      	mov	r5, r0
   19de6:	b970      	cbnz	r0, 19e06 <settings_fcb_save+0x72>
	rbs = flash_area_align(cf->cf_fcb.fap);
   19de8:	6c30      	ldr	r0, [r6, #64]	; 0x40
   19dea:	f7ff fedf 	bl	19bac <flash_area_align>
	loc1.loc.fe_elem_off = 0;
   19dee:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	loc1.fap = cf->cf_fcb.fap;
   19df2:	6c33      	ldr	r3, [r6, #64]	; 0x40
   19df4:	930e      	str	r3, [sp, #56]	; 0x38
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   19df6:	a90a      	add	r1, sp, #40	; 0x28
   19df8:	4620      	mov	r0, r4
   19dfa:	f7ff fdc9 	bl	19990 <fcb_getnext>
   19dfe:	b128      	cbz	r0, 19e0c <settings_fcb_save+0x78>
	rc = fcb_rotate(&cf->cf_fcb);
   19e00:	4620      	mov	r0, r4
   19e02:	f7ff fddd 	bl	199c0 <fcb_rotate>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt - 1; i++) {
   19e06:	f108 0801 	add.w	r8, r8, #1
   19e0a:	e7d8      	b.n	19dbe <settings_fcb_save+0x2a>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   19e0c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   19e0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19e10:	429a      	cmp	r2, r3
   19e12:	d1f5      	bne.n	19e00 <settings_fcb_save+0x6c>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   19e14:	ab0a      	add	r3, sp, #40	; 0x28
   19e16:	aa03      	add	r2, sp, #12
   19e18:	2149      	movs	r1, #73	; 0x49
   19e1a:	a814      	add	r0, sp, #80	; 0x50
   19e1c:	f7ff ff8f 	bl	19d3e <settings_line_name_read>
		if (rc) {
   19e20:	2800      	cmp	r0, #0
   19e22:	d1e8      	bne.n	19df6 <settings_fcb_save+0x62>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   19e24:	9b03      	ldr	r3, [sp, #12]
   19e26:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   19e2a:	3301      	adds	r3, #1
   19e2c:	4293      	cmp	r3, r2
   19e2e:	d0e2      	beq.n	19df6 <settings_fcb_save+0x62>
		loc2 = loc1;
   19e30:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   19e34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   19e38:	ad0f      	add	r5, sp, #60	; 0x3c
   19e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   19e3c:	f8dc 3000 	ldr.w	r3, [ip]
   19e40:	602b      	str	r3, [r5, #0]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   19e42:	a90f      	add	r1, sp, #60	; 0x3c
   19e44:	4620      	mov	r0, r4
   19e46:	f7ff fda3 	bl	19990 <fcb_getnext>
   19e4a:	b1b8      	cbz	r0, 19e7c <settings_fcb_save+0xe8>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   19e4c:	aa0f      	add	r2, sp, #60	; 0x3c
   19e4e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   19e52:	4620      	mov	r0, r4
   19e54:	f7ff fade 	bl	19414 <fcb_append>
		if (rc) {
   19e58:	4603      	mov	r3, r0
   19e5a:	2800      	cmp	r0, #0
   19e5c:	d1cb      	bne.n	19df6 <settings_fcb_save+0x62>
		rc = settings_entry_copy(&loc2, 0, &loc1, 0,
   19e5e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   19e62:	9200      	str	r2, [sp, #0]
   19e64:	4601      	mov	r1, r0
   19e66:	aa0a      	add	r2, sp, #40	; 0x28
   19e68:	a80f      	add	r0, sp, #60	; 0x3c
   19e6a:	f7ed fd6f 	bl	794c <settings_entry_copy>
		if (rc) {
   19e6e:	2800      	cmp	r0, #0
   19e70:	d1c1      	bne.n	19df6 <settings_fcb_save+0x62>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   19e72:	a90f      	add	r1, sp, #60	; 0x3c
   19e74:	4620      	mov	r0, r4
   19e76:	f7ff fb50 	bl	1951a <fcb_append_finish>
		if (rc != 0) {
   19e7a:	e7bc      	b.n	19df6 <settings_fcb_save+0x62>
			rc = settings_line_name_read(name2, sizeof(name2),
   19e7c:	ab0f      	add	r3, sp, #60	; 0x3c
   19e7e:	aa04      	add	r2, sp, #16
   19e80:	2149      	movs	r1, #73	; 0x49
   19e82:	a827      	add	r0, sp, #156	; 0x9c
   19e84:	f7ff ff5b 	bl	19d3e <settings_line_name_read>
			if (rc) {
   19e88:	2800      	cmp	r0, #0
   19e8a:	d1da      	bne.n	19e42 <settings_fcb_save+0xae>
			if ((val1_off == val2_off) &&
   19e8c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   19e90:	429a      	cmp	r2, r3
   19e92:	d1d6      	bne.n	19e42 <settings_fcb_save+0xae>
			    !memcmp(name1, name2, val1_off)) {
   19e94:	a927      	add	r1, sp, #156	; 0x9c
   19e96:	a814      	add	r0, sp, #80	; 0x50
   19e98:	f000 f8f6 	bl	1a088 <memcmp>
			if ((val1_off == val2_off) &&
   19e9c:	2800      	cmp	r0, #0
   19e9e:	d1d0      	bne.n	19e42 <settings_fcb_save+0xae>
   19ea0:	e7a9      	b.n	19df6 <settings_fcb_save+0x62>
	if (rc) {
   19ea2:	2800      	cmp	r0, #0
   19ea4:	f47f af7e 	bne.w	19da4 <settings_fcb_save+0x10>
	loc.fap = cf->cf_fcb.fap;
   19ea8:	6c32      	ldr	r2, [r6, #64]	; 0x40
   19eaa:	9209      	str	r2, [sp, #36]	; 0x24
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   19eac:	9500      	str	r5, [sp, #0]
   19eae:	464a      	mov	r2, r9
   19eb0:	4651      	mov	r1, sl
   19eb2:	4638      	mov	r0, r7
   19eb4:	f7ed fcde 	bl	7874 <settings_line_write>
	if (rc != -EIO) {
   19eb8:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   19eba:	4606      	mov	r6, r0
	if (rc != -EIO) {
   19ebc:	f43f af74 	beq.w	19da8 <settings_fcb_save+0x14>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   19ec0:	4629      	mov	r1, r5
   19ec2:	4620      	mov	r0, r4
   19ec4:	f7ff fb29 	bl	1951a <fcb_append_finish>
			rc = i;
   19ec8:	2e00      	cmp	r6, #0
   19eca:	bf08      	it	eq
   19ecc:	4606      	moveq	r6, r0
   19ece:	e76b      	b.n	19da8 <settings_fcb_save+0x14>

00019ed0 <write_handler>:
{
   19ed0:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   19ed2:	6805      	ldr	r5, [r0, #0]
   19ed4:	6884      	ldr	r4, [r0, #8]
	return flash_area_write(entry_ctx->fap,
   19ed6:	6900      	ldr	r0, [r0, #16]
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   19ed8:	4421      	add	r1, r4
   19eda:	682c      	ldr	r4, [r5, #0]
	return flash_area_write(entry_ctx->fap,
   19edc:	4421      	add	r1, r4
}
   19ede:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   19ee0:	f7ff be15 	b.w	19b0e <flash_area_write>

00019ee4 <read_handler>:
{
   19ee4:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   19ee6:	8984      	ldrh	r4, [r0, #12]
   19ee8:	428c      	cmp	r4, r1
   19eea:	dd0f      	ble.n	19f0c <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   19eec:	681d      	ldr	r5, [r3, #0]
   19eee:	440d      	add	r5, r1
   19ef0:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   19ef2:	bf84      	itt	hi
   19ef4:	1a64      	subhi	r4, r4, r1
   19ef6:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   19ef8:	6804      	ldr	r4, [r0, #0]
   19efa:	6885      	ldr	r5, [r0, #8]
   19efc:	6824      	ldr	r4, [r4, #0]
	return flash_area_read(entry_ctx->fap,
   19efe:	681b      	ldr	r3, [r3, #0]
   19f00:	6900      	ldr	r0, [r0, #16]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   19f02:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   19f04:	4421      	add	r1, r4
}
   19f06:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   19f08:	f7ff bde4 	b.w	19ad4 <flash_area_read>
		*len = 0;
   19f0c:	2000      	movs	r0, #0
   19f0e:	6018      	str	r0, [r3, #0]
}
   19f10:	bc30      	pop	{r4, r5}
   19f12:	4770      	bx	lr

00019f14 <_clock_control_init>:

static int _clock_control_init(struct device *dev)
{
   19f14:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
   19f16:	2200      	movs	r2, #0
   19f18:	4610      	mov	r0, r2
   19f1a:	2101      	movs	r1, #1
   19f1c:	f7ee fa36 	bl	838c <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   19f20:	2000      	movs	r0, #0
   19f22:	f7ee fa01 	bl	8328 <z_arch_irq_enable>

	return 0;
}
   19f26:	2000      	movs	r0, #0
   19f28:	bd08      	pop	{r3, pc}

00019f2a <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   19f2a:	4770      	bx	lr

00019f2c <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   19f2c:	4770      	bx	lr

00019f2e <z_irq_spurious>:
	__reserved();
   19f2e:	f7ee ba89 	b.w	8444 <__bus_fault>

00019f32 <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	z_sys_trace_isr_enter();
}
   19f32:	4770      	bx	lr

00019f34 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
   19f34:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->r0, esf);
   19f36:	6800      	ldr	r0, [r0, #0]
   19f38:	f7ee ba98 	b.w	846c <z_NanoFatalErrorHandler>

00019f3c <lock_interrupts>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
   19f3c:	2320      	movs	r3, #32
   19f3e:	f383 8811 	msr	BASEPRI, r3
}
   19f42:	4770      	bx	lr

00019f44 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   19f44:	b508      	push	{r3, lr}
	handler();
   19f46:	f7ee fb37 	bl	85b8 <_SysNmiOnReset>
	z_ExcExit();
}
   19f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
   19f4e:	f7ee b82d 	b.w	7fac <_IntExit>

00019f52 <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   19f52:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   19f54:	2100      	movs	r1, #0
   19f56:	a801      	add	r0, sp, #4
   19f58:	f7ee fc00 	bl	875c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   19f5c:	b003      	add	sp, #12
   19f5e:	f85d fb04 	ldr.w	pc, [sp], #4

00019f62 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   19f62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19f66:	4684      	mov	ip, r0
   19f68:	460f      	mov	r7, r1
	register const char *s = nptr;
   19f6a:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   19f6c:	462c      	mov	r4, r5
   19f6e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   19f72:	2b20      	cmp	r3, #32
   19f74:	d036      	beq.n	19fe4 <strtol+0x82>
   19f76:	f1a3 0109 	sub.w	r1, r3, #9
   19f7a:	2904      	cmp	r1, #4
   19f7c:	d932      	bls.n	19fe4 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   19f7e:	2b2d      	cmp	r3, #45	; 0x2d
   19f80:	d132      	bne.n	19fe8 <strtol+0x86>
		neg = 1;
		c = *s++;
   19f82:	786b      	ldrb	r3, [r5, #1]
   19f84:	1cac      	adds	r4, r5, #2
		neg = 1;
   19f86:	2101      	movs	r1, #1
	} else if (c == '+')
		c = *s++;
	if ((base == 0 || base == 16) &&
   19f88:	2a00      	cmp	r2, #0
   19f8a:	d05c      	beq.n	1a046 <strtol+0xe4>
   19f8c:	2a10      	cmp	r2, #16
   19f8e:	d109      	bne.n	19fa4 <strtol+0x42>
   19f90:	2b30      	cmp	r3, #48	; 0x30
   19f92:	d107      	bne.n	19fa4 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   19f94:	7823      	ldrb	r3, [r4, #0]
   19f96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19f9a:	2b58      	cmp	r3, #88	; 0x58
   19f9c:	d14e      	bne.n	1a03c <strtol+0xda>
		c = s[1];
   19f9e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   19fa0:	2210      	movs	r2, #16
		s += 2;
   19fa2:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   19fa4:	2900      	cmp	r1, #0
   19fa6:	bf14      	ite	ne
   19fa8:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   19fac:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   19fb0:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   19fb2:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   19fb6:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   19fb8:	fb02 891e 	mls	r9, r2, lr, r8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   19fbc:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   19fc0:	2d09      	cmp	r5, #9
   19fc2:	d817      	bhi.n	19ff4 <strtol+0x92>
			c -= '0';
   19fc4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   19fc6:	429a      	cmp	r2, r3
   19fc8:	dd24      	ble.n	1a014 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   19fca:	1c75      	adds	r5, r6, #1
   19fcc:	d007      	beq.n	19fde <strtol+0x7c>
   19fce:	4570      	cmp	r0, lr
   19fd0:	d81d      	bhi.n	1a00e <strtol+0xac>
   19fd2:	d101      	bne.n	19fd8 <strtol+0x76>
   19fd4:	454b      	cmp	r3, r9
   19fd6:	dc1a      	bgt.n	1a00e <strtol+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   19fd8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   19fdc:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   19fde:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   19fe2:	e7eb      	b.n	19fbc <strtol+0x5a>
{
   19fe4:	4625      	mov	r5, r4
   19fe6:	e7c1      	b.n	19f6c <strtol+0xa>
	} else if (c == '+')
   19fe8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   19fea:	bf04      	itt	eq
   19fec:	1cac      	addeq	r4, r5, #2
   19fee:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   19ff0:	2100      	movs	r1, #0
   19ff2:	e7c9      	b.n	19f88 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   19ff4:	f043 0520 	orr.w	r5, r3, #32
   19ff8:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   19ffa:	2d19      	cmp	r5, #25
   19ffc:	d80a      	bhi.n	1a014 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19ffe:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1a002:	2d1a      	cmp	r5, #26
   1a004:	bf34      	ite	cc
   1a006:	2537      	movcc	r5, #55	; 0x37
   1a008:	2557      	movcs	r5, #87	; 0x57
   1a00a:	1b5b      	subs	r3, r3, r5
   1a00c:	e7db      	b.n	19fc6 <strtol+0x64>
			any = -1;
   1a00e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1a012:	e7e4      	b.n	19fde <strtol+0x7c>
		}
	}
	if (any < 0) {
   1a014:	1c73      	adds	r3, r6, #1
   1a016:	d107      	bne.n	1a028 <strtol+0xc6>
   1a018:	f7fc f9dc 	bl	163d4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1a01c:	2326      	movs	r3, #38	; 0x26
   1a01e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1a020:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != NULL) {
   1a022:	b937      	cbnz	r7, 1a032 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1a024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
   1a028:	b101      	cbz	r1, 1a02c <strtol+0xca>
		acc = -acc;
   1a02a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1a02c:	2f00      	cmp	r7, #0
   1a02e:	d0f9      	beq.n	1a024 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   1a030:	b10e      	cbz	r6, 1a036 <strtol+0xd4>
   1a032:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1a036:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1a03a:	e7f3      	b.n	1a024 <strtol+0xc2>
	if (base == 0) {
   1a03c:	2330      	movs	r3, #48	; 0x30
   1a03e:	2a00      	cmp	r2, #0
   1a040:	d1b0      	bne.n	19fa4 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1a042:	2208      	movs	r2, #8
   1a044:	e7ae      	b.n	19fa4 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1a046:	2b30      	cmp	r3, #48	; 0x30
   1a048:	d0a4      	beq.n	19f94 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1a04a:	220a      	movs	r2, #10
   1a04c:	e7aa      	b.n	19fa4 <strtol+0x42>

0001a04e <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1a04e:	3901      	subs	r1, #1
   1a050:	4603      	mov	r3, r0
   1a052:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a056:	b90a      	cbnz	r2, 1a05c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1a058:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1a05a:	4770      	bx	lr
		*d = *s;
   1a05c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1a060:	e7f7      	b.n	1a052 <strcpy+0x4>

0001a062 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   1a062:	2300      	movs	r3, #0

	while (*s != '\0') {
   1a064:	5cc2      	ldrb	r2, [r0, r3]
   1a066:	b90a      	cbnz	r2, 1a06c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1a068:	4618      	mov	r0, r3
   1a06a:	4770      	bx	lr
		n++;
   1a06c:	3301      	adds	r3, #1
   1a06e:	e7f9      	b.n	1a064 <strlen+0x2>

0001a070 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1a070:	3801      	subs	r0, #1
   1a072:	3901      	subs	r1, #1
   1a074:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1a078:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1a07c:	4293      	cmp	r3, r2
   1a07e:	d101      	bne.n	1a084 <strcmp+0x14>
   1a080:	2b00      	cmp	r3, #0
   1a082:	d1f7      	bne.n	1a074 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1a084:	1a98      	subs	r0, r3, r2
   1a086:	4770      	bx	lr

0001a088 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1a088:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
   1a08a:	b15a      	cbz	r2, 1a0a4 <memcmp+0x1c>
   1a08c:	3901      	subs	r1, #1
   1a08e:	1884      	adds	r4, r0, r2
   1a090:	f810 2b01 	ldrb.w	r2, [r0], #1
   1a094:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
   1a098:	42a0      	cmp	r0, r4
   1a09a:	d001      	beq.n	1a0a0 <memcmp+0x18>
   1a09c:	429a      	cmp	r2, r3
   1a09e:	d0f7      	beq.n	1a090 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1a0a0:	1ad0      	subs	r0, r2, r3
}
   1a0a2:	bd10      	pop	{r4, pc}
		return 0;
   1a0a4:	4610      	mov	r0, r2
   1a0a6:	e7fc      	b.n	1a0a2 <memcmp+0x1a>

0001a0a8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1a0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
   1a0aa:	ea81 0400 	eor.w	r4, r1, r0
   1a0ae:	07a5      	lsls	r5, r4, #30
   1a0b0:	4603      	mov	r3, r0
   1a0b2:	d00b      	beq.n	1a0cc <memcpy+0x24>
   1a0b4:	3b01      	subs	r3, #1
   1a0b6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1a0b8:	4291      	cmp	r1, r2
   1a0ba:	d11a      	bne.n	1a0f2 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1a0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1a0be:	2a00      	cmp	r2, #0
   1a0c0:	d0fc      	beq.n	1a0bc <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1a0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a0c6:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1a0ca:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
   1a0cc:	079c      	lsls	r4, r3, #30
   1a0ce:	d1f6      	bne.n	1a0be <memcpy+0x16>
   1a0d0:	0895      	lsrs	r5, r2, #2
   1a0d2:	00ac      	lsls	r4, r5, #2
   1a0d4:	1f1e      	subs	r6, r3, #4
   1a0d6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(unsigned int)) {
   1a0d8:	42b9      	cmp	r1, r7
   1a0da:	d105      	bne.n	1a0e8 <memcpy+0x40>
   1a0dc:	f06f 0603 	mvn.w	r6, #3
   1a0e0:	fb06 2205 	mla	r2, r6, r5, r2
   1a0e4:	4423      	add	r3, r4
   1a0e6:	e7e5      	b.n	1a0b4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1a0e8:	f851 cb04 	ldr.w	ip, [r1], #4
   1a0ec:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(unsigned int);
   1a0f0:	e7f2      	b.n	1a0d8 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   1a0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a0f6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1a0fa:	e7dd      	b.n	1a0b8 <memcpy+0x10>

0001a0fc <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1a0fc:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1a0fe:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1a100:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
   1a102:	079c      	lsls	r4, r3, #30
   1a104:	d110      	bne.n	1a128 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
   1a106:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1a10a:	ea44 4504 	orr.w	r5, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
   1a10e:	0894      	lsrs	r4, r2, #2
   1a110:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   1a114:	42b3      	cmp	r3, r6
   1a116:	d10d      	bne.n	1a134 <memset+0x38>
   1a118:	f06f 0503 	mvn.w	r5, #3
   1a11c:	fb05 2404 	mla	r4, r5, r4, r2
   1a120:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1a122:	42a3      	cmp	r3, r4
   1a124:	d109      	bne.n	1a13a <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1a126:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1a128:	2a00      	cmp	r2, #0
   1a12a:	d0fc      	beq.n	1a126 <memset+0x2a>
		*(d_byte++) = c_byte;
   1a12c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a130:	3a01      	subs	r2, #1
   1a132:	e7e6      	b.n	1a102 <memset+0x6>
		*(d_word++) = c_word;
   1a134:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(unsigned int);
   1a138:	e7ec      	b.n	1a114 <memset+0x18>
		*(d_byte++) = c_byte;
   1a13a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1a13e:	e7f0      	b.n	1a122 <memset+0x26>

0001a140 <memchr>:
 *
 * @return pointer to start of found byte
 */

void *memchr(const void *s, unsigned char c, size_t n)
{
   1a140:	b510      	push	{r4, lr}
	if (n != 0) {
   1a142:	b152      	cbz	r2, 1a15a <memchr+0x1a>
   1a144:	4402      	add	r2, r0
		const unsigned char *p = s;

		do {
			if (*p++ == c) {
   1a146:	4603      	mov	r3, r0
   1a148:	f813 4b01 	ldrb.w	r4, [r3], #1
   1a14c:	428c      	cmp	r4, r1
   1a14e:	d003      	beq.n	1a158 <memchr+0x18>
				return ((void *)(p - 1));
			}

		} while (--n != 0);
   1a150:	429a      	cmp	r2, r3
   1a152:	4618      	mov	r0, r3
   1a154:	d1f7      	bne.n	1a146 <memchr+0x6>
	}

	return NULL;
   1a156:	2000      	movs	r0, #0
}
   1a158:	bd10      	pop	{r4, pc}
	return NULL;
   1a15a:	4610      	mov	r0, r2
   1a15c:	e7fc      	b.n	1a158 <memchr+0x18>

0001a15e <_stdout_hook_default>:
}
   1a15e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a162:	4770      	bx	lr

0001a164 <send_cmd_status>:
{
   1a164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a168:	4680      	mov	r8, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1a16a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   1a16e:	460f      	mov	r7, r1
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1a170:	f7ef ff26 	bl	9fc0 <bt_buf_get_cmd_complete>
	*(u8_t *)net_buf_user_data(buf) = type;
   1a174:	2501      	movs	r5, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1a176:	f100 0608 	add.w	r6, r0, #8
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   1a17a:	4604      	mov	r4, r0
   1a17c:	7505      	strb	r5, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1a17e:	2102      	movs	r1, #2
   1a180:	4630      	mov	r0, r6
   1a182:	f004 ffbb 	bl	1f0fc <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a186:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1a188:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a18a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1a18c:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1a18e:	4630      	mov	r0, r6
   1a190:	f004 ffb4 	bl	1f0fc <net_buf_simple_add>
	evt->ncmd = 1;
   1a194:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   1a196:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1a198:	f8a0 8002 	strh.w	r8, [r0, #2]
	bt_recv_prio(buf);
   1a19c:	4620      	mov	r0, r4
}
   1a19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
   1a1a2:	f7ef bbf7 	b.w	9994 <bt_recv_prio>

0001a1a6 <sys_memcpy_swap.constprop.2>:
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   1a1a6:	f101 0320 	add.w	r3, r1, #32
   1a1aa:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1a1ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1a1b0:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1a1b4:	428b      	cmp	r3, r1
   1a1b6:	d1f9      	bne.n	1a1ac <sys_memcpy_swap.constprop.2+0x6>
	}
}
   1a1b8:	4770      	bx	lr

0001a1ba <default_CSPRNG>:
{
   1a1ba:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1a1bc:	f004 fbcc 	bl	1e958 <bt_rand>
}
   1a1c0:	fab0 f080 	clz	r0, r0
   1a1c4:	0940      	lsrs	r0, r0, #5
   1a1c6:	bd08      	pop	{r3, pc}

0001a1c8 <bt_settings_decode_key>:
{
   1a1c8:	b570      	push	{r4, r5, r6, lr}
   1a1ca:	4604      	mov	r4, r0
   1a1cc:	460e      	mov	r6, r1
	if (strlen(key) != 13) {
   1a1ce:	f7ff ff48 	bl	1a062 <strlen>
   1a1d2:	280d      	cmp	r0, #13
   1a1d4:	d128      	bne.n	1a228 <bt_settings_decode_key+0x60>
	if (key[12] == '0') {
   1a1d6:	7b23      	ldrb	r3, [r4, #12]
   1a1d8:	2b30      	cmp	r3, #48	; 0x30
   1a1da:	d11c      	bne.n	1a216 <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_PUBLIC;
   1a1dc:	2300      	movs	r3, #0
		addr->type = BT_ADDR_LE_RANDOM;
   1a1de:	7033      	strb	r3, [r6, #0]
   1a1e0:	1e60      	subs	r0, r4, #1
{
   1a1e2:	2501      	movs	r5, #1
   1a1e4:	2205      	movs	r2, #5
		if (*key >= '0' && *key <= '9') {
   1a1e6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   1a1ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1a1ee:	b2db      	uxtb	r3, r3
   1a1f0:	2b09      	cmp	r3, #9
   1a1f2:	d906      	bls.n	1a202 <bt_settings_decode_key+0x3a>
		} else if (*key >= 'a' && *key <= 'f') {
   1a1f4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1a1f8:	2b05      	cmp	r3, #5
   1a1fa:	d815      	bhi.n	1a228 <bt_settings_decode_key+0x60>
			nibble = *key - 'a' + 10;
   1a1fc:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1a200:	b2db      	uxtb	r3, r3
		if (high) {
   1a202:	18b1      	adds	r1, r6, r2
   1a204:	b15d      	cbz	r5, 1a21e <bt_settings_decode_key+0x56>
			addr->a.val[i] = nibble << 4;
   1a206:	011b      	lsls	r3, r3, #4
   1a208:	b2db      	uxtb	r3, r3
			high = false;
   1a20a:	2500      	movs	r5, #0
   1a20c:	704b      	strb	r3, [r1, #1]
	for (i = 5, high = true; i >= 0; key++) {
   1a20e:	1c53      	adds	r3, r2, #1
   1a210:	d1e9      	bne.n	1a1e6 <bt_settings_decode_key+0x1e>
	return 0;
   1a212:	2000      	movs	r0, #0
}
   1a214:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1a216:	2b31      	cmp	r3, #49	; 0x31
   1a218:	d106      	bne.n	1a228 <bt_settings_decode_key+0x60>
		addr->type = BT_ADDR_LE_RANDOM;
   1a21a:	2301      	movs	r3, #1
   1a21c:	e7df      	b.n	1a1de <bt_settings_decode_key+0x16>
			addr->a.val[i] |= nibble;
   1a21e:	784c      	ldrb	r4, [r1, #1]
			i--;
   1a220:	3a01      	subs	r2, #1
			addr->a.val[i] |= nibble;
   1a222:	4323      	orrs	r3, r4
			high = true;
   1a224:	2501      	movs	r5, #1
   1a226:	e7f1      	b.n	1a20c <bt_settings_decode_key+0x44>
		return -EINVAL;
   1a228:	f06f 0015 	mvn.w	r0, #21
   1a22c:	e7f2      	b.n	1a214 <bt_settings_decode_key+0x4c>

0001a22e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1a22e:	b510      	push	{r4, lr}
   1a230:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
   1a232:	7801      	ldrb	r1, [r0, #0]
   1a234:	7822      	ldrb	r2, [r4, #0]
   1a236:	428a      	cmp	r2, r1
{
   1a238:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
   1a23a:	d00e      	beq.n	1a25a <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1a23c:	4669      	mov	r1, sp
   1a23e:	f7ee fce7 	bl	8c10 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1a242:	a905      	add	r1, sp, #20
   1a244:	4620      	mov	r0, r4
   1a246:	f7ee fce3 	bl	8c10 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1a24a:	2210      	movs	r2, #16
   1a24c:	f10d 0115 	add.w	r1, sp, #21
   1a250:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a254:	f7ff ff18 	bl	1a088 <memcmp>
   1a258:	e006      	b.n	1a268 <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   1a25a:	2a01      	cmp	r2, #1
   1a25c:	d00a      	beq.n	1a274 <bt_uuid_cmp+0x46>
   1a25e:	b12a      	cbz	r2, 1a26c <bt_uuid_cmp+0x3e>
   1a260:	2a02      	cmp	r2, #2
   1a262:	d00a      	beq.n	1a27a <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
   1a264:	f06f 0015 	mvn.w	r0, #21
}
   1a268:	b00a      	add	sp, #40	; 0x28
   1a26a:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1a26c:	8840      	ldrh	r0, [r0, #2]
   1a26e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a270:	1ac0      	subs	r0, r0, r3
   1a272:	e7f9      	b.n	1a268 <bt_uuid_cmp+0x3a>
   1a274:	6840      	ldr	r0, [r0, #4]
   1a276:	6863      	ldr	r3, [r4, #4]
   1a278:	e7fa      	b.n	1a270 <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a27a:	2210      	movs	r2, #16
   1a27c:	1c61      	adds	r1, r4, #1
   1a27e:	3001      	adds	r0, #1
   1a280:	e7e8      	b.n	1a254 <bt_uuid_cmp+0x26>

0001a282 <hci_stack_dump>:
}
   1a282:	4770      	bx	lr

0001a284 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1a284:	2207      	movs	r2, #7
   1a286:	f7ff bf0f 	b.w	1a0a8 <memcpy>

0001a28a <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a28a:	f3bf 8f5b 	dmb	ish
   1a28e:	e850 3f00 	ldrex	r3, [r0]
   1a292:	ea43 0201 	orr.w	r2, r3, r1
   1a296:	e840 2c00 	strex	ip, r2, [r0]
   1a29a:	f1bc 0f00 	cmp.w	ip, #0
   1a29e:	d1f6      	bne.n	1a28e <atomic_or+0x4>
   1a2a0:	f3bf 8f5b 	dmb	ish
}
   1a2a4:	4618      	mov	r0, r3
   1a2a6:	4770      	bx	lr

0001a2a8 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a2a8:	f3bf 8f5b 	dmb	ish
   1a2ac:	e850 3f00 	ldrex	r3, [r0]
   1a2b0:	ea03 0201 	and.w	r2, r3, r1
   1a2b4:	e840 2c00 	strex	ip, r2, [r0]
   1a2b8:	f1bc 0f00 	cmp.w	ip, #0
   1a2bc:	d1f6      	bne.n	1a2ac <atomic_and+0x4>
   1a2be:	f3bf 8f5b 	dmb	ish
}
   1a2c2:	4618      	mov	r0, r3
   1a2c4:	4770      	bx	lr

0001a2c6 <le_conn_update_complete>:
{
   1a2c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1a2c8:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a2ca:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1a2ce:	f7f0 f961 	bl	a594 <bt_conn_lookup_handle>
	if (!conn) {
   1a2d2:	4604      	mov	r4, r0
   1a2d4:	b1c0      	cbz	r0, 1a308 <le_conn_update_complete+0x42>
	if (!evt->status) {
   1a2d6:	782b      	ldrb	r3, [r5, #0]
   1a2d8:	b9c3      	cbnz	r3, 1a30c <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1a2da:	792a      	ldrb	r2, [r5, #4]
   1a2dc:	78eb      	ldrb	r3, [r5, #3]
   1a2de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a2e2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1a2e6:	79aa      	ldrb	r2, [r5, #6]
   1a2e8:	796b      	ldrb	r3, [r5, #5]
   1a2ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a2ee:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1a2f2:	79eb      	ldrb	r3, [r5, #7]
   1a2f4:	7a2a      	ldrb	r2, [r5, #8]
   1a2f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a2fa:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
   1a2fe:	f7ef ff35 	bl	a16c <notify_le_param_updated>
	bt_conn_unref(conn);
   1a302:	4620      	mov	r0, r4
   1a304:	f000 fab5 	bl	1a872 <bt_conn_unref>
}
   1a308:	b003      	add	sp, #12
   1a30a:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1a30c:	2b1a      	cmp	r3, #26
   1a30e:	d1f8      	bne.n	1a302 <le_conn_update_complete+0x3c>
   1a310:	78c3      	ldrb	r3, [r0, #3]
   1a312:	2b01      	cmp	r3, #1
   1a314:	d1f5      	bne.n	1a302 <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a316:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a31a:	3004      	adds	r0, #4
   1a31c:	f7ff ffb5 	bl	1a28a <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1a320:	0543      	lsls	r3, r0, #21
   1a322:	d4ee      	bmi.n	1a302 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1a324:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1a326:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1a328:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1a32a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1a32c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1a32e:	4620      	mov	r0, r4
   1a330:	f7f0 fb12 	bl	a958 <bt_l2cap_update_conn_param>
   1a334:	e7e5      	b.n	1a302 <le_conn_update_complete+0x3c>

0001a336 <hci_num_completed_packets>:
{
   1a336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1a33a:	6887      	ldr	r7, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   1a33c:	2600      	movs	r6, #0
   1a33e:	783b      	ldrb	r3, [r7, #0]
   1a340:	429e      	cmp	r6, r3
   1a342:	db01      	blt.n	1a348 <hci_num_completed_packets+0x12>
}
   1a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1a348:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1a34c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1a350:	f8b3 5003 	ldrh.w	r5, [r3, #3]
   1a354:	f04f 0320 	mov.w	r3, #32
   1a358:	f3ef 8811 	mrs	r8, BASEPRI
   1a35c:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
   1a360:	f7f0 f918 	bl	a594 <bt_conn_lookup_handle>
		if (!conn) {
   1a364:	4604      	mov	r4, r0
   1a366:	b928      	cbnz	r0, 1a374 <hci_num_completed_packets+0x3e>
	__asm__ volatile(
   1a368:	f388 8811 	msr	BASEPRI, r8
   1a36c:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
   1a370:	3601      	adds	r6, #1
   1a372:	e7e4      	b.n	1a33e <hci_num_completed_packets+0x8>
   1a374:	f388 8811 	msr	BASEPRI, r8
   1a378:	f3bf 8f6f 	isb	sy
			k_fifo_put(&conn->tx_notify, node);
   1a37c:	f100 081c 	add.w	r8, r0, #28
		while (count--) {
   1a380:	b1a5      	cbz	r5, 1a3ac <hci_num_completed_packets+0x76>
	__asm__ volatile(
   1a382:	f04f 0320 	mov.w	r3, #32
   1a386:	f3ef 8011 	mrs	r0, BASEPRI
   1a38a:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(slist)
   1a38e:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1a390:	b129      	cbz	r1, 1a39e <hci_num_completed_packets+0x68>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a392:	69a2      	ldr	r2, [r4, #24]
   1a394:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1a396:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a398:	4291      	cmp	r1, r2
	list->tail = node;
   1a39a:	bf08      	it	eq
   1a39c:	61a3      	streq	r3, [r4, #24]
	__asm__ volatile(
   1a39e:	f380 8811 	msr	BASEPRI, r0
   1a3a2:	f3bf 8f6f 	isb	sy
			if (!node) {
   1a3a6:	3d01      	subs	r5, #1
   1a3a8:	b2ad      	uxth	r5, r5
   1a3aa:	b919      	cbnz	r1, 1a3b4 <hci_num_completed_packets+0x7e>
		bt_conn_unref(conn);
   1a3ac:	4620      	mov	r0, r4
   1a3ae:	f000 fa60 	bl	1a872 <bt_conn_unref>
   1a3b2:	e7dd      	b.n	1a370 <hci_num_completed_packets+0x3a>
			k_fifo_put(&conn->tx_notify, node);
   1a3b4:	4640      	mov	r0, r8
   1a3b6:	f005 f9a3 	bl	1f700 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
   1a3ba:	4620      	mov	r0, r4
   1a3bc:	f7ef fed2 	bl	a164 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
   1a3c0:	f7fc fd24 	bl	16e0c <z_impl_k_sem_give>
   1a3c4:	e7dc      	b.n	1a380 <hci_num_completed_packets+0x4a>

0001a3c6 <handle_event.part.7>:
static inline void handle_event(u8_t event, struct net_buf *buf,
   1a3c6:	b410      	push	{r4}
   1a3c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
   1a3cc:	7814      	ldrb	r4, [r2, #0]
   1a3ce:	4284      	cmp	r4, r0
   1a3d0:	d004      	beq.n	1a3dc <handle_event.part.7+0x16>
			continue;
   1a3d2:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
   1a3d4:	429a      	cmp	r2, r3
   1a3d6:	d1f9      	bne.n	1a3cc <handle_event.part.7+0x6>
}
   1a3d8:	bc10      	pop	{r4}
   1a3da:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1a3dc:	8988      	ldrh	r0, [r1, #12]
   1a3de:	7853      	ldrb	r3, [r2, #1]
   1a3e0:	4298      	cmp	r0, r3
   1a3e2:	d3f9      	bcc.n	1a3d8 <handle_event.part.7+0x12>
		handler->handler(buf);
   1a3e4:	6853      	ldr	r3, [r2, #4]
}
   1a3e6:	bc10      	pop	{r4}
		handler->handler(buf);
   1a3e8:	4608      	mov	r0, r1
   1a3ea:	4718      	bx	r3

0001a3ec <find_pending_connect>:
{
   1a3ec:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   1a3ee:	2103      	movs	r1, #3
{
   1a3f0:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT);
   1a3f2:	f7f0 f907 	bl	a604 <bt_conn_lookup_state_le>
	if (conn) {
   1a3f6:	b928      	cbnz	r0, 1a404 <find_pending_connect+0x18>
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   1a3f8:	4620      	mov	r0, r4
   1a3fa:	2102      	movs	r1, #2
}
   1a3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_conn_lookup_state_le(peer_addr, BT_CONN_CONNECT_DIR_ADV);
   1a400:	f7f0 b900 	b.w	a604 <bt_conn_lookup_state_le>
}
   1a404:	bd10      	pop	{r4, pc}

0001a406 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a406:	f3bf 8f5b 	dmb	ish
   1a40a:	6800      	ldr	r0, [r0, #0]
   1a40c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a410:	4108      	asrs	r0, r1
}
   1a412:	f000 0001 	and.w	r0, r0, #1
   1a416:	4770      	bx	lr

0001a418 <le_remote_feat_complete>:
{
   1a418:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1a41a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1a41c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1a420:	f7f0 f8b8 	bl	a594 <bt_conn_lookup_handle>
	if (!conn) {
   1a424:	4604      	mov	r4, r0
   1a426:	b188      	cbz	r0, 1a44c <le_remote_feat_complete+0x34>
	if (!evt->status) {
   1a428:	782b      	ldrb	r3, [r5, #0]
   1a42a:	b923      	cbnz	r3, 1a436 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1a42c:	2208      	movs	r2, #8
   1a42e:	1ce9      	adds	r1, r5, #3
   1a430:	306c      	adds	r0, #108	; 0x6c
   1a432:	f7ff fe39 	bl	1a0a8 <memcpy>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a436:	78e3      	ldrb	r3, [r4, #3]
   1a438:	2b01      	cmp	r3, #1
   1a43a:	d102      	bne.n	1a442 <le_remote_feat_complete+0x2a>
		slave_update_conn_param(conn);
   1a43c:	4620      	mov	r0, r4
   1a43e:	f7ee fda3 	bl	8f88 <slave_update_conn_param>
	bt_conn_unref(conn);
   1a442:	4620      	mov	r0, r4
}
   1a444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1a448:	f000 ba13 	b.w	1a872 <bt_conn_unref>
}
   1a44c:	bd38      	pop	{r3, r4, r5, pc}

0001a44e <le_conn_param_neg_reply>:
{
   1a44e:	b570      	push	{r4, r5, r6, lr}
   1a450:	4606      	mov	r6, r0
   1a452:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1a454:	f242 0021 	movw	r0, #8225	; 0x2021
   1a458:	2103      	movs	r1, #3
   1a45a:	f7ee fda9 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
   1a45e:	4604      	mov	r4, r0
   1a460:	b160      	cbz	r0, 1a47c <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
   1a462:	2103      	movs	r1, #3
   1a464:	3008      	adds	r0, #8
   1a466:	f004 fe49 	bl	1f0fc <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1a46a:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1a46c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a46e:	4621      	mov	r1, r4
   1a470:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1a474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a478:	f7ee bdca 	b.w	9010 <bt_hci_cmd_send>
}
   1a47c:	bd70      	pop	{r4, r5, r6, pc}

0001a47e <le_conn_param_req>:
{
   1a47e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1a480:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a482:	78d9      	ldrb	r1, [r3, #3]
   1a484:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1a486:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a488:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a48c:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a490:	7959      	ldrb	r1, [r3, #5]
   1a492:	791a      	ldrb	r2, [r3, #4]
   1a494:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a498:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1a49c:	799a      	ldrb	r2, [r3, #6]
   1a49e:	79d9      	ldrb	r1, [r3, #7]
   1a4a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a4a4:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a4a8:	7a1a      	ldrb	r2, [r3, #8]
   1a4aa:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1a4ac:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a4ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1a4b2:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a4b4:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1a4b8:	f7f0 f86c 	bl	a594 <bt_conn_lookup_handle>
	if (!conn) {
   1a4bc:	4605      	mov	r5, r0
   1a4be:	b918      	cbnz	r0, 1a4c8 <le_conn_param_req+0x4a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1a4c0:	2102      	movs	r1, #2
   1a4c2:	4620      	mov	r0, r4
   1a4c4:	f7ff ffc3 	bl	1a44e <le_conn_param_neg_reply>
	if (!le_param_req(conn, &param)) {
   1a4c8:	4669      	mov	r1, sp
   1a4ca:	4628      	mov	r0, r5
   1a4cc:	f7ef fe82 	bl	a1d4 <le_param_req>
   1a4d0:	b940      	cbnz	r0, 1a4e4 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1a4d2:	211e      	movs	r1, #30
   1a4d4:	4620      	mov	r0, r4
   1a4d6:	f7ff ffba 	bl	1a44e <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1a4da:	4628      	mov	r0, r5
   1a4dc:	f000 f9c9 	bl	1a872 <bt_conn_unref>
}
   1a4e0:	b003      	add	sp, #12
   1a4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1a4e4:	210e      	movs	r1, #14
   1a4e6:	f242 0020 	movw	r0, #8224	; 0x2020
   1a4ea:	f7ee fd61 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
   1a4ee:	4606      	mov	r6, r0
   1a4f0:	2800      	cmp	r0, #0
   1a4f2:	d0f2      	beq.n	1a4da <le_conn_param_req+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
   1a4f4:	210e      	movs	r1, #14
   1a4f6:	3008      	adds	r0, #8
   1a4f8:	f004 fe00 	bl	1f0fc <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1a4fc:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
   1a4fe:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1a500:	2100      	movs	r1, #0
   1a502:	f7ff fdfb 	bl	1a0fc <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a506:	f8bd 3000 	ldrh.w	r3, [sp]
   1a50a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1a50c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1a510:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1a512:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1a516:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a518:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1a51c:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a51e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a520:	4631      	mov	r1, r6
   1a522:	f242 0020 	movw	r0, #8224	; 0x2020
   1a526:	f7ee fd73 	bl	9010 <bt_hci_cmd_send>
   1a52a:	e7d6      	b.n	1a4da <le_conn_param_req+0x5c>

0001a52c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1a52c:	6880      	ldr	r0, [r0, #8]
   1a52e:	f7ee be6b 	b.w	9208 <enh_conn_complete>

0001a532 <le_legacy_conn_complete>:
{
   1a532:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1a534:	6881      	ldr	r1, [r0, #8]
{
   1a536:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
   1a538:	780b      	ldrb	r3, [r1, #0]
   1a53a:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   1a53e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1a542:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   1a546:	78cb      	ldrb	r3, [r1, #3]
   1a548:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   1a54c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1a550:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   1a554:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1a558:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   1a55c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1a560:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   1a564:	7c4b      	ldrb	r3, [r1, #17]
   1a566:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a56a:	a805      	add	r0, sp, #20
   1a56c:	3104      	adds	r1, #4
   1a56e:	f7ff fe89 	bl	1a284 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1a572:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1a574:	4669      	mov	r1, sp
   1a576:	2206      	movs	r2, #6
   1a578:	f10d 001b 	add.w	r0, sp, #27
   1a57c:	9400      	str	r4, [sp, #0]
   1a57e:	f8ad 4004 	strh.w	r4, [sp, #4]
   1a582:	f7ff fd91 	bl	1a0a8 <memcpy>
   1a586:	2206      	movs	r2, #6
   1a588:	a902      	add	r1, sp, #8
   1a58a:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1a58e:	9402      	str	r4, [sp, #8]
   1a590:	f8ad 400c 	strh.w	r4, [sp, #12]
   1a594:	f7ff fd88 	bl	1a0a8 <memcpy>
	enh_conn_complete(&enh);
   1a598:	a804      	add	r0, sp, #16
   1a59a:	f7ee fe35 	bl	9208 <enh_conn_complete>
}
   1a59e:	b00c      	add	sp, #48	; 0x30
   1a5a0:	bd10      	pop	{r4, pc}

0001a5a2 <le_set_private_addr.isra.25>:
static int le_set_private_addr(u8_t id)
   1a5a2:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1a5a4:	2106      	movs	r1, #6
   1a5a6:	4668      	mov	r0, sp
   1a5a8:	f004 f9d6 	bl	1e958 <bt_rand>
	if (err) {
   1a5ac:	b940      	cbnz	r0, 1a5c0 <le_set_private_addr.isra.25+0x1e>
	nrpa.val[5] &= 0x3f;
   1a5ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1a5b2:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
   1a5b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a5b8:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1a5bc:	f7ee fee0 	bl	9380 <set_random_address>
}
   1a5c0:	b003      	add	sp, #12
   1a5c2:	f85d fb04 	ldr.w	pc, [sp], #4

0001a5c6 <set_ad>:
{
   1a5c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5ca:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a5cc:	2120      	movs	r1, #32
{
   1a5ce:	4682      	mov	sl, r0
   1a5d0:	4691      	mov	r9, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a5d2:	f7ee fced 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
   1a5d6:	4607      	mov	r7, r0
   1a5d8:	2800      	cmp	r0, #0
   1a5da:	d04c      	beq.n	1a676 <set_ad+0xb0>
	set_data = net_buf_add(buf, sizeof(*set_data));
   1a5dc:	2120      	movs	r1, #32
   1a5de:	3008      	adds	r0, #8
   1a5e0:	f004 fd8c 	bl	1f0fc <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1a5e4:	2220      	movs	r2, #32
   1a5e6:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
   1a5e8:	4605      	mov	r5, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   1a5ea:	f7ff fd87 	bl	1a0fc <memset>
	for (c = 0; c < ad_len; c++) {
   1a5ee:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
   1a5f2:	454c      	cmp	r4, r9
   1a5f4:	d106      	bne.n	1a604 <set_ad+0x3e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a5f6:	4639      	mov	r1, r7
   1a5f8:	4650      	mov	r0, sl
   1a5fa:	2200      	movs	r2, #0
}
   1a5fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a600:	f7ee bd28 	b.w	9054 <bt_hci_cmd_send_sync>
		for (i = 0; i < ad[c].len; i++) {
   1a604:	6826      	ldr	r6, [r4, #0]
   1a606:	f04f 0b00 	mov.w	fp, #0
   1a60a:	6863      	ldr	r3, [r4, #4]
   1a60c:	455b      	cmp	r3, fp
   1a60e:	d801      	bhi.n	1a614 <set_ad+0x4e>
   1a610:	3408      	adds	r4, #8
   1a612:	e7ee      	b.n	1a5f2 <set_ad+0x2c>
			if (set_data->len + len + 2 > 31) {
   1a614:	782b      	ldrb	r3, [r5, #0]
			int len = data[i].data_len;
   1a616:	7872      	ldrb	r2, [r6, #1]
			u8_t type = data[i].type;
   1a618:	7831      	ldrb	r1, [r6, #0]
			if (set_data->len + len + 2 > 31) {
   1a61a:	1c98      	adds	r0, r3, #2
   1a61c:	eb00 0c02 	add.w	ip, r0, r2
   1a620:	f1bc 0f1f 	cmp.w	ip, #31
   1a624:	dd0c      	ble.n	1a640 <set_ad+0x7a>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
   1a626:	2909      	cmp	r1, #9
				len = 31 - (set_data->len + 2);
   1a628:	f1c3 021d 	rsb	r2, r3, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
   1a62c:	d100      	bne.n	1a630 <set_ad+0x6a>
   1a62e:	b932      	cbnz	r2, 1a63e <set_ad+0x78>
					net_buf_unref(buf);
   1a630:	4638      	mov	r0, r7
   1a632:	f7fb f967 	bl	15904 <net_buf_unref>
					return -EINVAL;
   1a636:	f06f 0015 	mvn.w	r0, #21
}
   1a63a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1a63e:	2108      	movs	r1, #8
			set_data->data[set_data->len++] = len + 1;
   1a640:	eb05 0c03 	add.w	ip, r5, r3
   1a644:	3301      	adds	r3, #1
   1a646:	fa4f f882 	sxtb.w	r8, r2
			set_data->data[set_data->len++] = type;
   1a64a:	fa55 f383 	uxtab	r3, r5, r3
			set_data->data[set_data->len++] = len + 1;
   1a64e:	f108 0e01 	add.w	lr, r8, #1
			set_data->data[set_data->len++] = type;
   1a652:	b2c0      	uxtb	r0, r0
			set_data->data[set_data->len++] = len + 1;
   1a654:	f88c e001 	strb.w	lr, [ip, #1]
			set_data->data[set_data->len++] = type;
   1a658:	7028      	strb	r0, [r5, #0]
   1a65a:	7059      	strb	r1, [r3, #1]
			memcpy(&set_data->data[set_data->len], data[i].data,
   1a65c:	3001      	adds	r0, #1
   1a65e:	6871      	ldr	r1, [r6, #4]
   1a660:	4428      	add	r0, r5
   1a662:	f7ff fd21 	bl	1a0a8 <memcpy>
			set_data->len += len;
   1a666:	782b      	ldrb	r3, [r5, #0]
   1a668:	4498      	add	r8, r3
   1a66a:	f885 8000 	strb.w	r8, [r5]
		for (i = 0; i < ad[c].len; i++) {
   1a66e:	f10b 0b01 	add.w	fp, fp, #1
   1a672:	3608      	adds	r6, #8
   1a674:	e7c9      	b.n	1a60a <set_ad+0x44>
		return -ENOBUFS;
   1a676:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1a67a:	e7de      	b.n	1a63a <set_ad+0x74>

0001a67c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1a67c:	8802      	ldrh	r2, [r0, #0]
   1a67e:	8843      	ldrh	r3, [r0, #2]
   1a680:	429a      	cmp	r2, r3
{
   1a682:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1a684:	d818      	bhi.n	1a6b8 <bt_le_conn_params_valid+0x3c>
   1a686:	2a05      	cmp	r2, #5
   1a688:	d916      	bls.n	1a6b8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1a68a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1a68e:	d813      	bhi.n	1a6b8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1a690:	8884      	ldrh	r4, [r0, #4]
   1a692:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1a696:	d20f      	bcs.n	1a6b8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a698:	88c1      	ldrh	r1, [r0, #6]
   1a69a:	f1a1 020a 	sub.w	r2, r1, #10
   1a69e:	b292      	uxth	r2, r2
   1a6a0:	f640 4076 	movw	r0, #3190	; 0xc76
   1a6a4:	4282      	cmp	r2, r0
   1a6a6:	d807      	bhi.n	1a6b8 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
   1a6a8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a6ac:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1a6b0:	bfb4      	ite	lt
   1a6b2:	2001      	movlt	r0, #1
   1a6b4:	2000      	movge	r0, #0
}
   1a6b6:	bd10      	pop	{r4, pc}
		return false;
   1a6b8:	2000      	movs	r0, #0
   1a6ba:	e7fc      	b.n	1a6b6 <bt_le_conn_params_valid+0x3a>

0001a6bc <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1a6bc:	2301      	movs	r3, #1
{
   1a6be:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1a6c0:	2106      	movs	r1, #6
{
   1a6c2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1a6c4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1a6c8:	f004 f946 	bl	1e958 <bt_rand>
	if (err) {
   1a6cc:	b918      	cbnz	r0, 1a6d6 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1a6ce:	79a3      	ldrb	r3, [r4, #6]
   1a6d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a6d4:	71a3      	strb	r3, [r4, #6]
}
   1a6d6:	bd10      	pop	{r4, pc}

0001a6d8 <bt_dev_show_info>:
}
   1a6d8:	4770      	bx	lr

0001a6da <bt_send>:
		return bt_hci_ecc_send(buf);
   1a6da:	f7ee b913 	b.w	8904 <bt_hci_ecc_send>

0001a6de <bt_addr_le_is_bonded>:
}
   1a6de:	2000      	movs	r0, #0
   1a6e0:	4770      	bx	lr

0001a6e2 <bt_le_adv_start>:
{
   1a6e2:	b513      	push	{r0, r1, r4, lr}
	if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   1a6e4:	7844      	ldrb	r4, [r0, #1]
   1a6e6:	f014 0410 	ands.w	r4, r4, #16
   1a6ea:	d106      	bne.n	1a6fa <bt_le_adv_start+0x18>
	return bt_le_adv_start_internal(param, ad, ad_len, sd, sd_len, NULL);
   1a6ec:	9401      	str	r4, [sp, #4]
   1a6ee:	9c04      	ldr	r4, [sp, #16]
   1a6f0:	9400      	str	r4, [sp, #0]
   1a6f2:	f7ef fa77 	bl	9be4 <bt_le_adv_start_internal>
}
   1a6f6:	b002      	add	sp, #8
   1a6f8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1a6fa:	f06f 0015 	mvn.w	r0, #21
   1a6fe:	e7fa      	b.n	1a6f6 <bt_le_adv_start+0x14>

0001a700 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a700:	f3bf 8f5b 	dmb	ish
   1a704:	6800      	ldr	r0, [r0, #0]
   1a706:	f3bf 8f5b 	dmb	ish
}
   1a70a:	4770      	bx	lr

0001a70c <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   1a70c:	8983      	ldrh	r3, [r0, #12]
{
   1a70e:	b510      	push	{r4, lr}
   1a710:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   1a712:	b12b      	cbz	r3, 1a720 <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   1a714:	6900      	ldr	r0, [r0, #16]
   1a716:	f7fb f8f5 	bl	15904 <net_buf_unref>
	conn->rx = NULL;
   1a71a:	2300      	movs	r3, #0
   1a71c:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   1a71e:	81a3      	strh	r3, [r4, #12]
}
   1a720:	bd10      	pop	{r4, pc}

0001a722 <atomic_dec>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a722:	f3bf 8f5b 	dmb	ish
   1a726:	e850 3f00 	ldrex	r3, [r0]
   1a72a:	1e5a      	subs	r2, r3, #1
   1a72c:	e840 2100 	strex	r1, r2, [r0]
   1a730:	2900      	cmp	r1, #0
   1a732:	d1f8      	bne.n	1a726 <atomic_dec+0x4>
   1a734:	f3bf 8f5b 	dmb	ish
}
   1a738:	4618      	mov	r0, r3
   1a73a:	4770      	bx	lr

0001a73c <atomic_inc>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a73c:	f3bf 8f5b 	dmb	ish
   1a740:	e850 3f00 	ldrex	r3, [r0]
   1a744:	1c5a      	adds	r2, r3, #1
   1a746:	e840 2100 	strex	r1, r2, [r0]
   1a74a:	2900      	cmp	r1, #0
   1a74c:	d1f8      	bne.n	1a740 <atomic_inc+0x4>
   1a74e:	f3bf 8f5b 	dmb	ish
}
   1a752:	4618      	mov	r0, r3
   1a754:	4770      	bx	lr

0001a756 <bt_conn_recv>:
	switch (flags) {
   1a756:	2a01      	cmp	r2, #1
{
   1a758:	b570      	push	{r4, r5, r6, lr}
   1a75a:	4605      	mov	r5, r0
   1a75c:	460c      	mov	r4, r1
	switch (flags) {
   1a75e:	d00f      	beq.n	1a780 <bt_conn_recv+0x2a>
   1a760:	2a02      	cmp	r2, #2
   1a762:	d110      	bne.n	1a786 <bt_conn_recv+0x30>
		len = sys_le16_to_cpu(hdr->len);
   1a764:	688b      	ldr	r3, [r1, #8]
   1a766:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
   1a768:	8983      	ldrh	r3, [r0, #12]
   1a76a:	b10b      	cbz	r3, 1a770 <bt_conn_recv+0x1a>
			bt_conn_reset_rx_state(conn);
   1a76c:	f7ff ffce 	bl	1a70c <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
   1a770:	89a3      	ldrh	r3, [r4, #12]
   1a772:	1af3      	subs	r3, r6, r3
   1a774:	3304      	adds	r3, #4
   1a776:	b29b      	uxth	r3, r3
   1a778:	81ab      	strh	r3, [r5, #12]
		if (conn->rx_len) {
   1a77a:	b33b      	cbz	r3, 1a7cc <bt_conn_recv+0x76>
			conn->rx = buf;
   1a77c:	612c      	str	r4, [r5, #16]
}
   1a77e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
   1a780:	8983      	ldrh	r3, [r0, #12]
   1a782:	b93b      	cbnz	r3, 1a794 <bt_conn_recv+0x3e>
			bt_conn_reset_rx_state(conn);
   1a784:	4628      	mov	r0, r5
		bt_conn_reset_rx_state(conn);
   1a786:	f7ff ffc1 	bl	1a70c <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1a78a:	4620      	mov	r0, r4
}
   1a78c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1a790:	f7fb b8b8 	b.w	15904 <net_buf_unref>
		if (buf->len > conn->rx_len) {
   1a794:	898e      	ldrh	r6, [r1, #12]
   1a796:	42b3      	cmp	r3, r6
   1a798:	d3f4      	bcc.n	1a784 <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1a79a:	6900      	ldr	r0, [r0, #16]
   1a79c:	3008      	adds	r0, #8
   1a79e:	f004 fd68 	bl	1f272 <net_buf_simple_tailroom>
   1a7a2:	4286      	cmp	r6, r0
   1a7a4:	d8ee      	bhi.n	1a784 <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1a7a6:	6928      	ldr	r0, [r5, #16]
   1a7a8:	89a2      	ldrh	r2, [r4, #12]
   1a7aa:	68a1      	ldr	r1, [r4, #8]
   1a7ac:	3008      	adds	r0, #8
   1a7ae:	f004 fcab 	bl	1f108 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
   1a7b2:	89ab      	ldrh	r3, [r5, #12]
   1a7b4:	89a2      	ldrh	r2, [r4, #12]
   1a7b6:	1a9b      	subs	r3, r3, r2
   1a7b8:	81ab      	strh	r3, [r5, #12]
		net_buf_unref(buf);
   1a7ba:	4620      	mov	r0, r4
   1a7bc:	f7fb f8a2 	bl	15904 <net_buf_unref>
		if (conn->rx_len) {
   1a7c0:	89ab      	ldrh	r3, [r5, #12]
   1a7c2:	2b00      	cmp	r3, #0
   1a7c4:	d1db      	bne.n	1a77e <bt_conn_recv+0x28>
		buf = conn->rx;
   1a7c6:	692c      	ldr	r4, [r5, #16]
		conn->rx_len = 0U;
   1a7c8:	81ab      	strh	r3, [r5, #12]
		conn->rx = NULL;
   1a7ca:	612b      	str	r3, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   1a7cc:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
   1a7ce:	89a2      	ldrh	r2, [r4, #12]
   1a7d0:	881b      	ldrh	r3, [r3, #0]
   1a7d2:	3304      	adds	r3, #4
   1a7d4:	4293      	cmp	r3, r2
   1a7d6:	d1d8      	bne.n	1a78a <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
   1a7d8:	4621      	mov	r1, r4
   1a7da:	4628      	mov	r0, r5
}
   1a7dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1a7e0:	f000 b963 	b.w	1aaaa <bt_l2cap_recv>

0001a7e4 <bt_conn_send_cb>:
{
   1a7e4:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1a7e6:	7a84      	ldrb	r4, [r0, #10]
   1a7e8:	2c04      	cmp	r4, #4
   1a7ea:	d005      	beq.n	1a7f8 <bt_conn_send_cb+0x14>
		net_buf_unref(buf);
   1a7ec:	4608      	mov	r0, r1
   1a7ee:	f7fb f889 	bl	15904 <net_buf_unref>
		return -ENOTCONN;
   1a7f2:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   1a7f6:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
   1a7f8:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->cb = cb;
   1a7fa:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
   1a7fc:	f004 fc6d 	bl	1f0da <net_buf_put>
	return 0;
   1a800:	2000      	movs	r0, #0
   1a802:	e7f8      	b.n	1a7f6 <bt_conn_send_cb+0x12>

0001a804 <conn_cleanup>:
{
   1a804:	b538      	push	{r3, r4, r5, lr}
   1a806:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1a808:	f100 052c 	add.w	r5, r0, #44	; 0x2c
   1a80c:	2100      	movs	r1, #0
   1a80e:	4628      	mov	r0, r5
   1a810:	f004 fbf6 	bl	1f000 <net_buf_get>
   1a814:	b958      	cbnz	r0, 1a82e <conn_cleanup+0x2a>
	bt_conn_notify_tx(conn);
   1a816:	4620      	mov	r0, r4
   1a818:	f7ef fd04 	bl	a224 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
   1a81c:	4620      	mov	r0, r4
   1a81e:	f7ff ff75 	bl	1a70c <bt_conn_reset_rx_state>
	atomic_dec(&conn->ref);
   1a822:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
   1a826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
   1a82a:	f7ff bf7a 	b.w	1a722 <atomic_dec>
		net_buf_unref(buf);
   1a82e:	f7fb f869 	bl	15904 <net_buf_unref>
   1a832:	e7eb      	b.n	1a80c <conn_cleanup+0x8>

0001a834 <bt_conn_addr_le_cmp>:
{
   1a834:	b538      	push	{r3, r4, r5, lr}
   1a836:	460d      	mov	r5, r1
   1a838:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1a83a:	f100 0148 	add.w	r1, r0, #72	; 0x48
   1a83e:	2207      	movs	r2, #7
   1a840:	4628      	mov	r0, r5
   1a842:	f7ff fc21 	bl	1a088 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1a846:	b160      	cbz	r0, 1a862 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1a848:	78e3      	ldrb	r3, [r4, #3]
   1a84a:	2207      	movs	r2, #7
   1a84c:	b933      	cbnz	r3, 1a85c <bt_conn_addr_le_cmp+0x28>
   1a84e:	f104 0156 	add.w	r1, r4, #86	; 0x56
   1a852:	4628      	mov	r0, r5
}
   1a854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a858:	f7ff bc16 	b.w	1a088 <memcmp>
   1a85c:	f104 014f 	add.w	r1, r4, #79	; 0x4f
   1a860:	e7f7      	b.n	1a852 <bt_conn_addr_le_cmp+0x1e>
   1a862:	bd38      	pop	{r3, r4, r5, pc}

0001a864 <bt_conn_ref>:
{
   1a864:	b510      	push	{r4, lr}
   1a866:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
   1a868:	3044      	adds	r0, #68	; 0x44
   1a86a:	f7ff ff67 	bl	1a73c <atomic_inc>
}
   1a86e:	4620      	mov	r0, r4
   1a870:	bd10      	pop	{r4, pc}

0001a872 <bt_conn_unref>:
	atomic_dec(&conn->ref);
   1a872:	3044      	adds	r0, #68	; 0x44
   1a874:	f7ff bf55 	b.w	1a722 <atomic_dec>

0001a878 <bt_conn_disconnect>:
	switch (conn->state) {
   1a878:	7a83      	ldrb	r3, [r0, #10]
   1a87a:	3b01      	subs	r3, #1
{
   1a87c:	b570      	push	{r4, r5, r6, lr}
   1a87e:	4604      	mov	r4, r0
   1a880:	460e      	mov	r6, r1
	switch (conn->state) {
   1a882:	2b04      	cmp	r3, #4
   1a884:	d804      	bhi.n	1a890 <bt_conn_disconnect+0x18>
   1a886:	e8df f003 	tbb	[pc, r3]
   1a88a:	0d07      	.short	0x0d07
   1a88c:	150b      	.short	0x150b
   1a88e:	0b          	.byte	0x0b
   1a88f:	00          	.byte	0x00
		return -ENOTCONN;
   1a890:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   1a894:	4628      	mov	r0, r5
   1a896:	bd70      	pop	{r4, r5, r6, pc}
		conn->err = reason;
   1a898:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a89a:	2100      	movs	r1, #0
   1a89c:	f7ef fde8 	bl	a470 <bt_conn_set_state>
		return 0;
   1a8a0:	2500      	movs	r5, #0
   1a8a2:	e7f7      	b.n	1a894 <bt_conn_disconnect+0x1c>
		conn->err = reason;
   1a8a4:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a8a6:	2100      	movs	r1, #0
   1a8a8:	f7ef fde2 	bl	a470 <bt_conn_set_state>
}
   1a8ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_le_adv_stop();
   1a8b0:	f7ef ba90 	b.w	9dd4 <bt_le_adv_stop>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1a8b4:	2103      	movs	r1, #3
   1a8b6:	f240 4006 	movw	r0, #1030	; 0x406
   1a8ba:	f7ee fb79 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
   1a8be:	4605      	mov	r5, r0
   1a8c0:	b198      	cbz	r0, 1a8ea <bt_conn_disconnect+0x72>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1a8c2:	2103      	movs	r1, #3
   1a8c4:	3008      	adds	r0, #8
   1a8c6:	f004 fc19 	bl	1f0fc <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
   1a8ca:	8823      	ldrh	r3, [r4, #0]
   1a8cc:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
   1a8ce:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1a8d0:	4629      	mov	r1, r5
   1a8d2:	f240 4006 	movw	r0, #1030	; 0x406
   1a8d6:	f7ee fb9b 	bl	9010 <bt_hci_cmd_send>
	if (err) {
   1a8da:	4605      	mov	r5, r0
   1a8dc:	2800      	cmp	r0, #0
   1a8de:	d1d9      	bne.n	1a894 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1a8e0:	2105      	movs	r1, #5
   1a8e2:	4620      	mov	r0, r4
   1a8e4:	f7ef fdc4 	bl	a470 <bt_conn_set_state>
	return 0;
   1a8e8:	e7d4      	b.n	1a894 <bt_conn_disconnect+0x1c>
		return -ENOBUFS;
   1a8ea:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1a8ee:	e7d1      	b.n	1a894 <bt_conn_disconnect+0x1c>

0001a8f0 <bt_conn_le_conn_update>:
{
   1a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a8f2:	4607      	mov	r7, r0
   1a8f4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1a8f6:	f242 0013 	movw	r0, #8211	; 0x2013
   1a8fa:	210e      	movs	r1, #14
   1a8fc:	f7ee fb58 	bl	8fb0 <bt_hci_cmd_create>
	if (!buf) {
   1a900:	4606      	mov	r6, r0
   1a902:	b1c8      	cbz	r0, 1a938 <bt_conn_le_conn_update+0x48>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1a904:	210e      	movs	r1, #14
   1a906:	3008      	adds	r0, #8
   1a908:	f004 fbf8 	bl	1f0fc <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1a90c:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1a90e:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1a910:	220e      	movs	r2, #14
   1a912:	f7ff fbf3 	bl	1a0fc <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1a916:	883b      	ldrh	r3, [r7, #0]
   1a918:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1a91a:	882b      	ldrh	r3, [r5, #0]
   1a91c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1a91e:	886b      	ldrh	r3, [r5, #2]
   1a920:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1a922:	88ab      	ldrh	r3, [r5, #4]
   1a924:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1a926:	88eb      	ldrh	r3, [r5, #6]
   1a928:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   1a92a:	4631      	mov	r1, r6
   1a92c:	f242 0013 	movw	r0, #8211	; 0x2013
}
   1a930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
   1a934:	f7ee bb6c 	b.w	9010 <bt_hci_cmd_send>
}
   1a938:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1a93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a93e <l2cap_connected>:
}
   1a93e:	4770      	bx	lr

0001a940 <l2cap_disconnected>:
   1a940:	4770      	bx	lr

0001a942 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a942:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1a944:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a946:	b17b      	cbz	r3, 1a968 <bt_l2cap_chan_remove+0x26>
   1a948:	3b08      	subs	r3, #8
   1a94a:	2200      	movs	r2, #0
   1a94c:	b163      	cbz	r3, 1a968 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1a94e:	428b      	cmp	r3, r1
   1a950:	f103 0408 	add.w	r4, r3, #8
   1a954:	d10f      	bne.n	1a976 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1a956:	688b      	ldr	r3, [r1, #8]
   1a958:	b93a      	cbnz	r2, 1a96a <bt_l2cap_chan_remove+0x28>
   1a95a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	list->head = node;
   1a95c:	63c3      	str	r3, [r0, #60]	; 0x3c
Z_GENLIST_REMOVE(slist, snode)
   1a95e:	4294      	cmp	r4, r2
   1a960:	d100      	bne.n	1a964 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1a962:	6403      	str	r3, [r0, #64]	; 0x40
	parent->next = child;
   1a964:	2300      	movs	r3, #0
   1a966:	608b      	str	r3, [r1, #8]
}
   1a968:	bd10      	pop	{r4, pc}
   1a96a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a96c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1a96e:	429c      	cmp	r4, r3
	list->tail = node;
   1a970:	bf08      	it	eq
   1a972:	6402      	streq	r2, [r0, #64]	; 0x40
   1a974:	e7f6      	b.n	1a964 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a976:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a978:	2b00      	cmp	r3, #0
   1a97a:	d0f5      	beq.n	1a968 <bt_l2cap_chan_remove+0x26>
   1a97c:	3b08      	subs	r3, #8
   1a97e:	4622      	mov	r2, r4
   1a980:	e7e4      	b.n	1a94c <bt_l2cap_chan_remove+0xa>

0001a982 <bt_l2cap_chan_del>:
	if (!chan->conn) {
   1a982:	6803      	ldr	r3, [r0, #0]
{
   1a984:	b510      	push	{r4, lr}
   1a986:	4604      	mov	r4, r0
	if (!chan->conn) {
   1a988:	b12b      	cbz	r3, 1a996 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
   1a98a:	6843      	ldr	r3, [r0, #4]
   1a98c:	685b      	ldr	r3, [r3, #4]
   1a98e:	b103      	cbz	r3, 1a992 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
   1a990:	4798      	blx	r3
	chan->conn = NULL;
   1a992:	2300      	movs	r3, #0
   1a994:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1a996:	68e3      	ldr	r3, [r4, #12]
   1a998:	b11b      	cbz	r3, 1a9a2 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
   1a99a:	4620      	mov	r0, r4
}
   1a99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
   1a9a0:	4718      	bx	r3
}
   1a9a2:	bd10      	pop	{r4, pc}

0001a9a4 <l2cap_rtx_timeout>:
{
   1a9a4:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
   1a9a6:	f1a0 0410 	sub.w	r4, r0, #16
   1a9aa:	4621      	mov	r1, r4
   1a9ac:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1a9b0:	f7ff ffc7 	bl	1a942 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1a9b4:	4620      	mov	r0, r4
}
   1a9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   1a9ba:	f7ff bfe2 	b.w	1a982 <bt_l2cap_chan_del>

0001a9be <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a9be:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   1a9c0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a9c2:	b173      	cbz	r3, 1a9e2 <bt_l2cap_disconnected+0x24>
   1a9c4:	f1b3 0008 	subs.w	r0, r3, #8
   1a9c8:	d00b      	beq.n	1a9e2 <bt_l2cap_disconnected+0x24>
   1a9ca:	681c      	ldr	r4, [r3, #0]
   1a9cc:	b104      	cbz	r4, 1a9d0 <bt_l2cap_disconnected+0x12>
   1a9ce:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1a9d0:	f7ff ffd7 	bl	1a982 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a9d4:	b12c      	cbz	r4, 1a9e2 <bt_l2cap_disconnected+0x24>
   1a9d6:	68a3      	ldr	r3, [r4, #8]
   1a9d8:	b103      	cbz	r3, 1a9dc <bt_l2cap_disconnected+0x1e>
   1a9da:	3b08      	subs	r3, #8
{
   1a9dc:	4620      	mov	r0, r4
   1a9de:	461c      	mov	r4, r3
   1a9e0:	e7f6      	b.n	1a9d0 <bt_l2cap_disconnected+0x12>
}
   1a9e2:	bd10      	pop	{r4, pc}

0001a9e4 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   1a9e4:	3104      	adds	r1, #4
   1a9e6:	f7ef be8d 	b.w	a704 <bt_conn_create_pdu>

0001a9ea <bt_l2cap_send_cb>:
{
   1a9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a9ec:	4614      	mov	r4, r2
   1a9ee:	4605      	mov	r5, r0
   1a9f0:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1a9f2:	f102 0008 	add.w	r0, r2, #8
   1a9f6:	2104      	movs	r1, #4
{
   1a9f8:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
   1a9fa:	f004 fbd4 	bl	1f1a6 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1a9fe:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1aa00:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1aa02:	3904      	subs	r1, #4
   1aa04:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
   1aa06:	4632      	mov	r2, r6
   1aa08:	4621      	mov	r1, r4
   1aa0a:	4628      	mov	r0, r5
}
   1aa0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
   1aa10:	f7ff bee8 	b.w	1a7e4 <bt_conn_send_cb>

0001aa14 <l2cap_recv>:
{
   1aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1aa16:	898b      	ldrh	r3, [r1, #12]
   1aa18:	2b03      	cmp	r3, #3
{
   1aa1a:	4605      	mov	r5, r0
   1aa1c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1aa1e:	d92d      	bls.n	1aa7c <l2cap_recv+0x68>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1aa20:	2104      	movs	r1, #4
   1aa22:	f104 0008 	add.w	r0, r4, #8
   1aa26:	f004 fbec 	bl	1f202 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1aa2a:	89a3      	ldrh	r3, [r4, #12]
   1aa2c:	8842      	ldrh	r2, [r0, #2]
   1aa2e:	429a      	cmp	r2, r3
   1aa30:	d124      	bne.n	1aa7c <l2cap_recv+0x68>
	if (!hdr->ident) {
   1aa32:	7844      	ldrb	r4, [r0, #1]
   1aa34:	b314      	cbz	r4, 1aa7c <l2cap_recv+0x68>
	switch (hdr->code) {
   1aa36:	7803      	ldrb	r3, [r0, #0]
   1aa38:	2b01      	cmp	r3, #1
   1aa3a:	d01f      	beq.n	1aa7c <l2cap_recv+0x68>
   1aa3c:	2b13      	cmp	r3, #19
   1aa3e:	d01d      	beq.n	1aa7c <l2cap_recv+0x68>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   1aa40:	2104      	movs	r1, #4
   1aa42:	2000      	movs	r0, #0
		l2cap_send_reject(chan->conn, hdr->ident,
   1aa44:	682f      	ldr	r7, [r5, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   1aa46:	f7ef fe5d 	bl	a704 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1aa4a:	f100 0608 	add.w	r6, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
   1aa4e:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1aa50:	2104      	movs	r1, #4
   1aa52:	4630      	mov	r0, r6
   1aa54:	f004 fb52 	bl	1f0fc <net_buf_simple_add>
	hdr->code = code;
   1aa58:	2301      	movs	r3, #1
	hdr->ident = ident;
   1aa5a:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1aa5c:	2102      	movs	r1, #2
   1aa5e:	2400      	movs	r4, #0
	hdr->code = code;
   1aa60:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
   1aa62:	7081      	strb	r1, [r0, #2]
   1aa64:	70c4      	strb	r4, [r0, #3]
	rej = net_buf_add(buf, sizeof(*rej));
   1aa66:	4630      	mov	r0, r6
   1aa68:	f004 fb48 	bl	1f0fc <net_buf_simple_add>
   1aa6c:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   1aa6e:	7004      	strb	r4, [r0, #0]
   1aa70:	7044      	strb	r4, [r0, #1]
   1aa72:	462a      	mov	r2, r5
   1aa74:	2105      	movs	r1, #5
   1aa76:	4638      	mov	r0, r7
   1aa78:	f7ff ffb7 	bl	1a9ea <bt_l2cap_send_cb>
}
   1aa7c:	2000      	movs	r0, #0
   1aa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001aa80 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1aa80:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1aa82:	b108      	cbz	r0, 1aa88 <bt_l2cap_le_lookup_tx_cid+0x8>
   1aa84:	3808      	subs	r0, #8
   1aa86:	b900      	cbnz	r0, 1aa8a <bt_l2cap_le_lookup_tx_cid+0xa>
}
   1aa88:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1aa8a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   1aa8e:	428b      	cmp	r3, r1
   1aa90:	d0fa      	beq.n	1aa88 <bt_l2cap_le_lookup_tx_cid+0x8>
   1aa92:	6880      	ldr	r0, [r0, #8]
   1aa94:	e7f5      	b.n	1aa82 <bt_l2cap_le_lookup_tx_cid+0x2>

0001aa96 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1aa96:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1aa98:	b108      	cbz	r0, 1aa9e <bt_l2cap_le_lookup_rx_cid+0x8>
   1aa9a:	3808      	subs	r0, #8
   1aa9c:	b900      	cbnz	r0, 1aaa0 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   1aa9e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1aaa0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1aaa2:	428b      	cmp	r3, r1
   1aaa4:	d0fb      	beq.n	1aa9e <bt_l2cap_le_lookup_rx_cid+0x8>
   1aaa6:	6880      	ldr	r0, [r0, #8]
   1aaa8:	e7f6      	b.n	1aa98 <bt_l2cap_le_lookup_rx_cid+0x2>

0001aaaa <bt_l2cap_recv>:
{
   1aaaa:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1aaac:	898b      	ldrh	r3, [r1, #12]
   1aaae:	2b03      	cmp	r3, #3
{
   1aab0:	4605      	mov	r5, r0
   1aab2:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1aab4:	d804      	bhi.n	1aac0 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1aab6:	4620      	mov	r0, r4
}
   1aab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1aabc:	f7fa bf22 	b.w	15904 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1aac0:	2104      	movs	r1, #4
   1aac2:	f104 0008 	add.w	r0, r4, #8
   1aac6:	f004 fb9c 	bl	1f202 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1aaca:	8841      	ldrh	r1, [r0, #2]
   1aacc:	4628      	mov	r0, r5
   1aace:	f7ff ffe2 	bl	1aa96 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1aad2:	2800      	cmp	r0, #0
   1aad4:	d0ef      	beq.n	1aab6 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1aad6:	6843      	ldr	r3, [r0, #4]
   1aad8:	4621      	mov	r1, r4
   1aada:	691b      	ldr	r3, [r3, #16]
   1aadc:	4798      	blx	r3
   1aade:	e7ea      	b.n	1aab6 <bt_l2cap_recv+0xc>

0001aae0 <att_prepare_write_req>:
}
   1aae0:	2006      	movs	r0, #6
   1aae2:	4770      	bx	lr

0001aae4 <att_req_destroy>:
{
   1aae4:	b510      	push	{r4, lr}
   1aae6:	4604      	mov	r4, r0
	if (req->buf) {
   1aae8:	6900      	ldr	r0, [r0, #16]
   1aaea:	b108      	cbz	r0, 1aaf0 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1aaec:	f7fa ff0a 	bl	15904 <net_buf_unref>
	if (req->destroy) {
   1aaf0:	68a3      	ldr	r3, [r4, #8]
   1aaf2:	b10b      	cbz	r3, 1aaf8 <att_req_destroy+0x14>
		req->destroy(req);
   1aaf4:	4620      	mov	r0, r4
   1aaf6:	4798      	blx	r3
	(void)memset(req, 0, sizeof(*req));
   1aaf8:	4620      	mov	r0, r4
   1aafa:	2214      	movs	r2, #20
   1aafc:	2100      	movs	r1, #0
}
   1aafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(req, 0, sizeof(*req));
   1ab02:	f7ff bafb 	b.w	1a0fc <memset>

0001ab06 <read_group_cb>:
{
   1ab06:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   1ab0a:	680c      	ldr	r4, [r1, #0]
{
   1ab0c:	4606      	mov	r6, r0
   1ab0e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ab10:	f04f 0800 	mov.w	r8, #0
   1ab14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ab18:	a902      	add	r1, sp, #8
   1ab1a:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   1ab1c:	6827      	ldr	r7, [r4, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ab1e:	f88d 8008 	strb.w	r8, [sp, #8]
   1ab22:	f8ad 300a 	strh.w	r3, [sp, #10]
   1ab26:	f7ff fb82 	bl	1a22e <bt_uuid_cmp>
   1ab2a:	b198      	cbz	r0, 1ab54 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ab2c:	f642 0301 	movw	r3, #10241	; 0x2801
   1ab30:	a903      	add	r1, sp, #12
   1ab32:	6830      	ldr	r0, [r6, #0]
   1ab34:	f88d 800c 	strb.w	r8, [sp, #12]
   1ab38:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ab3c:	f7ff fb77 	bl	1a22e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ab40:	b140      	cbz	r0, 1ab54 <read_group_cb+0x4e>
		if (data->group &&
   1ab42:	692b      	ldr	r3, [r5, #16]
   1ab44:	b123      	cbz	r3, 1ab50 <read_group_cb+0x4a>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   1ab46:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
   1ab48:	8859      	ldrh	r1, [r3, #2]
   1ab4a:	4291      	cmp	r1, r2
   1ab4c:	d200      	bcs.n	1ab50 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1ab4e:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1ab50:	2001      	movs	r0, #1
   1ab52:	e012      	b.n	1ab7a <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ab54:	6869      	ldr	r1, [r5, #4]
   1ab56:	6830      	ldr	r0, [r6, #0]
   1ab58:	f7ff fb69 	bl	1a22e <bt_uuid_cmp>
   1ab5c:	b110      	cbz	r0, 1ab64 <read_group_cb+0x5e>
		data->group = NULL;
   1ab5e:	2300      	movs	r3, #0
   1ab60:	612b      	str	r3, [r5, #16]
		return BT_GATT_ITER_CONTINUE;
   1ab62:	e7f5      	b.n	1ab50 <read_group_cb+0x4a>
	if (data->rsp->len &&
   1ab64:	68eb      	ldr	r3, [r5, #12]
   1ab66:	68a8      	ldr	r0, [r5, #8]
   1ab68:	781a      	ldrb	r2, [r3, #0]
   1ab6a:	b14a      	cbz	r2, 1ab80 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1ab6c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1ab70:	8981      	ldrh	r1, [r0, #12]
   1ab72:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1ab74:	4293      	cmp	r3, r2
   1ab76:	da03      	bge.n	1ab80 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
   1ab78:	2000      	movs	r0, #0
}
   1ab7a:	b004      	add	sp, #16
   1ab7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ab80:	2104      	movs	r1, #4
   1ab82:	3008      	adds	r0, #8
   1ab84:	f004 faba 	bl	1f0fc <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ab88:	68a9      	ldr	r1, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1ab8a:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ab8c:	898a      	ldrh	r2, [r1, #12]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ab8e:	6128      	str	r0, [r5, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1ab90:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1ab92:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ab94:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1ab98:	6889      	ldr	r1, [r1, #8]
   1ab9a:	2400      	movs	r4, #0
   1ab9c:	1a9b      	subs	r3, r3, r2
   1ab9e:	9400      	str	r4, [sp, #0]
   1aba0:	440a      	add	r2, r1
   1aba2:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1aba6:	4631      	mov	r1, r6
   1aba8:	b29b      	uxth	r3, r3
   1abaa:	4638      	mov	r0, r7
   1abac:	47c0      	blx	r8
	if (read < 0) {
   1abae:	1e01      	subs	r1, r0, #0
   1abb0:	dbe2      	blt.n	1ab78 <read_group_cb+0x72>
	if (!data->rsp->len) {
   1abb2:	68ee      	ldr	r6, [r5, #12]
   1abb4:	68ab      	ldr	r3, [r5, #8]
   1abb6:	7830      	ldrb	r0, [r6, #0]
   1abb8:	1d0a      	adds	r2, r1, #4
   1abba:	b928      	cbnz	r0, 1abc8 <read_group_cb+0xc2>
		data->rsp->len = read + sizeof(*data->group);
   1abbc:	7032      	strb	r2, [r6, #0]
	net_buf_add(data->buf, read);
   1abbe:	f103 0008 	add.w	r0, r3, #8
   1abc2:	f004 fa9b 	bl	1f0fc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   1abc6:	e7c3      	b.n	1ab50 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1abc8:	4290      	cmp	r0, r2
   1abca:	d0f8      	beq.n	1abbe <read_group_cb+0xb8>
		data->buf->len -= sizeof(*data->group);
   1abcc:	899a      	ldrh	r2, [r3, #12]
   1abce:	3a04      	subs	r2, #4
   1abd0:	819a      	strh	r2, [r3, #12]
		return false;
   1abd2:	e7d1      	b.n	1ab78 <read_group_cb+0x72>

0001abd4 <find_info_cb>:
	if (!data->rsp) {
   1abd4:	688b      	ldr	r3, [r1, #8]
{
   1abd6:	b570      	push	{r4, r5, r6, lr}
   1abd8:	4605      	mov	r5, r0
   1abda:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
   1abdc:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
   1abde:	b963      	cbnz	r3, 1abfa <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1abe0:	6848      	ldr	r0, [r1, #4]
   1abe2:	2101      	movs	r1, #1
   1abe4:	3008      	adds	r0, #8
   1abe6:	f004 fa89 	bl	1f0fc <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1abea:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1abec:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1abee:	781b      	ldrb	r3, [r3, #0]
   1abf0:	2b00      	cmp	r3, #0
   1abf2:	bf0c      	ite	eq
   1abf4:	2301      	moveq	r3, #1
   1abf6:	2302      	movne	r3, #2
   1abf8:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1abfa:	68a3      	ldr	r3, [r4, #8]
   1abfc:	781b      	ldrb	r3, [r3, #0]
   1abfe:	2b01      	cmp	r3, #1
   1ac00:	d003      	beq.n	1ac0a <find_info_cb+0x36>
   1ac02:	2b02      	cmp	r3, #2
   1ac04:	d01a      	beq.n	1ac3c <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1ac06:	2000      	movs	r0, #0
   1ac08:	e017      	b.n	1ac3a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ac0a:	682b      	ldr	r3, [r5, #0]
   1ac0c:	781b      	ldrb	r3, [r3, #0]
   1ac0e:	2b00      	cmp	r3, #0
   1ac10:	d1f9      	bne.n	1ac06 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ac12:	6860      	ldr	r0, [r4, #4]
   1ac14:	2104      	movs	r1, #4
   1ac16:	3008      	adds	r0, #8
   1ac18:	f004 fa70 	bl	1f0fc <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1ac1c:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1ac1e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1ac20:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1ac22:	682b      	ldr	r3, [r5, #0]
   1ac24:	885b      	ldrh	r3, [r3, #2]
   1ac26:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
   1ac28:	6863      	ldr	r3, [r4, #4]
   1ac2a:	f8b6 0052 	ldrh.w	r0, [r6, #82]	; 0x52
   1ac2e:	899b      	ldrh	r3, [r3, #12]
   1ac30:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ac32:	2804      	cmp	r0, #4
   1ac34:	bf94      	ite	ls
   1ac36:	2000      	movls	r0, #0
   1ac38:	2001      	movhi	r0, #1
}
   1ac3a:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1ac3c:	682b      	ldr	r3, [r5, #0]
   1ac3e:	781b      	ldrb	r3, [r3, #0]
   1ac40:	2b02      	cmp	r3, #2
   1ac42:	d1e0      	bne.n	1ac06 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1ac44:	6860      	ldr	r0, [r4, #4]
   1ac46:	2112      	movs	r1, #18
   1ac48:	3008      	adds	r0, #8
   1ac4a:	f004 fa57 	bl	1f0fc <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ac4e:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1ac50:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1ac52:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ac54:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1ac56:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1ac5a:	3101      	adds	r1, #1
   1ac5c:	f7ff fa24 	bl	1a0a8 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
   1ac60:	6863      	ldr	r3, [r4, #4]
   1ac62:	f8b6 0052 	ldrh.w	r0, [r6, #82]	; 0x52
   1ac66:	899b      	ldrh	r3, [r3, #12]
   1ac68:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1ac6a:	2812      	cmp	r0, #18
   1ac6c:	e7e2      	b.n	1ac34 <find_info_cb+0x60>

0001ac6e <find_type_cb>:
{
   1ac6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
   1ac72:	680e      	ldr	r6, [r1, #0]
{
   1ac74:	b088      	sub	sp, #32
   1ac76:	4605      	mov	r5, r0
   1ac78:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ac7a:	2700      	movs	r7, #0
   1ac7c:	f642 0301 	movw	r3, #10241	; 0x2801
   1ac80:	a902      	add	r1, sp, #8
   1ac82:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
   1ac84:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ac88:	f88d 7008 	strb.w	r7, [sp, #8]
   1ac8c:	f8ad 300a 	strh.w	r3, [sp, #10]
   1ac90:	f7ff facd 	bl	1a22e <bt_uuid_cmp>
   1ac94:	b928      	cbnz	r0, 1aca2 <find_type_cb+0x34>
		data->group = NULL;
   1ac96:	2300      	movs	r3, #0
   1ac98:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   1ac9a:	2001      	movs	r0, #1
}
   1ac9c:	b008      	add	sp, #32
   1ac9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1aca2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1aca6:	a903      	add	r1, sp, #12
   1aca8:	6828      	ldr	r0, [r5, #0]
   1acaa:	f88d 700c 	strb.w	r7, [sp, #12]
   1acae:	f8ad 300e 	strh.w	r3, [sp, #14]
   1acb2:	f7ff fabc 	bl	1a22e <bt_uuid_cmp>
   1acb6:	b140      	cbz	r0, 1acca <find_type_cb+0x5c>
		if (data->group &&
   1acb8:	68a3      	ldr	r3, [r4, #8]
   1acba:	2b00      	cmp	r3, #0
   1acbc:	d0ed      	beq.n	1ac9a <find_type_cb+0x2c>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
   1acbe:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
   1acc0:	8859      	ldrh	r1, [r3, #2]
   1acc2:	4291      	cmp	r1, r2
   1acc4:	d2e9      	bcs.n	1ac9a <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1acc6:	805a      	strh	r2, [r3, #2]
   1acc8:	e7e7      	b.n	1ac9a <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
   1acca:	6862      	ldr	r2, [r4, #4]
   1accc:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
   1acd0:	8992      	ldrh	r2, [r2, #12]
   1acd2:	1a9b      	subs	r3, r3, r2
   1acd4:	2b03      	cmp	r3, #3
   1acd6:	d9e1      	bls.n	1ac9c <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1acd8:	2310      	movs	r3, #16
   1acda:	9000      	str	r0, [sp, #0]
   1acdc:	686e      	ldr	r6, [r5, #4]
   1acde:	eb0d 0203 	add.w	r2, sp, r3
   1ace2:	4629      	mov	r1, r5
   1ace4:	4640      	mov	r0, r8
   1ace6:	47b0      	blx	r6
	if (read < 0) {
   1ace8:	2800      	cmp	r0, #0
   1acea:	dbd4      	blt.n	1ac96 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
   1acec:	7c22      	ldrb	r2, [r4, #16]
   1acee:	4282      	cmp	r2, r0
   1acf0:	d1d1      	bne.n	1ac96 <find_type_cb+0x28>
   1acf2:	a904      	add	r1, sp, #16
   1acf4:	68e0      	ldr	r0, [r4, #12]
   1acf6:	f7ff f9c7 	bl	1a088 <memcmp>
   1acfa:	2800      	cmp	r0, #0
   1acfc:	d1cb      	bne.n	1ac96 <find_type_cb+0x28>
	data->err = 0x00;
   1acfe:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ad00:	6860      	ldr	r0, [r4, #4]
   1ad02:	2104      	movs	r1, #4
   1ad04:	3008      	adds	r0, #8
   1ad06:	f004 f9f9 	bl	1f0fc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1ad0a:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ad0c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
   1ad0e:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
   1ad10:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1ad12:	e7c2      	b.n	1ac9a <find_type_cb+0x2c>

0001ad14 <check_perm.isra.6>:
	if ((mask & BT_GATT_PERM_READ) &&
   1ad14:	07ca      	lsls	r2, r1, #31
   1ad16:	7c83      	ldrb	r3, [r0, #18]
   1ad18:	d504      	bpl.n	1ad24 <check_perm.isra.6+0x10>
   1ad1a:	f013 0f15 	tst.w	r3, #21
   1ad1e:	d012      	beq.n	1ad46 <check_perm.isra.6+0x32>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ad20:	6842      	ldr	r2, [r0, #4]
   1ad22:	b182      	cbz	r2, 1ad46 <check_perm.isra.6+0x32>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ad24:	078a      	lsls	r2, r1, #30
   1ad26:	d504      	bpl.n	1ad32 <check_perm.isra.6+0x1e>
   1ad28:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   1ad2c:	d00d      	beq.n	1ad4a <check_perm.isra.6+0x36>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1ad2e:	6882      	ldr	r2, [r0, #8]
   1ad30:	b15a      	cbz	r2, 1ad4a <check_perm.isra.6+0x36>
	mask &= attr->perm;
   1ad32:	ea01 0003 	and.w	r0, r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1ad36:	f010 0f30 	tst.w	r0, #48	; 0x30
   1ad3a:	d108      	bne.n	1ad4e <check_perm.isra.6+0x3a>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1ad3c:	f010 000c 	ands.w	r0, r0, #12
   1ad40:	bf18      	it	ne
   1ad42:	200f      	movne	r0, #15
   1ad44:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1ad46:	2002      	movs	r0, #2
   1ad48:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1ad4a:	2003      	movs	r0, #3
   1ad4c:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
   1ad4e:	2005      	movs	r0, #5
}
   1ad50:	4770      	bx	lr

0001ad52 <read_type_cb>:
{
   1ad52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
   1ad56:	680f      	ldr	r7, [r1, #0]
{
   1ad58:	4605      	mov	r5, r0
   1ad5a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ad5c:	6800      	ldr	r0, [r0, #0]
   1ad5e:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
   1ad60:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ad64:	f7ff fa63 	bl	1a22e <bt_uuid_cmp>
   1ad68:	4680      	mov	r8, r0
   1ad6a:	2800      	cmp	r0, #0
   1ad6c:	d14b      	bne.n	1ae06 <read_type_cb+0xb4>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ad6e:	2115      	movs	r1, #21
   1ad70:	4628      	mov	r0, r5
   1ad72:	f7ff ffcf 	bl	1ad14 <check_perm.isra.6>
   1ad76:	4604      	mov	r4, r0
   1ad78:	7530      	strb	r0, [r6, #20]
	if (data->err) {
   1ad7a:	b148      	cbz	r0, 1ad90 <read_type_cb+0x3e>
		if (data->rsp->len) {
   1ad7c:	68f3      	ldr	r3, [r6, #12]
   1ad7e:	781c      	ldrb	r4, [r3, #0]
   1ad80:	b114      	cbz	r4, 1ad88 <read_type_cb+0x36>
			data->err = 0x00;
   1ad82:	f886 8014 	strb.w	r8, [r6, #20]
		return BT_GATT_ITER_STOP;
   1ad86:	4644      	mov	r4, r8
}
   1ad88:	4620      	mov	r0, r4
   1ad8a:	b003      	add	sp, #12
   1ad8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1ad90:	68b0      	ldr	r0, [r6, #8]
   1ad92:	2102      	movs	r1, #2
   1ad94:	3008      	adds	r0, #8
   1ad96:	f004 f9b1 	bl	1f0fc <net_buf_simple_add>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ad9a:	68b1      	ldr	r1, [r6, #8]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1ad9c:	8a2b      	ldrh	r3, [r5, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ad9e:	898a      	ldrh	r2, [r1, #12]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
   1ada0:	6130      	str	r0, [r6, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
   1ada2:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1ada4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
   1ada8:	6889      	ldr	r1, [r1, #8]
   1adaa:	9400      	str	r4, [sp, #0]
   1adac:	1a9b      	subs	r3, r3, r2
   1adae:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1adb2:	440a      	add	r2, r1
   1adb4:	b29b      	uxth	r3, r3
   1adb6:	4629      	mov	r1, r5
   1adb8:	4648      	mov	r0, r9
   1adba:	47c0      	blx	r8
	if (read < 0) {
   1adbc:	1e01      	subs	r1, r0, #0
   1adbe:	da07      	bge.n	1add0 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1adc0:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   1adc4:	bf26      	itte	cs
   1adc6:	4249      	negcs	r1, r1
   1adc8:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   1adca:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   1adcc:	7531      	strb	r1, [r6, #20]
		return BT_GATT_ITER_STOP;
   1adce:	e7db      	b.n	1ad88 <read_type_cb+0x36>
	if (!data->rsp->len) {
   1add0:	68f5      	ldr	r5, [r6, #12]
   1add2:	68b0      	ldr	r0, [r6, #8]
   1add4:	782a      	ldrb	r2, [r5, #0]
   1add6:	1c8b      	adds	r3, r1, #2
   1add8:	b97a      	cbnz	r2, 1adfa <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
   1adda:	702b      	strb	r3, [r5, #0]
	net_buf_add(data->buf, read);
   1addc:	3008      	adds	r0, #8
   1adde:	f004 f98d 	bl	1f0fc <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
   1ade2:	68b3      	ldr	r3, [r6, #8]
   1ade4:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
   1ade8:	899b      	ldrh	r3, [r3, #12]
   1adea:	1ae4      	subs	r4, r4, r3
   1adec:	68f3      	ldr	r3, [r6, #12]
   1adee:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1adf0:	429c      	cmp	r4, r3
   1adf2:	bfd4      	ite	le
   1adf4:	2400      	movle	r4, #0
   1adf6:	2401      	movgt	r4, #1
   1adf8:	e7c6      	b.n	1ad88 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1adfa:	429a      	cmp	r2, r3
   1adfc:	d0ee      	beq.n	1addc <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
   1adfe:	8983      	ldrh	r3, [r0, #12]
   1ae00:	3b02      	subs	r3, #2
   1ae02:	8183      	strh	r3, [r0, #12]
		return BT_GATT_ITER_STOP;
   1ae04:	e7c0      	b.n	1ad88 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
   1ae06:	2401      	movs	r4, #1
   1ae08:	e7be      	b.n	1ad88 <read_type_cb+0x36>

0001ae0a <uuid_create>:
	switch (buf->len) {
   1ae0a:	898a      	ldrh	r2, [r1, #12]
   1ae0c:	2a02      	cmp	r2, #2
{
   1ae0e:	b510      	push	{r4, lr}
   1ae10:	4604      	mov	r4, r0
	switch (buf->len) {
   1ae12:	d003      	beq.n	1ae1c <uuid_create+0x12>
   1ae14:	2a10      	cmp	r2, #16
   1ae16:	d00a      	beq.n	1ae2e <uuid_create+0x24>
	return false;
   1ae18:	2000      	movs	r0, #0
}
   1ae1a:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
   1ae1c:	2300      	movs	r3, #0
   1ae1e:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
   1ae20:	f101 0008 	add.w	r0, r1, #8
   1ae24:	f004 f9fd 	bl	1f222 <net_buf_simple_pull_le16>
   1ae28:	8060      	strh	r0, [r4, #2]
		return true;
   1ae2a:	2001      	movs	r0, #1
   1ae2c:	e7f5      	b.n	1ae1a <uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   1ae2e:	2302      	movs	r3, #2
   1ae30:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
   1ae34:	6889      	ldr	r1, [r1, #8]
   1ae36:	f7ff f937 	bl	1a0a8 <memcpy>
   1ae3a:	e7f6      	b.n	1ae2a <uuid_create+0x20>

0001ae3c <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
   1ae3c:	6803      	ldr	r3, [r0, #0]
   1ae3e:	7a9b      	ldrb	r3, [r3, #10]
   1ae40:	2b04      	cmp	r3, #4
   1ae42:	d10a      	bne.n	1ae5a <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ae44:	f3bf 8f5b 	dmb	ish
   1ae48:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   1ae4c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ae50:	ea6f 00a0 	mvn.w	r0, r0, asr #2
   1ae54:	f000 0001 	and.w	r0, r0, #1
   1ae58:	4770      	bx	lr
   1ae5a:	2001      	movs	r0, #1
}
   1ae5c:	4770      	bx	lr

0001ae5e <att_exec_write_req>:
   1ae5e:	2006      	movs	r0, #6
   1ae60:	4770      	bx	lr

0001ae62 <att_pdu_sent>:
{
   1ae62:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1ae64:	2104      	movs	r1, #4
   1ae66:	f7ff fe0b 	bl	1aa80 <bt_l2cap_le_lookup_tx_cid>
}
   1ae6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ae6e:	30bc      	adds	r0, #188	; 0xbc
   1ae70:	f7fb bfcc 	b.w	16e0c <z_impl_k_sem_give>

0001ae74 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
   1ae74:	7a81      	ldrb	r1, [r0, #10]
   1ae76:	2904      	cmp	r1, #4
{
   1ae78:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1ae7a:	d10a      	bne.n	1ae92 <att_chan_get+0x1e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1ae7c:	f7ff fe0b 	bl	1aa96 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ae80:	b138      	cbz	r0, 1ae92 <att_chan_get+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ae82:	f3bf 8f5b 	dmb	ish
   1ae86:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   1ae8a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
   1ae8e:	075b      	lsls	r3, r3, #29
   1ae90:	d500      	bpl.n	1ae94 <att_chan_get+0x20>
		return NULL;
   1ae92:	2000      	movs	r0, #0
}
   1ae94:	bd08      	pop	{r3, pc}

0001ae96 <att_rsp_sent>:
{
   1ae96:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1ae98:	2104      	movs	r1, #4
   1ae9a:	f7ff fdf1 	bl	1aa80 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ae9e:	f3bf 8f5b 	dmb	ish
   1aea2:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1aea6:	e853 2f00 	ldrex	r2, [r3]
   1aeaa:	f022 0201 	bic.w	r2, r2, #1
   1aeae:	e843 2100 	strex	r1, r2, [r3]
   1aeb2:	2900      	cmp	r1, #0
   1aeb4:	d1f7      	bne.n	1aea6 <att_rsp_sent+0x10>
   1aeb6:	f3bf 8f5b 	dmb	ish
   1aeba:	30bc      	adds	r0, #188	; 0xbc
}
   1aebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1aec0:	f7fb bfa4 	b.w	16e0c <z_impl_k_sem_give>

0001aec4 <att_cfm_sent>:
{
   1aec4:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1aec6:	2104      	movs	r1, #4
   1aec8:	f7ff fdda 	bl	1aa80 <bt_l2cap_le_lookup_tx_cid>
   1aecc:	f3bf 8f5b 	dmb	ish
   1aed0:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1aed4:	e853 2f00 	ldrex	r2, [r3]
   1aed8:	f022 0202 	bic.w	r2, r2, #2
   1aedc:	e843 2100 	strex	r1, r2, [r3]
   1aee0:	2900      	cmp	r1, #0
   1aee2:	d1f7      	bne.n	1aed4 <att_cfm_sent+0x10>
   1aee4:	f3bf 8f5b 	dmb	ish
   1aee8:	30bc      	adds	r0, #188	; 0xbc
}
   1aeea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1aeee:	f7fb bf8d 	b.w	16e0c <z_impl_k_sem_give>

0001aef2 <write_cb>:
{
   1aef2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1aef6:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   1aef8:	f8d1 8000 	ldr.w	r8, [r1]
   1aefc:	212a      	movs	r1, #42	; 0x2a
{
   1aefe:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
   1af00:	f7ff ff08 	bl	1ad14 <check_perm.isra.6>
   1af04:	4605      	mov	r5, r0
   1af06:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1af08:	bb08      	cbnz	r0, 1af4e <write_cb+0x5c>
	if (!data->req) {
   1af0a:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1af0c:	68b7      	ldr	r7, [r6, #8]
   1af0e:	68e2      	ldr	r2, [r4, #12]
	if (!data->req) {
   1af10:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1af12:	bf14      	ite	ne
   1af14:	2300      	movne	r3, #0
   1af16:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1af18:	9301      	str	r3, [sp, #4]
   1af1a:	8a63      	ldrh	r3, [r4, #18]
   1af1c:	9300      	str	r3, [sp, #0]
   1af1e:	4631      	mov	r1, r6
   1af20:	7c23      	ldrb	r3, [r4, #16]
   1af22:	4640      	mov	r0, r8
   1af24:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1af26:	2800      	cmp	r0, #0
   1af28:	db05      	blt.n	1af36 <write_cb+0x44>
   1af2a:	7c23      	ldrb	r3, [r4, #16]
   1af2c:	4298      	cmp	r0, r3
   1af2e:	d10c      	bne.n	1af4a <write_cb+0x58>
	data->err = 0U;
   1af30:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1af32:	2501      	movs	r5, #1
   1af34:	e005      	b.n	1af42 <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1af36:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1af3a:	d306      	bcc.n	1af4a <write_cb+0x58>
		return -err;
   1af3c:	4240      	negs	r0, r0
   1af3e:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1af40:	7520      	strb	r0, [r4, #20]
}
   1af42:	4628      	mov	r0, r5
   1af44:	b002      	add	sp, #8
   1af46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_ATT_ERR_UNLIKELY;
   1af4a:	200e      	movs	r0, #14
   1af4c:	e7f8      	b.n	1af40 <write_cb+0x4e>
		return BT_GATT_ITER_STOP;
   1af4e:	2500      	movs	r5, #0
   1af50:	e7f7      	b.n	1af42 <write_cb+0x50>

0001af52 <read_cb>:
{
   1af52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1af56:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1af58:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
   1af5a:	f8d1 9000 	ldr.w	r9, [r1]
{
   1af5e:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1af60:	3008      	adds	r0, #8
   1af62:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
   1af64:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1af68:	f004 f8c8 	bl	1f0fc <net_buf_simple_add>
	data->err = 0x00;
   1af6c:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1af6e:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   1af70:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1af72:	2115      	movs	r1, #21
   1af74:	4630      	mov	r0, r6
   1af76:	f7ff fecd 	bl	1ad14 <check_perm.isra.6>
   1af7a:	4605      	mov	r5, r0
   1af7c:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   1af7e:	bb00      	cbnz	r0, 1afc2 <read_cb+0x70>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
   1af80:	68a1      	ldr	r1, [r4, #8]
   1af82:	f8b9 3052 	ldrh.w	r3, [r9, #82]	; 0x52
   1af86:	898a      	ldrh	r2, [r1, #12]
   1af88:	6889      	ldr	r1, [r1, #8]
   1af8a:	88a0      	ldrh	r0, [r4, #4]
   1af8c:	9000      	str	r0, [sp, #0]
   1af8e:	1a9b      	subs	r3, r3, r2
   1af90:	6877      	ldr	r7, [r6, #4]
   1af92:	440a      	add	r2, r1
   1af94:	b29b      	uxth	r3, r3
   1af96:	4631      	mov	r1, r6
   1af98:	4640      	mov	r0, r8
   1af9a:	47b8      	blx	r7
	if (read < 0) {
   1af9c:	1e01      	subs	r1, r0, #0
   1af9e:	da0a      	bge.n	1afb6 <read_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1afa0:	f111 0fff 	cmn.w	r1, #255	; 0xff
		return -err;
   1afa4:	bf26      	itte	cs
   1afa6:	4249      	negcs	r1, r1
   1afa8:	b2c9      	uxtbcs	r1, r1
	return BT_ATT_ERR_UNLIKELY;
   1afaa:	210e      	movcc	r1, #14
		data->err = err_to_att(read);
   1afac:	7421      	strb	r1, [r4, #16]
}
   1afae:	4628      	mov	r0, r5
   1afb0:	b003      	add	sp, #12
   1afb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
   1afb6:	68a0      	ldr	r0, [r4, #8]
   1afb8:	3008      	adds	r0, #8
   1afba:	f004 f89f 	bl	1f0fc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
   1afbe:	2501      	movs	r5, #1
   1afc0:	e7f5      	b.n	1afae <read_cb+0x5c>
		return BT_GATT_ITER_STOP;
   1afc2:	463d      	mov	r5, r7
   1afc4:	e7f3      	b.n	1afae <read_cb+0x5c>

0001afc6 <att_handle_rsp>:
{
   1afc6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1afca:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
   1afcc:	309c      	adds	r0, #156	; 0x9c
{
   1afce:	461e      	mov	r6, r3
   1afd0:	460f      	mov	r7, r1
   1afd2:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
   1afd4:	f004 fdaa 	bl	1fb2c <k_delayed_work_cancel>
	if (!att->req) {
   1afd8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1afdc:	b1db      	cbz	r3, 1b016 <att_handle_rsp+0x50>
	if (att->req->buf) {
   1afde:	6918      	ldr	r0, [r3, #16]
   1afe0:	b128      	cbz	r0, 1afee <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
   1afe2:	f7fa fc8f 	bl	15904 <net_buf_unref>
		att->req->buf = NULL;
   1afe6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1afea:	2200      	movs	r2, #0
   1afec:	611a      	str	r2, [r3, #16]
	func = att->req->func;
   1afee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	func(att->chan.chan.conn, err, pdu, len, att->req);
   1aff2:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
   1aff4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
   1aff8:	2500      	movs	r5, #0
   1affa:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
   1affc:	463a      	mov	r2, r7
   1affe:	9300      	str	r3, [sp, #0]
   1b000:	4631      	mov	r1, r6
   1b002:	4643      	mov	r3, r8
   1b004:	47c8      	blx	r9
	if (!att->req->func) {
   1b006:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   1b00a:	6843      	ldr	r3, [r0, #4]
   1b00c:	b90b      	cbnz	r3, 1b012 <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
   1b00e:	f7ff fd69 	bl	1aae4 <att_req_destroy>
	att->req = NULL;
   1b012:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
Z_GENLIST_IS_EMPTY(slist)
   1b016:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
Z_GENLIST_GET(slist, snode)
   1b01a:	b159      	cbz	r1, 1b034 <att_handle_rsp+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b01c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   1b020:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1b022:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b026:	4291      	cmp	r1, r2
	list->tail = node;
   1b028:	bf08      	it	eq
   1b02a:	f8c4 3098 	streq.w	r3, [r4, #152]	; 0x98
	att_send_req(att, ATT_REQ(node));
   1b02e:	4620      	mov	r0, r4
   1b030:	f7ef fd28 	bl	aa84 <att_send_req>
}
   1b034:	2000      	movs	r0, #0
   1b036:	b003      	add	sp, #12
   1b038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b03c <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
   1b03c:	898a      	ldrh	r2, [r1, #12]
   1b03e:	6889      	ldr	r1, [r1, #8]
   1b040:	2300      	movs	r3, #0
   1b042:	f7ff bfc0 	b.w	1afc6 <att_handle_rsp>

0001b046 <att_reset>:
{
   1b046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b048:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1b04c:	4604      	mov	r4, r0
   1b04e:	f3bf 8f5b 	dmb	ish
   1b052:	e853 2f00 	ldrex	r2, [r3]
   1b056:	f042 0204 	orr.w	r2, r2, #4
   1b05a:	e843 2100 	strex	r1, r2, [r3]
   1b05e:	2900      	cmp	r1, #0
   1b060:	d1f7      	bne.n	1b052 <att_reset+0xc>
   1b062:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
   1b066:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
   1b06a:	4628      	mov	r0, r5
   1b06c:	f7fb fece 	bl	16e0c <z_impl_k_sem_give>
   1b070:	4628      	mov	r0, r5
   1b072:	f7fb fecb 	bl	16e0c <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1b076:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   1b07a:	b93d      	cbnz	r5, 1b08c <att_reset+0x46>
	if (!att->req) {
   1b07c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	list->head = NULL;
   1b080:	2200      	movs	r2, #0
	list->tail = NULL;
   1b082:	e9c4 2225 	strd	r2, r2, [r4, #148]	; 0x94
   1b086:	b993      	cbnz	r3, 1b0ae <att_reset+0x68>
}
   1b088:	b003      	add	sp, #12
   1b08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b08c:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   1b08e:	686f      	ldr	r7, [r5, #4]
   1b090:	b12f      	cbz	r7, 1b09e <att_reset+0x58>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
   1b092:	2300      	movs	r3, #0
   1b094:	9500      	str	r5, [sp, #0]
   1b096:	461a      	mov	r2, r3
   1b098:	210e      	movs	r1, #14
   1b09a:	4618      	mov	r0, r3
   1b09c:	47b8      	blx	r7
		att_req_destroy(req);
   1b09e:	4628      	mov	r0, r5
   1b0a0:	f7ff fd20 	bl	1aae4 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1b0a4:	2e00      	cmp	r6, #0
   1b0a6:	d0e9      	beq.n	1b07c <att_reset+0x36>
   1b0a8:	4635      	mov	r5, r6
   1b0aa:	6836      	ldr	r6, [r6, #0]
   1b0ac:	e7ef      	b.n	1b08e <att_reset+0x48>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b0ae:	230e      	movs	r3, #14
   1b0b0:	4611      	mov	r1, r2
   1b0b2:	4620      	mov	r0, r4
}
   1b0b4:	b003      	add	sp, #12
   1b0b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b0ba:	f7ff bf84 	b.w	1afc6 <att_handle_rsp>

0001b0be <bt_att_disconnected>:
{
   1b0be:	b510      	push	{r4, lr}
   1b0c0:	4604      	mov	r4, r0
	att_reset(att);
   1b0c2:	f7ff ffc0 	bl	1b046 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1b0c6:	6820      	ldr	r0, [r4, #0]
}
   1b0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1b0cc:	f7f0 bdd4 	b.w	bc78 <bt_gatt_disconnected>

0001b0d0 <att_timeout>:
{
   1b0d0:	b510      	push	{r4, lr}
   1b0d2:	4604      	mov	r4, r0
	att_reset(att);
   1b0d4:	389c      	subs	r0, #156	; 0x9c
   1b0d6:	f7ff ffb6 	bl	1b046 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1b0da:	f854 0c9c 	ldr.w	r0, [r4, #-156]
   1b0de:	f7f0 fdcb 	bl	bc78 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1b0e2:	2300      	movs	r3, #0
   1b0e4:	f844 3c9c 	str.w	r3, [r4, #-156]
}
   1b0e8:	bd10      	pop	{r4, pc}

0001b0ea <bt_att_create_pdu>:
{
   1b0ea:	b570      	push	{r4, r5, r6, lr}
   1b0ec:	460e      	mov	r6, r1
   1b0ee:	4615      	mov	r5, r2
	att = att_chan_get(conn);
   1b0f0:	f7ff fec0 	bl	1ae74 <att_chan_get>
	if (!att) {
   1b0f4:	4604      	mov	r4, r0
   1b0f6:	b170      	cbz	r0, 1b116 <bt_att_create_pdu+0x2c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
   1b0f8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   1b0fc:	3501      	adds	r5, #1
   1b0fe:	429d      	cmp	r5, r3
   1b100:	d80b      	bhi.n	1b11a <bt_att_create_pdu+0x30>
	buf = bt_l2cap_create_pdu(NULL, 0);
   1b102:	2100      	movs	r1, #0
   1b104:	4608      	mov	r0, r1
   1b106:	f7ff fc6d 	bl	1a9e4 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1b10a:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
   1b10c:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1b10e:	3008      	adds	r0, #8
   1b110:	f003 fff4 	bl	1f0fc <net_buf_simple_add>
	hdr->code = op;
   1b114:	7006      	strb	r6, [r0, #0]
}
   1b116:	4620      	mov	r0, r4
   1b118:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1b11a:	2400      	movs	r4, #0
   1b11c:	e7fb      	b.n	1b116 <bt_att_create_pdu+0x2c>

0001b11e <att_read_blob_req>:
{
   1b11e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1b120:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
   1b122:	8813      	ldrh	r3, [r2, #0]
   1b124:	8852      	ldrh	r2, [r2, #2]
   1b126:	9200      	str	r2, [sp, #0]
   1b128:	210c      	movs	r1, #12
   1b12a:	220d      	movs	r2, #13
   1b12c:	f7ef fea2 	bl	ae74 <att_read_rsp>
}
   1b130:	b003      	add	sp, #12
   1b132:	f85d fb04 	ldr.w	pc, [sp], #4

0001b136 <att_read_req>:
{
   1b136:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1b138:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b13a:	2200      	movs	r2, #0
   1b13c:	881b      	ldrh	r3, [r3, #0]
   1b13e:	9200      	str	r2, [sp, #0]
   1b140:	210a      	movs	r1, #10
   1b142:	220b      	movs	r2, #11
   1b144:	f7ef fe96 	bl	ae74 <att_read_rsp>
}
   1b148:	b003      	add	sp, #12
   1b14a:	f85d fb04 	ldr.w	pc, [sp], #4

0001b14e <bt_att_get_mtu>:
{
   1b14e:	b508      	push	{r3, lr}
	att = att_chan_get(conn);
   1b150:	f7ff fe90 	bl	1ae74 <att_chan_get>
	if (!att) {
   1b154:	b108      	cbz	r0, 1b15a <bt_att_get_mtu+0xc>
	return att->chan.tx.mtu;
   1b156:	f8b0 0052 	ldrh.w	r0, [r0, #82]	; 0x52
}
   1b15a:	bd08      	pop	{r3, pc}

0001b15c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1b15c:	b510      	push	{r4, lr}
   1b15e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
   1b160:	b1c8      	cbz	r0, 1b196 <bt_att_req_send+0x3a>
   1b162:	b1c1      	cbz	r1, 1b196 <bt_att_req_send+0x3a>
		return -EINVAL;
	}

	att = att_chan_get(conn);
   1b164:	f7ff fe86 	bl	1ae74 <att_chan_get>
	if (!att) {
   1b168:	4603      	mov	r3, r0
   1b16a:	b1b8      	cbz	r0, 1b19c <bt_att_req_send+0x40>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
   1b16c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   1b170:	b162      	cbz	r2, 1b18c <bt_att_req_send+0x30>
	parent->next = child;
   1b172:	2000      	movs	r0, #0
   1b174:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1b176:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
   1b17a:	b91a      	cbnz	r2, 1b184 <bt_att_req_send+0x28>
	list->head = node;
   1b17c:	e9c3 4425 	strd	r4, r4, [r3, #148]	; 0x94
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
   1b180:	4610      	mov	r0, r2
	}

	return att_send_req(att, req);
}
   1b182:	bd10      	pop	{r4, pc}
	parent->next = child;
   1b184:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b186:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
   1b18a:	e7fa      	b.n	1b182 <bt_att_req_send+0x26>
	return att_send_req(att, req);
   1b18c:	4621      	mov	r1, r4
}
   1b18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
   1b192:	f7ef bc77 	b.w	aa84 <att_send_req>
		return -EINVAL;
   1b196:	f06f 0015 	mvn.w	r0, #21
   1b19a:	e7f2      	b.n	1b182 <bt_att_req_send+0x26>
		return -ENOTCONN;
   1b19c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1b1a0:	e7ef      	b.n	1b182 <bt_att_req_send+0x26>

0001b1a2 <sc_ccc_cfg_changed>:
}
   1b1a2:	4770      	bx	lr

0001b1a4 <gatt_ccc_changed>:
{
   1b1a4:	b430      	push	{r4, r5}
	u16_t value = 0x0000;
   1b1a6:	2300      	movs	r3, #0
   1b1a8:	684d      	ldr	r5, [r1, #4]
	for (i = 0; i < ccc->cfg_len; i++) {
   1b1aa:	461a      	mov	r2, r3
   1b1ac:	42aa      	cmp	r2, r5
   1b1ae:	d108      	bne.n	1b1c2 <gatt_ccc_changed+0x1e>
	if (value != ccc->value) {
   1b1b0:	890a      	ldrh	r2, [r1, #8]
   1b1b2:	429a      	cmp	r2, r3
   1b1b4:	d00e      	beq.n	1b1d4 <gatt_ccc_changed+0x30>
		if (ccc->cfg_changed) {
   1b1b6:	68ca      	ldr	r2, [r1, #12]
		ccc->value = value;
   1b1b8:	810b      	strh	r3, [r1, #8]
		if (ccc->cfg_changed) {
   1b1ba:	b15a      	cbz	r2, 1b1d4 <gatt_ccc_changed+0x30>
			ccc->cfg_changed(attr, value);
   1b1bc:	4619      	mov	r1, r3
}
   1b1be:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   1b1c0:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
   1b1c2:	680c      	ldr	r4, [r1, #0]
   1b1c4:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
   1b1c8:	3201      	adds	r2, #1
   1b1ca:	8924      	ldrh	r4, [r4, #8]
   1b1cc:	42a3      	cmp	r3, r4
   1b1ce:	bf38      	it	cc
   1b1d0:	4623      	movcc	r3, r4
   1b1d2:	e7eb      	b.n	1b1ac <gatt_ccc_changed+0x8>
}
   1b1d4:	bc30      	pop	{r4, r5}
   1b1d6:	4770      	bx	lr

0001b1d8 <gatt_indicate_rsp>:
{
   1b1d8:	b410      	push	{r4}
   1b1da:	9b01      	ldr	r3, [sp, #4]
	params->func(conn, params->attr, err);
   1b1dc:	699c      	ldr	r4, [r3, #24]
   1b1de:	460a      	mov	r2, r1
   1b1e0:	6959      	ldr	r1, [r3, #20]
   1b1e2:	4623      	mov	r3, r4
}
   1b1e4:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   1b1e6:	4718      	bx	r3

0001b1e8 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b1e8:	f3bf 8f5b 	dmb	ish
   1b1ec:	6800      	ldr	r0, [r0, #0]
   1b1ee:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b1f2:	4108      	asrs	r0, r1
}
   1b1f4:	f000 0001 	and.w	r0, r0, #1
   1b1f8:	4770      	bx	lr

0001b1fa <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1b1fa:	2207      	movs	r2, #7
   1b1fc:	f7fe bf54 	b.w	1a0a8 <memcpy>

0001b200 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b200:	2301      	movs	r3, #1
   1b202:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b206:	f3bf 8f5b 	dmb	ish
   1b20a:	e850 3f00 	ldrex	r3, [r0]
   1b20e:	430b      	orrs	r3, r1
   1b210:	e840 3200 	strex	r2, r3, [r0]
   1b214:	2a00      	cmp	r2, #0
   1b216:	d1f8      	bne.n	1b20a <atomic_set_bit+0xa>
   1b218:	f3bf 8f5b 	dmb	ish
}
   1b21c:	4770      	bx	lr

0001b21e <gen_hash_m>:
{
   1b21e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b220:	6807      	ldr	r7, [r0, #0]
   1b222:	783d      	ldrb	r5, [r7, #0]
{
   1b224:	b089      	sub	sp, #36	; 0x24
   1b226:	4606      	mov	r6, r0
   1b228:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b22a:	b10d      	cbz	r5, 1b230 <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   1b22c:	2501      	movs	r5, #1
   1b22e:	e015      	b.n	1b25c <gen_hash_m+0x3e>
	switch (u16->val) {
   1b230:	887b      	ldrh	r3, [r7, #2]
   1b232:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1b236:	d004      	beq.n	1b242 <gen_hash_m+0x24>
   1b238:	d813      	bhi.n	1b262 <gen_hash_m+0x44>
   1b23a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1b23e:	2b03      	cmp	r3, #3
   1b240:	d8f4      	bhi.n	1b22c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   1b242:	8a33      	ldrh	r3, [r6, #16]
   1b244:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b248:	2202      	movs	r2, #2
   1b24a:	f10d 010e 	add.w	r1, sp, #14
   1b24e:	4620      	mov	r0, r4
   1b250:	f7fd ffcc 	bl	191ec <tc_cmac_update>
   1b254:	b9d8      	cbnz	r0, 1b28e <gen_hash_m+0x70>
			state->err = -EINVAL;
   1b256:	f06f 0315 	mvn.w	r3, #21
   1b25a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1b25c:	4628      	mov	r0, r5
   1b25e:	b009      	add	sp, #36	; 0x24
   1b260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1b262:	f642 1205 	movw	r2, #10501	; 0x2905
   1b266:	4293      	cmp	r3, r2
   1b268:	d8e0      	bhi.n	1b22c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   1b26a:	8a03      	ldrh	r3, [r0, #16]
   1b26c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b270:	2202      	movs	r2, #2
   1b272:	f10d 010e 	add.w	r1, sp, #14
   1b276:	4620      	mov	r0, r4
   1b278:	f7fd ffb8 	bl	191ec <tc_cmac_update>
   1b27c:	2800      	cmp	r0, #0
   1b27e:	d0ea      	beq.n	1b256 <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   1b280:	887b      	ldrh	r3, [r7, #2]
   1b282:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b286:	2202      	movs	r2, #2
   1b288:	f10d 010e 	add.w	r1, sp, #14
   1b28c:	e014      	b.n	1b2b8 <gen_hash_m+0x9a>
		value = sys_cpu_to_le16(u16->val);
   1b28e:	887b      	ldrh	r3, [r7, #2]
   1b290:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b294:	2202      	movs	r2, #2
   1b296:	f10d 010e 	add.w	r1, sp, #14
   1b29a:	4620      	mov	r0, r4
   1b29c:	f7fd ffa6 	bl	191ec <tc_cmac_update>
   1b2a0:	2800      	cmp	r0, #0
   1b2a2:	d0d8      	beq.n	1b256 <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1b2a4:	2000      	movs	r0, #0
   1b2a6:	2310      	movs	r3, #16
   1b2a8:	eb0d 0203 	add.w	r2, sp, r3
   1b2ac:	4631      	mov	r1, r6
   1b2ae:	9000      	str	r0, [sp, #0]
   1b2b0:	6877      	ldr	r7, [r6, #4]
   1b2b2:	47b8      	blx	r7
		if (tc_cmac_update(&state->state, data, len) ==
   1b2b4:	a904      	add	r1, sp, #16
   1b2b6:	4602      	mov	r2, r0
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b2b8:	4620      	mov	r0, r4
   1b2ba:	f7fd ff97 	bl	191ec <tc_cmac_update>
   1b2be:	2800      	cmp	r0, #0
   1b2c0:	d1b4      	bne.n	1b22c <gen_hash_m+0xe>
   1b2c2:	e7c8      	b.n	1b256 <gen_hash_m+0x38>

0001b2c4 <gatt_notify>:
{
   1b2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2c8:	468b      	mov	fp, r1
   1b2ca:	4692      	mov	sl, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
   1b2cc:	211b      	movs	r1, #27
   1b2ce:	1c9a      	adds	r2, r3, #2
{
   1b2d0:	4680      	mov	r8, r0
   1b2d2:	461e      	mov	r6, r3
   1b2d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
   1b2d8:	f7ff ff07 	bl	1b0ea <bt_att_create_pdu>
	if (!buf) {
   1b2dc:	4604      	mov	r4, r0
   1b2de:	b1c0      	cbz	r0, 1b312 <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
   1b2e0:	f100 0708 	add.w	r7, r0, #8
   1b2e4:	2102      	movs	r1, #2
   1b2e6:	4638      	mov	r0, r7
   1b2e8:	f003 ff08 	bl	1f0fc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b2ec:	4605      	mov	r5, r0
	net_buf_add(buf, len);
   1b2ee:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
   1b2f0:	f825 bb02 	strh.w	fp, [r5], #2
	net_buf_add(buf, len);
   1b2f4:	4638      	mov	r0, r7
   1b2f6:	f003 ff01 	bl	1f0fc <net_buf_simple_add>
	memcpy(nfy->value, data, len);
   1b2fa:	4632      	mov	r2, r6
   1b2fc:	4651      	mov	r1, sl
   1b2fe:	4628      	mov	r0, r5
   1b300:	f7fe fed2 	bl	1a0a8 <memcpy>
	return bt_att_send(conn, buf, cb);
   1b304:	464a      	mov	r2, r9
   1b306:	4621      	mov	r1, r4
   1b308:	4640      	mov	r0, r8
}
   1b30a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_att_send(conn, buf, cb);
   1b30e:	f7ef bf77 	b.w	b200 <bt_att_send>
}
   1b312:	f06f 000b 	mvn.w	r0, #11
   1b316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b31a <ccc_find_cfg>:
{
   1b31a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b31c:	4605      	mov	r5, r0
   1b31e:	460f      	mov	r7, r1
	for (i = 0; i < ccc->cfg_len; i++) {
   1b320:	2400      	movs	r4, #0
   1b322:	686b      	ldr	r3, [r5, #4]
   1b324:	429c      	cmp	r4, r3
   1b326:	d301      	bcc.n	1b32c <ccc_find_cfg+0x12>
	return NULL;
   1b328:	2000      	movs	r0, #0
   1b32a:	e00a      	b.n	1b342 <ccc_find_cfg+0x28>
		if (!bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1b32c:	6828      	ldr	r0, [r5, #0]
   1b32e:	0126      	lsls	r6, r4, #4
   1b330:	4430      	add	r0, r6
	return memcmp(a, b, sizeof(*a));
   1b332:	2207      	movs	r2, #7
   1b334:	4639      	mov	r1, r7
   1b336:	3001      	adds	r0, #1
   1b338:	f7fe fea6 	bl	1a088 <memcmp>
   1b33c:	b910      	cbnz	r0, 1b344 <ccc_find_cfg+0x2a>
			return &ccc->cfg[i];
   1b33e:	6828      	ldr	r0, [r5, #0]
   1b340:	4430      	add	r0, r6
}
   1b342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
   1b344:	3401      	adds	r4, #1
   1b346:	e7ec      	b.n	1b322 <ccc_find_cfg+0x8>

0001b348 <cf_write>:
{
   1b348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b34c:	4690      	mov	r8, r2
   1b34e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1b352:	2a01      	cmp	r2, #1
{
   1b354:	4606      	mov	r6, r0
   1b356:	461f      	mov	r7, r3
	if (offset > sizeof(cfg->data)) {
   1b358:	d833      	bhi.n	1b3c2 <cf_write+0x7a>
	if (offset + len > sizeof(cfg->data)) {
   1b35a:	441a      	add	r2, r3
   1b35c:	2a01      	cmp	r2, #1
   1b35e:	461d      	mov	r5, r3
   1b360:	dc32      	bgt.n	1b3c8 <cf_write+0x80>
	cfg = find_cf_cfg(conn);
   1b362:	f7f0 f8dd 	bl	b520 <find_cf_cfg>
	if (!cfg) {
   1b366:	4604      	mov	r4, r0
   1b368:	b918      	cbnz	r0, 1b372 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1b36a:	f7f0 f8d9 	bl	b520 <find_cf_cfg>
	if (!cfg) {
   1b36e:	4604      	mov	r4, r0
   1b370:	b368      	cbz	r0, 1b3ce <cf_write+0x86>
	for (i = 0; i < len && i < last_byte; i++) {
   1b372:	2300      	movs	r3, #0
   1b374:	429f      	cmp	r7, r3
   1b376:	d915      	bls.n	1b3a4 <cf_write+0x5c>
   1b378:	b13b      	cbz	r3, 1b38a <cf_write+0x42>
		cfg->data[i] |= value[i] & ((1 << last_bit) - 1);
   1b37a:	f898 3000 	ldrb.w	r3, [r8]
   1b37e:	7a22      	ldrb	r2, [r4, #8]
   1b380:	f003 0301 	and.w	r3, r3, #1
   1b384:	4313      	orrs	r3, r2
   1b386:	7223      	strb	r3, [r4, #8]
		BT_DBG("byte %u: data 0x%02x value 0x%02x", i, cfg->data[i],
   1b388:	e00e      	b.n	1b3a8 <cf_write+0x60>
   1b38a:	7a21      	ldrb	r1, [r4, #8]
		u8_t chg_bits = value[i] ^ cfg->data[i];
   1b38c:	f898 2000 	ldrb.w	r2, [r8]
   1b390:	404a      	eors	r2, r1
			if ((BIT(bit) & chg_bits) &&
   1b392:	07d0      	lsls	r0, r2, #31
	for (i = 0; i < len && i < last_byte; i++) {
   1b394:	f04f 0301 	mov.w	r3, #1
			if ((BIT(bit) & chg_bits) &&
   1b398:	d5ec      	bpl.n	1b374 <cf_write+0x2c>
   1b39a:	07ca      	lsls	r2, r1, #31
   1b39c:	d5ea      	bpl.n	1b374 <cf_write+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1b39e:	f06f 0512 	mvn.w	r5, #18
   1b3a2:	e00b      	b.n	1b3bc <cf_write+0x74>
	for (i = 0; i < len && i < last_byte; i++) {
   1b3a4:	2f00      	cmp	r7, #0
   1b3a6:	d1e8      	bne.n	1b37a <cf_write+0x32>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b3a8:	f106 0148 	add.w	r1, r6, #72	; 0x48
   1b3ac:	1c60      	adds	r0, r4, #1
   1b3ae:	f7ff ff24 	bl	1b1fa <bt_addr_le_copy>
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1b3b2:	2100      	movs	r1, #0
   1b3b4:	f104 000c 	add.w	r0, r4, #12
   1b3b8:	f7ff ff22 	bl	1b200 <atomic_set_bit>
}
   1b3bc:	4628      	mov	r0, r5
   1b3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b3c2:	f06f 0506 	mvn.w	r5, #6
   1b3c6:	e7f9      	b.n	1b3bc <cf_write+0x74>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b3c8:	f06f 050c 	mvn.w	r5, #12
   1b3cc:	e7f6      	b.n	1b3bc <cf_write+0x74>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b3ce:	f06f 0510 	mvn.w	r5, #16
   1b3d2:	e7f3      	b.n	1b3bc <cf_write+0x74>

0001b3d4 <find_ccc_cfg>:
{
   1b3d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b3d6:	4605      	mov	r5, r0
   1b3d8:	460f      	mov	r7, r1
	for (i = 0; i < ccc->cfg_len; i++) {
   1b3da:	2600      	movs	r6, #0
   1b3dc:	687b      	ldr	r3, [r7, #4]
   1b3de:	42b3      	cmp	r3, r6
   1b3e0:	d801      	bhi.n	1b3e6 <find_ccc_cfg+0x12>
	return NULL;
   1b3e2:	2000      	movs	r0, #0
   1b3e4:	e00e      	b.n	1b404 <find_ccc_cfg+0x30>
		if (conn) {
   1b3e6:	683b      	ldr	r3, [r7, #0]
   1b3e8:	0134      	lsls	r4, r6, #4
   1b3ea:	1918      	adds	r0, r3, r4
   1b3ec:	b165      	cbz	r5, 1b408 <find_ccc_cfg+0x34>
			if (conn->id == ccc->cfg[i].id &&
   1b3ee:	7a2a      	ldrb	r2, [r5, #8]
   1b3f0:	5d1b      	ldrb	r3, [r3, r4]
   1b3f2:	429a      	cmp	r2, r3
   1b3f4:	d111      	bne.n	1b41a <find_ccc_cfg+0x46>
			    !bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
   1b3f6:	1c41      	adds	r1, r0, #1
   1b3f8:	4628      	mov	r0, r5
   1b3fa:	f7ff fa1b 	bl	1a834 <bt_conn_addr_le_cmp>
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   1b3fe:	b960      	cbnz	r0, 1b41a <find_ccc_cfg+0x46>
			return &ccc->cfg[i];
   1b400:	6838      	ldr	r0, [r7, #0]
   1b402:	4420      	add	r0, r4
}
   1b404:	b003      	add	sp, #12
   1b406:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b408:	2207      	movs	r2, #7
   1b40a:	4669      	mov	r1, sp
   1b40c:	3001      	adds	r0, #1
		} else if (!bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
   1b40e:	9500      	str	r5, [sp, #0]
   1b410:	f8cd 5003 	str.w	r5, [sp, #3]
   1b414:	f7fe fe38 	bl	1a088 <memcmp>
   1b418:	e7f1      	b.n	1b3fe <find_ccc_cfg+0x2a>
	for (i = 0; i < ccc->cfg_len; i++) {
   1b41a:	3601      	adds	r6, #1
   1b41c:	e7de      	b.n	1b3dc <find_ccc_cfg+0x8>

0001b41e <bt_gatt_attr_write_ccc>:
{
   1b41e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b422:	4688      	mov	r8, r1
   1b424:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1b428:	f8d8 700c 	ldr.w	r7, [r8, #12]
	if (offset > sizeof(u16_t)) {
   1b42c:	2902      	cmp	r1, #2
{
   1b42e:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
   1b430:	d837      	bhi.n	1b4a2 <bt_gatt_attr_write_ccc+0x84>
	if (offset + len > sizeof(u16_t)) {
   1b432:	4419      	add	r1, r3
   1b434:	2902      	cmp	r1, #2
   1b436:	461d      	mov	r5, r3
   1b438:	dc36      	bgt.n	1b4a8 <bt_gatt_attr_write_ccc+0x8a>
	return ((u16_t)src[1] << 8) | src[0];
   1b43a:	7853      	ldrb	r3, [r2, #1]
   1b43c:	7814      	ldrb	r4, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1b43e:	4639      	mov	r1, r7
   1b440:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   1b444:	f7ff ffc6 	bl	1b3d4 <find_ccc_cfg>
	if (!cfg) {
   1b448:	4606      	mov	r6, r0
   1b44a:	b950      	cbnz	r0, 1b462 <bt_gatt_attr_write_ccc+0x44>
		if (!value) {
   1b44c:	b32c      	cbz	r4, 1b49a <bt_gatt_attr_write_ccc+0x7c>
		cfg = find_ccc_cfg(NULL, ccc);
   1b44e:	4639      	mov	r1, r7
   1b450:	f7ff ffc0 	bl	1b3d4 <find_ccc_cfg>
		if (!cfg) {
   1b454:	4606      	mov	r6, r0
   1b456:	b350      	cbz	r0, 1b4ae <bt_gatt_attr_write_ccc+0x90>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b458:	f109 0148 	add.w	r1, r9, #72	; 0x48
   1b45c:	3001      	adds	r0, #1
   1b45e:	f7ff fecc 	bl	1b1fa <bt_addr_le_copy>
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
   1b462:	693b      	ldr	r3, [r7, #16]
   1b464:	b98b      	cbnz	r3, 1b48a <bt_gatt_attr_write_ccc+0x6c>
	if (cfg->value != ccc->value) {
   1b466:	893b      	ldrh	r3, [r7, #8]
	cfg->value = value;
   1b468:	8134      	strh	r4, [r6, #8]
	if (cfg->value != ccc->value) {
   1b46a:	42a3      	cmp	r3, r4
   1b46c:	d003      	beq.n	1b476 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   1b46e:	4639      	mov	r1, r7
   1b470:	4640      	mov	r0, r8
   1b472:	f7ff fe97 	bl	1b1a4 <gatt_ccc_changed>
	if (!value) {
   1b476:	b984      	cbnz	r4, 1b49a <bt_gatt_attr_write_ccc+0x7c>
		bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b478:	4669      	mov	r1, sp
   1b47a:	1c70      	adds	r0, r6, #1
   1b47c:	9400      	str	r4, [sp, #0]
   1b47e:	f8cd 4003 	str.w	r4, [sp, #3]
   1b482:	f7ff feba 	bl	1b1fa <bt_addr_le_copy>
		cfg->value = 0;
   1b486:	8134      	strh	r4, [r6, #8]
   1b488:	e007      	b.n	1b49a <bt_gatt_attr_write_ccc+0x7c>
	if (ccc->cfg_write && !ccc->cfg_write(conn, attr, value)) {
   1b48a:	4622      	mov	r2, r4
   1b48c:	4641      	mov	r1, r8
   1b48e:	4648      	mov	r0, r9
   1b490:	4798      	blx	r3
   1b492:	2800      	cmp	r0, #0
   1b494:	d1e7      	bne.n	1b466 <bt_gatt_attr_write_ccc+0x48>
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_NOT_PERMITTED);
   1b496:	f06f 0502 	mvn.w	r5, #2
}
   1b49a:	4628      	mov	r0, r5
   1b49c:	b003      	add	sp, #12
   1b49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b4a2:	f06f 0506 	mvn.w	r5, #6
   1b4a6:	e7f8      	b.n	1b49a <bt_gatt_attr_write_ccc+0x7c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b4a8:	f06f 050c 	mvn.w	r5, #12
   1b4ac:	e7f5      	b.n	1b49a <bt_gatt_attr_write_ccc+0x7c>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b4ae:	f06f 0510 	mvn.w	r5, #16
   1b4b2:	e7f2      	b.n	1b49a <bt_gatt_attr_write_ccc+0x7c>

0001b4b4 <read_appearance>:
{
   1b4b4:	b513      	push	{r0, r1, r4, lr}
   1b4b6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1b4ba:	4610      	mov	r0, r2
	if (offset > value_len) {
   1b4bc:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
   1b4be:	f04f 0200 	mov.w	r2, #0
   1b4c2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1b4c6:	d80d      	bhi.n	1b4e4 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1b4c8:	f1c1 0402 	rsb	r4, r1, #2
   1b4cc:	429c      	cmp	r4, r3
   1b4ce:	bfa8      	it	ge
   1b4d0:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1b4d2:	f10d 0306 	add.w	r3, sp, #6
   1b4d6:	4622      	mov	r2, r4
   1b4d8:	4419      	add	r1, r3
   1b4da:	f7fe fde5 	bl	1a0a8 <memcpy>
}
   1b4de:	4620      	mov	r0, r4
   1b4e0:	b002      	add	sp, #8
   1b4e2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b4e4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1b4e8:	e7f9      	b.n	1b4de <read_appearance+0x2a>

0001b4ea <read_name>:
{
   1b4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4ee:	4698      	mov	r8, r3
   1b4f0:	4616      	mov	r6, r2
   1b4f2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   1b4f6:	f7ee fae1 	bl	9abc <bt_get_name>
   1b4fa:	4607      	mov	r7, r0
				 strlen(name));
   1b4fc:	f7fe fdb1 	bl	1a062 <strlen>
	if (offset > value_len) {
   1b500:	b283      	uxth	r3, r0
   1b502:	42ab      	cmp	r3, r5
   1b504:	d30c      	bcc.n	1b520 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1b506:	1b5c      	subs	r4, r3, r5
   1b508:	4544      	cmp	r4, r8
   1b50a:	bfa8      	it	ge
   1b50c:	4644      	movge	r4, r8
   1b50e:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   1b510:	4622      	mov	r2, r4
   1b512:	1979      	adds	r1, r7, r5
   1b514:	4630      	mov	r0, r6
   1b516:	f7fe fdc7 	bl	1a0a8 <memcpy>
}
   1b51a:	4620      	mov	r0, r4
   1b51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b520:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1b524:	e7f9      	b.n	1b51a <read_name+0x30>

0001b526 <bt_gatt_attr_read_ccc>:
{
   1b526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1b528:	68c9      	ldr	r1, [r1, #12]
{
   1b52a:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   1b52e:	4616      	mov	r6, r2
   1b530:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1b532:	f7ff ff4f 	bl	1b3d4 <find_ccc_cfg>
	if (cfg) {
   1b536:	b100      	cbz	r0, 1b53a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1b538:	8900      	ldrh	r0, [r0, #8]
   1b53a:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1b53e:	2d02      	cmp	r5, #2
   1b540:	d80e      	bhi.n	1b560 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1b542:	f1c5 0402 	rsb	r4, r5, #2
   1b546:	42bc      	cmp	r4, r7
   1b548:	bfa8      	it	ge
   1b54a:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   1b54c:	f10d 0306 	add.w	r3, sp, #6
   1b550:	4622      	mov	r2, r4
   1b552:	1959      	adds	r1, r3, r5
   1b554:	4630      	mov	r0, r6
   1b556:	f7fe fda7 	bl	1a0a8 <memcpy>
}
   1b55a:	4620      	mov	r0, r4
   1b55c:	b003      	add	sp, #12
   1b55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b560:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1b564:	e7f9      	b.n	1b55a <bt_gatt_attr_read_ccc+0x34>

0001b566 <cf_read>:
{
   1b566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b568:	461f      	mov	r7, r3
	u8_t data[1] = {};
   1b56a:	2300      	movs	r3, #0
{
   1b56c:	4616      	mov	r6, r2
   1b56e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	u8_t data[1] = {};
   1b572:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1b576:	f7ef ffd3 	bl	b520 <find_cf_cfg>
	if (cfg) {
   1b57a:	b128      	cbz	r0, 1b588 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1b57c:	f100 0108 	add.w	r1, r0, #8
   1b580:	2201      	movs	r2, #1
   1b582:	a801      	add	r0, sp, #4
   1b584:	f7fe fd90 	bl	1a0a8 <memcpy>
	if (offset > value_len) {
   1b588:	2d01      	cmp	r5, #1
   1b58a:	d80d      	bhi.n	1b5a8 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1b58c:	f1c5 0401 	rsb	r4, r5, #1
   1b590:	42bc      	cmp	r4, r7
   1b592:	bfa8      	it	ge
   1b594:	463c      	movge	r4, r7
	memcpy(buf, (u8_t *)value + offset, len);
   1b596:	ab01      	add	r3, sp, #4
   1b598:	4622      	mov	r2, r4
   1b59a:	1959      	adds	r1, r3, r5
   1b59c:	4630      	mov	r0, r6
   1b59e:	f7fe fd83 	bl	1a0a8 <memcpy>
}
   1b5a2:	4620      	mov	r0, r4
   1b5a4:	b003      	add	sp, #12
   1b5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b5a8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1b5ac:	e7f9      	b.n	1b5a2 <cf_read+0x3c>

0001b5ae <bt_gatt_attr_read_chrc>:
{
   1b5ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1b5b0:	68c8      	ldr	r0, [r1, #12]
{
   1b5b2:	b087      	sub	sp, #28
   1b5b4:	4616      	mov	r6, r2
   1b5b6:	461f      	mov	r7, r3
	pdu.value_handle = sys_cpu_to_le16(attr->handle + 1);
   1b5b8:	8a0a      	ldrh	r2, [r1, #16]
	pdu.properties = chrc->properties;
   1b5ba:	7903      	ldrb	r3, [r0, #4]
   1b5bc:	f88d 3004 	strb.w	r3, [sp, #4]
	pdu.value_handle = sys_cpu_to_le16(attr->handle + 1);
   1b5c0:	3201      	adds	r2, #1
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1b5c2:	6801      	ldr	r1, [r0, #0]
	pdu.value_handle = sys_cpu_to_le16(attr->handle + 1);
   1b5c4:	f8ad 2005 	strh.w	r2, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1b5c8:	780b      	ldrb	r3, [r1, #0]
{
   1b5ca:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1b5ce:	b99b      	cbnz	r3, 1b5f8 <bt_gatt_attr_read_chrc+0x4a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1b5d0:	884b      	ldrh	r3, [r1, #2]
   1b5d2:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
   1b5d6:	2205      	movs	r2, #5
	if (offset > value_len) {
   1b5d8:	42aa      	cmp	r2, r5
   1b5da:	d315      	bcc.n	1b608 <bt_gatt_attr_read_chrc+0x5a>
	len = MIN(buf_len, value_len - offset);
   1b5dc:	1b54      	subs	r4, r2, r5
   1b5de:	42bc      	cmp	r4, r7
   1b5e0:	bfa8      	it	ge
   1b5e2:	463c      	movge	r4, r7
   1b5e4:	b2a4      	uxth	r4, r4
	memcpy(buf, (u8_t *)value + offset, len);
   1b5e6:	ab01      	add	r3, sp, #4
   1b5e8:	4622      	mov	r2, r4
   1b5ea:	1959      	adds	r1, r3, r5
   1b5ec:	4630      	mov	r0, r6
   1b5ee:	f7fe fd5b 	bl	1a0a8 <memcpy>
}
   1b5f2:	4620      	mov	r0, r4
   1b5f4:	b007      	add	sp, #28
   1b5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1b5f8:	2210      	movs	r2, #16
   1b5fa:	3101      	adds	r1, #1
   1b5fc:	f10d 0007 	add.w	r0, sp, #7
   1b600:	f7fe fd52 	bl	1a0a8 <memcpy>
		value_len += 16;
   1b604:	2213      	movs	r2, #19
   1b606:	e7e7      	b.n	1b5d8 <bt_gatt_attr_read_chrc+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b608:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1b60c:	e7f1      	b.n	1b5f2 <bt_gatt_attr_read_chrc+0x44>

0001b60e <bt_gatt_attr_read_service>:
{
   1b60e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1b610:	68c9      	ldr	r1, [r1, #12]
{
   1b612:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1b616:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1b618:	780a      	ldrb	r2, [r1, #0]
   1b61a:	b992      	cbnz	r2, 1b642 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1b61c:	884a      	ldrh	r2, [r1, #2]
   1b61e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1b622:	2d02      	cmp	r5, #2
   1b624:	d819      	bhi.n	1b65a <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1b626:	f1c5 0402 	rsb	r4, r5, #2
   1b62a:	429c      	cmp	r4, r3
   1b62c:	bfa8      	it	ge
   1b62e:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1b630:	f10d 0306 	add.w	r3, sp, #6
   1b634:	4622      	mov	r2, r4
   1b636:	1959      	adds	r1, r3, r5
   1b638:	f7fe fd36 	bl	1a0a8 <memcpy>
}
   1b63c:	4620      	mov	r0, r4
   1b63e:	b003      	add	sp, #12
   1b640:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1b642:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1b644:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1b648:	d807      	bhi.n	1b65a <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1b64a:	f1c5 0410 	rsb	r4, r5, #16
   1b64e:	429c      	cmp	r4, r3
   1b650:	bfa8      	it	ge
   1b652:	461c      	movge	r4, r3
	memcpy(buf, (u8_t *)value + offset, len);
   1b654:	4622      	mov	r2, r4
   1b656:	4429      	add	r1, r5
   1b658:	e7ee      	b.n	1b638 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b65a:	f06f 0406 	mvn.w	r4, #6
   1b65e:	e7ed      	b.n	1b63c <bt_gatt_attr_read_service+0x2e>

0001b660 <bt_gatt_service_register>:
{
   1b660:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b662:	4604      	mov	r4, r0
	bt_gatt_init();
   1b664:	f7f0 f9a4 	bl	b9b0 <bt_gatt_init>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   1b668:	6823      	ldr	r3, [r4, #0]
   1b66a:	2500      	movs	r5, #0
   1b66c:	6818      	ldr	r0, [r3, #0]
   1b66e:	f88d 5000 	strb.w	r5, [sp]
   1b672:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   1b676:	4669      	mov	r1, sp
   1b678:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b67c:	f7fe fdd7 	bl	1a22e <bt_uuid_cmp>
   1b680:	b918      	cbnz	r0, 1b68a <bt_gatt_service_register+0x2a>
		return -EALREADY;
   1b682:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1b686:	b003      	add	sp, #12
   1b688:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
   1b68a:	6823      	ldr	r3, [r4, #0]
   1b68c:	a901      	add	r1, sp, #4
   1b68e:	6818      	ldr	r0, [r3, #0]
   1b690:	f88d 5004 	strb.w	r5, [sp, #4]
   1b694:	f641 0301 	movw	r3, #6145	; 0x1801
   1b698:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b69c:	f7fe fdc7 	bl	1a22e <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
   1b6a0:	2800      	cmp	r0, #0
   1b6a2:	d0ee      	beq.n	1b682 <bt_gatt_service_register+0x22>
	err = gatt_register(svc);
   1b6a4:	4620      	mov	r0, r4
   1b6a6:	f7ef fea1 	bl	b3ec <gatt_register>
	if (err < 0) {
   1b6aa:	2800      	cmp	r0, #0
   1b6ac:	dbeb      	blt.n	1b686 <bt_gatt_service_register+0x26>
		    svc->attrs[svc->attr_count - 1].handle);
   1b6ae:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
   1b6b2:	2114      	movs	r1, #20
   1b6b4:	fb01 2303 	mla	r3, r1, r3, r2
   1b6b8:	8a10      	ldrh	r0, [r2, #16]
   1b6ba:	f833 1c04 	ldrh.w	r1, [r3, #-4]
   1b6be:	f7ef fffd 	bl	b6bc <sc_indicate.constprop.21>
	db_changed();
   1b6c2:	f7ef ffb5 	bl	b630 <db_changed>
	return 0;
   1b6c6:	4628      	mov	r0, r5
   1b6c8:	e7dd      	b.n	1b686 <bt_gatt_service_register+0x26>

0001b6ca <db_hash_process>:
	db_hash_gen();
   1b6ca:	f7f0 b951 	b.w	b970 <db_hash_gen>

0001b6ce <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   1b6ce:	f7ff bd3e 	b.w	1b14e <bt_att_get_mtu>

0001b6d2 <bt_gatt_change_aware>:
{
   1b6d2:	b510      	push	{r4, lr}
   1b6d4:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1b6d6:	f7ef ff23 	bl	b520 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1b6da:	b910      	cbnz	r0, 1b6e2 <bt_gatt_change_aware+0x10>
		return true;
   1b6dc:	2401      	movs	r4, #1
}
   1b6de:	4620      	mov	r0, r4
   1b6e0:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1b6e2:	7a03      	ldrb	r3, [r0, #8]
   1b6e4:	07db      	lsls	r3, r3, #31
   1b6e6:	d5f9      	bpl.n	1b6dc <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1b6e8:	f100 030c 	add.w	r3, r0, #12
   1b6ec:	2100      	movs	r1, #0
   1b6ee:	4618      	mov	r0, r3
   1b6f0:	f7ff fd7a 	bl	1b1e8 <atomic_test_bit>
   1b6f4:	4602      	mov	r2, r0
   1b6f6:	2800      	cmp	r0, #0
   1b6f8:	d1f0      	bne.n	1b6dc <bt_gatt_change_aware+0xa>
	if (!req) {
   1b6fa:	2c00      	cmp	r4, #0
   1b6fc:	d0ef      	beq.n	1b6de <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1b6fe:	2101      	movs	r1, #1
   1b700:	4618      	mov	r0, r3
   1b702:	f7ff fd71 	bl	1b1e8 <atomic_test_bit>
   1b706:	4604      	mov	r4, r0
   1b708:	b180      	cbz	r0, 1b72c <bt_gatt_change_aware+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b70a:	f3bf 8f5b 	dmb	ish
   1b70e:	e853 1f00 	ldrex	r1, [r3]
   1b712:	f021 0102 	bic.w	r1, r1, #2
   1b716:	e843 1000 	strex	r0, r1, [r3]
   1b71a:	2800      	cmp	r0, #0
   1b71c:	d1f7      	bne.n	1b70e <bt_gatt_change_aware+0x3c>
   1b71e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1b722:	4611      	mov	r1, r2
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1b724:	4618      	mov	r0, r3
   1b726:	f7ff fd6b 	bl	1b200 <atomic_set_bit>
	return false;
   1b72a:	e7d8      	b.n	1b6de <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1b72c:	2101      	movs	r1, #1
   1b72e:	e7f9      	b.n	1b724 <bt_gatt_change_aware+0x52>

0001b730 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
   1b730:	2100      	movs	r1, #0
{
   1b732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   1b734:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1b736:	4608      	mov	r0, r1
   1b738:	f7ff f954 	bl	1a9e4 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1b73c:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
   1b740:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1b742:	2101      	movs	r1, #1
   1b744:	4630      	mov	r0, r6
   1b746:	f003 fcd9 	bl	1f0fc <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1b74a:	2505      	movs	r5, #5
   1b74c:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
   1b74e:	2101      	movs	r1, #1
   1b750:	4630      	mov	r0, r6
   1b752:	f003 fcd3 	bl	1f0fc <net_buf_simple_add>
   1b756:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1b758:	7005      	strb	r5, [r0, #0]
   1b75a:	4622      	mov	r2, r4
   1b75c:	4638      	mov	r0, r7
   1b75e:	2106      	movs	r1, #6
   1b760:	f7ff f943 	bl	1a9ea <bt_l2cap_send_cb>
}
   1b764:	2000      	movs	r0, #0
   1b766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b768 <bt_smp_sign>:
   1b768:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b76c:	4770      	bx	lr

0001b76e <bt_mesh_is_provisioned>:

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
   1b76e:	f7f0 bb0b 	b.w	bd88 <atomic_test_bit.constprop.3>

0001b772 <bt_mesh_prov_enable>:
}

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
   1b772:	b510      	push	{r4, lr}
   1b774:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
   1b776:	f7ff fffa 	bl	1b76e <bt_mesh_is_provisioned>
   1b77a:	b970      	cbnz	r0, 1b79a <bt_mesh_prov_enable+0x28>

		memcpy(uuid.val, prov->uuid, 16);
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
   1b77c:	07e3      	lsls	r3, r4, #31
   1b77e:	d503      	bpl.n	1b788 <bt_mesh_prov_enable+0x16>
	    (bearers & BT_MESH_PROV_ADV)) {
		/* Make sure we're scanning for provisioning inviations */
		bt_mesh_scan_enable();
   1b780:	f7f0 fc90 	bl	c0a4 <bt_mesh_scan_enable>
		/* Enable unprovisioned beacon sending */
		bt_mesh_beacon_enable();
   1b784:	f7f0 feae 	bl	c4e4 <bt_mesh_beacon_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   1b788:	f014 0002 	ands.w	r0, r4, #2
   1b78c:	d004      	beq.n	1b798 <bt_mesh_prov_enable+0x26>
	    (bearers & BT_MESH_PROV_GATT)) {
		bt_mesh_proxy_prov_enable();
   1b78e:	f7f5 fc7f 	bl	11090 <bt_mesh_proxy_prov_enable>
		bt_mesh_adv_update();
   1b792:	f7f0 fc13 	bl	bfbc <bt_mesh_adv_update>
	}

	return 0;
   1b796:	2000      	movs	r0, #0
}
   1b798:	bd10      	pop	{r4, pc}
		return -EALREADY;
   1b79a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1b79e:	e7fb      	b.n	1b798 <bt_mesh_prov_enable+0x26>

0001b7a0 <bt_mesh_init>:
	return err;
}

int bt_mesh_init(const struct bt_mesh_prov *prov,
		 const struct bt_mesh_comp *comp)
{
   1b7a0:	b538      	push	{r3, r4, r5, lr}
   1b7a2:	4605      	mov	r5, r0
	err = bt_mesh_test();
	if (err) {
		return err;
	}

	err = bt_mesh_comp_register(comp);
   1b7a4:	4608      	mov	r0, r1
   1b7a6:	f7f2 fdf7 	bl	e398 <bt_mesh_comp_register>
	if (err) {
   1b7aa:	4604      	mov	r4, r0
   1b7ac:	b980      	cbnz	r0, 1b7d0 <bt_mesh_init+0x30>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		err = bt_mesh_prov_init(prov);
   1b7ae:	4628      	mov	r0, r5
   1b7b0:	f7f5 fa66 	bl	10c80 <bt_mesh_prov_init>
		if (err) {
   1b7b4:	4604      	mov	r4, r0
   1b7b6:	b958      	cbnz	r0, 1b7d0 <bt_mesh_init+0x30>
			return err;
		}
	}

	bt_mesh_net_init();
   1b7b8:	f7f1 fd14 	bl	d1e4 <bt_mesh_net_init>
	bt_mesh_trans_init();
   1b7bc:	f7f2 fbb2 	bl	df24 <bt_mesh_trans_init>
	bt_mesh_beacon_init();
   1b7c0:	f7f0 fdbe 	bl	c340 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   1b7c4:	f7f0 fc4c 	bl	c060 <bt_mesh_adv_init>

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
		bt_mesh_proxy_init();
   1b7c8:	f7f5 fe7e 	bl	114c8 <bt_mesh_proxy_init>
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_settings_init();
   1b7cc:	f7f4 fb26 	bl	fe1c <bt_mesh_settings_init>
	}

	return 0;
}
   1b7d0:	4620      	mov	r0, r4
   1b7d2:	bd38      	pop	{r3, r4, r5, pc}

0001b7d4 <adv_stack_dump>:
}
   1b7d4:	4770      	bx	lr

0001b7d6 <bt_mesh_scan_cb>:
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
   1b7d6:	2a03      	cmp	r2, #3
{
   1b7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7dc:	460f      	mov	r7, r1
   1b7de:	461c      	mov	r4, r3
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
   1b7e0:	d010      	beq.n	1b804 <bt_mesh_scan_cb+0x2e>
}
   1b7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
   1b7e6:	2200      	movs	r2, #0
   1b7e8:	4639      	mov	r1, r7
   1b7ea:	4620      	mov	r0, r4
   1b7ec:	f7f1 fbc0 	bl	cf70 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
   1b7f0:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   1b7f2:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
   1b7f6:	fa13 f686 	uxtah	r6, r3, r6
   1b7fa:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
   1b7fc:	4629      	mov	r1, r5
   1b7fe:	4620      	mov	r0, r4
   1b800:	f003 fcf7 	bl	1f1f2 <net_buf_simple_pull>
	while (buf->len > 1) {
   1b804:	88a3      	ldrh	r3, [r4, #4]
   1b806:	2b01      	cmp	r3, #1
   1b808:	d9eb      	bls.n	1b7e2 <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
   1b80a:	4620      	mov	r0, r4
   1b80c:	f003 fd01 	bl	1f212 <net_buf_simple_pull_u8>
		if (len == 0) {
   1b810:	4605      	mov	r5, r0
   1b812:	2800      	cmp	r0, #0
   1b814:	d0e5      	beq.n	1b7e2 <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
   1b816:	88a2      	ldrh	r2, [r4, #4]
   1b818:	b283      	uxth	r3, r0
   1b81a:	429a      	cmp	r2, r3
   1b81c:	d3e1      	bcc.n	1b7e2 <bt_mesh_scan_cb+0xc>
	state->offset = net_buf_simple_headroom(buf);
   1b81e:	4620      	mov	r0, r4
   1b820:	f003 fd23 	bl	1f26a <net_buf_simple_headroom>
   1b824:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
   1b826:	4620      	mov	r0, r4
	state->len = buf->len;
   1b828:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   1b82c:	f003 fcf1 	bl	1f212 <net_buf_simple_pull_u8>
		buf->len = len - 1;
   1b830:	1e6b      	subs	r3, r5, #1
		switch (type) {
   1b832:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
   1b834:	80a3      	strh	r3, [r4, #4]
		switch (type) {
   1b836:	d0d6      	beq.n	1b7e6 <bt_mesh_scan_cb+0x10>
   1b838:	282b      	cmp	r0, #43	; 0x2b
   1b83a:	d005      	beq.n	1b848 <bt_mesh_scan_cb+0x72>
   1b83c:	2829      	cmp	r0, #41	; 0x29
   1b83e:	d1d7      	bne.n	1b7f0 <bt_mesh_scan_cb+0x1a>
			bt_mesh_pb_adv_recv(buf);
   1b840:	4620      	mov	r0, r4
   1b842:	f7f5 f9d3 	bl	10bec <bt_mesh_pb_adv_recv>
			break;
   1b846:	e7d3      	b.n	1b7f0 <bt_mesh_scan_cb+0x1a>
			bt_mesh_beacon_recv(buf);
   1b848:	4620      	mov	r0, r4
   1b84a:	f7f0 fdab 	bl	c3a4 <bt_mesh_beacon_recv>
			break;
   1b84e:	e7cf      	b.n	1b7f0 <bt_mesh_scan_cb+0x1a>

0001b850 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
	BT_DBG("");

	return bt_le_scan_stop();
   1b850:	f7ee bb90 	b.w	9f74 <bt_le_scan_stop>

0001b854 <beacon_complete>:
{
   1b854:	b510      	push	{r4, lr}
   1b856:	460c      	mov	r4, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1b858:	f004 f9b9 	bl	1fbce <z_impl_k_uptime_get_32>
	sub->beacon_sent = k_uptime_get_32();
   1b85c:	6020      	str	r0, [r4, #0]
}
   1b85e:	bd10      	pop	{r4, pc}

0001b860 <auth_match>:
{
   1b860:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b864:	4605      	mov	r5, r0
	if (memcmp(net_id, keys->net_id, 8)) {
   1b866:	f105 0621 	add.w	r6, r5, #33	; 0x21
{
   1b86a:	4608      	mov	r0, r1
   1b86c:	4617      	mov	r7, r2
	if (memcmp(net_id, keys->net_id, 8)) {
   1b86e:	4631      	mov	r1, r6
   1b870:	2208      	movs	r2, #8
{
   1b872:	4698      	mov	r8, r3
	if (memcmp(net_id, keys->net_id, 8)) {
   1b874:	f7fe fc08 	bl	1a088 <memcmp>
   1b878:	b998      	cbnz	r0, 1b8a2 <auth_match+0x42>
	bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id, iv_index,
   1b87a:	ac02      	add	r4, sp, #8
   1b87c:	4643      	mov	r3, r8
   1b87e:	4632      	mov	r2, r6
   1b880:	4639      	mov	r1, r7
   1b882:	9400      	str	r4, [sp, #0]
   1b884:	f105 0049 	add.w	r0, r5, #73	; 0x49
   1b888:	f000 fd90 	bl	1c3ac <bt_mesh_beacon_auth>
	if (memcmp(auth, net_auth, 8)) {
   1b88c:	2208      	movs	r2, #8
   1b88e:	4621      	mov	r1, r4
   1b890:	980a      	ldr	r0, [sp, #40]	; 0x28
   1b892:	f7fe fbf9 	bl	1a088 <memcmp>
   1b896:	fab0 f080 	clz	r0, r0
   1b89a:	0940      	lsrs	r0, r0, #5
}
   1b89c:	b004      	add	sp, #16
   1b89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   1b8a2:	2000      	movs	r0, #0
   1b8a4:	e7fa      	b.n	1b89c <auth_match+0x3c>

0001b8a6 <bt_mesh_net_flags>:
{
   1b8a6:	b508      	push	{r3, lr}
	if (sub && sub->kr_flag) {
   1b8a8:	b138      	cbz	r0, 1b8ba <bt_mesh_net_flags+0x14>
	u8_t flags = 0x00;
   1b8aa:	7f82      	ldrb	r2, [r0, #30]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
   1b8ac:	f7f0 fed8 	bl	c660 <atomic_test_bit.constprop.9>
   1b8b0:	b108      	cbz	r0, 1b8b6 <bt_mesh_net_flags+0x10>
		flags |= BT_MESH_NET_FLAG_IVU;
   1b8b2:	f042 0202 	orr.w	r2, r2, #2
}
   1b8b6:	4610      	mov	r0, r2
   1b8b8:	bd08      	pop	{r3, pc}
	u8_t flags = 0x00;
   1b8ba:	4602      	mov	r2, r0
   1b8bc:	e7f6      	b.n	1b8ac <bt_mesh_net_flags+0x6>

0001b8be <bt_mesh_kr_update>:
{
   1b8be:	b510      	push	{r4, lr}
   1b8c0:	4604      	mov	r4, r0
   1b8c2:	7fc0      	ldrb	r0, [r0, #31]
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
   1b8c4:	7fa3      	ldrb	r3, [r4, #30]
   1b8c6:	428b      	cmp	r3, r1
   1b8c8:	d002      	beq.n	1b8d0 <bt_mesh_kr_update+0x12>
   1b8ca:	b908      	cbnz	r0, 1b8d0 <bt_mesh_kr_update+0x12>
		return false;
   1b8cc:	2000      	movs	r0, #0
}
   1b8ce:	bd10      	pop	{r4, pc}
	sub->kr_flag = new_kr;
   1b8d0:	2900      	cmp	r1, #0
   1b8d2:	bf14      	ite	ne
   1b8d4:	2301      	movne	r3, #1
   1b8d6:	2300      	moveq	r3, #0
   1b8d8:	77a3      	strb	r3, [r4, #30]
	if (sub->kr_flag) {
   1b8da:	d004      	beq.n	1b8e6 <bt_mesh_kr_update+0x28>
		if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   1b8dc:	2801      	cmp	r0, #1
   1b8de:	d1f5      	bne.n	1b8cc <bt_mesh_kr_update+0xe>
			sub->kr_phase = BT_MESH_KR_PHASE_2;
   1b8e0:	2302      	movs	r3, #2
   1b8e2:	77e3      	strb	r3, [r4, #31]
			return true;
   1b8e4:	e7f3      	b.n	1b8ce <bt_mesh_kr_update+0x10>
		switch (sub->kr_phase) {
   1b8e6:	2801      	cmp	r0, #1
   1b8e8:	d008      	beq.n	1b8fc <bt_mesh_kr_update+0x3e>
   1b8ea:	2802      	cmp	r0, #2
   1b8ec:	d1ee      	bne.n	1b8cc <bt_mesh_kr_update+0xe>
			bt_mesh_net_revoke_keys(sub);
   1b8ee:	4620      	mov	r0, r4
   1b8f0:	f7f0 ff8e 	bl	c810 <bt_mesh_net_revoke_keys>
			sub->kr_phase = BT_MESH_KR_NORMAL;
   1b8f4:	2300      	movs	r3, #0
   1b8f6:	77e3      	strb	r3, [r4, #31]
			return true;
   1b8f8:	2001      	movs	r0, #1
   1b8fa:	e7e8      	b.n	1b8ce <bt_mesh_kr_update+0x10>
			if (!new_key) {
   1b8fc:	2a00      	cmp	r2, #0
   1b8fe:	d0e5      	beq.n	1b8cc <bt_mesh_kr_update+0xe>
   1b900:	e7f5      	b.n	1b8ee <bt_mesh_kr_update+0x30>

0001b902 <bt_mesh_net_sec_update>:
{
   1b902:	b510      	push	{r4, lr}
   1b904:	4604      	mov	r4, r0
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   1b906:	f7f3 faff 	bl	ef08 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   1b90a:	2801      	cmp	r0, #1
   1b90c:	d104      	bne.n	1b918 <bt_mesh_net_sec_update+0x16>
		bt_mesh_proxy_beacon_send(sub);
   1b90e:	4620      	mov	r0, r4
}
   1b910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_proxy_beacon_send(sub);
   1b914:	f7f5 bb40 	b.w	10f98 <bt_mesh_proxy_beacon_send>
}
   1b918:	bd10      	pop	{r4, pc}

0001b91a <seg_first_send_start>:
	if (tx->cb && tx->cb->start) {
   1b91a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1b91c:	b11b      	cbz	r3, 1b926 <seg_first_send_start+0xc>
   1b91e:	681b      	ldr	r3, [r3, #0]
   1b920:	b10b      	cbz	r3, 1b926 <seg_first_send_start+0xc>
		tx->cb->start(duration, err, tx->cb_data);
   1b922:	6b52      	ldr	r2, [r2, #52]	; 0x34
   1b924:	4718      	bx	r3
}
   1b926:	4770      	bx	lr

0001b928 <send_unseg>:
{
   1b928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b92c:	4604      	mov	r4, r0
   1b92e:	460f      	mov	r7, r1
   1b930:	4690      	mov	r8, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   1b932:	7a81      	ldrb	r1, [r0, #10]
   1b934:	2200      	movs	r2, #0
   1b936:	2001      	movs	r0, #1
{
   1b938:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   1b93a:	f7f0 fb6d 	bl	c018 <bt_mesh_adv_create>
	if (!buf) {
   1b93e:	4606      	mov	r6, r0
   1b940:	b300      	cbz	r0, 1b984 <send_unseg+0x5c>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
   1b942:	f100 0508 	add.w	r5, r0, #8
   1b946:	2109      	movs	r1, #9
   1b948:	4628      	mov	r0, r5
   1b94a:	f003 fb72 	bl	1f032 <net_buf_simple_reserve>
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
   1b94e:	6863      	ldr	r3, [r4, #4]
   1b950:	885a      	ldrh	r2, [r3, #2]
   1b952:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1b956:	429a      	cmp	r2, r3
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   1b958:	bf1b      	ittet	ne
   1b95a:	7ae1      	ldrbne	r1, [r4, #11]
   1b95c:	0889      	lsrne	r1, r1, #2
		net_buf_add_u8(buf, UNSEG_HDR(0, 0));
   1b95e:	2100      	moveq	r1, #0
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   1b960:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
   1b964:	4628      	mov	r0, r5
   1b966:	f003 fbd8 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_add_mem(buf, sdu->data, sdu->len);
   1b96a:	88ba      	ldrh	r2, [r7, #4]
   1b96c:	6839      	ldr	r1, [r7, #0]
   1b96e:	4628      	mov	r0, r5
   1b970:	f003 fbca 	bl	1f108 <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   1b974:	464b      	mov	r3, r9
   1b976:	4642      	mov	r2, r8
   1b978:	4631      	mov	r1, r6
   1b97a:	4620      	mov	r0, r4
}
   1b97c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   1b980:	f7f1 b914 	b.w	cbac <bt_mesh_net_send>
}
   1b984:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b98c <ack_timeout>:
{
   1b98c:	b538      	push	{r3, r4, r5, lr}
   1b98e:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   1b990:	7c80      	ldrb	r0, [r0, #18]
   1b992:	28ff      	cmp	r0, #255	; 0xff
   1b994:	d101      	bne.n	1b99a <ack_timeout+0xe>
		ttl = bt_mesh_default_ttl_get();
   1b996:	f7f3 fb2f 	bl	eff8 <bt_mesh_default_ttl_get>
	to = K_MSEC(150 + (50 * ttl));
   1b99a:	2396      	movs	r3, #150	; 0x96
   1b99c:	2432      	movs	r4, #50	; 0x32
   1b99e:	fb14 3400 	smlabb	r4, r4, r0, r3
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
   1b9a2:	69a8      	ldr	r0, [r5, #24]
   1b9a4:	f7e5 f964 	bl	c70 <__popcountsi2>
   1b9a8:	7c2b      	ldrb	r3, [r5, #16]
   1b9aa:	f003 031f 	and.w	r3, r3, #31
   1b9ae:	1a18      	subs	r0, r3, r0
   1b9b0:	2364      	movs	r3, #100	; 0x64
   1b9b2:	fb00 3303 	mla	r3, r0, r3, r3
   1b9b6:	1918      	adds	r0, r3, r4
}
   1b9b8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   1b9bc:	bfb8      	it	lt
   1b9be:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   1b9c2:	bd38      	pop	{r3, r4, r5, pc}

0001b9c4 <seg_tx_complete>:
{
   1b9c4:	b510      	push	{r4, lr}
   1b9c6:	4604      	mov	r4, r0
   1b9c8:	4608      	mov	r0, r1
	if (tx->cb && tx->cb->end) {
   1b9ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b9cc:	b11b      	cbz	r3, 1b9d6 <seg_tx_complete+0x12>
   1b9ce:	685b      	ldr	r3, [r3, #4]
   1b9d0:	b10b      	cbz	r3, 1b9d6 <seg_tx_complete+0x12>
		tx->cb->end(err, tx->cb_data);
   1b9d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1b9d4:	4798      	blx	r3
	seg_tx_reset(tx);
   1b9d6:	4620      	mov	r0, r4
}
   1b9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seg_tx_reset(tx);
   1b9dc:	f7f1 bcf0 	b.w	d3c0 <seg_tx_reset>

0001b9e0 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   1b9e0:	3838      	subs	r0, #56	; 0x38
   1b9e2:	f7f1 bd2f 	b.w	d444 <seg_tx_send_unacked>

0001b9e6 <bt_mesh_ctl_send>:
{
   1b9e6:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9ea:	4606      	mov	r6, r0
   1b9ec:	468b      	mov	fp, r1
   1b9ee:	4691      	mov	r9, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   1b9f0:	7a81      	ldrb	r1, [r0, #10]
   1b9f2:	2200      	movs	r2, #0
   1b9f4:	2001      	movs	r0, #1
{
   1b9f6:	469a      	mov	sl, r3
   1b9f8:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   1b9fc:	f7f0 fb0c 	bl	c018 <bt_mesh_adv_create>
	if (!buf) {
   1ba00:	4604      	mov	r4, r0
   1ba02:	b1c0      	cbz	r0, 1ba36 <bt_mesh_ctl_send+0x50>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
   1ba04:	f100 0508 	add.w	r5, r0, #8
   1ba08:	4628      	mov	r0, r5
   1ba0a:	2109      	movs	r1, #9
   1ba0c:	f003 fb11 	bl	1f032 <net_buf_simple_reserve>
	net_buf_add_u8(buf, TRANS_CTL_HDR(ctl_op, 0));
   1ba10:	f00b 017f 	and.w	r1, fp, #127	; 0x7f
   1ba14:	4628      	mov	r0, r5
   1ba16:	f003 fb80 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
   1ba1a:	4652      	mov	r2, sl
   1ba1c:	4649      	mov	r1, r9
   1ba1e:	4628      	mov	r0, r5
   1ba20:	f003 fb72 	bl	1f108 <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   1ba24:	4643      	mov	r3, r8
   1ba26:	463a      	mov	r2, r7
   1ba28:	4621      	mov	r1, r4
   1ba2a:	4630      	mov	r0, r6
}
   1ba2c:	b001      	add	sp, #4
   1ba2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   1ba32:	f7f1 b8bb 	b.w	cbac <bt_mesh_net_send>
}
   1ba36:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1ba3a:	b001      	add	sp, #4
   1ba3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ba40 <send_ack>:
{
   1ba40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba42:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
   1ba44:	8b87      	ldrh	r7, [r0, #28]
{
   1ba46:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
	struct bt_mesh_msg_ctx ctx = {
   1ba4a:	f8ad 7018 	strh.w	r7, [sp, #24]
{
   1ba4e:	460e      	mov	r6, r1
	struct bt_mesh_msg_ctx ctx = {
   1ba50:	2100      	movs	r1, #0
   1ba52:	f8cd 101e 	str.w	r1, [sp, #30]
   1ba56:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1ba5a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	struct bt_mesh_net_tx tx = {
   1ba5e:	ab06      	add	r3, sp, #24
{
   1ba60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	struct bt_mesh_msg_ctx ctx = {
   1ba62:	f8ad 701a 	strh.w	r7, [sp, #26]
   1ba66:	f8ad 201c 	strh.w	r2, [sp, #28]
	struct bt_mesh_net_tx tx = {
   1ba6a:	910b      	str	r1, [sp, #44]	; 0x2c
   1ba6c:	9009      	str	r0, [sp, #36]	; 0x24
   1ba6e:	930a      	str	r3, [sp, #40]	; 0x28
   1ba70:	b344      	cbz	r4, 1bac4 <send_ack+0x84>
		.src = obo ? bt_mesh_primary_addr() : src,
   1ba72:	f7f2 fcc3 	bl	e3fc <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   1ba76:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
   1ba7a:	f7f3 fa19 	bl	eeb0 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   1ba7e:	b236      	sxth	r6, r6
   1ba80:	2e00      	cmp	r6, #0
	struct bt_mesh_net_tx tx = {
   1ba82:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   1ba86:	dd1f      	ble.n	1bac8 <send_ack+0x88>
	u16_t seq_zero = *seq_auth & 0x1fff;
   1ba88:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ba8a:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   1ba8c:	03e4      	lsls	r4, r4, #15
   1ba8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
   1ba92:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
   1ba96:	0c2b      	lsrs	r3, r5, #16
	dst[0] = val >> 8;
   1ba98:	0a1a      	lsrs	r2, r3, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   1ba9a:	2100      	movs	r1, #0
   1ba9c:	ba64      	rev16	r4, r4
   1ba9e:	f88d 2012 	strb.w	r2, [sp, #18]
	dst[1] = val;
   1baa2:	f88d 3013 	strb.w	r3, [sp, #19]
	dst[0] = val >> 8;
   1baa6:	ba6d      	rev16	r5, r5
   1baa8:	e9cd 1101 	strd	r1, r1, [sp, #4]
   1baac:	9100      	str	r1, [sp, #0]
   1baae:	2306      	movs	r3, #6
   1bab0:	aa04      	add	r2, sp, #16
   1bab2:	a809      	add	r0, sp, #36	; 0x24
   1bab4:	f8ad 4010 	strh.w	r4, [sp, #16]
   1bab8:	f8ad 5014 	strh.w	r5, [sp, #20]
   1babc:	f7ff ff93 	bl	1b9e6 <bt_mesh_ctl_send>
}
   1bac0:	b00d      	add	sp, #52	; 0x34
   1bac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   1bac4:	4630      	mov	r0, r6
   1bac6:	e7d6      	b.n	1ba76 <send_ack+0x36>
		return 0;
   1bac8:	2000      	movs	r0, #0
   1baca:	e7f9      	b.n	1bac0 <send_ack+0x80>

0001bacc <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   1bacc:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   1bace:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   1bad0:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   1bad2:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1bad6:	700a      	strb	r2, [r1, #0]
   1bad8:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   1bada:	70c8      	strb	r0, [r1, #3]
}
   1badc:	4770      	bx	lr

0001bade <bt_mesh_ccm_encrypt>:
{
   1bade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bae2:	b099      	sub	sp, #100	; 0x64
   1bae4:	4607      	mov	r7, r0
   1bae6:	9300      	str	r3, [sp, #0]
   1bae8:	4690      	mov	r8, r2
	pmsg[0] = 0x01;
   1baea:	2301      	movs	r3, #1
	memcpy(pmsg + 1, nonce, 13);
   1baec:	220d      	movs	r2, #13
   1baee:	f10d 0910 	add.w	r9, sp, #16
   1baf2:	f10d 0011 	add.w	r0, sp, #17
{
   1baf6:	9101      	str	r1, [sp, #4]
	pmsg[0] = 0x01;
   1baf8:	f88d 3010 	strb.w	r3, [sp, #16]
{
   1bafc:	e9dd a522 	ldrd	sl, r5, [sp, #136]	; 0x88
	memcpy(pmsg + 1, nonce, 13);
   1bb00:	f7fe fad2 	bl	1a0a8 <memcpy>
	dst[0] = val >> 8;
   1bb04:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, pmsg, cmic);
   1bb06:	aa08      	add	r2, sp, #32
   1bb08:	4649      	mov	r1, r9
   1bb0a:	4638      	mov	r0, r7
   1bb0c:	f8ad 301e 	strh.w	r3, [sp, #30]
   1bb10:	f002 ff3c 	bl	1e98c <bt_encrypt_be>
	if (err) {
   1bb14:	4604      	mov	r4, r0
   1bb16:	2800      	cmp	r0, #0
   1bb18:	d139      	bne.n	1bb8e <bt_mesh_ccm_encrypt+0xb0>
	if (mic_size == sizeof(u64_t)) {
   1bb1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1bb1c:	2b08      	cmp	r3, #8
   1bb1e:	d13a      	bne.n	1bb96 <bt_mesh_ccm_encrypt+0xb8>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
   1bb20:	2d00      	cmp	r5, #0
   1bb22:	bf14      	ite	ne
   1bb24:	2359      	movne	r3, #89	; 0x59
   1bb26:	2319      	moveq	r3, #25
	memcpy(pmsg + 1, nonce, 13);
   1bb28:	220d      	movs	r2, #13
   1bb2a:	9901      	ldr	r1, [sp, #4]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   1bb2c:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(pmsg + 1, nonce, 13);
   1bb30:	f10d 0011 	add.w	r0, sp, #17
   1bb34:	f7fe fab8 	bl	1a0a8 <memcpy>
   1bb38:	9b00      	ldr	r3, [sp, #0]
	sys_put_be16(msg_len, pmsg + 14);
   1bb3a:	f8bd 6000 	ldrh.w	r6, [sp]
	err = bt_encrypt_be(key, pmsg, Xn);
   1bb3e:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   1bb42:	ba5b      	rev16	r3, r3
   1bb44:	465a      	mov	r2, fp
   1bb46:	4649      	mov	r1, r9
   1bb48:	4638      	mov	r0, r7
   1bb4a:	f8ad 301e 	strh.w	r3, [sp, #30]
   1bb4e:	f002 ff1d 	bl	1e98c <bt_encrypt_be>
	if (err) {
   1bb52:	4604      	mov	r4, r0
   1bb54:	b9d8      	cbnz	r0, 1bb8e <bt_mesh_ccm_encrypt+0xb0>
	if (aad_len) {
   1bb56:	bb1d      	cbnz	r5, 1bba0 <bt_mesh_ccm_encrypt+0xc2>
	blk_cnt = (msg_len + 15) / 16;
   1bb58:	9b00      	ldr	r3, [sp, #0]
   1bb5a:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   1bb5e:	330f      	adds	r3, #15
   1bb60:	091b      	lsrs	r3, r3, #4
		last_blk = 16U;
   1bb62:	f016 060f 	ands.w	r6, r6, #15
	blk_cnt = (msg_len + 15) / 16;
   1bb66:	9302      	str	r3, [sp, #8]
		last_blk = 16U;
   1bb68:	bf08      	it	eq
   1bb6a:	2610      	moveq	r6, #16
	for (j = 0; j < blk_cnt; j++) {
   1bb6c:	f108 0810 	add.w	r8, r8, #16
   1bb70:	f04f 0900 	mov.w	r9, #0
			err = bt_encrypt_be(key, pmsg, Xn);
   1bb74:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
	for (j = 0; j < blk_cnt; j++) {
   1bb78:	9b02      	ldr	r3, [sp, #8]
   1bb7a:	4599      	cmp	r9, r3
   1bb7c:	d15c      	bne.n	1bc38 <bt_mesh_ccm_encrypt+0x15a>
	memcpy(out_msg + msg_len, mic, mic_size);
   1bb7e:	9b00      	ldr	r3, [sp, #0]
   1bb80:	9d24      	ldr	r5, [sp, #144]	; 0x90
   1bb82:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1bb84:	442b      	add	r3, r5
   1bb86:	a910      	add	r1, sp, #64	; 0x40
   1bb88:	4618      	mov	r0, r3
   1bb8a:	f7fe fa8d 	bl	1a0a8 <memcpy>
}
   1bb8e:	4620      	mov	r0, r4
   1bb90:	b019      	add	sp, #100	; 0x64
   1bb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   1bb96:	2d00      	cmp	r5, #0
   1bb98:	bf14      	ite	ne
   1bb9a:	2349      	movne	r3, #73	; 0x49
   1bb9c:	2309      	moveq	r3, #9
   1bb9e:	e7c3      	b.n	1bb28 <bt_mesh_ccm_encrypt+0x4a>
			pmsg[i] = Xn[i] ^ pmsg[i];
   1bba0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   1bba4:	f88d 3010 	strb.w	r3, [sp, #16]
   1bba8:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   1bbac:	406b      	eors	r3, r5
   1bbae:	f88d 3011 	strb.w	r3, [sp, #17]
		while (aad_len > 16) {
   1bbb2:	2202      	movs	r2, #2
		aad_len += sizeof(u16_t);
   1bbb4:	1cab      	adds	r3, r5, #2
		j = 0;
   1bbb6:	4605      	mov	r5, r0
		while (aad_len > 16) {
   1bbb8:	2b10      	cmp	r3, #16
   1bbba:	eb0a 0005 	add.w	r0, sl, r5
   1bbbe:	d81a      	bhi.n	1bbf6 <bt_mesh_ccm_encrypt+0x118>
   1bbc0:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
   1bbc4:	f10d 0c10 	add.w	ip, sp, #16
   1bbc8:	441d      	add	r5, r3
   1bbca:	44aa      	add	sl, r5
   1bbcc:	4661      	mov	r1, ip
   1bbce:	4672      	mov	r2, lr
			pmsg[i] = Xn[i] ^ aad[j];
   1bbd0:	f810 9b01 	ldrb.w	r9, [r0], #1
   1bbd4:	f81e 5b01 	ldrb.w	r5, [lr], #1
		for (i = 0; i < aad_len; i++, j++) {
   1bbd8:	4550      	cmp	r0, sl
			pmsg[i] = Xn[i] ^ aad[j];
   1bbda:	ea85 0509 	eor.w	r5, r5, r9
   1bbde:	f80c 5b01 	strb.w	r5, [ip], #1
		for (i = 0; i < aad_len; i++, j++) {
   1bbe2:	d1f5      	bne.n	1bbd0 <bt_mesh_ccm_encrypt+0xf2>
			pmsg[i] = Xn[i];
   1bbe4:	a814      	add	r0, sp, #80	; 0x50
		for (i = aad_len; i < 16; i++) {
   1bbe6:	2b10      	cmp	r3, #16
   1bbe8:	d11f      	bne.n	1bc2a <bt_mesh_ccm_encrypt+0x14c>
		err = bt_encrypt_be(key, pmsg, Xn);
   1bbea:	4638      	mov	r0, r7
   1bbec:	f002 fece 	bl	1e98c <bt_encrypt_be>
		if (err) {
   1bbf0:	2800      	cmp	r0, #0
   1bbf2:	d0b1      	beq.n	1bb58 <bt_mesh_ccm_encrypt+0x7a>
   1bbf4:	e017      	b.n	1bc26 <bt_mesh_ccm_encrypt+0x148>
		while (aad_len > 16) {
   1bbf6:	4613      	mov	r3, r2
				pmsg[i] = Xn[i] ^ aad[j];
   1bbf8:	f813 c00b 	ldrb.w	ip, [r3, fp]
   1bbfc:	f810 1b01 	ldrb.w	r1, [r0], #1
   1bc00:	ea81 010c 	eor.w	r1, r1, ip
   1bc04:	f803 1009 	strb.w	r1, [r3, r9]
				i++, j++;
   1bc08:	3301      	adds	r3, #1
			} while (i < 16);
   1bc0a:	2b10      	cmp	r3, #16
   1bc0c:	d1f4      	bne.n	1bbf8 <bt_mesh_ccm_encrypt+0x11a>
   1bc0e:	f1c2 0210 	rsb	r2, r2, #16
   1bc12:	4415      	add	r5, r2
			err = bt_encrypt_be(key, pmsg, Xn);
   1bc14:	4649      	mov	r1, r9
   1bc16:	465a      	mov	r2, fp
   1bc18:	4638      	mov	r0, r7
   1bc1a:	f002 feb7 	bl	1e98c <bt_encrypt_be>
			aad_len -= 16;
   1bc1e:	2302      	movs	r3, #2
			i = 0;
   1bc20:	2200      	movs	r2, #0
			if (err) {
   1bc22:	2800      	cmp	r0, #0
   1bc24:	d0c8      	beq.n	1bbb8 <bt_mesh_ccm_encrypt+0xda>
			err = bt_encrypt_be(key, pmsg, cmsg);
   1bc26:	4604      	mov	r4, r0
   1bc28:	e7b1      	b.n	1bb8e <bt_mesh_ccm_encrypt+0xb0>
			pmsg[i] = Xn[i];
   1bc2a:	f10d 0c10 	add.w	ip, sp, #16
   1bc2e:	5c1d      	ldrb	r5, [r3, r0]
   1bc30:	f80c 5003 	strb.w	r5, [ip, r3]
		for (i = aad_len; i < 16; i++) {
   1bc34:	3301      	adds	r3, #1
   1bc36:	e7d6      	b.n	1bbe6 <bt_mesh_ccm_encrypt+0x108>
		if (j + 1 == blk_cnt) {
   1bc38:	9b02      	ldr	r3, [sp, #8]
   1bc3a:	f109 0901 	add.w	r9, r9, #1
   1bc3e:	454b      	cmp	r3, r9
   1bc40:	f1a8 0510 	sub.w	r5, r8, #16
   1bc44:	d155      	bne.n	1bcf2 <bt_mesh_ccm_encrypt+0x214>
   1bc46:	4629      	mov	r1, r5
			for (i = 0; i < last_blk; i++) {
   1bc48:	2300      	movs	r3, #0
   1bc4a:	42b3      	cmp	r3, r6
   1bc4c:	d342      	bcc.n	1bcd4 <bt_mesh_ccm_encrypt+0x1f6>
   1bc4e:	4633      	mov	r3, r6
			for (i = last_blk; i < 16; i++) {
   1bc50:	2b10      	cmp	r3, #16
   1bc52:	d148      	bne.n	1bce6 <bt_mesh_ccm_encrypt+0x208>
			err = bt_encrypt_be(key, pmsg, Xn);
   1bc54:	4652      	mov	r2, sl
   1bc56:	a904      	add	r1, sp, #16
   1bc58:	4638      	mov	r0, r7
   1bc5a:	9303      	str	r3, [sp, #12]
   1bc5c:	f002 fe96 	bl	1e98c <bt_encrypt_be>
			if (err) {
   1bc60:	2800      	cmp	r0, #0
   1bc62:	d1e0      	bne.n	1bc26 <bt_mesh_ccm_encrypt+0x148>
   1bc64:	9b03      	ldr	r3, [sp, #12]
   1bc66:	f10d 0c20 	add.w	ip, sp, #32
   1bc6a:	4650      	mov	r0, sl
   1bc6c:	a910      	add	r1, sp, #64	; 0x40
				mic[i] = cmic[i] ^ Xn[i];
   1bc6e:	f81c 2b01 	ldrb.w	r2, [ip], #1
   1bc72:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < sizeof(mic); i++) {
   1bc76:	3b01      	subs	r3, #1
				mic[i] = cmic[i] ^ Xn[i];
   1bc78:	ea82 020e 	eor.w	r2, r2, lr
   1bc7c:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < sizeof(mic); i++) {
   1bc80:	d1f5      	bne.n	1bc6e <bt_mesh_ccm_encrypt+0x190>
   1bc82:	9303      	str	r3, [sp, #12]
			memcpy(pmsg + 1, nonce, 13);
   1bc84:	220d      	movs	r2, #13
			pmsg[0] = 0x01;
   1bc86:	f04f 0301 	mov.w	r3, #1
			memcpy(pmsg + 1, nonce, 13);
   1bc8a:	9901      	ldr	r1, [sp, #4]
			pmsg[0] = 0x01;
   1bc8c:	f88d 3010 	strb.w	r3, [sp, #16]
			memcpy(pmsg + 1, nonce, 13);
   1bc90:	f10d 0011 	add.w	r0, sp, #17
   1bc94:	f7fe fa08 	bl	1a0a8 <memcpy>
   1bc98:	fa99 f299 	rev16.w	r2, r9
   1bc9c:	f8ad 201e 	strh.w	r2, [sp, #30]
			err = bt_encrypt_be(key, pmsg, cmsg);
   1bca0:	a904      	add	r1, sp, #16
   1bca2:	aa0c      	add	r2, sp, #48	; 0x30
   1bca4:	4638      	mov	r0, r7
   1bca6:	f002 fe71 	bl	1e98c <bt_encrypt_be>
			if (err) {
   1bcaa:	2800      	cmp	r0, #0
   1bcac:	d1bb      	bne.n	1bc26 <bt_mesh_ccm_encrypt+0x148>
   1bcae:	9b03      	ldr	r3, [sp, #12]
   1bcb0:	aa0c      	add	r2, sp, #48	; 0x30
   1bcb2:	4658      	mov	r0, fp
					msg[(j * 16) + i] ^ cmsg[i];
   1bcb4:	f815 1b01 	ldrb.w	r1, [r5], #1
   1bcb8:	f812 cb01 	ldrb.w	ip, [r2], #1
			for (i = 0; i < last_blk; i++) {
   1bcbc:	3301      	adds	r3, #1
				out_msg[(j * 16) + i] =
   1bcbe:	ea81 010c 	eor.w	r1, r1, ip
			for (i = 0; i < last_blk; i++) {
   1bcc2:	429e      	cmp	r6, r3
				out_msg[(j * 16) + i] =
   1bcc4:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < last_blk; i++) {
   1bcc8:	d8f4      	bhi.n	1bcb4 <bt_mesh_ccm_encrypt+0x1d6>
   1bcca:	f10b 0b10 	add.w	fp, fp, #16
   1bcce:	f108 0810 	add.w	r8, r8, #16
   1bcd2:	e751      	b.n	1bb78 <bt_mesh_ccm_encrypt+0x9a>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
   1bcd4:	f813 000a 	ldrb.w	r0, [r3, sl]
   1bcd8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1bcdc:	4042      	eors	r2, r0
   1bcde:	a804      	add	r0, sp, #16
   1bce0:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < last_blk; i++) {
   1bce2:	3301      	adds	r3, #1
   1bce4:	e7b1      	b.n	1bc4a <bt_mesh_ccm_encrypt+0x16c>
				pmsg[i] = Xn[i] ^ 0x00;
   1bce6:	a904      	add	r1, sp, #16
   1bce8:	f81a 2003 	ldrb.w	r2, [sl, r3]
   1bcec:	54ca      	strb	r2, [r1, r3]
			for (i = last_blk; i < 16; i++) {
   1bcee:	3301      	adds	r3, #1
   1bcf0:	e7ae      	b.n	1bc50 <bt_mesh_ccm_encrypt+0x172>
   1bcf2:	a914      	add	r1, sp, #80	; 0x50
   1bcf4:	a804      	add	r0, sp, #16
		if (j + 1 == blk_cnt) {
   1bcf6:	462b      	mov	r3, r5
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
   1bcf8:	f813 cb01 	ldrb.w	ip, [r3], #1
   1bcfc:	f811 2b01 	ldrb.w	r2, [r1], #1
			for (i = 0; i < 16; i++) {
   1bd00:	4543      	cmp	r3, r8
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
   1bd02:	ea82 020c 	eor.w	r2, r2, ip
   1bd06:	f800 2b01 	strb.w	r2, [r0], #1
			for (i = 0; i < 16; i++) {
   1bd0a:	d1f5      	bne.n	1bcf8 <bt_mesh_ccm_encrypt+0x21a>
			err = bt_encrypt_be(key, pmsg, Xn);
   1bd0c:	4652      	mov	r2, sl
   1bd0e:	a904      	add	r1, sp, #16
   1bd10:	4638      	mov	r0, r7
   1bd12:	f002 fe3b 	bl	1e98c <bt_encrypt_be>
			if (err) {
   1bd16:	2800      	cmp	r0, #0
   1bd18:	d185      	bne.n	1bc26 <bt_mesh_ccm_encrypt+0x148>
			pmsg[0] = 0x01;
   1bd1a:	f04f 0301 	mov.w	r3, #1
			memcpy(pmsg + 1, nonce, 13);
   1bd1e:	220d      	movs	r2, #13
   1bd20:	9901      	ldr	r1, [sp, #4]
			pmsg[0] = 0x01;
   1bd22:	f88d 3010 	strb.w	r3, [sp, #16]
			memcpy(pmsg + 1, nonce, 13);
   1bd26:	f10d 0011 	add.w	r0, sp, #17
   1bd2a:	f7fe f9bd 	bl	1a0a8 <memcpy>
   1bd2e:	fa99 f399 	rev16.w	r3, r9
			err = bt_encrypt_be(key, pmsg, cmsg);
   1bd32:	aa0c      	add	r2, sp, #48	; 0x30
   1bd34:	a904      	add	r1, sp, #16
   1bd36:	4638      	mov	r0, r7
   1bd38:	f8ad 301e 	strh.w	r3, [sp, #30]
   1bd3c:	f002 fe26 	bl	1e98c <bt_encrypt_be>
			if (err) {
   1bd40:	2800      	cmp	r0, #0
   1bd42:	f47f af70 	bne.w	1bc26 <bt_mesh_ccm_encrypt+0x148>
   1bd46:	ab0c      	add	r3, sp, #48	; 0x30
   1bd48:	4659      	mov	r1, fp
					msg[(j * 16) + i] ^ cmsg[i];
   1bd4a:	f815 2b01 	ldrb.w	r2, [r5], #1
   1bd4e:	f813 0b01 	ldrb.w	r0, [r3], #1
			for (i = 0; i < 16; i++) {
   1bd52:	4545      	cmp	r5, r8
				out_msg[(j * 16) + i] =
   1bd54:	ea82 0200 	eor.w	r2, r2, r0
   1bd58:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < 16; i++) {
   1bd5c:	d1f5      	bne.n	1bd4a <bt_mesh_ccm_encrypt+0x26c>
   1bd5e:	e7b4      	b.n	1bcca <bt_mesh_ccm_encrypt+0x1ec>

0001bd60 <bt_mesh_ccm_decrypt>:
{
   1bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd64:	b09d      	sub	sp, #116	; 0x74
   1bd66:	4605      	mov	r5, r0
   1bd68:	e9cd 1202 	strd	r1, r2, [sp, #8]
   1bd6c:	e9dd a626 	ldrd	sl, r6, [sp, #152]	; 0x98
	if (msg_len < 1 || aad_len >= 0xff00) {
   1bd70:	461f      	mov	r7, r3
   1bd72:	2b00      	cmp	r3, #0
   1bd74:	f000 813c 	beq.w	1bff0 <bt_mesh_ccm_decrypt+0x290>
	pmsg[0] = 0x01;
   1bd78:	2301      	movs	r3, #1
	memcpy(pmsg + 1, nonce, 13);
   1bd7a:	220d      	movs	r2, #13
   1bd7c:	f10d 0920 	add.w	r9, sp, #32
   1bd80:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	pmsg[0] = 0x01;
   1bd84:	f88d 3020 	strb.w	r3, [sp, #32]
	memcpy(pmsg + 1, nonce, 13);
   1bd88:	f7fe f98e 	bl	1a0a8 <memcpy>
   1bd8c:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, pmsg, cmic);
   1bd8e:	aa0c      	add	r2, sp, #48	; 0x30
   1bd90:	4649      	mov	r1, r9
   1bd92:	4628      	mov	r0, r5
   1bd94:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1bd98:	f002 fdf8 	bl	1e98c <bt_encrypt_be>
	if (err) {
   1bd9c:	2800      	cmp	r0, #0
   1bd9e:	f040 8086 	bne.w	1beae <bt_mesh_ccm_decrypt+0x14e>
	if (mic_size == sizeof(u64_t)) {
   1bda2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1bda4:	2b08      	cmp	r3, #8
   1bda6:	d13a      	bne.n	1be1e <bt_mesh_ccm_decrypt+0xbe>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
   1bda8:	2e00      	cmp	r6, #0
   1bdaa:	bf14      	ite	ne
   1bdac:	2359      	movne	r3, #89	; 0x59
   1bdae:	2319      	moveq	r3, #25
	memcpy(pmsg + 1, nonce, 13);
   1bdb0:	220d      	movs	r2, #13
   1bdb2:	9902      	ldr	r1, [sp, #8]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   1bdb4:	f88d 3020 	strb.w	r3, [sp, #32]
	memcpy(pmsg + 1, nonce, 13);
   1bdb8:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	err = bt_encrypt_be(key, pmsg, Xn);
   1bdbc:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
	memcpy(pmsg + 1, nonce, 13);
   1bdc0:	f7fe f972 	bl	1a0a8 <memcpy>
   1bdc4:	ba7b      	rev16	r3, r7
	err = bt_encrypt_be(key, pmsg, Xn);
   1bdc6:	465a      	mov	r2, fp
   1bdc8:	4649      	mov	r1, r9
   1bdca:	4628      	mov	r0, r5
	sys_put_be16(msg_len, pmsg + 14);
   1bdcc:	b2bc      	uxth	r4, r7
   1bdce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	err = bt_encrypt_be(key, pmsg, Xn);
   1bdd2:	f002 fddb 	bl	1e98c <bt_encrypt_be>
	if (err) {
   1bdd6:	2800      	cmp	r0, #0
   1bdd8:	d169      	bne.n	1beae <bt_mesh_ccm_decrypt+0x14e>
	if (aad_len) {
   1bdda:	bb2e      	cbnz	r6, 1be28 <bt_mesh_ccm_decrypt+0xc8>
	blk_cnt = (msg_len + 15) / 16;
   1bddc:	f107 030f 	add.w	r3, r7, #15
   1bde0:	9a03      	ldr	r2, [sp, #12]
   1bde2:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
		last_blk = 16U;
   1bde6:	f014 040f 	ands.w	r4, r4, #15
   1bdea:	f3c3 130f 	ubfx	r3, r3, #4, #16
   1bdee:	bf08      	it	eq
   1bdf0:	2410      	moveq	r4, #16
	for (j = 0; j < blk_cnt; j++) {
   1bdf2:	f102 0910 	add.w	r9, r2, #16
   1bdf6:	f04f 0800 	mov.w	r8, #0
   1bdfa:	9300      	str	r3, [sp, #0]
   1bdfc:	f10d 0a20 	add.w	sl, sp, #32
   1be00:	9b00      	ldr	r3, [sp, #0]
   1be02:	4543      	cmp	r3, r8
   1be04:	d85a      	bhi.n	1bebc <bt_mesh_ccm_decrypt+0x15c>
	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   1be06:	9b03      	ldr	r3, [sp, #12]
   1be08:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1be0a:	443b      	add	r3, r7
   1be0c:	4619      	mov	r1, r3
   1be0e:	a818      	add	r0, sp, #96	; 0x60
   1be10:	f7fe f93a 	bl	1a088 <memcmp>
		return -EBADMSG;
   1be14:	2800      	cmp	r0, #0
   1be16:	bf18      	it	ne
   1be18:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
   1be1c:	e047      	b.n	1beae <bt_mesh_ccm_decrypt+0x14e>
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
   1be1e:	2e00      	cmp	r6, #0
   1be20:	bf14      	ite	ne
   1be22:	2349      	movne	r3, #73	; 0x49
   1be24:	2309      	moveq	r3, #9
   1be26:	e7c3      	b.n	1bdb0 <bt_mesh_ccm_decrypt+0x50>
			pmsg[i] = Xn[i] ^ pmsg[i];
   1be28:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   1be2c:	f88d 3020 	strb.w	r3, [sp, #32]
   1be30:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   1be34:	4073      	eors	r3, r6
		aad_len += sizeof(u16_t);
   1be36:	1cb1      	adds	r1, r6, #2
			pmsg[i] = Xn[i] ^ pmsg[i];
   1be38:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		j = 0;
   1be3c:	4680      	mov	r8, r0
		while (aad_len > 16) {
   1be3e:	2202      	movs	r2, #2
				pmsg[i] = Xn[i] ^ aad[j];
   1be40:	464e      	mov	r6, r9
		while (aad_len > 16) {
   1be42:	2910      	cmp	r1, #16
   1be44:	eb0a 0308 	add.w	r3, sl, r8
   1be48:	d81a      	bhi.n	1be80 <bt_mesh_ccm_decrypt+0x120>
   1be4a:	ae14      	add	r6, sp, #80	; 0x50
   1be4c:	4488      	add	r8, r1
   1be4e:	f10d 0c20 	add.w	ip, sp, #32
   1be52:	44c2      	add	sl, r8
   1be54:	4632      	mov	r2, r6
			pmsg[i] = Xn[i] ^ aad[j];
   1be56:	f813 eb01 	ldrb.w	lr, [r3], #1
   1be5a:	f816 0b01 	ldrb.w	r0, [r6], #1
		for (i = 0; i < aad_len; i++, j++) {
   1be5e:	4553      	cmp	r3, sl
			pmsg[i] = Xn[i] ^ aad[j];
   1be60:	ea80 000e 	eor.w	r0, r0, lr
   1be64:	f80c 0b01 	strb.w	r0, [ip], #1
		for (i = 0; i < aad_len; i++, j++) {
   1be68:	d1f5      	bne.n	1be56 <bt_mesh_ccm_decrypt+0xf6>
			pmsg[i] = Xn[i];
   1be6a:	ab08      	add	r3, sp, #32
   1be6c:	a814      	add	r0, sp, #80	; 0x50
		for (i = aad_len; i < 16; i++) {
   1be6e:	2910      	cmp	r1, #16
   1be70:	d120      	bne.n	1beb4 <bt_mesh_ccm_decrypt+0x154>
		err = bt_encrypt_be(key, pmsg, Xn);
   1be72:	4649      	mov	r1, r9
   1be74:	4628      	mov	r0, r5
   1be76:	f002 fd89 	bl	1e98c <bt_encrypt_be>
		if (err) {
   1be7a:	2800      	cmp	r0, #0
   1be7c:	d0ae      	beq.n	1bddc <bt_mesh_ccm_decrypt+0x7c>
   1be7e:	e016      	b.n	1beae <bt_mesh_ccm_decrypt+0x14e>
		while (aad_len > 16) {
   1be80:	4611      	mov	r1, r2
				pmsg[i] = Xn[i] ^ aad[j];
   1be82:	f811 c00b 	ldrb.w	ip, [r1, fp]
   1be86:	f813 0b01 	ldrb.w	r0, [r3], #1
   1be8a:	ea80 000c 	eor.w	r0, r0, ip
   1be8e:	5588      	strb	r0, [r1, r6]
				i++, j++;
   1be90:	3101      	adds	r1, #1
			} while (i < 16);
   1be92:	2910      	cmp	r1, #16
   1be94:	d1f5      	bne.n	1be82 <bt_mesh_ccm_decrypt+0x122>
   1be96:	f1c2 0210 	rsb	r2, r2, #16
			err = bt_encrypt_be(key, pmsg, Xn);
   1be9a:	4631      	mov	r1, r6
   1be9c:	4490      	add	r8, r2
   1be9e:	4628      	mov	r0, r5
   1bea0:	465a      	mov	r2, fp
   1bea2:	f002 fd73 	bl	1e98c <bt_encrypt_be>
			aad_len -= 16;
   1bea6:	2102      	movs	r1, #2
			i = 0;
   1bea8:	2200      	movs	r2, #0
			if (err) {
   1beaa:	2800      	cmp	r0, #0
   1beac:	d0c9      	beq.n	1be42 <bt_mesh_ccm_decrypt+0xe2>
}
   1beae:	b01d      	add	sp, #116	; 0x74
   1beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pmsg[i] = Xn[i];
   1beb4:	5c0e      	ldrb	r6, [r1, r0]
   1beb6:	54ce      	strb	r6, [r1, r3]
		for (i = aad_len; i < 16; i++) {
   1beb8:	3101      	adds	r1, #1
   1beba:	e7d8      	b.n	1be6e <bt_mesh_ccm_decrypt+0x10e>
		if (j + 1 == blk_cnt) {
   1bebc:	9b00      	ldr	r3, [sp, #0]
			memcpy(pmsg + 1, nonce, 13);
   1bebe:	9902      	ldr	r1, [sp, #8]
		if (j + 1 == blk_cnt) {
   1bec0:	f108 0801 	add.w	r8, r8, #1
   1bec4:	4543      	cmp	r3, r8
			pmsg[0] = 0x01;
   1bec6:	f04f 0301 	mov.w	r3, #1
   1beca:	f88d 3020 	strb.w	r3, [sp, #32]
			memcpy(pmsg + 1, nonce, 13);
   1bece:	f04f 020d 	mov.w	r2, #13
   1bed2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		if (j + 1 == blk_cnt) {
   1bed6:	d153      	bne.n	1bf80 <bt_mesh_ccm_decrypt+0x220>
			memcpy(pmsg + 1, nonce, 13);
   1bed8:	f7fe f8e6 	bl	1a0a8 <memcpy>
   1bedc:	9b00      	ldr	r3, [sp, #0]
			err = bt_encrypt_be(key, pmsg, cmsg);
   1bede:	ae10      	add	r6, sp, #64	; 0x40
   1bee0:	ba5b      	rev16	r3, r3
   1bee2:	4632      	mov	r2, r6
   1bee4:	4651      	mov	r1, sl
   1bee6:	4628      	mov	r0, r5
   1bee8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1beec:	f002 fd4e 	bl	1e98c <bt_encrypt_be>
			if (err) {
   1bef0:	2800      	cmp	r0, #0
   1bef2:	d1dc      	bne.n	1beae <bt_mesh_ccm_decrypt+0x14e>
   1bef4:	f1a9 0210 	sub.w	r2, r9, #16
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   1bef8:	4631      	mov	r1, r6
			for (i = 0; i < last_blk; i++) {
   1befa:	4284      	cmp	r4, r0
   1befc:	4626      	mov	r6, r4
   1befe:	d832      	bhi.n	1bf66 <bt_mesh_ccm_decrypt+0x206>
			memcpy(out_msg + (j * 16), msg, last_blk);
   1bf00:	4622      	mov	r2, r4
   1bf02:	a904      	add	r1, sp, #16
   1bf04:	4658      	mov	r0, fp
   1bf06:	f7fe f8cf 	bl	1a0a8 <memcpy>
			for (i = 0; i < last_blk; i++) {
   1bf0a:	ab14      	add	r3, sp, #80	; 0x50
   1bf0c:	9301      	str	r3, [sp, #4]
			memcpy(out_msg + (j * 16), msg, last_blk);
   1bf0e:	f8dd c004 	ldr.w	ip, [sp, #4]
   1bf12:	ab04      	add	r3, sp, #16
   1bf14:	a808      	add	r0, sp, #32
			for (i = 0; i < last_blk; i++) {
   1bf16:	2200      	movs	r2, #0
				pmsg[i] = Xn[i] ^ msg[i];
   1bf18:	f81c 1b01 	ldrb.w	r1, [ip], #1
   1bf1c:	f813 eb01 	ldrb.w	lr, [r3], #1
			for (i = 0; i < last_blk; i++) {
   1bf20:	3201      	adds	r2, #1
				pmsg[i] = Xn[i] ^ msg[i];
   1bf22:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   1bf26:	4294      	cmp	r4, r2
				pmsg[i] = Xn[i] ^ msg[i];
   1bf28:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < last_blk; i++) {
   1bf2c:	d8f4      	bhi.n	1bf18 <bt_mesh_ccm_decrypt+0x1b8>
   1bf2e:	aa14      	add	r2, sp, #80	; 0x50
			for (i = last_blk; i < 16; i++) {
   1bf30:	2e10      	cmp	r6, #16
   1bf32:	d120      	bne.n	1bf76 <bt_mesh_ccm_decrypt+0x216>
			err = bt_encrypt_be(key, pmsg, Xn);
   1bf34:	4651      	mov	r1, sl
   1bf36:	4628      	mov	r0, r5
   1bf38:	f002 fd28 	bl	1e98c <bt_encrypt_be>
			if (err) {
   1bf3c:	2800      	cmp	r0, #0
   1bf3e:	d1b6      	bne.n	1beae <bt_mesh_ccm_decrypt+0x14e>
   1bf40:	a90c      	add	r1, sp, #48	; 0x30
   1bf42:	aa18      	add	r2, sp, #96	; 0x60
				mic[i] = cmic[i] ^ Xn[i];
   1bf44:	9b01      	ldr	r3, [sp, #4]
   1bf46:	f811 cb01 	ldrb.w	ip, [r1], #1
   1bf4a:	f813 0b01 	ldrb.w	r0, [r3], #1
   1bf4e:	9301      	str	r3, [sp, #4]
			for (i = 0; i < sizeof(mic); i++) {
   1bf50:	3e01      	subs	r6, #1
				mic[i] = cmic[i] ^ Xn[i];
   1bf52:	ea8c 0300 	eor.w	r3, ip, r0
   1bf56:	f802 3b01 	strb.w	r3, [r2], #1
			for (i = 0; i < sizeof(mic); i++) {
   1bf5a:	d1f3      	bne.n	1bf44 <bt_mesh_ccm_decrypt+0x1e4>
   1bf5c:	f10b 0b10 	add.w	fp, fp, #16
   1bf60:	f109 0910 	add.w	r9, r9, #16
   1bf64:	e74c      	b.n	1be00 <bt_mesh_ccm_decrypt+0xa0>
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   1bf66:	5c46      	ldrb	r6, [r0, r1]
   1bf68:	f812 3b01 	ldrb.w	r3, [r2], #1
   1bf6c:	4073      	eors	r3, r6
   1bf6e:	ae04      	add	r6, sp, #16
   1bf70:	5433      	strb	r3, [r6, r0]
			for (i = 0; i < last_blk; i++) {
   1bf72:	3001      	adds	r0, #1
   1bf74:	e7c1      	b.n	1befa <bt_mesh_ccm_decrypt+0x19a>
				pmsg[i] = Xn[i] ^ 0x00;
   1bf76:	5d93      	ldrb	r3, [r2, r6]
   1bf78:	f80a 3006 	strb.w	r3, [sl, r6]
			for (i = last_blk; i < 16; i++) {
   1bf7c:	3601      	adds	r6, #1
   1bf7e:	e7d7      	b.n	1bf30 <bt_mesh_ccm_decrypt+0x1d0>
			memcpy(pmsg + 1, nonce, 13);
   1bf80:	f7fe f892 	bl	1a0a8 <memcpy>
   1bf84:	fa98 f398 	rev16.w	r3, r8
			err = bt_encrypt_be(key, pmsg, cmsg);
   1bf88:	aa10      	add	r2, sp, #64	; 0x40
   1bf8a:	4651      	mov	r1, sl
   1bf8c:	4628      	mov	r0, r5
   1bf8e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1bf92:	f002 fcfb 	bl	1e98c <bt_encrypt_be>
			if (err) {
   1bf96:	2800      	cmp	r0, #0
   1bf98:	d189      	bne.n	1beae <bt_mesh_ccm_decrypt+0x14e>
   1bf9a:	ae04      	add	r6, sp, #16
   1bf9c:	f1a9 0210 	sub.w	r2, r9, #16
   1bfa0:	ab10      	add	r3, sp, #64	; 0x40
   1bfa2:	4630      	mov	r0, r6
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   1bfa4:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bfa8:	f813 cb01 	ldrb.w	ip, [r3], #1
			for (i = 0; i < 16; i++) {
   1bfac:	4591      	cmp	r9, r2
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
   1bfae:	ea81 010c 	eor.w	r1, r1, ip
   1bfb2:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < 16; i++) {
   1bfb6:	d1f5      	bne.n	1bfa4 <bt_mesh_ccm_decrypt+0x244>
			memcpy(out_msg + (j * 16), msg, 16);
   1bfb8:	2210      	movs	r2, #16
   1bfba:	eb0d 0102 	add.w	r1, sp, r2
   1bfbe:	4658      	mov	r0, fp
   1bfc0:	f7fe f872 	bl	1a0a8 <memcpy>
			for (i = 0; i < 16; i++) {
   1bfc4:	aa08      	add	r2, sp, #32
   1bfc6:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
			memcpy(out_msg + (j * 16), msg, 16);
   1bfca:	2310      	movs	r3, #16
   1bfcc:	4611      	mov	r1, r2
				pmsg[i] = Xn[i] ^ msg[i];
   1bfce:	f81c 0b01 	ldrb.w	r0, [ip], #1
   1bfd2:	f816 eb01 	ldrb.w	lr, [r6], #1
			for (i = 0; i < 16; i++) {
   1bfd6:	3b01      	subs	r3, #1
				pmsg[i] = Xn[i] ^ msg[i];
   1bfd8:	ea80 000e 	eor.w	r0, r0, lr
   1bfdc:	f802 0b01 	strb.w	r0, [r2], #1
			for (i = 0; i < 16; i++) {
   1bfe0:	d1f5      	bne.n	1bfce <bt_mesh_ccm_decrypt+0x26e>
			err = bt_encrypt_be(key, pmsg, Xn);
   1bfe2:	aa14      	add	r2, sp, #80	; 0x50
   1bfe4:	4628      	mov	r0, r5
   1bfe6:	f002 fcd1 	bl	1e98c <bt_encrypt_be>
			if (err) {
   1bfea:	2800      	cmp	r0, #0
   1bfec:	d0b6      	beq.n	1bf5c <bt_mesh_ccm_decrypt+0x1fc>
   1bfee:	e75e      	b.n	1beae <bt_mesh_ccm_decrypt+0x14e>
		return -EINVAL;
   1bff0:	f06f 0015 	mvn.w	r0, #21
   1bff4:	e75b      	b.n	1beae <bt_mesh_ccm_decrypt+0x14e>

0001bff6 <bt_mesh_aes_cmac>:
{
   1bff6:	b570      	push	{r4, r5, r6, lr}
   1bff8:	b0c2      	sub	sp, #264	; 0x108
   1bffa:	460d      	mov	r5, r1
   1bffc:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1bffe:	4601      	mov	r1, r0
   1c000:	aa16      	add	r2, sp, #88	; 0x58
   1c002:	4668      	mov	r0, sp
{
   1c004:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1c006:	f7fd f8c6 	bl	19196 <tc_cmac_setup>
   1c00a:	b130      	cbz	r0, 1c01a <bt_mesh_aes_cmac+0x24>
   1c00c:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   1c00e:	b944      	cbnz	r4, 1c022 <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   1c010:	4669      	mov	r1, sp
   1c012:	4630      	mov	r0, r6
   1c014:	f7fd f955 	bl	192c2 <tc_cmac_final>
   1c018:	b968      	cbnz	r0, 1c036 <bt_mesh_aes_cmac+0x40>
		return -EIO;
   1c01a:	f06f 0004 	mvn.w	r0, #4
}
   1c01e:	b042      	add	sp, #264	; 0x108
   1c020:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   1c022:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   1c026:	4668      	mov	r0, sp
   1c028:	f7fd f8e0 	bl	191ec <tc_cmac_update>
   1c02c:	3508      	adds	r5, #8
   1c02e:	2800      	cmp	r0, #0
   1c030:	d0f3      	beq.n	1c01a <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   1c032:	3c01      	subs	r4, #1
   1c034:	e7eb      	b.n	1c00e <bt_mesh_aes_cmac+0x18>
	return 0;
   1c036:	4620      	mov	r0, r4
   1c038:	e7f1      	b.n	1c01e <bt_mesh_aes_cmac+0x28>

0001c03a <bt_mesh_aes_cmac_one>:
{
   1c03a:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   1c03c:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   1c040:	2201      	movs	r2, #1
   1c042:	4669      	mov	r1, sp
   1c044:	f7ff ffd7 	bl	1bff6 <bt_mesh_aes_cmac>
}
   1c048:	b003      	add	sp, #12
   1c04a:	f85d fb04 	ldr.w	pc, [sp], #4

0001c04e <bt_mesh_s1>:
{
   1c04e:	b530      	push	{r4, r5, lr}
   1c050:	b085      	sub	sp, #20
   1c052:	4604      	mov	r4, r0
   1c054:	460d      	mov	r5, r1
	const u8_t zero[16] = { 0 };
   1c056:	2210      	movs	r2, #16
   1c058:	2100      	movs	r1, #0
   1c05a:	4668      	mov	r0, sp
   1c05c:	f7fe f84e 	bl	1a0fc <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   1c060:	4620      	mov	r0, r4
   1c062:	f7fd fffe 	bl	1a062 <strlen>
   1c066:	462b      	mov	r3, r5
   1c068:	4602      	mov	r2, r0
   1c06a:	4621      	mov	r1, r4
   1c06c:	4668      	mov	r0, sp
   1c06e:	f7ff ffe4 	bl	1c03a <bt_mesh_aes_cmac_one>
}
   1c072:	3000      	adds	r0, #0
   1c074:	bf18      	it	ne
   1c076:	2001      	movne	r0, #1
   1c078:	b005      	add	sp, #20
   1c07a:	bd30      	pop	{r4, r5, pc}

0001c07c <bt_mesh_k1>:
{
   1c07c:	b570      	push	{r4, r5, r6, lr}
   1c07e:	9d04      	ldr	r5, [sp, #16]
   1c080:	4616      	mov	r6, r2
   1c082:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   1c084:	460a      	mov	r2, r1
   1c086:	462b      	mov	r3, r5
   1c088:	4601      	mov	r1, r0
   1c08a:	4630      	mov	r0, r6
   1c08c:	f7ff ffd5 	bl	1c03a <bt_mesh_aes_cmac_one>
	if (err < 0) {
   1c090:	2800      	cmp	r0, #0
   1c092:	db0a      	blt.n	1c0aa <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   1c094:	4620      	mov	r0, r4
   1c096:	f7fd ffe4 	bl	1a062 <strlen>
   1c09a:	462b      	mov	r3, r5
   1c09c:	4602      	mov	r2, r0
   1c09e:	4621      	mov	r1, r4
   1c0a0:	4628      	mov	r0, r5
}
   1c0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   1c0a6:	f7ff bfc8 	b.w	1c03a <bt_mesh_aes_cmac_one>
}
   1c0aa:	bd70      	pop	{r4, r5, r6, pc}

0001c0ac <bt_mesh_net_obfuscate>:
{
   1c0ac:	b570      	push	{r4, r5, r6, lr}
   1c0ae:	b088      	sub	sp, #32
   1c0b0:	4604      	mov	r4, r0
   1c0b2:	460e      	mov	r6, r1
   1c0b4:	4615      	mov	r5, r2
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   1c0b6:	2100      	movs	r1, #0
   1c0b8:	2210      	movs	r2, #16
   1c0ba:	4668      	mov	r0, sp
   1c0bc:	f7fe f81e 	bl	1a0fc <memset>
	sys_put_be32(iv_index, &priv_rand[5]);
   1c0c0:	f10d 0105 	add.w	r1, sp, #5
   1c0c4:	4630      	mov	r0, r6
   1c0c6:	f7ff fd01 	bl	1bacc <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
   1c0ca:	2207      	movs	r2, #7
   1c0cc:	18a1      	adds	r1, r4, r2
   1c0ce:	f10d 0009 	add.w	r0, sp, #9
   1c0d2:	f7fd ffe9 	bl	1a0a8 <memcpy>
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   1c0d6:	aa04      	add	r2, sp, #16
   1c0d8:	4669      	mov	r1, sp
   1c0da:	4628      	mov	r0, r5
   1c0dc:	f002 fc56 	bl	1e98c <bt_encrypt_be>
	if (err) {
   1c0e0:	b958      	cbnz	r0, 1c0fa <bt_mesh_net_obfuscate+0x4e>
   1c0e2:	4623      	mov	r3, r4
   1c0e4:	aa04      	add	r2, sp, #16
   1c0e6:	3406      	adds	r4, #6
		pdu[1 + i] ^= tmp[i];
   1c0e8:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   1c0ec:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
   1c0f0:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
   1c0f2:	ea81 0105 	eor.w	r1, r1, r5
   1c0f6:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
   1c0f8:	d1f6      	bne.n	1c0e8 <bt_mesh_net_obfuscate+0x3c>
}
   1c0fa:	b008      	add	sp, #32
   1c0fc:	bd70      	pop	{r4, r5, r6, pc}

0001c0fe <bt_mesh_net_encrypt>:
{
   1c0fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c102:	460c      	mov	r4, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
   1c104:	6809      	ldr	r1, [r1, #0]
   1c106:	f891 9001 	ldrb.w	r9, [r1, #1]
   1c10a:	f891 8002 	ldrb.w	r8, [r1, #2]
   1c10e:	f891 e003 	ldrb.w	lr, [r1, #3]
   1c112:	f891 c004 	ldrb.w	ip, [r1, #4]
   1c116:	794f      	ldrb	r7, [r1, #5]
   1c118:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   1c11c:	4605      	mov	r5, r0
   1c11e:	b089      	sub	sp, #36	; 0x24
   1c120:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
   1c122:	bf14      	ite	ne
   1c124:	2608      	movne	r6, #8
   1c126:	2604      	moveq	r6, #4
	if (proxy) {
   1c128:	798a      	ldrb	r2, [r1, #6]
   1c12a:	b363      	cbz	r3, 1c186 <bt_mesh_net_encrypt+0x88>
	nonce[0] = 0x03;
   1c12c:	2303      	movs	r3, #3
   1c12e:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   1c132:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   1c136:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1c13a:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   1c13e:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   1c142:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   1c146:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   1c148:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   1c14c:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   1c150:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   1c154:	f7ff fcba 	bl	1bacc <sys_put_be32>
	err = bt_mesh_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7,
   1c158:	6822      	ldr	r2, [r4, #0]
   1c15a:	88a3      	ldrh	r3, [r4, #4]
   1c15c:	3207      	adds	r2, #7
   1c15e:	2100      	movs	r1, #0
   1c160:	e9cd 1100 	strd	r1, r1, [sp]
   1c164:	4628      	mov	r0, r5
   1c166:	e9cd 2602 	strd	r2, r6, [sp, #8]
   1c16a:	3b07      	subs	r3, #7
   1c16c:	a904      	add	r1, sp, #16
   1c16e:	f7ff fcb6 	bl	1bade <bt_mesh_ccm_encrypt>
	if (!err) {
   1c172:	4605      	mov	r5, r0
   1c174:	b918      	cbnz	r0, 1c17e <bt_mesh_net_encrypt+0x80>
		net_buf_simple_add(buf, mic_len);
   1c176:	4631      	mov	r1, r6
   1c178:	4620      	mov	r0, r4
   1c17a:	f002 ffbf 	bl	1f0fc <net_buf_simple_add>
}
   1c17e:	4628      	mov	r0, r5
   1c180:	b009      	add	sp, #36	; 0x24
   1c182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   1c186:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   1c18a:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   1c18e:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   1c192:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1c196:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   1c19a:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   1c19e:	f88d 2016 	strb.w	r2, [sp, #22]
   1c1a2:	e7d1      	b.n	1c148 <bt_mesh_net_encrypt+0x4a>

0001c1a4 <bt_mesh_net_decrypt>:
{
   1c1a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c1a8:	460e      	mov	r6, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
   1c1aa:	6809      	ldr	r1, [r1, #0]
   1c1ac:	f891 9001 	ldrb.w	r9, [r1, #1]
   1c1b0:	f891 8002 	ldrb.w	r8, [r1, #2]
   1c1b4:	f891 e003 	ldrb.w	lr, [r1, #3]
   1c1b8:	f891 c004 	ldrb.w	ip, [r1, #4]
   1c1bc:	794f      	ldrb	r7, [r1, #5]
   1c1be:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   1c1c2:	4605      	mov	r5, r0
   1c1c4:	b089      	sub	sp, #36	; 0x24
   1c1c6:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
   1c1c8:	bf14      	ite	ne
   1c1ca:	2408      	movne	r4, #8
   1c1cc:	2404      	moveq	r4, #4
	if (proxy) {
   1c1ce:	798a      	ldrb	r2, [r1, #6]
   1c1d0:	b343      	cbz	r3, 1c224 <bt_mesh_net_decrypt+0x80>
	nonce[0] = 0x03;
   1c1d2:	2303      	movs	r3, #3
   1c1d4:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   1c1d8:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   1c1dc:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1c1e0:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   1c1e4:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   1c1e8:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   1c1ec:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   1c1ee:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   1c1f2:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   1c1f6:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   1c1fa:	f7ff fc67 	bl	1bacc <sys_put_be32>
	buf->len -= mic_len;
   1c1fe:	88b3      	ldrh	r3, [r6, #4]
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   1c200:	6832      	ldr	r2, [r6, #0]
	buf->len -= mic_len;
   1c202:	1b1b      	subs	r3, r3, r4
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   1c204:	3207      	adds	r2, #7
	buf->len -= mic_len;
   1c206:	b29b      	uxth	r3, r3
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   1c208:	2100      	movs	r1, #0
	buf->len -= mic_len;
   1c20a:	80b3      	strh	r3, [r6, #4]
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
   1c20c:	e9cd 1100 	strd	r1, r1, [sp]
   1c210:	e9cd 2402 	strd	r2, r4, [sp, #8]
   1c214:	3b07      	subs	r3, #7
   1c216:	a904      	add	r1, sp, #16
   1c218:	4628      	mov	r0, r5
   1c21a:	f7ff fda1 	bl	1bd60 <bt_mesh_ccm_decrypt>
}
   1c21e:	b009      	add	sp, #36	; 0x24
   1c220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   1c224:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   1c228:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   1c22c:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   1c230:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   1c234:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   1c238:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   1c23c:	f88d 2016 	strb.w	r2, [sp, #22]
   1c240:	e7d5      	b.n	1c1ee <bt_mesh_net_decrypt+0x4a>

0001c242 <bt_mesh_app_encrypt>:
{
   1c242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c246:	b089      	sub	sp, #36	; 0x24
   1c248:	4681      	mov	r9, r0
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   1c24a:	9813      	ldr	r0, [sp, #76]	; 0x4c
{
   1c24c:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
   1c250:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
   1c254:	9d10      	ldr	r5, [sp, #64]	; 0x40
	if (dev_key) {
   1c256:	2900      	cmp	r1, #0
{
   1c258:	461c      	mov	r4, r3
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   1c25a:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
		nonce[0] = 0x01;
   1c25e:	bf14      	ite	ne
   1c260:	2302      	movne	r3, #2
   1c262:	2301      	moveq	r3, #1
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   1c264:	f10d 0111 	add.w	r1, sp, #17
{
   1c268:	4616      	mov	r6, r2
   1c26a:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   1c26e:	f7ff fc2d 	bl	1bacc <sys_put_be32>
   1c272:	ea4f 2318 	mov.w	r3, r8, lsr #8
   1c276:	f88d 3015 	strb.w	r3, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
   1c27a:	f10d 0119 	add.w	r1, sp, #25
   1c27e:	0a3b      	lsrs	r3, r7, #8
   1c280:	9814      	ldr	r0, [sp, #80]	; 0x50
   1c282:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
   1c286:	f88d 8016 	strb.w	r8, [sp, #22]
   1c28a:	f88d 7018 	strb.w	r7, [sp, #24]
   1c28e:	f7ff fc1d 	bl	1bacc <sys_put_be32>
	err = bt_mesh_ccm_encrypt(key, nonce, buf->data, buf->len, ad,
   1c292:	2d00      	cmp	r5, #0
   1c294:	bf14      	ite	ne
   1c296:	2310      	movne	r3, #16
   1c298:	2300      	moveq	r3, #0
   1c29a:	6822      	ldr	r2, [r4, #0]
   1c29c:	2e00      	cmp	r6, #0
   1c29e:	bf14      	ite	ne
   1c2a0:	2608      	movne	r6, #8
   1c2a2:	2604      	moveq	r6, #4
   1c2a4:	e9cd 5300 	strd	r5, r3, [sp]
   1c2a8:	e9cd 2602 	strd	r2, r6, [sp, #8]
   1c2ac:	88a3      	ldrh	r3, [r4, #4]
   1c2ae:	a904      	add	r1, sp, #16
   1c2b0:	4648      	mov	r0, r9
   1c2b2:	f7ff fc14 	bl	1bade <bt_mesh_ccm_encrypt>
	if (!err) {
   1c2b6:	4605      	mov	r5, r0
   1c2b8:	b918      	cbnz	r0, 1c2c2 <bt_mesh_app_encrypt+0x80>
		net_buf_simple_add(buf, APP_MIC_LEN(aszmic));
   1c2ba:	4631      	mov	r1, r6
   1c2bc:	4620      	mov	r0, r4
   1c2be:	f002 ff1d 	bl	1f0fc <net_buf_simple_add>
}
   1c2c2:	4628      	mov	r0, r5
   1c2c4:	b009      	add	sp, #36	; 0x24
   1c2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001c2ca <bt_mesh_app_decrypt>:
{
   1c2ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c2ce:	b088      	sub	sp, #32
   1c2d0:	4682      	mov	sl, r0
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   1c2d2:	9814      	ldr	r0, [sp, #80]	; 0x50
{
   1c2d4:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
   1c2d8:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
	if (dev_key) {
   1c2dc:	2900      	cmp	r1, #0
{
   1c2de:	461c      	mov	r4, r3
   1c2e0:	e9dd 6510 	ldrd	r6, r5, [sp, #64]	; 0x40
		nonce[0] = 0x01;
   1c2e4:	bf14      	ite	ne
   1c2e6:	2302      	movne	r3, #2
   1c2e8:	2301      	moveq	r3, #1
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   1c2ea:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
   1c2ee:	f10d 0111 	add.w	r1, sp, #17
{
   1c2f2:	4617      	mov	r7, r2
   1c2f4:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
   1c2f8:	f7ff fbe8 	bl	1bacc <sys_put_be32>
	dst[0] = val >> 8;
   1c2fc:	ea4f 2319 	mov.w	r3, r9, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
   1c300:	f10d 0119 	add.w	r1, sp, #25
   1c304:	f88d 3015 	strb.w	r3, [sp, #21]
   1c308:	9815      	ldr	r0, [sp, #84]	; 0x54
	dst[1] = val;
   1c30a:	f88d 9016 	strb.w	r9, [sp, #22]
	dst[0] = val >> 8;
   1c30e:	ea4f 2318 	mov.w	r3, r8, lsr #8
   1c312:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
   1c316:	f88d 8018 	strb.w	r8, [sp, #24]
   1c31a:	f7ff fbd7 	bl	1bacc <sys_put_be32>
	err = bt_mesh_ccm_decrypt(key, nonce, buf->data, buf->len, ad,
   1c31e:	2d00      	cmp	r5, #0
   1c320:	6832      	ldr	r2, [r6, #0]
   1c322:	bf14      	ite	ne
   1c324:	2310      	movne	r3, #16
   1c326:	2300      	moveq	r3, #0
   1c328:	2f00      	cmp	r7, #0
   1c32a:	bf14      	ite	ne
   1c32c:	2108      	movne	r1, #8
   1c32e:	2104      	moveq	r1, #4
   1c330:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1c334:	e9cd 5300 	strd	r5, r3, [sp]
   1c338:	6822      	ldr	r2, [r4, #0]
   1c33a:	88a3      	ldrh	r3, [r4, #4]
   1c33c:	a904      	add	r1, sp, #16
   1c33e:	4650      	mov	r0, sl
   1c340:	f7ff fd0e 	bl	1bd60 <bt_mesh_ccm_decrypt>
	if (!err) {
   1c344:	4605      	mov	r5, r0
   1c346:	b918      	cbnz	r0, 1c350 <bt_mesh_app_decrypt+0x86>
		net_buf_simple_add(out, buf->len);
   1c348:	88a1      	ldrh	r1, [r4, #4]
   1c34a:	4630      	mov	r0, r6
   1c34c:	f002 fed6 	bl	1f0fc <net_buf_simple_add>
}
   1c350:	4628      	mov	r0, r5
   1c352:	b008      	add	sp, #32
   1c354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c358 <bt_mesh_prov_conf_salt>:
{
   1c358:	b530      	push	{r4, r5, lr}
   1c35a:	b085      	sub	sp, #20
   1c35c:	4604      	mov	r4, r0
   1c35e:	460d      	mov	r5, r1
	const u8_t conf_salt_key[16] = { 0 };
   1c360:	2210      	movs	r2, #16
   1c362:	2100      	movs	r1, #0
   1c364:	4668      	mov	r0, sp
   1c366:	f7fd fec9 	bl	1a0fc <memset>
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   1c36a:	462b      	mov	r3, r5
   1c36c:	2291      	movs	r2, #145	; 0x91
   1c36e:	4621      	mov	r1, r4
   1c370:	4668      	mov	r0, sp
   1c372:	f7ff fe62 	bl	1c03a <bt_mesh_aes_cmac_one>
}
   1c376:	b005      	add	sp, #20
   1c378:	bd30      	pop	{r4, r5, pc}

0001c37a <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const u8_t conf_key[16], const u8_t rand[16],
		      const u8_t auth[16], u8_t conf[16])
{
   1c37a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   1c37c:	9100      	str	r1, [sp, #0]
   1c37e:	2110      	movs	r1, #16
   1c380:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1c384:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   1c386:	2202      	movs	r2, #2
   1c388:	4669      	mov	r1, sp
   1c38a:	f7ff fe34 	bl	1bff6 <bt_mesh_aes_cmac>
}
   1c38e:	b005      	add	sp, #20
   1c390:	f85d fb04 	ldr.w	pc, [sp], #4

0001c394 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const u8_t key[16], u8_t nonce[13],
			 const u8_t data[25 + 8], u8_t out[25])
{
   1c394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_mesh_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   1c396:	2408      	movs	r4, #8
   1c398:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1c39c:	2300      	movs	r3, #0
   1c39e:	e9cd 3300 	strd	r3, r3, [sp]
   1c3a2:	2319      	movs	r3, #25
   1c3a4:	f7ff fcdc 	bl	1bd60 <bt_mesh_ccm_decrypt>
}
   1c3a8:	b004      	add	sp, #16
   1c3aa:	bd10      	pop	{r4, pc}

0001c3ac <bt_mesh_beacon_auth>:

int bt_mesh_beacon_auth(const u8_t beacon_key[16], u8_t flags,
			const u8_t net_id[8], u32_t iv_index,
			u8_t auth[8])
{
   1c3ac:	b530      	push	{r4, r5, lr}
   1c3ae:	b089      	sub	sp, #36	; 0x24
   1c3b0:	4604      	mov	r4, r0
   1c3b2:	4610      	mov	r0, r2
   1c3b4:	461d      	mov	r5, r3
	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
	memcpy(&msg[1], net_id, 8);
   1c3b6:	2208      	movs	r2, #8
	msg[0] = flags;
   1c3b8:	f88d 1000 	strb.w	r1, [sp]
	memcpy(&msg[1], net_id, 8);
   1c3bc:	4601      	mov	r1, r0
   1c3be:	f10d 0001 	add.w	r0, sp, #1
   1c3c2:	f7fd fe71 	bl	1a0a8 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   1c3c6:	f10d 0109 	add.w	r1, sp, #9
   1c3ca:	4628      	mov	r0, r5
   1c3cc:	f7ff fb7e 	bl	1bacc <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   1c3d0:	4620      	mov	r0, r4
   1c3d2:	ab04      	add	r3, sp, #16
   1c3d4:	220d      	movs	r2, #13
   1c3d6:	4669      	mov	r1, sp
   1c3d8:	f7ff fe2f 	bl	1c03a <bt_mesh_aes_cmac_one>
	if (!err) {
   1c3dc:	4604      	mov	r4, r0
   1c3de:	b920      	cbnz	r0, 1c3ea <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   1c3e0:	2208      	movs	r2, #8
   1c3e2:	a904      	add	r1, sp, #16
   1c3e4:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c3e6:	f7fd fe5f 	bl	1a0a8 <memcpy>
	}

	return err;
}
   1c3ea:	4620      	mov	r0, r4
   1c3ec:	b009      	add	sp, #36	; 0x24
   1c3ee:	bd30      	pop	{r4, r5, pc}

0001c3f0 <bt_mesh_model_find_group>:
		if (mod->groups[i] == addr) {
   1c3f0:	89c3      	ldrh	r3, [r0, #14]
   1c3f2:	428b      	cmp	r3, r1
   1c3f4:	d007      	beq.n	1c406 <bt_mesh_model_find_group+0x16>
   1c3f6:	8a03      	ldrh	r3, [r0, #16]
   1c3f8:	428b      	cmp	r3, r1
   1c3fa:	d106      	bne.n	1c40a <bt_mesh_model_find_group+0x1a>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1c3fc:	2301      	movs	r3, #1
			return &mod->groups[i];
   1c3fe:	3307      	adds	r3, #7
   1c400:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   1c404:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1c406:	2300      	movs	r3, #0
   1c408:	e7f9      	b.n	1c3fe <bt_mesh_model_find_group+0xe>
	return NULL;
   1c40a:	2000      	movs	r0, #0
}
   1c40c:	4770      	bx	lr

0001c40e <bt_mesh_fixed_group_match>:
{
   1c40e:	b508      	push	{r3, lr}
	switch (addr) {
   1c410:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1c414:	4298      	cmp	r0, r3
   1c416:	d00a      	beq.n	1c42e <bt_mesh_fixed_group_match+0x20>
   1c418:	d80c      	bhi.n	1c434 <bt_mesh_fixed_group_match+0x26>
   1c41a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   1c41e:	4298      	cmp	r0, r3
   1c420:	d10a      	bne.n	1c438 <bt_mesh_fixed_group_match+0x2a>
		return (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED);
   1c422:	f7f2 fd57 	bl	eed4 <bt_mesh_friend_get>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   1c426:	1e43      	subs	r3, r0, #1
   1c428:	4258      	negs	r0, r3
   1c42a:	4158      	adcs	r0, r3
}
   1c42c:	bd08      	pop	{r3, pc}
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   1c42e:	f7f2 fd47 	bl	eec0 <bt_mesh_relay_get>
   1c432:	e7f8      	b.n	1c426 <bt_mesh_fixed_group_match+0x18>
		return true;
   1c434:	2001      	movs	r0, #1
   1c436:	e7f9      	b.n	1c42c <bt_mesh_fixed_group_match+0x1e>
		return false;
   1c438:	2000      	movs	r0, #0
   1c43a:	e7f7      	b.n	1c42c <bt_mesh_fixed_group_match+0x1e>

0001c43c <bt_mesh_model_msg_init>:
{
   1c43c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   1c43e:	6883      	ldr	r3, [r0, #8]
   1c440:	4604      	mov	r4, r0
   1c442:	b913      	cbnz	r3, 1c44a <bt_mesh_model_msg_init+0xe>
		buf->__buf = (u8_t *)buf + sizeof(*buf);
   1c444:	f100 030c 	add.w	r3, r0, #12
   1c448:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   1c44a:	68a3      	ldr	r3, [r4, #8]
   1c44c:	6023      	str	r3, [r4, #0]
	if (opcode < 0x100) {
   1c44e:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0;
   1c450:	f04f 0300 	mov.w	r3, #0
   1c454:	80a3      	strh	r3, [r4, #4]
   1c456:	d805      	bhi.n	1c464 <bt_mesh_model_msg_init+0x28>
		net_buf_simple_add_u8(msg, opcode);
   1c458:	4620      	mov	r0, r4
   1c45a:	b2c9      	uxtb	r1, r1
}
   1c45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   1c460:	f002 be5b 	b.w	1f11a <net_buf_simple_add_u8>
	if (opcode < 0x10000) {
   1c464:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   1c468:	b28d      	uxth	r5, r1
   1c46a:	d205      	bcs.n	1c478 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   1c46c:	4629      	mov	r1, r5
   1c46e:	4620      	mov	r0, r4
}
   1c470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   1c474:	f002 be68 	b.w	1f148 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   1c478:	f3c1 4107 	ubfx	r1, r1, #16, #8
   1c47c:	4620      	mov	r0, r4
   1c47e:	f002 fe4c 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, opcode & 0xffff);
   1c482:	4629      	mov	r1, r5
   1c484:	4620      	mov	r0, r4
}
   1c486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_le16(msg, opcode & 0xffff);
   1c48a:	f002 be4e 	b.w	1f12a <net_buf_simple_add_le16>

0001c48e <bt_mesh_model_send>:
{
   1c48e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c490:	b085      	sub	sp, #20
   1c492:	4605      	mov	r5, r0
   1c494:	461f      	mov	r7, r3
		.sub = bt_mesh_subnet_get(ctx->net_idx),
   1c496:	8808      	ldrh	r0, [r1, #0]
	struct bt_mesh_net_tx tx = {
   1c498:	2300      	movs	r3, #0
{
   1c49a:	460e      	mov	r6, r1
   1c49c:	4614      	mov	r4, r2
	struct bt_mesh_net_tx tx = {
   1c49e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1c4a2:	9303      	str	r3, [sp, #12]
		.sub = bt_mesh_subnet_get(ctx->net_idx),
   1c4a4:	f7f0 f902 	bl	c6ac <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   1c4a8:	e9cd 0601 	strd	r0, r6, [sp, #4]
		.src = bt_mesh_model_elem(model)->addr,
   1c4ac:	4628      	mov	r0, r5
   1c4ae:	f7f1 ff4b 	bl	e348 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   1c4b2:	8803      	ldrh	r3, [r0, #0]
   1c4b4:	f8ad 300c 	strh.w	r3, [sp, #12]
		.xmit = bt_mesh_net_transmit_get(),
   1c4b8:	f7f2 fcfa 	bl	eeb0 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
   1c4bc:	f88d 000e 	strb.w	r0, [sp, #14]
	if (!bt_mesh_is_provisioned()) {
   1c4c0:	f7ff f955 	bl	1b76e <bt_mesh_is_provisioned>
   1c4c4:	b1a0      	cbz	r0, 1c4f0 <bt_mesh_model_send+0x62>
	if (net_buf_simple_tailroom(msg) < 4) {
   1c4c6:	4620      	mov	r0, r4
   1c4c8:	f002 fed3 	bl	1f272 <net_buf_simple_tailroom>
   1c4cc:	2803      	cmp	r0, #3
   1c4ce:	d915      	bls.n	1c4fc <bt_mesh_model_send+0x6e>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
   1c4d0:	88a3      	ldrh	r3, [r4, #4]
   1c4d2:	2b44      	cmp	r3, #68	; 0x44
   1c4d4:	d80f      	bhi.n	1c4f6 <bt_mesh_model_send+0x68>
		if (mod->keys[i] == key) {
   1c4d6:	9b02      	ldr	r3, [sp, #8]
   1c4d8:	89aa      	ldrh	r2, [r5, #12]
   1c4da:	885b      	ldrh	r3, [r3, #2]
   1c4dc:	429a      	cmp	r2, r3
   1c4de:	d10d      	bne.n	1c4fc <bt_mesh_model_send+0x6e>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
   1c4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c4e2:	463a      	mov	r2, r7
   1c4e4:	4621      	mov	r1, r4
   1c4e6:	a801      	add	r0, sp, #4
   1c4e8:	f7f1 fa06 	bl	d8f8 <bt_mesh_trans_send>
}
   1c4ec:	b005      	add	sp, #20
   1c4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EAGAIN;
   1c4f0:	f06f 000a 	mvn.w	r0, #10
   1c4f4:	e7fa      	b.n	1c4ec <bt_mesh_model_send+0x5e>
		return -EMSGSIZE;
   1c4f6:	f06f 0023 	mvn.w	r0, #35	; 0x23
   1c4fa:	e7f7      	b.n	1c4ec <bt_mesh_model_send+0x5e>
		return -EINVAL;
   1c4fc:	f06f 0015 	mvn.w	r0, #21
	return model_send(model, &tx, false, msg, cb, cb_data);
   1c500:	e7f4      	b.n	1c4ec <bt_mesh_model_send+0x5e>

0001c502 <bt_mesh_model_find_vnd>:
{
   1c502:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   1c504:	7947      	ldrb	r7, [r0, #5]
{
   1c506:	4605      	mov	r5, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   1c508:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
   1c50a:	f04f 0c1c 	mov.w	ip, #28
	for (i = 0U; i < elem->vnd_model_count; i++) {
   1c50e:	b2d8      	uxtb	r0, r3
   1c510:	4287      	cmp	r7, r0
   1c512:	d801      	bhi.n	1c518 <bt_mesh_model_find_vnd+0x16>
	return NULL;
   1c514:	2000      	movs	r0, #0
}
   1c516:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   1c518:	fb0c f403 	mul.w	r4, ip, r3
   1c51c:	68ee      	ldr	r6, [r5, #12]
   1c51e:	1930      	adds	r0, r6, r4
   1c520:	5b34      	ldrh	r4, [r6, r4]
   1c522:	428c      	cmp	r4, r1
   1c524:	d102      	bne.n	1c52c <bt_mesh_model_find_vnd+0x2a>
   1c526:	8844      	ldrh	r4, [r0, #2]
   1c528:	4294      	cmp	r4, r2
   1c52a:	d0f4      	beq.n	1c516 <bt_mesh_model_find_vnd+0x14>
   1c52c:	3301      	adds	r3, #1
   1c52e:	e7ee      	b.n	1c50e <bt_mesh_model_find_vnd+0xc>

0001c530 <bt_mesh_model_find>:
{
   1c530:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->model_count; i++) {
   1c532:	7906      	ldrb	r6, [r0, #4]
   1c534:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   1c536:	271c      	movs	r7, #28
	for (i = 0U; i < elem->model_count; i++) {
   1c538:	b2da      	uxtb	r2, r3
   1c53a:	4296      	cmp	r6, r2
   1c53c:	d801      	bhi.n	1c542 <bt_mesh_model_find+0x12>
	return NULL;
   1c53e:	2200      	movs	r2, #0
   1c540:	e008      	b.n	1c554 <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   1c542:	fb07 f403 	mul.w	r4, r7, r3
   1c546:	6885      	ldr	r5, [r0, #8]
   1c548:	192a      	adds	r2, r5, r4
   1c54a:	5b2c      	ldrh	r4, [r5, r4]
   1c54c:	428c      	cmp	r4, r1
   1c54e:	f103 0301 	add.w	r3, r3, #1
   1c552:	d1f1      	bne.n	1c538 <bt_mesh_model_find+0x8>
}
   1c554:	4610      	mov	r0, r2
   1c556:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c558 <key_idx_pack>:

#include <misc/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				u16_t idx1, u16_t idx2)
{
   1c558:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   1c55a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   1c55e:	4605      	mov	r5, r0
   1c560:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   1c562:	b289      	uxth	r1, r1
   1c564:	f002 fde1 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   1c568:	f3c4 1107 	ubfx	r1, r4, #4, #8
   1c56c:	4628      	mov	r0, r5
}
   1c56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   1c572:	f002 bdd2 	b.w	1f11a <net_buf_simple_add_u8>

0001c576 <send_krp_status>:
{
   1c576:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c578:	b089      	sub	sp, #36	; 0x24
   1c57a:	460d      	mov	r5, r1
   1c57c:	461e      	mov	r6, r3
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1c57e:	a902      	add	r1, sp, #8
   1c580:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   1c584:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   1c588:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1c58a:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   1c58c:	a805      	add	r0, sp, #20
   1c58e:	f248 0117 	movw	r1, #32791	; 0x8017
{
   1c592:	4617      	mov	r7, r2
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   1c594:	f7ff ff52 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1c598:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1c59c:	a805      	add	r0, sp, #20
   1c59e:	f002 fdbc 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   1c5a2:	4639      	mov	r1, r7
   1c5a4:	a805      	add	r0, sp, #20
   1c5a6:	f002 fdc0 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   1c5aa:	4631      	mov	r1, r6
   1c5ac:	a805      	add	r0, sp, #20
   1c5ae:	f002 fdb4 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1c5b2:	2300      	movs	r3, #0
   1c5b4:	9300      	str	r3, [sp, #0]
   1c5b6:	aa05      	add	r2, sp, #20
   1c5b8:	4629      	mov	r1, r5
   1c5ba:	4620      	mov	r0, r4
   1c5bc:	f7ff ff67 	bl	1c48e <bt_mesh_model_send>
}
   1c5c0:	b009      	add	sp, #36	; 0x24
   1c5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c5c4 <lpn_timeout_get>:
{
   1c5c4:	b570      	push	{r4, r5, r6, lr}
   1c5c6:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4);
   1c5c8:	ab02      	add	r3, sp, #8
{
   1c5ca:	4605      	mov	r5, r0
   1c5cc:	460e      	mov	r6, r1
	lpn_addr = net_buf_simple_pull_le16(buf);
   1c5ce:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4);
   1c5d0:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   1c5d4:	9305      	str	r3, [sp, #20]
   1c5d6:	e9cd 1306 	strd	r1, r3, [sp, #24]
	lpn_addr = net_buf_simple_pull_le16(buf);
   1c5da:	f002 fe22 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   1c5de:	b203      	sxth	r3, r0
   1c5e0:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   1c5e2:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   1c5e4:	dd1b      	ble.n	1c61e <lpn_timeout_get+0x5a>
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   1c5e6:	f248 012e 	movw	r1, #32814	; 0x802e
   1c5ea:	a805      	add	r0, sp, #20
   1c5ec:	f7ff ff26 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   1c5f0:	4621      	mov	r1, r4
   1c5f2:	a805      	add	r0, sp, #20
   1c5f4:	f002 fd99 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, timeout);
   1c5f8:	2100      	movs	r1, #0
   1c5fa:	a805      	add	r0, sp, #20
   1c5fc:	f002 fd8d 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, timeout >> 8);
   1c600:	2100      	movs	r1, #0
   1c602:	a805      	add	r0, sp, #20
   1c604:	f002 fd89 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, timeout >> 16);
   1c608:	2100      	movs	r1, #0
   1c60a:	a805      	add	r0, sp, #20
   1c60c:	f002 fd85 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1c610:	2300      	movs	r3, #0
   1c612:	9300      	str	r3, [sp, #0]
   1c614:	aa05      	add	r2, sp, #20
   1c616:	4631      	mov	r1, r6
   1c618:	4628      	mov	r0, r5
   1c61a:	f7ff ff38 	bl	1c48e <bt_mesh_model_send>
}
   1c61e:	b008      	add	sp, #32
   1c620:	bd70      	pop	{r4, r5, r6, pc}

0001c622 <send_friend_status>:
{
   1c622:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1c624:	6986      	ldr	r6, [r0, #24]
{
   1c626:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1c628:	ab03      	add	r3, sp, #12
   1c62a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1c62e:	4604      	mov	r4, r0
   1c630:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   1c632:	a805      	add	r0, sp, #20
   1c634:	f248 0111 	movw	r1, #32785	; 0x8011
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1c638:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c63c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   1c63e:	f7ff fefd 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, cfg->frnd);
   1c642:	7a71      	ldrb	r1, [r6, #9]
   1c644:	a805      	add	r0, sp, #20
   1c646:	f002 fd68 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1c64a:	2300      	movs	r3, #0
   1c64c:	9300      	str	r3, [sp, #0]
   1c64e:	aa05      	add	r2, sp, #20
   1c650:	4629      	mov	r1, r5
   1c652:	4620      	mov	r0, r4
   1c654:	f7ff ff1b 	bl	1c48e <bt_mesh_model_send>
}
   1c658:	b008      	add	sp, #32
   1c65a:	bd70      	pop	{r4, r5, r6, pc}

0001c65c <friend_get>:
	send_friend_status(model, ctx);
   1c65c:	f7ff bfe1 	b.w	1c622 <send_friend_status>

0001c660 <send_net_key_status>:
{
   1c660:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c662:	b089      	sub	sp, #36	; 0x24
   1c664:	460d      	mov	r5, r1
   1c666:	461f      	mov	r7, r3
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4);
   1c668:	a902      	add	r1, sp, #8
   1c66a:	f44f 2310 	mov.w	r3, #589824	; 0x90000
   1c66e:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   1c672:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 3 + 4);
   1c674:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1c676:	a805      	add	r0, sp, #20
   1c678:	f248 0144 	movw	r1, #32836	; 0x8044
{
   1c67c:	4616      	mov	r6, r2
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   1c67e:	f7ff fedd 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1c682:	4639      	mov	r1, r7
   1c684:	a805      	add	r0, sp, #20
   1c686:	f002 fd48 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   1c68a:	4631      	mov	r1, r6
   1c68c:	a805      	add	r0, sp, #20
   1c68e:	f002 fd4c 	bl	1f12a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1c692:	2300      	movs	r3, #0
   1c694:	9300      	str	r3, [sp, #0]
   1c696:	aa05      	add	r2, sp, #20
   1c698:	4629      	mov	r1, r5
   1c69a:	4620      	mov	r0, r4
   1c69c:	f7ff fef7 	bl	1c48e <bt_mesh_model_send>
}
   1c6a0:	b009      	add	sp, #36	; 0x24
   1c6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c6a4 <krp_get>:
{
   1c6a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c6a6:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   1c6a8:	4610      	mov	r0, r2
{
   1c6aa:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   1c6ac:	f002 fdb9 	bl	1f222 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1c6b0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1c6b4:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   1c6b6:	d20a      	bcs.n	1c6ce <krp_get+0x2a>
	sub = bt_mesh_subnet_get(idx);
   1c6b8:	f7ef fff8 	bl	c6ac <bt_mesh_subnet_get>
	if (!sub) {
   1c6bc:	4603      	mov	r3, r0
   1c6be:	b940      	cbnz	r0, 1c6d2 <krp_get+0x2e>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
   1c6c0:	2204      	movs	r2, #4
		send_krp_status(model, ctx, idx, sub->kr_phase,
   1c6c2:	9200      	str	r2, [sp, #0]
   1c6c4:	4631      	mov	r1, r6
   1c6c6:	4622      	mov	r2, r4
   1c6c8:	4628      	mov	r0, r5
   1c6ca:	f7ff ff54 	bl	1c576 <send_krp_status>
}
   1c6ce:	b002      	add	sp, #8
   1c6d0:	bd70      	pop	{r4, r5, r6, pc}
		send_krp_status(model, ctx, idx, sub->kr_phase,
   1c6d2:	7fc3      	ldrb	r3, [r0, #31]
   1c6d4:	2200      	movs	r2, #0
   1c6d6:	e7f4      	b.n	1c6c2 <krp_get+0x1e>

0001c6d8 <node_identity_get>:
{
   1c6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c6da:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1c6dc:	ab02      	add	r3, sp, #8
{
   1c6de:	4606      	mov	r6, r0
   1c6e0:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   1c6e2:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1c6e4:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
   1c6e8:	9305      	str	r3, [sp, #20]
   1c6ea:	e9cd 1306 	strd	r1, r3, [sp, #24]
	idx = net_buf_simple_pull_le16(buf);
   1c6ee:	f002 fd98 	bl	1f222 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1c6f2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1c6f6:	4605      	mov	r5, r0
	if (idx > 0xfff) {
   1c6f8:	d21c      	bcs.n	1c734 <node_identity_get+0x5c>
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   1c6fa:	f248 0148 	movw	r1, #32840	; 0x8048
   1c6fe:	a805      	add	r0, sp, #20
   1c700:	f7ff fe9c 	bl	1c43c <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
   1c704:	4628      	mov	r0, r5
   1c706:	f7ef ffd1 	bl	c6ac <bt_mesh_subnet_get>
	if (!sub) {
   1c70a:	4604      	mov	r4, r0
   1c70c:	b9a0      	cbnz	r0, 1c738 <node_identity_get+0x60>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_NETKEY);
   1c70e:	2104      	movs	r1, #4
   1c710:	a805      	add	r0, sp, #20
   1c712:	f002 fd02 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   1c716:	4629      	mov	r1, r5
   1c718:	a805      	add	r0, sp, #20
   1c71a:	f002 fd06 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
   1c71e:	4621      	mov	r1, r4
   1c720:	a805      	add	r0, sp, #20
   1c722:	f002 fcfa 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1c726:	2300      	movs	r3, #0
   1c728:	9300      	str	r3, [sp, #0]
   1c72a:	aa05      	add	r2, sp, #20
   1c72c:	4639      	mov	r1, r7
   1c72e:	4630      	mov	r0, r6
   1c730:	f7ff fead 	bl	1c48e <bt_mesh_model_send>
}
   1c734:	b009      	add	sp, #36	; 0x24
   1c736:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1c738:	2100      	movs	r1, #0
   1c73a:	a805      	add	r0, sp, #20
   1c73c:	f002 fced 	bl	1f11a <net_buf_simple_add_u8>
		node_id = sub->node_id;
   1c740:	f894 4020 	ldrb.w	r4, [r4, #32]
   1c744:	e7e7      	b.n	1c716 <node_identity_get+0x3e>

0001c746 <hb_pub_send_status>:
{
   1c746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c74a:	b08a      	sub	sp, #40	; 0x28
   1c74c:	4690      	mov	r8, r2
   1c74e:	461f      	mov	r7, r3
	NET_BUF_SIMPLE_DEFINE(msg, 1 + 10 + 4);
   1c750:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1c754:	ab06      	add	r3, sp, #24
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1c756:	6984      	ldr	r4, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(msg, 1 + 10 + 4);
   1c758:	9303      	str	r3, [sp, #12]
{
   1c75a:	4605      	mov	r5, r0
   1c75c:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   1c75e:	a803      	add	r0, sp, #12
   1c760:	2106      	movs	r1, #6
	NET_BUF_SIMPLE_DEFINE(msg, 1 + 10 + 4);
   1c762:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   1c766:	f7ff fe69 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1c76a:	4641      	mov	r1, r8
   1c76c:	a803      	add	r0, sp, #12
   1c76e:	f002 fcd4 	bl	1f11a <net_buf_simple_add_u8>
	if (orig_msg) {
   1c772:	b18f      	cbz	r7, 1c798 <hb_pub_send_status+0x52>
		memcpy(net_buf_simple_add(&msg, sizeof(*orig_msg)), orig_msg,
   1c774:	2109      	movs	r1, #9
   1c776:	a803      	add	r0, sp, #12
   1c778:	f002 fcc0 	bl	1f0fc <net_buf_simple_add>
   1c77c:	2209      	movs	r2, #9
   1c77e:	4639      	mov	r1, r7
   1c780:	f7fd fc92 	bl	1a0a8 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1c784:	2300      	movs	r3, #0
   1c786:	9300      	str	r3, [sp, #0]
   1c788:	aa03      	add	r2, sp, #12
   1c78a:	4631      	mov	r1, r6
   1c78c:	4628      	mov	r0, r5
   1c78e:	f7ff fe7e 	bl	1c48e <bt_mesh_model_send>
}
   1c792:	b00a      	add	sp, #40	; 0x28
   1c794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_simple_add_le16(&msg, cfg->hb_pub.dst);
   1c798:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1c79a:	a803      	add	r0, sp, #12
   1c79c:	f002 fcc5 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
   1c7a0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (!val) {
   1c7a2:	b171      	cbz	r1, 1c7c2 <hb_pub_send_status+0x7c>
	} else if (val == 0x01) {
   1c7a4:	2901      	cmp	r1, #1
   1c7a6:	d00c      	beq.n	1c7c2 <hb_pub_send_status+0x7c>
	} else if (val == 0xffff) {
   1c7a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c7ac:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   1c7ae:	bf1f      	itttt	ne
   1c7b0:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   1c7b4:	fab1 f181 	clzne	r1, r1
   1c7b8:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   1c7bc:	b2c9      	uxtbne	r1, r1
		return 0xff;
   1c7be:	bf08      	it	eq
   1c7c0:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
   1c7c2:	a803      	add	r0, sp, #12
   1c7c4:	f002 fca9 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.period);
   1c7c8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   1c7cc:	a803      	add	r0, sp, #12
   1c7ce:	f002 fca4 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.ttl);
   1c7d2:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
   1c7d6:	a803      	add	r0, sp, #12
   1c7d8:	f002 fc9f 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.feat);
   1c7dc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   1c7de:	a803      	add	r0, sp, #12
   1c7e0:	f002 fca3 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.net_idx);
   1c7e4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   1c7e6:	a803      	add	r0, sp, #12
   1c7e8:	f002 fc9f 	bl	1f12a <net_buf_simple_add_le16>
   1c7ec:	e7ca      	b.n	1c784 <hb_pub_send_status+0x3e>

0001c7ee <heartbeat_pub_get>:
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
   1c7ee:	2300      	movs	r3, #0
   1c7f0:	461a      	mov	r2, r3
   1c7f2:	f7ff bfa8 	b.w	1c746 <hb_pub_send_status>

0001c7f6 <send_mod_sub_status>:
{
   1c7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7fa:	b08a      	sub	sp, #40	; 0x28
   1c7fc:	461f      	mov	r7, r3
   1c7fe:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   1c800:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
   1c804:	a906      	add	r1, sp, #24
{
   1c806:	4690      	mov	r8, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   1c808:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1c80c:	9103      	str	r1, [sp, #12]
{
   1c80e:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   1c810:	f248 011f 	movw	r1, #32799	; 0x801f
   1c814:	a803      	add	r0, sp, #12
{
   1c816:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   1c81a:	f7ff fe0f 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1c81e:	4641      	mov	r1, r8
   1c820:	a803      	add	r0, sp, #12
   1c822:	f002 fc7a 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1c826:	4639      	mov	r1, r7
   1c828:	a803      	add	r0, sp, #12
   1c82a:	f002 fc7e 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   1c82e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1c832:	a803      	add	r0, sp, #12
   1c834:	f002 fc79 	bl	1f12a <net_buf_simple_add_le16>
	if (vnd) {
   1c838:	b18e      	cbz	r6, 1c85e <send_mod_sub_status+0x68>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   1c83a:	2104      	movs	r1, #4
   1c83c:	a803      	add	r0, sp, #12
   1c83e:	f002 fc5d 	bl	1f0fc <net_buf_simple_add>
   1c842:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1c844:	9911      	ldr	r1, [sp, #68]	; 0x44
   1c846:	f7fd fc2f 	bl	1a0a8 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1c84a:	2300      	movs	r3, #0
   1c84c:	9300      	str	r3, [sp, #0]
   1c84e:	aa03      	add	r2, sp, #12
   1c850:	4629      	mov	r1, r5
   1c852:	4620      	mov	r0, r4
   1c854:	f7ff fe1b 	bl	1c48e <bt_mesh_model_send>
}
   1c858:	b00a      	add	sp, #40	; 0x28
   1c85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1c85e:	2102      	movs	r1, #2
   1c860:	a803      	add	r0, sp, #12
   1c862:	f002 fc4b 	bl	1f0fc <net_buf_simple_add>
   1c866:	2202      	movs	r2, #2
   1c868:	e7ec      	b.n	1c844 <send_mod_sub_status+0x4e>

0001c86a <krp_set>:
{
   1c86a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c86e:	4607      	mov	r7, r0
	idx = net_buf_simple_pull_le16(buf);
   1c870:	4610      	mov	r0, r2
{
   1c872:	4614      	mov	r4, r2
   1c874:	4688      	mov	r8, r1
	idx = net_buf_simple_pull_le16(buf);
   1c876:	f002 fcd4 	bl	1f222 <net_buf_simple_pull_le16>
   1c87a:	4605      	mov	r5, r0
	phase = net_buf_simple_pull_u8(buf);
   1c87c:	4620      	mov	r0, r4
   1c87e:	f002 fcc8 	bl	1f212 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   1c882:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   1c886:	4606      	mov	r6, r0
	if (idx > 0xfff) {
   1c888:	d215      	bcs.n	1c8b6 <krp_set+0x4c>
	sub = bt_mesh_subnet_get(idx);
   1c88a:	4628      	mov	r0, r5
   1c88c:	f7ef ff0e 	bl	c6ac <bt_mesh_subnet_get>
	if (!sub) {
   1c890:	4604      	mov	r4, r0
   1c892:	b940      	cbnz	r0, 1c8a6 <krp_set+0x3c>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
   1c894:	2304      	movs	r3, #4
   1c896:	9300      	str	r3, [sp, #0]
   1c898:	4603      	mov	r3, r0
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
   1c89a:	462a      	mov	r2, r5
   1c89c:	4641      	mov	r1, r8
   1c89e:	4638      	mov	r0, r7
   1c8a0:	f7ff fe69 	bl	1c576 <send_krp_status>
   1c8a4:	e007      	b.n	1c8b6 <krp_set+0x4c>
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
   1c8a6:	1eb3      	subs	r3, r6, #2
   1c8a8:	b2db      	uxtb	r3, r3
   1c8aa:	2b01      	cmp	r3, #1
   1c8ac:	d803      	bhi.n	1c8b6 <krp_set+0x4c>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
   1c8ae:	7fc3      	ldrb	r3, [r0, #31]
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
   1c8b0:	b923      	cbnz	r3, 1c8bc <krp_set+0x52>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
   1c8b2:	2e02      	cmp	r6, #2
   1c8b4:	d10b      	bne.n	1c8ce <krp_set+0x64>
}
   1c8b6:	b002      	add	sp, #8
   1c8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sub->kr_phase == BT_MESH_KR_PHASE_1 &&
   1c8bc:	2b01      	cmp	r3, #1
   1c8be:	d10a      	bne.n	1c8d6 <krp_set+0x6c>
   1c8c0:	2e02      	cmp	r6, #2
   1c8c2:	d10a      	bne.n	1c8da <krp_set+0x70>
		sub->kr_flag = 1;
   1c8c4:	f240 2301 	movw	r3, #513	; 0x201
   1c8c8:	83c3      	strh	r3, [r0, #30]
		bt_mesh_net_beacon_update(sub);
   1c8ca:	f7ef ff43 	bl	c754 <bt_mesh_net_beacon_update>
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
   1c8ce:	2200      	movs	r2, #0
   1c8d0:	7fe3      	ldrb	r3, [r4, #31]
   1c8d2:	9200      	str	r2, [sp, #0]
   1c8d4:	e7e1      	b.n	1c89a <krp_set+0x30>
	} else if ((sub->kr_phase == BT_MESH_KR_PHASE_1 ||
   1c8d6:	2b02      	cmp	r3, #2
   1c8d8:	d1f9      	bne.n	1c8ce <krp_set+0x64>
		    sub->kr_phase == BT_MESH_KR_PHASE_2) &&
   1c8da:	2e03      	cmp	r6, #3
   1c8dc:	d1f7      	bne.n	1c8ce <krp_set+0x64>
		bt_mesh_net_revoke_keys(sub);
   1c8de:	4620      	mov	r0, r4
   1c8e0:	f7ef ff96 	bl	c810 <bt_mesh_net_revoke_keys>
		sub->kr_flag = 0;
   1c8e4:	2300      	movs	r3, #0
   1c8e6:	83e3      	strh	r3, [r4, #30]
		bt_mesh_net_beacon_update(sub);
   1c8e8:	4620      	mov	r0, r4
   1c8ea:	e7ee      	b.n	1c8ca <krp_set+0x60>

0001c8ec <node_reset>:
{
   1c8ec:	b530      	push	{r4, r5, lr}
   1c8ee:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 0 + 4);
   1c8f0:	ab03      	add	r3, sp, #12
{
   1c8f2:	4604      	mov	r4, r0
   1c8f4:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 0 + 4);
   1c8f6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   1c8fa:	a805      	add	r0, sp, #20
   1c8fc:	f248 014a 	movw	r1, #32842	; 0x804a
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 0 + 4);
   1c900:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c904:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   1c906:	f7ff fd99 	bl	1c43c <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1c90a:	2300      	movs	r3, #0
   1c90c:	9300      	str	r3, [sp, #0]
   1c90e:	aa05      	add	r2, sp, #20
   1c910:	4629      	mov	r1, r5
   1c912:	4620      	mov	r0, r4
   1c914:	f7ff fdbb 	bl	1c48e <bt_mesh_model_send>
	bt_mesh_reset();
   1c918:	f7ef fa92 	bl	be40 <bt_mesh_reset>
}
   1c91c:	b009      	add	sp, #36	; 0x24
   1c91e:	bd30      	pop	{r4, r5, pc}

0001c920 <mod_sub_get>:
{
   1c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c924:	4615      	mov	r5, r2
   1c926:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4 +
   1c928:	ab06      	add	r3, sp, #24
   1c92a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1c92e:	4607      	mov	r7, r0
	addr = net_buf_simple_pull_le16(buf);
   1c930:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 5 + 4 +
   1c932:	9303      	str	r3, [sp, #12]
   1c934:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1c938:	4688      	mov	r8, r1
	addr = net_buf_simple_pull_le16(buf);
   1c93a:	f002 fc72 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1c93e:	b203      	sxth	r3, r0
   1c940:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   1c942:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1c944:	dd3b      	ble.n	1c9be <mod_sub_get+0x9e>
	id = net_buf_simple_pull_le16(buf);
   1c946:	4628      	mov	r0, r5
   1c948:	f002 fc6b 	bl	1f222 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   1c94c:	f248 012a 	movw	r1, #32810	; 0x802a
	id = net_buf_simple_pull_le16(buf);
   1c950:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   1c952:	a803      	add	r0, sp, #12
   1c954:	f7ff fd72 	bl	1c43c <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   1c958:	4620      	mov	r0, r4
   1c95a:	f7f1 fd55 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1c95e:	b960      	cbnz	r0, 1c97a <mod_sub_get+0x5a>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   1c960:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1c962:	a803      	add	r0, sp, #12
   1c964:	f002 fbd9 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   1c968:	4621      	mov	r1, r4
   1c96a:	a803      	add	r0, sp, #12
   1c96c:	f002 fbdd 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   1c970:	4629      	mov	r1, r5
			net_buf_simple_add_le16(&msg, mod->groups[i]);
   1c972:	a803      	add	r0, sp, #12
   1c974:	f002 fbd9 	bl	1f12a <net_buf_simple_add_le16>
   1c978:	e01a      	b.n	1c9b0 <mod_sub_get+0x90>
	mod = bt_mesh_model_find(elem, id);
   1c97a:	4629      	mov	r1, r5
   1c97c:	f7ff fdd8 	bl	1c530 <bt_mesh_model_find>
	if (!mod) {
   1c980:	4606      	mov	r6, r0
   1c982:	b908      	cbnz	r0, 1c988 <mod_sub_get+0x68>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1c984:	2102      	movs	r1, #2
   1c986:	e7ec      	b.n	1c962 <mod_sub_get+0x42>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1c988:	2100      	movs	r1, #0
   1c98a:	a803      	add	r0, sp, #12
   1c98c:	f002 fbc5 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   1c990:	4621      	mov	r1, r4
   1c992:	a803      	add	r0, sp, #12
   1c994:	f002 fbc9 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   1c998:	4629      	mov	r1, r5
   1c99a:	a803      	add	r0, sp, #12
   1c99c:	f002 fbc5 	bl	1f12a <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1c9a0:	89f1      	ldrh	r1, [r6, #14]
   1c9a2:	b111      	cbz	r1, 1c9aa <mod_sub_get+0x8a>
			net_buf_simple_add_le16(&msg, mod->groups[i]);
   1c9a4:	a803      	add	r0, sp, #12
   1c9a6:	f002 fbc0 	bl	1f12a <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1c9aa:	8a31      	ldrh	r1, [r6, #16]
   1c9ac:	2900      	cmp	r1, #0
   1c9ae:	d1e0      	bne.n	1c972 <mod_sub_get+0x52>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1c9b0:	2300      	movs	r3, #0
   1c9b2:	9300      	str	r3, [sp, #0]
   1c9b4:	aa03      	add	r2, sp, #12
   1c9b6:	4641      	mov	r1, r8
   1c9b8:	4638      	mov	r0, r7
   1c9ba:	f7ff fd68 	bl	1c48e <bt_mesh_model_send>
}
   1c9be:	b00a      	add	sp, #40	; 0x28
   1c9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c9c4 <mod_sub_get_vnd>:
{
   1c9c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c9c8:	4615      	mov	r5, r2
   1c9ca:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 7 + 4 +
   1c9cc:	ab05      	add	r3, sp, #20
   1c9ce:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   1c9d2:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   1c9d4:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 7 + 4 +
   1c9d6:	9302      	str	r3, [sp, #8]
   1c9d8:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
   1c9dc:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   1c9de:	f002 fc20 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1c9e2:	b203      	sxth	r3, r0
   1c9e4:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   1c9e6:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1c9e8:	dd48      	ble.n	1ca7c <mod_sub_get_vnd+0xb8>
	company = net_buf_simple_pull_le16(buf);
   1c9ea:	4628      	mov	r0, r5
   1c9ec:	f002 fc19 	bl	1f222 <net_buf_simple_pull_le16>
   1c9f0:	4606      	mov	r6, r0
	id = net_buf_simple_pull_le16(buf);
   1c9f2:	4628      	mov	r0, r5
   1c9f4:	f002 fc15 	bl	1f222 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1c9f8:	f248 012c 	movw	r1, #32812	; 0x802c
	id = net_buf_simple_pull_le16(buf);
   1c9fc:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1c9fe:	a802      	add	r0, sp, #8
   1ca00:	f7ff fd1c 	bl	1c43c <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   1ca04:	4620      	mov	r0, r4
   1ca06:	f7f1 fcff 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1ca0a:	b980      	cbnz	r0, 1ca2e <mod_sub_get_vnd+0x6a>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   1ca0c:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1ca0e:	a802      	add	r0, sp, #8
   1ca10:	f002 fb83 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   1ca14:	4621      	mov	r1, r4
   1ca16:	a802      	add	r0, sp, #8
   1ca18:	f002 fb87 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   1ca1c:	4631      	mov	r1, r6
   1ca1e:	a802      	add	r0, sp, #8
   1ca20:	f002 fb83 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   1ca24:	4629      	mov	r1, r5
			net_buf_simple_add_le16(&msg, mod->groups[i]);
   1ca26:	a802      	add	r0, sp, #8
   1ca28:	f002 fb7f 	bl	1f12a <net_buf_simple_add_le16>
   1ca2c:	e01f      	b.n	1ca6e <mod_sub_get_vnd+0xaa>
	mod = bt_mesh_model_find_vnd(elem, company, id);
   1ca2e:	462a      	mov	r2, r5
   1ca30:	4631      	mov	r1, r6
   1ca32:	f7ff fd66 	bl	1c502 <bt_mesh_model_find_vnd>
	if (!mod) {
   1ca36:	4607      	mov	r7, r0
   1ca38:	b908      	cbnz	r0, 1ca3e <mod_sub_get_vnd+0x7a>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1ca3a:	2102      	movs	r1, #2
   1ca3c:	e7e7      	b.n	1ca0e <mod_sub_get_vnd+0x4a>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1ca3e:	2100      	movs	r1, #0
   1ca40:	a802      	add	r0, sp, #8
   1ca42:	f002 fb6a 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   1ca46:	4621      	mov	r1, r4
   1ca48:	a802      	add	r0, sp, #8
   1ca4a:	f002 fb6e 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   1ca4e:	4631      	mov	r1, r6
   1ca50:	a802      	add	r0, sp, #8
   1ca52:	f002 fb6a 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   1ca56:	4629      	mov	r1, r5
   1ca58:	a802      	add	r0, sp, #8
   1ca5a:	f002 fb66 	bl	1f12a <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1ca5e:	89f9      	ldrh	r1, [r7, #14]
   1ca60:	b111      	cbz	r1, 1ca68 <mod_sub_get_vnd+0xa4>
			net_buf_simple_add_le16(&msg, mod->groups[i]);
   1ca62:	a802      	add	r0, sp, #8
   1ca64:	f002 fb61 	bl	1f12a <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   1ca68:	8a39      	ldrh	r1, [r7, #16]
   1ca6a:	2900      	cmp	r1, #0
   1ca6c:	d1db      	bne.n	1ca26 <mod_sub_get_vnd+0x62>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1ca6e:	2300      	movs	r3, #0
   1ca70:	9300      	str	r3, [sp, #0]
   1ca72:	aa02      	add	r2, sp, #8
   1ca74:	4649      	mov	r1, r9
   1ca76:	4640      	mov	r0, r8
   1ca78:	f7ff fd09 	bl	1c48e <bt_mesh_model_send>
}
   1ca7c:	b00b      	add	sp, #44	; 0x2c
   1ca7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001ca82 <net_key_update>:
{
   1ca82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca86:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   1ca88:	4610      	mov	r0, r2
{
   1ca8a:	460f      	mov	r7, r1
   1ca8c:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
   1ca8e:	f002 fbc8 	bl	1f222 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1ca92:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1ca96:	4605      	mov	r5, r0
	if (idx > 0xfff) {
   1ca98:	d21a      	bcs.n	1cad0 <net_key_update+0x4e>
	sub = bt_mesh_subnet_get(idx);
   1ca9a:	f7ef fe07 	bl	c6ac <bt_mesh_subnet_get>
	if (!sub) {
   1ca9e:	4604      	mov	r4, r0
   1caa0:	b938      	cbnz	r0, 1cab2 <net_key_update+0x30>
		send_net_key_status(model, ctx, idx, STATUS_INVALID_NETKEY);
   1caa2:	2304      	movs	r3, #4
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   1caa4:	462a      	mov	r2, r5
   1caa6:	4639      	mov	r1, r7
   1caa8:	4630      	mov	r0, r6
}
   1caaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   1caae:	f7ff bdd7 	b.w	1c660 <send_net_key_status>
	switch (sub->kr_phase) {
   1cab2:	7fc3      	ldrb	r3, [r0, #31]
   1cab4:	2b03      	cmp	r3, #3
   1cab6:	d819      	bhi.n	1caec <net_key_update+0x6a>
   1cab8:	e8df f003 	tbb	[pc, r3]
   1cabc:	16160c02 	.word	0x16160c02
		if (!memcmp(buf->data, sub->keys[0].net, 16)) {
   1cac0:	f100 0130 	add.w	r1, r0, #48	; 0x30
   1cac4:	2210      	movs	r2, #16
   1cac6:	f8d8 0000 	ldr.w	r0, [r8]
   1caca:	f7fd fadd 	bl	1a088 <memcmp>
   1cace:	b968      	cbnz	r0, 1caec <net_key_update+0x6a>
}
   1cad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(buf->data, sub->keys[1].net, 16)) {
   1cad4:	f100 0189 	add.w	r1, r0, #137	; 0x89
   1cad8:	2210      	movs	r2, #16
   1cada:	f8d8 0000 	ldr.w	r0, [r8]
   1cade:	f7fd fad3 	bl	1a088 <memcmp>
   1cae2:	4603      	mov	r3, r0
   1cae4:	2800      	cmp	r0, #0
   1cae6:	d0dd      	beq.n	1caa4 <net_key_update+0x22>
		send_net_key_status(model, ctx, idx, STATUS_CANNOT_UPDATE);
   1cae8:	230b      	movs	r3, #11
   1caea:	e7db      	b.n	1caa4 <net_key_update+0x22>
	err = bt_mesh_net_keys_create(&sub->keys[1], buf->data);
   1caec:	f8d8 1000 	ldr.w	r1, [r8]
   1caf0:	f104 0089 	add.w	r0, r4, #137	; 0x89
   1caf4:	f7ef fdf8 	bl	c6e8 <bt_mesh_net_keys_create>
	if (err) {
   1caf8:	4680      	mov	r8, r0
   1cafa:	b108      	cbz	r0, 1cb00 <net_key_update+0x7e>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
   1cafc:	2310      	movs	r3, #16
   1cafe:	e7d1      	b.n	1caa4 <net_key_update+0x22>
	sub->kr_phase = BT_MESH_KR_PHASE_1;
   1cb00:	2301      	movs	r3, #1
   1cb02:	77e3      	strb	r3, [r4, #31]
		bt_mesh_store_subnet(sub);
   1cb04:	4620      	mov	r0, r4
   1cb06:	f001 fb37 	bl	1e178 <bt_mesh_store_subnet>
	bt_mesh_net_beacon_update(sub);
   1cb0a:	4620      	mov	r0, r4
   1cb0c:	f7ef fe22 	bl	c754 <bt_mesh_net_beacon_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
   1cb10:	4643      	mov	r3, r8
   1cb12:	e7c7      	b.n	1caa4 <net_key_update+0x22>

0001cb14 <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  u16_t *idx1, u16_t *idx2)
{
   1cb14:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   1cb16:	6804      	ldr	r4, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
   1cb18:	7865      	ldrb	r5, [r4, #1]
   1cb1a:	7823      	ldrb	r3, [r4, #0]
   1cb1c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1cb20:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1cb24:	800b      	strh	r3, [r1, #0]
   1cb26:	78a1      	ldrb	r1, [r4, #2]
   1cb28:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   1cb2a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1cb2e:	091b      	lsrs	r3, r3, #4
   1cb30:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   1cb32:	2103      	movs	r1, #3
}
   1cb34:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
   1cb36:	f002 bb5c 	b.w	1f1f2 <net_buf_simple_pull>

0001cb3a <mod_unbind.part.1>:
static u8_t mod_unbind(struct bt_mesh_model *model, u16_t key_idx, bool store)
   1cb3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (model->keys[i] != key_idx) {
   1cb3c:	8983      	ldrh	r3, [r0, #12]
   1cb3e:	428b      	cmp	r3, r1
static u8_t mod_unbind(struct bt_mesh_model *model, u16_t key_idx, bool store)
   1cb40:	4604      	mov	r4, r0
   1cb42:	460e      	mov	r6, r1
   1cb44:	4615      	mov	r5, r2
		if (model->keys[i] != key_idx) {
   1cb46:	d114      	bne.n	1cb72 <mod_unbind.part.1+0x38>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   1cb48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cb4c:	8183      	strh	r3, [r0, #12]
		if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1cb4e:	b10a      	cbz	r2, 1cb54 <mod_unbind.part.1+0x1a>
			bt_mesh_store_mod_bind(model);
   1cb50:	f001 fb6f 	bl	1e232 <bt_mesh_store_mod_bind>
		if (model->pub && model->pub->key == key_idx) {
   1cb54:	68a3      	ldr	r3, [r4, #8]
   1cb56:	b163      	cbz	r3, 1cb72 <mod_unbind.part.1+0x38>
   1cb58:	88db      	ldrh	r3, [r3, #6]
   1cb5a:	42b3      	cmp	r3, r6
   1cb5c:	d109      	bne.n	1cb72 <mod_unbind.part.1+0x38>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   1cb5e:	2300      	movs	r3, #0
   1cb60:	9503      	str	r5, [sp, #12]
   1cb62:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1cb66:	9300      	str	r3, [sp, #0]
   1cb68:	461a      	mov	r2, r3
   1cb6a:	4619      	mov	r1, r3
   1cb6c:	4620      	mov	r0, r4
   1cb6e:	f7f1 fe55 	bl	e81c <_mod_pub_set>
}
   1cb72:	2000      	movs	r0, #0
   1cb74:	b004      	add	sp, #16
   1cb76:	bd70      	pop	{r4, r5, r6, pc}

0001cb78 <create_mod_app_status.isra.3>:
static void create_mod_app_status(struct net_buf_simple *msg,
   1cb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cb7c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1cb80:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1cb82:	4604      	mov	r4, r0
   1cb84:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   1cb86:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   1cb8a:	4690      	mov	r8, r2
   1cb8c:	461f      	mov	r7, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   1cb8e:	f7ff fc55 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   1cb92:	4649      	mov	r1, r9
   1cb94:	4620      	mov	r0, r4
   1cb96:	f002 fac0 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   1cb9a:	4641      	mov	r1, r8
   1cb9c:	4620      	mov	r0, r4
   1cb9e:	f002 fac4 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   1cba2:	4639      	mov	r1, r7
   1cba4:	4620      	mov	r0, r4
   1cba6:	f002 fac0 	bl	1f12a <net_buf_simple_add_le16>
	if (vnd) {
   1cbaa:	b14e      	cbz	r6, 1cbc0 <create_mod_app_status.isra.3+0x48>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   1cbac:	2104      	movs	r1, #4
   1cbae:	4620      	mov	r0, r4
   1cbb0:	f002 faa4 	bl	1f0fc <net_buf_simple_add>
   1cbb4:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   1cbb6:	4629      	mov	r1, r5
}
   1cbb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   1cbbc:	f7fd ba74 	b.w	1a0a8 <memcpy>
   1cbc0:	2102      	movs	r1, #2
   1cbc2:	4620      	mov	r0, r4
   1cbc4:	f002 fa9a 	bl	1f0fc <net_buf_simple_add>
   1cbc8:	2202      	movs	r2, #2
   1cbca:	e7f4      	b.n	1cbb6 <create_mod_app_status.isra.3+0x3e>

0001cbcc <send_mod_pub_status.isra.5>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   1cbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cbd0:	b08a      	sub	sp, #40	; 0x28
   1cbd2:	460f      	mov	r7, r1
   1cbd4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
   1cbd8:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   1cbdc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 14 + 4);
   1cbde:	a905      	add	r1, sp, #20
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   1cbe0:	4699      	mov	r9, r3
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 14 + 4);
   1cbe2:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   1cbe6:	e9cd 3103 	strd	r3, r1, [sp, #12]
   1cbea:	9102      	str	r1, [sp, #8]
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   1cbec:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   1cbee:	f248 0119 	movw	r1, #32793	; 0x8019
   1cbf2:	a802      	add	r0, sp, #8
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   1cbf4:	4692      	mov	sl, r2
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   1cbf6:	f7ff fc21 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1cbfa:	4629      	mov	r1, r5
   1cbfc:	a802      	add	r0, sp, #8
   1cbfe:	f002 fa8c 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1cc02:	4651      	mov	r1, sl
   1cc04:	a802      	add	r0, sp, #8
   1cc06:	f002 fa90 	bl	1f12a <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   1cc0a:	b1e5      	cbz	r5, 1cc46 <send_mod_pub_status.isra.5+0x7a>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   1cc0c:	2107      	movs	r1, #7
   1cc0e:	a802      	add	r0, sp, #8
   1cc10:	f002 fa74 	bl	1f0fc <net_buf_simple_add>
   1cc14:	2207      	movs	r2, #7
   1cc16:	2100      	movs	r1, #0
   1cc18:	f7fd fa70 	bl	1a0fc <memset>
	if (vnd) {
   1cc1c:	f1b8 0f00 	cmp.w	r8, #0
   1cc20:	d02f      	beq.n	1cc82 <send_mod_pub_status.isra.5+0xb6>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   1cc22:	2104      	movs	r1, #4
   1cc24:	a802      	add	r0, sp, #8
   1cc26:	f002 fa69 	bl	1f0fc <net_buf_simple_add>
   1cc2a:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1cc2c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1cc2e:	f7fd fa3b 	bl	1a0a8 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   1cc32:	2300      	movs	r3, #0
   1cc34:	9300      	str	r3, [sp, #0]
   1cc36:	aa02      	add	r2, sp, #8
   1cc38:	4639      	mov	r1, r7
   1cc3a:	4630      	mov	r0, r6
   1cc3c:	f7ff fc27 	bl	1c48e <bt_mesh_model_send>
}
   1cc40:	b00a      	add	sp, #40	; 0x28
   1cc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   1cc46:	4649      	mov	r1, r9
   1cc48:	a802      	add	r0, sp, #8
   1cc4a:	f002 fa6e 	bl	1f12a <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (u16_t)mod->pub->cred << 12;
   1cc4e:	6822      	ldr	r2, [r4, #0]
   1cc50:	7ad3      	ldrb	r3, [r2, #11]
   1cc52:	88d1      	ldrh	r1, [r2, #6]
   1cc54:	f3c3 1300 	ubfx	r3, r3, #4, #1
		net_buf_simple_add_le16(&msg, idx_cred);
   1cc58:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
   1cc5c:	a802      	add	r0, sp, #8
   1cc5e:	f002 fa64 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   1cc62:	6823      	ldr	r3, [r4, #0]
   1cc64:	a802      	add	r0, sp, #8
   1cc66:	7a19      	ldrb	r1, [r3, #8]
   1cc68:	f002 fa57 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   1cc6c:	6823      	ldr	r3, [r4, #0]
   1cc6e:	a802      	add	r0, sp, #8
   1cc70:	7a99      	ldrb	r1, [r3, #10]
   1cc72:	f002 fa52 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   1cc76:	6823      	ldr	r3, [r4, #0]
   1cc78:	a802      	add	r0, sp, #8
   1cc7a:	7a59      	ldrb	r1, [r3, #9]
   1cc7c:	f002 fa4d 	bl	1f11a <net_buf_simple_add_u8>
   1cc80:	e7cc      	b.n	1cc1c <send_mod_pub_status.isra.5+0x50>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1cc82:	2102      	movs	r1, #2
   1cc84:	a802      	add	r0, sp, #8
   1cc86:	f002 fa39 	bl	1f0fc <net_buf_simple_add>
   1cc8a:	2202      	movs	r2, #2
   1cc8c:	e7ce      	b.n	1cc2c <send_mod_pub_status.isra.5+0x60>

0001cc8e <get_model>:
{
   1cc8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   1cc90:	888b      	ldrh	r3, [r1, #4]
   1cc92:	2b03      	cmp	r3, #3
{
   1cc94:	4605      	mov	r5, r0
   1cc96:	460c      	mov	r4, r1
   1cc98:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   1cc9a:	4608      	mov	r0, r1
	if (buf->len < 4) {
   1cc9c:	d809      	bhi.n	1ccb2 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   1cc9e:	f002 fac0 	bl	1f222 <net_buf_simple_pull_le16>
		*vnd = false;
   1cca2:	2300      	movs	r3, #0
   1cca4:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   1cca6:	4601      	mov	r1, r0
   1cca8:	4628      	mov	r0, r5
}
   1ccaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   1ccae:	f7ff bc3f 	b.w	1c530 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   1ccb2:	f002 fab6 	bl	1f222 <net_buf_simple_pull_le16>
   1ccb6:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   1ccb8:	4620      	mov	r0, r4
   1ccba:	f002 fab2 	bl	1f222 <net_buf_simple_pull_le16>
		*vnd = true;
   1ccbe:	2301      	movs	r3, #1
   1ccc0:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   1ccc2:	4602      	mov	r2, r0
   1ccc4:	4639      	mov	r1, r7
   1ccc6:	4628      	mov	r0, r5
}
   1ccc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   1cccc:	f7ff bc19 	b.w	1c502 <bt_mesh_model_find_vnd>

0001ccd0 <mod_app_get>:
{
   1ccd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ccd4:	4614      	mov	r4, r2
   1ccd6:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + KEY_LIST_LEN + 4);
   1ccd8:	ab07      	add	r3, sp, #28
   1ccda:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   1ccde:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1cce0:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + KEY_LIST_LEN + 4);
   1cce2:	9304      	str	r3, [sp, #16]
   1cce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   1cce8:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   1ccea:	f002 fa9a 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ccee:	b203      	sxth	r3, r0
   1ccf0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1ccf2:	4681      	mov	r9, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ccf4:	dd2c      	ble.n	1cd50 <mod_app_get+0x80>
	mod_id = buf->data;
   1ccf6:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1ccfa:	f7f1 fb85 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1ccfe:	4605      	mov	r5, r0
   1cd00:	bb48      	cbnz	r0, 1cd56 <mod_app_get+0x86>
		vnd = (buf->len == 4);
   1cd02:	88a3      	ldrh	r3, [r4, #4]
   1cd04:	1f1a      	subs	r2, r3, #4
   1cd06:	4253      	negs	r3, r2
   1cd08:	4153      	adcs	r3, r2
   1cd0a:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   1cd0e:	2401      	movs	r4, #1
	if (vnd) {
   1cd10:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1cd14:	b34b      	cbz	r3, 1cd6a <mod_app_get+0x9a>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   1cd16:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   1cd1a:	a804      	add	r0, sp, #16
   1cd1c:	f7ff fb8e 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1cd20:	4621      	mov	r1, r4
   1cd22:	a804      	add	r0, sp, #16
   1cd24:	f002 f9f9 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1cd28:	4649      	mov	r1, r9
   1cd2a:	a804      	add	r0, sp, #16
   1cd2c:	f002 f9fd 	bl	1f12a <net_buf_simple_add_le16>
	if (vnd) {
   1cd30:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1cd34:	b1e3      	cbz	r3, 1cd70 <mod_app_get+0xa0>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   1cd36:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   1cd38:	4641      	mov	r1, r8
   1cd3a:	a804      	add	r0, sp, #16
   1cd3c:	f002 f9e4 	bl	1f108 <net_buf_simple_add_mem>
	if (mod) {
   1cd40:	b9c5      	cbnz	r5, 1cd74 <mod_app_get+0xa4>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1cd42:	2300      	movs	r3, #0
   1cd44:	9300      	str	r3, [sp, #0]
   1cd46:	aa04      	add	r2, sp, #16
   1cd48:	4639      	mov	r1, r7
   1cd4a:	4630      	mov	r0, r6
   1cd4c:	f7ff fb9f 	bl	1c48e <bt_mesh_model_send>
}
   1cd50:	b00d      	add	sp, #52	; 0x34
   1cd52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   1cd56:	4621      	mov	r1, r4
   1cd58:	f10d 020f 	add.w	r2, sp, #15
   1cd5c:	f7ff ff97 	bl	1cc8e <get_model>
		status = STATUS_INVALID_MODEL;
   1cd60:	1e05      	subs	r5, r0, #0
   1cd62:	bf14      	ite	ne
   1cd64:	2400      	movne	r4, #0
   1cd66:	2402      	moveq	r4, #2
   1cd68:	e7d2      	b.n	1cd10 <mod_app_get+0x40>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   1cd6a:	f248 014c 	movw	r1, #32844	; 0x804c
   1cd6e:	e7d4      	b.n	1cd1a <mod_app_get+0x4a>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   1cd70:	2202      	movs	r2, #2
   1cd72:	e7e1      	b.n	1cd38 <mod_app_get+0x68>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   1cd74:	89a9      	ldrh	r1, [r5, #12]
   1cd76:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cd7a:	4299      	cmp	r1, r3
   1cd7c:	d0e1      	beq.n	1cd42 <mod_app_get+0x72>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   1cd7e:	a804      	add	r0, sp, #16
   1cd80:	f002 f9d3 	bl	1f12a <net_buf_simple_add_le16>
   1cd84:	e7dd      	b.n	1cd42 <mod_app_get+0x72>

0001cd86 <mod_app_unbind>:
{
   1cd86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cd8a:	4614      	mov	r4, r2
   1cd8c:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   1cd8e:	ab06      	add	r3, sp, #24
   1cd90:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1cd94:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1cd96:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   1cd98:	9303      	str	r3, [sp, #12]
   1cd9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1cd9e:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   1cda0:	f002 fa3f 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1cda4:	b203      	sxth	r3, r0
   1cda6:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1cda8:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1cdaa:	dd20      	ble.n	1cdee <mod_app_unbind+0x68>
	key_app_idx = net_buf_simple_pull_le16(buf);
   1cdac:	4620      	mov	r0, r4
   1cdae:	f002 fa38 	bl	1f222 <net_buf_simple_pull_le16>
   1cdb2:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1cdb4:	4628      	mov	r0, r5
	mod_id = buf->data;
   1cdb6:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1cdba:	f7f1 fb25 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1cdbe:	b9c8      	cbnz	r0, 1cdf4 <mod_app_unbind+0x6e>
		vnd = (buf->len == 4);
   1cdc0:	88a3      	ldrh	r3, [r4, #4]
   1cdc2:	1f1a      	subs	r2, r3, #4
   1cdc4:	4253      	negs	r3, r2
   1cdc6:	4153      	adcs	r3, r2
   1cdc8:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   1cdcc:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1cdce:	e9cd 0900 	strd	r0, r9, [sp]
   1cdd2:	4633      	mov	r3, r6
   1cdd4:	462a      	mov	r2, r5
   1cdd6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1cdda:	a803      	add	r0, sp, #12
   1cddc:	f7ff fecc 	bl	1cb78 <create_mod_app_status.isra.3>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1cde0:	2300      	movs	r3, #0
   1cde2:	9300      	str	r3, [sp, #0]
   1cde4:	aa03      	add	r2, sp, #12
   1cde6:	4641      	mov	r1, r8
   1cde8:	4638      	mov	r0, r7
   1cdea:	f7ff fb50 	bl	1c48e <bt_mesh_model_send>
}
   1cdee:	b00b      	add	sp, #44	; 0x2c
   1cdf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   1cdf4:	4621      	mov	r1, r4
   1cdf6:	f10d 020b 	add.w	r2, sp, #11
   1cdfa:	f7ff ff48 	bl	1cc8e <get_model>
	if (!mod) {
   1cdfe:	4604      	mov	r4, r0
   1ce00:	b148      	cbz	r0, 1ce16 <mod_app_unbind+0x90>
	if (!app_key_is_valid(key_idx)) {
   1ce02:	4630      	mov	r0, r6
   1ce04:	f7f1 fcec 	bl	e7e0 <app_key_is_valid>
   1ce08:	b138      	cbz	r0, 1ce1a <mod_app_unbind+0x94>
   1ce0a:	2201      	movs	r2, #1
   1ce0c:	4631      	mov	r1, r6
   1ce0e:	4620      	mov	r0, r4
   1ce10:	f7ff fe93 	bl	1cb3a <mod_unbind.part.1>
   1ce14:	e7db      	b.n	1cdce <mod_app_unbind+0x48>
		status = STATUS_INVALID_MODEL;
   1ce16:	2002      	movs	r0, #2
   1ce18:	e7d9      	b.n	1cdce <mod_app_unbind+0x48>
		return STATUS_INVALID_APPKEY;
   1ce1a:	2003      	movs	r0, #3
   1ce1c:	e7d7      	b.n	1cdce <mod_app_unbind+0x48>

0001ce1e <mod_app_bind>:
{
   1ce1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ce22:	4614      	mov	r4, r2
   1ce24:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   1ce26:	ab06      	add	r3, sp, #24
   1ce28:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   1ce2c:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1ce2e:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   1ce30:	9303      	str	r3, [sp, #12]
   1ce32:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1ce36:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   1ce38:	f002 f9f3 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ce3c:	b203      	sxth	r3, r0
   1ce3e:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1ce40:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1ce42:	dd20      	ble.n	1ce86 <mod_app_bind+0x68>
	key_app_idx = net_buf_simple_pull_le16(buf);
   1ce44:	4620      	mov	r0, r4
   1ce46:	f002 f9ec 	bl	1f222 <net_buf_simple_pull_le16>
   1ce4a:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   1ce4c:	4630      	mov	r0, r6
	mod_id = buf->data;
   1ce4e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1ce52:	f7f1 fad9 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1ce56:	b9c8      	cbnz	r0, 1ce8c <mod_app_bind+0x6e>
		vnd = (buf->len == 4);
   1ce58:	88a3      	ldrh	r3, [r4, #4]
   1ce5a:	1f1a      	subs	r2, r3, #4
   1ce5c:	4253      	negs	r3, r2
   1ce5e:	4153      	adcs	r3, r2
   1ce60:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   1ce64:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1ce66:	e9cd 3900 	strd	r3, r9, [sp]
   1ce6a:	4632      	mov	r2, r6
   1ce6c:	462b      	mov	r3, r5
   1ce6e:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1ce72:	a803      	add	r0, sp, #12
   1ce74:	f7ff fe80 	bl	1cb78 <create_mod_app_status.isra.3>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1ce78:	2300      	movs	r3, #0
   1ce7a:	9300      	str	r3, [sp, #0]
   1ce7c:	aa03      	add	r2, sp, #12
   1ce7e:	4641      	mov	r1, r8
   1ce80:	4638      	mov	r0, r7
   1ce82:	f7ff fb04 	bl	1c48e <bt_mesh_model_send>
}
   1ce86:	b00b      	add	sp, #44	; 0x2c
   1ce88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   1ce8c:	4621      	mov	r1, r4
   1ce8e:	f10d 020b 	add.w	r2, sp, #11
   1ce92:	f7ff fefc 	bl	1cc8e <get_model>
	if (!mod) {
   1ce96:	4604      	mov	r4, r0
   1ce98:	b190      	cbz	r0, 1cec0 <mod_app_bind+0xa2>
	if (model == mod) {
   1ce9a:	42b8      	cmp	r0, r7
   1ce9c:	d012      	beq.n	1cec4 <mod_app_bind+0xa6>
	if (!app_key_is_valid(key_idx)) {
   1ce9e:	4628      	mov	r0, r5
   1cea0:	f7f1 fc9e 	bl	e7e0 <app_key_is_valid>
   1cea4:	b180      	cbz	r0, 1cec8 <mod_app_bind+0xaa>
		if (model->keys[i] == key_idx) {
   1cea6:	89a3      	ldrh	r3, [r4, #12]
   1cea8:	429d      	cmp	r5, r3
   1ceaa:	d007      	beq.n	1cebc <mod_app_bind+0x9e>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   1ceac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ceb0:	4293      	cmp	r3, r2
   1ceb2:	d10b      	bne.n	1cecc <mod_app_bind+0xae>
			model->keys[i] = key_idx;
   1ceb4:	81a5      	strh	r5, [r4, #12]
				bt_mesh_store_mod_bind(model);
   1ceb6:	4620      	mov	r0, r4
   1ceb8:	f001 f9bb 	bl	1e232 <bt_mesh_store_mod_bind>
			return STATUS_SUCCESS;
   1cebc:	2300      	movs	r3, #0
   1cebe:	e7d2      	b.n	1ce66 <mod_app_bind+0x48>
		status = STATUS_INVALID_MODEL;
   1cec0:	2302      	movs	r3, #2
   1cec2:	e7d0      	b.n	1ce66 <mod_app_bind+0x48>
		status = STATUS_CANNOT_BIND;
   1cec4:	230d      	movs	r3, #13
   1cec6:	e7ce      	b.n	1ce66 <mod_app_bind+0x48>
		return STATUS_INVALID_APPKEY;
   1cec8:	2303      	movs	r3, #3
   1ceca:	e7cc      	b.n	1ce66 <mod_app_bind+0x48>
	return STATUS_INSUFF_RESOURCES;
   1cecc:	2305      	movs	r3, #5
   1cece:	e7ca      	b.n	1ce66 <mod_app_bind+0x48>

0001ced0 <mod_pub_set>:
{
   1ced0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ced4:	4682      	mov	sl, r0
   1ced6:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   1ced8:	4610      	mov	r0, r2
{
   1ceda:	468b      	mov	fp, r1
   1cedc:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1cede:	f002 f9a0 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1cee2:	b203      	sxth	r3, r0
   1cee4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1cee6:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1cee8:	dd34      	ble.n	1cf54 <mod_pub_set+0x84>
	pub_addr = net_buf_simple_pull_le16(buf);
   1ceea:	4620      	mov	r0, r4
   1ceec:	f002 f999 	bl	1f222 <net_buf_simple_pull_le16>
   1cef0:	4607      	mov	r7, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   1cef2:	4620      	mov	r0, r4
   1cef4:	f002 f995 	bl	1f222 <net_buf_simple_pull_le16>
   1cef8:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   1cefa:	4620      	mov	r0, r4
   1cefc:	f002 f989 	bl	1f212 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1cf00:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1cf04:	b2db      	uxtb	r3, r3
   1cf06:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   1cf08:	4681      	mov	r9, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1cf0a:	d923      	bls.n	1cf54 <mod_pub_set+0x84>
	pub_period = net_buf_simple_pull_u8(buf);
   1cf0c:	4620      	mov	r0, r4
   1cf0e:	f002 f980 	bl	1f212 <net_buf_simple_pull_u8>
   1cf12:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   1cf14:	4620      	mov	r0, r4
   1cf16:	f002 f97c 	bl	1f212 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   1cf1a:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   1cf1c:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   1cf1e:	4630      	mov	r0, r6
	mod_id = buf->data;
   1cf20:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   1cf22:	f7f1 fa71 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1cf26:	4605      	mov	r5, r0
   1cf28:	b9b8      	cbnz	r0, 1cf5a <mod_pub_set+0x8a>
		vnd = (buf->len == 4);
   1cf2a:	88a3      	ldrh	r3, [r4, #4]
   1cf2c:	1f1a      	subs	r2, r3, #4
   1cf2e:	4253      	negs	r3, r2
   1cf30:	4153      	adcs	r3, r2
   1cf32:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   1cf36:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1cf38:	9b05      	ldr	r3, [sp, #20]
   1cf3a:	3508      	adds	r5, #8
   1cf3c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1cf40:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1cf44:	9300      	str	r3, [sp, #0]
   1cf46:	9501      	str	r5, [sp, #4]
   1cf48:	463b      	mov	r3, r7
   1cf4a:	4632      	mov	r2, r6
   1cf4c:	4659      	mov	r1, fp
   1cf4e:	4650      	mov	r0, sl
   1cf50:	f7ff fe3c 	bl	1cbcc <send_mod_pub_status.isra.5>
}
   1cf54:	b00b      	add	sp, #44	; 0x2c
   1cf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
   1cf5a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1cf5e:	4621      	mov	r1, r4
   1cf60:	f7ff fe95 	bl	1cc8e <get_model>
	if (!mod) {
   1cf64:	4605      	mov	r5, r0
   1cf66:	b170      	cbz	r0, 1cf86 <mod_pub_set+0xb6>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   1cf68:	2301      	movs	r3, #1
   1cf6a:	9303      	str	r3, [sp, #12]
   1cf6c:	9b07      	ldr	r3, [sp, #28]
   1cf6e:	9302      	str	r3, [sp, #8]
   1cf70:	9b06      	ldr	r3, [sp, #24]
   1cf72:	f3c8 020b 	ubfx	r2, r8, #0, #12
   1cf76:	e9cd 9300 	strd	r9, r3, [sp]
   1cf7a:	4639      	mov	r1, r7
   1cf7c:	f3c8 3300 	ubfx	r3, r8, #12, #1
   1cf80:	f7f1 fc4c 	bl	e81c <_mod_pub_set>
   1cf84:	e7d8      	b.n	1cf38 <mod_pub_set+0x68>
		status = STATUS_INVALID_MODEL;
   1cf86:	2002      	movs	r0, #2
   1cf88:	e7d6      	b.n	1cf38 <mod_pub_set+0x68>

0001cf8a <mod_pub_get>:
{
   1cf8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf8e:	4605      	mov	r5, r0
   1cf90:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   1cf92:	4610      	mov	r0, r2
{
   1cf94:	460e      	mov	r6, r1
   1cf96:	4690      	mov	r8, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1cf98:	f002 f943 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1cf9c:	b203      	sxth	r3, r0
   1cf9e:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1cfa0:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1cfa2:	dd26      	ble.n	1cff2 <mod_pub_get+0x68>
	mod_id = buf->data;
   1cfa4:	f8d8 7000 	ldr.w	r7, [r8]
	elem = bt_mesh_elem_find(elem_addr);
   1cfa8:	f7f1 fa2e 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1cfac:	4602      	mov	r2, r0
   1cfae:	b948      	cbnz	r0, 1cfc4 <mod_pub_get+0x3a>
		vnd = (buf->len == 4);
   1cfb0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1cfb4:	1f19      	subs	r1, r3, #4
   1cfb6:	424b      	negs	r3, r1
   1cfb8:	414b      	adcs	r3, r1
   1cfba:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1cfbe:	2101      	movs	r1, #1
	u16_t elem_addr, pub_addr = 0U;
   1cfc0:	4613      	mov	r3, r2
   1cfc2:	e00a      	b.n	1cfda <mod_pub_get+0x50>
	mod = get_model(elem, buf, &vnd);
   1cfc4:	f10d 0217 	add.w	r2, sp, #23
   1cfc8:	4641      	mov	r1, r8
   1cfca:	f7ff fe60 	bl	1cc8e <get_model>
	if (!mod) {
   1cfce:	4602      	mov	r2, r0
   1cfd0:	b190      	cbz	r0, 1cff8 <mod_pub_get+0x6e>
	if (!mod->pub) {
   1cfd2:	6883      	ldr	r3, [r0, #8]
   1cfd4:	b193      	cbz	r3, 1cffc <mod_pub_get+0x72>
	pub_addr = mod->pub->addr;
   1cfd6:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   1cfd8:	2100      	movs	r1, #0
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1cfda:	3208      	adds	r2, #8
   1cfdc:	9201      	str	r2, [sp, #4]
   1cfde:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1cfe2:	9200      	str	r2, [sp, #0]
   1cfe4:	e9cd 1702 	strd	r1, r7, [sp, #8]
   1cfe8:	4622      	mov	r2, r4
   1cfea:	4631      	mov	r1, r6
   1cfec:	4628      	mov	r0, r5
   1cfee:	f7ff fded 	bl	1cbcc <send_mod_pub_status.isra.5>
}
   1cff2:	b006      	add	sp, #24
   1cff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status = STATUS_INVALID_MODEL;
   1cff8:	2102      	movs	r1, #2
   1cffa:	e7e1      	b.n	1cfc0 <mod_pub_get+0x36>
		status = STATUS_NVAL_PUB_PARAM;
   1cffc:	2107      	movs	r1, #7
   1cffe:	e7ec      	b.n	1cfda <mod_pub_get+0x50>

0001d000 <mod_pub_va_set>:
{
   1d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d004:	4681      	mov	r9, r0
   1d006:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   1d008:	4610      	mov	r0, r2
{
   1d00a:	468a      	mov	sl, r1
   1d00c:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1d00e:	f002 f908 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1d012:	b203      	sxth	r3, r0
   1d014:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1d016:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1d018:	dd38      	ble.n	1d08c <mod_pub_va_set+0x8c>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1d01a:	2110      	movs	r1, #16
   1d01c:	4620      	mov	r0, r4
   1d01e:	f002 f8f0 	bl	1f202 <net_buf_simple_pull_mem>
   1d022:	4683      	mov	fp, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   1d024:	4620      	mov	r0, r4
   1d026:	f002 f8fc 	bl	1f222 <net_buf_simple_pull_le16>
   1d02a:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   1d02c:	4620      	mov	r0, r4
   1d02e:	f002 f8f0 	bl	1f212 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1d032:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1d036:	b2db      	uxtb	r3, r3
   1d038:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   1d03a:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   1d03c:	d926      	bls.n	1d08c <mod_pub_va_set+0x8c>
	pub_period = net_buf_simple_pull_u8(buf);
   1d03e:	4620      	mov	r0, r4
   1d040:	f002 f8e7 	bl	1f212 <net_buf_simple_pull_u8>
   1d044:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   1d046:	4620      	mov	r0, r4
   1d048:	f002 f8e3 	bl	1f212 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   1d04c:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   1d04e:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   1d050:	4630      	mov	r0, r6
	mod_id = buf->data;
   1d052:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   1d054:	f7f1 f9d8 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1d058:	4605      	mov	r5, r0
   1d05a:	b9d0      	cbnz	r0, 1d092 <mod_pub_va_set+0x92>
		vnd = (buf->len == 4);
   1d05c:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0U;
   1d05e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4);
   1d062:	1f1a      	subs	r2, r3, #4
   1d064:	4253      	negs	r3, r2
   1d066:	4153      	adcs	r3, r2
   1d068:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   1d06c:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1d06e:	9b05      	ldr	r3, [sp, #20]
   1d070:	3508      	adds	r5, #8
   1d072:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1d076:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1d07a:	9300      	str	r3, [sp, #0]
   1d07c:	9501      	str	r5, [sp, #4]
   1d07e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1d082:	4632      	mov	r2, r6
   1d084:	4651      	mov	r1, sl
   1d086:	4648      	mov	r0, r9
   1d088:	f7ff fda0 	bl	1cbcc <send_mod_pub_status.isra.5>
}
   1d08c:	b00b      	add	sp, #44	; 0x2c
   1d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
   1d092:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   1d096:	4621      	mov	r1, r4
   1d098:	f7ff fdf9 	bl	1cc8e <get_model>
	if (!mod) {
   1d09c:	4605      	mov	r5, r0
   1d09e:	b918      	cbnz	r0, 1d0a8 <mod_pub_va_set+0xa8>
		pub_addr = 0U;
   1d0a0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   1d0a4:	2002      	movs	r0, #2
		goto send_status;
   1d0a6:	e7e2      	b.n	1d06e <mod_pub_va_set+0x6e>
	status = va_add(label_uuid, &pub_addr);
   1d0a8:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   1d0ac:	4658      	mov	r0, fp
   1d0ae:	f7f1 fcdd 	bl	ea6c <va_add>
	if (status == STATUS_SUCCESS) {
   1d0b2:	2800      	cmp	r0, #0
   1d0b4:	d1db      	bne.n	1d06e <mod_pub_va_set+0x6e>
		status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag,
   1d0b6:	2301      	movs	r3, #1
   1d0b8:	9303      	str	r3, [sp, #12]
   1d0ba:	9b07      	ldr	r3, [sp, #28]
   1d0bc:	9302      	str	r3, [sp, #8]
   1d0be:	9b06      	ldr	r3, [sp, #24]
   1d0c0:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   1d0c4:	e9cd 8300 	strd	r8, r3, [sp]
   1d0c8:	f3c7 020b 	ubfx	r2, r7, #0, #12
   1d0cc:	f3c7 3300 	ubfx	r3, r7, #12, #1
   1d0d0:	4628      	mov	r0, r5
   1d0d2:	f7f1 fba3 	bl	e81c <_mod_pub_set>
   1d0d6:	e7ca      	b.n	1d06e <mod_pub_va_set+0x6e>

0001d0d8 <mod_sub_del>:
{
   1d0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d0dc:	4607      	mov	r7, r0
   1d0de:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   1d0e0:	4610      	mov	r0, r2
{
   1d0e2:	4688      	mov	r8, r1
   1d0e4:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1d0e6:	f002 f89c 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1d0ea:	b203      	sxth	r3, r0
   1d0ec:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1d0ee:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1d0f0:	dd32      	ble.n	1d158 <mod_sub_del+0x80>
	sub_addr = net_buf_simple_pull_le16(buf);
   1d0f2:	4620      	mov	r0, r4
   1d0f4:	f002 f895 	bl	1f222 <net_buf_simple_pull_le16>
   1d0f8:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1d0fa:	4628      	mov	r0, r5
	mod_id = buf->data;
   1d0fc:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1d100:	f7f1 f982 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1d104:	b938      	cbnz	r0, 1d116 <mod_sub_del+0x3e>
		vnd = (buf->len == 4);
   1d106:	88a3      	ldrh	r3, [r4, #4]
   1d108:	1f1a      	subs	r2, r3, #4
   1d10a:	4253      	negs	r3, r2
   1d10c:	4153      	adcs	r3, r2
   1d10e:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1d112:	2201      	movs	r2, #1
   1d114:	e016      	b.n	1d144 <mod_sub_del+0x6c>
	mod = get_model(elem, buf, &vnd);
   1d116:	f10d 0217 	add.w	r2, sp, #23
   1d11a:	4621      	mov	r1, r4
   1d11c:	f7ff fdb7 	bl	1cc8e <get_model>
	if (!mod) {
   1d120:	4682      	mov	sl, r0
   1d122:	b1e0      	cbz	r0, 1d15e <mod_sub_del+0x86>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   1d124:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   1d128:	b29b      	uxth	r3, r3
   1d12a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   1d12e:	d8f0      	bhi.n	1d112 <mod_sub_del+0x3a>
	match = bt_mesh_model_find_group(mod, sub_addr);
   1d130:	4631      	mov	r1, r6
   1d132:	f7ff f95d 	bl	1c3f0 <bt_mesh_model_find_group>
	if (match) {
   1d136:	2400      	movs	r4, #0
   1d138:	b198      	cbz	r0, 1d162 <mod_sub_del+0x8a>
		*match = BT_MESH_ADDR_UNASSIGNED;
   1d13a:	8004      	strh	r4, [r0, #0]
			bt_mesh_store_mod_sub(mod);
   1d13c:	4650      	mov	r0, sl
   1d13e:	f001 f87f 	bl	1e240 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   1d142:	4622      	mov	r2, r4
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1d144:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1d148:	9600      	str	r6, [sp, #0]
   1d14a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1d14e:	4641      	mov	r1, r8
   1d150:	462b      	mov	r3, r5
   1d152:	4638      	mov	r0, r7
   1d154:	f7ff fb4f 	bl	1c7f6 <send_mod_sub_status>
}
   1d158:	b006      	add	sp, #24
   1d15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = STATUS_INVALID_MODEL;
   1d15e:	2202      	movs	r2, #2
   1d160:	e7f0      	b.n	1d144 <mod_sub_del+0x6c>
	status = STATUS_SUCCESS;
   1d162:	4602      	mov	r2, r0
   1d164:	e7ee      	b.n	1d144 <mod_sub_del+0x6c>

0001d166 <mod_sub_va_add>:
{
   1d166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d16a:	4607      	mov	r7, r0
   1d16c:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   1d16e:	4610      	mov	r0, r2
{
   1d170:	4688      	mov	r8, r1
   1d172:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1d174:	f002 f855 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1d178:	b203      	sxth	r3, r0
   1d17a:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1d17c:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1d17e:	dd20      	ble.n	1d1c2 <mod_sub_va_add+0x5c>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1d180:	2110      	movs	r1, #16
   1d182:	4620      	mov	r0, r4
   1d184:	f002 f83d 	bl	1f202 <net_buf_simple_pull_mem>
   1d188:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   1d18a:	4630      	mov	r0, r6
	mod_id = buf->data;
   1d18c:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1d190:	f7f1 f93a 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1d194:	b9c0      	cbnz	r0, 1d1c8 <mod_sub_va_add+0x62>
		vnd = (buf->len == 4);
   1d196:	88a3      	ldrh	r3, [r4, #4]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1d198:	f8ad 0016 	strh.w	r0, [sp, #22]
		vnd = (buf->len == 4);
   1d19c:	1f19      	subs	r1, r3, #4
   1d19e:	424b      	negs	r3, r1
   1d1a0:	414b      	adcs	r3, r1
   1d1a2:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   1d1a6:	2501      	movs	r5, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1d1a8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1d1ac:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1d1b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1d1b4:	9300      	str	r3, [sp, #0]
   1d1b6:	462a      	mov	r2, r5
   1d1b8:	4633      	mov	r3, r6
   1d1ba:	4641      	mov	r1, r8
   1d1bc:	4638      	mov	r0, r7
   1d1be:	f7ff fb1a 	bl	1c7f6 <send_mod_sub_status>
}
   1d1c2:	b007      	add	sp, #28
   1d1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   1d1c8:	4621      	mov	r1, r4
   1d1ca:	f10d 0215 	add.w	r2, sp, #21
   1d1ce:	f7ff fd5e 	bl	1cc8e <get_model>
	if (!mod) {
   1d1d2:	4604      	mov	r4, r0
   1d1d4:	b918      	cbnz	r0, 1d1de <mod_sub_va_add+0x78>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1d1d6:	f8ad 0016 	strh.w	r0, [sp, #22]
		status = STATUS_INVALID_MODEL;
   1d1da:	2502      	movs	r5, #2
		goto send_status;
   1d1dc:	e7e4      	b.n	1d1a8 <mod_sub_va_add+0x42>
	status = va_add(label_uuid, &sub_addr);
   1d1de:	4628      	mov	r0, r5
   1d1e0:	f10d 0116 	add.w	r1, sp, #22
   1d1e4:	f7f1 fc42 	bl	ea6c <va_add>
	if (status != STATUS_SUCCESS) {
   1d1e8:	4605      	mov	r5, r0
   1d1ea:	2800      	cmp	r0, #0
   1d1ec:	d1dc      	bne.n	1d1a8 <mod_sub_va_add+0x42>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
   1d1ee:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1d1f2:	4620      	mov	r0, r4
   1d1f4:	f7ff f8fc 	bl	1c3f0 <bt_mesh_model_find_group>
   1d1f8:	2800      	cmp	r0, #0
   1d1fa:	d1d5      	bne.n	1d1a8 <mod_sub_va_add+0x42>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   1d1fc:	89e3      	ldrh	r3, [r4, #14]
   1d1fe:	b163      	cbz	r3, 1d21a <mod_sub_va_add+0xb4>
   1d200:	8a23      	ldrh	r3, [r4, #16]
   1d202:	b963      	cbnz	r3, 1d21e <mod_sub_va_add+0xb8>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1d204:	2301      	movs	r3, #1
			mod->groups[i] = sub_addr;
   1d206:	3304      	adds	r3, #4
   1d208:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   1d20c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1d210:	80da      	strh	r2, [r3, #6]
			bt_mesh_store_mod_sub(mod);
   1d212:	4620      	mov	r0, r4
   1d214:	f001 f814 	bl	1e240 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   1d218:	e7c6      	b.n	1d1a8 <mod_sub_va_add+0x42>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
   1d21a:	462b      	mov	r3, r5
   1d21c:	e7f3      	b.n	1d206 <mod_sub_va_add+0xa0>
		status = STATUS_INSUFF_RESOURCES;
   1d21e:	2505      	movs	r5, #5
   1d220:	e7c2      	b.n	1d1a8 <mod_sub_va_add+0x42>

0001d222 <mod_sub_add>:
{
   1d222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d226:	4607      	mov	r7, r0
   1d228:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   1d22a:	4610      	mov	r0, r2
{
   1d22c:	4688      	mov	r8, r1
   1d22e:	4615      	mov	r5, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1d230:	f001 fff7 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1d234:	b203      	sxth	r3, r0
   1d236:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1d238:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1d23a:	dd39      	ble.n	1d2b0 <mod_sub_add+0x8e>
	sub_addr = net_buf_simple_pull_le16(buf);
   1d23c:	4628      	mov	r0, r5
   1d23e:	f001 fff0 	bl	1f222 <net_buf_simple_pull_le16>
   1d242:	4604      	mov	r4, r0
	elem = bt_mesh_elem_find(elem_addr);
   1d244:	4630      	mov	r0, r6
	mod_id = buf->data;
   1d246:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
   1d24a:	f7f1 f8dd 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1d24e:	b938      	cbnz	r0, 1d260 <mod_sub_add+0x3e>
		vnd = (buf->len == 4);
   1d250:	88ab      	ldrh	r3, [r5, #4]
   1d252:	1f1a      	subs	r2, r3, #4
   1d254:	4253      	negs	r3, r2
   1d256:	4153      	adcs	r3, r2
   1d258:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1d25c:	2201      	movs	r2, #1
   1d25e:	e01d      	b.n	1d29c <mod_sub_add+0x7a>
	mod = get_model(elem, buf, &vnd);
   1d260:	4629      	mov	r1, r5
   1d262:	f10d 0217 	add.w	r2, sp, #23
   1d266:	f7ff fd12 	bl	1cc8e <get_model>
	if (!mod) {
   1d26a:	4605      	mov	r5, r0
   1d26c:	b1a8      	cbz	r0, 1d29a <mod_sub_add+0x78>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   1d26e:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
   1d272:	b29b      	uxth	r3, r3
   1d274:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   1d278:	d8f0      	bhi.n	1d25c <mod_sub_add+0x3a>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
   1d27a:	4621      	mov	r1, r4
   1d27c:	f7ff f8b8 	bl	1c3f0 <bt_mesh_model_find_group>
   1d280:	b938      	cbnz	r0, 1d292 <mod_sub_add+0x70>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   1d282:	89eb      	ldrh	r3, [r5, #14]
   1d284:	b13b      	cbz	r3, 1d296 <mod_sub_add+0x74>
   1d286:	8a2b      	ldrh	r3, [r5, #16]
   1d288:	b9ab      	cbnz	r3, 1d2b6 <mod_sub_add+0x94>
			mod->groups[i] = sub_addr;
   1d28a:	822c      	strh	r4, [r5, #16]
			bt_mesh_store_mod_sub(mod);
   1d28c:	4628      	mov	r0, r5
   1d28e:	f000 ffd7 	bl	1e240 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   1d292:	2200      	movs	r2, #0
   1d294:	e002      	b.n	1d29c <mod_sub_add+0x7a>
			mod->groups[i] = sub_addr;
   1d296:	81ec      	strh	r4, [r5, #14]
	if (i == ARRAY_SIZE(mod->groups)) {
   1d298:	e7f8      	b.n	1d28c <mod_sub_add+0x6a>
		status = STATUS_INVALID_MODEL;
   1d29a:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1d29c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1d2a0:	9400      	str	r4, [sp, #0]
   1d2a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1d2a6:	4641      	mov	r1, r8
   1d2a8:	4633      	mov	r3, r6
   1d2aa:	4638      	mov	r0, r7
   1d2ac:	f7ff faa3 	bl	1c7f6 <send_mod_sub_status>
}
   1d2b0:	b007      	add	sp, #28
   1d2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INSUFF_RESOURCES;
   1d2b6:	2205      	movs	r2, #5
   1d2b8:	e7f0      	b.n	1d29c <mod_sub_add+0x7a>

0001d2ba <dev_comp_data_get>:
{
   1d2ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2be:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1d2c0:	ab06      	add	r3, sp, #24
{
   1d2c2:	4680      	mov	r8, r0
   1d2c4:	4689      	mov	r9, r1
	page = net_buf_simple_pull_u8(buf);
   1d2c6:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1d2c8:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   1d2cc:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1d2d0:	9303      	str	r3, [sp, #12]
	page = net_buf_simple_pull_u8(buf);
   1d2d2:	f001 ff9e 	bl	1f212 <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   1d2d6:	2102      	movs	r1, #2
   1d2d8:	a803      	add	r0, sp, #12
   1d2da:	f7ff f8af 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   1d2de:	2100      	movs	r1, #0
   1d2e0:	a803      	add	r0, sp, #12
   1d2e2:	f001 ff1a 	bl	1f11a <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   1d2e6:	f7f1 fa75 	bl	e7d4 <bt_mesh_comp_get>
   1d2ea:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   1d2ec:	8801      	ldrh	r1, [r0, #0]
   1d2ee:	a803      	add	r0, sp, #12
   1d2f0:	f001 ff1b 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   1d2f4:	8869      	ldrh	r1, [r5, #2]
   1d2f6:	a803      	add	r0, sp, #12
   1d2f8:	f001 ff17 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   1d2fc:	88a9      	ldrh	r1, [r5, #4]
   1d2fe:	a803      	add	r0, sp, #12
   1d300:	f001 ff13 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   1d304:	2180      	movs	r1, #128	; 0x80
   1d306:	a803      	add	r0, sp, #12
   1d308:	f001 ff0f 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   1d30c:	2103      	movs	r1, #3
   1d30e:	a803      	add	r0, sp, #12
   1d310:	f001 ff0b 	bl	1f12a <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   1d314:	2600      	movs	r6, #0
		net_buf_simple_add_le16(buf, mod->id);
   1d316:	271c      	movs	r7, #28
	for (i = 0; i < comp->elem_count; i++) {
   1d318:	68ab      	ldr	r3, [r5, #8]
   1d31a:	42b3      	cmp	r3, r6
   1d31c:	d809      	bhi.n	1d332 <dev_comp_data_get+0x78>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1d31e:	2300      	movs	r3, #0
   1d320:	9300      	str	r3, [sp, #0]
   1d322:	aa03      	add	r2, sp, #12
   1d324:	4649      	mov	r1, r9
   1d326:	4640      	mov	r0, r8
   1d328:	f7ff f8b1 	bl	1c48e <bt_mesh_model_send>
}
   1d32c:	b019      	add	sp, #100	; 0x64
   1d32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   1d332:	68ec      	ldr	r4, [r5, #12]
   1d334:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
   1d338:	a803      	add	r0, sp, #12
   1d33a:	f001 ff9a 	bl	1f272 <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2) + (elem->vnd_model_count * 2)) {
   1d33e:	7923      	ldrb	r3, [r4, #4]
   1d340:	7962      	ldrb	r2, [r4, #5]
   1d342:	4413      	add	r3, r2
   1d344:	3302      	adds	r3, #2
	if (net_buf_simple_tailroom(buf) <
   1d346:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   1d34a:	d3ef      	bcc.n	1d32c <dev_comp_data_get+0x72>
	net_buf_simple_add_le16(buf, elem->loc);
   1d34c:	8861      	ldrh	r1, [r4, #2]
   1d34e:	a803      	add	r0, sp, #12
   1d350:	f001 feeb 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   1d354:	7921      	ldrb	r1, [r4, #4]
   1d356:	a803      	add	r0, sp, #12
   1d358:	f001 fedf 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   1d35c:	7961      	ldrb	r1, [r4, #5]
   1d35e:	a803      	add	r0, sp, #12
   1d360:	f001 fedb 	bl	1f11a <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   1d364:	f04f 0a00 	mov.w	sl, #0
   1d368:	7923      	ldrb	r3, [r4, #4]
   1d36a:	459a      	cmp	sl, r3
   1d36c:	db06      	blt.n	1d37c <dev_comp_data_get+0xc2>
	for (i = 0; i < elem->vnd_model_count; i++) {
   1d36e:	f04f 0a00 	mov.w	sl, #0
   1d372:	7963      	ldrb	r3, [r4, #5]
   1d374:	459a      	cmp	sl, r3
   1d376:	db0b      	blt.n	1d390 <dev_comp_data_get+0xd6>
	for (i = 0; i < comp->elem_count; i++) {
   1d378:	3601      	adds	r6, #1
   1d37a:	e7cd      	b.n	1d318 <dev_comp_data_get+0x5e>
		net_buf_simple_add_le16(buf, mod->id);
   1d37c:	fb07 f30a 	mul.w	r3, r7, sl
   1d380:	68a2      	ldr	r2, [r4, #8]
   1d382:	a803      	add	r0, sp, #12
   1d384:	5ad1      	ldrh	r1, [r2, r3]
   1d386:	f001 fed0 	bl	1f12a <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   1d38a:	f10a 0a01 	add.w	sl, sl, #1
   1d38e:	e7eb      	b.n	1d368 <dev_comp_data_get+0xae>
		mod = &elem->vnd_models[i];
   1d390:	68e2      	ldr	r2, [r4, #12]
   1d392:	fb07 f30a 	mul.w	r3, r7, sl
   1d396:	eb02 0b03 	add.w	fp, r2, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   1d39a:	5ad1      	ldrh	r1, [r2, r3]
   1d39c:	a803      	add	r0, sp, #12
   1d39e:	f001 fec4 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   1d3a2:	f8bb 1002 	ldrh.w	r1, [fp, #2]
   1d3a6:	a803      	add	r0, sp, #12
   1d3a8:	f001 febf 	bl	1f12a <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   1d3ac:	f10a 0a01 	add.w	sl, sl, #1
   1d3b0:	e7df      	b.n	1d372 <dev_comp_data_get+0xb8>

0001d3b2 <app_key_update>:
{
   1d3b2:	b570      	push	{r4, r5, r6, lr}
   1d3b4:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d3b6:	ab04      	add	r3, sp, #16
{
   1d3b8:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d3ba:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1d3be:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   1d3c2:	4605      	mov	r5, r0
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1d3c4:	f10d 020e 	add.w	r2, sp, #14
{
   1d3c8:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1d3ca:	4620      	mov	r0, r4
   1d3cc:	a903      	add	r1, sp, #12
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d3ce:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1d3d0:	f7ff fba0 	bl	1cb14 <key_idx_unpack>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1d3d4:	a807      	add	r0, sp, #28
   1d3d6:	f248 0103 	movw	r1, #32771	; 0x8003
   1d3da:	f7ff f82f 	bl	1c43c <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, true);
   1d3de:	2301      	movs	r3, #1
   1d3e0:	6822      	ldr	r2, [r4, #0]
   1d3e2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d3e6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1d3ea:	f7f1 fbe9 	bl	ebc0 <app_key_set>
	net_buf_simple_add_u8(&msg, status);
   1d3ee:	4601      	mov	r1, r0
   1d3f0:	a807      	add	r0, sp, #28
   1d3f2:	f001 fe92 	bl	1f11a <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   1d3f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1d3fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1d3fe:	a807      	add	r0, sp, #28
   1d400:	f7ff f8aa 	bl	1c558 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d404:	2300      	movs	r3, #0
   1d406:	9300      	str	r3, [sp, #0]
   1d408:	aa07      	add	r2, sp, #28
   1d40a:	4631      	mov	r1, r6
   1d40c:	4628      	mov	r0, r5
   1d40e:	f7ff f83e 	bl	1c48e <bt_mesh_model_send>
}
   1d412:	b00a      	add	sp, #40	; 0x28
   1d414:	bd70      	pop	{r4, r5, r6, pc}

0001d416 <app_key_add>:
{
   1d416:	b570      	push	{r4, r5, r6, lr}
   1d418:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d41a:	ab04      	add	r3, sp, #16
{
   1d41c:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d41e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1d422:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   1d426:	4605      	mov	r5, r0
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1d428:	f10d 020e 	add.w	r2, sp, #14
{
   1d42c:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1d42e:	4620      	mov	r0, r4
   1d430:	a903      	add	r1, sp, #12
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d432:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1d434:	f7ff fb6e 	bl	1cb14 <key_idx_unpack>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1d438:	a807      	add	r0, sp, #28
   1d43a:	f248 0103 	movw	r1, #32771	; 0x8003
   1d43e:	f7fe fffd 	bl	1c43c <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, false);
   1d442:	2300      	movs	r3, #0
   1d444:	6822      	ldr	r2, [r4, #0]
   1d446:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d44a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1d44e:	f7f1 fbb7 	bl	ebc0 <app_key_set>
	net_buf_simple_add_u8(&msg, status);
   1d452:	4601      	mov	r1, r0
   1d454:	a807      	add	r0, sp, #28
   1d456:	f001 fe60 	bl	1f11a <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   1d45a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1d45e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1d462:	a807      	add	r0, sp, #28
   1d464:	f7ff f878 	bl	1c558 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d468:	2300      	movs	r3, #0
   1d46a:	9300      	str	r3, [sp, #0]
   1d46c:	aa07      	add	r2, sp, #28
   1d46e:	4631      	mov	r1, r6
   1d470:	4628      	mov	r0, r5
   1d472:	f7ff f80c 	bl	1c48e <bt_mesh_model_send>
}
   1d476:	b00a      	add	sp, #40	; 0x28
   1d478:	bd70      	pop	{r4, r5, r6, pc}

0001d47a <hb_pwr2.constprop.10>:
	if (!val) {
   1d47a:	b158      	cbz	r0, 1d494 <hb_pwr2.constprop.10+0x1a>
	} else if (val == 0xff || val == 0x11) {
   1d47c:	28ff      	cmp	r0, #255	; 0xff
   1d47e:	d007      	beq.n	1d490 <hb_pwr2.constprop.10+0x16>
   1d480:	2811      	cmp	r0, #17
   1d482:	d005      	beq.n	1d490 <hb_pwr2.constprop.10+0x16>
		return (1 << (val - sub));
   1d484:	2301      	movs	r3, #1
   1d486:	3801      	subs	r0, #1
   1d488:	fa03 f000 	lsl.w	r0, r3, r0
   1d48c:	b280      	uxth	r0, r0
   1d48e:	4770      	bx	lr
		return 0xffff;
   1d490:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1d494:	4770      	bx	lr

0001d496 <_mod_unbind>:
{
   1d496:	b570      	push	{r4, r5, r6, lr}
   1d498:	9d04      	ldr	r5, [sp, #16]
	mod_unbind(mod, data->app_idx, data->store);
   1d49a:	882c      	ldrh	r4, [r5, #0]
{
   1d49c:	4606      	mov	r6, r0
	if (!app_key_is_valid(key_idx)) {
   1d49e:	4620      	mov	r0, r4
   1d4a0:	f7f1 f99e 	bl	e7e0 <app_key_is_valid>
   1d4a4:	b130      	cbz	r0, 1d4b4 <_mod_unbind+0x1e>
   1d4a6:	78aa      	ldrb	r2, [r5, #2]
   1d4a8:	4621      	mov	r1, r4
   1d4aa:	4630      	mov	r0, r6
}
   1d4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d4b0:	f7ff bb43 	b.w	1cb3a <mod_unbind.part.1>
   1d4b4:	bd70      	pop	{r4, r5, r6, pc}

0001d4b6 <hb_sub_send_status.constprop.9>:
static void hb_sub_send_status(struct bt_mesh_model *model,
   1d4b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1d4ba:	6985      	ldr	r5, [r0, #24]
static void hb_sub_send_status(struct bt_mesh_model *model,
   1d4bc:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 9 + 4);
   1d4be:	ab06      	add	r3, sp, #24
   1d4c0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d4c4:	9303      	str	r3, [sp, #12]
   1d4c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
static void hb_sub_send_status(struct bt_mesh_model *model,
   1d4ca:	4682      	mov	sl, r0
   1d4cc:	468b      	mov	fp, r1
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t)
   1d4ce:	f002 fb8a 	bl	1fbe6 <z_impl_k_uptime_get>
	if (uptime > cfg->hb_sub.expiry) {
   1d4d2:	e9d5 890e 	ldrd	r8, r9, [r5, #56]	; 0x38
   1d4d6:	4580      	cmp	r8, r0
   1d4d8:	eb79 0301 	sbcs.w	r3, r9, r1
   1d4dc:	db4e      	blt.n	1d57c <hb_sub_send_status.constprop.9+0xc6>
		period = (cfg->hb_sub.expiry - uptime) / 1000;
   1d4de:	ebb8 0000 	subs.w	r0, r8, r0
   1d4e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d4e6:	f04f 0300 	mov.w	r3, #0
   1d4ea:	eb69 0101 	sbc.w	r1, r9, r1
   1d4ee:	f7e3 fb55 	bl	b9c <__aeabi_ldivmod>
   1d4f2:	b284      	uxth	r4, r0
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   1d4f4:	f248 013c 	movw	r1, #32828	; 0x803c
   1d4f8:	a803      	add	r0, sp, #12
   1d4fa:	f7fe ff9f 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1d4fe:	2100      	movs	r1, #0
   1d500:	a803      	add	r0, sp, #12
   1d502:	f001 fe0a 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.src);
   1d506:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
   1d50a:	a803      	add	r0, sp, #12
   1d50c:	f001 fe0d 	bl	1f12a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.dst);
   1d510:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
   1d514:	a803      	add	r0, sp, #12
   1d516:	f001 fe08 	bl	1f12a <net_buf_simple_add_le16>
	if (!val) {
   1d51a:	b38c      	cbz	r4, 1d580 <hb_sub_send_status.constprop.9+0xca>
	} else if (val == 0xffff) {
   1d51c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d520:	429c      	cmp	r4, r3
   1d522:	d02f      	beq.n	1d584 <hb_sub_send_status.constprop.9+0xce>
		return 32 - __builtin_clz(val);
   1d524:	fab4 f484 	clz	r4, r4
   1d528:	f1c4 0420 	rsb	r4, r4, #32
   1d52c:	b2e1      	uxtb	r1, r4
	net_buf_simple_add_u8(&msg, hb_log(period));
   1d52e:	a803      	add	r0, sp, #12
   1d530:	f001 fdf3 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   1d534:	f8b5 1044 	ldrh.w	r1, [r5, #68]	; 0x44
	if (!val) {
   1d538:	b149      	cbz	r1, 1d54e <hb_sub_send_status.constprop.9+0x98>
	} else if (val == 0xffff) {
   1d53a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d53e:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   1d540:	bf1d      	ittte	ne
   1d542:	fab1 f181 	clzne	r1, r1
   1d546:	f1c1 0120 	rsbne	r1, r1, #32
   1d54a:	b2c9      	uxtbne	r1, r1
		return 0xff;
   1d54c:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   1d54e:	a803      	add	r0, sp, #12
   1d550:	f001 fde3 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.min_hops);
   1d554:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
   1d558:	a803      	add	r0, sp, #12
   1d55a:	f001 fdde 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.max_hops);
   1d55e:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
   1d562:	a803      	add	r0, sp, #12
   1d564:	f001 fdd9 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d568:	2300      	movs	r3, #0
   1d56a:	9300      	str	r3, [sp, #0]
   1d56c:	aa03      	add	r2, sp, #12
   1d56e:	4659      	mov	r1, fp
   1d570:	4650      	mov	r0, sl
   1d572:	f7fe ff8c 	bl	1c48e <bt_mesh_model_send>
}
   1d576:	b00b      	add	sp, #44	; 0x2c
   1d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period = 0U;
   1d57c:	2400      	movs	r4, #0
   1d57e:	e7b9      	b.n	1d4f4 <hb_sub_send_status.constprop.9+0x3e>
		return 0x00;
   1d580:	4621      	mov	r1, r4
   1d582:	e7d4      	b.n	1d52e <hb_sub_send_status.constprop.9+0x78>
		return 0xff;
   1d584:	21ff      	movs	r1, #255	; 0xff
   1d586:	e7d2      	b.n	1d52e <hb_sub_send_status.constprop.9+0x78>

0001d588 <heartbeat_sub_get>:
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   1d588:	f7ff bf95 	b.w	1d4b6 <hb_sub_send_status.constprop.9>

0001d58c <heartbeat_sub_set>:
{
   1d58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1d590:	6985      	ldr	r5, [r0, #24]
{
   1d592:	4607      	mov	r7, r0
	sub_src = net_buf_simple_pull_le16(buf);
   1d594:	4610      	mov	r0, r2
{
   1d596:	4614      	mov	r4, r2
   1d598:	4688      	mov	r8, r1
	sub_src = net_buf_simple_pull_le16(buf);
   1d59a:	f001 fe42 	bl	1f222 <net_buf_simple_pull_le16>
   1d59e:	4681      	mov	r9, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   1d5a0:	4620      	mov	r0, r4
   1d5a2:	f001 fe3e 	bl	1f222 <net_buf_simple_pull_le16>
   1d5a6:	4606      	mov	r6, r0
	sub_period = net_buf_simple_pull_u8(buf);
   1d5a8:	4620      	mov	r0, r4
   1d5aa:	f001 fe32 	bl	1f212 <net_buf_simple_pull_u8>
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   1d5ae:	f419 4f00 	tst.w	r9, #32768	; 0x8000
	sub_period = net_buf_simple_pull_u8(buf);
   1d5b2:	4604      	mov	r4, r0
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   1d5b4:	d10f      	bne.n	1d5d6 <heartbeat_sub_set+0x4a>
	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
   1d5b6:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
   1d5ba:	b29b      	uxth	r3, r3
   1d5bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1d5c0:	d309      	bcc.n	1d5d6 <heartbeat_sub_set+0x4a>
   1d5c2:	f506 7380 	add.w	r3, r6, #256	; 0x100
   1d5c6:	b29b      	uxth	r3, r3
   1d5c8:	2bfb      	cmp	r3, #251	; 0xfb
   1d5ca:	d904      	bls.n	1d5d6 <heartbeat_sub_set+0x4a>
   1d5cc:	b233      	sxth	r3, r6
   1d5ce:	2b00      	cmp	r3, #0
   1d5d0:	dc03      	bgt.n	1d5da <heartbeat_sub_set+0x4e>
	if (sub_period > 0x11) {
   1d5d2:	2c11      	cmp	r4, #17
   1d5d4:	d906      	bls.n	1d5e4 <heartbeat_sub_set+0x58>
}
   1d5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	     sub_dst != bt_mesh_primary_addr())) {
   1d5da:	f7f0 ff0f 	bl	e3fc <bt_mesh_primary_addr>
	    (BT_MESH_ADDR_IS_UNICAST(sub_dst) &&
   1d5de:	4286      	cmp	r6, r0
   1d5e0:	d1f9      	bne.n	1d5d6 <heartbeat_sub_set+0x4a>
   1d5e2:	e7f6      	b.n	1d5d2 <heartbeat_sub_set+0x46>
	if (sub_src == BT_MESH_ADDR_UNASSIGNED ||
   1d5e4:	f1b9 0f00 	cmp.w	r9, #0
   1d5e8:	d00f      	beq.n	1d60a <heartbeat_sub_set+0x7e>
   1d5ea:	b176      	cbz	r6, 1d60a <heartbeat_sub_set+0x7e>
	    sub_dst == BT_MESH_ADDR_UNASSIGNED ||
   1d5ec:	b194      	cbz	r4, 1d614 <heartbeat_sub_set+0x88>
		cfg->hb_sub.count = 0;
   1d5ee:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
		period_ms = hb_pwr2(sub_period, 1) * 1000;
   1d5f2:	4620      	mov	r0, r4
		cfg->hb_sub.src = sub_src;
   1d5f4:	f8a5 9040 	strh.w	r9, [r5, #64]	; 0x40
		cfg->hb_sub.dst = sub_dst;
   1d5f8:	f8a5 6042 	strh.w	r6, [r5, #66]	; 0x42
		cfg->hb_sub.count = 0;
   1d5fc:	646b      	str	r3, [r5, #68]	; 0x44
		period_ms = hb_pwr2(sub_period, 1) * 1000;
   1d5fe:	f7ff ff3c 	bl	1d47a <hb_pwr2.constprop.10>
   1d602:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1d606:	4344      	muls	r4, r0
   1d608:	e004      	b.n	1d614 <heartbeat_sub_set+0x88>
			cfg->hb_sub.count = 0;
   1d60a:	2400      	movs	r4, #0
   1d60c:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
   1d610:	e9c5 4310 	strd	r4, r3, [r5, #64]	; 0x40
	bt_mesh_set_hb_sub_dst(cfg->hb_sub.dst);
   1d614:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
   1d618:	f7f0 f934 	bl	d884 <bt_mesh_set_hb_sub_dst>
	if (period_ms) {
   1d61c:	b17c      	cbz	r4, 1d63e <heartbeat_sub_set+0xb2>
   1d61e:	f002 fae2 	bl	1fbe6 <z_impl_k_uptime_get>
		cfg->hb_sub.expiry = k_uptime_get() + period_ms;
   1d622:	1902      	adds	r2, r0, r4
   1d624:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
		cfg->hb_sub.expiry = 0;
   1d628:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   1d62c:	4641      	mov	r1, r8
   1d62e:	4638      	mov	r0, r7
   1d630:	f7ff ff41 	bl	1d4b6 <hb_sub_send_status.constprop.9>
	if (!period_ms) {
   1d634:	2c00      	cmp	r4, #0
   1d636:	d1ce      	bne.n	1d5d6 <heartbeat_sub_set+0x4a>
		cfg->hb_sub.min_hops = 0;
   1d638:	f885 4046 	strb.w	r4, [r5, #70]	; 0x46
   1d63c:	e7cb      	b.n	1d5d6 <heartbeat_sub_set+0x4a>
		cfg->hb_sub.expiry = 0;
   1d63e:	2200      	movs	r2, #0
   1d640:	2300      	movs	r3, #0
   1d642:	e7f1      	b.n	1d628 <heartbeat_sub_set+0x9c>

0001d644 <app_key_del>:
{
   1d644:	b570      	push	{r4, r5, r6, lr}
   1d646:	b08a      	sub	sp, #40	; 0x28
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d648:	ab04      	add	r3, sp, #16
{
   1d64a:	4605      	mov	r5, r0
   1d64c:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d64e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   1d652:	e9cd 2308 	strd	r2, r3, [sp, #32]
{
   1d656:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1d658:	f10d 020e 	add.w	r2, sp, #14
   1d65c:	a903      	add	r1, sp, #12
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d65e:	9307      	str	r3, [sp, #28]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   1d660:	f7ff fa58 	bl	1cb14 <key_idx_unpack>
	if (!bt_mesh_subnet_get(key_net_idx)) {
   1d664:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1d668:	f7ef f820 	bl	c6ac <bt_mesh_subnet_get>
   1d66c:	b338      	cbz	r0, 1d6be <app_key_del+0x7a>
	key = bt_mesh_app_key_find(key_app_idx);
   1d66e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1d672:	f7f0 f91d 	bl	d8b0 <bt_mesh_app_key_find>
	if (!key) {
   1d676:	4604      	mov	r4, r0
   1d678:	b140      	cbz	r0, 1d68c <app_key_del+0x48>
	if (key->net_idx != key_net_idx) {
   1d67a:	8802      	ldrh	r2, [r0, #0]
   1d67c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1d680:	429a      	cmp	r2, r3
   1d682:	d11e      	bne.n	1d6c2 <app_key_del+0x7e>
	bt_mesh_app_key_del(key, true);
   1d684:	2101      	movs	r1, #1
   1d686:	f7f1 fb93 	bl	edb0 <bt_mesh_app_key_del>
	status = STATUS_SUCCESS;
   1d68a:	2400      	movs	r4, #0
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   1d68c:	a807      	add	r0, sp, #28
   1d68e:	f248 0103 	movw	r1, #32771	; 0x8003
   1d692:	f7fe fed3 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   1d696:	4621      	mov	r1, r4
   1d698:	a807      	add	r0, sp, #28
   1d69a:	f001 fd3e 	bl	1f11a <net_buf_simple_add_u8>
	key_idx_pack(&msg, key_net_idx, key_app_idx);
   1d69e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1d6a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1d6a6:	a807      	add	r0, sp, #28
   1d6a8:	f7fe ff56 	bl	1c558 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d6ac:	2300      	movs	r3, #0
   1d6ae:	9300      	str	r3, [sp, #0]
   1d6b0:	aa07      	add	r2, sp, #28
   1d6b2:	4631      	mov	r1, r6
   1d6b4:	4628      	mov	r0, r5
   1d6b6:	f7fe feea 	bl	1c48e <bt_mesh_model_send>
}
   1d6ba:	b00a      	add	sp, #40	; 0x28
   1d6bc:	bd70      	pop	{r4, r5, r6, pc}
		status = STATUS_INVALID_NETKEY;
   1d6be:	2404      	movs	r4, #4
   1d6c0:	e7e4      	b.n	1d68c <app_key_del+0x48>
		status = STATUS_INVALID_BINDING;
   1d6c2:	2411      	movs	r4, #17
   1d6c4:	e7e2      	b.n	1d68c <app_key_del+0x48>

0001d6c6 <net_transmit_set>:
{
   1d6c6:	b530      	push	{r4, r5, lr}
   1d6c8:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1d6ca:	ab03      	add	r3, sp, #12
{
   1d6cc:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1d6ce:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   1d6d2:	9305      	str	r3, [sp, #20]
   1d6d4:	e9cd 1306 	strd	r1, r3, [sp, #24]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1d6d8:	6983      	ldr	r3, [r0, #24]
{
   1d6da:	4604      	mov	r4, r0
	if (!cfg) {
   1d6dc:	b123      	cbz	r3, 1d6e8 <net_transmit_set+0x22>
		cfg->net_transmit = buf->data[0];
   1d6de:	6812      	ldr	r2, [r2, #0]
   1d6e0:	7812      	ldrb	r2, [r2, #0]
   1d6e2:	711a      	strb	r2, [r3, #4]
			bt_mesh_store_cfg();
   1d6e4:	f000 fd93 	bl	1e20e <bt_mesh_store_cfg>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   1d6e8:	f248 0125 	movw	r1, #32805	; 0x8025
   1d6ec:	a805      	add	r0, sp, #20
   1d6ee:	f7fe fea5 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   1d6f2:	f7f1 fbdd 	bl	eeb0 <bt_mesh_net_transmit_get>
   1d6f6:	4601      	mov	r1, r0
   1d6f8:	a805      	add	r0, sp, #20
   1d6fa:	f001 fd0e 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d6fe:	2300      	movs	r3, #0
   1d700:	9300      	str	r3, [sp, #0]
   1d702:	aa05      	add	r2, sp, #20
   1d704:	4629      	mov	r1, r5
   1d706:	4620      	mov	r0, r4
   1d708:	f7fe fec1 	bl	1c48e <bt_mesh_model_send>
}
   1d70c:	b009      	add	sp, #36	; 0x24
   1d70e:	bd30      	pop	{r4, r5, pc}

0001d710 <net_transmit_get>:
{
   1d710:	b530      	push	{r4, r5, lr}
   1d712:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1d714:	ab03      	add	r3, sp, #12
   1d716:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1d71a:	4604      	mov	r4, r0
   1d71c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   1d71e:	a805      	add	r0, sp, #20
   1d720:	f248 0125 	movw	r1, #32805	; 0x8025
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1d724:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d728:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   1d72a:	f7fe fe87 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   1d72e:	f7f1 fbbf 	bl	eeb0 <bt_mesh_net_transmit_get>
   1d732:	4601      	mov	r1, r0
   1d734:	a805      	add	r0, sp, #20
   1d736:	f001 fcf0 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d73a:	2300      	movs	r3, #0
   1d73c:	9300      	str	r3, [sp, #0]
   1d73e:	aa05      	add	r2, sp, #20
   1d740:	4629      	mov	r1, r5
   1d742:	4620      	mov	r0, r4
   1d744:	f7fe fea3 	bl	1c48e <bt_mesh_model_send>
}
   1d748:	b009      	add	sp, #36	; 0x24
   1d74a:	bd30      	pop	{r4, r5, pc}

0001d74c <relay_get>:
{
   1d74c:	b530      	push	{r4, r5, lr}
   1d74e:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   1d750:	ab03      	add	r3, sp, #12
   1d752:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   1d756:	4604      	mov	r4, r0
   1d758:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1d75a:	a805      	add	r0, sp, #20
   1d75c:	f248 0128 	movw	r1, #32808	; 0x8028
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   1d760:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d764:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1d766:	f7fe fe69 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   1d76a:	f7f1 fba9 	bl	eec0 <bt_mesh_relay_get>
   1d76e:	4601      	mov	r1, r0
   1d770:	a805      	add	r0, sp, #20
   1d772:	f001 fcd2 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   1d776:	f7f1 fbb7 	bl	eee8 <bt_mesh_relay_retransmit_get>
   1d77a:	4601      	mov	r1, r0
   1d77c:	a805      	add	r0, sp, #20
   1d77e:	f001 fccc 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d782:	2300      	movs	r3, #0
   1d784:	9300      	str	r3, [sp, #0]
   1d786:	aa05      	add	r2, sp, #20
   1d788:	4629      	mov	r1, r5
   1d78a:	4620      	mov	r0, r4
   1d78c:	f7fe fe7f 	bl	1c48e <bt_mesh_model_send>
}
   1d790:	b009      	add	sp, #36	; 0x24
   1d792:	bd30      	pop	{r4, r5, pc}

0001d794 <beacon_set>:
{
   1d794:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1d796:	6984      	ldr	r4, [r0, #24]
{
   1d798:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1d79a:	ab03      	add	r3, sp, #12
{
   1d79c:	460e      	mov	r6, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1d79e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
{
   1d7a2:	4605      	mov	r5, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1d7a4:	9305      	str	r3, [sp, #20]
   1d7a6:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (!cfg) {
   1d7aa:	b16c      	cbz	r4, 1d7c8 <beacon_set+0x34>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   1d7ac:	6813      	ldr	r3, [r2, #0]
   1d7ae:	781b      	ldrb	r3, [r3, #0]
   1d7b0:	2b01      	cmp	r3, #1
   1d7b2:	d81b      	bhi.n	1d7ec <beacon_set+0x58>
		if (buf->data[0] != cfg->beacon) {
   1d7b4:	79e2      	ldrb	r2, [r4, #7]
   1d7b6:	429a      	cmp	r2, r3
   1d7b8:	d006      	beq.n	1d7c8 <beacon_set+0x34>
			cfg->beacon = buf->data[0];
   1d7ba:	71e3      	strb	r3, [r4, #7]
				bt_mesh_store_cfg();
   1d7bc:	f000 fd27 	bl	1e20e <bt_mesh_store_cfg>
			if (cfg->beacon) {
   1d7c0:	79e3      	ldrb	r3, [r4, #7]
   1d7c2:	b1ab      	cbz	r3, 1d7f0 <beacon_set+0x5c>
				bt_mesh_beacon_enable();
   1d7c4:	f7ee fe8e 	bl	c4e4 <bt_mesh_beacon_enable>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1d7c8:	f248 010b 	movw	r1, #32779	; 0x800b
   1d7cc:	a805      	add	r0, sp, #20
   1d7ce:	f7fe fe35 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   1d7d2:	f7f1 fb91 	bl	eef8 <bt_mesh_beacon_get>
   1d7d6:	4601      	mov	r1, r0
   1d7d8:	a805      	add	r0, sp, #20
   1d7da:	f001 fc9e 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d7de:	2300      	movs	r3, #0
   1d7e0:	9300      	str	r3, [sp, #0]
   1d7e2:	aa05      	add	r2, sp, #20
   1d7e4:	4631      	mov	r1, r6
   1d7e6:	4628      	mov	r0, r5
   1d7e8:	f7fe fe51 	bl	1c48e <bt_mesh_model_send>
}
   1d7ec:	b008      	add	sp, #32
   1d7ee:	bd70      	pop	{r4, r5, r6, pc}
				bt_mesh_beacon_disable();
   1d7f0:	f7ee fe9e 	bl	c530 <bt_mesh_beacon_disable>
   1d7f4:	e7e8      	b.n	1d7c8 <beacon_set+0x34>

0001d7f6 <beacon_get>:
{
   1d7f6:	b530      	push	{r4, r5, lr}
   1d7f8:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1d7fa:	ab03      	add	r3, sp, #12
   1d7fc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1d800:	4604      	mov	r4, r0
   1d802:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1d804:	a805      	add	r0, sp, #20
   1d806:	f248 010b 	movw	r1, #32779	; 0x800b
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1d80a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d80e:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   1d810:	f7fe fe14 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   1d814:	f7f1 fb70 	bl	eef8 <bt_mesh_beacon_get>
   1d818:	4601      	mov	r1, r0
   1d81a:	a805      	add	r0, sp, #20
   1d81c:	f001 fc7d 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d820:	2300      	movs	r3, #0
   1d822:	9300      	str	r3, [sp, #0]
   1d824:	aa05      	add	r2, sp, #20
   1d826:	4629      	mov	r1, r5
   1d828:	4620      	mov	r0, r4
   1d82a:	f7fe fe30 	bl	1c48e <bt_mesh_model_send>
}
   1d82e:	b009      	add	sp, #36	; 0x24
   1d830:	bd30      	pop	{r4, r5, pc}

0001d832 <hb_send>:
{
   1d832:	b530      	push	{r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1d834:	6984      	ldr	r4, [r0, #24]
{
   1d836:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
   1d838:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d83c:	f8ad 201a 	strh.w	r2, [sp, #26]
   1d840:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1d842:	f8ad 201c 	strh.w	r2, [sp, #28]
   1d846:	2300      	movs	r3, #0
   1d848:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   1d84c:	f8cd 301e 	str.w	r3, [sp, #30]
{
   1d850:	4605      	mov	r5, r0
		.net_idx = cfg->hb_pub.net_idx,
   1d852:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
	struct bt_mesh_msg_ctx ctx = {
   1d854:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	struct bt_mesh_net_tx tx = {
   1d858:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1d85c:	930b      	str	r3, [sp, #44]	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   1d85e:	f8ad 0018 	strh.w	r0, [sp, #24]
		.sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx),
   1d862:	f7ee ff23 	bl	c6ac <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   1d866:	ab06      	add	r3, sp, #24
   1d868:	9009      	str	r0, [sp, #36]	; 0x24
		.src = bt_mesh_model_elem(model)->addr,
   1d86a:	4628      	mov	r0, r5
	struct bt_mesh_net_tx tx = {
   1d86c:	930a      	str	r3, [sp, #40]	; 0x28
		.src = bt_mesh_model_elem(model)->addr,
   1d86e:	f7f0 fd6b 	bl	e348 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   1d872:	8803      	ldrh	r3, [r0, #0]
   1d874:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
   1d878:	f7f1 fb1a 	bl	eeb0 <bt_mesh_net_transmit_get>
	hb.init_ttl = cfg->hb_pub.ttl;
   1d87c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
   1d880:	f88d 3014 	strb.w	r3, [sp, #20]
	struct bt_mesh_net_tx tx = {
   1d884:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
   1d888:	f7f1 fb1a 	bl	eec0 <bt_mesh_relay_get>
	u16_t feat = 0U;
   1d88c:	1e43      	subs	r3, r0, #1
   1d88e:	425a      	negs	r2, r3
   1d890:	415a      	adcs	r2, r3
	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   1d892:	f7f1 fb39 	bl	ef08 <bt_mesh_gatt_proxy_get>
   1d896:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
   1d898:	bf08      	it	eq
   1d89a:	f042 0202 	orreq.w	r2, r2, #2
	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   1d89e:	f7f1 fb19 	bl	eed4 <bt_mesh_friend_get>
   1d8a2:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
   1d8a4:	bf08      	it	eq
   1d8a6:	f042 0204 	orreq.w	r2, r2, #4
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   1d8aa:	2300      	movs	r3, #0
	hb.feat = sys_cpu_to_be16(feat);
   1d8ac:	0212      	lsls	r2, r2, #8
   1d8ae:	f8ad 2015 	strh.w	r2, [sp, #21]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   1d8b2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1d8b6:	9300      	str	r3, [sp, #0]
   1d8b8:	aa05      	add	r2, sp, #20
   1d8ba:	2303      	movs	r3, #3
   1d8bc:	210a      	movs	r1, #10
   1d8be:	a809      	add	r0, sp, #36	; 0x24
   1d8c0:	f7fe f891 	bl	1b9e6 <bt_mesh_ctl_send>
}
   1d8c4:	b00d      	add	sp, #52	; 0x34
   1d8c6:	bd30      	pop	{r4, r5, pc}

0001d8c8 <friend_set>:
{
   1d8c8:	b570      	push	{r4, r5, r6, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1d8ca:	6813      	ldr	r3, [r2, #0]
   1d8cc:	781b      	ldrb	r3, [r3, #0]
   1d8ce:	2b01      	cmp	r3, #1
{
   1d8d0:	4605      	mov	r5, r0
   1d8d2:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   1d8d4:	d814      	bhi.n	1d900 <friend_set+0x38>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1d8d6:	6984      	ldr	r4, [r0, #24]
	if (!cfg) {
   1d8d8:	b164      	cbz	r4, 1d8f4 <friend_set+0x2c>
	if (cfg->frnd == buf->data[0]) {
   1d8da:	7a62      	ldrb	r2, [r4, #9]
   1d8dc:	429a      	cmp	r2, r3
   1d8de:	d009      	beq.n	1d8f4 <friend_set+0x2c>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   1d8e0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
   1d8e2:	f7ee fee3 	bl	c6ac <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_FRIEND) && sub) {
   1d8e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1d8e8:	075b      	lsls	r3, r3, #29
   1d8ea:	d503      	bpl.n	1d8f4 <friend_set+0x2c>
   1d8ec:	b110      	cbz	r0, 1d8f4 <friend_set+0x2c>
		hb_send(model);
   1d8ee:	4628      	mov	r0, r5
   1d8f0:	f7ff ff9f 	bl	1d832 <hb_send>
	send_friend_status(model, ctx);
   1d8f4:	4631      	mov	r1, r6
   1d8f6:	4628      	mov	r0, r5
}
   1d8f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_friend_status(model, ctx);
   1d8fc:	f7fe be91 	b.w	1c622 <send_friend_status>
}
   1d900:	bd70      	pop	{r4, r5, r6, pc}

0001d902 <relay_set>:
{
   1d902:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1d904:	6984      	ldr	r4, [r0, #24]
{
   1d906:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   1d908:	ab03      	add	r3, sp, #12
{
   1d90a:	460f      	mov	r7, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   1d90c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
{
   1d910:	4606      	mov	r6, r0
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 2 + 4);
   1d912:	9305      	str	r3, [sp, #20]
   1d914:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (!cfg) {
   1d918:	b1cc      	cbz	r4, 1d94e <relay_set+0x4c>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   1d91a:	6812      	ldr	r2, [r2, #0]
   1d91c:	7813      	ldrb	r3, [r2, #0]
   1d91e:	2b01      	cmp	r3, #1
   1d920:	d82d      	bhi.n	1d97e <relay_set+0x7c>
		if (cfg->relay == BT_MESH_RELAY_NOT_SUPPORTED) {
   1d922:	7965      	ldrb	r5, [r4, #5]
   1d924:	2d02      	cmp	r5, #2
   1d926:	d02c      	beq.n	1d982 <relay_set+0x80>
			cfg->relay = buf->data[0];
   1d928:	7163      	strb	r3, [r4, #5]
			change = (cfg->relay != buf->data[0]);
   1d92a:	1b5d      	subs	r5, r3, r5
			cfg->relay_retransmit = buf->data[1];
   1d92c:	7853      	ldrb	r3, [r2, #1]
   1d92e:	71a3      	strb	r3, [r4, #6]
			change = (cfg->relay != buf->data[0]);
   1d930:	bf18      	it	ne
   1d932:	2501      	movne	r5, #1
				bt_mesh_store_cfg();
   1d934:	f000 fc6b 	bl	1e20e <bt_mesh_store_cfg>
		sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
   1d938:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
   1d93a:	f7ee feb7 	bl	c6ac <bt_mesh_subnet_get>
		if ((cfg->hb_pub.feat & BT_MESH_FEAT_RELAY) && sub && change) {
   1d93e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1d940:	07db      	lsls	r3, r3, #31
   1d942:	d504      	bpl.n	1d94e <relay_set+0x4c>
   1d944:	b118      	cbz	r0, 1d94e <relay_set+0x4c>
   1d946:	b115      	cbz	r5, 1d94e <relay_set+0x4c>
			hb_send(model);
   1d948:	4630      	mov	r0, r6
   1d94a:	f7ff ff72 	bl	1d832 <hb_send>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1d94e:	f248 0128 	movw	r1, #32808	; 0x8028
   1d952:	a805      	add	r0, sp, #20
   1d954:	f7fe fd72 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   1d958:	f7f1 fab2 	bl	eec0 <bt_mesh_relay_get>
   1d95c:	4601      	mov	r1, r0
   1d95e:	a805      	add	r0, sp, #20
   1d960:	f001 fbdb 	bl	1f11a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   1d964:	f7f1 fac0 	bl	eee8 <bt_mesh_relay_retransmit_get>
   1d968:	4601      	mov	r1, r0
   1d96a:	a805      	add	r0, sp, #20
   1d96c:	f001 fbd5 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d970:	2300      	movs	r3, #0
   1d972:	9300      	str	r3, [sp, #0]
   1d974:	aa05      	add	r2, sp, #20
   1d976:	4639      	mov	r1, r7
   1d978:	4630      	mov	r0, r6
   1d97a:	f7fe fd88 	bl	1c48e <bt_mesh_model_send>
}
   1d97e:	b009      	add	sp, #36	; 0x24
   1d980:	bdf0      	pop	{r4, r5, r6, r7, pc}
			change = false;
   1d982:	2500      	movs	r5, #0
   1d984:	e7d8      	b.n	1d938 <relay_set+0x36>

0001d986 <node_identity_set>:
{
   1d986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d98a:	4614      	mov	r4, r2
   1d98c:	b088      	sub	sp, #32
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d98e:	ab02      	add	r3, sp, #8
   1d990:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
{
   1d994:	4607      	mov	r7, r0
	idx = net_buf_simple_pull_le16(buf);
   1d996:	4620      	mov	r0, r4
{
   1d998:	4688      	mov	r8, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 4 + 4);
   1d99a:	9305      	str	r3, [sp, #20]
   1d99c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	idx = net_buf_simple_pull_le16(buf);
   1d9a0:	f001 fc3f 	bl	1f222 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   1d9a4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   1d9a8:	4605      	mov	r5, r0
	if (idx > 0xfff) {
   1d9aa:	d222      	bcs.n	1d9f2 <node_identity_set+0x6c>
	node_id = net_buf_simple_pull_u8(buf);
   1d9ac:	4620      	mov	r0, r4
   1d9ae:	f001 fc30 	bl	1f212 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   1d9b2:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   1d9b4:	4606      	mov	r6, r0
	if (node_id != 0x00 && node_id != 0x01) {
   1d9b6:	d81c      	bhi.n	1d9f2 <node_identity_set+0x6c>
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   1d9b8:	f248 0148 	movw	r1, #32840	; 0x8048
   1d9bc:	a805      	add	r0, sp, #20
   1d9be:	f7fe fd3d 	bl	1c43c <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
   1d9c2:	4628      	mov	r0, r5
   1d9c4:	f7ee fe72 	bl	c6ac <bt_mesh_subnet_get>
	if (!sub) {
   1d9c8:	4604      	mov	r4, r0
   1d9ca:	b9a8      	cbnz	r0, 1d9f8 <node_identity_set+0x72>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_NETKEY);
   1d9cc:	2104      	movs	r1, #4
   1d9ce:	a805      	add	r0, sp, #20
   1d9d0:	f001 fba3 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, idx);
   1d9d4:	4629      	mov	r1, r5
   1d9d6:	a805      	add	r0, sp, #20
   1d9d8:	f001 fba7 	bl	1f12a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, node_id);
   1d9dc:	4631      	mov	r1, r6
		net_buf_simple_add_u8(&msg, sub->node_id);
   1d9de:	a805      	add	r0, sp, #20
   1d9e0:	f001 fb9b 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1d9e4:	2300      	movs	r3, #0
   1d9e6:	9300      	str	r3, [sp, #0]
   1d9e8:	aa05      	add	r2, sp, #20
   1d9ea:	4641      	mov	r1, r8
   1d9ec:	4638      	mov	r0, r7
   1d9ee:	f7fe fd4e 	bl	1c48e <bt_mesh_model_send>
}
   1d9f2:	b008      	add	sp, #32
   1d9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1d9f8:	2100      	movs	r1, #0
   1d9fa:	a805      	add	r0, sp, #20
   1d9fc:	f001 fb8d 	bl	1f11a <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, idx);
   1da00:	4629      	mov	r1, r5
   1da02:	a805      	add	r0, sp, #20
   1da04:	f001 fb91 	bl	1f12a <net_buf_simple_add_le16>
		    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   1da08:	f7f1 fa7e 	bl	ef08 <bt_mesh_gatt_proxy_get>
		if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
   1da0c:	2801      	cmp	r0, #1
   1da0e:	d105      	bne.n	1da1c <node_identity_set+0x96>
				bt_mesh_proxy_identity_start(sub);
   1da10:	4620      	mov	r0, r4
			if (node_id) {
   1da12:	b136      	cbz	r6, 1da22 <node_identity_set+0x9c>
				bt_mesh_proxy_identity_start(sub);
   1da14:	f7f3 fae6 	bl	10fe4 <bt_mesh_proxy_identity_start>
			bt_mesh_adv_update();
   1da18:	f7ee fad0 	bl	bfbc <bt_mesh_adv_update>
		net_buf_simple_add_u8(&msg, sub->node_id);
   1da1c:	f894 1020 	ldrb.w	r1, [r4, #32]
   1da20:	e7dd      	b.n	1d9de <node_identity_set+0x58>
				bt_mesh_proxy_identity_stop(sub);
   1da22:	f000 fd9d 	bl	1e560 <bt_mesh_proxy_identity_stop>
   1da26:	e7f7      	b.n	1da18 <node_identity_set+0x92>

0001da28 <send_gatt_proxy_status>:
{
   1da28:	b530      	push	{r4, r5, lr}
   1da2a:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1da2c:	ab03      	add	r3, sp, #12
   1da2e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1da32:	4604      	mov	r4, r0
   1da34:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   1da36:	a805      	add	r0, sp, #20
   1da38:	f248 0114 	movw	r1, #32788	; 0x8014
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1da3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1da40:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   1da42:	f7fe fcfb 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   1da46:	f7f1 fa5f 	bl	ef08 <bt_mesh_gatt_proxy_get>
   1da4a:	4601      	mov	r1, r0
   1da4c:	a805      	add	r0, sp, #20
   1da4e:	f001 fb64 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1da52:	2300      	movs	r3, #0
   1da54:	9300      	str	r3, [sp, #0]
   1da56:	aa05      	add	r2, sp, #20
   1da58:	4629      	mov	r1, r5
   1da5a:	4620      	mov	r0, r4
   1da5c:	f7fe fd17 	bl	1c48e <bt_mesh_model_send>
}
   1da60:	b009      	add	sp, #36	; 0x24
   1da62:	bd30      	pop	{r4, r5, pc}

0001da64 <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
   1da64:	f7ff bfe0 	b.w	1da28 <send_gatt_proxy_status>

0001da68 <default_ttl_set>:
{
   1da68:	b530      	push	{r4, r5, lr}
   1da6a:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1da6c:	ab03      	add	r3, sp, #12
{
   1da6e:	460d      	mov	r5, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1da70:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   1da74:	e9cd 1306 	strd	r1, r3, [sp, #24]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   1da78:	6981      	ldr	r1, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1da7a:	9305      	str	r3, [sp, #20]
{
   1da7c:	4604      	mov	r4, r0
	if (!cfg) {
   1da7e:	b159      	cbz	r1, 1da98 <default_ttl_set+0x30>
	} else if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
   1da80:	6813      	ldr	r3, [r2, #0]
   1da82:	781b      	ldrb	r3, [r3, #0]
   1da84:	061a      	lsls	r2, r3, #24
   1da86:	d419      	bmi.n	1dabc <default_ttl_set+0x54>
   1da88:	2b01      	cmp	r3, #1
   1da8a:	d017      	beq.n	1dabc <default_ttl_set+0x54>
		if (cfg->default_ttl != buf->data[0]) {
   1da8c:	7a8a      	ldrb	r2, [r1, #10]
   1da8e:	429a      	cmp	r2, r3
   1da90:	d002      	beq.n	1da98 <default_ttl_set+0x30>
			cfg->default_ttl = buf->data[0];
   1da92:	728b      	strb	r3, [r1, #10]
				bt_mesh_store_cfg();
   1da94:	f000 fbbb 	bl	1e20e <bt_mesh_store_cfg>
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1da98:	f248 010e 	movw	r1, #32782	; 0x800e
   1da9c:	a805      	add	r0, sp, #20
   1da9e:	f7fe fccd 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   1daa2:	f7f1 faa9 	bl	eff8 <bt_mesh_default_ttl_get>
   1daa6:	4601      	mov	r1, r0
   1daa8:	a805      	add	r0, sp, #20
   1daaa:	f001 fb36 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1daae:	2300      	movs	r3, #0
   1dab0:	9300      	str	r3, [sp, #0]
   1dab2:	aa05      	add	r2, sp, #20
   1dab4:	4629      	mov	r1, r5
   1dab6:	4620      	mov	r0, r4
   1dab8:	f7fe fce9 	bl	1c48e <bt_mesh_model_send>
}
   1dabc:	b009      	add	sp, #36	; 0x24
   1dabe:	bd30      	pop	{r4, r5, pc}

0001dac0 <default_ttl_get>:
{
   1dac0:	b530      	push	{r4, r5, lr}
   1dac2:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1dac4:	ab03      	add	r3, sp, #12
   1dac6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1daca:	4604      	mov	r4, r0
   1dacc:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1dace:	a805      	add	r0, sp, #20
   1dad0:	f248 010e 	movw	r1, #32782	; 0x800e
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1dad4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1dad8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   1dada:	f7fe fcaf 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   1dade:	f7f1 fa8b 	bl	eff8 <bt_mesh_default_ttl_get>
   1dae2:	4601      	mov	r1, r0
   1dae4:	a805      	add	r0, sp, #20
   1dae6:	f001 fb18 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1daea:	2300      	movs	r3, #0
   1daec:	9300      	str	r3, [sp, #0]
   1daee:	aa05      	add	r2, sp, #20
   1daf0:	4629      	mov	r1, r5
   1daf2:	4620      	mov	r0, r4
   1daf4:	f7fe fccb 	bl	1c48e <bt_mesh_model_send>
}
   1daf8:	b009      	add	sp, #36	; 0x24
   1dafa:	bd30      	pop	{r4, r5, pc}

0001dafc <mod_sub_del_all>:
{
   1dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db00:	4606      	mov	r6, r0
   1db02:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   1db04:	4610      	mov	r0, r2
{
   1db06:	460f      	mov	r7, r1
   1db08:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1db0a:	f001 fb8a 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1db0e:	b203      	sxth	r3, r0
   1db10:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1db12:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1db14:	dd16      	ble.n	1db44 <mod_sub_del_all+0x48>
	mod_id = buf->data;
   1db16:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1db1a:	f7f0 fc75 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1db1e:	b9a0      	cbnz	r0, 1db4a <mod_sub_del_all+0x4e>
		vnd = (buf->len == 4);
   1db20:	88a3      	ldrh	r3, [r4, #4]
   1db22:	1f1a      	subs	r2, r3, #4
   1db24:	4253      	negs	r3, r2
   1db26:	4153      	adcs	r3, r2
   1db28:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1db2c:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
   1db2e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1db32:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1db36:	2300      	movs	r3, #0
   1db38:	9300      	str	r3, [sp, #0]
   1db3a:	4639      	mov	r1, r7
   1db3c:	462b      	mov	r3, r5
   1db3e:	4630      	mov	r0, r6
   1db40:	f7fe fe59 	bl	1c7f6 <send_mod_sub_status>
}
   1db44:	b006      	add	sp, #24
   1db46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
   1db4a:	4621      	mov	r1, r4
   1db4c:	f10d 0217 	add.w	r2, sp, #23
   1db50:	f7ff f89d 	bl	1cc8e <get_model>
	if (!mod) {
   1db54:	4604      	mov	r4, r0
   1db56:	b130      	cbz	r0, 1db66 <mod_sub_del_all+0x6a>
	mod_sub_list_clear(mod);
   1db58:	f7f1 fa70 	bl	f03c <mod_sub_list_clear>
		bt_mesh_store_mod_sub(mod);
   1db5c:	4620      	mov	r0, r4
   1db5e:	f000 fb6f 	bl	1e240 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   1db62:	2200      	movs	r2, #0
   1db64:	e7e3      	b.n	1db2e <mod_sub_del_all+0x32>
		status = STATUS_INVALID_MODEL;
   1db66:	2202      	movs	r2, #2
   1db68:	e7e1      	b.n	1db2e <mod_sub_del_all+0x32>

0001db6a <mod_sub_va_overwrite>:
{
   1db6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1db6e:	b086      	sub	sp, #24
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1db70:	2300      	movs	r3, #0
{
   1db72:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1db74:	4610      	mov	r0, r2
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   1db76:	f8ad 3016 	strh.w	r3, [sp, #22]
{
   1db7a:	460f      	mov	r7, r1
   1db7c:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1db7e:	f001 fb50 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1db82:	b203      	sxth	r3, r0
   1db84:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1db86:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1db88:	dd1e      	ble.n	1dbc8 <mod_sub_va_overwrite+0x5e>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   1db8a:	2110      	movs	r1, #16
   1db8c:	4620      	mov	r0, r4
   1db8e:	f001 fb38 	bl	1f202 <net_buf_simple_pull_mem>
   1db92:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   1db94:	4628      	mov	r0, r5
	mod_id = buf->data;
   1db96:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1db9a:	f7f0 fc35 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1db9e:	b9b0      	cbnz	r0, 1dbce <mod_sub_va_overwrite+0x64>
		vnd = (buf->len == 4);
   1dba0:	88a3      	ldrh	r3, [r4, #4]
   1dba2:	1f1a      	subs	r2, r3, #4
   1dba4:	4253      	negs	r3, r2
   1dba6:	4153      	adcs	r3, r2
   1dba8:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   1dbac:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1dbae:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1dbb2:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1dbb6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1dbba:	9300      	str	r3, [sp, #0]
   1dbbc:	4622      	mov	r2, r4
   1dbbe:	462b      	mov	r3, r5
   1dbc0:	4639      	mov	r1, r7
   1dbc2:	4630      	mov	r0, r6
   1dbc4:	f7fe fe17 	bl	1c7f6 <send_mod_sub_status>
}
   1dbc8:	b006      	add	sp, #24
   1dbca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = get_model(elem, buf, &vnd);
   1dbce:	f10d 0215 	add.w	r2, sp, #21
   1dbd2:	4621      	mov	r1, r4
   1dbd4:	f7ff f85b 	bl	1cc8e <get_model>
	if (!mod) {
   1dbd8:	4681      	mov	r9, r0
   1dbda:	b188      	cbz	r0, 1dc00 <mod_sub_va_overwrite+0x96>
	mod_sub_list_clear(mod);
   1dbdc:	f7f1 fa2e 	bl	f03c <mod_sub_list_clear>
		status = va_add(label_uuid, &sub_addr);
   1dbe0:	f10d 0116 	add.w	r1, sp, #22
   1dbe4:	4650      	mov	r0, sl
   1dbe6:	f7f0 ff41 	bl	ea6c <va_add>
		if (status == STATUS_SUCCESS) {
   1dbea:	4604      	mov	r4, r0
   1dbec:	2800      	cmp	r0, #0
   1dbee:	d1de      	bne.n	1dbae <mod_sub_va_overwrite+0x44>
			mod->groups[0] = sub_addr;
   1dbf0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1dbf4:	f8a9 300e 	strh.w	r3, [r9, #14]
				bt_mesh_store_mod_sub(mod);
   1dbf8:	4648      	mov	r0, r9
   1dbfa:	f000 fb21 	bl	1e240 <bt_mesh_store_mod_sub>
   1dbfe:	e7d6      	b.n	1dbae <mod_sub_va_overwrite+0x44>
		status = STATUS_INVALID_MODEL;
   1dc00:	2402      	movs	r4, #2
   1dc02:	e7d4      	b.n	1dbae <mod_sub_va_overwrite+0x44>

0001dc04 <mod_sub_overwrite>:
{
   1dc04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dc08:	4607      	mov	r7, r0
   1dc0a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   1dc0c:	4610      	mov	r0, r2
{
   1dc0e:	4688      	mov	r8, r1
   1dc10:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1dc12:	f001 fb06 	bl	1f222 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1dc16:	b203      	sxth	r3, r0
   1dc18:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1dc1a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1dc1c:	dd2f      	ble.n	1dc7e <mod_sub_overwrite+0x7a>
	sub_addr = net_buf_simple_pull_le16(buf);
   1dc1e:	4620      	mov	r0, r4
   1dc20:	f001 faff 	bl	1f222 <net_buf_simple_pull_le16>
   1dc24:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   1dc26:	4628      	mov	r0, r5
	mod_id = buf->data;
   1dc28:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1dc2c:	f7f0 fbec 	bl	e408 <bt_mesh_elem_find>
	if (!elem) {
   1dc30:	b938      	cbnz	r0, 1dc42 <mod_sub_overwrite+0x3e>
		vnd = (buf->len == 4);
   1dc32:	88a3      	ldrh	r3, [r4, #4]
   1dc34:	1f1a      	subs	r2, r3, #4
   1dc36:	4253      	negs	r3, r2
   1dc38:	4153      	adcs	r3, r2
   1dc3a:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1dc3e:	2201      	movs	r2, #1
   1dc40:	e013      	b.n	1dc6a <mod_sub_overwrite+0x66>
	mod = get_model(elem, buf, &vnd);
   1dc42:	4621      	mov	r1, r4
   1dc44:	f10d 0217 	add.w	r2, sp, #23
   1dc48:	f7ff f821 	bl	1cc8e <get_model>
	if (!mod) {
   1dc4c:	4604      	mov	r4, r0
   1dc4e:	b1c8      	cbz	r0, 1dc84 <mod_sub_overwrite+0x80>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   1dc50:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
   1dc54:	b29b      	uxth	r3, r3
   1dc56:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   1dc5a:	d8f0      	bhi.n	1dc3e <mod_sub_overwrite+0x3a>
	mod_sub_list_clear(mod);
   1dc5c:	f7f1 f9ee 	bl	f03c <mod_sub_list_clear>
		mod->groups[0] = sub_addr;
   1dc60:	81e6      	strh	r6, [r4, #14]
			bt_mesh_store_mod_sub(mod);
   1dc62:	4620      	mov	r0, r4
   1dc64:	f000 faec 	bl	1e240 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   1dc68:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1dc6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1dc6e:	9600      	str	r6, [sp, #0]
   1dc70:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1dc74:	4641      	mov	r1, r8
   1dc76:	462b      	mov	r3, r5
   1dc78:	4638      	mov	r0, r7
   1dc7a:	f7fe fdbc 	bl	1c7f6 <send_mod_sub_status>
}
   1dc7e:	b007      	add	sp, #28
   1dc80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   1dc84:	2202      	movs	r2, #2
   1dc86:	e7f0      	b.n	1dc6a <mod_sub_overwrite+0x66>

0001dc88 <mod_reset>:
{
   1dc88:	b510      	push	{r4, lr}
   1dc8a:	4604      	mov	r4, r0
	mod_sub_list_clear(mod);
   1dc8c:	f7f1 f9d6 	bl	f03c <mod_sub_list_clear>
		bt_mesh_store_mod_sub(mod);
   1dc90:	4620      	mov	r0, r4
}
   1dc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_store_mod_sub(mod);
   1dc96:	f000 bad3 	b.w	1e240 <bt_mesh_store_mod_sub>

0001dc9a <net_key_del>:
{
   1dc9a:	b570      	push	{r4, r5, r6, lr}
   1dc9c:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   1dc9e:	4610      	mov	r0, r2
{
   1dca0:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   1dca2:	f001 fabe 	bl	1f222 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   1dca6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   1dcaa:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   1dcac:	d213      	bcs.n	1dcd6 <net_key_del+0x3c>
	sub = bt_mesh_subnet_get(del_idx);
   1dcae:	f7ee fcfd 	bl	c6ac <bt_mesh_subnet_get>
	if (!sub) {
   1dcb2:	4603      	mov	r3, r0
   1dcb4:	b130      	cbz	r0, 1dcc4 <net_key_del+0x2a>
	if (ctx->net_idx == del_idx) {
   1dcb6:	882b      	ldrh	r3, [r5, #0]
   1dcb8:	42a3      	cmp	r3, r4
   1dcba:	d00a      	beq.n	1dcd2 <net_key_del+0x38>
	bt_mesh_subnet_del(sub, true);
   1dcbc:	2101      	movs	r1, #1
   1dcbe:	f7f1 fa09 	bl	f0d4 <bt_mesh_subnet_del>
	status = STATUS_SUCCESS;
   1dcc2:	2300      	movs	r3, #0
	send_net_key_status(model, ctx, del_idx, status);
   1dcc4:	4622      	mov	r2, r4
   1dcc6:	4629      	mov	r1, r5
   1dcc8:	4630      	mov	r0, r6
}
   1dcca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_net_key_status(model, ctx, del_idx, status);
   1dcce:	f7fe bcc7 	b.w	1c660 <send_net_key_status>
		status = STATUS_CANNOT_REMOVE;
   1dcd2:	230c      	movs	r3, #12
   1dcd4:	e7f6      	b.n	1dcc4 <net_key_del+0x2a>
}
   1dcd6:	bd70      	pop	{r4, r5, r6, pc}

0001dcd8 <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   1dcd8:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1dcdc:	b123      	cbz	r3, 1dce8 <attention_off+0x10>
   1dcde:	695b      	ldr	r3, [r3, #20]
   1dce0:	b113      	cbz	r3, 1dce8 <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   1dce2:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1dce6:	4718      	bx	r3
}
   1dce8:	4770      	bx	lr

0001dcea <health_period_set_unrel>:
{
   1dcea:	b510      	push	{r4, lr}
   1dcec:	4604      	mov	r4, r0
	period = net_buf_simple_pull_u8(buf);
   1dcee:	4610      	mov	r0, r2
   1dcf0:	f001 fa8f 	bl	1f212 <net_buf_simple_pull_u8>
	if (period > 15) {
   1dcf4:	280f      	cmp	r0, #15
	model->pub->period_div = period;
   1dcf6:	bf9f      	itttt	ls
   1dcf8:	68a3      	ldrls	r3, [r4, #8]
   1dcfa:	7ada      	ldrbls	r2, [r3, #11]
   1dcfc:	f360 0203 	bfils	r2, r0, #0, #4
   1dd00:	72da      	strbls	r2, [r3, #11]
}
   1dd02:	bd10      	pop	{r4, pc}

0001dd04 <send_health_period_status>:
{
   1dd04:	b530      	push	{r4, r5, lr}
   1dd06:	4604      	mov	r4, r0
   1dd08:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1dd0a:	ab03      	add	r3, sp, #12
   1dd0c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1dd10:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   1dd12:	a805      	add	r0, sp, #20
   1dd14:	f248 0137 	movw	r1, #32823	; 0x8037
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1dd18:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1dd1c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   1dd1e:	f7fe fb8d 	bl	1c43c <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   1dd22:	68a3      	ldr	r3, [r4, #8]
   1dd24:	7ad9      	ldrb	r1, [r3, #11]
   1dd26:	a805      	add	r0, sp, #20
   1dd28:	f001 010f 	and.w	r1, r1, #15
   1dd2c:	f001 f9f5 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1dd30:	2300      	movs	r3, #0
   1dd32:	9300      	str	r3, [sp, #0]
   1dd34:	aa05      	add	r2, sp, #20
   1dd36:	4629      	mov	r1, r5
   1dd38:	4620      	mov	r0, r4
   1dd3a:	f7fe fba8 	bl	1c48e <bt_mesh_model_send>
}
   1dd3e:	b009      	add	sp, #36	; 0x24
   1dd40:	bd30      	pop	{r4, r5, pc}

0001dd42 <health_period_set>:
{
   1dd42:	b538      	push	{r3, r4, r5, lr}
   1dd44:	4604      	mov	r4, r0
   1dd46:	460d      	mov	r5, r1
	health_period_set_unrel(model, ctx, buf);
   1dd48:	f7ff ffcf 	bl	1dcea <health_period_set_unrel>
	send_health_period_status(model, ctx);
   1dd4c:	4629      	mov	r1, r5
   1dd4e:	4620      	mov	r0, r4
}
   1dd50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_health_period_status(model, ctx);
   1dd54:	f7ff bfd6 	b.w	1dd04 <send_health_period_status>

0001dd58 <health_period_get>:
	send_health_period_status(model, ctx);
   1dd58:	f7ff bfd4 	b.w	1dd04 <send_health_period_status>

0001dd5c <send_attention_status>:
{
   1dd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd5e:	4605      	mov	r5, r0
	return __ticks_to_ms(z_timeout_remaining(&work->timeout));
   1dd60:	6980      	ldr	r0, [r0, #24]
   1dd62:	b089      	sub	sp, #36	; 0x24
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1dd64:	ab03      	add	r3, sp, #12
   1dd66:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1dd6a:	3014      	adds	r0, #20
   1dd6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   1dd70:	460e      	mov	r6, r1
	NET_BUF_SIMPLE_DEFINE(msg, 2 + 1 + 4);
   1dd72:	9305      	str	r3, [sp, #20]
   1dd74:	f7f9 fa7a 	bl	1726c <z_timeout_remaining>
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
   1dd78:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1dd7c:	4607      	mov	r7, r0
	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   1dd7e:	f248 0107 	movw	r1, #32775	; 0x8007
   1dd82:	a805      	add	r0, sp, #20
   1dd84:	f7fe fb5a 	bl	1c43c <bt_mesh_model_msg_init>
   1dd88:	2264      	movs	r2, #100	; 0x64
   1dd8a:	2300      	movs	r3, #0
   1dd8c:	fb87 0104 	smull	r0, r1, r7, r4
   1dd90:	f7e2 ff54 	bl	c3c <__aeabi_uldivmod>
	time = k_delayed_work_remaining_get(&srv->attn_timer) / 1000;
   1dd94:	fb90 f1f4 	sdiv	r1, r0, r4
	net_buf_simple_add_u8(&msg, time);
   1dd98:	a805      	add	r0, sp, #20
   1dd9a:	b2c9      	uxtb	r1, r1
   1dd9c:	f001 f9bd 	bl	1f11a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1dda0:	2300      	movs	r3, #0
   1dda2:	9300      	str	r3, [sp, #0]
   1dda4:	aa05      	add	r2, sp, #20
   1dda6:	4631      	mov	r1, r6
   1dda8:	4628      	mov	r0, r5
   1ddaa:	f7fe fb70 	bl	1c48e <bt_mesh_model_send>
}
   1ddae:	b009      	add	sp, #36	; 0x24
   1ddb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ddb2 <attention_get>:
	send_attention_status(model, ctx);
   1ddb2:	f7ff bfd3 	b.w	1dd5c <send_attention_status>

0001ddb6 <health_fault_test_unrel>:
{
   1ddb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   1ddba:	6987      	ldr	r7, [r0, #24]
{
   1ddbc:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   1ddbe:	4610      	mov	r0, r2
{
   1ddc0:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   1ddc2:	f001 fa26 	bl	1f212 <net_buf_simple_pull_u8>
   1ddc6:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   1ddc8:	4628      	mov	r0, r5
   1ddca:	f001 fa2a 	bl	1f222 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   1ddce:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1ddd0:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   1ddd2:	b133      	cbz	r3, 1dde2 <health_fault_test_unrel+0x2c>
   1ddd4:	68db      	ldr	r3, [r3, #12]
   1ddd6:	b123      	cbz	r3, 1dde2 <health_fault_test_unrel+0x2c>
		srv->cb->fault_test(model, test_id, company_id);
   1ddd8:	4631      	mov	r1, r6
   1ddda:	4620      	mov	r0, r4
}
   1dddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		srv->cb->fault_test(model, test_id, company_id);
   1dde0:	4718      	bx	r3
}
   1dde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dde6 <health_fault_clear_unrel>:
{
   1dde6:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   1dde8:	6985      	ldr	r5, [r0, #24]
{
   1ddea:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   1ddec:	4610      	mov	r0, r2
   1ddee:	f001 fa18 	bl	1f222 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   1ddf2:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1ddf4:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   1ddf6:	b12b      	cbz	r3, 1de04 <health_fault_clear_unrel+0x1e>
   1ddf8:	689b      	ldr	r3, [r3, #8]
   1ddfa:	b11b      	cbz	r3, 1de04 <health_fault_clear_unrel+0x1e>
		srv->cb->fault_clear(model, company_id);
   1ddfc:	4620      	mov	r0, r4
}
   1ddfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		srv->cb->fault_clear(model, company_id);
   1de02:	4718      	bx	r3
}
   1de04:	bd70      	pop	{r4, r5, r6, pc}

0001de06 <health_get_registered>:
{
   1de06:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1de0a:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   1de0c:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
   1de10:	460f      	mov	r7, r1
   1de12:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   1de14:	2105      	movs	r1, #5
   1de16:	4610      	mov	r0, r2
   1de18:	f7fe fb10 	bl	1c43c <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   1de1c:	2101      	movs	r1, #1
   1de1e:	4620      	mov	r0, r4
   1de20:	f001 f96c 	bl	1f0fc <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   1de24:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   1de26:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   1de28:	4620      	mov	r0, r4
   1de2a:	f001 f97e 	bl	1f12a <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   1de2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1de32:	b1b3      	cbz	r3, 1de62 <health_get_registered+0x5c>
   1de34:	685b      	ldr	r3, [r3, #4]
   1de36:	b1a3      	cbz	r3, 1de62 <health_get_registered+0x5c>
		u8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   1de38:	4620      	mov	r0, r4
   1de3a:	f001 fa1a 	bl	1f272 <net_buf_simple_tailroom>
   1de3e:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   1de40:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   1de44:	6822      	ldr	r2, [r4, #0]
		u8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   1de46:	f88d 000f 	strb.w	r0, [sp, #15]
   1de4a:	88a3      	ldrh	r3, [r4, #4]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   1de4c:	f10d 000f 	add.w	r0, sp, #15
   1de50:	9000      	str	r0, [sp, #0]
   1de52:	f8d1 8004 	ldr.w	r8, [r1, #4]
   1de56:	4413      	add	r3, r2
   1de58:	4639      	mov	r1, r7
   1de5a:	462a      	mov	r2, r5
   1de5c:	4630      	mov	r0, r6
   1de5e:	47c0      	blx	r8
		if (err) {
   1de60:	b110      	cbz	r0, 1de68 <health_get_registered+0x62>
		*test_id = HEALTH_TEST_STANDARD;
   1de62:	2300      	movs	r3, #0
   1de64:	702b      	strb	r3, [r5, #0]
}
   1de66:	e004      	b.n	1de72 <health_get_registered+0x6c>
			net_buf_simple_add(msg, fault_count);
   1de68:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1de6c:	4620      	mov	r0, r4
   1de6e:	f001 f945 	bl	1f0fc <net_buf_simple_add>
}
   1de72:	b004      	add	sp, #16
   1de74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001de78 <health_fault_test>:
{
   1de78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de7c:	4615      	mov	r5, r2
   1de7e:	b098      	sub	sp, #96	; 0x60
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1de80:	ab06      	add	r3, sp, #24
   1de82:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
	struct bt_mesh_health_srv *srv = model->user_data;
   1de86:	f8d0 8018 	ldr.w	r8, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1de8a:	9303      	str	r3, [sp, #12]
{
   1de8c:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   1de8e:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1de90:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1de94:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   1de96:	f001 f9bc 	bl	1f212 <net_buf_simple_pull_u8>
   1de9a:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   1de9c:	4628      	mov	r0, r5
   1de9e:	f001 f9c0 	bl	1f222 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   1dea2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1dea6:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_test) {
   1dea8:	b133      	cbz	r3, 1deb8 <health_fault_test+0x40>
   1deaa:	68db      	ldr	r3, [r3, #12]
   1deac:	b123      	cbz	r3, 1deb8 <health_fault_test+0x40>
		err = srv->cb->fault_test(model, test_id, company_id);
   1deae:	4602      	mov	r2, r0
   1deb0:	4639      	mov	r1, r7
   1deb2:	4620      	mov	r0, r4
   1deb4:	4798      	blx	r3
		if (err) {
   1deb6:	b958      	cbnz	r0, 1ded0 <health_fault_test+0x58>
	health_get_registered(model, company_id, &sdu);
   1deb8:	aa03      	add	r2, sp, #12
   1deba:	4629      	mov	r1, r5
   1debc:	4620      	mov	r0, r4
   1debe:	f7ff ffa2 	bl	1de06 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1dec2:	2300      	movs	r3, #0
   1dec4:	9300      	str	r3, [sp, #0]
   1dec6:	aa03      	add	r2, sp, #12
   1dec8:	4631      	mov	r1, r6
   1deca:	4620      	mov	r0, r4
   1decc:	f7fe fadf 	bl	1c48e <bt_mesh_model_send>
}
   1ded0:	b018      	add	sp, #96	; 0x60
   1ded2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ded6 <health_fault_clear>:
{
   1ded6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ded8:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1deda:	ab06      	add	r3, sp, #24
	struct bt_mesh_health_srv *srv = model->user_data;
   1dedc:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1dede:	9303      	str	r3, [sp, #12]
{
   1dee0:	4604      	mov	r4, r0
   1dee2:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   1dee4:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1dee6:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   1deea:	e9cd 1304 	strd	r1, r3, [sp, #16]
	company_id = net_buf_simple_pull_le16(buf);
   1deee:	f001 f998 	bl	1f222 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   1def2:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   1def4:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
   1def6:	b123      	cbz	r3, 1df02 <health_fault_clear+0x2c>
   1def8:	689b      	ldr	r3, [r3, #8]
   1defa:	b113      	cbz	r3, 1df02 <health_fault_clear+0x2c>
		srv->cb->fault_clear(model, company_id);
   1defc:	4601      	mov	r1, r0
   1defe:	4620      	mov	r0, r4
   1df00:	4798      	blx	r3
	health_get_registered(model, company_id, &sdu);
   1df02:	aa03      	add	r2, sp, #12
   1df04:	4629      	mov	r1, r5
   1df06:	4620      	mov	r0, r4
   1df08:	f7ff ff7d 	bl	1de06 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1df0c:	2300      	movs	r3, #0
   1df0e:	9300      	str	r3, [sp, #0]
   1df10:	aa03      	add	r2, sp, #12
   1df12:	4631      	mov	r1, r6
   1df14:	4620      	mov	r0, r4
   1df16:	f7fe faba 	bl	1c48e <bt_mesh_model_send>
}
   1df1a:	b019      	add	sp, #100	; 0x64
   1df1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001df1e <health_fault_get>:
{
   1df1e:	b530      	push	{r4, r5, lr}
   1df20:	b099      	sub	sp, #100	; 0x64
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1df22:	ab06      	add	r3, sp, #24
{
   1df24:	4604      	mov	r4, r0
   1df26:	460d      	mov	r5, r1
	company_id = net_buf_simple_pull_le16(buf);
   1df28:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1df2a:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   1df2e:	e9cd 1304 	strd	r1, r3, [sp, #16]
   1df32:	9303      	str	r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   1df34:	f001 f975 	bl	1f222 <net_buf_simple_pull_le16>
	health_get_registered(model, company_id, &sdu);
   1df38:	aa03      	add	r2, sp, #12
   1df3a:	4601      	mov	r1, r0
   1df3c:	4620      	mov	r0, r4
   1df3e:	f7ff ff62 	bl	1de06 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   1df42:	2300      	movs	r3, #0
   1df44:	9300      	str	r3, [sp, #0]
   1df46:	aa03      	add	r2, sp, #12
   1df48:	4629      	mov	r1, r5
   1df4a:	4620      	mov	r0, r4
   1df4c:	f7fe fa9f 	bl	1c48e <bt_mesh_model_send>
}
   1df50:	b019      	add	sp, #100	; 0x64
   1df52:	bd30      	pop	{r4, r5, pc}

0001df54 <health_pub_update>:
{
   1df54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   1df58:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   1df5a:	f8d0 a018 	ldr.w	sl, [r0, #24]
	count = health_get_current(mod, pub->msg);
   1df5e:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   1df60:	2104      	movs	r1, #4
{
   1df62:	4680      	mov	r8, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   1df64:	4620      	mov	r0, r4
   1df66:	f7fe fa69 	bl	1c43c <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   1df6a:	2101      	movs	r1, #1
   1df6c:	4620      	mov	r0, r4
   1df6e:	f001 f8c5 	bl	1f0fc <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   1df72:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   1df74:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   1df76:	4620      	mov	r0, r4
   1df78:	f001 f8c0 	bl	1f0fc <net_buf_simple_add>
   1df7c:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
   1df7e:	f7f0 fc29 	bl	e7d4 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   1df82:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   1df86:	4681      	mov	r9, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   1df88:	b1b3      	cbz	r3, 1dfb8 <health_pub_update+0x64>
   1df8a:	681b      	ldr	r3, [r3, #0]
   1df8c:	b1a3      	cbz	r3, 1dfb8 <health_pub_update+0x64>
		fault_count = net_buf_simple_tailroom(msg);
   1df8e:	4620      	mov	r0, r4
   1df90:	f001 f96f 	bl	1f272 <net_buf_simple_tailroom>
   1df94:	f88d 000d 	strb.w	r0, [sp, #13]
   1df98:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   1df9a:	f8da 1004 	ldr.w	r1, [sl, #4]
   1df9e:	88a3      	ldrh	r3, [r4, #4]
   1dfa0:	f10d 000d 	add.w	r0, sp, #13
   1dfa4:	9000      	str	r0, [sp, #0]
   1dfa6:	f8d1 a000 	ldr.w	sl, [r1]
   1dfaa:	4413      	add	r3, r2
   1dfac:	4639      	mov	r1, r7
   1dfae:	f10d 020e 	add.w	r2, sp, #14
   1dfb2:	4640      	mov	r0, r8
   1dfb4:	47d0      	blx	sl
		if (err) {
   1dfb6:	b148      	cbz	r0, 1dfcc <health_pub_update+0x78>
		sys_put_le16(comp->cid, company_ptr);
   1dfb8:	f8b9 3000 	ldrh.w	r3, [r9]
	dst[0] = val;
   1dfbc:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   1dfbe:	0a1b      	lsrs	r3, r3, #8
   1dfc0:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
   1dfc2:	2300      	movs	r3, #0
   1dfc4:	703b      	strb	r3, [r7, #0]
		fault_count = 0U;
   1dfc6:	f88d 300d 	strb.w	r3, [sp, #13]
   1dfca:	e009      	b.n	1dfe0 <health_pub_update+0x8c>
			sys_put_le16(company_id, company_ptr);
   1dfcc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   1dfd0:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   1dfd2:	0a1b      	lsrs	r3, r3, #8
   1dfd4:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
   1dfd6:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1dfda:	4620      	mov	r0, r4
   1dfdc:	f001 f88e 	bl	1f0fc <net_buf_simple_add>
	return fault_count;
   1dfe0:	f89d 200d 	ldrb.w	r2, [sp, #13]
	if (!count) {
   1dfe4:	b91a      	cbnz	r2, 1dfee <health_pub_update+0x9a>
		pub->period_div = 0;
   1dfe6:	7af3      	ldrb	r3, [r6, #11]
   1dfe8:	f362 0303 	bfi	r3, r2, #0, #4
   1dfec:	72f3      	strb	r3, [r6, #11]
}
   1dfee:	2000      	movs	r0, #0
   1dff0:	b004      	add	sp, #16
   1dff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001dff6 <attention_set_unrel>:
{
   1dff6:	b510      	push	{r4, lr}
   1dff8:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   1dffa:	4610      	mov	r0, r2
   1dffc:	f001 f909 	bl	1f212 <net_buf_simple_pull_u8>
	bt_mesh_attention(model, time);
   1e000:	4601      	mov	r1, r0
   1e002:	4620      	mov	r0, r4
}
   1e004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_attention(model, time);
   1e008:	f7f1 b8f8 	b.w	f1fc <bt_mesh_attention>

0001e00c <attention_set>:
{
   1e00c:	b538      	push	{r3, r4, r5, lr}
   1e00e:	4604      	mov	r4, r0
   1e010:	460d      	mov	r5, r1
	attention_set_unrel(model, ctx, buf);
   1e012:	f7ff fff0 	bl	1dff6 <attention_set_unrel>
	send_attention_status(model, ctx);
   1e016:	4629      	mov	r1, r5
   1e018:	4620      	mov	r0, r4
}
   1e01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_attention_status(model, ctx);
   1e01e:	f7ff be9d 	b.w	1dd5c <send_attention_status>

0001e022 <mesh_x_set>:
{
   1e022:	b510      	push	{r4, lr}
   1e024:	4614      	mov	r4, r2
	len = settings_val_read_cb(val_ctx, out, read_len);
   1e026:	f7fb fe4a 	bl	19cbe <settings_val_read_cb>
	if (len < 0) {
   1e02a:	2800      	cmp	r0, #0
   1e02c:	db04      	blt.n	1e038 <mesh_x_set+0x16>
	if (len != read_len) {
   1e02e:	4284      	cmp	r4, r0
		return -EINVAL;
   1e030:	bf0c      	ite	eq
   1e032:	2000      	moveq	r0, #0
   1e034:	f06f 0015 	mvnne.w	r0, #21
}
   1e038:	bd10      	pop	{r4, pc}

0001e03a <hb_pub_set>:
{
   1e03a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e03c:	4615      	mov	r5, r2
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
   1e03e:	f7f1 f83b 	bl	f0b8 <bt_mesh_hb_pub_get>
	if (!pub) {
   1e042:	4604      	mov	r4, r0
   1e044:	b328      	cbz	r0, 1e092 <hb_pub_set+0x58>
	if (settings_val_get_len_cb(val_ctx) == 0) {
   1e046:	4628      	mov	r0, r5
   1e048:	f7fb fe56 	bl	19cf8 <settings_val_get_len_cb>
   1e04c:	b918      	cbnz	r0, 1e056 <hb_pub_set+0x1c>
		pub->period = 0;
   1e04e:	e9c4 0008 	strd	r0, r0, [r4, #32]
}
   1e052:	b003      	add	sp, #12
   1e054:	bd30      	pop	{r4, r5, pc}
	err = mesh_x_set(val_ctx, &hb_val, sizeof(hb_val));
   1e056:	2208      	movs	r2, #8
   1e058:	4669      	mov	r1, sp
   1e05a:	4628      	mov	r0, r5
   1e05c:	f7ff ffe1 	bl	1e022 <mesh_x_set>
	if (err) {
   1e060:	2800      	cmp	r0, #0
   1e062:	d1f6      	bne.n	1e052 <hb_pub_set+0x18>
	pub->dst = hb_val.dst;
   1e064:	f8bd 3000 	ldrh.w	r3, [sp]
   1e068:	8423      	strh	r3, [r4, #32]
	pub->feat = hb_val.feat;
   1e06a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e06e:	84e3      	strh	r3, [r4, #38]	; 0x26
	pub->net_idx = hb_val.net_idx;
   1e070:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	pub->period = hb_val.period;
   1e074:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1e078:	84a2      	strh	r2, [r4, #36]	; 0x24
	pub->net_idx = hb_val.net_idx;
   1e07a:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1e07e:	8523      	strh	r3, [r4, #40]	; 0x28
	if (hb_val.indefinite) {
   1e080:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e084:	06db      	lsls	r3, r3, #27
		pub->count = 0xffff;
   1e086:	bf46      	itte	mi
   1e088:	f64f 73ff 	movwmi	r3, #65535	; 0xffff
   1e08c:	8463      	strhmi	r3, [r4, #34]	; 0x22
		pub->count = 0;
   1e08e:	8460      	strhpl	r0, [r4, #34]	; 0x22
   1e090:	e7df      	b.n	1e052 <hb_pub_set+0x18>
		return -ENOENT;
   1e092:	f06f 0001 	mvn.w	r0, #1
   1e096:	e7dc      	b.n	1e052 <hb_pub_set+0x18>

0001e098 <vnd_mod_set>:
	return mod_set(true, argc, argv, val_ctx);
   1e098:	4613      	mov	r3, r2
   1e09a:	460a      	mov	r2, r1
   1e09c:	4601      	mov	r1, r0
   1e09e:	2001      	movs	r0, #1
   1e0a0:	f7f1 ba38 	b.w	f514 <mod_set>

0001e0a4 <sig_mod_set>:
	return mod_set(false, argc, argv, val_ctx);
   1e0a4:	4613      	mov	r3, r2
   1e0a6:	460a      	mov	r2, r1
   1e0a8:	4601      	mov	r1, r0
   1e0aa:	2000      	movs	r0, #0
   1e0ac:	f7f1 ba32 	b.w	f514 <mod_set>

0001e0b0 <app_key_set>:
{
   1e0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0b2:	460b      	mov	r3, r1
   1e0b4:	b08b      	sub	sp, #44	; 0x2c
   1e0b6:	4615      	mov	r5, r2
	app_idx = strtol(argv[0], NULL, 16);
   1e0b8:	2100      	movs	r1, #0
   1e0ba:	2210      	movs	r2, #16
   1e0bc:	6818      	ldr	r0, [r3, #0]
   1e0be:	f7fb ff50 	bl	19f62 <strtol>
   1e0c2:	b286      	uxth	r6, r0
	if (settings_val_get_len_cb(val_ctx) == 0) {
   1e0c4:	4628      	mov	r0, r5
   1e0c6:	f7fb fe17 	bl	19cf8 <settings_val_get_len_cb>
   1e0ca:	4604      	mov	r4, r0
   1e0cc:	b958      	cbnz	r0, 1e0e6 <app_key_set+0x36>
		app = bt_mesh_app_key_find(app_idx);
   1e0ce:	4630      	mov	r0, r6
   1e0d0:	f7ef fbee 	bl	d8b0 <bt_mesh_app_key_find>
		if (app) {
   1e0d4:	4605      	mov	r5, r0
   1e0d6:	b118      	cbz	r0, 1e0e0 <app_key_set+0x30>
			bt_mesh_app_key_del(app, false);
   1e0d8:	4621      	mov	r1, r4
   1e0da:	f7f0 fe69 	bl	edb0 <bt_mesh_app_key_del>
		return 0;
   1e0de:	4625      	mov	r5, r4
}
   1e0e0:	4628      	mov	r0, r5
   1e0e2:	b00b      	add	sp, #44	; 0x2c
   1e0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = mesh_x_set(val_ctx, &key, sizeof(key));
   1e0e6:	4628      	mov	r0, r5
   1e0e8:	2223      	movs	r2, #35	; 0x23
   1e0ea:	a901      	add	r1, sp, #4
   1e0ec:	f7ff ff99 	bl	1e022 <mesh_x_set>
	if (err) {
   1e0f0:	4605      	mov	r5, r0
   1e0f2:	2800      	cmp	r0, #0
   1e0f4:	d1f4      	bne.n	1e0e0 <app_key_set+0x30>
	app = bt_mesh_app_key_find(app_idx);
   1e0f6:	4630      	mov	r0, r6
   1e0f8:	f7ef fbda 	bl	d8b0 <bt_mesh_app_key_find>
	if (!app) {
   1e0fc:	4604      	mov	r4, r0
   1e0fe:	b920      	cbnz	r0, 1e10a <app_key_set+0x5a>
		app = bt_mesh_app_key_alloc(app_idx);
   1e100:	4630      	mov	r0, r6
   1e102:	f7f0 fe43 	bl	ed8c <bt_mesh_app_key_alloc>
	if (!app) {
   1e106:	4604      	mov	r4, r0
   1e108:	b1f8      	cbz	r0, 1e14a <app_key_set+0x9a>
	app->net_idx = key.net_idx;
   1e10a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e10e:	8023      	strh	r3, [r4, #0]
	memcpy(app->keys[0].val, key.val[0], 16);
   1e110:	1da7      	adds	r7, r4, #6
	app->updated = key.updated;
   1e112:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1e116:	7123      	strb	r3, [r4, #4]
	app->app_idx = app_idx;
   1e118:	8066      	strh	r6, [r4, #2]
	memcpy(app->keys[0].val, key.val[0], 16);
   1e11a:	f10d 0107 	add.w	r1, sp, #7
	memcpy(app->keys[1].val, key.val[1], 16);
   1e11e:	f104 0617 	add.w	r6, r4, #23
	memcpy(app->keys[0].val, key.val[0], 16);
   1e122:	2210      	movs	r2, #16
   1e124:	4638      	mov	r0, r7
   1e126:	f7fb ffbf 	bl	1a0a8 <memcpy>
	memcpy(app->keys[1].val, key.val[1], 16);
   1e12a:	2210      	movs	r2, #16
   1e12c:	f10d 0117 	add.w	r1, sp, #23
   1e130:	4630      	mov	r0, r6
   1e132:	f7fb ffb9 	bl	1a0a8 <memcpy>
	return bt_mesh_k4(app_key, app_id);
   1e136:	1d61      	adds	r1, r4, #5
   1e138:	4638      	mov	r0, r7
   1e13a:	f7ef ffb5 	bl	e0a8 <bt_mesh_k4>
   1e13e:	f104 0116 	add.w	r1, r4, #22
   1e142:	4630      	mov	r0, r6
   1e144:	f7ef ffb0 	bl	e0a8 <bt_mesh_k4>
   1e148:	e7ca      	b.n	1e0e0 <app_key_set+0x30>
		return -ENOMEM;
   1e14a:	f06f 050b 	mvn.w	r5, #11
   1e14e:	e7c7      	b.n	1e0e0 <app_key_set+0x30>

0001e150 <bt_mesh_store_net>:
	schedule_store(BT_MESH_NET_PENDING);
   1e150:	2008      	movs	r0, #8
   1e152:	f7f1 bc23 	b.w	f99c <schedule_store>

0001e156 <bt_mesh_store_iv>:
{
   1e156:	b510      	push	{r4, lr}
   1e158:	4604      	mov	r4, r0
	schedule_store(BT_MESH_IV_PENDING);
   1e15a:	2009      	movs	r0, #9
   1e15c:	f7f1 fc1e 	bl	f99c <schedule_store>
	if (!only_duration) {
   1e160:	b924      	cbnz	r4, 1e16c <bt_mesh_store_iv+0x16>
		schedule_store(BT_MESH_SEQ_PENDING);
   1e162:	200a      	movs	r0, #10
}
   1e164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		schedule_store(BT_MESH_SEQ_PENDING);
   1e168:	f7f1 bc18 	b.w	f99c <schedule_store>
}
   1e16c:	bd10      	pop	{r4, pc}

0001e16e <bt_mesh_store_rpl>:
	entry->store = true;
   1e16e:	2301      	movs	r3, #1
   1e170:	70c3      	strb	r3, [r0, #3]
	schedule_store(BT_MESH_RPL_PENDING);
   1e172:	2006      	movs	r0, #6
   1e174:	f7f1 bc12 	b.w	f99c <schedule_store>

0001e178 <bt_mesh_store_subnet>:
{
   1e178:	b513      	push	{r0, r1, r4, lr}
   1e17a:	4604      	mov	r4, r0
	update = key_update_find(false, sub->net_idx, &free_slot);
   1e17c:	8b81      	ldrh	r1, [r0, #28]
   1e17e:	aa01      	add	r2, sp, #4
   1e180:	2000      	movs	r0, #0
   1e182:	f7f1 f869 	bl	f258 <key_update_find>
	if (update) {
   1e186:	b138      	cbz	r0, 1e198 <bt_mesh_store_subnet+0x20>
		update->clear = 0U;
   1e188:	7843      	ldrb	r3, [r0, #1]
   1e18a:	f36f 1386 	bfc	r3, #6, #1
   1e18e:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   1e190:	2007      	movs	r0, #7
   1e192:	f7f1 fc03 	bl	f99c <schedule_store>
   1e196:	e004      	b.n	1e1a2 <bt_mesh_store_subnet+0x2a>
	if (!free_slot) {
   1e198:	9a01      	ldr	r2, [sp, #4]
   1e19a:	b922      	cbnz	r2, 1e1a6 <bt_mesh_store_subnet+0x2e>
		store_net_key(sub);
   1e19c:	4620      	mov	r0, r4
   1e19e:	f7f1 f945 	bl	f42c <store_net_key>
}
   1e1a2:	b002      	add	sp, #8
   1e1a4:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
   1e1a6:	8813      	ldrh	r3, [r2, #0]
   1e1a8:	8ba1      	ldrh	r1, [r4, #28]
   1e1aa:	f361 030b 	bfi	r3, r1, #0, #12
   1e1ae:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   1e1b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1e1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   1e1b8:	f043 0310 	orr.w	r3, r3, #16
   1e1bc:	7053      	strb	r3, [r2, #1]
   1e1be:	e7e7      	b.n	1e190 <bt_mesh_store_subnet+0x18>

0001e1c0 <bt_mesh_store_app_key>:
{
   1e1c0:	b513      	push	{r0, r1, r4, lr}
   1e1c2:	4604      	mov	r4, r0
	update = key_update_find(true, key->app_idx, &free_slot);
   1e1c4:	8841      	ldrh	r1, [r0, #2]
   1e1c6:	aa01      	add	r2, sp, #4
   1e1c8:	2001      	movs	r0, #1
   1e1ca:	f7f1 f845 	bl	f258 <key_update_find>
	if (update) {
   1e1ce:	b138      	cbz	r0, 1e1e0 <bt_mesh_store_app_key+0x20>
		update->clear = 0U;
   1e1d0:	7843      	ldrb	r3, [r0, #1]
   1e1d2:	f36f 1386 	bfc	r3, #6, #1
   1e1d6:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   1e1d8:	2007      	movs	r0, #7
   1e1da:	f7f1 fbdf 	bl	f99c <schedule_store>
   1e1de:	e004      	b.n	1e1ea <bt_mesh_store_app_key+0x2a>
	if (!free_slot) {
   1e1e0:	9a01      	ldr	r2, [sp, #4]
   1e1e2:	b922      	cbnz	r2, 1e1ee <bt_mesh_store_app_key+0x2e>
		store_app_key(key);
   1e1e4:	4620      	mov	r0, r4
   1e1e6:	f7f1 f94b 	bl	f480 <store_app_key>
}
   1e1ea:	b002      	add	sp, #8
   1e1ec:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
   1e1ee:	8813      	ldrh	r3, [r2, #0]
   1e1f0:	8861      	ldrh	r1, [r4, #2]
   1e1f2:	f361 030b 	bfi	r3, r1, #0, #12
   1e1f6:	8013      	strh	r3, [r2, #0]
	free_slot->valid = 1U;
   1e1f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1e1fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   1e200:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1e204:	7053      	strb	r3, [r2, #1]
   1e206:	e7e7      	b.n	1e1d8 <bt_mesh_store_app_key+0x18>

0001e208 <bt_mesh_store_hb_pub>:
	schedule_store(BT_MESH_HB_PUB_PENDING);
   1e208:	200b      	movs	r0, #11
   1e20a:	f7f1 bbc7 	b.w	f99c <schedule_store>

0001e20e <bt_mesh_store_cfg>:
	schedule_store(BT_MESH_CFG_PENDING);
   1e20e:	200c      	movs	r0, #12
   1e210:	f7f1 bbc4 	b.w	f99c <schedule_store>

0001e214 <bt_mesh_clear_net>:
{
   1e214:	b508      	push	{r3, lr}
	schedule_store(BT_MESH_NET_PENDING);
   1e216:	2008      	movs	r0, #8
   1e218:	f7f1 fbc0 	bl	f99c <schedule_store>
	schedule_store(BT_MESH_IV_PENDING);
   1e21c:	2009      	movs	r0, #9
   1e21e:	f7f1 fbbd 	bl	f99c <schedule_store>
	schedule_store(BT_MESH_CFG_PENDING);
   1e222:	200c      	movs	r0, #12
}
   1e224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	schedule_store(BT_MESH_CFG_PENDING);
   1e228:	f7f1 bbb8 	b.w	f99c <schedule_store>

0001e22c <bt_mesh_clear_rpl>:
	schedule_store(BT_MESH_RPL_PENDING);
   1e22c:	2006      	movs	r0, #6
   1e22e:	f7f1 bbb5 	b.w	f99c <schedule_store>

0001e232 <bt_mesh_store_mod_bind>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   1e232:	88c3      	ldrh	r3, [r0, #6]
   1e234:	f043 0301 	orr.w	r3, r3, #1
   1e238:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   1e23a:	200d      	movs	r0, #13
   1e23c:	f7f1 bbae 	b.w	f99c <schedule_store>

0001e240 <bt_mesh_store_mod_sub>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   1e240:	88c3      	ldrh	r3, [r0, #6]
   1e242:	f043 0302 	orr.w	r3, r3, #2
   1e246:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   1e248:	200d      	movs	r0, #13
   1e24a:	f7f1 bba7 	b.w	f99c <schedule_store>

0001e24e <bt_mesh_store_mod_pub>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   1e24e:	88c3      	ldrh	r3, [r0, #6]
   1e250:	f043 0304 	orr.w	r3, r3, #4
   1e254:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   1e256:	200d      	movs	r0, #13
   1e258:	f7f1 bba0 	b.w	f99c <schedule_store>

0001e25c <prov_capabilities>:
}
   1e25c:	4770      	bx	lr

0001e25e <prov_buf_init>:
{
   1e25e:	b538      	push	{r3, r4, r5, lr}
   1e260:	4604      	mov	r4, r0
   1e262:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BUF_HEADROOM);
   1e264:	2105      	movs	r1, #5
   1e266:	f000 fee4 	bl	1f032 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   1e26a:	4629      	mov	r1, r5
   1e26c:	4620      	mov	r0, r4
}
   1e26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   1e272:	f000 bf52 	b.w	1f11a <net_buf_simple_add_u8>

0001e276 <adv_buf_create>:
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV, PROV_XMIT, BUF_TIMEOUT);
   1e276:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1e27a:	210a      	movs	r1, #10
   1e27c:	2000      	movs	r0, #0
   1e27e:	f7ed becb 	b.w	c018 <bt_mesh_adv_create>

0001e282 <prov_send_fail_msg>:
{
   1e282:	b510      	push	{r4, lr}
   1e284:	b086      	sub	sp, #24
	PROV_BUF(buf, 2);
   1e286:	ab01      	add	r3, sp, #4
   1e288:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   1e28c:	4604      	mov	r4, r0
	prov_buf_init(&buf, PROV_FAILED);
   1e28e:	2109      	movs	r1, #9
   1e290:	a803      	add	r0, sp, #12
	PROV_BUF(buf, 2);
   1e292:	9303      	str	r3, [sp, #12]
   1e294:	e9cd 2304 	strd	r2, r3, [sp, #16]
	prov_buf_init(&buf, PROV_FAILED);
   1e298:	f7ff ffe1 	bl	1e25e <prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   1e29c:	4621      	mov	r1, r4
   1e29e:	a803      	add	r0, sp, #12
   1e2a0:	f000 ff3b 	bl	1f11a <net_buf_simple_add_u8>
	prov_send(&buf);
   1e2a4:	a803      	add	r0, sp, #12
   1e2a6:	f7f1 fe17 	bl	fed8 <prov_send>
}
   1e2aa:	b006      	add	sp, #24
   1e2ac:	bd10      	pop	{r4, pc}

0001e2ae <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e2ae:	f3bf 8f5b 	dmb	ish
   1e2b2:	e850 3f00 	ldrex	r3, [r0]
   1e2b6:	ea43 0201 	orr.w	r2, r3, r1
   1e2ba:	e840 2c00 	strex	ip, r2, [r0]
   1e2be:	f1bc 0f00 	cmp.w	ip, #0
   1e2c2:	d1f6      	bne.n	1e2b2 <atomic_or+0x4>
   1e2c4:	f3bf 8f5b 	dmb	ish
}
   1e2c8:	4618      	mov	r0, r3
   1e2ca:	4770      	bx	lr

0001e2cc <prov_complete>:
   1e2cc:	4770      	bx	lr

0001e2ce <sys_memcpy_swap.constprop.21>:
	for (; length > 0; length--) {
   1e2ce:	f101 0320 	add.w	r3, r1, #32
   1e2d2:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1e2d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e2d8:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1e2dc:	428b      	cmp	r3, r1
   1e2de:	d1f9      	bne.n	1e2d4 <sys_memcpy_swap.constprop.21+0x6>
}
   1e2e0:	4770      	bx	lr

0001e2e2 <prov_failed>:
   1e2e2:	4770      	bx	lr

0001e2e4 <prov_input_complete>:
   1e2e4:	4770      	bx	lr

0001e2e6 <bt_prov_active>:
	return atomic_test_bit(link.flags, LINK_ACTIVE);
   1e2e6:	2002      	movs	r0, #2
   1e2e8:	f7f1 bfd2 	b.w	10290 <atomic_test_bit.constprop.26>

0001e2ec <prov_ccc_changed>:
}
   1e2ec:	4770      	bx	lr

0001e2ee <filter_add>:
{
   1e2ee:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1e2f0:	b179      	cbz	r1, 1e312 <filter_add+0x24>
		if (client->filter[i] == addr) {
   1e2f2:	8883      	ldrh	r3, [r0, #4]
   1e2f4:	4299      	cmp	r1, r3
   1e2f6:	d00c      	beq.n	1e312 <filter_add+0x24>
   1e2f8:	88c4      	ldrh	r4, [r0, #6]
   1e2fa:	42a1      	cmp	r1, r4
   1e2fc:	d009      	beq.n	1e312 <filter_add+0x24>
   1e2fe:	8902      	ldrh	r2, [r0, #8]
   1e300:	4291      	cmp	r1, r2
   1e302:	d006      	beq.n	1e312 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
   1e304:	b113      	cbz	r3, 1e30c <filter_add+0x1e>
   1e306:	b12c      	cbz	r4, 1e314 <filter_add+0x26>
   1e308:	b91a      	cbnz	r2, 1e312 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1e30a:	2302      	movs	r3, #2
			client->filter[i] = addr;
   1e30c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   1e310:	8081      	strh	r1, [r0, #4]
}
   1e312:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1e314:	2301      	movs	r3, #1
   1e316:	e7f9      	b.n	1e30c <filter_add+0x1e>

0001e318 <proxy_ccc_changed>:
   1e318:	4770      	bx	lr

0001e31a <proxy_segment_and_send>:
{
   1e31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e31e:	4688      	mov	r8, r1
   1e320:	4614      	mov	r4, r2
   1e322:	4607      	mov	r7, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
   1e324:	f7fd f9d3 	bl	1b6ce <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   1e328:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   1e32a:	3803      	subs	r0, #3
   1e32c:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
   1e32e:	42ab      	cmp	r3, r5
   1e330:	f008 063f 	and.w	r6, r8, #63	; 0x3f
   1e334:	d20a      	bcs.n	1e34c <proxy_segment_and_send+0x32>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   1e336:	4631      	mov	r1, r6
   1e338:	4620      	mov	r0, r4
   1e33a:	f000 ff51 	bl	1f1e0 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
   1e33e:	88a2      	ldrh	r2, [r4, #4]
   1e340:	6821      	ldr	r1, [r4, #0]
   1e342:	4638      	mov	r0, r7
}
   1e344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
   1e348:	f7f2 bd4a 	b.w	10de0 <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   1e34c:	f046 0140 	orr.w	r1, r6, #64	; 0x40
   1e350:	4620      	mov	r0, r4
   1e352:	f000 ff45 	bl	1f1e0 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
   1e356:	462a      	mov	r2, r5
   1e358:	6821      	ldr	r1, [r4, #0]
   1e35a:	4638      	mov	r0, r7
   1e35c:	f7f2 fd40 	bl	10de0 <proxy_send>
	net_buf_simple_pull(msg, mtu);
   1e360:	4629      	mov	r1, r5
   1e362:	4620      	mov	r0, r4
   1e364:	f000 ff45 	bl	1f1f2 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   1e368:	f046 0680 	orr.w	r6, r6, #128	; 0x80
	while (msg->len) {
   1e36c:	88a3      	ldrh	r3, [r4, #4]
   1e36e:	b163      	cbz	r3, 1e38a <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
   1e370:	3301      	adds	r3, #1
   1e372:	42ab      	cmp	r3, r5
   1e374:	da0c      	bge.n	1e390 <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   1e376:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   1e37a:	4620      	mov	r0, r4
   1e37c:	f000 ff30 	bl	1f1e0 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
   1e380:	88a2      	ldrh	r2, [r4, #4]
   1e382:	6821      	ldr	r1, [r4, #0]
   1e384:	4638      	mov	r0, r7
   1e386:	f7f2 fd2b 	bl	10de0 <proxy_send>
}
   1e38a:	2000      	movs	r0, #0
   1e38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   1e390:	4631      	mov	r1, r6
   1e392:	4620      	mov	r0, r4
   1e394:	f000 ff24 	bl	1f1e0 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
   1e398:	6821      	ldr	r1, [r4, #0]
   1e39a:	462a      	mov	r2, r5
   1e39c:	4638      	mov	r0, r7
   1e39e:	f7f2 fd1f 	bl	10de0 <proxy_send>
		net_buf_simple_pull(msg, mtu);
   1e3a2:	4629      	mov	r1, r5
   1e3a4:	4620      	mov	r0, r4
   1e3a6:	f000 ff24 	bl	1f1f2 <net_buf_simple_pull>
   1e3aa:	e7df      	b.n	1e36c <proxy_segment_and_send+0x52>

0001e3ac <beacon_send>:
{
   1e3ac:	b530      	push	{r4, r5, lr}
   1e3ae:	b08b      	sub	sp, #44	; 0x2c
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   1e3b0:	ab04      	add	r3, sp, #16
   1e3b2:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
{
   1e3b6:	4604      	mov	r4, r0
   1e3b8:	460d      	mov	r5, r1
	net_buf_simple_reserve(&buf, 1);
   1e3ba:	a801      	add	r0, sp, #4
   1e3bc:	2101      	movs	r1, #1
	NET_BUF_SIMPLE_DEFINE(buf, 23);
   1e3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e3c2:	9301      	str	r3, [sp, #4]
	net_buf_simple_reserve(&buf, 1);
   1e3c4:	f000 fe35 	bl	1f032 <net_buf_simple_reserve>
	bt_mesh_beacon_create(sub, &buf);
   1e3c8:	a901      	add	r1, sp, #4
   1e3ca:	4628      	mov	r0, r5
   1e3cc:	f7ed fe94 	bl	c0f8 <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, &buf);
   1e3d0:	aa01      	add	r2, sp, #4
   1e3d2:	2101      	movs	r1, #1
   1e3d4:	4620      	mov	r0, r4
   1e3d6:	f7ff ffa0 	bl	1e31a <proxy_segment_and_send>
}
   1e3da:	b00b      	add	sp, #44	; 0x2c
   1e3dc:	bd30      	pop	{r4, r5, pc}

0001e3de <send_filter_status>:
{
   1e3de:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
   1e3e0:	f851 3b04 	ldr.w	r3, [r1], #4
   1e3e4:	2600      	movs	r6, #0
{
   1e3e6:	4614      	mov	r4, r2
   1e3e8:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
   1e3ea:	e9cd 3101 	strd	r3, r1, [sp, #4]
   1e3ee:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
   1e3f0:	f7f0 f804 	bl	e3fc <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   1e3f4:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
   1e3f6:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
   1e3fa:	809e      	strh	r6, [r3, #4]
	buf->data = buf->__buf;
   1e3fc:	68a3      	ldr	r3, [r4, #8]
   1e3fe:	6023      	str	r3, [r4, #0]
	net_buf_simple_reserve(buf, 10);
   1e400:	210a      	movs	r1, #10
   1e402:	4620      	mov	r0, r4
	buf->len  = 0;
   1e404:	80a6      	strh	r6, [r4, #4]
   1e406:	f000 fe14 	bl	1f032 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
   1e40a:	2103      	movs	r1, #3
   1e40c:	4620      	mov	r0, r4
   1e40e:	f000 fe84 	bl	1f11a <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
   1e412:	7aab      	ldrb	r3, [r5, #10]
   1e414:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
   1e416:	bf0c      	ite	eq
   1e418:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
   1e41a:	2101      	movne	r1, #1
   1e41c:	4620      	mov	r0, r4
   1e41e:	f000 fe7c 	bl	1f11a <net_buf_simple_add_u8>
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   1e422:	88a9      	ldrh	r1, [r5, #4]
   1e424:	88eb      	ldrh	r3, [r5, #6]
	for (filter_size = 0U, i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1e426:	3100      	adds	r1, #0
   1e428:	bf18      	it	ne
   1e42a:	2101      	movne	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   1e42c:	b103      	cbz	r3, 1e430 <send_filter_status+0x52>
			filter_size++;
   1e42e:	3101      	adds	r1, #1
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
   1e430:	892b      	ldrh	r3, [r5, #8]
   1e432:	b10b      	cbz	r3, 1e438 <send_filter_status+0x5a>
			filter_size++;
   1e434:	3101      	adds	r1, #1
   1e436:	b289      	uxth	r1, r1
	net_buf_simple_add_be16(buf, filter_size);
   1e438:	4620      	mov	r0, r4
   1e43a:	f000 fe85 	bl	1f148 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
   1e43e:	2201      	movs	r2, #1
   1e440:	4621      	mov	r1, r4
   1e442:	a801      	add	r0, sp, #4
   1e444:	f7ee fb44 	bl	cad0 <bt_mesh_net_encode>
	if (err) {
   1e448:	b920      	cbnz	r0, 1e454 <send_filter_status+0x76>
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
   1e44a:	4622      	mov	r2, r4
   1e44c:	2102      	movs	r1, #2
   1e44e:	6828      	ldr	r0, [r5, #0]
   1e450:	f7ff ff63 	bl	1e31a <proxy_segment_and_send>
}
   1e454:	b004      	add	sp, #16
   1e456:	bd70      	pop	{r4, r5, r6, pc}

0001e458 <proxy_complete_pdu>:
{
   1e458:	b570      	push	{r4, r5, r6, lr}
	switch (client->msg_type) {
   1e45a:	7ac3      	ldrb	r3, [r0, #11]
{
   1e45c:	b092      	sub	sp, #72	; 0x48
   1e45e:	4604      	mov	r4, r0
	switch (client->msg_type) {
   1e460:	2b03      	cmp	r3, #3
   1e462:	d808      	bhi.n	1e476 <proxy_complete_pdu+0x1e>
   1e464:	e8df f003 	tbb	[pc, r3]
   1e468:	76110d02 	.word	0x76110d02
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
   1e46c:	2202      	movs	r2, #2
   1e46e:	2100      	movs	r1, #0
   1e470:	3018      	adds	r0, #24
   1e472:	f7ee fd7d 	bl	cf70 <bt_mesh_net_recv>
   1e476:	2300      	movs	r3, #0
   1e478:	83a3      	strh	r3, [r4, #28]
	buf->data = buf->__buf;
   1e47a:	6a23      	ldr	r3, [r4, #32]
   1e47c:	61a3      	str	r3, [r4, #24]
}
   1e47e:	b012      	add	sp, #72	; 0x48
   1e480:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_beacon_recv(&client->buf);
   1e482:	3018      	adds	r0, #24
   1e484:	f7ed ff8e 	bl	c3a4 <bt_mesh_beacon_recv>
		break;
   1e488:	e7f5      	b.n	1e476 <proxy_complete_pdu+0x1e>
	NET_BUF_SIMPLE_DEFINE(buf, 29);
   1e48a:	ab0a      	add	r3, sp, #40	; 0x28
   1e48c:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
   1e490:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e494:	9301      	str	r3, [sp, #4]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
   1e496:	aa04      	add	r2, sp, #16
   1e498:	ab01      	add	r3, sp, #4
   1e49a:	2103      	movs	r1, #3
   1e49c:	3018      	adds	r0, #24
   1e49e:	f7ee fc5f 	bl	cd60 <bt_mesh_net_decode>
	if (err) {
   1e4a2:	4605      	mov	r5, r0
   1e4a4:	2800      	cmp	r0, #0
   1e4a6:	d1e6      	bne.n	1e476 <proxy_complete_pdu+0x1e>
	net_buf_simple_pull(&buf, BT_MESH_NET_HDR_LEN);
   1e4a8:	2109      	movs	r1, #9
   1e4aa:	a801      	add	r0, sp, #4
   1e4ac:	f000 fea1 	bl	1f1f2 <net_buf_simple_pull>
	if (buf.len < 1) {
   1e4b0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1e4b4:	2b00      	cmp	r3, #0
   1e4b6:	d0de      	beq.n	1e476 <proxy_complete_pdu+0x1e>
	opcode = net_buf_simple_pull_u8(&buf);
   1e4b8:	a801      	add	r0, sp, #4
   1e4ba:	f000 feaa 	bl	1f212 <net_buf_simple_pull_u8>
	switch (opcode) {
   1e4be:	2801      	cmp	r0, #1
   1e4c0:	d03f      	beq.n	1e542 <proxy_complete_pdu+0xea>
   1e4c2:	b246      	sxtb	r6, r0
   1e4c4:	b1c6      	cbz	r6, 1e4f8 <proxy_complete_pdu+0xa0>
   1e4c6:	2802      	cmp	r0, #2
   1e4c8:	d1d5      	bne.n	1e476 <proxy_complete_pdu+0x1e>
		while (buf.len >= 2) {
   1e4ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1e4ce:	2b01      	cmp	r3, #1
   1e4d0:	d91b      	bls.n	1e50a <proxy_complete_pdu+0xb2>
			addr = net_buf_simple_pull_be16(&buf);
   1e4d2:	a801      	add	r0, sp, #4
   1e4d4:	f000 fead 	bl	1f232 <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1e4d8:	2800      	cmp	r0, #0
   1e4da:	d0f6      	beq.n	1e4ca <proxy_complete_pdu+0x72>
		if (client->filter[i] == addr) {
   1e4dc:	88a3      	ldrh	r3, [r4, #4]
   1e4de:	4283      	cmp	r3, r0
   1e4e0:	d034      	beq.n	1e54c <proxy_complete_pdu+0xf4>
   1e4e2:	88e3      	ldrh	r3, [r4, #6]
   1e4e4:	4283      	cmp	r3, r0
   1e4e6:	d033      	beq.n	1e550 <proxy_complete_pdu+0xf8>
   1e4e8:	8923      	ldrh	r3, [r4, #8]
   1e4ea:	4283      	cmp	r3, r0
   1e4ec:	d1ed      	bne.n	1e4ca <proxy_complete_pdu+0x72>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1e4ee:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   1e4f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   1e4f4:	809d      	strh	r5, [r3, #4]
			return;
   1e4f6:	e7e8      	b.n	1e4ca <proxy_complete_pdu+0x72>
	if (buf->len < 1) {
   1e4f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1e4fc:	b12b      	cbz	r3, 1e50a <proxy_complete_pdu+0xb2>
	type = net_buf_simple_pull_u8(buf);
   1e4fe:	a801      	add	r0, sp, #4
   1e500:	f000 fe87 	bl	1f212 <net_buf_simple_pull_u8>
	switch (type) {
   1e504:	b138      	cbz	r0, 1e516 <proxy_complete_pdu+0xbe>
   1e506:	2801      	cmp	r0, #1
   1e508:	d00d      	beq.n	1e526 <proxy_complete_pdu+0xce>
		send_filter_status(client, &rx, &buf);
   1e50a:	aa01      	add	r2, sp, #4
   1e50c:	a904      	add	r1, sp, #16
   1e50e:	4620      	mov	r0, r4
   1e510:	f7ff ff65 	bl	1e3de <send_filter_status>
		break;
   1e514:	e7af      	b.n	1e476 <proxy_complete_pdu+0x1e>
		(void)memset(client->filter, 0, sizeof(client->filter));
   1e516:	4601      	mov	r1, r0
   1e518:	2206      	movs	r2, #6
   1e51a:	1d20      	adds	r0, r4, #4
   1e51c:	f7fb fdee 	bl	1a0fc <memset>
		client->filter_type = WHITELIST;
   1e520:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
   1e522:	72a3      	strb	r3, [r4, #10]
		send_filter_status(client, &rx, &buf);
   1e524:	e7f1      	b.n	1e50a <proxy_complete_pdu+0xb2>
		(void)memset(client->filter, 0, sizeof(client->filter));
   1e526:	2206      	movs	r2, #6
   1e528:	4631      	mov	r1, r6
   1e52a:	1d20      	adds	r0, r4, #4
   1e52c:	f7fb fde6 	bl	1a0fc <memset>
		client->filter_type = BLACKLIST;
   1e530:	2302      	movs	r3, #2
   1e532:	e7f6      	b.n	1e522 <proxy_complete_pdu+0xca>
			addr = net_buf_simple_pull_be16(&buf);
   1e534:	a801      	add	r0, sp, #4
   1e536:	f000 fe7c 	bl	1f232 <net_buf_simple_pull_be16>
			filter_add(client, addr);
   1e53a:	4601      	mov	r1, r0
   1e53c:	4620      	mov	r0, r4
   1e53e:	f7ff fed6 	bl	1e2ee <filter_add>
		while (buf.len >= 2) {
   1e542:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1e546:	2b01      	cmp	r3, #1
   1e548:	d8f4      	bhi.n	1e534 <proxy_complete_pdu+0xdc>
   1e54a:	e7de      	b.n	1e50a <proxy_complete_pdu+0xb2>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1e54c:	2300      	movs	r3, #0
   1e54e:	e7cf      	b.n	1e4f0 <proxy_complete_pdu+0x98>
   1e550:	2301      	movs	r3, #1
   1e552:	e7cd      	b.n	1e4f0 <proxy_complete_pdu+0x98>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
   1e554:	f100 0118 	add.w	r1, r0, #24
   1e558:	6800      	ldr	r0, [r0, #0]
   1e55a:	f7f1 ff8f 	bl	1047c <bt_mesh_pb_gatt_recv>
		break;
   1e55e:	e78a      	b.n	1e476 <proxy_complete_pdu+0x1e>

0001e560 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
   1e560:	2300      	movs	r3, #0
   1e562:	f880 3020 	strb.w	r3, [r0, #32]
	sub->node_id_start = 0U;
   1e566:	6243      	str	r3, [r0, #36]	; 0x24
}
   1e568:	4770      	bx	lr

0001e56a <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
   1e56a:	f810 3c0e 	ldrb.w	r3, [r0, #-14]
   1e56e:	2b01      	cmp	r3, #1
{
   1e570:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
   1e572:	d102      	bne.n	1e57a <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
   1e574:	3818      	subs	r0, #24
   1e576:	f7ff beba 	b.w	1e2ee <filter_add>
	} else if (client->filter_type == BLACKLIST) {
   1e57a:	2b02      	cmp	r3, #2
   1e57c:	d111      	bne.n	1e5a2 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   1e57e:	b181      	cbz	r1, 1e5a2 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
   1e580:	f830 1c14 	ldrh.w	r1, [r0, #-20]
   1e584:	4291      	cmp	r1, r2
   1e586:	d00d      	beq.n	1e5a4 <bt_mesh_proxy_addr_add+0x3a>
   1e588:	f830 1c12 	ldrh.w	r1, [r0, #-18]
   1e58c:	4291      	cmp	r1, r2
   1e58e:	d00b      	beq.n	1e5a8 <bt_mesh_proxy_addr_add+0x3e>
   1e590:	f830 1c10 	ldrh.w	r1, [r0, #-16]
   1e594:	4291      	cmp	r1, r2
   1e596:	d104      	bne.n	1e5a2 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
   1e598:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   1e59c:	2300      	movs	r3, #0
   1e59e:	f820 3c14 	strh.w	r3, [r0, #-20]
}
   1e5a2:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
   1e5a4:	2300      	movs	r3, #0
   1e5a6:	e7f7      	b.n	1e598 <bt_mesh_proxy_addr_add+0x2e>
   1e5a8:	2301      	movs	r3, #1
   1e5aa:	e7f5      	b.n	1e598 <bt_mesh_proxy_addr_add+0x2e>

0001e5ac <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   1e5ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   1e5ae:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1e5b0:	1dc3      	adds	r3, r0, #7
   1e5b2:	f023 0303 	bic.w	r3, r3, #3
{
   1e5b6:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1e5b8:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1e5ba:	3a01      	subs	r2, #1
   1e5bc:	b294      	uxth	r4, r2
{
   1e5be:	4605      	mov	r5, r0
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1e5c0:	2204      	movs	r2, #4
   1e5c2:	2100      	movs	r1, #0
   1e5c4:	fb06 0004 	mla	r0, r6, r4, r0
   1e5c8:	f7fb fd98 	bl	1a0fc <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1e5cc:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1e5d0:	3c01      	subs	r4, #1
   1e5d2:	b2a4      	uxth	r4, r4
   1e5d4:	42bc      	cmp	r4, r7
   1e5d6:	d101      	bne.n	1e5dc <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   1e5d8:	b003      	add	sp, #12
   1e5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   1e5dc:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   1e5e0:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   1e5e2:	2204      	movs	r2, #4
   1e5e4:	1b80      	subs	r0, r0, r6
   1e5e6:	eb0d 0102 	add.w	r1, sp, r2
   1e5ea:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
   1e5ec:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   1e5ee:	f7fb fd5b 	bl	1a0a8 <memcpy>
   1e5f2:	e7ed      	b.n	1e5d0 <mem_init+0x24>

0001e5f4 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1e5f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   1e5f6:	6804      	ldr	r4, [r0, #0]
{
   1e5f8:	4606      	mov	r6, r0
	if (*mem_head) {
   1e5fa:	b18c      	cbz	r4, 1e620 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1e5fc:	1de3      	adds	r3, r4, #7
   1e5fe:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1e602:	2204      	movs	r2, #4
   1e604:	4621      	mov	r1, r4
   1e606:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1e60a:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1e60c:	f7fb fd4c 	bl	1a0a8 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1e610:	9b01      	ldr	r3, [sp, #4]
   1e612:	b123      	cbz	r3, 1e61e <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   1e614:	1dda      	adds	r2, r3, #7
   1e616:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1e61a:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   1e61c:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   1e61e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   1e620:	4620      	mov	r0, r4
   1e622:	b002      	add	sp, #8
   1e624:	bd70      	pop	{r4, r5, r6, pc}

0001e626 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   1e626:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1e628:	680c      	ldr	r4, [r1, #0]
{
   1e62a:	4606      	mov	r6, r0
   1e62c:	460d      	mov	r5, r1
	if (*mem_head) {
   1e62e:	b11c      	cbz	r4, 1e638 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   1e630:	1de3      	adds	r3, r4, #7
   1e632:	f023 0303 	bic.w	r3, r3, #3
   1e636:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   1e638:	2204      	movs	r2, #4
   1e63a:	4629      	mov	r1, r5
   1e63c:	4630      	mov	r0, r6
   1e63e:	f7fb fd33 	bl	1a0a8 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   1e642:	1df2      	adds	r2, r6, #7
   1e644:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   1e648:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   1e64a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   1e64c:	602e      	str	r6, [r5, #0]
}
   1e64e:	bd70      	pop	{r4, r5, r6, pc}

0001e650 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   1e650:	fb02 0001 	mla	r0, r2, r1, r0
   1e654:	4770      	bx	lr

0001e656 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   1e656:	1a40      	subs	r0, r0, r1
   1e658:	b280      	uxth	r0, r0
}
   1e65a:	fbb0 f0f2 	udiv	r0, r0, r2
   1e65e:	4770      	bx	lr

0001e660 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
   1e660:	b510      	push	{r4, lr}
	src += len;
   1e662:	4411      	add	r1, r2
	while (len--) {
   1e664:	3801      	subs	r0, #1
   1e666:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e66a:	3a01      	subs	r2, #1
   1e66c:	b292      	uxth	r2, r2
   1e66e:	429a      	cmp	r2, r3
   1e670:	d100      	bne.n	1e674 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   1e672:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   1e674:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1e678:	f800 4f01 	strb.w	r4, [r0, #1]!
   1e67c:	e7f5      	b.n	1e66a <mem_rcopy+0xa>

0001e67e <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1e67e:	6010      	str	r0, [r2, #0]
   1e680:	6008      	str	r0, [r1, #0]

	return link;
}
   1e682:	4770      	bx	lr

0001e684 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   1e684:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1e686:	6814      	ldr	r4, [r2, #0]
   1e688:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1e68a:	6814      	ldr	r4, [r2, #0]
   1e68c:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   1e68e:	6010      	str	r0, [r2, #0]

	return link;
}
   1e690:	bd10      	pop	{r4, pc}

0001e692 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1e692:	4288      	cmp	r0, r1
   1e694:	d003      	beq.n	1e69e <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1e696:	b11a      	cbz	r2, 1e6a0 <memq_peek+0xe>
		*mem = head->mem;
   1e698:	6843      	ldr	r3, [r0, #4]
   1e69a:	6013      	str	r3, [r2, #0]
   1e69c:	4770      	bx	lr
		return NULL;
   1e69e:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1e6a0:	4770      	bx	lr

0001e6a2 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1e6a2:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1e6a4:	4283      	cmp	r3, r0
   1e6a6:	d009      	beq.n	1e6bc <memq_dequeue+0x1a>
	if (mem) {
   1e6a8:	b122      	cbz	r2, 1e6b4 <memq_dequeue+0x12>
		*mem = head->mem;
   1e6aa:	6858      	ldr	r0, [r3, #4]
   1e6ac:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1e6ae:	681a      	ldr	r2, [r3, #0]
   1e6b0:	600a      	str	r2, [r1, #0]

	return old_head;
   1e6b2:	e001      	b.n	1e6b8 <memq_dequeue+0x16>
	if (old_head == NULL) {
   1e6b4:	2b00      	cmp	r3, #0
   1e6b6:	d1fa      	bne.n	1e6ae <memq_dequeue+0xc>
}
   1e6b8:	4618      	mov	r0, r3
   1e6ba:	4770      	bx	lr
		return NULL; /* queue is empty */
   1e6bc:	2300      	movs	r3, #0
   1e6be:	e7fb      	b.n	1e6b8 <memq_dequeue+0x16>

0001e6c0 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   1e6c0:	b510      	push	{r4, lr}
   1e6c2:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0U;
   1e6c4:	2000      	movs	r0, #0

	while (octets_len--) {
   1e6c6:	3901      	subs	r1, #1
   1e6c8:	b2c9      	uxtb	r1, r1
   1e6ca:	29ff      	cmp	r1, #255	; 0xff
   1e6cc:	d100      	bne.n	1e6d0 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   1e6ce:	bd10      	pop	{r4, pc}
		bite = *octets;
   1e6d0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   1e6d4:	2b00      	cmp	r3, #0
   1e6d6:	d0f6      	beq.n	1e6c6 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   1e6d8:	b25b      	sxtb	r3, r3
   1e6da:	1e5c      	subs	r4, r3, #1
   1e6dc:	4023      	ands	r3, r4
			one_count++;
   1e6de:	3001      	adds	r0, #1
			bite &= (bite - 1);
   1e6e0:	b2db      	uxtb	r3, r3
			one_count++;
   1e6e2:	b2c0      	uxtb	r0, r0
   1e6e4:	e7f6      	b.n	1e6d4 <util_ones_count_get+0x14>

0001e6e6 <ticker_dequeue>:
{
   1e6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	previous = instance->ticker_id_head;
   1e6e8:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->node[0];
   1e6ea:	6804      	ldr	r4, [r0, #0]
{
   1e6ec:	4606      	mov	r6, r0
	previous = instance->ticker_id_head;
   1e6ee:	4613      	mov	r3, r2
	total = 0U;
   1e6f0:	2000      	movs	r0, #0
	while (current != TICKER_NULL) {
   1e6f2:	2aff      	cmp	r2, #255	; 0xff
   1e6f4:	d101      	bne.n	1e6fa <ticker_dequeue+0x14>
		return 0;
   1e6f6:	2000      	movs	r0, #0
}
   1e6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
   1e6fa:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   1e6fe:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
		if (current == id) {
   1e702:	428a      	cmp	r2, r1
   1e704:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1e708:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   1e70c:	4460      	add	r0, ip
   1e70e:	d002      	beq.n	1e716 <ticker_dequeue+0x30>
   1e710:	4613      	mov	r3, r2
   1e712:	462a      	mov	r2, r5
   1e714:	e7ed      	b.n	1e6f2 <ticker_dequeue+0xc>
	if (previous == current) {
   1e716:	4293      	cmp	r3, r2
   1e718:	d100      	bne.n	1e71c <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
   1e71a:	7775      	strb	r5, [r6, #29]
	node[previous].next = ticker_current->next;
   1e71c:	b21b      	sxth	r3, r3
   1e71e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1e722:	f804 5033 	strb.w	r5, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
   1e726:	783b      	ldrb	r3, [r7, #0]
   1e728:	2bff      	cmp	r3, #255	; 0xff
   1e72a:	d0e5      	beq.n	1e6f8 <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
   1e72c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1e730:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1e734:	68a3      	ldr	r3, [r4, #8]
   1e736:	4463      	add	r3, ip
   1e738:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
   1e73a:	e7dd      	b.n	1e6f8 <ticker_dequeue+0x12>

0001e73c <ticks_to_expire_prep>:
{
   1e73c:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1e73e:	1a55      	subs	r5, r2, r1
   1e740:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   1e744:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1e746:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1e748:	d109      	bne.n	1e75e <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1e74a:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1e74e:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   1e750:	42a2      	cmp	r2, r4
   1e752:	d90e      	bls.n	1e772 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   1e754:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   1e756:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1e758:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1e75a:	6144      	str	r4, [r0, #20]
}
   1e75c:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1e75e:	1a8a      	subs	r2, r1, r2
   1e760:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1e764:	4293      	cmp	r3, r2
   1e766:	d901      	bls.n	1e76c <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   1e768:	1a9a      	subs	r2, r3, r2
   1e76a:	e7f1      	b.n	1e750 <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   1e76c:	4422      	add	r2, r4
   1e76e:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   1e770:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   1e772:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   1e774:	2200      	movs	r2, #0
   1e776:	e7ef      	b.n	1e758 <ticks_to_expire_prep+0x1c>

0001e778 <ticker_job_op_cb>:
{
   1e778:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1e77a:	2200      	movs	r2, #0
   1e77c:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   1e77e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
   1e780:	6259      	str	r1, [r3, #36]	; 0x24
{
   1e782:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   1e784:	b10a      	cbz	r2, 1e78a <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1e786:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1e788:	4710      	bx	r2
}
   1e78a:	4770      	bx	lr

0001e78c <ticker_worker>:
{
   1e78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
   1e790:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1U;
   1e792:	2301      	movs	r3, #1
{
   1e794:	4604      	mov	r4, r0
	instance->worker_trigger = 1U;
   1e796:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1e798:	b91d      	cbnz	r5, 1e7a2 <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
   1e79a:	7f43      	ldrb	r3, [r0, #29]
   1e79c:	2bff      	cmp	r3, #255	; 0xff
   1e79e:	d102      	bne.n	1e7a6 <ticker_worker+0x1a>
		instance->worker_trigger = 0U;
   1e7a0:	77c5      	strb	r5, [r0, #31]
}
   1e7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1e7a6:	f7f6 fbb9 	bl	14f1c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1e7aa:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
   1e7ac:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
   1e7ae:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1e7b2:	1bc7      	subs	r7, r0, r7
   1e7b4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
   1e7b8:	2eff      	cmp	r6, #255	; 0xff
   1e7ba:	d006      	beq.n	1e7ca <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
   1e7bc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1e7c0:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
   1e7c4:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1e7c6:	429f      	cmp	r7, r3
   1e7c8:	d218      	bcs.n	1e7fc <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1e7ca:	7ae2      	ldrb	r2, [r4, #11]
   1e7cc:	7aa3      	ldrb	r3, [r4, #10]
   1e7ce:	4293      	cmp	r3, r2
   1e7d0:	d105      	bne.n	1e7de <ticker_worker+0x52>
		last = instance->ticks_elapsed_last + 1;
   1e7d2:	3301      	adds	r3, #1
   1e7d4:	b2db      	uxtb	r3, r3
			last = 0U;
   1e7d6:	2b02      	cmp	r3, #2
   1e7d8:	bf08      	it	eq
   1e7da:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
   1e7dc:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1e7de:	7ae3      	ldrb	r3, [r4, #11]
   1e7e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1e7e4:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1e7e6:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1e7e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0U;
   1e7ea:	2300      	movs	r3, #0
   1e7ec:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1e7ee:	46ac      	mov	ip, r5
   1e7f0:	4623      	mov	r3, r4
   1e7f2:	2104      	movs	r1, #4
   1e7f4:	2003      	movs	r0, #3
}
   1e7f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1e7fa:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
   1e7fc:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   1e7fe:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   1e800:	788a      	ldrb	r2, [r1, #2]
   1e802:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
   1e804:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   1e808:	1a9b      	subs	r3, r3, r2
   1e80a:	b2db      	uxtb	r3, r3
   1e80c:	2b01      	cmp	r3, #1
   1e80e:	d1d3      	bne.n	1e7b8 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
   1e810:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
   1e814:	3a01      	subs	r2, #1
   1e816:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   1e818:	f1b9 0f00 	cmp.w	r9, #0
   1e81c:	d0cc      	beq.n	1e7b8 <ticker_worker+0x2c>
					   ticks_expired -
   1e81e:	6948      	ldr	r0, [r1, #20]
   1e820:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   1e822:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
   1e824:	1a28      	subs	r0, r5, r0
   1e826:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
   1e828:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1e82c:	690b      	ldr	r3, [r1, #16]
   1e82e:	6a49      	ldr	r1, [r1, #36]	; 0x24
   1e830:	47c8      	blx	r9
   1e832:	e7c1      	b.n	1e7b8 <ticker_worker+0x2c>

0001e834 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1e834:	f7f6 bb72 	b.w	14f1c <cntr_cnt_get>

0001e838 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1e838:	1a40      	subs	r0, r0, r1
}
   1e83a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1e83e:	4770      	bx	lr

0001e840 <ll_tx_pwr_get>:
void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than default when dynamic
	 *       updates is implemented.
	 */
	*min = RADIO_TXP_DEFAULT;
   1e840:	2300      	movs	r3, #0
   1e842:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   1e844:	700b      	strb	r3, [r1, #0]
}
   1e846:	4770      	bx	lr

0001e848 <sys_put_le32>:
	dst[1] = val >> 8;
   1e848:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1e84c:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1e84e:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   1e850:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1e852:	0a00      	lsrs	r0, r0, #8
   1e854:	704b      	strb	r3, [r1, #1]
   1e856:	70c8      	strb	r0, [r1, #3]
}
   1e858:	4770      	bx	lr

0001e85a <evt_create>:
{
   1e85a:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1e85c:	3008      	adds	r0, #8
{
   1e85e:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1e860:	2102      	movs	r1, #2
{
   1e862:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   1e864:	f000 fc4a 	bl	1f0fc <net_buf_simple_add>
	hdr->evt = evt;
   1e868:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   1e86a:	7044      	strb	r4, [r0, #1]
}
   1e86c:	bd38      	pop	{r3, r4, r5, pc}

0001e86e <meta_evt>:
{
   1e86e:	b570      	push	{r4, r5, r6, lr}
   1e870:	4604      	mov	r4, r0
   1e872:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1e874:	3201      	adds	r2, #1
{
   1e876:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   1e878:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1e87a:	b2d2      	uxtb	r2, r2
   1e87c:	213e      	movs	r1, #62	; 0x3e
   1e87e:	f7ff ffec 	bl	1e85a <evt_create>
	me = net_buf_add(buf, sizeof(*me));
   1e882:	2101      	movs	r1, #1
   1e884:	4620      	mov	r0, r4
   1e886:	f000 fc39 	bl	1f0fc <net_buf_simple_add>
	me->subevent = subevt;
   1e88a:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
   1e88c:	4629      	mov	r1, r5
   1e88e:	4620      	mov	r0, r4
}
   1e890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   1e894:	f000 bc32 	b.w	1f0fc <net_buf_simple_add>

0001e898 <sys_get_le64>:
{
   1e898:	4603      	mov	r3, r0
}
   1e89a:	6800      	ldr	r0, [r0, #0]
   1e89c:	6859      	ldr	r1, [r3, #4]
   1e89e:	4770      	bx	lr

0001e8a0 <hci_acl_encode>:
	switch (pdu_data->ll_id) {
   1e8a0:	7a03      	ldrb	r3, [r0, #8]
   1e8a2:	f003 0303 	and.w	r3, r3, #3
   1e8a6:	3b01      	subs	r3, #1
   1e8a8:	2b01      	cmp	r3, #1
{
   1e8aa:	b570      	push	{r4, r5, r6, lr}
   1e8ac:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
   1e8ae:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
   1e8b0:	d81b      	bhi.n	1e8ea <hci_acl_encode+0x4a>
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   1e8b2:	f101 0608 	add.w	r6, r1, #8
   1e8b6:	4630      	mov	r0, r6
   1e8b8:	2104      	movs	r1, #4
   1e8ba:	f000 fc1f 	bl	1f0fc <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1e8be:	7a23      	ldrb	r3, [r4, #8]
   1e8c0:	f003 0303 	and.w	r3, r3, #3
   1e8c4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1e8c6:	bf0c      	ite	eq
   1e8c8:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1e8cc:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   1e8d0:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   1e8d2:	7a61      	ldrb	r1, [r4, #9]
   1e8d4:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   1e8d6:	4630      	mov	r0, r6
   1e8d8:	f000 fc10 	bl	1f0fc <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1e8dc:	7a62      	ldrb	r2, [r4, #9]
   1e8de:	f104 010b 	add.w	r1, r4, #11
}
   1e8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1e8e6:	f7fb bbdf 	b.w	1a0a8 <memcpy>
		LL_ASSERT(0);
   1e8ea:	4040      	eors	r0, r0
   1e8ec:	f380 8811 	msr	BASEPRI, r0
   1e8f0:	f04f 0004 	mov.w	r0, #4
   1e8f4:	df02      	svc	2

0001e8f6 <hci_num_cmplt_encode>:
{
   1e8f6:	b570      	push	{r4, r5, r6, lr}
   1e8f8:	4606      	mov	r6, r0
   1e8fa:	460d      	mov	r5, r1
   1e8fc:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   1e8fe:	2113      	movs	r1, #19
   1e900:	2205      	movs	r2, #5
   1e902:	f7ff ffaa 	bl	1e85a <evt_create>
	ep = net_buf_add(buf, len);
   1e906:	2105      	movs	r1, #5
   1e908:	f106 0008 	add.w	r0, r6, #8
   1e90c:	f000 fbf6 	bl	1f0fc <net_buf_simple_add>
	ep->num_handles = num_handles;
   1e910:	2301      	movs	r3, #1
   1e912:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   1e914:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1e918:	f8a0 4003 	strh.w	r4, [r0, #3]
}
   1e91c:	bd70      	pop	{r4, r5, r6, pc}

0001e91e <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1e91e:	7903      	ldrb	r3, [r0, #4]
   1e920:	2b02      	cmp	r3, #2
   1e922:	d00f      	beq.n	1e944 <hci_get_class+0x26>
		switch (node_rx->hdr.type) {
   1e924:	3b04      	subs	r3, #4
   1e926:	2b06      	cmp	r3, #6
   1e928:	d809      	bhi.n	1e93e <hci_get_class+0x20>
   1e92a:	e8df f003 	tbb	[pc, r3]
   1e92e:	0813      	.short	0x0813
   1e930:	06040808 	.word	0x06040808
   1e934:	06          	.byte	0x06
   1e935:	00          	.byte	0x00
			return HCI_CLASS_EVT_REQUIRED;
   1e936:	2000      	movs	r0, #0
   1e938:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
   1e93a:	2002      	movs	r0, #2
   1e93c:	4770      	bx	lr
			return -1;
   1e93e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e942:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1e944:	7a03      	ldrb	r3, [r0, #8]
   1e946:	f003 0303 	and.w	r3, r3, #3
   1e94a:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   1e94c:	bf0c      	ite	eq
   1e94e:	2002      	moveq	r0, #2
   1e950:	2003      	movne	r0, #3
   1e952:	4770      	bx	lr
			return HCI_CLASS_EVT_DISCARDABLE;
   1e954:	2001      	movs	r0, #1
}
   1e956:	4770      	bx	lr

0001e958 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
   1e958:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e95a:	460c      	mov	r4, r1
   1e95c:	1846      	adds	r6, r0, r1
   1e95e:	1b35      	subs	r5, r6, r4
	u8_t *buf8 = buf;

	while (len) {
   1e960:	b18c      	cbz	r4, 1e986 <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
   1e962:	f7e8 fda9 	bl	74b8 <sys_rand32_get>

		if (len >= sizeof(v)) {
   1e966:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
   1e968:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
   1e96a:	d907      	bls.n	1e97c <bt_rand+0x24>
			memcpy(buf8, &v, sizeof(v));
   1e96c:	2204      	movs	r2, #4
   1e96e:	eb0d 0102 	add.w	r1, sp, r2
   1e972:	4628      	mov	r0, r5
   1e974:	f7fb fb98 	bl	1a0a8 <memcpy>

			buf8 += sizeof(v);
			len -= sizeof(v);
   1e978:	3c04      	subs	r4, #4
   1e97a:	e7f0      	b.n	1e95e <bt_rand+0x6>
		} else {
			memcpy(buf8, &v, len);
   1e97c:	4622      	mov	r2, r4
   1e97e:	a901      	add	r1, sp, #4
   1e980:	4628      	mov	r0, r5
   1e982:	f7fb fb91 	bl	1a0a8 <memcpy>
			break;
		}
	}

	return 0;
}
   1e986:	2000      	movs	r0, #0
   1e988:	b002      	add	sp, #8
   1e98a:	bd70      	pop	{r4, r5, r6, pc}

0001e98c <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   1e98c:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   1e98e:	f000 fa9a 	bl	1eec6 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1e992:	2000      	movs	r0, #0
   1e994:	bd08      	pop	{r3, pc}

0001e996 <cpu_sleep>:
 * SPDX-License-Identifier: Apache-2.0
 */

static inline void cpu_sleep(void)
{
	__WFE();
   1e996:	bf20      	wfe
	__SEV();
   1e998:	bf40      	sev
	__WFE();
   1e99a:	bf20      	wfe
}
   1e99c:	4770      	bx	lr

0001e99e <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   1e99e:	6008      	str	r0, [r1, #0]
}
   1e9a0:	4770      	bx	lr

0001e9a2 <prepare_reduced>:
	if (status == 0) {
   1e9a2:	b918      	cbnz	r0, 1e9ac <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= XON_BITMASK;
   1e9a4:	680b      	ldr	r3, [r1, #0]
   1e9a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e9aa:	600b      	str	r3, [r1, #0]
}
   1e9ac:	4770      	bx	lr

0001e9ae <prepare_normal>:
	if (status == 0) {
   1e9ae:	b918      	cbnz	r0, 1e9b8 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
   1e9b0:	680b      	ldr	r3, [r1, #0]
   1e9b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1e9b6:	600b      	str	r3, [r1, #0]
}
   1e9b8:	4770      	bx	lr

0001e9ba <isr_adv_ci_adva_check>:
{
   1e9ba:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   1e9bc:	7804      	ldrb	r4, [r0, #0]
   1e9be:	780a      	ldrb	r2, [r1, #0]
   1e9c0:	f3c4 1380 	ubfx	r3, r4, #6, #1
   1e9c4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1e9c8:	d119      	bne.n	1e9fe <isr_adv_ci_adva_check+0x44>
   1e9ca:	f004 040f 	and.w	r4, r4, #15
   1e9ce:	2c01      	cmp	r4, #1
   1e9d0:	f100 0502 	add.w	r5, r0, #2
   1e9d4:	f101 0608 	add.w	r6, r1, #8
   1e9d8:	d008      	beq.n	1e9ec <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1e9da:	2206      	movs	r2, #6
   1e9dc:	4631      	mov	r1, r6
   1e9de:	4628      	mov	r0, r5
   1e9e0:	f7fb fb52 	bl	1a088 <memcmp>
			 BDADDR_SIZE)) ||
   1e9e4:	fab0 f080 	clz	r0, r0
   1e9e8:	0940      	lsrs	r0, r0, #5
}
   1e9ea:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1e9ec:	2206      	movs	r2, #6
   1e9ee:	4631      	mov	r1, r6
   1e9f0:	4628      	mov	r0, r5
   1e9f2:	f7fb fb49 	bl	1a088 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1e9f6:	2800      	cmp	r0, #0
   1e9f8:	d1ef      	bne.n	1e9da <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   1e9fa:	4620      	mov	r0, r4
   1e9fc:	e7f5      	b.n	1e9ea <isr_adv_ci_adva_check+0x30>
   1e9fe:	2000      	movs	r0, #0
   1ea00:	e7f3      	b.n	1e9ea <isr_adv_ci_adva_check+0x30>

0001ea02 <chan_set.part.26>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1ea02:	4040      	eors	r0, r0
   1ea04:	f380 8811 	msr	BASEPRI, r0
   1ea08:	f04f 0004 	mov.w	r0, #4
   1ea0c:	df02      	svc	2

0001ea0e <ticker_success_assert>:
{
   1ea0e:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1ea10:	b108      	cbz	r0, 1ea16 <ticker_success_assert+0x8>
   1ea12:	f7ff fff6 	bl	1ea02 <chan_set.part.26>
}
   1ea16:	bd08      	pop	{r3, pc}

0001ea18 <ticker_op_latency_cancelled>:
{
   1ea18:	b508      	push	{r3, lr}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1ea1a:	b108      	cbz	r0, 1ea20 <ticker_op_latency_cancelled+0x8>
   1ea1c:	f7ff fff1 	bl	1ea02 <chan_set.part.26>
	conn->slave.latency_cancel = 0U;
   1ea20:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1ea24:	f360 0341 	bfi	r3, r0, #1, #1
   1ea28:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
}
   1ea2c:	bd08      	pop	{r3, pc}

0001ea2e <mayfly_radio_inactive>:
	mayfly_radio_active(0);
   1ea2e:	2000      	movs	r0, #0
   1ea30:	f7f4 bd84 	b.w	1353c <mayfly_radio_active>

0001ea34 <rx_packet_set>:
{
   1ea34:	b538      	push	{r3, r4, r5, lr}
   1ea36:	4605      	mov	r5, r0
   1ea38:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
   1ea3a:	2100      	movs	r1, #0
   1ea3c:	4608      	mov	r0, r1
   1ea3e:	f7f6 fb6b 	bl	15118 <radio_phy_set>
	if (conn->enc_rx) {
   1ea42:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1ea46:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1ea48:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
   1ea4c:	d50d      	bpl.n	1ea6a <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1ea4e:	211f      	movs	r1, #31
   1ea50:	2008      	movs	r0, #8
   1ea52:	f7f6 fba7 	bl	151a4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   1ea56:	4622      	mov	r2, r4
   1ea58:	2100      	movs	r1, #0
   1ea5a:	f105 00d1 	add.w	r0, r5, #209	; 0xd1
   1ea5e:	f7f6 fdaf 	bl	155c0 <radio_ccm_rx_pkt_set>
}
   1ea62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
   1ea66:	f7f6 bbc9 	b.w	151fc <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1ea6a:	2008      	movs	r0, #8
   1ea6c:	211b      	movs	r1, #27
   1ea6e:	f7f6 fb99 	bl	151a4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   1ea72:	4620      	mov	r0, r4
   1ea74:	e7f5      	b.n	1ea62 <rx_packet_set+0x2e>

0001ea76 <chan_set>:
	switch (chan) {
   1ea76:	2826      	cmp	r0, #38	; 0x26
{
   1ea78:	b510      	push	{r4, lr}
   1ea7a:	4604      	mov	r4, r0
	switch (chan) {
   1ea7c:	d00b      	beq.n	1ea96 <chan_set+0x20>
   1ea7e:	2827      	cmp	r0, #39	; 0x27
   1ea80:	d00b      	beq.n	1ea9a <chan_set+0x24>
   1ea82:	2825      	cmp	r0, #37	; 0x25
   1ea84:	d10b      	bne.n	1ea9e <chan_set+0x28>
		radio_freq_chan_set(2);
   1ea86:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
   1ea88:	f7f6 fb5c 	bl	15144 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1ea8c:	4620      	mov	r0, r4
}
   1ea8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1ea92:	f7f6 bb5d 	b.w	15150 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1ea96:	201a      	movs	r0, #26
   1ea98:	e7f6      	b.n	1ea88 <chan_set+0x12>
		radio_freq_chan_set(80);
   1ea9a:	2050      	movs	r0, #80	; 0x50
   1ea9c:	e7f4      	b.n	1ea88 <chan_set+0x12>
		if (chan < 11) {
   1ea9e:	280a      	cmp	r0, #10
   1eaa0:	d802      	bhi.n	1eaa8 <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
   1eaa2:	3002      	adds	r0, #2
   1eaa4:	0040      	lsls	r0, r0, #1
   1eaa6:	e7ef      	b.n	1ea88 <chan_set+0x12>
		} else if (chan < 40) {
   1eaa8:	2827      	cmp	r0, #39	; 0x27
   1eaaa:	d801      	bhi.n	1eab0 <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   1eaac:	3003      	adds	r0, #3
   1eaae:	e7f9      	b.n	1eaa4 <chan_set+0x2e>
   1eab0:	f7ff ffa7 	bl	1ea02 <chan_set.part.26>

0001eab4 <mayfly_adv_stop>:
{
   1eab4:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
   1eab6:	2001      	movs	r0, #1
   1eab8:	f7f4 faea 	bl	13090 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
   1eabc:	4604      	mov	r4, r0
   1eabe:	b908      	cbnz	r0, 1eac4 <mayfly_adv_stop+0x10>
   1eac0:	f7ff ff9f 	bl	1ea02 <chan_set.part.26>
	node_rx->hdr.handle = 0xffff;
   1eac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1eac8:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1eaca:	2308      	movs	r3, #8
   1eacc:	7103      	strb	r3, [r0, #4]
	(void)memset(radio_le_conn_cmplt, 0x00,
   1eace:	2212      	movs	r2, #18
   1ead0:	4418      	add	r0, r3
   1ead2:	2100      	movs	r1, #0
   1ead4:	f7fb fb12 	bl	1a0fc <memset>
	radio_le_conn_cmplt->status = BT_HCI_ERR_ADV_TIMEOUT;
   1ead8:	233c      	movs	r3, #60	; 0x3c
   1eada:	7223      	strb	r3, [r4, #8]
}
   1eadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
   1eae0:	f7f4 beac 	b.w	1383c <packet_rx_enqueue>

0001eae4 <isr_rx_scan_report.isra.37>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
   1eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eae8:	4680      	mov	r8, r0
	node_rx = packet_rx_reserve_get(3);
   1eaea:	2003      	movs	r0, #3
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
   1eaec:	460f      	mov	r7, r1
	node_rx = packet_rx_reserve_get(3);
   1eaee:	f7f4 facf 	bl	13090 <packet_rx_reserve_get>
	if (node_rx == 0) {
   1eaf2:	b1c8      	cbz	r0, 1eb28 <isr_rx_scan_report.isra.37+0x44>
				      pdu_adv_rx->len];
   1eaf4:	7a44      	ldrb	r4, [r0, #9]
	node_rx->hdr.handle = 0xffff;
   1eaf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1eafa:	80c3      	strh	r3, [r0, #6]
	pdu_adv_rx = (void *)node_rx->pdu_data;
   1eafc:	f100 0508 	add.w	r5, r0, #8
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1eb00:	2304      	movs	r3, #4
	extra = &((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   1eb02:	3402      	adds	r4, #2
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1eb04:	7103      	strb	r3, [r0, #4]
	extra = &((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   1eb06:	192e      	adds	r6, r5, r4
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   1eb08:	f1b8 0f00 	cmp.w	r8, #0
   1eb0c:	d00a      	beq.n	1eb24 <isr_rx_scan_report.isra.37+0x40>
   1eb0e:	f7f6 fc15 	bl	1533c <radio_rssi_get>
   1eb12:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1eb16:	5528      	strb	r0, [r5, r4]
	*extra = dir_report ? 1 : 0;
   1eb18:	7077      	strb	r7, [r6, #1]
	packet_rx_enqueue();
   1eb1a:	f7f4 fe8f 	bl	1383c <packet_rx_enqueue>
	return 0;
   1eb1e:	2000      	movs	r0, #0
}
   1eb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*extra = (rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   1eb24:	207f      	movs	r0, #127	; 0x7f
   1eb26:	e7f6      	b.n	1eb16 <isr_rx_scan_report.isra.37+0x32>
		return 1;
   1eb28:	2001      	movs	r0, #1
   1eb2a:	e7f9      	b.n	1eb20 <isr_rx_scan_report.isra.37+0x3c>

0001eb2c <ctrl_tx_enqueue>:
{
   1eb2c:	b510      	push	{r4, lr}
	    !conn->empty &&
   1eb2e:	f890 40d0 	ldrb.w	r4, [r0, #208]	; 0xd0
   1eb32:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
	if (
   1eb36:	f014 0f80 	tst.w	r4, #128	; 0x80
   1eb3a:	d118      	bne.n	1eb6e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   1eb3c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
	    !conn->empty &&
   1eb40:	b1ab      	cbz	r3, 1eb6e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   1eb42:	0724      	lsls	r4, r4, #28
   1eb44:	d413      	bmi.n	1eb6e <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   1eb46:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
   1eb4a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   1eb4c:	bf04      	itt	eq
   1eb4e:	681c      	ldreq	r4, [r3, #0]
   1eb50:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
		if (!conn->pkt_tx_ctrl) {
   1eb54:	b992      	cbnz	r2, 1eb7c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
   1eb56:	681a      	ldr	r2, [r3, #0]
   1eb58:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
   1eb5a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   1eb5c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	conn->pkt_tx_ctrl_last = node_tx;
   1eb60:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
	if (node_tx->next == 0) {
   1eb64:	680b      	ldr	r3, [r1, #0]
   1eb66:	b90b      	cbnz	r3, 1eb6c <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
   1eb68:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
}
   1eb6c:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
   1eb6e:	b92a      	cbnz	r2, 1eb7c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
   1eb70:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1eb74:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   1eb76:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   1eb7a:	e7ef      	b.n	1eb5c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   1eb7c:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   1eb80:	681a      	ldr	r2, [r3, #0]
   1eb82:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   1eb84:	6019      	str	r1, [r3, #0]
   1eb86:	e7eb      	b.n	1eb60 <ctrl_tx_enqueue+0x34>

0001eb88 <ctrl_tx_sec_enqueue>:
{
   1eb88:	b410      	push	{r4}
	if (conn->pause_tx) {
   1eb8a:	f890 40d0 	ldrb.w	r4, [r0, #208]	; 0xd0
   1eb8e:	0724      	lsls	r4, r4, #28
{
   1eb90:	460a      	mov	r2, r1
	if (conn->pause_tx) {
   1eb92:	d50f      	bpl.n	1ebb4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
   1eb94:	f8d0 1118 	ldr.w	r1, [r0, #280]	; 0x118
   1eb98:	b931      	cbnz	r1, 1eba8 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
   1eb9a:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   1eb9e:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
   1eba0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
}
   1eba4:	bc10      	pop	{r4}
   1eba6:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   1eba8:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   1ebac:	6819      	ldr	r1, [r3, #0]
   1ebae:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   1ebb0:	601a      	str	r2, [r3, #0]
   1ebb2:	e7f7      	b.n	1eba4 <ctrl_tx_sec_enqueue+0x1c>
}
   1ebb4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
   1ebb6:	f7ff bfb9 	b.w	1eb2c <ctrl_tx_enqueue>

0001ebba <ll_radio_state_abort>:
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   1ebba:	2005      	movs	r0, #5
   1ebbc:	f7f4 bf62 	b.w	13a84 <event_stop.constprop.48>

0001ebc0 <ll_conn_update>:
{
   1ebc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ebc4:	460c      	mov	r4, r1
   1ebc6:	4691      	mov	r9, r2
   1ebc8:	469a      	mov	sl, r3
   1ebca:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   1ebce:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
   1ebd2:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	conn = connection_get(handle);
   1ebd6:	f7f4 fb3f 	bl	13258 <connection_get>
	if (!conn) {
   1ebda:	2800      	cmp	r0, #0
   1ebdc:	d061      	beq.n	1eca2 <ll_conn_update+0xe2>
	if (!cmd) {
   1ebde:	bb84      	cbnz	r4, 1ec42 <ll_conn_update+0x82>
		if (!conn->llcp_conn_param.disabled &&
   1ebe0:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   1ebe4:	06d9      	lsls	r1, r3, #27
   1ebe6:	d407      	bmi.n	1ebf8 <ll_conn_update+0x38>
		    (!conn->common.fex_valid ||
   1ebe8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		if (!conn->llcp_conn_param.disabled &&
   1ebec:	069a      	lsls	r2, r3, #26
   1ebee:	d527      	bpl.n	1ec40 <ll_conn_update+0x80>
		     (conn->llcp_features &
   1ebf0:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
		    (!conn->common.fex_valid ||
   1ebf4:	079b      	lsls	r3, r3, #30
   1ebf6:	d423      	bmi.n	1ec40 <ll_conn_update+0x80>
		} else if (conn->role) {
   1ebf8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1ebfc:	2b00      	cmp	r3, #0
   1ebfe:	db52      	blt.n	1eca6 <ll_conn_update+0xe6>
		if (conn->llcp_req != conn->llcp_ack) {
   1ec00:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
   1ec04:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1ec08:	429a      	cmp	r2, r3
   1ec0a:	d14e      	bne.n	1ecaa <ll_conn_update+0xea>
		conn->llcp.conn_upd.win_offset_us = 0U;
   1ec0c:	2300      	movs	r3, #0
   1ec0e:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1ec10:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
		conn->llcp.conn_upd.interval = interval_max;
   1ec14:	f8a0 8062 	strh.w	r8, [r0, #98]	; 0x62
		conn->llcp.conn_upd.win_size = 1U;
   1ec18:	2101      	movs	r1, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1ec1a:	f023 0307 	bic.w	r3, r3, #7
   1ec1e:	430b      	orrs	r3, r1
		conn->llcp_req++;
   1ec20:	440a      	add	r2, r1
		conn->llcp.conn_upd.win_size = 1U;
   1ec22:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
		conn->llcp.conn_upd.latency = latency;
   1ec26:	f8a0 7064 	strh.w	r7, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = timeout;
   1ec2a:	f8a0 6066 	strh.w	r6, [r0, #102]	; 0x66
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1ec2e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
		conn->llcp_type = LLCP_CONN_UPD;
   1ec32:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
		conn->llcp_req++;
   1ec36:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
   1ec3a:	4620      	mov	r0, r4
   1ec3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cmd++;
   1ec40:	2401      	movs	r4, #1
		cmd--;
   1ec42:	3c01      	subs	r4, #1
		if (cmd) {
   1ec44:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1ec48:	f890 50a8 	ldrb.w	r5, [r0, #168]	; 0xa8
   1ec4c:	f890 c0a9 	ldrb.w	ip, [r0, #169]	; 0xa9
   1ec50:	d011      	beq.n	1ec76 <ll_conn_update+0xb6>
			if ((conn->llcp_conn_param.req ==
   1ec52:	4565      	cmp	r5, ip
   1ec54:	d029      	beq.n	1ecaa <ll_conn_update+0xea>
			    (conn->llcp_conn_param.state !=
   1ec56:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
			     conn->llcp_conn_param.ack) ||
   1ec5a:	f003 0207 	and.w	r2, r3, #7
   1ec5e:	2a03      	cmp	r2, #3
   1ec60:	d123      	bne.n	1ecaa <ll_conn_update+0xea>
			conn->llcp_conn_param.state = cmd;
   1ec62:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   1ec66:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   1ec6a:	f880 90ab 	strb.w	r9, [r0, #171]	; 0xab
			conn->llcp_conn_param.cmd = 1U;
   1ec6e:	f880 30aa 	strb.w	r3, [r0, #170]	; 0xaa
	return 0;
   1ec72:	2400      	movs	r4, #0
   1ec74:	e7e1      	b.n	1ec3a <ll_conn_update+0x7a>
			if (conn->llcp_conn_param.req !=
   1ec76:	4565      	cmp	r5, ip
   1ec78:	d117      	bne.n	1ecaa <ll_conn_update+0xea>
			conn->llcp_conn_param.state = cmd;
   1ec7a:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
			conn->llcp_conn_param.interval_min = interval_min;
   1ec7e:	f8a0 a0ac 	strh.w	sl, [r0, #172]	; 0xac
			conn->llcp_conn_param.state = cmd;
   1ec82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1ec86:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   1ec8a:	3501      	adds	r5, #1
			conn->llcp_conn_param.interval_max = interval_max;
   1ec8c:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
			conn->llcp_conn_param.latency = latency;
   1ec90:	f8a0 70b0 	strh.w	r7, [r0, #176]	; 0xb0
			conn->llcp_conn_param.timeout = timeout;
   1ec94:	f8a0 60b2 	strh.w	r6, [r0, #178]	; 0xb2
			conn->llcp_conn_param.state = cmd;
   1ec98:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
			conn->llcp_conn_param.req++;
   1ec9c:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
   1eca0:	e7cb      	b.n	1ec3a <ll_conn_update+0x7a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1eca2:	2402      	movs	r4, #2
   1eca4:	e7c9      	b.n	1ec3a <ll_conn_update+0x7a>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1eca6:	241a      	movs	r4, #26
   1eca8:	e7c7      	b.n	1ec3a <ll_conn_update+0x7a>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1ecaa:	240c      	movs	r4, #12
   1ecac:	e7c5      	b.n	1ec3a <ll_conn_update+0x7a>

0001ecae <ll_chm_get>:
{
   1ecae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ecb0:	460d      	mov	r5, r1
	conn = connection_get(handle);
   1ecb2:	f7f4 fad1 	bl	13258 <connection_get>
	if (!conn) {
   1ecb6:	4604      	mov	r4, r0
   1ecb8:	b160      	cbz	r0, 1ecd4 <ll_chm_get+0x26>
		conn->chm_update = 0U;
   1ecba:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1ecbc:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0U;
   1ecc0:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1ecc2:	2205      	movs	r2, #5
   1ecc4:	4631      	mov	r1, r6
   1ecc6:	4628      	mov	r0, r5
   1ecc8:	f7fb f9ee 	bl	1a0a8 <memcpy>
	} while (conn->chm_update);
   1eccc:	7f20      	ldrb	r0, [r4, #28]
   1ecce:	2800      	cmp	r0, #0
   1ecd0:	d1f6      	bne.n	1ecc0 <ll_chm_get+0x12>
}
   1ecd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ecd4:	2002      	movs	r0, #2
   1ecd6:	e7fc      	b.n	1ecd2 <ll_chm_get+0x24>

0001ecd8 <ll_feature_req_send>:
{
   1ecd8:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1ecda:	f7f4 fabd 	bl	13258 <connection_get>
	if (!conn) {
   1ecde:	b168      	cbz	r0, 1ecfc <ll_feature_req_send+0x24>
	if (conn->llcp_req != conn->llcp_ack) {
   1ece0:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   1ece4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1ece8:	4293      	cmp	r3, r2
   1ecea:	d109      	bne.n	1ed00 <ll_feature_req_send+0x28>
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1ecec:	2203      	movs	r2, #3
	conn->llcp_req++;
   1ecee:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1ecf0:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
	conn->llcp_req++;
   1ecf4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	return 0;
   1ecf8:	2000      	movs	r0, #0
}
   1ecfa:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ecfc:	2002      	movs	r0, #2
   1ecfe:	e7fc      	b.n	1ecfa <ll_feature_req_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ed00:	200c      	movs	r0, #12
   1ed02:	e7fa      	b.n	1ecfa <ll_feature_req_send+0x22>

0001ed04 <ll_version_ind_send>:
{
   1ed04:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1ed06:	f7f4 faa7 	bl	13258 <connection_get>
	if (!conn) {
   1ed0a:	b168      	cbz	r0, 1ed28 <ll_version_ind_send+0x24>
	if (conn->llcp_req != conn->llcp_ack) {
   1ed0c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   1ed10:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1ed14:	4293      	cmp	r3, r2
   1ed16:	d109      	bne.n	1ed2c <ll_version_ind_send+0x28>
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1ed18:	2204      	movs	r2, #4
	conn->llcp_req++;
   1ed1a:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1ed1c:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
	conn->llcp_req++;
   1ed20:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	return 0;
   1ed24:	2000      	movs	r0, #0
}
   1ed26:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ed28:	2002      	movs	r0, #2
   1ed2a:	e7fc      	b.n	1ed26 <ll_version_ind_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ed2c:	200c      	movs	r0, #12
   1ed2e:	e7fa      	b.n	1ed26 <ll_version_ind_send+0x22>

0001ed30 <ll_terminate_ind_send>:
{
   1ed30:	b510      	push	{r4, lr}
   1ed32:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1ed34:	f7f4 fa90 	bl	13258 <connection_get>
	if (!conn) {
   1ed38:	b160      	cbz	r0, 1ed54 <ll_terminate_ind_send+0x24>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   1ed3a:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
   1ed3e:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
   1ed42:	4293      	cmp	r3, r2
   1ed44:	d108      	bne.n	1ed58 <ll_terminate_ind_send+0x28>
	conn->llcp_terminate.req++;
   1ed46:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   1ed48:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
	conn->llcp_terminate.req++;
   1ed4c:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
	return 0;
   1ed50:	2000      	movs	r0, #0
}
   1ed52:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ed54:	2002      	movs	r0, #2
   1ed56:	e7fc      	b.n	1ed52 <ll_terminate_ind_send+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ed58:	200c      	movs	r0, #12
   1ed5a:	e7fa      	b.n	1ed52 <ll_terminate_ind_send+0x22>

0001ed5c <ll_tx_pwr_lvl_get>:
{
   1ed5c:	b510      	push	{r4, lr}
   1ed5e:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1ed60:	f7f4 fa7a 	bl	13258 <connection_get>
	if (!conn) {
   1ed64:	b110      	cbz	r0, 1ed6c <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   1ed66:	2000      	movs	r0, #0
   1ed68:	7020      	strb	r0, [r4, #0]
}
   1ed6a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ed6c:	2002      	movs	r0, #2
   1ed6e:	e7fc      	b.n	1ed6a <ll_tx_pwr_lvl_get+0xe>

0001ed70 <ll_adv_scan_state_cb>:

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
   1ed70:	4770      	bx	lr

0001ed72 <swi5_nrf5_isr>:
	mayfly_run(MAYFLY_CALL_ID_1);
   1ed72:	2001      	movs	r0, #1
   1ed74:	f7f2 bc5c 	b.w	11630 <mayfly_run>

0001ed78 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1ed78:	4668      	mov	r0, sp
   1ed7a:	f020 0107 	bic.w	r1, r0, #7
   1ed7e:	468d      	mov	sp, r1
   1ed80:	b501      	push	{r0, lr}
   1ed82:	f7fb f8d6 	bl	19f32 <z_arch_isr_direct_header>
	isr_radio();
   1ed86:	f7f6 f97d 	bl	15084 <isr_radio>
	ISR_DIRECT_PM();
   1ed8a:	f7e9 fb17 	bl	83bc <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	z_sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		_IntExit();
   1ed8e:	f7e9 f90d 	bl	7fac <_IntExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1ed92:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ed96:	4685      	mov	sp, r0
   1ed98:	4770      	bx	lr

0001ed9a <radio_active_callback>:
}
   1ed9a:	4770      	bx	lr

0001ed9c <ll_timeslice_ticker_id_get>:

void ll_timeslice_ticker_id_get(u8_t * const instance_index, u8_t * const user_id)
{
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES); /* The last index in the total tickers */
   1ed9c:	2308      	movs	r3, #8
   1ed9e:	700b      	strb	r3, [r1, #0]
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
   1eda0:	2300      	movs	r3, #0
   1eda2:	7003      	strb	r3, [r0, #0]
}
   1eda4:	4770      	bx	lr

0001eda6 <ll_adv_data_set>:
{
   1eda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1edaa:	4688      	mov	r8, r1
   1edac:	4606      	mov	r6, r0
	radio_adv_data = radio_adv_data_get();
   1edae:	f7f5 fc0f 	bl	145d0 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1edb2:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   1edb6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1edba:	ebc4 02c2 	rsb	r2, r4, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
   1edbe:	4605      	mov	r5, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1edc0:	f810 c002 	ldrb.w	ip, [r0, r2]
   1edc4:	f00c 030f 	and.w	r3, ip, #15
   1edc8:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1edca:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1edce:	d032      	beq.n	1ee36 <ll_adv_data_set+0x90>
	if (radio_adv_data->first == radio_adv_data->last) {
   1edd0:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1edd4:	42a3      	cmp	r3, r4
   1edd6:	d104      	bne.n	1ede2 <ll_adv_data_set+0x3c>
		last = radio_adv_data->last + 1;
   1edd8:	3401      	adds	r4, #1
   1edda:	b2e4      	uxtb	r4, r4
			last = 0U;
   1eddc:	2c02      	cmp	r4, #2
   1edde:	bf08      	it	eq
   1ede0:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1ede2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ede6:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   1edea:	18ef      	adds	r7, r5, r3
	pdu->type = prev->type;
   1edec:	5ce8      	ldrb	r0, [r5, r3]
   1edee:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0U;
   1edf2:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
   1edf6:	54e8      	strb	r0, [r5, r3]
	pdu->tx_addr = prev->tx_addr;
   1edf8:	5ca8      	ldrb	r0, [r5, r2]
   1edfa:	f815 c003 	ldrb.w	ip, [r5, r3]
   1edfe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ee02:	f360 1c86 	bfi	ip, r0, #6, #1
   1ee06:	f805 c003 	strb.w	ip, [r5, r3]
	pdu->rx_addr = prev->rx_addr;
   1ee0a:	5caa      	ldrb	r2, [r5, r2]
   1ee0c:	fa5f f08c 	uxtb.w	r0, ip
   1ee10:	09d2      	lsrs	r2, r2, #7
   1ee12:	f362 10c7 	bfi	r0, r2, #7, #1
   1ee16:	54e8      	strb	r0, [r5, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1ee18:	2206      	movs	r2, #6
   1ee1a:	3102      	adds	r1, #2
   1ee1c:	1cb8      	adds	r0, r7, #2
   1ee1e:	f7fb f943 	bl	1a0a8 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1ee22:	4632      	mov	r2, r6
   1ee24:	4641      	mov	r1, r8
   1ee26:	f107 0008 	add.w	r0, r7, #8
	pdu->len = BDADDR_SIZE + len;
   1ee2a:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   1ee2c:	f7fb f93c 	bl	1a0a8 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1ee30:	707e      	strb	r6, [r7, #1]
	radio_adv_data->last = last;
   1ee32:	f885 404f 	strb.w	r4, [r5, #79]	; 0x4f
}
   1ee36:	2000      	movs	r0, #0
   1ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ee3c <ll_adv_scan_rsp_set>:
{
   1ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee40:	4606      	mov	r6, r0
   1ee42:	460f      	mov	r7, r1
	radio_scan_data = radio_scan_data_get();
   1ee44:	f7f5 fbc8 	bl	145d8 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   1ee48:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1ee4c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1ee50:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   1ee52:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1ee54:	d133      	bne.n	1eebe <ll_adv_scan_rsp_set+0x82>
		last = radio_scan_data->last + 1;
   1ee56:	1c5d      	adds	r5, r3, #1
   1ee58:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1ee5a:	2d02      	cmp	r5, #2
			last = 0;
   1ee5c:	bf08      	it	eq
   1ee5e:	2500      	moveq	r5, #0
	prev = (struct pdu_adv *)
   1ee60:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1ee64:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1ee68:	b22b      	sxth	r3, r5
   1ee6a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1ee6e:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	prev = (struct pdu_adv *)
   1ee72:	18a1      	adds	r1, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1ee74:	5ce0      	ldrb	r0, [r4, r3]
   1ee76:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   1ee7a:	f040 0004 	orr.w	r0, r0, #4
   1ee7e:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   1ee80:	5ca0      	ldrb	r0, [r4, r2]
   1ee82:	5ce2      	ldrb	r2, [r4, r3]
   1ee84:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ee88:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1ee8c:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
   1ee90:	f36f 12c7 	bfc	r2, #7, #1
   1ee94:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
   1ee96:	1db3      	adds	r3, r6, #6
   1ee98:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1ee9c:	2206      	movs	r2, #6
   1ee9e:	3102      	adds	r1, #2
   1eea0:	f108 0002 	add.w	r0, r8, #2
   1eea4:	f7fb f900 	bl	1a0a8 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1eea8:	4632      	mov	r2, r6
   1eeaa:	4639      	mov	r1, r7
   1eeac:	f108 0008 	add.w	r0, r8, #8
   1eeb0:	f7fb f8fa 	bl	1a0a8 <memcpy>
	radio_scan_data->last = last;
   1eeb4:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
   1eeb8:	2000      	movs	r0, #0
   1eeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eebe:	461d      	mov	r5, r3
   1eec0:	e7ce      	b.n	1ee60 <ll_adv_scan_rsp_set+0x24>

0001eec2 <ll_wl_size_get>:
}
   1eec2:	2008      	movs	r0, #8
   1eec4:	4770      	bx	lr

0001eec6 <ecb_encrypt_be>:

void ecb_encrypt_be(u8_t const *const key_be, u8_t const *const clear_text_be,
		    u8_t * const cipher_text_be)
{
   1eec6:	b530      	push	{r4, r5, lr}
   1eec8:	b08d      	sub	sp, #52	; 0x34
   1eeca:	460d      	mov	r5, r1
   1eecc:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   1eece:	4601      	mov	r1, r0
   1eed0:	2210      	movs	r2, #16
   1eed2:	4668      	mov	r0, sp
   1eed4:	f7fb f8e8 	bl	1a0a8 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   1eed8:	2210      	movs	r2, #16
   1eeda:	4629      	mov	r1, r5
   1eedc:	eb0d 0002 	add.w	r0, sp, r2
   1eee0:	f7fb f8e2 	bl	1a0a8 <memcpy>

	do_ecb(&ecb);
   1eee4:	4668      	mov	r0, sp
   1eee6:	f7f6 f827 	bl	14f38 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   1eeea:	2210      	movs	r2, #16
   1eeec:	a908      	add	r1, sp, #32
   1eeee:	4620      	mov	r0, r4
   1eef0:	f7fb f8da 	bl	1a0a8 <memcpy>
}
   1eef4:	b00d      	add	sp, #52	; 0x34
   1eef6:	bd30      	pop	{r4, r5, pc}

0001eef8 <ecb_encrypt>:

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   1eef8:	b570      	push	{r4, r5, r6, lr}
   1eefa:	b08c      	sub	sp, #48	; 0x30
   1eefc:	460e      	mov	r6, r1
   1eefe:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ef00:	4601      	mov	r1, r0
   1ef02:	2210      	movs	r2, #16
   1ef04:	4668      	mov	r0, sp
{
   1ef06:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ef08:	f7ff fbaa 	bl	1e660 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1ef0c:	2210      	movs	r2, #16
   1ef0e:	eb0d 0002 	add.w	r0, sp, r2
   1ef12:	4631      	mov	r1, r6
   1ef14:	f7ff fba4 	bl	1e660 <mem_rcopy>

	do_ecb(&ecb);
   1ef18:	4668      	mov	r0, sp
   1ef1a:	f7f6 f80d 	bl	14f38 <do_ecb>

	if (cipher_text_le) {
   1ef1e:	b125      	cbz	r5, 1ef2a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1ef20:	2210      	movs	r2, #16
   1ef22:	a908      	add	r1, sp, #32
   1ef24:	4628      	mov	r0, r5
   1ef26:	f7ff fb9b 	bl	1e660 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1ef2a:	b124      	cbz	r4, 1ef36 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1ef2c:	2210      	movs	r2, #16
   1ef2e:	a908      	add	r1, sp, #32
   1ef30:	4620      	mov	r0, r4
   1ef32:	f7fb f8b9 	bl	1a0a8 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1ef36:	b00c      	add	sp, #48	; 0x30
   1ef38:	bd70      	pop	{r4, r5, r6, pc}

0001ef3a <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1ef3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ef3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1ef42:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1ef44:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1ef48:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1ef4c:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1ef50:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1ef54:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1ef58:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1ef5c:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1ef60:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1ef64:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1ef68:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1ef6c:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1ef70:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1ef74:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1ef78:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1ef7c:	4770      	bx	lr

0001ef7e <radio_tx_chain_delay_get>:
}
   1ef7e:	2001      	movs	r0, #1
   1ef80:	4770      	bx	lr

0001ef82 <radio_rx_ready_delay_get>:
}
   1ef82:	2029      	movs	r0, #41	; 0x29
   1ef84:	4770      	bx	lr

0001ef86 <radio_rx_chain_delay_get>:
	switch (phy) {
   1ef86:	2802      	cmp	r0, #2
}
   1ef88:	bf14      	ite	ne
   1ef8a:	200a      	movne	r0, #10
   1ef8c:	2006      	moveq	r0, #6
   1ef8e:	4770      	bx	lr

0001ef90 <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1ef90:	2901      	cmp	r1, #1
   1ef92:	d005      	beq.n	1efa0 <mayfly_enable_cb+0x10>
   1ef94:	4040      	eors	r0, r0
   1ef96:	f380 8811 	msr	BASEPRI, r0
   1ef9a:	f04f 0004 	mov.w	r0, #4
   1ef9e:	df02      	svc	2
		irq_enable(SWI5_IRQn);
   1efa0:	2019      	movs	r0, #25
	if (enable) {
   1efa2:	b10a      	cbz	r2, 1efa8 <mayfly_enable_cb+0x18>
		irq_enable(SWI5_IRQn);
   1efa4:	f7e9 b9c0 	b.w	8328 <z_arch_irq_enable>
		irq_disable(SWI5_IRQn);
   1efa8:	f7e9 b9ce 	b.w	8348 <z_arch_irq_disable>

0001efac <mayfly_is_enabled>:
	switch (callee_id) {
   1efac:	b139      	cbz	r1, 1efbe <mayfly_is_enabled+0x12>
   1efae:	2901      	cmp	r1, #1
   1efb0:	d008      	beq.n	1efc4 <mayfly_is_enabled+0x18>
		LL_ASSERT(0);
   1efb2:	4040      	eors	r0, r0
   1efb4:	f380 8811 	msr	BASEPRI, r0
   1efb8:	f04f 0004 	mov.w	r0, #4
   1efbc:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1efbe:	200b      	movs	r0, #11
		return irq_is_enabled(SWI5_IRQn);
   1efc0:	f7e9 b9d6 	b.w	8370 <z_arch_irq_is_enabled>
   1efc4:	2019      	movs	r0, #25
   1efc6:	e7fb      	b.n	1efc0 <mayfly_is_enabled+0x14>

0001efc8 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1efc8:	4288      	cmp	r0, r1
   1efca:	d00a      	beq.n	1efe2 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   1efcc:	b918      	cbnz	r0, 1efd6 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1efce:	1e4b      	subs	r3, r1, #1
   1efd0:	4258      	negs	r0, r3
   1efd2:	4158      	adcs	r0, r3
   1efd4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1efd6:	2801      	cmp	r0, #1
   1efd8:	d105      	bne.n	1efe6 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1efda:	fab1 f081 	clz	r0, r1
   1efde:	0940      	lsrs	r0, r0, #5
   1efe0:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1efe2:	2001      	movs	r0, #1
   1efe4:	4770      	bx	lr
   1efe6:	2000      	movs	r0, #0
}
   1efe8:	4770      	bx	lr

0001efea <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   1efea:	4601      	mov	r1, r0
   1efec:	2000      	movs	r0, #0
   1efee:	f7f5 bf9b 	b.w	14f28 <cntr_cmp_set>

0001eff2 <fixed_data_unref>:
}
   1eff2:	4770      	bx	lr

0001eff4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1eff4:	6983      	ldr	r3, [r0, #24]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1eff6:	685b      	ldr	r3, [r3, #4]
   1eff8:	460a      	mov	r2, r1
   1effa:	6819      	ldr	r1, [r3, #0]
   1effc:	f7f6 bc12 	b.w	15824 <net_buf_alloc_len>

0001f000 <net_buf_get>:
{
   1f000:	b570      	push	{r4, r5, r6, lr}
   1f002:	4606      	mov	r6, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
   1f004:	f000 fba3 	bl	1f74e <z_impl_k_queue_get>
	if (!buf) {
   1f008:	4605      	mov	r5, r0
   1f00a:	b128      	cbz	r0, 1f018 <net_buf_get+0x18>
   1f00c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f00e:	7963      	ldrb	r3, [r4, #5]
   1f010:	f013 0301 	ands.w	r3, r3, #1
   1f014:	d102      	bne.n	1f01c <net_buf_get+0x1c>
	frag->frags = NULL;
   1f016:	6023      	str	r3, [r4, #0]
}
   1f018:	4628      	mov	r0, r5
   1f01a:	bd70      	pop	{r4, r5, r6, pc}
   1f01c:	2100      	movs	r1, #0
   1f01e:	4630      	mov	r0, r6
   1f020:	f000 fb95 	bl	1f74e <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1f024:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1f026:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1f028:	f023 0301 	bic.w	r3, r3, #1
   1f02c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f02e:	4604      	mov	r4, r0
   1f030:	e7ed      	b.n	1f00e <net_buf_get+0xe>

0001f032 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1f032:	6883      	ldr	r3, [r0, #8]
   1f034:	4419      	add	r1, r3
   1f036:	6001      	str	r1, [r0, #0]
}
   1f038:	4770      	bx	lr

0001f03a <net_buf_slist_put>:
{
   1f03a:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1f03c:	460b      	mov	r3, r1
   1f03e:	681c      	ldr	r4, [r3, #0]
   1f040:	b974      	cbnz	r4, 1f060 <net_buf_slist_put+0x26>
	__asm__ volatile(
   1f042:	f04f 0220 	mov.w	r2, #32
   1f046:	f3ef 8411 	mrs	r4, BASEPRI
   1f04a:	f382 8811 	msr	BASEPRI, r2
Z_GENLIST_APPEND_LIST(slist, snode)
   1f04e:	6842      	ldr	r2, [r0, #4]
   1f050:	b962      	cbnz	r2, 1f06c <net_buf_slist_put+0x32>
	list->head = node;
   1f052:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1f054:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1f056:	f384 8811 	msr	BASEPRI, r4
   1f05a:	f3bf 8f6f 	isb	sy
}
   1f05e:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   1f060:	795a      	ldrb	r2, [r3, #5]
   1f062:	f042 0201 	orr.w	r2, r2, #1
   1f066:	715a      	strb	r2, [r3, #5]
   1f068:	4623      	mov	r3, r4
   1f06a:	e7e8      	b.n	1f03e <net_buf_slist_put+0x4>
	parent->next = child;
   1f06c:	6011      	str	r1, [r2, #0]
   1f06e:	e7f1      	b.n	1f054 <net_buf_slist_put+0x1a>

0001f070 <net_buf_slist_get>:
{
   1f070:	b570      	push	{r4, r5, r6, lr}
   1f072:	4603      	mov	r3, r0
	__asm__ volatile(
   1f074:	f04f 0220 	mov.w	r2, #32
   1f078:	f3ef 8111 	mrs	r1, BASEPRI
   1f07c:	f382 8811 	msr	BASEPRI, r2
Z_GENLIST_IS_EMPTY(slist)
   1f080:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1f082:	b128      	cbz	r0, 1f090 <net_buf_slist_get+0x20>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f084:	685c      	ldr	r4, [r3, #4]
   1f086:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1f088:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f08a:	42a0      	cmp	r0, r4
	list->tail = node;
   1f08c:	bf08      	it	eq
   1f08e:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   1f090:	f381 8811 	msr	BASEPRI, r1
   1f094:	f3bf 8f6f 	isb	sy
	if (!buf) {
   1f098:	b128      	cbz	r0, 1f0a6 <net_buf_slist_get+0x36>
   1f09a:	4602      	mov	r2, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f09c:	7951      	ldrb	r1, [r2, #5]
   1f09e:	f011 0101 	ands.w	r1, r1, #1
   1f0a2:	d101      	bne.n	1f0a8 <net_buf_slist_get+0x38>
	frag->frags = NULL;
   1f0a4:	6011      	str	r1, [r2, #0]
}
   1f0a6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1f0a8:	f04f 0120 	mov.w	r1, #32
   1f0ac:	f3ef 8511 	mrs	r5, BASEPRI
   1f0b0:	f381 8811 	msr	BASEPRI, r1
Z_GENLIST_IS_EMPTY(slist)
   1f0b4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   1f0b6:	b129      	cbz	r1, 1f0c4 <net_buf_slist_get+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f0b8:	685e      	ldr	r6, [r3, #4]
   1f0ba:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   1f0bc:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f0be:	42b1      	cmp	r1, r6
	list->tail = node;
   1f0c0:	bf08      	it	eq
   1f0c2:	605c      	streq	r4, [r3, #4]
		frag->frags = (void *)sys_slist_get(list);
   1f0c4:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1f0c6:	f385 8811 	msr	BASEPRI, r5
   1f0ca:	f3bf 8f6f 	isb	sy
		frag->flags &= ~NET_BUF_FRAGS;
   1f0ce:	7951      	ldrb	r1, [r2, #5]
   1f0d0:	f021 0101 	bic.w	r1, r1, #1
   1f0d4:	7151      	strb	r1, [r2, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1f0d6:	6812      	ldr	r2, [r2, #0]
   1f0d8:	e7e0      	b.n	1f09c <net_buf_slist_get+0x2c>

0001f0da <net_buf_put>:
{
   1f0da:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1f0dc:	460a      	mov	r2, r1
   1f0de:	6814      	ldr	r4, [r2, #0]
   1f0e0:	b914      	cbnz	r4, 1f0e8 <net_buf_put+0xe>
}
   1f0e2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1f0e4:	f000 bb16 	b.w	1f714 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1f0e8:	7953      	ldrb	r3, [r2, #5]
   1f0ea:	f043 0301 	orr.w	r3, r3, #1
   1f0ee:	7153      	strb	r3, [r2, #5]
   1f0f0:	4622      	mov	r2, r4
   1f0f2:	e7f4      	b.n	1f0de <net_buf_put+0x4>

0001f0f4 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1f0f4:	7903      	ldrb	r3, [r0, #4]
   1f0f6:	3301      	adds	r3, #1
   1f0f8:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1f0fa:	4770      	bx	lr

0001f0fc <net_buf_simple_add>:
	return buf->data + buf->len;
   1f0fc:	8883      	ldrh	r3, [r0, #4]
   1f0fe:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1f100:	4419      	add	r1, r3
   1f102:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1f104:	18d0      	adds	r0, r2, r3
   1f106:	4770      	bx	lr

0001f108 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1f108:	b430      	push	{r4, r5}
   1f10a:	8883      	ldrh	r3, [r0, #4]
   1f10c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1f10e:	189d      	adds	r5, r3, r2
   1f110:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f112:	18e0      	adds	r0, r4, r3
}
   1f114:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f116:	f7fa bfc7 	b.w	1a0a8 <memcpy>

0001f11a <net_buf_simple_add_u8>:
   1f11a:	8883      	ldrh	r3, [r0, #4]
   1f11c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1f11e:	b510      	push	{r4, lr}
	buf->len += len;
   1f120:	1c5c      	adds	r4, r3, #1
   1f122:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1f124:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1f126:	18d0      	adds	r0, r2, r3
   1f128:	bd10      	pop	{r4, pc}

0001f12a <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1f12a:	b513      	push	{r0, r1, r4, lr}
   1f12c:	8883      	ldrh	r3, [r0, #4]
   1f12e:	6804      	ldr	r4, [r0, #0]
   1f130:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->len += len;
   1f134:	1c9a      	adds	r2, r3, #2
   1f136:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1f138:	f10d 0106 	add.w	r1, sp, #6
   1f13c:	2202      	movs	r2, #2
   1f13e:	18e0      	adds	r0, r4, r3
   1f140:	f7fa ffb2 	bl	1a0a8 <memcpy>
}
   1f144:	b002      	add	sp, #8
   1f146:	bd10      	pop	{r4, pc}

0001f148 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1f148:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1f14a:	020b      	lsls	r3, r1, #8
   1f14c:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
   1f150:	8883      	ldrh	r3, [r0, #4]
   1f152:	6804      	ldr	r4, [r0, #0]
   1f154:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->len += len;
   1f158:	1c9a      	adds	r2, r3, #2
   1f15a:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1f15c:	f10d 0106 	add.w	r1, sp, #6
   1f160:	2202      	movs	r2, #2
   1f162:	18e0      	adds	r0, r4, r3
   1f164:	f7fa ffa0 	bl	1a0a8 <memcpy>
}
   1f168:	b002      	add	sp, #8
   1f16a:	bd10      	pop	{r4, pc}

0001f16c <net_buf_simple_add_le32>:

void net_buf_simple_add_le32(struct net_buf_simple *buf, u32_t val)
{
   1f16c:	b513      	push	{r0, r1, r4, lr}
   1f16e:	8883      	ldrh	r3, [r0, #4]
   1f170:	6804      	ldr	r4, [r0, #0]
   1f172:	9101      	str	r1, [sp, #4]
	buf->len += len;
   1f174:	1d1a      	adds	r2, r3, #4
   1f176:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le32(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1f178:	2204      	movs	r2, #4
   1f17a:	eb0d 0102 	add.w	r1, sp, r2
   1f17e:	18e0      	adds	r0, r4, r3
   1f180:	f7fa ff92 	bl	1a0a8 <memcpy>
}
   1f184:	b002      	add	sp, #8
   1f186:	bd10      	pop	{r4, pc}

0001f188 <net_buf_simple_add_be32>:

void net_buf_simple_add_be32(struct net_buf_simple *buf, u32_t val)
{
   1f188:	b513      	push	{r0, r1, r4, lr}
   1f18a:	8883      	ldrh	r3, [r0, #4]
   1f18c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1f18e:	1d1a      	adds	r2, r3, #4
   1f190:	8082      	strh	r2, [r0, #4]
   1f192:	ba09      	rev	r1, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be32(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1f194:	2204      	movs	r2, #4
	val = sys_cpu_to_be32(val);
   1f196:	9101      	str	r1, [sp, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1f198:	18e0      	adds	r0, r4, r3
   1f19a:	eb0d 0102 	add.w	r1, sp, r2
   1f19e:	f7fa ff83 	bl	1a0a8 <memcpy>
}
   1f1a2:	b002      	add	sp, #8
   1f1a4:	bd10      	pop	{r4, pc}

0001f1a6 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1f1a6:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1f1a8:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1f1aa:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   1f1ac:	4411      	add	r1, r2
	buf->data -= len;
   1f1ae:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1f1b0:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1f1b2:	4618      	mov	r0, r3
   1f1b4:	4770      	bx	lr

0001f1b6 <net_buf_simple_push_be16>:
	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_push_be16(struct net_buf_simple *buf, u16_t val)
{
   1f1b6:	b507      	push	{r0, r1, r2, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1f1b8:	020b      	lsls	r3, r1, #8
	buf->len += len;
   1f1ba:	8882      	ldrh	r2, [r0, #4]
	val = sys_cpu_to_be16(val);
   1f1bc:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
	buf->data -= len;
   1f1c0:	6803      	ldr	r3, [r0, #0]
	val = sys_cpu_to_be16(val);
   1f1c2:	f8ad 1006 	strh.w	r1, [sp, #6]
	buf->data -= len;
   1f1c6:	3b02      	subs	r3, #2
	buf->len += len;
   1f1c8:	3202      	adds	r2, #2
	buf->data -= len;
   1f1ca:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1f1cc:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1f1ce:	f10d 0106 	add.w	r1, sp, #6
   1f1d2:	2202      	movs	r2, #2
   1f1d4:	4618      	mov	r0, r3
   1f1d6:	f7fa ff67 	bl	1a0a8 <memcpy>
}
   1f1da:	b003      	add	sp, #12
   1f1dc:	f85d fb04 	ldr.w	pc, [sp], #4

0001f1e0 <net_buf_simple_push_u8>:
	buf->data -= len;
   1f1e0:	6802      	ldr	r2, [r0, #0]
   1f1e2:	1e53      	subs	r3, r2, #1
   1f1e4:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1f1e6:	8883      	ldrh	r3, [r0, #4]
   1f1e8:	3301      	adds	r3, #1
   1f1ea:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, u8_t val)
{
	u8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   1f1ec:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   1f1f0:	4770      	bx	lr

0001f1f2 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1f1f2:	8883      	ldrh	r3, [r0, #4]
   1f1f4:	1a5b      	subs	r3, r3, r1
   1f1f6:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1f1f8:	6803      	ldr	r3, [r0, #0]
   1f1fa:	4419      	add	r1, r3
   1f1fc:	6001      	str	r1, [r0, #0]
}
   1f1fe:	4608      	mov	r0, r1
   1f200:	4770      	bx	lr

0001f202 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1f202:	4603      	mov	r3, r0
	void *data = buf->data;
   1f204:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1f206:	889a      	ldrh	r2, [r3, #4]
   1f208:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1f20a:	4401      	add	r1, r0
	buf->len -= len;
   1f20c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1f20e:	6019      	str	r1, [r3, #0]

	return data;
}
   1f210:	4770      	bx	lr

0001f212 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1f212:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   1f214:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1f216:	2101      	movs	r1, #1
	val = buf->data[0];
   1f218:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1f21a:	f7ff ffea 	bl	1f1f2 <net_buf_simple_pull>

	return val;
}
   1f21e:	4610      	mov	r0, r2
   1f220:	bd08      	pop	{r3, pc}

0001f222 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1f222:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1f224:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f226:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1f228:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f22a:	f7ff ffe2 	bl	1f1f2 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1f22e:	4610      	mov	r0, r2
   1f230:	bd08      	pop	{r3, pc}

0001f232 <net_buf_simple_pull_be16>:

u16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
   1f232:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1f234:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f236:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1f238:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f23a:	f7ff ffda 	bl	1f1f2 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
   1f23e:	0210      	lsls	r0, r2, #8
   1f240:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
}
   1f244:	b280      	uxth	r0, r0
   1f246:	bd08      	pop	{r3, pc}

0001f248 <net_buf_simple_pull_le32>:

u32_t net_buf_simple_pull_le32(struct net_buf_simple *buf)
{
   1f248:	b508      	push	{r3, lr}
	u32_t val;

	val = UNALIGNED_GET((u32_t *)buf->data);
   1f24a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f24c:	2104      	movs	r1, #4
	val = UNALIGNED_GET((u32_t *)buf->data);
   1f24e:	681a      	ldr	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f250:	f7ff ffcf 	bl	1f1f2 <net_buf_simple_pull>

	return sys_le32_to_cpu(val);
}
   1f254:	4610      	mov	r0, r2
   1f256:	bd08      	pop	{r3, pc}

0001f258 <net_buf_simple_pull_be32>:

u32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   1f258:	b508      	push	{r3, lr}
   1f25a:	6803      	ldr	r3, [r0, #0]
   1f25c:	681a      	ldr	r2, [r3, #0]
	u32_t val;

	val = UNALIGNED_GET((u32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   1f25e:	2104      	movs	r1, #4
   1f260:	ba12      	rev	r2, r2
   1f262:	f7ff ffc6 	bl	1f1f2 <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   1f266:	4610      	mov	r0, r2
   1f268:	bd08      	pop	{r3, pc}

0001f26a <net_buf_simple_headroom>:

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1f26a:	6802      	ldr	r2, [r0, #0]
   1f26c:	6880      	ldr	r0, [r0, #8]
}
   1f26e:	1a10      	subs	r0, r2, r0
   1f270:	4770      	bx	lr

0001f272 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1f272:	8883      	ldrh	r3, [r0, #4]
   1f274:	88c2      	ldrh	r2, [r0, #6]
   1f276:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1f278:	6803      	ldr	r3, [r0, #0]
   1f27a:	6880      	ldr	r0, [r0, #8]
   1f27c:	1a18      	subs	r0, r3, r0
}
   1f27e:	1a10      	subs	r0, r2, r0
   1f280:	4770      	bx	lr

0001f282 <nrf_gpio_cfg_sense_set>:
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   1f282:	0080      	lsls	r0, r0, #2
   1f284:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
   1f288:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1f28c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1f290:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1f294:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1f298:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1f29c:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   1f2a0:	4770      	bx	lr

0001f2a2 <gpio_nrfx_write>:
{
   1f2a2:	b510      	push	{r4, lr}
	return port->config->config_info;
   1f2a4:	6804      	ldr	r4, [r0, #0]
   1f2a6:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f2a8:	68a4      	ldr	r4, [r4, #8]
   1f2aa:	69c0      	ldr	r0, [r0, #28]
   1f2ac:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1f2ae:	2901      	cmp	r1, #1
   1f2b0:	d104      	bne.n	1f2bc <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   1f2b2:	4058      	eors	r0, r3
    p_reg->OUT = value;
   1f2b4:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
   1f2b8:	2000      	movs	r0, #0
   1f2ba:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1f2bc:	3300      	adds	r3, #0
   1f2be:	fa20 f002 	lsr.w	r0, r0, r2
   1f2c2:	f04f 0101 	mov.w	r1, #1
   1f2c6:	bf18      	it	ne
   1f2c8:	2301      	movne	r3, #1
   1f2ca:	f000 0001 	and.w	r0, r0, #1
   1f2ce:	4091      	lsls	r1, r2
   1f2d0:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   1f2d2:	bf14      	ite	ne
   1f2d4:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1f2d8:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
   1f2dc:	e7ec      	b.n	1f2b8 <gpio_nrfx_write+0x16>

0001f2de <gpio_nrfx_read>:
{
   1f2de:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   1f2e0:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1f2e2:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f2e4:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1f2e6:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f2e8:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
   1f2ea:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
   1f2ee:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
   1f2f2:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   1f2f6:	4060      	eors	r0, r4
   1f2f8:	406c      	eors	r4, r5
   1f2fa:	4034      	ands	r4, r6
   1f2fc:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1f2fe:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
   1f300:	bf1c      	itt	ne
   1f302:	40d0      	lsrne	r0, r2
   1f304:	f000 0001 	andne.w	r0, r0, #1
   1f308:	6018      	str	r0, [r3, #0]
}
   1f30a:	2000      	movs	r0, #0
   1f30c:	bd70      	pop	{r4, r5, r6, pc}

0001f30e <gpio_nrfx_manage_callback>:
	return _gpio_manage_callback(&get_port_data(port)->callbacks,
   1f30e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
   1f310:	6818      	ldr	r0, [r3, #0]
{
   1f312:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1f314:	b158      	cbz	r0, 1f32e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f316:	2400      	movs	r4, #0
   1f318:	4281      	cmp	r1, r0
   1f31a:	d113      	bne.n	1f344 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1f31c:	6808      	ldr	r0, [r1, #0]
   1f31e:	b95c      	cbnz	r4, 1f338 <gpio_nrfx_manage_callback+0x2a>
   1f320:	685c      	ldr	r4, [r3, #4]
	list->head = node;
   1f322:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f324:	42a1      	cmp	r1, r4
   1f326:	d100      	bne.n	1f32a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1f328:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1f32a:	2000      	movs	r0, #0
   1f32c:	6008      	str	r0, [r1, #0]
	if (set) {
   1f32e:	b972      	cbnz	r2, 1f34e <gpio_nrfx_manage_callback+0x40>
	return 0;
   1f330:	2000      	movs	r0, #0
}
   1f332:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f334:	4628      	mov	r0, r5
   1f336:	e7ef      	b.n	1f318 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   1f338:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f33a:	6858      	ldr	r0, [r3, #4]
   1f33c:	4281      	cmp	r1, r0
	list->tail = node;
   1f33e:	bf08      	it	eq
   1f340:	605c      	streq	r4, [r3, #4]
   1f342:	e7f2      	b.n	1f32a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f344:	6805      	ldr	r5, [r0, #0]
	return node->next;
   1f346:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f348:	2d00      	cmp	r5, #0
   1f34a:	d1f3      	bne.n	1f334 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1f34c:	b13a      	cbz	r2, 1f35e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1f34e:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1f350:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f352:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   1f354:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f356:	2800      	cmp	r0, #0
   1f358:	d1ea      	bne.n	1f330 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1f35a:	6059      	str	r1, [r3, #4]
   1f35c:	e7e9      	b.n	1f332 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1f35e:	f06f 0015 	mvn.w	r0, #21
	return _gpio_manage_callback(&get_port_data(port)->callbacks,
   1f362:	e7e6      	b.n	1f332 <gpio_nrfx_manage_callback+0x24>

0001f364 <gpio_nrfx_config>:
{
   1f364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f368:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   1f36a:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1f36c:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   1f370:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   1f374:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1f376:	d041      	beq.n	1f3fc <gpio_nrfx_config+0x98>
   1f378:	dc09      	bgt.n	1f38e <gpio_nrfx_config+0x2a>
   1f37a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1f37e:	d03f      	beq.n	1f400 <gpio_nrfx_config+0x9c>
   1f380:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   1f384:	d03e      	beq.n	1f404 <gpio_nrfx_config+0xa0>
   1f386:	b190      	cbz	r0, 1f3ae <gpio_nrfx_config+0x4a>
		return -EINVAL;
   1f388:	f06f 0015 	mvn.w	r0, #21
   1f38c:	e033      	b.n	1f3f6 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1f38e:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   1f392:	d039      	beq.n	1f408 <gpio_nrfx_config+0xa4>
   1f394:	dc04      	bgt.n	1f3a0 <gpio_nrfx_config+0x3c>
   1f396:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   1f39a:	d1f5      	bne.n	1f388 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   1f39c:	2003      	movs	r0, #3
   1f39e:	e006      	b.n	1f3ae <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   1f3a0:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   1f3a4:	d032      	beq.n	1f40c <gpio_nrfx_config+0xa8>
   1f3a6:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   1f3aa:	d1ed      	bne.n	1f388 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   1f3ac:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   1f3ae:	f406 7740 	and.w	r7, r6, #768	; 0x300
   1f3b2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1f3b6:	d02b      	beq.n	1f410 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
   1f3b8:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   1f3bc:	4263      	negs	r3, r4
   1f3be:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   1f3c0:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   1f3c4:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1f3c8:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1f3ca:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
   1f3ce:	bf18      	it	ne
   1f3d0:	b2d4      	uxtbne	r4, r2
   1f3d2:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   1f3d6:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
   1f3da:	bf12      	itee	ne
   1f3dc:	46a1      	movne	r9, r4
		to_pin   = 31U;
   1f3de:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   1f3e2:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f3e4:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
   1f3e8:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1f3ec:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1f3f0:	45a1      	cmp	r9, r4
   1f3f2:	d20f      	bcs.n	1f414 <gpio_nrfx_config+0xb0>
	return 0;
   1f3f4:	2000      	movs	r0, #0
}
   1f3f6:	b003      	add	sp, #12
   1f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   1f3fc:	2002      	movs	r0, #2
   1f3fe:	e7d6      	b.n	1f3ae <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   1f400:	2001      	movs	r0, #1
   1f402:	e7d4      	b.n	1f3ae <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   1f404:	2004      	movs	r0, #4
   1f406:	e7d2      	b.n	1f3ae <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   1f408:	2005      	movs	r0, #5
   1f40a:	e7d0      	b.n	1f3ae <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   1f40c:	2006      	movs	r0, #6
   1f40e:	e7ce      	b.n	1f3ae <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   1f410:	2303      	movs	r3, #3
   1f412:	e7d5      	b.n	1f3c0 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   1f414:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   1f418:	6892      	ldr	r2, [r2, #8]
   1f41a:	7911      	ldrb	r1, [r2, #4]
   1f41c:	f004 021f 	and.w	r2, r4, #31
   1f420:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   1f424:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1f428:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1f42c:	fa0b f204 	lsl.w	r2, fp, r4
   1f430:	68a9      	ldr	r1, [r5, #8]
   1f432:	2b00      	cmp	r3, #0
   1f434:	d025      	beq.n	1f482 <gpio_nrfx_config+0x11e>
   1f436:	4311      	orrs	r1, r2
   1f438:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   1f43a:	6969      	ldr	r1, [r5, #20]
   1f43c:	9301      	str	r3, [sp, #4]
   1f43e:	06b0      	lsls	r0, r6, #26
   1f440:	bf4c      	ite	mi
   1f442:	4311      	orrmi	r1, r2
   1f444:	4391      	bicpl	r1, r2
   1f446:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   1f448:	69a9      	ldr	r1, [r5, #24]
   1f44a:	0670      	lsls	r0, r6, #25
   1f44c:	bf4c      	ite	mi
   1f44e:	4311      	orrmi	r1, r2
   1f450:	4391      	bicpl	r1, r2
   1f452:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   1f454:	6929      	ldr	r1, [r5, #16]
   1f456:	0770      	lsls	r0, r6, #29
   1f458:	bf4c      	ite	mi
   1f45a:	4311      	orrmi	r1, r2
   1f45c:	4391      	bicpl	r1, r2
   1f45e:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   1f460:	69e9      	ldr	r1, [r5, #28]
   1f462:	0630      	lsls	r0, r6, #24
   1f464:	bf4c      	ite	mi
   1f466:	430a      	orrmi	r2, r1
   1f468:	ea21 0202 	bicpl.w	r2, r1, r2
   1f46c:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1f46e:	4621      	mov	r1, r4
   1f470:	4640      	mov	r0, r8
   1f472:	f7f6 fb2d 	bl	15ad0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1f476:	2800      	cmp	r0, #0
   1f478:	d1bd      	bne.n	1f3f6 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1f47a:	3401      	adds	r4, #1
   1f47c:	b2e4      	uxtb	r4, r4
   1f47e:	9b01      	ldr	r3, [sp, #4]
   1f480:	e7b6      	b.n	1f3f0 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   1f482:	ea21 0102 	bic.w	r1, r1, r2
   1f486:	e7d7      	b.n	1f438 <gpio_nrfx_config+0xd4>

0001f488 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1f488:	2901      	cmp	r1, #1
{
   1f48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1f48e:	bf18      	it	ne
   1f490:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   1f492:	6887      	ldr	r7, [r0, #8]
{
   1f494:	4606      	mov	r6, r0
		to_pin   = pin;
   1f496:	bf12      	itee	ne
   1f498:	4625      	movne	r5, r4
		to_pin   = 31U;
   1f49a:	251f      	moveq	r5, #31
		from_pin = 0U;
   1f49c:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1f49e:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1f4a2:	42ac      	cmp	r4, r5
   1f4a4:	d902      	bls.n	1f4ac <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   1f4a6:	2000      	movs	r0, #0
}
   1f4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1f4ac:	68fb      	ldr	r3, [r7, #12]
   1f4ae:	fa08 f204 	lsl.w	r2, r8, r4
   1f4b2:	ea23 0302 	bic.w	r3, r3, r2
   1f4b6:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1f4b8:	4621      	mov	r1, r4
   1f4ba:	4630      	mov	r0, r6
   1f4bc:	f7f6 fb08 	bl	15ad0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1f4c0:	2800      	cmp	r0, #0
   1f4c2:	d1f1      	bne.n	1f4a8 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1f4c4:	3401      	adds	r4, #1
   1f4c6:	b2e4      	uxtb	r4, r4
   1f4c8:	e7eb      	b.n	1f4a2 <gpio_nrfx_pin_disable_callback+0x1a>

0001f4ca <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   1f4ca:	2901      	cmp	r1, #1
{
   1f4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   1f4d0:	bf18      	it	ne
   1f4d2:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
   1f4d4:	6887      	ldr	r7, [r0, #8]
{
   1f4d6:	4606      	mov	r6, r0
		to_pin   = pin;
   1f4d8:	bf12      	itee	ne
   1f4da:	4625      	movne	r5, r4
		to_pin   = 31U;
   1f4dc:	251f      	moveq	r5, #31
		from_pin = 0U;
   1f4de:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   1f4e0:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1f4e4:	42ac      	cmp	r4, r5
   1f4e6:	d902      	bls.n	1f4ee <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   1f4e8:	2000      	movs	r0, #0
}
   1f4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   1f4ee:	68fb      	ldr	r3, [r7, #12]
   1f4f0:	fa08 f204 	lsl.w	r2, r8, r4
   1f4f4:	4313      	orrs	r3, r2
   1f4f6:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   1f4f8:	4621      	mov	r1, r4
   1f4fa:	4630      	mov	r0, r6
   1f4fc:	f7f6 fae8 	bl	15ad0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1f500:	2800      	cmp	r0, #0
   1f502:	d1f2      	bne.n	1f4ea <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   1f504:	3401      	adds	r4, #1
   1f506:	b2e4      	uxtb	r4, r4
   1f508:	e7ec      	b.n	1f4e4 <gpio_nrfx_pin_enable_callback+0x1a>

0001f50a <is_regular_addr_valid>:
	if (addr >= NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   1f50a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   1f50e:	b510      	push	{r4, lr}
	if (addr >= NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   1f510:	691c      	ldr	r4, [r3, #16]
   1f512:	695a      	ldr	r2, [r3, #20]
   1f514:	4362      	muls	r2, r4
   1f516:	4282      	cmp	r2, r0
   1f518:	d90f      	bls.n	1f53a <is_regular_addr_valid+0x30>
   1f51a:	2800      	cmp	r0, #0
   1f51c:	db0d      	blt.n	1f53a <is_regular_addr_valid+0x30>
	    len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   1f51e:	691c      	ldr	r4, [r3, #16]
   1f520:	695a      	ldr	r2, [r3, #20]
   1f522:	4362      	muls	r2, r4
	    addr < 0 ||
   1f524:	428a      	cmp	r2, r1
   1f526:	d308      	bcc.n	1f53a <is_regular_addr_valid+0x30>
	    addr + len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE) {
   1f528:	691a      	ldr	r2, [r3, #16]
   1f52a:	695b      	ldr	r3, [r3, #20]
   1f52c:	4408      	add	r0, r1
   1f52e:	4353      	muls	r3, r2
	    len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
   1f530:	4298      	cmp	r0, r3
   1f532:	bf8c      	ite	hi
   1f534:	2000      	movhi	r0, #0
   1f536:	2001      	movls	r0, #1
}
   1f538:	bd10      	pop	{r4, pc}
		return false;
   1f53a:	2000      	movs	r0, #0
   1f53c:	e7fc      	b.n	1f538 <is_regular_addr_valid+0x2e>

0001f53e <flash_nrf_read>:
{
   1f53e:	b570      	push	{r4, r5, r6, lr}
   1f540:	460d      	mov	r5, r1
	return is_regular_addr_valid(addr, len) ||
   1f542:	4628      	mov	r0, r5
   1f544:	4619      	mov	r1, r3
{
   1f546:	4616      	mov	r6, r2
   1f548:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   1f54a:	f7ff ffde 	bl	1f50a <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   1f54e:	b138      	cbz	r0, 1f560 <flash_nrf_read+0x22>
	if (!len) {
   1f550:	b14c      	cbz	r4, 1f566 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   1f552:	4622      	mov	r2, r4
   1f554:	4629      	mov	r1, r5
   1f556:	4630      	mov	r0, r6
   1f558:	f7fa fda6 	bl	1a0a8 <memcpy>
	return 0;
   1f55c:	2000      	movs	r0, #0
}
   1f55e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1f560:	f06f 0015 	mvn.w	r0, #21
   1f564:	e7fb      	b.n	1f55e <flash_nrf_read+0x20>
		return 0;
   1f566:	4620      	mov	r0, r4
   1f568:	e7f9      	b.n	1f55e <flash_nrf_read+0x20>

0001f56a <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   1f56a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   1f56e:	6843      	ldr	r3, [r0, #4]
{
   1f570:	b086      	sub	sp, #24
   1f572:	4689      	mov	r9, r1
   1f574:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   1f576:	691b      	ldr	r3, [r3, #16]
   1f578:	aa02      	add	r2, sp, #8
   1f57a:	a901      	add	r1, sp, #4
   1f57c:	4798      	blx	r3
	off_t off = 0;
   1f57e:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   1f580:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   1f582:	4625      	mov	r5, r4
   1f584:	9b02      	ldr	r3, [sp, #8]
   1f586:	42ab      	cmp	r3, r5
   1f588:	d802      	bhi.n	1f590 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   1f58a:	b006      	add	sp, #24
   1f58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   1f590:	9f01      	ldr	r7, [sp, #4]
   1f592:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   1f596:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   1f598:	687b      	ldr	r3, [r7, #4]
   1f59a:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   1f59c:	683a      	ldr	r2, [r7, #0]
   1f59e:	42b2      	cmp	r2, r6
   1f5a0:	eb08 0306 	add.w	r3, r8, r6
   1f5a4:	d802      	bhi.n	1f5ac <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   1f5a6:	3501      	adds	r5, #1
   1f5a8:	4698      	mov	r8, r3
   1f5aa:	e7eb      	b.n	1f584 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   1f5ac:	4651      	mov	r1, sl
   1f5ae:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   1f5b0:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   1f5b2:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   1f5b4:	47c8      	blx	r9
   1f5b6:	2800      	cmp	r0, #0
   1f5b8:	d0e7      	beq.n	1f58a <flash_page_foreach+0x20>
			off += page_info.size;
   1f5ba:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   1f5bc:	3601      	adds	r6, #1
			off += page_info.size;
   1f5be:	441c      	add	r4, r3
			page++;
   1f5c0:	e7ec      	b.n	1f59c <flash_page_foreach+0x32>

0001f5c2 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1f5c2:	6882      	ldr	r2, [r0, #8]
{
   1f5c4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1f5c6:	e892 0003 	ldmia.w	r2, {r0, r1}
   1f5ca:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f5ce:	2000      	movs	r0, #0
   1f5d0:	4770      	bx	lr

0001f5d2 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1f5d2:	f7fa bcab 	b.w	19f2c <z_clock_idle_exit>

0001f5d6 <k_mem_pool_malloc>:
{
   1f5d6:	b513      	push	{r0, r1, r4, lr}
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   1f5d8:	2404      	movs	r4, #4
   1f5da:	190a      	adds	r2, r1, r4
   1f5dc:	d204      	bcs.n	1f5e8 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1f5de:	2300      	movs	r3, #0
   1f5e0:	4669      	mov	r1, sp
   1f5e2:	f7f6 fffb 	bl	165dc <k_mem_pool_alloc>
   1f5e6:	b110      	cbz	r0, 1f5ee <k_mem_pool_malloc+0x18>
		return NULL;
   1f5e8:	2000      	movs	r0, #0
}
   1f5ea:	b002      	add	sp, #8
   1f5ec:	bd10      	pop	{r4, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1f5ee:	4622      	mov	r2, r4
   1f5f0:	a901      	add	r1, sp, #4
   1f5f2:	9800      	ldr	r0, [sp, #0]
   1f5f4:	f7fa fd58 	bl	1a0a8 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   1f5f8:	9800      	ldr	r0, [sp, #0]
   1f5fa:	3004      	adds	r0, #4
   1f5fc:	e7f5      	b.n	1f5ea <k_mem_pool_malloc+0x14>

0001f5fe <k_free>:
	if (ptr != NULL) {
   1f5fe:	b110      	cbz	r0, 1f606 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1f600:	3804      	subs	r0, #4
   1f602:	f7f7 b84d 	b.w	166a0 <k_mem_pool_free_id>
}
   1f606:	4770      	bx	lr

0001f608 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   1f608:	2300      	movs	r3, #0
	mutex->lock_count = 0;
   1f60a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1f60e:	e9c0 0000 	strd	r0, r0, [r0]
}
   1f612:	4770      	bx	lr

0001f614 <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   1f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f618:	4604      	mov	r4, r0
   1f61a:	460f      	mov	r7, r1
   1f61c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f61e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f622:	f04f 0220 	mov.w	r2, #32
   1f626:	f3ef 8611 	mrs	r6, BASEPRI
   1f62a:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   1f62e:	b1db      	cbz	r3, 1f668 <queue_insert+0x54>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1f630:	2008      	movs	r0, #8
   1f632:	f7f7 f85f 	bl	166f4 <z_thread_malloc>
		if (anode == NULL) {
   1f636:	b938      	cbnz	r0, 1f648 <queue_insert+0x34>
	__asm__ volatile(
   1f638:	f386 8811 	msr	BASEPRI, r6
   1f63c:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   1f640:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   1f644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->next_and_flags = flags;
   1f648:	2301      	movs	r3, #1
		anode->data = data;
   1f64a:	f8c0 8004 	str.w	r8, [r0, #4]
   1f64e:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1f650:	6803      	ldr	r3, [r0, #0]
   1f652:	f003 0203 	and.w	r2, r3, #3
   1f656:	b95f      	cbnz	r7, 1f670 <queue_insert+0x5c>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f658:	6823      	ldr	r3, [r4, #0]
   1f65a:	4313      	orrs	r3, r2
   1f65c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f65e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1f660:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f662:	b973      	cbnz	r3, 1f682 <queue_insert+0x6e>
	list->tail = node;
   1f664:	6060      	str	r0, [r4, #4]
   1f666:	e00c      	b.n	1f682 <queue_insert+0x6e>
	node->next_and_flags = flags;
   1f668:	f8c8 3000 	str.w	r3, [r8]
   1f66c:	4640      	mov	r0, r8
   1f66e:	e7ef      	b.n	1f650 <queue_insert+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f670:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1f672:	f033 0303 	bics.w	r3, r3, #3
   1f676:	d114      	bne.n	1f6a2 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f678:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1f67a:	6862      	ldr	r2, [r4, #4]
   1f67c:	b95a      	cbnz	r2, 1f696 <queue_insert+0x82>
	list->head = node;
   1f67e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f682:	2104      	movs	r1, #4
   1f684:	4628      	mov	r0, r5
   1f686:	f000 fb71 	bl	1fd6c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1f68a:	4628      	mov	r0, r5
   1f68c:	4631      	mov	r1, r6
   1f68e:	f000 f8f6 	bl	1f87e <z_reschedule>
	return 0;
   1f692:	2000      	movs	r0, #0
   1f694:	e7d6      	b.n	1f644 <queue_insert+0x30>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f696:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f698:	f003 0303 	and.w	r3, r3, #3
   1f69c:	4303      	orrs	r3, r0
   1f69e:	6013      	str	r3, [r2, #0]
   1f6a0:	e7e0      	b.n	1f664 <queue_insert+0x50>
   1f6a2:	4313      	orrs	r3, r2
   1f6a4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f6a6:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f6a8:	f003 0303 	and.w	r3, r3, #3
   1f6ac:	4318      	orrs	r0, r3
   1f6ae:	6038      	str	r0, [r7, #0]
   1f6b0:	e7e7      	b.n	1f682 <queue_insert+0x6e>

0001f6b2 <z_queue_node_peek>:
{
   1f6b2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   1f6b4:	4604      	mov	r4, r0
   1f6b6:	b130      	cbz	r0, 1f6c6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f6b8:	6802      	ldr	r2, [r0, #0]
   1f6ba:	0793      	lsls	r3, r2, #30
   1f6bc:	d003      	beq.n	1f6c6 <z_queue_node_peek+0x14>
		ret = anode->data;
   1f6be:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1f6c0:	b109      	cbz	r1, 1f6c6 <z_queue_node_peek+0x14>
			k_free(anode);
   1f6c2:	f7ff ff9c 	bl	1f5fe <k_free>
}
   1f6c6:	4620      	mov	r0, r4
   1f6c8:	bd10      	pop	{r4, pc}

0001f6ca <z_impl_k_queue_init>:
	list->head = NULL;
   1f6ca:	2300      	movs	r3, #0
	list->tail = NULL;
   1f6cc:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&queue->poll_events);
   1f6d0:	f100 0308 	add.w	r3, r0, #8
   1f6d4:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   1f6d8:	4770      	bx	lr

0001f6da <z_impl_k_queue_cancel_wait>:
{
   1f6da:	b538      	push	{r3, r4, r5, lr}
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f6dc:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   1f6e0:	f04f 0320 	mov.w	r3, #32
   1f6e4:	f3ef 8511 	mrs	r5, BASEPRI
   1f6e8:	f383 8811 	msr	BASEPRI, r3
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f6ec:	2108      	movs	r1, #8
   1f6ee:	4620      	mov	r0, r4
   1f6f0:	f000 fb3c 	bl	1fd6c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1f6f4:	4629      	mov	r1, r5
   1f6f6:	4620      	mov	r0, r4
}
   1f6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&queue->lock, key);
   1f6fc:	f000 b8bf 	b.w	1f87e <z_reschedule>

0001f700 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1f700:	460a      	mov	r2, r1
   1f702:	2300      	movs	r3, #0
   1f704:	6841      	ldr	r1, [r0, #4]
   1f706:	f7ff bf85 	b.w	1f614 <queue_insert>

0001f70a <k_queue_prepend>:
			   data, false);
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false);
   1f70a:	2300      	movs	r3, #0
   1f70c:	460a      	mov	r2, r1
   1f70e:	4619      	mov	r1, r3
   1f710:	f7ff bf80 	b.w	1f614 <queue_insert>

0001f714 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1f714:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(head && tail, "invalid head or tail");

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f716:	f100 0508 	add.w	r5, r0, #8
   1f71a:	f04f 0320 	mov.w	r3, #32
   1f71e:	f3ef 8611 	mrs	r6, BASEPRI
   1f722:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f726:	6843      	ldr	r3, [r0, #4]
   1f728:	b95b      	cbnz	r3, 1f742 <k_queue_append_list+0x2e>
	list->head = node;
   1f72a:	6001      	str	r1, [r0, #0]
	list->tail = node;
   1f72c:	6042      	str	r2, [r0, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f72e:	2104      	movs	r1, #4
   1f730:	4628      	mov	r0, r5
   1f732:	f000 fb1b 	bl	1fd6c <z_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	z_reschedule(&queue->lock, key);
   1f736:	4631      	mov	r1, r6
   1f738:	4628      	mov	r0, r5
}
   1f73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   1f73e:	f000 b89e 	b.w	1f87e <z_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f742:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f744:	f004 0403 	and.w	r4, r4, #3
   1f748:	4321      	orrs	r1, r4
   1f74a:	6019      	str	r1, [r3, #0]
   1f74c:	e7ee      	b.n	1f72c <k_queue_append_list+0x18>

0001f74e <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1f74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f752:	4604      	mov	r4, r0
   1f754:	b086      	sub	sp, #24
   1f756:	460d      	mov	r5, r1
   1f758:	f04f 0320 	mov.w	r3, #32
   1f75c:	f3ef 8711 	mrs	r7, BASEPRI
   1f760:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   1f764:	6800      	ldr	r0, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f766:	b188      	cbz	r0, 1f78c <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f768:	6803      	ldr	r3, [r0, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f76a:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f76c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f770:	4290      	cmp	r0, r2
	list->head = node;
   1f772:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1f774:	bf08      	it	eq
   1f776:	6063      	streq	r3, [r4, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f778:	2101      	movs	r1, #1
   1f77a:	f7ff ff9a 	bl	1f6b2 <z_queue_node_peek>
	__asm__ volatile(
   1f77e:	f387 8811 	msr	BASEPRI, r7
   1f782:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   1f786:	b006      	add	sp, #24
   1f788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   1f78c:	2900      	cmp	r1, #0
   1f78e:	d0f6      	beq.n	1f77e <z_impl_k_queue_get+0x30>
   1f790:	f387 8811 	msr	BASEPRI, r7
   1f794:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1f798:	2104      	movs	r1, #4
   1f79a:	4602      	mov	r2, r0
   1f79c:	4623      	mov	r3, r4
   1f79e:	eb0d 0001 	add.w	r0, sp, r1
   1f7a2:	f7f7 fe4d 	bl	17440 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   1f7a6:	1c6a      	adds	r2, r5, #1
   1f7a8:	d002      	beq.n	1f7b0 <z_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1f7aa:	f000 fa10 	bl	1fbce <z_impl_k_uptime_get_32>
   1f7ae:	4606      	mov	r6, r0
{
   1f7b0:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   1f7b2:	9b04      	ldr	r3, [sp, #16]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout)
   1f7b4:	1bea      	subs	r2, r5, r7
   1f7b6:	f36f 3310 	bfc	r3, #12, #5
   1f7ba:	2101      	movs	r1, #1
   1f7bc:	a801      	add	r0, sp, #4
   1f7be:	9304      	str	r3, [sp, #16]
   1f7c0:	f7f7 fe52 	bl	17468 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   1f7c4:	b118      	cbz	r0, 1f7ce <z_impl_k_queue_get+0x80>
   1f7c6:	300b      	adds	r0, #11
   1f7c8:	d001      	beq.n	1f7ce <z_impl_k_queue_get+0x80>
			return NULL;
   1f7ca:	2000      	movs	r0, #0
   1f7cc:	e7db      	b.n	1f786 <z_impl_k_queue_get+0x38>
	__asm__ volatile(
   1f7ce:	f04f 0320 	mov.w	r3, #32
   1f7d2:	f3ef 8811 	mrs	r8, BASEPRI
   1f7d6:	f383 8811 	msr	BASEPRI, r3
Z_GENLIST_IS_EMPTY(sflist)
   1f7da:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   1f7dc:	b138      	cbz	r0, 1f7ee <z_impl_k_queue_get+0xa0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f7de:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f7e0:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f7e2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f7e6:	4290      	cmp	r0, r2
	list->head = node;
   1f7e8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1f7ea:	bf08      	it	eq
   1f7ec:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   1f7ee:	2101      	movs	r1, #1
   1f7f0:	f7ff ff5f 	bl	1f6b2 <z_queue_node_peek>
	__asm__ volatile(
   1f7f4:	f388 8811 	msr	BASEPRI, r8
   1f7f8:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   1f7fc:	2800      	cmp	r0, #0
   1f7fe:	d1c2      	bne.n	1f786 <z_impl_k_queue_get+0x38>
   1f800:	1c6b      	adds	r3, r5, #1
   1f802:	d0d6      	beq.n	1f7b2 <z_impl_k_queue_get+0x64>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t)
   1f804:	f000 f9e3 	bl	1fbce <z_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   1f808:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1f80a:	42bd      	cmp	r5, r7
   1f80c:	dad1      	bge.n	1f7b2 <z_impl_k_queue_get+0x64>
   1f80e:	e7dc      	b.n	1f7ca <z_impl_k_queue_get+0x7c>

0001f810 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f810:	7b43      	ldrb	r3, [r0, #13]
   1f812:	06db      	lsls	r3, r3, #27
   1f814:	bf03      	ittte	eq
   1f816:	6980      	ldreq	r0, [r0, #24]
   1f818:	fab0 f080 	clzeq	r0, r0
   1f81c:	0940      	lsreq	r0, r0, #5
   1f81e:	2000      	movne	r0, #0
}
   1f820:	4770      	bx	lr

0001f822 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   1f822:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1f826:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1f82a:	4298      	cmp	r0, r3
   1f82c:	bfac      	ite	ge
   1f82e:	2000      	movge	r0, #0
   1f830:	2001      	movlt	r0, #1
   1f832:	4770      	bx	lr

0001f834 <z_find_first_thread_to_unpend>:
{
   1f834:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f836:	f04f 0320 	mov.w	r3, #32
   1f83a:	f3ef 8411 	mrs	r4, BASEPRI
   1f83e:	f383 8811 	msr	BASEPRI, r3
		ret = _priq_wait_best(&wait_q->waitq);
   1f842:	f000 f85d 	bl	1f900 <z_priq_dumb_best>
	__asm__ volatile(
   1f846:	f384 8811 	msr	BASEPRI, r4
   1f84a:	f3bf 8f6f 	isb	sy
}
   1f84e:	bd10      	pop	{r4, pc}

0001f850 <z_unpend_thread_no_timeout>:
{
   1f850:	b538      	push	{r3, r4, r5, lr}
   1f852:	4604      	mov	r4, r0
	__asm__ volatile(
   1f854:	f04f 0320 	mov.w	r3, #32
   1f858:	f3ef 8511 	mrs	r5, BASEPRI
   1f85c:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1f860:	4601      	mov	r1, r0
   1f862:	6880      	ldr	r0, [r0, #8]
   1f864:	f7f7 f85c 	bl	16920 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f868:	7b63      	ldrb	r3, [r4, #13]
   1f86a:	f023 0302 	bic.w	r3, r3, #2
   1f86e:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1f870:	f385 8811 	msr	BASEPRI, r5
   1f874:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1f878:	2300      	movs	r3, #0
   1f87a:	60a3      	str	r3, [r4, #8]
}
   1f87c:	bd38      	pop	{r3, r4, r5, pc}

0001f87e <z_reschedule>:
{
   1f87e:	b508      	push	{r3, lr}
	if (resched()) {
   1f880:	f7f6 ffec 	bl	1685c <resched>
   1f884:	b120      	cbz	r0, 1f890 <z_reschedule+0x12>
   1f886:	4608      	mov	r0, r1
}
   1f888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f88c:	f7e8 bba8 	b.w	7fe0 <__swap>
   1f890:	f381 8811 	msr	BASEPRI, r1
   1f894:	f3bf 8f6f 	isb	sy
   1f898:	bd08      	pop	{r3, pc}

0001f89a <z_reschedule_irqlock>:
{
   1f89a:	b508      	push	{r3, lr}
   1f89c:	4602      	mov	r2, r0
	if (resched()) {
   1f89e:	f7f6 ffdd 	bl	1685c <resched>
   1f8a2:	b120      	cbz	r0, 1f8ae <z_reschedule_irqlock+0x14>
   1f8a4:	4610      	mov	r0, r2
}
   1f8a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f8aa:	f7e8 bb99 	b.w	7fe0 <__swap>
   1f8ae:	f382 8811 	msr	BASEPRI, r2
   1f8b2:	f3bf 8f6f 	isb	sy
   1f8b6:	bd08      	pop	{r3, pc}

0001f8b8 <z_reschedule_unlocked>:
	__asm__ volatile(
   1f8b8:	f04f 0320 	mov.w	r3, #32
   1f8bc:	f3ef 8011 	mrs	r0, BASEPRI
   1f8c0:	f383 8811 	msr	BASEPRI, r3
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   1f8c4:	f7ff bfe9 	b.w	1f89a <z_reschedule_irqlock>

0001f8c8 <z_unpend_thread>:
{
   1f8c8:	b538      	push	{r3, r4, r5, lr}
   1f8ca:	4604      	mov	r4, r0
   1f8cc:	f04f 0320 	mov.w	r3, #32
   1f8d0:	f3ef 8511 	mrs	r5, BASEPRI
   1f8d4:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1f8d8:	4601      	mov	r1, r0
   1f8da:	6880      	ldr	r0, [r0, #8]
   1f8dc:	f7f7 f820 	bl	16920 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f8e0:	7b63      	ldrb	r3, [r4, #13]
   1f8e2:	f023 0302 	bic.w	r3, r3, #2
   1f8e6:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1f8e8:	f385 8811 	msr	BASEPRI, r5
   1f8ec:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1f8f0:	2300      	movs	r3, #0
   1f8f2:	60a3      	str	r3, [r4, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1f8f4:	f104 0018 	add.w	r0, r4, #24
}
   1f8f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f8fc:	f000 b929 	b.w	1fb52 <z_abort_timeout>

0001f900 <z_priq_dumb_best>:
	return list->head == list;
   1f900:	6803      	ldr	r3, [r0, #0]
}
   1f902:	4298      	cmp	r0, r3
   1f904:	bf14      	ite	ne
   1f906:	4618      	movne	r0, r3
   1f908:	2000      	moveq	r0, #0
   1f90a:	4770      	bx	lr

0001f90c <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   1f90c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   1f910:	b570      	push	{r4, r5, r6, lr}
   1f912:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   1f914:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   1f918:	b1bb      	cbz	r3, 1f94a <z_thread_timeout+0x3e>
	__asm__ volatile(
   1f91a:	f04f 0320 	mov.w	r3, #32
   1f91e:	f3ef 8611 	mrs	r6, BASEPRI
   1f922:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1f926:	4629      	mov	r1, r5
   1f928:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1f92c:	f7f6 fff8 	bl	16920 <z_priq_dumb_remove>
   1f930:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1f934:	f023 0302 	bic.w	r3, r3, #2
   1f938:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   1f93c:	f386 8811 	msr	BASEPRI, r6
   1f940:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1f944:	2300      	movs	r3, #0
   1f946:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f94a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1f94e:	f023 0304 	bic.w	r3, r3, #4
   1f952:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1f956:	4628      	mov	r0, r5
   1f958:	f7ff ff5a 	bl	1f810 <z_is_thread_ready>
   1f95c:	b120      	cbz	r0, 1f968 <z_thread_timeout+0x5c>
		z_add_thread_to_ready_q(thread);
   1f95e:	4628      	mov	r0, r5
}
   1f960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f964:	f7f7 b82a 	b.w	169bc <z_add_thread_to_ready_q>
   1f968:	bd70      	pop	{r4, r5, r6, pc}

0001f96a <z_unpend_first_thread>:
{
   1f96a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f96c:	f04f 0320 	mov.w	r3, #32
   1f970:	f3ef 8211 	mrs	r2, BASEPRI
   1f974:	f383 8811 	msr	BASEPRI, r3
		ret = _priq_wait_best(&wait_q->waitq);
   1f978:	f7ff ffc2 	bl	1f900 <z_priq_dumb_best>
   1f97c:	4604      	mov	r4, r0
	__asm__ volatile(
   1f97e:	f382 8811 	msr	BASEPRI, r2
   1f982:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1f986:	b1b8      	cbz	r0, 1f9b8 <z_unpend_first_thread+0x4e>
	__asm__ volatile(
   1f988:	f04f 0320 	mov.w	r3, #32
   1f98c:	f3ef 8511 	mrs	r5, BASEPRI
   1f990:	f383 8811 	msr	BASEPRI, r3
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1f994:	4601      	mov	r1, r0
   1f996:	6880      	ldr	r0, [r0, #8]
   1f998:	f7f6 ffc2 	bl	16920 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f99c:	7b63      	ldrb	r3, [r4, #13]
   1f99e:	f023 0302 	bic.w	r3, r3, #2
   1f9a2:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   1f9a4:	f385 8811 	msr	BASEPRI, r5
   1f9a8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   1f9ac:	2300      	movs	r3, #0
   1f9ae:	60a3      	str	r3, [r4, #8]
   1f9b0:	f104 0018 	add.w	r0, r4, #24
   1f9b4:	f000 f8cd 	bl	1fb52 <z_abort_timeout>
}
   1f9b8:	4620      	mov	r0, r4
   1f9ba:	bd38      	pop	{r3, r4, r5, pc}

0001f9bc <z_unpend_all>:
{
   1f9bc:	b570      	push	{r4, r5, r6, lr}
   1f9be:	4606      	mov	r6, r0
	int need_sched = 0;
   1f9c0:	2500      	movs	r5, #0
   1f9c2:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f9c4:	42a6      	cmp	r6, r4
   1f9c6:	d000      	beq.n	1f9ca <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   1f9c8:	b90c      	cbnz	r4, 1f9ce <z_unpend_all+0x12>
}
   1f9ca:	4628      	mov	r0, r5
   1f9cc:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   1f9ce:	4620      	mov	r0, r4
   1f9d0:	f7ff ff7a 	bl	1f8c8 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   1f9d4:	4620      	mov	r0, r4
   1f9d6:	f7ff ff1b 	bl	1f810 <z_is_thread_ready>
		need_sched = 1;
   1f9da:	2501      	movs	r5, #1
   1f9dc:	2800      	cmp	r0, #0
   1f9de:	d0f0      	beq.n	1f9c2 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   1f9e0:	4620      	mov	r0, r4
   1f9e2:	f7f6 ffeb 	bl	169bc <z_add_thread_to_ready_q>
   1f9e6:	e7ec      	b.n	1f9c2 <z_unpend_all+0x6>

0001f9e8 <z_impl_k_sem_init>:
	sys_dlist_init(&sem->poll_events);
   1f9e8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1f9ec:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1f9f0:	e9c0 0000 	strd	r0, r0, [r0]
   1f9f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1f9f8:	4770      	bx	lr

0001f9fa <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1f9fa:	7b43      	ldrb	r3, [r0, #13]
   1f9fc:	06db      	lsls	r3, r3, #27
   1f9fe:	bf03      	ittte	eq
   1fa00:	6980      	ldreq	r0, [r0, #24]
   1fa02:	fab0 f080 	clzeq	r0, r0
   1fa06:	0940      	lsreq	r0, r0, #5
   1fa08:	2000      	movne	r0, #0
}
   1fa0a:	4770      	bx	lr

0001fa0c <k_thread_foreach>:
}
   1fa0c:	4770      	bx	lr

0001fa0e <z_impl_k_thread_name_set>:
}
   1fa0e:	4770      	bx	lr

0001fa10 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1fa10:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1fa12:	b510      	push	{r4, lr}
   1fa14:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1fa16:	b103      	cbz	r3, 1fa1a <z_thread_single_abort+0xa>
		thread->fn_abort();
   1fa18:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   1fa1a:	4620      	mov	r0, r4
   1fa1c:	f7ff ffed 	bl	1f9fa <z_is_thread_ready>
   1fa20:	b138      	cbz	r0, 1fa32 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   1fa22:	4620      	mov	r0, r4
   1fa24:	f7f7 f870 	bl	16b08 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   1fa28:	7b63      	ldrb	r3, [r4, #13]
   1fa2a:	f043 0308 	orr.w	r3, r3, #8
   1fa2e:	7363      	strb	r3, [r4, #13]
}
   1fa30:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   1fa32:	7b63      	ldrb	r3, [r4, #13]
   1fa34:	079b      	lsls	r3, r3, #30
   1fa36:	d502      	bpl.n	1fa3e <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   1fa38:	4620      	mov	r0, r4
   1fa3a:	f7ff ff09 	bl	1f850 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   1fa3e:	69a3      	ldr	r3, [r4, #24]
   1fa40:	2b00      	cmp	r3, #0
   1fa42:	d0f1      	beq.n	1fa28 <z_thread_single_abort+0x18>
   1fa44:	f104 0018 	add.w	r0, r4, #24
   1fa48:	f000 f883 	bl	1fb52 <z_abort_timeout>
   1fa4c:	e7ec      	b.n	1fa28 <z_thread_single_abort+0x18>

0001fa4e <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1fa4e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   1fa50:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   1fa52:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   1fa54:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0;
   1fa56:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   1fa58:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1fa5c:	4770      	bx	lr

0001fa5e <k_work_submit_to_queue>:
{
   1fa5e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fa60:	f101 0308 	add.w	r3, r1, #8
   1fa64:	f3bf 8f5b 	dmb	ish
   1fa68:	e853 2f00 	ldrex	r2, [r3]
   1fa6c:	f042 0c01 	orr.w	ip, r2, #1
   1fa70:	e843 ce00 	strex	lr, ip, [r3]
   1fa74:	f1be 0f00 	cmp.w	lr, #0
   1fa78:	d1f6      	bne.n	1fa68 <k_work_submit_to_queue+0xa>
   1fa7a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1fa7e:	07d3      	lsls	r3, r2, #31
   1fa80:	d403      	bmi.n	1fa8a <k_work_submit_to_queue+0x2c>
}
   1fa82:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1fa86:	f7ff be3b 	b.w	1f700 <k_queue_append>
}
   1fa8a:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa8e <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1fa8e:	f1a0 010c 	sub.w	r1, r0, #12
   1fa92:	6900      	ldr	r0, [r0, #16]
   1fa94:	f7ff bfe3 	b.w	1fa5e <k_work_submit_to_queue>

0001fa98 <work_cancel>:
{
   1fa98:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fa9a:	f3bf 8f5b 	dmb	ish
   1fa9e:	6883      	ldr	r3, [r0, #8]
   1faa0:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1faa4:	07db      	lsls	r3, r3, #31
{
   1faa6:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1faa8:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   1faac:	d532      	bpl.n	1fb14 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1faae:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1fab0:	6813      	ldr	r3, [r2, #0]
   1fab2:	2100      	movs	r1, #0
   1fab4:	b913      	cbnz	r3, 1fabc <work_cancel+0x24>
			return -EINVAL;
   1fab6:	f06f 0015 	mvn.w	r0, #21
}
   1faba:	bd70      	pop	{r4, r5, r6, pc}
   1fabc:	429c      	cmp	r4, r3
   1fabe:	d124      	bne.n	1fb0a <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   1fac0:	6823      	ldr	r3, [r4, #0]
   1fac2:	6856      	ldr	r6, [r2, #4]
   1fac4:	f023 0003 	bic.w	r0, r3, #3
   1fac8:	b9b1      	cbnz	r1, 1faf8 <work_cancel+0x60>
   1faca:	42b4      	cmp	r4, r6
	list->head = node;
   1facc:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1face:	d100      	bne.n	1fad2 <work_cancel+0x3a>
	list->tail = node;
   1fad0:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fad2:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fad4:	f003 0303 	and.w	r3, r3, #3
   1fad8:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1fada:	2000      	movs	r0, #0
   1fadc:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fade:	f3bf 8f5b 	dmb	ish
   1fae2:	e855 3f00 	ldrex	r3, [r5]
   1fae6:	f023 0301 	bic.w	r3, r3, #1
   1faea:	e845 3200 	strex	r2, r3, [r5]
   1faee:	2a00      	cmp	r2, #0
   1faf0:	d1f7      	bne.n	1fae2 <work_cancel+0x4a>
   1faf2:	f3bf 8f5b 	dmb	ish
   1faf6:	e7e0      	b.n	1faba <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1faf8:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fafa:	f003 0303 	and.w	r3, r3, #3
   1fafe:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   1fb00:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fb02:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1fb04:	bf08      	it	eq
   1fb06:	6051      	streq	r1, [r2, #4]
   1fb08:	e7e3      	b.n	1fad2 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fb0a:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1fb0c:	4619      	mov	r1, r3
   1fb0e:	f020 0303 	bic.w	r3, r0, #3
   1fb12:	e7cf      	b.n	1fab4 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   1fb14:	300c      	adds	r0, #12
   1fb16:	f000 f81c 	bl	1fb52 <z_abort_timeout>
   1fb1a:	e7de      	b.n	1fada <work_cancel+0x42>

0001fb1c <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1fb1c:	2300      	movs	r3, #0
   1fb1e:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   1fb22:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   1fb26:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   1fb28:	61c3      	str	r3, [r0, #28]
}
   1fb2a:	4770      	bx	lr

0001fb2c <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   1fb2c:	69c3      	ldr	r3, [r0, #28]
{
   1fb2e:	b510      	push	{r4, lr}
	if (!work->work_q) {
   1fb30:	b163      	cbz	r3, 1fb4c <k_delayed_work_cancel+0x20>
	__asm__ volatile(
   1fb32:	f04f 0320 	mov.w	r3, #32
   1fb36:	f3ef 8411 	mrs	r4, BASEPRI
   1fb3a:	f383 8811 	msr	BASEPRI, r3
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   1fb3e:	f7ff ffab 	bl	1fa98 <work_cancel>
	__asm__ volatile(
   1fb42:	f384 8811 	msr	BASEPRI, r4
   1fb46:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1fb4a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fb4c:	f06f 0015 	mvn.w	r0, #21
   1fb50:	e7fb      	b.n	1fb4a <k_delayed_work_cancel+0x1e>

0001fb52 <z_abort_timeout>:
{
   1fb52:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fb54:	f04f 0220 	mov.w	r2, #32
   1fb58:	f3ef 8411 	mrs	r4, BASEPRI
   1fb5c:	f382 8811 	msr	BASEPRI, r2
		if (sys_dnode_is_linked(&to->node)) {
   1fb60:	6803      	ldr	r3, [r0, #0]
   1fb62:	b13b      	cbz	r3, 1fb74 <z_abort_timeout+0x22>
			remove_timeout(to);
   1fb64:	f7f7 fb06 	bl	17174 <remove_timeout>
			ret = 0;
   1fb68:	2000      	movs	r0, #0
	__asm__ volatile(
   1fb6a:	f384 8811 	msr	BASEPRI, r4
   1fb6e:	f3bf 8f6f 	isb	sy
}
   1fb72:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1fb74:	f06f 0015 	mvn.w	r0, #21
   1fb78:	e7f7      	b.n	1fb6a <z_abort_timeout+0x18>

0001fb7a <z_get_next_timeout_expiry>:
{
   1fb7a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fb7c:	f04f 0320 	mov.w	r3, #32
   1fb80:	f3ef 8411 	mrs	r4, BASEPRI
   1fb84:	f383 8811 	msr	BASEPRI, r3
		ret = next_timeout();
   1fb88:	f7f7 fb08 	bl	1719c <next_timeout>
	__asm__ volatile(
   1fb8c:	f384 8811 	msr	BASEPRI, r4
   1fb90:	f3bf 8f6f 	isb	sy
}
   1fb94:	bd10      	pop	{r4, pc}

0001fb96 <z_set_timeout_expiry>:
{
   1fb96:	b570      	push	{r4, r5, r6, lr}
   1fb98:	4604      	mov	r4, r0
   1fb9a:	460e      	mov	r6, r1
	__asm__ volatile(
   1fb9c:	f04f 0320 	mov.w	r3, #32
   1fba0:	f3ef 8511 	mrs	r5, BASEPRI
   1fba4:	f383 8811 	msr	BASEPRI, r3
		int next = next_timeout();
   1fba8:	f7f7 faf8 	bl	1719c <next_timeout>
		if (sooner && !imminent) {
   1fbac:	42a0      	cmp	r0, r4
   1fbae:	dd05      	ble.n	1fbbc <z_set_timeout_expiry+0x26>
   1fbb0:	2801      	cmp	r0, #1
   1fbb2:	dd03      	ble.n	1fbbc <z_set_timeout_expiry+0x26>
			z_clock_set_timeout(ticks, idle);
   1fbb4:	4631      	mov	r1, r6
   1fbb6:	4620      	mov	r0, r4
   1fbb8:	f7e8 f98a 	bl	7ed0 <z_clock_set_timeout>
	__asm__ volatile(
   1fbbc:	f385 8811 	msr	BASEPRI, r5
   1fbc0:	f3bf 8f6f 	isb	sy
}
   1fbc4:	bd70      	pop	{r4, r5, r6, pc}

0001fbc6 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   1fbc6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   1fbc8:	f7f7 fbca 	bl	17360 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   1fbcc:	bd08      	pop	{r3, pc}

0001fbce <z_impl_k_uptime_get_32>:

u32_t z_impl_k_uptime_get_32(void)
{
   1fbce:	b508      	push	{r3, lr}
	return __ticks_to_ms(z_tick_get_32());
   1fbd0:	f7ff fff9 	bl	1fbc6 <z_tick_get_32>
   1fbd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1fbd8:	2264      	movs	r2, #100	; 0x64
   1fbda:	2300      	movs	r3, #0
   1fbdc:	fba0 0101 	umull	r0, r1, r0, r1
   1fbe0:	f7e1 f82c 	bl	c3c <__aeabi_uldivmod>
}
   1fbe4:	bd08      	pop	{r3, pc}

0001fbe6 <z_impl_k_uptime_get>:
	return z_impl_k_uptime_get_32();
}
#endif

s64_t z_impl_k_uptime_get(void)
{
   1fbe6:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(z_tick_get());
   1fbe8:	f7f7 fbba 	bl	17360 <z_tick_get>
   1fbec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1fbf0:	fba0 4503 	umull	r4, r5, r0, r3
   1fbf4:	fb03 5501 	mla	r5, r3, r1, r5
   1fbf8:	2264      	movs	r2, #100	; 0x64
   1fbfa:	2300      	movs	r3, #0
   1fbfc:	4620      	mov	r0, r4
   1fbfe:	4629      	mov	r1, r5
   1fc00:	f7e1 f81c 	bl	c3c <__aeabi_uldivmod>
}
   1fc04:	bd38      	pop	{r3, r4, r5, pc}

0001fc06 <k_timer_init>:
	timer->status = 0;
   1fc06:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1fc08:	e9c0 1206 	strd	r1, r2, [r0, #24]
   1fc0c:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0;
   1fc10:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   1fc12:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   1fc16:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
   1fc1a:	6283      	str	r3, [r0, #40]	; 0x28
}
   1fc1c:	4770      	bx	lr

0001fc1e <z_impl_k_timer_stop>:
	return 0;
}
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1fc1e:	b510      	push	{r4, lr}
   1fc20:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1fc22:	f7ff ff96 	bl	1fb52 <z_abort_timeout>

	if (inactive) {
   1fc26:	b9f0      	cbnz	r0, 1fc66 <z_impl_k_timer_stop+0x48>
		return;
	}

	if (timer->stop_fn != NULL) {
   1fc28:	69e3      	ldr	r3, [r4, #28]
   1fc2a:	b10b      	cbz	r3, 1fc30 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1fc2c:	4620      	mov	r0, r4
   1fc2e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1fc30:	f104 0010 	add.w	r0, r4, #16
   1fc34:	2100      	movs	r1, #0
   1fc36:	f7ff fdfd 	bl	1f834 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1fc3a:	4604      	mov	r4, r0
   1fc3c:	b198      	cbz	r0, 1fc66 <z_impl_k_timer_stop+0x48>
		z_unpend_thread_no_timeout(thread);
   1fc3e:	f7ff fe07 	bl	1f850 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1fc42:	7b63      	ldrb	r3, [r4, #13]
   1fc44:	06db      	lsls	r3, r3, #27
   1fc46:	d104      	bne.n	1fc52 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
   1fc48:	69a3      	ldr	r3, [r4, #24]
   1fc4a:	b913      	cbnz	r3, 1fc52 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
   1fc4c:	4620      	mov	r0, r4
   1fc4e:	f7f6 feb5 	bl	169bc <z_add_thread_to_ready_q>
	__asm__ volatile(
   1fc52:	f04f 0320 	mov.w	r3, #32
   1fc56:	f3ef 8011 	mrs	r0, BASEPRI
   1fc5a:	f383 8811 	msr	BASEPRI, r3

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
   1fc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   1fc62:	f7ff be1a 	b.w	1f89a <z_reschedule_irqlock>
   1fc66:	bd10      	pop	{r4, pc}

0001fc68 <clear_event_registrations>:
	for (; last_registered >= 0; last_registered--) {
   1fc68:	2314      	movs	r3, #20
{
   1fc6a:	b570      	push	{r4, r5, r6, lr}
   1fc6c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1fc70:	2400      	movs	r4, #0
   1fc72:	2601      	movs	r6, #1
	for (; last_registered >= 0; last_registered--) {
   1fc74:	2900      	cmp	r1, #0
   1fc76:	da00      	bge.n	1fc7a <clear_event_registrations+0x12>
}
   1fc78:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1fc7a:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   1fc7c:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   1fc7e:	f003 030f 	and.w	r3, r3, #15
   1fc82:	2b04      	cmp	r3, #4
   1fc84:	d80b      	bhi.n	1fc9e <clear_event_registrations+0x36>
   1fc86:	fa06 f303 	lsl.w	r3, r6, r3
   1fc8a:	f013 0f16 	tst.w	r3, #22
   1fc8e:	d006      	beq.n	1fc9e <clear_event_registrations+0x36>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1fc90:	6803      	ldr	r3, [r0, #0]
   1fc92:	b123      	cbz	r3, 1fc9e <clear_event_registrations+0x36>
	node->prev->next = node->next;
   1fc94:	6845      	ldr	r5, [r0, #4]
   1fc96:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1fc98:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1fc9a:	e9c0 4400 	strd	r4, r4, [r0]
	__asm__ volatile(
   1fc9e:	f382 8811 	msr	BASEPRI, r2
   1fca2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1fca6:	f04f 0320 	mov.w	r3, #32
   1fcaa:	f3ef 8211 	mrs	r2, BASEPRI
   1fcae:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   1fcb2:	3901      	subs	r1, #1
   1fcb4:	3814      	subs	r0, #20
   1fcb6:	e7dd      	b.n	1fc74 <clear_event_registrations+0xc>

0001fcb8 <signal_poll_event>:
	if (!event->poller) {
   1fcb8:	6883      	ldr	r3, [r0, #8]
{
   1fcba:	b570      	push	{r4, r5, r6, lr}
   1fcbc:	4605      	mov	r5, r0
   1fcbe:	460e      	mov	r6, r1
	if (!event->poller) {
   1fcc0:	b1cb      	cbz	r3, 1fcf6 <signal_poll_event+0x3e>
	event->poller->is_polling = false;
   1fcc2:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   1fcc4:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = false;
   1fcc6:	711a      	strb	r2, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1fcc8:	7b63      	ldrb	r3, [r4, #13]
   1fcca:	079a      	lsls	r2, r3, #30
   1fccc:	d513      	bpl.n	1fcf6 <signal_poll_event+0x3e>
	if (z_is_thread_timeout_expired(thread)) {
   1fcce:	6a23      	ldr	r3, [r4, #32]
   1fcd0:	3302      	adds	r3, #2
   1fcd2:	d01a      	beq.n	1fd0a <signal_poll_event+0x52>
	z_unpend_thread(thread);
   1fcd4:	4620      	mov	r0, r4
   1fcd6:	f7ff fdf7 	bl	1f8c8 <z_unpend_thread>
	z_set_thread_return_value(thread,
   1fcda:	2e08      	cmp	r6, #8
   1fcdc:	bf0c      	ite	eq
   1fcde:	f06f 0303 	mvneq.w	r3, #3
   1fce2:	2300      	movne	r3, #0
   1fce4:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1fce6:	7b63      	ldrb	r3, [r4, #13]
   1fce8:	06db      	lsls	r3, r3, #27
   1fcea:	d104      	bne.n	1fcf6 <signal_poll_event+0x3e>
	if (!z_is_thread_ready(thread)) {
   1fcec:	69a3      	ldr	r3, [r4, #24]
   1fcee:	b913      	cbnz	r3, 1fcf6 <signal_poll_event+0x3e>
		z_add_thread_to_ready_q(thread);
   1fcf0:	4620      	mov	r0, r4
   1fcf2:	f7f6 fe63 	bl	169bc <z_add_thread_to_ready_q>
	event->state |= state;
   1fcf6:	68eb      	ldr	r3, [r5, #12]
   1fcf8:	f3c3 3204 	ubfx	r2, r3, #12, #5
   1fcfc:	4316      	orrs	r6, r2
	event->poller = NULL;
   1fcfe:	2000      	movs	r0, #0
	event->state |= state;
   1fd00:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   1fd04:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1fd06:	60eb      	str	r3, [r5, #12]
}
   1fd08:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1fd0a:	f06f 000a 	mvn.w	r0, #10
   1fd0e:	e7fb      	b.n	1fd08 <signal_poll_event+0x50>

0001fd10 <add_event>:
{
   1fd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd12:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1fd14:	e9d0 2300 	ldrd	r2, r3, [r0]
   1fd18:	4290      	cmp	r0, r2
   1fd1a:	4604      	mov	r4, r0
   1fd1c:	460d      	mov	r5, r1
   1fd1e:	d106      	bne.n	1fd2e <add_event+0x1e>
	node->prev = list->tail;
   1fd20:	6863      	ldr	r3, [r4, #4]
   1fd22:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1fd24:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1fd26:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   1fd28:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1fd2a:	6065      	str	r5, [r4, #4]
}
   1fd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1fd2e:	2b00      	cmp	r3, #0
   1fd30:	d0f6      	beq.n	1fd20 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1fd32:	689b      	ldr	r3, [r3, #8]
   1fd34:	6839      	ldr	r1, [r7, #0]
   1fd36:	6818      	ldr	r0, [r3, #0]
   1fd38:	f7ff fd73 	bl	1f822 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1fd3c:	2800      	cmp	r0, #0
   1fd3e:	d1ef      	bne.n	1fd20 <add_event+0x10>
	return list->head == list;
   1fd40:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fd42:	42b4      	cmp	r4, r6
   1fd44:	d0ec      	beq.n	1fd20 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1fd46:	2e00      	cmp	r6, #0
   1fd48:	d0ea      	beq.n	1fd20 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1fd4a:	68b3      	ldr	r3, [r6, #8]
   1fd4c:	6838      	ldr	r0, [r7, #0]
   1fd4e:	6819      	ldr	r1, [r3, #0]
   1fd50:	f7ff fd67 	bl	1f822 <z_is_t1_higher_prio_than_t2>
   1fd54:	b128      	cbz	r0, 1fd62 <add_event+0x52>
	node->prev = successor->prev;
   1fd56:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1fd58:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1fd5c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1fd5e:	6075      	str	r5, [r6, #4]
			return;
   1fd60:	e7e4      	b.n	1fd2c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1fd62:	6863      	ldr	r3, [r4, #4]
   1fd64:	429e      	cmp	r6, r3
   1fd66:	d0db      	beq.n	1fd20 <add_event+0x10>
   1fd68:	6836      	ldr	r6, [r6, #0]
   1fd6a:	e7ec      	b.n	1fd46 <add_event+0x36>

0001fd6c <z_handle_obj_poll_events>:
	return list->head == list;
   1fd6c:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1fd6e:	4298      	cmp	r0, r3
   1fd70:	d009      	beq.n	1fd86 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1fd72:	e9d3 2000 	ldrd	r2, r0, [r3]
   1fd76:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   1fd78:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   1fd7a:	2200      	movs	r2, #0
	node->prev = NULL;
   1fd7c:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   1fd80:	4618      	mov	r0, r3
   1fd82:	f7ff bf99 	b.w	1fcb8 <signal_poll_event>
}
   1fd86:	4770      	bx	lr

0001fd88 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   1fd88:	4770      	bx	lr
